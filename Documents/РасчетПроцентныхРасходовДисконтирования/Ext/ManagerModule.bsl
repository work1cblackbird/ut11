#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("ОборотныеРегистрыУправленческогоУчета");
	МеханизмыДокумента.Добавить("УчетДоходовРасходов");
	МеханизмыДокумента.Добавить("УчетПрочихАктивовПассивов");
	РасчетПроцентныхРасходовДисконтированияЛокализация.ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента);
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка, ДокументОбъект - ссылка на документ или объект, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура - коллекция элементов:
//     * ТаблицаИмяРегистра - ТаблицаЗначений - таблица данных для отражения в регистр.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Если ТипЗнч(Документ) = Тип("ДокументОбъект.РасчетПроцентныхРасходовДисконтирования") Тогда
		ДокументСсылка = Документ.Ссылка;
	Иначе
		ДокументСсылка = Документ;
	КонецЕсли;
	
	Запрос			= Новый Запрос;
	ТекстыЗапроса	= Новый СписокЗначений;
	
	Если НЕ ДопПараметры.ПолучитьТекстыЗапроса Тогда
		////////////////////////////////////////////////////////////////////////////
		// Создадим запрос инициализации движений
		
		ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
		РасчетПроцентныхРасходовДисконтирования(Запрос, ДокументСсылка);
		
		////////////////////////////////////////////////////////////////////////////
		// Сформируем текст запроса
		
		ТекстЗапросаТаблицаПроцентныеРасходыДисконтирования(ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаПрочиеРасходы(ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаДвиженияКонтрагентДоходыРасходы(ТекстыЗапроса, Регистры);
		РасчетПроцентныхРасходовДисконтированияЛокализация.ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры);
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////
	// Получим таблицы для движений
	
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

#КонецОбласти

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
		
	РасчетПроцентныхРасходовДисконтированияЛокализация.ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры);

КонецПроцедуры

// Добавляет команду создания документа "Расчет курсовых разниц".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
// 	Неопределено
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.РасчетПроцентныхРасходовДисконтирования) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.РасчетПроцентныхРасходовДисконтирования.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.РасчетПроцентныхРасходовДисконтирования);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьНесколькоВалют";
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	КомандаОтчет = Отчеты.СправкаРасчетСписанияПроцентныхРасходовДисконтирования.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.ВидимостьВФормах = "ФормаДокумента,ФормаСписка";
	КонецЕсли;	
	
	
	РасчетПроцентныхРасходовДисконтированияЛокализация.ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры);

КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область РасчетПроцентныхРасходовДисконтирования

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
// 
// Параметры:
// 	ТаблицаЭтапов - (См. Обработки.ОперацииЗакрытияМесяца.ЗаполнитьОписаниеЭтаповЗакрытияМесяца)
// 	ТекущийРодитель - Строка - идентификатор группы.
Процедура ДобавитьЭтап_РасчетПроцентныхРасходовДисконтирования(ТаблицаЭтапов,ТекущийРодитель) Экспорт
	
	ФормироватьРезервыПредстоящихРасходов = Истина;
	Если ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов")
		Или ФормироватьРезервыПредстоящихРасходов Тогда
		НоваяСтрока = ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
			Перечисления.ОперацииЗакрытияМесяца.РасчетПроцентныхРасходовДисконтирования);
		НоваяСтрока.ДействиеИспользование = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
			"Документы.РасчетПроцентныхРасходовДисконтирования.Использование_РасчетПроцентныхРасходовДисконтирования");
		НоваяСтрока.ДействиеОформление = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
			"Документы.РасчетПроцентныхРасходовДисконтирования.Оформление_РасчетПроцентныхРасходовДисконтирования");
		НоваяСтрока.ДействиеВыполнить = ЗакрытиеМесяцаСервер.ОписаниеДействия_ВыполнитьРасчет(
			"Документы.РасчетПроцентныхРасходовДисконтирования.Выполнить_РасчетПроцентныхРасходовДисконтирования");
			НоваяСтрока.ВыполняетсяПриПредварительномЗакрытииМесяца = Истина;
		НоваяСтрока.ДействиеПодробнее = ЗакрытиеМесяцаСервер.ОписаниеДействия_ОткрытьФорму(
			"Отчет.СправкаРасчетСписанияПроцентныхРасходовДисконтирования.ФормаОбъекта");
	КонецЕсли;
КонецПроцедуры

// Обработчики этапа.

// Параметры:
// 	ПараметрыОбработчика - см. Обработки.ОперацииЗакрытияМесяца.ИнициализироватьПараметрыОбработчикаЭтапа
Процедура Использование_РасчетПроцентныхРасходовДисконтирования(ПараметрыОбработчика) Экспорт
	
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	ПериодВДиапазонеПересчета = ЗакрытиеМесяцаСервер.ПроверитьНаличиеЗаданийКЗакрытиюМесяца(ПараметрыОбработчика, Истина);
		ПараметрыОбработчика.ТаблицаПояснения.Очистить(); 
		
	Запрос = Новый Запрос;
	ЗакрытиеМесяцаСервер.ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПроцентныеРасходыДисконтирования.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
		|ИЗ
		|	РегистрНакопления.ПроцентныеРасходыДисконтирования КАК ПроцентныеРасходыДисконтирования
		|ГДЕ
		|	ПроцентныеРасходыДисконтирования.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	И ПроцентныеРасходыДисконтирования.Активность
		|	И ТИПЗНАЧЕНИЯ(ПроцентныеРасходыДисконтирования.Регистратор) = ТИП(Документ.РасчетПроцентныхРасходовДисконтирования)
		|	И ПроцентныеРасходыДисконтирования.АналитикаУчетаПоПартнерам.Организация В(&МассивОрганизаций)
		|	И ПроцентныеРасходыДисконтирования.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПроцентныеРасходыДисконтированияОстатки.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
		|ИЗ
		|	РегистрНакопления.ПроцентныеРасходыДисконтирования.Остатки(&ГраницаКонецПериода,
		|		АналитикаУчетаПоПартнерам.Организация В (&МассивОрганизаций)) КАК ПроцентныеРасходыДисконтированияОстатки
		|";
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ЕстьСписаниеПроцентныхРасходовРезервов = Истина;
	НетПроцентовКСписаниюРезервов = Истина;
	
	ЕстьСписаниеПроцентныхРасходов = Не РезультатЗапроса[0].Пустой() И ЕстьСписаниеПроцентныхРасходовРезервов;
	НетПроцентовКСписанию = РезультатЗапроса[1].Пустой() И НетПроцентовКСписаниюРезервов;
	
	ТребуетсяПереоценка = Документы.РасчетКурсовыхРазниц.ТребуетсяПереоценка(
		ПараметрыРасчета.МассивОрганизаций,
		ПараметрыРасчета.КонецПериода,
		Новый Структура("ПроцентныеРасходыДисконтирования"));
	
	Если Не ТребуетсяПереоценка И Не ПериодВДиапазонеПересчета Тогда
		
		Если ЕстьСписаниеПроцентныхРасходов Тогда
			
			// обработчик выполнен
			
		ИначеЕсли НетПроцентовКСписанию Тогда
			
			// Расчет не требуется.
			ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
				ПараметрыОбработчика,
				НСтр("ru = 'Нет процентных расходов дисконтирования к списанию.'", ОбщегоНазначения.КодОсновногоЯзыка()));
			
		КонецЕсли;
		
	Иначе
		
		Если ПериодВДиапазонеПересчета Тогда
			
			НачалоРасчета = ЗакрытиеМесяцаСервер.НачалоРасчета(
				ПараметрыОбработчика.ДанныеЭтапа.Код,
				ПараметрыОбработчика.ПараметрыРасчета.КонецПериода,
				Неопределено,
				ПараметрыРасчета.МассивОрганизаций);
			ТекстОперации = НСтр("ru = 'Формирование движений по процентным расходам дисконтирования начиная с периода %1'", ОбщегоНазначения.КодОсновногоЯзыка());
			
			ЗакрытиеМесяцаСервер.УстановитьСостояниеНеВыполнен(
				ПараметрыОбработчика,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстОперации,
					РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(НачалоРасчета)));
			
		КонецЕсли;
		
		Если ТребуетсяПереоценка Тогда
			
			ДействиеПодробнее = ЗакрытиеМесяцаСервер.ОписаниеДействия_ОткрытьФорму(
				Метаданные.Отчеты.СправкаРасчетПереоценкиВалютныхСредств.ПолноеИмя() + ".Форма", Истина);
			ДействиеПодробнее.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
			ДействиеПодробнее.ПараметрыФормы.Вставить("ВсеОрганизации", НЕ ЗначениеЗаполнено(ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций));
			
			Если ПериодВДиапазонеПересчета Тогда
				ЗакрытиеМесяцаСервер.УстановитьСостояниеНеВыполнен(
					ПараметрыОбработчика,
					НСтр("ru = 'Расчет курсовых разниц по процентным расходам дисконтирования.'", ОбщегоНазначения.КодОсновногоЯзыка()),
					ЗакрытиеМесяцаСервер.ТекстПодробнееПоУмолчанию(),
					ДействиеПодробнее);
			Иначе
				ЗакрытиеМесяцаСервер.УстановитьСостояниеВыполненСОшибками(
					ПараметрыОбработчика,
					НСтр("ru = 'Расчет курсовых разниц по процентным расходам дисконтирования.'", ОбщегоНазначения.КодОсновногоЯзыка()),
					ЗакрытиеМесяцаСервер.ТекстПодробнееПоУмолчанию(),
					ДействиеПодробнее);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
// 	ПараметрыОбработчика - см. Обработки.ОперацииЗакрытияМесяца.ИнициализироватьПараметрыОбработчикаЭтапа
Процедура Оформление_РасчетПроцентныхРасходовДисконтирования(ПараметрыОбработчика) Экспорт
	
	ПараметрыОбработчика.ДанныеЭтапа.Наименование = НСтр("ru = 'Расчет процентных расходов дисконтирования'");
	ПараметрыОбработчика.ДанныеЭтапа.ТекстВыполнить = НСтр("ru = 'Выполнить'");
	
КонецПроцедуры

Процедура Выполнить_РасчетПроцентныхРасходовДисконтирования(ПараметрыОбработчика) Экспорт
	
	ИспользуетсяНоваяАрхитектураВзаиморасчетов = ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов");
	
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;

	НачалоРасчета = ЗакрытиеМесяцаСервер.НачалоРасчета(
		ПараметрыОбработчика.ДанныеЭтапа.Код,
		ПараметрыРасчета.КонецПериода,
		,
		ПараметрыРасчета.МассивОрганизаций);
				
	ИмяКлючевойОперации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"ЗакрытиеМесяца.%1",
			СокрЛП(ПараметрыОбработчика.ДанныеЭтапа.Код));
	ОписаниеЗамера 		= ОценкаПроизводительности.НачатьЗамерДлительнойОперации(ИмяКлючевойОперации);
	КоличествоДанных	= 0;
	
	Пока НачалоРасчета <= ПараметрыОбработчика.ПараметрыРасчета.КонецПериода Цикл
	
		НомерЗадания 	 	= ЗакрытиеМесяцаСервер.УвеличитьНомерЗадания();
		ОкончаниеПериода 	= КонецМесяца(НачалоРасчета);
		ДоступныеОрганизации = ЗакрытиеМесяцаСервер.ДоступныеДляРасчетаОрганизации(НачалоРасчета, ПараметрыРасчета.МассивОрганизаций);
		
		НачатьТранзакцию();
		
		Попытка
			
			ЗакрытиеМесяцаСервер.ЗаблокироватьРегистрЗаданий(
				НомерЗадания,
				ДоступныеОрганизации,
				ПараметрыОбработчика.ДанныеЭтапа.Код);
			
			ДанныеКРасчетуЗаМесяц = ЗакрытиеМесяцаСервер.ЗаданияКРасчетуЗаМесяц(
				НачалоРасчета,
				ОкончаниеПериода,
				НомерЗадания,
				ДоступныеОрганизации,
				ПараметрыОбработчика.ДанныеЭтапа.Код);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При выполнении расчета за период %1 произошла ошибка:
					|%2'", ОбщегоНазначения.КодОсновногоЯзыка()),
				РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗакрытиеМесяцаСервер.ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
				ПараметрыОбработчика,
				ТекстОшибки,
				ДоступныеОрганизации,
				НачалоРасчета);
			
		КонецПопытки;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
		Запрос.МенеджерВременныхТаблиц = ДанныеКРасчетуЗаМесяц.ВременныеТаблицы;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	РасчетПроцентныхРасходов.Организация КАК Организация,
			|	РасчетПроцентныхРасходов.Ссылка КАК Ссылка
			|ПОМЕСТИТЬ ВтРеглОперации
			|ИЗ
			|	Документ.РасчетПроцентныхРасходовДисконтирования КАК РасчетПроцентныхРасходов
			|ГДЕ
			|	НЕ РасчетПроцентныхРасходов.ПометкаУдаления
			|	И РасчетПроцентныхРасходов.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&ОкончаниеПериода, МЕСЯЦ) И &ОкончаниеПериода
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КэшГраниц.Организация КАК Организация,
			|	ЕСТЬNULL(ВтРеглОперации.Ссылка, ЗНАЧЕНИЕ(Документ.РасчетПроцентныхРасходовДисконтирования.ПустаяСсылка)) КАК РасчетПроцентныхРасходов
			|ИЗ
			|	КэшГраниц КАК КэшГраниц
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВтРеглОперации КАК ВтРеглОперации
			|		ПО КэшГраниц.Организация = ВтРеглОперации.Организация
			|ИТОГИ ПО
			|	Организация
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВтРеглОперации";
		
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаПоОрганизациям = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ОрганизацииКСписаниюПроцентовВСледующемПериоде = Новый Массив;
		
		Пока ВыборкаПоОрганизациям.Следующий() Цикл
			
			ВыборкаПоДокументам = ВыборкаПоОрганизациям.Выбрать();
			Пока ВыборкаПоДокументам.Следующий() Цикл
				Если НЕ ВыборкаПоДокументам.РасчетПроцентныхРасходов.Пустая() Тогда
					ДокументЗакрытияМесяца = ВыборкаПоДокументам.РасчетПроцентныхРасходов.ПолучитьОбъект();
					ДокументЗакрытияМесяца.ДополнительныеСвойства.Вставить("ЗакрытиеМесяца", Истина);
					ДокументЗакрытияМесяца.УстановитьПометкуУдаления(Истина);
				Иначе
					ДокументЗакрытияМесяца = Документы.РасчетПроцентныхРасходовДисконтирования.СоздатьДокумент();
				КонецЕсли;
			КонецЦикла;
			
			Если Не ДокументЗакрытияМесяца.Ссылка.Пустая() Тогда
				ДокументЗакрытияМесяца.УстановитьПометкуУдаления(Ложь);
			КонецЕсли;
			ДокументЗакрытияМесяца.Дата = ОкончаниеПериода;
			ДокументЗакрытияМесяца.Организация = ВыборкаПоОрганизациям.Организация;
			
			ДокументЗакрытияМесяца.Записать(РежимЗаписиДокумента.Проведение);
			
			КоличествоДанных = КоличествоДанных + 1;
			
		КонецЦикла;
		
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КлючиАналитикиУчетаПоПартнерам.Организация
			|ИЗ
			|	РегистрНакопления.ПроцентныеРасходыДисконтирования.Остатки КАК ПроцентныеРасходыДисконтированияОстатки
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК КлючиАналитикиУчетаПоПартнерам
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ КэшГраниц КАК КэшГраниц
			|			ПО КлючиАналитикиУчетаПоПартнерам.Организация = КэшГраниц.Организация
			|		ПО ПроцентныеРасходыДисконтированияОстатки.АналитикаУчетаПоПартнерам = КлючиАналитикиУчетаПоПартнерам.Ссылка
			|";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ОрганизацииКСписаниюПроцентовВСледующемПериоде.Добавить(Выборка.Организация);
		КонецЦикла;
		
		НачатьТранзакцию();
		
		Попытка
			
			ЗакрытиеМесяцаСервер.ЗаблокироватьРегистрЗаданий(
				НомерЗадания,
				ДоступныеОрганизации,
				ПараметрыОбработчика.ДанныеЭтапа.Код);
			
			ЗакрытиеМесяцаСервер.ЗафиксироватьРасчет(
				Неопределено,
				ПараметрыОбработчика.ДанныеЭтапа.Код,
				ДанныеКРасчетуЗаМесяц.ВременныеТаблицы);
				
			Запрос.УстановитьПараметр("Организации", ОрганизацииКСписаниюПроцентовВСледующемПериоде);
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	*
				|ПОМЕСТИТЬ ВтКэшГраниц
				|ИЗ
				|	КэшГраниц КАК КэшГраниц
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ КэшГраниц
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	*
				|ПОМЕСТИТЬ КэшГраниц
				|ИЗ
				|	ВтКэшГраниц КАК ВтКэшГраниц
				|ГДЕ
				|	ВтКэшГраниц.Организация В(&Организации)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ ВтКэшГраниц";
			Запрос.Выполнить();
			
			РегистрыСведений.ЗаданияКЗакрытиюМесяца.СформироватьЗаданияНаСледующийПериод(
				Запрос.МенеджерВременныхТаблиц,
				ОкончаниеПериода + 1);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При выполнении расчета за период %1 произошла ошибка:
					|%2'", ОбщегоНазначения.КодОсновногоЯзыка()),
				РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗакрытиеМесяцаСервер.ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
				ПараметрыОбработчика,
				ТекстОшибки,
				ДоступныеОрганизации,
				НачалоРасчета);
			
		КонецПопытки;
		
		Если ИспользуетсяНоваяАрхитектураВзаиморасчетов Тогда
			ТребуетсяПереоценка = Документы.РасчетКурсовыхРазниц.ТребуетсяПереоценка(
				ДоступныеОрганизации,
				ПараметрыРасчета.КонецПериода,
				Новый Структура("ПроцентныеРасходыДисконтирования"));
			
			Если ТребуетсяПереоценка Тогда
				Документы.РасчетКурсовыхРазниц.ПереоценитьСуммыДисконтирования(
					ДоступныеОрганизации,
					НачалоРасчета);
			КонецЕсли;
		КонецЕсли;
		
		НачалоРасчета = ОкончаниеПериода + 1;
		
	КонецЦикла;
	
	Если ИспользуетсяНоваяАрхитектураВзаиморасчетов Тогда
		// контрольная переоценка, если не было
		ТребуетсяПереоценка = Документы.РасчетКурсовыхРазниц.ТребуетсяПереоценка(
			ДоступныеОрганизации,
			ПараметрыРасчета.КонецПериода,
			Новый Структура("ПроцентныеРасходыДисконтирования"));
			
		Если ТребуетсяПереоценка Тогда
			Документы.РасчетКурсовыхРазниц.ПереоценитьСуммыДисконтирования(
				ДоступныеОрганизации,
				ПараметрыРасчета.КонецПериода);
		КонецЕсли;
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоДанных);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.Организация КАК Организация,
	|	Организации.ГоловнаяОрганизация КАК ГоловнаяОрганизация
	|ИЗ
	|	Документ.РасчетПроцентныхРасходовДисконтирования КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ДанныеДокумента.Организация = Организации.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	КонецПериода = КонецМесяца(Реквизиты.Дата);
	НачалоПериода = НачалоМесяца(Реквизиты.Дата);
	Запрос.УстановитьПараметр("Период",                   Реквизиты.Дата);
	Запрос.УстановитьПараметр("КонецПериода",             КонецПериода);
	Запрос.УстановитьПараметр("НачалоПериода",            НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериодаВключая",      Новый Граница(КонецПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("НачалоСледующегоПериода",  НачалоМесяца(ДобавитьМесяц(КонецПериода, 1)));
	Запрос.УстановитьПараметр("Организация",              Реквизиты.Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",      Реквизиты.ГоловнаяОрганизация);

	РасчетСебестоимостиПрикладныеАлгоритмы.ЗаполнитьПараметрыИнициализации(Запрос, Реквизиты);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаПроцентныеРасходыДисконтирования(ТекстыЗапроса, Регистры = Неопределено)

	ИмяРегистра = "ПроцентныеРасходыДисконтирования";
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Таблица.ВидДвижения КАК ВидДвижения,
	|	Таблица.Период КАК Период,
	|	Таблица.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Таблица.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Таблица.Валюта КАК Валюта,
	|	Таблица.РасчетныйДокумент КАК РасчетныйДокумент,
	|
	|	Таблица.СуммаДисконтирования КАК СуммаДисконтирования,
	|	Таблица.СуммаДисконтированияРегл КАК СуммаДисконтированияРегл,
	|	Таблица.СуммаДисконтированияУпр КАК СуммаДисконтированияУпр,
	|
	|	Таблица.СтавкаДисконтирования КАК СтавкаДисконтирования,
	|	Таблица.ФактическаяЗадолженностьБезНДС КАК ФактическаяЗадолженностьБезНДС,
	|	Таблица.ДисконтированнаяЗадолженностьБезНДС КАК ДисконтированнаяЗадолженностьБезНДС,
	|	Таблица.РассчитанныйОстатокПроцентов КАК РассчитанныйОстатокПроцентов,
	|
	|	Таблица.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	Таблица.НастройкаХозяйственнойОперации КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	&ИмяВт КАК Таблица
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяВт", "Таблица" + ИмяРегистра);
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(ТекстыЗапроса)

	ИмяРегистра = "ВтИсходныеПрочиеРасходы";
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстОписаниеВтИсходныеПрочиеРасходы();
	ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" + "
	|ВЫБРАТЬ
	|	Таблица.Период КАК Период,
	|	Таблица.ВидДвижения КАК ВидДвижения,
	|	Таблица.Организация КАК Организация,
	|	Таблица.Подразделение КАК Подразделение,
	|	Таблица.СтатьяРасходов КАК СтатьяРасходов,
	|	Таблица.АналитикаРасходов КАК АналитикаРасходов,
	|	Таблица.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка) КАК ВидДеятельностиНДС,
	|
	|	Таблица.СуммаУпр КАК СуммаСНДС,
	|	Таблица.СуммаУпр КАК СуммаБезНДС,
	|	Таблица.СуммаУпр КАК СуммаБезНДСУпр,
	|	Таблица.СуммаРегл КАК СуммаСНДСРегл,
	|	Таблица.СуммаРегл КАК СуммаБезНДСРегл,
	|	0 КАК ПостояннаяРазница,
	|	Таблица.ВременнаяРазница КАК ВременнаяРазница,
	|
	|	Таблица.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	Таблица.АналитикаУчетаНоменклатуры,
	|	Таблица.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	Таблица.НастройкаХозяйственнойОперации КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	ТаблицаПрочиеРасходы КАК Таблица
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтПрочиеРасходы(ТекстыЗапроса)
	
	ИмяРегистра = "ВтПрочиеРасходы";
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтИсходныеПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаВтПрочиеРасходы();
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПрочиеРасходы(ТекстыЗапроса, Регистры = Неопределено)
	
	ИмяРегистра = "ПрочиеРасходы";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтПрочиеРасходы(ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаПрочиеРасходы();
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвиженияКонтрагентДоходыРасходы(ТекстыЗапроса, Регистры = Неопределено)

	ИмяРегистра = "ДвиженияКонтрагентДоходыРасходы";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;

	//Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("втДвиженияКонтрагентДоходыРасходы", ТекстыЗапроса) Тогда
	//	ТекстЗапросаВтДвиженияКонтрагентДоходыРасходы(ТекстыЗапроса);
	//КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Таблица.Период КАК Период,
	|	Таблица.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	Таблица.Организация КАК Организация,
	|	Таблица.Подразделение КАК Подразделение,
	|
	|	Таблица.Партнер КАК Партнер,
	|	Таблица.Контрагент КАК Контрагент,
	|	Таблица.НаправлениеДеятельностиКонтрагента КАК НаправлениеДеятельностиКонтрагента,
	|
	|	Таблица.Договор КАК Договор,
	|	Таблица.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Таблица.НаправлениеДеятельностиСтатьи КАК НаправлениеДеятельностиСтатьи,
	|	Таблица.СтатьяДоходовРасходов КАК СтатьяДоходовРасходов,
	|	Таблица.АналитикаДоходов КАК АналитикаДоходов,
	|	Таблица.АналитикаРасходов КАК АналитикаРасходов,
	|	Таблица.Валюта КАК Валюта,
	|	Таблица.СуммаВВалюте КАК СуммаВВалюте,
	|	Таблица.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Таблица.СуммаВВалютеВзаиморасчетов КАК СуммаВВалютеВзаиморасчетов,
	|	Таблица.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|
	|	Таблица.Сумма КАК Сумма,
	|	Таблица.СуммаБезНДС КАК СуммаБезНДС,
	|	Таблица.СуммаРегл КАК СуммаРегл,
	|	Таблица.СуммаРеглБезНДС КАК СуммаРеглБезНДС,
	|
	|	Таблица.ИсточникГФУРасчетов КАК ИсточникГФУРасчетов
	|ИЗ
	|	&ИмяВт КАК Таблица
	|
	|УПОРЯДОЧИТЬ ПО
	|	Таблица.Период";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяВт", "Таблица" + ИмяРегистра);
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции


#КонецОбласти

#Область РасчетПроцентныхРасходовДисконтирования

Процедура РасчетПроцентныхРасходовДисконтирования(Запрос, ДокументСсылка)
	// Предварительно нужно распровести Расчет курсовых разниц по операции ПереоценкаСуммДисконтирования
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасчетКурсовыхРазниц.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РасчетКурсовыхРазниц КАК РасчетКурсовыхРазниц
	|ГДЕ
	|	РасчетКурсовыхРазниц.Проведен
	|	И РасчетКурсовыхРазниц.Дата = &КонецПериода
	|	И РасчетКурсовыхРазниц.Организация = &Организация
	|	И РасчетКурсовыхРазниц.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереоценкаСуммДисконтирования)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументПереоценки = Выборка.Ссылка.ПолучитьОбъект(); // ДокументОбъект.РасчетКурсовыхРазниц
		ДокументПереоценки.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	КонецЦикла; 
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетнаяПолитикаФинансовогоУчета.СтатьяСписанияПроцентныхРасходов КАК СтатьяСписания,
	|	УчетнаяПолитикаФинансовогоУчета.АналитикаСписанияПроцентныхРасходов КАК АналитикаСписания
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаФинансовогоУчета.СрезПоследних(&КонецПериода, Организация = &ГоловнаяОрганизация) КАК УчетнаяПолитикаФинансовогоУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроцентныеРасходыДисконтированияОстатки.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ПроцентныеРасходыДисконтированияОстатки.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ПроцентныеРасходыДисконтированияОстатки.Валюта КАК Валюта,
	|	ПроцентныеРасходыДисконтированияОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ПроцентныеРасходыДисконтированияОстатки.СуммаДисконтированияОстаток КАК СуммаДисконтированияОстаток,
	|	ПроцентныеРасходыДисконтированияОстатки.СуммаДисконтированияРеглОстаток КАК СуммаДисконтированияРеглОстаток,
	|	ПроцентныеРасходыДисконтированияОстатки.СуммаДисконтированияУпрОстаток КАК СуммаДисконтированияУпрОстаток,
	|	ПроцентныеРасходыДисконтированияОстатки.АналитикаУчетаПоПартнерам.Договор КАК Договор
	|ПОМЕСТИТЬ ВтОстаткиПроцентов
	|ИЗ
	|	РегистрНакопления.ПроцентныеРасходыДисконтирования.Остатки(&КонецПериодаВключая, АналитикаУчетаПоПартнерам.Организация = &Организация) КАК ПроцентныеРасходыДисконтированияОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаПоПартнерам,
	|	ОбъектРасчетов,
	|	Валюта,
	|	РасчетныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроцентныеРасходыДисконтированияОбороты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ПроцентныеРасходыДисконтированияОбороты.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ПроцентныеРасходыДисконтированияОбороты.Валюта КАК Валюта,
	|	ПроцентныеРасходыДисконтированияОбороты.РасчетныйДокумент КАК РасчетныйДокумент,
	|	СУММА(ПроцентныеРасходыДисконтированияОбороты.СуммаДисконтированияОборот) КАК СуммаДисконтированияОборот,
	|	СУММА(ПроцентныеРасходыДисконтированияОбороты.СуммаДисконтированияРеглОборот) КАК СуммаДисконтированияРеглОборот,
	|	СУММА(ПроцентныеРасходыДисконтированияОбороты.СуммаДисконтированияУпрОборот) КАК СуммаДисконтированияУпрОборот,
	|	ПроцентныеРасходыДисконтированияОбороты.АналитикаУчетаПоПартнерам.Договор КАК Договор
	|ПОМЕСТИТЬ ВтОбороты
	|ИЗ
	|	РегистрНакопления.ПроцентныеРасходыДисконтирования.Обороты(&КонецПериода, &КонецПериода, Регистратор, АналитикаУчетаПоПартнерам.Организация = &Организация) КАК ПроцентныеРасходыДисконтированияОбороты
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ПроцентныеРасходыДисконтированияОбороты.Регистратор) = ТИП(Документ.РасчетПроцентныхРасходовДисконтирования)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроцентныеРасходыДисконтированияОбороты.АналитикаУчетаПоПартнерам,
	|	ПроцентныеРасходыДисконтированияОбороты.Валюта,
	|	ПроцентныеРасходыДисконтированияОбороты.ОбъектРасчетов,
	|	ПроцентныеРасходыДисконтированияОбороты.РасчетныйДокумент,
	|	ПроцентныеРасходыДисконтированияОбороты.АналитикаУчетаПоПартнерам.Договор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаПоПартнерам,
	|	ОбъектРасчетов,
	|	Валюта,
	|	РасчетныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВтОстаткиПроцентов.АналитикаУчетаПоПартнерам, ВтОбороты.АналитикаУчетаПоПартнерам) КАК АналитикаУчетаПоПартнерам,
	|	ЕСТЬNULL(ВтОстаткиПроцентов.ОбъектРасчетов, ВтОбороты.ОбъектРасчетов) КАК ОбъектРасчетов,
	|	ЕСТЬNULL(ВтОстаткиПроцентов.Валюта, ВтОбороты.Валюта) КАК Валюта,
	|	ЕСТЬNULL(ВтОстаткиПроцентов.РасчетныйДокумент, ВтОбороты.РасчетныйДокумент) КАК РасчетныйДокумент,
	|	ЕСТЬNULL(ВтОстаткиПроцентов.СуммаДисконтированияОстаток, 0) - ЕСТЬNULL(ВтОбороты.СуммаДисконтированияОборот, 0) КАК СуммаДисконтированияОстаток,
	|	ЕСТЬNULL(ВтОстаткиПроцентов.СуммаДисконтированияРеглОстаток, 0) - ЕСТЬNULL(ВтОбороты.СуммаДисконтированияРеглОборот, 0) КАК СуммаДисконтированияРеглОстаток,
	|	ЕСТЬNULL(ВтОстаткиПроцентов.СуммаДисконтированияУпрОстаток, 0) - ЕСТЬNULL(ВтОбороты.СуммаДисконтированияУпрОборот, 0) КАК СуммаДисконтированияУпрОстаток,
	|	ЕСТЬNULL(ВтОстаткиПроцентов.Договор, ВтОбороты.Договор) КАК Договор
	|ПОМЕСТИТЬ ВтОстаткиПроцентовДоп
	|ИЗ
	|	ВтОстаткиПроцентов КАК ВтОстаткиПроцентов
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВтОбороты КАК ВтОбороты
	|		ПО ВтОстаткиПроцентов.АналитикаУчетаПоПартнерам = ВтОбороты.АналитикаУчетаПоПартнерам
	|			И ВтОстаткиПроцентов.ОбъектРасчетов = ВтОбороты.ОбъектРасчетов
	|			И ВтОстаткиПроцентов.Валюта = ВтОбороты.Валюта
	|			И ВтОстаткиПроцентов.РасчетныйДокумент = ВтОбороты.РасчетныйДокумент
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаПоПартнерам,
	|	ОбъектРасчетов,
	|	Валюта,
	|	РасчетныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетнаяПолитикаФинансовогоУчетаСрезПоследних.УчетДисконтированнойКредиторскойЗадолженностиПоставщикам КАК УчетДисконтированнойКредиторскойЗадолженностиПоставщикам
	|ПОМЕСТИТЬ ВтПолитикаСледующегоПериода
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаФинансовогоУчета.СрезПоследних(&НачалоСледующегоПериода, Организация = &ГоловнаяОрганизация) КАК УчетнаяПолитикаФинансовогоУчетаСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтОстаткиПроцентовДоп.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ВтОстаткиПроцентовДоп.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ВтОстаткиПроцентовДоп.Валюта КАК Валюта,
	|	ВтОстаткиПроцентовДоп.РасчетныйДокумент КАК РасчетныйДокумент,
	|	СУММА(СуммыДокументовВВалютахУчета.СуммаБезНДС) КАК СуммаБезНДС,
	|	СУММА(СуммыДокументовВВалютахУчета.СуммаНДС) КАК СуммаНДС
	|ПОМЕСТИТЬ ВтСуммыНДС
	|ИЗ
	|	ВтОстаткиПроцентовДоп КАК ВтОстаткиПроцентовДоп
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СуммыДокументовВВалютахУчета КАК СуммыДокументовВВалютахУчета
	|		ПО ВтОстаткиПроцентовДоп.РасчетныйДокумент = СуммыДокументовВВалютахУчета.Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтОстаткиПроцентовДоп.АналитикаУчетаПоПартнерам,
	|	ВтОстаткиПроцентовДоп.ОбъектРасчетов,
	|	ВтОстаткиПроцентовДоп.Валюта,
	|	ВтОстаткиПроцентовДоп.РасчетныйДокумент
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаПоПартнерам,
	|	ОбъектРасчетов,
	|	Валюта,
	|	РасчетныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтОстаткиПроцентовДоп.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ВтОстаткиПроцентовДоп.Валюта КАК Валюта,
	|	ВтОстаткиПроцентовДоп.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ВтОстаткиПроцентовДоп.ОбъектРасчетов.Организация КАК Организация,
	|	ВтОстаткиПроцентовДоп.ОбъектРасчетов.Подразделение КАК Подразделение,
	|	ВтОстаткиПроцентовДоп.ОбъектРасчетов.Партнер КАК Партнер,
	|	ВтОстаткиПроцентовДоп.ОбъектРасчетов.Контрагент КАК Контрагент,
	|	ВтОстаткиПроцентовДоп.ОбъектРасчетов.Договор КАК Договор,
	|	ВтОстаткиПроцентовДоп.ОбъектРасчетов.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ВтОстаткиПроцентовДоп.РасчетныйДокумент КАК РасчетныйДокумент,
	|	РасчетыСПоставщикамиПоСрокамОстатки.ДатаПлановогоПогашения КАК ДатаПлановогоПогашения,
	|	ЕСТЬNULL(РасчетыСПоставщикамиПоСрокамОстатки.ДолгОстаток, 0) КАК ДолгОстаток,
	|	ВтОстаткиПроцентовДоп.СуммаДисконтированияОстаток КАК СуммаДисконтированияОстаток,
	|	ВтОстаткиПроцентовДоп.СуммаДисконтированияРеглОстаток КАК СуммаДисконтированияРеглОстаток,
	|	ВтОстаткиПроцентовДоп.СуммаДисконтированияУпрОстаток КАК СуммаДисконтированияУпрОстаток,
	|	НЕ ЕСТЬNULL(ВтПолитикаСледующегоПериода.УчетДисконтированнойКредиторскойЗадолженностиПоставщикам, ЛОЖЬ) КАК ДисконтированиеПрекращено,
	|	РасчетыСПоставщикамиПоСрокамОстатки.ДатаПлановогоПогашения ЕСТЬ NULL КАК ЗадолженностьЗакрыта,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.СтавкаДисконтирования, 0) КАК СтавкаДисконтирования,
	|	ЕСТЬNULL(ВтСуммыНДС.СуммаБезНДС, 0) КАК СуммаБезНДС,
	|	ЕСТЬNULL(ВтСуммыНДС.СуммаНДС, 0) + ЕСТЬNULL(ВтСуммыНДС.СуммаБезНДС, 0) КАК СуммаСНДС,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.СтавкаНДС, ЗНАЧЕНИЕ(Справочник.СтавкиНДС.БезНДС)) КАК СтавкаНДС
	|ПОМЕСТИТЬ втДанныеДляРасчета
	|ИЗ
	|	ВтОстаткиПроцентовДоп КАК ВтОстаткиПроцентовДоп
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщикамиПоСрокам.Остатки(
	|				&КонецПериодаВключая,
	|				(АналитикаУчетаПоПартнерам, ОбъектРасчетов, Валюта, РасчетныйДокумент) В
	|					(ВЫБРАТЬ
	|						ВтОстаткиПроцентовДоп.АналитикаУчетаПоПартнерам,
	|						ВтОстаткиПроцентовДоп.ОбъектРасчетов,
	|						ВтОстаткиПроцентовДоп.Валюта,
	|						ВтОстаткиПроцентовДоп.РасчетныйДокумент
	|					ИЗ
	|						ВтОстаткиПроцентовДоп)) КАК РасчетыСПоставщикамиПоСрокамОстатки
	|		ПО ВтОстаткиПроцентовДоп.АналитикаУчетаПоПартнерам = РасчетыСПоставщикамиПоСрокамОстатки.АналитикаУчетаПоПартнерам
	|			И ВтОстаткиПроцентовДоп.Валюта = РасчетыСПоставщикамиПоСрокамОстатки.Валюта
	|			И ВтОстаткиПроцентовДоп.ОбъектРасчетов = РасчетыСПоставщикамиПоСрокамОстатки.ОбъектРасчетов
	|			И ВтОстаткиПроцентовДоп.РасчетныйДокумент = РасчетыСПоставщикамиПоСрокамОстатки.РасчетныйДокумент
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО ВтОстаткиПроцентовДоп.Договор = ДоговорыКонтрагентов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСуммыНДС КАК ВтСуммыНДС
	|		ПО ВтОстаткиПроцентовДоп.АналитикаУчетаПоПартнерам = ВтСуммыНДС.АналитикаУчетаПоПартнерам
	|			И ВтОстаткиПроцентовДоп.ОбъектРасчетов = ВтСуммыНДС.ОбъектРасчетов
	|			И ВтОстаткиПроцентовДоп.Валюта = ВтСуммыНДС.Валюта
	|			И ВтОстаткиПроцентовДоп.РасчетныйДокумент = ВтСуммыНДС.РасчетныйДокумент,
	|	ВтПолитикаСледующегоПериода КАК ВтПолитикаСледующегоПериода
	|ГДЕ
	|	НЕ(ВтОстаткиПроцентовДоп.СуммаДисконтированияОстаток = 0
	|				И ВтОстаткиПроцентовДоп.СуммаДисконтированияРеглОстаток = 0
	|				И ВтОстаткиПроцентовДоп.СуммаДисконтированияУпрОстаток = 0)";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаУчетнойПолитики = РезультатЗапроса[0].Выбрать();
	СписаниеРасходов = Новый Структура("Статья,Аналитика,ХозяйственнаяОперация");
	СписаниеРасходов.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеПроцентовПоДисконтированию;
	Если ВыборкаУчетнойПолитики.Следующий() Тогда
		СписаниеРасходов.Статья = ВыборкаУчетнойПолитики.СтатьяСписания;
		СписаниеРасходов.Аналитика = ВыборкаУчетнойПолитики.АналитикаСписания;
	КонецЕсли;
	
	ОбщегоНазначенияУТ.ДобавитьИдентификаторыВоВременнуюТаблицу("втДанныеДляРасчета", Запрос.МенеджерВременныхТаблиц, "ИдентификаторФинЗаписи");
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Данные.АналитикаУчетаПоПартнерам                          КАК АналитикаУчетаПоПартнерам,
	|	Данные.Валюта                                             КАК Валюта,
	|	Данные.ОбъектРасчетов                                     КАК ОбъектРасчетов,
	|	ОбъектыРасчетов.Организация                               КАК Организация,
	|	ОбъектыРасчетов.Подразделение                             КАК Подразделение,
	|	ОбъектыРасчетов.Партнер                                   КАК Партнер,
	|	ОбъектыРасчетов.Контрагент                                КАК Контрагент,
	|	ОбъектыРасчетов.Договор                                   КАК Договор,
	|	ЕСТЬNULL(
	|		ЕСТЬNULL(
	|			ДоговорыКонтрагентов.ВариантКурсаДоговора, 
	|			ДоговорыМеждуОрганизациями.ВариантКурсаДоговора), 
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыКурсаДоговора.Переменный)) КАК ВариантКурсаДоговора,
	|	ОбъектыРасчетов.НаправлениеДеятельности                   КАК НаправлениеДеятельности,
	|	Данные.РасчетныйДокумент                                  КАК РасчетныйДокумент,
	|	Данные.ДатаПлановогоПогашения                             КАК ДатаПлановогоПогашения,
	|	Данные.ДолгОстаток                                        КАК ДолгОстаток,
	|	Данные.СуммаДисконтированияОстаток                        КАК СуммаДисконтированияОстаток,
	|	Данные.СуммаДисконтированияРеглОстаток                    КАК СуммаДисконтированияРеглОстаток,
	|	Данные.СуммаДисконтированияУпрОстаток                     КАК СуммаДисконтированияУпрОстаток,
	|	Данные.ДисконтированиеПрекращено                          КАК ДисконтированиеПрекращено,
	|	Данные.ЗадолженностьЗакрыта                               КАК ЗадолженностьЗакрыта,
	|	Данные.СтавкаДисконтирования                              КАК СтавкаДисконтирования,
	|	Данные.СуммаБезНДС                                        КАК СуммаБезНДС,
	|	Данные.СуммаСНДС                                          КАК СуммаСНДС,
	|	Данные.СтавкаНДС                                          КАК СтавкаНДС,
	|	Данные.ИдентификаторФинЗаписи                             КАК ИдентификаторФинЗаписи,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СписаниеПроцентовПоДисконтированию) КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	втДанныеДляРасчета КАК Данные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|			ПО ОбъектыРасчетов.Договор = ДоговорыКонтрагентов.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыМеждуОрганизациями КАК ДоговорыМеждуОрганизациями
	|			ПО ОбъектыРасчетов.Договор = ДоговорыМеждуОрганизациями.Ссылка
	|		ПО Данные.ОбъектРасчетов = ОбъектыРасчетов.Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	Данные.ДатаПлановогоПогашения
	|ИТОГИ
	|	МАКСИМУМ(Валюта),
	|	СУММА(ДолгОстаток),
	|	МАКСИМУМ(СуммаДисконтированияОстаток),
	|	МАКСИМУМ(ДисконтированиеПрекращено),
	|	МАКСИМУМ(ЗадолженностьЗакрыта),
	|	МАКСИМУМ(СтавкаДисконтирования),
	|	МАКСИМУМ(СуммаБезНДС),
	|	МАКСИМУМ(СуммаСНДС),
	|	МАКСИМУМ(СтавкаНДС),
	|	МАКСИМУМ(Договор),
	|	МАКСИМУМ(ВариантКурсаДоговора)
	|ПО
	|	Данные.РасчетныйДокумент,
	|	Данные.ОбъектРасчетов"; 
		
	ВыборкаПоДокументам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Организация                    = Запрос.Параметры.Организация;
	КэшКурсовВалют                 = РаботаСКурсамиВалютУТ.ИнициализироватьКэшКурсовВалют();
	КэшКурсовВалютДоговора         = РаботаСКурсамиВалютУТ.ИнициализироватьКэшКурсовВалютДоговоров();
	ВалютаУправленческогоУчета     = ЗначениеНастроекПовтИсп.ВалютаУправленческогоУчета();
	ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Организация);
	
	Движения = ПодготовитьНаборыДвижений(ДокументСсылка);
	КонецПериода = Запрос.Параметры.КонецПериода;
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		ВыборкаПоОбъектуРасчетов = ВыборкаПоДокументам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоОбъектуРасчетов.Следующий() Цикл
			
			Выборка =  ВыборкаПоОбъектуРасчетов.Выбрать();
			
			Если ВыборкаПоОбъектуРасчетов.ДолгОстаток = 0 
				Или ВыборкаПоОбъектуРасчетов.ДисконтированиеПрекращено 
				Или ВыборкаПоОбъектуРасчетов.СтавкаДисконтирования = 0 
				Или ВыборкаПоОбъектуРасчетов.ЗадолженностьЗакрыта Тогда
				// Закрыта вся задолженность или отключили дисконтирование(в т.ч. ставка дисконтирования указана 0), списываем все проценты по документу.
				Если Выборка.Следующий() Тогда 
					Если Не (Выборка.СуммаДисконтированияОстаток = 0 
						И Выборка.СуммаДисконтированияУпрОстаток = 0 
						И Выборка.СуммаДисконтированияРеглОстаток = 0) Тогда
						Движение = Движения.ПроцентныеРасходыДисконтирования.ДобавитьРасход();
						ЗаполнитьЗначенияСвойств(Движение, Выборка);
						Движение.Период = КонецПериода;
						Движение.СуммаДисконтирования = Выборка.СуммаДисконтированияОстаток;
						Движение.СуммаДисконтированияУпр = Выборка.СуммаДисконтированияУпрОстаток;
						Движение.СуммаДисконтированияРегл = Выборка.СуммаДисконтированияРеглОстаток;
						
						ДобавитьДвижениеПрочиеРасходы(Движения, Выборка, СписаниеРасходов);
						ДобавитьДвижениеКонтрагентДоходыРасходы(Движения, Выборка, СписаниеРасходов);
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				
				МассивДат  = Новый Массив;
				МассивСумм = Новый Массив;
				
				// Рассчитываем остаток процентов на дату закрытия месяца
				МассивДат.Добавить(НачалоДня(КонецПериода));
				МассивСумм.Добавить(0);
				
				Пока Выборка.Следующий() Цикл 
					Если Выборка.ДатаПлановогоПогашения <= КонецПериода Тогда
						МассивДат.Добавить(КонецПериода + 1);
					Иначе 
						МассивДат.Добавить(Выборка.ДатаПлановогоПогашения);
					КонецЕсли;  
					МассивСумм.Добавить(Выборка.ДолгОстаток);
				КонецЦикла;
				
				// Выделим часть без НДС
				Если ТипЗнч(ВыборкаПоОбъектуРасчетов.РасчетныйДокумент) = Тип("ДокументСсылка.ПервичныйДокумент") Тогда
					СтавкаНДС = УчетНДСУПКлиентСервер.ЗначениеСтавкиНДС(ВыборкаПоОбъектуРасчетов.СтавкаНДС) / 100;
					СуммаСНДС = ВыборкаПоОбъектуРасчетов.ДолгОстаток;
					СуммаБезНДС = ВыборкаПоОбъектуРасчетов.ДолгОстаток / (1 + СтавкаНДС);
				Иначе
					СуммаСНДС = ВыборкаПоОбъектуРасчетов.СуммаСНДС;
					СуммаБезНДС = ВыборкаПоОбъектуРасчетов.СуммаБезНДС;
				КонецЕсли;
				
				ДоляДолгОстаток              = ?(СуммаСНДС = 0, 0, ВыборкаПоОбъектуРасчетов.ДолгОстаток/СуммаСНДС);
				ДолгОстатокБезНДС            = Окр(СуммаБезНДС * ДоляДолгОстаток, 2);
				МассивСумм                   = ОбщегоНазначенияУТКлиентСервер.РаспределитьПропорционально(ДолгОстатокБезНДС, МассивСумм);
				ПриведеннаяСтоимость         = Окр(ФинансовыеИнструменты.ЧИСТНЗ(ВыборкаПоОбъектуРасчетов.СтавкаДисконтирования/100,
					МассивСумм, 
					МассивДат), 2);
				РассчитанныйОстатокПроцентов = ДолгОстатокБезНДС - ПриведеннаяСтоимость;
				
				Если РассчитанныйОстатокПроцентов = ВыборкаПоОбъектуРасчетов.СуммаДисконтированияОстаток Тогда
					Продолжить;
				КонецЕсли;
				
				СуммаКСписанию = ВыборкаПоОбъектуРасчетов.СуммаДисконтированияОстаток - РассчитанныйОстатокПроцентов;
				Если СуммаКСписанию = 0 Тогда
					Продолжить;
				КонецЕсли;
				КурсПоДоговору = ВыборкаПоОбъектуРасчетов.ВариантКурсаДоговора = Перечисления.ВариантыКурсаДоговора.УстановленныйВДоговоре;
				
				
				Если КурсПоДоговору И ВалютаУправленческогоУчета = ВыборкаПоОбъектуРасчетов.Валюта Тогда
					КурсВалютыУпр = РаботаСКурсамиВалютУТ.ПолучитьКурсВалютыДоговораИзКэша(
						ВыборкаПоОбъектуРасчетов.Договор, 
						КонецПериода, 
						КэшКурсовВалютДоговора);
				Иначе
					КурсВалютыУпр = РаботаСКурсамиВалютУТ.ПолучитьКурсВалютыИзКэша(
						ВалютаУправленческогоУчета, 
						КонецПериода, 
						КэшКурсовВалют,
						ВалютаРегламентированногоУчета);
				КонецЕсли;
				
				Если КурсПоДоговору Тогда
					КурсВалютыВзаиморасчетов = РаботаСКурсамиВалютУТ.ПолучитьКурсВалютыДоговораИзКэша(
						ВыборкаПоОбъектуРасчетов.Договор, 
						КонецПериода, 
						КэшКурсовВалютДоговора);
				Иначе
					КурсВалютыВзаиморасчетов = РаботаСКурсамиВалютУТ.ПолучитьКурсВалютыИзКэша(
						ВыборкаПоОбъектуРасчетов.Валюта, 
						КонецПериода, 
						КэшКурсовВалют,
						ВалютаРегламентированногоУчета);
				КонецЕсли;
				
				// Фиксированные показатели расчета процентов:
				ФактическаяЗадолженностьБезНДС = 0;
				Счетчик = МассивСумм.Количество();
				Пока Счетчик > 0 Цикл 
					Счетчик = Счетчик - 1;
					ФактическаяЗадолженностьБезНДС = ФактическаяЗадолженностьБезНДС + МассивСумм[Счетчик];
				КонецЦикла;
				ДисконтированнаяЗадолженностьБезНДС = ПриведеннаяСтоимость;
				РассчитанныйОстатокПроцентов        = ФактическаяЗадолженностьБезНДС - ДисконтированнаяЗадолженностьБезНДС; 
				
				Движение = Движения.ПроцентныеРасходыДисконтирования.ДобавитьРасход();
				Выборка.Сбросить();
				Выборка.Следующий();
				ЗаполнитьЗначенияСвойств(Движение, Выборка);
				Движение.Период                                  = КонецПериода;
				
				Движение.СуммаДисконтирования                    = СуммаКСписанию;
				Движение.СуммаДисконтированияУпр                 = Окр(?(КурсВалютыУпр = 0, 0, СуммаКСписанию*КурсВалютыВзаиморасчетов/КурсВалютыУпр), 2);
				Движение.СуммаДисконтированияРегл                = Окр(СуммаКСписанию * КурсВалютыВзаиморасчетов, 2);
				
				Движение.ФактическаяЗадолженностьБезНДС          = ФактическаяЗадолженностьБезНДС;
				Движение.ДисконтированнаяЗадолженностьБезНДС     = ДисконтированнаяЗадолженностьБезНДС;
				Движение.РассчитанныйОстатокПроцентов            = РассчитанныйОстатокПроцентов;
				
				Движение.ФактическаяЗадолженностьБезНДСРегл      = Окр(ФактическаяЗадолженностьБезНДС * КурсВалютыВзаиморасчетов, 2);
				Движение.ДисконтированнаяЗадолженностьБезНДСРегл = Окр(ДисконтированнаяЗадолженностьБезНДС * КурсВалютыВзаиморасчетов, 2);
				Движение.РассчитанныйОстатокПроцентовРегл        = Окр(РассчитанныйОстатокПроцентов * КурсВалютыВзаиморасчетов, 2);
				
				Движение.ФактическаяЗадолженностьБезНДСУпр       = Окр(?(КурсВалютыУпр = 0, 0, ФактическаяЗадолженностьБезНДС*КурсВалютыВзаиморасчетов/КурсВалютыУпр), 2);
				Движение.ДисконтированнаяЗадолженностьБезНДСУпр  = Окр(?(КурсВалютыУпр = 0, 0, ДисконтированнаяЗадолженностьБезНДС*КурсВалютыВзаиморасчетов/КурсВалютыУпр), 2);
				Движение.РассчитанныйОстатокПроцентовУпр         = Окр(?(КурсВалютыУпр = 0, 0, РассчитанныйОстатокПроцентов*КурсВалютыВзаиморасчетов/КурсВалютыУпр), 2);
				
				ДобавитьДвижениеПрочиеРасходы(Движения, Выборка, СписаниеРасходов);
				ДобавитьДвижениеКонтрагентДоходыРасходы(Движения, Выборка, СписаниеРасходов);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Движения.ПроцентныеРасходыДисконтирования.Записать();
	ДобавитьВременныеТаблицы(Запрос, Движения);

КонецПроцедуры


Процедура ДобавитьДвижениеКонтрагентДоходыРасходы(Движения, Выборка, СписаниеРасходов)
	
	Расходы = Движения.ПроцентныеРасходыДисконтирования[Движения.ПроцентныеРасходыДисконтирования.Количество()-1];
	Движение = Движения.ДвиженияКонтрагентДоходыРасходы.Добавить();
	
	Движение.Период = Расходы.Период;
	Движение.ХозяйственнаяОперация = СписаниеРасходов.ХозяйственнаяОперация;
	Движение.Организация = Выборка.Организация;
	Движение.Подразделение = Выборка.Подразделение;
	Движение.НаправлениеДеятельностиКонтрагента = Выборка.НаправлениеДеятельности;
	Движение.Партнер = Выборка.Партнер;
	Движение.Контрагент = Выборка.Контрагент;
	Движение.Договор = Выборка.Договор;
	Движение.ОбъектРасчетов = Выборка.ОбъектРасчетов;
	Движение.НаправлениеДеятельностиСтатьи = Выборка.НаправлениеДеятельности;
	Движение.СтатьяДоходовРасходов = СписаниеРасходов.Статья;
	Движение.АналитикаРасходов = СписаниеРасходов.Аналитика;
	
	Движение.Сумма = Расходы.СуммаДисконтированияУпр;
	Движение.СуммаРегл = Расходы.СуммаДисконтированияРегл;
	
	Движение.Валюта = Выборка.Валюта;
	Движение.СуммаВВалюте = Расходы.СуммаДисконтирования;
	
	Движение.ВалютаВзаиморасчетов = Выборка.Валюта;
	Движение.СуммаВВалютеВзаиморасчетов = Расходы.СуммаДисконтирования;
	
	Движение.ИдентификаторФинЗаписи = Расходы.ИдентификаторФинЗаписи;
	Движение.ИсточникГФУРасчетов = Выборка.ОбъектРасчетов;
	
КонецПроцедуры

Процедура ДобавитьДвижениеПрочиеРасходы(Движения, Выборка, СписаниеРасходов)
	
	Расходы = Движения.ПроцентныеРасходыДисконтирования[Движения.ПроцентныеРасходыДисконтирования.Количество()-1];
	Движение = Движения.ПрочиеРасходы.Добавить();
	
	Движение.Период = Расходы.Период;
	Движение.ХозяйственнаяОперация = СписаниеРасходов.ХозяйственнаяОперация;
	Движение.Организация = Выборка.Организация;
	Движение.Подразделение = Выборка.Подразделение;
	Движение.НаправлениеДеятельности = Выборка.НаправлениеДеятельности;
	Движение.СтатьяРасходов = СписаниеРасходов.Статья;
	Движение.АналитикаРасходов = СписаниеРасходов.Аналитика;
	
	Движение.Сумма = Расходы.СуммаДисконтированияУпр;
	Движение.СуммаУпр = Расходы.СуммаДисконтированияУпр;
	Движение.СуммаРегл = Расходы.СуммаДисконтированияРегл;
	Движение.ВременнаяРазница = Расходы.СуммаДисконтированияРегл;
	
	Движение.ИдентификаторФинЗаписи = Расходы.ИдентификаторФинЗаписи;
	Движение.НастройкаХозяйственнойОперации = Расходы.НастройкаХозяйственнойОперации;
	
КонецПроцедуры

Функция ПодготовитьНаборыДвижений(ДокументСсылка)
	
	Результат = Новый Структура;
	
	Набор = РегистрыНакопления.ПроцентныеРасходыДисконтирования.СоздатьНаборЗаписей();
	Набор.Отбор.Регистратор.Установить(ДокументСсылка);
	Результат.Вставить("ПроцентныеРасходыДисконтирования", Набор);
	
	Набор = РегистрыНакопления.ПрочиеРасходы.СоздатьНаборЗаписей();
	Набор.Отбор.Регистратор.Установить(ДокументСсылка);
	Результат.Вставить("ПрочиеРасходы", Набор);
	
	Набор = РегистрыНакопления.ДвиженияКонтрагентДоходыРасходы.СоздатьНаборЗаписей();
	Набор.Отбор.Регистратор.Установить(ДокументСсылка);
	Результат.Вставить("ДвиженияКонтрагентДоходыРасходы", Набор);
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьВременныеТаблицы(Запрос, Движения)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	| *
	|ПОМЕСТИТЬ ИмяВТ
	|ИЗ
	|	&Данные КАК Т";
	Для Каждого Набор Из Движения Цикл
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "ИмяВТ", "Таблица" + Набор.Ключ);
		тз = Набор.Значение.Выгрузить(); // ТаблицаЗначений
		тз.Колонки.Удалить("Регистратор");
		тз.Колонки.Удалить("МоментВремени");
		тз.Колонки.Удалить("НомерСтроки");
		Запрос.УстановитьПараметр("Данные", тз);
		Запрос.Выполнить();
	КонецЦикла;
	Запрос.Параметры.Удалить("Данные");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли