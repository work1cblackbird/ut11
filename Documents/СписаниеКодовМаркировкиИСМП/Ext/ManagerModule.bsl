#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область Статусы

// Возвращает конечные статусы.
//
// Возвращаемое значение:
//  Массив - Конечные статусы.
//
Функция КонечныеСтатусы(ТребуетсяПовторноеОформление = Истина) Экспорт
	
	Статусы = Новый Массив;
	
	Если Не ТребуетсяПовторноеОформление Тогда
		Статусы.Добавить(Перечисления.СтатусыОбработкиСписанияКодовМаркировкиИСМП.КодыМаркировкиСписаны);
	КонецЕсли;
	
	Возврат Статусы;
	
КонецФункции

// Возвращает статусы ошибок.
//
// Возвращаемое значение:
//  Массив - Статусы ошибок.
//
Функция СтатусыОшибок() Экспорт
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиСписанияКодовМаркировкиИСМП.ОшибкаПередачи);
	Статусы.Добавить(Перечисления.СтатусыОбработкиСписанияКодовМаркировкиИСМП.КодыМаркировкиСписаныЧастично);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает статус по умолчанию.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиСписанияКодовМаркировкиИСМП - Статус по-умолчанию.
//
Функция СтатусПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыОбработкиСписанияКодовМаркировкиИСМП.Черновик;
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию(СтруктураПараметров=Неопределено) Экспорт
	
	Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные;
	
КонецФункции

#КонецОбласти

#Область ДействияПриОбменеИСМП

// Статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.СписаниеКодовМаркировкиИСМП - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция ИС МП
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиСписанияКодовМаркировкиИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3.
//
Функция СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийИСМП.СписаниеЭмитированныхКодовМаркировки
		Или Операция = Перечисления.ВидыОперацийИСМП.СписаниеЭмитированныхКодовМаркировкиПриПоступлении
		Или Операция = Перечисления.ВидыОперацийИСМП.СписаниеЭмитированныхКодовМаркировкиРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийИСМП.СписаниеКодовВыбывшихДоОбязательностиМаркировки Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиСписанияКодовМаркировкиИСМП.КПередаче);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.СписаниеПроверкаСтатусаОбработкиДокумента
		Или Операция = Перечисления.ВидыОперацийИСМП.КвитанцияДокумента Тогда
		
		// Служебные сообщения для контроля статуса обработки отчетов
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиСписанияКодовМаркировкиИСМП.Обрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена,
			СтатусыБазовыйПроцесс);
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.СписаниеКодовМаркировкиИСМП - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция ИС МП
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиСписанияКодовМаркировкиИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3.
//
Функция СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Если СтатусОбработки = Неопределено Тогда
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаПринята;
	КонецЕсли;
	
	Если Операция = Перечисления.ВидыОперацийИСМП.СписаниеЭмитированныхКодовМаркировки
		Или Операция = Перечисления.ВидыОперацийИСМП.СписаниеПроверкаСтатусаОбработкиДокумента
		Или Операция = Перечисления.ВидыОперацийИСМП.СписаниеЭмитированныхКодовМаркировкиПриПоступлении
		Или Операция = Перечисления.ВидыОперацийИСМП.СписаниеЭмитированныхКодовМаркировкиРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийИСМП.КвитанцияДокумента
		Или Операция = Перечисления.ВидыОперацийИСМП.СписаниеКодовВыбывшихДоОбязательностиМаркировки Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиСписанияКодовМаркировкиИСМП.Обрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиСписанияКодовМаркировкиИСМП.ОшибкаПередачи;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после получения данных из ИС МП.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.СписаниеКодовМаркировкиИСМП - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция обмена с ИС МП.
//  ДополнительныеПараметры - Структура - Структура со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийИСМП - Операция, на которую получена квитанция.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиСписанияКодовМаркировкиИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3.
//
Функция СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры) Экспорт

	Если Операция = Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		Статусы.Принят = Перечисления.СтатусыОбработкиСписанияКодовМаркировкиИСМП.КодыМаркировкиСписаны;
		
		Статусы.Обрабатывается = Перечисления.СтатусыОбработкиСписанияКодовМаркировкиИСМП.Обрабатывается;
		Статусы.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
		
		Если ДополнительныеПараметры.Свойство("ПакетСтатусовОбработкиОперации")
			И ДополнительныеПараметры.ПакетСтатусовОбработкиОперации.Количество() > 1 Тогда
			
			Если ДополнительныеПараметры.ПакетСтатусовОбработкиОперации[Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена] <> Неопределено
				Или ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ОбработанЧастично", Ложь) Тогда
				ДополнительныеПараметры.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
				Статусы.Ошибка = Перечисления.СтатусыОбработкиСписанияКодовМаркировкиИСМП.КодыМаркировкиСписаныЧастично;
				Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанныеСИсправлениями);
			Иначе
				ДополнительныеПараметры.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
				Статусы.Ошибка = Перечисления.СтатусыОбработкиСписанияКодовМаркировкиИСМП.ОшибкаПередачи;
				Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
				Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
			КонецЕсли;
			
		ИначеЕсли ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ОбработанЧастично", Ложь)
			// Если версия последнего сообщения обработана успешно, то коды нанесены полностью.
			И ДополнительныеПараметры.СтатусОбработки <> Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена Тогда
			ДополнительныеПараметры.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
			Статусы.Ошибка = Перечисления.СтатусыОбработкиСписанияКодовМаркировкиИСМП.КодыМаркировкиСписаныЧастично;
			Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанныеСИсправлениями);
			
		ИначеЕсли ДополнительныеПараметры.Статус = Перечисления.СтатусыОбработкиСписанияКодовМаркировкиИСМП.КодыМаркировкиСписаныЧастично
			Или ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
				ДополнительныеПараметры.ПараметрыЗапроса, "ПовторнаяОтправка", Ложь) Тогда
			Статусы.Ошибка = Перечисления.СтатусыОбработкиСписанияКодовМаркировкиИСМП.КодыМаркировкиСписаныЧастично;
			Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанныеСИсправлениями);
		Иначе
			Статусы.Ошибка = Перечисления.СтатусыОбработкиСписанияКодовМаркировкиИСМП.ОшибкаПередачи;
			Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
			Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
		КонецЕсли;
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
		
		Возврат ПараметрыОбновления;
		
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
КонецФункции

// Обновить статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.СписаниеКодовМаркировкиИСМП - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция ИС МП
//  ДополнительныеПараметры - Неопределено, Структура - дополнительные параметры обновления статуса.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиСписанияКодовМаркировкиИСМП - Новый статус.
//
Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт

	ПараметрыОбновления = СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция);

	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);

	Возврат НовыйСтатусПослеОбновления;

КонецФункции

// Обновить статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.СписаниеКодовМаркировкиИСМП - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция ИС МП
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения
//  ДополнительныеПараметры - Неопределено, Структура - дополнительные параметры обновления статуса.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиСписанияКодовМаркировкиИСМП - Новый статус.
//
Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт

	ПараметрыОбновления = СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);

	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);

	Возврат НовыйСтатусПослеОбновления;

КонецФункции

// Обновить статус после получения данных из ИС МП.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.СписаниеКодовМаркировкиИСМП - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция обмена с ИС МП.
//  ДополнительныеПараметры - Структура -Структура со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийИСМП - Операция, на которую получена квитанция.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиСписанияКодовМаркировкиИСМП - Новый статус.
//
Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт

	ПараметрыОбновления = СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);

	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);

	Возврат НовыйСтатусПослеОбновления;

КонецФункции

// Изменяет и возвращает статус документа ИС МП.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Документ ИС МП.
//  ПараметрыОбновления - Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиСписанияКодовМаркировкиИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиСписанияКодовМаркировкиИСМП - новый статус документа ИС МП.
Функция ОбновитьСтатус(ДокументСсылка, ПараметрыОбновления, ДополнительныеПараметры) Экспорт
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Получить последовательность операций в течении жизненного цикла документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.СписаниеКодовМаркировкиИСМП - Документ, для которого требуется обновить статус.
//  ЛинейныйСписок - Булево - Не используется.
//
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ПротоколОбменаИС.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка, ЛинейныйСписок = Ложь) Экспорт
	
	Таблица = ПротоколОбменаИС.ПустаяТаблицаПоследовательностьОпераций();
	
	Исходящий = Перечисления.ТипыЗапросовИС.Исходящий;
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 1,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.СписаниеЭмитированныхКодовМаркировки);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 11,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.СписаниеПроверкаСтатусаОбработкиДокумента);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 1,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.СписаниеКодовВыбывшихДоОбязательностиМаркировки);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 11,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.СписаниеПроверкаСтатусаОбработкиДокумента);
	
	ОперацияВПоследовательности = ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 1,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.СписаниеЭмитированныхКодовМаркировкиРасчетСтатуса);
	ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 11,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.СписаниеЭмитированныхКодовМаркировкиПриПоступлении);
	
	Возврат Таблица;
	
КонецФункции

// Обработчик изменения статуса документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.СписаниеКодовМаркировкиИСМП - Документ.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиСписанияКодовМаркировкиИСМП - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиСписанияКодовМаркировкиИСМП - Предыдущий статус.
//  ПараметрыОбновленияСтатуса - Структура - см. функцию ИнтеграцияИСМП.ПараметрыОбновленияСтатуса().
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт
	
	ИнтеграцияИСМППереопределяемый.ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса);
	
	//Получение конечного статуса требующего повторного оформления
	Если КонечныеСтатусы().Найти(НовыйСтатус)<>Неопределено
		И КонечныеСтатусы().Найти(ПредыдущийСтатус)=Неопределено Тогда
		РасчетСтатусовОформленияИСМП.РассчитатьСтатусыОформленияДокументов(ДокументСсылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Сообщения

// Сообщение к передаче JSON
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.СписаниеКодовМаркировкиИСМП - Списание кодов маркировок ИС МП.
//  ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие.
//  ДополнительныеПараметры - Структура, Неопределено - Дополнительные параметры
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON - Сообщения к передаче
//
Функция СообщениеКПередачеJSON(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные Тогда
		
		Возврат СписаниеКодовМаркировкиJSON(ДокументСсылка, ДополнительныеПараметры);
		
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанныеСИсправлениями Тогда
		
		Возврат СписаниеКодовМаркировкиJSON(ДокументСсылка, ДополнительныеПараметры, Истина);
		
	КонецЕсли;
	
КонецФункции

// Формирует JSON сообщения для списания кодов маркировки
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.СписаниеКодовМаркировкиИСМП - Документ Приемка товаров ИС МП
//  ДополнительныеПараметры - Структура, Неопределено - Дополнительные параметры
//  Повторно - Булево - признак подготовки сообщения с исправлениями.
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON - Сообщения к передаче
Функция СписаниеКодовМаркировкиJSON(ДокументСсылка, ДополнительныеПараметры = Неопределено, Повторно = Ложь)
	
	Операция = Перечисления.ВидыОперацийИСМП.СписаниеЭмитированныхКодовМаркировки;
	
	СообщенияJSON = Новый Массив;
	
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ИСМППрисоединенныеФайлы.Документ                      КАК Ссылка,
	|	МАКСИМУМ(ЕСТЬNULL(ИСМППрисоединенныеФайлы.Версия, 0)) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ИСМППрисоединенныеФайлы КАК ИСМППрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеКодовМаркировкиИСМП КАК Шапка
	|		ПО Шапка.Ссылка   = &Ссылка
	|		 И Шапка.Ссылка   = ИСМППрисоединенныеФайлы.Документ
	|ГДЕ
	|	ИСМППрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ИСМППрисоединенныеФайлы.Документ
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование                  КАК ДокументОснование,
	|	Шапка.Ссылка                             КАК Документ,
	|
	|	Шапка.Организация                КАК Организация,
	|	Представление(Шапка.Организация) КАК ОрганизацияПредставление,
	|	Шапка.GLNОрганизации             КАК GLNОрганизации,
	|	
	|	Шапка.ВидПродукции КАК ВидПродукции,
	|	ВЫБОР 
	|		КОГДА Шапка.Операция = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ПустаяСсылка)
	|			ТОГДА &Операция
	|		ИНАЧЕ
	|			Шапка.Операция
	|	КОНЕЦ КАК Операция,
	|	
	|	Шапка.ПричинаСписания                      КАК ПричинаСписания,
	|	Шапка.ИдентификаторПроизводственногоЗаказа КАК ИдентификаторПроизводственногоЗаказа,
	|	Шапка.ИдентификаторПроизводственнойЛинии   КАК ИдентификаторПроизводственнойЛинии,
	|	Шапка.ПроизводственныйОбъект               КАК ПроизводственныйОбъект,
	|	Шапка.ПроизводственныйОбъектИдентификатор  КАК ПроизводственныйОбъектИдентификатор,
	|	Шапка.ПроизводственныйОбъектАдрес          КАК ПроизводственныйОбъектАдрес,
	|	Шапка.ПроизводственныйОбъектАдресСтрокой   КАК ПроизводственныйОбъектАдресСтрокой,
	|	Шапка.ОтчетПроизводственнойЛинии           КАК ОтчетПроизводственнойЛинии,
	|
	|	Шапка.ВидПервичногоДокумента               КАК ВидПервичногоДокумента,
	|	Шапка.ДатаПервичногоДокумента              КАК ДатаПервичногоДокумента,
	|	Шапка.НомерПервичногоДокумента             КАК НомерПервичногоДокумента,
	|	Шапка.НаименованиеПервичногоДокумента      КАК НаименованиеПервичногоДокумента,
	|
	|	Шапка.КодФИАС КАК КодФИАС,
	|
	|	Шапка.Ответственный                КАК Ответственный,
	|	Представление(Шапка.Ответственный) КАК ОтветственныйПредставление,
	|	Шапка.Ссылка                       КАК Ссылка
	|ИЗ
	|	Документ.СписаниеКодовМаркировкиИСМП КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	// Универсальные реквизиты
	|	Товары.Номенклатура       КАК Номенклатура,
	|	Товары.Характеристика     КАК Характеристика,
	|	Товары.GTIN               КАК GTIN,
	|	Товары.Серия              КАК Серия,
	|	Товары.Упаковка           КАК Упаковка,
	|	Товары.Количество         КАК Количество,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|
	|	// Дополнительные реквизиты
	|	Товары.ПричинаСписания КАК ПричинаСписания
	|ИЗ
	|	Документ.СписаниеКодовМаркировкиИСМП.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|",
	"Товары");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковок.ШтрихкодУпаковки КАК ШтрихкодУпаковки
	|ИЗ
	|	Документ.СписаниеКодовМаркировкиИСМП.ШтрихкодыУпаковок КАК ШтрихкодыУпаковок
	|ГДЕ
	|	ШтрихкодыУпаковок.Ссылка = &Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|",
	"ШтрихкодыУпаковок");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ДанныеОтчета.ЗначениеШтрихкода         КАК ЗначениеШтрихкода,
	|	ДанныеОтчета.ЗначениеШтрихкодаУпаковки КАК ЗначениеШтрихкодаУпаковки,
	|	ДанныеОтчета.ФорматBase64              КАК ФорматBase64,
	|	
	|	ДанныеОтчета.НормализованноеЗначениеШтрихкода         КАК НормализованноеЗначениеШтрихкода,
	|	ДанныеОтчета.НормализованноеЗначениеШтрихкодаУпаковки КАК НормализованноеЗначениеШтрихкодаУпаковки
	|ИЗ
	|	Документ.СписаниеКодовМаркировкиИСМП.ДанныеОтчетаПроизводственнойЛинии КАК ДанныеОтчета
	|ГДЕ
	|	ДанныеОтчета.Ссылка = &Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|",
	"ДанныеОтчетаПроизводственнойЛинии");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",   ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Операция);
	
	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка             = РезультатЗапроса["Шапка"].Выбрать();
	//@skip-warning
	Товары            = РезультатЗапроса["Товары"].Выгрузить();
	//@skip-warning
	ШтрихкодыУпаковок = РезультатЗапроса["ШтрихкодыУпаковок"].Выгрузить();
	//@skip-warning
	ДанныеОтчета      = РезультатЗапроса["ДанныеОтчетаПроизводственнойЛинии"].Выгрузить();
	
	Если Не Шапка.Следующий()
		Или (ШтрихкодыУпаковок.Количество() = 0 И ДанныеОтчета.Количество() = 0) Тогда
		
		СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
		СообщениеJSON.Организация = ДополнительныеПараметры.Организация;
		СообщениеJSON.Документ    = ДокументСсылка;
		СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
			Операция, ДокументСсылка);
		СообщениеJSON.ТекстОшибки = НСтр("ru = 'Нет данных для выгрузки.'");
		СообщениеJSON.ТребуетсяПодписание = Ложь;
		СообщенияJSON.Добавить(СообщениеJSON);
		
		Возврат СообщенияJSON;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	// Параметры нормализации
	ПараметрыНормализации = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализации.ИмяСвойстваКодМаркировки = "Штрихкод";
	ПараметрыНормализации.НачинаетсяСоСкобки = Ложь;
	ПараметрыНормализации.ВключатьМРЦ        = Ложь;
	
	ПользовательскиеПараметрыРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки();
	ПользовательскиеПараметрыРазбораКодаМаркировки.ПроверятьАлфавитЭлементов = Ложь;
	
	КодыМаркировки = ШтрихкодированиеИСМП.НоваяТаблицаПоискаКодаМаркировкиВПуле(Ложь);
	НормализованныеДанныеОтчета = ИнициализироватьНормализованныеДанныеОтчета();

	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(Шапка, Неопределено, Шапка.ВидПродукции);
	
	ЭтоМОТП                   = ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияМОТП(Шапка.ВидПродукции);
	ЭтоСписаниеПриПоступлении = Шапка.Операция = Перечисления.ВидыОперацийИСМП.СписаниеЭмитированныхКодовМаркировкиПриПоступлении;
	
	ПередачаОтчетаЧерезСУЗ = ИнтеграцияИСКлиентСервер.ВидПродукцииИспользуетПередачуОтчетаОбОтбраковкеЧерезСУЗ(Шапка.ВидПродукции);
	ЭтоВыбытиеДоОбязательностиМаркировки = Шапка.ПричинаСписания = Перечисления.ПричиныСписанияКодовМаркировкиИСМП.ВыбытиеДоОбязательностиМаркировки;
	
	СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
	СообщениеJSON.Организация = Шапка.Организация;
	СообщениеJSON.Документ    = ДокументСсылка;
	СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
		Шапка.Операция, ДокументСсылка);
	
	Если Шапка.ОтчетПроизводственнойЛинии Тогда
	
#Область ДанныеОтчетаПроизводственнойЛинии
	
		ПараметрыРазбора = Новый Структура;
		ПараметрыРазбора.Вставить("ВосстанавливатьСтруктуруКодаМаркировки", Не ПараметрыСканирования.ПроверятьСтруктуруКодовМаркировки);
		ПараметрыРазбора.Вставить("ПроверятьАлфавитКодовМаркировки",        ПараметрыСканирования.ПроверятьАлфавитКодовМаркировки);
		
		ДанныеОтчета.Колонки.Добавить("ТекстОшибкиЗначениеШтрихкода", Новый ОписаниеТипов("Строка"));
		ДанныеОтчета.Колонки.Добавить("ТекстОшибкиЗначениеШтрихкодаУпаковки", Новый ОписаниеТипов("Строка"));
		
		РезультатОбработкиДанныхОтчета = РазборКодаМаркировкиИСОтчетПроизводственнойЛинии.НормализоватьДанныеОтчетаПроизводственнойЛинии(
			ДанныеОтчета, Шапка.ВидПродукции, ПараметрыРазбора);
		
		// 1. Разбор кодов, подготовка данных для построения дерева упаковок.
		
		ЕстьОшибки = РезультатОбработкиДанныхОтчета.ЕстьОшибки;
		
		Если ЕстьОшибки Тогда
			
			СохранитьДанныеОтчетаПроизводственнойЛинии(ДокументСсылка, ДанныеОтчета);
			СообщитьОНеправильномФорматеОтчета(СообщениеJSON);
			СообщенияJSON.Добавить(СообщениеJSON);
			Возврат СообщенияJSON;
			
		КонецЕсли;
		
		ВидыУпаковокДляПередачиОтчетаОНанесении = ШтрихкодированиеИСКлиентСервер.ВидыУпаковокДляПередачиОтчетаОНанесении();
		
		КешДанныхРазбора       = Новый Соответствие;
		КешКодовДляПоискаВПуле = Новый Соответствие;
		
		Для Каждого СтрокаДанных Из РезультатОбработкиДанныхОтчета.ОбработанныеДанныеОтчета Цикл
			
			ИсходнаяСтрока = СтрокаДанных.ИсходнаяСтрока;
			
			Для Каждого ИменаКолонок Из РезультатОбработкиДанныхОтчета.ГруппыКолонок Цикл
				
				Если Не ЗначениеЗаполнено(ИсходнаяСтрока[ИменаКолонок.КодМаркировки]) Тогда
					Продолжить;
				КонецЕсли;
				
				НормализованныйКодМаркировки = ИсходнаяСтрока[ИменаКолонок.НормализованныйКодМаркировки];
				
				Если СтрокаДанных.ЕстьОшибки
					Или Не ЗначениеЗаполнено(НормализованныйКодМаркировки) Тогда
					ВызватьИсключение НСтр("ru = 'Внутренняя ошибка разбора кодов маркировки.'");
				КонецЕсли;
				
				ВидУпаковки         = СтрокаДанных[ИменаКолонок.ВидУпаковки];
				GTIN                = СтрокаДанных[ИменаКолонок.GTIN];
				ПолныйКодМаркировки = СтрокаДанных[ИменаКолонок.ПолныйКодМаркировки];
				
				Если Не ЗначениеЗаполнено(ВидУпаковки) Тогда
					ИнтеграцияИСМПСлужебный.ПодготовитьДанныеКОпределениюВидаУпаковки(
						НормализованныйКодМаркировки, GTIN, ДополнительныеПараметры);
					Продолжить;
				КонецЕсли;
				
				Если КешДанныхРазбора[НормализованныйКодМаркировки] = Неопределено Тогда
					
					КешДанныхРазбора.Вставить(НормализованныйКодМаркировки, Истина);
					
					// Для МОТП для отчета о выбытии через СУЗ не требуется полный код
					// передавать код идентификации (GTIN + Serial)
					Если ПередачаОтчетаЧерезСУЗ И Не ЭтоМОТП И Не ЭтоВыбытиеДоОбязательностиМаркировки Тогда
						
						Если ВидыУпаковокДляПередачиОтчетаОНанесении.Получить(ВидУпаковки) <> Неопределено Тогда
							
							// При передаче данных через СУЗ для табака требуется указание полных кодов.
							Если ЗначениеЗаполнено(ПолныйКодМаркировки) Тогда
								СтрокаДанныхОтчета = НормализованныеДанныеОтчета.Добавить();
								СтрокаДанныхОтчета.КодМаркировки = НормализованныйКодМаркировки;
								СтрокаДанныхОтчета.ПолныйКодМаркировки = ПолныйКодМаркировки;
							ИначеЕсли Не ПараметрыСканирования.ПроверятьСтруктуруКодовМаркировки Тогда
								// Искать полный код в пуле.
								ШтрихкодированиеИСМП.ДобавитьКодМаркировкиВТаблицуДляПоискаВПуле(
									ИсходнаяСтрока[ИменаКолонок.НормализованныйКодМаркировки], КодыМаркировки);
								СтрокиТаблицыДляОбработки = КешКодовДляПоискаВПуле[НормализованныйКодМаркировки];
								Если СтрокиТаблицыДляОбработки = Неопределено Тогда
									СтрокиТаблицыДляОбработки = Новый Массив;
								КонецЕсли;
								СтрокиТаблицыДляОбработки.Добавить(ИсходнаяСтрока);
								КешКодовДляПоискаВПуле[НормализованныйКодМаркировки] = СтрокиТаблицыДляОбработки;
								
							Иначе
								ДобавитьТекстОшибкиНеНайденПолныйКод(ИсходнаяСтрока, ИменаКолонок.КодМаркировки, ЕстьОшибки);
							КонецЕсли;
							
						КонецЕсли;
						
					Иначе
						
						СтрокаДанныхОтчета = НормализованныеДанныеОтчета.Добавить();
						СтрокаДанныхОтчета.КодМаркировки = НормализованныйКодМаркировки;
						СтрокаДанныхОтчета.КодДляПередачиИСМП = СтрокаДанных[ИменаКолонок.КодДляПередачиИСМП];
						
					КонецЕсли;
					
				ИначеЕсли ВидыУпаковокДляПередачиОтчетаОНанесении.Получить(ВидУпаковки) <> Неопределено
					И Не ЗначениеЗаполнено(ПолныйКодМаркировки)
					И ПередачаОтчетаЧерезСУЗ
					И Не ЭтоМОТП
					И Не ЭтоВыбытиеДоОбязательностиМаркировки Тогда
					
					Если Не ПараметрыСканирования.ПроверятьСтруктуруКодовМаркировки Тогда
						
						СтрокиТаблицыДляОбработки = КешКодовДляПоискаВПуле[НормализованныйКодМаркировки];
						Если СтрокиТаблицыДляОбработки = Неопределено Тогда
							СтрокиТаблицыДляОбработки = Новый Массив;
						КонецЕсли;
						
						СтрокиТаблицыДляОбработки.Добавить(ИсходнаяСтрока);
						
					Иначе
						
						ДобавитьТекстОшибкиНеНайденПолныйКод(ИсходнаяСтрока, ИменаКолонок.КодМаркировки, ЕстьОшибки);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если ДополнительныеПараметры.ПараметрыОбмена.КОпределениюВидаУпаковки <> Неопределено Тогда
			
			СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
			
			СообщениеJSON.Организация       = Шапка.Организация;
			СообщениеJSON.Документ          = Шапка.Документ;
			СообщениеJSON.ДокументОснование = Шапка.ДокументОснование;
			
			СообщениеJSON.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
			СообщениеJSON.Версия              = Неопределено;
			СообщениеJSON.ТребуетсяПодписание = Ложь;
			
			СообщениеJSON.ПараметрыЗапроса = ДополнительныеПараметры.ПараметрыОбработкиДокумента;
			
			СообщениеJSON.ВидПродукции              = Неопределено;
			СообщениеJSON.Операция                  = Перечисления.ВидыОперацийИСМП.ПовторноеФормированиеСообщений;
			СообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.ИСМП; // Для запроса вида упаковок требуется авторизация в ГИС МТ
			СообщениеJSON.СтанцияУправленияЗаказами = Неопределено;
			
			СообщенияJSON.Добавить(СообщениеJSON);
			
			Возврат СообщенияJSON;
			
		КонецЕсли;
		
		Если ПередачаОтчетаЧерезСУЗ И Не ЭтоМОТП И Не ЕстьОшибки И КодыМаркировки.Количество() Тогда
			// 2. Поиск.
			РезультатПоискаВПуле = ШтрихкодированиеИСМП.РезультатПоискаВПулеКодовМаркировки(
				КодыМаркировки, "ПолныйКодМаркировки");
			РезультатПоискаВПуле.Индексы.Добавить("КодМаркировки");
			
			// 3. Обход результатов поиска.
			Для Каждого КлючИЗначение Из КешКодовДляПоискаВПуле Цикл
				
				КодМаркировки = КлючИЗначение.Ключ;
				ИсходныеСтроки = КлючИЗначение.Значение;
				СтрокаПулаКодовМаркировки = РезультатПоискаВПуле.Найти(КодМаркировки, "КодМаркировки");
				
				Если СтрокаПулаКодовМаркировки = Неопределено Тогда
					
					ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Не найден полный код маркировки для %1'"), 
						КодМаркировки);
					
					Для Каждого ИсходнаяСтрока Из ИсходныеСтроки Цикл
						
						Если КодМаркировки = ИсходнаяСтрока.НормализованноеЗначениеШтрихкода Тогда
							ИмяКолонкиТекстОшибки = "ТекстОшибкиЗначениеШтрихкода";
						Иначе
							ИмяКолонкиТекстОшибки = "ТекстОшибкиЗначениеШтрихкодаУпаковки";
						КонецЕсли;
						
						ИсходнаяСтрока[ИмяКолонкиТекстОшибки] = ?(
							ЗначениеЗаполнено(ИсходнаяСтрока[ИмяКолонкиТекстОшибки]),
							ИсходнаяСтрока[ИмяКолонкиТекстОшибки] + Символы.ПС + ТекстОшибки,
							ТекстОшибки);
						
					КонецЦикла;
					
					ЕстьОшибки = Истина;
					
				Иначе
					
					СтрокаДанныхОтчета = НормализованныеДанныеОтчета.Добавить();
					СтрокаДанныхОтчета.КодМаркировки = КодМаркировки;
					СтрокаДанныхОтчета.ПолныйКодМаркировки = СтрокаПулаКодовМаркировки.ПолныйКодМаркировки;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// 4. Сохранение в документ.
		СохранитьДанныеОтчетаПроизводственнойЛинии(ДокументСсылка, ДанныеОтчета);
		Если ЕстьОшибки Тогда
			СообщитьОНеправильномФорматеОтчета(СообщениеJSON);
			СообщенияJSON.Добавить(СообщениеJSON);
			Возврат СообщенияJSON;
		КонецЕсли;
		НормализованныеДанныеОтчета.Сортировать("КодМаркировки");
		
#КонецОбласти
	
	ИначеЕсли Не Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха Тогда
		
#Область ШтрихкодыУпаковок
		
		// Заполнение данных по маркируемым товарам
		ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(Шапка, Неопределено, Шапка.ВидПродукции);
		ОбщегоНазначенияИСМПКлиентСервер.УстановитьПараметрСканированияЗапрашиватьДанныеСервисаИСМП(ПараметрыСканирования, Ложь);
		
		РезультатПоиска = ШтрихкодированиеИС.ВложенныеШтрихкодыУпаковок(
			ШтрихкодыУпаковок.ВыгрузитьКолонку("ШтрихкодУпаковки"),
			ПараметрыСканирования,, Истина);
		
		Если ПередачаОтчетаЧерезСУЗ Тогда
			
			СоответствиеБлоков = Новый Соответствие;
			
			Для Каждого СтрокаТЧМаркированныеТовары Из РезультатПоиска.МаркированныеТовары Цикл
				
				Если СтрокаТЧМаркированныеТовары.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
					СтрокаДанныхОтчета = НормализованныеДанныеОтчета.Добавить();
					СтрокаДанныхОтчета.КодМаркировки = СтрокаТЧМаркированныеТовары.Штрихкод;
					Если ЭтоМОТП Или ЭтоВыбытиеДоОбязательностиМаркировки Тогда
						СтрокаДанныхОтчета.КодДляПередачиИСМП = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
							СтрокаТЧМаркированныеТовары.ДанныеРазбора, Шапка.ВидПродукции, ПараметрыНормализации);
					Иначе
						ШтрихкодированиеИСМП.ДобавитьКодМаркировкиВТаблицуДляПоискаВПуле(
							СтрокаТЧМаркированныеТовары, КодыМаркировки);
					КонецЕсли;
				КонецЕсли;
				
				СтрокаРодитель = СтрокаТЧМаркированныеТовары.СтрокаДерева.Родитель;
				Если СтрокаРодитель <> Неопределено Тогда
					Если СоответствиеБлоков[СтрокаРодитель.Штрихкод] = Неопределено Тогда
						СоответствиеБлоков.Вставить(СтрокаРодитель.Штрихкод, Истина);
						Если СтрокаРодитель.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
							Или СтрокаРодитель.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор Тогда
							СтрокаДанныхОтчета = НормализованныеДанныеОтчета.Добавить();
							СтрокаДанныхОтчета.КодМаркировки = СтрокаРодитель.Штрихкод;
							Если ЭтоМОТП Или ЭтоВыбытиеДоОбязательностиМаркировки Тогда
								СтрокаДанныхОтчета.КодДляПередачиИСМП = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
									СтрокаРодитель.ДанныеРазбора, Шапка.ВидПродукции, ПараметрыНормализации);
							Иначе
								ШтрихкодированиеИСМП.ДобавитьКодМаркировкиВТаблицуДляПоискаВПуле(
									СтрокаРодитель, КодыМаркировки);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			Если Не ЭтоМОТП 
				И Не ЭтоВыбытиеДоОбязательностиМаркировки Тогда
			
				РезультатПоискаВПуле = ШтрихкодированиеИСМП.РезультатПоискаВПулеКодовМаркировки(
					КодыМаркировки, "ПолныйКодМаркировки", Ложь);
				РезультатПоискаВПуле.Индексы.Добавить("КодМаркировки");
				
				Для Каждого СтрокаДанныхОтчета Из НормализованныеДанныеОтчета Цикл
					
					СтрокаПулаКодовМаркировки = РезультатПоискаВПуле.Найти(СтрокаДанныхОтчета.КодМаркировки, "КодМаркировки");
					
					Если СтрокаПулаКодовМаркировки <> Неопределено Тогда
						СтрокаДанныхОтчета.ПолныйКодМаркировки = СтрокаПулаКодовМаркировки.ПолныйКодМаркировки;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			НормализованныеДанныеОтчета.Сортировать("КодМаркировки");
			
		КонецЕсли;
		
#КонецОбласти
		
	КонецЕсли;
	
	РеквизитыОрганизации = РаботаСКонтрагентамиИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(Шапка.Организация);
	
	Если Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха Тогда
		
#Область СообщенияПродукцияИзНатуральногоМеха
		
		Если ЭтоСписаниеПриПоступлении Тогда
			
			АбстрактнаяОперация = Перечисления.ВидыОперацийИСМП.СписаниеЭмитированныхКодовМаркировкиРасчетСтатуса;
			ИдентификаторАбстрактногоСообщения = СокрЛП(Новый УникальныйИдентификатор());
			
			СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
			СообщениеJSON.Организация       = Шапка.Организация;
			СообщениеJSON.Документ          = ДокументСсылка;
			СообщениеJSON.ДокументОснование = Шапка.ДокументОснование;
			СообщениеJSON.Операция          = АбстрактнаяОперация;
			СообщениеJSON.ВидПродукции      = Шапка.ВидПродукции;
			СообщениеJSON.Версия            = НомерВерсии;
			
			СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
				АбстрактнаяОперация, ДокументСсылка, НомерВерсии);
			
			РезультатОпределенияСУЗ = ИнтеграцияИСМПСлужебный.ОпределитьСтанциюУправленияЗаказами(
				СообщенияJSON, СообщениеJSON, Шапка, ДополнительныеПараметры);
			Если Не РезультатОпределенияСУЗ.Успешно Тогда
				Возврат СообщенияJSON;
			КонецЕсли;
			
			СтанцияУправленияЗаказами = РезультатОпределенияСУЗ.СтанцияУправленияЗаказами;
			
			СообщениеJSON.СтанцияУправленияЗаказами = СтанцияУправленияЗаказами;
			СообщениеJSON.ПроизводственныйОбъект    = Шапка.ПроизводственныйОбъект;
			СообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами;
			СообщениеJSON.ИдентификаторЗаявки       = ИнтеграцияИСМПСлужебный.СтроковоеПредставлениеПустогоУникальногоИдентификатора();
			СообщениеJSON.Идентификатор             = ИдентификаторАбстрактногоСообщения;
			СообщениеJSON.ТребуетсяПодписание       = Ложь;
			
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ШтрихкодыУпаковок.ШтрихкодУпаковки                   КАК ШтрихкодУпаковки,
		|	ШтрихкодыУпаковок.ШтрихкодУпаковки.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
		|	ПулКодовМаркировкиСУЗ.ИдентификаторЗаказаСУЗ         КАК ИдентификаторЗаказаСУЗ,
		|	ШтрихкодыУпаковок.ШтрихкодУпаковки.Номенклатура      КАК Номенклатура,
		|	ШтрихкодыУпаковок.ШтрихкодУпаковки.Характеристика    КАК Характеристика,
		|	ШтрихкодыУпаковок.ШтрихкодУпаковки.Серия             КАК Серия,
		|	ПулКодовМаркировкиСУЗ.GTIN                           КАК GTIN
		|ИЗ
		|	Документ.СписаниеКодовМаркировкиИСМП.ШтрихкодыУпаковок КАК ШтрихкодыУпаковок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
		|		ПО ШтрихкодыУпаковок.ШтрихкодУпаковки.ЗначениеШтрихкода = ПулКодовМаркировкиСУЗ.КодМаркировки
		|ГДЕ
		|	ШтрихкодыУпаковок.Ссылка = &Ссылка";
		
		Если ЭтоСписаниеПриПоступлении Тогда
			Запрос.Текст = Запрос.Текст + "
				|ИТОГИ
				|ПО
				|	ИдентификаторЗаказаСУЗ";
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		
		ШтрихкодыУпаковок = Запрос.Выполнить();
		
		Если ЭтоСписаниеПриПоступлении Тогда
			
			ШтрихкодыУпаковокКПовторнойПередаче = Неопределено;
			
			Если Повторно Тогда
				
				ШтрихкодыУпаковокКПовторнойПередаче = РегистрыСведений.ПакетыКодовМаркировкиИСМП.ПолучитьКодыКПовторнойПередаче(ДокументСсылка);
				Если ШтрихкодыУпаковокКПовторнойПередаче = Неопределено Тогда
					КодыМаркировкиКПовторнойПередаче = РегистрыСведений.ПакетыКодовМаркировкиИСМП.ПолучитьДанныеПоДокументу(ДокументСсылка);
					ШтрихкодыУпаковокКПовторнойПередаче = Новый Соответствие;
					Для Каждого ЭлементДанных Из ШтрихкодированиеИС.ШтрихкодыУпаковок(КодыМаркировкиКПовторнойПередаче) Цикл
						ШтрихкодыУпаковокКПовторнойПередаче.Вставить(ЭлементДанных.Ссылка, Истина);
					КонецЦикла;
				КонецЕсли;
				
				Если ШтрихкодыУпаковокКПовторнойПередаче.Количество() = 0 Тогда
					
					ПараметрыЗапроса = Новый Структура;
					ПараметрыЗапроса.Вставить("ПовторнаяОтправкаНеТребуется", Истина);
					ПараметрыЗапроса.Вставить("ОперацияДокумента",            Шапка.Операция);
					
					СообщениеJSON.ПараметрыЗапроса = ПараметрыЗапроса;
					СообщенияJSON.Добавить(СообщениеJSON);
					
					Возврат СообщенияJSON;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ПараметрыЗапроса = Новый Структура;
			ПараметрыЗапроса.Вставить("ОперацияДокумента",  Шапка.Операция);
			ПараметрыЗапроса.Вставить("ПовторнаяОтправка",  Повторно);
			ПараметрыЗапроса.Вставить("ИспользуетсяПакетнаяПередачаСообщений", Истина);
			
			СообщениеJSON.ПараметрыЗапроса = ПараметрыЗапроса;
			
			СообщенияJSON.Добавить(СообщениеJSON);
			
			ВыборкаПоИдентификаторамЗаказаСУЗ = ШтрихкодыУпаковок.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоИдентификаторамЗаказаСУЗ.Следующий() Цикл
				
				КодыМаркировки = Новый Массив; // Массив
				ГруппаНормализованныхКодов = Новый Массив;
				
				ВыборкаДетальныеЗаписи = ВыборкаПоИдентификаторамЗаказаСУЗ.Выбрать();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					Если ШтрихкодыУпаковокКПовторнойПередаче <> Неопределено
						И ШтрихкодыУпаковокКПовторнойПередаче[ВыборкаДетальныеЗаписи.ШтрихкодУпаковки] = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					КодыМаркировки.Добавить(Новый Структура("number", ВыборкаДетальныеЗаписи.ЗначениеШтрихкода));
					ГруппаНормализованныхКодов.Добавить(ВыборкаДетальныеЗаписи.ЗначениеШтрихкода);
					
				КонецЦикла;
				
				Если КодыМаркировки.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				DropoutCodes = Новый Массив;
				
				СтрокаКодыМаркировки = Новый Структура;
				СтрокаКодыМаркировки.Вставить("reason", ИнтерфейсСУЗСлужебный.ПричинаСписанияКИЗ(Шапка.ПричинаСписания));
				СтрокаКодыМаркировки.Вставить("codes",  КодыМаркировки);
				
				DropoutCodes.Добавить(СтрокаКодыМаркировки);
				
				ТелоЗапроса = Новый Структура;
				ТелоЗапроса.Вставить("orderId",         ВыборкаПоИдентификаторамЗаказаСУЗ.ИдентификаторЗаказаСУЗ);
				ТелоЗапроса.Вставить("senderGln",       Шапка.GLNОрганизации);
				ТелоЗапроса.Вставить("dropoutDateTime", ИнтеграцияИС.ДатаСЧасовымПоясом(Шапка.Дата, ЧасовойПоясСеанса()));
				ТелоЗапроса.Вставить("dropoutCodes",    DropoutCodes);
				
				СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
				СообщениеJSON.Организация       = Шапка.Организация;
				СообщениеJSON.Документ          = ДокументСсылка;
				СообщениеJSON.ДокументОснование = Шапка.ДокументОснование;
				
				СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
					Шапка.Операция, ДокументСсылка, НомерВерсии);
				
				ТекстСообщенияJSON = ОбщегоНазначенияИСМП.ОбъектВТекстJSON(ТелоЗапроса, Истина);
				
				СообщениеJSON.ТекстСообщенияJSON  = ТекстСообщенияJSON;
				СообщениеJSON.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
				СообщениеJSON.Версия              = НомерВерсии;
				СообщениеJSON.ТребуетсяПодписание = Ложь;
				
				СообщениеJSON.ВидПродукции              = Шапка.ВидПродукции;
				СообщениеJSON.Операция                  = Шапка.Операция;
				СообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами;
				СообщениеJSON.ФорматОбмена              = Перечисления.ВерсииФорматаОбменаСУЗ.V2;
				СообщениеJSON.СтанцияУправленияЗаказами = СтанцияУправленияЗаказами;
				СообщениеJSON.ПроизводственныйОбъект    = Шапка.ПроизводственныйОбъект;
				
				ПараметрыЗапроса = Новый Структура;
				ПараметрыЗапроса.Вставить("ДанныеСообщения",                       ГруппаНормализованныхКодов);
				ПараметрыЗапроса.Вставить("ПовторнаяОтправка",                     Повторно);
				ПараметрыЗапроса.Вставить("ИспользуетсяПакетнаяПередачаСообщений", Истина);
				
				СообщениеJSON.ПараметрыЗапроса = ПараметрыЗапроса;
				СообщениеJSON.ЗагружатьДо      = ИдентификаторАбстрактногоСообщения;
				
				СообщенияJSON.Добавить(СообщениеJSON);
				
			КонецЦикла;
			
		Иначе
			
			ДанныеШтрихкодов = Запрос.Выполнить().Выгрузить();
			
			Параметры = Новый Структура;
			Параметры.Вставить("РеквизитыОрганизации", РеквизитыОрганизации);
			Параметры.Вставить("ИсточникДанных",       ДанныеШтрихкодов);
			Параметры.Вставить("ДокументСсылка",       ДокументСсылка);
			Параметры.Вставить("НомерВерсии",          НомерВерсии);
			Параметры.Вставить("Товары",               Товары);
			Параметры.Вставить(
				"ПользовательскиеПараметрыРазбораКодаМаркировки",
				ПользовательскиеПараметрыРазбораКодаМаркировки);
			
			Возврат СообщенияJSONСписаниеКодовМаркировкиИСМП(Шапка, Товары, Параметры);
			
		КонецЕсли;
		
#КонецОбласти
		
	ИначеЕсли ПередачаОтчетаЧерезСУЗ
		И Не ЭтоВыбытиеДоОбязательностиМаркировки Тогда
		
		РезультатОпределенияСУЗ = ИнтеграцияИСМПСлужебный.ОпределитьСтанциюУправленияЗаказамиУпрощенно(
			СообщенияJSON, Шапка.Операция, Шапка, ДополнительныеПараметры);
		Если Не РезультатОпределенияСУЗ.Успешно Тогда
			Возврат СообщенияJSON;
		КонецЕсли;
		
		ФорматОбмена = РезультатОпределенияСУЗ.НастройкаОбмена.ФорматОбмена;
		
		Если Не ИнтерфейсСУЗ.ПоддерживаетсяФорматОбменаПоВидуПродукции(ФорматОбмена, Шапка.ВидПродукции) Тогда
			
			СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
			СообщениеJSON.Документ    = ДокументСсылка;
			СообщениеJSON.Организация = Шапка.Организация;
			СообщениеJSON.Описание    = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
				Шапка.Операция, ДокументСсылка);
			СообщениеJSON.ТекстОшибки = СтрШаблон(
				НСтр("ru = 'По виду продукции %1 не поддерживается формат обмена с СУЗ ниже V3.
				|Перейдите в список СУЗ и установите формат обмена V3.'"),
				Шапка.ВидПродукции);
			СообщениеJSON.ТребуетсяПодписание = Ложь;
			СообщенияJSON.Добавить(СообщениеJSON);
			
			Возврат СообщенияJSON;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(РеквизитыОрганизации.ИНН) Тогда
			ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
				СообщениеJSON,
				СтрШаблон(
					НСтр("ru = 'Не заполнено поле ""ИНН"" для организации %1'"), Шапка.Организация));
		КонецЕсли;
		
		ТелоЗапроса = Новый Структура;
		
		// Обязательные реквизиты
		ТелоЗапроса.Вставить("dropoutReason", ИнтерфейсСУЗСлужебный.ПричинаСписанияКМ(Шапка.ПричинаСписания));
		ТелоЗапроса.Вставить("sntins",        Новый Массив);
		
		Если ЭтоМОТП Тогда
			ТелоЗапроса.Вставить("sourceDocDate",  Формат(Шапка.Дата, "ДФ=yyyy-MM-dd;"));
			ТелоЗапроса.Вставить("sourceDocNum",   Шапка.Номер);
			ТелоЗапроса.Вставить("address",        Шапка.ПроизводственныйОбъектАдресСтрокой);
			ТелоЗапроса.Вставить("withChild",      Ложь);
			ТелоЗапроса.Вставить("participantId",  РеквизитыОрганизации.ИНН);
			
			// Необязательные реквизиты
			Если ЗначениеЗаполнено(Шапка.ИдентификаторПроизводственнойЛинии) Тогда
				ТелоЗапроса.Вставить("productionLineId",  Шапка.ИдентификаторПроизводственнойЛинии);
			КонецЕсли;
			Если ЗначениеЗаполнено(Шапка.ИдентификаторПроизводственногоЗаказа) Тогда
				ТелоЗапроса.Вставить("productionOrderId",  Шапка.ИдентификаторПроизводственногоЗаказа);
			КонецЕсли;
		КонецЕсли;
		
		ЕстьОшибки = Ложь;
		Для Каждого СтрокаДанныхОтчета Из НормализованныеДанныеОтчета Цикл
			
			Если ЭтоМОТП Тогда
				ТелоЗапроса.sntins.Добавить(СтрокаДанныхОтчета.КодДляПередачиИСМП);
			ИначеЕсли Не ЗначениеЗаполнено(СтрокаДанныхОтчета.ПолныйКодМаркировки) Тогда
				ЕстьОшибки = Истина;
				ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
					СообщениеJSON,
					СтрШаблон(НСтр("ru = 'Не найден полный код маркировки для кода %1.'"), СтрокаДанныхОтчета.КодМаркировки));
			Иначе
				ТелоЗапроса.sntins.Добавить(ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.Base64ВШтрихкод(СтрокаДанныхОтчета.ПолныйКодМаркировки));
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьОшибки Тогда
			СообщенияJSON.Добавить(СообщениеJSON);
			Возврат СообщенияJSON;
		КонецЕсли;
		
		ИнтерфейсСУЗ.ТелоЗапросаПоФорматуОбмена(ТелоЗапроса, ФорматОбмена, Шапка.Операция, Шапка.ВидПродукции);
		
		ТекстСообщенияJSON = ОбщегоНазначенияИСМП.ОбъектВТекстJSON(ТелоЗапроса, Истина);
		
		СообщениеJSON.ТекстСообщенияJSON  = ТекстСообщенияJSON;
		СообщениеJSON.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
		СообщениеJSON.Версия              = НомерВерсии;
		СообщениеJSON.ТребуетсяПодписание = Ложь;
		
		СообщениеJSON.ВидПродукции              = Шапка.ВидПродукции;
		СообщениеJSON.Операция                  = Шапка.Операция;
		СообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами;
		СообщениеJSON.ФорматОбмена              = ФорматОбмена;
		СообщениеJSON.СтанцияУправленияЗаказами = РезультатОпределенияСУЗ.СтанцияУправленияЗаказами;
		СообщениеJSON.ПроизводственныйОбъект    = Шапка.ПроизводственныйОбъект;
		СообщениеJSON.ТребуетсяПодписание       = ФорматОбмена = Перечисления.ВерсииФорматаОбменаСУЗ.V3;
		
		ПараметрыЗапроса = Новый Структура;
		ПараметрыЗапроса.Вставить("КонтролироватьСтатусДокументаСписаниеИСМП", Истина);
		ПараметрыЗапроса.Вставить("ИспользуетсяПакетнаяПередачаСообщений",     Ложь);
		ПараметрыЗапроса.Вставить("ОперацияДокумента", Шапка.Операция);
		
		СообщениеJSON.ПараметрыЗапроса = ПараметрыЗапроса;

		СообщенияJSON.Добавить(СообщениеJSON);
		
	ИначеЕсли ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(Шапка.ВидПродукции) Или ЭтоВыбытиеДоОбязательностиМаркировки Тогда
		
		Параметры = Новый Структура;
		
		ЭтоПиво = Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.Пиво
			Или Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.ПивоВПотребительскихУпаковках;
		Если ЭтоПиво И ЭтоВыбытиеДоОбязательностиМаркировки Тогда
			
			КодФИАС = Шапка.КодФИАС;
			Если Не ЗначениеЗаполнено(КодФИАС) Тогда
				РезультатОпределенияСУЗ = ИнтеграцияИСМПСлужебный.ОпределитьСтанциюУправленияЗаказами(
					СообщенияJSON, СообщениеJSON, Шапка, ДополнительныеПараметры);
				Если Не РезультатОпределенияСУЗ.Успешно Тогда
					СообщенияJSON.Добавить(СообщениеJSON);
					Возврат СообщенияJSON;
				КонецЕсли;
				
				КодФИАС = ИдентификаторАдреса(Шапка.ВидПродукции, РезультатОпределенияСУЗ, СообщениеJSON);
				Если ЗначениеЗаполнено(СообщениеJSON.ТекстОшибки) Тогда
					СообщенияJSON.Добавить(СообщениеJSON);
					Возврат СообщенияJSON;
				КонецЕсли;
			КонецЕсли;
			
			Параметры.Вставить("КодФИАС", КодФИАС);
			
		КонецЕсли;
			
		Если Шапка.ОтчетПроизводственнойЛинии Тогда
			ИсточникДанных = НормализованныеДанныеОтчета;
		Иначе
			ИсточникДанных = РезультатПоиска.МаркированныеТовары;
		КонецЕсли;
		
		Параметры.Вставить("РеквизитыОрганизации", РеквизитыОрганизации);
		Параметры.Вставить("ИсточникДанных",       ИсточникДанных);
		Параметры.Вставить("ДокументСсылка",       ДокументСсылка);
		Параметры.Вставить("НомерВерсии",          НомерВерсии);
		Параметры.Вставить("Товары",               Товары);
		Параметры.Вставить(
			"ПользовательскиеПараметрыРазбораКодаМаркировки",
			ПользовательскиеПараметрыРазбораКодаМаркировки);
		
		Возврат СообщенияJSONСписаниеКодовМаркировкиИСМП(Шапка, Товары, Параметры);
		
	Иначе
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Вид продукции ""%1"" не поддерживается.'"),
			Шапка.ВидПродукции);
	КонецЕсли;
	
	Возврат СообщенияJSON;
	
КонецФункции

Функция СообщенияJSONСписаниеКодовМаркировкиИСМП(Шапка, СведенияОТоварах, ДополнительныеПараметры)
	
	СообщенияJSON = Новый Массив;
	
	РеквизитыОрганизации = ДополнительныеПараметры.РеквизитыОрганизации;
	НомерВерсии          = ДополнительныеПараметры.НомерВерсии;
	ИсточникДанных       = ДополнительныеПараметры.ИсточникДанных;
	Товары               = ДополнительныеПараметры.Товары;
	
	ЭтоМех               = Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха;
	ЭтоМОТП              = ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияМОТП(Шапка.ВидПродукции);
	ЭтоПиво              = Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.Пиво
		Или Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.ПивоВПотребительскихУпаковках;
	
	ПользовательскиеПараметрыРазбораКодаМаркировки = ДополнительныеПараметры.ПользовательскиеПараметрыРазбораКодаМаркировки;
	
	ПараметрыНормализацииПрочее = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализацииПрочее.ИмяСвойстваКодМаркировки = "Штрихкод";
	ПараметрыНормализацииПрочее.НачинаетсяСоСкобки       = Ложь;

	СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
	СообщениеJSON.Организация       = Шапка.Организация;
	СообщениеJSON.Документ          = Шапка.Ссылка;
	СообщениеJSON.ДокументОснование = Шапка.ДокументОснование;
	
	СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
		Шапка.Операция, Шапка.Ссылка, НомерВерсии);
	
	Если Не ЗначениеЗаполнено(РеквизитыОрганизации.ИНН) Тогда
		ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
			СтрШаблон(
				НСтр("ru = 'Не заполнено поле ""ИНН"" для организации %1'"), Шапка.Организация));
	КонецЕсли;
	
	ЭтоВыбытиеДоОбязательностиМаркировки = Шапка.ПричинаСписания = Перечисления.ПричиныСписанияКодовМаркировкиИСМП.ВыбытиеДоОбязательностиМаркировки;
	ТелоЗапроса = Новый Структура;
	Если ЭтоВыбытиеДоОбязательностиМаркировки Тогда
		
		ТелоЗапроса.Вставить("participantId",   РеквизитыОрганизации.ИНН);
		ИмяПараметрКодыМаркировки = "sntins";
		ТелоЗапроса.Вставить("dropoutReason", ИнтерфейсИСМПСлужебный.ПричинаСписанияКодаМаркировки(Шапка.ПричинаСписания));
		Если ЭтоМОТП И ЗначениеЗаполнено(Шапка.ПроизводственныйОбъектАдресСтрокой) Тогда
			ТелоЗапроса.Вставить("address", Шапка.ПроизводственныйОбъектАдресСтрокой);
		КонецЕсли;
		Если ЭтоПиво Тогда
			ТелоЗапроса.Вставить("fiasId", ДополнительныеПараметры.КодФИАС);
		КонецЕсли;
		
		Если Не ЭтоМОТП Или ЗначениеЗаполнено(Шапка.ДатаПервичногоДокумента) Тогда
			ТелоЗапроса.Вставить("sourceDocDate",   Формат(Шапка.ДатаПервичногоДокумента,"ДФ=yyyy-MM-dd"));
			ТелоЗапроса.Вставить("sourceDocNum", Шапка.НомерПервичногоДокумента);
			ТелоЗапроса.Вставить("sourceDocType", ИнтерфейсИСМПСлужебный.ВидПервичногоДокумента(Шапка.ВидПервичногоДокумента));
			Если Шапка.ВидПервичногоДокумента = Перечисления.ВидыПервичныхДокументовИСМП.Прочее Тогда
				ТелоЗапроса.Вставить("sourceDocName", Шапка.НаименованиеПервичногоДокумента);
			КонецЕсли;
		ИначеЕсли ЭтоМОТП Тогда
			ТелоЗапроса.Вставить("sourceDocDate", Формат(Шапка.Дата,"ДФ=yyyy-MM-dd"));
			ТелоЗапроса.Вставить("sourceDocNum",  Шапка.Номер);
		КонецЕсли;
		
		ТелоЗапроса.Вставить("withChild", Не ЭтоМОТП);
		
	Иначе
		
		ТелоЗапроса.Вставить("trade_participant_inn",   РеквизитыОрганизации.ИНН);
		ТелоЗапроса.Вставить("cancellation_doc_date",   ИнтеграцияИС.ДатаUTC(Шапка.Дата));
		ТелоЗапроса.Вставить("cancellation_doc_number", Шапка.Номер);
		ИмяПараметрКодыМаркировки = "km_list";
		
	КонецЕсли;
	
	ГруппаКодов = Новый Массив;
	ТелоЗапроса.Вставить(ИмяПараметрКодыМаркировки, ГруппаКодов);
	
	Если Шапка.ОтчетПроизводственнойЛинии Тогда
		
		ПричинаСписания = ИнтерфейсИСМПСлужебный.ПричинаСписанияКодаМаркировки(Шапка.ПричинаСписания);
		Для Каждого СтрокаДанныхОтчета Из ИсточникДанных Цикл
			
			Если ЭтоВыбытиеДоОбязательностиМаркировки Тогда
				ГруппаКодов.Добавить(СтрокаДанныхОтчета.КодДляПередачиИСМП);
			Иначе
				СтрокаТЧ = Новый Структура;
				СтрокаТЧ.Вставить(
					"uit",
					СтрокаДанныхОтчета.КодДляПередачиИСМП);
				СтрокаТЧ.Вставить("cancellation_reason", ПричинаСписания);
				ГруппаКодов.Добавить(СтрокаТЧ);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого СтрокаИсточникаДанных Из ИсточникДанных Цикл
			
			ПараметрыОтбора = Новый Структура;
			
			Если ЗначениеЗаполнено(СтрокаИсточникаДанных.Номенклатура) Тогда
				
				ПараметрыОтбора.Вставить("Номенклатура",   СтрокаИсточникаДанных.Номенклатура);
				ПараметрыОтбора.Вставить("Характеристика", СтрокаИсточникаДанных.Характеристика);
				ПараметрыОтбора.Вставить("Серия",          СтрокаИсточникаДанных.Серия);
				
			Иначе
				
				ПараметрыОтбора.Вставить("GTIN", "");
				
				ПримечаниеКРезультатуРазбора = Неопределено;
				ДанныеКодаМаркировки         = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(
					СтрокаИсточникаДанных.Штрихкод, Шапка.ВидПродукции, ПримечаниеКРезультатуРазбора);
				
				Если ДанныеКодаМаркировки = Неопределено Тогда
					ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
						СообщениеJSON,
						СтрШаблон(
							НСтр("ru = 'Не удалось разобрать код маркировки %1:
								       |%2'"),
								СтрокаИсточникаДанных.Штрихкод,
								ПримечаниеКРезультатуРазбора.ТекстОшибки));
				Иначе
					ПараметрыОтбора.GTIN = ДанныеКодаМаркировки.СоставКодаМаркировки.GTIN;
				КонецЕсли;
				
			КонецЕсли;
			
			НайденныеСтроки = Товары.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() = 1 Тогда
				
				Если Не ЭтоМех Тогда
					РезультатРазбора = ШтрихкодированиеОбщегоНазначенияИС.НоваяСтруктураОбработкиШтрихкода(
						СтрокаИсточникаДанных.Штрихкод, Шапка.ВидПродукции, ПользовательскиеПараметрыРазбораКодаМаркировки);
					ШтрихкодированиеОбщегоНазначенияИС.ЗаполнитьВидУпаковкиПоДаннымРазбораИлиСтрокеДанных(
						СтрокаИсточникаДанных, РезультатРазбора);
					КодМаркировкиДляПередачиИСМП = ШтрихкодированиеИСМП.КодМаркировкиДляПередачиИСМП(РезультатРазбора, ПараметрыНормализацииПрочее);
				КонецЕсли;
				
				Если ЭтоВыбытиеДоОбязательностиМаркировки Тогда
					ГруппаКодов.Добавить(КодМаркировкиДляПередачиИСМП);
				Иначе
					СтрокаТЧТовары = НайденныеСтроки[0];
					
					Если ЗначениеЗаполнено(СтрокаТЧТовары.ПричинаСписания) Тогда
						ПричинаСписания = СтрокаТЧТовары.ПричинаСписания;
					Иначе
						ПричинаСписания = Шапка.ПричинаСписания;
					КонецЕсли;
					
					СтрокаТЧ = Новый Структура;
					Если ЭтоМех Тогда
						СтрокаТЧ.Вставить("uit", СтрокаИсточникаДанных.ЗначениеШтрихкода);
					Иначе
						СтрокаТЧ.Вставить("uit", КодМаркировкиДляПередачиИСМП);
					КонецЕсли;
					
					СтрокаТЧ.Вставить("cancellation_reason", ИнтерфейсИСМПСлужебный.ПричинаСписанияКодаМаркировки(ПричинаСписания));
					ГруппаКодов.Добавить(СтрокаТЧ);
				КонецЕсли;
				
			ИначеЕсли НайденныеСтроки.Количество() > 1 Тогда
				
				СообщитьОбОшибкеТабличнойЧастиТовары(НайденныеСтроки, ПараметрыОтбора, СтрокаИсточникаДанных, СообщениеJSON);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТекстСообщенияJSON = ОбщегоНазначенияИСМП.ОбъектВТекстJSON(ТелоЗапроса, Истина);
	
	СообщениеJSON.ТекстСообщенияJSON  = ТекстСообщенияJSON;
	СообщениеJSON.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеJSON.Версия              = НомерВерсии;
	СообщениеJSON.ТребуетсяПодписание = Истина;
	
	Если ЭтоВыбытиеДоОбязательностиМаркировки Тогда
		СообщениеJSON.Операция = Перечисления.ВидыОперацийИСМП.СписаниеКодовВыбывшихДоОбязательностиМаркировки;
	Иначе
		СообщениеJSON.Операция = Шапка.Операция;
	КонецЕсли;
	СообщениеJSON.ВидПродукции              = Шапка.ВидПродукции;
	СообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.ИСМП;
	СообщениеJSON.СтанцияУправленияЗаказами = Неопределено;
	
	Если Не Шапка.Операция = Перечисления.ВидыОперацийИСМП.СписаниеЭмитированныхКодовМаркировкиПриПоступлении Тогда
		
		ПараметрыЗапроса = Новый Структура;
		ПараметрыЗапроса.Вставить("КонтролироватьСтатусДокументаСписаниеИСМП", Ложь);
		
		СообщениеJSON.ПараметрыЗапроса = ПараметрыЗапроса;
		
	КонецЕсли;
	
	СообщенияJSON.Добавить(СообщениеJSON);
	
	Возврат СообщенияJSON;
	
КонецФункции

Процедура СообщитьОНеправильномФорматеОтчета(СообщениеJSON)
	ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
		СообщениеJSON,
		НСтр("ru = 'Некорректный формат данных отчета производственной линии'"));
КонецПроцедуры

#КонецОбласти

#Область Серии

// Имена реквизитов, от значений которых зависят параметры указания серий
//
// Возвращаемое значение:
//  Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	Возврат ИнтеграцияИС.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий(Метаданные.Документы.СписаниеКодовМаркировкиИСМП);
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//  Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
// 
// Возвращаемое значение:
//  Произвольный - параметры указания серий
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	Возврат ИнтеграцияИС.ПараметрыУказанияСерий(Метаданные.Документы.СписаниеКодовМаркировкиИСМП, Объект);
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
//
// Параметры:
//   ПараметрыУказанияСерий - Произвольный - параметры указания серий
//
// Возвращаемое значение:
//   Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	Возврат ИнтеграцияИС.ТекстЗапросаЗаполненияСтатусовУказанияСерий(Метаданные.Документы.СписаниеКодовМаркировкиИСМП, ПараметрыУказанияСерий);
	
КонецФункции

#КонецОбласти

#Область ПанельОбменИСМП

// Возвращает массив дальнейших действий с документом, требующих участия пользователя
// 
// Возвращаемое значение:
// 	Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - дальшейшие действия
//
Функция ВсеТребующиеДействия() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеОбмен);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанныеСИсправлениями);
	
	Возврат МассивДействий;
	
КонецФункции

// Возвращает массив дальнейших действий с документом, требующих ожидания пользователем
// 
// Возвращаемое значение:
// 	Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - дальшейшие действия
//
Функция ВсеТребующиеОжидания() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
	
	Возврат МассивДействий;
	
КонецФункции

#КонецОбласти

#Область ОбработкаКодовМаркировки

Функция ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Если ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
		Результат = ОбработатьДанныеШтрихкодаУпаковкиМаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды);
	Иначе
		Результат = ОбработатьДанныеШтрихкодаМаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования);
	КонецЕсли;
	
	ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(Форма,,,"GTIN");
	
	Возврат Результат;
	
КонецФункции

Функция ОбработатьДанныеШтрихкодаУпаковкиМаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды)
	
	РезультатОбработки = ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
	
	ПараметрыЗаполнения = ПараметрыЗаполнения();
	
	ЗаполнитьДанныеОбъектаФормыПоДеревуУпаковок(Форма, ВложенныеШтрихкоды.ДеревоУпаковок, ПараметрыЗаполнения);
	
	РезультатОбработки.ИзмененныеСтроки  = ПараметрыЗаполнения.ИзмененныеСтроки;
	РезультатОбработки.ДобавленныеСтроки = ПараметрыЗаполнения.ДобавленныеСтроки;
	
	Возврат РезультатОбработки;
	
КонецФункции

Процедура ЗаполнитьДанныеОбъектаФормыПоДеревуУпаковок(Форма, ДеревоУпаковок, ПараметрыЗаполнения, УпаковкаВерхнегоУровня = Неопределено)
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Если УпаковкаВерхнегоУровня = Неопределено
			И СтрокаДерева.ТипУпаковки <> Перечисления.ТипыУпаковок.МаркированныйТовар
			И ЗначениеЗаполнено(СтрокаДерева.ШтрихкодУпаковки) Тогда
			УпаковкаВерхнегоУровняСтрокиДерева = СтрокаДерева.ШтрихкодУпаковки;
		Иначе
			УпаковкаВерхнегоУровняСтрокиДерева = УпаковкаВерхнегоУровня;
		КонецЕсли;
		
		ЗаполнитьДанныеОбъектаФормыПоДеревуУпаковок(
			Форма, СтрокаДерева, ПараметрыЗаполнения, УпаковкаВерхнегоУровняСтрокиДерева);
		
		Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			
			ПараметрыЗаполнения.РодительскийШтрихкод = УпаковкаВерхнегоУровня;
			ОбработатьДанныеШтрихкодаПотребительскойУпаковки(Форма, СтрокаДерева, Неопределено, ПараметрыЗаполнения);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПараметрыЗаполнения()
	
	Результат = Новый Структура;
	Результат.Вставить("ИзмененныеСтроки", Новый Массив);
	Результат.Вставить("ДобавленныеСтроки", Новый Массив);
	Результат.Вставить("ДобавленныеШтрихкоды", Новый Массив);
	Результат.Вставить("РодительскийШтрихкод");
	
	Возврат Результат;
	
КонецФункции

Функция ОбработатьДанныеШтрихкодаМаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования)
	
	Если ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(ДанныеШтрихкода.ВидПродукции, Истина) Тогда
		
		Возврат ОбработатьДанныеШтрихкодаПотребительскойУпаковки(Форма, ДанныеШтрихкода, ПараметрыСканирования);
		
	КонецЕсли;
	
КонецФункции

Функция ОбработатьДанныеШтрихкодаПотребительскойУпаковки(Форма, ДанныеШтрихкода, ПараметрыСканирования, ПараметрыЗаполнения = Неопределено)
	
	ИсточникДанных = Форма.Объект;
	ВидПродукции = Форма.Объект.ВидПродукции;
	Операция = Форма.Объект.Операция;
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		
		ПараметрыЗаполнения  = ПараметрыЗаполнения();
		РезультатОбработки   = ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьРезультатОбработкиШтрихкода(Неопределено, ДанныеШтрихкода);
		РодительскийШтрихкод = Неопределено;
		
	Иначе
		
		РезультатОбработки   = ПараметрыЗаполнения;
		РодительскийШтрихкод = ПараметрыЗаполнения.РодительскийШтрихкод;
		
	КонецЕсли;
	
	ОбработкаБезМаркировки = ТипЗнч(ДанныеШтрихкода) = Тип("Структура")
		И ДанныеШтрихкода.Свойство("ОбработатьБезМаркировки")
		И ДанныеШтрихкода.ОбработатьБезМаркировки;
	
	СпецификаОбработки = "";
	Если ДанныеШтрихкода.ПроизвольнаяЕдиницаУчета Тогда
		СпецификаОбработки = СпецификаОбработки + ",КоличествоКодов";
	КонецЕсли;
	Если ИнтеграцияИСКлиентСервер.ВидПродукцииПодлежитМаркировкеОстатков(ВидПродукции) Тогда
		СпецификаОбработки = СпецификаОбработки + ",ДоступныКодыМаркировкиОстатков";
	КонецЕсли;
	ОбновляемаяСтрока = ПроверкаИПодборПродукцииИС.ДанныеШтрихкодаДляДобавленияВКеш(ДанныеШтрихкода, "ДоступныКодыМаркировкиОстатков");
	
	Если РодительскийШтрихкод <> Неопределено Тогда
		ОбновляемаяСтрока.ШтрихкодУпаковки = РодительскийШтрихкод;
	КонецЕсли;
	
	ЭтоСписаниеПриПоступлении = Операция = Перечисления.ВидыОперацийИСМП.СписаниеЭмитированныхКодовМаркировкиПриПоступлении;
	
	Если ЭтоСписаниеПриПоступлении Тогда
		
		СтрокаПредставленияОбработана = Ложь;
		Если ЗначениеЗаполнено(ДанныеШтрихкода.GTIN) Тогда
			СтрокиПредставления = Форма.ПредставлениеКИЗ.НайтиСтроки(Новый Структура("GTIN", ДанныеШтрихкода.GTIN));
		ИначеЕсли ЗначениеЗаполнено(ДанныеШтрихкода.ПредставлениеНоменклатуры) Тогда
			СтрокиПредставления = Форма.ПредставлениеКИЗ.НайтиСтроки(Новый Структура("Представление", ДанныеШтрихкода.ПредставлениеНоменклатуры));
		КонецЕсли;
		
		Если СтрокиПредставления <> Неопределено
			И СтрокиПредставления.Количество() Тогда
			СтрокиПредставления[0].Количество = СтрокиПредставления[0].Количество + 1;
			СтрокаПредставленияОбработана = Истина;
		КонецЕсли;
		
		Если Не СтрокаПредставленияОбработана Тогда
			
			ТаблицаШтрихкоды = Новый ТаблицаЗначений();
			ТаблицаШтрихкоды.Колонки.Добавить("ШтрихкодУпаковки", Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
			ТаблицаШтрихкоды.Добавить().ШтрихкодУпаковки = ДанныеШтрихкода.ШтрихкодУпаковки;
			ПредставлениеКИЗ = РегистрыСведений.ПулКодовМаркировкиСУЗ.ЗаполнитьТаблицуПредставленийКИЗ(ТаблицаШтрихкоды);
			
			СтрокиПредставления = Форма.ПредставлениеКИЗ.НайтиСтроки(Новый Структура("Представление", ПредставлениеКИЗ[0].Представление));
			Если СтрокиПредставления.Количество() Тогда
				СтрокиПредставления[0].Количество = СтрокиПредставления[0].Количество + 1;
			Иначе
				ЗаполнитьЗначенияСвойств(Форма.ПредставлениеКИЗ.Добавить(), ПредставлениеКИЗ[0]);
				Форма.КоличествоСтрокПредставлениеКИЗ = Форма.КоличествоСтрокПредставлениеКИЗ + 1;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ПараметрыПоиска = ИнтеграцияИС.ПоляПоискаМаркируемойПродукции(Истина, Не ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура));
		ЗаполнитьЗначенияСвойств(ПараметрыПоиска, ДанныеШтрихкода);
		
		НайденныеСтрокиТовары = ИсточникДанных.Товары.НайтиСтроки(ПараметрыПоиска);
		Если НайденныеСтрокиТовары.Количество() > 0 Тогда
			
			ОбработатьНайденныеСтрокиВТаблицеТовары(Форма, НайденныеСтрокиТовары, ОбновляемаяСтрока, РезультатОбработки);
			
		Иначе
			
			СтрокаТовары = ИсточникДанных.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТовары, ОбновляемаяСтрока);
			СтрокаТовары.КоличествоУпаковок = СтрокаТовары.Количество;
			
			РезультатОбработки.ДобавленныеСтроки.Добавить(СтрокаТовары);
			
		КонецЕсли;
	
	КонецЕсли;
	
	Если Не ОбработкаБезМаркировки Тогда
		
		ПроверкаИПодборПродукцииИС.ДополнитьКешИТаблицуШтрихкодовУпаковок(Форма, ОбновляемаяСтрока, ПараметрыЗаполнения.ДобавленныеШтрихкоды);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура)
		И Не ЭтоСписаниеПриПоступлении Тогда
		
		РегистрыСведений.КэшОписанияОстатковИСМП.ЗаполнитьТаблицуПредставленийGTINОстатки(
			ИсточникДанных.Товары, ИсточникДанных.Организация, ИсточникДанных.ВидПродукции);
		
	КонецЕсли;
	
	Возврат РезультатОбработки;
	
КонецФункции

Процедура ОбработатьНайденныеСтрокиВТаблицеТовары(Форма, НайденныеСтрокиТоваров, ОбновляемаяСтрока, РезультатОбработки)
	
	СтрокаТовары = НайденныеСтрокиТоваров[0];
	
	КоличествоМаркируемойПродукции = ОбновляемаяСтрока.Количество;
	
	ВсегоПоПараметрамПоиска = 0;
	Для Каждого ПодходящаяСтрока Из НайденныеСтрокиТоваров Цикл
		ВсегоПоПараметрамПоиска = ВсегоПоПараметрамПоиска + ПодходящаяСтрока.Количество;
	КонецЦикла;
	
	ВсегоВКеше = ПроверкаИПодборПродукцииИС.КоличествоПоДаннымКеша(Форма, ОбновляемаяСтрока);
	
	Если ВсегоВКеше < ВсегоПоПараметрамПоиска Тогда
		КоличествоМаркируемойПродукции = Макс(0, КоличествоМаркируемойПродукции + ВсегоВКеше - ВсегоПоПараметрамПоиска);
	КонецЕсли;
	
	СтрокаТовары.Количество         = СтрокаТовары.Количество + КоличествоМаркируемойПродукции;
	
	Если КоличествоМаркируемойПродукции > 0 Тогда
		РезультатОбработки.ИзмененныеСтроки.Добавить(СтрокаТовары);
	КонецЕсли;
	
	ОбновляемаяСтрока.Количество = КоличествоМаркируемойПродукции;

	Если ОбновляемаяСтрока.Свойство("КоличествоПотребительскихУпаковок") Тогда
	
		КоличествоМаркируемойПродукции = ОбновляемаяСтрока.КоличествоПотребительскихУпаковок;

		ВсегоПоПараметрамПоиска = 0;
		Для Каждого ПодходящаяСтрока Из НайденныеСтрокиТоваров Цикл
			ВсегоПоПараметрамПоиска = ВсегоПоПараметрамПоиска + ПодходящаяСтрока.КоличествоПотребительскихУпаковок;
		КонецЦикла;

		ВсегоВКеше = ПроверкаИПодборПродукцииИС.КоличествоПоДаннымКеша(Форма, ОбновляемаяСтрока, "КоличествоПотребительскихУпаковок");

		Если ВсегоВКеше < ВсегоПоПараметрамПоиска Тогда
			КоличествоМаркируемойПродукции = Макс(0, КоличествоМаркируемойПродукции + ВсегоВКеше - ВсегоПоПараметрамПоиска);
		КонецЕсли;

		Если КоличествоМаркируемойПродукции > 0 Тогда

			СтрокаТовары.КоличествоПотребительскихУпаковок = СтрокаТовары.КоличествоПотребительскихУпаковок + КоличествоМаркируемойПродукции;

		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗавершениеПроверкиИПодбораМаркируемойПродукции

// Отражает результаты проверки и подбора в документе, из которого была вызвана соответствующая форма.
//
// Параметры:
// 	ПараметрыОкончанияПроверки - Структура - (См. ПроверкаИПодборМОТП.ЗафиксироватьРезультатПроверкиИПодбора)
Процедура ОтразитьРезультатыПроверкиИПодбора(ПараметрыОкончанияПроверки) Экспорт
	
	ДокументОбъект = ПараметрыОкончанияПроверки.ПроверяемыйДокумент.ПолучитьОбъект();
	
	Если Не ДокументОбъект.Операция = Перечисления.ВидыОперацийИСМП.СписаниеЭмитированныхКодовМаркировкиПриПоступлении Тогда
		
		МассивОбработанныхСтрок = Новый Массив;
		Для Каждого СтрокаТаблицы Из ПараметрыОкончанияПроверки.ТаблицаПодобраннойПровереннойПродукции Цикл
			
			Если СтрокаТаблицы.КоличествоПодобрано = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
				СтрокаТаблицы.GTIN = "";
			КонецЕсли;
			
			ПараметрыОтбора = ИнтеграцияИС.ПоляПоискаМаркируемойПродукции(Истина, Истина);
			ЗаполнитьЗначенияСвойств(ПараметрыОтбора, СтрокаТаблицы);
			
			НайденныеСтроки = ДокументОбъект.Товары.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() = 0 Тогда
				СтрокаТовары = ДокументОбъект.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТовары, СтрокаТаблицы);
				Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
					СтрокаТовары.GTIN = Неопределено;
				КонецЕсли;
			Иначе
				СтрокаТовары = НайденныеСтроки[0];
			КонецЕсли;
			
			Если МассивОбработанныхСтрок.Найти(СтрокаТовары) = Неопределено Тогда
				СтрокаТовары.Количество = СтрокаТаблицы.КоличествоПодобрано;
				МассивОбработанныхСтрок.Добавить(СтрокаТовары);
			Иначе
				СтрокаТовары.Количество = СтрокаТовары.Количество + СтрокаТаблицы.КоличествоПодобрано;
				СтрокаТовары.КоличествоПотребительскихУпаковок = СтрокаТовары.КоличествоПотребительскихУпаковок + СтрокаТаблицы.КоличествоПотребительскихУпаковок;
			КонецЕсли;
			
			ОбработатьСтрокуТабличнойЧасти(СтрокаТовары, ДокументОбъект);
			
		КонецЦикла;
		
		// Удаление лишних строк документа.
		ИндексТабЧастиТовары = ДокументОбъект.Товары.Количество() - 1;
		Пока ИндексТабЧастиТовары >= 0 Цикл
			
			СтрокаТовары = ДокументОбъект.Товары[ИндексТабЧастиТовары];
			Если СтрокаТовары.Количество = 0
			 Или МассивОбработанныхСтрок.Найти(СтрокаТовары) = Неопределено Тогда
				
				ДокументОбъект.Товары.Удалить(СтрокаТовары);
				
			КонецЕсли;
			
			ИндексТабЧастиТовары = ИндексТабЧастиТовары - 1;
		КонецЦикла;
		
	КонецЕсли;
	
	ДокументОбъект.ШтрихкодыУпаковок.Загрузить(ПараметрыОкончанияПроверки.ТаблицаШтрихкодовВерхнегоУровня);
	
	Если ДокументОбъект.Проведен Тогда
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецПопытки;
		
	Иначе
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись)
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти, ДокументОбъект)

	ПараметрыУказанияСерий = ПараметрыУказанияСерий(ДокументОбъект);
	ПустойСклад = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Склад");
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ПустойСклад, ПараметрыУказанияСерий));
	
	ИнтеграцияИСПереопределяемый.ОбработатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти, СтруктураДействий);
	
КонецПроцедуры

Процедура ЗаполнитьМаркируемуюПродукциюДокумента(ТаблицаМаркируемойПродукции, ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СписаниеКодовМаркировкиИСМП.Номенклатура,
	|	СписаниеКодовМаркировкиИСМП.Характеристика,
	|	СписаниеКодовМаркировкиИСМП.Серия,
	|	СписаниеКодовМаркировкиИСМП.Количество,
	|	СписаниеКодовМаркировкиИСМП.КоличествоПотребительскихУпаковок,
	|	СписаниеКодовМаркировкиИСМП.GTIN
	|ИЗ
	|	Документ.СписаниеКодовМаркировкиИСМП.Товары КАК СписаниеКодовМаркировкиИСМП
	|ГДЕ
	|	СписаниеКодовМаркировкиИСМП.Ссылка = &ДокументСсылка";
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТаблицаМаркируемойПродукции.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
	КонецЦикла;
	
	ПроверкаИПодборПродукцииИСМППереопределяемый.ПриОпределенииМаркируемойПродукцииДокумента(
		ДокументСсылка,
		Неопределено,
		ТаблицаМаркируемойПродукции);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее
Процедура СохранитьДанныеОтчетаПроизводственнойЛинии(ДокументСсылка, ДанныеОтчета)
	
	ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	ДокументОбъект.ДанныеОтчетаПроизводственнойЛинии.Загрузить(ДанныеОтчета);
	
	Если ДокументОбъект.Проведен Тогда
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецПопытки;
		
	Иначе
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись)
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьТекстОшибкиНеНайденПолныйКод(ИсходнаяСтрока, ИмяКолонки, ЕстьОшибки)
	
	ТекстОшибки = СтрШаблон(
		НСтр("ru = 'Не найден полный код маркировки для %1'"), 
		ИсходнаяСтрока[ИмяКолонки]);
	
	ИмяКолонкиТекстОшибки = "ТекстОшибки" + ИмяКолонки;
	
	ИсходнаяСтрока[ИмяКолонкиТекстОшибки] = ?(ЗначениеЗаполнено(ИсходнаяСтрока[ИмяКолонкиТекстОшибки]),
		ИсходнаяСтрока[ИмяКолонкиТекстОшибки] + Символы.ПС + ТекстОшибки,
		ТекстОшибки);
	
	ЕстьОшибки = Истина;
	
КонецПроцедуры

Функция ИнициализироватьНормализованныеДанныеОтчета()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("КодМаркировки",       Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ПолныйКодМаркировки", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("КодДляПередачиИСМП",  Новый ОписаниеТипов("Строка"));
	
	Возврат Результат;
	
КонецФункции

Процедура СообщитьОбОшибкеТабличнойЧастиТовары(НайденныеСтроки, ПараметрыОтбора, СтрокаДанных, СообщениеJSON)
	
	Если НайденныеСтроки.Количество() > 1 Тогда
		
		Если ЗначениеЗаполнено(СтрокаДанных.Номенклатура) Тогда
			ИнтеграцияИСМП.СообщитьОДубляхНоменклатуры(СообщениеJSON, ПараметрыОтбора);
		Иначе
			ИнтеграцияИСМП.СообщитьОДубляхGTIN(СообщениеJSON, ПараметрыОтбора);
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(СтрокаДанных.Номенклатура) Тогда
			ИнтеграцияИСМП.СообщитьОбОтсутствующейНоменклатуре(СообщениеJSON, ПараметрыОтбора);
		Иначе
			ИнтеграцияИСМП.СообщитьОбОтсутствующемGTIN(СообщениеJSON, ПараметрыОтбора);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

#Область Отчеты

// Заполняет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//   Параметры - Структура - Вспомогательные параметры. См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры.
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт

	ИнтеграцияИСПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);

	ИнтеграцияИСПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);

КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// Параметры:
//   МассивОбъектов        - Массив из Произвольный         - ссылки на объекты, которые нужно распечатать
//   ПараметрыПечати       - Структура                      - дополнительные настройки печати
//   КоллекцияПечатныхФорм - ТаблицаЗначений                - сформированные табличные документы (выходной параметр)
//   ОбъектыПечати         - СписокЗначений из Произвольный - имя области, в которой был выведен объект (выходной параметр)
//   ПараметрыВывода       - Структура                      - дополнительные параметры сформированных табличных документов (выходной параметр)
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	УправлениеДоступомИСПереопределяемый.ПриЗаполненииОграниченияДоступа(
		Метаданные.Документы.СписаниеКодовМаркировкиИСМП, Ограничение);

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

Функция ИдентификаторАдреса(ВидПродукции, РезультатОпределенияСУЗ, СообщениеJSON)
	
	ИдентификаторАдреса = Неопределено;
	Если ИнтеграцияИСМПКлиентСервер.ДляВидаПродукцииИспользуетсяКодФИАС(ВидПродукции) Тогда
		ИдентификаторАдреса = РезультатОпределенияСУЗ.НастройкаОбмена.КодФИАС;
		Если Не ЗначениеЗаполнено(ИдентификаторАдреса) Тогда
			ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
				СообщениеJSON,
				СтрШаблон(
					НСтр("ru = 'Не заполнен код ФИАС для СУЗ %1'"),
					РезультатОпределенияСУЗ.СтанцияУправленияЗаказами));
		КонецЕсли;
	КонецЕсли;

	Возврат ИдентификаторАдреса;

КонецФункции

#КонецОбласти

#КонецЕсли
