#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Статусы

// Возвращает конечные статусы.
// 
// Параметры:
//  ТребуетсяПовторноеОформление - Булево - Требуется повторное оформление
// 
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыОбработкиОтчетаИСМП -- Конечные статусы.
Функция КонечныеСтатусы(ТребуетсяПовторноеОформление = Истина) Экспорт
	
	Статусы = Новый Массив;
	
	Если Не ТребуетсяПовторноеОформление Тогда
		Статусы.Добавить(Перечисления.СтатусыОбработкиОтчетаИСМП.ПолученОтчет);
		Статусы.Добавить(Перечисления.СтатусыОбработкиОтчетаИСМП.ОтклоненияОбработаны);
	КонецЕсли;
	
	Возврат Статусы;
	
КонецФункции

// Возвращает статусы ошибок.
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыОбработкиОтчетаИСМП- Статусы ошибок.
//
Функция СтатусыОшибок() Экспорт
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиОтчетаИСМП.ОшибкаПередачи);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает статус по умолчанию.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиОтчетаИСМП - Статус по-умолчанию.
//
Функция СтатусПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыОбработкиОтчетаИСМП.Черновик;
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
// 
// Параметры:
//  СтруктураПараметров - Неопределено, Структура - Структура параметров
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП -- Дальнейшее действие по-умолчанию.
Функция ДальнейшееДействиеПоУмолчанию(СтруктураПараметров = Неопределено) Экспорт
	
	Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеОтчет;
	
КонецФункции

#КонецОбласти

#Область ДействияПриОбменеИСМП

// Статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОтчетИСМП - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция ИС МП
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиОтчетаИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3.
//
Функция СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийИСМП.ОтчетИСМПСписокКИНаБалансе
		Или Операция = Перечисления.ВидыОперацийИСМП.ОтчетИСМПСведенияОбОтклонениях Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиОтчетаИСМП.КПередаче);
		
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	//@skip-check constructor-function-return-section
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОтчетИСМП - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция ИС МП
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиОтчетаИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3.
//
Функция СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Если СтатусОбработки = Неопределено Тогда
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаПринята;
	КонецЕсли;
	
	Если Операция = Перечисления.ВидыОперацийИСМП.ОтчетИСМПСписокКИНаБалансе
		Или Операция = Перечисления.ВидыОперацийИСМП.ОтчетИСМПСведенияОбОтклонениях Тогда
			
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиОтчетаИСМП.Обрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиОтчетаИСМП.ОшибкаПередачи;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеОтчет);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	//@skip-check constructor-function-return-section
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после получения данных из ИС МП.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОтчетИСМП - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция обмена с ИС МП.
//  ДополнительныеПараметры - Неопределено, Структура - Свойства:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийИСМП - Операция квитанции.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиОтчетаИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3.
//
Функция СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		Статусы.Принят = Перечисления.СтатусыОбработкиОтчетаИСМП.ПолученОтчет;
		
		Если ДополнительныеПараметры <> Неопределено
			И ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыОперацийИСМП.ОтчетИСМПСведенияОбОтклонениях Тогда
			Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПодтвердитеОбработкуОтклонений);
		КонецЕсли;
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиОтчетаИСМП.ОшибкаПередачи;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеОтчет);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.ОтчетИСМПОтклоненияОбработаны Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		Статусы.Принят = Перечисления.СтатусыОбработкиОтчетаИСМП.ОтклоненияОбработаны;
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиОтчетаИСМП.ОшибкаПередачи;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеОтчет);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
			
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	//@skip-check constructor-function-return-section
	Возврат ПараметрыОбновления;
	
КонецФункции

// Обновить статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОтчетИСМП - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция ИС МП.
//  ДополнительныеПараметры - Неопределено, Структура - дополнительные параметры обновления статуса.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиОтчетаИСМП - Новый статус.
//
Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПодготовкиКПередачеДанных(
		ДокументСсылка, Операция, ДополнительныеПараметры);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОтчетИСМП - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция ИС МП
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения
//  ДополнительныеПараметры - Неопределено, Структура - дополнительные параметры обновления статуса.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиОтчетаИСМП - Новый статус.
//
Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после получения данных из ИС МП.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОтчетИСМП - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция обмена с ИС МП.
//  ДополнительныеПараметры - Неопределено, Структура - Свойства:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийИСМП - Операция, на которую получена квитанция.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиОтчетаИСМП - Новый статус.
//
Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Изменяет и возвращает статус документа ИС МП.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОтчетИСМП - Документ ИС МП.
//  ПараметрыОбновления - Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиОтчетаИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиОтчетаИСМП - новый статус документа ИС МП.
Функция ОбновитьСтатус(ДокументСсылка, ПараметрыОбновления, ДополнительныеПараметры) Экспорт
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Получить последовательность операций в течении жизненного цикла документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОтчетИСМП - Документ, для которого требуется обновить статус.
//  ЛинейныйСписок - Булево - линейный список.
//
// Возвращаемое значение:
//  ТаблицаЗначений - см. ПротоколОбменаИС.ПустаяТаблицаПоследовательностьОпераций.
Функция ПоследовательностьОпераций(ДокументСсылка, ЛинейныйСписок = Ложь) Экспорт
	
	Таблица = ПротоколОбменаИС.ПустаяТаблицаПоследовательностьОпераций();
	
	Исходящий = Перечисления.ТипыЗапросовИС.Исходящий;
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 1,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ОтчетИСМПСведенияОбОтклонениях);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 11,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ОтчетИСМППолучениеРезультатаВыгрузки);
		
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 12,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ОтчетИСМПОтклоненияОбработаны);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 2,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ОтчетИСМПСписокКИНаБалансе);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 21,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ОтчетИСМППолучениеРезультатаВыгрузки);
	
	Возврат Таблица;
	
КонецФункции

// Обработчик изменения статуса документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОтчетИСМП - Ссылка на документ
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиОтчетаИСМП - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиОтчетаИСМП - Новый статус.
//  ПараметрыОбновленияСтатуса - Структура - см. функцию ИнтеграцияИСМП.ПараметрыОбновленияСтатуса().
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт
	
	ИнтеграцияИСМППереопределяемый.ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса);
	
	//Получение конечного статуса требующего повторного оформления
	Если КонечныеСтатусы().Найти(НовыйСтатус)<>Неопределено
		И КонечныеСтатусы().Найти(ПредыдущийСтатус)=Неопределено Тогда
		РасчетСтатусовОформленияИСМП.РассчитатьСтатусыОформленияДокументов(ДокументСсылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПанельОбменИСМП

// Возвращает массив дальнейших действий с документом, требующих участия пользователя
// 
// Возвращаемое значение:
// 	Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - дальшейшие действия
Функция ВсеТребующиеДействия() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеОбмен);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеОтчет);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПодтвердитеОбработкуОтклонений);
	
	Возврат МассивДействий;
	
КонецФункции

// Возвращает массив дальнейших действий с документом, требующих ожидания
// 
// Возвращаемое значение:
// 	Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - дальшейшие действия
Функция ВсеТребующиеОжидания() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
	
	Возврат МассивДействий;
	
КонецФункции

#КонецОбласти

#Область ОбработкаКодовМаркировки

Функция ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Если ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
		Результат = ОбработатьДанныеШтрихкодаУпаковкиМаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды);
	ИначеЕсли ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(ДанныеШтрихкода.ВидПродукции, Истина) Тогда
		Результат = ОбработатьДанныеШтрихкодаПотребительскойУпаковки(Форма, ДанныеШтрихкода, ПараметрыСканирования);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Сообщения

// Сообщение к передаче JSON
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОтчетИСМП - Ссылка на документ
//  ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие.
//  ДополнительныеПараметры - Неопределено, Структура - дополнительные параметры для формирования сообщения.
//
// Возвращаемое значение:
//  Массив из см. ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON
Функция СообщениеКПередачеJSON(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеОтчет Тогда
		
		Если ЗначениеЗаполнено(ДокументСсылка) Тогда
			
			Возврат ЗапроситеОтчетJSON(ДокументСсылка, ДополнительныеПараметры);
			
		Иначе
			
			Возврат ЗагрузитьОтклоненияПоВидамПродукцииJSON(ДокументСсылка, ДополнительныеПараметры);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

#Область Отчеты

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//   Параметры - Структура - Вспомогательные параметры. См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры.
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ИнтеграцияИСПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
	ИнтеграцияИСПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);
	
	КомандаОтчет = Отчеты.СписокКИНаБалансеИСМП.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если КомандаОтчет<> Неопределено Тогда
		КомандаОтчет.Важность = "Обычное";
		КомандаОтчет.Порядок = 1;
		КомандаОтчет.ЕстьУсловияВидимости = Истина;
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(
			КомандаОтчет,
			"Операция",
			Перечисления.ВидыОперацийИСМП.ОтчетИСМПСписокКИНаБалансе,
			ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
	
	КомандаОтчет = Отчеты.СведенияОбОтклоненияхИСМП.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если КомандаОтчет<> Неопределено Тогда
		КомандаОтчет.Важность = "Обычное";
		КомандаОтчет.Порядок = 1;
		КомандаОтчет.ЕстьУсловияВидимости = Истина;
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(
			КомандаОтчет,
			"Операция",
			Перечисления.ВидыОперацийИСМП.ОтчетИСМПСведенияОбОтклонениях,
			ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// Параметры:
//   МассивОбъектов        - Массив из Произвольный         - ссылки на объекты, которые нужно распечатать
//   ПараметрыПечати       - Структура                      - дополнительные настройки печати
//   КоллекцияПечатныхФорм - ТаблицаЗначений                - сформированные табличные документы (выходной параметр)
//   ОбъектыПечати         - СписокЗначений из Произвольный - имя области, в которой был выведен объект (выходной параметр)
//   ПараметрыВывода       - Структура                      - дополнительные параметры сформированных табличных документов (выходной параметр)
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Возврат;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// Позволяет указать объекты метаданных, для которых задана логика ограничения доступа к данным.
// В модулях менеджеров указанных списков размещается процедура обработчика, например:
//
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	УправлениеДоступомИСПереопределяемый.ПриЗаполненииОграниченияДоступа(
		Метаданные.Документы.ОтчетИСМП, Ограничение);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

// Получает разность дат в днях
// 
// Параметры:
//  НачалоПериода - Дата
//  КонецПериода - Дата
//
// Возвращаемое значение:
//  Число
Функция РазностьДатВДнях(НачалоПериода, КонецПериода) Экспорт
	
	РазностьВСекундах = НачалоДня(КонецПериода) - НачалоДня(НачалоПериода);
	КоличествоДней = Окр(РазностьВСекундах / 60 / 60 / 24);
	Возврат КоличествоДней;
	
КонецФункции

// Расшифровка по кодам выводится по данным файла, если количество кодов не превышает МаксимальноеКоличествоКодовДляРасшифровкиОтчета() 
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОтчетИСМП - Ссылка на документ
//
// Возвращаемое значение:
//  Булево
Функция РасшифровкаПоКодамДоступна(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СУММА(ВложенныйЗапрос.КоличествоКодов) КАК КоличествоКодов
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОтчетИСМПКодыНаБалансе.Количество КАК КоличествоКодов
	|	ИЗ
	|		Документ.ОтчетИСМП.КодыНаБалансе КАК ОтчетИСМПКодыНаБалансе
	|	ГДЕ
	|		ОтчетИСМПКодыНаБалансе.Ссылка В (&Ссылка)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		СУММА(ОтчетИСМПСведенияОбОтклонениях.Количество)
	|	ИЗ
	|		Документ.ОтчетИСМП.СведенияОбОтклонениях КАК ОтчетИСМПСведенияОбОтклонениях
	|	ГДЕ
	|		ОтчетИСМПСведенияОбОтклонениях.Ссылка В (&Ссылка)) КАК ВложенныйЗапрос";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		
		Возврат Ложь;
		
	Иначе
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.КоличествоКодов <= МаксимальноеКоличествоКодовДляРасшифровкиОтчета()
			И Выборка.КоличествоКодов > 0;
		
	КонецЕсли;
	
КонецФункции

#Область ОбработкаЗагрузки

Процедура ОбработкаЗагрузкиПереданногоДокумента(ЭлементОчереди, ПараметрыОбмена, РезультатОбработкиЗаявки, ПараметрыОбновленияСтатуса) Экспорт
	
	Если РезультатОбработкиЗаявки.СтатусОбработки <> Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВыгрузки = Неопределено;
	ПараметрыОбновленияСтатуса.Свойство("ДанныеВыгрузки", ДанныеВыгрузки);
	Если ДанныеВыгрузки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
		
		// Ручная загрузка выгрузки
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(Метаданные.Документы.ОтчетИСМП.ПолноеИмя());
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ЭлементОчереди.Документ);
		
		//@skip-check lock-out-of-try
		Блокировка.Заблокировать();
		
		ДокументОбъект = ЭлементОчереди.Документ.ПолучитьОбъект();
		
		Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтчетИСМПСведенияОбОтклонениях Тогда
			
			ДокументОбъект.СведенияОбОтклонениях.Загрузить(ДанныеВыгрузки);
			
		ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтчетИСМПСписокКИНаБалансе Тогда
			
			ДокументОбъект.КодыНаБалансе.Загрузить(ДанныеВыгрузки);
			
			СоответствиеGTIN = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
				ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса, 
				"СоответствиеGTIN",
				Неопределено);
			
			Если СоответствиеGTIN = Неопределено Тогда
				
				// Запрос всех остатков, определение номенклатуры
				ШтрихкодыEAN = ДокументОбъект.КодыНаБалансе.ВыгрузитьКолонку("GTIN");
				ИнформацияПоШтрихкодамEAN = ШтрихкодированиеОбщегоНазначенияИС.ДанныеПоШтрихкодамEAN(ШтрихкодыEAN);
				ПараметрыОтбора = Новый Структура("ШтрихкодEAN", Неопределено);
				
				Для Каждого СтрокаПриемник Из ДокументОбъект.КодыНаБалансе Цикл
					ПараметрыОтбора.ШтрихкодEAN = СтрокаПриемник.GTIN;
					НайденныеСтроки = ИнформацияПоШтрихкодамEAN.НайтиСтроки(ПараметрыОтбора);
					Если НайденныеСтроки.Количество() = 1 Тогда
						ЗаполнитьЗначенияСвойств(СтрокаПриемник, НайденныеСтроки[0], "Номенклатура, Характеристика");
					КонецЕсли;
				КонецЦикла;
				
			Иначе
				
				// Запрос остатков с отбором по номенклатуре в документе
				Для Каждого СтрокаПриемник Из ДокументОбъект.КодыНаБалансе Цикл
					ДанныеЗаполнения = СоответствиеGTIN[СтрокаПриемник.GTIN];
					Если ДанныеЗаполнения <> Неопределено Тогда
						ЗаполнитьЗначенияСвойств(СтрокаПриемник, ДанныеЗаполнения, "Номенклатура, Характеристика");
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ДокументОбъект.Записать();
		
	Иначе
		
		ПараметрыЗапроса = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
		
		ДокументОбъект = СоздатьДокумент();
		ДокументОбъект.Организация = ЭлементОчереди.Организация;
		ДокументОбъект.ВидПродукции = ЭлементОчереди.ВидПродукции;
		ДокументОбъект.Операция = Перечисления.ВидыОперацийИСМП.ОтчетИСМПСведенияОбОтклонениях;
		ДокументОбъект.Комментарий = НСтр("ru = 'Загружено автоматически.'");
		ДокументОбъект.Дата = ТекущаяУниверсальнаяДата();
		
		ДокументОбъект.ДатаВыгрузкиНачалоПериода = ПрочитатьДатуJSON(ПараметрыЗапроса.ДатаВыгрузкиНачалоПериода, ФорматДатыJSON.ISO);
		ДокументОбъект.ДатаВыгрузкиКонецПериода  = ПрочитатьДатуJSON(ПараметрыЗапроса.ДатаВыгрузкиКонецПериода, ФорматДатыJSON.ISO);
		ДокументОбъект.СведенияОбОтклонениях.Загрузить(ДанныеВыгрузки);
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		РегистрыСведений.СинхронизацияДанныхИСМП.УстановитьДатуВыполненияСинхронизации(
			ЭлементОчереди.Организация,
			ЭлементОчереди.ВидПродукции,
			ЭлементОчереди.Операция,
			ДокументОбъект.ДатаВыгрузкиКонецПериода);
		
		ЭлементОчереди.Документ = ДокументОбъект.Ссылка;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Формирование сообщения JSON для передачи в сервис ИС МП
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОтчетИСМП - Ссылка на документ
//  ДополнительныеПараметры - Неопределено
//                          - Структура - дополнительные параметры.
// Возвращаемое значение:
//  Массив из см. ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON
Функция ЗагрузитьОтклоненияПоВидамПродукцииJSON(ДокументСсылка, ДополнительныеПараметры = Неопределено)
	
	СообщенияJSON         = Новый Массив;
	
	Операция           = Перечисления.ВидыОперацийИСМП.ОтчетИСМПСведенияОбОтклонениях;
	ВидыПродукцииУчета = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции();

	Если ВидыПродукцииУчета.Найти(Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС) <> Неопределено Тогда
		ВидМолочнойПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС;
	ИначеЕсли ВидыПродукцииУчета.Найти(Перечисления.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС) <> Неопределено Тогда
		ВидМолочнойПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС;
	КонецЕсли;
	
	Организации = ДополнительныеПараметры.ПараметрыОбработкиДокумента.Организация;
	Если ТипЗнч(ДополнительныеПараметры.ПараметрыОбработкиДокумента.Организация) <> Тип("Массив") Тогда
		Организации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организации);
	КонецЕсли;
	
	НомерВерсии = 1;
	Для Каждого Организация Из Организации Цикл
		
		ДатыСинхронизации = РегистрыСведений.СинхронизацияДанныхИСМП.ДатыСинхронизации(Организация, Операция);
		
		Для Каждого ВидПродукции Из ВидыПродукцииУчета Цикл
			
			Если ОбщегоНазначенияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(ВидПродукции)
				И ВидМолочнойПродукции <> ВидПродукции Тогда
				Продолжить;
			КонецЕсли;
			
			СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
			
			СообщениеJSON.Организация       = Организация;
			СообщениеJSON.Документ          = ДокументСсылка;
			СообщениеJSON.ВидПродукции      = ВидПродукции;
			СообщениеJSON.Операция          = Операция;
			СообщениеJSON.Версия            = НомерВерсии;
			
			СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
				Операция, ДокументСсылка, НомерВерсии);
			
			СообщениеJSON.ТипСообщения              = Перечисления.ТипыЗапросовИС.Исходящий;
			СообщениеJSON.ТребуетсяПодписание       = Ложь;
			СообщениеJSON.СтанцияУправленияЗаказами = Неопределено;
			СообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.ИСМП;
			
			ДатаСинхронизации = ДатыСинхронизации.Получить(ВидПродукции);
			Сутки = 86400;
			ПустаяДата = Дата(1,1,1);
			Если ДатаСинхронизации = Неопределено Или ДатаСинхронизации = ПустаяДата Тогда
				ДатаВыгрузкиКонецПериода  = ТекущаяУниверсальнаяДата();
				ДатаВыгрузкиНачалоПериода = ДатаВыгрузкиКонецПериода - 90 * Сутки;
				ДатаСинхронизации = ПустаяДата;
			Иначе
				ДатаВыгрузкиНачалоПериода = ДатаСинхронизации;
				ДатаВыгрузкиКонецПериода  = Мин(ДатаСинхронизации + 90 * Сутки, ТекущаяУниверсальнаяДата());
			КонецЕсли;
			
			ПараметрыЗапроса = Новый Структура;
			
			ПараметрыЗапроса.Вставить("ДатаВыгрузкиНачалоПериода", Формат(ДатаВыгрузкиНачалоПериода,"ДФ=yyyy-MM-dd"));
			ПараметрыЗапроса.Вставить("ДатаВыгрузкиКонецПериода",  Формат(ДатаВыгрузкиКонецПериода, "ДФ=yyyy-MM-dd"));
			ПараметрыЗапроса.Вставить("НаименованиеВыгрузки", "VIOLATIONS");
			
			ПараметрыЗапроса.Вставить("ДатаСинхронизации", ДатаСинхронизации);
			ПараметрыЗапроса.Вставить("ЭтоЗагрузкаОтклонений", Истина);
			
			ПараметрыЗапроса.Вставить("ПараметрыJSON", "");
			СообщениеJSON.ПараметрыЗапроса = ПараметрыЗапроса;
			
			СообщениеJSON.ТекстСообщенияJSON  = ОбщегоНазначенияИСМП.ОбъектВТекстJSON(ПараметрыЗапроса, Истина);
			
			СообщенияJSON.Добавить(СообщениеJSON);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СообщенияJSON;
	
КонецФункции

// Формирование сообщения JSON для передачи в сервис ИС МП
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОтчетИСМП - Ссылка на документ
//  ДополнительныеПараметры - Неопределено
//                          - Структура - дополнительные параметры.
// Возвращаемое значение:
//  Массив из см. ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON
Функция ЗапроситеОтчетJSON(ДокументСсылка, ДополнительныеПараметры = Неопределено)
	
	СообщенияJSON         = Новый Массив;
	СписокЗапросов        = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ИСМППрисоединенныеФайлы.Документ           КАК Ссылка,
	|	КОЛИЧЕСТВО(ИСМППрисоединенныеФайлы.Ссылка) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ИСМППрисоединенныеФайлы КАК ИСМППрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетИСМП КАК Шапка
	|		ПО Шапка.Ссылка   = &Ссылка
	|		 И Шапка.Операция = ИСМППрисоединенныеФайлы.Операция
	|		 И Шапка.Ссылка   = ИСМППрисоединенныеФайлы.Документ
	|ГДЕ
	|	ИСМППрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ИСМППрисоединенныеФайлы.Документ
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|
	|	Шапка.Организация                КАК Организация,
	|	Представление(Шапка.Организация) КАК ОрганизацияПредставление,
	|
	|	Шапка.Ответственный                КАК Ответственный,
	|	Представление(Шапка.Ответственный) КАК ОтветственныйПредставление,
	|
	|	Шапка.ВидПродукции КАК ВидПродукции,
	|	Шапка.Операция     КАК Операция,
	|	
	|	Шапка.ДатаВыгрузкиНачалоПериода КАК ДатаВыгрузкиНачалоПериода,
	|	Шапка.ДатаВыгрузкиКонецПериода  КАК ДатаВыгрузкиКонецПериода,
	|
	|	Шапка.ДатаЭмиссииНачалоПериода      КАК ДатаЭмиссииНачалоПериода,
	|	Шапка.ДатаЭмиссииКонецПериода       КАК ДатаЭмиссииКонецПериода,
	|	Шапка.ДатаПроизводстваНачалоПериода КАК ДатаПроизводстваНачалоПериода,
	|	Шапка.ДатаПроизводстваКонецПериода  КАК ДатаПроизводстваКонецПериода,
	|	Шапка.ДатаНанесенияНачалоПериода    КАК ДатаНанесенияНачалоПериода,
	|	Шапка.ДатаНанесенияКонецПериода     КАК ДатаНанесенияКонецПериода,
	|
	|	Шапка.КатегорииОтклонений           КАК КатегорииОтклонений,
	|	Шапка.ВидыОтклонений                КАК ВидыОтклонений,
	|	Шапка.РезультатыВыявленияОтклонений КАК РезультатыВыявленияОтклонений,
	|
	|	Шапка.СтатусКодаМаркировки КАК СтатусКодаМаркировки,
	|	Шапка.Ссылка               КАК Ссылка
	|
	|ИЗ
	|	Документ.ОтчетИСМП КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Товары.Номенклатура   КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Ссылка         КАК Ссылка
	|
	|ИЗ
	|	Документ.ОтчетИСМП.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка",
	"Товары");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ВидыУпаковок.ВидУпаковки КАК ВидУпаковки,
	|	ВидыУпаковок.Ссылка      КАК Ссылка
	|
	|ИЗ
	|	Документ.ОтчетИСМП.ВидыУпаковок КАК ВидыУпаковок
	|ГДЕ
	|	ВидыУпаковок.Ссылка = &Ссылка",
	"ВидыУпаковок");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",                ДокументСсылка);
	
	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка = РезультатЗапроса["Шапка"].Выбрать();
	
	Если Не Шапка.Следующий() Тогда
		
		СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
		СообщениеJSON.Организация = Шапка.Организация;
		СообщениеJSON.Документ    = ДокументСсылка;
		СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
			Шапка.Операция, ДокументСсылка);
		СообщениеJSON.ТекстОшибки = НСтр("ru = 'Нет данных для выгрузки.'");
		СообщениеJSON.ТребуетсяПодписание = Ложь;
		СообщенияJSON.Добавить(СообщениеJSON);
		
		Возврат СообщенияJSON;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
	
	СообщениеJSON.Организация       = Шапка.Организация;
	СообщениеJSON.Документ          = ДокументСсылка;
	СообщениеJSON.ВидПродукции      = Шапка.ВидПродукции;
	СообщениеJSON.Операция          = Шапка.Операция;
	СообщениеJSON.Версия            = НомерВерсии;
	
	СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
		Шапка.Операция, ДокументСсылка, НомерВерсии);
	
	СообщениеJSON.ТипСообщения              = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеJSON.ТребуетсяПодписание       = Ложь;
	СообщениеJSON.СтанцияУправленияЗаказами = Неопределено;
	СообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.ИСМП;
	
	ПараметрыЗапроса = Новый Структура;
	Если Шапка.Операция = Перечисления.ВидыОперацийИСМП.ОтчетИСМПСведенияОбОтклонениях Тогда
		
		РазностьДатВДнях = РазностьДатВДнях(НачалоДня(Шапка.ДатаВыгрузкиНачалоПериода),НачалоДня(Шапка.ДатаВыгрузкиКонецПериода));
		Если РазностьДатВДнях > 90 Тогда
			
			ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
				СтрШаблон(
					НСтр("ru = 'Указан некорректный период выгрузки: %1 дней.
					           |Максимальный интервал не более 91 дня.'"),
					Строка(РазностьДатВДнях)));
			СообщенияJSON.Добавить(СообщениеJSON);
			Возврат СообщенияJSON;
			
		КонецЕсли;
		
		ПараметрыJSON = Новый Структура;
		Если ЗначениеЗаполнено(Шапка.КатегорииОтклонений) Тогда
			
			Если ЗначениеЗаполнено(Шапка.КатегорииОтклонений) Тогда
				
				КатегорииОтклонений = Новый Массив;
				Для Каждого Категория Из СтрРазделить(Шапка.КатегорииОтклонений, ",") Цикл
					КатегорииОтклонений.Добавить(Число(Категория));
				КонецЦикла;
				ПараметрыJSON.Вставить("violationCategory", КатегорииОтклонений);
				
				Если ЗначениеЗаполнено(Шапка.ВидыОтклонений) Тогда
					
					ВидыОтклонений = Новый Массив;
					Для Каждого ВидОтклонения Из СтрРазделить(Шапка.ВидыОтклонений, ",") Цикл
						ВидыОтклонений.Добавить(Число(ВидОтклонения));
					КонецЦикла;
					ПараметрыJSON.Вставить("violationKind", ВидыОтклонений);
					
					Если ЗначениеЗаполнено(Шапка.РезультатыВыявленияОтклонений) Тогда
						РезультатыВыявленияОтклонений = Новый Массив;
						Для Каждого РезультатВыявленияОтклонений Из СтрРазделить(Шапка.РезультатыВыявленияОтклонений, ",") Цикл
							РезультатыВыявленияОтклонений.Добавить(Число(РезультатВыявленияОтклонений));
						КонецЦикла;
						ПараметрыJSON.Вставить("violationResult", РезультатыВыявленияОтклонений);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПараметрыЗапроса.Вставить("ДатаВыгрузкиНачалоПериода", Формат(Шапка.ДатаВыгрузкиНачалоПериода,"ДФ=yyyy-MM-dd"));
		ПараметрыЗапроса.Вставить("ДатаВыгрузкиКонецПериода",  Формат(Шапка.ДатаВыгрузкиКонецПериода, "ДФ=yyyy-MM-dd"));
		ПараметрыЗапроса.Вставить("НаименованиеВыгрузки", "VIOLATIONS");
		
	ИначеЕсли Шапка.Операция = Перечисления.ВидыОперацийИСМП.ОтчетИСМПСписокКИНаБалансе Тогда
		
		СоответствиеGTIN = Новый Соответствие;
		ПараметрыJSON    = Новый Структура;
		
		РеквизитыОрганизации = РаботаСКонтрагентамиИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(Шапка.Организация);
		ПараметрыJSON.Вставить("participantInn", РеквизитыОрганизации.ИНН);
		
		//@skip-warning
		Товары = РезультатЗапроса["Товары"].Выгрузить();
		Если Товары.Количество() Тогда
			
			Товары.Свернуть("Номенклатура,Характеристика");
			Товары.Индексы.Добавить("Номенклатура,Характеристика");
			
			МассивGTIN = Новый Массив;
			ШтрихкодированиеОбщегоНазначенияИС.ЗаполнитьПроверяемыеGTIN(Товары, МассивGTIN, СоответствиеGTIN, Ложь);
			
			Если МассивGTIN.Количество() Тогда
				ПараметрыJSON.Вставить("includeGtin", МассивGTIN);
			Иначе
				ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
				СообщениеJSON,
					СтрШаблон(
						НСтр("ru = 'Не удалось определить GTIN по списку товаров для выгрузки: ""%1"".'"),
						Шапка.Операция));
				СообщенияJSON.Добавить(СообщениеJSON);
				Возврат СообщенияJSON;
			КонецЕсли;
			
		КонецЕсли;
		
		ПараметрыJSON.Вставить("status", ИнтерфейсИСМПОбщегоНазначения.СтатусКодаМаркировкиИСМП(Шапка.СтатусКодаМаркировки));
		
		//@skip-warning
		ВидыУпаковок = РезультатЗапроса["ВидыУпаковок"].Выгрузить().ВыгрузитьКолонку("ВидУпаковки");
		ПараметрыОтбораВидУпаковки = Новый Массив;
		
		Если ВидыУпаковок.Количество() = 0 Тогда
			
			ПараметрыОтбораВидУпаковки.Добавить("UNIT");
			Если ОбщегоНазначенияИСКлиентСервер.ВидПродукцииИспользуетГрупповыеУпаковки(Шапка.ВидПродукции) Тогда
				ПараметрыОтбораВидУпаковки.Добавить("GROUP");
			КонецЕсли;
			Если ОбщегоНазначенияИСКлиентСервер.ВидПродукцииИспользуетНаборы(Шапка.ВидПродукции) Тогда
				ПараметрыОтбораВидУпаковки.Добавить("SET");
			КонецЕсли;
			ПараметрыОтбораВидУпаковки.Добавить("BOX");
			
		Иначе
			
			Для Каждого ВидУпаковки Из ВидыУпаковок Цикл
				Если ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
					ПараметрыОтбораВидУпаковки.Добавить("BOX");
				Иначе
					ПараметрыОтбораВидУпаковки.Добавить(ИнтерфейсИСМПОбщегоНазначения.ВидУпаковки(ВидУпаковки, Шапка.ВидПродукции));
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Шапка.ДатаЭмиссииНачалоПериода) Тогда
			ОтборПоДатеЭмиссии = Новый Структура;
			ОтборПоДатеЭмиссии.Вставить("start", ИнтеграцияИС.ДатаUTC(Шапка.ДатаЭмиссииНачалоПериода));
			Если ЗначениеЗаполнено(Шапка.ДатаЭмиссииКонецПериода) Тогда
				ОтборПоДатеЭмиссии.Вставить("end", ИнтеграцияИС.ДатаUTC(Шапка.ДатаЭмиссииКонецПериода));
			Иначе
				ОтборПоДатеЭмиссии.Вставить("end", ИнтеграцияИС.ДатаUTC(ТекущаяДатаСеанса()));
			КонецЕсли;
			ПараметрыJSON.Вставить("emissionPeriod", ОтборПоДатеЭмиссии);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Шапка.ДатаПроизводстваНачалоПериода) Тогда
			ОтборПоДатеПроизводства = Новый Структура;
			ОтборПоДатеПроизводства.Вставить("start", ИнтеграцияИС.ДатаUTC(Шапка.ДатаПроизводстваНачалоПериода));
			Если ЗначениеЗаполнено(Шапка.ДатаПроизводстваКонецПериода) Тогда
				ОтборПоДатеПроизводства.Вставить("end", ИнтеграцияИС.ДатаUTC(Шапка.ДатаПроизводстваКонецПериода));
			Иначе
				ОтборПоДатеПроизводства.Вставить("end", ИнтеграцияИС.ДатаUTC(ТекущаяДатаСеанса()));
			КонецЕсли;
			ПараметрыJSON.Вставить("productionPeriod", ОтборПоДатеПроизводства);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Шапка.ДатаНанесенияНачалоПериода) Тогда
			ОтборПоДатеНанесения = Новый Структура;
			ОтборПоДатеНанесения.Вставить("start", ИнтеграцияИС.ДатаUTC(Шапка.ДатаНанесенияНачалоПериода));
			Если ЗначениеЗаполнено(Шапка.ДатаНанесенияКонецПериода) Тогда
				ОтборПоДатеНанесения.Вставить("end", ИнтеграцияИС.ДатаUTC(Шапка.ДатаНанесенияКонецПериода));
			Иначе
				ОтборПоДатеНанесения.Вставить("end", ИнтеграцияИС.ДатаUTC(ТекущаяДатаСеанса()));
			КонецЕсли;
			ПараметрыJSON.Вставить("appliedPeriod", ОтборПоДатеНанесения);
		КонецЕсли;
		
		ПараметрыJSON.Вставить("packageType", ПараметрыОтбораВидУпаковки);
		ПараметрыЗапроса.Вставить("НаименованиеВыгрузки", "FILTERED_CIS_REPORT");
		
	Иначе
		
		ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
				СтрШаблон(
					НСтр("ru = 'Неизвестный вид операции для Отчета ИС МП: ""%1"".'"),
					Шапка.Операция));
		СообщенияJSON.Добавить(СообщениеJSON);
		Возврат СообщенияJSON;
		
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("ПараметрыJSON", ОбщегоНазначенияИСМП.ОбъектВТекстJSON(ПараметрыJSON, Истина));
	СообщениеJSON.ПараметрыЗапроса = ПараметрыЗапроса;
	
	СообщениеJSON.ТекстСообщенияJSON  = ОбщегоНазначенияИСМП.ОбъектВТекстJSON(ПараметрыЗапроса, Истина);
	Если Шапка.Операция = Перечисления.ВидыОперацийИСМП.ОтчетИСМПСписокКИНаБалансе Тогда
		// Для заполнения номенклатуры по результатам выгрузки
		ПараметрыЗапроса.Вставить("СоответствиеGTIN", СоответствиеGTIN);
	КонецЕсли;
	
	СообщенияJSON.Добавить(СообщениеJSON);
	
	Возврат СообщенияJSON;
	
КонецФункции

Функция МаксимальноеКоличествоКодовДляРасшифровкиОтчета()
	
	Возврат 25000;
	
КонецФункции

#Область ОбработкаКодовМаркировки

Функция ОбработатьДанныеШтрихкодаУпаковкиМаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды)
	
	РезультатОбработки = ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
	
	ПараметрыЗаполнения = ПараметрыЗаполнения();
	
	ЗаполнитьДанныеОбъектаФормыПоДеревуУпаковок(Форма, ВложенныеШтрихкоды.ДеревоУпаковок, ПараметрыЗаполнения);
	
	РезультатОбработки.ИзмененныеСтроки  = ПараметрыЗаполнения.ИзмененныеСтроки;
	РезультатОбработки.ДобавленныеСтроки = ПараметрыЗаполнения.ДобавленныеСтроки;
	
	Возврат РезультатОбработки;
	
КонецФункции

Процедура ЗаполнитьДанныеОбъектаФормыПоДеревуУпаковок(Форма, ДеревоУпаковок, ПараметрыЗаполнения, УпаковкаВерхнегоУровня = Неопределено)
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Если УпаковкаВерхнегоУровня = Неопределено
			И СтрокаДерева.ТипУпаковки <> Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			УпаковкаВерхнегоУровняСтрокиДерева = СтрокаДерева.ШтрихкодУпаковки;
		Иначе
			УпаковкаВерхнегоУровняСтрокиДерева = УпаковкаВерхнегоУровня;
		КонецЕсли;
		
		ЗаполнитьДанныеОбъектаФормыПоДеревуУпаковок(
			Форма, СтрокаДерева, ПараметрыЗаполнения, УпаковкаВерхнегоУровняСтрокиДерева);
		
		Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			
			ПараметрыЗаполнения.РодительскийШтрихкод = УпаковкаВерхнегоУровня;
			ОбработатьДанныеШтрихкодаПотребительскойУпаковки(Форма, СтрокаДерева, Неопределено, ПараметрыЗаполнения);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПараметрыЗаполнения()
	
	Возврат Новый Структура("ИзмененныеСтроки, ДобавленныеСтроки, РодительскийШтрихкод", Новый Массив, Новый Массив);
	
КонецФункции

Функция ОбработатьДанныеШтрихкодаПотребительскойУпаковки(Форма, ДанныеШтрихкода, ПараметрыСканирования, ПараметрыЗаполнения = Неопределено)
	
	ИсточникДанных = Форма.Объект;
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		
		ПараметрыЗаполнения  = ПараметрыЗаполнения();
		РезультатОбработки   = ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьРезультатОбработкиШтрихкода(Неопределено, ДанныеШтрихкода);
		РодительскийШтрихкод = Неопределено;
		
	Иначе
		
		РезультатОбработки   = ПараметрыЗаполнения;
		РодительскийШтрихкод = ПараметрыЗаполнения.РодительскийШтрихкод;
		
	КонецЕсли;
	
	ОбновляемаяСтрока = ПроверкаИПодборПродукцииИС.ДанныеШтрихкодаДляДобавленияВКеш(ДанныеШтрихкода, "ЗаказНаЭмиссию");
	Если Не ДанныеШтрихкода.ЭтоШтрихкодНоменклатуры Тогда
		ОбновляемаяСтрока.Количество = 1;
	ИначеЕсли ДанныеШтрихкода.Количество = 0 Тогда
		ОбновляемаяСтрока.Количество = 1;
	КонецЕсли;
	
	Если РодительскийШтрихкод <> Неопределено Тогда
		ОбновляемаяСтрока.ШтрихкодУпаковки = РодительскийШтрихкод;
	КонецЕсли;
	
	ПараметрыПоиска = ИнтеграцияИС.ПоляПоискаМаркируемойПродукции(Ложь);
	ЗаполнитьЗначенияСвойств(ПараметрыПоиска, ДанныеШтрихкода);
	
	НайденныеСтрокиТовары = ИсточникДанных.Товары.НайтиСтроки(ПараметрыПоиска);
	
	Если НайденныеСтрокиТовары.Количество() = 0 Тогда
		
		СтрокаТовары = ИсточникДанных.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовары, ОбновляемаяСтрока);
		
		РезультатОбработки.ДобавленныеСтроки.Добавить(СтрокаТовары);
		
	КонецЕсли;
	
	Возврат РезультатОбработки;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
