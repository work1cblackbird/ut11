#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ИнтеграцияИСМП.ЗапрещеноИспользованиеОбъектаВИСМП(Объект.Ссылка) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ИнтеграцияИС.НастроитьВидимостьДокументаОснования(ЭтотОбъект);
	Элементы.ДокументОснование.ДоступныеТипы = Метаданные.ОпределяемыеТипы.ОснованиеОтчетИСМП.Тип;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыИС.ПриСозданииНаСервере(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ДоступныеВидыПродукцииИС = ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииИСМП(Истина);
	СобытияФормИСМП.НастроитьВидПродукцииПриСозданииНаСервере(ЭтотОбъект, ДоступныеВидыПродукцииИС);
	
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект, "ТоварыХарактеристика");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(
		ЭтотОбъект,
		"КодыНаБалансеХарактеристика",
		"Элементы.КодыНаБалансе.ТекущиеДанные.Номенклатура");
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииЧтенииНаСервере();
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект,"ДокументОснование");
	
	ПоддерживаемыеТипыПодключаемогоОборудования = "СканерШтрихкода";
	ИнтеграцияИС.НастроитьПодключаемоеОборудование(ЭтотОбъект, ПоддерживаемыеТипыПодключаемогоОборудования);
	
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриСозданииЧтенииНаСервере();
	
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "НастройкиВыполненияПодключаемыхКомандИС") Тогда
		НастроитьЗависимыеЭлементыФормы(ЭтотОбъект,"ДокументОснование");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОповещениеПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(
		ОповещениеПриПодключении,
		ЭтотОбъект,
		ПоддерживаемыеТипыПодключаемогоОборудования);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ОповещениеПриОтключении = Новый ОписаниеОповещения("ОтключитьОборудованиеЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(ОповещениеПриОтключении, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияИзмененоСостояние(ИнтеграцияИСМПСлужебныйКлиент.ИмяПодсистемы())
		И Параметр.Ссылка = Объект.Ссылка Тогда
		
		Если Параметр.Свойство("ОбъектИзменен")
			И Параметр.ОбъектИзменен Тогда
			ОбновитьПредставленияНаФорме(Истина);
		Иначе
			ОбновитьПредставленияНаФорме(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияВыполненОбмен(ИнтеграцияИСМПСлужебныйКлиент.ИмяПодсистемы())
	 И (Параметр = Неопределено
		Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусВФормахДокументов)) Тогда
		
		ОбновитьПредставленияНаФорме(Истина);
		
	КонецЕсли;
	
	ОбщегоНазначенияСобытияФормИСКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если Не ВидПродукцииУказан()
		Или РедактированиеФормыНедоступно
		Или Не ПравоИзменения Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСоСканераСтруктура = СобытияФормИСКлиент.ВнешнееСобытиеПреобразоватьДанныеСоСканераВСтруктуру(ЭтотОбъект, Источник, Событие, Данные);
	Если ДанныеСоСканераСтруктура = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьКодМаркировки(ДанныеСоСканераСтруктура);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОбщегоНазначенияСобытияФормИСКлиентПереопределяемый.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.КодыНаБалансе);
	
	ЗаполнитьСопоставленныеТовары();
	
	ОбновитьПредставленияНаФорме();
	НастроитьЭлементыФормы(ЭтотОбъект);
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	
	ИнтеграцияИС.ПослеЗаписиНаСервереВФормеОбъектаДокументаИС(
		ЭтотОбъект,
		ТекущийОбъект,
		ИнтеграцияИСМПКлиентСервер.ИмяПодсистемы(),
		ПараметрыЗаписи);
	
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ИнтеграцияИСКлиент.ПослеЗаписиВФормеОбъектаДокументаИС(
		ЭтотОбъект,
		Объект,
		ИнтеграцияИСМПКлиентСервер.ИмяПодсистемы(),
		ПараметрыЗаписи);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Подключаемый_ОбновитьКоманды();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	СобытияФормИСМПКлиентПереопределяемый.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ИсточникВыбора);
	
	Если ИнтеграцияИСКлиент.ЭтоЗагрузкаКодовМаркировки(ИсточникВыбора, ЭтотОбъект) Тогда
		// Формат загрузки из внешнего файла полностью соответствует формату загрузки из ТСД
		Подключаемый_ПолученыДанныеИзТСД(ВыбранноеЗначение, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если НовыйОбъект = Элементы.ДокументОснование.ДоступныеТипы.ПривестиЗначение(НовыйОбъект) Тогда
		Объект.ДокументОснование = НовыйОбъект;
		Модифицированность = Истина;
		Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтатусПредставлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОчиститьСообщения();
	
	Если (Не ЗначениеЗаполнено(Объект.Ссылка)) Или (Не Объект.Проведен) Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("СтатусПредставлениеОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = '""Отчет ИС МП"" не проведен. Провести?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли Модифицированность Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("СтатусПредставлениеОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = '""Отчет ИС МП"" был изменен. Провести?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПродукцииПриИзменении(Элемент)
	
	Объект.ВидыУпаковок.Очистить();
	ЗаполнитьДоступныеВидыУпаковок();
	СобытияФормИСКлиентСерверПереопределяемый.УстановитьПараметрыВыбораНоменклатуры(ЭтотОбъект, Объект.ВидПродукции);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПродукцииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение <> Объект.ВидПродукции
		И Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ОтчетИСМПСписокКИНаБалансе")
		И Объект.Товары.Количество() > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		ТекстВопроса = НСтр("ru = 'При изменении вида продукции табличная часть Товары будет очищена. Продолжить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаПродукцииПриЗавершении", ЭтотОбъект, ВыбранноеЗначение);
		
		РежимДиалога = РежимДиалогаВопрос.ДаНет;
		
		Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			РежимДиалога = Новый СписокЗначений;
			РежимДиалога.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Очистить'"));
			РежимДиалога.Добавить(Истина, НСтр("ru = 'Перезаполнить'"));
			РежимДиалога.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Отмена'"));
		КонецЕсли;
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалога);
		
	ИначеЕсли ВыбранноеЗначение = Объект.ВидПродукции Тогда
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидУпаковкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	
	ВидыУпаковок = Новый Массив;
	Для Каждого СтрокаВидыУпаковок Из Объект.ВидыУпаковок Цикл
		ВидыУпаковок.Добавить(СтрокаВидыУпаковок.ВидУпаковки);
	КонецЦикла;
	ПараметрыОткрытия.Вставить("ВидыУпаковок", ВидыУпаковок);
	ПараметрыОткрытия.Вставить("ВидПродукции", Объект.ВидПродукции);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораВидовУпаковокИС",
		ПараметрыОткрытия, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ВидУпаковкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Объект.ВидыУпаковок.Очистить();
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Если ВыбранноеЗначение.ВидыУпаковок.Количество() = 0 Тогда
			ВидУпаковкиПредставление = "";
		ИначеЕсли ВыбранноеЗначение.ВидыУпаковок.Количество() = 1 Тогда
			Объект.ВидыУпаковок.Добавить().ВидУпаковки = ВыбранноеЗначение.ВидыУпаковок[0];
			ВидУпаковкиПредставление = ВыбранноеЗначение.Представление; //Строка(ВыбранноеЗначение.ВидыУпаковок[0]);
		Иначе
			Для Каждого ВидУпаковки Из ВыбранноеЗначение.ВидыУпаковок Цикл
				Объект.ВидыУпаковок.Добавить().ВидУпаковки = ВидУпаковки;
			КонецЦикла;
			ВидУпаковкиПредставление = ВыбранноеЗначение.Представление;
			ВыбранноеЗначение = Строка(ВыбранноеЗначение.ВидыУпаковок);
		КонецЕсли;
	Иначе
		Объект.ВидыУпаковок.Добавить().ВидУпаковки = ВыбранноеЗначение;
		ВидУпаковкиПредставление = Строка(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацияПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "Операция");
	ОтключитьОтметкуНезаполненного();
	
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикиОтклоненийПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КатегорииОтклонений", Объект.КатегорииОтклонений);
	ПараметрыФормы.Вставить("ВидыОтклонений", Объект.ВидыОтклонений);
	ПараметрыФормы.Вставить("РезультатыВыявленияОтклонений", Объект.РезультатыВыявленияОтклонений);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборХарактеристикиОтклоненийЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.ОтчетИСМП.Форма.ХарактеристикиОтклонений",
		ПараметрыФормы, Элемент,,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодВыгрузкиПриИзменении(Элемент)
	УстановитьИнтервал("ДатаВыгрузки");
КонецПроцедуры

&НаКлиенте
Процедура ПериодДатаЭмиссииПриИзменении(Элемент)
	УстановитьИнтервал("ДатаЭмиссии");
КонецПроцедуры

&НаКлиенте
Процедура ПериодДатаПроизводстваПриИзменении(Элемент)
	УстановитьИнтервал("ДатаПроизводства");
КонецПроцедуры

&НаКлиенте
Процедура ПериодДатаНанесенияПриИзменении(Элемент)
	УстановитьИнтервал("ДатаНанесения");
КонецПроцедуры

&НаКлиенте
Процедура КлючиАдресовКСопоставлениюОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "СопоставитьАдресаОбъектов" Тогда
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("КлючиАдресовКСопоставлению", НеСопоставленныеКлючиАдресов(Объект.СведенияОбОтклонениях));
		ОткрытьФорму(
			"Справочник.КлючиАдресовИСМП.Форма.СопоставлениеКлючейАдресов",
			ПараметрыОткрытияФормы, ЭтотОбъект,,,,
			Новый ОписаниеОповещения("КлючиАдресовКСопоставлениюОкончаниеРедактирования", ЭтотОбъект),
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтрокПриИзменении(Элемент)
	УстановитьОтборСтрок(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);

	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииНоменклатуры(
		ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СобытияФормИСКлиентПереопределяемый.ПриНачалеВыбораНоменклатуры(Элемент, Объект.ВидПродукции, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриНачалеВыбораХарактеристики(
		Элемент, ТекущиеДанные, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииХарактеристики(ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКодыНаБалансе

&НаКлиенте
Процедура КодыНаБалансеПриАктивизацииЯчейки(Элемент)
	
	ТекущиеДанные = Элементы.КодыНаБалансе.ТекущиеДанные;
	
	Если Элемент.ТекущийЭлемент = Элементы.КодыНаБалансеНоменклатура Тогда
		ЗаполнитьСпискиВыбораНоменклатуры(ТекущиеДанные);
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.КодыНаБалансеХарактеристика Тогда
		ЗаполнитьСпискиВыбораХарактеристика(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КодыНаБалансеНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Объект.КодыНаБалансе.НайтиПоИдентификатору(Элементы.КодыНаБалансе.ТекущаяСтрока);
	
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииНоменклатуры(
		ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура КодыНаБалансеНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СобытияФормИСКлиентПереопределяемый.ПриНачалеВыбораНоменклатуры(Элемент, Объект.ВидПродукции, СтандартнаяОбработка);
КонецПроцедуры	

&НаКлиенте
Процедура КодыНаБалансеХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.КодыНаБалансе.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриНачалеВыбораХарактеристики(
		Элемент, ТекущиеДанные, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КодыНаБалансеХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.КодыНаБалансе.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииХарактеристики(ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСведенияОбОтклонениях

&НаКлиенте
Процедура СведенияОбОтклоненияхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Объект.СведенияОбОтклонениях.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если Поле.Имя = "СведенияОбОтклоненияхАдресОбъекта" Тогда
		Если ЗначениеЗаполнено(ДанныеСтроки.АдресОбъекта) Тогда
			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("Ключ", ДанныеСтроки.АдресОбъекта);
			
			ОткрытьФорму("Справочник.КлючиАдресовИСМП.ФормаОбъекта", ПараметрыОткрытия, ЭтотОбъект,,,,
				Новый ОписаниеОповещения("КлючиАдресовКСопоставлениюОкончаниеРедактирования", ЭтотОбъект),
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
		
	ИначеЕсли РедактированиеФормыНедоступно Тогда
		СобытияФормИСМПКлиент.ВыборЭлементаТабличнойЧастиОткрытьФормуЭлемента(ЭтотОбъект, Элемент, Поле);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ОтчетИСМП.Форма.ФормаДокумента.Провести",,Истина);
	
	ОчиститьСообщения();
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ОтчетИСМП.Форма.ФормаДокумента.Записать",,Истина);
	
	ОчиститьСообщения();
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ОтчетИСМП.Форма.ФормаДокумента.ПровестиИЗакрыть",,Истина);
	
	ОчиститьСообщения();
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	
	Если Записать(ПараметрыЗаписи) Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура АрхивироватьДокумент(Команда)
	
	ИнтеграцияИСКлиент.АрхивироватьДокументы(ЭтотОбъект, Объект.Ссылка, ИнтеграцияИСМПКлиент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.МаркировкаТоваровИСМП.ФормаДокумента.Команда.ОткрытьПодбор");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаПодбораНоменклатуры", ЭтотОбъект);
	СобытияФормИСМПКлиентПереопределяемый.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзВнешнегоФайла(Команда)
	
	ОчиститьСообщения();
	
	ДоступнаИерархия = Ложь;
	
	ИнтеграцияИСКлиент.ОткрытьФормуЗагрузкиКодовМаркировки(
		ЭтотОбъект,
		ДоступнаИерархия,
		ИнтеграцияИСМПКлиент.ЗаголовокФормыЗагрузкиКодовМаркировки(
			ЭтотОбъект, Истина)); // ДоступнаИерархия Истина - для упрощения заголовка
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ОчиститьСообщения();
	
	СобытияФормИСМПКлиентПереопределяемый.ВыгрузитьДанныеВТСД(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ОчиститьСообщения();
	
	МенеджерОборудованияИСКлиент.НачатьЗагрузкуДанныеИзТСД(
		Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ОчиститьСообщения();
	
	Если Не ВидПродукцииУказан() Тогда
		Возврат;
	КонецЕсли;
	
	ШтрихкодированиеИСКлиент.ПоказатьВводШтрихкода(ОписаниеОповещенияОбработкиКодаМаркировки());
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайл(Команда)
	
	ДанныеФайла = ДанныеФайлаВыгрузкиПоДокументуДляСохранения();
	Если ДанныеФайла = Неопределено Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Не найден файл выгрузки'"));
	Иначе
		РаботаСФайламиКлиент.СохранитьФайлКак(ДанныеФайла);
	КонецЕсли;
	
КонецПроцедуры

#Область ПодключаемыеКоманды

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда) Экспорт
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

//@skip-warning
&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды() Экспорт
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда) Экспорт
	
	СобытияФормИСКлиентПереопределяемый.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура Подключаемый_ВыполнитьОбменОбработкаОжидания() Экспорт
	
	ИнтеграцияИСМПСлужебныйКлиент.ПродолжитьВыполнениеОбмена(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриЗавершенииОперации(Результат, ДополнительныеПараметры) Экспорт

	Прочитать();

КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусИСМП()
	
	МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	
	СтатусИСМП = МенеджерОбъекта.СтатусПоУмолчанию();
	
	ДальнейшееДействие = МенеджерОбъекта.ДальнейшееДействиеПоУмолчанию();
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Статусы.Статус КАК Статус,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие1 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие1
		|	КОНЕЦ КАК ДальнейшееДействие1,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие2 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие2
		|	КОНЕЦ КАК ДальнейшееДействие2,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие3 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие3
		|	КОНЕЦ КАК ДальнейшееДействие3
		|ИЗ
		|	РегистрСведений.СтатусыДокументовИСМП КАК Статусы
		|ГДЕ
		|	Статусы.Документ = &Документ");
		
		Запрос.УстановитьПараметр("Документ",                 Объект.Ссылка);
		Запрос.УстановитьПараметр("МассивДальнейшиеДействия", ИнтеграцияИСМП.НеотображаемыеВДокументахДальнейшиеДействия());
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			СтатусИСМП = Выборка.Статус;
			
			ДальнейшееДействие = Новый Массив;
			ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие1);
			ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие2);
			ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие3);
			
		КонецЕсли;
		
	КонецЕсли;

	ДопустимыеДействия = Новый Массив;
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеПередачуДанных);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПодтвердитеОбработкуОтклонений);

	СтатусПредставление = ИнтеграцияИСМП.ПредставлениеСтатуса(СтатусИСМП, ДальнейшееДействие, ДопустимыеДействия);
	
	РедактированиеФормыНеДоступно = СтатусИСМП <> Перечисления.СтатусыОбработкиОтчетаИСМП.Черновик
	                              И СтатусИСМП <> Перечисления.СтатусыОбработкиОтчетаИСМП.ОшибкаПередачи;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПредставлениеОбработкаНавигационнойСсылкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	Если ПроверитьЗаполнение() Тогда
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		РазблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;

	Если Не Модифицированность И Объект.Проведен Тогда
		ОбработатьНажатиеНавигационнойСсылки(ДополнительныеПараметры.НавигационнаяСсылкаФорматированнойСтроки);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ЗапроситьОтчет" Тогда
		
		ПараметрыОбработкиДокументов = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбработкиДокументов();
		ПараметрыОбработкиДокументов.Ссылка             = Объект.Ссылка;
		ПараметрыОбработкиДокументов.Организация        = Объект.Организация;
		ПараметрыОбработкиДокументов.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеОтчет");
		
		ОписаниеПриЗавершении = Новый ОписаниеОповещения(
			"Подключаемый_ПриЗавершенииОперации", ЭтотОбъект, ПараметрыОбработкиДокументов);
			
		ИнтеграцияИСМПКлиент.ПодготовитьКПередаче(
			ЭтотОбъект,
			ПараметрыОбработкиДокументов,
			ОписаниеПриЗавершении);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьОперацию" Тогда
		
		ИнтеграцияИСМПКлиент.ОтменитьПоследнююОперацию(Объект.Ссылка);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьПередачуДанных" Тогда
		
		ИнтеграцияИСМПКлиент.ОтменитьПередачу(Объект.Ссылка);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПоказатьПричинуОшибки" Тогда
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Документ", Объект.Ссылка);
		
		ОткрытьФорму(
			"Справочник.ИСМППрисоединенныеФайлы.Форма.ФормаОшибки",
			ПараметрыОткрытияФормы,
			ЭтотОбъект);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПодтвердитеОбработкуОтклонений" Тогда
		
		ОтработатьРасхождения();
		ОповеститьОбИзмененииСтатуса();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект);
	
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтотОбъект,
		"КодыНаБалансеХарактеристика",
		"Объект.КодыНаБалансе.ХарактеристикиИспользуются");
	
	СобытияФормИС.УстановитьУсловноеОформлениеПоляНоменклатура(
		ЭтотОбъект, "КодыНаБалансеНоменклатура", "КодыНаБалансе", Ложь);
	СобытияФормИС.УстановитьУсловноеОформлениеПоляХарактеристика(
		ЭтотОбъект, "КодыНаБалансеХарактеристика", "КодыНаБалансе", Ложь);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы["СведенияОбОтклоненияхАдресОбъекта"].Имя);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.СведенияОбОтклонениях.АдресОбъектаСопоставление"));
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы["СведенияОбОтклоненияхАдресОбъекта"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СведенияОбОтклонениях.АдресОбъектаТребуетСопставления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПроблемаГосИС);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	ПравоИзменения = ПравоДоступа("Изменение", Метаданные.Документы.ОтчетИСМП);
	
	СобытияФормИСКлиентСерверПереопределяемый.УстановитьПараметрыВыбораНоменклатуры(ЭтотОбъект, Объект.ВидПродукции);
	СобытияФормИСКлиентСерверПереопределяемый.УстановитьПараметрыВыбораНоменклатуры(
		ЭтотОбъект,
		Объект.ВидПродукции,
		"КодыНаБалансеНоменклатура");
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.КодыНаБалансе);
	
	ЗаполнитьСопоставленныеТовары();
	
	ХарактеристикиОтклоненийПредставление = СформироватьПредставлениеХарактеристикОтклонения();
	ИнициализироватьПериодыОтбора();
	ОтборСтрок = "Все";
	ЗаполнитьДоступныеВидыУпаковок();
	
	Если Объект.Операция = Перечисления.ВидыОперацийИСМП.ОтчетИСМПСведенияОбОтклонениях Тогда
		ЗаполнитьСопоставленныеКлючиАдресов();
		ОбновитьНадписьКлючиАдресовКСопоставлению(ЭтотОбъект);
	КонецЕсли;
	
	ОбновитьПредставленияНаФорме();

	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	НастроитьЭлементыФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЭлементыФормы(Форма)
	
	ЗависимыеОтСтатусаИСМП = Новый Массив;
	ЗависимыеОтСтатусаИСМП.Добавить("ГруппаНередактируемыеПослеОтправкиРеквизитыОсновное");
	ЗависимыеОтСтатусаИСМП.Добавить("СтраницаТовары");
	ЗависимыеОтСтатусаИСМП.Добавить("ТоварыПодменюЗаполнить");
	ЗависимыеОтСтатусаИСМП.Добавить("ТоварыГруппаТорговоеОборудование");
	
	ИнтеграцияИСКлиентСервер.УстановитьДоступностьЭлементовФормы(Форма,
		ЗависимыеОтСтатусаИСМП, Не Форма.РедактированиеФормыНеДоступно);
	
	Элементы = Форма.Элементы;
	
	Если Форма.Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ОтчетИСМПСписокКИНаБалансе") Тогда
		
		Исключения = Новый Массив;
		Исключения.Добавить(Элементы.КодыНаБалансеНоменклатура.Имя);
		Исключения.Добавить(Элементы.КодыНаБалансеХарактеристика.Имя);
		Исключения.Добавить(Элементы.ОтборСтрок.Имя);
		Исключения.Добавить(Элементы.СтраницаКодыНаБалансеПанель.Имя);
		
		ИнтеграцияИСКлиентСервер.УстановитьДоступностьЭлементовФормы(
			Форма, Исключения, Истина);
		
		ИнтеграцияИСКлиентСервер.УстановитьДоступностьЭлементовГруппыФормыРекурсивно(
			Элементы.СтраницаКодыНаБалансе, Не Форма.РедактированиеФормыНеДоступно, Исключения);
		
	Иначе // ОтчетИСМПСведенияОбОтклонениях
		
		Исключения = Новый Массив;
		Исключения.Добавить(Элементы.СтраницаСведенияОбОтклоненияхПанель.Имя);
		
		ИнтеграцияИСКлиентСервер.УстановитьДоступностьЭлементовФормы(
			Форма, Исключения, Истина);
		
		ИнтеграцияИСКлиентСервер.УстановитьДоступностьЭлементовГруппыФормыРекурсивно(
			Элементы.СтраницаСведенияОбОтклонениях, Не Форма.РедактированиеФормыНеДоступно, Исключения);
		
	КонецЕсли;
	
	Элементы.ФормаСохранитьФайл.Доступность = Форма.СтатусИСМП = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОтчетаИСМП.ПолученОтчет");
	
КонецПроцедуры

#Область КлючиАдресов

&НаСервере
Процедура ЗаполнитьСопоставленныеКлючиАдресов()
	
	КлючиАдресов = Новый Массив;
	Для Каждого ЭлементКоллекции Из Объект.СведенияОбОтклонениях Цикл
		Если ЗначениеЗаполнено(ЭлементКоллекции.АдресОбъекта) Тогда
			КлючиАдресов.Добавить(ЭлементКоллекции.АдресОбъекта);
		КонецЕсли;
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КлючиАдресов", КлючиАдресов);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	КлючиАдресов.Ссылка КАК Ключ,
	|	ПРЕДСТАВЛЕНИЕ(КлючиАдресов.Ссылка) КАК КлючПредставление,
	|	ПРЕДСТАВЛЕНИЕ(КлючиАдресовОператорыАдресаПервые.ТорговыйОбъект) КАК ТорговыйОбъектПредставление,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КлючиАдресовОператорыАдреса.ТорговыйОбъект) КАК ТорговыйОбъектКоличество
	|ИЗ
	|	Справочник.КлючиАдресовИСМП КАК КлючиАдресов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАдресовИСМП.ОператорыАдреса КАК КлючиАдресовОператорыАдреса
	|		ПО КлючиАдресов.Ссылка = КлючиАдресовОператорыАдреса.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАдресовИСМП.ОператорыАдреса КАК КлючиАдресовОператорыАдресаПервые
	|		ПО КлючиАдресов.Ссылка = КлючиАдресовОператорыАдресаПервые.Ссылка
	|		И КлючиАдресовОператорыАдресаПервые.НомерСтроки = 1
	|ГДЕ
	|	КлючиАдресов.Ссылка В (&КлючиАдресов)
	|СГРУППИРОВАТЬ ПО
	|	КлючиАдресов.Ссылка,
	|	КлючиАдресовОператорыАдресаПервые.ТорговыйОбъект
	|";
	
	ТаблицаСопоставленныеКлючи = Запрос.Выполнить().Выгрузить();
	ТаблицаСопоставленныеКлючи.Индексы.Добавить("Ключ");
	
	Для Каждого ЭлементКоллекции Из Объект.СведенияОбОтклонениях Цикл
		
		СтрокаСопоставление = ТаблицаСопоставленныеКлючи.Найти(ЭлементКоллекции.АдресОбъекта, "Ключ");
		
		Если СтрокаСопоставление = Неопределено Тогда
			ЭлементКоллекции.АдресОбъектаСопоставление = НСтр("ru = '<Не сопоставлено>'");
			ЭлементКоллекции.АдресОбъектаТребуетСопставления = Истина;
		ИначеЕсли СтрокаСопоставление.ТорговыйОбъектКоличество = 0 Тогда
			ЭлементКоллекции.АдресОбъектаСопоставление = СтрШаблон(
				НСтр("ru = '%1 <не сопоставлен>'"),
				СтрокаСопоставление.КлючПредставление);
			ЭлементКоллекции.АдресОбъектаТребуетСопставления = Истина;
		ИначеЕсли СтрокаСопоставление.ТорговыйОбъектКоличество = 1 Тогда
			ЭлементКоллекции.АдресОбъектаСопоставление = СтрШаблон(
				НСтр("ru = '%1 (%2)'"),
				СтрокаСопоставление.ТорговыйОбъектПредставление,
				СтрокаСопоставление.КлючПредставление);
			ЭлементКоллекции.АдресОбъектаТребуетСопставления = Ложь;
		Иначе
			ЭлементКоллекции.АдресОбъектаСопоставление = СтрШаблон(
				НСтр("ru = '%1 ( + еще %2 )'"),
				СтрокаСопоставление.ТорговыйОбъектПредставление,
				СтрокаСопоставление.ТорговыйОбъектКоличество - 1);
			ЭлементКоллекции.АдресОбъектаТребуетСопставления = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КлючиАдресовКСопоставлениюОкончаниеРедактирования(Результат, ДополнительныеПараметры) Экспорт
	
	КлючиАдресовКСопоставлениюПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура КлючиАдресовКСопоставлениюПриИзмененииНаСервере()
	
	ЗаполнитьСопоставленныеКлючиАдресов();
	ОбновитьНадписьКлючиАдресовКСопоставлению(ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьНадписьКлючиАдресовКСопоставлению(Форма)
	
	КлючиАдресов = НеСопоставленныеКлючиАдресов(Форма.Объект.СведенияОбОтклонениях);
	КоличествоКлючей = КлючиАдресов.Количество();
	
	Если КоличествоКлючей > 0 Тогда
		
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
		СтрШаблон(
			НСтр("ru = 'Сопоставить (%1) %2 объекта'"),
			КоличествоКлючей,
			ТекстПодсказкиПоЗначению(КоличествоКлючей, НСтр("ru = 'адрес'"))),,,,
			"СопоставитьАдресаОбъектов"));
		ФорматированнаяСтрока = Новый ФорматированнаяСтрока(МассивСтрок);
	Иначе
		ФорматированнаяСтрока = "";
	КонецЕсли;
	
	Форма.КлючиАдресовКСопоставлению = ФорматированнаяСтрока;
	Форма.Элементы.КлючиАдресовКСопоставлению.Видимость = КоличествоКлючей > 0;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НеСопоставленныеКлючиАдресов(СведенияОбОтклонениях)
	
	КлючиАдресов = Новый Массив;
	Для Каждого ЭлементКоллекции Из СведенияОбОтклонениях Цикл
		Если ЭлементКоллекции.АдресОбъектаТребуетСопставления
			И КлючиАдресов.Найти(ЭлементКоллекции.АдресОбъекта) = Неопределено Тогда
			КлючиАдресов.Добавить(ЭлементКоллекции.АдресОбъекта);
		КонецЕсли;
	КонецЦикла;
	
	Возврат КлючиАдресов;
	
КонецФункции

#КонецОбласти

#Область Оборудование

&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт

	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При подключении оборудования произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При отключении оборудования произошла ошибка: ""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	СобытияФормИСМПКлиентПереопределяемый.ПриПолученииДанныхИзТСД(
		Новый ОписаниеОповещения("Подключаемый_ПолученыДанныеИзТСД", ЭтотОбъект),
		ЭтотОбъект, РезультатВыполнения);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ОбновитьПредставленияНаФорме(Прочитать = Ложь)

	Если Прочитать Тогда
		Прочитать();
	Иначе
		ОбновитьСтатусИСМП();
		ОбновитьВидУпаковкиПредставление();
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов = "")
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	Если СтруктураРеквизитов.Свойство("ДокументОснование")
		Или СтруктураРеквизитов.Свойство("Операция") Тогда
		ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(Форма);
	КонецЕсли;
	
	Если Инициализация Или СтруктураРеквизитов.Свойство("Операция") Тогда
		
		ЭтоСведенияОбОтклонениях = Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ОтчетИСМПСведенияОбОтклонениях");
		
		Элементы.ГруппаСведенияОбОтклонениях.Видимость   = ЭтоСведенияОбОтклонениях;
		Элементы.СтраницаСведенияОбОтклонениях.Видимость = ЭтоСведенияОбОтклонениях;
		Элементы.СтраницаТовары.Видимость = Не ЭтоСведенияОбОтклонениях;
		
		Элементы.ГруппаСведенияКИНаБалансе.Видимость = Не ЭтоСведенияОбОтклонениях;
		
		Элементы.СтраницаКодыНаБалансе.Видимость = Не ЭтоСведенияОбОтклонениях;
		Элементы.ПериодВыгрузки.АвтоОтметкаНезаполненного = ЭтоСведенияОбОтклонениях;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборХарактеристикиОтклоненийЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт

	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(РезультатВыбора) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(Объект, РезультатВыбора);
		ХарактеристикиОтклоненийПредставление = РезультатВыбора.Представление;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция СформироватьПредставлениеХарактеристикОтклонения()
	
	Если Объект.Операция = Перечисления.ВидыОперацийИСМП.ОтчетИСМПСведенияОбОтклонениях
		И ЗначениеЗаполнено(Объект.КатегорииОтклонений) Тогда
		
		Макет = Документы.ОтчетИСМП.ПолучитьМакет("ДеревоВидовОтклонений");
		ОбластьКатегорииОтклонений = Макет.Области.Найти("СтрокиКатегорииОтклонений");
		
		КатегорииОтклонений = СтрРазделить(Объект.КатегорииОтклонений, ",");
		Представление = "";
		Если ОбластьКатегорииОтклонений.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			// Заполнение дерева данными списка.
			ВерхОбласти = ОбластьКатегорииОтклонений.Верх;
			НизОбласти = ОбластьКатегорииОтклонений.Низ;
			
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				
				Код = СокрП(Макет.Область(НомСтр, 1).Текст);
				Если КатегорииОтклонений.Найти(Код) <> Неопределено Тогда
					Представление = СокрП(Макет.Область(НомСтр, 2).Текст);
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если КатегорииОтклонений.Количество() > 1 Тогда
			Представление = СтрШаблон("%1 (+ еще %2)", Представление, КатегорииОтклонений.Количество() -1);
		КонецЕсли;
		
		Возврат Представление;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура УстановитьИнтервал(ИмяИнтервала) 
	
	Объект[ИмяИнтервала + "НачалоПериода"] = ЭтотОбъект["Период"+ИмяИнтервала].ДатаНачала;
	Объект[ИмяИнтервала + "КонецПериода"]  = ЭтотОбъект["Период"+ИмяИнтервала].ДатаОкончания;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПериодыОтбора()
	
	ПериодДатаВыгрузки.ДатаНачала = Объект.ДатаВыгрузкиНачалоПериода;
	ПериодДатаВыгрузки.ДатаОкончания = Объект.ДатаВыгрузкиКонецПериода;
	
	ПериодДатаНанесения.ДатаНачала = Объект.ДатаНанесенияНачалоПериода;
	ПериодДатаНанесения.ДатаОкончания = Объект.ДатаНанесенияКонецПериода;
	
	ПериодДатаПроизводства.ДатаНачала = Объект.ДатаПроизводстваНачалоПериода;
	ПериодДатаПроизводства.ДатаОкончания = Объект.ДатаПроизводстваКонецПериода;
	
	ПериодДатаЭмиссии.ДатаНачала = Объект.ДатаЭмиссииНачалоПериода;
	ПериодДатаЭмиссии.ДатаОкончания = Объект.ДатаЭмиссииКонецПериода;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоступныеВидыУпаковок()
	
	Элементы.ВидУпаковки.СписокВыбора.Очистить();
	
	Элементы.ВидУпаковки.СписокВыбора.Добавить(
		Перечисления.ВидыУпаковокИС.Потребительская);
	Если ОбщегоНазначенияИСКлиентСервер.ВидПродукцииИспользуетГрупповыеУпаковки(Объект.ВидПродукции) Тогда
		Элементы.ВидУпаковки.СписокВыбора.Добавить(
			Перечисления.ВидыУпаковокИС.Групповая);
	КонецЕсли;
	Если ОбщегоНазначенияИСКлиентСервер.ВидПродукцииИспользуетНаборы(Объект.ВидПродукции) Тогда
		Элементы.ВидУпаковки.СписокВыбора.Добавить(
			Перечисления.ВидыУпаковокИС.Набор);
	КонецЕсли;
	Элементы.ВидУпаковки.СписокВыбора.Добавить(
			Перечисления.ВидыУпаковокИС.Логистическая);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидУпаковкиПредставление()
	
	Представление = Новый Массив;
	Для Каждого СтрокаВидУпаковки Из Объект.ВидыУпаковок Цикл
		Представление.Добавить(Строка(СтрокаВидУпаковки.ВидУпаковки));
	КонецЦикла;
	
	ВидУпаковкиПредставление = СтрСоединить(Представление, ";");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаПодбораНоменклатуры(Результат, ДополнительныеПараметры) Экспорт
	
	ОбработкаРезультатаПодбораНоменклатуры(Результат, КэшированныеЗначения);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаПодбораНоменклатуры(ВыбранноеЗначение, КэшированныеЗначения)
	
	ПараметрыЗаполнения = ИнтеграцияИС.ПараметрыЗаполненияТабличнойЧастиТовары(Объект.ВидПродукции);
	
	СобытияФормИСМППереопределяемый.ОбработкаРезультатаПодбораНоменклатуры(
		ЭтотОбъект, ВыбранноеЗначение, ПараметрыЗаполнения, КэшированныеЗначения);
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстПодсказкиПоЗначению(Значение, СклоняемоеЗначение, Знач Падеж = "Винительный")
		
	Результат = ПолучитьСклоненияСтрокиПоЧислу(
		СклоняемоеЗначение,
		Значение,,
		"ЧС=Количественное;Л=ru_RU",
		СтрШаблон("ПД=%1", Падеж));
	
	Если Результат.Количество() Тогда
		Возврат СокрЛП(СтрЗаменить(Результат[0], Значение, ""));
	Иначе
		Возврат СклоняемоеЗначение;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборСтрок(Форма)

	Если Форма.ОтборСтрок = "Потребительские" Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("ВидУпаковки", ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская"));
		Форма.Элементы.КодыНаБалансе.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
	ИначеЕсли Форма.ОтборСтрок = "ВерхнегоУровня" Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("УпаковкаВерхнегоУровня", Истина);
		Форма.Элементы.КодыНаБалансе.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
	Иначе
		Форма.Элементы.КодыНаБалансе.ОтборСтрок = Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОтработатьРасхождения(ОтклонитьИзменения = Ложь)
	
	Если Объект.Операция = Перечисления.ВидыОперацийИСМП.ОтчетИСМПСведенияОбОтклонениях Тогда
		
		ПараметрыОбновленияСтатуса = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбновленияСтатуса();
		ПараметрыОбновленияСтатуса.Статус            = Неопределено;
		ПараметрыОбновленияСтатуса.СтатусОбработки   = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
		ПараметрыОбновленияСтатуса.ОперацияКвитанции = Объект.Операция;
		
		Документы.ОтчетИСМП.ОбновитьСтатусПослеПолученияДанных(
			Объект.Ссылка,
			Перечисления.ВидыОперацийИСМП.ОтчетИСМПОтклоненияОбработаны,
			ПараметрыОбновленияСтатуса);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОбИзмененииСтатуса()
	
	ПараметрОповещения = Новый Структура;
	ПараметрОповещения.Вставить("Ссылка",        Объект.Ссылка);
	ПараметрОповещения.Вставить("Основание",     Неопределено);
	ПараметрОповещения.Вставить("ОбъектИзменен", Ложь);
	
	Оповестить(
		ИнтеграцияИСКлиентСервер.ИмяСобытияИзмененоСостояние(ИнтеграцияИСМПСлужебныйКлиент.ИмяПодсистемы()),
		ПараметрОповещения);
	
КонецПроцедуры

&НаКлиенте
Функция ВидПродукцииУказан()
	
	Если Не ЗначениеЗаполнено(Объект.ВидПродукции) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не указан вид продукции'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСопоставленныеТовары()
	
	ШтрихкодыEAN = Новый Массив;
	Для Каждого СтрокаТЧ Из Объект.КодыНаБалансе Цикл
		
		Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура)
			И ЗначениеЗаполнено(СтрокаТЧ.СопоставлениеНоменклатура) Тогда
			СтрокаТЧ.СопоставлениеНоменклатура   = "";
			СтрокаТЧ.СопоставлениеХарактеристика = "";
		Иначе
			ШтрихкодыEAN.Добавить(СтрокаТЧ.GTIN);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ШтрихкодыEAN.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ИнформацияПоШтрихкодамEAN = ШтрихкодированиеОбщегоНазначенияИС.ДанныеПоШтрихкодамEAN(ШтрихкодыEAN);
	ПараметрыОтбора = Новый Структура("ШтрихкодEAN", Неопределено);
	
	Для Каждого СтрокаТЧ Из Объект.КодыНаБалансе Цикл
		
		Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
			Продолжить;
			СтрокаТЧ.СопоставлениеХарактеристика = "";
		Иначе
			ПараметрыОтбора.ШтрихкодEAN = СтрокаТЧ.GTIN;
			НайденныеСтроки = ИнформацияПоШтрихкодамEAN.НайтиСтроки(ПараметрыОтбора);
			КоличествоСопоставленныхСтрок = НайденныеСтроки.Количество();
			Если КоличествоСопоставленныхСтрок = 0 Тогда
				СтрокаТЧ.СопоставлениеНоменклатура   = НСтр("ru = '<Не сопоставлено>'");
				СтрокаТЧ.СопоставлениеХарактеристика = НСтр("ru = '<Не сопоставлено>'");
			ИначеЕсли КоличествоСопоставленныхСтрок = 1 Тогда
				СтрокаТЧ.СопоставлениеНоменклатура   = НайденныеСтроки[0].Номенклатура;
				СтрокаТЧ.СопоставлениеХарактеристика = НайденныеСтроки[0].Характеристика;
			Иначе
				СтрокаТЧ.СопоставлениеНоменклатура   = СтрШаблон(НСтр("ru = '<Несколько позиций (%1)>'"), КоличествоСопоставленныхСтрок);
				СтрокаТЧ.СопоставлениеХарактеристика = НСтр("ru = '<Не сопоставлено>'");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ИнформацияПоШтрихкодамEAN.Колонки.ШтрихкодEAN.Имя = "GTIN";
	НоменклатураДляВыбора.Загрузить(ИнформацияПоШтрихкодамEAN);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСпискиВыбораНоменклатуры(ТекущаяСтрока)
	
	СписокВыбораНоменклатура = Элементы.КодыНаБалансеНоменклатура.СписокВыбора;
	СписокВыбораНоменклатура.Очистить();
	
	НайденныеСтроки = НоменклатураДляВыбора.НайтиСтроки(Новый Структура("GTIN", ТекущаяСтрока.GTIN));
	НоменклатураКэш = Неопределено;
	Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
		Если СтрокаТЧ.Номенклатура <> НоменклатураКэш Тогда
			СписокВыбораНоменклатура.Добавить(СтрокаТЧ.Номенклатура);
			НоменклатураКэш = СтрокаТЧ.Номенклатура;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСпискиВыбораХарактеристика(ТекущаяСтрока)
	
	СписокВыбораХарактеристика = Элементы.КодыНаБалансеХарактеристика.СписокВыбора;
	СписокВыбораХарактеристика.Очистить();
	
	НайденныеСтроки = НоменклатураДляВыбора.НайтиСтроки(Новый Структура("GTIN, Номенклатура",
		ТекущаяСтрока.GTIN,
		ТекущаяСтрока.Номенклатура));
	Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
		СписокВыбораХарактеристика.Добавить(СтрокаТЧ.Характеристика);
	КонецЦикла;
	
КонецПроцедуры

#Область РаботаСТСД

&НаКлиенте
Процедура ЗагрузитьИзТСДПослеАвторизации(РезультатАвторизации, Штрихкоды) Экспорт
	
	Подключаемый_ПолученыДанныеИзТСД(Штрихкоды, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолученыДанныеИзТСД(Штрихкоды, АвторизацияЗапрашивалась = Неопределено) Экспорт
	
	Если Штрихкоды.Количество() = 0 Тогда
		
		ПоказатьПредупреждение( ,НСтр("ru = 'В полученных данных не содержится информации о считанных штриховых кодах'"));
		Возврат;
		
	КонецЕсли;
	
	ГрупповаяОбработкаШтрихкодовИСКлиент.ОповеститьОНачалеОбработкиДанныхТСД();
	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования(ЭтотОбъект);
	ШтрихкодированиеИСКлиент.ПреобразоватьШтрихкодыТСДВBase64(Штрихкоды);
	ЗагрузкаДанныхТСД = ОбработатьПолученныеДанныеТСДНаСервере(Штрихкоды, ПараметрыСканирования, КэшированныеЗначения);
	
	Если ЗагрузкаДанныхТСД.ТребуетсяАвторизация Тогда
		
		Если АвторизацияЗапрашивалась = Истина Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Загрузка данных недоступна: авторизация в сервисе не пройдена'"));
			ЗагрузкаДанныхТСД = Неопределено;
			Возврат;
		КонецЕсли;
		
		ИнтерфейсАвторизацииИСМПКлиент.ЗапроситьКлючСессии(
			ИнтерфейсАвторизацииИСМПКлиент.ПараметрыЗапросаКлючаСессии(Объект.Организация, Объект.ВидПродукции),
			Новый ОписаниеОповещения("ЗагрузитьИзТСДПослеАвторизации", ЭтотОбъект, Штрихкоды));
		Возврат;
		
	КонецЕсли;
	
	Если ЗагрузкаДанныхТСД.ОбщаяОшибка Тогда
		
		ПараметрыОткрытияФормы = ШтрихкодированиеИСКлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного();
		
		Если ТипЗнч(ЗагрузкаДанныхТСД.ТекстОбщейОшибки) = Тип("ФорматированнаяСтрока") Тогда
			ПараметрыОткрытияФормы.ТекстОшибкиФорматированнаяСтрока = ЗагрузкаДанныхТСД.ТекстОбщейОшибки;
		Иначе
			ПараметрыОткрытияФормы.ТекстОшибки = ЗагрузкаДанныхТСД.ТекстОбщейОшибки;
		КонецЕсли;
		
		ШтрихкодированиеИСКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(ЭтотОбъект, ПараметрыОткрытияФормы);
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗагрузкаДанныхТСД.ШтрихкодыДляСопоставления.Количество() > 0 Тогда
		
		ДополнительныеПараметры = Новый Структура("ВсеШтрихкоды, ШтрихкодыДляСопоставления",
			ЗагрузкаДанныхТСД.ШтрихкодыТСД, ЗагрузкаДанныхТСД.ШтрихкодыДляСопоставления);
		ОписаниеОповещения = Новый ОписаниеОповещения("СопоставлениеШтрихкодовЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ШтрихкодированиеИСКлиентПереопределяемый.ОткрытьФормуПодбораНоменклатурыПоШтрихкодам(
			ЗагрузкаДанныхТСД.ШтрихкодыДляСопоставления, ЭтотОбъект, ОписаниеОповещения);
			
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗагрузкаДанныхТСД.АдресУточнениеКоэффициентовУпаковок) Тогда
		ПараметрыОткрытия = ИнтеграцияИСМПКлиент.ПараметрыОткрытияФормыУточненияУпаковокПоGTIN();
		ПараметрыОткрытия.АдресУточнениеКоэффициентовУпаковок = ЗагрузкаДанныхТСД.АдресУточнениеКоэффициентовУпаковок;
		ИнтеграцияИСМПКлиент.ОткрытьФормуНастройкиВидовУпаковокПоGTIN(ПараметрыОткрытия, ЭтотОбъект, ОписаниеОповещения);
		Возврат;
	КонецЕсли;
	
	Если ЗагрузкаДанныхТСД.ЕстьОшибкиВДереве Тогда
		
		ПараметрыОткрытияФормы = ШтрихкодированиеИСКлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного(Объект.ВидПродукции);
		ПараметрыОткрытияФормы.АдресДереваУпаковок = ЗагрузкаДанныхТСД.АдресДереваУпаковок; 
		ШтрихкодированиеИСКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(ЭтотОбъект, ПараметрыОткрытияФормы);
		
	КонецЕсли;
	
	ОбработатьПолученныеДанныеТСД();
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставлениеШтрихкодовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ШтрихкодированиеИСВызовСервера.ОчиститьОтложенныеКодыМаркировки(КэшМаркируемойПродукции);
		Возврат;
	КонецЕсли;
	
	Если Результат.НайденыНезарегистрированныеТовары Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("СопоставлениеШтрихкодовЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ШтрихкодированиеИСКлиентПереопределяемый.ОткрытьФормуПодбораНоменклатурыПоШтрихкодам(
			Результат.ОтложенныеТовары, ЭтотОбъект, ОписаниеОповещения);
		Возврат;
	КонецЕсли;
	
	Подключаемый_ПолученыДанныеИзТСД(ДополнительныеПараметры.ВсеШтрихкоды);
	
КонецПроцедуры

&НаСервере
Функция ОбработатьПолученныеДанныеТСДНаСервере(ШтрихкодыТСД, ПараметрыСканирования, КэшированныеЗначения)
	
	Результат = ГрупповаяОбработкаШтрихкодовИС.ОбработатьПолученныеДанныеТСДВДокументе(
		ЭтотОбъект, ШтрихкодыТСД, ПараметрыСканирования, Ложь);
	
	Если ГрупповаяОбработкаШтрихкодовИС.ЗагрузкаШтрихкодовПрервана(ЗагрузкаДанныхТСД) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Модифицированность = Истина;
	ПослеОбработкиШтрихкодовСервер(Результат, КэшированныеЗначения);
	
	Результат.ДобавленныеСтроки = Новый Массив;
	Результат.ИзмененныеСтроки  = Новый Массив;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьПолученныеДанныеТСД() Экспорт
	
	Если ЗагрузкаДанныхТСД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗагрузкаДанныхТСД.Обработано = ЗагрузкаДанныхТСД.Всего Тогда
		ГрупповаяОбработкаШтрихкодовИСКлиент.ОповеститьОбОкончанииОбработкиДанныхТСД();
		ЗагрузкаДанныхТСД = Неопределено;
	Иначе
		ЭлементДанныхТСД = ЗагрузкаДанныхТСД.ШтрихкодыТСД[ЗагрузкаДанныхТСД.Обработано];
		ЗагрузкаДанныхТСД.Обработано = ЗагрузкаДанныхТСД.Обработано + 1;
		
		Если ЗначениеЗаполнено(ЭлементДанныхТСД.Штрихкод) Тогда
			
			ОбработатьКодМаркировки(ЭлементДанныхТСД.РезультатОбработки.ДанныеШтрихкода);
			
		Иначе
			
			ОбработатьОчереднойШтрихкод();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
 
&НаКлиенте
Процедура ОбработатьОчереднойШтрихкодОбработчикОповещения(Результат, ДополнительныеПараметры) Экспорт
	ОбработатьОчереднойШтрихкод();
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОчереднойШтрихкод() Экспорт
	ПодключитьОбработчикОжидания("ОбработатьПолученныеДанныеТСД", 0.1, Истина);
КонецПроцедуры

#КонецОбласти

#Область Штрихкодирование

&НаКлиенте
Функция ОписаниеОповещенияОбработкиКодаМаркировки()
	
	Возврат Новый ОписаниеОповещения("ОбработатьКодМаркировки", ЭтотОбъект);
	
КонецФункции

&НаКлиенте
Функция ПараметрыЗавершенияВводаШтрихкода(ИсходныеДанные, РезультатОбработки, ПараметрыСканирования)
	
	ПараметрыЗавершенияВводаШтрихкода = ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыЗавершенияОбработкиШтрихкода(,,"ОбработатьОчереднойШтрихкодОбработчикОповещения");
	ПараметрыЗавершенияВводаШтрихкода.РезультатОбработкиШтрихкода  = РезультатОбработки;
	ПараметрыЗавершенияВводаШтрихкода.Форма                        = ЭтотОбъект;
	ПараметрыЗавершенияВводаШтрихкода.ПараметрыСканирования        = ПараметрыСканирования;
	ПараметрыЗавершенияВводаШтрихкода.ДанныеШтрихкода              = ИсходныеДанные;
	
	Возврат ПараметрыЗавершенияВводаШтрихкода;
	
КонецФункции

&НаСервере
Функция ОбработатьВводШтрихкода(ШтрихкодКоличество, КэшированныеЗначения, ПараметрыСканирования = Неопределено)
	
	РезультатОбработкиШтрихкода = ШтрихкодированиеОбщегоНазначенияИС.ОбработатьВводШтрихкода(
		ЭтотОбъект, ШтрихкодКоличество, КэшированныеЗначения, ПараметрыСканирования);
	
	ПослеОбработкиШтрихкодовСервер(РезультатОбработкиШтрихкода, КэшированныеЗначения);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Новый Массив;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Новый Массив;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаКодаМаркировкиВыполнитьДействие(ДанныеДляВыполненияДействия, ДополнительныеПараметры) Экспорт
	
	РезультатВыбора             = ДанныеДляВыполненияДействия.РезультатВыбора;
	РезультатОбработкиШтрихкода = ДанныеДляВыполненияДействия.РезультатОбработкиШтрихкода;
	КэшированныеЗначения        = ДанныеДляВыполненияДействия.КэшированныеЗначения;
	ПараметрыСканирования       = ДанныеДляВыполненияДействия.ПараметрыСканирования;
	
	Действие = ДанныеДляВыполненияДействия.Действие;
	РезультатОбработкиШтрихкода = ОбработкаКодаМаркировкиВыполнитьДействиеСервер(Действие, РезультатВыбора, РезультатОбработкиШтрихкода, ПараметрыСканирования, КэшированныеЗначения);
	
	ПараметрыЗавершенияВводаШтрихкода = ПараметрыЗавершенияВводаШтрихкода(
		ДанныеДляВыполненияДействия.ИсходныеДанные, РезультатОбработкиШтрихкода, ДанныеДляВыполненияДействия.ПараметрыСканирования);
	ШтрихкодированиеОбщегоНазначенияИСКлиент.ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
	
КонецПроцедуры

&НаСервере
Функция ОбработкаКодаМаркировкиВыполнитьДействиеСервер(Действие, РезультатВыбора, РезультатОбработкиШтрихкода, ПараметрыСканирования, КэшированныеЗначения)
	
	ПараметрыОбработкиВыбора    = ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьПараметрыОбработкиВыбора(РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения);
	РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ВыполнитьДействие(ЭтотОбъект, Действие, ПараметрыОбработкиВыбора);
	
	ПослеОбработкиШтрихкодовСервер(РезультатОбработкиШтрихкода, КэшированныеЗначения);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Новый Массив;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Новый Массив;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

&НаСервере
Процедура ПослеОбработкиШтрихкодовСервер(РезультатОбработкиШтрихкода, КэшированныеЗначения)
	
	ДобавленныеСтроки = РезультатОбработкиШтрихкода.ДобавленныеСтроки;
	
	Если ДобавленныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ДобавленнаяСтрока Из ДобавленныеСтроки Цикл
		
		СобытияФормИСМППереопределяемый.ПриИзмененииНоменклатуры(
			ЭтотОбъект, ДобавленнаяСтрока, Неопределено);
		
	КонецЦикла;
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОткрытьФормуУточненияДанных()
	
	ШтрихкодированиеИСКлиент.Подключаемый_ОткрытьФормуУточненияДанных(ЭтотОбъект, ОписаниеОповещенияОбработкиКодаМаркировки());
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьКодМаркировки(ИсходныеДанные, ДополнительныеПараметры = Неопределено) Экспорт

	Если ИсходныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования(ЭтотОбъект);
	ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ИсходныеДанные);
	
	РезультатОбработки = ОбработатьВводШтрихкода(ИсходныеДанные, КэшированныеЗначения, ПараметрыСканирования);
	
	ПараметрыЗавершенияВводаШтрихкода = ПараметрыЗавершенияВводаШтрихкода(ИсходныеДанные, РезультатОбработки, ПараметрыСканирования);
	ШтрихкодированиеОбщегоНазначенияИСКлиент.ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
	
КонецПроцедуры

&НаСервере
Функция ДанныеФайлаВыгрузкиПоДокументуДляСохранения()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ИСМППрисоединенныеФайлы.Документ                           КАК Документ,
	|	ИСМППрисоединенныеФайлы.Ссылка                             КАК Ссылка
	|ИЗ
	|	Справочник.ИСМППрисоединенныеФайлы КАК ИСМППрисоединенныеФайлы
	|ГДЕ
	|	ИСМППрисоединенныеФайлы.Документ В (&ДокументСсылка)
	|	И ИСМППрисоединенныеФайлы.Операция = &Операция
	|");
	
	Запрос.УстановитьПараметр("ДокументСсылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Операция", Перечисления.ВидыОперацийИСМП.ОтчетИСМППолучениеРезультатаВыгрузки);
	
	ДанныеПротокола = Запрос.Выполнить().Выгрузить();
	Для Каждого ЭлементКоллекции Из ДанныеПротокола Цикл
		Возврат РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляСохранения(ЭлементКоллекции.Ссылка, , УникальныйИдентификатор);
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ВыборФайлаЗавершение(ПутиКФайлам, ДополнительныеПараметры) Экспорт
	
	Если ПутиКФайлам = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаПродукцииПриЗавершении(РезультатВопроса, НовыйВидПродукции) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Или РезультатВопроса = Истина Тогда
		
		Объект.Товары.Очистить();
		Объект.ВидыУпаковок.Очистить();
		
		Объект.ВидПродукции = НовыйВидПродукции;
		Объект.ДокументОснование = Неопределено;
		
		ЗаполнитьДоступныеВидыУпаковок();
		СобытияФормИСКлиентСерверПереопределяемый.УстановитьПараметрыВыбораНоменклатуры(ЭтотОбъект, Объект.ВидПродукции);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти