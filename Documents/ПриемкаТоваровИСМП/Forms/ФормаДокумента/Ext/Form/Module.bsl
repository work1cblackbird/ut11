#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ИнтеграцияИСМП.ЗапрещеноИспользованиеОбъектаВИСМП(Объект.Ссылка) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ИнтеграцияИС.НастроитьВидимостьДокументаОснования(ЭтотОбъект);
	Элементы.ДокументОснование.ДоступныеТипы = Метаданные.ОпределяемыеТипы.ОснованиеПриемкаТоваровИСМП.Тип;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыИС.ПриСозданииНаСервере(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ДоступныеВидыПродукцииИС = ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииИСМП();
	
	СобытияФормИСМП.НастроитьВидПродукцииПриСозданииНаСервере(ЭтотОбъект, ДоступныеВидыПродукцииИС);
	
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект,   "ТоварыХарактеристика");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект,   "ТоварыУпаковка");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект,   "ТоварыСерия");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСХарактеристикой(ЭтотОбъект, "ТоварыСерия");
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииЧтенииНаСервере();
		ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	КонецЕсли;
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	
	// Режим отладки
	Элементы.СтраницаШтрихкодыУпаковок.Видимость = ОбщегоНазначения.РежимОтладки() И Пользователи.ЭтоПолноправныйПользователь();
	
	ПоддерживаемыеТипыПодключаемогоОборудования = "СканерШтрихкода";
	ИнтеграцияИС.НастроитьПодключаемоеОборудование(ЭтотОбъект, ПоддерживаемыеТипыПодключаемогоОборудования);
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриСозданииЧтенииНаСервере();
	
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыИС.ПриЧтенииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОповещениеПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(
		ОповещениеПриПодключении,
		ЭтотОбъект,
		ПоддерживаемыеТипыПодключаемогоОборудования);
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ОповещениеПриОтключении = Новый ОписаниеОповещения("ОтключитьОборудованиеЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(ОповещениеПриОтключении, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияИзмененоСостояние(ИнтеграцияИСМПСлужебныйКлиент.ИмяПодсистемы())
		И Параметр.Ссылка = Объект.Ссылка Тогда
		
		Если Параметр.Свойство("ОбъектИзменен")
			И Параметр.ОбъектИзменен Тогда
			ОбновитьПредставленияНаФорме(Истина);
		Иначе
			ОбновитьПредставленияНаФорме(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияВыполненОбмен(ИнтеграцияИСМПСлужебныйКлиент.ИмяПодсистемы())
	 И (Параметр = Неопределено
		Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусВФормахДокументов)) Тогда
		
		ОбновитьПредставленияНаФорме(Истина);
		
	КонецЕсли;
	
	Если ИмяСобытия = "Закрытие_ПерейтиКСтрокеОшибки" И Источник = "Справочник.ИСМППрисоединенныеФайлы.Форма.ФормаОшибки" Тогда
		ТекущийЭлемент = Элементы.ШтрихкодыУпаковок;
		Элементы.ШтрихкодыУпаковок.ТекущаяСтрока = Параметр;
	КонецЕсли;
	
	ОбщегоНазначенияСобытияФормИСКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ШтрихкодированиеОбщегоНазначенияИС.СохранитьНастройкиВыбораМаркируемойПродукции(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	
	ЗаполнитьПредставлениеСертификации();
	ОбновитьПредставленияНаФорме();
	НастроитьЭлементыФормы(ЭтотОбъект);
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	
	ИнтеграцияИС.ПослеЗаписиНаСервереВФормеОбъектаДокументаИС(
		ЭтотОбъект,
		ТекущийОбъект,
		ИнтеграцияИСМПКлиентСервер.ИмяПодсистемы(),
		ПараметрыЗаписи);
	
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	СобытияФормИСКлиентПереопределяемый.ОбработкаВыбораКонтрагента(
		Новый ОписаниеОповещения("ПриВыбореКонтрагента", ЭтотОбъект), ВыбранноеЗначение, ИсточникВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ИнтеграцияИСКлиент.ПослеЗаписиВФормеОбъектаДокументаИС(
		ЭтотОбъект,
		Объект,
		ИнтеграцияИСМПКлиентСервер.ИмяПодсистемы(),
		ПараметрыЗаписи);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОбщегоНазначенияСобытияФормИСКлиентПереопределяемый.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если НовыйОбъект = Элементы.ДокументОснование.ДоступныеТипы.ПривестиЗначение(НовыйОбъект) Тогда
		Объект.ДокументОснование = НовыйОбъект;
		Модифицированность = Истина;
		Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтатусПредставлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОчиститьСообщения();
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ВыполнитьПроверку" Тогда
		
		ДекорацияОтсканироватьПроверитьМаркируемуюПродукциюОбработкаНавигационнойСсылки(
			Элементы.ДекорацияОтсканироватьПроверитьМаркируемуюПродукцию,
			"ОткрытьФормуПроверкиИПодбораПродукцииИСМП",
			Ложь);
		
	ИначеЕсли (Не ЗначениеЗаполнено(Объект.Ссылка)) Или (Не НавигационнаяСсылкаФорматированнойСтроки = "ОтказатьсяОтНакладной" И Не Объект.Проведен) Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("СтатусПредставлениеОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		Если НавигационнаяСсылкаФорматированнойСтроки = "ОтказатьсяОтНакладной" Тогда
			ТекстВопроса = НСтр("ru = '""Приемка товаров ИС МП"" не записан. Записать?'");
		Иначе
			ТекстВопроса = НСтр("ru = '""Приемка товаров ИС МП"" не проведен. Провести?'");
		КонецЕсли;
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли Модифицированность Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("СтатусПредставлениеОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		
		Если НавигационнаяСсылкаФорматированнойСтроки = "ОтказатьсяОтНакладной" Тогда
			ТекстВопроса = НСтр("ru = '""Приемка товаров ИС МП"" был изменен. Записать?'");
		Иначе
			ТекстВопроса = НСтр("ru = '""Приемка товаров ИС МП"" был изменен. Провести?'");
		КонецЕсли;
		
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтсканироватьПроверитьМаркируемуюПродукциюОбработкаНавигационнойСсылки(
	Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПроверкаИПодборПродукцииИСМПКлиент.ОткрытьФормуПроверкиИПодбора(ЭтотОбъект, Объект.ВидПродукции, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ДокументОснование");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыСертификация Тогда
		ИнтеграцияИСМПКлиент.ОбновитьСписокВыбораСертификации(ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если РедактированиеФормыНедоступно Тогда
		СобытияФормИСМПКлиент.ВыборЭлементаТабличнойЧастиОткрытьФормуЭлемента(ЭтотОбъект, Элемент, Поле);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СобытияФормИСКлиентПереопределяемый.ПриНачалеВыбораНоменклатуры(Элемент, Объект.ВидПродукции, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииНоменклатуры(
		ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения, ПараметрыУказанияСерий);
	
	Если ТекущиеДанные.ПроизвольнаяЕдиницаУчета Тогда
		
		Если ТекущиеДанные.ТребуетВзвешивания Тогда
			ТекущиеДанные.Количество         = 0;
			ТекущиеДанные.КоличествоУпаковок = 0;
		Иначе
			Если Не ЗначениеЗаполнено(ТекущиеДанные.КоличествоПотребительскихУпаковок) Тогда
				ТекущиеДанные.КоличествоПотребительскихУпаковок = ТекущиеДанные.КоличествоУпаковок;
			КонецЕсли;
			УчетноеКоличество = УчетноеКоличествоПоКоличествуПотребительскихУпаковок(
				ТекущиеДанные.Номенклатура,
				ТекущиеДанные.КоличествоПотребительскихУпаковок);
			
			Если ЗначениеЗаполнено(УчетноеКоличество) Тогда
				ТекущиеДанные.Количество         = УчетноеКоличество;
				ТекущиеДанные.КоличествоУпаковок = УчетноеКоличество;
				СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииКоличества(
					ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения, ПараметрыУказанияСерий);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.КоличествоПотребительскихУпаковок) Тогда
		Если ТекущиеДанные.Количество <> ТекущиеДанные.КоличествоПотребительскихУпаковок Тогда
			ТекущиеДанные.Количество         = ТекущиеДанные.КоличествоПотребительскихУпаковок;
			ТекущиеДанные.КоличествоУпаковок = ТекущиеДанные.КоличествоПотребительскихУпаковок;
			СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииКоличества(
				ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения, ПараметрыУказанияСерий);
		КонецЕсли;
	Иначе 
		ТекущиеДанные.КоличествоПотребительскихУпаковок = ТекущиеДанные.КоличествоУпаковок;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриНачалеВыбораХарактеристики(
		Элемент, ТекущиеДанные, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииХарактеристики(ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения);
	
КонецПроцедуры


&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииКоличества(
		ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииКоличества(
		ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИнтеграцияИСКлиент.ОткрытьПодборСерий(ЭтотОбъект,, Элемент.ТекстРедактирования, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияПриИзменении(Элемент)
	
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииСерии(
		ЭтотОбъект, Элементы.Товары.ТекущиеДанные, КэшированныеЗначения, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКодТНВЭДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ПараметрыФормы = Новый Структура;
		
		ПараметрыФормы.Вставить("ТекущаяСтрока",                           ТекущиеДанные.КодТНВЭД);
		ПараметрыФормы.Вставить("ВидПродукции",                            Объект.ВидПродукции);
		ПараметрыФормы.Вставить("Организация",                             Объект.Организация);
		ПараметрыФормы.Вставить("РежимВыбора",                             Истина);
		ПараметрыФормы.Вставить("ВозвращатьСсылкуНаЭлементКлассификатора", Ложь);
		
		ОткрытьФорму(
			"РегистрСведений.КодыТНВЭДИСМП.Форма.ФормаСписка", ПараметрыФормы, Элемент,,,,,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииЦены(ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииСуммы(ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииСтавкиНДС(ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииСуммыНДС(ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСертификацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ИдентификаторыСтрок = Новый Массив;
	ИдентификаторыСтрок.Добавить(Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор());
	ОткрытьФормуРедактированияСертификации(ИдентификаторыСтрок);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСертификацияПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ПустаяСтрока(ТекущиеДанные.Сертификация) Тогда
		ТекущиеДанные.ВидДокументаСертификации   = ПредопределенноеЗначение("Перечисление.ВидыДокументовОбязательнойСертификацииИС.ПустаяСсылка");
		ТекущиеДанные.НомерДокументаСертификации = "";
		ТекущиеДанные.ДатаДокументаСертификации  = '00010101';
		Возврат;
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура("Представление", ТекущиеДанные.Сертификация);
	НайденныеСтроки = КэшСертификации.НайтиСтроки(ПараметрыПоиска);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		ТекущиеДанные.ВидДокументаСертификации   = НайденныеСтроки[0].ВидСертификации;
		ТекущиеДанные.НомерДокументаСертификации = НайденныеСтроки[0].НомерСертификации;
		ТекущиеДанные.ДатаДокументаСертификации  = НайденныеСтроки[0].ДатаСертификации;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыИдентификаторПроисхожденияВЕТИССтрокойНаФормеПриИзменении(Элемент)
	
	Если Элементы.Товары.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	ТекущиеДанные.ИдентификаторПроисхожденияВЕТИССтрокойНаФорме = ИнтеграцияИСКлиентСервер.ПреобразоватьИдентификаторВСД(
		ТекущиеДанные.ИдентификаторПроисхожденияВЕТИССтрокойНаФорме);
	ТекущиеДанные.ИдентификаторПроисхожденияВЕТИССтрокой = ТекущиеДанные.ИдентификаторПроисхожденияВЕТИССтрокойНаФорме;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторПроисхожденияВЕТИССтрокой)
		И Не СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ТекущиеДанные.ИдентификаторПроисхожденияВЕТИССтрокой) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Указан некорректный идентификатор ВСД'"),
			Объект.Ссылка,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				"Объект.Товары", Объект.Товары.Индекс(ТекущиеДанные) + 1, "ИдентификаторПроисхожденияВЕТИССтрокойНаФорме"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ПриемкаТоваровИСМП.Форма.ФормаДокумента.Провести",,Истина);
	
	ОчиститьСообщения();
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ПриемкаТоваровИСМП.Форма.ФормаДокумента.Записать",,Истина);
	
	ОчиститьСообщения();
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ПриемкаТоваровИСМП.Форма.ФормаДокумента.ПровестиИЗакрыть",,Истина);
	
	ОчиститьСообщения();
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	
	Если Записать(ПараметрыЗаписи) Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура АрхивироватьДокумент(Команда)
	
	ИнтеграцияИСКлиент.АрхивироватьДокументы(ЭтотОбъект, Объект.Ссылка, ИнтеграцияИСМПКлиент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозобновитьПодборМаркируемойПродукции(Команда)
	
	ПроверкаИПодборПродукцииИСМПКлиент.ВозобновитьПроверку(ЭтотОбъект, Объект.ВидПродукции, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДокументыСертификации(Команда)
	
	ОткрытьФормуРедактированияСертификации(Элементы.Товары.ВыделенныеСтроки);

КонецПроцедуры

#Область ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда) Экспорт
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды() Экспорт
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда) Экспорт
	
	СобытияФормИСКлиентПереопределяемый.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьПоИННКПП(Команда)
	
	ОчиститьСообщения();
	
	КонтрагентНайден = КонтрагентПоИНН(Объект.ИННОтправителя, Объект.Операция);
	
	Если КонтрагентНайден = Неопределено Тогда
		Если ИнтеграцияИСМПСлужебныйКлиентСервер.ЭтоПриемкаИзСтранЕАЭС(Объект.Операция) Тогда
			ТекстВопроса = НСтр("ru='Контрагент с указанным налоговым номером не найден.'");
		Иначе
			ТекстВопроса = НСтр("ru='Контрагент с указанным ИНН не найден.'");
		КонецЕсли;
		
		Если ЕстьПравоСозданияКонтрагента() Тогда
			ПоказатьВопрос(
				Новый ОписаниеОповещения("СоздатьНовогоКонтрагента", ЭтотОбъект),
				СтрШаблон(
					НСтр("ru='%1 Создать нового?'"),
					ТекстВопроса),
				РежимДиалогаВопрос.ДаНет);
		Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				ТекстВопроса,,
				"ИННОтправителя",
				"Объект");
		КонецЕсли;
	Иначе
		Объект.Контрагент = КонтрагентНайден;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьОбменОбработкаОжидания()
	
	ИнтеграцияИСМПСлужебныйКлиент.ПродолжитьВыполнениеОбмена(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриЗавершенииОперации(Результат, ДополнительныеПараметры) Экспорт

	Прочитать();

КонецПроцедуры


&НаСервере
Процедура ОбновитьСтатусИСМП()
	
	МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	
	СтатусИСМП = МенеджерОбъекта.СтатусПоУмолчанию();
	
	СтатусПроверкиИПодбора = ПроверкаИПодборПродукцииИС.СтатусПроверкиИПодбораДокумента(
		Объект.Ссылка, Объект.ВидПродукции);
	
	Если СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.Завершено Тогда
		ДальнейшееДействие = МенеджерОбъекта.ДальнейшееДействиеПоУмолчанию();
	КонецЕсли;
	
	Если СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.Выполняется Тогда
		
		ДальнейшееДействие = Новый Массив;
		
	ИначеЕсли ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Статусы.Статус КАК Статус,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие1 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие1
		|	КОНЕЦ КАК ДальнейшееДействие1,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие2 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие2
		|	КОНЕЦ КАК ДальнейшееДействие2,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие3 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие3
		|	КОНЕЦ КАК ДальнейшееДействие3
		|ИЗ
		|	РегистрСведений.СтатусыДокументовИСМП КАК Статусы
		|ГДЕ
		|	Статусы.Документ = &Документ");
		
		Запрос.УстановитьПараметр("Документ",                 Объект.Ссылка);
		Запрос.УстановитьПараметр("МассивДальнейшиеДействия", ИнтеграцияИСМП.НеотображаемыеВДокументахДальнейшиеДействия());
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			СтатусИСМП = Выборка.Статус;
			
			Если СтатусПроверкиИПодбора <> Перечисления.СтатусыПроверкиИПодбораИС.Выполняется Тогда
				
				ДальнейшееДействие = Новый Массив;
				ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие1);
				ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие2);
				ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие3);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДопустимыеДействия = Новый Массив;
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеПроверку);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПодтвердитеПоступление);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОткажитесьОтНакладной);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеПередачуДанных);

	СтатусПредставление = ИнтеграцияИСМП.ПредставлениеСтатуса(СтатусИСМП, ДальнейшееДействие, ДопустимыеДействия);
	
	РедактированиеФормыНеДоступно = СтатусИСМП <> Перечисления.СтатусыОбработкиПриемкиТоваровИСМП.ПринятИзИСМП
	                              И СтатусИСМП <> Перечисления.СтатусыОбработкиПриемкиТоваровИСМП.ПодтверждениеПриемкиОшибка
	                              И СтатусИСМП <> Перечисления.СтатусыОбработкиПриемкиТоваровИСМП.ПодтверждениеПриемкиКПередаче;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПредставлениеОбработкаНавигационнойСсылкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.НавигационнаяСсылкаФорматированнойСтроки = "ОтказатьсяОтНакладной" Тогда
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
		РазблокироватьДанныеФормыДляРедактирования();
	ИначеЕсли ПроверитьЗаполнение() Тогда
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		РазблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	Если Не Модифицированность И Объект.Проведен Тогда
		ОбработатьНажатиеНавигационнойСсылки(ДополнительныеПараметры.НавигационнаяСсылкаФорматированнойСтроки);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ВыполнитьПроверку" Тогда
		
		ДекорацияОтсканироватьПроверитьМаркируемуюПродукциюОбработкаНавигационнойСсылки(
			Элементы.ДекорацияОтсканироватьПроверитьМаркируемуюПродукцию,
			"ОткрытьФормуПроверкиИПодбораПродукцииИСМП",
			Ложь);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПодтвердитеПоступление" Тогда
		
		ПараметрыОбработкиДокументов = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбработкиДокументов();
		ПараметрыОбработкиДокументов.Ссылка             = Объект.Ссылка;
		ПараметрыОбработкиДокументов.Организация        = Объект.Организация;
		ПараметрыОбработкиДокументов.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.ПодтвердитеПоступление");
		
		ОписаниеПриЗавершении = Новый ОписаниеОповещения(
			"Подключаемый_ПриЗавершенииОперации", ЭтотОбъект, ПараметрыОбработкиДокументов);
		
		ИнтеграцияИСМПКлиент.ПодготовитьКПередаче(
			ЭтотОбъект,
			ПараметрыОбработкиДокументов,
			ОписаниеПриЗавершении);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтказатьсяОтНакладной" Тогда
		
		ПараметрыОбработкиДокументов = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбработкиДокументов();
		ПараметрыОбработкиДокументов.Ссылка             = Объект.Ссылка;
		ПараметрыОбработкиДокументов.Организация        = Объект.Организация;
		ПараметрыОбработкиДокументов.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.ОткажитесьОтНакладной");
		
		ОписаниеПриЗавершении = Новый ОписаниеОповещения(
			"Подключаемый_ПриЗавершенииОперации", ЭтотОбъект, ПараметрыОбработкиДокументов);
		
		ИнтеграцияИСМПКлиент.ПодготовитьКПередаче(
			ЭтотОбъект,
			ПараметрыОбработкиДокументов,
			ОписаниеПриЗавершении);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьОперацию" Тогда
		
		ИнтеграцияИСМПКлиент.ОтменитьПоследнююОперацию(Объект.Ссылка);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьПередачуДанных" Тогда
		
		ИнтеграцияИСМПКлиент.ОтменитьПередачу(Объект.Ссылка);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПоказатьПричинуОшибки" Тогда
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Документ", Объект.Ссылка);
		
		ОткрытьФорму(
			"Справочник.ИСМППрисоединенныеФайлы.Форма.ФормаОшибки",
			ПараметрыОткрытияФормы,
			ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтотОбъект);
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект);
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтотОбъект);
	
	ПолеПредставлениеНоменклатуры   = Новый ПолеКомпоновкиДанных("Объект.Товары.ПредставлениеНоменклатуры");
	ПолеПредставлениеХарактеристики = Новый ПолеКомпоновкиДанных("Объект.Товары.ПредставлениеХарактеристики");
	
	// Коды отдельно от количества
	ИнтеграцияИСМП.УстановитьУсловноеОформлениеПолейКоличества(ЭтотОбъект);
	
	// Представление номенклатуры <Не сопоставлена>
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатура.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатура.ПутьКДанным);
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = ПолеПредставлениеНоменклатуры;
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Не сопоставлена>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// Представление номенклатуры
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента      = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатура.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатура.ПутьКДанным);
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = ПолеПредставлениеНоменклатуры;
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", ПолеПредставлениеНоменклатуры);
	
	// GTIN
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента      = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыGTIN.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатура.ПутьКДанным);
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = ПолеПредставлениеНоменклатуры;
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	
	// Представление характеристики
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента      = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыХарактеристика.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.ТоварыХарактеристика.ПутьКДанным);
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = ПолеПредставлениеХарактеристики;
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Товары.ХарактеристикиИспользуются");
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", ПолеПредставлениеХарактеристики);
	
	// Идентификатор ВСД
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Товары.ИдентификаторПроисхожденияВЕТИССтрокой");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыИдентификаторПроисхожденияВЕТИССтрокойНаФорме.Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	ЦветГиперссылки = ЦветаСтиля.ЦветГиперссылкиГосИС;
	ЦветТекстаПоля  = ЦветаСтиля.ЦветТекстаПоля;
	
	ШтрихкодированиеОбщегоНазначенияИС.ВосстановитьНастройкиВыбораМаркируемойПродукции(ЭтотОбъект, Объект.Ссылка);
	ШтрихкодированиеИСКлиентСервер.ОтобразитьСохраненныйВыборПоМаркируемойПродукции(ЭтотОбъект);
	
	ПравоИзменения = ПравоДоступа("Изменение", Метаданные.Документы.ПриемкаТоваровИСМП);
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	
	ПараметрыУказанияСерий = ИнтеграцияИС.ПараметрыУказанияСерийФормыОбъекта(Объект, Документы.ПриемкаТоваровИСМП);
	
	СобытияФормИСКлиентСерверПереопределяемый.УстановитьПараметрыВыбораНоменклатуры(ЭтотОбъект, Объект.ВидПродукции);
	
	ОбновитьПредставленияНаФорме();
	
	ИспользуетсяПодсистемаВетИС = ИнтеграцияИСМПВЕТИС.ИспользуетсяПодсистемаВетИС();
	
	ЗаполнитьПредставлениеСертификации();
	НастроитьЭлементыФормы(ЭтотОбъект);
	СоздатьКэшСертификацииСервер();
	
	ИнтеграцияИСМП.НастроитьВидимостьКолонкиКоличестваКодовМаркировки(ЭтотОбъект);
	
	Если Не ПодключенаОбработкаКодовМаркировки Тогда
		ПроверкаИПодборПродукцииИС.ПодключитьОбработкуКодовМаркировки(ЭтотОбъект,,"КоличествоПотребительскихУпаковок");
		ПодключенаОбработкаКодовМаркировки = Истина;
	КонецЕсли;
	
	ПроверкаИПодборПродукцииИС.ЗаполнитьКешШтрихкодовУпаковок(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЭлементыФормы(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	Операция = Объект.Операция;
	
	ЭтоПриемкаИзЕАЭС = ИнтеграцияИСМПСлужебныйКлиентСервер.ЭтоПриемкаИзСтранЕАЭС(Операция);
	
	ЭтоМех = Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха");
	
	Элементы.ТоварыКодТНВЭД.Видимость                 = ЭтоПриемкаИзЕАЭС;
	Элементы.ТоварыКодТНВЭД.АвтоОтметкаНезаполненного = ЭтоПриемкаИзЕАЭС;
	Элементы.ТоварыСертификация.Видимость             = ЭтоПриемкаИзЕАЭС;
	
	Элементы.ТоварыЦена.Видимость      = ЭтоПриемкаИзЕАЭС Или ЭтоМех;
	Элементы.ТоварыСуммаНДС.Видимость  = ЭтоПриемкаИзЕАЭС Или ЭтоМех;
	Элементы.ТоварыСумма.Видимость     = ЭтоПриемкаИзЕАЭС Или ЭтоМех;
	Элементы.ТоварыСтавкаНДС.Видимость = ЭтоПриемкаИзЕАЭС Или ЭтоМех;
	Элементы.ТоварыСуммаСНДС.Видимость = ЭтоПриемкаИзЕАЭС Или ЭтоМех;
	
	Элементы.ТоварыЦена.АвтоОтметкаНезаполненного = Не ЭтоМех;
	
	ФорматДаты = "ДФ=dd.MM.yyyy;";
	
	Если ИнтеграцияИСМПСлужебныйКлиентСервер.ДоступнаДатаПроизводстваПриПриемкеОтгрузке(Операция, Объект.ВидПродукции) Тогда
		Элементы.ТоварыДатаПроизводства.Видимость = Истина;
		Элементы.ТоварыДатаПроизводства.Формат = ФорматДаты;
		Элементы.ТоварыДатаПроизводства.ФорматРедактирования = ФорматДаты;
		Элементы.ТоварыДатаПроизводства.АвтоОтметкаНезаполненного =
			ИнтеграцияИСМПСлужебныйКлиентСервер.ТребуетсяУказаниеДатыПроизводстваПриПриемкеОтгрузке(Операция, Объект.ВидПродукции);
	Иначе
		Элементы.ТоварыДатаПроизводства.Видимость = Ложь;
	КонецЕсли;
	
	Если ИнтеграцияИСМПСлужебныйКлиентСервер.ДоступенСрокГодностиПриПриемкеОтгрузке(Операция, Объект.ВидПродукции) Тогда
		Элементы.ТоварыСрокГодности.Видимость = Истина;
		Элементы.ТоварыСрокГодности.Формат = ФорматДаты;
		Элементы.ТоварыСрокГодности.ФорматРедактирования = ФорматДаты;
		Элементы.ТоварыСрокГодности.АвтоОтметкаНезаполненного =
			ИнтеграцияИСМПСлужебныйКлиентСервер.ТребуетсяУказаниеСрокаГодностиПриПриемкеОтгрузке(Операция, Объект.ВидПродукции);
		Элементы.ШтрихкодыУпаковокСрокГодности.Видимость = Истина;
		Элементы.ШтрихкодыУпаковокСрокГодности.Формат = ФорматДаты;
		Элементы.ШтрихкодыУпаковокСрокГодности.ФорматРедактирования = ФорматДаты;
	Иначе
		Элементы.ТоварыСрокГодности.Видимость = Ложь;
		Элементы.ШтрихкодыУпаковокСрокГодности.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ТоварыСуммаАкциза.Видимость =
		ИнтеграцияИСМПСлужебныйКлиентСервер.ДоступнаПодакцизнаяПродукцияПриПриемкеОтгрузке(Операция, Объект.ВидПродукции);
	
	ЭтоМолокоПриОСУ = (ЭтоПриемкаИзЕАЭС
		И Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС"));
	
	Элементы.ЗаполнитьДокументыСертификации.Видимость               = ЭтоПриемкаИзЕАЭС;
	Элементы.ТоварыИдентификаторПроисхожденияВЕТИС.Видимость        = (ЭтоМолокоПриОСУ И Форма.ИспользуетсяПодсистемаВЕТИС);
	Элементы.ТоварыИдентификаторПроисхожденияВЕТИССтрокойНаФорме.Видимость = (ЭтоМолокоПриОСУ И Не Форма.ИспользуетсяПодсистемаВЕТИС);
	
	ЗависимыеОтСтатусаИСМП = Новый Массив;
	ЗависимыеОтСтатусаИСМП.Добавить("ГруппаНередактируемыеПослеОтправкиРеквизитыОсновное");
	ЗависимыеОтСтатусаИСМП.Добавить("ГруппаНередактируемыеПослеОтправкиКомандыТовары");
	ЗависимыеОтСтатусаИСМП.Добавить("СтраницаТовары");
	ЗависимыеОтСтатусаИСМП.Добавить("СтраницаШтрихкодыУпаковок");
	
	ИнтеграцияИСКлиентСервер.УстановитьДоступностьЭлементовФормы(Форма,
		ЗависимыеОтСтатусаИСМП, Не Форма.РедактированиеФормыНеДоступно);
	
	ЗависимыеОтСтатусаПроверкиИПодбора = Новый Массив;
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыНоменклатура");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыХарактеристика");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыСерия");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыКоличествоУпаковок");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыУпаковкаЕдиницаИзмерения");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыИзменить");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыКонтекстноеМенюИзменить");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыКоличествоПотребительскихУпаковок");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыСертификация");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыИдентификаторПроисхожденияВЕТИС");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыИдентификаторПроисхожденияВЕТИССтрокойНаФорме");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ЗаполнитьДокументыСертификации");
	
	ИнтеграцияИСКлиентСервер.УстановитьДоступностьЭлементовФормы(Форма,
		ЗависимыеОтСтатусаПроверкиИПодбора,
		Не (Форма.РедактированиеФормыНеДоступно Или РедактированиеНедоступноПоСтатусуПроверкиИподбора(Форма)));
	
	Если Форма.РедактированиеФормыНеДоступно
		Или Не Форма.ПравоИзменения Тогда
		Форма.Элементы.ВозобновитьПодборМаркируемойПродукции.Доступность = Ложь;
		Форма.Элементы.СопоставитьПоИННКПП.Доступность                   = Ложь;
	ИначеЕсли Форма.СтатусПроверкиИПодбора = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиИПодбораИС.Завершено") Тогда
		Форма.Элементы.ВозобновитьПодборМаркируемойПродукции.Доступность = Истина;
	Иначе
		Форма.Элементы.ВозобновитьПодборМаркируемойПродукции.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РедактированиеНедоступноПоСтатусуПроверкиИподбора(Форма)
	
	Если Форма.СтатусПроверкиИПодбора = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиИПодбораИС.Выполняется")
		Или Форма.СтатусПроверкиИПодбора = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиИПодбораИС.Завершено") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьИдентификаторыВСДНаФорме()
	
	Если Не ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияПодконтрольнаяВЕТИС(Объект.ВидПродукции) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		СтрокаТовары.ИдентификаторПроисхожденияВЕТИССтрокойНаФорме = СтрокаТовары.ИдентификаторПроисхожденияВЕТИССтрокой;
	КонецЦикла;
	
КонецПроцедуры

#Область Оборудование

&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт

	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При подключении оборудования произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При отключении оборудования произошла ошибка: ""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ФормаПроверкиИПодбора

&НаСервере
Процедура ОбновитьИнформациюОткрытияФормыПроверкиПодбора()
	
	Элементы.ГруппаСканированиеИПроверкаМаркируемойПродукции.Видимость = Истина;
	ТекстНадписи = "";
	
	СтатусПроверкиИПодбора = ПроверкаИПодборПродукцииИС.СтатусПроверкиИПодбораДокумента(
		Объект.Ссылка, Объект.ВидПродукции);
	
	Если СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.Выполняется Тогда
		
		Если ПравоИзменения Тогда
			
			ТекстНадписи = НСтр("ru = 'Продолжить проверку маркированной продукции'");
			Элементы.ГруппаИнформацияОСканированииВДругойФорме.Видимость = Истина;
			
		Иначе
			
			ТекстНадписи = НСтр("ru = 'Промежуточные результаты проверки маркированной продукции'");
			Элементы.ГруппаИнформацияОСканированииВДругойФорме.Видимость = Ложь;
			
		КонецЕсли;
		
	ИначеЕсли СтатусИСМП = Перечисления.СтатусыОбработкиПриемкиТоваровИСМП.ПринятИзИСМП
		Или СтатусИСМП = Перечисления.СтатусыОбработкиПриемкиТоваровИСМП.ПодтверждениеПриемкиОшибка Тогда
		
		Если СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.Завершено Тогда
			
			ТекстНадписи = НСтр("ru = 'Результаты проверки маркированной продукции'");
			Элементы.ГруппаИнформацияОСканированииВДругойФорме.Видимость = Ложь;
			
		ИначеЕсли ПравоИзменения Тогда
			
			ТекстНадписи = НСтр("ru = 'Проверить маркированную продукцию'");
			Элементы.ГруппаИнформацияОСканированииВДругойФорме.Видимость = Ложь;
			
		Иначе
			
			Элементы.ГруппаСканированиеИПроверкаМаркируемойПродукции.Видимость = Ложь;
			
		КонецЕсли;
		
	ИначеЕсли СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.ПустаяСсылка() Тогда
		
		Элементы.ГруппаСканированиеИПроверкаМаркируемойПродукции.Видимость = Ложь;
		
	Иначе
		
		ТекстНадписи = НСтр("ru = 'Результаты проверки маркированной продукции'");
		Элементы.ГруппаИнформацияОСканированииВДругойФорме.Видимость = Ложь;
		
	КонецЕсли;
	
	ТекстГиперссылки = ПроверкаИПодборПродукцииИСМПКлиентСервер.НавигационнаяСсылкаОткрытьФормуПроверкиПродукцииИСМП();
	
	СтрокаОткрытиеФормыСканирования = Новый ФорматированнаяСтрока(ТекстНадписи,
		Новый Шрифт(,,,,Истина), ЦветаСтиля.ЦветГиперссылкиГосИС,, ТекстГиперссылки);
	
	Элементы.ДекорацияОтсканироватьПроверитьМаркируемуюПродукцию.Заголовок = СтрокаОткрытиеФормыСканирования;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ОбновитьПредставленияНаФорме(Прочитать = Ложь)

	Если Прочитать Тогда
		Прочитать();
	Иначе
		ОбновитьПредставлениеНоменклатуры();
		ОбновитьСтатусИСМП();
	КонецЕсли;

	ОбновитьИнформациюОткрытияФормыПроверкиПодбора();
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Элементы.Контрагент.ПодсказкаВвода = Объект.ИННОтправителя;
	КонецЕсли;
	
	ЗаполнитьИдентификаторыВСДНаФорме();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеНоменклатуры()
	
	МассивEAN            = Новый Массив;
	СоответствиеСтрокEAN = Новый Соответствие();
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		
		Если ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		ЗначениеEAN = РазборКодаМаркировкиИССлужебныйКлиентСервер.ШтрихкодEANИзGTIN(СтрокаТовары.GTIN);
		МассивEAN.Добавить(ЗначениеEAN);
		
		МассивСтрок = СоответствиеСтрокEAN.Получить(ЗначениеEAN);
		Если МассивСтрок = Неопределено Тогда
			МассивСтрок = Новый Массив();
			СоответствиеСтрокEAN.Вставить(ЗначениеEAN, МассивСтрок);
		КонецЕсли;
		
		МассивСтрок.Добавить(СтрокаТовары);
		
	КонецЦикла;
	
	ДанныеПоШтрихкодам = ШтрихкодированиеОбщегоНазначенияИС.ДанныеПоШтрихкодамEAN(МассивEAN);
	
	Для Каждого СтрокаДанныхПоШтрихкодам Из ДанныеПоШтрихкодам Цикл
		
		МассивСтрок = СоответствиеСтрокEAN.Получить(СтрокаДанныхПоШтрихкодам.ШтрихкодEAN);
		Если МассивСтрок = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаТовары Из МассивСтрок Цикл
			СтрокаТовары.ПредставлениеНоменклатуры   = СтрокаДанныхПоШтрихкодам.Номенклатура;
			СтрокаТовары.ПредставлениеХарактеристики = СтрокаДанныхПоШтрихкодам.Характеристика;
		КонецЦикла;
		
	КонецЦикла;
	
	РегистрыСведений.КэшОписанияОстатковИСМП.ЗаполнитьТаблицуПредставленийGTINОстатки(
		Объект.Товары,,
		Объект.ВидПродукции,
		"ПредставлениеНоменклатуры");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов = "")
	
	Инициализация          = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов    = Новый Структура(СписокРеквизитов);
	
	Если Инициализация
		Или СтруктураРеквизитов.Свойство("ДокументОснование")
		Или СтруктураРеквизитов.Свойство("Операция") Тогда
		ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(Форма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПослеВыбораОснования(ДанныеВыбора, ДополнительныеПараметры) Экспорт
	
	Если ДанныеВыбора = Элементы.ДокументОснование.ДоступныеТипы.ПривестиЗначение(ДанныеВыбора) Тогда
		Объект.ДокументОснование = ДанныеВыбора;
		Модифицированность       = Истина;
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ОбработатьПерезаполнение") Тогда
		
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ДокументОснование");
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОПерезаполнениииПоОснованиюПриЗавершении(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ПерезаполнитьПоОснованиюСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьПоОснованиюСервер()
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	ТекущийОбъект.Заполнить(Объект.ДокументОснование);
	
	ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
	
	ПриСозданииЧтенииНаСервере();
	ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	Модифицированность = Истина;
	
КонецПроцедуры

#Область Прочее

&НаКлиенте
Процедура ПриВыбореКонтрагента(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Контрагент = ВыбранноеЗначение;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовогоКонтрагента(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ДанныеКонтрагента = ИнтеграцияИСМПКлиентСервер.РеквизитыСозданияКонтрагента();
		ЗаполнитьЗначенияСвойств(ДанныеКонтрагента, Объект);
		ДанныеКонтрагента.ИНН = Объект.ИННОтправителя;
		ДанныеКонтрагента.ЮридическийАдрес = "";
		Если ИнтеграцияИСМПСлужебныйКлиентСервер.ЭтоПриемкаИзСтранЕАЭС(Объект.Операция) Тогда
			ДанныеКонтрагента.РегистрационныйНомер = Объект.ИННОтправителя;
		КонецЕсли;
		
		СобытияФормИСМПКлиентПереопределяемый.ОткрытьФормуСозданияКонтрагента(ЭтотОбъект, ДанныеКонтрагента);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьПравоСозданияКонтрагента()
	Возврат ОбщегоНазначенияИС.ПравоОпределяемогоТипа(Метаданные.ОпределяемыеТипы.КонтрагентГосИС, "Добавление");
КонецФункции

&НаСервереБезКонтекста
Функция КонтрагентПоИНН(ИНН, Операция)
	
	Если ИнтеграцияИСМПСлужебныйКлиентСервер.ЭтоПриемкаИзСтранЕАЭС(Операция) Тогда
		Возврат ИнтеграцияИСМП.КонтрагентПоНалоговомуНомеру(ИНН);
	Иначе
		Возврат ИнтеграцияИСМП.КонтрагентПоИНН(ИНН);
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция УчетноеКоличествоПоКоличествуПотребительскихУпаковок(Номенклатура, КоличествоПотребительскихУпаковок)
	
	ОписаниеНоменклатуры = ОбщегоНазначенияИС.ОписаниеНоменклатуры(Номенклатура)[Номенклатура];
	
	Возврат КоличествоПотребительскихУпаковок * ОписаниеНоменклатуры.КоличествоВПотребительскойУпаковке;
	
КонецФункции

#КонецОбласти

#Область Сертификация

&НаКлиенте
Процедура ОткрытьФормуРедактированияСертификации(ИдентификаторыСтрок)
	
	Если ТипЗнч(ИдентификаторыСтрок) = Тип("Массив") Тогда
		МассивСтрок = ИдентификаторыСтрок;
	Иначе
		МассивСтрок = Новый Массив();
		МассивСтрок.Добавить(ИдентификаторыСтрок);
	КонецЕсли;
	
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидСертификации",
		ПредопределенноеЗначение("Перечисление.ВидыДокументовОбязательнойСертификацииИС.ПустаяСсылка"));
	ПараметрыОткрытия.Вставить("ДатаСертификации",  Дата('00010101'));
	ПараметрыОткрытия.Вставить("НомерСертификации", "");
	
	Если МассивСтрок.Количество() = 1 Тогда
		
		ВыбраннаяСтрока = Объект.Товары.НайтиПоИдентификатору(МассивСтрок[0]);
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ВидСертификации",   ВыбраннаяСтрока.ВидДокументаСертификации);
		ПараметрыОткрытия.Вставить("ДатаСертификации",  ВыбраннаяСтрока.ДатаДокументаСертификации);
		ПараметрыОткрытия.Вставить("НомерСертификации", ВыбраннаяСтрока.НомерДокументаСертификации);
		
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ИдентификаторыСтрок", МассивСтрок);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗаполнениеСертификацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму(
		"ОбщаяФорма.УточнениеСертификацииИС",
		ПараметрыОткрытия, ЭтотОбъект,,,,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеСертификацииЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт

	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ИдентификаторСтроки Из ДополнительныеПараметры.ИдентификаторыСтрок Цикл
		ДанныеСтроки = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
		ДанныеСтроки.ВидДокументаСертификации   = РезультатВыбора.ВидСертификации;
		ДанныеСтроки.НомерДокументаСертификации = РезультатВыбора.НомерСертификации;
		ДанныеСтроки.ДатаДокументаСертификации  = РезультатВыбора.ДатаСертификации;
		ДанныеСтроки.Сертификация = ПредставлениеСертификации(РезультатВыбора.ВидСертификации,
			РезультатВыбора.НомерСертификации, РезультатВыбора.ДатаСертификации);
	КонецЦикла;
	
	ОбновитьКэшСертификацииКлиентСервер(ЭтотОбъект, ДанныеСтроки.ВидДокументаСертификации,
		ДанныеСтроки.НомерДокументаСертификации, ДанныеСтроки.ДатаДокументаСертификации);
	
	ИнтеграцияИСМПКлиент.ОбновитьСписокВыбораСертификации(ЭтотОбъект);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеСертификации(ВидСертификации, НомерСертификации, ДатаСертификации)
	
	ШаблонПредставлениеСертификата = "%1 №%2 от %3";
	
	ПредставлениеСертификата = "";
	Если ЗначениеЗаполнено(ВидСертификации)
		И ЗначениеЗаполнено(НомерСертификации)
		И ЗначениеЗаполнено(ДатаСертификации) Тогда
		
		ПредставлениеСертификата = СтрШаблон(ШаблонПредставлениеСертификата,
			ВидСертификации, НомерСертификации, Формат(ДатаСертификации, "ДФ=dd.MM.yyyy"));
		
	КонецЕсли;
	
	Возврат ПредставлениеСертификата;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьКэшСертификацииКлиентСервер(Форма, ВидСертификации, НомерСертификации, ДатаСертификации, Номенклатура = Неопределено)
	
	Если Не ЗначениеЗаполнено(ВидСертификации)
		И Не ЗначениеЗаполнено(НомерСертификации)
		И Не ЗначениеЗаполнено(ДатаСертификации) Тогда
		
		Возврат;
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура("ВидСертификации, НомерСертификации, ДатаСертификации",
		ВидСертификации, НомерСертификации, ДатаСертификации);
		
	НайденныеСтроки = Форма.КэшСертификации.НайтиСтроки(ПараметрыПоиска);
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		НоваяСтрока = Форма.КэшСертификации.Добавить();
		НоваяСтрока.ВидСертификации   = ВидСертификации;
		НоваяСтрока.НомерСертификации = НомерСертификации;
		НоваяСтрока.ДатаСертификации  = ДатаСертификации;
		НоваяСтрока.Представление     = ПредставлениеСертификации(ВидСертификации, НомерСертификации, ДатаСертификации);
		НоваяСтрока.Номенклатура      = Номенклатура;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредставлениеСертификации()
	
	Для Каждого Строка Из Объект.Товары Цикл
		
		Строка.Сертификация = ПредставлениеСертификации(
			Строка.ВидДокументаСертификации,
			Строка.НомерДокументаСертификации,
			Строка.ДатаДокументаСертификации);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКэшСертификацииСервер()
	
	СписокНоменклатуры = Новый Массив;
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		
		ОбновитьКэшСертификацииКлиентСервер(ЭтотОбъект, СтрокаТовары.ВидДокументаСертификации,
			СтрокаТовары.НомерДокументаСертификации, СтрокаТовары.ДатаДокументаСертификации);
		
		СтрокаТовары.Сертификация = ПредставлениеСертификации(СтрокаТовары.ВидДокументаСертификации,
			СтрокаТовары.НомерДокументаСертификации, СтрокаТовары.ДатаДокументаСертификации);
		
		СписокНоменклатуры.Добавить(СтрокаТовары.Номенклатура);
		
	КонецЦикла;
	
	ДобавитьСертификатыНоменклатурыВКэш(ЭтотОбъект, СписокНоменклатуры);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьСертификатыНоменклатурыВКэш(Форма, СписокНоменклатуры)
	
	СертификатыНоменклатуры = ИнформацияСертификатовНоменклатурыСервер(СписокНоменклатуры);
	
	Для Каждого КлючЗначение Из СертификатыНоменклатуры Цикл
		
		Номенклатура = КлючЗначение.Ключ;
		Для Каждого Сертификат Из КлючЗначение.Значение Цикл
			
			ОбновитьКэшСертификацииКлиентСервер(
				Форма, Сертификат.ВидСертификации, Сертификат.НомерСертификации, Сертификат.ДатаСертификации, Номенклатура);
				
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИнформацияСертификатовНоменклатурыСервер(СписокНоменклатуры)
	
	СертификатыНоменклатуры = Новый Соответствие;
	ИнтеграцияИСПереопределяемый.ПриЗаполненииСертификатовНоменклатуры(СписокНоменклатуры, СертификатыНоменклатуры);
	
	Возврат СертификатыНоменклатуры;
	
КонецФункции

#КонецОбласти

#КонецОбласти