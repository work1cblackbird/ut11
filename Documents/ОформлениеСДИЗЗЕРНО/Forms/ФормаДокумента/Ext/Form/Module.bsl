#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

&НаКлиенте
Перем КэшированныеЗначенияПоОрганизации;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияИС.НастроитьВидимостьДокументаОснования(ЭтотОбъект);
	Элементы.ДокументОснование.ДоступныеТипы = Метаданные.ОпределяемыеТипы.ОснованиеОформлениеСДИЗЗЕРНО.Тип;
	
	ЗаполнитьДоступныеВидыПродукции();
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыИС.ПриСозданииНаСервере(ЭтотОбъект);
	
	Если Объект.Ссылка.Пустая() Тогда
		
		УстановитьЗаголовокДокумента();
		
		ПриСозданииЧтенииНаСервере();
		ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриСозданииЧтенииНаСервере();
	
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыИС.ПриЧтенииНаСервере(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ИнтеграцияИСКлиент.ПослеЗаписиВФормеОбъектаДокументаИС(
		ЭтотОбъект,
		Объект,
		ИнтеграцияЗЕРНОКлиентСервер.ИмяПодсистемы(),
		ПараметрыЗаписи);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Подключаемый_ОбновитьКоманды();
	
	УстановитьЗаголовокДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриСозданииЧтенииНаСервере();
	
	РазблокироватьДанныеФормыДляРедактирования();
	
	ИнтеграцияИС.ПослеЗаписиНаСервереВФормеОбъектаДокументаИС(
		ЭтотОбъект,
		ТекущийОбъект,
		ИнтеграцияЗЕРНОКлиентСервер.ИмяПодсистемы(),
		ПараметрыЗаписи);
	
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИнтеграцияЗЕРНОКлиентСервер.ЭтоВыборПартииЗЕРНО(ВыбранноеЗначение) Тогда
		
		Отбор = Новый Структура("Партия", ВыбранноеЗначение.Партия);
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			НоваяСтрока = Объект.Товары.Добавить();
			НоваяСтрока.Идентификатор = Новый УникальныйИдентификатор();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыбранноеЗначение);
			ИдентификаторСтрокиТоваров = НоваяСтрока.ПолучитьИдентификатор();
			ОбновитьДанные(
				НоваяСтрока.Партия,
				Новый Структура("ИмяПоля, ИдентификаторСтроки", "ТоварыПартия", ИдентификаторСтрокиТоваров));
			
			ПараметрыОтбора = Новый Структура("ИдентификаторСтрокиТоваров", ИдентификаторСтрокиТоваров);
			СтрокиДокументовСертификации = Объект.ДокументыСертификации.НайтиСтроки(ПараметрыОтбора);
			Если СтрокиДокументовСертификации.Количество() = 0 Тогда
				ЗаполнитьПервичныеДокументыСертификации(ИдентификаторСтрокиТоваров);
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаПодбораНоменклатуры", ЭтотОбъект);
	СобытияФормИСКлиентПереопределяемый.ОбработкаВыбораПодборНоменклатуры(ОписаниеОповещения, ВыбранноеЗначение,ИсточникВыбора);
	
	СобытияФормЗЕРНОКлиентПереопределяемый.ОбработкаВыбораСерии(
		ЭтотОбъект, ВыбранноеЗначение, ИсточникВыбора, ПараметрыУказанияСерий);
	
	СобытияФормЗЕРНОКлиентПереопределяемый.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ИсточникВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если НовыйОбъект = Элементы.ДокументОснование.ДоступныеТипы.ПривестиЗначение(НовыйОбъект)
		И Не ЭтоКорректировочныйДокумент(НовыйОбъект) Тогда
		Объект.ДокументОснование = НовыйОбъект;
		Модифицированность = Истина;
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияИзмененоСостояние(ИнтеграцияЗЕРНОКлиентСервер.ИмяПодсистемы())
		И Параметр.Ссылка = Объект.Ссылка Тогда
		
		Если Параметр.Свойство("ОбъектИзменен")
			И Параметр.ОбъектИзменен Тогда
			ОбновитьПредставленияНаФорме(Истина);
		Иначе
			ОбновитьПредставленияНаФорме(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияВыполненОбмен(ИнтеграцияЗЕРНОКлиентСервер.ИмяПодсистемы())
	 И (Параметр = Неопределено
		Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусВФормахДокументов)) Тогда
		
		ОбновитьПредставленияНаФорме(Истина);
		
	КонецЕсли;
	
	// РаботаСПолямимСоставногоТипа
	Если ВРег(Лев(ИмяСобытия, 6)) = "ЗАПИСЬ" Тогда
		СобытияФормИСКлиент.ПолеСоставногоТипаОбработатьИзменениеДанных(ЭтотОбъект, Источник);
	КонецЕсли;
	// Конец РаботаСПолямимСоставногоТипа
	
	ОбщегоНазначенияСобытияФормИСКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если СтрНачинаетсяС(НавигационнаяСсылкаФорматированнойСтроки, "ОткрытьОбщуюФорму") Тогда
		
		СтандартнаяОбработка = Ложь;
		ИмяТабличнойЧасти = СтрЗаменить(НавигационнаяСсылкаФорматированнойСтроки, "ОткрытьОбщуюФорму", "");
		ОбработкаОповещения = Новый ОписаниеОповещения("ОбновитьДанные", ЭтотОбъект, ИмяТабличнойЧасти);
		
		ПрочиеДокументы = СтрНайти(ИмяТабличнойЧасти, "Прочие") > 0;
		
		ПараметрыОткрытияФормы = ИнтеграцияЗЕРНОКлиентСервер.ПараметрыФормыРедактированияСвязанныхДокументов(ТипЗнч(Объект.Ссылка));
		ПараметрыОткрытияФормы.ТолькоПросмотр = РедактированиеДополнительнойИнформацииНедоступно();
		
		Если ПрочиеДокументы Тогда
			
			ИсточникДанных = Новый Массив;
			Для Каждого СтрокаПрочиеДокументы Из Объект.СвязанныеДокументыПрочие Цикл
				ИсточникДанных.Добавить(СтрокаПрочиеДокументы);
			КонецЦикла;
			ПараметрыОткрытияФормы.ПрочиеДокументы = Истина;
			
			// Для заполнения списка выбора типов документов по статистике.
			ПараметрыОткрытияФормы.ДополнительныеПараметры = Новый Структура;
			ПараметрыОткрытияФормы.ДополнительныеПараметры.Вставить("Организация", Объект.Организация);
			ПараметрыОткрытияФормы.ДополнительныеПараметры.Вставить("Операция",    Объект.Операция);
			Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
				ПараметрыОткрытияФормы.ДополнительныеПараметры.Вставить("ТекущийДокумент", Объект.Ссылка);
			КонецЕсли;
			
		Иначе
			
			ИсточникДанных = Объект.СвязанныеДокументы;
			ПараметрыОткрытияФормы.ВидыДокументов.Добавить(ПредопределенноеЗначение("Перечисление.ВидыКлассификаторовЗЕРНО.ДокументПраваСобственности"));
			
		КонецЕсли;
		
		Для Каждого СтрокаТаблицы Из ИсточникДанных Цикл
			
			СтрокаДанных = Новый Структура();
			СтрокаДанных.Вставить("ТипДокумента");
			СтрокаДанных.Вставить("Номер");
			СтрокаДанных.Вставить("Дата");
			ЗаполнитьЗначенияСвойств(СтрокаДанных, СтрокаТаблицы);
			ПараметрыОткрытияФормы.ДанныеДокументов.Добавить(СтрокаДанных);
			
		КонецЦикла;
		
		ИмяОбщейФормы = "СвязанныеДокументыЗЕРНО";
		
		ОткрытьФорму("ОбщаяФорма." + ИмяОбщейФормы, ПараметрыОткрытияФормы, ЭтотОбъект, УникальныйИдентификатор,,, ОбработкаОповещения);
		Возврат;
		
	КонецЕсли;
	
	СобытияФормИСКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если Не Объект.Реализация Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ПокупательСтрокой");
	КонецЕсли;
	
	Если Не (Объект.Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭлеватор
		И Объект.Приемка) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВладелецПартииСтрокой");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ПроверкаЗаполненияКорректировкиСДИЗ(Отказ);
	ОчиститьЗависимыеРеквизитыОбъекта();
	
	ОбщегоНазначенияСобытияФормИСКлиентПереопределяемый.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьЗаписатьПараметрыОбновленияСтатуса(Отказ, ТекущийОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбновитьПодсказкиВвода(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	ОбновитьПодсказкиВводаПодразделения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПродукцииПриИзменении(Элемент)
	ОбновитьДанные(
		Объект.ВидПродукции,
		Новый Структура("ИмяПоля, ИдентификаторСтроки", "ВидПродукции", Неопределено));
КонецПроцедуры

&НаКлиенте
Процедура ВидПродукцииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Объект.Товары.Количество() > 0 И ВыбранноеЗначение <> Объект.ВидПродукции Тогда
		
		СтандартнаяОбработка = Ложь;
		ТекстВопроса = НСтр("ru = 'При изменении вида продукции табличная часть Товары будет очищена. Продолжить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидПродукцииПриЗавершении", ЭтотОбъект, ВыбранноеЗначение);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацияПриИзменении(Элемент)
	ОбновитьДанные(
		Объект.ВидПродукции,
		Новый Структура("ИмяПоля, ИдентификаторСтроки", "Операция", Неопределено));
КонецПроцедуры

&НаКлиенте
Процедура ПеревозкаПриИзменении(Элемент)
	ОбновитьДанные(
		Объект.ВидПродукции,
		Новый Структура("ИмяПоля, ИдентификаторСтроки, ПоВсемСтрокам", "Перевозка", Неопределено, Истина));
КонецПроцедуры

&НаКлиенте
Процедура ПриемкаПриИзменении(Элемент)
	ОбновитьДанные(
		Объект.ВидПродукции,
		Новый Структура("ИмяПоля, ИдентификаторСтроки, ПоВсемСтрокам", "Приемка", Неопределено, Истина));
КонецПроцедуры

&НаКлиенте
Процедура РеализацияПриИзменении(Элемент)
	ОбновитьДанные(
		Объект.ВидПродукции,
		Новый Структура("ИмяПоля, ИдентификаторСтроки, ПоВсемСтрокам", "Реализация", Неопределено, Истина));
	ОбновитьПодсказкиВвода(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОтгрузкаПриИзменении(Элемент)
	ОбновитьДанные(
		Объект.ВидПродукции,
		Новый Структура("ИмяПоля, ИдентификаторСтроки, ПоВсемСтрокам", "Отгрузка", Неопределено, Истина));
КонецПроцедуры

&НаКлиенте
Процедура ПеремещениеПартийЗернаПриИзменении(Элемент)
	ОбновитьДанные(
		Объект.ВидПродукции,
		Новый Структура("ИмяПоля, ИдентификаторСтроки", "ПеремещениеПартийЗерна", Неопределено));
КонецПроцедуры

&НаКлиенте
Процедура СтатусЗЕРНОПредставлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОчиститьСообщения();
	
	Если (Не ЗначениеЗаполнено(Объект.Ссылка)) Или (Не Объект.Проведен) Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения(
			"СтатусПредставлениеОбработкаНавигационнойСсылкиЗавершение",
			ЭтотОбъект,
			Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = 'Документ ""Оформление СДИЗ ЗЕРНО"" не проведен. Провести?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли Модифицированность Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения(
			"СтатусПредставлениеОбработкаНавигационнойСсылкиЗавершение",
			ЭтотОбъект,
			Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = 'Документ ""Оформление СДИЗ ЗЕРНО"" был изменен. Провести?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлеваторПолучательПриИзменении(Элемент)
	
	Объект.ПунктНазначения = "";
	Объект.ПунктНазначенияСтрокой = "";
	Объект.ПунктНазначенияСопоставленныйОбъект = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура НомерГПДПриИзменении(Элемент)
	ОбработатьИзмененияДляКорректировочногоДокумента(Элемент, Объект.НомерГПД);
КонецПроцедуры

&НаКлиенте
Процедура ДатаГПДПриИзменении(Элемент)
	ОбработатьИзмененияДляКорректировочногоДокумента(Элемент, Объект.ДатаГПД);
КонецПроцедуры

#Область ПунктНазначения

&НаКлиенте
Процедура ПунктНазначенияПриИзменении(Элемент)
	
	Текст = Элемент.ТекстРедактирования;
	Если ПустаяСтрока(Текст) Тогда
		Объект.ПунктНазначенияСтрокой = "";
		Объект.ПунктНазначения = "";
		Объект.ПунктНазначенияСопоставленныйОбъект = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПунктНазначенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элемент.ТекстРедактирования <> Объект.ПунктНазначения Тогда
		Объект.ПунктНазначенияСтрокой = Элемент.ТекстРедактирования;
		Объект.ПунктНазначения = "";
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидКонтактнойИнформации", ВидКонтактнойИнформации);
	ПараметрыОткрытия.Вставить("Значение",                Объект.ПунктНазначения);
	ПараметрыОткрытия.Вставить("Представление",           Объект.ПунктНазначенияСтрокой);
	
	ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru = 'Укажите адрес пункта назначения'"));
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПунктНазначенияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеЗначение.Свойство("Действие") Тогда
		Если ВыбранноеЗначение.Действие = "ОткрытьФорму" Тогда
			ОткрытьФорму(СтрШаблон("%1.%2.%3",
				ВыбранноеЗначение.Вид,
				ВыбранноеЗначение.Имя,
				ВыбранноеЗначение.ИмяФормы),,
				ЭтотОбъект,,,,
				Новый ОписаниеОповещения("ПунктНазначенияОкончаниеВыбора", ЭтотОбъект),
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	Иначе
		Если ВыбранноеЗначение.Свойство("Адрес") Тогда
			Объект.ПунктНазначения = ВыбранноеЗначение.Адрес;
			Объект.ПунктНазначенияСтрокой = ВыбранноеЗначение.ПредставлениеАдреса;
			Объект.ПунктНазначенияСопоставленныйОбъект = ВыбранноеЗначение.ВладелецАдреса;
		ИначеЕсли ВыбранноеЗначение.Свойство("ПредставлениеАдреса") Тогда
			Объект.ПунктНазначения = ИнтеграцияЗЕРНОВызовСервера.ЗначенияПолейКонтактнойИнформации(
				ВыбранноеЗначение.ПредставлениеАдреса, ВидКонтактнойИнформации);
			Объект.ПунктНазначенияСтрокой = ВыбранноеЗначение.ПредставлениеАдреса;
			Объект.ПунктНазначенияСопоставленныйОбъект = ВыбранноеЗначение.ВладелецАдреса;
		ИначеЕсли ВыбранноеЗначение.Свойство("КонтактнаяИнформация") Тогда
			Объект.ПунктНазначения = ВыбранноеЗначение.КонтактнаяИнформация;
			Объект.ПунктНазначенияСтрокой = ВыбранноеЗначение.Представление;
		КонецЕсли;
		
		Модифицированность = Истина;
	КонецЕсли;
	
	ОбработатьИзмененияДляКорректировочногоДокумента(Элемент, Объект.ПунктНазначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПунктНазначенияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ПустаяСтрока(Текст) Тогда
		ТекстДляАвтоПодбора = СокрЛП(Элемент.ТекстРедактирования);
	Иначе
		ТекстДляАвтоПодбора = СокрЛП(Текст);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ЭлеваторПолучатель) 
		И Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Зерно") Тогда
		ДанныеВыбора = ПунктНазначенияСписокАвтоподбораПоЭлеватору(ТекстДляАвтоПодбора, Объект.ЭлеваторПолучатель);
	ИначеЕсли ТекстДляАвтоПодбора = "" Тогда
		ДанныеВыбора = ПунктНазначенияСписокАвоподбораПоПокупателю();
	Иначе
		ДанныеВыбора = ПунктНазначенияСписокАвтоподбораОбщий(ТекстДляАвтоПодбора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакупкаЕИСПриИзменении(Элемент)
	ОбновитьДанные(
		Объект.ВидПродукции,
		Новый Структура("ИмяПоля, ИдентификаторСтроки", "ЗакупкаЕИС", Неопределено));
КонецПроцедуры

&НаКлиенте
Процедура ГосударственныйКонтрактПриИзменении(Элемент)
	
	СоответствиеРеквизитовГосКонтракта = ДанныеГосударственногоКонтракта(Объект.ГосударственныйКонтракт);
	
	ДанныеГосКонтракта = СоответствиеРеквизитовГосКонтракта[Объект.ГосударственныйКонтракт];
	Если ДанныеГосКонтракта = Неопределено Тогда
		Объект.ДатаГосКонтракта  = Дата(1,1,1);
		Объект.НомерГосКонтракта = "";
		Объект.НомерЗакупкиЕИС   = "";
	Иначе
		Объект.ДатаГосКонтракта  = ДанныеГосКонтракта.ДатаГосКонтракта;
		Объект.НомерГосКонтракта = ДанныеГосКонтракта.НомерГосКонтракта;
		Объект.НомерЗакупкиЕИС   = ДанныеГосКонтракта.НомерЗакупкиЕИС;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЛабораторияПриИзменении(Элемент)
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект,, "Лаборатория");
	ОтключитьОтметкуНезаполненного();
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура МестоХраненияПриПеремещенииСтрокойПриИзменении(Элемент)
	
	Текст = Элемент.ТекстРедактирования;
	Если ПустаяСтрока(Текст) Тогда
		Объект.МестоХраненияПриПеремещенииСтрокой = "";
		Объект.МестоХраненияПриПеремещении = "";
	КонецЕсли;
	
	Объект.МестоХраненияПриПеремещенииСтрокой = Текст;
	Объект.МестоХраненияПриПеремещении = ЗначенияПолейКонтактнойИнформацииСервер(
		Текст, ВидКонтактнойИнформации);
		
КонецПроцедуры

&НаКлиенте
Процедура МестоХраненияПриПеремещенииСтрокойОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.МестоХраненияПриПеремещенииСтрокой = "";
	Объект.МестоХраненияПриПеремещении = "";
	
КонецПроцедуры

&НаКлиенте
Процедура МестоХраненияПриПеремещенииСтрокойОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		// Отказ от выбора, данные неизменны.
		Возврат;
	КонецЕсли;
	
	Объект.МестоХраненияПриПеремещенииСтрокой     = ВыбранноеЗначение.Представление;
	Объект.МестоХраненияПриПеремещении            = ВыбранноеЗначение.КонтактнаяИнформация;
	
КонецПроцедуры

&НаКлиенте
Процедура МестоХраненияПриПеремещенииСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элемент.ТекстРедактирования <> Объект.МестоХраненияПриПеремещении Тогда
		Объект.МестоХраненияПриПеремещенииСтрокой = Элемент.ТекстРедактирования;
		Объект.МестоХраненияПриПеремещении = "";
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидКонтактнойИнформации", ВидКонтактнойИнформации);
	ПараметрыОткрытия.Вставить("Значение",                Объект.МестоХраненияПриПеремещении);
	ПараметрыОткрытия.Вставить("Представление",           Объект.МестоХраненияПриПеремещенииСтрокой);
	
	ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru = 'Укажите адрес места хранения при перемещении'"));
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВладелецПартииСтрокойПриИзменении(Элемент)
	ПолеСоставногоТипаПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ВладелецПартииСтрокойОткрытие(Элемент, СтандартнаяОбработка)
	ПолеСоставногоТипаОткрытие(Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВладелецПартииСтрокойОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ПолеСоставногоТипаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВладелецПартииСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ПолеСоставногоТипаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВладелецПартииСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПолеСоставногоТипаАвтоПодбор(Элемент, Элемент.ТекстРедактирования, ДанныеВыбора, Неопределено, 0, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ГрузоотправительСтрокойПриИзменении(Элемент)
	ПолеСоставногоТипаПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ГрузоотправительСтрокойОткрытие(Элемент, СтандартнаяОбработка)
	ПолеСоставногоТипаОткрытие(Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ГрузоотправительСтрокойОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ПолеСоставногоТипаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ГрузоотправительСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ПолеСоставногоТипаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ГрузоотправительСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПолеСоставногоТипаАвтоПодбор(Элемент, Элемент.ТекстРедактирования, ДанныеВыбора, Неопределено, 0, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПокупательСтрокойПриИзменении(Элемент)
	ПолеСоставногоТипаПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПокупательСтрокойОткрытие(Элемент, СтандартнаяОбработка)
	ПолеСоставногоТипаОткрытие(Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПокупательСтрокойОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ПолеСоставногоТипаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПокупательСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ПолеСоставногоТипаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПокупательСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПолеСоставногоТипаАвтоПодбор(Элемент, Элемент.ТекстРедактирования, ДанныеВыбора, Неопределено, 0, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ГрузополучательСтрокойПриИзменении(Элемент)
	ПолеСоставногоТипаПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ГрузополучательСтрокойОткрытие(Элемент, СтандартнаяОбработка)
	ПолеСоставногоТипаОткрытие(Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ГрузополучательСтрокойОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ПолеСоставногоТипаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ГрузополучательСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ПолеСоставногоТипаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ГрузополучательСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПолеСоставногоТипаАвтоПодбор(Элемент, Элемент.ТекстРедактирования, ДанныеВыбора, Неопределено, 0, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПунктОтправленияСтрокойПриИзменении(Элемент)
	ПолеСоставногоТипаПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПунктОтправленияСтрокойОткрытие(Элемент, СтандартнаяОбработка)
	ПолеСоставногоТипаОткрытие(Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПунктОтправленияСтрокойОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ПолеСоставногоТипаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПунктОтправленияСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ПолеСоставногоТипаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПунктОтправленияСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПолеСоставногоТипаАвтоПодбор(Элемент, Элемент.ТекстРедактирования, ДанныеВыбора, Неопределено, 0, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РеализацияПунктОтправленияСтрокойПриИзменении(Элемент)
	ПолеСоставногоТипаПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура РеализацияПунктОтправленияСтрокойОткрытие(Элемент, СтандартнаяОбработка)
	ПолеСоставногоТипаОткрытие(Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РеализацияПунктОтправленияСтрокойОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ПолеСоставногоТипаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РеализацияПунктОтправленияСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ПолеСоставногоТипаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РеализацияПунктОтправленияСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПолеСоставногоТипаАвтоПодбор(Элемент, Элемент.ТекстРедактирования, ДанныеВыбора, Неопределено, 0, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РеализацияПодразделениеПокупателяПриИзменении(Элемент)
	ОбновитьПодсказкиВводаПодразделения(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПокупателяПриИзменении(Элемент)
	ОбновитьПодсказкиВводаПодразделения(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Объект.Товары.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если Поле = Элементы.ТоварыДокументыСертификацииПредставление Тогда
		
		ПараметрыОткрытияФормы = ИнтеграцияЗЕРНОКлиентСервер.ПараметрыФормыРедактированияДокументовСертификации();
		ПараметрыОткрытияФормы.ТолькоПросмотр    = РедактированиеФормыНедоступно;
		ПараметрыОткрытияФормы.ЦельИспользования = ДанныеСтроки.ЦельИспользования;
		
		СтруктураОтбора = Новый Структура("ИдентификаторСтрокиТоваров", ДанныеСтроки.Идентификатор);
		СтрокиДанных = Объект.ДокументыСертификации.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого СтрокаТаблицы Из СтрокиДанных Цикл
			
			СтрокаДанных = ИнтеграцияЗЕРНОКлиентСервер.ИнициализироватьСтруктуруДанныеСертификации();
			ЗаполнитьЗначенияСвойств(СтрокаДанных, СтрокаТаблицы);
			ПараметрыОткрытияФормы.ДанныеДокументов.Добавить(СтрокаДанных);
			
		КонецЦикла;
		
		ПараметрыОповещения = Новый Структура();
		ПараметрыОповещения.Вставить("ИдентификаторСтроки",        ВыбраннаяСтрока);
		ПараметрыОповещения.Вставить("ИдентификаторСтрокиТоваров", ДанныеСтроки.Идентификатор);
		ПараметрыОповещения.Вставить("ИмяПоля",                   "ДокументыСертификации");
		
		ОткрытьФорму(
			"ОбщаяФорма.ДокументыСертификацииЗЕРНО",
			 ПараметрыОткрытияФормы,
			 ЭтотОбъект,
			 УникальныйИдентификатор,,,
			 Новый ОписаниеОповещения("ОбновитьДанные", ЭтотОбъект, ПараметрыОповещения));
			 
	ИначеЕсли Поле = Элементы.ТоварыКорректируемыйСДИЗ Тогда
		
		Если Не ЗначениеЗаполнено(ДанныеСтроки.КорректируемыйСДИЗ) Тогда
			Возврат;
		КонецЕсли;
		
		ПоказатьЗначение(, ДанныеСтроки.КорректируемыйСДИЗ);
		
	ИначеЕсли РедактированиеФормыНедоступно 
		И Не (ПартииСформированыЧастично
			И Поле = Элементы.ТоварыПартия
			И ДанныеСтроки.СтатусОбработки <> ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ПартииСформированы")) Тогда
		СобытияФормЗЕРНОКлиент.ВыборЭлементаТабличнойЧастиОткрытьФормуЭлемента(ЭтотОбъект, Элемент, Поле);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		Если Не ЗначениеЗаполнено(ТекущиеДанные.Идентификатор) Или Копирование Тогда
			
			НовыйИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
			
			Если Копирование Тогда
				СтруктураОтбора = Новый Структура("ИдентификаторСтрокиТоваров", ТекущиеДанные.Идентификатор);
				СтрокиДанныхДокумента = Объект.ДокументыСертификации.НайтиСтроки(СтруктураОтбора);
				Для Каждого СтрокаТаблицы Из СтрокиДанныхДокумента Цикл
					СтрокаСертификации = Объект.ДокументыСертификации.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаСертификации, СтрокаТаблицы);
					СтрокаСертификации.ИдентификаторСтрокиТоваров = НовыйИдентификаторСтроки;
				КонецЦикла;
			КонецЕсли;
			
			ТекущиеДанные.Идентификатор = НовыйИдентификаторСтроки;
			
			Если Копирование Тогда
				ТекущиеДанные.ВыделеннаяПартия = Неопределено;
				ТекущиеДанные.Партия = Неопределено;
				ТекущиеДанные.КорректируемыйСДИЗ = Неопределено;
				ТекущиеДанные.ХешСуммаИсходная = Неопределено;
				ТекущиеДанные.ХешСуммаНовая = Неопределено;
			КонецЕсли;
			
		КонецЕсли;
		УстановитьПредставлениеДокументовСертификацииПоСтроке(ЭтотОбъект, ТекущиеДанные);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если РедактированиеФормыНедоступно
			И ТекущиеДанные.СтатусОбработки <> ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ФормированиеПартииОшибкаПередачи") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Объект.Корректировочный Тогда
		
		Если ЗначениеЗаполнено(ТекущиеДанные.КорректируемыйСДИЗ) Тогда
			
			Отказ = Истина;
			
			ДополнительныеПараметры = Новый Структура("ИдентификаторТекущейСтроки", ТекущиеДанные.ПолучитьИдентификатор());
			ПослеВыбораДействия = Новый ОписаниеОповещения("ПриУдаленииСтрокиТоваровКорректировочногоСДИЗ", ЭтотОбъект, ДополнительныеПараметры);
			
			СписокВариантовОтвета = Новый СписокЗначений();
			СписокВариантовОтвета.Добавить("УдалитьСтроку",      НСтр("ru = 'Удалить строку'"));
			СписокВариантовОтвета.Добавить("АннулироватьСтроку", НСтр("ru = 'Аннулировать строку'"));
			СписокВариантовОтвета.Добавить("Отмена",             НСтр("ru = 'Отмена'"));
			
			ТекстВопроса = НСтр("ru = 'Выберите нужное действие с выбранной строкой:'");
			
			ПоказатьВопрос(ПослеВыбораДействия,
				ТекстВопроса,
				СписокВариантовОтвета,
				,
				"УдалитьСтроку");
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТекущиеДанные.СтатусОбработки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ФормированиеПартииОшибкаПередачи") Тогда
		ИдентификаторыИзмененныхСтрок.Добавить(ТекущиеДанные.Идентификатор);
	КонецЕсли;
	
	ИнтеграцияЗЕРНОКлиентСервер.ОчиститьДанныеТабличныхЧастейПоСтроке(
		ЭтотОбъект,
		ТекущиеДанные.Идентификатор,
		"ИдентификаторСтрокиТоваров",
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ДокументыСертификации"));
		
	ИнтеграцияЗЕРНОКлиентСервер.ОчиститьДанныеТабличныхЧастейПоСтроке(
		ЭтотОбъект,
		ТекущиеДанные.КорректируемыйСДИЗ,
		"КорректируемыйСДИЗ",
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ДанныеКорректировки"));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	
	Если ПартииСформированыЧастично Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	ОбновитьСтатусИПараметрыДополнения();
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, , "Товары");
	ОтключитьОтметкуНезаполненного();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект,, "ТоварыДатаПротоколаИспытаний");
	ОтключитьОтметкуНезаполненного();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыКодТНВЭД Тогда
		ИнтеграцияЗЕРНОКлиентСервер.ОбновитьСписокВыбораКодаТНВЭД(ЭтотОбъект, Элементы.Товары.ТекущиеДанные.ОКПД2);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьОтборПоСтрокеДанныхКорректировок();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СобытияФормЗЕРНОКлиент.ПриНачалеВыбораНоменклатуры(Элемент, Объект.ВидПродукции, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьДанные(
		Элементы.Товары.ТекущиеДанные.Номенклатура,
		Новый Структура("ИмяПоля, ИдентификаторСтроки", "ТоварыНоменклатура", Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор()));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормЗЕРНОКлиентПереопределяемый.ПриНачалеВыбораХарактеристики(
		Элемент, ТекущиеДанные, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьДанные(
		Элементы.Товары.ТекущиеДанные.Характеристика,
		Новый Структура("ИмяПоля, ИдентификаторСтроки", "ТоварыХарактеристика", Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор()));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИнтеграцияИСКлиент.ОткрытьПодборСерий(ЭтотОбъект,, Элемент.ТекстРедактирования, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьДанные(
		Элементы.Товары.ТекущиеДанные.Серия,
		Новый Структура("ИмяПоля, ИдентификаторСтроки", "ТоварыСерия", Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор()));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОКПД2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияЗЕРНОКлиент.ОткрытьФормуПодбораОКПД2(ЭтотОбъект, ТекущиеДанные, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОКПД2ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ОКПД2) Тогда
		ТекущиеДанные.ОКПД2Представление = "";
	КонецЕсли;
	
	ОбновитьДанные(
		Элементы.Товары.ТекущиеДанные.ОКПД2,
		Новый Структура("ИмяПоля, ИдентификаторСтроки", "ТоварыОКПД2", Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор()));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОКПД2ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ОКПД2 = ВыбранноеЗначение.Код;
	ТекущиеДанные.ОКПД2Представление = ВыбранноеЗначение.Представление;
	
	ВыбранноеЗначение = ВыбранноеЗначение.Код;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОКПД2ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	СобытияФормЗерноКлиент.ОКПД2ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, Объект.ВидПродукции);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОКПД2АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СобытияФормЗЕРНОКлиент.ОКПД2АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, Объект.ВидПродукции);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКодТНВЭДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияЗЕРНОКлиент.ОткрытьФормуПодбораТНВЭД(ЭтотОбъект, ТекущиеДанные, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКодТНВЭДАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СобытияФормЗЕРНОКлиент.КодТНВЭДАвтоПодбор(
		ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, ТекущиеДанные.ОКПД2);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКодТНВЭДОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СобытияФормЗерноКлиент.КодТНВЭДОкончаниеВводаТекста(
		ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, ТекущиеДанные.ОКПД2);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ОбновитьДанные(
		Элементы.Товары.ТекущиеДанные.Количество,
		Новый Структура("ИмяПоля, ИдентификаторСтроки", "ТоварыКоличество", Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор()));
		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоЗЕРНОПриИзменении(Элемент)
	
	ОбновитьДанные(
		Элементы.Товары.ТекущиеДанные.КоличествоЗЕРНО,
		Новый Структура("ИмяПоля, ИдентификаторСтроки", "ТоварыКоличествоЗЕРНО", Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор()));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПартияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = ИнтеграцияЗЕРНОКлиент.ПараметрыФормыПодбораПартий();
	ПараметрыФормы.ЗакрыватьПриВыборе = Истина;
	ЗаполнитьОтборПартийПоШапкеДокумента(ПараметрыФормы);
	ЗаполнитьОтборПартийПоСтрокеДокумента(ПараметрыФормы);
	
	ОткрытьФорму("РегистрНакопления.ОстаткиПартийЗЕРНО.Форма.ФормаОстатков",
		ПараметрыФормы, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПартияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.РеестрПартийЗЕРНО") Тогда 
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
	Если ИнтеграцияЗЕРНОКлиентСервер.ЭтоВыборПартииЗЕРНО(ВыбранноеЗначение) Тогда
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		ВыбранноеЗначение.Удалить("Операция");
		
		ДополнительныеПараметры = Новый Структура("ТекущиеДанные, ИмяОбновляемогоПоля", ТекущиеДанные, Элемент.Имя);
		
		Если ТекущиеДанные.КоличествоЗЕРНО > ВыбранноеЗначение.КоличествоЗЕРНО Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборПартии", ЭтотОбъект, ДополнительныеПараметры);
			СобытияФормЗЕРНОКлиент.ОбработатьВыборПартииСНедостаткомКоличества(
				Объект.Товары, ВыбранноеЗначение, ТекущиеДанные, ОписаниеОповещения);
		Иначе
			ОбработатьВыборПартии(ВыбранноеЗначение, ДополнительныеПараметры);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПартияПриИзменении(Элемент)
	ОбновитьДанные(
		Элементы.Товары.ТекущиеДанные.Партия,
		Новый Структура("ИмяПоля, ИдентификаторСтроки", "ТоварыПартияИзменение", Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор()));
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЛабораторияПриИзменении(Элемент)
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект,, "ТоварыЛаборатория");
	ОтключитьОтметкуНезаполненного();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМаршрут

&НаКлиенте
Процедура МаршрутВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Маршрут.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Перевозчики = ИнтеграцияЗЕРНОКлиентСервер.УникальныеПеревозчики(ЭтотОбъект,, Истина);
	
	ПараметрыОткрытияФормы = ИнтеграцияЗЕРНОСлужебныйКлиент.ПараметрыОткрытияФормыУказанияТранспортныхСредств();
	ПараметрыОткрытияФормы.РежимОткрытия                    = "Маршрут";
	ПараметрыОткрытияФормы.КэшПеревозчикиИБ                 = КэшПеревозчикиИБ(Перевозчики, ДанныеСтроки);
	ПараметрыОткрытияФормы.ПеревозчикИБ                     = ДанныеСтроки.Перевозчик;
	ПараметрыОткрытияФормы.Подразделение                    = ДанныеСтроки.Подразделение;
	ПараметрыОткрытияФормы.ТолькоПросмотр                   = РедактированиеДополнительнойИнформацииНедоступно();
	ПараметрыОткрытияФормы.ИспользоватьТранспортныеСредства = УказываетсяТранспортноеСредство;
	ПараметрыОткрытияФормы.ПодразделенияИспользуются        = ПодразделенияИспользуются;
	ПараметрыОткрытияФормы.ПеревозчикПоУмолчанию             = Объект.Организация;
	ПараметрыОткрытияФормы.ПодразделениеПоУмолчанию          = Объект.Подразделение;
	
	СтруктураОтбора = Новый Структура("Перевозчик, Подразделение", ДанныеСтроки.Перевозчик, ДанныеСтроки.Подразделение);
	
	СтрокиДанных = Объект.ТранспортныеСредства.НайтиСтроки(СтруктураОтбора);
	Для Каждого СтрокаТаблицы Из СтрокиДанных Цикл
		СтрокаДанных = Новый Структура();
		СтрокаДанных.Вставить("ТипТранспорта");
		СтрокаДанных.Вставить("ТранспортноеСредство");
		СтрокаДанных.Вставить("НомерТранспортногоСредства");
		СтрокаДанных.Вставить("НомерАвтомобильногоКонтейнера");
		ЗаполнитьЗначенияСвойств(СтрокаДанных, СтрокаТаблицы);
		ПараметрыОткрытияФормы.ТранспортныеСредства.Добавить(СтрокаДанных);
	КонецЦикла;
	
	СтрокиДанных = Объект.МестаПерегрузки.НайтиСтроки(СтруктураОтбора);
	Для Каждого СтрокаТаблицы Из СтрокиДанных Цикл
		СтрокаДанных = Новый Структура();
		СтрокаДанных.Вставить("Адрес");
		СтрокаДанных.Вставить("АдресСтрокой");
		ЗаполнитьЗначенияСвойств(СтрокаДанных, СтрокаТаблицы);
		ПараметрыОткрытияФормы.МестаПерегрузки.Добавить(СтрокаДанных);
	КонецЦикла;
	
	ПараметрыОповещения = ИнициализироватьПараметрыОповещенияФормыПунктыМаршрута();
	ПараметрыОповещения.Вставить("КлючПеревозчика", СтруктураОтбора);
	ПараметрыОповещения.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
	
	ИнтеграцияЗЕРНОСлужебныйКлиент.ОткрытьФормуУказанияТранспортныхСредств(
		ПараметрыОткрытияФормы,
		ЭтотОбъект,
		Новый ОписаниеОповещения("ВыборМаршрутаЗавершение", ЭтотОбъект, ПараметрыОповещения));
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	
	Если Копирование Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Перевозчики = ИнтеграцияЗЕРНОКлиентСервер.УникальныеПеревозчики(ЭтотОбъект,, Истина);
	
	ПараметрыОткрытияФормы = ИнтеграцияЗЕРНОСлужебныйКлиент.ПараметрыОткрытияФормыУказанияТранспортныхСредств();
	ПараметрыОткрытияФормы.РежимОткрытия                    = "Маршрут";
	ПараметрыОткрытияФормы.КэшПеревозчикиИБ                 = КэшПеревозчикиИБ(Перевозчики);
	ПараметрыОткрытияФормы.ИспользоватьТранспортныеСредства = УказываетсяТранспортноеСредство;
	ПараметрыОткрытияФормы.ПодразделенияИспользуются        = ПодразделенияИспользуются;
	ПараметрыОткрытияФормы.ПеревозчикПоУмолчанию             = Объект.Организация;
	ПараметрыОткрытияФормы.ПодразделениеПоУмолчанию          = Объект.Подразделение;
	
	ПараметрыОповещения = ИнициализироватьПараметрыОповещенияФормыПунктыМаршрута();
	ПараметрыОповещения.Вставить("ДобавитьСтроку",  Истина);
	
	ИнтеграцияЗЕРНОСлужебныйКлиент.ОткрытьФормуУказанияТранспортныхСредств(
		ПараметрыОткрытияФормы,
		ЭтотОбъект,
		Новый ОписаниеОповещения("ВыборМаршрутаЗавершение", ЭтотОбъект, ПараметрыОповещения));
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутПередУдалением(Элемент, Отказ)
	
	Если РедактированиеФормыНедоступно Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Маршрут.ТекущиеДанные;
	
	СвязанныеТаблицы = Новый Массив;
	СвязанныеТаблицы.Добавить("ТранспортныеСредства");
	СвязанныеТаблицы.Добавить("МестаПерегрузки");
	ИнтеграцияЗЕРНОКлиентСервер.ОчиститьДанныеТабличныхЧастейПоСтроке(
		ЭтотОбъект, ТекущиеДанные.Перевозчик, "Перевозчик", СвязанныеТаблицы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДанныеКорректировки

&НаКлиенте
Процедура ДанныеКорректировкиПартияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = ИнтеграцияЗЕРНОКлиент.ПараметрыФормыПодбораПартий();
	ПараметрыФормы.ЗакрыватьПриВыборе = Истина;
	ЗаполнитьОтборПартийПоШапкеДокумента(ПараметрыФормы);
	ЗаполнитьОтборПартийПоСтрокеДокумента(ПараметрыФормы);
	
	ОткрытьФорму("РегистрНакопления.ОстаткиПартийЗЕРНО.Форма.ФормаОстатков",
		ПараметрыФормы, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеКорректировкиПартияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.РеестрПартийЗЕРНО") Тогда 
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
	Если ИнтеграцияЗЕРНОКлиентСервер.ЭтоВыборПартииЗЕРНО(ВыбранноеЗначение) Тогда
		
		ТекущиеДанные = Элементы.ДанныеКорректировки.ТекущиеДанные;
		ВыбранноеЗначение.Удалить("Операция");
		
		ДополнительныеПараметры = Новый Структура("ТекущиеДанные, ИмяОбновляемогоПоля, ПартииКорректировки", ТекущиеДанные, Элемент.Имя, Истина);
		
		Если ТекущиеДанные.КоличествоЗЕРНО > ВыбранноеЗначение.КоличествоЗЕРНО Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборПартии", ЭтотОбъект, ДополнительныеПараметры);
			СобытияФормЗЕРНОКлиент.ОбработатьВыборПартииСНедостаткомКоличества(
				Объект.ДанныеКорректировки, ВыбранноеЗначение, ТекущиеДанные, ОписаниеОповещения);
		Иначе
			ОбработатьВыборПартии(ВыбранноеЗначение, ДополнительныеПараметры);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеКорректировкиКоличествоЗЕРНОПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеКорректировки.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьДанныеКорректировкиНаСервере(Элемент.Имя, ТекущиеДанные.ПолучитьИдентификатор());
	
	СобытияФормЗЕРНОКлиентПереопределяемый.ПриИзмененииКоличестваВКилограммах(
		ЭтотОбъект, ТекущиеДанные, ЕдиницаИзмеренияКилограмм, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеКорректировкиПартияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеКорректировки.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьДанныеКорректировкиНаСервере(Элемент.Имя, ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеКорректировкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДанныеКорректировки.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.ДанныеКорректировкиПартия
		И ЗначениеЗаполнено(ТекущиеДанные.Партия)
		И (Не ТекущиеДанные.Операция = ПредопределенноеЗначение("Перечисление.ОперацииКорректировкиСДИЗ.ОформлениеСДИЗ")
			Или РедактированиеФормыНедоступно) Тогда
		
		ПоказатьЗначение(, ТекущиеДанные.Партия);
		Возврат;
		
	КонецЕсли;
	
	Если Поле = Элементы.ДанныеКорректировкиВыделеннаяПартия
		И ЗначениеЗаполнено(ТекущиеДанные.ВыделеннаяПартия)
		И (Не ТекущиеДанные.Операция = ПредопределенноеЗначение("Перечисление.ОперацииКорректировкиСДИЗ.ОформлениеСДИЗ")
			Или РедактированиеФормыНедоступно) Тогда
		
		ПоказатьЗначение(, ТекущиеДанные.ВыделеннаяПартия);
		Возврат;
		
	КонецЕсли;
	
	Если Не Поле = Элементы.ДанныеКорректировкиПримечание Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.Операция = ПредопределенноеЗначение("Перечисление.ОперацииКорректировкиСДИЗ.ОтказОтПогашения") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытияФормы = Новый Структура();
	ПараметрыОткрытияФормы.Вставить("ПричинаОтказаОтГашения", ТекущиеДанные.ПричинаОтказаОтГашения);
	ПараметрыОткрытияФормы.Вставить("Примечание",             ТекущиеДанные.Примечание);
	ПараметрыОткрытияФормы.Вставить("ТолькоПросмотр",         РедактированиеФормыНедоступно);
	
	ПослеУстановкиПараметровОтказаГашения = Новый ОписаниеОповещения("ПослеУстановкиПараметровОтказаГашения",
		ЭтотОбъект,
		Новый Структура("ИдентификаторСтроки", ТекущиеДанные.ПолучитьИдентификатор()));
		
	ОткрытьФорму("Документ.ОформлениеСДИЗЗЕРНО.Форма.ФормаУстановкиДанныхПоОтказуПогашения",
		ПараметрыОткрытияФормы, ЭтотОбъект,,,, ПослеУстановкиПараметровОтказаГашения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ОформлениеСДИЗЗЕРНО.Форма.ФормаДокумента.Записать");
	
	ОчиститьСообщения();
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ОформлениеСДИЗЗЕРНО.Форма.ФормаДокумента.Провести");
	
	ОчиститьСообщения();
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ОформлениеСДИЗЗЕРНО.Форма.ФормаДокумента.ПровестиИЗакрыть");
	
	ОчиститьСообщения();
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	
	Если Записать(ПараметрыЗаписи) Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АрхивироватьДокумент(Команда)
	
	ИнтеграцияИСКлиент.АрхивироватьДокументы(ЭтотОбъект, Объект.Ссылка, ИнтеграцияЗЕРНОКлиент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборПартий(Команда)
	
	ПараметрыФормы = ИнтеграцияЗЕРНОКлиент.ПараметрыФормыПодбораПартий();
	ЗаполнитьОтборПартийПоШапкеДокумента(ПараметрыФормы);
	
	ОткрытьФорму("РегистрНакопления.ОстаткиПартийЗЕРНО.Форма.ФормаОстатков",
		ПараметрыФормы, ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборТоваров(Команда)
	
	СобытияФормЗЕРНОКлиентПереопределяемый.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПартии(Команда)
	
	ВыполнитьКомандуЗаполнитьПартии();
	
КонецПроцедуры

&НаКлиенте
Процедура АннулироватьСДИЗ(Команда)
	
	ОчиститьСообщения();
	
	МассивСтрок = Новый Массив();
	
	Для Каждого ВыделеннаяСтрока Из Элементы.Товары.ВыделенныеСтроки Цикл
		ДанныеСтроки = Объект.Товары.НайтиПоИдентификатору(ВыделеннаяСтрока);
		Если СДИЗМожноАннулировать(ДанныеСтроки) Тогда
			МассивСтрок.Добавить(ДанныеСтроки);
		КонецЕсли;
	КонецЦикла;
		
	Если МассивСтрок.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Аннулирование СДИЗ по выделенным строкам невозможно'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыАннулирования = НовыеПараметрыАннулирования();
	ПараметрыАннулирования.ВариантАннулирования = 0;
	ПараметрыАннулирования.МассивСтрок = МассивСтрок;
	
	АннулироватьСДИЗПартию(ПараметрыАннулирования);
	
КонецПроцедуры

&НаКлиенте
Процедура АннулироватьПартии(Команда)
	
	ОчиститьСообщения();
	
	МассивСтрок = Новый Массив();
	
	Для Каждого ВыделеннаяСтрока Из Элементы.Товары.ВыделенныеСтроки Цикл
		ДанныеСтроки = Объект.Товары.НайтиПоИдентификатору(ВыделеннаяСтрока);
		Если ПартиюМожноАннулировать(ДанныеСтроки, Ложь) Тогда
			МассивСтрок.Добавить(ДанныеСтроки);
		КонецЕсли;
	КонецЦикла;
		
	Если МассивСтрок.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Аннулирование партии по выделенным строкам невозможно'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыАннулирования = НовыеПараметрыАннулирования();
	ПараметрыАннулирования.ВариантАннулирования = 1;
	ПараметрыАннулирования.МассивСтрок = МассивСтрок;
	
	АннулироватьСДИЗПартию(ПараметрыАннулирования);
	
КонецПроцедуры

&НаКлиенте
Процедура АннулироватьСДИЗИПартии(Команда)
	
	ОчиститьСообщения();
	
	МассивСтрок = Новый Массив();
	
	Для Каждого ВыделеннаяСтрока Из Элементы.Товары.ВыделенныеСтроки Цикл
		ДанныеСтроки = Объект.Товары.НайтиПоИдентификатору(ВыделеннаяСтрока);
		Если СДИЗМожноАннулировать(ДанныеСтроки)
			И ПартиюМожноАннулировать(ДанныеСтроки, Истина) Тогда
			МассивСтрок.Добавить(ДанныеСтроки);
		КонецЕсли;
	КонецЦикла;
		
	Если МассивСтрок.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Аннулирование СДИЗ и партии по выделенным строкам невозможно'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыАннулирования = НовыеПараметрыАннулирования();
	ПараметрыАннулирования.ВариантАннулирования = 2;
	ПараметрыАннулирования.МассивСтрок = МассивСтрок;
	
	АннулироватьСДИЗПартию(ПараметрыАннулирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПоОснованию(Команда)
	
	ОбработчикПерезаполненияПоОснованию();
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.ВыделеннаяПартия) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Строка с выделенной партией не может быть разбита'"),
			Объект.Ссылка,
			СтрШаблон("Объект.Товары[%1]", Объект.Товары.Индекс(ТекущиеДанные)));
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуЗавершение", ЭтотОбъект);
	
	ПараметрыРазбиенияСтроки = СобытияФормИСКлиент.ПараметрыРазбиенияСтроки(ТекущиеДанные.Количество);
	ПараметрыРазбиенияСтроки.ИмяПоляКоличество = "Количество";
	
	СобытияФормИСКлиент.РазбитьСтрокуТабличнойЧасти(Объект.Товары, Элементы.Товары, ПараметрыРазбиенияСтроки, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура КорректироватьОформлениеСДИЗ(Команда)
	
	Если Модифицированность Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения(
			"ВопросКорректироватьОформлениеСДИЗЗавершение",
			ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Документ ""Оформление СДИЗ ЗЕРНО"" был изменен. Провести?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		СоздатьДокументКорректировкиСДИЗ();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПартииКорректировки(Команда)
	
	ВыполнитьКомандуЗаполнитьПартии(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьПанель(Команда)
	
	ПанельДополнительныеСвойстваСвернута = Не ПанельДополнительныеСвойстваСвернута;
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, Элементы.Товары.ТекущаяСтрока, "ПанельДополнительныеСвойстваСвернута");
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИнформациюОбОшибкеКорректировки(Команда)
	
	Элементы.ИнформацияОбОшибке.Пометка = Не Элементы.ИнформацияОбОшибке.Пометка;
	
	ПоказатьСкрытьИнформациюОбОшибкеКорректировки();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтотОбъект);
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект);
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтотОбъект);
	СобытияФормЗЕРНО.УстановитьУсловноеОформлениеКоличестваДляПустойНоменклатуры(ЭтотОбъект);
	
	СобытияФормЗЕРНО.УстановитьУсловноеОформлениеОКПД2(ЭтотОбъект);
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыДокументыСертификацииПредставление.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Товары.СтатусУказанияДокументовСертификации");
	ОтборЭлемента.ПравоеЗначение = 1;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаТребуетВниманияГосИС);
	
	// Редактирование товаров для статуса "Партии сформированы частично"
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПартия.Имя);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличество.Имя);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоЗЕРНО.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.СтатусОбработки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ПартииСформированы;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Подсказка "Не требуется" для примечания и причины отказа в корректировочном СДИЗ, если не отказ от погашения
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДанныеКорректировкиПримечание.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДанныеКорректировки.Операция");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ОперацииКорректировкиСДИЗ.ОтказОтПогашения;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПодсказкиВвода);
	
	// Подсказка "Не требуется" для выделенной партии в корректировочном СДИЗ
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДанныеКорректировкиВыделеннаяПартия.Имя);
	
	СписокОперацийНеТребующихУказаниеПартий = Новый СписокЗначений();
	СписокОперацийНеТребующихУказаниеПартий.Добавить(Перечисления.ОперацииКорректировкиСДИЗ.АннулированиеСДИЗ);
	СписокОперацийНеТребующихУказаниеПартий.Добавить(Перечисления.ОперацииКорректировкиСДИЗ.КорректировкаСДИЗ);
	СписокОперацийНеТребующихУказаниеПартий.Добавить(Перечисления.ОперацииКорректировкиСДИЗ.АннулированиеОтказаОтПогашения);
	СписокОперацийНеТребующихУказаниеПартий.Добавить(Перечисления.ОперацииКорректировкиСДИЗ.ОтказОтПогашения);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДанныеКорректировки.Операция");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокОперацийНеТребующихУказаниеПартий;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПодсказкиВвода);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Подсказка "Не требуется" для партии в корректировочном СДИЗ
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДанныеКорректировкиПартия.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДанныеКорректировки.Операция");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ОперацииКорректировкиСДИЗ.КорректировкаСДИЗ;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПодсказкиВвода);
	
	// Подсказка "Не требуется" для выделенной партии в строке аннулирования партии в корректировочном СДИЗ
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДанныеКорректировкиВыделеннаяПартия.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДанныеКорректировки.Операция");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ОперацииКорректировкиСДИЗ.АннулированиеПартии;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПодсказкиВвода);
	
	// Аннулирование строки корректировочного СДИЗа
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличество.Имя);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоЗЕРНО.Имя);
	
	ГруппаОтбораЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораЭлемента.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбораЭлемента.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.КоличествоЗЕРНО");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ГруппаОтбораЭлемента.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.КорректируемыйСДИЗ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = ГруппаОтбораЭлемента.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Корректировочный");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбораЭлемента.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.КорректируемыйСДИЗ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<аннулирование строки>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПодсказкиВвода);
	
	// Автоотметка незаполненной партии в строке создания нового СДИЗ по корректировке
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДанныеКорректировкиПартия.Имя);
	
	ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДанныеКорректировки.Операция");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ОперацииКорректировкиСДИЗ.ОформлениеСДИЗ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДанныеКорректировки.Партия");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// Подсказка "Будет сформирована автоматически" для партии при отказе гашения
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДанныеКорректировкиПартия.Имя);
	
	ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДанныеКорректировки.Операция");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ОперацииКорректировкиСДИЗ.ОтказОтПогашения;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДанныеКорректировки.Партия");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<будет сформирована автоматически>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПодсказкиВвода);
	
	// Только просмотр для партии в Данных корректировки
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДанныеКорректировкиПартия.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДанныеКорректировки.Операция");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ОперацииКорректировкиСДИЗ.ОформлениеСДИЗ;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокДокумента()
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Заголовок = ИнтеграцияЗЕРНО.ЗаголовокДокументаПоддерживающегоКорректировку(Объект.Ссылка, Объект.Корректировочный, Объект.Номер, Объект.Дата);
		АвтоЗаголовок = Ложь;
		
	Иначе
		Автозаголовок = Истина;
		Заголовок     = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	ИнтеграцияЗЕРНО.УстановитьДоступностьПоляСтатус(ЭтотОбъект);
	
	ЦветГиперссылки = ЦветаСтиля.ЦветГиперссылкиГосИС;
	ЦветТекстаТребуетВниманияГосИС = ЦветаСтиля.ЦветТекстаТребуетВниманияГосИС;
	
	ПравоИзменения = ПравоДоступа("Изменение", Метаданные.Документы.ОформлениеСДИЗЗЕРНО);
	
	ПараметрыУказанияСерий          = ИнтеграцияИС.ПараметрыУказанияСерийФормыОбъекта(Объект, Документы.ОформлениеСДИЗЗЕРНО);
	ЕдиницаИзмеренияКилограмм       = ИнтеграцияИСКлиентСерверПовтИсп.ЕдиницаИзмеренияКилограмм();
	УказываетсяТранспортноеСредство = ИнтеграцияЗЕРНО.УказываетсяТранспортноеСредство();
	
	ИнтеграцияИСПереопределяемый.ИспользуетсяПоддержкаПлатежейВСоответствииС275ФЗ(ГосударственныеКонтрактыИспользуются);
	
	ПодразделенияИспользуются = ОбщегоНазначенияИС.ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс();
	
	ТипВладельцаПартии  = ИнтеграцияЗЕРНО.ОпределитьТипОрганизацияКонтрагент(Объект.ВладелецПартии);
	ТипГрузоотправителя = ИнтеграцияЗЕРНО.ОпределитьТипОрганизацияКонтрагент(Объект.Грузоотправитель);
	ТипГрузополучателя  = ИнтеграцияЗЕРНО.ОпределитьТипОрганизацияКонтрагент(Объект.Грузополучатель);
	ТипПокупателя       = ИнтеграцияЗЕРНО.ОпределитьТипОрганизацияКонтрагент(Объект.Покупатель);
	
	ИнициализироватьСлужебныеРеквизитыТоваров();
	ИнициализироватьСлужебныеРеквизитыДанныхКорректировок();
	
	ПараметрыОбновленияСтатуса = Неопределено;
	
	ОбновитьСтатусИПараметрыДополнения(Объект.Ссылка.Пустая() И Объект.Товары.Количество());
	
	ИнтеграцияЗЕРНОКлиентСервер.УстановитьПараметрыВыбораНоменклатуры(ЭтотОбъект, Объект.ВидПродукции);
	
	ЗаполнитьДоступныеОперации(ЭтотОбъект);
	ПредыдущаяОперация = Объект.Операция;
	
	СоздатьКэшСертификацииСервер();
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	ОбновитьПодсказкиВвода(ЭтотОбъект);
	
	УстановитьВидимостьПолейКорректировочногоОформленияСДИЗ(ЭтотОбъект);
	
	ИнициализироватьПоляКонтактнойИнформации();
	
	// РаботаСПолямимСоставногоТипа
	СобытияФормИС.ПоляСоставногоТипаИнициализация(ЭтотОбъект, ИменаЭлементовПолейСоставногоТипа());
	// Конец РаботаСПолямимСоставногоТипа
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоступныеВидыПродукции()
	
	ВидыПродукции = ИнтеграцияЗЕРНОКлиентСерверПовтИсп.УчитываемыеВидыПродукции();
	
	Элементы.ВидПродукции.СписокВыбора.Очистить();
	Для Каждого ВидПродукции Из ВидыПродукции Цикл
		Элементы.ВидПродукции.СписокВыбора.Добавить(ВидПродукции, Строка(ВидПродукции));
	КонецЦикла;
	Элементы.ВидПродукции.СписокВыбора.СортироватьПоПредставлению();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДоступныеОперации(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.Операция.СписокВыбора.Очистить();
	
	Элементы.Операция.СписокВыбора.Добавить(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ОформлениеСДИЗРФ"));
	Элементы.Операция.СписокВыбора.Добавить(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ОформлениеСДИЗИмпорт"));
	Элементы.Операция.СписокВыбора.Добавить(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭкспорт"));
		
	Если Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Зерно") Тогда
		Элементы.Операция.СписокВыбора.Добавить(
			ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭлеватор"));
	КонецЕсли;
	
	Элементы.Операция.СписокВыбора.СортироватьПоПредставлению();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьКнопокКоманднойПанелиРезультатовКорректировки(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.ДанныеКорректировкиЗаполнитьПартии.Видимость = Объект.Корректировочный
		И Элементы.СтраницыРезультатыКорректировки.ТекущаяСтраница = Элементы.СтраницаКорректировка;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьПолейКорректировочногоОформленияСДИЗ(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.ТоварыКорректируемыйСДИЗ.Видимость      = Объект.Корректировочный;
	Элементы.ДанныеКорректировки.Видимость           = Объект.Корректировочный;
	
	Элементы.РазбитьСтроку.Видимость                         = Не Объект.Корректировочный;
	Элементы.ТоварыГруппаПодбор.Видимость                    = Не Объект.Корректировочный;
	Элементы.ТоварыЗаполнитьПартии.Видимость                 = Не Объект.Корректировочный;
	Элементы.ТоварыСтатусОбработки.Видимость                 = Не Объект.Корректировочный;
	
	УстановитьВидимостьКнопокКоманднойПанелиРезультатовКорректировки(Форма);
	
	Элементы.ФормаКорректироватьОформлениеСДИЗ.Доступность = ДоступноСозданиеКорректировочногоДокумента(Объект.Ссылка);
	
	Если Объект.Корректировочный Тогда
		
		Исключения = Новый Массив;
		
		Исключения.Добавить(Элементы.РеализацияПокупательСтрокой.Имя);
		Исключения.Добавить(Элементы.ПокупательСтрокой.Имя);
		Исключения.Добавить(Элементы.ЭлеваторПолучатель.Имя);
		Исключения.Добавить(Элементы.ГрузоотправительСтрокой.Имя);
		Исключения.Добавить(Элементы.ГрузополучательСтрокой.Имя);
		Исключения.Добавить(Элементы.ПунктОтправленияСтрокой.Имя);
		Исключения.Добавить(Элементы.ПунктНазначения.Имя);
		Исключения.Добавить(Элементы.ПодразделениеПокупателя.Имя);
		Исключения.Добавить(Элементы.ПодразделениеГрузоотправителя.Имя);
		Исключения.Добавить(Элементы.ПодразделениеГрузополучателя.Имя);
		Исключения.Добавить(Элементы.РеализацияПунктОтправленияСтрокой.Имя);
		Исключения.Добавить(Элементы.РеализацияПодразделениеПокупателя.Имя);
		
		Исключения.Добавить(Элементы.Дата.Имя);
		Исключения.Добавить(Элементы.ДокументОснование.Имя);
		Исключения.Добавить(Элементы.Комментарий.Имя);
		Исключения.Добавить(Элементы.Ответственный.Имя);
		
		Исключения.Добавить(Элементы.Перевозка.Имя);
		Исключения.Добавить(Элементы.Приемка.Имя);
		Исключения.Добавить(Элементы.Реализация.Имя);
		Исключения.Добавить(Элементы.Отгрузка.Имя);

		Исключения.Добавить(Элементы.ПредставлениеСвязанныхДокументовРеализация.Имя);
		Исключения.Добавить(Элементы.ПредставлениеПрочихСвязанныхДокументовПеревозка.Имя);
		
		ИнтеграцияИСКлиентСервер.УстановитьДоступностьЭлементовФормы(
			Форма, Исключения, Истина);
		
		ИнтеграцияИСКлиентСервер.УстановитьДоступностьЭлементовГруппыФормыРекурсивно(
			Элементы.СтраницаОсновное, Ложь, Исключения);
			
		Исключения = Новый Массив;
		
		Исключения.Добавить(Элементы.НомерГПД.Имя);
		Исключения.Добавить(Элементы.ДатаГПД.Имя);
		
		ИнтеграцияИСКлиентСервер.УстановитьДоступностьЭлементовФормы(
			Форма, Исключения, Истина);
		
		ИнтеграцияИСКлиентСервер.УстановитьДоступностьЭлементовГруппыФормыРекурсивно(
			Элементы.СтраницаДополнительно, Ложь, Исключения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСлужебныеРеквизитыТоваров()
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	ТаблицаОКПД2 = ИнтеграцияЗЕРНО.НаименованияКодовОКПД2ПоТабличнойЧасти(Объект.Товары);
	
	КодыОКПД2 = Новый Массив;
	
	ОстаткиПартий = ОстаткиПартий();
	
	Для Каждого ТекущаяСтрока Из Объект.Товары Цикл
		
		ДанныеОКПД2 = ТаблицаОКПД2.Найти(ТекущаяСтрока.ОКПД2);
		Если ДанныеОКПД2 <> Неопределено Тогда
			ТекущаяСтрока.ОКПД2Представление = ИнтеграцияЗЕРНОКлиентСервер.ПредставлениеОКПД2(
				ДанныеОКПД2.Наименование, ДанныеОКПД2.Идентификатор);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.Партия) Тогда
			
			СтрокаОстаткиПартий = ОстаткиПартий.Найти(ТекущаяСтрока.Партия);
			Если СтрокаОстаткиПартий <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаОстаткиПартий, "КоличествоОстатокПартииЗЕРНО, ЦельИспользования");
			КонецЕсли;
			
			ТекущаяСтрока.ПредставлениеПартия = Новый ФорматированнаяСтрока(
				Строка(ТекущаяСтрока.Партия),,,, ПолучитьНавигационнуюСсылку(ТекущаяСтрока.Партия));
			
			Если ТекущаяСтрока.КоличествоЗЕРНО < ТекущаяСтрока.КоличествоОстатокПартииЗЕРНО
				И Не ЗначениеЗаполнено(ТекущаяСтрока.ВыделеннаяПартия) Тогда
			КонецЕсли;
			
		Иначе
			
			ТекущаяСтрока.ПредставлениеПартия = Новый ФорматированнаяСтрока(
				НСтр("ru = '<будет создана автоматически>'"),, ЦветТекстаПоля("ТекстЗапрещеннойЯчейкиЦвет"));
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.ОКПД2) Тогда
			КодыОКПД2.Добавить(ТекущаяСтрока.ОКПД2);
		КонецЕсли;
		
		УстановитьПредставлениеДокументовСертификацииПоСтроке(ЭтотОбъект, ТекущаяСтрока);
		
	КонецЦикла;
	
	Если КодыОКПД2.Количество() Тогда
		КэшВидовСельхозКультур.Загрузить(
			РегистрыСведений.ВидыСельскохозяйственныхКультурЗЕРНО.ДанныеТНВЭДПоОКПД2(
				ОбщегоНазначенияКлиентСервер.СвернутьМассив(КодыОКПД2)));
	КонецЕсли;
	
	Маршрут.Очистить();
	Перевозчики = ИнтеграцияЗЕРНОКлиентСервер.УникальныеПеревозчики(ЭтотОбъект,, ПодразделенияИспользуются);
	Для Каждого КлючИЗначение Из Перевозчики Цикл
		
		Если ПодразделенияИспользуются Тогда
			
			Для Каждого ЭлементКоллекции Из КлючИЗначение.Значение Цикл
				СтрокаМаршрута = Маршрут.Добавить();
				СтрокаМаршрута.Перевозчик = КлючИЗначение.Ключ;
				СтрокаМаршрута.Подразделение = ЭлементКоллекции;
				УстановитьПредставлениеТранспортныхСредствПоСтроке(ЭтотОбъект, СтрокаМаршрута);
				УстановитьПредставлениеМестПерегрузкиПоСтроке(ЭтотОбъект, СтрокаМаршрута);
			КонецЦикла;
			
		Иначе
			СтрокаМаршрута = Маршрут.Добавить();
			СтрокаМаршрута.Перевозчик = КлючИЗначение.Ключ;
			УстановитьПредставлениеТранспортныхСредствПоСтроке(ЭтотОбъект, СтрокаМаршрута);
			УстановитьПредставлениеМестПерегрузкиПоСтроке(ЭтотОбъект, СтрокаМаршрута);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСлужебныеРеквизитыДанныхКорректировок()
	
	ОстаткиПартий = ОстаткиПартий();
	ПричинаОтказаОтПогашенияПоУмолчанию = Документы.ОформлениеСДИЗЗЕРНО.ДанныеПричиныОтказаОтПогашенияПоУмолчанию();
	
	Для Каждого ТекущаяСтрока Из Объект.ДанныеКорректировки Цикл
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.Партия) Тогда
			
			СтрокаОстаткиПартий = ОстаткиПартий.Найти(ТекущаяСтрока.Партия);
			Если СтрокаОстаткиПартий <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаОстаткиПартий, "КоличествоОстатокПартииЗЕРНО");
			КонецЕсли;
			
			ТекущаяСтрока.ПредставлениеПартия = Новый ФорматированнаяСтрока(
				Строка(ТекущаяСтрока.Партия),,,, ПолучитьНавигационнуюСсылку(ТекущаяСтрока.Партия));
			
			Если ТекущаяСтрока.КоличествоЗЕРНО < ТекущаяСтрока.КоличествоОстатокПартииЗЕРНО
				И Не ЗначениеЗаполнено(ТекущаяСтрока.ВыделеннаяПартия) Тогда
			КонецЕсли;
			
		Иначе
			
			ТекущаяСтрока.ПредставлениеПартия = Новый ФорматированнаяСтрока(
				НСтр("ru = '<будет создана автоматически>'"),, ЦветТекстаПоля("ТекстЗапрещеннойЯчейкиЦвет"));
			
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура("КорректируемыйСДИЗ", ТекущаяСтрока.КорректируемыйСДИЗ);
		СтрокиТаблицыТоваров = Объект.Товары.НайтиСтроки(СтруктураОтбора);
		
		Если СтрокиТаблицыТоваров.Количество() Тогда
			ТекущаяСтрока.Номенклатура   = СтрокиТаблицыТоваров[0].Номенклатура;
			ТекущаяСтрока.Характеристика = СтрокиТаблицыТоваров[0].Характеристика;
			ТекущаяСтрока.Серия          = СтрокиТаблицыТоваров[0].Серия;
		КонецЕсли;
		
		СформироватьПредставлениеПричиныОтказаПоСтрокеКорректировки(ТекущаяСтрока, ПричинаОтказаОтПогашенияПоУмолчанию);
		
	КонецЦикла;
	
	СтатусыОформленоУспешно.ЗагрузитьЗначения(Документы.ОформлениеСДИЗЗЕРНО.КонечныеСтатусы(Ложь));
	СтатусыОформленоСОшибкой.ЗагрузитьЗначения(Документы.ОформлениеСДИЗЗЕРНО.СтатусыОшибок());
	
	СтатусыОбрабатывается.Добавить(Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.АннулированиеОтказаПогашенияСДИЗКПередаче);
	СтатусыОбрабатывается.Добавить(Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.АннулированиеОтказаПогашенияСДИЗОбрабатывается);
	СтатусыОбрабатывается.Добавить(Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.АннулированиеОформленияСДИЗКПередаче);
	СтатусыОбрабатывается.Добавить(Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.АннулированиеОформленияСДИЗОбрабатывается);
	СтатусыОбрабатывается.Добавить(Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.КорректировкаОформленияСДИЗКПередаче);
	СтатусыОбрабатывается.Добавить(Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.КорректировкаОформленияСДИЗОбрабатывается);
	СтатусыОбрабатывается.Добавить(Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОтказПогашенияСДИЗКПередаче);
	СтатусыОбрабатывается.Добавить(Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОтказПогашенияСДИЗОбрабатывается);
	СтатусыОбрабатывается.Добавить(Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОформлениеСДИЗКПередаче);
	СтатусыОбрабатывается.Добавить(Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОформлениеСДИЗОбрабатывается);
	СтатусыОбрабатывается.Добавить(Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ФормированиеПартииКПередаче);
	СтатусыОбрабатывается.Добавить(Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ФормированиеПартииОбрабатывается);
	
	РассчитатьПострочныйХешКорректировочногоСДИЗ(Истина);
	ЗаполнитьДанныеКорректируемыхСДИЗ();
	
КонецПроцедуры

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда) Экспорт
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды() Экспорт
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ПриЗавершенииОперации(Результат, ДополнительныеПараметры) Экспорт
	
	Прочитать();
	
КонецПроцедуры

#Область ВыборОснования

&НаКлиенте
Процедура Подключаемый_ПослеВыбораОснования(ДанныеВыбора, ДополнительныеПараметры) Экспорт
	
	Если ДанныеВыбора = Элементы.ДокументОснование.ДоступныеТипы.ПривестиЗначение(ДанныеВыбора) Тогда
		Объект.ДокументОснование = ДанныеВыбора;
		Модифицированность       = Истина;
	КонецЕсли;
	
	ЗаполнитьТовары = (ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ОбработатьПерезаполнение"));
	Если ЗаполнитьТовары Тогда
		ОбработчикПерезаполненияПоОснованию();
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект,, "ДокументОснование");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПерезаполненияПоОснованию()
	
	ОчиститьСообщения();
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru = 'Данные документа будут перезаполнены. Продолжить?'");
		ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ВопросОПерезаполнениииПоОснованиюПриЗавершении", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ПерезаполнитьПоОснованиюСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОПерезаполнениииПоОснованиюПриЗавершении(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ПерезаполнитьПоОснованиюСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьПоОснованиюСервер()
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	ТекущийОбъект.Заполнить(Объект.ДокументОснование);
	
	ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
	
	ПриСозданииЧтенииНаСервере();
	ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ОбновитьПредставленияНаФорме(Прочитать = Ложь)
	
	Если Прочитать Тогда
		Прочитать();
	Иначе
		ОбновитьСтатусЗЕРНО(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПредставлениеОбработкаНавигационнойСсылкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		 Возврат;
	КонецЕсли;
	
	Если ПроверитьЗаполнение() Тогда
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		РазблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	Если Не Модифицированность И Объект.Проведен Тогда
		ОбработатьНажатиеНавигационнойСсылки(ДополнительныеПараметры.НавигационнаяСсылкаФорматированнойСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СДИЗМожноАннулировать(ДанныеСтроки)
	
	Если ДанныеСтроки.СтатусОбработки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОформлениеСДИЗЗЕРНО.СДИЗОформлен")
		Или ДанныеСтроки.СтатусОбработки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОформлениеСДИЗЗЕРНО.АннулированиеОформленияСДИЗОшибкаПередачи") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция ПартиюМожноАннулировать(ДанныеСтроки, ПропуститьПроверкуСтатуса = Истина)
	
	Если ЗначениеЗаполнено(ДанныеСтроки.ВыделеннаяПартия)
		И (ПропуститьПроверкуСтатуса
			Или ДанныеСтроки.СтатусОбработки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ПартииСформированы")
			Или ДанныеСтроки.СтатусОбработки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОформлениеСДИЗЗЕРНО.АннулированиеПартииОшибкаПередачи")
			Или ДанныеСтроки.СтатусОбработки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОформлениеСДИЗОшибкаПередачи")
			Или ДанныеСтроки.СтатусОбработки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОформлениеСДИЗАннулировано")) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция НовыеПараметрыАннулирования()
	
	Результат = Новый Структура;
	Результат.Вставить("ВариантАннулирования"); // 0 - СДИЗ, 1 - Партия, 2 - СДИЗ и Партия
	Результат.Вставить("МассивСтрок");
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура АннулироватьСДИЗПартию(ПараметрыАннулирования)
	
	Если Модифицированность Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения(
			"ВопросАннулированиеСДИЗПартииЗавершение",
			ЭтотОбъект,
			ПараметрыАннулирования);
		ТекстВопроса = НСтр("ru = 'Документ ""Оформление СДИЗ ЗЕРНО"" был изменен. Провести?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		СтрокиТекстаВопроса = Новый Массив();
		
		ВариантАннулирования = ПараметрыАннулирования.ВариантАннулирования;
		
		Если ПараметрыАннулирования.МассивСтрок.Количество() = 1 Тогда
			
			Если ВариантАннулирования = 0 Тогда
				СтрокиТекстаВопроса.Добавить(
					СтрШаблон(
						НСтр("ru = 'Аннулировать сформированный СДИЗ %1?'"),
						ПараметрыАннулирования.МассивСтрок[0].СДИЗ));
			ИначеЕсли ВариантАннулирования = 1 Тогда
				СтрокиТекстаВопроса.Добавить(
					СтрШаблон(
						НСтр("ru = 'Аннулировать выделенную партию %1?'"),
						ПараметрыАннулирования.МассивСтрок[0].ВыделеннаяПартия));
			ИначеЕсли ВариантАннулирования = 2 Тогда
				СтрокиТекстаВопроса.Добавить(
					СтрШаблон(
						НСтр("ru = 'Аннулировать сформированный СДИЗ %1 и выделенную партию %2?'"),
						ПараметрыАннулирования.МассивСтрок[0].СДИЗ,
						ПараметрыАннулирования.МассивСтрок[0].ВыделеннаяПартия));
			КонецЕсли;
			
		Иначе
			
			Если ВариантАннулирования = 0 Тогда
				СтрокиТекстаВопроса.Добавить(НСтр("ru = 'Аннулировать сформированные СДИЗ?'"));
			ИначеЕсли ВариантАннулирования = 1 Тогда
				СтрокиТекстаВопроса.Добавить(НСтр("ru = 'Аннулировать выделенные партии?'"));
			ИначеЕсли ВариантАннулирования = 2 Тогда
				СтрокиТекстаВопроса.Добавить(НСтр("ru = 'Аннулировать сформированные СДИЗ и выделенные партии?'"));
			КонецЕсли;
			
			Для Каждого СтрокаТаблицы Из ПараметрыАннулирования.МассивСтрок Цикл
				Если ВариантАннулирования = 0 Тогда
					СтрокиТекстаВопроса.Добавить(Строка(СтрокаТаблицы.СДИЗ));
				ИначеЕсли ВариантАннулирования = 1 Тогда
					СтрокиТекстаВопроса.Добавить(Строка(СтрокаТаблицы.ВыделеннаяПартия));
				ИначеЕсли ВариантАннулирования = 2 Тогда
					СтрокиТекстаВопроса.Добавить(
						СтрШаблон(
						НСтр("ru = 'СДИЗ %1, выделенная партия %2?'"),
						СтрокаТаблицы.СДИЗ,
						СтрокаТаблицы.ВыделеннаяПартия));
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения(
			"ПодтверждениеАннулированияСДИЗПартииЗавершение",
			ЭтотОбъект,
			ПараметрыАннулирования);
		
		ТекстВопроса = СтрСоединить(СтрокиТекстаВопроса, Символы.ПС);
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросАннулированиеСДИЗПартииЗавершение(РезультатВопроса, ПараметрыАннулирования) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроверитьЗаполнение() Тогда
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		РазблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	Если Не Модифицированность И Объект.Проведен Тогда
		ПодтверждениеАннулированияСДИЗПартииЗавершение(РезультатВопроса, ПараметрыАннулирования);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеАннулированияСДИЗПартииЗавершение(РезультатВопроса, ПараметрыАннулирования) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПередачи = ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ПараметрыОбработкиСообщений();
	ПараметрыПередачи.Ссылка             = Объект.Ссылка;
	ПараметрыПередачи.Организация        = Объект.Организация;
	ПараметрыПередачи.Подразделение      = Объект.Подразделение;
	ПараметрыПередачи.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.АннулируйтеОперацию");
	
	ПараметрыПередачи.ПараметрыЗапроса = Новый Структура;
	ПараметрыПередачи.ПараметрыЗапроса.Вставить("ВариантАннулирования", ПараметрыАннулирования.ВариантАннулирования);
	ПараметрыПередачи.ПараметрыЗапроса.Вставить("СтрокиДляАннулирования", Новый Массив);
	Для Каждого СтрокаТаблицы Из ПараметрыАннулирования.МассивСтрок Цикл
		ПараметрыПередачи.ПараметрыЗапроса.СтрокиДляАннулирования.Добавить(СтрокаТаблицы.Идентификатор);
	КонецЦикла;
	
	ОписаниеПриЗавершении = Новый ОписаниеОповещения(
		"Подключаемый_ПриЗавершенииОперации", ЭтотОбъект, ПараметрыПередачи);
	
	ИнтеграцияЗЕРНОКлиент.ПодготовитьКПередаче(ЭтотОбъект, ПараметрыПередачи, ОписаниеПриЗавершении);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПередатьДанные" Тогда
		
		ПараметрыПередачи = ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ПараметрыОбработкиСообщений();
		ПараметрыПередачи.Ссылка             = Объект.Ссылка;
		ПараметрыПередачи.Организация        = Объект.Организация;
		ПараметрыПередачи.Подразделение      = Объект.Организация;
		ПараметрыПередачи.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные");
		
		ОписаниеПриЗавершении = Новый ОписаниеОповещения(
			"Подключаемый_ПриЗавершенииОперации", ЭтотОбъект, ПараметрыПередачи);
		
		ИнтеграцияЗЕРНОКлиент.ПодготовитьКПередаче(ЭтотОбъект, ПараметрыПередачи, ОписаниеПриЗавершении);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "СформироватьПартии" Тогда
		
		ПараметрыПередачи = ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ПараметрыОбработкиСообщений();
		ПараметрыПередачи.Ссылка      = Объект.Ссылка;
		ПараметрыПередачи.Организация = Объект.Организация;
		ПараметрыПередачи.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.СформируйтеПартии");
		
		ОписаниеПриЗавершении = Новый ОписаниеОповещения(
			"Подключаемый_ПриЗавершенииОперации", ЭтотОбъект, ПараметрыПередачи);
		
		ИнтеграцияЗЕРНОКлиент.ПодготовитьКПередаче(ЭтотОбъект, ПараметрыПередачи, ОписаниеПриЗавершении);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтказатьсяОтГашения" Тогда
		
		ПараметрыПередачи = ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ПараметрыОбработкиСообщений();
		ПараметрыПередачи.Ссылка      = Объект.Ссылка;
		ПараметрыПередачи.Организация = Объект.Организация;
		ПараметрыПередачи.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОформитеОтказОтГашения");
		
		ОписаниеПриЗавершении = Новый ОписаниеОповещения(
			"Подключаемый_ПриЗавершенииОперации", ЭтотОбъект, ПараметрыПередачи);
		
		ИнтеграцияЗЕРНОКлиент.ПодготовитьКПередаче(ЭтотОбъект, ПараметрыПередачи, ОписаниеПриЗавершении);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "КорректироватьСДИЗ" Тогда
		
		ПараметрыПередачи = ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ПараметрыОбработкиСообщений();
		ПараметрыПередачи.Ссылка      = Объект.Ссылка;
		ПараметрыПередачи.Организация = Объект.Организация;
		ПараметрыПередачи.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОформитеКорректировкуСДИЗ");
		
		ОписаниеПриЗавершении = Новый ОписаниеОповещения(
			"Подключаемый_ПриЗавершенииОперации", ЭтотОбъект, ПараметрыПередачи);
		
		ИнтеграцияЗЕРНОКлиент.ПодготовитьКПередаче(ЭтотОбъект, ПараметрыПередачи, ОписаниеПриЗавершении);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьОперацию" Тогда
		
		ИнтеграцияЗЕРНОКлиент.ОтменитьПоследнююОперацию(Объект.Ссылка);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьПередачуДанных" Тогда
		
		ИнтеграцияЗЕРНОКлиент.ОтменитьПередачу(Объект.Ссылка);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПоказатьПричинуОшибки" Тогда
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Документ", Объект.Ссылка);
		
		ОткрытьФорму(
			"Справочник.ЗЕРНОПрисоединенныеФайлы.Форма.ФормаОшибки",
			ПараметрыОткрытияФормы,
			ЭтотОбъект);
	
	КонецЕсли;
	
КонецПроцедуры

#Область Статус

&НаСервере
Процедура ОбновитьЗаписатьПараметрыОбновленияСтатуса(Отказ, ТекущийОбъект)
	
	Если ПараметрыОбновленияСтатуса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПартииСформированыЧастично И ИдентификаторыИзмененныхСтрок.Количество() Тогда
		
		РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.УдалитьСтатусыПоИдентификатору(
			ТекущийОбъект.Ссылка,
			ИдентификаторыИзмененныхСтрок.ВыгрузитьЗначения());
		
	КонецЕсли;
	
	РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
		ТекущийОбъект.Ссылка,
		ПараметрыОбновленияСтатуса);
	
	ПараметрыОбновленияСтатуса = Неопределено;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыДополненияСтатусаЗЕРНО(Форма)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОбъектРасчета", Форма.Объект);
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Процедура ОбновитьСтатусИПараметрыДополнения(УстановитьПараметрыОбновленияСтатуса = Истина)
	
	Если УстановитьПараметрыОбновленияСтатуса Тогда
		ПараметрыОбновленияСтатуса = ПараметрыОбновленияСтатуса(ПараметрыДополненияСтатусаЗЕРНО(ЭтотОбъект));
	КонецЕсли;
	
	ОбновитьСтатусЗЕРНО(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтатусЗЕРНО(Форма)
	
	Объект = Форма.Объект;
	
	ПараметрыСтатуса = ПараметрыСтатусаДокумента(
		Объект,
		Форма.ПараметрыОбновленияСтатуса);
	
	Форма.СтатусЗЕРНО = ПараметрыСтатуса.СтатусЗЕРНО;
	Форма.СтатусЗЕРНОПредставление = ПараметрыСтатуса.СтатусЗЕРНОПредставление;
	Форма.РедактированиеФормыНеДоступно = ПараметрыСтатуса.РедактированиеФормыНеДоступно;
	Форма.ПартииСформированыЧастично = ПараметрыСтатуса.ПартииСформированыЧастично;
	Форма.ПартииСформированы = ПараметрыСтатуса.ПартииСформированы;
	
	Если Объект.Корректировочный Тогда
		
		Для Каждого СтрокаКорректировки Из Объект.ДанныеКорректировки Цикл
			
			ДанныеПоСтроке = ПараметрыСтатуса.СтатусыПоСтрокам[СтрокаКорректировки.Идентификатор];
			Если ДанныеПоСтроке = Неопределено
				И Не Форма.ПартииСформированыЧастично Тогда
				СтрокаКорректировки.СтатусОбработки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОформлениеСДИЗЗЕРНО.Черновик");
			ИначеЕсли ДанныеПоСтроке <> Неопределено Тогда
				СтрокаКорректировки.СтатусОбработки = ДанныеПоСтроке.СтатусЗЕРНО;
			КонецЕсли;
			
			Если СтрокаКорректировки.СтатусОбработки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОформлениеСДИЗЗЕРНО.Черновик")
				Или СтрокаКорректировки.СтатусОбработки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ПартииСформированы") Тогда
				СтрокаКорректировки.ИндексСтатусаОбработки = 7;
			ИначеЕсли СтрокаКорректировки.СтатусОбработки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ПартииСформированыЧастично") Тогда
				СтрокаКорректировки.ИндексСтатусаОбработки = 5;
			ИначеЕсли Не Форма.СтатусыОбрабатывается.НайтиПоЗначению(СтрокаКорректировки.СтатусОбработки) = Неопределено Тогда
				СтрокаКорректировки.ИндексСтатусаОбработки = 3;
			ИначеЕсли Не Форма.СтатусыОформленоУспешно.НайтиПоЗначению(СтрокаКорректировки.СтатусОбработки) = Неопределено Тогда
				СтрокаКорректировки.ИндексСтатусаОбработки = 1;
			ИначеЕсли Не Форма.СтатусыОформленоСОшибкой.НайтиПоЗначению(СтрокаКорректировки.СтатусОбработки) = Неопределено Тогда
				СтрокаКорректировки.ИндексСтатусаОбработки = 4;
			Иначе
				СтрокаКорректировки.ИндексСтатусаОбработки = 0;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		
		ДанныеПоСтроке = ПараметрыСтатуса.СтатусыПоСтрокам[СтрокаТовары.Идентификатор];
		Если ДанныеПоСтроке = Неопределено
			И Не Форма.ПартииСформированыЧастично Тогда
			СтрокаТовары.СтатусОбработки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОформлениеСДИЗЗЕРНО.Черновик");
		ИначеЕсли ДанныеПоСтроке <> Неопределено Тогда
			СтрокаТовары.СтатусОбработки = ДанныеПоСтроке.СтатусЗЕРНО;
		КонецЕсли;
		
	КонецЦикла;
	
	НастроитьЗависимыеЭлементыФормы(Форма, Форма.Элементы.Товары.ТекущаяСтрока, "СтатусЗЕРНО");
	
КонецПроцедуры

&НаСервере
Функция ПараметрыОбновленияСтатуса(ПараметрыДополненияСтатуса)
	
	Если Не ПартииСформированыЧастично Тогда
		СтатусЗЕРНО = Документы.ОформлениеСДИЗЗЕРНО.СтатусПоУмолчанию();
	КонецЕсли;
	
	ДальнейшиеДействия = Новый Массив;
	ДальнейшиеДействия.Добавить(Документы.ОформлениеСДИЗЗЕРНО.ДальнейшееДействиеПоУмолчанию(ПараметрыДополненияСтатуса));
	
	Возврат РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ВозвращаемоеЗначениеДальнейшиеДействияСтатус(
		СтатусЗЕРНО,
		ДальнейшиеДействия);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПараметрыСтатусаДокумента(ДокументОбъект, ПараметрыОбновленияСтатуса)
	
	Результат = Новый Структура;
	Результат.Вставить("СтатусЗЕРНО");
	Результат.Вставить("СтатусЗЕРНОПредставление");
	Результат.Вставить("РедактированиеФормыНеДоступно",   Ложь);
	Результат.Вставить("ПартииСформированыЧастично",      Ложь);
	Результат.Вставить("ПартииСформированы",              Ложь);
	Результат.Вставить("СтатусыПоСтрокам",                Новый Соответствие());
	
 	Ссылка             = ДокументОбъект.Ссылка;
	МенеджерОбъекта    = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Ссылка);
	СтатусЗЕРНО        = МенеджерОбъекта.СтатусПоУмолчанию();
	ДальнейшееДействие = МенеджерОбъекта.ДальнейшееДействиеПоУмолчанию();
	
	Если ЗначениеЗаполнено(Ссылка)
		И ПараметрыОбновленияСтатуса = Неопределено Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Статусы.Статус КАК Статус,
		|	Статусы.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие1 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие1
		|	КОНЕЦ КАК ДальнейшееДействие1,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие2 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие2
		|	КОНЕЦ КАК ДальнейшееДействие2,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие3 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие3
		|	КОНЕЦ КАК ДальнейшееДействие3
		|ИЗ
		|	РегистрСведений.СтатусыОбъектовСинхронизацииЗЕРНО КАК Статусы
		|ГДЕ
		|	Статусы.ОбъектСинхронизации = &Документ");
		
		Запрос.УстановитьПараметр("Документ",                 Ссылка);
		Запрос.УстановитьПараметр("МассивДальнейшиеДействия", ИнтеграцияЗЕРНО.НеотображаемыеВДокументахДальнейшиеДействия());
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если ЗначениеЗаполнено(Выборка.ИдентификаторСтроки) Тогда
				
				ДанныеПоСтроке = Новый Структура;
				ДанныеПоСтроке.Вставить("СтатусЗЕРНО", Выборка.Статус);
				Результат.СтатусыПоСтрокам.Вставить(Выборка.ИдентификаторСтроки, ДанныеПоСтроке);
				
			Иначе
				
				СтатусЗЕРНО = Выборка.Статус;
				
				ДальнейшееДействие = Новый Массив;
				ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие1);
				ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие2);
				ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие3);
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ПараметрыОбновленияСтатуса <> Неопределено Тогда
		
		СтатусЗЕРНО = ПараметрыОбновленияСтатуса.НовыйСтатус;
		
		ДальнейшееДействие = Новый Массив;
		ДальнейшееДействие.Добавить(ПараметрыОбновленияСтатуса.ДальнейшееДействие1);
		ДальнейшееДействие.Добавить(ПараметрыОбновленияСтатуса.ДальнейшееДействие2);
		ДальнейшееДействие.Добавить(ПараметрыОбновленияСтатуса.ДальнейшееДействие3);
		
	КонецЕсли;
	
	ДопустимыеДействия = Новый Массив;
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.СформируйтеПартии);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОформитеОтказОтГашения);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОформитеКорректировкуСДИЗ);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.АннулируйтеПартии);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.АннулируйтеСДИЗ);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.АннулируйтеОперацию);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеОперацию);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеПередачуДанных);
	
	СтатусЗЕРНОПредставление = ИнтеграцияЗЕРНО.ПредставлениеСтатуса(СтатусЗЕРНО, ДальнейшееДействие, ДопустимыеДействия);
	
	РедактированиеФормыНеДоступно = СтатусЗЕРНО <> Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.Черновик
	                              И СтатусЗЕРНО <> Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОформлениеСДИЗОшибкаПередачи
	                              И СтатусЗЕРНО <> Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.КорректировкаОформленияСДИЗОшибкаОжидаетсяДействие
	                              И СтатусЗЕРНО <> Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.АннулированиеОформленияСДИЗОшибкаПередачи
	                              И СтатусЗЕРНО <> Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ФормированиеПартииОшибкаПередачи;
	
	ПартииСформированыЧастично = СтатусЗЕРНО = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ПартииСформированыЧастично;
	ПартииСформированы = СтатусЗЕРНО = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ПартииСформированы;
	
	Результат.СтатусЗЕРНО                     = СтатусЗЕРНО;
	Результат.СтатусЗЕРНОПредставление        = СтатусЗЕРНОПредставление;
	Результат.РедактированиеФормыНеДоступно   = РедактированиеФормыНеДоступно;
	Результат.ПартииСформированыЧастично      = ПартииСформированыЧастично;
	Результат.ПартииСформированы              = ПартииСформированы;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, ИдентификаторСтроки = Неопределено, СписокРеквизитов = "")
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	ПодразделенияИспользуются = Форма.ПодразделенияИспользуются;
	
	Если СтруктураРеквизитов.Свойство("ДокументОснование")
		Или СтруктураРеквизитов.Свойство("Операция") Тогда
		ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(Форма);
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("СвязанныеДокументы")
		Или Инициализация Тогда
		
		ПараметрыФормированияНадписи = ИнтеграцияЗЕРНОКлиентСервер.ПараметрыПредставленияТабличнойЧастиСвязанныхДокументов();
		ПредставлениеСвязанныхДокументовРеализация = ИнтеграцияЗЕРНОКлиентСервер.СформироватьНадписьПоДаннымТабличнойЧасти(
			Объект.СвязанныеДокументы,
			ПараметрыФормированияНадписи);
			
		Форма.ПредставлениеСвязанныхДокументовРеализация = Новый ФорматированнаяСтрока(
			ПредставлениеСвязанныхДокументовРеализация,,,,
			"ОткрытьОбщуюФормуСвязанныеДокументы");
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("СвязанныеДокументыПрочиеПеревозка")
		Или Инициализация Тогда
		
		ПараметрыФормированияНадписи = ИнтеграцияЗЕРНОКлиентСервер.ПараметрыПредставленияТабличнойЧастиСвязанныхДокументов();
		ПредставлениеСвязанныхДокументовПеревозка = ИнтеграцияЗЕРНОКлиентСервер.СформироватьНадписьПоДаннымТабличнойЧасти(
			Объект.СвязанныеДокументыПрочие,
			ПараметрыФормированияНадписи);
			
		Форма.ПредставлениеПрочихСвязанныхДокументовПеревозка = 
			Новый ФорматированнаяСтрока(ПредставлениеСвязанныхДокументовПеревозка,,,, "ОткрытьОбщуюФормуСвязанныеДокументыПрочиеПеревозка");
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ВидПродукции") Или Инициализация Тогда
		СтруктураРеквизитов.Вставить("Операция");
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ПанельДополнительныеСвойстваСвернута")
		Или Инициализация Тогда
		
		Элементы.ГруппаДанныеКорректировкиПанель.Видимость         = Не Форма.ПанельДополнительныеСвойстваСвернута И Объект.Корректировочный;
		Элементы.ГруппаДанныеКорректировкиПанельСвернута.Видимость = Форма.ПанельДополнительныеСвойстваСвернута И Объект.Корректировочный;
	
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Операция") Или Инициализация Тогда
		
		ЭтоОперацияРФ = Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ОформлениеСДИЗРФ");
		ЭтоИмпорт   = Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ОформлениеСДИЗИмпорт");
		ЭтоЭкспорт  = Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭкспорт");
		ЭтоЭлеватор = Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭлеватор");
		
		Элементы.Перевозка.Видимость  = Не ЭтоЭлеватор;
		Элементы.Приемка.Видимость    = Не ЭтоЭкспорт;
		Элементы.Реализация.Видимость = ЭтоОперацияРФ;
		Элементы.Отгрузка.Видимость   = Не ЭтоИмпорт;
		
		Элементы.ГруппаИмпортЭкспорт.Видимость = Не ЭтоОперацияРФ;
		
		Элементы.ТоварыЛаборатория.Видимость             = ЭтоИмпорт Или ЭтоЭкспорт;
		Элементы.ТоварыНомерПротоколаИспытаний.Видимость = ЭтоИмпорт Или ЭтоЭкспорт;
		Элементы.ТоварыДатаПротоколаИспытаний.Видимость  = ЭтоИмпорт Или ЭтоЭкспорт;
		
		Элементы.ГруппаЭлеватор.Видимость = ЭтоЭлеватор;
		
		Элементы.ТоварыКодТНВЭД.АвтоОтметкаНезаполненного = ЭтоИмпорт Или ЭтоЭкспорт;
		
		СтруктураРеквизитов.Вставить("ФлагиОпераций");
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Перевозка") Или СтруктураРеквизитов.Свойство("Приемка")
		Или СтруктураРеквизитов.Свойство("Реализация") Или СтруктураРеквизитов.Свойство("Отгрузка")
		Или Инициализация Тогда
		СтруктураРеквизитов.Вставить("ФлагиОпераций");
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ФлагиОпераций") Или Инициализация Тогда
		
		ЭтоЗерно = Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Зерно");
		
		ЭтоОперацияРФ = Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ОформлениеСДИЗРФ");
		ЭтоИмпорт   = Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ОформлениеСДИЗИмпорт");
		ЭтоЭкспорт  = Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭкспорт");
		ЭтоЭлеватор = Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭлеватор");
		
		Приемка    = Объект.Приемка;
		Перевозка  = Объект.Перевозка;
		Отгрузка   = Объект.Отгрузка;
		Реализация = Объект.Реализация;
		
		Элементы.Перевозка.Доступность = ЭтоОперацияРФ;
		
		Элементы.Приемка.Доступность  = Не Перевозка И ЭтоОперацияРФ Или (ЭтоЭлеватор И Не Отгрузка);
		Элементы.Отгрузка.Доступность = Не Перевозка И ЭтоОперацияРФ Или (ЭтоЭлеватор И Не Приемка);
		
		Элементы.СтраницаМаршрут.Видимость = Не ЭтоЭлеватор И Перевозка;
		
		РеализацияБезОтгрузки = Реализация И Не (Перевозка Или Отгрузка);
		Элементы.ГруппаРеализация.Видимость = РеализацияБезОтгрузки Или (Реализация И Отгрузка И Не Приемка);
		Элементы.РеализацияПунктОтправленияСтрокой.Видимость = РеализацияБезОтгрузки;
		
		Элементы.ГруппаГрузополучательОсновная.Видимость       = Не ЭтоЭлеватор И Приемка Или Перевозка Или Реализация;
		Элементы.ГрузополучательСтрокой.Видимость              = Не ЭтоЭлеватор И Приемка Или Перевозка;
		Элементы.ПунктНазначенияСопоставленныйОбъект.Видимость = Не ЭтоЭлеватор И Приемка Или Перевозка;
		Элементы.ГруппаПунктНазначения.Видимость               = Не ЭтоЭлеватор И Приемка Или Перевозка;
		Элементы.ЭлеваторПолучатель.Видимость                  = (Не ЭтоЭлеватор И Приемка Или Перевозка) И ЭтоЗерно;
		
		Элементы.СтраницаДополнительно.Видимость = Не ЭтоЭлеватор И (Реализация Или Перевозка Или Отгрузка);
		
		// Для элеватора нет операции реализация.
		Элементы.ПокупательСтрокой.Видимость       = Реализация И (Перевозка Или Приемка И Отгрузка);
		Элементы.ГруппаГПД.Видимость  = Реализация И ЭтоОперацияРФ;
		Элементы.ЗакупкаЕИС.Видимость = Реализация И ЭтоОперацияРФ;
		Элементы.ГруппаЕИС.Видимость  = Реализация И Объект.ЗакупкаЕИС;
		
		Элементы.ПредставлениеСвязанныхДокументовРеализация.Видимость = Реализация;
		
		Элементы.ГруппаГрузоотправительОсновная.Видимость = Не ЭтоЭлеватор И (Перевозка Или Отгрузка);
		Элементы.ГрузоотправительСтрокой.Видимость        = Не ЭтоЭлеватор И (Перевозка Или Отгрузка);
		Элементы.ПунктОтправленияСтрокой.Видимость        = Не ЭтоЭлеватор И (Перевозка Или Отгрузка);
		
		Элементы.ПредставлениеПрочихСвязанныхДокументовПеревозка.Видимость = Не ЭтоЭлеватор 
			И (Перевозка Или Отгрузка Или Приемка);
		
		Элементы.ГруппаЭлеватор.Видимость               = ЭтоЭлеватор И Приемка;
		Элементы.ГруппаЭлеваторПеремещение.Видимость = ЭтоЭлеватор И Объект.ПеремещениеПартийЗерна;
		Элементы.ТоварыНоваяПартия.Видимость         = ЭтоЭлеватор И Приемка;
		
		СтруктураРеквизитов.Вставить("ДокументыСертификации");
		СтруктураРеквизитов.Вставить("Подразделение");
		
	КонецЕсли;
	
	Если Инициализация Или СтруктураРеквизитов.Свойство("Подразделение") Тогда
		
		ЭтоЭлеватор = Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭлеватор");
		
		Приемка    = Объект.Приемка;
		Перевозка  = Объект.Перевозка;
		Отгрузка   = Объект.Отгрузка;
		Реализация = Объект.Реализация;
		
		РеализацияБезОтгрузки = Реализация И Не (Перевозка Или Отгрузка);
		
		Элементы.Подразделение.Видимость = ПодразделенияИспользуются;
		
		Элементы.РеализацияПодразделениеПокупателя.Видимость = (РеализацияБезОтгрузки Или (Реализация И Отгрузка И Не Приемка))
			И ПодразделенияИспользуются И Форма.ТипПокупателя = 0;
		Элементы.ПодразделениеГрузополучателя.Видимость      = Не ЭтоЭлеватор И Приемка Или Перевозка
			И ПодразделенияИспользуются И Форма.ТипГрузополучателя = 0;
		Элементы.ПодразделениеПокупателя.Видимость = Реализация И (Перевозка Или Приемка И Отгрузка)
			И ПодразделенияИспользуются И Форма.ТипПокупателя = 0;
		Элементы.ПодразделениеГрузоотправителя.Видимость     = Не ЭтоЭлеватор И (Перевозка Или Отгрузка)
			И ПодразделенияИспользуются И Форма.ТипГрузоотправителя = 0;
		Элементы.ПодразделениеВладельцаПартии.Видимость      = ЭтоЭлеватор И Приемка
			И ПодразделенияИспользуются И Форма.ТипВладельцаПартии = 0;
		
		ОбновитьПодсказкиВводаПодразделения(Форма);
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ПеремещениеПартийЗерна") Или Инициализация Тогда
		Элементы.ГруппаЭлеваторПеремещение.Видимость = Объект.ПеремещениеПартийЗерна;
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ЗакупкаЕИС") Или Инициализация Тогда
		Элементы.ГруппаЕИС.Видимость = Объект.ЗакупкаЕИС;
		Элементы.ГосударственныйКонтракт.Видимость = Форма.ГосударственныеКонтрактыИспользуются;
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Товары") Или Инициализация Тогда
		
		СтруктураРеквизитов.Вставить("Лаборатория");
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Лаборатория")
		Или СтруктураРеквизитов.Свойство("ТоварыЛаборатория") Тогда
		
		Элементы.ТоварыЛаборатория.АвтоОтметкаНезаполненного = Не ЗначениеЗаполнено(Объект.Лаборатория);
		
		ОтметкаНезаполненного = Ложь;
		Если Не ЗначениеЗаполнено(Объект.Лаборатория) Тогда
			Для Каждого СтрокаТовары Из Объект.Товары Цикл
				Если Не ЗначениеЗаполнено(СтрокаТовары.Лаборатория) Тогда
					ОтметкаНезаполненного = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Элементы.Лаборатория.АвтоОтметкаНезаполненного = ОтметкаНезаполненного;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ВладелецПартии") Или Инициализация Тогда
		Элементы.ДоговорХраненияПартий.Доступность = ЗначениеЗаполнено(Объект.ВладелецПартии);
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("СтатусЗЕРНО") Тогда
		
		РедактированиеФормыНеДоступно = Форма.СтатусЗЕРНО <> ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОформлениеСДИЗЗЕРНО.Черновик")
		                          И Форма.СтатусЗЕРНО <> ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОформлениеСДИЗОшибкаПередачи")
		                          И Форма.СтатусЗЕРНО <> ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОформлениеСДИЗЗЕРНО.КорректировкаОформленияСДИЗОшибкаОжидаетсяДействие")
		                          И Форма.СтатусЗЕРНО <> ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОформлениеСДИЗЗЕРНО.АннулированиеОформленияСДИЗОшибкаПередачи")
		                          И Форма.СтатусЗЕРНО <> ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ФормированиеПартииОшибкаПередачи");
		
		Форма.РедактированиеФормыНеДоступно = РедактированиеФормыНеДоступно;
		
		ЗависимыеОтСтатусаЗЕРНО = Новый Массив;
		
		Если Форма.ПартииСформированыЧастично Или Форма.ПартииСформированы Тогда
				
			Исключения = Новый Массив;
			Если Форма.ПартииСформированыЧастично Тогда
				
				Исключения.Добавить(Элементы.ТоварыПартия.Имя);
				Исключения.Добавить(Элементы.ТоварыКоличество.Имя);
				Исключения.Добавить(Элементы.ТоварыКоличествоЗЕРНО.Имя);
				Исключения.Добавить(Элементы.ТоварыКоличество.Имя);
				
				ИнтеграцияИСКлиентСервер.УстановитьДоступностьЭлементовФормы(
					Форма, Исключения, Истина);
				
				ИнтеграцияИСКлиентСервер.УстановитьДоступностьЭлементовГруппыФормыРекурсивно(
					Элементы.СтраницаТовары, Не Форма.РедактированиеФормыНеДоступно, Исключения);
				
			Иначе
				
				ЗависимыеОтСтатусаЗЕРНО.Добавить("СтраницаТовары");
				ЗависимыеОтСтатусаЗЕРНО.Добавить("ТоварыПодменюЗаполнить");
				
			КонецЕсли;
			
			Исключения.Добавить(Элементы.ГруппаГрузополучательОсновная.Имя);
			Исключения.Добавить(Элементы.ГруппаПунктНазначения.Имя);
			Исключения.Добавить(Элементы.ГруппаСвязанныеДокументы.Имя);
			Исключения.Добавить(Элементы.ГруппаОснование.Имя);
			Исключения.Добавить(Элементы.ГруппаКомментарий.Имя);
			Исключения.Добавить(Элементы.Ответственный.Имя);
			
			ИнтеграцияИСКлиентСервер.УстановитьДоступностьЭлементовФормы(
				Форма, Исключения, Истина);
			
			ИнтеграцияИСКлиентСервер.УстановитьДоступностьЭлементовГруппыФормыРекурсивно(
				Элементы.СтраницаОсновное, Не Форма.РедактированиеФормыНеДоступно, Исключения);
			
		Иначе
			
			ЗависимыеОтСтатусаЗЕРНО.Добавить("ГруппаНередактируемыеПослеОтправкиРеквизитыОсновное");
			ЗависимыеОтСтатусаЗЕРНО.Добавить("СтраницаМаршрут");
			ЗависимыеОтСтатусаЗЕРНО.Добавить("СтраницаДополнительно");
			ЗависимыеОтСтатусаЗЕРНО.Добавить("СтраницаТовары");
			ЗависимыеОтСтатусаЗЕРНО.Добавить("ТоварыПодменюЗаполнить");
			
		КонецЕсли;
		
		ИнтеграцияИСКлиентСервер.УстановитьДоступностьЭлементовФормы(Форма,
			ЗависимыеОтСтатусаЗЕРНО, Не Форма.РедактированиеФормыНеДоступно);
		
		Элементы.АннулироватьСДИЗ.Видимость        = Не Объект.Корректировочный;
		Элементы.АннулироватьСДИЗИПартии.Видимость = Не Объект.Корректировочный;
		Элементы.АннулироватьПартии.Видимость      = Не Объект.Корректировочный;
		
		ДоступноАннулированиеСДИЗ = Форма.СтатусЗЕРНО <> ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОформлениеСДИЗЗЕРНО.Черновик")
			И Форма.СтатусЗЕРНО <> ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОформлениеСДИЗАннулировано");
		Элементы.АннулироватьСДИЗ.Доступность = ДоступноАннулированиеСДИЗ;
		Элементы.АннулироватьСДИЗИПартии.Доступность = ДоступноАннулированиеСДИЗ;
		Элементы.АннулироватьПартии.Доступность = Форма.СтатусЗЕРНО <> ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОформлениеСДИЗЗЕРНО.Черновик")
			И Форма.СтатусЗЕРНО <> ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ПартияАннулирована");
		
	КонецЕсли;
	
КонецПроцедуры

#Область ОчисткаЗависимыхОтОперацииРеквизитов

&НаКлиенте
Процедура ОчиститьЗависимыеРеквизитыОбъекта()
	
	ЭтоСДИЗЭлеватор = Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭлеватор");
	ЭтоОперацияРФ   = Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ОформлениеСДИЗРФ");
	
	Если Не ЭтоСДИЗЭлеватор Тогда
		
		ОчиститьРеквизитыОперацииЭлеватор();
		
		Если ЭтоОперацияРФ Тогда
			ОчиститьРеквизитыИмпортЭкспорт();
			Если Не Объект.ЗакупкаЕИС Тогда
				ОчиститьРеквизитыЗакупкаЕИС();
			КонецЕсли;
		Иначе
			ОчиститьРеквизитыГПД();
			ОчиститьРеквизитыЗакупкаЕИС();
		КонецЕсли;
		
		Если Не Объект.Реализация Тогда
			Объект.Покупатель = Неопределено;
			ПокупательСтрокой = "";
			Объект.СвязанныеДокументы.Очистить();
			ОчиститьРеквизитыГПД();
			ОчиститьРеквизитыЗакупкаЕИС();
		КонецЕсли;
		
		Если Не Объект.Перевозка И Не Объект.Приемка И Не Объект.Отгрузка Тогда
			ОчиститьРеквизитыПеревозка();
		КонецЕсли;
		
		Если Не Объект.Перевозка И Не Объект.Отгрузка Тогда
			ОчиститьРеквизитыОтгрузка();
		КонецЕсли;
		
		Если Не Объект.Перевозка И Не Объект.Приемка Тогда
			ОчиститьРеквизитыПриемка();
		КонецЕсли;
		
		Если Объект.ВидПродукции <> ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Зерно") Тогда
			Объект.ЭлеваторПолучатель = Неопределено;
		КонецЕсли;
		
	Иначе
		
		ОчиститьРеквизитыОперацииСХТП();
		
		Если Не Объект.Приемка Тогда
			ОчиститьРеквизитыОперацииЭлеватор()
		ИначеЕсли Не Объект.ПеремещениеПартийЗерна Тогда
			ОчиститьРеквизитыЭлеваторПеремещениеПартий();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРеквизитыОперацииЭлеватор()
	
	Объект.ДоговорХраненияПартий  = Неопределено;
	Объект.ПеремещениеПартийЗерна = Ложь;
	Объект.ВладелецПартии         = Неопределено;
	ВладелецПартииСтрокой         = "";
	
	ОчиститьРеквизитыЭлеваторПеремещениеПартий();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРеквизитыЭлеваторПеремещениеПартий()
	
	Объект.ДатаПеремещения                    = "";
	Объект.МестоХраненияПриПеремещении        = "";
	Объект.МестоХраненияПриПеремещенииСтрокой = "";
	Объект.ТипХраненияПриПеремещении          = Неопределено;
	Объект.УсловияХраненияПриПеремещении      = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРеквизитыОперацииСХТП()
	
	Объект.СвязанныеДокументы.Очистить();
	Объект.СвязанныеДокументыПрочие.Очистить();
	Объект.ТранспортныеСредства.Очистить();
	Объект.МестаПерегрузки.Очистить();
	
	ОчиститьРеквизитыГПД();
	ОчиститьРеквизитыЗакупкаЕИС();
	ОчиститьРеквизитыИмпортЭкспорт();
	ОчиститьРеквизитыПеревозка();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРеквизитыГПД()
	
	Объект.ДатаГПД    = "";
	Объект.НомерГПД   = "";
	Объект.ЗакупкаЕИС = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРеквизитыЗакупкаЕИС()
	
	Объект.ДатаГосКонтракта        = "";
	Объект.НомерГосКонтракта       = "";
	Объект.НомерЗакупкиЕИС         = "";
	Объект.ГосударственныйКонтракт = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРеквизитыИмпортЭкспорт()
	
	Объект.НомерПротоколаИспытаний   = "";
	Объект.ДатаПротоколаИспытаний    = "";
	Объект.НомерТаможеннойДекларации = "";
	Объект.ДатаКонтрактаВЭД          = "";
	Объект.НомерКонтрактаВЭД         = "";
	Объект.ДатаДопСоглашенияВЭД      = "";
	Объект.НомерДопСоглашенияВЭД     = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРеквизитыПеревозка()
	
	ОчиститьРеквизитыОтгрузка();
	ОчиститьРеквизитыПриемка();
	
	Объект.ТранспортныеСредства.Очистить();
	Объект.МестаПерегрузки.Очистить();
	Объект.СвязанныеДокументыПрочие.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРеквизитыОтгрузка()
	
	Объект.Грузоотправитель = Неопределено;
	ГрузоотправительСтрокой = "";
	Если Не Объект.Отгрузка И Не Объект.Реализация Тогда
		Объект.ПунктОтправления = Неопределено;
		ПунктОтправленияСтрокой = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРеквизитыПриемка()
	
	Объект.Грузополучатель                     = Неопределено;
	ГрузополучательСтрокой                     = "";
	Объект.ПунктНазначенияСопоставленныйОбъект = Неопределено;
	Объект.ПунктНазначения                     = "";
	Объект.ПунктНазначенияСтрокой              = "";
	Объект.ЭлеваторПолучатель                  = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область ИзменениеДанных

&НаКлиенте
Функция СтруктураРеквизитовИзменяемыхНаСервере()
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ТоварыПартия");
	СтруктураВозврата.Вставить("ТоварыПартияИзменение");
	СтруктураВозврата.Вставить("ТоварыНоменклатура");
	СтруктураВозврата.Вставить("ТоварыКоличествоЗЕРНО");
	СтруктураВозврата.Вставить("ТоварыКоличество");
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Процедура ОбработкаРезультатаПодбораПартийНаСервере(Партия, ИзменяемаяСтрока = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Партия", Партия);
	Запрос.УстановитьПараметр("Регистратор", Объект.Ссылка);
	Запрос.УстановитьПараметр("ЭтоНовый",    Объект.Ссылка.Пустая());
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Остатки.Партия                      КАК Партия,
	|	КлючиПартийЗЕРНО.ОКПД2              КАК ОКПД2,
	|	КлючиПартийЗЕРНО.КодТНВЭД           КАК КодТНВЭД,
	|	РеестрПартийЗЕРНО.ЦельИспользования КАК ЦельИспользования,
	|
	|	МАКСИМУМ(Остатки.КоличествоЗЕРНООстаток)                                  КАК КоличествоОстатокПартииЗЕРНО,
	|	МАКСИМУМ(Остатки.КоличествоЗЕРНООстаток - Остатки.ВОбработкеЗЕРНООстаток) КАК КоличествоЗЕРНО,
	|
	|	МАКСИМУМ(ЕСТЬNULL(КлассификаторНСИ.Наименование, """")) КАК ОКПД2Наименование,
	|	МАКСИМУМ(ЕСТЬNULL(СоответствиеПартийЗЕРНО.Номенклатура, НЕОПРЕДЕЛЕНО))   КАК Номенклатура,
	|	МАКСИМУМ(ЕСТЬNULL(СоответствиеПартийЗЕРНО.Характеристика, НЕОПРЕДЕЛЕНО)) КАК Характеристика,
	|	МАКСИМУМ(ЕСТЬNULL(СоответствиеПартийЗЕРНО.Серия, НЕОПРЕДЕЛЕНО))          КАК Серия
	|ИЗ
	|	РегистрНакопления.ОстаткиПартийЗЕРНО.Остатки(, Партия В (&Партия)) КАК Остатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КлючиПартийЗЕРНО КАК КлючиПартийЗЕРНО
	|		ПО Остатки.Партия = КлючиПартийЗЕРНО.Партия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РеестрПартийЗЕРНО КАК РеестрПартийЗЕРНО
	|		ПО Остатки.Партия = РеестрПартийЗЕРНО.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторНСИЗЕРНО КАК КлассификаторНСИ
	|		ПО КлючиПартийЗЕРНО.ОКПД2 = КлассификаторНСИ.Идентификатор
	|		И КлассификаторНСИ.ВидКлассификатора = ЗНАЧЕНИЕ(Перечисление.ВидыКлассификаторовЗЕРНО.ОКПД2)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеПартийЗЕРНО КАК СоответствиеПартийЗЕРНО
	|		ПО СоответствиеПартийЗЕРНО.Партия = Остатки.Партия
	|СГРУППИРОВАТЬ ПО
	|	Остатки.Партия,
	|	КлючиПартийЗЕРНО.ОКПД2,
	|	КлючиПартийЗЕРНО.КодТНВЭД,
	|	РеестрПартийЗЕРНО.ЦельИспользования";
	
	ТаблицаПодобранныхПартий = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаПартии Из ТаблицаПодобранныхПартий Цикл
		
		СписокСвойств = ЗаполняемыеСвойстваПартии();
		
		Если ИзменяемаяСтрока = Неопределено Тогда
			ИзменяемаяСтрока = Объект.Партии.Добавить();
		КонецЕсли;
		
		ИзменяемаяСтрока.Партия = СтрокаПартии.Партия;
		Если ЗначениеЗаполнено(СтрокаПартии.Номенклатура) Тогда
			СписокСвойств.Добавить("Номенклатура");
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаПартии.Характеристика) Тогда
			СписокСвойств.Добавить("Характеристика");
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаПартии.Серия) Тогда
			СписокСвойств.Добавить("Серия");
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ИзменяемаяСтрока, СтрокаПартии, СтрСоединить(СписокСвойств, ","));
		ИзменяемаяСтрока.ОКПД2Представление = ИнтеграцияЗЕРНОКлиентСервер.ПредставлениеОКПД2(
			СтрокаПартии.ОКПД2Наименование, СтрокаПартии.ОКПД2);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗаполняемыеСвойстваПартии()
	
	СписокСвойств = Новый Массив;
	СписокСвойств.Добавить("ОКПД2");
	СписокСвойств.Добавить("КодТНВЭД");
	СписокСвойств.Добавить("ЦельИспользования");
	СписокСвойств.Добавить("КоличествоЗЕРНО");
	СписокСвойств.Добавить("КоличествоОстатокПартииЗЕРНО");
	
	Возврат СписокСвойств;
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеНаСервере(Результат, ДополнительныеПараметры, КэшированныеЗначения)
	
	ИмяОбновляемогоПоля = ?(ТипЗнч(ДополнительныеПараметры) = Тип("Строка"), ДополнительныеПараметры, ДополнительныеПараметры.ИмяПоля);
	
	МассивПолейДляНастройки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИмяОбновляемогоПоля);
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ИдентификаторСтроки")
		И ДополнительныеПараметры.ИдентификаторСтроки <> Неопределено Тогда
		ИзменяемаяСтрока = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	Иначе
		ИзменяемаяСтрока = Элементы.Товары.ТекущаяСтрока;
	КонецЕсли;
	
	Если ИмяОбновляемогоПоля = "ТоварыПартия"
		Или ИмяОбновляемогоПоля = "ТоварыПартияИзменение" Тогда
		
		Если ИмяОбновляемогоПоля = "ТоварыПартияИзменение" Тогда
			ОбработкаРезультатаПодбораПартийНаСервере(Результат, ИзменяемаяСтрока);
		КонецЕсли;
		
		ИнтеграцияЗЕРНО.ЗаполнитьСлужебныеРеквизитыНоменклатуры(ЭтотОбъект, ИзменяемаяСтрока);
		ИнтеграцияЗЕРНОПереопределяемый.ЗаполнитьКоличествоПоКоличествуЗЕРНО(ИзменяемаяСтрока);
		
		ДополнительныеПараметры.Вставить("ОбновитьКэшВидовСельхозКультур", Истина);
		Если ЗначениеЗаполнено(ИзменяемаяСтрока.Номенклатура) Тогда
			ДополнительныеПараметры.Вставить("ОбновитьКэшСертификации", Истина);
		КонецЕсли;
		
		УстановитьПредставлениеДокументовСертификацииПоСтроке(ЭтотОбъект, ИзменяемаяСтрока);
		
	КонецЕсли;
	
	Если ИмяОбновляемогоПоля = "ТоварыПартия"
		Или ИмяОбновляемогоПоля = "ТоварыПартияИзменение"
		Или ИмяОбновляемогоПоля = "ТоварыНоменклатура"
		Или ИмяОбновляемогоПоля = "ТоварыКоличествоЗЕРНО"
		Или ИмяОбновляемогоПоля = "ТоварыКоличество" Тогда
		
		Если ПартииСформированыЧастично
			И ИзменяемаяСтрока.СтатусОбработки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ФормированиеПартииОшибкаПередачи") Тогда
			
			ИзменяемаяСтрока.СтатусОбработки = Неопределено;
			Если ИдентификаторыИзмененныхСтрок.НайтиПоЗначению(ИзменяемаяСтрока.Идентификатор) = Неопределено Тогда
				ИдентификаторыИзмененныхСтрок.Добавить(ИзменяемаяСтрока.Идентификатор);
			КонецЕсли;
			
		КонецЕсли;
		
		ОбновитьСтатусИПараметрыДополнения();
		
		Если ИмяОбновляемогоПоля = "ТоварыНоменклатура" Тогда
			ДополнительныеПараметры.Вставить("ОбновитьКэшСертификации", Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьКэшСертификации = Ложь;
	Если ДополнительныеПараметры.Свойство("ОбновитьКэшСертификации", ОбновитьКэшСертификации)
		И ОбновитьКэшСертификации Тогда
		
		Если ЗначениеЗаполнено(ИзменяемаяСтрока.Номенклатура) Тогда
			ЗаполнитьСертфикацию(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИзменяемаяСтрока));
		Иначе
			СтруктураОтбора = Новый Структура("ИдентификаторСтрокиТоваров", ИзменяемаяСтрока.Идентификатор);
			СтрокиДанныхДокумента = Объект.ДокументыСертификации.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаТаблицы Из СтрокиДанныхДокумента Цикл   
				Объект.ДокументыСертификации.Удалить(СтрокаТаблицы);
			КонецЦикла;
		КонецЕсли;
		
		УстановитьПредставлениеДокументовСертификацииПоСтроке(ЭтотОбъект, ИзменяемаяСтрока);
		
	КонецЕсли;
	
	ОбновитьКэшВидовСельхозКультур = Ложь;
	Если ДополнительныеПараметры.Свойство("ОбновитьКэшВидовСельхозКультур", ОбновитьКэшВидовСельхозКультур)
		И ОбновитьКэшВидовСельхозКультур Тогда
		
		ТаблицаОКПД2ТНВЭД = РегистрыСведений.ВидыСельскохозяйственныхКультурЗЕРНО.ДанныеТНВЭДПоОКПД2(ИзменяемаяСтрока.ОКПД2);
		ИнтеграцияЗЕРНО.ОбновитьКэшВидовСельхозКультур(ЭтотОбъект, ТаблицаОКПД2ТНВЭД);
		ИнтеграцияЗЕРНО.ЗаполнитьТНВЭДПоВидуСельхозКультур(ИзменяемаяСтрока.КодТНВЭД, ИзменяемаяСтрока.ОКПД2, ТаблицаОКПД2ТНВЭД);
		
	КонецЕсли;
	
	Если МассивПолейДляНастройки.Количество() Тогда
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Строка") Тогда
			НастроитьЗависимыеЭлементыФормы(ЭтотОбъект,, СтрСоединить(МассивПолейДляНастройки, ","));
		Иначе
			Если ДополнительныеПараметры.Свойство("ИдентификаторСтроки") Тогда
				НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, ДополнительныеПараметры.ИдентификаторСтроки, СтрСоединить(МассивПолейДляНастройки, ","));
			Иначе
				НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, Элементы.Товары.ТекущаяСтрока, СтрСоединить(МассивПолейДляНастройки, ","));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанные(Результат, ДополнительныеПараметры) Экспорт
	
	ИмяОбновляемогоПоля = ?(ТипЗнч(ДополнительныеПараметры) = Тип("Строка"), ДополнительныеПараметры, ДополнительныеПараметры.ИмяПоля);
	
	Если Результат = Неопределено Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	МассивПолейДляНастройки = Новый Массив;
	МассивПолейДляНастройки.Добавить(ИмяОбновляемогоПоля);
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ИдентификаторСтроки")
		И ДополнительныеПараметры.ИдентификаторСтроки <> Неопределено Тогда
		ИзменяемаяСтрока = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	ИначеЕсли ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ПоВсемСтрокам")
		И ДополнительныеПараметры.ПоВсемСтрокам Тогда
		ИзменяемаяСтрока = Неопределено;
	Иначе
		ИзменяемаяСтрока = Элементы.Товары.ТекущиеДанные;
	КонецЕсли;
	
	Если ИмяОбновляемогоПоля = "ТоварыНоменклатура" Тогда
		
		СобытияФормЗЕРНОКлиентПереопределяемый.ПриИзмененииНоменклатуры(
			ЭтотОбъект, ИзменяемаяСтрока, КэшированныеЗначения, ПараметрыУказанияСерий);
		
		ОКПД2ПриИзмененииНаКлиенте(ИзменяемаяСтрока.ОКПД2, ИзменяемаяСтрока, ДополнительныеПараметры);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	Если ИмяОбновляемогоПоля = "ТоварыОКПД2" Тогда
		
		ОКПД2ПриИзмененииНаКлиенте(Результат, ИзменяемаяСтрока, ДополнительныеПараметры);
		Модифицированность = Истина;
		
	КонецЕсли;
	
	Если ИмяОбновляемогоПоля = "ТоварыХарактеристика" Тогда
		
		СобытияФормЗЕРНОКлиентПереопределяемый.ПриИзмененииХарактеристики(
			ЭтотОбъект, ИзменяемаяСтрока, КэшированныеЗначения);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	Если ИмяОбновляемогоПоля = "ТоварыСерия" И ПараметрыУказанияСерий <> Неопределено Тогда
		
		СобытияФормЗЕРНОКлиентПереопределяемый.ПриИзмененииСерии(
			ЭтотОбъект, ИзменяемаяСтрока, КэшированныеЗначения, ПараметрыУказанияСерий);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	Если ИмяОбновляемогоПоля = "ТоварыКоличество" Тогда
		
		СобытияФормЗЕРНОКлиентПереопределяемый.ПриИзмененииКоличества(
			ЭтотОбъект, ИзменяемаяСтрока, ЕдиницаИзмеренияКилограмм, КэшированныеЗначения);
		
		Если ДополнительныеПараметры.Свойство("ИдентификаторИсходнойСтроки") Тогда
			
			ИсходнаяСтрока  = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторИсходнойСтроки);
			СтруктураОтбора = Новый Структура("ИдентификаторСтрокиТоваров", ИсходнаяСтрока.Идентификатор);
			
			СтрокиДанных = Объект.ДокументыСертификации.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаСертификации Из СтрокиДанных Цикл
				НоваяСтрока = Объект.ДокументыСертификации.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСертификации); 
				НоваяСтрока.ИдентификаторСтрокиТоваров = ИзменяемаяСтрока.Идентификатор;
			КонецЦикла;
			
			УстановитьПредставлениеДокументовСертификацииПоСтроке(ЭтотОбъект, ИзменяемаяСтрока);
			
		КонецЕсли;
		
		ЗаполнитьДанныеДляКорректировкиСДИЗ(ИзменяемаяСтрока);
		Модифицированность = Истина;
		
	КонецЕсли;
	
	Если ИмяОбновляемогоПоля = "ТоварыКоличествоЗЕРНО" Тогда
		
		ЗаполнитьДанныеДляКорректировкиСДИЗ(ИзменяемаяСтрока);
		СобытияФормЗЕРНОКлиентПереопределяемый.ПриИзмененииКоличестваВКилограммах(
			ЭтотОбъект, ИзменяемаяСтрока, ЕдиницаИзмеренияКилограмм, КэшированныеЗначения);
		
	КонецЕсли;
	
	ОбновитьКэшВидовСельхозКультур = Ложь;
	
	Если СтруктураРеквизитовИзменяемыхНаСервере().Свойство(ИмяОбновляемогоПоля)
		Или ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
			И ДополнительныеПараметры.Свойство("ОбновитьКэшВидовСельхозКультур", ОбновитьКэшВидовСельхозКультур) И ОбновитьКэшВидовСельхозКультур Тогда
		ОбновитьДанныеНаСервере(Результат, ДополнительныеПараметры, КэшированныеЗначения);
		Возврат;
	КонецЕсли;
	
	Если ИмяОбновляемогоПоля = "ВидПродукции" Тогда
		
		ИнтеграцияЗЕРНОКлиентСервер.УстановитьПараметрыВыбораНоменклатуры(ЭтотОбъект, Объект.ВидПродукции);
		
		КэшСертификации.Очистить();
		
		ЗаполнитьДоступныеОперации(ЭтотОбъект);
		Если ЗначениеЗаполнено(Объект.Операция)
			И Элементы.Операция.СписокВыбора.НайтиПоЗначению(Объект.Операция) = Неопределено Тогда
			Объект.Операция = Элементы.Операция.СписокВыбора.Получить(0).Значение;
			ПриИзмененииОперации();
			ПредыдущаяОперация = Объект.Операция;
			МассивПолейДляНастройки.Добавить("Операция");
		КонецЕсли;
		
		Если Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродуктыПереработкиЗерна")
			И ЗначениеЗаполнено(Объект.ЭлеваторПолучатель) Тогда
			Объект.ПунктНазначения = "";
			Объект.ПунктНазначенияСтрокой = "";
			Объект.ПунктНазначенияСопоставленныйОбъект = Неопределено;
		КонецЕсли;
		
		ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(ЭтотОбъект);
		
	КонецЕсли;
	
	Если ИмяОбновляемогоПоля = "Операция" Тогда
		
		ПриИзмененииОперации();
		ПредыдущаяОперация = Объект.Операция;
		
		ЗаполнитьСтатусУказанияДокументовСертификации(ЭтотОбъект);
		
		ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(ЭтотОбъект);
		
	КонецЕсли;
	
	Если ИмяОбновляемогоПоля = "Реализация" Или ИмяОбновляемогоПоля = "Отгрузка"
		Или ИмяОбновляемогоПоля = "Перевозка" Или ИмяОбновляемогоПоля = "Приемка" Тогда
		
		ЭтоОперацияРФ = Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ОформлениеСДИЗРФ");
		ЭтоЭлеватор = Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭлеватор");
		
		Если ИмяОбновляемогоПоля = "Перевозка" И ЭтоОперацияРФ Тогда
			Объект.Отгрузка = Ложь;
			Объект.Приемка  = Ложь;
		Иначе
			Если Не ЭтоОперацияРФ Тогда
				Объект.Реализация = Ложь;
			КонецЕсли;
			Если ЭтоЭлеватор Тогда
				Если ИмяОбновляемогоПоля = "Приемка" Тогда
					Объект.Отгрузка = Ложь;
				ИначеЕсли ИмяОбновляемогоПоля = "Отгрузка" Тогда
					Объект.Приемка = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьСтатусУказанияДокументовСертификации(ЭтотОбъект);
		
		ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(ЭтотОбъект);
		
	КонецЕсли;
	
	Если ИмяОбновляемогоПоля = "СвязанныеДокументы" И Результат <> Неопределено И ТипЗнч(Результат) = Тип("ДанныеФормыКоллекция") Тогда
		
		Объект.СвязанныеДокументы.Очистить();
		Для Каждого СтрокаЗаполнения Из Результат Цикл
			НоваяСтрокаСвязанныхДокументов = Объект.СвязанныеДокументы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСвязанныхДокументов, СтрокаЗаполнения);
		КонецЦикла;
		Модифицированность = Истина;
		
	КонецЕсли;
	
	Если ИмяОбновляемогоПоля = "СвязанныеДокументыПрочиеПеревозка" И Результат <> Неопределено И ТипЗнч(Результат) = Тип("ДанныеФормыКоллекция") Тогда
		
		Объект.СвязанныеДокументыПрочие.Очистить();
		
		Для Каждого СтрокаЗаполнения Из Результат Цикл
			НоваяСтрокаСвязанныхДокументов = Объект.СвязанныеДокументыПрочие.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСвязанныхДокументов, СтрокаЗаполнения);
		КонецЦикла;
		Модифицированность = Истина;
		
	КонецЕсли;
	
	Если ИмяОбновляемогоПоля = "ДокументыСертификации"
		И Результат <> Неопределено И ТипЗнч(Результат) = Тип("Массив") Тогда
		
		ИдентификаторСтрокиТоваров = ДополнительныеПараметры.ИдентификаторСтрокиТоваров;
		
		СтруктураОтбора = Новый Структура("ИдентификаторСтрокиТоваров", ИдентификаторСтрокиТоваров);
		СтрокиДанных = Объект.ДокументыСертификации.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаТаблицы Из СтрокиДанных Цикл
			Объект.ДокументыСертификации.Удалить(СтрокаТаблицы);
		КонецЦикла;
		
		ИзменяемаяСтрока = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
		
		Для Каждого СтрокаЗаполнения Из Результат Цикл
			
			НоваяСтрока = Объект.ДокументыСертификации.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗаполнения);
			НоваяСтрока.ИдентификаторСтрокиТоваров = ИдентификаторСтрокиТоваров;
			
			ОбновитьКэшСертификацииКлиентСервер(ЭтотОбъект, НоваяСтрока, ИзменяемаяСтрока.Номенклатура);
			
		КонецЦикла;
		
		УстановитьПредставлениеДокументовСертификацииПоСтроке(ЭтотОбъект, ИзменяемаяСтрока);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	Если Объект.Корректировочный Тогда
		
		Если МассивОбновляемыхПолейДляРасчетаКорректировкиСДИЗ().Найти(ИмяОбновляемогоПоля) <> Неопределено Тогда
			ЗаполнитьДанныеДляКорректировкиСДИЗ(ИзменяемаяСтрока);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Строка") Тогда
		НастроитьЗависимыеЭлементыФормы(ЭтотОбъект,, СтрСоединить(МассивПолейДляНастройки, ","));
	Иначе
		Если ДополнительныеПараметры.Свойство("ИдентификаторСтроки") Тогда
			НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, ДополнительныеПараметры.ИдентификаторСтроки, СтрСоединить(МассивПолейДляНастройки, ","));
		Иначе
			НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, Элементы.Товары.ТекущаяСтрока, СтрСоединить(МассивПолейДляНастройки, ","));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидПродукцииПриЗавершении(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Объект.ВидПродукции = ДополнительныеПараметры;
		Объект.Товары.Очистить();
		
		Элементы.Товары.ТекущаяСтрока = Неопределено;
		
		Модифицированность = Истина;
		
		ОбновитьДанные(
			Объект.ВидПродукции,
			Новый Структура("ИмяПоля, ИдентификаторСтроки", "ВидПродукции", Неопределено));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОпределитьТипОрганизацияКонтрагент(ТипВладельца, ОрганизацияКонтрагент)
	
	ТипВладельца = ИнтеграцияЗЕРНО.ОпределитьТипОрганизацияКонтрагент(ОрганизацияКонтрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияДляКорректировочногоДокумента(Элемент, Значение, ИдентификаторСтроки = Неопределено)
	
	Если Не Объект.Корректировочный Тогда
		Возврат;
	КонецЕсли;
	
	Если ИдентификаторСтроки = Неопределено Тогда
		СтруктураДанных = Новый Структура("ИмяПоля, ИдентификаторСтроки, ПоВсемСтрокам", Элемент.Имя, ИдентификаторСтроки, Истина);
	Иначе
		СтруктураДанных = Новый Структура("ИмяПоля, ИдентификаторСтроки, ПоВсемСтрокам", Элемент.Имя, ИдентификаторСтроки, Ложь);
	КонецЕсли;
	
	ОбновитьДанные(Значение, СтруктураДанных);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПодсказкиВвода(Форма)
	
	ПредставлениеОрганизации = Строка(Форма.Объект.Организация);
	Форма.Элементы.ГрузоотправительСтрокой.ПодсказкаВвода = ПредставлениеОрганизации;
	
	Если Форма.Объект.Реализация Тогда
		Форма.Элементы.ГрузополучательСтрокой.ПодсказкаВвода = Строка(Форма.Объект.Покупатель);
	Иначе
		Форма.Элементы.ГрузополучательСтрокой.ПодсказкаВвода = ПредставлениеОрганизации;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПодсказкиВводаПодразделения(Форма)
	
	ПредставлениеПодразделения = Строка(Форма.Объект.Подразделение);
	
	Если ЗначениеЗаполнено(Форма.Объект.Грузоотправитель) Тогда
		Форма.Элементы.ПодразделениеГрузоотправителя.ПодсказкаВвода = "";
	Иначе
		Форма.Элементы.ПодразделениеГрузоотправителя.ПодсказкаВвода = ПредставлениеПодразделения;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.Объект.Грузополучатель) Тогда
		Форма.Элементы.ПодразделениеГрузополучателя.ПодсказкаВвода = "";
	ИначеЕсли Форма.Объект.Реализация Тогда
		Форма.Элементы.ПодразделениеГрузополучателя.ПодсказкаВвода = Строка(Форма.Объект.ПодразделениеПокупателя);
	Иначе
		Форма.Элементы.ПодразделениеГрузополучателя.ПодсказкаВвода = ПредставлениеПодразделения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт
	
	Если НоваяСтрока <> Неопределено Тогда
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		НоваяСтрока.Идентификатор = Строка(Новый УникальныйИдентификатор);
		
		ИдентификаторИсходнойСтроки = ТекущиеДанные.ПолучитьИдентификатор();
		ОбновитьДанные(ТекущиеДанные.Количество, Новый Структура(
			"ИмяПоля, ИдентификаторСтроки", "ТоварыКоличество", ИдентификаторИсходнойСтроки));
		ОбновитьДанные(НоваяСтрока.Количество, Новый Структура(
			"ИмяПоля, ИдентификаторСтроки, ИдентификаторИсходнойСтроки",
			"ТоварыКоличество", НоваяСтрока.ПолучитьИдентификатор(), ИдентификаторИсходнойСтроки));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ВыборМаршрутаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Перевозчик = Результат.Перевозчик;
	Подразделение = Результат.Подразделение;
	
	Если ДополнительныеПараметры.ДобавитьСтроку Тогда
		
		СтрокаМаршрут = Маршрут.Добавить();
		СтрокаМаршрут.Перевозчик    = Перевозчик;
		СтрокаМаршрут.Подразделение = Подразделение;
		
	Иначе
		
		СтрокаМаршрут = Маршрут.НайтиПоИдентификатору(ДополнительныеПараметры.ВыбраннаяСтрока);
		
		Если ДополнительныеПараметры.КлючПеревозчика.Перевозчик <> Результат.Перевозчик
			Или ДополнительныеПараметры.КлючПеревозчика.Подразделение <> Результат.Подразделение Тогда
			
			ОчиститьДанныеМаршрута(
				ДополнительныеПараметры.КлючПеревозчика.Перевозчик, 
				ДополнительныеПараметры.КлючПеревозчика.Подразделение);
			
			СтрокаМаршрут.Перевозчик    = Перевозчик;
			СтрокаМаршрут.Подразделение = Подразделение;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОчиститьДанныеМаршрута(Перевозчик, Подразделение);
	
	Для Каждого СтрокаДанных Из Результат.ТранспортныеСредства Цикл
		
		НоваяСтрока = Объект.ТранспортныеСредства.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
		НоваяСтрока.Перевозчик = Перевозчик;
		НоваяСтрока.Подразделение = Подразделение;
		
	КонецЦикла;
	
	УстановитьПредставлениеТранспортныхСредствПоСтроке(ЭтотОбъект, СтрокаМаршрут);
	
	Для Каждого СтрокаДанных Из Результат.МестаПерегрузки Цикл
		
		НоваяСтрока = Объект.МестаПерегрузки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
		НоваяСтрока.Перевозчик    = Перевозчик;
		НоваяСтрока.Подразделение = Подразделение;
		
	КонецЦикла;
	
	УстановитьПредставлениеМестПерегрузкиПоСтроке(ЭтотОбъект, СтрокаМаршрут);
	ОбработатьИзмененияДляКорректировочногоДокумента(Элементы.Маршрут, Объект.МестаПерегрузки);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПредставлениеТранспортныхСредствПоСтроке(Форма, СтрокаМаршрут)
	
	СтруктураПоиска = Новый Структура("Перевозчик, Подразделение", СтрокаМаршрут.Перевозчик, СтрокаМаршрут.Подразделение);
	СтрокиТранспортныхСредств = Форма.Объект.ТранспортныеСредства.НайтиСтроки(СтруктураПоиска);
	
	ПараметрыФормированияНадписи = ИнтеграцияЗЕРНОКлиентСервер.ПараметрыПредставленияТабличнойЧастиТранспортныеСредства();
	
	ПредставлениеТранспортныхСредств = ИнтеграцияЗЕРНОКлиентСервер.СформироватьНадписьПоДаннымТабличнойЧасти(
		СтрокиТранспортныхСредств,
		ПараметрыФормированияНадписи);
	
	СтрокаМаршрут.ТранспортныеСредстваПредставление = ПредставлениеТранспортныхСредств;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПредставлениеМестПерегрузкиПоСтроке(Форма, СтрокаМаршрут)
	
	СтруктураПоиска = Новый Структура("Перевозчик, Подразделение", СтрокаМаршрут.Перевозчик, СтрокаМаршрут.Подразделение);
	СтрокиМестПерегрузки = Форма.Объект.МестаПерегрузки.НайтиСтроки(СтруктураПоиска);
	
	ПараметрыФормированияНадписи = ИнтеграцияЗЕРНОКлиентСервер.ПараметрыПредставленияТабличнойЧастиМестаПерегрузки("АдресСтрокой");
	
	ПредставлениеМестПерегрузки = ИнтеграцияЗЕРНОКлиентСервер.СформироватьНадписьПоДаннымТабличнойЧасти(
		СтрокиМестПерегрузки,
		ПараметрыФормированияНадписи);
		
	СтрокаМаршрут.МестаПерегрузкиПредставление = ПредставлениеМестПерегрузки;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЦветТекстаПоля(ИмяЦвета = "ЦветОсобогоТекста")
	
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		Возврат ЦветаСтиля[ИмяЦвета];
	#Иначе
		Возврат ОбщегоНазначенияКлиент.ЦветСтиля(ИмяЦвета);
	#КонецЕсли
	
КонецФункции

&НаКлиенте
Процедура ОКПД2ПриИзмененииНаКлиенте(ОКПД2, ИзменяемаяСтрока, ДополнительныеПараметры)
	
	Если ЗначениеЗаполнено(ОКПД2) Тогда
		
		НайденноеЗначениеТНВЭД = ИнтеграцияЗЕРНОКлиент.КодТНВЭДПоДаннымКеша(ИзменяемаяСтрока.ОКПД2, ИзменяемаяСтрока.КодТНВЭД, ЭтотОбъект);
		Если НайденноеЗначениеТНВЭД = Неопределено Тогда
			ДополнительныеПараметры.Вставить("ОбновитьКэшВидовСельхозКультур", Истина);
		Иначе
			ИзменяемаяСтрока.КодТНВЭД = НайденноеЗначениеТНВЭД;
		КонецЕсли;
		
	Иначе
		
		ИзменяемаяСтрока.ОКПД2Представление = "";
		ИзменяемаяСтрока.КодТНВЭД           = "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОстаткиПартий()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаПартий.Партия КАК Партия
	|ПОМЕСТИТЬ ТаблицаПартий
	|ИЗ 
	|	&ТаблицаПартий КАК ТаблицаПартий
	|ИНДЕКСИРОВАТЬ ПО
	|Партия
	|;
	|ВЫБРАТЬ
	|	ТаблицаПартий.Партия КАК Партия,
	|	РеестрПартийЗЕРНО.ЦельИспользования КАК ЦельИспользования,
	|	ЕстьNULL(ОстаткиПартийЗЕРНО.КоличествоЗЕРНООстаток, 0) КАК КоличествоОстатокПартииЗЕРНО
	|ИЗ
	|	ТаблицаПартий КАК ТаблицаПартий
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиПартийЗЕРНО.Остатки(,Партия В (ВЫБРАТЬ Партия Из ТаблицаПартий)) КАК ОстаткиПартийЗЕРНО
	|		ПО ТаблицаПартий.Партия = ОстаткиПартийЗЕРНО.Партия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РеестрПартийЗЕРНО КАК РеестрПартийЗЕРНО
	|		ПО ТаблицаПартий.Партия = РеестрПартийЗЕРНО.Ссылка
	|";
	
	ТаблицаПартий = Объект.Товары.Выгрузить(,"Партия");
	Запрос.УстановитьПараметр("ТаблицаПартий", ТаблицаПартий);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Результат.Индексы.Добавить("Партия");
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииОперации()
	
	Если ПредыдущаяОперация = Объект.Операция Тогда
		Возврат;
	КонецЕсли;
	
	СДИЗЭлеватор = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭлеватор");
	БылаОперацияСДИЗЭлеватор = ПредыдущаяОперация = СДИЗЭлеватор;
	
	Если Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ОформлениеСДИЗИмпорт") Тогда
		
		Объект.Реализация = Ложь;
		Объект.Отгрузка   = Ложь;
		Объект.Перевозка  = Истина;
		Если БылаОперацияСДИЗЭлеватор Тогда
			Объект.Приемка = Ложь;
		КонецЕсли;
		
	ИначеЕсли Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭкспорт") Тогда
		
		Объект.Реализация = Ложь;
		Объект.Приемка    = Ложь;
		Объект.Перевозка  = Истина;
		Если БылаОперацияСДИЗЭлеватор Тогда
			Объект.Отгрузка = Ложь;
		КонецЕсли;
		
	ИначеЕсли Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ОформлениеСДИЗРФ") Тогда
		
		Если Объект.Перевозка Или БылаОперацияСДИЗЭлеватор Тогда
			Объект.Приемка  = Ложь;
			Объект.Отгрузка = Ложь;
		КонецЕсли;
		
	ИначеЕсли Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭлеватор") Тогда
		
		Объект.Реализация = Ложь;
		Объект.Перевозка  = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоСтрокеДанныхКорректировок()
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Объект.Корректировочный Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("КорректируемыйСДИЗ", ТекущиеДанные.КорректируемыйСДИЗ);
	Элементы.ДанныеКорректировки.ОтборСтрок = Новый ФиксированнаяСтруктура(ПараметрыОтбора);
	
	ОтобразитьСтраницуРезультатовКорректировки();
	
КонецПроцедуры

#Область ОбработкаПодбораНоменклатуры

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаПодбораНоменклатуры(Результат, ДополнительныеПараметры) Экспорт
	
	ОбработкаРезультатаПодбораНоменклатурыНаСервере(Результат, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаПодбораНоменклатурыНаСервере(ВыбранноеЗначение, КэшированныеЗначения)
	
	ПараметрыЗаполнения = ИнтеграцияЗЕРНО.ПараметрыЗаполненияТабличнойЧастиТовары();
	ПараметрыЗаполнения.Вставить("ЗаполнитьКодТНВЭД",        Истина);
	ПараметрыЗаполнения.Вставить("ЗаполнитьКодОКПД2",        Истина);
	ПараметрыЗаполнения.Вставить("ЗаполнитьКоличествоЗЕРНО", Истина);
	ПараметрыЗаполнения.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий);
	
	ДобавленныеСтроки = Новый Массив;
	
	СобытияФормЗЕРНОПереопределяемый.ОбработкаРезультатаПодбораНоменклатуры(
		ЭтотОбъект, ВыбранноеЗначение, ПараметрыЗаполнения, КэшированныеЗначения, ДобавленныеСтроки);
	
	Для Каждого СтрокаТовара Из ДобавленныеСтроки Цикл
		СтрокаТовара.Идентификатор = Новый УникальныйИдентификатор();
	КонецЦикла;
	
	Если ДобавленныеСтроки.Количество() > 0 Тогда
		ЗаполнитьСертфикацию(ДобавленныеСтроки);
		ПриСозданииЧтенииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЗаполненияПартий

#Область ЗаполнениеПартий

&НаКлиенте
Процедура ЗаполнитьОтборПартийПоШапкеДокумента(ПараметрыФормы)
	
	ПараметрыФормы.ВидПродукции = Объект.ВидПродукции;
	Если Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭлеватор") Тогда
		ПараметрыФормы.ОрганизацияВладелецПартии = Объект.ВладелецПартии;
		ПараметрыФормы.ПодразделениеВладелецПартии = Объект.ПодразделениеВладельцаПартии;
	Иначе
		ПараметрыФормы.ОрганизацияВладелецПартии = Объект.Организация;
		ПараметрыФормы.ПодразделениеВладелецПартии = Объект.Подразделение;
	КонецЕсли;
	ПараметрыФормы.Грузоотправитель = Объект.ПунктОтправления;
	Если Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭлеватор") Тогда
		ПараметрыФормы.ОрганизацияЭлеватор = Объект.Организация;
	ИначеЕсли Объект.Перевозка Тогда
		ПараметрыФормы.ОрганизацияЭлеватор = ПредопределенноеЗначение("Справочник.КлючиРеквизитовОрганизацийЗЕРНО.ПустаяСсылка");
	КонецЕсли;
	ПараметрыФормы.ЭтоЭкспорт = Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭкспорт");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОтборПартийПоСтрокеДокумента(ПараметрыФормы)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ОКПД2) Тогда
		ПараметрыФормы.ОКПД2 = ТекущиеДанные.ОКПД2;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	ПараметрыФормы.Номенклатура = ТекущиеДанные.Номенклатура;
	ПараметрыФормы.Характеристика = ТекущиеДанные.Характеристика;
	ПараметрыФормы.Серия = ТекущиеДанные.Серия;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКомандуЗаполнитьПартии(ПартииКорректировки = Ложь)
	
	ОчиститьСообщения();
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Организация""'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстСообщения,
			Объект.Ссылка, 
			"Объект.Организация",,
			Отказ);
	КонецЕсли;
	
	Если (Объект.Перевозка Или Объект.Отгрузка)
		И Не ЗначениеЗаполнено(Объект.Грузоотправитель)
		И Не ЗначениеЗаполнено(Объект.Организация)  Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Грузоотправитель""'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстСообщения,
			Объект.Ссылка, 
			"ГрузоотправительСтрокой",,
			Отказ);
	КонецЕсли;
	
	Если Не Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭлеватор")
			И Не Объект.Перевозка Тогда
		ТекстСообщения = НСтр("ru = 'Для реализации без перемещения автоподбор партий недоступен'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстСообщения,
			Объект.Ссылка,
			"Организация",,
			Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СообщениеПользователю = ЗаполнитьПартииНаСервере(ПартииКорректировки);
	
	ПоказатьОповещениеПользователя(
		СообщениеПользователю.ЗаголовокСообщения,,
		СообщениеПользователю.ТекстСообщения,
		СообщениеПользователю.КартинкаСообщения);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьПартииНаСервере(ПартииКорректировки = Ложь)
	
	СписокСтрок = Новый Массив;
	
	Если ПартииКорректировки Тогда
		
		Для Каждого ИдентификаторСтроки Из Элементы.ДанныеКорректировки.ВыделенныеСтроки Цикл
			ДанныеСтроки = Объект.ДанныеКорректировки.НайтиПоИдентификатору(ИдентификаторСтроки);
			СписокСтрок.Добавить(ДанныеСтроки);
		КонецЦикла;
		
	Иначе
		
		Для Каждого ИдентификаторСтроки Из Элементы.Товары.ВыделенныеСтроки Цикл
			ДанныеСтроки = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
			СписокСтрок.Добавить(ДанныеСтроки);
		КонецЦикла;
		
	КонецЕсли;
	
	РезультатЗаполнения = Документы.ОформлениеСДИЗЗЕРНО.ЗаполнитьПартии(Объект, СписокСтрок, Истина, ПартииКорректировки);
	
	Если РезультатЗаполнения.Свойство("ОбновитьСтатус")
		И РезультатЗаполнения.ОбновитьСтатус Тогда
		ОбновитьСтатусИПараметрыДополнения();
		ЗаполнитьСтатусУказанияДокументовСертификации(ЭтотОбъект);
		
		Если Не ПартииКорректировки Тогда
			Для Каждого СтрокаТаблицы Из СписокСтрок Цикл
				УстановитьПредставлениеДокументовСертификацииПоСтроке(ЭтотОбъект, СтрокаТаблицы);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатЗаполнения;
	
КонецФункции

#КонецОбласти

#Область ВыборПартии

&НаКлиенте
Процедура ОбработатьВыборПартии(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если Не ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		Или Не ДополнительныеПараметры.Свойство("ТекущиеДанные")
		Или Не ДополнительныеПараметры.Свойство("ИмяОбновляемогоПоля") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные       = ДополнительныеПараметры.ТекущиеДанные;
	ИмяОбновляемогоПоля = ДополнительныеПараметры.ИмяОбновляемогоПоля;
	
	ТекущиеДанные.Партия = ВыбранноеЗначение.Партия;
	ТекущиеДанные.КоличествоОстатокПартииЗЕРНО = 0;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущиеДанные, "ЦельИспользования") Тогда
		ТекущиеДанные.ЦельИспользования = Неопределено;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из ВыбранноеЗначение Цикл 
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущиеДанные, КлючИЗначение.Ключ) И
			Не ЗначениеЗаполнено(ТекущиеДанные[КлючИЗначение.Ключ]) Тогда
			ТекущиеДанные[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьДанные(ВыбранноеЗначение,
		Новый Структура("ИмяПоля, ИдентификаторСтроки", ИмяОбновляемогоПоля, ТекущиеДанные.ПолучитьИдентификатор()));
		
	Если ДополнительныеПараметры.Свойство("ПартииКорректировки") И ДополнительныеПараметры.ПартииКорректировки Тогда
		ОбновитьДанныеКорректировкиНаСервере(ИмяОбновляемогоПоля, ТекущиеДанные.ПолучитьИдентификатор());
	Иначе
	
		ПараметрыОтбора = Новый Структура("ИдентификаторСтрокиТоваров", ТекущиеДанные.Идентификатор);
		СтрокиДокументовСертификации = Объект.ДокументыСертификации.НайтиСтроки(ПараметрыОтбора);
		
		Если СтрокиДокументовСертификации.Количество() = 0 Тогда
			ЗаполнитьПервичныеДокументыСертификации(ТекущиеДанные.ПолучитьИдентификатор());
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПервичныеДокументыСертификации(ИдентификаторСтроки)
	
	СтрокаТаблицы = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
	СтрокиТовары  = Новый Массив();
	СтрокиТовары.Добавить(СтрокаТаблицы);
	
	Документы.ОформлениеСДИЗЗЕРНО.ЗаполнитьПервичныеДокументыСертификации(Объект, СтрокиТовары);
	ЗаполнитьСтатусУказанияДокументовСертификации(ЭтотОбъект);
	УстановитьПредставлениеДокументовСертификацииПоСтроке(ЭтотОбъект, СтрокаТаблицы);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область РаботаСПолямимСоставногоТипа

&НаСервереБезКонтекста
Функция ИменаЭлементовПолейСоставногоТипа()
	
	Возврат "ГрузоотправительСтрокой,ГрузополучательСтрокой,ВладелецПартииСтрокой,
	        |ПокупательСтрокой,РеализацияПокупательСтрокой,
	        |ПунктОтправленияСтрокой,РеализацияПунктОтправленияСтрокой";
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииПолеСоставногоТипа(Элемент)
	
	Если Элемент.Имя = "ПокупательСтрокой" Или Элемент.Имя = "РеализацияПокупательСтрокой" Тогда
		ОбновитьПодсказкиВвода(ЭтотОбъект);
		ОпределитьТипОрганизацияКонтрагент(ТипПокупателя, Объект.Покупатель);
		ОбработатьИзмененияДляКорректировочногоДокумента(Элемент, Объект.Покупатель);
		Если ТипПокупателя = 1 Тогда
			Объект.ПодразделениеПокупателя = Неопределено;
		КонецЕсли;
	ИначеЕсли Элемент.Имя = "ГрузополучательСтрокой" Тогда
		ПриИзмененииГрузополучателя();
		ОпределитьТипОрганизацияКонтрагент(ТипГрузополучателя, Объект.Грузополучатель);
		Если ТипГрузополучателя = 1 Тогда
			Объект.ПодразделениеГрузополучателя = Неопределено;
		КонецЕсли;
	ИначеЕсли Элемент.Имя = "ВладелецПартииСтрокой" Тогда
		Элементы.ДоговорХраненияПартий.Доступность = ЗначениеЗаполнено(Объект.ВладелецПартии);
		ОпределитьТипОрганизацияКонтрагент(ТипВладельцаПартии, Объект.ВладелецПартии);
		Если ТипВладельцаПартии = 1 Тогда
			Объект.ПодразделениеВладельцаПартии = Неопределено;
		КонецЕсли;
	ИначеЕсли Элемент.Имя = "ГрузоотправительСтрокой" Тогда
		ПриИзмененииГрузоотправителя();
		ОпределитьТипОрганизацияКонтрагент(ТипГрузоотправителя, Объект.Грузоотправитель);
		Если ТипВладельцаПартии = 1 Тогда
			Объект.ПодразделениеГрузоотправителя = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект,, "Подразделение");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеСоставногоТипаОкончаниеВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	СобытияФормИСКлиент.ПолеСоставногоТипаОкончаниеВыбора(ЭтотОбъект, Результат, ДополнительныеПараметры);
	
	Если Результат <> Неопределено Тогда
		Элемент = ДополнительныеПараметры.Элемент;
		ПриИзмененииПолеСоставногоТипа(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеСоставногоТипаПриИзменении(Элемент)
	
	СобытияФормИСКлиент.ПолеСоставногоТипаПриИзменении(ЭтотОбъект, Элемент);
	
	ПриИзмененииПолеСоставногоТипа(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеСоставногоТипаОткрытие(Элемент, СтандартнаяОбработка)
	
	СобытияФормИСКлиент.ПолеСоставногоТипаОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеСоставногоТипаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СобытияФормИСКлиент.ПолеСоставногоТипаОбработкаВыбора(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")
		И Не ВыбранноеЗначение.Свойство("Действие") Тогда
		ПриИзмененииПолеСоставногоТипа(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеСоставногоТипаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СобытияФормИСКлиент.ПолеСоставногоТипаАвтоПодбор(ЭтотОбъект,
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область КонтактнаяИнформация

&НаСервере
Процедура ИнициализироватьПоляКонтактнойИнформации()
	
	ВидКонтактнойИнформации = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначенияПолейКонтактнойИнформацииСервер(Знач Представление, Знач ВидКонтактнойИнформации)
	
	Результат = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(
		Представление, ВидКонтактнойИнформации);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПунктНазначения

&НаКлиенте
Процедура ПриИзмененииГрузополучателя()
	
	Если ЗначениеЗаполнено(Объект.Грузополучатель)
		И Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Зерно") Тогда
		Элеватор = ЭлеваторПоГрузополучателю(Объект.Грузополучатель);
		Если Элеватор <> Неопределено Тогда
			Объект.ЭлеваторПолучатель = Элеватор;
		КонецЕсли;
	КонецЕсли;
	
	ОбработатьИзмененияДляКорректировочногоДокумента(Элементы.ГрузополучательСтрокой, Объект.Грузополучатель);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииГрузоотправителя()
	
	ОбработатьИзмененияДляКорректировочногоДокумента(Элементы.ГрузоотправительСтрокой, Объект.Грузоотправитель);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭлеваторПоГрузополучателю(Грузополучатель)
	
	ИННКПП = РаботаСКонтрагентамиИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(Грузополучатель);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИНН", ИННКПП.ИНН);
	Запрос.УстановитьПараметр("КПП", ИННКПП.КПП);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РеестрЭлеваторов.Ссылка
	|ИЗ
	|	Справочник.РеестрЭлеваторовЗЕРНО КАК РеестрЭлеваторов
	|ГДЕ
	|	РеестрЭлеваторов.ИНН = &ИНН
	|	И РеестрЭлеваторов.КПП = &КПП";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ПунктНазначенияОкончаниеВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляЗаполнения = ИнтеграцияЗЕРНОВызовСервера.ДанныеАдресаОбъекта(Результат);
	
	Объект.ПунктНазначения = ДанныеДляЗаполнения.Адрес;
	Объект.ПунктНазначенияСтрокой = ДанныеДляЗаполнения.ПредставлениеАдреса;
	Объект.ПунктНазначенияСопоставленныйОбъект = Результат;
	
КонецПроцедуры

&НаКлиенте
Функция ПунктНазначенияСписокАвоподбораПоПокупателю()
	
	СписокАвтоподбора = Новый СписокЗначений;
	
	Если ЗначениеЗаполнено(Объект.Покупатель) Тогда
		ДанныеДляЗаполнения = ИнтеграцияЗЕРНОВызовСервера.ДанныеАдресаОбъекта(Объект.Покупатель);
		Если ЗначениеЗаполнено(ДанныеДляЗаполнения.ПредставлениеАдреса) Тогда
			СписокАвтоподбора.Добавить(ДанныеДляЗаполнения, ДанныеДляЗаполнения.ПредставлениеАдреса);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Грузополучатель)
		И Объект.Грузополучатель <> Объект.Покупатель Тогда
		ДанныеДляЗаполнения = ИнтеграцияЗЕРНОВызовСервера.ДанныеАдресаОбъекта(Объект.Грузополучатель);
		Если ЗначениеЗаполнено(ДанныеДляЗаполнения.ПредставлениеАдреса) Тогда
			СписокАвтоподбора.Добавить(ДанныеДляЗаполнения, ДанныеДляЗаполнения.ПредставлениеАдреса);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из ПунктНазначенияСписокАвтоподбораОбщий("") Цикл
		СписокАвтоподбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
	Возврат СписокАвтоподбора;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПунктНазначенияСписокАвтоподбораОбщий(ТекстДляАвтоПодбора)
	
	ИсключаемыеТипы = Новый Массив;
	ИсключаемыеТипы.Добавить(Тип("СправочникСсылка.РеестрЭлеваторовЗЕРНО"));
	
	СписокАвтоподбора = ИнтеграцияИСВызовСервера.СписокАвтоподбораПоОписаниюТипов(
		Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ПунктНазначенияЗЕРНО.Тип,, ИсключаемыеТипы),
		ТекстДляАвтоПодбора);
		
	Возврат СписокАвтоподбора;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПунктНазначенияСписокАвтоподбораПоЭлеватору(ТекстДляАвтоПодбора, Элеватор)
	
	СписокАвтоподбора = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Элеватор);
	Запрос.УстановитьПараметр("СтрокаПоиска", "%"+ТекстДляАвтоПодбора+"%");
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеестрЭлеваторовМестаХранения.Ссылка        КАК ВладелецАдреса,
	|	РеестрЭлеваторовМестаХранения.МестоХранения КАК ПредставлениеАдреса
	|ИЗ
	|	Справочник.РеестрЭлеваторовЗЕРНО.МестаХранения КАК РеестрЭлеваторовМестаХранения
	|ГДЕ
	|	РеестрЭлеваторовМестаХранения.Ссылка = &Ссылка
	|	И РеестрЭлеваторовМестаХранения.МестоХранения ПОДОБНО &СтрокаПоиска
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПредставлениеАдреса";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПодстрокаПоиска = НРег(ТекстДляАвтоПодбора);
	
	Пока Выборка.Следующий() Цикл
		Данные = Новый Структура;
		Данные.Вставить("ПредставлениеАдреса", Выборка.ПредставлениеАдреса);
		Данные.Вставить("ВладелецАдреса",      Выборка.ВладелецАдреса);
		
		МассивСтрок = Новый Массив;
		СобытияФормИС.ФорматироватьСтрокуДляСпискаВыбора(Данные.ПредставлениеАдреса, ПодстрокаПоиска, МассивСтрок);
		
		СписокАвтоподбора.Добавить(Данные, Новый ФорматированнаяСтрока(МассивСтрок));
	КонецЦикла;
	
	Возврат СписокАвтоподбора;
	
КонецФункции

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПредставлениеДокументовСертификацииПоСтроке(Форма, СтрокаТовары)
	
	ПараметрыОтбора = Новый Структура("ИдентификаторСтрокиТоваров", СтрокаТовары.Идентификатор);
	СтрокиДокументовСертификации = Форма.Объект.ДокументыСертификации.НайтиСтроки(ПараметрыОтбора);
	
	ПараметрыФормированияНадписи = ИнтеграцияЗЕРНОКлиентСервер.ПараметрыПредставленияТабличнойЧастиСвязанныхДокументов();
	СтрокаТовары.ДокументыСертификацииПредставление = ИнтеграцияЗЕРНОКлиентСервер.СформироватьНадписьПоДаннымТабличнойЧасти(
		СтрокиДокументовСертификации,
		ПараметрыФормированияНадписи);
	
	ЗаполнитьСтатусУказанияДокументовСертификации(Форма, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаТовары));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТребуетсяЗаполнениеДокументовСертификации(Форма)
	
	Возврат Форма.Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ОформлениеСДИЗРФ") И Форма.Объект.Реализация
		Или Форма.Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ОформлениеСДИЗИмпорт")
		Или Форма.Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭкспорт")
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСтатусУказанияДокументовСертификации(Форма, КоллекцияСтрок = Неопределено)
	
	Объект = Форма.Объект;
	ПараметрыОтбора = Новый Структура("ТипДокумента, ИдентификаторСтрокиТоваров");
	Если КоллекцияСтрок = Неопределено Тогда
		КоллекцияСтрок = Объект.Товары;
	КонецЕсли;
	
	Для Каждого СтрокаТовары Из КоллекцияСтрок Цикл
		
		СтрокаТовары.СтатусУказанияДокументовСертификации = 0;
		Если ТребуетсяЗаполнениеДокументовСертификации(Форма) Тогда
			ПараметрыОтбора.ТипДокумента = ПредопределенноеЗначение("Справочник.КлассификаторНСИЗЕРНО.ДокументНаПартиюДекларацияСоответствия");
			ПараметрыОтбора.ИдентификаторСтрокиТоваров = СтрокаТовары.Идентификатор;
			Если Объект.ДокументыСертификации.НайтиСтроки(ПараметрыОтбора).Количество() = 0 Тогда
				СтрокаТовары.СтатусУказанияДокументовСертификации = 1;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеГосударственногоКонтракта(ГосударственныйКонтракт)
	
	Результат = Новый Соответствие();
	ИнтеграцияЗЕРНОПереопределяемый.ПриОпределенииРеквизитовГосКонтракта(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ГосударственныйКонтракт), Результат);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОчиститьДанныеМаршрута(Перевозчик, Подразделение)
	
	СвязанныеТаблицы = Новый Массив;
	СвязанныеТаблицы.Добавить("ТранспортныеСредства");
	СвязанныеТаблицы.Добавить("МестаПерегрузки");
	
	ПараметрыОтбора = Новый Структура("Перевозчик,Подразделение");
	ПараметрыОтбора.Перевозчик    = Перевозчик;
	ПараметрыОтбора.Подразделение = Подразделение;
	
	Для Каждого ИмяТабличнойЧасти Из СвязанныеТаблицы Цикл
		
		НайденныеСтроки = Объект[ИмяТабличнойЧасти].НайтиСтроки(ПараметрыОтбора);
		Для Каждого Строка Из НайденныеСтроки Цикл
			Объект[ИмяТабличнойЧасти].Удалить(Строка);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция КэшПеревозчикиИБ(Перевозчики, ДанныеСтроки = Неопределено)
	
	Результат  = Новый Массив;
	
	Для Каждого КлючИЗначение Из Перевозчики Цикл
		
		Для Каждого ЭлементКоллекции Из КлючИЗначение.Значение Цикл
			СтрокаДанных = Новый Структура();
			СтрокаДанных.Вставить("Перевозчик", КлючИЗначение.Ключ);
			СтрокаДанных.Вставить("Подразделение", ЭлементКоллекции);
			Если ДанныеСтроки <> Неопределено
				И КлючИЗначение.Ключ = ДанныеСтроки.Перевозчик
				И ЭлементКоллекции = ДанныеСтроки.Подразделение Тогда
				СтрокаДанных.Вставить("ТекущаяСтрока", Истина);
			Иначе
				СтрокаДанных.Вставить("ТекущаяСтрока", Ложь);
			КонецЕсли;
			Результат.Добавить(СтрокаДанных);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ИнициализироватьПараметрыОповещенияФормыПунктыМаршрута()
	
	ПараметрыОповещения = Новый Структура();
	ПараметрыОповещения.Вставить("ДобавитьСтроку",  Ложь);
	ПараметрыОповещения.Вставить("КлючПеревозчика", Неопределено);
	ПараметрыОповещения.Вставить("ВыбраннаяСтрока", Неопределено);
	
	Возврат ПараметрыОповещения;
	
КонецФункции

&НаКлиенте
Процедура СоздатьДокументКорректировкиСДИЗ()
	
	ИнтеграцияЗЕРНОКлиент.ОткрытьФормуСозданияДокумента(
		ИнтеграцияИСКлиентСервер.ИмяОбъектаИзИмениФормы(ЭтотОбъект),
		Объект.Ссылка,
		ЭтотОбъект,,
		Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросКорректироватьОформлениеСДИЗЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроверитьЗаполнение() Тогда
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		РазблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	Если Не Модифицированность И Объект.Проведен Тогда
		СоздатьДокументКорректировкиСДИЗ();
	КонецЕсли;
	
КонецПроцедуры

#Область Сертификация

&НаСервереБезКонтекста
Функция ПредставлениеСертификации(ВидСертификации, НомерСертификации, ДатаСертификации)
	
	ШаблонПредставлениеСертификата = "%1 №%2 от %3";
	
	Если ЗначениеЗаполнено(ВидСертификации)
		И ЗначениеЗаполнено(НомерСертификации)
		И ЗначениеЗаполнено(ДатаСертификации) Тогда
		
		ПредставлениеСертификата = СтрШаблон(ШаблонПредставлениеСертификата,
			ВидСертификации, НомерСертификации, Формат(ДатаСертификации, "ДФ=dd.MM.yyyy"));
		
	КонецЕсли;
	
	Возврат ПредставлениеСертификата;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИнициализироватьДанныеЗаполненияСертификации()
	
	Результат = Новый Структура;
	Результат.Вставить("ТипДокумента");
	Результат.Вставить("Номер");
	Результат.Вставить("Дата");
	Результат.Вставить("СрокДействия");
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СоздатьКэшСертификацииСервер()
	
	СписокНоменклатуры = Новый Массив;
	ДанныеЗаполнения = ИнициализироватьДанныеЗаполненияСертификации();
	
	Отбор = Новый Структура("ИдентификаторСтрокиТоваров");
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		
		Отбор.ИдентификаторСтрокиТоваров = СтрокаТовары.Идентификатор;
		СтрокиДокументовСертификации = Объект.ДокументыСертификации.НайтиСтроки(Отбор);
		Для Каждого СтрокаСертификации Из СтрокиДокументовСертификации Цикл 
			ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, СтрокаСертификации);
			ОбновитьКэшСертификацииКлиентСервер(ЭтотОбъект, ДанныеЗаполнения, СтрокаТовары.Номенклатура);
		КонецЦикла;
		
		СписокНоменклатуры.Добавить(СтрокаТовары.Номенклатура);
		
	КонецЦикла;
	
	Если СписокНоменклатуры.Количество() Тогда
		ДобавитьСертификатыНоменклатурыВКэш(ЭтотОбъект, СписокНоменклатуры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеДляКорректировкиСДИЗ(ИзменяемаяСтрока = Неопределено)
	
	Если Не Объект.Корректировочный Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторИзменяемойСтроки = Неопределено;
	
	Если Не ИзменяемаяСтрока = Неопределено Тогда
		ИдентификаторИзменяемойСтроки = ИзменяемаяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
	РассчитатьПострочныйХешКорректировочногоСДИЗ(, ИдентификаторИзменяемойСтроки);
	РассчитатьСтрокиДанныхКорректировкиПоСДИЗ(ИдентификаторИзменяемойСтроки);
	ОбновитьСтатусИПараметрыДополнения();
	
	ОтобразитьСтраницуРезультатовКорректировки();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьПострочныйХешКорректировочногоСДИЗ(РассчитатьИсходныйХеш = Ложь, ИдентификаторИзменяемойСтроки = Неопределено)
	
	Документы.ОформлениеСДИЗЗЕРНО.РассчитатьХешСуммыПоДокументуКорректировочныйСДИЗ(Объект,,
		РассчитатьИсходныйХеш,
		ИдентификаторИзменяемойСтроки);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСтрокиДанныхКорректировкиПоСДИЗ(ИдентификаторИзменяемойСтроки = Неопределено)
	
	Документы.ОформлениеСДИЗЗЕРНО.ЗаполнитьДанныеКорректировкиПоДокументуКорректировочныйСДИЗ(
		Объект,, ТоварыПогашенияИОтказы, ОтказыОтПогашенияКАннулированию, ИдентификаторИзменяемойСтроки);
		
	МассивИдентификаторовСтрокДляПересчетаКоличества = Новый Массив;
	
	Если ИдентификаторИзменяемойСтроки = Неопределено Тогда
		
		Для Каждого СтрокаДанныхКорректировки Из Объект.ДанныеКорректировки Цикл
			МассивИдентификаторовСтрокДляПересчетаКоличества.Добавить(СтрокаДанныхКорректировки.ПолучитьИдентификатор());
		КонецЦикла;
		
	Иначе
		
		СтрокаТоваров = Объект.Товары.НайтиПоИдентификатору(ИдентификаторИзменяемойСтроки);
		
		Если СтрокаТоваров = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура("КорректируемыйСДИЗ", СтрокаТоваров.КорректируемыйСДИЗ);
		СтрокиДанныхКорректировкиПоСтрокеТоваров = Объект.ДанныеКорректировки.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого СтрокаДанныхКорректировки Из СтрокиДанныхКорректировкиПоСтрокеТоваров Цикл
			МассивИдентификаторовСтрокДляПересчетаКоличества.Добавить(СтрокаДанныхКорректировки.ПолучитьИдентификатор());
		КонецЦикла;
		
	КонецЕсли;
	
	ОбновитьКоличествоДанныхКорректировкиНаСервере(МассивИдентификаторовСтрокДляПересчетаКоличества);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьКэшСертификацииКлиентСервер(Форма, ДанныеЗаполнения, Номенклатура)
	
	ПараметрыПоиска = ИнициализироватьДанныеЗаполненияСертификации();
	Если Номенклатура <> Неопределено Тогда
		ПараметрыПоиска.Вставить("Номенклатура", Номенклатура);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ПараметрыПоиска, ДанныеЗаполнения);
	
	НайденныеСтроки = Форма.КэшСертификации.НайтиСтроки(ПараметрыПоиска);
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		НоваяСтрока = Форма.КэшСертификации.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеЗаполнения); 
		НоваяСтрока.Представление     = ПредставлениеСертификации(
			ДанныеЗаполнения.ТипДокумента,
			ДанныеЗаполнения.Номер,
			ДанныеЗаполнения.Дата);
		НоваяСтрока.Номенклатура      = Номенклатура;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКоличествоДанныхКорректировкиНаСервере(МассивИдентификаторовСтрокДляПересчетаКоличества)
	
	МассивСтрокОбработке = Новый Массив;
	
	Для Каждого ИдентификаторСтроки Из МассивИдентификаторовСтрокДляПересчетаКоличества Цикл
		
		СтрокаПерерасчета = Объект.ДанныеКорректировки.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если СтрокаПерерасчета = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СформироватьПредставлениеПричиныОтказаПоСтрокеКорректировки(СтрокаПерерасчета, ПричинаОтказаОтПогашенияПоУмолчанию);
		
		СтруктураОтбора = Новый Структура("КорректируемыйСДИЗ", СтрокаПерерасчета.КорректируемыйСДИЗ);
		СтрокиТоваров = Объект.Товары.НайтиСтроки(СтруктураОтбора);
		
		Если СтрокиТоваров.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаПерерасчета, СтрокиТоваров[0], "Номенклатура, Характеристика, Серия");
		МассивСтрокОбработке.Добавить(СтрокаПерерасчета);
		
	КонецЦикла;
	
	ИнтеграцияЗЕРНОПереопределяемый.ЗаполнитьКоличествоПоКоличествуЗЕРНО(МассивСтрокОбработке);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьСертификатыНоменклатурыВКэш(Форма, СписокНоменклатуры)
	
	СертификатыНоменклатуры = ИнформацияСертификатовНоменклатурыСервер(СписокНоменклатуры);
	ДанныеЗаполнения = ИнициализироватьДанныеЗаполненияСертификации();
	
	Для Каждого КлючЗначение Из СертификатыНоменклатуры Цикл
		
		Для Каждого ДанныеСертификата Из КлючЗначение.Значение Цикл
			
			Если Не ДанныеСертификата.Бессрочный
				И ЗначениеЗаполнено(ДанныеСертификата.СрокДействия)
				И ДанныеСертификата.СрокДействия < ТекущаяДатаСеанса() Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеЗаполнения.Номер        = ДанныеСертификата.НомерСертификации;
			ДанныеЗаполнения.Дата         = ДанныеСертификата.ДатаСертификации;
			ДанныеЗаполнения.СрокДействия = ДанныеСертификата.СрокДействия;
			
			Если ДанныеСертификата.ВидСертификации = ПредопределенноеЗначение("Перечисление.ВидыДокументовОбязательнойСертификацииИС.СертификатСоответствия") Тогда
				ДанныеЗаполнения.ТипДокумента = ПредопределенноеЗначение("Справочник.КлассификаторНСИЗЕРНО.ДокументНаПартиюФитосанитарныйСертификат");
			ИначеЕсли ДанныеСертификата.ВидСертификации = ПредопределенноеЗначение("Перечисление.ВидыДокументовОбязательнойСертификацииИС.ДекларацияСоответствия") Тогда
				ДанныеЗаполнения.ТипДокумента =  ПредопределенноеЗначение("Справочник.КлассификаторНСИЗЕРНО.ДокументНаПартиюДекларацияСоответствия");
			КонецЕсли;
			
			Номенклатура = КлючЗначение.Ключ;
			
			Если ЗначениеЗаполнено(Номенклатура) Тогда
				ОбновитьКэшСертификацииКлиентСервер(Форма, ДанныеЗаполнения, Номенклатура);
			Иначе
				Для Каждого Номенклатура Из СписокНоменклатуры Цикл
					ОбновитьКэшСертификацииКлиентСервер(Форма, ДанныеЗаполнения, Номенклатура);
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИнформацияСертификатовНоменклатурыСервер(СписокНоменклатуры)
	
	СертификатыНоменклатуры = Новый Соответствие;
	ИнтеграцияИСПереопределяемый.ПриЗаполненииСертификатовНоменклатуры(СписокНоменклатуры, СертификатыНоменклатуры);
	
	Возврат СертификатыНоменклатуры;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСертфикацию(ИзменяемыеСтроки)

	МассивНоменклатуры = Новый Массив;
	СоответствиеКэшаПоНоменклатуре = Новый Соответствие;
	
	ПараметрыОтбора = Новый Структура("Номенклатура");
	Для Каждого СтрокаТовары Из ИзменяемыеСтроки Цикл
		ПараметрыОтбора.Номенклатура = СтрокаТовары.Номенклатура;
		ДанныеКэшаСертификацииПоНоменклатуре = КэшСертификации.НайтиСтроки(ПараметрыОтбора);
		Если ДанныеКэшаСертификацииПоНоменклатуре.Количество() = 0 Тогда 
			МассивНоменклатуры.Добавить(СтрокаТовары.Номенклатура);
		Иначе
			СоответствиеКэшаПоНоменклатуре.Вставить(СтрокаТовары.Номенклатура, ДанныеКэшаСертификацииПоНоменклатуре); 
		КонецЕсли;
	КонецЦикла;
	
	Если МассивНоменклатуры.Количество() Тогда
		ДобавитьСертификатыНоменклатурыВКэш(ЭтотОбъект, МассивНоменклатуры);
		Для Каждого Номенклатура Из МассивНоменклатуры Цикл 
			ПараметрыОтбора.Номенклатура = Номенклатура;
			ДанныеКэшаСертификацииПоНоменклатуре = КэшСертификации.НайтиСтроки(ПараметрыОтбора);
			Если ДанныеКэшаСертификацииПоНоменклатуре.Количество() > 0 Тогда 
				СоответствиеКэшаПоНоменклатуре.Вставить(СтрокаТовары.Номенклатура, ДанныеКэшаСертификацииПоНоменклатуре); 
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СтрокаТовары Из ИзменяемыеСтроки Цикл 
		
		СтруктураОтбора = Новый Структура("ИдентификаторСтрокиТоваров", СтрокаТовары.Идентификатор);
		СтрокиСертификации = Объект.ДокументыСертификации.НайтиСтроки(СтруктураОтбора); 
		
		ПараметрыОтбора = ИнициализироватьДанныеЗаполненияСертификации();
		ПараметрыОтбора.Вставить("Номенклатура", СтрокаТовары.Номенклатура); 
		
		ДобавленныеТипыПоСтроке = Новый Массив();
		Для Каждого СтрокаСертификации Из СтрокиСертификации Цикл   
			ЗаполнитьЗначенияСвойств(ПараметрыОтбора, СтрокаСертификации);
			Если КэшСертификации.НайтиСтроки(ПараметрыОтбора).Количество() = 0 Тогда
				Объект.ДокументыСертификации.Удалить(СтрокаСертификации);
			Иначе
				ДобавленныеТипыПоСтроке.Добавить(СтрокаСертификации.ТипДокумента);
			КонецЕсли;
		КонецЦикла; 
		
		СтрокиКэшаСертификации = СоответствиеКэшаПоНоменклатуре[СтрокаТовары.Номенклатура];
		Если СтрокиКэшаСертификации = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаКэша Из СтрокиКэшаСертификации Цикл
			Если ДобавленныеТипыПоСтроке.Найти(СтрокаКэша.ТипДокумента) = Неопределено Тогда
				НоваяСтрока = Объект.ДокументыСертификации.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКэша);
				ДобавленныеТипыПоСтроке.Добавить(СтрокаКэша.ТипДокумента); 
				НоваяСтрока.ИдентификаторСтрокиТоваров = СтрокаТовары.Идентификатор;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция РедактированиеДополнительнойИнформацииНедоступно()
	Возврат РедактированиеФормыНедоступно И Не (ПартииСформированы Или ПартииСформированыЧастично);
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеКорректируемыхСДИЗ()
	
	Если Не Объект.Корректировочный Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаКорректируемыхДанных = Документы.ОформлениеСДИЗЗЕРНО.ИнициализироватьТаблицуДляРасчетаГашенийОтказовОтГашенийПоКорректируемымСДИЗ();
	
	Для Каждого СтрокаТоваров Из Объект.Товары Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТоваров.КорректируемыйСДИЗ) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаДанных = ТаблицаКорректируемыхДанных.Добавить();
		
		НоваяСтрокаДанных.Идентификатор      = СтрокаТоваров.Идентификатор;
		НоваяСтрокаДанных.КорректируемыйСДИЗ = СтрокаТоваров.КорректируемыйСДИЗ;
		НоваяСтрокаДанных.Партия             = ?(ЗначениеЗаполнено(СтрокаТоваров.ВыделеннаяПартия), СтрокаТоваров.ВыделеннаяПартия, СтрокаТоваров.Партия);
		
	КонецЦикла;
	
	РезультирующиеДанные = Документы.ОформлениеСДИЗЗЕРНО.ДанныеГашенияОтказаОтГашенияПоКорректируемымСДИЗ(ТаблицаКорректируемыхДанных);
	
	ТоварыПогашенияИОтказы.Загрузить(РезультирующиеДанные.ТоварыПогашенияИОтказы);
	ОтказыОтПогашенияКАннулированию.Загрузить(РезультирующиеДанные.ОтказыОтПогашенияКАннулированию);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоКорректировочныйДокумент(ОформлениеСДИЗ)
	Возврат Документы.ОформлениеСДИЗЗЕРНО.ЭтоКорректировочныйДокумент(ОформлениеСДИЗ);
КонецФункции

&НаКлиенте
Функция МассивОбновляемыхПолейДляРасчетаКорректировкиСДИЗ()
	
	МассивИменРеквизитов = Новый Массив;
	МассивИменРеквизитов.Добавить("ПокупательСтрокой");
	МассивИменРеквизитов.Добавить("ГрузополучательСтрокой");
	МассивИменРеквизитов.Добавить("ГрузоотправительСтрокой");
	МассивИменРеквизитов.Добавить("РеализацияПокупательСтрокой");
	МассивИменРеквизитов.Добавить("НомерГПД");
	МассивИменРеквизитов.Добавить("ДатаГПД");
	МассивИменРеквизитов.Добавить("Реализация");
	МассивИменРеквизитов.Добавить("Отгрузка");
	МассивИменРеквизитов.Добавить("ПунктНазначения");
	МассивИменРеквизитов.Добавить("Перевозка");
	МассивИменРеквизитов.Добавить("Приемка");
	МассивИменРеквизитов.Добавить("СвязанныеДокументы");
	МассивИменРеквизитов.Добавить("СвязанныеДокументыПрочиеПеревозка");
	МассивИменРеквизитов.Добавить("ДокументыСертификации");
	МассивИменРеквизитов.Добавить("Маршрут");
	
	Возврат МассивИменРеквизитов;
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеКорректировкиНаСервере(ИмяОбновляемогоПоля, ИдентификаторСтроки)
	
	ИзменяемаяСтрока = Объект.ДанныеКорректировки.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ИмяОбновляемогоПоля = "ДанныеКорректировкиПартия"
		Или ИмяОбновляемогоПоля = "ДанныеКорректировкиКоличествоЗЕРНО"
		Или ИмяОбновляемогоПоля = "ДанныеКорректировкиКоличество" Тогда
		
		Если ПартииСформированыЧастично
			И ИзменяемаяСтрока.СтатусОбработки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ФормированиеПартииОшибкаПередачи") Тогда
			
			ИзменяемаяСтрока.СтатусОбработки = Неопределено;
			Если ИдентификаторыИзмененныхСтрок.НайтиПоЗначению(ИзменяемаяСтрока.Идентификатор) = Неопределено Тогда
				ИдентификаторыИзмененныхСтрок.Добавить(ИзменяемаяСтрока.Идентификатор);
			КонецЕсли;
			
		КонецЕсли;
		
		ОбновитьСтатусИПараметрыДополнения();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаЗаполненияКорректировкиСДИЗ(Отказ)
	
	Если Не Объект.Корректировочный Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора                 = Новый Структура("ЕстьОшибкиКорректировкиСДИЗ", Истина);
	СтрокиНедопустимойКорректировки = Объект.Товары.НайтиСтроки(СтруктураОтбора);
	
	ШаблонСообщения                 = НСтр("ru = 'Корректировка СДИЗ %1 в строке №%2 запрещена, детальное описание причины смотрите по строке.'");
	ЗапрещеноКорректировать         = Ложь;
	
	Для Каждого СтрокаНедопустимойКорректировки Из СтрокиНедопустимойКорректировки Цикл
		
		ЗапрещеноКорректировать = Истина;
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрШаблон(ШаблонСообщения, СтрокаНедопустимойКорректировки.КорректируемыйСДИЗ, Формат(СтрокаНедопустимойКорректировки.НомерСтроки, "ЧДЦ=0;")),,
			"Объект.Товары[" + Формат(СтрокаНедопустимойКорректировки.НомерСтроки - 1, "ЧДЦ=0; ЧГ=0;") + "].КорректируемыйСДИЗ",, Отказ);
		
	КонецЦикла;
	
	Если ЗапрещеноКорректировать Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Общая корректировка СДИЗ запрещена. Скорректируйте документ перед записью.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУстановкиПараметровОтказаГашения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		Или Не ДополнительныеПараметры.Свойство("ИдентификаторСтроки") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Объект.ДанныеКорректировки.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки.ПричинаОтказаОтГашения = Результат.ПричинаОтказаОтГашения;
	ДанныеСтроки.Примечание             = Результат.Примечание;
	
	СформироватьПредставлениеПричиныОтказаПоСтрокеКорректировки(ДанныеСтроки, ПричинаОтказаОтПогашенияПоУмолчанию);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеПричиныОтказаПоСтрокеКорректировки(СтрокаКорректировки, ПричинаОтказаОтПогашенияПоУмолчанию)
	
	Если ЗначениеЗаполнено(СтрокаКорректировки.ПричинаОтказаОтГашения) Тогда
		
		ШаблонОписания                                = НСтр("ru = '%1: %2'");
		СтрокаКорректировки.ОписаниеОтказаОтПогашения = СтрШаблон(ШаблонОписания, СтрокаКорректировки.ПричинаОтказаОтГашения, СтрокаКорректировки.Примечание);
		
	Иначе
		
		Если ПричинаОтказаОтПогашенияПоУмолчанию = Неопределено
			Или Не ТипЗнч(ПричинаОтказаОтПогашенияПоУмолчанию) = Тип("Структура")
			Или Не ПричинаОтказаОтПогашенияПоУмолчанию.Свойство("Причина")
			Или Не ПричинаОтказаОтПогашенияПоУмолчанию.Свойство("Примечание") Тогда
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПричинаОтказаОтПогашенияПоУмолчанию.Причина) Тогда
		
			ШаблонОписания                                = НСтр("ru = '%1: %2'");
			СтрокаКорректировки.ОписаниеОтказаОтПогашения = СтрШаблон(ШаблонОписания, ПричинаОтказаОтПогашенияПоУмолчанию.Причина, ПричинаОтказаОтПогашенияПоУмолчанию.Примечание);
			
		Иначе
			СтрокаКорректировки.ОписаниеОтказаОтПогашения = ПричинаОтказаОтПогашенияПоУмолчанию.Примечание;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьСтраницуРезультатовКорректировки()
	
	Если Не Объект.Корректировочный Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьСкрытьИнформациюОбОшибкеКорректировки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьИнформациюОбОшибкеКорректировки()
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолеКорректировкаНевозможна           = Новый ТабличныйДокумент();
	
	Если Не Элементы.ИнформацияОбОшибке.Пометка Тогда
	
		Если ЗначениеЗаполнено(ТекущиеДанные.КомментарийКорректировки) Тогда
			
			Элементы.СтраницыРезультатыКорректировки.ТекущаяСтраница = Элементы.СтраницаКорректировкаНевозможна;
			
			Элементы.ПолеКорректировкаНевозможна.ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
			Элементы.ПолеКорректировкаНевозможна.ОтображениеСостояния.Текст = ТекущиеДанные.КомментарийКорректировки;
			Элементы.ПолеКорректировкаНевозможна.ОтображениеСостояния.Видимость = Истина;
			
		ИначеЕсли Не ЗначениеЗаполнено(ТекущиеДанные.КорректируемыйСДИЗ) Тогда
			
			Элементы.СтраницыРезультатыКорректировки.ТекущаяСтраница = Элементы.СтраницаКорректировкаНевозможна;
			
			Элементы.ПолеКорректировкаНевозможна.ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
			Элементы.ПолеКорректировкаНевозможна.ОтображениеСостояния.Текст = НСтр("ru = 'Корректировка СДИЗ не требуется.'");
			Элементы.ПолеКорректировкаНевозможна.ОтображениеСостояния.Видимость = Истина;
			
		Иначе
			Элементы.СтраницыРезультатыКорректировки.ТекущаяСтраница = Элементы.СтраницаКорректировка;
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(ТекущиеДанные.КомментарийКорректировки) Тогда
			
			Элементы.СтраницыРезультатыКорректировки.ТекущаяСтраница = Элементы.СтраницаКорректировкаНевозможна;
			
			Элементы.ПолеКорректировкаНевозможна.ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
			Элементы.ПолеКорректировкаНевозможна.ОтображениеСостояния.Видимость = Ложь;
			
			ЗаполнитьДанныеПоСДИЗНаСервере(ТекущиеДанные.КорректируемыйСДИЗ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ИнформацияОбОшибке.Видимость = ЗначениеЗаполнено(ТекущиеДанные.КорректируемыйСДИЗ)
		И (Элементы.СтраницыРезультатыКорректировки.ТекущаяСтраница = Элементы.СтраницаКорректировкаНевозможна);
	
	УстановитьВидимостьКнопокКоманднойПанелиРезультатовКорректировки(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоСДИЗНаСервере(КорректируемыйСДИЗ)
	
	МакетДанныхПоСДИЗ = Документы.ОформлениеСДИЗЗЕРНО.СформироватьТабличноеПредставлениеДанныхПоСДИЗ(КорректируемыйСДИЗ);
	ПолеКорректировкаНевозможна.Вывести(МакетДанныхПоСДИЗ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриУдаленииСтрокиТоваровКорректировочногоСДИЗ(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено
		Или Результат = "Отмена" Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДополнительныеПараметры.Свойство("ИдентификаторТекущейСтроки") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = "УдалитьСтроку" Тогда
		
		ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторТекущейСтроки);
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если ТекущиеДанные.СтатусОбработки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ФормированиеПартииОшибкаПередачи") Тогда
			ИдентификаторыИзмененныхСтрок.Добавить(ТекущиеДанные.Идентификатор);
		КонецЕсли;
		
		ИнтеграцияЗЕРНОКлиентСервер.ОчиститьДанныеТабличныхЧастейПоСтроке(
			ЭтотОбъект,
			ТекущиеДанные.Идентификатор,
			"ИдентификаторСтрокиТоваров",
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ДокументыСертификации"));
			
		ИнтеграцияЗЕРНОКлиентСервер.ОчиститьДанныеТабличныхЧастейПоСтроке(
			ЭтотОбъект,
			ТекущиеДанные.КорректируемыйСДИЗ,
			"КорректируемыйСДИЗ",
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ДанныеКорректировки"));
			
		Объект.Товары.Удалить(ТекущиеДанные);
		
	ИначеЕсли Результат = "АннулироватьСтроку" Тогда
		
		ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторТекущейСтроки);
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущиеДанные.КоличествоЗЕРНО = 0;
		ТекущиеДанные.Количество      = 0;
		
		ОбновитьДанные(
			ТекущиеДанные.Количество,
			Новый Структура("ИмяПоля, ИдентификаторСтроки", "ТоварыКоличество", ТекущиеДанные.ПолучитьИдентификатор()));
		
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДоступноСозданиеКорректировочногоДокумента(ДокументОснование)
	
	Возврат Документы.ОформлениеСДИЗЗЕРНО.ДоступноСозданиеКорректировочногоДокумента(ДокументОснование);
	
КонецФункции

#КонецОбласти

#КонецОбласти
