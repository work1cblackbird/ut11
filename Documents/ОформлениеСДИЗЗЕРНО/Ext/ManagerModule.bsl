#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Статусы

// Возвращает статус по умолчанию.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиОформлениеСДИЗЗЕРНО - Статус по-умолчанию.
//
Функция СтатусПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.Черновик;
	
КонецФункции

// Возвращает статусы ошибок.
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыОбработкиОформлениеСДИЗЗЕРНО- Статусы ошибок.
//
Функция СтатусыОшибок() Экспорт
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОформлениеСДИЗОшибкаПередачи);
	Статусы.Добавить(Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.АннулированиеОформленияСДИЗОшибкаПередачи);
	Статусы.Добавить(Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ФормированиеПартииОшибкаПередачи);
	Статусы.Добавить(Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОтказПогашенияСДИЗОшибкаПередачи);
	Статусы.Добавить(Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОтказПогашенияСДИЗПриКорректировкеОшибкаПередачи);
	Статусы.Добавить(Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.КорректировкаОформленияСДИЗОшибкаОжидаетсяДействие);
	Статусы.Добавить(Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.АннулированиеОтказаПогашенияСДИЗОшибкаПередачи);
	Статусы.Добавить(Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.КорректировочныйСДИЗОшибкаПередачи);
	Статусы.Добавить(Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.АннулированиеОформленияСДИЗПриКорректировкеОшибкаПередачи);
	Статусы.Добавить(Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.АннулированиеПартииОшибкаПередачи);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает конечные статусы документа.
// 
// Параметры:
//  ТребуетсяПовторноеОформление - Булево - Требуется повторное оформление
// 
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыОбработкиОформлениеСДИЗЗЕРНО -- Конечные статусы.
Функция КонечныеСтатусы(ТребуетсяПовторноеОформление = Истина) Экспорт
	
	Статусы = Новый Массив;
	
	Если Не ТребуетсяПовторноеОформление Тогда
		Статусы.Добавить(Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.СДИЗОформлен);
		Статусы.Добавить(Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.КорректировочныйСДИЗОформлен);
		Статусы.Добавить(Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОтказПогашенияСДИЗОформлен);
		Статусы.Добавить(Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОтказПогашенияСДИЗПриКорректировкеОформлен);
		Статусы.Добавить(Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОформлениеСДИЗПриКорректировкеАннулировано);
		Статусы.Добавить(Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОтказПогашенияСДИЗАннулирован);
		Статусы.Добавить(Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.КорректировкаОформленияСДИЗВыполнена);
	КонецЕсли;
	Статусы.Добавить(Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОформлениеСДИЗАннулировано);
	Статусы.Добавить(Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ПартияАннулирована);
	Статусы.Добавить(Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.СДИЗПартияАннулирована);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
// 
// Параметры:
//  СтруктураПараметров - Неопределено - Структура параметров
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО -- Дальнейшее действие по-умолчанию.
Функция ДальнейшееДействиеПоУмолчанию(СтруктураПараметров = Неопределено) Экспорт
	
	ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные;
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура")
		И СтруктураПараметров.Свойство("ОбъектРасчета") Тогда
		Объект = СтруктураПараметров.ОбъектРасчета;
	Иначе
		Объект = СтруктураПараметров;
	КонецЕсли;
	
	Если Объект <> Неопределено Тогда
		
		Если ЭтоКорректировочныйДокумент(Объект) Тогда
			
			Если Объект.ДанныеКорректировки.Количество() = 0 Тогда
				
				СтруктураОтбора = Новый Структура("КорректируемыйСДИЗ", ПредопределенноеЗначение("Справочник.СДИЗЗЕРНО.ПустаяСсылка"));
				СтрокиОформленияНовыхСДИЗ = Объект.Товары.НайтиСтроки(СтруктураОтбора);
				
				Если СтрокиОформленияНовыхСДИЗ.Количество() = 0 Тогда
					ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.НеТребуется;
				Иначе
					
					Если ТребуетсяСформироватьПартии(Объект) Тогда
						ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.СформируйтеПартии;
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				ДальнейшееДействие = ДальнейшееДействиеКорректировочногоСДИЗ(Объект);
			КонецЕсли;
			
		Иначе
		
			Если ТребуетсяСформироватьПартии(Объект) Тогда
				ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.СформируйтеПартии;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДальнейшееДействие;
	
КонецФункции

Функция СтатусИДальнейшиеДействияОформлениеСДИЗ(ДанныеДокумента) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Статус", Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ПустаяСсылка());
	Результат.Вставить("ДальнейшиеДействия", Новый Массив);
	
	Если ДанныеДокумента.ТребуетсяВыделитьПартии Тогда
		
		Результат.Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.Черновик;
		Результат.ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.СформируйтеПартии);
		
	Иначе
		
		Результат.Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.Черновик;
		Результат.ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПанельОбменЗЕРНО

// Возвращает массив дальнейших действий с документом, требующих участия пользователя
// 
// Возвращаемое значение:
// 	Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - дальшейшие действия.
//
Функция ВсеТребующиеДействия() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ВыполнитеОбмен);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеОперацию);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.СформируйтеПартии);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОформитеКорректировкуСДИЗ);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОформитеОтказОтГашения);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.АннулируйтеОперацию);
	
	Возврат МассивДействий;
	
КонецФункции

// Возвращает массив дальнейших действий с документом, требующих ожидания
// 
// Возвращаемое значение:
// 	Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - дальшейшие действия.
//
Функция ВсеТребующиеОжидания() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеЗавершенияОбработкиДанных);
	
	Возврат МассивДействий;
	
КонецФункции

#КонецОбласти

#Область ДействияПриОбменеЗЕРНО

// Статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОформлениеСДИЗЗЕРНО - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийЗЕРНО - Операция ЗЕРНО
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  Неопределено - не требуется
//  См. РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ВозвращаемоеЗначениеДальнейшиеДействияСтатус - 
//
Функция СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРФ
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗИмпорт
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭлеватор
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭкспорт
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРасчетСтатуса Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОформлениеСДИЗКПередаче);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗКорректировочныйРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗКорректировочный Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.КорректировкаОформленияСДИЗКПередаче);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииИзДругихПартий
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииРасчетСтатуса Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ФормированиеПартииКПередаче);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗ
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗПартииРасчетСтатуса Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.АннулированиеОформленияСДИЗКПередаче);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.АннулированиеФормированияПартии
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.АннулированиеФормированияПартииРасчетСтатуса Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.АннулированиеПартииКПередаче);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеКорректировкиСДИЗРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеКорректировкиСДИЗРасчетСтатусаПоСтроке Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.КорректировкаОформленияСДИЗКПередаче);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗОтказПогашенияСДИЗРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗОтказПогашенияСДИЗ Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОтказПогашенияСДИЗКПередаче);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗПриКорректировке Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.АннулированиеОформленияСДИЗПриКорректировкеКПередаче);
			
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.АннулированиеПартииПриКорректировке Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.АннулированиеПартииКПередаче);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗОтказПогашенияСДИЗПриКорректировке Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОтказПогашенияСДИЗПриКорректировкеКПередаче);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗАннулированиеОтказаПогашенияСДИЗ
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗАннулированиеОтказаПогашенияСДИЗРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗАннулированиеОтказаПогашенияСДИЗРасчетСтатусаПоСтроке Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.АннулированиеОтказаПогашенияСДИЗКПередаче);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗКорректировочный
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗКорректировочныйРасчетСтатуса Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.КорректировочныйСДИЗКПередаче);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.ЗапросПогашенийСДИЗ Тогда
		
		// сообщения добавлены в процессе обработки очереди сообщений
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЗЕРНО.ЗаявкаПринята;
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = СтатусОбрабатываетсяПоВидуОперации(Операция);
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеЗавершенияОбработкиДанных);
		
		СтатусыБазовыйПроцесс.Ошибка = СтатусОшибкаПоВидуОперации(Операция);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(ДействиеПриОшибкеПоВидуОперации(Операция));
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
	
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОформлениеСДИЗЗЕРНО - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийЗЕРНО - Операция ЗЕРНО
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЗЕРНО - Статус обработки сообщения
//
// Возвращаемое значение:
//  Неопределено - не требуется
//  См. РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ВозвращаемоеЗначениеДальнейшиеДействияСтатус - 
//
Функция СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Если СтатусОбработки = Неопределено Тогда
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЗЕРНО.ЗаявкаПринята;
	КонецЕсли;
	
	Если Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРФ
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗИмпорт
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭлеватор
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭкспорт
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ЗапросПогашенийСДИЗ
		
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииИзДругихПартий
		
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗ
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.АннулированиеФормированияПартии
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.АннулированиеФормированияПартииРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗПартииРасчетСтатуса
		
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеКорректировкиСДИЗРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеКорректировкиСДИЗРасчетСтатусаПоСтроке
		
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗКорректировочныйРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗКорректировочный
		
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗОтказПогашенияСДИЗРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗОтказПогашенияСДИЗ
		
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗОтказПогашенияСДИЗПриКорректировке
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗПриКорректировке
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.АннулированиеПартииПриКорректировке
		
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗАннулированиеОтказаПогашенияСДИЗ
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗАннулированиеОтказаПогашенияСДИЗРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗАннулированиеОтказаПогашенияСДИЗРасчетСтатусаПоСтроке
		
		Тогда
		
		Статусы = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.СтруктураСтатусы();
		
		Статусы.Принят = СтатусОбрабатываетсяПоВидуОперации(Операция);
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = СтатусОшибкаПоВидуОперации(Операция);
		Статусы.ОшибкаДействия.Добавить(ДействиеПриОшибкеПоВидуОперации(Операция));
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, Статусы);
		
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после получения данных из ЗЕРНО.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОформлениеСДИЗЗЕРНО - Документ, для которого требуется обновить статус
//  Операция - ПеречислениеСсылка.ВидыОперацийЗЕРНО - Операция обмена с ЗЕРНО
//  ДополнительныеПараметры - Структура - Структура со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЗЕРНО - Статус обработки сообщения
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийЗЕРНО - Операция, на которую получена квитанция
//
// Возвращаемое значение:
//  Неопределено - не требуется
//  См. РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ВозвращаемоеЗначениеДальнейшиеДействияСтатус - 
Функция СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРФ
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗИмпорт
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭлеватор
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭкспорт
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ЗапросПогашенийСДИЗ
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииИзДругихПартий
		
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗ
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.АннулированиеФормированияПартии
		
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗКорректировочный
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗОтказПогашенияСДИЗ
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗОтказПогашенияСДИЗПриКорректировке
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗПриКорректировке
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.АннулированиеПартииПриКорректировке
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗАннулированиеОтказаПогашенияСДИЗ
		
		Тогда
		
		Статусы = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.СтруктураСтатусы();
		
		Статусы.Принят = СтатусПринятПоВидуОперации(Операция);
		
		Статусы.Обрабатывается = СтатусОбрабатываетсяПоВидуОперации(Операция);
		Статусы.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = СтатусОшибкаПоВидуОперации(Операция);
		Статусы.ОшибкаДействия.Добавить(ДействиеПриОшибкеПоВидуОперации(Операция));
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗАннулированиеОтказаПогашенияСДИЗРасчетСтатусаПоСтроке
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеКорректировкиСДИЗРасчетСтатусаПоСтроке Тогда
		Статусы = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.СтруктураСтатусы();
		
		Статусы.Принят = СтатусОбрабатываетсяПоВидуОперации(Операция);
		
		Статусы.Обрабатывается = Статусы.Принят;
		Статусы.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = СтатусОшибкаПоВидуОперации(Операция);
		Статусы.ОшибкаДействия.Добавить(ДействиеПриОшибкеПоВидуОперации(Операция));
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗОтказПогашенияСДИЗРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗАннулированиеОтказаПогашенияСДИЗРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗКорректировочныйРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеКорректировкиСДИЗРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.АннулированиеФормированияПартииРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗПартииРасчетСтатуса
		Тогда
		
		Статусы = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.СтруктураСтатусы();
		
		РезультирующийСтатусДокумента = РезультирующийСтатусДокумента(ДокументСсылка);
		Статусы.Принят = РезультирующийСтатусДокумента.Статус;
		
		Если ЗначениеЗаполнено(РезультирующийСтатусДокумента.ДальнейшееДействие) Тогда
			Если ТипЗнч(РезультирующийСтатусДокумента.ДальнейшееДействие) = Тип("Массив") Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
					Статусы.ПринятДействия, РезультирующийСтатусДокумента.ДальнейшееДействие);
			Иначе
				Статусы.ПринятДействия.Добавить(РезультирующийСтатусДокумента.ДальнейшееДействие);
			КонецЕсли;
		КонецЕсли;
		
		Статусы.Обрабатывается = СтатусОбрабатываетсяПоВидуОперации(Операция);
		Статусы.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеЗавершенияОбработкиДанных);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
			
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Обновить статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОформлениеСДИЗЗЕРНО - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийЗЕРНО - Операция
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиОформлениеСДИЗЗЕРНО - Новый статус.
//
Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Не ОперацияПоддерживаетСтатусыОбработки(Операция) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыОбновления = СтатусПослеПодготовкиКПередачеДанных(
		ДокументСсылка, Операция, ДополнительныеПараметры);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		ПараметрыОбновления.ИдентификаторСтроки = ДополнительныеПараметры.ИдентификаторСтроки;
	КонецЕсли;
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОформлениеСДИЗЗЕРНО - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийЗЕРНО - Операция
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЗЕРНО - Статус обработки сообщения
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиОформлениеСДИЗЗЕРНО - Новый статус.
//
Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Не ОперацияПоддерживаетСтатусыОбработки(Операция) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыОбновления = СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	АбстрактнаяОперация = Неопределено;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		ПараметрыОбновления.ИдентификаторСтроки = ДополнительныеПараметры.ИдентификаторСтроки;
		НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
			ДокументСсылка, ПараметрыОбновления, ДополнительныеПараметры);
		
		АбстрактнаяОперация = АбстрактныеОперацииПоВидуОперации().Получить(Операция);
		Если АбстрактнаяОперация <> Неопределено Тогда
			ПараметрыОбновления.ИдентификаторСтроки = "";
			ПараметрыОбновления = СтатусПослеПередачиДанных(
				ДокументСсылка, АбстрактнаяОперация, СтатусОбработки);
			РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
				ДокументСсылка, ПараметрыОбновления, ДополнительныеПараметры);
		КонецЕсли;
	Иначе
		НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
			ДокументСсылка, ПараметрыОбновления, ДополнительныеПараметры);
	КонецЕсли;
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после получения данных из ЗЕРНО.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОформлениеСДИЗЗЕРНО - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыОперацийЗЕРНО - Операция обмена с ЗЕРНО.
//  ДополнительныеПараметры - Неопределено, Структура - Структура со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЗЕРНО - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийЗЕРНО - Операция, на которую получена квитанция.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиОформлениеСДИЗЗЕРНО - Новый статус.
//
Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Не ОперацияПоддерживаетСтатусыОбработки(Операция) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыОбновления = СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		ПараметрыОбновления.ИдентификаторСтроки = ДополнительныеПараметры.ИдентификаторСтроки;
	КонецЕсли;
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Изменяет и возвращает статус документа ЗЕРНО.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Документ ЗЕРНО.
//  ПараметрыОбновления - Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиОформлениеСДИЗЗЕРНО - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Дальнейшее действие 3.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиОформлениеСДИЗЗЕРНО - новый статус документа ЗЕРНО.
Функция ОбновитьСтатус(ДокументСсылка, ПараметрыОбновления, ДополнительныеПараметры) Экспорт
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Получить последовательность операций в течении жизненного цикла документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОформлениеСДИЗЗЕРНО - Документ, для которого требуется обновить статус.
//  ЛинейныйСписок - Булево - не используется для документа
//
// Возвращаемое значение:
//  см. ПротоколОбменаИС.ПустаяТаблицаПоследовательностьОпераций.
//
Функция ПоследовательностьОпераций(ДокументСсылка, ЛинейныйСписок = Ложь) Экспорт
	
	ЭтоКорректировка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "Корректировочный");
	Таблица = ПротоколОбменаИС.ПустаяТаблицаПоследовательностьОпераций();
	
	Исходящий = Перечисления.ТипыЗапросовИС.Исходящий;
	
	ОперацияВПоследовательности = ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 1,
		Исходящий,
		Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииРасчетСтатуса);
	ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 11,
		Исходящий,
		Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииИзДругихПартий);
	
	ОперацияВПоследовательности = ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 1,
		Исходящий,
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРасчетСтатуса);
	ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 11,
		Исходящий,
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРФ);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 12,
		Исходящий,
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗИмпорт);
		
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 13,
		Исходящий,
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭкспорт);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 14,
		Исходящий,
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭлеватор);
		
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 142,
		Исходящий,
		Перечисления.ВидыОперацийЗЕРНО.ЗапросПогашенийСДИЗ);
	
	ОперацияВПоследовательности = ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 2,
		Исходящий,
		Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗРасчетСтатуса);
	ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 21,
		Исходящий,
		Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗ);
		
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 22,
		Исходящий,
		Перечисления.ВидыОперацийЗЕРНО.АннулированиеФормированияПартии);
		
	Если ЭтоКорректировка Тогда
		
		ОперацияВПоследовательности = ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 1,
			Исходящий,
			Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗКорректировочныйРасчетСтатуса);
		ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
		
		ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 11,
			Исходящий,
			Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗКорректировочный);
		
		ОперацияВПоследовательности = ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 1,
			Исходящий,
			Перечисления.ВидыОперацийЗЕРНО.ОформлениеКорректировкиСДИЗРасчетСтатуса);
		ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
		
		ОперацияВПоследовательности = ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 11,
			Исходящий,
			Перечисления.ВидыОперацийЗЕРНО.ОформлениеКорректировкиСДИЗРасчетСтатусаПоСтроке);
		ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
		
		ОперацияВПоследовательности = ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 111,
			Исходящий,
			Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗАннулированиеОтказаПогашенияСДИЗРасчетСтатусаПоСтроке);
		ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
		
		ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 1111,
			Исходящий,
			Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗАннулированиеОтказаПогашенияСДИЗ);
		
		ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 112,
			Исходящий,
			Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗОтказПогашенияСДИЗПриКорректировке);
		
		ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 114,
			Исходящий,
			Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗПриКорректировке);
		
		ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 115,
			Исходящий,
			Перечисления.ВидыОперацийЗЕРНО.АннулированиеПартииПриКорректировке);
		
		ОперацияВПоследовательности = ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 1,
			Исходящий,
			Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗОтказПогашенияСДИЗРасчетСтатуса);
		ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
		
		ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 11,
			Исходящий,
			Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗОтказПогашенияСДИЗ);
		
	КонецЕсли;
	
	Возврат Таблица;
	
КонецФункции

// Обработчик изменения статуса документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОформлениеСДИЗЗЕРНО - Документ.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиОформлениеСДИЗЗЕРНО - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиОформлениеСДИЗЗЕРНО - Предыдущий статус.
//  ПараметрыОбновленияСтатуса - Структура - см. функцию ИнтеграцияЗЕРНО.ПараметрыОбновленияСтатуса().
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт
	
	ИнтеграцияЗЕРНОПереопределяемый.ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса);
	
	//Получение конечного статуса требующего повторного оформления
	Если КонечныеСтатусы().Найти(НовыйСтатус)<>Неопределено
		И КонечныеСтатусы().Найти(ПредыдущийСтатус)=Неопределено Тогда
		РасчетСтатусовОформленияЗЕРНО.РассчитатьСтатусыОформленияДокументов(ДокументСсылка);
	КонецЕсли;
	
	Если СтатусыПересчетаДвижений().Найти(НовыйСтатус) <> Неопределено И НовыйСтатус <> ПредыдущийСтатус Тогда
		
		РегистрыНакопления.ОстаткиПартийЗЕРНО.ОбновитьДвиженияПриИзмененииСтатусаДокумента(ДокументСсылка);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Сообщения

// Сообщение к передаче XML
//
// Параметры:
//  СсылкаНаОбъект          - ДокументСсылка.ОформлениеСДИЗЗЕРНО - Ссылка на объект.
//  ДальнейшееДействие      - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - дальнейшее действие.
//  ДополнительныеПараметры - Структура, Неопределено - Дополнительные параметры.
// Возвращаемое значение:
//  Массив из см. ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML - Сообщения к передаче.
//
Функция СообщениеКПередачеXML(СсылкаНаОбъект, ДальнейшееДействие, ДополнительныеПараметры) Экспорт
		
	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные Тогда
		
		Возврат ОформлениеСДИЗЗЕРНО(СсылкаНаОбъект, ДополнительныеПараметры);
	
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.СформируйтеПартии Тогда
		
		Возврат СформироватьПартииЗЕРНО(СсылкаНаОбъект, ДополнительныеПараметры);
	
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.АннулируйтеОперацию Тогда
		
		Возврат АннулированиеСДИЗЗЕРНО(СсылкаНаОбъект, ДополнительныеПараметры);
		
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОформитеОтказОтГашения Тогда
		
		Возврат ОтказОтГашенияСДИЗЗЕРНО(СсылкаНаОбъект, ДополнительныеПараметры);
		
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОформитеКорректировкуСДИЗ Тогда
		
		Возврат КорректировкаСДИЗЗЕРНО(СсылкаНаОбъект, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Серии

//Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	Возврат ИнтеграцияИС.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий(Метаданные.Документы.ОформлениеСДИЗЗЕРНО);
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//  Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
// 
// Возвращаемое значение:
//  Произвольный - (См. ИнтеграцияИСПереопределяемый.ЗаполнитьПараметрыУказанияСерий) - особенности указания серий.
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	Возврат ИнтеграцияИС.ПараметрыУказанияСерий(Метаданные.Документы.ОформлениеСДИЗЗЕРНО, Объект);
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
// Параметры:
//   ПараметрыУказанияСерий - См. ПараметрыУказанияСерий
// Возвращаемое значение:
//   Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	Возврат ИнтеграцияИС.ТекстЗапросаЗаполненияСтатусовУказанияСерий(Метаданные.Документы.ОформлениеСДИЗЗЕРНО, ПараметрыУказанияСерий);

КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

#Область Отчеты

// Заполняет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//   Параметры - Структура - Вспомогательные параметры. См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры.
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ИнтеграцияИСПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	ИнтеграцияИСПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);
	
	КомандаОтчет = Отчеты.АнализРасхожденийПриДвиженииЗЕРНО.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Важность = "Обычное";
		КомандаОтчет.Порядок = 1;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// СДИЗ расширенная этикетка
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор                  = "СДИЗРасширеннаяЭтикетка";
	КомандаПечати.МенеджерПечати                 = "Обработка.ПечатьЭтикетокЗЕРНО";
	КомандаПечати.Представление                  = НСтр("ru = 'СДИЗ с расширенной информацией'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.ФорматСохранения               = ТипФайлаТабличногоДокумента.PDF;
	КомандаПечати.Картинка                       = БиблиотекаКартинок.Печать;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов - см. УправлениеПечатьюПереопределяемый.ПриПечати.МассивОбъектов
//  ПараметрыПечати - см. УправлениеПечатьюПереопределяемый.ПриПечати.ПараметрыПечати
//  КоллекцияПечатныхФорм - см. УправлениеПечатьюПереопределяемый.ПриПечати.КоллекцияПечатныхФорм
//  ОбъектыПечати - см. УправлениеПечатьюПереопределяемый.ПриПечати.ОбъектыПечати
//  ПараметрыВывода - см. УправлениеПечатьюПереопределяемый.ПриПечати.ПараметрыВывода
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Возврат;
	
КонецПроцедуры

Функция ПолучитьДанныеДляПечатнойФормыРасширеннойЭтикеткиСДИЗ(ПараметрыПечати, МассивОбъектов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", МассивОбъектов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОформлениеСДИЗЗЕРНО.Ссылка                                        КАК Ссылка,
	|	ЗафиксированныйСДИЗЗерно.ДатаОформления                           КАК ДатаДокумента,
	|	ЗафиксированныйСДИЗЗерно.Идентификатор                            КАК НомерДокумента,
	|	ЗафиксированныйСДИЗЗерно.ИдентификаторФГИС                        КАК ИдентификаторСДИЗ,
	|	ОформлениеСДИЗЗЕРНО.Организация                                   КАК Отправитель,
	|	ОформлениеСДИЗЗЕРНО.ВидПродукции                                  КАК ВидПродукции,
	|	ОформлениеСДИЗЗЕРНО.Покупатель                                    КАК Получатель,
	|	ВЫБОР
	|		КОГДА ОформлениеСДИЗЗЕРНО.Грузоотправитель = НЕОПРЕДЕЛЕНО
	|			ТОГДА ОформлениеСДИЗЗЕРНО.Организация
	|		ИНАЧЕ ОформлениеСДИЗЗЕРНО.Грузоотправитель
	|	КОНЕЦ                                                             КАК Грузоотправитель,
	|	ОформлениеСДИЗЗЕРНО.ПунктОтправления                              КАК ГрузоотправительАдрес,
	|	ВЫБОР
	|		КОГДА ОформлениеСДИЗЗЕРНО.Грузополучатель = НЕОПРЕДЕЛЕНО
	|			ТОГДА ОформлениеСДИЗЗЕРНО.Покупатель
	|		ИНАЧЕ ОформлениеСДИЗЗЕРНО.Грузополучатель
	|	КОНЕЦ                                                             КАК Грузополучатель,
	|	ОформлениеСДИЗЗЕРНО.ПунктНазначенияСтрокой                        КАК ГрузополучательАдрес,
	|	ВЫБОР
	|		КОГДА ОформлениеСДИЗЗЕРНОТовары.ВыделеннаяПартия = ЗНАЧЕНИЕ(Справочник.РеестрПартийЗЕРНО.ПустаяСсылка)
	|			ТОГДА ОформлениеСДИЗЗЕРНОТовары.Партия
	|		ИНАЧЕ ОформлениеСДИЗЗЕРНОТовары.ВыделеннаяПартия
	|	КОНЕЦ                                                             КАК Партия,
	|	ВЫБОР
	|		КОГДА ОформлениеСДИЗЗЕРНОТовары.ВыделеннаяПартия = ЗНАЧЕНИЕ(Справочник.РеестрПартийЗЕРНО.ПустаяСсылка)
	|			ТОГДА ОформлениеСДИЗЗЕРНОТовары.Партия.Идентификатор
	|		ИНАЧЕ ОформлениеСДИЗЗЕРНОТовары.ВыделеннаяПартия.Идентификатор
	|	КОНЕЦ                                                             КАК НомерПартии,
	|	ОформлениеСДИЗЗЕРНОТовары.Номенклатура                            КАК Номенклатура,
	|	ОформлениеСДИЗЗЕРНОТовары.Характеристика                          КАК Характеристика,
	|	ОформлениеСДИЗЗЕРНОТовары.Серия                                   КАК Серия,
	|	ОформлениеСДИЗЗЕРНОТовары.КоличествоЗЕРНО                         КАК Количество
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО                                      КАК ОформлениеСДИЗЗЕРНО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОформлениеСДИЗЗЕРНО.Товары КАК ОформлениеСДИЗЗЕРНОТовары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СДИЗЗЕРНО КАК ЗафиксированныйСДИЗЗерно
	|			ПО ОформлениеСДИЗЗЕРНОТовары.СДИЗ = ЗафиксированныйСДИЗЗерно.Ссылка
	|		ПО ОформлениеСДИЗЗЕРНО.Ссылка = ОформлениеСДИЗЗЕРНОТовары.Ссылка
	|ГДЕ
	|	ОформлениеСДИЗЗЕРНО.Ссылка В (&Ссылка)
	|	И ОформлениеСДИЗЗЕРНО.Реализация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОформлениеСДИЗЗЕРНО.Ссылка                                         КАК Ссылка,
	|	ЗафиксированныйСДИЗЗерно.ДатаОформления                            КАК ДатаДокумента,
	|	ЗафиксированныйСДИЗЗерно.Идентификатор                             КАК НомерДокумента,
	|	ЗафиксированныйСДИЗЗерно.ИдентификаторФГИС                         КАК ИдентификаторСДИЗ,
	|	ОформлениеСДИЗЗЕРНО.Организация                                    КАК Отправитель,
	|	ОформлениеСДИЗЗЕРНО.ВидПродукции                                   КАК ВидПродукции,
	|	ОформлениеСДИЗЗЕРНО.Организация                                    КАК Получатель,
	|	ВЫБОР
	|		КОГДА ОформлениеСДИЗЗЕРНО.Грузоотправитель = НЕОПРЕДЕЛЕНО
	|			ТОГДА ОформлениеСДИЗЗЕРНО.Организация
	|		ИНАЧЕ ОформлениеСДИЗЗЕРНО.Грузоотправитель
	|	КОНЕЦ                                                              КАК Грузоотправитель,
	|	ОформлениеСДИЗЗЕРНО.ПунктОтправления                               КАК ГрузоотправительАдрес,
	|	ВЫБОР
	|		КОГДА ОформлениеСДИЗЗЕРНО.Грузополучатель = НЕОПРЕДЕЛЕНО
	|			ТОГДА ОформлениеСДИЗЗЕРНО.Организация
	|		ИНАЧЕ ОформлениеСДИЗЗЕРНО.Грузополучатель
	|	КОНЕЦ                                                              КАК Грузополучатель,
	|	ОформлениеСДИЗЗЕРНО.ПунктНазначенияСтрокой                         КАК ГрузополучательАдрес,
	|	ВЫБОР
	|		КОГДА ОформлениеСДИЗЗЕРНОТовары.ВыделеннаяПартия = ЗНАЧЕНИЕ(Справочник.РеестрПартийЗЕРНО.ПустаяСсылка)
	|			ТОГДА ОформлениеСДИЗЗЕРНОТовары.Партия
	|		ИНАЧЕ ОформлениеСДИЗЗЕРНОТовары.ВыделеннаяПартия
	|	КОНЕЦ                                                              КАК Партия,
	|	ВЫБОР
	|		КОГДА ОформлениеСДИЗЗЕРНОТовары.ВыделеннаяПартия = ЗНАЧЕНИЕ(Справочник.РеестрПартийЗЕРНО.ПустаяСсылка)
	|			ТОГДА ОформлениеСДИЗЗЕРНОТовары.Партия.Идентификатор
	|		ИНАЧЕ ОформлениеСДИЗЗЕРНОТовары.ВыделеннаяПартия.Идентификатор
	|	КОНЕЦ                                                              КАК НомерПартии,
	|	ОформлениеСДИЗЗЕРНОТовары.Номенклатура                             КАК Номенклатура,
	|	ОформлениеСДИЗЗЕРНОТовары.Характеристика                           КАК Характеристика,
	|	ОформлениеСДИЗЗЕРНОТовары.Серия                                    КАК Серия,
	|	ОформлениеСДИЗЗЕРНОТовары.КоличествоЗЕРНО                          КАК Количество
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО КАК ОформлениеСДИЗЗЕРНО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОформлениеСДИЗЗЕРНО.Товары КАК ОформлениеСДИЗЗЕРНОТовары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СДИЗЗЕРНО КАК ЗафиксированныйСДИЗЗерно
	|			ПО ОформлениеСДИЗЗЕРНОТовары.СДИЗ = ЗафиксированныйСДИЗЗерно.Ссылка
	|		ПО ОформлениеСДИЗЗЕРНО.Ссылка = ОформлениеСДИЗЗЕРНОТовары.Ссылка
	|ГДЕ
	|	ОформлениеСДИЗЗЕРНО.Ссылка В (&Ссылка)
	|	И (ОформлениеСДИЗЗЕРНО.Перевозка
	|	И НЕ ОформлениеСДИЗЗЕРНО.Реализация)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента
	|ИТОГИ ПО
	|	Ссылка";
	Возврат Запрос.Выполнить();
	
КонецФункции

#КонецОбласти

#Область Прочее

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом
// 
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	УправлениеДоступомИСПереопределяемый.ПриЗаполненииОграниченияДоступа(
		Метаданные.Документы.ОформлениеСДИЗЗЕРНО, Ограничение);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработкаЗаполнения

// Заполнить партии.
// 
// Параметры:
//  Объект - ДокументОбъект.ОформлениеСДИЗЗЕРНО - 
//  СписокСтрок - Массив из СтрокаТаблицыЗначений - Список строк
//  ЗаполнитьОстаткиПартии - Булево - Заполнить остатки партии
//  ПартииКорректировки - Булево - Партии корректировки
// 
// Возвращаемое значение:
//  Структура
Функция ЗаполнитьПартии(Объект, СписокСтрок = Неопределено, ЗаполнитьОстаткиПартии = Ложь, ПартииКорректировки = Ложь) Экспорт
	
	РезультатЗаполнения = Новый Структура;
	РезультатЗаполнения.Вставить("ВсегоСтрок",       0);
	РезультатЗаполнения.Вставить("ЗаполненоСтрок",   0);
	РезультатЗаполнения.Вставить("ПроблемныхСтрок",  0);
	РезультатЗаполнения.Вставить("ИзмененныеСтроки", Новый Массив);
	
	РезультатЗаполнения.Вставить("НоменклатураНеЗаполнена", 0);
	РезультатЗаполнения.Вставить("КоличествоНеЗаполнено"  , 0);
	
	ВсеСтроки      = Новый Массив;
	СтрокиССериями = Новый Массив;
	СтрокиБезСерий = Новый Массив;
	
	Если ПартииКорректировки Тогда
		
		СписокКолонок = "КорректируемыйСДИЗ, Партия, Количество, КоличествоЗЕРНО";
		ТаблицаЗаполненияПартий = Объект.ДанныеКорректировки;
		
		ТаблицаДанных = Объект.ДанныеКорректировки.Выгрузить(, СписокКолонок);
		
		ТаблицаДанных.Колонки.Добавить("КодТНВЭД",       ОбщегоНазначения.ОписаниеТипаСтрока(10));
		ТаблицаДанных.Колонки.Добавить("ОКПД2",          ОбщегоНазначения.ОписаниеТипаСтрока(255));
		ТаблицаДанных.Колонки.Добавить("Номенклатура",   Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
		ТаблицаДанных.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
		ТаблицаДанных.Колонки.Добавить("Серия",          Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
		
		Для Каждого СтрокаТаблицыДанных Из ТаблицаДанных Цикл
			
			СтруктураОтбора = Новый Структура("КорректируемыйСДИЗ", СтрокаТаблицыДанных.КорректируемыйСДИЗ);
			СтрокиТоваров   = Объект.Товары.НайтиСтроки(СтруктураОтбора);
			
			Если СтрокиТоваров.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыДанных, СтрокиТоваров[0], "Номенклатура, Характеристика, Серия, КодТНВЭД, ОКПД2");
			
		КонецЦикла;
		
		Для Каждого СтрокаДокумента Из Объект.ДанныеКорректировки Цикл
			
			Если ЗначениеЗаполнено(СтрокаДокумента.Партия) Тогда
				Продолжить;
			ИначеЕсли СписокСтрок <> Неопределено И СписокСтрок.Найти(СтрокаДокумента) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ВсеСтроки.Добавить(СтрокаДокумента);
			
			СтруктураОтбора = Новый Структура("КорректируемыйСДИЗ", СтрокаДокумента.КорректируемыйСДИЗ);
			СтрокиТоваров   = Объект.Товары.НайтиСтроки(СтруктураОтбора);
			
			Если СтрокиТоваров.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокиТоваров[0].Номенклатура) Тогда
				
				РезультатЗаполнения.ПроблемныхСтрок = РезультатЗаполнения.ПроблемныхСтрок + 1;
				РезультатЗаполнения.НоменклатураНеЗаполнена = РезультатЗаполнения.НоменклатураНеЗаполнена + 1;
				
			ИначеЕсли Не ЗначениеЗаполнено(СтрокиТоваров[0].Количество) Тогда
				
				РезультатЗаполнения.ПроблемныхСтрок = РезультатЗаполнения.ПроблемныхСтрок + 1;
				РезультатЗаполнения.КоличествоНеЗаполнено = РезультатЗаполнения.КоличествоНеЗаполнено + 1;
				
			Иначе
	
				Если ЗначениеЗаполнено(СтрокиТоваров[0].Серия) Тогда
					СтрокиССериями.Добавить(СтрокаДокумента);
				Иначе
					СтрокиБезСерий.Добавить(СтрокаДокумента);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		СписокКолонок = "Номенклатура, Характеристика, Серия, Партия, КодТНВЭД, ОКПД2, КоличествоЗЕРНО";
		ТаблицаЗаполненияПартий = Объект.Товары;
		
		ТаблицаДанных = Объект.Товары.Выгрузить(, СписокКолонок);
		
		Для Каждого СтрокаДокумента Из Объект.Товары Цикл
			
			Если ЗначениеЗаполнено(СтрокаДокумента.Партия) Тогда
				Продолжить;
			ИначеЕсли СписокСтрок <> Неопределено И СписокСтрок.Найти(СтрокаДокумента) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ВсеСтроки.Добавить(СтрокаДокумента);
			
			Если Не ЗначениеЗаполнено(СтрокаДокумента.Номенклатура) Тогда
				
				РезультатЗаполнения.ПроблемныхСтрок = РезультатЗаполнения.ПроблемныхСтрок + 1;
				РезультатЗаполнения.НоменклатураНеЗаполнена = РезультатЗаполнения.НоменклатураНеЗаполнена + 1;
				
			ИначеЕсли Не ЗначениеЗаполнено(СтрокаДокумента.Количество) Тогда
				
				РезультатЗаполнения.ПроблемныхСтрок = РезультатЗаполнения.ПроблемныхСтрок + 1;
				РезультатЗаполнения.КоличествоНеЗаполнено = РезультатЗаполнения.КоличествоНеЗаполнено + 1;
				
			Иначе
	
				Если ЗначениеЗаполнено(СтрокаДокумента.Серия) Тогда
					СтрокиССериями.Добавить(СтрокаДокумента);
				Иначе
					СтрокиБезСерий.Добавить(СтрокаДокумента);
				КонецЕсли;
	
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	РезультатЗаполнения.ВсегоСтрок = СтрокиССериями.Количество() + СтрокиБезСерий.Количество() + РезультатЗаполнения.ПроблемныхСтрок;
	
	ПодготовитьСообщениеОЗавершенииЗаполненияПартий(РезультатЗаполнения);
	
	ТаблицаИсточникиРеквизитов = ИнтеграцияЗЕРНО.НоваяТаблицаОрганизацияКонтрагентПодразделение();
	ИнтеграцияЗЕРНО.ДобавитьВТаблицуОтбораОрганизациюПодразделение(
		ТаблицаИсточникиРеквизитов, Объект.Организация, Объект.Подразделение);
	ВладелецПартии = Справочники.КлючиРеквизитовОрганизацийЗЕРНО.КлючиПоОрганизациямКонтрагентам(ТаблицаИсточникиРеквизитов);
	
	Элеватор = Справочники.КлючиРеквизитовОрганизацийЗЕРНО.ПустаяСсылка();
	Если Объект.Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭлеватор Тогда
		Элеватор = ВладелецПартии;
		ТаблицаИсточникиРеквизитов = ИнтеграцияЗЕРНО.НоваяТаблицаОрганизацияКонтрагентПодразделение();
		ИнтеграцияЗЕРНО.ДобавитьВТаблицуОтбораОрганизациюПодразделение(
			ТаблицаИсточникиРеквизитов, Объект.ВладелецПартии, Объект.ПодразделениеВладельцаПартии);
		ВладелецПартии = Справочники.КлючиРеквизитовОрганизацийЗЕРНО.КлючиПоОрганизациямКонтрагентам(ТаблицаИсточникиРеквизитов);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ПунктОтправления) Тогда
		Местоположение = Справочники.КлючиАдресовЗЕРНО.СопоставленныеКлючиАдресов(Объект.ПунктОтправления);
	Иначе
		Местоположение = Неопределено;
	КонецЕсли;
	Если РезультатЗаполнения.ВсегоСтрок = 0 Тогда
		Возврат РезультатЗаполнения.СообщениеПользователю;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура   КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Серия          КАК Серия,
	|	ТаблицаТовары.КодТНВЭД       КАК КодТНВЭД,
	|	ТаблицаТовары.ОКПД2          КАК ОКПД2,
	|	ТаблицаТовары.Партия         КАК Партия,
	|	ТаблицаТовары.КоличествоЗЕРНО КАК КоличествоЗЕРНО
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&Товары КАК ТаблицаТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	КодТНВЭД,
	|	ОКПД2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Партия КАК Партия,
	|	СУММА(ТаблицаТовары.КоличествоЗЕРНО) КАК КоличествоЗЕРНО
	|ПОМЕСТИТЬ ПартииВДокументе
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Партия <> ЗНАЧЕНИЕ(Справочник.РеестрПартийЗЕРНО.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Партия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСоответствия.Номенклатура   КАК Номенклатура,
	|	ТаблицаСоответствия.Характеристика КАК Характеристика,
	|	ТаблицаСоответствия.Серия          КАК Серия,
	|	ТаблицаСоответствия.Партия         КАК Партия,
	|	0                                  КАК ПорядокОсновной
	|ПОМЕСТИТЬ ТаблицаСоответствияПредварительно
	|ИЗ
	|	РегистрСведений.СоответствиеПартийЗЕРНО КАК ТаблицаСоответствия
	|ГДЕ
	|	(ТаблицаСоответствия.Номенклатура, ТаблицаСоответствия.Характеристика, ТаблицаСоответствия.Серия) В
	|			(ВЫБРАТЬ
	|				ТаблицаТоварыСПродукцией.Номенклатура,
	|				ТаблицаТоварыСПродукцией.Характеристика,
	|				ТаблицаТоварыСПродукцией.Серия
	|			ИЗ
	|				ТаблицаТовары КАК ТаблицаТоварыСПродукцией
	|			ГДЕ
	|				НЕ ТаблицаТоварыСПродукцией.Серия В (&НезаполненныеЗначенияСерии))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаСоответствия.Номенклатура,
	|	ТаблицаСоответствия.Характеристика,
	|	&ПустаяСерия,
	|	ТаблицаСоответствия.Партия,
	|	1
	|ИЗ
	|	РегистрСведений.СоответствиеПартийЗЕРНО КАК ТаблицаСоответствия
	|ГДЕ
	|	(ТаблицаСоответствия.Номенклатура, ТаблицаСоответствия.Характеристика) В
	|			(ВЫБРАТЬ
	|				ТаблицаТоварыСПродукцией.Номенклатура,
	|				ТаблицаТоварыСПродукцией.Характеристика
	|			ИЗ
	|				ТаблицаТовары КАК ТаблицаТоварыСПродукцией
	|			ГДЕ
	|				ТаблицаТоварыСПродукцией.Серия В (&НезаполненныеЗначенияСерии))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Серия,
	|	ТаблицаСоответствияПоКодам.Партия,
	|	2
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КлючиПартийЗЕРНО КАК ТаблицаСоответствияПоКодам
	|		ПО ТаблицаСоответствияПоКодам.ВидПродукции = &ВидПродукции
	|		И ТаблицаСоответствияПоКодам.ВладелецПартии В (&ВладелецПартии)
	|		И (&ЛюбоеМестоположение ИЛИ ТаблицаСоответствияПоКодам.Местоположение В (&Местоположение))
	|		И ТаблицаСоответствияПоКодам.Элеватор В (&Элеватор)
	|		И ТаблицаСоответствияПоКодам.ОКПД2 = ТаблицаТовары.ОКПД2
	|		И (ТаблицаСоответствияПоКодам.КодТНВЭД = ТаблицаТовары.КодТНВЭД
	|			ИЛИ ТаблицаТовары.КодТНВЭД = """"
	|			ИЛИ ТаблицаСоответствияПоКодам.КодТНВЭД = """")
	|		И ТаблицаСоответствияПоКодам.Партия В (ВЫБРАТЬ Партия Из РегистрНакопления.ОстаткиПартийЗЕРНО.Остатки)
	|		И НЕ ТаблицаСоответствияПоКодам.Партия В (ВЫБРАТЬ Партия Из РегистрСведений.СоответствиеПартийЗЕРНО)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСоответствияПредварительно.Номенклатура    КАК Номенклатура,
	|	ТаблицаСоответствияПредварительно.Характеристика  КАК Характеристика,
	|	ТаблицаСоответствияПредварительно.Серия           КАК Серия,
	|	ТаблицаСоответствияПредварительно.Партия          КАК Партия,
	|	ТаблицаСоответствияПредварительно.ПорядокОсновной КАК ПорядокОсновной,
	|	СУММА(1)                                          КАК КоличествоСопоставлений
	|ПОМЕСТИТЬ ТаблицаСоответствия
	|ИЗ
	|	ТаблицаСоответствияПредварительно КАК ТаблицаСоответствияПредварительно
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеПартийЗЕРНО КАК СоответствиеПартийЗЕРНО
	|		ПО СоответствиеПартийЗЕРНО.Партия = ТаблицаСоответствияПредварительно.Партия
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСоответствияПредварительно.Номенклатура,
	|	ТаблицаСоответствияПредварительно.Характеристика,
	|	ТаблицаСоответствияПредварительно.Серия,
	|	ТаблицаСоответствияПредварительно.Партия,
	|	ТаблицаСоответствияПредварительно.ПорядокОсновной
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КлючиПартийЗЕРНО.ОКПД2     КАК ОКПД2,
	|	КлючиПартийЗЕРНО.КодТНВЭД  КАК КодТНВЭД,
	|	ТаблицаОстатков.Партия     КАК Партия,
	|	ТаблицаОстатков.КоличествоЗЕРНООстаток - ТаблицаОстатков.ВОбработкеЗЕРНООстаток КАК КоличествоЗЕРНО
	|ПОМЕСТИТЬ ТаблицаОстатков
	|ИЗ
	|	РегистрНакопления.ОстаткиПартийЗЕРНО.Остатки(,
	|		Партия В (ВЫБРАТЬ СписокПродукции.Партия ИЗ ТаблицаСоответствия КАК СписокПродукции)
	|		И Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартийЗЕРНО.Подписано)
	|		И &ЭтоЭкспорт = (Партия.НазначениеПартии = ЗНАЧЕНИЕ(Справочник.КлассификаторНСИЗЕРНО.НазначениеПартииВывозСТерриторииРФ))) КАК ТаблицаОстатков
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КлючиПартийЗЕРНО КАК КлючиПартийЗЕРНО
	|		ПО КлючиПартийЗЕРНО.ВидПродукции = &ВидПродукции
	|		И КлючиПартийЗЕРНО.ВладелецПартии В (&ВладелецПартии)
	|		И (&ЛюбоеМестоположение ИЛИ КлючиПартийЗЕРНО.Местоположение В (&Местоположение))
	|		И КлючиПартийЗЕРНО.Элеватор В (&Элеватор)
	|		И КлючиПартийЗЕРНО.Партия = ТаблицаОстатков.Партия
	|ГДЕ
	|	ТаблицаОстатков.КоличествоЗЕРНООстаток > ТаблицаОстатков.ВОбработкеЗЕРНООстаток
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстатков.ОКПД2           КАК ОКПД2,
	|	ТаблицаОстатков.КодТНВЭД        КАК КодТНВЭД,
	|	ТаблицаОстатков.Партия          КАК Партия,
	|	ТаблицаОстатков.КоличествоЗЕРНО КАК КоличествоЗЕРНО,
	|	ТаблицаОстатков.КоличествоЗЕРНО КАК КоличествоОстатокПартииЗЕРНО
	|ИЗ
	|	ТаблицаОстатков КАК ТаблицаОстатков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСоответствия.Номенклатура            КАК Номенклатура,
	|	ТаблицаСоответствия.Характеристика          КАК Характеристика,
	|	ТаблицаСоответствия.Серия                   КАК Серия,
	|	ТаблицаСоответствия.Партия                  КАК Партия,
	|	ТаблицаСоответствия.ПорядокОсновной         КАК ПорядокОсновной,
	|	ТаблицаСоответствия.КоличествоСопоставлений КАК КоличествоСопоставлений
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокОсновной Возр,
	|	КоличествоСопоставлений Возр
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ВидПродукции",        Объект.ВидПродукции);
	Запрос.УстановитьПараметр("ВладелецПартии",      ВладелецПартии);
	Запрос.УстановитьПараметр("Местоположение",      Местоположение);
	Запрос.УстановитьПараметр("ЛюбоеМестоположение", Местоположение = Неопределено);
	Запрос.УстановитьПараметр("Элеватор",            Элеватор);
	Запрос.УстановитьПараметр("ЭтоЭкспорт",          Объект.Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭкспорт);
	
	Запрос.УстановитьПараметр("НезаполненныеЗначенияСерии", ИнтеграцияИС.НезаполненныеЗначенияОпределяемогоТипа("СерияНоменклатуры"));
	Запрос.УстановитьПараметр("ПустаяСерия",                ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры"));
	
	Запрос.УстановитьПараметр("Товары", ТаблицаДанных);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаОстатки = Результат[Результат.ВГраница() - 1].Выгрузить();
	
	Если ТаблицаОстатки.Количество() = 0 Тогда
		Возврат РезультатЗаполнения.СообщениеПользователю;
	КонецЕсли; 
	
	ТаблицаСоответствия = Результат[Результат.ВГраница()].Выгрузить();
	ТаблицаСоответствия.Индексы.Добавить("Номенклатура, Характеристика, Серия");
	ТаблицаСоответствия.Индексы.Добавить("Номенклатура, Характеристика");
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Товары",                 ТаблицаЗаполненияПартий);
	ПараметрыЗаполнения.Вставить("ТаблицаОстатки",         ТаблицаОстатки);
	ПараметрыЗаполнения.Вставить("ТаблицаСоответствия",    ТаблицаСоответствия);
	ПараметрыЗаполнения.Вставить("ЗаполнитьОстаткиПартии", ЗаполнитьОстаткиПартии);
	ПараметрыЗаполнения.Вставить("ТаблицаДанных",          ТаблицаДанных);
	ПараметрыЗаполнения.Вставить("ЭтоППЗ",                 Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродуктыПереработкиЗерна"));
	ПараметрыЗаполнения.Вставить("ПартииКорректировки",    ПартииКорректировки);
	
	ЗаполнитьВСтрокахПартии(СтрокиССериями, ПараметрыЗаполнения, РезультатЗаполнения);
	ЗаполнитьВСтрокахПартии(СтрокиБезСерий, ПараметрыЗаполнения, РезультатЗаполнения);
	ЗаполнитьПервичныеДокументыСертификации(Объект, РезультатЗаполнения.ИзмененныеСтроки);
	
	ПодготовитьСообщениеОЗавершенииЗаполненияПартий(РезультатЗаполнения);
	
	Возврат РезультатЗаполнения.СообщениеПользователю;

КонецФункции

#КонецОбласти

#Область КорректировочныеСДИЗ

// Функция возвращает признак, является ли документ корректировочным
// 
// Параметры:
//  Документ - ДокументСсылка.ОформлениеСДИЗЗЕРНО, ДокументОбъект.ОформлениеСДИЗЗЕРНО - Документ СДИЗ
// 
// Возвращаемое значение:
//  Булево - Истина, если это корректировочный СДИЗ
Функция ЭтоКорректировочныйДокумент(Документ) Экспорт
	
	Результат = Ложь;
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ОформлениеСДИЗЗЕРНО") Тогда
		Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Корректировочный");
	Иначе
		Результат = Документ.Корректировочный;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Инициализировать таблицу для расчета гашений отказов от гашений по корректируемым СДИЗ
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
// * Идентификатор      - Строка                             - идентификатор строки
// * КорректируемыйСДИЗ - СправочникСсылка.СДИЗЗЕРНО         - корректируемый СДИЗ
// * Партия             - СправочникСсылка.РеестрПартийЗЕРНО - партия из документа
Функция ИнициализироватьТаблицуДляРасчетаГашенийОтказовОтГашенийПоКорректируемымСДИЗ() Экспорт
	
	ТаблицаДанных = Новый ТаблицаЗначений();
	ТаблицаДанных.Колонки.Добавить("Идентификатор",      Метаданные.ОпределяемыеТипы.УникальныйИдентификаторИС.Тип);
	ТаблицаДанных.Колонки.Добавить("КорректируемыйСДИЗ", Новый ОписаниеТипов("СправочникСсылка.СДИЗЗЕРНО"));
	ТаблицаДанных.Колонки.Добавить("Партия",             Новый ОписаниеТипов("СправочникСсылка.РеестрПартийЗЕРНО"));
	
	Возврат ТаблицаДанных;
	
КонецФункции

// Функция возвращает таблицу данных по корректируемым СДИЗ для расчета отказов от погашений, погашений и
//  возможности их аннулирования
// 
// Параметры:
//  ТаблицаКорректировки - см. ИнициализироватьТаблицуДляРасчетаГашенийОтказовОтГашенийПоКорректируемымСДИЗ
// 
// Возвращаемое значение:
//  Структура:
//   * ТоварыПогашенияИОтказы - ТаблицаЗначений
//   * ОтказыОтПогашенияКАннулированию - ТаблицаЗначений
Функция ДанныеГашенияОтказаОтГашенияПоКорректируемымСДИЗ(ТаблицаКорректировки) Экспорт
	
	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Товары.Идентификатор       КАК ИдентификаторСтроки,
	|	Товары.КорректируемыйСДИЗ  КАК СДИЗ,
	|	Товары.Партия              КАК Партия
	|ПОМЕСТИТЬ КорректируемыеСДИЗ
	|ИЗ
	|	&ТаблицаКорректировки КАК Товары
	|ГДЕ
	|	Товары.КорректируемыйСДИЗ <> ЗНАЧЕНИЕ(Справочник.СДИЗЗЕРНО.ПустаяСсылка)
	|ИНДЕКСИРОВАТЬ ПО
	|	Товары.КорректируемыйСДИЗ");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ТаблицаОстатков.Партия.Идентификатор  КАК НомерПартии,
	|	ТаблицаОстатков.Партия                КАК Партия,
	|	ТаблицаОстатков.КоличествоЗЕРНООстаток - ТаблицаОстатков.ВОбработкеЗЕРНООстаток КАК КоличествоОстаток
	|ПОМЕСТИТЬ ОстаткиПартийОтказовОтПогашения
	|ИЗ
	|	РегистрНакопления.ОстаткиПартийЗЕРНО.Остатки(, Партия В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				РеестрПартийЗЕРНО.Ссылка КАК Партия
	|			ИЗ
	|				КорректируемыеСДИЗ КАК Товары
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияПогашенийСДИЗЗЕРНО КАК ИсторияПогашенийСДИЗЗЕРНО
	|				ПО Товары.СДИЗ = ИсторияПогашенийСДИЗЗЕРНО.СДИЗ 
	|					И ИсторияПогашенийСДИЗЗЕРНО.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗЕРНО.ОформлениеСДИЗОтказПогашенияСДИЗ)
	|					И ИсторияПогашенийСДИЗЗЕРНО.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаписейЗЕРНО.Подписано)
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РеестрПартийЗЕРНО КАК РеестрПартийЗЕРНО
	|				ПО ИсторияПогашенийСДИЗЗЕРНО.НомерПартии = РеестрПартийЗЕРНО.Идентификатор)) КАК ТаблицаОстатков
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ТаблицаОстатков.Партия.Идентификатор  КАК НомерПартии,
	|	ТаблицаОстатков.Партия                КАК Партия,
	|	ТаблицаОстатков.КоличествоЗЕРНООстаток - ТаблицаОстатков.ВОбработкеЗЕРНООстаток КАК КоличествоОстаток
	|ПОМЕСТИТЬ ОстаткиПартийКорректируемогоСДИЗ
	|ИЗ
	|	РегистрНакопления.ОстаткиПартийЗЕРНО.Остатки(, Партия В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				РеестрПартийЗЕРНО.Ссылка КАК Партия
	|			ИЗ
	|				КорректируемыеСДИЗ КАК Товары
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РеестрПартийЗЕРНО КАК РеестрПартийЗЕРНО
	|				ПО Товары.Партия = РеестрПартийЗЕРНО.Ссылка)) КАК ТаблицаОстатков
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|		КОГДА ИсторияПогашенийСДИЗЗЕРНО.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗЕРНО.ПогашениеСДИЗ)
	|		И ИсторияПогашенийСДИЗЗЕРНО.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаписейЗЕРНО.Подписано)
	|			ТОГДА ИсторияПогашенийСДИЗЗЕРНО.КоличествоЗЕРНО
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК КоличествоПогашено,
	|	СУММА(ВЫБОР
	|		КОГДА ИсторияПогашенийСДИЗЗЕРНО.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗЕРНО.ОформлениеСДИЗОтказПогашенияСДИЗ)
	|		И ИсторияПогашенийСДИЗЗЕРНО.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаписейЗЕРНО.Подписано)
	|			ТОГДА ИсторияПогашенийСДИЗЗЕРНО.КоличествоЗЕРНО
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК КоличествоОтказПогашения,
	|	СУММА(ВЫБОР
	|		КОГДА ИсторияПогашенийСДИЗЗЕРНО.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗЕРНО.ОформлениеСДИЗОтказПогашенияСДИЗ)
	|		И ИсторияПогашенийСДИЗЗЕРНО.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаписейЗЕРНО.Подписано)
	|		И ИсторияПогашенийСДИЗЗЕРНО.КоличествоЗЕРНО <> ТаблицаОстатков.КоличествоОстаток
	|			ТОГДА ИсторияПогашенийСДИЗЗЕРНО.КоличествоЗЕРНО
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК КоличествоОтказПогашенияЗаблокировано,
	|	ИсторияПогашенийСДИЗЗЕРНО.СДИЗ
	|ПОМЕСТИТЬ ПогашенияИОтказы
	|ИЗ
	|	РегистрСведений.ИсторияПогашенийСДИЗЗЕРНО КАК ИсторияПогашенийСДИЗЗЕРНО
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ КорректируемыеСДИЗ КАК СДИЗы
	|		ПО ИсторияПогашенийСДИЗЗЕРНО.СДИЗ = СДИЗы.СДИЗ
	|	ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиПартийОтказовОтПогашения КАК ТаблицаОстатков
	|		ПО ИсторияПогашенийСДИЗЗЕРНО.НомерПартии = ТаблицаОстатков.НомерПартии
	|СГРУППИРОВАТЬ ПО
	|	ИсторияПогашенийСДИЗЗЕРНО.СДИЗ");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Товары.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	Товары.СДИЗ                КАК КорректируемыйСДИЗ,
	|
	|	СДИЗЗЕРНО.НомерПартии   КАК НомерПартии,
	|	СДИЗЗЕРНО.Количество    КАК КоличествоИсходное,
	|	СДИЗЗЕРНО.Статус        КАК СтатусСДИЗ,
	|
	|	ЕСТЬNULL(ПогашенияИОтказы.КоличествоПогашено, 0)                КАК КоличествоПогашено,
	|	ЕСТЬNULL(ПогашенияИОтказы.КоличествоОтказПогашения, 0)          КАК КоличествоОтказПогашения,
	|	ЕСТЬNULL(ОстаткиПартийКорректируемогоСДИЗ.КоличествоОстаток, 0) КАК КоличествоОстатокПартии
	|
	|ИЗ
	|	КорректируемыеСДИЗ КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СДИЗЗЕРНО КАК СДИЗЗЕРНО
	|		ПО Товары.СДИЗ = СДИЗЗЕРНО.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПогашенияИОтказы КАК ПогашенияИОтказы
	|		ПО ПогашенияИОтказы.СДИЗ = СДИЗЗЕРНО.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиПартийКорректируемогоСДИЗ КАК ОстаткиПартийКорректируемогоСДИЗ
	|		ПО Товары.Партия = ОстаткиПартийКорректируемогоСДИЗ.Партия
	|",
	"ТоварыПогашенияИОтказы");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Товары.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	Товары.СДИЗ                КАК КорректируемыйСДИЗ,
	|	ТаблицаОстатков.Партия     КАК Партия,
	|	ИсторияПогашений.НомерПартии         КАК НомерПартии,
	|	ИсторияПогашений.ИдентификаторЗаявки КАК ИдентификаторЗаявки,
	|	ИсторияПогашений.ДатаОперации        КАК ДатаЗаявки,
	|	ИсторияПогашений.КоличествоЗЕРНО     КАК КоличествоОтказаПогашения,
	|	// проверка для аннулирования - партия могла быть использована
	|	ТаблицаОстатков.КоличествоОстаток    КАК КоличествоОстаток,
	|	ВЫБОР
	|		КОГДА ИсторияПогашений.КоличествоЗЕРНО = ТаблицаОстатков.КоличествоОстаток
	|		ТОГДА Истина
	|		ИНАЧЕ Ложь
	|	КОНЕЦ КАК РазрешеноАннулировать
	|ИЗ
	|	КорректируемыеСДИЗ КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияПогашенийСДИЗЗЕРНО КАК ИсторияПогашений
	|		ПО Товары.СДИЗ = ИсторияПогашений.СДИЗ 
	|			И ИсторияПогашений.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗЕРНО.ОформлениеСДИЗОтказПогашенияСДИЗ)
	|			И ИсторияПогашений.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаписейЗЕРНО.Подписано)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиПартийОтказовОтПогашения КАК ТаблицаОстатков
	|			ПО ИсторияПогашений.НомерПартии = ТаблицаОстатков.НомерПартии
	|",
	"ОтказыОтПогашенияКАннулированию");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаКорректировки",   ТаблицаКорректировки);
	
	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	ТоварыПогашенияИОтказы            = РезультатЗапроса["ТоварыПогашенияИОтказы"].Выгрузить();
	//@skip-warning
	ОтказыОтПогашенияКАннулированию = РезультатЗапроса["ОтказыОтПогашенияКАннулированию"].Выгрузить();
	ОтказыОтПогашенияКАннулированию.Индексы.Добавить("ИдентификаторСтроки");
	
	СтруктураВозврата = Новый Структура("ТоварыПогашенияИОтказы, ОтказыОтПогашенияКАннулированию",
		ТоварыПогашенияИОтказы, ОтказыОтПогашенияКАннулированию);
	
	//@skip-check constructor-function-return-section
	Возврат СтруктураВозврата;
	
КонецФункции

// Параметры для расчета хеш-сумм по строкам корректировочного СДИЗ.
// 
// Возвращаемое значение:
//  Структура - Параметры расчета хеш-сумм корректировочного СДИЗ:
// * ОбъектРасчета - Неопределено, ДокументСсылка.ОформлениеСДИЗЗЕРНО, ДокументОбъект.ОформлениеСДИЗЗЕРНО, СправочникСсылка.СДИЗЗЕРНО, Массив из ДокументСсылка.ОформлениеСДИЗЗЕРНО, Массив из СправочникСсылка.СДИЗЗерно - Документ
// * МассивСтрокРасчета - Массив из СтрокаТабличнойЧасти - массив строк, по которым надо рассчитать хеш. Если массив пустой,
//   считать по всем строкам документа
Функция ПараметрыРасчетаХешСуммКорректировочногоСДИЗ() Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОбъектРасчета",      Неопределено);
	СтруктураПараметров.Вставить("МассивСтрокРасчета", Новый Массив);
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Расчет хеш-сумм строк корректировочного СДИЗ по документу
// 
// Параметры:
//  ДокументОбъект - ДокументОбъект.ОформлениеСДИЗЗЕРНО - документ для расчета
//  ТабличнаяЧастьТовары - Неопределено, ТаблицаЗначений - таблица для расчета. По умолчанию берется из табличной части ДокументОбъект.Товары
//  РассчитатьИсходныйХеш - Булево - если Истина, то рассчитывается и исходный хеш, и новый
//  ИдентификаторИзменяемойСтроки - Неопределено, Число - идентификатор строки табличной части, передается, если требуется расчет только по конкретным строкам
Процедура РассчитатьХешСуммыПоДокументуКорректировочныйСДИЗ(ДокументОбъект, ТабличнаяЧастьТовары = Неопределено, РассчитатьИсходныйХеш = Ложь, ИдентификаторИзменяемойСтроки = Неопределено) Экспорт

	Если Не ДокументОбъект.Корректировочный Тогда
		Возврат;
	КонецЕсли;

	Если ТабличнаяЧастьТовары = Неопределено Тогда
		ТабличнаяЧастьТовары = ДокументОбъект.Товары;
	КонецЕсли;

	Если ТипЗнч(ТабличнаяЧастьТовары) = Тип("ТаблицаЗначений") И ТабличнаяЧастьТовары.Колонки.Найти("ХешСуммаИсходная") = Неопределено Тогда
		ТабличнаяЧастьТовары.Колонки.Добавить("ХешСуммаИсходная", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	КонецЕсли;

	Если ТипЗнч(ТабличнаяЧастьТовары) = Тип("ТаблицаЗначений") И ТабличнаяЧастьТовары.Колонки.Найти("ХешСуммаНовая") = Неопределено Тогда
		ТабличнаяЧастьТовары.Колонки.Добавить("ХешСуммаНовая", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	КонецЕсли;

	МассивСтрокРасчета = Новый Массив;

	Если Не ИдентификаторИзменяемойСтроки = Неопределено Тогда

		ИзменяемаяСтрока = ТабличнаяЧастьТовары.НайтиПоИдентификатору(ИдентификаторИзменяемойСтроки);

		Если Не ИзменяемаяСтрока = Неопределено Тогда
			МассивСтрокРасчета.Добавить(ИзменяемаяСтрока);
		КонецЕсли;

	КонецЕсли;

	СоответствиеХешСуммСтарых = Новый Соответствие();
	
	Если РассчитатьИсходныйХеш Тогда
		
		ОбъектРасчетаХешСуммы = Неопределено;
		
		Если ЗначениеЗаполнено(ДокументОбъект.ДокументОснование)
			И ТипЗнч(ДокументОбъект.ДокументОснование) = Тип("ДокументСсылка.ОформлениеСДИЗЗЕРНО") Тогда
			
			ОбъектРасчетаХешСуммы = ДокументОбъект.ДокументОснование;
			
		ИначеЕсли ТабличнаяЧастьТовары.Количество() Тогда
			
			ОбъектРасчетаХешСуммы = Новый Массив;
			
			Для Каждого СтрокаТабличнойЧастиТоваров Из ТабличнаяЧастьТовары Цикл
				
				Если ОбъектРасчетаХешСуммы.Найти(СтрокаТабличнойЧастиТоваров.КорректируемыйСДИЗ) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ОбъектРасчетаХешСуммы.Добавить(СтрокаТабличнойЧастиТоваров.КорректируемыйСДИЗ);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ОбъектРасчетаХешСуммы <> Неопределено Тогда
			
			ПараметрыРасчета = ПараметрыРасчетаХешСуммКорректировочногоСДИЗ();
			ПараметрыРасчета.ОбъектРасчета      = ОбъектРасчетаХешСуммы;
			ПараметрыРасчета.МассивСтрокРасчета = МассивСтрокРасчета;
			
			СоответствиеХешСуммСтарых = ХешСуммыСтрокКорректировочногоСДИЗ(ПараметрыРасчета);
			
		КонецЕсли;

	КонецЕсли;

	ПараметрыРасчета = ПараметрыРасчетаХешСуммКорректировочногоСДИЗ();
	ПараметрыРасчета.ОбъектРасчета      = ДокументОбъект;
	ПараметрыРасчета.МассивСтрокРасчета = МассивСтрокРасчета;

	СоответствиеХешСуммНовых = ХешСуммыСтрокКорректировочногоСДИЗ(ПараметрыРасчета);

	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧастьТовары Цикл

		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.КорректируемыйСДИЗ) Тогда
			Продолжить;
		КонецЕсли;

		Если РассчитатьИсходныйХеш Тогда

			ХешСуммаИсходная = СоответствиеХешСуммСтарых.Получить(СтрокаТабличнойЧасти.КорректируемыйСДИЗ);

			Если Не ХешСуммаИсходная = Неопределено Тогда
				СтрокаТабличнойЧасти.ХешСуммаИсходная = ХешСуммаИсходная;
			КонецЕсли;

		КонецЕсли;

		ХешСуммаНовая = СоответствиеХешСуммНовых.Получить(СтрокаТабличнойЧасти.КорректируемыйСДИЗ);

		Если Не ХешСуммаНовая = Неопределено Тогда
			СтрокаТабличнойЧасти.ХешСуммаНовая = ХешСуммаНовая;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Заполнение таблицы корректировок по Корректировке оформления СДИЗ
// 
// Параметры:
//  ДокументОбъект - ДокументОбъект.ОформлениеСДИЗЗЕРНО - Документ для заполнения корректировок
//  ТабличнаяЧастьТовары - Неопределено, ТаблицаЗначений - таблица для расчета. По умолчанию берется из табличной части ДокументОбъект.Товары
//  ТоварыПогашенияИОтказы - Неопределено, ТаблицаЗначений - таблица данных погашения и отказов. Передается или рассчитывается на ходу.
//  ОтказыОтПогашенияКАннулированию - Неопределено, ТаблицаЗначений - таблица отказов от погашения для аннулирования. Передается или рассчитывается на ходу.
//  ИдентификаторИзменяемойСтроки - Неопределено, Число - идентификатор строки табличной части, передается, если требуется расчет только по конкретным строкам
Процедура ЗаполнитьДанныеКорректировкиПоДокументуКорректировочныйСДИЗ(ДокументОбъект, ТабличнаяЧастьТовары = Неопределено, ТоварыПогашенияИОтказы = Неопределено, ОтказыОтПогашенияКАннулированию = Неопределено, ИдентификаторИзменяемойСтроки = Неопределено) Экспорт

	Если Не ДокументОбъект.Корректировочный Тогда
		Возврат;
	КонецЕсли;

	Если ТабличнаяЧастьТовары = Неопределено Тогда
		ТабличнаяЧастьТовары = ДокументОбъект.Товары;
	КонецЕсли;

	Если ТипЗнч(ТабличнаяЧастьТовары) = Тип("ТаблицаЗначений") Тогда

		Если ТабличнаяЧастьТовары.Колонки.Найти("ЕстьОшибкиКорректировкиСДИЗ") = Неопределено Тогда
			ТабличнаяЧастьТовары.Колонки.Добавить("ЕстьОшибкиКорректировкиСДИЗ", Новый ОписаниеТипов("Булево"));
		КонецЕсли;

		Если ТабличнаяЧастьТовары.Колонки.Найти("КомментарийКорректировки") = Неопределено Тогда
			ТабличнаяЧастьТовары.Колонки.Добавить("КомментарийКорректировки", ОбщегоНазначения.ОписаниеТипаСтрока(0));
		КонецЕсли;
		
		Если ТабличнаяЧастьТовары.Колонки.Найти("ХешСуммаИсходная") = Неопределено Тогда
			ТабличнаяЧастьТовары.Колонки.Добавить("ХешСуммаИсходная", ОбщегоНазначения.ОписаниеТипаСтрока(0));
		КонецЕсли;
	
		Если ТабличнаяЧастьТовары.Колонки.Найти("ХешСуммаНовая") = Неопределено Тогда
			ТабличнаяЧастьТовары.Колонки.Добавить("ХешСуммаНовая", ОбщегоНазначения.ОписаниеТипаСтрока(0));
		КонецЕсли;

	КонецЕсли;

	Если ТоварыПогашенияИОтказы = Неопределено
		Или ОтказыОтПогашенияКАннулированию = Неопределено Тогда

		ТаблицаКорректируемыхДанных = ИнициализироватьТаблицуДляРасчетаГашенийОтказовОтГашенийПоКорректируемымСДИЗ();

		Для Каждого СтрокаТоваров Из ТабличнаяЧастьТовары Цикл

			Если Не ЗначениеЗаполнено(СтрокаТоваров.КорректируемыйСДИЗ) Тогда
				Продолжить;
			КонецЕсли;

			НоваяСтрокаДанных = ТаблицаКорректируемыхДанных.Добавить();

			НоваяСтрокаДанных.Идентификатор      = СтрокаТоваров.Идентификатор;
			НоваяСтрокаДанных.КорректируемыйСДИЗ = СтрокаТоваров.КорректируемыйСДИЗ;
			НоваяСтрокаДанных.Партия             = ?(ЗначениеЗаполнено(СтрокаТоваров.ВыделеннаяПартия), СтрокаТоваров.ВыделеннаяПартия, СтрокаТоваров.Партия);

		КонецЦикла;

		РезультирующиеДанные = ДанныеГашенияОтказаОтГашенияПоКорректируемымСДИЗ(ТаблицаКорректируемыхДанных);

		Если ТоварыПогашенияИОтказы = Неопределено Тогда

			ТоварыПогашенияИОтказы = РезультирующиеДанные.ТоварыПогашенияИОтказы;

		КонецЕсли;

		Если ОтказыОтПогашенияКАннулированию = Неопределено Тогда

			ОтказыОтПогашенияКАннулированию = РезультирующиеДанные.ОтказыОтПогашенияКАннулированию;

		КонецЕсли;

	КонецЕсли;

	МассивСтрокРасчета = Новый Массив;

	Если Не ИдентификаторИзменяемойСтроки = Неопределено Тогда

		ИзменяемаяСтрока = ТабличнаяЧастьТовары.НайтиПоИдентификатору(ИдентификаторИзменяемойСтроки);

		Если Не ИзменяемаяСтрока = Неопределено Тогда

			ИзменяемаяСтрока.КомментарийКорректировки = "";
			МассивСтрокРасчета.Добавить(ИзменяемаяСтрока);

		КонецЕсли;

	Иначе

		Для Каждого СтрокаРасчета Из ТабличнаяЧастьТовары Цикл
			МассивСтрокРасчета.Добавить(СтрокаРасчета);
		КонецЦикла;

	КонецЕсли;

	ШаблонСообщенияОтказКорректировкиПриНаличииГашений       = НСтр("ru = 'Корректировка СДИЗ невозможна.
		|По СДИЗ погашено - %1 кг.'");
	ШаблонСообщенияПогашеноБолееЧемУстанавливаемоеКоличество = НСтр("ru = 'По СДИЗ уже погашено - %1 кг.
		|Нельзя установить количество %2 кг.'");
	ШаблонСообщенияНельзяАннулироватьОтказОтГашения          = НСтр("ru = 'Нельзя аннулировать отказ погашения от %1.
		|Партия %2 уже была использована с остатков на складе.'");

	Для Каждого СтрокаРасчета Из МассивСтрокРасчета Цикл

		СтруктураОтбора = Новый Структура("КорректируемыйСДИЗ", СтрокаРасчета.КорректируемыйСДИЗ);

		СтрокиДанныхКорректировокПоСДИЗ     = ДокументОбъект.ДанныеКорректировки.НайтиСтроки(СтруктураОтбора);
		СтрокиДанныхПогашенийПоСДИЗ         = ТоварыПогашенияИОтказы.НайтиСтроки(СтруктураОтбора);
		СтрокиОтказовПогашенийАннулирований = ОтказыОтПогашенияКАннулированию.НайтиСтроки(СтруктураОтбора);

		Для Каждого СтрокаДанныхКорректировки Из СтрокиДанныхКорректировокПоСДИЗ Цикл
			ДокументОбъект.ДанныеКорректировки.Удалить(СтрокаДанныхКорректировки);
		КонецЦикла;

		Если СтрокиДанныхПогашенийПоСДИЗ.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;

		ДанныеПогашенияПоСДИЗ = СтрокиДанныхПогашенийПоСДИЗ[0];
		СтрокаРасчета.ЕстьОшибкиКорректировкиСДИЗ  = Ложь;

		КоличествоДоступное = ДанныеПогашенияПоСДИЗ.КоличествоИсходное - ДанныеПогашенияПоСДИЗ.КоличествоОтказПогашения;

		Если СтрокаРасчета.ХешСуммаНовая <> СтрокаРасчета.ХешСуммаИсходная Тогда

			// изменение шапки документа или документов сертификации по строке,
			// требуется создание корректировочного документа

			Если ДанныеПогашенияПоСДИЗ.КоличествоПогашено > 0 Тогда
					
				// уже есть гашения, корректировать такой СДИЗ нельзя
				СтрокаРасчета.ЕстьОшибкиКорректировкиСДИЗ  = Истина;
				СтрокаРасчета.КомментарийКорректировки = 
					СтрШаблон(ШаблонСообщенияОтказКорректировкиПриНаличииГашений, Формат(ДанныеПогашенияПоСДИЗ.КоличествоПогашено, "ЧДЦ=3;"));
				Продолжить;
				
			КонецЕсли;
			
			Если КоличествоДоступное = СтрокаРасчета.КоличествоЗЕРНО Тогда

				// данные по количеству не изменились
				ОтказАннулирования = Ложь;
				Для Каждого СтрокаОтказовПогашенийАннулирований Из СтрокиОтказовПогашенийАннулирований Цикл

					Если Не СтрокаОтказовПогашенийАннулирований.РазрешеноАннулировать Тогда

						ОтказАннулирования = Истина;
						СтрокаРасчета.ЕстьОшибкиКорректировкиСДИЗ  = Истина;
						СтрокаРасчета.КомментарийКорректировки = СтрШаблон(ШаблонСообщенияНельзяАннулироватьОтказОтГашения,
							Формат(СтрокаОтказовПогашенийАннулирований.ДатаЗаявки, "ДФ=dd.MM.yyyy;"),
							СтрокаОтказовПогашенийАннулирований.НомерПартии);
						Прервать;

					КонецЕсли;

				КонецЦикла;

				Если ОтказАннулирования Тогда
					Продолжить;
				КонецЕсли;

				Для Каждого СтрокаОтказовПогашенийАннулирований Из СтрокиОтказовПогашенийАннулирований Цикл

					ДобавитьСтрокуАннулированиеОтказа(ДокументОбъект.ДанныеКорректировки,
						СтрокаРасчета,
						СтрокаОтказовПогашенийАннулирований);

				КонецЦикла;

				ДобавитьСтрокуКорректировкаСДИЗ(
					ДокументОбъект.ДанныеКорректировки, СтрокаРасчета, СтрокаРасчета.КоличествоЗЕРНО);

			ИначеЕсли КоличествоДоступное < СтрокаРасчета.КоличествоЗЕРНО Тогда

				// изменение шапки и увеличение количества
				КоличествоДляИзменения = СтрокаРасчета.КоличествоЗЕРНО - ДанныеПогашенияПоСДИЗ.КоличествоИсходное + ДанныеПогашенияПоСДИЗ.КоличествоОтказПогашения;
				ОтказАннулирования     = Ложь;
				
				Для Каждого СтрокаОтказовПогашенийАннулирований Из СтрокиОтказовПогашенийАннулирований Цикл

					Если Не СтрокаОтказовПогашенийАннулирований.РазрешеноАннулировать Тогда
						
						ОтказАннулирования = Истина;
						СтрокаРасчета.ЕстьОшибкиКорректировкиСДИЗ  = Истина;
						СтрокаРасчета.КомментарийКорректировки = СтрШаблон(ШаблонСообщенияНельзяАннулироватьОтказОтГашения,
							Формат(СтрокаОтказовПогашенийАннулирований.ДатаЗаявки, "ДФ=dd.MM.yyyy;"),
							СтрокаОтказовПогашенийАннулирований.НомерПартии);
						Прервать;
						
					КонецЕсли;
					
					ДобавитьСтрокуАннулированиеОтказа(
						ДокументОбъект.ДанныеКорректировки, СтрокаРасчета, СтрокаОтказовПогашенийАннулирований);

					КоличествоДляИзменения = КоличествоДляИзменения - СтрокаОтказовПогашенийАннулирований.КоличествоОтказаПогашения;

					Если КоличествоДляИзменения <= 0 Тогда
						Прервать;
					КонецЕсли;

				КонецЦикла;
				
				Если ОтказАннулирования Тогда
					Продолжить;
				КонецЕсли;
				
				ДобавитьСтрокуКорректировкаСДИЗ(
					ДокументОбъект.ДанныеКорректировки, СтрокаРасчета, ДанныеПогашенияПоСДИЗ.КоличествоИсходное);

				Если КоличествоДляИзменения < 0 Тогда

					// аннулировано отказов от гашения на бОльшую сумму, чем надо, надо скорректировать до нужного

					ДобавитьСтрокуОтказОтПогашения(
						ДокументОбъект.ДанныеКорректировки, СтрокаРасчета, -КоличествоДляИзменения);

				ИначеЕсли КоличествоДляИзменения > 0 Тогда

					// все отказы погашений уже аннулированы, но все равно требуется добавление количества,
					// нужно дооформлять новый СДИЗ

					ДобавитьСтрокуОформлениеСДИЗ(
						ДокументОбъект.ДанныеКорректировки, СтрокаРасчета, КоличествоДляИзменения);

				КонецЕсли;

			Иначе

				// изменение шапки и уменьшение количества

				КоличествоДляИзменения             = ДанныеПогашенияПоСДИЗ.КоличествоИсходное - ДанныеПогашенияПоСДИЗ.КоличествоОтказПогашения;

				ОтказАннулирования = Ложь;
				Для Каждого СтрокаОтказовПогашенийАннулирований Из СтрокиОтказовПогашенийАннулирований Цикл

					Если Не СтрокаОтказовПогашенийАннулирований.РазрешеноАннулировать Тогда

						ОтказАннулирования = Истина;
						СтрокаРасчета.ЕстьОшибкиКорректировкиСДИЗ  = Истина;
						СтрокаРасчета.КомментарийКорректировки = СтрШаблон(ШаблонСообщенияНельзяАннулироватьОтказОтГашения,
							Формат(СтрокаОтказовПогашенийАннулирований.ДатаЗаявки, "ДФ=dd.MM.yyyy;"),
							СтрокаОтказовПогашенийАннулирований.НомерПартии);
						Прервать;

					КонецЕсли;

				КонецЦикла;

				Если ОтказАннулирования Тогда
					Продолжить;
				КонецЕсли;

				Для Каждого СтрокаОтказовПогашенийАннулирований Из СтрокиОтказовПогашенийАннулирований Цикл

					ДобавитьСтрокуАннулированиеОтказа(
						ДокументОбъект.ДанныеКорректировки, СтрокаРасчета, СтрокаОтказовПогашенийАннулирований);

				КонецЦикла;

				СтруктураОтбора = Новый Структура("КорректируемыйСДИЗ, РазрешеноАннулировать", СтрокаРасчета.КорректируемыйСДИЗ, Ложь);
				СтрокиОтказовНедоступныеДляАннулирования = ОтказыОтПогашенияКАннулированию.НайтиСтроки(СтруктураОтбора);

				Если СтрокаРасчета.КоличествоЗЕРНО = 0
					И ДанныеПогашенияПоСДИЗ.КоличествоПогашено = 0
					И СтрокиОтказовНедоступныеДляАннулирования.Количество() = 0 Тогда

					// аннулирование с корректировкой: зачем корректировать? просто аннулировать
					Если ДанныеПогашенияПоСДИЗ.КоличествоПогашено > СтрокаРасчета.КоличествоЗЕРНО Тогда

						// если погасили больше, чем устанавливаемое новое количество,
						// нельзя, надо договариваться, чтобы клиент оформил отказ от гашения
						СтрокаРасчета.ЕстьОшибкиКорректировкиСДИЗ  = Истина;
						СтрокаРасчета.КомментарийКорректировки = СтрШаблон(ШаблонСообщенияПогашеноБолееЧемУстанавливаемоеКоличество,
							Формат(ДанныеПогашенияПоСДИЗ.КоличествоПогашено, "ЧДЦ=3;"),
							СтрокаРасчета.КоличествоЗЕРНО);

					Иначе

						// аннулирование партии, аннулирование СДИЗ, аннулирование отказов

						Для Каждого СтрокаОтказовПогашенийАннулирований Из СтрокиОтказовПогашенийАннулирований Цикл

							ДобавитьСтрокуАннулированиеОтказа(
								ДокументОбъект.ДанныеКорректировки, СтрокаРасчета, СтрокаОтказовПогашенийАннулирований);

						КонецЦикла;
						
						ДобавитьСтрокуАннулированиеСДИЗ(
							ДокументОбъект.ДанныеКорректировки, СтрокаРасчета, ДанныеПогашенияПоСДИЗ.КоличествоИсходное);
						
						ДобавитьСтрокуАннулированиеПартии(
							ДокументОбъект.ДанныеКорректировки, СтрокаРасчета, ДанныеПогашенияПоСДИЗ.КоличествоИсходное);

					КонецЕсли;

				ИначеЕсли ДанныеПогашенияПоСДИЗ.КоличествоПогашено > СтрокаРасчета.КоличествоЗЕРНО Тогда

					ДобавитьСтрокуКорректировкаСДИЗ(
						ДокументОбъект.ДанныеКорректировки, СтрокаРасчета, ДанныеПогашенияПоСДИЗ.КоличествоИсходное);

					// если погасили больше, чем устанавливаемое новое количество,
					// нельзя, надо договариваться, чтобы клиент оформил отказ от гашения
					СтрокаРасчета.ЕстьОшибкиКорректировкиСДИЗ  = Истина;
					СтрокаРасчета.КомментарийКорректировки = СтрШаблон(ШаблонСообщенияПогашеноБолееЧемУстанавливаемоеКоличество,
						Формат(ДанныеПогашенияПоСДИЗ.КоличествоПогашено, "ЧДЦ=3;"),
						Формат(СтрокаРасчета.КоличествоЗЕРНО, "ЧДЦ=3;"));

				Иначе

					ДобавитьСтрокуКорректировкаСДИЗ(
						ДокументОбъект.ДанныеКорректировки, СтрокаРасчета, ДанныеПогашенияПоСДИЗ.КоличествоИсходное);

					КоличествоЗЕРНО = ДанныеПогашенияПоСДИЗ.КоличествоИсходное - СтрокаРасчета.КоличествоЗЕРНО;
					ДобавитьСтрокуОтказОтПогашения(
						ДокументОбъект.ДанныеКорректировки, СтрокаРасчета, КоличествоЗЕРНО);

				КонецЕсли;

			КонецЕсли;

		ИначеЕсли КоличествоДоступное < СтрокаРасчета.КоличествоЗЕРНО Тогда

			// увеличение количества

			КоличествоДляИзменения             = СтрокаРасчета.КоличествоЗЕРНО - ДанныеПогашенияПоСДИЗ.КоличествоИсходное + ДанныеПогашенияПоСДИЗ.КоличествоОтказПогашения;

			Для Каждого СтрокаОтказовПогашенийАннулирований Из СтрокиОтказовПогашенийАннулирований Цикл

				Если Не СтрокаОтказовПогашенийАннулирований.РазрешеноАннулировать Тогда
					Продолжить;
				КонецЕсли;

				ДобавитьСтрокуАннулированиеОтказа(
					ДокументОбъект.ДанныеКорректировки, СтрокаРасчета, СтрокаОтказовПогашенийАннулирований);
				КоличествоДляИзменения = КоличествоДляИзменения - СтрокаОтказовПогашенийАннулирований.КоличествоОтказаПогашения;

				Если КоличествоДляИзменения <= 0 Тогда
					Прервать;
				КонецЕсли;

			КонецЦикла;

			Если КоличествоДляИзменения < 0 Тогда

				// аннулировано отказов от гашения на бОльшую сумму, чем надо, надо скорректировать до нужного

				ДобавитьСтрокуОтказОтПогашения(
					ДокументОбъект.ДанныеКорректировки, СтрокаРасчета, -КоличествоДляИзменения);

			ИначеЕсли КоличествоДляИзменения > 0 Тогда

				// все отказы погашений уже аннулированы, но все равно требуется добавление количества,
				// нужно дооформлять новый СДИЗ

				ДобавитьСтрокуОформлениеСДИЗ(
					ДокументОбъект.ДанныеКорректировки, СтрокаРасчета, КоличествоДляИзменения);

			КонецЕсли;

		ИначеЕсли КоличествоДоступное > СтрокаРасчета.КоличествоЗЕРНО Тогда

			// уменьшение количества

			СтруктураОтбора = Новый Структура("КорректируемыйСДИЗ, РазрешеноАннулировать", СтрокаРасчета.КорректируемыйСДИЗ, Ложь);
			СтрокиОтказовНедоступныеДляАннулирования = ОтказыОтПогашенияКАннулированию.НайтиСтроки(СтруктураОтбора);

			Если СтрокаРасчета.КоличествоЗЕРНО = 0
				И ДанныеПогашенияПоСДИЗ.КоличествоПогашено = 0
				И СтрокиОтказовНедоступныеДляАннулирования.Количество() = 0 Тогда

				// аннулирование партии, аннулирование СДИЗ, аннулирование отказов

				Для Каждого СтрокаОтказовПогашенийАннулирований Из СтрокиОтказовПогашенийАннулирований Цикл

					ДобавитьСтрокуАннулированиеОтказа(
						ДокументОбъект.ДанныеКорректировки, СтрокаРасчета, СтрокаОтказовПогашенийАннулирований);

				КонецЦикла;

				ДобавитьСтрокуАннулированиеСДИЗ(
					ДокументОбъект.ДанныеКорректировки, СтрокаРасчета, ДанныеПогашенияПоСДИЗ.КоличествоИсходное);
					
				ДобавитьСтрокуАннулированиеПартии(
					ДокументОбъект.ДанныеКорректировки, СтрокаРасчета, ДанныеПогашенияПоСДИЗ.КоличествоИсходное);

			ИначеЕсли ДанныеПогашенияПоСДИЗ.КоличествоПогашено > СтрокаРасчета.КоличествоЗЕРНО Тогда

				// если погасили больше, чем устанавливаемое новое количество,
				// нельзя, надо договариваться, чтобы клиент оформил отказ от гашения
				СтрокаРасчета.ЕстьОшибкиКорректировкиСДИЗ  = Истина;
				СтрокаРасчета.КомментарийКорректировки = СтрШаблон(ШаблонСообщенияПогашеноБолееЧемУстанавливаемоеКоличество,
					Формат(ДанныеПогашенияПоСДИЗ.КоличествоПогашено, "ЧДЦ=3;"),
					Формат(СтрокаРасчета.КоличествоЗЕРНО, "ЧДЦ=3;"));

			Иначе

				КоличествоЗЕРНО = ДанныеПогашенияПоСДИЗ.КоличествоИсходное - СтрокаРасчета.КоличествоЗЕРНО - ДанныеПогашенияПоСДИЗ.КоличествоОтказПогашения;
				ДобавитьСтрокуОтказОтПогашения(
					ДокументОбъект.ДанныеКорректировки, СтрокаРасчета, КоличествоЗЕРНО);

			КонецЕсли;

		Иначе
			Продолжить;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Функция возвращает данные для стандартной причины отказа от погашения
// 
// Возвращаемое значение:
//  Структура - Данные причины отказа от погашения по умолчанию:
// * Причина - СправочникСсылка.КлассификаторНСИЗЕРНО - причина отказа от погашения
// * Примечание - Строка - текстовое примечание
Функция ДанныеПричиныОтказаОтПогашенияПоУмолчанию() Экспорт
	
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("Причина",    Справочники.КлассификаторНСИЗЕРНО.СсылкаПоИдентификаторуКлассификатораНСИ(
		"2", Перечисления.ВидыКлассификаторовЗЕРНО.ПричинаВозвратаПартии));
	СтруктураВозврата.Вставить("Примечание", НСтр("ru = 'На основании акта о расхождениях'"));
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Формирование табличного документа с описанием данных по корректируемому СДИЗ - данные шапки, погашений, отказов погашений
// 
// Параметры:
//  КорректируемыйСДИЗ - ДокументСсылка.ОформлениеСДИЗЗЕРНО - Корректируемый СДИЗ
// 
// Возвращаемое значение:
//  ТабличныйДокумент - сформированное по макету представление данных
Функция СформироватьТабличноеПредставлениеДанныхПоСДИЗ(КорректируемыйСДИЗ) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент();
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ОформлениеСДИЗЗЕРНО.РасширеннаяИнформацияПоСДИЗ");
	
	РезультатЗапросаПоСДИЗ = СформироватьДанныеПечатнойФормыПоСДИЗ(КорректируемыйСДИЗ);
	
	Шапка = РезультатЗапросаПоСДИЗ.Шапка.Выбрать();
	
	Если Шапка.Следующий() Тогда
	
		ОбластьИнформацияПоСДИЗ = Макет.ПолучитьОбласть("ОбластьИнформацияПоСДИЗ");
		ОбластьИнформацияПоСДИЗ.Параметры.Заполнить(Шапка);
		
		ТабличныйДокумент.Вывести(ОбластьИнформацияПоСДИЗ);
		
		ОбластьИсторияПогашенийЗаголовок = Макет.ПолучитьОбласть("ОбластьИсторияПогашенийЗаголовок");
		ТабличныйДокумент.Вывести(ОбластьИсторияПогашенийЗаголовок);
		
		ОбластьОтсутствуетРаздел = Макет.ПолучитьОбласть("ОбластьОтсутствуетРаздел");
		ДанныеПогашений = РезультатЗапросаПоСДИЗ.ДанныеПогашений.Выбрать();
		
		Если ДанныеПогашений.Количество() = 0 Тогда
			ТабличныйДокумент.Вывести(ОбластьОтсутствуетРаздел);
		Иначе
		
			Пока ДанныеПогашений.Следующий() Цикл
				
				ОбластьПогашения = Макет.ПолучитьОбласть("ОбластьДанныеПогашения");
				ОбластьПогашения.Параметры.Заполнить(ДанныеПогашений);
			
				ТабличныйДокумент.Вывести(ОбластьПогашения);
				
			КонецЦикла;
			
		КонецЕсли;
		
		ОбластьИсторияОтказовПогашенийЗаголовок = Макет.ПолучитьОбласть("ОбластьИсторияОтказовПогашенийЗаголовок");
		ТабличныйДокумент.Вывести(ОбластьИсторияОтказовПогашенийЗаголовок);
		
		ДанныеОтказовПогашений = РезультатЗапросаПоСДИЗ.ДанныеОтказовПогашений.Выбрать();
		
		Если ДанныеОтказовПогашений.Количество() = 0 Тогда
			ТабличныйДокумент.Вывести(ОбластьОтсутствуетРаздел);
		Иначе
		
			Пока ДанныеОтказовПогашений.Следующий() Цикл
				
				ОбластьОтказаПогашения = Макет.ПолучитьОбласть("ОбластьДанныеОтказаПогашения");
				ОбластьОтказаПогашения.Параметры.Заполнить(ДанныеОтказовПогашений);
				
				ТабличныйДокумент.Вывести(ОбластьОтказаПогашения);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Процедура заполнения корректировочного СДИЗ на основании таблицы корректировки
//  прикладного документа
// 
// Параметры:
//  ДокументОбъект - ДокументОбъект.ОформлениеСДИЗЗЕРНО - заполняемый документ оформления СДИЗ
//  Запрос         - Запрос - запрос получения данных по прикладному документу
//    должен содержать временную таблицу ТоварыСерии с расчетом данных по документу
//  Основание      - ДокументОбъект - прикладной документ
//  ТаблицаКорректируемыйДокумент - ТаблицаЗначений - Таблица с колонками ПредставлениеДокумента, ДокументОснование
//  ОсобенностьУчета - ПеречислениеСсылка.ВидыПродукцииИС, Массив из ПеречислениеСсылка.ВидыПродукцииИС - особенность учета продукции.
//
Процедура ЗаполнитьКорректировочныйСДИЗНаОснованииТаблицыКорректировки(ДокументОбъект, Запрос, Основание, ТаблицаКорректируемыйДокумент, ОсобенностьУчета) Экспорт
	
	ДокументОбъект.Товары.Очистить();
	ДокументОбъект.ДанныеКорректировки.Очистить();
	
	ТекстыЗапросов = ТекстыЗапросовЗаполненияКорректировочногоОформленияСДИЗПриВводеНаОснованииПрикладныхДокументов();
	
	МассивОперацийУвеличенияКоличества = Новый Массив;
	МассивОперацийУвеличенияКоличества.Добавить(Перечисления.ОперацииКорректировкиСДИЗ.АннулированиеОтказаОтПогашения);
	МассивОперацийУвеличенияКоличества.Добавить(Перечисления.ОперацииКорректировкиСДИЗ.ОформлениеСДИЗ);
	
	МассивОперацийУменьшенияКоличества = Новый Массив;
	МассивОперацийУменьшенияКоличества.Добавить(Перечисления.ОперацииКорректировкиСДИЗ.ОтказОтПогашения);
	МассивОперацийУменьшенияКоличества.Добавить(Перечисления.ОперацииКорректировкиСДИЗ.АннулированиеСДИЗ);
	
	Запрос.УстановитьПараметр("ЭтаСсылка",                          ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("КонечныеСтатусы",                    КонечныеСтатусы(Ложь));
	Запрос.УстановитьПараметр("ОсобенностьУчета",                   ОсобенностьУчета);
	Запрос.УстановитьПараметр("МассивОперацийУвеличенияКоличества", МассивОперацийУвеличенияКоличества);
	Запрос.УстановитьПараметр("МассивОперацийУменьшенияКоличества", МассивОперацийУменьшенияКоличества);
	Запрос.УстановитьПараметр("ТаблицаКорректируемыйДокумент",      ТаблицаКорректируемыйДокумент);
	
	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапросов);
	
	//@skip-warning
	ТаблицаДоступныеДляКорректировкиСДИЗ = РезультатЗапроса["ДоступныеДляКорректировкиСДИЗ"].Выгрузить();
	//@skip-warning
	ТаблицаТоварыКОформлению             = РезультатЗапроса["ТоварыКОформлению"].Выгрузить();
	//@skip-warning
	ДанныеКорректируемогоДокумента       = РезультатЗапроса["КорректируемыйДокумент"].Выбрать();
	
	Если ДанныеКорректируемогоДокумента.Следующий() Тогда
		
		Если Не ДанныеКорректируемогоДокумента.ОформлениеСДИЗЗавершено И Не ДанныеКорректируемогоДокумента.ДокументОснование = Основание Тогда
			
			ШаблонСообщения = НСтр("ru = 'Для оформления СДИЗ по документу %1 завершите оформление СДИЗ по документу %2.'");
			ВызватьИсключение СтрШаблон(ШаблонСообщения,
				ДанныеКорректируемогоДокумента.ПредставлениеДокумента,
				ДанныеКорректируемогоДокумента.ДокументОснование);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТаблицаЗаполненияПоСДИЗ = ИнициализацияТаблицыПоискаКорректировкиПоСДИЗ();
	
	Для Каждого СтрокаДоступныеСДИЗДляКорректировки Из ТаблицаДоступныеДляКорректировкиСДИЗ Цикл
		
		НоваяСтрокаПоиска = ТаблицаЗаполненияПоСДИЗ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПоиска, СтрокаДоступныеСДИЗДляКорректировки);
		
	КонецЦикла;
	
	МассивРеквизитовЗаполненияИзШапки = Новый Массив;
	Для Каждого РеквизитШапки Из Метаданные.Документы.ОформлениеСДИЗЗЕРНО.Реквизиты Цикл
		МассивРеквизитовЗаполненияИзШапки.Добавить(РеквизитШапки.Имя);
	КонецЦикла;
	
	РеквизитыЗаполненияИзШапкиПрикладногоДокумента = СтрСоединить(МассивРеквизитовЗаполненияИзШапки, ",");
	РеквизитыДляВосстановления                     = Новый Структура(РеквизитыЗаполненияИзШапкиПрикладногоДокумента);
	ЗаполнитьЗначенияСвойств(РеквизитыДляВосстановления, ДокументОбъект);
	
	Если ТаблицаДоступныеДляКорректировкиСДИЗ.Количество() = 0 Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru='По документу %1 отсутствуют оформленные СДИЗ для корректировки.'"), Основание);
	КонецЕсли;
	
	ДокументОбъект.Заполнить(ТаблицаДоступныеДляКорректировкиСДИЗ);
	
	Для Каждого СтрокаТоварыКОформлению Из ТаблицаТоварыКОформлению Цикл
		
		КоличествоДляОформленияСДИЗ = СтрокаТоварыКОформлению.Количество;
		
		СтруктураОтбора = Новый Структура("Номенклатура, Серия, Характеристика",
			СтрокаТоварыКОформлению.Номенклатура,
			СтрокаТоварыКОформлению.Серия,
			СтрокаТоварыКОформлению.Характеристика);
			
		СтрокиДоступныхДляКорректировкиСДИЗ = ДокументОбъект.Товары.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого СтрокаДоступныеСДИЗДляКорректировки Из СтрокиДоступныхДляКорректировкиСДИЗ Цикл
		
			Если КоличествоДляОформленияСДИЗ = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если КоличествоДляОформленияСДИЗ > 0 Тогда
				
				СтрокаДоступныеСДИЗДляКорректировки.Количество = СтрокаДоступныеСДИЗДляКорректировки.Количество + КоличествоДляОформленияСДИЗ;
				КоличествоДляОформленияСДИЗ = 0;
				
			Иначе
				
				КоличествоДоступноеДляИзменения = Мин(-КоличествоДляОформленияСДИЗ, СтрокаДоступныеСДИЗДляКорректировки.Количество);
				
				СтрокаДоступныеСДИЗДляКорректировки.Количество = СтрокаДоступныеСДИЗДляКорректировки.Количество - КоличествоДоступноеДляИзменения;
				КоличествоДляОформленияСДИЗ = КоличествоДляОформленияСДИЗ + КоличествоДоступноеДляИзменения;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если КоличествоДляОформленияСДИЗ <> 0 Тогда
			
			Если КоличествоДляОформленияСДИЗ > 0 Тогда
				
				НоваяСтрокаТоваров = ДокументОбъект.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТоваров, СтрокаТоварыКОформлению);
				
				НоваяСтрокаТоваров.Идентификатор = Новый УникальныйИдентификатор;
				
				НоваяСтрокаТоваров.Количество = КоличествоДляОформленияСДИЗ;
				
			Иначе
				
				// в минус от исходного количества не могли уйти, только если что-то недооформлено по исходному количеству
				ВызватьИсключение СтрШаблон(НСтр("ru='По товару %1 отсутствует необходимое количество оформленных СДИЗ для корректировки.'"),
					СтрокаТоварыКОформлению.Номенклатура);
				
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
	ЕдиницаИзмеренияКилограмм = ИнтеграцияИСВызовСервера.ЕдиницаИзмеренияКилограмм();
	
	Для Каждого СтрокаТовары Из ДокументОбъект.Товары Цикл
		
		Коэффициент = ИнтеграцияИСВызовСервера.КоэффициентУпаковки(ЕдиницаИзмеренияКилограмм, СтрокаТовары.Номенклатура);
		
		Если Не ЗначениеЗаполнено(Коэффициент) Тогда
			Коэффициент = 1;
		КонецЕсли;
	
		СтрокаТовары.КоличествоЗЕРНО = СтрокаТовары.Количество / Коэффициент;
		
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект, РеквизитыДляВосстановления);
	
	ТабличнаяЧастьТовары = ДокументОбъект.Товары.Выгрузить();
	
	РассчитатьХешСуммыПоДокументуКорректировочныйСДИЗ(ДокументОбъект, ТабличнаяЧастьТовары, Истина);
	ЗаполнитьДанныеКорректировкиПоДокументуКорректировочныйСДИЗ(ДокументОбъект, ТабличнаяЧастьТовары);
	
	Для Каждого СтрокаДанныхКорректировки Из ДокументОбъект.ДанныеКорректировки Цикл
		
		СтруктураПоиска = Новый Структура("КорректируемыйСДИЗ", СтрокаДанныхКорректировки.КорректируемыйСДИЗ);
		СтрокиТоваров   = ДокументОбъект.Товары.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиТоваров.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Коэффициент = ИнтеграцияИСВызовСервера.КоэффициентУпаковки(ЕдиницаИзмеренияКилограмм, СтрокиТоваров[0].Номенклатура);
		
		Если Не ЗначениеЗаполнено(Коэффициент) Тогда
			Коэффициент = 1;
		КонецЕсли;
	
		СтрокаДанныхКорректировки.Количество = СтрокаДанныхКорректировки.КоличествоЗЕРНО * Коэффициент;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Поля.Добавить("Ссылка");
	Поля.Добавить("Номер");
	Поля.Добавить("Дата");
	Поля.Добавить("Корректировочный");
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Представление = ИнтеграцияЗЕРНО.ЗаголовокДокументаПоддерживающегоКорректировку(Данные.Ссылка, Данные.Корректировочный, Данные.Номер, Данные.Дата);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных;

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаОстаткиПартийЗЕРНО(Запрос, ТекстыЗапроса, Регистры);
	ИнтеграцияИСПереопределяемый.ТекстыЗапросовТаблицыДвижения(Запрос, ТекстыЗапроса, Регистры, ДокументСсылка, ДополнительныеСвойства);
	
	ИнтеграцияИС.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ДействияПриОбменеЗЕРНО

Процедура ОбработкаЗагрузкиПолученныхДанных(ЭлементОчереди, ПараметрыОбмена, ПолученныеДанные, ИзмененныеОбъекты) Экспорт
	
	ВидПродукции                 = ЭлементОчереди.ВидПродукции;
	РеквизитыИсходящегоСообщения = ЭлементОчереди.РеквизитыИсходящегоСообщения;
	ПараметрыЗапроса             = РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
	
	Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРасчетСтатуса
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗКорректировочныйРасчетСтатуса
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииРасчетСтатуса
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗРасчетСтатуса
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗОтказПогашенияСДИЗРасчетСтатуса
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗАннулированиеОтказаПогашенияСДИЗРасчетСтатуса
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеКорректировкиСДИЗРасчетСтатуса
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.АннулированиеФормированияПартииРасчетСтатуса
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗПартииРасчетСтатуса
		
		Тогда
		
		Если ЭлементОчереди.Операция <> Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗРасчетСтатуса Тогда
			
			ПараметрыОбработки  = Новый Массив;
			
			Если ПараметрыЗапроса.Свойство("ОбработанныеСтроки")
				И ПараметрыЗапроса.ОбработанныеСтроки.Количество() Тогда
				
				ИмяТЧ = "Товары";
				Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРасчетСтатуса
					Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗКорректировочныйРасчетСтатуса
					Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеКорректировкиСДИЗРасчетСтатуса Тогда
					ИмяКолонки = "СДИЗ";
				ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииРасчетСтатуса Тогда
					ИмяКолонки = "ВыделеннаяПартия";
				КонецЕсли;
				
				ПараметрыОбработки.Добавить(Новый Структура("ИсточникДанных, ИмяКолонки, ИмяТЧ", "ОбработанныеСтроки", ИмяКолонки, ИмяТЧ));
				
			КонецЕсли;
			
			Если ПараметрыЗапроса.Свойство("СформированныеПартии")
				И ПараметрыЗапроса.СформированныеПартии.Количество() Тогда
				
				Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗОтказПогашенияСДИЗРасчетСтатуса
					Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеКорректировкиСДИЗРасчетСтатуса
					Тогда
					ИмяТЧ = "ДанныеКорректировки";
					ИмяКолонки = "Партия";
				Иначе
					ИмяТЧ = "Товары";
					ИмяКолонки = "НоваяПартия";
				КонецЕсли;
				
				ПараметрыОбработки.Добавить(Новый Структура("ИсточникДанных, ИмяКолонки, ИмяТЧ", "СформированныеПартии", ИмяКолонки, ИмяТЧ));
				
			КонецЕсли;
			
			Если ПараметрыЗапроса.Свойство("СформированныеПартииДанныеКорректировки")
				И ПараметрыЗапроса.СформированныеПартииДанныеКорректировки.Количество() Тогда
				
				ИмяТЧ = "ДанныеКорректировки";
				ИмяКолонки = "ВыделеннаяПартия";
				
				ПараметрыОбработки.Добавить(Новый Структура("ИсточникДанных, ИмяКолонки, ИмяТЧ", "СформированныеПартииДанныеКорректировки", ИмяКолонки, ИмяТЧ));
				
			КонецЕсли;
			
			Если ПараметрыОбработки.Количество() Тогда
				
				Блокировка = Новый БлокировкаДанных();
				ЭлементБлокировки = Блокировка.Добавить(Метаданные.Документы.ОформлениеСДИЗЗЕРНО.ПолноеИмя());
				ЭлементБлокировки.УстановитьЗначение("Ссылка", ЭлементОчереди.СсылкаНаОбъект);
				
				Попытка
					
					Блокировка.Заблокировать();
					ДокументОбъект = ЭлементОчереди.СсылкаНаОбъект.ПолучитьОбъект();
					
					Для Каждого ПараметрОбработки Из ПараметрыОбработки Цикл
						
						Для Каждого КлючИЗначение Из ПараметрыЗапроса[ПараметрОбработки.ИсточникДанных] Цикл
							
							СтруктураПоиска = Новый Структура();
							СтруктураПоиска.Вставить("Идентификатор", КлючИЗначение.Ключ);
							
							СтрокиДокумента = ДокументОбъект[ПараметрОбработки.ИмяТЧ].НайтиСтроки(СтруктураПоиска);
							Для Каждого СтрокаТаблицыТовары Из СтрокиДокумента Цикл
								СтрокаТаблицыТовары[ПараметрОбработки.ИмяКолонки] = КлючИЗначение.Значение;
							КонецЦикла;
							
						КонецЦикла;
					
					КонецЦикла;
					
					ДокументОбъект.Записать();
					ИзмененныеОбъекты.Добавить(ЭлементОчереди.СсылкаНаОбъект);
					
				Исключение
					ВызватьИсключение;
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Статусы = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.СтруктураСтатусы();
		РезультирующийСтатусДокумента = РезультирующийСтатусДокумента(ЭлементОчереди.СсылкаНаОбъект);
		Статусы.Принят = РезультирующийСтатусДокумента.Статус;
		
		Если ЗначениеЗаполнено(РезультирующийСтатусДокумента.ДальнейшееДействие) Тогда
			Если ТипЗнч(РезультирующийСтатусДокумента.ДальнейшееДействие) = Тип("Массив") Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
					Статусы.ПринятДействия, РезультирующийСтатусДокумента.ДальнейшееДействие);
			Иначе
				Статусы.ПринятДействия.Добавить(РезультирующийСтатусДокумента.ДальнейшееДействие);
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусы(
			ЭлементОчереди.СсылкаНаОбъект,
			Перечисления.СтатусыОбработкиСообщенийЗЕРНО.ЗаявкаВыполнена,
			Статусы);
		ПараметрыОбновления.ИдентификаторСтроки = ЭлементОчереди.ИдентификаторСтроки;
		
		РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
			ЭлементОчереди.СсылкаНаОбъект,
			ПараметрыОбновления);
		
		ИзмененныеОбъекты.Добавить(ЭлементОчереди.СсылкаНаОбъект);
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииИзДругихПартий Тогда
		
		ДанныеДляОбработки = ИнтеграцияЗЕРНОСлужебный.МассивДанныхПоляXDTO(ПолученныеДанные);
		
		Блокировка = Новый БлокировкаДанных();
		
		Для Каждого КлючИЗначение Из ПараметрыОбмена.ПараметрыПреобразования.БлокируемыеОбъекты Цикл
			
			ЭлементБлокировки = Блокировка.Добавить(КлючИЗначение.Ключ);
			БлокируемыеДанные = КлючИЗначение.Значение;
			
			Если БлокируемыеДанные <> Неопределено Тогда
				Для Каждого Колонка Из БлокируемыеДанные.Колонки Цикл
					ЭлементБлокировки.ИспользоватьИзИсточникаДанных(Колонка.Имя, Колонка.Имя);
				КонецЦикла;
				ЭлементБлокировки.ИсточникДанных = БлокируемыеДанные;
			КонецЕсли;
			
		КонецЦикла;
		
		ЭлементОчередиОснование = ИнтеграцияЗЕРНОСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
		ПараметрыЗапросаКОбновлению = ЭлементОчередиОснование.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
	
		ОбработанныеСтроки = Неопределено;
		ПараметрыЗапросаКОбновлению.Свойство("ОбработанныеСтроки", ОбработанныеСтроки);
		Если ОбработанныеСтроки = Неопределено Тогда
			ОбработанныеСтроки = Новый Соответствие;
			ПараметрыЗапросаКОбновлению.Вставить("ОбработанныеСтроки", ОбработанныеСтроки);
		КонецЕсли;
		
		СформированныеПартииДанныеКорректировки = Неопределено;
		ПараметрыЗапросаКОбновлению.Свойство("СформированныеПартииДанныеКорректировки", СформированныеПартииДанныеКорректировки);
		Если СформированныеПартииДанныеКорректировки = Неопределено Тогда
			СформированныеПартииДанныеКорректировки = Новый Соответствие;
			ПараметрыЗапросаКОбновлению.Вставить("СформированныеПартииДанныеКорректировки", СформированныеПартииДанныеКорректировки);
		КонецЕсли;
		
		Попытка
			
			Блокировка.Заблокировать();
			УстановитьПривилегированныйРежим(Истина);
			
			ИнтеграцияЗЕРНОСлужебный.СсылкиПоИдентификаторам(ПараметрыОбмена);
			
			ПараметрыЗагрузкиПартии = Справочники.РеестрПартийЗЕРНО.ПараметрыЗагрузкиПартии();
			ПараметрыЗагрузкиПартии.Организация     = ЭлементОчереди.Организация;
			ПараметрыЗагрузкиПартии.Подразделение   = ЭлементОчереди.Подразделение;
			ПараметрыЗагрузкиПартии.ВидПродукции    = ЭлементОчереди.ВидПродукции;
			ПараметрыЗагрузкиПартии.ПараметрыОбмена = ПараметрыОбмена;
			
			Для Каждого СтрокаДанных Из ДанныеДляОбработки Цикл
				
				ДанныеРодительскойПартии = Новый Структура;
				ИнициализироватьСтруктуруПараметрыСообщенияДляСопоставленияПартии(ДанныеРодительскойПартии);
				
				ДанныеРодительскойПартии.ВладелецПартии = ПараметрыЗапроса.ВладелецПартии;
				ДанныеРодительскойПартии.Местоположение = ПараметрыЗапроса.Местоположение;
				ДанныеРодительскойПартии.Элеватор       = ПараметрыЗапроса.Элеватор;
				ДанныеРодительскойПартии.Производитель  = ПараметрыЗапроса.Производитель;
				
				ДанныеСопоставления = Новый Соответствие();
				ДанныеСопоставления.Вставить("ДанныеРодительскойПартии", ДанныеРодительскойПартии);
				
				ПартияЗерна = Справочники.РеестрПартийЗЕРНО.ЗагрузитьПартиюЗерна(
					СтрокаДанных,
					ПараметрыЗагрузкиПартии,,
					ДанныеСопоставления);
				
				ИзмененныеОбъекты.Добавить(ПартияЗерна);
				
				ЭтоДанныеКорректировки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
					ПараметрыЗапроса, "ЭтоДанныеКорректировки", Ложь);
				Если ЭтоДанныеКорректировки Тогда
					СформированныеПартииДанныеКорректировки.Вставить(РеквизитыИсходящегоСообщения.ИдентификаторСтроки, ПартияЗерна);
				Иначе
					ОбработанныеСтроки.Вставить(РеквизитыИсходящегоСообщения.ИдентификаторСтроки, ПартияЗерна);
				КонецЕсли;
				
			КонецЦикла;
			
		Исключение
			ВызватьИсключение;
		КонецПопытки;
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРФ
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭкспорт
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗИмпорт
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭлеватор
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗКорректировочный Тогда
		
		ДанныеДляОбработки = ИнтеграцияЗЕРНОСлужебный.МассивДанныхПоляXDTO(ПолученныеДанные);
		
		Блокировка = Новый БлокировкаДанных();
		
		Для Каждого КлючИЗначение Из ПараметрыОбмена.ПараметрыПреобразования.БлокируемыеОбъекты Цикл
			
			ЭлементБлокировки = Блокировка.Добавить(КлючИЗначение.Ключ);
			БлокируемыеДанные = КлючИЗначение.Значение;
			
			Если БлокируемыеДанные <> Неопределено Тогда
				Для Каждого Колонка Из БлокируемыеДанные.Колонки Цикл
					ЭлементБлокировки.ИспользоватьИзИсточникаДанных(Колонка.Имя, Колонка.Имя);
				КонецЦикла;
				ЭлементБлокировки.ИсточникДанных = БлокируемыеДанные;
			КонецЕсли;
			
		КонецЦикла;
		
		ЭлементОчередиОснование = ИнтеграцияЗЕРНОСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
		ПараметрыЗапросаКОбновлению = ЭлементОчередиОснование.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
	
		ОбработанныеСтроки = Неопределено;
		ПараметрыЗапросаКОбновлению.Свойство("ОбработанныеСтроки", ОбработанныеСтроки);
		Если ОбработанныеСтроки = Неопределено Тогда
			ОбработанныеСтроки = Новый Соответствие;
			ПараметрыЗапросаКОбновлению.Вставить("ОбработанныеСтроки", ОбработанныеСтроки);
		КонецЕсли;
		
		Попытка
			
			Блокировка.Заблокировать();
			УстановитьПривилегированныйРежим(Истина);
			
			ИнтеграцияЗЕРНОСлужебный.СсылкиПоИдентификаторам(ПараметрыОбмена);
			
			Для Каждого СтрокаДанных Из ДанныеДляОбработки Цикл
				
				СДИЗ = Справочники.СДИЗЗЕРНО.ЗагрузитьСДИЗ(
					СтрокаДанных,
					ЭлементОчереди.Организация,
					ЭлементОчереди.Подразделение,
					ВидПродукции,
					ПараметрыОбмена);
				
				ИзмененныеОбъекты.Добавить(СДИЗ);
				
				Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗКорректировочный Тогда
					ИдентификаторСтроки = ЭлементОчередиОснование.РеквизитыИсходящегоСообщения.ИдентификаторСтроки;
				Иначе
					ИдентификаторСтроки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
						ПараметрыЗапроса, "ИдентификаторСтрокиТовары", "");
						Если Не ЗначениеЗаполнено(ИдентификаторСтроки) Тогда
							ИдентификаторСтроки = РеквизитыИсходящегоСообщения.ИдентификаторСтроки;
						КонецЕсли;
				КонецЕсли;
				
				ОбработанныеСтроки.Вставить(ИдентификаторСтроки, СДИЗ);
				
				Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭлеватор
					И ЗначениеЗаполнено(СтрокаДанных.number)
					И ИнтеграцияЗЕРНОСлужебный.СтатусСДИЗ(СтрокаДанных.status) = Перечисления.СтатусыСДИЗЗЕРНО.Погашен Тогда
					
					// При автогашении СДИЗ получить список гашений, чтобы загрузить созданную партию.
					ПараметрыОбработкиСообщений = ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ПараметрыОбработкиСообщений();
					ПараметрыОбработкиСообщений.Ссылка        = ЭлементОчереди.СсылкаНаОбъект;
					ПараметрыОбработкиСообщений.ВидПродукции  = ЭлементОчереди.ВидПродукции;
					ПараметрыОбработкиСообщений.Организация   = ЭлементОчереди.Организация;
					ПараметрыОбработкиСообщений.Подразделение = ЭлементОчереди.Подразделение;
					ПараметрыОбработкиСообщений.ЭтоЭлеватор   = Истина;
					ПараметрыОбработкиСообщений.Операция      = Перечисления.ВидыОперацийЗЕРНО.ЗапросПогашенийСДИЗ;
					
					ПараметрыОбработкиСообщений.ПараметрыЗапроса = Новый Структура;
					ПараметрыОбработкиСообщений.ПараметрыЗапроса.Вставить("НомерСДИЗ", СтрокаДанных.number);
					
					ДополнительныеПараметрыЗагрузки = Новый Структура();
					ДополнительныеПараметрыЗагрузки.Вставить("ПараметрыОбмена", ПараметрыОбмена);
					ДополнительныеПараметрыЗагрузки.Вставить(
						"ПараметрыОбработкиДокумента",
						ПараметрыОбработкиСообщений);
					
					СформированныеСообщенияXML = Справочники.СДИЗЗЕРНО.СообщениеКПередачеXML(
						ДополнительныеПараметрыЗагрузки.ПараметрыОбработкиДокумента.Ссылка,
						Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные,
						ДополнительныеПараметрыЗагрузки);
					
					Для Каждого СообщениеXML Из СформированныеСообщенияXML Цикл
						
						СообщениеXML.ЗагружатьДо         = ЭлементОчередиОснование.Сообщение;
						СообщениеXML.ИдентификаторСтроки = ЭлементОчереди.ИдентификаторСтроки;
						СообщениеXML.СсылкаНаОбъект      = ЭлементОчереди.СсылкаНаОбъект;
						СообщениеXML.ПараметрыЗапроса    = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыЗапроса);
						СообщениеXML.Версия              = РеквизитыИсходящегоСообщения.Версия;
						ИнтеграцияЗЕРНОСлужебный.УстановитьСообщениеОснование(СообщениеXML, ЭлементОчередиОснование.РеквизитыИсходящегоСообщения);
						
						СообщениеXML.ПараметрыЗапроса.Вставить("НомерСДИЗ", СтрокаДанных.number);
						
					КонецЦикла;
					
					ИнтеграцияЗЕРНОСлужебный.ПодготовитьКПередачеИсходныеСообщения(СформированныеСообщенияXML, ПараметрыОбмена);
					
				КонецЕсли;
				
			КонецЦикла;
			
			ИзмененныеОбъекты.Добавить(ЭлементОчереди.СсылкаНаОбъект);
			
		Исключение
			ВызватьИсключение;
		КонецПопытки;
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.ЗапросПогашенийСДИЗ Тогда
		
		ЭлементОчередиОснование = ИнтеграцияЗЕРНОСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
		ПараметрыЗапросаКОбновлению = ЭлементОчередиОснование.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
		
		СформированныеПартии = Неопределено;
		ПараметрыЗапросаКОбновлению.Свойство("СформированныеПартии", СформированныеПартии);
		Если СформированныеПартии = Неопределено Тогда
			СформированныеПартии = Новый Соответствие;
			ПараметрыЗапросаКОбновлению.Вставить("СформированныеПартии", СформированныеПартии);
		КонецЕсли;
		
		ИмяПоляНомерПартии = ИнтеграцияЗЕРНОСлужебный.ИмяПоляНомерПартииСозданнойПриОтказеОтГашенияПоВидуПродукции(
			ЭлементОчереди.ВидПродукции);
		
		ДанныеДляОбработки = ИнтеграцияЗЕРНОСлужебный.МассивДанныхПоляXDTO(ПолученныеДанные.Record);
		
		Блокировка = Новый БлокировкаДанных();
		ЭлементБлокировки = Блокировка.Добавить(Метаданные.Справочники.РеестрПартийЗЕРНО.ПолноеИмя());
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ПараметрыЗапроса.ИсходнаяПартия.ПартияСсылка);
		
		Попытка
			
			Блокировка.Заблокировать();
			УстановитьПривилегированныйРежим(Истина);
			
			Для Каждого СтрокаДанных Из ДанныеДляОбработки Цикл
				
				СДИЗ = ПараметрыЗапросаКОбновлению.ОбработанныеСтроки[РеквизитыИсходящегоСообщения.ИдентификаторСтроки];
				
				ПараметрыОбновленияИстории = РегистрыСведений.ИсторияПогашенийСДИЗЗЕРНО.СтруктураОбновленияЗаписи();
			
				ПараметрыОбновленияИстории.ИдентификаторЗаявки = Формат(СтрокаДанных.id, "ЧГ=0;");
				ПараметрыОбновленияИстории.ВидОперации         = Перечисления.ВидыОперацийЗЕРНО.ПогашениеСДИЗ;
				ПараметрыОбновленияИстории.Статус              = Перечисления.СтатусыЗаписейЗЕРНО.Подписано;
				ПараметрыОбновленияИстории.ДатаОперации        = СтрокаДанных.dateRegistration;
				ПараметрыОбновленияИстории.ПолноеПогашение     = Истина;
				
				РегистрыСведений.ИсторияПогашенийСДИЗЗЕРНО.ОбновитьЗаписьРегистра(
					СДИЗ, СтрокаДанных.createLotNumber, ПараметрыОбновленияИстории, Истина);
				
				// Создадим и заполним новую партию по данным исходной.
				// Для заполнения ИдентификаторФГИС нужен отдельный запрос.
				
				РеквизитыПартии = Новый Структура();
				
				Если Не ПараметрыЗапроса.ИсходнаяПартия.Свойство("КоличествоНачальное")
					Или ПараметрыЗапроса.ИсходнаяПартия.КоличествоНачальное = 0 Тогда
					ПараметрыЗапроса.ИсходнаяПартия.КоличествоНачальное = СтрокаДанных.amount;
				КонецЕсли;
				ЗаполнитьРеквизитыПартииПоРодительскойПартии(РеквизитыПартии, ПараметрыЗапроса.ИсходнаяПартия);
				ЗаполнитьРеквизитыПартииПоДаннымСервиса(РеквизитыПартии, СтрокаДанных, ИмяПоляНомерПартии);
				
				ПараметрыПолученияПартии = Справочники.РеестрПартийЗЕРНО.ПараметрыПолученияПартии();
				ПараметрыПолученияПартии.ДанныеПартии       = РеквизитыПартии;
				ПараметрыПолученияПартии.ДобавлятьКЗагрузке = Ложь;
				
				НоваяПартия = Справочники.РеестрПартийЗЕРНО.ПартияЗерна(
					СтрокаДанных[ИмяПоляНомерПартии],
					ЭлементОчереди.Организация,
					ЭлементОчереди.Подразделение,
					ЭлементОчереди.ВидПродукции,
					ПараметрыОбмена,
					ПараметрыПолученияПартии);
				
				ИзмененныеОбъекты.Добавить(НоваяПартия);
				
				СформированныеПартии.Вставить(РеквизитыИсходящегоСообщения.ИдентификаторСтроки, НоваяПартия);
				
				ИсходнаяПартияОбъект = ПараметрыЗапроса.ИсходнаяПартия.ПартияСсылка.ПолучитьОбъект();
				ИсходнаяПартияОбъект.Статус     = Перечисления.СтатусыПартийЗЕРНО.ВАрхиве;
				ИсходнаяПартияОбъект.Количество = 0;
				ИсходнаяПартияОбъект.Записать();
				ИзмененныеОбъекты.Добавить(ПараметрыЗапроса.ИсходнаяПартия.ПартияСсылка);
				
			КонецЦикла;
		
		Исключение
			ВызватьИсключение;
		КонецПопытки;
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗ
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗПриКорректировке Тогда
		
		Если ВРег(ПолученныеДанные.resultOperation) = "DONE" Тогда
			
			НомерПартии      = ПараметрыЗапроса.НомерПартии;
			ИмяПоляНомерСДИЗ = ИнтеграцияЗЕРНОСлужебный.ИмяПоляНомерСДИЗПоВидуПродукции(ЭлементОчереди.ВидПродукции);
			НомерСДИЗ        = ПолученныеДанные[ИмяПоляНомерСДИЗ];
			
			Блокировка = Новый БлокировкаДанных();
			
			ЭлементБлокировки = Блокировка.Добавить(Метаданные.Справочники.СДИЗЗЕРНО.ПолноеИмя());
			ЭлементБлокировки.УстановитьЗначение("Идентификатор", НомерСДИЗ);
			Если Не ПараметрыЗапроса.АннулироватьПартию Тогда
				ЭлементБлокировки = Блокировка.Добавить(Метаданные.Справочники.РеестрПартийЗЕРНО.ПолноеИмя());
				ЭлементБлокировки.УстановитьЗначение("Идентификатор", НомерПартии);
			КонецЕсли;
			
			ЭлементОчередиОснование = ИнтеграцияЗЕРНОСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
			ПараметрыЗапросаКОбновлению = ЭлементОчередиОснование.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
			
			АннулироватьПартию = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
				ПараметрыЗапроса, "АннулироватьПартию", Ложь);
			ЭтоВыделеннаяПартия = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
				ПараметрыЗапроса, "ЭтоВыделеннаяПартия", Ложь);
			
			Попытка
				
				Блокировка.Заблокировать();
				УстановитьПривилегированныйРежим(Истина);
				
				СДИЗ = Справочники.СДИЗЗЕРНО.СДИЗ(
					НомерСДИЗ,
					ЭлементОчереди.Организация,
					ЭлементОчереди.Подразделение,
					ЭлементОчереди.ВидПродукции,
					ПараметрыОбмена);
				СДИЗОбъект        = СДИЗ.ПолучитьОбъект();
				СДИЗОбъект.Статус = Перечисления.СтатусыСДИЗЗЕРНО.Аннулирован;
				СДИЗОбъект.Записать();
				ИзмененныеОбъекты.Добавить(СДИЗ);
				
				Если АннулироватьПартию Или ЭтоВыделеннаяПартия Тогда
					
					// При аннулировании СДИЗ аннулировать выделенную партию.
					СообщениеXML = СообщениеАннулированияПартии(
						ЭлементОчереди,
						ПараметрыЗапроса,
						ПараметрыОбмена);
						
					СообщениеXML.ЗагружатьДо = ЭлементОчередиОснование.Сообщение;
					СообщениеXML.Версия      = РеквизитыИсходящегоСообщения.Версия;
					ИнтеграцияЗЕРНОСлужебный.УстановитьСообщениеОснование(СообщениеXML, ЭлементОчередиОснование.РеквизитыИсходящегоСообщения);
					
					ИнтеграцияЗЕРНОСлужебный.ПодготовитьКПередачеИсходныеСообщения(
						ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СообщениеXML),
						ПараметрыОбмена);
					
				Иначе
					
					Партия = Справочники.РеестрПартийЗЕРНО.ПартияЗерна(
						НомерПартии,
						ЭлементОчереди.Организация,
						ЭлементОчереди.Подразделение,
						ЭлементОчереди.ВидПродукции,
						ПараметрыОбмена);
					ПартияОбъект        = Партия.ПолучитьОбъект();
					ПартияОбъект.Статус = Перечисления.СтатусыПартийЗЕРНО.Подписано;
					ПартияОбъект.Записать();
					ИзмененныеОбъекты.Добавить(Партия);
				
				КонецЕсли;
				
			Исключение
				ВызватьИсключение;
			КонецПопытки;
			
		КонецЕсли;
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.АннулированиеФормированияПартии
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.АннулированиеПартииПриКорректировке Тогда
		НомерПартии = ПараметрыЗапроса.НомерПартии;
		
		Блокировка = Новый БлокировкаДанных();
		
		ЭлементБлокировки = Блокировка.Добавить(Метаданные.Справочники.РеестрПартийЗЕРНО.ПолноеИмя());
		ЭлементБлокировки.УстановитьЗначение("Идентификатор", НомерПартии);
		
		Попытка
			
			Блокировка.Заблокировать();
			
			УстановитьПривилегированныйРежим(Истина);
			
			Партия = Справочники.РеестрПартийЗЕРНО.ПартияЗерна(
				НомерПартии,
				ЭлементОчереди.Организация,
				ЭлементОчереди.Подразделение,
				ЭлементОчереди.ВидПродукции,
				ПараметрыОбмена);
			ПартияОбъект        = Партия.ПолучитьОбъект();
			ПартияОбъект.Статус = Перечисления.СтатусыПартийЗЕРНО.Аннулировано;
			ПартияОбъект.Записать();
			ИзмененныеОбъекты.Добавить(Партия);
			
		Исключение
			ВызватьИсключение;
		КонецПопытки;
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеКорректировкиСДИЗРасчетСтатусаПоСтроке Тогда
		
		ЭлементОчередиОснование = ИнтеграцияЗЕРНОСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
		ПараметрыЗапросаКОбновлению = ЭлементОчередиОснование.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
		
		Если ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.Свойство("СформированныеПартии") Тогда
			СформированныеПартии = Неопределено;
			ПараметрыЗапросаКОбновлению.Свойство("СформированныеПартии", СформированныеПартии);
			Если СформированныеПартии = Неопределено Тогда
				СформированныеПартии = Новый Соответствие;
				ПараметрыЗапросаКОбновлению.Вставить("СформированныеПартии", СформированныеПартии);
			КонецЕсли;
			
			Для Каждого ЭлементКоллекции Из ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.СформированныеПартии Цикл
				СформированныеПартии.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
			КонецЦикла;
		КонецЕсли;
		
		Если ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.Свойство("ОбработанныеСтроки") Тогда
			ОбработанныеСтроки = Неопределено;
			ПараметрыЗапросаКОбновлению.Свойство("ОбработанныеСтроки", ОбработанныеСтроки);
			Если ОбработанныеСтроки = Неопределено Тогда
				ОбработанныеСтроки = Новый Соответствие;
				ПараметрыЗапросаКОбновлению.Вставить("ОбработанныеСтроки", ОбработанныеСтроки);
			КонецЕсли;
			
			Для Каждого ЭлементКоллекции Из ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ОбработанныеСтроки Цикл
				ОбработанныеСтроки.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗОтказПогашенияСДИЗ
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗОтказПогашенияСДИЗПриКорректировке Тогда
		
		ЭлементОчередиОснование = ИнтеграцияЗЕРНОСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
		ПараметрыЗапросаКОбновлению = ЭлементОчередиОснование.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
		
		СформированныеПартии = Неопределено;
		ПараметрыЗапросаКОбновлению.Свойство("СформированныеПартии", СформированныеПартии);
		Если СформированныеПартии = Неопределено Тогда
			СформированныеПартии = Новый Соответствие;
			ПараметрыЗапросаКОбновлению.Вставить("СформированныеПартии", СформированныеПартии);
		КонецЕсли;
		
		ДанныеДляОбработки = ИнтеграцияЗЕРНОСлужебный.МассивДанныхПоляXDTO(ПолученныеДанные);
		
		Блокировка = Новый БлокировкаДанных();
		
		ЭлементБлокировки = Блокировка.Добавить(Метаданные.Справочники.СДИЗЗЕРНО.ПолноеИмя());
		ЭлементБлокировки.УстановитьЗначение("Идентификатор", ПараметрыЗапроса.НомерСДИЗ);
		
		Попытка
			
			Блокировка.Заблокировать();
			СДИЗ = Справочники.СДИЗЗЕРНО.СДИЗ(
				ПараметрыЗапроса.НомерСДИЗ,
				ЭлементОчереди.Организация,
				ЭлементОчереди.Подразделение,
				ЭлементОчереди.ВидПродукции,
				ПараметрыОбмена);
			
			БлокировкаРегистраИстории = Новый БлокировкаДанных();
			ЭлементБлокировки = БлокировкаРегистраИстории.Добавить(Метаданные.РегистрыСведений.ИсторияПогашенийСДИЗЗЕРНО.ПолноеИмя());
			ЭлементБлокировки.УстановитьЗначение("СДИЗ", СДИЗ);
			БлокировкаРегистраИстории.Заблокировать();
			
			УстановитьПривилегированныйРежим(Истина);
			
			ОперацияИстории    = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗОтказПогашенияСДИЗ;
			ИмяПоляНомерПартии = ИнтеграцияЗЕРНОСлужебный.ИмяПоляНомерПартииСозданнойПриОтказеОтГашенияПоВидуПродукции(ЭлементОчереди.ВидПродукции);
			ИмяПоляПричина     = ИнтеграцияЗЕРНОСлужебный.ИмяПоляПричинаОтказаОтГашенияПоВидуПродукции(ЭлементОчереди.ВидПродукции);
			
			Для Каждого СтрокаДанных Из ДанныеДляОбработки Цикл
				
				ПараметрыОбновленияИстории = РегистрыСведений.ИсторияПогашенийСДИЗЗЕРНО.СтруктураОбновленияЗаписи();
			
				ПараметрыОбновленияИстории.ИдентификаторЗаявки = Формат(СтрокаДанных.id, "ЧГ=0;");
				ПараметрыОбновленияИстории.ВидОперации         = ОперацияИстории;
				ПараметрыОбновленияИстории.Статус              = ИнтеграцияЗЕРНОСлужебный.СтатусЗаписи(СтрокаДанных.status);
				ПараметрыОбновленияИстории.ДатаОперации        = СтрокаДанных.dateRegistration;
				ПараметрыОбновленияИстории.КоличествоЗЕРНО     = СтрокаДанных.amount;
				ПараметрыОбновленияИстории.ОписаниеПричины     = СтрокаДанных.CauseComment;
				Если СтрокаДанных[ИмяПоляПричина] <> Неопределено Тогда
					ПараметрыОбновленияИстории.Причина = Справочники.КлассификаторНСИЗЕРНО.КлассификаторНСИ(
						Перечисления.ВидыКлассификаторовЗЕРНО.ПричинаВозвратаПартии,
						СтрокаДанных[ИмяПоляПричина],
						ЭлементОчереди.Организация,
						ЭлементОчереди.Подразделение,
						ПараметрыОбмена);
				КонецЕсли;
				
				РегистрыСведений.ИсторияПогашенийСДИЗЗЕРНО.ОбновитьЗаписьРегистра(
					СДИЗ, СтрокаДанных[ИмяПоляНомерПартии], ПараметрыОбновленияИстории, Истина);
				
				// Создадим и заполним новую партию по данным исходной.
				// Для заполнения ИдентификаторФГИС нужен отдельный запрос.
				
				РеквизитыПартии = Новый Структура();
			
				Если Не ПараметрыЗапроса.ИсходнаяПартия.Свойство("КоличествоНачальное")
					Или ПараметрыЗапроса.ИсходнаяПартия.КоличествоНачальное = 0 Тогда
					ПараметрыЗапроса.ИсходнаяПартия.КоличествоНачальное = СтрокаДанных.amount;
				КонецЕсли;
				ЗаполнитьРеквизитыПартииПоРодительскойПартии(РеквизитыПартии, ПараметрыЗапроса.ИсходнаяПартия);
				ЗаполнитьРеквизитыПартииПоДаннымСервиса(РеквизитыПартии, СтрокаДанных, ИмяПоляНомерПартии);
				
				ПараметрыПолученияПартии = Справочники.РеестрПартийЗЕРНО.ПараметрыПолученияПартии();
				ПараметрыПолученияПартии.ДанныеПартии       = РеквизитыПартии;
				ПараметрыПолученияПартии.ДобавлятьКЗагрузке = Ложь;
				
				НоваяПартия = Справочники.РеестрПартийЗЕРНО.ПартияЗерна(
					СтрокаДанных[ИмяПоляНомерПартии],
					ЭлементОчереди.Организация,
					ЭлементОчереди.Подразделение,
					ЭлементОчереди.ВидПродукции,
					ПараметрыОбмена,
					ПараметрыПолученияПартии);
				
				ИзмененныеОбъекты.Добавить(НоваяПартия);
				
				СформированныеПартии.Вставить(РеквизитыИсходящегоСообщения.ИдентификаторСтроки, НоваяПартия);
				
			КонецЦикла;
			
		Исключение
			ВызватьИсключение;
		КонецПопытки;
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗАннулированиеОтказаПогашенияСДИЗ Тогда
		
		Блокировка = Новый БлокировкаДанных();
		
		ЭлементБлокировки = Блокировка.Добавить(Метаданные.РегистрыСведений.ИсторияПогашенийСДИЗЗЕРНО.ПолноеИмя());
		ЭлементБлокировки.УстановитьЗначение("СДИЗ", ПараметрыЗапроса.СДИЗ);
		ЭлементБлокировки.УстановитьЗначение("НомерПартии", ПараметрыЗапроса.НомерПартии);
		
		ЭлементБлокировки = Блокировка.Добавить(Метаданные.Справочники.РеестрПартийЗЕРНО.ПолноеИмя());
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ПараметрыЗапроса.Партия);
		
		Попытка
			
			Блокировка.Заблокировать();
			УстановитьПривилегированныйРежим(Истина);
			
			ПараметрыОбновленияИстории = РегистрыСведений.ИсторияПогашенийСДИЗЗЕРНО.СтруктураОбновленияЗаписи();
			ПараметрыОбновленияИстории.Статус = Перечисления.СтатусыЗаписейЗЕРНО.Аннулировано;
			
			РегистрыСведений.ИсторияПогашенийСДИЗЗЕРНО.ОбновитьЗаписьРегистра(
				ПараметрыЗапроса.СДИЗ, ПараметрыЗапроса.НомерПартии, ПараметрыОбновленияИстории);
			
			ПартияОбъект = ПараметрыЗапроса.Партия.ПолучитьОбъект();
			ПартияОбъект.Статус = Перечисления.СтатусыПартийЗЕРНО.Аннулировано;
			ПартияОбъект.Записать();
			
			ИзмененныеОбъекты.Добавить(ПараметрыЗапроса.Партия);
			
		Исключение
			ВызватьИсключение;
		КонецПопытки;
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗАннулированиеОтказаПогашенияСДИЗРасчетСтатусаПоСтроке Тогда
		
		РезультирующийСтатусПоСтроке = РезультирующийСтатусАннулированиеОтказовПогашенийПоСтроке(ЭлементОчереди);
		
		Если РезультирующийСтатусПоСтроке.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЗЕРНО.Ошибка Тогда
			ИнтеграцияЗЕРНОСлужебный.УдалитьСообщенияОчередиПоЦепочке(ЭлементОчереди, ПараметрыОбмена);
		КонецЕсли;
		
		ИзмененныеОбъекты.Добавить(ЭлементОчереди.СсылкаНаОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

Функция РезультирующийСтатусАннулированиеОтказовПогашенийПоСтроке(ЭлементОчереди) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Статус",             Неопределено);
	Результат.Вставить("ДальнейшееДействие", Неопределено);
	Результат.Вставить("СтатусОбработки",    Перечисления.СтатусыОбработкиСообщенийЗЕРНО.ЗаявкаВыполнена);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДанныеКорректировки.Идентификатор КАК Идентификатор,
		|	ЕСТЬNULL(СтатусыОбъектовСинхронизацииЗЕРНО.Статус, НЕОПРЕДЕЛЕНО) КАК Статус,
		|	ИСТИНА
		|ИЗ
		|	Документ.ОформлениеСДИЗЗЕРНО.ДанныеКорректировки КАК ТаблицаДанныеКорректировки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОбъектовСинхронизацииЗЕРНО КАК СтатусыОбъектовСинхронизацииЗЕРНО
		|		ПО ТаблицаДанныеКорректировки.Ссылка = СтатусыОбъектовСинхронизацииЗЕРНО.ОбъектСинхронизации
		|		И СтатусыОбъектовСинхронизацииЗЕРНО.ИдентификаторСтроки = ТаблицаДанныеКорректировки.Идентификатор
		|ГДЕ
		|	ТаблицаДанныеКорректировки.Ссылка = &Ссылка
		|	И СтатусыОбъектовСинхронизацииЗЕРНО.ИдентификаторСтроки В (&ИдентификаторыСтроки)";
	
	ПараметрыЗапроса= ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
	
	Запрос.УстановитьПараметр("Ссылка", ЭлементОчереди.СсылкаНаОбъект);
	Запрос.УстановитьПараметр("ИдентификаторыСтроки", ПараметрыЗапроса.ИдентификаторыСтроки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ЕстьОшибки = Ложь;
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.АннулированиеОтказаПогашенияСДИЗОшибкаПередачи Тогда
			ЕстьОшибки = Истина;
			Результат.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЗЕРНО.Ошибка;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		Статус= Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.АннулированиеОтказаПогашенияСДИЗОшибкаПередачи;
	Иначе
		Статус= Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОтказПогашенияСДИЗАннулирован;
	КонецЕсли;
	
	Результат.Статус = Статус;
	
	Возврат Результат;

КонецФункции

Функция РезультирующийСтатусДокумента(ДокументСсылка) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Статус",             Неопределено);
	Результат.Вставить("ДальнейшееДействие", Неопределено);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаТовары.Идентификатор КАК Идентификатор,
		|	ЕСТЬNULL(СтатусыОбъектовСинхронизацииЗЕРНО.Статус, НЕОПРЕДЕЛЕНО) КАК Статус,
		|	ЛОЖЬ КАК Корректировочный
		|ИЗ
		|	Документ.ОформлениеСДИЗЗЕРНО.Товары КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОбъектовСинхронизацииЗЕРНО КАК СтатусыОбъектовСинхронизацииЗЕРНО
		|		ПО ТаблицаТовары.Ссылка = СтатусыОбъектовСинхронизацииЗЕРНО.ОбъектСинхронизации
		|		И СтатусыОбъектовСинхронизацииЗЕРНО.ИдентификаторСтроки = ТаблицаТовары.Идентификатор
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОформлениеСДИЗЗЕРНО КАК ОформлениеСДИЗЗЕРНО
		|		ПО ТаблицаТовары.Ссылка = ОформлениеСДИЗЗЕРНО.Ссылка
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка
		|	И НЕ ОформлениеСДИЗЗЕРНО.Корректировочный
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДанныеКорректировки.Идентификатор КАК Идентификатор,
		|	ЕСТЬNULL(СтатусыОбъектовСинхронизацииЗЕРНО.Статус, НЕОПРЕДЕЛЕНО) КАК Статус,
		|	ИСТИНА
		|ИЗ
		|	Документ.ОформлениеСДИЗЗЕРНО.ДанныеКорректировки КАК ТаблицаДанныеКорректировки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОбъектовСинхронизацииЗЕРНО КАК СтатусыОбъектовСинхронизацииЗЕРНО
		|		ПО ТаблицаДанныеКорректировки.Ссылка = СтатусыОбъектовСинхронизацииЗЕРНО.ОбъектСинхронизации
		|		И СтатусыОбъектовСинхронизацииЗЕРНО.ИдентификаторСтроки = ТаблицаДанныеКорректировки.Идентификатор
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОформлениеСДИЗЗЕРНО КАК ОформлениеСДИЗЗЕРНО
		|		ПО ТаблицаДанныеКорректировки.Ссылка = ОформлениеСДИЗЗЕРНО.Ссылка
		|ГДЕ
		|	ТаблицаДанныеКорректировки.Ссылка = &Ссылка
		|	И ОформлениеСДИЗЗЕРНО.Корректировочный";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ЕстьСформированыПартии = Ложь;
	ЕстьОформленыСДИЗ      = Ложь;
	ЕстьАннулированоСДИЗ   = Ложь;
	ЕстьОшибкиСДИЗ         = Ложь;
	ЕстьОшибкиПартии       = Ложь;
	ЕстьАннулированоПартии = Ложь;
	
	ЕстьКорректировки         = Ложь;
	ЕстьОшибкиКорректировки   = Ложь;
	ЕстьОшибкиАннулирования   = Ложь;
	ЕстьОтказОтПогашения      = Ложь;
	ЕстьОшибкиОтказаПогашения = Ложь;
	Корректировочный = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		Корректировочный = Выборка.Корректировочный;
		Если Не ЗначениеЗаполнено(Выборка.Статус)
			Или Выборка.Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.Черновик Тогда
			// Если формирование партий для части строк, тогда статуса по строке в регистре нет.
			Продолжить;
		Конецесли;
		Если Выборка.Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ПартииСформированы Тогда
			ЕстьСформированыПартии = Истина;
		ИначеЕсли Выборка.Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.СДИЗОформлен Тогда
			ЕстьОформленыСДИЗ = Истина;
		ИначеЕсли Выборка.Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОформлениеСДИЗАннулировано Тогда
			ЕстьАннулированоСДИЗ = Истина;
		ИначеЕсли Выборка.Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ПартияАннулирована Тогда
			ЕстьАннулированоПартии = Истина;
		ИначеЕсли Выборка.Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ФормированиеПартииОбрабатывается
			Или Выборка.Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.АннулированиеОформленияСДИЗОбрабатывается
			Или Выборка.Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.АннулированиеОформленияСДИЗПриКорректировкеОбрабатывается
			Или Выборка.Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОформлениеСДИЗОбрабатывается Тогда
			Если Корректировочный Тогда
				Результат.Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.КорректировкаОформленияСДИЗОбрабатывается;
			Иначе
				Результат.Статус = Выборка.Статус;
			КонецЕсли;
			Результат.ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеЗавершенияОбработкиДанных;
			Возврат Результат;
		ИначеЕсли Выборка.Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ФормированиеПартииОшибкаПередачи Тогда
			ЕстьОшибкиПартии = Истина;
		ИначеЕсли Выборка.Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.АннулированиеОформленияСДИЗОшибкаПередачи Тогда
			ЕстьОшибкиАннулирования = Истина;
		ИначеЕсли Выборка.Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОтказПогашенияСДИЗПриКорректировкеОбрабатывается
			Или Выборка.Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.АннулированиеОтказаПогашенияСДИЗОбрабатывается
			Или Выборка.Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.КорректировочныйСДИЗОбрабатывается Тогда
			Результат.Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.КорректировкаОформленияСДИЗОбрабатывается;
			Результат.ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеЗавершенияОбработкиДанных;
			Возврат Результат;
		ИначеЕсли Выборка.Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОтказПогашенияСДИЗОбрабатывается Тогда
			Результат.Статус = Выборка.Статус;
			Результат.ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеЗавершенияОбработкиДанных;
			Возврат Результат;
		ИначеЕсли Выборка.Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОтказПогашенияСДИЗПриКорректировкеОформлен
			Или Выборка.Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОтказПогашенияСДИЗАннулирован
			Или Выборка.Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.КорректировочныйСДИЗОформлен
			Или Выборка.Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОформлениеСДИЗПриКорректировкеАннулировано Тогда
			ЕстьКорректировки = Истина;
		ИначеЕсли Выборка.Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОтказПогашенияСДИЗОформлен Тогда
			ЕстьОтказОтПогашения = Истина;
		ИначеЕсли Выборка.Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОтказПогашенияСДИЗПриКорректировкеОшибкаПередачи
			Или Выборка.Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.АннулированиеОтказаПогашенияСДИЗОшибкаПередачи
			Или Выборка.Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.КорректировочныйСДИЗОшибкаПередачи Тогда
			ЕстьОшибкиКорректировки = Истина;
		ИначеЕсли Выборка.Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОтказПогашенияСДИЗОшибкаПередачи Тогда
			ЕстьОшибкиОтказаПогашения = Истина;
		Иначе
			ЕстьОшибкиСДИЗ = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ЕстьАннулировано   = ЕстьАннулированоСДИЗ Или ЕстьАннулированоПартии;
	ДальнейшееДействие = Неопределено;
	
	Если Корректировочный Тогда
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ОбъектРасчета", ДокументСсылка);
		
		Если ЕстьОшибкиКорректировки Или ЕстьОшибкиАннулирования
			Или ЕстьОшибкиСДИЗ Или ЕстьОшибкиПартии Тогда // для действия "выполните корректировку"
			
			Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.КорректировкаОформленияСДИЗОшибкаОжидаетсяДействие;
			
			ДальнейшееДействие = Новый Массив;
			ДальнейшееДействие.Добавить(ДальнейшееДействиеПоУмолчанию(СтруктураПараметров));
			
		ИначеЕсли ЕстьОшибкиОтказаПогашения Тогда // для действия "оформить отказ"
		
			Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОтказПогашенияСДИЗОшибкаПередачи;
			
			ДальнейшееДействие = Новый Массив;
			ДальнейшееДействие.Добавить(ДальнейшееДействиеПоУмолчанию(СтруктураПараметров));
			
		ИначеЕсли ЕстьОтказОтПогашения И Не ЕстьКорректировки Тогда
			
			Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОтказПогашенияСДИЗОформлен;
			ДальнейшееДействие = ДальнейшееДействиеПоУмолчанию(СтруктураПараметров);
			
		Иначе
			
			ДальнейшееДействие = ДальнейшееДействиеПоУмолчанию(СтруктураПараметров);
			Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.НеТребуется Тогда
				Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.КорректировкаОформленияСДИЗВыполнена;
			Иначе
				Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.КорректировкаОформленияСДИЗОжидаетсяДействие;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		Если ЕстьАннулировано И Не ЕстьОформленыСДИЗ Тогда
			Если ЕстьАннулированоСДИЗ И ЕстьАннулированоПартии Тогда
				Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.СДИЗПартияАннулирована;
			ИначеЕсли ЕстьАннулированоСДИЗ Тогда
				Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОформлениеСДИЗАннулировано;
			Иначе // ЕстьАннулированоПартии
				Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ПартияАннулирована;
			КонецЕсли;
		ИначеЕсли ЕстьОформленыСДИЗ И ЕстьАннулировано
			Или ЕстьОформленыСДИЗ И ЕстьОшибкиСДИЗ Тогда
			Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.СДИЗОформленЧастично;
			Если Не ЕстьАннулировано Тогда
				ДальнейшееДействие = ДальнейшееДействиеПоУмолчанию();
			КонецЕсли;
		ИначеЕсли Не ЕстьАннулировано И ЕстьОформленыСДИЗ Тогда
			Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.СДИЗОформлен;
		ИначеЕсли ЕстьАннулировано Или ЕстьОшибкиСДИЗ Тогда
			Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОформлениеСДИЗОшибкаПередачи;
			Если Не ЕстьАннулировано Тогда
				ДальнейшееДействие = ДальнейшееДействиеПоУмолчанию();
			КонецЕсли;
		ИначеЕсли ЕстьСформированыПартии
			И ЕстьОшибкиПартии Или ЕстьАннулированоПартии Тогда
			Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ПартииСформированыЧастично;
			Если Не ЕстьАннулированоПартии Тогда
				ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.СформируйтеПартии;
			КонецЕсли;
		ИначеЕсли ЕстьСформированыПартии И Не ЕстьОшибкиПартии Тогда
			Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ПартииСформированы;
			ДальнейшееДействие = ДальнейшееДействиеПоУмолчанию();
		ИначеЕсли ЕстьОшибкиПартии Тогда
			Статус = Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ФормированиеПартииОшибкаПередачи;
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.СформируйтеПартии;
		Иначе
			Статус = СтатусПоУмолчанию();
			ДальнейшееДействие = ДальнейшееДействиеПоУмолчанию();
		КонецЕсли;
	КонецЕсли;
	
	Результат.Статус = Статус;
 	Результат.ДальнейшееДействие = ДальнейшееДействие;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область КорректировочныеСДИЗ

// Функция возвращает пустую таблицу для заполнения корректировочного СДИЗ по корректируемому СДИЗ, Номенклатуре, Характеристике и Серии
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Инициализация таблицы поиска корректировки по СДИЗ:
// * КорректируемыйСДИЗ - СправочникСсылка.СДИЗЗЕРНО - корректируемый СДИЗ
// * Номенклатура       - ОпределяемыйТип.Номенклатура - номенклатура прикладного документа
// * Характеристика     - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика прикладного документа
// * Серия              - ОпределяемыйТип.СерияНоменклатуры - серия прикладного документа
Функция ИнициализацияТаблицыПоискаКорректировкиПоСДИЗ() Экспорт
	
	ТаблицаЗаполненияПоСДИЗ = Новый ТаблицаЗначений();
	ТаблицаЗаполненияПоСДИЗ.Колонки.Добавить("КорректируемыйСДИЗ", Новый ОписаниеТипов("СправочникСсылка.СДИЗЗЕРНО"));
	ТаблицаЗаполненияПоСДИЗ.Колонки.Добавить("Номенклатура",       Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаЗаполненияПоСДИЗ.Колонки.Добавить("Характеристика",     Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТаблицаЗаполненияПоСДИЗ.Колонки.Добавить("Серия",              Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	
	Возврат ТаблицаЗаполненияПоСДИЗ;
	
КонецФункции

// Функция возвращает возможность создания корректировочного СДИЗ по оформлению СДИЗ
// 
// Параметры:
//  ДокументОснование - ДокументСсылка.ОформлениеСДИЗЗЕРНО
// 
// Возвращаемое значение:
//  Булево - Истина, если доступно создание корректировочного документа
Функция ДоступноСозданиеКорректировочногоДокумента(ДокументОснование) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОформлениеСДИЗЗЕРНОТовары.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО.Товары КАК ОформлениеСДИЗЗЕРНОТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СДИЗЗерно КАК СДИЗЗерно
	|		ПО ОформлениеСДИЗЗЕРНОТовары.СДИЗ = СДИЗЗерно.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОбъектовСинхронизацииЗЕРНО КАК СтатусыОбъектовСинхронизацииЗЕРНО
	|		ПО ОформлениеСДИЗЗЕРНОТовары.Ссылка = СтатусыОбъектовСинхронизацииЗЕРНО.ОбъектСинхронизации
	|			И СтатусыОбъектовСинхронизацииЗЕРНО.ИдентификаторСтроки = """"
	|ГДЕ
	|	ОформлениеСДИЗЗЕРНОТовары.Ссылка = &ДокументОснование
	|	И ОформлениеСДИЗЗЕРНОТовары.СДИЗ <> ЗНАЧЕНИЕ(Справочник.СДИЗЗерно.ПустаяСсылка)
	|	И СДИЗЗерно.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСДИЗЗЕРНО.Оформлен)
	|	И СтатусыОбъектовСинхронизацииЗЕРНО.Статус В (&КонечныеСтатусыОформления)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОформлениеСДИЗЗЕРНОТовары.Ссылка
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО.Товары КАК ОформлениеСДИЗЗЕРНОТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СДИЗЗерно КАК СДИЗЗерно
	|		ПО ОформлениеСДИЗЗЕРНОТовары.КорректируемыйСДИЗ = СДИЗЗерно.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СДИЗЗерно КАК КорректирующиеСДИЗЗерно
	|		ПО ОформлениеСДИЗЗЕРНОТовары.КорректируемыйСДИЗ = КорректирующиеСДИЗЗерно.КорректируемыйСДИЗ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОбъектовСинхронизацииЗЕРНО КАК СтатусыОбъектовСинхронизацииЗЕРНО
	|		ПО ОформлениеСДИЗЗЕРНОТовары.Ссылка = СтатусыОбъектовСинхронизацииЗЕРНО.ОбъектСинхронизации
	|			И СтатусыОбъектовСинхронизацииЗЕРНО.ИдентификаторСтроки = """"
	|ГДЕ
	|	ОформлениеСДИЗЗЕРНОТовары.Ссылка = &ДокументОснование
	|	И ОформлениеСДИЗЗЕРНОТовары.КорректируемыйСДИЗ <> ЗНАЧЕНИЕ(Справочник.СДИЗЗерно.ПустаяСсылка)
	|	И КорректирующиеСДИЗЗерно.Ссылка ЕСТЬ NULL
	|	И СДИЗЗерно.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСДИЗЗЕРНО.Оформлен)
	|	И СтатусыОбъектовСинхронизацииЗЕРНО.Статус В (&КонечныеСтатусыОформления)";
	
	Запрос.УстановитьПараметр("ДокументОснование",         ДокументОснование);
	Запрос.УстановитьПараметр("КонечныеСтатусыОформления", КонечныеСтатусы(Ложь));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КорректировочныеСДИЗ

Функция РезультатЗапросаДанныхДляРасчетаХешСуммКорректировочногоСДИЗПоОформлениюСДИЗ(ОбъектРасчета, МассивСДИЗ)
	
	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОформлениеСДИЗЗЕРНОТовары.СДИЗ КАК СДИЗ
	|ПОМЕСТИТЬ ВТ_СДИЗ_Корректируемые
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО.Товары КАК ОформлениеСДИЗЗЕРНОТовары
	|ГДЕ
	|	ОформлениеСДИЗЗЕРНОТовары.Ссылка В (&ОбъектыРасчета)
	|	И ВЫБОР
	|		КОГДА &ОтборПоСтрокам
	|			ТОГДА ОформлениеСДИЗЗЕРНОТовары.СДИЗ В (&МассивСДИЗ)
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОформлениеСДИЗЗЕРНОТовары.КорректируемыйСДИЗ
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО.Товары КАК ОформлениеСДИЗЗЕРНОТовары
	|ГДЕ
	|	ОформлениеСДИЗЗЕРНОТовары.Ссылка В (&ОбъектыРасчета)
	|	И ВЫБОР
	|		КОГДА &ОтборПоСтрокам
	|			ТОГДА ОформлениеСДИЗЗЕРНОТовары.СДИЗ В (&МассивСДИЗ)
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ВТ_СДИЗ_Корректируемые.СДИЗ                      КАК СДИЗ,
	|	СДИЗЗЕРНО.Покупатель                             КАК Покупатель,
	|	СДИЗЗЕРНО.Перевозка                              КАК Перевозка,
	|	СДИЗЗЕРНО.Приемка                                КАК Приемка,
	|	СДИЗЗЕРНО.Реализация                             КАК Реализация,
	|	СДИЗЗЕРНО.Отгрузка                               КАК Отгрузка,
	|	СДИЗЗЕРНО.Грузоотправитель                       КАК Грузоотправитель,
	|	СДИЗЗЕРНО.Грузополучатель                        КАК Грузополучатель,
	|	СДИЗЗЕРНО.ПунктНазначения                        КАК ПунктНазначения,
	|	СДИЗЗЕРНО.ДоговорГПД.Дата                        КАК ДатаГПД,
	|	СДИЗЗЕРНО.ДоговорГПД.Номер                       КАК НомерГПД,
	|	СДИЗЗЕРНО.ФитосанитарныйСертификат.Дата          КАК ДатаФитосанитарногоСертификата,
	|	СДИЗЗЕРНО.ФитосанитарныйСертификат.Номер         КАК НомерФитосанитарногоСертификата,
	|	СДИЗЗЕРНО.ФитосанитарныйСертификат.ДатаОкончания КАК ДатаОкончанияФитосанитарногоСертификата,
	|	СДИЗЗЕРНО.ВетеринарныйСертификат.Дата            КАК ДатаВетеринарногоСертификата,
	|	СДИЗЗЕРНО.ВетеринарныйСертификат.Номер           КАК НомерВетеринарногоСертификата,
	|	СДИЗЗЕРНО.ВетеринарныйСертификат.ДатаОкончания   КАК ДатаОкончанияВетеринарногоСертификата,
	|	СДИЗЗЕРНО.ДекларацияСоответствия.Дата            КАК ДатаДекларацииСоответствия,
	|	СДИЗЗЕРНО.ДекларацияСоответствия.Номер           КАК НомерДекларацииСоответствия,
	|	СДИЗЗЕРНО.ДекларацияСоответствия.ДатаОкончания   КАК ДатаОкончанияДекларацииСоответствия
	|ИЗ
	|	ВТ_СДИЗ_Корректируемые КАК ВТ_СДИЗ_Корректируемые
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СДИЗЗЕРНО КАК СДИЗЗЕРНО
	|		ПО ВТ_СДИЗ_Корректируемые.СДИЗ = СДИЗЗЕРНО.Ссылка",
	"Шапка");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ВТ_СДИЗ_Корректируемые.СДИЗ                                 КАК СДИЗ,
	|	СДИЗЗЕРНОТранспортныеСредства.Перевозчик                    КАК Перевозчик,
	|	СДИЗЗЕРНОТранспортныеСредства.ТипТранспорта                 КАК ТипТранспорта,
	|	СДИЗЗЕРНОТранспортныеСредства.НомерТранспортногоСредства    КАК НомерТранспортногоСредства,
	|	СДИЗЗЕРНОТранспортныеСредства.НомерАвтомобильногоКонтейнера КАК НомерАвтомобильногоКонтейнера
	|ИЗ
	|	ВТ_СДИЗ_Корректируемые КАК ВТ_СДИЗ_Корректируемые
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СДИЗЗЕРНО.ТранспортныеСредства КАК СДИЗЗЕРНОТранспортныеСредства
	|		ПО ВТ_СДИЗ_Корректируемые.СДИЗ = СДИЗЗЕРНОТранспортныеСредства.Ссылка",
	"ТранспортныеСредства");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ВТ_СДИЗ_Корректируемые.СДИЗ                  КАК СДИЗ,
	|	СДИЗЗЕРНОМестаПерегрузки.Перевозчик          КАК Перевозчик,
	|	СДИЗЗЕРНОМестаПерегрузки.Адрес               КАК Адрес
	|ИЗ
	|	ВТ_СДИЗ_Корректируемые КАК ВТ_СДИЗ_Корректируемые
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СДИЗЗЕРНО.МестаПерегрузки КАК СДИЗЗЕРНОМестаПерегрузки
	|		ПО ВТ_СДИЗ_Корректируемые.СДИЗ = СДИЗЗЕРНОМестаПерегрузки.Ссылка",
	"МестаПерегрузки");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ВТ_СДИЗ_Корректируемые.СДИЗ                                КАК СДИЗ,
	|	СДИЗЗЕРНОСвязанныеДокументы.ПервичныйДокумент.ТипДокумента КАК ТипДокумента,
	|	СДИЗЗЕРНОСвязанныеДокументы.ПервичныйДокумент.Дата         КАК Дата,
	|	СДИЗЗЕРНОСвязанныеДокументы.ПервичныйДокумент.Номер        КАК Номер
	|ИЗ
	|	ВТ_СДИЗ_Корректируемые КАК ВТ_СДИЗ_Корректируемые
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СДИЗЗЕРНО.СвязанныеДокументы КАК СДИЗЗЕРНОСвязанныеДокументы
	|		ПО ВТ_СДИЗ_Корректируемые.СДИЗ = СДИЗЗЕРНОСвязанныеДокументы.Ссылка",
	"СвязанныеДокументы");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ВТ_СДИЗ_Корректируемые.СДИЗ                                      КАК СДИЗ,
	|	СДИЗЗЕРНОСвязанныеДокументыПрочие.ПервичныйДокумент.ТипДокумента КАК ТипДокумента,
	|	СДИЗЗЕРНОСвязанныеДокументыПрочие.ПервичныйДокумент.Дата         КАК Дата,
	|	СДИЗЗЕРНОСвязанныеДокументыПрочие.ПервичныйДокумент.Номер        КАК Номер
	|ИЗ
	|	ВТ_СДИЗ_Корректируемые КАК ВТ_СДИЗ_Корректируемые
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СДИЗЗЕРНО.СвязанныеДокументыПрочие КАК СДИЗЗЕРНОСвязанныеДокументыПрочие
	|		ПО ВТ_СДИЗ_Корректируемые.СДИЗ = СДИЗЗЕРНОСвязанныеДокументыПрочие.Ссылка",
	"СвязанныеДокументыПрочие");
	
	Запрос = Новый Запрос;
	
	Если ТипЗнч(ОбъектРасчета) = Тип("Массив") Тогда
		МассивДокументовРасчета = ОбъектРасчета;
	Иначе
		МассивДокументовРасчета = Новый Массив;
		МассивДокументовРасчета.Добавить(ОбъектРасчета);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ОбъектыРасчета", МассивДокументовРасчета);
	Запрос.УстановитьПараметр("МассивСДИЗ",     МассивСДИЗ);
	Запрос.УстановитьПараметр("ОтборПоСтрокам", МассивСДИЗ.Количество());
	
	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка                    = РезультатЗапроса["Шапка"].Выбрать();
	//@skip-warning
	ТранспортныеСредства     = РезультатЗапроса["ТранспортныеСредства"].Выгрузить();
	//@skip-warning
	МестаПерегрузки          = РезультатЗапроса["МестаПерегрузки"].Выгрузить();
	//@skip-warning
	СвязанныеДокументы       = РезультатЗапроса["СвязанныеДокументы"].Выгрузить();
	//@skip-warning
	СвязанныеДокументыПрочие = РезультатЗапроса["СвязанныеДокументыПрочие"].Выгрузить();
	
	СтруктураДанных = Новый Структура();
	СтруктураДанных.Вставить("ДанныеШапки",                     Шапка);
	СтруктураДанных.Вставить("ДанныеТранспортныхСредств",       ТранспортныеСредства);
	СтруктураДанных.Вставить("ДанныеМестПерегрузки",            МестаПерегрузки);
	СтруктураДанных.Вставить("ДанныеСвязанныхДокументов",       СвязанныеДокументы);
	СтруктураДанных.Вставить("ДанныеСвязанныхДокументовПрочих", СвязанныеДокументыПрочие);
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция РезультатЗапросаДанныхДляРасчетаХешСуммКорректировочногоСДИЗПоСДИЗ(ОбъектРасчета)
	
	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СДИЗЗЕРНО.Ссылка КАК СДИЗ
	|ПОМЕСТИТЬ ВТ_СДИЗ_Корректируемые
	|ИЗ
	|	Справочник.СДИЗЗЕРНО КАК СДИЗЗЕРНО
	|ГДЕ
	|	СДИЗЗЕРНО.Ссылка В (&ОбъектыРасчета)");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ВТ_СДИЗ_Корректируемые.СДИЗ                      КАК СДИЗ,
	|	СДИЗЗЕРНО.Покупатель                             КАК Покупатель,
	|	СДИЗЗЕРНО.Перевозка                              КАК Перевозка,
	|	СДИЗЗЕРНО.Приемка                                КАК Приемка,
	|	СДИЗЗЕРНО.Реализация                             КАК Реализация,
	|	СДИЗЗЕРНО.Отгрузка                               КАК Отгрузка,
	|	СДИЗЗЕРНО.Грузоотправитель                       КАК Грузоотправитель,
	|	СДИЗЗЕРНО.Грузополучатель                        КАК Грузополучатель,
	|	СДИЗЗЕРНО.ПунктНазначения                        КАК ПунктНазначения,
	|	СДИЗЗЕРНО.ДоговорГПД.Дата                        КАК ДатаГПД,
	|	СДИЗЗЕРНО.ДоговорГПД.Номер                       КАК НомерГПД,
	|	СДИЗЗЕРНО.ФитосанитарныйСертификат.Дата          КАК ДатаФитосанитарногоСертификата,
	|	СДИЗЗЕРНО.ФитосанитарныйСертификат.Номер         КАК НомерФитосанитарногоСертификата,
	|	СДИЗЗЕРНО.ФитосанитарныйСертификат.ДатаОкончания КАК ДатаОкончанияФитосанитарногоСертификата,
	|	СДИЗЗЕРНО.ВетеринарныйСертификат.Дата            КАК ДатаВетеринарногоСертификата,
	|	СДИЗЗЕРНО.ВетеринарныйСертификат.Номер           КАК НомерВетеринарногоСертификата,
	|	СДИЗЗЕРНО.ВетеринарныйСертификат.ДатаОкончания   КАК ДатаОкончанияВетеринарногоСертификата,
	|	СДИЗЗЕРНО.ДекларацияСоответствия.Дата            КАК ДатаДекларацииСоответствия,
	|	СДИЗЗЕРНО.ДекларацияСоответствия.Номер           КАК НомерДекларацииСоответствия,
	|	СДИЗЗЕРНО.ДекларацияСоответствия.ДатаОкончания   КАК ДатаОкончанияДекларацииСоответствия
	|ИЗ
	|	ВТ_СДИЗ_Корректируемые КАК ВТ_СДИЗ_Корректируемые
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СДИЗЗЕРНО КАК СДИЗЗЕРНО
	|		ПО ВТ_СДИЗ_Корректируемые.СДИЗ = СДИЗЗЕРНО.Ссылка",
	"Шапка");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ВТ_СДИЗ_Корректируемые.СДИЗ                                 КАК СДИЗ,
	|	СДИЗЗЕРНОТранспортныеСредства.Перевозчик                    КАК Перевозчик,
	|	СДИЗЗЕРНОТранспортныеСредства.ТипТранспорта                 КАК ТипТранспорта,
	|	СДИЗЗЕРНОТранспортныеСредства.НомерТранспортногоСредства    КАК НомерТранспортногоСредства,
	|	СДИЗЗЕРНОТранспортныеСредства.НомерАвтомобильногоКонтейнера КАК НомерАвтомобильногоКонтейнера
	|ИЗ
	|	ВТ_СДИЗ_Корректируемые КАК ВТ_СДИЗ_Корректируемые
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СДИЗЗЕРНО.ТранспортныеСредства КАК СДИЗЗЕРНОТранспортныеСредства
	|		ПО ВТ_СДИЗ_Корректируемые.СДИЗ = СДИЗЗЕРНОТранспортныеСредства.Ссылка",
	"ТранспортныеСредства");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ВТ_СДИЗ_Корректируемые.СДИЗ                  КАК СДИЗ,
	|	СДИЗЗЕРНОМестаПерегрузки.Перевозчик          КАК Перевозчик,
	|	СДИЗЗЕРНОМестаПерегрузки.Адрес               КАК Адрес
	|ИЗ
	|	ВТ_СДИЗ_Корректируемые КАК ВТ_СДИЗ_Корректируемые
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СДИЗЗЕРНО.МестаПерегрузки КАК СДИЗЗЕРНОМестаПерегрузки
	|		ПО ВТ_СДИЗ_Корректируемые.СДИЗ = СДИЗЗЕРНОМестаПерегрузки.Ссылка",
	"МестаПерегрузки");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ВТ_СДИЗ_Корректируемые.СДИЗ                                КАК СДИЗ,
	|	СДИЗЗЕРНОСвязанныеДокументы.ПервичныйДокумент.ТипДокумента КАК ТипДокумента,
	|	СДИЗЗЕРНОСвязанныеДокументы.ПервичныйДокумент.Дата         КАК Дата,
	|	СДИЗЗЕРНОСвязанныеДокументы.ПервичныйДокумент.Номер        КАК Номер
	|ИЗ
	|	ВТ_СДИЗ_Корректируемые КАК ВТ_СДИЗ_Корректируемые
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СДИЗЗЕРНО.СвязанныеДокументы КАК СДИЗЗЕРНОСвязанныеДокументы
	|		ПО ВТ_СДИЗ_Корректируемые.СДИЗ = СДИЗЗЕРНОСвязанныеДокументы.Ссылка",
	"СвязанныеДокументы");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ВТ_СДИЗ_Корректируемые.СДИЗ                                      КАК СДИЗ,
	|	СДИЗЗЕРНОСвязанныеДокументыПрочие.ПервичныйДокумент.ТипДокумента КАК ТипДокумента,
	|	СДИЗЗЕРНОСвязанныеДокументыПрочие.ПервичныйДокумент.Дата         КАК Дата,
	|	СДИЗЗЕРНОСвязанныеДокументыПрочие.ПервичныйДокумент.Номер        КАК Номер
	|ИЗ
	|	ВТ_СДИЗ_Корректируемые КАК ВТ_СДИЗ_Корректируемые
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СДИЗЗЕРНО.СвязанныеДокументыПрочие КАК СДИЗЗЕРНОСвязанныеДокументыПрочие
	|		ПО ВТ_СДИЗ_Корректируемые.СДИЗ = СДИЗЗЕРНОСвязанныеДокументыПрочие.Ссылка",
	"СвязанныеДокументыПрочие");
	
	Запрос = Новый Запрос;
	
	Если ТипЗнч(ОбъектРасчета) = Тип("Массив") Тогда
		МассивДокументовРасчета = ОбъектРасчета;
	Иначе
		МассивДокументовРасчета = Новый Массив;
		МассивДокументовРасчета.Добавить(ОбъектРасчета);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ОбъектыРасчета", МассивДокументовРасчета);
	
	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка                    = РезультатЗапроса["Шапка"].Выбрать();
	//@skip-warning
	ТранспортныеСредства     = РезультатЗапроса["ТранспортныеСредства"].Выгрузить();
	//@skip-warning
	МестаПерегрузки          = РезультатЗапроса["МестаПерегрузки"].Выгрузить();
	//@skip-warning
	СвязанныеДокументы       = РезультатЗапроса["СвязанныеДокументы"].Выгрузить();
	//@skip-warning
	СвязанныеДокументыПрочие = РезультатЗапроса["СвязанныеДокументыПрочие"].Выгрузить();
	
	СтруктураДанных = Новый Структура();
	СтруктураДанных.Вставить("ДанныеШапки",                     Шапка);
	СтруктураДанных.Вставить("ДанныеТранспортныхСредств",       ТранспортныеСредства);
	СтруктураДанных.Вставить("ДанныеМестПерегрузки",            МестаПерегрузки);
	СтруктураДанных.Вставить("ДанныеСвязанныхДокументов",       СвязанныеДокументы);
	СтруктураДанных.Вставить("ДанныеСвязанныхДокументовПрочих", СвязанныеДокументыПрочие);
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция СтруктураДанныхШапкиДляРасчетаХешСуммыКорректировочногоСДИЗ()
	
	СтруктураДанныхШапки = Новый Структура();
	СтруктураДанныхШапки.Вставить("Покупатель",                              Справочники.КлючиРеквизитовОрганизацийЗЕРНО.ПустаяСсылка());
	СтруктураДанныхШапки.Вставить("Перевозка",                               Ложь);
	СтруктураДанныхШапки.Вставить("Приемка",                                 Ложь);
	СтруктураДанныхШапки.Вставить("Реализация",                              Ложь);
	СтруктураДанныхШапки.Вставить("Отгрузка",                                Ложь);
	СтруктураДанныхШапки.Вставить("Грузоотправитель",                        Справочники.КлючиРеквизитовОрганизацийЗЕРНО.ПустаяСсылка());
	СтруктураДанныхШапки.Вставить("Грузополучатель",                         Справочники.КлючиРеквизитовОрганизацийЗЕРНО.ПустаяСсылка());
	СтруктураДанныхШапки.Вставить("ПунктНазначения",                         Справочники.КлючиАдресовЗЕРНО.ПустаяСсылка());
	СтруктураДанныхШапки.Вставить("ДатаГПД",                                 Дата(1, 1, 1));
	СтруктураДанныхШапки.Вставить("НомерГПД",                                "");
	СтруктураДанныхШапки.Вставить("ДатаФитосанитарногоСертификата",          Дата(1, 1, 1));
	СтруктураДанныхШапки.Вставить("ДатаОкончанияФитосанитарногоСертификата", Дата(1, 1, 1));
	СтруктураДанныхШапки.Вставить("НомерФитосанитарногоСертификата",         "");
	СтруктураДанныхШапки.Вставить("ДатаВетеринарногоСертификата",            Дата(1, 1, 1));
	СтруктураДанныхШапки.Вставить("ДатаОкончанияВетеринарногоСертификата",   Дата(1, 1, 1));
	СтруктураДанныхШапки.Вставить("НомерВетеринарногоСертификата",           "");
	СтруктураДанныхШапки.Вставить("ДатаДекларацииСоответствия",              Дата(1, 1, 1));
	СтруктураДанныхШапки.Вставить("ДатаОкончанияДекларацииСоответствия",     Дата(1, 1, 1));
	СтруктураДанныхШапки.Вставить("НомерДекларацииСоответствия",             "");
	
	Возврат СтруктураДанныхШапки;
	
КонецФункции

Функция СтруктураДанныхТранспортныхСредствДляРасчетаХешСуммыКорректировочногоСДИЗ()
	
	СтруктураДанныхТранспортныеСредства = Новый Структура();
	СтруктураДанныхТранспортныеСредства.Вставить("Перевозчик",                    Неопределено);
	СтруктураДанныхТранспортныеСредства.Вставить("ТипТранспорта",                 Неопределено);
	СтруктураДанныхТранспортныеСредства.Вставить("НомерТранспортногоСредства",    "");
	СтруктураДанныхТранспортныеСредства.Вставить("НомерАвтомобильногоКонтейнера", "");
	
	Возврат СтруктураДанныхТранспортныеСредства;
	
КонецФункции

Функция СтруктураДанныхМестПерегрузкиДляРасчетаХешСуммыКорректировочногоСДИЗ()
	
	СтруктураДанныхМестаПерегрузки = Новый Структура();
	СтруктураДанныхМестаПерегрузки.Вставить("Перевозчик", Неопределено);
	СтруктураДанныхМестаПерегрузки.Вставить("Адрес",      "");
	
	Возврат СтруктураДанныхМестаПерегрузки;
	
КонецФункции

Функция СтруктураДанныхСвязанныхДокументовДляРасчетаХешСуммыКорректировочногоСДИЗ()
	
	СтруктураДанныхСвязанныеДокументы = Новый Структура();
	СтруктураДанныхСвязанныеДокументы.Вставить("ТипДокумента", Справочники.КлассификаторНСИЗЕРНО.ПустаяСсылка());
	СтруктураДанныхСвязанныеДокументы.Вставить("Номер",        "");
	СтруктураДанныхСвязанныеДокументы.Вставить("Дата",         Дата(1, 1, 1));
	
	Возврат СтруктураДанныхСвязанныеДокументы;
	
КонецФункции

Функция СформироватьДанныеПечатнойФормыПоСДИЗ(КорректируемыйСДИЗ)
	
	ТекстыЗапросов = Новый СписокЗначений();
	ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ
		|	СДИЗЗЕРНО.Ссылка        КАК СДИЗ,
		|	СДИЗЗЕРНО.Идентификатор КАК НомерСДИЗ
		|ИЗ
		|	Справочник.СДИЗЗЕРНО КАК СДИЗЗЕРНО
		|ГДЕ
		|	СДИЗЗЕРНО.Ссылка = &КорректируемыйСДИЗ", "Шапка");
		
	ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ
		|	ИсторияПогашенийСДИЗЗЕРНО.СДИЗ,
		|	ЕСТЬNULL(РеестрПартийЗЕРНО.Ссылка, ИсторияПогашенийСДИЗЗЕРНО.НомерПартии) КАК Партия,
		|	ИсторияПогашенийСДИЗЗЕРНО.НомерПартии,
		|	ИсторияПогашенийСДИЗЗЕРНО.ДатаОперации КАК ДатаПогашения,
		|	ИсторияПогашенийСДИЗЗЕРНО.КоличествоЗЕРНО КАК МассаПогашения,
		|	ИсторияПогашенийСДИЗЗЕРНО.ПолноеПогашение,
		|	ИсторияПогашенийСДИЗЗЕРНО.ОписаниеПричины КАК Примечание
		|ПОМЕСТИТЬ ДанныеПогашений
		|ИЗ
		|	РегистрСведений.ИсторияПогашенийСДИЗЗЕРНО КАК ИсторияПогашенийСДИЗЗЕРНО
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РеестрПартийЗЕРНО КАК РеестрПартийЗЕРНО
		|		ПО ИсторияПогашенийСДИЗЗЕРНО.НомерПартии = РеестрПартийЗЕРНО.Идентификатор
		|ГДЕ
		|	ИсторияПогашенийСДИЗЗЕРНО.СДИЗ = &КорректируемыйСДИЗ
		|	И ИсторияПогашенийСДИЗЗЕРНО.ВидОперации = &ВидОперацииПогашение
		|	И ИсторияПогашенийСДИЗЗЕРНО.Статус = &СтатусАктуально
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсторияПогашенийСДИЗЗЕРНО.СДИЗ,
		|	ЕСТЬNULL(РеестрПартийЗЕРНО.Ссылка, ИсторияПогашенийСДИЗЗЕРНО.НомерПартии) КАК Партия,
		|	ИсторияПогашенийСДИЗЗЕРНО.НомерПартии,
		|	ИсторияПогашенийСДИЗЗЕРНО.ДатаОперации КАК ДатаОтказаПогашения,
		|	ИсторияПогашенийСДИЗЗЕРНО.КоличествоЗЕРНО КАК МассаПогашения,
		|	ИсторияПогашенийСДИЗЗЕРНО.Причина КАК ПричинаОтказа,
		|	ИсторияПогашенийСДИЗЗЕРНО.ОписаниеПричины КАК Примечание
		|ПОМЕСТИТЬ ДанныеОтказовПогашений
		|ИЗ
		|	РегистрСведений.ИсторияПогашенийСДИЗЗЕРНО КАК ИсторияПогашенийСДИЗЗЕРНО
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РеестрПартийЗЕРНО КАК РеестрПартийЗЕРНО
		|		ПО ИсторияПогашенийСДИЗЗЕРНО.НомерПартии = РеестрПартийЗЕРНО.Идентификатор
		|ГДЕ
		|	ИсторияПогашенийСДИЗЗЕРНО.СДИЗ = &КорректируемыйСДИЗ
		|	И ИсторияПогашенийСДИЗЗЕРНО.ВидОперации = &ВидОперацииОтказПогашения
		|	И ИсторияПогашенийСДИЗЗЕРНО.Статус = &СтатусАктуально");
		
	ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ
		|	ДанныеПогашений.СДИЗ,
		|	ДанныеПогашений.Партия,
		|	ДанныеПогашений.НомерПартии,
		|	ДанныеПогашений.ДатаПогашения,
		|	ДанныеПогашений.МассаПогашения,
		|	ДанныеПогашений.ПолноеПогашение,
		|	ДанныеПогашений.Примечание,
		|	ЕСТЬNULL(ОстаткиПартийЗЕРНООстатки.КоличествоЗЕРНООстаток, 0) -
		|		ЕСТЬNULL(ОстаткиПартийЗЕРНООстатки.ВОбработкеЗЕРНООстаток, 0) КАК ОстатокПартии
		|ИЗ
		|	РегистрНакопления.ОстаткиПартийЗЕРНО.Остатки(, Партия В
		|		(ВЫБРАТЬ
		|			Т.Партия
		|		ИЗ
		|			ДанныеПогашений КАК Т)) КАК ОстаткиПартийЗЕРНООстатки
		|		ПРАВОЕ СОЕДИНЕНИЕ ДанныеПогашений КАК ДанныеПогашений
		|		ПО ДанныеПогашений.Партия = ОстаткиПартийЗЕРНООстатки.Партия", "ДанныеПогашений");
	
	ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ
		|	ДанныеОтказовПогашений.СДИЗ,
		|	ДанныеОтказовПогашений.Партия,
		|	ДанныеОтказовПогашений.НомерПартии,
		|	ДанныеОтказовПогашений.ДатаОтказаПогашения,
		|	ДанныеОтказовПогашений.МассаПогашения,
		|	ДанныеОтказовПогашений.ПричинаОтказа,
		|	ДанныеОтказовПогашений.Примечание,
		|	ЕСТЬNULL(ОстаткиПартийЗЕРНООстатки.КоличествоЗЕРНООстаток, 0) -
		|		ЕСТЬNULL(ОстаткиПартийЗЕРНООстатки.ВОбработкеЗЕРНООстаток, 0) КАК ОстатокПартии
		|ИЗ
		|	РегистрНакопления.ОстаткиПартийЗЕРНО.Остатки(, Партия В
		|		(ВЫБРАТЬ
		|			Т.Партия
		|		ИЗ
		|			ДанныеОтказовПогашений КАК Т)) КАК ОстаткиПартийЗЕРНООстатки
		|		ПРАВОЕ СОЕДИНЕНИЕ ДанныеОтказовПогашений КАК ДанныеОтказовПогашений
		|		ПО ДанныеОтказовПогашений.Партия = ОстаткиПартийЗЕРНООстатки.Партия", "ДанныеОтказовПогашений");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("КорректируемыйСДИЗ",        КорректируемыйСДИЗ);
	Запрос.УстановитьПараметр("ВидОперацииПогашение",      Перечисления.ВидыОперацийЗЕРНО.ПогашениеСДИЗ);
	Запрос.УстановитьПараметр("ВидОперацииОтказПогашения", Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗОтказПогашенияСДИЗ);
	Запрос.УстановитьПараметр("СтатусАктуально",           Перечисления.СтатусыЗаписейЗЕРНО.Подписано);
	
	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапросов);
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ТекстыЗапросовЗаполненияКорректировочногоОформленияСДИЗПриВводеНаОснованииПрикладныхДокументов()
	
	СписокЗапросов = Новый СписокЗначений();
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокументы.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ОформленныеДокументы
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО КАК ТаблицаДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОбъектовСинхронизацииЗЕРНО КАК СтатусыДокументовЗЕРНО
	|		ПО СтатусыДокументовЗЕРНО.ОбъектСинхронизации = ТаблицаДокументы.Ссылка
	|			И СтатусыДокументовЗЕРНО.ИдентификаторСтроки = """"
	|ГДЕ
	|	ТаблицаДокументы.ДокументОснование = &ДокументОснование
	|	И ТаблицаДокументы.ВидПродукции В (&ОсобенностьУчета)
	|	И ТаблицаДокументы.Ссылка <> &ЭтаСсылка
	|	И ТаблицаДокументы.Проведен");
	
	СписокЗапросов.Добавить(
	"
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыСерии.Номенклатура            КАК Номенклатура,
	|	ТоварыСерии.Характеристика          КАК Характеристика,
	|	ТоварыСерии.Серия                   КАК Серия,
	|	ТоварыСерии.Количество              КАК Количество
	|ПОМЕСТИТЬ ТоварыКОформлению
	|ИЗ
	|	ТоварыСерии КАК ТоварыСерии
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОформленныеТовары.Номенклатура,
	|	ОформленныеТовары.Характеристика,
	|	ОформленныеТовары.Серия,
	|	СУММА(ВЫБОР  
	|		КОГДА НЕ ОформленныеТовары.Ссылка.Корректировочный ТОГДА
	|			-ОформленныеТовары.Количество
	|		КОГДА ОформлениеСДИЗЗЕРНОДанныеКорректировки.Операция В (&МассивОперацийУвеличенияКоличества)
	|			ТОГДА ЕСТЬNULL(-ОформлениеСДИЗЗЕРНОДанныеКорректировки.Количество, 0)
	|		КОГДА ОформлениеСДИЗЗЕРНОДанныеКорректировки.Операция В (&МассивОперацийУменьшенияКоличества)
	|			ТОГДА ЕСТЬNULL(ОформлениеСДИЗЗЕРНОДанныеКорректировки.Количество, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ)
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО.Товары КАК ОформленныеТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОформлениеСДИЗЗЕРНО.ДанныеКорректировки КАК ОформлениеСДИЗЗЕРНОДанныеКорректировки
	|		ПО ОформленныеТовары.Ссылка = ОформлениеСДИЗЗЕРНОДанныеКорректировки.Ссылка
	|			И ОформленныеТовары.КорректируемыйСДИЗ = ОформлениеСДИЗЗЕРНОДанныеКорректировки.КорректируемыйСДИЗ
	|ГДЕ
	|	ОформленныеТовары.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Ссылка
	|			ИЗ
	|				ОформленныеДокументы КАК Т)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОформленныеТовары.Номенклатура,
	|	ОформленныеТовары.Характеристика,
	|	ОформленныеТовары.Серия
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.Номенклатура            КАК Номенклатура,
	|	ТоварыКОформлению.Характеристика          КАК Характеристика,
	|	ТоварыКОформлению.Серия                   КАК Серия,
	|	СУММА(ТоварыКОформлению.Количество)       КАК Количество
	|ИЗ
	|	ТоварыКОформлению КАК ТоварыКОформлению
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОформлению.Номенклатура,
	|	ТоварыКОформлению.Характеристика,
	|	ТоварыКОформлению.Серия
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКОформлению.Количество) <> 0", "ТоварыКОформлению");
	
	СписокЗапросов.Добавить(
	"////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументы.ПредставлениеДокумента  КАК ПредставлениеДокумента,
	|	ТаблицаДокументы.ДокументОснование       КАК ДокументОснование
	|ПОМЕСТИТЬ КорректируемыйПрикладнойДокумент
	|ИЗ
	|	&ТаблицаКорректируемыйДокумент КАК ТаблицаДокументы
	|;
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументы.ПредставлениеДокумента  КАК ПредставлениеДокумента,
	|	ТаблицаДокументы.ДокументОснование       КАК ДокументОснование,
	|	ЕСТЬNULL(СтатусыОформленияДокументовЗЕРНО.СтатусОформления, ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовГосИС.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовГосИС.Оформлено)
	|		ИЛИ ЕСТЬNULL(СтатусыОформленияДокументовЗЕРНО.Архивный, ЛОЖЬ) КАК ОформлениеСДИЗЗавершено
	|ИЗ
	|	КорректируемыйПрикладнойДокумент КАК ТаблицаДокументы
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОформленияДокументовЗЕРНО КАК СтатусыОформленияДокументовЗЕРНО
	|	ПО ТаблицаДокументы.ДокументОснование = СтатусыОформленияДокументовЗЕРНО.Основание
	|	И СтатусыОформленияДокументовЗЕРНО.Документ = ЗНАЧЕНИЕ(Документ.ОформлениеСДИЗЗЕРНО.ПустаяСсылка)", "КорректируемыйДокумент");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ТаблицаКорректируемыеДокументы.Ссылка                    КАК Ссылка,
	|	СтатусыДокументовЗЕРНО.Статус                            КАК Статус
	|ПОМЕСТИТЬ КорректируемыеДокументы
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО КАК ТаблицаКорректируемыеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОбъектовСинхронизацииЗЕРНО КАК СтатусыДокументовЗЕРНО
	|		ПО СтатусыДокументовЗЕРНО.ОбъектСинхронизации = ТаблицаКорректируемыеДокументы.Ссылка
	|		И СтатусыДокументовЗЕРНО.ИдентификаторСтроки = """"
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КорректируемыйПрикладнойДокумент КАК ТаблицаДокументы
	|		ПО ТаблицаКорректируемыеДокументы.ДокументОснование = ТаблицаДокументы.ДокументОснование
	|ГДЕ
	|	ТаблицаКорректируемыеДокументы.Ссылка <> &ЭтаСсылка
	|	И ТаблицаКорректируемыеДокументы.Проведен
	|	И СтатусыДокументовЗЕРНО.Статус В (&КонечныеСтатусы)
	|	И ТаблицаКорректируемыеДокументы.ВидПродукции В (&ОсобенностьУчета)");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ТоварыКорректируемыхДокументов.СДИЗ             КАК КорректируемыйСДИЗ,
	|	КорректируемыеДокументы.Статус                  КАК Статус,
	|	ТоварыКорректируемыхДокументов.Номенклатура     КАК Номенклатура,
	|	ТоварыКорректируемыхДокументов.Характеристика   КАК Характеристика,
	|	ТоварыКорректируемыхДокументов.Серия            КАК Серия,
	|	ТоварыКорректируемыхДокументов.Количество       КАК Количество
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО.Товары КАК ТоварыКорректируемыхДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КорректируемыеДокументы КАК КорректируемыеДокументы
	|			ПО ТоварыКорректируемыхДокументов.Ссылка = КорректируемыеДокументы.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СДИЗЗЕРНО КАК КорректирующиеСДИЗ
	|			ПО ТоварыКорректируемыхДокументов.СДИЗ = КорректирующиеСДИЗ.КорректируемыйСДИЗ
	|ГДЕ
	|	КорректирующиеСДИЗ.Ссылка ЕСТЬ NULL
	|УПОРЯДОЧИТЬ ПО
	|	ТоварыКорректируемыхДокументов.Ссылка.Дата УБЫВ", "ДоступныеДляКорректировкиСДИЗ");
	
	Возврат СписокЗапросов;
	
КонецФункции

#КонецОбласти

#Область Проведение

// Возвращает статусы документа в которых требуется пересчет движений.
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыОбработкиОформлениеСДИЗЗЕРНО - статусы пересчета движений.
//
Функция СтатусыПересчетаДвижений()
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.СДИЗОформлен);
	Статусы.Добавить(Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.СДИЗОформленЧастично);
	Статусы.Добавить(Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОформлениеСДИЗАннулировано);
	Статусы.Добавить(Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ПартииСформированы);
	Статусы.Добавить(Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ПартииСформированыЧастично);
	Статусы.Добавить(Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОтказПогашенияСДИЗАннулирован);
	Статусы.Добавить(Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОтказПогашенияСДИЗОформлен);
	Статусы.Добавить(Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.КорректировкаОформленияСДИЗВыполнена);
	Статусы.Добавить(Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.КорректировкаОформленияСДИЗОшибкаОжидаетсяДействие);
	Статусы.Добавить(Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.КорректировкаОформленияСДИЗОжидаетсяДействие);
	Статусы.Добавить(Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ПартияАннулирована);
	Статусы.Добавить(Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.СДИЗПартияАннулирована);
	
	Возврат Статусы;
	
КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеШапки.Дата         КАК Период,
	|	ДанныеШапки.Ссылка       КАК Ссылка
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО КАК ДанныеШапки
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОбъектовСинхронизацииЗЕРНО КАК СтатусыДокументов
	|		ПО СтатусыДокументов.ОбъектСинхронизации = &Ссылка
	|		И СтатусыДокументов.ИдентификаторСтроки = """"
	|ГДЕ
	|	ДанныеШапки.Ссылка = &Ссылка";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Период",         Реквизиты.Период);
	Запрос.УстановитьПараметр("Ссылка",         Реквизиты.Ссылка);
	Запрос.УстановитьПараметр("СтатусЧерновик", Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.Черновик);
	Запрос.УстановитьПараметр("ПустаяПартия",   Справочники.РеестрПартийЗЕРНО.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойСДИЗ",     Справочники.СДИЗЗЕРНО.ПустаяСсылка());
	
	Запрос.УстановитьПараметр(
		"ОперацияКорректировкиОформлениеСДИЗ",
		Перечисления.ОперацииКорректировкиСДИЗ.ОформлениеСДИЗ);
	Запрос.УстановитьПараметр(
		"ОперацияКорректировкиОтказОтПогашенияСДИЗ",
		Перечисления.ОперацииКорректировкиСДИЗ.ОтказОтПогашения);
	Запрос.УстановитьПараметр(
		"ОперацияКорректировкиАннулированиеСДИЗ",
		Перечисления.ОперацииКорректировкиСДИЗ.АннулированиеСДИЗ);
	Запрос.УстановитьПараметр(
		"ОперацияКорректировкиАннулированиеПартии",
		Перечисления.ОперацииКорректировкиСДИЗ.АннулированиеПартии);
	Запрос.УстановитьПараметр(
		"ОперацияКорректировкиАннулированиеОтказаОтПогашенияСДИЗ",
		Перечисления.ОперацииКорректировкиСДИЗ.АннулированиеОтказаОтПогашения);
	Запрос.УстановитьПараметр(
		"ОперацияКорректировкиКорректировкаСДИЗ",
		Перечисления.ОперацииКорректировкиСДИЗ.КорректировкаСДИЗ);
	
	
	Запрос.УстановитьПараметр(
		"СтатусыРезервированияИсходнойПартии",
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.СтатусыРезервированияИсходнойПартии());
	Запрос.УстановитьПараметр(
		"СтатусыРасходаИсходнойПартииБезВыделенияПартии",
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.СтатусыРасходаИсходнойПартииБезВыделенияПартии());
	Запрос.УстановитьПараметр(
		"СтатусыРасходаИсходнойПартииСВыделениемПартии",
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.СтатусыРасходаИсходнойПартииСВыделениемПартии());
	Запрос.УстановитьПараметр(
		"СтатусыРезервированияВыделеннойПартии",
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.СтатусыРезервированияВыделеннойПартии());
	Запрос.УстановитьПараметр(
		"СтатусыРасходаВыделеннойПартии",
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.СтатусыРасходаВыделеннойПартии());
	Запрос.УстановитьПараметр(
		"СтатусыПриходаВыделеннойПартии",
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.СтатусыПриходаВыделеннойПартии());
	Запрос.УстановитьПараметр(
		"СтатусыРасходаНовойПартии",
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.СтатусыРасходаНовойПартии());
	Запрос.УстановитьПараметр(
		"СтатусыПриходаОтказаПогашенияСДИЗ",
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.СтатусыПриходаОтказаПогашенияСДИЗ());
	Запрос.УстановитьПараметр(
		"СтатусыПриходаАннулированияОтказаОтПогашенияСДИЗ",
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.СтатусыПриходаАннулированияОтказаОтПогашенияСДИЗ());
	Запрос.УстановитьПараметр(
		"СтатусыРасходаАннулированияОформленияСДИЗ",
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.СтатусыРасходаАннулированияОформленияСДИЗ());
	Запрос.УстановитьПараметр(
		"СтатусыПриходаАннулированияВыделеннойПартии",
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.СтатусыПриходаАннулированияВыделеннойПартии());
	Запрос.УстановитьПараметр(
		"СтатусыРасходаАннулированияСписанияПартии",
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.СтатусыРасходаАннулированияСписанияПартии());
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаОстаткиПартийЗЕРНО(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОстаткиПартийЗЕРНО";
	
	Если НЕ ИнтеграцияИС.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"// Подготовка исходных данных корректрировки
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Статусы.Статус, &СтатусЧерновик) КАК СтатусОбработки,
	|	Товары.Партия                             КАК Партия,
	|	Товары.ВыделеннаяПартия                   КАК ВыделеннаяПартия,
	|	&ПустаяПартия                             КАК НоваяПартия,
	|	Товары.КоличествоЗЕРНО                    КАК КоличествоЗЕРНО,
	|	Товары.Операция                           КАК Операция,
	|	Товары.КорректируемыйСДИЗ                 КАК СДИЗ
	|ПОМЕСТИТЬ ДанныеКорректировки
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО.ДанныеКорректировки КАК Товары
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОбъектовСинхронизацииЗЕРНО КАК Статусы
	|		ПО Товары.Ссылка       = Статусы.ОбъектСинхронизации
	|		И Товары.Идентификатор = Статусы.ИдентификаторСтроки
	|	
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И Товары.Операция <> &ОперацияКорректировкиКорректировкаСДИЗ";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	ТекстЗапроса =
	"// Подготовка исходных данных оформления
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Статусы.Статус, &СтатусЧерновик) КАК СтатусОбработки,
	|	Товары.Партия                             КАК Партия,
	|	Товары.ВыделеннаяПартия                   КАК ВыделеннаяПартия,
	|	Товары.НоваяПартия                        КАК НоваяПартия,
	|	Товары.КоличествоЗЕРНО                    КАК КоличествоЗЕРНО
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО.Товары КАК Товары
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОбъектовСинхронизацииЗЕРНО КАК Статусы
	|		ПО Товары.Ссылка       = Статусы.ОбъектСинхронизации
	|		И Товары.Идентификатор = Статусы.ИдентификаторСтроки
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И Товары.КорректируемыйСДИЗ = &ПустойСДИЗ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеКорректировки.СтатусОбработки  КАК СтатусОбработки,
	|	ДанныеКорректировки.Партия           КАК Партия,
	|	ДанныеКорректировки.ВыделеннаяПартия КАК ВыделеннаяПартия,
	|	&ПустаяПартия                        КАК НоваяПартия,
	|	ДанныеКорректировки.КоличествоЗЕРНО  КАК КоличествоЗЕРНО
	|ИЗ
	|	ДанныеКорректировки КАК ДанныеКорректировки
	|	
	|ГДЕ
	|	ДанныеКорректировки.Операция = &ОперацияКорректировкиОформлениеСДИЗ";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	ТекстЗапроса =
	"// Резервирование исходной партии
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаТовары.Партия                   КАК Партия,
	|	0                                      КАК КоличествоЗЕРНО,
	|	ТаблицаТовары.КоличествоЗЕРНО          КАК ВОбработкеЗЕРНО
	|ПОМЕСТИТЬ ДанныеДвиженийОформлениеСДИЗ
	|ИЗ
	|	Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.СтатусОбработки В (&СтатусыРезервированияИсходнойПартии)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Списание исходной партии без выделения партии
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаТовары.Партия                   КАК Партия,
	|	ТаблицаТовары.КоличествоЗЕРНО          КАК КоличествоЗЕРНО,
	|	0                                      КАК ВОбработкеЗЕРНО
	|ИЗ
	|	Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.СтатусОбработки В (&СтатусыРасходаИсходнойПартииБезВыделенияПартии)
	|	И ТаблицаТовары.ВыделеннаяПартия = &ПустаяПартия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Списание исходной партии с выделением партии
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаТовары.Партия                   КАК Партия,
	|	ТаблицаТовары.КоличествоЗЕРНО          КАК КоличествоЗЕРНО,
	|	0                                      КАК ВОбработкеЗЕРНО
	|ИЗ
	|	Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.СтатусОбработки В (&СтатусыРасходаИсходнойПартииСВыделениемПартии)
	|	И ТаблицаТовары.ВыделеннаяПартия <> &ПустаяПартия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Приход выделенной партии
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаТовары.ВыделеннаяПартия         КАК Партия,
	|	ТаблицаТовары.КоличествоЗЕРНО          КАК КоличествоЗЕРНО,
	|	0                                      КАК ВОбработкеЗЕРНО
	|ИЗ
	|	Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.СтатусОбработки В (&СтатусыПриходаВыделеннойПартии)
	|	И ТаблицаТовары.ВыделеннаяПартия <> &ПустаяПартия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Резервирование выделенной партии
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаТовары.ВыделеннаяПартия         КАК Партия,
	|	0                                      КАК КоличествоЗЕРНО,
	|	ТаблицаТовары.КоличествоЗЕРНО          КАК ВОбработкеЗЕРНО
	|ИЗ
	|	Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.СтатусОбработки В (&СтатусыРезервированияВыделеннойПартии)
	|	И ТаблицаТовары.ВыделеннаяПартия <> &ПустаяПартия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Списание выделенной партии
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаТовары.ВыделеннаяПартия         КАК Партия,
	|	ТаблицаТовары.КоличествоЗЕРНО          КАК КоличествоЗЕРНО,
	|	0                                      КАК ВОбработкеЗЕРНО
	|ИЗ
	|	Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.СтатусОбработки В (&СтатусыРасходаВыделеннойПартии)
	|	И ТаблицаТовары.ВыделеннаяПартия <> &ПустаяПартия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Новая партия
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)  КАК ВидДвижения,
	|	ТаблицаТовары.НоваяПартия               КАК Партия,
	|	ТаблицаТовары.КоличествоЗЕРНО           КАК КоличествоЗЕРНО,
	|	0                                       КАК ВОбработкеЗЕРНО
	|ИЗ
	|	Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.СтатусОбработки В (&СтатусыРасходаНовойПартии)
	|	И ТаблицаТовары.НоваяПартия <> &ПустаяПартия
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	ТекстЗапроса =
	"// Оформление отказа от погашения
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ДанныеКорректировки.Партия             КАК Партия,
	|	ДанныеКорректировки.КоличествоЗЕРНО    КАК КоличествоЗЕРНО,
	|	0                                      КАК ВОбработкеЗЕРНО
	|ПОМЕСТИТЬ ДанныеДвиженийКорректировкиОформленияСДИЗ
	|ИЗ
	|	ДанныеКорректировки КАК ДанныеКорректировки
	|ГДЕ
	|	ДанныеКорректировки.СтатусОбработки В (&СтатусыПриходаОтказаПогашенияСДИЗ)
	|	И ДанныеКорректировки.Партия <> &ПустаяПартия
	|	И ДанныеКорректировки.Операция = &ОперацияКорректировкиОтказОтПогашенияСДИЗ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Оформление аннулирования отказа погашения
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ДанныеКорректировки.Партия             КАК Партия,
	|	-ДанныеКорректировки.КоличествоЗЕРНО   КАК КоличествоЗЕРНО,
	|	0                                      КАК ВОбработкеЗЕРНО
	|ИЗ
	|	ДанныеКорректировки КАК ДанныеКорректировки
	|ГДЕ
	|	ДанныеКорректировки.СтатусОбработки В (&СтатусыПриходаАннулированияОтказаОтПогашенияСДИЗ)
	|	И ДанныеКорректировки.Партия <> &ПустаяПартия
	|	И ДанныеКорректировки.Операция = &ОперацияКорректировкиАннулированиеОтказаОтПогашенияСДИЗ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Оформление аннулирования СДИЗ
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ДанныеКорректировки.Партия             КАК Партия,
	|	-ДанныеКорректировки.КоличествоЗЕРНО   КАК КоличествоЗЕРНО,
	|	0                                      КАК ВОбработкеЗЕРНО
	|ИЗ
	|	ДанныеКорректировки КАК ДанныеКорректировки
	|ГДЕ
	|	ДанныеКорректировки.СтатусОбработки В (&СтатусыРасходаАннулированияОформленияСДИЗ)
	|	И ДанныеКорректировки.Партия <> &ПустаяПартия
	|	И ДанныеКорректировки.Операция = &ОперацияКорректировкиАннулированиеСДИЗ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Оформление аннулирования выделенной партии
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ДанныеКорректировки.Партия             КАК Партия,
	|	-ДанныеКорректировки.КоличествоЗЕРНО   КАК КоличествоЗЕРНО,
	|	0                                      КАК ВОбработкеЗЕРНО
	|ИЗ
	|	ДанныеКорректировки КАК ДанныеКорректировки
	|ГДЕ
	|	ДанныеКорректировки.СтатусОбработки В (&СтатусыПриходаАннулированияВыделеннойПартии)
	|	И ДанныеКорректировки.Партия <> &ПустаяПартия
	|	И ДанныеКорректировки.Операция = &ОперацияКорректировкиАннулированиеПартии
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Оформление аннулирования списания исходной партии
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	Товары.Партия                          КАК Партия,
	|	-ДанныеКорректировки.КоличествоЗЕРНО   КАК КоличествоЗЕРНО,
	|	0                                      КАК ВОбработкеЗЕРНО
	|ИЗ
	|	ДанныеКорректировки КАК ДанныеКорректировки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОформлениеСДИЗЗЕРНО.Товары КАК Товары
	|	ПО ДанныеКорректировки.СДИЗ = Товары.КорректируемыйСДИЗ
	|	И Товары.Ссылка = &Ссылка
	|ГДЕ
	|	ДанныеКорректировки.СтатусОбработки В (&СтатусыРасходаАннулированияСписанияПартии)
	|	И ДанныеКорректировки.Партия <> &ПустаяПартия
	|	И ДанныеКорректировки.Операция = &ОперацияКорректировкиАннулированиеПартии
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ДанныеДвижений.ВидДвижения            КАК ВидДвижения,
		|	&Период                               КАК Период,
		|	ДанныеДвижений.Партия                 КАК Партия,
		|	СУММА(ДанныеДвижений.КоличествоЗЕРНО) КАК КоличествоЗЕРНО,
		|	СУММА(ДанныеДвижений.ВОбработкеЗЕРНО) КАК ВОбработкеЗЕРНО
		|ИЗ
		|	ДанныеДвиженийОформлениеСДИЗ КАК ДанныеДвижений
		|СГРУППИРОВАТЬ ПО
		|	ДанныеДвижений.ВидДвижения,
		|	ДанныеДвижений.Партия
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеДвижений.ВидДвижения            КАК ВидДвижения,
		|	&Период                               КАК Период,
		|	ДанныеДвижений.Партия                 КАК Партия,
		|	СУММА(ДанныеДвижений.КоличествоЗЕРНО) КАК КоличествоЗЕРНО,
		|	СУММА(ДанныеДвижений.ВОбработкеЗЕРНО) КАК ВОбработкеЗЕРНО
		|ИЗ
		|	ДанныеДвиженийКорректировкиОформленияСДИЗ КАК ДанныеДвижений
		|СГРУППИРОВАТЬ ПО
		|	ДанныеДвижений.ВидДвижения,
		|	ДанныеДвижений.Партия",
		ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

// Формирует JSON сообщения для выделения новых партий.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОформлениеСДИЗЗЕРНО - Ссылка на документ
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML - Сообщения к передаче
Функция СформироватьПартииЗЕРНО(ДокументСсылка, ДополнительныеПараметры)
	
	СообщенияXML    = Новый Массив();
	СписокЗапросов  = Новый СписокЗначений;
	Операция        = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииИзДругихПартий;
	ПараметрыОбмена = ДополнительныеПараметры.ПараметрыОбмена;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ПрисоединенныеФайлыЗЕРНО.Документ           КАК Ссылка,
	|	МАКСИМУМ(ЕСТЬNULL(ПрисоединенныеФайлыЗЕРНО.Версия, 0)) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ЗЕРНОПрисоединенныеФайлы КАК ПрисоединенныеФайлыЗЕРНО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОформлениеСДИЗЗЕРНО КАК Шапка
	|		ПО Шапка.Ссылка   = &Ссылка
	|		 И &Операция = ПрисоединенныеФайлыЗЕРНО.Операция
	|		 И Шапка.Ссылка   = ПрисоединенныеФайлыЗЕРНО.Документ
	|ГДЕ
	|	ПрисоединенныеФайлыЗЕРНО.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ПрисоединенныеФайлыЗЕРНО.Документ
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование                  КАК ДокументОснование,
	|	
	|	Шапка.Операция          КАК Операция,
	|	Шапка.ВидПродукции      КАК ВидПродукции,
	|
	|	Шапка.Организация                КАК Организация,
	|	Шапка.Подразделение              КАК Подразделение,
	|	Представление(Шапка.Организация) КАК ОрганизацияПредставление,
	|	
	|	Шапка.ПунктОтправления КАК ПунктОтправления,
	|	
	|	Шапка.Ссылка КАК Ссылка
	|
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Товары.НомерСтроки     КАК НомерСтроки,
	|	Товары.Идентификатор   КАК ИдентификаторСтроки,
	|	Товары.КодТНВЭД        КАК КодТНВЭД,
	|	Товары.ОКПД2           КАК ОКПД2,
	|	Товары.Номенклатура    КАК Номенклатура,
	|	Товары.Характеристика  КАК Характеристика,
	|	Товары.Серия           КАК Серия,
	|	Товары.Партия          КАК Партия,
	|	Товары.КоличествоЗЕРНО КАК КоличествоЗЕРНО,
	|	""""                   КАК ИдентификаторСтрокиДанныеКорректировки
	|ПОМЕСТИТЬ ТоварыДанныеКорректировки
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО.Товары КАК Товары
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОбъектовСинхронизацииЗЕРНО КАК СтатусыДокументов
	|		ПО СтатусыДокументов.ОбъектСинхронизации = Товары.Ссылка
	|		И СтатусыДокументов.ИдентификаторСтроки = Товары.Идентификатор
	|		И СтатусыДокументов.Статус В (&КонечныеСтатусы)
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И Товары.ВыделеннаяПартия = ЗНАЧЕНИЕ(Справочник.РеестрПартийЗЕРНО.ПустаяСсылка)
	|	И Товары.КорректируемыйСДИЗ = ЗНАЧЕНИЕ(Справочник.СДИЗЗЕРНО.ПустаяСсылка)
	|	И СтатусыДокументов.Статус ЕСТЬ NULL
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.НомерСтроки                  КАК НомерСтроки,
	|	Товары.Идентификатор                КАК ИдентификаторСтроки,
	|	Товары.КодТНВЭД                     КАК КодТНВЭД,
	|	Товары.ОКПД2                        КАК ОКПД2,
	|	Товары.Номенклатура                 КАК Номенклатура,
	|	Товары.Характеристика               КАК Характеристика,
	|	Товары.Серия                        КАК Серия,
	|	ДанныеКорректировки.Партия          КАК Партия,
	|	ДанныеКорректировки.КоличествоЗЕРНО КАК КоличествоЗЕРНО,
	|	ДанныеКорректировки.Идентификатор   КАК ИдентификаторСтрокиДанныеКорректировки
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО.ДанныеКорректировки КАК ДанныеКорректировки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОформлениеСДИЗЗЕРНО.Товары КАК Товары
	|		ПО ДанныеКорректировки.Операция = &ОперацияОформлениеСДИЗ
	|		И ДанныеКорректировки.Ссылка = Товары.Ссылка
	|		И ДанныеКорректировки.КорректируемыйСДИЗ = Товары.КорректируемыйСДИЗ
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОбъектовСинхронизацииЗЕРНО КАК СтатусыДокументов
	|		ПО СтатусыДокументов.ОбъектСинхронизации = ДанныеКорректировки.Ссылка
	|		И СтатусыДокументов.ИдентификаторСтроки = ДанныеКорректировки.Идентификатор
	|		И СтатусыДокументов.Статус В (&КонечныеСтатусы)
	|ГДЕ
	|	ДанныеКорректировки.Ссылка = &Ссылка
	|	И Товары.Ссылка = &Ссылка
	|	И ДанныеКорректировки.ВыделеннаяПартия = ЗНАЧЕНИЕ(Справочник.РеестрПартийЗЕРНО.ПустаяСсылка)
	|	И ДанныеКорректировки.Партия <> ЗНАЧЕНИЕ(Справочник.РеестрПартийЗЕРНО.ПустаяСсылка)
	|	И СтатусыДокументов.Статус ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Партия
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(1) КАК КоличествоСтрок,
	|	Товары.Партия КАК Партия,
	|	СУММА(Товары.КоличествоЗЕРНО) КАК КоличествоЗЕРНО
	|ПОМЕСТИТЬ ПартииКПолучениюОстатков
	|ИЗ
	|	ТоварыДанныеКорректировки КАК Товары
	|СГРУППИРОВАТЬ ПО
	|	Товары.Партия
	|ИНДЕКСИРОВАТЬ ПО
	|	Партия
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ПартииКПолучениюОстатков.Партия КАК Партия,
	|	ЕСТЬNULL(ОстаткиПартийЗЕРНООстатки.КоличествоЗЕРНООстаток, 0) КАК КоличествоОстатокЗЕРНО
	|ПОМЕСТИТЬ ПартииКОформлению
	|ИЗ
	|	ПартииКПолучениюОстатков КАК ПартииКПолучениюОстатков
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиПартийЗЕРНО.Остатки(, Партия В
	|			(ВЫБРАТЬ
	|				ПартииКПолучениюОстатков.Партия КАК Партия
	|			ИЗ
	|				ПартииКПолучениюОстатков)) КАК ОстаткиПартийЗЕРНООстатки
	|		ПО ПартииКПолучениюОстатков.Партия = ОстаткиПартийЗЕРНООстатки.Партия
	|ГДЕ
	|	ПартииКПолучениюОстатков.КоличествоЗЕРНО <> ЕСТЬNULL(ОстаткиПартийЗЕРНООстатки.КоличествоЗЕРНООстаток, 0)
	|	ИЛИ ПартииКПолучениюОстатков.КоличествоСтрок > 1
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Товары.НомерСтроки    КАК НомерСтроки,
	|	Товары.КодТНВЭД       КАК КодТНВЭД,
	|	Товары.ОКПД2          КАК ОКПД2,
	|	Товары.Номенклатура   КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия          КАК Серия,
	|
	|	Товары.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	Товары.ИдентификаторСтрокиДанныеКорректировки КАК ИдентификаторСтрокиДанныеКорректировки,
	|
	|	Товары.Партия                            КАК Партия,
	|	ПРЕДСТАВЛЕНИЕ(Товары.Партия)             КАК ПартияПредставление,
	|	Товары.КоличествоЗЕРНО                   КАК КоличествоЗЕРНО,
	|	ПартииКОформлению.КоличествоОстатокЗЕРНО КАК КоличествоОстатокЗЕРНО,
	|
	|	РеестрПартийЗЕРНО.ВладелецПартии  КАК ВладелецПартии,
	|	Представление(РеестрПартийЗЕРНО.ВладелецПартии) КАК ВладелецПартииПредставление,
	|	РеестрПартийЗЕРНО.Элеватор        КАК Элеватор,
	|	РеестрПартийЗЕРНО.Производитель   КАК Товаропроизводитель,
	|	Представление(РеестрПартийЗЕРНО.Производитель) КАК ТоваропроизводительПредставление,
	|
	|	РеестрПартийЗЕРНО.Идентификатор    КАК НомерПартии,
	|	РеестрПартийЗЕРНО.ГодУрожая        КАК ГодУрожая,
	|	РеестрПартийЗЕРНО.ДатаИзготовления КАК ДатаИзготовления,
	|	РеестрПартийЗЕРНО.Местоположение                                     КАК Местоположение,
	|	РеестрПартийЗЕРНО.Местоположение.Идентификатор                       КАК МестоположениеСтрокой,
	|	ЕСТЬNULL(РеестрПартийЗЕРНО.Местоположение.ИдентификаторАдреса, """") КАК ИдентификаторАдреса,
	|	ЕСТЬNULL(РеестрПартийЗЕРНО.Местоположение.ОКТМО, """")               КАК ОКТМО,
	|	РеестрПартийЗЕРНО.Местоположение.Индекс                              КАК Индекс,
	|	РеестрПартийЗЕРНО.Местоположение.ОператорыАдреса.(
	|		СкладКонтрагент) КАК ОператорыАдреса,
	|
	|	РеестрПартийЗЕРНО.НазначениеПартии                КАК Назначение,
	|	РеестрПартийЗЕРНО.НазначениеПартии.Идентификатор  КАК НазначениеПартииИдентификатор,
	|	РеестрПартийЗЕРНО.ЦельИспользования.Идентификатор КАК ЦельИспользованияИдентификатор,
	|
	|	РеестрПартийЗЕРНО.КодСтраныНазначения КАК КодСтраныНазначения,
	|	РеестрПартийЗЕРНО.СтранаНазначения    КАК СтранаНазначения
	|
	|ИЗ
	|	ПартииКОформлению КАК ПартииКОформлению
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыДанныеКорректировки КАК Товары
	|		ПО Товары.Партия = ПартииКОформлению.Партия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РеестрПартийЗЕРНО КАК РеестрПартийЗЕРНО
	|		ПО Товары.Партия = РеестрПартийЗЕРНО.Ссылка
	|",
	"Партии");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ПотребительскиеСвойства.ПотребительскоеСвойство КАК ПотребительскоеСвойство,
	|	ПотребительскиеСвойства.Значение                КАК Значение,
	|	ПартииКОформлению.Партия                        КАК Партия,
	|
	|	ЕСТЬNULL(ПотребительскиеСвойства.ПотребительскоеСвойство.Идентификатор, """") КАК ПотребительскоеСвойствоИдентификатор
	|
	|ИЗ
	|	ПартииКОформлению КАК ПартииКОформлению
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РеестрПартийЗЕРНО.ПотребительскиеСвойства КАК ПотребительскиеСвойства
	|		ПО ПартииКОформлению.Партия = ПотребительскиеСвойства.Ссылка
	|",
	"ПотребительскиеСвойства");
	
	КонечныеСтатусы = КонечныеСтатусы(Ложь);
	КонечныеСтатусы.Добавить(Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ПартииСформированы);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",          ДокументСсылка);
	Запрос.УстановитьПараметр("Операция",        Операция);
	Запрос.УстановитьПараметр("КонечныеСтатусы", КонечныеСтатусы);
	Запрос.УстановитьПараметр("ОперацияОформлениеСДИЗ", Перечисления.ОперацииКорректировкиСДИЗ.ОформлениеСДИЗ);
	
	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка             = РезультатЗапроса["Шапка"].Выбрать();
	//@skip-warning
	Партии            = РезультатЗапроса["Партии"].Выгрузить();
	//@skip-warning
	ПотребительскиеСвойства = РезультатЗапроса["ПотребительскиеСвойства"].Выгрузить();
	
	АбстрактнаяОперация = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииРасчетСтатуса;
	
	Если Не Шапка.Следующий()
		Или Партии.Количество() = 0 Тогда
		
		СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXMLПоДокументу(Шапка, АбстрактнаяОперация, 0);
		СообщениеXML.Операция               = АбстрактнаяОперация;
		СообщениеXML.СсылкаНаОбъект         = ДокументСсылка;
		СообщениеXML.ТребуетсяПодписание    = Ложь;
		СообщениеXML.ДополнительноеОписание = СтрШаблон(НСтр("ru = 'по документу %1'"), ДокументСсылка);
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	ВидПродукции = Шапка.ВидПродукции;
	
	АбстрактноеСообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXMLПоДокументу(Шапка, АбстрактнаяОперация, НомерВерсии);
	АбстрактноеСообщениеXML.ТребуетсяПодписание = Ложь;
	
	ЭтоЗерно = ВидПродукции = Перечисления.ВидыПродукцииИС.Зерно;
	Если ЭтоЗерно Тогда
		ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_lots", ПараметрыОбмена.ПараметрыОптимизации);
		ИмяСвойстваЗапроса = "RequestCreateLot";
	Иначе
		ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_gpb", ПараметрыОбмена.ПараметрыОптимизации);
		ИмяСвойстваЗапроса = "RequestCreateGpb";
	КонецЕсли;
	
	АбстрактноеСообщениеXML.ПараметрыЗапроса.Вставить("ВидПродукции", ВидПродукции);
	
	Если Не ЭтоЗерно Тогда
		
		Производители = Новый Массив;
		Для Каждого СтрокаПартии Из Партии Цикл
			Если ЗначениеЗаполнено(СтрокаПартии.Товаропроизводитель) Тогда
				Производители.Добавить(СтрокаПартии.Товаропроизводитель);
			Иначе
				Производители.Добавить(СтрокаПартии.ВладелецПартии);
			КонецЕсли;
		КонецЦикла;
		РеквизитыОрганизаций = Справочники.КлючиРеквизитовОрганизацийЗЕРНО.КлючиРеквизитовПоСсылкеЗЕРНО(Производители);
		
	КонецЕсли;
	
	ПартииСгруппированные = Партии.Скопировать(, "Партия, КоличествоЗЕРНО, КоличествоОстатокЗЕРНО");
	ПартииСгруппированные.Колонки.Добавить("Количество");
	ПартииСгруппированные.ЗаполнитьЗначения(1, "Количество");
	ПартииСгруппированные.Свернуть("Партия, КоличествоОстатокЗЕРНО", "Количество, КоличествоЗЕРНО");
	
	Отбор = Новый Структура("Партия");
	
	ДанныеДополненияАдресаКлючаАдресов = ИнтеграцияЗЕРНОСлужебный.ИдентификаторыАдресногоОбъекта();
	Если ЗначениеЗаполнено(Шапка.ПунктОтправления) Тогда
		ДанныеДополненияАдресаКлючаАдресов = ИнтеграцияЗЕРНОСлужебный.ДанныеДополненияАдресаРФППоОператоруАдреса(Шапка.ПунктОтправления);
	КонецЕсли;
	
	Для Каждого СтрокаПартииСгруппированная Из ПартииСгруппированные Цикл
		
		Отбор.Партия = СтрокаПартииСгруппированная.Партия;
		СтрокиДокумента = Партии.НайтиСтроки(Отбор);
		
		Если СтрокаПартииСгруппированная.КоличествоЗЕРНО > СтрокаПартииСгруппированная.КоличествоОстатокЗЕРНО Тогда
			
			Если СтрокиДокумента.Количество() = 1 Тогда
				ИнтеграцияЗЕРНОКлиентСервер.ДобавитьТекстОшибки(
					АбстрактноеСообщениеXML,
					СтрШаблон(
						НСтр("ru = 'В строке %1 недостаточно остатков для формирования партии %2. Доступный остаток %3 кг, к оформлению %4 кг'"),
						СтрокиДокумента[0].НомерСтроки,
						СтрокиДокумента[0].ПартияПредставление,
						СтрокиДокумента[0].КоличествоОстатокЗЕРНО,
						СтрокиДокумента[0].КоличествоЗЕРНО));
				
			Иначе
				
				НомераСтрок = Новый Массив;
				Для Каждого СтрокаДокумента Из СтрокиДокумента Цикл
					НомераСтрок.Добавить(СтрокаДокумента.НомерСтроки);
				КонецЦикла;
				НомераСтрокПредставление = СтрСоединить(НомераСтрок, ", ");
				
				Для Каждого СтрокаДокумента Из СтрокиДокумента Цикл
					ИнтеграцияЗЕРНОКлиентСервер.ДобавитьТекстОшибки(
						АбстрактноеСообщениеXML,
						СтрШаблон(
							НСтр("ru = 'В строке %1 недостаточно остатков для формирования партии %2. Доступный остаток %3 кг, к оформлению %4 кг в строках %5'"),
							СтрокаДокумента.НомерСтроки,
							СтрокаДокумента.ПартияПредставление,
							СтрокаПартииСгруппированная.КоличествоОстатокЗЕРНО,
							СтрокаПартииСгруппированная.КоличествоЗЕРНО,
							НомераСтрокПредставление));
				КонецЦикла;
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		Для Каждого СтрокаПартии Из СтрокиДокумента Цикл
		
			СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXMLПоДокументу(
				Шапка, Операция, НомерВерсии);
			СообщениеXML.ЗагружатьДо         = АбстрактноеСообщениеXML.Идентификатор;
			Если ЗначениеЗаполнено(СтрокаПартии.ИдентификаторСтрокиДанныеКорректировки) Тогда
				СообщениеXML.ИдентификаторСтроки = СтрокаПартии.ИдентификаторСтрокиДанныеКорректировки;
				СообщениеXML.ПараметрыЗапроса.Вставить("ЭтоДанныеКорректировки", Истина);
			Иначе
				СообщениеXML.ИдентификаторСтроки = СтрокаПартии.ИдентификаторСтроки;
			КонецЕсли;
			
			СообщениеXML.ПараметрыЗапроса.Вставить("ВидПродукции", ВидПродукции);
			
			ИнтеграцияЗЕРНОСлужебный.УстановитьСообщениеОснование(СообщениеXML, АбстрактноеСообщениеXML);
			
			ФормированиеПартииXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяСвойстваЗапроса);
			
			ИсходаяПартия = Новый Структура;
			ИсходаяПартия.Вставить("КоличествоЗЕРНО", СтрокаПартии.КоличествоЗЕРНО);
			ИсходаяПартия.Вставить("НомерПартии", СтрокаПартии.НомерПартии);
			
			ПредшествующиеПартии = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИсходаяПартия);
			
			Если ТипЗнч(СтрокаПартии.ОператорыАдреса) = Тип("ТаблицаЗначений") Тогда 
				ДанныеДополненияАдресаКлючаАдресов.ОператорыАдреса = СтрокаПартии.ОператорыАдреса.ВыгрузитьКолонку("СкладКонтрагент");
			ИначеЕсли ТипЗнч(СтрокаПартии.ОператорыАдреса) = Тип("РезультатЗапроса") Тогда
				ДанныеДополненияАдресаКлючаАдресов.ОператорыАдреса = СтрокаПартии.ОператорыАдреса.Выгрузить().ВыгрузитьКолонку("СкладКонтрагент");
			КонецЕсли;
			
			Если ЭтоЗерно Тогда
				
				ЭлементПартииXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "LotFromAnother", ФормированиеПартииXDTO);
				// ParentLotType
				ИнтеграцияЗЕРНОСлужебный.ЗаполнитьПредшествующиеПартииXDTO(ПредшествующиеПартии, ЭлементПартииXDTO, ПространствоИмен, АбстрактноеСообщениеXML);
				ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ФормированиеПартииXDTO, "LotFromAnother", ЭлементПартииXDTO, АбстрактноеСообщениеXML);
				
				//GrainProductType
				ВидКультурыXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Crop", ФормированиеПартииXDTO);
				ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ВидКультурыXDTO, "OKPD2", СтрокаПартии.ОКПД2, АбстрактноеСообщениеXML);
				Если ИнтеграцияЗЕРНОКлиентСервер.ТребуетсяЗаполнениеКодаТНВЭД(СтрокаПартии.Назначение) Тогда
					ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ВидКультурыXDTO, "TNVED", СтрокаПартии.КодТНВЭД, АбстрактноеСообщениеXML);
				КонецЕсли;
				ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ФормированиеПартииXDTO, "Crop", ВидКультурыXDTO, АбстрактноеСообщениеXML);
				
				ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ФормированиеПартииXDTO, "Target", СтрокаПартии.ЦельИспользованияИдентификатор, АбстрактноеСообщениеXML);
				ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ФормированиеПартииXDTO, "Purpose", СтрокаПартии.НазначениеПартииИдентификатор, АбстрактноеСообщениеXML);
				ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ФормированиеПартииXDTO, "HarvestYear", СтрокаПартии.ГодУрожая, АбстрактноеСообщениеXML);
				
				//AddressRFType
				ДанныеКлючаАдреса = ИнтеграцияЗЕРНОСлужебный.ДанныеКлючаАдреса();
				ДанныеКлючаАдреса.АдресСтрокой        = СтрокаПартии.МестоположениеСтрокой;
				ДанныеКлючаАдреса.Индекс              = СтрокаПартии.Индекс;
				ДанныеКлючаАдреса.ИдентификаторАдреса = СтрокаПартии.ИдентификаторАдреса;
				ДанныеКлючаАдреса.ОКТМО               = СтрокаПартии.ОКТМО;
				МестоположениеXDTO = ИнтеграцияЗЕРНОСлужебный.АдресРФПоКлючуАдресовXDTO(
					ДанныеКлючаАдреса,
					АбстрактноеСообщениеXML,
					ПараметрыОбмена,,
					ДанныеДополненияАдресаКлючаАдресов);
				ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ФормированиеПартииXDTO, "StoragePlace", МестоположениеXDTO, АбстрактноеСообщениеXML);
				
			Иначе
				
				// CreateGpbFromAnotherType
				ЭлементПартииXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "GpbFromAnother", ФормированиеПартииXDTO);
				// ParentGpbType
				ИнтеграцияЗЕРНОСлужебный.ЗаполнитьПредшествующиеПартииПродуктовПереработкиXDTO(ПредшествующиеПартии, ЭлементПартииXDTO, ПространствоИмен, АбстрактноеСообщениеXML);
				ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ФормированиеПартииXDTO, "GpbFromAnother", ЭлементПартииXDTO, АбстрактноеСообщениеXML);
			
				//GrainProductType
				ВидКультурыXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Product", ФормированиеПартииXDTO);
				ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ВидКультурыXDTO, "OKPD2", СтрокаПартии.ОКПД2, АбстрактноеСообщениеXML);
				Если ИнтеграцияЗЕРНОКлиентСервер.ТребуетсяЗаполнениеКодаТНВЭД(СтрокаПартии.Назначение) Тогда
					ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ВидКультурыXDTO, "TNVED", СтрокаПартии.КодТНВЭД, АбстрактноеСообщениеXML);
				КонецЕсли;
				ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ФормированиеПартииXDTO, "Product", ВидКультурыXDTO, АбстрактноеСообщениеXML);
				
				ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ФормированиеПартииXDTO, "Target", СтрокаПартии.ЦельИспользованияИдентификатор, АбстрактноеСообщениеXML);
				ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ФормированиеПартииXDTO, "Purpose", СтрокаПартии.НазначениеПартииИдентификатор, АбстрактноеСообщениеXML);
				
				//AddressRFType
				ДанныеКлючаАдреса = ИнтеграцияЗЕРНОСлужебный.ДанныеКлючаАдреса();
				ДанныеКлючаАдреса.АдресСтрокой        = СтрокаПартии.МестоположениеСтрокой;
				ДанныеКлючаАдреса.Индекс              = СтрокаПартии.Индекс;
				ДанныеКлючаАдреса.ИдентификаторАдреса = СтрокаПартии.ИдентификаторАдреса;
				ДанныеКлючаАдреса.ОКТМО               = СтрокаПартии.ОКТМО;
				МестоположениеXDTO = ИнтеграцияЗЕРНОСлужебный.АдресРФПоКлючуАдресовXDTO(
					ДанныеКлючаАдреса,
					АбстрактноеСообщениеXML,
					ПараметрыОбмена,,
					ДанныеДополненияАдресаКлючаАдресов);
				ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ФормированиеПартииXDTO, "StoragePlace", МестоположениеXDTO, АбстрактноеСообщениеXML);
			
				Если ЗначениеЗаполнено(СтрокаПартии.Товаропроизводитель) Тогда
					Производитель = СтрокаПартии.Товаропроизводитель;
					ПредставлениеИсточника = СтрШаблон(НСтр("ru = 'Производитель партии %1 %2'"),
						СтрокаПартии.НомерПартии,
						СтрокаПартии.ТоваропроизводительПредставление);
				Иначе
					Производитель = СтрокаПартии.ВладелецПартии;
					ПредставлениеИсточника = СтрШаблон(НСтр("ru = 'Производитель партии %1 %2'"),
						СтрокаПартии.НомерПартии,
						Шапка.ВладелецПартииПредставление);
				КонецЕсли;
				
				// Производитель - ключ реквизитов организации
				
				ИсточникДанныхПроизводитель = РеквизитыОрганизаций[Производитель];
				Если ИсточникДанныхПроизводитель = Неопределено Тогда
					
					ИнтеграцияЗЕРНОКлиентСервер.ДобавитьТекстОшибки(
						АбстрактноеСообщениеXML,
						СтрШаблон(
							НСтр("ru = 'В строке %1 не удалось определить данные производителя по ключу %2'"),
							СтрокаПартии.НомерСтроки,
							Производитель));
					Продолжить;
					
				ИначеЕсли ИсточникДанныхПроизводитель.Свойство("ТекстОшибки") Тогда
					
					ИнтеграцияЗЕРНОКлиентСервер.ДобавитьТекстОшибки(
						АбстрактноеСообщениеXML,
						СтрШаблон(
							НСтр("ru = 'В строке %1 для производителя партии %2 %3'"),
							СтрокаПартии.НомерСтроки,
							Производитель,
							ИсточникДанныхПроизводитель.ТекстОшибки));
					Продолжить;
					
				Иначе
					
					ПроизводительXDTO = ИнтеграцияЗЕРНОСлужебный.ОрганизацияКонтрагентXDTO(
						ИсточникДанныхПроизводитель,
						АбстрактноеСообщениеXML,
						ПараметрыОбмена,
						ПредставлениеИсточника);
					ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ФормированиеПартииXDTO, "Manufacturer", ПроизводительXDTO, АбстрактноеСообщениеXML);
					
				КонецЕсли;
				
				ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
					ФормированиеПартииXDTO, "createDate", Формат(СтрокаПартии.ДатаИзготовления, "ДФ=yyyy-MM-dd;"), АбстрактноеСообщениеXML);
				
			КонецЕсли;
			
			ИсточникДанных = СкопироватьПотребительскиеСвойстваИсходнойПартии(СтрокаПартии, ПотребительскиеСвойства, АбстрактноеСообщениеXML);
			
			//ListValueQualityIndicatorType
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьПотребительскиеСвойстваXDTO(
				ИсточникДанных,
				"",
				ФормированиеПартииXDTO,
				ПространствоИмен,
				АбстрактноеСообщениеXML);
			
			Если СтрокаПартии.Назначение = Справочники.КлассификаторНСИЗЕРНО.НазначениеПартииВывозСТерриторииРФ Тогда
				СтранаXDTO = ИнтеграцияЗЕРНОСлужебный.СтранаXDTO(СтрокаПартии.КодСтраныНазначения, АбстрактноеСообщениеXML, ПараметрыОбмена);
				ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ФормированиеПартииXDTO, "CountryDestination", СтранаXDTO, АбстрактноеСообщениеXML);
			КонецЕсли;
			
			СообщениеXML.ТекстСообщенияЗапросXML = ИнтеграцияЗЕРНОСлужебный.ОбъектXDTOВXML(
				ФормированиеПартииXDTO, ПространствоИмен, ИмяСвойстваЗапроса,
				ДополнительныеПараметры.ПараметрыОбмена);
			
			ИнициализироватьСтруктуруПараметрыСообщенияДляСопоставленияПартии(СообщениеXML.ПараметрыЗапроса);
			
			СообщениеXML.ПараметрыЗапроса.ВладелецПартии = СтрокаПартии.ВладелецПартии;
			СообщениеXML.ПараметрыЗапроса.Местоположение = СтрокаПартии.Местоположение;
			СообщениеXML.ПараметрыЗапроса.Элеватор       = СтрокаПартии.Элеватор;
			СообщениеXML.ПараметрыЗапроса.Производитель  = СтрокаПартии.Товаропроизводитель;
			
			СообщенияXML.Добавить(СообщениеXML);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если АбстрактноеСообщениеXML.Ошибки.Количество() Тогда
		СообщенияXML = Новый Массив;
	КонецЕсли;
	
	СообщенияXML.Добавить(АбстрактноеСообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

// Формирует JSON сообщения для оформления СДИЗ.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОформлениеСДИЗЗЕРНО - Ссылка на документ
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML - Сообщения к передаче
Функция ОформлениеСДИЗЗЕРНО(ДокументСсылка, ДополнительныеПараметры)
	
	СообщенияXML   = Новый Массив();
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(ТекстЗапросаВерсииОформлениеСДИЗ());
	СписокЗапросов.Добавить(ТекстЗапросаШапка(), "Шапка");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ДанныеКорректировки.Ссылка             КАК Ссылка,
	|	ДанныеКорректировки.Идентификатор      КАК ИдентификаторСтрокиДанныеКорректировки,
	|	ДанныеКорректировки.КорректируемыйСДИЗ КАК КорректируемыйСДИЗ,
	|	ДанныеКорректировки.КоличествоЗЕРНО    КАК КоличествоЗЕРНО,
	|	ВЫБОР
	|		КОГДА ДанныеКорректировки.ВыделеннаяПартия = ЗНАЧЕНИЕ(Справочник.РеестрПартийЗЕРНО.ПустаяСсылка)
	|			ТОГДА ДанныеКорректировки.Партия
	|		ИНАЧЕ ДанныеКорректировки.ВыделеннаяПартия
	|	КОНЕЦ КАК Партия,
	|	ДанныеКорректировки.Операция КАК Операция
	|ПОМЕСТИТЬ ДанныеКорректировки
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО.ДанныеКорректировки КАК ДанныеКорректировки
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОбъектовСинхронизацииЗЕРНО КАК СтатусыДокументов
	|		ПО СтатусыДокументов.ОбъектСинхронизации = ДанныеКорректировки.Ссылка
	|		И СтатусыДокументов.ИдентификаторСтроки = ДанныеКорректировки.Идентификатор
	|		И СтатусыДокументов.Статус В (&СтатусСДИЗОформлен)
	|ГДЕ
	|	ДанныеКорректировки.Ссылка = &Ссылка
	|	И ДанныеКорректировки.Операция В (&ОформлениеСДИЗ)
	|	И СтатусыДокументов.Статус ЕСТЬ NULL
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Товары.ВыделеннаяПартия = ЗНАЧЕНИЕ(Справочник.РеестрПартийЗЕРНО.ПустаяСсылка)
	|		ТОГДА Товары.Партия
	|		ИНАЧЕ Товары.ВыделеннаяПартия
	|	КОНЕЦ КАК Партия,
	|	КОЛИЧЕСТВО(Товары.НомерСтроки) КАК КоличествоСтрок,
	|	СУММА(Товары.КоличествоЗЕРНО)  КАК КоличествоЗЕРНО
	|ПОМЕСТИТЬ ПартииКПолучениюОстатков
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО.Товары КАК Товары
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОбъектовСинхронизацииЗЕРНО КАК СтатусыДокументов
	|		ПО СтатусыДокументов.ОбъектСинхронизации = Товары.Ссылка
	|		И СтатусыДокументов.ИдентификаторСтроки = Товары.Идентификатор
	|		И СтатусыДокументов.Статус В (&СтатусСДИЗОформлен)
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И Товары.КорректируемыйСДИЗ = ЗНАЧЕНИЕ(Справочник.СДИЗЗЕРНО.ПустаяСсылка)
	|	И СтатусыДокументов.Статус ЕСТЬ NULL
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА Товары.ВыделеннаяПартия = ЗНАЧЕНИЕ(Справочник.РеестрПартийЗЕРНО.ПустаяСсылка)
	|		ТОГДА Товары.Партия
	|		ИНАЧЕ Товары.ВыделеннаяПартия
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеКорректировки.Партия                 КАК Партия,
	|	КОЛИЧЕСТВО(Товары.НомерСтроки)             КАК КоличествоСтрок,
	|	СУММА(ДанныеКорректировки.КоличествоЗЕРНО) КАК КоличествоЗЕРНО
	|ИЗ
	|	ДанныеКорректировки КАК ДанныеКорректировки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОформлениеСДИЗЗЕРНО.Товары КАК Товары
	|		ПО Товары.Ссылка = ДанныеКорректировки.Ссылка
	|		И Товары.КорректируемыйСДИЗ = ДанныеКорректировки.КорректируемыйСДИЗ
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И ДанныеКорректировки.Операция = &ОформлениеСДИЗ
	|СГРУППИРОВАТЬ ПО
	|	ДанныеКорректировки.Партия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Партия
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ПартииКПолучениюОстатков.Партия          КАК Партия,
	|	ПартииКПолучениюОстатков.КоличествоЗЕРНО КАК КоличествоЗЕРНО,
	|	ПартииКПолучениюОстатков.КоличествоСтрок КАК КоличествоСтрок,
	|	Представление(ПартииКПолучениюОстатков.Партия) КАК ПартияПредставление,
	|
	|	ЕСТЬNULL(ОстаткиПартийЗЕРНООстатки.КоличествоЗЕРНООстаток, 0) КАК КоличествоОстатокЗЕРНО
	|ИЗ
	|	ПартииКПолучениюОстатков КАК ПартииКПолучениюОстатков
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиПартийЗЕРНО.Остатки(, Партия В
	|			(ВЫБРАТЬ
	|				ПартииКПолучениюОстатков.Партия КАК Партия
	|			ИЗ
	|				ПартииКПолучениюОстатков)) КАК ОстаткиПартийЗЕРНООстатки
	|		ПО ПартииКПолучениюОстатков.Партия = ОстаткиПартийЗЕРНООстатки.Партия
	|ГДЕ
	|	ПартииКПолучениюОстатков.КоличествоЗЕРНО <> ЕСТЬNULL(ОстаткиПартийЗЕРНООстатки.КоличествоЗЕРНООстаток, 0)
	|	ИЛИ ПартииКПолучениюОстатков.КоличествоСтрок > 1",
	"ОстаткиПартий");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Товары.НомерСтроки    КАК НомерСтроки,
	|	Товары.Идентификатор  КАК ИдентификаторСтроки,
	|	Товары.КодТНВЭД       КАК КодТНВЭД,
	|	Товары.ОКПД2          КАК ОКПД2,
	|	Товары.Номенклатура   КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия          КАК Серия,
	|
	|	РеестрПартийЗЕРНО.Ссылка                КАК Партия,
	|	РеестрПартийЗЕРНО.Идентификатор         КАК НомерПартии,
	|	Представление(РеестрПартийЗЕРНО.Ссылка) КАК ПартияПредставление,
	|
	|	ЕСТЬNULL(РеестрПартийЗЕРНО.Местоположение.Идентификатор, """")       КАК МестоположениеСтрокой,
	|	ЕСТЬNULL(РеестрПартийЗЕРНО.Местоположение.ИдентификаторАдреса, """") КАК ИдентификаторАдреса,
	|	ЕСТЬNULL(РеестрПартийЗЕРНО.Местоположение.ОКТМО, """")               КАК ОКТМО,
	|	ЕСТЬNULL(РеестрПартийЗЕРНО.Местоположение.Индекс, """")              КАК МестоположениеИндекс,
	|	РеестрПартийЗЕРНО.Местоположение.ОператорыАдреса.(
	|		СкладКонтрагент) КАК ОператорыАдреса,
	|	
	|	Товары.КоличествоЗЕРНО КАК КоличествоЗЕРНО,
	|
	|	Товары.Лаборатория                КАК Лаборатория,
	|	Представление(Товары.Лаборатория) КАК ЛабораторияПредставление,
	|	Товары.НомерПротоколаИспытаний    КАК НомерПротоколаИспытаний,
	|	Товары.ДатаПротоколаИспытаний     КАК ДатаПротоколаИспытаний,
	|	
	|	НЕОПРЕДЕЛЕНО КАК КорректируемыйСДИЗ,
	|	""""         КАК КорректируемыйСДИЗИдентификатор,
	|	""""         КАК ИдентификаторСтрокиДанныеКорректировки
	|
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО.Товары КАК Товары
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РеестрПартийЗЕРНО КАК РеестрПартийЗЕРНО
	|		ПО ВЫБОР
	|			КОГДА Товары.ВыделеннаяПартия = ЗНАЧЕНИЕ(Справочник.РеестрПартийЗЕРНО.ПустаяСсылка)
	|				ТОГДА Товары.Партия = РеестрПартийЗЕРНО.Ссылка
	|			ИНАЧЕ Товары.ВыделеннаяПартия = РеестрПартийЗЕРНО.Ссылка
	|		КОНЕЦ
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОбъектовСинхронизацииЗЕРНО КАК СтатусыДокументов
	|		ПО СтатусыДокументов.ОбъектСинхронизации = Товары.Ссылка
	|		И СтатусыДокументов.ИдентификаторСтроки = Товары.Идентификатор
	|		И СтатусыДокументов.Статус В (&СтатусСДИЗОформлен)
	|
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И Товары.КорректируемыйСДИЗ = ЗНАЧЕНИЕ(Справочник.СДИЗЗЕРНО.ПустаяСсылка)
	|	И СтатусыДокументов.Статус ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.НомерСтроки    КАК НомерСтроки,
	|	Товары.Идентификатор  КАК ИдентификаторСтроки,
	|	Товары.КодТНВЭД       КАК КодТНВЭД,
	|	Товары.ОКПД2          КАК ОКПД2,
	|	Товары.Номенклатура   КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия          КАК Серия,
	|
	|	РеестрПартийЗЕРНО.Ссылка                КАК Партия,
	|	РеестрПартийЗЕРНО.Идентификатор         КАК НомерПартии,
	|	Представление(РеестрПартийЗЕРНО.Ссылка) КАК ПартияПредставление,
	|
	|	ЕСТЬNULL(РеестрПартийЗЕРНО.Местоположение.Идентификатор, """")       КАК МестоположениеСтрокой,
	|	ЕСТЬNULL(РеестрПартийЗЕРНО.Местоположение.ИдентификаторАдреса, """") КАК ИдентификаторАдреса,
	|	ЕСТЬNULL(РеестрПартийЗЕРНО.Местоположение.ОКТМО, """")               КАК ОКТМО,
	|	ЕСТЬNULL(РеестрПартийЗЕРНО.Местоположение.Индекс, """")              КАК МестоположениеИндекс,
	|	РеестрПартийЗЕРНО.Местоположение.ОператорыАдреса.(
	|		СкладКонтрагент) КАК ОператорыАдреса,
	|
	|	ДанныеКорректировки.КоличествоЗЕРНО КАК КоличествоЗЕРНО,
	|
	|	Товары.Лаборатория                КАК Лаборатория,
	|	Представление(Товары.Лаборатория) КАК ЛабораторияПредставление,
	|	Товары.НомерПротоколаИспытаний    КАК НомерПротоколаИспытаний,
	|	Товары.ДатаПротоколаИспытаний     КАК ДатаПротоколаИспытаний,
	|	
	|	Товары.КорректируемыйСДИЗ КАК КорректируемыйСДИЗ,
	|	""""                      КАК КорректируемыйСДИЗИдентификатор,
	|
	|	ДанныеКорректировки.ИдентификаторСтрокиДанныеКорректировки КАК ИдентификаторСтрокиДанныеКорректировки
	|ИЗ
	|	ДанныеКорректировки КАК ДанныеКорректировки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОформлениеСДИЗЗЕРНО.Товары КАК Товары
	|		ПО Товары.Ссылка = ДанныеКорректировки.Ссылка
	|			И Товары.КорректируемыйСДИЗ = ДанныеКорректировки.КорректируемыйСДИЗ
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РеестрПартийЗЕРНО КАК РеестрПартийЗЕРНО
	|		ПО ДанныеКорректировки.Партия = РеестрПартийЗЕРНО.Ссылка
	|
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И Товары.Ссылка.Корректировочный
	|",
	"Товары");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Товары.Идентификатор КАК ИдентификаторСтроки,
	|
	|	РеестрПартийЗЕРНО.Ссылка            КАК ИсходнаяПартия,
	|	РеестрПартийЗЕРНО.ВладелецПартии    КАК ВладелецПартии,
	|	РеестрПартийЗЕРНО.Местоположение    КАК Местоположение,
	|	РеестрПартийЗЕРНО.ОКПД2             КАК ОКПД2,
	|	РеестрПартийЗЕРНО.КодТНВЭД          КАК КодТНВЭД,
	|	РеестрПартийЗЕРНО.ГодУрожая         КАК ГодУрожая,
	|	РеестрПартийЗЕРНО.НазначениеПартии  КАК НазначениеПартии,
	|	РеестрПартийЗЕРНО.ЦельИспользования КАК ЦельИспользования,
	|	РеестрПартийЗЕРНО.Элеватор          КАК Элеватор,
	|	РеестрПартийЗЕРНО.Производитель     КАК Производитель,
	|	РеестрПартийЗЕРНО.ДатаИзготовления  КАК ДатаИзготовления,
	|	
	|	РеестрПартийЗЕРНО.КоличествоНачальное КАК КоличествоНачальное,
	|
	|	РеестрПартийЗЕРНО.ПотребительскиеСвойства.(
	|		Ссылка,
	|		НомерСтроки,
	|		ПотребительскоеСвойство,
	|		Значение)
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО.Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РеестрПартийЗЕРНО КАК РеестрПартийЗЕРНО
	|		ПО ВЫБОР
	|			КОГДА Товары.ВыделеннаяПартия = ЗНАЧЕНИЕ(Справочник.РеестрПартийЗЕРНО.ПустаяСсылка)
	|				ТОГДА Товары.Партия = РеестрПартийЗЕРНО.Ссылка
	|			ИНАЧЕ Товары.ВыделеннаяПартия = РеестрПартийЗЕРНО.Ссылка
	|		КОНЕЦ
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И Товары.КорректируемыйСДИЗ = ЗНАЧЕНИЕ(Справочник.СДИЗЗЕРНО.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеКорректировки.ИдентификаторСтрокиДанныеКорректировки КАК ИдентификаторСтроки,
	|
	|	РеестрПартийЗЕРНО.Ссылка            КАК ИсходнаяПартия,
	|	РеестрПартийЗЕРНО.ВладелецПартии    КАК ВладелецПартии,
	|	РеестрПартийЗЕРНО.Местоположение    КАК Местоположение,
	|	РеестрПартийЗЕРНО.ОКПД2             КАК ОКПД2,
	|	РеестрПартийЗЕРНО.КодТНВЭД          КАК КодТНВЭД,
	|	РеестрПартийЗЕРНО.ГодУрожая         КАК ГодУрожая,
	|	РеестрПартийЗЕРНО.НазначениеПартии  КАК НазначениеПартии,
	|	РеестрПартийЗЕРНО.ЦельИспользования КАК ЦельИспользования,
	|	РеестрПартийЗЕРНО.Элеватор          КАК Элеватор,
	|	РеестрПартийЗЕРНО.Производитель     КАК Производитель,
	|	РеестрПартийЗЕРНО.ДатаИзготовления  КАК ДатаИзготовления,
	|	
	|	РеестрПартийЗЕРНО.КоличествоНачальное КАК КоличествоНачальное,
	|
	|	РеестрПартийЗЕРНО.ПотребительскиеСвойства.(
	|		Ссылка,
	|		НомерСтроки,
	|		ПотребительскоеСвойство,
	|		Значение)
	|ИЗ
	|	ДанныеКорректировки КАК ДанныеКорректировки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РеестрПартийЗЕРНО КАК РеестрПартийЗЕРНО
	|		ПО ДанныеКорректировки.Партия = РеестрПартийЗЕРНО.Ссылка
	|",
	"ИсходныеПартии");
	
	СписокЗапросов.Добавить(ТекстЗапросаПеревозчики(), "Перевозчики");
	СписокЗапросов.Добавить(ТекстЗапросаТранспортныеСредства(), "ТранспортныеСредства");
	СписокЗапросов.Добавить(ТекстЗапросаМестаПерегрузки(), "МестаПерегрузки");
	СписокЗапросов.Добавить(ТекстЗапросаСвязанныеДокументы(), "СвязанныеДокументы");
	СписокЗапросов.Добавить(ТекстЗапросаСвязанныеДокументыПрочие(), "СвязанныеДокументыПрочие");
	СписокЗапросов.Добавить(ТекстЗапросаДокументыСертификации(), "ДокументыСертификации");
	СписокЗапросов.Добавить(ТекстЗапросаУслугиЭлеватора(), "УслугиЭлеватора");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ОперацияКорректировочныйСДИЗ", Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗКорректировочный);
	
	СтатусыСДИЗОформлен = Новый Массив;
	СтатусыСДИЗОформлен.Добавить(Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.СДИЗОформлен);
	Запрос.УстановитьПараметр("СтатусСДИЗОформлен", СтатусыСДИЗОформлен);
	Запрос.УстановитьПараметр("ОформлениеСДИЗ",     Перечисления.ОперацииКорректировкиСДИЗ.ОформлениеСДИЗ);
	СтатусыСДИЗОформлен = Новый Массив;
	СтатусыСДИЗОформлен.Добавить(Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.СДИЗОформлен);
	Запрос.УстановитьПараметр("СтатусСДИЗОформлен", СтатусыСДИЗОформлен);
	Запрос.УстановитьПараметр("ОформлениеСДИЗ",     Перечисления.ОперацииКорректировкиСДИЗ.ОформлениеСДИЗ);
	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка             = РезультатЗапроса["Шапка"].Выбрать();
	//@skip-warning
	Товары            = РезультатЗапроса["Товары"].Выбрать();
	
	Если Не Шапка.Следующий()
		Или Не Товары.Следующий() Тогда
		
		СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML();
		СообщениеXML.Операция               = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРасчетСтатуса;
		СообщениеXML.СсылкаНаОбъект         = ДокументСсылка;
		СообщениеXML.ДополнительноеОписание = СтрШаблон(НСтр("ru = 'по документу %1'"), ДокументСсылка);
		ИнтеграцияЗЕРНОКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, НСтр("ru = 'Нет данных для выгрузки.'"));
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	//@skip-warning
	ОстаткиПартий     = РезультатЗапроса["ОстаткиПартий"].Выгрузить();
	
	Если ОстаткиПартий.Количество() Тогда
		
		//@skip-warning
		Товары = РезультатЗапроса["Товары"].Выгрузить();
		
		АбстрактноеСообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXMLПоДокументу(
			Шапка, Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРасчетСтатуса, 1);
		АбстрактноеСообщениеXML.ТребуетсяПодписание = Ложь;
		
		Отбор = Новый Структура("Партия");
		
		Для Каждого СтрокаОстаток Из ОстаткиПартий Цикл
			
			Отбор.Партия = СтрокаОстаток.Партия;
			
			Если СтрокаОстаток.КоличествоСтрок = 1 Тогда
				
				НайденныеСтроки = Товары.НайтиСтроки(Отбор);
				
				Если НайденныеСтроки.Количество() Тогда
					
					ИнтеграцияЗЕРНОКлиентСервер.ДобавитьТекстОшибки(
						АбстрактноеСообщениеXML,
						СтрШаблон(
							НСтр("ru = 'В строке %1 количество к оформлению %2 кг не совпадает с остатком %3 кг партии %4'"),
							НайденныеСтроки[0].НомерСтроки,
							СтрокаОстаток.КоличествоЗЕРНО,
							СтрокаОстаток.КоличествоОстатокЗЕРНО,
							СтрокаОстаток.ПартияПредставление
							));
					
				КонецЕсли;
				
			Иначе
				
				НайденныеСтроки = Товары.НайтиСтроки(Отбор);
				
				Если НайденныеСтроки.Количество() Тогда
					
					НомераСтрок = Новый Массив;
					Для Каждого СтрокаДокумента Из НайденныеСтроки Цикл
						НомераСтрок.Добавить(СтрокаДокумента.НомерСтроки);
					КонецЦикла;
					НомераСтрокПредставление = СтрСоединить(НомераСтрок, ", ");
					
					ИнтеграцияЗЕРНОКлиентСервер.ДобавитьТекстОшибки(
						АбстрактноеСообщениеXML,
						СтрШаблон(
							НСтр("ru = 'В строках %1 дублируется партия %2'"),
							НомераСтрокПредставление,
							СтрокаОстаток.ПартияПредставление));
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		СообщенияXML = Новый Массив;
		СообщенияXML.Добавить(АбстрактноеСообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	ЭтоЭлеватор      = Шапка.Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭлеватор;
	
	Если ЭтоЭлеватор Тогда
		
		СообщенияXML = ОформлениеСДИЗЭлеватор(Шапка, РезультатЗапроса, ДополнительныеПараметры);
		
	Иначе
		
		Если Шапка.Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРФ Тогда
			
			СообщенияXML = ОформлениеСДИЗРФ(Шапка, РезультатЗапроса, ДополнительныеПараметры);
			
		ИначеЕсли Шапка.Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭкспорт
			Или Шапка.Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗИмпорт Тогда
			
			СообщенияXML = ОформлениеСДИЗИмпортЭкспорт(Шапка, РезультатЗапроса, ДополнительныеПараметры);
			
		Иначе
			
			ИнтеграцияЗЕРНОКлиентСервер.ДобавитьТекстОшибки(
				СообщениеXML,
				СтрШаблон(НСтр("ru = 'Операция не поддерживается: %1.'"), Шапка.Операция));
			СообщенияXML.Добавить(СообщениеXML);
			Возврат СообщенияXML;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СообщенияXML;
	
КонецФункции

// Формирует JSON сообщения для аннулирования СДИЗ.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОформлениеСДИЗЗЕРНО - Ссылка на документ
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML - Сообщения к передаче
Функция АннулированиеСДИЗЗЕРНО(ДокументСсылка, ДополнительныеПараметры)
	
	СообщенияXML     = Новый Массив();
	Операция         = Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗ;
	ПараметрыЗапроса = ДополнительныеПараметры.ПараметрыОбработкиДокумента.ПараметрыЗапроса;
	ПараметрыОбмена  = ДополнительныеПараметры.ПараметрыОбмена;
	
	СписокЗапросов = Новый СписокЗначений;
	СписокЗапросов.Добавить(ТекстЗапросаВерсииОперацийСДИЗ(), "НомераВерсий");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ПрисоединенныеФайлыЗЕРНО.Документ                      КАК Ссылка,
	|	МАКСИМУМ(ЕСТЬNULL(ПрисоединенныеФайлыЗЕРНО.Версия, 0)) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ЗЕРНОПрисоединенныеФайлы КАК ПрисоединенныеФайлыЗЕРНО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОформлениеСДИЗЗЕРНО КАК Шапка
	|		ПО Шапка.Ссылка                      = &Ссылка
	|		 И ПрисоединенныеФайлыЗЕРНО.Операция = &Операция
	|		 И Шапка.Ссылка                      = ПрисоединенныеФайлыЗЕРНО.Документ
	|ГДЕ
	|	ПрисоединенныеФайлыЗЕРНО.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ПрисоединенныеФайлыЗЕРНО.Документ
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование                  КАК ДокументОснование,
	|
	|	Шапка.Организация                КАК Организация,
	|	Шапка.Подразделение              КАК Подразделение,
	|	Шапка.ВидПродукции               КАК ВидПродукции,
	|	Представление(Шапка.Организация) КАК ОрганизацияПредставление,
	|	Шапка.Ссылка                     КАК Ссылка
	|	
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Товары.Идентификатор    КАК ИдентификаторСтроки,
	|	СДИЗЗЕРНО.Идентификатор КАК ИдентификаторСДИЗ,
	|	СДИЗЗЕРНО.НомерПартии   КАК НомерПартии,
	|	Товары.ВыделеннаяПартия КАК ВыделеннаяПартия
	|
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО.Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СДИЗЗЕРНО КАК СДИЗЗЕРНО
	|		ПО Товары.СДИЗ = СДИЗЗЕРНО.Ссылка
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И Товары.Идентификатор В (&ИдентификаторСтроки)
	|",
	"Товары");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",              ДокументСсылка);
	Запрос.УстановитьПараметр("Операция",            Операция);
	Запрос.УстановитьПараметр("ИдентификаторСтроки", ПараметрыЗапроса.СтрокиДляАннулирования);
	
	ОперацииАннулирования = Новый Массив;
	ОперацииАннулирования.Добавить(Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗ);
	ОперацииАннулирования.Добавить(Перечисления.ВидыОперацийЗЕРНО.АннулированиеФормированияПартии);
	Запрос.УстановитьПараметр("БазовыеОперации", ОперацииАннулирования); // Номера версий
	
	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка = РезультатЗапроса["Шапка"].Выбрать();
	//@skip-warning
	Товары = РезультатЗапроса["Товары"].Выгрузить();
	
	Если Не Шапка.Следующий()
		Или Товары.Количество() = 0 Тогда
		
		СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML();
		СообщениеXML.Операция               = Операция;
		СообщениеXML.СсылкаНаОбъект         = ДокументСсылка;
		СообщениеXML.ДополнительноеОписание = СтрШаблон(НСтр("ru = 'по документу %1'"), ДокументСсылка);
		ИнтеграцияЗЕРНОКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, НСтр("ru = 'Нет данных для выгрузки.'"));
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	ВидПродукции      = Шапка.ВидПродукции;
	НомерВерсии       = Шапка.ПоследнийНомерВерсии + 1;
	
	Если Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.Зерно Тогда
		ПространствоИмен       = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_sdiz", ПараметрыОбмена.ПараметрыОптимизации);
		ПространствоИменПартии = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_lots", ПараметрыОбмена.ПараметрыОптимизации);
		ИмяСвойстваЗапроса                    = "RequestCanceledSDIZ";
		ИмяСвойстваЗапросаАннулированиеПартии = "RequestCanceledLot";
	Иначе
		ПространствоИмен       = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_gpb_sdiz", ПараметрыОбмена.ПараметрыОптимизации);
		ПространствоИменПартии = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_gpb", ПараметрыОбмена.ПараметрыОптимизации);
		ИмяСвойстваЗапроса                    = "RequestCanceledGpbSDIZ";
		ИмяСвойстваЗапросаАннулированиеПартии = "RequestCanceledGpb";
	КонецЕсли;
	
	ИмяПоляНомерСДИЗ   = ИнтеграцияЗЕРНОСлужебный.ИмяПоляНомерСДИЗПоВидуПродукции(ВидПродукции);
	ИмяПоляНомерПартии = ИнтеграцияЗЕРНОСлужебный.ИмяПоляНомерПартииПоВидуПродукции(ВидПродукции);
	
	ВариантАннулирования = ПараметрыЗапроса.ВариантАннулирования;
	Если ВариантАннулирования = 0 Тогда
		АннулироватьСДИЗ    = Истина;
		АннулироватьПартию  = Ложь;
		АбстрактнаяОперация = Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗРасчетСтатуса;
	ИначеЕсли ВариантАннулирования = 1 Тогда
		АннулироватьСДИЗ   = Ложь;
		АннулироватьПартию = Истина;
		АбстрактнаяОперация = Перечисления.ВидыОперацийЗЕРНО.АннулированиеФормированияПартииРасчетСтатуса;
	Иначе // ВариантАннулирования = 2
		АннулироватьСДИЗ   = Истина;
		АннулироватьПартию = Истина;
		АбстрактнаяОперация = Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗПартииРасчетСтатуса;
	КонецЕсли;
	
	АбстрактноеСообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXMLПоДокументу(
		Шапка, АбстрактнаяОперация, НомерВерсии);
	АбстрактноеСообщениеXML.ТребуетсяПодписание = Ложь;
	
	ИдентификаторЗагружатьДо = АбстрактноеСообщениеXML.Идентификатор;
	ИдентификаторЗагружатьПосле = Неопределено;
	
	//@skip-warning
	НомераВерсий = РезультатЗапроса["НомераВерсий"].Выгрузить();
	НомераВерсийПоОперациям = РассчитатьНомераВерсий(НомераВерсий);
	
	НомерВерсииСДИЗ   = НомераВерсийПоОперациям[Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗ];
	НомерВерсииПартия = НомераВерсийПоОперациям[Перечисления.ВидыОперацийЗЕРНО.АннулированиеФормированияПартии];
	
	Для Каждого СтрокаТовары Из Товары Цикл
		
		Если АннулироватьСДИЗ Тогда
			
			СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXMLПоДокументу(Шапка, Операция, НомерВерсииСДИЗ);
			СообщениеXML.ЗагружатьДо          = АбстрактноеСообщениеXML.Идентификатор;
			СообщениеXML.ИдентификаторСтроки  = СтрокаТовары.ИдентификаторСтроки;
			СообщениеXML.ИдентификаторЦепочки = ИдентификаторЗагружатьДо;
			СообщениеXML.ПараметрыЗапроса.Вставить("НомерПартии", СтрокаТовары.НомерПартии);
			СообщениеXML.ПараметрыЗапроса.Вставить("АннулироватьПартию", Ложь);
			ИнтеграцияЗЕРНОСлужебный.УстановитьСообщениеОснование(СообщениеXML, АбстрактноеСообщениеXML);
			
			АннулированиеСДИЗXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяСвойстваЗапроса);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(АннулированиеСДИЗXDTO, ИмяПоляНомерСДИЗ, СтрокаТовары.ИдентификаторСДИЗ, АбстрактноеСообщениеXML);
			
			СообщениеXML.ТекстСообщенияЗапросXML = ИнтеграцияЗЕРНОСлужебный.ОбъектXDTOВXML(
				АннулированиеСДИЗXDTO, ПространствоИмен, ИмяСвойстваЗапроса,
				ДополнительныеПараметры.ПараметрыОбмена);
			
			СообщенияXML.Добавить(СообщениеXML);
			
			ИдентификаторЗагружатьПосле = СообщениеXML.Идентификатор;
			
		КонецЕсли;
		
		Если АннулироватьПартию Тогда
			
			СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXMLПоДокументу(
				Шапка, Перечисления.ВидыОперацийЗЕРНО.АннулированиеФормированияПартии, НомерВерсииПартия);
			СообщениеXML.ЗагружатьДо          = ИдентификаторЗагружатьДо;
			СообщениеXML.ЗагружатьПосле       = ИдентификаторЗагружатьПосле;
			СообщениеXML.ПередаватьПосле      = ИдентификаторЗагружатьПосле;
			СообщениеXML.ИдентификаторСтроки  = СтрокаТовары.ИдентификаторСтроки;
			СообщениеXML.ИдентификаторЦепочки = ИдентификаторЗагружатьДо;
			
			СообщениеXML.ПараметрыЗапроса.Вставить("НомерПартии", СтрокаТовары.НомерПартии);
			
			ИнтеграцияЗЕРНОСлужебный.УстановитьСообщениеОснование(СообщениеXML, АбстрактноеСообщениеXML);
			
			АннулированиеПартииXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИменПартии, ИмяСвойстваЗапросаАннулированиеПартии);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
				АннулированиеПартииXDTO, ИмяПоляНомерПартии, СтрокаТовары.НомерПартии, АбстрактноеСообщениеXML);
			
			СообщениеXML.ТекстСообщенияЗапросXML = ИнтеграцияЗЕРНОСлужебный.ОбъектXDTOВXML(
				АннулированиеПартииXDTO, ПространствоИменПартии, ИмяСвойстваЗапросаАннулированиеПартии,
				ДополнительныеПараметры.ПараметрыОбмена);
			СообщенияXML.Добавить(СообщениеXML);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если АбстрактноеСообщениеXML.Ошибки.Количество() Тогда
		СообщенияXML = Новый Массив;
	КонецЕсли;
	
	СообщенияXML.Добавить(АбстрактноеСообщениеXML);
	Возврат СообщенияXML;
	
КонецФункции

// Формирует JSON сообщения для отказа от гашения СДИЗ.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОформлениеСДИЗЗЕРНО - Ссылка на документ
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML - Сообщения к передаче
Функция ОтказОтГашенияСДИЗЗЕРНО(ДокументСсылка, ДополнительныеПараметры)
	
	СообщенияXML     = Новый Массив();
	СписокЗапросов   = Новый СписокЗначений;
	Операция       = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗОтказПогашенияСДИЗ;
	ПараметрыЗапроса = ДополнительныеПараметры.ПараметрыОбработкиДокумента.ПараметрыЗапроса;
	ПараметрыОбмена  = ДополнительныеПараметры.ПараметрыОбмена;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ПрисоединенныеФайлыЗЕРНО.Документ                      КАК Ссылка,
	|	МАКСИМУМ(ЕСТЬNULL(ПрисоединенныеФайлыЗЕРНО.Версия, 0)) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ЗЕРНОПрисоединенныеФайлы КАК ПрисоединенныеФайлыЗЕРНО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОформлениеСДИЗЗЕРНО КАК Шапка
	|		ПО Шапка.Ссылка                      = &Ссылка
	|		 И ПрисоединенныеФайлыЗЕРНО.Операция В (&ОперацииПротоколаОтказОтГашения)
	|		 И Шапка.Ссылка                      = ПрисоединенныеФайлыЗЕРНО.Документ
	|ГДЕ
	|	ПрисоединенныеФайлыЗЕРНО.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ПрисоединенныеФайлыЗЕРНО.Документ
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование                  КАК ДокументОснование,
	|
	|	Шапка.Организация                КАК Организация,
	|	Шапка.Подразделение              КАК Подразделение,
	|	Шапка.ВидПродукции               КАК ВидПродукции,
	|	Представление(Шапка.Организация) КАК ОрганизацияПредставление,
	|	Шапка.Ссылка                     КАК Ссылка
	|	
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ДанныеКорректировки.Ссылка        КАК Ссылка,
	|	ДанныеКорректировки.Идентификатор КАК ИдентификаторСтроки,
	|	Товары.Идентификатор              КАК ИдентификаторСтрокиТовары,
	|	ВЫБОР
	|		КОГДА Товары.СДИЗ = ЗНАЧЕНИЕ(Справочник.СДИЗЗЕРНО.ПустаяСсылка)
	|			ТОГДА ДанныеКорректировки.КорректируемыйСДИЗ
	|		ИНАЧЕ Товары.СДИЗ
	|	КОНЕЦ КАК КорректируемыйСДИЗ,
	|	ЕСТЬNULL(Товары.КорректируемыйСДИЗ.Партия, ЗНАЧЕНИЕ(Справочник.РеестрПартийЗЕРНО.ПустаяСсылка)) КАК Партия,
	|	ДанныеКорректировки.Операция               КАК Операция,
	|	ИСТИНА                                     КАК ПолучитьДанныеИсходнойПартии,
	|	ДанныеКорректировки.КоличествоЗЕРНО        КАК КоличествоЗЕРНО,
	|	ДанныеКорректировки.ПричинаОтказаОтГашения КАК ПричинаОтказаОтГашения,
	|	ДанныеКорректировки.Примечание             КАК Примечание
	|ПОМЕСТИТЬ ДанныеКорректировки
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО.ДанныеКорректировки КАК ДанныеКорректировки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОформлениеСДИЗЗЕРНО.Товары КАК Товары
	|		ПО ДанныеКорректировки.Ссылка = Товары.Ссылка
	|		И ДанныеКорректировки.КорректируемыйСДИЗ = Товары.КорректируемыйСДИЗ
	|		И ДанныеКорректировки.Операция В (&ОтказОтПогашения)
	|ГДЕ
	|	ДанныеКорректировки.Ссылка = &Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	КорректируемыйСДИЗ");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ДанныеКорректировки.ИдентификаторСтроки       КАК ИдентификаторСтроки,
//	|	ДанныеКорректировки.ИдентификаторСтрокиТовары КАК ИдентификаторСтрокиТовары,
	|	СДИЗЗЕРНО.Идентификатор                       КАК ИдентификаторСДИЗ,
	|
	|	ДанныеКорректировки.КоличествоЗЕРНО        КАК КоличествоЗЕРНО,
	|	ЕСТЬNULL(ДанныеКорректировки.ПричинаОтказаОтГашения.Идентификатор, ""1"") КАК ПричинаОтказаОтГашения,
	|	ДанныеКорректировки.Примечание                                            КАК Примечание
	|
	|ИЗ
	|	ДанныеКорректировки КАК ДанныеКорректировки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СДИЗЗЕРНО КАК СДИЗЗЕРНО
	|		ПО ДанныеКорректировки.КорректируемыйСДИЗ = СДИЗЗЕРНО.Ссылка
	|ГДЕ
	|	ДанныеКорректировки.Ссылка = &Ссылка
	|	И ДанныеКорректировки.Операция В (&ОтказОтПогашения)
	|",
	"ДанныеКорректировки");
	
	СписокЗапросов.Добавить(ТекстЗапросаИсходныеПартии(), "ИсходныеПартии");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",              ДокументСсылка);
	Запрос.УстановитьПараметр("ИдентификаторСтроки", ПараметрыЗапроса);
	Запрос.УстановитьПараметр("ОтказОтПогашения",    Перечисления.ОперацииКорректировкиСДИЗ.ОтказОтПогашения);
	
	ОперацииПротоколаОтказОтГашения = Новый Массив;
	ОперацииПротоколаОтказОтГашения.Добавить(Операция);
	ОперацииПротоколаОтказОтГашения.Добавить(Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗОтказПогашенияСДИЗПриКорректировке);
	Запрос.УстановитьПараметр("ОперацииПротоколаОтказОтГашения", ОперацииПротоколаОтказОтГашения);
	
	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка = РезультатЗапроса["Шапка"].Выбрать();
	//@skip-warning
	ДанныеКорректировки = РезультатЗапроса["ДанныеКорректировки"].Выгрузить();
	//@skip-warning
	ИсходныеПартии = РезультатЗапроса["ИсходныеПартии"].Выгрузить();
	
	Если Не Шапка.Следующий()
		Или ДанныеКорректировки.Количество() = 0 Тогда
		
		СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML();
		СообщениеXML.Операция               = Операция;
		СообщениеXML.СсылкаНаОбъект         = ДокументСсылка;
		СообщениеXML.ДополнительноеОписание = СтрШаблон(НСтр("ru = 'по документу %1'"), ДокументСсылка);
		ИнтеграцияЗЕРНОКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, НСтр("ru = 'Нет данных для выгрузки.'"));
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	ВидПродукции      = Шапка.ВидПродукции;
	НомерВерсии       = Шапка.ПоследнийНомерВерсии + 1;
	
	Если Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.Зерно Тогда
		ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_sdiz", ПараметрыОбмена.ПараметрыОптимизации);
		ИмяСвойстваЗапроса = "RequestCreateExtinctionRefusal";
	Иначе
		ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_gpb_sdiz", ПараметрыОбмена.ПараметрыОптимизации);
		ИмяСвойстваЗапроса = "RequestCreateGpbExtinctionRefusal";
	КонецЕсли;
	
	ИсходныеПартииДокумента = ДанныеИсходныхПартийДокумента(ИсходныеПартии);
	
	АбстрактноеСообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXMLПоДокументу(
		Шапка, Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗОтказПогашенияСДИЗРасчетСтатуса, НомерВерсии);
	АбстрактноеСообщениеXML.ТребуетсяПодписание = Ложь;
	
	ИмяПоляНомерСДИЗ = ИнтеграцияЗЕРНОСлужебный.ИмяПоляНомерСДИЗПоВидуПродукции(ВидПродукции);
	ИмяПоляПричина     = ИнтеграцияЗЕРНОСлужебный.ИмяПоляПричинаОтказаОтГашенияПоВидуПродукции(ВидПродукции);
	
//	НомерСДИЗ SDIZNumber gpbSDIZNumber
//	Количество (уменьшение) amount
//	КодПричиныОтказа LotReturnReasonCode GpbReturnReasonCode
//	Комментарий причины отказа CauseComment
	
	Для Каждого СтрокаТовары Из ДанныеКорректировки Цикл
		
		СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXMLПоДокументу(Шапка, Операция, НомерВерсии);
		СообщениеXML.ЗагружатьДо            = АбстрактноеСообщениеXML.Идентификатор;
		СообщениеXML.ИдентификаторСтроки    = СтрокаТовары.ИдентификаторСтроки;
		СообщениеXML.ДополнительноеОписание = СтрШаблон(НСтр("ru = '№ %1'"), СтрокаТовары.ИдентификаторСДИЗ);
		
		СообщениеXML.ПараметрыЗапроса.Вставить("НомерСДИЗ", СтрокаТовары.ИдентификаторСДИЗ);
		// для заполнения данных новой партии по данным исходной.
		СообщениеXML.ПараметрыЗапроса.Вставить("ИсходнаяПартия", ИсходныеПартииДокумента[СтрокаТовары.ИдентификаторСтроки]);
		
		ИнтеграцияЗЕРНОСлужебный.УстановитьСообщениеОснование(СообщениеXML, АбстрактноеСообщениеXML);
		
		ОтказОтПогашенияСДИЗXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяСвойстваЗапроса);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ОтказОтПогашенияСДИЗXDTO, ИмяПоляНомерСДИЗ, СтрокаТовары.ИдентификаторСДИЗ, АбстрактноеСообщениеXML);
		
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ОтказОтПогашенияСДИЗXDTO, "amount", СтрокаТовары.КоличествоЗЕРНО, АбстрактноеСообщениеXML);
		
		Если ЗначениеЗаполнено(СтрокаТовары.Примечание) Тогда
			Примечание = СтрокаТовары.Примечание;
		Иначе
			Примечание = ДанныеПричиныОтказаОтПогашенияПоУмолчанию().Примечание;
		КонецЕсли;
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ОтказОтПогашенияСДИЗXDTO, "CauseComment", Примечание, АбстрактноеСообщениеXML);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ОтказОтПогашенияСДИЗXDTO, ИмяПоляПричина, СтрокаТовары.ПричинаОтказаОтГашения, АбстрактноеСообщениеXML);
		
		СообщениеXML.ТекстСообщенияЗапросXML = ИнтеграцияЗЕРНОСлужебный.ОбъектXDTOВXML(
			ОтказОтПогашенияСДИЗXDTO, ПространствоИмен, ИмяСвойстваЗапроса,
			ДополнительныеПараметры.ПараметрыОбмена);
		
		СообщенияXML.Добавить(СообщениеXML);
		
	КонецЦикла;
	
	Если АбстрактноеСообщениеXML.Ошибки.Количество() Тогда
		СообщенияXML = Новый Массив;
	КонецЕсли;
	
	СообщенияXML.Добавить(АбстрактноеСообщениеXML);
	Возврат СообщенияXML;
	
КонецФункции

// Формирует JSON сообщения для выделения новых партий.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОформлениеСДИЗЗЕРНО - Ссылка на документ
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML - Сообщения к передаче
Функция КорректировкаСДИЗЗЕРНО(ДокументСсылка, ДополнительныеПараметры)
	
	СообщенияXML    = Новый Массив();
	СписокЗапросов  = Новый СписокЗначений;
	Операция        = Перечисления.ВидыОперацийЗЕРНО.ОформлениеКорректировкиСДИЗРасчетСтатусаПоСтроке; // общая операция
	ПараметрыОбмена = ДополнительныеПараметры.ПараметрыОбмена;
	СообщенияXML    = Новый Массив();
	СписокЗапросов  = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(ТекстЗапросаВерсииОперацийСДИЗ(), "НомераВерсий");
	СписокЗапросов.Добавить(ТекстЗапросаВерсииОформлениеСДИЗ());
	СписокЗапросов.Добавить(ТекстЗапросаШапка(), "Шапка");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ДанныеКорректировки.Ссылка             КАК Ссылка,
	|	ДанныеКорректировки.Идентификатор      КАК ИдентификаторСтроки,
	|	Товары.Идентификатор                   КАК ИдентификаторСтрокиТовары,
	|	ДанныеКорректировки.КорректируемыйСДИЗ КАК КорректируемыйСДИЗ,
	|	ДанныеКорректировки.Операция           КАК Операция,
	|	ВЫБОР
	|		КОГДА ДанныеКорректировки.Операция В (&ОперацииТребующиеДанныеИсходнойПартий)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПолучитьДанныеИсходнойПартии,
	|	ВЫБОР
	|		КОГДА ДанныеКорректировки.Операция = &ОформлениеКорректировочногоСДИЗ
	|			ТОГДА ДанныеКорректировки.КорректируемыйСДИЗ.Партия
	|		КОГДА ДанныеКорректировки.Операция = &ОтказПогашенияСДИЗ
	|			ТОГДА ДанныеКорректировки.КорректируемыйСДИЗ.Партия
	|		КОГДА ДанныеКорректировки.ВыделеннаяПартия = ЗНАЧЕНИЕ(Справочник.РеестрПартийЗЕРНО.ПустаяСсылка)
	|			ТОГДА ДанныеКорректировки.Партия
	|		ИНАЧЕ ДанныеКорректировки.ВыделеннаяПартия
	|	КОНЕЦ КАК Партия,
	|	ДанныеКорректировки.КорректируемыйСДИЗ.Идентификатор КАК КорректируемыйСДИЗИдентификатор,
	|	ДанныеКорректировки.КоличествоЗЕРНО                  КАК КоличествоЗЕРНО,
	|	ДанныеКорректировки.Примечание                       КАК Примечание,
	|	ДанныеКорректировки.ИдентификаторОтказаПогашения     КАК ИдентификаторОтказаПогашения,
	|	КлассификаторНСИЗЕРНО.Идентификатор                  КАК ПричинаОтказаОтГашения
	|ПОМЕСТИТЬ ДанныеКорректировки
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО.ДанныеКорректировки КАК ДанныеКорректировки
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОбъектовСинхронизацииЗЕРНО КАК СтатусыДокументов
	|		ПО СтатусыДокументов.ОбъектСинхронизации = ДанныеКорректировки.Ссылка
	|		И СтатусыДокументов.ИдентификаторСтроки = ДанныеКорректировки.Идентификатор
	|		И СтатусыДокументов.Статус В (&КонечныеСтатусы)
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОформлениеСДИЗЗЕРНО.Товары КАК Товары
	|		ПО ДанныеКорректировки.Ссылка = Товары.Ссылка
	|		И ДанныеКорректировки.КорректируемыйСДИЗ = Товары.КорректируемыйСДИЗ
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторНСИЗЕРНО КАК КлассификаторНСИЗЕРНО
	|		ПО ДанныеКорректировки.ПричинаОтказаОтГашения = КлассификаторНСИЗЕРНО.Ссылка
	|ГДЕ
	|	ДанныеКорректировки.Ссылка = &Ссылка
	|	И ДанныеКорректировки.Операция В (&ОперацииКорректировки)
	|	И СтатусыДокументов.Статус ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	КорректируемыйСДИЗ");
	
	СписокЗапросов.Добавить("ВЫБРАТЬ
	|	ДанныеКорректировки.ИдентификаторСтроки КАК ИдентификаторСтрокиДанныеКорректировки,
	|
	|	Товары.Идентификатор  КАК ИдентификаторСтроки,
	|	Товары.КодТНВЭД       КАК КодТНВЭД,
	|	Товары.ОКПД2          КАК ОКПД2,
	|	Товары.Номенклатура   КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия          КАК Серия,
	|
	|	РеестрПартийЗЕРНО.Ссылка        КАК Партия,
	|	РеестрПартийЗЕРНО.Идентификатор КАК НомерПартии,
	|
	|	ЕСТЬNULL(РеестрПартийЗЕРНО.Местоположение.Идентификатор, """")       КАК МестоположениеСтрокой,
	|	ЕСТЬNULL(РеестрПартийЗЕРНО.Местоположение.ИдентификаторАдреса, """") КАК ИдентификаторАдреса,
	|	ЕСТЬNULL(РеестрПартийЗЕРНО.Местоположение.ОКТМО, """")               КАК ОКТМО,
	|	ЕСТЬNULL(РеестрПартийЗЕРНО.Местоположение.Индекс, """")              КАК МестоположениеИндекс,
	|	РеестрПартийЗЕРНО.Местоположение.ОператорыАдреса.(
	|		СкладКонтрагент) КАК ОператорыАдреса,
	|
	|	Товары.КоличествоЗЕРНО КАК КоличествоЗЕРНО,
	|
	|	Товары.Лаборатория                КАК Лаборатория,
	|	Представление(Товары.Лаборатория) КАК ЛабораторияПредставление,
	|	Товары.НомерПротоколаИспытаний    КАК НомерПротоколаИспытаний,
	|	Товары.ДатаПротоколаИспытаний     КАК ДатаПротоколаИспытаний,
	|	
	|	ДанныеКорректировки.КорректируемыйСДИЗ              КАК КорректируемыйСДИЗ,
	|	ДанныеКорректировки.КорректируемыйСДИЗИдентификатор КАК КорректируемыйСДИЗИдентификатор
	|
	|ИЗ
	|	ДанныеКорректировки КАК ДанныеКорректировки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОформлениеСДИЗЗЕРНО.Товары КАК Товары
	|		ПО ДанныеКорректировки.Ссылка = Товары.Ссылка
	|		И ДанныеКорректировки.КорректируемыйСДИЗ = Товары.КорректируемыйСДИЗ
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РеестрПартийЗЕРНО КАК РеестрПартийЗЕРНО
	|		ПО ДанныеКорректировки.Партия = РеестрПартийЗЕРНО.Ссылка
	|
	|ГДЕ
	|	ДанныеКорректировки.Операция = &ОформлениеКорректировочногоСДИЗ
	|",
	"ТоварыКорректировочныйСДИЗ");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ДанныеКорректировки.ИдентификаторСтроки          КАК ИдентификаторСтроки,
	|	ДанныеКорректировки.ИдентификаторСтрокиТовары    КАК ИдентификаторСтрокиТовары,
	|	ДанныеКорректировки.ИдентификаторОтказаПогашения КАК ИдентификаторОтказаПогашения,
	|
	|	ДанныеКорректировки.КорректируемыйСДИЗ              КАК СДИЗ,
	|	ДанныеКорректировки.КорректируемыйСДИЗИдентификатор КАК КорректируемыйСДИЗИдентификатор,
	|
	|	ЕСТЬNULL(ДанныеКорректировки.Партия.Идентификатор, """") КАК НомерПартии,
	|	ДанныеКорректировки.Партия                               КАК Партия,
	|
	|	ДанныеКорректировки.КоличествоЗЕРНО КАК КоличествоЗЕРНО,
	|	ДанныеКорректировки.Операция        КАК Операция,
	|	ДанныеКорректировки.Примечание      КАК Примечание,
	|
	|	ДанныеКорректировки.ПричинаОтказаОтГашения КАК ПричинаОтказаОтГашения,
	|	
	|	ВЫБОР
	|		КОГДА ДанныеКорректировки.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииКорректировкиСДИЗ.АннулированиеОтказаОтПогашения)
	|			ТОГДА 1
	|		КОГДА ДанныеКорректировки.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииКорректировкиСДИЗ.КорректировкаСДИЗ)
	|			ТОГДА 2
	|		КОГДА ДанныеКорректировки.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииКорректировкиСДИЗ.АннулированиеСДИЗ)
	|			ТОГДА 3
	|		КОГДА ДанныеКорректировки.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииКорректировкиСДИЗ.АннулированиеПартии)
	|			ТОГДА 4
	|		КОГДА ДанныеКорректировки.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииКорректировкиСДИЗ.ОтказОтПогашения)
	|			ТОГДА 5
	|		ИНАЧЕ 99
	|	КОНЕЦ КАК Порядок
	|ИЗ
	|	ДанныеКорректировки КАК ДанныеКорректировки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|ИТОГИ
	|ПО
	|	ИдентификаторСтрокиТовары",
	"ДанныеКорректировки");
	
	СписокЗапросов.Добавить(ТекстЗапросаИсходныеПартии(), "ИсходныеПартии");
	
	// оформление Корректировочного СДИЗ
	СписокЗапросов.Добавить(ТекстЗапросаПеревозчики(), "Перевозчики");
	СписокЗапросов.Добавить(ТекстЗапросаТранспортныеСредства(), "ТранспортныеСредства");
	СписокЗапросов.Добавить(ТекстЗапросаМестаПерегрузки(), "МестаПерегрузки");
	СписокЗапросов.Добавить(ТекстЗапросаСвязанныеДокументы(), "СвязанныеДокументы");
	СписокЗапросов.Добавить(ТекстЗапросаСвязанныеДокументыПрочие(), "СвязанныеДокументыПрочие");
	СписокЗапросов.Добавить(ТекстЗапросаДокументыСертификации(), "ДокументыСертификации");
	СписокЗапросов.Добавить(ТекстЗапросаУслугиЭлеватора(), "УслугиЭлеватора");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Операция);
	Запрос.УстановитьПараметр("ОперацияКорректировочныйСДИЗ", Операция);
	Запрос.УстановитьПараметр("БазовыеОперации", Перечисления.ВидыОперацийЗЕРНО.БазовыеОперации()); // Номера версий
	Запрос.УстановитьПараметр("КонечныеСтатусы", КонечныеСтатусы(Ложь));
	
	ОперацииКорректировки = Новый Массив;
	ОперацииКорректировки.Добавить(Перечисления.ОперацииКорректировкиСДИЗ.АннулированиеОтказаОтПогашения);
	ОперацииКорректировки.Добавить(Перечисления.ОперацииКорректировкиСДИЗ.КорректировкаСДИЗ);
	ОперацииКорректировки.Добавить(Перечисления.ОперацииКорректировкиСДИЗ.ОтказОтПогашения);
	ОперацииКорректировки.Добавить(Перечисления.ОперацииКорректировкиСДИЗ.АннулированиеСДИЗ);
	ОперацииКорректировки.Добавить(Перечисления.ОперацииКорректировкиСДИЗ.АннулированиеПартии);
	
	Запрос.УстановитьПараметр("ОперацииКорректировки", ОперацииКорректировки);
	
	ОперацииТребующиеДанныеИсходнойПартий = Новый Массив;
	ОперацииТребующиеДанныеИсходнойПартий.Добавить(Перечисления.ОперацииКорректировкиСДИЗ.ОтказОтПогашения);
	ОперацииТребующиеДанныеИсходнойПартий.Добавить(Перечисления.ОперацииКорректировкиСДИЗ.КорректировкаСДИЗ);
	
	Запрос.УстановитьПараметр("ОперацииТребующиеДанныеИсходнойПартий", ОперацииТребующиеДанныеИсходнойПартий);
	Запрос.УстановитьПараметр("ОформлениеКорректировочногоСДИЗ",       Перечисления.ОперацииКорректировкиСДИЗ.КорректировкаСДИЗ);
	Запрос.УстановитьПараметр("ОтказПогашенияСДИЗ",                    Перечисления.ОперацииКорректировкиСДИЗ.ОтказОтПогашения);
	
	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка             = РезультатЗапроса["Шапка"].Выбрать();
	//@skip-warning
	ТоварыКорректировочныйСДИЗ = РезультатЗапроса["ТоварыКорректировочныйСДИЗ"].Выгрузить();
	ТоварыКорректировочныйСДИЗ.Индексы.Добавить("ИдентификаторСтрокиДанныеКорректировки");
	//@skip-warning
	ДанныеКорректировки = РезультатЗапроса["ДанныеКорректировки"];
	//@skip-warning
	НомераВерсий = РезультатЗапроса["НомераВерсий"].Выгрузить();
	//@skip-warning
	ИсходныеПартии = РезультатЗапроса["ИсходныеПартии"].Выгрузить();
	//ИсходныеПартии.Индексы.Добавить("ИдентификаторСтроки");
	
	// Корректировка - сводная операция по строке Товары, КорректировочныйСДИЗ операция по строке ДанныеКорректировки
	АбстрактнаяОперация = Перечисления.ВидыОперацийЗЕРНО.ОформлениеКорректировкиСДИЗРасчетСтатуса;
	
	Если Не Шапка.Следующий()
		Или ДанныеКорректировки.Пустой() Тогда
		
		СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML();
		СообщениеXML.Операция               = АбстрактнаяОперация;
		СообщениеXML.СсылкаНаОбъект         = ДокументСсылка;
		СообщениеXML.ДополнительноеОписание = СтрШаблон(НСтр("ru = 'по документу %1'"), ДокументСсылка);
		ИнтеграцияЗЕРНОКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, НСтр("ru = 'Нет данных для выгрузки.'"));
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	НомерВерсии  = Шапка.ПоследнийНомерВерсии + 1;
	ВидПродукции = Шапка.ВидПродукции;
	
	АбстрактноеСообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXMLПоДокументу(Шапка, АбстрактнаяОперация, НомерВерсии);
	АбстрактноеСообщениеXML.ТребуетсяПодписание = Ложь;
	
	Если ВидПродукции = Перечисления.ВидыПродукцииИС.Зерно Тогда
		ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_sdiz", ПараметрыОбмена.ПараметрыОптимизации);
		ИмяСвойстваЗапросаАннулированиеОтказа = "RequestCanceledExtinctionRefusal";
		ИмяСвойстваЗапросаОтказОтПогашения    = "RequestCreateExtinctionRefusal";
		ИмяСвойстваЗапросаАннулированиеСДИЗ   = "RequestCanceledSDIZ";
		ИмяСвойстваЗапросаСДИЗЭлеватор        = "RequestCreateSDIZElevator";
		ИмяСвойстваЗапросаОформлениеСДИЗ      = "RequestCreateSDIZ";
		
		ПространствоИменПартии   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_lots", ПараметрыОбмена.ПараметрыОптимизации);
		ИмяСвойстваЗапросаАннулированиеПартии = "RequestCanceledLot";
	Иначе
		ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_gpb_sdiz", ПараметрыОбмена.ПараметрыОптимизации);
		ИмяСвойстваЗапросаАннулированиеОтказа = "RequestCanceledGpbExtinctionRefusal";
		ИмяСвойстваЗапросаОтказОтПогашения    = "RequestCreateGpbExtinctionRefusal";
		ИмяСвойстваЗапросаАннулированиеСДИЗ   = "RequestCanceledGpbSDIZ";
		ИмяСвойстваЗапросаОформлениеСДИЗ      = "RequestCreateGpbSDIZ";
		
		ПространствоИменПартии                = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_gpb", ПараметрыОбмена.ПараметрыОптимизации);
		ИмяСвойстваЗапросаАннулированиеПартии = "RequestCanceledGpb";
	КонецЕсли;
	
	ИмяПоляИдентификаторЗаявки = ИнтеграцияЗЕРНОСлужебный.ИмяПоляИдентификаторОтказаПогашенияПоВидуПродукции(ВидПродукции);
	ИмяПоляНомерСДИЗ           = ИнтеграцияЗЕРНОСлужебный.ИмяПоляНомерСДИЗПоВидуПродукции(ВидПродукции);
	ИмяПоляПричина             = ИнтеграцияЗЕРНОСлужебный.ИмяПоляПричинаОтказаОтГашенияПоВидуПродукции(ВидПродукции);
	ИмяПоляНомерПартии         = ИнтеграцияЗЕРНОСлужебный.ИмяПоляНомерПартииПоВидуПродукции(ВидПродукции);
	ИмяПоляКорректируемыйСДИЗ  = ИнтеграцияЗЕРНОСлужебный.ИмяПоляКорректируемыйСДИЗПоВидуПродукции(Шапка.Видпродукции);
	
	РеквизитыОрганизаций = Неопределено;
	
	НомераВерсийПоОперациям = РассчитатьНомераВерсий(НомераВерсий);
	
	//Инициализировать параметры заполнения корректировочного СДИЗ
	Если ТоварыКорректировочныйСДИЗ.Количество() Тогда
		
		//@skip-warning
		Перевозчики = РезультатЗапроса["Перевозчики"].Выгрузить();
		//@skip-warning
		ТранспортныеСредства = РезультатЗапроса["ТранспортныеСредства"].Выгрузить();
		//@skip-warning
		МестаПерегрузки = РезультатЗапроса["МестаПерегрузки"].Выгрузить();
		//@skip-warning
		СвязанныеДокументы = РезультатЗапроса["СвязанныеДокументы"].Выгрузить();
		//@skip-warning
		СвязанныеДокументыПрочие = РезультатЗапроса["СвязанныеДокументыПрочие"].Выгрузить();
		//@skip-warning
		ДокументыСертификации = РезультатЗапроса["ДокументыСертификации"].Выгрузить();
		//@skip-warning
		УслугиЭлеватора = РезультатЗапроса["УслугиЭлеватора"].Выгрузить();
	
		ЭтоЭлеватор      = Шапка.Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭлеватор;
		
		Если ЭтоЭлеватор Тогда
			
			ПараметрыЗаполнения = НовыеПараметрыЗаполненияСДИЗЭлеватор();
			ПараметрыЗаполнения.ПространствоИмен          = ПространствоИмен;
			ПараметрыЗаполнения.ИмяСвойстваЗапроса        = ИмяСвойстваЗапросаСДИЗЭлеватор;
			ПараметрыЗаполнения.ИмяПоляКорректируемыйСДИЗ = ИмяПоляКорректируемыйСДИЗ;
			ПараметрыЗаполнения.УслугиЭлеватора           = УслугиЭлеватора;
			ПараметрыЗаполнения.ДокументыСертификации     = ДокументыСертификации;
			
		Иначе
			
			Если Шапка.Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРФ Тогда
				
				РеквизитыОрганизаций = ДанныеКонтрагентовОрганизацийПриОформленииСДИЗ(Шапка, Перевозчики);
				
				ПараметрыЗаполнения = НовыеПараметрыЗаполненияСДИЗРФ();
				ПараметрыЗаполнения.ПространствоИмен          = ПространствоИмен;
				ПараметрыЗаполнения.ИмяСвойстваЗапроса        = ИмяСвойстваЗапросаОформлениеСДИЗ;
				ПараметрыЗаполнения.ИмяПоляКорректируемыйСДИЗ = ИмяПоляКорректируемыйСДИЗ;
				ПараметрыЗаполнения.ИмяПоляНомерПартии        = ИмяПоляНомерПартии;
				ПараметрыЗаполнения.ИмяПоляОперацияСДИЗ       = ИмяПоляОперацияСДИЗ(Шапка.Операция);
				
				ПараметрыЗаполнения.РеквизитыОрганизаций      = РеквизитыОрганизаций;
				ПараметрыЗаполнения.Перевозчики               = Перевозчики;
				ПараметрыЗаполнения.МестаПерегрузки           = МестаПерегрузки;
				ПараметрыЗаполнения.ТранспортныеСредства      = ТранспортныеСредства;
				ПараметрыЗаполнения.Шапка                     = Шапка;
				ПараметрыЗаполнения.СвязанныеДокументы        = СвязанныеДокументы;
				ПараметрыЗаполнения.СвязанныеДокументыПрочие  = СвязанныеДокументыПрочие;
				ПараметрыЗаполнения.ДокументыСертификации     = ДокументыСертификации;
				
				Если ЗначениеЗаполнено(Шапка.ПунктОтправления) Тогда
					ПараметрыЗаполнения.ДанныеДополненияАдресаКлючаАдресов = 
						ИнтеграцияЗЕРНОСлужебный.ДанныеДополненияАдресаРФППоОператоруАдреса(Шапка.ПунктОтправления);
				КонецЕсли;
				
			ИначеЕсли Шапка.Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭкспорт
				Или Шапка.Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗИмпорт Тогда
				
				РеквизитыОрганизаций = ДанныеКонтрагентовОрганизацийПриОформленииСДИЗ(Шапка, Перевозчики, ТоварыКорректировочныйСДИЗ);
				
				ПараметрыЗаполнения = НовыеПараметрыЗаполненияСДИЗИмпортЭкспорт();
				ПараметрыЗаполнения.ПространствоИмен          = ПространствоИмен;
				ПараметрыЗаполнения.ИмяСвойстваЗапроса        = ИмяСвойстваЗапросаОформлениеСДИЗ;
				ПараметрыЗаполнения.ИмяПоляКорректируемыйСДИЗ = ИмяПоляКорректируемыйСДИЗ;
				ПараметрыЗаполнения.ИмяПоляНомерПартии        = ИмяПоляНомерПартии;
				ПараметрыЗаполнения.ИмяПоляОперацияСДИЗ       = ИмяПоляОперацияСДИЗ(Шапка.Операция);
				
				ПараметрыЗаполнения.РеквизитыОрганизаций      = РеквизитыОрганизаций;
				ПараметрыЗаполнения.Перевозчики               = Перевозчики;
				ПараметрыЗаполнения.МестаПерегрузки           = МестаПерегрузки;
				ПараметрыЗаполнения.ТранспортныеСредства      = ТранспортныеСредства;
				ПараметрыЗаполнения.ДокументыСертификации     = ДокументыСертификации;
				ПараметрыЗаполнения.Шапка                     = Шапка;
				
				Если ЗначениеЗаполнено(Шапка.ПунктОтправления) Тогда
					ПараметрыЗаполнения.ДанныеДополненияАдресаКлючаАдресов = 
						ИнтеграцияЗЕРНОСлужебный.ДанныеДополненияАдресаРФППоОператоруАдреса(Шапка.ПунктОтправления);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОперацияАннулированиеРасчетСтатусаПоСтроке = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗАннулированиеОтказаПогашенияСДИЗРасчетСтатусаПоСтроке;
	
	ИсходныеПартииДокумента       = Неопределено;
	
	ВыборкаПоСтрокеТовары = ДанныеКорректировки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ИдентификаторСтрокиДанныеКорректировки", "");
	
	Пока ВыборкаПоСтрокеТовары.Следующий() Цикл
	
		СообщениеОснованиеПоСтрокеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXMLПоДокументу(Шапка, Операция, НомерВерсии);
		СообщениеОснованиеПоСтрокеXML.ТребуетсяПодписание = Ложь;
		СообщениеОснованиеПоСтрокеXML.ЗагружатьДо         = АбстрактноеСообщениеXML.Идентификатор;
		СообщениеОснованиеПоСтрокеXML.ИдентификаторСтроки = ВыборкаПоСтрокеТовары.ИдентификаторСтрокиТовары;
		
		СообщенияXML.Добавить(СообщениеОснованиеПоСтрокеXML);
		
		ИдентификаторЗагружатьДо = СообщениеОснованиеПоСтрокеXML.Идентификатор;
		ИдентификаторЗагружатьПосле = Неопределено;
		
		ВыборкаПоСообщениям = ВыборкаПоСтрокеТовары.Выбрать();
		
		СообщениеАннулированиеОтказаРасчетСтатусаПоСтрокеXML = Неопределено;
		
		ЕстьКорректировочныйСДИЗ = Ложь;
		
		Пока ВыборкаПоСообщениям.Следующий() Цикл
			
			Если ВыборкаПоСообщениям.Операция = Перечисления.ОперацииКорректировкиСДИЗ.АннулированиеОтказаОтПогашения Тогда
				
				НомерВерсии = НомераВерсийПоОперациям[Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗАннулированиеОтказаПогашенияСДИЗ];
				Если СообщениеАннулированиеОтказаРасчетСтатусаПоСтрокеXML = Неопределено Тогда
				
					СообщениеАннулированиеОтказаРасчетСтатусаПоСтрокеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXMLПоДокументу(
						Шапка, ОперацияАннулированиеРасчетСтатусаПоСтроке, НомерВерсии);
					СообщениеАннулированиеОтказаРасчетСтатусаПоСтрокеXML.ТребуетсяПодписание = Ложь;
					СообщениеАннулированиеОтказаРасчетСтатусаПоСтрокеXML.ЗагружатьДо          = ИдентификаторЗагружатьДо;
					СообщениеАннулированиеОтказаРасчетСтатусаПоСтрокеXML.ИдентификаторЦепочки = ИдентификаторЗагружатьДо;
					СообщениеАннулированиеОтказаРасчетСтатусаПоСтрокеXML.ИдентификаторСтроки  = ВыборкаПоСтрокеТовары.ИдентификаторСтрокиТовары;
					СообщенияXML.Добавить(СообщениеАннулированиеОтказаРасчетСтатусаПоСтрокеXML);
					
					ИдентификаторыСтрокАннулирование = Новый Массив;
					СообщениеАннулированиеОтказаРасчетСтатусаПоСтрокеXML.ПараметрыЗапроса.Вставить("ИдентификаторыСтроки", ИдентификаторыСтрокАннулирование);
					ИнтеграцияЗЕРНОСлужебный.УстановитьСообщениеОснование(
						СообщениеАннулированиеОтказаРасчетСтатусаПоСтрокеXML, СообщениеОснованиеПоСтрокеXML);
					
					ИдентификаторЗагружатьПосле = СообщениеАннулированиеОтказаРасчетСтатусаПоСтрокеXML.Идентификатор;
					
				КонецЕсли;
				
				СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXMLПоДокументу(
					Шапка, Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗАннулированиеОтказаПогашенияСДИЗ, НомерВерсии);
				СообщениеXML.ЗагружатьДо         = СообщениеАннулированиеОтказаРасчетСтатусаПоСтрокеXML.Идентификатор;
				СообщениеXML.ИдентификаторСтроки = ВыборкаПоСообщениям.ИдентификаторСтроки;
				
				СообщениеXML.ДополнительноеОписание = СтрШаблон(НСтр("ru = '№ %1'"), ВыборкаПоСообщениям.КорректируемыйСДИЗИдентификатор);
				
				// При аннулировании отказа от погашения партия аннулируется автоматически
				СообщениеXML.ПараметрыЗапроса.Вставить("СДИЗ",        ВыборкаПоСообщениям.СДИЗ);
				СообщениеXML.ПараметрыЗапроса.Вставить("Партия",      ВыборкаПоСообщениям.Партия);
				СообщениеXML.ПараметрыЗапроса.Вставить("НомерПартии", ВыборкаПоСообщениям.НомерПартии);
				ИнтеграцияЗЕРНОСлужебный.УстановитьСообщениеОснование(СообщениеXML, СообщениеАннулированиеОтказаРасчетСтатусаПоСтрокеXML);
				
				АннулированиеОтказаПогашенияXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяСвойстваЗапросаАннулированиеОтказа);
				ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
					АннулированиеОтказаПогашенияXDTO,
					ИмяПоляИдентификаторЗаявки,
					ВыборкаПоСообщениям.ИдентификаторОтказаПогашения,
					АбстрактноеСообщениеXML);
		
				СообщениеXML.ТекстСообщенияЗапросXML = ИнтеграцияЗЕРНОСлужебный.ОбъектXDTOВXML(
					АннулированиеОтказаПогашенияXDTO, ПространствоИмен, ИмяСвойстваЗапросаАннулированиеОтказа,
					ДополнительныеПараметры.ПараметрыОбмена);
				
				СообщенияXML.Добавить(СообщениеXML);
				
				ИдентификаторыСтрокАннулирование.Добавить(СообщениеXML.ИдентификаторСтроки);
				
			Иначе
				
				Если ВыборкаПоСообщениям.Операция = Перечисления.ОперацииКорректировкиСДИЗ.КорректировкаСДИЗ Тогда
					
					ЕстьКорректировочныйСДИЗ = Истина;
					
					ПараметрыОтбора.ИдентификаторСтрокиДанныеКорректировки = ВыборкаПоСообщениям.ИдентификаторСтроки;
					НайденныеСтроки = ТоварыКорректировочныйСДИЗ.НайтиСтроки(ПараметрыОтбора);
					Если НайденныеСтроки.Количество() = 0 Тогда
						ИнтеграцияЗЕРНОКлиентСервер.ДобавитьТекстОшибки(
							АбстрактноеСообщениеXML,
							СтрШаблон(НСтр("ru = 'Не найдены данные для корректировки СДИЗ: %1.'"), ВыборкаПоСообщениям.КорректируемыйСДИЗИдентификатор));
						СообщенияXML.Добавить(СообщениеXML);
						Возврат СообщенияXML;
					Иначе
						СтрокаТовары = НайденныеСтроки[0];
						ПараметрыЗаполнения.СтрокаТовары = СтрокаТовары;
					КонецЕсли;
					
					ПараметрыЗапроса = Новый Структура;
					
					Если ЭтоЭлеватор Тогда
						
						Если Шапка.Приемка Тогда
							Если ИсходныеПартииДокумента = Неопределено Тогда
								ИсходныеПартииДокумента = ДанныеИсходныхПартийДокумента(ИсходныеПартии);
							КонецЕсли;
							ПараметрыЗапроса.Вставить("ИсходнаяПартия",  ИсходныеПартииДокумента[ВыборкаПоСообщениям.ИдентификаторСтроки]);
						КонецЕсли;
						
						ОформлениеСДИЗXDTO = ОформлениеСДИЗЭлеваторXDTO(Шапка, ПараметрыЗаполнения, АбстрактноеСообщениеXML, ПараметрыОбмена);
						
					Иначе
						
						Если Шапка.Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРФ Тогда
							
							ОформлениеСДИЗXDTO = ОформлениеСДИЗРФXDTO(Шапка, ПараметрыЗаполнения, АбстрактноеСообщениеXML, ПараметрыОбмена);
					
						ИначеЕсли Шапка.Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭкспорт
							Или Шапка.Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗИмпорт Тогда
							
							ОформлениеСДИЗXDTO = ОформлениеСДИЗИмпортЭкспортXDTO(Шапка, ПараметрыЗаполнения, АбстрактноеСообщениеXML, ПараметрыОбмена);
							
						Иначе
							
							ИнтеграцияЗЕРНОКлиентСервер.ДобавитьТекстОшибки(
								СообщениеXML,
								СтрШаблон(НСтр("ru = 'Операция не поддерживается: %1.'"), Шапка.Операция));
							СообщенияXML.Добавить(СообщениеXML);
							Возврат СообщенияXML;
							
						КонецЕсли;
						
					КонецЕсли;
					
					НомерВерсии = НомераВерсийПоОперациям[Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗКорректировочный];
					
					СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXMLПоДокументу(
						Шапка, Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗКорректировочный, НомерВерсии);
					СообщениеXML.ЗагружатьДо          = ИдентификаторЗагружатьДо;
					СообщениеXML.ЗагружатьПосле       = ИдентификаторЗагружатьПосле;
					СообщениеXML.ПередаватьПосле      = ИдентификаторЗагружатьПосле;
					СообщениеXML.ИдентификаторСтроки  = ВыборкаПоСообщениям.ИдентификаторСтроки;
					СообщениеXML.ИдентификаторЦепочки = ИдентификаторЗагружатьДо;
					
					СообщениеXML.ДополнительноеОписание = СтрШаблон(НСтр("ru = '№ %1'"), ВыборкаПоСообщениям.КорректируемыйСДИЗИдентификатор);
					
					СообщениеXML.ПараметрыЗапроса = ПараметрыЗапроса;
						
					ИнтеграцияЗЕРНОСлужебный.УстановитьСообщениеОснование(СообщениеXML, СообщениеОснованиеПоСтрокеXML);
					
					СообщениеXML.ТекстСообщенияЗапросXML = ИнтеграцияЗЕРНОСлужебный.ОбъектXDTOВXML(
						ОформлениеСДИЗXDTO, ПространствоИмен, ПараметрыЗаполнения.ИмяСвойстваЗапроса,
						ДополнительныеПараметры.ПараметрыОбмена);
					
					СообщенияXML.Добавить(СообщениеXML);
					
				Иначе
					
					Если ЕстьКорректировочныйСДИЗ Тогда
						Прервать;
					КонецЕсли;
					
					Если ВыборкаПоСообщениям.Операция = Перечисления.ОперацииКорректировкиСДИЗ.ОтказОтПогашения Тогда
						
						Если ИсходныеПартииДокумента = Неопределено Тогда
							ИсходныеПартииДокумента = ДанныеИсходныхПартийДокумента(ИсходныеПартии);
						КонецЕсли;
						
						НомерВерсии = НомераВерсийПоОперациям[Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗОтказПогашенияСДИЗПриКорректировке];
						
						СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXMLПоДокументу(
							Шапка, Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗОтказПогашенияСДИЗПриКорректировке, НомерВерсии);
						СообщениеXML.ЗагружатьДо            = ИдентификаторЗагружатьДо;
						СообщениеXML.ЗагружатьПосле         = ИдентификаторЗагружатьПосле;
						СообщениеXML.ПередаватьПосле        = ИдентификаторЗагружатьПосле;
						СообщениеXML.ИдентификаторСтроки    = ВыборкаПоСообщениям.ИдентификаторСтроки;
						СообщениеXML.ИдентификаторЦепочки   = ИдентификаторЗагружатьДо;
						СообщениеXML.ДополнительноеОписание = СтрШаблон(НСтр("ru = '№ %1'"), ВыборкаПоСообщениям.КорректируемыйСДИЗИдентификатор);
						
						СообщениеXML.ПараметрыЗапроса.Вставить("НомерСДИЗ", ВыборкаПоСообщениям.КорректируемыйСДИЗИдентификатор);
						СообщениеXML.ПараметрыЗапроса.Вставить(
							"ИсходнаяПартия", ИсходныеПартииДокумента[ВыборкаПоСообщениям.ИдентификаторСтроки]);
						
						ИнтеграцияЗЕРНОСлужебный.УстановитьСообщениеОснование(СообщениеXML, СообщениеОснованиеПоСтрокеXML);
						
						ОтказОтПогашенияСДИЗXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(
							ПространствоИмен, ИмяСвойстваЗапросаОтказОтПогашения);
						ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
							ОтказОтПогашенияСДИЗXDTO, ИмяПоляНомерСДИЗ, ВыборкаПоСообщениям.КорректируемыйСДИЗИдентификатор, АбстрактноеСообщениеXML);
						
						ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
							ОтказОтПогашенияСДИЗXDTO, "amount", ВыборкаПоСообщениям.КоличествоЗЕРНО, АбстрактноеСообщениеXML);
						
						Если ЗначениеЗаполнено(ВыборкаПоСообщениям.Примечание) Тогда
							Примечание = ВыборкаПоСообщениям.Примечание;
						Иначе
							Примечание = ДанныеПричиныОтказаОтПогашенияПоУмолчанию().Примечание;
						КонецЕсли;
						ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
							ОтказОтПогашенияСДИЗXDTO, "CauseComment", Примечание, АбстрактноеСообщениеXML);
						ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
							ОтказОтПогашенияСДИЗXDTO, ИмяПоляПричина, ВыборкаПоСообщениям.ПричинаОтказаОтГашения, АбстрактноеСообщениеXML);
						
						СообщениеXML.ТекстСообщенияЗапросXML = ИнтеграцияЗЕРНОСлужебный.ОбъектXDTOВXML(
							ОтказОтПогашенияСДИЗXDTO, ПространствоИмен, ИмяСвойстваЗапросаОтказОтПогашения,
							ДополнительныеПараметры.ПараметрыОбмена);
						
						СообщенияXML.Добавить(СообщениеXML);
						
					ИначеЕсли ВыборкаПоСообщениям.Операция = Перечисления.ОперацииКорректировкиСДИЗ.АннулированиеСДИЗ Тогда
						
						НомерВерсии = НомераВерсийПоОперациям[Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗ];
						
						СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXMLПоДокументу(
							Шапка, Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗПриКорректировке, НомерВерсии);
						СообщениеXML.ЗагружатьДо          = ИдентификаторЗагружатьДо;
						СообщениеXML.ЗагружатьПосле       = ИдентификаторЗагружатьПосле;
						СообщениеXML.ПередаватьПосле      = ИдентификаторЗагружатьПосле;
						СообщениеXML.ИдентификаторСтроки  = ВыборкаПоСообщениям.ИдентификаторСтроки;
						СообщениеXML.ИдентификаторЦепочки = ИдентификаторЗагружатьДо;
						СообщениеXML.ПараметрыЗапроса.Вставить("НомерПартии", ВыборкаПоСообщениям.НомерПартии);
						СообщениеXML.ПараметрыЗапроса.Вставить("АннулироватьПартию", Ложь);
						
						ИнтеграцияЗЕРНОСлужебный.УстановитьСообщениеОснование(СообщениеXML, СообщениеОснованиеПоСтрокеXML);
						
						АннулированиеСДИЗXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяСвойстваЗапросаАннулированиеСДИЗ);
						ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
							АннулированиеСДИЗXDTO, ИмяПоляНомерСДИЗ, ВыборкаПоСообщениям.КорректируемыйСДИЗИдентификатор, АбстрактноеСообщениеXML);
						
						СообщениеXML.ТекстСообщенияЗапросXML = ИнтеграцияЗЕРНОСлужебный.ОбъектXDTOВXML(
							АннулированиеСДИЗXDTO, ПространствоИмен, ИмяСвойстваЗапросаАннулированиеСДИЗ,
							ДополнительныеПараметры.ПараметрыОбмена);
						
						СообщенияXML.Добавить(СообщениеXML);
						
						ИдентификаторЗагружатьПосле = СообщениеXML.Идентификатор;
						
					ИначеЕсли ВыборкаПоСообщениям.Операция = Перечисления.ОперацииКорректировкиСДИЗ.АннулированиеПартии Тогда
						
						НомерВерсии = НомераВерсийПоОперациям[Перечисления.ВидыОперацийЗЕРНО.АннулированиеФормированияПартии];
						
						СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXMLПоДокументу(
							Шапка, Перечисления.ВидыОперацийЗЕРНО.АннулированиеПартииПриКорректировке, НомерВерсии);
						СообщениеXML.ЗагружатьДо          = ИдентификаторЗагружатьДо;
						СообщениеXML.ЗагружатьПосле       = ИдентификаторЗагружатьПосле;
						СообщениеXML.ПередаватьПосле      = ИдентификаторЗагружатьПосле;
						СообщениеXML.ИдентификаторСтроки  = ВыборкаПоСообщениям.ИдентификаторСтроки;
						СообщениеXML.ИдентификаторЦепочки = ИдентификаторЗагружатьДо;
						
						СообщениеXML.ПараметрыЗапроса.Вставить("НомерПартии", ВыборкаПоСообщениям.НомерПартии);
						//СообщениеXML.ПараметрыЗапроса.Вставить("Партия",      ВыборкаПоСообщениям.Партия);
						
						ИнтеграцияЗЕРНОСлужебный.УстановитьСообщениеОснование(СообщениеXML, СообщениеОснованиеПоСтрокеXML);
						
						АннулированиеПартииXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИменПартии, ИмяСвойстваЗапросаАннулированиеПартии);
						ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
							АннулированиеПартииXDTO, ИмяПоляНомерПартии, ВыборкаПоСообщениям.НомерПартии, АбстрактноеСообщениеXML);
						
						СообщениеXML.ТекстСообщенияЗапросXML = ИнтеграцияЗЕРНОСлужебный.ОбъектXDTOВXML(
							АннулированиеПартииXDTO, ПространствоИменПартии, ИмяСвойстваЗапросаАннулированиеПартии,
							ДополнительныеПараметры.ПараметрыОбмена);
						СообщенияXML.Добавить(СообщениеXML);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ИнтеграцияЗЕРНОСлужебный.УстановитьСообщениеОснование(СообщениеОснованиеПоСтрокеXML, АбстрактноеСообщениеXML);
		
	КонецЦикла;
	
	Если АбстрактноеСообщениеXML.Ошибки.Количество() Тогда
		СообщенияXML = Новый Массив;
	КонецЕсли;
	
	СообщенияXML.Добавить(АбстрактноеСообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

// Сообщение аннулирования выделенных партий после аннулирования СДИЗ
//
// Параметры:
//  ЭлементОчереди - см. ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML.
//  ПараметрыЗапроса - Структура - дополнительные параметры сообщения.
//  ПараметрыОбмена             - см. ИнтеграцияЗЕРНО.ПараметрыОбмена
// Возвращаемое значение:
//  см. ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML
Функция СообщениеАннулированияПартии(ЭлементОчереди, ПараметрыЗапроса, ПараметрыОбмена)
	
	СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML();
	СообщениеXML.Операция         = Перечисления.ВидыОперацийЗЕРНО.АннулированиеФормированияПартии;
	СообщениеXML.ВидПродукции     = ЭлементОчереди.ВидПродукции;
	СообщениеXML.ТипСообщения     = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеXML.Версия           = 1;
	СообщениеXML.СсылкаНаОбъект   = ЭлементОчереди.СсылкаНаОбъект;
	СообщениеXML.Организация      = ЭлементОчереди.Организация;
	СообщениеXML.Подразделение    = ЭлементОчереди.Подразделение;
	
	СообщениеXML.ИдентификаторСтроки = ЭлементОчереди.ИдентификаторСтроки;
	СообщениеXML.ПараметрыЗапроса    = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыЗапроса);
	
	ВидПродукции = ЭлементОчереди.ВидПродукции;
	
	Если ВидПродукции = Перечисления.ВидыПродукцииИС.ПродуктыПереработкиЗерна Тогда
		ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_gpb", ПараметрыОбмена.ПараметрыОптимизации);
		ИмяСвойстваЗапроса = "RequestCanceledGpb";
	Иначе
		ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_lots", ПараметрыОбмена.ПараметрыОптимизации);
		ИмяСвойстваЗапроса = "RequestCanceledLot";
	КонецЕсли;
	
	АннулированиеПартииXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяСвойстваЗапроса);
	ИмяПоляНомерПартии = ИнтеграцияЗЕРНОСлужебный.ИмяПоляНомерПартииПоВидуПродукции(ВидПродукции);
	ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
		АннулированиеПартииXDTO, ИмяПоляНомерПартии, ПараметрыЗапроса.НомерПартии, СообщениеXML);
	
	СообщениеXML.ТекстСообщенияЗапросXML = ИнтеграцияЗЕРНОСлужебный.ОбъектXDTOВXML(
		АннулированиеПартииXDTO, ПространствоИмен, ИмяСвойстваЗапроса, ПараметрыОбмена);
	
	Возврат СообщениеXML;
	
КонецФункции

Функция ДанныеКонтрагентовОрганизацийПриОформленииСДИЗ(Шапка, Перевозчики, Товары = Неопределено)
	
	ТаблицаИсточникиРеквизитов = ИнтеграцияЗЕРНО.НоваяТаблицаОрганизацияКонтрагентПодразделение();
	ИнтеграцияЗЕРНО.ДобавитьВТаблицуОтбораОрганизациюПодразделение(
		ТаблицаИсточникиРеквизитов, Шапка.Организация, Шапка.Подразделение);
	
	Если Шапка.Реализация Тогда
		ИнтеграцияЗЕРНО.ДобавитьВТаблицуОтбораОрганизациюПодразделение(
			ТаблицаИсточникиРеквизитов, Шапка.Покупатель, Шапка.ПодразделениеПокупателя);
	КонецЕсли;
	
	Если Шапка.Перевозка Тогда
		
		Если ЗначениеЗаполнено(Шапка.Грузоотправитель) Тогда
			ИнтеграцияЗЕРНО.ДобавитьВТаблицуОтбораОрганизациюПодразделение(
				ТаблицаИсточникиРеквизитов, Шапка.Грузоотправитель, Шапка.ПодразделениеГрузоотправителя);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Шапка.Грузополучатель) Тогда
			ИнтеграцияЗЕРНО.ДобавитьВТаблицуОтбораОрганизациюПодразделение(
				ТаблицаИсточникиРеквизитов, Шапка.Грузополучатель, Шапка.ПодразделениеГрузополучателя);
		КонецЕсли;
		
		Для Каждого СтрокаПеревозчика Из Перевозчики Цикл
			ИнтеграцияЗЕРНО.ДобавитьВТаблицуОтбораОрганизациюПодразделение(
				ТаблицаИсточникиРеквизитов, СтрокаПеревозчика.Перевозчик, СтрокаПеревозчика.Подразделение);
		КонецЦикла;
		
		Если Шапка.Операция <> Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРФ Тогда
			ИнтеграцияЗЕРНО.ДобавитьВТаблицуОтбораОрганизациюПодразделение(ТаблицаИсточникиРеквизитов, Шапка.Лаборатория);
			Если Товары <> Неопределено Тогда
				Для Каждого СтрокаТовары Из Товары Цикл
					ИнтеграцияЗЕРНО.ДобавитьВТаблицуОтбораОрганизациюПодразделение(
						ТаблицаИсточникиРеквизитов, СтрокаТовары.Лаборатория);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		Если Шапка.Отгрузка И ЗначениеЗаполнено(Шапка.Грузоотправитель) Тогда
			ИнтеграцияЗЕРНО.ДобавитьВТаблицуОтбораОрганизациюПодразделение(
				ТаблицаИсточникиРеквизитов, Шапка.Грузоотправитель, Шапка.ПодразделениеГрузоотправителя);
		КонецЕсли;
		
		Если Шапка.Приемка И ЗначениеЗаполнено(Шапка.Грузополучатель) Тогда
			ИнтеграцияЗЕРНО.ДобавитьВТаблицуОтбораОрганизациюПодразделение(
				ТаблицаИсточникиРеквизитов, Шапка.Грузополучатель, Шапка.ПодразделениеГрузополучателя);
		КонецЕсли;
		
	КонецЕсли;
	
	ИнтеграцияЗЕРНОВызовСервера.РеквизитыОрганизацийКонтрагентов(ТаблицаИсточникиРеквизитов);
	
	Возврат ТаблицаИсточникиРеквизитов;
	
КонецФункции

Функция ОформлениеСДИЗРФ(Шапка, РезультатЗапроса, ДополнительныеПараметры)
	
	ПараметрыОбмена = ДополнительныеПараметры.ПараметрыОбмена;

	СообщенияXML = Новый Массив;
	
	//@skip-warning
	Товары = РезультатЗапроса["Товары"].Выгрузить();
	//@skip-warning
	Перевозчики = РезультатЗапроса["Перевозчики"].Выгрузить();
	//@skip-warning
	ТранспортныеСредства = РезультатЗапроса["ТранспортныеСредства"].Выгрузить();
	//@skip-warning
	МестаПерегрузки = РезультатЗапроса["МестаПерегрузки"].Выгрузить();
	//@skip-warning
	СвязанныеДокументы = РезультатЗапроса["СвязанныеДокументы"].Выгрузить();
	//@skip-warning
	СвязанныеДокументыПрочие = РезультатЗапроса["СвязанныеДокументыПрочие"].Выгрузить();
	//@skip-warning
	ДокументыСертификации = РезультатЗапроса["ДокументыСертификации"].Выгрузить();
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	АбстрактнаяОперация = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРасчетСтатуса;
	Операция = Шапка.Операция;
	
	АбстрактноеСообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXMLПоДокументу(Шапка, АбстрактнаяОперация, НомерВерсии);
	АбстрактноеСообщениеXML.ТребуетсяПодписание = Ложь;
	
	ЭтоЗерно = Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.Зерно;
	Если ЭтоЗерно Тогда
		ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_sdiz", ПараметрыОбмена.ПараметрыОптимизации);
		ИмяСвойстваЗапроса = "RequestCreateSDIZ";
	Иначе
		ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_gpb_sdiz", ПараметрыОбмена.ПараметрыОптимизации);
		ИмяСвойстваЗапроса = "RequestCreateGpbSDIZ";
	КонецЕсли;
	
	РеквизитыОрганизаций = ДанныеКонтрагентовОрганизацийПриОформленииСДИЗ(Шапка, Перевозчики);
	
	ИмяПоляКорректируемыйСДИЗ = ИнтеграцияЗЕРНОСлужебный.ИмяПоляКорректируемыйСДИЗПоВидуПродукции(Шапка.Видпродукции);
	ИмяПоляНомерПартии        = ИнтеграцияЗЕРНОСлужебный.ИмяПоляНомерПартииПоВидуПродукции(Шапка.ВидПродукции);
	
	ПараметрыЗаполнения = НовыеПараметрыЗаполненияСДИЗРФ();
	ПараметрыЗаполнения.ПространствоИмен          = ПространствоИмен;
	ПараметрыЗаполнения.ИмяСвойстваЗапроса        = ИмяСвойстваЗапроса;
	ПараметрыЗаполнения.ИмяПоляКорректируемыйСДИЗ = ИмяПоляКорректируемыйСДИЗ;
	ПараметрыЗаполнения.ИмяПоляНомерПартии        = ИмяПоляНомерПартии;
	ПараметрыЗаполнения.ИмяПоляОперацияСДИЗ       = ИмяПоляОперацияСДИЗ(Шапка.Операция);
	
	ПараметрыЗаполнения.РеквизитыОрганизаций      = РеквизитыОрганизаций;
	ПараметрыЗаполнения.Перевозчики               = Перевозчики;
	ПараметрыЗаполнения.МестаПерегрузки           = МестаПерегрузки;
	ПараметрыЗаполнения.ТранспортныеСредства      = ТранспортныеСредства;
	ПараметрыЗаполнения.Шапка                     = Шапка;
	ПараметрыЗаполнения.СвязанныеДокументы        = СвязанныеДокументы;
	ПараметрыЗаполнения.СвязанныеДокументыПрочие  = СвязанныеДокументыПрочие;
	ПараметрыЗаполнения.ДокументыСертификации     = ДокументыСертификации;
	
	Если ЗначениеЗаполнено(Шапка.ПунктОтправления) Тогда
		ПараметрыЗаполнения.ДанныеДополненияАдресаКлючаАдресов = ИнтеграцияЗЕРНОСлужебный.ДанныеДополненияАдресаРФППоОператоруАдреса(Шапка.ПунктОтправления);
	КонецЕсли;
	
	Для Каждого СтрокаТовары Из Товары Цикл
		
		ПараметрыЗаполнения.СтрокаТовары = СтрокаТовары;
		
		ОформлениеСДИЗXDTO = ОформлениеСДИЗРФXDTO(Шапка, ПараметрыЗаполнения, АбстрактноеСообщениеXML, ПараметрыОбмена);
		
		СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXMLПоДокументу(Шапка, Операция, НомерВерсии);
		СообщениеXML.ЗагружатьДо         = АбстрактноеСообщениеXML.Идентификатор;
		Если ЗначениеЗаполнено(СтрокаТовары.ИдентификаторСтрокиДанныеКорректировки) Тогда
			ИдентификаторСтроки = СтрокаТовары.ИдентификаторСтрокиДанныеКорректировки
		Иначе
			ИдентификаторСтроки = СтрокаТовары.ИдентификаторСтроки;
		КонецЕсли;
		СообщениеXML.ИдентификаторСтроки = ИдентификаторСтроки;
		
		СообщениеXML.ПараметрыЗапроса.Вставить("ИдентификаторСтрокиТовары", СтрокаТовары.ИдентификаторСтроки);
		
		ИнтеграцияЗЕРНОСлужебный.УстановитьСообщениеОснование(СообщениеXML, АбстрактноеСообщениеXML);
		СообщениеXML.ТекстСообщенияЗапросXML = ИнтеграцияЗЕРНОСлужебный.ОбъектXDTOВXML(
			ОформлениеСДИЗXDTO, ПространствоИмен, ИмяСвойстваЗапроса,
			ДополнительныеПараметры.ПараметрыОбмена);
		СообщенияXML.Добавить(СообщениеXML);
		
	КонецЦикла;
	
	Если АбстрактноеСообщениеXML.Ошибки.Количество() Тогда
		СообщенияXML = Новый Массив;
	КонецЕсли;
	
	СообщенияXML.Добавить(АбстрактноеСообщениеXML);
	Возврат СообщенияXML;
	
КонецФункции

Функция ОформлениеСДИЗИмпортЭкспорт(Шапка, РезультатЗапроса, ДополнительныеПараметры)
	
	ПараметрыОбмена = ДополнительныеПараметры.ПараметрыОбмена;
	СообщенияXML    = Новый Массив;
	
	//@skip-warning
	Товары = РезультатЗапроса["Товары"].Выгрузить();
	//@skip-warning
	Перевозчики = РезультатЗапроса["Перевозчики"].Выгрузить();
	//@skip-warning
	ТранспортныеСредства = РезультатЗапроса["ТранспортныеСредства"].Выгрузить();
	//@skip-warning
	МестаПерегрузки = РезультатЗапроса["МестаПерегрузки"].Выгрузить();
	//@skip-warning
	СвязанныеДокументы = РезультатЗапроса["СвязанныеДокументы"].Выгрузить();
	//@skip-warning
	СвязанныеДокументыПрочие = РезультатЗапроса["СвязанныеДокументыПрочие"].Выгрузить();
	//@skip-warning
	ДокументыСертификации = РезультатЗапроса["ДокументыСертификации"].Выгрузить();
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	АбстрактнаяОперация = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРасчетСтатуса;
	Операция = Шапка.Операция;
	
	АбстрактноеСообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXMLПоДокументу(Шапка, АбстрактнаяОперация, НомерВерсии);
	АбстрактноеСообщениеXML.ТребуетсяПодписание = Ложь;
	
	ЭтоЗерно = Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.Зерно;
	Если ЭтоЗерно Тогда
		ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_sdiz", ПараметрыОбмена.ПараметрыОптимизации);
		ИмяСвойстваЗапроса = "RequestCreateSDIZ";
	Иначе
		ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_gpb_sdiz", ПараметрыОбмена.ПараметрыОптимизации);
		ИмяСвойстваЗапроса = "RequestCreateGpbSDIZ";
	КонецЕсли;
	
	РеквизитыОрганизаций = ДанныеКонтрагентовОрганизацийПриОформленииСДИЗ(Шапка, Перевозчики, Товары);
	
	ИмяПоляКорректируемыйСДИЗ = ИнтеграцияЗЕРНОСлужебный.ИмяПоляКорректируемыйСДИЗПоВидуПродукции(Шапка.Видпродукции);
	ИмяПоляНомерПартии = ИнтеграцияЗЕРНОСлужебный.ИмяПоляНомерПартииПоВидуПродукции(Шапка.ВидПродукции);
	
	ПараметрыЗаполнения = НовыеПараметрыЗаполненияСДИЗИмпортЭкспорт();
	ПараметрыЗаполнения.ПространствоИмен          = ПространствоИмен;
	ПараметрыЗаполнения.ИмяСвойстваЗапроса        = ИмяСвойстваЗапроса;
	ПараметрыЗаполнения.ИмяПоляКорректируемыйСДИЗ = ИмяПоляКорректируемыйСДИЗ;
	ПараметрыЗаполнения.ИмяПоляНомерПартии        = ИмяПоляНомерПартии;
	ПараметрыЗаполнения.ДокументыСертификации     = ДокументыСертификации;
	ПараметрыЗаполнения.РеквизитыОрганизаций      = РеквизитыОрганизаций;
	ПараметрыЗаполнения.Перевозчики               = Перевозчики;
	ПараметрыЗаполнения.МестаПерегрузки           = МестаПерегрузки;
	ПараметрыЗаполнения.ТранспортныеСредства      = ТранспортныеСредства;
	ПараметрыЗаполнения.Шапка                     = Шапка;
	ПараметрыЗаполнения.ИмяПоляОперацияСДИЗ       = ИмяПоляОперацияСДИЗ(Шапка.Операция);
	
	Если ЗначениеЗаполнено(Шапка.ПунктОтправления) Тогда
		ПараметрыЗаполнения.ДанныеДополненияАдресаКлючаАдресов = ИнтеграцияЗЕРНОСлужебный.ДанныеДополненияАдресаРФППоОператоруАдреса(Шапка.ПунктОтправления);
	КонецЕсли;
	
	Для Каждого СтрокаТовары Из Товары Цикл
		
		СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXMLПоДокументу(Шапка, Операция, НомерВерсии);
		СообщениеXML.ЗагружатьДо         = АбстрактноеСообщениеXML.Идентификатор;
		Если ЗначениеЗаполнено(СтрокаТовары.ИдентификаторСтрокиДанныеКорректировки) Тогда
			ИдентификаторСтроки = СтрокаТовары.ИдентификаторСтрокиДанныеКорректировки
		Иначе
			ИдентификаторСтроки = СтрокаТовары.ИдентификаторСтроки;
		КонецЕсли;
		СообщениеXML.ИдентификаторСтроки = ИдентификаторСтроки;
		
		СообщениеXML.ПараметрыЗапроса.Вставить("ИдентификаторСтрокиТовары", СтрокаТовары.ИдентификаторСтроки);
		
		ИнтеграцияЗЕРНОСлужебный.УстановитьСообщениеОснование(СообщениеXML, АбстрактноеСообщениеXML);
		
		ПараметрыЗаполнения.СтрокаТовары = СтрокаТовары;
		
		ОформлениеСДИЗXDTO = ОформлениеСДИЗИмпортЭкспортXDTO(Шапка, ПараметрыЗаполнения, АбстрактноеСообщениеXML, ПараметрыОбмена);
		СообщениеXML.ТекстСообщенияЗапросXML = ИнтеграцияЗЕРНОСлужебный.ОбъектXDTOВXML(
			ОформлениеСДИЗXDTO, ПространствоИмен, ИмяСвойстваЗапроса,
			ДополнительныеПараметры.ПараметрыОбмена);
		
		СообщенияXML.Добавить(СообщениеXML);
		
	КонецЦикла;
	
	Если АбстрактноеСообщениеXML.Ошибки.Количество() Тогда
		СообщенияXML = Новый Массив;
	КонецЕсли;
	
	СообщенияXML.Добавить(АбстрактноеСообщениеXML);
	Возврат СообщенияXML;
	
КонецФункции

Функция ОформлениеСДИЗЭлеватор(Шапка, РезультатЗапроса, ДополнительныеПараметры)
	
	ПараметрыОбмена = ДополнительныеПараметры.ПараметрыОбмена;
	СообщенияXML    = Новый Массив;
	
	//@skip-warning
	Товары = РезультатЗапроса["Товары"].Выгрузить();
	
	//@skip-warning
	УслугиЭлеватора = РезультатЗапроса["УслугиЭлеватора"].Выгрузить();
	
	//@skip-warning
	ДокументыСертификации = РезультатЗапроса["ДокументыСертификации"].Выгрузить();
	
	//@skip-warning
	ИсходныеПартии = РезультатЗапроса["ИсходныеПартии"].Выгрузить();
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	АбстрактнаяОперация = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРасчетСтатуса;;
	Операция = Шапка.Операция;
	
	АбстрактноеСообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXMLПоДокументу(Шапка, АбстрактнаяОперация, НомерВерсии);
	АбстрактноеСообщениеXML.ТребуетсяПодписание = Ложь;
	
	ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_sdiz", ПараметрыОбмена.ПараметрыОптимизации);
	ИмяСвойстваЗапроса = "RequestCreateSDIZElevator";
	
	Если Шапка.Приемка Тогда
		ИсходныеПартииДокумента = ДанныеИсходныхПартийДокумента(ИсходныеПартии);
	КонецЕсли;
	
	ИмяПоляКорректируемыйСДИЗ = ИнтеграцияЗЕРНОСлужебный.ИмяПоляКорректируемыйСДИЗПоВидуПродукции(Шапка.Видпродукции);
	
	ПараметрыЗаполнения = НовыеПараметрыЗаполненияСДИЗЭлеватор();
	ПараметрыЗаполнения.ПространствоИмен          = ПространствоИмен;
	ПараметрыЗаполнения.ИмяСвойстваЗапроса        = ИмяСвойстваЗапроса;
	ПараметрыЗаполнения.ИмяПоляКорректируемыйСДИЗ = ИмяПоляКорректируемыйСДИЗ;
	ПараметрыЗаполнения.УслугиЭлеватора           = УслугиЭлеватора;
	ПараметрыЗаполнения.ДокументыСертификации     = ДокументыСертификации;
	
	Для Каждого СтрокаТовары Из Товары Цикл
		
		ПараметрыЗаполнения.СтрокаТовары = СтрокаТовары;
		
		СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXMLПоДокументу(Шапка, Операция, НомерВерсии);
		СообщениеXML.ЗагружатьДо         = АбстрактноеСообщениеXML.Идентификатор;
		Если ЗначениеЗаполнено(СтрокаТовары.ИдентификаторСтрокиДанныеКорректировки) Тогда
			ИдентификаторСтроки = СтрокаТовары.ИдентификаторСтрокиДанныеКорректировки
		Иначе
			ИдентификаторСтроки = СтрокаТовары.ИдентификаторСтроки;
		КонецЕсли;
		СообщениеXML.ИдентификаторСтроки = ИдентификаторСтроки;
		
		ПараметрыЗапроса = Новый Структура;
		Если Шапка.Приемка Тогда
			ПараметрыЗапроса.Вставить("ИсходнаяПартия",  ИсходныеПартииДокумента[ИдентификаторСтроки]);
		КонецЕсли;
		ПараметрыЗапроса.Вставить("ИдентификаторСтрокиТовары", СтрокаТовары.ИдентификаторСтроки);
		
		СообщениеXML.ПараметрыЗапроса = ПараметрыЗапроса;
		
		ИнтеграцияЗЕРНОСлужебный.УстановитьСообщениеОснование(СообщениеXML, АбстрактноеСообщениеXML);
		
		ОформлениеСДИЗXDTO = ОформлениеСДИЗЭлеваторXDTO(Шапка, ПараметрыЗаполнения, АбстрактноеСообщениеXML, ПараметрыОбмена);
		СообщениеXML.ТекстСообщенияЗапросXML = ИнтеграцияЗЕРНОСлужебный.ОбъектXDTOВXML(
			ОформлениеСДИЗXDTO, ПространствоИмен, ИмяСвойстваЗапроса,
			ДополнительныеПараметры.ПараметрыОбмена);
		
		СообщенияXML.Добавить(СообщениеXML);
		
	КонецЦикла;
	
	Если АбстрактноеСообщениеXML.Ошибки.Количество() Тогда
		СообщенияXML = Новый Массив;
	КонецЕсли;
	
	СообщенияXML.Добавить(АбстрактноеСообщениеXML);
	Возврат СообщенияXML;
	
КонецФункции

Функция ОформлениеСДИЗЭлеваторXDTO(Шапка, ПараметрыЗаполнения, АбстрактноеСообщениеXML, ПараметрыОбмена)
	
	ПространствоИмен          = ПараметрыЗаполнения.ПространствоИмен;
	ИмяСвойстваЗапроса        = ПараметрыЗаполнения.ИмяСвойстваЗапроса;
	ИмяПоляКорректируемыйСДИЗ = ПараметрыЗаполнения.ИмяПоляКорректируемыйСДИЗ;
	
	СтрокаТовары = ПараметрыЗаполнения.СтрокаТовары;
	
	УслугиЭлеватора         = ПараметрыЗаполнения.УслугиЭлеватора;
	ДокументыСертификации   = ПараметрыЗаполнения.ДокументыСертификации;
	
	ОформлениеСДИЗXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяСвойстваЗапроса);
	ЭлементСДИЗXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "OperationSDIZElevator", ОформлениеСДИЗXDTO);
	
	Если Шапка.Приемка Тогда
		
		ОперацияСДИЗXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "AcceptanceElevator", ЭлементСДИЗXDTO);
		
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
			ОперацияСДИЗXDTO, "dateDogovor", Формат(Шапка.ДатаДоговораХранения, "ДФ=yyyy-MM-dd;"), АбстрактноеСообщениеXML);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
			ОперацияСДИЗXDTO, "numberDogovor", Шапка.НомерДоговораХранения, АбстрактноеСообщениеXML);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
			ОперацияСДИЗXDTO, "storageArea", Шапка.ЗакрепленнаяПлощадь, АбстрактноеСообщениеXML);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
			ОперацияСДИЗXDTO, "storagePeriod", Шапка.СрокХранения, АбстрактноеСообщениеXML);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
			ОперацияСДИЗXDTO, "storageConditions", Шапка.УсловияХранения, АбстрактноеСообщениеXML);
		
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ОперацияСДИЗXDTO, "Operation", "ACCEPTANCE", АбстрактноеСообщениеXML);
		
		ТипХраненияXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "StorageType", ОперацияСДИЗXDTO);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ТипХраненияXDTO, "code", Шапка.ТипХранения, АбстрактноеСообщениеXML);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ОперацияСДИЗXDTO, "StorageType", ТипХраненияXDTO, АбстрактноеСообщениеXML);
		
		МестоХраненияXDTO = ИнтеграцияЗЕРНОСлужебный.АдресРФXDTO(Шапка.МестоХранения, Шапка.МестоХраненияСтрокой, АбстрактноеСообщениеXML, ПараметрыОбмена);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ОперацияСДИЗXDTO, "StoragePlace", МестоХраненияXDTO, АбстрактноеСообщениеXML);
		
		Для Каждого СтрокаУслуги Из УслугиЭлеватора Цикл
			УслугиХраненияXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "ElevatorService", ОперацияСДИЗXDTO);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
				УслугиХраненияXDTO, "code", СтрокаУслуги.ИдентификаторУслуги, АбстрактноеСообщениеXML);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ОперацияСДИЗXDTO, "ElevatorService", УслугиХраненияXDTO, АбстрактноеСообщениеXML);
		КонецЦикла;
		
		Если Шапка.ПеремещениеПартийЗерна Тогда
			
			ПеремещениеXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Moving", ОперацияСДИЗXDTO);
			МестоХраненияПеремещенияXDTO = ИнтеграцияЗЕРНОСлужебный.АдресРФXDTO(
				Шапка.МестоХраненияПриПеремещении, Шапка.МестоХраненияПриПеремещенииСтрокой, АбстрактноеСообщениеXML, ПараметрыОбмена);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ПеремещениеXDTO, "MovingStoragePlace", МестоХраненияПеремещенияXDTO, АбстрактноеСообщениеXML);
			
			ТипХраненияXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "StorageType", ПеремещениеXDTO);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ТипХраненияXDTO, "code", Шапка.ТипХраненияПриПеремещении, АбстрактноеСообщениеXML);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ПеремещениеXDTO, "StorageType", ТипХраненияXDTO, АбстрактноеСообщениеXML);
			
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
				ПеремещениеXDTO, "movingDate", Формат(Шапка.ДатаПеремещения, "ДФ=yyyy-MM-dd;"), АбстрактноеСообщениеXML);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
				ПеремещениеXDTO, "movingStorageConditions", Шапка.УсловияХраненияПриПеремещении, АбстрактноеСообщениеXML);
			
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ОперацияСДИЗXDTO, "Moving", ПеремещениеXDTO, АбстрактноеСообщениеXML);
			
		КонецЕсли;
		
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементСДИЗXDTO, "AcceptanceElevator", ОперацияСДИЗXDTO, АбстрактноеСообщениеXML);
		
	ИначеЕсли Шапка.Отгрузка Тогда
		
		ОперацияСДИЗXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "ShipmentElevator", ЭлементСДИЗXDTO);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ОперацияСДИЗXDTO, "Operation", "SHIPMENT", АбстрактноеСообщениеXML);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементСДИЗXDTO,  "ShipmentElevator", ОперацияСДИЗXDTO, АбстрактноеСообщениеXML);
		
	Иначе
		
		АбстрактноеСообщениеXML.ДополнительноеОписание = СтрШаблон(НСтр("ru = 'по документу %1'"), Шапка.Ссылка);
		ИнтеграцияЗЕРНОКлиентСервер.ДобавитьТекстОшибки(АбстрактноеСообщениеXML, НСтр("ru = 'Не указан тип операции (приемка или отгрузка).'"));
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ОформлениеСДИЗXDTO, "OperationSDIZElevator", ЭлементСДИЗXDTO, АбстрактноеСообщениеXML);
	ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ОформлениеСДИЗXDTO, "lotNumber", СтрокаТовары.НомерПартии, АбстрактноеСообщениеXML);
	
	Если ЗначениеЗаполнено(СтрокаТовары.КорректируемыйСДИЗИдентификатор) Тогда
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
			ОформлениеСДИЗXDTO, ИмяПоляКорректируемыйСДИЗ, СтрокаТовары.КорректируемыйСДИЗИдентификатор, АбстрактноеСообщениеXML);
	КонецЕсли;
	
	ЗаполнитьДокументыСертификации(
		ОформлениеСДИЗXDTO,
		ДокументыСертификации,
		СтрокаТовары.ИдентификаторСтроки,
		ПространствоИмен,
		АбстрактноеСообщениеXML);
	
	Возврат ОформлениеСДИЗXDTO;
	
КонецФункции

Функция ОформлениеСДИЗИмпортЭкспортXDTO(Шапка, ПараметрыЗаполнения, АбстрактноеСообщениеXML, ПараметрыОбмена)
	
	ПространствоИмен          = ПараметрыЗаполнения.ПространствоИмен;
	ИмяСвойстваЗапроса        = ПараметрыЗаполнения.ИмяСвойстваЗапроса;
	ИмяПоляНомерПартии        = ПараметрыЗаполнения.ИмяПоляНомерПартии;
	ИмяПоляКорректируемыйСДИЗ = ПараметрыЗаполнения.ИмяПоляКорректируемыйСДИЗ;
	ИмяПоляОперацияСДИЗ       = ПараметрыЗаполнения.ИмяПоляОперацияСДИЗ;
	
	ДокументыСертификации     = ПараметрыЗаполнения.ДокументыСертификации;
	
	СтрокаТовары = ПараметрыЗаполнения.СтрокаТовары;
	
	ОформлениеСДИЗXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяСвойстваЗапроса);
	
	ЭлементСДИЗXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяПоляОперацияСДИЗ, ОформлениеСДИЗXDTO);
	
	Если Шапка.Перевозка Тогда
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементСДИЗXDTO, "OperationSDIZ", "SHIPPING", АбстрактноеСообщениеXML);
	Иначе
		Если Шапка.Приемка Тогда
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементСДИЗXDTO, "OperationSDIZ", "ACCEPTANCE", АбстрактноеСообщениеXML);
		КонецЕсли;
		Если Шапка.Отгрузка Тогда
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементСДИЗXDTO, "OperationSDIZ", "SHIPMENT", АбстрактноеСообщениеXML);
		КонецЕсли;
	КонецЕсли;
	
	// Shipping 
	ЭлементПеревозкаXDTO = ПеревозкаОформлениеСДИЗXDTO(ПараметрыЗаполнения, ЭлементСДИЗXDTO, ПространствоИмен, АбстрактноеСообщениеXML, ПараметрыОбмена);
	ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементСДИЗXDTO,  "Shipping", ЭлементПеревозкаXDTO, АбстрактноеСообщениеXML);
	
	ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ОформлениеСДИЗXDTO, ИмяПоляОперацияСДИЗ, ЭлементСДИЗXDTO, АбстрактноеСообщениеXML);
	
	// AdditionalInformationImportExport
	ДопСведенияИмпортЭкспортXDTO = ДополнительныеСведенияИмпортЭкспортXDTO(ПараметрыЗаполнения, ЭлементСДИЗXDTO, ПространствоИмен, АбстрактноеСообщениеXML, ПараметрыОбмена);
	ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементСДИЗXDTO,  "AdditionalInformationImportExport", ДопСведенияИмпортЭкспортXDTO, АбстрактноеСообщениеXML);
	
	ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ОформлениеСДИЗXDTO, ИмяПоляНомерПартии, СтрокаТовары.НомерПартии, АбстрактноеСообщениеXML);
	
	Если ЗначениеЗаполнено(СтрокаТовары.КорректируемыйСДИЗИдентификатор) Тогда
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
			ОформлениеСДИЗXDTO, ИмяПоляКорректируемыйСДИЗ, СтрокаТовары.КорректируемыйСДИЗИдентификатор, АбстрактноеСообщениеXML);
	КонецЕсли;
	
	ЗаполнитьДокументыСертификации(
		ОформлениеСДИЗXDTO,
		ДокументыСертификации,
		СтрокаТовары.ИдентификаторСтроки,
		ПространствоИмен,
		АбстрактноеСообщениеXML);
	
	Возврат ОформлениеСДИЗXDTO;
	
КонецФункции

Функция ОформлениеСДИЗРФXDTO(Шапка, ПараметрыЗаполнения, АбстрактноеСообщениеXML, ПараметрыОбмена)
	
	ПространствоИмен          = ПараметрыЗаполнения.ПространствоИмен;
	ИмяСвойстваЗапроса        = ПараметрыЗаполнения.ИмяСвойстваЗапроса;
	ИмяПоляНомерПартии        = ПараметрыЗаполнения.ИмяПоляНомерПартии;
	ИмяПоляКорректируемыйСДИЗ = ПараметрыЗаполнения.ИмяПоляКорректируемыйСДИЗ;
	ИмяПоляОперацияСДИЗ       = ПараметрыЗаполнения.ИмяПоляОперацияСДИЗ;
	
	СтрокаТовары             = ПараметрыЗаполнения.СтрокаТовары;
	РеквизитыОрганизаций     = ПараметрыЗаполнения.РеквизитыОрганизаций;
	СвязанныеДокументыПрочие = ПараметрыЗаполнения.СвязанныеДокументыПрочие;
	ДокументыСертификации    = ПараметрыЗаполнения.ДокументыСертификации;
	
	ДанныеДополненияАдресаКлючаАдресов = ПараметрыЗаполнения.ДанныеДополненияАдресаКлючаАдресов;
	
	ОформлениеСДИЗXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяСвойстваЗапроса);
	
	ЭлементСДИЗXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяПоляОперацияСДИЗ, ОформлениеСДИЗXDTO);
	
	Если Шапка.Реализация Тогда
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементСДИЗXDTO, "OperationSDIZ", "REALIZATION", АбстрактноеСообщениеXML);
	КонецЕсли;
	
	Если Шапка.Перевозка Тогда
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементСДИЗXDTO, "OperationSDIZ", "SHIPPING", АбстрактноеСообщениеXML);
	Иначе
		Если Шапка.Приемка Тогда
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементСДИЗXDTO, "OperationSDIZ", "ACCEPTANCE", АбстрактноеСообщениеXML);
		КонецЕсли;
		Если Шапка.Отгрузка Тогда
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементСДИЗXDTO, "OperationSDIZ", "SHIPMENT", АбстрактноеСообщениеXML);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыЗаполнения.Вставить("Шапка", Шапка);
	
	Если Шапка.Реализация Тогда
		
		ЭлементРеализацияXDTO = РеализацияОформлениеСДИЗXDTO(ПараметрыЗаполнения, ЭлементСДИЗXDTO, ПространствоИмен, АбстрактноеСообщениеXML, ПараметрыОбмена);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементСДИЗXDTO, "Realization", ЭлементРеализацияXDTO, АбстрактноеСообщениеXML);
		
	КонецЕсли;
	
	Если Шапка.Перевозка Тогда
		
		ЭлементПеревозкаXDTO = ПеревозкаОформлениеСДИЗXDTO(ПараметрыЗаполнения, ЭлементСДИЗXDTO, ПространствоИмен, АбстрактноеСообщениеXML, ПараметрыОбмена);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементСДИЗXDTO, "Shipping", ЭлементПеревозкаXDTO, АбстрактноеСообщениеXML);
		
	Иначе
		
		Если Шапка.Приемка Тогда
			
			ЭлементПриемкаXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Acceptance", ЭлементСДИЗXDTO);
			
			ЗаполнитьГрузополучательXDTO(ЭлементПриемкаXDTO, Шапка, ПараметрыЗаполнения.РеквизитыОрганизаций, АбстрактноеСообщениеXML, ПараметрыОбмена);
			
			// AddressRFType
			ПунктНазначенияXDTO = ИнтеграцияЗЕРНОСлужебный.АдресРФXDTO(Шапка.ПунктНазначения, Шапка.ПунктНазначенияСтрокой, АбстрактноеСообщениеXML, ПараметрыОбмена);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементПриемкаXDTO, "ConsigneeAddress", ПунктНазначенияXDTO, АбстрактноеСообщениеXML);
			
			Если Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.Зерно Тогда
				ЗаполнитьЭлеваторXDTO(
					ЭлементПриемкаXDTO,
					Шапка.ЭлеваторПолучатель,
					Шапка.ЭлеваторПолучательИдентификатор,
					ПространствоИмен,
					АбстрактноеСообщениеXML)
			КонецЕсли;
			
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементСДИЗXDTO, "Acceptance", ЭлементПриемкаXDTO, АбстрактноеСообщениеXML);
			
		КонецЕсли;
		
		Если Шапка.Отгрузка Тогда
			
			ЭлементОтгрузкаXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Shipment", ЭлементСДИЗXDTO);
			
			ЗаполнитьГрузоотправительXDTO(ЭлементОтгрузкаXDTO, Шапка, РеквизитыОрганизаций, АбстрактноеСообщениеXML, ПараметрыОбмена);
			
			Если ТипЗнч(СтрокаТовары.ОператорыАдреса) = Тип("ТаблицаЗначений") Тогда 
				ДанныеДополненияАдресаКлючаАдресов.ОператорыАдреса = СтрокаТовары.ОператорыАдреса.ВыгрузитьКолонку("СкладКонтрагент");
			ИначеЕсли ТипЗнч(СтрокаТовары.ОператорыАдреса) = Тип("РезультатЗапроса") Тогда
				ДанныеДополненияАдресаКлючаАдресов.ОператорыАдреса = СтрокаТовары.ОператорыАдреса.Выгрузить().ВыгрузитьКолонку("СкладКонтрагент");
			КонецЕсли;
			
			// AddressRFType
			ДанныеКлючаАдреса = ИнтеграцияЗЕРНОСлужебный.ДанныеКлючаАдреса();
			ДанныеКлючаАдреса.АдресСтрокой        = СтрокаТовары.МестоположениеСтрокой;
			ДанныеКлючаАдреса.Индекс              = СтрокаТовары.МестоположениеИндекс;
			ДанныеКлючаАдреса.ИдентификаторАдреса = СтрокаТовары.ИдентификаторАдреса;
			ДанныеКлючаАдреса.ОКТМО               = СтрокаТовары.ОКТМО;
			ПунктОтправленияXDTO = ИнтеграцияЗЕРНОСлужебный.АдресРФПоКлючуАдресовXDTO(
				ДанныеКлючаАдреса,
				АбстрактноеСообщениеXML,
				ПараметрыОбмена,,
				ДанныеДополненияАдресаКлючаАдресов);
			
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементОтгрузкаXDTO, "ShipperAddress", ПунктОтправленияXDTO, АбстрактноеСообщениеXML);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементСДИЗXDTO,  "Shipment", ЭлементОтгрузкаXDTO, АбстрактноеСообщениеXML);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// DocOtherNumberDateType - иные сопроводительные документы при перевозке.
	Если СвязанныеДокументыПрочие.Количество() И (Шапка.Отгрузка Или Шапка.Приемка Или Шапка.Перевозка) Тогда
		
		ПараметрыРасширенияТипаXDTO = Новый Структура("KindDoc", "ТипДокумента");
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьТаблицуДокументНомерДатаXDTO(
			СвязанныеДокументыПрочие,
			ПараметрыРасширенияТипаXDTO,
			"OtherTransportDocument",
			ЭлементСДИЗXDTO,
			ПространствоИмен,
			АбстрактноеСообщениеXML);
		
	КонецЕсли;
	
	ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ОформлениеСДИЗXDTO, ИмяПоляОперацияСДИЗ, ЭлементСДИЗXDTO, АбстрактноеСообщениеXML);
	
	ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ОформлениеСДИЗXDTO, ИмяПоляНомерПартии, СтрокаТовары.НомерПартии, АбстрактноеСообщениеXML);
	
	Если ЗначениеЗаполнено(СтрокаТовары.КорректируемыйСДИЗИдентификатор) Тогда
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
			ОформлениеСДИЗXDTO, ИмяПоляКорректируемыйСДИЗ, СтрокаТовары.КорректируемыйСДИЗИдентификатор, АбстрактноеСообщениеXML);
	КонецЕсли;
	
	ЗаполнитьДокументыСертификации(
		ОформлениеСДИЗXDTO,
		ДокументыСертификации,
		СтрокаТовары.ИдентификаторСтроки,
		ПространствоИмен,
		АбстрактноеСообщениеXML);
	
	Возврат ОформлениеСДИЗXDTO;
	
КонецФункции

Функция РеализацияОформлениеСДИЗXDTO(ДанныеЗаполнения, ЭлементСДИЗXDTO, ПространствоИмен, СообщениеXML, ПараметрыОбмена)
	
	ТаблицаИсточникиРеквизитов = ДанныеЗаполнения.РеквизитыОрганизаций;
	Шапка                      = ДанныеЗаполнения.Шапка;
	СвязанныеДокументы         = ДанныеЗаполнения.СвязанныеДокументы;
	
	ИсточникДанных = ИнтеграцияЗЕРНО.РеквизитыОрганизацииКонтрагента(
		ТаблицаИсточникиРеквизитов, Шапка.Организация, Шапка.Подразделение);
	
	ЭлементXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Realization", ЭлементСДИЗXDTO);
	ПродавецXDTO = ИнтеграцияЗЕРНОСлужебный.ОрганизацияКонтрагентXDTO(
		ИсточникДанных,
		СообщениеXML,
		ПараметрыОбмена,
		СтрШаблон(НСтр("ru = 'Организация %1'"), Шапка.ОрганизацияПредставление));
	
	ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементXDTO, "Seller", ПродавецXDTO, СообщениеXML);
	
	ИсточникДанных = ИнтеграцияЗЕРНО.РеквизитыОрганизацииКонтрагента(
		ТаблицаИсточникиРеквизитов, Шапка.Покупатель, Шапка.ПодразделениеПокупателя);
	
	ПокупательXDTO = ИнтеграцияЗЕРНОСлужебный.ОрганизацияКонтрагентXDTO(
		ИсточникДанных,
		СообщениеXML,
		ПараметрыОбмена,
		СтрШаблон(НСтр("ru = 'Покупатель %1'"), Шапка.ПокупательПредставление));
	
	ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементXDTO, "Buyer", ПокупательXDTO, СообщениеXML);
	
	// DocNumberDateType
	ДокументГПДXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Contract", ЭлементXDTO);
	ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ДокументГПДXDTO, "number", СокрЛП(Шапка.НомерГПД), СообщениеXML);
	ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ДокументГПДXDTO, "date", Формат(Шапка.ДатаГПД, "ДФ=yyyy-MM-dd;"), СообщениеXML);
	ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементXDTO, "Contract", ДокументГПДXDTO, СообщениеXML);
	
	Если СвязанныеДокументы.Количество() Тогда
		
		ПараметрыРасширенияТипаXDTO = Новый Структура("KindDoc", "ИдентификаторТипДокумента");
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьТаблицуДокументНомерДатаXDTO(
			СвязанныеДокументы,
			ПараметрыРасширенияТипаXDTO,
			"ConfirmingDocument",
			ЭлементXDTO,
			ПространствоИмен,
			СообщениеXML);
		
	КонецЕсли;
	
	Если Шапка.ЗакупкаЕИС Тогда
		
		// GovernmentPurchaseType
		ЗакупкаЕИСXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "GovernmentPurchase", ЭлементXDTO);
		
		// DocNumberDateType
		ГосКонтрактXDTO =  РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "GovernmentContract", ЗакупкаЕИСXDTO);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ГосКонтрактXDTO, "number", СокрЛП(Шапка.НомерГосКонтракта), СообщениеXML);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ГосКонтрактXDTO, "date", Формат(Шапка.ДатаГосКонтракта, "ДФ=yyyy-MM-dd;"), СообщениеXML);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ГосКонтрактXDTO, "GovernmentContract", ГосКонтрактXDTO, СообщениеXML);
		
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЗакупкаЕИСXDTO, "numberGovernmentPurchase", СокрЛП(Шапка.НомерЗакупкиЕИС), СообщениеXML);
		
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементXDTO, "GovernmentContract", ЗакупкаЕИСXDTO, СообщениеXML);
		
	КонецЕсли;
	
	Возврат ЭлементXDTO;
	
КонецФункции

Функция ПеревозкаОформлениеСДИЗXDTO(ДанныеЗаполнения, ЭлементСДИЗXDTO, ПространствоИмен, СообщениеXML, ПараметрыОбмена)
	
	ТаблицаИсточникиРеквизитов = ДанныеЗаполнения.РеквизитыОрганизаций;
	Шапка                = ДанныеЗаполнения.Шапка;
	Перевозчики          = ДанныеЗаполнения.Перевозчики;
	МестаПерегрузки      = ДанныеЗаполнения.МестаПерегрузки;
	ТранспортныеСредства = ДанныеЗаполнения.ТранспортныеСредства;
	СтрокаТовары         = ДанныеЗаполнения.СтрокаТовары;
	
	ЭлементXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Shipping", ЭлементСДИЗXDTO);
	
	ЗаполнитьГрузоотправительXDTO(ЭлементXDTO, Шапка, ТаблицаИсточникиРеквизитов, СообщениеXML, ПараметрыОбмена);
	
	// Дополнить ГУИД и ОКТМО ключа адресов партии данными сопоставленных операторов адреса или пункта отправления
	ДанныеДополненияАдресаКлючаАдресов = ДанныеЗаполнения.ДанныеДополненияАдресаКлючаАдресов;
	Если ТипЗнч(СтрокаТовары.ОператорыАдреса) = Тип("ТаблицаЗначений") Тогда 
		ДанныеДополненияАдресаКлючаАдресов.ОператорыАдреса = СтрокаТовары.ОператорыАдреса.ВыгрузитьКолонку("СкладКонтрагент");
	ИначеЕсли ТипЗнч(СтрокаТовары.ОператорыАдреса) = Тип("РезультатЗапроса") Тогда
		ДанныеДополненияАдресаКлючаАдресов.ОператорыАдреса = СтрокаТовары.ОператорыАдреса.Выгрузить().ВыгрузитьКолонку("СкладКонтрагент");
	КонецЕсли;
	// AddressComplexType, возможен РФ или иностранный адрес
	ДанныеКлючаАдреса = ИнтеграцияЗЕРНОСлужебный.ДанныеКлючаАдреса();
	ДанныеКлючаАдреса.АдресСтрокой        = СтрокаТовары.МестоположениеСтрокой;
	ДанныеКлючаАдреса.Индекс              = СтрокаТовары.МестоположениеИндекс;
	ДанныеКлючаАдреса.ИдентификаторАдреса = СтрокаТовары.ИдентификаторАдреса;
	ДанныеКлючаАдреса.ОКТМО               = СтрокаТовары.ОКТМО;
	ПунктОтправленияXDTO = ИнтеграцияЗЕРНОСлужебный.АдресПеревозкиXDTO(
		ДанныеКлючаАдреса,
		СообщениеXML,
		ПараметрыОбмена,
		Истина,
		ДанныеДополненияАдресаКлючаАдресов);
	ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементXDTO, "ShipperAddress", ПунктОтправленияXDTO, СообщениеXML);
	
	ЗаполнитьГрузополучательXDTO(ЭлементXDTO, Шапка, ТаблицаИсточникиРеквизитов, СообщениеXML, ПараметрыОбмена);
	
	ДанныеКлючаАдреса = ИнтеграцияЗЕРНОСлужебный.ДанныеКлючаАдреса();
	ДанныеКлючаАдреса.АдресСтрокой        = Шапка.ПунктНазначения;
	ДанныеКлючаАдреса.Индекс              = Шапка.ПунктНазначенияСтрокой;
	ПунктНазначенияXDTO = ИнтеграцияЗЕРНОСлужебный.АдресПеревозкиXDTO(ДанныеКлючаАдреса, СообщениеXML, ПараметрыОбмена);
	ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементXDTO, "ConsigneeAddress", ПунктНазначенияXDTO, СообщениеXML);
	
	Если Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.Зерно Тогда
		ЗаполнитьЭлеваторXDTO(
			ЭлементXDTO,
			Шапка.ЭлеваторПолучатель,
			Шапка.ЭлеваторПолучательИдентификатор,
			ПространствоИмен,
			СообщениеXML)
	КонецЕсли;
	
	// CarrierBlockType
	ПеревозчикиXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "CarrierBlock", ЭлементXDTO);
	
	ПараметрыОтбора = Новый Структура("Перевозчик, Подразделение");
	
	Для Каждого СтрокаПеревозчика Из Перевозчики Цикл
		
		ИсточникДанных = ИнтеграцияЗЕРНО.РеквизитыОрганизацииКонтрагента(
			ТаблицаИсточникиРеквизитов, СтрокаПеревозчика.Перевозчик, СтрокаПеревозчика.Подразделение);
		
		ПеревозчикXDTO = ИнтеграцияЗЕРНОСлужебный.ОрганизацияКонтрагентXDTO(
			ИсточникДанных,
			СообщениеXML,
			ПараметрыОбмена,
			СтрШаблон(НСтр("ru = 'Перевозчик %1'"), СтрокаПеревозчика.ПеревозчикПредставление));
		
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ПеревозчикиXDTO, "Carrier", ПеревозчикXDTO, СообщениеXML);
		
		ПараметрыОтбора.Перевозчик    = СтрокаПеревозчика.Перевозчик;
		ПараметрыОтбора.Подразделение = СтрокаПеревозчика.Подразделение;
		
		СтрокиМестПерегрузки = МестаПерегрузки.НайтиСтроки(ПараметрыОтбора);
		Для Каждого СтрокаМестаПерегрузки Из СтрокиМестПерегрузки Цикл
			
			//AddressRFType
			АдресXDTO = ИнтеграцияЗЕРНОСлужебный.АдресРФXDTO(СтрокаМестаПерегрузки.Адрес, СтрокаМестаПерегрузки.АдресСтрокой, СообщениеXML, ПараметрыОбмена);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ПеревозчикиXDTO, "CarrierAddress", АдресXDTO, СообщениеXML);
			
		КонецЦикла;
		
		СтрокиТранспортныхСредств = ТранспортныеСредства.НайтиСтроки(ПараметрыОтбора);
		
		Для Каждого СтрокаТС Из СтрокиТранспортныхСредств Цикл
			
			// TransportInfoType
			ТранспортXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "TransportInfo", ПеревозчикиXDTO);
			
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ТранспортXDTO, "TransportCode", Строка(СтрокаТС.ТипТранспорта), СообщениеXML);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ТранспортXDTO, "numberTransport", СтрокаТС.НомерТранспортногоСредства, СообщениеXML);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ТранспортXDTO, "numberContainer", СтрокаТС.НомерАвтомобильногоКонтейнера, СообщениеXML);
			
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ПеревозчикиXDTO, "TransportInfo", ТранспортXDTO, СообщениеXML);
			
		КонецЦикла;
		
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ПеревозчикиXDTO, "Carrier", ПеревозчикXDTO, СообщениеXML);
		
	КонецЦикла;
	
	ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементXDTO, "CarrierBlock", ПеревозчикиXDTO, СообщениеXML);
	ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементСДИЗXDTO,  "Shipping", ЭлементXDTO, СообщениеXML);
	
	Возврат ЭлементXDTO;
	
КонецФункции

Функция ДополнительныеСведенияИмпортЭкспортXDTO(ДанныеЗаполнения, ЭлементСДИЗXDTO, ПространствоИмен, СообщениеXML, ПараметрыОбмена)
	
	ТаблицаИсточникиРеквизитов = ДанныеЗаполнения.РеквизитыОрганизаций;
	Шапка                      = ДанныеЗаполнения.Шапка;
	СтрокаТовары               = ДанныеЗаполнения.СтрокаТовары;
	
	ЭлементXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "AdditionalInformationImportExport", ЭлементСДИЗXDTO);
	
	// В текущей схеме нет ревизитов для НомерТаможеннойДекларации
	
	Если ЗначениеЗаполнено(СтрокаТовары.Лаборатория) Тогда
		ИсточникДанных = ИнтеграцияЗЕРНО.РеквизитыОрганизацииКонтрагента(
			ТаблицаИсточникиРеквизитов, СтрокаТовары.Лаборатория);
		ПредставлениеИсточника = СтрШаблон(НСтр("ru = 'Лаборатория %1'"), СтрокаТовары.ЛабораторияПредставление);
	Иначе
		ИсточникДанных = ИнтеграцияЗЕРНО.РеквизитыОрганизацииКонтрагента(
			ТаблицаИсточникиРеквизитов, Шапка.Лаборатория);
		ПредставлениеИсточника = СтрШаблон(НСтр("ru = 'Лаборатория %1'"), Шапка.ЛабораторияПредставление);
	КонецЕсли;
	
	ЛабораторияXDTO = ИнтеграцияЗЕРНОСлужебный.ОрганизацияКонтрагентXDTO(
		ИсточникДанных,
		СообщениеXML,
		ПараметрыОбмена,
		ПредставлениеИсточника);
	
	ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементXDTO, "AccreditedLaboratory", ЛабораторияXDTO, СообщениеXML);
	
	ПротоколИспытанийXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "TestProtocol", ЭлементXDTO);
	Если ЗначениеЗаполнено(СтрокаТовары.НомерПротоколаИспытаний) Тогда
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ПротоколИспытанийXDTO, "number", СокрЛП(СтрокаТовары.НомерПротоколаИспытаний), СообщениеXML);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ПротоколИспытанийXDTO, "date", Формат(СтрокаТовары.ДатаПротоколаИспытаний, "ДФ=yyyy-MM-dd;"), СообщениеXML);
	ИначеЕсли ЗначениеЗаполнено(Шапка.НомерПротоколаИспытаний) Тогда
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ПротоколИспытанийXDTO, "number", СокрЛП(Шапка.НомерПротоколаИспытаний), СообщениеXML);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ПротоколИспытанийXDTO, "date", Формат(Шапка.ДатаПротоколаИспытаний, "ДФ=yyyy-MM-dd;"), СообщениеXML);
	КонецЕсли;
	ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементXDTO, "TestProtocol", ПротоколИспытанийXDTO, СообщениеXML);
	
	КонтрактВЭДXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "ContractVED", ЭлементXDTO);
	Если ЗначениеЗаполнено(Шапка.НомерКонтрактаВЭД) Тогда
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(КонтрактВЭДXDTO, "number", СокрЛП(Шапка.НомерКонтрактаВЭД), СообщениеXML);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(КонтрактВЭДXDTO, "date", Формат(Шапка.ДатаКонтрактаВЭД, "ДФ=yyyy-MM-dd;"), СообщениеXML);
	КонецЕсли;
	ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементXDTO, "ContractVED", КонтрактВЭДXDTO, СообщениеXML);
	
	Если ЗначениеЗаполнено(Шапка.ДатаДопСоглашенияВЭД) Тогда
		ДопСоглашениеВЭДXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "AdditionalAgreement", ЭлементXDTO);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ДопСоглашениеВЭДXDTO, "number", СокрЛП(Шапка.НомерДопСоглашенияВЭД), СообщениеXML);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ДопСоглашениеВЭДXDTO, "date", Формат(Шапка.ДатаДопСоглашенияВЭД, "ДФ=yyyy-MM-dd;"), СообщениеXML);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементXDTO, "AdditionalAgreement", ДопСоглашениеВЭДXDTO, СообщениеXML);
	КонецЕсли;
	
	Возврат ЭлементXDTO;
	
КонецФункции

Процедура ЗаполнитьГрузополучательXDTO(ЭлементXDTO, Шапка, ТаблицаИсточникиРеквизитов, СообщениеXML, ПараметрыОбмена)
	
	Если ЗначениеЗаполнено(Шапка.Грузополучатель) Тогда
		ИсточникДанных = ИнтеграцияЗЕРНО.РеквизитыОрганизацииКонтрагента(
			ТаблицаИсточникиРеквизитов, Шапка.Грузополучатель, Шапка.ПодразделениеГрузополучателя);
		ПредставлениеИсточника = СтрШаблон(НСтр("ru = 'Грузополучатель %1'"), Шапка.ГрузополучательПредставление);
	ИначеЕсли Шапка.Реализация И ЗначениеЗаполнено(Шапка.Покупатель) Тогда
		ИсточникДанных = ИнтеграцияЗЕРНО.РеквизитыОрганизацииКонтрагента(
			ТаблицаИсточникиРеквизитов, Шапка.Покупатель, Шапка.ПодразделениеПокупателя);
		ПредставлениеИсточника = СтрШаблон(НСтр("ru = 'Покупатель %1'"), Шапка.ПокупательПредставление);
	Иначе
		ИсточникДанных = ИнтеграцияЗЕРНО.РеквизитыОрганизацииКонтрагента(
			ТаблицаИсточникиРеквизитов, Шапка.Организация, Шапка.Подразделение);
		ПредставлениеИсточника = СтрШаблон(НСтр("ru = 'Организация %1'"), Шапка.ОрганизацияПредставление);
	КонецЕсли;
	
	ГрузополучательXDTO = ИнтеграцияЗЕРНОСлужебный.ОрганизацияКонтрагентXDTO(
		ИсточникДанных,
		СообщениеXML,
		ПараметрыОбмена,
		ПредставлениеИсточника);
	ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементXDTO, "Consignee", ГрузополучательXDTO, СообщениеXML);
	
КонецПроцедуры

Процедура ЗаполнитьЭлеваторXDTO(ЭлементXDTO, Элеватор, Идентификатор, ПространствоИмен, СообщениеXML)
	
	Если ЗначениеЗаполнено(Элеватор) Тогда
		// ElevatorNumberType
		ЭлеваторXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(
			ПространствоИмен, "ConsigneeElevatorNumber", ЭлементXDTO);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
			ЭлеваторXDTO, "number", Идентификатор, СообщениеXML);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
			ЭлементXDTO, "ConsigneeElevatorNumber", ЭлеваторXDTO, СообщениеXML);
	Конецесли;
	
КонецПроцедуры

Процедура ЗаполнитьГрузоотправительXDTO(ЭлементXDTO, Шапка, ТаблицаИсточникиРеквизитов, СообщениеXML, ПараметрыОбмена)
	
	Если ЗначениеЗаполнено(Шапка.Грузоотправитель) Тогда
		ИсточникДанных = ИнтеграцияЗЕРНО.РеквизитыОрганизацииКонтрагента(
			ТаблицаИсточникиРеквизитов, Шапка.Грузоотправитель, Шапка.ПодразделениеГрузоотправителя);
		ПредставлениеИсточника = СтрШаблон(НСтр("ru = 'Грузоотправитель %1'"), Шапка.ГрузоотправительПредставление);
	Иначе
		ИсточникДанных = ИнтеграцияЗЕРНО.РеквизитыОрганизацииКонтрагента(
			ТаблицаИсточникиРеквизитов, Шапка.Организация, Шапка.Подразделение);
		ПредставлениеИсточника = СтрШаблон(НСтр("ru = 'Организация %1'"), Шапка.ОрганизацияПредставление);
	КонецЕсли;
	
	ГрузоотправительXDTO = ИнтеграцияЗЕРНОСлужебный.ОрганизацияКонтрагентXDTO(
		ИсточникДанных,
		СообщениеXML,
		ПараметрыОбмена,
		ПредставлениеИсточника);
	ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементXDTO, "Shipper", ГрузоотправительXDTO, СообщениеXML);
	
КонецПроцедуры

#Область ОбработкаЗаполнения

Процедура ЗаполнитьПервичныеДокументыСертификации(Объект, КоллекцияСтрокТоваров) Экспорт
	
	ПараметрыПостроенияДерева = Справочники.РеестрПартийЗЕРНО.ПараметрыПостроенияДереваПартий();
	ПараметрыПостроенияДерева.ТребуютсяСвязанныеДокументы = Истина;
	
	СоответствиеСтрокТоваровПартиям = Новый Соответствие();
	
	Для Каждого СтрокаТаблицы Из КоллекцияСтрокТоваров Цикл
		
		СтруктураПоиска = Новый Структура("ИдентификаторСтрокиТоваров", СтрокаТаблицы.Идентификатор);
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Партия)
			Или Объект.ДокументыСертификации.НайтиСтроки(СтруктураПоиска).Количество() Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыПостроенияДерева.ИсходныеПартии.Добавить(СтрокаТаблицы.Партия);
		
		СтрокиТоваров = СоответствиеСтрокТоваровПартиям[СтрокаТаблицы.Партия];
		Если СтрокиТоваров = Неопределено Тогда
			СтрокиТоваров = Новый Массив;
			СоответствиеСтрокТоваровПартиям[СтрокаТаблицы.Партия] = СтрокиТоваров;
		КонецЕсли;
		
		СтрокиТоваров.Добавить(СтрокаТаблицы);
		
	КонецЦикла;
	
	Если ПараметрыПостроенияДерева.ИсходныеПартии.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоПартий = Справочники.РеестрПартийЗЕРНО.ДеревоПартий(ПараметрыПостроенияДерева);
	
	Для Каждого СтрокаДерева Из ДеревоПартий.Строки Цикл
		
		ДокументыСертификации = ДокументыСертификацииПоДеревуПартий(СтрокаДерева);
		
		Если ДокументыСертификации <> Неопределено Тогда
			ДобавитьПервичныйДокументПоПартии(
				Объект, СтрокаДерева.Партия, ДокументыСертификации, СоответствиеСтрокТоваровПартиям);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДокументыСертификацииПоДеревуПартий(СтрокаДерева)
	
	Если СтрокаДерева.ДокументыСертификации.Количество() Тогда
		Возврат СтрокаДерева.ДокументыСертификации;
	ИначеЕсли СтрокаДерева.Строки.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеПриоритета = Новый Структура("Количество, ДокументыСертификации", -1);
	
	Для Каждого ВложеннаяСтрока Из СтрокаДерева.Строки Цикл
		ДокументыСертификации = ДокументыСертификацииПоДеревуПартий(ВложеннаяСтрока);
		Если ДокументыСертификации <> Неопределено
			И ВложеннаяСтрока.Количество > ДанныеПриоритета.Количество Тогда
			ДанныеПриоритета.ДокументыСертификации = ДокументыСертификации;
			ДанныеПриоритета.Количество            = ВложеннаяСтрока.Количество;
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеПриоритета.ДокументыСертификации = Неопределено
		Или ДанныеПриоритета.ДокументыСертификации.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат ДанныеПриоритета.ДокументыСертификации;
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьПервичныйДокументПоПартии(Объект, Партия, ДокументыСертификации, СоответствиеСтрокТоваровПартиям)
	
	Для Каждого СтрокаТаблицы Из СоответствиеСтрокТоваровПартиям[Партия] Цикл
		
		Для Каждого СтрокаДокументСертификации Из ДокументыСертификации Цикл
			
			НоваяСтрока = Объект.ДокументыСертификации.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокументСертификации);
			НоваяСтрока.ИдентификаторПроисхожденияВЕТИССтрокой = СтрокаДокументСертификации.ИдентификаторВЕТИС;
			НоваяСтрока.СерияВСД                               = СтрокаДокументСертификации.Серия;
			НоваяСтрока.ВидДокументаВСД                        = СтрокаДокументСертификации.ВидДокумента;
			НоваяСтрока.ИдентификаторСтрокиТоваров             = СтрокаТаблицы.Идентификатор;
			НоваяСтрока.ТипДокумента = Справочники.КлассификаторНСИЗЕРНО.ЭлементКлассификатораПоТипуПервичногоДокумента(
				СтрокаДокументСертификации.ТипДокумента);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьВСтрокахПартии(СписокСтрокДокумента, ПараметрыЗаполнения, РезультатЗаполнения)
	
	ТаблицаСоответствия = ПараметрыЗаполнения.ТаблицаСоответствия;
	ТаблицаДанных       = ПараметрыЗаполнения.ТаблицаДанных;
	
	Для каждого СтрокаДокумента Из СписокСтрокДокумента Цикл
		
		ОсталосьЗаполнить = СтрокаДокумента.КоличествоЗЕРНО;
		
		Если ЗначениеЗаполнено(СтрокаДокумента.Партия) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДокумента, "Номенклатура") Тогда
			
			СтруктураПоиска.Вставить("Номенклатура",   СтрокаДокумента.Номенклатура);
			СтруктураПоиска.Вставить("Характеристика", СтрокаДокумента.Характеристика);
			Если ЗначениеЗаполнено(СтрокаДокумента.Серия) Тогда
				СтруктураПоиска.Вставить("Серия", СтрокаДокумента.Серия);
			КонецЕсли;
		
		ИначеЕсли ПараметрыЗаполнения.ПартииКорректировки Тогда
			
			СтрокаТаблицыДанных = ТаблицаДанных.Найти(СтрокаДокумента.КорректируемыйСДИЗ, "КорректируемыйСДИЗ");
			Если СтрокаТаблицыДанных = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураПоиска.Вставить("Номенклатура",   СтрокаТаблицыДанных.Номенклатура);
			СтруктураПоиска.Вставить("Характеристика", СтрокаТаблицыДанных.Характеристика);
			Если ЗначениеЗаполнено(СтрокаТаблицыДанных.Серия) Тогда
				СтруктураПоиска.Вставить("Серия", СтрокаТаблицыДанных.Серия);
			КонецЕсли;
			
		Иначе
			Продолжить;
		КонецЕсли;
		
		СписокСтрокСоответствия = ТаблицаСоответствия.НайтиСтроки(СтруктураПоиска);
		
		ЗаполнитьПартииПоСтрокеДокументаИСоответствию(
			СтрокаДокумента,
			СписокСтрокСоответствия,
			ПараметрыЗаполнения,
			ОсталосьЗаполнить,
			РезультатЗаполнения);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПартииПоСтрокеДокументаИСоответствию(СтрокаДокумента, СписокСтрокСоответствия, ПараметрыЗаполнения, ОсталосьЗаполнить, РезультатЗаполнения)
	
	Для каждого СтрокаСоответствие Из СписокСтрокСоответствия Цикл
		
		ЗаполнитьПартиюПоСтрокеДокумента(
			СтрокаДокумента,
			СтрокаСоответствие.Партия,
			ПараметрыЗаполнения,
			ОсталосьЗаполнить,
			РезультатЗаполнения);
			
		Если ОсталосьЗаполнить = 0 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПартиюПоСтрокеДокумента(СтрокаДокумента, Партия, ПараметрыЗаполнения, ОсталосьЗаполнить, РезультатЗаполнения)

	Товары = ПараметрыЗаполнения.Товары;
	ТаблицаОстатки = ПараметрыЗаполнения.ТаблицаОстатки;
	
	Отбор = Новый Структура("Партия", Партия);
	ОстаткиПоПартии = ТаблицаОстатки.НайтиСтроки(Отбор);
	Для Каждого СтрокаОстатки Из ОстаткиПоПартии Цикл
		
		Если СтрокаОстатки.КоличествоЗЕРНО <= 0 Тогда
			Продолжить;
		ИначеЕсли ОсталосьЗаполнить = 0 Тогда
			Прервать;
		ИначеЕсли ПараметрыЗаполнения.ЭтоППЗ
			И ПараметрыЗаполнения.ПартииКорректировки Тогда
			
			СтрокаТаблицыДанных = ПараметрыЗаполнения.ТаблицаДанных.Найти(СтрокаДокумента.КорректируемыйСДИЗ, "КорректируемыйСДИЗ");
			Если СтрокаТаблицыДанных = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаТаблицыДанных.ОКПД2 <> СтрокаОстатки.ОКПД2 Тогда
				Продолжить;
			КонецЕсли;
		
		ИначеЕсли ПараметрыЗаполнения.ЭтоППЗ
				И ЗначениеЗаполнено(СтрокаДокумента.ОКПД2)
				И СтрокаДокумента.ОКПД2 <> СтрокаОстатки.ОКПД2 Тогда
			Продолжить;
		КонецЕсли;
		
		// Выделим новую строку если остатка не хватит
		Если СтрокаОстатки.КоличествоЗЕРНО < ОсталосьЗаполнить Тогда
			
			НоваяСтрока = Товары.Вставить(Товары.Индекс(СтрокаДокумента) + 1);
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумента);
			НоваяСтрока.Партия = СтрокаОстатки.Партия;
			НоваяСтрока.Идентификатор = Строка(Новый УникальныйИдентификатор);

			Коэффициент = СтрокаОстатки.КоличествоЗЕРНО / НоваяСтрока.КоличествоЗЕРНО;
			НоваяСтрока.КоличествоЗЕРНО = СтрокаОстатки.КоличествоЗЕРНО;
			НоваяСтрока.Количество = НоваяСтрока.Количество * Коэффициент;
			Если ПараметрыЗаполнения.ЗаполнитьОстаткиПартии Тогда
				НоваяСтрока.КоличествоОстатокПартииЗЕРНО = СтрокаОстатки.КоличествоОстатокПартииЗЕРНО;
			КонецЕсли;
			
			СтрокаДокумента.КоличествоЗЕРНО = СтрокаДокумента.КоличествоЗЕРНО - НоваяСтрока.КоличествоЗЕРНО;
			СтрокаДокумента.Количество = СтрокаДокумента.Количество - НоваяСтрока.Количество;
			
			ОсталосьЗаполнить = ОсталосьЗаполнить - СтрокаОстатки.КоличествоЗЕРНО;
			СтрокаОстатки.КоличествоЗЕРНО = 0;
			
			РезультатЗаполнения.ВсегоСтрок = РезультатЗаполнения.ВсегоСтрок + 1;
			РезультатЗаполнения.ИзмененныеСтроки.Добавить(НоваяСтрока);
			
		Иначе
			
			СтрокаДокумента.Партия = СтрокаОстатки.Партия;
			Коэффициент = ОсталосьЗаполнить / СтрокаДокумента.КоличествоЗЕРНО;
			СтрокаДокумента.КоличествоЗЕРНО = ОсталосьЗаполнить;
			СтрокаДокумента.Количество = СтрокаДокумента.Количество * Коэффициент;
			Если ПараметрыЗаполнения.ЗаполнитьОстаткиПартии Тогда
				СтрокаДокумента.КоличествоОстатокПартииЗЕРНО = СтрокаОстатки.КоличествоОстатокПартииЗЕРНО;
			КонецЕсли;
			
			ОсталосьЗаполнить = 0;
			СтрокаОстатки.КоличествоЗЕРНО = СтрокаОстатки.КоличествоЗЕРНО - СтрокаДокумента.КоличествоЗЕРНО;
			РезультатЗаполнения.ИзмененныеСтроки.Добавить(СтрокаДокумента);
			
		КонецЕсли;
		
		РезультатЗаполнения.ЗаполненоСтрок = РезультатЗаполнения.ЗаполненоСтрок + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьСообщениеОЗавершенииЗаполненияПартий(РезультатЗаполнения)
	
	ОбновитьСтатус = Ложь;
	
	Если РезультатЗаполнения = Неопределено Тогда
		
		ЗаголовокСообщения = НСтр("ru = 'Заполнение не выполнено'");
		ТекстСообщения = НСтр("ru = 'Требуется заполнить реквизит Номенклатура'");
		КартинкаСообщения = БиблиотекаКартинок.Предупреждение32;
		
	ИначеЕсли РезультатЗаполнения.ВсегоСтрок = 0 Тогда
		
		ЗаголовокСообщения = "";
		ТекстСообщения = НСтр("ru = 'Заполнение не требуется'");
		КартинкаСообщения = БиблиотекаКартинок.Информация32;
		
	ИначеЕсли РезультатЗаполнения.ВсегоСтрок = РезультатЗаполнения.ЗаполненоСтрок Тогда
		
		ЗаголовокСообщения = "";
		ТекстСообщения = НСтр("ru = 'Заполнение успешно завершено'");
		КартинкаСообщения = БиблиотекаКартинок.Успешно32;
		ОбновитьСтатус = Истина;
		
	ИначеЕсли РезультатЗаполнения.ПроблемныхСтрок = РезультатЗаполнения.ВсегоСтрок Тогда
		
		ЧастиСтрок = Новый Массив;
		ЧастиСтрок.Добавить(НСтр("ru = 'Требуется заполнить'"));
		Если РезультатЗаполнения.НоменклатураНеЗаполнена > 0 И РезультатЗаполнения.КоличествоНеЗаполнено > 0 Тогда
			ЧастиСтрок.Добавить(НСтр("ru = 'реквизиты Номенклатура и Количество'"));
		ИначеЕсли РезультатЗаполнения.НоменклатураНеЗаполнена > 0 Тогда
			ЧастиСтрок.Добавить(НСтр("ru = 'реквизит Номенклатура'"));
		ИначеЕсли РезультатЗаполнения.КоличествоНеЗаполнено > 0 Тогда
			ЧастиСтрок.Добавить(НСтр("ru = 'реквизит Количество'"));
		КонецЕсли;
		
		ЗаголовокСообщения = НСтр("ru = 'Заполнение не выполнено'");
		ТекстСообщения = СтрСоединить(ЧастиСтрок, " ");
		КартинкаСообщения = БиблиотекаКартинок.Предупреждение32;
		
	ИначеЕсли РезультатЗаполнения.ЗаполненоСтрок <> 0 Тогда
		
		ЗаголовокСообщения = НСтр("ru = 'Заполнение выполнено частично'");
		
		Если РезультатЗаполнения.ПроблемныхСтрок <> 0 Тогда
			ТекстСообщения = НСтр("ru = 'Недостаточно остатков продукции и не заполнены обязательные реквизиты'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Недостаточно остатков продукции'");
		КонецЕсли; 
		КартинкаСообщения = БиблиотекаКартинок.Предупреждение32;
		
		ОбновитьСтатус = Истина;
		
	Иначе
		
		ЗаголовокСообщения = НСтр("ru = 'Заполнение не выполнено'");
		ТекстСообщения = НСтр("ru = 'Нет остатков продукции'");
		КартинкаСообщения = БиблиотекаКартинок.Предупреждение32;
		
	КонецЕсли;
	
	СообщениеПользователю = Новый Структура;
	СообщениеПользователю.Вставить("ЗаголовокСообщения", ЗаголовокСообщения);
	СообщениеПользователю.Вставить("ТекстСообщения", ТекстСообщения);
	СообщениеПользователю.Вставить("КартинкаСообщения", КартинкаСообщения);
	
	СообщениеПользователю.Вставить("ОбновитьСтатус", ОбновитьСтатус);
	
	РезультатЗаполнения.Вставить("СообщениеПользователю", СообщениеПользователю);
	
КонецПроцедуры

#КонецОбласти

Процедура ИнициализироватьСтруктуруПараметрыСообщенияДляСопоставленияПартии(ПараметрыЗапроса)
	
	ПараметрыЗапроса.Вставить("Местоположение");
	ПараметрыЗапроса.Вставить("ВладелецПартии");
	ПараметрыЗапроса.Вставить("Организация");
	ПараметрыЗапроса.Вставить("Производитель");
	ПараметрыЗапроса.Вставить("Элеватор");
	
КонецПроцедуры

Процедура ЗаполнитьДокументыСертификации(ОбъектXDTOРодитель, ДокументыСертификации, ИдентификаторСтроки, ПространствоИмен, СообщениеXML)
	
	ПараметрыОтбораПоСтроке = Новый Структура("ИдентификаторСтрокиТоваров", ИдентификаторСтроки);
	ИсточникДанных = ДокументыСертификации.НайтиСтроки(ПараметрыОтбораПоСтроке);
	
	Для Каждого ДокументСертификации Из ИсточникДанных Цикл
		
		Если ДокументСертификации.ТипДокумента = Справочники.КлассификаторНСИЗЕРНО.ДокументНаПартиюДекларацияСоответствия Тогда
			
			ДекларацияXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "DeclarationOfConformit", ОбъектXDTOРодитель);
			
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
				ДекларацияXDTO, "number", ДокументСертификации.Номер, СообщениеXML);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
				ДекларацияXDTO, "date", Формат(ДокументСертификации.Дата, "ДФ=yyyy-MM-dd;"), СообщениеXML);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
				ДекларацияXDTO, "dateEnd",Формат(ДокументСертификации.СрокДействия, "ДФ=yyyy-MM-dd;"), СообщениеXML);
			
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
				ОбъектXDTOРодитель, "DeclarationOfConformit", ДекларацияXDTO, СообщениеXML);
			
		ИначеЕсли ДокументСертификации.ТипДокумента = Справочники.КлассификаторНСИЗЕРНО.ДокументНаПартиюФитосанитарныйСертификат Тогда
			
			ФитосанитарныйСертификатXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "PhytosanitaryCertificate", ОбъектXDTOРодитель);
			
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
				ФитосанитарныйСертификатXDTO, "number", ДокументСертификации.Номер, СообщениеXML);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
				ФитосанитарныйСертификатXDTO, "date", Формат(ДокументСертификации.Дата, "ДФ=yyyy-MM-dd;"), СообщениеXML);
				
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
				ОбъектXDTOРодитель, "PhytosanitaryCertificate", ФитосанитарныйСертификатXDTO, СообщениеXML);
			
		ИначеЕсли ДокументСертификации.ТипДокумента = Справочники.КлассификаторНСИЗЕРНО.ДокументНаПартиюВетеринарныйСертификат Тогда
			
			ВетеринарныйСертификатXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "VeterinaryCertificate", ОбъектXDTOРодитель);
			
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
				ВетеринарныйСертификатXDTO, "KindDoc", ДокументСертификации.ВидДокументаВСД, СообщениеXML);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
				ВетеринарныйСертификатXDTO, "date", Формат(ДокументСертификации.Дата, "ДФ=yyyy-MM-dd;"), СообщениеXML);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
				ВетеринарныйСертификатXDTO, "number", ДокументСертификации.Номер, СообщениеXML);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
				ВетеринарныйСертификатXDTO, "series", ДокументСертификации.СерияВСД, СообщениеXML);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
				ВетеринарныйСертификатXDTO, "uuid", ДокументСертификации.ИдентификаторПроисхожденияВЕТИССтрокой, СообщениеXML);
			
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
				ОбъектXDTOРодитель, "VeterinaryCertificate", ВетеринарныйСертификатXDTO, СообщениеXML);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТребуетсяСформироватьПартии(Документ)
	
	Результат = Ложь;
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ОформлениеСДИЗЗЕРНО") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ОформлениеСДИЗЗЕРНОТовары.Ссылка.Проведен КАК Проведен,
		|	КОЛИЧЕСТВО(ОформлениеСДИЗЗЕРНОТовары.НомерСтроки) КАК КоличествоСтрок,
		|	ОформлениеСДИЗЗЕРНОТовары.Партия КАК Партия,
		|	СУММА(ОформлениеСДИЗЗЕРНОТовары.КоличествоЗЕРНО) КАК КоличествоПоДокументу
		|ПОМЕСТИТЬ ПартииКПолучениюОстатков
		|ИЗ
		|	Документ.ОформлениеСДИЗЗЕРНО.Товары КАК ОформлениеСДИЗЗЕРНОТовары
		|ГДЕ
		|	ОформлениеСДИЗЗЕРНОТовары.Ссылка = &Ссылка
		|	И ОформлениеСДИЗЗЕРНОТовары.ВыделеннаяПартия = ЗНАЧЕНИЕ(Справочник.РеестрПартийЗЕРНО.ПустаяСсылка)
		|	И ОформлениеСДИЗЗЕРНОТовары.Партия <> ЗНАЧЕНИЕ(Справочник.РеестрПартийЗЕРНО.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ОформлениеСДИЗЗЕРНОТовары.Ссылка.Проведен,
		|	ОформлениеСДИЗЗЕРНОТовары.Партия
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОформлениеСДИЗЗЕРНОДанныеКорректировки.Ссылка.Проведен КАК Проведен,
		|	КОЛИЧЕСТВО(ОформлениеСДИЗЗЕРНОДанныеКорректировки.НомерСтроки) КАК КоличествоСтрок,
		|	ОформлениеСДИЗЗЕРНОДанныеКорректировки.Партия КАК Партия,
		|	СУММА(ОформлениеСДИЗЗЕРНОДанныеКорректировки.КоличествоЗЕРНО) КАК КоличествоПоДокументу
		|ИЗ
		|	Документ.ОформлениеСДИЗЗЕРНО.ДанныеКорректировки КАК ОформлениеСДИЗЗЕРНОДанныеКорректировки
		|ГДЕ
		|	ОформлениеСДИЗЗЕРНОДанныеКорректировки.Ссылка = &Ссылка
		|	И ОформлениеСДИЗЗЕРНОДанныеКорректировки.ВыделеннаяПартия = ЗНАЧЕНИЕ(Справочник.РеестрПартийЗЕРНО.ПустаяСсылка)
		|	И ОформлениеСДИЗЗЕРНОДанныеКорректировки.Партия <> ЗНАЧЕНИЕ(Справочник.РеестрПартийЗЕРНО.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ОформлениеСДИЗЗЕРНОДанныеКорректировки.Ссылка.Проведен,
		|	ОформлениеСДИЗЗЕРНОДанныеКорректировки.Партия
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Партия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПартииКПолучениюОстатков.Проведен              КАК Проведен,
		|	ПартииКПолучениюОстатков.Партия                КАК Партия,
		|	ПартииКПолучениюОстатков.КоличествоПоДокументу КАК КоличествоПоДокументу,
		|	ПартииКПолучениюОстатков.КоличествоСтрок       КАК КоличествоСтрок,
		|	ЕстьNULL(ОстаткиПартийЗЕРНОПоДокументу.ВОбработкеЗЕРНО, 0)    КАК КоличествоЗаблокировано,
		|	ЕстьNULL(ОстаткиПартийЗЕРНООстатки.КоличествоЗЕРНООстаток, 0) КАК КоличествоОстаток
		|ИЗ
		|	ПартииКПолучениюОстатков КАК ПартииКПолучениюОстатков
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиПартийЗЕРНО.Остатки(, Партия В
		|			(ВЫБРАТЬ
		|				ПартииКПолучениюОстатков.Партия КАК Партия
		|			ИЗ
		|				ПартииКПолучениюОстатков)) КАК ОстаткиПартийЗЕРНООстатки
		|		ПО ПартииКПолучениюОстатков.Партия = ОстаткиПартийЗЕРНООстатки.Партия
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиПартийЗЕРНО КАК ОстаткиПартийЗЕРНОПоДокументу
		|		ПО ПартииКПолучениюОстатков.Партия = ОстаткиПартийЗЕРНОПоДокументу.Партия
		|		И ОстаткиПартийЗЕРНОПоДокументу.Регистратор = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Документ);
		ТаблицаОстатковПартий = Запрос.Выполнить().Выгрузить();
		Для Каждого СтрокаОстатокПартии Из ТаблицаОстатковПартий Цикл
			
			// Если документ проведен, то перед формированием СДИЗ есть КоличествоЗаблокировано.
			// Если документ не проведен, то сравниваем остаток в регистре и данные документа.
			Если (СтрокаОстатокПартии.Проведен И СтрокаОстатокПартии.КоличествоЗаблокировано > 0
				Или Не СтрокаОстатокПартии.Проведен)
				И (СтрокаОстатокПартии.КоличествоОстаток <> СтрокаОстатокПартии.КоличествоПоДокументу
					Или СтрокаОстатокПартии.КоличествоСтрок > 1) Тогда
				Результат = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ПартииДокумента = Новый Соответствие;
		Для Каждого СтрокаТовары Из Документ.Товары Цикл
			
			Если ЗначениеЗаполнено(СтрокаТовары.Партия)
				И Не ЗначениеЗаполнено(СтрокаТовары.ВыделеннаяПартия)
				И Не ЗначениеЗаполнено(СтрокаТовары.КорректируемыйСДИЗ) Тогда
				
				Если ПартииДокумента[СтрокаТовары.Партия] = Неопределено Тогда
					ПартииДокумента.Вставить(СтрокаТовары.Партия);
					Если СтрокаТовары.КоличествоЗЕРНО <> СтрокаТовары.КоличествоОстатокПартииЗЕРНО Тогда
						Результат = Истина;
						Прервать;
					КонецЕсли;
				Иначе // сценарий с разбивкой строк по партии
					Результат = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не Результат Тогда
			
			Для Каждого СтрокаТовары Из Документ.ДанныеКорректировки Цикл
			
				Если ЗначениеЗаполнено(СтрокаТовары.Партия)
					И СтрокаТовары.КоличествоЗЕРНО <> СтрокаТовары.КоличествоОстатокПартииЗЕРНО
					И Не ЗначениеЗаполнено(СтрокаТовары.ВыделеннаяПартия) Тогда
					Результат = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДальнейшееДействиеКорректировочногоСДИЗ(Документ)
	
	ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.НеТребуется;
	
	ТекущаяОперация = РасчетТекущейОперацииПоДаннымКорректировочногоСДИЗ(Документ);
	
	СоответствиеОперацийДействиям = Новый Соответствие();
	СоответствиеОперацийДействиям.Вставить(Перечисления.ОперацииКорректировкиСДИЗ.АннулированиеОтказаОтПогашения,
		Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОформитеКорректировкуСДИЗ);
	СоответствиеОперацийДействиям.Вставить(Перечисления.ОперацииКорректировкиСДИЗ.АннулированиеПартии,
		Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОформитеКорректировкуСДИЗ);
	СоответствиеОперацийДействиям.Вставить(Перечисления.ОперацииКорректировкиСДИЗ.АннулированиеСДИЗ,
		Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОформитеКорректировкуСДИЗ);
	СоответствиеОперацийДействиям.Вставить(Перечисления.ОперацииКорректировкиСДИЗ.КорректировкаСДИЗ,
		Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОформитеКорректировкуСДИЗ);
	СоответствиеОперацийДействиям.Вставить(Перечисления.ОперацииКорректировкиСДИЗ.ОтказОтПогашения,
		Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОформитеОтказОтГашения);
	СоответствиеОперацийДействиям.Вставить(Перечисления.ОперацииКорректировкиСДИЗ.ОформлениеСДИЗ,
		Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
	СоответствиеОперацийДействиям.Вставить(Перечисления.ОперацииКорректировкиСДИЗ.ПустаяСсылка(),
		Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.НеТребуется);
		
	ДальнейшееДействие = СоответствиеОперацийДействиям.Получить(ТекущаяОперация);
	
	Если ТекущаяОперация = Перечисления.ОперацииКорректировкиСДИЗ.ОформлениеСДИЗ И ТребуетсяСформироватьПартии(Документ) Тогда
		ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.СформируйтеПартии;
	КонецЕсли;
	
	Возврат ДальнейшееДействие;
	
КонецФункции

Функция РасчетТекущейОперацииПоДаннымКорректировочногоСДИЗ(Документ)
	
	ТекущаяОперация = Перечисления.ОперацииКорректировкиСДИЗ.ПустаяСсылка();
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ОформлениеСДИЗЗЕРНО") Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ЕСТЬNULL(МИНИМУМ(ВЫБОР
			|		КОГДА ДанныеКорректировки.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииКорректировкиСДИЗ.АннулированиеОтказаОтПогашения)
			|			ТОГДА 1
			|		КОГДА ДанныеКорректировки.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииКорректировкиСДИЗ.КорректировкаСДИЗ)
			|			ТОГДА 2
			|		КОГДА ДанныеКорректировки.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииКорректировкиСДИЗ.АннулированиеСДИЗ)
			|			ТОГДА 3
			|		КОГДА ДанныеКорректировки.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииКорректировкиСДИЗ.АннулированиеПартии)
			|			ТОГДА 4
			|		КОГДА ДанныеКорректировки.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииКорректировкиСДИЗ.ОтказОтПогашения)
			|			ТОГДА 5
			|		КОГДА ДанныеКорректировки.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииКорректировкиСДИЗ.ОформлениеСДИЗ)
			|			ТОГДА 6
			|	КОНЕЦ), 99) КАК Порядок
			|ПОМЕСТИТЬ ПорядокОперацийПриКорректировке
			|ИЗ
			|	Документ.ОформлениеСДИЗЗЕРНО.ДанныеКорректировки КАК ДанныеКорректировки
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОбъектовСинхронизацииЗЕРНО КАК СтатусыОбъектовСинхронизацииЗЕРНО
			|		ПО СтатусыОбъектовСинхронизацииЗЕРНО.ОбъектСинхронизации = ДанныеКорректировки.Ссылка
			|		И СтатусыОбъектовСинхронизацииЗЕРНО.ИдентификаторСтроки = ДанныеКорректировки.Идентификатор
			|		И СтатусыОбъектовСинхронизацииЗЕРНО.Статус В (&КонечныеСтатусы)
			|ГДЕ
			|	ДанныеКорректировки.Ссылка = &Документ
			|	И СтатусыОбъектовСинхронизацииЗЕРНО.Статус ЕСТЬ NULL
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	6
			|ИЗ Документ.ОформлениеСДИЗЗЕРНО.Товары КАК Товары
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОбъектовСинхронизацииЗЕРНО КАК СтатусыОбъектовСинхронизацииЗЕРНО
			|		ПО СтатусыОбъектовСинхронизацииЗЕРНО.ОбъектСинхронизации = Товары.Ссылка
			|		И СтатусыОбъектовСинхронизацииЗЕРНО.ИдентификаторСтроки = Товары.Идентификатор
			|		И СтатусыОбъектовСинхронизацииЗЕРНО.Статус В (&КонечныеСтатусы)
			|ГДЕ
			|	Товары.КорректируемыйСДИЗ = ЗНАЧЕНИЕ(Справочник.СДИЗЗЕРНО.ПустаяСсылка)
			|	И Товары.Ссылка = &Документ
			|	И СтатусыОбъектовСинхронизацииЗЕРНО.Статус ЕСТЬ NULL
			|;
			|
			|ВЫБРАТЬ
			|	МИНИМУМ(ПорядокОперацийПриКорректировке.Порядок) КАК Порядок
			|ИЗ ПорядокОперацийПриКорректировке КАК ПорядокОперацийПриКорректировке
			|";
		
		Запрос.УстановитьПараметр("КонечныеСтатусы", КонечныеСтатусы(Ложь));
		Запрос.УстановитьПараметр("Документ",        Документ);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ПорядокВыполненияОпераций = ПорядокВыполненияОпераций(Ложь);
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			ТекущаяОперация = ПорядокВыполненияОпераций.Получить(ВыборкаДетальныеЗаписи.Порядок);
		КонецЕсли;
		
	Иначе
		
		КонечныеСтатусы      = КонечныеСтатусы(Ложь);
		ТаблицаКорректировки = Документ.ДанныеКорректировки.Выгрузить();
		
		ТаблицаКорректировки.Сортировать("КорректируемыйСДИЗ, Порядок");
		
		Для Каждого СтрокаКорректировки Из ТаблицаКорректировки Цикл
			
			Если Не КонечныеСтатусы.Найти(СтрокаКорректировки.СтатусОбработки) = Неопределено Тогда
				// строка обработана
				Продолжить;
			КонецЕсли;
			
			ТекущаяОперация = СтрокаКорректировки.Операция;
			Прервать;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТекущаяОперация;
	
КонецФункции

Функция ДанныеИсходныхПартийДокумента(ИсходныеПартии)
	
	СтруктураПартии = Справочники.РеестрПартийЗЕРНО.СтруктураРеквизитовПартии(); // Новый Структура
	ИсходныеПартииДокумента = Новый Соответствие;
	
	Для Каждого СтрокаТаблицы Из ИсходныеПартии Цикл
	
		ИсходнаяПартия = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПартии);
		
		ЗаполнитьЗначенияСвойств(ИсходнаяПартия, СтрокаТаблицы);
		ИсходнаяПартия.Вставить("ПартияСсылка",  СтрокаТаблицы.ИсходнаяПартия);
		
		ИсходнаяПартия.Вставить("ПотребительскиеСвойства", Новый Массив);
		Для Каждого СтрокаТаблицыПотребительскиеСвойства Из СтрокаТаблицы.ПотребительскиеСвойства Цикл
			ДанныеСвойства = Новый Структура("ПотребительскоеСвойство,Значение");
			ЗаполнитьЗначенияСвойств(ДанныеСвойства, СтрокаТаблицыПотребительскиеСвойства);
			ИсходнаяПартия.ПотребительскиеСвойства.Добавить(ДанныеСвойства);
		КонецЦикла;
		
		ИсходныеПартииДокумента.Вставить(СтрокаТаблицы.ИдентификаторСтроки, ИсходнаяПартия);
	
	КонецЦикла;
		
	Возврат ИсходныеПартииДокумента;
	
КонецФункции

Процедура ЗаполнитьРеквизитыПартииПоДаннымСервиса(РеквизитыПартии, СтрокаДанных, ИмяПоляНомерПартии)
	
	РеквизитыПартии.Вставить("УдалитьКоличество",   СтрокаДанных.amount);
	РеквизитыПартии.Вставить("КоличествоНачальное", СтрокаДанных.amount);
	РеквизитыПартии.Вставить("Дата",                СтрокаДанных.dateRegistration);
	РеквизитыПартии.Вставить("Статус",              Перечисления.СтатусыПартийЗЕРНО.Подписано);
	РеквизитыПартии.Вставить("Идентификатор",       СтрокаДанных[ИмяПоляНомерПартии]);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПартииПоРодительскойПартии(РеквизитыПартии, ИсходнаяПартия)
	
	Для Каждого КлючИЗначение Из ИсходнаяПартия Цикл
		Если КлючИЗначение.Ключ = "ПартияСсылка" Тогда
			Продолжить;
		КонецЕсли;
		РеквизитыПартии.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	РеквизитыПартии.Вставить("ПредшествующиеПартии", Новый Массив);
	
	ДанныеПредшествующиеПартии = Новый Структура();
	ДанныеПредшествующиеПартии.Вставить("Партия",     ИсходнаяПартия.ПартияСсылка);
	ДанныеПредшествующиеПартии.Вставить("Количество", ИсходнаяПартия.КоличествоНачальное);
	РеквизитыПартии.ПредшествующиеПартии.Добавить(ДанныеПредшествующиеПартии);
	
	ПараметрыПолученияПартии = Справочники.РеестрПартийЗЕРНО.ПараметрыПолученияПартии();
	ПараметрыПолученияПартии.ДанныеПартии       = РеквизитыПартии;
	ПараметрыПолученияПартии.ДобавлятьКЗагрузке = Ложь;
	
КонецПроцедуры

#Область ТекстыЗапросаПриПодготовкеСообщений

Функция ТекстЗапросаВерсииОперацийСДИЗ()
	
	Результат = "ВЫБРАТЬ
	|	ПрисоединенныеФайлыЗЕРНО.Документ         КАК Ссылка,
	|	ПрисоединенныеФайлыЗЕРНО.Операция         КАК Операция,
	|	МАКСИМУМ(ПрисоединенныеФайлыЗЕРНО.Версия) КАК ПоследнийНомерВерсии
	|ИЗ
	|	Справочник.ЗЕРНОПрисоединенныеФайлы КАК ПрисоединенныеФайлыЗЕРНО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОформлениеСДИЗЗЕРНО КАК Шапка
	|		ПО Шапка.Ссылка = &Ссылка
	|			И ПрисоединенныеФайлыЗЕРНО.Операция В (&БазовыеОперации)
	|			И Шапка.Ссылка = ПрисоединенныеФайлыЗЕРНО.Документ
	|ГДЕ
	|	ПрисоединенныеФайлыЗЕРНО.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ПрисоединенныеФайлыЗЕРНО.Документ,
	|	ПрисоединенныеФайлыЗЕРНО.Операция
	|";
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаВерсииОформлениеСДИЗ()
	
	Результат = "ВЫБРАТЬ
	|	ПрисоединенныеФайлыЗЕРНО.Документ                      КАК Ссылка,
	|	МАКСИМУМ(ЕСТЬNULL(ПрисоединенныеФайлыЗЕРНО.Версия, 0)) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ЗЕРНОПрисоединенныеФайлы КАК ПрисоединенныеФайлыЗЕРНО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОформлениеСДИЗЗЕРНО КАК Шапка
	|		ПО Шапка.Ссылка = &Ссылка
	|			И ВЫБОР
	|				КОГДА Шапка.Корректировочный ТОГДА
	|					ПрисоединенныеФайлыЗЕРНО.Операция = &ОперацияКорректировочныйСДИЗ
	|				ИНАЧЕ
	|					Шапка.Операция = ПрисоединенныеФайлыЗЕРНО.Операция
	|			КОНЕЦ
	|			И Шапка.Ссылка = ПрисоединенныеФайлыЗЕРНО.Документ
	|ГДЕ
	|	ПрисоединенныеФайлыЗЕРНО.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ПрисоединенныеФайлыЗЕРНО.Документ
	|";
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаШапка()
	
	Результат = "ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование                  КАК ДокументОснование,
	|	
	|	Шапка.Операция          КАК Операция,
	|	Шапка.ВидПродукции      КАК ВидПродукции,
	|
	|	Шапка.Грузоотправитель                КАК Грузоотправитель,
	|	Представление(Шапка.Грузоотправитель) КАК ГрузоотправительПредставление,
	|	Шапка.Грузополучатель                 КАК Грузополучатель,
	|	Представление(Шапка.Грузополучатель)  КАК ГрузополучательПредставление,
	|	Шапка.Покупатель                      КАК Покупатель,
	|	Представление(Шапка.Покупатель)       КАК ПокупательПредставление,
	|	Шапка.ЭлеваторПолучатель  КАК ЭлеваторПолучатель,
	|	ЕСТЬNULL(Шапка.ЭлеваторПолучатель.Идентификатор, """")  КАК ЭлеваторПолучательИдентификатор,
	|
	|	Шапка.ПодразделениеГрузоотправителя КАК ПодразделениеГрузоотправителя,
	|	Шапка.ПодразделениеГрузополучателя  КАК ПодразделениеГрузополучателя,
	|	Шапка.ПодразделениеПокупателя       КАК ПодразделениеПокупателя,
	|	Шапка.ПодразделениеВладельцаПартии  КАК ПодразделениеВладельцаПартии,
	|
	|	Шапка.ПунктНазначения         КАК ПунктНазначения,
	|	Шапка.ПунктНазначенияСтрокой  КАК ПунктНазначенияСтрокой,
	|	Шапка.ПунктОтправления        КАК ПунктОтправления,
	|	
	|	Шапка.Отгрузка   КАК Отгрузка,
	|	Шапка.Перевозка  КАК Перевозка,
	|	Шапка.Приемка    КАК Приемка,
	|	Шапка.Реализация КАК Реализация,
	|
	|	Шапка.ДатаГПД    КАК ДатаГПД,
	|	Шапка.НомерГПД   КАК НомерГПД,
	|	Шапка.ЗакупкаЕИС КАК ЗакупкаЕИС,
	|
	|	Шапка.ДатаГосКонтракта        КАК ДатаГосКонтракта,
	|	Шапка.НомерГосКонтракта       КАК НомерГосКонтракта,
	|	Шапка.НомерЗакупкиЕИС         КАК НомерЗакупкиЕИС,
	|	Шапка.ГосударственныйКонтракт КАК ГосударственныйКонтракт,
	|
	|	Шапка.Организация                КАК Организация,
	|	Шапка.Подразделение              КАК Подразделение,
	|	Представление(Шапка.Организация) КАК ОрганизацияПредставление,
	|
	|	Шапка.Лаборатория                КАК Лаборатория,
	|	Представление(Шапка.Лаборатория) КАК ЛабораторияПредставление,
	|
	|	Шапка.НомерПротоколаИспытаний   КАК НомерПротоколаИспытаний,
	|	Шапка.ДатаПротоколаИспытаний    КАК ДатаПротоколаИспытаний,
	|	Шапка.НомерТаможеннойДекларации КАК НомерТаможеннойДекларации,
	|	Шапка.ДатаКонтрактаВЭД          КАК ДатаКонтрактаВЭД,
	|	Шапка.НомерКонтрактаВЭД         КАК НомерКонтрактаВЭД,
	|	Шапка.ДатаДопСоглашенияВЭД      КАК ДатаДопСоглашенияВЭД,
	|	Шапка.НомерДопСоглашенияВЭД     КАК НомерДопСоглашенияВЭД,
	|
	|// СДИЗ Элеватор
	|	ЕСТЬNULL(ДоговорыХранения.ДатаДоговора, """")         КАК ДатаДоговораХранения,
	|	ЕСТЬNULL(ДоговорыХранения.НомерДоговора, """")        КАК НомерДоговораХранения,
	|	ЕСТЬNULL(ДоговорыХранения.СрокХранения, """")         КАК СрокХранения,
	|	ЕСТЬNULL(ДоговорыХранения.УсловияХранения, """")      КАК УсловияХранения,
	|	ЕСТЬNULL(ДоговорыХранения.МестоХранения, """")        КАК МестоХранения,
	|	ЕСТЬNULL(ДоговорыХранения.МестоХраненияСтрокой, """") КАК МестоХраненияСтрокой,
	|	ЕСТЬNULL(ДоговорыХранения.ТипХранения.Идентификатор, """")    КАК ТипХранения,
	|	ЕСТЬNULL(ДоговорыХранения.ЗакрепленнаяПлощадь, """")          КАК ЗакрепленнаяПлощадь,
	|
	|	Шапка.ПеремещениеПартийЗерна             КАК ПеремещениеПартийЗерна,
	|	Шапка.ДатаПеремещения                    КАК ДатаПеремещения,
	|	Шапка.МестоХраненияПриПеремещении        КАК МестоХраненияПриПеремещении,
	|	Шапка.МестоХраненияПриПеремещенииСтрокой КАК МестоХраненияПриПеремещенииСтрокой,
	|	Шапка.ТипХраненияПриПеремещении.Идентификатор КАК ТипХраненияПриПеремещении,
	|	Шапка.УсловияХраненияПриПеремещении           КАК УсловияХраненияПриПеремещении,
	|
	|	Шапка.Ссылка КАК Ссылка,
	|	Шапка.Ссылка КАК СсылкаНаОбъект,
	|
	|	Шапка.Корректировочный КАК Корректировочный
	|
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыХраненияПартийЗЕРНО КАК ДоговорыХранения
	|		ПО Шапка.ДоговорХраненияПартий = ДоговорыХранения.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка";
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаИсходныеПартии()
	
	Результат = "ВЫБРАТЬ
	|	ДанныеКорректировки.ИдентификаторСтроки       КАК ИдентификаторСтроки,
	|
	|	РеестрПартийЗЕРНО.Ссылка            КАК ИсходнаяПартия,
	|	РеестрПартийЗЕРНО.ВладелецПартии    КАК ВладелецПартии,
	|	РеестрПартийЗЕРНО.Местоположение    КАК Местоположение,
	|	РеестрПартийЗЕРНО.ОКПД2             КАК ОКПД2,
	|	РеестрПартийЗЕРНО.КодТНВЭД          КАК КодТНВЭД,
	|	РеестрПартийЗЕРНО.ГодУрожая         КАК ГодУрожая,
	|	РеестрПартийЗЕРНО.НазначениеПартии  КАК НазначениеПартии,
	|	РеестрПартийЗЕРНО.ЦельИспользования КАК ЦельИспользования,
	|	РеестрПартийЗЕРНО.Элеватор          КАК Элеватор,
	|	РеестрПартийЗЕРНО.Производитель     КАК Производитель,
	|	РеестрПартийЗЕРНО.ДатаИзготовления  КАК ДатаИзготовления,
	|	
	|	РеестрПартийЗЕРНО.КоличествоНачальное КАК КоличествоНачальное,
	|
	|	РеестрПартийЗЕРНО.ПотребительскиеСвойства.(
	|		Ссылка,
	|		НомерСтроки,
	|		ПотребительскоеСвойство,
	|		Значение)
	|ИЗ
	|	ДанныеКорректировки КАК ДанныеКорректировки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РеестрПартийЗЕРНО КАК РеестрПартийЗЕРНО
	|		ПО ДанныеКорректировки.Партия = РеестрПартийЗЕРНО.Ссылка
	|ГДЕ
	|	ДанныеКорректировки.ПолучитьДанныеИсходнойПартии
	|";
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаПеревозчики()
	
	Результат = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Перевозчики.Перевозчик    КАК Перевозчик,
	|	Представление(Перевозчики.Перевозчик) КАК ПеревозчикПредставление,
	|	Перевозчики.Подразделение КАК Подразделение
	|
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО.ТранспортныеСредства КАК Перевозчики
	|ГДЕ
	|	Перевозчики.Ссылка = &Ссылка
	|";
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаТранспортныеСредства()
	
	Результат = "ВЫБРАТЬ
	|	ТранспортныеСредства.Перевозчик                    КАК Перевозчик,
	|	ТранспортныеСредства.Подразделение                 КАК Подразделение,
	|	ТранспортныеСредства.ТипТранспорта.Идентификатор   КАК ТипТранспорта,
	|	ТранспортныеСредства.ТранспортноеСредство          КАК ТранспортноеСредство,
	|	ТранспортныеСредства.НомерТранспортногоСредства    КАК НомерТранспортногоСредства,
	|	ТранспортныеСредства.НомерАвтомобильногоКонтейнера КАК НомерАвтомобильногоКонтейнера
	|
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО.ТранспортныеСредства КАК ТранспортныеСредства
	|ГДЕ
	|	ТранспортныеСредства.Ссылка = &Ссылка
	|";
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаМестаПерегрузки()
	
	Результат = "ВЫБРАТЬ
	|	МестаПерегрузки.Перевозчик         КАК Перевозчик,
	|	МестаПерегрузки.Подразделение      КАК Подразделение,
	|	МестаПерегрузки.Адрес              КАК Адрес,
	|	МестаПерегрузки.АдресСтрокой КАК АдресСтрокой
	|
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО.МестаПерегрузки КАК МестаПерегрузки
	|ГДЕ
	|	МестаПерегрузки.Ссылка = &Ссылка
	|";
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаСвязанныеДокументы()
	
	Результат = "ВЫБРАТЬ
	|	СвязанныеДокументы.ТипДокумента КАК ТипДокумента,
	|	СвязанныеДокументы.ТипДокумента.Идентификатор КАК ИдентификаторТипДокумента,
	|	СвязанныеДокументы.Номер        КАК Номер,
	|	СвязанныеДокументы.Дата         КАК Дата
	|
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО.СвязанныеДокументы КАК СвязанныеДокументы
	|ГДЕ
	|	СвязанныеДокументы.Ссылка = &Ссылка
	|";
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаСвязанныеДокументыПрочие()
	
	Результат = "ВЫБРАТЬ
	|	СвязанныеДокументыПрочие.ТипДокумента  КАК ТипДокумента,
	|	СвязанныеДокументыПрочие.Номер         КАК Номер,
	|	СвязанныеДокументыПрочие.Дата          КАК Дата
	|
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО.СвязанныеДокументыПрочие КАК СвязанныеДокументыПрочие
	|ГДЕ
	|	СвязанныеДокументыПрочие.Ссылка = &Ссылка
	|";
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаДокументыСертификации()
	
	Результат = "ВЫБРАТЬ
	|	ДокументыСертификации.ИдентификаторСтрокиТоваров КАК ИдентификаторСтрокиТоваров,
	|	ДокументыСертификации.ТипДокумента    КАК ТипДокумента,
	|	ДокументыСертификации.Дата            КАК Дата,
	|	ДокументыСертификации.Номер           КАК Номер,
	|	ДокументыСертификации.СрокДействия    КАК СрокДействия,
	|	ДокументыСертификации.ИдентификаторПроисхожденияВЕТИС        КАК ИдентификаторПроисхожденияВЕТИС,
	|	ДокументыСертификации.ИдентификаторПроисхожденияВЕТИССтрокой КАК ИдентификаторПроисхожденияВЕТИССтрокой,
	|	ДокументыСертификации.ВидДокументаВСД КАК ВидДокументаВСД,
	|	ДокументыСертификации.СерияВСД        КАК СерияВСД
	|
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО.ДокументыСертификации КАК ДокументыСертификации
	|ГДЕ
	|	ДокументыСертификации.Ссылка = &Ссылка
	|";
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаУслугиЭлеватора()
	
	Результат = "ВЫБРАТЬ
	|	УслугиЭлеватора.УслугаЭлеватора.Идентификатор КАК ИдентификаторУслуги,
	|	УслугиЭлеватора.УслугаЭлеватора.Наименование  КАК УслугаЭлеватора
	|
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО КАК Шапка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыХраненияПартийЗЕРНО.УслугиЭлеватора КАК УслугиЭлеватора
	|		ПО Шапка.ДоговорХраненияПартий = УслугиЭлеватора.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|";
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПараметрыЗаполненияОформлениеСДИЗ

Функция НовыеПараметрыЗаполненияСДИЗЭлеватор()
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ПространствоИмен",          "");
	ПараметрыЗаполнения.Вставить("ИмяСвойстваЗапроса",        "");
	ПараметрыЗаполнения.Вставить("ИмяПоляКорректируемыйСДИЗ", "");
	ПараметрыЗаполнения.Вставить("СтрокаТовары",              Неопределено);
	ПараметрыЗаполнения.Вставить("УслугиЭлеватора",           Неопределено);
	ПараметрыЗаполнения.Вставить("ДокументыСертификации",     Неопределено);
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

Функция НовыеПараметрыЗаполненияСДИЗИмпортЭкспорт()
	
	ПараметрыЗаполнения = Новый Структура;
	
	ПараметрыЗаполнения.Вставить("ПространствоИмен",          "");
	ПараметрыЗаполнения.Вставить("ИмяСвойстваЗапроса",        "");
	ПараметрыЗаполнения.Вставить("ИмяПоляКорректируемыйСДИЗ", "");
	ПараметрыЗаполнения.Вставить("ИмяПоляНомерПартии",        "");
	ПараметрыЗаполнения.Вставить("ИмяПоляОперацияСДИЗ",       "");
	
	ПараметрыЗаполнения.Вставить("РеквизитыОрганизаций",  Неопределено);
	ПараметрыЗаполнения.Вставить("Шапка",                 Неопределено);
	ПараметрыЗаполнения.Вставить("Перевозчики",           Неопределено);
	ПараметрыЗаполнения.Вставить("МестаПерегрузки",       Неопределено);
	ПараметрыЗаполнения.Вставить("ТранспортныеСредства",  Неопределено);
	ПараметрыЗаполнения.Вставить("СтрокаТовары",          Неопределено);
	ПараметрыЗаполнения.Вставить("ДокументыСертификации", Неопределено);
	
	ПараметрыЗаполнения.Вставить("ДанныеДополненияАдресаКлючаАдресов", ИнтеграцияЗЕРНОСлужебный.ИдентификаторыАдресногоОбъекта());
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

Функция НовыеПараметрыЗаполненияСДИЗРФ()
	
	ПараметрыЗаполнения = Новый Структура;
	
	ПараметрыЗаполнения.Вставить("ПространствоИмен",          "");
	ПараметрыЗаполнения.Вставить("ИмяСвойстваЗапроса",        "");
	ПараметрыЗаполнения.Вставить("ИмяПоляКорректируемыйСДИЗ", "");
	ПараметрыЗаполнения.Вставить("ИмяПоляНомерПартии",        "");
	ПараметрыЗаполнения.Вставить("ИмяПоляОперацияСДИЗ",       "");
	
	ПараметрыЗаполнения.Вставить("РеквизитыОрганизаций",     Неопределено);
	ПараметрыЗаполнения.Вставить("Шапка",                    Неопределено);
	ПараметрыЗаполнения.Вставить("Перевозчики",              Неопределено);
	ПараметрыЗаполнения.Вставить("МестаПерегрузки",          Неопределено);
	ПараметрыЗаполнения.Вставить("ТранспортныеСредства",     Неопределено);
	ПараметрыЗаполнения.Вставить("СтрокаТовары",             Неопределено);
	ПараметрыЗаполнения.Вставить("СвязанныеДокументы",       Неопределено);
	ПараметрыЗаполнения.Вставить("СвязанныеДокументыПрочие", Неопределено);
	ПараметрыЗаполнения.Вставить("ДокументыСертификации",    Неопределено);
	
	ПараметрыЗаполнения.Вставить("ДанныеДополненияАдресаКлючаАдресов", ИнтеграцияЗЕРНОСлужебный.ИдентификаторыАдресногоОбъекта());
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

Функция ИмяПоляОперацияСДИЗ(Операция)
	
	Если Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРФ Тогда
		ИмяЭлемента = "OperationInRF";
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭкспорт Тогда
		ИмяЭлемента = "OperationExportRF";
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗИмпорт Тогда
		ИмяЭлемента = "OperationImportRF";
	КонецЕсли;
	
	Возврат ИмяЭлемента;
	
КонецФункции

Процедура ДобавитьСтрокуАннулированиеОтказа(ДанныеКорректировки, СтрокаРасчета, СтрокаОтказовПогашенийАннулирований)

	ОперацияАннулированиеОтказа = ПредопределенноеЗначение("Перечисление.ОперацииКорректировкиСДИЗ.АннулированиеОтказаОтПогашения");

	НоваяСтрокаДанныхКорректировки = ДанныеКорректировки.Добавить();

	ЗаполнитьЗначенияСвойств(НоваяСтрокаДанныхКорректировки, СтрокаРасчета, ИменаСвойствЗаполнения());
	НоваяСтрокаДанныхКорректировки.Партия                       = СтрокаОтказовПогашенийАннулирований.Партия;
	НоваяСтрокаДанныхКорректировки.Порядок                      = ПорядокВыполненияОпераций().Получить(ОперацияАннулированиеОтказа);
	НоваяСтрокаДанныхКорректировки.Идентификатор                = Новый УникальныйИдентификатор();
	НоваяСтрокаДанныхКорректировки.ИдентификаторОтказаПогашения = СтрокаОтказовПогашенийАннулирований.ИдентификаторЗаявки;
	НоваяСтрокаДанныхКорректировки.КоличествоЗЕРНО              = СтрокаОтказовПогашенийАннулирований.КоличествоОтказаПогашения;
	НоваяСтрокаДанныхКорректировки.Операция                     = ОперацияАннулированиеОтказа;

КонецПроцедуры

Процедура ДобавитьСтрокуКорректировкаСДИЗ(ДанныеКорректировки, СтрокаРасчета, КоличествоЗЕРНО)

	ОперацияКорректировкаСДИЗ   = ПредопределенноеЗначение("Перечисление.ОперацииКорректировкиСДИЗ.КорректировкаСДИЗ");

	НоваяСтрокаДанныхКорректировки = ДанныеКорректировки.Добавить();

	ЗаполнитьЗначенияСвойств(НоваяСтрокаДанныхКорректировки, СтрокаРасчета, ИменаСвойствЗаполнения());
	НоваяСтрокаДанныхКорректировки.Порядок            = ПорядокВыполненияОпераций()[ОперацияКорректировкаСДИЗ];
	НоваяСтрокаДанныхКорректировки.Идентификатор      = Новый УникальныйИдентификатор();
	НоваяСтрокаДанныхКорректировки.КоличествоЗЕРНО    = КоличествоЗЕРНО;
	НоваяСтрокаДанныхКорректировки.Операция           = ОперацияКорректировкаСДИЗ;

КонецПроцедуры

Процедура ДобавитьСтрокуОтказОтПогашения(ДанныеКорректировки, СтрокаРасчета, КоличествоЗЕРНО)

	ОперацияОтказОтПогашения    = ПредопределенноеЗначение("Перечисление.ОперацииКорректировкиСДИЗ.ОтказОтПогашения");

	НоваяСтрокаДанныхКорректировки = ДанныеКорректировки.Добавить();

	ЗаполнитьЗначенияСвойств(НоваяСтрокаДанныхКорректировки, СтрокаРасчета, ИменаСвойствЗаполнения());
	НоваяСтрокаДанныхКорректировки.Порядок                      = ПорядокВыполненияОпераций()[ОперацияОтказОтПогашения];
	НоваяСтрокаДанныхКорректировки.Идентификатор                = Новый УникальныйИдентификатор();
	НоваяСтрокаДанныхКорректировки.КоличествоЗЕРНО              = КоличествоЗЕРНО;
	НоваяСтрокаДанныхКорректировки.Операция                     = ОперацияОтказОтПогашения;

КонецПроцедуры

Процедура ДобавитьСтрокуОформлениеСДИЗ(ДанныеКорректировки, СтрокаРасчета, КоличествоЗЕРНО)

	ОперацияОформлениеСДИЗ      = ПредопределенноеЗначение("Перечисление.ОперацииКорректировкиСДИЗ.ОформлениеСДИЗ");

	НоваяСтрокаДанныхКорректировки = ДанныеКорректировки.Добавить();

	ЗаполнитьЗначенияСвойств(НоваяСтрокаДанныхКорректировки, СтрокаРасчета, ИменаСвойствЗаполнения());
	НоваяСтрокаДанныхКорректировки.Порядок                      = ПорядокВыполненияОпераций()[ОперацияОформлениеСДИЗ];
	НоваяСтрокаДанныхКорректировки.Идентификатор                = Новый УникальныйИдентификатор();
	НоваяСтрокаДанныхКорректировки.КоличествоЗЕРНО              = КоличествоЗЕРНО;
	НоваяСтрокаДанныхКорректировки.Операция                     = ОперацияОформлениеСДИЗ;

КонецПроцедуры

Процедура ДобавитьСтрокуАннулированиеПартии(ДанныеКорректировки, СтрокаРасчета, КоличествоЗЕРНО)
	
	ПартияДляАннулирования = ?(ЗначениеЗаполнено(СтрокаРасчета.ВыделеннаяПартия), СтрокаРасчета.ВыделеннаяПартия, СтрокаРасчета.Партия);
	
	Если Не ЗначениеЗаполнено(ПартияДляАннулирования) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПартияДляАннулирования.ПредшествующиеПартии.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОперацияАннулированиеПартии = ПредопределенноеЗначение("Перечисление.ОперацииКорректировкиСДИЗ.АннулированиеПартии");
	
	НоваяСтрокаДанныхКорректировки = ДанныеКорректировки.Добавить();
	
	ЗаполнитьЗначенияСвойств(НоваяСтрокаДанныхКорректировки, СтрокаРасчета, ИменаСвойствЗаполнения());
	НоваяСтрокаДанныхКорректировки.Порядок            = ПорядокВыполненияОпераций()[ОперацияАннулированиеПартии];
	НоваяСтрокаДанныхКорректировки.Идентификатор      = Новый УникальныйИдентификатор();
	НоваяСтрокаДанныхКорректировки.Партия             = ПартияДляАннулирования;
	НоваяСтрокаДанныхКорректировки.КоличествоЗЕРНО    = КоличествоЗЕРНО;
	НоваяСтрокаДанныхКорректировки.Операция           = ОперацияАннулированиеПартии;

КонецПроцедуры

Процедура ДобавитьСтрокуАннулированиеСДИЗ(ДанныеКорректировки, СтрокаРасчета, КоличествоЗЕРНО)
	
	ПартияДляАннулирования = ?(ЗначениеЗаполнено(СтрокаРасчета.ВыделеннаяПартия), СтрокаРасчета.ВыделеннаяПартия, СтрокаРасчета.Партия);
	
	ОперацияАннулированиеСДИЗ   = ПредопределенноеЗначение("Перечисление.ОперацииКорректировкиСДИЗ.АннулированиеСДИЗ");

	НоваяСтрокаДанныхКорректировки = ДанныеКорректировки.Добавить();

	ЗаполнитьЗначенияСвойств(НоваяСтрокаДанныхКорректировки, СтрокаРасчета, ИменаСвойствЗаполнения());
	НоваяСтрокаДанныхКорректировки.Порядок            = ПорядокВыполненияОпераций()[ОперацияАннулированиеСДИЗ];
	НоваяСтрокаДанныхКорректировки.Идентификатор      = Новый УникальныйИдентификатор();
	НоваяСтрокаДанныхКорректировки.Партия             = ПартияДляАннулирования;
	НоваяСтрокаДанныхКорректировки.КоличествоЗЕРНО    = КоличествоЗЕРНО;
	НоваяСтрокаДанныхКорректировки.Операция           = ОперацияАннулированиеСДИЗ;

КонецПроцедуры

Функция ПорядокВыполненияОпераций(ПоОперации = Истина)
	
	Результат = Новый Соответствие;
	
	Если ПоОперации Тогда
		Результат.Вставить(ПредопределенноеЗначение("Перечисление.ОперацииКорректировкиСДИЗ.АннулированиеОтказаОтПогашения"), 1);
		Результат.Вставить(ПредопределенноеЗначение("Перечисление.ОперацииКорректировкиСДИЗ.КорректировкаСДИЗ"),              2);
		Результат.Вставить(ПредопределенноеЗначение("Перечисление.ОперацииКорректировкиСДИЗ.АннулированиеСДИЗ"),              3);
		Результат.Вставить(ПредопределенноеЗначение("Перечисление.ОперацииКорректировкиСДИЗ.АннулированиеПартии"),            4);
		Результат.Вставить(ПредопределенноеЗначение("Перечисление.ОперацииКорректировкиСДИЗ.ОтказОтПогашения"),               5);
		Результат.Вставить(ПредопределенноеЗначение("Перечисление.ОперацииКорректировкиСДИЗ.ОформлениеСДИЗ"),                 6);
	Иначе
		Результат.Вставить(1, ПредопределенноеЗначение("Перечисление.ОперацииКорректировкиСДИЗ.АннулированиеОтказаОтПогашения"));
		Результат.Вставить(2, ПредопределенноеЗначение("Перечисление.ОперацииКорректировкиСДИЗ.КорректировкаСДИЗ"));
		Результат.Вставить(3, ПредопределенноеЗначение("Перечисление.ОперацииКорректировкиСДИЗ.АннулированиеСДИЗ"));
		Результат.Вставить(4, ПредопределенноеЗначение("Перечисление.ОперацииКорректировкиСДИЗ.АннулированиеПартии"));
		Результат.Вставить(5, ПредопределенноеЗначение("Перечисление.ОперацииКорректировкиСДИЗ.ОтказОтПогашения"));
		Результат.Вставить(6, ПредопределенноеЗначение("Перечисление.ОперацииКорректировкиСДИЗ.ОформлениеСДИЗ"));
		Результат.Вставить(99, ПредопределенноеЗначение("Перечисление.ОперацииКорректировкиСДИЗ.ПустаяСсылка"));
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ХешСуммыСтрокКорректировочногоСДИЗ(ПараметрыРасчета)
	
	СоответствиеХешСуммПострочно = Новый Соответствие();
	
	МассивСДИЗДляРасчета = Новый Массив;
	
	Для Каждого СтрокаПараметровРасчета Из ПараметрыРасчета.МассивСтрокРасчета Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаПараметровРасчета.КорректируемыйСДИЗ) Тогда
			Продолжить;
		КонецЕсли;
		
		МассивСДИЗДляРасчета.Добавить(СтрокаПараметровРасчета.КорректируемыйСДИЗ);
		
	КонецЦикла;
	
	Если ТипЗнч(ПараметрыРасчета.ОбъектРасчета) = Тип("Массив") Тогда
		МассивОбъектовРасчетаХешСумм = ПараметрыРасчета.ОбъектРасчета;
	Иначе
		МассивОбъектовРасчетаХешСумм = Новый Массив;
		МассивОбъектовРасчетаХешСумм.Добавить(ПараметрыРасчета.ОбъектРасчета);
	КонецЕсли;
	
	МассивСтрокРасчетаХешСуммПоОформлениюСДИЗ = Новый Массив;
	МассивСтрокРасчетаХешСуммПоСДИЗ           = Новый Массив;
	
	Для Каждого ОбъектРасчета Из МассивОбъектовРасчетаХешСумм Цикл
		
		Если ТипЗнч(ОбъектРасчета) = Тип("ДокументСсылка.ОформлениеСДИЗЗЕРНО") Тогда
			
			МассивСтрокРасчетаХешСуммПоОформлениюСДИЗ.Добавить(ОбъектРасчета);
			
		ИначеЕсли ТипЗнч(ОбъектРасчета) = Тип("СправочникСсылка.СДИЗЗЕРНО") Тогда
			
			МассивСтрокРасчетаХешСуммПоСДИЗ.Добавить(ОбъектРасчета);
			
		ИначеЕсли ТипЗнч(ОбъектРасчета) = Тип("ДанныеФормыСтруктура")
			Или ТипЗнч(ОбъектРасчета) = Тип("ДокументОбъект.ОформлениеСДИЗЗЕРНО") Тогда
			
			РассчитатьХешСуммуКорректировочногоСДИЗПоДаннымДокумента(СоответствиеХешСуммПострочно, ОбъектРасчета, МассивСДИЗДляРасчета);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивСтрокРасчетаХешСуммПоОформлениюСДИЗ.Количество() Тогда
		РассчитатьХешСуммуКорректировочногоСДИЗПоОформлениюСДИЗ(СоответствиеХешСуммПострочно, МассивСтрокРасчетаХешСуммПоОформлениюСДИЗ, МассивСДИЗДляРасчета);
	КонецЕсли;
	
	Если МассивСтрокРасчетаХешСуммПоСДИЗ.Количество() Тогда
		РассчитатьХешСуммуКорректировочногоСДИЗПоСДИЗ(СоответствиеХешСуммПострочно, МассивСтрокРасчетаХешСуммПоСДИЗ, МассивСДИЗДляРасчета);
	КонецЕсли;
	
	Возврат СоответствиеХешСуммПострочно;
	
КонецФункции

Процедура РассчитатьХешСуммуКорректировочногоСДИЗПоОформлениюСДИЗ(СоответствиеХешСуммПострочно, ОбъектРасчета, МассивСДИЗДляРасчета = Неопределено)
	
	Если Не ТипЗнч(СоответствиеХешСуммПострочно) = Тип("Соответствие") Тогда
		СоответствиеХешСуммПострочно = Новый Соответствие();
	КонецЕсли;
	
	РезультатЗапросаДанныхПоОформлениюСДИЗ = РезультатЗапросаДанныхДляРасчетаХешСуммКорректировочногоСДИЗПоОформлениюСДИЗ(ОбъектРасчета, МассивСДИЗДляРасчета);
	
	ВыборкаДетальныеЗаписи = РезультатЗапросаДанныхПоОформлениюСДИЗ.ДанныеШапки;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	
		ДанныеДляРасчетаХешСуммы = Новый Структура();
		ДанныеДляРасчетаХешСуммы.Вставить("ДанныеШапки",                     СтруктураДанныхШапкиДляРасчетаХешСуммыКорректировочногоСДИЗ());
		ДанныеДляРасчетаХешСуммы.Вставить("ДанныеТранспортныхСредств",       Новый Массив);
		ДанныеДляРасчетаХешСуммы.Вставить("ДанныеМестПерегрузки",            Новый Массив);
		ДанныеДляРасчетаХешСуммы.Вставить("ДанныеСвязанныхДокументов",       Новый Массив);
		ДанныеДляРасчетаХешСуммы.Вставить("ДанныеСвязанныхДокументовПрочие", Новый Массив);
		
		Для Каждого КлючИЗначение Из ДанныеДляРасчетаХешСуммы.ДанныеШапки Цикл
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ВыборкаДетальныеЗаписи, КлючИЗначение.Ключ)
				И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи[КлючИЗначение.Ключ]) Тогда
				
				ДанныеДляРасчетаХешСуммы.ДанныеШапки.Вставить(КлючИЗначение.Ключ, ВыборкаДетальныеЗаписи[КлючИЗначение.Ключ]);
				
			КонецЕсли;
			
		КонецЦикла;
		
		СтруктураОтбора = Новый Структура("СДИЗ", ВыборкаДетальныеЗаписи.СДИЗ);
		
		ДанныеТранспортныхСредствПоСДИЗ = РезультатЗапросаДанныхПоОформлениюСДИЗ.ДанныеТранспортныхСредств.НайтиСтроки(СтруктураОтбора);
		ДанныеМестПерегрузки            = РезультатЗапросаДанныхПоОформлениюСДИЗ.ДанныеМестПерегрузки.НайтиСтроки(СтруктураОтбора);
		ДанныеСвязанныхДокументов       = РезультатЗапросаДанныхПоОформлениюСДИЗ.ДанныеСвязанныхДокументов.НайтиСтроки(СтруктураОтбора);
		ДанныеПрочихСвязанныхДокументов = РезультатЗапросаДанныхПоОформлениюСДИЗ.ДанныеСвязанныхДокументовПрочих.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого ТранспортныеСредства Из ДанныеТранспортныхСредствПоСДИЗ Цикл
			
			СтрокаДанных = СтруктураДанныхТранспортныхСредствДляРасчетаХешСуммыКорректировочногоСДИЗ();
			ЗаполнитьЗначенияСвойств(СтрокаДанных, ТранспортныеСредства);
			
			ДанныеДляРасчетаХешСуммы.ДанныеТранспортныхСредств.Добавить(СтрокаДанных);
			
		КонецЦикла;
		
		Для Каждого МестаПерегрузки Из ДанныеМестПерегрузки Цикл
			
			СтрокаДанных = СтруктураДанныхМестПерегрузкиДляРасчетаХешСуммыКорректировочногоСДИЗ();
			ЗаполнитьЗначенияСвойств(СтрокаДанных, МестаПерегрузки);
			
			ДанныеДляРасчетаХешСуммы.ДанныеМестПерегрузки.Добавить(СтрокаДанных);
			
		КонецЦикла;
		
		Для Каждого СвязанныеДокументы Из ДанныеСвязанныхДокументов Цикл
			
			СтрокаДанных = СтруктураДанныхСвязанныхДокументовДляРасчетаХешСуммыКорректировочногоСДИЗ();
			ЗаполнитьЗначенияСвойств(СтрокаДанных, СвязанныеДокументы);
			
			ДанныеДляРасчетаХешСуммы.ДанныеСвязанныхДокументов.Добавить(СтрокаДанных);
			
		КонецЦикла;
		
		Для Каждого ПрочиеСвязанныеДокументы Из ДанныеПрочихСвязанныхДокументов Цикл
			
			СтрокаДанных = СтруктураДанныхСвязанныхДокументовДляРасчетаХешСуммыКорректировочногоСДИЗ();
			ЗаполнитьЗначенияСвойств(СтрокаДанных, ПрочиеСвязанныеДокументы);
			
			ДанныеДляРасчетаХешСуммы.ДанныеСвязанныхДокументовПрочие.Добавить(СтрокаДанных);
			
		КонецЦикла;
		
		ХешСумма = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(ДанныеДляРасчетаХешСуммы);
		
		СоответствиеХешСуммПострочно.Вставить(ВыборкаДетальныеЗаписи.СДИЗ, ХешСумма);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьХешСуммуКорректировочногоСДИЗПоСДИЗ(СоответствиеХешСуммПострочно, ОбъектРасчета, МассивСДИЗДляРасчета = Неопределено)
	
	Если Не ТипЗнч(СоответствиеХешСуммПострочно) = Тип("Соответствие") Тогда
		СоответствиеХешСуммПострочно = Новый Соответствие();
	КонецЕсли;
	
	РезультатЗапросаДанныхПоОформлениюСДИЗ = РезультатЗапросаДанныхДляРасчетаХешСуммКорректировочногоСДИЗПоСДИЗ(ОбъектРасчета);
	
	ВыборкаДетальныеЗаписи = РезультатЗапросаДанныхПоОформлениюСДИЗ.ДанныеШапки;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	
		ДанныеДляРасчетаХешСуммы = Новый Структура();
		ДанныеДляРасчетаХешСуммы.Вставить("ДанныеШапки",                     СтруктураДанныхШапкиДляРасчетаХешСуммыКорректировочногоСДИЗ());
		ДанныеДляРасчетаХешСуммы.Вставить("ДанныеТранспортныхСредств",       Новый Массив);
		ДанныеДляРасчетаХешСуммы.Вставить("ДанныеМестПерегрузки",            Новый Массив);
		ДанныеДляРасчетаХешСуммы.Вставить("ДанныеСвязанныхДокументов",       Новый Массив);
		ДанныеДляРасчетаХешСуммы.Вставить("ДанныеСвязанныхДокументовПрочие", Новый Массив);
		
		Для Каждого КлючИЗначение Из ДанныеДляРасчетаХешСуммы.ДанныеШапки Цикл
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ВыборкаДетальныеЗаписи, КлючИЗначение.Ключ)
				И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи[КлючИЗначение.Ключ]) Тогда
				
				ДанныеДляРасчетаХешСуммы.ДанныеШапки.Вставить(КлючИЗначение.Ключ, ВыборкаДетальныеЗаписи[КлючИЗначение.Ключ]);
				
			КонецЕсли;
			
		КонецЦикла;
		
		СтруктураОтбора = Новый Структура("СДИЗ", ВыборкаДетальныеЗаписи.СДИЗ);
		
		ДанныеТранспортныхСредствПоСДИЗ = РезультатЗапросаДанныхПоОформлениюСДИЗ.ДанныеТранспортныхСредств.НайтиСтроки(СтруктураОтбора);
		ДанныеМестПерегрузки            = РезультатЗапросаДанныхПоОформлениюСДИЗ.ДанныеМестПерегрузки.НайтиСтроки(СтруктураОтбора);
		ДанныеСвязанныхДокументов       = РезультатЗапросаДанныхПоОформлениюСДИЗ.ДанныеСвязанныхДокументов.НайтиСтроки(СтруктураОтбора);
		ДанныеПрочихСвязанныхДокументов = РезультатЗапросаДанныхПоОформлениюСДИЗ.ДанныеСвязанныхДокументовПрочих.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого ТранспортныеСредства Из ДанныеТранспортныхСредствПоСДИЗ Цикл
			
			СтрокаДанных = СтруктураДанныхТранспортныхСредствДляРасчетаХешСуммыКорректировочногоСДИЗ();
			ЗаполнитьЗначенияСвойств(СтрокаДанных, ТранспортныеСредства);
			
			ДанныеДляРасчетаХешСуммы.ДанныеТранспортныхСредств.Добавить(СтрокаДанных);
			
		КонецЦикла;
		
		Для Каждого МестаПерегрузки Из ДанныеМестПерегрузки Цикл
			
			СтрокаДанных = СтруктураДанныхМестПерегрузкиДляРасчетаХешСуммыКорректировочногоСДИЗ();
			ЗаполнитьЗначенияСвойств(СтрокаДанных, МестаПерегрузки);
			
			ДанныеДляРасчетаХешСуммы.ДанныеМестПерегрузки.Добавить(СтрокаДанных);
			
		КонецЦикла;
		
		Для Каждого СвязанныеДокументы Из ДанныеСвязанныхДокументов Цикл
			
			СтрокаДанных = СтруктураДанныхСвязанныхДокументовДляРасчетаХешСуммыКорректировочногоСДИЗ();
			ЗаполнитьЗначенияСвойств(СтрокаДанных, СвязанныеДокументы);
			
			ДанныеДляРасчетаХешСуммы.ДанныеСвязанныхДокументов.Добавить(СтрокаДанных);
			
		КонецЦикла;
		
		Для Каждого ПрочиеСвязанныеДокументы Из ДанныеПрочихСвязанныхДокументов Цикл
			
			СтрокаДанных = СтруктураДанныхСвязанныхДокументовДляРасчетаХешСуммыКорректировочногоСДИЗ();
			ЗаполнитьЗначенияСвойств(СтрокаДанных, ПрочиеСвязанныеДокументы);
			
			ДанныеДляРасчетаХешСуммы.ДанныеСвязанныхДокументовПрочие.Добавить(СтрокаДанных);
			
		КонецЦикла;
	
		ХешСумма = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(ДанныеДляРасчетаХешСуммы);
		
		СоответствиеХешСуммПострочно.Вставить(ВыборкаДетальныеЗаписи.СДИЗ, ХешСумма);
		
	КонецЦикла;

КонецПроцедуры

Процедура РассчитатьХешСуммуКорректировочногоСДИЗПоДаннымДокумента(СоответствиеХешСуммПострочно, ОбъектРасчета, МассивСДИЗДляРасчета = Неопределено)
	
	Если Не ТипЗнч(СоответствиеХешСуммПострочно) = Тип("Соответствие") Тогда
		СоответствиеХешСуммПострочно = Новый Соответствие();
	КонецЕсли;
	
	МассивОрганизацийКонтрагентовДляПроверки = Новый Массив;
	МассивОрганизацийКонтрагентовДляПроверки.Добавить(ОбъектРасчета.Организация);
	
	Если ЗначениеЗаполнено(ОбъектРасчета.Покупатель) Тогда
		
		Если МассивОрганизацийКонтрагентовДляПроверки.Найти(ОбъектРасчета.Покупатель) = Неопределено Тогда
			МассивОрганизацийКонтрагентовДляПроверки.Добавить(ОбъектРасчета.Покупатель);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектРасчета.Грузоотправитель) Тогда
		
		Если МассивОрганизацийКонтрагентовДляПроверки.Найти(ОбъектРасчета.Грузоотправитель) = Неопределено Тогда
			МассивОрганизацийКонтрагентовДляПроверки.Добавить(ОбъектРасчета.Грузоотправитель);
		КонецЕсли;
	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектРасчета.Грузополучатель) Тогда
		
		Если МассивОрганизацийКонтрагентовДляПроверки.Найти(ОбъектРасчета.Грузополучатель) = Неопределено Тогда
			МассивОрганизацийКонтрагентовДляПроверки.Добавить(ОбъектРасчета.Грузополучатель);
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого СтрокаМестПерегрузки Из ОбъектРасчета.МестаПерегрузки Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаМестПерегрузки.Перевозчик) Тогда
			Продолжить;
		КонецЕсли;
		
		Если МассивОрганизацийКонтрагентовДляПроверки.Найти(СтрокаМестПерегрузки.Перевозчик) = Неопределено Тогда
			МассивОрганизацийКонтрагентовДляПроверки.Добавить(СтрокаМестПерегрузки.Перевозчик);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаТранспортныхСредств Из ОбъектРасчета.ТранспортныеСредства Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТранспортныхСредств.Перевозчик) Тогда
			Продолжить;
		КонецЕсли;
		
		Если МассивОрганизацийКонтрагентовДляПроверки.Найти(СтрокаТранспортныхСредств.Перевозчик) = Неопределено Тогда
			МассивОрганизацийКонтрагентовДляПроверки.Добавить(СтрокаТранспортныхСредств.Перевозчик);
		КонецЕсли;
		
	КонецЦикла;
	
	КлючиОрганизаций = Справочники.КлючиРеквизитовОрганизацийЗЕРНО.СоответствиеКлючейПоОрганизациямКонтрагентам(МассивОрганизацийКонтрагентовДляПроверки);
	
	КлючиПокупателя       = КлючиОрганизаций.Получить(ОбъектРасчета.Покупатель);
	КлючиГрузоотправителя = КлючиОрганизаций.Получить(ОбъектРасчета.Грузоотправитель);
	КлючиГрузополучателя  = КлючиОрганизаций.Получить(ОбъектРасчета.Грузополучатель);
	КлючиОрганизации      = КлючиОрганизаций.Получить(ОбъектРасчета.Организация);
	
	МассивКорректируемыхСДИЗ = ОбщегоНазначения.ВыгрузитьКолонку(ОбъектРасчета.Товары, "КорректируемыйСДИЗ", Истина);
	ПустаяСсылка             = Справочники.СДИЗЗЕРНО.ПустаяСсылка();
	ИндексПустогоЗначения    = МассивКорректируемыхСДИЗ.Найти(ПустаяСсылка);
	
	Если ИндексПустогоЗначения <> Неопределено Тогда
		МассивКорректируемыхСДИЗ.Удалить(ИндексПустогоЗначения);
	КонецЕсли;
	
	ДанныеПокупателяГрузоотправителяГрузополучателяПоСДИЗ = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивКорректируемыхСДИЗ,
		"Покупатель, Грузоотправитель, Грузополучатель");
		
	ДанныеТранспортныхСредств       = ОбъектРасчета.ТранспортныеСредства;
	ДанныеМестПерегрузки            = ОбъектРасчета.МестаПерегрузки;
	ДанныеСвязанныхДокументов       = ОбъектРасчета.СвязанныеДокументы;
	ДанныеПрочихСвязанныхДокументов = ОбъектРасчета.СвязанныеДокументыПрочие;
	
	ДанныеХешаТранспортныхСредств       = Новый Массив;
	ДанныеХешаМестПерегрузки            = Новый Массив;
	ДанныеХешаСвязанныхДокументов       = Новый Массив;
	ДанныеХешаПрочихСвязанныхДокументов = Новый Массив;
	
	ТаблицаПоискаКлючейПоАдресам = Справочники.КлючиАдресовЗЕРНО.ТаблицаПоискаКлючейПоАдресам();
	
	Если ЗначениеЗаполнено(ОбъектРасчета.ПунктНазначения) Тогда
		
		НоваяСтрокаПоиска = ТаблицаПоискаКлючейПоАдресам.Добавить();
		НоваяСтрокаПоиска.Адрес        = ОбъектРасчета.ПунктНазначения;
		НоваяСтрокаПоиска.АдресСтрокой = ОбъектРасчета.ПунктНазначенияСтрокой;
		
	КонецЕсли;
	
	Для Каждого МестаПерегрузки Из ДанныеМестПерегрузки Цикл
		
		Если Не ЗначениеЗаполнено(МестаПерегрузки.Адрес) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаПоиска = ТаблицаПоискаКлючейПоАдресам.Добавить();
		НоваяСтрокаПоиска.Адрес        = МестаПерегрузки.Адрес;
		НоваяСтрокаПоиска.АдресСтрокой = МестаПерегрузки.АдресСтрокой;
		
	КонецЦикла;
	
	КлючиАдресов = Справочники.КлючиАдресовЗЕРНО.КлючиПоАдресуXDTO(ТаблицаПоискаКлючейПоАдресам);
	
	Для Каждого ТранспортныеСредства Из ДанныеТранспортныхСредств Цикл
		
		СтрокаДанных = СтруктураДанныхТранспортныхСредствДляРасчетаХешСуммыКорректировочногоСДИЗ();
		ЗаполнитьЗначенияСвойств(СтрокаДанных, ТранспортныеСредства);
		
		КлючиПеревозчиков = КлючиОрганизаций.Получить(СтрокаДанных.Перевозчик);
		
		Если КлючиПеревозчиков <> Неопределено
			И КлючиПеревозчиков.Количество() Тогда
			СтрокаДанных.Перевозчик = КлючиПеревозчиков[0];
		КонецЕсли;
		
		ДанныеХешаТранспортныхСредств.Добавить(СтрокаДанных);
		
	КонецЦикла;
	
	Для Каждого МестаПерегрузки Из ДанныеМестПерегрузки Цикл
		
		СтрокаДанных = СтруктураДанныхМестПерегрузкиДляРасчетаХешСуммыКорректировочногоСДИЗ();
		ЗаполнитьЗначенияСвойств(СтрокаДанных, МестаПерегрузки);
		
		КлючиПеревозчиков = КлючиОрганизаций.Получить(СтрокаДанных.Перевозчик);
		
		Если КлючиПеревозчиков <> Неопределено
			И КлючиПеревозчиков.Количество() Тогда
			СтрокаДанных.Перевозчик = КлючиПеревозчиков[0];
		КонецЕсли;
		
		КлючиАдресаПерегрузки = КлючиАдресов.Получить(СтрокаДанных.Адрес);
		
		Если КлючиАдресаПерегрузки <> Неопределено
			И КлючиАдресаПерегрузки.Количество() Тогда
			СтрокаДанных.Адрес = КлючиАдресаПерегрузки[0];
		КонецЕсли;
		
		ДанныеХешаМестПерегрузки.Добавить(СтрокаДанных);
		
	КонецЦикла;
	
	Для Каждого СвязанныеДокументы Из ДанныеСвязанныхДокументов Цикл
		
		СтрокаДанных = СтруктураДанныхСвязанныхДокументовДляРасчетаХешСуммыКорректировочногоСДИЗ();
		ЗаполнитьЗначенияСвойств(СтрокаДанных, СвязанныеДокументы);
		
		ДанныеХешаСвязанныхДокументов.Добавить(СтрокаДанных);
		
	КонецЦикла;
	
	Для Каждого ПрочиеСвязанныеДокументы Из ДанныеПрочихСвязанныхДокументов Цикл
		
		СтрокаДанных = СтруктураДанныхСвязанныхДокументовДляРасчетаХешСуммыКорректировочногоСДИЗ();
		ЗаполнитьЗначенияСвойств(СтрокаДанных, ПрочиеСвязанныеДокументы);
		
		ДанныеХешаПрочихСвязанныхДокументов.Добавить(СтрокаДанных);
		
	КонецЦикла;
	
	Для Каждого СтрокаТабличнойЧасти Из ОбъектРасчета.Товары Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.КорректируемыйСДИЗ) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеДляРасчетаХешСуммы = Новый Структура();
		ДанныеДляРасчетаХешСуммы.Вставить("ДанныеШапки",                     СтруктураДанныхШапкиДляРасчетаХешСуммыКорректировочногоСДИЗ());
		ДанныеДляРасчетаХешСуммы.Вставить("ДанныеТранспортныхСредств",       Новый Массив);
		ДанныеДляРасчетаХешСуммы.Вставить("ДанныеМестПерегрузки",            Новый Массив);
		ДанныеДляРасчетаХешСуммы.Вставить("ДанныеСвязанныхДокументов",       Новый Массив);
		ДанныеДляРасчетаХешСуммы.Вставить("ДанныеСвязанныхДокументовПрочие", Новый Массив);
		
		Для Каждого КлючИЗначение Из ДанныеДляРасчетаХешСуммы.ДанныеШапки Цикл
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектРасчета, КлючИЗначение.Ключ)
				И ЗначениеЗаполнено(ОбъектРасчета[КлючИЗначение.Ключ]) Тогда
				
				ДанныеДляРасчетаХешСуммы.ДанныеШапки.Вставить(КлючИЗначение.Ключ, ОбъектРасчета[КлючИЗначение.Ключ]);
				
			КонецЕсли;
			
		КонецЦикла;
		
		КлючиПунктаНазначения = КлючиАдресов.Получить(ОбъектРасчета.ПунктНазначения);
		
		Если КлючиПунктаНазначения <> Неопределено
			И КлючиПунктаНазначения.Количество() Тогда
			ДанныеДляРасчетаХешСуммы.ДанныеШапки.ПунктНазначения = КлючиПунктаНазначения[0];
		КонецЕсли;
		
		ДанныеПолучателяОтправителяПоСДИЗ = ДанныеПокупателяГрузоотправителяГрузополучателяПоСДИЗ.Получить(СтрокаТабличнойЧасти.КорректируемыйСДИЗ);
		
		Если ДанныеПолучателяОтправителяПоСДИЗ <> Неопределено Тогда
			
			ПокупательПоСДИЗ       = ДанныеПолучателяОтправителяПоСДИЗ.Покупатель;
			ГрузополучательПоСДИЗ  = ДанныеПолучателяОтправителяПоСДИЗ.Грузополучатель;
			ГрузоотправительПоСДИЗ = ДанныеПолучателяОтправителяПоСДИЗ.Грузоотправитель;
			
			Если КлючиПокупателя <> Неопределено Тогда
				
				Если КлючиПокупателя.Найти(ПокупательПоСДИЗ) <> Неопределено Тогда
					ДанныеДляРасчетаХешСуммы.ДанныеШапки.Покупатель       = ПокупательПоСДИЗ;
				ИначеЕсли КлючиПокупателя.Количество() Тогда
					ДанныеДляРасчетаХешСуммы.ДанныеШапки.Покупатель       = КлючиПокупателя[0];
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не ОбъектРасчета.Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭлеватор
				И (ОбъектРасчета.Перевозка Или ОбъектРасчета.Отгрузка Или ОбъектРасчета.Приемка) Тогда
				
				Если ОбъектРасчета.Приемка Или ОбъектРасчета.Перевозка Тогда
					
					Если КлючиГрузополучателя <> Неопределено Тогда
						
						Если КлючиГрузополучателя.Найти(ГрузополучательПоСДИЗ) <> Неопределено Тогда
							ДанныеДляРасчетаХешСуммы.ДанныеШапки.Грузополучатель   = ГрузополучательПоСДИЗ;
						ИначеЕсли КлючиГрузополучателя.Количество() Тогда
							ДанныеДляРасчетаХешСуммы.ДанныеШапки.Грузополучатель   = КлючиГрузополучателя[0];
						КонецЕсли;
						
					ИначеЕсли Не ЗначениеЗаполнено(ОбъектРасчета.Грузополучатель) Тогда
						
						Если ОбъектРасчета.Реализация Тогда
							
							Если ЗначениеЗаполнено(ГрузополучательПоСДИЗ) Тогда
								ДанныеДляРасчетаХешСуммы.ДанныеШапки.Грузополучатель = ДанныеДляРасчетаХешСуммы.ДанныеШапки.Покупатель;
							КонецЕсли;
							
						ИначеЕсли КлючиОрганизации <> Неопределено Тогда
							
							Если КлючиОрганизации.Найти(ГрузополучательПоСДИЗ) <> Неопределено Тогда
								ДанныеДляРасчетаХешСуммы.ДанныеШапки.Грузополучатель = ГрузополучательПоСДИЗ;
							Иначе
								ДанныеДляРасчетаХешСуммы.ДанныеШапки.Грузополучатель = КлючиОрганизации[0];
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если ОбъектРасчета.Отгрузка Или ОбъектРасчета.Перевозка Тогда
				
					Если КлючиГрузоотправителя <> Неопределено Тогда
						
						Если КлючиГрузоотправителя.Найти(ГрузоотправительПоСДИЗ) <> Неопределено Тогда
							ДанныеДляРасчетаХешСуммы.ДанныеШапки.Грузоотправитель   = ГрузоотправительПоСДИЗ;
						ИначеЕсли КлючиГрузоотправителя.Количество() Тогда
							ДанныеДляРасчетаХешСуммы.ДанныеШапки.Грузоотправитель   = КлючиГрузоотправителя[0];
						КонецЕсли;
						
					ИначеЕсли Не ЗначениеЗаполнено(ОбъектРасчета.Грузоотправитель) Тогда
						
						Если КлючиОрганизации <> Неопределено Тогда
							
							Если КлючиОрганизации.Найти(ГрузоотправительПоСДИЗ) <> Неопределено Тогда
								ДанныеДляРасчетаХешСуммы.ДанныеШапки.Грузоотправитель = ГрузоотправительПоСДИЗ;
							Иначе
								ДанныеДляРасчетаХешСуммы.ДанныеШапки.Грузоотправитель = КлючиОрганизации[0];
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("ИдентификаторСтрокиТоваров", СтрокаТабличнойЧасти.Идентификатор);
		СтрокиДокументовСертификации = ОбъектРасчета.ДокументыСертификации.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаДокументовСертификации Из СтрокиДокументовСертификации Цикл
			
			Если СтрокаДокументовСертификации.ТипДокумента = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.КлассификаторНСИЗЕРНО.ДокументНаПартиюВетеринарныйСертификат") Тогда
				ДанныеДляРасчетаХешСуммы.ДанныеШапки.ДатаВетеринарногоСертификата = СтрокаДокументовСертификации.Дата;
				ДанныеДляРасчетаХешСуммы.ДанныеШапки.НомерВетеринарногоСертификата = СтрокаДокументовСертификации.Номер;
				ДанныеДляРасчетаХешСуммы.ДанныеШапки.ДатаОкончанияВетеринарногоСертификата = СтрокаДокументовСертификации.СрокДействия;
			ИначеЕсли СтрокаДокументовСертификации.ТипДокумента = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.КлассификаторНСИЗЕРНО.ДокументНаПартиюДекларацияСоответствия") Тогда
				ДанныеДляРасчетаХешСуммы.ДанныеШапки.ДатаДекларацииСоответствия = СтрокаДокументовСертификации.Дата;
				ДанныеДляРасчетаХешСуммы.ДанныеШапки.НомерДекларацииСоответствия = СтрокаДокументовСертификации.Номер;
				ДанныеДляРасчетаХешСуммы.ДанныеШапки.ДатаОкончанияДекларацииСоответствия = СтрокаДокументовСертификации.СрокДействия;
			ИначеЕсли СтрокаДокументовСертификации.ТипДокумента = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.КлассификаторНСИЗЕРНО.ДокументНаПартиюФитосанитарныйСертификат") Тогда
				ДанныеДляРасчетаХешСуммы.ДанныеШапки.ДатаФитосанитарногоСертификата = СтрокаДокументовСертификации.Дата;
				ДанныеДляРасчетаХешСуммы.ДанныеШапки.НомерФитосанитарногоСертификата = СтрокаДокументовСертификации.Номер;
				ДанныеДляРасчетаХешСуммы.ДанныеШапки.ДатаОкончанияФитосанитарногоСертификата = СтрокаДокументовСертификации.СрокДействия;
			Иначе
				Продолжить;
			КонецЕсли;
			
		КонецЦикла;
		
		ДанныеДляРасчетаХешСуммы.ДанныеТранспортныхСредств       = ДанныеХешаТранспортныхСредств;
		ДанныеДляРасчетаХешСуммы.ДанныеМестПерегрузки            = ДанныеХешаМестПерегрузки;
		ДанныеДляРасчетаХешСуммы.ДанныеСвязанныхДокументов       = ДанныеХешаСвязанныхДокументов;
		ДанныеДляРасчетаХешСуммы.ДанныеСвязанныхДокументовПрочие = ДанныеХешаПрочихСвязанныхДокументов;
		
		ХешСумма = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(ДанныеДляРасчетаХешСуммы);
		
		СоответствиеХешСуммПострочно.Вставить(СтрокаТабличнойЧасти.КорректируемыйСДИЗ, ХешСумма);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИменаСвойствЗаполнения()

	СписокСвойствЗаполнения = Новый Массив;
	СписокСвойствЗаполнения.Добавить("КорректируемыйСДИЗ");

	Возврат СтрСоединить(СписокСвойствЗаполнения, ",");

КонецФункции

Функция РассчитатьНомераВерсий(НомераВерсий)
	
	Результат = Новый Соответствие;
	Результат.Вставить(Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗКорректировочный, 1);
	Результат.Вставить(Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗОтказПогашенияСДИЗПриКорректировке, 1);
	Результат.Вставить(Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗАннулированиеОтказаПогашенияСДИЗ, 1);
	Результат.Вставить(Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗ, 1);
	Результат.Вставить(Перечисления.ВидыОперацийЗЕРНО.АннулированиеФормированияПартии, 1);
	Результат.Вставить(Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗПриКорректировке, 1);
	Результат.Вставить(Перечисления.ВидыОперацийЗЕРНО.АннулированиеПартииПриКорректировке, 1);
	
	Для Каждого СтрокаТаблицы Из НомераВерсий Цикл
		Результат[СтрокаТаблицы.Операция] = СтрокаТаблицы.ПоследнийНомерВерсии + 1;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Функция ОперацияПоддерживаетСтатусыОбработки(Операция)
	
	Если Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеКорректировкиСДИЗРасчетСтатусаПоСтроке
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗАннулированиеОтказаПогашенияСДИЗРасчетСтатусаПоСтроке Тогда
		// Операции-исключения, не требующие хранения статуса по строке в регистре
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция АбстрактныеОперацииПоВидуОперации()
	
	Результат = Новый Соответствие;
	
	Результат.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРФ,Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРасчетСтатуса);
	Результат.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗИмпорт, Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРасчетСтатуса);
	Результат.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭлеватор, Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРасчетСтатуса);
	Результат.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭкспорт, Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРасчетСтатуса);
	Результат.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ЗапросПогашенийСДИЗ, Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРасчетСтатуса);
	
	Результат.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииИзДругихПартий,
		Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииРасчетСтатуса);
	
	Результат.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗ,
		Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗРасчетСтатуса);
	Результат.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.АннулированиеФормированияПартии,
		Перечисления.ВидыОперацийЗЕРНО.АннулированиеФормированияПартииРасчетСтатуса);
	
	Результат.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗКорректировочный,
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеКорректировкиСДИЗРасчетСтатуса);
	Результат.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗАннулированиеОтказаПогашенияСДИЗ,
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеКорректировкиСДИЗРасчетСтатуса);
	Результат.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеКорректировкиСДИЗРасчетСтатусаПоСтроке,
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеКорректировкиСДИЗРасчетСтатуса);
	Результат.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗАннулированиеОтказаПогашенияСДИЗРасчетСтатусаПоСтроке,
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеКорректировкиСДИЗРасчетСтатуса);
	Результат.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗОтказПогашенияСДИЗПриКорректировке,
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеКорректировкиСДИЗРасчетСтатуса);
	Результат.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗПриКорректировке,
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеКорректировкиСДИЗРасчетСтатуса);
	Результат.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.АннулированиеПартииПриКорректировке,
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеКорректировкиСДИЗРасчетСтатуса);
	
	Результат.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗОтказПогашенияСДИЗ,
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗОтказПогашенияСДИЗРасчетСтатуса);
	
	Результат.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ЗапросПогашенийСДИЗ,
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРасчетСтатуса);
	Результат.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭкспорт,
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРасчетСтатуса);
	Результат.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ЗапросПогашенийСДИЗ,
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРасчетСтатуса);
	
	Возврат Результат;
	
КонецФункции

Функция СтатусПринятПоВидуОперации(Операция)
	
	Статусы = Новый Соответствие;
	
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРФ,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.СДИЗОформлен);
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗИмпорт,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.СДИЗОформлен);
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭлеватор,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.СДИЗОформлен);
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭкспорт,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.СДИЗОформлен);
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ЗапросПогашенийСДИЗ,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.СДИЗОформлен);
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРасчетСтатуса,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.СДИЗОформлен);
	
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииИзДругихПартий,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ПартииСформированы);
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииРасчетСтатуса,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ПартииСформированы);
	
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗ,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОформлениеСДИЗАннулировано);
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗРасчетСтатуса,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОформлениеСДИЗАннулировано);
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.АннулированиеФормированияПартии,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ПартияАннулирована);
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.АннулированиеФормированияПартииРасчетСтатуса,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ПартияАннулирована);
	
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗКорректировочный,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.КорректировочныйСДИЗОформлен);
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗКорректировочныйРасчетСтатуса,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.КорректировочныйСДИЗОформлен);
	
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗОтказПогашенияСДИЗ,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОтказПогашенияСДИЗОформлен);
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗОтказПогашенияСДИЗРасчетСтатуса,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОтказПогашенияСДИЗОформлен);
	
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗОтказПогашенияСДИЗПриКорректировке,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОтказПогашенияСДИЗПриКорректировкеОформлен);
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗПриКорректировке,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОформлениеСДИЗПриКорректировкеАннулировано);
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.АннулированиеПартииПриКорректировке,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ПартияАннулирована);
	
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗАннулированиеОтказаПогашенияСДИЗ,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОтказПогашенияСДИЗАннулирован);
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗАннулированиеОтказаПогашенияСДИЗРасчетСтатусаПоСтроке,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОтказПогашенияСДИЗАннулирован);
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗАннулированиеОтказаПогашенияСДИЗРасчетСтатуса,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОтказПогашенияСДИЗАннулирован);
	
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеКорректировкиСДИЗРасчетСтатусаПоСтроке,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.КорректировкаОформленияСДИЗВыполнена);
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеКорректировкиСДИЗРасчетСтатуса,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.КорректировкаОформленияСДИЗОжидаетсяДействие);
	
	Возврат Статусы.Получить(Операция);
	
КонецФункции

Функция СтатусОбрабатываетсяПоВидуОперации(Операция)
	
	Статусы = Новый Соответствие;
	
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРФ,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОформлениеСДИЗОбрабатывается);
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗИмпорт,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОформлениеСДИЗОбрабатывается);
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭлеватор,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОформлениеСДИЗОбрабатывается);
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭкспорт,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОформлениеСДИЗОбрабатывается);
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ЗапросПогашенийСДИЗ,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОформлениеСДИЗОбрабатывается);
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРасчетСтатуса,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОформлениеСДИЗОбрабатывается);
	
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииИзДругихПартий,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ФормированиеПартииОбрабатывается);
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииРасчетСтатуса,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ФормированиеПартииОбрабатывается);
	
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗ,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.АннулированиеОформленияСДИЗОбрабатывается);
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗРасчетСтатуса,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.АннулированиеОформленияСДИЗОбрабатывается);
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.АннулированиеФормированияПартии,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.АннулированиеПартииОбрабатывается);
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.АннулированиеФормированияПартииРасчетСтатуса,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.АннулированиеПартииОбрабатывается);
	
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗКорректировочный,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.КорректировочныйСДИЗОбрабатывается);
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗКорректировочныйРасчетСтатуса,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.КорректировочныйСДИЗОбрабатывается);
	
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗОтказПогашенияСДИЗ,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОтказПогашенияСДИЗОбрабатывается);
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗОтказПогашенияСДИЗРасчетСтатуса,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОтказПогашенияСДИЗОбрабатывается);
	
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗОтказПогашенияСДИЗПриКорректировке,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОтказПогашенияСДИЗПриКорректировкеОбрабатывается);
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗПриКорректировке,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.АннулированиеОформленияСДИЗПриКорректировкеОбрабатывается);
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.АннулированиеПартииПриКорректировке,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.АннулированиеПартииОбрабатывается);
	
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗАннулированиеОтказаПогашенияСДИЗ,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.АннулированиеОтказаПогашенияСДИЗОбрабатывается);
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗАннулированиеОтказаПогашенияСДИЗРасчетСтатусаПоСтроке,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.АннулированиеОтказаПогашенияСДИЗОбрабатывается);
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗАннулированиеОтказаПогашенияСДИЗРасчетСтатуса,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.АннулированиеОтказаПогашенияСДИЗОбрабатывается);
	
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеКорректировкиСДИЗРасчетСтатусаПоСтроке,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.КорректировкаОформленияСДИЗОбрабатывается);
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеКорректировкиСДИЗРасчетСтатуса,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.КорректировкаОформленияСДИЗОбрабатывается);
	
	Возврат Статусы.Получить(Операция);
	
КонецФункции

Функция СтатусОшибкаПоВидуОперации(Операция)
	
	Статусы = Новый Соответствие;
	
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРФ,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОформлениеСДИЗОшибкаПередачи);
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗИмпорт,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОформлениеСДИЗОшибкаПередачи);
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭлеватор,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОформлениеСДИЗОшибкаПередачи);
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭкспорт,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОформлениеСДИЗОшибкаПередачи);
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ЗапросПогашенийСДИЗ,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОформлениеСДИЗОшибкаПередачи);
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРасчетСтатуса,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОформлениеСДИЗОшибкаПередачи);
	
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииИзДругихПартий,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ФормированиеПартииОшибкаПередачи);
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииРасчетСтатуса,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ФормированиеПартииОшибкаПередачи);
	
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗ,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.АннулированиеОформленияСДИЗОшибкаПередачи);
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗРасчетСтатуса,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.АннулированиеОформленияСДИЗОшибкаПередачи);
	
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.АннулированиеФормированияПартии,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.АннулированиеПартииОшибкаПередачи);
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.АннулированиеФормированияПартииРасчетСтатуса,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.АннулированиеПартииОшибкаПередачи);
	
	// корректировка
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗКорректировочный,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.КорректировочныйСДИЗОшибкаПередачи);
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗКорректировочныйРасчетСтатуса,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.КорректировочныйСДИЗОшибкаПередачи);
	
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗОтказПогашенияСДИЗ,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОтказПогашенияСДИЗОшибкаПередачи);
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗОтказПогашенияСДИЗРасчетСтатуса,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОтказПогашенияСДИЗОшибкаПередачи);
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗОтказПогашенияСДИЗПриКорректировке,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.ОтказПогашенияСДИЗПриКорректировкеОшибкаПередачи);
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗПриКорректировке,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.АннулированиеОформленияСДИЗПриКорректировкеОшибкаПередачи);
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.АннулированиеПартииПриКорректировке,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.АннулированиеПартииОшибкаПередачи);
	
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗАннулированиеОтказаПогашенияСДИЗ,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.АннулированиеОтказаПогашенияСДИЗОшибкаПередачи);
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗАннулированиеОтказаПогашенияСДИЗРасчетСтатусаПоСтроке,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.АннулированиеОтказаПогашенияСДИЗОшибкаПередачи);
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗАннулированиеОтказаПогашенияСДИЗРасчетСтатуса,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.АннулированиеОтказаПогашенияСДИЗОшибкаПередачи);
	
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеКорректировкиСДИЗРасчетСтатусаПоСтроке,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.КорректировкаОформленияСДИЗОшибкаОжидаетсяДействие);
	Статусы.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеКорректировкиСДИЗРасчетСтатуса,
		Перечисления.СтатусыОбработкиОформлениеСДИЗЗЕРНО.КорректировкаОформленияСДИЗОшибкаОжидаетсяДействие);
	
	Возврат Статусы.Получить(Операция);
	
КонецФункции

Функция ДействиеПриОшибкеПоВидуОперации(Операция)
	
	Действия = Новый Соответствие;
	Действия.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииИзДругихПартий,
		Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.СформируйтеПартии);
	Действия.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииРасчетСтатуса,
		Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.СформируйтеПартии);
	Действия.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.АннулированиеФормированияПартии,
		Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
	Действия.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ЗапросПогашенийСДИЗ,
		Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
	Действия.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРФ,
		Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
	Действия.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗИмпорт,
		Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
	Действия.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭкспорт,
		Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
	Действия.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРасчетСтатуса,
		Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
	Действия.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭлеватор,
		Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
	
	// Корректировка
	Действия.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗКорректировочный,
		Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОформитеКорректировкуСДИЗ);
	Действия.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗОтказПогашенияСДИЗ,
		Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОформитеОтказОтГашения);
	Действия.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗАннулированиеОтказаПогашенияСДИЗ,
		Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОформитеКорректировкуСДИЗ);
	Действия.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗПриКорректировке,
		Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОформитеКорректировкуСДИЗ);
	Действия.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.АннулированиеПартииПриКорректировке,
		Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОформитеКорректировкуСДИЗ);
	Действия.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗОтказПогашенияСДИЗПриКорректировке,
		Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОформитеКорректировкуСДИЗ);
	Действия.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗАннулированиеОтказаПогашенияСДИЗРасчетСтатусаПоСтроке,
		Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОформитеКорректировкуСДИЗ);
	Действия.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеКорректировкиСДИЗРасчетСтатусаПоСтроке,
		Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОформитеКорректировкуСДИЗ);
	Действия.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеКорректировкиСДИЗРасчетСтатуса,
		Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОформитеКорректировкуСДИЗ);
	Действия.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗКорректировочныйРасчетСтатуса,
		Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОформитеКорректировкуСДИЗ);
	Действия.Вставить(
		Перечисления.ВидыОперацийЗЕРНО.ОформлениеКорректировкиСДИЗРасчетСтатуса,
		Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОформитеКорректировкуСДИЗ);
		
	Возврат Действия.Получить(Операция);
	
КонецФункции

Функция СкопироватьПотребительскиеСвойстваИсходнойПартии(СтрокаПартии, ПотребительскиеСвойства, СообщениеXML)
	
	ТаблицаСвойств = ПотребительскиеСвойства.СкопироватьКолонки();
	ТаблицаСвойств.Колонки.Добавить("ДиапазонИспользуется", Новый ОписаниеТипов("Булево"));
	ТаблицаСвойств.Колонки.Добавить("ДиапазонС",            ОбщегоНазначения.ОписаниеТипаЧисло(10, 3));
	ТаблицаСвойств.Колонки.Добавить("ДиапазонПо",           ОбщегоНазначения.ОписаниеТипаЧисло(10, 3));
	
	ПараметрыОтбораПоСтроке = Новый Структура("Партия", СтрокаПартии.Партия);
	СвойстваПартии = ПотребительскиеСвойства.НайтиСтроки(ПараметрыОтбораПоСтроке);
	
	СтранаНазначения = Неопределено;
	Если СтрокаПартии.Назначение = Справочники.КлассификаторНСИЗЕРНО.НазначениеПартииВывозСТерриторииРФ Тогда
		СтранаНазначения = СтрокаПартии.СтранаНазначения;
	КонецЕсли;
	
	ПотребительскиеСвойстваПоОКПД2 = ИнтеграцияЗЕРНО.ПотребительскиеСвойстваПродукцииПоДаннымОКПД2(
		СтрокаПартии.ОКПД2, СтрокаПартии.Назначение,, СтранаНазначения);
	Для Каждого СтрокаТаблицы Из ПотребительскиеСвойстваПоОКПД2 Цикл
		СтрокаТЧ = ТаблицаСвойств.Добавить();
		ЗаполнитьЗначенияСвойств(
			СтрокаТЧ,
			СтрокаТаблицы,
			"ПотребительскоеСвойство, ПотребительскоеСвойствоИдентификатор, ДиапазонС, ДиапазонПо");
		ИнтеграцияЗЕРНОКлиентСервер.ЗаполнитьСтрокуПотребительскогоСвойства(Неопределено, СтрокаТЧ, СтрокаТаблицы);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из СвойстваПартии Цикл

		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		Отбор = Новый Структура("ПотребительскоеСвойство", СтрокаТаблицы.ПотребительскоеСвойство);
		НайденныеСтроки = ТаблицаСвойств.НайтиСтроки(Отбор);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ИнтеграцияЗЕРНО.СкопироватьЗначениеПотребительскогоСвойства(
				СтрокаТаблицы, НайденнаяСтрока, ПотребительскиеСвойстваПоОКПД2);
		КонецЦикла;
		
	КонецЦикла;
	
	ЕстьОшибки = Ложь;
	Для Каждого СтрокаТаблицы Из ТаблицаСвойств Цикл
		
		Если СтрокаТаблицы.ДиапазонИспользуется
			И (СтрокаТаблицы.ДиапазонС > СтрокаТаблицы.Значение
			  Или (ЗначениеЗаполнено(СтрокаТаблицы.ДиапазонПо) И СтрокаТаблицы.ДиапазонПо < СтрокаТаблицы.Значение)) Тогда
			ЕстьОшибки = Истина;
		ИначеЕсли Не СтрокаТаблицы.ДиапазонИспользуется
			И Не (ЗначениеЗаполнено(СтрокаТаблицы.Значение)) Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если ЕстьОшибки Тогда
			ИнтеграцияЗЕРНОКлиентСервер.ДобавитьТекстОшибки(
				СообщениеXML,
				СтрШаблон(
					НСтр("ru = 'В строке %1 из партии %2 нельзя автоматически выделить дочернюю партию.
					|Создайте новый документ ""Формирование партий из других партий"",  в табличной части ""Используемые партии"" укажите %2
					|и на закладке ""Новая партия"" заполните новые потребительские свойства.'"),
					СтрокаПартии.НомерСтроки,
					СтрокаПартии.НомерПартии));
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаСвойств;
	
КонецФункции

#КонецОбласти

#КонецЕсли
