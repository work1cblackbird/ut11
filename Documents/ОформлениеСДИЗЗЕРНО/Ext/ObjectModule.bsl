#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ФормированиеПартийЗЕРНО") Тогда
		ОформитьСДИЗПоИмпорту(ДанныеЗаполнения);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("Корректировочный")
		И ДанныеЗаполнения.Свойство("Основание")
		И ДанныеЗаполнения.Корректировочный Тогда
		
		ОформитьКорректировочныйСДИЗ(ДанныеЗаполнения.Основание);
		
	ИначеЕсли Корректировочный Тогда
		
		ОформитьКорректировочныйСДИЗ(ДанныеЗаполнения);
		
	КонецЕсли;
	
	ИнтеграцияЗЕРНОПереопределяемый.ОбработкаЗаполненияДокумента(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
	ЗаполнитьОбъектПоСтатистике();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРФ 
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭлеватор Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Лаборатория");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.КодТНВЭД");
	Иначе
		ОбработкаПроверкиЗаполненияЛаборатияПротоколИспытаний(МассивНепроверяемыхРеквизитов, Отказ);
	КонецЕсли;
	
	Если Корректировочный Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.КоличествоЗЕРНО");
	КонецЕсли;
	
	Если Не (Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭлеватор И Приемка) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДоговорХраненияПартий");
	КонецЕсли;
	
	Если Не Реализация Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДатаГПД");
		МассивНепроверяемыхРеквизитов.Добавить("НомерГПД");
		МассивНепроверяемыхРеквизитов.Добавить("Покупатель");
	КонецЕсли;
	
	Если Не ПеремещениеПартийЗерна Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДатаПеремещения");
		МассивНепроверяемыхРеквизитов.Добавить("МестоХраненияПриПеремещенииСтрокой");
		МассивНепроверяемыхРеквизитов.Добавить("ТипХраненияПриПеремещении");
		МассивНепроверяемыхРеквизитов.Добавить("УсловияХраненияПриПеремещении");
	КонецЕсли;
	
	Если Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭлеватор
		Или Не (Перевозка Или Приемка) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ПунктНазначенияСтрокой");
	КонецЕсли;
	
	ИнтеграцияЗЕРНОПереопределяемый.ПриОпределенииОбработкиПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	Если Корректировочный Тогда
		
		Для Каждого СтрокаКорректировок Из ДанныеКорректировки Цикл
			
			Если СтрокаКорректировок.Операция = Перечисления.ОперацииКорректировкиСДИЗ.ОформлениеСДИЗ И Не ЗначениеЗаполнено(СтрокаКорректировок.Партия) Тогда
				
				ШаблонСообщения = НСтр("ru = 'Укажите партию для создания нового СДИЗ в строке %1.'");
				ТекстСообщения  = СтрШаблон(ШаблонСообщения, СтрокаКорректировок.НомерСтроки);
				
				ОбщегоНазначения.СообщитьПользователю(
					ТекстСообщения,
					ЭтотОбъект,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
						"ДанныеКорректировки", СтрокаКорректировок.НомерСтроки, "Партия"),,
					Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого СтрокаТоваров Из Товары Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаТоваров.КоличествоЗЕРНО) И Не ЗначениеЗаполнено(СтрокаТоваров.КорректируемыйСДИЗ) Тогда
				
				ШаблонСообщения = НСтр("ru = 'Не заполнена колонка ""%1"" в строке %2 списка ""%3""'");
				ТекстСообщения  = СтрШаблон(ШаблонСообщения, "Масса, кг.", СтрокаКорректировок.НомерСтроки, "Товары");
				
				ОбщегоНазначения.СообщитьПользователю(
					ТекстСообщения,
					ЭтотОбъект,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
						"Товары", СтрокаКорректировок.НомерСтроки, "КоличествоЗЕРНО"),,
					Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗИмпорт
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭкспорт
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРФ И Реализация Тогда
		
		ПараметрыОтбора = Новый Структура("ИдентификаторСтрокиТоваров");
		
		ПредставлениеТиповДокументов = ПредставлениеТиповДокументовДляОписанияОшибок();
		
		ПроверятьУказаниеТНВЭД = (Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗИмпорт)
			Или (Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭкспорт);

		Для Каждого СтрокаТовары Из Товары Цикл
			
			Если ПроверятьУказаниеТНВЭД И Не ЗначениеЗаполнено(СтрокаТовары.КодТНВЭД) Тогда
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Не заполнен Код ТН ВЭД'"),
					ЭтотОбъект, 
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
						"Товары", СтрокаТовары.НомерСтроки, "КодТНВЭД"),,
					Отказ);
			КонецЕсли;
			
			ПараметрыОтбора.ИдентификаторСтрокиТоваров = СтрокаТовары.Идентификатор;
			
			СтрокиСертификации = ДокументыСертификации.НайтиСтроки(ПараметрыОтбора);
			Если СтрокиСертификации.Количество() = 0 Тогда
				
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Укажите декларацию соответствия!'"),
					ЭтотОбъект, 
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
						"Товары", СтрокаТовары.НомерСтроки, "ДокументыСертификацииПредставление"),,
					Отказ);
				
			Иначе
				
				ЕстьДекларацияСоответствия = Ложь;
				МассивОшибок = Новый Массив;
				Для Каждого СтрокаСертификации Из СтрокиСертификации Цикл
					
					Если Не ЗначениеЗаполнено(СтрокаСертификации.Номер) Тогда
						МассивОшибок.Добавить(
							СтрШаблон(
								НСтр("ru = 'Не заполнен номер %1!'"),
								ПредставлениеТиповДокументов[СтрокаСертификации.ТипДокумента]));
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(СтрокаСертификации.Дата) Тогда
						МассивОшибок.Добавить(
							СтрШаблон(
								НСтр("ru = 'Не заполнена дата %1!'"),
								ПредставлениеТиповДокументов[СтрокаСертификации.ТипДокумента]));
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(СтрокаСертификации.ТипДокумента) Тогда
						МассивОшибок.Добавить(
							СтрШаблон(
								НСтр("ru = 'Не заполнен тип %1!'"),
								ПредставлениеТиповДокументов[СтрокаСертификации.ТипДокумента]));
					ИначеЕсли СтрокаСертификации.ТипДокумента = Справочники.КлассификаторНСИЗЕРНО.ДокументНаПартиюДекларацияСоответствия Тогда
						ЕстьДекларацияСоответствия = Истина;
						Если Не ЗначениеЗаполнено(СтрокаСертификации.СрокДействия) Тогда
							МассивОшибок.Добавить(
								СтрШаблон(
									НСтр("ru = 'Не заполнен срок действия %1!'"),
									ПредставлениеТиповДокументов[СтрокаСертификации.ТипДокумента]));
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
				
				Если Не ЕстьДекларацияСоответствия Тогда
					МассивОшибок.Добавить(НСтр("ru = 'Не указана декларация соотвествия!'"));
				КонецЕсли;
				
				Если МассивОшибок.Количество() Тогда
					
					ОбщегоНазначения.СообщитьПользователю(
						СтрСоединить(МассивОшибок, Символы.ПС),
						ЭтотОбъект, 
						ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
							"Товары", СтрокаТовары.НомерСтроки, "ДокументыСертификацииПредставление"),,
						Отказ);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Перевозка Тогда
		
		Если ТранспортныеСредства.Количество() = 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Укажите транспортные средства!'"),
				Ссылка,,
				"Маршрут",
				Отказ);
		Иначе
			
			Для Каждого СтрокаТранспортногоСредства Из ТранспортныеСредства Цикл
				
				МассивОшибок = Новый Массив;
				
				Если Не ЗначениеЗаполнено(СтрокаТранспортногоСредства.Перевозчик) Тогда
					МассивОшибок.Добавить(
						СтрШаблон(
							НСтр("ru = 'Не заполнен перевозчик для транспортного средства %1, %2!'"),
							СтрокаТранспортногоСредства.ТипТранспорта,
							СтрокаТранспортногоСредства.НомерТранспортногоСредства));
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(СтрокаТранспортногоСредства.ТипТранспорта) Тогда
					МассивОшибок.Добавить(
						СтрШаблон(
							НСтр("ru = 'Не заполнен тип транспорта для перевозчика %1!'"),
							СтрокаТранспортногоСредства.Перевозчик));
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(СтрокаТранспортногоСредства.НомерТранспортногоСредства) Тогда
					МассивОшибок.Добавить(
						СтрШаблон(
							НСтр("ru = 'Не заполнен номер транспортного средства %1 для перевозчика %2!'"),
							СтрокаТранспортногоСредства.ТипТранспорта,
							СтрокаТранспортногоСредства.Перевозчик));
				КонецЕсли;
				
				Если МассивОшибок.Количество() Тогда
					
					ОбщегоНазначения.СообщитьПользователю(
						СтрСоединить(МассивОшибок, Символы.ПС),
						Ссылка,,
						"Маршрут",
						Отказ);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не (Реализация Или Перевозка Или Отгрузка Или Приемка) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не заполнен вид операции. Для формирования СДИЗ должен быть указан хотя бы один вид операции.'");
		
		ОбщегоНазначения.СообщитьПользователю(
			ТекстСообщения,
			ЭтотОбъект,
			"Перевозка",,
			Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	Если Не ЭтоНовый() Тогда
		
		ПрошлоеЗначениеПризнакаКорректировочный = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Корректировочный");
		
		Если Корректировочный И Не ПрошлоеЗначениеПризнакаКорректировочный Тогда
			
			ТекстОшибки = НСтр("ru = 'Изменение признака Корректировки оформления СДИЗ невозможно.
							   |Корректировка оформления СДИЗ может быть оформлена только по конкретному СДИЗ или Оформлению СДИЗ.'");
		
			ВызватьИсключение ТекстОшибки;
			
		ИначеЕсли Не Корректировочный И ПрошлоеЗначениеПризнакаКорректировочный Тогда
			
			ТекстОшибки = НСтр("ru = 'Изменение признака Корректировки оформления СДИЗ невозможно.'");
		
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаписатьСоответствиеНоменклатуры();
	ИнтеграцияИСПереопределяемый.ПередЗаписьюОбъекта(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияЗЕРНО.ЗаписатьСтатусДокументаЗЕРНОПоУмолчанию(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Если Корректировочный Тогда
		
		ТекстОшибки = НСтр("ru='Корректировку оформления СДИЗ нельзя создавать копированием.
			|
			|Для создания нового документа оформите его:
			|	- из конкретного СДИЗ ФГИС ""Зерно""
			|	- из Оформления СДИЗ ФГИС ""Зерно""
			|	- или воспользуйтесь кнопкой Создать - Корректировочный СДИЗ.'");
		ВызватьИсключение ТекстОшибки;
		
	Иначе
	
		Для Каждого СтрокаТоваров Из Товары Цикл
			СтрокаТоваров.Партия           = Неопределено;
			СтрокаТоваров.СДИЗ             = Неопределено;
			СтрокаТоваров.ВыделеннаяПартия = Неопределено;
			СтрокаТоваров.НоваяПартия      = Неопределено;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа
	ИнтеграцияИС.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	// Инициализация данных документа
	Документы.ОформлениеСДИЗЗЕРНО.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ИнтеграцияИС.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	РегистрыНакопления.ОстаткиПартийЗЕРНО.ОтразитьДвижения(ДополнительныеСвойства, Движения, Отказ);
	ИнтеграцияИСПереопределяемый.ОтразитьДвижения(ДополнительныеСвойства, Движения, Отказ);
	
	ИнтеграцияИС.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ИнтеграцияИСПереопределяемый.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения);
	
	ИнтеграцияИС.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработкаЗаполнения

Процедура ЗаполнитьОбъектПоСтатистике()
	
	ДанныеСтатистики = ЗаполнениеОбъектовПоСтатистикеЗЕРНО.ДанныеЗаполненияОформлениеСДИЗЗЕРНО(Организация);
	
	Для Каждого КлючИЗначение Из ДанныеСтатистики Цикл
		ЗаполнениеОбъектовПоСтатистикеЗЕРНО.ЗаполнитьПустойРеквизит(ЭтотОбъект, ДанныеСтатистики, КлючИЗначение.Ключ);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОформитьСДИЗПоИмпорту(ДанныеЗаполнения)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФормированиеПартийЗЕРНО.Организация КАК Организация,
	|	ФормированиеПартийЗЕРНО.ВидПродукции КАК ВидПродукции
	|ИЗ
	|	Документ.ФормированиеПартийЗЕРНО КАК ФормированиеПартийЗЕРНО
	|ГДЕ
	|	ФормированиеПартийЗЕРНО.Ссылка = &ДокументОснование";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗИмпорт;
	Если Выборка.Следующий() Тогда
		ВидПродукции = Выборка.ВидПродукции;
		Организация = Выборка.Организация;
		Перевозка = Истина;
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФормированиеПартийЗЕРНОТовары.ОКПД2,
	|	ФормированиеПартийЗЕРНОТовары.Номенклатура,
	|	ФормированиеПартийЗЕРНОТовары.Характеристика,
	|	ФормированиеПартийЗЕРНОТовары.Серия,
	|	ФормированиеПартийЗЕРНОТовары.СтатусУказанияСерий,
	|	ФормированиеПартийЗЕРНОТовары.КодТНВЭД,
	|	ФормированиеПартийЗЕРНОТовары.Количество,
	|	ФормированиеПартийЗЕРНОТовары.КоличествоЗЕРНО,
	|	ФормированиеПартийЗЕРНОТовары.Партия
	|ПОМЕСТИТЬ ОжидаемыеПартии
	|ИЗ
	|	Документ.ФормированиеПартийЗЕРНО.Товары КАК ФормированиеПартийЗЕРНОТовары
	|ГДЕ
	|	ФормированиеПартийЗЕРНОТовары.Ссылка = &ДокументОснование
	|	И ФормированиеПартийЗЕРНОТовары.Партия <> ЗНАЧЕНИЕ(Справочник.РеестрПартийЗЕРНО.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОформлениеСДИЗЗЕРНО.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ОформленныеДокументы
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО КАК ОформлениеСДИЗЗЕРНО
	|ГДЕ
	|	ОформлениеСДИЗЗЕРНО.Ссылка <> &Ссылка
	|	И ОформлениеСДИЗЗЕРНО.Проведен
	|	И ОформлениеСДИЗЗЕРНО.ДокументОснование = &ДокументОснование
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОформлениеСДИЗЗЕРНОТовары.Партия,
	|	СУММА(ОформлениеСДИЗЗЕРНОТовары.Количество) КАК Количество,
	|	СУММА(ОформлениеСДИЗЗЕРНОТовары.КоличествоЗЕРНО) КАК КоличествоЗЕРНО
	|ПОМЕСТИТЬ ОформленныеТовары
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО.Товары КАК ОформлениеСДИЗЗЕРНОТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОформленныеДокументы КАК ОформленныеДокументы
	|		ПО ОформлениеСДИЗЗЕРНОТовары.Ссылка = ОформленныеДокументы.Ссылка
	|СГРУППИРОВАТЬ ПО
	|	ОформлениеСДИЗЗЕРНОТовары.Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОжидаемыеПартии.Номенклатура КАК Номенклатура,
	|	ОжидаемыеПартии.Характеристика КАК Характеристика,
	|	ОжидаемыеПартии.Серия КАК Серия,
	|	ОжидаемыеПартии.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	ОжидаемыеПартии.ОКПД2 КАК ОКПД2,
	|	ОжидаемыеПартии.КодТНВЭД КАК КодТНВЭД,
	|	ОжидаемыеПартии.Партия КАК Партия,
	|	ОжидаемыеПартии.Количество - ЕСТЬNULL(ОформленныеТовары.Количество, 0) КАК Количество,
	|	ОжидаемыеПартии.КоличествоЗЕРНО - ЕСТЬNULL(ОформленныеТовары.КоличествоЗЕРНО, 0) КАК КоличествоЗЕРНО
	|ИЗ
	|	ОжидаемыеПартии КАК ОжидаемыеПартии
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОформленныеТовары КАК ОформленныеТовары
	|		ПО ОжидаемыеПартии.Партия = ОформленныеТовары.Партия
	|ГДЕ
	|	ОжидаемыеПартии.КоличествоЗЕРНО > ЕСТЬNULL(ОформленныеТовары.КоличествоЗЕРНО, 0)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru='В %1 отсутствует продукция для заполнения.'"), ДанныеЗаполнения);
	КонецЕсли;
	
	Товары.Очистить();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.Идентификатор = Новый УникальныйИдентификатор;
		
	КонецЦикла;
	
	НоменклатураСертификатов = Новый Массив();
	СтрокиПоНоменклатурам    = Новый Соответствие();
	
	Для Каждого СтрокаТаблицы Из Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			НоменклатураСертификатов.Добавить(СтрокаТаблицы.Номенклатура);
			СтрокиПоНоменклатуре = СтрокиПоНоменклатурам[СтрокаТаблицы.Номенклатура];
			Если СтрокиПоНоменклатуре = Неопределено Тогда
				СтрокиПоНоменклатуре = Новый Массив();
				СтрокиПоНоменклатурам[СтрокаТаблицы.Номенклатура] = СтрокиПоНоменклатуре;
			КонецЕсли;
			СтрокиПоНоменклатуре.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	СертификатыНоменклатуры = Новый Соответствие;
	ИнтеграцияИСПереопределяемый.ПриЗаполненииСертификатовНоменклатуры(НоменклатураСертификатов, СертификатыНоменклатуры);
	
	Если СертификатыНоменклатуры.Количество() Тогда
		
		ДобавленныеТипыПоСтрокам = Новый Соответствие();
		
		Для Каждого КлючИЗначение Из СертификатыНоменклатуры Цикл
			
			Для Каждого СтрокаТовары Из СтрокиПоНоменклатурам[КлючИЗначение.Ключ] Цикл
				
				Для Каждого ДанныеСертификата Из КлючИЗначение.Значение Цикл
					
					Если Не ДанныеСертификата.Бессрочный
						И ЗначениеЗаполнено(ДанныеСертификата.СрокДействия)
						И ДанныеСертификата.СрокДействия < ТекущаяДатаСеанса() Тогда
						Продолжить;
					КонецЕсли;
					
					СтруктураПоиска = Новый Структура;
					СтруктураПоиска.Вставить("ИдентификаторСтрокиТоваров", СтрокаТовары.Идентификатор);
					СтруктураПоиска.Вставить("ТипДокумента",               Неопределено);
					СтруктураПоиска.Вставить("Номер",                      ДанныеСертификата.НомерСертификации);
					СтруктураПоиска.Вставить("Дата",                       ДанныеСертификата.ДатаСертификации);
					СтруктураПоиска.Вставить("СрокДействия",               ДанныеСертификата.СрокДействия);
					
					Если ДанныеСертификата.ВидСертификации = Перечисления.ВидыДокументовОбязательнойСертификацииИС.СертификатСоответствия Тогда
						СтруктураПоиска.ТипДокумента = Справочники.КлассификаторНСИЗЕРНО.ДокументНаПартиюФитосанитарныйСертификат;
					ИначеЕсли ДанныеСертификата.ВидСертификации = Перечисления.ВидыДокументовОбязательнойСертификацииИС.ДекларацияСоответствия Тогда
						СтруктураПоиска.ТипДокумента = Справочники.КлассификаторНСИЗЕРНО.ДокументНаПартиюДекларацияСоответствия;
					КонецЕсли;
					
					ДобавленныеТипыПоСтроке = ДобавленныеТипыПоСтрокам[СтрокаТовары];
					Если ДобавленныеТипыПоСтроке = Неопределено Тогда
						ДобавленныеТипыПоСтроке = Новый Массив();
						ДобавленныеТипыПоСтрокам[СтрокаТовары] = ДобавленныеТипыПоСтроке;
					КонецЕсли;
					
					Если ДобавленныеТипыПоСтроке.Найти(СтруктураПоиска.ТипДокумента) = Неопределено
						И ДокументыСертификации.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
							
						НоваяСтрока = ДокументыСертификации.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПоиска);
						ДобавленныеТипыПоСтроке.Добавить(СтруктураПоиска.ТипДокумента);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКорректировочныйСДИЗПоОформлениюСДИЗ(ОснованиеОформлениеСДИЗ)
	
	СписокЗапросов = Новый СписокЗначений();
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ОформлениеСДИЗЗЕРНО.*
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО КАК ОформлениеСДИЗЗЕРНО
	|ГДЕ
	|	ОформлениеСДИЗЗЕРНО.Ссылка = &ДокументОснование",
	"Шапка");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ИсторияПогашенийСДИЗЗЕРНО.СДИЗ                   КАК СДИЗ,
	|	СУММА(ИсторияПогашенийСДИЗЗЕРНО.КоличествоЗЕРНО) КАК КоличествоОтказовПогашения
	|ПОМЕСТИТЬ ИсторияОтказовПогашенийПоСДИЗам
	|ИЗ
	|	РегистрСведений.ИсторияПогашенийСДИЗЗЕРНО КАК ИсторияПогашенийСДИЗЗЕРНО
	|ГДЕ
	|	ИсторияПогашенийСДИЗЗЕРНО.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗЕРНО.ОформлениеСДИЗОтказПогашенияСДИЗ)
	|	И ИсторияПогашенийСДИЗЗЕРНО.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаписейЗЕРНО.Подписано)
	|	И ИсторияПогашенийСДИЗЗЕРНО.СДИЗ В
	|		(ВЫБРАТЬ
	|			ОформлениеСДИЗЗЕРНОТовары.СДИЗ
	|		ИЗ
	|			Документ.ОформлениеСДИЗЗЕРНО.Товары КАК ОформлениеСДИЗЗЕРНОТовары
	|		ГДЕ
	|			ОформлениеСДИЗЗЕРНОТовары.Ссылка = &ДокументОснование
	|			И ОформлениеСДИЗЗЕРНОТовары.СДИЗ <> ЗНАЧЕНИЕ(Справочник.СДИЗЗерно.ПустаяСсылка))
	|СГРУППИРОВАТЬ ПО
	|	ИсторияПогашенийСДИЗЗЕРНО.СДИЗ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИсторияПогашенийСДИЗЗЕРНО.СДИЗ,
	|	СУММА(ИсторияПогашенийСДИЗЗЕРНО.КоличествоЗЕРНО)
	|ИЗ
	|	РегистрСведений.ИсторияПогашенийСДИЗЗЕРНО КАК ИсторияПогашенийСДИЗЗЕРНО
	|ГДЕ
	|	ИсторияПогашенийСДИЗЗЕРНО.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗЕРНО.ОформлениеСДИЗОтказПогашенияСДИЗ)
	|	И ИсторияПогашенийСДИЗЗЕРНО.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаписейЗЕРНО.Подписано)
	|	И ИсторияПогашенийСДИЗЗЕРНО.СДИЗ В
	|		(ВЫБРАТЬ
	|			ОформлениеСДИЗЗЕРНОТовары.КорректируемыйСДИЗ
	|		ИЗ
	|			Документ.ОформлениеСДИЗЗЕРНО.Товары КАК ОформлениеСДИЗЗЕРНОТовары
	|		ГДЕ
	|			ОформлениеСДИЗЗЕРНОТовары.Ссылка = &ДокументОснование
	|			И ОформлениеСДИЗЗЕРНОТовары.КорректируемыйСДИЗ <> ЗНАЧЕНИЕ(Справочник.СДИЗЗерно.ПустаяСсылка))
	|СГРУППИРОВАТЬ ПО
	|	ИсторияПогашенийСДИЗЗЕРНО.СДИЗ");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ОформлениеСДИЗЗЕРНОТовары.*,
	|	ОформлениеСДИЗЗЕРНОТовары.СДИЗ                                          КАК СДИЗ,
	|	СДИЗЗерно.Количество                                                    КАК КоличествоСДИЗ,
	|	ЕСТЬNULL(ИсторияОтказовПогашенийПоСДИЗам.КоличествоОтказовПогашения, 0) КАК КоличествоОтказовПогашения,
	|	КорректирующиеСДИЗЗерно.Ссылка                                          КАК КорректирующийСДИЗ
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО.Товары КАК ОформлениеСДИЗЗЕРНОТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИсторияОтказовПогашенийПоСДИЗам КАК ИсторияОтказовПогашенийПоСДИЗам
	|		ПО ОформлениеСДИЗЗЕРНОТовары.СДИЗ = ИсторияОтказовПогашенийПоСДИЗам.СДИЗ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СДИЗЗерно КАК СДИЗЗерно
	|		ПО ОформлениеСДИЗЗЕРНОТовары.СДИЗ = СДИЗЗерно.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СДИЗЗерно КАК КорректирующиеСДИЗЗерно
	|		ПО ОформлениеСДИЗЗЕРНОТовары.СДИЗ = КорректирующиеСДИЗЗерно.КорректируемыйСДИЗ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОбъектовСинхронизацииЗЕРНО КАК СтатусыОбъектовСинхронизацииЗЕРНО
	|		ПО ОформлениеСДИЗЗЕРНОТовары.Ссылка = СтатусыОбъектовСинхронизацииЗЕРНО.ОбъектСинхронизации
	|			И СтатусыОбъектовСинхронизацииЗЕРНО.ИдентификаторСтроки = """"
	|ГДЕ
	|	ОформлениеСДИЗЗЕРНОТовары.Ссылка = &ДокументОснование
	|	И ОформлениеСДИЗЗЕРНОТовары.СДИЗ <> ЗНАЧЕНИЕ(Справочник.СДИЗЗерно.ПустаяСсылка)
	|	И СДИЗЗерно.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСДИЗЗЕРНО.Оформлен)
	|	И СтатусыОбъектовСинхронизацииЗЕРНО.Статус В (&КонечныеСтатусыОформления)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОформлениеСДИЗЗЕРНОТовары.*,
	|	ОформлениеСДИЗЗЕРНОТовары.КорректируемыйСДИЗ                            КАК СДИЗ,
	|	СДИЗЗерно.Количество                                                    КАК КоличествоСДИЗ,
	|	ЕСТЬNULL(ИсторияОтказовПогашенийПоСДИЗам.КоличествоОтказовПогашения, 0) КАК КоличествоОтказовПогашения,
	|	КорректирующиеСДИЗЗерно.Ссылка                                          КАК КорректирующийСДИЗ
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО.Товары КАК ОформлениеСДИЗЗЕРНОТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИсторияОтказовПогашенийПоСДИЗам КАК ИсторияОтказовПогашенийПоСДИЗам
	|		ПО ОформлениеСДИЗЗЕРНОТовары.КорректируемыйСДИЗ = ИсторияОтказовПогашенийПоСДИЗам.СДИЗ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СДИЗЗерно КАК СДИЗЗерно
	|		ПО ОформлениеСДИЗЗЕРНОТовары.КорректируемыйСДИЗ = СДИЗЗерно.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СДИЗЗерно КАК КорректирующиеСДИЗЗерно
	|		ПО ОформлениеСДИЗЗЕРНОТовары.КорректируемыйСДИЗ = КорректирующиеСДИЗЗерно.КорректируемыйСДИЗ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОбъектовСинхронизацииЗЕРНО КАК СтатусыОбъектовСинхронизацииЗЕРНО
	|		ПО ОформлениеСДИЗЗЕРНОТовары.Ссылка = СтатусыОбъектовСинхронизацииЗЕРНО.ОбъектСинхронизации
	|			И СтатусыОбъектовСинхронизацииЗЕРНО.ИдентификаторСтроки = """"
	|ГДЕ
	|	ОформлениеСДИЗЗЕРНОТовары.Ссылка = &ДокументОснование
	|	И ОформлениеСДИЗЗЕРНОТовары.КорректируемыйСДИЗ <> ЗНАЧЕНИЕ(Справочник.СДИЗЗерно.ПустаяСсылка)
	|	И КорректирующиеСДИЗЗерно.Ссылка ЕСТЬ NULL
	|	И СДИЗЗерно.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСДИЗЗЕРНО.Оформлен)
	|	И СтатусыОбъектовСинхронизацииЗЕРНО.Статус В (&КонечныеСтатусыОформления)",
	"ТаблицаТоваров");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ОформлениеСДИЗЗЕРНОТранспортныеСредства.*
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО.ТранспортныеСредства КАК ОформлениеСДИЗЗЕРНОТранспортныеСредства
	|ГДЕ
	|	ОформлениеСДИЗЗЕРНОТранспортныеСредства.Ссылка = &ДокументОснование",
	"ТаблицаТранспортныеСредства");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ОформлениеСДИЗЗЕРНОМестаПерегрузки.*
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО.МестаПерегрузки КАК ОформлениеСДИЗЗЕРНОМестаПерегрузки
	|ГДЕ
	|	ОформлениеСДИЗЗЕРНОМестаПерегрузки.Ссылка = &ДокументОснование",
	"ТаблицаМестаПерегрузки");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ОформлениеСДИЗЗЕРНОСвязанныеДокументы.*
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО.СвязанныеДокументы КАК ОформлениеСДИЗЗЕРНОСвязанныеДокументы
	|ГДЕ
	|	ОформлениеСДИЗЗЕРНОСвязанныеДокументы.Ссылка = &ДокументОснование",
	"ТаблицаСвязанныеДокументы");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ОформлениеСДИЗЗЕРНОСвязанныеДокументыПрочие.*
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО.СвязанныеДокументыПрочие КАК ОформлениеСДИЗЗЕРНОСвязанныеДокументыПрочие
	|ГДЕ
	|	ОформлениеСДИЗЗЕРНОСвязанныеДокументыПрочие.Ссылка = &ДокументОснование",
	"ТаблицаСвязанныеДокументыПрочие");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ОформлениеСДИЗЗЕРНОДокументыСертификации.*
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО.ДокументыСертификации КАК ОформлениеСДИЗЗЕРНОДокументыСертификации
	|ГДЕ
	|	ОформлениеСДИЗЗЕРНОДокументыСертификации.Ссылка = &ДокументОснование",
	"ТаблицаДокументыСертификации");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование",         ОснованиеОформлениеСДИЗ);
	Запрос.УстановитьПараметр("КонечныеСтатусыОформления", Документы.ОформлениеСДИЗЗЕРНО.КонечныеСтатусы(Ложь));
	
	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка                           = РезультатЗапроса["Шапка"].Выбрать();
	//@skip-warning
	ТаблицаТоваров                  = РезультатЗапроса["ТаблицаТоваров"].Выбрать();
	//@skip-warning
	ТаблицаТранспортныеСредства     = РезультатЗапроса["ТаблицаТранспортныеСредства"].Выбрать();
	//@skip-warning
	ТаблицаМестаПерегрузки          = РезультатЗапроса["ТаблицаМестаПерегрузки"].Выбрать();
	//@skip-warning
	ТаблицаСвязанныеДокументы       = РезультатЗапроса["ТаблицаСвязанныеДокументы"].Выбрать();
	//@skip-warning
	ТаблицаСвязанныеДокументыПрочие = РезультатЗапроса["ТаблицаСвязанныеДокументыПрочие"].Выбрать();
	//@skip-warning
	ТаблицаДокументыСертификации    = РезультатЗапроса["ТаблицаДокументыСертификации"].Выбрать();
	
	Если Шапка.Следующий() Тогда
	
		Корректировочный  = Истина;
		ДокументОснование = ОснованиеОформлениеСДИЗ;
		
		КолонкиИсключенияЗаполнения = "Номер, Дата, Комментарий, Ответственный, Корректировочный, Проведен, ДокументОснование";
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Шапка,, КолонкиИсключенияЗаполнения);
		
	КонецЕсли;
	
	Если ТаблицаТоваров.Количество() = 0 Тогда
		
		ТекстСообщения = СтрШаблон(НСтр("ru='В %1 отсутствует продукция для заполнения.'"), ОснованиеОформлениеСДИЗ);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	Товары.Очистить();
	ДанныеКорректировки.Очистить();
	ТранспортныеСредства.Очистить();
	МестаПерегрузки.Очистить();
	СвязанныеДокументы.Очистить();
	СвязанныеДокументыПрочие.Очистить();
	ДокументыСертификации.Очистить();
	
	КолонкиИсключенияЗаполнения = "СДИЗ, КорректируемыйСДИЗ, Идентификатор, Количество, КоличествоЗЕРНО";
	МассивСтрокДляПересчетаКоличества = Новый Массив;
	
	СоответствиеИдентификаторовСтрок = Новый Соответствие();
	
	Пока ТаблицаТоваров.Следующий() Цикл
		
		Если ЗначениеЗаполнено(ТаблицаТоваров.КорректирующийСДИЗ) Тогда
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'СДИЗ %1 уже был скорректирован.
				|Актуальная версия - %2, необходимо корректировать последнюю версию СДИЗ.'"), ТаблицаТоваров.СДИЗ, ТаблицаТоваров.КорректирующийСДИЗ);
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		
		КонецЕсли;
		
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТаблицаТоваров,, КолонкиИсключенияЗаполнения);
		
		НоваяСтрока.Идентификатор      = Строка(Новый УникальныйИдентификатор());
		
		НоваяСтрока.КоличествоЗЕРНО    = ТаблицаТоваров.КоличествоСДИЗ - ТаблицаТоваров.КоличествоОтказовПогашения;
		НоваяСтрока.КорректируемыйСДИЗ = ТаблицаТоваров.СДИЗ;
		
		ДанныеНовыхИдентификаторов = СоответствиеИдентификаторовСтрок.Получить(ТаблицаТоваров.Идентификатор);
		
		Если ДанныеНовыхИдентификаторов = Неопределено Тогда
			ДанныеНовыхИдентификаторов = Новый Массив;
		КонецЕсли;
		
		ДанныеНовыхИдентификаторов.Добавить(НоваяСтрока.Идентификатор);
		СоответствиеИдентификаторовСтрок.Вставить(ТаблицаТоваров.Идентификатор, ДанныеНовыхИдентификаторов);
		
		МассивСтрокДляПересчетаКоличества.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	ИнтеграцияЗЕРНОПереопределяемый.ЗаполнитьКоличествоПоКоличествуЗЕРНО(МассивСтрокДляПересчетаКоличества);
	
	Пока ТаблицаТранспортныеСредства.Следующий() Цикл
		
		НоваяСтрока = ТранспортныеСредства.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТаблицаТранспортныеСредства);
		
	КонецЦикла;
	
	Пока ТаблицаМестаПерегрузки.Следующий() Цикл
		
		НоваяСтрока = МестаПерегрузки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТаблицаМестаПерегрузки);
		
	КонецЦикла;
	
	Пока ТаблицаСвязанныеДокументы.Следующий() Цикл
		
		НоваяСтрока = СвязанныеДокументы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТаблицаСвязанныеДокументы);
		
	КонецЦикла;
	
	Пока ТаблицаСвязанныеДокументыПрочие.Следующий() Цикл
		
		НоваяСтрока = СвязанныеДокументыПрочие.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТаблицаСвязанныеДокументыПрочие);
		
	КонецЦикла;
	
	Пока ТаблицаДокументыСертификации.Следующий() Цикл
		
		ДанныеНовыхИдентификаторов = СоответствиеИдентификаторовСтрок.Получить(ТаблицаДокументыСертификации.ИдентификаторСтрокиТоваров);
		
		Если ДанныеНовыхИдентификаторов = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаНовыхИдентификаторов Из ДанныеНовыхИдентификаторов Цикл
			
			НоваяСтрока = ДокументыСертификации.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТаблицаДокументыСертификации);
			
			НоваяСтрока.ИдентификаторСтрокиТоваров = СтрокаНовыхИдентификаторов;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКорректировочныйСДИЗПоСДИЗЗерно(ОснованиеСДИЗЗерно = Неопределено, ТаблицаПоиска = Неопределено)
	
	Если ОснованиеСДИЗЗерно = Неопределено И ТаблицаПоиска = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Некорректный вызов заполнения на основании - не передано данных для заполнения.'");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустоеЗначениеСерии", ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры"));
	
	СписокЗапросов = Новый СписокЗначений();
	
	Если Не ОснованиеСДИЗЗерно = Неопределено Тогда
		
		СписокЗапросов.Добавить(
		"ВЫБРАТЬ
		|	&СДИЗ        КАК КорректируемыйСДИЗ,
		|	НЕОПРЕДЕЛЕНО КАК Номенклатура,
		|	НЕОПРЕДЕЛЕНО КАК Характеристика,
		|	НЕОПРЕДЕЛЕНО КАК Серия,
		|	ЛОЖЬ         КАК ОтборПоНоменклатуреХарактеристике
		|ПОМЕСТИТЬ ВТ_ДанныеКорректируемогоСДИЗ");
		
		Запрос.УстановитьПараметр("СДИЗ",                ОснованиеСДИЗЗерно);
		
	Иначе
		
		СписокЗапросов.Добавить(
		"ВЫБРАТЬ
		|	ТаблицаПоиска.КорректируемыйСДИЗ КАК КорректируемыйСДИЗ,
		|	ТаблицаПоиска.Номенклатура       КАК Номенклатура,
		|	ТаблицаПоиска.Характеристика     КАК Характеристика,
		|	ТаблицаПоиска.Серия              КАК Серия,
		|	ИСТИНА                           КАК ОтборПоНоменклатуреХарактеристике
		|ПОМЕСТИТЬ ВТ_ДанныеКорректируемогоСДИЗ
		|ИЗ
		|	&ТаблицаПоиска КАК ТаблицаПоиска");
		
		Запрос.УстановитьПараметр("ТаблицаПоиска",       ТаблицаПоиска);
		
	КонецЕсли;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ИсторияПогашенийСДИЗЗЕРНО.СДИЗ                   КАК СДИЗ,
	|	СУММА(ИсторияПогашенийСДИЗЗЕРНО.КоличествоЗЕРНО) КАК КоличествоОтказовПогашения
	|ПОМЕСТИТЬ ИсторияОтказовПогашенийПоСДИЗам
	|ИЗ
	|	РегистрСведений.ИсторияПогашенийСДИЗЗЕРНО КАК ИсторияПогашенийСДИЗЗЕРНО
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеКорректируемогоСДИЗ КАК ВТ_ДанныеКорректируемогоСДИЗ
	|		ПО ИсторияПогашенийСДИЗЗЕРНО.СДИЗ = ВТ_ДанныеКорректируемогоСДИЗ.КорректируемыйСДИЗ
	|ГДЕ
	|	ИсторияПогашенийСДИЗЗЕРНО.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗЕРНО.ОформлениеСДИЗОтказПогашенияСДИЗ)
	|	И ИсторияПогашенийСДИЗЗЕРНО.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаписейЗЕРНО.Подписано)
	|СГРУППИРОВАТЬ ПО
	|	ИсторияПогашенийСДИЗЗЕРНО.СДИЗ");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	СДИЗЗЕРНО.Ссылка                                               КАК КорректируемыйСДИЗ,
	|	СДИЗЗЕРНО.Партия                                               КАК Партия,
	|	ВТ_ДанныеКорректируемогоСДИЗ.Номенклатура                      КАК Номенклатура,
	|	ВТ_ДанныеКорректируемогоСДИЗ.Характеристика                    КАК Характеристика,
	|	ВТ_ДанныеКорректируемогоСДИЗ.Серия                             КАК Серия,
	|	ВТ_ДанныеКорректируемогоСДИЗ.ОтборПоНоменклатуреХарактеристике КАК ОтборПоНоменклатуреХарактеристике
	|ПОМЕСТИТЬ ВТ_ДанныеКорректируемогоСДИЗСПартией
	|ИЗ
	|	Справочник.СДИЗЗЕРНО КАК СДИЗЗЕРНО
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеКорректируемогоСДИЗ КАК ВТ_ДанныеКорректируемогоСДИЗ
	|	ПО СДИЗЗЕРНО.Ссылка = ВТ_ДанныеКорректируемогоСДИЗ.КорректируемыйСДИЗ");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ВТ_ДанныеКорректируемогоСДИЗСПартией.КорректируемыйСДИЗ КАК СДИЗ,
	|	ВТ_ДанныеКорректируемогоСДИЗСПартией.Партия             КАК Партия,
	|	СоответствиеПартийЗЕРНО.Номенклатура                    КАК Номенклатура,
	|	СоответствиеПартийЗЕРНО.Характеристика                  КАК Характеристика,
	|	СоответствиеПартийЗЕРНО.Серия                           КАК Серия,
	|	СоответствиеПартийЗЕРНО.Серия <> &ПустоеЗначениеСерии   КАК СерияЗаполнена
	|ИЗ
	|	ВТ_ДанныеКорректируемогоСДИЗСПартией КАК ВТ_ДанныеКорректируемогоСДИЗСПартией
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеПартийЗЕРНО КАК СоответствиеПартийЗЕРНО
	|		ПО ВТ_ДанныеКорректируемогоСДИЗСПартией.Партия = СоответствиеПартийЗЕРНО.Партия
	|			И ВТ_ДанныеКорректируемогоСДИЗСПартией.Номенклатура = СоответствиеПартийЗЕРНО.Номенклатура
	|			И ВТ_ДанныеКорректируемогоСДИЗСПартией.Характеристика = СоответствиеПартийЗЕРНО.Характеристика
	|			И ВТ_ДанныеКорректируемогоСДИЗСПартией.Серия = СоответствиеПартийЗЕРНО.Серия
	|ГДЕ ВТ_ДанныеКорректируемогоСДИЗСПартией.ОтборПоНоменклатуреХарактеристике
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ДанныеКорректируемогоСДИЗСПартией.КорректируемыйСДИЗ КАК СДИЗ,
	|	ВТ_ДанныеКорректируемогоСДИЗСПартией.Партия             КАК Партия,
	|	СоответствиеПартийЗЕРНО.Номенклатура                    КАК Номенклатура,
	|	СоответствиеПартийЗЕРНО.Характеристика                  КАК Характеристика,
	|	СоответствиеПартийЗЕРНО.Серия                           КАК Серия,
	|	СоответствиеПартийЗЕРНО.Серия <> &ПустоеЗначениеСерии   КАК СерияЗаполнена
	|ИЗ
	|	ВТ_ДанныеКорректируемогоСДИЗСПартией КАК ВТ_ДанныеКорректируемогоСДИЗСПартией
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеПартийЗЕРНО КАК СоответствиеПартийЗЕРНО
	|		ПО ВТ_ДанныеКорректируемогоСДИЗСПартией.Партия = СоответствиеПартийЗЕРНО.Партия
	|ГДЕ НЕ ВТ_ДанныеКорректируемогоСДИЗСПартией.ОтборПоНоменклатуреХарактеристике
	|
	|УПОРЯДОЧИТЬ ПО
	|	СерияЗаполнена УБЫВ", "НоменклатураСопоставленияПоПартиям");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	СДИЗЗЕРНО.*,        
	|	СДИЗЗЕРНО.ВидОперации                                                   КАК Операция,
	|	СДИЗЗЕРНО.ПунктНазначения.Идентификатор                                 КАК ПунктНазначенияСтрокой,
	|	ЕСТЬNULL(ИсторияОтказовПогашенийПоСДИЗам.КоличествоОтказовПогашения, 0) КАК КоличествоОтказовПогашения,
	|	СДИЗЗЕРНО.Партия.ОКПД2                                                  КАК ОКПД2,
	|	СДИЗЗЕРНО.Партия.КодТНВЭД                                               КАК КодТНВЭД,
	|	СДИЗЗЕРНО.ДоговорГПД.Дата                                               КАК ДатаДоговораГПД,
	|	СДИЗЗЕРНО.ДоговорГПД.Номер                                              КАК НомерДоговораГПД,
	|	СДИЗЗЕРНО.ДекларацияСоответствия.Дата                                   КАК ДатаДекларацииСоответствия,
	|	СДИЗЗЕРНО.ДекларацияСоответствия.Номер                                  КАК НомерДекларацииСоответствия,
	|	СДИЗЗЕРНО.ДекларацияСоответствия.ДатаОкончания                          КАК СрокОкончанияДекларацииСоответствия,
	|	СДИЗЗЕРНО.ВетеринарныйСертификат.Дата                                   КАК ДатаВетеринарногоСертификата,
	|	СДИЗЗЕРНО.ВетеринарныйСертификат.Номер                                  КАК НомерВетеринарногоСертификата,
	|	СДИЗЗЕРНО.ВетеринарныйСертификат.ДатаОкончания                          КАК СрокОкончанияВетеринарногоСертификата,
	|	СДИЗЗЕРНО.ФитосанитарныйСертификат.Дата                                 КАК ДатаФитосанитарногоСертификата,
	|	СДИЗЗЕРНО.ФитосанитарныйСертификат.Номер                                КАК НомерФитосанитарногоСертификата,
	|	СДИЗЗЕРНО.ФитосанитарныйСертификат.ДатаОкончания                        КАК СрокОкончанияФитосанитарногоСертификата,
	|	СДИЗЗЕРНО.ПротоколИспытаний.Номер                                       КАК НомерПротоколаИспытаний,
	|	СДИЗЗЕРНО.ПротоколИспытаний.Дата                                        КАК ДатаПротоколаИспытаний,
	|	СДИЗЗЕРНО.КонтрактВЭД.Номер                                             КАК НомерКонтрактаВЭД,
	|	СДИЗЗЕРНО.КонтрактВЭД.Дата                                              КАК ДатаКонтрактаВЭД,
	|	СДИЗЗЕРНО.ДополнительноеСоглашение.Номер                                КАК НомерДопСоглашенияВЭД,
	|	СДИЗЗЕРНО.ДополнительноеСоглашение.Дата                                 КАК ДатаДопСоглашенияВЭД
	|ИЗ
	|	Справочник.СДИЗЗЕРНО КАК СДИЗЗЕРНО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеКорректируемогоСДИЗ КАК ВТ_ДанныеКорректируемогоСДИЗ
	|		ПО СДИЗЗЕРНО.Ссылка = ВТ_ДанныеКорректируемогоСДИЗ.КорректируемыйСДИЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИсторияОтказовПогашенийПоСДИЗам КАК ИсторияОтказовПогашенийПоСДИЗам
	|		ПО ИсторияОтказовПогашенийПоСДИЗам.СДИЗ = СДИЗЗЕРНО.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РеестрПартийЗЕРНО КАК ПартииЗЕРНО
	|		ПО СДИЗЗЕРНО.Партия = ПартииЗЕРНО.Ссылка",
	"Шапка");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СДИЗЗЕРНОТранспортныеСредства.Перевозчик,
	|	СДИЗЗЕРНОТранспортныеСредства.ТипТранспорта,
	|	СДИЗЗЕРНОТранспортныеСредства.НомерТранспортногоСредства,
	|	СДИЗЗЕРНОТранспортныеСредства.НомерАвтомобильногоКонтейнера
	|ИЗ
	|	Справочник.СДИЗЗЕРНО.ТранспортныеСредства КАК СДИЗЗЕРНОТранспортныеСредства
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеКорректируемогоСДИЗ КАК ВТ_ДанныеКорректируемогоСДИЗ
	|		ПО СДИЗЗЕРНОТранспортныеСредства.Ссылка = ВТ_ДанныеКорректируемогоСДИЗ.КорректируемыйСДИЗ",
	"ТаблицаТранспортныеСредства");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СДИЗЗЕРНОМестаПерегрузки.Перевозчик,
	|	СДИЗЗЕРНОМестаПерегрузки.Адрес КАК Адрес,
	|	СДИЗЗЕРНОМестаПерегрузки.Адрес.Идентификатор КАК АдресСтрокой
	|ИЗ
	|	Справочник.СДИЗЗЕРНО.МестаПерегрузки КАК СДИЗЗЕРНОМестаПерегрузки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеКорректируемогоСДИЗ КАК ВТ_ДанныеКорректируемогоСДИЗ
	|		ПО СДИЗЗЕРНОМестаПерегрузки.Ссылка = ВТ_ДанныеКорректируемогоСДИЗ.КорректируемыйСДИЗ",
	"ТаблицаМестаПерегрузки");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СДИЗЗЕРНОСвязанныеДокументы.ПервичныйДокумент.ТипДокумента КАК ТипДокумента,
	|	СДИЗЗЕРНОСвязанныеДокументы.ПервичныйДокумент.Номер КАК Номер,
	|	СДИЗЗЕРНОСвязанныеДокументы.ПервичныйДокумент.Дата КАК Дата
	|ИЗ
	|	Справочник.СДИЗЗЕРНО.СвязанныеДокументы КАК СДИЗЗЕРНОСвязанныеДокументы
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеКорректируемогоСДИЗ КАК ВТ_ДанныеКорректируемогоСДИЗ
	|		ПО СДИЗЗЕРНОСвязанныеДокументы.Ссылка = ВТ_ДанныеКорректируемогоСДИЗ.КорректируемыйСДИЗ",
	"ТаблицаСвязанныеДокументы");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СДИЗЗЕРНОСвязанныеДокументыПрочие.ПервичныйДокумент.ТипДокумента КАК ТипДокумента,
	|	СДИЗЗЕРНОСвязанныеДокументыПрочие.ПервичныйДокумент.Номер КАК Номер,
	|	СДИЗЗЕРНОСвязанныеДокументыПрочие.ПервичныйДокумент.Дата КАК Дата
	|ИЗ
	|	Справочник.СДИЗЗЕРНО.СвязанныеДокументыПрочие КАК СДИЗЗЕРНОСвязанныеДокументыПрочие
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеКорректируемогоСДИЗ КАК ВТ_ДанныеКорректируемогоСДИЗ
	|		ПО СДИЗЗЕРНОСвязанныеДокументыПрочие.Ссылка = ВТ_ДанныеКорректируемогоСДИЗ.КорректируемыйСДИЗ",
	"ТаблицаСвязанныеДокументыПрочие");
	
	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка                                     = РезультатЗапроса["Шапка"].Выбрать();
	//@skip-warning
	ТаблицаТранспортныеСредства               = РезультатЗапроса["ТаблицаТранспортныеСредства"].Выбрать();
	//@skip-warning
	ТаблицаМестаПерегрузки                    = РезультатЗапроса["ТаблицаМестаПерегрузки"].Выбрать();
	//@skip-warning
	ТаблицаСвязанныеДокументы                 = РезультатЗапроса["ТаблицаСвязанныеДокументы"].Выбрать();
	//@skip-warning
	ТаблицаСвязанныеДокументыПрочие           = РезультатЗапроса["ТаблицаСвязанныеДокументыПрочие"].Выбрать();             
	//@skip-warning
	ТаблицаНоменклатураСопоставленияПоПартиям = РезультатЗапроса["НоменклатураСопоставленияПоПартиям"].Выгрузить();
	
	Корректировочный = Истина;
	МассивСтрокДляПересчетаКоличества = Новый Массив();
	
	Товары.Очистить();
	ДанныеКорректировки.Очистить();
	ТранспортныеСредства.Очистить();
	МестаПерегрузки.Очистить();
	СвязанныеДокументы.Очистить();
	СвязанныеДокументыПрочие.Очистить();
	ДокументыСертификации.Очистить();
	
	Пока Шапка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Шапка);
		МассивКлючейОрганизаций = Новый Массив;
		
		Если ЗначениеЗаполнено(Шапка.Покупатель) И МассивКлючейОрганизаций.Найти(Шапка.Покупатель) = Неопределено Тогда
			МассивКлючейОрганизаций.Добавить(Шапка.Покупатель);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Шапка.Грузоотправитель) И МассивКлючейОрганизаций.Найти(Шапка.Грузоотправитель) = Неопределено Тогда
			МассивКлючейОрганизаций.Добавить(Шапка.Грузоотправитель);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Шапка.Грузополучатель) И МассивКлючейОрганизаций.Найти(Шапка.Грузополучатель) = Неопределено Тогда
			МассивКлючейОрганизаций.Добавить(Шапка.Грузополучатель);
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(Шапка.Лаборатория) И МассивКлючейОрганизаций.Найти(Шапка.Лаборатория) = Неопределено Тогда
			МассивКлючейОрганизаций.Добавить(Шапка.Лаборатория);
		КонецЕсли;
		
		ДанныеКонтрагентовОрганизаций = Справочники.КлючиРеквизитовОрганизацийЗЕРНО.ОрганизацииКонтрагентыПоКлючам(МассивКлючейОрганизаций);
		
		Если ЗначениеЗаполнено(Шапка.Покупатель) Тогда
		
			ДанныеПоПокупателю       = ДанныеКонтрагентовОрганизаций.Получить(Шапка.Покупатель);
			
			Если ДанныеПоПокупателю <> Неопределено Тогда
				Покупатель       = ?(ЗначениеЗаполнено(ДанныеПоПокупателю.Организация), ДанныеПоПокупателю.Организация, ДанныеПоПокупателю.Контрагент);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Шапка.Грузоотправитель) Тогда
		
			ДанныеПоГрузоотправителю = ДанныеКонтрагентовОрганизаций.Получить(Шапка.Грузоотправитель);
			
			Если ДанныеПоГрузоотправителю <> Неопределено Тогда
				Грузоотправитель = ?(ЗначениеЗаполнено(ДанныеПоГрузоотправителю.Организация), ДанныеПоГрузоотправителю.Организация, ДанныеПоГрузоотправителю.Контрагент);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Шапка.Грузополучатель) Тогда
		
			ДанныеПоГрузополучателю  = ДанныеКонтрагентовОрганизаций.Получить(Шапка.Грузополучатель);
			
			Если ДанныеПоГрузополучателю <> Неопределено Тогда
				Грузополучатель  = ?(ЗначениеЗаполнено(ДанныеПоГрузополучателю.Организация), ДанныеПоГрузополучателю.Организация, ДанныеПоГрузополучателю.Контрагент);
			КонецЕсли;
			
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(Шапка.Лаборатория) Тогда
			
			ДанныеПоЛаборатории = ДанныеКонтрагентовОрганизаций.Получить(Шапка.Лаборатория);
			
		   	Если ДанныеПоЛаборатории <> Неопределено Тогда
				Лаборатория  = ?(ЗначениеЗаполнено(ДанныеПоЛаборатории.Организация), ДанныеПоЛаборатории.Организация, ДанныеПоЛаборатории.Контрагент);
			КонецЕсли;
				
		КонецЕсли;
		
		МассивКлючейАдресов = Новый Массив;
		
		Если ЗначениеЗаполнено(Шапка.ПунктОтправления) И МассивКлючейАдресов.Найти(Шапка.ПунктОтправления) = Неопределено Тогда
			МассивКлючейАдресов.Добавить(Шапка.ПунктОтправления);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Шапка.ПунктНазначения) И МассивКлючейАдресов.Найти(Шапка.ПунктНазначения) = Неопределено Тогда
			МассивКлючейАдресов.Добавить(Шапка.ПунктНазначения);
		КонецЕсли;
		
		ДанныеСопоставленийАдресов = Справочники.КлючиАдресовЗЕРНО.СкладыКонтрагентыПоКлючам(МассивКлючейАдресов);
		
		Если ЗначениеЗаполнено(Шапка.ПунктОтправления) Тогда
			
			ДанныеСопоставленияПунктаОтправления = ДанныеСопоставленийАдресов.Получить(Шапка.ПунктОтправления);
			
			Если ДанныеСопоставленияПунктаОтправления <> Неопределено И ДанныеСопоставленияПунктаОтправления.Количество() Тогда
				
				ЗначениеСопоставления = ДанныеСопоставленияПунктаОтправления[0];
				ПунктОтправления = ?(ЗначениеЗаполнено(ЗначениеСопоставления.Склад), ЗначениеСопоставления.Склад, ЗначениеСопоставления.Контрагент);
			
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Шапка.ПунктНазначения) Тогда
			
			ДанныеСопоставленияПунктаНазначения = ДанныеСопоставленийАдресов.Получить(Шапка.ПунктНазначения);
			
			Если ДанныеСопоставленияПунктаНазначения <> Неопределено И ДанныеСопоставленияПунктаНазначения.Количество() Тогда
				
				ЗначениеСопоставления = ДанныеСопоставленияПунктаНазначения[0];
				ПунктНазначенияСопоставленныйОбъект = ?(ЗначениеЗаполнено(ЗначениеСопоставления.Склад), ЗначениеСопоставления.Склад, ЗначениеСопоставления.Контрагент);
			
			КонецЕсли;
			
			ВидКонтактнойИнформации = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
			ДанныеПунктаНазначения  = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(Шапка.ПунктНазначенияСтрокой, 
				ВидКонтактнойИнформации);
				
			ПунктНазначенияСтрокой = Шапка.ПунктНазначенияСтрокой;
			ПунктНазначения        = ДанныеПунктаНазначения;
			
		КонецЕсли;
		
		ДатаГПД  = Шапка.ДатаДоговораГПД;
		НомерГПД = Шапка.НомерДоговораГПД;
		
		НоваяСтрокаТоваров = Товары.Добавить();
		
		КолонкиИсключенияЗаполнения = "Количество";
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТоваров, Шапка,, КолонкиИсключенияЗаполнения);
		
		НоваяСтрокаТоваров.КоличествоЗЕРНО    = Шапка.Количество - Шапка.КоличествоОтказовПогашения;
		НоваяСтрокаТоваров.КорректируемыйСДИЗ = Шапка.Ссылка;
		
		ИдентификаторСтрокиТоваров = Новый УникальныйИдентификатор();
		НоваяСтрокаТоваров.Идентификатор = ИдентификаторСтрокиТоваров;
		
		НоваяСтрокаТоваров.Лаборатория             = Лаборатория;
		НоваяСтрокаТоваров.НомерПротоколаИспытаний = НомерПротоколаИспытаний;
		НоваяСтрокаТоваров.ДатаПротоколаИспытаний  = ДатаПротоколаИспытаний;
		
		СтруктураОтбора = Новый Структура("СДИЗ", Шапка.Ссылка);
		СтрокиСопоставленияНоменклатуры = ТаблицаНоменклатураСопоставленияПоПартиям.НайтиСтроки(СтруктураОтбора);
		
		Если СтрокиСопоставленияНоменклатуры.Количество() Тогда
			
			СтруктураОтбора = Новый Структура("КорректируемыйСДИЗ", Шапка.Ссылка);
			СтрокиТоваровПоСДИЗ = Товары.НайтиСтроки(СтруктураОтбора);
			
			Для Каждого СтрокаТоваров Из СтрокиТоваровПоСДИЗ Цикл
				
				СтрокаТоваров.Номенклатура   = СтрокиСопоставленияНоменклатуры[0].Номенклатура;
				СтрокаТоваров.Характеристика = СтрокиСопоставленияНоменклатуры[0].Характеристика;
				СтрокаТоваров.Серия          = СтрокиСопоставленияНоменклатуры[0].Серия;
				
			КонецЦикла;
			
		КонецЕсли;
		
		МассивСтрокДляПересчетаКоличества.Добавить(НоваяСтрокаТоваров);
		
		Если ЗначениеЗаполнено(Шапка.ДатаДекларацииСоответствия) И ЗначениеЗаполнено(Шапка.НомерДекларацииСоответствия) Тогда
			
			НоваяСтрокаДокументовСертификации = ДокументыСертификации.Добавить();
			НоваяСтрокаДокументовСертификации.ТипДокумента               = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.КлассификаторНСИЗЕРНО.ДокументНаПартиюДекларацияСоответствия");
			НоваяСтрокаДокументовСертификации.Номер                      = Шапка.НомерДекларацииСоответствия;
			НоваяСтрокаДокументовСертификации.Дата                       = Шапка.ДатаДекларацииСоответствия;
			НоваяСтрокаДокументовСертификации.СрокДействия               = Шапка.СрокОкончанияДекларацииСоответствия;
			НоваяСтрокаДокументовСертификации.ИдентификаторСтрокиТоваров = ИдентификаторСтрокиТоваров;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Шапка.ДатаВетеринарногоСертификата) И ЗначениеЗаполнено(Шапка.НомерВетеринарногоСертификата) Тогда
			
			НоваяСтрокаДокументовСертификации = ДокументыСертификации.Добавить();
			НоваяСтрокаДокументовСертификации.ТипДокумента               = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.КлассификаторНСИЗЕРНО.ДокументНаПартиюВетеринарныйСертификат");
			НоваяСтрокаДокументовСертификации.Номер                      = Шапка.НомерВетеринарногоСертификата;
			НоваяСтрокаДокументовСертификации.Дата                       = Шапка.ДатаВетеринарногоСертификата;
			НоваяСтрокаДокументовСертификации.СрокДействия               = Шапка.СрокОкончанияВетеринарногоСертификата;
			НоваяСтрокаДокументовСертификации.ИдентификаторСтрокиТоваров = ИдентификаторСтрокиТоваров;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Шапка.ДатаФитосанитарногоСертификата) И ЗначениеЗаполнено(Шапка.НомерФитосанитарногоСертификата) Тогда
			
			НоваяСтрокаДокументовСертификации = ДокументыСертификации.Добавить();
			НоваяСтрокаДокументовСертификации.ТипДокумента               = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.КлассификаторНСИЗЕРНО.ДокументНаПартиюФитосанитарныйСертификат");
			НоваяСтрокаДокументовСертификации.Номер                      = Шапка.НомерФитосанитарногоСертификата;
			НоваяСтрокаДокументовСертификации.Дата                       = Шапка.ДатаФитосанитарногоСертификата;
			НоваяСтрокаДокументовСертификации.СрокДействия               = Шапка.СрокОкончанияФитосанитарногоСертификата;
			НоваяСтрокаДокументовСертификации.ИдентификаторСтрокиТоваров = ИдентификаторСтрокиТоваров;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИнтеграцияЗЕРНОПереопределяемый.ЗаполнитьКоличествоПоКоличествуЗЕРНО(МассивСтрокДляПересчетаКоличества);
	
	Пока ТаблицаТранспортныеСредства.Следующий() Цикл
		
		НоваяСтрока = ТранспортныеСредства.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТаблицаТранспортныеСредства);
		
		Если ЗначениеЗаполнено(ТаблицаТранспортныеСредства.Перевозчик) Тогда
			
			ДанныеПеревозчика = Справочники.КлючиРеквизитовОрганизацийЗЕРНО.ОрганизацииКонтрагентыПоКлючам(ТаблицаТранспортныеСредства.Перевозчик).Получить(ТаблицаТранспортныеСредства.Перевозчик);
			
			Если ДанныеПеревозчика <> Неопределено Тогда
				НоваяСтрока.Перевозчик  = ?(ЗначениеЗаполнено(ДанныеПеревозчика.Организация), ДанныеПеревозчика.Организация, ДанныеПеревозчика.Контрагент);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Пока ТаблицаМестаПерегрузки.Следующий() Цикл
		
		НоваяСтрока = МестаПерегрузки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТаблицаМестаПерегрузки);
		
		ВидКонтактнойИнформации = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
		ДанныеМестаПерегрузки   = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(ТаблицаМестаПерегрузки.АдресСтрокой, 
			ВидКонтактнойИнформации);
				
		НоваяСтрока.АдресСтрокой = ТаблицаМестаПерегрузки.АдресСтрокой;
		НоваяСтрока.Адрес        = ДанныеМестаПерегрузки;
		
		Если ЗначениеЗаполнено(ТаблицаМестаПерегрузки.Перевозчик) Тогда
			
			ДанныеПеревозчика = Справочники.КлючиРеквизитовОрганизацийЗЕРНО.ОрганизацииКонтрагентыПоКлючам(ТаблицаМестаПерегрузки.Перевозчик).Получить(ТаблицаМестаПерегрузки.Перевозчик);
			
			Если ДанныеПеревозчика <> Неопределено Тогда
				НоваяСтрока.Перевозчик  = ?(ЗначениеЗаполнено(ДанныеПеревозчика.Организация), ДанныеПеревозчика.Организация, ДанныеПеревозчика.Контрагент);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Пока ТаблицаСвязанныеДокументы.Следующий() Цикл
		
		НоваяСтрока = СвязанныеДокументы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТаблицаСвязанныеДокументы);
		
	КонецЦикла;
	
	Пока ТаблицаСвязанныеДокументыПрочие.Следующий() Цикл
		
		НоваяСтрока = СвязанныеДокументыПрочие.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТаблицаСвязанныеДокументыПрочие);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКорректировочныйСДИЗПоТаблицеДанных(ТаблицаОснования)
	
	ТаблицаПоиска = Документы.ОформлениеСДИЗЗЕРНО.ИнициализацияТаблицыПоискаКорректировкиПоСДИЗ();
	
	Для Каждого СтрокаДанных Из ТаблицаОснования Цикл
		
		НоваяСтрокаПоиска = ТаблицаПоиска.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПоиска, СтрокаДанных);
		
	КонецЦикла;
	
	ЗаполнитьКорректировочныйСДИЗПоСДИЗЗерно(, ТаблицаПоиска);
	
КонецПроцедуры

Процедура ПроверитьВозможностьСозданияКорректировкиСДИЗ()
	
	// Нельзя делать корректировки СДИЗ на СДИЗ, которые уже скорректированы
	КорректируемыеСДИЗы = Новый Массив;
	
	Для Каждого СтрокаТоваров Из Товары Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТоваров.КорректируемыйСДИЗ) Тогда
			Продолжить;
		КонецЕсли;
		
		Если КорректируемыеСДИЗы.Найти(СтрокаТоваров.КорректируемыйСДИЗ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		КорректируемыеСДИЗы.Добавить(СтрокаТоваров.КорректируемыйСДИЗ);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СДИЗЗЕРНО.Ссылка                                  КАК АктуальныйСДИЗ,
		|	СДИЗЗЕРНО.КорректируемыйСДИЗ                      КАК КорректируемыйСДИЗ,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(СДИЗЗЕРНО.Ссылка)             КАК ПредставлениеАктуальногоСДИЗ,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(СДИЗЗЕРНО.КорректируемыйСДИЗ) КАК ПредставлениеКорректируемогоСДИЗ
		|ИЗ
		|	Справочник.СДИЗЗЕРНО КАК СДИЗЗЕРНО
		|ГДЕ
		|	СДИЗЗЕРНО.КорректируемыйСДИЗ В (&КорректируемыеСДИЗ)
		|	И СДИЗЗЕРНО.КорректируемыйСДИЗ <> ЗНАЧЕНИЕ(Справочник.СДИЗЗЕРНО.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("КорректируемыеСДИЗ", КорректируемыеСДИЗы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ШаблонСообщения = НСтр("ru = 'СДИЗ %1 был скорректирован. Актуальная версия - %2.'");
	Отказ = Ложь;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(ШаблонСообщения, ВыборкаДетальныеЗаписи.ПредставлениеКорректируемогоСДИЗ, ВыборкаДетальныеЗаписи.ПредставлениеАктуальногоСДИЗ),
			ВыборкаДетальныеЗаписи.АктуальныйСДИЗ,
			,
			,
			Отказ);
		
	КонецЦикла;
	
	Если Отказ Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось создать корректирующий СДИЗ по уже скорректированным СДИЗам.'");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОформитьКорректировочныйСДИЗ(ДанныеОснования)
	
	ТипЗначенияОснования = ТипЗначенияОснованияЗаполнения(ДанныеОснования);
	
	Если ТипЗначенияОснования = Тип("ДокументСсылка.ОформлениеСДИЗЗЕРНО") Тогда
		
		ЗаполнитьКорректировочныйСДИЗПоОформлениюСДИЗ(ДанныеОснования);
		
	ИначеЕсли ТипЗначенияОснования = Тип("СправочникСсылка.СДИЗЗЕРНО") Тогда
		
		ЗаполнитьКорректировочныйСДИЗПоСДИЗЗерно(ДанныеОснования);
		
	ИначеЕсли ТипЗначенияОснования = Тип("ТаблицаЗначений") Тогда
		
		ЗаполнитьКорректировочныйСДИЗПоТаблицеДанных(ДанныеОснования);
		
	КонецЕсли;
	
	ТабличнаяЧастьТовары = Товары.Выгрузить();
	
	Документы.ОформлениеСДИЗЗЕРНО.РассчитатьХешСуммыПоДокументуКорректировочныйСДИЗ(ЭтотОбъект, ТабличнаяЧастьТовары, Истина);
	Документы.ОформлениеСДИЗЗЕРНО.ЗаполнитьДанныеКорректировкиПоДокументуКорректировочныйСДИЗ(ЭтотОбъект, ТабличнаяЧастьТовары);
	
	ПроверитьВозможностьСозданияКорректировкиСДИЗ();
	
КонецПроцедуры

Функция ТипЗначенияОснованияЗаполнения(ДанныеОснования)
	
	ТипЗначенияОснования = Неопределено;
	
	Если ТипЗнч(ДанныеОснования) = Тип("СправочникСсылка.СДИЗЗЕРНО") Тогда
		
		ТипЗначенияОснования = Тип("СправочникСсылка.СДИЗЗЕРНО");
		
	ИначеЕсли ТипЗнч(ДанныеОснования) = Тип("ДокументСсылка.ОформлениеСДИЗЗЕРНО") Тогда
		
		ТипЗначенияОснования = Тип("ДокументСсылка.ОформлениеСДИЗЗЕРНО");
		
	ИначеЕсли ТипЗнч(ДанныеОснования) = Тип("ТаблицаЗначений")
		И ДанныеОснования.Колонки.Найти("КорректируемыйСДИЗ") <> Неопределено Тогда
		
		ТипЗначенияОснования = Тип("ТаблицаЗначений");
		
	ИначеЕсли ТипЗнч(ДанныеОснования) = Тип("Массив") И ДанныеОснования.Количество() Тогда
		
		Если ТипЗнч(ДанныеОснования[0]) = Тип("СправочникСсылка.СДИЗЗЕРНО") Тогда
		
			ТипЗначенияОснования = Тип("СправочникСсылка.СДИЗЗЕРНО");
			
		ИначеЕсли ТипЗнч(ДанныеОснования[0]) = Тип("ДокументСсылка.ОформлениеСДИЗЗЕРНО") Тогда
			
			ТипЗначенияОснования = Тип("ДокументСсылка.ОформлениеСДИЗЗЕРНО");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТипЗначенияОснования;
	
КонецФункции

#КонецОбласти

Функция ПредставлениеТиповДокументовДляОписанияОшибок()
	
	Результат = Новый Соответствие();
	Результат.Вставить(
		Справочники.КлассификаторНСИЗЕРНО.ДокументНаПартиюДекларацияСоответствия,
		НСтр("ru = 'декларации соответствия'"));
	
	Результат.Вставить(
		Справочники.КлассификаторНСИЗЕРНО.ДокументНаПартиюФитосанитарныйСертификат,
		НСтр("ru = 'фитосанитарного сертификата'"));
	
	Результат.Вставить(
		Справочники.КлассификаторНСИЗЕРНО.ДокументНаПартиюВетеринарныйСертификат,
		НСтр("ru = 'ветеринарного сертификата'"));
	
	Результат.Вставить(
		Справочники.КлассификаторНСИЗЕРНО.ПустаяСсылка(),
		НСтр("ru = 'документа сертификации'"));
	
	Возврат Результат
	
КонецФункции

Процедура ОбработкаПроверкиЗаполненияЛаборатияПротоколИспытаний(МассивНепроверяемыхРеквизитов, Отказ)
	
	Если Не ЗначениеЗаполнено(Лаборатория) Тогда
		Отбор = Новый Структура("Лаборатория", ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("КонтрагентГосИС"));
		СтрокиТоваров = Товары.НайтиСтроки(Отбор);
		ЕстьОшибки = Ложь;
		Для Каждого СтрокаТовары Из СтрокиТоваров Цикл
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'В строке %1 списка ""Товары"" не заполнена Лаборатория'"),
				СтрокаТовары.НомерСтроки);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					"Товары", СтрокаТовары.НомерСтроки, "Лаборатория"),,
				Отказ);
			ЕстьОшибки = Истина;
		КонецЦикла;
		Если ЕстьОшибки Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Укажите Лаборатию или заполните реквизиты в табличной части ""Товары""'"),
				ЭтотОбъект,
				"Лаборатория",,
				Отказ);
		КонецЕсли;
		МассивНепроверяемыхРеквизитов.Добавить("Лаборатория");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьСоответствиеНоменклатуры()
	
	ДанныеСопоставления = Товары.ВыгрузитьКолонки("Номенклатура, Характеристика, Серия, Партия");
	
	Для Каждого СтрокаТаблицы Из Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.КорректируемыйСДИЗ) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ДанныеСопоставления.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		Если ЗначениеЗаполнено(СтрокаТаблицы.ВыделеннаяПартия) Тогда
			НоваяСтрока = ДанныеСопоставления.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Партия = СтрокаТаблицы.ВыделеннаяПартия;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТаблицы.НоваяПартия) Тогда
			НоваяСтрока = ДанныеСопоставления.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Партия = СтрокаТаблицы.НоваяПартия;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаКорректировки Из ДанныеКорректировки Цикл
		СтруктураПоиска = Новый Структура("КорректируемыйСДИЗ", СтрокаКорректировки.КорректируемыйСДИЗ);
		ПоискСтрок = Товары.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаТаблицы Из ПоискСтрок Цикл
			НоваяСтрока = ДанныеСопоставления.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			Если ЗначениеЗаполнено(СтрокаКорректировки.Партия) Тогда
				НоваяСтрока.Партия = СтрокаКорректировки.Партия;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(СтрокаКорректировки.ВыделеннаяПартия) Тогда
			НоваяСтрока = ДанныеСопоставления.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Партия = СтрокаКорректировки.ВыделеннаяПартия;
		КонецЕсли;
	КонецЦикла;
	
	ИнтеграцияЗЕРНО.ЗаписатьСоответствиеНоменклатуры(ЭтотОбъект, ДанныеСопоставления);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
