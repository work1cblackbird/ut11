#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДействияПриОбменеЕГАИС

// Статус после подготовки к передаче данных.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.УведомлениеОПланируемомИмпортеЕГАИС - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС.
// 
// Возвращаемое значение:
//  См. РегистрыСведений.СтатусыДокументовЕГАИС.ВозвращаемоеЗначениеДальнейшиеДействияСтатус
Функция СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция) Экспорт
	
	Если Операция = ПередачаУведомления() Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиУведомленияОПланируемомИмпортеЕГАИС.КПередаче);
		
	ИначеЕсли Операция = ЗапросОтмены() Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиУведомленияОПланируемомИмпортеЕГАИС.ЗапросНаОтменуПроведенияКПередаче);
		
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.УведомлениеОПланируемомИмпортеЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиУведомленияОПланируемомИмпортеЕГАИС - Статус обработки сообщения
// 
// Возвращаемое значение:
//  См. РегистрыСведений.СтатусыДокументовЕГАИС.ВозвращаемоеЗначениеДальнейшиеДействияСтатус
Функция СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Если СтатусОбработки = Неопределено Тогда
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПереданоВУТМ;
	КонецЕсли;
	
	Если Операция = ПередачаУведомления() Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиУведомленияОПланируемомИмпортеЕГАИС.ПереданВУТМ;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПолученЕГАИС);
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПроведенЕГАИС);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиУведомленияОПланируемомИмпортеЕГАИС.ОшибкаПередачи;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	ИначеЕсли Операция = ЗапросОтмены() Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиУведомленияОПланируемомИмпортеЕГАИС.ЗапросНаОтменуПроведенияПереданВУТМ;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПолученЕГАИС);
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПроведенЕГАИС);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиУведомленияОПланируемомИмпортеЕГАИС.ЗапросНаОтменуПроведенияОшибка;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ЗапроситеОтменуПроведения);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после получения данных из ЕГАИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.УведомлениеОПланируемомИмпортеЕГАИС - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция обмена с ЕГАИС.
//  ДополнительныеПараметры - Неопределено, Структура - дополнительные параметры со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиУведомленияОПланируемомИмпортеЕГАИС - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция, на которую получена квитанция.
// 
// Возвращаемое значение:
//  См. РегистрыСведений.СтатусыДокументовЕГАИС.ВозвращаемоеЗначениеДальнейшиеДействияСтатус
Функция СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
	СтатусыБазовыйПроцесс.Принят           = Перечисления.СтатусыОбработкиУведомленияОПланируемомИмпортеЕГАИС.ПроведенЕГАИС;
	СтатусыБазовыйПроцесс.Обрабатывается   = Перечисления.СтатусыОбработкиУведомленияОПланируемомИмпортеЕГАИС.ОбрабатываетсяЕГАИС;
	СтатусыБазовыйПроцесс.Ошибка           = Перечисления.СтатусыОбработкиУведомленияОПланируемомИмпортеЕГАИС.ОшибкаПередачи;
	СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные);
	СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ЗапроситеОтменуПроведения);
	СтатусыБазовыйПроцесс.УведомлениеОРегистрацииДвижения = Ложь;
	
	СтатусыЗапросНаОтменуПроведения = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
	СтатусыЗапросНаОтменуПроведения.Принят           = Перечисления.СтатусыОбработкиУведомленияОПланируемомИмпортеЕГАИС.Отменен;
	СтатусыЗапросНаОтменуПроведения.Обрабатывается   = Перечисления.СтатусыОбработкиУведомленияОПланируемомИмпортеЕГАИС.ЗапросНаОтменуПроведенияОбрабатываетсяЕГАИС;
	СтатусыЗапросНаОтменуПроведения.Ошибка           = Перечисления.СтатусыОбработкиУведомленияОПланируемомИмпортеЕГАИС.ЗапросНаОтменуПроведенияОшибка;
	СтатусыЗапросНаОтменуПроведения.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ЗапроситеОтменуПроведения);
	СтатусыЗапросНаОтменуПроведения.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию);
	СтатусыЗапросНаОтменуПроведения.УведомлениеОРегистрацииДвижения = Ложь;
	
	ВыполнитьРасчетТекущегоСостояния = Истина;
	Если ДополнительныеПараметры <> Неопределено
		И ДополнительныеПараметры.Свойство("ТекущееСостояние")
		И ДополнительныеПараметры.ТекущееСостояние <> Неопределено Тогда
		ВыполнитьРасчетТекущегоСостояния = ДополнительныеПараметры.ТекущееСостояние;
	КонецЕсли;
	
	Статусы = Неопределено;
	Если ДополнительныеПараметры.ОперацияКвитанции = ПередачаУведомления() Тогда
		Статусы = СтатусыБазовыйПроцесс;
	ИначеЕсли ДополнительныеПараметры.ОперацияКвитанции = ЗапросОтмены() Тогда
		Статусы = СтатусыЗапросНаОтменуПроведения;
	КонецЕсли;
	
	Если Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияПолученЕГАИС Тогда
		
		Если Статусы = Неопределено Тогда
			ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
		КонецЕсли;
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыПриПолученииКвитанции(
			ДокументСсылка,
			"КвитанцияПолученЕГАИС", ДополнительныеПараметры.СтатусОбработки,
			Статусы, ВыполнитьРасчетТекущегоСостояния);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияПроведенЕГАИС Тогда
		
		Если Статусы = Неопределено Тогда
			ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
		КонецЕсли;
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыПриПолученииКвитанции(
			ДокументСсылка,
			"КвитанцияПроведенЕГАИС", ДополнительныеПараметры.СтатусОбработки,
			Статусы, ВыполнитьРасчетТекущегоСостояния);
		
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Обновить статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.УведомлениеОПланируемомИмпортеЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
//  ДополнительныеПараметры - Неопределено, Структура - дополнительные параметры.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиУведомленияОПланируемомИмпортеЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Если Операция = ПередачаУведомления() Или Операция = ЗапросОтмены() Тогда
		Объект = ДокументСсылка.ПолучитьОбъект();
		Объект.Заблокировать();
		Для Каждого СтрокаТЧ Из Объект.Товары Цикл
			Если Операция = ПередачаУведомления()
				И (СтрокаТЧ.СтатусОбработки = Перечисления.СтатусыОбработкиУведомленияОПланируемомИмпортеЕГАИС.ПустаяСсылка()
					Или СтрокаТЧ.СтатусОбработки = Перечисления.СтатусыОбработкиУведомленияОПланируемомИмпортеЕГАИС.ОшибкаПередачи
					Или СтрокаТЧ.СтатусОбработки = Перечисления.СтатусыОбработкиУведомленияОПланируемомИмпортеЕГАИС.ОшибкаПроведенияЕГАИС) Тогда
				СтрокаТЧ.СтатусОбработки = НовыйСтатусПослеОбновления;
			ИначеЕсли Операция = ЗапросОтмены()
				И (СтрокаТЧ.СтатусОбработки = Перечисления.СтатусыОбработкиУведомленияОПланируемомИмпортеЕГАИС.ПроведенЕГАИС
					Или СтрокаТЧ.СтатусОбработки = Перечисления.СтатусыОбработкиУведомленияОПланируемомИмпортеЕГАИС.ЗапросНаОтменуПроведенияОшибка) Тогда
				СтрокаТЧ.СтатусОбработки = НовыйСтатусПослеОбновления;
			КонецЕсли;
		КонецЦикла;
		Объект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.УведомлениеОПланируемомИмпортеЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиУведомленияОПланируемомИмпортеЕГАИС - Статус обработки сообщения
//  ДополнительныеПараметры - Неопределено, Структура - Дополнительные параметры
// 
// Возвращаемое значение:
//  Перечислениессылка.СтатусыОбработкиУведомленияОПланируемомИмпортеЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после получения данных из ЕГАИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.УведомлениеОПланируемомИмпортеЕГАИС - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция обмена с ЕГАИС.
//  ДополнительныеПараметры - Неопределено, Структура - дополнительные параметры со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиУведомленияОПланируемомИмпортеЕГАИС - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция, на которую получена квитанция.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиУведомленияОПланируемомИмпортеЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Изменяет и возвращает статус документа ЕГАИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.УведомлениеОПланируемомИмпортеЕГАИС - Документ ЕГАИС.
//  ПараметрыОбновления - Структура - со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиУведомленияОПланируемомИмпортеЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//  ДополнительныеПараметры - Неопределено, Структура - со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиУведомленияОПланируемомИмпортеЕГАИС - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция, на которую получена квитанция.
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиУведомленияОПланируемомИмпортеЕГАИС - новый статус документа ЕГАИС.
Функция ОбновитьСтатус(ДокументСсылка, ПараметрыОбновления, ДополнительныеПараметры) Экспорт
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Получить последовательность операций в течении жизненного цикла документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.УведомлениеОПланируемомИмпортеЕГАИС - Документ, для которого требуется обновить статус.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ОбменДаннымиЕГАИС.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка) Экспорт
	
	Таблица = ОбменДаннымиЕГАИС.ПустаяТаблицаПоследовательностьОпераций();
	
	Исходящий = Перечисления.ТипыЗапросовИС.Исходящий;
	
	ОбменДаннымиЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, 0, Исходящий, ПередачаУведомления(), ДокументСсылка);
	ОбменДаннымиЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, 0, Исходящий, ЗапросОтмены(), ДокументСсылка);
		
	Возврат Таблица;
	
КонецФункции

// Обработчик изменения статуса документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.УведомлениеОПланируемомИмпортеЕГАИС - Документ.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиУведомленияОПланируемомИмпортеЕГАИС - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиУведомленияОПланируемомИмпортеЕГАИС - Предыдущий статус.
//  ПараметрыОбновленияСтатуса - Структура - см. функцию ОбменДаннымиЕГАИС.ПараметрыОбновленияСтатуса().
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт
	
	ИнтеграцияЕГАИСПереопределяемый.ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса);
	
	//Получение конечного статуса требующего повторного оформления
	Если КонечныеСтатусы().Найти(НовыйСтатус)<>Неопределено
		И КонечныеСтатусы().Найти(ПредыдущийСтатус)=Неопределено Тогда
		РасчетСтатусовОформленияЕГАИС.РассчитатьСтатусыОформленияДокументовЕГАИС(ДокументСсылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Статусы

// Возвращает статус по умолчанию.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиУведомленияОПланируемомИмпортеЕГАИС - Статус по-умолчанию.
//
Функция СтатусПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыОбработкиУведомленияОПланируемомИмпортеЕГАИС.Черновик;
	
КонецФункции

// Возвращает статусы ошибок.
//
// Возвращаемое значение:
//  Массив Из ПеречислениеСсылка.СтатусыОбработкиУведомленияОПланируемомИмпортеЕГАИС - Статусы ошибок.
//
Функция СтатусыОшибок() Экспорт
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиУведомленияОПланируемомИмпортеЕГАИС.ОшибкаПередачи);
	Статусы.Добавить(Перечисления.СтатусыОбработкиУведомленияОПланируемомИмпортеЕГАИС.ОшибкаПроведенияЕГАИС);
	Статусы.Добавить(Перечисления.СтатусыОбработкиУведомленияОПланируемомИмпортеЕГАИС.ЗапросНаОтменуПроведенияОшибка);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает конечные статусы.
// 
// Параметры:
//  ТребуетсяПовторноеОформление - Булево - Требуется повторное оформление
// 
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыОбработкиУведомленияОПланируемомИмпортеЕГАИС -- Конечные статусы.
Функция КонечныеСтатусы(ТребуетсяПовторноеОформление = Истина) Экспорт
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиУведомленияОПланируемомИмпортеЕГАИС.Отменен);
	Статусы.Добавить(Перечисления.СтатусыОбработкиУведомленияОПланируемомИмпортеЕГАИС.ОшибкаПроведенияЕГАИС);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию() Экспорт
	
	Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные;
	
КонецФункции

#КонецОбласти

#Область ПанельОбменСЕГАИС

// Возвращает массив дальнейших действий с документом, требующих участия пользователя
// 
// Возвращаемое значение:
// 	Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - дальшейшие действия
// 
Функция ВсеТребующиеДействия() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ЗапроситеОтменуПроведения);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ВыполнитеОбмен);
	
	Возврат МассивДействий;
	
КонецФункции

// Возвращает массив дальнейших действий с документом, не требующих участия пользователя
// 
// Возвращаемое значение:
// 	Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - дальшейшие действия
// 
Функция ВсеТребующиеОжидания() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПолученЕГАИС);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПроведенЕГАИС);
	
	Возврат МассивДействий;
	
КонецФункции

// Возвращает текст запроса для получения количества документов для оформления
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ТекстЗапросаПанельОбменСЕГАИСОформите() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ 0 КАК КоличествоДокументов
	|";
	
	ИнтеграцияЕГАИСПереопределяемый.ТекстЗапросаУведомлениеОПланируемомИмпортеЕГАИСОформите(ТекстЗапроса);
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса для получения количества документов для отработки
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ТекстЗапросаПанельОбменСЕГАИСОтработайте() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыДокументовЕГАИС.Документ) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.УведомлениеОПланируемомИмпортеЕГАИС КАК УведомлениеОПланируемомИмпортеЕГАИС
	|ПО
	|	СтатусыДокументовЕГАИС.Документ = УведомлениеОПланируемомИмпортеЕГАИС.Ссылка
	|ГДЕ
	|	УведомлениеОПланируемомИмпортеЕГАИС.Ссылка ЕСТЬ НЕ NULL
	|	И НЕ УведомлениеОПланируемомИмпортеЕГАИС.ПометкаУдаления
	|	И СтатусыДокументовЕГАИС.ДальнейшееДействие1 В(&ВсеТребующиеДействия)
	|	И (УведомлениеОПланируемомИмпортеЕГАИС.ОрганизацияЕГАИС В(&ОрганизацияЕГАИС)
	|		ИЛИ &БезОтбораПоОрганизацииЕГАИС)
	|	И (УведомлениеОПланируемомИмпортеЕГАИС.Ответственный = &Ответственный
	|		ИЛИ &Ответственный = НЕОПРЕДЕЛЕНО)
	|";
	
	ИнтеграцияЕГАИСПереопределяемый.ТекстЗапросаУведомлениеОПланируемомИмпортеЕГАИСОтработайте(ТекстЗапроса);
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса для получения количества документов, находящихся в состоянии ожидания
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ТекстЗапросаПанельОбменСЕГАИСОжидайте() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыДокументовЕГАИС.Документ) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.УведомлениеОПланируемомИмпортеЕГАИС КАК УведомлениеОПланируемомИмпортеЕГАИС
	|ПО
	|	СтатусыДокументовЕГАИС.Документ = УведомлениеОПланируемомИмпортеЕГАИС.Ссылка
	|ГДЕ
	|	УведомлениеОПланируемомИмпортеЕГАИС.Ссылка ЕСТЬ НЕ NULL
	|	И НЕ УведомлениеОПланируемомИмпортеЕГАИС.ПометкаУдаления
	|	И СтатусыДокументовЕГАИС.ДальнейшееДействие1 В(&ВсеТребующиеОжидания)
	|	И (УведомлениеОПланируемомИмпортеЕГАИС.ОрганизацияЕГАИС В(&ОрганизацияЕГАИС)
	|		ИЛИ &БезОтбораПоОрганизацииЕГАИС)
	|	И (УведомлениеОПланируемомИмпортеЕГАИС.Ответственный = &Ответственный
	|		ИЛИ &Ответственный = НЕОПРЕДЕЛЕНО)
	|";
	
	ИнтеграцияЕГАИСПереопределяемый.ТекстЗапросаУведомлениеОПланируемомИмпортеЕГАИСОжидайте(ТекстЗапроса);
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область СообщенияЕГАИС

// Сообщение к передаче XML
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Ссылка на документ
//  ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие
//  ДополнительныеПараметры - Неопределено, Структура - Дополнительные параметры
// 
// Возвращаемое значение:
//  Строка - Текст сообщения XML
//
Функция СообщениеКПередачеXML(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные Тогда
		
		Возврат УведомлениеОПланируемомИмпортеЕГАИСXML(ДокументСсылка);
		
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ЗапроситеОтменуПроведения Тогда
		
		Возврат ЗапросНаОтменуПроведенияXML(ДокументСсылка);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
// 
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ВЫБОР КОГДА ОрганизацияЕГАИС.Сопоставлено И ОрганизацияЕГАИС.СоответствуетОрганизации Тогда ЗначениеРазрешено(ОрганизацияЕГАИС.Контрагент)
	|	КОГДА ОрганизацияЕГАИС.Сопоставлено И НЕ ОрганизацияЕГАИС.СоответствуетОрганизации Тогда ЗначениеРазрешено(ОрганизацияЕГАИС.ТорговыйОбъект)
	|	ИНАЧЕ ИСТИНА КОНЕЦ ";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

//@skip-check module-accessibility-at-client
Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	ИнтеграцияЕГАИСВызовСервера.ПриПолученииФормыДокумента(
		"УведомлениеОПланируемомИмпортеЕГАИС",
		ВидФормы,
		Параметры,
		ВыбраннаяФорма,
		ДополнительнаяИнформация,
		СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти


#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область ПроцессыОбработкиДокумента

Функция ПередачаУведомления()
	
	Возврат Перечисления.ВидыДокументовЕГАИС.УведомлениеОПланируемомИмпорте;
	
КонецФункции

Функция ЗапросОтмены()
	
	Возврат Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияУведомленияОПланируемомИмпорте;
	
КонецФункции

#КонецОбласти

#Область СообщенияЕГАИС

Функция УведомлениеОПланируемомИмпортеЕГАИСXML(ДокументСсылка)
	
	СообщенияXML = Новый Массив;
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ЕГАИСПрисоединенныеФайлы.Документ      КАК Ссылка,
		|	КОЛИЧЕСТВО(ЕГАИСПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомер
		|ПОМЕСТИТЬ Версии
		|ИЗ
		|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ЕГАИСПрисоединенныеФайлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УведомлениеОПланируемомИмпортеЕГАИС КАК Шапка
		|		ПО Шапка.Ссылка       = &Ссылка
		|		И Шапка.Ссылка       = ЕГАИСПрисоединенныеФайлы.Документ
		|ГДЕ
		|	ЕГАИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
		|	И ЕГАИСПрисоединенныеФайлы.Операция = ЗНАЧЕНИЕ(Перечисление.ВидыДокументовЕГАИС.УведомлениеОПланируемомИмпорте)
		|СГРУППИРОВАТЬ ПО
		|	ЕГАИСПрисоединенныеФайлы.Документ
		|;
		|
		|//#РезультатЗапроса#////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Шапка.Номер                           КАК Номер,
		|	Шапка.Дата                            КАК Дата,
		|	ЕСТЬNULL(Версии.ПоследнийНомер, 0)    КАК ПоследнийНомерВерсии,
		|	Шапка.Идентификатор                   КАК Идентификатор,
		|	Шапка.ДокументОснование               КАК ДокументОснование,
		|	
		|	ВЫРАЗИТЬ(Шапка.Комментарий КАК Строка(500)) КАК Комментарий,
		|	
		|	Шапка.ОрганизацияЕГАИС              КАК ОрганизацияЕГАИС,
		|	Шапка.ОрганизацияЕГАИС.Код          КАК ИдентификаторФСРАР,
		|	Шапка.ОрганизацияЕГАИС.ФорматОбмена КАК ФорматОбмена,
		|	Шапка.Ответственный                 КАК Ответственный,
		|
		|	Импортеры.Код                                            КАК ИмпортерКод,
		|	ВЫРАЗИТЬ(Импортеры.Наименование КАК Строка(64))          КАК ИмпортерНаименование,
		|	ВЫРАЗИТЬ(Импортеры.НаименованиеПолное КАК Строка(255))   КАК ИмпортерНаименованиеПолное,
		|	Импортеры.ИНН                                            КАК ИмпортерИНН,
		|	Импортеры.КПП                                            КАК ИмпортерКПП,
		|	Импортеры.КодСтраны                                      КАК ИмпортерКодСтраны,
		|	Импортеры.КодРегиона                                     КАК ИмпортерКодРегиона,
		|	Импортеры.ПочтовыйИндекс                                 КАК ИмпортерПочтовыйИндекс,
		|	ВЫРАЗИТЬ(Импортеры.ПредставлениеАдреса КАК Строка(1000)) КАК ИмпортерПредставлениеАдреса,
		|	Импортеры.ТипОрганизации                                 КАК ИмпортерТипОрганизации,
		|	Импортеры.ИдентификаторОрганизацииТС                     КАК ИмпортерИдентификаторОрганизацииТС,
		|
		|	Таможня.Код                                            КАК ТаможняКод,
		|	ВЫРАЗИТЬ(Таможня.Наименование КАК Строка(64))          КАК ТаможняНаименование,
		|	ВЫРАЗИТЬ(Таможня.НаименованиеПолное КАК Строка(255))   КАК ТаможняНаименованиеПолное,
		|	Таможня.ИНН                                            КАК ТаможняИНН,
		|	Таможня.КПП                                            КАК ТаможняКПП,
		|	Таможня.КодСтраны                                      КАК ТаможняКодСтраны,
		|	Таможня.КодРегиона                                     КАК ТаможняКодРегиона,
		|	Таможня.ПочтовыйИндекс                                 КАК ТаможняПочтовыйИндекс,
		|	ВЫРАЗИТЬ(Таможня.ПредставлениеАдреса КАК Строка(1000)) КАК ТаможняПредставлениеАдреса,
		|	Таможня.ТипОрганизации                                 КАК ТаможняТипОрганизации,
		|	Таможня.ИдентификаторОрганизацииТС                     КАК ТаможняИдентификаторОрганизацииТС
		|ИЗ
		|	Документ.УведомлениеОПланируемомИмпортеЕГАИС КАК Шапка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
		|		ПО Шапка.Ссылка = Версии.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК Импортеры
		|		ПО Шапка.ОрганизацияЕГАИС = Импортеры.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК Таможня
		|		ПО Шапка.ТаможенныйПост = Таможня.Ссылка
		|ГДЕ
		|	Шапка.Ссылка = &Ссылка
		|",
		"Шапка");
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	Товары.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
		|	Товары.Номенклатура         КАК Номенклатура,
		|	Товары.Характеристика       КАК Характеристика,
		|	Товары.Серия                КАК Серия,
		|	Товары.Ссылка.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС
		|ПОМЕСТИТЬ ВТТовары
		|ИЗ
		|	Документ.УведомлениеОПланируемомИмпортеЕГАИС.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|");
	
	ТекстыЗапроса.Добавить(
		ИнтеграцияЕГАИС.ТекстЗапросаВТКоэффициентыПересчетаВЕдиницыЕГАИС(
			"ВТТовары",
			"ВТКоэффициентыПересчетаВЕдиницыЕГАИС"));
	
	ТекстЗапросаАлкогольнаяПродукция = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	Товары.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС
	|ПОМЕСТИТЬ АлкогольнаяПродукция
	|ИЗ
	|	ВТТовары КАК Товары
	|;
	|
	|//#РезультатЗапроса#////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	// Выгрузка информации о товарах в сокращенном виде
	|	Продукция.Код                                          КАК ПродукцияКод,
	|	ВЫРАЗИТЬ(Продукция.НаименованиеПолное КАК Строка(255)) КАК ПродукцияНаименованиеПолное,
	|	Продукция.ТипПродукции                                 КАК ПродукцияТипПродукции,
	|	ЕСТЬNULL(ВидыПродукции.Код, """")                      КАК ПродукцияКодВидаПродукции,
	|	
	|	Производители.Код                                            КАК ПроизводительКод,
	|	ВЫРАЗИТЬ(Производители.Наименование КАК Строка(64))          КАК ПроизводительНаименование,
	|	ВЫРАЗИТЬ(Производители.НаименованиеПолное КАК Строка(255))   КАК ПроизводительНаименованиеПолное,
	|	Производители.ИНН                                            КАК ПроизводительИНН,
	|	Производители.КПП                                            КАК ПроизводительКПП,
	|	Производители.КодСтраны                                      КАК ПроизводительКодСтраны,
	|	Производители.КодРегиона                                     КАК ПроизводительКодРегиона,
	|	Производители.ПочтовыйИндекс                                 КАК ПроизводительПочтовыйИндекс,
	|	ВЫРАЗИТЬ(Производители.ПредставлениеАдреса КАК Строка(1000)) КАК ПроизводительПредставлениеАдреса,
	|	Производители.ТипОрганизации                                 КАК ПроизводительТипОрганизации,
	|	Производители.ИдентификаторОрганизацииТС                     КАК ПроизводительИдентификаторОрганизацииТС,
	|
	|	Импортеры.Код                                            КАК ИмпортерКод,
	|	ВЫРАЗИТЬ(Импортеры.Наименование КАК Строка(64))          КАК ИмпортерНаименование,
	|	ВЫРАЗИТЬ(Импортеры.НаименованиеПолное КАК Строка(255))   КАК ИмпортерНаименованиеПолное,
	|	Импортеры.ИНН                                            КАК ИмпортерИНН,
	|	Импортеры.КПП                                            КАК ИмпортерКПП,
	|	Импортеры.КодСтраны                                      КАК ИмпортерКодСтраны,
	|	Импортеры.КодРегиона                                     КАК ИмпортерКодРегиона,
	|	Импортеры.ПочтовыйИндекс                                 КАК ИмпортерПочтовыйИндекс,
	|	ВЫРАЗИТЬ(Импортеры.ПредставлениеАдреса КАК Строка(1000)) КАК ИмпортерПредставлениеАдреса,
	|	Импортеры.ТипОрганизации                                 КАК ИмпортерТипОрганизации,
	|	Импортеры.ИдентификаторОрганизацииТС                     КАК ИмпортерИдентификаторОрганизацииТС
	|
	|ИЗ
	|	АлкогольнаяПродукция КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК Продукция
	|		ПО Продукция.Ссылка = Товары.АлкогольнаяПродукция
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыАлкогольнойПродукции КАК ВидыПродукции
	|		ПО Продукция.ВидПродукции = ВидыПродукции.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК Производители
	|		ПО Производители.Ссылка = Продукция.Производитель
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК Импортеры
	|		ПО Импортеры.Ссылка =
	|			ВЫБОР
	|				КОГДА Продукция.Импортер = ЗНАЧЕНИЕ(Справочник.КлассификаторОрганизацийЕГАИС.ПустаяСсылка)
	|					ТОГДА Товары.ОрганизацияЕГАИС
	|					ИНАЧЕ Продукция.Импортер
	|			КОНЕЦ
	|";
	
	ТекстыЗапроса.Добавить(
		ТекстЗапросаАлкогольнаяПродукция,
		"АлкогольнаяПродукция");
		
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	Товары.НомерСтроки                      КАК НомерСтроки,
		|	Товары.ИдентификаторСтроки              КАК ИдентификаторСтроки,
		|	Товары.АлкогольнаяПродукция             КАК АлкогольнаяПродукция,
		|	Товары.Количество
		|	* ЕСТЬNULL(ЕдиницыЕГАИС.Коэффициент, 1) КАК Количество,
		|	ЕСТЬNULL(ЕдиницыЕГАИС.ОбъемДАЛ, 0)      КАК ОбъемДАЛ
		|ИЗ
		|	Документ.УведомлениеОПланируемомИмпортеЕГАИС.Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоэффициентыПересчетаВЕдиницыЕГАИС КАК ЕдиницыЕГАИС
		|		ПО ЕдиницыЕГАИС.АлкогольнаяПродукция = Товары.АлкогольнаяПродукция
		|		 И ЕдиницыЕГАИС.Номенклатура = Товары.Номенклатура
		|		 И ЕдиницыЕГАИС.Характеристика = Товары.Характеристика
		|		 И ЕдиницыЕГАИС.Серия = Товары.Серия
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|	И Товары.СтатусОбработки <> ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиУведомленияОПланируемомИмпортеЕГАИС.ПроведенЕГАИС)
		|",
		"Товары");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ПустыеЗначенияНоменклатуры", ИнтеграцияИС.НезаполненныеЗначенияОпределяемогоТипа("Номенклатура"));
	РезультатыЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса);
	
	//@skip-warning
	Шапка                = РезультатыЗапроса["Шапка"].Выбрать();
	//@skip-warning
	АлкогольнаяПродукция = РезультатыЗапроса["АлкогольнаяПродукция"].Выгрузить();
	//@skip-warning
	Товары               = РезультатыЗапроса["Товары"].Выгрузить();
	
	СообщениеXML = ОбменДаннымиЕГАИС.СтруктураСообщенияXML();
	СообщениеXML.Документ = ДокументСсылка;
	СообщениеXML.Описание = ОбменДаннымиЕГАИС.ОписаниеОперацииПередачиДанных(
		ПередачаУведомления(), ДокументСсылка);
	
	Если Не Шапка.Следующий()
		Или Товары.Количество() = 0 Тогда
		
		ОбменДаннымиЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, НСтр("ru = 'Нет данных для выгрузки.'"));
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии;
	НомерСтроки = 0;
	ФорматОбмена = ОбменДаннымиЕГАИСКлиентСервер.ФорматОбмена(Шапка.ФорматОбмена);
	
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(ПередачаУведомления(), ФорматОбмена);
	ИмяТипа          = Перечисления.ВидыДокументовЕГАИС.ТипЕГАИС(ПередачаУведомления(), ФорматОбмена);
	
	Если ПространствоИмен = Неопределено
		Или ИмяТипа = Неопределено Тогда
		ОбменДаннымиЕГАИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеXML,
			СтрШаблон(НСтр("ru = 'Операция не поддерживается в версии формата обмена: %1.'"), ФорматОбмена));
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЧ.ОбъемДАЛ) Тогда
			ОбменДаннымиЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, СтрШаблон(НСтр("ru = 'Для номенклатуры в строке %1 не установлен объем в декалитрах.'"), СтрокаТЧ.НомерСтроки));
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(СообщениеXML.ТекстОшибки) Тогда
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		
		НомерВерсии = НомерВерсии + 1;
		НомерСтроки = Формат(СтрокаТЧ.НомерСтроки, "ЧГ=0");
		НомерУведомления = СтрШаблон("%1/%2", СокрЛП(Шапка.Номер), НомерСтроки);
		
		СообщениеXML = ОбменДаннымиЕГАИС.СтруктураСообщенияXML();
		СообщениеXML.Описание = ОбменДаннымиЕГАИС.ОписаниеОперацииПередачиДанных(
			ПередачаУведомления(), ДокументСсылка, НомерВерсии);
		
		XDTO = РаботаСXMLЕГАИС.ОбъектXDTO(ПространствоИмен, "InvoicePlannedImportType");
		
		РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(XDTO, "Identity", Шапка.Идентификатор, СообщениеXML, 3);
		
		XDTO.Header = РаботаСXMLИС.ОбъектXDTOПоИмениТипа(XDTO, "Header");
		Содержимое = XDTO.Header;
		РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(Содержимое, "Number",           НомерУведомления,          СообщениеXML);
		РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(Содержимое, "Date",              Шапка.Дата,               СообщениеXML);
		РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(Содержимое, "Note",              Шапка.Комментарий,        СообщениеXML);
		РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(Содержимое, "TotalQuantity",     СтрокаТЧ.Количество,      СообщениеXML);
		РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(Содержимое, "TotalQuantityDal",  СтрокаТЧ.ОбъемДАЛ,        СообщениеXML);
		
		ИнтеграцияЕГАИС.ЗаполнитьВXDTOОрганизациюСЮрАдресом_v2(Содержимое, "Importer",          Шапка, "Импортер", СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьВXDTOОрганизациюСЮрАдресом_v2(Содержимое, "CustomsDepartment", Шапка, "Таможня",  СообщениеXML);
		
		Содержимое.Product = РаботаСXMLИС.ОбъектXDTOПоИмениТипа(XDTO.Header, "Product");
		ИнтеграцияЕГАИС.ЗаполнитьВXDTOИностраннуюАлкогольнуюПродукцию_v2(
			Содержимое.Product,
			АлкогольнаяПродукция.Найти(СтрокаТЧ.АлкогольнаяПродукция, "АлкогольнаяПродукция"),
			"Продукция", СообщениеXML);
		
		//Диапазоны акцизных марок: не используется для пива
		XDTO.Content = РаботаСXMLИС.ОбъектXDTOПоИмениТипа(XDTO, "Content");
		
		ТекстСообщенияXML = РаботаСXMLЕГАИС.ОбъектXDTOВXML(XDTO, Шапка.ИдентификаторФСРАР, ПространствоИмен, ИмяТипа);
		
		СообщениеXML.ТекстСообщенияXML = ТекстСообщенияXML;
		СообщениеXML.ТипСообщения      = Перечисления.ТипыЗапросовИС.Исходящий;
		СообщениеXML.ОрганизацияЕГАИС  = Шапка.ОрганизацияЕГАИС;
		СообщениеXML.Операция          = ПередачаУведомления();
		СообщениеXML.ФорматОбмена      = ФорматОбмена;
		СообщениеXML.Документ          = ДокументСсылка;
		СообщениеXML.ДокументОснование = Шапка.ДокументОснование;
		СообщениеXML.Версия            = НомерВерсии;
		СообщенияXML.Добавить(СообщениеXML);
		
	КонецЦикла;
	
	Возврат СообщенияXML;
	
КонецФункции

Функция ЗапросНаОтменуПроведенияXML(ДокументСсылка)
	
	СообщенияXML = Новый Массив;
	
	Операция = ЗапросОтмены();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕГАИСПрисоединенныеФайлы.Документ КАК Ссылка,
	|	КОЛИЧЕСТВО(ЕГАИСПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомер
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ЕГАИСПрисоединенныеФайлы
	|ГДЕ
	|	ЕГАИСПрисоединенныеФайлы.Документ = &Ссылка
	|	И ЕГАИСПрисоединенныеФайлы.Операция = &Операция
	|	И ЕГАИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ЕГАИСПрисоединенныеФайлы.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Шапка.Номер                         КАК Номер,
	|	Шапка.Дата                          КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомер, 0)  КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование             КАК ДокументОснование,
	|	Шапка.ОрганизацияЕГАИС              КАК ОрганизацияЕГАИС,
	|	Шапка.ОрганизацияЕГАИС.Код          КАК ИдентификаторФСРАР,
	|	Шапка.ОрганизацияЕГАИС.ФорматОбмена КАК ФорматОбмена,
	|	Шапка.Ответственный                 КАК Ответственный,
	|	Состав.ИдентификаторУведомления     КАК ИдентификаторУведомления,
	|	Состав.НомерСтроки                  КАК НомерСтроки
	|ИЗ
	|	Документ.УведомлениеОПланируемомИмпортеЕГАИС КАК Шапка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УведомлениеОПланируемомИмпортеЕГАИС.Товары КАК Состав
	|		ПО Шапка.Ссылка = Состав.Ссылка
	|		И Состав.ИдентификаторУведомления <> """"
	|		И Состав.СтатусОбработки <> ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиУведомленияОПланируемомИмпортеЕГАИС.Отменен)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Операция);
	
	Товары = Запрос.Выполнить().Выбрать();
	
	СообщениеXML = ОбменДаннымиЕГАИС.СтруктураСообщенияXML();
	СообщениеXML.Документ = ДокументСсылка;
	СообщениеXML.Описание = ОбменДаннымиЕГАИС.ОписаниеОперацииПередачиДанных(
		ПередачаУведомления(), ДокументСсылка);
	
	Если Товары.Количество() = 0 Тогда
		
		ОбменДаннымиЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, НСтр("ru = 'Нет данных для выгрузки.'"));
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	Товары.Следующий();
	НомерВерсии = Товары.ПоследнийНомерВерсии;
	НомерСтроки = 0;
	ФорматОбмена = ОбменДаннымиЕГАИСКлиентСервер.ФорматОбмена(Товары.ФорматОбмена);
	
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(ЗапросОтмены(), ФорматОбмена);
	ИмяТипа          = Перечисления.ВидыДокументовЕГАИС.ТипЕГАИС(ЗапросОтмены(), ФорматОбмена);
	
	Если ПространствоИмен = Неопределено
		Или ИмяТипа = Неопределено Тогда
		ОбменДаннымиЕГАИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеXML,
			СтрШаблон(НСтр("ru = 'Операция не поддерживается в версии формата обмена: %1.'"), ФорматОбмена));
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
	КонецЕсли;
	
	Товары.Сбросить();
	ДатаРаспроведения = ТекущаяДатаСеанса();
	Пока Товары.Следующий() Цикл
		
		НомерВерсии = НомерВерсии + 1;
		НомерСтроки = Формат(Товары.НомерСтроки, "ЧГ=0");
		НомерУведомления = СтрШаблон("%1/%2", СокрЛП(Товары.Номер), НомерСтроки);
		
		СообщениеXML = ОбменДаннымиЕГАИС.СтруктураСообщенияXML();
		СообщениеXML.Описание = ОбменДаннымиЕГАИС.ОписаниеОперацииПередачиДанных(
			ЗапросОтмены(), ДокументСсылка, НомерВерсии);
		
		XDTO = РаботаСXMLЕГАИС.ОбъектXDTO(ПространствоИмен, "RequestRepealIPI");
		
		РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(XDTO, "ClientID",      Товары.ИдентификаторФСРАР,       СообщениеXML);
		РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(XDTO, "RequestNumber", НомерУведомления,                СообщениеXML);
		РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(XDTO, "RequestDate",   ДатаРаспроведения,               СообщениеXML);
		РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(XDTO, "IPIRegId",      Товары.ИдентификаторУведомления, СообщениеXML);
		
		ТекстСообщенияXML = РаботаСXMLЕГАИС.ОбъектXDTOВXML(XDTO, Товары.ИдентификаторФСРАР, ПространствоИмен, ИмяТипа);
		
		СообщениеXML.ТекстСообщенияXML = ТекстСообщенияXML;
		СообщениеXML.ТипСообщения      = Перечисления.ТипыЗапросовИС.Исходящий;
		СообщениеXML.ОрганизацияЕГАИС  = Товары.ОрганизацияЕГАИС;
		СообщениеXML.Операция          = ЗапросОтмены();
		СообщениеXML.ФорматОбмена      = ФорматОбмена;
		СообщениеXML.Документ          = ДокументСсылка;
		СообщениеXML.ДокументОснование = Товары.ДокументОснование;
		СообщениеXML.Версия            = НомерВерсии;
		СообщенияXML.Добавить(СообщениеXML);
		
	КонецЦикла;
	
	Возврат СообщенияXML;
	
КонецФункции

// По входящей квитанции заполнить идентификатор ЕГАИС и статус обработки строки, вычислить статус обработки целого документа
// 
// Параметры:
//  ДокументОбъект  - ДокументОбъект.УведомлениеОПланируемомИмпортеЕГАИС - заполняемый документ
//  ДанныеДокумента - Структура - Данные документа из сообщения обмена
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиУведомленияОПланируемомИмпортеЕГАИС - статус обработки
//  Операция        - ПеречислениеСсылка.ВидыДокументовЕГАИС - выполняемая операция обмена
//  
Процедура ЗаполнитьСтатусИИдентификаторПоКвитанции(ДокументОбъект, ДанныеДокумента, СтатусОбработки, Операция) Экспорт
	
	Если Операция = ПередачаУведомления() Тогда
		СтатусПередан = Перечисления.СтатусыОбработкиУведомленияОПланируемомИмпортеЕГАИС.ПереданВУТМ;
		СтатусОбрабатывается = Перечисления.СтатусыОбработкиУведомленияОПланируемомИмпортеЕГАИС.ОбрабатываетсяЕГАИС;
		СтатусПроведен = Перечисления.СтатусыОбработкиУведомленияОПланируемомИмпортеЕГАИС.ПроведенЕГАИС;
		СтатусОшибка = Перечисления.СтатусыОбработкиУведомленияОПланируемомИмпортеЕГАИС.ОшибкаПроведенияЕГАИС;
	Иначе
		СтатусПередан = Перечисления.СтатусыОбработкиУведомленияОПланируемомИмпортеЕГАИС.ЗапросНаОтменуПроведенияПереданВУТМ;
		СтатусОбрабатывается = Перечисления.СтатусыОбработкиУведомленияОПланируемомИмпортеЕГАИС.ЗапросНаОтменуПроведенияОбрабатываетсяЕГАИС;
		СтатусПроведен = Перечисления.СтатусыОбработкиУведомленияОПланируемомИмпортеЕГАИС.Отменен;
		СтатусОшибка = Перечисления.СтатусыОбработкиУведомленияОПланируемомИмпортеЕГАИС.ЗапросНаОтменуПроведенияОшибка;
	КонецЕсли;
	
	Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЕГАИС.Ошибка Тогда
		Описание = ?(ДанныеДокумента.Объект.OperationResult = Неопределено,
			ДанныеДокумента.Объект.Result.Comments,
			ДанныеДокумента.Объект.OperationResult.OperationComments);
	ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЕГАИС.ОбрабатываетсяЕГАИС Тогда
		Описание = ДанныеДокумента.Объект.Result.Comments;
	Иначе
		Описание = ДанныеДокумента.Объект.OperationResult.OperationComment;
	КонецЕсли;
	
	Начало = СтрНайти(Описание, "номер") + 7;
	НомерСтрокиНачало = СтрНайти(Описание, "/",,Начало)+1;
	НомерСтрокиОкончание = СтрНайти(Описание, """",,Начало);
	НомерСтроки = Число(Сред(Описание, НомерСтрокиНачало, НомерСтрокиОкончание - НомерСтрокиНачало));
	СтрокаТовары = ДокументОбъект.Товары[НомерСтроки-1];
	
	Если Операция = ПередачаУведомления() Тогда
		Если ЗначениеЗаполнено(ДанныеДокумента.Объект.RegID) Тогда
			СтрокаТовары.ИдентификаторУведомления = ДанныеДокумента.Объект.RegID;
		КонецЕсли;
	КонецЕсли;
	
	Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЕГАИС.ДокументПроведен Тогда
		СтрокаТовары.СтатусОбработки = СтатусПроведен;
	ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЕГАИС.ОбрабатываетсяЕГАИС
			И СтрокаТовары.СтатусОбработки <> СтатусПроведен Тогда
		СтрокаТовары.СтатусОбработки = СтатусОбрабатывается;
	Иначе
		СтрокаТовары.СтатусОбработки = СтатусОшибка;
	КонецЕсли;
	
	ЕстьСтрокиСОшибками = Ложь;
	ЕстьСтрокиОбрабатывается = Ложь;
	ЕстьСтрокиПроведен = Ложь;
	ЕстьНеобработанныеСтроки = Ложь;
	Для Каждого СтрокаТовары Из ДокументОбъект.Товары Цикл
		Если СтрокаТовары.СтатусОбработки = СтатусОшибка Тогда
			ЕстьСтрокиСОшибками = Истина;
		ИначеЕсли СтрокаТовары.СтатусОбработки = СтатусПроведен Тогда
			ЕстьСтрокиПроведен = Истина;
		ИначеЕсли СтрокаТовары.СтатусОбработки = СтатусОбрабатывается Тогда
			ЕстьСтрокиОбрабатывается = Истина;
		ИначеЕсли Не ЗначениеЗаполнено(СтрокаТовары.ИдентификаторУведомления) И Операция = ЗапросОтмены() Тогда
		Иначе
			ЕстьНеобработанныеСтроки = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьНеобработанныеСтроки Тогда
		СтатусОбработки = СтатусПередан;
	ИначеЕсли ЕстьСтрокиОбрабатывается Тогда
		СтатусОбработки = СтатусОбрабатывается;
	ИначеЕсли Не ЕстьСтрокиСОшибками И ЕстьСтрокиПроведен Тогда
		СтатусОбработки = СтатусПроведен;
	ИначеЕсли ЕстьСтрокиСОшибками И Не ЕстьСтрокиПроведен Тогда
		СтатусОбработки = СтатусОшибка;
	ИначеЕсли Операция = ПередачаУведомления() Тогда
		СтатусОбработки = Перечисления.СтатусыОбработкиУведомленияОПланируемомИмпортеЕГАИС.ЧастичноПроведенЕГАИС;
	Иначе
		СтатусОбработки = Перечисления.СтатусыОбработкиУведомленияОПланируемомИмпортеЕГАИС.ЧастичноОтменен;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СканированиеПродукции

Функция ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды = Неопределено) Экспорт
	
	Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ДанныеШтрихкода.ТипУпаковки) Тогда
		
		Результат = ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
		ОбработатьДанныеШтрихкодаЛогистическойУпаковки(Форма, ВложенныеШтрихкоды, ПараметрыСканирования, Результат);
		Возврат Результат;
		
	Иначе
		
		Возврат ОбработатьДанныеШтрихкодаПотребительскойУпаковки(Форма, ДанныеШтрихкода, ПараметрыСканирования);
		
	КонецЕсли;
	
КонецФункции

Функция ОбработатьДанныеШтрихкодаПотребительскойУпаковки(Форма, ДанныеШтрихкода, ПараметрыСканирования)
	
	Результат = ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Номенклатура",   ДанныеШтрихкода.Номенклатура);
	ПараметрыОтбора.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
	ПараметрыОтбора.Вставить("АлкогольнаяПродукция", ДанныеШтрихкода.АлкогольнаяПродукция);
	ПараметрыОтбора.Вставить("Серия", ДанныеШтрихкода.Серия);
	
	Количество = ?(ДанныеШтрихкода.Количество = 0, 1, ДанныеШтрихкода.Количество);
	
	РезультатПоиска = Форма.Объект.Товары.НайтиСтроки(ПараметрыОтбора);
	Если РезультатПоиска.Количество() = 0 Тогда
		ПараметрыОтбора.АлкогольнаяПродукция = Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка();
		РезультатПоиска = Форма.Объект.Товары.НайтиСтроки(ПараметрыОтбора);
	КонецЕсли;
	
	Если РезультатПоиска.Количество() = 0 Тогда
		СтрокаТЧ = Форма.Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, ДанныеШтрихкода);
		СтрокаТЧ.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
		СтрокаТЧ.Количество = Количество;
		СтрокаТЧ.КоличествоУпаковок = Количество;
		Результат.ДобавленныеСтроки.Добавить(СтрокаТЧ);
	Иначе
		СтрокаТЧ = РезультатПоиска[0];
		СтрокаТЧ.АлкогольнаяПродукция = ДанныеШтрихкода.АлкогольнаяПродукция;
		СтрокаТЧ.Количество = СтрокаТЧ.Количество + Количество;
		СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.КоличествоУпаковок + Количество;
		Результат.ИзмененныеСтроки.Добавить(СтрокаТЧ);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОбработатьДанныеШтрихкодаЛогистическойУпаковки(Форма, ВложенныеШтрихкоды, ПараметрыСканирования, Результат)
	
	Для Каждого СтрокаДерева Из ВложенныеШтрихкоды.ДеревоУпаковок.Строки Цикл
		
		Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Или СтрокаДерева.Строки.Количество() = 0 Тогда
			
			ДобавленныеИзмененныеСтроки = ОбработатьДанныеШтрихкодаПотребительскойУпаковки(Форма, СтрокаДерева, ПараметрыСканирования);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.ДобавленныеСтроки, ДобавленныеИзмененныеСтроки.ДобавленныеСтроки, Истина);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.ИзмененныеСтроки, ДобавленныеИзмененныеСтроки.ИзмененныеСтроки, Истина);
			
		Иначе
			
			ОбработатьДанныеШтрихкодаЛогистическойУпаковки(
				Форма, СтрокаДерева, ПараметрыСканирования, Результат);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Серии

//Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	Возврат ИнтеграцияИС.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий(Метаданные.Документы.УведомлениеОПланируемомИмпортеЕГАИС);
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//  Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
// 
// Возвращаемое значение:
//  Произвольный - (См. ИнтеграцияИСПереопределяемый.ЗаполнитьПараметрыУказанияСерий) - особенности указания серий.
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	Возврат ИнтеграцияИС.ПараметрыУказанияСерий(Метаданные.Документы.УведомлениеОПланируемомИмпортеЕГАИС, Объект);
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
// Параметры:
//   ПараметрыУказанияСерий - См. ПараметрыУказанияСерий
// Возвращаемое значение:
//   Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	Возврат ИнтеграцияИС.ТекстЗапросаЗаполненияСтатусовУказанияСерий(Метаданные.Документы.УведомлениеОПланируемомИмпортеЕГАИС, ПараметрыУказанияСерий);

КонецФункции

#КонецОбласти

#Область Отчеты

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ИнтеграцияИСПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
	ИнтеграцияИСПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);
	
	КомандаОтчет = Отчеты.АнализРасхожденийПриДвиженииАлкогольнойПродукции.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Важность = "Обычное";
		КомандаОтчет.Порядок = 1;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// Параметры:
//   МассивОбъектов        - Массив из Произвольный         - ссылки на объекты, которые нужно распечатать
//   ПараметрыПечати       - Структура                      - дополнительные настройки печати
//   КоллекцияПечатныхФорм - ТаблицаЗначений                - сформированные табличные документы (выходной параметр)
//   ОбъектыПечати         - СписокЗначений из Произвольный - имя области, в которой был выведен объект (выходной параметр)
//   ПараметрыВывода       - Структура                      - дополнительные параметры сформированных табличных документов (выходной параметр)
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Версионирование

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
