#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("ПланированиеЗапасов");
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка, ДокументОбъект - ссылка на документ или объект, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура - коллекция элементов:
//     * Таблица - ТаблицаЗначений - таблица данных для отражения в регистр.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Если ТипЗнч(Документ) = Тип("ДокументОбъект.КорректировкаПлановыхПотребностей") Тогда
		ДокументСсылка = Документ.Ссылка;
	Иначе
		ДокументСсылка = Документ;
	КонецЕсли;
	
	Запрос			= Новый Запрос;
	ТекстыЗапроса	= Новый СписокЗначений;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда
		////////////////////////////////////////////////////////////////////////////
		// Создадим запрос инициализации движений
		
		ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
		
		////////////////////////////////////////////////////////////////////////////
		// Сформируем текст запроса
		
		ТекстЗапросаТаблицаКорректировкиПлановыхПотребностей(Запрос, ТекстыЗапроса, Регистры);
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////
	// Получим таблицы для движений
	
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

#КонецОбласти

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
КонецПроцедуры

// Добавляет команду создания документа "Корректировка плановых потребностей".
// 
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
// 
// Возвращаемое значение:
//  СтрокаТаблицыЗначений из см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.КорректировкаПлановыхПотребностей) Тогда
		
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.КорректировкаПлановыхПотребностей.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(
													Метаданные.Документы.КорректировкаПлановыхПотребностей);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.МножественныйВыбор = Ложь;
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьПланированиеЗакупок,
														|ИспользоватьПланированиеСборкиРазборки";
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
КонецПроцедуры

// Возвращает результат проверки при смене статуса документа
//
// Параметры:
//	ВыборкаПроверки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	НовыйСтатус - ПеречислениеСсылка.СтатусыПлановыхКорректировок - Новый статус корректировки
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров.
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешного завершения проверки.
//
Функция ПроверкаПередСменойСтатуса(ВыборкаПроверки, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Возврат Истина; // Для документа "КорректировкаПлановыхПотребностей" отсутствуют дополнительные проверки
	
КонецФункции

// Формирует запрос проверки при смене статуса списка документов
//
// Параметры:
//	МассивДокументов - Массив - Массив ссылок на документы, которые надо проверять
//	НовыйСтатус - Строка - Имя нового статуса
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров.
//
// Возвращаемое значение:
//	Запрос - Запрос проверки перед сменой статуса.
//
Функция СформироватьЗапросПроверкиПриСменеСтатуса(МассивДокументов, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыПлановыхКорректировок[НовыйСтатус];
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
	|	ПРЕДСТАВЛЕНИЕ(&Статус) КАК ПредставлениеНовогоСтатуса,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументов.Статус = &Статус
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СтатусСовпадает,
	|	ТаблицаДокументов.Проведен КАК Проведен,
	|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
	|	ИСТИНА КАК ЗаписьПроведением
	|ИЗ
	|	Документ.КорректировкаПлановыхПотребностей КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.Ссылка В(&МассивДокументов)
	|УПОРЯДОЧИТЬ ПО
	|	Дата
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Статус", ЗначениеНовогоСтатуса);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Возврат Запрос;
	
КонецФункции


#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Сценарий)
	|	И ЗначениеРазрешено(ВидПлана)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КорректировкаПлановыхПотребностей.План КАК План,
	|	КорректировкаПлановыхПотребностей.ВидПлана КАК ВидПлана,
	|	КорректировкаПлановыхПотребностей.Сценарий КАК Сценарий,
	|	КорректировкаПлановыхПотребностей.Период КАК Период,
	|	КорректировкаПлановыхПотребностей.Статус КАК Статус
	|ИЗ
	|	Документ.КорректировкаПлановыхПотребностей КАК КорректировкаПлановыхПотребностей
	|ГДЕ
	|	КорректировкаПлановыхПотребностей.Ссылка = &Ссылка";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	ВидПланаЭтап = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.ВидПлана, "Родитель");
	Если Не ЗначениеЗаполнено(ВидПланаЭтап) Тогда
		ВидПланаЭтап = Реквизиты.ВидПлана;
	КонецЕсли;
		
	Запрос.УстановитьПараметр("План",                  Реквизиты.План);
	Запрос.УстановитьПараметр("ВидПлана",              Реквизиты.ВидПлана);
	Запрос.УстановитьПараметр("ВидПланаЭтап",          ВидПланаЭтап);
	
	Запрос.УстановитьПараметр("Сценарий",              Реквизиты.Сценарий);
	Запрос.УстановитьПараметр("Период",                Реквизиты.Период);
	Запрос.УстановитьПараметр("Статус",                Реквизиты.Статус);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаКорректировкиПлановыхПотребностей(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "КорректировкиПлановыхПотребностей";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Сценарий КАК Сценарий,
	|	&ВидПлана КАК ВидПлана,
	|	&ВидПланаЭтап КАК ВидПланаЭтап,
	|	&Ссылка КАК КорректировкаПлановыхПотребностей,
	|	&Период КАК Период,
	|	&План КАК План,
	|	&Статус КАК Статус,
	|	УменьшениеПотребностей.Номенклатура КАК Номенклатура,
	|	УменьшениеПотребностей.Характеристика КАК Характеристика,
	|	УменьшениеПотребностей.Назначение КАК Назначение,
	|	-УменьшениеПотребностей.Количество КАК Количество
	|ИЗ
	|	Документ.КорректировкаПлановыхПотребностей.УменьшениеПотребностей КАК УменьшениеПотребностей
	|ГДЕ
	|	УменьшениеПотребностей.Ссылка = &Ссылка
	|	И &Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыПлановыхКорректировок.Отменена)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Сценарий,
	|	&ВидПлана,
	|	&ВидПланаЭтап КАК ВидПланаЭтап,
	|	&Ссылка,
	|	&Период,
	|	&План,
	|	&Статус КАК Статус,
	|	УвеличениеПотребностей.Номенклатура,
	|	УвеличениеПотребностей.Характеристика,
	|	УвеличениеПотребностей.Назначение,
	|	УвеличениеПотребностей.Количество
	|ИЗ
	|	Документ.КорректировкаПлановыхПотребностей.УвеличениеПотребностей КАК УвеличениеПотребностей
	|ГДЕ
	|	УвеличениеПотребностей.Ссылка = &Ссылка
	|	И &Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыПлановыхКорректировок.Отменена)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Прочее

#КонецОбласти

#КонецОбласти

#КонецЕсли