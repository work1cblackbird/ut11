#Область ОписаниеПеременных

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();

	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьПередачиТоваровМеждуОрганизациями = ПолучитьФункциональнуюОпцию("ИспользоватьПередачиТоваровМеждуОрганизациями");
	ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
	ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	ИспользоватьНесколькоВалют = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют");
	
	
	УстановитьПараметрыВыбораПартнераИЗаголовкиПолей();
	УстановитьВидимость();
	
	Элементы.ГруппаВводОстатковПо.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет");
	Элементы.РасчетыСПартнерамиКонтрагент.ВыбиратьТип = ИспользоватьПередачиТоваровМеждуОрганизациями
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов");
	Элементы.Организация.Видимость = ПолучитьФункциональнуюОпцию("НеБазоваяВерсия");
	
	УстановитьЗаголовокЭтойФормы();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		ПриСозданииЧтенииНаСервере();
	КонецЕсли;

	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ИсправлениеДокументов.ПриСозданииНаСервере(ЭтотОбъект, Элементы.СтрокаИсправление);
	
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	ПриСозданииЧтенииНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ИсправлениеДокументов.ПриЧтенииНаСервере(ЭтотОбъект, Элементы.СтрокаИсправление);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	УстановитьЗаголовокЭтойФормы();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ХозяйственнаяОперация",  Объект.ХозяйственнаяОперация);
	Оповестить("Запись_ВводОстатков", ПараметрыЗаписи, Объект.Ссылка);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ИсправлениеДокументовКлиент.ПослеЗаписи(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ИсправлениеДокументовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение <> Объект.Организация Тогда
		ОчиститьНомерДатуОбъектовРасчета();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражатьВОперативномУчетеПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ОтражатьВБУиНУПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ОтражатьВУУПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, 
		ЭтотОбъект, 
		"Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаИсправлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИсправлениеДокументовКлиент.СтрокаИсправлениеОбработкаНавигационныйСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасчетыСПартнерами

&НаКлиенте
Процедура РасчетыСПартнерамиПартнерПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасчетыСПартнерами.ТекущиеДанные;
	ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	ПартнерПриИзменении(ТекущиеДанные.Партнер, ТекущиеДанные.Контрагент, ТекущаяСтрокаИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыСПартнерамиКонтрагентПриИзменении(Элемент)

	ТекущиеДанные = Элементы.РасчетыСПартнерами.ТекущиеДанные;
	ТекущиеДанные.ОбъектРасчетов            = Неопределено;
	ТекущиеДанные.ОбъектРасчетовОтправитель = Неопределено;
	ТекущиеДанные.Договор                   = Неопределено;
	ТекущиеДанные.ПорядокРасчетов           = Неопределено;
	ТекущиеДанные.ЦентрализованныйДоговор   = Неопределено;
	ТекущиеДанные.ДокументРасчетов          = Неопределено;

КонецПроцедуры

&НаКлиенте
Процедура РасчетыСПартнерамиСуммаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.РасчетыСПартнерами.ТекущиеДанные;
	РассчитанныеСуммы = РассчитатьСуммы(
		ТекущиеДанные.Сумма,
		0,
		ТекущиеДанные.ВалютаВзаиморасчетов,
		ВалютаРегламентированногоУчета,
		ВалютаУправленческогоУчета,
		Объект.Дата,
		ТекущиеДанные.ДокументРасчетов);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, РассчитанныеСуммы, "СуммаРегл, СуммаУпр");

КонецПроцедуры

&НаКлиенте
Процедура РасчетыСПартнерамиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ЗаполнитьВалютуВзаиморасчетовВСтроке(Элементы.РасчетыСПартнерами.ТекущиеДанные);
	ИнициализироватьКонтрагентаВСтроке(Элементы.РасчетыСПартнерами.ТекущиеДанные, НоваяСтрока, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыСПартнерамиРасчетныйДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	УстановитьПараметрыВыбораРасчетногоДокумента(Элемент.Имя, Элемент.Родитель.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура РасчетыСПартнерамиРасчетныйДокументСоздание(Элемент, СтандартнаяОбработка)
	УстановитьПараметрыВыбораРасчетногоДокумента(Элемент.Имя, Элемент.Родитель.ТекущиеДанные, Истина);
КонецПроцедуры

&НаКлиенте
Процедура РасчетыСПартнерамиРасчетныйДокументИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	УстановитьПараметрыВыбораРасчетногоДокумента(Элемент.Имя, Элемент.Родитель.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура РасчетыСПартнерамиРасчетныйДокументАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ОбработкаПолученияДанныхВыбораПервичногоДокумента(ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РасчетыСПартнерамиРасчетныйДокументОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ПроверитьРеквизитыВыбранногоЗначения(ВыбранноеЗначение, СтандартнаяОбработка, Элементы.РасчетыСПартнерами.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура РасчетыСПартнерамиОбъектРасчетовОтправительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.РасчетыСПартнерами.ТекущиеДанные; 
	ТипРасчетов = ?(
		Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковАвансовКлиентов")
			Или Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковЗадолженностиКлиентов")
			Или Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковПремийКлиентам"),
		ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом"),
		ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком"));
	ОбъектРасчетовНачалоВыбора(
		Элемент, 
		ТекущиеДанные, 
		ТипРасчетов,
		Истина);
КонецПроцедуры

&НаКлиенте
Процедура РасчетыСПартнерамиОбъектРасчетовОтправительАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.РасчетыСПартнерами.ТекущиеДанные;
	ТипРасчетов = ?(
		Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковАвансовКлиентов")
			Или Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковЗадолженностиКлиентов")
			Или Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковПремийКлиентам"),
		ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом"),
		ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком"));
	ОбъектРасчетовАвтоПодбор(
		Текст,
		ДанныеВыбора,
		ТекущиеДанные,
		СтандартнаяОбработка,
		ТипРасчетов,
		Истина);
КонецПроцедуры

&НаКлиенте
Процедура РасчетыСПартнерамиОбъектРасчетовОтправительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.РасчетыСПартнерами.ТекущиеДанные;
	ТипРасчетов = ?(
		Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковАвансовКлиентов")
			Или Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковЗадолженностиКлиентов")
			Или Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковПремийКлиентам"),
		ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом"),
		ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком"));
	ОбъектРасчетовАвтоПодбор(
		Текст,
		ДанныеВыбора,
		ТекущиеДанные,
		СтандартнаяОбработка,
		ТипРасчетов,
		Истина);
КонецПроцедуры

&НаКлиенте
Процедура РасчетыСПартнерамиОбъектРасчетовОтправительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.РасчетыСПартнерами.ТекущиеДанные;
	ОбъектРасчетовОбработкаВыбора(ВыбранноеЗначение, ТекущиеДанные, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РасчетыСПартнерамиОбъектРасчетовОтправительСоздание(Элемент, СтандартнаяОбработка)
	ОбъектРасчетовСоздание(Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РасчетыСПартнерамиОбъектРасчетовОтправительПриИзменении(Элемент)
	ТекущиеДанные = Элементы.РасчетыСПартнерами.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено 
		И Не ЗначениеЗаполнено(ТекущиеДанные.ОбъектРасчетовОтправитель) Тогда
		ТекущиеДанные.ДокументРасчетов = ПредопределенноеЗначение("Документ.ПервичныйДокумент.ПустаяСсылка");
		ТекущиеДанные.Договор = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
		ТекущиеДанные.ПорядокРасчетов = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПустаяСсылка");
		ТекущиеДанные.ЦентрализованныйДоговор = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасчетыСПартнерамиСуммаДисконтированияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасчетыСПартнерами.ТекущиеДанные;
	РассчитанныеСуммы = РассчитатьСуммы(
		ТекущиеДанные.Сумма,
		ТекущиеДанные.СуммаДисконтирования,
		ТекущиеДанные.ВалютаВзаиморасчетов,
		ВалютаРегламентированногоУчета,
		ВалютаУправленческогоУчета,
		Объект.Дата,
		ТекущиеДанные.ДокументРасчетов);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, РассчитанныеСуммы, "СуммаДисконтированияРегл, СуммаДисконтированияУпр");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткам(Команда)
	Возврат;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	
	// Дата погашения аванса
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.РасчетыСПартнерамиДатаПлатежа.Имя);
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "Объект.РасчетыСПартнерами.ДатаПлатежа", , ВидСравненияКомпоновкиДанных.НеЗаполнено);
	ХозОперации = Новый СписокЗначений;
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ВводОстатковАвансовКлиентов);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ВводОстатковПремийКлиентам);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ВводОстатковАвансовПоставщикам);
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "Объект.ХозяйственнаяОперация", ХозОперации, ВидСравненияКомпоновкиДанных.ВСписке);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<автоматически>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	Элементы.РасчетыСПартнерамиРасчетныйДокумент.Видимость   = Объект.ОтражатьВОперативномУчете;
	
	МассивОбъектовРасчетов = Новый Массив;
	МассивДоговоров = Новый Массив;
	Для Каждого СтрокаТаблицы Из Объект.РасчетыСПартнерами Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.ОбъектРасчетов)
			И ОбъектСПорядкомРасчетов(СтрокаТаблицы.ОбъектРасчетов) Тогда
			МассивОбъектовРасчетов.Добавить(СтрокаТаблицы.ОбъектРасчетов);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТаблицы.Договор)
			И ТипЗнч(СтрокаТаблицы.Договор) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			МассивДоговоров.Добавить(СтрокаТаблицы.Договор);
		КонецЕсли;
	КонецЦикла;
	
	ПорядкиРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивОбъектовРасчетов, "ПорядокРасчетов");
	МассивЦД = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивДоговоров, "ЦентрализованныйДоговор");
	
	Для Каждого СтрокаТаблицы Из Объект.РасчетыСПартнерами Цикл
		Если ПорядкиРасчетов[СтрокаТаблицы.ОбъектРасчетов] <> Неопределено Тогда
			СтрокаТаблицы.ПорядокРасчетов = ПорядкиРасчетов[СтрокаТаблицы.ОбъектРасчетов];
		Иначе
			СтрокаТаблицы.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПустаяСсылка();
		КонецЕсли;
		Если МассивЦД[СтрокаТаблицы.Договор] <> Неопределено Тогда
			СтрокаТаблицы.ЦентрализованныйДоговор = МассивЦД[СтрокаТаблицы.Договор];
		Иначе
			СтрокаТаблицы.ЦентрализованныйДоговор = Ложь;
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Организация, "ГоловнаяОрганизация, ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию");
		ГоловнаяОрганизация = РеквизитыОрганизации.ГоловнаяОрганизация;
		ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию = РеквизитыОрганизации.ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	ВидимостьЗаполненияПоОстаткам = НЕ Объект.ОтражатьВОперативномУчете И (Объект.ОтражатьВБУиНУ ИЛИ  Объект.ОтражатьВУУ) И НЕ Объект.Исправление;
	Элементы.РасчетыСПартнерамиЗаполнитьПоОстаткам.Видимость = ВидимостьЗаполненияПоОстаткам;
	
	ВидимостьСуммыУпр = Объект.ОтражатьВОперативномУчете ИЛИ Объект.ОтражатьВУУ; 
	Элементы.РасчетыСПартнерамиСуммаУпр.Видимость = ВидимостьСуммыУпр;
	
	ВидимостьСуммыРегл = Объект.ОтражатьВОперативномУчете ИЛИ Объект.ОтражатьВБУиНУ; 
	Элементы.РасчетыСПартнерамиСуммаРегл.Видимость = ВидимостьСуммыРегл;
	
	Элементы.РасчетыСПартнерамиРасчетныйДокумент.Видимость    = Объект.ОтражатьВОперативномУчете;

	Если ЗначениеЗаполнено(Объект.Организация)
		И Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковЗадолженностиПоставщикам Тогда
		ДействующиеПараметрыУчетнойПолитики = НастройкиНалоговУчетныхПолитик.ДействующиеПараметрыНалоговУчетныхПолитикНаДату("УчетнаяПолитикаФинансовогоУчета", Объект.Организация, Объект.Дата);
		Дисконт = ДействующиеПараметрыУчетнойПолитики.УчетДисконтированнойКредиторскойЗадолженностиПоставщикам;
		Элементы.РасчетыСПартнерамиСуммаДисконтирования.Видимость     = Дисконт;
		Элементы.РасчетыСПартнерамиСуммаДисконтированияРегл.Видимость = Дисконт И ВидимостьСуммыРегл;
		Элементы.РасчетыСПартнерамиСуммаДисконтированияУпр.Видимость  = Дисконт И ВидимостьСуммыУпр;
	Иначе
		Элементы.РасчетыСПартнерамиСуммаДисконтирования.Видимость     = Ложь;
		Элементы.РасчетыСПартнерамиСуммаДисконтированияРегл.Видимость = Ложь;
		Элементы.РасчетыСПартнерамиСуммаДисконтированияУпр.Видимость  = Ложь;
	КонецЕсли;
	
	Элементы.РасчетыСПартнерамиОтложенныйДоходНУ.Видимость = Ложь;
	Элементы.РасчетыСПартнерамиОтложенныйРасходНУ.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокЭтойФормы()
	
	АвтоЗаголовок = Ложь;
	
	Заголовок = ВводОстатковВызовСервера.ЗаголовокДокументаВводОстатковПоХозяйственнойОперации(Объект.Ссылка,
		Объект.Номер,
		Объект.Дата,
		Объект.ХозяйственнаяОперация);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Организация, "ГоловнаяОрганизация, ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию");
		ГоловнаяОрганизация = РеквизитыОрганизации.ГоловнаяОрганизация;
		ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию = РеквизитыОрганизации.ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию;
	КонецЕсли;
	Объект.РасчетыСПартнерами.Очистить();
	УстановитьВидимость();
КонецПроцедуры

&НаСервере
Процедура ПартнерПриИзменении(Партнер, Контрагент, ИдентификаторСтроки)
	
	ПартнерПриИзмененииСервер(Партнер, Контрагент);
	ТекущаяСтрока = Объект.РасчетыСПартнерами.НайтиПоИдентификатору(ИдентификаторСтроки);
	ТекущаяСтрока.ОбъектРасчетов            = Неопределено;
	ТекущаяСтрока.ОбъектРасчетовОтправитель = Неопределено;
	ТекущаяСтрока.Договор                   = Неопределено;
	ТекущаяСтрока.ПорядокРасчетов           = Неопределено;
	ТекущаяСтрока.ЦентрализованныйДоговор   = Неопределено;
	ТекущаяСтрока.ДокументРасчетов          = Неопределено;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РассчитатьСуммы(Сумма, СуммаПроцентов, Валюта, ВалютаРегл, ВалютаУпр, ДатаДокумента, ДокументРасчетов)
	
	Запрос = Новый Запрос;
	МассивВалют = Новый Массив;
	МассивВалют.Добавить(Валюта);
	МассивВалют.Добавить(ВалютаРегл);
	МассивВалют.Добавить(ВалютаУпр);
	Запрос.УстановитьПараметр("ВалютаУпр",         ВалютаУпр);
	Запрос.УстановитьПараметр("МассивВалют",       МассивВалют);
	Запрос.УстановитьПараметр("Период",            ДатаДокумента);
	Запрос.УстановитьПараметр("ПервичныйДокумент", ДокументРасчетов);
	Запрос.Текст = ТекстЗапросаКурсов();
	
	КурсЧислитель       = 1;
	КурсЗнаменатель     = 1;
	КурсЧислительУпр    = 1;
	КурсЗнаменательУпр  = 1;
	КурсЧислительРегл   = 1;
	КурсЗнаменательРегл = 1;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Валюта = Валюта Тогда
			КурсЧислитель   = Выборка.КурсЧислитель;
			КурсЗнаменатель = Выборка.КурсЗнаменатель;
		КонецЕсли;
		Если Выборка.Валюта = ВалютаРегл Тогда
			КурсЧислительРегл   = Выборка.КурсЧислитель;
			КурсЗнаменательРегл = Выборка.КурсЗнаменатель;
		КонецЕсли;
		Если Выборка.Валюта = ВалютаУпр Тогда
			КурсЧислительУпр   = Выборка.КурсЧислитель;
			КурсЗнаменательУпр = Выборка.КурсЗнаменатель;
		КонецЕсли;
	КонецЦикла;
	
	Если Валюта = ВалютаРегл Тогда
		СуммаРегл          = Сумма;
		СуммаПроцентовРегл = СуммаПроцентов;
	Иначе
		КоэффициентПересчета = КурсЧислитель * КурсЗнаменательРегл / (КурсЗнаменатель * КурсЧислительРегл);
		СуммаРегл          = Окр(Сумма * КоэффициентПересчета, 2, 1);
		СуммаПроцентовРегл = Окр(СуммаПроцентов * КоэффициентПересчета, 2, 1);
	КонецЕсли;
	
	Если Валюта = ВалютаУпр Тогда
		СуммаУпр          = Сумма;
		СуммаПроцентовУпр = СуммаПроцентов;
	Иначе
		КоэффициентПересчета = КурсЧислитель * КурсЗнаменательУпр / (КурсЗнаменатель * КурсЧислительУпр);
		СуммаУпр          = Окр(Сумма * КоэффициентПересчета, 2, 1);
		СуммаПроцентовУпр = Окр(СуммаПроцентов * КоэффициентПересчета, 2, 1);
	КонецЕсли;
	
	РассчитанныеСуммы = Новый Структура();
	РассчитанныеСуммы.Вставить("СуммаРегл",          СуммаРегл);
	РассчитанныеСуммы.Вставить("СуммаУпр",           СуммаУпр);
	РассчитанныеСуммы.Вставить("СуммаДисконтированияРегл", СуммаПроцентовРегл);
	РассчитанныеСуммы.Вставить("СуммаДисконтированияУпр",  СуммаПроцентовУпр);
	
	Возврат РассчитанныеСуммы;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстЗапросаКурсов()
	
	Возврат
	"ВЫБРАТЬ
	|	ЕСТЬNULL(
	|		ЕСТЬNULL(ДоговорыМеждуОрганизациями.Ссылка, 
	|				ДоговорыКонтрагентов.Ссылка), 
	|		НЕОПРЕДЕЛЕНО)                                            КАК Договор,
	|	ЕСТЬNULL(
	|		ЕСТЬNULL(ДоговорыМеждуОрганизациями.Дата, 
	|				ДоговорыКонтрагентов.Дата), 
	|		&Период)                                                 КАК Дата,
	|	ЕСТЬNULL(
	|		ЕСТЬNULL(ДоговорыМеждуОрганизациями.ВариантКурсаДоговора,
	|				ДоговорыКонтрагентов.ВариантКурсаДоговора), 
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыКурсаДоговора.Переменный)) КАК ВариантКурсаДоговора,
	|	ЕСТЬNULL(
	|		ЕСТЬNULL(ДоговорыМеждуОрганизациями.ВалютаВзаиморасчетов,
	|				ДоговорыКонтрагентов.ВалютаВзаиморасчетов), 
	|		ПервичныйДокумент.Валюта)                                КАК ВалютаВзаиморасчетов,
	|	ПервичныйДокумент.Валюта                                     КАК ВалютаДокумента,
	|	ПервичныйДокумент.Организация.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	ПервичныйДокумент.Ссылка                                     КАК Документ,
	|	ПервичныйДокумент.ТипПервичногоДокумента                     КАК ТипПервичногоДокумента
	|ПОМЕСТИТЬ ДанныеДоговора
	|ИЗ
	|	Документ.ПервичныйДокумент КАК ПервичныйДокумент
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыМеждуОрганизациями КАК ДоговорыМеждуОрганизациями
	|		ПО ПервичныйДокумент.Договор = ДоговорыМеждуОрганизациями.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО ПервичныйДокумент.Договор = ДоговорыКонтрагентов.Ссылка
	|ГДЕ
	|	ПервичныйДокумент.Ссылка = &ПервичныйДокумент
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервичныйДокумент.Ссылка КАК Ссылка,
	|	ПервичныйДокумент.Дата КАК ДатаКурса,
	|	ВалютыИКурсыДокументов.ВалютаДокумента КАК ВалютаДокумента,
	|	ВалютыИКурсыДокументов.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ВалютыИКурсыДокументов.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	ВалютыИКурсыДокументов.КурсЧислительВалютыВзаиморасчетов КАК КурсЧислительВалютыВзаиморасчетов,
	|	ВалютыИКурсыДокументов.КурсЗнаменательВалютыВзаиморасчетов КАК КурсЗнаменательВалютыВзаиморасчетов,
	|	ВалютыИКурсыДокументов.КурсЧислительВалютыУправленческогоУчета КАК КурсЧислительВалютыУправленческогоУчета,
	|	ВалютыИКурсыДокументов.КурсЗнаменательВалютыУправленческогоУчета КАК КурсЗнаменательВалютыУправленческогоУчета,
	|	ВалютыИКурсыДокументов.КурсЧислительВалютыДокумента КАК КурсЧислительВалютыДокумента,
	|	ВалютыИКурсыДокументов.КурсЗнаменательВалютыДокумента КАК КурсЗнаменательВалютыДокумента
	|ПОМЕСТИТЬ ВтФиксированныйКурс
	|ИЗ
	|	Документ.ПервичныйДокумент КАК ПервичныйДокумент
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО ПервичныйДокумент.ОбъектРасчетов = ОбъектыРасчетов.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДоговора КАК ДанныеДоговора
	|		ПО ПервичныйДокумент.Договор = ДанныеДоговора.Договор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВалютыИКурсыДокументов КАК ВалютыИКурсыДокументов
	|		ПО ПервичныйДокумент.Ссылка = ВалютыИКурсыДокументов.Документ
	|ГДЕ
	|	ОбъектыРасчетов.ТипОбъектаРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовРасчетов.Накладная)
	|	И ДанныеДоговора.ВариантКурсаДоговора = ЗНАЧЕНИЕ(Перечисление.ВариантыКурсаДоговора.ФиксированныйНаДатуОтгрузки)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДоговора.ВалютаВзаиморасчетов           КАК Валюта,
	|	ДанныеДоговора.ВалютаРегламентированногоУчета КАК БазоваяВалюта,
	|	КурсыПоДоговорам.Период                       КАК ДатаКурса,
	|	КурсыПоДоговорам.КурсЧислитель                КАК КурсЧислитель,
	|	КурсыПоДоговорам.КурсЗнаменатель              КАК КурсЗнаменатель
	|ИЗ
	|	ДанныеДоговора КАК ДанныеДоговора
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютРасчетовПоДоговорам.СрезПоследних(
	|				&Период,
	|				Договор В
	|					(ВЫБРАТЬ
	|						ДанныеДоговора.Договор
	|					ИЗ
	|						ДанныеДоговора)) КАК КурсыПоДоговорам
	|		ПО ДанныеДоговора.Договор = КурсыПоДоговорам.Договор
	|ГДЕ
	|	ДанныеДоговора.ВариантКурсаДоговора = ЗНАЧЕНИЕ(Перечисление.ВариантыКурсаДоговора.УстановленныйВДоговоре)
	|	И (ДанныеДоговора.ВалютаДокумента = ДанныеДоговора.ВалютаРегламентированногоУчета
	|		ИЛИ НЕ ДанныеДоговора.ТипПервичногоДокумента В (ЗНАЧЕНИЕ(Перечисление.ТипыПервичныхДокументов.ОплатаОтКлиента),
	|		                                                ЗНАЧЕНИЕ(Перечисление.ТипыПервичныхДокументов.ОплатаПоставщику)))
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтносительныеКурсы.Валюта          КАК Валюта,
	|	ОтносительныеКурсы.БазоваяВалюта   КАК БазоваяВалюта,
	|	ОтносительныеКурсы.Период          КАК ДатаКурса,
	|	ОтносительныеКурсы.КурсЧислитель   КАК КурсЧислитель,
	|	ОтносительныеКурсы.КурсЗнаменатель КАК КурсЗнаменатель
	|ИЗ
	|	ДанныеДоговора КАК ДанныеДоговора
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(
	|				&Период,
	|				Валюта В (&МассивВалют)
	|				И БазоваяВалюта В (ВЫБРАТЬ ДанныеДоговора.ВалютаРегламентированногоУчета ИЗ ДанныеДоговора)) КАК ОтносительныеКурсы
	|		ПО ДанныеДоговора.ВалютаРегламентированногоУчета = ОтносительныеКурсы.БазоваяВалюта
	|ГДЕ
	|	НЕ(ДанныеДоговора.ВалютаВзаиморасчетов = ОтносительныеКурсы.Валюта
	|				И ДанныеДоговора.ВариантКурсаДоговора = ЗНАЧЕНИЕ(Перечисление.ВариантыКурсаДоговора.УстановленныйВДоговоре)
	|				И (ДанныеДоговора.ВалютаДокумента = ДанныеДоговора.ВалютаРегламентированногоУчета
	|					ИЛИ НЕ ДанныеДоговора.ТипПервичногоДокумента В (ЗНАЧЕНИЕ(Перечисление.ТипыПервичныхДокументов.ОплатаОтКлиента),
	|		                                                            ЗНАЧЕНИЕ(Перечисление.ТипыПервичныхДокументов.ОплатаПоставщику))))
	|	И НЕ ДанныеДоговора.Документ В
	|				(ВЫБРАТЬ
	|					Т.Ссылка
	|				ИЗ
	|					ВтФиксированныйКурс КАК Т)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВтФиксированныйКурс.ВалютаДокумента                КАК Валюта,
	|	ВтФиксированныйКурс.ВалютаРегламентированногоУчета КАК БазоваяВалюта,
	|	ВтФиксированныйКурс.ДатаКурса                      КАК ДатаКурса,
	|	ВтФиксированныйКурс.КурсЧислительВалютыДокумента   КАК КурсЧислитель,
	|	ВтФиксированныйКурс.КурсЗнаменательВалютыДокумента КАК КурсЗнаменатель
	|ИЗ
	|	ВтФиксированныйКурс КАК ВтФиксированныйКурс
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВтФиксированныйКурс.ВалютаВзаиморасчетов                КАК Валюта,
	|	ВтФиксированныйКурс.ВалютаРегламентированногоУчета      КАК БазоваяВалюта,
	|	ВтФиксированныйКурс.ДатаКурса                           КАК ДатаКурса,
	|	ВтФиксированныйКурс.КурсЧислительВалютыВзаиморасчетов   КАК КурсЧислитель,
	|	ВтФиксированныйКурс.КурсЗнаменательВалютыВзаиморасчетов КАК КурсЗнаменатель
	|ИЗ
	|	ВтФиксированныйКурс КАК ВтФиксированныйКурс
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&ВалютаУпр                                                    КАК Валюта,
	|	ВтФиксированныйКурс.ВалютаРегламентированногоУчета            КАК БазоваяВалюта,
	|	ВтФиксированныйКурс.ДатаКурса                                 КАК ДатаКурса,
	|	ВтФиксированныйКурс.КурсЧислительВалютыУправленческогоУчета   КАК КурсЧислитель,
	|	ВтФиксированныйКурс.КурсЗнаменательВалютыУправленческогоУчета КАК КурсЗнаменатель
	|ИЗ
	|	ВтФиксированныйКурс КАК ВтФиксированныйКурс
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВтФиксированныйКурс.ВалютаРегламентированногоУчета КАК Валюта,
	|	ВтФиксированныйКурс.ВалютаРегламентированногоУчета КАК БазоваяВалюта,
	|	ВтФиксированныйКурс.ДатаКурса                      КАК ДатаКурса,
	|	1                                                  КАК КурсЧислитель,
	|	1                                                  КАК КурсЗнаменатель
	|ИЗ
	|	ВтФиксированныйКурс КАК ВтФиксированныйКурс
	|";
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПартнерПриИзмененииСервер(Партнер, Контрагент)
	
	Если Партнер = Справочники.Партнеры.НашеПредприятие 
		И ТипЗнч(Контрагент) <> Тип("СправочникСсылка.Организации") Тогда
		Контрагент = Справочники.Организации.ПустаяСсылка();
	Иначе
		ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыВыбораРасчетногоДокумента(ИмяЭлементаРасчетныйДокумент, СтрокаТаблицы, СозданиеНового = Ложь)
	
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоОстаткиАванса = Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковАвансовКлиентов")
	                   Или Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковАвансовПоставщикам");
	МассивПараметровРасчетногоДокумента = Новый Массив;
	МассивОрганизаций = Новый Массив;
	МассивОрганизаций.Добавить(Объект.Организация);
	Если СтрокаТаблицы.ЦентрализованныйДоговор 
		И (ГоловнаяОрганизация = Объект.Организация
			И (ЭтоОстаткиАванса
					И СтрокаТаблицы.ПорядокРасчетов <> ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоНакладным")
				Или Не ЭтоОстаткиАванса
					И СтрокаТаблицы.ПорядокРасчетов = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов"))
			Или ГоловнаяОрганизация <> Объект.Организация
				И ЭтоОстаткиАванса
				И (СтрокаТаблицы.ПорядокРасчетов = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоЗаказам")
					Или СтрокаТаблицы.ПорядокРасчетов = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоЗаказамНакладным"))) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОрганизаций, ДоступныеОрганизацииДоговора(СтрокаТаблицы.Договор, Объект.Организация), Истина);
		МассивОрганизаций.Добавить(ГоловнаяОрганизация);
	ИначеЕсли Не СтрокаТаблицы.ЦентрализованныйДоговор
		И ГоловнаяОрганизация <> Объект.Организация
		И ЭтоОстаткиАванса 
		И СтрокаТаблицы.ПорядокРасчетов <> ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоНакладным") Тогда
		МассивОрганизаций.Добавить(ГоловнаяОрганизация);
	КонецЕсли;
	МассивПараметровРасчетногоДокумента.Добавить(Новый ПараметрВыбора("Отбор.Организация",          Новый ФиксированныйМассив(МассивОрганизаций)));
	МассивПараметровРасчетногоДокумента.Добавить(Новый ПараметрВыбора("Отбор.Партнер",              СтрокаТаблицы.Партнер));
	МассивПараметровРасчетногоДокумента.Добавить(Новый ПараметрВыбора("Отбор.Контрагент",           СтрокаТаблицы.Контрагент));
	МассивПараметровРасчетногоДокумента.Добавить(Новый ПараметрВыбора("Отбор.ВалютаВзаиморасчетов", СтрокаТаблицы.ВалютаВзаиморасчетов));
	
	Если НЕ СозданиеНового Тогда
		МассивПараметровРасчетногоДокумента.Добавить(Новый ПараметрВыбора("Отбор.Дата",        Объект.Дата));
	КонецЕсли;
	
	Если ТипЗнч(СтрокаТаблицы.ОбъектРасчетов) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		МассивПараметровРасчетногоДокумента.Добавить(Новый ПараметрВыбора("Отбор.ПорядокРасчетов", СтрокаТаблицы.ПорядокРасчетов));
	ИначеЕсли ТипЗнч(СтрокаТаблицы.ОбъектРасчетов) = Тип("ДокументСсылка.ПервичныйДокумент") Тогда
		МассивПараметровРасчетногоДокумента.Добавить(Новый ПараметрВыбора("Отбор.ПорядокРасчетов", СтрокаТаблицы.ПорядокРасчетов));
	ИначеЕсли СтрокаТаблицы.ОбъектРасчетов = Неопределено Тогда
		МассивПорядковРасчетов = Новый Массив;
		МассивПорядковРасчетов.Добавить(ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоДоговорамНакладным"));
		МассивПорядковРасчетов.Добавить(ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоЗаказамНакладным"));
		МассивПорядковРасчетов.Добавить(ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоНакладным"));
		
		МассивПараметровРасчетногоДокумента.Добавить(Новый ПараметрВыбора("Отбор.ПорядокРасчетов", Новый ФиксированныйМассив(МассивПорядковРасчетов)));
	ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.ПорядокРасчетов)
		И ТипЗнч(СтрокаТаблицы.ОбъектРасчетов) <> Тип("СправочникСсылка.Претензии")
		И ТипЗнч(СтрокаТаблицы.ОбъектРасчетов) <> Тип("СправочникСсылка.ПодарочныеСертификаты") Тогда 
		МассивПараметровРасчетногоДокумента.Добавить(Новый ПараметрВыбора("Отбор.ПорядокРасчетов", СтрокаТаблицы.ПорядокРасчетов));
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаТаблицы.Договор) Тогда
		МассивПараметровРасчетногоДокумента.Добавить(Новый ПараметрВыбора("Отбор.Договор", СтрокаТаблицы.Договор));
	КонецЕсли;
	
	МассивТиповПервичныхДокументов = Новый Массив;
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковЗадолженностиКлиентов") Тогда
		МассивТиповПервичныхДокументов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыПервичныхДокументов.РеализацияКлиенту"));
		МассивПараметровРасчетногоДокумента.Добавить(Новый ПараметрВыбора("Отбор.ТипПервичногоДокумента", Новый ФиксированныйМассив(МассивТиповПервичныхДокументов)));
	ИначеЕсли Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковАвансовКлиентов") Тогда
		МассивТиповПервичныхДокументов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыПервичныхДокументов.ОплатаОтКлиента"));
		МассивТиповПервичныхДокументов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыПервичныхДокументов.КорректировкаРеализации"));
		МассивПараметровРасчетногоДокумента.Добавить(Новый ПараметрВыбора("Отбор.ТипПервичногоДокумента", Новый ФиксированныйМассив(МассивТиповПервичныхДокументов)));
	ИначеЕсли Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковЗадолженностиПоставщикам") Тогда
		МассивТиповПервичныхДокументов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыПервичныхДокументов.ПриобретениеУПоставщика"));
		МассивПараметровРасчетногоДокумента.Добавить(Новый ПараметрВыбора("Отбор.ТипПервичногоДокумента", Новый ФиксированныйМассив(МассивТиповПервичныхДокументов)));
	ИначеЕсли Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковАвансовПоставщикам") Тогда
		МассивТиповПервичныхДокументов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыПервичныхДокументов.ОплатаПоставщику"));
		МассивТиповПервичныхДокументов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыПервичныхДокументов.КорректировкаПриобретения"));
		МассивПараметровРасчетногоДокумента.Добавить(Новый ПараметрВыбора("Отбор.ТипПервичногоДокумента", Новый ФиксированныйМассив(МассивТиповПервичныхДокументов)));
	ИначеЕсли Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковПремийКлиентам") Тогда
		МассивТиповПервичныхДокументов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыПервичныхДокументов.АктПремииКлиенту"));
		МассивПараметровРасчетногоДокумента.Добавить(Новый ПараметрВыбора("Отбор.ТипПервичногоДокумента", Новый ФиксированныйМассив(МассивТиповПервичныхДокументов)));
	КонецЕсли;
	
	Элементы[ИмяЭлементаРасчетныйДокумент].ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровРасчетногоДокумента);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДоступныеОрганизацииДоговора(Договор, ТекущаяОрганзация)
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("Организация", ТекущаяОрганзация);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентовФилиалы.Организация КАК Организация,
		|	ДоговорыКонтрагентовФилиалы.Ссылка.Организация КАК ГоловнаяОрганизация
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов.Филиалы КАК ДоговорыКонтрагентовФилиалы
		|ГДЕ
		|	ДоговорыКонтрагентовФилиалы.Ссылка = &Договор
		|	И ВЫБОР
		|			КОГДА ДоговорыКонтрагентовФилиалы.Ссылка.Организация <> &Организация
		|				ТОГДА ДоговорыКонтрагентовФилиалы.Ссылка.РазрешаетсяПередачаОплатМеждуФилиалами
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Выборка.Организация);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьПараметрыВыбораПартнераИЗаголовкиПолей()

	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковЗадолженностиКлиентов
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковПремийКлиентам
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковАвансовКлиентов Тогда
		
		МассивПараметров = Новый Массив;
		ПараметрВыбора   = Новый ПараметрВыбора("Отбор.Клиент", Истина);
		
		МассивПараметров.Добавить(ПараметрВыбора);
		
		Если ИспользоватьПередачиТоваровМеждуОрганизациями Тогда
			
			ПараметрВыбора = Новый ПараметрВыбора("УстанавливатьОтборПоТипуПартнераКакИЛИ", Истина);
			МассивПараметров.Добавить(ПараметрВыбора);
			
			ПараметрВыбора = Новый ПараметрВыбора("Отбор.НашеПредприятие", Истина);
			МассивПараметров.Добавить(ПараметрВыбора);
			
		КонецЕсли;
		
		Элементы.РасчетыСПартнерамиПартнер.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
		Элементы.РасчетыСПартнерамиПартнер.Заголовок       = НСтр("ru = 'Клиент'");
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковЗадолженностиПоставщикам
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковАвансовПоставщикам Тогда
		
		МассивПараметров = Новый Массив;
		ПараметрВыбора   = Новый ПараметрВыбора("Отбор.Поставщик", Истина);
		
		МассивПараметров.Добавить(ПараметрВыбора);
		
		Если ИспользоватьПередачиТоваровМеждуОрганизациями Тогда
			
			ПараметрВыбора = Новый ПараметрВыбора("УстанавливатьОтборПоТипуПартнераКакИЛИ", Истина);
			МассивПараметров.Добавить(ПараметрВыбора);
			
			ПараметрВыбора = Новый ПараметрВыбора("Отбор.НашеПредприятие", Истина);
			МассивПараметров.Добавить(ПараметрВыбора);
			
		КонецЕсли;
		
		Элементы.РасчетыСПартнерамиПартнер.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
		Элементы.РасчетыСПартнерамиПартнер.Заголовок       = НСтр("ru = 'Поставщик'");
		
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковАвансовКлиентов
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковАвансовПоставщикам Тогда
		
		Элементы.РасчетыСПартнерамиДатаПлатежа.Заголовок = НСтр("ru = 'Дата погашения'");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВалютуВзаиморасчетовВСтроке(Строка)

	Если НЕ ЗначениеЗаполнено(Строка.ВалютаВзаиморасчетов) И Не ИспользоватьНесколькоВалют Тогда
		Строка.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьКонтрагентаВСтроке(Строка, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Копирование Тогда
		Строка.Контрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьНомерДатуОбъектовРасчета()
	
	Для Каждого Элемент Из Объект.РасчетыСПартнерами Цикл
		Элемент.НомерРасчетногоДокумента = "";
		Элемент.ДатаРасчетногоДокумента = Дата(1,1,1);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРеквизитыВыбранногоЗначения(ВыбранноеЗначение, СтандартнаяОбработка, ТекущиеДанные = Неопределено)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		РасчетныйДокумент = ВыбранноеЗначение.Объект;
		Если ЗначениеЗаполнено(РасчетныйДокумент) И Не ЗначениеЗаполнено(ВыбранноеЗначение.ОбъектРасчетов) Тогда
			// Создали объект расчетов с неправильной детализацией
			СтандартнаяОбработка = Ложь;
			ТекстПредупреждения = НСтр("ru='""%1"" не соответствует условиям выбора'");
			ТекстПредупреждения = СтрШаблон(ТекстПредупреждения, Строка(РасчетныйДокумент));
			ПоказатьПредупреждение(, ТекстПредупреждения);
		КонецЕсли;
		Если Не ВыбранноеЗначение.Свойство("ЦентрализованныйДоговор")
			И ЗначениеЗаполнено(ВыбранноеЗначение.Договор)
			И ТипЗнч(ВыбранноеЗначение.Договор) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			ВыбранноеЗначение.Вставить("ЦентрализованныйДоговор", ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение.Договор, "ЦентрализованныйДоговор"));
		КонецЕсли;
	Иначе
		РасчетныйДокумент = ВыбранноеЗначение;
	КонецЕсли;
	Если ЗначениеЗаполнено(РасчетныйДокумент) 
		И ТипЗнч(РасчетныйДокумент) = Тип("ДокументСсылка.ПервичныйДокумент") Тогда
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
			РеквизитыПервичногоДокумента = ВыбранноеЗначение;
		Иначе 
			РеквизитыПервичногоДокумента = ОбщегоНазначенияУТВызовСервера.ЗначенияРеквизитовОбъекта(ВыбранноеЗначение, "Дата, ВалютаВзаиморасчетов");
		КонецЕсли;
		Если ТекущиеДанные <> Неопределено
			И ТипЗнч(ВыбранноеЗначение) <> Тип("Структура")
			И РеквизитыПервичногоДокумента.ВалютаВзаиморасчетов <> ТекущиеДанные.ВалютаВзаиморасчетов Тогда
			СтандартнаяОбработка = Ложь;
			ТекстПредупреждения = НСтр("ru='""%1"" - валюта взаиморасчетов выбираемого расчетного документа отличается от валюты взаиморасчетов объекта расчетов'");
			ТекстПредупреждения = СтрШаблон(ТекстПредупреждения, Строка(ВыбранноеЗначение));
			ПоказатьПредупреждение(, ТекстПредупреждения);
		ИначеЕсли РеквизитыПервичногоДокумента.Дата > КонецДня(Объект.Дата) Тогда
			СтандартнаяОбработка = Ложь;
			ТекстПредупреждения = НСтр("ru='""%1"" - дата выбираемого документа не может быть больше даты ввода начальных остатков'");
			ТекстПредупреждения = СтрШаблон(ТекстПредупреждения, РасчетныйДокумент);
			ПоказатьПредупреждение(, ТекстПредупреждения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектРасчетовНачалоВыбора(Элемент, ТекущаяСтрока, ТипРасчетов, ПодборДебиторскойЗадолженности)
	
	ЗначенияОтбора = Новый Структура;
	ЗначенияОтбора.Вставить("ТипРасчетов", ТипРасчетов);
	ЗначенияОтбора.Вставить("Организация", Объект.Организация);
	Если ЗначениеЗаполнено(ТекущаяСтрока.Контрагент) Тогда
		ЗначенияОтбора.Вставить("Контрагент",  ТекущаяСтрока.Контрагент);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущаяСтрока.Партнер) Тогда
		ЗначенияОтбора.Вставить("Партнер", ТекущаяСтрока.Партнер);
	КонецЕсли;
	
	НастройкиВыбора = Новый Структура;
	НастройкиВыбора.Вставить("УчитыватьФилиалы", Ложь);
	НастройкиВыбора.Вставить("ВыборОснованияПлатежа", Ложь);
	НастройкиВыбора.Вставить("РедактируемыйДокумент", Объект.Ссылка);
	НастройкиВыбора.Вставить("Валюта", ТекущаяСтрока.ВалютаВзаиморасчетов);
	НастройкиВыбора.Вставить("Отбор", ЗначенияОтбора);
	НастройкиВыбора.Вставить("ВернутьСтруктуру", Истина);
	НастройкиВыбора.Вставить("ПодборДебиторскойЗадолженности", ПодборДебиторскойЗадолженности);
	НастройкиВыбора.Вставить("ВводОстатков", Истина);
	НастройкиВыбора.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
	НастройкиВыбора.Вставить(
		"ВыборАванса", 
		Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковАвансовКлиентов")
		Или Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковАвансовПоставщикам"));
	Если ЗначениеЗаполнено(ТекущаяСтрока.ОбъектРасчетовОтправитель) Тогда
		НастройкиВыбора.Вставить("ТекущееЗначение", ТекущаяСтрока.ОбъектРасчетовОтправитель);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ОбъектыРасчетов.Форма.ФормаВыбора", НастройкиВыбора, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектРасчетовАвтоПодбор(Текст, ДанныеВыбора, ТекущаяСтрока, СтандартнаяОбработка, ТипРасчетов, ПодборДебиторскойЗадолженности)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		НастройкиВыбора = ВзаиморасчетыКлиентСервер.СтруктураОтбораДанныхВыбора();
		НастройкиВыбора.РедактируемыйДокумент          = Объект.Ссылка;
		НастройкиВыбора.ПодборДебиторскойЗадолженности = ПодборДебиторскойЗадолженности; 
		НастройкиВыбора.УчитыватьФилиалы               = Ложь; 
		НастройкиВыбора.Организация                    = Объект.Организация;
		НастройкиВыбора.ТипРасчетов                    = ТипРасчетов;
		НастройкиВыбора.Текст                          = Текст;
		НастройкиВыбора.Контрагент                     = ТекущаяСтрока.Контрагент;
		НастройкиВыбора.Партнер                        = ТекущаяСтрока.Партнер;
		НастройкиВыбора.ВводОстатков                   = Истина;
		НастройкиВыбора.ХозяйственнаяОперацияВводаОстатков = Объект.ХозяйственнаяОперация;
		НастройкиВыбора.ВыборАванса = 
			Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковАвансовКлиентов")
			Или Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковАвансовПоставщикам");
		
		ВзаиморасчетыВызовСервера.ОбъектРасчетовОснованиеПлатежаОбработкаПолученияДанныхВыбора(
			ДанныеВыбора, 
			НастройкиВыбора, 
			Ложь,
			Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбъектРасчетовОбработкаВыбора(ВыбранноеЗначение, ТекущаяСтрока, СтандартнаяОбработка)
	
	ПроверитьРеквизитыВыбранногоЗначения(ВыбранноеЗначение, СтандартнаяОбработка, ТекущаяСтрока);
	
	Если СтандартнаяОбработка Тогда
		СтандартнаяОбработка = Ложь;
		ЗаполнитьЗначенияСвойств(
			ТекущаяСтрока, 
			ВыбранноеЗначение,,
			"Партнер, Контрагент");
		Если Не (ВыбранноеЗначение.Свойство("КомиссияЧерезКонечныхПокупателей") И ВыбранноеЗначение.КомиссияЧерезКонечныхПокупателей)
			И Не (ВыбранноеЗначение.Свойство("РазрешенаРаботаСДочернимиПартнерами") И ВыбранноеЗначение.РазрешенаРаботаСДочернимиПартнерами) Тогда
			ТекущаяСтрока.Партнер = ВыбранноеЗначение.Партнер;
		КонецЕсли;
		Если Не (ВыбранноеЗначение.Свойство("КомиссияЧерезКонечныхПокупателей") И ВыбранноеЗначение.КомиссияЧерезКонечныхПокупателей) Тогда
			ТекущаяСтрока.Контрагент = ВыбранноеЗначение.Контрагент;
		КонецЕсли;
		ТекущаяСтрока.ОбъектРасчетовОтправитель = ВыбранноеЗначение.ОбъектРасчетов;
		ТекущаяСтрока.ОбъектРасчетов = ВыбранноеЗначение.Объект;
		Если ТипЗнч(ВыбранноеЗначение.Объект) = Тип("ДокументСсылка.ПервичныйДокумент") Тогда
			ТекущаяСтрока.ДокументРасчетов = ВыбранноеЗначение.Объект;
		Иначе 
			ТекущаяСтрока.ДокументРасчетов = ПредопределенноеЗначение("Документ.ПервичныйДокумент.ПустаяСсылка");
		КонецЕсли;
		ОбъектРасчетовОбработкаВыбораНаСервере(ТекущаяСтрока.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбъектРасчетовОбработкаВыбораНаСервере(ИдентификаторСтроки)
	
	ТекущаяСтрока = Объект.РасчетыСПартнерами.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.ОбъектРасчетов)
		И ОбъектСПорядкомРасчетов(ТекущаяСтрока.ОбъектРасчетов) Тогда
		ТекущаяСтрока.ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.ОбъектРасчетов, "ПорядокРасчетов");
	КонецЕсли;
	
	РезультатРасчета = РассчитатьСуммы(ТекущаяСтрока.Сумма,
	                     ?(ТекущаяСтрока.Свойство("СуммаДисконтирования"), ТекущаяСтрока.СуммаДисконтирования, 0),
	                     ТекущаяСтрока.ВалютаВзаиморасчетов, 
	                     ВалютаРегламентированногоУчета, 
	                     ВалютаУправленческогоУчета, 
	                     Объект.Дата,
	                     ТекущаяСтрока.ДокументРасчетов);
	ТекущаяСтрока.СуммаРегл = РезультатРасчета.СуммаРегл;
	ТекущаяСтрока.СуммаУпр = РезультатРасчета.СуммаУпр;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектРасчетовСоздание(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
	ПараметрыОткрытия.Вставить("ЭтоРасчетыМеждуОрганизациями", ТекущиеДанные.Партнер = ПредопределенноеЗначение("Справочник.Партнеры.НашеПредприятие"));
	ПараметрыОткрытия.Вставить("ЭтоРозничныйПокупатель", ТекущиеДанные.Партнер = ПредопределенноеЗначение("Справочник.Партнеры.РозничныйПокупатель"));
	ДополнительныеПараметры = Новый Структура("ИмяТаблицы", Элемент.Родитель.Имя);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбъектРасчетовСозданиеОбработкаВыбораТипа", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Документ.ВводОстатковВзаиморасчетов.Форма.ФормаВыбораТипа", ПараметрыОткрытия, Элемент,,,, ОписаниеОповещения);
КонецПроцедуры 

&НаКлиенте
Процедура ОбъектРасчетовСозданиеОбработкаВыбораТипа(Результат, ДополнительныеПараметры)Экспорт 
	Если Результат <> Неопределено Тогда
		ТекущиеДанные = Элементы[ДополнительныеПараметры.ИмяТаблицы].ТекущиеДанные;
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("Организация", Объект.Организация);
		ЗначенияЗаполнения.Вставить("Контрагент", ТекущиеДанные.Контрагент);
		ЗначенияЗаполнения.Вставить("Партнер", ТекущиеДанные.Партнер);
		ЗначенияЗаполнения.Вставить("ВестиРасчетыПоПретензии", Истина);
		Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковАвансовКлиентов") Тогда
			ЗначенияЗаполнения.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияКлиенту"));
			ЗначенияЗаполнения.Вставить("ЭтоПретензияПоставщику", Ложь);
		ИначеЕсли Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковАвансовПоставщикам") Тогда
			ЗначенияЗаполнения.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика"));
			ЗначенияЗаполнения.Вставить("ЭтоПретензияПоставщику", Истина);
		ИначеЕсли Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковЗадолженностиКлиентов") Тогда
			ЗначенияЗаполнения.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияКлиенту"));
			ЗначенияЗаполнения.Вставить("ЭтоПретензияПоставщику", Ложь);
		ИначеЕсли Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковЗадолженностиПоставщикам") Тогда
			ЗначенияЗаполнения.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика"));
			ЗначенияЗаполнения.Вставить("ЭтоПретензияПоставщику", Истина);
		ИначеЕсли Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковПремийКлиентам") Тогда
			ЗначенияЗаполнения.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковПремийКлиентам"));
			ЗначенияЗаполнения.Вставить("ВестиРасчетыПоПретензии", Ложь);
			ЗначенияЗаполнения.Вставить("ЭтоПретензияПоставщику", Ложь);
		КонецЕсли;
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		СтруктураПараметров.Вставить("ОповеститьОСозданииОбъектаРасчетов", Истина);
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			ИмяОбъектаМетаданных = Результат.ИмяОбъектаМетаданных;
			ЗначенияЗаполнения.Вставить("ТипПервичногоДокумента", Результат.ТипПервичногоДокумента);
		Иначе
			ИмяОбъектаМетаданных = Результат;
		КонецЕсли;
		ОткрытьФорму(ИмяОбъектаМетаданных + ".ФормаОбъекта", СтруктураПараметров, Элементы[ДополнительныеПараметры.ИмяТаблицы + "ОбъектРасчетовОтправитель"]);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбработкаПолученияДанныхВыбораПервичногоДокумента(ДанныеВыбора, ПараметрыВыбора, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ПараметрыВыбора.СтрокаПоиска) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 10
	|	Таблица.Ссылка,
	|	Таблица.ПометкаУдаления
	|ИЗ
	|	Документ.ПервичныйДокумент КАК Таблица
	|ГДЕ
	|	Таблица.Номер ПОДОБНО &СтрокаПоиска
	|	И &УсловияОтбора
	|";
	
	ТекстУсловийОтбора = Новый Массив;
	ТекстУсловийОтбора.Добавить("ИСТИНА");
	Для Каждого УсловиеОтбора Из ПараметрыВыбора.Отбор Цикл 
		ТекстШаблона = "%1 = &%1"; // @query-part
		Если ТипЗнч(УсловиеОтбора.Значение) = Тип("ФиксированныйМассив") Тогда
			ТекстШаблона = "%1 В (&%1)"; // @query-part
		ИначеЕсли ТипЗнч(УсловиеОтбора.Значение) = Тип("Дата") Тогда
			ТекстШаблона = "%1 <= (&%1)"; // @query-part
		КонецЕсли;
		ТекстУсловийОтбора.Добавить(СтрШаблон(ТекстШаблона, УсловиеОтбора.Ключ));
		Запрос.УстановитьПараметр(УсловиеОтбора.Ключ, УсловиеОтбора.Значение);
	КонецЦикла;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловияОтбора", СтрСоединить(ТекстУсловийОтбора, " И ")); // @query-part-2
	
	Запрос.УстановитьПараметр("СтрокаПоиска", ПараметрыВыбора.СтрокаПоиска + "%");
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Список = Новый СписокЗначений;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Структура = Новый Структура;
		Структура.Вставить("Значение", ВыборкаДетальныеЗаписи.Ссылка);
		Структура.Вставить("ПометкаУдаления", ВыборкаДетальныеЗаписи.ПометкаУдаления);
		
		Список.Добавить(Структура);
	КонецЦикла;
	
	ДанныеВыбора = Список;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбъектСПорядкомРасчетов(Ссылка)
	
	Возврат ТипЗнч(Ссылка) <> Тип("ДокументСсылка.АвансовыйОтчет") 
		И ТипЗнч(Ссылка) <> Тип("ДокументСсылка.Бронирование")
		И ТипЗнч(Ссылка) <> Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями")
		И ТипЗнч(Ссылка) <> Тип("ДокументСсылка.ВозвратТоваровПоставщику")
		И ТипЗнч(Ссылка) <> Тип("ДокументСсылка.ОперацияПоПлатежнойКарте")
		//++ Локализация
		И ТипЗнч(Ссылка) <> Тип("ДокументСсылка.ОперацияПоЯндексКассе")
		//-- Локализация
		
		И ТипЗнч(Ссылка) <> Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств")
		И ТипЗнч(Ссылка) <> Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
		И ТипЗнч(Ссылка) <> Тип("ДокументСсылка.РасходныйКассовыйОрдер")
		И ТипЗнч(Ссылка) <> Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств")
		И ТипЗнч(Ссылка) <> Тип("СправочникСсылка.ДоговорыКредитовИДепозитов")
		И ТипЗнч(Ссылка) <> Тип("СправочникСсылка.Претензии");
	
КонецФункции

#КонецОбласти
