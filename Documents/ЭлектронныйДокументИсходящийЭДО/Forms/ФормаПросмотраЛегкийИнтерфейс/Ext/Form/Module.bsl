
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Параметры.Ключ.Пустая() Тогда
		
		ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект);
		
		ЗаполнитьДанныеНовогоДокумента();
		
		ОбновитьДанныеДляПросмотраНовогоДокумента();
		
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.Ссылка) 
		И РаботаСПрочтениямиВызовСервера.УстановитьСвойствоПрочтен(Объект.Ссылка, Истина) Тогда
		ОповеститьОПрочтении = Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект);

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	ТекущийДокументПакета = Объект.Ссылка;

	ТипДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, "ТипДокумента");

	ОбновитьДанныеДляПросмотраДокумента();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ОжидатьПолученияАсинхронныхДанных();

	Если ОповеститьОПрочтении Тогда
		Оповестить("ПрочтениеОбновитьСписок", Объект.Ссылка);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)

	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = ИнтерфейсДокументовЭДОКлиент.ИмяСобытияОбновленияСостоянияЭДО()
		И ЗначениеЗаполнено(Объект.Ссылка)
		И Параметр <> Неопределено Тогда
		
		ОбработатьОповещение = Истина;
		
		ДанныеПроверки = ИнтерфейсДокументовЭДОКлиент.НовыеДанныеПроверкиОповещения();
		ДанныеПроверки.ЭлектронныйДокумент = Объект.Ссылка;
		
		ИнтерфейсДокументовЭДОКлиент.ПриОбработкеОповещенияФормыПросмотраЭД(ДанныеПроверки, Параметр, 
			ОбработатьОповещение);
		
		Если ОбработатьОповещение Тогда
			ОбновитьДанныеПослеВыполненияДействийПоЭДО();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = ЛегкийИнтерфейсДокументовЭДОКлиент.ИмяСобытияИзмененияОбъектовУчетаДокумента()
		И Параметр = Объект.Ссылка Тогда
			
		ОбновитьДанныеПослеИзмененияОбъектовУчета();
			
	ИначеЕсли ИмяСобытия = "ЭлектронныйДокументИсходящий_ПодборДокументаУчета" И Параметр = Объект.Ссылка Тогда

		ОбновитьДанныеПослеИзмененияОбъектовУчета();
		
	ИначеЕсли ИмяСобытия = "ЗакрытьФормуДлительнойОперации" Тогда
			
		ЛегкийИнтерфейсДокументовЭДОКлиент.НастроитьБлокировкуПанелиКомандКарточкиДокумента(ЭтотОбъект, Ложь);
		
	ИначеЕсли ИмяСобытия = МашиночитаемыеДоверенностиКлиент.ИмяСобытияИсправлениеОшибкиПроверкиПолномочий() Тогда
		
		Для Каждого ИсправленнаяОшибка Из Параметр Цикл
			Если ИсправленнаяОшибка.СсылкаНаОбъект = Объект.Ссылка Тогда
				ОбновитьДанныеПослеИзмененияПодписейДокумента();
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ИмяСобытия = ПакетыДокументовЭДОКлиент.ИмяСобытияДобавленияДокументаВПакет() Тогда
		
		ОбновитьДанныеПослеДобавленияДокументаВПакет(Источник, Параметр);

	ИначеЕсли ИмяСобытия = ПакетыДокументовЭДОКлиент.ИмяСобытияУдалениеДокументаИзПакета() 
		И Источник = ИдентификаторПакета Тогда
		
		ОбновитьДанныеПослеУдаленияДокументаИзПакета();

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ПередЗаписьюНаСервереПоИнтеграциям(Отказ, ТекущийОбъект, ПараметрыЗаписи);
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ПриЗаписиНаСервереПоИнтеграциям(Отказ, ТекущийОбъект, ПараметрыЗаписи);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПослеЗаписиНаСервереПоИнтеграциям(ТекущийОбъект, ПараметрыЗаписи);
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ПослеЗаписиПоИнтеграциям(ПараметрыЗаписи);
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НадписьОшибкаФормированияПредставленияОбработкаНавигационнойСсылки(Элемент,
	НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьЖурналРегистрации" Тогда
		ЛегкийИнтерфейсДокументовЭДОКлиент.ОткрытьЖурналРегистрацииПоОшибкамПредставленияИзКарточкиДокумента(ЭтотОбъект,
			СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура МаршрутПодписанияДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	АдресХраненияНастроек = АдресХраненияНастроекВыбораМаршрута();
	
	Если Не ЗначениеЗаполнено(АдресХраненияНастроек) Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеВыбораМаршрутаПодписания", ЭтотОбъект);
	МаршрутыПодписанияБЭДКлиент.ОткрытьВыборМаршрутаПодписанияПоПараметрам(ЭтотОбъект, АдресХраненияНастроек,
		Объект.ВидПодписи, Объект.Организация, ОповещениеОЗавершении);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ЗаполнитьДанныеДокументаПриИзмененииКлючевыхРеквизитов();
	Модифицированность = Истина;
	ОжидатьПолученияАсинхронныхДанных();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, ВыборДобавлением, 
	СтандартнаяОбработка)
	ОчиститьДоговорПослеВыбораОрганизации(ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	ЗаполнитьДанныеДокументаПриИзмененииКлючевыхРеквизитов();
	Модифицированность = Истина;
	ОжидатьПолученияАсинхронныхДанных();
КонецПроцедуры

&НаКлиенте
Процедура СопроводительнаяЗапискаТекстПриИзменении(Элемент)
	Модифицированность = Истина;
	ИзмененаСопроводительнаяЗаписка = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("Контрагент", Объект.Контрагент);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеВыбораДоговораКонтрагента", ЭтотОбъект);
		
	ИнтеграцияЭДОКлиент.ОткрытьФормуВыбораДоговора(ПараметрыФормы, Элемент, ОповещениеОЗавершении,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	ЗаполнитьДанныеДокументаПриИзмененииКлючевыхРеквизитов();
	Модифицированность = Истина;
	ОжидатьПолученияАсинхронныхДанных();
КонецПроцедуры

&НаКлиенте
Процедура ВидДокументаПриИзменении(Элемент)
	ЗаполнитьДанныеДокументаПриИзмененииКлючевыхРеквизитов();
	Модифицированность = Истина;
	ИзмененВидДокумента = Истина;
	ОкноОтправкиВФормализованномВидеПоказано = Ложь;
	ОжидатьПолученияАсинхронныхДанных();
КонецПроцедуры

&НаКлиенте
Процедура НомерДокументаПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДатаДокументаПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовШапкиФормы

#Область ОбработчикиСобытийЭлементовТаблицыФормыСоставПакета

&НаКлиенте
Процедура СоставПакетаПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("СоставПакетаПослеАктивизацииСтроки", 0.1, Истина);
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовТаблицыФормыСоставПакета

#Область ОбработчикиСобытийЭлементовТаблицыФормыПодписи

&НаКлиенте
Процедура ПодписиПриАктивизацииСтроки(Элемент)
	ЛегкийИнтерфейсДокументовЭДОКлиент.ОбработатьАктивациюСтрокиВТаблицеПодписейКарточкиДокумента(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПодписиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеЗакрытияРезультатаПроверкиПодписи", ЭтотОбъект);
	ЛегкийИнтерфейсДокументовЭДОКлиент.ОбработатьВыборВТаблицеПодписейИзКарточкиДокумента(ЭтотОбъект, Элемент, Поле, 
		СтандартнаяОбработка, ОповещениеОЗавершении);
		
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовТаблицыФормыПодписи

#Область ОбработчикиКомандФормы

#Область ОбработчикиКомандФормыОсновные

#Область ВыполнениеДействийПоЭДО

&НаКлиенте
Процедура Утвердить(Команда)
	
	Если ТребуетсяЗаписатьДокумент() Тогда
		Обработчик = Новый ОписаниеОповещения("УтвердитьПослеЗаписи", ЭтотОбъект, Истина);
		НачатьЗаписьДокумента(Обработчик);
	Иначе
		ЛегкийИнтерфейсДокументовЭДОКлиент.ВыполнитьДействиеУтвердитьИзКарточкиДокумента(ЭтотОбъект,
			ЭтоПакетДокументов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьОтправить(Команда)
	
	Если ТребуетсяЗаписатьДокумент() Тогда
		Обработчик = Новый ОписаниеОповещения("ПодписатьОтправитьПослеЗаписи", ЭтотОбъект, Истина);
		НачатьЗаписьДокумента(Обработчик);
	Иначе
		ЛегкийИнтерфейсДокументовЭДОКлиент.ВыполнитьДействияПодписатьОтправитьИзКарточкиДокумента(ЭтотОбъект, 
			ЭтоПакетДокументов);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подписать(Команда)
	
	Если ТребуетсяЗаписатьДокумент() Тогда
		Обработчик = Новый ОписаниеОповещения("ПодписатьПослеЗаписи", ЭтотОбъект, Истина);
		НачатьЗаписьДокумента(Обработчик);
	Иначе
		ЛегкийИнтерфейсДокументовЭДОКлиент.ВыполнитьДействиеПодписатьИзКарточкиДокумента(ЭтотОбъект,
			ЭтоПакетДокументов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	
	Если ТребуетсяЗаписатьДокумент() Тогда
		Обработчик = Новый ОписаниеОповещения("ОтправитьПослеЗаписи", ЭтотОбъект, Истина);
		НачатьЗаписьДокумента(Обработчик);
	Иначе
		ЛегкийИнтерфейсДокументовЭДОКлиент.ВыполнитьДействиеОтправитьИзКарточкиДокумента(ЭтотОбъект,
			ЭтоПакетДокументов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отклонить(Команда)
	
	Если ТребуетсяЗаписатьДокумент() Тогда
		Обработчик = Новый ОписаниеОповещения("ОтклонитьПослеЗаписи", ЭтотОбъект, Истина);
		НачатьЗаписьДокумента(Обработчик);
	Иначе
		ЛегкийИнтерфейсДокументовЭДОКлиент.ВыполнитьДействиеОтклонитьИзКарточкиДокумента(ЭтотОбъект,
			ЭтоПакетДокументов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьПодписание(Команда)
	
	Если ТребуетсяЗаписатьДокумент() Тогда
		Обработчик = Новый ОписаниеОповещения("ОтклонитьПодписаниеПослеЗаписи", ЭтотОбъект, Истина);
		НачатьЗаписьДокумента(Обработчик);
	Иначе
		ЛегкийИнтерфейсДокументовЭДОКлиент.ВыполнитьДействиеОтклонитьПодписаниеИзКарточкиДокумента(ЭтотОбъект,
			ЭтоПакетДокументов);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПовторно(Команда)
	
	Если ТребуетсяЗаписатьДокумент() Тогда
		Обработчик = Новый ОписаниеОповещения("ОтправитьПовторноПослеЗаписи", ЭтотОбъект, Истина);
		НачатьЗаписьДокумента(Обработчик);
	Иначе
		ЛегкийИнтерфейсДокументовЭДОКлиент.ВыполнитьДействиеОтправитьПовторноИзКарточкиДокумента(ЭтотОбъект,
			ЭтоПакетДокументов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьАннулирование(Команда)
	
	Если ТребуетсяЗаписатьДокумент() Тогда
		Обработчик = Новый ОписаниеОповещения("ПринятьАннулированиеПослеЗаписи", ЭтотОбъект, Истина);
		НачатьЗаписьДокумента(Обработчик);
	Иначе
		ЛегкийИнтерфейсДокументовЭДОКлиент.ВыполнитьДействиеПринятьАннулированиеИзКарточкиДокумента(ЭтотОбъект, 
			ЭтоПакетДокументов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьАннулирование(Команда)
	
	Если ТребуетсяЗаписатьДокумент() Тогда
		Обработчик = Новый ОписаниеОповещения("ОтклонитьАннулированиеПослеЗаписи", ЭтотОбъект, Истина);
		НачатьЗаписьДокумента(Обработчик);
	Иначе
		ЛегкийИнтерфейсДокументовЭДОКлиент.ВыполнитьДействиеОтклонитьАннулированиеИзКарточкиДокумента(ЭтотОбъект, 
			ЭтоПакетДокументов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Аннулировать(Команда)
	
	Если ТребуетсяЗаписатьДокумент() Тогда
		Обработчик = Новый ОписаниеОповещения("АннулироватьПослеЗаписи", ЭтотОбъект, Истина);
		НачатьЗаписьДокумента(Обработчик);
	Иначе
		ЛегкийИнтерфейсДокументовЭДОКлиент.ВыполнитьДействиеАннулироватьИзКарточкиДокумента(ЭтотОбъект,
			ЭтоПакетДокументов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Завершить(Команда)
	
	Если ТребуетсяЗаписатьДокумент() Тогда
		Обработчик = Новый ОписаниеОповещения("ЗавершитьПослеЗаписи", ЭтотОбъект, Истина);
		НачатьЗаписьДокумента(Обработчик);
	Иначе
		ЛегкийИнтерфейсДокументовЭДОКлиент.ВыполнитьДействиеЗакрытьПринудительноИзКарточкиДокумента(ЭтотОбъект,
			ЭтоПакетДокументов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьВРаботу(Команда)
	
	Если ТребуетсяЗаписатьДокумент() Тогда
		Обработчик = Новый ОписаниеОповещения("ВернутьВРаботуПослеЗаписи", ЭтотОбъект, Истина);
		НачатьЗаписьДокумента(Обработчик);
	Иначе
		ЛегкийИнтерфейсДокументовЭДОКлиент.ВыполнитьДействиеВернутьВРаботуИзКарточкиДокумента(ЭтотОбъект, 
			ЭтоПакетДокументов);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ВыполнениеДействийПоЭДО

#Область ВыгрузкаИПечать

&НаКлиенте
Процедура НапечататьЭлектронныеДокументы(Команда)
	ЛегкийИнтерфейсДокументовЭДОКлиент.ОткрытьФормуПечатиИзКарточкиДокумента(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДокументооборотЦеликом(Команда)
	ЛегкийИнтерфейсДокументовЭДОКлиент.ВыгрузитьДокументооборотЦеликомИзКарточкиДокумента(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЭлектронныеДокументыВФорматеPDF(Команда)
	ЛегкийИнтерфейсДокументовЭДОКлиент.ВыгрузитьДокументыВФорматеPDFИзКарточкиДокумента(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЭлектронныеДокументыДляФНС(Команда)
	ЛегкийИнтерфейсДокументовЭДОКлиент.ВыгрузитьДокументыДляФНСИзКарточкиДокумента(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПротоколОбмена(Команда)
	
	Если ТребуетсяЗаписатьДокумент() Тогда
		Обработчик = Новый ОписаниеОповещения("ПоказатьПротоколОбменаПослеЗаписи", ЭтотОбъект);
		НачатьЗаписьДокумента(Обработчик);
	Иначе
		ИнтерфейсДокументовЭДОКлиент.ПоказатьПротоколОбмена(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ВыгрузкаИПечать

#Область ДействияСПакетом

&НаКлиенте
Процедура ДобавитьВПакетФайлСКомпьютера(Команда)
	
	Если ТребуетсяЗаписатьДокумент() Тогда
		Обработчик = Новый ОписаниеОповещения("ДобавитьВПакетФайлСКомпьютераПослеЗаписи", ЭтотОбъект);
		НачатьЗаписьДокумента(Обработчик);
	Иначе
		ПакетыДокументовЭДОКлиент.ПослеВыбораСпособаДобавленияДокументаВПакет("ДобавитьВПакетФайлСКомпьютера",
			ПараметрыДобавленияВПакет());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВПакетПрисоединенныйФайл(Команда)
	
	Если ТребуетсяЗаписатьДокумент() Тогда
		Обработчик = Новый ОписаниеОповещения("ДобавитьВПакетПрисоединенныйФайлПослеЗаписи", ЭтотОбъект);
		НачатьЗаписьДокумента(Обработчик);
	Иначе
		ПакетыДокументовЭДОКлиент.ПослеВыбораСпособаДобавленияДокументаВПакет("ДобавитьВПакетПрисоединенныйФайл",
			ПараметрыДобавленияВПакет());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВПакетДокументИнформационнойБазы(Команда)
	
	Если ТребуетсяЗаписатьДокумент() Тогда
		Обработчик = Новый ОписаниеОповещения("ДобавитьВПакетДокументИнформационнойБазыПослеЗаписи", ЭтотОбъект);
		НачатьЗаписьДокумента(Обработчик);
	Иначе
		ПакетыДокументовЭДОКлиент.ПослеВыбораСпособаДобавленияДокументаВПакет(
			"ДобавитьВПакетДокументИнформационнойБазы", ПараметрыДобавленияВПакет());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ДействияСПакетом

#КонецОбласти // ОбработчикиКомандФормыОсновные

#Область ОбработчикиКомандФормыЕще

#Область ВыполнениеДействийПоЭДОСДокументом

&НаКлиенте
Процедура УтвердитьДокумент(Команда)
	
	Если ТребуетсяЗаписатьДокумент() Тогда
		Обработчик = Новый ОписаниеОповещения("УтвердитьПослеЗаписи", ЭтотОбъект, Ложь);
		НачатьЗаписьДокумента(Обработчик);
	Иначе
		ЛегкийИнтерфейсДокументовЭДОКлиент.ВыполнитьДействиеУтвердитьИзКарточкиДокумента(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьОтправитьДокумент(Команда)
	
	Если ТребуетсяЗаписатьДокумент() Тогда
		Обработчик = Новый ОписаниеОповещения("ПодписатьОтправитьПослеЗаписи", ЭтотОбъект, Ложь);
		НачатьЗаписьДокумента(Обработчик);
	Иначе
		ЛегкийИнтерфейсДокументовЭДОКлиент.ВыполнитьДействияПодписатьОтправитьИзКарточкиДокумента(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьДокумент(Команда)
	
	Если ТребуетсяЗаписатьДокумент() Тогда
		Обработчик = Новый ОписаниеОповещения("ПодписатьПослеЗаписи", ЭтотОбъект, Ложь);
		НачатьЗаписьДокумента(Обработчик);
	Иначе
		ЛегкийИнтерфейсДокументовЭДОКлиент.ВыполнитьДействиеПодписатьИзКарточкиДокумента(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьДокумент(Команда)
	
	Если ТребуетсяЗаписатьДокумент() Тогда
		Обработчик = Новый ОписаниеОповещения("ОтправитьПослеЗаписи", ЭтотОбъект, Ложь);
		НачатьЗаписьДокумента(Обработчик);
	Иначе
		ЛегкийИнтерфейсДокументовЭДОКлиент.ВыполнитьДействиеОтправитьИзКарточкиДокумента(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьДокумент(Команда)
	
	Если ТребуетсяЗаписатьДокумент() Тогда
		Обработчик = Новый ОписаниеОповещения("ОтклонитьПослеЗаписи", ЭтотОбъект, Ложь);
		НачатьЗаписьДокумента(Обработчик);
	Иначе
		ЛегкийИнтерфейсДокументовЭДОКлиент.ВыполнитьДействиеОтклонитьИзКарточкиДокумента(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьПодписаниеДокумент(Команда)
	
	Если ТребуетсяЗаписатьДокумент() Тогда
		Обработчик = Новый ОписаниеОповещения("ОтклонитьПодписаниеПослеЗаписи", ЭтотОбъект, Ложь);
		НачатьЗаписьДокумента(Обработчик);
	Иначе
		ЛегкийИнтерфейсДокументовЭДОКлиент.ВыполнитьДействиеОтклонитьПодписаниеИзКарточкиДокумента(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПовторноДокумент(Команда)
	
	Если ТребуетсяЗаписатьДокумент() Тогда
		Обработчик = Новый ОписаниеОповещения("ОтправитьПовторноПослеЗаписи", ЭтотОбъект, Ложь);
		НачатьЗаписьДокумента(Обработчик);
	Иначе
		ЛегкийИнтерфейсДокументовЭДОКлиент.ВыполнитьДействиеОтправитьПовторноИзКарточкиДокумента(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьАннулированиеДокумент(Команда)
	
	Если ТребуетсяЗаписатьДокумент() Тогда
		Обработчик = Новый ОписаниеОповещения("ПринятьАннулированиеПослеЗаписи", ЭтотОбъект, Ложь);
		НачатьЗаписьДокумента(Обработчик);
	Иначе
		ЛегкийИнтерфейсДокументовЭДОКлиент.ВыполнитьДействиеПринятьАннулированиеИзКарточкиДокумента(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьАннулированиеДокумент(Команда)
	
	Если ТребуетсяЗаписатьДокумент() Тогда
		Обработчик = Новый ОписаниеОповещения("ОтклонитьАннулированиеПослеЗаписи", ЭтотОбъект, Ложь);
		НачатьЗаписьДокумента(Обработчик);
	Иначе
		ЛегкийИнтерфейсДокументовЭДОКлиент.ВыполнитьДействиеОтклонитьАннулированиеИзКарточкиДокумента(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АннулироватьДокумент(Команда)
	
	Если ТребуетсяЗаписатьДокумент() Тогда
		Обработчик = Новый ОписаниеОповещения("АннулироватьПослеЗаписи", ЭтотОбъект, Ложь);
		НачатьЗаписьДокумента(Обработчик);
	Иначе
		ЛегкийИнтерфейсДокументовЭДОКлиент.ВыполнитьДействиеАннулироватьИзКарточкиДокумента(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьДокумент(Команда)
	
	Если ТребуетсяЗаписатьДокумент() Тогда
		Обработчик = Новый ОписаниеОповещения("ЗавершитьПослеЗаписи", ЭтотОбъект, Ложь);
		НачатьЗаписьДокумента(Обработчик);
	Иначе
		ЛегкийИнтерфейсДокументовЭДОКлиент.ВыполнитьДействиеЗакрытьПринудительноИзКарточкиДокумента(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВернутьВРаботуДокумент(Команда)
	
	Если ТребуетсяЗаписатьДокумент() Тогда
		Обработчик = Новый ОписаниеОповещения("ВернутьВРаботуПослеЗаписи", ЭтотОбъект, Ложь);
		НачатьЗаписьДокумента(Обработчик);
	Иначе
		ЛегкийИнтерфейсДокументовЭДОКлиент.ВыполнитьДействиеВернутьВРаботуИзКарточкиДокумента(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти // ВыполнениеДействийПоЭДОСДокументом

#Область НастройкиОтображения

&НаКлиенте
Процедура ОтображатьБанковскиеРеквизиты(Кнопка)

	ВыводитьБанковскиеРеквизиты = Не ВыводитьБанковскиеРеквизиты;
	Элементы.КнопкаОтображатьБанковскиеРеквизиты.Пометка = ВыводитьБанковскиеРеквизиты;

	ОбновитьВизуализациюДокумента();

КонецПроцедуры

&НаКлиенте
Процедура ОтображатьДополнительнуюИнформацию(Команда)

	ОтключитьВыводДопДанных = Не ОтключитьВыводДопДанных;
	Элементы.КнопкаОтображатьДополнительнуюИнформацию.Пометка = Не ОтключитьВыводДопДанных;

	ОбновитьВизуализациюДокумента();

КонецПроцедуры

&НаКлиенте
Процедура ОтображатьОбластьКопияВерна(Команда)

	ОтключитьВыводКопияВерна = Не ОтключитьВыводКопияВерна;
	Элементы.КнопкаОтображатьОбластьКопияВерна.Пометка = Не ОтключитьВыводКопияВерна;

	ОбновитьВизуализациюДокумента();

КонецПроцедуры

&НаКлиенте
Процедура ТранслитерироватьИмяФайла(Команда)
	
	ОтключитьТранслитерацию = Не ОтключитьТранслитерацию;
	Элементы.КнопкаТранслитерироватьИмяФайла.Пометка = Не ОтключитьТранслитерацию;

	ОбновитьДанныеПослеИзмененияНастройкиТранслитерации();
	
КонецПроцедуры

#КонецОбласти // НастройкиОтображения

&НаКлиенте
Процедура ЗаписатьЭлектронныйДокумент(Команда)
	ЗаписатьДокумент();
КонецПроцедуры

&НаКлиенте
Процедура Переформировать(Команда)
	ПереформироватьДокумент();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФормализованныйДокументXMLСДиска(Команда)
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗагрузитьФормализованныйДокументXMLСДискаПослеЗагрузки",
		ЭтотОбъект);
	ИнтерфейсДокументовЭДОКлиент.ЗагрузитьФормализованныйДокументXMLСДиска(ОповещениеОЗавершении);

КонецПроцедуры

&НаКлиенте
Процедура СменитьОтветственного(Команда)
	
	Если ТребуетсяЗаписатьДокумент() Тогда
		Обработчик = Новый ОписаниеОповещения("СменитьОтветственногоПослеЗаписи", ЭтотОбъект);
		НачатьЗаписьДокумента(Обработчик);
	Иначе
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеСменыОтветственного", ЭтотОбъект);
		ЛегкийИнтерфейсДокументовЭДОКлиент.СменитьОтветственногоИзКарточкиДокумента(ЭтотОбъект, ОповещениеОЗавершении);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СменитьОтветственногоПакет(Команда)
	
	Если ТребуетсяЗаписатьДокумент() Тогда
		Обработчик = Новый ОписаниеОповещения("СменитьОтветственногоПакетПослеЗаписи", ЭтотОбъект);
		НачатьЗаписьДокумента(Обработчик);
	Иначе
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеСменыОтветственного", ЭтотОбъект);
		ЛегкийИнтерфейсДокументовЭДОКлиент.СменитьОтветственногоИзКарточкиДокумента(
			ЭтотОбъект, ОповещениеОЗавершении, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоздатьПроизвольныйДокумент(Команда)
	ИнтерфейсДокументовЭДОКлиент.ОткрытьНовыйПроизвольныйЭлектронныйДокументНаОсновании(Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодписи(Команда)
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеПроверкиПодписейДокумента", ЭтотОбъект);
	ЛегкийИнтерфейсДокументовЭДОКлиент.ВыполнитьПроверкуПодписейИзКарточкиДокумента(ЭтотОбъект, ОповещениеОЗавершении);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСертификат(Команда)
	ЛегкийИнтерфейсДокументовЭДОКлиент.ПоказатьСертификатИзКарточкиДокумента(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодписьПоДоверенностиВручную(Команда)
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеПроверкиПодписейДокумента", ЭтотОбъект);
	ЛегкийИнтерфейсДокументовЭДОКлиент.ПроверитьПодписьПоДоверенностиВручнуюИзКарточкиДокумента(ЭтотОбъект,
		ОповещениеОЗавершении);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОтправкуПолучение(Команда)

	Прочитать();
	ОжидатьПолученияАсинхронныхДанных();
	
	УчетныеЗаписиОбмена = Новый Массив;
	УчетныеЗаписиОбмена.Добавить(Объект.ИдентификаторОрганизации);
	ИнтерфейсДокументовЭДОКлиент.ОтправитьПолучитьДокументыЭДО(ЭтотОбъект,, УчетныеЗаписиОбмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуЭлектронногоДокумента(Команда)
	
	Если ТребуетсяЗаписатьДокумент() Тогда
		Обработчик = Новый ОписаниеОповещения("ОткрытьКарточкуЭлектронногоДокументаПослеЗаписи", ЭтотОбъект);
		НачатьЗаписьДокумента(Обработчик);
	Иначе
		ИнтерфейсДокументовЭДОКлиент.ОткрытьКарточкуЭлектронногоДокумента(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонтейнерДокумента(Команда)
	
	Если Не ЗначениеЗаполнено(СообщениеЭДО) Тогда
		СообщениеЭДО = СообщениеЭДОИнформацииОтправителя(Объект.Ссылка);
	КонецЕсли;

	ИнтерфейсДокументовЭДОКлиент.ОткрытьТранспортныйКонтейнерДокумента(СообщениеЭДО, СостояниеЭДО);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЖурналСобытийЭДО(Команда)
	
	Если ТребуетсяЗаписатьДокумент() Тогда
		Обработчик = Новый ОписаниеОповещения("ОткрытьЖурналСобытийЭДОПослеЗаписи", ЭтотОбъект);
		НачатьЗаписьДокумента(Обработчик);
	Иначе
		ЭлектронныеДокументыЭДОКлиент.ОткрытьЖурналДействийПоЭДО(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдалениеДокумент(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПометитьНаУдалениеДокументПослеОтветаНаВопрос", ЭтотОбъект);
	ОбщегоНазначенияБЭДКлиент.ЗадатьВопросНаУстановкуПометкиУдаления(Объект.ПометкаУдаления, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДокументИзПакета(Команда)
	ЛегкийИнтерфейсДокументовЭДОКлиент.УдалитьДокументИзПакета(ИдентификаторПакета, ТекущийДокументПакета);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиОтправки(Команда)
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеИзмененияНастроекОтправкиИлиФормирования", ЭтотОбъект);
	ЛегкийИнтерфейсДокументовЭДОКлиент.ОткрытьНастройкиОтправкиИзКарточкиДокумента(ЭтотОбъект, ОповещениеОЗавершении);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиФормирования(Команда)
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеИзмененияНастроекОтправкиИлиФормирования", ЭтотОбъект);
	ЛегкийИнтерфейсДокументовЭДОКлиент.ОткрытьНастройкиФормированияИзКарточкиДокумента(
		ЭтотОбъект, ОповещениеОЗавершении);

КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормыЕще

#Область ОбработчикиКомандФормыОтражениеВУчете

&НаКлиенте
Процедура ОткрытьДокументУчета1(Команда)
	ЛегкийИнтерфейсДокументовЭДОКлиент.ОткрытьОбъектУчетаИзКарточкиДокумента(ЭтотОбъект, 1);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументУчета2(Команда)
	ЛегкийИнтерфейсДокументовЭДОКлиент.ОткрытьОбъектУчетаИзКарточкиДокумента(ЭтотОбъект, 2);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсеДокументыУчета(Команда)
	
	Если ТребуетсяЗаписатьДокумент() Тогда
		Обработчик = Новый ОписаниеОповещения("ПоказатьВсеДокументыУчетаПослеЗаписи", ЭтотОбъект);
		НачатьЗаписьДокумента(Обработчик);
	Иначе
		ЛегкийИнтерфейсДокументовЭДОКлиент.ПоказатьРасширенныйПодборОбъектовУчетаИзКарточкиДокумента(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандОтраженияВУчете

#Область ОбработчикиКомандФормыСодержимое

&НаКлиенте
Процедура СостояниеОбработкаНажатия(Команда)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(КомментарийСостояния, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	
	Если ТребуетсяЗаписатьДокумент() Тогда
		Обработчик = Новый ОписаниеОповещения("ОткрытьФайлПослеЗаписи", ЭтотОбъект);
		НачатьЗаписьДокумента(Обработчик);
	Иначе
		ЛегкийИнтерфейсДокументовЭДОКлиент.ОткрытьФайлИнформацииОтправителяДокумента(
			Объект.Ссылка, Объект.ЭтоОблачныйЭДО, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗаписку(Команда)
	СопроводительнаяЗапискаТекст = "";
	Модифицированность = Истина;
	ИзмененаСопроводительнаяЗаписка = Истина;
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормыСодержимое

#КонецОбласти // ОбработчикиКомандФормы

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеДанных

&НаСервере
Процедура ОбновитьДанныеДляПросмотраДокумента()
	
	ДанныеКомпонентов = ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеКомпонентовПросмотраДокумента(
		"ПанельКарточки, ПанельПометкиНаУдаление, ПанельКомандИсходящегоДокумента, ПанельПакета, ПанельСостояния, 
		|ПанельИтогов, ПанельОтветственного, ПанельОтраженияВУчете, ПанельЗакладокИсходящегоДокумента,
		|ПанельВизуализации, ПанельКомандНастроекВизуализации, ПанельПредставленияФайла, ПанельПодписей, 
		|ПанельМаршрута, ПанельСопроводительнойЗапискиИсходящегоДокумента, ПанельРеквизитов");
	
	ОбновитьДанныеКомпонентов(ДанныеКомпонентов);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеДляПросмотраНовогоДокумента()

	ДанныеКомпонентов = ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеКомпонентовПросмотраДокумента(
		"ПанельКарточки, ПанельПометкиНаУдаление, ПанельКомандИсходящегоДокумента, ПанельПакета, ПанельСостояния, 
		|ПанельИтогов, ПанельОтветственного, ПанельОтраженияВУчете, ПанельЗакладокИсходящегоДокумента,
		|ПанельВизуализации, ПанельКомандНастроекВизуализации, ПанельПредставленияФайла, ПанельПодписей, 
		|ПанельМаршрута, ПанельСопроводительнойЗапискиИсходящегоДокумента, ПанельРеквизитов");
	
	ОбновитьДанныеКомпонентовПредварительныйПросмотр(ДанныеКомпонентов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеЭлектронногоДокумента()
	
	Прочитать();
	
	ОжидатьПолученияАсинхронныхДанных();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеКомпонентов(ДанныеКомпонентов)
	
	ПараметрыЗаполнения = 
		ЛегкийИнтерфейсДокументовЭДО.ПараметрыЗаполненияДанныхКомпонентовПросмотраДокумента(ЭтотОбъект);
	
	ОперацияПолученияДанных = ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентовПросмотраДокумента(
		ДанныеКомпонентов, ПараметрыЗаполнения);
	
	ЛегкийИнтерфейсДокументовЭДО.НастроитьПанелиПросмотраКарточкиДокумента(ЭтотОбъект, ДанныеКомпонентов);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеКомпонентовПредварительныйПросмотр(ДанныеКомпонентов)

	ПараметрыЗаполнения = 
		ЛегкийИнтерфейсДокументовЭДО.ПараметрыЗаполненияДанныхКомпонентовПредварительногоПросмотраДокумента(ЭтотОбъект);
	
	ОперацияПолученияДанных = ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентовПросмотраДокумента(
		ДанныеКомпонентов, ПараметрыЗаполнения);
	
	ЛегкийИнтерфейсДокументовЭДО.НастроитьПанелиПросмотраКарточкиДокумента(ЭтотОбъект, ДанныеКомпонентов);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВизуализациюДокумента()

	ОбновитьВизуализациюДокументаНаСервере();

	ОжидатьПолученияАсинхронныхДанных();

КонецПроцедуры

&НаСервере
Процедура ОбновитьВизуализациюДокументаНаСервере()

	ЛегкийИнтерфейсДокументовЭДО.СохранитьНастройкиОтображенияВизуализацииКарточкиДокумента(ЭтотОбъект);

	ДанныеКомпонентов = ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеКомпонентовПросмотраДокумента(
		"ПанельВизуализации, ПанельКомандНастроекВизуализации");
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбновитьДанныеКомпонентов(ДанныеКомпонентов);
	Иначе
		ОбновитьДанныеКомпонентовПредварительныйПросмотр(ДанныеКомпонентов);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПослеВыполненияДействийПоЭДО()
	
	Прочитать();
	
	ОжидатьПолученияАсинхронныхДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПослеИзмененияПодписейДокумента()
	
	ОбновитьДанныеПослеИзмененияПодписейДокументаНаСервере();
	
	ОжидатьПолученияАсинхронныхДанных();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПослеИзмененияПодписейДокументаНаСервере()
	
	ДанныеКомпонентов = ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеКомпонентовПросмотраДокумента(
		"ПанельКомандИсходящегоДокумента, ПанельСостояния, ПанельЗакладокИсходящегоДокумента, 
		|ПанельВизуализации, ПанельКомандНастроекВизуализации, ПанельПодписей");
	
	ОбновитьДанныеКомпонентов(ДанныеКомпонентов);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПослеИзмененияОбъектовУчета()

	ОбновитьДанныеПослеИзмененияОбъектовУчетаНаСервере();
	
	ОжидатьПолученияАсинхронныхДанных();

КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПослеИзмененияОбъектовУчетаНаСервере()

	ДанныеКомпонентов = ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеКомпонентовПросмотраДокумента(
		"ПанельСостояния, ПанельОтраженияВУчете");
	
	ОбновитьДанныеКомпонентов(ДанныеКомпонентов);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПослеИзмененияМаршрутаПодписания()

	ОбновитьДанныеПослеИзмененияМаршрутаПодписанияНаСервере();
	
	ОжидатьПолученияАсинхронныхДанных();
	
	ОбщегоНазначенияБЭДКлиент.РазвернутьУзлыДерева(ЭтотОбъект, "СхемаМаршрутаПодписания",, Истина);

КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПослеИзмененияМаршрутаПодписанияНаСервере()

	ДанныеКомпонентов = ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеКомпонентовПросмотраДокумента("ПанельМаршрута,
		|ПанельКомандИсходящегоДокумента");
	
	ОбновитьДанныеКомпонентов(ДанныеКомпонентов);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПослеДобавленияДокументаВПакет(НовыйИдентификаторПакета, ДокументыПакета)
	
	Если Не ЗначениеЗаполнено(ИдентификаторПакета) Тогда
		ИдентификаторПакета = НовыйИдентификаторПакета;
	КонецЕсли;
	
	Если НовыйИдентификаторПакета <> ИдентификаторПакета Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоДокументовВПакете = ДокументыПакета.Количество();
	ТекущийДокументПакета = ДокументыПакета[КоличествоДокументовВПакете - 1];
	
	ОбновитьДанныеПослеДобавленияДокументаВПакетНаСервере();
	
	ОжидатьПолученияАсинхронныхДанных();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПослеДобавленияДокументаВПакетНаСервере()
	
	СоставПакета.Очистить();
	
	ДанныеКомпонентов = ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеКомпонентовПросмотраДокумента("ПанельПакета");
	
	ОбновитьДанныеКомпонентов(ДанныеКомпонентов);
	
	ПоказатьДокументПакета();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПослеУдаленияДокументаИзПакета()
	
	ОбновитьДанныеПослеУдаленияДокументаИзПакетаНаСервере();
	
	ОжидатьПолученияАсинхронныхДанных();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПослеУдаленияДокументаИзПакетаНаСервере()
	
	Для Каждого ДокументПакета Из СоставПакета Цикл
		Если ДокументПакета.ЭлектронныйДокумент <> ТекущийДокументПакета Тогда
			ТекущийДокументПакета = ДокументПакета.ЭлектронныйДокумент;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СоставПакета.Очистить();
	
	ДанныеКомпонентов = ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеКомпонентовПросмотраДокумента("ПанельПакета");
	
	ОбновитьДанныеКомпонентов(ДанныеКомпонентов);
	
	ПоказатьДокументПакета();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПослеИзмененияНастройкиТранслитерации()
	
	ОбновитьДанныеПослеИзмененияНастройкиТранслитерацииНаСервере();
	
	ОжидатьПолученияАсинхронныхДанных();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПослеИзмененияНастройкиТранслитерацииНаСервере()
	
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(ИмяФормы, "ОтключитьТранслитерацию", ОтключитьТранслитерацию);

	ДанныеКомпонентов = ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеКомпонентовПросмотраДокумента(
		"ПанельКомандИсходящегоДокумента, ПанельВизуализации");
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбновитьДанныеКомпонентов(ДанныеКомпонентов);
	Иначе
		ОбновитьДанныеКомпонентовПредварительныйПросмотр(ДанныеКомпонентов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОбИзмененииСостоянияДокумента()

	ПараметрыСобытия = ИнтерфейсДокументовЭДОКлиент.НовыеПараметрыСобытияОбновленияСостоянияЭДО();
	ПараметрыСобытия.ЭлектронныеДокументы.Добавить(Объект.Ссылка);
	Оповестить(ИнтерфейсДокументовЭДОКлиент.ИмяСобытияОбновленияСостоянияЭДО(), ПараметрыСобытия);
	
КонецПроцедуры

#Область АсинхронноеОбновлениеДанных

&НаКлиенте
Процедура ОжидатьПолученияАсинхронныхДанных()

	ДлительнаяОперация = ОперацияПолученияДанных; // См. ДлительныеОперации.ВыполнитьФункцию

	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗаполнитьАсинхронныеДанныеПослеОжидания", ЭтотОбъект);

	Оповещение = Новый ОписаниеОповещения(
		"ОжидатьПолученияДанныхКомпонентовПросмотраПослеДлительнойОперации",
		ЛегкийИнтерфейсДокументовЭДОКлиент, ОповещениеОЗавершении);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАсинхронныеДанныеПослеОжидания(Результат, ДополнительныеПараметры) Экспорт

	Если ОперацияПолученияДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Результат.Успех Тогда
		ОперацияПолученияДанных = Результат.ОперацияПолученияДанных;
		
	Иначе
		ОперацияПолученияДанных = Неопределено;
	КонецЕсли;
	ОбновитьДанныеПослеЗаполненияАсинхронныхДанных();

КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПослеЗаполненияАсинхронныхДанных()

	ДанныеКомпонентов = 
		ЛегкийИнтерфейсДокументовЭДО.РезультатЗаполненияДанныхКомпонентовПросмотраДокументаАсинхронноВФоне(
			ОперацияПолученияДанных);
	
	ОперацияПолученияДанных = Неопределено;
	
	Если ДанныеКомпонентов <> Неопределено Тогда
		ЛегкийИнтерфейсДокументовЭДО.НастроитьПанелиПросмотраКарточкиДокумента(ЭтотОбъект, ДанныеКомпонентов);
	Иначе
		ДанныеКомпонентов = ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеКомпонентовПросмотраДокумента("ПанельВизуализации");
		ЛегкийИнтерфейсДокументовЭДО.НастроитьПанелиПросмотраКарточкиДокумента(ЭтотОбъект, ДанныеКомпонентов);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти // АсинхронноеОбновлениеДанных

#КонецОбласти // ОбновлениеДанных

#Область ЗаполнениеДанных

&НаСервере
Процедура ЗаполнитьДанныеНовогоДокумента()
	
	Если ЗначениеЗаполнено(Параметры.ПросмотрПодготовленныхДанных) Тогда
		ЗаполнитьДокументПоПодготовленнымДанным(Параметры.ПросмотрПодготовленныхДанных);
	ИначеЕсли ЗначениеЗаполнено(Параметры.ПросмотрФайла) Тогда 
		ЗаполнитьДокументПоФайлу(Параметры.ПросмотрФайла);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ПросмотрПодготовленныхДанных - Структура:
//  * ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  * НастройкиФормирования - См. ИнтерфейсДокументовЭДОКлиентСервер.НовыеНастройкиФормированияЭлектронногоДокументаОбъектаУчета
//  * АдресДанных - Строка
&НаСервере
Процедура ЗаполнитьДокументПоПодготовленнымДанным(ПросмотрПодготовленныхДанных)
	
	Если ПросмотрПодготовленныхДанных.НастройкиФормирования.ЭтоОблачныйЭДО Тогда
		ЗаполнитьДокументПоПодготовленнымДаннымОблачногоЭДО(ПросмотрПодготовленныхДанных);
	Иначе
		ЗаполнитьДокументПоПодготовленнымДаннымВстроенногоЭДО(ПросмотрПодготовленныхДанных);
	КонецЕсли;
	
КонецПроцедуры

#Область ЗаполнениеПодготовленныхДанныхВстроенногоЭДО

// Параметры:
//  ПросмотрПодготовленныхДанных - См. ЗаполнитьДокументПоПодготовленнымДанным.ПросмотрПодготовленныхДанных
&НаСервере
Процедура ЗаполнитьДокументПоПодготовленнымДаннымВстроенногоЭДО(ПросмотрПодготовленныхДанных)
	
	НастройкиФормирования = ПросмотрПодготовленныхДанных.НастройкиФормирования;
	ДанныеПредварительногоПросмотра = ИнтерфейсДокументовЭДО.ДанныеПредварительногоПросмотраПоАдресу(
		ПросмотрПодготовленныхДанных.АдресДанных);
	УдалитьИзВременногоХранилища(ПросмотрПодготовленныхДанных.АдресДанных);
	
	АдресОписанийСообщений = ПоместитьВоВременноеХранилище(ДанныеПредварительногоПросмотра.ОписанияСообщений,
		УникальныйИдентификатор);
	
	Если НастройкиФормирования.Направление = Перечисления.НаправленияЭДО.Внутренний Тогда
		ЗаполнитьДокументПоПодготовленнымДаннымВнутреннегоЭДО(
			НастройкиФормирования.НастройкиВнутреннегоЭДО, ДанныеПредварительногоПросмотра);
	Иначе
		ЗаполнитьДокументПоПодготовленнымДаннымИсходящегоЭДО(
			НастройкиФормирования.НастройкиОтправки, ДанныеПредварительногоПросмотра);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  НастройкиВнутреннегоЭДО - См. ИнтерфейсДокументовЭДО.НастройкиВнутреннегоЭДО
//  ДанныеПредварительногоПросмотра - См. ИнтерфейсДокументовЭДО.ДанныеПредварительногоПросмотраПоАдресу
&НаСервере
Процедура ЗаполнитьДокументПоПодготовленнымДаннымВнутреннегоЭДО(НастройкиВнутреннегоЭДО,
	ДанныеПредварительногоПросмотра)
	
	Для Каждого ОписаниеСообщения Из ДанныеПредварительногоПросмотра.ОписанияСообщений Цикл
		
		СодержаниеСообщения = ОписаниеСообщения.Данные.Содержание;
		
		Если ОписаниеСообщения.ТипЭлементаРегламента = 
			Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя Тогда
		
			Объект.ВидДокумента = НастройкиВнутреннегоЭДО.ВидДокумента;
			Объект.ИдентификаторДокументооборота = ЭлектронныеДокументыЭДО.НовыйИдентификаторДокументооборота();
			Объект.НомерДокумента = СодержаниеСообщения.НомерДокумента;
			Объект.ДатаДокумента = СодержаниеСообщения.ДатаДокумента;
			Объект.Организация = НастройкиВнутреннегоЭДО.Организация;
			Объект.ОбменБезПодписи = Ложь;
			Объект.ТипРегламента = СодержаниеСообщения.ТипРегламента;
			Объект.ТребуетсяИзвещение = Ложь;
			Объект.ТребуетсяПодтверждение = Ложь;
			Объект.ВыгружатьДополнительныеСведения = Ложь;
			
			МаршрутРедактируетсяПриСоздании =
				НастройкиВнутреннегоЭДО.МаршрутПодписания = МаршрутыПодписанияБЭД.МаршрутУказыватьПриСоздании();
			Если МаршрутРедактируетсяПриСоздании Тогда
				Объект.МаршрутПодписания = Неопределено;
			Иначе
				Объект.МаршрутПодписания = НастройкиВнутреннегоЭДО.МаршрутПодписания;
			КонецЕсли;
			
			Объект.ВидПодписи = НастройкиВнутреннегоЭДО.ВидПодписи;
			Объект.СпособОбмена = Перечисления.СпособыОбменаЭД.Внутренний;
			
			Основания.ЗагрузитьЗначения(ДанныеПредварительногоПросмотра.Основания);
			Для Каждого ОбъектУчета Из ДанныеПредварительногоПросмотра.Основания Цикл
				НовыйОбъектУчета = ОбъектыУчетаДокумента.Добавить();
				НовыйОбъектУчета.ОбъектУчета = ОбъектУчета;
			КонецЦикла;
			
		КонецЕсли;
	
	КонецЦикла;
	
	ТипДокумента = Перечисления.ТипыДокументовЭДО.Внутренний;
	МаршрутУказанВНастройках = ЗначениеЗаполнено(Объект.МаршрутПодписания);
	
	Объект.Ответственный = 
		ИнтеграцияЭДО.ОтветственныйПоДокументуЭДО(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	
КонецПроцедуры

// Параметры:
//  НастройкиОтправки - См. НастройкиЭДО.НастройкиОтправки
//  ДанныеПредварительногоПросмотра - См. ИнтерфейсДокументовЭДО.ДанныеПредварительногоПросмотраПоАдресу
&НаСервере
Процедура ЗаполнитьДокументПоПодготовленнымДаннымИсходящегоЭДО(НастройкиОтправки, ДанныеПредварительногоПросмотра)
	
	ПрикладныеВидыДокументов = ЭлектронныеДокументыЭДО.ПрикладныеВидыДокументов();
	
	Если ПрикладныеВидыДокументов.Найти(НастройкиОтправки.ВидДокумента) = Неопределено Тогда
		ТипДокумента = НастройкиОтправки.ВидДокумента.ТипДокумента;
	Иначе
		ТипДокумента = Перечисления.ТипыДокументовЭДО.Прикладной;
	КонецЕсли;
	
	МодульОбменСГИСЭПД = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
	КонецЕсли;
	
	Для Каждого ОписаниеСообщения Из ДанныеПредварительногоПросмотра.ОписанияСообщений Цикл
	
		Если ОписаниеСообщения.ТипЭлементаРегламента <> Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя
			И (МодульОбменСГИСЭПД <> Неопределено 
			И Не МодульОбменСГИСЭПД.ЭтоТитулОтправителя(ОписаниеСообщения.ТипЭлементаРегламента)) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеСообщения = ОписаниеСообщения.Данные;
		СодержаниеСообщения = ДанныеСообщения.Содержание;
			
		Если ЗначениеЗаполнено(СодержаниеСообщения) Тогда
			Объект.НомерДокумента = СодержаниеСообщения.НомерДокумента;
			Объект.ДатаДокумента = СодержаниеСообщения.ДатаДокумента;
			Объект.СуммаДокумента = СодержаниеСообщения.СуммаДокумента;
			Объект.ТипРегламента = СодержаниеСообщения.ТипРегламента;
			
			СуммаНДСДокументаИзДобавляемогоФайла = СодержаниеСообщения.СуммаНДСДокумента;
			СтавкаНДСДокументаИзДобавляемогоФайла = СодержаниеСообщения.СтавкаНДСДокумента;
			ВалютаДокументаИзДобавляемогоФайла = СодержаниеСообщения.ВалютаДокумента;
		Иначе
			Объект.ТипРегламента = Перечисления.ТипыРегламентовЭДО.Неформализованный;
		КонецЕсли;
		
		Объект.ИдентификаторДокументооборота = ЭлектронныеДокументыЭДО.НовыйИдентификаторДокументооборота();
		Объект.ВидДокумента = НастройкиОтправки.ВидДокумента;
		Объект.ИдентификаторОрганизации = НастройкиОтправки.ИдентификаторОтправителя;
		Объект.ИдентификаторКонтрагента = НастройкиОтправки.ИдентификаторПолучателя;
		Объект.Организация = НастройкиОтправки.Отправитель;
		Объект.Контрагент  = НастройкиОтправки.Получатель;
		Объект.ДоговорКонтрагента = НастройкиОтправки.Договор;
		Объект.СпособОбмена = НастройкиОтправки.СпособОбмена;
		Объект.ОбменБезПодписи = НастройкиОтправки.ОбменБезПодписи;
		Объект.ТребуетсяИзвещение = НастройкиОтправки.ТребуетсяИзвещениеОПолучении;
		Объект.ТребуетсяПодтверждение = НастройкиОтправки.ТребуетсяОтветнаяПодпись;
		Объект.ВыгружатьДополнительныеСведения = НастройкиОтправки.ВыгружатьДополнительныеСведения;
		Объект.МаршрутПодписания = НастройкиОтправки.МаршрутПодписания;
		Объект.ВидПодписи = Перечисления.ВидыЭлектронныхПодписей.УсиленнаяКвалифицированная;
		Объект.ФорматОсновногоТитула = НастройкиОтправки.Формат;
		
		МаршрутРедактируетсяПриСоздании = 
			НастройкиОтправки.МаршрутПодписания = МаршрутыПодписанияБЭД.МаршрутУказыватьПриСоздании();
		Если МаршрутРедактируетсяПриСоздании Тогда
			Объект.МаршрутПодписания = Неопределено;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеПредварительногоПросмотра.СвязующийОбъектУчета) Тогда
			Объект.ИдентификаторСвязи = 
				Строка(ДанныеПредварительногоПросмотра.СвязующийОбъектУчета.УникальныйИдентификатор());
		КонецЕсли;
		
		Основания.ЗагрузитьЗначения(ДанныеПредварительногоПросмотра.Основания);
		Для Каждого ОбъектУчета Из ДанныеПредварительногоПросмотра.Основания Цикл
			НовыйОбъектУчета = ОбъектыУчетаДокумента.Добавить();
			НовыйОбъектУчета.ОбъектУчета = ОбъектУчета;
		КонецЦикла;
		
		ЭлектронныеДокументыЭДО.ЗагрузитьИдентификаторыСвязанныхОбъектовУчета(Объект,
			ДанныеПредварительногоПросмотра.СвязанныеОбъектыУчета);
			
	КонецЦикла;
	
	МаршрутУказанВНастройках = ЗначениеЗаполнено(Объект.МаршрутПодписания);
	
	Объект.Ответственный = 
		ИнтеграцияЭДО.ОтветственныйПоДокументуЭДО(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеПодготовленныхОблачногоЭДО

// Параметры:
//  ПросмотрПодготовленныхДанных - См. ЗаполнитьДокументПоПодготовленнымДанным.ПросмотрПодготовленныхДанных
&НаСервере
Процедура ЗаполнитьДокументПоПодготовленнымДаннымОблачногоЭДО(ПросмотрПодготовленныхДанных)
	
	Если ИнтерфейсДокументовЭДО.ЕстьИнтеграцияОблачногоЭДО() Тогда
		ОбщийМодульИнтеграцияОблачногоЭДО = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияОблачногоЭДО");
		//@skip-check bsl-legacy-check-static-feature-access-for-unknown-left-part
		// АПК:287-выкл - временная мера до момента реализации облачного ЭДО в полном объеме
		ОбщийМодульИнтеграцияОблачногоЭДО.ЗаполнитьДокументПоПодготовленнымДанным(ЭтотОбъект,
			ПросмотрПодготовленныхДанных);
		// АПК:287-вкл
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеПоФайлу

// Параметры:
//  ПросмотрФайла - См. ЛегкийИнтерфейсДокументовЭДО.НовыеПараметрыПросмотраДокументаПоФайлу
&НаСервере
Процедура ЗаполнитьДокументПоФайлу(ПросмотрФайла)
	
	ЗаполнитьВложенияПоАдресуОписанияФайла(ПросмотрФайла.АдресОписанияФайла);
	
	Если ЗначениеЗаполнено(ПросмотрФайла.ОбъектУчета) Тогда
		ЗаполнитьДокументПоОбъектуУчета(ПросмотрФайла.ОбъектУчета, ПросмотрФайла.ВидДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПросмотрФайла.РеквизитыДокументаИзСодержанияФайла) Тогда
		ЗаполнитьДокументРеквизитамиИзСодержанияФайла(ПросмотрФайла.РеквизитыДокументаИзСодержанияФайла);
	КонецЕсли;
	
	ЗаполнитьДокументЗначениямиПоУмолчанию();
	
	ЗаполнитьДанныеДокументаПриИзмененииКлючевыхРеквизитов();
	
КонецПроцедуры

// Параметры:
//  АдресОписанияФайла - Строка
&НаСервере
Процедура ЗаполнитьВложенияПоАдресуОписанияФайла(АдресОписанияФайла)
	
	ОписаниеФайла = ПолучитьИзВременногоХранилища(АдресОписанияФайла); // См. РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла

	УдалитьИзВременногоХранилища(АдресОписанияФайла);

	ЗаполнитьВложенияИзОписанияФайла(ОписаниеФайла);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВложенияИзОписанияФайла(ОписаниеФайла)
	
	АдресФайловНовогоДокумента = ПоместитьВоВременноеХранилище(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОписаниеФайла), УникальныйИдентификатор);
	ИмяДобавляемогоФайла = РаботаСФайламиБЭД.ПреобразоватьИмяФайлаСУчетомТранслитерации(
		ОписаниеФайла.ИмяФайла, ОтключитьТранслитерацию);
	РасширениеДобавляемогоФайла = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ИмяДобавляемогоФайла);
	
КонецПроцедуры

// Параметры:
//  ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
&НаСервере
Процедура ЗаполнитьДокументПоОбъектуУчета(ОбъектУчета, ВидДокумента)
	
	Если Не ЗначениеЗаполнено(ОбъектУчета) Тогда
		Возврат;
	КонецЕсли;
		
	НовыйОбъектУчета = ОбъектыУчетаДокумента.Добавить();
	НовыйОбъектУчета.ОбъектУчета = ОбъектУчета;
	Основания.Добавить(ОбъектУчета);
	
	Если ТипЗнч(ОбъектУчета) = Тип("ДокументСсылка.ЭлектронныйДокументВходящийЭДО")
		Или ТипЗнч(ОбъектУчета) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящийЭДО") Тогда
		
		СвойстваДокумента = ЭлектронныеДокументыЭДО.СвойстваДокумента(ОбъектУчета,
			"Организация, Контрагент, ДоговорКонтрагента");
		Объект.Организация = СвойстваДокумента.Организация;
		Объект.Контрагент = СвойстваДокумента.Контрагент;
		Объект.ДоговорКонтрагента = СвойстваДокумента.ДоговорКонтрагента;
		
	ИначеЕсли ТипЗнч(ОбъектУчета) = Тип("СправочникСсылка.МЧД003") Тогда
		
		РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектУчета, "ДатаВыдачи, НомерДоверенности");
		Объект.НомерДокумента = РеквизитыОснования.НомерДоверенности;
		Объект.ДатаДокумента = РеквизитыОснования.ДатаВыдачи;
		
		ОписаниеОбъектаУчета = ЭлектронныеДокументыЭДО.ОписаниеОбъектаУчета(ОбъектУчета, ВидДокумента);
		
		ЗаполнитьДокументПоОписаниюОбъектаУчета(ОписаниеОбъектаУчета);
		
	Иначе
	
		РеквизитыОснования = ИнтеграцияЭДО.ОписаниеОснованияЭлектронногоДокумента(ОбъектУчета);
		Объект.Организация = РеквизитыОснования.Организация;
		Объект.Контрагент = РеквизитыОснования.Контрагент;
		Объект.НомерДокумента = РеквизитыОснования.Номер;
		Объект.ДатаДокумента = РеквизитыОснования.Дата;
		Объект.СуммаДокумента = РеквизитыОснования.СуммаДокумента;
		
		ОписаниеОбъектаУчета = ЭлектронныеДокументыЭДО.ОписаниеОбъектаУчета(ОбъектУчета, ВидДокумента);
	
		ЗаполнитьДокументПоОписаниюОбъектаУчета(ОписаниеОбъектаУчета);
	
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ОписаниеОбъектаУчета - см. ЭлектронныеДокументыЭДО.ОписаниеОбъектаУчета
&НаСервере
Процедура ЗаполнитьДокументПоОписаниюОбъектаУчета(ОписаниеОбъектаУчета)
	
	КоличествоДокументовЭДО = ОписаниеОбъектаУчета.Количество();
	
	Если КоличествоДокументовЭДО = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Если КоличествоДокументовЭДО = 1 Тогда
		
		ОписаниеДокументаЭДО = ОписаниеОбъектаУчета[0];
		
		Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.Организация = ОписаниеДокументаЭДО.Организация;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Объект.Контрагент = ОписаниеДокументаЭДО.Контрагент;
		КонецЕсли;
		
		Объект.ДоговорКонтрагента = ОписаниеДокументаЭДО.Договор;
		
		ТипДокумента = ОписаниеДокументаЭДО.ТипДокумента;
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Организация", Объект.Организация);
	СтруктураПоиска.Вставить("Контрагент", Объект.Контрагент);
	НайденныеСтроки = ОписаниеОбъектаУчета.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() Тогда
		
		ДоговорыКонтрагентов = Новый Массив;
		
		Для Каждого СтрокаОписания Из НайденныеСтроки Цикл
			ДоговорыКонтрагентов.Добавить(СтрокаОписания.Договор);
		КонецЦикла;
		
		ДоговорыКонтрагентов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ДоговорыКонтрагентов);
		Если ДоговорыКонтрагентов.Количество() = 1 Тогда
			Объект.ДоговорКонтрагента = ДоговорыКонтрагентов[0];
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументЗначениямиПоУмолчанию()
	
	Если Не ЗначениеЗаполнено(ТипДокумента) Тогда
		ТипДокумента = Перечисления.ТипыДокументовЭДО.Прочее;
	КонецЕсли;
	
	// Если не было предварительной подготовки данных, то документ не может иметь тип "Договорный документ"
	Если ТипДокумента = Перечисления.ТипыДокументовЭДО.ДоговорныйДокумент Тогда
		Объект.ВидДокумента = ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(Перечисления.ТипыДокументовЭДО.Прочее);
	КонецЕсли;
	
	ТипыДокументовПроизвольногоФормата = ЭлектронныеДокументыЭДО.ТипыДокументовПроизвольногоФормата();
	Если ТипыДокументовПроизвольногоФормата.Найти(ТипДокумента) = Неопределено Тогда
		ТипДокумента = Перечисления.ТипыДокументовЭДО.Прочее;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ВидДокумента) Тогда
		Объект.ВидДокумента = ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(ТипДокумента);
	КонецЕсли;
	
	ИспользуетсяНесколькоОрганизаций = ИнтеграцияЭДО.ИспользуетсяНесколькоОрганизаций();
	Если Не ЗначениеЗаполнено(Объект.Организация) И ИспользуетсяНесколькоОрганизаций Тогда
		Объект.Организация = ИнтеграцияЭДО.ОрганизацияПоУмолчанию();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ДатаДокумента) Тогда
		Объект.ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Объект.ИдентификаторДокументооборота = ЭлектронныеДокументыЭДО.НовыйИдентификаторДокументооборота();
	
	Объект.ТипРегламента = Перечисления.ТипыРегламентовЭДО.Неформализованный;
	
	Если ТипДокумента <> Перечисления.ТипыДокументовЭДО.МашиночитаемаяДоверенность Тогда
		СвязанныеОбъектыУчета = ОбъектыУчетаДокумента.Выгрузить(, "ОбъектУчета");
		ЭлектронныеДокументыЭДО.ЗагрузитьИдентификаторыСвязанныхОбъектовУчета(Объект, СвязанныеОбъектыУчета);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ответственный) Тогда
		Объект.Ответственный = 
			ИнтеграцияЭДО.ОтветственныйПоДокументуЭДО(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  РеквизитыДокумента - См. ЛегкийИнтерфейсДокументовЭДО.НовыеРеквизитыДокументаИзСодержанияФайла
&НаСервере
Процедура ЗаполнитьДокументРеквизитамиИзСодержанияФайла(РеквизитыДокумента)
	
	Объект.НомерДокумента = РеквизитыДокумента.НомерДокумента;
	Объект.ДатаДокумента = РеквизитыДокумента.ДатаДокумента;
	Объект.СуммаДокумента = РеквизитыДокумента.СуммаДокумента;
	СуммаНДСДокументаИзДобавляемогоФайла = РеквизитыДокумента.СуммаНДСДокумента;
	СтавкаНДСДокументаИзДобавляемогоФайла = РеквизитыДокумента.СтавкаНДСДокумента;
	ВалютаДокументаИзДобавляемогоФайла = РеквизитыДокумента.ВалютаДокумента;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеДокументаПриИзмененииКлючевыхРеквизитов()
	
	КлючНастройкиОтправки = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки();
	КлючНастройкиОтправки.ВидДокумента = Объект.ВидДокумента;
	КлючНастройкиОтправки.Отправитель = Объект.Организация;
	КлючНастройкиОтправки.Получатель = Объект.Контрагент;
	КлючНастройкиОтправки.Договор = Объект.ДоговорКонтрагента;
	
	НастройкиОтправки = НастройкиЭДО.НастройкиОтправки(КлючНастройкиОтправки);
	
	Объект.ТребуетсяПодтверждение = 
		?(ЗначениеЗаполнено(НастройкиОтправки), НастройкиОтправки.ТребуетсяОтветнаяПодпись, Ложь);
	
	Объект.ТребуетсяИзвещение = 
		?(ЗначениеЗаполнено(НастройкиОтправки), НастройкиОтправки.ТребуетсяИзвещениеОПолучении, Ложь);
		
	Объект.ИдентификаторОрганизации = 
		?(ЗначениеЗаполнено(НастройкиОтправки), НастройкиОтправки.ИдентификаторОтправителя, "");
	
	Объект.ИдентификаторКонтрагента = 
		?(ЗначениеЗаполнено(НастройкиОтправки), НастройкиОтправки.ИдентификаторПолучателя, "");
	
	Объект.СпособОбмена = ?(ЗначениеЗаполнено(НастройкиОтправки), НастройкиОтправки.СпособОбмена, Неопределено);
	
	Объект.ОбменБезПодписи = ?(ЗначениеЗаполнено(НастройкиОтправки), НастройкиОтправки.ОбменБезПодписи, Ложь);
	
	Объект.МаршрутПодписания =
		?(ЗначениеЗаполнено(НастройкиОтправки), НастройкиОтправки.МаршрутПодписания, Неопределено);
	
	Объект.ФорматОсновногоТитула = ?(ЗначениеЗаполнено(НастройкиОтправки) 
		И Объект.ТипРегламента <> Перечисления.ТипыРегламентовЭДО.Неформализованный, НастройкиОтправки.Формат, "");
	
	Объект.ВидПодписи = Перечисления.ВидыЭлектронныхПодписей.УсиленнаяКвалифицированная;
	
	МаршрутРедактируетсяПриСоздании = ?(ЗначениеЗаполнено(НастройкиОтправки), 
		НастройкиОтправки.МаршрутПодписания = МаршрутыПодписанияБЭД.МаршрутУказыватьПриСоздании(), 
		Не ЗначениеЗаполнено(Объект.МаршрутПодписания));
		
	Если Объект.МаршрутПодписания = МаршрутыПодписанияБЭД.МаршрутУказыватьПриСоздании() Тогда
		Объект.МаршрутПодписания = Неопределено;
	КонецЕсли;
	
	МаршрутУказанВНастройках = ЗначениеЗаполнено(НастройкиОтправки) И ЗначениеЗаполнено(Объект.МаршрутПодписания);
	
	ОбновитьДанныеПослеИзмененияМаршрутаПодписанияНаСервере();
	
	Объект.ЭтоОблачныйЭДО = УчетныеЗаписиЭДО.ЭтоУчетнаяЗаписьОблачногоЭДО(Объект.ИдентификаторОрганизации);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеДокументаПоПодготовленнымДаннымИзФайлаXML(ДанныеИзФайла)

	СодержаниеФайла = ДанныеИзФайла.СодержаниеФайла;
	
	Объект.ТипРегламента = СодержаниеФайла.ТипРегламента;
	Объект.НомерДокумента = СодержаниеФайла.НомерДокумента;
	Объект.ДатаДокумента = СодержаниеФайла.ДатаДокумента;
	Объект.СуммаДокумента = СодержаниеФайла.СуммаДокумента;
	
	СуммаНДСДокументаИзДобавляемогоФайла = СодержаниеФайла.СуммаНДСДокумента;
	СтавкаНДСДокументаИзДобавляемогоФайла = СодержаниеФайла.СтавкаНДСДокумента;
	ВалютаДокументаИзДобавляемогоФайла = СодержаниеФайла.ВалютаДокумента;

	НастройкиОтправки = ДанныеИзФайла.НастройкиОтправки;
	Если Не ЗначениеЗаполнено(НастройкиОтправки) Тогда
		Возврат;
	КонецЕсли;

	Объект.Организация = НастройкиОтправки.Отправитель;
	Объект.Контрагент = НастройкиОтправки.Получатель;
	Объект.ДоговорКонтрагента = НастройкиОтправки.Договор;
	Объект.ВидДокумента = НастройкиОтправки.ВидДокумента;
	
	Объект.ТребуетсяПодтверждение = НастройкиОтправки.ТребуетсяОтветнаяПодпись;
	Объект.ТребуетсяИзвещение = НастройкиОтправки.ТребуетсяИзвещениеОПолучении;
	Объект.ИдентификаторОрганизации = НастройкиОтправки.ИдентификаторОтправителя;
	Объект.ИдентификаторКонтрагента = НастройкиОтправки.ИдентификаторПолучателя;
	Объект.СпособОбмена = НастройкиОтправки.СпособОбмена;
	Объект.ОбменБезПодписи = НастройкиОтправки.ОбменБезПодписи;
	Объект.МаршрутПодписания = НастройкиОтправки.МаршрутПодписания;
	Объект.ФорматОсновногоТитула = НастройкиОтправки.Формат;
	Объект.ВидПодписи = Перечисления.ВидыЭлектронныхПодписей.УсиленнаяКвалифицированная;
	
	МаршрутРедактируетсяПриСоздании = 
		НастройкиОтправки.МаршрутПодписания = МаршрутыПодписанияБЭД.МаршрутУказыватьПриСоздании();
	Если Объект.МаршрутПодписания = МаршрутыПодписанияБЭД.МаршрутУказыватьПриСоздании() Тогда
		Объект.МаршрутПодписания = Неопределено;
	КонецЕсли;

	ЗаполнитьДанныеДокументаПриИзмененииКлючевыхРеквизитов();

КонецПроцедуры

#КонецОбласти

#КонецОбласти // ЗаполнениеДанных

#Область Запись

&НаКлиенте
Процедура ЗаписатьДокумент()
	ОбработчикЗавершения = Новый ОписаниеОповещения("ПослеВыполненияЗаписиДокумента", ЭтотОбъект);
	НачатьЗаписьДокумента(ОбработчикЗавершения);
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗаписьДокумента(ОповещениеОЗавершении)

	ОчиститьСообщения();
	
	РезультатЗаписи = ЗаписатьДокументНаСервере();
	
	Если РезультатЗаписи.ТребуетсяФормализованныйФормат
		И Не РезультатЗаписи.РезультатПроверкиНастроек.Отказ Тогда
		Обработчик = Новый ОписаниеОповещения("ПоказатьОкноПредложенияОтправкиВФормализованномВидеПослеОтветаНаВопрос",
			ЭтотОбъект, ОповещениеОЗавершении);
			
		ИнтерфейсДокументовЭДОКлиент.ПоказатьОкноПредложенияОтправкиВФормализованномВиде(
			Объект.ВидДокумента, Обработчик);
		Возврат;
	КонецЕсли;
	
	Если Не РезультатЗаписи.Отказ Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Истина);
		Возврат;
	КонецЕсли;
	
	Если РезультатЗаписи.Отказ И ЗначениеЗаполнено(РезультатЗаписи.ОграниченияОбъемаПакетаДокументов) Тогда
		ТекстСообщения = ПакетыДокументовЭДОКлиент.ТекстОПревышенииМаксимальногоРазмераПакетаСохранениеДокумента(
			РезультатЗаписи.ОграниченияОбъемаПакетаДокументов);
			
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если РезультатЗаписи.РезультатПроверкиНастроек.Отказ Тогда
		Оповещение = Новый ОписаниеОповещения("ВыполнитьПервичнуюНастройкуПередЗаписью",
			ЭтотОбъект, ОповещениеОЗавершении);
			
		Если РезультатЗаписи.РезультатПроверкиНастроек.ЭтоВнутреннийЭДО Тогда
			
			НастройкиЭДОКлиент.НастроитьВнутреннийЭлектронныйДокументооборот(
				Объект.Организация, Объект.ВидДокумента, Оповещение);
		
		ИначеЕсли РезультатЗаписи.РезультатПроверкиНастроек.ФормированиеЗапрещено = Истина Тогда 
			ДанныеДокумента = Новый Структура("Организация, Контрагент, ДоговорКонтрагента",
				Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);

			ИнтерфейсДокументовЭДОКлиент.ПоказатьПроблемуЗапрещеноФормированиеДокумента(ДанныеДокумента, Оповещение);
		Иначе
			
			НастройкиЭДОКлиент.НастроитьОбменСКонтрагентом(
				РезультатЗаписи.РезультатПроверкиНастроек.КлючНастроекОтправки, Оповещение);
			
		КонецЕсли;
		
		Возврат;
	КонецЕсли;

	ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(РезультатЗаписи.КонтекстДиагностики);

	ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Ложь);
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьДокументНаСервере()
	
	РезультатЗаписи = Новый Структура;
	РезультатЗаписи.Вставить("Отказ", Ложь);
	РезультатЗаписи.Вставить("РезультатПроверкиЗаполнения", НовыйРезультатПроверкиЗаполнения());
	РезультатЗаписи.Вставить("РезультатПроверкиНастроек", 
		ИнтерфейсДокументовЭДО.НовыйРезультатПроверкиНастроекОтправки());
	РезультатЗаписи.Вставить("КонтекстДиагностики", ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики());
	РезультатЗаписи.Вставить("ТребуетсяФормализованныйФормат", Ложь);
	РезультатЗаписи.Вставить("ОграниченияОбъемаПакетаДокументов", Неопределено);
	
	РезультатПроверкиЗаполнения = ПроверитьЗаполнениеДокумента();
	Если РезультатПроверкиЗаполнения.Отказ Тогда
		РезультатЗаписи.Отказ = Истина;
		РезультатЗаписи.РезультатПроверкиЗаполнения = РезультатПроверкиЗаполнения;
		Возврат РезультатЗаписи;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(АдресФайловНовогоДокумента) Тогда
		ДанныеФайлов = ПолучитьИзВременногоХранилища(АдресФайловНовогоДокумента);
		РезультатПроверкиПревышенияРазмераПакета = ЭлектронныеДокументыЭДО.ПроверкаПревышенияМаксимальногоРазмераФайла(
			Объект.ИдентификаторКонтрагента, Объект.ИдентификаторОрганизации, ДанныеФайлов[0].ДвоичныеДанные);
		
		Если РезультатПроверкиПревышенияРазмераПакета.Превышено Тогда
			РезультатЗаписи.Отказ = Истина;
			РезультатЗаписи.ОграниченияОбъемаПакетаДокументов = 
				РезультатПроверкиПревышенияРазмераПакета.ПревышаемыеОграничения;
			Возврат РезультатЗаписи;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Или Модифицированность Тогда
		РезультатПроверкиНастроек = ПроверитьНастройки();

		Если РезультатПроверкиНастроек.Отказ Тогда
			РезультатЗаписи.Отказ = Истина;
			РезультатЗаписи.РезультатПроверкиНастроек = РезультатПроверкиНастроек;
			Возврат РезультатЗаписи;
		КонецЕсли;
	КонецЕсли;
	
	РезультатПроверкиЗаполнения = ПроверитьЗаполнениеДокументаПослеПроверкиНастроек();
	Если РезультатПроверкиЗаполнения.Отказ Тогда
		РезультатЗаписи.Отказ = Истина;
		РезультатЗаписи.РезультатПроверкиЗаполнения = РезультатПроверкиЗаполнения;
		Возврат РезультатЗаписи;
	КонецЕсли;
	
	Если Не ОкноОтправкиВФормализованномВидеПоказано
		И ТребуетсяФормализованныйФормат(Объект.ТипРегламента, Объект.ВидДокумента) Тогда 
		РезультатЗаписи.ТребуетсяФормализованныйФормат = Истина;
		Возврат РезультатЗаписи;
	КонецЕсли;
	
	Если Не Записать() Тогда
		РезультатЗаписи.Отказ = Истина;
		Возврат РезультатЗаписи;
	КонецЕсли;
	
	Возврат РезультатЗаписи;
	
КонецФункции

&НаСервере
Процедура ИнициализироватьПараметрыЗаписи(ПараметрыЗаписи)
		
	НовыеПараметрыЗаписи = НовыеПараметрыЗаписиДокумента();
	НовыеПараметрыЗаписи.ЭтоНовыйДокумент = Не ЗначениеЗаполнено(Объект.Ссылка);
	НовыеПараметрыЗаписи.КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	НовыеПараметрыЗаписи.ИзменениеВидаДокумента = ИзмененВидДокумента И ЗначениеЗаполнено(Объект.Ссылка);
	НовыеПараметрыЗаписи.ИзменениеСопроводительнойЗаписки = ИзмененаСопроводительнаяЗаписка
		И ЗначениеЗаполнено(Объект.Ссылка);
		
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыЗаписи, НовыеПараметрыЗаписи);
		
КонецПроцедуры

// Возвращаемое значение:
//  Структура:
// * ЭтоНовыйДокумент - Булево
// * КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// * ОписанияСообщений - Неопределено,Массив Из См. ЭлектронныеДокументыЭДО.НовоеОписаниеСообщения
// * ИзменениеВидаДокумента - Булево
// * ИзменениеСопроводительнойЗаписки - Булево
&НаСервереБезКонтекста
Функция НовыеПараметрыЗаписиДокумента()
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ЭтоНовыйДокумент", Ложь);
	ПараметрыЗаписи.Вставить("КонтекстДиагностики", ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики());
	ПараметрыЗаписи.Вставить("ОписанияСообщений", Неопределено);
	ПараметрыЗаписи.Вставить("ИзменениеВидаДокумента", Ложь);
	ПараметрыЗаписи.Вставить("ИзменениеСопроводительнойЗаписки", Ложь);
	Возврат ПараметрыЗаписи;
	
КонецФункции

&НаСервере
Функция ПроверитьЗаполнениеДокумента()
	
	Результат = НовыйРезультатПроверкиЗаполнения();
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = ИнтерфейсДокументовЭДОКлиентСервер.ТекстСообщенияОНезаполненностиРеквизитовДокумента(
			НСтр("ru='Организация'"));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "Организация", "Объект", Результат.Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ВидДокумента) Тогда
		ТекстСообщения = ИнтерфейсДокументовЭДОКлиентСервер.ТекстСообщенияОНезаполненностиРеквизитовДокумента(
			НСтр("ru='Вид'"));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "ВидДокумента", "Объект", Результат.Отказ);
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Объект.Контрагент) 
		И Не ЭлектронныеДокументыЭДО.ЭтоВнутреннийВидДокумента(Объект.ВидДокумента) Тогда
		ТекстСообщения = ИнтерфейсДокументовЭДОКлиентСервер.ТекстСообщенияОНезаполненностиРеквизитовДокумента(
			НСтр("ru='Контрагент'"));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "Контрагент", "Объект", Результат.Отказ);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПроверитьЗаполнениеДокументаПослеПроверкиНастроек()
	
	Результат = НовыйРезультатПроверкиЗаполнения();
	
	Если Не ЗначениеЗаполнено(Объект.МаршрутПодписания) И Не ЗначениеЗаполнено(Объект.СписокПодписантов) Тогда
		ТекстСообщения = ИнтерфейсДокументовЭДОКлиентСервер.ТекстСообщенияОНезаполненностиРеквизитовДокумента(
			НСтр("ru='Маршрут подписания'"));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "ПредставлениеМаршрута",, Результат.Отказ);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция НовыйРезультатПроверкиЗаполнения()
	
	Результат = Новый Структура;
	Результат.Вставить("Отказ", Ложь);
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПроверитьНастройки()

	РеквизитыДокументаДляПроверкиНастроек = Новый Структура;
	РеквизитыДокументаДляПроверкиНастроек.Вставить("Организация", Объект.Организация);
	РеквизитыДокументаДляПроверкиНастроек.Вставить("Контрагент", Объект.Контрагент);
	РеквизитыДокументаДляПроверкиНастроек.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	РеквизитыДокументаДляПроверкиНастроек.Вставить("ВидДокумента", Объект.ВидДокумента);
	Возврат ИнтерфейсДокументовЭДО.ПроверитьНастройкиОтправкиПоРеквизитамДокумента(
		РеквизитыДокументаДляПроверкиНастроек);

КонецФункции

&НаСервере
Функция ОписанияСообщенийДокумента()
	
	ОписанияСообщений = Новый Массив;
	
	Если ЭтоАдресВременногоХранилища(АдресОписанийСообщений) Тогда
		
		ОписанияСообщений = ПолучитьИзВременногоХранилища(АдресОписанийСообщений);
		
		Для Каждого ОписаниеСообщения Из ОписанияСообщений Цикл
			Если ОписаниеСообщения.ТипЭлементаРегламента =
				Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя Тогда
				ОписаниеСообщения.ДополнительнаяИнформация = СопроводительнаяЗапискаТекст;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
	
		ОписаниеСообщения = ЭлектронныеДокументыЭДО.НовоеОписаниеСообщения();
		
		ОписаниеСообщения.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя;
		
		Если ТипДокумента = Перечисления.ТипыДокументовЭДО.Внутренний Тогда
			ОписаниеСообщения.Направление = Перечисления.НаправленияЭДО.Внутренний;
		ИначеЕсли ЭлектронныеДокументыЭДО.ЭтоТипДокументаИнтеркампани(ТипДокумента) Тогда
			ОписаниеСообщения.Направление = Перечисления.НаправленияЭДО.Интеркампани;
		Иначе
			ОписаниеСообщения.Направление = Перечисления.НаправленияЭДО.Исходящий;
		КонецЕсли;
		
		ОписаниеСообщения.ДополнительнаяИнформация = СопроводительнаяЗапискаТекст;
		
		ОписаниеСообщения.ВидСообщения = Объект.ВидДокумента;
		
		Если ЭтоАдресВременногоХранилища(АдресФайловНовогоДокумента) Тогда
			ДанныеФайлов = ПолучитьИзВременногоХранилища(АдресФайловНовогоДокумента);
			ОписаниеСообщения.Данные.Документ.ДвоичныеДанные = ДанныеФайлов[0].ДвоичныеДанные;
		КонецЕсли;
		
		ОписаниеСообщения.Данные.Документ.ИмяФайла = ИмяПроизвольногоФайла;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
			МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
			Если МодульОбменСГИСЭПД.ЭтоДокументЭПД(ТипДокумента) Тогда
				ОписаниеСообщения.ТипЭлементаРегламента = МодульОбменСГИСЭПД.ПервыйТитулДокумента(ТипДокумента);
			КонецЕсли;
		КонецЕсли;
		
		ОписанияСообщений.Добавить(ОписаниеСообщения);
		
	КонецЕсли;
	
	Для Каждого ОписаниеСообщения Из ОписанияСообщений Цикл
		
		Если ЗначениеЗаполнено(Объект.Ссылка) И Не ЗначениеЗаполнено(ОписаниеСообщения.Ссылка) Тогда
			ОписаниеСообщения.Ссылка = СообщениеЭДОИнформацииОтправителя(Объект.Ссылка);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеСообщения.Данные.Содержание) Тогда
			Продолжить;
		КонецЕсли;
		
		СодержаниеСообщения = ЭлектронныеДокументыЭДО.НовоеСодержаниеСообщения();
		
		СодержаниеСообщения.ТипРегламента = Перечисления.ТипыРегламентовЭДО.Неформализованный;
		СодержаниеСообщения.НомерДокумента = Объект.НомерДокумента;
		СодержаниеСообщения.ДатаДокумента = Объект.ДатаДокумента;
		СодержаниеСообщения.СуммаДокумента = Объект.СуммаДокумента;
		СодержаниеСообщения.ЕстьМаркировка = Ложь;
		
		ОписаниеСообщения.Данные.Содержание = СодержаниеСообщения;
		
	КонецЦикла;
	
	Возврат ОписанияСообщений;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьПервичнуюНастройкуПередЗаписью(Результат, ОповещениеОЗавершении) Экспорт
	
	Если Результат = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Ложь);
	Иначе
		ЗаполнитьДанныеДокументаПриИзмененииКлючевыхРеквизитов();
		НачатьЗаписьДокумента(ОповещениеОЗавершении);
		ОжидатьПолученияАсинхронныхДанных();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыполненияЗаписиДокумента(Результат, КонтекстДиагностики) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ОжидатьПолученияАсинхронныхДанных();
	
	ОповеститьОбИзмененииСостоянияДокумента();

КонецПроцедуры

&НаКлиенте
Функция ТребуетсяЗаписатьДокумент()
	Возврат Не ЗначениеЗаполнено(Объект.Ссылка) Или Модифицированность;
КонецФункции

&НаСервере
Процедура УстановитьНовыйНомерДокумента(ТекущийОбъект)
	
	Если Не ТекущийОбъект.ЭтоНовый() Или ЗначениеЗаполнено(Объект.НомерДокумента)
		Или ЕстьВозможностьОтраженияВУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекущийОбъект.Номер) Тогда
		ТекущийОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	
	Объект.НомерДокумента = СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(ТекущийОбъект.Номер, "0");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СообщениеЭДОИнформацииОтправителя(Знач ЭлектронныйДокумент)
	Возврат ЭлектронныеДокументыЭДО.СообщениеОтправителя(ЭлектронныйДокумент);
КонецФункции

#Область ПроверкаВозможностиОтправкиВФормализованномВиде

&НаКлиенте
Процедура ПоказатьОкноПредложенияОтправкиВФормализованномВидеПослеОтветаНаВопрос(РезультатОтветаНаВопрос,
	ОповещениеОЗавершении) Экспорт
	
	Если РезультатОтветаНаВопрос = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатОтветаНаВопрос.БольшеНеЗадаватьЭтотВопрос Тогда
		ИнтерфейсДокументовЭДОКлиент.ЗаписатьНастройкуНеПоказыватьОкноПредложенияОтправкиВФормализованномВиде();
	КонецЕсли;
	
	Если РезультатОтветаНаВопрос.Значение = КодВозвратаДиалога.Да 
		Или РезультатОтветаНаВопрос.Значение = КодВозвратаДиалога.Нет Тогда
		ОкноОтправкиВФормализованномВидеПоказано = Истина;
	КонецЕсли;
	
	Если РезультатОтветаНаВопрос.Значение = КодВозвратаДиалога.Да Тогда
		Если ТребуетсяЗаписатьДокумент() Тогда
			ЗаписатьДокумент();
		КонецЕсли;
		Если ЗначениеЗаполнено(ОбъектыУчетаДокумента) И Не ЗначениеЗаполнено(ИдентификаторПакета) Тогда
			ПереформироватьДокумент();
		Иначе
			Оповещение = Новый ОписаниеОповещения("ОткрытьПодборОбъектовУчетаПослеОтветаНаВопрос", ЭтотОбъект);
			ТекстВопроса = НСтр("ru='Для отправки документа в формализованном виде необходимо указать объект учета. 
				|Выполнить подбор?'");
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
	КонецЕсли;
	
	Если РезультатОтветаНаВопрос.Значение = КодВозвратаДиалога.Нет Тогда
		НачатьЗаписьДокумента(ОповещениеОЗавершении);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТребуетсяФормализованныйФормат(Знач ТипРегламента, Знач ВидДокумента)
	
	Результат = Ложь;
	
	ТребуетсяПоказатьОкно = ИнтерфейсДокументовЭДО.ТребуетсяПоказыватьОкноПредложенияОтправкиВФормализованномВиде();
	Если Не ТребуетсяПоказатьОкно Тогда
		Возврат Результат;
	КонецЕсли;

	Если ТипРегламента = Перечисления.ТипыРегламентовЭДО.Неформализованный
		И ЭлектронныеДокументыЭДО.ДляВидаДокументаЕстьФормализованныйФорматФНС(ВидДокумента) Тогда
			
		ВидФормализованногоДокумента = ЭлектронныеДокументыЭДО.ВидДокументаФормализованногоФорматаФНС(ВидДокумента);
		Если ЗначениеЗаполнено(ИнтеграцияЭДО.СписокОперацийВидаДокумента(ВидФормализованногоДокумента)) Тогда
			Результат = Истина;
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьПодборОбъектовУчетаПослеОтветаНаВопрос(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Оповещение = Новый ОписаниеОповещения("ПереформироватьДокументПослеПодбораОбъектовУчета", ЭтотОбъект);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЭлектронныйДокумент", Объект.Ссылка);
		ПараметрыФормы.Вставить("ВидДокумента", Объект.ВидДокумента);
		ПараметрыФормы.Вставить("ДокументРаспознан", ЕстьВозможностьОтраженияВУчете);
		
		ИнтерфейсДокументовЭДОКлиент.ОткрытьПодборОбъектовУчетаЭлектронногоДокумента(ПараметрыФормы, Оповещение);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ПроверкаВозможностиОтправкиВФормализованномВиде

#Область ОбработчикиСобытийЗаписиПоИнтеграциям

&НаСервере
Процедура ПередЗаписьюНаСервереПоИнтеграциям(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ИнициализироватьПараметрыЗаписи(ПараметрыЗаписи);
	
	Если ТекущийОбъект.ЭтоОблачныйЭДО Тогда
		ПередЗаписьюНаСервереИнтеграцияОблачногоЭДО(Отказ, ТекущийОбъект, ПараметрыЗаписи);
	Иначе
		ПередЗаписьюНаСервереИнтеграцияВстроенногоЭДО(Отказ, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервереИнтеграцияОблачногоЭДО(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.ЭтоНовыйДокумент Тогда
		УстановитьНовыйНомерДокумента(ТекущийОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервереИнтеграцияВстроенногоЭДО(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.ЭтоНовыйДокумент Тогда
		УстановитьНовыйНомерДокумента(ТекущийОбъект);
		
		ПараметрыЗаписи.ОписанияСообщений = ОписанияСообщенийДокумента();
			
		ЭлектронныеДокументыЭДО.ПередЗаписьюНовогоДокумента(ТекущийОбъект, ПараметрыЗаписи.ОписанияСообщений);
	КонецЕсли;
	
	Если ПараметрыЗаписи.ИзменениеСопроводительнойЗаписки
		И Не ЗначениеЗаполнено(ПараметрыЗаписи.ОписанияСообщений) Тогда
		ПараметрыЗаписи.ОписанияСообщений = ОписанияСообщенийДокумента();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервереПоИнтеграциям(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если ТекущийОбъект.ЭтоОблачныйЭДО Тогда
		ПриЗаписиНаСервереИнтеграцияОблачногоЭДО(Отказ, ТекущийОбъект, ПараметрыЗаписи);
	Иначе
		ПриЗаписиНаСервереИнтеграцияВстроенногоЭДО(Отказ, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервереИнтеграцияОблачногоЭДО(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	Если Не ПараметрыЗаписи.ЭтоНовыйДокумент Тогда
		Возврат;
	КонецЕсли;
	
	СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОжидаетсяОбработкаОблачнымЭДО;
	
	РегистрыСведений.СостоянияДокументовЭДО.УстановитьСостояние(ТекущийОбъект.Ссылка, СостояниеЭДО);
	
	Если ЗначениеЗаполнено(ОбъектыУчетаДокумента) Тогда
		ОбъектыУчета = ОбъектыУчетаДокумента.Выгрузить().ВыгрузитьКолонку("ОбъектУчета");
		ИнтеграцияЭДО.УстановитьАктуальныйЭлектронныйДокумент(ОбъектыУчета, ТекущийОбъект.Ссылка);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервереИнтеграцияВстроенногоЭДО(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	Если ПараметрыЗаписи.ЭтоНовыйДокумент Тогда
		ЭлектронныеДокументыЭДО.ПриЗаписиНовогоДокумента(ТекущийОбъект, ПараметрыЗаписи.ОписанияСообщений, 
			ПараметрыЗаписи.КонтекстДиагностики, ОбъектыУчетаДокумента.Выгрузить().ВыгрузитьКолонку("ОбъектУчета"));
	КонецЕсли;
	
	Если ПараметрыЗаписи.ИзменениеВидаДокумента Тогда
		ЭлектронныеДокументыЭДО.ПриИзмененииВидаДокумента(ТекущийОбъект.Ссылка, ТекущийОбъект.ВидДокумента, Отказ);
	КонецЕсли;
	
	Если ПараметрыЗаписи.ИзменениеСопроводительнойЗаписки Тогда
		ЭлектронныеДокументыЭДО.ПриИзмененииСопроводительнойЗаписки(ПараметрыЗаписи.ОписанияСообщений, Отказ);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервереПоИнтеграциям(ТекущийОбъект, ПараметрыЗаписи)
	
	ИзмененВидДокумента = Ложь;
	ИзмененаСопроводительнаяЗаписка = Ложь;
	
	Если ТекущийОбъект.ЭтоОблачныйЭДО Тогда
		ПослеЗаписиНаСервереИнтеграцияОблачногоЭДО(ТекущийОбъект, ПараметрыЗаписи);
	Иначе
		ПослеЗаписиНаСервереИнтеграцияВстроенногоЭДО(ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервереИнтеграцияОблачногоЭДО(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьДанныеДляПросмотраДокумента();

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервереИнтеграцияВстроенногоЭДО(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.ЭтоНовыйДокумент Тогда
		ЭлектронныеДокументыЭДО.ПослеЗаписиНовогоДокумента(ТекущийОбъект, ПараметрыЗаписи.КонтекстДиагностики);
	КонецЕсли;
	
	ОбновитьДанныеДляПросмотраДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиПоИнтеграциям(ПараметрыЗаписи)
	Если Объект.ЭтоОблачныйЭДО Тогда
		ПослеЗаписиИнтеграцияОблачногоЭДО(ПараметрыЗаписи);
	Иначе
		ПослеЗаписиИнтеграцияВстроенногоЭДО(ПараметрыЗаписи);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиИнтеграцияОблачногоЭДО(ПараметрыЗаписи)

	Если ПараметрыЗаписи.ЭтоНовыйДокумент Тогда
		ОбщегоНазначенияКлиент.ОповеститьОбИзмененииОбъекта(Объект.Ссылка);
	КонецЕсли;
	
	ПараметрыВыполнения = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	
	ЗаполнитьПараметрыФормированияДокументаЭДО(ПараметрыВыполнения, ПараметрыЗаписи.ЭтоНовыйДокумент);
	
	ВыполнитьДействияПоЭДО(ПараметрыВыполнения, ЭтоПакетДокументов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиИнтеграцияВстроенногоЭДО(ПараметрыЗаписи)
	Если ПараметрыЗаписи.ЭтоНовыйДокумент Тогда
		ОбщегоНазначенияКлиент.ОповеститьОбИзмененииОбъекта(Объект.Ссылка);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЗаписиПоИнтеграциям

#Область ИнтеграцияОблачногоЭДО

&НаКлиенте
Процедура ЗаполнитьПараметрыФормированияДокументаЭДО(ПараметрыВыполненияДействийПоЭДО, ЭтоНовыйДокумент)
	
	ОписаниеДокументаПоФайлам = ОписаниеДокументаДляФормированияПоФайлам();
	
	ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ОписанияДокументовПоФайлам.Добавить(ОписаниеДокументаПоФайлам);
	
	Если ЭтоНовыйДокумент Тогда
		ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(ПараметрыВыполненияДействийПоЭДО.НаборДействий,
			ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Сформировать"));
	Иначе
		ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(ПараметрыВыполненияДействийПоЭДО.НаборДействий,
			ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Переформировать"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОписаниеДокументаДляФормированияПоФайлам()
	
	ОписаниеДокумента = ИнтерфейсДокументовЭДОКлиентСервер.НовоеОписаниеДокументаДляФормированияПоФайлам();
	
	ОписаниеДокумента.Идентификатор = Объект.ИдентификаторДокумента;
	ОписаниеДокумента.Организация = Объект.Организация;
	ОписаниеДокумента.Контрагент = Объект.Контрагент;
	ОписаниеДокумента.Договор = Объект.ДоговорКонтрагента;
	ОписаниеДокумента.ВидДокумента = Объект.ВидДокумента;
	ОписаниеДокумента.Номер = Объект.НомерДокумента;
	ОписаниеДокумента.Дата = Объект.ДатаДокумента;
	ОписаниеДокумента.Сумма = Объект.СуммаДокумента;
	
	ОписаниеДокумента.СопроводительнаяЗаписка = СопроводительнаяЗапискаТекст;
	
	Если Не ЭтоАдресВременногоХранилища(АдресФайловНовогоДокумента) Тогда
		Возврат ОписаниеДокумента;
	КонецЕсли;
	
	ОписанияФайлов = ПолучитьИзВременногоХранилища(АдресФайловНовогоДокумента);
	
	Для Каждого ОписаниеФайла Из ОписанияФайлов Цикл
		НовыеФайлыТитула = ИнтерфейсДокументовЭДОКлиентСервер.НовыеФайлыТитулаДокументаДляФормирования();
		НовыеФайлыТитула.Основной = ОписаниеФайла;
		ОписаниеДокумента.ФайлыТитулов.Добавить(НовыеФайлыТитула);
	КонецЦикла;
	
	ОписаниеФайла = РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла();
	ОписаниеФайла.ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайловНовогоДокумента);
	ОписаниеФайла.ИмяФайла = ИмяПроизвольногоФайла;
	
	НовыеФайлыТитула = ИнтерфейсДокументовЭДОКлиентСервер.НовыеФайлыТитулаДокументаДляФормирования();
	НовыеФайлыТитула.Основной = ОписаниеФайла;
	ОписаниеДокумента.ФайлыТитулов.Добавить(НовыеФайлыТитула);
	
	Возврат ОписаниеДокумента;
	
КонецФункции

#КонецОбласти // ИнтеграцияОблачногоЭДО

#КонецОбласти // Запись

#Область ВыполнениеДействийПоЭДО

&НаКлиенте
Процедура УтвердитьПослеЗаписи(Результат, ЭтоПакетнаяОбработка = Ложь) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ОжидатьПолученияАсинхронныхДанных();
	
	ВыполнитьДействиеДляПакета = Ложь;
	Если ЭтоПакетнаяОбработка Тогда
		ВыполнитьДействиеДляПакета = ЭтоПакетДокументов;
	КонецЕсли;
	ЛегкийИнтерфейсДокументовЭДОКлиент.ВыполнитьДействиеУтвердитьИзКарточкиДокумента(ЭтотОбъект,
		ВыполнитьДействиеДляПакета);

КонецПроцедуры

&НаКлиенте
Процедура ПодписатьОтправитьПослеЗаписи(Результат, ЭтоПакетнаяОбработка = Ложь) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ОжидатьПолученияАсинхронныхДанных();
	
	ВыполнитьДействиеДляПакета = Ложь;
	Если ЭтоПакетнаяОбработка Тогда
		ВыполнитьДействиеДляПакета = ЭтоПакетДокументов;
	КонецЕсли;
	ЛегкийИнтерфейсДокументовЭДОКлиент.ВыполнитьДействияПодписатьОтправитьИзКарточкиДокумента(ЭтотОбъект, 
		ВыполнитьДействиеДляПакета);

КонецПроцедуры

&НаКлиенте
Процедура ПодписатьПослеЗаписи(Результат, ЭтоПакетнаяОбработка = Ложь) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ОжидатьПолученияАсинхронныхДанных();
	
	ВыполнитьДействиеДляПакета = Ложь;
	Если ЭтоПакетнаяОбработка Тогда
		ВыполнитьДействиеДляПакета = ЭтоПакетДокументов;
	КонецЕсли;
	ЛегкийИнтерфейсДокументовЭДОКлиент.ВыполнитьДействиеПодписатьИзКарточкиДокумента(ЭтотОбъект,
		ВыполнитьДействиеДляПакета);

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПослеЗаписи(Результат, ЭтоПакетнаяОбработка = Ложь) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ОжидатьПолученияАсинхронныхДанных();
	
	ВыполнитьДействиеДляПакета = Ложь;
	Если ЭтоПакетнаяОбработка Тогда
		ВыполнитьДействиеДляПакета = ЭтоПакетДокументов;
	КонецЕсли;
	ЛегкийИнтерфейсДокументовЭДОКлиент.ВыполнитьДействиеОтправитьИзКарточкиДокумента(ЭтотОбъект,
		ВыполнитьДействиеДляПакета);

КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьПослеЗаписи(Результат, ЭтоПакетнаяОбработка = Ложь) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ОжидатьПолученияАсинхронныхДанных();
	
	ВыполнитьДействиеДляПакета = Ложь;
	Если ЭтоПакетнаяОбработка Тогда
		ВыполнитьДействиеДляПакета = ЭтоПакетДокументов;
	КонецЕсли;
	ЛегкийИнтерфейсДокументовЭДОКлиент.ВыполнитьДействиеОтклонитьИзКарточкиДокумента(ЭтотОбъект,
		ВыполнитьДействиеДляПакета);

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПовторноПослеЗаписи(Результат, ЭтоПакетнаяОбработка = Ложь) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ОжидатьПолученияАсинхронныхДанных();
	
	ВыполнитьДействиеДляПакета = Ложь;
	Если ЭтоПакетнаяОбработка Тогда
		ВыполнитьДействиеДляПакета = ЭтоПакетДокументов;
	КонецЕсли;
	ЛегкийИнтерфейсДокументовЭДОКлиент.ВыполнитьДействиеОтправитьПовторноИзКарточкиДокумента(ЭтотОбъект,
		ВыполнитьДействиеДляПакета);

КонецПроцедуры

&НаКлиенте
Процедура ПринятьАннулированиеПослеЗаписи(Результат, ЭтоПакетнаяОбработка = Ложь) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ОжидатьПолученияАсинхронныхДанных();
	
	ВыполнитьДействиеДляПакета = Ложь;
	Если ЭтоПакетнаяОбработка Тогда
		ВыполнитьДействиеДляПакета = ЭтоПакетДокументов;
	КонецЕсли;
	ЛегкийИнтерфейсДокументовЭДОКлиент.ВыполнитьДействиеПринятьАннулированиеИзКарточкиДокумента(ЭтотОбъект, 
		ВыполнитьДействиеДляПакета);

КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьАннулированиеПослеЗаписи(Результат, ЭтоПакетнаяОбработка = Ложь) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ОжидатьПолученияАсинхронныхДанных();
	
	ВыполнитьДействиеДляПакета = Ложь;
	Если ЭтоПакетнаяОбработка Тогда
		ВыполнитьДействиеДляПакета = ЭтоПакетДокументов;
	КонецЕсли;
	ЛегкийИнтерфейсДокументовЭДОКлиент.ВыполнитьДействиеОтклонитьАннулированиеИзКарточкиДокумента(ЭтотОбъект, 
		ВыполнитьДействиеДляПакета);

КонецПроцедуры

&НаКлиенте
Процедура АннулироватьПослеЗаписи(Результат, ЭтоПакетнаяОбработка = Ложь) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ОжидатьПолученияАсинхронныхДанных();
	
	ВыполнитьДействиеДляПакета = Ложь;
	Если ЭтоПакетнаяОбработка Тогда
		ВыполнитьДействиеДляПакета = ЭтоПакетДокументов;
	КонецЕсли;
	ЛегкийИнтерфейсДокументовЭДОКлиент.ВыполнитьДействиеАннулироватьИзКарточкиДокумента(ЭтотОбъект,
		ВыполнитьДействиеДляПакета);

КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПослеЗаписи(Результат, ЭтоПакетнаяОбработка = Ложь) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ОжидатьПолученияАсинхронныхДанных();
	
	ВыполнитьДействиеДляПакета = Ложь;
	Если ЭтоПакетнаяОбработка Тогда
		ВыполнитьДействиеДляПакета = ЭтоПакетДокументов;
	КонецЕсли;
	ЛегкийИнтерфейсДокументовЭДОКлиент.ВыполнитьДействиеЗакрытьПринудительноИзКарточкиДокумента(ЭтотОбъект,
		ВыполнитьДействиеДляПакета);

КонецПроцедуры

&НаКлиенте
Процедура ВернутьВРаботуПослеЗаписи(Результат, ЭтоПакетнаяОбработка = Ложь) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ОжидатьПолученияАсинхронныхДанных();
	
	ВыполнитьДействиеДляПакета = Ложь;
	Если ЭтоПакетнаяОбработка Тогда
		ВыполнитьДействиеДляПакета = ЭтоПакетДокументов;
	КонецЕсли;
	ЛегкийИнтерфейсДокументовЭДОКлиент.ВыполнитьДействиеВернутьВРаботуИзКарточкиДокумента(ЭтотОбъект, 
		ВыполнитьДействиеДляПакета);

КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьПодписаниеПослеЗаписи(Результат, ЭтоПакетнаяОбработка = Ложь) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ОжидатьПолученияАсинхронныхДанных();
	
	ВыполнитьДействиеДляПакета = Ложь;
	Если ЭтоПакетнаяОбработка Тогда
		ВыполнитьДействиеДляПакета = ЭтоПакетДокументов;
	КонецЕсли;
	ЛегкийИнтерфейсДокументовЭДОКлиент.ВыполнитьДействиеОтклонитьПодписаниеИзКарточкиДокумента(ЭтотОбъект,
		ВыполнитьДействиеДляПакета);

КонецПроцедуры

&НаКлиенте
Процедура ПослеВыполненияДействийПоЭДО(Результат, ПараметрыОповещения) Экспорт
	
	ИнтерфейсДокументовЭДОКлиент.ПослеВыполненияДействийПоЭДО(Результат, ПараметрыОповещения);
	
КонецПроцедуры

#КонецОбласти // ВыполнениеДействийПоЭДО

#Область Переформирование

&НаКлиенте
Процедура ПереформироватьДокумент(Настройки = Неопределено, Комментарий = "")
	ПереформироватьДокументПоИнтеграциям(Настройки, Комментарий);
КонецПроцедуры

&НаКлиенте
Процедура ПереформироватьДокументПоИнтеграциям(Настройки, Комментарий)
	Если Объект.ЭтоОблачныйЭДО Тогда
		ПереформироватьДокументИнтеграцияОблачногоЭДО(Настройки, Комментарий);
	Иначе
		ПереформироватьДокументИнтеграцияВстроенногоЭДО(Настройки, Комментарий);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПереформироватьДокументИнтеграцияОблачногоЭДО(Настройки, Комментарий)

	Если ТребуетсяЗаписатьДокумент() Тогда
		НачатьЗаписьДокумента(Новый ОписаниеОповещения);
	КонецЕсли;

	ПараметрыВыполнения = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	НаборДействий = ПараметрыВыполнения.НаборДействий;
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Переформировать"));
	
	ВыполнитьДействияПоЭДО(ПараметрыВыполнения, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереформироватьДокументИнтеграцияВстроенногоЭДО(Настройки, Комментарий)

	Если Не ЗначениеЗаполнено(СообщениеЭДО) Тогда
		СообщениеЭДО = СообщениеЭДОИнформацииОтправителя(Объект.Ссылка);
	КонецЕсли;
	
	ПараметрыПереформирования = ИнтерфейсДокументовЭДОВызовСервера.ПараметрыПереформированияДокумента(СообщениеЭДО);
	ПараметрыПереформирования.Вставить("ИдентификаторПакета", ИдентификаторПакета);
	
	Если ЗначениеЗаполнено(Настройки) Тогда
		ПараметрыПереформирования.Вставить("Настройки", Настройки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Комментарий) Тогда
		ПараметрыПереформирования.Вставить("Комментарий", Комментарий);
	КонецЕсли;

	Оповещение = Новый ОписаниеОповещения("ПереформироватьДокументПослеВыбораОснования", 
		ЭтотОбъект, ПараметрыПереформирования);
	Если ОбъектыУчетаДокумента.Количество() > 1
		И Объект.ТипРегламента <> ПредопределенноеЗначение("Перечисление.ТипыРегламентовЭДО.УПД") Тогда
		Основания.ПоказатьВыборЭлемента(Оповещение, НСтр("ru='Выберите документ для переформирования'"));
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, Основания[0]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереформироватьДокументПослеПодбораОбъектовУчета(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	Если ОбъектыУчетаДокумента.Количество() Тогда
		ПереформироватьДокумент();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПереформироватьДокументПослеВыбораОснования(Результат, ПараметрыПереформирования) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТребуетсяЗаписатьДокумент() Тогда
		НачатьЗаписьДокумента(Новый ОписаниеОповещения);
	КонецЕсли;
	
	ПараметрыПереформирования.Вставить("ОбъектУчета", Результат.Значение);
		
	Оповещение = Новый ОписаниеОповещения("ПослеВыполненияПереформированияДокумента", 
		ЭтотОбъект, ПараметрыПереформирования);
			
	ИнтерфейсДокументовЭДОКлиент.ПереформироватьДокумент(Оповещение, ПараметрыПереформирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыполненияПереформированияДокумента(Результат, Контекст) Экспорт
	
	Если ОбработкаНеисправностейБЭДКлиентСервер.ЕстьОшибки(Результат.КонтекстДиагностики) Тогда
		ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(Результат.КонтекстДиагностики);
		Возврат;
	КонецЕсли;
	
	Если Результат.Переформирован Или Результат.СформированоИсправление Тогда
		ОбновитьДанныеПослеПереформированияДокумента(Результат.СформированныеДокументы);
		
		ПоказатьОповещениеПользователя(НСтр("ru = 'Переформирование'"),, 
			НСтр("ru = 'Сформирован новый документ'"), 
			БиблиотекаКартинок.ЭмблемаСервиса1СЭДО48, СтатусОповещенияПользователя.Информация);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Документ переформирован'"));
		
		ОповеститьОбИзмененииСостоянияДокумента();
	Иначе
		Прочитать();
		
		Шаблон = НСтр("ru='Для документа ""%1"" уже существует электронный документ в формализованном виде'");
		ТекстСообщения = СтрШаблон(Шаблон, Результат.Контекст.Параметры.ОбъектУчета);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Результат.Контекст.Параметры.ОбъектУчета);
	КонецЕсли;
	
	ОжидатьПолученияАсинхронныхДанных();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПослеПереформированияДокумента(СформированныеДокументы = Неопределено)
	
	Если СформированныеДокументы <> Неопределено 
		И СформированныеДокументы.Количество() Тогда
			
		Для Каждого СформированныйДокумент Из СформированныеДокументы Цикл
			АктуальныйЭлектронныйДокумент = СформированныйДокумент.Ключ;
		КонецЦикла;
	Иначе
		АктуальныйЭлектронныйДокумент = ИнтеграцияЭДО.АктуальныйЭлектронныйДокументОбъектаУчета(
			Основания.ВыгрузитьЗначения()[0], Объект.ВидДокумента, Объект.Контрагент, Объект.ДоговорКонтрагента);
	КонецЕсли;

	Если ЗначениеЗаполнено(АктуальныйЭлектронныйДокумент) Тогда
		СоставПакета.Очистить();
		ТекущийДокументПакета = Неопределено;
		СообщениеЭДО = Неопределено;
		ОбъектДокумента = АктуальныйЭлектронныйДокумент.ПолучитьОбъект();
		ЗначениеВРеквизитФормы(ОбъектДокумента, "Объект");
		Прочитать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // Переформирование

#Область РаботаСМаршрутом

&НаСервере
Функция АдресХраненияНастроекВыбораМаршрута()
	Возврат ИнтерфейсДокументовЭДО.СохранитьНастройкиВыбораМаршрутаПодписания(УникальныйИдентификатор,
		Объект.Организация, Объект.МаршрутПодписания, Объект.СписокПодписантов.Выгрузить());
КонецФункции

&НаКлиенте
Процедура ПослеВыбораМаршрутаПодписания(АдресХраненияНастроек, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(АдресХраненияНастроек) <> Тип("Строка") 
		Или Не ЗначениеЗаполнено(АдресХраненияНастроек) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьПолученныеНастройкиВыбораМаршрутов(АдресХраненияНастроек);
	
	ОбновитьДанныеПослеИзмененияМаршрутаПодписания();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПолученныеНастройкиВыбораМаршрутов(АдресХраненияНастроек)

	Настройки = ПолучитьИзВременногоХранилища(АдресХраненияНастроек);
	УдалитьИзВременногоХранилища(АдресХраненияНастроек);
	
	ПредставлениеМаршрута = Настройки.ПредставлениеНастроек;
	
	Объект.СписокПодписантов.Очистить();
	
	Если Настройки.ЗадаватьМаршрутВручную Тогда
		Объект.МаршрутПодписания = Справочники.МаршрутыПодписания.УказыватьПриСоздании;
		
		Для Каждого Подписант Из Настройки.Подписанты Цикл
			ПодписантДокумента = Объект.СписокПодписантов.Добавить();
			ЗаполнитьЗначенияСвойств(ПодписантДокумента, Подписант);
		КонецЦикла;
	Иначе
		Объект.МаршрутПодписания = Настройки.Маршрут;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти // РаботаСМаршрутом

#Область РаботаСПакетом

&НаКлиенте
Процедура СоставПакетаПослеАктивизацииСтроки()
	
	ТекущиеДанные = Элементы.СоставПакета.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
		Или Не ЗначениеЗаполнено(ТекущиеДанные.ЭлектронныйДокумент)
		Или ТекущиеДанные.ЭлектронныйДокумент = Объект.Ссылка Тогда
		Возврат;
	КонецЕсли;

	ТекущийДокументПакета = ТекущиеДанные.ЭлектронныйДокумент;

	Если ОповеститьОПрочтении Тогда
		Оповестить("ПрочтениеОбновитьСписок", ТекущийДокументПакета);
	КонецЕсли;
	
	Если ТребуетсяЗаписатьДокумент() Тогда
		Обработчик = Новый ОписаниеОповещения("СоставПакетаПослеАктивизацииСтрокиПослеЗаписи", ЭтотОбъект);
		НачатьЗаписьДокумента(Обработчик);
	Иначе
		ПоказатьДокументПакета();
		ОжидатьПолученияАсинхронныхДанных();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьДокументПакета()
	
	АдресОписанийСообщений = "";
	АдресФайловНовогоДокумента = "";
	АдресСДаннымиФайловТитулов = "";
	
	ЛегкийИнтерфейсДокументовЭДО.ПрекратитьОжиданиеПолученияДанныхКомпонентовПросмотраДокумента(ОперацияПолученияДанных);
	
	ЛегкийИнтерфейсДокументовЭДО.ПоказатьДокументПакетаКарточкиДокумента(ЭтотОбъект, ТекущийДокументПакета);

КонецПроцедуры

&НаКлиенте
Функция ПараметрыДобавленияВПакет()
	
	ПараметрыДобавленияВПакет = ПакетыДокументовЭДОКлиент.НовыеПараметрыДобавленияВПакет();
	ПараметрыДобавленияВПакет.ИдентификаторПакета = ИдентификаторПакета;
	ПараметрыДобавленияВПакет.ЭлектронныйДокумент = Объект.Ссылка;
	ПараметрыДобавленияВПакет.Отправитель = Объект.Организация;
	ПараметрыДобавленияВПакет.Получатель = Объект.Контрагент;
	ПараметрыДобавленияВПакет.Договор = Объект.ДоговорКонтрагента;
	ПараметрыДобавленияВПакет.ОтключитьТранслитерацию = ОтключитьТранслитерацию;
	
	Возврат ПараметрыДобавленияВПакет;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьВПакетФайлСКомпьютераПослеЗаписи(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ОжидатьПолученияАсинхронныхДанных();
	
	ПакетыДокументовЭДОКлиент.ПослеВыбораСпособаДобавленияДокументаВПакет("ДобавитьВПакетФайлСКомпьютера",
		ПараметрыДобавленияВПакет());

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВПакетПрисоединенныйФайлПослеЗаписи(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ОжидатьПолученияАсинхронныхДанных();
	
	ПакетыДокументовЭДОКлиент.ПослеВыбораСпособаДобавленияДокументаВПакет("ДобавитьВПакетПрисоединенныйФайл",
		ПараметрыДобавленияВПакет());

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВПакетДокументИнформационнойБазыПослеЗаписи(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ОжидатьПолученияАсинхронныхДанных();
	
	ПакетыДокументовЭДОКлиент.ПослеВыбораСпособаДобавленияДокументаВПакет("ДобавитьВПакетДокументИнформационнойБазы",
		ПараметрыДобавленияВПакет());

КонецПроцедуры

&НаКлиенте
Процедура СоставПакетаПослеАктивизацииСтрокиПослеЗаписи(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьДокументПакета();
	
	ОжидатьПолученияАсинхронныхДанных();

КонецПроцедуры

#КонецОбласти // РаботаСПакетом

#Область ЗагрузкаФормализованногоДокументаXML

&НаКлиенте
Процедура ЗагрузитьФормализованныйДокументXMLСДискаПослеЗагрузки(ПомещенныйФайл, ДополнительныеПараметры) Экспорт
	
	Если ПомещенныйФайл = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТребуетсяЗаписатьДокумент() Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения(
			"ЗагрузитьФормализованныйДокументXMLСДискаПослеЗаписиДокумента", ЭтотОбъект, ПомещенныйФайл);
		НачатьЗаписьДокумента(ОповещениеОЗавершении);
		Возврат;
	КонецЕсли;
	
	ЗагрузитьФормализованныйДокументПоДаннымФайлаXML(ПомещенныйФайл);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФормализованныйДокументXMLСДискаПослеЗаписиДокумента(Результат, ПомещенныйФайл) Экспорт
	Если Результат Тогда
		ЗагрузитьФормализованныйДокументПоДаннымФайлаXML(ПомещенныйФайл);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФормализованныйДокументПоДаннымФайлаXML(ПомещенныйФайл)
	
	РезультатЗагрузки = ЗагрузитьФормализованныйДокументПоДаннымФайлаXMLНаСервере(ПомещенныйФайл);
	
	Если РезультатЗагрузки.Успех Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Файл успешно загружен.'"));
		ОжидатьПолученияАсинхронныхДанных();
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РезультатЗагрузки.СуществующийДокумент) Тогда
		ОбработатьНаличиеСуществующегоДокументаДляВыбранногоФайлаXML(РезультатЗагрузки.СуществующийДокумент);
		Возврат;
	КонецЕсли;
		
	Если РезультатЗагрузки.Ошибки.Количество() = 0 Тогда
		ПоказатьПредупреждение(,
			ИнтерфейсДокументовЭДОКлиентСервер.ТекстСообщенияОбОтсутствииВозможностиЗагрузитьФайлXML());
		Возврат;
	КонецЕсли;
	
	Если РезультатЗагрузки.Ошибки.Количество() > 1 Тогда
		ПараметрыФормы = Новый Структура("ПараметрыОшибки", РезультатЗагрузки.Ошибки);
		ОповещениеОЗавершении = Новый ОписаниеОповещения(
			"ЗагрузитьФормализованныйДокументПоДаннымФайлаXMLПринудительно", ЭтотОбъект, ПомещенныйФайл);

		ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДО.Форма.СравнениеФормализованныхФайлов", ПараметрыФормы,
			ЭтотОбъект,,,, ОповещениеОЗавершении);
		
		Возврат;
	КонецЕсли;
		
	Для Каждого Ошибка Из РезультатЗагрузки.Ошибки Цикл
		Если Ошибка.Значение = Ложь
			И ЗначениеЗаполнено(Ошибка.Ключ) Тогда
			ПоказатьПредупреждение(, Ошибка.Ключ);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФормализованныйДокументПоДаннымФайлаXMLПринудительно(Ответ, ПомещенныйФайл) Экспорт
	
	Если Ответ <> "Продолжить" Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ЗагрузитьФормализованныйДокументПоДаннымФайлаXMLНаСервере(ПомещенныйФайл, Истина);
	Если Результат.Успех Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Файл успешно загружен.'"));
		ОжидатьПолученияАсинхронныхДанных();
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.СуществующийДокумент) Тогда
		ОбработатьНаличиеСуществующегоДокументаДляВыбранногоФайлаXML(Результат.СуществующийДокумент);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьФормализованныйДокументПоДаннымФайлаXMLНаСервере(ПомещенныйФайл, ПринудительнаяЗагрузка = Ложь)
	
	ДанныеДокумента = Новый Структура("Ссылка, Организация", Объект.Ссылка, Объект.Организация);
	
	Результат = ИнтерфейсДокументовЭДО.ЗагрузитьФормализованныйДокументПоФайлуXML(ДанныеДокумента, ПомещенныйФайл,
		ПринудительнаяЗагрузка);
		
	Если Не Результат.Успех Тогда
		Возврат Результат;
	КонецЕсли;
	
	ОписаниеФайла = РаботаСФайламиБЭД.ОписаниеФайлаПоДаннымПомещенногоФайла(ПомещенныйФайл);
	
	ЗаполнитьВложенияИзОписанияФайла(ОписаниеФайла);
	
	ЗаполнитьДанныеДокументаПоПодготовленнымДаннымИзФайлаXML(Результат.Данные);
	
	ЗаписатьДокументНаСервере();
	Прочитать();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьНаличиеСуществующегоДокументаДляВыбранногоФайлаXML(СуществующийДокумент)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
	ИнтерфейсДокументовЭДОКлиент.ОбработатьНаличиеСуществующегоДокументаДляВыбранногоФайлаXML(
		СуществующийДокумент, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти // ЗагрузкаФормализованногоДокументаXML

#Область НастройкиОтправкиФормирования

&НаКлиенте
Процедура ПослеИзмененияНастроекОтправкиИлиФормирования(Настройки, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Настройки) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЕстьВозможностьОтраженияВУчете И ОбъектыУчетаДокумента.Количество() Тогда
		ПереформироватьДокумент(Настройки, НСтр("ru = 'Изменение настроек формирования'"));
	Иначе
		ПослеИзмененияНастроекОтправкиПроизвольногоДокумента(Настройки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеИзмененияНастроекОтправкиПроизвольногоДокумента(Настройки)
	
	Объект.ИдентификаторОрганизации = Настройки.ИдентификаторОтправителя;
	Объект.ИдентификаторКонтрагента = Настройки.ИдентификаторПолучателя;
	Объект.ТребуетсяИзвещение = Настройки.ТребуетсяИзвещениеОПолучении;
	Объект.ТребуетсяПодтверждение = Настройки.ТребуетсяОтветнаяПодпись;
	
	ЗаписатьДокумент();
	
КонецПроцедуры

#КонецОбласти // НастройкиОтправкиФормирования

#Область ОбработчикиОповещений

&НаКлиенте
Процедура ПослеСменыОтветственного(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Или Не Результат.Успех Тогда
		Возврат;
	КонецЕсли;

	ОбновитьДанныеЭлектронногоДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиПодписейДокумента(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) И Результат.Успех Тогда
		ОбновитьДанныеПослеИзмененияПодписейДокумента();
	КонецЕсли;
	
	ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(Результат.КонтекстДиагностики);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияРезультатаПроверкиПодписи(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьДанныеПослеИзмененияПодписейДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдалениеДокументПослеОтветаНаВопрос(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = Неопределено
		Или Ответ.Значение <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьПометкуУдаления();
	
	ОжидатьПолученияАсинхронныхДанных();
	
	Оповестить(ИнтерфейсДокументовЭДОКлиент.ИмяСобытияОбновленияТекущихДелЭДО(), , ВладелецФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораДоговораКонтрагента(ВыбранноеЗначение, Контекст = Неопределено) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ДоговорКонтрагента = ВыбранноеЗначение;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПротоколОбменаПослеЗаписи(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;

	ИнтерфейсДокументовЭДОКлиент.ПоказатьПротоколОбмена(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка));

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсеДокументыУчетаПослеЗаписи(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ОжидатьПолученияАсинхронныхДанных();
	
	ЛегкийИнтерфейсДокументовЭДОКлиент.ПоказатьРасширенныйПодборОбъектовУчетаИзКарточкиДокумента(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура СменитьОтветственногоПослеЗаписи(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ОжидатьПолученияАсинхронныхДанных();
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеСменыОтветственного", ЭтотОбъект);
	ЛегкийИнтерфейсДокументовЭДОКлиент.СменитьОтветственногоИзКарточкиДокумента(ЭтотОбъект, ОповещениеОЗавершении);

КонецПроцедуры

&НаКлиенте
Процедура СменитьОтветственногоПакетПослеЗаписи(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ОжидатьПолученияАсинхронныхДанных();
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеСменыОтветственного", ЭтотОбъект);
	ЛегкийИнтерфейсДокументовЭДОКлиент.СменитьОтветственногоИзКарточкиДокумента(ЭтотОбъект, ОповещениеОЗавершении,
		Истина);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЖурналСобытийЭДОПослеЗаписи(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ОжидатьПолученияАсинхронныхДанных();
	
	ЭлектронныеДокументыЭДОКлиент.ОткрытьЖурналДействийПоЭДО(Объект.Ссылка);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуЭлектронногоДокументаПослеЗаписи(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ОжидатьПолученияАсинхронныхДанных();
	
	ИнтерфейсДокументовЭДОКлиент.ОткрытьКарточкуЭлектронногоДокумента(Объект.Ссылка);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлПослеЗаписи(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ОжидатьПолученияАсинхронныхДанных();
	
	ЛегкийИнтерфейсДокументовЭДОКлиент.ОткрытьФайлИнформацииОтправителяДокумента(Объект.Ссылка, Объект.ЭтоОблачныйЭДО,
		УникальныйИдентификатор);

КонецПроцедуры

#КонецОбласти // ОбработчикиОповещений

#Область ОбработчикиКоманд

&НаСервере
Процедура ИзменитьПометкуУдаления()
	
	Объект.ПометкаУдаления = Не Объект.ПометкаУдаления;
	Записать();
	Прочитать();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДоговорПослеВыбораОрганизации(ВыбранноеЗначение)
	
	Если Объект.Организация <> ВыбранноеЗначение Тогда
		Объект.ДоговорКонтрагента = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ПараметрыВыполненияДействийПоЭДО - См. ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  ПакетнаяОбработка - Булево
//  ОбработчикЗавершения - Неопределено,ОписаниеОповещения
&НаКлиенте
Процедура ВыполнитьДействияПоЭДО(ПараметрыВыполненияДействийПоЭДО, ПакетнаяОбработка = Ложь,
	ОбработчикЗавершения = Неопределено)

	ПараметрыОповещения = Неопределено;
	Если ОбработчикЗавершения <> Неопределено Тогда
		ПараметрыОповещения = Новый Структура("ОповещениеУспешногоЗавершения", ОбработчикЗавершения);
	КонецЕсли;
	Оповещение = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект, ПараметрыОповещения);
	
	Если ПакетнаяОбработка И ЗначениеЗаполнено(ИдентификаторПакета) Тогда
		ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ПакетыДокументов.Добавить(ИдентификаторПакета);
	Иначе
		ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ЭлектронныеДокументы.Добавить(Объект.Ссылка);
	КонецЕсли;
	
	ИнтерфейсДокументовЭДОКлиент.НачатьВыполнениеДействийПоЭДО(Оповещение, ПараметрыВыполненияДействийПоЭДО);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКоманд

#КонецОбласти // СлужебныеПроцедурыИФункции