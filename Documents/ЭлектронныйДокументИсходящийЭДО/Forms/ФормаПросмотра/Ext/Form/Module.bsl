#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
		ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект);
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриСозданииЧтенииНаСервере();
	Иначе
		УстановитьЗаголовокФормы();
	КонецЕсли;
	
	НастроитьПараметрыКонтрагента();
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если РаботаСПрочтениямиВызовСервера.УстановитьСвойствоПрочтен(Объект.Ссылка, Истина) Тогда	
			ОповеститьОПрочтении = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	КонтекстныеПодсказкиБЭД.КонтекстныеПодсказки_ПриСозданииНаСервере(ЭтотОбъект, 
		Элементы.ПанельКонтекстныхНовостей, 
		Элементы.ГруппаКонтекстныхПодсказок);
	
	СформироватьКонтекст();
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект);
	
	ПриСозданииЧтенииНаСервере();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОжидатьФормированияПредставленияДокумента();
	
	Если ОповеститьОПрочтении Тогда
		Оповестить("ПрочтениеОбновитьСписок", Объект.Ссылка);
	КонецЕсли;
	Если ОшибкаЧтенияXML Тогда
		ПоказатьПредупреждение(,
			ИнтерфейсДокументовЭДОКлиентСервер.ТекстСообщенияОбОтсутствииВозможностиЗагрузитьФайлXML());
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	ПроверкаСуществующегоДокумента();
	ЭлементСхемы = СхемаРегламента.НайтиПоИдентификатору(ИдентификаторТекущегоЭлемента);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(ЭлементСхемы.АдресФайла)
		И Не ЗначениеЗаполнено(СуществующийДокумент) Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Файл успешно загружен.'"));
		Модифицированность = Истина;
	КонецЕсли;
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	КонтекстныеПодсказкиБЭДКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЭтоНовыйДокумент = ПараметрыЗаписи.Свойство("ЭтоНовыйДокумент") И ПараметрыЗаписи.ЭтоНовыйДокумент;
	
	Если ЭтоНовыйДокумент Тогда
		УстановитьНовыйНомерДокумента(ТекущийОбъект);
		ИнтерфейсДокументовЭДО.ДобавитьОписанияСообщенийВПараметрыЗаписиЭлектронногоДокумента(ЭтотОбъект, 
			ПараметрыЗаписи, ПараметрыЗаписи.ЭлементыСхемыРегламента);
		ЭлектронныеДокументыЭДО.ПередЗаписьюНовогоДокумента(ТекущийОбъект, ПараметрыЗаписи.ОписанияСообщений);
	КонецЕсли;
	Если Не ЭтоНовыйДокумент И ИзмененаСопроводительнаяЗаписка Тогда
		Если ПараметрыЗаписи.Свойство("ЭлементыСхемыРегламента") Тогда
			ЭлементыСхемыРегламента = ПараметрыЗаписи.ЭлементыСхемыРегламента;
		Иначе
			ЭлементыСхемыРегламента = ОбщегоНазначенияБЭДКлиентСервер.ПолучитьВсеЭлементыДереваРекурсивно(
				СхемаРегламента);
		КонецЕсли;
		ИнтерфейсДокументовЭДО.ДобавитьОписанияСообщенийВПараметрыЗаписиЭлектронногоДокумента(ЭтотОбъект, 
			ПараметрыЗаписи, ЭлементыСхемыРегламента);
		ПараметрыЗаписи.Вставить("ИзменениеСопроводительнойЗаписки");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.Свойство("ЭтоНовыйДокумент") И ПараметрыЗаписи.ЭтоНовыйДокумент Тогда
		ЭлектронныеДокументыЭДО.ПриЗаписиНовогоДокумента(ТекущийОбъект,
			ПараметрыЗаписи.ОписанияСообщений, ПараметрыЗаписи.КонтекстДиагностики, Основания.ВыгрузитьЗначения());
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗаписи, "ИзменениеВидаДокумента", Ложь) Тогда
		ЭлектронныеДокументыЭДО.ПриИзмененииВидаДокумента(ТекущийОбъект.Ссылка,
			ТекущийОбъект.ВидДокумента, Отказ);
	КонецЕсли;
	Если ПараметрыЗаписи.Свойство("ИзменениеСопроводительнойЗаписки") Тогда
		ЭлектронныеДокументыЭДО.ПриИзмененииСопроводительнойЗаписки(ПараметрыЗаписи.ОписанияСообщений, Отказ);
		ИзмененаСопроводительнаяЗаписка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	
	Если ПараметрыЗаписи.Свойство("ЭтоНовыйДокумент") И ПараметрыЗаписи.ЭтоНовыйДокумент Тогда
		ЭлектронныеДокументыЭДО.ПослеЗаписиНовогоДокумента(ТекущийОбъект, КонтекстДиагностики);
	КонецЕсли;
	
	УстановитьЗаголовокФормы();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбщегоНазначенияКлиент.ОповеститьОбИзмененииОбъекта(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = ИнтерфейсДокументовЭДОКлиент.ИмяСобытияОбновленияСостоянияЭДО()
		И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ОбработатьОповещение = Истина;
		
		Если Параметр = Неопределено Тогда
			ОбновитьДанныеЭлектронногоДокументаНаСервере();
			ОжидатьФормированияПредставленияДокумента();
			Возврат;
		КонецЕсли;
		
		ЭлементСхемы = ЭлементСхемыИнформацияОтправителя(ЭтотОбъект);
		
		ДанныеПроверки = ИнтерфейсДокументовЭДОКлиент.НовыеДанныеПроверкиОповещения();
		Если ЗначениеЗаполнено(ЭлементСхемы.Сообщение) Тогда
			ДанныеПроверки.Сообщение = ЭлементСхемы.Сообщение;
		Иначе
			ДанныеПроверки.Сообщение = ИнтерфейсДокументовЭДОВызовСервера.СообщениеОтправителя(Объект.Ссылка);
		КонецЕсли;
		ДанныеПроверки.ЭлектронныйДокумент = Объект.Ссылка;

		ИнтерфейсДокументовЭДОКлиент.ПриОбработкеОповещенияФормыПросмотраЭД(ДанныеПроверки, Параметр, ОбработатьОповещение);
		
		Если Не ОбработатьОповещение Тогда
			Возврат;
		КонецЕсли;

		ОбновитьДанныеЭлектронногоДокументаНаСервере();
		ОжидатьФормированияПредставленияДокумента();
		
	ИначеЕсли ИмяСобытия = "ЭлектронныйДокументИсходящий_ПодборДокументаУчета" И Параметр = Объект.Ссылка Тогда
		
		ОбновитьДанныеЭлектронногоДокументаНаСервере();
		ОжидатьФормированияПредставленияДокумента();
		
	ИначеЕсли ИмяСобытия = ПакетыДокументовЭДОКлиент.ИмяСобытияДобавленияДокументаВПакет() Тогда
		Если Не ЗначениеЗаполнено(ИдентификаторПакета) Тогда
			ИдентификаторПакета = Источник;
		КонецЕсли;
		Если Источник = ИдентификаторПакета Тогда
			КоличествоДокументов = Параметр.Количество();
			УстановитьТекущийДокументПакета(Параметр[КоличествоДокументов - 1]);
			ОжидатьФормированияПредставленияДокумента();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ВыборТекущегоДокументаПакета" И Источник = ИдентификаторПакета Тогда
		УстановитьТекущийДокументПакета(Параметр);
		ОжидатьФормированияПредставленияДокумента();
		
	ИначеЕсли ИмяСобытия = ПакетыДокументовЭДОКлиент.ИмяСобытияУдалениеДокументаИзПакета() 
		И Источник = ИдентификаторПакета Тогда
		ЗначениеКУдалению = СоставПакета.НайтиПоЗначению(Параметр);
		СоставПакета.Удалить(ЗначениеКУдалению);
		УстановитьТекущийДокументПакета(СоставПакета[0].Значение);
		ОжидатьФормированияПредставленияДокумента();
		
	ИначеЕсли ИмяСобытия = "Запись_файл" Тогда 	
		ЭлементСхемы = ЭлементСхемыИнформацияОтправителя(ЭтотОбъект);
		Если ЭлементСхемы.ПрисоединенныйФайл = Источник Тогда
			ПодготовитьПредставлениеФайлаНаСервере();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ЗакрытьФормуДлительнойОперации" Тогда
		ИнтерфейсДокументовЭДОКлиентСервер.РазблокироватьЗаблокированныеЭлементыФормы(ЭтотОбъект,
			ЗаблокированныеЭлементыФормы);
			
	ИначеЕсли ИмяСобытия = МашиночитаемыеДоверенностиКлиент.ИмяСобытияИсправлениеОшибкиПроверкиПолномочий() Тогда
		
		Для Каждого ИсправленнаяОшибка Из Параметр Цикл
			Если ИсправленнаяОшибка.СсылкаНаОбъект = Объект.Ссылка Тогда
				ОбновитьСтраницуПодписей();
				ОжидатьФормированияПредставленияДокумента();
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	КонтекстныеПодсказкиБЭДКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОчиститьДоговорПослеВыбораОрганизации(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ПриИзмененииКлючевыхРеквизитов();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура;;
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("Контрагент", Объект.Контрагент);
	
	Оповещение = Новый ОписаниеОповещения("ДоговорОбработкаВыбора", ЭтотОбъект);
		
	ИнтеграцияЭДОКлиент.ОткрытьФормуВыбораДоговора(ПараметрыФормы, Элемент, Оповещение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорОбработкаВыбора(ВыбранноеЗначение, Контекст = Неопределено) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	ПриИзмененииКлючевыхРеквизитов();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВидДокументаПриИзменении(Элемент)
	ПриИзмененииКлючевыхРеквизитов();
	Модифицированность = Истина;
	ИзмененВидДокумента = Истина;
	ОкноОтправкиВФормализованномВидеПоказано = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура НомерДокументаПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДатаДокументаПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НадписьИмяФайлаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФайлВложения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредупреждениеНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Сертификаты = Новый Массив;
	Для каждого СтрокаТаблицы Из Подписи Цикл
		Сертификаты.Добавить(СтрокаТаблицы.Отпечаток);
	КонецЦикла;
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики();
	
	КонтекстДиагностики.ЗаголовокОперации = НСтр("ru = 'При проверке подписей'");
	
	ПараметрыОбработкиОшибок = ОбработкаНеисправностейБЭДКлиент.НовыеПараметрыОбработкиОшибок();
	ПараметрыОбработкиОшибок.ГруппаПредупреждения = Элементы.ГруппаПредупрежденияЭлектронныеПодписи;
	ПараметрыОбработкиОшибок.Отбор.Вставить("Сертификат", Сертификаты);
	КонтекстДиагностики.ОшибкиОбработаны = Ложь;
	ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(КонтекстДиагностики, ПараметрыОбработкиОшибок);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьОшибкаФормированияПредставленияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьЖурналРегистрации" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОтборЖурналаРегистрации = Новый Структура;
		ОтборЖурналаРегистрации.Вставить("Данные", "ЭлектронныеДокументыЭДО.ПредставлениеДанныхДокумента");
		ЖурналРегистрацииКлиент.ОткрытьЖурналРегистрации(ОтборЖурналаРегистрации, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	ИнтерфейсДокументовЭДОКлиент.ПросмотрЭлектронногоДокументаОбработкаНавигационнойСсылки(
		ЭтотОбъект, Элемент, НавигационнаяСсылка, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СоставПакета_ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		СтандартнаяОбработка = Ложь;
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("Элемент", Элемент);
		ДопПараметры.Вставить("НавигационнаяСсылка", НавигационнаяСсылка);
		ОписаниеОповещения = Новый ОписаниеОповещения("СоставПакета_ОбработкаНавигационнойСсылкиПослеЗаписи",	
			ЭтотОбъект, ДопПараметры);
		НачатьЗаписьДокумента(ОписаниеОповещения);
	Иначе
		СоставПакета_ОбработатьНавигационнуюСсылку(НавигационнаяСсылка, Элемент, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СоставПакета_Нажатие(Элемент, СтандартнаяОбработка)
	
	УстановитьТекущийДокументПакета(СоставПакета[0].Значение, Ложь);
	ПакетыДокументовЭДОКлиент.ЭлементУправленияПакета_Нажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСхемаРегламента

&НаКлиенте
Процедура СхемаРегламентаПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("СхемаРегламентаПослеАктивизацииСтроки",0.1,Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПодписи

&НаКлиенте
Процедура ПодписиПриАктивизацииСтроки(Элемент)
	
	Элементы.ПроверкаДоверенностиВыполненаВручнуюКонтекст.Видимость = Ложь;
	Если Элемент.ТекущиеДанные = Неопределено Или Не ЕстьПравоИзмененияМЧД Тогда
		Возврат;
	КонецЕсли;
		
	ЭтоВходящаяПодпись = Элемент.ТекущиеДанные.СвойстваПодписи.ВходящаяПодпись;
	ЭтоПодписьПоДоверенности = Элемент.ТекущиеДанные.ЭтоПодписьПоДоверенности;
	
	Если ЭтоВходящаяПодпись И ЭтоПодписьПоДоверенности Тогда
		
		РезультатПроверкиПоМЧД = Элемент.ТекущиеДанные.РезультатПроверкиПоМЧД;
		
		ПроверкаВыполненаВручную = 
			МашиночитаемыеДоверенностиКлиентСервер.ПроверкаДоверенностиВыполненаВручную(
				РезультатПроверкиПоМЧД);
				
		ПроверкаПолномочийВыполненаБезОшибок = Ложь;
		ДоверенностьПроверенаУспешно = Ложь;
		Если ЗначениеЗаполнено(РезультатПроверкиПоМЧД.ПротоколПроверки) Тогда
			
			ПроверкаПолномочийВыполненаБезОшибок = 
				РезультатПроверкиПоМЧД.ПротоколПроверки.ПроверкаМЧД.ПроверкаПолномочий.Успех;
			
			ДоверенностьПроверенаУспешно = 
				МашиночитаемыеДоверенностиКлиентСервер.ДоверенностьПроверенаУспешно(
					РезультатПроверкиПоМЧД.ПротоколПроверки.ПроверкаМЧД);
		
		КонецЕсли;
		
 		ДоступнаКомандаРучнойПроверки = ПроверкаВыполненаВручную 
			Или Не (ДоверенностьПроверенаУспешно И ПроверкаПолномочийВыполненаБезОшибок);
		
		Если ДоступнаКомандаРучнойПроверки Тогда
			Элементы.ПроверкаДоверенностиВыполненаВручнуюКонтекст.Видимость = ДоступнаКомандаРучнойПроверки;
			ОбновитьСостояниеКомандыРучнойПроверкиПодписи(РезультатПроверкиПоМЧД);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодписиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Элемент.ТекущиеДанные <> Неопределено
		И Элемент.ТекущиеДанные.Сертификат <> Неопределено Тогда
		
		Если Поле = Элементы.ПодписиДоверенностьПредставление Тогда
			РезультатПроверки  = Элемент.ТекущиеДанные.РезультатПроверкиПоМЧД;
			Если ЗначениеЗаполнено(РезультатПроверки) Тогда
				Если ЗначениеЗаполнено(РезультатПроверки.Доверенность) Тогда
					ПоказатьЗначение( , РезультатПроверки.Доверенность);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Поле = Элементы.ПодписиПодписьВернаПредставление Тогда 
						
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("СвойстваПодписи", Элемент.ТекущиеДанные.СвойстваПодписи); 
			ПараметрыФормы.Вставить("СвойстваДоверенности", Элемент.ТекущиеДанные.СвойстваДоверенности); 
			ПараметрыФормы.Вставить("РезультатПроверки", Элемент.ТекущиеДанные.РезультатПроверкиПоМЧД);			
						
			ПараметрыОткрытия = ОбщегоНазначенияБЭДКлиент.НовыеПараметрыОткрытияФормы();
			
			Если Элемент.ТекущиеДанные.ЭтоПодписьПоДоверенности Тогда
				
				ПараметрыФормы.Вставить("ЭлектронныйДокумент", Объект.Ссылка);
				ПараметрыФормы.Вставить("ПредставлениеДокумента", ТабличныйДокументИнформацияОтправителя);
				ПараметрыФормы.Вставить("ПодписанныйОбъект", Элемент.ТекущиеДанные.ПодписанныйОбъект);
				ПараметрыФормы.Вставить("СообщениеЭДО", Элемент.ТекущиеДанные.СообщениеЭДО);
				
				ПараметрыОбработкиПолномочий = Новый Структура("ДанныеСтроки", Элемент.ТекущиеДанные);
				ОповещениеОПроверке = Новый ОписаниеОповещения(
					"ОбработкаРезультатаПроверки", ЭтотОбъект, ПараметрыОбработкиПолномочий);
				ПараметрыОткрытия.ОписаниеОповещенияОЗакрытии = ОповещениеОПроверке;
				
			КонецЕсли;
			
			ПараметрыОткрытия.Владелец = ЭтотОбъект;
			ПараметрыОткрытия.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
			
			МашиночитаемыеДоверенностиКлиент.ОткрытьРезультатыПроверкиПодписи(ПараметрыФормы, ПараметрыОткрытия);
			
		Иначе		
			АдресДанныхСертификата = АдресДанныхСертификата(Элемент.ТекущиеДанные.НомерСтроки);
			
			Если АдресДанныхСертификата <> Неопределено Тогда
				ИнтеграцияБСПБЭДКлиент.ПоказатьСертификат(АдресДанныхСертификата);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПометкаУдаления(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьПометкуУдаленияВопрос", ЭтотОбъект);
	ОбщегоНазначенияБЭДКлиент.ЗадатьВопросНаУстановкуПометкиУдаления(Объект.ПометкаУдаления, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречитатьДанные(Команда)
	Прочитать();
	ОжидатьФормированияПредставленияДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЭлектронныйДокумент(Команда)
	
	ЗаписатьДокумент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьПанельРегламента(Команда)
	
	ОтключитьВыводСхемыРегламента = Не ОтключитьВыводСхемыРегламента;
	Элементы.ОтображатьСхемуРегламента.Пометка = Не ОтключитьВыводСхемыРегламента;
	Элементы.СхемаРегламента.Видимость = Не ОтключитьВыводСхемыРегламента;
	
	СохранитьНастройкиОтображения();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложениеИзПрисоединенныхФайлов(Команда)
	
	Если Основания.Количество() > 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВложениеИзФайлаОснования", ЭтотОбъект);
		РаботаСФайламиКлиент.ОткрытьФормуВыбораФайлов(Основания[0].Значение, ЭтотОбъект,, ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложениеИзФайлаНаДиске(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВложениеИзФайлаНаДискеЗавершить", ЭтотОбъект);
	
	ПараметрыЗагрузки = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
	
	ФайловаяСистемаКлиент.ЗагрузитьФайл(ОписаниеОповещения, ПараметрыЗагрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСДиска(Команда)
	
	ЗаписатьДокумент();
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершить", ЭтотОбъект);
		ИнтерфейсДокументовЭДОКлиент.ЗагрузитьФормализованныйДокументXMLСДиска(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьФайл(Команда)
	
	ОткрытьФайлВложения(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРедактированиеФайла(Команда)
	
	ЗакончитьРедактированиеФайла(Новый ОписаниеОповещения);
	ПодготовитьПредставлениеФайлаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьРедактированиеФайла(Команда)
	
	ОсвободитьФайл(Новый ОписаниеОповещения);
	ПодготовитьПредставлениеФайлаНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ОтображатьОбластьКопияВерна(Команда)
	
	ОтключитьВыводКопияВерна = Не ОтключитьВыводКопияВерна;
	Элементы.ОтображатьОбластьКопияВерна.Пометка = Не ОтключитьВыводКопияВерна;	
	
	СохранитьНастройкиОтображения();
	ОбновитьПредставлениеЭлектронногоДокумента();
	ОжидатьФормированияПредставленияДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьДополнительнуюИнформацию(Команда)
	
	ОтключитьВыводДопДанных = Не ОтключитьВыводДопДанных;
	Элементы.ОтображатьДополнительнуюИнформацию.Пометка = Не ОтключитьВыводДопДанных;
	
	СохранитьНастройкиОтображения();
	ОбновитьПредставлениеЭлектронногоДокумента();
	ОжидатьФормированияПредставленияДокумента();
		
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьБанковскиеРеквизиты(Команда)
	
	ВыводитьБанковскиеРеквизиты = Не ВыводитьБанковскиеРеквизиты;
	Элементы.ОтображатьБанковскиеРеквизиты.Пометка = ВыводитьБанковскиеРеквизиты;
	
	СохранитьНастройкиОтображения();
	ОбновитьПредставлениеЭлектронногоДокумента();
	ОжидатьФормированияПредставленияДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЖурналСобытийЭДО(Команда)
	
	ЭлектронныеДокументыЭДОКлиент.ОткрытьЖурналДействийПоЭДО(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Перенаправить(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстОшибки = НСтр("ru = 'Электронный документ не сформирован. Работа с ним невозможна.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ИдентификаторПакета) И СостоянияПакетаОднородно Тогда
		ЭлектронныеДокументы = ПакетыДокументовЭДОВызовСервера.ДокументыПакета(ИдентификаторПакета);
	Иначе
		ЭлектронныеДокументы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка);
	КонецЕсли;
	
	ИнтерфейсДокументовЭДОКлиент.ПеренаправитьЭлектронныеДокументы(ЭлектронныеДокументы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТранслитироватьИмяФайла(Команда)
	
	ОтключитьТранслитерацию = Не ОтключитьТранслитерацию;
	Элементы.ТранслитироватьИмяФайла.Пометка = Не ОтключитьТранслитерацию;
	Элементы.НадписьТранслитерация.Видимость = Не ОтключитьТранслитерацию;
	
	СохранитьНастройкиОтображения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСертификат(Команда)

	ТекущиеДанные =  Элементы.Подписи.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		АдресДанныхСертификата = АдресДанныхСертификата(ТекущиеДанные.НомерСтроки);
	
		Если АдресДанныхСертификата <> Неопределено Тогда
			ИнтеграцияБСПБЭДКлиент.ПоказатьСертификат(АдресДанныхСертификата);
		Иначе
			ОчиститьСообщения();
			ТекстОшибки = НСтр("ru = 'Отсутствует сертификат.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
	
	Иначе
		ОчиститьСообщения();
		ТекстОшибки = НСтр("ru = 'Выберите сертификат в списке установленных подписей.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодписи(Команда)
	
	ВыполнитьПроверкуПодписей();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПроизвольныйДокумент(Команда)
	
	ИнтерфейсДокументовЭДОКлиент.ОткрытьНовыйПроизвольныйЭлектронныйДокументНаОсновании(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодписьПоДоверенностиВручную(Команда)
	
	Если Элементы.ПроверкаДоверенностиВыполненаВручнуюКонтекст.Пометка Тогда
		ВыполнитьПроверкуПодписей();
	Иначе
		ВыбраннаяПодпись = Элементы.Подписи.ТекущиеДанные; 
		
		ДанныеПодписи = ЭлектронныеДокументыЭДОКлиентСервер.НовыеДанныеПодписиСУчетомДоверенности();
		ЗаполнитьЗначенияСвойств(ДанныеПодписи, ВыбраннаяПодпись);
		
		ЗаписатьРезультатРучнойПроверкиПодписиНаСервере(ДанныеПодписи);
		ОжидатьФормированияПредставленияДокумента();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыУчетаЭлектронногоДокументаПредставлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)

	Если НавигационнаяСсылка = "ПредставлениеДокументовУчетаЭлектронногоДокументаНажатие" Тогда
		СтандартнаяОбработка = Ложь;
		ПредставлениеДокументовУчетаЭлектронногоДокументаНажатие();
	ИначеЕсли НавигационнаяСсылка = "ОткрытьФормуПодбораДокументовУчетаНажатие" Тогда
		СтандартнаяОбработка = Ложь;
		ПередОткрытиемФормыПодбораОбъектовУчета();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеДокументовУчетаЭлектронногоДокументаНажатие()
		
	Если Основания.Количество() = 1 Тогда
		ПоказатьЗначение(, Основания[0].Значение);
	Иначе		
		ПередОткрытиемФормыПодбораОбъектовУчета();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередОткрытиемФормыПодбораОбъектовУчета()
	
	Если Модифицированность Или Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Описание = Новый ОписаниеОповещения("ОткрытьФормуПодбораОбъектовУчетаПослеВопроса", ЭтотОбъект);

		Текст = НСтр("ru = 'Для выполнения операции необходимо сохранить документ. Продолжить?'");
		ПоказатьВопрос(Описание, Текст, РежимДиалогаВопрос.ДаНет);
		Возврат;
	Иначе
		ОткрытьПодборОбъектовУчета();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодбораОбъектовУчетаПослеВопроса(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаписатьДокумент();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьПодборОбъектовУчета();

КонецПроцедуры

&НаКлиенте
Процедура НапечататьЭлектронныеДокументы(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Для печати необходимо сохранить электронный документ'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыВизуализации = ИнтерфейсДокументовЭДОВызовСервера.НовыеПараметрыВизуализацииДокумента();
	ПараметрыВизуализации.ВыводитьБанковскиеРеквизиты = ВыводитьБанковскиеРеквизиты;
	ПараметрыВизуализации.ВыводитьДопДанные = Не ОтключитьВыводДопДанных;
	ПараметрыВизуализации.ВыводитьКопияВерна = Не ОтключитьВыводКопияВерна;
	
	ИнтерфейсДокументовЭДОКлиент.ОткрытьФормуПечатиЭлектронныхДокументов(Объект.Ссылка, ПараметрыВизуализации);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЭлектронныеДокументыВФорматеPDF(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Для выгрузки необходимо сохранить электронный документ'"));
		Возврат;
	КонецЕсли;
	
	ЭлектронныеДокументы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка);
	ИнтерфейсДокументовЭДОКлиент.ВыгрузитьЭлектронныеДокументыВФорматеPDF(ЭлектронныеДокументы, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЭлектронныеДокументыДляФНС(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Для выгрузки необходимо сохранить электронный документ'"));
		Возврат;
	КонецЕсли;
	
	ЭлектронныеДокументы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка);
	ИнтерфейсДокументовЭДОКлиент.ВыгрузитьЭлектронныеДокументыДляФНС(ЭлектронныеДокументы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДокументооборотЦеликом(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Для выгрузки необходимо сохранить электронный документ'"));
		Возврат;
	КонецЕсли;
	
	ЭлектронныеДокументы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка);
	ИнтерфейсДокументовЭДОКлиент.ВыгрузитьДокументооборотЦеликом(ЭлектронныеДокументы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКомментарийСостояния(Команда)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(КомментарийСостояния, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗаписку(Команда)
	
	ОчиститьСопроводительнуюЗаписку();
	
КонецПроцедуры

#Область ДействияПоЭДО

&НаКлиенте
Процедура ВыполнитьОтправкуПолучениеЭД(Элемент)
	
	Элементы.ОбновитьСостояниеЭД.Картинка = БиблиотекаКартинок.СинхронизацияДанныхДлительнаяОперация;
	
	Оповещение = Новый ОписаниеОповещения("ОтправкаПолучениеЭДЗавершение", ЭтотОбъект);
	УчетныеЗаписиОбмена = Новый Массив;
	УчетныеЗаписиОбмена.Добавить(Объект.ИдентификаторОрганизации);
	ИнтерфейсДокументовЭДОКлиент.ОтправитьПолучитьДокументыЭДО(ЭтотОбъект, Оповещение, УчетныеЗаписиОбмена);

КонецПроцедуры

&НаКлиенте
Процедура ПодписатьОтправить(Команда)
	
	ИнтерфейсДокументовЭДОКлиент.ЗаблокироватьЭлементФормы(ЭтотОбъект, ЗаблокированныеЭлементыФормы,
		Элементы.ПодписатьОтправить);
	ИнтерфейсДокументовЭДОКлиент.ЗаблокироватьЭлементФормы(ЭтотОбъект, ЗаблокированныеЭлементыФормы,
		Элементы.ЗаписатьДокумент);
	
	Если СтрНайти(Команда.Имя, "Документ") = 0 Тогда
		ПодключитьОбработчикОжидания("ПодписатьИОтправитьОбработка", 0.1, Истина);
	Иначе
		ПодключитьОбработчикОжидания("ПодписатьИОтправитьОбработкаДокумента", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьИОтправитьОбработка()
	
	ПакетнаяОбработка = СостоянияПакетаОднородно;
	
	Оповещение = Новый ОписаниеОповещения("ПодписатьОтправитьПослеЗаписи", ЭтотОбъект, ПакетнаяОбработка);
		
	ПроверитьЗаписьДокументаПередПодписанием(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ПодписатьИОтправитьОбработкаДокумента()
	
	ПакетнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ПодписатьОтправитьПослеЗаписи", ЭтотОбъект, ПакетнаяОбработка);
		
	ПроверитьЗаписьДокументаПередПодписанием(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ПодписатьОтправитьПослеЗаписи(Результат, ПакетнаяОбработка) Экспорт
	
	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДанныеТекущегоЭлектронногоДокумента();
	
	НаборДействий = Новый Соответствие;
	
	Если СформироватьИзвещение Тогда
		ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
			"Перечисление.ДействияПоЭДО.СформироватьИзвещение"));
	КонецЕсли;
	
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Подписать"));
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ПодготовитьКОтправке"));
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Отправить"));
	
	ВыполнитьДействияПоЭДО(НаборДействий, ПакетнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура Подписать(Команда)
	
	ИнтерфейсДокументовЭДОКлиент.ЗаблокироватьЭлементФормы(ЭтотОбъект, ЗаблокированныеЭлементыФормы,
		Элементы.Подписать);
	ИнтерфейсДокументовЭДОКлиент.ЗаблокироватьЭлементФормы(ЭтотОбъект, ЗаблокированныеЭлементыФормы,
		Элементы.ЗаписатьДокумент);
	
	Если СтрНайти(Команда.Имя, "Документ") = 0 Тогда
		ПодключитьОбработчикОжидания("ПодписатьОбработка", 0.1, Истина);
	Иначе
		ПодключитьОбработчикОжидания("ПодписатьОбработкаДокумента", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПодписатьОбработка()
	
	ПакетнаяОбработка = СостоянияПакетаОднородно;
	
	Оповещение = Новый ОписаниеОповещения("ПодписатьПослеЗаписи", ЭтотОбъект, ПакетнаяОбработка);
		
	ПроверитьЗаписьДокументаПередПодписанием(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ПодписатьОбработкаДокумента()
	
	ПакетнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ПодписатьПослеЗаписи", ЭтотОбъект, ПакетнаяОбработка);
		
	ПроверитьЗаписьДокументаПередПодписанием(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаписьДокументаПередПодписанием(Оповещение)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Или Модифицированность Тогда
		
		Отказ = Ложь;
		
		ПроверитьЗаполнениеНаКлиенте(Отказ);
		
		Если Отказ = Истина Тогда
			ИнтерфейсДокументовЭДОКлиентСервер.РазблокироватьЗаблокированныеЭлементыФормы(ЭтотОбъект,
				ЗаблокированныеЭлементыФормы);
			
			ВыполнитьОбработкуОповещения(Оповещение, Ложь);
			Возврат;
		КонецЕсли;
		
		НачатьЗаписьДокумента(Оповещение);
	Иначе
		
		Если Не ОкноОтправкиВФормализованномВидеПоказано
			И ТребуетсяФормализованныйФормат(Объект.ТипРегламента, Объект.ВидДокумента) Тогда
			ИнтерфейсДокументовЭДОКлиент.ПоказатьОкноПредложенияОтправкиВФормализованномВиде(
				Объект.ВидДокумента, Оповещение);
			Возврат;
		КонецЕсли;
		
		ВыполнитьОбработкуОповещения(Оповещение, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодписатьПослеЗаписи(Результат, ПакетнаяОбработка) Экспорт
	
	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДанныеТекущегоЭлектронногоДокумента();
	
	НаборДействий = Новый Соответствие;	
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Подписать"));
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ПодготовитьКОтправке"));
	ВыполнитьДействияПоЭДО(НаборДействий, ПакетнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьКоманда(Команда)
	
	ИнтерфейсДокументовЭДОКлиент.ЗаблокироватьЭлементФормы(ЭтотОбъект, ЗаблокированныеЭлементыФормы,
		Элементы.Отправить);
	
	Если СтрНайти(Команда.Имя, "Документ") = 0 Тогда
		ПодключитьОбработчикОжидания("ОтправитьОбработка", 0.1, Истина);
	Иначе
		ПодключитьОбработчикОжидания("ОтправитьОбработкаДокумента", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьОбработка()

	ПакетнаяОбработка = СостоянияПакетаОднородно;
	ОтправитьДокументДействие(ПакетнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьОбработкаДокумента()
	
	ПакетнаяОбработка = Ложь;
	ОтправитьДокументДействие(ПакетнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьДокументДействие(ПакетнаяОбработка)
	
	НаборДействий = Новый Соответствие;	
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ПодготовитьКОтправке"));
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Отправить"));
	
	ВыполнитьДействияПоЭДО(НаборДействий, ПакетнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьАннулирование(Команда)
	
	НаборДействий = Новый Соответствие;	
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ПринятьАннулирование"));
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Подписать"));
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ПодготовитьКОтправке"));
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Отправить"));
	ПакетнаяОбработка = СостоянияПакетаОднородно И СтрНайти(Команда.Имя, "Документ") = 0;
	ВыполнитьДействияПоЭДО(НаборДействий, ПакетнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьПодписание(Команда)
	
	ПакетнаяОбработка = СостоянияПакетаОднородно И СтрНайти(Команда.Имя, "Документ") = 0;
	
	ДополнительныеПараметры = Новый Структура;
	Если ПакетнаяОбработка И ЗначениеЗаполнено(ИдентификаторПакета) Тогда
		ДополнительныеПараметры.Вставить("ПакетыДокументов", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторПакета));	
	Иначе
		ДополнительныеПараметры.Вставить("ЭлектронныеДокументы", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка));
	КонецЕсли;
	
	НаборДействий = Новый Соответствие;	
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ОтклонитьПодписание"));
	
	ДополнительныеПараметры.Вставить("ОповещениеУспешногоЗавершения",
		Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект, НаборДействий));
	
	ДополнительныеПараметры.Вставить("НаборДействий", НаборДействий);
	ДополнительныеПараметры.Вставить("ОсновноеДействие", ПредопределенноеЗначение(
			"Перечисление.ДействияПоЭДО.ОтклонитьПодписание"));
				
	Обработчик = Новый ОписаниеОповещения("ВыполнитьДействияПоЭДОПослеВводаСтроки", ИнтерфейсДокументовЭДОКлиент, ДополнительныеПараметры);
	
	ДополнительныеПараметры = ОбщегоНазначенияБЭДКлиент.ПараметрыВводаСтроки();
	ДополнительныеПараметры.ЗаголовокФормы = НСтр("ru = 'Укажите причину отклонения документа'");
	ДополнительныеПараметры.НазваниеКнопкиПоУмолчанию = НСтр("ru = 'Отклонить'");
	ДополнительныеПараметры.Многострочность = Истина;
	ДополнительныеПараметры.Обязательность = Истина;
	ДополнительныеПараметры.КомментарийОбязательностиВвода =
		НСтр("ru = 'Для отказа от подписания документа необходимо указать причину.'");
	ОбщегоНазначенияБЭДКлиент.ПоказатьВводСтрокиБЭД(Обработчик, ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьАннулирование(Команда)
	
	ПакетнаяОбработка = СостоянияПакетаОднородно И СтрНайти(Команда.Имя, "Документ") = 0;
	
	ДополнительныеПараметры = Новый Структура;
	Если ПакетнаяОбработка И ЗначениеЗаполнено(ИдентификаторПакета) Тогда
		ДополнительныеПараметры.Вставить("ПакетыДокументов", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторПакета));	
	Иначе
		ДополнительныеПараметры.Вставить("ЭлектронныеДокументы", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка));
	КонецЕсли;	
	
	НаборДействий = Новый Соответствие;	
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ОтклонитьАннулирование"));
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Подписать"));
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ПодготовитьКОтправке"));
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Отправить"));
	
	ДополнительныеПараметры.Вставить("ОповещениеУспешногоЗавершения",
		Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект, НаборДействий));
			
	ДополнительныеПараметры.Вставить("НаборДействий", НаборДействий);
	ДополнительныеПараметры.Вставить("ОсновноеДействие", ПредопределенноеЗначение(
			"Перечисление.ДействияПоЭДО.ОтклонитьАннулирование"));
				
	Обработчик = Новый ОписаниеОповещения("ВыполнитьДействияПоЭДОПослеВводаСтроки", ИнтерфейсДокументовЭДОКлиент, ДополнительныеПараметры);
	
	ДополнительныеПараметры = ОбщегоНазначенияБЭДКлиент.ПараметрыВводаСтроки();
	ДополнительныеПараметры.ЗаголовокФормы = НСтр("ru = 'Укажите причины отклонения предложения об аннулировании'");
	ДополнительныеПараметры.НазваниеКнопкиПоУмолчанию = НСтр("ru = 'Отклонить аннулирование'");
	ДополнительныеПараметры.Многострочность = Истина;
	ДополнительныеПараметры.Обязательность = Истина;
	ДополнительныеПараметры.КомментарийОбязательностиВвода =
		НСтр("ru = 'Для отклонения предложения об аннулировании документа необходимо указать причину.'");
	ОбщегоНазначенияБЭДКлиент.ПоказатьВводСтрокиБЭД(Обработчик, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура Отклонить(Команда)
	
	ПакетнаяОбработка = СостоянияПакетаОднородно И СтрНайти(Команда.Имя, "Документ") = 0;
	
	ОбъектыДействий = ИнтерфейсДокументовЭДОКлиентСервер.НовыеОбъектыДействийПоЭДО();
	Если ПакетнаяОбработка И ЗначениеЗаполнено(ИдентификаторПакета) Тогда
		ОбъектыДействий.ПакетыДокументов.Добавить(ИдентификаторПакета);
	Иначе
		ОбъектыДействий.ЭлектронныеДокументы.Добавить(Объект.Ссылка);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект, Новый Соответствие);
	ИнтерфейсДокументовЭДОКлиент.ОтклонитьОбъекты(ОбъектыДействий, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура Аннулировать(Команда)
	
	ПакетнаяОбработка = СостоянияПакетаОднородно И СтрНайти(Команда.Имя, "Документ") = 0;
	
	ДополнительныеПараметры = Новый Структура;
	Если ПакетнаяОбработка И ЗначениеЗаполнено(ИдентификаторПакета) Тогда
		ДополнительныеПараметры.Вставить("ПакетыДокументов", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторПакета));	
	Иначе
		ДополнительныеПараметры.Вставить("ЭлектронныеДокументы", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка));
	КонецЕсли;
	
	НаборДействий = Новый Соответствие;	
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Аннулировать"));
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Подписать"));
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ПодготовитьКОтправке"));
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Отправить"));
	
	ДополнительныеПараметры.Вставить("ОповещениеУспешногоЗавершения",
		Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект, НаборДействий));
		
	ДополнительныеПараметры.Вставить("НаборДействий", НаборДействий);
	ДополнительныеПараметры.Вставить("ОсновноеДействие", ПредопределенноеЗначение(
			"Перечисление.ДействияПоЭДО.Аннулировать"));	
	Обработчик = Новый ОписаниеОповещения("ВыполнитьДействияПоЭДОПослеВводаСтроки", ИнтерфейсДокументовЭДОКлиент, ДополнительныеПараметры);
	
	ДополнительныеПараметры = ОбщегоНазначенияБЭДКлиент.ПараметрыВводаСтроки();
	ДополнительныеПараметры.ЗаголовокФормы = НСтр("ru = 'Укажите причины аннулирования документа'");
	ДополнительныеПараметры.НазваниеКнопкиПоУмолчанию = НСтр("ru = 'Аннулировать'");
	ДополнительныеПараметры.Многострочность = Истина;
	ДополнительныеПараметры.Обязательность = Истина;
	ДополнительныеПараметры.КомментарийОбязательностиВвода =
		НСтр("ru = 'Для аннулирования документа необходимо указать причину.'");
	ОбщегоНазначенияБЭДКлиент.ПоказатьВводСтрокиБЭД(Обработчик, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура Завершить(Команда)
		
	ПакетнаяОбработка = СостоянияПакетаОднородно И СтрНайти(Команда.Имя, "Документ") = 0;
	
	ДополнительныеПараметры = Новый Структура;
	Если ПакетнаяОбработка И ЗначениеЗаполнено(ИдентификаторПакета) Тогда
		ДополнительныеПараметры.Вставить("ПакетыДокументов", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторПакета));	
	Иначе
		ДополнительныеПараметры.Вставить("ЭлектронныеДокументы", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка));
	КонецЕсли;
	
	НаборДействий = Новый Соответствие;	
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ЗакрытьПринудительно"));
	
	ДополнительныеПараметры.Вставить("ОповещениеУспешногоЗавершения",
		Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект, НаборДействий));	
	
	ДополнительныеПараметры.Вставить("НаборДействий", НаборДействий);
	ДополнительныеПараметры.Вставить("ОсновноеДействие", ПредопределенноеЗначение(
			"Перечисление.ДействияПоЭДО.ЗакрытьПринудительно"));
				
	Обработчик = Новый ОписаниеОповещения("ВыполнитьДействияПоЭДОПослеВводаСтроки", ИнтерфейсДокументовЭДОКлиент, ДополнительныеПараметры);
	
	ДополнительныеПараметры = ОбщегоНазначенияБЭДКлиент.ПараметрыВводаСтроки();
	ДополнительныеПараметры.ЗаголовокФормы = НСтр("ru = 'Укажите причины принудительного закрытия документа'");
	ДополнительныеПараметры.НазваниеКнопкиПоУмолчанию = НСтр("ru = 'Закрыть принудительно'");
	ДополнительныеПараметры.Многострочность = Истина;
	ДополнительныеПараметры.Обязательность = Истина;
	ДополнительныеПараметры.КомментарийОбязательностиВвода =
		НСтр("ru = 'Для принудительного закрытия документа необходимо указать причину.'");
	ОбщегоНазначенияБЭДКлиент.ПоказатьВводСтрокиБЭД(Обработчик, ДополнительныеПараметры);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВАрхив(Команда)
	
	НаборДействий = Новый Соответствие;	
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ОтправитьВАрхив"));
		
	ПакетнаяОбработка = СостоянияПакетаОднородно И СтрНайти(Команда.Имя, "Документ") = 0;
	ВыполнитьДействияПоЭДО(НаборДействий, ПакетнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьВРаботу(Команда)
	
	НаборДействий = Новый Соответствие;	
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ВернутьВРаботу"));
	
	ПакетнаяОбработка = СостоянияПакетаОднородно И СтрНайти(Команда.Имя, "Документ") = 0;
	ВыполнитьДействияПоЭДО(НаборДействий, ПакетнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Переформировать(Команда)
	ПереформироватьДокумент();
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПовторно(Команда)
	
	НаборДействий = Новый Соответствие;	
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ОтправитьПовторно"));
		
	ПакетнаяОбработка = СостоянияПакетаОднородно И СтрНайти(Команда.Имя, "Документ") = 0;
	ВыполнитьДействияПоЭДО(НаборДействий, ПакетнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонтейнерДокумента(Команда)
	
	ЭлементСхемы = СхемаРегламента.НайтиПоИдентификатору(ИдентификаторТекущегоЭлемента);
	ИнтерфейсДокументовЭДОКлиент.ОткрытьТранспортныйКонтейнерДокумента(ЭлементСхемы.Сообщение, СостояниеЭДО);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуЭлектронногоДокумента(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстВопроса = НСтр("ru = 'Открытие карточки возможно только после записи документа.
									|Записать документ?'");
		Оповещение = Новый ОписаниеОповещения("ОткрытьКарточкуПослеВопроса", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

	Иначе
		ИнтерфейсДокументовЭДОКлиент.ОткрытьКарточкуЭлектронногоДокумента(Объект.Ссылка);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуПослеВопроса(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаписатьДокумент();
		ИнтерфейсДокументовЭДОКлиент.ОткрытьКарточкуЭлектронногоДокумента(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПротоколОбмена(Команда)
	
	ИнтерфейсДокументовЭДОКлиент.ПоказатьПротоколОбмена(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьСостояниеКомандыРучнойПроверкиПодписи(РезультатПроверкиПоМЧД)
	
	Элементы.ПроверкаДоверенностиВыполненаВручнуюКонтекст.Пометка = 
		МашиночитаемыеДоверенностиКлиентСервер.ПроверкаДоверенностиВыполненаВручную(РезультатПроверкиПоМЧД);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПодписей()
	
	СообщениеЭДО = Неопределено;
	ЭлементСхемыИнформацияПолучателя = Неопределено;
	
	ЭлементСхемы = СхемаРегламента.НайтиПоИдентификатору(ИдентификаторТекущегоЭлемента);
	
	Если ЭлементСхемы <> Неопределено Тогда
		СообщениеЭДО = ЭлементСхемы.Сообщение;
		ЭлементСхемыИнформацияПолучателя = ИнтерфейсДокументовЭДОКлиентСервер.НайтиЭлементСхемыИнформацияПолучателя(ЭлементСхемы);
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПослеПроверкиПодписейДокумента", ЭтотОбъект);
	КонтекстДиагностики = ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики();
	
	Если ЗначениеЗаполнено(СообщениеЭДО) И ЭлементСхемыИнформацияПолучателя = Неопределено Тогда
		ЭлектронныеДокументыЭДОКлиент.ПроверитьПодписиСообщения(Оповещение, СообщениеЭДО, КонтекстДиагностики);
	Иначе
		ЭлектронныеДокументыЭДОКлиент.ПроверитьПодписиДокумента(Оповещение, Объект.Ссылка, КонтекстДиагностики);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатаПроверки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбновитьСтраницуПодписей();
		ОжидатьФормированияПредставленияДокумента();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПометкуУдаленияВопрос(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = Неопределено
		Или Ответ.Значение <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьПометкуУдаления();
	ОжидатьФормированияПредставленияДокумента();	
	
	Оповестить(ИнтерфейсДокументовЭДОКлиент.ИмяСобытияОбновленияТекущихДелЭДО(), , ВладелецФормы);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьПометкуУдаления()
	
	Объект.ПометкаУдаления = Не Объект.ПометкаУдаления;
	Записать();
	ПриСозданииЧтенииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиОтображения()
	
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(ИмяФормы, 
		"ОтключитьВыводДопДанных", ОтключитьВыводДопДанных);
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(ИмяФормы, 
		"ОтключитьВыводКопияВерна", ОтключитьВыводКопияВерна);
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(ИмяФормы, 
		"ВыводитьБанковскиеРеквизиты", ВыводитьБанковскиеРеквизиты);
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(ИмяФормы, 
		"ОтключитьВыводСхемыРегламента", ОтключитьВыводСхемыРегламента);
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(ИмяФормы, 
		"ОтключитьТранслитерацию", ОтключитьТранслитерацию);

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиОтображения()
	
	ОтключитьВыводДопДанных = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(ИмяФормы, 
		"ОтключитьВыводДопДанных", Истина);	
	ОтключитьВыводКопияВерна = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(ИмяФормы, 
		"ОтключитьВыводКопияВерна", Истина);	
	ВыводитьБанковскиеРеквизиты = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(ИмяФормы, 
		"ВыводитьБанковскиеРеквизиты", Ложь);	
	ОтключитьВыводСхемыРегламента = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(ИмяФормы, 
		"ОтключитьВыводСхемыРегламента", Ложь);
	ОтключитьТранслитерацию = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(ИмяФормы, 
		"ОтключитьТранслитерацию", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодписиПодписьВернаПредставление.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подписи.ПодписьВерна");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла);	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СхемаРегламента.Имя);
	
	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СхемаРегламента.Ссылка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СхемаРегламента.Доступность");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СхемаРегламентаСтатус.Имя);
	
	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СхемаРегламента.Направление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.НаправленияЭДО.Исходящий;
	
	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СхемаРегламента.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыСообщенийЭДО.Отправлен;
	
	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СхемаРегламента.Направление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.НаправленияЭДО.Входящий;
	
	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СхемаРегламента.ТипЭлементаРегламента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя;
	
	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СхемаРегламента.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыСообщенийЭДО.Утвержден;
	
	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СхемаРегламента.Направление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.НаправленияЭДО.Входящий;
	
	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СхемаРегламента.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыСообщенийЭДО.Получен;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Green);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СхемаРегламентаНаименование.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СхемаРегламентаСтатус.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СхемаРегламента.ТипЭлементаРегламента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СхемаРегламента.Доступность");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ШрифтыСтиля.ЖирныйШрифтБЭД,,,
		Истина, Ложь, Ложь, Ложь, ));
			
	МаршрутыПодписанияБЭД.УстановитьУсловноеОформлениеДереваМаршрута(ЭтотОбъект, "СхемаМаршрутаПодписания");	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияПоУмолчанию()
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ИспользуетсяНесколькоОрганизаций = ИнтеграцияЭДО.ИспользуетсяНесколькоОрганизаций();
		Если ИспользуетсяНесколькоОрганизаций Тогда
			Объект.Организация = ИнтеграцияЭДО.ОрганизацияПоУмолчанию();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	ЕстьПравоИзмененияМЧД = МашиночитаемыеДоверенности.ИмеетсяПравоИзмененияМЧД();
	
	ЕстьПравоВыполненияОбмена = СинхронизацияЭДО.ЕстьПравоВыполненияОбмена();
	
	ИспользуетсяОтложеннаяОтправка = НастройкиЭДО.ОтложеннаяОтправкаЭлектронныхДокументов();
	
	ЗаполнитьДанныеЭлектронногоДокумента();
	
	Если ОшибкаЧтенияXML Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьДанныеПакета();
	
	СформироватьПанельСоставаПакета();
	
	Если Параметры.Свойство("Сообщение") Тогда
		УстановитьИдентификаторТекущегоЭлемента(СхемаРегламента, Параметры.Сообщение);
	Иначе
		ИдентификаторТекущегоЭлемента = СхемаРегламента.ПолучитьЭлементы()[0].ПолучитьИдентификатор();
	КонецЕсли;
	
	ЭлементСхемы = СхемаРегламента.НайтиПоИдентификатору(ИдентификаторТекущегоЭлемента);
	
	РаспознатьДокумент(ЭлементСхемы);
	
	ЗаполнитьПодписи(ЭлементСхемы);
	
	ЗаполнитьТекстСопроводительнойЗаписки(ЭлементСхемы);
	
	НастроитьОформлениеФормы(ЭлементСхемы);
	
	УстановитьВидимостьДоверенности();
	
	УстановитьЗаголовокФормы();
	
	СформироватьПредупреждения();
	
	ВывестиПредставлениеДокументовУчета();
	
	ОбновитьОтображениеМаршрутаПодписания();
	
	УстановитьСвязиПараметровВыбораДоговорКонтрагента();
	
	ПоказатьПредставлениеДокумента(ЭлементСхемы);
	
	УстановитьВидимостьКомандыПоказатьПротоколОбмена();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеЭлектронногоДокумента()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗаполнитьДанныеТекущегоЭлектронногоДокумента();
	ИначеЕсли ЗначениеЗаполнено(Параметры.ПросмотрПодготовленныхДанных) Тогда
		ПросмотрПодготовленныхДанных = Параметры.ПросмотрПодготовленныхДанных;
		НастройкиФормирования = ПросмотрПодготовленныхДанных.НастройкиФормирования;
		ДанныеПредварительногоПросмотра = ИнтерфейсДокументовЭДО.ДанныеПредварительногоПросмотраПоАдресу(
			ПросмотрПодготовленныхДанных.АдресДанных);
		Если НастройкиФормирования.Направление = Перечисления.НаправленияЭДО.Внутренний Тогда
			ЗаполнитьДанныеПредварительногоВнутреннегоДокумента(НастройкиФормирования.НастройкиВнутреннегоЭДО,
				ДанныеПредварительногоПросмотра);
		Иначе
			ЗаполнитьДанныеПредварительногоЭлектронногоДокумента(НастройкиФормирования.НастройкиОтправки,
				ДанныеПредварительногоПросмотра);
		КонецЕсли;
	Иначе
		Основание = Неопределено;
		ВидДокумента = Неопределено;
		Параметры.Свойство("Основание", Основание);
		Параметры.Свойство("ВидДокумента", ВидДокумента);
		Основание = Метаданные.ОпределяемыеТипы.ОснованияЭлектронныхДокументовЭДО.Тип.ПривестиЗначение(Основание); 
		ЗаполнитьДанныеНовогоЭлектронногоДокумента(Основание, ВидДокумента);
		
		Если Параметры.Свойство("ТабличныйДокумент") Тогда
			НаименованиеФайла= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
				Параметры, "НаименованиеФайла", Неопределено);
			
			ДобавитьВложениеИзТабличногоДокумента(Параметры.ТабличныйДокумент, НаименованиеФайла);
			
		КонецЕсли;
		
		Если Параметры.Свойство("ДвоичныеДанныеФайла") 
			 И Параметры.Свойство("НаименованиеФайла") 
			 И Параметры.Свойство("Расширение") Тогда
			
			ДобавитьВложениеИзДвоичныхДанных(Параметры.ДвоичныеДанныеФайла, 
				Параметры.НаименованиеФайла, Параметры.Расширение);
				
		КонецЕсли;
		
		Если Параметры.Свойство("АдресФайла") Тогда
			
			ДанныеФайла = ПолучитьИзВременногоХранилища(Параметры.АдресФайла);
			 
			ДобавитьВложениеИзДвоичныхДанных(ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла), 
				ДанныеФайла.Наименование, ДанныеФайла.Расширение);
				
		КонецЕсли;
		
		Если Параметры.Свойство("АдресОписанияФайла") Тогда
			
			ОписаниеФайла = ПолучитьИзВременногоХранилища(Параметры.АдресОписанияФайла); // См. РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла
			УдалитьИзВременногоХранилища(Параметры.АдресОписанияФайла);
			
			СтруктураФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ОписаниеФайла.ИмяФайла);
			РасширениеБезТочки = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(СтруктураФайла.Расширение);
			ДобавитьВложениеИзДвоичныхДанных(ОписаниеФайла.ДвоичныеДанные, СтруктураФайла.ИмяБезРасширения,
				РасширениеБезТочки);
			ЗаполнитьОбъектПоСодержаниюФайла(ОписаниеФайла);
			
		КонецЕсли;
		
		Если Параметры.Свойство("ВыбранныйФайл") Тогда
			ДобавитьВложениеИзФайлаНаСервере(Параметры.ВыбранныйФайл, Параметры.АдресВХранилище);
		КонецЕсли;
	КонецЕсли;	
	
	ИнтерфейсДокументовЭДО.СоздатьРеквизитыИЭлементыДляПредставленияДокумента(
		ЭтотОбъект, ЭлементСхемыИнформацияОтправителя(ЭтотОбъект));
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеПакета()
	
	КоличествоОтображаемыхДокументовПакета = 3;
	
	СоставПакета.ЗагрузитьЗначения(ПакетыДокументовЭДО.ДокументыПакета(ИдентификаторПакета));
	
	СостоянияДокументовПоЭДО = ПакетыДокументовЭДО.СостоянияДокументовПакета(ИдентификаторПакета);
	СостояниеПакета = ПакетыДокументовЭДО.СостояниеПакета(СостоянияДокументовПоЭДО);
	СостоянияПакетаОднородно = ЗначениеЗаполнено(СостояниеПакета);
	
	ДоступноИзменениеПакета = Истина;
	
	Если ЗначениеЗаполнено(СостоянияДокументовПоЭДО) Тогда
		ДоступноИзменениеПакета = ПакетыДокументовЭДО.ДоступноИзменениеПакета(СостоянияДокументовПоЭДО);
	Иначе
		СостоянияДокументовПоЭДО = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СостояниеЭДО);
		ДоступноИзменениеПакета = ПакетыДокументовЭДО.ДоступноИзменениеПакета(СостоянияДокументовПоЭДО);
	КонецЕсли;
	
	ТребуетсяОднородностьОтвета = СинхронизацияЭДО.ТребуетсяОднородностьОтвета(Объект.ИдентификаторКонтрагента);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПанельСоставаПакета()

	ПакетыДокументовЭДО.СформироватьПанельСоставаПакета(ЭтотОбъект, Элементы.ГруппаСоставПакета,
		КоличествоОтображаемыхДокументовПакета, Перечисления.НаправленияЭДО.Исходящий);

	ПакетыДокументовЭДО.ЗаполнитьПанельСоставаПакета(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеТекущегоЭлектронногоДокумента()

	ДанныеЭлектронногоДокумента = ИнтерфейсДокументовЭДО.ДанныеФормыПросмотраЭлектронногоДокумента(Объект.Ссылка, Ложь);
	
	ВыборкаСостоянияЭДО = ДанныеЭлектронногоДокумента.ВыборкаСостоянияЭДО;
	Если ВыборкаСостоянияЭДО.Следующий() Тогда
		СостояниеЭДО = ВыборкаСостоянияЭДО.Состояние;
	КонецЕсли;
	
	Основания = Новый СписокЗначений;
	ВыборкаОбъектовУчета = ДанныеЭлектронногоДокумента.ВыборкаОбъектовУчета;
	Пока ВыборкаОбъектовУчета.Следующий() Цикл
		ОбъектУчета = ВыборкаОбъектовУчета.ОбъектУчета;
		Основания.Добавить(ОбъектУчета);
	КонецЦикла;
	
	Если СхемаРегламента.ПолучитьЭлементы().Количество() Тогда
		СхемаРегламента.ПолучитьЭлементы().Очистить();
	КонецЕсли;
	
	НастройкиСхемыРегламента = НастройкиСхемыРегламента();
	ИнтерфейсДокументовЭДО.ЗаполнитьСхемуРегламента(НастройкиСхемыРегламента,
		ДанныеЭлектронногоДокумента.ДанныеЭлементовСхемы, СхемаРегламента);
	
	Если Параметры.Свойство("ЭлектронныйДокумент") Тогда
		ИдентификаторТекущегоЭлемента = ИнтерфейсДокументовЭДО.ИдентификаторЭлементаСхемыРегламента(
			СхемаРегламента, Параметры.ЭлектронныйДокумент);
	КонецЕсли;
	
	ИдентификаторТекущегоЭлемента = СхемаРегламента.ПолучитьЭлементы()[0].ПолучитьИдентификатор();
		
	ИдентификаторПакета = ПакетыДокументовЭДО.ИдентификаторПакетаДокумента(Объект.Ссылка);
	
КонецПроцедуры

// Параметры:
//  НастройкиОтправки - См. НастройкиЭДО.НастройкиОтправки
//  ДанныеПредварительногоПросмотра - См. ИнтерфейсДокументовЭДО.ДанныеПредварительногоПросмотраПоАдресу
&НаСервере
Процедура ЗаполнитьДанныеПредварительногоЭлектронногоДокумента(НастройкиОтправки, ДанныеПредварительногоПросмотра)
	
	ДанныеЭлементовСхемы = ИнтерфейсДокументовЭДО.НовыеДанныеЭлементовСхемы();	
	
	Если ЭлектронныеДокументыЭДО.ПрикладныеВидыДокументов().Найти(НастройкиОтправки.ВидДокумента) <> Неопределено Тогда
		ТипДокумента = Перечисления.ТипыДокументовЭДО.Прикладной;		
	Иначе
		ТипДокумента = НастройкиОтправки.ВидДокумента.ТипДокумента;		
	КонецЕсли;
	
	СвойстваДокументовПоФорматам = Неопределено;
	
	МодульОбменСГИСЭПД = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
	КонецЕсли;
	
	Для Каждого ОписаниеСообщения Из ДанныеПредварительногоПросмотра.ОписанияСообщений Цикл
	
		ДанныеСообщения = ОписаниеСообщения.Данные;
		СодержаниеСообщения = ДанныеСообщения.Содержание;
		АдресОписанияСообщения = ПоместитьВоВременноеХранилище(ОписаниеСообщения, УникальныйИдентификатор);
		
		Если ОписаниеСообщения.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя
			Или (МодульОбменСГИСЭПД <> Неопределено И МодульОбменСГИСЭПД.ЭтоТитулОтправителя(ОписаниеСообщения.ТипЭлементаРегламента)) Тогда
			Если ЗначениеЗаполнено(СодержаниеСообщения) Тогда
				Объект.НомерДокумента = СодержаниеСообщения.НомерДокумента;
				Объект.ДатаДокумента = СодержаниеСообщения.ДатаДокумента;
				Объект.СуммаДокумента = СодержаниеСообщения.СуммаДокумента;
				Объект.ТипРегламента = СодержаниеСообщения.ТипРегламента;
			Иначе
				Объект.ТипРегламента = Перечисления.ТипыРегламентовЭДО.Неформализованный;
			КонецЕсли;
			
			Объект.ИдентификаторДокументооборота = ЭлектронныеДокументыЭДО.НовыйИдентификаторДокументооборота();
			Объект.ВидДокумента = НастройкиОтправки.ВидДокумента;
			Объект.ИдентификаторОрганизации = НастройкиОтправки.ИдентификаторОтправителя;
			Объект.ИдентификаторКонтрагента = НастройкиОтправки.ИдентификаторПолучателя;
			Объект.Организация = НастройкиОтправки.Отправитель;
			Объект.Контрагент  = НастройкиОтправки.Получатель;
			Объект.ДоговорКонтрагента = НастройкиОтправки.Договор;
			Объект.СпособОбмена = НастройкиОтправки.СпособОбмена;
			Объект.ОбменБезПодписи = НастройкиОтправки.ОбменБезПодписи;
			Объект.ТребуетсяИзвещение = НастройкиОтправки.ТребуетсяИзвещениеОПолучении;
			Объект.ТребуетсяПодтверждение = НастройкиОтправки.ТребуетсяОтветнаяПодпись;
			Объект.ВыгружатьДополнительныеСведения = НастройкиОтправки.ВыгружатьДополнительныеСведения;
			Объект.МаршрутПодписания = НастройкиОтправки.МаршрутПодписания;
			Объект.ВидПодписи = Перечисления.ВидыЭлектронныхПодписей.УсиленнаяКвалифицированная;
			Объект.ФорматОсновногоТитула = НастройкиОтправки.Формат;
			
			МаршрутРедактируетсяПриСоздании = НастройкиОтправки.МаршрутПодписания = МаршрутыПодписанияБЭД.МаршрутУказыватьПриСоздании();
			
			Если ЗначениеЗаполнено(ДанныеПредварительногоПросмотра.СвязующийОбъектУчета) Тогда
				Объект.ИдентификаторСвязи = Строка(ДанныеПредварительногоПросмотра.СвязующийОбъектУчета.УникальныйИдентификатор());
			КонецЕсли;
			
			Если Объект.МаршрутПодписания = МаршрутыПодписанияБЭД.МаршрутУказыватьПриСоздании() Тогда
				Объект.МаршрутПодписания = Неопределено;
			КонецЕсли;
			
			СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.НеСформирован;
			
			НастройкиСхемыРегламента = НастройкиСхемыРегламента();
			Если ЗначениеЗаполнено(СодержаниеСообщения)
				И СодержаниеСообщения.Свойство("СвойстваДокументовПоФорматам", СвойстваДокументовПоФорматам) Тогда
				ЗаполнитьЗначенияСвойств(
					НастройкиСхемыРегламента.СвойстваДокументовПоФорматам, СвойстваДокументовПоФорматам);
			КонецЕсли;
				
			Основания.ЗагрузитьЗначения(ДанныеПредварительногоПросмотра.Основания);
			ЭлектронныеДокументыЭДО.ЗагрузитьИдентификаторыСвязанныхОбъектовУчета(Объект,
				ДанныеПредварительногоПросмотра.СвязанныеОбъектыУчета);
			
			ЗаполнитьДанныеЭлементаСхемыИнформацияОтправителя(ДанныеЭлементовСхемы, ТипДокумента, АдресОписанияСообщения);
		Иначе
			ЗаполнитьДанныеЭлементаСхемыДополнительногоСообщения(
				ДанныеЭлементовСхемы, ТипДокумента, ОписаниеСообщения.ТипЭлементаРегламента, АдресОписанияСообщения);
		КонецЕсли;	
			
	КонецЦикла;
	
	ИнтерфейсДокументовЭДО.ЗаполнитьСхемуРегламента(
		НастройкиСхемыРегламента, ДанныеЭлементовСхемы, СхемаРегламента);
		
		ЭлементСхемы = ЭлементСхемыИнформацияОтправителя(ЭтотОбъект);
	ЭлементСхемы.РаспознаниеВыполнено = Истина;
	Если ТипДокумента = Перечисления.ТипыДокументовЭДО.ДоговорныйДокумент Тогда
		
		ЭлементСхемы.Распознан = Ложь;
		ДанныеДокумента = ДанныеСообщения.Документ;
		
		Если Обработки.ФорматДоговорныйДокументИнформацияОтправителяЭДО.ЭтоФайлФормата(ДанныеДокумента.ИмяФайла) Тогда
			
			ЭлементСхемы.Распознан = Истина;
			
		Иначе
			
			Расширение = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ДанныеДокумента.ИмяФайла);
			ДлинаРасширенияСТочкой = СтрДлина(Расширение) + 1;
			ИмяФайлаБезРасширения =
				Лев(ДанныеДокумента.ИмяФайла, СтрДлина(ДанныеДокумента.ИмяФайла) - ДлинаРасширенияСТочкой);
			
			ДобавитьВложениеИзДвоичныхДанных(ДанныеДокумента.ДвоичныеДанные, ИмяФайлаБезРасширения, Расширение);
		
		КонецЕсли;
		
	Иначе
		ЭлементСхемы.Распознан = Истина;
	КонецЕсли;
	ЭлементСхемы.ФормированиеПоОбъектуУчета = Истина;
	
КонецПроцедуры

// Параметры:
//  НастройкиВнутреннегоЭДО - См. ИнтерфейсДокументовЭДО.НастройкиВнутреннегоЭДО
//  ДанныеПредварительногоПросмотра - См. ИнтерфейсДокументовЭДО.ДанныеПредварительногоПросмотраПоАдресу
&НаСервере
Процедура ЗаполнитьДанныеПредварительногоВнутреннегоДокумента(НастройкиВнутреннегоЭДО, ДанныеПредварительногоПросмотра)
	
	ДанныеЭлементовСхемы = ИнтерфейсДокументовЭДО.НовыеДанныеЭлементовСхемы();	
	
	Для Каждого ОписаниеСообщения Из ДанныеПредварительногоПросмотра.ОписанияСообщений Цикл
		
		СодержаниеСообщения = ОписаниеСообщения.Данные.Содержание;
		
		Если ОписаниеСообщения.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя Тогда
		
			Объект.ВидДокумента = НастройкиВнутреннегоЭДО.ВидДокумента;
			Объект.ИдентификаторДокументооборота = ЭлектронныеДокументыЭДО.НовыйИдентификаторДокументооборота();
			Объект.НомерДокумента = СодержаниеСообщения.НомерДокумента;
			Объект.ДатаДокумента = СодержаниеСообщения.ДатаДокумента;
			Объект.Организация = НастройкиВнутреннегоЭДО.Организация;
			Объект.ОбменБезПодписи = Ложь;
			Объект.ТипРегламента = СодержаниеСообщения.ТипРегламента;
			Объект.ТребуетсяИзвещение = Ложь;
			Объект.ТребуетсяПодтверждение = Ложь;
			Объект.ВыгружатьДополнительныеСведения = Ложь;
			Объект.МаршрутПодписания = НастройкиВнутреннегоЭДО.МаршрутПодписания;
			
			МаршрутРедактируетсяПриСоздании =
				НастройкиВнутреннегоЭДО.МаршрутПодписания = МаршрутыПодписанияБЭД.МаршрутУказыватьПриСоздании();
			
			Если Объект.МаршрутПодписания = МаршрутыПодписанияБЭД.МаршрутУказыватьПриСоздании() Тогда
				Объект.МаршрутПодписания = Неопределено;
			КонецЕсли;
			
			Объект.ВидПодписи = НастройкиВнутреннегоЭДО.ВидПодписи;
			Объект.СпособОбмена = Перечисления.СпособыОбменаЭД.Внутренний;
			
			СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.НеСформирован;
			
			Основания.ЗагрузитьЗначения(ДанныеПредварительногоПросмотра.Основания);
			
			АдресОписанияСообщения = ПоместитьВоВременноеХранилище(ОписаниеСообщения, УникальныйИдентификатор);
			
			ЗаполнитьДанныеЭлементаСхемыИнформацияОтправителя(ДанныеЭлементовСхемы,
				Перечисления.ТипыДокументовЭДО.Внутренний, АдресОписанияСообщения);
		КонецЕсли;
	
	КонецЦикла;
	
	НастройкиСхемыРегламента = НастройкиСхемыРегламента();
	ИнтерфейсДокументовЭДО.ЗаполнитьСхемуРегламента(
		НастройкиСхемыРегламента, ДанныеЭлементовСхемы, СхемаРегламента);
	
	ЭлементСхемы = ЭлементСхемыИнформацияОтправителя(ЭтотОбъект);
	ЭлементСхемы.РаспознаниеВыполнено = Истина;
	ЭлементСхемы.Распознан = Истина;
	ЭлементСхемы.ФормированиеПоОбъектуУчета = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеНовогоЭлектронногоДокумента(Основание, ВидДокумента)
	
	ТипДокумента = Перечисления.ТипыДокументовЭДО.Прочее;
	
	Если ЗначениеЗаполнено(Основание) Тогда
		Основания.Добавить(Основание);
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЭлектронныйДокументВходящийЭДО")
			Или ТипЗнч(Основание) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящийЭДО") Тогда
			СвойстваДокумента = ЭлектронныеДокументыЭДО.СвойстваДокумента(Основание, "Организация, Контрагент, ДоговорКонтрагента");
			Объект.Организация = СвойстваДокумента.Организация;
			Объект.Контрагент = СвойстваДокумента.Контрагент;
			Объект.ДоговорКонтрагента = СвойстваДокумента.ДоговорКонтрагента;
		ИначеЕсли ТипЗнч(Основание) = Тип("СправочникСсылка.МЧД003") Тогда
			РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "ДатаВыдачи, НомерДоверенности");
			Объект.НомерДокумента = РеквизитыОснования.НомерДоверенности;
			Объект.ДатаДокумента = РеквизитыОснования.ДатаВыдачи;
			ОписаниеОбъектаУчета = ЭлектронныеДокументыЭДО.ОписаниеОбъектаУчета(Основание, ВидДокумента);
			ЗаполнитьПоОписаниюОбъектаУчета(ОписаниеОбъектаУчета, ТипДокумента);
		Иначе
			РеквизитыОснования = ИнтеграцияЭДО.ОписаниеОснованияЭлектронногоДокумента(Основание);
			Объект.Организация = РеквизитыОснования.Организация;
			Объект.Контрагент = РеквизитыОснования.Контрагент;
			Объект.НомерДокумента = РеквизитыОснования.Номер;
			Объект.ДатаДокумента = РеквизитыОснования.Дата;
			Объект.СуммаДокумента = РеквизитыОснования.СуммаДокумента;
			
			ОписаниеОбъектаУчета = ЭлектронныеДокументыЭДО.ОписаниеОбъектаУчета(Основание, ВидДокумента);
			ЗаполнитьПоОписаниюОбъектаУчета(ОписаниеОбъектаУчета, ТипДокумента);
		КонецЕсли;
		
	Иначе
		ЗаполнитьЗначенияПоУмолчанию();
	КонецЕсли;
	
	// Если не было предварительной подготовки данных, то документ не может иметь тип "Договорный документ"
	Если ТипДокумента = Перечисления.ТипыДокументовЭДО.ДоговорныйДокумент Тогда
		Объект.ВидДокумента = ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(Перечисления.ТипыДокументовЭДО.Прочее);
	КонецЕсли;
	
	Если ЭлектронныеДокументыЭДО.ТипыДокументовПроизвольногоФормата().Найти(ТипДокумента) = Неопределено Тогда
		ТипДокумента = Перечисления.ТипыДокументовЭДО.Прочее;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ВидДокумента) Тогда
		Объект.ВидДокумента = ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(ТипДокумента);
	КонецЕсли;
	
	ПриИзмененииКлючевыхРеквизитов();
	
	Объект.ИдентификаторДокументооборота = ЭлектронныеДокументыЭДО.НовыйИдентификаторДокументооборота();
	
	Если ТипДокумента <> Перечисления.ТипыДокументовЭДО.МашиночитаемаяДоверенность Тогда
		СвязанныеОбъектыУчета = Новый Массив;
		Для Каждого ЭлементСпискаОснований Из Основания Цикл
			СвязанныеОбъектыУчета.Добавить(ЭлементСпискаОснований.Значение);
		КонецЦикла;
		ЭлектронныеДокументыЭДО.ЗагрузитьИдентификаторыСвязанныхОбъектовУчета(Объект, СвязанныеОбъектыУчета);
	КонецЕсли;
	
	Объект.ТипРегламента = Перечисления.ТипыРегламентовЭДО.Неформализованный;
	
	Если Не ЗначениеЗаполнено(Объект.ДатаДокумента) Тогда
		Объект.ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.НеСформирован;
	
	НастройкиСхемыРегламента = НастройкиСхемыРегламента();
	ДанныеЭлементовСхемы = ИнтерфейсДокументовЭДО.НовыеДанныеЭлементовСхемы();
	ЗаполнитьДанныеЭлементаСхемыИнформацияОтправителя(ДанныеЭлементовСхемы, ТипДокумента);
	
	ИнтерфейсДокументовЭДО.ЗаполнитьСхемуРегламента(
		НастройкиСхемыРегламента, ДанныеЭлементовСхемы, СхемаРегламента);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОписаниюОбъектаУчета(ОписаниеОбъектаУчета, ТипДокумента)
	
	КоличествоДокументовЭДО = ОписаниеОбъектаУчета.Количество();
	
	Если КоличествоДокументовЭДО = 0 Тогда
		Возврат;
	ИначеЕсли КоличествоДокументовЭДО = 1 Тогда
		ОписаниеДокументаЭДО = ОписаниеОбъектаУчета[0];
		Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.Организация = ОписаниеДокументаЭДО.Организация;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Объект.Контрагент = ОписаниеДокументаЭДО.Контрагент;
		КонецЕсли;
		Объект.ДоговорКонтрагента = ОписаниеДокументаЭДО.Договор;
		ТипДокумента = ОписаниеДокументаЭДО.ТипДокумента;
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Организация", Объект.Организация);
	СтруктураПоиска.Вставить("Контрагент", Объект.Контрагент);
	НайденныеСтроки = ОписаниеОбъектаУчета.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() Тогда
		ДоговорыКонтрагентов = Новый Массив;
		Для каждого СтрокаОписания Из НайденныеСтроки Цикл
			ДоговорыКонтрагентов.Добавить(СтрокаОписания.Договор);
		КонецЦикла;
		ДоговорыКонтрагентов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ДоговорыКонтрагентов);
		Если ДоговорыКонтрагентов.Количество() = 1 Тогда
			Объект.ДоговорКонтрагента = ДоговорыКонтрагентов[0];
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОбъектПоСодержаниюФайла(ОписаниеФайла);
	
	Содержание = ФорматыЭДО.ПрочитатьСодержаниеДокумента(ОписаниеФайла);
	Если Не ЗначениеЗаполнено(Содержание) Тогда
		Возврат;
	КонецЕсли;
	
	Объект.НомерДокумента = Содержание.НомерДокумента;
	Объект.ДатаДокумента = Содержание.ДатаДокумента;
	Объект.СуммаДокумента = Содержание.СуммаДокумента;
	
КонецПроцедуры

&НаСервере
Функция НастройкиСхемыРегламента()
	
	НастройкиСхемы = РегламентыЭДО.НовыеНастройкиСхемыРегламента();
	НастройкиСхемы.ТипРегламента = Объект.ТипРегламента;
	НастройкиСхемы.СпособОбмена = Объект.СпособОбмена;
	НастройкиСхемы.ТребуетсяИзвещение = Объект.ТребуетсяИзвещение;
	НастройкиСхемы.ТребуетсяПодтверждение = Объект.ТребуетсяПодтверждение;

	Возврат НастройкиСхемы;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеЭлементаСхемыИнформацияОтправителя(ДанныеЭлементовСхемы, ТипДокумента, АдресОписанияСообщения="")
	
	ДанныеЭлемента = ДанныеЭлементовСхемы.Добавить();
	ДанныеЭлемента.ВидДокумента = Объект.ВидДокумента;
	ДанныеЭлемента.ТипДокумента = ТипДокумента;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
		Если МодульОбменСГИСЭПД.ЭтоДокументЭПД(ТипДокумента) Тогда
			ДанныеЭлемента.ТипЭлементаРегламента = МодульОбменСГИСЭПД.ПервыйТитулДокумента(ТипДокумента);
			ДанныеЭлемента.Наименование = МодульОбменСГИСЭПД.ПредставлениеИнформацииОтправителя(
				ТипДокумента, Объект.НомерДокумента, Объект.ДатаДокумента);	
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеЭлемента.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя;
	
	Если ТипДокумента = Перечисления.ТипыДокументовЭДО.Внутренний Тогда
		ДанныеЭлемента.Направление = Перечисления.НаправленияЭДО.Внутренний;
	ИначеЕсли ЭлектронныеДокументыЭДО.ЭтоТипДокументаИнтеркампани(ТипДокумента) Тогда
		ДанныеЭлемента.Направление = Перечисления.НаправленияЭДО.Интеркампани;
	Иначе
		ДанныеЭлемента.Направление = Перечисления.НаправленияЭДО.Исходящий;
	КонецЕсли;
	
	ДанныеЭлемента.Статус = Перечисления.СтатусыСообщенийЭДО.НеСформирован;
	ДанныеЭлемента.АдресОписанияСообщения = АдресОписанияСообщения;
	
	ДанныеЭлемента.Наименование = ИнтерфейсДокументовЭДО.ПредставлениеИнформацииОтправителя(
		Объект.НомерДокумента, Объект.ДатаДокумента);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеЭлементаСхемыДополнительногоСообщения(ДанныеЭлементовСхемы, ТипДокумента,
	ТипЭлементаРегламента, АдресОписанияСообщения)
	
	Если ПустаяСтрока(АдресОписанияСообщения) Тогда
		Возврат;
	КонецЕсли;
		
	ДанныеЭлемента = ДанныеЭлементовСхемы.Добавить();
	ДанныеЭлемента.ВидДокумента = Объект.ВидДокумента;
	ДанныеЭлемента.ТипДокумента = ТипДокумента;
	ДанныеЭлемента.ТипЭлементаРегламента = ТипЭлементаРегламента;
	Если ТипДокумента = Перечисления.ТипыДокументовЭДО.Внутренний Тогда
		ДанныеЭлемента.Направление = Перечисления.НаправленияЭДО.Внутренний;
	ИначеЕсли ЭлектронныеДокументыЭДО.ЭтоТипДокументаИнтеркампани(ТипДокумента) Тогда
		ДанныеЭлемента.Направление = Перечисления.НаправленияЭДО.Интеркампани;
	Иначе
		ДанныеЭлемента.Направление = Перечисления.НаправленияЭДО.Исходящий;
	КонецЕсли;
	ДанныеЭлемента.Статус = Перечисления.СтатусыСообщенийЭДО.НеСформирован;
	ДанныеЭлемента.АдресОписанияСообщения = АдресОписанияСообщения;
	ДанныеЭлемента.Наименование = Строка(ДанныеЭлемента.ТипЭлементаРегламента);
	
КонецПроцедуры

&НаСервере
Процедура РаспознатьДокумент(ЭлементСхемы)
	
	Если Объект.ПометкаУдаления Тогда
		Возврат;	
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИСПолучениеВходящих");
		МодульПодсистемы.ПриРаспознанииДокумента(ЭлементСхемы.ВидСообщения, ЭлементСхемы);
		Если ЭлементСхемы.Распознан = Истина Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
		МодульПодсистемы.ПриРаспознанииДокумента(ЭлементСхемы.ВидСообщения, ЭлементСхемы);
		Если ЭлементСхемы.Распознан = Истина Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлементСхемы.РаспознаниеВыполнено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлементСхемы.ТипДокумента = Перечисления.ТипыДокументовЭДО.ДоговорныйДокумент
		И Не Обработки.ФорматДоговорныйДокументИнформацияОтправителяЭДО.ЭтоФайлФормата(ЭлементСхемы.ИмяФайла) Тогда
		ЭлементСхемы.РаспознаниеВыполнено = Истина;
		ЭлементСхемы.ФормированиеПоОбъектуУчета = Истина;
		ЭлементСхемы.Распознан = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ЭлементСхемы.ТипЭлементаРегламента =
		Перечисления.ТипыЭлементовРегламентаЭДО.ДопСведенияПоРезультатамПриемки Тогда
		ЭлементСхемы.РаспознаниеВыполнено = Истина;
		ЭлементСхемы.Распознан = Истина;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭлементСхемы.АдресФайла) И Не ЗначениеЗаполнено(Объект.Ссылка) 
			И НРег(ЭлементСхемы.РасширениеФайла) = "zip" Тогда
		
		ОписаниеФайла = РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла();
		ОписаниеФайла.ИмяФайла = ЭлементСхемы.ИмяФайла;
		ОписаниеФайла.ДвоичныеДанные = ПолучитьИзВременногоХранилища(ЭлементСхемы.АдресФайла);
		ДанныеМЧД = МашиночитаемыеДоверенности.ДанныеДоверенностиИзФайлаОбмена(ОписаниеФайла);
		Если ФорматыЭДО.ЭтоМЧД(ДанныеМЧД) Тогда
			Объект.ВидДокумента = ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(Перечисления.ТипыДокументовЭДО.МашиночитаемаяДоверенность);
			ЭлементСхемы.ВидДокумента = Объект.ВидДокумента;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭлементСхемы.Сообщение) Тогда 
		РезультатРаспознания = ЭлектронныеДокументыЭДО.РаспознатьСообщение(ЭлементСхемы.Сообщение);
	ИначеЕсли ПолучитьФункциональнуюОпцию("ЗапретитьФормированиеФормализованныхЭДИзФайлов") Тогда
		Возврат;
	ИначеЕсли ЗначениеЗаполнено(ЭлементСхемы.АдресФайла) И Не ЗначениеЗаполнено(Объект.Ссылка) 
			И НРег(ЭлементСхемы.РасширениеФайла) = "xml" Тогда
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ЭлементСхемы.АдресФайла);
		РезультатРаспознания = КонвертацияЭДО.ПараметрыФайлаПроизвольногоДокумента(ДвоичныеДанные,, Истина);
		Если ЗначениеЗаполнено(РезультатРаспознания) Тогда
			ЗаполнитьРеквизитыПоФормализованномуДокументу(ДвоичныеДанные, РезультатРаспознания, ЭлементСхемы);
			Если Не ЭлементСхемы.Распознан Тогда
				ЭлементСхемы.РаспознаниеВыполнено = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	ЭлементСхемы.РаспознаниеВыполнено = Истина;
	ЭлементСхемы.Распознан = ЗначениеЗаполнено(РезультатРаспознания);
	Если ЭлементСхемы.Распознан Тогда
		ЭлементСхемы.ФормированиеПоОбъектуУчета = ЭлектронныеДокументыЭДО.ЭтоСтандартныйФормат(
			РезультатРаспознания.ИсходныйФормат)  И Основания.Количество() > 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПоФормализованномуДокументу(ДвоичныеДанные, РезультатРаспознания, ЭлементСхемы)
	
	Если Не РезультатРаспознания.Свойство("ИдентификаторДокумента") 
		Или Не РезультатРаспознания.Свойство("ТипДокумента") Тогда
			Возврат;
	КонецЕсли;
	
	ОписаниеФайла = РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла();
	ОписаниеФайла.ИмяФайла = РезультатРаспознания.ИдентификаторДокумента + ".xml";
	ОписаниеФайла.ДвоичныеДанные = ДвоичныеДанные;
	ОписаниеОшибки = "";
	
	СтандартныеТипыДокументов = ЭлектронныеДокументыЭДО.СтандартныеТипыДокументов();
	СтандартныеТипыДокументов.Вставить("Торг12Продавец", Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная);
	СтандартныеТипыДокументов.Вставить("АктИсполнитель", Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот);
	СтандартныеТипыДокументов.Вставить("СоглашениеОбИзмененииСтоимостиОтправитель", Перечисления.ТипыДокументовЭДО.СоглашениеОбИзмененииСтоимости);
	ТипДокумента = Неопределено;
	Если Не СтандартныеТипыДокументов.Свойство(РезультатРаспознания.ТипДокумента, ТипДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭлектронныеДокументыЭДО.ТипДокументаПоддерживаетЗагрузкуИзФайлаВФормализованномВиде(ТипДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаОтправки = ФорматыЭДО.ИдентификаторыДатаНомерДокументаПоДаннымФайла(ОписаниеФайла, ОписаниеОшибки);
	Если НастройкаОтправки = Неопределено Тогда
		ОшибкаЧтенияXML = ЗначениеЗаполнено(ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	НастройкиОбмена = НастройкиОтправкиЭДО.НастройкиОбменаПоИдентификаторам(ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(ТипДокумента),
			НастройкаОтправки.ИдентификаторОрганизации, НастройкаОтправки.ИдентификаторКонтрагента);
	Если НастройкиОбмена = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, НастройкиОбмена, ,"ИдентификаторОрганизации, ИдентификаторКонтрагента");
	ЗаполнитьЗначенияСвойств(ЭлементСхемы, Объект);
	Объект.МаршрутПодписания = МаршрутыПодписанияБЭД.МаршрутОднойДоступнойПодписью();
	
	ТипРегламентаПоИмени = Неопределено;
	Если РезультатРаспознания.Свойство("ТипРегламента") Тогда
		ТипРегламентаПоИмени = ОбщегоНазначенияБЭД.ЗначениеПеречисленияПоИмени(РезультатРаспознания.ТипРегламента,
			Метаданные.Перечисления.ТипыРегламентовЭДО, Ложь);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипРегламентаПоИмени) Тогда
		Объект.ТипРегламента = ТипРегламентаПоИмени;
	Иначе
		Объект.ТипРегламента = Перечисления.ТипыРегламентовЭДО.УПД;
	КонецЕсли;
	Если РезультатРаспознания.Свойство("СуммаДокумента") Тогда
		Объект.СуммаДокумента = РезультатРаспознания.СуммаДокумента;
	КонецЕсли;
	ПриИзмененииКлючевыхРеквизитов();
	ЗаполнитьЗначенияСвойств(Объект, НастройкаОтправки, "ДатаДокумента, НомерДокумента");
	ЗаполнитьЗначенияСвойств(Объект, НастройкиОбмена, "ИдентификаторОрганизации, ИдентификаторКонтрагента");
	ЭлементСхемы.ИмяФайла = ОписаниеФайла.ИмяФайла;
	ЭлементСхемы.ПредставлениеСформировано = Ложь;
	ЭлементСхемы.ФормированиеПоОбъектуУчета = Ложь;
	ЭлементСхемы.РаспознаниеВыполнено = Истина;
	ЭлементСхемы.Распознан = Истина;
	СуществующийДокумент = ЭлектронныеДокументыЭДО.ИсходящийДокументПоИдентификаторуФайла(
		РезультатРаспознания.ИдентификаторДокумента, Объект.Ссылка);
	Если ЗначениеЗаполнено(СуществующийДокумент) Тогда
		Возврат;
	КонецЕсли;
	ФайлСформированВ1С = ФорматыЭДО.ФайлСформированВ1С(ОписаниеФайла);
	Если ФайлСформированВ1С = Ложь Тогда
		Подписант = ФорматыЭДО.СведенияОПодписанте(ОписаниеФайла, ОписаниеОшибки);
		Если Не ФорматыЭДО.ПодписантЗаполнен(Подписант, Объект.Организация, ОписаниеОшибки)
			Или Не ФорматыЭДО.ВУчетнойЗаписиЕстьСертификатПодписанта(Подписант, ОписаниеОшибки) Тогда
			ФорматыЭДО.СброситьСведенияОПодписанте(ОписаниеФайла);
		КонецЕсли;
		Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
			ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки);
			ЭлементСхемы.АдресФайла = ПоместитьВоВременноеХранилище(ОписаниеФайла.ДвоичныеДанные, УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОформлениеФормы(ЭлементСхемы)
	
	ЗагрузитьНастройкиОтображения();
	
	УстановитьОформлениеНастроекФормы(ЭлементСхемы);
	
	НастроитьВидимостьИНаименованиеДействийПоСостояниюЭДО();
	
	ИнтерфейсДокументовЭДО.НастроитьКомандуПереформировать(ЭтотОбъект, ЭлементСхемы);
	
	Элементы.ГруппаДекорацииПометкиУдаления.Видимость = Объект.ПометкаУдаления;
	
	ИнтерфейсДокументовЭДО.НастроитьСопроводительнуюЗаписку(ЭтотОбъект, ЭлементСхемы);
	
	Элементы.ГруппаМаршрутПодписания.Видимость = СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.НеСформирован
				Или СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание;
	
	Элементы.ОткрытьНастройкиФормирования.Видимость = (Объект.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО
		Или Объект.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
		И ЕстьПравоВыполненияОбмена
		И (СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание
			Или СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправка)
			И СостояниеЭДО <> Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонением 
			И СостояниеЭДО <> Перечисления.СостоянияДокументовЭДО.ЗакрытПринудительно
			И ЗначениеЗаполнено(Объект.Ссылка);	
	
	Элементы.ОткрытьНастройкиОтправки.Видимость = Элементы.ОткрытьНастройкиФормирования.Видимость;
									
	Если Не ЭлементСхемыИнформацияОтправителя(ЭтотОбъект).Распознан
		И СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.НеСформирован Тогда
		Элементы.ГруппаШапкаПроизвольногоДокумента.Видимость = Истина;
		Элементы.МаршрутПодписанияДокумента.Видимость = Ложь;
	ИначеЕсли (Не ЭлементСхемыИнформацияОтправителя(ЭтотОбъект).Распознан
			ИЛИ ЭлементСхемыИнформацияОтправителя(ЭтотОбъект).ТипДокумента = Перечисления.ТипыДокументовЭДО.МашиночитаемаяДоверенность)
		 И ЭлементСхемыИнформацияОтправителя(ЭтотОбъект).ТипДокумента <> Перечисления.ТипыДокументовЭДО.Прикладной
		 И СостояниеЭДО <> Перечисления.СостоянияДокументовЭДО.НеСформирован 
		 И Не ЭлектронныеДокументыЭДО.ЭтоВнутреннийВидДокумента(Объект.ВидДокумента) Тогда
		Элементы.ГруппаШапкаПраво.Видимость = СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание;
		Элементы.ГруппаШапкаЛево.Видимость = СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание;
		Элементы.МаршрутПодписанияДокумента.Видимость = Ложь;
		Элементы.ГруппаШапкаПроизвольногоДокумента.Видимость = Истина;
		
	Иначе
		Элементы.ГруппаШапкаПроизвольногоДокумента.Видимость = Ложь;
		Элементы.МаршрутПодписанияДокумента.Видимость = Не ЗначениеЗаполнено(Объект.Ссылка) И МаршрутРедактируетсяПриСоздании;
	КонецЕсли;
	
	Элементы.ПодменюДобавитьДокументыВПакет.Видимость = СоставПакета.Количество() <= 1
		И ДоступноИзменениеПакета
		И Объект.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО;
		
	ЗаполнитьЗаголовокСтраницыПодписей(ЭлементСхемы);
	
	Если Подписи.НайтиСтроки(Новый Структура("ПодписьВерна", Ложь)).Количество() = 0 Тогда
		Элементы.СтраницаПодписиИСтатусы.Картинка = Новый Картинка;
	Иначе
		Элементы.СтраницаПодписиИСтатусы.Картинка = БиблиотекаКартинок.Предупреждение;
	КонецЕсли;

	СостояниеДокументаПодробное = ЭлектронныеДокументыЭДО.СостояниеДокументаПодробное(Объект.Ссылка);
	
	Если ЗначениеЗаполнено(СостояниеДокументаПодробное.Комментарий) Тогда
		ШаблонПредставления = "%1 (%2)";
		СостояниеДокументаПодробное = ЭлектронныеДокументыЭДО.СостояниеДокументаПодробное(Объект.Ссылка);
		ПредставлениеСостояния = СтрШаблон(ШаблонПредставления, СостояниеДокументаПодробное.Значение,
			СостояниеДокументаПодробное.Комментарий);
	ИначеЕсли ЗначениеЗаполнено(СостояниеДокументаПодробное.Значение) Тогда		
		ПредставлениеСостояния = СостояниеДокументаПодробное.Значение;
	Иначе
		ПредставлениеСостояния = ЭлектронныеДокументыЭДО.НачальноеСостояниеДокумента();
	КонецЕсли;
		
	Если ЗначениеЗаполнено(СостояниеДокументаПодробное.Комментарий) Тогда
		КомментарийСостояния =  СостояниеДокументаПодробное.Комментарий;
		Элементы.ПоказатьКомментарийСостояния.Видимость = Истина;
	КонецЕсли;
	
	Если ЭлектронныеДокументыЭДО.ЭтоВнутреннийВидДокумента(Объект.ВидДокумента) Тогда
		Элементы.СхемаРегламента.Видимость = Ложь;
		Элементы.ОтображатьСхемуРегламента.Видимость = Ложь;			
		Элементы.ПодменюНастройкаОтображения.Видимость = Ложь;
		Элементы.ОткрытьКонтейнерДокумента.Видимость = Ложь;		
	КонецЕсли;	
	
	ОбновитьДеревоМаршрутаПодписания();	

	Если Не СостоянияПакетаОднородно И ЗначениеЗаполнено(ИдентификаторПакета) Тогда
		ОбщегоНазначенияБЭД.ПереместитьЭлемент(Элементы, 
			Элементы.ГруппаСостояние.Имя, Элементы.ГруппаДокумент.Имя,
			Элементы.ГруппаШапкаПроизвольногоДокумента.Имя);
	Иначе
		ОбщегоНазначенияБЭД.ПереместитьЭлемент(Элементы, 
			Элементы.ГруппаСостояние.Имя, 
			Элементы.ГруппаШапка.Имя);
	КонецЕсли;

	Если Не ПолучитьФункциональнуюОпцию("ЗапретитьФормированиеФормализованныхЭДИзФайлов")
		И (СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание	
		Или Не ЗначениеЗаполнено(Объект.Ссылка))
		И (Объект.ТипРегламента = Перечисления.ТипыРегламентовЭДО.Формализованный
			Или Объект.ТипРегламента = Перечисления.ТипыРегламентовЭДО.УПД) Тогда
		Элементы.ЗагрузитьСДиска.Видимость = Истина;
	Иначе
		Элементы.ЗагрузитьСДиска.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаголовокСтраницыПодписей(ЭлементСхемы)

	Если СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание Тогда
		ТекстКоличестваПодписей = МаршрутыПодписанияБЭД.ПредставлениеПрогрессаПодписания(
			ЭлементСхемы.Сообщение, Подписи.Количество())
	ИначеЕсли Подписи.Количество() > 0 Тогда
		ТекстКоличестваПодписей = "(" + Подписи.Количество() + ")";
	Иначе
		ТекстКоличестваПодписей = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстКоличестваПодписей) Тогда
		Элементы.СтраницаПодписиИСтатусы.Заголовок = СтрШаблон(НСтр("ru = 'Подписи %1'"), ТекстКоличестваПодписей);
	Иначе
		Элементы.СтраницаПодписиИСтатусы.Заголовок = НСтр("ru = 'Подписи'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьИНаименованиеДействийПоСостояниюЭДО()
	
	ЕстьПравоОбработкиДокументов = ЭлектронныеДокументыЭДО.ЕстьПравоОбработкиДокументов();

	Элементы.СоздатьПроизвольныйДокумент.Видимость = ЕстьПравоОбработкиДокументов;
	Элементы.Перенаправить.Видимость = ЕстьПравоОбработкиДокументов;
	Элементы.ОбновитьСостояниеЭД.Видимость = ЕстьПравоОбработкиДокументов;
	
	ДействияНаЭтапеДляДокумента = ЭлектронныеДокументыЭДО.ДействияПоСостояниюДокумента(СостояниеЭДО, Объект);
	
	Если СостоянияПакетаОднородно И ЗначениеЗаполнено(Объект.Ссылка) И ЭтоПакет() Тогда
		ДействияНаЭтапе = ЭлектронныеДокументыЭДО.ДействияПоСостояниюДокумента(СостояниеПакета, Объект);
	Иначе
		ДействияНаЭтапе = ДействияНаЭтапеДляДокумента;
	КонецЕсли;
	
	ЭтоИнтеркампани = ЭлектронныеДокументыЭДО.ИспользуемыеВидыДокументовИнтеркампани().Найти(Объект.ВидДокумента) <> Неопределено;
	
	Элементы.ЗаписатьДокумент.Видимость = Не ЗначениеЗаполнено(Объект.Ссылка)
		Или (Не ЭлектронныеДокументыЭДО.ЭтоВнутреннийВидДокумента(Объект.ВидДокумента))
		И СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание
		И ЭлектронныеДокументыЭДО.ЕстьПравоОбработкиДокументов();
	
	Элементы.Подписать.Видимость = Ложь;
	Элементы.ПодписатьДокумент.Видимость = Ложь;
	Элементы.Отправить.Видимость = Ложь;
	Элементы.ОтправитьДокумент.Видимость = Ложь;
	Элементы.ПодписатьОтправить.Видимость = Ложь;
	Элементы.ПодписатьОтправитьДокумент.Видимость = Ложь;
		
	Если ЕстьДействиеПоЭДО(ДействияНаЭтапе, Перечисления.ДействияПоЭДО.Подписать)
		И ЕстьДействиеПоЭДО(ДействияНаЭтапе, Перечисления.ДействияПоЭДО.Отправить)
		И Не ИспользуетсяОтложеннаяОтправка
		И Не ЭтоИнтеркампани Тогда
		Элементы.ПодписатьОтправить.Видимость = Истина;
	ИначеЕсли ЕстьДействиеПоЭДО(ДействияНаЭтапе, Перечисления.ДействияПоЭДО.Подписать) Тогда
		Элементы.Подписать.Видимость = Истина;
	ИначеЕсли ЕстьДействиеПоЭДО(ДействияНаЭтапе, Перечисления.ДействияПоЭДО.Отправить)
	 	Или ЕстьДействиеПоЭДО(ДействияНаЭтапе, Перечисления.ДействияПоЭДО.ПодготовитьКОтправке)Тогда
		Элементы.Отправить.Видимость = Истина;
	КонецЕсли;
	
	Если ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокумента, Перечисления.ДействияПоЭДО.Подписать)
		И ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокумента, Перечисления.ДействияПоЭДО.Отправить) Тогда
		Элементы.ПодписатьОтправитьДокумент.Видимость = Истина;
	ИначеЕсли ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокумента, Перечисления.ДействияПоЭДО.Подписать) Тогда
		Элементы.ПодписатьДокумент.Видимость = Истина;
	ИначеЕсли ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокумента, Перечисления.ДействияПоЭДО.Отправить)
		Или ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокумента, Перечисления.ДействияПоЭДО.ПодготовитьКОтправке) Тогда
		Элементы.ОтправитьДокумент.Видимость = Истина;
	КонецЕсли;
	
	Элементы.ПринятьАннулирование.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапе,
		Перечисления.ДействияПоЭДО.ПринятьАннулирование);
	Элементы.ПринятьАннулированиеДокумент.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокумента,
		Перечисления.ДействияПоЭДО.ПринятьАннулирование);
		
	Элементы.ОтклонитьАннулирование.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапе,
		Перечисления.ДействияПоЭДО.ОтклонитьАннулирование);
	Элементы.ОтклонитьАннулированиеДокумент.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокумента,
		Перечисления.ДействияПоЭДО.ОтклонитьАннулирование);
	
	Элементы.ОтклонитьПодписание.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапе,
		Перечисления.ДействияПоЭДО.ОтклонитьПодписание);
	Элементы.ОтклонитьПодписаниеДокумент.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокумента,
		Перечисления.ДействияПоЭДО.ОтклонитьПодписание);	
		
	Элементы.Отклонить.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапе, Перечисления.ДействияПоЭДО.Отклонить);
	Элементы.ОтклонитьДокумент.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокумента,
		Перечисления.ДействияПоЭДО.Отклонить);

	Элементы.Аннулировать.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапе, Перечисления.ДействияПоЭДО.Аннулировать);
	Элементы.АннулироватьДокумент.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокумента,
		Перечисления.ДействияПоЭДО.Аннулировать);

	Элементы.Завершить.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапе, Перечисления.ДействияПоЭДО.ЗакрытьПринудительно);
	Элементы.ЗавершитьДокумент.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокумента,
		Перечисления.ДействияПоЭДО.ЗакрытьПринудительно);

	Элементы.ОтправитьВАрхив.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапе, Перечисления.ДействияПоЭДО.ОтправитьВАрхив);
	Элементы.ОтправитьВАрхивДокумент.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокумента,
		Перечисления.ДействияПоЭДО.ОтправитьВАрхив);

	Элементы.ВернутьВРаботу.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапе, Перечисления.ДействияПоЭДО.ВернутьВРаботу);
	Элементы.ВернутьВРаботуДокумент.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокумента,
		Перечисления.ДействияПоЭДО.ВернутьВРаботу);

	Элементы.ОтправитьПовторно.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапе,
		Перечисления.ДействияПоЭДО.ОтправитьПовторно);
	Элементы.ОтправитьПовторноДокумент.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокумента,
		Перечисления.ДействияПоЭДО.ОтправитьПовторно);
	
	СформироватьИзвещение = ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокумента,
		Перечисления.ДействияПоЭДО.СформироватьИзвещение);
	
	ПакетСоставной = СоставПакета.Количество() > 1;
	
	Элементы.ДействияСДокументом.Видимость = ПакетСоставной И СостоянияПакетаОднородно 
		И Не ЭлектронныеДокументыЭДО.ВыполнениеДействийДляОтдельногоДокументаПакетаЗапрещеноПоСостоянию(СостояниеЭДО);

	Элементы.Подписать.Заголовок = ИнтерфейсДокументовЭДО.ПредставлениеКомандыПодписать(ПакетСоставной, СостоянияПакетаОднородно);
	Элементы.Отправить.Заголовок = ИнтерфейсДокументовЭДО.ПредставлениеКомандыОтправить(ПакетСоставной, СостоянияПакетаОднородно);
	Элементы.ПодписатьОтправить.Заголовок = ИнтерфейсДокументовЭДО.ПредставлениеКомандыПодписатьИОтправить(ПакетСоставной, СостоянияПакетаОднородно);
	Элементы.ПринятьАннулирование.Заголовок = ИнтерфейсДокументовЭДО.ПредставлениеКомандыПринятьАннулирование(ПакетСоставной, СостоянияПакетаОднородно);
	Элементы.ОтклонитьАннулирование.Заголовок = ИнтерфейсДокументовЭДО.ПредставлениеКомандыОтклонитьАннулирование(ПакетСоставной, СостоянияПакетаОднородно);		
	Элементы.Отклонить.Заголовок = ИнтерфейсДокументовЭДО.ПредставлениеКомандыОтклонить(ПакетСоставной, СостоянияПакетаОднородно);
	Элементы.ОтклонитьПодписание.Заголовок = ИнтерфейсДокументовЭДО.ПредставлениеКомандыОтклонитьПодписание(ПакетСоставной, СостоянияПакетаОднородно);
	Элементы.Переформировать.Заголовок = ИнтерфейсДокументовЭДО.ПредставлениеКомандыПереформировать(ПакетСоставной, СостоянияПакетаОднородно);
	Элементы.Аннулировать.Заголовок = ИнтерфейсДокументовЭДО.ПредставлениеКомандыАннулировать(ПакетСоставной, СостоянияПакетаОднородно);
	Элементы.ОтправитьВАрхив.Заголовок = ИнтерфейсДокументовЭДО.ПредставлениеКомандыОтправитьВАрхив(ПакетСоставной, СостоянияПакетаОднородно);
	Элементы.ВернутьВРаботу.Заголовок = ИнтерфейсДокументовЭДО.ПредставлениеКомандыВернутьВРаботу(ПакетСоставной, СостоянияПакетаОднородно);
	Элементы.ОтправитьПовторно.Заголовок = ИнтерфейсДокументовЭДО.ПредставлениеКомандыОтправитьПовторно(ПакетСоставной, СостоянияПакетаОднородно);
	
КонецПроцедуры

&НаСервере
Функция ЕстьДействиеПоЭДО(ДоступныеДействия, ДействиеПоЭДО)
	Возврат ИнтерфейсДокументовЭДО.ЕстьДействиеПоЭДО(ДоступныеДействия, ДействиеПоЭДО);
КонецФункции

&НаСервере
Функция ЭтоПакет()
	Возврат ЗначениеЗаполнено(ИдентификаторПакета);
КонецФункции 

&НаКлиенте
Процедура ВыполнитьДействияПоЭДО(НаборДействий, ПакетнаяОбработка)

	Если Модифицированность Тогда
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("ЭтоНовыйДокумент", Не ЗначениеЗаполнено(Объект.Ссылка));
		
		Записать(ПараметрыЗаписи);
	КонецЕсли;
	
	ПараметрыВыполненияДействийПоЭДО = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	ПараметрыВыполненияДействийПоЭДО.НаборДействий = НаборДействий;
	
	Если ПакетнаяОбработка И ЗначениеЗаполнено(ИдентификаторПакета) Тогда		
		ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ПакетыДокументов.Добавить(ИдентификаторПакета);
	Иначе
		ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ЭлектронныеДокументы.Добавить(Объект.Ссылка);
	КонецЕсли; 
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеУспешногоЗавершения",
		Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект, НаборДействий)); 
	ДополнительныеПараметры.Вставить("ПараметрыВыполненияДействийПоЭДО", ПараметрыВыполненияДействийПоЭДО);	

	Оповещение = 
		Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ИнтерфейсДокументовЭДОКлиент, ДополнительныеПараметры);
	
	ИнтерфейсДокументовЭДОКлиент.НачатьВыполнениеДействийПоЭДО(Оповещение, ПараметрыВыполненияДействийПоЭДО);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьРезультатРучнойПроверкиПодписиНаСервере(ДанныеПодписи)
	МашиночитаемыеДоверенности.ЗаписатьРезультатРучнойПроверкиПодписи(ДанныеПодписи);
	ОбновитьСтраницуПодписей();
КонецПроцедуры

&НаСервере
Процедура СхемаРегламентаПослеАктивизацииСтрокиНаСервере()
	
	ЭлементСхемы = СхемаРегламента.НайтиПоИдентификатору(ИдентификаторТекущегоЭлемента);
	
	ЗаполнитьПодписи(ЭлементСхемы);
	
	УстановитьВидимостьДоверенности();
	
	ЗаполнитьЗаголовокСтраницыПодписей(ЭлементСхемы);
	
	ЗаполнитьТекстСопроводительнойЗаписки(ЭлементСхемы);
	
	ИнтерфейсДокументовЭДО.НастроитьСопроводительнуюЗаписку(ЭтотОбъект, ЭлементСхемы);
	
	ПоказатьПредставлениеДокумента(ЭлементСхемы);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоверенности()  
	
	Если Подписи.НайтиСтроки(Новый Структура("ЭтоПодписьПоДоверенности", Истина)).Количество() = 0 Тогда
		Элементы.ПодписиДоверенностьПредставление.Видимость = Ложь;
	Иначе
		Элементы.ПодписиДоверенностьПредставление.Видимость = Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПоказатьПредставлениеДокумента(ЭлементСхемыРегламента)
	
	Элементы.ТекущийДокументPDF.Видимость = Ложь;
	// Если не отображаем "ТекущийДокументPDF", то на странице "СтраницаФайл" должен быть хотя бы один видимый элемент,
	//  чтобы страница корректно переключалась.
	Элементы.ДекорацияПустая.Видимость = Истина;
	
	Если Объект.ПометкаУдаления Тогда
		ПодготовитьПредставлениеФайла(ЭлементСхемыРегламента);
		УстановитьСтраницуПредставления(ЭлементСхемыРегламента);
		Возврат;
	КонецЕсли;
	
	РаспознатьДокумент(ЭлементСхемыРегламента);
	
	Если ЭлементСхемыРегламента.Распознан Или ЭлементСхемыРегламента.ТипДокумента = Перечисления.ТипыДокументовЭДО.Прикладной 
		Или ЭлементСхемыРегламента.Направление = Перечисления.НаправленияЭДО.Внутренний Тогда
		ПараметрыВизуализацииДокумента = ИнтерфейсДокументовЭДО.НовыеПараметрыВизуализацииДокумента();
		ПараметрыВизуализацииДокумента.ВыводитьБанковскиеРеквизиты = ВыводитьБанковскиеРеквизиты;
		ПараметрыВизуализацииДокумента.ВыводитьДопДанные = Не ОтключитьВыводДопДанных;
		ПараметрыВизуализацииДокумента.ВыводитьКопияВерна = Не ОтключитьВыводКопияВерна;
	
		ФормированиеПредставления = ИнтерфейсДокументовЭДО.ЗапуститьФормированиеПредставленияДанныхДокумента(
			ЭлементСхемыРегламента, УникальныйИдентификатор, ПараметрыВизуализацииДокумента,
			ЭлементСхемыРегламента.АдресОписанияСообщения);
		Элементы.ГруппаРаботаСФайлом.Видимость = Ложь;
		ОбновитьПредставлениеДокумента(ИдентификаторТекущегоЭлемента);
	ИначеЕсли ЗначениеЗаполнено(ЭлементСхемыРегламента.Сообщение) Тогда
		
		ПроверятьДоступностьВыводаПДФ_А3 = Ложь;
		ПодготовитьПредставлениеФайла(ЭлементСхемыРегламента);
		ДанныеПроштамповки = ИнтерфейсДокументовЭДО.ПроштампованныйФайлPDF(ЭлементСхемыРегламента.Сообщение,
			УникальныйИдентификатор, ПроверятьДоступностьВыводаПДФ_А3);
		ФормированиеПредставления = ДанныеПроштамповки.ДлительнаяОперация;
		Если ДанныеПроштамповки.ИспользоватьПросмотрПроштампованногоФайла Тогда
			ОбновитьПредставлениеДокумента(ИдентификаторТекущегоЭлемента);
		Иначе
			УстановитьСтраницуПредставления(ЭлементСхемыРегламента);
		КонецЕсли;
	Иначе
		ПодготовитьПредставлениеФайла(ЭлементСхемыРегламента);
		УстановитьСтраницуПредставления(ЭлементСхемыРегламента);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция КоличествоПрисоединенныхФайлов()
	
	ВладелецПрисоединенныхФайлов = ВладелецПрисоединенныхФайлов();
	
	Если Не ЗначениеЗаполнено(ВладелецПрисоединенныхФайлов) Тогда
		Возврат 0;
	КонецЕсли;
	
	Файлы = Новый Массив;
	
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(ВладелецПрисоединенныхФайлов, Файлы);
	
	Возврат Файлы.Количество();
	
КонецФункции

&НаСервере
Функция ВладелецПрисоединенныхФайлов()
	
	Возврат ?(Основания.Количество() > 0, Основания[0].Значение, Неопределено);
	
КонецФункции

&НаСервере
Процедура ПодготовитьПредставлениеФайла(ЭлементСхемыРегламента)
	
	Элементы.ГруппаРаботаСФайлом.Видимость = Истина;
	ФормированиеПредставления = Неопределено;
	
	РедактированиеЗапрещено = ЭлементСхемыРегламента.Статус = Перечисления.СтатусыСообщенийЭДО.Подписан
		Или ЭлементСхемыРегламента.Статус = Перечисления.СтатусыСообщенийЭДО.Отправлен
		Или ЭлементСхемыРегламента.Статус = Перечисления.СтатусыСообщенийЭДО.ПодготовленКОтправке
		Или ЭлементСхемыРегламента.ТипДокумента = Перечисления.ТипыДокументовЭДО.ДоговорныйДокумент;
	
	Если РедактированиеЗапрещено И ЭлементСхемыРегламента.ПредставлениеСформировано Тогда
		ИмяФайла = ЭлементСхемыРегламента.ИмяФайла;
		
		Элементы.НадписьИмяФайла.Гиперссылка = Истина;
		Элементы.НадписьИмяФайла.ЦветТекста = ЦветаСтиля.ЦветГиперссылкиБЭД;
		Элементы.ГруппаРедактированиеФайла.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	ЭлементСхемыРегламента.ИмяРеквизита = "Файл";
	ЭлементСхемыРегламента.ПредставлениеСформировано = Истина;
		
	Если ЗначениеЗаполнено(ЭлементСхемыРегламента.ПрисоединенныйФайл)Тогда
		Элементы.ГруппаКомандДобавитьЗаменить.Видимость = Ложь;
		Элементы.ДобавитьВложениеИзФайлаНаДискеОдиночная.Видимость = Ложь;
	ИначеЕсли КоличествоПрисоединенныхФайлов() > 0 Тогда
		Элементы.ГруппаКомандДобавитьЗаменить.Видимость = Истина;
		Элементы.ДобавитьВложениеИзФайлаНаДискеОдиночная.Видимость = Ложь;
	Иначе
		Элементы.ГруппаКомандДобавитьЗаменить.Видимость = Ложь;
		Элементы.ДобавитьВложениеИзФайлаНаДискеОдиночная.Видимость = Истина;
	КонецЕсли;
	
	ДанныеФайла = Новый Структура;
	РазмерФайла = Неопределено;
	Если ЗначениеЗаполнено(ЭлементСхемыРегламента.ПрисоединенныйФайл) Тогда
		ПараметрыДанныхФайла = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
		ПараметрыДанныхФайла.ИдентификаторФормы = УникальныйИдентификатор;
		ПараметрыДанныхФайла.ВызыватьИсключение = Ложь;
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(ЭлементСхемыРегламента.ПрисоединенныйФайл, ПараметрыДанныхФайла);
		Если ДанныеФайла <> Неопределено Тогда
			ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
			Если Не ДанныеФайла.ПометкаУдаления И ДвоичныеДанныеФайла = Неопределено Тогда
				ЭлементСхемыРегламента.ПредставлениеСформировано = Ложь; // Если данных нет, нечего формировать
			КонецЕсли;
		Иначе
			ЭлементСхемыРегламента.ПредставлениеСформировано = Ложь;
		КонецЕсли;
		РазмерФайла = ДанныеФайла.Размер;
	ИначеЕсли ЗначениеЗаполнено(ЭлементСхемыРегламента.АдресФайла) Тогда
		ДанныеФайла.Вставить("ИмяФайла", ЭлементСхемыРегламента.ИмяФайла);
		ДанныеФайла.Вставить("Расширение", ЭлементСхемыРегламента.РасширениеФайла);
		ДанныеФайла.Вставить("ФайлРедактируется", Ложь);
		ДанныеФайла.Вставить("ФайлРедактируетТекущийПользователь", Ложь);
	Иначе
		ИмяФайла = НСтр("ru = '<отсутствует>'");
		КартинкаФайла = 0;
		Элементы.НадписьИмяФайла.Гиперссылка = Ложь;
		Элементы.НадписьИмяФайла.ЦветТекста = WebЦвета.Кирпичный;
		Элементы.РедактироватьФайл.Доступность = Ложь;
		Элементы.ЗавершитьРедактированиеФайла.Доступность = Ложь;
		Элементы.ОтменитьРедактированиеФайла.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	
	ИмяФайла = РаботаСФайламиБЭДКлиентСервер.ПредставлениеФайлаСРазмеромВКилобайтах(ДанныеФайла.ИмяФайла, РазмерФайла);
	ЭлементСхемыРегламента.ИмяФайла = ИмяФайла;
	
	КартинкаФайла = РаботаСФайламиБЭДКлиентСервер.ИндексКартинкиПоРасширениюФайла(ДанныеФайла.Расширение);
	
	Элементы.НадписьИмяФайла.Гиперссылка = Истина;
	Элементы.НадписьИмяФайла.ЦветТекста = ЦветаСтиля.ЦветГиперссылкиБЭД;
	
	Если РедактированиеЗапрещено Тогда
		Элементы.ГруппаРедактированиеФайла.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаРедактированиеФайла.Видимость = Истина;
	
	Если ДанныеФайла.ФайлРедактируется Тогда
		ТекстРедактируетФайл = СтрШаблон(НСтр("ru = 'Файл захвачен на редактирование пользователем %1'"),
			ДанныеФайла.Редактирует);
		Элементы.НадписьРедактируетФайл.ЦветТекста = ЦветаСтиля[?(ДанныеФайла.ФайлРедактируетТекущийПользователь,
			"ФайлЗанятыйТекущимПользователем", "ТекстЗапрещеннойЯчейкиЦвет")];
		Элементы.НадписьРедактируетФайл.Видимость = Истина;
	Иначе
		ТекстРедактируетФайл = "";
		Элементы.НадписьРедактируетФайл.Видимость = Ложь;
	КонецЕсли;
	
	ИмяЗаголовкаКнопкиДобавить = НСтр("ru = 'Заменить на файл'");
	Если ЗначениеЗаполнено(ЭлементСхемыРегламента.ПрисоединенныйФайл) > 0 Тогда
		Элементы.ГруппаКомандДобавитьЗаменить.Заголовок = ИмяЗаголовкаКнопкиДобавить;
	Иначе
		Элементы.ДобавитьВложениеИзФайлаНаДискеОдиночная.Заголовок = ИмяЗаголовкаКнопкиДобавить;
	КонецЕсли;
	
	Элементы.РедактироватьФайл.Доступность = НЕ ДанныеФайла.ФайлРедактируется
		И (ЗначениеЗаполнено(ЭлементСхемыРегламента.ПрисоединенныйФайл)
			ИЛИ ЗначениеЗаполнено(ЭлементСхемыРегламента.АдресФайла));
	
	Элементы.ЗавершитьРедактированиеФайла.Доступность = ДанныеФайла.ФайлРедактируется
		И ДанныеФайла.ФайлРедактируетТекущийПользователь;
	
	Элементы.ОтменитьРедактированиеФайла.Доступность = ДанныеФайла.ФайлРедактируется
		И ДанныеФайла.ФайлРедактируетТекущийПользователь;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеДокумента(ИдентификаторТекущегоЭлементаИзКонтекста)
	
	// Если идентификаторы не совпадают, значит визуализация неактуальна.
	Если ИдентификаторТекущегоЭлемента <> ИдентификаторТекущегоЭлементаИзКонтекста Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементСхемыРегламента = СхемаРегламента.НайтиПоИдентификатору(ИдентификаторТекущегоЭлемента);
		
	Если ФормированиеПредставления = Неопределено
		ИЛИ ФормированиеПредставления.Статус = "Ошибка" Тогда
		
		УстановитьВидимостьСтандартнойСтраницыСодержимого();
		ПодготовитьПредставлениеОшибки(ЭлементСхемыРегламента);
		Элементы.СтраницыПредставленийДокумента.ТекущаяСтраница = Элементы.СтраницаОшибка;
		
	ИначеЕсли ФормированиеПредставления.Статус = "Выполнено" Тогда
		
		ПодготовитьПредставлениеДокумента(ЭлементСхемыРегламента);
		УстановитьСтраницуПредставления(ЭлементСхемыРегламента);
		
	ИначеЕсли ФормированиеПредставления.Статус = "Выполняется" Тогда
		
		УстановитьВидимостьСтандартнойСтраницыСодержимого();
		ПодготовитьПредставлениеОжидания(ЭлементСхемыРегламента);
		Элементы.СтраницыПредставленийДокумента.ТекущаяСтраница = Элементы.СтраницаОжидание;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьПредставлениеДокумента(ЭлементСхемыРегламента)
	
	РезультатФормирования = ПолучитьИзВременногоХранилища(ФормированиеПредставления.АдресРезультата);
	
	Если РезультатФормирования = Неопределено Тогда
		ПодготовитьПредставлениеОшибки(ЭлементСхемыРегламента);
		Возврат;
	ИначеЕсли РезультатФормирования.ПредставлениеДокумента = Неопределено И ЭлементСхемыРегламента.Распознан Тогда
		ПодготовитьПредставлениеФайла(ЭлементСхемыРегламента);
		Возврат;
	ИначеЕсли РезультатФормирования.ПредставлениеДокумента = Неопределено И Не ЭлементСхемыРегламента.Распознан Тогда
		ПодготовитьПредставлениеФайла(ЭлементСхемыРегламента);
		Если ЗначениеЗаполнено(РезультатФормирования.ТекстОшибки) Тогда
			ПодготовитьПредставлениеОшибки(ЭлементСхемыРегламента);
			ЭлементСхемыРегламента.ИмяРеквизита = "Ошибка";
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ЭлементСхемыРегламента.ТипЭлементаРегламента =
		Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя Тогда
		ЭлементСхемыРегламента.ИмяРеквизита = Элементы.ТабличныйДокументИнформацияОтправителя.ПутьКДанным;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
		Если МодульОбменСГИСЭПД.ЭтоТитулОтправителя(ЭлементСхемыРегламента.ТипЭлементаРегламента) Тогда
			ЭлементСхемыРегламента.ИмяРеквизита = Элементы.ТабличныйДокументИнформацияОтправителя.ПутьКДанным;	
		КонецЕсли;
	КонецЕсли;
	
	ПредставлениеДокумента = РезультатФормирования.ПредставлениеДокумента;
	
	Если ТипЗнч(ПредставлениеДокумента) = Тип("ДвоичныеДанные") Тогда
		
		Отказ = Ложь;
		
		Попытка
			ТекущийДокументPDF.Прочитать(ПредставлениеДокумента.ОткрытьПотокДляЧтения());
		Исключение
			Отказ = Истина;
			ИнтерфейсДокументовЭДО.ЗаписатьОшибкуВизуализацииPDFВЖурналРегистрации(ИнформацияОбОшибке());
		КонецПопытки;
		
		Если Отказ Тогда
			ПодготовитьПредставлениеОшибки(ЭлементСхемыРегламента);
			ЭлементСхемыРегламента.ИмяРеквизита = "Ошибка";
		Иначе
			ЭлементСхемыРегламента.ИмяРеквизита = "Файл";
			Элементы.ТекущийДокументPDF.Видимость = Истина;
			Элементы.ДекорацияПустая.Видимость    = Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ПредставлениеДокумента) = Тип("Строка") Тогда
		ЭлементСхемыРегламента.ИмяРеквизита = Элементы.HTMLДокументИнформацияОтправителя.ПутьКДанным;
		ЭлектронныеДокументыЭДО.ДополнитьСтрокуHTMLШтампамиПодписей(ПредставлениеДокумента, ЭлементСхемыРегламента.Сообщение);
		ЭтотОбъект[ЭлементСхемыРегламента.ИмяРеквизита] = ПредставлениеДокумента;
	Иначе
		ЭлектронныеДокументыЭДО.ДополнитьТабличныйДокументШтампамиПодписей(ПредставлениеДокумента, ЭлементСхемыРегламента.Сообщение);
		ЭтотОбъект[ЭлементСхемыРегламента.ИмяРеквизита] = ПредставлениеДокумента;
	КонецЕсли;
	
	ЭлементСхемыРегламента.ПредставлениеСформировано = Истина;
	ФормированиеПредставления = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьПредставлениеОшибки(ЭлементСхемыРегламента)
	ФормированиеПредставления = Неопределено;
	ЭлементСхемыРегламента.ПредставлениеСформировано = Ложь;
КонецПроцедуры

&НаСервере
Процедура ПодготовитьПредставлениеОжидания(ЭлементСхемыРегламента)
	ЭлементСхемыРегламента.ПредставлениеСформировано = Ложь;
КонецПроцедуры

&НаСервере
Процедура УстановитьСтраницуПредставления(ЭлементСхемыРегламента)
	
	Если ЭлементСхемыРегламента.ИмяРеквизита = Элементы.HTMLДокументИнформацияОтправителя.ПутьКДанным Тогда
		
		УстановитьВидимостьСтандартнойСтраницыСодержимого(Ложь);
		
	Иначе
		
		УстановитьВидимостьСтандартнойСтраницыСодержимого();
		
		Элементы.СтраницыПредставленийДокумента.ТекущаяСтраница = 
			Элементы["Страница" + ЭлементСхемыРегламента.ИмяРеквизита];
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтандартнойСтраницыСодержимого(Показывать = Истина)
	
	Элементы.СтраницаСодержимоеHTMLДокумент.Видимость = Не Показывать;
	Элементы.СтраницаСодержимое.Видимость = Показывать;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьИдентификаторТекущегоЭлемента(ЭлементСхемыРодитель, Сообщение, Установлен = Ложь)
	
	Если Установлен Тогда
		Возврат;
	КонецЕсли;
	
	КоллекцияЭлементовСхемы = ЭлементСхемыРодитель.ПолучитьЭлементы();
	Если КоллекцияЭлементовСхемы.Количество() = 0 Тогда
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(Сообщение) Тогда
		ИдентификаторТекущегоЭлемента = КоллекцияЭлементовСхемы[0].ПолучитьИдентификатор();
		Установлен = Истина;
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементСхемы Из КоллекцияЭлементовСхемы Цикл
		Если ЭлементСхемы.Сообщение = Сообщение Тогда
			ИдентификаторТекущегоЭлемента = ЭлементСхемы.ПолучитьИдентификатор();
			Установлен = Истина;
		Иначе
			УстановитьИдентификаторТекущегоЭлемента(ЭлементСхемы, Сообщение, Установлен);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодписи(ЭлементСхемы)
	
	Если Подписи.Количество() Тогда
		Подписи.Очистить();
	КонецЕсли;
	
	Если Объект.ОбменБезПодписи
		ИЛИ Не ЗначениеЗаполнено(ЭлементСхемы.ПрисоединенныйФайл) Тогда
		Возврат;
	КонецЕсли;
	
	УстановленныеПодписи = ИнтерфейсДокументовЭДО.УстановленныеПодписи(ЭлементСхемы, Объект.ТипРегламента);
	Для Каждого СтрокаПодпись Из УстановленныеПодписи Цикл
		НоваяСтрока = Подписи.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПодпись);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПодпись.СвойстваПодписи);
		НоваяСтрока.НомерСтроки = Подписи.Индекс(НоваяСтрока);
		НоваяСтрока.ВыводКартинки = ?(НоваяСтрока.ПодписьВерна, 0, 1);
	КонецЦикла;
	ИнтерфейсДокументовЭДО.ЗаполнитьПредставлениеСостоянияПодписей(Подписи);
	
	Элементы.ПодписиВыводКартинки.Видимость = Подписи.Итог("ВыводКартинки") = 1;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТекстСопроводительнойЗаписки(ЭлементСхемы);
	СопроводительнаяЗаписка = ЭлементСхемы.ДополнительнаяИнформация;	
КонецПроцедуры	

&НаСервере
Процедура УстановитьСвязиПараметровВыбораДоговорКонтрагента();
	
	ИнтерфейсДокументовЭДО.УстановитьСвязиПараметровВыбораДоговорКонтрагента(
		Элементы.Договор, Элементы.Организация.ПутьКДанным, Элементы.Контрагент.ПутьКДанным);

КонецПроцедуры	

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	Если СоставПакета.Количество() > 1 Тогда
		Заголовок = ПакетыДокументовЭДО.ЗаголовокОтображенияПакетов(СоставПакета.Количество());
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ВидДокумента) Тогда
		Заголовок = ПакетыДокументовЭДО.ЗаголовокНовогоПроизвольногоДокумента();
		Возврат;
	КонецЕсли;
	
	ПараметрыПредставления = ЭлектронныеДокументыЭДО.НовыеСвойстваПредставленияДокумента();
	ПараметрыПредставления.ВидДокумента = Объект.ВидДокумента;
	ПараметрыПредставления.НомерДокумента = Объект.НомерДокумента;
	ПараметрыПредставления.ДатаДокумента = Объект.ДатаДокумента;
	
	Заголовок = ЭлектронныеДокументыЭДО.ПредставлениеДокументаПоСвойствам(ПараметрыПредставления, Объект.Ссылка.Пустая());
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеНастроекФормы(ЭлементСхемы)
	
	Элементы.ОтображатьДополнительнуюИнформацию.Пометка = НЕ ОтключитьВыводДопДанных;
	Элементы.ОтображатьОбластьКопияВерна.Пометка = НЕ ОтключитьВыводКопияВерна;
	
	Элементы.ОтображатьСхемуРегламента.Пометка = НЕ ОтключитьВыводСхемыРегламента;
	Элементы.СхемаРегламента.Видимость = НЕ ОтключитьВыводСхемыРегламента;
	
	ВыводитьПодсказкуПДФ_А3 = Ложь;
	ВыводитьКомандуВыгрузкиВФорматеPDF = Истина;
	
	Если ЭлементСхемы.ТипДокумента = Перечисления.ТипыДокументовЭДО.СчетНаОплату Тогда
		
		ВыводитьБанковскиеРеквизиты = Истина;
		Элементы.ОтображатьБанковскиеРеквизиты.Видимость = Ложь;
		
	ИначеЕсли ЭлементСхемы.ФормированиеПоОбъектуУчета Тогда
		
		Элементы.ОтображатьБанковскиеРеквизиты.Видимость = Истина;
		Элементы.ТранслитироватьИмяФайла.Видимость = Ложь;
		
		Если ЭлементСхемы.ТипДокумента = Перечисления.ТипыДокументовЭДО.ДоговорныйДокумент Тогда
			Элементы.ОтображатьБанковскиеРеквизиты.Видимость = Ложь;	
			Элементы.ОтображатьДополнительнуюИнформацию.Видимость = Ложь; 
			Элементы.ОтображатьОбластьКопияВерна.Видимость = Ложь;
		КонецЕсли;
		
		ВыводитьПодсказкуПДФ_А3 = Обработки.ФорматДоговорныйДокумент101.ЭтоФайлФормата(ЭлементСхемы.ИмяФайла);
		ВыводитьКомандуВыгрузкиВФорматеPDF =
			Не Обработки.ФорматДоговорныйДокументИнформацияОтправителяЭДО.ЭтоФайлФормата(ЭлементСхемы.ИмяФайла);
	Иначе
		
		Элементы.ТранслитироватьИмяФайла.Видимость = Истина;
		Элементы.ТранслитироватьИмяФайла.Пометка = Не ОтключитьТранслитерацию;
		Элементы.ОтображатьБанковскиеРеквизиты.Видимость = Ложь;	
		Элементы.ОтображатьДополнительнуюИнформацию.Видимость = Ложь; 
		Элементы.ОтображатьОбластьКопияВерна.Видимость = Ложь;
			
	КонецЕсли;
		
	Элементы.ОтображатьБанковскиеРеквизиты.Пометка = ВыводитьБанковскиеРеквизиты;
	
	Если ВыводитьПодсказкуПДФ_А3 Тогда
		Элементы.НадписьПодсказкаДоговорныйДокументПДФ_А3.Заголовок = 
			Обработки.ФорматДоговорныйДокумент101.ТекстСправки();
	КонецЕсли;
	Элементы.ГруппаПодсказкаДоговорныйДокументПДФ_А3.Видимость = ВыводитьПодсказкуПДФ_А3;
	
	Если Не ЭлементСхемы.ТипДокумента = Перечисления.ТипыДокументовЭДО.ДоговорныйДокумент Тогда
		Элементы.НадписьТранслитерация.Видимость = Элементы.ТранслитироватьИмяФайла.Пометка;
	КонецЕсли;
	
	Элементы.ВыгрузитьЭлектронныеДокументыВФорматеPDF.Видимость = ВыводитьКомандуВыгрузкиВФорматеPDF;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПараметрыКонтрагента()
	
	Если ЗначениеЗаполнено(Объект.Ссылка)
		ИЛИ ЭлементСхемыИнформацияОтправителя(ЭтотОбъект).ФормированиеПоОбъектуУчета Тогда
		Возврат;
	КонецЕсли;

	Элементы.Контрагент.ОграничениеТипа = Метаданные.ОпределяемыеТипы.КонтрагентБЭД.Тип;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВПакетФайлСКомпьютераКоманда(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Описание = Новый ОписаниеОповещения("ДобавитьВПакетФайлСКомпьютераПослеОтветаНаВопрос", ЭтотОбъект);

		Текст = НСтр("ru = 'Для выполнения операции необходимо сохранить документ. Продолжить?'");
		ПоказатьВопрос(Описание, Текст, РежимДиалогаВопрос.ДаНет);	
	Иначе
		
		ДобавитьВПакетФайлСКомпьютера();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВПакетФайлСКомпьютераПослеОтветаНаВопрос(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	ПроверитьЗаполнениеНаКлиенте(Отказ);
	
	Если Отказ Тогда
		Возврат;		
	КонецЕсли;
	
	НачатьЗаписьДокумента(Новый ОписаниеОповещения("ДобавитьВПакетФайлСКомпьютераПослеЗаписи", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВПакетФайлСКомпьютераПослеЗаписи(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда 
		Возврат;
	КонецЕсли;
	
	ДобавитьВПакетФайлСКомпьютера();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВПакетФайлСКомпьютера()
	
	ДополнительныеПараметры = ПараметрыДобавленияВПакет();
	
	ПакетыДокументовЭДОКлиент.ПослеВыбораСпособаДобавленияДокументаВПакет("ДобавитьВПакетФайлСКомпьютера",
		ДополнительныеПараметры);
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВПакетПрисоединенныйФайлКоманда(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Описание = Новый ОписаниеОповещения("ДобавитьВПакетПрисоединенныйФайлПослеОтветаНаВопрос", ЭтотОбъект);

		Текст = НСтр("ru = 'Для выполнения операции необходимо сохранить документ. Продолжить?'");
		ПоказатьВопрос(Описание, Текст, РежимДиалогаВопрос.ДаНет);	
	Иначе
		
		ДобавитьВПакетПрисоединенныйФайл();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВПакетПрисоединенныйФайлПослеОтветаНаВопрос(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	ПроверитьЗаполнениеНаКлиенте(Отказ);
	
	Если Отказ Тогда
		Возврат;		
	КонецЕсли;
	
	НачатьЗаписьДокумента(Новый ОписаниеОповещения("ДобавитьВПакетПрисоединенныйФайлПослеЗаписи", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВПакетПрисоединенныйФайлПослеЗаписи(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда 
		Возврат;
	КонецЕсли;
	
	ДобавитьВПакетПрисоединенныйФайл();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВПакетПрисоединенныйФайл()
	
	ДополнительныеПараметры = ПараметрыДобавленияВПакет();
	
	ПакетыДокументовЭДОКлиент.ПослеВыбораСпособаДобавленияДокументаВПакет("ДобавитьВПакетПрисоединенныйФайл",
		ДополнительныеПараметры);
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВПакетДокументИнформационнойБазыКоманда(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Описание = Новый ОписаниеОповещения("ДобавитьВПакетДокументИнформационнойБазыПослеОтветаНаВопрос", ЭтотОбъект);

		Текст = НСтр("ru = 'Для выполнения операции необходимо сохранить документ. Продолжить?'");
		ПоказатьВопрос(Описание, Текст, РежимДиалогаВопрос.ДаНет);	
	Иначе
		
		ДобавитьВПакетДокументИнформационнойБазы();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВПакетДокументИнформационнойБазыПослеОтветаНаВопрос(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	ПроверитьЗаполнениеНаКлиенте(Отказ);
	
	Если Отказ Тогда
		Возврат;		
	КонецЕсли;
	
	НачатьЗаписьДокумента(Новый ОписаниеОповещения);
	
	ДобавитьВПакетДокументИнформационнойБазы();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВПакетДокументИнформационнойБазы()
	
	ДополнительныеПараметры = ПараметрыДобавленияВПакет();
	
	ПакетыДокументовЭДОКлиент.ПослеВыбораСпособаДобавленияДокументаВПакет(
		"ДобавитьВПакетДокументИнформационнойБазы", ДополнительныеПараметры);
		
КонецПроцедуры

&НаКлиенте
Функция ПараметрыДобавленияВПакет()
	
	ПараметрыДобавленияВПакет = ПакетыДокументовЭДОКлиент.НовыеПараметрыДобавленияВПакет();
	ПараметрыДобавленияВПакет.ИдентификаторПакета = ИдентификаторПакета;
	ПараметрыДобавленияВПакет.ЭлектронныйДокумент = Объект.Ссылка;
	ПараметрыДобавленияВПакет.Отправитель = Объект.Организация;
	ПараметрыДобавленияВПакет.Получатель = Объект.Контрагент;
	ПараметрыДобавленияВПакет.Договор = Объект.ДоговорКонтрагента;
	ПараметрыДобавленияВПакет.ОтключитьТранслитерацию = ОтключитьТранслитерацию;
	
	Возврат ПараметрыДобавленияВПакет;
	
КонецФункции

&НаКлиенте
Процедура ОчиститьДоговорПослеВыбораОрганизации(ВыбранноеЗначение)
	
	Если Объект.Организация <> ВыбранноеЗначение Тогда
		Объект.ДоговорКонтрагента = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	ПриИзмененииКлючевыхРеквизитов();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СхемаРегламентаПослеАктивизацииСтроки()
	
	ИдентификаторЭлементаСхемы = Элементы.СхемаРегламента.ТекущаяСтрока;
	Если ИдентификаторЭлементаСхемы <> Неопределено
		И ИдентификаторЭлементаСхемы <> ИдентификаторТекущегоЭлемента
		И Элементы.СхемаРегламента.ТекущиеДанные <> Неопределено Тогда
		
		ИдентификаторТекущегоЭлемента = ИдентификаторЭлементаСхемы;
		СхемаРегламентаПослеАктивизацииСтрокиНаСервере();
		ОжидатьФормированияПредставленияДокумента();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеЭлектронногоДокумента()
	
	ЭлементСхемы = СхемаРегламента.НайтиПоИдентификатору(ИдентификаторТекущегоЭлемента);
	
	ЭлементСхемы.ПредставлениеСформировано = Ложь;
		
	ПоказатьПредставлениеДокумента(ЭлементСхемы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьФормированияПредставленияДокумента()
	
	Если ФормированиеПредставления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПоказатьПредставлениеДанныхДокументаПослеФормирования", ЭтотОбъект,
		Новый Структура("ИдентификаторТекущегоЭлемента", ИдентификаторТекущегоЭлемента));
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.Вставить("ВыводитьОкноОжидания", Ложь);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФормированиеПредставления, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоМаршрутаПодписания()
	
	ЭлементСхемы = ЭлементСхемыИнформацияОтправителя(ЭтотОбъект);
	
	Если ЗначениеЗаполнено(ЭлементСхемы.Сообщение) Тогда
		
		ИсточникМаршрута = ЭлементСхемы.Сообщение;
		
	Иначе
		
		ИсточникМаршрута = МаршрутыПодписанияБЭД.ТаблицаМаршрутаПоПараметрам(Объект.Ссылка, Объект.МаршрутПодписания, ,
			Объект.СписокПодписантов.Выгрузить());

	КонецЕсли;
	
	Если ЭлементСхемы.Направление = Перечисления.НаправленияЭДО.Интеркампани Тогда
		ОсновнойРеквизит = "Организация";
	Иначе
		ОсновнойРеквизит = "Подписант";
	КонецЕсли;
	
	МаршрутыПодписанияБЭД.ЗаполнитьДеревоМаршрутаНаФорме(ЭтотОбъект, ИсточникМаршрута, 
		"СхемаМаршрутаПодписания", ОсновнойРеквизит);
	
	Элементы.СхемаМаршрутаПодписанияСертификат.Видимость = Объект.ВидПодписи <> Перечисления.ВидыЭлектронныхПодписей.Простая;
		
КонецПроцедуры

&НаСервере
Процедура СформироватьПредупреждения()

	ИнтерфейсДокументовЭДО.СформироватьПредупреждения(ЭтотОбъект, Элементы.ГруппаПредупреждений);
	
	Элементы.ГруппаПредупреждений.Видимость = ЭлектронныеДокументыЭДО.ЕстьПравоОбработкиДокументов();
	
КонецПроцедуры

&НаСервере
Процедура ВывестиПредставлениеДокументовУчета()
	
	ЭлементСхемы = ЭлементСхемыИнформацияОтправителя(ЭтотОбъект);
	
	МассивОбъектовУчета = Основания.ВыгрузитьЗначения();
	КоличествоДокументов = МассивОбъектовУчета.Количество();
	
	ОтображатьПодбор = Ложь;
	Элементы.ДокументыУчетаЭлектронногоДокументаПредставление.Заголовок = НСтр("ru = 'Документ учета'");
	
	Если КоличествоДокументов = 0 Тогда
		
		Если ЭлементСхемы.ТипДокумента = Перечисления.ТипыДокументовЭДО.КаталогТоваров Тогда
			ПредставлениеДокументов = НСтр("ru = 'Сопоставить номенклатуру'");
			Элементы.ДокументыУчетаЭлектронногоДокументаПредставление.Заголовок = НСтр("ru = 'Настройка ЭДО'");
		ИначеЕсли Не ЭлементСхемы.ФормированиеПоОбъектуУчета 
			И Не ЭлектронныеДокументыЭДО.ЭтоВнутреннийВидДокумента(Объект.ВидДокумента) Тогда
			ПредставлениеДокументов = НСтр("ru = '<Подбор>'");
		Иначе
			ПредставлениеДокументов = "";
		КонецЕсли;
		
	ИначеЕсли КоличествоДокументов = 1 Тогда
		
		ОбъектУчета = МассивОбъектовУчета[0];
		
		ПредставлениеДокументов = Строка(ОбъектУчета);
		
		Если Не ЭлементСхемы.ФормированиеПоОбъектуУчета
			И Не ЭлектронныеДокументыЭДО.ЭтоВнутреннийВидДокумента(Объект.ВидДокумента) Тогда
			ОтображатьПодбор = Истина;
		КонецЕсли;
		
	Иначе
		
		Элементы.ДокументыУчетаЭлектронногоДокументаПредставление.Заголовок = НСтр("ru = 'Документы учета'");
		ШаблонТекста = НСтр("ru = 'Список документов (%1)'");  
		ПредставлениеДокументов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, КоличествоДокументов);
		
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(
		СтрШаблон("<a href=""ПредставлениеДокументовУчетаЭлектронногоДокументаНажатие"">%1</a>", ПредставлениеДокументов));
		
	Если ОтображатьПодбор И Не Объект.Ссылка.Пустая() Тогда
		МассивСтрок.Добавить(СтрШаблон("<a href=""ОткрытьФормуПодбораДокументовУчетаНажатие"">%1</a>", НСтр("ru = '<Подбор>'")));
	КонецЕсли;
	
	ДокументыУчетаЭлектронногоДокументаПредставление = СтроковыеФункции.ФорматированнаяСтрока(СтрСоединить(МассивСтрок, "   "));
	
	Элементы.ДокументыУчетаЭлектронногоДокументаПредставление.Видимость = КоличествоДокументов > 0 ИЛИ Не Объект.Ссылка.Пустая();
	
	Если ПолучитьФункциональнуюОпцию("ЗапретитьФормированиеФормализованныхЭДИзФайлов") Тогда
		Если Объект.ТипРегламента = Перечисления.ТипыРегламентовЭДО.Неформализованный Тогда
			Элементы.ДокументыУчетаЭлектронногоДокументаПредставление.Видимость = Не ЭлементСхемы.Распознан Или КоличествоДокументов > 0;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если (Объект.ТипРегламента = Перечисления.ТипыРегламентовЭДО.УПД 
		Или Объект.ТипРегламента = Перечисления.ТипыРегламентовЭДО.Формализованный
		Или Объект.ТипРегламента = Перечисления.ТипыРегламентовЭДО.АктОРасхождениях)
			И МассивОбъектовУчета.Количество() = 0 Тогда
		ДокументыУчетаЭлектронногоДокументаПредставление = СтроковыеФункции.ФорматированнаяСтрока(
		СтрШаблон("<a href=""ПредставлениеДокументовУчетаЭлектронногоДокументаНажатие"">%1</a>", НСтр("ru = '<Подбор>'")));
		Элементы.ДокументыУчетаЭлектронногоДокументаПредставление.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПредставлениеДанныхДокументаПослеФормирования(Результат, Контекст) Экспорт
	
	Если Результат = Неопределено
		ИЛИ ФормированиеПредставленияОтменено Тогда
		ФормированиеПредставленияОтменено = Ложь;
		Возврат;
	КонецЕсли;
	
	ФормированиеПредставления = Результат;
	ОбновитьПредставлениеДокумента(Контекст.ИдентификаторТекущегоЭлемента);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыполненияЗаписиДокумента(Результат, Контекст) Экспорт
	
	ПараметрыСобытия = ИнтерфейсДокументовЭДОКлиент.НовыеПараметрыСобытияОбновленияСостоянияЭДО();
	ПараметрыСобытия.ЭлектронныеДокументы.Добавить(Объект.Ссылка);
	Оповестить(ИнтерфейсДокументовЭДОКлиент.ИмяСобытияОбновленияСостоянияЭДО(), ПараметрыСобытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыполненияДействийПоЭДО(Результат, НаборДействий) Экспорт
	
	Если НаборДействий.Получить(ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.ОтправитьВАрхив")) = Истина Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеЭлектронногоДокументаНаСервере()
	
	ЗаполнитьДанныеЭлектронногоДокумента();
	
	ИдентификаторТекущегоЭлемента = СхемаРегламента.ПолучитьЭлементы()[0].ПолучитьИдентификатор();
	
	ЭлементСхемы = СхемаРегламента.НайтиПоИдентификатору(ИдентификаторТекущегоЭлемента);
		
	РаспознатьДокумент(ЭлементСхемы);	
	
	ПолучитьДанныеПакета();
	
	СформироватьПанельСоставаПакета();
	
	ЗаполнитьПодписи(ЭлементСхемы);
	
	ВывестиПредставлениеДокументовУчета();
	
	ЗаполнитьТекстСопроводительнойЗаписки(ЭлементСхемы);
	
	НастроитьОформлениеФормы(ЭлементСхемы);	
	
	УстановитьВидимостьДоверенности();
	
	ИнтерфейсДокументовЭДОКлиентСервер.РазблокироватьЗаблокированныеЭлементыФормы(ЭтотОбъект, 
		ЗаблокированныеЭлементыФормы);
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	ОбновляемыеКатегории = Новый Массив;	
	ОбновляемыеКатегории.Добавить(КонтекстныеПодсказкиБЭДКатегоризацияВызовСервера.Категория_СтатусДокументооборота());

	СформироватьКонтекст(ОбновляемыеКатегории);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД	
	
	ЭтотОбъект.Прочитать();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправкаПолучениеЭДЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Элементы.ОбновитьСостояниеЭД.Картинка = БиблиотекаКартинок.Обновить;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиПодписейДокумента(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат.Успех) Тогда
		ОбновитьСтраницуПодписей();
		ОжидатьФормированияПредставленияДокумента();
	КонецЕсли;
	
	ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(Результат.КонтекстДиагностики);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКлючевыхРеквизитов()
	
	КлючНастройкиОтправки = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки();
	КлючНастройкиОтправки.ВидДокумента = Объект.ВидДокумента;
	КлючНастройкиОтправки.Отправитель = Объект.Организация;
	КлючНастройкиОтправки.Получатель = Объект.Контрагент;
	КлючНастройкиОтправки.Договор = Объект.ДоговорКонтрагента;
	
	НастройкиОтправки = НастройкиЭДО.НастройкиОтправки(КлючНастройкиОтправки);
	
	Объект.ТребуетсяПодтверждение = ?(ЗначениеЗаполнено(НастройкиОтправки), 
		НастройкиОтправки.ТребуетсяОтветнаяПодпись, Ложь);
	Объект.ТребуетсяИзвещение = ?(ЗначениеЗаполнено(НастройкиОтправки), 
		НастройкиОтправки.ТребуетсяИзвещениеОПолучении, Ложь);
	Объект.ИдентификаторОрганизации = ?(ЗначениеЗаполнено(НастройкиОтправки), 
		НастройкиОтправки.ИдентификаторОтправителя, "");
	Объект.ИдентификаторКонтрагента = ?(ЗначениеЗаполнено(НастройкиОтправки), 
		НастройкиОтправки.ИдентификаторПолучателя, "");
	Объект.СпособОбмена = ?(ЗначениеЗаполнено(НастройкиОтправки), 
		НастройкиОтправки.СпособОбмена, Неопределено);
	Объект.ОбменБезПодписи = ?(ЗначениеЗаполнено(НастройкиОтправки),
		НастройкиОтправки.ОбменБезПодписи, Ложь);
	Объект.МаршрутПодписания = ?(ЗначениеЗаполнено(НастройкиОтправки),
		НастройкиОтправки.МаршрутПодписания, Неопределено);
	Объект.ФорматОсновногоТитула = ?(ЗначениеЗаполнено(НастройкиОтправки), 
		НастройкиОтправки.Формат, "");
	Объект.ВидПодписи = Перечисления.ВидыЭлектронныхПодписей.УсиленнаяКвалифицированная;
	
	МаршрутРедактируетсяПриСоздании = ?(ЗначениеЗаполнено(НастройкиОтправки), 
		НастройкиОтправки.МаршрутПодписания = МаршрутыПодписанияБЭД.МаршрутУказыватьПриСоздании(), 
		Не ЗначениеЗаполнено(Объект.МаршрутПодписания));
		
	Если Объект.МаршрутПодписания = МаршрутыПодписанияБЭД.МаршрутУказыватьПриСоздании() Тогда
		Объект.МаршрутПодписания = Неопределено;
	КонецЕсли;
	
	Объект.СписокПодписантов.Очистить();

	Элементы.ПодменюДобавитьДокументыВПакет.Видимость = СоставПакета.Количество() <= 1
		И ДоступноИзменениеПакета
		И Объект.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО;
	
	ОбновитьОтображениеМаршрутаПодписания();
	
	УстановитьЗаголовокФормы();
	УстановитьВидимостьКомандыПоказатьПротоколОбмена();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВложениеИзТабличногоДокумента(ТабличныйДокумент, НаименованиеФайла)
	
	Поток = Новый ПотокВПамяти;
	ТабличныйДокумент.Записать(Поток, ТипФайлаТабличногоДокумента.PDF);
	ДвоичныеДанные = Поток.ЗакрытьИПолучитьДвоичныеДанные();
	АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
	
	Если ЗначениеЗаполнено(НаименованиеФайла) Тогда 
		Наименование = НаименованиеФайла;   
	Иначе
		Если Основания.Количество() = 0 Тогда
			ФайлДляПолученияИмени = Новый Файл(ПолучитьИмяВременногоФайла());
			Наименование = ФайлДляПолученияИмени.ИмяБезРасширения;
		Иначе
			Наименование = СтрЗаменить(Строка(Основания[0].Значение), " ", "_");
		КонецЕсли;
	КонецЕсли;	
	
	Объект.Комментарий = Наименование;
	
	Наименование = РаботаСФайламиБЭД.ПреобразоватьИмяФайлаСУчетомТранслитерации(Наименование,
		ОтключитьТранслитерацию);
	Наименование = РаботаСФайламиБЭДКлиентСервер.ДопустимоеИмяФайла(Наименование, Истина);
	
	Расширение = "pdf";
	ИмяФайла = СтрШаблон("%1.%2", Наименование, Расширение);
	
	ЭлементСхемы = ЭлементСхемыИнформацияОтправителя(ЭтотОбъект);	
	
	ЭлементСхемы.АдресФайла = АдресВХранилище;
	ЭлементСхемы.ИмяФайла = ИмяФайла;
	ЭлементСхемы.РасширениеФайла = Расширение;
	
	ПодготовитьПредставлениеФайла(ЭлементСхемы);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВложениеИзДвоичныхДанных(ДвоичныеДанные, НаименованиеФайла, Расширение)
	
	АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
	
	Объект.Комментарий = НаименованиеФайла;
	
	НаименованиеФайла = РаботаСФайламиБЭД.ПреобразоватьИмяФайлаСУчетомТранслитерации(НаименованиеФайла,
		ОтключитьТранслитерацию);
	НаименованиеФайла = РаботаСФайламиБЭДКлиентСервер.ДопустимоеИмяФайла(НаименованиеФайла, Истина);
	
	НаименованиеФайла = СтрШаблон("%1.%2", НаименованиеФайла, Расширение);
	
	ЭлементСхемы = ЭлементСхемыИнформацияОтправителя(ЭтотОбъект);	
	
	ЭлементСхемы.АдресФайла = АдресВХранилище;
	ЭлементСхемы.ИмяФайла = НаименованиеФайла;
	ЭлементСхемы.РасширениеФайла = Расширение;
	
	ПодготовитьПредставлениеФайла(ЭлементСхемы);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущийДокументПакета(Документ, ОбновитьФорму = Истина)
	ОбъектДокумента = Документ.ПолучитьОбъект();
	ЗначениеВДанныеФормы(ОбъектДокумента, Объект);
	Если ОбновитьФорму Тогда
		Прочитать();
		УстановитьЗаголовокФормы();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеМаршрутаПодписания()
	
	Если ЗначениеЗаполнено(Объект.СписокПодписантов) Тогда
		Подписанты = Объект.СписокПодписантов.Выгрузить();
		
		ПредставлениеНастроекВыбораМаршрута = МаршрутыПодписанияБЭД.ПредставлениеМаршрутаВыбранногоВДокументе(
			Истина, Подписанты, Объект.МаршрутПодписания);
	Иначе	
		Если ЗначениеЗаполнено(Объект.МаршрутПодписания) Тогда
			ПредставлениеНастроекВыбораМаршрута = Объект.МаршрутПодписания;
		Иначе
			ПредставлениеНастроекВыбораМаршрута = МаршрутыПодписанияБЭД.ПредставлениеНеВыбранногоМаршрута();
		КонецЕсли;
	КонецЕсли;
	
	Элементы.МаршрутПодписания.Доступность = ЗначениеЗаполнено(Объект.Организация) И МаршрутРедактируетсяПриСоздании;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтраницуПодписей()
	
	ЭлементСхемы = СхемаРегламента.НайтиПоИдентификатору(ИдентификаторТекущегоЭлемента);
	
	ЗаполнитьПодписи(ЭлементСхемы);
	УстановитьВидимостьДоверенности();
	ЗаполнитьЗаголовокСтраницыПодписей(ЭлементСхемы);
	
	ОбновитьПредставлениеЭлектронногоДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьСопроводительнуюЗаписку()
	
	ИнтерфейсДокументовЭДО.ОчиститьСопроводительнуюЗаписку(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборОбъектовУчета()

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЭлектронныйДокумент", Объект.Ссылка);
	ПараметрыФормы.Вставить("ВидДокумента", Объект.ВидДокумента);
	ПараметрыФормы.Вставить("ДокументРаспознан", ЭлементСхемыИнформацияОтправителя(ЭтотОбъект).Распознан);
	
	ИнтерфейсДокументовЭДОКлиент.ОткрытьПодборОбъектовУчетаЭлектронногоДокумента(ПараметрыФормы);

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКомандыПоказатьПротоколОбмена()
	
	Видимость = Ложь;
	Если ЗначениеЗаполнено(Объект.ВидДокумента) Тогда
		ТипДокументаВида = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, "ТипДокумента");
		Видимость = Обработки.ПротоколОбменаПоДокументуЭДО.ДоступноФормированиеПротоколаОбменаПоДокументу(ТипДокументаВида);
	КонецЕсли;
	Элементы.ПоказатьПротоколОбмена.Видимость = Видимость;
КонецПроцедуры

#Область ЗаписатьДокумент

&НаКлиенте
Процедура ЗаписатьДокумент()
	
	Отказ = Ложь;
	
	ПроверитьЗаполнениеНаКлиенте(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыполненияЗаписиДокумента", ЭтотОбъект);
	НачатьЗаписьДокумента(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеНаКлиенте(Отказ)
	
	ЭлементСхемы = ЭлементСхемыИнформацияОтправителя(ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(ЭлементСхемы.АдресОписанияСообщения) 
		И Не ЗначениеЗаполнено(ЭлементСхемы.АдресФайла) 
		И Не ЗначениеЗаполнено(ЭлементСхемы.ПрисоединенныйФайл) Тогда
		ТекстОшибки = НСтр("ru = 'Необходимо приложить файл.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,, "КартинкаФайла",, Отказ);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗаписьДокумента(ОповещениеОЗавершении)

	ОчиститьСообщения();
	РезультатЗаписи = ЗаписатьДокументНаСервере();
	
	Если РезультатЗаписи.ТребуетсяФормализованныйФормат
		И Не РезультатЗаписи.РезультатПроверкиНастроек.Отказ Тогда
		Обработчик = Новый ОписаниеОповещения("ПоказатьОкноПредложенияОтправкиВФормализованномВидеПослеОтветаНаВопрос",
			ЭтотОбъект, ОповещениеОЗавершении);
			
		ИнтерфейсДокументовЭДОКлиент.ПоказатьОкноПредложенияОтправкиВФормализованномВиде(
			Объект.ВидДокумента, Обработчик);
		Возврат;
	КонецЕсли;
	
	Если Не РезультатЗаписи.Отказ Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Истина);
		Возврат;
	КонецЕсли;
	
	ИнтерфейсДокументовЭДОКлиентСервер.РазблокироватьЗаблокированныеЭлементыФормы(ЭтотОбъект, 
		ЗаблокированныеЭлементыФормы);
	
	Если РезультатЗаписи.РезультатПроверкиЗаполнения.Отказ
		И РезультатЗаписи.РезультатПроверкиЗаполнения.ФайлРедактируется Тогда
		Оповещение = Новый ОписаниеОповещения("ОсвободитьЗакончитьРедактированиеФайлаПередЗаписью",
			ЭтотОбъект, ОповещениеОЗавершении);
		ОсвободитьЗакончитьРедактированиеФайла(Оповещение);
		Возврат;
	КонецЕсли;
	
	Если РезультатЗаписи.Отказ И ЗначениеЗаполнено(РезультатЗаписи.ОграниченияОбъемаПакетаДокументов) Тогда
		ТекстСообщения =
			ПакетыДокументовЭДОКлиент.ТекстОПревышенииМаксимальногоРазмераПакетаСохранениеДокумента(
				РезультатЗаписи.ОграниченияОбъемаПакетаДокументов);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если РезультатЗаписи.РезультатПроверкиНастроек.Отказ Тогда
		Оповещение = Новый ОписаниеОповещения("ВыполнитьПервичнуюНастройкуПередЗаписью",
			ЭтотОбъект, ОповещениеОЗавершении);
		Если РезультатЗаписи.РезультатПроверкиНастроек.ЭтоВнутреннийЭДО Тогда			
			НастройкиЭДОКлиент.НастроитьВнутреннийЭлектронныйДокументооборот(
				Объект.Организация, Объект.ВидДокумента, Оповещение);
		
		ИначеЕсли РезультатЗаписи.РезультатПроверкиНастроек.ФормированиеЗапрещено = Истина Тогда 
			ДанныеДокумента = Новый Структура("Организация, Контрагент, ДоговорКонтрагента",
				Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
			ИнтерфейсДокументовЭДОКлиент.ПоказатьПроблемуЗапрещеноФормированиеДокумента(ДанныеДокумента, Оповещение);
		Иначе
			НастройкиЭДОКлиент.НастроитьОбменСКонтрагентом(
				РезультатЗаписи.РезультатПроверкиНастроек.КлючНастроекОтправки, Оповещение);
		КонецЕсли;
		Возврат;
	КонецЕсли;

	ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(РезультатЗаписи.КонтекстДиагностики);
	
	ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсвободитьЗакончитьРедактированиеФайлаПередЗаписью(Результат, ОповещениеОЗавершении) Экспорт
	
	Если Результат = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Ложь);
	Иначе
		НачатьЗаписьДокумента(ОповещениеОЗавершении);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПервичнуюНастройкуПередЗаписью(Результат, ОповещениеОЗавершении) Экспорт
	
	Если Результат = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Ложь);
	Иначе
		ПриИзмененииКлючевыхРеквизитов();
		НачатьЗаписьДокумента(ОповещениеОЗавершении);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьДокументНаСервере()
	
	РезультатЗаписи = Новый Структура;
	РезультатЗаписи.Вставить("Отказ", Ложь);
	РезультатЗаписи.Вставить("РезультатПроверкиЗаполнения", НовыйРезультатПроверкиЗаполнения());
	РезультатЗаписи.Вставить("РезультатПроверкиНастроек", 
		ИнтерфейсДокументовЭДО.НовыйРезультатПроверкиНастроекОтправки());
	РезультатЗаписи.Вставить("КонтекстДиагностики", ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики());
	РезультатЗаписи.Вставить("ТребуетсяФормализованныйФормат", Ложь);
	РезультатЗаписи.Вставить("ОграниченияОбъемаПакетаДокументов", Неопределено);
	
	ЭлементСхемы = ЭлементСхемыИнформацияОтправителя(ЭтотОбъект);
	ВсеЭлементыСхемы = ОбщегоНазначенияБЭДКлиентСервер.ПолучитьВсеЭлементыДереваРекурсивно(СхемаРегламента);
	
	РезультатПроверки = ПроверитьЗаполнениеДокумента(ЭлементСхемы);
	Если РезультатПроверки.Отказ Тогда
		РезультатЗаписи.Отказ = Истина;
		РезультатЗаписи.РезультатПроверкиЗаполнения = РезультатПроверки;
		Возврат РезультатЗаписи;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭлементСхемы.АдресФайла) Тогда
		
		РезультатПроверкиПревышенияРазмераПакета =
			ЭлектронныеДокументыЭДО.ПроверкаПревышенияМаксимальногоРазмераФайла(Объект.ИдентификаторКонтрагента,
			Объект.ИдентификаторОрганизации, ЭлементСхемы.АдресФайла);
		
		Если РезультатПроверкиПревышенияРазмераПакета.Превышено Тогда
			РезультатЗаписи.Отказ = Истина;
			РезультатЗаписи.ОграниченияОбъемаПакетаДокументов =
				РезультатПроверкиПревышенияРазмераПакета.ПревышаемыеОграничения;
			Возврат РезультатЗаписи;
		КонецЕсли;
	
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ЭтоНовыйДокумент", Не ЗначениеЗаполнено(Объект.Ссылка));
	ПараметрыЗаписи.Вставить("КонтекстДиагностики", РезультатЗаписи.КонтекстДиагностики);
	
	Если ИзмененВидДокумента И НЕ ПараметрыЗаписи.ЭтоНовыйДокумент Тогда
		ПараметрыЗаписи.Вставить("ИзменениеВидаДокумента", Истина);
	КонецЕсли;
	
	Если ПараметрыЗаписи.ЭтоНовыйДокумент Или Модифицированность Тогда
		
		РезультатПроверкиНастроек = ПроверитьНастройки();

		Если РезультатПроверкиНастроек.Отказ Тогда
			РезультатЗаписи.Отказ = Истина;
			РезультатЗаписи.РезультатПроверкиНастроек = РезультатПроверкиНастроек;
			Возврат РезультатЗаписи;
		КонецЕсли;
		ПараметрыЗаписи.Вставить("ЭлементыСхемыРегламента", ВсеЭлементыСхемы);
	КонецЕсли;
	
	Если НЕ ОкноОтправкиВФормализованномВидеПоказано
		И ТребуетсяФормализованныйФормат(Объект.ТипРегламента, Объект.ВидДокумента) Тогда
		РезультатЗаписи.ТребуетсяФормализованныйФормат = Истина;
		Возврат РезультатЗаписи;
	КонецЕсли;
	
	РезультатПроверкиЗаполнения = ПроверитьЗаполнениеДокументаПослеПроверкиНастроек();
	Если РезультатПроверкиЗаполнения.Отказ Тогда
		РезультатЗаписи.Отказ = Истина;
		РезультатЗаписи.РезультатПроверкиЗаполнения = РезультатПроверкиЗаполнения;
		Возврат РезультатЗаписи;
	КонецЕсли;
	
	Если Не Записать(ПараметрыЗаписи) Тогда
		РезультатЗаписи.Отказ = Истина;
		Возврат РезультатЗаписи;
	КонецЕсли;
	
	Для Каждого ТекущийЭлементСхемы Из ВсеЭлементыСхемы Цикл
		Если ЗначениеЗаполнено(ТекущийЭлементСхемы.АдресОписанияСообщения) Тогда
			УдалитьИзВременногоХранилища(ТекущийЭлементСхемы.АдресОписанияСообщения);
			ТекущийЭлементСхемы.АдресОписанияСообщения = "";
		КонецЕсли;
	КонецЦикла;
	ИзмененВидДокумента = Ложь;
	
	Возврат РезультатЗаписи;
КонецФункции

&НаСервере
Функция ПроверитьНастройки()

	РеквизитыДокументаДляПроверкиНастроек = Новый Структура;
	РеквизитыДокументаДляПроверкиНастроек.Вставить("Организация", Объект.Организация);
	РеквизитыДокументаДляПроверкиНастроек.Вставить("Контрагент", Объект.Контрагент);
	РеквизитыДокументаДляПроверкиНастроек.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	РеквизитыДокументаДляПроверкиНастроек.Вставить("ВидДокумента", Объект.ВидДокумента);
	Возврат ИнтерфейсДокументовЭДО.ПроверитьНастройкиОтправкиПоРеквизитамДокумента(
		РеквизитыДокументаДляПроверкиНастроек);

КонецФункции

&НаКлиенте
Процедура СопроводительнаяЗапискаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	ИзмененаСопроводительнаяЗаписка = Истина;
	ЭлементСхемы = СхемаРегламента.НайтиПоИдентификатору(ИдентификаторТекущегоЭлемента);
	ЭлементСхемы.ДополнительнаяИнформация = СопроводительнаяЗаписка;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьЗаполнениеДокумента(ЭлементСхемыРегламента)
	
	Результат = НовыйРезультатПроверкиЗаполнения();
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = ИнтерфейсДокументовЭДОКлиентСервер.ТекстСообщенияОНезаполненностиРеквизитовДокумента(
			НСтр("ru='Организация'"));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "Организация", "Объект", Результат.Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ВидДокумента) Тогда
		ТекстСообщения = ИнтерфейсДокументовЭДОКлиентСервер.ТекстСообщенияОНезаполненностиРеквизитовДокумента(
			НСтр("ru='Вид'"));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "ВидДокумента", "Объект", Результат.Отказ);
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Объект.Контрагент) 
		И Не ЭлектронныеДокументыЭДО.ЭтоВнутреннийВидДокумента(Объект.ВидДокумента) Тогда
		ТекстСообщения = ИнтерфейсДокументовЭДОКлиентСервер.ТекстСообщенияОНезаполненностиРеквизитовДокумента(
			НСтр("ru='Контрагент'"));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "Контрагент", "Объект", Результат.Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ДанныеФайла = Неопределено;
	
	Если ЗначениеЗаполнено(ЭлементСхемыРегламента.ПрисоединенныйФайл) Тогда
		ПараметрыДанныхФайла = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
		ПараметрыДанныхФайла.ИдентификаторФормы = УникальныйИдентификатор;
		ПараметрыДанныхФайла.ПолучатьСсылкуНаДвоичныеДанные = Ложь;
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(ЭлементСхемыРегламента.ПрисоединенныйФайл, ПараметрыДанныхФайла);
	КонецЕсли;
	
	Если ДанныеФайла = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо выбрать файл'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "НадписьИмяФайла",, Результат.Отказ);
	ИначеЕсли ДанныеФайла.ФайлРедактируется Тогда
		Результат.Отказ = Истина;
		Результат.ФайлРедактируется = ДанныеФайла.ФайлРедактируется;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПроверитьЗаполнениеДокументаПослеПроверкиНастроек()
	
	Результат = НовыйРезультатПроверкиЗаполнения();
	
	Если Не ЗначениеЗаполнено(Объект.МаршрутПодписания) И Не ЗначениеЗаполнено(Объект.СписокПодписантов) Тогда
		ТекстСообщения = ИнтерфейсДокументовЭДОКлиентСервер.ТекстСообщенияОНезаполненностиРеквизитовДокумента(
			НСтр("ru='Маршрут подписания'"));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "ПредставлениеНастроекВыбораМаршрута",, Результат.Отказ);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция НовыйРезультатПроверкиЗаполнения()
	Результат = Новый Структура;
	Результат.Вставить("Отказ", Ложь);
	Результат.Вставить("ФайлРедактируется", Ложь);
	Возврат Результат;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭлементСхемыИнформацияОтправителя(Форма)
	Возврат Форма.СхемаРегламента.ПолучитьЭлементы()[0];
КонецФункции

&НаСервере
Процедура УстановитьНовыйНомерДокумента(ТекущийОбъект)
	
	Если Не ТекущийОбъект.ЭтоНовый()
		ИЛИ ЗначениеЗаполнено(Объект.НомерДокумента)
		ИЛИ ЭлементСхемыИнформацияОтправителя(ЭтотОбъект).ФормированиеПоОбъектуУчета Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекущийОбъект.Номер) Тогда
		ТекущийОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	
	Объект.НомерДокумента = СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(ТекущийОбъект.Номер, "0");
	
КонецПроцедуры

&НаСервере
Функция АдресДанныхСертификата(НомерСтроки)
	
	СсылкаНаХранилищеДанныхСертификата = Неопределено;
	Сертификат = Подписи[НомерСтроки].Сертификат;
	
	Если Сертификат <> Неопределено Тогда
		ДвоичныеДанныеСертификата = Подписи[НомерСтроки].Сертификат.Получить();
		СсылкаНаХранилищеДанныхСертификата = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСертификата, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат СсылкаНаХранилищеДанныхСертификата;
	
КонецФункции

#КонецОбласти

#Область РаботаСВложением

&НаКлиенте
Процедура ДобавитьВложениеИзФайлаНаДискеЗавершить(ОписаниеПомещенногоФайла, ДополнительныеПараметры) Экспорт

	Если ОписаниеПомещенногоФайла = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Объект.ИдентификаторКонтрагента) Тогда
		
		РезультатПроверкиПревышенияМаксимальногоРазмераФайла =
			ЭлектронныеДокументыЭДОВызовСервера.ПроверкаПревышенияМаксимальногоРазмераФайла(
				Объект.ИдентификаторКонтрагента, Объект.ИдентификаторОрганизации, ОписаниеПомещенногоФайла.Хранение);
		
		Если РезультатПроверкиПревышенияМаксимальногоРазмераФайла.Превышено Тогда
			
			ПакетыДокументовЭДОКлиент.ПредупредитьОПревышенииМаксимальногоРазмерПакета(
				РезультатПроверкиПревышенияМаксимальногоРазмераФайла.ПревышаемыеОграничения);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПроверитьИВложитьФайл(ОписаниеПомещенногоФайла.Имя, ОписаниеПомещенногоФайла.Хранение);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложениеИзФайлаОснования(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(Результат, Новый УникальныйИдентификатор, Истина);
		ПроверитьИВложитьФайл(ДанныеФайла.ИмяФайла, ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьИВложитьФайл(ПолноеИмяФайла, АдресВХранилище)
	
	СтруктураИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПолноеИмяФайла);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПроверитьИВложитьФайлЗавершение", ЭтотОбъект, АдресВХранилище);
	РаботаСФайламиБЭДКлиент.СкорректироватьИмяФайлаСУчетомКодировки(ОповещениеОЗавершении, СтруктураИмениФайла.Имя);

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьИВложитьФайлЗавершение(ИмяФайла, АдресВХранилище) Экспорт
	Если ИмяФайла = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДобавитьВложениеИзФайлаНаСервере(ИмяФайла, АдресВХранилище);
	
	Если ОшибкаЧтенияXML Тогда
		ПоказатьПредупреждение(,
			ИнтерфейсДокументовЭДОКлиентСервер.ТекстСообщенияОбОтсутствииВозможностиЗагрузитьФайлXML());
		ОшибкаЧтенияXML = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СуществующийДокумент) Тогда
		ПроверкаСуществующегоДокумента();
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДобавитьВложениеИзФайлаНаСервере(Знач ИмяФайла, Знач АдресВХранилище)
	
	ЭлементСхемы = СхемаРегламента.НайтиПоИдентификатору(ИдентификаторТекущегоЭлемента);
	Если ЭлементСхемы = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяФайла = РаботаСФайламиБЭД.ПреобразоватьИмяФайлаСУчетомТранслитерации(ИмяФайла, ОтключитьТранслитерацию);
	
	РасширениеФайла = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ИмяФайла);
	КэшСхемы = Новый Структура("АдресФайла, ИмяФайла, РасширениеФайла");
	ЗаполнитьЗначенияСвойств(КэшСхемы, ЭлементСхемы);
	ЭлементСхемы.АдресФайла = АдресВХранилище;
	ЭлементСхемы.ИмяФайла = ИмяФайла;
	ЭлементСхемы.РасширениеФайла = СтрЗаменить(РасширениеФайла, ".", "");
	ЭлементСхемы.РаспознаниеВыполнено = Ложь;
	
	ПодготовитьПредставлениеФайла(ЭлементСхемы);
	ПоказатьПредставлениеДокумента(ЭлементСхемы);
	Если ОшибкаЧтенияXML Тогда
		ЗаполнитьЗначенияСвойств(ЭлементСхемы, КэшСхемы);
		ПодготовитьПредставлениеФайла(ЭлементСхемы);
		Возврат;
	КонецЕсли;
	НастроитьОформлениеФормы(ЭлементСхемы);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлВложения(ДляРедактирования = Ложь)
	
	ЭлементСхемы = СхемаРегламента.НайтиПоИдентификатору(ИдентификаторТекущегоЭлемента);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка)
		И ЗначениеЗаполнено(ЭлементСхемы.АдресФайла) Тогда
		Оповещение = Новый ОписаниеОповещения("ОткрытьФайлВложенияПослеВопроса", ЭтотОбъект, ДляРедактирования);
		ТекстВопроса = НСтр("ru = 'Для продолжения операции необходимо записать документ.
			|Записать документ?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	ИначеЕсли ЗначениеЗаполнено(ЭлементСхемы.ПрисоединенныйФайл) Тогда
		
		ИнтерфейсДокументовЭДОКлиент.ОткрытьФайл(ЭлементСхемы.ПрисоединенныйФайл, УникальныйИдентификатор, ДляРедактирования);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлВложенияПослеВопроса(Ответ, ДляРедактирования) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьФайлВложенияПослеЗаписи", ЭтотОбъект, ДляРедактирования);
	НачатьЗаписьДокумента(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлВложенияПослеЗаписи(ФайлВложенияЗаписан, ДляРедактирования) Экспорт
	
	Если ФайлВложенияЗаписан Тогда
		ЗаполнитьДанныеТекущегоЭлектронногоДокумента();
		
		ЭлементСхемы = Элементы.СхемаРегламента.ТекущиеДанные;
		Если ЭлементСхемы = Неопределено Тогда
			ЭлементСхемы = ЭлементСхемыИнформацияОтправителя(ЭтотОбъект);
		КонецЕсли;
		ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ЭлементСхемы.ПрисоединенныйФайл, УникальныйИдентификатор,, ДляРедактирования);
		
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла, ДляРедактирования);
		ПодготовитьПредставлениеФайлаНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьПредставлениеФайлаНаСервере()
	
	ЭлементСхемы = СхемаРегламента.НайтиПоИдентификатору(ИдентификаторТекущегоЭлемента);
	Если ЭлементСхемы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьПредставлениеФайла(ЭлементСхемы);
		
КонецПроцедуры

&НаКлиенте
Процедура ОсвободитьЗакончитьРедактированиеФайла(ОповещениеОЗавершении)
	
	ЭлементСхемы = Элементы.СхемаРегламента.ТекущиеДанные;
	
	Оповещение = Новый ОписаниеОповещения("ОсвободитьЗакончитьРедактированиеФайлаПослеВопроса",
		ЭтотОбъект, ОповещениеОЗавершении);
	ТекстВопроса = НСтр("ru = 'Вложение ""%1"" захвачено для редактирования.
		|Для продолжения надо завершить редактирование.'");
	ТекстВопроса = СтрЗаменить(ТекстВопроса, "%1", ЭлементСхемы.ИмяФайла);
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить("ЗакончитьРедактирование", НСтр("ru = 'Закончить редактирование'"));
	СписокКнопок.Добавить("Освободить",              НСтр("ru = 'Отменить редактирование'"));
	СписокКнопок.Добавить("Отменить",                НСтр("ru = 'Отменить'"));
	ПоказатьВопрос(Оповещение, ТекстВопроса, СписокКнопок);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсвободитьЗакончитьРедактированиеФайлаПослеВопроса(Результат, ОповещениеОЗавершении) Экспорт
	
	Если Результат = "Освободить" Тогда
		ОсвободитьФайл(ОповещениеОЗавершении);
	ИначеЕсли Результат = "ЗакончитьРедактирование" Тогда
		ЗакончитьРедактированиеФайла(ОповещениеОЗавершении);
	Иначе
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактированиеФайла(ОповещениеОЗавершении)
	
	ЭлементСхемы = ЭлементСхемыИнформацияОтправителя(ЭтотОбъект);
	ПараметрыОбновленияФайла = РаботаСФайламиСлужебныйКлиент.ПараметрыОбновленияФайла(
		ОповещениеОЗавершении, ЭлементСхемы.ПрисоединенныйФайл, УникальныйИдентификатор);
	
	РаботаСФайламиСлужебныйКлиент.ЗакончитьРедактированиеСОповещением(ПараметрыОбновленияФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсвободитьФайл(ОповещениеОЗавершении)
	
	ЭлементСхемы = ЭлементСхемыИнформацияОтправителя(ЭтотОбъект);
	ПараметрыОсвобожденияФайла = РаботаСФайламиСлужебныйКлиент.ПараметрыОсвобожденияФайла(
		ОповещениеОЗавершении, ЭлементСхемы.ПрисоединенныйФайл);
	
	РаботаСФайламиСлужебныйКлиент.ОсвободитьФайлСОповещением(ПараметрыОсвобожденияФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСуществующегоДокумента()
	
	Если Не ЗначениеЗаполнено(СуществующийДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
	ИнтерфейсДокументовЭДОКлиент.ОбработатьНаличиеСуществующегоДокументаДляВыбранногоФайлаXML(
		СуществующийДокумент, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершить(ОписаниеПомещенногоФайла, ДополнительныеПараметры) Экспорт
	Если ОписаниеПомещенногоФайла = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Ошибки = Новый Соответствие;
	Если ЗагрузкаИзФайлаНаСервереУспешна(ОписаниеПомещенногоФайла, Ошибки) Тогда
		Если ЗначениеЗаполнено(СуществующийДокумент) Тогда
			ПроверкаСуществующегоДокумента();
			Возврат;
		КонецЕсли;
		ПоказатьОповещениеПользователя(НСтр("ru = 'Файл успешно загружен.'"));
	Иначе
		Если Ошибки.Количество() = 0 Тогда
			ПоказатьПредупреждение(,
				ИнтерфейсДокументовЭДОКлиентСервер.ТекстСообщенияОбОтсутствииВозможностиЗагрузитьФайлXML());
			Возврат;
		ИначеЕсли Ошибки.Количество() = 1 Тогда
			Для Каждого Ошибка Из Ошибки Цикл
				Если Ошибка.Значение = Ложь Тогда
					ПоказатьПредупреждение(,Ошибка.Ключ);
					Возврат;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если ЗначениеЗаполнено(СуществующийДокумент) Тогда
			ПроверкаСуществующегоДокумента();
			Возврат;
		КонецЕсли;
		ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДО.Форма.СравнениеФормализованныхФайлов", 
			Новый Структура("ПараметрыОшибки", Ошибки), ЭтотОбъект,,,,
			Новый ОписаниеОповещения("ЗагрузитьИзФайлаПринудительно", ЭтотОбъект, ОписаниеПомещенногоФайла));

	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаПринудительно(Ответ, ОписаниеПомещенногоФайла) Экспорт
	Если Ответ = "Продолжить" Тогда
		ЗагрузкаИзФайлаНаСервереУспешна(ОписаниеПомещенногоФайла, Неопределено, Истина);
		ПоказатьОповещениеПользователя(НСтр("ru = 'Файл успешно загружен.'"));
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ЗагрузкаИзФайлаНаСервереУспешна(ВыбранныйФайл, ТаблицаОшибок, ЗагрузитьПринудительно = Ложь)

	ОсновнойФайл = ЭлектронныеДокументыЭДО.ОсновнойФайлИнформацииОтправителя(Объект.Ссылка);

	ИмяФайлаБезРасширения = ВыбранныйФайл.Имя;

	ТаблицаОшибок = ФорматыЭДО.ЗагружаемыйФайлСоответсвуетЗагруженномуФайлу(
		Объект.Организация, ВыбранныйФайл, ОсновнойФайл, ИмяФайлаБезРасширения);
	
	Если ТаблицаОшибок.Количество() = 0 Или ЗагрузитьПринудительно Тогда
		ОписаниеФайла = РаботаСФайламиБЭД.ОписаниеФайлаПоДаннымПомещенногоФайла(ВыбранныйФайл);
		ЭлектронныеДокументыЭДО.ЗаменитьДанныеОсновногоФайлаДокумента(Объект.Ссылка, ОписаниеФайла);

		ОбновитьПредставлениеЭлектронногоДокумента();

		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ВыбранныйФайл.Хранение);
		РезультатРаспознания = КонвертацияЭДО.ПараметрыФайлаПроизвольногоДокумента(ДвоичныеДанные,, Истина);
		ЭлементСхемы = СхемаРегламента.НайтиПоИдентификатору(ИдентификаторТекущегоЭлемента);
		ЗаполнитьРеквизитыПоФормализованномуДокументу(ДвоичныеДанные, РезультатРаспознания, ЭлементСхемы);
		Возврат Истина;
	КонецЕсли;
	СуществующийДокумент = ЭлектронныеДокументыЭДО.ИсходящийДокументПоИдентификаторуФайла(ВыбранныйФайл, Объект.Ссылка);
	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура ОткрытьНастройкиОтправки(Команда)
	
	КлючНастроекОтправки = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки();
	КлючНастроекОтправки.Отправитель = Объект.Организация;
	КлючНастроекОтправки.Получатель = Объект.Контрагент;
	КлючНастроекОтправки.Договор = Объект.ДоговорКонтрагента;
	КлючНастроекОтправки.ВидДокумента = Объект.ВидДокумента;
	
	Оповещение = Новый ОписаниеОповещения("ПослеИзмененияНастроекОтправки", ЭтотОбъект);
	
	ПараметрыОткрытия = НастройкиЭДОКлиент.НовыеПараметрыТранспортныхНастроек();
	ПараметрыОткрытия.КлючНастроек = КлючНастроекОтправки;
	ПараметрыОткрытия.ИдентификаторОтправителя = Объект.ИдентификаторОрганизации;
	ПараметрыОткрытия.ИдентификаторПолучателя = Объект.ИдентификаторКонтрагента;
	ПараметрыОткрытия.НастройкаДокумента = Истина;
	НастройкиЭДОКлиент.ОткрытьТранспортныеНастройкиОтправки(ПараметрыОткрытия, ЭтотОбъект, Оповещение, НастройкаОтправки());

КонецПроцедуры


&НаКлиенте
Процедура ОткрытьНастройкиФормирования(Команда)
	
	КлючНастроекОтправки = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки();
	КлючНастроекОтправки.Отправитель = Объект.Организация;
	КлючНастроекОтправки.Получатель = Объект.Контрагент;
	КлючНастроекОтправки.Договор = Объект.ДоговорКонтрагента;
	КлючНастроекОтправки.ВидДокумента = Объект.ВидДокумента;
	
	Оповещение = Новый ОписаниеОповещения("ПослеИзмененияНастроекОтправки", ЭтотОбъект);
	НастройкиЭДОКлиент.НастроитьРегламентЭДО(КлючНастроекОтправки, ЭтотОбъект, Оповещение, Истина, НастройкаОтправки());
	
КонецПроцедуры

&НаСервере
Функция НастройкаОтправки()
	
	Настройка = НастройкиЭДОКлиентСервер.НоваяНастройкаОтправки();
	Настройка.ИдентификаторОтправителя = Объект.ИдентификаторОрганизации;
	Настройка.ИдентификаторПолучателя = Объект.ИдентификаторКонтрагента;
	Настройка.ВидДокумента = Объект.ВидДокумента;
	Настройка.ВыгружатьДополнительныеСведения = Объект.ВыгружатьДополнительныеСведения;
	Настройка.Договор = Объект.ДоговорКонтрагента;
	Настройка.МаршрутПодписания = Объект.МаршрутПодписания;
	Настройка.ОбменБезПодписи = Объект.ОбменБезПодписи;
	Настройка.Отправитель = Объект.Организация;
	Настройка.Получатель = Объект.Контрагент;
	Настройка.СпособОбмена = Объект.СпособОбмена;
	Настройка.ТребуетсяИзвещениеОПолучении = Объект.ТребуетсяИзвещение;
	Настройка.ТребуетсяОтветнаяПодпись = Объект.ТребуетсяПодтверждение;
	Настройка.ЭтоНастройкаОтправки = Истина;
	
	ЭлементСхемы = ЭлементСхемыИнформацияОтправителя(ЭтотОбъект);
	РезультатРаспознания = ЭлектронныеДокументыЭДО.РаспознатьСообщение(ЭлементСхемы.Сообщение);
	
	Если ЗначениеЗаполнено(РезультатРаспознания) Тогда
		Настройка.Формат = РезультатРаспознания.ИсходныйФормат;
	КонецЕсли;
	Возврат Настройка;
	
КонецФункции

&НаКлиенте
Процедура ПослеИзмененияНастроекОтправки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ТипЗнч(Результат) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики();
	
	ЭлементСхемыИнформацияОтправителя = ЭлементСхемыИнформацияОтправителя(ЭтотОбъект);
	Если Не ЭлементСхемыИнформацияОтправителя.ФормированиеПоОбъектуУчета Тогда
		ПослеИзмененияНастроекОтправкиПроизвольногоДокумента(Результат);
	Иначе
		ПереформироватьДокумент(Результат, НСтр("ru = 'Изменение настроек формирования'"));
	КонецЕсли;
	ЭлементСхемыИнформацияОтправителя = ЭлементСхемыИнформацияОтправителя(ЭтотОбъект);
	
	Если ОбработкаНеисправностейБЭДКлиентСервер.ЕстьОшибки(КонтекстДиагностики) Тогда
		ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(КонтекстДиагностики);
	ИначеЕсли ЭлементСхемыИнформацияОтправителя.ФормированиеПоОбъектуУчета Тогда	
		ОбновитьДанныеДокументаЗавершениеФормированияЭлектронногоДокумента();
		ОжидатьФормированияПредставленияДокумента();
	Иначе
		ПриСозданииЧтенииНаСервере();
		ОжидатьФормированияПредставленияДокумента();
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПослеИзмененияНастроекОтправкиПроизвольногоДокумента(Настройки)
	
	Если Настройки <> Неопределено Тогда
			
		Объект.ИдентификаторОрганизации = Настройки.ИдентификаторОтправителя;
		Объект.ИдентификаторКонтрагента = Настройки.ИдентификаторПолучателя;
		Объект.ТребуетсяИзвещение = Настройки.ТребуетсяИзвещениеОПолучении;
		Объект.ТребуетсяПодтверждение = Настройки.ТребуетсяОтветнаяПодпись;
			
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("ЭтоНовыйДокумент", Не ЗначениеЗаполнено(Объект.Ссылка));
			
		Записать(ПараметрыЗаписи);	
			
		ПриСозданииЧтенииНаСервере();
					
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПереформированиеЗавершениеФормированияЭлектронногоДокумента(Результат, Контекст) Экспорт
	
	Если ОбработкаНеисправностейБЭДКлиентСервер.ЕстьОшибки(Результат.КонтекстДиагностики) Тогда
		ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(Результат.КонтекстДиагностики);
	Иначе
		Если Результат.Переформирован Или Результат.СформированоИсправление Тогда
			ОбновитьДанныеДокументаЗавершениеФормированияЭлектронногоДокумента(Результат.СформированныеДокументы);
			ОжидатьФормированияПредставленияДокумента();
			
			ПоказатьОповещениеПользователя(НСтр("ru = 'Переформирование'"),, НСтр("ru = 'Сформирован новый документ'"), 
				БиблиотекаКартинок.ЭмблемаСервиса1СЭДО48, СтатусОповещенияПользователя.Информация);
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Документ переформирован'"));
			
			Оповестить(ИнтерфейсДокументовЭДОКлиент.ИмяСобытияОбновленияСостоянияЭДО());
		Иначе
			Прочитать();
			Шаблон = НСтр("ru='Для документа ""%1"" уже существует электронный документ в формализованном виде'");
			ТекстСообщения = СтрШаблон(Шаблон, Результат.Контекст.Параметры.ОбъектУчета);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Результат.Контекст.Параметры.ОбъектУчета);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеДокументаЗавершениеФормированияЭлектронногоДокумента(СформированныеДокументы = Неопределено)
	
	Если СформированныеДокументы <> Неопределено 
		И СформированныеДокументы.Количество() Тогда
		Для Каждого СформированныйДокумент Из СформированныеДокументы Цикл
			АктуальныйЭлектронныйДокумент = СформированныйДокумент.Ключ;
		КонецЦикла;
	Иначе
		АктуальныйЭлектронныйДокумент = ИнтеграцияЭДО.АктуальныйЭлектронныйДокументОбъектаУчета(
			Основания.ВыгрузитьЗначения()[0], Объект.ВидДокумента, Объект.Контрагент, Объект.ДоговорКонтрагента);
	КонецЕсли;

	Если ЗначениеЗаполнено(АктуальныйЭлектронныйДокумент) Тогда
		ЗначениеВРеквизитФормы(АктуальныйЭлектронныйДокумент.ПолучитьОбъект(), "Объект");
		ПриСозданииЧтенииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутПодписанияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	АдресХраненияНастроек = АдресХраненияНастроекВыбораМаршрута();
	
	Если Не ЗначениеЗаполнено(АдресХраненияНастроек) Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеВыбораМаршрутаПодписания", ЭтотОбъект);
	МаршрутыПодписанияБЭДКлиент.ОткрытьВыборМаршрутаПодписанияПоПараметрам(ЭтотОбъект, АдресХраненияНастроек,
		Объект.ВидПодписи, Объект.Организация, ОповещениеОЗавершении);
		
КонецПроцедуры

&НаСервере
Функция АдресХраненияНастроекВыбораМаршрута()
	Возврат ИнтерфейсДокументовЭДО.СохранитьНастройкиВыбораМаршрутаПодписания(УникальныйИдентификатор,
		Объект.Организация, Объект.МаршрутПодписания, Объект.СписокПодписантов.Выгрузить());
КонецФункции

&НаКлиенте
Процедура ПослеВыбораМаршрутаПодписания(АдресХраненияНастроек, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(АдресХраненияНастроек) = Тип("Строка") И ЗначениеЗаполнено(АдресХраненияНастроек) Тогда
		ОбработатьПолученныеНастройкиВыбораМаршрутов(АдресХраненияНастроек);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПолученныеНастройкиВыбораМаршрутов(АдресНастроек)

	Настройки = ПолучитьИзВременногоХранилища(АдресНастроек);
	УдалитьИзВременногоХранилища(АдресНастроек);
	
	ПредставлениеНастроекВыбораМаршрута = Настройки.ПредставлениеНастроек;
	Объект.СписокПодписантов.Очистить();
	Если Настройки.ЗадаватьМаршрутВручную Тогда
		Объект.МаршрутПодписания = Справочники.МаршрутыПодписания.УказыватьПриСоздании;
		
		Для Каждого Подписант Из Настройки.Подписанты Цикл
			СтрокаПодписанта = Объект.СписокПодписантов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПодписанта, Подписант);
		КонецЦикла;
	Иначе	
	    Объект.МаршрутПодписания = Настройки.Маршрут;
	КонецЕсли;
	
	ОбновитьОтображениеМаршрутаПодписания();
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Переформирование

&НаКлиенте
Процедура ПереформироватьДокумент(Настройки = Неопределено, Комментарий = "")

	ЭлементСхемы = СхемаРегламента.НайтиПоИдентификатору(ИдентификаторТекущегоЭлемента);
	ПараметрыПереформирования = ИнтерфейсДокументовЭДОВызовСервера.ПараметрыПереформированияДокумента(
		ЭлементСхемы.Сообщение);
	ПараметрыПереформирования.Вставить("ИдентификаторПакета", ИдентификаторПакета);
	
	Если ЗначениеЗаполнено(Настройки) Тогда
		ПараметрыПереформирования.Вставить("Настройки", Настройки);
	КонецЕсли;
	Если НЕ ПустаяСтрока(Комментарий) Тогда
		ПараметрыПереформирования.Вставить("Комментарий", Комментарий);	
	КонецЕсли;
	
	Если Основания.Количество() > 1
		И Объект.ТипРегламента <> ПредопределенноеЗначение("Перечисление.ТипыРегламентовЭДО.УПД")
		Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПереформироватьДокументПослеВыбораОснования", 
			ЭтотОбъект, ПараметрыПереформирования);
		Основания.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru='Выберите документ для переформирования'"));
		Возврат;
	Иначе
		ПереформироватьДокументПослеВыбораОснования(Основания[0], ПараметрыПереформирования);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПереформироватьДокументПослеВыбораОснования(Результат, ПараметрыПереформирования) Экспорт
	
	Если Результат <> Неопределено Тогда
		ПараметрыПереформирования.Вставить("ОбъектУчета", Результат.Значение);
		
		Оповещение = Новый ОписаниеОповещения("ПереформированиеЗавершениеФормированияЭлектронногоДокумента", 
			ЭтотОбъект, ПараметрыПереформирования);
		ИнтерфейсДокументовЭДОКлиент.ПереформироватьДокумент(Оповещение, ПараметрыПереформирования);
	КонецЕсли;
	
КонецПроцедуры

#Область КонтекстныеПодсказки

&НаКлиенте
Процедура Подключаемый_ПанельКонтекстныхНовостей_ЭлементУправленияНажатие(Элемент)
	
	КонтекстныеПодсказкиБЭДКлиент.ЭлементУправленияНажатие(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьКонтекст(КатегорииПересчета = Неопределено) 
	
	Если Не КонтекстныеПодсказкиБЭД.ФункционалКонтекстныхПодсказокДоступен() Тогда 
		Возврат;
	КонецЕсли;  

	Категория = КонтекстныеПодсказкиБЭДКатегоризацияВызовСервера.Категория_СтатусДокументооборота();
	Если ЗначениеЗаполнено(Категория)  
			И ?(ЗначениеЗаполнено(КатегорииПересчета), КатегорииПересчета.Найти(Категория) <> Неопределено, Истина) Тогда 
		Значение = КонтекстныеПодсказкиБЭДКатегоризация.ЗначениеСостоянияВерсииЭД(СостояниеЭДО); 
		КонтекстныеПодсказкиБЭДКлиентСервер.УстановитьЗначениеКатегорииКонтекстаФормы(ЭтаФорма, Категория, Значение);
	КонецЕсли;  
	
	Категория = КонтекстныеПодсказкиБЭДКатегоризацияВызовСервера.Категория_ВидЭлектронногоДокумента();
	Если ЗначениеЗаполнено(Категория)  
			И ?(ЗначениеЗаполнено(КатегорииПересчета), КатегорииПересчета.Найти(Категория) <> Неопределено, Истина) Тогда 
		ОписаниеВидаДокумента = ЭлектронныеДокументыЭДО.ОписаниеВидаДокумента(Объект.ВидДокумента);
		Значение = КонтекстныеПодсказкиБЭДКатегоризация.ЗначениеВидаЭД(ОписаниеВидаДокумента.ТипДокумента); 
		КонтекстныеПодсказкиБЭДКлиентСервер.УстановитьЗначениеКатегорииКонтекстаФормы(ЭтаФорма, Категория, Значение);
	КонецЕсли; 
	
	Категория = КонтекстныеПодсказкиБЭДКатегоризацияВызовСервера.Категория_ОператорАбонента();
	Если ЗначениеЗаполнено(Категория)  
			И ?(ЗначениеЗаполнено(КатегорииПересчета), КатегорииПересчета.Найти(Категория) <> Неопределено, Истина) Тогда 
		Значение = КонтекстныеПодсказкиБЭДКатегоризация.ОператорАбонента(Объект.ИдентификаторКонтрагента); 
		КонтекстныеПодсказкиБЭДКлиентСервер.УстановитьЗначениеКатегорииКонтекстаФормы(ЭтаФорма, Категория, Значение);
	КонецЕсли;
	
	Категория = КонтекстныеПодсказкиБЭДКатегоризацияВызовСервера.Категория_КодОператораУчетнойЗаписиОрганизации();
	Если ЗначениеЗаполнено(Категория)  
			И ?(ЗначениеЗаполнено(КатегорииПересчета), КатегорииПересчета.Найти(Категория) <> Неопределено, Истина) Тогда 
		Значение = КонтекстныеПодсказкиБЭДКатегоризация.КодОператораУчетнойЗаписиОрганизации(Объект.Организация); 
		КонтекстныеПодсказкиБЭДКлиентСервер.УстановитьЗначениеКатегорииКонтекстаФормы(ЭтаФорма, Категория, Значение);
	КонецЕсли;
	
	Категория = КонтекстныеПодсказкиБЭДКатегоризацияВызовСервера.Категория_СуществуютНеверныеПодписиФайла();
	Если ЗначениеЗаполнено(Категория)  
			И ?(ЗначениеЗаполнено(КатегорииПересчета), КатегорииПересчета.Найти(Категория) <> Неопределено, Истина) Тогда 
		ЭлементСхемы = СхемаРегламента.НайтиПоИдентификатору(ИдентификаторТекущегоЭлемента);
		Значение = КонтекстныеПодсказкиБЭДКатегоризация.СуществуютНеверныеПодписиФайла(ЭлементСхемы.Сообщение); 
		КонтекстныеПодсказкиБЭДКлиентСервер.УстановитьЗначениеКатегорииКонтекстаФормы(ЭтаФорма, Категория, Значение);
	КонецЕсли;
	
	Категория = КонтекстныеПодсказкиБЭДКатегоризацияВызовСервера.Категория_СтатусОтраженияЭДВУчете();
	Если ЗначениеЗаполнено(Категория)  
			И ?(ЗначениеЗаполнено(КатегорииПересчета), КатегорииПересчета.Найти(Категория) <> Неопределено, Истина) Тогда 
		Значение = КонтекстныеПодсказкиБЭДКатегоризация.СтатусКонтроляОтраженияВУЧете(Объект.Ссылка); 
		КонтекстныеПодсказкиБЭДКлиентСервер.УстановитьЗначениеКатегорииКонтекстаФормы(ЭтаФорма, Категория, Значение);
	КонецЕсли;

	КонтекстныеПодсказкиБЭД.ОтобразитьАктуальныеДляКонтекстаНовости(ЭтотОбъект);
	
КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные).
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";	
	КонтекстныеПодсказкиБЭДКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПанельКонтекстныхНовостейОбработкаНавигационнойСсылки(Элемент, ПараметрНавигационнаяСсылка, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	КонтекстныеПодсказкиБЭДКлиент.ПанельКонтекстныхНовостей_ЭлементПанелиНовостейОбработкаНавигационнойСсылки(
		ЭтотОбъект,
		Элемент,
		ПараметрНавигационнаяСсылка,
		СтандартнаяОбработка);

КонецПроцедуры

#КонецОбласти  

#КонецОбласти

#Область РаботаСПакетом

&НаСервере
Функция СоставПакета_ОбработкаНавигационнойСсылкиНаСервере(Знач НавигационнаяСсылка)
	
	Возврат ПакетыДокументовЭДО.СоставПакета_ОбработкаНавигационнойСсылкиНаСервере(ЭтотОбъект, НавигационнаяСсылка);
	
КонецФункции

&НаКлиенте
Процедура СоставПакета_ОбработкаНавигационнойСсылкиПослеЗаписи(Результат, ДопПараметры) Экспорт

	СоставПакета_ОбработатьНавигационнуюСсылку(ДопПараметры.НавигационнаяСсылка, ДопПараметры.Элемент, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставПакета_ОбработатьНавигационнуюСсылку(НавигационнаяСсылка, Элемент, СтандартнаяОбработка)
	
	РезультатОбработки = СоставПакета_ОбработкаНавигационнойСсылкиНаСервере(НавигационнаяСсылка);
	ОжидатьФормированияПредставленияДокумента();
	
	ПакетыДокументовЭДОКлиент.ЭлементУправленияПакета_ОбработкаНавигационнойСсылки(
		ЭтотОбъект, Элемент, НавигационнаяСсылка, СтандартнаяОбработка, РезультатОбработки);
	
	Если РаботаСПрочтениямиВызовСервера.УстановитьСвойствоПрочтен(Объект.Ссылка, Истина) Тогда	
		Оповестить("ПрочтениеОбновитьСписок", Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры 

#КонецОбласти

#Область ПроверкаФормата

&НаСервереБезКонтекста
Функция ТребуетсяФормализованныйФормат(Знач ТипРегламента, Знач ВидДокумента)
	
	Результат = Ложь;
	
	ТребуетсяПоказатьОкно = ИнтерфейсДокументовЭДО.ТребуетсяПоказыватьОкноПредложенияОтправкиВФормализованномВиде();
	Если Не ТребуетсяПоказатьОкно Тогда
		Возврат Результат;
	КонецЕсли;

	Если ТипРегламента = Перечисления.ТипыРегламентовЭДО.Неформализованный
		И ЭлектронныеДокументыЭДО.ДляВидаДокументаЕстьФормализованныйФорматФНС(ВидДокумента) Тогда
			
		ВидФормализованногоДокумента = ЭлектронныеДокументыЭДО.ВидДокументаФормализованногоФорматаФНС(ВидДокумента);
		Если ЗначениеЗаполнено(ИнтеграцияЭДО.СписокОперацийВидаДокумента(ВидФормализованногоДокумента)) Тогда
			Результат = Истина;
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьОкноПредложенияОтправкиВФормализованномВидеПослеОтветаНаВопрос(РезультатОтветаНаВопрос,
	ОповещениеОЗавершении) Экспорт
	
	ИнтерфейсДокументовЭДОКлиентСервер.РазблокироватьЗаблокированныеЭлементыФормы(ЭтотОбъект, 
		ЗаблокированныеЭлементыФормы);
	
	Если РезультатОтветаНаВопрос = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатОтветаНаВопрос.БольшеНеЗадаватьЭтотВопрос Тогда
		ИнтерфейсДокументовЭДОКлиент.ЗаписатьНастройкуНеПоказыватьОкноПредложенияОтправкиВФормализованномВиде();
	КонецЕсли;
	
	Если РезультатОтветаНаВопрос.Значение = КодВозвратаДиалога.Да 
		Или РезультатОтветаНаВопрос.Значение = КодВозвратаДиалога.Нет Тогда
		ОкноОтправкиВФормализованномВидеПоказано = Истина;
	КонецЕсли;
	
	Если РезультатОтветаНаВопрос.Значение = КодВозвратаДиалога.Да Тогда
		Если Модифицированность Или Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ЗаписатьДокумент();
		КонецЕсли;
		Если Основания.Количество() = 1
			И Не ЗначениеЗаполнено(ИдентификаторПакета) Тогда
			ПереформироватьДокумент();
		Иначе
			Оповещение = Новый ОписаниеОповещения("ОткрытьПодборОбъектовУчетаПослеОтветаНаВопрос", ЭтотОбъект);
			ТекстВопроса = НСтр("ru='Для отправки документа в формализованном виде необходимо указать объект учета. 
				|Выполнить подбор?'");
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
	КонецЕсли;
	
	Если РезультатОтветаНаВопрос.Значение = КодВозвратаДиалога.Нет Тогда
		НачатьЗаписьДокумента(ОповещениеОЗавершении);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборОбъектовУчетаПослеОтветаНаВопрос(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Оповещение = Новый ОписаниеОповещения("ПереформироватьДокументПослеПодбораОбъектовУчета", ЭтотОбъект);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЭлектронныйДокумент", Объект.Ссылка);
		ПараметрыФормы.Вставить("ВидДокумента", Объект.ВидДокумента);
		ПараметрыФормы.Вставить("ДокументРаспознан", ЭлементСхемыИнформацияОтправителя(ЭтотОбъект).Распознан);
		ИнтерфейсДокументовЭДОКлиент.ОткрытьПодборОбъектовУчетаЭлектронногоДокумента(ПараметрыФормы, Оповещение);
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПереформироватьДокументПослеПодбораОбъектовУчета(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	Если Основания.Количество() Тогда
		ПереформироватьДокумент();
	КонецЕсли;
КонецПроцедуры	

#КонецОбласти

#КонецОбласти
