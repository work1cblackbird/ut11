#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Возвращает текст запроса для расчета статусов указания серий
//	Параметры:
//	 ПараметрыУказанияСерий - Структура - состав полей задается в функции ПроверкаИПодборПродукцииИСМП.ПараметрыУказанияСерий
//	Возвращаемое значение:
//	 (См. ИнтеграцияИС.ТекстЗапросаЗаполненияСтатусовУказанияСерий).
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	Возврат ИнтеграцияИС.ТекстЗапросаЗаполненияСтатусовУказанияСерий(
		Метаданные.Обработки.ВиртуальнаяАгрегацияУпаковокИСМП, ПараметрыУказанияСерий);
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПолучитьДанныеЗаполнения(Параметры, АдресРезультата) Экспорт
	
	ДанныеЗаполнения = Новый Структура();
	ДанныеЗаполнения.Вставить("ОстаткиПродукции",           НоваяОстаткиПродукции());
	ДанныеЗаполнения.Вставить("СуществующиеУпаковки",       НовоеДеревоУпаковок());
	ДанныеЗаполнения.Вставить("СписокИсторическихУпаковок", Новый СписокЗначений());
	ДанныеЗаполнения.Вставить("СоставИсторическихУпаковок", НовоеСоставИсторическихУпаковок());
	
	ЗаполнитьОстаткиПродукцииПоДокументу(Параметры, ДанныеЗаполнения);
	ЗаполнитьСлужебныеРеквизиты(ДанныеЗаполнения.ОстаткиПродукции);
	ЗаполнитьВложенныеЕдиницы(Параметры, ДанныеЗаполнения.ОстаткиПродукции);
	ОчиститьGTIN(ДанныеЗаполнения.ОстаткиПродукции);
	РегистрыСведений.ИсторияИспользованияСоставаУпаковкиИСМП.ЗаполнитьПоследнийИспользованныйСоставУпаковки(ДанныеЗаполнения.ОстаткиПродукции);
	
	ЗаполнитьСоставИсторическихУпаковок(Параметры, ДанныеЗаполнения);
	
	РегистрыСведений.ПулКодовМаркировкиСУЗ.ЗаполнитьДеревоСуществующихУпаковокПоДокументу(
		ДанныеЗаполнения.СуществующиеУпаковки, Параметры.Документ, Параметры.ВидПродукции, Ложь);
	
	ПоместитьВоВременноеХранилище(ДанныеЗаполнения, АдресРезультата);

КонецПроцедуры

Процедура УдалитьУпаковки(Параметры, АдресРезультата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЭтоЗаказНаЭмиссию = ТипЗнч(Параметры.Документ) = Тип("ДокументСсылка.ЗаказНаЭмиссиюКодовМаркировкиСУЗ");

	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных();
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПулКодовМаркировкиСУЗ");
		ЭлементБлокировки.УстановитьЗначение(?(ЭтоЗаказНаЭмиссию, "ЗаказНаЭмиссию", "ДокументОснование"), Параметры.Документ);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		ТекстЗапроса = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировки
		|ГДЕ
		|	ПулКодовМаркировки." + ?(ЭтоЗаказНаЭмиссию, "ЗаказНаЭмиссию", "ДокументОснование") + " = &Документ
		|	И ПулКодовМаркировки.ХешСуммаУпаковки = &ХешСуммаУпаковки
		|	И ПулКодовМаркировки.ДатаПечатиУниверсальная <> ДАТАВРЕМЯ(1, 1, 1)
		|";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Документ", Параметры.Документ);
		Запрос.УстановитьПараметр("ХешСуммаУпаковки", Параметры.ХешСуммаУпаковки);
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			ТекстОшибки = НСтр("ru = 'Нельзя удалять упаковки, для которых уже распечатаны коды маркировки.'");
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.ПулКодовМаркировкиСУЗ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор[?(ЭтоЗаказНаЭмиссию, "ЗаказНаЭмиссию", "ДокументОснование")].Установить(Параметры.Документ);
		НаборЗаписей.Прочитать();
		
		Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
			Если ЗаписьНабора.ХешСуммаУпаковки = Параметры.ХешСуммаУпаковки Тогда
				ЗаписьНабора.ШтрихкодУпаковки = Неопределено;
				ЗаписьНабора.ХешСуммаУпаковки = "";
			КонецЕсли;
		КонецЦикла;
		
		НаборЗаписей.Записать(Истина);
		
		ЗафиксироватьТранзакцию();
	
	Исключение
	
		ОтменитьТранзакцию();
		
		ТекстОшибки = НСтр("ru = 'Произошла ошибка при удалении сформированных упаковок.'");
		ТекстОшибки = ТекстОшибки + " " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ВызватьИсключение ТекстОшибки;
	
	КонецПопытки;
		
КонецПроцедуры

Процедура ЗаписатьУпаковки(Параметры, АдресРезультата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЭтоЗаказНаЭмиссию = ТипЗнч(Параметры.Документ) = Тип("ДокументСсылка.ЗаказНаЭмиссиюКодовМаркировкиСУЗ");
	
	ДеревоАгрегации = Параметры.ДеревоУпаковок;
	ДеревоАгрегации.Колонки.Добавить("Параметры", Новый ОписаниеТипов("Структура"));
	
	ТаблицаДляЗаписиИстории = ПолучитьТаблицуДляЗаписиИсторииИспользованияСоставаУпаковки(ДеревоАгрегации.Строки);
	
	ДеревоУпаковок = НовоеДеревоУпаковок();
	ДеревоУпаковок.Колонки.Добавить("ИдентификаторВложенныхЕдиниц", ОбщегоНазначения.ОписаниеТипаЧисло(5));

	СодержимоеУпаковок          = НоваяСоставУпаковки();
	СоответствиеВложенныхЕдиниц = Новый Соответствие;
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("СодержимоеУпаковок",           СодержимоеУпаковок);
	ПараметрыВыполнения.Вставить("СоответствиеВложенныхЕдиниц",  СоответствиеВложенныхЕдиниц);
	ПараметрыВыполнения.Вставить("СерийныеНомераНумератор",      Новый Соответствие);
	ПараметрыВыполнения.Вставить("ИдентификаторВложенныхЕдиниц", -1);
	ПараметрыВыполнения.Вставить("ХешСуммаУпаковки",             "");
	СформироватьСтрокиДереваУпаковок(ДеревоУпаковок, ДеревоАгрегации, ПараметрыВыполнения);
	
	ДеревоАгрегации     = Неопределено;
	ПараметрыВыполнения = Неопределено;
	
	СодержимоеУпаковок.Свернуть("Номенклатура,Характеристика,GTIN,Шаблон", "Количество");
	СодержимоеУпаковок.Колонки.Добавить("ИндексСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(5));
	Для ИндексСтроки = 0 По СодержимоеУпаковок.Количество() - 1 Цикл
		СодержимоеУпаковок[ИндексСтроки].ИндексСтроки = ИндексСтроки;
	КонецЦикла;
	
	НачатьТранзакцию();
	
	Попытка
	
		Блокировка = Новый БлокировкаДанных();
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПулКодовМаркировкиСУЗ");
		ЭлементБлокировки.УстановитьЗначение(?(ЭтоЗаказНаЭмиссию, "ЗаказНаЭмиссию", "ДокументОснование"), Параметры.Документ);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос();
		Запрос.Текст = ТекстЗапросаДляЗаписиУпаковок(ЭтоЗаказНаЭмиссию);
		Запрос.УстановитьПараметр("Документ",                Параметры.Документ);
		Запрос.УстановитьПараметр("СоставУпаковок",          СодержимоеУпаковок);
		Запрос.УстановитьПараметр("СтатусыВыведенИзОборота", РегистрыСведений.ПулКодовМаркировкиСУЗ.СтатусыВыведенИзОборота());
		Запрос.УстановитьПараметр("ПустаяНоменклатура",      ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		ВГраница = РезультатЗапроса.ВГраница();
		
		Выборка = РезультатЗапроса[ВГраница].Выбрать();
		Если Выборка.Количество() > 0 Тогда
			Пока Выборка.Следующий() Цикл
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(НСтр(
					"ru = 'Количества кодов маркировки (%1) по ""%2"" недостаточно для формирования %3 упаковок'"),
					Выборка.КоличествоКодов,
					ОбщегоНазначенияИС.ПредставлениеНоменклатуры(
						Выборка.Номенклатура,
						Выборка.Характеристика,,,
						ИнтеграцияИСМПКлиентСервер.ПредставлениеGTINОстаткиПоВидуПродукции(
							Выборка.ПредставлениеНоменклатуры,
							Параметры.ВидПродукции)),
					Выборка.Количество));
			КонецЦикла;
			ВызватьИсключение НСтр("ru = 'Кодов маркировки недостаточно для формирования упаковок'");
		КонецЕсли;
		
		СодержимоеУпаковок.Колонки.Добавить("КодыМаркировки",                     Новый ОписаниеТипов("Массив"));
		СодержимоеУпаковок.Колонки.Добавить("КоличествоВПотребительскойУпаковке", Новый ОписаниеТипов("Число"));
		СодержимоеУпаковок.Колонки.Добавить("ТребуетВзвешивания",                 Новый ОписаниеТипов("Булево"));
		СодержимоеУпаковок.Колонки.Добавить("ПроизвольнаяЕдиницаУчета",           Новый ОписаниеТипов("Булево"));
		
		ШтрихкодВключаетМРЦ = Параметры.ВидПродукции = Перечисления.ВидыПродукцииИС.Табак;
		Если ШтрихкодВключаетМРЦ Тогда
			
			ПользовательскиеПараметрыРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки();
			
			НастройкиРазбораКодаМаркировки = Новый Структура;
			НастройкиРазбораКодаМаркировки.Вставить("Кеш",              РазборКодаМаркировкиИССлужебныйКлиентСервер.ИнициализироватьНастройкиИспользующиеРезультатыПредыдущихРазборов());
			НастройкиРазбораКодаМаркировки.Вставить("Общие",            РазборКодаМаркировкиИССлужебныйПовтИсп.НастройкиРазбораКодаМаркировки());
			НастройкиРазбораКодаМаркировки.Вставить("Пользовательские", ПользовательскиеПараметрыРазбораКодаМаркировки);
			
		КонецЕсли;
		
		Отказ = Ложь;
		КодыМаркировкиСОшибками = Новый Массив;
		
		ВыборкаИндексСтроки = РезультатЗапроса[ВГраница - 1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаИндексСтроки.Следующий() Цикл
			
			Строка = СодержимоеУпаковок[ВыборкаИндексСтроки.ИндексСтроки];
			ЗаполнитьЗначенияСвойств(Строка, ВыборкаИндексСтроки,
				"КоличествоВПотребительскойУпаковке, ТребуетВзвешивания, ПроизвольнаяЕдиницаУчета");
			Количество = Строка.Количество;
			Выборка = ВыборкаИндексСтроки.Выбрать();
			Пока Выборка.Следующий() Цикл
				Если ШтрихкодВключаетМРЦ И Выборка.МаксимальнаяРозничнаяЦена > 0 Тогда
					КодМаркировки = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.Base64ВШтрихкод(Выборка.ПолныйКодМаркировки);
					ДанныеРазбораКодаМаркировки = ГрупповаяОбработкаШтрихкодовИС.ВидУпаковкиИПредставлениеШтрихкодаУпрощенныйРазбор(
						КодМаркировки, Параметры.ВидПродукции, Неопределено,
						НастройкиРазбораКодаМаркировки);
					
					Если ДанныеРазбораКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
						Или ДанныеРазбораКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
						СтруктураКодаМаркировки = Новый Структура;
						СтруктураКодаМаркировки.Вставить("КодМаркировки",           Выборка.КодМаркировки);
						СтруктураКодаМаркировки.Вставить("НормализованныйШтрихкод", ДанныеРазбораКодаМаркировки.НормализованныйШтрихкод);
						Строка.КодыМаркировки.Добавить(СтруктураКодаМаркировки);
					Иначе
						КодыМаркировкиСОшибками.Добавить(
							ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(КодМаркировки, ""));
						Если КодыМаркировкиСОшибками.Количество() = 10 Тогда
							Отказ = Истина;
							Прервать;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Строка.КодыМаркировки.Добавить(Выборка.КодМаркировки);
				КонецЕсли;
				
				Количество = Количество - 1;
				Если Количество = 0 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Отказ Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если КодыМаркировкиСОшибками.Количество() > 0 Тогда
			Если КодыМаркировкиСОшибками.Количество() = 1 Тогда
				ТекстОшибки = НСтр("ru = 'Код %1 не является штрихкодом потребительской или групповой упаковки табачной продукции.'");
			Иначе
				ТекстОшибки = НСтр("ru = 'Коды %1 не являются штрихкодами потребительской или групповой упаковки табачной продукции.'");
			КонецЕсли;
			ВызватьИсключение СтрШаблон(ТекстОшибки, СтрСоединить(КодыМаркировкиСОшибками, ","));
		КонецЕсли;
		
		СоответствиеКодовМаркировкиСтрокамУпаковок = Новый Соответствие;
		
		ПараметрыВыполнения = Новый Структура;
		ПараметрыВыполнения.Вставить("СодержимоеУпаковок",                         СодержимоеУпаковок);
		ПараметрыВыполнения.Вставить("СоответствиеВложенныхЕдиниц",                СоответствиеВложенныхЕдиниц);
		ПараметрыВыполнения.Вставить("СоответствиеКодовМаркировкиСтрокамУпаковок", СоответствиеКодовМаркировкиСтрокамУпаковок);
		ПараметрыВыполнения.Вставить("СодержимоеУпаковки",                         Новый Соответствие);
		ПараметрыВыполнения.Вставить("СохранятьСвязьСУпаковкойВерхнегоУровня",     Истина);
		ПараметрыВыполнения.Вставить("УпаковкаВерхнегоУровня",                     Неопределено);
		ПараметрыВыполнения.Вставить("ТипШтрихкодаМаркированногоТовара",
			ТипШтрихкодаМаркированногоТовараПоВидуПродукции(Параметры.ВидПродукции));
		
		ДополнитьСтрокиДереваУпаковокКодамиМаркировки(ДеревоУпаковок, ПараметрыВыполнения);
		
		ПараметрыВыполнения         = Неопределено;
		СодержимоеУпаковок          = Неопределено;
		СоответствиеВложенныхЕдиниц = Неопределено;
		
		ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(
			ШтрихкодированиеИС.ПолучитьСтруктуруРеквизитовДокумента(Параметры.Документ));
		
		ПараметрыСозданияШтрихкода = Справочники.ШтрихкодыУпаковокТоваров.ДополнительныеПараметрыСозданияШтрихкодовУпаковок();
		ПараметрыСозданияШтрихкода.ОтключитьПоискСуществующего = Истина;
		ПараметрыСозданияШтрихкода.ЗаполнятьУпаковку           = Истина;
		
		Справочники.ШтрихкодыУпаковокТоваров.СоздатьШтрихкодыУпаковокПоДаннымДерева(ДеревоУпаковок, ПараметрыСканирования, ПараметрыСозданияШтрихкода);
		
		НаборЗаписей = РегистрыСведений.ПулКодовМаркировкиСУЗ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор[?(ЭтоЗаказНаЭмиссию, "ЗаказНаЭмиссию", "ДокументОснование")].Установить(Параметры.Документ);
		НаборЗаписей.Прочитать();
		Для Каждого Запись Из НаборЗаписей Цикл
			СтрокаУпаковки = СоответствиеКодовМаркировкиСтрокамУпаковок[Запись.КодМаркировки];
			Если СтрокаУпаковки <> Неопределено Тогда
				Запись.ШтрихкодУпаковки = СтрокаУпаковки.ШтрихкодУпаковки;
				Запись.ХешСуммаУпаковки = СтрокаУпаковки.ХешСуммаУпаковки;
			КонецЕсли;
		КонецЦикла;
		НаборЗаписей.Записать();
		
		РегистрыСведений.ИсторияИспользованияСоставаУпаковкиИСМП.ЗаписатьДанныеВИсторию(ТаблицаДляЗаписиИстории);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Произошла ошибка при записи сформированных упаковок. %1'"),
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

Функция ХешСуммаУпаковки(СоставУпаковки) Экспорт
	
	ДанныеХешСуммыУпаковки = Новый СписокЗначений();
	
	Для Каждого СтрокаСостава Из СоставУпаковки Цикл
		ДанныеХешСуммыСтроки = Новый Массив();
		Если ЗначениеЗаполнено(СтрокаСостава.Номенклатура) Тогда
			ДанныеХешСуммыСтроки.Добавить(Строка(СтрокаСостава.Номенклатура.УникальныйИдентификатор()));
		Иначе
			ДанныеХешСуммыСтроки.Добавить(СтрокаСостава.GTIN);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаСостава.Характеристика) Тогда
			ДанныеХешСуммыСтроки.Добавить(Строка(СтрокаСостава.Характеристика.УникальныйИдентификатор()));
		КонецЕсли;
		
		ДанныеХешСуммыСтроки.Добавить(Формат(СтрокаСостава.Количество, "ЧДЦ=0; ЧРГ=;"));
		ДанныеХешСуммыУпаковки.Добавить(СтрСоединить(ДанныеХешСуммыСтроки));
	КонецЦикла;
	
	Возврат Справочники.ШтрихкодыУпаковокТоваров.ХешСуммаСодержимогоУпаковки(ДанныеХешСуммыУпаковки);
	
КонецФункции

Функция НовоеДеревоУпаковок() Экспорт
	
	ДеревоУпаковок = Новый ДеревоЗначений();
	ДеревоУпаковок.Колонки.Добавить("ВидУпаковки",               Новый ОписаниеТипов("ПеречислениеСсылка.ВидыУпаковокИС"));
	ДеревоУпаковок.Колонки.Добавить("ТипУпаковки",               Новый ОписаниеТипов("ПеречислениеСсылка.ТипыУпаковок"));
	ДеревоУпаковок.Колонки.Добавить("ТипШтрихкода",              Новый ОписаниеТипов("ПеречислениеСсылка.ТипыШтрихкодов"));
	ДеревоУпаковок.Колонки.Добавить("ТипНоменклатуры",           Метаданные.ОпределяемыеТипы.ТипНоменклатуры.Тип);
	ДеревоУпаковок.Колонки.Добавить("Номенклатура",              Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ДеревоУпаковок.Колонки.Добавить("Характеристика",            Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ДеревоУпаковок.Колонки.Добавить("Серия",                     Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ДеревоУпаковок.Колонки.Добавить("GTIN",                      Метаданные.ОпределяемыеТипы.GTIN.Тип);
	ДеревоУпаковок.Колонки.Добавить("Содержимое",                Новый ОписаниеТипов("Строка"));
	ДеревоУпаковок.Колонки.Добавить("Штрихкод",                  ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ДеревоУпаковок.Колонки.Добавить("Количество",                ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ДеревоУпаковок.Колонки.Добавить("КоличествоПотребительскихУпаковок", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	ДеревоУпаковок.Колонки.Добавить("ТребуетВзвешивания",        Новый ОписаниеТипов("Булево"));
	ДеревоУпаковок.Колонки.Добавить("ПроизвольнаяЕдиницаУчета",  Новый ОписаниеТипов("Булево"));
	ДеревоУпаковок.Колонки.Добавить("ШтрихкодУпаковки",          Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ДеревоУпаковок.Колонки.Добавить("ХешСуммаУпаковки",          ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ДеревоУпаковок.Колонки.Добавить("Шаблон",                    Новый ОписаниеТипов("ПеречислениеСсылка.ШаблоныКодовМаркировкиСУЗ"));
	ДеревоУпаковок.Колонки.Добавить("Упаковка",                  Метаданные.ОпределяемыеТипы.Упаковка.Тип);
	ДеревоУпаковок.Колонки.Добавить("СпособВводаВОборот",        Новый ОписаниеТипов("ПеречислениеСсылка.СпособыВводаВОборотСУЗ"));
	ДеревоУпаковок.Колонки.Добавить("ВидПродукции",              Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"));
	ДеревоУпаковок.Колонки.Добавить("ПредставлениеНоменклатуры", ОбщегоНазначения.ОписаниеТипаСтрока(255));
	ДеревоУпаковок.Колонки.Добавить("ХешСуммаНормализации",      ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ДеревоУпаковок.Колонки.Добавить("ХешСумма",                  ОбщегоНазначения.ОписаниеТипаСтрока(50));
	
	Возврат ДеревоУпаковок;
	
КонецФункции

Функция НоваяСоставУпаковки() Экспорт
	
	СоставУпаковки = Новый ТаблицаЗначений();
	СоставУпаковки.Колонки.Добавить("Номенклатура",              Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	СоставУпаковки.Колонки.Добавить("Характеристика",            Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	СоставУпаковки.Колонки.Добавить("Серия",                     Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	СоставУпаковки.Колонки.Добавить("Количество",                ОбщегоНазначения.ОписаниеТипаЧисло(10));
	СоставУпаковки.Колонки.Добавить("GTIN",                      Метаданные.ОпределяемыеТипы.GTIN.Тип);
	СоставУпаковки.Колонки.Добавить("Шаблон",                    Новый ОписаниеТипов("ПеречислениеСсылка.ШаблоныКодовМаркировкиСУЗ"));
	СоставУпаковки.Колонки.Добавить("ПредставлениеНоменклатуры", ОбщегоНазначения.ОписаниеТипаСтрока(255));
	
	Возврат СоставУпаковки;
	
КонецФункции

Функция НоваяВложенныеЕдиницы() Экспорт
	
	ВложенныеЕдиницы = Новый ТаблицаЗначений();
	ВложенныеЕдиницы.Колонки.Добавить("Номенклатура",   Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ВложенныеЕдиницы.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ВложенныеЕдиницы.Колонки.Добавить("Шаблон",         Новый ОписаниеТипов("ПеречислениеСсылка.ШаблоныКодовМаркировкиСУЗ"));
	ВложенныеЕдиницы.Колонки.Добавить("Количество",     ОбщегоНазначения.ОписаниеТипаЧисло(10));
	
	Возврат ВложенныеЕдиницы;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьОстаткиПродукцииПоДокументу(Параметры, ДанныеЗаполнения)
	
	ЭтоЗаказНаЭмиссию = ТипЗнч(Параметры.Документ) = Тип("ДокументСсылка.ЗаказНаЭмиссиюКодовМаркировкиСУЗ");
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ПулКодовМаркировки.Номенклатура   КАК Номенклатура,
	|	ПулКодовМаркировки.Характеристика КАК Характеристика,
	|	ПулКодовМаркировки.Шаблон         КАК Шаблон,
	|	ПулКодовМаркировки.GTIN           КАК GTIN,
	|	СУММА(ВЫБОР
	|		КОГДА ПулКодовМаркировки.ШтрихкодУпаковки = ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	|				И ПулКодовМаркировки.ДатаПечатиУниверсальная = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ)                            КАК Количество,
	|	СУММА(ВЫБОР
	|		КОГДА ПулКодовМаркировки.ШтрихкодУпаковки = ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ)                            КАК КоличествоВУпаковках,
	|	ЕСТЬNULL(КэшОписанияОстатков.Представление, """") КАК ПредставлениеНоменклатуры
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировки
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КэшОписанияОстатковИСМП КАК КэшОписанияОстатков
	|		ПО КэшОписанияОстатков.GTIN = ПулКодовМаркировки.GTIN
	|		И ПулКодовМаркировки.Номенклатура = &ПустаяНоменклатура
	|ГДЕ
	|	ПулКодовМаркировки." + ?(ЭтоЗаказНаЭмиссию, "ЗаказНаЭмиссию", "ДокументОснование") + " = &Документ
	|	И ПулКодовМаркировки.ВидПродукции = &ВидПродукции
	|	И НЕ ПулКодовМаркировки.Статус В (&СтатусыВыведенИзОборота)
	|	
	|СГРУППИРОВАТЬ ПО
	|	ПулКодовМаркировки.Номенклатура,
	|	ПулКодовМаркировки.Характеристика,
	|	ПулКодовМаркировки.Шаблон,
	|	ПулКодовМаркировки.GTIN,
	|	ЕСТЬNULL(КэшОписанияОстатков.Представление, """")
	|";
		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Документ",                 Параметры.Документ);
	Запрос.УстановитьПараметр("ВидПродукции",             Параметры.ВидПродукции);
	Запрос.УстановитьПараметр("СтатусыВыведенИзОборота",  РегистрыСведений.ПулКодовМаркировкиСУЗ.СтатусыВыведенИзОборота());
	Запрос.УстановитьПараметр("ПустаяНоменклатура",       ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ДанныеЗаполнения.ОстаткиПродукции.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.Остаток              = НоваяСтрока.Количество;
		НоваяСтрока.ЕстьСвободныйОстаток = НоваяСтрока.Количество > 0;
	КонецЦикла;
	
	ДанныеЗаполнения.ОстаткиПродукции.Сортировать("Номенклатура, Характеристика, ПредставлениеНоменклатуры, GTIN, Шаблон");
	
КонецПроцедуры

Процедура ЗаполнитьСлужебныеРеквизиты(Таблица)
	
	Если Таблица.Колонки.Найти("НомерСтроки") = Неопределено Тогда
		Таблица.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(5));
	КонецЕсли;
	
	Для Каждого Строка Из Таблица Цикл
		Строка.НомерСтроки = Таблица.Индекс(Строка) + 1;
	КонецЦикла;
	
	Таблица.Колонки.Добавить("ЕдиницаИзмерения", Метаданные.ОпределяемыеТипы.Упаковка.Тип);
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(Неопределено, Таблица);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Таблица", Таблица.Скопировать(, "НомерСтроки,ЕдиницаИзмерения"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.НомерСтроки,
	|	Таблица.ЕдиницаИзмерения
	|ПОМЕСТИТЬ ВТТаблица
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НомерСтроки,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЕдиницаИзмерения) КАК ЕдиницаИзмерения
	|ИЗ
	|	ВТТаблица";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Таблица.Колонки.Удалить("ЕдиницаИзмерения");
	Таблица.Колонки.Добавить("ЕдиницаИзмерения", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	
	Пока Выборка.Следующий() Цикл
		Таблица[Выборка.НомерСтроки - 1].ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьВложенныеЕдиницы(Параметры, ОстаткиПродукции)
	
	Если ОбщегоНазначенияИСКлиентСервер.ВидПродукцииИспользуетНаборы(Параметры.ВидПродукции) Тогда
		ЗаполнитьНаборы(Параметры, ОстаткиПродукции);
	КонецЕсли;
	
	Если ОбщегоНазначенияИСКлиентСервер.ВидПродукцииИспользуетГрупповыеУпаковки(Параметры.ВидПродукции) Тогда
		ЗаполнитьГрупповыеУпаковки(Параметры, ОстаткиПродукции);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНаборы(Параметры, ОстаткиПродукции)
	
	ШаблоныНабора = ИнтеграцияИСМПКлиентСервер.ШаблоныКодовПоВидуПродукции(Параметры.ВидПродукции, 5);
	
	Если ШаблоныНабора.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	Для Каждого Строка Из ОстаткиПродукции Цикл
		Если ШаблонЕстьВСписке(Строка.Шаблон, ШаблоныНабора) Тогда
			МассивСтрок.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДанных = ОстаткиПродукции.Скопировать(МассивСтрок, "НомерСтроки,Номенклатура,Характеристика,GTIN,Количество");
	
	ТаблицаДанных.Колонки.Добавить("Упаковка",            Метаданные.ОпределяемыеТипы.Упаковка.Тип);
	ТаблицаДанных.Колонки.Добавить("КоличествоУпаковок",  ОбщегоНазначения.ОписаниеТипаЧисло(15,3));
	
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		СтрокаДанных.Количество         = 1;
		СтрокаДанных.КоличествоУпаковок = 1;
	КонецЦикла;
	
	КомплектующиеНаборов = ИнтеграцияИСМП.КомплектующиеНаборов(ТаблицаДанных);
	Если КомплектующиеНаборов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеВложенныхЕдиниц = Новый Соответствие;
	СтруктураПоиска = Новый Структура("Номенклатура,Характеристика");
	НомерСтрокиНабора = 0;
	ПерейтиКСледующемуНабору = Ложь;
	Для Каждого КомплектующаяНабора Из КомплектующиеНаборов Цикл
		
		Если КомплектующаяНабора.НомерСтрокиНабора <> НомерСтрокиНабора Тогда
			СоответствиеВложенныхЕдиниц.Очистить();
			НомерСтрокиНабора = КомплектующаяНабора.НомерСтрокиНабора;
			СтрокаНабора = ОстаткиПродукции[НомерСтрокиНабора - 1];
			СтрокаНабора.ЭтоНабор = Истина;
			СтрокаНабора.ВложенныеЕдиницы = НоваяВложенныеЕдиницы();
			ПерейтиКСледующемуНабору = СтрокаНабора.Количество = 0;
		КонецЕсли;
		
		ВложеннаяЕдиница = СтрокаНабора.ВложенныеЕдиницы.Добавить();
		ЗаполнитьЗначенияСвойств(ВложеннаяЕдиница, КомплектующаяНабора);
		
		Если ПерейтиКСледующемуНабору Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, КомплектующаяНабора);
		НайденныеСтроки = ОстаткиПродукции.НайтиСтроки(СтруктураПоиска);
		КоличествоНаборовУменьшеноНа = 0;
		СтрокаВложеннойЕдиницы = Неопределено;
		Если НайденныеСтроки.Количество() = 0 Тогда
			КоличествоНаборовУменьшеноНа = СтрокаНабора.Количество;
			СтрокаНабора.Количество = 0;
		Иначе
			
			СтрокаВложеннойЕдиницы = НайденныеСтроки[0];
			ВложеннаяЕдиница.Шаблон = СтрокаВложеннойЕдиницы.Шаблон;
			ДоступноеКоличествоНаборов = Цел(СтрокаВложеннойЕдиницы.Количество / ВложеннаяЕдиница.Количество);
			Если СтрокаНабора.Количество > ДоступноеКоличествоНаборов Тогда
				КоличествоНаборовУменьшеноНа = СтрокаНабора.Количество - ДоступноеКоличествоНаборов;
				СтрокаНабора.Количество = ДоступноеКоличествоНаборов;
			КонецЕсли;
			
			КоличествоВложеннойЕдиницы = СтрокаНабора.Количество * ВложеннаяЕдиница.Количество;
			СтрокаВложеннойЕдиницы.КоличествоВУпаковках = СтрокаВложеннойЕдиницы.КоличествоВУпаковках + КоличествоВложеннойЕдиницы;
			СтрокаВложеннойЕдиницы.Количество           = СтрокаВложеннойЕдиницы.Количество - КоличествоВложеннойЕдиницы;
			СтрокаВложеннойЕдиницы.Остаток              = СтрокаВложеннойЕдиницы.Количество;
			СтрокаВложеннойЕдиницы.ЕстьСвободныйОстаток = СтрокаВложеннойЕдиницы.Количество > 0;
			
		КонецЕсли;
		
		СтрокаНабора.Остаток              = СтрокаНабора.Количество;
		СтрокаНабора.ЕстьСвободныйОстаток = СтрокаНабора.Количество > 0;
		
		Если КоличествоНаборовУменьшеноНа > 0 Тогда
			Для Каждого КлючИЗначение Из СоответствиеВложенныхЕдиниц Цикл
				Строка = ОстаткиПродукции[КлючИЗначение.Значение];
				КоличествоВложеннойЕдиницы = КоличествоНаборовУменьшеноНа * СтрокаНабора.ВложенныеЕдиницы[КлючИЗначение.Ключ].Количество;
				Строка.КоличествоВУпаковках = Строка.КоличествоВУпаковках - КоличествоВложеннойЕдиницы;
				Строка.Количество           = Строка.Количество + КоличествоВложеннойЕдиницы;
				Строка.Остаток              = Строка.Количество;
				Строка.ЕстьСвободныйОстаток = Строка.Количество > 0;
			КонецЦикла;
		КонецЕсли;
		
		Если СтрокаВложеннойЕдиницы <> Неопределено Тогда
			СоответствиеВложенныхЕдиниц.Вставить(
				СтрокаНабора.ВложенныеЕдиницы.Индекс(ВложеннаяЕдиница),
				ОстаткиПродукции.Индекс(СтрокаВложеннойЕдиницы));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьГрупповыеУпаковки(Параметры, ОстаткиПродукции)
	
	ШаблоныГрупповойУпаковки = ИнтеграцияИСМПКлиентСервер.ШаблоныКодовПоВидуПродукции(Параметры.ВидПродукции, 4);
	
	Если ШаблоныГрупповойУпаковки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиДляОбработки = Новый Массив;
	Данные = Новый Соответствие;
	Для Каждого Строка Из ОстаткиПродукции Цикл
		
		Если Не ШаблонЕстьВСписке(Строка.Шаблон, ШаблоныГрупповойУпаковки) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Строка.ХарактеристикиИспользуются Тогда
			НоменклатураХарактеристикаУказана = (ЗначениеЗаполнено(Строка.Номенклатура)
				И ЗначениеЗаполнено(Строка.Характеристика));
		Иначе
			НоменклатураХарактеристикаУказана = ЗначениеЗаполнено(Строка.Номенклатура);
		КонецЕсли;
			
		Если Не НоменклатураХарактеристикаУказана
			Или Не ЗначениеЗаполнено(Строка.GTIN) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("Номенклатура",                      Строка.Номенклатура);
		СтруктураДанных.Вставить("Характеристика",                    Строка.Характеристика);
		СтруктураДанных.Вставить("КоличествоПотребительскихУпаковок", 1);
		
		Данные.Вставить(Строка.GTIN, СтруктураДанных);
		
		СтрокиДляОбработки.Добавить(Строка);
		
	КонецЦикла;
	
	Если СтрокиДляОбработки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияИСМП.ЗаполнитьКоличествоПотребительскихУпаковокПоGTIN(Данные, Истина, Ложь);
	
	СтруктураПоиска = Новый Структура("Номенклатура,Характеристика");
	Для Каждого Строка Из СтрокиДляОбработки Цикл
		
		КоличествоПотребительскихУпаковок = Данные[Строка.GTIN].КоличествоПотребительскихУпаковок;
		Если КоличествоПотребительскихУпаковок = 1 Тогда
			Продолжить;
		КонецЕсли;
			
		Строка.ЭтоГрупповаяУпаковка = Истина;
		Строка.ВложенныеЕдиницы = НоваяВложенныеЕдиницы();
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка);
		НайденныеСтроки = ОстаткиПродукции.НайтиСтроки(СтруктураПоиска);
		СтрокаВложеннойЕдиницы = Неопределено;
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если Не ШаблонЕстьВСписке(НайденнаяСтрока.Шаблон, ШаблоныГрупповойУпаковки) Тогда
				СтрокаВложеннойЕдиницы = НайденнаяСтрока;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокаВложеннойЕдиницы = Неопределено Тогда
			Строка.Количество = 0;
		Иначе
		
			ВложеннаяЕдиница = Строка.ВложенныеЕдиницы.Добавить();
			ЗаполнитьЗначенияСвойств(ВложеннаяЕдиница, СтруктураПоиска);
			ВложеннаяЕдиница.Шаблон = СтрокаВложеннойЕдиницы.Шаблон;
			ВложеннаяЕдиница.Количество = КоличествоПотребительскихУпаковок;
			
			ДоступноеКоличествоУпаковок = Цел(СтрокаВложеннойЕдиницы.Количество / ВложеннаяЕдиница.Количество);
			
			Если Строка.Количество > ДоступноеКоличествоУпаковок Тогда
				Строка.Количество = ДоступноеКоличествоУпаковок;
			КонецЕсли;
			
			КоличествоВложеннойЕдиницы = Строка.Количество * ВложеннаяЕдиница.Количество;
			СтрокаВложеннойЕдиницы.КоличествоВУпаковках = СтрокаВложеннойЕдиницы.КоличествоВУпаковках + КоличествоВложеннойЕдиницы;
			СтрокаВложеннойЕдиницы.Количество           = СтрокаВложеннойЕдиницы.Количество - КоличествоВложеннойЕдиницы;
			СтрокаВложеннойЕдиницы.Остаток              = СтрокаВложеннойЕдиницы.Количество;
			СтрокаВложеннойЕдиницы.ЕстьСвободныйОстаток = СтрокаВложеннойЕдиницы.Количество > 0;
		КонецЕсли;
		
		Строка.Остаток              = Строка.Количество;
		Строка.ЕстьСвободныйОстаток = Строка.Количество > 0;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСоставИсторическихУпаковок(Параметры, ДанныеЗаполнения)
	
	ЭтоЗаказНаЭмиссию = ТипЗнч(Параметры.Документ) = Тип("ДокументСсылка.ЗаказНаЭмиссиюКодовМаркировкиСУЗ");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПулКодовМаркировки.Номенклатура   КАК Номенклатура,
	|	ПулКодовМаркировки.Характеристика КАК Характеристика,
	|	ПулКодовМаркировки.Шаблон         КАК Шаблон,
	|	ВЫБОР
	|		КОГДА ПулКодовМаркировки.Номенклатура = &ПустаяНоменклатура
	|			ТОГДА ПулКодовМаркировки.GTIN
	|		ИНАЧЕ """"
	|	КОНЕЦ                             КАК GTIN
	|ПОМЕСТИТЬ
	|	ВТОстаткиКодов
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировки
	|ГДЕ
	|	ПулКодовМаркировки." + ?(ЭтоЗаказНаЭмиссию, "ЗаказНаЭмиссию", "ДокументОснование") + " = &Документ
	|	И ПулКодовМаркировки.ВидПродукции = &ВидПродукции
	|	И НЕ ПулКодовМаркировки.Статус В (&СтатусыВыведенИзОборота)
	|	И ПулКодовМаркировки.ШтрихкодУпаковки = ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	|СГРУППИРОВАТЬ ПО
	|	ПулКодовМаркировки.Номенклатура,
	|	ПулКодовМаркировки.Характеристика,
	|	ПулКодовМаркировки.Шаблон,
	|	ВЫБОР
	|		КОГДА ПулКодовМаркировки.Номенклатура = &ПустаяНоменклатура
	|			ТОГДА ПулКодовМаркировки.GTIN
	|		ИНАЧЕ """"
	|	КОНЕЦ
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Шаблон,
	|	GTIN
	|;
	|
	|//////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПулКодовМаркировки.ХешСуммаУпаковки КАК ХешСуммаУпаковки
	|ПОМЕСТИТЬ
	|	ВТСуществующиеУпаковки
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировки
	|ГДЕ
	|	ПулКодовМаркировки.ВидПродукции = &ВидПродукции
	|	И ПулКодовМаркировки.ШтрихкодУпаковки <> ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	|	И ПулКодовМаркировки.ШтрихкодУпаковки.ДатаУпаковки > &НачальнаяДатаИсторииУпаковок
	|	И (ПулКодовМаркировки.Номенклатура, ПулКодовМаркировки.Характеристика) В (
	|		ВЫБРАТЬ
	|			Номенклатура,
	|			Характеристика
	|		ИЗ
	|			ВТОстаткиКодов
	|	)
	|СГРУППИРОВАТЬ ПО
	|	ПулКодовМаркировки.ХешСуммаУпаковки
	|;
	|
	|//////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПулКодовМаркировки.ХешСуммаУпаковки КАК ХешСуммаУпаковки
	|ПОМЕСТИТЬ
	|	ВТСуществующиеТолькоИзОстатков
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСуществующиеУпаковки КАК СуществующиеУпаковки
	|		ПО ПулКодовМаркировки.ХешСуммаУпаковки = СуществующиеУпаковки.ХешСуммаУпаковки
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТОстаткиКодов КАК ОстаткиКодов
	|		ПО ПулКодовМаркировки.Номенклатура = ОстаткиКодов.Номенклатура
	|		 И ПулКодовМаркировки.Характеристика = ОстаткиКодов.Характеристика
	|ГДЕ
	|	ПулКодовМаркировки.ВидПродукции = &ВидПродукции
	|СГРУППИРОВАТЬ ПО
	|	ПулКодовМаркировки.ХешСуммаУпаковки
	|ИМЕЮЩИЕ
	|	МИНИМУМ(ВЫБОР
	|		КОГДА ОстаткиКодов.Номенклатура ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ) = ИСТИНА
	|;
	|
	|//////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПулКодовМаркировки.ХешСуммаУпаковки КАК ХешСуммаУпаковки,
	|	ПулКодовМаркировки.Номенклатура     КАК Номенклатура,
	|	ПулКодовМаркировки.Характеристика   КАК Характеристика,
	|	ПулКодовМаркировки.Шаблон           КАК Шаблон,
	|	ПулКодовМаркировки.ВидПродукции     КАК ВидПродукции,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПулКодовМаркировки.ШтрихкодУпаковки) = 0
	|			ТОГДА 0
	|		ИНАЧЕ КОЛИЧЕСТВО(ПулКодовМаркировки.КодМаркировки) / КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПулКодовМаркировки.ШтрихкодУпаковки)
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА ПулКодовМаркировки.Номенклатура = &ПустаяНоменклатура
	|			ТОГДА ПулКодовМаркировки.GTIN
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК GTIN,
	|	ЕСТЬNULL(КэшОписанияОстатков.Представление, """") КАК ПредставлениеИзКешаОписанияОстатков,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ПулКодовМаркировки.Номенклатура)   КАК НоменклатураПредставление,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ПулКодовМаркировки.Характеристика) КАК ХарактеристикаПредставление
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСуществующиеТолькоИзОстатков КАК СуществующиеУпаковки
	|		ПО ПулКодовМаркировки.ХешСуммаУпаковки = СуществующиеУпаковки.ХешСуммаУпаковки
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КэшОписанияОстатковИСМП КАК КэшОписанияОстатков
	|		ПО КэшОписанияОстатков.GTIN = ПулКодовМаркировки.GTIN
	|		И ПулКодовМаркировки.Номенклатура = &ПустаяНоменклатура
	|ГДЕ
	|	ПулКодовМаркировки.ВидПродукции = &ВидПродукции
	|СГРУППИРОВАТЬ ПО
	|	ПулКодовМаркировки.ХешСуммаУпаковки,
	|	ПулКодовМаркировки.Номенклатура,
	|	ПулКодовМаркировки.Характеристика,
	|	ПулКодовМаркировки.Шаблон,
	|	ПулКодовМаркировки.ВидПродукции,
	|	ВЫБОР
	|		КОГДА ПулКодовМаркировки.Номенклатура = &ПустаяНоменклатура
	|			ТОГДА ПулКодовМаркировки.GTIN
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ЕСТЬNULL(КэшОписанияОстатков.Представление, """"),
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ПулКодовМаркировки.Номенклатура),
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ПулКодовМаркировки.Характеристика)
	|ИТОГИ ПО
	|	ХешСуммаУпаковки
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Документ",                     Параметры.Документ);
	Запрос.УстановитьПараметр("ВидПродукции",                 Параметры.ВидПродукции);
	Запрос.УстановитьПараметр("СтатусыВыведенИзОборота",      РегистрыСведений.ПулКодовМаркировкиСУЗ.СтатусыВыведенИзОборота());
	Запрос.УстановитьПараметр("НачальнаяДатаИсторииУпаковок", ДобавитьМесяц(ТекущаяДатаСеанса(), -6));
	Запрос.УстановитьПараметр("ПустаяНоменклатура",           ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
	
	Результат = Запрос.Выполнить();
	
	ШаблонПоУмолчанию = ИнтеграцияИСМПКлиентСервер.ШаблонКодаМаркировкиПоВидуПродукции(Параметры.ВидПродукции);
	
	КоличествоУникальныхУпаковок = 7;
	
	ВыборкаХешСуммаУпаковки = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаХешСуммаУпаковки.Следующий() Цикл
		
		СтрокаИсторическойУпаковки = ДанныеЗаполнения.СоставИсторическихУпаковок.Строки.Добавить();
		СтрокаИсторическойУпаковки.ХешСуммаУпаковки = ВыборкаХешСуммаУпаковки.ХешСуммаУпаковки;
		
		СодержимоеУпаковки = ИнтеграцияИС.ИнициализироватьСодержимоеУпаковки();
		
		Выборка = ВыборкаХешСуммаУпаковки.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(СтрокаИсторическойУпаковки.Строки.Добавить(), Выборка);
			
			Если ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
				
				ЭлементСодержимого = СодержимоеУпаковки.Добавить();
				ЭлементСодержимого.Номенклатура   = Выборка.НоменклатураПредставление;
				ЭлементСодержимого.Характеристика = Выборка.ХарактеристикаПредставление;
				ЭлементСодержимого.Серия          = "";
				ЭлементСодержимого.Количество     = Выборка.Количество;
				
			Иначе
				
				ПредставлениеНоменклатуры = ИнтеграцияИСМПКлиентСервер.ПредставлениеGTINОстаткиПоВидуПродукции(
					Выборка.ПредставлениеИзКешаОписанияОстатков,
					Выборка.ВидПродукции);
				
				Если ЗначениеЗаполнено(ПредставлениеНоменклатуры) Тогда
					
					ЭлементСодержимого = СодержимоеУпаковки.Добавить();
					ЭлементСодержимого.Номенклатура = ПредставлениеНоменклатуры;
					ЭлементСодержимого.Характеристика = "";
					ЭлементСодержимого.Серия          = "";
					ЭлементСодержимого.Количество   = Выборка.Количество;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаИсторическойУпаковки.Шаблон) Тогда
				СтрокаИсторическойУпаковки.Шаблон = ШаблонПоУмолчанию;
			КонецЕсли;
			
		КонецЦикла;
		
		ДанныеЗаполнения.СписокИсторическихУпаковок.Добавить(
			ВыборкаХешСуммаУпаковки.ХешСуммаУпаковки,
			ИнтеграцияИС.ПредставлениеСоставаУпаковки(СодержимоеУпаковки));
		
		Если ДанныеЗаполнения.СоставИсторическихУпаковок.Строки.Количество() = КоличествоУникальныхУпаковок Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьGTIN(ОстаткиПродукции)
	
	Для Каждого Строка Из ОстаткиПродукции Цикл
		Если ЗначениеЗаполнено(Строка.Номенклатура) Тогда
			Строка.GTIN = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция НовыйШтрихкод(ТипШтрихкода, КлючНумератора, ОбразецШтрихкода, СерийныеНомераНумератор) Экспорт
	
	Если ТипШтрихкода <> Перечисления.ТипыШтрихкодов.SSCC
		И ТипШтрихкода <> Перечисления.ТипыШтрихкодов.GS1_128 Тогда
		ТекстОшибки = НСтр("ru = 'Формирование штрихкодов типа ""%1"" не поддерживается.'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ТипШтрихкода);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	НовыйШтрихкод = "";
	ДанныеНумератора = ДанныеНумератораПоТипуШтрихкода(ТипШтрихкода, КлючНумератора, ОбразецШтрихкода, СерийныеНомераНумератор);
	
	Если ТипШтрихкода = Перечисления.ТипыШтрихкодов.SSCC Тогда
		
		ПараметрыШтрихкода = Новый Структура;
		ПараметрыШтрихкода.Вставить("ЦифраРасширения",    Лев(КлючНумератора, 1));
		ПараметрыШтрихкода.Вставить("ПрефиксКомпанииGS1", Сред(КлючНумератора, 2));
		ПараметрыШтрихкода.Вставить("СерийныйНомерSSCC",  ДанныеНумератора.СерийныйНомер);
		
		НовыйШтрихкод = ШтрихкодыУпаковокКлиентСервер.ШтрихкодSSCC(ПараметрыШтрихкода);
		
	ИначеЕсли ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_128 Тогда
		
		НовыйШтрихкод = ШтрихкодыУпаковокКлиентСервер.ШтрихкодGS1(ДанныеНумератора.ДанныеШтрихкода[ОбразецШтрихкода].ИдентификаторыПрименения);
		
	КонецЕсли;
	
	Возврат НовыйШтрихкод;
	
КонецФункции

Функция ДанныеНумератораПоТипуШтрихкода(ТипШтрихкода, КлючНумератора, ОбразецШтрихкода, СерийныеНомераНумератор)
	
	НумераторПоТипу = СерийныеНомераНумератор[ТипШтрихкода];
	
	Если НумераторПоТипу = Неопределено Тогда
		НумераторПоТипу = Новый Соответствие;
		СерийныеНомераНумератор.Вставить(ТипШтрихкода, НумераторПоТипу);
	КонецЕсли;
	
	ДанныеНумератора = НумераторПоТипу[КлючНумератора];
	
	Если ДанныеНумератора <> Неопределено Тогда
		ТекущийСерийныйНомер = ДанныеНумератора.СерийныйНомер;
	Иначе
		ТекущийСерийныйНомер = 0;
		ДанныеНумератора = Новый Структура;
		НумераторПоТипу.Вставить(КлючНумератора, ДанныеНумератора);
		Если ТипШтрихкода = Перечисления.ТипыШтрихкодов.SSCC Тогда
			
			ЧастьШтрихкодаСоСкобками = "(00)" + КлючНумератора;
			ЧастьШтрихкодаБезСкобок  = "00" + КлючНумератора;
			
			ТекстЗапроса = "
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	&ВыражениеСерийныйНомерSSCC КАК СерийныйНомерSSCC
			|ИЗ
			|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
			|ГДЕ
			|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода ПОДОБНО &ЧастьШтрихкода
			|	И ШтрихкодыУпаковокТоваров.ТипШтрихкода = &ТипШтрихкода
			|УПОРЯДОЧИТЬ ПО
			|	СерийныйНомерSSCC УБЫВ
			|";
			
			Запрос = Новый Запрос();
			Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&ВыражениеСерийныйНомерSSCC", "ПОДСТРОКА(ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода, 15, 7)");
			Запрос.УстановитьПараметр("ЧастьШтрихкода", ЧастьШтрихкодаСоСкобками + "%");
			Запрос.УстановитьПараметр("ТипШтрихкода",   ТипШтрихкода);
			
			Результат = Запрос.Выполнить();
			
			Если Результат.Пустой() Тогда
				Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&ВыражениеСерийныйНомерSSCC", "ПОДСТРОКА(ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода, 13, 7)");
				Запрос.УстановитьПараметр("ЧастьШтрихкода", ЧастьШтрихкодаБезСкобок + "%");
				Результат = Запрос.Выполнить();
			КонецЕсли;
			
			Если Не Результат.Пустой() Тогда
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				ТекущийСерийныйНомер = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Выборка.СерийныйНомерSSCC);
			КонецЕсли;
			
		ИначеЕсли ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_128 Тогда
			
			ДанныеНумератора.Вставить("ДанныеШтрихкода", Новый Соответствие);
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ШтрихкодыУпаковокТоваров.НомерПартии КАК НомерПартии
			|ПОМЕСТИТЬ МаксимальныйНомерПартии
			|ИЗ
			|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
			|ГДЕ
			|	ШтрихкодыУпаковокТоваров.ТипШтрихкода = &ТипШтрихкода
			|	И НЕ ШтрихкодыУпаковокТоваров.ПометкаУдаления
			|	И &УсловиеНомерПартии
			|УПОРЯДОЧИТЬ ПО
			|	ДатаУпаковки УБЫВ,
			|	НомерПартии УБЫВ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	МаксимальныйНомерПартии.НомерПартии КАК НомерПартии,
			|	ШтрихкодыУпаковокТоваров.СерийныйНомер КАК СерийныйНомер
			|ИЗ
			|	МаксимальныйНомерПартии КАК МаксимальныйНомерПартии
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
			|		ПО МаксимальныйНомерПартии.НомерПартии = ШтрихкодыУпаковокТоваров.НомерПартии
			|УПОРЯДОЧИТЬ ПО
			|	СерийныйНомер УБЫВ";
			
			Запрос.УстановитьПараметр("ТипШтрихкода", Перечисления.ТипыШтрихкодов.GS1_128);
			
			Если ЗначениеЗаполнено(КлючНумератора) Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНомерПартии", "ШтрихкодыУпаковокТоваров.НомерПартии = &НомерПартии");
				Запрос.УстановитьПараметр("НомерПартии", КлючНумератора);
			Иначе
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНомерПартии", "ИСТИНА");
			КонецЕсли;
			
			Результат = Запрос.Выполнить();
			
			Если Не Результат.Пустой() Тогда
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				ТекущийСерийныйНомер = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Выборка.СерийныйНомер);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	ТекущийСерийныйНомер = ТекущийСерийныйНомер + 1;
	
	ДанныеНумератора.Вставить("СерийныйНомер", ТекущийСерийныйНомер);
	
	Если ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_128 Тогда
		
		ДанныеШтрихкода = ДанныеНумератора.ДанныеШтрихкода[ОбразецШтрихкода];
		Если ДанныеШтрихкода = Неопределено Тогда
			
			ПараметрыШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкодаGS1СоСкобками(ОбразецШтрихкода);
			Если ПараметрыШтрихкода.Результат = Неопределено Тогда
				ВызватьИсключение СтрШаблон(
					НСтр("ru = 'Не удалось сгенерировать штрихкод упаковки по причине: %1'"),
					ПараметрыШтрихкода.ТекстОшибки);
			КонецЕсли;
			
			СерийныйНомерИндекс = -1;
			Для Индекс = 0 По ПараметрыШтрихкода.Результат.ВГраница() Цикл
				Если ПараметрыШтрихкода.Результат[Индекс].ИмяИдентификатора = "СЕРИЙНЫЙНОМЕР" Тогда
					СерийныйНомерИндекс = Индекс;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если СерийныйНомерИндекс = -1 Тогда
				ТекстОшибки = НСтр("ru = 'Не найден идентификатор применения ""Серийный номер""'");
				ВызватьИсключение СтрШаблон(
					НСтр("ru = 'Не удалось сгенерировать штрихкод упаковки по причине: %1'"),
					ТекстОшибки);
			КонецЕсли;
			
			ДанныеШтрихкода = Новый Структура;
			ДанныеШтрихкода.Вставить("СерийныйНомерИндекс",      СерийныйНомерИндекс);
			ДанныеШтрихкода.Вставить("ИдентификаторыПрименения", ПараметрыШтрихкода.Результат);
			
			ДанныеНумератора.ДанныеШтрихкода.Вставить(ОбразецШтрихкода, ДанныеШтрихкода);
			
		КонецЕсли;
		
		ДанныеШтрихкода.ИдентификаторыПрименения[ДанныеШтрихкода.СерийныйНомерИндекс].Значение = ТекущийСерийныйНомер;
		ДанныеШтрихкода.ИдентификаторыПрименения[ДанныеШтрихкода.СерийныйНомерИндекс].ЗначениеСтрокой = Строка(ТекущийСерийныйНомер);
	КонецЕсли;
	
	Возврат ДанныеНумератора;
	
КонецФункции

Функция НоваяОстаткиПродукции()
	
	ОстаткиПродукции = Новый ТаблицаЗначений();
	ОстаткиПродукции.Колонки.Добавить("НомерСтроки",                ОбщегоНазначения.ОписаниеТипаЧисло(5));
	ОстаткиПродукции.Колонки.Добавить("ТипНоменклатуры",            Метаданные.ОпределяемыеТипы.ТипНоменклатуры.Тип);
	ОстаткиПродукции.Колонки.Добавить("Номенклатура",               Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ОстаткиПродукции.Колонки.Добавить("GTIN",                       Метаданные.ОпределяемыеТипы.GTIN.Тип);
	ОстаткиПродукции.Колонки.Добавить("Шаблон",                     Новый ОписаниеТипов("ПеречислениеСсылка.ШаблоныКодовМаркировкиСУЗ"));
	ОстаткиПродукции.Колонки.Добавить("Характеристика",             Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ОстаткиПродукции.Колонки.Добавить("ХарактеристикиИспользуются", Новый ОписаниеТипов("Булево"));
	ОстаткиПродукции.Колонки.Добавить("Количество",                 ОбщегоНазначения.ОписаниеТипаЧисло(10));
	ОстаткиПродукции.Колонки.Добавить("Остаток",                    ОбщегоНазначения.ОписаниеТипаЧисло(10));
	ОстаткиПродукции.Колонки.Добавить("ЕстьСвободныйОстаток",       Новый ОписаниеТипов("Булево"));
	ОстаткиПродукции.Колонки.Добавить("КоличествоВУпаковках",       ОбщегоНазначения.ОписаниеТипаЧисло(10));
	ОстаткиПродукции.Колонки.Добавить("ПредставлениеНоменклатуры",  ОбщегоНазначения.ОписаниеТипаСтрока(255));
	ОстаткиПродукции.Колонки.Добавить("СоставУпаковки",             Новый ОписаниеТипов("ДеревоЗначений"));
	ОстаткиПродукции.Колонки.Добавить("ВложенныеЕдиницы",           Новый ОписаниеТипов("ТаблицаЗначений"));
	ОстаткиПродукции.Колонки.Добавить("ЭтоНабор",                   Новый ОписаниеТипов("Булево"));
	ОстаткиПродукции.Колонки.Добавить("ЭтоГрупповаяУпаковка",       Новый ОписаниеТипов("Булево"));
	
	Возврат ОстаткиПродукции;
	
КонецФункции

Функция НовоеСоставИсторическихУпаковок()
	
	СоставИсторическихУпаковок = Новый ДеревоЗначений();
	СоставИсторическихУпаковок.Колонки.Добавить("ХешСуммаУпаковки", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	СоставИсторическихУпаковок.Колонки.Добавить("Номенклатура",     Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	СоставИсторическихУпаковок.Колонки.Добавить("Характеристика",   Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	СоставИсторическихУпаковок.Колонки.Добавить("Серия",            Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	СоставИсторическихУпаковок.Колонки.Добавить("Количество",       ОбщегоНазначения.ОписаниеТипаЧисло(10));
	СоставИсторическихУпаковок.Колонки.Добавить("GTIN",             Метаданные.ОпределяемыеТипы.GTIN.Тип);
	СоставИсторическихУпаковок.Колонки.Добавить("Шаблон",           Новый ОписаниеТипов("ПеречислениеСсылка.ШаблоныКодовМаркировкиСУЗ"));
	СоставИсторическихУпаковок.Колонки.Добавить("ПредставлениеНоменклатуры", ОбщегоНазначения.ОписаниеТипаСтрока(255));
	
	Возврат СоставИсторическихУпаковок;
	
КонецФункции

Функция ШаблонЕстьВСписке(Шаблон, СписокШаблонов)
	
	Возврат СписокШаблонов.НайтиПоЗначению(Шаблон) <> Неопределено;
	
КонецФункции

#Область ЗаписьУпаковок

Функция ПолучитьТаблицуДляЗаписиИсторииИспользованияСоставаУпаковки(Источник)
	
	ТаблицаДляЗаписиИстории = РегистрыСведений.ИсторияИспользованияСоставаУпаковкиИСМП.ИнициализироватьТаблицуДляЗаписиИстории();
	
	СписокСвойств = "Номенклатура,Характеристика,GTIN,ХешСуммаУпаковки";
	
	Для Каждого СтрокаСостава Из Источник Цикл
		Если СтрокаСостава.ХешСуммаУпаковки <> ""
			И СтрокаСостава.ТипШтрихкода <> Перечисления.ТипыШтрихкодов.GS1_DataMatrix
			И (ЗначениеЗаполнено(СтрокаСостава.Номенклатура)
			Или ЗначениеЗаполнено(СтрокаСостава.GTIN)) Тогда
			СтрокаТаблицы = ТаблицаДляЗаписиИстории.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаСостава, СписокСвойств);
			ДеревоСоставаУпаковки = РегистрыСведений.ИсторияИспользованияСоставаУпаковкиИСМП.ИнициализироватьСоставУпаковки();
			СкопироватьСтрокиДерева(ДеревоСоставаУпаковки, СтрокаСостава.СоставУпаковки);
			Строкатаблицы.СоставУпаковки = Новый ХранилищеЗначения(ДеревоСоставаУпаковки);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаДляЗаписиИстории;
	
КонецФункции

Процедура СкопироватьСтрокиДерева(Приемник, Источник)
	
	Для Каждого СтрокаИсточника Из Источник.Строки Цикл
		СтрокаПриемника = Приемник.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПриемника, СтрокаИсточника);
		СкопироватьСтрокиДерева(СтрокаПриемника, СтрокаИсточника);
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьСтрокиДереваУпаковок(Приемник, Источник, Параметры, Делитель = 1)
	
	Для Каждого СтрокаИсточника Из Источник.Строки Цикл
		
		Если СтрокаИсточника.Параметры.Количество() = 0 Тогда
			
			Если СтрокаИсточника.Родитель = Неопределено Тогда
				Параметры.ИдентификаторВложенныхЕдиниц = Параметры.ИдентификаторВложенныхЕдиниц + 1;
				Параметры.СоответствиеВложенныхЕдиниц.Вставить(Параметры.ИдентификаторВложенныхЕдиниц, НоваяСоставУпаковки());
				Параметры.СоответствиеВложенныхЕдиниц[Параметры.ИдентификаторВложенныхЕдиниц].Колонки.Добавить(
					"ХешСуммаУпаковки", ОбщегоНазначения.ОписаниеТипаСтрока(50));
				Параметры.СоответствиеВложенныхЕдиниц[Параметры.ИдентификаторВложенныхЕдиниц].Колонки.Добавить(
					"Коэффициент", ОбщегоНазначения.ОписаниеТипаЧисло(10));
				Параметры.СоответствиеВложенныхЕдиниц[Параметры.ИдентификаторВложенныхЕдиниц].Колонки.Добавить(
					"ВложенныеЕдиницы", Новый ОписаниеТипов("ТаблицаЗначений"));
				Параметры.ХешСуммаУпаковки = СтрокаИсточника.ХешСуммаУпаковки;
			КонецЕсли;
			
			ФормироватьВложенныеУпаковки = Истина;
			
			Если СтрокаИсточника.ХешСуммаУпаковки = ""
				Или СтрокаИсточника.Родитель = Неопределено
				И СтрокаИсточника.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataMatrix Тогда
				
				ТипУпаковки = Неопределено;
				ФормироватьВложенныеУпаковки = Ложь;
				
				СтрокаСодержимогоУпаковок = Параметры.СодержимоеУпаковок.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаСодержимогоУпаковок, СтрокаИсточника,, "Количество");
				СтрокаСодержимогоУпаковок.Количество = СтрокаИсточника.КоличествоИтог;
				
				СтрокаВложенныхЕдиниц = Параметры.СоответствиеВложенныхЕдиниц[Параметры.ИдентификаторВложенныхЕдиниц].Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаВложенныхЕдиниц, СтрокаИсточника,, "Количество,ХешСуммаУпаковки");
				СтрокаВложенныхЕдиниц.Количество = СтрокаИсточника.КоличествоИтог / Делитель;
				СтрокаВложенныхЕдиниц.ХешСуммаУпаковки = Параметры.ХешСуммаУпаковки;
				
				Если СтрокаИсточника.ЭтоНабор
					Или СтрокаИсточника.ЭтоГрупповаяУпаковка Тогда
					СтрокаВложенныхЕдиниц.ВложенныеЕдиницы = НоваяСоставУпаковки();
					Для Каждого ВложеннаяЕдиница Из СтрокаИсточника.ВложенныеЕдиницы Цикл
						СтрокаСодержимогоУпаковок = Параметры.СодержимоеУпаковок.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаСодержимогоУпаковок, ВложеннаяЕдиница,, "Количество");
						СтрокаСодержимогоУпаковок.Количество = ВложеннаяЕдиница.Количество * СтрокаИсточника.КоличествоИтог;
						
						ВложеннаяСтрокаВложенныхЕдиниц = СтрокаВложенныхЕдиниц.ВложенныеЕдиницы.Добавить();
						ЗаполнитьЗначенияСвойств(ВложеннаяСтрокаВложенныхЕдиниц, ВложеннаяЕдиница,, "Количество");
						ВложеннаяСтрокаВложенныхЕдиниц.Количество = ВложеннаяЕдиница.Количество;
					КонецЦикла;
				КонецЕсли;
				
			ИначеЕсли Не ЗначениеЗаполнено(СтрокаИсточника.Номенклатура)
				И Не ЗначениеЗаполнено(СтрокаИсточника.GTIN) Тогда
				
				ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка;
				
			Иначе
				
				Если СтрокаИсточника.Коэффициент > 0
					Или ЗначениеЗаполнено(СтрокаИсточника.Номенклатура)
					Или ЗначениеЗаполнено(СтрокаИсточника.GTIN) Тогда
					ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
				Иначе
					ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка;
				КонецЕсли;
				
				Если СтрокаИсточника.Строки.Количество() = 0 Тогда
					ФормироватьВложенныеУпаковки = Ложь;
					СтрокаСодержимогоУпаковок = Параметры.СодержимоеУпаковок.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаСодержимогоУпаковок, СтрокаИсточника,, "Количество");
					СтрокаСодержимогоУпаковок.Количество = СтрокаИсточника.Количество * СтрокаИсточника.КоличествоИтог;
					
					СтрокаВложенныхЕдиниц = Параметры.СоответствиеВложенныхЕдиниц[Параметры.ИдентификаторВложенныхЕдиниц].Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаВложенныхЕдиниц, СтрокаСодержимогоУпаковок,, "Количество");
					СтрокаВложенныхЕдиниц.Количество = СтрокаИсточника.Количество;
				КонецЕсли;
				
			КонецЕсли;
			
			СтрокаИсточника.Параметры.Вставить("ТипУпаковки", ТипУпаковки);
			СтрокаИсточника.Параметры.Вставить("ФормироватьВложенныеУпаковки", ФормироватьВложенныеУпаковки);
			
		КонецЕсли;
		
		СформироватьВиртуальнуюУпаковку = Ложь;
		Если СтрокаИсточника.Параметры.ТипУпаковки = Неопределено Тогда
			Если СтрокаИсточника.Родитель = Неопределено Тогда
				СформироватьВиртуальнуюУпаковку = Истина;
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Для Счетчик = 1 По СтрокаИсточника.КоличествоИтог / Делитель Цикл
			СтрокаПриемника = Приемник.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПриемника, СтрокаИсточника,, "ХешСуммаУпаковки,Количество");
			СтрокаПриемника.ТипУпаковки = СтрокаИсточника.Параметры.ТипУпаковки;
			СтрокаПриемника.ИдентификаторВложенныхЕдиниц = Параметры.ИдентификаторВложенныхЕдиниц;
			СтрокаПриемника.ХешСуммаУпаковки = Параметры.ХешСуммаУпаковки;
			СтрокаПриемника.Количество = СтрокаИсточника.Коэффициент;
			Если СформироватьВиртуальнуюУпаковку Тогда
				Прервать;
			КонецЕсли;
			Если СтрокаИсточника.ХешСуммаУпаковки <> "" Тогда
				СтрокаПриемника.Штрихкод = НовыйШтрихкод(СтрокаИсточника.ТипШтрихкода,
					СтрокаИсточника.КлючНумератора, СтрокаИсточника.ОбразецШтрихкода, Параметры.СерийныеНомераНумератор);
			КонецЕсли;
			Если СтрокаИсточника.Параметры.ФормироватьВложенныеУпаковки Тогда
				СформироватьСтрокиДереваУпаковок(СтрокаПриемника, СтрокаИсточника, Параметры, СтрокаИсточника.КоличествоИтог);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьСтрокиДереваУпаковокКодамиМаркировки(ЭлементДерева, Параметры)
	
	ВГраница = ЭлементДерева.Строки.Количество() - 1;
	Для ИндексСтроки = 0 По ВГраница Цикл
		СтрокаДереваУпаковок = ЭлементДерева.Строки[ВГраница - ИндексСтроки];
		
		Если Параметры.СохранятьСвязьСУпаковкойВерхнегоУровня
			И СтрокаДереваУпаковок.Родитель = Неопределено Тогда
			Параметры.Вставить("УпаковкаВерхнегоУровня", СтрокаДереваУпаковок);
		КонецЕсли;
		
		Если СтрокаДереваУпаковок.Строки.Количество() = 0 Тогда
			
			ВложенныеЕдиницы = Параметры.СоответствиеВложенныхЕдиниц[СтрокаДереваУпаковок.ИдентификаторВложенныхЕдиниц];
			СодержимоеТекущейУпаковки = Параметры.СодержимоеУпаковки[СтрокаДереваУпаковок.ИдентификаторВложенныхЕдиниц];
			Если СодержимоеТекущейУпаковки = Неопределено Тогда
				СодержимоеТекущейУпаковки = Новый Соответствие;
				СтруктураПоиска = Новый Структура("Номенклатура,Характеристика,Шаблон,GTIN");
				Для Каждого ВложеннаяЕдиница Из ВложенныеЕдиницы Цикл
					ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВложеннаяЕдиница);
					НайденныеСтроки = Параметры.СодержимоеУпаковок.НайтиСтроки(СтруктураПоиска);
					СодержимоеТекущейУпаковки.Вставить(ВложеннаяЕдиница, НайденныеСтроки[0]);
					Для Каждого СтрокаВложеннойЕдиницы Из ВложеннаяЕдиница.ВложенныеЕдиницы Цикл
						ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаВложеннойЕдиницы);
						НайденныеСтроки = Параметры.СодержимоеУпаковок.НайтиСтроки(СтруктураПоиска);
						СодержимоеТекущейУпаковки.Вставить(СтрокаВложеннойЕдиницы, НайденныеСтроки[0]);
					КонецЦикла;
				КонецЦикла;
				
				Параметры.СодержимоеУпаковки = Новый Соответствие;
				Параметры.СодержимоеУпаковки.Вставить(СтрокаДереваУпаковок.ИдентификаторВложенныхЕдиниц, СодержимоеТекущейУпаковки);
			КонецЕсли;
			
			СтрокаПродукции = Неопределено;
			Для Каждого ВложеннаяЕдиница Из ВложенныеЕдиницы Цикл
				
				СодержимоеВложеннойЕдиницы = СодержимоеТекущейУпаковки[ВложеннаяЕдиница];
				КодыМаркировки = СодержимоеВложеннойЕдиницы.КодыМаркировки;
				
				Если ВложеннаяЕдиница.ВложенныеЕдиницы.Количество() = 0 Тогда
					ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
					Количество  = 1;
				ИначеЕсли ВложеннаяЕдиница.Коэффициент = 0 Тогда
					ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка;
					Количество  = 0;
				Иначе
					ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
					Количество  = ВложеннаяЕдиница.Коэффициент;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаДереваУпаковок.ТипУпаковки) Тогда
					СтрокаУпаковки = СтрокаДереваУпаковок;
				Иначе
					ЭлементДерева.Строки.Удалить(СтрокаДереваУпаковок);
					СтрокаДереваУпаковок = ЭлементДерева;
					СтрокаУпаковки = Неопределено;
				КонецЕсли;
				
				Для СчетчикВложеннаяЕдиница = 1 По ВложеннаяЕдиница.Количество Цикл
					
					Если ТипЗнч(КодыМаркировки[0]) = Тип("Структура") Тогда
						КодМаркировки           = КодыМаркировки[0].КодМаркировки;
						НормализованныйШтрихкод = КодыМаркировки[0].НормализованныйШтрихкод;
					Иначе
						КодМаркировки           = КодыМаркировки[0];
						НормализованныйШтрихкод = КодыМаркировки[0];
					КонецЕсли;
					
					СтрокаПродукции = СтрокаДереваУпаковок.Строки.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаПродукции, ВложеннаяЕдиница, "Номенклатура,Характеристика,Серия,GTIN,ХешСуммаУпаковки");
					СтрокаПродукции.ТипШтрихкода             = Перечисления.ТипыШтрихкодов.GS1_DataMatrix;
					СтрокаПродукции.ТипУпаковки              = ТипУпаковки;
					СтрокаПродукции.Штрихкод                 = НормализованныйШтрихкод;
					СтрокаПродукции.ПроизвольнаяЕдиницаУчета = СодержимоеВложеннойЕдиницы.ПроизвольнаяЕдиницаУчета;
					СтрокаПродукции.ТребуетВзвешивания       = СодержимоеВложеннойЕдиницы.ТребуетВзвешивания;
					
					Если СтрокаУпаковки = Неопределено Тогда
						Параметры.СоответствиеКодовМаркировкиСтрокамУпаковок.Вставить(КодМаркировки, СтрокаПродукции);
					ИначеЕсли Параметры.СохранятьСвязьСУпаковкойВерхнегоУровня Тогда
						Параметры.СоответствиеКодовМаркировкиСтрокамУпаковок.Вставить(КодМаркировки, Параметры.УпаковкаВерхнегоУровня);
					Иначе
						Параметры.СоответствиеКодовМаркировкиСтрокамУпаковок.Вставить(КодМаркировки, СтрокаУпаковки);
					КонецЕсли;
					
					КодыМаркировки.Удалить(0);
					
					КоличествоПотребительскихУпаковокПродукции = 0;
					КоличествоПродукции                        = 0;
					Для Каждого СтрокаВложеннойЕдиницы Из ВложеннаяЕдиница.ВложенныеЕдиницы Цикл
						
						СодержимоеСтрокиВложеннойЕдиницы = СодержимоеТекущейУпаковки[СтрокаВложеннойЕдиницы];
						ВложенныеКодыМаркировки = СодержимоеСтрокиВложеннойЕдиницы.КодыМаркировки;
						Если СодержимоеСтрокиВложеннойЕдиницы.ПроизвольнаяЕдиницаУчета Тогда
							КоличествоПотребительскихУпаковокВложеннойПродукции = 1;
							КоличествоВложеннойПродукции                        = СодержимоеСтрокиВложеннойЕдиницы.КоличествоВПотребительскойУпаковке;
						Иначе
							КоличествоПотребительскихУпаковокВложеннойПродукции = 0;
							КоличествоВложеннойПродукции                        = 1;
						КонецЕсли;
						КоличествоПотребительскихУпаковокПродукции = КоличествоПотребительскихУпаковокПродукции
							+ КоличествоПотребительскихУпаковокВложеннойПродукции * СтрокаВложеннойЕдиницы.Количество;
						КоличествоПродукции = КоличествоПродукции
							+ КоличествоВложеннойПродукции * СтрокаВложеннойЕдиницы.Количество;
						
						Для СчетчикСтрокаВложеннойЕдиницы = 1 По СтрокаВложеннойЕдиницы.Количество Цикл
							Если ТипЗнч(ВложенныеКодыМаркировки[0]) = Тип("Структура") Тогда
								КодМаркировки           = ВложенныеКодыМаркировки[0].КодМаркировки;
								НормализованныйШтрихкод = ВложенныеКодыМаркировки[0].НормализованныйШтрихкод;
							Иначе
								КодМаркировки           = ВложенныеКодыМаркировки[0];
								НормализованныйШтрихкод = ВложенныеКодыМаркировки[0];
							КонецЕсли;
							
							СтрокаВложеннойПродукции = СтрокаПродукции.Строки.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаВложеннойПродукции, СтрокаВложеннойЕдиницы, "Номенклатура,Характеристика,Серия,GTIN");
							СтрокаВложеннойПродукции.ТипШтрихкода                      = Параметры.ТипШтрихкодаМаркированногоТовара;
							СтрокаВложеннойПродукции.ТипУпаковки                       = Перечисления.ТипыУпаковок.МаркированныйТовар;
							СтрокаВложеннойПродукции.Штрихкод                          = НормализованныйШтрихкод;
							СтрокаВложеннойПродукции.ПроизвольнаяЕдиницаУчета          = СодержимоеСтрокиВложеннойЕдиницы.ПроизвольнаяЕдиницаУчета;
							СтрокаВложеннойПродукции.ТребуетВзвешивания                = СодержимоеСтрокиВложеннойЕдиницы.ТребуетВзвешивания;
							СтрокаВложеннойПродукции.КоличествоПотребительскихУпаковок = КоличествоПотребительскихУпаковокВложеннойПродукции;
							СтрокаВложеннойПродукции.Количество                        = КоличествоВложеннойПродукции;
							
							Параметры.СоответствиеКодовМаркировкиСтрокамУпаковок.Вставить(КодМаркировки, СтрокаПродукции);
							ВложенныеКодыМаркировки.Удалить(0);
						КонецЦикла;
						
					КонецЦикла;
					
					Если ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка Тогда
						СтрокаПродукции.КоличествоПотребительскихУпаковок = КоличествоПотребительскихУпаковокПродукции;
						СтрокаПродукции.Количество                        = КоличествоПродукции;
					Иначе
						Если СтрокаПродукции.ПроизвольнаяЕдиницаУчета Тогда
							СтрокаПродукции.КоличествоПотребительскихУпаковок = Количество;
							СтрокаПродукции.Количество                        = Количество * СодержимоеВложеннойЕдиницы.КоличествоВПотребительскойУпаковке;
						Иначе
							СтрокаПродукции.КоличествоПотребительскихУпаковок = 0;
							СтрокаПродукции.Количество                        = Количество;
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
			Если СтрокаПродукции <> Неопределено
				И СтрокаПродукции.КоличествоПотребительскихУпаковок > 0
				И СтрокаУпаковки <> Неопределено
				И (СтрокаУпаковки.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка
					Или ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка) Тогда
				СтрокаУпаковки.ПроизвольнаяЕдиницаУчета          = СтрокаПродукции.ПроизвольнаяЕдиницаУчета;
				СтрокаУпаковки.ТребуетВзвешивания                = СтрокаПродукции.ТребуетВзвешивания;
				СтрокаУпаковки.КоличествоПотребительскихУпаковок = СтрокаУпаковки.Количество;
				СтрокаУпаковки.Количество                        = СтрокаУпаковки.Количество * СтрокаПродукции.Количество;
			КонецЕсли;
			
		Иначе
			
			ДополнитьСтрокиДереваУпаковокКодамиМаркировки(СтрокаДереваУпаковок, Параметры);
			
			Если СтрокаДереваУпаковок.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка
				И СтрокаДереваУпаковок.Строки.Количество() > 0 Тогда
				СтрокаВложеннойУпаковки = СтрокаДереваУпаковок.Строки[0];
				Если СтрокаВложеннойУпаковки.КоличествоПотребительскихУпаковок > 0 Тогда
					СтрокаДереваУпаковок.ПроизвольнаяЕдиницаУчета          = СтрокаВложеннойУпаковки.ПроизвольнаяЕдиницаУчета;
					СтрокаДереваУпаковок.ТребуетВзвешивания                = СтрокаВложеннойУпаковки.ТребуетВзвешивания;
					СтрокаДереваУпаковок.КоличествоПотребительскихУпаковок = СтрокаДереваУпаковок.Количество;
					СтрокаДереваУпаковок.Количество =
						СтрокаДереваУпаковок.Количество * СтрокаВложеннойУпаковки.Количество / СтрокаВложеннойУпаковки.КоличествоПотребительскихУпаковок;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ТипШтрихкодаМаркированногоТовараПоВидуПродукции(ВидПродукции)
	
	Если ВидПродукции = Перечисления.ВидыПродукцииИС.Табак Тогда
		ТипШтрихкодаМаркированногоТовара = Перечисления.ТипыШтрихкодов.DataMatrix;
	Иначе
		ТипШтрихкодаМаркированногоТовара = Перечисления.ТипыШтрихкодов.GS1_DataMatrix;
	КонецЕсли;
	
	Возврат ТипШтрихкодаМаркированногоТовара;
	
КонецФункции

Функция ТекстЗапросаДляЗаписиУпаковок(ЭтоЗаказНаЭмиссию)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СоставУпаковок.ИндексСтроки,
	|	СоставУпаковок.Номенклатура,
	|	СоставУпаковок.Характеристика,
	|	СоставУпаковок.GTIN,
	|	СоставУпаковок.Шаблон,
	|	СоставУпаковок.Количество
	|ПОМЕСТИТЬ ВТСоставУпаковок
	|ИЗ
	|	&СоставУпаковок КАК СоставУпаковок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПулКодовМаркировки.КодМаркировки             КАК КодМаркировки,
	|	ПулКодовМаркировки.ПолныйКодМаркировки       КАК ПолныйКодМаркировки,
	|	ПулКодовМаркировки.МаксимальнаяРозничнаяЦена КАК МаксимальнаяРозничнаяЦена,
	|	СоставУпаковок.ИндексСтроки                  КАК ИндексСтроки,
	|	СоставУпаковок.Номенклатура                  КАК Номенклатура,
	|	СоставУпаковок.Характеристика                КАК Характеристика,
	|	СоставУпаковок.GTIN                          КАК GTIN,
	|	СоставУпаковок.Шаблон                        КАК Шаблон,
	|	СоставУпаковок.Количество                    КАК Количество,
	|	ВЫБОР
	|		КОГДА ПулКодовМаркировки.КодМаркировки ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КоличествоКодов
	|ПОМЕСТИТЬ ВТКодыМаркировки
	|ИЗ
	|	ВТСоставУпаковок КАК СоставУпаковок
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировки
	|		ПО СоставУпаковок.Номенклатура = ПулКодовМаркировки.Номенклатура
	|		И СоставУпаковок.Характеристика = ПулКодовМаркировки.Характеристика
	|		И СоставУпаковок.Шаблон = ПулКодовМаркировки.Шаблон
	|		И СоставУпаковок.GTIN = ВЫБОР
	|			КОГДА ПулКодовМаркировки.Номенклатура = &ПустаяНоменклатура
	|				ТОГДА ПулКодовМаркировки.GTIN
	|			ИНАЧЕ """"
	|		КОНЕЦ
	|		И ПулКодовМаркировки." + ?(ЭтоЗаказНаЭмиссию, "ЗаказНаЭмиссию", "ДокументОснование") + " = &Документ
	|		И НЕ ПулКодовМаркировки.Статус В (&СтатусыВыведенИзОборота)
	|		И ПулКодовМаркировки.ДатаПечатиУниверсальная = ДАТАВРЕМЯ(1, 1, 1)
	|		И ПулКодовМаркировки.ШтрихкодУпаковки = ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыМаркировки.ИндексСтроки,
	|	КодыМаркировки.КодМаркировки,
	|	КодыМаркировки.ПолныйКодМаркировки,
	|	КодыМаркировки.МаксимальнаяРозничнаяЦена,
	|	ЕСТЬNULL(ОписаниеНоменклатурыИС.КоличествоВПотребительскойУпаковке, 0)      КАК КоличествоВПотребительскойУпаковке,
	|	ЕСТЬNULL(ОписаниеНоменклатурыИС.КоличествоВПотребительскойУпаковке, 1)  = 0 КАК ТребуетВзвешивания,
	|	ЕСТЬNULL(ОписаниеНоменклатурыИС.КоличествоВПотребительскойУпаковке, 1) <> 1 КАК ПроизвольнаяЕдиницаУчета
	|ИЗ
	|	ВТКодыМаркировки КАК КодыМаркировки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
	|		ПО ОписаниеНоменклатурыИС.Номенклатура = КодыМаркировки.Номенклатура
	|ИТОГИ
	|	МАКСИМУМ(КоличествоВПотребительскойУпаковке),
	|	МАКСИМУМ(ТребуетВзвешивания),
	|	МАКСИМУМ(ПроизвольнаяЕдиницаУчета)
	|ПО КодыМаркировки.ИндексСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыМаркировки.Номенклатура,
	|	КодыМаркировки.Характеристика,
	|	КодыМаркировки.GTIN,
	|	КодыМаркировки.Шаблон,
	|	КодыМаркировки.Количество,
	|	СУММА(КодыМаркировки.КоличествоКодов) КАК КоличествоКодов,
	|	ЕСТЬNULL(КэшОписанияОстатков.Представление, """") КАК ПредставлениеНоменклатуры
	|ИЗ
	|	ВТКодыМаркировки КАК КодыМаркировки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КэшОписанияОстатковИСМП КАК КэшОписанияОстатков
	|		ПО КэшОписанияОстатков.GTIN = КодыМаркировки.GTIN
	|		И КодыМаркировки.Номенклатура = &ПустаяНоменклатура
	|СГРУППИРОВАТЬ ПО
	|	КодыМаркировки.Номенклатура,
	|	КодыМаркировки.Характеристика,
	|	КодыМаркировки.GTIN,
	|	КодыМаркировки.Шаблон,
	|	КэшОписанияОстатков.Представление,
	|	КодыМаркировки.Количество
	|ИМЕЮЩИЕ
	|	КодыМаркировки.Количество > СУММА(КодыМаркировки.КоличествоКодов)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли