#Область ОписаниеПеременных

&НаКлиенте
Перем ТекущееКоличество Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	НачальноеЗаполнениеФормы();
	УстановитьВидимостьДоступностьЭлементовФормы();
	
	АвтоЗаголовок = Ложь;
	Заголовок = СтрШаблон(НСтр("ru='Состав упаковок (%1)'"),
		ОбщегоНазначенияИС.ПредставлениеНоменклатуры(Номенклатура, Характеристика,,,
			ИнтеграцияИСМПКлиентСервер.ПредставлениеGTINОстаткиПоВидуПродукции(
					ПредставлениеНоменклатуры, ВидПродукции)));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура КоличествоВУпаковкахПриИзменении(Элемент)
	
	Если КоличествоВУпаковках > КоличествоКУпаковке Тогда
		КоличествоВУпаковках = КоличествоКУпаковке;
	КонецЕсли;
	
	Если ЭтоГрупповаяУпаковка
		И КоличествоВложенныхЕдиниц > 0 Тогда
		Если КоличествоВложенныхЕдиниц > КоличествоКУпаковке Тогда
			КоличествоВУпаковках = 0;
		ИначеЕсли КоличествоВУпаковках < КоличествоВложенныхЕдиниц Тогда
			КоличествоВУпаковках = КоличествоВложенныхЕдиниц;
		ИначеЕсли КоличествоВУпаковках % КоличествоВложенныхЕдиниц > 0 Тогда
			КоличествоВУпаковках = Цел(КоличествоВУпаковках / КоличествоВложенныхЕдиниц) * КоличествоВложенныхЕдиниц;
		КонецЕсли;
	КонецЕсли;
	
	Если КоличествоВУпаковках = 0 Тогда
		ЭтотОбъект.ТекущийЭлемент = Элементы.ФормироватьТолькоВложенныеЕдиницы;
	Иначе
		ЭтотОбъект.ТекущийЭлемент = Элементы.Готово;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормироватьТолькоВложенныеЕдиницыПриИзменении(Элемент)
	
	Элементы.КоличествоВУпаковках.ТолькоПросмотр = Не ФормироватьТолькоВложенныеЕдиницы;
	Элементы.ДеревоУпаковок.ТолькоПросмотр = ФормироватьТолькоВложенныеЕдиницы;
	
	Если ФормироватьТолькоВложенныеЕдиницы Тогда
		ОчиститьКоличествоВСтроках(ДеревоУпаковок.ПолучитьЭлементы());
		КоличествоВУпаковках = КоличествоКУпаковке;
		ЭтотОбъект.ТекущийЭлемент = Элементы.КоличествоВУпаковках;
	Иначе
		КоличествоВУпаковках = 0;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Готово(Команда)
	
	Закрыть(ПолучитьРезультатВыбора());
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовДереваУпаковок

&НаКлиенте
Процедура ДеревоУпаковокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	
	Отказ = Истина;
	
	ОткрытьФормуСозданияУпаковки();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоУпаковокПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	УдалениеУпаковки();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоУпаковокПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ДеревоУпаковок.ТекущиеДанные;
	
	ТекущееКоличество = ТекущиеДанные.КоличествоУпаковокВУпаковках * ТекущиеДанные.Коэффициент;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоУпаковокКоличествоУпаковокВУпаковкахПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоУпаковок.ТекущиеДанные;
	
	НовоеКоличествоУпаковокВУпаковках = ТекущиеДанные.КоличествоУпаковокВУпаковках;
	СвободноеКоличество = КоличествоКУпаковке - КоличествоВУпаковках + ТекущееКоличество;
	Если НовоеКоличествоУпаковокВУпаковках * ТекущиеДанные.Коэффициент > СвободноеКоличество Тогда
		НовоеКоличествоУпаковокВУпаковках = Цел(СвободноеКоличество / ТекущиеДанные.Коэффициент);
	КонецЕсли;
	НовоеКоличество = НовоеКоличествоУпаковокВУпаковках * ТекущиеДанные.Коэффициент;
	
	Если ТекущиеДанные.КоличествоУпаковокВУпаковках <> НовоеКоличествоУпаковокВУпаковках Тогда
		ТекущиеДанные.КоличествоУпаковокВУпаковках = НовоеКоличествоУпаковокВУпаковках;
	КонецЕсли;
	
	ЗаполнитьПризнакТребуетсяУказаниеПараметровГенерацииШтрихкодов(ТекущиеДанные);
	
	КоличествоВУпаковках = КоличествоВУпаковках - ТекущееКоличество + НовоеКоличество;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоУпаковокПараметрыГенерацииШтрихкодовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ДеревоУпаковок.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено
		Или Не ЗначениеЗаполнено(ТекущиеДанные.ХешСуммаУпаковки) Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуГенерацииШтрихкодов(ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоУпаковокПараметрыГенерацииШтрихкодов.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ДеревоУпаковокПараметрыГенерацииШтрихкодов.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ДеревоУпаковокТребуетсяУказаниеПараметровГенерацииШтрихкодов.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст",
		НСтр("ru = 'требуется указание параметров генерации штрихкодов'"));
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоУпаковокНаименование.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ДеревоУпаковокВерхнийУровень.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт",
		Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,,Истина));
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоУпаковокКоличествоУпаковокВУпаковках.Имя);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоУпаковокПараметрыГенерацииШтрихкодов.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ДеревоУпаковокВерхнийУровень.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоУпаковок.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ДеревоУпаковокТолькоПросмотр.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементовФормы()
	
	Если ЭтоНабор Или ЭтоГрупповаяУпаковка Тогда
		Элементы.ФормироватьТолькоВложенныеЕдиницы.Видимость = Истина;
		Если ЭтоНабор Тогда
			ЗаголовокЭлемента = НСтр("ru='Формировать только наборы'");
		Иначе
			ЗаголовокЭлемента = СтрШаблон("%1 (%2 %3 %4)",
				НСтр("ru='Формировать только групповые упаковки'"),
				КоличествоВложенныхЕдиниц,
				ЕдиницаИзмеренияНоменклатуры,
				НСтр("ru='в упаковке'"));
		КонецЕсли;
		Элементы.ФормироватьТолькоВложенныеЕдиницы.Заголовок = ЗаголовокЭлемента;
	Иначе
		Элементы.ФормироватьТолькоВложенныеЕдиницы.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#Область ПервоначальноеЗаполнение

&НаСервере
Процедура НачальноеЗаполнениеФормы()
	
	ИменаРеквизитов = Новый Массив;
	ИменаРеквизитов.Добавить("ВидПродукции");
	ИменаРеквизитов.Добавить("ИспользоватьУпаковкиНоменклатуры");
	ИменаРеквизитов.Добавить("Номенклатура");
	ИменаРеквизитов.Добавить("Характеристика");
	ИменаРеквизитов.Добавить("GTIN");
	ИменаРеквизитов.Добавить("ПредставлениеНоменклатуры");
	ИменаРеквизитов.Добавить("ТипНоменклатуры");
	ИменаРеквизитов.Добавить("ХарактеристикиИспользуются");
	ИменаРеквизитов.Добавить("КоличествоКУпаковке");
	ИменаРеквизитов.Добавить("ЭтоНабор");
	ИменаРеквизитов.Добавить("ЭтоГрупповаяУпаковка");
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры, СтрСоединить(ИменаРеквизитов, ","));
	
	Если ЭтоГрупповаяУпаковка Тогда
		КоличествоВложенныхЕдиниц = Параметры.КоличествоВложенныхЕдиниц;
		КоличествоКУпаковке = КоличествоКУпаковке * КоличествоВложенныхЕдиниц;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(Параметры.АдресПредыдущихШтрихкодов) Тогда
		АдресПредыдущихШтрихкодов = ПоместитьВоВременноеХранилище(
			ПолучитьИзВременногоХранилища(Параметры.АдресПредыдущихШтрихкодов),
			ЭтотОбъект.УникальныйИдентификатор);
	КонецЕсли;
	
	ЕдиницаИзмеренияНоменклатуры = Параметры.ЕдиницаИзмерения;
	
	СтрокаДляРасчетаХеша = ИнтеграцияИСКлиентСервер.СтрокаДляРасчетаХешаСоставаУпаковки(ЭтотОбъект);
	
	ХешСуммыУпаковок = Новый Соответствие;
	ЗаполнитьДеревоУпаковок(ХешСуммыУпаковок);
	ЗаполнитьСуществующиеУпаковки(ХешСуммыУпаковок);
	ЗаполнитьПараметрыГенерацииШтрихкодовВДереве(ХешСуммыУпаковок);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоУпаковок(ХешСуммыУпаковок)
	
	ИнициализироватьДеревоУпаковок();
	
	ТаблицаТоваров = СоздатьТаблицуДляПолученияДанных();
	Строка = ТаблицаТоваров[0];
	
	РегистрыСведений.ИсторияИспользованияСоставаУпаковкиИСМП.ЗаполнитьИсториюИспользованияСоставаУпаковки(ТаблицаТоваров);
	ЗаполнитьЭлементДерева(ДеревоУпаковок, Строка.СоставУпаковки, ХешСуммыУпаковок, Ложь);
	
	Строка.СоставУпаковки.Строки.Очистить();
	
	Если ИспользоватьУпаковкиНоменклатуры Тогда
		РегистрыСведений.ИсторияИспользованияСоставаУпаковкиИСМП.ДополнитьТаблицуУпаковкамиНоменклатуры(ТаблицаТоваров);
		ЗаполнитьЭлементДерева(ДеревоУпаковок, Строка.СоставУпаковки, ХешСуммыУпаковок, Истина);
	КонецЕсли;
	
	УдалитьПустыеЭлементыИзДереваУпаковок();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСуществующиеУпаковки(ХешСуммыУпаковок)
	
	Если (ЭтоНабор Или ЭтоГрупповаяУпаковка)
		И Параметры.Упаковки.Количество() = 1
		И Параметры.Упаковки[0].ХешСуммаУпаковки = "" Тогда
		КоличествоВУпаковках = Параметры.Упаковки[0].КоличествоУпаковок;
		Если ЭтоГрупповаяУпаковка Тогда
			КоличествоВУпаковках = КоличествоВУпаковках * КоличествоВложенныхЕдиниц;
		КонецЕсли;
		ФормироватьТолькоВложенныеЕдиницы = Истина;
		Элементы.КоличествоВУпаковках.ТолькоПросмотр = Ложь;
		Элементы.ДеревоУпаковок.ТолькоПросмотр = Истина;
	Иначе
		Для Каждого Упаковка Из Параметры.Упаковки Цикл
			Если ХешСуммыУпаковок[Упаковка.ХешСуммаУпаковки] <> Неопределено Тогда
				ЭлементДерева = ДеревоУпаковок.НайтиПоИдентификатору(ХешСуммыУпаковок[Упаковка.ХешСуммаУпаковки]);
				Если ЭлементДерева <> Неопределено Тогда
					ЭлементДерева.КоличествоУпаковокВУпаковках = ЭлементДерева.КоличествоУпаковокВУпаковках + Упаковка.КоличествоУпаковок;
					ЗаполнитьПризнакТребуетсяУказаниеПараметровГенерацииШтрихкодов(ЭлементДерева);
					КоличествоВУпаковках = КоличествоВУпаковках + ЭлементДерева.КоличествоУпаковокВУпаковках * ЭлементДерева.Коэффициент;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыГенерацииШтрихкодовВДереве(ХешСуммыУпаковок)
	
	ХешСуммы = Новый Массив;
	Для Каждого КлючИЗначение Из ХешСуммыУпаковок Цикл
		ХешСуммы.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	ПараметрыГенерацииШтрихкодов = РегистрыСведений.ИсторияИспользованияПараметровГенерацииШтрихкодовИСМП.ПолучитьПараметрыГенерацииШтрихкодовИзИстории(ХешСуммы);
	
	Если ПараметрыГенерацииШтрихкодов.Количество() > 0 Тогда
		ЗаполнитьПараметрыГенерацииШтрихкодов(ДеревоУпаковок.ПолучитьЭлементы(), ПараметрыГенерацииШтрихкодов);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьДеревоУпаковок()
	
	ЭлементыДерева = ДеревоУпаковок.ПолучитьЭлементы();

	ЭлементДерева = ЭлементыДерева.Добавить();
	ЭлементДерева.Наименование   = НСтр("ru='Произвольная'");
	ЭлементДерева.ВерхнийУровень = Истина;
	ЭлементДерева.Черновик       = Истина;
	
	ЭлементДерева = ЭлементыДерева.Добавить();
	ЭлементДерева.Наименование   = НСтр("ru='Из истории'");
	ЭлементДерева.ВерхнийУровень = Истина;
	
	ЭлементДерева = ЭлементыДерева.Добавить();
	ЭлементДерева.Наименование   = НСтр("ru='Из номенклатуры'");
	ЭлементДерева.ВерхнийУровень = Истина;
	ЭлементДерева.ИзНоменклатуры = Истина;
	
КонецПроцедуры

&НаСервере
Функция СоздатьТаблицуДляПолученияДанных()
	
	ТаблицаТоваров = Новый ТаблицаЗначений();
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки",    ОбщегоНазначения.ОписаниеТипаЧисло(5));
	ТаблицаТоваров.Колонки.Добавить("Номенклатура",   Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаТоваров.Колонки.Добавить("GTIN",           Метаданные.ОпределяемыеТипы.GTIN.Тип);
	ТаблицаТоваров.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТаблицаТоваров.Колонки.Добавить("СоставУпаковки", Новый ОписаниеТипов("ДеревоЗначений"));
	
	Строка = ТаблицаТоваров.Добавить();
	Строка.НомерСтроки    = 1;
	Строка.Номенклатура   = Номенклатура;
	Строка.GTIN           = GTIN;
	Строка.Характеристика = Характеристика;
	
	Возврат ТаблицаТоваров;
	
КонецФУнкции

&НаСервере
Процедура УдалитьПустыеЭлементыИзДереваУпаковок()
	
	ЭлементыДерева = ДеревоУпаковок.ПолучитьЭлементы();
	КоличествоЭлементов = ЭлементыДерева.Количество();
	Для Счетчик = 1 по КоличествоЭлементов Цикл
		ЭлементДерева = ЭлементыДерева[КоличествоЭлементов - Счетчик];
		Если ЭлементДерева.ПолучитьЭлементы().Количество() = 0 Тогда
			ЭлементыДерева.Удалить(ЭлементДерева);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭлементДерева(Приемник, Источник, ХешСуммыУпаковок, ИзНоменклатуры)
	
	Для Каждого СтрокаИсточника Из Источник.Строки Цикл
		
		Если ИзНоменклатуры Или ХешСуммыУпаковок[СтрокаИсточника.ХешСуммаУпаковки] = Неопределено Тогда
			
			Если СтрокаИсточника.КоличествоУпаковок = 0 Тогда
				Если ИзНоменклатуры Тогда
					ИндексЭлемента = 2;
				ИначеЕсли СтрокаИсточника.Черновик Тогда
					ИндексЭлемента = 0;
				Иначе
					ИндексЭлемента = 1;
				КонецЕсли;
				СтрокаПриемника = Приемник.ПолучитьЭлементы()[ИндексЭлемента].ПолучитьЭлементы().Добавить();
				СтрокаПриемника.ЕдиницаИзмеренияСоставляющей = ЕдиницаИзмеренияНоменклатуры;
				СтрокаПриемника.ТолькоПросмотр = ЭтоГрупповаяУпаковка
					И КоличествоВложенныхЕдиниц > 0;
			Иначе
				СтрокаПриемника = Приемник.ПолучитьЭлементы().Добавить();
				СтрокаПриемника.ЕдиницаИзмеренияСоставляющей = Приемник.ЕдиницаИзмерения;
				Если Приемник.ТолькоПросмотр
					И (Приемник.КоличествоУпаковок <> 0
						Или Приемник.Коэффициент <> КоличествоВложенныхЕдиниц) Тогда
						СтрокаПриемника.ТолькоПросмотр = Истина;
				КонецЕсли;
			КонецЕсли;
		
			ЗаполнитьЗначенияСвойств(СтрокаПриемника, СтрокаИсточника);
			
			СтрокаПриемника.ИзНоменклатуры = ИзНоменклатуры;
			
			Если СтрокаПриемника.КоличествоУпаковок = 0 Тогда
				СтрокаПриемника.КоличествоСоставляющей = СтрокаПриемника.Коэффициент;
			Иначе
				СтрокаПриемника.КоличествоСоставляющей = СтрокаПриемника.КоличествоУпаковок;
			КонецЕсли;
			
			Если ХешСуммыУпаковок[СтрокаИсточника.ХешСуммаУпаковки] = Неопределено Тогда
				ХешСуммыУпаковок.Вставить(СтрокаИсточника.ХешСуммаУпаковки, СтрокаПриемника.ПолучитьИдентификатор());
			КонецЕсли;
			
		Иначе
			СтрокаПриемника = ДеревоУпаковок.НайтиПоИдентификатору(ХешСуммыУпаковок[СтрокаИсточника.ХешСуммаУпаковки]);
		КонецЕсли;
		
		ЗаполнитьЭлементДерева(СтрокаПриемника, СтрокаИсточника, ХешСуммыУпаковок, ИзНоменклатуры);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыГенерацииШтрихкодов(ЭлементыДерева, ПараметрыГенерацииШтрихкодов)
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		Если ЗначениеЗаполнено(ЭлементДерева.ХешСуммаУпаковки)
			И Не ПараметрыГенерацииШтрихкодов[ЭлементДерева.ХешСуммаУпаковки] = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ЭлементДерева, ПараметрыГенерацииШтрихкодов[ЭлементДерева.ХешСуммаУпаковки]);
		КонецЕсли;
		ЗаполнитьПараметрыГенерацииШтрихкодов(ЭлементДерева.ПолучитьЭлементы(), ПараметрыГенерацииШтрихкодов);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСДеревомУпаковок

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПризнакТребуетсяУказаниеПараметровГенерацииШтрихкодов(ЭлементыДерева)
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		Если ЭлементДерева.КоличествоУпаковокВУпаковках > 0
			Или ПолучитьПризнакТребуетсяУказаниеПараметровГенерацииШтрихкодов(ЭлементДерева.ПолучитьЭлементы()) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПризнакТребуетсяУказаниеПараметровГенерацииШтрихкодов(ЭлементДерева, ЗначениеЗаполнения = Ложь)
	
	Если Не ЗначениеЗаполнения Тогда
		Если ЭлементДерева.КоличествоУпаковокВУпаковках > 0 Тогда
			ЗначениеЗаполнения = Истина;
		Иначе
			ЗначениеЗаполнения = ПолучитьПризнакТребуетсяУказаниеПараметровГенерацииШтрихкодов(ЭлементДерева.ПолучитьЭлементы());
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЭлементДерева.ТолькоПросмотр Тогда
		ЭлементДерева.ТребуетсяУказаниеПараметровГенерацииШтрихкодов = ЗначениеЗаполнения;
	КонецЕсли;
	
	ЭлементРодитель = ЭлементДерева.ПолучитьРодителя();
	Если ЭлементРодитель <> Неопределено
		И Не ЭлементРодитель.ВерхнийУровень Тогда
		ЗаполнитьПризнакТребуетсяУказаниеПараметровГенерацииШтрихкодов(ЭлементРодитель, ЗначениеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РезультатВыбора

&НаСервере
Функция ПолучитьРезультатВыбора()
	
	Упаковки = Новый Массив;
	Если ФормироватьТолькоВложенныеЕдиницы Тогда
		Если КоличествоВУпаковках > 0 Тогда
			СтруктураУпаковки = Новый Структура;
			Если ЭтоГрупповаяУпаковка
				И КоличествоВложенныхЕдиниц > 0 Тогда
				СтруктураУпаковки.Вставить("КоличествоУпаковок",
					Цел(КоличествоВУпаковках / КоличествоВложенныхЕдиниц));
				СтруктураУпаковки.Вставить("Количество",
					СтруктураУпаковки.КоличествоУпаковок * КоличествоВложенныхЕдиниц);
			Иначе
				СтруктураУпаковки.Вставить("КоличествоУпаковок", КоличествоВУпаковках);
				СтруктураУпаковки.Вставить("Количество",         КоличествоВУпаковках);
			КонецЕсли;
			СтруктураУпаковки.Вставить("СоставУпаковки", РегистрыСведений.ИсторияИспользованияСоставаУпаковкиИСМП.ИнициализироватьСоставУпаковки());
			Упаковки.Добавить(СтруктураУпаковки);
		КонецЕсли;
	Иначе
		ХешСуммыУпаковок = Новый Соответствие;
		ЗаполнитьРезультатВыбора(ДеревоУпаковок.ПолучитьЭлементы(), Упаковки, ХешСуммыУпаковок);
	КонецЕсли;
	
	АдресРезультата = ПоместитьВоВременноеХранилище(Упаковки);
	
	Если Не ФормироватьТолькоВложенныеЕдиницы Тогда
		ЗаписатьДанныеВИсторию(Упаковки);
	КонецЕсли;
	
	Возврат АдресРезультата;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРезультатВыбора(ЭлементыДерева, Упаковки, ХешСуммыУпаковок)
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		
		ЗаполнитьРезультатВыбора(ЭлементДерева.ПолучитьЭлементы(), Упаковки, ХешСуммыУпаковок);
		
		Если ЭлементДерева.КоличествоУпаковокВУпаковках > 0 Тогда
			
			Если ХешСуммыУпаковок[ЭлементДерева.ХешСуммаУпаковки] = Неопределено Тогда
				
				СтруктураУпаковки = Новый Структура;
				СтруктураУпаковки.Вставить("КоличествоУпаковок",    ЭлементДерева.КоличествоУпаковокВУпаковках);
				СтруктураУпаковки.Вставить("Количество",            ЭлементДерева.КоличествоУпаковокВУпаковках * ЭлементДерева.Коэффициент);
				СтруктураУпаковки.Вставить("ХешСуммаУпаковки",      ЭлементДерева.ХешСуммаУпаковки);
				СтруктураУпаковки.Вставить("ПредставлениеУпаковки", ЭлементДерева.Представление);
				СтруктураУпаковки.Вставить("Черновик",              ЭлементДерева.Черновик);
				СтруктураУпаковки.Вставить("СоставУпаковки",        РегистрыСведений.ИсторияИспользованияСоставаУпаковкиИСМП.ИнициализироватьСоставУпаковки());
				
				ДобавитьЭлементСоставаУпаковки(СтруктураУпаковки, ЭлементДерева);
				
				Упаковки.Добавить(СтруктураУпаковки);
				
				ХешСуммыУпаковок.Вставить(ЭлементДерева.ХешСуммаУпаковки, Упаковки.ВГраница());
				
			Иначе
				
				СтруктураУпаковки = Упаковки[ХешСуммыУпаковок[ЭлементДерева.ХешСуммаУпаковки]];
				СтруктураУпаковки.КоличествоУпаковок = СтруктураУпаковки.КоличествоУпаковок + ЭлементДерева.КоличествоУпаковокВУпаковках;
				СтруктураУпаковки.Количество = СтруктураУпаковки.Количество + ЭлементДерева.КоличествоУпаковокВУпаковках * ЭлементДерева.Коэффициент;
				
				Если Не ЭлементДерева.ИзНоменклатуры Тогда
					СтруктураУпаковки.Вставить("ПредставлениеУпаковки", ЭлементДерева.Представление);
					СтруктураУпаковки.Вставить("Черновик",              ЭлементДерева.Черновик);
					СтруктураУпаковки.Вставить("СоставУпаковки",        РегистрыСведений.ИсторияИспользованияСоставаУпаковкиИСМП.ИнициализироватьСоставУпаковки());
					ДобавитьЭлементСоставаУпаковки(СтруктураУпаковки, ЭлементДерева);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеВИсторию(Упаковки)
	
	ТаблицаДляЗаписиИстории = РегистрыСведений.ИсторияИспользованияСоставаУпаковкиИСМП.ИнициализироватьТаблицуДляЗаписиИстории();
	
	СписокСвойств = "Номенклатура,Характеристика,GTIN";
	
	Для Каждого Упаковка Из Упаковки Цикл
		Если Упаковка.Черновик Тогда
			СтрокаТаблицы = ТаблицаДляЗаписиИстории.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ЭтотОбъект, СписокСвойств);
			СтрокаТаблицы.ХешСуммаУпаковки = Упаковка.ХешСуммаУпаковки;
			СтрокаТаблицы.Черновик         = Истина;
			Строкатаблицы.СоставУпаковки   = Новый ХранилищеЗначения(Упаковка.СоставУпаковки);
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаДляЗаписиИстории.Количество() = 0 Тогда
		СтрокаТаблицы = ТаблицаДляЗаписиИстории.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ЭтотОбъект, СписокСвойств);
	КонецЕсли;
	
	РегистрыСведений.ИсторияИспользованияСоставаУпаковкиИСМП.ЗаписатьДанныеВИсторию(ТаблицаДляЗаписиИстории);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементСоставаУпаковки(СтрокаСостава, ЭлементСоставаУпаковки)
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(ЭлементСоставаУпаковки);
	ЗаполнитьМассивРодителейЭлементаДерева(МассивЭлементов, ЭлементСоставаУпаковки);
	
	НовыеЭлементы = СтрокаСостава.СоставУпаковки.Строки;
	ВГраница = МассивЭлементов.ВГраница();
	Для Индекс = 0 По ВГраница Цикл
		НовыйЭлемент = НовыеЭлементы.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, МассивЭлементов[ВГраница - Индекс]);
		НовыеЭлементы = НовыйЭлемент.Строки;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьМассивРодителейЭлементаДерева(МассивЭлементов, ЭлементДерева)
	
	ЭлементРодитель = ЭлементДерева.ПолучитьРодителя();
	Если ЭлементРодитель <> Неопределено
		И Не ЭлементРодитель.ВерхнийУровень Тогда
		МассивЭлементов.Добавить(ЭлементРодитель);
		ЗаполнитьМассивРодителейЭлементаДерева(МассивЭлементов, ЭлементРодитель);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеУпаковки

&НаКлиенте
Процедура ОткрытьФормуСозданияУпаковки()
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ТекущаяСтрока", Элементы.ДеревоУпаковок.ТекущаяСтрока);
	ПараметрыОткрытия.Вставить("ЕдиницаИзмеренияНоменклатуры", ЕдиницаИзмеренияНоменклатуры);
	ПараметрыОткрытия.Вставить("Упаковки", Новый Массив);
	
	ЭлементВерхнегоУровняПроизвольныхУпаковок = ПолучитьЭлементВерхнегоУровняПроизвольныхУпаковок();
	Если ЭлементВерхнегоУровняПроизвольныхУпаковок <> Неопределено Тогда
		ЗаполнитьПроизвольныеУпаковки(ЭлементВерхнегоУровняПроизвольныхУпаковок.ПолучитьЭлементы(), ПараметрыОткрытия.Упаковки);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриСозданииУпаковки", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.ВиртуальнаяАгрегацияУпаковокИСМП.Форма.СозданиеУпаковки",
		ПараметрыОткрытия, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьЭлементВерхнегоУровняПроизвольныхУпаковок(СоздаватьПриОтсутствии = Ложь)
	
	ЭлементыДерева = ДеревоУпаковок.ПолучитьЭлементы();
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		Если ЭлементДерева.Черновик Тогда
			Возврат ЭлементДерева;
		КонецЕсли;
	КонецЦикла;
	
	Если СоздаватьПриОтсутствии Тогда
		ЭлементДерева = ЭлементыДерева.Вставить(0);
		ЭлементДерева.Наименование   = НСтр("ru='Произвольная'");
		ЭлементДерева.ВерхнийУровень = Истина;
		ЭлементДерева.Черновик       = Истина;
		Возврат ЭлементДерева;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПроизвольныеУпаковки(ЭлементыДерева, Упаковки)
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		СтруктураУпаковки = Новый Структура;
		СтруктураУпаковки.Вставить("Представление", ЭлементДерева.Представление);
		СтруктураУпаковки.Вставить("Коэффициент",   ЭлементДерева.Коэффициент);
		СтруктураУпаковки.Вставить("Идентификатор", ЭлементДерева.ПолучитьИдентификатор());
		
		Упаковки.Добавить(СтруктураУпаковки);
		ЗаполнитьПроизвольныеУпаковки(ЭлементДерева.ПолучитьЭлементы(), Упаковки);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриСозданииУпаковки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УпаковкаПервогоУровня = Результат.ИдентификаторСоставляющей = Неопределено;
	
	ЭлементВерхнегоУровняПроизвольныхУпаковок = ПолучитьЭлементВерхнегоУровняПроизвольныхУпаковок(Истина);
	Если УпаковкаПервогоУровня Тогда
		РодительЭлемента = ЭлементВерхнегоУровняПроизвольныхУпаковок;
		ДляПросмотра = ЭтоГрупповаяУпаковка
			И КоличествоВложенныхЕдиниц > 0;
	Иначе
		РодительЭлемента = ДеревоУпаковок.НайтиПоИдентификатору(Результат.ИдентификаторСоставляющей);
		ДляПросмотра = РодительЭлемента.ТолькоПросмотр
			И (РодительЭлемента.КоличествоУпаковок <> 0
				Или РодительЭлемента.Коэффициент <> КоличествоВложенныхЕдиниц);
	КонецЕсли;
	
	ЭлементДерева = РодительЭлемента.ПолучитьЭлементы().Добавить();
	ЭлементДерева.ЕдиницаИзмерения = Результат.ЕдиницаИзмерения;
	ЭлементДерева.Наименование     = Результат.Наименование;
	ЭлементДерева.Коэффициент      = Результат.Коэффициент;
	ЭлементДерева.Черновик         = Истина;
	ЭлементДерева.ТолькоПросмотр   = ДляПросмотра;
	Если УпаковкаПервогоУровня Тогда
		ЭлементДерева.КоличествоУпаковок           = 0;
		ЭлементДерева.ЕдиницаИзмеренияСоставляющей = ЕдиницаИзмеренияНоменклатуры;
		ЭлементДерева.КоличествоСоставляющей       = ЭлементДерева.Коэффициент;
		ЭлементДерева.Представление                = ИнтеграцияИСКлиентСервер.ПредставлениеСоставаУпаковки(ЭлементДерева, Неопределено);
	Иначе
		ЭлементДерева.КоличествоУпаковок           = Результат.Количество;
		ЭлементДерева.ЕдиницаИзмеренияСоставляющей = РодительЭлемента.ЕдиницаИзмерения;
		ЭлементДерева.КоличествоСоставляющей       = ЭлементДерева.КоличествоУпаковок;
		ЭлементДерева.Представление                = ИнтеграцияИСКлиентСервер.ПредставлениеСоставаУпаковки(ЭлементДерева, РодительЭлемента);
	КонецЕсли;
	ЭлементДерева.ХешСуммаУпаковки = ПолучитьХешСуммуУпаковки(ЭлементДерева);
	
	Элементы.ДеревоУпаковок.ТекущаяСтрока = ЭлементДерева.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьХешСуммуУпаковки(ЭлементДерева)
	
	КоличествоПредставление = "";
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(ЭлементДерева);
	ЗаполнитьМассивРодителейЭлементаДерева(МассивЭлементов, ЭлементДерева);
	
	ВГраница = МассивЭлементов.ВГраница();
	Для Индекс = 0 По ВГраница Цикл
		КоличествоПредставление = ИнтеграцияИСКлиентСервер.ПредставлениеКоличестваСоставаУпаковкиДляРасчетаХеша(
			МассивЭлементов[ВГраница - Индекс], КоличествоПредставление);
	КонецЦикла;
	
	Возврат ХэшСуммаСтроки(СтрокаДляРасчетаХеша + КоличествоПредставление);
	
КонецФункции

&НаСервереБезКонтекста
Функция ХэшСуммаСтроки(СтрокаДляРасчетаХеша)
	
	Возврат ОбщегоНазначенияИС.ХэшСуммаСтроки(СтрокаДляРасчетаХеша);
	
КонецФункции

#КонецОбласти

#Область УдалениеУпаковки

&НаКлиенте
Процедура УдалениеУпаковки()
	
	ТекущиеДанные = Элементы.ДеревоУпаковок.ТекущиеДанные;
	
	Если ТекущиеДанные.ВерхнийУровень
		Или ТекущиеДанные.ИзНоменклатуры Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.ДеревоУпаковок.ТекущаяСтрока;
	
	Если ТекущиеДанные.Черновик Тогда
		Если ТекущиеДанные.ПолучитьЭлементы().Количество() > 0 Тогда
			ТекстВопроса = СтрШаблон(
				НСтр("ru = 'Удалить упаковку ""%1"" и все подчиненные упаковки?'"),
				ТекущиеДанные.Наименование);
		Иначе
			ТекстВопроса = СтрШаблон(
				НСтр("ru = 'Удалить упаковку ""%1""?'"),
				ТекущиеДанные.Наименование);
		КонецЕсли;
	Иначе
		СтрокаПредупреждение = НСтр("ru = 'После удаления упаковки из истории, она станет недоступна для дальнейшего использования.'");
		РодительЭлемента = ТекущиеДанные.ПолучитьРодителя();
		Если РодительЭлемента.ВерхнийУровень Тогда
			Если ТекущиеДанные.ПолучитьЭлементы().Количество() > 0 Тогда
				ТекстВопроса = СтрШаблон(
					НСтр("ru = '%1
					|Удалить из истории упаковку ""%2"" и все подчиненные упаковки?'"),
					СтрокаПредупреждение,
					ТекущиеДанные.Наименование);
			Иначе
				ТекстВопроса = СтрШаблон(
					НСтр("ru = '%1
					|Удалить из истории упаковку ""%2""?'"),
					СтрокаПредупреждение,
					ТекущиеДанные.Наименование);
			КонецЕсли;
		Иначе
			УпаковкаВерхнегоУровня = ПолучитьУпаковкуВерхнегоУровня(РодительЭлемента);
			ТекущаяСтрока = УпаковкаВерхнегоУровня.ПолучитьИдентификатор();
			ТекстВопроса = СтрШаблон(
				НСтр("ru = 'Из истории невозможно частичное удаление структуры упаковки.
				|Удаляется вся структура выбранной упаковки ""%1"".
				|%2
				|Удалить из истории упаковку ""%3"" и все подчиненные упаковки?'"),
				ТекущиеДанные.Наименование,
				СтрокаПредупреждение,
				УпаковкаВерхнегоУровня.Наименование);
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросПередУдалениемУпаковки", ЭтотОбъект, ТекущаяСтрока);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
Конецпроцедуры

&НаКлиенте
Процедура ОтветНаВопросПередУдалениемУпаковки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ЭлементДерева = ДеревоУпаковок.НайтиПоИдентификатору(ДополнительныеПараметры);
		
		Если Не ЭлементДерева.Черновик Тогда
			УдалитьДанныеИзИстории(ЭлементДерева);
		КонецЕсли;
		
		Количество = ПолучитьПолноеКоличествоЭлементаДерева(ЭлементДерева);
		
		РодительЭлемента = ЭлементДерева.ПолучитьРодителя();
		ЭлементыДерева = РодительЭлемента.ПолучитьЭлементы();
		
		ЭлементыДерева.Удалить(ЭлементДерева);
		Если РодительЭлемента.ВерхнийУровень
			И ЭлементыДерева.Количество() = 0 Тогда
			ДеревоУпаковок.ПолучитьЭлементы().Удалить(РодительЭлемента);
		КонецЕсли;
		
		КоличествоВУпаковках = КоличествоВУпаковках - Количество;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДанныеИзИстории(ЭлементДерева)
	
	СтруктураПараметров = Новый Структура("Номенклатура,Характеристика,GTIN");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ЭтотОбъект);
	
	МассивХешСумм = Новый Массив;
	ЗаполнитьМассивХешСуммЭлементаДерева(МассивХешСумм, ЭлементДерева);
	СтруктураПараметров.Вставить("ХешСуммаУпаковки", МассивХешСумм);
	
	УдалитьДанныеИзИсторииСервер(СтруктураПараметров);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьДанныеИзИсторииСервер(СтруктураПараметров)
	
	ТаблицаДляУдаленияИстории = РегистрыСведений.ИсторияИспользованияСоставаУпаковкиИСМП.ИнициализироватьТаблицуДляУдаленияИстории();
	
	Для Каждого ХешСуммаУпаковки Из СтруктураПараметров.ХешСуммаУпаковки Цикл
		СтрокаТаблицы = ТаблицаДляУдаленияИстории.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтруктураПараметров,, "ХешСуммаУпаковки");
		СтрокаТаблицы.ХешСуммаУпаковки = ХешСуммаУпаковки;
	КонецЦикла;
	
	РегистрыСведений.ИсторияИспользованияСоставаУпаковкиИСМП.УдалитьДанныеИзИстории(ТаблицаДляУдаленияИстории);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМассивХешСуммЭлементаДерева(МассивХешСумм, ТекущийЭлементДерева)
	
	МассивХешСумм.Добавить(ТекущийЭлементДерева.ХешСуммаУпаковки);
	
	Для Каждого ЭлементДерева Из ТекущийЭлементДерева.ПолучитьЭлементы() Цикл
		ЗаполнитьМассивХешСуммЭлементаДерева(МассивХешСумм, ЭлементДерева);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПолноеКоличествоЭлементаДерева(ТекущийЭлементДерева)
	
	Количество = ТекущийЭлементДерева.КоличествоУпаковокВУпаковках * ТекущийЭлементДерева.Коэффициент;
	
	Для Каждого ЭлементДерева Из ТекущийЭлементДерева.ПолучитьЭлементы() Цикл
		Количество = Количество + ПолучитьПолноеКоличествоЭлементаДерева(ЭлементДерева);
	КонецЦикла;
	
	Возврат Количество;
	
КонецФункции

&НаКлиенте
Функция ПолучитьУпаковкуВерхнегоУровня(ЭлементДерева)
	
	РодительЭлемента = ЭлементДерева.ПолучитьРодителя();
	Если РодительЭлемента.ВерхнийУровень Тогда
		Возврат ЭлементДерева;
	КонецЕсли;
	
	Возврат ПолучитьУпаковкуВерхнегоУровня(РодительЭлемента);
	
КонецФункции

#КонецОбласти

#Область ГенерацияШтрихкодовУпаковок

&НаКлиенте
Процедура ОткрытьФормуГенерацииШтрихкодов(СтрокаДерева)

	ДоступныеТипыШтрихкодовСтрокой = ПроверкаИПодборПродукцииИСМПКлиент.ДоступныеТипыШтрихкодовСтрокой();
	
	ПараметрыОткрытияФормы = Новый Структура();
	ПараметрыОткрытияФормы.Вставить("РежимУказанияПараметровГенерации", Истина);
	ПараметрыОткрытияФормы.Вставить("АдресПредыдущихШтрихкодов",        АдресПредыдущихШтрихкодов);
	ПараметрыОткрытияФормы.Вставить("ДоступныеТипыШтрихкодовСтрокой",   ДоступныеТипыШтрихкодовСтрокой);
	ПараметрыОткрытияФормы.Вставить("Номенклатура",                     Номенклатура);
	ПараметрыОткрытияФормы.Вставить("Характеристика",                   Характеристика);
	ПараметрыОткрытияФормы.Вставить("КоличествоВложенныхЕдиниц",        СтрокаДерева.Коэффициент);
	ПараметрыОткрытияФормы.Вставить("ТипУпаковки",
		ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МонотоварнаяУпаковка"));
	
	Если ЗначениеЗаполнено(СтрокаДерева.ТипШтрихкода) Тогда
		ТекущийТипШтрихкода = СтрокаДерева.ТипШтрихкода;
	Иначе
		ТекущийТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.SSCC");
	КонецЕсли;
	ПараметрыОткрытияФормы.Вставить("ТипШтрихкода", ТекущийТипШтрихкода);
	
	Если ЗначениеЗаполнено(СтрокаДерева.ОбразецШтрихкода) Тогда
		ПараметрыОткрытияФормы.Вставить("Штрихкод", СтрокаДерева.ОбразецШтрихкода);
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ХешСуммаУпаковки", СтрокаДерева.ХешСуммаУпаковки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриГенерацииШтрихкодаУпаковки", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Обработка.ГенерацияШтрихкодовУпаковок.Форма.Форма", ПараметрыОткрытияФормы, ЭтотОбъект,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриГенерацииШтрихкодаУпаковки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли ПустаяСтрока(Результат.Штрихкод) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Упаковкам не может быть назначен пустой штрихкод.'"));
		Возврат;
	ИначеЕсли Результат.ТипШтрихкода <> ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.SSCC")
		И Результат.ТипШтрихкода <> ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_128") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Типы штрихкодов, отличные от SSCC и GS1-128, не поддерживаются.'"));
		Возврат;
	КонецЕсли;
	
	ДанныеШтрихкода = СформироватьДанныеШтрихкода(Результат.АдресПредыдущихШтрихкодов, ДополнительныеПараметры.ХешСуммаУпаковки);
	Если Не ДанныеШтрихкода = Неопределено Тогда
		
		МассивЭлементов = Новый Массив;
		ЗаполнитьМассивЭлементовПоХешСуммеУпаковки(ДеревоУпаковок.ПолучитьЭлементы(), МассивЭлементов, ДополнительныеПараметры.ХешСуммаУпаковки);
		
		Для Каждого ЭлементДерева Из МассивЭлементов Цикл
			ЗаполнитьЗначенияСвойств(ЭлементДерева, ДанныеШтрихкода);
		КонецЦикла;
		
		Если Результат.ЗапомнитьПараметрыГенерации Тогда
			АдресПредыдущихШтрихкодов = Результат.АдресПредыдущихШтрихкодов;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьДанныеШтрихкода(АдресПредыдущихШтрихкодов, ХешСуммаУпаковки)
	
	ДанныеШтрихкода = Неопределено;
	
	Если ЭтоАдресВременногоХранилища(АдресПредыдущихШтрихкодов) Тогда
		
		ДанныеПредыдущихШтрихкодов = ПолучитьИзВременногоХранилища(АдресПредыдущихШтрихкодов);
		
		ДанныеШтрихкода = Новый Структура;
		ДанныеШтрихкода.Вставить("ТипШтрихкода", ДанныеПредыдущихШтрихкодов["ПоследнийТипШтрихкода"]);
		КлючНумератора = "";
		Если ДанныеШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.SSCC") Тогда
			КлючНумератора = СтрЗаменить(ДанныеПредыдущихШтрихкодов["ПоследнийКлючНумератора"], "SSCC", "");
		ИначеЕсли ДанныеШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_128") Тогда
			КлючНумератора = СтрЗаменить(ДанныеПредыдущихШтрихкодов["ПоследнийКлючНумератора"], "GS1", "");
		КонецЕсли;
		ДанныеШтрихкода.Вставить("КлючНумератора", КлючНумератора);
		
		ДанныеШтрихкода.Вставить("ОбразецШтрихкода",
			ДанныеПредыдущихШтрихкодов[ДанныеПредыдущихШтрихкодов["ПоследнийТипШтрихкодаСтрокой"]]);
		ДанныеШтрихкода.Вставить("ПараметрыГенерацииШтрихкодов",
			ПолучитьПредставлениеПараметровГенерациШтрихкодов(ДанныеШтрихкода));
		
		ПараметрыГенерацииШтрихкодов = Новый Соответствие;
		ПараметрыГенерацииШтрихкодов.Вставить(ХешСуммаУпаковки, ДанныеШтрихкода);
		РегистрыСведений.ИсторияИспользованияПараметровГенерацииШтрихкодовИСМП.ЗаписатьПараметрыГенерацииШтрихкодовВИсторию(ПараметрыГенерацииШтрихкодов);
		
	КонецЕсли;
	
	Возврат ДанныеШтрихкода;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеПараметровГенерациШтрихкодов(ДанныеШтрихкода)
	
	ПредставлениеШтрихкода = "";
	Если ДанныеШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.SSCC") Тогда
		ПредставлениеШтрихкода = ДанныеШтрихкода.КлючНумератора;
		Пока СтрДлина(ПредставлениеШтрихкода) < 18 Цикл
			ПредставлениеШтрихкода = ПредставлениеШтрихкода + "x";
		КонецЦикла;
		ПредставлениеШтрихкода = "(00)" + ПредставлениеШтрихкода;
	ИначеЕсли ДанныеШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_128") Тогда
		ПозицияНачала = СтрНайти(ДанныеШтрихкода.ОбразецШтрихкода, "(21)");
		Если ПозицияНачала > 0 Тогда
			ПозицияНачала = ПозицияНачала + 4;
			ПредставлениеШтрихкода = Лев(ДанныеШтрихкода.ОбразецШтрихкода, ПозицияНачала - 1) + "xxxx";
			ПозицияОкончания = СтрНайти(ДанныеШтрихкода.ОбразецШтрихкода, "(",, ПозицияНачала);
			Если ПозицияОкончания > 0 Тогда
				ПредставлениеШтрихкода = ПредставлениеШтрихкода + Сред(ДанныеШтрихкода.ОбразецШтрихкода, ПозицияОкончания);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПредставленияПараметров = Новый Массив();
	ПредставленияПараметров.Добавить(Строка(ДанныеШтрихкода.ТипШтрихкода));
	
	Если НЕ ПустаяСтрока(ПредставлениеШтрихкода) Тогда
		ПредставленияПараметров.Добавить(",");
		ПредставленияПараметров.Добавить(" ");
		ПредставленияПараметров.Добавить(ПредставлениеШтрихкода);
	КонецЕсли;
	
	Возврат СтрСоединить(ПредставленияПараметров);
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьМассивЭлементовПоХешСуммеУпаковки(ЭлементыДерева, МассивЭлементов, ХешСуммаУпаковки)
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		Если ЭлементДерева.ХешСуммаУпаковки = ХешСуммаУпаковки Тогда
			МассивЭлементов.Добавить(ЭлементДерева);
		КонецЕсли;
		ЗаполнитьМассивЭлементовПоХешСуммеУпаковки(ЭлементДерева.ПолучитьЭлементы(), МассивЭлементов, ХешСуммаУпаковки);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ВложенныеЕдиницы

&НаКлиенте
Процедура ОчиститьКоличествоВСтроках(ЭлементыДерева)
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		ЭлементДерева.КоличествоУпаковокВУпаковках = 0;
		ЭлементДерева.ТребуетсяУказаниеПараметровГенерацииШтрихкодов = Ложь;
		ОчиститьКоличествоВСтроках(ЭлементДерева.ПолучитьЭлементы());
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
