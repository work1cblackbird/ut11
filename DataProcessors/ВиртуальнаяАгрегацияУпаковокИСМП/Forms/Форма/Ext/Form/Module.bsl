#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения Экспорт;

&НаКлиенте
Перем Ссылка Экспорт;

&НаКлиенте
Перем ВыполняетсяЗакрытие;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ИспользоватьСерииНоменклатуры          = ИнтеграцияИС.СерииИспользуются();
	ИспользоватьХарактеристикиНоменклатуры = ИнтеграцияИС.ХарактеристикиИспользуются();
	ИспользоватьУпаковкиНоменклатуры       = ИнтеграцияИС.УпаковкиИспользуются();
	
	ОбработатьИПроверитьПереданныеПараметры(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыУказанияСерий = ИнтеграцияИС.ПараметрыУказанияСерий(
		Метаданные.Обработки.ВиртуальнаяАгрегацияУпаковокИСМП, ЭтотОбъект);
	
	ШрифтЗаголовкаГруппы  = Новый Шрифт(Элементы.ГруппаЛевая.ШрифтЗаголовка);
	ЦветГиперссылки       = ЦветаСтиля.ЦветГиперссылкиГосИС;
	ЦветЗаголовкаГруппы   = ЦветаСтиля.ЦветТекстаТребуетВниманияГосИС;
	ЦветНеТребуетВнимания = ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС;
	
	ОбработатьСохраненныеНастройки();
	УправлениеЭлементамиФормыПриСоздании();
	
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ВыполняетсяЗакрытие = Ложь;
	
	ПолучитьДанныеЗаполнения();
	
	УстановитьОтборОстатковПродукции();
	СформироватьЗаголовокСохраненныхПараметровГенерацииШтрихкодов();
	СформироватьЗаголовокГиперссылкиОткрытияСпискаУпаковок();
	СформироватьЗаголовокКоличествоУпаковок();
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИспользоватьСерииНоменклатуры Тогда
		СобытияФормИСМПКлиентПереопределяемый.ОбработкаВыбораСерии(ЭтотОбъект,
			ВыбранноеЗначение, ИсточникВыбора, ПараметрыУказанияСерий);
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")
			И ВыбранноеЗначение.Свойство("ИдентификаторТекущейСтроки") Тогда
			ПриИзмененииСерииСоставаУпаковки(ВыбранноеЗначение.ИдентификаторТекущейСтроки);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ВыполняетсяЗакрытие И Модифицированность Тогда
		Отказ = Истина;
		
		ТекстВопроса = НСтр("ru = 'Сформированные упаковки, которые не были распечатаны, будут потеряны. Все равно закрыть?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриОтветеНаВопросПередЗакрытиемФормы", ЭтотОбъект);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РежимФормированияМонотоварнойУпаковкиПриИзменении(Элемент)
	
	Если СоставУпаковки.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'При изменении режима виртуальной агрегации, текущий состав упаковки будет очищен. Изменить режим?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриОтветеНаВопросПриИзмененииРежимаФормирования", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ПриИзмененииРежимаФормирования();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвободныеОстаткиПродукцииПриИзменении(Элемент)
	
	УстановитьОтборОстатковПродукции();
	
	СохранитьНастройкиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизвольныйСоставУпаковкиПриИзменении(Элемент)
	
	Если НЕ ПроизвольныйСоставУпаковки Тогда
		ОчиститьСоставУпаковки();
		Если ЗначениеЗаполнено(ИсторическаяУпаковка) Тогда
			ПриИзмененииИсторическойУпаковки();
		КонецЕсли;
		РассчитатьОстатокПоДокументу();
		СформироватьЗаголовокКоличествоУпаковок();
	КонецЕсли;

	УправлениеЗависимымиОтИсторииЭлементами(ЭтотОбъект);
	
	СохранитьНастройкиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторическаяУпаковкаПриИзменении(Элемент)
	
	ПриИзмененииИсторическойУпаковки();
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоУпаковокПриИзменении(Элемент)
	
	ИзменитьКоличествоУпаковокПриНеобходимости();
	РассчитатьОстатокПоДокументу();
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоУпаковокРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ИзменитьКоличествоУпаковокПриНеобходимости();
	РассчитатьОстатокПоДокументу();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСкрытьОткрытьСписокУпаковокОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПоказатьСписокУпаковок" Тогда
		Элементы.ГруппаСписокУпаковок.Видимость = Истина;
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "СкрытьСписокУпаковок" Тогда
		Элементы.ГруппаСписокУпаковок.Видимость = Ложь;
	КонецЕсли;
	
	СформироватьЗаголовокГиперссылкиОткрытияСпискаУпаковок();
	
	СохранитьНастройкиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПараметрыГенерацииШтрихкодовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОчиститьПредыдущиеШтрихкоды" Тогда
		ОчиститьПредыдущиеШтрихкоды();
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "УстановитьПредыдущиеШтрихкоды" Тогда
		УстановитьПредыдущиеШтрихкоды();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыОстаткиПродукции

&НаКлиенте
Процедура ОстаткиПродукцииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	
	Если РежимФормированияМонотоварнойУпаковки Тогда
		
		ТекущиеДанные = Элемент.ТекущиеДанные;
		
		Если Не ТекущиеДанные.ЕстьСвободныйОстаток
			Или ТекущиеДанные.АгрегацияНедоступна Тогда
			Возврат;
		КонецЕсли;
		
		ПриВыбореСтрокиСоставаУпаковки(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
		
	Иначе
		
		СобытияФормИСМПКлиент.ВыборЭлементаТабличнойЧастиОткрытьФормуЭлемента(ЭтотОбъект, Элемент, Поле);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиПродукцииНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Если Не РежимФормированияМонотоварнойУпаковки
		И Не ПроизвольныйСоставУпаковки Тогда
		Выполнение = Ложь;
		Возврат;
	КонецЕсли;
	
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование;
	ПараметрыПеретаскивания.Значение = Элемент;
	
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиПродукцииПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ПараметрыПеретаскивания.Значение = Элементы.СоставУпаковки Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиПродукцииПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	УдалитьСтрокиИзСоставаУпаковки(Элементы.СоставУпаковки.ВыделенныеСтроки);
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыСоставУпаковки

&НаКлиенте
Процедура СоставУпаковкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Не Поле.Имя = "СоставУпаковкиСерия" Тогда
		ПриВыбореСтрокиСоставаУпаковки(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставУпаковкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставУпаковкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока Тогда
		ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьНомераСтрок(СоставУпаковки);
		СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииНоменклатуры(ЭтотОбъект,
			СоставУпаковки[СоставУпаковки.Количество()-1], КэшированныеЗначения, ПараметрыУказанияСерий);
	КонецЕсли;
	
	РассчитатьМаксимальноеКоличествоУпаковок();
	РассчитатьОстатокПоДокументу();
	
КонецПроцедуры

&НаКлиенте
Процедура СоставУпаковкиПослеУдаления(Элемент)
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьНомераСтрок(СоставУпаковки);
	РассчитатьМаксимальноеКоличествоУпаковок();
	РассчитатьОстатокПоДокументу();
	
КонецПроцедуры

&НаКлиенте
Процедура СоставУпаковкиНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Если Не РежимФормированияМонотоварнойУпаковки
		И Не ПроизвольныйСоставУпаковки Тогда
		Выполнение = Ложь;
		Возврат;
	КонецЕсли;
	
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование;
	ПараметрыПеретаскивания.Значение = Элемент;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставУпаковкиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ПараметрыПеретаскивания.Значение = Элементы.ОстаткиПродукции Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставУпаковкиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ДобавитьСтрокиВСоставУпаковки(Элементы.ОстаткиПродукции.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставУпаковкиСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СоставУпаковки.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Поля = "ТипНоменклатуры,Номенклатура,Характеристика,ХарактеристикиИспользуются,Серия,СтатусУказанияСерий,Количество";
	
	ПолныйСоставУпаковки = Новый Массив;
	Если ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) И ТекущиеДанные.ЭтоНабор Тогда
		НоваяСтрока = Новый Структура(Поля);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущиеДанные);
		ПолныйСоставУпаковки.Добавить(НоваяСтрока);
		
		Для Каждого ВложеннаяЕдиница Из ТекущиеДанные.ВложенныеЕдиницы Цикл
			Если Не ЗначениеЗаполнено(ВложеннаяЕдиница.Номенклатура)
				Или ТекущиеДанные.Номенклатура = ВложеннаяЕдиница.Номенклатура Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = Новый Структура(Поля);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВложеннаяЕдиница);
			ПолныйСоставУпаковки.Добавить(НоваяСтрока);
		КонецЦикла;
	КонецЕсли;
	
	Если ПолныйСоставУпаковки.Количество() > 1 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Склад",                  Склад);
		ПараметрыОткрытия.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий);
		ПараметрыОткрытия.Вставить("СоставУпаковки",         ПолныйСоставУпаковки);
		
		ДополнительныеПараметры = Элементы.СоставУпаковки.ТекущаяСтрока;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриОкончанииУказанияСерий", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("Обработка.ВиртуальнаяАгрегацияУпаковокИСМП.Форма.ФормаУказанияСерий",
			ПараметрыОткрытия, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		ТекущаяМодифицированность = Модифицированность;
		
		ИнтеграцияИСКлиент.ОткрытьПодборСерий(ЭтотОбъект,
			ПараметрыУказанияСерий, Элемент.ТекстРедактирования, СтандартнаяОбработка, ТекущиеДанные);
		
		Модифицированность = ТекущаяМодифицированность;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставУпаковкиСерияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СоставУпаковки.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииСерии(ЭтотОбъект,
		ТекущиеДанные, КэшированныеЗначения, ПараметрыУказанияСерий);
	
	ПриИзмененииСерииСоставаУпаковки(Элементы.СоставУпаковки.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставУпаковкиКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СоставУпаковки.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.КоличествоУпаковок = 0 Тогда
		СоставУпаковки.Удалить(ТекущиеДанные);
		ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьНомераСтрок(СоставУпаковки);
	Иначе
		СтруктураПоиска = СтруктураПолейПоиска();
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекущиеДанные);
		СтрокиОстатка = ОстаткиПродукции.НайтиСтроки(СтруктураПоиска);
		Если СтрокиОстатка.Количество() > 0 Тогда
			Если ТекущиеДанные.КоличествоУпаковок > СтрокиОстатка[0].Количество Тогда
				ТекущиеДанные.КоличествоУпаковок = СтрокиОстатка[0].Количество;
			КонецЕсли;
		КонецЕсли;
		Если ТекущиеДанные.ЭтоГрупповаяУпаковка Тогда
			ТекущиеДанные.Количество = ТекущиеДанные.КоличествоУпаковок * ТекущиеДанные.ВложенныеЕдиницы[0].Количество;
		Иначе
			ТекущиеДанные.Количество = ТекущиеДанные.КоличествоУпаковок;
		КонецЕсли;
		СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииКоличества(ЭтотОбъект,
			ТекущиеДанные, КэшированныеЗначения, ПараметрыУказанияСерий);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыИтоговоеДеревоУпаковок

&НаКлиенте
Процедура ИтоговоеДеревоУпаковокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИтоговоеДеревоУпаковокПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Отказ         = Истина;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементДерева = ПолучитьПервыйЭлементЭлементаДерева(ТекущиеДанные);
	
	Если Не ЭлементДерева.УпаковкаСформирована Тогда
		УдалитьУпаковкуИзИтоговогоДереваУпаковок(ЭлементДерева);
	Иначе
		ПроверитьВозможностьУдаленияЗаписаннойУпаковки(ЭлементДерева);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИтоговоеДеревоУпаковокПараметрыГенерацииШтрихкодовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = Элементы.ИтоговоеДеревоУпаковок.ТекущаяСтрока;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиАгрегации = Новый Массив;
	СтрокиАгрегации.Добавить(ТекущаяСтрока);
	
	ОткрытьФормуГенерацииШтрихкодов(СтрокиАгрегации);
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьВСоставУпаковки(Команда)
	
	ДобавитьСтрокиВСоставУпаковки(Элементы.ОстаткиПродукции.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВсеСтрокиВСоставУпаковки(Команда)
	
	МассивСтрок = Новый Массив;
	Для Каждого Строка Из ОстаткиПродукции Цикл
		МассивСтрок.Добавить(Строка.ПолучитьИдентификатор());
	КонецЦикла;
	
	ДобавитьСтрокиВСоставУпаковки(МассивСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзСоставаУпаковки(Команда)
	
	УдалитьСтрокиИзСоставаУпаковки(Элементы.СоставУпаковки.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВсеСтрокиИзСоставаУпаковки(Команда)
	
	МассивСтрок = Новый Массив;
	Для Каждого Строка Из СоставУпаковки Цикл
		МассивСтрок.Добавить(Строка.ПолучитьИдентификатор());
	КонецЦикла;
	
	УдалитьСтрокиИзСоставаУпаковки(МассивСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура СгенерироватьСерии(Команда)
	
	ОчиститьСообщения();
	
	Поля = "Номенклатура,Серия,СтатусУказанияСерий,Количество";
	
	ПолныйСоставУпаковки = Новый Массив;
	Для Каждого СтрокаСостава Из СоставУпаковки Цикл
		Если Не ЗначениеЗаполнено(СтрокаСостава.Номенклатура)
			Или ЗначениеЗаполнено(СтрокаСостава.Серия) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Новый Структура(Поля);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСостава);
		ПолныйСоставУпаковки.Добавить(НоваяСтрока);
		Если СтрокаСостава.ЭтоНабор Тогда
			Для Каждого ВложеннаяЕдиница Из СтрокаСостава.ВложенныеЕдиницы Цикл
				Если Не ЗначениеЗаполнено(ВложеннаяЕдиница.Номенклатура)
					Или ЗначениеЗаполнено(ВложеннаяЕдиница.Серия)
					Или СтрокаСостава.Номенклатура = ВложеннаяЕдиница.Номенклатура Тогда
					Продолжить;
				КонецЕсли;
				НоваяСтрока = Новый Структура(Поля);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВложеннаяЕдиница);
				ПолныйСоставУпаковки.Добавить(НоваяСтрока);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ПроверкаИПодборПродукцииИСМПКлиентСервер.ТребуетсяУказаниеСерий(ПолныйСоставУпаковки, "Количество")
		И Не ПроверкаИПодборПродукцииИСМПКлиентСервер.СериюМожноУказать(ПолныйСоставУпаковки, "Количество") Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Отсутствует продукция, для которой требуется генерация серий.'"));
		Возврат;
	КонецЕсли;
	
	ДанныеДляГенерацииСерий = ПроверкаИПодборПродукцииИСМПКлиент.ДанныеДляГенерацииСерийПоПодобраннойПродукции(
		ПолныйСоставУпаковки, ВидПродукции, "Количество");
	
	СгенерироватьСерииНаСервере(ДанныеДляГенерацииСерий, ВидПродукции);
	
	ЗаполнитьСерииВСоставеУпаковок(ДанныеДляГенерацииСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСоставУпаковкиИзНоменклатуры(Команда)
	
	Если Элементы.СоставУпаковки.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	ЗаполнитьСоставУпаковки(МассивСтрок, Ложь);
	УдалитьСтрокиИзСоставаУпаковкиПоСтрокамОстатковПродукции(МассивСтрок);
	ДобавитьСтрокиВСоставУпаковки(МассивСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСоставУпаковкиИзИстории(Команда)
	
	Если Элементы.СоставУпаковки.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	ЗаполнитьСоставУпаковки(МассивСтрок, Истина);
	УдалитьСтрокиИзСоставаУпаковкиПоСтрокамОстатковПродукции(МассивСтрок);
	ДобавитьСтрокиВСоставУпаковки(МассивСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьУпаковки(Команда)
	
	ОчиститьСообщения();
	
	Отказ = Ложь;
	
	Если СоставУпаковки.Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Не указан состав формируемых упаковок.'");
		ПолеОшибки  = "СоставУпаковки";
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,, ПолеОшибки,, Отказ);
	ИначеЕсли СоставУпаковки.Итог("Количество") = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Не указано количество составляющих упаковки.'");
		ПолеОшибки  = "СоставУпаковки[0].Количество";
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,, ПолеОшибки,, Отказ);
	КонецЕсли;
	
	Если РежимФормированияМонотоварнойУпаковки Тогда
		Для Каждого СтрокаСостава Из СоставУпаковки Цикл
			Если Не ЗначениеЗаполнено(СтрокаСостава.ХешСуммаУпаковки)
				И Не СтрокаСостава.ЭтоГрупповаяУпаковка
				И Не СтрокаСостава.ЭтоНабор Тогда
				ИндексСтроки = СоставУпаковки.Индекс(СтрокаСостава);
				АдресОшибки  = " " + СтрШаблон(НСтр("ru = 'в строке %1 списка состава упаковки'"), ИндексСтроки + 1);
				ТекстОшибки  = НСтр("ru = 'Не указан состав упаковки'");
				ПолеОшибки   = "СоставУпаковки[" + ИндексСтроки + "].ПредставлениеУпаковки";
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки + АдресОшибки,,ПолеОшибки,, Отказ);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли КоличествоУпаковок = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Не указано количество формируемых упаковок.'");
		ПолеОшибки  = "КоличествоУпаковок";
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,, ПолеОшибки,, Отказ);
	КонецЕсли;
	
	Если ИспользоватьСерииНоменклатуры Тогда
		СтатусыСерийСерияНеУказана = ПроверкаИПодборПродукцииИСМПКлиентСервер.СтатусыСерийСерияНеУказана();
		Для Каждого СтрокаСостава Из СоставУпаковки Цикл
			Если СтатусыСерийСерияНеУказана.Найти(СтрокаСостава.СтатусУказанияСерий) <> Неопределено Тогда
				ИндексСтроки = СоставУпаковки.Индекс(СтрокаСостава);
				АдресОшибки  = " " + СтрШаблон(НСтр("ru = 'в строке %1 списка состава упаковки'"), ИндексСтроки + 1);
				ТекстОшибки  = НСтр("ru = 'Не указана серия'");
				ПолеОшибки   = "СоставУпаковки[" + ИндексСтроки + "].Серия";
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки + АдресОшибки,,ПолеОшибки,, Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьНовыеУпаковкиВИтоговоеДеревоУпаковок();
	
	Модифицированность = Истина;
	
	Если Не Элементы.ГруппаСписокУпаковок.Видимость Тогда
		ПоказатьОповещениеПользователя(
			СтрШаблон(НСтр("ru = 'Создано упаковок - %1'"), КоличествоУпаковок),
			Новый ОписаниеОповещения("ПриОповещенииОФормированииУпаковок", ЭтотОбъект),
			НСтр("ru = 'Нажмите для просмотра'"),,
			СтатусОповещенияПользователя.Информация, ЭтотОбъект.УникальныйИдентификатор);
	КонецЕсли;
	
	ОчиститьСоставУпаковки();
	
	Если НЕ ПроизвольныйСоставУпаковки Тогда
		ИсторическаяУпаковка = Неопределено;
	КонецЕсли;
	
	УменьшитьКоличествоСвободногоОстатка();
	СформироватьЗаголовокКоличествоУпаковок();
	СформироватьЗаголовокГиперссылкиОткрытияСпискаУпаковок();
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	ОчиститьСообщения();
	
	Если Модифицированность Тогда
		Отказ = Ложь;
		ПроверитьЗаполнениеСтрокИтоговогоДереваУпаковок(ИтоговоеДеревоУпаковок.ПолучитьЭлементы(), Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ДлительнаяОперация = НачатьЗаписьУпаковок();
		Если ДлительнаяОперация = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗаписьУпаковокЗавершение", ЭтотОбъект);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Запись сформированных упаковок.'");
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	Иначе
		ОткрытьФормуПечати();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
#Область ОстаткиПродукции

	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтотОбъект,
		"ОстаткиПродукцииХарактеристика",
		"ОстаткиПродукции.ХарактеристикиИспользуются");
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОстаткиПродукцииНоменклатура.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.ОстаткиПродукцииНоменклатура.ПутьКДанным);
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра(
		"Текст", Новый ПолеКомпоновкиДанных("ОстаткиПродукции.ПредставлениеНоменклатуры"));
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОстаткиПродукции.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ОстаткиПродукции.АгрегацияНедоступна");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ОстаткиПродукции.ЕстьСвободныйОстаток");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	
#КонецОбласти
	
#Область СоставУпаковки

	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтотОбъект,
		"СоставУпаковкиХарактеристика",
		"СоставУпаковки.ХарактеристикиИспользуются");
	
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеСерийНоменклатуры(
		ЭтотОбъект,
		"СоставУпаковкиСерия",
		"СоставУпаковки.СтатусУказанияСерий",
		"СоставУпаковки.ТипНоменклатуры");
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СоставУпаковкиНоменклатура.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.СоставУпаковкиНоменклатура.ПутьКДанным);
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра(
		"Текст", Новый ПолеКомпоновкиДанных("СоставУпаковки.ПредставлениеНоменклатуры"));
	
#КонецОбласти
	
#Область СписокУпаковок
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИтоговоеДеревоУпаковок.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИтоговоеДеревоУпаковок.УпаковкаСформирована");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИтоговоеДеревоУпаковокПараметрыГенерацииШтрихкодов.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИтоговоеДеревоУпаковок.ТребуетсяУказаниеПараметровГенерацииШтрихкодов");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИтоговоеДеревоУпаковокПараметрыГенерацииШтрихкодов.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИтоговоеДеревоУпаковок.ТребуетсяУказаниеПараметровГенерацииШтрихкодов");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИтоговоеДеревоУпаковок.УпаковкаСформирована");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Штрихкоды сгенерированы'"));
	
#КонецОбласти

#Область УпрощеннаяМаркировкаОстатков
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОстаткиПродукцииНоменклатура.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ОстаткиПродукцииНоменклатура.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СоставУпаковкиНоменклатура.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.СоставУпаковкиНоменклатура.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	
#КонецОбласти
	
#Область ПредставлениеШаблонаКодаМаркировки
	
	ДоступныеШаблоны = ИнтеграцияИСМПКлиентСервер.ПредставленияШаблоновКодаМаркировки();
	Для Каждого ЭлементСписка Из ДоступныеШаблоны Цикл
		
		Если Не ЗначениеЗаполнено(ЭлементСписка.Представление) Тогда
			Продолжить;
		КонецЕсли;
		
		//
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОстаткиПродукцииШаблон.Имя);
		
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ОстаткиПродукцииШаблон.ПутьКДанным);
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = ЭлементСписка.Значение;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", ЭлементСписка.Представление);
		
		//
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СоставУпаковкиШаблон.Имя);
		
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.СоставУпаковкиШаблон.ПутьКДанным);
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = ЭлементСписка.Значение;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", ЭлементСписка.Представление);
		
	КонецЦикла;
	
#КонецОбласти

КонецПроцедуры

#Область УправлениеЭлементамиФормы
	
&НаСервере
Процедура УправлениеЭлементамиФормыПриСоздании()
	
	ВидПродукцииРодительный = НРег(ПолучитьСклоненияСтроки(ВидПродукции, "Л=ru_RU", "ПД=Родительный")[0]);

	Заголовок = СтрШаблон(НСтр("ru = 'Виртуальная агрегация %1'"), ВидПродукцииРодительный);
	
	Если НЕ ИспользоватьХарактеристикиНоменклатуры Тогда
		Элементы.ОстаткиПродукцииХарактеристика.Видимость = Ложь;
		Элементы.СоставУпаковкиХарактеристика.Видимость   = Ложь;
	КонецЕсли;
	
	Если НЕ ИспользоватьСерииНоменклатуры Тогда
		Элементы.СоставУпаковкиГруппаСерия.Видимость = Ложь;
		Элементы.СгенерироватьСерии.Видимость        = Ложь;
	Иначе
		Элементы.СгенерироватьСерии.Видимость        = ЕстьПравоДобавлениеСерий();
	КонецЕсли;
	
	Элементы.ПодменюЗаполнитьСоставУпаковок.Видимость = ИспользоватьУпаковкиНоменклатуры;
	
	Элементы.ОстаткиПродукцииGTIN.Видимость = Ложь;
	Элементы.СоставУпаковкиGTIN.Видимость   = Ложь;
	
	ВидимостьКолонкиШаблон = ИнтеграцияИСМПКлиентСервер.ШаблоныКодовПоВидуПродукции(ВидПродукции).Количество() > 1;
	
	Элементы.ОстаткиПродукцииШаблон.Видимость = ВидимостьКолонкиШаблон;
	Элементы.СоставУпаковкиШаблон.Видимость   = ВидимостьКолонкиШаблон;
	
	УправлениеЗависимымиОтИсторииЭлементами(ЭтотОбъект);
	УправлениеЗависимымиОтРежимаФормированияЭлементами(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЗависимымиОтИсторииЭлементами(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.ИсторическаяУпаковка.Доступность = Не Форма.ПроизвольныйСоставУпаковки;
	Элементы.ГруппаЦентр.Доступность          = Форма.РежимФормированияМонотоварнойУпаковки
	                                            Или Форма.ПроизвольныйСоставУпаковки;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЗависимымиОтРежимаФормированияЭлементами(Форма)
	
	Элементы = Форма.Элементы;
	
	Если Форма.РежимФормированияМонотоварнойУпаковки Тогда
		Элементы.ГруппаПравая.Заголовок = НСтр("ru = 'Состав упаковок'");
	Иначе
		Элементы.ГруппаПравая.Заголовок = НСтр("ru = 'Состав новой упаковки'");
	КонецЕсли;
	
	Элементы.СоставУпаковкиПредставлениеУпаковки.Видимость   = Форма.РежимФормированияМонотоварнойУпаковки;
	Элементы.СоставУпаковкиКоличествоУпаковок.ТолькоПросмотр = Форма.РежимФормированияМонотоварнойУпаковки;
	Элементы.ГруппаЗаполнениеМонотоварнойУпаковки.Видимость  = Форма.РежимФормированияМонотоварнойУпаковки;
	Элементы.ГруппаЗаполнениеПроизвольнойУпаковки.Видимость  = Не Форма.РежимФормированияМонотоварнойУпаковки;
	Элементы.ГруппаСозданиеКоличествоУпаковок.Видимость      = Не Форма.РежимФормированияМонотоварнойУпаковки;
	Элементы.ГруппаЦентр.Доступность                         = Форма.РежимФормированияМонотоварнойУпаковки
	                                                           Или Форма.ПроизвольныйСоставУпаковки;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементовФормы()
	
	Если РежимФормированияМонотоварнойУпаковки Тогда
		Элементы.СформироватьУпаковки.Доступность = СоставУпаковки.Количество() > 0;
	Иначе
		Элементы.СформироватьУпаковки.Доступность = КоличествоУпаковок > 0;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Элементы.ФормаПечать.КнопкаПоУмолчанию           = Истина;
	Иначе
		Элементы.СформироватьУпаковки.КнопкаПоУмолчанию  = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборОстатковПродукции()
	
	СтруктураОтбора = Новый Структура();
	
	Если СвободныеОстаткиПродукции Тогда
		СтруктураОтбора.Вставить("ЕстьСвободныйОстаток", Истина);
	КонецЕсли;
	
	Элементы.ОстаткиПродукции.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗаголовокГиперссылкиОткрытияСпискаУпаковок()
	
	СформированоУпаковок = 0;
	
	Для Каждого СтрокаАгрегации Из ИтоговоеДеревоУпаковок.ПолучитьЭлементы() Цикл
		СформированоУпаковок = СформированоУпаковок + СтрокаАгрегации.КоличествоИтог;
	КонецЦикла;
	
	СтрокиЗаголовка = Новый Массив();
	
	Если Элементы.ГруппаСписокУпаковок.Видимость Тогда
		ТекстГиперссылки = "СкрытьСписокУпаковок";
	Иначе
		ТекстГиперссылки = "ПоказатьСписокУпаковок";
	КонецЕсли;
	
	Если СформированоУпаковок = 0 Тогда
		СтрокиЗаголовка.Добавить(Новый ФорматированнаяСтрока("Нет сформированных упаковок", ШрифтЗаголовкаГруппы, ЦветЗаголовкаГруппы,, ТекстГиперссылки));
	Иначе
		СтрокиЗаголовка.Добавить(Новый ФорматированнаяСтрока("Сформировано упаковок", ШрифтЗаголовкаГруппы, ЦветЗаголовкаГруппы,, ТекстГиперссылки));
		СтрокиЗаголовка.Добавить(Новый ФорматированнаяСтрока(" - ", ШрифтЗаголовкаГруппы, ЦветЗаголовкаГруппы));
		СтрокиЗаголовка.Добавить(Новый ФорматированнаяСтрока(Формат(СформированоУпаковок, "ЧН=0;"), ШрифтЗаголовкаГруппы, ЦветЗаголовкаГруппы));
	КонецЕсли;
	
	Элементы.ДекорацияСкрытьОткрытьСписокУпаковок.Заголовок = Новый ФорматированнаяСтрока(СтрокиЗаголовка);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗаголовокКоличествоУпаковок()
	
	МассивПодстрок = Новый Массив();
	МассивПодстрок.Добавить(ПросклонятьУпаковку(КоличествоУпаковок));
	
	Если МаксимальноеКоличествоУпаковок > 0 Тогда
		МассивПодстрок.Добавить(НСтр("ru = 'из'"));
		МассивПодстрок.Добавить(Формат(МаксимальноеКоличествоУпаковок, "ЧДЦ=0;"));
		МассивПодстрок.Добавить(ПросклонятьВозможных(МаксимальноеКоличествоУпаковок));
	КонецЕсли;
	
	Элементы.КоличествоУпаковок.Заголовок = СтрСоединить(МассивПодстрок, " ");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОтветеНаВопросПередЗакрытиемФормы(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ВыполняетсяЗакрытие = Истина;
		Закрыть();
	КонецЕсли;

КонецПроцедуры
	
&НаКлиенте
Процедура СохранитьНастройкиФормы()
	
	СохраняемыеНастройки = Новый Структура();
	СохраняемыеНастройки.Вставить("СвободныеОстаткиПродукции",             СвободныеОстаткиПродукции);
	СохраняемыеНастройки.Вставить("ПроизвольныйСоставУпаковки",            ПроизвольныйСоставУпаковки);
	СохраняемыеНастройки.Вставить("РежимФормированияМонотоварнойУпаковки", РежимФормированияМонотоварнойУпаковки);
	СохраняемыеНастройки.Вставить("ВидимостьСпискаУпаковок",               Элементы.ГруппаСписокУпаковок.Видимость);
	
	СохранитьНастройкиФормыНаСервере(СохраняемыеНастройки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьНастройкиФормыНаСервере(СохраняемыеНастройки)
	
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(
		"Обработка.ВиртуальнаяАгрегацияУпаковокИСМП.Форма.Форма",
		"", СохраняемыеНастройки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОтветеНаВопросПриИзмененииРежимаФормирования(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПриИзмененииРежимаФормирования();
	Иначе
		РежимФормированияМонотоварнойУпаковки = Не РежимФормированияМонотоварнойУпаковки;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииРежимаФормирования()
	
	ОчиститьСоставУпаковки();
	Если Не РежимФормированияМонотоварнойУпаковки
		И Не ПроизвольныйСоставУпаковки
		И ЗначениеЗаполнено(ИсторическаяУпаковка) Тогда
		ПриИзмененииИсторическойУпаковки();
	КонецЕсли;
	РассчитатьОстатокПоДокументу();
	СформироватьЗаголовокКоличествоУпаковок();
	
	УправлениеЗависимымиОтРежимаФормированияЭлементами(ЭтотОбъект);
	УстановитьДоступностьЭлементовФормы();
	
	СохранитьНастройкиФормы();
	
КонецПроцедуры	

#КонецОбласти 

#Область РаботаССоставомУпаковок

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураПолейПоиска()
	
	ПоляПоиска = "Номенклатура,Характеристика,GTIN,Шаблон";
	
	Возврат Новый Структура(ПоляПоиска);
	
КонецФункции

&НаКлиенте
Процедура ДобавитьСтрокиВСоставУпаковки(Строки)
	
	Если Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НовыеСтроки = Новый Массив;
	
	СтруктураПоиска = СтруктураПолейПоиска();
	
	Для Каждого Строка Из Строки Цикл
		
		ТекущиеДанные = ОстаткиПродукции.НайтиПоИдентификатору(Строка);
		
		Если ТекущиеДанные.Остаток = 0
			Или ТекущиеДанные.АгрегацияНедоступна Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекущиеДанные);
		СтрокиСостава = СоставУпаковки.НайтиСтроки(СтруктураПоиска);
		Если РежимФормированияМонотоварнойУпаковки Тогда
			ДобавитьМонотоварнуюУпаковку(ТекущиеДанные, НовыеСтроки,
				ПолучитьМаксимальныйИндексСтрокиВКоллекции(СоставУпаковки, СтрокиСостава));
		Иначе
			Если СтрокиСостава.Количество() > 0 Тогда
				СтрокаСостава = СтрокиСостава[0];
			Иначе
				СтрокаСостава = СоставУпаковки.Добавить();
				НовыеСтроки.Добавить(СтрокаСостава);
				ЗаполнитьЗначенияСвойств(СтрокаСостава, ТекущиеДанные,, "Количество,СоставУпаковки,ВложенныеЕдиницы");
				ЗаполнитьВложенныеЕдиницы(СтрокаСостава, ТекущиеДанные);
			КонецЕсли;
			СтрокаСостава.КоличествоУпаковок = СтрокаСостава.КоличествоУпаковок + 1;
			Если ТекущиеДанные.ЭтоГрупповаяУпаковка Тогда
				СтрокаСостава.Количество = СтрокаСостава.КоличествоУпаковок * ТекущиеДанные.ВложенныеЕдиницы[0].Количество;
			Иначе
				СтрокаСостава.Количество = СтрокаСостава.КоличествоУпаковок;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НовыеСтроки.Количество() > 0 Тогда
		ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьНомераСтрок(СоставУпаковки);
		Для Каждого Строка Из НовыеСтроки Цикл
			СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииНоменклатуры(ЭтотОбъект,
				Строка, КэшированныеЗначения, ПараметрыУказанияСерий);
			Если Строка.ЭтоНабор Или Строка.ЭтоГрупповаяУпаковка Тогда
				Для Каждого ВложеннаяЕдиница Из Строка.ВложенныеЕдиницы Цикл
					СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииНоменклатуры(ЭтотОбъект,
						ВложеннаяЕдиница, КэшированныеЗначения, ПараметрыУказанияСерий);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	РассчитатьМаксимальноеКоличествоУпаковок();
	РассчитатьОстатокПоДокументу();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокиИзСоставаУпаковки(Строки)
	
	Если Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиДляУдаления = Новый Массив;
	
	Для Каждого Строка Из Строки Цикл
		
		ТекущиеДанные = СоставУпаковки.НайтиПоИдентификатору(Строка);
		
		Если Не РежимФормированияМонотоварнойУпаковки
		 И ТекущиеДанные.КоличествоУпаковок > 1 Тогда
			ТекущиеДанные.КоличествоУпаковок = ТекущиеДанные.КоличествоУпаковок - 1;
			Если ТекущиеДанные.ЭтоГрупповаяУпаковка Тогда
				ТекущиеДанные.Количество = ТекущиеДанные.КоличествоУпаковок * ТекущиеДанные.ВложенныеЕдиницы[0].Количество;
			Иначе
				ТекущиеДанные.Количество = ТекущиеДанные.КоличествоУпаковок;
			КонецЕсли;
		Иначе
			СтрокиДляУдаления.Добавить(ТекущиеДанные);
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокиДляУдаления.Количество() > 0 Тогда
		Для Каждого Строка Из СтрокиДляУдаления Цикл
			СоставУпаковки.Удалить(Строка);
		КонецЦикла;
		ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьНомераСтрок(СоставУпаковки);
	КонецЕсли;
	
	РассчитатьМаксимальноеКоличествоУпаковок();
	РассчитатьОстатокПоДокументу();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокиИзСоставаУпаковкиПоСтрокамОстатковПродукции(МассивСтрок)
	
	СтруктураПоиска = СтруктураПолейПоиска();
	
	Для Каждого Строка Из МассивСтрок Цикл
		СтрокаОстатка = ОстаткиПродукции.НайтиПоИдентификатору(Строка);
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаОстатка);
		НайденныеСтроки = СоставУпаковки.НайтиСтроки(СтруктураПоиска);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			СоставУпаковки.Удалить(НайденнаяСтрока);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьМонотоварнуюУпаковку(СтрокаОстаткиПродукции, НовыеСтроки, МаксимальныйИндекс)
	
	КоличествоВложенныхЕдиниц = 0;
	Если СтрокаОстаткиПродукции.ЭтоГрупповаяУпаковка Тогда
		КоличествоВложенныхЕдиниц = СтрокаОстаткиПродукции.ВложенныеЕдиницы[0].Количество;
	КонецЕсли;
	
	Если КоличествоВложенныхЕдиниц > 0 Тогда
		Остаток = СтрокаОстаткиПродукции.Остаток * КоличествоВложенныхЕдиниц;
	Иначе
		Остаток = СтрокаОстаткиПродукции.Остаток;
	КонецЕсли;
	
	ЭлементСоставаУпаковки = Неопределено;
	ПодобратьСтрокуМонотоварнойУпаковки(
		СтрокаОстаткиПродукции.СоставУпаковки.ПолучитьЭлементы(),
		Остаток,
		КоличествоВложенныхЕдиниц,
		ЭлементСоставаУпаковки);
	
	СтруктураПоиска = СтруктураПолейПоиска();
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаОстаткиПродукции);
	Если ЭлементСоставаУпаковки = Неопределено Тогда
		СтруктураПоиска.Вставить("ХешСуммаУпаковки", "");
	Иначе
		СтруктураПоиска.Вставить("ХешСуммаУпаковки", ЭлементСоставаУпаковки.ХешСуммаУпаковки);
	КонецЕсли;
	
	НайденныеСтроки = СоставУпаковки.НайтиСтроки(СтруктураПоиска);
	НоваяСтрока = НайденныеСтроки.Количество() = 0;
	Если НоваяСтрока Тогда
		МаксимальныйИндекс = МаксимальныйИндекс + 1;
		СтрокаСостава = СоставУпаковки.Вставить(МаксимальныйИндекс);
		НовыеСтроки.Добавить(СтрокаСостава);
		ЗаполнитьЗначенияСвойств(СтрокаСостава, СтрокаОстаткиПродукции,, "Количество,СоставУпаковки,ВложенныеЕдиницы");
		ЗаполнитьВложенныеЕдиницы(СтрокаСостава, СтрокаОстаткиПродукции);
		Если СтрокаСостава.ХешСуммаУпаковки = "" Тогда
			ЗаполнитьПредставлениеПустогоЗначенияНабораИГрупповойУпаковки(СтрокаСостава, ВидПродукции);
		КонецЕсли;
	Иначе
		СтрокаСостава = НайденныеСтроки[0];
	КонецЕсли;
	
	Если ЭлементСоставаУпаковки = Неопределено Тогда
		КоличествоУпаковокСтроки = СтрокаОстаткиПродукции.Остаток;
		КоличествоСтроки         = Остаток;
	Иначе
		КоличествоУпаковокСтроки = Цел(Остаток / ЭлементСоставаУпаковки.Коэффициент);
		КоличествоСтроки         = КоличествоУпаковокСтроки * ЭлементСоставаУпаковки.Коэффициент;
		Если НоваяСтрока Тогда
			СтрокаСостава.ХешСуммаУпаковки      = ЭлементСоставаУпаковки.ХешСуммаУпаковки;
			СтрокаСостава.ПредставлениеУпаковки = ЭлементСоставаУпаковки.Представление;
			ДобавитьЭлементСоставаУпаковки(СтрокаСостава, ЭлементСоставаУпаковки);
		КонецЕсли;
	КонецЕсли;
	
	СтрокаСостава.КоличествоУпаковок = СтрокаСостава.КоличествоУпаковок + КоличествоУпаковокСтроки;
	СтрокаСостава.Количество         = СтрокаСостава.Количество + КоличествоСтроки;
	
	Если КоличествоВложенныхЕдиниц > 0 Тогда
		СтрокаОстаткиПродукции.Остаток = СтрокаОстаткиПродукции.Остаток - Цел(КоличествоСтроки / КоличествоВложенныхЕдиниц);
	Иначе
		СтрокаОстаткиПродукции.Остаток = СтрокаОстаткиПродукции.Остаток - КоличествоСтроки;
	КонецЕсли;
	
	Если СтрокаОстаткиПродукции.Остаток > 0 Тогда
		ДобавитьМонотоварнуюУпаковку(СтрокаОстаткиПродукции, НовыеСтроки, МаксимальныйИндекс);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьСтрокуМонотоварнойУпаковки(ЭлементыСоставаУпаковки, Количество, КоличествоВложенныхЕдиниц, ПодходящийЭлемент)
	
	Для Каждого ЭлементСоставаУпаковки Из ЭлементыСоставаУпаковки Цикл
		Если ЭлементСоставаУпаковки.КоличествоУпаковок = 0
			И КоличествоВложенныхЕдиниц > 0 Тогда
			Если ЭлементСоставаУпаковки.Коэффициент <> КоличествоВложенныхЕдиниц Тогда
				Продолжить;
			КонецЕсли;
		ИначеЕсли ЭлементСоставаУпаковки.Коэффициент = Количество Тогда
			ПодходящийЭлемент = ЭлементСоставаУпаковки;
			Возврат;
		ИначеЕсли ЭлементСоставаУпаковки.Коэффициент > Количество Тогда
			Продолжить;
		Иначе
			Если ПодходящийЭлемент = Неопределено Тогда
				ПодходящийЭлемент = ЭлементСоставаУпаковки;
			Иначе
				Если ЭлементСоставаУпаковки.Коэффициент > ПодходящийЭлемент.Коэффициент Тогда
					ПодходящийЭлемент = ЭлементСоставаУпаковки;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ПодобратьСтрокуМонотоварнойУпаковки(
			ЭлементСоставаУпаковки.ПолучитьЭлементы(), Количество, КоличествоВложенныхЕдиниц, ПодходящийЭлемент);
		Если ПодходящийЭлемент <> Неопределено
			И ПодходящийЭлемент.Коэффициент = Количество Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭлементСоставаУпаковки(СтрокаСостава, ЭлементСоставаУпаковки)
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(ЭлементСоставаУпаковки);
	ЗаполнитьМассивРодителейЭлементаДерева(МассивЭлементов, ЭлементСоставаУпаковки);
	
	НовыеЭлементы = СтрокаСостава.СоставУпаковки.ПолучитьЭлементы();
	ВГраница = МассивЭлементов.ВГраница();
	Для Индекс = 0 По ВГраница Цикл
		НовыйЭлемент = НовыеЭлементы.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, МассивЭлементов[ВГраница - Индекс]);
		НовыеЭлементы = НовыйЭлемент.ПолучитьЭлементы();
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПредставлениеПустогоЗначенияНабораИГрупповойУпаковки(СтрокаСостава, ВидПродукции)
	
	Если СтрокаСостава.ЭтоНабор Тогда
		СтрокаСостава.ПредставлениеУпаковки = НСтр("ru = 'Набор'");
	ИначеЕсли СтрокаСостава.ЭтоГрупповаяУпаковка Тогда
		Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак") Тогда
			СтрокаСостава.ПредставлениеУпаковки = НСтр("ru = 'Блок'");
		Иначе
			СтрокаСостава.ПредставлениеУпаковки = НСтр("ru = 'Групповая упаковка'");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СкопироватьЭлементыДерева(Приемник, Источник)
	
	Для Каждого ЭлементИсточника Из Источник.ПолучитьЭлементы() Цикл
		ЭлементПриемника = Приемник.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(ЭлементПриемника, ЭлементИсточника);
		СкопироватьЭлементыДерева(ЭлементПриемника, ЭлементИсточника);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьМассивРодителейЭлементаДерева(МассивЭлементов, ЭлементДерева)
	
	ЭлементРодитель = ЭлементДерева.ПолучитьРодителя();
	Если ЭлементРодитель <> Неопределено Тогда
		МассивЭлементов.Добавить(ЭлементРодитель);
		ЗаполнитьМассивРодителейЭлементаДерева(МассивЭлементов, ЭлементРодитель);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьМассивЭлементовЭлементаДерева(МассивЭлементов, ЭлементДерева)
	
	ЭлементыДерева = ЭлементДерева.ПолучитьЭлементы();
	Если ЭлементыДерева.Количество() > 0 Тогда
		МассивЭлементов.Добавить(ЭлементыДерева[0]);
		ЗаполнитьМассивЭлементовЭлементаДерева(МассивЭлементов, ЭлементыДерева[0]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПервыйЭлементЭлементаДерева(ЭлементДерева)
	
	ЭлементРодитель = ЭлементДерева.ПолучитьРодителя();
	Если ЭлементРодитель = Неопределено Тогда
		Возврат ЭлементДерева;
	Иначе
		Возврат ПолучитьПервыйЭлементЭлементаДерева(ЭлементРодитель);
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПоследнийЭлементЭлементаДерева(ЭлементДерева)
	
	ЭлементыДерева = ЭлементДерева.ПолучитьЭлементы();
	Если ЭлементыДерева.Количество() = 0 Тогда
		Возврат ЭлементДерева;
	Иначе
		Возврат ПолучитьПоследнийЭлементЭлементаДерева(ЭлементыДерева[0]);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПолучитьМаксимальныйИндексСтрокиВКоллекции(Коллекция, МассивСтрок)
	
	Если МассивСтрок.Количество() = 0 Тогда
		МаксимальныйИндекс = Коллекция.Количество() - 1;
	Иначе
		МаксимальныйИндекс = -1;
		Для Каждого Строка Из МассивСтрок Цикл
			Индекс = Коллекция.Индекс(Строка);
			Если Индекс > МаксимальныйИндекс Тогда
				МаксимальныйИндекс = Индекс;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат МаксимальныйИндекс;
	
КонецФункции

&НаКлиенте
Процедура ПриВыбореСтрокиСоставаУпаковки(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Не РежимФормированияМонотоварнойУпаковки Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	СтруктураПоиска = СтруктураПолейПоиска();
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, Элемент.ТекущиеДанные);
	СтрокаОстаткиПродукции = ОстаткиПродукции.НайтиСтроки(СтруктураПоиска)[0];
	СтрокиСостава = СоставУпаковки.НайтиСтроки(СтруктураПоиска);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидПродукции",                     ВидПродукции);
	ПараметрыОткрытия.Вставить("ИспользоватьУпаковкиНоменклатуры", ИспользоватьУпаковкиНоменклатуры);
	ПараметрыОткрытия.Вставить("Номенклатура",                     СтрокаОстаткиПродукции.Номенклатура);
	ПараметрыОткрытия.Вставить("Характеристика",                   СтрокаОстаткиПродукции.Характеристика);
	ПараметрыОткрытия.Вставить("GTIN",                             СтрокаОстаткиПродукции.GTIN);
	ПараметрыОткрытия.Вставить("ПредставлениеНоменклатуры",        СтрокаОстаткиПродукции.ПредставлениеНоменклатуры);
	ПараметрыОткрытия.Вставить("ТипНоменклатуры",                  СтрокаОстаткиПродукции.ТипНоменклатуры);
	ПараметрыОткрытия.Вставить("ЕдиницаИзмерения",                 СтрокаОстаткиПродукции.ЕдиницаИзмерения);
	ПараметрыОткрытия.Вставить("ХарактеристикиИспользуются",       СтрокаОстаткиПродукции.ХарактеристикиИспользуются);
	ПараметрыОткрытия.Вставить("КоличествоКУпаковке",              СтрокаОстаткиПродукции.Количество);
	ПараметрыОткрытия.Вставить("ЭтоНабор",                         СтрокаОстаткиПродукции.ЭтоНабор);
	ПараметрыОткрытия.Вставить("ЭтоГрупповаяУпаковка",             СтрокаОстаткиПродукции.ЭтоГрупповаяУпаковка);
	ПараметрыОткрытия.Вставить("Упаковки",                         Новый Массив);
	ПараметрыОткрытия.Вставить("АдресПредыдущихШтрихкодов",        АдресПредыдущихШтрихкодов);
	
	Если СтрокаОстаткиПродукции.ЭтоГрупповаяУпаковка Тогда
		ПараметрыОткрытия.Вставить("КоличествоВложенныхЕдиниц",
			СтрокаОстаткиПродукции.ВложенныеЕдиницы[0].Количество);
	КонецЕсли;
	
	Для Каждого СтрокаСостава Из СтрокиСостава Цикл
		СтруктураУпаковки = Новый Структура;
		СтруктураУпаковки.Вставить("ХешСуммаУпаковки",   СтрокаСостава.ХешСуммаУпаковки);
		СтруктураУпаковки.Вставить("КоличествоУпаковок", СтрокаСостава.КоличествоУпаковок);
		ПараметрыОткрытия.Упаковки.Добавить(СтруктураУпаковки);
	КонецЦикла;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОкончанииРедактированияСоставаУпаковок", ЭтотОбъект, СтруктураПоиска);
	
	ОткрытьФорму("Обработка.ВиртуальнаяАгрегацияУпаковокИСМП.Форма.СоставУпаковок",
		ПараметрыОткрытия, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОкончанииРедактированияСоставаУпаковок(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИндексыНовыхСтрок = Новый Массив;
	
	ОбработатьРезультатРедактированияСоставаУпаковки(Результат, ДополнительныеПараметры, ИндексыНовыхСтрок);
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьНомераСтрок(СоставУпаковки);
	Для Каждого Индекс Из ИндексыНовыхСтрок Цикл
		Строка = СоставУпаковки[Индекс];
		СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииНоменклатуры(ЭтотОбъект,
			Строка, КэшированныеЗначения, ПараметрыУказанияСерий);
		Если Строка.ЭтоНабор Или Строка.ЭтоГрупповаяУпаковка Тогда
			Для Каждого ВложеннаяЕдиница Из Строка.ВложенныеЕдиницы Цикл
				СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииНоменклатуры(ЭтотОбъект,
					ВложеннаяЕдиница, КэшированныеЗначения, ПараметрыУказанияСерий);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	РассчитатьМаксимальноеКоличествоУпаковок();
	РассчитатьОстатокПоДокументу();
	
	Если ИндексыНовыхСтрок.Количество() > 0 Тогда
		Элементы.СоставУпаковки.ТекущаяСтрока = СоставУпаковки[ИндексыНовыхСтрок[0]].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСерииСоставаУпаковки(ТекущаяСтрока)
	
	ТекущиеДанные = СоставУпаковки.НайтиПоИдентификатору(ТекущаяСтрока);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ВложеннаяЕдиница Из ТекущиеДанные.ВложенныеЕдиницы Цикл
		ВложеннаяЕдиница.Серия = ТекущиеДанные.Серия;
		ВложеннаяЕдиница.СтатусУказанияСерий = ТекущиеДанные.СтатусУказанияСерий;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатРедактированияСоставаУпаковки(АдресРезультата, СтруктураПоиска, ИндексыНовыхСтрок)
	
	Упаковки = ПолучитьИзВременногоХранилища(АдресРезультата);
	УдалитьИзВременногоХранилища(АдресРезультата);
	
	СтрокаОстаткиПродукции = ОстаткиПродукции.НайтиСтроки(СтруктураПоиска)[0];
	СтрокиСостава = СоставУпаковки.НайтиСтроки(СтруктураПоиска);
	
	ИндексСтроки = СоставУпаковки.Количество();
	Для Каждого СтрокаСостава Из СтрокиСостава Цикл
		Индекс = СоставУпаковки.Индекс(СтрокаСостава);
		Если Индекс < ИндексСтроки Тогда
			ИндексСтроки = Индекс;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаСостава Из СтрокиСостава Цикл
		СоставУпаковки.Удалить(СтрокаСостава);
	КонецЦикла;
	
	Для Каждого Упаковка Из Упаковки Цикл
		СтрокаСостава = СоставУпаковки.Вставить(ИндексСтроки);
		ИндексыНовыхСтрок.Добавить(ИндексСтроки);
		ИндексСтроки = ИндексСтроки + 1;
		ЗаполнитьЗначенияСвойств(СтрокаСостава, СтрокаОстаткиПродукции,, "Количество,СоставУпаковки,ВложенныеЕдиницы");
		ЗаполнитьЗначенияСвойств(СтрокаСостава, Упаковка,, "СоставУпаковки");
		ЗаполнитьЭлементДерева(СтрокаСостава.СоставУпаковки, Упаковка.СоставУпаковки);
		ЗаполнитьВложенныеЕдиницы(СтрокаСостава, СтрокаОстаткиПродукции);
		Если СтрокаСостава.ХешСуммаУпаковки = "" Тогда
			ЗаполнитьПредставлениеПустогоЗначенияНабораИГрупповойУпаковки(СтрокаСостава, ВидПродукции);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСоставУпаковки(МассивСтрок, ЗаполнятьИзИстории)

	ТаблицаТоваров = Новый ТаблицаЗначений();
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки",          ОбщегоНазначения.ОписаниеТипаЧисло(5));
	ТаблицаТоваров.Колонки.Добавить("НомерСтрокиИсточника", ОбщегоНазначения.ОписаниеТипаЧисло(5));
	ТаблицаТоваров.Колонки.Добавить("Номенклатура",         Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаТоваров.Колонки.Добавить("GTIN",                 Метаданные.ОпределяемыеТипы.GTIN.Тип);
	ТаблицаТоваров.Колонки.Добавить("Характеристика",       Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТаблицаТоваров.Колонки.Добавить("СоставУпаковки",       Новый ОписаниеТипов("ДеревоЗначений"));
	
	НомерСтроки = 0;
	СтруктураПоиска = СтруктураПолейПоиска();
	
	Для Каждого ВыделеннаяСтрока Из Элементы.СоставУпаковки.ВыделенныеСтроки Цикл
		
		СтрокаСостава = СоставУпаковки.НайтиПоИдентификатору(ВыделеннаяСтрока);
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаСостава);
		
		СтрокиОстатка = ОстаткиПродукции.НайтиСтроки(СтруктураПоиска);
		Если СтрокиОстатка.Количество() > 0 Тогда
			ИдентификаторСтроки = СтрокиОстатка[0].ПолучитьИдентификатор();
			Если МассивСтрок.Найти(ИдентификаторСтроки) = Неопределено Тогда
				МассивСтрок.Добавить(ИдентификаторСтроки);
				СтрокаТоваров = ТаблицаТоваров.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТоваров, СтрокиОстатка[0]);
				НомерСтроки = НомерСтроки + 1;
				СтрокаТоваров.НомерСтрокиИсточника = СтрокаТоваров.НомерСтроки;
				СтрокаТоваров.НомерСтроки = НомерСтроки;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗаполнятьИзИстории Тогда
		РегистрыСведений.ИсторияИспользованияСоставаУпаковкиИСМП.ЗаполнитьПоследнийИспользованныйСоставУпаковки(ТаблицаТоваров, Ложь);
	Иначе
		РегистрыСведений.ИсторияИспользованияСоставаУпаковкиИСМП.ДополнитьТаблицуУпаковкамиНоменклатуры(ТаблицаТоваров);
	КонецЕсли;
	
	Для Каждого СтрокаТоваров Из ТаблицаТоваров Цикл
		СтрокаОстатка = ОстаткиПродукции[СтрокаТоваров.НомерСтрокиИсточника - 1];
		СтрокаОстатка.Остаток = СтрокаОстатка.Количество;
		СтрокаОстатка.СоставУпаковки.ПолучитьЭлементы().Очистить();
		ЗаполнитьЭлементДерева(СтрокаОстатка.СоставУпаковки, СтрокаТоваров.СоставУпаковки);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСВложеннымиЕдиницами

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьВложенныеЕдиницы(Приемник, Источник)
	
	Для Каждого СтрокаИсточника Из Источник.ВложенныеЕдиницы Цикл
		СтрокаПриемника = Приемник.ВложенныеЕдиницы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПриемника, СтрокаИсточника);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РасчетКоличества

&НаКлиенте
Процедура РассчитатьМаксимальноеКоличествоУпаковок()
	
	Если РежимФормированияМонотоварнойУпаковки Тогда
		УстановитьДоступностьЭлементовФормы();
		Возврат;
	КонецЕсли;
	
	МаксимальноеКоличествоУпаковок = 0;
	СтруктураПоиска = СтруктураПолейПоиска();
	
	Для Каждого СтрокаСостава Из СоставУпаковки Цикл
		Если СтрокаСостава.КоличествоУпаковок > 0 Тогда
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаСостава);
			СтрокиОстатка = ОстаткиПродукции.НайтиСтроки(СтруктураПоиска);
			Если СтрокиОстатка.Количество() Тогда
				СтрокаОстатка = СтрокиОстатка[0];
				ТекущееМаксимальноеКоличествоУпаковок = Цел(СтрокаОстатка.Количество / СтрокаСостава.КоличествоУпаковок);
			Иначе
				ТекущееМаксимальноеКоличествоУпаковок = 0;
			КонецЕсли;
			
			Если ТекущееМаксимальноеКоличествоУпаковок = 0 Тогда
				МаксимальноеКоличествоУпаковок = 0;
				Прервать;
			ИначеЕсли МаксимальноеКоличествоУпаковок = 0 Тогда
				МаксимальноеКоличествоУпаковок = ТекущееМаксимальноеКоличествоУпаковок;
			ИначеЕсли МаксимальноеКоличествоУпаковок > ТекущееМаксимальноеКоличествоУпаковок Тогда
				МаксимальноеКоличествоУпаковок = ТекущееМаксимальноеКоличествоУпаковок;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ИзменитьКоличествоУпаковокПриНеобходимости();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКоличествоУпаковокПриНеобходимости()
	
	Если КоличествоУпаковок < 0 Тогда
		КоличествоУпаковок = 0;
	КонецЕсли;
	
	Если КоличествоУпаковок > МаксимальноеКоличествоУпаковок Тогда
		КоличествоУпаковок = МаксимальноеКоличествоУпаковок;
	ИначеЕсли КоличествоУпаковок = 0 И МаксимальноеКоличествоУпаковок > 0 Тогда
		КоличествоУпаковок = 1;
	КонецЕсли;
	
	СформироватьЗаголовокКоличествоУпаковок();
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьОстатокПоДокументу()
	
	СтруктураПоиска = СтруктураПолейПоиска();
	Для Каждого СтрокаОстатка Из ОстаткиПродукции Цикл
		Если Не СтрокаОстатка.ЕстьСвободныйОстаток Тогда
			Продолжить;
		КонецЕсли;
		КоличествоВСоставеУпаковок = 0;
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаОстатка);
		СтрокиСостава = СоставУпаковки.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаСостава Из СтрокиСостава Цикл
			Если СтрокаСостава.ЭтоГрупповаяУпаковка Тогда
				КоличествоСтроки = Цел(СтрокаСостава.Количество / СтрокаСостава.ВложенныеЕдиницы[0].Количество);
			Иначе
				КоличествоСтроки = СтрокаСостава.Количество;
			КонецЕсли;
			Если Не РежимФормированияМонотоварнойУпаковки Тогда
				КоличествоСтроки = КоличествоСтроки * КоличествоУпаковок;
			КонецЕсли;
			КоличествоВСоставеУпаковок = КоличествоВСоставеУпаковок + КоличествоСтроки;
		КонецЦикла;
		СтрокаОстатка.Остаток = СтрокаОстатка.Количество - КоличествоВСоставеУпаковок;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УменьшитьКоличествоСвободногоОстатка()
	
	Для Каждого СтрокаОстатка Из ОстаткиПродукции Цикл
		СтрокаОстатка.Количество = СтрокаОстатка.Остаток;
		СтрокаОстатка.ЕстьСвободныйОстаток = СтрокаОстатка.Количество > 0;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УвеличитьКоличествоОстатка(ЭлементДерева)
	
	Если ЗначениеЗаполнено(ЭлементДерева.Номенклатура)
		Или ЗначениеЗаполнено(ЭлементДерева.GTIN) Тогда
		ПоследнийЭлемент = ПолучитьПоследнийЭлементЭлементаДерева(ЭлементДерева);
		Если ЭлементДерева.ЭтоНабор
			Или ЭлементДерева.ЭтоГрупповаяУпаковка Тогда
			Количество = ПоследнийЭлемент.КоличествоИтог;
		Иначе
			Количество = ПоследнийЭлемент.КоличествоИтог * ПоследнийЭлемент.Количество;
		КонецЕсли;
		УвеличитьКоличествоОстаткаПоПродукции(ПоследнийЭлемент, Количество);
	Иначе
		СтрокиСостава = ЭлементДерева.ПолучитьЭлементы();
		Для Каждого СтрокаСостава Из СтрокиСостава Цикл
			УвеличитьКоличествоОстаткаПоПродукции(СтрокаСостава, СтрокаСостава.КоличествоИтог);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УвеличитьКоличествоОстаткаПоПродукции(СтрокаПродукции, РазупакованноеКоличество = 1)
	
	СтруктураПоиска = СтруктураПолейПоиска();
	
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПродукции);
	
	СтрокиОстатка = ОстаткиПродукции.НайтиСтроки(СтруктураПоиска);
	Если СтрокиОстатка.Количество() > 0 Тогда
		
		СтрокаОстатка                      = СтрокиОстатка[0];
		СтрокаОстатка.Остаток              = СтрокаОстатка.Остаток              + РазупакованноеКоличество;
		СтрокаОстатка.Количество           = СтрокаОстатка.Количество           + РазупакованноеКоличество;
		СтрокаОстатка.КоличествоВУпаковках = СтрокаОстатка.КоличествоВУпаковках - РазупакованноеКоличество;
		СтрокаОстатка.ЕстьСвободныйОстаток = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСоставУпаковки()
	
	СоставУпаковки.Очистить();
	МаксимальноеКоличествоУпаковок = 0;
	КоличествоУпаковок = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура УвеличитьКоличествоВУпаковках(Строки)
	
	Для Каждого Строка Из Строки Цикл
		ЭлементДерева = ИтоговоеДеревоУпаковок.НайтиПоИдентификатору(Строка);
		Если РежимФормированияМонотоварнойУпаковки Тогда
			ПоследнийЭлемент = ПолучитьПоследнийЭлементЭлементаДерева(ЭлементДерева);
			Если ЭлементДерева.ЭтоНабор
				Или ЭлементДерева.ЭтоГрупповаяУпаковка Тогда
				Количество = ПоследнийЭлемент.КоличествоИтог;
			Иначе
				Количество = ПоследнийЭлемент.КоличествоИтог * ПоследнийЭлемент.Количество;
			КонецЕсли;
			УвеличитьКоличествоВУпаковкахПоПродукции(ПоследнийЭлемент, Количество);
		Иначе
			Для Каждого СтрокаСостава Из ЭлементДерева.ПолучитьЭлементы() Цикл
				УвеличитьКоличествоВУпаковкахПоПродукции(СтрокаСостава, СтрокаСостава.КоличествоИтог);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УвеличитьКоличествоВУпаковкахПоПродукции(СтрокаПродукции, УпакованноеКоличество = 1)
	
	СтруктураПоиска = СтруктураПолейПоиска();
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПродукции);
	
	СтрокиОстатка = ОстаткиПродукции.НайтиСтроки(СтруктураПоиска);
	Если СтрокиОстатка.Количество() Тогда
		СтрокаОстатка = СтрокиОстатка[0];
		СтрокаОстатка.КоличествоВУпаковках = СтрокаОстатка.КоличествоВУпаковках + УпакованноеКоличество;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ПервоначальноеЗаполнение
	
&НаСервере
Процедура ОбработатьИПроверитьПереданныеПараметры(Отказ)
	
	Если Не ЗначениеЗаполнено(Параметры.Документ) Тогда
		ТекстОшибки = НСтр("ru = 'В форму агрегации не передан документ.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,,,Отказ);
		Возврат;
	КонецЕсли;
	
	ЭтоЗаказНаЭмиссию = ТипЗнч(Параметры.Документ) = Тип("ДокументСсылка.ЗаказНаЭмиссиюКодовМаркировкиСУЗ");
	ВидПродукции      = Параметры.ВидПродукции;
	
	Если Не ЗначениеЗаполнено(ВидПродукции) И ЭтоЗаказНаЭмиссию Тогда
		ВидПродукции = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Документ, "ВидПродукции");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидПродукции) Тогда
		ТекстОшибки = НСтр("ru = 'В форму агрегации не передан вид маркируемой продукции.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,,,Отказ);
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПулКодовМаркировки.КодМаркировки
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировки
	|ГДЕ
	|	ПулКодовМаркировки." + ?(ЭтоЗаказНаЭмиссию, "ЗаказНаЭмиссию", "ДокументОснование") + " = &Документ
	|	И ВидПродукции = &ВидПродукции
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Документ", Параметры.Документ);
	Запрос.УстановитьПараметр("ВидПродукции", ВидПродукции);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Если ЭтоЗаказНаЭмиссию Тогда
			Если ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Документ, "СервисПровайдер")) Тогда
				ТекстОшибки = НСтр("ru = 'По заказу ""%1"" для %2 эмиссия кодов осуществляется сервис-провайдером.'");
			Иначе
				ТекстОшибки = НСтр("ru = 'По заказу ""%1"" для %2 эмиссия кодов еще не выполнена.'");
			КонецЕсли;
		Иначе
			ТекстОшибки = НСтр("ru = 'По документу ""%1"" для %2 отсутствуют исполненные заказы на эмиссию кодов маркировки.'");
		КонецЕсли;
		
		ВидПродукцииРодительный = НРег(ПолучитьСклоненияСтроки(ВидПродукции, "Л=ru_RU", "ПД=Родительный")[0]);
		ТекстОшибки = СтрШаблон(ТекстОшибки, Параметры.Документ, ВидПродукцииРодительный);
		
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,,,Отказ);
	Иначе
		Документ = Параметры.Документ;
		
		Если ИспользоватьСерииНоменклатуры Тогда
			Если ЭтоЗаказНаЭмиссию Тогда
				ОснованиеЗаказаНаЭмиссию = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ДокументОснование");
			Иначе
				ОснованиеЗаказаНаЭмиссию = Документ;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОснованиеЗаказаНаЭмиссию) Тогда
				ИнтеграцияИСМППереопределяемый.ПриОпределенииСкладаДокументаОснования(Склад, ОснованиеЗаказаНаЭмиссию);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьСохраненныеНастройки()
	
	СохраненныеНастройки = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить("Обработка.ВиртуальнаяАгрегацияУпаковокИСМП.Форма.Форма", "");
	
	Если ТипЗнч(СохраненныеНастройки) = Тип("Структура")
		И СохраненныеНастройки.Свойство("СвободныеОстаткиПродукции") Тогда
		СвободныеОстаткиПродукции = СохраненныеНастройки.СвободныеОстаткиПродукции;
	Иначе
		СвободныеОстаткиПродукции = Истина;
	КонецЕсли;
	
	Если ТипЗнч(СохраненныеНастройки) = Тип("Структура")
		И СохраненныеНастройки.Свойство("ПроизвольныйСоставУпаковки") Тогда
		ПроизвольныйСоставУпаковки = СохраненныеНастройки.ПроизвольныйСоставУпаковки;
	Иначе
		ПроизвольныйСоставУпаковки = Истина;
	КонецЕсли;
	
	Если ТипЗнч(СохраненныеНастройки) = Тип("Структура")
		И СохраненныеНастройки.Свойство("РежимФормированияМонотоварнойУпаковки") Тогда
		РежимФормированияМонотоварнойУпаковки = СохраненныеНастройки.РежимФормированияМонотоварнойУпаковки;
	Иначе
		РежимФормированияМонотоварнойУпаковки = Ложь;
	КонецЕсли;
	
	Если ТипЗнч(СохраненныеНастройки) = Тип("Структура")
		И СохраненныеНастройки.Свойство("ВидимостьСпискаУпаковок") Тогда
		Элементы.ГруппаСписокУпаковок.Видимость = СохраненныеНастройки.ВидимостьСпискаУпаковок;
	Иначе
		Элементы.ГруппаСписокУпаковок.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеЗаполнения()
	
	ДлительнаяОперация = НачатьПолучениеДанныхЗаполнения();
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПолучениеДанныхЗаполненияЗавершение", ЭтотОбъект);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Получение данных заполнения.'");
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция НачатьПолучениеДанныхЗаполнения()
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Документ",     Документ);
	ПараметрыПроцедуры.Вставить("ВидПродукции", ВидПродукции);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ЭтотОбъект.УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение данных заполнения формы виртуальной агрегации.'");
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	ИнтеграцияИСПереопределяемый.НастроитьДлительнуюОперацию(ПараметрыПроцедуры, ПараметрыВыполнения);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("Обработки.ВиртуальнаяАгрегацияУпаковокИСМП.ПолучитьДанныеЗаполнения",
		ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ПолучениеДанныхЗаполненияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда  // отменено пользователем
		Закрыть();
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ПоказатьПредупреждение(, Результат.КраткоеПредставлениеОшибки);
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		ПолучениеДанныхЗаполненияЗавершениеНаСервере(Результат.АдресРезультата);
		СформироватьЗаголовокГиперссылкиОткрытияСпискаУпаковок();
		
		Если Элементы.ИсторическаяУпаковка.СписокВыбора.Количество() > 0 Тогда
			ИсторическаяУпаковка = Элементы.ИсторическаяУпаковка.СписокВыбора[0].Значение;
			
			Если Не РежимФормированияМонотоварнойУпаковки
				И Не ПроизвольныйСоставУпаковки
				И ЗначениеЗаполнено(ИсторическаяУпаковка) Тогда
				ПриИзмененииИсторическойУпаковки();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучениеДанныхЗаполненияЗавершениеНаСервере(АдресРезультата)
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		ДанныеЗаполнения = ПолучитьИзВременногоХранилища(АдресРезультата);
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
			Если ДанныеЗаполнения.Свойство("ОстаткиПродукции") Тогда
				ЗаполнитьОстаткиПродукцииИзДанныхЗаполнения(ДанныеЗаполнения.ОстаткиПродукции);
			КонецЕсли;
			
			Если ДанныеЗаполнения.Свойство("СуществующиеУпаковки") Тогда
				ДобавитьСуществующиеУпаковкиВИтоговоеДеревоУпаковок(ДанныеЗаполнения.СуществующиеУпаковки);
			КонецЕсли;
			
			Если ДанныеЗаполнения.Свойство("СоставИсторическихУпаковок") Тогда
				ЗначениеВРеквизитФормы(ДанныеЗаполнения.СоставИсторическихУпаковок, "СоставИсторическихУпаковок");
			КонецЕсли;
			
			Если ДанныеЗаполнения.Свойство("СписокИсторическихУпаковок") Тогда
				Для Каждого ЭлементСписка Из ДанныеЗаполнения.СписокИсторическихУпаковок Цикл
					Элементы.ИсторическаяУпаковка.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		ВидимостьGTIN = Ложь;
		
		Для Каждого СтрокаТаблицы Из ОстаткиПродукции Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.GTIN) Тогда
				ВидимостьGTIN = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Элементы.ОстаткиПродукцииGTIN.Видимость = ВидимостьGTIN;
		Элементы.СоставУпаковкиGTIN.Видимость   = ВидимостьGTIN;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОстаткиПродукцииИзДанныхЗаполнения(ДанныеДляЗаполнения)
	
	Если ВидПродукции = Перечисления.ВидыПродукцииИС.Табак Тогда
		ШаблонПотребительскойУпаковки = ИнтеграцияИСМПКлиентСервер.ШаблонКодаМаркировкиПоВидуПродукции(ВидПродукции);
	Иначе
		ШаблонПотребительскойУпаковки = Неопределено;
	КонецЕсли;
	
	Для Каждого Строка Из ДанныеДляЗаполнения Цикл
		НоваяСтрока = ОстаткиПродукции.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка,, "СоставУпаковки,ВложенныеЕдиницы");
		ЗаполнитьЭлементДерева(НоваяСтрока.СоставУпаковки, Строка.СоставУпаковки);
		ЗаполнитьВложенныеЕдиницы(НоваяСтрока, Строка);
		Если НоваяСтрока.Шаблон = ШаблонПотребительскойУпаковки Тогда
			НоваяСтрока.АгрегацияНедоступна = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭлементДерева(Приемник, Источник)
	
	Для Каждого СтрокаИсточника Из Источник.Строки Цикл
		СтрокаПриемника = Приемник.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПриемника, СтрокаИсточника);
		ЗаполнитьЭлементДерева(СтрокаПриемника, СтрокаИсточника);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСуществующиеУпаковкиВИтоговоеДеревоУпаковок(СуществующиеУпаковки)
	
	ЗаполнитьЭлементДереваСуществующихУпаковок(ИтоговоеДеревоУпаковок, СуществующиеУпаковки,
		ПолучитьЕдиницыИзмеренияПродукции(), Новый Структура);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЕдиницыИзмеренияПродукции()
	
	ЕдиницыИзмерения = Новый Соответствие;
	
	Для Каждого Строка Из ОстаткиПродукции Цикл
		Если ЗначениеЗаполнено(Строка.Номенклатура)
			И ЕдиницыИзмерения[Строка.Номенклатура] = Неопределено Тогда
			ЕдиницыИзмерения.Вставить(Строка.Номенклатура, Строка.ЕдиницаИзмерения);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕдиницыИзмерения;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьЭлементДереваСуществующихУпаковок(Приемник, Источник, ЕдиницыИзмерения, Параметры)
	
	Для Каждого СтрокаИсточника Из Источник.Строки Цикл
		
		ЭтоПервыйУровень = СтрокаИсточника.Родитель = Неопределено;
		ЭтоПоследнийУровень = СтрокаИсточника.Строки.Количество() = 0;
			
		СтрокаПриемника = Приемник.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПриемника, СтрокаИсточника);
		СтрокаПриемника.УпаковкаСформирована = Истина;
		
		ЕдиницаИзмерения = ЕдиницыИзмерения[СтрокаПриемника.Номенклатура];
		Если ЕдиницаИзмерения = Неопределено Тогда
			ЕдиницаИзмерения = НСтр("ru = 'шт'");
		КонецЕсли;
		
		Если ЭтоПервыйУровень Тогда
			Параметры.Вставить("ЭтоПроизвольнаяУпаковка",
				Не ЗначениеЗаполнено(СтрокаПриемника.Номенклатура)
				И Не ЗначениеЗаполнено(СтрокаПриемника.GTIN));
		КонецЕсли;
		
		Если (СтрокаПриемника.ЭтоНабор
			Или СтрокаПриемника.ЭтоГрупповаяУпаковка)
			И ЭтоПоследнийУровень
			Или Параметры.ЭтоПроизвольнаяУпаковка
			И Не ЭтоПервыйУровень Тогда
			СтрокаПриемника.ТребуетсяУказаниеПараметровГенерацииШтрихкодов = Ложь;
		Иначе
			СтрокаПриемника.ТребуетсяУказаниеПараметровГенерацииШтрихкодов = Истина;
		КонецЕсли;
		
		Если Параметры.ЭтоПроизвольнаяУпаковка Тогда
			Если ЭтоПервыйУровень Тогда
				СтрокаПриемника.ПредставлениеУпаковки = ПросклонятьЕдиницу(СтрокаПриемника.Количество, ВидПродукции, Истина);
				СтрокаПриемника.ПредставлениеУпаковкиИтог = ПросклонятьУпаковку(СтрокаПриемника.КоличествоИтог);
			ИначеЕсли СтрокаПриемника.ЭтоНабор Тогда
				СтрокаПриемника.ПредставлениеУпаковки = ПросклонятьНабор(СтрокаПриемника.Количество);
				СтрокаПриемника.ПредставлениеУпаковкиИтог = ПросклонятьНабор(СтрокаПриемника.КоличествоИтог);
			ИначеЕсли СтрокаПриемника.ЭтоГрупповаяУпаковка Тогда
				СтрокаПриемника.ПредставлениеУпаковки = ПросклонятьГрупповуюУпаковку(СтрокаПриемника.Количество, ВидПродукции);
				СтрокаПриемника.ПредставлениеУпаковкиИтог = ПросклонятьГрупповуюУпаковку(СтрокаПриемника.КоличествоИтог, ВидПродукции);
			Иначе
				СтрокаПриемника.ПредставлениеУпаковки = ЕдиницаИзмерения;
				СтрокаПриемника.ПредставлениеУпаковкиИтог = ПросклонятьЕдиницу(СтрокаПриемника.КоличествоИтог, ВидПродукции);
			КонецЕсли;
		ИначеЕсли ЭтоПоследнийУровень Тогда
			Если СтрокаПриемника.ЭтоНабор Тогда
				СтрокаПриемника.ПредставлениеУпаковки = ПросклонятьЕдиницу(СтрокаПриемника.Количество, ВидПродукции);
				СтрокаПриемника.ПредставлениеУпаковкиИтог = ПросклонятьНабор(СтрокаПриемника.КоличествоИтог);
				Если Не ЭтоПервыйУровень Тогда
					Родитель = СтрокаПриемника.ПолучитьРодителя();
					Родитель.ПредставлениеУпаковки = ЕдиницаИзмерения;
				КонецЕсли;
			ИначеЕсли СтрокаПриемника.ЭтоГрупповаяУпаковка Тогда
				СтрокаПриемника.ПредставлениеУпаковки = ПросклонятьЕдиницу(СтрокаПриемника.Количество, ВидПродукции);
				СтрокаПриемника.ПредставлениеУпаковкиИтог = ПросклонятьГрупповуюУпаковку(СтрокаПриемника.КоличествоИтог, ВидПродукции);
				Если Не ЭтоПервыйУровень Тогда
					Родитель = СтрокаПриемника.ПолучитьРодителя();
					Родитель.ПредставлениеУпаковки = ПросклонятьГрупповуюУпаковку(Родитель.Количество, ВидПродукции);
				КонецЕсли;
			Иначе
				СтрокаПриемника.ПредставлениеУпаковки = ЕдиницаИзмерения;
				СтрокаПриемника.ПредставлениеУпаковкиИтог = ПросклонятьУпаковку(СтрокаПриемника.КоличествоИтог);
			КонецЕсли;
		Иначе
			СтрокаПриемника.ПредставлениеУпаковки = СтрокаИсточника.Строки[0].Содержимое;
			СтрокаПриемника.ПредставлениеУпаковкиИтог = ПросклонятьУпаковку(СтрокаПриемника.КоличествоИтог);
		КонецЕсли;
		
		ЗаполнитьЭлементДереваСуществующихУпаковок(СтрокаПриемника, СтрокаИсточника, ЕдиницыИзмерения, Параметры);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#Область ЗаполнениеизИстории

&НаКлиенте
Процедура ПриИзмененииИсторическойУпаковки()
	
	ОчиститьСоставУпаковки();
	
	Если ЗначениеЗаполнено(ИсторическаяУпаковка) Тогда
		Для Каждого СтрокаУпаковки Из СоставИсторическихУпаковок.ПолучитьЭлементы() Цикл
			Если СтрокаУпаковки.ХешСуммаУпаковки = ИсторическаяУпаковка Тогда
				Для Каждого СтрокаПродукции Из СтрокаУпаковки.ПолучитьЭлементы() Цикл
					НоваяПродукция = СоставУпаковки.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяПродукция, СтрокаПродукции);
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	РассчитатьМаксимальноеКоличествоУпаковок();
	РассчитатьОстатокПоДокументу();
	
	ПриИзмененииИсторическойУпаковкиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииИсторическойУпаковкиНаСервере()
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьНомераСтрок(СоставУпаковки);
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, СоставУпаковки);
	ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий);
	
КонецПроцедуры

#КонецОбласти 

#Область ФормированиеУпаковок

&НаКлиенте
Процедура ДобавитьНовыеУпаковкиВИтоговоеДеревоУпаковок()
	
	ИзменитьРежим = Ложь;
	Если РежимФормированияМонотоварнойУпаковки Тогда
		НовыеСтроки = ДобавитьНовыеМонотоварныеУпаковкиВИтоговоеДеревоУпаковок();
	ИначеЕсли СоставУпаковки.Количество() = 1 Тогда
		ИзменитьРежим = Истина;
		РежимФормированияМонотоварнойУпаковки = Не РежимФормированияМонотоварнойУпаковки;
		ДополнитьПроизвольнуюУпаковкуПолямиМонотоварной(СоставУпаковки[0]);
		НовыеСтроки = ДобавитьНовыеМонотоварныеУпаковкиВИтоговоеДеревоУпаковок();
	Иначе
		НовыеСтроки = ДобавитьНовуюПроизвольнуюУпаковкуВИтоговоеДеревоУпаковок();
	КонецЕсли;
	
	УвеличитьКоличествоВУпаковках(НовыеСтроки);
	
	СтрокиБезИстории = Новый Массив;
	ОбработатьНовыеУпаковкиВИтоговомДеревеУпаковок(НовыеСтроки, СтрокиБезИстории);
	
	Если СтрокиБезИстории.Количество() > 0 Тогда
		Если ПредыдущиеШтрихкоды = Неопределено Тогда
			ОткрытьФормуГенерацииШтрихкодов(СтрокиБезИстории);
		Иначе
			ЗаполнитьПараметрыГенерацииШтрихкодов(СтрокиБезИстории);
		КонецЕсли;
	КонецЕсли;
	
	Если ИзменитьРежим Тогда
		РежимФормированияМонотоварнойУпаковки = Не РежимФормированияМонотоварнойУпаковки;
	КонецЕсли;
	
	ЭлементыДерева = ИтоговоеДеревоУпаковок.ПолучитьЭлементы();
	Если ЭлементыДерева.Количество() > 0 Тогда
		Элементы.ИтоговоеДеревоУпаковок.ТекущаяСтрока = ЭлементыДерева[0].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ДобавитьНовыеМонотоварныеУпаковкиВИтоговоеДеревоУпаковок()
	
	Если ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияМОТП(ВидПродукции) Тогда
		НаименованиеСодержимогоГрупповойУпаковки = НСтр("ru = 'блок'");
	Иначе
		НаименованиеСодержимогоГрупповойУпаковки = НСтр("ru = 'групповая упаковка'");
	КонецЕсли;
	
	НовыеСтроки = Новый Массив;
	ДобавленныеГрупповыеЭлементы = Новый Массив;
	ИсключаемыеПоля = "Количество,ПредставлениеУпаковки,ХешСуммаУпаковки,СоставУпаковки,ВложенныеЕдиницы";
	ЭлементыДерева = ИтоговоеДеревоУпаковок.ПолучитьЭлементы();
	ВГраницаСоставаУпаковки = СоставУпаковки.Количество() - 1;
	
	Для ИндексСтрокиСоставаУпаковки = 0 По ВГраницаСоставаУпаковки Цикл
		
		СтрокаСоставаУпаковки = СоставУпаковки[ВГраницаСоставаУпаковки - ИндексСтрокиСоставаУпаковки];
		
		Если СтрокаСоставаУпаковки.КоличествоУпаковок = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоВложенныхЕдиниц = 0;
		Если СтрокаСоставаУпаковки.ЭтоГрупповаяУпаковка Тогда
			КоличествоВложенныхЕдиниц = СтрокаСоставаУпаковки.ВложенныеЕдиницы[0].Количество;
		КонецЕсли;
		
		КоличествоСоставляющихНабора = 1;
		Если СтрокаСоставаУпаковки.ЭтоНабор Тогда
			КоличествоСоставляющихНабора = СтрокаСоставаУпаковки.ВложенныеЕдиницы.Количество();
		КонецЕсли;
		
		ПредставлениеНоменклатуры = ПредставлениеНоменклатуры(
			СтрокаСоставаУпаковки.Номенклатура,
			СтрокаСоставаУпаковки.Характеристика,
			СтрокаСоставаУпаковки.Серия,
			ИнтеграцияИСМПКлиентСервер.ПредставлениеGTINОстаткиПоВидуПродукции(
			СтрокаСоставаУпаковки.ПредставлениеНоменклатуры, ВидПродукции));
		
		ПредыдущаяСтрокаАгрегации = Неопределено;
		Если ЗначениеЗаполнено(СтрокаСоставаУпаковки.ХешСуммаУпаковки) Тогда
			
			МассивЭлементов = Новый Массив;
			ЗаполнитьМассивЭлементовЭлементаДерева(МассивЭлементов, СтрокаСоставаУпаковки.СоставУпаковки);
			ВГраница = МассивЭлементов.ВГраница();
			Для Индекс = 0 По ВГраница Цикл
				ЭлементСоставаУпаковки = МассивЭлементов[ВГраница - Индекс];
				Если КоличествоВложенныхЕдиниц > 0
					И ЭлементСоставаУпаковки.Коэффициент = КоличествоВложенныхЕдиниц Тогда
					Продолжить;
				КонецЕсли;
				
				Если Индекс = 0 Тогда
					СтрокаАгрегации = ЭлементыДерева.Вставить(0);
					СкопироватьЭлементыДерева(СтрокаАгрегации.СоставУпаковки, СтрокаСоставаУпаковки.СоставУпаковки);
					НовыеСтроки.Добавить(СтрокаАгрегации.ПолучитьИдентификатор());
					СтрокаАгрегации.Содержимое = СтрШаблон("%1, %2",
						ЭлементСоставаУпаковки.Наименование,
						ПредставлениеНоменклатуры);
					ДобавленныеГрупповыеЭлементы.Добавить(СтрокаАгрегации);
				Иначе
					СтрокаАгрегации = СтрокаАгрегации.ПолучитьЭлементы().Добавить();
					СтрокаАгрегации.Содержимое = ЭлементСоставаУпаковки.Наименование;
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(СтрокаАгрегации, СтрокаСоставаУпаковки,, ИсключаемыеПоля);
				
				СтрокаАгрегации.ХешСуммаУпаковки = ЭлементСоставаУпаковки.ХешСуммаУпаковки;
				СтрокаАгрегации.Упаковка         = ЭлементСоставаУпаковки.Упаковка;
				
				Если КоличествоСоставляющихНабора = 1 Тогда
					СтрокаАгрегации.Коэффициент = ЭлементСоставаУпаковки.Коэффициент;
				Иначе
					СтрокаАгрегации.Коэффициент = 0;
				КонецЕсли;
				
				СтрокаАгрегации.УпаковкаСформирована = Ложь;
				СтрокаАгрегации.ТребуетсяУказаниеПараметровГенерацииШтрихкодов = Истина;
				
				Если ЭлементСоставаУпаковки.КоличествоУпаковок = 0 Тогда
					СтрокаАгрегации.Количество            = ЭлементСоставаУпаковки.Коэффициент;
					СтрокаАгрегации.ПредставлениеУпаковки = СтрокаСоставаУпаковки.ЕдиницаИзмерения;
				Иначе
					СтрокаАгрегации.Количество            = ЭлементСоставаУпаковки.КоличествоУпаковок;
					СтрокаАгрегации.ПредставлениеУпаковки = МассивЭлементов[ВГраница - Индекс - 1].Наименование;
				КонецЕсли;
				Если Индекс = 0 Тогда
					СтрокаАгрегации.КоличествоИтог = СтрокаСоставаУпаковки.КоличествоУпаковок;
				Иначе
					СтрокаАгрегации.КоличествоИтог =
						ПредыдущаяСтрокаАгрегации.Количество * ПредыдущаяСтрокаАгрегации.КоличествоИтог;
				КонецЕсли;
				СтрокаАгрегации.ПредставлениеУпаковкиИтог = ПросклонятьУпаковку(СтрокаАгрегации.КоличествоИтог);
				ПредыдущаяСтрокаАгрегации = СтрокаАгрегации;
			КонецЦикла;
			
			Если СтрокаСоставаУпаковки.ЭтоНабор Тогда
				СтрокаАгрегации = СтрокаАгрегации.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаАгрегации, СтрокаСоставаУпаковки,, ИсключаемыеПоля);
				ЗаполнитьВложенныеЕдиницы(СтрокаАгрегации, СтрокаСоставаУпаковки);
				СтрокаАгрегации.Содержимое = НСтр("ru = 'набор'");
				СтрокаАгрегации.УпаковкаСформирована = Ложь;
				СтрокаАгрегации.ТребуетсяУказаниеПараметровГенерацииШтрихкодов = Ложь;
				СтрокаАгрегации.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_DataMatrix");
				СтрокаАгрегации.Количество = СтрокаАгрегации.ВложенныеЕдиницы.Итог("Количество");
				Если КоличествоСоставляющихНабора = 1 Тогда
					СтрокаАгрегации.Коэффициент = СтрокаСоставаУпаковки.ВложенныеЕдиницы[0].Количество;
				КонецЕсли;
				СтрокаАгрегации.ПредставлениеУпаковки = ПросклонятьЕдиницу(СтрокаАгрегации.Количество, ВидПродукции);
				СтрокаАгрегации.КоличествоИтог = СтрокаСоставаУпаковки.Количество;
				СтрокаАгрегации.ПредставлениеУпаковкиИтог = ПросклонятьНабор(СтрокаАгрегации.КоличествоИтог);
			ИначеЕсли СтрокаСоставаУпаковки.ЭтоГрупповаяУпаковка
				И КоличествоВложенныхЕдиниц > 0 Тогда
				СтрокаАгрегации = СтрокаАгрегации.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаАгрегации, СтрокаСоставаУпаковки,, ИсключаемыеПоля);
				ЗаполнитьВложенныеЕдиницы(СтрокаАгрегации, СтрокаСоставаУпаковки);
				СтрокаАгрегации.Содержимое = НаименованиеСодержимогоГрупповойУпаковки;
				СтрокаАгрегации.УпаковкаСформирована = Ложь;
				СтрокаАгрегации.ТребуетсяУказаниеПараметровГенерацииШтрихкодов = Ложь;
				СтрокаАгрегации.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_DataMatrix");
				СтрокаАгрегации.Количество = КоличествоВложенныхЕдиниц;
				СтрокаАгрегации.Коэффициент = КоличествоВложенныхЕдиниц;
				СтрокаАгрегации.ПредставлениеУпаковки = ПросклонятьЕдиницу(СтрокаАгрегации.Количество, ВидПродукции);
				СтрокаАгрегации.КоличествоИтог = Цел(СтрокаСоставаУпаковки.Количество / КоличествоВложенныхЕдиниц);
				СтрокаАгрегации.ПредставлениеУпаковкиИтог = ПросклонятьГрупповуюУпаковку(СтрокаАгрегации.КоличествоИтог, Видпродукции);
			КонецЕсли;
			
		Иначе
			
			СтрокаАгрегации = ЭлементыДерева.Вставить(0);
			НовыеСтроки.Добавить(СтрокаАгрегации.ПолучитьИдентификатор());
			ЗаполнитьЗначенияСвойств(СтрокаАгрегации, СтрокаСоставаУпаковки,, ИсключаемыеПоля);
			ЗаполнитьВложенныеЕдиницы(СтрокаАгрегации, СтрокаСоставаУпаковки);
			СтрокаАгрегации.УпаковкаСформирована = Ложь;
			СтрокаАгрегации.ТребуетсяУказаниеПараметровГенерацииШтрихкодов = Ложь;
			СтрокаАгрегации.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_DataMatrix");
			Если СтрокаСоставаУпаковки.ЭтоНабор Тогда
				СтрокаАгрегации.Содержимое = СтрШаблон("%1, %2",
					НСтр("ru = 'набор'"),
					ПредставлениеНоменклатуры);
				СтрокаАгрегации.Количество = СтрокаАгрегации.ВложенныеЕдиницы.Итог("Количество");
				Если КоличествоСоставляющихНабора = 1 Тогда
					СтрокаАгрегации.Коэффициент = СтрокаСоставаУпаковки.ВложенныеЕдиницы[0].Количество;
				КонецЕсли;
				СтрокаАгрегации.ПредставлениеУпаковки = ПросклонятьЕдиницу(СтрокаАгрегации.Количество, ВидПродукции);
				СтрокаАгрегации.КоличествоИтог = СтрокаСоставаУпаковки.Количество;
				СтрокаАгрегации.ПредставлениеУпаковкиИтог = ПросклонятьНабор(СтрокаАгрегации.КоличествоИтог);
			ИначеЕсли СтрокаСоставаУпаковки.ЭтоГрупповаяУпаковка
				И КоличествоВложенныхЕдиниц > 0 Тогда
				СтрокаАгрегации.Содержимое = СтрШаблон("%1, %2",
					НаименованиеСодержимогоГрупповойУпаковки,
					ПредставлениеНоменклатуры);
				СтрокаАгрегации.Количество = КоличествоВложенныхЕдиниц;
				СтрокаАгрегации.Коэффициент = КоличествоВложенныхЕдиниц;
				СтрокаАгрегации.ПредставлениеУпаковки = ПросклонятьЕдиницу(СтрокаАгрегации.Количество, ВидПродукции);
				СтрокаАгрегации.КоличествоИтог = Цел(СтрокаСоставаУпаковки.Количество / КоличествоВложенныхЕдиниц);
				СтрокаАгрегации.ПредставлениеУпаковкиИтог = ПросклонятьГрупповуюУпаковку(СтрокаАгрегации.КоличествоИтог, Видпродукции);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Элементы.ГруппаСписокУпаковок.Видимость
		И Элементы.ИтоговоеДеревоУпаковок.Видимость Тогда
		Для Каждого ДобавленныйЭлемент Из ДобавленныеГрупповыеЭлементы Цикл
			Элементы.ИтоговоеДеревоУпаковок.Развернуть(ДобавленныйЭлемент.ПолучитьИдентификатор(), Истина);
		КонецЦикла;
	КонецЕсли;
	
	Возврат НовыеСтроки;
	
КонецФункции

&НаКлиенте
Функция ДобавитьНовуюПроизвольнуюУпаковкуВИтоговоеДеревоУпаковок()
	
	НовыеСтроки = Новый Массив;
	ИсключаемыеПоля = "Количество,ХешСуммаУпаковки,СоставУпаковки,ВложенныеЕдиницы";
	ЭлементыДерева = ИтоговоеДеревоУпаковок.ПолучитьЭлементы();
	
	СтрокаАгрегации = ЭлементыДерева.Вставить(0);
	НовыеСтроки.Добавить(СтрокаАгрегации.ПолучитьИдентификатор());
	СтрокаАгрегации.Количество                = СоставУпаковки.Итог("КоличествоУпаковок");
	СтрокаАгрегации.КоличествоИтог            = КоличествоУпаковок;
	СтрокаАгрегации.ПредставлениеУпаковки     = ПросклонятьЕдиницу(СтрокаАгрегации.Количество, ВидПродукции, Истина);
	СтрокаАгрегации.ПредставлениеУпаковкиИтог = ПросклонятьУпаковку(КоличествоУпаковок);
	
	СтрокаАгрегации.УпаковкаСформирована = Ложь;
	СтрокаАгрегации.ТребуетсяУказаниеПараметровГенерацииШтрихкодов = Истина;
	
	СодержимоеУпаковки = Новый Массив;
	
	Для Каждого СтрокаСоставаУпаковки Из СоставУпаковки Цикл
		
		Если СтрокаСоставаУпаковки.КоличествоУпаковок = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СоставАгрегации = СтрокаАгрегации.ПолучитьЭлементы();
		СтрокаПродукции = Неопределено;
		
		Для Каждого СтрокаСоставаАгрегации Из СоставАгрегации Цикл
			Если СтрокаСоставаАгрегации.Номенклатура = СтрокаСоставаУпаковки.Номенклатура
				И СтрокаСоставаАгрегации.Характеристика = СтрокаСоставаУпаковки.Характеристика
				И СтрокаСоставаАгрегации.Серия = СтрокаСоставаУпаковки.Серия
				И СтрокаСоставаАгрегации.GTIN = СтрокаСоставаУпаковки.GTIN Тогда
				СтрокаПродукции = СтрокаСоставаАгрегации;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокаПродукции = Неопределено Тогда
			
			СтрокаПродукции = СоставАгрегации.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаПродукции, СтрокаСоставаУпаковки,, ИсключаемыеПоля);
			Если СтрокаПродукции.ЭтоНабор
				Или СтрокаПродукции.ЭтоГрупповаяУпаковка Тогда
				ЗаполнитьВложенныеЕдиницы(СтрокаПродукции, СтрокаСоставаУпаковки);
			КонецЕсли;
			
			СтрокаПродукции.УпаковкаСформирована = Ложь;
			СтрокаПродукции.ТребуетсяУказаниеПараметровГенерацииШтрихкодов = Ложь;
			
			ПредставлениеНоменклатуры = ИнтеграцияИСМПКлиентСервер.ПредставлениеGTINОстаткиПоВидуПродукции(
				СтрокаПродукции.ПредставлениеНоменклатуры, ВидПродукции);
			
			СтрокаПродукции.Содержимое = ПредставлениеНоменклатуры(
				СтрокаПродукции.Номенклатура, СтрокаПродукции.Характеристика, СтрокаПродукции.Серия,
				ПредставлениеНоменклатуры);
			
			Если ЗначениеЗаполнено(СтрокаСоставаУпаковки.Номенклатура) Тогда
				
				ЭлементСодержимого = Новый Структура("Номенклатура, Характеристика, Серия, Количество");
				ЭлементСодержимого.Номенклатура   = СтрокаСоставаУпаковки.Номенклатура;
				ЭлементСодержимого.Характеристика = СтрокаСоставаУпаковки.Характеристика;
				ЭлементСодержимого.Серия          = СтрокаСоставаУпаковки.Серия;
				ЭлементСодержимого.Количество     = СтрокаСоставаУпаковки.КоличествоУпаковок;
				
				СодержимоеУпаковки.Добавить(ЭлементСодержимого);
				
			ИначеЕсли ЗначениеЗаполнено(СтрокаПродукции.Содержимое) Тогда
				
				ЭлементСодержимого = Новый Структура("Номенклатура, Характеристика, Серия, Количество");
				ЭлементСодержимого.Номенклатура = СтрокаПродукции.Содержимое;
				ЭлементСодержимого.Количество   = СтрокаСоставаУпаковки.КоличествоУпаковок;
				
				СодержимоеУпаковки.Добавить(ЭлементСодержимого);
				
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаПродукции.Количество     = СтрокаПродукции.Количество + СтрокаСоставаУпаковки.КоличествоУпаковок;
		СтрокаПродукции.КоличествоИтог = СтрокаПродукции.КоличествоИтог + СтрокаСоставаУпаковки.КоличествоУпаковок * КоличествоУпаковок;
		Если СтрокаПродукции.ЭтоНабор Тогда
			Если СтрокаСоставаУпаковки.ВложенныеЕдиницы.Количество() = 1 Тогда
				СтрокаПродукции.Коэффициент = СтрокаСоставаУпаковки.ВложенныеЕдиницы[0].Количество;
			КонецЕсли;
			СтрокаПродукции.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_DataMatrix");
			СтрокаПродукции.ПредставлениеУпаковки     = ПросклонятьНабор(СтрокаПродукции.Количество);
			СтрокаПродукции.ПредставлениеУпаковкиИтог = ПросклонятьНабор(СтрокаПродукции.КоличествоИтог);
		ИначеЕсли СтрокаПродукции.ЭтоГрупповаяУпаковка Тогда
			СтрокаПродукции.Коэффициент  = СтрокаСоставаУпаковки.ВложенныеЕдиницы[0].Количество;
			СтрокаПродукции.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_DataMatrix");
			СтрокаПродукции.ПредставлениеУпаковки     = ПросклонятьГрупповуюУпаковку(СтрокаПродукции.Количество, ВидПродукции);
			СтрокаПродукции.ПредставлениеУпаковкиИтог = ПросклонятьГрупповуюУпаковку(СтрокаПродукции.КоличествоИтог, ВидПродукции);
		Иначе
			СтрокаПродукции.Коэффициент               = 1;
			СтрокаПродукции.ПредставлениеУпаковки     = СтрокаСоставаУпаковки.ЕдиницаИзмерения;
			СтрокаПродукции.ПредставлениеУпаковкиИтог = ПросклонятьЕдиницу(СтрокаПродукции.КоличествоИтог, ВидПродукции);
		КонецЕсли;
		
	КонецЦикла;
	
	Если СоставАгрегации.Количество() = 1 Тогда
		СтрокаАгрегации.Коэффициент = СоставАгрегации[0].Количество * СоставАгрегации[0].Коэффициент;
	Иначе
		СтрокаАгрегации.Коэффициент = 0;
	КонецЕсли;
	
	СтрокаАгрегации.Содержимое = ПредставлениеСоставаУпаковки(СодержимоеУпаковки);
	
	Возврат НовыеСтроки;
	
КонецФункции

&НаКлиенте
Процедура ДополнитьПроизвольнуюУпаковкуПолямиМонотоварной(СтрокаСоставаУпаковки)
	
	СоставСтроки = СтрокаСоставаУпаковки.СоставУпаковки.ПолучитьЭлементы().Добавить();
	СоставСтроки.Коэффициент      = СтрокаСоставаУпаковки.Количество;
	СоставСтроки.ЕдиницаИзмерения = НСтр("ru = 'Короб'");
	СоставСтроки.Наименование     = СтрШаблон("%1 (%2 %3)",
			СоставСтроки.ЕдиницаИзмерения,
			СоставСтроки.Коэффициент,
			НСтр("ru = 'ед'"));
	СоставСтроки.Представление    = СоставСтроки.Наименование;
	
	КоличествоПредставление       = ИнтеграцияИСКлиентСервер.ПредставлениеКоличестваСоставаУпаковкиДляРасчетаХеша(СоставСтроки, "");
	Если СтрокаСоставаУпаковки.КоличествоУпаковок = 1
		И (СтрокаСоставаУпаковки.ЭтоГрупповаяУпаковка
		 Или СтрокаСоставаУпаковки.ЭтоНабор) Тогда
		СоставСтроки.ХешСуммаУпаковки = "";
	Иначе
		СтрокаДляРасчетаХеша          = ИнтеграцияИСКлиентСервер.СтрокаДляРасчетаХешаСоставаУпаковки(СтрокаСоставаУпаковки);
		СоставСтроки.ХешСуммаУпаковки = ХэшСуммаСтроки(СтрокаДляРасчетаХеша + КоличествоПредставление);
	КонецЕсли;
	
	СтрокаСоставаУпаковки.Количество            = СтрокаСоставаУпаковки.Количество * КоличествоУпаковок;
	СтрокаСоставаУпаковки.КоличествоУпаковок    = КоличествоУпаковок;
	СтрокаСоставаУпаковки.ПредставлениеУпаковки = СоставСтроки.Представление;
	СтрокаСоставаУпаковки.ХешСуммаУпаковки      = СоставСтроки.ХешСуммаУпаковки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ХэшСуммаСтроки(СтрокаДляРасчетаХеша)
	
	Возврат ОбщегоНазначенияИС.ХэшСуммаСтроки(СтрокаДляРасчетаХеша);
	
КонецФункции

&НаСервере
Процедура ОбработатьНовыеУпаковкиВИтоговомДеревеУпаковок(НовыеСтроки, СтрокиБезИстории)
	
	ЗаполнитьХешСуммыУпаковок(НовыеСтроки);
	ЗаполнитьПараметрыГенерацииШтрихкодовИзИстории(НовыеСтроки, СтрокиБезИстории);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьХешСуммыУпаковок(НовыеСтроки)
	
	Для Каждого Строка Из НовыеСтроки Цикл
		ЭлементДерева = ИтоговоеДеревоУпаковок.НайтиПоИдентификатору(Строка);
		Если ЭлементДерева.ХешСуммаУпаковки = ""
			И ЭлементДерева.ПолучитьРодителя() = Неопределено Тогда
			ТаблицаСостава = Обработки.ВиртуальнаяАгрегацияУпаковокИСМП.НоваяСоставУпаковки();
			Если ЭлементДерева.ЭтоНабор
				Или ЭлементДерева.ЭтоГрупповаяУпаковка Тогда
				СтрокаТаблицыСостава = ТаблицаСостава.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыСостава, ЭлементДерева,,"Количество");
				СтрокаТаблицыСостава.Количество = 1;
				Для Каждого СтрокаВложеннойЕдиницы Из ЭлементДерева.ВложенныеЕдиницы Цикл
					ЗаполнитьЗначенияСвойств(ТаблицаСостава.Добавить(), СтрокаВложеннойЕдиницы);
				КонецЦикла;
			Иначе
				Для Каждого СтрокаСостава Из ЭлементДерева.ПолучитьЭлементы() Цикл
					ЗаполнитьЗначенияСвойств(ТаблицаСостава.Добавить(), СтрокаСостава);
				КонецЦикла;
			КонецЕсли;
			ТаблицаСостава.Свернуть("Номенклатура,Характеристика,Серия,GTIN,Шаблон", "Количество");
			ЭлементДерева.ХешСуммаУпаковки = Обработки.ВиртуальнаяАгрегацияУпаковокИСМП.ХешСуммаУпаковки(ТаблицаСостава);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыГенерацииШтрихкодовИзИстории(НовыеСтроки, СтрокиБезИстории)
	
	ХешСуммы = Новый Массив;
	ЭлементыДляЗаполнения = Новый Массив;
	Для Каждого Строка Из НовыеСтроки Цикл
		
		ЭлементДерева = ИтоговоеДеревоУпаковок.НайтиПоИдентификатору(Строка);
		Если ЭлементДерева.ХешСуммаУпаковки <> ""
			И Не ЭлементДерева.УпаковкаСформирована
			И ЭлементДерева.ТребуетсяУказаниеПараметровГенерацииШтрихкодов Тогда
			ХешСуммы.Добавить(ЭлементДерева.ХешСуммаУпаковки);
			ЭлементыДляЗаполнения.Добавить(ЭлементДерева);
			
			Если РежимФормированияМонотоварнойУпаковки Тогда
				МассивЭлементов = Новый Массив;
				ЗаполнитьМассивЭлементовЭлементаДерева(МассивЭлементов, ЭлементДерева);
				Для Каждого ЭлементДерева Из МассивЭлементов Цикл
					Если ЭлементДерева.ХешСуммаУпаковки = "" Тогда
						Продолжить;
					КонецЕсли;
					ХешСуммы.Добавить(ЭлементДерева.ХешСуммаУпаковки);
					ЭлементыДляЗаполнения.Добавить(ЭлементДерева);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыГенерацииШтрихкодов = РегистрыСведений.ИсторияИспользованияПараметровГенерацииШтрихкодовИСМП.ПолучитьПараметрыГенерацииШтрихкодовИзИстории(ХешСуммы);
	
	Для Каждого ЭлементДерева Из ЭлементыДляЗаполнения Цикл
		
		Если ПараметрыГенерацииШтрихкодов[ЭлементДерева.ХешСуммаУпаковки] = Неопределено Тогда
			СтрокиБезИстории.Добавить(ЭлементДерева.ПолучитьИдентификатор());
		Иначе
			ЗаполнитьЗначенияСвойств(ЭлементДерева, ПараметрыГенерацииШтрихкодов[ЭлементДерева.ХешСуммаУпаковки]);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредставлениеНоменклатуры(Номенклатура, Характеристика, Серия, ПоУмолчанию = Неопределено)
	
	Возврат ОбщегоНазначенияИС.ПредставлениеНоменклатуры(Номенклатура, Характеристика,, Серия, ПоУмолчанию);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеСоставаУпаковки(ВходящиеДанные)
	
	СодержимоеУпаковки = ИнтеграцияИС.ИнициализироватьСодержимоеУпаковки();
	
	Для Каждого ЭлементМассива Из ВходящиеДанные Цикл
		
		ЭлементСодержимого = СодержимоеУпаковки.Добавить();
		
		ЭлементСодержимого.Номенклатура = ЭлементМассива.Номенклатура;
		
		Если ЗначениеЗаполнено(ЭлементМассива.Характеристика) Тогда
			ЭлементСодержимого.Характеристика = ЭлементМассива.Характеристика;
		Иначе
			ЭлементСодержимого.Характеристика = "";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлементМассива.Серия) Тогда
			ЭлементСодержимого.Серия = ЭлементМассива.Серия;
		Иначе
			ЭлементСодержимого.Серия = "";
		КонецЕсли;
		
		ЭлементСодержимого.Количество = ЭлементМассива.Количество;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТь
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика,
	|	Т.Серия КАК Серия,
	|	Т.Количество КАК Количество
	|ПОМЕСТИТЬ ВтСодержимоеУпаковки
	|ИЗ
	|	&СодержимоеУпаковки КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Т.Номенклатура) = ТИП(Строка)
	|			ТОГДА Т.Номенклатура
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕССЫЛКИ(Т.Номенклатура)
	|	КОНЕЦ КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Т.Характеристика) = ТИП(Строка)
	|			ТОГДА Т.Характеристика
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕССЫЛКИ(Т.Характеристика)
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Т.Серия) = ТИП(Строка)
	|			ТОГДА Т.Серия
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕССЫЛКИ(Т.Серия)
	|	КОНЕЦ КАК Серия,
	|	Т.Количество КАК Количество
	|ИЗ
	|	ВтСодержимоеУпаковки КАК Т
	|УПОРЯДОЧИТЬ ПО
	|	Количество УБЫВ,
	|	Номенклатура ВОЗР,
	|	Характеристика ВОЗР,
	|	Серия ВОЗР");
	
	Запрос.Параметры.Вставить("СодержимоеУпаковки", СодержимоеУпаковки);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Возврат ИнтеграцияИС.ПредставлениеСоставаУпаковки(Таблица);
	
КонецФункции

&НаКлиенте
Процедура ПриОповещенииОФормированииУпаковок(ДополнительныеПараметры) Экспорт
	
	ДекорацияСкрытьОткрытьСписокУпаковокОбработкаНавигационнойСсылки(Элементы.ДекорацияСкрытьОткрытьСписокУпаковок, "ПоказатьСписокУпаковок", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ГенерацияШтрихкодовУпаковок

&НаКлиенте
Процедура ОткрытьФормуГенерацииШтрихкодов(СтрокиАгрегации)

	ДоступныеТипыШтрихкодовСтрокой = ПроверкаИПодборПродукцииИСМПКлиент.ДоступныеТипыШтрихкодовСтрокой();
	
	ПараметрыОткрытияФормы = Новый Структура();
	ПараметрыОткрытияФормы.Вставить("РежимУказанияПараметровГенерации", Истина);
	ПараметрыОткрытияФормы.Вставить("АдресПредыдущихШтрихкодов",        АдресПредыдущихШтрихкодов);
	ПараметрыОткрытияФормы.Вставить("ДоступныеТипыШтрихкодовСтрокой",   ДоступныеТипыШтрихкодовСтрокой);
	
	Если СтрокиАгрегации = Неопределено Тогда
		
		ПараметрыОткрытияФормы.Вставить("СкрытьФлагЗапомнитьПараметрыГенерации", Истина);
		
		ПараметрыОткрытияФормы.Вставить("ТипШтрихкода", ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.SSCC"));
		Если РежимФормированияМонотоварнойУпаковки Тогда
			ПараметрыОткрытияФормы.Вставить("ТипУпаковки", ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МонотоварнаяУпаковка"));
		КонецЕсли;
		
		ДополнительныеПараметры = Неопределено;
		
	Иначе
		
		СтрокаАгрегации = ИтоговоеДеревоУпаковок.НайтиПоИдентификатору(СтрокиАгрегации[0]);
		
		Если ЗначениеЗаполнено(СтрокаАгрегации.ТипШтрихкода) Тогда
			ТекущийТипШтрихкода = СтрокаАгрегации.ТипШтрихкода;
		Иначе
			ТекущийТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.SSCC");
		КонецЕсли;
		
		ПараметрыОткрытияФормы.Вставить("КоличествоВложенныхЕдиниц", СтрокаАгрегации.Количество);
		ПараметрыОткрытияФормы.Вставить("ТипШтрихкода",              ТекущийТипШтрихкода);
		
		Если ЗначениеЗаполнено(СтрокаАгрегации.ОбразецШтрихкода) Тогда
			ПараметрыОткрытияФормы.Вставить("Штрихкод", СтрокаАгрегации.ОбразецШтрихкода);
		КонецЕсли;
		
		СоставАгрегации = СтрокаАгрегации.ПолучитьЭлементы();
		
		Если ЗначениеЗаполнено(СтрокаАгрегации.Номенклатура)
			Или ЗначениеЗаполнено(СтрокаАгрегации.GTIN) Тогда
			ПараметрыОткрытияФормы.Вставить("ТипУпаковки", ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МонотоварнаяУпаковка"));
		ИначеЕсли СоставАгрегации.Количество() = 1 Тогда
			ПараметрыОткрытияФормы.Вставить("ТипУпаковки",    ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МонотоварнаяУпаковка"));
			ПараметрыОткрытияФормы.Вставить("Номенклатура",   СоставАгрегации[0].Номенклатура);
			ПараметрыОткрытияФормы.Вставить("Характеристика", СоставАгрегации[0].Характеристика);
		Иначе
			ПараметрыОткрытияФормы.Вставить("ТипУпаковки", ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МультитоварнаяУпаковка"));
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("СтрокиАгрегации", СтрокиАгрегации);
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриГенерацииШтрихкодаУпаковки", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Обработка.ГенерацияШтрихкодовУпаковок.Форма.Форма", ПараметрыОткрытияФормы, ЭтотОбъект,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриГенерацииШтрихкодаУпаковки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли ПустаяСтрока(Результат.Штрихкод) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Упаковкам не может быть назначен пустой штрихкод.'"));
		Возврат;
	ИначеЕсли Результат.ТипШтрихкода <> ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.SSCC")
		И Результат.ТипШтрихкода <> ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_128") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Типы штрихкодов, отличные от SSCC и GS1-128, не поддерживаются.'"));
		Возврат;
	КонецЕсли;
	
	АдресПредыдущихШтрихкодов = Результат.АдресПредыдущихШтрихкодов;
	ПриГенерацииШтрихкодаУпаковкиНаСервере();
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("СтрокиАгрегации") Тогда
		ЗаполнитьПараметрыГенерацииШтрихкодов(ДополнительныеПараметры.СтрокиАгрегации);
	КонецЕсли;
	
	Если Результат.ЗапомнитьПараметрыГенерации
		Или ДополнительныеПараметры = Неопределено Тогда
		СформироватьЗаголовокСохраненныхПараметровГенерацииШтрихкодов();
	Иначе
		ОчиститьПредыдущиеШтрихкоды();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриГенерацииШтрихкодаУпаковкиНаСервере()
	
	Если ЭтоАдресВременногоХранилища(АдресПредыдущихШтрихкодов) Тогда
		ДанныеПредыдущихШтрихкодов = ПолучитьИзВременногоХранилища(АдресПредыдущихШтрихкодов);
		Если ТипЗнч(ДанныеПредыдущихШтрихкодов) = Тип("Соответствие") Тогда
			ПредыдущиеШтрихкоды = Новый ФиксированноеСоответствие(ДанныеПредыдущихШтрихкодов);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыГенерацииШтрихкодов(СтрокиАгрегации)
	
	ПараметрыГенерацииШтрихкодов = Новый Соответствие;
	
	ДанныеШтрихкода = Новый Структура;
	ДанныеШтрихкода.Вставить("ТипШтрихкода", ПоследнийТипШтрихкода());
	ДанныеШтрихкода.Вставить("КлючНумератора", ПоследнийКлючНумератора(ДанныеШтрихкода.ТипШтрихкода));
	ДанныеШтрихкода.Вставить("ОбразецШтрихкода", ПоследнийОбразецШтрихкода());
	ДанныеШтрихкода.Вставить("ПараметрыГенерацииШтрихкодов", "");
	СформироватьПредставлениеПараметровГенерациШтрихкодов(ДанныеШтрихкода);
	
	Для Каждого Строка Из СтрокиАгрегации Цикл
		СтрокаАгрегации = ИтоговоеДеревоУпаковок.НайтиПоИдентификатору(Строка);
		ЗаполнитьЗначенияСвойств(СтрокаАгрегации, ДанныеШтрихкода);
		ПараметрыГенерацииШтрихкодов.Вставить(СтрокаАгрегации.ХешСуммаУпаковки, ДанныеШтрихкода);
	КонецЦикла;
	
	ЗаписатьПараметрыГенерацииШтрихкодовВИсторию(ПараметрыГенерацииШтрихкодов);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьПараметрыГенерацииШтрихкодовВИсторию(ПараметрыГенерацииШтрихкодов)
	
	РегистрыСведений.ИсторияИспользованияПараметровГенерацииШтрихкодовИСМП.ЗаписатьПараметрыГенерацииШтрихкодовВИсторию(ПараметрыГенерацииШтрихкодов);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПредставлениеПараметровГенерациШтрихкодов(СтрокаАгрегации)
	
	ПредставлениеШтрихкода = "";
	Если СтрокаАгрегации.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.SSCC") Тогда
		ПредставлениеШтрихкода = СтрокаАгрегации.КлючНумератора;
		Пока СтрДлина(ПредставлениеШтрихкода) < 18 Цикл
			ПредставлениеШтрихкода = ПредставлениеШтрихкода + "x";
		КонецЦикла;
		ПредставлениеШтрихкода = "(00)" + ПредставлениеШтрихкода;
	ИначеЕсли СтрокаАгрегации.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_128") Тогда
		ПредставлениеШтрихкода = ПредставлениеШтрихкодаПоОбразцу(СтрокаАгрегации.ОбразецШтрихкода);
	КонецЕсли;
	
	ПредставленияПараметров = Новый Массив();
	ПредставленияПараметров.Добавить(Строка(СтрокаАгрегации.ТипШтрихкода));
	
	Если НЕ ПустаяСтрока(ПредставлениеШтрихкода) Тогда
		ПредставленияПараметров.Добавить(",");
		ПредставленияПараметров.Добавить(" ");
		ПредставленияПараметров.Добавить(ПредставлениеШтрихкода);
	КонецЕсли;
	
	СтрокаАгрегации.ПараметрыГенерацииШтрихкодов = СтрСоединить(ПредставленияПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПредыдущиеШтрихкоды()
	
	ОткрытьФормуГенерацииШтрихкодов(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПредыдущиеШтрихкоды()
	
	ПредыдущиеШтрихкоды = Неопределено;
	АдресПредыдущихШтрихкодов = "";
	
	СформироватьЗаголовокСохраненныхПараметровГенерацииШтрихкодов();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗаголовокСохраненныхПараметровГенерацииШтрихкодов()
	
	СтрокиЗаголовка = Новый Массив();
	
	Если ПредыдущиеШтрихкоды = Неопределено Тогда
		СтрокиЗаголовка.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Параметры генерации штрихкодов не установлены'"),, ЦветНеТребуетВнимания));
		СтрокиЗаголовка.Добавить(". ");
		СтрокиЗаголовка.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Установить параметры'"),, ЦветГиперссылки,, "УстановитьПредыдущиеШтрихкоды"));
	Иначе
		ТипШтрихкода   = ПоследнийТипШтрихкода();
		КлючНумератора = ПоследнийКлючНумератора(ТипШтрихкода);
		
		СтрокиЗаголовка.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Текущие параметры генерации штрихкодов'"),, ЦветГиперссылки));
		СтрокиЗаголовка.Добавить(": ");
		СтрокиЗаголовка.Добавить(Новый ФорматированнаяСтрока(СтрШаблон(НСтр("ru = 'тип %1'"), ТипШтрихкода),, ЦветГиперссылки));
		СтрокиЗаголовка.Добавить(", ");
		
		Если ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.SSCC") Тогда
			ЦифраРасширения    = Лев(КлючНумератора, 1);
			ПрефиксКомпанииGS1 = Сред(КлючНумератора, 2);
			
			СтрокиЗаголовка.Добавить(Новый ФорматированнаяСтрока(СтрШаблон(НСтр("ru = 'цифра расширения %1'"), ЦифраРасширения),, ЦветГиперссылки));
			СтрокиЗаголовка.Добавить(", ");
			СтрокиЗаголовка.Добавить(Новый ФорматированнаяСтрока(СтрШаблон(НСтр("ru = 'префикс компании GS1 %1'"), ПрефиксКомпанииGS1),, ЦветГиперссылки));
		ИначеЕсли ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_128") Тогда
			
			СтрокиЗаголовка.Добавить(Новый ФорматированнаяСтрока(ПредставлениеШтрихкодаПоОбразцу(ПоследнийОбразецШтрихкода()),, ЦветГиперссылки));
		КонецЕсли;
		
		СтрокиЗаголовка.Добавить(". ");
		СтрокиЗаголовка.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Очистить параметры'"),, ЦветГиперссылки,, "ОчиститьПредыдущиеШтрихкоды"));
	КонецЕсли;
	
	Элементы.ДекорацияПараметрыГенерацииШтрихкодов.Заголовок = Новый ФорматированнаяСтрока(СтрокиЗаголовка);
		
КонецПроцедуры

&НаКлиенте
Функция ПоследнийТипШтрихкода()
	
	Возврат ПредыдущиеШтрихкоды["ПоследнийТипШтрихкода"];
	
КонецФункции

&НаКлиенте
Функция ПоследнийКлючНумератора(ТипШтрихкода);
	
	КлючНумератора = "";
	
	Если ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.SSCC") Тогда
		КлючНумератора = СтрЗаменить(ПредыдущиеШтрихкоды["ПоследнийКлючНумератора"], "SSCC", "");
	ИначеЕсли ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_128") Тогда
		КлючНумератора = СтрЗаменить(ПредыдущиеШтрихкоды["ПоследнийКлючНумератора"], "GS1", "");
	КонецЕсли;
	
	Возврат КлючНумератора;
	
КонецФункции

&НаКлиенте
Функция ПоследнийОбразецШтрихкода()
	
	Возврат ПредыдущиеШтрихкоды[ПредыдущиеШтрихкоды["ПоследнийТипШтрихкодаСтрокой"]];
	
КонецФункции

&НаКлиенте
Функция ПредставлениеШтрихкодаПоОбразцу(ОбразецШтрихкода)
	
	ПредставлениеШтрихкода = "";
	
	ПозицияНачала = СтрНайти(ОбразецШтрихкода, "(21)");
	Если ПозицияНачала > 0 Тогда
		ПозицияНачала = ПозицияНачала + 4;
		ПредставлениеШтрихкода = Лев(ОбразецШтрихкода, ПозицияНачала - 1) + "xxxx";
		ПозицияОкончания = СтрНайти(ОбразецШтрихкода, "(",, ПозицияНачала);
		Если ПозицияОкончания > 0 Тогда
			ПредставлениеШтрихкода = ПредставлениеШтрихкода + Сред(ОбразецШтрихкода, ПозицияОкончания);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПредставлениеШтрихкода;
	
КонецФункции

#КонецОбласти

#Область УдалениеУпаковок

&НаКлиенте
Процедура УдалитьУпаковкуИзИтоговогоДереваУпаковок(УдаляемыеДанные)
	
	УвеличитьКоличествоОстатка(УдаляемыеДанные);
	
	ЭлементыДерева = ИтоговоеДеревоУпаковок.ПолучитьЭлементы();
	ЭлементыДерева.Удалить(УдаляемыеДанные);
	
	Модифицированность = Ложь;
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		Если Не ЭлементДерева.УпаковкаСформирована Тогда
			Модифицированность = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СформироватьЗаголовокГиперссылкиОткрытияСпискаУпаковок();
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВозможностьУдаленияЗаписаннойУпаковки(УдаляемыеДанные)
	
	КодыУпаковкиРаспечатаны = КодыУпаковкиРаспечатаны(Документ, УдаляемыеДанные.ХешСуммаУпаковки);
	
	Если КодыУпаковкиРаспечатаны Тогда
		ТекстПредупреждения = НСтр("ru = 'Нельзя удалять упаковки, для которых уже распечатаны коды маркировки.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
	Иначе
		ТекстВопроса = НСтр("ru = 'Текущие упаковки уже записаны в систему. Все равно удалить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриОтветеНаВопросПередУдалениемУпаковок", ЭтотОбъект, УдаляемыеДанные);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КодыУпаковкиРаспечатаны(Документ, ХешСуммаУпаковки)
	
	ЭтоЗаказНаЭмиссию = ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказНаЭмиссиюКодовМаркировкиСУЗ");
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировки
	|ГДЕ
	|	ПулКодовМаркировки." + ?(ЭтоЗаказНаЭмиссию, "ЗаказНаЭмиссию", "ДокументОснование") + " = &Документ
	|	И ПулКодовМаркировки.ХешСуммаУпаковки = &ХешСуммаУпаковки
	|	И ПулКодовМаркировки.ДатаПечатиУниверсальная <> ДАТАВРЕМЯ(1, 1, 1)
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("ХешСуммаУпаковки", ХешСуммаУпаковки);
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

&НаКлиенте
Процедура ПриОтветеНаВопросПередУдалениемУпаковок(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ДлительнаяОперация = НачатьУдалениеУпаковок(ДополнительныеПараметры.ХешСуммаУпаковки);
		ОповещениеОЗавершении = Новый ОписаниеОповещения("УдалениеУпаковокЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Удаление сформированных упаковок.'");
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НачатьУдалениеУпаковок(ХешСуммаУпаковки)
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Документ", Документ);
	ПараметрыПроцедуры.Вставить("ХешСуммаУпаковки", ХешСуммаУпаковки);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ЭтотОбъект.УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Удаление сформированных упаковок.'");
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	ИнтеграцияИСПереопределяемый.НастроитьДлительнуюОперацию(ПараметрыПроцедуры, ПараметрыВыполнения);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("Обработки.ВиртуальнаяАгрегацияУпаковокИСМП.УдалитьУпаковки",
		ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура УдалениеУпаковокЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда  // отменено пользователем
		Возврат;
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ПоказатьПредупреждение(, Результат.КраткоеПредставлениеОшибки);
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		УдалитьУпаковкуИзИтоговогоДереваУпаковок(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ЗаписьСформированныхУпаковок

&НаСервере
Функция НачатьЗаписьУпаковок()
	
	ДеревоУпаковок = РеквизитФормыВЗначение("ИтоговоеДеревоУпаковок");
	
	ВГраница = ДеревоУпаковок.Строки.Количество() - 1;
	Для Индекс = 0 По ВГраница Цикл
		СтрокаДерева = ДеревоУпаковок.Строки[ВГраница - Индекс];
		Если СтрокаДерева.УпаковкаСформирована Тогда
			ДеревоУпаковок.Строки.Удалить(СтрокаДерева);
		КонецЕсли;
	КонецЦикла;
	
	Если ДеревоУпаковок.Строки.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ВидПродукции",   ВидПродукции);
	ПараметрыПроцедуры.Вставить("Документ",       Документ);
	ПараметрыПроцедуры.Вставить("ДеревоУпаковок", ДеревоУпаковок);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ЭтотОбъект.УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Запись сформированных упаковок.'");
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	ИнтеграцияИСПереопределяемый.НастроитьДлительнуюОперацию(ПараметрыПроцедуры, ПараметрыВыполнения);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("Обработки.ВиртуальнаяАгрегацияУпаковокИСМП.ЗаписатьУпаковки",
		ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ЗаписьУпаковокЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда  // отменено пользователем
		Возврат;
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ПоказатьПредупреждение(, Результат.КраткоеПредставлениеОшибки);
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		
		УстановитьПризнакУпаковкаСформирована(ИтоговоеДеревоУпаковок);
		
		СформироватьЗаголовокГиперссылкиОткрытияСпискаУпаковок();
		УстановитьДоступностьЭлементовФормы();
		
		ОткрытьФормуПечати();
		Модифицированность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПризнакУпаковкаСформирована(Элемент)
	
	Для Каждого ЭлементДерева Из Элемент.ПолучитьЭлементы() Цикл
		Если Не ЭлементДерева.УпаковкаСформирована Тогда
			ЭлементДерева.УпаковкаСформирована         = Истина;
			ЭлементДерева.ПараметрыГенерацииШтрихкодов = "";
			ЭлементДерева.КлючНумератора               = "";
			ЭлементДерева.ТипШтрихкода                 = Неопределено;
			УстановитьПризнакУпаковкаСформирована(ЭлементДерева);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#Область ПечатьУпаковок

&НаКлиенте
Процедура ПроверитьЗаполнениеСтрокИтоговогоДереваУпаковок(ЭлементыДерева, Отказ, Представление = "")
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		Если Представление = "" Тогда
			Содержимое = ЭлементДерева.Содержимое;
		Иначе
			Содержимое = СтрШаблон("%1 - %2", Представление, ЭлементДерева.Содержимое);
		КонецЕсли;
		Если Не ЭлементДерева.УпаковкаСформирована
			И ЭлементДерева.ТребуетсяУказаниеПараметровГенерацииШтрихкодов
			И Не ЗначениеЗаполнено(ЭлементДерева.ТипШтрихкода) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				СтрШаблон(НСтр(
				"ru = 'Для содержимого <%1> не указаны параметры генерации штрихкодов'"),
				Содержимое),,
				"ИтоговоеДеревоУпаковок.ПараметрыГенерацииШтрихкодов",,
				Отказ);
		КонецЕсли;
		ПроверитьЗаполнениеСтрокИтоговогоДереваУпаковок(ЭлементДерева.ПолучитьЭлементы(), Отказ, Содержимое);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПечати()
	
	ПараметрыФормыПечати = Новый Структура();
	ПараметрыФормыПечати.Вставить("Документ", Документ);
	ПараметрыФормыПечати.Вставить("ТолькоАгрегированныеКоды", Истина);
	
	ОповещениеПриЗакрытии = Новый ОписаниеОповещения("ПриЗакрытииФормыПечати", ЭтотОбъект);
	
	ОткрытьФорму("РегистрСведений.ПулКодовМаркировкиСУЗ.Форма.ФормаПечати",
		ПараметрыФормыПечати, ЭтотОбъект,,,, ОповещениеПриЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииФормыПечати(Результат, ДополнительныеПараметры) Экспорт
	
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

#КонецОбласти 

#Область Серии

&НаСервереБезКонтекста
Функция ЕстьПравоДобавлениеСерий()
	
	Возврат ПроверкаИПодборПродукцииИСМП.ЕстьПравоДобавлениеСерий();
	
КонецФункции

&НаСервереБезКонтекста
Процедура СгенерироватьСерииНаСервере(ДанныеДляГенерацииСерий, ВидПродукции)
	
	ИнтеграцияИСМП.СгенерироватьСерии(ДанныеДляГенерацииСерий, ВидПродукции);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСерииВСоставеУпаковок(ДанныеДляГенерацииСерий)
	
	СерииПоНоменклатуре = Новый Соответствие;
	
	Для Каждого ДанныеСерии Из ДанныеДляГенерацииСерий Цикл
		Если ДанныеСерии.ЕстьОшибка Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(
				НСтр("ru = 'Для номенклатуры %1 произошла ошибка при создании серии по причине %2'"),
				ДанныеСерии.Номенклатура,
				ДанныеСерии.ТекстОшибки));
		Иначе
			СерииПоНоменклатуре.Вставить(ДанныеСерии.Номенклатура, ДанныеСерии.Серия);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаСостава Из СоставУпаковки Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаСостава.Номенклатура)
			Или ЗначениеЗаполнено(СтрокаСостава.Серия) Тогда
			Продолжить;
		КонецЕсли;
		
		СерияПоНоменклатуре = СерииПоНоменклатуре[СтрокаСостава.Номенклатура];
		Если СерияПоНоменклатуре <> Неопределено Тогда
			СтрокаСостава.Серия = СерияПоНоменклатуре;
			СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииСерии(ЭтотОбъект,
				СтрокаСостава, КэшированныеЗначения, ПараметрыУказанияСерий);
		КонецЕсли;
		
		Если СтрокаСостава.ЭтоНабор Или СтрокаСостава.ЭтоГрупповаяУпаковка Тогда
			Для Каждого ВложеннаяЕдиница Из СтрокаСостава.ВложенныеЕдиницы Цикл
				СерияПоНоменклатуре = СерииПоНоменклатуре[ВложеннаяЕдиница.Номенклатура];
				Если СерияПоНоменклатуре <> Неопределено Тогда
					ВложеннаяЕдиница.Серия = СерияПоНоменклатуре;
					СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииСерии(ЭтотОбъект,
						ВложеннаяЕдиница, КэшированныеЗначения, ПараметрыУказанияСерий);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОкончанииУказанияСерий(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаСостава = СоставУпаковки.НайтиПоИдентификатору(ДополнительныеПараметры);
	Если СтрокаСостава = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СерияПоНоменклатуре = Результат[СтрокаСостава.Номенклатура];
	Если СерияПоНоменклатуре <> Неопределено Тогда
		СтрокаСостава.Серия = СерияПоНоменклатуре;
	КонецЕсли;
	
	Для Каждого ВложеннаяЕдиница Из СтрокаСостава.ВложенныеЕдиницы Цикл
		
		Если Не ЗначениеЗаполнено(ВложеннаяЕдиница.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		СерияПоНоменклатуре = Результат[ВложеннаяЕдиница.Номенклатура];
		Если СерияПоНоменклатуре <> Неопределено Тогда
			ВложеннаяЕдиница.Серия = СерияПоНоменклатуре;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#Область СклонениеСтрокиПоЧислу

&НаКлиентеНаСервереБезКонтекста
Функция ПросклонятьУпаковку(Количество)
	
	СклоненияСлова = НовыйСклоненияСлова();
	СклоненияСлова.ИменительныйЕдЧисло = НСтр("ru = 'упаковка'");
	СклоненияСлова.ИменительныйМнЧисло = НСтр("ru = 'упаковки'");
	СклоненияСлова.РодительныйМнЧисло  = НСтр("ru = 'упаковок'");
	
	Возврат ПросклонятьПоКоличеству(Количество, СклоненияСлова);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПросклонятьЕдиницу(Количество, ВидПродукции, ПроизвольнаяУпаковка = Ложь)
	
	СклоненияСлова = НовыйСклоненияСлова();
	
	Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувь") Тогда
		СклоненияСлова.ИменительныйЕдЧисло = НСтр("ru = 'пара'");
		СклоненияСлова.ИменительныйМнЧисло = НСтр("ru = 'пары'");
		СклоненияСлова.РодительныйМнЧисло  = НСтр("ru = 'пар'");
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак")
		И Не ПроизвольнаяУпаковка Тогда
		СклоненияСлова.ИменительныйЕдЧисло = НСтр("ru = 'пачка'");
		СклоненияСлова.ИменительныйМнЧисло = НСтр("ru = 'пачки'");
		СклоненияСлова.РодительныйМнЧисло  = НСтр("ru = 'пачек'");
	Иначе
		СклоненияСлова.ИменительныйЕдЧисло = НСтр("ru = 'единица'");
		СклоненияСлова.ИменительныйМнЧисло = НСтр("ru = 'единицы'");
		СклоненияСлова.РодительныйМнЧисло  = НСтр("ru = 'единиц'");
	КонецЕсли;
	
	Возврат ПросклонятьПоКоличеству(Количество, СклоненияСлова);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПросклонятьНабор(Количество)
	
	СклоненияСлова = НовыйСклоненияСлова();
	СклоненияСлова.ИменительныйЕдЧисло = НСтр("ru = 'набор'");
	СклоненияСлова.ИменительныйМнЧисло = НСтр("ru = 'набора'");
	СклоненияСлова.РодительныйМнЧисло  = НСтр("ru = 'наборов'");
	
	Возврат ПросклонятьПоКоличеству(Количество, СклоненияСлова);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПросклонятьГрупповуюУпаковку(Количество, ВидПродукции)
	
	СклоненияСлова = НовыйСклоненияСлова();
	
	Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак") Тогда
		СклоненияСлова.ИменительныйЕдЧисло = НСтр("ru = 'блок'");
		СклоненияСлова.ИменительныйМнЧисло = НСтр("ru = 'блока'");
		СклоненияСлова.РодительныйМнЧисло  = НСтр("ru = 'блоков'");
	Иначе
		Возврат ПросклонятьУпаковку(Количество);
	КонецЕсли;
	
	Возврат ПросклонятьПоКоличеству(Количество, СклоненияСлова);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПросклонятьВозможных(Количество)
	
	СклоненияСлова = НовыйСклоненияСлова();
	СклоненияСлова.ИменительныйЕдЧисло = НСтр("ru = 'возможной'");
	СклоненияСлова.ИменительныйМнЧисло = НСтр("ru = 'возможных'");
	СклоненияСлова.РодительныйМнЧисло  = НСтр("ru = 'возможных'");
	
	Возврат ПросклонятьПоКоличеству(Количество, СклоненияСлова);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НовыйСклоненияСлова()
	
	СклоненияСлова = Новый Структура();
	СклоненияСлова.Вставить("ИменительныйЕдЧисло");
	СклоненияСлова.Вставить("ИменительныйМнЧисло");
	СклоненияСлова.Вставить("РодительныйМнЧисло");
	
	Возврат СклоненияСлова;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПросклонятьПоКоличеству(Количество, СклоненияСлова)
	
	Если Количество = 0 Тогда
		Возврат СклоненияСлова.РодительныйМнЧисло;
	КонецЕсли;
	
	СтрокаКоличество = Формат(Количество, "ЧДЦ=0;");
	
	ПоследнийСимволКоличества     = Прав(СтрокаКоличество, 1);
	ДваПоследнихСимволаКоличества = Прав(СтрокаКоличество, 2);
	
	Если ДваПоследнихСимволаКоличества = "11"
	 Или ДваПоследнихСимволаКоличества = "12"
	 Или ДваПоследнихСимволаКоличества = "13"
	 Или ДваПоследнихСимволаКоличества = "14" Тогда
		Возврат СклоненияСлова.РодительныйМнЧисло;
	ИначеЕсли ПоследнийСимволКоличества = "1" Тогда
		Возврат СклоненияСлова.ИменительныйЕдЧисло;
	ИначеЕсли СтрНайти("234", ПоследнийСимволКоличества) <> 0 Тогда
		Возврат СклоненияСлова.ИменительныйМнЧисло;
	Иначе
		Возврат СклоненияСлова.РодительныйМнЧисло;
	КонецЕсли;
	
КонецФункции

#КонецОбласти 

#КонецОбласти 
