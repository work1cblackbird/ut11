#Область ОписаниеПеременных

&НаКлиенте
Перем ФормироватьПредставление;

&НаКлиенте
Перем ИмяНезаданногоПоляПараметров;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Свойство = Неопределено;
	Параметры.Свойство("Идентификатор", Свойство);
	
	Если Свойство <> Неопределено Тогда
		Идентификатор = Параметры["Идентификатор"];
		ПрочитатьОбъект();
		Параметры.Свойство("Копирование", Свойство);
		Если Свойство <> Неопределено Тогда
			Идентификатор = Строка(Новый УникальныйИдентификатор());
		КонецЕсли;
	Иначе
		Идентификатор = Строка(Новый УникальныйИдентификатор());
		Имя = "";
	КонецЕсли;
	
	Свойство = Неопределено;
	Параметры.Свойство("Имя", Свойство);
	
	Если Свойство <> Неопределено Тогда
		Имя = Параметры["Имя"];
		Представление = СоздатьПредставление(Имя);
	КонецЕсли;
	
	Если Параметры.Свойство("СуществующиеИмена") Тогда
		СуществующиеИмена = Параметры.СуществующиеИмена;
	КонецЕсли;
	
	Если Параметры.Свойство("ФорматСервера") Тогда
		ФорматСервера = Параметры.ФорматСервера;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытии(Отказ) 
	
	КлючУникальности = Идентификатор;
	Заголовок = Имя;
	ФормироватьПредставление = (Представление = СоздатьПредставление(Имя));
	ИмяНезаданногоПоляПараметров = НСтр("ru = 'Не задано'");
	Если ФорматСервера >= 2 Тогда
		Попытка
			ЗаполнитьВиртуальныеТаблицыИзЗапросаНаСервере(ИмяНезаданногоПоляПараметров);
		Исключение
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не удалось заполнить виртуальные таблицы'"));
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Не Модифицированность Тогда 
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	Если Не ЗавершениеРаботы Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеПодтвержденияСохранения", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Данные дополнительного источника изменены. Сохранить изменения?'"),
		РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли; 
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеПодтвержденияСохранения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаписатьИЗакрытьФорму();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы  

&НаКлиенте
Процедура ИмяПриИзменении(Элемент)
	
	Если ФормироватьПредставление Тогда
		Представление = СоздатьПредставление(Имя);
	Иначе
		ФормироватьПредставление = (Представление = СоздатьПредставление(Имя));
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПредставлениеПриИзменении(Элемент)
	
	ФормироватьПредставление = (Представление = СоздатьПредставление(Имя)); 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПоля

&НаКлиенте
Процедура ПоляПриАктивацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если МожетБытьИзмерением(Элемент.ТекущиеДанные.Тип) Тогда
		Элементы.Поля.ПодчиненныеЭлементы.ПоляРоль.ТолькоПросмотр = Ложь;
	Иначе
		Элементы.Поля.ПодчиненныеЭлементы.ПоляРоль.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыВиртуальныеТаблицы

&НаКлиенте
Процедура ВиртуальныеТаблицыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СписокВыбораПоляПараметров = СписокВыбораПоляПараметров(ТекстЗапроса, ИмяНезаданногоПоляПараметров);
	ОткрытьФормуВыбораПоляПараметров(ВыбраннаяСтрока, СписокВыбораПоляПараметров);
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы 

&НаКлиенте
Процедура Записать(Команда)
	
	Если ФорматСервера < 2 И ЗапросСодержитПараметрыВиртуальныхТаблиц(ТекстЗапроса) Тогда
		ВызватьИсключение НСтр("ru = 'Версия сервера 1С:Аналитики не поддерживает работу с параметрами виртуальных таблиц. Обновите версию сервера 1С:Аналитики.'");
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("Закрыть", Ложь);
	Если ФорматСервера >= 2 Тогда
		ЗаполнитьВиртуальныеТаблицыИзЗапросаНаСервере(ИмяНезаданногоПоляПараметров);
		СохранитьПослеПроверкиПараметров(ДополнительныеПараметры);
	Иначе
		Если ПроверитьПоля() Тогда
			СохранитьСЗаполнениемПолей(ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ЗаписатьИЗакрытьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоляИзЗапроса(Команда)
	
	ЗаполнитьПоляПоТекстуЗапроса();
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьТаблицыИзЗапроса(Команда)
	
	Если ФорматСервера >= 2 Тогда
		ЗаполнитьВиртуальныеТаблицыИзЗапросаНаСервере(ИмяНезаданногоПоляПараметров)
	Иначе
		ВызватьИсключение НСтр("ru = 'Версия сервера 1С:Аналитики не поддерживает работу с параметрами виртуальных таблиц. Обновите версию сервера 1С:Аналитики.'");
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонструкторЗапроса(Команда)
	
	#Если ТонкийКлиент Или ТонкийКлиент Или ВебКлиент Тогда
		
	Если ПустаяСтрока(ТекстЗапроса) Тогда
		КонструкторЗапроса = Новый КонструкторЗапроса();
	Иначе
		КонструкторЗапроса = Новый КонструкторЗапроса(ТекстЗапроса);
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияКонструктораЗапросов", ЭтотОбъект);
	КонструкторЗапроса.Показать(ОписаниеОповещения);
	
	#КонецЕсли
	
КонецПроцедуры 

&НаКлиенте
Процедура Удалить(Команда) 
	
	Оповещение = Новый ОписаниеОповещения("ПослеПодтвержденияУдаления", ЭтотОбъект, Идентификатор);
	ПоказатьВопрос(Оповещение, СтрШаблон(НСтр("ru = 'Удалить ''%1''?'"), Имя),
	РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры 

&НаКлиенте
Процедура УстановитьПолеПараметров(Команда) 
	
	Если ФорматСервера >= 2 Тогда
		ТекущаяСтрока = Элементы.ВиртуальныеТаблицы.ТекущаяСтрока;
		Если ТекущаяСтрока <> Неопределено Тогда
			СписокВыбораПоляПараметров = СписокВыбораПоляПараметров(ТекстЗапроса, ИмяНезаданногоПоляПараметров);
			ОткрытьФормуВыбораПоляПараметров(ТекущаяСтрока, СписокВыбораПоляПараметров)
		КонецЕсли;
	Иначе
		ВызватьИсключение НСтр("ru = 'Версия сервера 1С:Аналитики не поддерживает работу с параметрами виртуальных таблиц. Обновите версию сервера 1С:Аналитики.'");
	КонецЕсли;  
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПрочитатьОбъект()
	
	Преобразование = ПреобразованиеРолейПолей(Истина);
	
	ДополнительныйИсточник = Обработки.УправлениеПанелями1САналитики.ДополнительныеИсточникиИзСхемы(Идентификатор);
	Данные = JSONВЗначение(ДополнительныйИсточник.Получить("data"));
	
	Поля.Очистить();
	Если Данные <> Неопределено Тогда
		Имя = НеопределеноВПустуюСтроку(Данные.Получить("name"));
		Представление = НеопределеноВПустуюСтроку(Данные.Получить("synonym"));
		ТекстЗапроса = НеопределеноВПустуюСтроку(Данные.Получить("query"));
		Если Данные.Получить("fields")<>Неопределено Тогда
			Для Каждого Поле Из Данные.Получить("fields") Цикл
				Строка = Поля.Добавить();
				Строка.Имя = Поле.Key;
				Строка.Представление = НеопределеноВПустуюСтроку(Поле.Значение.Получить("synonym"));
				Строка.Роль = НеопределеноВПустуюСтроку(Преобразование.Получить(НеопределеноВПустуюСтроку(Поле.Значение.Получить("role"))));
				Строка.Тип = ТипВПредставление(НеопределеноВПустуюСтроку(Поле.Значение.Получить("type")));
			КонецЦикла;
		КонецЕсли;
	Иначе
		Имя = "";
		Представление = "";
		ТекстЗапроса = "";
	КонецЕсли;  
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНаСервере(ИмяНезаданногоПоляПараметров)
	
	РолиПолей = ПреобразованиеРолейПолей(Ложь); 
	
	ДанныеИсточника = Новый Соответствие();
	ДанныеИсточника.Вставить("name", Имя);
	ДанныеИсточника.Вставить("synonym", Представление);
	ДанныеИсточника.Вставить("query", ТекстЗапроса);
	
	ПоляКСохранению = Новый Соответствие();
	Для Каждого Поле Из Поля Цикл
		ПолеСоответствие = Новый Соответствие();
		ПолеСоответствие.Вставить("synonym", Поле.Представление);
		ПолеСоответствие.Вставить("role", РолиПолей.Получить(Поле.Роль));
		ПолеСоответствие.Вставить("type", ПредставлениеВТип(Поле.Тип));
		ПоляКСохранению.Вставить(Поле.Имя, ПолеСоответствие);
	КонецЦикла;
	ДанныеИсточника.Вставить("fields", ПоляКСохранению);
	
	ПараметрыКСохранению = Новый Соответствие();
	Для Каждого Таблица Из ВиртуальныеТаблицы Цикл
		Если Не ПустаяСтрока(Таблица.ПолеПараметров) И Таблица.ПолеПараметров <> ИмяНезаданногоПоляПараметров Тогда
			Параметр = Новый Соответствие();
			Параметр.Вставить("type", "virtualTableParameter");
			ПараметрыКСохранению.Вставить(Таблица.ПолеПараметров, Параметр);
		КонецЕсли;
	КонецЦикла;
	Если ПараметрыКСохранению.Количество() Тогда
		ДанныеИсточника.Вставить("parameters", ПараметрыКСохранению);
	КонецЕсли;
	
	ДополнительныйИсточник = Новый Соответствие();
	ДополнительныйИсточник.Вставить("id", Идентификатор);
	ДополнительныйИсточник.Вставить("type", "additional-datasource");
	ДополнительныйИсточник.Вставить("owner", "");
	ДополнительныйИсточник.Вставить("data", ЗначениеВJSON(ДанныеИсточника));
	Если ФорматСервера >= 2 Тогда
		ДополнительныйИсточник.Вставить("version", 2);
	КонецЕсли;
	
	Обработки.УправлениеПанелями1САналитики.ЗаписатьСхему(ЗначениеВJSON(ДополнительныйИсточник));
	
	Модифицированность = Ложь; 
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьПоля()
	
	Если СтрДлина(Имя) = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Имя не должно быть пустым'");
	КонецЕсли;
	
	Если СтрНайти(Имя, " ") <> 0 Тогда
		ВызватьИсключение НСтр("ru = 'Неверное имя. Имя должно состоять из одного слова, начинаться с буквы и не содержать пробелов и специальных символов кроме ""_""'");
	КонецЕсли;
	
	Попытка
		СтруктураПроверкиИмени = Новый Структура();
		СтруктураПроверкиИмени.Вставить(Имя, "");
	Исключение
		ВызватьИсключение НСтр("ru = 'Неверное имя. Имя должно состоять из одного слова, начинаться с буквы и не содержать пробелов и специальных символов кроме ""_""'");
	КонецПопытки;
	
	Для Каждого Элемент Из СуществующиеИмена Цикл
		Если Имя = Элемент.Значение Тогда
			ВызватьИсключение НСтр("ru = 'Имя дополнительного источника не уникально'");
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина; 
	
КонецФункции

&НаКлиенте
Процедура СохранитьСЗаполнениемПолей(ДополнительныеПараметры)
	
	ПоляЗапроса = РазобратьЗапросНаКлиенте(ТекстЗапроса);
	
	Если ПоляЗапроса.Количество() <> Поля.Количество() Тогда
		ЗаполнитьПоляПоТекстуЗапроса();
	КонецЕсли;
	
	Для Каждого Строка Из Поля Цикл
		Поле = Неопределено;
		Для Каждого ПолеЗапроса Из ПоляЗапроса Цикл
			Если ПолеЗапроса.Имя = Строка.Имя Тогда
				Поле = ПолеЗапроса.Тип;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ТипВПредставление(НеопределеноВПустуюСтроку(Поле)) <> Строка.Тип Тогда
			ЗаполнитьПоляПоТекстуЗапроса();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СохранитьНаСервере(ИмяНезаданногоПоляПараметров);
	Если ВладелецФормы <> Неопределено Тогда
		Оповестить("ЗагрузитьДополнительныйИсточник", Идентификатор, ВладелецФормы);
	КонецЕсли;
	Если ДополнительныеПараметры.Закрыть Тогда
		Закрыть();
	Иначе
		Заголовок = Имя;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияКонструктораЗапросов(ТекстЗапросаКонструктора, ДополнительныеПараметры) Экспорт
	
	Если ТекстЗапросаКонструктора <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапросаКонструктора;
		Если ФорматСервера >= 2 Тогда
			ЗаполнитьВиртуальныеТаблицыИзЗапросаНаСервере(ИмяНезаданногоПоляПараметров);
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РазобратьЗапрос(ТекстЗапроса)
	
	ТипыСоответствие = Новый Соответствие();
	ТипыСоответствие.Вставить(Тип("Null"), "null");
	ТипыСоответствие.Вставить(Тип("Неопределено"), "null");
	ТипыСоответствие.Вставить(Тип("Булево"), "boolean");
	ТипыСоответствие.Вставить(Тип("Строка"), "string");
	ТипыСоответствие.Вставить(Тип("Число"), "number");
	ТипыСоответствие.Вставить(Тип("Дата"), "date");
	
	МассивПолей = Новый Массив();
	СхемаЗапроса = Новый СхемаЗапроса();
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	КолонкиЗапроса = СхемаЗапроса.ПакетЗапросов[СхемаЗапроса.ПакетЗапросов.Количество()-1].Колонки;
	Для Каждого Колонка Из КолонкиЗапроса Цикл
		ТипыМассив = Новый Массив();
		Для Каждого ТипПоля Из Колонка.ТипЗначения.Типы() Цикл
			ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипПоля);
			Если ОбъектМетаданных = Неопределено Тогда
				ТипыМассив.Добавить(?(ТипыСоответствие[ТипПоля] = Неопределено, ТипПоля, ТипыСоответствие[ТипПоля]));
			Иначе
				ТипыМассив.Добавить(ОбъектМетаданных.FullName());
			КонецЕсли;
		КонецЦикла;
		Поле = Новый Структура();
		Поле.Вставить("Имя", Колонка.Псевдоним);
		Поле.Вставить("Тип", СтрСоединить(ТипыМассив, ","));
		МассивПолей.Добавить(Поле);
	КонецЦикла; 
	
	Возврат МассивПолей;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПреобразованиеРолейПолей(ПользовательскоеПредставление) 
	
	ИзмерениеЗначение = НСтр("ru = 'Измерение'");
	ФактЗначение = НСтр("ru = 'Факт'");
	РолиПолей = Новый Соответствие();
	Если ПользовательскоеПредставление Тогда
		РолиПолей.Вставить("dimension", ИзмерениеЗначение);
		РолиПолей.Вставить("measure", ФактЗначение);
	Иначе
		РолиПолей.Вставить(ИзмерениеЗначение, "dimension");
		РолиПолей.Вставить(ФактЗначение, "measure");
	КонецЕсли;
	
	Возврат РолиПолей;
	
КонецФункции

&НаКлиенте
Функция РазобратьЗапросНаКлиенте(ТекстЗапроса) 
	
	Попытка
		Возврат РазобратьЗапрос(ТекстЗапроса);
	Исключение
		Если ИнформацияОбОшибке().Причина <> Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка в запросе'")
				+ Символы.ПС + ИнформацияОбОшибке().Причина.Описание;
		Иначе 
			ВызватьИсключение ИнформацияОбОшибке().Описание;
		КонецЕсли;
	КонецПопытки; 
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СоздатьПредставление(Имя)
	
	Результат = Неопределено;
	Цифра = Неопределено;
	
	Для Позиция = 1 To СтрДлина(Имя) Цикл
		Символ = Сред(Имя, Позиция, 1);
		Если Результат = Неопределено Тогда
			Результат = Символ;
		ИначеЕсли КодСимвола(Символ) >= 48 И КодСимвола(Символ) <= 57 Тогда
			Если Цифра = Истина Тогда
				Результат = Результат + Символ;
			Иначе
				Результат = Результат + " " + Символ;
				Цифра = Истина;
			КонецЕсли;
		ИначеЕсли ВРег(Символ) = Символ Тогда
			Результат = Результат + " " + НРег(Символ);
			Цифра = Ложь;
		Иначе
			Цифра = Ложь;
			Результат = Результат + Символ;
		КонецЕсли;
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция МожетБытьИзмерением(Тип)
	
	Возврат Тип = "Число" Или Тип = "Number";
	
КонецФункции

&НаКлиенте
Процедура ПослеПодтвержденияУдаления(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		УдалитьДополнительныйИсточникНаСервере(ДополнительныеПараметры);
		Если ВладелецФормы <> Неопределено Тогда
			Оповестить("ЗагрузитьДополнительныйИсточник", Неопределено, ВладелецФормы);
		КонецЕсли;
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительныйИсточникНаСервере(Идентификатор)
	
	Обработки.УправлениеПанелями1САналитики.УдалитьСхему(Идентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВиртуальныеТаблицыИзЗапросаНаСервере(ИмяНезаданногоПоляПараметров)
	
	ВиртуальныеТаблицы.Очистить();
	Если Не ПустаяСтрока(ТекстЗапроса) Тогда
		
		СхемаЗапроса = Новый СхемаЗапроса();
		СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
		
		Если СхемаЗапроса.ПакетЗапросов.Количество() Тогда
			ПакетЗапросов = СхемаЗапроса.ПакетЗапросов.Получить(0);
			Если ТипЗнч(ПакетЗапросов) = Тип("ЗапросВыбораСхемыЗапроса") Тогда
				РазобратьЗапросВыбораСхемыЗапроса(ПакетЗапросов, ИмяНезаданногоПоляПараметров)
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РазобратьЗапросВыбораСхемыЗапроса(ЗапросВыбораСхемыЗапроса, ИмяНезаданногоПоляПараметров, ПсевдонимВложенногоЗапроса = "")
	
	Для Каждого Оператор Из ЗапросВыбораСхемыЗапроса.Операторы Цикл 
		Для Каждого ОператорИсточник Из Оператор.Источники Цикл
			Источник = ОператорИсточник.Источник;
			
			Если ТипЗнч(Источник) = Тип("ТаблицаСхемыЗапроса") Тогда
				
				Если Источник.ПараметрыКомпоновкиДанных.Количество() И ЭтоПоддерживаемаяВиртуальнаяТаблица(Источник.ИмяТаблицы) Тогда
					ВиртуальнаяТаблицаСтрока = ВиртуальныеТаблицы.Добавить();
					ВиртуальнаяТаблицаСтрока.ИмяТаблицы = Источник.ИмяТаблицы;
					ВиртуальнаяТаблицаСтрока.ПсевдонимТаблицы = Источник.Псевдоним;
					ВиртуальнаяТаблицаСтрока.ПсевдонимВложенногоЗапроса = ПсевдонимВложенногоЗапроса;
					
					Позиция = 1;
					Для Каждого Параметр Из Источник.ПараметрыКомпоновкиДанных Цикл 
						Если Позиция > 3 Тогда
							Прервать;
						КонецЕсли;
						
						Если ТипЗнч(Параметр) = Тип("ПараметрТаблицыСхемыЗапроса") Тогда
							ВиртуальнаяТаблицаСтрока["Параметр" + Позиция] = Параметр.Выражение;
							Позиция = Позиция + 1;
						КонецЕсли;
					КонецЦикла;
					
					// Установка значения ПолеПараметров
					ИмяПервогоПараметра = ВиртуальнаяТаблицаСтрока.Параметр1;
					Если Не ПустаяСтрока(ИмяПервогоПараметра) И ИмяПервогоПараметра <> "(&_)" Тогда
						ВиртуальнаяТаблицаСтрока.ПолеПараметров = КомпонентПоляИмяПараметра(ИмяПервогоПараметра);
					ИначеЕсли ИмяПервогоПараметра = "(&_)" Тогда
						ВиртуальнаяТаблицаСтрока.ПолеПараметров = ИмяНезаданногоПоляПараметров;
					Иначе
						ВиртуальнаяТаблицаСтрока.ПолеПараметров = "";
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(Источник) = Тип("ВложенныйЗапросСхемыЗапроса") Тогда
				РазобратьЗапросВыбораСхемыЗапроса(Источник.Запрос, ИмяНезаданногоПоляПараметров, Источник.Псевдоним)
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КомпонентПоляИмяПараметра(ИмяПараметра)
	
	ПозицияРазделителя = СтрНайти(ИмяПараметра, "_", НаправлениеПоиска.СКонца);
	Если ПозицияРазделителя <> 0 Тогда
		Возврат Сред(ИмяПараметра, 3, ПозицияРазделителя - 3);
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПостфиксИмениПараметра(ИмяПараметра)
	
	ПозицияРазделителя = СтрНайти(ИмяПараметра, "_", НаправлениеПоиска.СКонца);
	Если ПозицияРазделителя <> 0 Тогда
		Возврат Сред(ИмяПараметра, ПозицияРазделителя, СтрДлина(ИмяПараметра) - ПозицияРазделителя);
	Иначе
		Возврат "";
	КонецЕсли; 
	
КонецФункции

&НаСервере
Процедура УстановитьПараметрыВиртуальнойТаблицы(ВиртуальныеТаблицыИдСтроки, ПолеПараметров, ИмяНезаданногоПоляПараметров)
	
	Перем Таблица;
	
	ВиртуальныеТаблицыДанныеСтроки = ВиртуальныеТаблицы.НайтиПоИдентификатору(ВиртуальныеТаблицыИдСтроки);
	ИмяТаблицы = ВиртуальныеТаблицыДанныеСтроки.ИмяТаблицы;
	ПсевдонимТаблицы = ВиртуальныеТаблицыДанныеСтроки.ПсевдонимТаблицы;
	ПсевдонимВложенногоЗапроса = ВиртуальныеТаблицыДанныеСтроки.ПсевдонимВложенногоЗапроса;
	
	СхемаЗапроса = Новый СхемаЗапроса();
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	Если СхемаЗапроса.ПакетЗапросов.Количество() Тогда
		ПакетЗапросов = СхемаЗапроса.ПакетЗапросов.Получить(0);
		Если ТипЗнч(ПакетЗапросов) = Type("ЗапросВыбораСхемыЗапроса") Тогда
			НайтиВиртуальнуюТаблицуСхемыЗапроса(ПакетЗапросов, ИмяТаблицы, ПсевдонимТаблицы, ПсевдонимВложенногоЗапроса, Таблица);
		КонецЕсли;
	КонецЕсли;
	
	Если Таблица = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Виртуальная таблица не найдена в тексте запроса:'") 
		+ Символы.ПС + ИмяТаблицы + " " + ПсевдонимТаблицы;
	КонецЕсли;
	
	ЭтоПустойПараметр = (ПолеПараметров = ИмяНезаданногоПоляПараметров);
	
	ИмяПараметра1 = ?(ЭтоПустойПараметр, "(&_)", "(&" + ПолеПараметров + "_НачалоПериода)");
	ИмяПараметра2 = ?(ЭтоПустойПараметр, "(&_)", "(&" + ПолеПараметров + "_КонецПериода)");
	ИмяПараметра3 = ?(ЭтоПустойПараметр, "(&_)", "(&" + ПолеПараметров + "_Периодичность)");
	
	ИмяПараметра1Англ = ?(ЭтоПустойПараметр, "(&_)", "(&" + ПолеПараметров + "_BeginOfPeriod)");
	ИмяПараметра2Англ = ?(ЭтоПустойПараметр, "(&_)", "(&" + ПолеПараметров + "_EndOfPeriod)");
	ИмяПараметра3Англ = ?(ЭтоПустойПараметр, "(&_)", "(&" + ПолеПараметров + "_Periodicity)");
	
	ЧастиИмениТаблицы = СтрРазделить(ИмяТаблицы, ".", Ложь);
	
	Если ЧастиИмениТаблицы.Количество() Тогда
		ТипВиртуальнойТаблицы = ЧастиИмениТаблицы.Получить(ЧастиИмениТаблицы.Количество() - 1);
		
		Если ТипВиртуальнойТаблицы = "Остатки" Тогда
			Таблица.ПараметрыКомпоновкиДанных[0].Выражение = Новый ВыражениеСхемыЗапроса(ИмяПараметра2);
			
			ВиртуальныеТаблицыДанныеСтроки.Параметр1 = ИмяПараметра2;
			
		ИначеЕсли ТипВиртуальнойТаблицы = "Balance" Тогда
			Таблица.ПараметрыКомпоновкиДанных[0].Выражение = Новый ВыражениеСхемыЗапроса(ИмяПараметра2Англ);
			
			ВиртуальныеТаблицыДанныеСтроки.Параметр1 = ИмяПараметра2Англ;
			
		ИначеЕсли ТипВиртуальнойТаблицы = "ДвиженияССубконто" Тогда
			Таблица.ПараметрыКомпоновкиДанных[0].Выражение = Новый ВыражениеСхемыЗапроса(ИмяПараметра1);
			Таблица.ПараметрыКомпоновкиДанных[1].Выражение = Новый ВыражениеСхемыЗапроса(ИмяПараметра2);
			
			ВиртуальныеТаблицыДанныеСтроки.Параметр1 = ИмяПараметра1;
			ВиртуальныеТаблицыДанныеСтроки.Параметр2 = ИмяПараметра2;
			
		ИначеЕсли ТипВиртуальнойТаблицы = "RecordsWithExtDimensions" Тогда
			Таблица.ПараметрыКомпоновкиДанных[0].Выражение = Новый ВыражениеСхемыЗапроса(ИмяПараметра1Англ);
			Таблица.ПараметрыКомпоновкиДанных[1].Выражение = Новый ВыражениеСхемыЗапроса(ИмяПараметра2Англ);
			
			ВиртуальныеТаблицыДанныеСтроки.Параметр1 = ИмяПараметра1Англ;
			ВиртуальныеТаблицыДанныеСтроки.Параметр2 = ИмяПараметра2Англ;
			
		ИначеЕсли ТипВиртуальнойТаблицы = "Обороты" Или ТипВиртуальнойТаблицы = "ОстаткиИОбороты" Или ТипВиртуальнойТаблицы = "ОборотыДтКт" Тогда
			Таблица.ПараметрыКомпоновкиДанных[0].Выражение = Новый ВыражениеСхемыЗапроса(ИмяПараметра1);
			Таблица.ПараметрыКомпоновкиДанных[1].Выражение = Новый ВыражениеСхемыЗапроса(ИмяПараметра2);
			Таблица.ПараметрыКомпоновкиДанных[2].Выражение = Новый ВыражениеСхемыЗапроса(ИмяПараметра3);
			
			ВиртуальныеТаблицыДанныеСтроки.Параметр1 = ИмяПараметра1;
			ВиртуальныеТаблицыДанныеСтроки.Параметр2 = ИмяПараметра2;
			ВиртуальныеТаблицыДанныеСтроки.Параметр3 = ИмяПараметра3;
			
		ИначеЕсли ТипВиртуальнойТаблицы = "Turnovers" Или ТипВиртуальнойТаблицы = "BalanceAndTurnovers" Или ТипВиртуальнойТаблицы = "DrCrTurnovers" Тогда
			Таблица.ПараметрыКомпоновкиДанных[0].Выражение = Новый ВыражениеСхемыЗапроса(ИмяПараметра1Англ);
			Таблица.ПараметрыКомпоновкиДанных[1].Выражение = Новый ВыражениеСхемыЗапроса(ИмяПараметра2Англ);
			Таблица.ПараметрыКомпоновкиДанных[2].Выражение = Новый ВыражениеСхемыЗапроса(ИмяПараметра3Англ);
			
			ВиртуальныеТаблицыДанныеСтроки.Параметр1 = ИмяПараметра1Англ;
			ВиртуальныеТаблицыДанныеСтроки.Параметр2 = ИмяПараметра2Англ;
			ВиртуальныеТаблицыДанныеСтроки.Параметр3 = ИмяПараметра3Англ;
			
		ИначеЕсли ТипВиртуальнойТаблицы = "СрезПервых" Тогда
			Таблица.ПараметрыКомпоновкиДанных[0].Выражение = Новый ВыражениеСхемыЗапроса(ИмяПараметра1);
			
			ВиртуальныеТаблицыДанныеСтроки.Параметр1 = ИмяПараметра1;
			
		ИначеЕсли ТипВиртуальнойТаблицы = "SliceFirst" Тогда
			Таблица.ПараметрыКомпоновкиДанных[0].Выражение = Новый ВыражениеСхемыЗапроса(ИмяПараметра1Англ);
			
			ВиртуальныеТаблицыДанныеСтроки.Параметр1 = ИмяПараметра1Англ;
			
		ИначеЕсли ТипВиртуальнойТаблицы = "СрезПоследних" Тогда
			Таблица.ПараметрыКомпоновкиДанных[0].Выражение = Новый ВыражениеСхемыЗапроса(ИмяПараметра2);
			
			ВиртуальныеТаблицыДанныеСтроки.Параметр1 = ИмяПараметра2;
			
		ИначеЕсли ТипВиртуальнойТаблицы = "SliceLast" Тогда
			Таблица.ПараметрыКомпоновкиДанных[0].Выражение = Новый ВыражениеСхемыЗапроса(ИмяПараметра2Англ);
			
			ВиртуальныеТаблицыДанныеСтроки.Параметр1 = ИмяПараметра2Англ;
			
		Иначе
			ВызватьИсключение НСтр("ru = 'Не удалось установить параметры для таблицы:'") + Символы.ПС + ИмяТаблицы;
		КонецЕсли;
		
		ВиртуальныеТаблицыДанныеСтроки.ПолеПараметров = ПолеПараметров;
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Не удалось установить параметры для таблицы:'") + Символы.ПС + ИмяТаблицы;
	КонецЕсли;
	
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса()
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НайтиВиртуальнуюТаблицуСхемыЗапроса(ЗапросВыбора, ИмяТаблицы, ПсевдонимТаблицы, ТребуемыйПсевдонимВложенногоЗапроса, Результат, ТекущийПсевдонимВложенногоЗапроса = "")
	
	Для Каждого Оператор Из ЗапросВыбора.Операторы Цикл 
		Для Каждого ОператорИсточник Из Оператор.Источники Цикл
			Источник = ОператорИсточник.Источник;
			Если ТипЗнч(Источник) = Тип("ТаблицаСхемыЗапроса") Тогда
				Если Источник.ПараметрыКомпоновкиДанных.Количество() И ЭтоПоддерживаемаяВиртуальнаяТаблица(ИмяТаблицы) Тогда
					Если Источник.ИмяТаблицы = ИмяТаблицы И Источник.Псевдоним = ПсевдонимТаблицы И ТекущийПсевдонимВложенногоЗапроса = ТребуемыйПсевдонимВложенногоЗапроса Тогда
						Результат = Источник;
						Возврат;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ТипЗнч(Источник) = Тип("ВложенныйЗапросСхемыЗапроса") Тогда
				НайтиВиртуальнуюТаблицуСхемыЗапроса(Источник.Запрос, ИмяТаблицы, ПсевдонимТаблицы, ТребуемыйПсевдонимВложенногоЗапроса, Результат, Источник.Псевдоним);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоПоддерживаемаяВиртуальнаяТаблица(ИмяТаблицы)
	
	Если СтрЗаканчиваетсяНа(ИмяТаблицы, ".Остатки")
		Или СтрЗаканчиваетсяНа(ИмяТаблицы, ".Balance")
		
		Или СтрЗаканчиваетсяНа(ИмяТаблицы, ".Обороты")
		Или СтрЗаканчиваетсяНа(ИмяТаблицы, ".Turnovers")
		
		Или СтрЗаканчиваетсяНа(ИмяТаблицы, ".ОстаткиИОбороты")
		Или СтрЗаканчиваетсяНа(ИмяТаблицы, ".BalanceAndTurnovers")
		
		Или СтрЗаканчиваетсяНа(ИмяТаблицы, ".СрезПервых")
		Или СтрЗаканчиваетсяНа(ИмяТаблицы, ".SliceFirst")
		
		Или СтрЗаканчиваетсяНа(ИмяТаблицы, ".СрезПоследних")
		Или СтрЗаканчиваетсяНа(ИмяТаблицы, ".SliceLast")
		
		Или СтрЗаканчиваетсяНа(ИмяТаблицы, ".ДвиженияССубконто")
		Или СтрЗаканчиваетсяНа(ИмяТаблицы, ".RecordsWithExtDimensions")
		
		Или СтрЗаканчиваетсяНа(ИмяТаблицы, ".ОборотыДтКт")
		Или СтрЗаканчиваетсяНа(ИмяТаблицы, ".DrCrTurnovers") Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуВыбораПоляПараметров(ВиртуальныеТаблицыИдСтроки, СписокВыбораПоляПараметров, ДополнительныеПараметры = Неопределено)
	
	ВиртуальныеТаблицыДанныеСтроки = ВиртуальныеТаблицы.НайтиПоИдентификатору(ВиртуальныеТаблицыИдСтроки);
	ПсевдонимТаблицы = ВиртуальныеТаблицыДанныеСтроки.ПсевдонимТаблицы;
	Если ПустаяСтрока(ПсевдонимТаблицы) Тогда
		ПсевдонимТаблицы = ВиртуальныеТаблицыДанныеСтроки.ИмяТаблицы;
	КонецЕсли;
	
	ЗначениеПоляПараметров = ВиртуальныеТаблицыДанныеСтроки.ПолеПараметров;
	
	ДополнительныеПараметрыОповещения = Новый Структура();
	ДополнительныеПараметрыОповещения.Вставить("ВиртуальныеТаблицыИдСтроки", ВиртуальныеТаблицыИдСтроки);
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		ДополнительныеПараметрыОповещения.Вставить("Сохранение", Истина);
		ДополнительныеПараметрыОповещения.Вставить("Закрыть", ДополнительныеПараметры.Закрыть);
		ДополнительныеПараметрыОповещения.Вставить("СписокВыбораПоляПараметров", СписокВыбораПоляПараметров);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияФормыВыбораПоляПараметров", ЭтотОбъект, ДополнительныеПараметрыОповещения);
	
	ПараметрыФормы = Новый Структура("ПсевдонимТаблицы, СписокВыбораПоляПараметров, ЗначениеПоляПараметров", ПсевдонимТаблицы, СписокВыбораПоляПараметров, ЗначениеПоляПараметров);
	
	ОткрытьФорму("Обработка.УправлениеПанелями1САналитики.Форма.ВыборПоляПараметров", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыВыбораПоляПараметров(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		УстановитьПараметрыВиртуальнойТаблицы(ДополнительныеПараметры.ВиртуальныеТаблицыИдСтроки, Результат, ИмяНезаданногоПоляПараметров);
		Модифицированность = Истина;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("Сохранение") Тогда
		СохранитьПослеПроверкиПараметров(ДополнительныеПараметры, ДополнительныеПараметры.СписокВыбораПоляПараметров);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокВыбораПоляПараметров(ТекстЗапроса, ИмяНезаданногоПоляПараметров)
	
	СписокПолейПараметров = Новый СписокЗначений();
	
	СхемаЗапроса = Новый СхемаЗапроса();
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	Если СхемаЗапроса.ПакетЗапросов.Количество() Тогда
		ПакетЗапросов = СхемаЗапроса.ПакетЗапросов.Получить(0);
		Если ТипЗнч(ПакетЗапросов) = Тип("ЗапросВыбораСхемыЗапроса") Тогда
			Для Каждого Колонка Из ПакетЗапросов.Колонки Цикл
				Если Колонка.ТипЗначения.СодержитТип(Тип("Дата")) Тогда
					СписокПолейПараметров.Добавить(Колонка.Псевдоним);
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли;
	
	СписокПолейПараметров.Добавить(ИмяНезаданногоПоляПараметров);
	
	Возврат СписокПолейПараметров;
	
КонецФункции

&НаКлиенте
Процедура СохранитьПослеПроверкиПараметров(ДополнительныеПараметры, СписокВыбораПоляПараметров = Неопределено)
	
	Если СписокВыбораПоляПараметров = Неопределено Тогда
		СписокВыбораПоляПараметров = СписокВыбораПоляПараметров(ТекстЗапроса, ИмяНезаданногоПоляПараметров);
	КонецЕсли;
	
	// Проверка пустых параметров
	Для Каждого Строка Из ВиртуальныеТаблицы Цикл
		Если Не Строка.Проверено И ПустаяСтрока(Строка.ПолеПараметров) И ПустаяСтрока(Строка.Параметр1) Тогда
			ОткрытьФормуВыбораПоляПараметров(Строка.ПолучитьИдентификатор(), СписокВыбораПоляПараметров, ДополнительныеПараметры);
			Строка.Проверено = Истина;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	// Проверка имен параметров
	Постфиксы = ПоддерживаемыеПостфиксы();
	Для Каждого Строка Из ВиртуальныеТаблицы Цикл
		Если Не ПустаяСтрока(Строка.Параметр1) И Строка.Параметр1 <> "(&_)" Тогда
			ПроверитьИмяПараметра(Строка.Параметр1, СписокВыбораПоляПараметров, Постфиксы);
		КонецЕсли;
		Если Не ПустаяСтрока(Строка.Параметр2) И Строка.Параметр2 <> "(&_)" Тогда
			ПроверитьИмяПараметра(Строка.Параметр2, СписокВыбораПоляПараметров, Постфиксы);
		КонецЕсли;
		Если Не ПустаяСтрока(Строка.Параметр3) И Строка.Параметр3 <> "(&_)" Тогда
			ПроверитьИмяПараметра(Строка.Параметр3, СписокВыбораПоляПараметров, Постфиксы);
		КонецЕсли;
	КонецЦикла;
	
	// Проверка на неподдерживаемые обычные параметры
	ПроверитьНаличиеОбычныхПараметров(ТекстЗапроса);
	
	// Сохранение
	ДополнительныеПараметры = Новый Структура("Закрыть", ДополнительныеПараметры.Закрыть);
	Если ПроверитьПоля() Тогда
		СохранитьСЗаполнениемПолей(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьИмяПараметра(ИмяПараметра, СписокВыбораПоляПараметров, Постфиксы)
	
	ИмяПоля = КомпонентПоляИмяПараметра(ИмяПараметра);
	Постфикс = ПостфиксИмениПараметра(ИмяПараметра);
	
	Если ПустаяСтрока(ИмяПоля) Или Постфиксы.Найти(Постфикс) = Неопределено Тогда
		Параметр = СтрЗаменить(ИмяПараметра, "&", "");
		Параметр = СтрЗаменить(Параметр, "(", "");
		Параметр = СтрЗаменить(Параметр, ")", "");
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Некорректное имя параметра виртуальной таблицы: %1'"), Параметр);
	КонецЕсли;
	
	Если СписокВыбораПоляПараметров.FindByValue(ИмяПоля) = Неопределено Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Поле параметра виртуальной таблицы отсутствует в составе полей запроса: %1'"), ИмяПоля);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроверитьНаличиеОбычныхПараметров(ТекстЗапроса)
	
	СхемаЗапроса = Новый СхемаЗапроса();
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	Если СхемаЗапроса.ПакетЗапросов.Количество() Тогда
		ПакетЗапросов = СхемаЗапроса.ПакетЗапросов.Получить(0);
		Если ТипЗнч(ПакетЗапросов) = Тип("ЗапросВыбораСхемыЗапроса") Тогда
			ПроверитьОбычныеПараметрыВЗапросеВыбораСхемыЗапроса(ПакетЗапросов)
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроверитьОбычныеПараметрыВЗапросеВыбораСхемыЗапроса(ЗапросВыбора)
	
	Для Каждого Оператор Из ЗапросВыбора.Операторы Цикл 
		Для Каждого ОператорИсточник Из Оператор.Источники Цикл
			Источник = ОператорИсточник.Источник;
			Если ТипЗнч(Источник) = Тип("ТаблицаСхемыЗапроса") Тогда
				Если Источник.Параметры.Количество() Тогда 
					Для Каждого Параметр Из Источник.Параметры Цикл
						ЗначениеПараметра = Строка(Параметр.Выражение);
						Если СтрНачинаетсяС(ЗначениеПараметра, "&") Тогда
							ВызватьИсключение СтрШаблон(НСтр("ru = 'Неподдерживаемый формат параметра виртуальной таблицы: %1'"), СтрЗаменить(ЗначениеПараметра, "&", ""));
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			ИначеЕсли ТипЗнч(Источник) = Тип("ВложенныйЗапросСхемыЗапроса") Тогда
				ПроверитьОбычныеПараметрыВЗапросеВыбораСхемыЗапроса(Источник.Запрос);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Функция ПоддерживаемыеПостфиксы()
	
	Постфиксы = Новый Массив();
	Постфиксы.Добавить("_НачалоПериода");
	Постфиксы.Добавить("_КонецПериода");
	Постфиксы.Добавить("_Периодичность");
	Постфиксы.Добавить("_BeginOfPeriod");
	Постфиксы.Добавить("_EndOfPeriod");
	Постфиксы.Добавить("_Periodicity");
	
	Возврат Постфиксы; 
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗапросСодержитПараметрыВиртуальныхТаблиц(ТекстЗапроса)
	
	Содержит = Ложь;
	
	СхемаЗапроса = Новый СхемаЗапроса();
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	Если СхемаЗапроса.ПакетЗапросов.Количество() Тогда
		ПакетЗапросов = СхемаЗапроса.ПакетЗапросов.Получить(0);
		Если ТипЗнч(ПакетЗапросов) = Тип("ЗапросВыбораСхемыЗапроса") Тогда
			НайтиПараметрыВиртуальныхТаблиц(ПакетЗапросов, Содержит)
		КонецЕсли;
	КонецЕсли;
	
	Возврат Содержит;
	
КонецФункции

&НаСервереБезКонтекста
Процедура НайтиПараметрыВиртуальныхТаблиц(ЗапросВыбора, Содержит)
	
	Для Каждого Оператор Из ЗапросВыбора.Операторы Цикл 
		Для Каждого ОператорИсточник Из Оператор.Источники Цикл
			Источник = ОператорИсточник.Источник;
			
			Если ТипЗнч(Источник) = Тип("ТаблицаСхемыЗапроса") Тогда
				
				Если Источник.ПараметрыКомпоновкиДанных.Количество() Тогда
					Для Каждого Параметр Из Источник.ПараметрыКомпоновкиДанных Цикл 
						Если ТипЗнч(Параметр) = Тип("ПараметрТаблицыСхемыЗапроса") И Не ПустаяСтрока(Параметр.Выражение) Тогда
							Содержит = Истина;
							Возврат;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если Источник.Параметры.Количество() Тогда 
					Для Каждого Параметр Из Источник.Параметры Цикл
						Если ТипЗнч(Параметр) = Тип("ПараметрТаблицыСхемыЗапроса") И СтрНачинаетсяС(Параметр.Выражение, "&") Тогда
							Содержит = Истина;
							Возврат;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(Источник) = Тип("ВложенныйЗапросСхемыЗапроса") Тогда
				НайтиПараметрыВиртуальныхТаблиц(Источник.Запрос, Содержит);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НеопределеноВПустуюСтроку(Значение)
	
	Возврат ?(Значение = Неопределено, "", Значение);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипВПредставление(Значение) 
	
	Соответствие = Новый Соответствие();
	Соответствие.Вставить("null", Строка(Тип("Неопределено")));
	Соответствие.Вставить("boolean", Строка(Тип("Boolean")));
	Соответствие.Вставить("string", Строка(Тип("String")));
	Соответствие.Вставить("number", Строка(Тип("Number")));
	Соответствие.Вставить("date", Строка(Тип("Date"))); 
	Массив = Новый Массив();
	Для Каждого Часть Из СтрРазделить(Значение, ",", Ложь) Цикл
		Результат = Соответствие[Часть];
		Массив.Добавить(?(Результат = Неопределено, Часть, Результат));
	КонецЦикла;
	
	Возврат СтрСоединить(Массив, ","); 
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеВТип(Значение)
	
	Соответствие = Новый Соответствие();
	Соответствие.Вставить(Строка(Тип("Null")), "null");
	Соответствие.Вставить(Строка(Тип("Неопределено")), "null");
	Соответствие.Вставить(Строка(Тип("Boolean")), "boolean");
	Соответствие.Вставить(Строка(Тип("String")), "string");
	Соответствие.Вставить(Строка(Тип("Number")), "number");
	Соответствие.Вставить(Строка(Тип("Date")), "date"); 
	Массив = Новый Массив();
	Для Каждого Часть Из СтрРазделить(Значение, ",", Ложь) Цикл
		Результат = Соответствие[Часть];
		Массив.Добавить(?(Результат = Неопределено, Часть, Результат));
	КонецЦикла;
	
	Возврат СтрСоединить(Массив, ",");
	
КонецФункции

&НаСервере
Функция JSONВЗначение(СтрокаJSON)
	
	Если СтрокаJSON = "" Тогда
		Возврат Неопределено;
	КонецЕсли;
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	Возврат ПрочитатьJSON(ЧтениеJSON, Истина); 
	
КонецФункции

&НаСервере
Функция ЗначениеВJSON(Значение)
	
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
	ЗаписатьJSON(ЗаписьJSON, Значение);
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПоляПоТекстуЗапроса()
	
	НовыеПоля = РазобратьЗапросНаКлиенте(ТекстЗапроса); //Массив
	Преобразование = ПреобразованиеРолейПолей(Истина);
	ПреобразованиеОбратное = ПреобразованиеРолейПолей(Ложь);
	СтарыеПоля = Новый Соответствие();
	Для Каждого Поле Из Поля Цикл
		ПолеСтруктура = Новый Структура();
		ПолеСтруктура.Вставить("Представление", Поле.Представление);
		ПолеСтруктура.Вставить("Роль", ПреобразованиеОбратное.Получить(Поле.Роль));
		СтарыеПоля.Вставить(Поле.Имя, ПолеСтруктура);
	КонецЦикла;
	
	Поля.Очистить();
	Для Каждого Поле Из НовыеПоля Цикл //Структура
		Строка = Поля.Добавить();
		Строка.Имя = Поле.Имя;
		Строка.Тип = ТипВПредставление(Поле.Тип);
		
		СтароеПоле = СтарыеПоля.Получить(Строка.Имя);
		Если СтароеПоле <> Неопределено Тогда
			Строка.Представление = СтароеПоле.Представление;
			Строка.Роль = СтароеПоле.Роль;
		Иначе
			Строка.Представление = СоздатьПредставление(Строка.Имя);
			Строка.Роль = "measure";
		КонецЕсли;
		Если МожетБытьИзмерением(Строка.Тип) Тогда
			Строка.Роль = Преобразование.Получить(Строка.Роль);
		Иначе
			Строка.Роль = Преобразование.Получить("dimension");
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗаписатьИЗакрытьФорму()
	
	Если ФорматСервера < 2 И ЗапросСодержитПараметрыВиртуальныхТаблиц(ТекстЗапроса) Тогда
		ВызватьИсключение НСтр("ru = 'Версия сервера 1С:Аналитики не поддерживает работу с параметрами виртуальных таблиц. Обновите версию сервера 1С:Аналитики.'");
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("Закрыть", Истина);
	Если ФорматСервера >= 2 Тогда
		ЗаполнитьВиртуальныеТаблицыИзЗапросаНаСервере(ИмяНезаданногоПоляПараметров);
		СохранитьПослеПроверкиПараметров(ДополнительныеПараметры);
	Иначе
		Если ПроверитьПоля() Тогда
			СохранитьСЗаполнениемПолей(ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти