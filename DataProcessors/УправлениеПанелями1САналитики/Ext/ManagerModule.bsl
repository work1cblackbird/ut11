#Если Сервер Или ТолстыйКлиентОбычноеПриложение Тогда

#Область ПрограммныйИнтерфейс

// Загрузить данные панелей из 1С:Аналитики.
// 
// Параметры:
//  Параметры - см. Обработки.УправлениеПанелями1САналитики.ПараметрыОбновленияИзАналитики
// 
// Возвращаемое значение:
//  см. Обработки.УправлениеПанелями1САналитики.ПараметрыОбновленияИзАналитики
Функция ЗагрузитьДанныеПанелей(Параметры) Экспорт
	
	ЗагрузитьВладельцев(Параметры.ВладельцыАналитики);
	ЗагрузитьПанели(Параметры.Панели);
	
	ПапкиИзСхемы = ПапкиИзСхемы();
	ИдентификаторыОбъектовВсехПанелей = Новый Соответствие(); // для исключения удаленных объектов
	
	Панели = Параметры.Панели;
	Для Каждого Панель Из Панели Цикл 
		ИдентификаторыПредставленныхОбъектов = Новый Соответствие();
		
		ЗаполнитьИдентификаторыПредставленныхОбъектов(ПапкиИзСхемы, Панель.Data_RootFolderId, ИдентификаторыПредставленныхОбъектов);
		
		Для Каждого Идентификатор Из ИдентификаторыПредставленныхОбъектов Цикл
			ИдентификаторыОбъектовВсехПанелей.Вставить(Идентификатор.Key, Истина);
			ПанельИдентификаторыПредставленныхОбъектов = Панель.ИдентификаторыПредставленныхОбъектов;// СписокЗначений
			ПанельИдентификаторыПредставленныхОбъектов.Добавить(Идентификатор.Key);
		КонецЦикла;
	КонецЦикла;
	
	ЗагрузитьПапки(Параметры.Папки, ИдентификаторыОбъектовВсехПанелей);
	ЗагрузитьДиаграммы(Параметры.Диаграммы, ИдентификаторыОбъектовВсехПанелей);
	ЗагрузитьДашборды(Параметры.Дашборды, ИдентификаторыОбъектовВсехПанелей);
	ЗагрузитьОбъектыАналитики(Параметры.ОбъектыАналитики);
	
	Возврат Параметры;
	
КонецФункции

// Параметры обновления из аналитики.
// 
// Возвращаемое значение:
//  Структура - Параметры обновления из аналитики:
// * ВладельцыАналитики - Неопределено, СписокЗначений
// * Дашборды - Неопределено, ТаблицаЗначений
// * Диаграммы - Неопределено, ТаблицаЗначений
// * ОбъектыАналитики - Неопределено, ТаблицаЗначений
// * Панели - Неопределено, ТаблицаЗначений
// * Папки - Неопределено, ТаблицаЗначений
Функция ПараметрыОбновленияИзАналитики() Экспорт
	
	Структура = Новый Структура();
	Структура.Вставить("ВладельцыАналитики", Неопределено);
	Структура.Вставить("Дашборды", Неопределено);
	Структура.Вставить("Диаграммы", Неопределено);
	Структура.Вставить("ОбъектыАналитики", Неопределено);
	Структура.Вставить("Панели", Неопределено);
	Структура.Вставить("Папки", Неопределено);
	
	Возврат Структура;
	
КонецФункции

// Загрузить панели источника из JSON.
// 
// Параметры:
//  Параметры - см. Обработки.УправлениеПанелями1САналитики.ПараметрыЧтениеИзФайла
// 
// Возвращаемое значение:
//  см. Обработки.УправлениеПанелями1САналитики.ПараметрыЧтениеИзФайла
Функция ЗагрузитьПанелиИсточникаИзJSON(Параметры) Экспорт
	
	ПараметрыЧтениеИзФайла = Параметры.ПараметрыЧтениеИзФайла;
	
	ДанныеРабочегоСтола = JSONВЗначение(Параметры.Содержимое);
	
	МассивВладельцев = Новый Массив();
	МассивРабочихСтолов = Новый Массив();
	МассивПапок = Новый Массив();
	МассивДиаграмм = Новый Массив();
	МассивДашбордов = Новый Массив();
	МассивОбъектовАналитики = Новый Массив();
	
	Для Каждого Элемент Из ДанныеРабочегоСтола Цикл
		ТипОбъекта = Элемент.Получить("type");
		Если ТипОбъекта = "user" Тогда
			МассивВладельцев.Добавить(Элемент);
		ИначеЕсли ТипОбъекта = "desktop" Тогда
			МассивРабочихСтолов.Добавить(Элемент);
		ИначеЕсли ТипОбъекта = "folder" Тогда
			МассивПапок.Добавить(Элемент);
		ИначеЕсли ТипОбъекта = "chart" Тогда
			МассивДиаграмм.Добавить(Элемент);
		ИначеЕсли ТипОбъекта = "dashboard" Тогда
			МассивДашбордов.Добавить(Элемент);
		Иначе
			МассивОбъектовАналитики.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	ЗагрузитьВладельцев(ПараметрыЧтениеИзФайла.ВладельцыАналитикиИзФайла, МассивВладельцев);
	ЗагрузитьПанели(ПараметрыЧтениеИзФайла.ПанелиИзФайла, МассивРабочихСтолов);
	
	Панели = ПараметрыЧтениеИзФайла.ПанелиИзФайла;
	Для Каждого Панель Из Панели Цикл 
		ИдентификаторыПредставленныхОбъектов = Новый Соответствие();
		
		ЗаполнитьИдентификаторыПредставленныхОбъектов(МассивПапок, Панель.Data_RootFolderId, ИдентификаторыПредставленныхОбъектов);
		
		Для Каждого Идентификатор Из ИдентификаторыПредставленныхОбъектов Цикл
			ПанельИдентификаторыПредставленныхОбъектов = Панель.ИдентификаторыПредставленныхОбъектов;// СписокЗначений
			ПанельИдентификаторыПредставленныхОбъектов.Добавить(Идентификатор.Key);
		КонецЦикла;
	КонецЦикла;
	
	ЗагрузитьОбъектыАналитики(ПараметрыЧтениеИзФайла.ОбъектыАналитикиИзФайла, МассивОбъектовАналитики);
	ЗагрузитьПапки(ПараметрыЧтениеИзФайла.ПапкиИзФайла, Неопределено, МассивПапок);
	ЗагрузитьДиаграммы(ПараметрыЧтениеИзФайла.ДиаграммыИзФайла, Неопределено, МассивДиаграмм);
	ЗагрузитьДашборды(ПараметрыЧтениеИзФайла.ДашбордыИзФайла, Неопределено, МассивДашбордов);
	
	Возврат ПараметрыЧтениеИзФайла;
	
КонецФункции

// Параметры чтение из файла.
// 
// Возвращаемое значение:
//  Структура - Параметры чтение из файла:
// * ВладельцыАналитикиИзФайла - Неопределено, СписокЗначений
// * ДашбордыИзФайла - Неопределено, ТаблицаЗначений
// * ДиаграммыИзФайла - Неопределено, ТаблицаЗначений
// * ОбъектыАналитикиИзФайла - Неопределено, ТаблицаЗначений
// * ПанелиИзФайла - Неопределено, ТаблицаЗначений
// * ПапкиИзФайла - Неопределено, ТаблицаЗначений
Функция ПараметрыЧтениеИзФайла() Экспорт
	
	Структура = Новый Структура();
	Структура.Вставить("ВладельцыАналитикиИзФайла", Неопределено);
	Структура.Вставить("ДашбордыИзФайла", Неопределено);
	Структура.Вставить("ДиаграммыИзФайла", Неопределено);
	Структура.Вставить("ОбъектыАналитикиИзФайла", Неопределено);
	Структура.Вставить("ПанелиИзФайла", Неопределено);
	Структура.Вставить("ПапкиИзФайла", Неопределено);
	
	Возврат Структура;
	
КонецФункции

// Создает ссылку на панель из источника.
// 
// Параметры:
//  Параметры - см. Обработки.УправлениеПанелями1САналитики.ПараметрыСозданияСсылки
// 
// Возвращаемое значение:
//  см. Обработки.УправлениеПанелями1САналитики.ПараметрыСозданияСсылки
Функция СоздатьСсылкуНаПанель(Параметры) Экспорт
	
	ИдентификаторОбъекта = Параметры.ИдентификаторОбъекта; 
	ВыбранныеВладельцыПриемник = Параметры.ВыбранныеВладельцыПриемник;
	ПанелиИсточник = Параметры.ПанелиИсточник;
	Панели = Параметры.Панели;
	
	ВыбранныйОбъект = ПанелиИсточник.Строки.Найти(ИдентификаторОбъекта, "Идентификатор", Истина); //СтрокаДереваЗначений
	
	Для Каждого Панель Из Панели Цикл
		
		Если ВыбранныеВладельцыПриемник.НайтиПоЗначению(Панель.OwnerName) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПодключитьКПанели(Панель, ВыбранныйОбъект, Параметры);
		
	КонецЦикла;
	
	Возврат ЗагрузитьДанныеПанелей(Параметры);;
	
КонецФункции

// Параметры создания ссылки.
// 
// Возвращаемое значение:
//  Структура - Параметры создания ссылки:
// * ВыбранныеВладельцыПриемник - Неопределено, СписокЗначений
// * ИдентификаторОбъекта - Строка
// * ПанелиИсточник - Неопределено, ТаблицаЗначений
// * Панели - Неопределено, ТаблицаЗначений
// * Дашборды - Неопределено, ТаблицаЗначений
// * Диаграммы - Неопределено, ТаблицаЗначений
// * Папки - Неопределено, ТаблицаЗначений
// * ВладельцыАналитики - Неопределено, ТаблицаЗначений
// * ОбъектыАналитики - Неопределено, ТаблицаЗначений
Функция ПараметрыСозданияСсылки() Экспорт
	
	Структура = Новый Структура();
	Структура.Вставить("ВыбранныеВладельцыПриемник", Неопределено);
	Структура.Вставить("ИдентификаторОбъекта", "");
	Структура.Вставить("ПанелиИсточник", Неопределено);
	Структура.Вставить("Панели", Неопределено);
	Структура.Вставить("Дашборды", Неопределено);
	Структура.Вставить("Диаграммы", Неопределено);
	Структура.Вставить("Папки", Неопределено);
	Структура.Вставить("ВладельцыАналитики", Неопределено);
	Структура.Вставить("ОбъектыАналитики", Неопределено);
	
	Возврат Структура;
	
КонецФункции

// Создает ссылку на панель из источника.
// 
// Параметры:
//  Параметры - см. Обработки.УправлениеПанелями1САналитики.ПараметрыСозданияСсылок
// 
// Возвращаемое значение:
//  см. Обработки.УправлениеПанелями1САналитики.ПараметрыСозданияСсылок
Функция СоздатьСсылкиНаПанели(Параметры) Экспорт
	
	СсылкиПоВладельцам = ВсеОбъектыКСозданиюСсылки(Параметры);
	СоздатьСсылки(СсылкиПоВладельцам, Параметры.ВладельцыАналитики, Параметры.Папки);
	Возврат ЗагрузитьДанныеПанелей(Параметры);
	
КонецФункции

// Параметры создания ссылок.
// 
// Возвращаемое значение:
//  Структура - Параметры создания ссылок:
// * ВыбранныеВладельцыПриемник - Неопределено, СписокЗначений
// * ПанелиИсточник - Неопределено, ТаблицаЗначений
// * Панели - Неопределено, ТаблицаЗначений
// * Дашборды - Неопределено, ТаблицаЗначений
// * Диаграммы - Неопределено, ТаблицаЗначений
// * Папки - Неопределено, ТаблицаЗначений
// * ВладельцыАналитики - Неопределено, ТаблицаЗначений
// * ОбъектыАналитики - Неопределено, ТаблицаЗначений
Функция ПараметрыСозданияСсылок() Экспорт
	
	Структура = Новый Структура();
	Структура.Вставить("ВыбранныеВладельцыПриемник", Неопределено);
	Структура.Вставить("ПанелиИсточник", Неопределено);
	Структура.Вставить("Панели", Неопределено);
	Структура.Вставить("Дашборды", Неопределено);
	Структура.Вставить("Диаграммы", Неопределено);
	Структура.Вставить("Папки", Неопределено);
	Структура.Вставить("ВладельцыАналитики", Неопределено);
	Структура.Вставить("ОбъектыАналитики", Неопределено);
	
	Возврат Структура;
	
КонецФункции

// Копирует панель из источника.
// 
// Параметры:
//  Параметры - см. Обработки.УправлениеПанелями1САналитики.ПараметрыКопированияПанелей
// 
// Возвращаемое значение:
//  см. Обработки.УправлениеПанелями1САналитики.ПараметрыОбновленияИзАналитики
Функция СкопироватьПанель(Параметры) Экспорт
	
	ИдентификаторОбъекта = Параметры.ИдентификаторОбъекта; 
	ВладелецИмяНовыхПанелей = Параметры.ВыбранныйВладелец;
	
	ИзФайла = Параметры.ИзФайла;
	ВладельцыАналитики = Параметры.ВладельцыАналитики;
	ВыбранныеВладельцыПриемник = Параметры.ВыбранныеВладельцыПриемник;
	ПанелиИсточник = Параметры.ПанелиИсточник;
	Панели = Параметры.Панели;
	ОбъектыАналитикиИсточник = Параметры.ОбъектыАналитикиИсточник;
	Папки = Параметры.Папки;
	
	ВыбранныйОбъект = ПанелиИсточник.Строки.Найти(ИдентификаторОбъекта, "Идентификатор", Истина);
	
	Если ВыбранныйОбъект.Тип = "folder" И ИзФайла Тогда
		ПереносыПоВладельцам = ВсеОбъектыКПереносу(Параметры, ВыбранныйОбъект, ВладелецИмяНовыхПанелей);
		ПеренестиОбъектыИзФайла(ПереносыПоВладельцам, ВладельцыАналитики, ОбъектыАналитикиИсточник, Папки);
	Иначе
		
		Если ИзФайла Тогда
			НайденнаяПанель = Панели.Найти(ВладелецИмяНовыхПанелей, "OwnerName");
			СоздатьИПодключитьКПанели(НайденнаяПанель, ВыбранныйОбъект, Параметры);
		КонецЕсли;
		
		Для Каждого Панель Из Панели Цикл
			Если ИзФайла Тогда
				Если ВыбранныеВладельцыПриемник.НайтиПоЗначению(Панель.OwnerName) = Неопределено
					Или Панель.OwnerName = ВладелецИмяНовыхПанелей Тогда
					Продолжить;
				КонецЕсли;
				
				ПодключитьКПанели(Панель, ВыбранныйОбъект, Параметры); 
			Иначе
				Если ВыбранныеВладельцыПриемник.НайтиПоЗначению(Панель.OwnerName) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				СоздатьИПодключитьКПанели(Панель, ВыбранныйОбъект, Параметры);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ЗагрузитьДанныеПанелей(Параметры);
	
КонецФункции

// Параметры копирования панелей.
// 
// 
// Возвращаемое значение:
//  Структура - Параметры копирования панелей:
// * ИдентификаторОбъекта - Строка
// * ВыбранныйВладелец - Строка
// * ИзФайла - Булево
// * ВыбранныеВладельцыПриемник - Неопределено, СписокЗначений
// * ПанелиИсточник - Неопределено, ТаблицаЗначений
// * Панели - Неопределено, ТаблицаЗначений
// * Дашборды - Неопределено, ТаблицаЗначений
// * Диаграммы - Неопределено, ТаблицаЗначений
// * Папки - Неопределено, ТаблицаЗначений
// * ВладельцыАналитики - Неопределено, ТаблицаЗначений
// * ОбъектыАналитики - Неопределено, ТаблицаЗначений
// * ДашбордыИсточник - Неопределено, ТаблицаЗначений
// * ДиаграммыИсточник - Неопределено, ТаблицаЗначений
// * ПапкиИсточник - Неопределено, ТаблицаЗначений
// * ОбъектыАналитикиИсточник - Неопределено, ТаблицаЗначений
Функция ПараметрыКопированияПанелей() Экспорт
	
	Структура = Новый Структура();
	
	Структура.Вставить("ИдентификаторОбъекта", "");
	Структура.Вставить("ВыбранныйВладелец", "");
	
	Структура.Вставить("ИзФайла", Ложь);
	Структура.Вставить("ВыбранныеВладельцыПриемник", Неопределено);
	Структура.Вставить("ПанелиИсточник", Неопределено);
	Структура.Вставить("Панели", Неопределено);
	Структура.Вставить("Дашборды", Неопределено);
	Структура.Вставить("Диаграммы", Неопределено);
	Структура.Вставить("Папки", Неопределено);
	Структура.Вставить("ВладельцыАналитики", Неопределено);
	Структура.Вставить("ОбъектыАналитики", Неопределено);
	Структура.Вставить("ДашбордыИсточник", Неопределено);
	Структура.Вставить("ДиаграммыИсточник", Неопределено);
	Структура.Вставить("ПапкиИсточник", Неопределено);
	Структура.Вставить("ОбъектыАналитикиИсточник", Неопределено);
	
	Возврат Структура;
	
КонецФункции

// удаляет панель из источника.
// 
// Параметры:
//  Параметры - см. Обработки.УправлениеПанелями1САналитики.ПараметрыУдаленияПанели
// 
// Возвращаемое значение:
//  см. Обработки.УправлениеПанелями1САналитики.ПараметрыУдаленияПанели
Функция УдалитьПанель(Параметры) Экспорт
	
	ИдентификаторСтроки = Параметры.ИдентификаторСтроки; 
	Панели = Параметры.Панели;
	ПанелиПриемник = Параметры.ПанелиПриемник;
	
	ВыбранныйОбъект = ПанелиПриемник.Строки.Найти(ИдентификаторСтроки, "ИдентификаторСтроки", Истина); //СтрокаДереваЗначений
	Панель = НайтиПоИдентификатору(Панели, ВыбранныйОбъект.ВладелецПанели, "Owner");
	
	СтрокиКОбработке = СтрокиДереваКОбработке(ПанелиПриемник, ИдентификаторСтроки, "ИдентификаторСтроки");
	
	Для Каждого Объект Из СтрокиКОбработке Цикл
		
		УдалитьИзПанели(Панель, Объект, Параметры);
		
	КонецЦикла;
	
	Возврат ЗагрузитьДанныеПанелей(Параметры);
	
КонецФункции

// Параметры создания ссылки.
// 
// Возвращаемое значение:
//  Структура - Параметры создания ссылки:
// * ВыбранныеВладельцыПриемник - Неопределено, СписокЗначений
// * ИдентификаторСтроки - Строка
// * ПанелиИсточник - Неопределено, ТаблицаЗначений
// * Панели - Неопределено, ТаблицаЗначений
// * Дашборды - Неопределено, ТаблицаЗначений
// * Диаграммы - Неопределено, ТаблицаЗначений
// * Папки - Неопределено, ТаблицаЗначений
// * ВладельцыАналитики - Неопределено, ТаблицаЗначений
// * ОбъектыАналитики - Неопределено, ТаблицаЗначений
Функция ПараметрыУдаленияПанели() Экспорт
	
	Структура = Новый Структура();
	Структура.Вставить("ВыбранныеВладельцыПриемник", Неопределено);
	Структура.Вставить("ИдентификаторСтроки", "");
	Структура.Вставить("ПанелиИсточник", Неопределено);
	Структура.Вставить("ПанелиПриемник", Неопределено);
	Структура.Вставить("Панели", Неопределено);
	Структура.Вставить("Дашборды", Неопределено);
	Структура.Вставить("Диаграммы", Неопределено);
	Структура.Вставить("Папки", Неопределено);
	Структура.Вставить("ВладельцыАналитики", Неопределено);
	Структура.Вставить("ОбъектыАналитики", Неопределено);
	
	Возврат Структура;
	
КонецФункции

// Настройки панелей JSON.
// 
// Параметры:
//  ВладельцыАналитики - СписокЗначений из Строка - Владельцы аналитики
//  Панели - ТаблицаЗначений - Панели
//  Папки - ТаблицаЗначений - Папки
//  Диаграммы - ТаблицаЗначений - Диаграммы
//  Дашборды - ТаблицаЗначений - Дашборды
//  ОбъектыАналитики - ТаблицаЗначений - Объекты аналитики
// 
// Возвращаемое значение:
//  Строка - Настройки панелей JSON
Функция НастройкиПанелейJSON(ВладельцыАналитики, Панели, Папки, Диаграммы, Дашборды, ОбъектыАналитики) Экспорт
	
	МассивНастроек = Новый Массив();
	
	Для Каждого Владелец Из ВладельцыАналитики Цикл
		ПоляПользователя = ПоляВладельца(Владелец);
		МассивНастроек.Добавить(ПоляПользователя);
	КонецЦикла;
	
	Для Каждого Панель Из Панели Цикл
		ПоляРабочегоСтола = ПоляПанели(Панель);
		МассивНастроек.Добавить(ПоляРабочегоСтола);
	КонецЦикла;
	
	Для Каждого Папка Из Папки Цикл
		ПоляПапки = ПоляПапки(Папка);
		МассивНастроек.Добавить(ПоляПапки);
	КонецЦикла;
	
	Для Каждого Диаграмма Из Диаграммы Цикл
		ПоляДиаграммы = ПоляДиаграммы(Диаграмма);
		МассивНастроек.Добавить(ПоляДиаграммы);
	КонецЦикла;
	
	Для Каждого Дашборд Из Дашборды Цикл
		ПоляДашборда = ПоляДашборда(Дашборд);
		МассивНастроек.Добавить(ПоляДашборда);
	КонецЦикла;
	
	Для Каждого Элемент Из ОбъектыАналитики Цикл
		ПоляОбъектаАналитики = ПоляОбъектаАналитики(Элемент);
		МассивНастроек.Добавить(ПоляОбъектаАналитики);
	КонецЦикла;
	
	ДополнительныеИсточникиJSON = ЗначениеВJSON(МассивНастроек);
	
	Возврат ДополнительныеИсточникиJSON;
	
КонецФункции

// Настройки выбранных владельцев JSON.
// 
// Параметры:
//  Панели - ТаблицаЗначений - Панели
//  ВыбранныеВладельцыПриемник - СписокЗначений из Строка - Выбранные владельцы приемник
//  ВладельцыАналитики - ТаблицаЗначений - Владельцы аналитики
//  Папки - ТаблицаЗначений - Папки
//  Диаграммы - ТаблицаЗначений - Диаграммы
//  Дашборды - ТаблицаЗначений - Дашборды
//  ОбъектыАналитики - ТаблицаЗначений - Объекты аналитики
// 
// Возвращаемое значение:
//  Строка - Настройки выбранных владельцев JSON
Функция НастройкиВыбранныхВладельцевJSON(Панели, ВыбранныеВладельцыПриемник, ВладельцыАналитики, Папки, Диаграммы, Дашборды, ОбъектыАналитики) Экспорт
	
	МассивНастроек = Новый Массив();
	
	Для Каждого Панель Из Панели Цикл
		
		Если ВыбранныеВладельцыПриемник.НайтиПоЗначению(Панель.OwnerName) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Владелец = НайтиПоИдентификатору(ВладельцыАналитики, Панель.Owner);
		ПоляВладельца = ПоляВладельца(Владелец);
		МассивНастроек.Добавить(ПоляВладельца);
		
		ПоляРабочегоСтола = ПоляПанели(Панель);
		МассивНастроек.Добавить(ПоляРабочегоСтола);
		
		Для Каждого Элемент Из Панель.ИдентификаторыПредставленныхОбъектов Цикл
			ИдентификаторОбъекта = Элемент.Значение;
			
			Диаграмма = НайтиПоИдентификатору(Диаграммы, ИдентификаторОбъекта);
			Если Диаграмма <> Неопределено Тогда
				ПоляДиаграммы = ПоляДиаграммы(Диаграмма);
				МассивНастроек.Добавить(ПоляДиаграммы);
				Продолжить;
			КонецЕсли;
			
			Дашборд = НайтиПоИдентификатору(Дашборды, ИдентификаторОбъекта);
			Если Дашборд <> Неопределено Тогда
				ПоляДашборда = ПоляДашборда(Дашборд);
				МассивНастроек.Добавить(ПоляДашборда);
				Продолжить;
			КонецЕсли;
			
			Папка = НайтиПоИдентификатору(Папки, ИдентификаторОбъекта);
			Если Папка <> Неопределено Тогда
				ПоляПапки = ПоляПапки(Папка);
				МассивНастроек.Добавить(ПоляПапки);
			КонецЕсли
		КонецЦикла;
		
		Для Каждого Элемент Из ОбъектыАналитики Цикл
			Если Элемент.Owner = Панель.Owner Тогда
				ПоляОбъектаАналитики = ПоляОбъектаАналитики(Элемент);
				МассивНастроек.Добавить(ПоляОбъектаАналитики);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;

	НастройкиРабочегоСтолаJSON = ЗначениеВJSON(МассивНастроек);
	
	Возврат НастройкиРабочегоСтолаJSON; 
	
КонецФункции

// Родительская папка может быть перенесена.
// 
// Параметры:
//  СтрокаОбъекта - Произвольный - Строка объекта
//  Переносы - Соответствие из КлючИЗначение:
//   * Ключ - Строка - вариант переноса.
//   * Значение - Булево - доступность переноса.
// 
// Возвращаемое значение:
//  Булево - Родительская папка может быть перенесена
Функция РодительскаяПапкаМожетБытьПеренесена(СтрокаОбъекта, Переносы) Экспорт
	
	Если СтрокаОбъекта.Тип = "folder" Тогда
		Перенос = Переносы.Получить(СтрокаОбъекта.Идентификатор);
	ИначеЕсли СтрокаОбъекта.Уровень() = 1 Тогда
		Возврат Истина;
	Иначе
		СтрокаОбъектаРодитель = СтрокаОбъекта.Родитель; //СтрокаДереваЗначений
		Перенос = Переносы.Получить(СтрокаОбъектаРодитель.Идентификатор);
	КонецЕсли;
	
	Если Перенос = Неопределено Тогда
		Возврат Истина; // subfolder movement
	КонецЕсли;
	
	Если Не Перенос.ВозможенКакНовый И Не Перенос.ВозможенСЗамещением Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрокаОбъекта.Уровень() <> 1 Тогда
		Возврат РодительскаяПапкаМожетБытьПеренесена(СтрокаОбъекта.Родитель, Переносы);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Найти строку по идентификатору объекта в таблице значений.
// 
// Параметры:
//  ТаблицаПоиска - Неопределено - Таблица поиска
//  Идентификатор - Строка, Произвольный - Идентификатор
// 
// Возвращаемое значение:
//  Неопределено - Найти по идентификатору
Функция НайтиПоИдентификатору(ТаблицаПоиска, Идентификатор, ПолеПоиска = "Id") Экспорт
	
	РезультатПоиска = ТаблицаПоиска.НайтиСтроки(Новый Структура(ПолеПоиска, Идентификатор));
	Если РезультатПоиска.Количество() Тогда
		Возврат РезультатПоиска[0];
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Заполнить массив строк дерева.
// 
// Параметры:
//  Дерево - ДеревоЗначений - 
//  ИдентификаторСтроки - Строка - Идентификатор строки
//  ПолеПоиска - Строка - Имя поля поиска строки
// 
// Возвращаемое значение:
//  Массив из строка - Строки дерева к обработке
Функция СтрокиДереваКОбработке(Дерево, ИдентификаторСтроки = Неопределено, ПолеПоиска = "Идентификатор") Экспорт

	ВыбранныеСтроки = Новый Массив;
	Если ИдентификаторСтроки = Неопределено Тогда
		Для Каждого Строка Из Дерево.Строки Цикл
			ВыбранныеСтроки.Добавить(Строка);
		КонецЦикла;
	Иначе
		СтрокаДерева = Дерево.Строки.Найти(ИдентификаторСтроки, ПолеПоиска, Истина);
		ВыбранныеСтроки.Добавить(СтрокаДерева);
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	
	Для Каждого ВыбраннаяСтрока Из ВыбранныеСтроки Цикл
		ЗаполнитьМассивСтрокДерева(ВыбраннаяСтрока, МассивСтрок);
	КонецЦикла;
	
	Возврат МассивСтрок;
	
КонецФункции

// Заполнить массив строк дерева.
// 
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений
//  МассивСтрок - Массив из СтрокаДереваЗначений- Массив строк
Процедура ЗаполнитьМассивСтрокДерева(СтрокаДерева, МассивСтрок) Экспорт
	
	Если СтрокаДерева.Идентификатор <> "" Тогда
		МассивСтрок.Добавить(СтрокаДерева);
	КонецЕсли;
	
	Для Каждого Строка Из СтрокаДерева.Строки Цикл
		Если Строка.Идентификатор <> "" Тогда
			МассивСтрок.Добавить(Строка);
		КонецЕсли;
		
		Для Каждого Подстрока Из Строка.Строки Цикл
			ЗаполнитьМассивСтрокДерева(Подстрока, МассивСтрок);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Переносы.
// 
// Параметры:
//  ПанельПриемник - ДеревоЗначений - Панель приемник
//  СтрокиКПереносу - Массив из СтрокаДереваЗначений - Строки к переносу
//  ИзФайла - Булево - Из файла
//  Диаграммы - ТаблицаЗначений - Диаграммы
//  Дашборды - ТаблицаЗначений - Дашборды
//  Папки - ТаблицаЗначений - Папки
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//   * Ключ - Строка - вариант переноса.
//   * Значение - Булево - доступность переноса.
Функция Переносы(ПанельПриемник, СтрокиКПереносу, ИзФайла, Диаграммы, Дашборды, Папки) Экспорт
	
	Переносы = Новый Соответствие();
	Для Каждого ОбъектИсточник Из СтрокиКПереносу Цикл
	
		Если ОбъектИсточник = Неопределено 
			Или ОбъектИсточник.Тип <> "chart" И ОбъектИсточник.Тип <> "dashboard" И ОбъектИсточник.Тип <> "folder" Тогда
			Продолжить;
		КонецЕсли;
		
		Результат = ДоступностьПереноса(ПанельПриемник, ОбъектИсточник, ИзФайла, Диаграммы, Дашборды, Папки);
		Переносы.Вставить(ОбъектИсточник, Результат);
			
	КонецЦикла;
	
	Возврат Переносы;
	
КонецФункции

// Панели из схемы.
// 
// Параметры:
//  Идентификатор - Неопределено - Идентификатор
// 
// Возвращаемое значение:
//  Массив из Строка, Произвольный - Панели из схемы
Функция ПанелиИзСхемы(Идентификатор = Неопределено) Экспорт
	
	Возврат ОбъектыАналитики("desktop", Идентификатор);
	
КонецФункции 

// Диаграммы из схемы.
// 
// Параметры:
//  Идентификатор - Неопределено - Идентификатор
// 
// Возвращаемое значение:
//  Массив из Строка, Произвольный - Диаграммы из схемы
Функция ДиаграммыИзСхемы(Идентификатор = Неопределено) Экспорт
	
	Возврат ОбъектыАналитики("chart", Идентификатор);
	
КонецФункции

// Дашборды из схемы.
// 
// Параметры:
//  Идентификатор - Неопределено - Идентификатор
// 
// Возвращаемое значение:
//  Массив из Строка, Произвольный - Дашборды из схемы
Функция ДашбордыИзСхемы(Идентификатор = Неопределено) Экспорт 
	
	Возврат ОбъектыАналитики("dashboard", Идентификатор);
	
КонецФункции

// Владельцы из схемы.
// 
// Параметры:
//  Идентификатор - Неопределено - Идентификатор
// 
// Возвращаемое значение:
//  Массив из Строка, Произвольный - Владельцы из схемы
Функция ВладельцыИзСхемы(Идентификатор = Неопределено) Экспорт 
	
	Возврат ОбъектыАналитики("user", Идентификатор);
	
КонецФункции

// Папки из схемы.
// 
// Параметры:
//  Идентификатор - Неопределено - Идентификатор
// 
// Возвращаемое значение:
//  Массив из Строка, Произвольный - Папки из схемы
Функция ПапкиИзСхемы(Идентификатор = Неопределено) Экспорт
	
	Возврат ОбъектыАналитики("folder", Идентификатор);
	
КонецФункции 

// Объекты аналитики из схемы.
// 
// Возвращаемое значение:
//  Массив из Строка - Объекты аналитики из схемы
Функция ОбъектыАналитикиИзСхемы() Экспорт
	
	ОбъектыАналитикиМассив = Новый Массив();
	
	ПользовательскиеПоля = ОбъектыАналитики("user-field");
	Для Каждого Элемент Из ПользовательскиеПоля Цикл
		ОбъектыАналитикиМассив.Добавить(Элемент);
	КонецЦикла;
	
	ЦветовыеСхемы = ОбъектыАналитики("colorScheme");
	Для Каждого Элемент Из ЦветовыеСхемы Цикл
		ОбъектыАналитикиМассив.Добавить(Элемент);
	КонецЦикла;
	
	МаркерныеКарты = ОбъектыАналитики("markerMap");
	Для Каждого Элемент Из МаркерныеКарты Цикл
		ОбъектыАналитикиМассив.Добавить(Элемент);
	КонецЦикла;
	
	КартыОбластей = ОбъектыАналитики("areasMap");
	Для Каждого Элемент Из КартыОбластей Цикл
		ОбъектыАналитикиМассив.Добавить(Элемент);
	КонецЦикла;
	
	МаппингДляКартОбластей = ОбъектыАналитики("areasMapping");
	Для Каждого Элемент Из МаппингДляКартОбластей Цикл
		ОбъектыАналитикиМассив.Добавить(Элемент);
	КонецЦикла;
	
	ТайлСерверы = ОбъектыАналитики("tileServer");
	Для Каждого Элемент Из ТайлСерверы Цикл
		ОбъектыАналитикиМассив.Добавить(Элемент);
	КонецЦикла; 
	
	Выражения = ОбъектыАналитики("globalMacro");
	Для Каждого Элемент Из Выражения Цикл
		ОбъектыАналитикиМассив.Добавить(Элемент);
	КонецЦикла;
	
	Возврат ОбъектыАналитикиМассив;
	
КонецФункции

// Дополнительные источники из схемы.
// 
// Параметры:
//  Идентификатор - Неопределено - Идентификатор
// 
// Возвращаемое значение:
//  Массив из Строка, Произвольный - Дополнительные источники из схемы
Функция ДополнительныеИсточникиИзСхемы(Идентификатор = Неопределено) Экспорт
	
	Возврат ОбъектыАналитики("additional-datasource", Идентификатор);
	
КонецФункции

// Версии форматов сервера.
// 
// Параметры:
//  АдресСервера - Строка - Адрес сервера
// 
// Возвращаемое значение:
//  Соответствие  из КлючИЗначение:
//   * Ключ - Строка - имя свойства версии.
//   * Значение - Число - отклонение от ожидаемой версии
Функция ВерсииФорматовСервера(АдресСервера) Экспорт
	
	Версии = Новый Соответствие();
	Версии.Вставить("additional-datasource", -1);
	Версии.Вставить("undo", -1);
	Версии.Вставить("desktop", -1);
	Версии.Вставить("folder", -1);
	Версии.Вставить("root", -1);
	Версии.Вставить("userField", -1);
	Версии.Вставить("chart", -1);
	Версии.Вставить("user", -1);
	Версии.Вставить("dataSource", -1);
	Версии.Вставить("delete", -1);
	Версии.Вставить("dashboard", -1);
	
	СтруктураURI = СтруктураURI(АдресСервера);
	
	Если ПустаяСтрока(СтруктураURI.АдресРесурса) Или ПустаяСтрока(СтруктураURI.Хост) Тогда
		Возврат Версии;
	КонецЕсли;
	
	АдресРесурса = СтруктураURI.АдресРесурса;
	Если Не СтрЗаканчиваетсяНа(АдресРесурса, "/") Тогда
		АдресРесурса = АдресРесурса + "/";
	КонецЕсли;
	АдресРесурса = АдресРесурса + "api/ans/version/objects";
	
	ИмяСобытия = НСтр("ru = 'Управление системой аналитики'");
	
	Попытка
		Прокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
		
		Если СтруктураURI.Схема = "https" Тогда
			ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
			HTTPСоединение = Новый HTTPСоединение(СтруктураURI.Хост, СтруктураURI.Порт,,, Прокси, 60, ЗащищенноеСоединение);
		Иначе
			HTTPСоединение = Новый HTTPСоединение(СтруктураURI.Хост, СтруктураURI.Порт,,, Прокси, 60);
		КонецЕсли;
		//ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
		//HTTPСоединение = Новый HTTPСоединение(СтруктураURI.Хост, СтруктураURI.Порт,,, Прокси, 60 , ЗащищенноеСоединение);
		
		HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
		HTTPОтвет =  HTTPСоединение.Получить(HTTPЗапрос);
	Исключение
		ЗаписьЖурналаРегистрации(ИмяСобытия,
			УровеньЖурналаРегистрации.Ошибка, , ,
			ИнформацияОбОшибке());
		
		Возврат Версии;
	КонецПопытки;
	
	Если HTTPОтвет.КодСостояния >= 400 And HTTPОтвет.КодСостояния < 500 Тогда
		Для Каждого Версия Из Версии Цикл
			Версия.Значение = Версия.Значение + 1;
		КонецЦикла;
		Версии.Вставить("additional-datasource", 1);
		
		Возврат Версии; // старая неподдерживаемая версия
	ИначеЕсли HTTPОтвет.КодСостояния <> 200 Тогда
		ЗаписьЖурналаРегистрации(ИмяСобытия,
			УровеньЖурналаРегистрации.Ошибка, , ,
			СтрШаблон("HTTP status code: %1", HTTPОтвет.КодСостояния));
		
		Возврат Версии;
	КонецЕсли;
	
	Попытка
		ОтветСтрока = HTTPОтвет.ПолучитьТелоКакСтроку();
		ОтветОбъект = JSONВЗначение(ОтветСтрока);
	Исключение
		Возврат Версии;
	КонецПопытки;
	
	Если ТипЗнч(ОтветОбъект) = Тип("Соответствие") Тогда
		Возврат ОтветОбъект;
	Иначе
		Для Каждого Версия Из Версии Цикл
			Версия.Значение = Версия.Значение + 1;
		КонецЦикла;
		Версии.Вставить("additional-datasource", 1);
		Возврат Версии; // старая неподдерживаемая версия
	КонецЕсли; 
	
КонецФункции

// Получает объекты аналитики.
// 
// Параметры:
//  ТипОбъекта - Строка - Тип объекта
//  Идентификатор - Неопределено - Идентификатор
// 
// Возвращаемое значение:
//  Массив из Строка, Произвольный - Объекты аналитики
Функция ОбъектыАналитики(ТипОбъекта, Идентификатор = Неопределено) Экспорт
	
	Соединение = СистемаАналитики.ПолучитьСоединение();
	Схема = Соединение.ПолучитьСхему("objects", ?(Идентификатор = Неопределено, Новый Структура("type", ТипОбъекта), Идентификатор));
	
	МассивОбъектов = JSONВЗначение(Схема.ПолучитьКакСтроку());
	
	Возврат МассивОбъектов;
	
КонецФункции

// Записывает схему в аналитику.
// 
// Параметры:
//  Схема - Строка - Схема
Процедура ЗаписатьСхему(Схема) Экспорт 
	
	Соединение = СистемаАналитики.ПолучитьСоединение();
	Соединение.ЗаписатьСхему("objects", Новый СхемаСистемыАналитики(Схема));
	
КонецПроцедуры

// Удаляет схему по идентификатору из аналитики.
// 
// Параметры:
//  Идентификатор - Строка - Идентификатор
Процедура УдалитьСхему(Идентификатор) Экспорт
	
	Соединение = СистемаАналитики.ПолучитьСоединение();
	Соединение.УдалитьСхему("objects", Идентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Структура URI.
// 
// Параметры:
//  Адрес - Строка - Адрес
// 
// Возвращаемое значение:
//  Структура - Структура URI:
// * Схема - Строка - 
// * Хост - Строка - 
// * Порт - Число, Неопределено - 
// * АдресРесурса - Строка - 
Функция СтруктураURI(Знач Адрес) Экспорт
	
	Адрес = СокрЛП(Адрес);
	
	Позиция = Найти(Адрес, "://");
	Схема = "";
	Если Позиция > 0 Тогда
		Схема = НРег(Лев(Адрес, Позиция - 1));
		Адрес = Сред(Адрес, Позиция + 3);
	КонецЕсли;
	
	АдресРесурса = "";
	ИмяСервера = Адрес;
	Позиция = Найти(Адрес, "/");
	Если Позиция > 0 Тогда
		АдресРесурса = Сред(Адрес, Позиция + 1);
		ИмяСервера = Лев(Адрес, Позиция - 1);
	КонецЕсли;
	
	Хост = ИмяСервера;
	Порт = "";
	Позиция = Найти(ИмяСервера, ":");
	Если Позиция > 0 Тогда
		Хост = Лев(ИмяСервера, Позиция - 1);
		Порт = Сред(ИмяСервера, Позиция + 1);
	КонецЕсли;
	
	Результат = Новый Структура();
	Результат.Вставить("Схема", Схема);
	Результат.Вставить("Хост", Хост);
	Результат.Вставить("Порт", ?(Порт <> "", Число(Порт), Неопределено));
	Результат.Вставить("АдресРесурса", АдресРесурса);
	
	Возврат Результат;
	
КонецФункции

// Значение ВJSON.
// 
// Параметры:
//  Значение - Произвольный - Значение
// 
// Возвращаемое значение:
//  Строка - Значение ВJSON
Функция ЗначениеВJSON(Значение) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
	ЗаписатьJSON(ЗаписьJSON, Значение);
	
	Возврат ЗаписьJSON.Закрыть(); 
	
КонецФункции

// JSONВЗначение.
// 
// Параметры:
//  СтрокаJSON - Неопределено, Произвольный - Строка JSON
// 
// Возвращаемое значение:
//  Массив из Строка, Произвольный - JSONВЗначение
Функция JSONВЗначение(СтрокаJSON) Экспорт
	
	Если Не ЗначениеЗаполнено(СтрокаJSON) Или СтрокаJSON = "[]" Тогда
		Возврат Новый Массив();
	КонецЕсли;
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	
	Возврат ПрочитатьJSON(ЧтениеJSON, Истина);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьИдентификаторыПредставленныхОбъектов(ПапкиИзСхемы, ИдентификаторТекущейПапки, ИдентификаторыПредставленныхОбъектов)
	
	Для Каждого Папка Из ПапкиИзСхемы Цикл
		Если Папка.Получить("id") = ИдентификаторТекущейПапки Тогда
			ИдентификаторыПредставленныхОбъектов.Вставить(ИдентификаторТекущейПапки, Истина);
			
			ПапкаData = Папка.Получить("data");
			ПапкаDataСоответствие = JSONВЗначение(ПапкаData);
			
			ПапкаFileIds = ПапкаDataСоответствие.Получить("fileIds");
			Для Каждого Элемент Из ПапкаFileIds Цикл
				ИдентификаторыПредставленныхОбъектов.Вставить(Элемент, Истина);
			КонецЦикла;
			
			ПапкаFolderIds = ПапкаDataСоответствие.Получить("folderIds");
			Для Каждого Элемент Из ПапкаFolderIds Цикл
				Если ИдентификаторыПредставленныхОбъектов.Получить(Элемент) = Неопределено Тогда // иначе бесконечный цикл
					ЗаполнитьИдентификаторыПредставленныхОбъектов(ПапкиИзСхемы, Элемент, ИдентификаторыПредставленныхОбъектов);
				КонецЕсли;
			КонецЦикла;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьОбъектыАналитики(ТаблицаОбъектов, ОбъектыАналитикиИзСхемы = Неопределено)
	
	ТаблицаОбъектов.Очистить();
	
	ПрочиеПоля = Новый ТаблицаЗначений;
	ПрочиеПоля.Колонки.Добавить("Ключ", Новый ОписаниеТипов("Строка"));
	ПрочиеПоля.Колонки.Добавить("Значение");
	
	Если ОбъектыАналитикиИзСхемы = Неопределено Тогда
		ОбъектыАналитикиИзСхемы = ОбъектыАналитикиИзСхемы();
	КонецЕсли;
	
	Для Каждого ОбъектАналитики Из ОбъектыАналитикиИзСхемы Цикл
		Если ОбъектАналитики.Получить("originalId") <> Неопределено Тогда // Черновик
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаОбъектов.Добавить();
		
		Для Каждого Поле Из ОбъектАналитики Цикл
			Если Поле.Ключ = "id" Тогда
				НоваяСтрока.Id = Поле.Значение;
			ИначеЕсли Поле.Ключ = "name" Тогда
				НоваяСтрока.Name = Поле.Значение;
			ИначеЕсли Поле.Ключ = "owner" Тогда
				НоваяСтрока.Owner = Поле.Значение;
			ИначеЕсли Поле.Ключ = "type" Тогда
				НоваяСтрока.Type = Поле.Значение;
			ИначеЕсли Поле.Ключ = "ownerName" Тогда
				НоваяСтрока.OwnerName = Поле.Значение;
			ИначеЕсли Поле.Ключ = "updated" Тогда
				НоваяСтрока.Updated = Поле.Значение;
			ИначеЕсли Поле.Ключ = "chartType" Тогда
				НоваяСтрока.ChartType = Поле.Значение;
			ИначеЕсли Поле.Ключ = "data" Тогда
				НоваяСтрока.Data = Поле.Значение;
			ИначеЕсли Поле.Ключ = "version" Тогда
				НоваяСтрока.Version = Поле.Значение;
			ИначеЕсли Поле.Ключ = "links" Тогда
				НоваяСтрока.Links.ЗагрузитьЗначения(Поле.Значение);
			Иначе
				НоваяСтрока.ПрочиеПоля = ПрочиеПоля;
				ТаблицаПрочиеПоля = НоваяСтрока.ПрочиеПоля; //ТаблицаЗначений
				ПрочееПоле = ТаблицаПрочиеПоля.Добавить();
				ПрочееПоле.Ключ = Поле.Ключ;
				Если ТипЗнч(Поле.Значение) = Тип("Массив") Тогда
					СписокЗначений = Новый СписокЗначений();
					СписокЗначений.ЗагрузитьЗначения(Поле.Значение);
					ПрочееПоле.Значение = СписокЗначений;
				Иначе
					ПрочееПоле.Значение = Поле.Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьВладельцев(ТаблицаВладельцев, Владельцы = Неопределено)
	
	ТаблицаВладельцев.Очистить();
	
	ПрочиеПоля = Новый ТаблицаЗначений;
	ПрочиеПоля.Колонки.Добавить("Ключ", Новый ОписаниеТипов("Строка"));
	ПрочиеПоля.Колонки.Добавить("Значение");
	
	Если Владельцы = Неопределено Тогда
		Владельцы = ВладельцыИзСхемы();
	КонецЕсли;
	
	Для Каждого Владелец Из Владельцы Цикл
		Если Владелец.Получить("id") = Неопределено
			Или Владелец.Получить("owner") = Неопределено
			Или Владелец.Получить("type") = Неопределено
			Или Владелец.Получить("ownerName") = Неопределено
			Или Владелец.Получить("data") = Неопределено Тогда
			
			ВызватьИсключение НСтр("ru = 'Версия схемы данных не поддерживается обработкой'")
		КонецЕсли;
		
		НоваяСтрока = ТаблицаВладельцев.Добавить();
		
		Для Каждого Поле Из Владелец Цикл
			Если Поле.Ключ = "id" Тогда
				НоваяСтрока.Id = Поле.Значение;
			ИначеЕсли Поле.Ключ = "owner" Тогда
				НоваяСтрока.Owner = Поле.Значение;
			ИначеЕсли Поле.Ключ = "type" Тогда
				НоваяСтрока.Type = Поле.Значение;
			ИначеЕсли Поле.Ключ = "ownerName" Тогда
				НоваяСтрока.OwnerName = Поле.Значение;
			ИначеЕсли Поле.Ключ = "updated" Тогда
				НоваяСтрока.Updated = Поле.Значение;
			ИначеЕсли Поле.Ключ = "data" Тогда
				НоваяСтрока.Data = Поле.Значение;
			ИначеЕсли Поле.Ключ = "version" Тогда
				НоваяСтрока.Version = Поле.Значение;
			ИначеЕсли Поле.Ключ = "links" Тогда
				НоваяСтрока.Links.ЗагрузитьЗначения(Поле.Значение);
			Иначе
				НоваяСтрока.ПрочиеПоля = ПрочиеПоля;
				ТаблицаПрочиеПоля = НоваяСтрока.ПрочиеПоля; //ТаблицаЗначений
				ПрочееПоле = ТаблицаПрочиеПоля.Добавить();
				ПрочееПоле.Ключ = Поле.Ключ;
				Если ТипЗнч(Поле.Значение) = Тип("Массив") Тогда
					СписокЗначений = Новый СписокЗначений();
					СписокЗначений.ЗагрузитьЗначения(Поле.Значение);
					ПрочееПоле.Значение = СписокЗначений;
				Иначе
					ПрочееПоле.Значение = Поле.Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьПанели(ТаблицаПанелей, ПанелиИзСхемы = Неопределено)
	
	ТаблицаПанелей.Очистить();
	
	ПрочиеПоля = Новый ТаблицаЗначений;
	ПрочиеПоля.Колонки.Добавить("Ключ", Новый ОписаниеТипов("Строка"));
	ПрочиеПоля.Колонки.Добавить("Значение");
	
	Если ПанелиИзСхемы = Неопределено Тогда
		ПанелиИзСхемы = ПанелиИзСхемы();
	КонецЕсли;

	Для Каждого ПолученнаяПанели Из ПанелиИзСхемы Цикл
		Если ПолученнаяПанели.Получить("id") = Неопределено
			Или ПолученнаяПанели.Получить("owner") = Неопределено
			Или ПолученнаяПанели.Получить("type") = Неопределено
			Или ПолученнаяПанели.Получить("ownerName") = Неопределено
			Или ПолученнаяПанели.Получить("data") = Неопределено Тогда
			
			ВызватьИсключение НСтр("ru = 'Версия схемы данных не поддерживается обработкой'")
		КонецЕсли;
		
		НоваяСтрока = ТаблицаПанелей.Добавить();
		
		Для Каждого Поле Из ПолученнаяПанели Цикл
			Если Поле.Ключ = "id" Тогда
				НоваяСтрока.Id = Поле.Значение;
			ИначеЕсли Поле.Ключ = "owner" Тогда
				НоваяСтрока.Owner = Поле.Значение;
			ИначеЕсли Поле.Ключ = "type" Тогда
				НоваяСтрока.Type = Поле.Значение;
			ИначеЕсли Поле.Ключ = "ownerName" Тогда
				НоваяСтрока.OwnerName = Поле.Значение;
			ИначеЕсли Поле.Ключ = "data" Тогда
				НоваяСтрока.Data = Поле.Значение;
			ИначеЕсли Поле.Ключ = "version" Тогда
				НоваяСтрока.Version = Поле.Значение;
			ИначеЕсли Поле.Ключ = "links" Тогда
				НоваяСтрока.Links.ЗагрузитьЗначения(Поле.Значение);
			Иначе
				НоваяСтрока.ПрочиеПоля = ПрочиеПоля;
				ТаблицаПрочиеПоля = НоваяСтрока.ПрочиеПоля; //ТаблицаЗначений
				ПрочееПоле = ТаблицаПрочиеПоля.Добавить();
				ПрочееПоле.Ключ = Поле.Ключ;
				Если ТипЗнч(Поле.Значение) = Тип("Массив") Тогда
					СписокЗначений = Новый СписокЗначений();
					СписокЗначений.ЗагрузитьЗначения(Поле.Значение);
					ПрочееПоле.Значение = СписокЗначений;
				Иначе
					ПрочееПоле.Значение = Поле.Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
			
		РабочийСтол_DataMap = JSONВЗначение(НоваяСтрока.Data);
		
		Если РабочийСтол_DataMap.Получить("rootFolderId") = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'Версия схемы данных не поддерживается обработкой'");
		КонецЕсли;
		
		НоваяСтрока.Data_RootFolderId = РабочийСтол_DataMap.Получить("rootFolderId");
	КонецЦикла;
	
	ТаблицаПанелей.Сортировать("OwnerName");
	
КонецПроцедуры

Процедура ЗагрузитьПапки(ТаблицаПапок, ИдентификаторыПредставленныхОбъектов = Неопределено, ПапкиИзСхемы = Неопределено)

	ТаблицаПапок.Очистить();
	
	ПрочиеПоля = Новый ТаблицаЗначений;
	ПрочиеПоля.Колонки.Добавить("Ключ", Новый ОписаниеТипов("Строка"));
	ПрочиеПоля.Колонки.Добавить("Значение");
	
	Если ПапкиИзСхемы = Неопределено Тогда
		ПапкиИзСхемы = ПапкиИзСхемы();
	КонецЕсли;
	
	Для Каждого Папка Из ПапкиИзСхемы Цикл
		Если Папка.Получить("id") = "COMMON_FOLDER_ID" Тогда
			Продолжить;
		КонецЕсли;
		
		Если Папка.Получить("id") = Неопределено
			Или Папка.Получить("name") = Неопределено
			Или Папка.Получить("owner") = Неопределено
			Или Папка.Получить("type") = Неопределено
			Или Папка.Получить("ownerName") = Неопределено
			Или Папка.Получить("updated") = Неопределено
			Или Папка.Получить("data") = Неопределено Тогда
			
			ВызватьИсключение НСтр("ru = 'Версия схемы данных не поддерживается обработкой'");
		КонецЕсли;
		
		Если ИдентификаторыПредставленныхОбъектов <> Неопределено 
				И ИдентификаторыПредставленныхОбъектов.Получить(Папка.Получить("id")) = Неопределено Тогда
			// исключение удаленных объектов
			Продолжить;
		КонецЕсли; 
		
		НоваяСтрока = ТаблицаПапок.Добавить();
		
		Для Каждого Поле Из Папка Цикл
			Если Поле.Ключ = "id" Тогда
				НоваяСтрока.Id = Поле.Значение;
			ИначеЕсли Поле.Ключ = "name" Тогда
				НоваяСтрока.Name = Поле.Значение;
			ИначеЕсли Поле.Ключ = "owner" Тогда
				НоваяСтрока.Owner = Поле.Значение;
			ИначеЕсли Поле.Ключ = "type" Тогда
				НоваяСтрока.Type = Поле.Значение;
			ИначеЕсли Поле.Ключ = "ownerName" Тогда
				НоваяСтрока.OwnerName = Поле.Значение;
			ИначеЕсли Поле.Ключ = "updated" Тогда
				НоваяСтрока.Updated = Поле.Значение;
			ИначеЕсли Поле.Ключ = "data" Тогда
				НоваяСтрока.Data = Поле.Значение;
			ИначеЕсли Поле.Ключ = "version" Тогда
				НоваяСтрока.Version = Поле.Значение;
			ИначеЕсли Поле.Ключ = "links" Тогда
				НоваяСтрока.Links.ЗагрузитьЗначения(Поле.Значение);
			Иначе
				НоваяСтрока.ПрочиеПоля = ПрочиеПоля;
				ТаблицаПрочиеПоля = НоваяСтрока.ПрочиеПоля; //ТаблицаЗначений
				ПрочееПоле = ТаблицаПрочиеПоля.Добавить();
				ПрочееПоле.Ключ = Поле.Ключ;
				Если ТипЗнч(Поле.Значение) = Тип("Массив") Тогда
					СписокЗначений = Новый СписокЗначений();
					СписокЗначений.ЗагрузитьЗначения(Поле.Значение);
					ПрочееПоле.Значение = СписокЗначений;
				Иначе
					ПрочееПоле.Значение = Поле.Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Папка_DataMap = JSONВЗначение(НоваяСтрока.Data);
		
		Если Папка_DataMap.Получить("folderIds") = Неопределено Или Папка_DataMap.Получить("fileIds") = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'Версия схемы данных не поддерживается обработкой'");
		КонецЕсли;
		
		НоваяСтрока.Data_FolderIds.ЗагрузитьЗначения(Папка_DataMap.Получить("folderIds"));
		НоваяСтрока.Data_FileIds.ЗагрузитьЗначения(Папка_DataMap.Получить("fileIds"));
	КонецЦикла; 
	
КонецПроцедуры

Процедура ЗагрузитьДиаграммы(ТаблицаДиаграмм, ИдентификаторыПредставленныхОбъектов = Неопределено, ДиаграммыИзСхемы = Неопределено)
	
	ТаблицаДиаграмм.Очистить();
	
	ПрочиеПоля = Новый ТаблицаЗначений;
	ПрочиеПоля.Колонки.Добавить("Ключ", Новый ОписаниеТипов("Строка"));
	ПрочиеПоля.Колонки.Добавить("Значение");
	
	Если ДиаграммыИзСхемы = Неопределено Тогда
		ДиаграммыИзСхемы = ДиаграммыИзСхемы();
	КонецЕсли;
	
	Для Каждого Диаграмма Из ДиаграммыИзСхемы Цикл
		Если Диаграмма.Получить("originalId") <> Неопределено Тогда // Черновик
			Продолжить;
		КонецЕсли;
		
		Если Диаграмма.Получить("id") = Неопределено
			Или Диаграмма.Получить("name") = Неопределено
			Или Диаграмма.Получить("owner") = Неопределено
			Или Диаграмма.Получить("type") = Неопределено
			Или Диаграмма.Получить("ownerName") = Неопределено
			Или Диаграмма.Получить("updated") = Неопределено
			Или Диаграмма.Получить("chartType") = Неопределено
			Или Диаграмма.Получить("data") = Неопределено Тогда
			
			ВызватьИсключение НСтр("ru = 'Версия схемы данных не поддерживается обработкой'");
		КонецЕсли;
		
		Если ИдентификаторыПредставленныхОбъектов <> Неопределено 
				И ИдентификаторыПредставленныхОбъектов.Получить(Диаграмма.Получить("id")) = Неопределено Тогда
			// исключение удаленных объектов
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаДиаграмм.Добавить();
		
		Для Каждого Поле Из Диаграмма Цикл
			Если Поле.Ключ = "id" Тогда
				НоваяСтрока.Id = Поле.Значение;
			ИначеЕсли Поле.Ключ = "name" Тогда
				НоваяСтрока.Name = Поле.Значение;
			ИначеЕсли Поле.Ключ = "owner" Тогда
				НоваяСтрока.Owner = Поле.Значение;
			ИначеЕсли Поле.Ключ = "type" Тогда
				НоваяСтрока.Type = Поле.Значение;
			ИначеЕсли Поле.Ключ = "ownerName" Тогда
				НоваяСтрока.OwnerName = Поле.Значение;
			ИначеЕсли Поле.Ключ = "updated" Тогда
				НоваяСтрока.Updated = Поле.Значение;
			ИначеЕсли Поле.Ключ = "chartType" Тогда
				НоваяСтрока.ChartType = Поле.Значение;
			ИначеЕсли Поле.Ключ = "data" Тогда
				НоваяСтрока.Data = Поле.Значение;
			ИначеЕсли Поле.Ключ = "version" Тогда
				НоваяСтрока.Version = Поле.Значение;
			ИначеЕсли Поле.Ключ = "links" Тогда
				НоваяСтрока.Links.ЗагрузитьЗначения(Поле.Значение);
			Иначе
				НоваяСтрока.ПрочиеПоля = ПрочиеПоля;
				ТаблицаПрочиеПоля = НоваяСтрока.ПрочиеПоля; //ТаблицаЗначений
				ПрочееПоле = ТаблицаПрочиеПоля.Добавить();
				ПрочееПоле.Ключ = Поле.Ключ;
				Если ТипЗнч(Поле.Значение) = Тип("Массив") Тогда
					СписокЗначений = Новый СписокЗначений();
					СписокЗначений.ЗагрузитьЗначения(Поле.Значение);
					ПрочееПоле.Значение = СписокЗначений;
				Иначе
					ПрочееПоле.Значение = Поле.Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьДашборды(ТаблицаДашбордов, ИдентификаторыПредставленныхОбъектов = Неопределено, ДашбордыИзСхемы = Неопределено)
	
	ТаблицаДашбордов.Очистить();
	
	ПрочиеПоля = Новый ТаблицаЗначений;
	ПрочиеПоля.Колонки.Добавить("Ключ", Новый ОписаниеТипов("Строка"));
	ПрочиеПоля.Колонки.Добавить("Значение");

	Если ДашбордыИзСхемы = Неопределено Тогда
		ДашбордыИзСхемы = ДашбордыИзСхемы();
	КонецЕсли;
	
	Для Каждого Дашборд Из ДашбордыИзСхемы Цикл
		Если Дашборд.Получить("originalId") <> Неопределено Тогда // Черновик
			Продолжить;
		КонецЕсли; 
		
		Если Дашборд.Получить("id") = Неопределено
			Или Дашборд.Получить("name") = Неопределено
			Или Дашборд.Получить("owner") = Неопределено
			Или Дашборд.Получить("type") = Неопределено
			Или Дашборд.Получить("ownerName") = Неопределено
			Или Дашборд.Получить("updated") = Неопределено
			Или Дашборд.Получить("data") = Неопределено Тогда
			
			ВызватьИсключение НСтр("ru = 'Версия схемы данных не поддерживается обработкой'");
		КонецЕсли;
		
		Если ИдентификаторыПредставленныхОбъектов <> Неопределено И ИдентификаторыПредставленныхОбъектов.Получить(Дашборд.Получить("id")) = Неопределено Тогда
			// исключение удаленных объектов
			Продолжить;
		КонецЕсли;
			
		НоваяСтрока = ТаблицаДашбордов.Добавить();
		
		Для Каждого Поле Из Дашборд Цикл
			Если Поле.Ключ = "id" Тогда
				НоваяСтрока.Id = Поле.Значение;
			ИначеЕсли Поле.Ключ = "name" Тогда
				НоваяСтрока.Name = Поле.Значение;
			ИначеЕсли Поле.Ключ = "owner" Тогда
				НоваяСтрока.Owner = Поле.Значение;
			ИначеЕсли Поле.Ключ = "type" Тогда
				НоваяСтрока.Type = Поле.Значение;
			ИначеЕсли Поле.Ключ = "ownerName" Тогда
				НоваяСтрока.OwnerName = Поле.Значение;
			ИначеЕсли Поле.Ключ = "updated" Тогда
				НоваяСтрока.Updated = Поле.Значение;
			ИначеЕсли Поле.Ключ = "data" Тогда
				НоваяСтрока.Data = Поле.Значение;
			ИначеЕсли Поле.Ключ = "version" Тогда
				НоваяСтрока.Version = Поле.Значение;
			ИначеЕсли Поле.Ключ = "links" Тогда
				НоваяСтрока.Links.ЗагрузитьЗначения(Поле.Значение);
			Иначе
				НоваяСтрока.ПрочиеПоля = ПрочиеПоля;
				ТаблицаПрочиеПоля = НоваяСтрока.ПрочиеПоля; //ТаблицаЗначений
				ПрочееПоле = ТаблицаПрочиеПоля.Добавить();
				ПрочееПоле.Ключ = Поле.Ключ;
				Если ТипЗнч(Поле.Значение) = Тип("Массив") Тогда
					СписокЗначений = Новый СписокЗначений();
					СписокЗначений.ЗагрузитьЗначения(Поле.Значение);
					ПрочееПоле.Значение = СписокЗначений;
				Иначе
					ПрочееПоле.Значение = Поле.Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;
	
КонецПроцедуры  

Процедура СоздатьСсылки(СозданиеСсылокПоВладельцам, ВладельцыАналитики, Папки)

	Для Каждого СозданиеСсылкиПоВладельцам Из СозданиеСсылокПоВладельцам Цикл
		
		Панель = СозданиеСсылкиПоВладельцам.Ключ;
		ОбъектыКПереносу = СозданиеСсылкиПоВладельцам.Значение;
		
		ДополнительныеПараметры = ДополнительныеПараметрыПолейПапки();
		ДополнительныеПараметры.Дополнительные_FileIds = ОбъектыКПереносу.КорневаяПапка_FileIds;
		ДополнительныеПараметры.Дополнительные_FolderIds = ОбъектыКПереносу.КорневаяПапка_FolderIds;
		
		КорневаяПапка = НайтиПоИдентификатору(Папки, Панель.Data_RootFolderId);
		ПоляКорневойПапки = ПоляПапки(КорневаяПапка, ДополнительныеПараметры);
		
		ВладелецАналитики = НайтиПоИдентификатору(ВладельцыАналитики, Панель.Owner);
		ПоляПользователяАналитики = ПоляВладельца(ВладелецАналитики);
		
		ПоляПользователяАналитикиJson = ЗначениеВJSON(ПоляПользователяАналитики);
		ЗаписатьСхему(ПоляПользователяАналитикиJson);
		
		ПапкаJson = ЗначениеВJSON(ПоляКорневойПапки);
		ЗаписатьСхему(ПапкаJson);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВсеОбъектыКСозданиюСсылки(Параметры)
	
	ПанелиИсточник = Параметры.ПанелиИсточник;
	ВыбранныеВладельцыПриемник = Параметры.ВыбранныеВладельцыПриемник;
	Панели = Параметры.Панели;
	Диаграммы = Параметры.Диаграммы;
	Дашборды = Параметры.Дашборды;
	Папки = Параметры.Папки;
	
	СтрокиКПереносу = СтрокиДереваКОбработке(ПанелиИсточник);
	
	СсылкиПоВладельцам = Новый Соответствие();
	
	Для Каждого Панель из Панели Цикл
		
		Если ВыбранныеВладельцыПриемник.НайтиПоЗначению(Панель.OwnerName) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеПереноса = Новый Структура();
		ДанныеПереноса.Вставить("КорневаяПапка_FileIds", Новый Массив());
		ДанныеПереноса.Вставить("КорневаяПапка_FolderIds", Новый Массив());

		Переносы = Переносы(Панель, СтрокиКПереносу, Ложь, Диаграммы, Дашборды, Папки);
		
		Для Каждого Строка Из СтрокиКПереносу Цикл //СтрокаДереваЗначений
			
			Перенос = Переносы.Получить(Строка);
			
			Если Перенос = Неопределено Тогда
				Продолжить;
			КонецЕсли;

			СтрокаТип = Строка.Тип;
			СтрокаИдентификатор = Строка.Идентификатор;
			
			Если Перенос.ВозможенКакСсылка Тогда
				Если  Строка.Уровень() = 1 Тогда
					Если СтрокаТип = "folder" Тогда
						ДанныеПереноса.КорневаяПапка_FolderIds.Добавить(СтрокаИдентификатор);
					Иначе
						ДанныеПереноса.КорневаяПапка_FileIds.Добавить(СтрокаИдентификатор);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		СсылкиПоВладельцам.Вставить(Панель, ДанныеПереноса);
		
	КонецЦикла;
	
	Возврат СсылкиПоВладельцам;

КонецФункции

// Все объекты к переносу.
// 
// Параметры:
//  Параметры - Структура - Параметры:
// * ИзФайла - Булево - 
// * ВыбранныеВладельцыПриемник - СписокЗначений из Строка
// * ИдентификаторОбъекта - Строка - 
// * ПанелиИсточник - ДеревоЗначений 
// * Панели - ТаблицаЗначений
// * Дашборды - ТаблицаЗначений
// * Диаграммы - ТаблицаЗначений
// * Папки - ТаблицаЗначений
// * ВладельцыАналитики - ТаблицаЗначений
// * ОбъектыАналитики - ТаблицаЗначений
// * ДашбордыИсточник - ТаблицаЗначений
// * ДиаграммыИсточник - ТаблицаЗначений
// * ПапкиИсточник - ТаблицаЗначений
// * ОбъектыАналитикиИсточник - ТаблицаЗначений
//  СтрокаДерева - СтрокаДереваЗначений - Строка дерева
//  ВладелецИмяНовыхПанелей - Строка - Владелец для новых панелей
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//   * Ключ - СтрокаТаблицыЗначений - вариант переноса.
//   * Значение - Структура
Функция ВсеОбъектыКПереносу(Параметры, Знач СтрокаДерева, ВладелецИмяНовыхПанелей)
	
	ИзФайла = Параметры.ИзФайла;
	ВыбранныеВладельцыПриемник = Параметры.ВыбранныеВладельцыПриемник;
	ПанелиИсточник = Параметры.ПанелиИсточник;
	Панели = Параметры.Панели;
	ДиаграммыИсточник = Параметры.ДиаграммыИсточник;
	ДашбордыИсточник = Параметры.ДашбордыИсточник;
	ПапкиИсточник = Параметры.ПапкиИсточник;
	ОбъектыАналитикиИсточник = Параметры.ОбъектыАналитикиИсточник;
	Диаграммы = Параметры.Диаграммы;
	Дашборды = Параметры.Дашборды;
	Папки = Параметры.Папки;
	
	СортировкаПапок = Новый ТаблицаЗначений(); // для сортировки папок по уровню
	СортировкаПапок.Колонки.Добавить("ПоляПапки");
	СортировкаПапок.Колонки.Добавить("Уровень");
	
	СтрокиКПереносу = СтрокиДереваКОбработке(ПанелиИсточник, СтрокаДерева.Идентификатор);
	
	ПереносыПоВладельцам = Новый Соответствие();
	ИдентификаторыНовыхЭлементов = Новый Массив();
	
	Для Каждого Панель из Панели Цикл
		Если ВыбранныеВладельцыПриемник.НайтиПоЗначению(Панель.OwnerName) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Результат = Новый Структура();
		Результат.Вставить("Папки", Новый Массив());
		Результат.Вставить("Диаграммы", Новый Массив());
		Результат.Вставить("Дашборды", Новый Массив());
		Результат.Вставить("ОбъектыАналитики", Новый Массив());
		Результат.Вставить("КорневаяПапка_FileIds", Новый Массив());
		Результат.Вставить("КорневаяПапка_FolderIds", Новый Массив());
		Результат.Вставить("ПользовательАналитики_Links", Новый Массив());
		Результат.Вставить("ЕстьНедоступныеДляПереноса", Ложь);
		Результат.Вставить("ИменаЗамещаемыхОбъектов", Новый Массив());
		
		Переносы = Переносы(Панель, СтрокиКПереносу, ИзФайла, Диаграммы, Дашборды, Папки);
		
		Для Каждого Строка Из СтрокиКПереносу Цикл //СтрокаДереваЗначений
			
			Перенос = Переносы.Получить(Строка);
			
			Если Перенос.ВозможенСЗамещением Тогда
				
				Если Панель.OwnerName = ВладелецИмяНовыхПанелей Тогда

					Если Строка.Тип = "folder" Тогда
						ОбъектИсточник = НайтиПоИдентификатору(ПапкиИсточник, Строка.Идентификатор);
						СуществующийОбъект = НайтиПоИдентификатору(Папки, Строка.Идентификатор);
						
						ДополнительныеПараметры = ДополнительныеПараметрыПолейПапки();
						ДополнительныеПараметры.Дополнительные_FileIds = ОбъектИсточник.Data_FileIds.ВыгрузитьЗначения();
						ДополнительныеПараметры.Дополнительные_FolderIds = ОбъектИсточник.Data_FolderIds.ВыгрузитьЗначения();
						ДополнительныеПараметры.НовыйВладелец = Панель.Owner;
						ДополнительныеПараметры.ИмяНовогоВладельца = Панель.OwnerName;
						ПоляПапки = ПоляПапки(СуществующийОбъект, ДополнительныеПараметры);
						
							НоваяСтрока = СортировкаПапок.Добавить();
							НоваяСтрока.ПоляПапки = ПоляПапки;
							НоваяСтрока.Уровень = Строка.Уровень();
					Иначе
						Если РодительскаяПапкаМожетБытьПеренесена(Строка, Переносы) Тогда
							Если Строка.Тип = "chart" Тогда
								ОбъектИсточник = НайтиПоИдентификатору(ДиаграммыИсточник, Строка.Идентификатор);
								ПоляОбъектаИсточника = ПоляДиаграммы(ОбъектИсточник,, Панель.Owner, Панель.OwnerName);
								Результат.Диаграммы.Добавить(ПоляОбъектаИсточника);
							ИначеЕсли Строка.Тип = "dashboard" Тогда
								ОбъектИсточник = НайтиПоИдентификатору(ДашбордыИсточник, Строка.Идентификатор);
								ПоляОбъектаИсточника = ПоляДашборда(ОбъектИсточник,, Панель.Owner, Панель.OwnerName);
								Результат.Дашборды.Добавить(ПоляОбъектаИсточника);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				
				КонецЕсли;
			ИначеЕсли Перенос.ВозможенКакНовый Тогда
				Если Строка.Тип = "folder" Тогда
					
					Если Панель.OwnerName = ВладелецИмяНовыхПанелей Тогда

						ОбъектИсточник = НайтиПоИдентификатору(ПапкиИсточник, Строка.Идентификатор);
						
						ДополнительныеПараметры = ДополнительныеПараметрыПолейПапки();
						ДополнительныеПараметры.НовыйВладелец = Панель.Owner;
						ДополнительныеПараметры.ИмяНовогоВладельца = Панель.OwnerName;
						ПоляПапки = ПоляПапки(ОбъектИсточник, ДополнительныеПараметры);
						
						НоваяСтрока = СортировкаПапок.Добавить();
						НоваяСтрока.ПоляПапки = ПоляПапки;
						НоваяСтрока.Уровень = Строка.Уровень();
					
					КонецЕсли;
					
					Если Строка.Уровень() = 1 Или Строка.Идентификатор = СтрокаДерева.Идентификатор Тогда
						Результат.КорневаяПапка_FolderIds.Добавить(Строка.Идентификатор);
					КонецЕсли;
					
					ИдентификаторыНовыхЭлементов.Добавить(Строка.Идентификатор);
				Иначе
					Если РодительскаяПапкаМожетБытьПеренесена(Строка, Переносы) Тогда
						
						Если Панель.OwnerName = ВладелецИмяНовыхПанелей Тогда

							Если Строка.Тип = "chart" Тогда
								ОбъектИсточник = НайтиПоИдентификатору(ДиаграммыИсточник, Строка.Идентификатор);
								ПоляОбъектаИсточника = ПоляДиаграммы(ОбъектИсточник,, Панель.Owner, Панель.OwnerName);
								Результат.Диаграммы.Добавить(ПоляОбъектаИсточника);
							ИначеЕсли Строка.Тип = "dashboard" Тогда
								ОбъектИсточник = НайтиПоИдентификатору(ДашбордыИсточник, Строка.Идентификатор);
								ПоляОбъектаИсточника = ПоляДашборда(ОбъектИсточник,, Панель.Owner, Панель.OwnerName);
								Результат.Дашборды.Добавить(ПоляОбъектаИсточника);
							КонецЕсли; 
							
							Для Каждого Элемент Из ПоляОбъектаИсточника["links"] Цикл
								ОбъектАналитикиИсточник = НайтиПоИдентификатору(ОбъектыАналитикиИсточник, Элемент);
								Если ОбъектАналитикиИсточник = Неопределено Тогда
									Продолжить;
								КонецЕсли;
								
								Если Результат.ПользовательАналитики_Links.Найти(Элемент) = Неопределено Тогда
									Результат.ПользовательАналитики_Links.Добавить(Элемент);
								КонецЕсли;
								
								ПоляОбъектаАналитики = ПоляОбъектаАналитики(ОбъектАналитикиИсточник, , Панель.Owner, Панель.OwnerName);
								Результат.ОбъектыАналитики.Добавить(ПоляОбъектаАналитики);
								
								СсылкиСвязанногоОбъекта = ПоляОбъектаАналитики["links"];
								Если СсылкиСвязанногоОбъекта <> Неопределено Тогда
									Для Каждого Элемент2 Из СсылкиСвязанногоОбъекта Цикл
										СвязанныйОбъектИсточник = НайтиПоИдентификатору(ОбъектыАналитикиИсточник, Элемент2);
										Если СвязанныйОбъектИсточник = Неопределено Тогда
											Продолжить;
										КонецЕсли;
										ПоляСвязанногоОбъекта = ПоляОбъектаАналитики(СвязанныйОбъектИсточник, , Панель.Owner, Панель.OwnerName);
										Результат.ОбъектыАналитики.Добавить(ПоляСвязанногоОбъекта);
									КонецЦикла;
								КонецЕсли;
								
							КонецЦикла;
						
						КонецЕсли;
						
						Если Строка.Уровень() = 1 Тогда
							Результат.КорневаяПапка_FileIds.Добавить(Строка.Идентификатор);
						КонецЕсли;
						
						ИдентификаторыНовыхЭлементов.Добавить(Строка.Идентификатор);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ИзФайла И Панель.OwnerName = ВладелецИмяНовыхПанелей Тогда 
			
			СортировкаПапок.Сортировать("Уровень Desc");
			Результат.Папки = СортировкаПапок.ВыгрузитьКолонку("ПоляПапки");
			
			Для Каждого Папка Из Результат.Папки Цикл 
				Папка_Data = JSONВЗначение(Папка.Получить("data"));
				
				Папка_FileIds = Папка_Data.Получить("fileIds");
				Папка_FolderIds = Папка_Data.Получить("folderIds");
				Папка_Links = Папка.Получить("links");
				
				FileIds_КИсключению = Новый Массив();
				Для Каждого Ид Из Папка_FileIds Цикл
					Если ИдентификаторыНовыхЭлементов.Найти(Ид) = Неопределено И Панель.ИдентификаторыПредставленныхОбъектов.НайтиПоЗначению(Ид) = Неопределено Тогда
						FileIds_КИсключению.Добавить(Ид);
					КонецЕсли;
				КонецЦикла;
				FolderIds_КИсключению = Новый Массив();
				Для Каждого Ид Из Папка_FolderIds Цикл
					Если ИдентификаторыНовыхЭлементов.Найти(Ид) = Неопределено И Панель.ИдентификаторыПредставленныхОбъектов.НайтиПоЗначению(Ид) = Неопределено Тогда
						FolderIds_КИсключению.Добавить(Ид);
					КонецЕсли;
				КонецЦикла;
				
				Для Каждого Ид Из FileIds_КИсключению Цикл 
					Папка_FileIds.Delete(Папка_FileIds.Найти(Ид));
					Папка_Links.Delete(Папка_Links.Найти(Ид));
				КонецЦикла;
				Для Каждого Ид Из FolderIds_КИсключению Цикл 
					Папка_FolderIds.Delete(Папка_FolderIds.Найти(Ид));
					Папка_Links.Delete(Папка_Links.Найти(Ид));
				КонецЦикла;
				
				Папка.Вставить("data", ЗначениеВJSON(Папка_Data));
			КонецЦикла;
		КонецЕсли;
		
		ПереносыПоВладельцам.Вставить(Панель, Результат);
		
	КонецЦикла;

	Возврат ПереносыПоВладельцам;
	
КонецФункции

Функция ДоступностьПереноса(ПанельПриемник, ОбъектИсточник, ИзФайла, Диаграммы, Дашборды, Папки)
	
	Результат = Новый Структура();
	Результат.Вставить("ВозможенКакСсылка", Ложь);
	Результат.Вставить("ВозможенКакНовый", Ложь);
	Результат.Вставить("ВозможенСЗамещением", Ложь);
	
	Если ИзФайла Тогда
		
		Если ОбъектИсточник.Тип = "chart" Тогда
			ТаблицаПоиска = Диаграммы;
		ИначеЕсли ОбъектИсточник.Тип = "dashboard" Тогда
			ТаблицаПоиска = Дашборды;
		ИначеЕсли ОбъектИсточник.Тип = "folder" Тогда
			ТаблицаПоиска = Папки;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Id", ОбъектИсточник.Идентификатор);
		СтруктураПоиска.Вставить("Owner", ПанельПриемник.Owner);
		РезультатПоиска = ТаблицаПоиска.НайтиСтроки(СтруктураПоиска);
		Если РезультатПоиска.Количество() Тогда
			Если ПанельПриемник.ИдентификаторыПредставленныхОбъектов.НайтиПоЗначению(ОбъектИсточник.Идентификатор) <> Неопределено Тогда
				Результат.Вставить("ВозможенСЗамещением", Истина);
			Иначе
				Результат.Вставить("ВозможенКакНовый", Истина);
			КонецЕсли;
		Иначе
			Результат.Вставить("ВозможенКакНовый", Истина);
		КонецЕсли;

	Иначе
		
		Если ПанельПриемник.ИдентификаторыПредставленныхОбъектов.НайтиПоЗначению(ОбъектИсточник.Идентификатор) <> Неопределено Тогда
			Результат.Вставить("ВозможенСЗамещением", Истина);
		Иначе
			Результат.Вставить("ВозможенКакСсылка", Истина);
			Результат.Вставить("ВозможенКакНовый", Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПеренестиОбъектыИзФайла(ПереносыПоВладельцам, ВладельцыАналитики, ОбъектыАналитикиИсточник, Папки)
	
	Для Каждого ПереносПоВладельцу Из ПереносыПоВладельцам Цикл
		
		Панель = ПереносПоВладельцу.Ключ;
		ОбъектыКПереносу = ПереносПоВладельцу.Значение;
		
		Для Каждого ОбъектАналитики Из ОбъектыКПереносу.ОбъектыАналитики Цикл
			СхемаJson = ЗначениеВJSON(ОбъектАналитики);
			ЗаписатьСхему(СхемаJson)
		КонецЦикла;
		Для Каждого Диаграмма Из ОбъектыКПереносу.Диаграммы Цикл
			СхемаJson = ЗначениеВJSON(Диаграмма);
			ЗаписатьСхему(СхемаJson);
		КонецЦикла;
		Для Каждого Дашборд Из ОбъектыКПереносу.Дашборды Цикл
			СхемаJson = ЗначениеВJSON(Дашборд);
			ЗаписатьСхему(СхемаJson);
		КонецЦикла;
		Для Каждого Папка Из ОбъектыКПереносу.Папки Цикл
			СхемаJson = ЗначениеВJSON(Папка);
			ЗаписатьСхему(СхемаJson)
		КонецЦикла;
			
		КорневаяПапка = НайтиПоИдентификатору(Папки, Панель.Data_RootFolderId);
		
		ДополнительныеПараметры = ДополнительныеПараметрыПолейПапки();
		ДополнительныеПараметры.Дополнительные_FileIds = ОбъектыКПереносу.КорневаяПапка_FileIds;
		ДополнительныеПараметры.Дополнительные_FolderIds = ОбъектыКПереносу.КорневаяПапка_FolderIds;
		ПоляКорневойПапки = ПоляПапки(КорневаяПапка, ДополнительныеПараметры);
		
		ВладелецАналитики = НайтиПоИдентификатору(ВладельцыАналитики, Панель.Owner);
		ПоляПользователяАналитики = ПоляВладельца(ВладелецАналитики);
		
		Для Каждого Элемент Из ОбъектыКПереносу.ПользовательАналитики_Links Цикл
			Если ПоляПользователяАналитики["links"].Найти(Элемент) = Неопределено Тогда
				ПоляПользователяАналитики["links"].Добавить(Элемент);
			КонецЕсли;
			
			ОбъектАналитики = НайтиПоИдентификатору(ОбъектыАналитикиИсточник, Элемент);
			
			Если ОбъектАналитики = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Пользователь_DataMap = JSONВЗначение(ПоляПользователяАналитики["data"]);
			ИмяТипаОбъекта = ОбъектАналитики.Type;
			Если ИмяТипаОбъекта = "colorScheme" Или ИмяТипаОбъекта = "globalMacro" Или ИмяТипаОбъекта = "gradient" 
				Или ИмяТипаОбъекта = "markerMap" Или ИмяТипаОбъекта = "areasMapping" Тогда
					
				ИмяПоляИдентификаторов = ИмяТипаОбъекта + "Ids";
				НайденныйПользователь_DataMap = Пользователь_DataMap.Получить(ИмяПоляИдентификаторов); //СписокЗначений
				Если НайденныйПользователь_DataMap <> Неопределено Тогда
					НайденныйПользователь_DataMap.Добавить(Элемент)
				Иначе
					МассивИд = Новый Массив();
					МассивИд.Добавить(Элемент);
					Пользователь_DataMap.Вставить(ИмяПоляИдентификаторов, МассивИд);
				КонецЕсли;
			КонецЕсли;
			ПоляПользователяАналитики["data"] = ЗначениеВJSON(Пользователь_DataMap);
			
		КонецЦикла;
		
		ПоляПользователяАналитикиJson = ЗначениеВJSON(ПоляПользователяАналитики);
		ЗаписатьСхему(ПоляПользователяАналитикиJson);
		
		ПапкаJson = ЗначениеВJSON(ПоляКорневойПапки);
		ЗаписатьСхему(ПапкаJson);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПоляПанели(Панель, ИдентификаторыДополнительныхОбъектов = Неопределено)
	
	Поля = Новый Соответствие();
	
	Панель_Links = Панель.Links.ВыгрузитьЗначения();
	Если ИдентификаторыДополнительныхОбъектов <> Неопределено Тогда
		Для Каждого Ид Из ИдентификаторыДополнительныхОбъектов Цикл
			Панель_Links.Добавить(Ид);
		КонецЦикла;
	КонецЕсли;
	
	РабочийСтол_Data = Новый Соответствие();
	РабочийСтол_Data.Вставить("rootFolderId", Панель.Data_RootFolderId);
	
	Поля.Вставить("type", "desktop");
	Поля.Вставить("id", Панель.Id);
	Поля.Вставить("owner", Панель.Owner);
	Поля.Вставить("ownerName", Панель.OwnerName);
	Поля.Вставить("updated", Панель.Updated);
	
	Если Панель_Links.Количество() <> 0 Тогда
		Поля.Вставить("links", Панель_Links); 
	КонецЕсли;
	
	Поля.Вставить("data", ЗначениеВJSON(РабочийСтол_Data));
	Если Панель.Version > 0 Тогда
		Поля.Вставить("version", Панель.Version);
	КонецЕсли; 
	
	Для Каждого Поле Из Панель.ПрочиеПоля Цикл
		Поля.Вставить(Поле.Ключ, Поле.Значение);
	КонецЦикла;
	
	Возврат Поля;
	
КонецФункции

Функция ДополнительныеПараметрыПолейПапки()
	
	Структура = Новый Структура;
	Структура.Вставить("Дополнительные_FileIds", Неопределено);
	Структура.Вставить("Дополнительные_FolderIds", Неопределено);
	Структура.Вставить("НовыйИд", Неопределено);
	Структура.Вставить("НовыйВладелец", Неопределено);
	Структура.Вставить("ИмяНовогоВладельца", Неопределено);
	
	Возврат Структура;
	
КонецФункции

Функция ПоляПапки(Папка, ДополнительныеПараметры = Неопределено)
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыПолейПапки();
	КонецЕсли;
	
	Дополнительные_FileIds = ДополнительныеПараметры.Дополнительные_FileIds;
	Дополнительные_FolderIds = ДополнительныеПараметры.Дополнительные_FolderIds;
	НовыйИд = ДополнительныеПараметры.НовыйИд;
	НовыйВладелец = ДополнительныеПараметры.НовыйВладелец;
	ИмяНовогоВладельца = ДополнительныеПараметры.ИмяНовогоВладельца;
	
	Папка_Id = ?(НовыйИд = Неопределено, Папка.Id, НовыйИд); 
	Папка_Owner = ?(НовыйВладелец = Неопределено, Папка.Owner, НовыйВладелец);
	Папка_OwnerName = ?(ИмяНовогоВладельца = Неопределено, Папка.OwnerName, ИмяНовогоВладельца);
	
	ПоляПапки = Новый Соответствие();
	
	Папка_Links = Папка.Links.ВыгрузитьЗначения(); //СписокЗначений
	
	Папка_FileIds = Папка.Data_FileIds.ВыгрузитьЗначения();
	Если Дополнительные_FileIds <> Неопределено Тогда
		Для Каждого Ид Из Дополнительные_FileIds Цикл
			Если Папка_FileIds.Найти(Ид) = Неопределено Тогда
				Папка_FileIds.Добавить(Ид);
				Папка_Links.Добавить(Ид);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Папка_FolderIds = Папка.Data_FolderIds.ВыгрузитьЗначения();
	Если Дополнительные_FolderIds <> Неопределено Тогда
		Для Каждого Ид Из Дополнительные_FolderIds Цикл
			Если Папка_FolderIds.Найти(Ид) = Неопределено Тогда
				Папка_FolderIds.Добавить(Ид);
				Папка_Links.Добавить(Ид);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Папка_Data = Новый Соответствие();
	Папка_Data.Вставить("fileIds", Папка_FileIds);
	Папка_Data.Вставить("folderIds", Папка_FolderIds);
	
	ПоляПапки.Вставить("type", "folder");
	ПоляПапки.Вставить("id", Папка_Id);
	ПоляПапки.Вставить("name", Папка.Name);
	ПоляПапки.Вставить("ownerName",Папка_OwnerName);
	ПоляПапки.Вставить("owner", Папка_Owner);
	ПоляПапки.Вставить("updated", Папка.Updated);
	
	ПоляПапки.Вставить("links", Папка_Links);
	
	ПоляПапки.Вставить("data", ЗначениеВJSON(Папка_Data));
	Если Папка.Version > 0 Тогда
		ПоляПапки.Вставить("version", Папка.Version);
	КонецЕсли;
	
	Для Каждого Поле Из Папка.ПрочиеПоля Цикл
		ПоляПапки.Вставить(Поле.Ключ, Поле.Значение);
	КонецЦикла;
	
	Возврат ПоляПапки;
	
КонецФункции

Функция ПоляДиаграммы(Диаграмма, НовыйИд = Неопределено, НовыйВладелец = Неопределено, ИмяНовогоВладельца = Неопределено)
	
	Диаграмма_Id = ?(НовыйИд = Неопределено, Диаграмма.Id, НовыйИд); 
	Диаграмма_Owner = ?(НовыйВладелец = Неопределено, Диаграмма.Owner, НовыйВладелец);
	Диаграмма_OwnerName = ?(ИмяНовогоВладельца = Неопределено, Диаграмма.OwnerName, ИмяНовогоВладельца);
	
	ПоляДиаграммы = Новый Соответствие();
	
	ПоляДиаграммы.Вставить("type", "chart");
	ПоляДиаграммы.Вставить("id", Диаграмма_Id);
	ПоляДиаграммы.Вставить("name", Диаграмма.Name);
	ПоляДиаграммы.Вставить("chartType", Диаграмма.ChartType);
	ПоляДиаграммы.Вставить("owner", Диаграмма_Owner);
	ПоляДиаграммы.Вставить("ownerName", Диаграмма_OwnerName); 
	ПоляДиаграммы.Вставить("data", Диаграмма.Data);
	ПоляДиаграммы.Вставить("updated", Диаграмма.Updated);
	Если Диаграмма.Version > 0 Тогда
		ПоляДиаграммы.Вставить("version", Диаграмма.Version);
	КонецЕсли;
	
	ПоляДиаграммы.Вставить("links", Диаграмма.Links.ВыгрузитьЗначения());
	
	Для Каждого Поле Из Диаграмма.ПрочиеПоля Цикл
		Если ТипЗнч(Поле.Значение) = Тип("СписокЗначений") Тогда
			ПоляДиаграммы.Вставить(Поле.Ключ, Поле.Значение.ВыгрузитьЗначения());
		Иначе
			ПоляДиаграммы.Вставить(Поле.Ключ, Поле.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоляДиаграммы;
	
КонецФункции

Функция ПоляДашборда(Дашборд, НовыйИд = Неопределено, НовыйВладелец = Неопределено, ИмяНовогоВладельца = Неопределено)
	
	Дашборд_Id = ?(НовыйИд = Неопределено, Дашборд.Id, НовыйИд); 
	Дашборд_Owner = ?(НовыйВладелец = Неопределено, Дашборд.Owner, НовыйВладелец);
	Дашборд_OwnerName = ?(ИмяНовогоВладельца = Неопределено, Дашборд.OwnerName, ИмяНовогоВладельца);
	
	ПоляДашборда = Новый Соответствие();
	
	ПоляДашборда.Вставить("type", "dashboard");
	ПоляДашборда.Вставить("id", Дашборд_Id);
	ПоляДашборда.Вставить("name", Дашборд.Name);
	ПоляДашборда.Вставить("owner", Дашборд_Owner); 
	ПоляДашборда.Вставить("ownerName", Дашборд_OwnerName);
	ПоляДашборда.Вставить("data", Дашборд.Data);
	
	ПоляДашборда.Вставить("links", Дашборд.Links.ВыгрузитьЗначения());
	
	ПоляДашборда.Вставить("updated", Дашборд.Updated);
	Если Дашборд.Version > 0 Тогда
		ПоляДашборда.Вставить("version", Дашборд.Version);
	КонецЕсли;
	
	Для Каждого Поле Из Дашборд.ПрочиеПоля Цикл
		ПоляДашборда.Вставить(Поле.Ключ, Поле.Значение);
	КонецЦикла;
	
	Возврат ПоляДашборда; 
	
КонецФункции

Функция ПоляОбъектаАналитики(ОбъектАналитики, НовыйИд = Неопределено, НовыйВладелец = Неопределено, ИмяНовогоВладельца = Неопределено)
	
	ПоляОбъектаАналитики = Новый Соответствие();
	
	ПоляОбъектаАналитики.Вставить("type", ОбъектАналитики.Type);
	ПоляОбъектаАналитики.Вставить("id", ?(НовыйИд = Неопределено, ОбъектАналитики.Id, НовыйИд));
	
	Если Не ПустаяСтрока(ОбъектАналитики.Owner) Тогда
		ПоляОбъектаАналитики.Вставить("owner", ?(НовыйВладелец = Неопределено, ОбъектАналитики.Owner, НовыйВладелец));
	КонецЕсли;
		
	Если Не ПустаяСтрока(ОбъектАналитики.OwnerName) Тогда
		ПоляОбъектаАналитики.Вставить("ownerName", ?(ИмяНовогоВладельца = Неопределено, ОбъектАналитики.OwnerName, ИмяНовогоВладельца));
	КонецЕсли;
	
	Если Не ПустаяСтрока(ОбъектАналитики.Name) Тогда
		ПоляОбъектаАналитики.Вставить("name", ОбъектАналитики.Name);
	КонецЕсли;
	
	Если Не ПустаяСтрока(ОбъектАналитики.Data) Тогда
		ПоляОбъектаАналитики.Вставить("data", ОбъектАналитики.Data);
	КонецЕсли;
	
	Если ОбъектАналитики.Links.Количество() <> 0 Тогда
		ПоляОбъектаАналитики.Вставить("links", ОбъектАналитики.Links.ВыгрузитьЗначения());
	КонецЕсли;

	Если Не ПустаяСтрока(ОбъектАналитики.Updated) Тогда
		ПоляОбъектаАналитики.Вставить("updated", ОбъектАналитики.Updated);
	КонецЕсли;
	
	Если ОбъектАналитики.Version > 0 Тогда
		ПоляОбъектаАналитики.Вставить("version", ОбъектАналитики.Version);
	КонецЕсли;
	
	Для Каждого Поле Из ОбъектАналитики.ПрочиеПоля Цикл
		ПоляОбъектаАналитики.Вставить(Поле.Ключ, Поле.Значение);
	КонецЦикла;
	
	Возврат ПоляОбъектаАналитики;
	
КонецФункции

Функция ПоляВладельца(Владелец)
	
	Поля = Новый Соответствие();
	Поля.Вставить("owner", Владелец.Owner);
	Поля.Вставить("data", Владелец.Data);
	Поля.Вставить("ownerName", Владелец.OwnerName);
	
	Если Владелец.Links.Количество() <> 0 Тогда
		Поля.Вставить("links", Владелец.Links.ВыгрузитьЗначения());
	КонецЕсли;
	
	Поля.Вставить("id", Владелец.Id);
	Поля.Вставить("type", Владелец.Type);
	Поля.Вставить("updated", Владелец.Updated);
	Если Владелец.Version > 0 Тогда
		Поля.Вставить("version", Владелец.Version);
	КонецЕсли;
	
	Для Каждого Поле Из Владелец.ПрочиеПоля Цикл
		Поля.Вставить(Поле.Ключ, Поле.Значение);
	КонецЦикла;
	
	Возврат Поля;
	
КонецФункции

Функция НовыйИдентификатор()
	
	Возврат СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");
	
КонецФункции

// Добавить диаграмму в таблицу диаграмм.
// 
// Параметры:
//  ТаблицаДиаграмм - ТаблицаЗначений - Таблица диаграмм
//  Диаграмма - Соответствие Из Строка - Диаграмма
Процедура ДобавитьДиаграммуВТаблицуДиаграмм(ТаблицаДиаграмм, Диаграмма)
	
	НоваяСтрока = ТаблицаДиаграмм.Добавить();
	
	ПрочиеПоля = Новый ТаблицаЗначений;
	ПрочиеПоля.Колонки.Добавить("Ключ", Новый ОписаниеТипов("Строка"));
	ПрочиеПоля.Колонки.Добавить("Значение");
	
	Для Каждого Поле Из Диаграмма Цикл
		Если Поле.Ключ = "id" Тогда
			НоваяСтрока.Id = Поле.Значение;
		ИначеЕсли Поле.Ключ = "name" Тогда
			НоваяСтрока.Name = Поле.Значение;
		ИначеЕсли Поле.Ключ = "owner" Тогда
			НоваяСтрока.Owner = Поле.Значение;
		ИначеЕсли Поле.Ключ = "type" Тогда
			НоваяСтрока.Type = Поле.Значение;
		ИначеЕсли Поле.Ключ = "ownerName" Тогда
			НоваяСтрока.OwnerName = Поле.Значение;
		ИначеЕсли Поле.Ключ = "updated" Тогда
			НоваяСтрока.Updated = Поле.Значение;
		ИначеЕсли Поле.Ключ = "chartType" Тогда
			НоваяСтрока.ChartType = Поле.Значение;
		ИначеЕсли Поле.Ключ = "data" Тогда
			НоваяСтрока.Data = Поле.Значение;
		ИначеЕсли Поле.Ключ = "version" Тогда
			НоваяСтрока.Version = Поле.Значение;
		ИначеЕсли Поле.Ключ = "links" Тогда
			НоваяСтрока.Links.ЗагрузитьЗначения(Поле.Значение);
		Иначе
			НоваяСтрока.ПрочиеПоля = ПрочиеПоля;
			ТаблицаПрочиеПоля = НоваяСтрока.ПрочиеПоля; //ТаблицаЗначений
			ПрочееПоле = ТаблицаПрочиеПоля.Добавить();
			ПрочееПоле.Ключ = Поле.Ключ;
			Если ТипЗнч(Поле.Значение) = Тип("Массив") Тогда
				СписокЗначений = Новый СписокЗначений();
				СписокЗначений.ЗагрузитьЗначения(Поле.Значение);
				ПрочееПоле.Значение = СписокЗначений;
			Иначе
				ПрочееПоле.Значение = Поле.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Добавить дашборд в таблицу дашбордов.
// 
// Параметры:
//  ТаблицаДашбордов - ТаблицаЗначений - Таблица дашбордов
//  Дашборд - Соответствие Из Строка - Дашборд
Процедура ДобавитьДашбордВТаблицуДашбордов(ТаблицаДашбордов, Дашборд)
	
	НоваяСтрока = ТаблицаДашбордов.Добавить();
	
	ПрочиеПоля = Новый ТаблицаЗначений;
	ПрочиеПоля.Колонки.Добавить("Ключ", Новый ОписаниеТипов("Строка"));
	ПрочиеПоля.Колонки.Добавить("Значение");
	
	Для Каждого Поле Из Дашборд Цикл
		Если Поле.Ключ = "id" Тогда
			НоваяСтрока.Id = Поле.Значение;
		ИначеЕсли Поле.Ключ = "name" Тогда
			НоваяСтрока.Name = Поле.Значение;
		ИначеЕсли Поле.Ключ = "owner" Тогда
			НоваяСтрока.Owner = Поле.Значение;
		ИначеЕсли Поле.Ключ = "type" Тогда
			НоваяСтрока.Type = Поле.Значение;
		ИначеЕсли Поле.Ключ = "ownerName" Тогда
			НоваяСтрока.OwnerName = Поле.Значение;
		ИначеЕсли Поле.Ключ = "updated" Тогда
			НоваяСтрока.Updated = Поле.Значение;
		ИначеЕсли Поле.Ключ = "data" Тогда
			НоваяСтрока.Data = Поле.Значение;
		ИначеЕсли Поле.Ключ = "version" Тогда
			НоваяСтрока.Version = Поле.Значение;
		ИначеЕсли Поле.Ключ = "links" Тогда
			НоваяСтрока.Links.ЗагрузитьЗначения(Поле.Значение);
		Иначе
			НоваяСтрока.ПрочиеПоля = ПрочиеПоля;
			ТаблицаПрочиеПоля = НоваяСтрока.ПрочиеПоля; //ТаблицаЗначений
			ПрочееПоле = ТаблицаПрочиеПоля.Добавить();
			ПрочееПоле.Ключ = Поле.Ключ;
			Если ТипЗнч(Поле.Значение) = Тип("Массив") Тогда
				СписокЗначений = Новый СписокЗначений();
				СписокЗначений.ЗагрузитьЗначения(Поле.Значение);
				ПрочееПоле.Значение = СписокЗначений;
			Иначе
				ПрочееПоле.Значение = Поле.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьИПодключитьКПанели(Панель, ВыбранныйОбъект, Параметры)

	ИдентификаторОбъекта = Параметры.ИдентификаторОбъекта; 
	ИзФайла = Параметры.ИзФайла;
	ВладельцыАналитики = Параметры.ВладельцыАналитики;
	ДиаграммыИсточник = Параметры.ДиаграммыИсточник;
	ДашбордыИсточник = Параметры.ДашбордыИсточник;
	ОбъектыАналитикиИсточник = Параметры.ОбъектыАналитикиИсточник;
	Папки = Параметры.Папки;
	Диаграммы = Параметры.Диаграммы;
	Дашборды = Параметры.Дашборды;
	
	Если ВыбранныйОбъект.Тип = "chart" Тогда
		ОбъектИсточник = НайтиПоИдентификатору(ДиаграммыИсточник, ИдентификаторОбъекта);
	ИначеЕсли ВыбранныйОбъект.Тип = "dashboard" Тогда
		ОбъектИсточник = НайтиПоИдентификатору(ДашбордыИсточник, ИдентификаторОбъекта);
	КонецЕсли;
	
	Если ИзФайла Тогда
		ИдентификаторНовогоОбъекта = ИдентификаторОбъекта;
	Иначе
		ИдентификаторНовогоОбъекта = НовыйИдентификатор();
	КонецЕсли;
	
	Если ОбъектИсточник.Type = "chart" Тогда
		ПоляНовогоОбъекта = ПоляДиаграммы(ОбъектИсточник, ИдентификаторНовогоОбъекта, Панель.Owner, Панель.OwnerName);
		ДобавитьДиаграммуВТаблицуДиаграмм(Диаграммы, ПоляНовогоОбъекта);
	ИначеЕсли ОбъектИсточник.Type = "dashboard" Тогда
		ПоляНовогоОбъекта = ПоляДашборда(ОбъектИсточник, ИдентификаторНовогоОбъекта, Панель.Owner, Панель.OwnerName);
		ДобавитьДашбордВТаблицуДашбордов(Дашборды, ПоляНовогоОбъекта);
	КонецЕсли;
	
	ВладелецАналитики = НайтиПоИдентификатору(ВладельцыАналитики, Панель.Owner);
	ПоляПользователяАналитики = ПоляВладельца(ВладелецАналитики);
	
	Если ПоляПользователяАналитики["links"].Найти(ИдентификаторНовогоОбъекта) = Неопределено Тогда
		ПоляПользователяАналитики["links"].Добавить(ИдентификаторНовогоОбъекта);
	КонецЕсли;
	
	Для Каждого Элемент Из ПоляНовогоОбъекта["links"] Цикл
		ОбъектАналитикиИсточник = НайтиПоИдентификатору(ОбъектыАналитикиИсточник, Элемент);
		
		Если ОбъектАналитикиИсточник = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИзФайла Тогда
			ИдНовогоОбъектаАналитики = Элемент;
		Иначе
			ИдНовогоОбъектаАналитики = НовыйИдентификатор();
		КонецЕсли;
		
		Если ПоляПользователяАналитики["links"].Найти(ИдНовогоОбъектаАналитики) = Неопределено Тогда
			ПоляПользователяАналитики["links"].Добавить(ИдНовогоОбъектаАналитики);
		КонецЕсли;
		
		Пользователь_DataMap = JSONВЗначение(ПоляПользователяАналитики["data"]);
		ИмяТипаОбъекта = ОбъектАналитикиИсточник.Type;
		Если ИмяТипаОбъекта = "colorScheme" Или ИмяТипаОбъекта = "globalMacro" Или ИмяТипаОбъекта = "gradient" 
			Или ИмяТипаОбъекта = "markerMap" Или ИмяТипаОбъекта = "areasMapping" Тогда
			
			ИмяПоляИдентификаторов = ИмяТипаОбъекта + "Ids";
			ПользовательПоляИдентификаторов = Пользователь_DataMap.Получить(ИмяПоляИдентификаторов); //СписокЗначений
			Если ПользовательПоляИдентификаторов <> Неопределено Тогда
				ПользовательПоляИдентификаторов.Добавить(ИдНовогоОбъектаАналитики)
			Иначе
				МассивИд = Новый Массив();
				МассивИд.Добавить(ИдНовогоОбъектаАналитики);
				Пользователь_DataMap.Вставить(ИмяПоляИдентификаторов, МассивИд);
			КонецЕсли;
		КонецЕсли;
		ПоляПользователяАналитики["data"] = ЗначениеВJSON(Пользователь_DataMap);
		
		ПоляОбъектаАналитики = ПоляОбъектаАналитики(ОбъектАналитикиИсточник, ИдНовогоОбъектаАналитики, Панель.Owner, Панель.OwnerName);
		ПоляОбъектаАналитикиJson = ЗначениеВJSON(ПоляОбъектаАналитики);
		ЗаписатьСхему(ПоляОбъектаАналитикиJson);
		
		СсылкиСвязанногоОбъекта = ПоляОбъектаАналитики["links"];
		Если СсылкиСвязанногоОбъекта <> Неопределено Тогда
			Для Каждого Элемент2 Из СсылкиСвязанногоОбъекта Цикл
				СвязанныйОбъект = НайтиПоИдентификатору(ОбъектАналитикиИсточник, Элемент2);
				Если СвязанныйОбъект = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ПоляСвязанногоОбъекта = ПоляОбъектаАналитики(СвязанныйОбъект, , Панель.Owner, Панель.OwnerName);
				ПоляСвязанногоОбъектаJson = ЗначениеВJSON(ПоляСвязанногоОбъекта);
				ЗаписатьСхему(ПоляСвязанногоОбъектаJson);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	ИдентификаторыНовогоОбъекта = Новый Массив();
	ИдентификаторыНовогоОбъекта.Добавить(ИдентификаторНовогоОбъекта);
	КорневаяПапка = НайтиПоИдентификатору(Папки, Панель.Data_RootFolderId);
	
	ДополнительныеПараметры = ДополнительныеПараметрыПолейПапки();
	ДополнительныеПараметры.Дополнительные_FileIds = ИдентификаторыНовогоОбъекта;
	ПоляКорневойПапки = ПоляПапки(КорневаяПапка, ДополнительныеПараметры);
	
	ПоляНовогоОбъектаJson = ЗначениеВJSON(ПоляНовогоОбъекта);
	ПоляКорневойПапкиJson = ЗначениеВJSON(ПоляКорневойПапки);
	ПоляПользователяАналитикиJson = ЗначениеВJSON(ПоляПользователяАналитики);
	
	ЗаписатьСхему(ПоляНовогоОбъектаJson);
	ЗаписатьСхему(ПоляКорневойПапкиJson);
	ЗаписатьСхему(ПоляПользователяАналитикиJson);
	
КонецПроцедуры

Процедура ПодключитьКПанели(Панель, ВыбранныйОбъект, Параметры)

	ВладельцыАналитики = Параметры.ВладельцыАналитики;
	Диаграммы = Параметры.Диаграммы;
	Дашборды = Параметры.Дашборды;
	Папки = Параметры.Папки;
	
	КорневаяПапка = НайтиПоИдентификатору(Папки, Панель.Data_RootFolderId);
	
	ИдентификаторыВыбранногоОбъекта = Новый Массив();
	ИдентификаторыВыбранногоОбъекта.Добавить(ВыбранныйОбъект.Идентификатор);
	
	Если ВыбранныйОбъект.Тип = "folder" Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыПолейПапки();
		ДополнительныеПараметры.Дополнительные_FolderIds = ИдентификаторыВыбранногоОбъекта;
		ПоляКорневойПапки = ПоляПапки(КорневаяПапка, ДополнительныеПараметры);
	Иначе
		ДополнительныеПараметры = ДополнительныеПараметрыПолейПапки();
		ДополнительныеПараметры.Дополнительные_FileIds = ИдентификаторыВыбранногоОбъекта;
		ПоляКорневойПапки = ПоляПапки(КорневаяПапка, ДополнительныеПараметры);
	КонецЕсли;
	
	Если ВыбранныйОбъект.Тип = "chart" Тогда
		ОбъектИсточник = НайтиПоИдентификатору(Диаграммы, ВыбранныйОбъект.Идентификатор);
	ИначеЕсли ВыбранныйОбъект.Тип = "dashboard" Тогда
		ОбъектИсточник = НайтиПоИдентификатору(Дашборды, ВыбранныйОбъект.Идентификатор);
	ИначеЕсли ВыбранныйОбъект.Тип = "folder" Тогда
		ОбъектИсточник = НайтиПоИдентификатору(Папки, ВыбранныйОбъект.Идентификатор);
	КонецЕсли;
	
	ВладелецАналитики = НайтиПоИдентификатору(ВладельцыАналитики, Панель.Owner);
	ПоляПользователяАналитики = ПоляВладельца(ВладелецАналитики);
	
	Если ПоляПользователяАналитики["links"].Найти(ВыбранныйОбъект.Идентификатор) = Неопределено Тогда
		ПоляПользователяАналитики["links"].Добавить(ВыбранныйОбъект.Идентификатор);
	КонецЕсли;
	
	Для Каждого Элемент Из ОбъектИсточник.Links Цикл
		Если ПоляПользователяАналитики["links"].Найти(Элемент) = Неопределено Тогда
			ПоляПользователяАналитики["links"].Добавить(Элемент.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ПоляКорневойПапкиJson = ЗначениеВJSON(ПоляКорневойПапки);
	ПоляПользователяАналитикиJson = ЗначениеВJSON(ПоляПользователяАналитики);
	
	ЗаписатьСхему(ПоляКорневойПапкиJson);
	ЗаписатьСхему(ПоляПользователяАналитикиJson);
	
КонецПроцедуры

// Удалить из панели.
// 
// Параметры:
//  Панель - СтрокаТаблицыЗначений - Панель
//  ВыбранныйОбъект - СтрокаДереваЗначений - Выбранный объект
//  Параметры - см. Обработки.УправлениеПанелями1САналитики.ПараметрыУдаленияПанели
Процедура УдалитьИзПанели(Панель, ВыбранныйОбъект, Параметры)

	ВладельцыАналитики = Параметры.ВладельцыАналитики;
	Диаграммы = Параметры.Диаграммы;
	Дашборды = Параметры.Дашборды;
	Папки = Параметры.Папки;
	
	КорневаяПапка = НайтиПоИдентификатору(Папки, Панель.Data_RootFolderId);

	Если ВыбранныйОбъект.Тип = "folder" Тогда
		ИмяКоллекцииПоиска = "Data_FolderIds";
	Иначе
		ИмяКоллекцииПоиска = "Data_FileIds";
	КонецЕсли;
	
	ОбработатьСписокПанелей(КорневаяПапка, ИмяКоллекцииПоиска, Папки, ВыбранныйОбъект.Идентификатор);
	
	ПоляКорневойПапки = ПоляПапки(КорневаяПапка);
	
	Если ВыбранныйОбъект.Тип = "chart" Тогда
		ОбъектИсточник = НайтиПоИдентификатору(Диаграммы, ВыбранныйОбъект.Идентификатор);
	ИначеЕсли ВыбранныйОбъект.Тип = "dashboard" Тогда
		ОбъектИсточник = НайтиПоИдентификатору(Дашборды, ВыбранныйОбъект.Идентификатор);
	ИначеЕсли ВыбранныйОбъект.Тип = "folder" Тогда
		ОбъектИсточник = НайтиПоИдентификатору(Папки, ВыбранныйОбъект.Идентификатор);
	КонецЕсли;
	
	ВладелецАналитики = НайтиПоИдентификатору(ВладельцыАналитики, Панель.Owner);
	ПоляПользователяАналитики = ПоляВладельца(ВладелецАналитики);
	
	НайденныйЭлемент = ПоляПользователяАналитики["links"].Найти(ВыбранныйОбъект.Идентификатор);
	Если НайденныйЭлемент <> Неопределено Тогда
		ПоляПользователяАналитики["links"].Удалить(НайденныйЭлемент);
	КонецЕсли;
	
	Для Каждого Элемент Из ОбъектИсточник.Links Цикл
		НайденныйЭлемент = ПоляПользователяАналитики["links"].Найти(Элемент);
		Если НайденныйЭлемент <> Неопределено Тогда
			ПоляПользователяАналитики["links"].Удалить(НайденныйЭлемент);
		КонецЕсли;
	КонецЦикла;
	
	ПоляКорневойПапкиJson = ЗначениеВJSON(ПоляКорневойПапки);
	ПоляПользователяАналитикиJson = ЗначениеВJSON(ПоляПользователяАналитики);
	
	ЗаписатьСхему(ПоляКорневойПапкиJson);
	ЗаписатьСхему(ПоляПользователяАналитикиJson);
	
КонецПроцедуры

Процедура ОбработатьСписокПанелей(Папка, ИмяКоллекцииПоиска, Папки, ОбъектИдентификатор, Удалено = Ложь)
	
	СписокПоиска = Папка[ИмяКоллекцииПоиска];
	
	НайденныйЭлемент = СписокПоиска.НайтиПоЗначению(ОбъектИдентификатор);
	Если НайденныйЭлемент <> Неопределено Тогда
		СписокПоиска.Удалить(НайденныйЭлемент);
		Удалено = Истина;
		Возврат;
	Иначе
		Для Каждого ВложеннаяПапкаИдентификатор Из Папка.Data_FolderIds Цикл
			Если Удалено Тогда
				Возврат;
			КонецЕсли;
			
			ВложеннаяПапка = НайтиПоИдентификатору(Папки, ВложеннаяПапкаИдентификатор.Значение);
			
			Если Папка.Owner <> ВложеннаяПапка.Owner Тогда
				Возврат;
			КонецЕсли;
			
			Папка = ВложеннаяПапка;
			ОбработатьСписокПанелей(Папка, ИмяКоллекцииПоиска, Папки, ОбъектИдентификатор, Удалено);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли