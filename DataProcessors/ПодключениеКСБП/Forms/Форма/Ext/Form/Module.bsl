///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаДлительнаяОперация;
	Элементы.ДекорацияСостояние.Заголовок   = НСтр("ru = 'Получение списка участников СБП, пожалуйста, подождите...'");
	
	РежимРаботы = Параметры.РежимРаботы;
	ДополнительныеПараметры = Параметры.ДополнительныеПараметры;
	ОснованиеПлатежа = Параметры.ОснованиеПлатежа;
	ДанныеКопирования = Неопределено;
	
	Если РежимРаботы = СистемаБыстрыхПлатежейКлиентСервер.ИдентификаторОперацииСозданиеНастройки() Тогда
		НастройкаПодключенияКопирование = Параметры.НастройкаПодключения;
	Иначе
		НастройкаПодключенияРедактируемая = Параметры.НастройкаПодключения;
	КонецЕсли;
	
	Если НастройкаПодключенияКопирование <> Неопределено Тогда
		ДанныеКопирования = Справочники.НастройкиПодключенияКСистемеБыстрыхПлатежей.ДанныеКопирования(
			НастройкаПодключенияКопирование);
	КонецЕсли;
	
	ОтображатьОписаниеСервиса = Параметры.ОтображатьОписаниеСервиса
		И Не Справочники.НастройкиПодключенияКСистемеБыстрыхПлатежей.ЕстьНастройкиПодключения();
	ЗаполненыДанныеАутентификации =
		ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	
	Если Параметры.Свойство("БИК") Тогда
		ИдентификаторУчастника = СистемаБыстрыхПлатежейСлужебный.ИнтегрированныйУчастникСБППоБИК(
			Параметры.БИК);
	ИначеЕсли ДанныеКопирования <> Неопределено И ДанныеКопирования.Свойство("ИдентификаторУчастника") Тогда
		ИдентификаторУчастника = ДанныеКопирования.ИдентификаторУчастника
	КонецЕсли;
	
	Если Параметры.Свойство("ОтборУчастников")
		И ЗначениеЗаполнено(Параметры.ОтборУчастников)
		И Не ЗначениеЗаполнено(ИдентификаторУчастника)Тогда
		
		ОтборУчастников = Параметры.ОтборУчастников;
		
		КлючиПоиска = Новый Структура;
		КлючиПоиска.Вставить("ПлатежныйАгрегатор", Истина);
		
		ПлатежныеАгрегаторы.ЗагрузитьЗначения(
			СистемаБыстрыхПлатежейСлужебный.УчастникиСБППоНастройкам(КлючиПоиска));
		
		КлючиПоиска = Новый Структура;
		КлючиПоиска.Вставить("КассовыеСсылки", Истина);
		
		ПоддержкаКассовыхСсылок.ЗагрузитьЗначения(
			СистемаБыстрыхПлатежейСлужебный.УчастникиСБППоНастройкам(КлючиПоиска));
		
	КонецЕсли;
	
	// Видимость должна быть включена в переопределении.
	Элементы.ДекорацияДополнительнаяИнформация.Видимость = Ложь;
	
	Если РежимРаботы = СистемаБыстрыхПлатежейКлиентСервер.ИдентификаторОперацииСозданиеНастройки() Тогда
		
		СистемаБыстрыхПлатежейСлужебный.ДобавитьНастройкиОплаты(
			ЭтотОбъект,
			Элементы.ГруппаНастройкиОплаты,
			НастройкаПодключенияКопирование,
			ОснованиеПлатежа,
			Истина);
			
		СистемаБыстрыхПлатежейСлужебный.НастроитьЭлементыФормыПодключения(
			ЭтотОбъект,
			Неопределено,
			ДополнительныеПараметры);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкаПодключенияКопирование) Тогда
		ЗаполнитьЗначенияСвойств(
			ЭтотОбъект,
			ДанныеКопирования);
	ИначеЕсли ЗначениеЗаполнено(ОснованиеПлатежа) Тогда
		ЗаполнитьЗначенияСвойств(
			ЭтотОбъект,
			ДанныеКопирования);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ШаблоныСообщений")
		И ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПc2b") Тогда
		
		ЕстьОтправкаSMS = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОтправкаSMS");
		ЕстьОтправкаПисем = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями");
		
		МодульПереводыСБПc2bСлужебный = ОбщегоНазначения.ОбщийМодуль("ПереводыСБПc2bСлужебный");
		РезультатПроверки = ПереводыСБПc2bСлужебный.ВсеШаблоныСозданы();
		ВсеШаблоныСозданыSMS = РезультатПроверки.SMS;
		ВсеШаблоныСозданыПисьма = РезультатПроверки.Письмо;
		
		Если Не РезультатПроверки.ВсеШаблоны Тогда
			ОткрыватьСтраницуШаблоныСообщений = ИспользоватьШаблоныСообщений(
				ЕстьОтправкаПисем,
				ЕстьОтправкаSMS);
			СоздатьШаблоныПисемАвтоматически = Истина;
			СоздатьШаблоныSMSАвтоматически = Истина;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания(
		"ПолучитьУчастниковСБП",
		0.1,
		Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПарольИПППриИзменении(Элемент)
	
	ИнтернетПоддержкаПользователейКлиент.ПриИзмененииСекретныхДанных(
		Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПарольИППНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИнтернетПоддержкаПользователейКлиент.ОтобразитьСекретныеДанные(
		ЭтотОбъект,
		Элемент,
		"ПарольИПП");
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПользовательскоеСоглашениеОбработкаНавигационнойСсылки(
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "open:userAgreement" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму(
			"Обработка.ПодключениеКСБП.Форма.ПользовательскоеСоглашение",
			,
			ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОписаниеРезультатаОбработкаНавигационнойСсылки(
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "open:log" Тогда
		СтандартнаяОбработка = Ложь;
		СистемаБыстрыхПлатежейКлиент.ОткрытьЖурналРегистрации();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПодсказкаНастройкиОбработкаНавигационнойСсылки(
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "open:instrurtions" Тогда
		СтандартнаяОбработка = Ложь;
		ИнтернетПоддержкаПользователейКлиент.ОткрытьСтраницуИнтегрированногоСайта(
			ИнтернетПоддержкаПользователейКлиентСервер.URLСтраницыПорталаПоддержки(
				"/app/1csbp#additionalInfo"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПоясненияПодключенияАвторизацияОбработкаНавигационнойСсылки(
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "action:openPortal" Тогда
		СтандартнаяОбработка = Ложь;
		ИнтернетПоддержкаПользователейКлиент.ОткрытьВебСтраницу(
			ИнтернетПоддержкаПользователейКлиентСервер.URLСтраницыСервисаLogin(
				,
				ИнтернетПоддержкаПользователейКлиент.НастройкиСоединенияССерверами()));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОписаниеОбработкаНавигационнойСсылки(
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "open:sbpDescription" Тогда
		СтандартнаяОбработка = Ложь;
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(
			"https://v8.1c.ru/sbp/");
	КонецЕсли;
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПриИзмененииНастройкиОплаты(Элемент)
	
	ПриИзмененииНастройкиОплатыНаСервере();
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПриИзмененииНастройкиАутентификации(
		Элемент,
		Текст,
		СтандартнаяОбработка)
	
	ИнтернетПоддержкаПользователейКлиент.ПриИзмененииСекретныхДанных(
		Элемент);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_НачалоВыбораНастройкиАутентификации(
		Элемент,
		ДанныеВыбора,
		СтандартнаяОбработка)
	
	ИнтернетПоддержкаПользователейКлиент.ОтобразитьСекретныеДанные(
		ЭтотОбъект,
		Элемент,
		Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияДополнительнаяИнформацияОбработкаНавигационнойСсылки(
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка)
		
	ДанныеФормы = Новый Структура;
	ДанныеФормы.Вставить("ПараметрыОплатыСБПc2b", НастройкиОплатыПоДаннымФормы());
	ДанныеФормы.Вставить("НастройкаПодключения", Неопределено);
	ДанныеФормы.Вставить("Модифицированность", ЭтотОбъект.Модифицированность);
	
	СистемаБыстрыхПлатежейКлиент.ПриОбработкеНавигационнойСсылкиДополнительнойИнформации(
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка,
		ДанныеФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСпискаШаблоныСообщенийНажатие(Элемент)
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ШаблоныСообщений") Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура();
	Отбор.Вставить("Ссылка", СозданныеШаблоныСообщений);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
	ИмяФормыСпискаШаблонов = "Справочник.ШаблоныСообщений.ФормаСписка";
	ОткрытьФорму(ИмяФормыСпискаШаблонов, ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкиШаблоновОбработкаНавигационнойСсылки(
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки <> "open:paymentPurpose" Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкаПодключения", НастройкаПодключения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДекорацияНастройкиШаблоновЗавершение",
		ЭтотОбъект);
	
	ОткрытьФорму(
		"Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей.Форма.ФормаНастройкиНазначенияПлатежа",
		ПараметрыФормы,
		ЭтотОбъект,
		ЭтотОбъект.УникальныйИдентификатор,
		,
		,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКассовыеСсылкиОбработкаНавигационнойСсылки(
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки <> "open:cashQrc" Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ОповещениеПослеЗакрытияФормыКассовыхСсылок = Новый ОписаниеОповещения(
		"ПослеЗакрытияФормыКассовыхСсылок",
		ЭтотОбъект,
		Новый Структура);
	
	ПараметрыНастройки = Новый Структура;
	ПараметрыНастройки.Вставить("НастройкаПодключения", НастройкаПодключения);
	
	ПереводыСБПc2bКлиент.ПриНастройкеКассовыхСсылок(
		ПараметрыНастройки,
		ОповещениеПослеЗакрытияФормыКассовыхСсылок);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУчастникиСБП

&НаКлиенте
Процедура УчастникиСБПВыбор(
		Элемент,
		ВыбраннаяСтрока,
		Поле,
		СтандартнаяОбработка)
	
	Далее(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Далее(Команда)
	
	Отказ = Ложь;
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОбщаяИнформация Тогда
		
		Если Не ЗаполненыДанныеАутентификации Тогда
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПодключениеКПорталу;
		ИначеЕсли ЗначениеЗаполнено(ИдентификаторУчастника) Тогда
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНастройкиУчастникаСБП;
		Иначе
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВыборУчастника;
		КонецЕсли;
		
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПодключениеКПорталу Тогда
		
		Результат = ИнтернетПоддержкаПользователейКлиентСервер.ПроверитьДанныеАутентификации(
			Новый Структура("Логин, Пароль",
			ЛогинИПП, ПарольИПП));
		
		Если Результат.Отказ Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				Результат.СообщениеОбОшибке,
				,
				Результат.Поле);
			Возврат;
		КонецЕсли;
		
		ПроверитьПодключениеКПорталу1СИТС(
			ЛогинИПП,
			ПарольИПП,
			Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ЛогинИПП = "";
		ПарольИПП = "";
		
		Если ЗначениеЗаполнено(ИдентификаторУчастника) Тогда
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНастройкиУчастникаСБП;
		Иначе
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВыборУчастника;
		КонецЕсли;
		
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВыборУчастника Тогда
		
		Отказ = Ложь;
		Если Элементы.УчастникиСБП.ТекущаяСтрока = Неопределено Тогда
			Отказ = Истина;
		Иначе
			СтрокаУчастникСБП = УчастникиСБП.НайтиПоИдентификатору(
				Элементы.УчастникиСБП.ТекущаяСтрока);
			Если СтрокаУчастникСБП = Неопределено Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если Отказ Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Не выбран банк для подключения к Системе быстрых платежей.'"),
				,
				,
				"УчастникиСБП");
			Возврат;
		КонецЕсли;
		
		ИдентификаторУчастника = СтрокаУчастникСБП.ИдентификаторУчастника;
		
		ДобавитьНастройкиПодключения(
			СтрокаУчастникСБП.АдресЛичногоКабинета,
			СтрокаУчастникСБП.ТекстПредупреждения,
			СтрокаУчастникСБП.ПартнерАгентаСБП,
			СтрокаУчастникСБП.АдресСтраницыЗаявки,
			СтрокаУчастникСБП.ИдентификаторУчастника);
		
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНастройкиУчастникаСБП Тогда
		
		ПроверитьПараметрыПодключения(Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПрикладныеНастройки Тогда
		
		Если Не ЗначениеЗаполнено(Наименование) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Не заполнено поле ""Наименование"".'"),
				,
				,
				"Наименование");
			Возврат;
		КонецЕсли;
		
		Если ОткрыватьСтраницуШаблоныСообщений Тогда
			ОткрытьСтраницуШаблоныСообщений();
		Иначе
			НоваяНастройкаПодключения();
		КонецЕсли;
		
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаШаблоныСообщений Тогда
		СоздатьШаблоныСообщений();
		НоваяНастройкаПодключения();
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРезультат Тогда
		ЭтотОбъект.Закрыть(Истина);
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНастройкиУчастникаСБП Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВыборУчастника;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПрикладныеНастройки Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНастройкиУчастникаСБП;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаШаблоныСообщений Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПрикладныеНастройки;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРезультат Тогда
		Если РежимРаботы = СистемаБыстрыхПлатежейКлиентСервер.ИдентификаторОперацииСозданиеНастройки() Тогда
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПрикладныеНастройки;
		Иначе
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНастройкиУчастникаСБП;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНастройкуОтправкиSMS(Команда)
	
	ОповещениеОЗакрытииПомощника = Новый ОписаниеОповещения(
		"ПослеЗакрытияФормыНастройкиОтправкиSMS",
		ЭтотОбъект);
		
	ОткрытьФорму(
		"ОбщаяФорма.НастройкаОтправкиSMS",
		,
		ЭтотОбъект,
		,
		,
		,
		ОповещениеОЗакрытииПомощника);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьУчетнуюЗаписьЭлектроннойПочты(Команда)
	
	ОповещениеОЗакрытииПомощника = Новый ОписаниеОповещения(
		"ПослеЗакрытияФормыПомощникаСозданияУчетнойЗаписиПочты",
		ЭтотОбъект);
	
	ОткрытьФорму(
		"Справочник.УчетныеЗаписиЭлектроннойПочты.ФормаОбъекта"
		,
		,
		ЭтотОбъект,
		,
		,
		,
		ОповещениеОЗакрытииПомощника);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УчастникиСБП

&НаКлиенте
Процедура ПолучитьУчастниковСБП()
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	РезультатВыполнения = ПолучитьУчастниковСБПЗапускЗадания(
		ЭтотОбъект.УникальныйИдентификатор);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения(
		"ПолучитьУчастниковСБПЗапускЗаданияЗавершение",
		ЭтотОбъект);
		
	Если РезультатВыполнения.Статус = "Выполнено" Или РезультатВыполнения.Статус = "Ошибка" Тогда
		ПолучитьУчастниковСБПЗапускЗаданияЗавершение(
			РезультатВыполнения,
			Неопределено);
		Возврат;
	КонецЕсли;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
		РезультатВыполнения,
		ОповещениеОЗавершении,
		ПараметрыОжидания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьУчастниковСБПЗапускЗадания(УникальныйИдентификатор)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение актуального списка участников СБП.'");
	
	РезультатВыполнения = ДлительныеОперации.ВыполнитьВФоне(
		"СистемаБыстрыхПлатежейСлужебный.ПолучитьУчастниковСБПВФоне",
		Неопределено,
		ПараметрыВыполнения);
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьУчастниковСБПЗапускЗаданияЗавершение(
		Результат,
		ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		
		РезультатОперации = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
			УстановитьОтображениеИнформацииОбОшибке(
				РезультатОперации.СообщениеОбОшибке,
				Ложь,
				Ложь);
		Иначе
			
			Для Каждого КлючЗначение Из РезультатОперации.ДанныеУчастников Цикл
				Если ОтборУчастников = "ПлатежныеАгрегаторы"
					И ПлатежныеАгрегаторы.НайтиПоЗначению(КлючЗначение.Ключ) = Неопределено Тогда
					Продолжить;
				ИначеЕсли ОтборУчастников = "Банки" 
					И ПлатежныеАгрегаторы.НайтиПоЗначению(КлючЗначение.Ключ) <> Неопределено Тогда
					Продолжить;
				ИначеЕсли ОтборУчастников = "КассовыеСсылки" 
					И ПоддержкаКассовыхСсылок.НайтиПоЗначению(КлючЗначение.Ключ) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				НовыйУчастник = УчастникиСБП.Добавить();
				НовыйУчастник.Участник = КлючЗначение.Значение.Представление;
				НовыйУчастник.ИдентификаторУчастника = КлючЗначение.Ключ;
				НовыйУчастник.АдресЛичногоКабинета = КлючЗначение.Значение.АдресСтраницыПодключения;
				НовыйУчастник.ТекстПредупреждения = КлючЗначение.Значение.ТекстПредупреждения;
				НовыйУчастник.ПартнерАгентаСБП = КлючЗначение.Значение.ПартнерАгентаСБП;
				НовыйУчастник.АдресСтраницыЗаявки = КлючЗначение.Значение.АдресСтраницыЗаявки;
				НовыйУчастник.ПорядокОтображения = КлючЗначение.Значение.ПорядокОтображения;
				НовыйУчастник.БИК.ЗагрузитьЗначения(КлючЗначение.Значение.БИК);
			КонецЦикла;
			
			УчастникиСБП.Сортировать("ПорядокОтображения, Участник");
			
			Если ЗначениеЗаполнено(ИдентификаторУчастника) Тогда
				НастройкиУчастника = РезультатОперации.ДанныеУчастников.Получить(
					ИдентификаторУчастника);
				Если НастройкиУчастника <> Неопределено Тогда
					ДобавитьНастройкиПодключения(
						НастройкиУчастника.АдресСтраницыПодключения,
						НастройкиУчастника.ТекстПредупреждения,
						НастройкиУчастника.ПартнерАгентаСБП,
						НастройкиУчастника.АдресСтраницыЗаявки,
						ИдентификаторУчастника);
				Иначе
					ИдентификаторУчастника = Неопределено;
				КонецЕсли;
			КонецЕсли;
			
			Если ОтображатьОписаниеСервиса Тогда
				Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОбщаяИнформация;
			ИначеЕсли Не ЗаполненыДанныеАутентификации Тогда
				Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПодключениеКПорталу;
			ИначеЕсли ЗначениеЗаполнено(ИдентификаторУчастника) Тогда
				Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНастройкиУчастникаСБП;
			Иначе
				Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВыборУчастника;
			КонецЕсли;
			
			ДанныеУчастниковЗагружены = Истина;
			
		КонецЕсли;
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ИнформацияОбОшибке = Результат.КраткоеПредставлениеОшибки;
		УстановитьОтображениеИнформацииОбОшибке(ИнформацияОбОшибке);
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

#КонецОбласти

#Область Подключение

&НаСервереБезКонтекста
Процедура ПроверитьПодключениеКПорталу1СИТС(Логин, Пароль, Отказ)
	
	РезультатПроверки = ИнтернетПоддержкаПользователей.ПроверитьЛогинИПароль(
		Логин,
		Пароль);
	
	Если РезультатПроверки.Результат Тогда
		
		ДанныеАутентификации = Новый Структура;
		ДанныеАутентификации.Вставить("Логин", Логин);
		ДанныеАутентификации.Вставить("Пароль", Пароль);
		
		УстановитьПривилегированныйРежим(Истина);
		ИнтернетПоддержкаПользователей.СохранитьДанныеАутентификации(
			ДанныеАутентификации);
		УстановитьПривилегированныйРежим(Ложь);
	Иначе
		ОбщегоНазначения.СообщитьПользователю(
			РезультатПроверки.СообщениеОбОшибке,
			,
			,
			,
			Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПараметрыПодключения(Отказ)
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	РезультатВыполнения = ПроверитьПараметрыПодключенияЗапускЗадания(
		Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения(
		"ПроверитьПараметрыПодключенияЗавершение",
		ЭтотОбъект);
		
	Если РезультатВыполнения.Статус = "Выполнено" Или РезультатВыполнения.Статус = "Ошибка" Тогда
		ПроверитьПараметрыПодключенияЗавершение(РезультатВыполнения, Неопределено);
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаДлительнаяОперация;
	Элементы.ДекорацияСостояние.Заголовок   = НСтр("ru = 'Проверка параметров подключения к Системе быстрых платежей.'");
	
	УстановитьВидимостьДоступность();
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
		РезультатВыполнения,
		ОповещениеОЗавершении,
		ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПараметрыПодключенияЗапускЗадания(Отказ)
	
	СистемаБыстрыхПлатежейСлужебный.ПроверитьНастройкиАутентификации(
		ЭтотОбъект,
		Отказ);
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыАутентификации = СистемаБыстрыхПлатежейСлужебный.НастройкиАутентификацииПоДаннымФормы(
		ЭтотОбъект);
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ПараметрыАутентификации", ПараметрыАутентификации);
	ПараметрыПроцедуры.Вставить("ИдентификаторУчастника", ИдентификаторУчастника);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(
		ЭтотОбъект.УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания
		= НСтр("ru = 'Проверка параметров подключения к Системе быстрых платежей.'");
	
	РезультатВыполнения = ДлительныеОперации.ВыполнитьВФоне(
		"СистемаБыстрыхПлатежейСлужебный.ПроверитьПараметрыПодключенияВФоне",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьПараметрыПодключенияЗавершение(
		Результат,
		ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		
		РезультатОперации = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНастройкиУчастникаСБП;
			ПоказатьПредупреждение(
				Неопределено,
				РезультатОперации.СообщениеОбОшибке);
		Иначе
			Если РежимРаботы = СистемаБыстрыхПлатежейКлиентСервер.ИдентификаторОперацииСозданиеНастройки() Тогда
				НастроитьПараметрыПодключения();
				Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПрикладныеНастройки;
			Иначе
				Результат = ИзменитьУчастника();
				Если Не Результат.Ошибка Тогда
					Оповестить("БИПСменаУчастникаСБП");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНастройкиУчастникаСБП;
		ИнформацияОбОшибке = Результат.КраткоеПредставлениеОшибки;
		ПоказатьПредупреждение(
			Неопределено,
			ИнформацияОбОшибке);
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНастройкиПодключения(
		Знач АдресЛичногоКабинета,
		Знач ТекстПредупреждения,
		Знач ПартнерАгентаСБП,
		Знач АдресСтраницыЗаявки,
		Знач ИдентификаторУчастника)
	
	СистемаБыстрыхПлатежейСлужебный.УдалитьНастройкиАутентификации(
		ЭтотОбъект);
	
	ПараметрыПодсказки = СистемаБыстрыхПлатежейСлужебный.НовыйПараметрПодсказки();
	ПараметрыПодсказки.ОтобразитьПодсказку  = Истина;
	ПараметрыПодсказки.АдресЛичногоКабинета = АдресЛичногоКабинета;
	ПараметрыПодсказки.ПартнерАгентаСБП = ПартнерАгентаСБП;
	ПараметрыПодсказки.АдресСтраницыЗаявки = АдресСтраницыЗаявки;
	ПараметрыПодсказки.ИдентификаторУчастника = ИдентификаторУчастника;
	
	СистемаБыстрыхПлатежейСлужебный.ДобавитьНастройкиАутентификации(
		ЭтотОбъект,
		Элементы.ГруппаНастройкиПодключения,
		Неопределено,
		ИдентификаторУчастника,
		ПараметрыПодсказки);
	
	НастройкиУчастникаСБП = СистемаБыстрыхПлатежейСлужебный.НастройкиУчастникаСБП(ИдентификаторУчастника);
	НастройкиПодключенияПрограммы = СистемаБыстрыхПлатежейСлужебный.НастройкиПодключенияПрограммы();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПc2b")
		И НастройкиПодключенияПрограммы.c2b.ИспользоватьНастройкуКассовыхСсылок = Истина
		И НастройкиУчастникаСБП.КассовыеСсылки Тогда
		СозданиеКассовыхСсылокДоступно = Истина;
	Иначе
		СозданиеКассовыхСсылокДоступно = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНастройкиУчастникаСБП;
	Элементы.ДекорацияПредупреждение.Заголовок = ТекстПредупреждения;
	
КонецПроцедуры

&НаСервере
Процедура НоваяНастройкаПодключения()
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Наименование", Наименование);
	ПараметрыЗаполнения.Вставить("ИдентификаторУчастника", ИдентификаторУчастника);
	
	ПараметрыАутентификации = СистемаБыстрыхПлатежейСлужебный.НастройкиАутентификацииПоДаннымФормы(
		ЭтотОбъект);
	
	ПараметрыОплаты = СистемаБыстрыхПлатежейСлужебный.НастройкиОплатыПоДаннымФормы(
		ЭтотОбъект);
	
	Результат = Справочники.НастройкиПодключенияКСистемеБыстрыхПлатежей.НоваяНастройкаПодключения(
		ПараметрыЗаполнения,
		ПараметрыАутентификации,
		ПараметрыОплаты);
	
	Если Результат.Ошибка Тогда
		УстановитьОтображениеИнформацииОбОшибке(
			Результат.СообщениеОбОшибке,
			Истина,
			Ложь);
	Иначе
		НастройкаПодключения = Результат.Ссылка;
		УстановитьОтображениеУспешногоЗавершения();
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Функция ИзменитьУчастника();
	
	ПараметрыАутентификации = СистемаБыстрыхПлатежейСлужебный.НастройкиАутентификацииПоДаннымФормы(
		ЭтотОбъект);
		
	Результат = Справочники.НастройкиПодключенияКСистемеБыстрыхПлатежей.ИзменитьУчастника(
		НастройкаПодключенияРедактируемая,
		ИдентификаторУчастника,
		ПараметрыАутентификации);
	
	Если Результат.Ошибка Тогда
		УстановитьОтображениеИнформацииОбОшибке(
			Результат.СообщениеОбОшибке,
			Истина,
			Ложь);
	Иначе
		УстановитьОтображениеУспешногоЗавершения();
		НастройкаПодключения = НастройкаПодключенияРедактируемая;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция НастройкиОплатыПоДаннымФормы()
	
	ПараметрыОплатыСБПc2b = СистемаБыстрыхПлатежейСлужебный.НастройкиОплатыПоДаннымФормы(
		ЭтотОбъект);
	
	ОбъектМетаданных = СистемаБыстрыхПлатежейСлужебный.НастройкиПодключенияПрограммы().c2b.ОбъектМетаданных;
	ИмяАтрибута = СистемаБыстрыхПлатежейСлужебный.АтрибутНастройкаПодключения(
		ОбъектМетаданных);
	ПараметрыОплатыСБПc2b.Вставить(ИмяАтрибута, Неопределено);
	
	Возврат ПараметрыОплатыСБПc2b;
	
КонецФункции

#КонецОбласти

#Область УправлениеЭлементамиФормы

&НаСервере
Процедура УстановитьОтображениеИнформацииОбОшибке(
		ИнформацияОбОшибке,
		Ошибка = Истина,
		ОтображатьЖР = Истина)
	
	Если ОтображатьЖР Тогда
		ПредставлениеОшибки = СтроковыеФункции.ФорматированнаяСтрока(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1
					|
					|
					|Подробную информацию см. в <a href = ""open:log"">Журнале регистрации</a>.'"),
				ИнформацияОбОшибке));
		
	Иначе
		ПредставлениеОшибки = ИнформацияОбОшибке;
	КонецЕсли;
	
	Элементы.ГруппаДополнительныеНастройки.Видимость = Ложь;
	Элементы.ГруппаСтраницы.ТекущаяСтраница          = Элементы.ГруппаРезультат;
	Элементы.ДекорацияОписаниеРезультата.Заголовок   = ПредставлениеОшибки;
	Элементы.ДекорацияКартинкаРезультат.Картинка     = ?(Ошибка,
		БиблиотекаКартинок.Ошибка32,
		БиблиотекаКартинок.Предупреждение32);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображениеУспешногоЗавершения()
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРезультат;
	Элементы.ДекорацияКартинкаРезультат.Картинка = БиблиотекаКартинок.Успешно32;
	ПодключениеЗавершено = Истина;
	Элементы.ДекорацияОписаниеРезультата.Заголовок   = НСтр("ru = 'Настройка подключения создана.'");
	Элементы.ГруппаСозданиеКассовыхСсылок.Видимость  = СозданиеКассовыхСсылокДоступно;
	Элементы.ГруппаДополнительныеНастройки.Видимость = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОбщаяИнформация
		Или Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПодключениеКПорталу
		Или Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВыборУчастника Тогда
		Элементы.Назад.Видимость = Ложь;
		Элементы.Далее.Видимость = Истина;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНастройкиУчастникаСБП
		Или Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПрикладныеНастройки Тогда
		Элементы.Назад.Видимость = Истина;
		Элементы.Далее.Видимость = Истина;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаДлительнаяОперация Тогда
		Элементы.Назад.Видимость = Ложь;
		Элементы.Далее.Видимость = Ложь;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРезультат Тогда
		Если ПодключениеЗавершено Тогда
			Элементы.Назад.Видимость  = Ложь;
			Элементы.Отмена.Видимость = Ложь;
			Элементы.Далее.Видимость  = Истина;
			Элементы.Далее.Заголовок  = НСтр("ru = 'OK'");
		ИначеЕсли Не ДанныеУчастниковЗагружены Тогда
			Элементы.Назад.Видимость  = Ложь;
			Элементы.Отмена.Видимость = Истина;
			Элементы.Далее.Видимость  = Ложь;
		Иначе
			Элементы.Назад.Видимость  = Истина;
			Элементы.Отмена.Видимость = Истина;
			Элементы.Далее.Видимость  = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Элементы.ДекорацияПредупреждение.Заголовок) Тогда
		Элементы.ГруппаПредупреждение.Видимость = Ложь;
	Иначе
		Элементы.ГруппаПредупреждение.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ШаблоныСообщений

&НаКлиенте
Процедура СоздатьШаблоныПисемАвтоматическиПриИзменении(Элемент)
	
	ОбработатьВидимостьПредупрежденияЭП();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьШаблоныSMSАвтоматическиПриИзменении(Элемент)
	
	ОбработатьВидимостьПредупрежденияSMS();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтраницуШаблоныСообщений()
	
	Если ЕстьОтправкаПисем И ЕстьОтправкаSMS Тогда
		ПредставлениеТиповШаблонов = НСтр("ru = 'писем и SMS'");
	ИначеЕсли ЕстьОтправкаПисем Тогда
		ПредставлениеТиповШаблонов = НСтр("ru = 'писем'");
	ИначеЕсли ЕстьОтправкаSMS Тогда
		ПредставлениеТиповШаблонов = НСтр("ru = 'SMS'");
	Иначе
		ПредставлениеТиповШаблонов = "";
	КонецЕсли;
	
	Элементы.ПодсказкаОписаниеШаблоновСообщений.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Элементы.ПодсказкаОписаниеШаблоновСообщений.Заголовок,
		ПредставлениеТиповШаблонов);
	
	Если Не ВсеШаблоныСозданыПисьма И ЕстьОтправкаПисем Тогда
		Элементы.ГруппаШаблоныПисем.Видимость = Истина;
		ОбработатьВидимостьПредупрежденияЭП();
	Иначе
		Элементы.ГруппаШаблоныПисем.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ВсеШаблоныСозданыSMS И ЕстьОтправкаSMS Тогда
		Элементы.ГруппаШаблоныSMS.Видимость = Истина;
		ОбработатьВидимостьПредупрежденияSMS();
	Иначе
		Элементы.ГруппаШаблоныSMS.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаШаблоныСообщений;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИспользоватьШаблоныСообщений(ЕстьОтправкаПисем, ЕстьОтправкаSMS)
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ШаблоныСообщений") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЕстьОтправкаSMS И Не ЕстьОтправкаПисем Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИспользоватьШаблоныСообщений = Ложь;
	ИнтеграцияПодсистемБИП.ПриПроверкеИспользованияШаблоновСообщенийСБП(ИспользоватьШаблоныСообщений);
	ПереводыСБПc2bПереопределяемый.ПриПроверкеИспользованияШаблоновСообщенийСБП(
		ИспользоватьШаблоныСообщений);
	
	Если Не ИспользоватьШаблоныСообщений Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПредопределенныеШаблоныСообщений = Новый Массив;
	ИнтеграцияПодсистемБИП.ПриОпределенииПредопределенныхШаблоновСообщенийСБППоТипам(
		ПредопределенныеШаблоныСообщений);
	ПереводыСБПc2bПереопределяемый.ПриОпределенииПредопределенныхШаблоновСообщенийСБППоТипам(
		ПредопределенныеШаблоныСообщений);
	
	Если Не ПредопределенныеШаблоныСообщений.Количество() Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьВидимостьПредупрежденияЭП()
	
	Элементы.ГруппаВниманиеНетУчетнойЗаписиЭлектроннойПочты.Видимость
		= (СоздатьШаблоныПисемАвтоматически И ИспользоватьРаботуСПочтой());
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВидимостьПредупрежденияSMS() 
	
	Элементы.ГруппаВниманиеНеНастроенаОтправкаSMS.Видимость
		= (СоздатьШаблоныSMSАвтоматически И ИспользоватьSMS());
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыПомощникаСозданияУчетнойЗаписиПочты(
		РезультатЗакрытия,
		ДополнительныеПараметры) Экспорт
	
	ОбработатьВидимостьПредупрежденияЭП();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыНастройкиОтправкиSMS(
		РезультатЗакрытия,
		ДополнительныеПараметры) Экспорт 
	
	ОбработатьВидимостьПредупрежденияSMS();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИспользоватьРаботуСПочтой()
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МодульРаботаСПочтовымиСообщениями = ОбщегоНазначения.ОбщийМодуль("РаботаСПочтовымиСообщениями");
	ДоступныеУчетныеЗаписиЭП = МодульРаботаСПочтовымиСообщениями.ДоступныеУчетныеЗаписи(Истина);
	
	Возврат МодульРаботаСПочтовымиСообщениями.ДоступнаОтправкаПисем()
		И ДоступныеУчетныеЗаписиЭП.Количество() = 0;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИспользоватьSMS()
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОтправкаSMS") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МодульОтправкаSMS = ОбщегоНазначения.ОбщийМодуль("ОтправкаSMS");
	
	Возврат (МодульОтправкаSMS.ДоступнаОтправкаSMS()
		И Не МодульОтправкаSMS.НастройкаОтправкиSMSВыполнена());
	
КонецФункции

&НаСервере
Процедура СоздатьШаблоныСообщений()
	
	Если СоздатьШаблоныПисемАвтоматически Или СоздатьШаблоныSMSАвтоматически Тогда
		
		ИнтернетПоддержкаПользователей.УстановитьИспользованиеШаблоновСообщений();
		ИнтернетПоддержкаПользователей.УстановитьИспользованиеЭлектроннойПочты();
		ИнтернетПоддержкаПользователей.УстановитьИспользованиеSMS();
		ИнтернетПоддержкаПользователей.УстановитьОтправкуПисемВФорматеHTML();
		
		МодульПереводыСБПc2bСлужебный = ОбщегоНазначения.ОбщийМодуль("ПереводыСБПc2bСлужебный");
		ПредопределенныеШаблоныСообщений = МодульПереводыСБПc2bСлужебный.СоздатьПредопределенныеШаблоныСообщений(
			СоздатьШаблоныПисемАвтоматически, 
			СоздатьШаблоныSMSАвтоматически);
		СозданныеШаблоныСообщений.ЗагрузитьЗначения(ПредопределенныеШаблоныСообщений);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаСозданыШаблоны",
		"Видимость",
		СозданныеШаблоныСообщений.Количество());
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура НастроитьПараметрыПодключения()
	
	СистемаБыстрыхПлатежейСлужебный.НастроитьПараметрыПодключения(
		ЭтотОбъект,
		ИдентификаторУчастника,
		ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииНастройкиОплатыНаСервере()
	
	СистемаБыстрыхПлатежейСлужебный.НастроитьЭлементыФормыПодключения(
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкиШаблоновЗавершение(
		Результат,
		ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Число") И Результат > 0 Тогда
		ПредставлениеСсылки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Настроить (%1)'"),
			Результат);
	Иначе
		ПредставлениеСсылки = НСтр("ru = 'Настроить'");
	КонецЕсли;
	
	Элементы.ДекорацияНастройкиШаблонов.Заголовок = СтроковыеФункцииКлиент.ФорматированнаяСтрока(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Шаблоны назначения: <a href = ""open:paymentPurpose"">%1</a>'"),
			ПредставлениеСсылки))
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыКассовыхСсылок(РезультатВыполнения, Параметры) Экспорт
	
	ЗаполнитьДекорацияКассовыеСсылки();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДекорацияКассовыеСсылки()
	
	СистемаБыстрыхПлатежейСлужебный.ЗаполнитьДекорацияКассовыеСсылки(
		ЭтотОбъект,
		НастройкаПодключения);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
