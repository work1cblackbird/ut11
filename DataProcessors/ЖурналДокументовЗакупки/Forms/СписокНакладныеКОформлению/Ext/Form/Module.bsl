
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	СтруктураБыстрогоОтбора = Неопределено;
	Параметры.Свойство("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		СтруктураБыстрогоОтбора.Свойство("Склад", Склад);
		СтруктураБыстрогоОтбора.Свойство("Организация", Организация);
		СтруктураБыстрогоОтбора.Свойство("СостояниеОрдера", СостояниеОрдера);
		СтруктураБыстрогоОтбора.Свойство("СостояниеПриобретения", СостояниеПриобретения);
		СтруктураБыстрогоОтбора.Свойство("СостояниеПоступленияПриобретения", СостояниеПоступленияПриобретения);
		СтруктураБыстрогоОтбора.Свойство("СостояниеПоступленияТоваров", СостояниеПоступленияТоваров);
		СтруктураБыстрогоОтбора.Свойство("Ссылка", Распоряжения);
	КонецЕсли;
	
	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	СвойстваСписка.ТекстЗапроса = ТекстЗапросаСпискаРаспоряженийНаПриемку();
	СвойстваСписка.ОсновнаяТаблица = "";
	СвойстваСписка.ДинамическоеСчитываниеДанных = Неопределено;
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.СписокРаспоряженияНаПриемку, СвойстваСписка);
	
	ЗаполнитьСпискиВыбораПоСостояниям();
	УстановитьПараметрыДинСписка();
#Область ОтборыПриСозданииНаСервере
	
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(СписокРаспоряженияНаОформление, "Организация", Организация, СтруктураБыстрогоОтбора);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(СписокРаспоряженияНаПриемку, "Организация", Организация, СтруктураБыстрогоОтбора);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(СписокРаспоряженияНаПоступление, "Организация", Организация, СтруктураБыстрогоОтбора);
	
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(СписокРаспоряженияНаПриемку,
		"СостояниеОрдера", 
		?(ЗначениеЗаполнено(СостояниеОрдера), Число(СостояниеОрдера), СостояниеОрдера),
		СтруктураБыстрогоОтбора,,,
		Истина);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(СписокРаспоряженияНаОформление,
		"СостояниеПриобретения", 
		?(ЗначениеЗаполнено(СостояниеПриобретения), Число(СостояниеПриобретения), СостояниеПриобретения),
		СтруктураБыстрогоОтбора,,,
		Истина);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(СписокРаспоряженияНаПоступление,
		"СостояниеПоступленияПриобретения", 
		?(ЗначениеЗаполнено(СостояниеПоступленияПриобретения), Число(СостояниеПоступленияПриобретения), СостояниеПоступленияПриобретения),
		СтруктураБыстрогоОтбора,,,
		Истина);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(СписокРаспоряженияНаПоступление,
		"СостояниеПоступленияТоваров", 
		?(ЗначениеЗаполнено(СостояниеПоступленияТоваров), Число(СостояниеПоступленияТоваров), СостояниеПоступленияТоваров),
		СтруктураБыстрогоОтбора,,,
		Истина);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(СписокРаспоряженияНаПриемку, 
		"Ссылка",
		?(Параметры.Свойство("ИмяТекущейСтраницы")
			И Параметры.ИмяТекущейСтраницы = "СтраницаРаспоряженияНаПриемку"
			И ЗначениеЗаполнено(Распоряжения), Распоряжения, Неопределено),
		СтруктураБыстрогоОтбора,,
		ВидСравненияКомпоновкиДанных.ВСписке);
		
#КонецОбласти
	
	ИспользоватьОтветственноеХранениеВПроцессеЗакупки = Ложь;
	ИспользоватьПоступлениеПоНесколькимЗаказам = ПолучитьФункциональнуюОпцию("ИспользоватьПоступлениеПоНесколькимЗаказам");
	ИспользоватьЗаказыПоставщикам = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам");
	ИспользоватьОрдернуюСхемуПриПоступлении = ПолучитьФункциональнуюОпцию("ИспользоватьОрдернуюСхемуПриПоступлении");
	ИспользоватьПоступленияТоваров = ПолучитьФункциональнуюОпцию("ИспользоватьНеотфактурованныеПоставки")
		Или ПолучитьФункциональнуюОпцию("ИспользоватьТоварыВПутиОтПоставщиков");
	ИспользоватьОтветственноеХранениеВПроцессеЗакупки = ПолучитьФункциональнуюОпцию(
		"ИспользоватьОтветственноеХранениеВПроцессеЗакупки");
	
	ПравоДобавлятьПриобретение = ПравоДоступа("Добавление", Метаданные.Документы.ПриобретениеТоваровУслуг);
	ПравоДобавлятьПриемкуТоваров = Ложь;
	ПравоДобавлятьПриемкуТоваров = ПравоДоступа("Добавление", Метаданные.Документы.ПриемкаТоваровНаХранение);
	
	Элементы.СписокРаспоряженияНаОформлениеСоздатьПриобретениеТоваровУслуг.Видимость = ПравоДобавлятьПриобретение;
	Элементы.ОформитьПриобретениеТоваровПоРаспоряжению.Видимость = ПравоДобавлятьПриобретение;
	Элементы.СписокРаспоряженияНаОформлениеВалюта.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют");
	
	Элементы.СписокРаспоряженияНаОформлениеОформитьАктОРасхождениях.Видимость
		= ПравоДоступа("Добавление", Метаданные.Документы.АктОРасхожденияхПослеПриемки);
		
	Элементы.ОформитьПоступлениеТоваров.Видимость
		= ПравоДоступа("Добавление", Метаданные.Документы.ПоступлениеТоваровНаСклад);
	
	Элементы.СтраницаРаспоряженияНаОформление.Видимость = ИспользоватьЗаказыПоставщикам;
	Элементы.СтраницаРаспоряженияНаПриемку.Видимость = ИспользоватьОрдернуюСхемуПриПоступлении;
	Элементы.СтраницаРаспоряженияНаПоступление.Видимость = ИспользоватьПоступленияТоваров;
	
	ПравоЧтениеСостояниеВыполненияДокументов = ПравоДоступа("Использование", Метаданные.Отчеты.СостояниеВыполненияДокументов);
	Элементы.СписокРаспоряженияНаОформлениеСостояниеВыполнения.Видимость = ПравоЧтениеСостояниеВыполненияДокументов;
	Элементы.СписокРаспоряженияНаПриемкуСостояниеВыполненияПриемка.Видимость = ПравоЧтениеСостояниеВыполненияДокументов;
	
	Если ИспользоватьОтветственноеХранениеВПроцессеЗакупки Тогда
		Элементы.СтраницаРаспоряженияНаОформление.Заголовок = НСтр("ru = 'К оформлению приобретения (приемки)'");
	КонецЕсли;
	
	НастроитьФормуПоСкладу();
	НастроитьССылкуСмТакже();
	УстановитьТекущуюСтраницу();
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтаФорма, "СканерШтрихкода");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияУТКлиент.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(ПодключаемоеОборудованиеУТКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "Запись_ПриобретениеТоваровУслуг"
		Или ИмяСобытия = "Запись_ПриемкаТоваровНаХранение"
		Или ИмяСобытия = "Запись_ЗаказПоставщику" Тогда
		
		ОбновитьТаблицуФормы(Элементы.СтраницаРаспоряженияНаОформление, Элементы.СписокРаспоряженияНаОформление);
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ПриходныйОрдерНаТовары"
		Или ИмяСобытия = "Запись_ПриобретениеТоваровУслуг"
		Или ИмяСобытия = "Запись_ПоступлениеТоваров"
		Или ИмяСобытия = "Запись_ПриемкаТоваровНаХранение"
		Или ИмяСобытия = "Запись_ЗаказПоставщику" 
		Или ИмяСобытия = "Запись_СписаниеРасхождений" Тогда
		
		ОбновитьТаблицуФормы(Элементы.СтраницаРаспоряженияНаПоступление, Элементы.СписокРаспоряженияНаПоступление);
		ОбновитьТаблицуФормы(Элементы.СтраницаРаспоряженияНаПриемку, Элементы.СписокРаспоряженияНаПриемку);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		СтруктураБыстрогоОтбора.Свойство("Склад", Склад);
		Настройки.Удалить("Склад");
		СтруктураБыстрогоОтбора.Свойство("Организация", Организация);
		Настройки.Удалить("Организация");
		СтруктураБыстрогоОтбора.Свойство("СостояниеОрдера", СостояниеОрдера);
		Настройки.Удалить("СостояниеОрдера");
		СтруктураБыстрогоОтбора.Свойство("СостояниеПриобретения", СостояниеПриобретения);
		Настройки.Удалить("СостояниеПриобретения");
		СтруктураБыстрогоОтбора.Свойство("СостояниеПоступленияТоваров", СостояниеПоступленияТоваров);
		Настройки.Удалить("СостояниеПоступленияТоваров");
		СтруктураБыстрогоОтбора.Свойство("СостояниеПоступленияПриобретения", СостояниеПоступленияПриобретения);
		Настройки.Удалить("СостояниеПоступленияПриобретения");
	Иначе
		Склад = Настройки.Получить("Склад");
		Организация = Настройки.Получить("Организация");
		СостояниеОрдера    = Настройки.Получить("СостояниеОрдера");
		СостояниеПриобретения = Настройки.Получить("СостояниеПриобретения");
		СостояниеПоступленияТоваров = Настройки.Получить("СостояниеПоступленияТоваров");
		СостояниеПоступленияПриобретения = Настройки.Получить("СостояниеПоступленияПриобретения");
	КонецЕсли;
	
	НастроитьФормуПоСкладу();
	
	МассивСписков = Новый Массив;
	МассивСписков.Добавить("СписокРаспоряженияНаПриемку");
	МассивСписков.Добавить("СписокРаспоряженияНаОформление");
	МассивСписков.Добавить("СписокРаспоряженияНаПоступление");
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ФормаСписка", ЭтаФорма);
	ПараметрыОтбора.Вставить("МассивСписков", МассивСписков);
	ПараметрыОтбора.Вставить("ИмяКолонки", "Организация");
	ПараметрыОтбора.Вставить("Значение", Организация);
	ПараметрыОтбора.Вставить("Настройки", Настройки);
	
	ОтборыСписковКлиентСервер.УстановитьОтборыПоЗначениюСпискаПриЗагрузкеИзНастроек(ПараметрыОтбора, СтруктураБыстрогоОтбора);
	
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриЗагрузкеИзНастроек(СписокРаспоряженияНаПриемку,
		"СостояниеОрдера",
		?(ЗначениеЗаполнено(СостояниеОрдера), Число(СостояниеОрдера), СостояниеОрдера),
		СтруктураБыстрогоОтбора,
		Настройки,
		ЗначениеЗаполнено(СостояниеОрдера),
		,
		Истина);
		
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриЗагрузкеИзНастроек(СписокРаспоряженияНаОформление,
		"СостояниеПриобретения",
		?(ЗначениеЗаполнено(СостояниеПриобретения), Число(СостояниеПриобретения), СостояниеПриобретения),
		СтруктураБыстрогоОтбора,
		Настройки,
		ЗначениеЗаполнено(СостояниеПриобретения),
		,
		Истина);
		
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриЗагрузкеИзНастроек(СписокРаспоряженияНаПоступление,
		"СостояниеПоступленияПриобретения",
		?(ЗначениеЗаполнено(СостояниеПоступленияПриобретения), Число(СостояниеПоступленияПриобретения), СостояниеПоступленияПриобретения),
		СтруктураБыстрогоОтбора,
		Настройки,
		ЗначениеЗаполнено(СостояниеПоступленияПриобретения),
		,
		Истина);
		
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриЗагрузкеИзНастроек(СписокРаспоряженияНаПоступление,
		"СостояниеПоступленияТоваров",
		?(ЗначениеЗаполнено(СостояниеПоступленияТоваров), Число(СостояниеПоступленияТоваров), СостояниеПоступленияТоваров),
		СтруктураБыстрогоОтбора,
		Настройки,
		ЗначениеЗаполнено(СостояниеПоступленияТоваров),
		,
		Истина);
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	НастроитьФормуПоСкладу();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокРаспоряженияНаОформление,
		"Организация",
		Организация,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(Организация));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокРаспоряженияНаПриемку,
		"Организация",
		Организация,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(Организация));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокРаспоряженияНаПоступление,
		"Организация",
		Организация,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(Организация));
	
	Элементы.СписокРаспоряженияНаОформление.ВыделенныеСтроки.Очистить();
	Элементы.СписокРаспоряженияНаПриемку.ВыделенныеСтроки.Очистить();
	Элементы.СписокРаспоряженияНаПоступление.ВыделенныеСтроки.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРаспоряженияНаОформлениеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура СостояниеОрдераПриИзменении(Элемент)
	Состояние = ?(ЗначениеЗаполнено(СостояниеОрдера), Число(СостояниеОрдера), 0);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокРаспоряженияНаПриемку,
		"СостояниеОрдера",
		Состояние,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(СостояниеОрдера));
КонецПроцедуры

&НаКлиенте
Процедура СостояниеПриобретенияПриИзменении(Элемент)
	
	Состояние = ?(ЗначениеЗаполнено(СостояниеПриобретения), Число(СостояниеПриобретения), 0);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокРаспоряженияНаОформление,
		"СостояниеПриобретения",
		Состояние,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(СостояниеПриобретения));
		
КонецПроцедуры

&НаКлиенте
Процедура СостояниеПоступленияТоваровПриИзменении(Элемент)
	
	Состояние = ?(ЗначениеЗаполнено(СостояниеПоступленияТоваров), Число(СостояниеПоступленияТоваров), 0);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокРаспоряженияНаПоступление,
		"СостояниеПоступленияТоваров",
		Состояние,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(СостояниеПоступленияТоваров));
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеПоступленияПриобретенияПриИзменении(Элемент)
	
	Состояние = ?(ЗначениеЗаполнено(СостояниеПоступленияПриобретения), Число(СостояниеПоступленияПриобретения), 0);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокРаспоряженияНаПоступление,
		"СостояниеПоступленияПриобретения",
		Состояние,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(СостояниеПоступленияПриобретения));
		
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница = Элементы.СтраницаРаспоряженияНаОформление Тогда 
		// &ЗамерПроизводительности
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
			"Обработка.ЖурналДокументовЗакупки.Форма.СписокНакладныеКОформлению.СтраницаРаспоряженияНаОформление");
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаРаспоряженияНаПоступление Тогда 
		// &ЗамерПроизводительности
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
			"Обработка.ЖурналДокументовЗакупки.Форма.СписокНакладныеКОформлению.СтраницаРаспоряженияНаПоступление");
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаРаспоряженияНаПриемку Тогда 
		// &ЗамерПроизводительности
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
			"Обработка.ЖурналДокументовЗакупки.Форма.СписокНакладныеКОформлению.СтраницаРаспоряженияНаПриемку");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СмТакжеВРаботеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	СтруктураБыстрогоОтбора = Новый Структура;
	СтруктураБыстрогоОтбора.Вставить("Организация",Организация);
	СтруктураБыстрогоОтбора.Вставить("Склад",Склад);
	
	ПараметрыЖурнала = Новый Структура;
	ПараметрыЖурнала.Вставить("СтруктураБыстрогоОтбора",СтруктураБыстрогоОтбора);
	ПараметрыЖурнала.Вставить("КлючНазначенияИспользования","Накладные");
		
	ПараметрыЖурнала.Вставить("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	
	ОткрытьФорму(НавигационнаяСсылкаФорматированнойСтроки, ПараметрыЖурнала); 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьПриобретениеТоваровУслуг(Команда)
	
	ЭлементСписокРаспоряжения = Элементы.СписокРаспоряженияНаОформление;
	
	ВыделенныеСтроки = ЭлементСписокРаспоряжения.ВыделенныеСтроки;
	Если Не ОбщегоНазначенияУТКЛиент.ВыбраныДокументыКОформлению(
				ВыделенныеСтроки,
				ПараметрыЖурнала("Накладные")) Тогда
		Возврат;
	КонецЕсли;
		
	ОчиститьСообщения();
	
	СписокРаспоряжений.Очистить();
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		НайденнаяСтрока = Элементы.СписокРаспоряженияНаОформление.ДанныеСтроки(Строка);
		ДобавленнаяСтрока = СписокРаспоряжений.Добавить();
		ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, НайденнаяСтрока);
	КонецЦикла;
	
	// Выбор варианта действия и возврат резульата в виде имени формы которую необходимо открыть и ее входящих параметров.
	ПараметрыСозданныхДокументов = ОформитьНакладныеПоЗаказамНаСервере();
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(ПараметрыСозданныхДокументов.СписокОшибок);
	
	Если ПараметрыСозданныхДокументов.Свойство("ТекстВопросаПользователю") Тогда
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения(ПараметрыСозданныхДокументов.ПроцедураОбработкиОтветаПользователя, ЭтотОбъект, ПараметрыСозданныхДокументов),
				ПараметрыСозданныхДокументов.ТекстВопросаПользователю, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли ПараметрыСозданныхДокументов.Свойство("ИмяФормы") Тогда
		
		Если ПараметрыСозданныхДокументов.Параметры.Свойство("СозданныеДокументы") Тогда
			
			ТекстОповещения = НСтр("ru = 'Создано документов: %1'");
			Если ПараметрыСозданныхДокументов.Параметры.СозданныеДокументы.Количество() > 0 Тогда
				ТекстОповещения = СтрШаблон(ТекстОповещения, ПараметрыСозданныхДокументов.Параметры.СозданныеДокументы.Количество());
				ПоказатьОповещениеПользователя(НСтр("ru = 'Создание документов'"), , ТекстОповещения);
			Иначе
				ТекстОповещения = СтрШаблон(ТекстОповещения, 0);
				ПоказатьОповещениеПользователя(НСтр("ru = 'Создание документов'"), , ТекстОповещения);
				Возврат;
			КонецЕсли;
			
			ПараметрыСозданныхДокументов.Параметры.Удалить("СозданныеДокументы");
			
		КонецЕсли;
		
		ОткрытьФорму(ПараметрыСозданныхДокументов.ИмяФормы, ПараметрыСозданныхДокументов.Параметры, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьАктОРасхождениях(Команда)
	
	ВыделенныеСтроки = Элементы.СписокРаспоряженияНаПриемку.ВыделенныеСтроки;
	
	Если Не ОбщегоНазначенияУТКЛиент.ВыбраныДокументыКОформлению(
				ВыделенныеСтроки,
				ПараметрыЖурнала("АктОРасхожденияхПослеПриемки")) Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	СписокРаспоряжений.Очистить();
	
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		
		НайденнаяСтрока = Элементы.СписокРаспоряженияНаПриемку.ДанныеСтроки(Строка);
		ДобавленнаяСтрока = СписокРаспоряжений.Добавить();
		ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, НайденнаяСтрока);
		
	КонецЦикла;
	
	ПараметрыСозданныхДокументов = ОформитьАктыНаСервере();
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(ПараметрыСозданныхДокументов.СписокОшибок);
	
	Если ПараметрыСозданныхДокументов.Свойство("ТекстВопросаПользователю") Тогда
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения(ПараметрыСозданныхДокументов.ПроцедураОбработкиОтветаПользователя, ЭтотОбъект, ПараметрыСозданныхДокументов),
				ПараметрыСозданныхДокументов.ТекстВопросаПользователю, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли ПараметрыСозданныхДокументов.Свойство("ИмяФормы") Тогда
		
		Если ПараметрыСозданныхДокументов.Параметры.Свойство("СозданныеДокументы") Тогда
			
			ТекстОповещения = НСтр("ru = 'Создано документов: %1'");
			Если ПараметрыСозданныхДокументов.Параметры.СозданныеДокументы.Количество() > 0 Тогда
				ТекстОповещения = СтрШаблон(ТекстОповещения, ПараметрыСозданныхДокументов.Параметры.СозданныеДокументы.Количество());
				ПоказатьОповещениеПользователя(НСтр("ru = 'Создание документов'"), , ТекстОповещения);
			Иначе
				ТекстОповещения = СтрШаблон(ТекстОповещения, 0);
				ПоказатьОповещениеПользователя(НСтр("ru = 'Создание документов'"), , ТекстОповещения);
				Возврат;
			КонецЕсли;
			
			ПараметрыСозданныхДокументов.Параметры.Удалить("СозданныеДокументы");
			
		КонецЕсли;
		
		ОткрытьФорму(ПараметрыСозданныхДокументов.ИмяФормы, ПараметрыСозданныхДокументов.Параметры, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеВыполнения(Команда)
	ТекущиеДанные = Элементы.СписокРаспоряженияНаОформление.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
		ИЛИ ТипЗнч(ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.СоглашенияСПоставщиками")
		ИЛИ ТипЗнч(ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	СписокДокументов = Новый СписокЗначений;
	СписокДокументов.Добавить(ТекущиеДанные.Ссылка);
	ОткрытьФорму("Отчет.СостояниеВыполненияДокументов.Форма.ФормаОтчета", Новый Структура("ВходящиеДокументы", СписокДокументов));
КонецПроцедуры

&НаКлиенте
Процедура СостояниеВыполненияПоступление(Команда)
	ТекущиеДанные = Элементы.СписокРаспоряженияНаПоступление.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
		ИЛИ ТипЗнч(ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.СоглашенияСПоставщиками")
		ИЛИ ТипЗнч(ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	СписокДокументов = Новый СписокЗначений;
	СписокДокументов.Добавить(ТекущиеДанные.Ссылка);
	ОткрытьФорму("Отчет.СостояниеВыполненияДокументов.Форма.ФормаОтчета", Новый Структура("ВходящиеДокументы", СписокДокументов));
КонецПроцедуры

&НаКлиенте
Процедура СостояниеВыполненияПриемка(Команда)
	ТекущиеДанные = Элементы.СписокРаспоряженияНаПриемку.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
		ИЛИ ТипЗнч(ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.СоглашенияСПоставщиками")
		ИЛИ ТипЗнч(ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	СписокДокументов = Новый СписокЗначений;
	СписокДокументов.Добавить(ТекущиеДанные.Ссылка);
	ОткрытьФорму("Отчет.СостояниеВыполненияДокументов.Форма.ФормаОтчета", Новый Структура("ВходящиеДокументы", СписокДокументов));
КонецПроцедуры

&НаКлиенте
Процедура ОформитьПоПриемке(Команда)
	
	ВыделенныеСтроки = Элементы.СписокРаспоряженияНаПриемку.ВыделенныеСтроки;
	
	Если Не ОбщегоНазначенияУТКЛиент.ВыбраныДокументыКОформлению(
				ВыделенныеСтроки,
				ПараметрыЖурнала("Накладные")) Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	СписокРаспоряжений.Очистить();
	
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		
		НайденнаяСтрока = Элементы.СписокРаспоряженияНаПриемку.ДанныеСтроки(Строка);
		ДобавленнаяСтрока = СписокРаспоряжений.Добавить();
		ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, НайденнаяСтрока);
		
	КонецЦикла;
	
	ПараметрыСозданныхДокументов = ОформитьПриобретенияНаСервереПоОрдерам();
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(ПараметрыСозданныхДокументов.СписокОшибок);
	
	Если ПараметрыСозданныхДокументов.Свойство("ТекстВопросаПользователю") Тогда
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения(ПараметрыСозданныхДокументов.ПроцедураОбработкиОтветаПользователя, ЭтотОбъект, ПараметрыСозданныхДокументов),
				ПараметрыСозданныхДокументов.ТекстВопросаПользователю, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли ПараметрыСозданныхДокументов.Свойство("ИмяФормы") Тогда
		
		Если ПараметрыСозданныхДокументов.Параметры.Свойство("СозданныеДокументы") Тогда
			
			ТекстОповещения = НСтр("ru = 'Создано документов: %1'");
			Если ПараметрыСозданныхДокументов.Параметры.СозданныеДокументы.Количество() > 0 Тогда
				ТекстОповещения = СтрШаблон(ТекстОповещения, ПараметрыСозданныхДокументов.Параметры.СозданныеДокументы.Количество());
				ПоказатьОповещениеПользователя(НСтр("ru = 'Создание документов'"), , ТекстОповещения);
			Иначе
				ТекстОповещения = СтрШаблон(ТекстОповещения, 0);
				ПоказатьОповещениеПользователя(НСтр("ru = 'Создание документов'"), , ТекстОповещения);
				Возврат;
			КонецЕсли;
			
			ПараметрыСозданныхДокументов.Параметры.Удалить("СозданныеДокументы");
			
		КонецЕсли;
		
		ОткрытьФорму(ПараметрыСозданныхДокументов.ИмяФормы, ПараметрыСозданныхДокументов.Параметры, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьПоступлениеТоваров(Команда)
	
	ОформитьПоступлениеТоваровУслуг();
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьПриобретениеТоваровПоРаспоряжению(Команда)
	
	ЭлементСписокРаспоряжения = Элементы.СписокРаспоряженияНаПоступление;
	
	ВыделенныеСтроки = ЭлементСписокРаспоряжения.ВыделенныеСтроки;
	Если Не ОбщегоНазначенияУТКЛиент.ВыбраныДокументыКОформлению(
				ВыделенныеСтроки,
				ПараметрыЖурнала("Накладные")) Тогда
		Возврат;
	КонецЕсли;
		
	ОчиститьСообщения();
	
	СписокРаспоряжений.Очистить();
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		НайденнаяСтрока = Элементы.СписокРаспоряженияНаПоступление.ДанныеСтроки(Строка);
		ДобавленнаяСтрока = СписокРаспоряжений.Добавить();
		ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, НайденнаяСтрока);
	КонецЦикла;
	
	// Выбор варианта действия и возврат резульата в виде имени формы которую необходимо открыть и ее входящих параметров.
	ПараметрыСозданныхДокументов = ОформитьПриобретенияПоЗаказамНаСервере();
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(ПараметрыСозданныхДокументов.СписокОшибок);
	
	Если ПараметрыСозданныхДокументов.Свойство("ТекстВопросаПользователю") Тогда
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения(ПараметрыСозданныхДокументов.ПроцедураОбработкиОтветаПользователя, ЭтотОбъект, ПараметрыСозданныхДокументов),
				ПараметрыСозданныхДокументов.ТекстВопросаПользователю, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли ПараметрыСозданныхДокументов.Свойство("ИмяФормы") Тогда
		
		Если ПараметрыСозданныхДокументов.Параметры.Свойство("СозданныеДокументы") Тогда
			
			ТекстОповещения = НСтр("ru = 'Создано документов: %1'");
			Если ПараметрыСозданныхДокументов.Параметры.СозданныеДокументы.Количество() > 0 Тогда
				ТекстОповещения = СтрШаблон(ТекстОповещения, ПараметрыСозданныхДокументов.Параметры.СозданныеДокументы.Количество());
				ПоказатьОповещениеПользователя(НСтр("ru = 'Создание документов'"), , ТекстОповещения);
			Иначе
				ТекстОповещения = СтрШаблон(ТекстОповещения, 0);
				ПоказатьОповещениеПользователя(НСтр("ru = 'Создание документов'"), , ТекстОповещения);
				Возврат;
			КонецЕсли;
			
			ПараметрыСозданныхДокументов.Параметры.Удалить("СозданныеДокументы");
			
		КонецЕсли;
		
		ОткрытьФорму(ПараметрыСозданныхДокументов.ИмяФормы, ПараметрыСозданныхДокументов.Параметры, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьСписаниеРасхожденийПоступлениеПриобретение(Команда)
	ЭлементСписокРаспоряжения = Элементы.СписокРаспоряженияНаПоступление;
	ВыделенныеСтроки = ЭлементСписокРаспоряжения.ВыделенныеСтроки;
	Если Не ОбщегоНазначенияУТКЛиент.ВыбраныДокументыКОформлению(
				ВыделенныеСтроки,
				ПараметрыЖурнала("Накладные")) Тогда
		Возврат;
	КонецЕсли;
		
	ОчиститьСообщения();
	
	СписокРаспоряжений.Очистить();
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		НайденнаяСтрока = Элементы.СписокРаспоряженияНаПоступление.ДанныеСтроки(Строка);
		ДобавленнаяСтрока = СписокРаспоряжений.Добавить();
		ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, НайденнаяСтрока);
	КонецЦикла;
	// Выбор варианта действия и возврат резульата в виде имени формы которую необходимо открыть и ее входящих параметров.
	ПараметрыСозданныхДокументов = ОформитьСписаниеРасхожденийНаСервере();
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(ПараметрыСозданныхДокументов.СписокОшибок);
	
	Если ПараметрыСозданныхДокументов.Свойство("ТекстВопросаПользователю") Тогда
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения(ПараметрыСозданныхДокументов.ПроцедураОбработкиОтветаПользователя, ЭтотОбъект, ПараметрыСозданныхДокументов),
				ПараметрыСозданныхДокументов.ТекстВопросаПользователю, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли ПараметрыСозданныхДокументов.Свойство("ИмяФормы") Тогда
		
		Если ПараметрыСозданныхДокументов.Параметры.Свойство("СозданныеДокументы") Тогда
			
			ТекстОповещения = НСтр("ru = 'Создано документов: %1'");
			Если ПараметрыСозданныхДокументов.Параметры.СозданныеДокументы.Количество() > 0 Тогда
				ТекстОповещения = СтрШаблон(ТекстОповещения, ПараметрыСозданныхДокументов.Параметры.СозданныеДокументы.Количество());
				ПоказатьОповещениеПользователя(НСтр("ru = 'Создание документов'"), , ТекстОповещения);
			Иначе
				ТекстОповещения = СтрШаблон(ТекстОповещения, 0);
				ПоказатьОповещениеПользователя(НСтр("ru = 'Создание документов'"), , ТекстОповещения);
				Возврат;
			КонецЕсли;
			
			ПараметрыСозданныхДокументов.Параметры.Удалить("СозданныеДокументы");
			
		КонецЕсли;
		
		ОткрытьФорму(ПараметрыСозданныхДокументов.ИмяФормы, ПараметрыСозданныхДокументов.Параметры, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьПоступлениеУслуг(Команда)
	
	ОформитьПоступлениеТоваровУслуг(Истина);
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОформитьПоступлениеТоваровУслуг(ЭтоУслуги = Ложь)
	ЭлементСписокРаспоряжения = Элементы.СписокРаспоряженияНаПоступление;
	
	ВыделенныеСтроки = ЭлементСписокРаспоряжения.ВыделенныеСтроки;
	Если Не ОбщегоНазначенияУТКЛиент.ВыбраныДокументыКОформлению(
				ВыделенныеСтроки,
				ПараметрыЖурнала("Накладные")) Тогда
		Возврат;
	КонецЕсли;
		
	ОчиститьСообщения();
	
	СписокРаспоряжений.Очистить();
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		НайденнаяСтрока = Элементы.СписокРаспоряженияНаПоступление.ДанныеСтроки(Строка);
		ДобавленнаяСтрока = СписокРаспоряжений.Добавить();
		ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, НайденнаяСтрока);
	КонецЦикла;
	
	// Выбор варианта действия и возврат резульата в виде имени формы которую необходимо открыть и ее входящих параметров.
	ПараметрыСозданныхДокументов = ОформитьПоступленияПоЗаказамНаСервере(ЭтоУслуги);
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(ПараметрыСозданныхДокументов.СписокОшибок);
	
	Если ПараметрыСозданныхДокументов.Свойство("ТекстВопросаПользователю") Тогда
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения(ПараметрыСозданныхДокументов.ПроцедураОбработкиОтветаПользователя, ЭтотОбъект, ПараметрыСозданныхДокументов),
				ПараметрыСозданныхДокументов.ТекстВопросаПользователю, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли ПараметрыСозданныхДокументов.Свойство("ИмяФормы") Тогда
		
		Если ПараметрыСозданныхДокументов.Параметры.Свойство("СозданныеДокументы") Тогда
			
			ТекстОповещения = НСтр("ru = 'Создано документов: %1'");
			Если ПараметрыСозданныхДокументов.Параметры.СозданныеДокументы.Количество() > 0 Тогда
				ТекстОповещения = СтрШаблон(ТекстОповещения, ПараметрыСозданныхДокументов.Параметры.СозданныеДокументы.Количество());
				ПоказатьОповещениеПользователя(НСтр("ru = 'Создание документов'"), , ТекстОповещения);
			Иначе
				ТекстОповещения = СтрШаблон(ТекстОповещения, 0);
				ПоказатьОповещениеПользователя(НСтр("ru = 'Создание документов'"), , ТекстОповещения);
				Возврат;
			КонецЕсли;
			
			ПараметрыСозданныхДокументов.Параметры.Удалить("СозданныеДокументы");
			
		КонецЕсли;
		
		ОткрытьФорму(ПараметрыСозданныхДокументов.ИмяФормы, ПараметрыСозданныхДокументов.Параметры, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	// Условное оформление динамического списка "СписокРаспоряженияНаОформление"
	СписокУсловноеОформление = СписокРаспоряженияНаОформление.КомпоновщикНастроек.Настройки.УсловноеОформление;
	СписокУсловноеОформление.Элементы.Очистить();
	
	// Документ имеет высокий приоритет
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Документ имеет высокий приоритет'");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Приоритет");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.Приоритеты.ПолучитьВысшийПриоритет();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ВысокийПриоритетДокумента);
	
	// Документ имеет низкий приоритет
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Документ имеет низкий приоритет'");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Приоритет");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.Приоритеты.ПолучитьНизшийПриоритет();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.НизкийПриоритетДокумента);
	
	//
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект,
																	"СписокРаспоряженияНаОформление.Дата",
																	"СписокРаспоряженияНаОформлениеДата");
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект,
																	"СписокРаспоряженияНаПоступление.Дата",
																	"СписокРаспоряженияНаПоступлениеДата");
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект,
																	"СписокРаспоряженияНаПриемку.Дата",
																	"СписокРаспоряженияНаПриемкуДата");
	
КонецПроцедуры

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Функция СсылкаНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	Менеджеры = Новый Массив();
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ПриобретениеТоваровУслуг.ПустаяСсылка"));
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ПриемкаТоваровНаХранение.ПустаяСсылка"));
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ЗаказПоставщику.ПустаяСсылка"));
	Возврат ШтрихкодированиеПечатныхФормКлиент.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	Если Не ШтрихкодированиеНоменклатурыКлиент.ШтрихкодыВалидны(Данные) Тогда
		Возврат;
	КонецЕсли;
	
	МассивСсылок = СсылкаНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		
		Ссылка = МассивСсылок[0];
		Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			Элементы.СписокРаспоряженияНаОформление.ТекущаяСтрока = Ссылка;
			Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаРаспоряженияНаОформление;
		КонецЕсли;
		
		ПоказатьЗначение(Неопределено, Ссылка);
		
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПриемкаТоваров

&НаСервере
Функция ОпределитьНаличиеОформленныхНакладных(РаспоряжениеСсылка,
												Склад,
												ХозяйственнаяОперация,
												ЗаполнениеПоОрдерам = Истина,
												ЗаполненияПоступленияТоваров = Ложь,
												ЭтоОформлениеПриобретенияПоПоступлениям = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаЗаказы.ЗаказПоставщику	КАК Заказ,
	|	ТаблицаЗаказы.Регистратор		КАК Накладная
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам КАК ТаблицаЗаказы
	|ГДЕ
	|	&ЗаполнениеПоОрдерам
	|	И НЕ &ЗаполненияПоступленияТоваров
	|	И ТаблицаЗаказы.Склад = &Склад
	|	И ТаблицаЗаказы.ЗаказПоставщику = &РаспоряжениеСсылка
	|	И ТИПЗНАЧЕНИЯ(ТаблицаЗаказы.Регистратор) В (ТИП(Документ.ПриобретениеТоваровУслуг),
	|												ТИП(Документ.ПриемкаТоваровНаХранение))
	|	И ТаблицаЗаказы.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|													ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&РаспоряжениеСсылка			КАК Заказ,
	|	ДокументПриобретения.Ссылка	КАК Накладная
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК ДокументПриобретения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг.Товары КАК ТоварыПриобретения
	|		ПО ДокументПриобретения.Ссылка = ТоварыПриобретения.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК СторноДокументы
	|		ПО СторноДокументы.СторнируемыйДокумент = ДокументПриобретения.Ссылка
	|			И НЕ СторноДокументы.ДополнительнаяЗапись
	|ГДЕ
	|	&ЗаполнениеПоОрдерам
	|	И НЕ &ЗаполненияПоступленияТоваров
	|	И ДокументПриобретения.Проведен
	|	И ТоварыПриобретения.Склад = &Склад
	|	И (ДокументПриобретения.Соглашение = &РаспоряжениеСсылка
	|		ИЛИ ДокументПриобретения.Договор = &РаспоряжениеСсылка)
	|	И СторноДокументы.Ссылка ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументПоступления.Распоряжение	КАК Заказ,
	|	ДокументПоступления.Ссылка			КАК Накладная
	|ИЗ
	|	Документ.ПоступлениеТоваровНаСклад КАК ДокументПоступления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК СторноДокументы
	|		ПО СторноДокументы.СторнируемыйДокумент = ДокументПоступления.Ссылка
	|			И НЕ СторноДокументы.ДополнительнаяЗапись
	|ГДЕ
	|	&ЗаполнениеПоОрдерам
	|	И ДокументПоступления.Проведен
	|	И ДокументПоступления.Склад = &Склад
	|	И ДокументПоступления.Распоряжение = &РаспоряжениеСсылка
	|	И ДокументПоступления.ХозяйственнаяОперация = &ОперацияПоступления
	|	И СторноДокументы.Ссылка ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварыКПоступлению.ДокументПоступления	КАК Заказ,
	|	ТоварыКПоступлению.Регистратор			КАК Накладная
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению КАК ТоварыКПоступлению
	|ГДЕ
	|	НЕ &ЗаполнениеПоОрдерам
	|	И ТоварыКПоступлению.Склад = &Склад
	|	И ТоварыКПоступлению.ДокументПоступления = &РаспоряжениеСсылка
	|	И ТоварыКПоступлению.ХозяйственнаяОперация = &ХозяйственнаяОперация
	|	И ТоварыКПоступлению.ВидДвижения = Значение(ВидДвиженияНакопления.Расход)
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКПоступлению.ДокументПоступления,
	|	ТоварыКПоступлению.Регистратор
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКПоступлению.КОформлениюПоступленийПоНакладным) > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&РаспоряжениеСсылка		КАК Заказ,
	|	ДокументПриемки.Ссылка	КАК Накладная
	|ИЗ
	|	Документ.ПриемкаТоваровНаХранение КАК ДокументПриемки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемкаТоваровНаХранение.Товары КАК ТоварыПриемки
	|		ПО ДокументПриемки.Ссылка = ТоварыПриемки.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК СторноДокументы
	|		ПО СторноДокументы.СторнируемыйДокумент = ДокументПриемки.Ссылка
	|			И НЕ СторноДокументы.ДополнительнаяЗапись
	|ГДЕ
	|	&ЗаполнениеПоОрдерам
	|	И ДокументПриемки.Проведен
	|	И ТоварыПриемки.Склад = &Склад
	|	И (ДокументПриемки.Соглашение = &РаспоряжениеСсылка
	|		ИЛИ ДокументПриемки.Договор = &РаспоряжениеСсылка)
	|	И СторноДокументы.Ссылка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКПоступлениюОстатки.ДокументПоступления	КАК ДокументПоступления,
	|	ТоварыКПоступлениюОстатки.Номенклатура			КАК Номенклатура,
	|	ТоварыКПоступлениюОстатки.Характеристика		КАК Характеристика,
	|	ТоварыКПоступлениюОстатки.Назначение			КАК Назначение,
	|	ТоварыКПоступлениюОстатки.Серия					КАК Серия,
	|	ТоварыКПоступлениюОстатки.КОформлениюПоступленийПоОрдерамОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению.Остатки(
	|			,
	|			ДокументПоступления = &РаспоряжениеСсылка
	|			И Склад = &Склад) КАК ТоварыКПоступлениюОстатки
	|ГДЕ
	|	&ЗаполнениеПоОрдерам
	|	И ТоварыКПоступлениюОстатки.КОформлениюПоступленийПоОрдерамОстаток <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыКПоступлениюОстатки.ДокументПоступления	КАК ДокументПоступления,
	|	ТоварыКПоступлениюОстатки.Номенклатура			КАК Номенклатура,
	|	ТоварыКПоступлениюОстатки.Характеристика		КАК Характеристика,
	|	ТоварыКПоступлениюОстатки.Назначение			КАК Назначение,
	|	ТоварыКПоступлениюОстатки.Серия					КАК Серия,
	|	ТоварыКПоступлениюОстатки.КОформлениюПоступленийПоНакладнымОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению.Остатки(
	|			,
	|			ДокументПоступления = &РаспоряжениеСсылка
	|			И Склад = &Склад) КАК ТоварыКПоступлениюОстатки
	|ГДЕ
	|	НЕ &ЗаполнениеПоОрдерам
	|	И ТоварыКПоступлениюОстатки.КОформлениюПоступленийПоНакладнымОстаток <> 0";
	
	ПарыОперацийРаздельнойЗакупки	= ЗакупкиСервер.ПарыОперацийРаздельнойЗакупки(Истина);
	ОперацияПоступления				= ПарыОперацийРаздельнойЗакупки.Получить(ХозяйственнаяОперация);
	
	Запрос.УстановитьПараметр("РаспоряжениеСсылка",				РаспоряжениеСсылка);
	Запрос.УстановитьПараметр("Склад",							Склад);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация",			ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("ОперацияПоступления",			ОперацияПоступления);
	Запрос.УстановитьПараметр("ЗаполнениеПоОрдерам",			ЗаполнениеПоОрдерам);
	Запрос.УстановитьПараметр("ЗаполненияПоступленияТоваров",	ЗаполненияПоступленияТоваров);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ОформленныеНакладные = РезультатыЗапроса[0].Выгрузить();
	
	АдресТаблицаНакладныхВоВременномХранилище	= ПоместитьВоВременноеХранилище(ОформленныеНакладные);
	НастройкиФормыПереоформленияНакладных		= НастройкиФормыПереоформленияНакладных(РаспоряжениеСсылка,
																						Склад,
																						ХозяйственнаяОперация,
																						ЭтоОформлениеПриобретенияПоПоступлениям);
	
	Возврат Не РезультатыЗапроса[1].Пустой()
			И ОформленныеНакладные.Количество() > 0;
	
КонецФункции

&НаСервере
Функция РеквизитыШапкиДоговора(РаспоряжениеСсылка)
	
	ОсновныеРеквизитыДоговора	= "Организация, Контрагент, Партнер, Подразделение, ХозяйственнаяОперация";
	РеквизитыДоговора			= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РаспоряжениеСсылка,
																			ОсновныеРеквизитыДоговора);
	
	Возврат РеквизитыДоговора;
	
КонецФункции

&НаСервере
Функция НастройкиФормыПереоформленияНакладных(РаспоряжениеСсылка,
												Склад,
												ХозяйственнаяОперация,
												ЭтоОформлениеПриобретенияПоПоступлениям = Ложь)
	
	ДанныеЗаполнения = Новый Структура;
	ХозОперацииПоступленияТоваров = ХозОперацииПоступленияТоваров();
	
	НастройкиФормы = НакладныеСервер.НастройкиФормыПереоформленияНакладных();
	НастройкиФормы.Заголовок			= НСтр("ru = 'Переоформление документов закупки по выбранным распоряжениям'");
	НастройкиФормы.ИмяФормыНакладной	= "Документ.ПриобретениеТоваровУслуг.Форма.ФормаДокумента";
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи Тогда
		НастройкиФормы.ИмяФормыНакладной = "Документ.ПриемкаТоваровНаХранение.Форма.ФормаДокумента";
	КонецЕсли;
	
	Если Не ЭтоОформлениеПриобретенияПоПоступлениям
		И ХозОперацииПоступленияТоваров.Найти(ХозяйственнаяОперация) <> Неопределено Тогда
			
		ДанныеЗаполнения.Вставить("ДокументОснование",				РаспоряжениеСсылка);
		ДанныеЗаполнения.Вставить("СкладПоступления",				Склад);
		ДанныеЗаполнения.Вставить("ХозяйственнаяОперацияПриемки",	ХозяйственнаяОперация);
		ДанныеЗаполнения.Вставить("ЗаполнятьПоОрдеру",				Истина);
		
		НастройкиФормы.ИмяФормыНакладной				= "Документ.ПоступлениеТоваровНаСклад.Форма.ФормаДокумента";
		НастройкиФормы.ЭтоДокументПоступлениеТоваров	= Истина;
		
		
	ИначеЕсли ТипЗнч(РаспоряжениеСсылка) = Тип("СправочникСсылка.СоглашенияСПоставщиками")
		Или ТипЗнч(РаспоряжениеСсылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		
		ДанныеЗаполнения.Вставить("ДокументОснование",	РаспоряжениеСсылка);
		ДанныеЗаполнения.Вставить("СкладПоступления",	Склад);
		
	КонецЕсли;
	
	НастройкиФормы.ДанныеЗаполнения		= ДанныеЗаполнения;
	НастройкиФормы.НакладнаяНаОтгрузку	= Ложь;
	НастройкиФормы.НакладнаяНаПриемку	= Истина;
	
	Возврат НастройкиФормы;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ЗаполнитьСпискиВыбораПоСостояниям()
	
	СписокВыбора = Элементы.СостояниеОрдера.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("1", НСтр("ru='Оформлены ордера, не оформлены накладные'"), Ложь, БиблиотекаКартинок.СоздатьНакладную);
	СписокВыбора.Добавить("5", НСтр("ru='Не оформлены ордера, оформлены накладные'"), Ложь, БиблиотекаКартинок.НеОформленыОрдера);
	СписокВыбора.Добавить("3", НСтр("ru='Ордера не соответствуют накладным'"), Ложь, БиблиотекаКартинок.НесоответствиеОрдерНакладная);
	
	СписокВыбора = Элементы.СостояниеПриобретения.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("1", НСтр("ru='Создать накладную'"),Ложь, БиблиотекаКартинок.СоздатьНакладную);
	СписокВыбора.Добавить("2", НСтр("ru='Дооформить накладную'"),Ложь, БиблиотекаКартинок.ДооформитьНакладную);
	
	СписокВыбора = Элементы.СостояниеПоступленияТоваров.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("0", НСтр("ru='Поступления соответствуют распоряжениям'"), Ложь, БиблиотекаКартинок.ОформленаНакладная);
	СписокВыбора.Добавить("1", НСтр("ru='Создать поступление'"),Ложь, БиблиотекаКартинок.СоздатьНакладную);
	СписокВыбора.Добавить("3", НСтр("ru='Поступления не соответствуют распоряжениям'"), Ложь, БиблиотекаКартинок.НесоответствиеОрдерНакладная);
	
	СписокВыбора = Элементы.СостояниеПоступленияПриобретения.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("0", НСтр("ru='Приобретения соответствуют поступлениям'"), Ложь, БиблиотекаКартинок.ОформленаНакладная);
	СписокВыбора.Добавить("1", НСтр("ru='Не оформлены приобретения'"), Ложь, БиблиотекаКартинок.СоздатьНакладную);
	СписокВыбора.Добавить("3", НСтр("ru='Приобретения не соответствуют поступлениям'"), Ложь, БиблиотекаКартинок.НесоответствиеОрдерНакладная);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюСтраницу()
	
	ИмяТекущейСтраницы = "";
	
	Если Параметры.Свойство("ИмяТекущейСтраницы", ИмяТекущейСтраницы) Тогда
		Если ЗначениеЗаполнено(ИмяТекущейСтраницы) Тогда
			Элементы.Страницы.ТекущаяСтраница = Элементы[ИмяТекущейСтраницы];
		КонецЕсли;
	Иначе
		Если Не Документы.ПриобретениеТоваровУслуг.ЕстьЗаказыКОформлению(Организация,Склад)
			И Документы.ПриобретениеТоваровУслуг.ЕстьРаспоряженияНаПриемку(Организация,Склад) Тогда
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРаспоряженияНаПриемку;
		ИначеЕсли ИспользоватьЗаказыПоставщикам Тогда	
			Элементы.Страницы.ТекущаяСтраница =	Элементы.СтраницаРаспоряженияНаОформление;
		ИначеЕсли ИспользоватьПоступленияТоваров Тогда
			Элементы.Страницы.ТекущаяСтраница =	Элементы.СтраницаРаспоряженияНаПоступление;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоСкладу()
	
	ОтборСклады = СкладыСервер.СписокПодчиненныхСкладов(Склад);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокРаспоряженияНаОформление,
		"Склад",
		ОтборСклады,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		ОтборСклады.Количество() > 0);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокРаспоряженияНаПриемку,
		"Склад",
		ОтборСклады,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		ОтборСклады.Количество() > 0);
	
	Если ОтборСклады.Количество() > 0 Тогда
		
		ОтборСклады.Добавить(Справочники.Склады.ПустаяСсылка());
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокРаспоряженияНаПоступление,
		"Склад",
		ОтборСклады,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		ОтборСклады.Количество() > 0);
		
	ЕстьОрдерныйНаПоступлениеСклад = СкладыСервер.ЕстьОрдерныйНаПоступлениеСклад(Склад,ТекущаяДатаСеанса());
	ПравоНаЧтениеОстатковТоваровКПоступлению = ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ТоварыКПоступлению);
	ДоступностьПриемки = ЕстьОрдерныйНаПоступлениеСклад И ПравоНаЧтениеОстатковТоваровКПоступлению;
	
	Элементы.СостояниеОрдера.Видимость = ДоступностьПриемки;
	Элементы.СтраницаРаспоряженияНаПриемку.Видимость = ДоступностьПриемки;
	Элементы.СписокРаспоряженияНаОформлениеОформитьПоПриемке.Видимость = ДоступностьПриемки
																		И (ПравоДобавлятьПриобретение
																			Или ПравоДобавлятьПриемкуТоваров);
	
	Если ДоступностьПриемки Тогда
		Элементы.СписокРаспоряженияНаПриемку.ВыделенныеСтроки.Очистить();
		Элементы.СписокРаспоряженияНаПриемкуВалюта.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют");
	КонецЕсли;
	
	Если (Не ЕстьОрдерныйНаПоступлениеСклад И Не ИспользоватьПоступленияТоваров)
		Или Не ИспользоватьЗаказыПоставщикам Тогда
		Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Иначе
		Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	КонецЕсли;
	
	Если ИспользоватьЗаказыПоставщикам Тогда	
		Элементы.Страницы.ТекущаяСтраница =	Элементы.СтраницаРаспоряженияНаОформление;	
	ИначеЕсли ИспользоватьПоступленияТоваров Тогда
		Элементы.Страницы.ТекущаяСтраница =	Элементы.СтраницаРаспоряженияНаПоступление;		
	КонецЕсли;
	
	Элементы.СписокРаспоряженияНаОформление.ВыделенныеСтроки.Очистить();
	Элементы.СписокРаспоряженияНаПоступление.ВыделенныеСтроки.Очистить();
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыЖурнала(КлючНазначенияИспользования)
	
	СтруктураБыстрогоОтбора = Новый Структура;
	СтруктураБыстрогоОтбора.Вставить("Организация",Организация);
	СтруктураБыстрогоОтбора.Вставить("Склад",Склад);
	
	ПараметрыЖурнала = Новый Структура;
	ПараметрыЖурнала.Вставить("СтруктураБыстрогоОтбора",СтруктураБыстрогоОтбора);
	ПараметрыЖурнала.Вставить("ИмяРабочегоМеста","ЖурналДокументовЗакупки");
	ПараметрыЖурнала.Вставить("КлючНазначенияФормы",КлючНазначенияИспользования);
	ПараметрыЖурнала.Вставить("СинонимЖурнала",НСтр("ru = 'Документы закупки'"));
	
	Возврат ПараметрыЖурнала;
	
КонецФункции

&НаСервере
Процедура УстановитьПараметрыДинСписка()
	СписокРаспоряженияНаПоступление.Параметры.УстановитьЗначениеПараметра("СписокХозОпераций", ХозОперацииПоступленияТоваров());
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ХозОперацииПоступленияТоваров()
	
	СписокХозОпераций = Новый Массив;
	СписокХозопераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаНеотфактурованнаяПоставка"));
	СписокХозопераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаПоступлениеИзТоваровВПути"));
	СписокХозопераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаТоварыВПути"));
	СписокХозопераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаФактуровкаПоставки"));
	
	СписокХозопераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСНеотфактурованнаяПоставка"));
	СписокХозопераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСПоступлениеИзТоваровВПути"));
	СписокХозопераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСТоварыВПути"));
	СписокХозопераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСФактуровкаПоставки"));
	
	СписокХозопераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпортуПоступлениеИзТоваровВПути"));
	СписокХозопераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути"));
	
	Возврат СписокХозопераций
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ХозОперацииЗапрещенныеВАктеОРасхождениях()
	
	СписокХозОпераций = Новый Массив;
	
	СписокХозопераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпортуПоступлениеИзТоваровВПути"));
	СписокХозопераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути"));
	
	Возврат СписокХозопераций
КонецФункции

&НаСервере
Функция ТекстЗапросаСпискаРаспоряженийНаПриемку()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Таблица.ДокументПоступления		КАК ДокументПоступления,
	|	Таблица.ДокументПоступления		КАК ДокументПоступления1,
	|	Таблица.Склад					КАК Склад,
	|	Таблица.Склад					КАК Склад1,
	|	Таблица.ХозяйственнаяОперация	КАК ХозяйственнаяОперация,
	|	Таблица.ХозяйственнаяОперация	КАК ХозяйственнаяОперация1,
	|	Таблица.Номенклатура			КАК Номенклатура,
	|	Таблица.Номенклатура			КАК Номенклатура1,
	|	Таблица.Характеристика			КАК Характеристика,
	|	Таблица.Характеристика			КАК Характеристика1,
	|	Таблица.Назначение				КАК Назначение,
	|	Таблица.Назначение				КАК Назначение1,
	|	Таблица.Серия					КАК Серия,
	|	Таблица.Серия					КАК Серия1
	|ПОМЕСТИТЬ ВтОстаткиТоварыКПоступлению
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению.Остатки(
	|			,
	|			ДокументПоступления ССЫЛКА Документ.ЗаказПоставщику
	|				ИЛИ ДокументПоступления ССЫЛКА Документ.ПриобретениеТоваровУслуг
	|				ИЛИ ДокументПоступления ССЫЛКА Документ.ПриемкаТоваровНаХранение
	
	
	|				ИЛИ ДокументПоступления ССЫЛКА Справочник.ДоговорыКонтрагентов
	|				ИЛИ ДокументПоступления ССЫЛКА Справочник.СоглашенияСПоставщиками
	|			{(Склад) КАК Склад}
	|	) КАК Таблица
	|ГДЕ
	|	Таблица.КОформлениюПоступленийПоОрдерамОстаток <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Таблица.ДокументПоступления		КАК ДокументПоступления,
	|	Таблица.Склад					КАК Склад,
	|	Таблица.ХозяйственнаяОперация	КАК ХозяйственнаяОперация
	|ПОМЕСТИТЬ ВтДокументыПоступления
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОстаткиТоваров.ДокументПоступления		КАК ДокументПоступления,
	|		ОстаткиТоваров.Склад					КАК Склад,
	|		ОстаткиТоваров.ХозяйственнаяОперация	КАК ХозяйственнаяОперация,
	|		ОстаткиТоваров.Номенклатура				КАК Номенклатура,
	|		ОстаткиТоваров.Характеристика			КАК Характеристика,
	|		ОстаткиТоваров.Назначение				КАК Назначение,
	|		ОстаткиТоваров.Серия					КАК Серия
	|	ИЗ
	|		ВтОстаткиТоварыКПоступлению КАК ОстаткиТоваров
	|	) КАК Таблица
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументПоступления,
	|	Склад,
	|	ХозяйственнаяОперация
	|;
	|
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварыКПоступлению.ДокументПоступления КАК ДокументПоступления,
	|	ТоварыКПоступлению.Склад КАК Склад,
	|	ТоварыКПоступлению.ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|ПОМЕСТИТЬ ВтЕстьОрдера
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению КАК ТоварыКПоступлению
	|ГДЕ
	|	ТоварыКПоступлению.Активность
	|	И ТоварыКПоступлению.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Приход)
	|	И (ТоварыКПоступлению.ДокументПоступления, ТоварыКПоступлению.Склад, ТоварыКПоступлению.ХозяйственнаяОперация) В
	|		(ВЫБРАТЬ
	|			Таблица.ДокументПоступления,
	|			Таблица.Склад,
	|			Таблица.ХозяйственнаяОперация
	|		ИЗ
	|			ВтДокументыПоступления КАК Таблица
	|		)
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКПоступлению.ДокументПоступления,
	|	ТоварыКПоступлению.Склад,
	|	ТоварыКПоступлению.ХозяйственнаяОперация
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКПоступлению.КОформлениюПоступленийПоОрдерам) > 0
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументПоступления,
	|	Склад,
	|	ХозяйственнаяОперация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварыКПоступлению.ДокументПоступления КАК ДокументПоступления,
	|	ТоварыКПоступлению.Склад КАК Склад,
	|	ТоварыКПоступлению.ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|ПОМЕСТИТЬ ВтЕстьПоступления
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению КАК ТоварыКПоступлению
	|ГДЕ
	|	ТоварыКПоступлению.Активность
	|	И ТоварыКПоступлению.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Расход)
	|	И (ТоварыКПоступлению.ДокументПоступления, ТоварыКПоступлению.Склад, ТоварыКПоступлению.ХозяйственнаяОперация) В
	|		(ВЫБРАТЬ
	|			Таблица.ДокументПоступления,
	|			Таблица.Склад,
	|			Таблица.ХозяйственнаяОперация
	|		ИЗ
	|			ВтДокументыПоступления КАК Таблица
	|		)
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКПоступлению.ДокументПоступления,
	|	ТоварыКПоступлению.Склад,
	|	ТоварыКПоступлению.ХозяйственнаяОперация
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКПоступлению.КОформлениюПоступленийПоОрдерам) > 0
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументПоступления,
	|	Склад,
	|	ХозяйственнаяОперация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Таблица.ДокументПоступления		КАК ДокументПоступления,
	|	Таблица.Склад					КАК Склад,
	|	Таблица.ХозяйственнаяОперация	КАК ХозяйственнаяОперация,
	|	МАКСИМУМ(ВЫБОР
	|				КОГДА ТаблицаВтЕстьПоступления.ДокументПоступления ЕСТЬ NULL
	|					ТОГДА 1
	|				КОГДА ТаблицаЕстьОрдера.ДокументПоступления ЕСТЬ NULL
	|					ТОГДА 5
	|				ИНАЧЕ 3
	|		КОНЕЦ)						КАК СостояниеОрдера
	|ПОМЕСТИТЬ ВтСостояниеОрдера
	|ИЗ
	|	ВтОстаткиТоварыКПоступлению КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтЕстьОрдера КАК ТаблицаЕстьОрдера
	|		ПО ТаблицаЕстьОрдера.ДокументПоступления = Таблица.ДокументПоступления
	|			И ТаблицаЕстьОрдера.Склад = Таблица.Склад
	|			И ТаблицаЕстьОрдера.ХозяйственнаяОперация = Таблица.ХозяйственнаяОперация
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтЕстьПоступления КАК ТаблицаВтЕстьПоступления
	|		ПО ТаблицаВтЕстьПоступления.ДокументПоступления = Таблица.ДокументПоступления
	|			И ТаблицаВтЕстьПоступления.Склад = Таблица.Склад
	|			И ТаблицаВтЕстьПоступления.ХозяйственнаяОперация = Таблица.ХозяйственнаяОперация
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.ДокументПоступления,
	|	Таблица.Склад,
	|	Таблица.ХозяйственнаяОперация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументПоступления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТаблицаРаспоряжений.ДокументПоступления ССЫЛКА Справочник.СоглашенияСПоставщиками
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаРаспоряжений.ДокументПоступления КАК Справочник.СоглашенияСПоставщиками).Ссылка
	|		КОГДА ТаблицаРаспоряжений.ДокументПоступления ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаРаспоряжений.ДокументПоступления КАК Справочник.ДоговорыКонтрагентов).Ссылка
	|		ИНАЧЕ РеестрДокументов.Ссылка
	|	КОНЕЦ										КАК Ссылка,
	|	ТИПЗНАЧЕНИЯ(ТаблицаРаспоряжений.ДокументПоступления.Ссылка) КАК ТипРаспоряжения,
	|	ВЫБОР
	|		КОГДА ТаблицаРаспоряжений.ДокументПоступления ССЫЛКА Справочник.СоглашенияСПоставщиками
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаРаспоряжений.ДокументПоступления КАК Справочник.СоглашенияСПоставщиками).Номер
	|		КОГДА ТаблицаРаспоряжений.ДокументПоступления ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаРаспоряжений.ДокументПоступления КАК Справочник.ДоговорыКонтрагентов).Номер
	|		ИНАЧЕ РеестрДокументов.НомерДокументаИБ
	|	КОНЕЦ										КАК Номер,
	|	ВЫБОР
	|		КОГДА ТаблицаРаспоряжений.ДокументПоступления ССЫЛКА Справочник.СоглашенияСПоставщиками
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаРаспоряжений.ДокументПоступления КАК Справочник.СоглашенияСПоставщиками).Дата
	|		КОГДА ТаблицаРаспоряжений.ДокументПоступления ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаРаспоряжений.ДокументПоступления КАК Справочник.ДоговорыКонтрагентов).Дата
	|		ИНАЧЕ РеестрДокументов.ДатаДокументаИБ
	|	КОНЕЦ										КАК Дата,
	|	ВЫБОР
	|		КОГДА ТаблицаРаспоряжений.ДокументПоступления ССЫЛКА Справочник.СоглашенияСПоставщиками
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаРаспоряжений.ДокументПоступления КАК Справочник.СоглашенияСПоставщиками).Партнер
	|		КОГДА ТаблицаРаспоряжений.ДокументПоступления ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаРаспоряжений.ДокументПоступления КАК Справочник.ДоговорыКонтрагентов).Партнер
	|		ИНАЧЕ РеестрДокументов.Партнер
	|	КОНЕЦ										КАК Партнер,
	|	ВЫБОР
	|		КОГДА ТаблицаРаспоряжений.ДокументПоступления ССЫЛКА Справочник.СоглашенияСПоставщиками
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаРаспоряжений.ДокументПоступления КАК Справочник.СоглашенияСПоставщиками).Контрагент
	|		КОГДА ТаблицаРаспоряжений.ДокументПоступления ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаРаспоряжений.ДокументПоступления КАК Справочник.ДоговорыКонтрагентов).Контрагент
	|		ИНАЧЕ ВЫРАЗИТЬ(РеестрДокументов.Контрагент.Ключ КАК Справочник.Контрагенты)
	|	КОНЕЦ										КАК Контрагент,
	|	ТаблицаРаспоряжений.ХозяйственнаяОперация	КАК ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА ТаблицаРаспоряжений.ДокументПоступления ССЫЛКА Справочник.СоглашенияСПоставщиками
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаРаспоряжений.ДокументПоступления КАК Справочник.СоглашенияСПоставщиками).Организация
	|		КОГДА ТаблицаРаспоряжений.ДокументПоступления ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаРаспоряжений.ДокументПоступления КАК Справочник.ДоговорыКонтрагентов).Организация
	|		ИНАЧЕ РеестрДокументов.Организация
	|	КОНЕЦ										КАК Организация,
	|	ТаблицаРаспоряжений.Склад					КАК Склад,
	|	РеестрДокументов.Сумма						КАК СуммаДокумента,
	|	ВЫБОР
	|		КОГДА ТаблицаРаспоряжений.ДокументПоступления ССЫЛКА Справочник.СоглашенияСПоставщиками
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаРаспоряжений.ДокументПоступления КАК Справочник.СоглашенияСПоставщиками).Валюта
	|		КОГДА ТаблицаРаспоряжений.ДокументПоступления ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаРаспоряжений.ДокументПоступления КАК Справочник.ДоговорыКонтрагентов).ВалютаВзаиморасчетов
	|		ИНАЧЕ РеестрДокументов.Валюта
	|	КОНЕЦ										КАК Валюта,
	|	ВЫБОР
	|		КОГДА ТаблицаРаспоряжений.ДокументПоступления ССЫЛКА Справочник.СоглашенияСПоставщиками
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаРаспоряжений.ДокументПоступления КАК Справочник.СоглашенияСПоставщиками).Менеджер
	|		КОГДА ТаблицаРаспоряжений.ДокументПоступления ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаРаспоряжений.ДокументПоступления КАК Справочник.ДоговорыКонтрагентов).Менеджер
	|		ИНАЧЕ РеестрДокументов.Ответственный
	|	КОНЕЦ										КАК Менеджер,
	|	ВЫБОР
	|		КОГДА ТаблицаРаспоряжений.ДокументПоступления ССЫЛКА Справочник.СоглашенияСПоставщиками
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаРаспоряжений.ДокументПоступления КАК Справочник.СоглашенияСПоставщиками).ПометкаУдаления
	|		КОГДА ТаблицаРаспоряжений.ДокументПоступления ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаРаспоряжений.ДокументПоступления КАК Справочник.ДоговорыКонтрагентов).ПометкаУдаления
	|		ИНАЧЕ РеестрДокументов.ПометкаУдаления
	|	КОНЕЦ										КАК ПометкаУдаления,
	|	ТаблицаРаспоряжений.СостояниеОрдера			КАК СостояниеОрдера,
	|	ВЫБОР
	|		КОГДА ТаблицаРаспоряжений.ДокументПоступления ССЫЛКА Справочник.СоглашенияСПоставщиками
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|		КОГДА ТаблицаРаспоряжений.ДокументПоступления ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаРаспоряжений.ДокументПоступления КАК Справочник.ДоговорыКонтрагентов).Ссылка
	|		ИНАЧЕ РеестрДокументов.Договор
	|	КОНЕЦ КАК Договор,
	|	ВЫБОР
	|		КОГДА ТаблицаРаспоряжений.ДокументПоступления ССЫЛКА Справочник.СоглашенияСПоставщиками
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПустаяСсылка)
	|		КОГДА ТаблицаРаспоряжений.ДокументПоступления ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаРаспоряжений.ДокументПоступления КАК Справочник.ДоговорыКонтрагентов).ПорядокРасчетов
	|		ИНАЧЕ РеестрДокументов.Ссылка.ПорядокРасчетов
	|	КОНЕЦ КАК ПорядокРасчетов
	|
	|ПОМЕСТИТЬ ВтВременнаяТаблица
	|ИЗ
	|	ВтСостояниеОрдера КАК ТаблицаРаспоряжений
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|		ПО ТаблицаРаспоряжений.ДокументПоступления = РеестрДокументов.Ссылка
	|			И НЕ РеестрДокументов.ДополнительнаяЗапись
	|ГДЕ
	|	НЕ ТаблицаРаспоряжений.ДокументПоступления.Ссылка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтВременнаяТаблица.Ссылка					КАК Ссылка,
	|	ВтВременнаяТаблица.ТипРаспоряжения			КАК ТипРаспоряжения,
	|	ВтВременнаяТаблица.Номер					КАК Номер,
	|	ВтВременнаяТаблица.Дата						КАК Дата,
	|	ВтВременнаяТаблица.Партнер					КАК Партнер,
	|	ВтВременнаяТаблица.Контрагент				КАК Контрагент,
	|	ВтВременнаяТаблица.ХозяйственнаяОперация	КАК ХозяйственнаяОперация,
	|	ВтВременнаяТаблица.Организация				КАК Организация,
	|	ВтВременнаяТаблица.Склад					КАК Склад,
	|	ВтВременнаяТаблица.СуммаДокумента			КАК СуммаДокумента,
	|	ВтВременнаяТаблица.Валюта					КАК Валюта,
	|	ВтВременнаяТаблица.Менеджер					КАК Менеджер,
	|	ВтВременнаяТаблица.ПометкаУдаления			КАК ПометкаУдаления,
	|	ВтВременнаяТаблица.СостояниеОрдера			КАК СостояниеОрдера,
	|	ВтВременнаяТаблица.Договор					КАК Договор,
	|	ВтВременнаяТаблица.ПорядокРасчетов			КАК ПорядокРасчетов
	|ИЗ
	|	ВтВременнаяТаблица КАК ВтВременнаяТаблица";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Процедура НастроитьССылкуСмТакже()
	
	ПараметрыФормирования = Новый Структура;
	ПараметрыФормирования.Вставить("КлючНазначенияИспользования", "Накладные");
	
	МассивМенеджеровРасчетаСмТакжеВРаботе = Новый Массив();
	МассивМенеджеровРасчетаСмТакжеВРаботе.Добавить("Обработка.ЖурналДокументовЗакупки");
		
	СмТакжеВРаботе = ОбщегоНазначенияУТ.СформироватьГиперссылкуСмТакжеВРаботе(МассивМенеджеровРасчетаСмТакжеВРаботе, ПараметрыФормирования);
	Элементы.СмТакжеВРаботе.Видимость = ЗначениеЗаполнено(СмТакжеВРаботе);
	
КонецПроцедуры

// Параметры:
//  Страница - СтраницаПанели
//  ТаблицаФормы - ТаблицаФормы
&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьТаблицуФормы(Страница, ТаблицаФормы)
	
	Если Страница.Видимость Тогда
		ТаблицаФормы.Обновить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОформлениеНакладной

&НаСервере
Функция ОформитьНакладныеПоЗаказамНаСервере()
	
	Перем СписокОшибок;
	
	// Разбивка выделенных документов по группам
	ДокументыПоТипамНакладных = ТаблицыЗаказовРазделенныхПоКлючевымПолям(СписокРаспоряжений, СписокОшибок);
	ВсегоТаблиц = ДокументыПоТипамНакладных.Количество();
	
	Если ВсегоТаблиц > 0 Тогда
		
		// При оформлении по заказам всегда создается новая накладная
		
		// Открывается форма созданной накладной, в случае если совпали ключевые поля выделенных строк, и позволяет
		// функциональная опция В ином случае открывается форма со списком созданных накладных.
		
		Если ДокументыПоТипамНакладных.Количество() > 1 Тогда
			// Пакетно
			ПараметрыФормы = ОформитьРядНакладныхПоТаблицам(ДокументыПоТипамНакладных, СписокОшибок);
		ИначеЕсли ДокументыПоТипамНакладных.Количество() = 1 Тогда
			// Индивидуально
			ПараметрыФормы = ОформитьНакладнуюПоТаблице(ДокументыПоТипамНакладных, СписокОшибок);
		КонецЕсли;
	ИначеЕсли СписокРаспоряжений.Количество() > 1 Тогда
		
		// При оформлении документов в пакетном режиме произошли ошибки
		
		ТекстОшибки = НСтр("ru = 'Не выбрано ни одного документа, который можно было бы оформить %1'");
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, НСтр("ru = 'по заказам'"));
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление",ТекстОшибки, Неопределено);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыФормы) Тогда
		ПараметрыФормы = Новый Структура();
	Иначе 
		ОбновитьТаблицуФормы(Элементы.СтраницаРаспоряженияНаОформление, Элементы.СписокРаспоряженияНаОформление);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("СписокОшибок", СписокОшибок);
	
	Возврат ПараметрыФормы;
	
КонецФункции

// Параметры:
// 	ДокументыПоТипамНакладных - Массив из см. ШаблонРазделеннойТаблицы
//
&НаСервере
Функция ОформитьРядНакладныхПоТаблицам(ДокументыПоТипамНакладных, СписокОшибок)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ИмяФормы", "Обработка.ЖурналДокументовЗакупки.Форма.ФормаСозданныеДокументы");
	
	СозданныеДокументы = Новый СписокЗначений();
	
	Для Каждого Таблица Из ДокументыПоТипамНакладных Цикл
		
		ПерваяСтрока = Таблица[0];
		Если ПерваяСтрока.СостояниеПриобретения > 0 Тогда
			
			ПолноеИмяНакладной = ПолноеИмяНакладнойПоХозОперации(ПерваяСтрока.ХозяйственнаяОперация);
			
			МенеджерНакладной = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяНакладной);
			МетаданныеНакладной = Метаданные.НайтиПоПолномуИмени(ПолноеИмяНакладной);
			
			Заказы = Таблица.ВыгрузитьКолонку("Ссылка");
			
			РеквизитыШапки = Новый Структура;
			Если НЕ ЗакупкиВызовСервера.СформироватьДанныеЗаполненияПоступления(Заказы, МетаданныеНакладной.Имя, РеквизитыШапки) Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			ДанныеЗаполнения = Новый Структура;
			ДанныеЗаполнения.Вставить("СкладПоступления",  Неопределено);
			
			ДанныеЗаполнения.Вставить("РеквизитыШапки",    РеквизитыШапки);
			ДанныеЗаполнения.Вставить("ДокументОснование", Заказы);
			
			ДокументОбъект = МенеджерНакладной.СоздатьДокумент();
			ДокументОбъект.Заполнить(ДанныеЗаполнения);
			
			ДокументОбъект.Дата = ТекущаяДатаСеанса();
			
			Если ДокументОбъект.ПроверитьЗаполнение() Тогда
				
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				
				// Добавить запись в историю работы пользователя.
				ИсторияРаботыПользователя.Добавить(ДокументОбъект.Ссылка);
				СозданныеДокументы.Добавить(ДокументОбъект.Ссылка);
				
				Попытка
					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					ТекстОшибки = НСтр("ru = 'Не удалось провести документ'");
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление",
						ТекстОшибки + " " + ДокументОбъект.Ссылка, Неопределено);
				КонецПопытки;
				
			Иначе
				ТекстОшибки = НСтр("ru = 'Не удалось создать документ %1 на основании документа %2'");
				ТекстОшибки = СтрШаблон(ТекстОшибки, МетаданныеНакладной.Синоним, Заказы[0]);
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление",
					ТекстОшибки + " " + ДокументОбъект.Ссылка, Неопределено);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Пользователи.АвторизованныйПользователь(),
														СозданныеДокументы.ВыгрузитьЗначения(),
														"ФормаСозданныеДокументыЗакупки");
	УстановитьПривилегированныйРежим(Ложь);
	
	ПараметрыФормы = Новый Структура("СозданныеДокументы", СозданныеДокументы);
	
	СтруктураПараметров.Вставить("Параметры", ПараметрыФормы);
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Функция ОформитьНакладнуюПоТаблице(ДокументыПоТипамНакладных, СписокОшибок)
	
	СозданныеДокументы = Новый СписокЗначений();
	
	ТаблицаДокументов = ДокументыПоТипамНакладных[0]; // см. ШаблонРазделеннойТаблицы
	ВыделеннаяСтрока = ТаблицаДокументов[0];
	
	ПолноеИмяНакладной = ПолноеИмяНакладнойПоХозОперации(ВыделеннаяСтрока.ХозяйственнаяОперация);
	МетаданныеНакладной = Метаданные.НайтиПоПолномуИмени(ПолноеИмяНакладной);
	
	ИмяФормыНакладной = "Документ." + МетаданныеНакладной.Имя + ".Форма.ФормаДокумента";
	
	НастройкиФормы = Новый Структура();
	ПараметрыФормы = Новый Структура();
	
	НастройкиФормы.Вставить("ИмяФормы", ИмяФормыНакладной);
	
	Заказы = ТаблицаДокументов.ВыгрузитьКолонку("Ссылка");
	
	РаспоряженияНакладные = Новый Массив();
	Для Каждого Распоряжение Из Заказы Цикл
		Если ПолныеИменаНакладных.НайтиПоЗначению(Распоряжение.Метаданные().ПолноеИмя()) <> Неопределено Тогда
			РаспоряженияНакладные.Добавить(Распоряжение);
		КонецЕсли;
	КонецЦикла;
	
	Отказ = Ложь;
		
	РеквизитыШапки = Новый Структура;
	Если НЕ ЗакупкиВызовСервера.СформироватьДанныеЗаполненияПоступления(Заказы, МетаданныеНакладной.Имя, РеквизитыШапки) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СкладПоступления",  Неопределено);
	
	ПараметрыФормы.Вставить("РеквизитыШапки",    РеквизитыШапки);
	ПараметрыФормы.Вставить("ДокументОснование", Заказы);
	
	// Для вывода сообщения о количестве созданных документов
	СозданныеДокументы.Добавить(ПредопределенноеЗначение("Документ." + МетаданныеНакладной.Имя + ".ПустаяСсылка"));
	
	//ПараметрыФормы.Вставить("СозданныеДокументы", СозданныеДокументы);
	ПараметрыСОснованием = Новый Структура("Основание", ПараметрыФормы);
	
	НастройкиФормы.Вставить("Параметры", ПараметрыСОснованием);
	
	Если Отказ Тогда
		Возврат Неопределено;
	Иначе
		Возврат НастройкиФормы;
	КонецЕсли;
	
КонецФункции

// Параметры:
// 	СписокРаспоряжений - ДанныеФормыКоллекция - Описание
// 	СписокОшибок - СписокЗначений - 
// Возвращаемое значение:
// 	Массив - Массив из см. ШаблонРазделеннойТаблицы
&НаСервере
Функция ТаблицыЗаказовРазделенныхПоКлючевымПолям(СписокРаспоряжений, СписокОшибок) 
	КлючевыеПоля = "Подразделение,Партнер,Контрагент,Договор,Организация,Склад,Соглашение,"
		+"ХозяйственнаяОперация,ВалютаВзаиморасчетов,НалогообложениеНДС,ЦенаВключаетНДС,"
		+"ПорядокРасчетов,ВернутьМногооборотнуюТару,НаправлениеДеятельности,ВариантПриемкиТоваров";
	
	ТекущиеКлючи = Новый Структура(КлючевыеПоля);
	ТекущиеКлючи.Вставить("ПолноеИмяНакладной");
	ТекущиеКлючи.Вставить("СостояниеПриобретения");
	
	ШаблонРазделеннаяТаблица = ШаблонРазделеннойТаблицы();
	
	РазделеннаяТаблица = Неопределено;
	МассивТаблиц = Новый Массив();
	
	СписокРаспоряжений.Сортировать("Ссылка, Склад, СостояниеПриобретения");
	
	ПакетныйРежим = СписокРаспоряжений.Количество() > 1;
	
	Для Каждого Строка Из СписокРаспоряжений Цикл
		
		Если Строка.Ссылка = Неопределено Тогда
			ПолноеИмяРаспоряжения = "";
		Иначе
			ПолноеИмяРаспоряжения = Строка.Ссылка.Метаданные().ПолноеИмя();
		КонецЕсли; 
		
		ПолноеИмяНакладной = ПолноеИмяНакладнойПоХозОперации(Строка.ХозяйственнаяОперация);
		
		ТекстОшибки = "";
		ПрерватьОбработкуСтроки = Ложь;
		
		Если ПакетныйРежим И ПолноеИмяНакладной = ПолноеИмяРаспоряжения Тогда
			
			ТекстОшибки = НСтр("ru = 'Для распоряжения %1 невозможно перезаполнить накладную вместе с другими распоряжениями. Выберите распоряжение отдельно.'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка.Ссылка);
			
			ПрерватьОбработкуСтроки = Истина;
			
		Иначе // оформление по заказам
			
			Если Строка.СостояниеПриобретения = 0 Тогда
				
				ТекстОшибки = НСтр("ru = 'Для распоряжения %1 уже создана накладная'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка.Ссылка);
				ПрерватьОбработкуСтроки = Истина;
				
			КонецЕсли;
			
		КонецЕсли;

		Если Не ПустаяСтрока(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление",ТекстОшибки, Неопределено);
		КонецЕсли;
		
		Если ПрерватьОбработкуСтроки Тогда
			Продолжить;
		КонецЕсли;
		
		// Создание новой таблицы в случаях:
		// 1. Таблица еще ни разу не создана
		// 2. Запрещено группировать в одну накладную несколько заказов
		// 3. Распоряжение является накладной или ключевые поля различаются (например, нельзя группировать 
		//	в одну накладную заказы у которых разные склады).
		
		Если РазделеннаяТаблица = Неопределено 
			Или Не ИспользоватьПоступлениеПоНесколькимЗаказам
			Или ПолноеИмяНакладной <> ТекущиеКлючи.ПолноеИмяНакладной 
			Или Не ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(ТекущиеКлючи,Строка,КлючевыеПоля) Тогда
			
			РазделеннаяТаблица = ШаблонРазделеннаяТаблица.Скопировать();
			МассивТаблиц.Добавить(РазделеннаяТаблица); // Передача в массив ссылки на текущую таблицу
			
			ЗаполнитьЗначенияСвойств(ТекущиеКлючи, Строка);
			ТекущиеКлючи.ПолноеИмяНакладной = ПолноеИмяНакладной;
		КонецЕсли;
		
		НоваяСтрока = РазделеннаяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
	КонецЦикла;
	
	Возврат МассивТаблиц;
	
КонецФункции

&НаСервере
Функция ПолноеИмяНакладнойПоХозОперации(ХозяйственнаяОперация)
	
	ПолноеИмяНакладной = Метаданные.Документы.ПриобретениеТоваровУслуг.ПолноеИмя();
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи Тогда 
		ПолноеИмяНакладной = Метаданные.Документы.ПриемкаТоваровНаХранение.ПолноеИмя();
	КонецЕсли;
	
	Возврат ПолноеИмяНакладной;
	
КонецФункции

// Возвращаемое значение:
// 	ТаблицаЗначений:
// * Ссылка - ДокументСсылка
// * Склад - СправочникСсылка.Склады
// * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации
// * СостояниеПриобретения - Число
&НаСервереБезКонтекста
Функция ШаблонРазделеннойТаблицы()
	
	ШаблонРазделеннаяТаблица = Новый ТаблицаЗначений();
	ШаблонРазделеннаяТаблица.Колонки.Добавить("Ссылка", Документы.ТипВсеСсылки());
	ШаблонРазделеннаяТаблица.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("ХозяйственнаяОперация", Новый ОписаниеТипов("ПеречислениеСсылка.ХозяйственныеОперации"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("СостояниеПриобретения", Новый ОписаниеТипов("Число"));

	Возврат ШаблонРазделеннаяТаблица;
	
КонецФункции

#КонецОбласти

#Область ОформлениеПоОрдерам

&НаСервере
Функция ОформитьПриобретенияНаСервереПоОрдерам()
	
	Перем СписокОшибок;
	
	// Разбивка выделенных документов по группам
	ДокументыПоТипамНакладных = ТаблицыПриобретенийРазделенныхПоКлючевымПолямДляОрдеров(СписокРаспоряжений, СписокОшибок);
	ВсегоТаблиц = ДокументыПоТипамНакладных.Количество();
	
	Если ВсегоТаблиц > 0 Тогда
		
		Если ДокументыПоТипамНакладных.Количество() > 1 Тогда
			// Пакетно
			ПараметрыФормы = ОформитьРядПриобретенийПоТаблицамКонтрольОрдеров(ДокументыПоТипамНакладных, СписокОшибок);
		ИначеЕсли ДокументыПоТипамНакладных.Количество() = 1 Тогда
			// Индивидуально
			ПараметрыФормы = ОформитьПриобретениеПоТаблицеКонтрольОрдеров(ДокументыПоТипамНакладных, СписокОшибок);
		КонецЕсли;
	ИначеЕсли СписокРаспоряжений.Количество() > 1 Тогда
		
		// При оформлении документов в пакетном режиме произошли ошибки
		
		ТекстОшибки = НСтр("ru = 'Не выбрано ни одного документа, который можно было бы оформить %1'");
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, НСтр("ru = 'по заказам'"));
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаПриемку",ТекстОшибки, Неопределено);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыФормы) Тогда
		ПараметрыФормы = Новый Структура();
	Иначе 
		ОбновитьТаблицуФормы(Элементы.СтраницаРаспоряженияНаПриемку, Элементы.СписокРаспоряженияНаПриемку);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("СписокОшибок", СписокОшибок);
	
	Возврат ПараметрыФормы;
	
КонецФункции

// Параметры:
// 	СписокРаспоряжений - ДанныеФормыКоллекция - Описание
// 	СписокОшибок - СписокЗначений - 
// Возвращаемое значение:
// 	Массив - Массив из см. ШаблонРазделеннойТаблицы
&НаСервере
Функция ТаблицыПриобретенийРазделенныхПоКлючевымПолямДляОрдеров(СписокРаспоряжений, СписокОшибок) 
	КлючевыеПоля = "Подразделение,Партнер,Контрагент,Договор,Организация,Склад,Соглашение,"
		+"ХозяйственнаяОперация,ВалютаВзаиморасчетов,НалогообложениеНДС,ЦенаВключаетНДС,"
		+"ПорядокРасчетов,ВернутьМногооборотнуюТару,НаправлениеДеятельности,ВариантПриемкиТоваров,ЕстьОформленныеПоступления,СостояниеОрдера,ТипРаспоряжения";
		
	ТекущиеКлючи = Новый Структура(КлючевыеПоля);
	ТекущиеКлючи.Вставить("ПолноеИмяНакладной");
	ТекущиеКлючи.Вставить("СостояниеПриобретения");
	
	ШаблонРазделеннаяТаблица = ШаблонРазделеннойТаблицыКонтрольОрдеров();
	
	РазделеннаяТаблица = Неопределено;
	МассивТаблиц = Новый Массив();
	
	СписокРаспоряжений.Сортировать("Ссылка, Склад, СостояниеПриобретения, ТипРаспоряжения");
	
	ПакетныйРежим = СписокРаспоряжений.Количество() > 1;
	
	ХозОперацииПоступленияТоваров = ХозОперацииПоступленияТоваров();
	
	ЕстьОформленныеПоступления = Ложь;
	
	Для Каждого Строка Из СписокРаспоряжений Цикл
		
		Если Строка.Ссылка = Неопределено Тогда
			ПолноеИмяРаспоряжения = "";
		Иначе
			ПолноеИмяРаспоряжения = Строка.Ссылка.Метаданные().ПолноеИмя();
		КонецЕсли; 
		ПолноеИмяНакладной = ПолноеИмяНакладнойПоХозОперации(Строка.ХозяйственнаяОперация);
		
		ТекстОшибки = "";
		ПрерватьОбработкуСтроки = Ложь;
		
		
		Если Строка.СостояниеОрдера = 5 Тогда
			
			ТекстОшибки = НСтр("ru = 'Перезаполнение по приемке %1 не требуется, так как нет ни одного ордера.'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка.Ссылка);
			ПрерватьОбработкуСтроки = Истина;
			
		ИначеЕсли ХозОперацииПоступленияТоваров.Найти(Строка.ХозяйственнаяОперация) <> Неопределено Тогда
			
			Строка.ЕстьОформленныеПоступления = ОпределитьНаличиеОформленныхНакладных(Строка.Ссылка,
																				Строка.Склад,
																				Строка.ХозяйственнаяОперация,
																				Истина,
																				Истина);
			
			Если Строка.ЕстьОформленныеПоступления <> ЕстьОформленныеПоступления
				И МассивТаблиц.Количество() > 0 Тогда
				
				ТекстОшибки = НСтр("ru = 'В пакетном режиме можно или создавать новые документы или перезаполнять.
					|Документ %1 не будет обработан, выберете его отдельно.'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка.Ссылка);
				ПрерватьОбработкуСтроки = Истина;
			Иначе
				
				ЕстьОформленныеПоступления = Строка.ЕстьОформленныеПоступления
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Строка.Ссылка) = Тип("ДокументСсылка.ЗаказПоставщику")
			ИЛИ ТипЗнч(Строка.Ссылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
			ИЛИ ТипЗнч(Строка.Ссылка) = Тип("СправочникСсылка.СоглашенияСПоставщиками") Тогда
			
			Строка.ЕстьОформленныеПоступления = ОпределитьНаличиеОформленныхНакладных(Строка.Ссылка,
																			Строка.Склад,
																			Строка.ХозяйственнаяОперация);
			
			Если Строка.ЕстьОформленныеПоступления <> ЕстьОформленныеПоступления
				И МассивТаблиц.Количество() > 0 Тогда
				
				ТекстОшибки = НСтр("ru = 'В пакетном режиме можно или создавать новые документы или перезаполнять.
					|Документ %1 не будет обработан, выберете его отдельно.'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка.Ссылка);
				ПрерватьОбработкуСтроки = Истина;
			Иначе
				
				ЕстьОформленныеПоступления = Строка.ЕстьОформленныеПоступления;
			КонецЕсли;
			
		ИначеЕсли ПакетныйРежим И ПолноеИмяНакладной = ПолноеИмяРаспоряжения Тогда
			
			ТекстОшибки = НСтр("ru = 'Для распоряжения %1 невозможно перезаполнить накладную вместе с другими распоряжениями. Выберите распоряжение отдельно.'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка.Ссылка);
			
			ПрерватьОбработкуСтроки = Истина;
			
		ИначеЕсли НЕ (Строка.СостояниеОрдера = 1
			И ХозОперацииПоступленияТоваров.Найти(Строка.ХозяйственнаяОперация) = Неопределено
			И ТипЗнч(Строка.Ссылка) <> Тип("ДокументСсылка.ПриобретениеТоваровУслуг"))
			И НЕ ТипЗнч(Строка.Ссылка) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
			И НЕ ТипЗнч(Строка.Ссылка) = Тип("ДокументСсылка.ПриемкаТоваровНаХранение")Тогда
			
			ТекстОшибки = НСтр("ru = 'По документу %1 не требуется оформление приемки или приобретения'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка.Ссылка);
			ПрерватьОбработкуСтроки = Истина;
			
		КонецЕсли;
		
		Если ПрерватьОбработкуСтроки Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаПриемку",ТекстОшибки, Неопределено);
			Продолжить;
		КонецЕсли;
		
		Если РазделеннаяТаблица = Неопределено 
			Или Не ИспользоватьПоступлениеПоНесколькимЗаказам
			Или ПолноеИмяНакладной <> ТекущиеКлючи.ПолноеИмяНакладной 
			Или Не ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(ТекущиеКлючи,Строка,КлючевыеПоля) Тогда
			
			РазделеннаяТаблица = ШаблонРазделеннаяТаблица.Скопировать();
			МассивТаблиц.Добавить(РазделеннаяТаблица);
			
			ЗаполнитьЗначенияСвойств(ТекущиеКлючи, Строка);
			ТекущиеКлючи.ПолноеИмяНакладной = ПолноеИмяНакладной;
		КонецЕсли;
		
		НоваяСтрока = РазделеннаяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
	КонецЦикла;
	
	Если МассивТаблиц.Количество() > 1 И ЕстьОформленныеПоступления Тогда
		МассивТаблиц = Новый Массив();
		ТекстОшибки = НСтр("ru = 'Переоформлять накладные можно только по заказам, имеющим одинаковые значимые реквизиты.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаПриемку",ТекстОшибки, Неопределено);
	КонецЕсли;
	
	Возврат МассивТаблиц;
	
КонецФункции

&НаСервере
Функция ОформитьРядПриобретенийПоТаблицамКонтрольОрдеров(ДокументыПоТипамНакладных, СписокОшибок)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ИмяФормы", "Обработка.ЖурналДокументовЗакупки.Форма.ФормаСозданныеДокументы");
	
	СозданныеДокументы = Новый СписокЗначений();
	
	ХозОперацииПоступленияТоваров = ХозОперацииПоступленияТоваров();
	
	Для Каждого Таблица Из ДокументыПоТипамНакладных Цикл
		
		ПерваяСтрока = Таблица[0];

		Если ХозОперацииПоступленияТоваров.Найти(ПерваяСтрока.ХозяйственнаяОперация) <> Неопределено Тогда
			ПолноеИмяНакладной = "Документ.ПоступлениеТоваровНаСклад";
		Иначе
			ПолноеИмяНакладной = ПолноеИмяНакладнойПоХозОперации(ПерваяСтрока.ХозяйственнаяОперация);
		КонецЕсли;
		
		МенеджерНакладной = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяНакладной);
		МетаданныеНакладной = Метаданные.НайтиПоПолномуИмени(ПолноеИмяНакладной);
		
		Заказы = Таблица.ВыгрузитьКолонку("Ссылка");
		
		Если ПолноеИмяНакладной = "Документ.ПоступлениеТоваровНаСклад" Тогда
			
			Для каждого ДокументОснованиеПоступленияТоваровНаСклад Из Заказы Цикл
				
				
				ДанныеЗаполнения = Новый Структура;
				ДанныеЗаполнения.Вставить("ДокументОснование",            ДокументОснованиеПоступленияТоваровНаСклад);
				ДанныеЗаполнения.Вставить("СкладПоступления",             ПерваяСтрока.Склад);
				ДанныеЗаполнения.Вставить("ХозяйственнаяОперацияПриемки", ПерваяСтрока.ХозяйственнаяОперация);
				ДанныеЗаполнения.Вставить("ЗаполнятьПоОрдеру",            Истина);
				
				СоздатьДокументНаСервере(ДокументОснованиеПоступленияТоваровНаСклад, МенеджерНакладной,
					МетаданныеНакладной, ДанныеЗаполнения, СозданныеДокументы, СписокОшибок);
				
			КонецЦикла;
			
		Иначе
			
			ДанныеЗаполнения = Новый Структура;
			ДанныеЗаполнения.Вставить("ДокументОснование",            Заказы);
			ДанныеЗаполнения.Вставить("СкладПоступления",             ПерваяСтрока.Склад);
			ДанныеЗаполнения.Вставить("ХозяйственнаяОперацияПриемки", ПерваяСтрока.ХозяйственнаяОперация);
			ДанныеЗаполнения.Вставить("ЗаполнятьПоОрдеру",            Истина);
			
			СоздатьДокументНаСервере(Заказы[0], МенеджерНакладной, МетаданныеНакладной, ДанныеЗаполнения, СозданныеДокументы, СписокОшибок);
		КонецЕсли;
				
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Пользователи.АвторизованныйПользователь(),
														СозданныеДокументы.ВыгрузитьЗначения(),
														"ФормаСозданныеДокументыЗакупки");
	УстановитьПривилегированныйРежим(Ложь);
	
	ПараметрыФормы = Новый Структура("СозданныеДокументы", СозданныеДокументы);
	
	СтруктураПараметров.Вставить("Параметры", ПараметрыФормы);
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Процедура СоздатьДокументНаСервере(ДокументОснование, МенеджерДокумента, МетаданныеДокумента, ДанныеЗаполнения, СозданныеДокументы, СписокОшибок)
	
	ДокументОбъект = МенеджерДокумента.СоздатьДокумент();
	ДокументОбъект.Заполнить(ДанныеЗаполнения);
	
	ДокументОбъект.Дата = ТекущаяДатаСеанса();
	
	Если ДокументОбъект.ПроверитьЗаполнение() Тогда
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		// Добавить запись в историю работы пользователя.
		ИсторияРаботыПользователя.Добавить(ДокументОбъект.Ссылка);
		
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			СозданныеДокументы.Добавить(ДокументОбъект.Ссылка);
		Исключение
			ТекстОшибки = НСтр("ru = 'Не удалось провести документ'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаПриемку",
				ТекстОшибки + " " + ДокументОбъект.Ссылка, Неопределено);
		КонецПопытки;
		
	Иначе
		ТекстОшибки = НСтр("ru = 'Не удалось создать документ %1 на основании документа %2'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, МетаданныеДокумента.Синоним, ДокументОснование);
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаПриемку",
			ТекстОшибки + " " + ДокументОбъект.Ссылка, Неопределено);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ОформитьПриобретениеПоТаблицеКонтрольОрдеров(ДокументыПоТипамНакладных, СписокОшибок)
	
	СозданныеДокументы = Новый СписокЗначений();
	
	ТаблицаДокументов = ДокументыПоТипамНакладных[0]; // см. ШаблонРазделеннойТаблицы
	ВыделеннаяСтрока = ТаблицаДокументов[0];
	
	ХозОперацииПоступленияТоваров = ХозОперацииПоступленияТоваров();
	
	Если ВыделеннаяСтрока.Ссылка = Неопределено Тогда
		ПолноеИмяРаспоряжения = "";
	Иначе
		ПолноеИмяРаспоряжения = ВыделеннаяСтрока.Ссылка.Метаданные().ПолноеИмя();
	КонецЕсли;
	
	Если НЕ ВыделеннаяСтрока.ЕстьОформленныеПоступления
		И ХозОперацииПоступленияТоваров.Найти(ВыделеннаяСтрока.ХозяйственнаяОперация) <> Неопределено Тогда
		
		ПолноеИмяНакладной = "Документ.ПоступлениеТоваровНаСклад";
	Иначе
		ПолноеИмяНакладной = ПолноеИмяНакладнойПоХозОперации(ВыделеннаяСтрока.ХозяйственнаяОперация);
	КонецЕсли;
	
	МетаданныеНакладной = Метаданные.НайтиПоПолномуИмени(ПолноеИмяНакладной);
	
	ИмяФормыНакладной = "Документ." + МетаданныеНакладной.Имя + ".Форма.ФормаДокумента";
	
	НастройкиФормы = Новый Структура();
	ПараметрыФормы = Новый Структура();
	
	НастройкиФормы.Вставить("ИмяФормы", ИмяФормыНакладной);
	
	Заказы = ТаблицаДокументов.ВыгрузитьКолонку("Ссылка");
	
	РаспоряженияНакладные = Новый Массив();
	Для Каждого Распоряжение Из Заказы Цикл
		Если Распоряжение = Неопределено Тогда
			РаспоряжениеПолноеИмя = "";
		Иначе
			РаспоряжениеПолноеИмя = Распоряжение.Метаданные().ПолноеИмя();
		КонецЕсли;
		Если ПолныеИменаНакладных.НайтиПоЗначению(РаспоряжениеПолноеИмя) <> Неопределено Тогда
			РаспоряженияНакладные.Добавить(Распоряжение);
		КонецЕсли;
	КонецЦикла;
	
	Отказ = Ложь;
	
	Если ПолноеИмяРаспоряжения = ПолноеИмяНакладной Тогда
		
		ПараметрыСОснованием = Новый Структура("Ключ, ЗаполнятьПоОрдеру", ВыделеннаяСтрока.Ссылка, Истина);
		
	ИначеЕсли ВыделеннаяСтрока.ЕстьОформленныеПоступления Тогда
		
		
		НастройкиФормы.Вставить("ИмяФормы", "ОбщаяФорма.ПереоформлениеНакладныхПоРаспоряжениям");
		
		РеквизитыШапки = Новый Структура;
		
		Если ТипЗнч(ВыделеннаяСтрока.Ссылка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			Отказ = НЕ ЗакупкиВызовСервера.СформироватьДанныеЗаполненияПоступления(Заказы, МетаданныеНакладной.Имя, РеквизитыШапки);
		ИначеЕсли ТипЗнч(ВыделеннаяСтрока.Ссылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			РеквизитыШапки = РеквизитыШапкиДоговора(ВыделеннаяСтрока.Ссылка);
		ИначеЕсли ТипЗнч(ВыделеннаяСтрока.Ссылка) = Тип("СправочникСсылка.СоглашенияСПоставщиками") Тогда
			РеквизитыШапки = ЗакупкиВызовСервера.ПолучитьУсловияЗакупок(Заказы[0]);
			РеквизитыШапки.ХозяйственнаяОперация = ВыделеннаяСтрока.ХозяйственнаяОперация;
		Иначе
			РеквизитыШапки = ЗакупкиВызовСервера.ПолучитьУсловияЗакупок(Заказы);
			РеквизитыШапки.ХозяйственнаяОперация = ВыделеннаяСтрока.ХозяйственнаяОперация;
		КонецЕсли;
		
		ПараметрыСОснованием = Новый Структура;
		ПараметрыСОснованием.Вставить("Заказы",         Заказы);
		ПараметрыСОснованием.Вставить("РеквизитыШапки", РеквизитыШапки);
		ПараметрыСОснованием.Вставить("Склад",          ВыделеннаяСтрока.Склад);
		ПараметрыСОснованием.Вставить("НастройкиФормы", НастройкиФормыПереоформленияНакладных);
		
		// Для вывода сообщения о количестве созданных документов
		СозданныеДокументы.Добавить(ПредопределенноеЗначение("Документ." + МетаданныеНакладной.Имя + ".ПустаяСсылка"));
		
	ИначеЕсли ПолноеИмяНакладной = "Документ.ПоступлениеТоваровНаСклад"
		И Заказы.Количество() > 1 Тогда
		
		МенеджерНакладной = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяНакладной);
		
		СозданныеДокументы = Новый СписокЗначений();
		
			Для каждого ДокументОснованиеПоступленияТоваровНаСклад Из Заказы Цикл
				
				ДанныеЗаполнения = Новый Структура;
				ДанныеЗаполнения.Вставить("ДокументОснование",            ДокументОснованиеПоступленияТоваровНаСклад);
				ДанныеЗаполнения.Вставить("СкладПоступления",             ВыделеннаяСтрока.Склад);
				ДанныеЗаполнения.Вставить("ХозяйственнаяОперацияПриемки", ВыделеннаяСтрока.ХозяйственнаяОперация);
				ДанныеЗаполнения.Вставить("ЗаполнятьПоОрдеру",            Истина);
				
				СоздатьДокументНаСервере(ДокументОснованиеПоступленияТоваровНаСклад, МенеджерНакладной,
					МетаданныеНакладной, ДанныеЗаполнения, СозданныеДокументы, СписокОшибок);
				
			КонецЦикла;
			
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Пользователи.АвторизованныйПользователь(),
														СозданныеДокументы.ВыгрузитьЗначения(),
														"ФормаСозданныеДокументыЗакупки");
		УстановитьПривилегированныйРежим(Ложь);
	
		ПараметрыСОснованием = Новый Структура("СозданныеДокументы", СозданныеДокументы);
		
		НастройкиФормы.Вставить("ИмяФормы", "Обработка.ЖурналДокументовЗакупки.Форма.ФормаСозданныеДокументы");
	
	Иначе
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ДокументОснование",            ВыделеннаяСтрока.Ссылка);
		ПараметрыФормы.Вставить("СкладПоступления",             ВыделеннаяСтрока.Склад);
		ПараметрыФормы.Вставить("ХозяйственнаяОперацияПриемки", ВыделеннаяСтрока.ХозяйственнаяОперация);
		ПараметрыФормы.Вставить("ЗаполнятьПоОрдеру",            Истина);
		
		ПараметрыСОснованием = Новый Структура("Основание, ЗаполнятьПоОрдеру", ПараметрыФормы, Истина);
		
		// Для вывода сообщения о количестве созданных документов
		СозданныеДокументы.Добавить(ПредопределенноеЗначение("Документ." + МетаданныеНакладной.Имя + ".ПустаяСсылка"));
		
	КонецЕсли;
	
	
	НастройкиФормы.Вставить("Параметры", ПараметрыСОснованием);
	
	Если Отказ Тогда
		Возврат Неопределено;
	Иначе
		Возврат НастройкиФормы;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ОформитьАктыНаСервере()
	
	Перем СписокОшибок;
	
	// Разбивка выделенных документов по группам
	ДокументыПоТипамНакладных = ТаблицыПриобретенийРазделенныхПоКлючевымПолям(СписокРаспоряжений, СписокОшибок);
	ВсегоТаблиц = ДокументыПоТипамНакладных.Количество();
	
	Если ВсегоТаблиц > 0 Тогда
		
		Если ДокументыПоТипамНакладных.Количество() > 1 Тогда
			// Пакетно
			ПараметрыФормы = ОформитьРядАктовПоТаблицам(ДокументыПоТипамНакладных, СписокОшибок);
		ИначеЕсли ДокументыПоТипамНакладных.Количество() = 1 Тогда
			// Индивидуально
			ПараметрыФормы = ОформитьАктПоТаблице(ДокументыПоТипамНакладных, СписокОшибок);
		КонецЕсли;
	ИначеЕсли СписокРаспоряжений.Количество() > 1 Тогда
		
		// При оформлении документов в пакетном режиме произошли ошибки
		
		ТекстОшибки = НСтр("ru = 'Не выбрано ни одного документа, который можно было бы оформить %1'");
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, НСтр("ru = 'по заказам'"));
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаПриемку",ТекстОшибки, Неопределено);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыФормы) Тогда
		ПараметрыФормы = Новый Структура();
	Иначе 
		ОбновитьТаблицуФормы(Элементы.СтраницаРаспоряженияНаПриемку, Элементы.СписокРаспоряженияНаПриемку);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("СписокОшибок", СписокОшибок);
	
	Возврат ПараметрыФормы;
	
КонецФункции

// Параметры:
// 	СписокРаспоряжений - ДанныеФормыКоллекция - Описание
// 	СписокОшибок - СписокЗначений - 
// Возвращаемое значение:
// 	Массив - Массив из см. ШаблонРазделеннойТаблицыДляАкта
&НаСервере
Функция ТаблицыПриобретенийРазделенныхПоКлючевымПолям(СписокРаспоряжений, СписокОшибок) 
	КлючевыеПоля = "Организация,Контрагент,НалогообложениеНДС,Партнер,Валюта,ХозяйственнаяОперация,ЦенаВключаетНДС,Договор,Соглашение,Подразделение";
	
	ТекущиеКлючи = Новый Структура(КлючевыеПоля);
	ТекущиеКлючи.Вставить("ПолноеИмяНакладной");
	ТекущиеКлючи.Вставить("СостояниеПриобретения");
	
	ШаблонРазделеннаяТаблица = ШаблонРазделеннойТаблицыДляАкта();
	
	РазделеннаяТаблица = Неопределено;
	МассивТаблиц = Новый Массив();
	
	СписокРаспоряжений.Сортировать("Ссылка, Склад, СостояниеПриобретения, ТипРаспоряжения");
	
	ХозОперацииЗапрещенныеВАктеОРасхождениях = ХозОперацииЗапрещенныеВАктеОРасхождениях();
	
	МассивТиповДокументПоступления = Новый Массив;
	МассивТиповДокументПоступления.Добавить(Тип("ДокументСсылка.ПриобретениеТоваровУслуг"));
	МассивТиповДокументПоступления.Добавить(Тип("ДокументСсылка.ПриемкаТоваровНаХранение"));
	
	Для Каждого Строка Из СписокРаспоряжений Цикл
		
		ПолноеИмяНакладной = ПолноеИмяНакладнойПоХозОперации(Строка.ХозяйственнаяОперация);
		
		ТекстОшибки = "";
		ПрерватьОбработкуСтроки = Ложь;
		
		Если МассивТиповДокументПоступления.Найти(ТипЗнч(Строка.Ссылка)) = Неопределено Тогда
			Если ИспользоватьОтветственноеХранениеВПроцессеЗакупки Тогда
				ТекстОшибки = НСтр("ru = 'Для распоряжения %1 невозможно создать акт о расхождениях.
					|Выберите строку с типом распоряжения ""Приобретение товаров и услуг"" или ""Приемка товаров на хранение"".'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка.Ссылка);
				ПрерватьОбработкуСтроки = Истина;
			Иначе
				ТекстОшибки = НСтр("ru = 'Для распоряжения %1 невозможно создать акт о расхождениях.
					|Выберите строку с типом распоряжения ""Приобретение товаров и услуг"".'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка.Ссылка);
				ПрерватьОбработкуСтроки = Истина;
			КонецЕсли;
			
		ИначеЕсли ХозОперацииЗапрещенныеВАктеОРасхождениях.Найти(Строка.ХозяйственнаяОперация) <> Неопределено Тогда
			НаименованиеАкта = ?(ТипЗнч(Строка.Ссылка) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг"),
				НСтр("ru='поступления'"),
				НСтр("ru='приемки'"));
			
			ТекстОшибки = НСтр("ru='Невозможно оформить документ ""Акт о расхождениях после %1"" на основании распоряжения %2 с операцией ""%3"".'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
				НаименованиеАкта,
				Строка(Строка.Ссылка),
				Строка(Строка.ХозяйственнаяОперация));
			ПрерватьОбработкуСтроки = Истина;
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаПриемку",ТекстОшибки, Неопределено);
		КонецЕсли;
		
		Если ПрерватьОбработкуСтроки Тогда
			Продолжить;
		КонецЕсли;
		
		Если РазделеннаяТаблица = Неопределено 
			Или Не ИспользоватьПоступлениеПоНесколькимЗаказам
			Или ПолноеИмяНакладной <> ТекущиеКлючи.ПолноеИмяНакладной 
			Или Не ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(ТекущиеКлючи,Строка,КлючевыеПоля) Тогда
			
			РазделеннаяТаблица = ШаблонРазделеннаяТаблица.Скопировать();
			МассивТаблиц.Добавить(РазделеннаяТаблица);
			
			ЗаполнитьЗначенияСвойств(ТекущиеКлючи, Строка);
			ТекущиеКлючи.ПолноеИмяНакладной = ПолноеИмяНакладной;
		КонецЕсли;
		
		НоваяСтрока = РазделеннаяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
	КонецЦикла;
	
	Возврат МассивТаблиц;
	
КонецФункции

&НаСервере
Функция ОформитьРядАктовПоТаблицам(ДокументыПоТипамНакладных, СписокОшибок)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ИмяФормы", "Обработка.ЖурналДокументовЗакупки.Форма.ФормаСозданныеДокументы");
	
	СозданныеДокументы = Новый СписокЗначений();
	
	Для Каждого Таблица Из ДокументыПоТипамНакладных Цикл
		
		ПерваяСтрока = Таблица[0];
		
		ПолноеИмяАкта = Метаданные.Документы.АктОРасхожденияхПослеПриемки.ПолноеИмя();
		МенеджерАкта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяАкта);
		МетаданныеАкта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяАкта);
		
		Заказы = Таблица.ВыгрузитьКолонку("Ссылка");
		
		РеквизитыШапки = Новый Структура;
		Если НЕ ЗакупкиВызовСервера.СформироватьДанныеЗаполненияПоступления(Заказы, МетаданныеАкта.Имя, РеквизитыШапки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("ДокументОснование", Заказы);
		ДанныеЗаполнения.Вставить("ТипОснования", ПерваяСтрока.Типраспоряжения);
		
		ДокументОбъект = МенеджерАкта.СоздатьДокумент();
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		
		Если ДокументОбъект.ПроверитьЗаполнение() Тогда
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			
			// Добавить запись в историю работы пользователя.
			ИсторияРаботыПользователя.Добавить(ДокументОбъект.Ссылка);
			СозданныеДокументы.Добавить(ДокументОбъект.Ссылка);
			
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ТекстОшибки = НСтр("ru = 'Не удалось провести документ'");
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаПриемку",
					ТекстОшибки + " " + ДокументОбъект.Ссылка, Неопределено);
			КонецПопытки;
			
		Иначе
			ТекстОшибки = НСтр("ru = 'Не удалось создать документ %1 на основании документа %2'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, МетаданныеАкта.Синоним, Заказы[0]);
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаПриемку",
				ТекстОшибки + " " + ДокументОбъект.Ссылка, Неопределено);
		КонецЕсли;
			
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Пользователи.АвторизованныйПользователь(),
														СозданныеДокументы.ВыгрузитьЗначения(),
														"ФормаСозданныеДокументыЗакупки");
	УстановитьПривилегированныйРежим(Ложь);
	
	ПараметрыФормы = Новый Структура("СозданныеДокументы", СозданныеДокументы);
	
	СтруктураПараметров.Вставить("Параметры", ПараметрыФормы);
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Функция ОформитьАктПоТаблице(ДокументыПоТипамНакладных, СписокОшибок)
	
	СозданныеДокументы = Новый СписокЗначений();
	
	ТаблицаДокументов = ДокументыПоТипамНакладных[0];
	ВыделеннаяСтрока = ТаблицаДокументов[0];
	
	ПолноеИмяАкта = Метаданные.Документы.АктОРасхожденияхПослеПриемки.ПолноеИмя();
	МетаданныеАкта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяАкта);
	
	ИмяФормыАкта = "Документ." + МетаданныеАкта.Имя + ".Форма.ФормаДокумента";
	
	НастройкиФормы = Новый Структура();
	ПараметрыФормы = Новый Структура();
	
	НастройкиФормы.Вставить("ИмяФормы", ИмяФормыАкта);
	
	Заказы = ТаблицаДокументов.ВыгрузитьКолонку("Ссылка");
	
	РаспоряженияНакладные = Новый Массив();
	Для Каждого Распоряжение Из Заказы Цикл
		Если ПолныеИменаНакладных.НайтиПоЗначению(Распоряжение.Метаданные().ПолноеИмя()) <> Неопределено Тогда
			РаспоряженияНакладные.Добавить(Распоряжение);
		КонецЕсли;
	КонецЦикла;
	
	Отказ = Ложь;
		
	РеквизитыШапки = Новый Структура;
	Если НЕ ЗакупкиВызовСервера.СформироватьДанныеЗаполненияПоступления(Заказы, МетаданныеАкта.Имя, РеквизитыШапки) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СкладПоступления",  Неопределено);
	ПараметрыФормы.Вставить("РеквизитыШапки",    РеквизитыШапки);
	ПараметрыФормы.Вставить("ДокументОснование", Заказы);
	ПараметрыФормы.Вставить("ТипОснования",      ВыделеннаяСтрока.ТипРаспоряжения);
	
	// Для вывода сообщения о количестве созданных документов
	СозданныеДокументы.Добавить(ПредопределенноеЗначение("Документ." + МетаданныеАкта.Имя + ".ПустаяСсылка"));
	
	//ПараметрыФормы.Вставить("СозданныеДокументы", СозданныеДокументы);
	ПараметрыСОснованием = Новый Структура("Основание, ПерезаполнитьПоПриемке", ПараметрыФормы, Истина);
	
	НастройкиФормы.Вставить("Параметры", ПараметрыСОснованием);
	
	Если Отказ Тогда
		Возврат Неопределено;
	Иначе
		Возврат НастройкиФормы;
	КонецЕсли;
	
КонецФункции

// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * Ссылка - ДокументСсылка - 
// * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации -
// * СостояниеПриобретения - Число -
// * ТипРаспоряжения - Тип -
&НаСервереБезКонтекста
Функция ШаблонРазделеннойТаблицыДляАкта()
	
	ШаблонРазделеннаяТаблица = Новый ТаблицаЗначений();
	ШаблонРазделеннаяТаблица.Колонки.Добавить("Ссылка", Документы.ТипВсеСсылки());
	//ШаблонРазделеннаяТаблица.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("ХозяйственнаяОперация", Новый ОписаниеТипов("ПеречислениеСсылка.ХозяйственныеОперации"));
	//ШаблонРазделеннаяТаблица.Колонки.Добавить("СостояниеПриобретения", Новый ОписаниеТипов("Число"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("ТипРаспоряжения", Новый ОписаниеТипов("Тип"));
	
	Возврат ШаблонРазделеннаяТаблица;
	
КонецФункции

// Возвращаемое значение:
// 	ТаблицаЗначений:
// * Ссылка - ДокументСсылка
// * Склад - СправочникСсылка.Склады
// * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации
// * СостояниеПриобретения - Число
// * ЕстьОформленныеПоступления - Булево
&НаСервереБезКонтекста
Функция ШаблонРазделеннойТаблицыКонтрольОрдеров()
	
	МассТипов= новый массив;
	МассТипов.Добавить(Справочники.ТипВсеСсылки());
	МассТипов.Добавить(Документы.ТипВсеСсылки());
	
	ШаблонРазделеннаяТаблица = Новый ТаблицаЗначений();
	ШаблонРазделеннаяТаблица.Колонки.Добавить("Ссылка", Новый ОписаниеТипов(МассТипов));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("ХозяйственнаяОперация", Новый ОписаниеТипов("ПеречислениеСсылка.ХозяйственныеОперации"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("СостояниеПриобретения", Новый ОписаниеТипов("Число"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("ЕстьОформленныеПоступления", Новый ОписаниеТипов("Булево"));

	Возврат ШаблонРазделеннаяТаблица;
	
КонецФункции

#КонецОбласти

#Область КОформленюПоступления

&НаСервере
Функция ОформитьПоступленияПоЗаказамНаСервере(ЭтоУслуги)
	
	Перем СписокОшибок;
	
	// Разбивка выделенных документов по группам
	ДокументыПоТипамНакладных = ТаблицыЗаказовРазделенныхПоКлючевымПолямДляПоступлений(СписокРаспоряжений, СписокОшибок, ЭтоУслуги);
	ВсегоТаблиц = ДокументыПоТипамНакладных.Количество();
	
	Если ВсегоТаблиц > 0 Тогда
		
		Если ДокументыПоТипамНакладных.Количество() > 1 Тогда
			// Пакетно
			ПараметрыФормы = ОформитьРядПоступленийПоТаблицам(ДокументыПоТипамНакладных, СписокОшибок, ЭтоУслуги);
		ИначеЕсли ДокументыПоТипамНакладных.Количество() = 1 Тогда
			// Индивидуально
			ПараметрыФормы = ОформитьПоступлениеПоТаблице(ДокументыПоТипамНакладных, СписокОшибок, ЭтоУслуги);
		КонецЕсли;
	ИначеЕсли СписокРаспоряжений.Количество() > 1 Тогда
		
		// При оформлении документов в пакетном режиме произошли ошибки
		
		ТекстОшибки = НСтр("ru = 'Не выбрано ни одного документа, который можно было бы оформить %1'");
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, НСтр("ru = 'по заказам'"));
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаПоступление",ТекстОшибки, Неопределено);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыФормы) Тогда
		ПараметрыФормы = Новый Структура();
	Иначе 
		ОбновитьТаблицуФормы(Элементы.СтраницаРаспоряженияНаПоступление, Элементы.СписокРаспоряженияНаПоступление);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("СписокОшибок", СписокОшибок);
	
	Возврат ПараметрыФормы;
	
КонецФункции

// Параметры:
// 	ДокументыПоТипамНакладных - Массив из см. ШаблонРазделеннойТаблицыКОформлениюПоступления
&НаСервере
Функция ОформитьРядПоступленийПоТаблицам(ДокументыПоТипамНакладных, СписокОшибок, ЭтоУслуги)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ИмяФормы", "Обработка.ЖурналДокументовЗакупки.Форма.ФормаСозданныеДокументы");
	
	СозданныеДокументы = Новый СписокЗначений();
	
	Для Каждого Таблица Из ДокументыПоТипамНакладных Цикл
		
		ПерваяСтрока = Таблица[0];
		
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("ДокументОснование",				ПерваяСтрока.Ссылка);
		ДанныеЗаполнения.Вставить("ХозяйственнаяОперацияПриемки",	ПерваяСтрока.ХозяйственнаяОперация);
		ДанныеЗаполнения.Вставить("ЗаполнятьПоНакладной",			ПерваяСтрока.ЗаполнятьПоНакладной);
		
		Если Не ЭтоУслуги Тогда
			ДанныеЗаполнения.Вставить("СкладПоступления", ПерваяСтрока.Склад);
			
			ДокументМенеджер = Документы.ПоступлениеТоваровНаСклад;
		Иначе
			ДокументМенеджер = Документы.ПоступлениеУслугВПодразделение;
		КонецЕсли;
		
		ДокументОбъект = ДокументМенеджер.СоздатьДокумент();
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		
		Если Не ЭтоУслуги Тогда
			ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект, ДокументМенеджер);
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерий);
		КонецЕсли;
		
		ДокументЗаписан = Истина;
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись)
		Исключение
			ДокументЗаписан = Ложь;
			
			Если ЭтоУслуги Тогда
				ТекстОшибки = НСтр("ru = 'Не удалось создать документ ""Поступления услуг в подразделение"" на основании документа %1'");
			Иначе
				ТекстОшибки = НСтр("ru = 'Не удалось создать документ ""Поступления товаров"" на основании документа %1'");
			КонецЕсли;
			
			ТекстОшибки = СтрШаблон(ТекстОшибки, ПерваяСтрока.Ссылка);
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				СписокОшибок,
				"Объект.СписокРаспоряженияНаОформление",
				ТекстОшибки + " " + ДокументОбъект.Ссылка,
				Неопределено);
		КонецПопытки;
		
		Если ДокументЗаписан Тогда
			// Добавить запись в историю работы пользователя.
			ИсторияРаботыПользователя.Добавить(ДокументОбъект.Ссылка);
			СозданныеДокументы.Добавить(ДокументОбъект.Ссылка);
			
			Если ДокументОбъект.ПроверитьЗаполнение() Тогда
				Попытка
					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					ТекстОшибки = НСтр("ru = 'Не удалось провести документ'");
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление",
						ТекстОшибки + " " + ДокументОбъект.Ссылка, Неопределено);
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
			
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Пользователи.АвторизованныйПользователь(),
														СозданныеДокументы.ВыгрузитьЗначения(),
														"ФормаСозданныеДокументыЗакупки");
	УстановитьПривилегированныйРежим(Ложь);
	
	ПараметрыФормы = Новый Структура("СозданныеДокументы", СозданныеДокументы);
	
	СтруктураПараметров.Вставить("Параметры", ПараметрыФормы);
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Функция ОформитьПоступлениеПоТаблице(ДокументыПоТипамНакладных, СписокОшибок, ЭтоУслуги)
	
	СозданныеДокументы = Новый СписокЗначений();
	
	ТаблицаДокументов = ДокументыПоТипамНакладных[0]; // см. ШаблонРазделеннойТаблицыКОформлениюПоступления
	ВыделеннаяСтрока = ТаблицаДокументов[0];
	
	Если ЭтоУслуги Тогда
		
		ИмяФормыНакладной = "Документ.ПоступлениеУслугВПодразделение.Форма.ФормаДокумента";
		
	Иначе
		
		ИмяФормыНакладной = "Документ.ПоступлениеТоваровНаСклад.Форма.ФормаДокумента";
		
	КонецЕсли;
	
	НастройкиФормы = Новый Структура();
	ПараметрыФормы = Новый Структура();
	
	НастройкиФормы.Вставить("ИмяФормы", ИмяФормыНакладной);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДокументОснование",            ВыделеннаяСтрока.Ссылка);
	ПараметрыФормы.Вставить("ЗаполнятьПоНакладной",         ВыделеннаяСтрока.ЗаполнятьПоНакладной);
	ПараметрыФормы.Вставить("ХозяйственнаяОперацияПриемки", ВыделеннаяСтрока.ХозяйственнаяОперация);
	
	Если НЕ ЭтоУслуги Тогда
		
		ПараметрыФормы.Вставить("СкладПоступления",             ВыделеннаяСтрока.Склад);
		
	КонецЕсли;
	
	// Для вывода сообщения о количестве созданных документов
	Если ЭтоУслуги Тогда
		
		СозданныеДокументы.Добавить(ПредопределенноеЗначение("Документ.ПоступлениеУслугВПодразделение.ПустаяСсылка"));
		
	Иначе
		
		СозданныеДокументы.Добавить(ПредопределенноеЗначение("Документ.ПоступлениеТоваровНаСклад.ПустаяСсылка"));
		
	КонецЕсли;
	
	ПараметрыСОснованием = Новый Структура("Основание", ПараметрыФормы);
	
	НастройкиФормы.Вставить("Параметры", ПараметрыСОснованием);
	
	Возврат НастройкиФормы;
	
КонецФункции

// Параметры:
// 	СписокРаспоряжений - ДанныеФормыКоллекция - Описание
// 	СписокОшибок - СписокЗначений - 
// Возвращаемое значение:
// 	Массив - Массив из см. ШаблонРазделеннойТаблицыКОформлениюПоступления
&НаСервере
Функция ТаблицыЗаказовРазделенныхПоКлючевымПолямДляПоступлений(СписокРаспоряжений, СписокОшибок, ЭтоУслуги)
	КлючевыеПоля = "Ссылка";
	
	ТекущиеКлючи = Новый Структура(КлючевыеПоля);
	ТекущиеКлючи.Вставить("ПолноеИмяНакладной");
	ТекущиеКлючи.Вставить("СостояниеПриобретения");
	
	ШаблонРазделеннаяТаблица = ШаблонРазделеннойТаблицыКОформлениюПоступления();
	
	РазделеннаяТаблица = Неопределено;
	МассивТаблиц = Новый Массив();
	
	СписокРаспоряжений.Сортировать(КлючевыеПоля);
	
	Если ЭтоУслуги Тогда
		
		ШаблонОшибки = НСтр("ru = 'По распоряжению %1 оформление документа ""Поступление услуг"" не требуется.'");
		
	Иначе
		
		ШаблонОшибки = НСтр("ru = 'По распоряжению %1 оформление документа ""Поступление товаров"" не требуется.'");
		
	КонецЕсли;
	
	Для Каждого Строка Из СписокРаспоряжений Цикл
		
		ПрерватьОбработкуСтроки = Ложь;
		Строка.ЗаполнятьПоНакладной = Истина;
		
		Если (НЕ ЭтоУслуги
			И НЕ Строка.ЕстьТовары)
			ИЛИ (ЭтоУслуги
			И НЕ Строка.ЕстьУслуги) Тогда
			
			ПрерватьОбработкуСтроки = Истина;
			
		ИначеЕсли Строка.СостояниеПоступленияТоваров = 0
			Или Строка.СостояниеПоступленияРаспоряжения = 0 Тогда
			
			ПрерватьОбработкуСтроки = Истина;
			
		ИначеЕсли Строка.СостояниеПоступленияПриобретения = 1
			Или (Строка.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаФактуровкаПоставки")
				Или Строка.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСФактуровкаПоставки")) Тогда
			
			Строка.ЗаполнятьПоНакладной = Ложь;
			
		ИначеЕсли (Не Строка.ЗаполнятьПоНакладной
				И Строка.СостояниеПоступленияПриобретения = 3)
			Или Строка.СостояниеПоступленияПриобретения = 0 Тогда
			
			ПрерватьОбработкуСтроки = Истина;
			
		КонецЕсли;
		
		Если ПрерватьОбработкуСтроки Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, Строка.Ссылка);
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление",ТекстОшибки, Неопределено);
			Продолжить;
		КонецЕсли;
		
		Если РазделеннаяТаблица = Неопределено 
			Или Не ИспользоватьПоступлениеПоНесколькимЗаказам
			Или Не ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(ТекущиеКлючи,Строка,КлючевыеПоля) Тогда
			
			РазделеннаяТаблица = ШаблонРазделеннаяТаблица.Скопировать();
			МассивТаблиц.Добавить(РазделеннаяТаблица);
			
			ЗаполнитьЗначенияСвойств(ТекущиеКлючи, Строка);
		КонецЕсли;
		
		НоваяСтрока = РазделеннаяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
	КонецЦикла;
	
	Возврат МассивТаблиц;
	
КонецФункции

&НаСервере
Функция ОформитьПриобретенияПоЗаказамНаСервере()
	
	Перем СписокОшибок;
	
	// Разбивка выделенных документов по группам
	ДокументыПоТипамНакладных = ТаблицыЗаказовРазделенныхПоКлючевымПолямДляПриобретений(СписокРаспоряжений, СписокОшибок);
	ВсегоТаблиц = ДокументыПоТипамНакладных.Количество();
	
	Если ВсегоТаблиц > 0 Тогда
		
		Если ДокументыПоТипамНакладных.Количество() > 1 Тогда
			// Пакетно
			ПараметрыФормы = ОформитьРядПриобретенийПоТаблицам(ДокументыПоТипамНакладных, СписокОшибок);
		ИначеЕсли ДокументыПоТипамНакладных.Количество() = 1 Тогда
			// Индивидуально
			ПараметрыФормы = ОформитьПриобретениеПоТаблице(ДокументыПоТипамНакладных, СписокОшибок);
		КонецЕсли;
	ИначеЕсли СписокРаспоряжений.Количество() > 1 Тогда
		
		// При оформлении документов в пакетном режиме произошли ошибки
		
		ТекстОшибки = НСтр("ru = 'Не выбрано ни одного документа, который можно было бы оформить %1'");
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, НСтр("ru = 'по заказам'"));
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаПоступление",ТекстОшибки, Неопределено);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыФормы) Тогда
		ПараметрыФормы = Новый Структура();
	Иначе 
		ОбновитьТаблицуФормы(Элементы.СтраницаРаспоряженияНаПоступление, Элементы.СписокРаспоряженияНаПоступление);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("СписокОшибок", СписокОшибок);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Функция ОформитьРядПриобретенийПоТаблицам(ДокументыПоТипамНакладных, СписокОшибок)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ИмяФормы", "Обработка.ЖурналДокументовЗакупки.Форма.ФормаСозданныеДокументы");
	
	СозданныеДокументы = Новый СписокЗначений();
	
	Для Каждого Таблица Из ДокументыПоТипамНакладных Цикл
		
		ПерваяСтрока = Таблица[0];//СтрокаТаблицыЗначений
		
		Заказы = Таблица.ВыгрузитьКолонку("Ссылка");
		
		РеквизитыШапки = Новый Структура;
		Если НЕ ЗакупкиВызовСервера.СформироватьДанныеЗаполненияПоступления(Заказы, "ПриобретениеТоваровУслуг", РеквизитыШапки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("РеквизитыШапки",               РеквизитыШапки);
		Если ТипЗнч(ПерваяСтрока.Ссылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
			ИЛИ ТипЗнч(ПерваяСтрока.ссылка) = Тип("СправочникСсылка.СоглашенияСПоставщиками") Тогда
			ДанныеЗаполнения.Вставить("ДокументОснование",            ПерваяСтрока.Ссылка);
		Иначе
			ДанныеЗаполнения.Вставить("ДокументОснование",            Заказы);
		КонецЕсли;
		ДанныеЗаполнения.Вставить("СкладПоступления",             ПерваяСтрока.Склад);
		ДанныеЗаполнения.Вставить("ХозяйственнаяОперацияПриемки", ПерваяСтрока.ХозяйственнаяОперация);
		ДанныеЗаполнения.Вставить("ЗаполнятьПоОрдеру",            Истина);
		
		ДокументОбъект = Документы.ПриобретениеТоваровУслуг.СоздатьДокумент();
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		
		Если ДокументОбъект.ПроверитьЗаполнение() Тогда
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			
			// Добавить запись в историю работы пользователя.
			ИсторияРаботыПользователя.Добавить(ДокументОбъект.Ссылка);
			СозданныеДокументы.Добавить(ДокументОбъект.Ссылка);
			
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ТекстОшибки = НСтр("ru = 'Не удалось провести документ'");
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаПриемку",
					ТекстОшибки + " " + ДокументОбъект.Ссылка, Неопределено);
			КонецПопытки;
			
		Иначе
			ТекстОшибки = НСтр("ru = 'Не удалось создать документ ""Приобретение товаров и услуг"" на основании документа %1'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, Заказы[0]);
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаПриемку",
				ТекстОшибки + " " + ДокументОбъект.Ссылка, Неопределено);
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Пользователи.АвторизованныйПользователь(),
														СозданныеДокументы.ВыгрузитьЗначения(),
														"ФормаСозданныеДокументыЗакупки");
	УстановитьПривилегированныйРежим(Ложь);
	
	ПараметрыФормы = Новый Структура("СозданныеДокументы", СозданныеДокументы);
	
	СтруктураПараметров.Вставить("Параметры", ПараметрыФормы);
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Функция ОформитьПриобретениеПоТаблице(ДокументыПоТипамНакладных, СписокОшибок)
	
	СозданныеДокументы = Новый СписокЗначений();
	
	ТаблицаДокументов = ДокументыПоТипамНакладных[0]; // см. ШаблонРазделеннойТаблицыКонтрольОрдеров
	ВыделеннаяСтрока = ТаблицаДокументов[0];
	
	Заказы = ТаблицаДокументов.ВыгрузитьКолонку("Ссылка");
	
	НастройкиФормы = Новый Структура();
	
	ИмяФормыНакладной = "Документ.ПриобретениеТоваровУслуг.Форма.ФормаДокумента";
	НастройкиФормы.Вставить("ИмяФормы", ИмяФормыНакладной);
	
	Отказ = Ложь;
	
	Если ТипЗнч(ВыделеннаяСтрока.Ссылка) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		
		ПараметрыСОснованием = Новый Структура("Ключ, ЗаполнятьПоОрдеру", ВыделеннаяСтрока.Ссылка, Истина);
		
	ИначеЕсли ВыделеннаяСтрока.ЕстьОформленныеПоступления Тогда
		
		НастройкиФормы.Вставить("ИмяФормы", "ОбщаяФорма.ПереоформлениеНакладныхПоРаспоряжениям");
		
		РеквизитыШапки = Новый Структура;
		
		Если ТипЗнч(ВыделеннаяСтрока.Ссылка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			Отказ = НЕ ЗакупкиВызовСервера.СформироватьДанныеЗаполненияПоступления(Заказы, "ПриобретениеТоваровУслуг", РеквизитыШапки);
		ИначеЕсли ТипЗнч(ВыделеннаяСтрока.Ссылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			РеквизитыШапки = РеквизитыШапкиДоговора(ВыделеннаяСтрока.Ссылка);
		Иначе
			РеквизитыШапки = ЗакупкиВызовСервера.ПолучитьУсловияЗакупок(Заказы);
			РеквизитыШапки.ХозяйственнаяОперация = ВыделеннаяСтрока.ХозяйственнаяОперация;
		КонецЕсли;
		
		ПараметрыСОснованием = Новый Структура;
		ПараметрыСОснованием.Вставить("Заказы",         Заказы);
		ПараметрыСОснованием.Вставить("РеквизитыШапки", РеквизитыШапки);
		ПараметрыСОснованием.Вставить("Склад",          ВыделеннаяСтрока.Склад);
		ПараметрыСОснованием.Вставить("НастройкиФормы", НастройкиФормыПереоформленияНакладных);
		
	Иначе
		
		РеквизитыШапки = Новый Структура;
		Если НЕ ЗакупкиВызовСервера.СформироватьДанныеЗаполненияПоступления(Заказы, "ПриобретениеТоваровУслуг", РеквизитыШапки) Тогда
			Отказ = Истина;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РеквизитыШапки",               РеквизитыШапки);
		Если ТипЗнч(ВыделеннаяСтрока.Ссылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
			ИЛИ ТипЗнч(ВыделеннаяСтрока.ссылка) = Тип("СправочникСсылка.СоглашенияСПоставщиками") Тогда
			ПараметрыФормы.Вставить("ДокументОснование",            ВыделеннаяСтрока.Ссылка);
		Иначе
			ПараметрыФормы.Вставить("ДокументОснование",            Заказы);
		КонецЕсли;
		ПараметрыФормы.Вставить("СкладПоступления",             ВыделеннаяСтрока.Склад);
		ПараметрыФормы.Вставить("ХозяйственнаяОперацияПриемки", ВыделеннаяСтрока.ХозяйственнаяОперация);
		
		// Для вывода сообщения о количестве созданных документов
		СозданныеДокументы.Добавить(ПредопределенноеЗначение("Документ.ПриобретениеТоваровУслуг.ПустаяСсылка"));
		
		ПараметрыСОснованием = Новый Структура("Основание, ЗаполнятьПоОрдеру", ПараметрыФормы, Истина);
	КонецЕсли;
	
	НастройкиФормы.Вставить("Параметры", ПараметрыСОснованием);
	
	Если Отказ Тогда
		Возврат Неопределено;
	Иначе
		Возврат НастройкиФормы;
	КонецЕсли;
	
КонецФункции

// Параметры:
// 	СписокРаспоряжений - ДанныеФормыКоллекция - Описание
// 	СписокОшибок - СписокЗначений - 
// Возвращаемое значение:
// 	Массив - Массив из см. ШаблонРазделеннойТаблицыКонтрольОрдеров
&НаСервере
Функция ТаблицыЗаказовРазделенныхПоКлючевымПолямДляПриобретений(СписокРаспоряжений, СписокОшибок) 
	КлючевыеПоля = "Подразделение,Партнер,Контрагент,Договор,Организация,Склад,Соглашение,"
		+"ХозяйственнаяОперация,ВалютаВзаиморасчетов,НалогообложениеНДС,ЦенаВключаетНДС,"
		+"ПорядокРасчетов,ВернутьМногооборотнуюТару,НаправлениеДеятельности,ВариантПриемкиТоваров,ТипРаспоряжения";
	
	ТекущиеКлючи = Новый Структура(КлючевыеПоля);
	ТекущиеКлючи.Вставить("ПолноеИмяНакладной");
	ТекущиеКлючи.Вставить("СостояниеПриобретения");
	
	ШаблонРазделеннаяТаблица = ШаблонРазделеннойТаблицыКонтрольОрдеров();
	
	РазделеннаяТаблица = Неопределено;
	МассивТаблиц = Новый Массив();
	
	СписокРаспоряжений.Сортировать(КлючевыеПоля);
	
	ПакетныйРежим = СписокРаспоряжений.Количество() > 1;
	
	ШаблонОшибки = НСтр("ru = 'По распоряжению %1 оформление документа ""Приобретение товаров"" не требуется.'");
	
	ЕстьОформленныеПоступления = Ложь;
	
	Для Каждого Строка Из СписокРаспоряжений Цикл
		
		Если ТипЗнч(Строка.Ссылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			Строка.Договор = Строка.Ссылка;
		ИначеЕсли ТипЗнч(Строка.Ссылка) = Тип("СправочникСсылка.СоглашенияСПоставщиками") Тогда
			Строка.Соглашение = Строка.Ссылка;
		КонецЕсли;
		
		ПрерватьОбработкуСтроки = Ложь;
		
		Если ПакетныйРежим И ТипЗнч(Строка.Ссылка) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
			
			ТекстОшибки = НСтр("ru = 'Для распоряжения %1 невозможно перезаполнить приобретение вместе с другими распоряжениями. Выберите распоряжение отдельно.'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка.Ссылка);
			
			ПрерватьОбработкуСтроки = Истина;
			
		ИначеЕсли Строка.СостояниеПоступленияПриобретения = 0
			ИЛИ (Строка.СостояниеПоступленияПриобретения = 1
				И Строка.СостояниеПоступленияТоваров = 1)
			ИЛИ (Строка.СостояниеПоступленияТоваров = 1
				И Строка.СостояниеПоступленияПриобретения = 3) Тогда
				
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, Строка.Ссылка);
			ПрерватьОбработкуСтроки = Истина;
				
		ИначеЕсли ТипЗнч(Строка.Ссылка) = Тип("ДокументСсылка.ЗаказПоставщику")
			ИЛИ ТипЗнч(Строка.Ссылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
			ИЛИ ТипЗнч(Строка.Ссылка) = Тип("СправочникСсылка.СоглашенияСПоставщиками") Тогда
			
			Если Строка.СостояниеПоступленияПриобретения = 3 Тогда
				Строка.ЕстьОформленныеПоступления = ОпределитьНаличиеОформленныхНакладных(Строка.Ссылка,
														Строка.Склад,
														Строка.ХозяйственнаяОперация,
														Ложь,
														Ложь,
														Истина);
														
				Если Строка.ЕстьОформленныеПоступления <> ЕстьОформленныеПоступления
					И МассивТаблиц.Количество() > 0 Тогда
					
					ТекстОшибки = НСтр("ru = 'В пакетном режиме можно или создавать новые документы или перезаполнять.
						|Документ %1 не будет обработан, выберете его отдельно.'");
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка.Ссылка);
					ПрерватьОбработкуСтроки = Истина;
				Иначе
					
					ЕстьОформленныеПоступления = Строка.ЕстьОформленныеПоступления
				КонецЕсли;
				
			ИначеЕсли НЕ Строка.СостояниеПоступленияПриобретения = 1 Тогда
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, Строка.Ссылка);
				ПрерватьОбработкуСтроки = Истина;
				
			КонецЕсли;
			
		ИначеЕсли НЕ ТипЗнч(Строка.Ссылка) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, Строка.Ссылка);
			ПрерватьОбработкуСтроки = Истина;
			
		КонецЕсли;
		
		Если ПрерватьОбработкуСтроки Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление",ТекстОшибки, Неопределено);
			Продолжить;
		КонецЕсли;
		
		Если РазделеннаяТаблица = Неопределено 
			Или Не ИспользоватьПоступлениеПоНесколькимЗаказам
			Или Не ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(ТекущиеКлючи,Строка,КлючевыеПоля) Тогда
			
			РазделеннаяТаблица = ШаблонРазделеннаяТаблица.Скопировать();
			МассивТаблиц.Добавить(РазделеннаяТаблица);
			
			ЗаполнитьЗначенияСвойств(ТекущиеКлючи, Строка);
		КонецЕсли;
		
		НоваяСтрока = РазделеннаяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
	КонецЦикла;
	
	Возврат МассивТаблиц;
	
КонецФункции

&НаСервере
Функция ОформитьСписаниеРасхожденийНаСервере()
	
	Перем СписокОшибок;
	
	// Разбивка выделенных документов по группам
	ДокументыПоТипамНакладных = ТаблицыЗаказовРазделенныхПоКлючевымПолямДляСписанийРасхождений(СписокРаспоряжений, СписокОшибок);
	ВсегоТаблиц = ДокументыПоТипамНакладных.Количество();
	
	Если ВсегоТаблиц > 0 Тогда
		
		Если ДокументыПоТипамНакладных.Количество() > 1 Тогда
			// Пакетно
			ПараметрыФормы = ОформитьРядСписанийРасхожденийПоТаблицам(ДокументыПоТипамНакладных, СписокОшибок);
		ИначеЕсли ДокументыПоТипамНакладных.Количество() = 1 Тогда
			// Индивидуально
			ПараметрыФормы = ОформитьСписаниеРасхожденийПоТаблице(ДокументыПоТипамНакладных, СписокОшибок);
		КонецЕсли;
	ИначеЕсли СписокРаспоряжений.Количество() > 1 Тогда
		
		// При оформлении документов в пакетном режиме произошли ошибки
		
		ТекстОшибки = НСтр("ru = 'Не выбрано ни одного документа, который можно было бы оформить %1'");
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, НСтр("ru = 'по заказам'"));
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаПоступление",ТекстОшибки, Неопределено);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыФормы) Тогда
		ПараметрыФормы = Новый Структура();
	Иначе 
		ОбновитьТаблицуФормы(Элементы.СтраницаРаспоряженияНаПоступление, Элементы.СписокРаспоряженияНаПоступление);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("СписокОшибок", СписокОшибок);
	
	Возврат ПараметрыФормы;

КонецФункции

// Параметры:
// 	ДокументыПоТипамНакладных - Массив из см. ШаблонРазделеннойТаблицыКОформлениюПоступления
&НаСервере
Функция ОформитьРядСписанийРасхожденийПоТаблицам(ДокументыПоТипамНакладных, СписокОшибок)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ИмяФормы", "Обработка.ЖурналДокументовЗакупки.Форма.ФормаСозданныеДокументы");
	
	СозданныеДокументы = Новый СписокЗначений();
	
	Для Каждого Таблица Из ДокументыПоТипамНакладных Цикл
		
		ПерваяСтрока = Таблица[0];
		
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("ДокументОснование",      ПерваяСтрока.Ссылка);
		
		ДокументОбъект = Документы.СписаниеРасхожденийПоступлениеПриобретение.СоздатьДокумент();
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		
		Если ДокументОбъект.ПроверитьЗаполнение() Тогда
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			
			// Добавить запись в историю работы пользователя.
			ИсторияРаботыПользователя.Добавить(ДокументОбъект.Ссылка);
			СозданныеДокументы.Добавить(ДокументОбъект.Ссылка);
			
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ТекстОшибки = НСтр("ru = 'Не удалось провести документ'");
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление",
					ТекстОшибки + " " + ДокументОбъект.Ссылка, Неопределено);
			КонецПопытки;
			
		Иначе
			ТекстОшибки = НСтр("ru = 'Не удалось создать документ ""Списание расхождений между поступлением и приобретением"" на основании документа %1'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, ПерваяСтрока.Ссылка);
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление",
				ТекстОшибки + " " + ДокументОбъект.Ссылка, Неопределено);
		КонецЕсли;
			
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Пользователи.АвторизованныйПользователь(),
														СозданныеДокументы.ВыгрузитьЗначения(),
														"ФормаСозданныеДокументыЗакупки");
	УстановитьПривилегированныйРежим(Ложь);
	
	ПараметрыФормы = Новый Структура("СозданныеДокументы", СозданныеДокументы);
	
	СтруктураПараметров.Вставить("Параметры", ПараметрыФормы);
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Функция ОформитьСписаниеРасхожденийПоТаблице(ДокументыПоТипамНакладных, СписокОшибок)
	
	СозданныеДокументы = Новый СписокЗначений();
	
	ТаблицаДокументов = ДокументыПоТипамНакладных[0]; // см. ШаблонРазделеннойТаблицыКОформлениюПоступления
	ВыделеннаяСтрока = ТаблицаДокументов[0];
	
	ИмяФормыДокумента = "Документ.СписаниеРасхожденийПоступлениеПриобретение.Форма.ФормаДокумента";
	
	НастройкиФормы = Новый Структура();
	ПараметрыФормы = Новый Структура();
	
	НастройкиФормы.Вставить("ИмяФормы", ИмяФормыДокумента);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДокументОснование",            ВыделеннаяСтрока.Ссылка);
	ПараметрыФормы.Вставить("Склад",						ВыделеннаяСтрока.Склад);
	
	// Для вывода сообщения о количестве созданных документов
	СозданныеДокументы.Добавить(ПредопределенноеЗначение("Документ.СписаниеРасхожденийПоступлениеПриобретение.ПустаяСсылка"));
	
	ПараметрыСОснованием = Новый Структура("Основание", ПараметрыФормы);
	
	НастройкиФормы.Вставить("Параметры", ПараметрыСОснованием);
	
	Возврат НастройкиФормы;
	
КонецФункции

// Параметры:
// 	СписокРаспоряжений - ДанныеФормыКоллекция - Описание
// 	СписокОшибок - СписокЗначений - 
// Возвращаемое значение:
// 	Массив - Массив из см. ШаблонРазделеннойТаблицыКОформлениюПоступления
&НаСервере
Функция ТаблицыЗаказовРазделенныхПоКлючевымПолямДляСписанийРасхождений(СписокРаспоряжений, СписокОшибок) 
	КлючевыеПоля = "Ссылка";
	
	ТекущиеКлючи = Новый Структура(КлючевыеПоля);
	ТекущиеКлючи.Вставить("ПолноеИмяНакладной");
	ТекущиеКлючи.Вставить("СостояниеПриобретения");
	
	ШаблонРазделеннаяТаблица = ШаблонРазделеннойТаблицыКОформлениюПоступления();
	
	РазделеннаяТаблица = Неопределено;
	МассивТаблиц = Новый Массив();
	
	СписокРаспоряжений.Сортировать(КлючевыеПоля);
	
	ШаблонОшибки = НСтр("ru = 'По распоряжению %1 оформление документа ""Списание расхождений между поступлением и приобретением"" не требуется.'");
	
	Для Каждого Строка Из СписокРаспоряжений Цикл
		
		ПрерватьОбработкуСтроки = Ложь;
		Строка.ЗаполнятьПоНакладной = Истина;
		
		Если Строка.СостояниеПоступленияПриобретения = 1
			Или (Строка.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаФактуровкаПоставки")
				Или Строка.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСФактуровкаПоставки")) Тогда
			
			Строка.ЗаполнятьПоНакладной = Ложь;
			
		ИначеЕсли (Не Строка.ЗаполнятьПоНакладной
				И Строка.СостояниеПоступленияПриобретения = 3)
			Или Строка.СостояниеПоступленияПриобретения = 0 Тогда
			
			ПрерватьОбработкуСтроки = Истина;
			
		КонецЕсли;
		
		Если ПрерватьОбработкуСтроки Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, Строка.Ссылка);
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление",ТекстОшибки, Неопределено);
			Продолжить;
		КонецЕсли;
		
		Если РазделеннаяТаблица = Неопределено 
			Или Не ИспользоватьПоступлениеПоНесколькимЗаказам
			Или Не ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(ТекущиеКлючи,Строка,КлючевыеПоля) Тогда
			
			РазделеннаяТаблица = ШаблонРазделеннаяТаблица.Скопировать();
			МассивТаблиц.Добавить(РазделеннаяТаблица);
			
			ЗаполнитьЗначенияСвойств(ТекущиеКлючи, Строка);
		КонецЕсли;
		
		НоваяСтрока = РазделеннаяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
	КонецЦикла;
	
	Возврат МассивТаблиц;
	
КонецФункции

// Возвращаемое значение:
// 	ТаблицаЗначений:
// * Ссылка - ДокументСсылка, СправочникСсылка - 
// * Склад - СправочникСсылка.Склады
// * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации
// * ЗаполнятьПоНакладной - Булево
&НаСервереБезКонтекста
Функция ШаблонРазделеннойТаблицыКОформлениюПоступления()
	
	МассТипов= новый массив;
	МассТипов.Добавить(Справочники.ТипВсеСсылки());
	МассТипов.Добавить(Документы.ТипВсеСсылки());
	
	ШаблонРазделеннаяТаблица = Новый ТаблицаЗначений();
	ШаблонРазделеннаяТаблица.Колонки.Добавить("Ссылка", Новый ОписаниеТипов(МассТипов));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("ХозяйственнаяОперация", Новый ОписаниеТипов("ПеречислениеСсылка.ХозяйственныеОперации"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("ЗаполнятьПоНакладной", Новый ОписаниеТипов("Булево"));

	Возврат ШаблонРазделеннаяТаблица;
	
КонецФункции

#КонецОбласти


#КонецОбласти
