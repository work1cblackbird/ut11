#Область ОписаниеПеременных

&НаКлиенте
Перем ВыполняетсяЗакрытие;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();

	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ХозяйственныеОперацииРаздельнойЗакупки = ЗакупкиСервер.ХозяйственныеОперацииРаздельнойЗакупкиБезОтборов();
	
	ИспользуетсяОперацияРаздельнойЗакупки = Ложь;
	Если ХозяйственныеОперацииРаздельнойЗакупки.Найти(Параметры.ХозяйственнаяОперация) <> Неопределено Тогда
		ИспользуетсяОперацияРаздельнойЗакупки = Истина;
	КонецЕсли;
	
	Ссылка             = Параметры.Ссылка;
	ВалютаДокумента    = Параметры.ВалютаДокумента;
	НалогообложениеНДС = Параметры.НалогообложениеНДС;
	ЦенаВключаетНДС    = Параметры.ЦенаВключаетНДС;
	ПоступлениеПоЗаказам = Параметры.ПоступлениеПоЗаказам;
	ЗаказПоставщику      = Параметры.ЗаказПоставщику;
	Если Параметры.Свойство("ХозяйственнаяОперация") Тогда
		ХозяйственнаяОперация = Параметры.ХозяйственнаяОперация;
	КонецЕсли;
	Если Параметры.Свойство("ПорядокРасчетов") Тогда
		ПорядокРасчетов = Параметры.ПорядокРасчетов;
	КонецЕсли;
	
	АдресТоварыНакладнойВоВременномХранилище = Параметры.АдресТоварыНакладнойВоВременномХранилище;
	ИспользоватьПоступлениеПоНесколькимЗаказам = ПолучитьФункциональнуюОпцию("ИспользоватьПоступлениеПоНесколькимЗаказам");
	ИспользоватьОрдернуюСхемуПриПоступлении = Параметры.ОрдернаяСхемаПриПриемке;
	ИспользоватьЗаказыПоставщикам = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам");
	ИспользоватьРучныеСкидкиВПродажах = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
	
	Элементы.ПоОрдеру.Видимость = ИспользоватьЗаказыПоставщикам И ИспользоватьОрдернуюСхемуПриПоступлении;
	Если ИспользуетсяОперацияРаздельнойЗакупки Тогда
		Элементы.ТаблицаТоваровКоличествоУпаковокВОрдере.Заголовок = НСтр("ru='В поступлениях'");
	КонецЕсли;
	Элементы.ПоступлениеПоЗаказу.Видимость = ПоступлениеПоЗаказам И ИспользоватьПоступлениеПоНесколькимЗаказам;
	Элементы.ЗаказПоставщику.Видимость = ПоступлениеПоЗаказам И ИспользоватьПоступлениеПоНесколькимЗаказам;
	Элементы.ПоступлениеПоЗаказам.Видимость = ПоступлениеПоЗаказам И ИспользоватьПоступлениеПоНесколькимЗаказам;
	Элементы.НадписьЗаголовокЗаказыПоставщикам.Видимость = ПоступлениеПоЗаказам И ИспользоватьПоступлениеПоНесколькимЗаказам;
	Элементы.ТаблицаТоваровКоличествоУпаковокВОрдере.Видимость = ИспользоватьОрдернуюСхемуПриПоступлении;
	
	ЗакупкаОблагаетсяНДС = УчетНДСУПКлиентСервер.ОтображатьНДСВИтогахДокументаЗакупки(НалогообложениеНДС);
	
	Если ЗакупкаОблагаетсяНДС Тогда
		Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Элементы.СтраницаСНДС;
		Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Элементы.СтраницаВсегоСНДС;
	Иначе
		Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Элементы.СтраницаБезНДС;
		Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Элементы.СтраницаВсегоБезНДС;
	КонецЕсли;
		
	ЗаполнитьТаблицуТоваров();
	ПодборТоваровКлиентСервер.СформироватьЗаголовокФормыПодбора(Заголовок, Параметры.Ссылка);
	УстановитьЗаголовокЗаполнитьПоЗаказамОрдерам();
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если НЕ ВыполняетсяЗакрытие И Модифицированность И НЕ ЗавершениеРаботы Тогда
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект), НСтр("ru = 'Данные были изменены. Перенести изменения в документ?'"), РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВыполняетсяЗакрытие = Истина;
		Модифицированность = Ложь;
		ПеренестиТоварыВДокумент();
		
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		ВыполняетсяЗакрытие = Истина;
		Модифицированность = Ложь;
		Закрыть();
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТаблицаТоваровВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элементы.ТаблицаТоваров.ТекущиеДанные <> Неопределено Тогда
		Если Поле.Имя = "ТаблицаТоваровЗаказПоставщику" Тогда
			ПоказатьЗначение(Неопределено, Элементы.ТаблицаТоваров.ТекущиеДанные.ЗаказПоставщику);
		ИначеЕсли Поле.Имя = "ТаблицаТоваровСделка" Тогда
			ПоказатьЗначение(Неопределено, Элементы.ТаблицаТоваров.ТекущиеДанные.Сделка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоОрдеруПриИзменении(Элемент)
	ПерезаполнитьКоличествоПодобрано();
КонецПроцедуры

&НаКлиенте
Процедура ПоЗаказамПриИзменении(Элемент)
	
	ПриИзмененииПоЗаказам();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЗаголовокЗаказыПоставщикамНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
		ЗначениеПараметраЗаголовок = НСтр("ru='Заказы поставщикам (%КоличествоДокументов%)'");
 	
	ОткрытьФорму(
		"ОбщаяФорма.ПросмотрСпискаДокументов",
		Новый Структура("СписокДокументов, Заголовок",
			СписокЗаказов,
			ЗначениеПараметраЗаголовок
		),
		ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПеренестиВДокументВыполнить()
	
	ПеренестиТоварыВДокумент();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьТоварыВыполнить()
	
	ВыбратьВыделенныеСтроки();
		
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьТоварыВыполнить()
	
	ВыбратьВыделенныеСтроки(Ложь);
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТоваровКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТаблицаТоваров.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ЦенаВключаетНДС);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);

	ПересчитатьИтоговуюСумму();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТоваровВыбранПриИзменении(Элемент)
	
	ПересчитатьИтоговуюСумму();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаТоваров.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаТоваров.ПрисутствуетВДокументе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Gray);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаТоваровЗаказПоставщику.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаТоваров.ЗаказПоставщику");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаТоваровСделка.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаТоваров.Сделка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаТоваровСуммаСНДС.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЦенаВключаетНДС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаТоваровСуммаНДС.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаТоваровСтавкаНДС.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаТоваровСуммаСНДС.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НалогообложениеНДС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	// Оформление склада и подразделения
	// отключение видимости склада, если работа или услуга.

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаТоваровСклад.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаТоваров.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Работа);
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// отключение видимости подразделения, если товар или тара

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаТоваровПодразделение.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаТоваров.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Товар);
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ПараметрыУсловногоОформления = НоменклатураСервер.НовыеПараметрыУсловногоОформленияЕдиницИзмерения();
	ПараметрыУсловногоОформления.ИмяПоляЕдиницаИзмерения = "ТаблицаТоваровНоменклатураЕдиницаИзмерения";
	ПараметрыУсловногоОформления.ПутьКПолюУпаковка = "ТаблицаТоваров.Упаковка";
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, ПараметрыУсловногоОформления);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаТоваровВидЦеныПоставщика.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи);
	СписокЗначений.Добавить(Перечисления.ХозяйственныеОперации.ПриемНаКомиссию);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

КонецПроцедуры

#Область Прочее

&НаКлиенте
Процедура ВыбратьВыделенныеСтроки(ЗначениеВыбора = Истина)
	
	Для Каждого НомерСтроки Из Элементы.ТаблицаТоваров.ВыделенныеСтроки Цикл
		СтрокаТЧ = ТаблицаТоваров.НайтиПоИдентификатору(НомерСтроки);
		СтрокаТЧ.СтрокаВыбрана = ЗначениеВыбора;        
	КонецЦикла;

	ПересчитатьИтоговуюСумму();
	
КонецПроцедуры

&НаСервере
Функция ПоместитьТоварыВХранилище()
	
	Результат = ТаблицаТоваров.Выгрузить(Новый Структура("СтрокаВыбрана", Истина));
	Возврат ПоместитьВоВременноеХранилище(Результат);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуТоваров()
	
	ТоварыНакладной = ПолучитьИзВременногоХранилища(АдресТоварыНакладнойВоВременномХранилище);
	
	ДанныеОтбора = Новый Структура();
	ДанныеОтбора.Вставить("Партнер",                   Параметры.Партнер);
	ДанныеОтбора.Вставить("Контрагент",                Параметры.Контрагент);
	ДанныеОтбора.Вставить("Договор",                   Параметры.Договор);
	ДанныеОтбора.Вставить("Организация",               Параметры.Организация);
	ДанныеОтбора.Вставить("ХозяйственнаяОперация",     Параметры.ХозяйственнаяОперация);
	ДанныеОтбора.Вставить("Соглашение",                Параметры.Соглашение);
	ДанныеОтбора.Вставить("Валюта",                    Параметры.ВалютаДокумента);
	ДанныеОтбора.Вставить("ВалютаВзаиморасчетов",      Параметры.ВалютаВзаиморасчетов);
	ДанныеОтбора.Вставить("НалогообложениеНДС",        Параметры.НалогообложениеНДС);
	ДанныеОтбора.Вставить("ЦенаВключаетНДС",           Параметры.ЦенаВключаетНДС);
	ДанныеОтбора.Вставить("ПорядокРасчетов",           Параметры.ПорядокРасчетов);
	ДанныеОтбора.Вставить("ВернутьМногооборотнуюТару", Параметры.ВернутьМногооборотнуюТару);
	ДанныеОтбора.Вставить("ТребуетсяЗалогЗаТару",      Параметры.ТребуетсяЗалогЗаТару);
	ДанныеОтбора.Вставить("Склад",                     Параметры.Склад);
	ДанныеОтбора.Вставить("Ссылка",                    Параметры.Ссылка);
	ДанныеОтбора.Вставить("Дата",                      Параметры.Дата);
	ДанныеОтбора.Вставить("НаправлениеДеятельности",   Параметры.НаправлениеДеятельности);
	ДанныеОтбора.Вставить("ТоварыНакладной",           ТоварыНакладной);
	ДанныеОтбора.Вставить("ВариантПриемкиТоваров",     Параметры.ВариантПриемкиТоваров);
	ДанныеОтбора.Вставить("ГруппаФинансовогоУчета",    Параметры.ГруппаФинансовогоУчета);
	ДанныеОтбора.Вставить("Подразделение",             Параметры.Подразделение);
	ДанныеОтбора.Вставить("ОперацияССамозанятым",      Параметры.ОперацияССамозанятым);
	
	Если Не ЗначениеЗаполнено(Параметры.ЗаказПоставщику) Или ПолучитьФункциональнуюОпцию("ИспользоватьПоступлениеПоНесколькимЗаказам") Тогда
		МассивЗаказов = Неопределено;
	Иначе
		МассивЗаказов = Новый Массив();
		МассивЗаказов.Добавить(Параметры.ЗаказПоставщику);
	КонецЕсли;
	
	ЗаполнитьПоЗаказамПоПриемке(ДанныеОтбора, ТаблицаТоваров, Параметры.Склад, ПоОрдеру, МассивЗаказов);
	ЗаказыСервер.УстановитьПризнакиПрисутствияСтрокиВДокументе(ТаблицаТоваров, "ЗаказПоставщику", Параметры.МассивКодовСтрок);
	ПерезаполнитьКоличествоПодобрано(Истина, ТоварыНакладной, ДанныеОтбора);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоЗаказамПоПриемке(ДанныеОтбора, Товары, СкладПоступления, ПоОрдеру,
		МассивЗаказов = Неопределено)
	
	РаспоряжениеЗаказ = Ложь;
	МенеджерОбъекта   = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДанныеОтбора.Ссылка);
	
	МенеджерОбъекта.ЗаполнитьПоОстаткамЗаказов(ДанныеОтбора, Товары, СкладПоступления, МассивЗаказов, Ложь);
	
	ПринятыеТовары = ПолучитьРезультатЗапросаПоПринятымТоварам(ДанныеОтбора, СкладПоступления, МассивЗаказов).Выгрузить();
	
	Для Каждого Строка Из ПринятыеТовары Цикл
		ДокументПоступления = Строка.ЗаказПоставщику;
		РаспоряжениеЗаказ   = (ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.ЗаказПоставщику"));
		Если Не РаспоряжениеЗаказ Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура("Склад,Номенклатура,Характеристика,Назначение");
	
	Если РаспоряжениеЗаказ Тогда
		СтруктураПоиска.Вставить("ЗаказПоставщику");
	КонецЕсли;
	
	ИндексСтрокиТовары = -1;
	Пока (ИндексСтрокиТовары+1) <= Товары.Количество()-1 Цикл
		
		ИндексСтрокиТовары = ИндексСтрокиТовары + 1;
		СтрокаТовары = Товары.Получить(ИндексСтрокиТовары);
		
		ТекущаяСтрокаТовары = СтрокаТовары;
		
		СтрокаТовары.КоличествоУпаковокВЗаказе = СтрокаТовары.КоличествоВЗаказе / СтрокаТовары.Коэффициент;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТовары);
		НайденныеСтроки = ПринятыеТовары.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТоварыКоличество = СтрокаТовары.Количество;
		СтрокаТоварыКоличествоВЗаказе = СтрокаТовары.КоличествоВЗаказе;
		КоличествоВСтрокеТоваровИзменилось = Ложь;
		Для каждого ПринятаяСтрока Из НайденныеСтроки Цикл
			
			Если ПринятаяСтрока.Количество > 0 Тогда
				
				Если ПринятаяСтрока.Количество < СтрокаТоварыКоличество Тогда
					КоличествоВСтрокеТоваровИзменилось = Истина;
					СтрокаТовары.Количество = ПринятаяСтрока.Количество;
				Иначе
					СтрокаТовары.Количество = СтрокаТоварыКоличество;
				КонецЕсли;
				
				Если СтрокаТоварыКоличествоВЗаказе > СтрокаТовары.Количество Тогда
					СтрокаТовары.КоличествоВЗаказе = СтрокаТовары.Количество;
					СтрокаТоварыКоличествоВЗаказе = СтрокаТоварыКоличествоВЗаказе - СтрокаТовары.Количество;
				Иначе
					СтрокаТовары.КоличествоВЗаказе = СтрокаТоварыКоличествоВЗаказе;
					СтрокаТоварыКоличествоВЗаказе = 0;
				КонецЕсли;
				
				СтрокаТовары.КоличествоВОрдере = СтрокаТовары.Количество;
				СтрокаТовары.КоличествоУпаковок = СтрокаТовары.Количество / СтрокаТовары.Коэффициент;
				СтрокаТовары.КоличествоУпаковокВОрдере = СтрокаТовары.Количество / СтрокаТовары.Коэффициент;
				СтрокаТовары.КоличествоУпаковокВЗаказе = СтрокаТовары.КоличествоВЗаказе / СтрокаТовары.Коэффициент;
				
				СтрокаТовары.Серия = ПринятаяСтрока.Серия;
				СтрокаТовары.ОрдернаяСхемаПриПриемке = ПринятаяСтрока.ОрдернаяСхемаПриПриемке;
				СтрокаТовары.ТипНоменклатуры = ПринятаяСтрока.ТипНоменклатуры;
				
				ПринятаяСтрока.Количество = ПринятаяСтрока.Количество - СтрокаТовары.Количество;
				СтрокаТоварыКоличество = СтрокаТоварыКоличество - СтрокаТовары.Количество;
				
				Если ПоОрдеру Тогда
					СтрокаТовары.Количество = СтрокаТовары.КоличествоВОрдере;
					СтрокаТовары.КоличествоУпаковок = СтрокаТовары.КоличествоУпаковокВОрдере;
				КонецЕсли;
				
				Если Не РаспоряжениеЗаказ Или РаспоряжениеЗаказ И КоличествоВСтрокеТоваровИзменилось Тогда
					Ценообразование.ПересчитатьСуммыВСтроке(СтрокаТовары, Ложь, Ложь, Истина, ЦенаВключаетНДС);
				КонецЕсли;
				
				Если СтрокаТоварыКоличество > 0 И НайденныеСтроки.Найти(ПринятаяСтрока) <> НайденныеСтроки.ВГраница() Тогда
					ИндексСтрокиТовары = ИндексСтрокиТовары + 1;
					СтрокаТовары = Товары.Вставить(ИндексСтрокиТовары);
					ЗаполнитьЗначенияСвойств(СтрокаТовары, ТекущаяСтрокаТовары);
				Иначе
					Если СтрокаТоварыКоличествоВЗаказе > 0 Тогда
						СтрокаТовары.КоличествоВЗаказе = СтрокаТовары.КоличествоВЗаказе + СтрокаТоварыКоличествоВЗаказе;
						СтрокаТовары.КоличествоУпаковокВЗаказе = СтрокаТовары.КоличествоВЗаказе / СтрокаТовары.Коэффициент;
						СтрокаТоварыКоличествоВЗаказе = 0;
					КонецЕсли;
					Прервать;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого СтрокаПринятогоТовара Из ПринятыеТовары.НайтиСтроки(Новый Структура("Количество",0)) Цикл
			ПринятыеТовары.Удалить(СтрокаПринятогоТовара);
		КонецЦикла;
		
	КонецЦикла;
	
	Если ПринятыеТовары.Количество() > 0 Тогда
		
		СписокСвойств = "Номенклатура,Характеристика,Склад";
		ДопустимыеОтклонения = ЗакупкиСервер.ДопустимыеОтклоненияМерныхТоваров(МассивЗаказов, РаспоряжениеЗаказ);
		
		Если РаспоряжениеЗаказ Тогда 
			СписокСвойств = СписокСвойств + ",ЗаказПоставщику";
		КонецЕсли;
		
		СтруктураПоискаОтклонений = Новый Структура(СписокСвойств);
		
		Для Каждого ПринятаяСтрока Из ПринятыеТовары Цикл
			
			Если ПринятаяСтрока.Количество > 0 Тогда
				ЗаполнитьЗначенияСвойств(СтруктураПоискаОтклонений, ПринятаяСтрока, СписокСвойств);
				
				СтрокиДопустимыхОтклонений = ДопустимыеОтклонения.НайтиСтроки(СтруктураПоискаОтклонений);
				СтрокиТоваров              = Товары.НайтиСтроки(СтруктураПоискаОтклонений);
				
				Если СтрокиТоваров.Количество() > 0 И СтрокиДопустимыхОтклонений.Количество() > 0 
					И СтрокиДопустимыхОтклонений[0].ДопустимоеОтклонение >= ПринятаяСтрока.Количество Тогда
					СтрокаТовары = СтрокиТоваров[0];
					СтрокаТовары.КоличествоВОрдере = СтрокаТовары.КоличествоВОрдере + ПринятаяСтрока.Количество;
					СтрокаТовары.КоличествоУпаковокВОрдере = СтрокаТовары.КоличествоВОрдере / СтрокаТовары.Коэффициент;
				Иначе
					СтрокаТовары = Товары.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТовары, ПринятаяСтрока);
					СтрокаТовары.КоличествоВОрдере = ПринятаяСтрока.Количество;
					СтрокаТовары.КоличествоУпаковокВОрдере = ПринятаяСтрока.Количество;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРезультатЗапросаПоПринятымТоварам(ДанныеОтбора,СкладПоступления = Неопределено,МассивЗаказов = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НакладнаяСсылка",         ДанныеОтбора.Ссылка);
	Запрос.УстановитьПараметр("ТекущаяДата",             ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Соглашение",              ДанныеОтбора.Соглашение);
	Запрос.УстановитьПараметр("Договор",                 ДанныеОтбора.Договор);
	Запрос.УстановитьПараметр("СкладПоступления",        СкладПоступления);
	Запрос.УстановитьПараметр("МассивЗаказов",           МассивЗаказов);
	Запрос.УстановитьПараметр("ЗаполнитьПоПоступлениям", ИспользуетсяОперацияРаздельнойЗакупки);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОстатков.ДокументПоступления КАК ЗаказПоставщику,
	|	ТаблицаОстатков.Склад,
	|	ТаблицаОстатков.Номенклатура,
	|	ТаблицаОстатков.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ТаблицаОстатков.Характеристика,
	|	ТаблицаОстатков.Назначение,
	|	ТаблицаОстатков.Серия,
	|	ТаблицаОстатков.ОрдернаяСхемаПриПриемке,
	|	СУММА(ТаблицаОстатков.КОформлениюОстаток) КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыКОформлениюПоступленияОстатки.ДокументПоступления КАК ДокументПоступления,
	|		ТоварыКОформлениюПоступленияОстатки.Склад КАК Склад,
	|		ВЫБОР
	|			КОГДА ТоварыКОформлениюПоступленияОстатки.Склад.ИспользоватьОрдернуюСхемуПриПоступлении = ИСТИНА
	|					И ТоварыКОформлениюПоступленияОстатки.Склад.ДатаНачалаОрдернойСхемыПриПоступлении <= &ТекущаяДата
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ОрдернаяСхемаПриПриемке,
	|		ТоварыКОформлениюПоступленияОстатки.Номенклатура КАК Номенклатура,
	|		ТоварыКОформлениюПоступленияОстатки.Характеристика КАК Характеристика,
	|		ТоварыКОформлениюПоступленияОстатки.Назначение КАК Назначение,
	|		ТоварыКОформлениюПоступленияОстатки.Серия КАК Серия,
	|		ВЫБОР
	|			КОГДА &ЗаполнитьПоПоступлениям = ИСТИНА ТОГДА
	|				-ТоварыКОформлениюПоступленияОстатки.КОформлениюПоступленийПоНакладнымОстаток
	|			КОГДА ТоварыКОформлениюПоступленияОстатки.Склад.ИспользоватьОрдернуюСхемуПриПоступлении = ИСТИНА
	|					И ТоварыКОформлениюПоступленияОстатки.Склад.ДатаНачалаОрдернойСхемыПриПоступлении <= &ТекущаяДата
	|				ТОГДА ТоварыКОформлениюПоступленияОстатки.КОформлениюПоступленийПоОрдерамОстаток
	|			ИНАЧЕ ТоварыКОформлениюПоступленияОстатки.КОформлениюНакладныхПоРаспоряжениюОстаток
	|		КОНЕЦ КАК КОформлениюОстаток
	|	ИЗ
	|		РегистрНакопления.ТоварыКПоступлению.Остатки(
	|				,
	|				ДокументПоступления В (&МассивЗаказов)
	|					ИЛИ ДокументПоступления = &Соглашение
	|					ИЛИ ДокументПоступления = &Договор
	|					ИЛИ ДокументПоступления = &НакладнаяСсылка) КАК ТоварыКОформлениюПоступленияОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыКОформлениюПоступления.ДокументПоступления,
	|		ТоварыКОформлениюПоступления.Склад,
	|		ВЫБОР
	|			КОГДА ТоварыКОформлениюПоступления.Склад.ИспользоватьОрдернуюСхемуПриПоступлении = ИСТИНА
	|					И ТоварыКОформлениюПоступления.Склад.ДатаНачалаОрдернойСхемыПриПоступлении <= &ТекущаяДата
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ОрдернаяСхемаПриПриемке,
	|		ТоварыКОформлениюПоступления.Номенклатура,
	|		ТоварыКОформлениюПоступления.Характеристика,
	|		ТоварыКОформлениюПоступления.Назначение,
	|		ТоварыКОформлениюПоступления.Серия,
	|		ВЫБОР
	|			КОГДА &ЗаполнитьПоПоступлениям = ИСТИНА ТОГДА
	|				ТоварыКОформлениюПоступления.КОформлениюПоступленийПоНакладным
	|			КОГДА ТоварыКОформлениюПоступления.Склад.ИспользоватьОрдернуюСхемуПриПоступлении = ИСТИНА
	|					И ТоварыКОформлениюПоступления.Склад.ДатаНачалаОрдернойСхемыПриПоступлении <= &ТекущаяДата
	|				ТОГДА ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерам
	|			ИНАЧЕ ТоварыКОформлениюПоступления.КОформлениюНакладныхПоРаспоряжению
	|		КОНЕЦ КАК Количество
	|	ИЗ
	|		РегистрНакопления.ТоварыКПоступлению КАК ТоварыКОформлениюПоступления
	|	ГДЕ
	|		ТоварыКОформлениюПоступления.Регистратор = &НакладнаяСсылка
	|		И ТоварыКОформлениюПоступления.Активность) КАК ТаблицаОстатков
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОстатков.ДокументПоступления,
	|	ТаблицаОстатков.Склад,
	|	ТаблицаОстатков.ОрдернаяСхемаПриПриемке,
	|	ТаблицаОстатков.Номенклатура,
	|	ТаблицаОстатков.Характеристика,
	|	ТаблицаОстатков.Назначение,
	|	ТаблицаОстатков.Серия
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаОстатков.КОформлениюОстаток) > 0";
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

&НаСервере
Процедура ПерезаполнитьКоличествоПодобрано(СЗаполнением = Ложь, ТоварыНакладной = Неопределено, ДанныеОтбора = Неопределено)
	
	Если СЗаполнением Тогда
		ОбновитьИнформациюПоЗаказам(ТоварыНакладной);
		ПоЗаказам = ?(СписокЗаказов.Количество() > 0, СписокЗаказов.Количество() > 0, ЗначениеЗаполнено(ЗаказПоставщику));
		
		УстановитьОтборПоЗаказам();
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, КодСтроки, ЗаказПоставщику, Серия, Склад");
		СтруктураПоискаБезСерии = Новый Структура("Номенклатура, Характеристика, КодСтроки, ЗаказПоставщику, Склад");
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ЦенаВключаетНДС);
	Если ДанныеОтбора <> Неопределено Тогда
		ПараметрыЗаполненияСтавкиНДС = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС();
		ЗаполнитьЗначенияСвойств(ПараметрыЗаполненияСтавкиНДС, ДанныеОтбора);
		ПараметрыЗаполненияСтавкиНДС.ИнициализацияВходящегоДокумента = Истина;
		СтруктураДействий.Вставить("СкорректироватьСтавкуНДС", ПараметрыЗаполненияСтавкиНДС);
	КонецЕсли;
	
	МассивУдаляемыхСтрок = Новый Массив;
	
	СоставИсключаемыхПолей = "Количество, КоличествоУпаковок, Сумма";
	Если ТипЗнч(Ссылка) <> Тип("ДокументСсылка.ПриемкаТоваровНаХранение") Тогда
		СоставИсключаемыхПолей = СоставИсключаемыхПолей + ", СуммаСНДС, СуммаНДС";
	КонецЕсли;
	
	Если  ИспользоватьРучныеСкидкиВПродажах 
		И СЗаполнением 
		И НЕ ТоварыНакладной.Колонки.Найти("СуммаРучнойСкидки") = Неопределено Тогда
		СоставИсключаемыхПолей = СоставИсключаемыхПолей + ", СуммаРучнойСкидки";
	КонецЕсли;
	
	Если СЗаполнением Тогда
		ОтработанныеСтроки = Новый Массив();
		Для каждого ТекСтрока Из ТаблицаТоваров Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекСтрока);
			Строки = ТоварыНакладной.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				СтрокаРеализации = Строки.Получить(0);
				ЗаполнитьЗначенияСвойств(ТекСтрока, СтрокаРеализации,, СоставИсключаемыхПолей);
				ТекСтрока.КоличествоВНакладной = СтрокаРеализации.Количество;
				ТекСтрока.КоличествоУпаковокВНакладной = СтрокаРеализации.КоличествоУпаковок;
				ТекСтрока.ПрисутствуетВДокументе = Истина;
				ТоварыНакладной.Удалить(СтрокаРеализации);
				ОтработанныеСтроки.Добавить(ТекСтрока);
			КонецЕсли;
		КонецЦикла;
		Для каждого ТекСтрока Из ТаблицаТоваров Цикл
			Если ОтработанныеСтроки.Найти(ТекСтрока) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтруктураПоискаБезСерии, ТекСтрока);
			Строки = ТоварыНакладной.НайтиСтроки(СтруктураПоискаБезСерии);
			Если Строки.Количество() > 0 Тогда
				СтрокаРеализации = Строки.Получить(0);
				ЗаполнитьЗначенияСвойств(ТекСтрока, СтрокаРеализации,,"Количество, КоличествоУпаковок");
				ТекСтрока.КоличествоВНакладной = СтрокаРеализации.Количество;
				ТекСтрока.КоличествоУпаковокВНакладной = СтрокаРеализации.КоличествоУпаковок;
				ТекСтрока.ПрисутствуетВДокументе = Истина;
				ТоварыНакладной.Удалить(СтрокаРеализации);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для каждого ТекСтрока Из ТаблицаТоваров Цикл
		
		КоличествоУпаковокДоИзм = ТекСтрока.КоличествоУпаковок;
		КоличествоДоИзм = ТекСтрока.Количество;
		ТекСтрока.КоличествоУпаковок = ?(ПоОрдеру, ТекСтрока.КоличествоУпаковокВОрдере, ТекСтрока.КоличествоУпаковокВЗаказе);
		ТекСтрока.Количество = ?(ПоОрдеру, ТекСтрока.КоличествоВОрдере, ТекСтрока.КоличествоВЗаказе);
		Если ТекСтрока.КоличествоУпаковок <> КоличествоУпаковокДоИзм
			ИЛИ ТекСтрока.Количество <> КоличествоДоИзм Тогда
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекСтрока, СтруктураДействий, Неопределено);
		КонецЕсли;
		
		Если СписокЗаказов.НайтиПоЗначению(ТекСтрока.ЗаказПоставщику) <> Неопределено 
			ИЛИ ТекСтрока.ЗаказПоставщику = ЗаказПоставщику
			ИЛИ НЕ ЗначениеЗаполнено(ТекСтрока.ЗаказПоставщику) Тогда
			
			ТекСтрока.ЗаказИзНакладной = Истина;
			
		КонецЕсли;
		
		ТекСтрока.РасхождениеНакладная = ТекСтрока.КоличествоУпаковок - ТекСтрока.КоличествоУпаковокВНакладной;
		Если ТекСтрока.РасхождениеНакладная <> 0 
			И ((ТекСтрока.ЗаказИзНакладной И ПоЗаказам) ИЛИ НЕ ПоЗаказам) Тогда
			ТекСтрока.СтрокаВыбрана = Истина;
		Иначе
			ТекСтрока.СтрокаВыбрана = Ложь;
		КонецЕсли;
		
		Если СЗаполнением Тогда
			Если (ТекСтрока.КоличествоУпаковокВНакладной = ТекСтрока.КоличествоУпаковокВЗаказе
					ИЛИ НЕ ЗначениеЗаполнено(ТекСтрока.ЗаказПоставщику))
				И (ТекСтрока.КоличествоУпаковокВНакладной = ТекСтрока.КоличествоУпаковокВОрдере 
					ИЛИ НЕ ТекСтрока.ОрдернаяСхемаПриПриемке) Тогда
					МассивУдаляемыхСтрок.Добавить(ТаблицаТоваров.Индекс(ТекСтрока));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ИндексЭлементаМассива = МассивУдаляемыхСтрок.Количество() - 1;
	Пока ИндексЭлементаМассива >= 0 Цикл
		ТаблицаТоваров.Удалить(МассивУдаляемыхСтрок[ИндексЭлементаМассива]);
		ИндексЭлементаМассива = ИндексЭлементаМассива - 1;
	КонецЦикла;
	
	Если СЗаполнением Тогда
		Для каждого ТекСтрока Из ТоварыНакладной Цикл
			СтрокаТовары = ТаблицаТоваров.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТовары, ТекСтрока,,"Количество, КоличествоУпаковок");
			СтрокаТовары.КоличествоВНакладной = ТекСтрока.Количество;
			СтрокаТовары.КоличествоУпаковокВНакладной = ТекСтрока.КоличествоУпаковок;
			СтрокаТовары.СтрокаВыбрана = Истина;
			СтрокаТовары.ПрисутствуетВДокументе = Истина;
			СтрокаТовары.РасхождениеНакладная = -СтрокаТовары.КоличествоУпаковокВНакладной;
			СтрокаТовары.ЗаказИзНакладной = Истина;
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьИтоговыеДанныеПоСумме();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтоговыеДанныеПоСумме()
			
	ОтборВыбранныхСтрок = Новый Структура();
	ОтборВыбранныхСтрок.Вставить("СтрокаВыбрана",Истина);
	ВыбранныеСтрокиТоваров = ТаблицаТоваров.НайтиСтроки(ОтборВыбранныхСтрок);
	СуммаВсего = 0;
	СуммаНДС = 0;
	Для Каждого СтрокаТовара Из ВыбранныеСтрокиТоваров Цикл
		СуммаВсего = СуммаВсего + СтрокаТовара.СуммаСНДС;
		Если ЗначениеЗаполнено(СтрокаТовара.СуммаНДС) Тогда
			СуммаНДС = СуммаНДС + СтрокаТовара.СуммаНДС;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюПоЗаказам(ТоварыНакладной)
	
	ПараметрыОбновления = ЗаказыСервер.ПараметрыОбновленияИнформацииПоЗаказамВФорме();
	
	ПараметрыОбновления.ИмяРеквизитаСписокЗаказов         = "СписокЗаказов";
	ПараметрыОбновления.ПутьЗаказаВШапке                  = "ЗаказПоставщику";
	ПараметрыОбновления.ИмяНадписиЗаголовка               = "НадписьЗаголовокЗаказы";
	ПараметрыОбновления.ИмяГруппыКолонокВТабличнойЧасти   = "ТаблицаТоваровГруппаЗаказПоставщику";
	ПараметрыОбновления.ИмяЗаказаВТабличнойЧасти          = "ЗаказПоставщику";
	ПараметрыОбновления.ИспользоватьЗаказыВТабличнойЧасти = ИспользоватьПоступлениеПоНесколькимЗаказам;

	ЗаказыСервер.ОбновитьИнформациюПоЗаказамВФорме(ЭтаФорма, ТоварыНакладной, ПараметрыОбновления);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоЗаказам()
	
	Если ПоЗаказам Тогда
		Элементы.ТаблицаТоваров.ОтборСтрок = Новый ФиксированнаяСтруктура("ЗаказИзНакладной", Истина);
	Иначе
		Элементы.ТаблицаТоваров.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ЦенаВключаетНДС)
	
	СтруктураПересчетаСуммы =  Новый Структура("ЦенаВключаетНДС", ЦенаВключаетНДС);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПоЗаказам()
	
	УстановитьОтборПоЗаказам();
	
	Если ПоЗаказам Тогда
		СброситьВыборСтрокНеИзНакладной();
	Иначе
		УстановитьВыборСтрокНеИзНакладной();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СброситьВыборСтрокНеИзНакладной()
	СтруктураПоиска = Новый Структура("СтрокаВыбрана", Истина);
	ТоварыПодобрано = ТаблицаТоваров.НайтиСтроки(СтруктураПоиска);
	
	Для каждого СтрокаПодобрано Из ТоварыПодобрано Цикл
		СтрокаПодобрано.СтрокаВыбрана = СтрокаПодобрано.ЗаказИзНакладной;
	КонецЦикла; 
КонецПроцедуры

&НаСервере
Процедура УстановитьВыборСтрокНеИзНакладной()
	СтруктураПоиска = Новый Структура("СтрокаВыбрана", Ложь);
	ТоварыПодобрано = ТаблицаТоваров.НайтиСтроки(СтруктураПоиска);
	
	Для каждого СтрокаПодобрано Из ТоварыПодобрано Цикл
		Если СтрокаПодобрано.РасхождениеНакладная <> 0 Тогда
			СтрокаПодобрано.СтрокаВыбрана = Истина;
		Иначе
			СтрокаПодобрано.СтрокаВыбрана = Ложь;
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокЗаполнитьПоЗаказамОрдерам()
	
	Если НЕ ИспользоватьОрдернуюСхемуПриПоступлении И ИспользоватьЗаказыПоставщикам Тогда
		ЗаголовокЗаполнить = НСтр("ru = 'Подбор товаров по заказам'");
	ИначеЕсли ИспользоватьОрдернуюСхемуПриПоступлении И НЕ ИспользоватьЗаказыПоставщикам Тогда
		ЗаголовокЗаполнить = НСтр("ru = 'Подбор товаров по ордерам'");
	Иначе
		ЗаголовокЗаполнить = НСтр("ru = 'Подбор товаров по заказам/ордерам'");
	КонецЕсли;
	
	Заголовок = ЗаголовокЗаполнить;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиТоварыВДокумент()
	
	МассивЗаказов = Новый Массив;
	МассивПорядковРасчетов = Новый Массив;
	Если СписокЗаказов.Количество() > 0 
		И ЗначениеЗаполнено(ПорядокРасчетов)Тогда
		МассивПорядковРасчетов.Добавить(ПорядокРасчетов);
	КонецЕсли;
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		Если СтрокаТовара.СтрокаВыбрана Тогда
			Если ЗначениеЗаполнено(СтрокаТовара.ПорядокРасчетов)
			И МассивПорядковРасчетов.Найти(СтрокаТовара.ПорядокРасчетов) = Неопределено Тогда
				МассивПорядковРасчетов.Добавить(СтрокаТовара.ПорядокРасчетов);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТовара.ЗаказПоставщику)
				И МассивЗаказов.Найти(СтрокаТовара.ЗаказПоставщику) = Неопределено Тогда
				МассивЗаказов.Добавить(СтрокаТовара.ЗаказПоставщику);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если МассивПорядковРасчетов.Количество() > 1 Тогда
		ОчиститьСообщения();
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='У выбранных заказов отличается поле ""Порядок расчетов""'"));
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьЗаказыПоставщикам
		И Не ИспользоватьПоступлениеПоНесколькимЗаказам
		И МассивЗаказов.Количество() > 1 Тогда
		
		ОчиститьСообщения();
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Нельзя выбрать товары больше, чем по одному заказу.'"));
														
		Возврат;
	КонецЕсли;
	
	// Снятие модифицированности, т.к. перед закрытием признак проверяется.
	Модифицированность = Ложь;

	Закрыть();

	ОповеститьОВыборе(Новый Структура("АдресТоваровВХранилище", ПоместитьТоварыВХранилище()));

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьИтоговуюСумму()
	
	ОтборВыбранныхСтрок = Новый Структура();
	ОтборВыбранныхСтрок.Вставить("СтрокаВыбрана",Истина);
	ВыбранныеСтрокиТоваров = ТаблицаТоваров.НайтиСтроки(ОтборВыбранныхСтрок);
	СуммаВсего = 0;
	СуммаНДС = 0;
	Для Каждого СтрокаТовара Из ВыбранныеСтрокиТоваров Цикл
		СуммаВсего = СуммаВсего + СтрокаТовара.СуммаСНДС;
		Если ЗначениеЗаполнено(СтрокаТовара.СуммаНДС) Тогда
			СуммаНДС = СуммаНДС + СтрокаТовара.СуммаНДС;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Инициализация

ВыполняетсяЗакрытие = Ложь;

#КонецОбласти
