
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Склад                 = Параметры.Склад;
	Помещение             = Параметры.Помещение;
	ТипСкладскойЯчейки    = Перечисления.ТипыСкладскихЯчеек.Приемка;
	Исполнитель           = Параметры.Исполнитель;
	ЗонаПриемки           = Параметры.ЗонаПриемки;
	ПоказыватьФотоТоваров = Параметры.ПоказыватьФотоТоваров;

	ЕдиницаИзмеренияВеса   = Константы.ЕдиницаИзмеренияВеса.Получить();
	ЕдиницаИзмеренияОбъема = Константы.ЕдиницаИзмеренияОбъема.Получить();
	
	УстановитьУсловноеОформление();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ЗначениеЗаполнено(ЗонаПриемки) Тогда
		ЗонаПриемки = ЗаполнитьЗонуПриемкиПоУмолчанию(Склад, Помещение);
	КонецЕсли;
	
	ОбновитьДанныеФормы();
	
	СформироватьПредставлениеОтбораСклад();
	СформироватьПредставлениеОтбораПомещение();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Справочник.Склады.Форма.ФормаВыбора") Тогда
		
		Склад = ВыбранноеЗначение;
		Помещение = Неопределено;
		ЗонаПриемки = ЗаполнитьЗонуПриемкиПоУмолчанию(Склад, Помещение);
		СформироватьПредставлениеОтбораСклад();
		СформироватьПредставлениеОтбораПомещение();
		ОбновитьДанныеФормы();
		
	КонецЕсли;
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Справочник.СкладскиеПомещения.Форма.ФормаВыбора") Тогда
		
		Помещение = ВыбранноеЗначение;
		СформироватьПредставлениеОтбораПомещение();
		ЗонаПриемки = ЗаполнитьЗонуПриемкиПоУмолчанию(Склад, Помещение);
		ОбновитьДанныеФормы();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияУТКлиент.ЕстьНеобработанноеСобытие() Тогда
			
			// Преобразуем предварительно к ожидаемому формату
			Если Параметр[1] = Неопределено Тогда
				Штрихкод = Параметр[0];
			Иначе
				Штрихкод = Параметр[1][1];
			КонецЕсли;
			
			ПараметрыКарточкаТовара = НайтиТоварСервер(Штрихкод);
			
			Если НЕ ЗначениеЗаполнено(ПараметрыКарточкаТовара.Номенклатура) Тогда
				
				ТекстОшибки = СтрШаблон(НСтр("ru='Не найдена номенклатура со штрихкодом: %1'"), Штрихкод);
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
				
				Возврат;
			КонецЕсли;
			
			// Если товар серийный ждем получение серии
			// Если товара не серийный ищем его
			Серийный = Ложь;
			Если Серийный Тогда
				
			Иначе
				
				КоличествоИзШК = ПараметрыКарточкаТовара.Количество;
				ПараметрыКарточкаТовара.Удалить("Количество");
				РезультатПоиска = Товары.НайтиСтроки(ПараметрыКарточкаТовара);
				
				Если РезультатПоиска.Количество() > 0 Тогда
					
					РезультатПоиска[0].ТоварВыбран = Истина;
					
					РезультатПоискаВКорзине = КорзинаТоваров.НайтиСтроки(ПараметрыКарточкаТовара);
					
					Если РезультатПоискаВКорзине.Количество() > 0 Тогда 
						КоличествоВКорзине = РезультатПоискаВКорзине[0].КоличествоУпаковок;
						Если КоличествоВКорзине + КоличествоИзШК > РезультатПоиска[0].КоличествоУпаковок Тогда
							ТекстОшибки = СтрШаблон(НСтр("ru='Размещение товара не требуется: %1'"), ПараметрыКарточкаТовара.Номенклатура);
							ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
							
							Возврат;
						Иначе
							РезультатПоискаВКорзине[0].КоличествоУпаковок = КоличествоВКорзине + КоличествоИзШК;
						КонецЕсли;
					Иначе
						НоваяСтрока = КорзинаТоваров.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, РезультатПоиска[0]);
						НоваяСтрока.КоличествоУпаковок = КоличествоИзШК;
						УстановитьУсловноеОформление();
					КонецЕсли;
					
					ИзменитьИмяКомандыРазместить();
					
					Возврат;
				Иначе
					ТекстОшибки = СтрШаблон(НСтр("ru='Размещение товара не требуется: %1'"), ПараметрыКарточкаТовара.Номенклатура);
					ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
					
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтборыОткрытьСклад(Команда)
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("РежимВыбора", Истина);
	ПараметрыОткрытияФормы.Вставить("МножественныйВыбор", Ложь);
	ПараметрыОткрытияФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыОткрытияФормы.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
		
	ОткрытьФорму(
		"Справочник.Склады.Форма.ФормаВыбора",
		ПараметрыОткрытияФормы,
		ЭтаФорма,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыОткрытьПомещение(Команда)
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("РежимВыбора", Истина);
	ПараметрыОткрытияФормы.Вставить("МножественныйВыбор", Ложь);
	ПараметрыОткрытияФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	
	Отбор = Новый Структура();
	Отбор.Вставить("Владелец", Склад);
	
	ПараметрыОткрытияФормы.Вставить("Отбор", Отбор);
	
	ОткрытьФорму(
		"Справочник.СкладскиеПомещения.Форма.ФормаВыбора",
		ПараметрыОткрытияФормы,
		ЭтаФорма,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ОтборыОчиститьСклад(Команда)
	
	Склад       = Неопределено;
	Помещение   = Неопределено;
	ЗонаПриемки = Неопределено;
	
	СформироватьПредставлениеОтбораСклад();
	СформироватьПредставлениеОтбораПомещение();
	ОбновитьДанныеФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыОчиститьПомещение(Команда)

	Помещение   = Неопределено;
	ЗонаПриемки = Неопределено;
	СформироватьПредставлениеОтбораПомещение();
	ОбновитьДанныеФормы(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЭтоВыборТоваров Тогда
		Элемент.ТекущиеДанные.ТоварВыбран = НЕ Элемент.ТекущиеДанные.ТоварВыбран;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура",   Элемент.ТекущиеДанные.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", Элемент.ТекущиеДанные.Характеристика);
		СтруктураПоиска.Вставить("Серия",          Элемент.ТекущиеДанные.Серия);
		СтруктураПоиска.Вставить("Упаковка",       Элемент.ТекущиеДанные.Упаковка);
		
		РезультатПоиска = КорзинаТоваров.НайтиСтроки(СтруктураПоиска);
		
		Если РезультатПоиска.Количество() > 0 Тогда 
			Возврат;
		Иначе
			НоваяСтрока = КорзинаТоваров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент.ТекущиеДанные);
			УстановитьУсловноеОформление();
		КонецЕсли;
		
		ИзменитьИмяКомандыРазместить();
		
		Возврат;
	КонецЕсли;
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Номенклатура", Элемент.ТекущиеДанные.Номенклатура);
	ПараметрыФормы.Вставить("Характеристика", Элемент.ТекущиеДанные.Характеристика);
	ПараметрыФормы.Вставить("Серия", Элемент.ТекущиеДанные.Серия);
	ПараметрыФормы.Вставить("Назначение", Элемент.ТекущиеДанные.Назначение);
	ПараметрыФормы.Вставить("Упаковка", Элемент.ТекущиеДанные.Упаковка);
	ПараметрыФормы.Вставить("Количество", Элемент.ТекущиеДанные.КоличествоУпаковок);
	ПараметрыФормы.Вставить("Режим", "Просмотр");
	ПараметрыФормы.Вставить("НомерСтроки", Товары.Индекс(Элементы.Товары.ТекущиеДанные));
	ПараметрыФормы.Вставить("Склад", Склад);
	ПараметрыФормы.Вставить("Помещение", Помещение);
	ПараметрыФормы.Вставить("ПоказыватьФотоТоваров", ПоказыватьФотоТоваров);

	ОткрытьФорму(
	"Обработка.МобильноеРабочееМестоКладовщика.Форма.КарточкаТовара",ПараметрыФормы,
	ЭтаФорма,,,,,
	РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаКлиенте
Процедура Сканировать(Команда)
	
	Если Не ЗначениеЗаполнено(Склад) Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст =  НСтр("ru = 'Укажите склад в отборе'");
		СообщениеПользователю.Сообщить(); 
		Возврат;
	КонецЕсли;
		
	СтандартнаяОбработка = Ложь;
	
	Описание = Новый ОписаниеОповещения("РезультатСканирования", ЭтаФорма);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипПоиска", "ПоискНоменклатуры");
	ПараметрыФормы.Вставить("Склад", Склад);
	ПараметрыФормы.Вставить("Помещение", Помещение);
	ПараметрыФормы.Вставить("ДокументСсылка", Ссылка);
	
	ОткрытьФорму(
	"Обработка.МобильноеРабочееМестоКладовщика.Форма.СканированиеШтрихкода",ПараметрыФормы,
	ЭтаФорма,,,,Описание,
	РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатСканирования(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Описание = Новый ОписаниеОповещения("ОбновитьФорму", ЭтаФорма);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Номенклатура", Результат.Номенклатура);
	ПараметрыФормы.Вставить("Характеристика", Результат.Характеристика);
	Если Результат.Свойство("Серия") Тогда
		ПараметрыФормы.Вставить("Серия", Результат.Серия);
	Иначе
		ПараметрыФормы.Вставить("Серия", ПустаяСерия);
	КонецЕсли;
	ПараметрыФормы.Вставить("Упаковка", Результат.Упаковка);
	Если Результат.Свойство("Количество") Тогда
		ПараметрыФормы.Вставить("Количество", Результат.Количество);
	Иначе
		ПараметрыФормы.Вставить("Количество", 1);
	КонецЕсли;
	ПараметрыФормы.Вставить("Режим", "Приемка");
	ПараметрыФормы.Вставить("НомерСтроки", 0);
	ПараметрыФормы.Вставить("Склад", Склад);
	ПараметрыФормы.Вставить("Помещение", Помещение);
	ПараметрыФормы.Вставить("ПоказыватьФотоТоваров", ПоказыватьФотоТоваров);
	
	ОткрытьФорму(
	"Обработка.МобильноеРабочееМестоКладовщика.Форма.КарточкаТовара",ПараметрыФормы,
	ЭтаФорма,,,,Описание,
	РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаТоваровВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Описание = Новый ОписаниеОповещения("ОбновитьФорму", ЭтаФорма);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Номенклатура", Элемент.ТекущиеДанные.Номенклатура);
	ПараметрыФормы.Вставить("Характеристика", Элемент.ТекущиеДанные.Характеристика);
	ПараметрыФормы.Вставить("Серия", Элемент.ТекущиеДанные.Серия);
	ПараметрыФормы.Вставить("Упаковка", Элемент.ТекущиеДанные.Упаковка);
	ПараметрыФормы.Вставить("Количество", Элемент.ТекущиеДанные.КоличествоУпаковок);
	ПараметрыФормы.Вставить("Режим", "ПодборВКорзину");
	ПараметрыФормы.Вставить("НомерСтроки", КорзинаТоваров.Индекс(Элементы.КорзинаТоваров.ТекущиеДанные));
	ПараметрыФормы.Вставить("Склад", Склад);
	ПараметрыФормы.Вставить("Помещение", Помещение);
	ПараметрыФормы.Вставить("ПоказыватьФотоТоваров", ПоказыватьФотоТоваров);
	
	ОткрытьФорму(
	"Обработка.МобильноеРабочееМестоКладовщика.Форма.КарточкаТовара",ПараметрыФормы,
	ЭтаФорма,,,,Описание,
	РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаКлиенте
Процедура Разместить(Команда)
	
	ОчиститьСообщения();
	
	Если КорзинаТоваров.Количество() = 0 и Товары.Количество() = 0 Тогда
		Сообщение = НСтр("ru = 'Нет товаров для размещения'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(Сообщение);
		Возврат;
	КонецЕсли;
	
	Если КорзинаТоваров.Количество() > 0 Или Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы["СтраницаУсловияРазмещения"] Тогда
		
		ОшибкаПроверки = Ложь;
		
		СоздатьРазмещениеНаСервере(ОшибкаПроверки);
		
		Если ОшибкаПроверки Тогда
			Возврат;
		КонецЕсли;

		Описание = Новый ОписаниеОповещения("ОбновитьФорму", ЭтаФорма);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ссылка", Ссылка);
		ПараметрыФормы.Вставить("ПоказыватьФотоТоваров", ПоказыватьФотоТоваров);
		
		ОткрытьФорму(
		"Обработка.МобильноеРабочееМестоКладовщика.Форма.РазмещениеПоЯчейкам",ПараметрыФормы,
		ЭтаФорма,,,,Описание,
		РежимОткрытияОкнаФормы.Независимый);
	Иначе
		ОграничиватьПоВесу                      = Ложь;
		ОграничиватьПоОбъему                    = Ложь;
		Элементы.ВыборТоваров.Видимость         = Ложь;
		Элементы.Сканировать.Видимость          = Ложь;
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы["СтраницаУсловияРазмещения"];
		Элементы.Разместить.Заголовок = НСтр("ru = 'Разместить'");
		Элементы.ГруппаОсновнаяОтборы.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОграничениеПоВесуПриИзменении(Элемент)
	
	Если ОграничениеПоВесу <> 0 Тогда
		ОграничиватьПоВесу = Истина;
	Иначе
		ОграничиватьПоВесу = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОграничениеПоОбъемуПриИзменении(Элемент)
	
	Если ОграничениеПоОбъему <> 0 Тогда
		ОграничиватьПоОбъему = Истина;
	Иначе
		ОграничиватьПоОбъему = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	ОбновитьДанныеФормы();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	Если КорзинаТоваров.Количество() > 0 Тогда
		Элементы.ЗаголовокКорзина.Видимость = Истина;
	Иначе
		Элементы.ЗаголовокКорзина.Видимость = Ложь;
	КонецЕсли;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Товары.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.ОшибкаВУпаковке");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ПолеСОшибкойФон);
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Товары.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.ОшибкаВНоменклатуре");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ПолеСОшибкойФон);
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Товары.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.ОшибкаВОбластиХранения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ПолеСОшибкойФон);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеФормы()
	
	ЗаполнитьСписокТовары();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФорму(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		ИзменитьИмяКомандыРазместить();
		Возврат;
	КонецЕсли;
	
	ОбновитьФормуНаСервере(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФормуНаСервере(Результат)
	
	Элементы.Разместить.Заголовок = НСтр("ru = 'Разместить все'");
	Элементы.ЗаголовокКорзина.Видимость = Ложь;
	
	Если Результат.Режим = "ПодборВКорзину" Тогда 
		
		Литерал = "НомерСтроки";
		НомерСтроки = Результат[Литерал];
		
		КоэффициентУпаковки = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(Результат.Упаковка, Результат.Номенклатура);
		
		КорзинаТоваров[НомерСтроки].Упаковка = Результат.Упаковка;
		КорзинаТоваров[НомерСтроки].КоличествоУпаковок = Результат.КоличествоУпаковок;
	
	ИначеЕсли Результат.Режим = "Приемка" Тогда
		
		СтруктураТовара = Новый Структура;
		СтруктураТовара.Вставить("Номенклатура", "");
		СтруктураТовара.Вставить("Характеристика", "");
		СтруктураТовара.Вставить("Упаковка", "");
		СтруктураТовара.Вставить("Серия", "");
		СтруктураТовара.Вставить("Назначение", "");
		
		ЗаполнитьЗначенияСвойств(СтруктураТовара, Результат);
	
		РезультатПоискаВКорзине = КорзинаТоваров.НайтиСтроки(СтруктураТовара);
		
		Если РезультатПоискаВКорзине.Количество() > 0 Тогда 
			РезультатПоискаВКорзине[0].КоличествоУпаковок = РезультатПоискаВКорзине[0].КоличествоУпаковок + Результат.КоличествоУпаковок;
		Иначе
			НоваяСтрока = КорзинаТоваров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Результат);
			УстановитьУсловноеОформление();
		КонецЕсли;
		
	Иначе
		
		ОбновитьДанныеФормы();
		СформироватьПредставлениеОтбораСклад();
		СформироватьПредставлениеОтбораПомещение(); 
		
	КонецЕсли;
	
	ИзменитьИмяКомандыРазместить();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокТовары()
	
	Товары.Очистить();
	КорзинаТоваров.Очистить();
	
	Если НЕ ЗначениеЗаполнено(ЗонаПриемки) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Обработки.МобильноеРабочееМестоКладовщика.ТоварыКРазмещениюПоЯчейкам();
	
	Запрос.УстановитьПараметр("ЗонаПриемки", ЗонаПриемки);
	ТоварыКПриемке = Запрос.Выполнить().Выгрузить();
	
	Товары.Загрузить(ТоварыКПриемке);
	ИзменитьИмяКомандыРазместить();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПредставлениеОтбораСклад()
	
	ПредставленияОтборов = "";
	Если ЗначениеЗаполнено(Склад) Тогда
		ПредставленияОтборов = Склад;
		Элементы.КомандаОтборыОткрыть.ЦветТекста = WebЦвета.Черный;
		Элементы.КомандаОтборыОчистить.Видимость = Истина;
		Элементы.РамкаОтборыОткрыть.Картинка = БиблиотекаКартинок.РамкаМенюЧерная;
	Иначе
		ПредставленияОтборов = НСтр("ru = 'Склад'");
		Элементы.КомандаОтборыОткрыть.ЦветТекста = WebЦвета.ТемноСерый;
		Элементы.КомандаОтборыОчистить.Видимость = Ложь;
		Элементы.РамкаОтборыОткрыть.Картинка = БиблиотекаКартинок.РамкаМенюСерая;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "ЭтоГруппа") = Истина Тогда
		ИспользоватьСкладскиеПомещения = Ложь;
	Иначе
		ИспользоватьСкладскиеПомещения = Склад["ИспользоватьСкладскиеПомещения"];
	КонецЕсли;
	Элементы.ГруппаКомандаОтборыОткрыть2.Видимость    = ИспользоватьСкладскиеПомещения;
	Элементы.КомандаОтборыОчиститьПомещение.Видимость = ИспользоватьСкладскиеПомещения;
	
	Элементы.КомандаОтборыОткрыть.Заголовок = ПредставленияОтборов;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПредставлениеОтбораПомещение()
	
	ПредставленияОтборов = "";
	Если ЗначениеЗаполнено(Помещение) Тогда
		ПредставленияОтборов = Помещение;
		Элементы.КомандаОтборыОткрытьПомещение.ЦветТекста = WebЦвета.Черный;
		Элементы.КомандаОтборыОчиститьПомещение.Видимость = Истина;
		Элементы.РамкаОтборыОткрыть2.Картинка = БиблиотекаКартинок.РамкаМенюЧерная;
	Иначе
		ПредставленияОтборов = НСтр("ru = 'Помещение'");
		Элементы.КомандаОтборыОткрытьПомещение.ЦветТекста = WebЦвета.ТемноСерый;
		Элементы.КомандаОтборыОчиститьПомещение.Видимость = Ложь;
		Элементы.РамкаОтборыОткрыть2.Картинка = БиблиотекаКартинок.РамкаМенюСерая;
	КонецЕсли;
	
	Элементы.КомандаОтборыОткрытьПомещение.Заголовок = ПредставленияОтборов;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатПоискаЯчейки(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Описание = Новый ОписаниеОповещения("ОбновитьФорму", ЭтаФорма);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ячейка", Результат);
	ПараметрыФормы.Вставить("ТипБлокировки", Неопределено);
	
	ОткрытьФорму(
	"Обработка.МобильноеРабочееМестоКладовщика.Форма.БлокировкаЯчейки",ПараметрыФормы,
	ЭтаФорма,,,,Описание,
	РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ЗаполнитьЗонуПриемкиПоУмолчанию(Склад, Помещение)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СкладскиеЯчейки.Ссылка КАК ЗонаПриемки
		|ИЗ
		|	Справочник.СкладскиеЯчейки КАК СкладскиеЯчейки
		|ГДЕ
		|	СкладскиеЯчейки.Владелец = &Склад
		|	И СкладскиеЯчейки.Помещение = &Помещение
		|	И СкладскиеЯчейки.ТипСкладскойЯчейки = &ТипСкладскойЯчейкиПриемка";
	
	Запрос.УстановитьПараметр("Помещение", Помещение);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ТипСкладскойЯчейкиПриемка", Перечисления.ТипыСкладскихЯчеек.Приемка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Справочники.СкладскиеЯчейки.ПустаяСсылка();
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.ЗонаПриемки;
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Процедура ЗонаПриемкиПриИзменении(Элемент)
	ОбновитьДанныеФормы();
КонецПроцедуры

&НаКлиенте
Процедура ВыборТоваров(Команда)
	
	ЭтоВыборТоваров = НЕ ЭтоВыборТоваров;
	
	Если ЭтоВыборТоваров Тогда
		Элементы.ВыборТоваров.ЦветФона = WebЦвета.СветлоЗолотистый;
	Иначе
		Для Каждого Строка Из Товары Цикл
			Строка.ТоварВыбран = Ложь;
		КонецЦикла;
		
		Элементы.ВыборТоваров.ЦветФона = WebЦвета.Белый;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьРазмещениеНаСервере(ОшибкаПроверки)
	
	Ссылка = Неопределено;
	ПоВсейНоменклатуре = 0;
	
	Для Каждого Строка Из КорзинаТоваров Цикл
		ПоВсейНоменклатуре = ПоВсейНоменклатуре + 1;
	КонецЦикла;
	
	КвалификаторыЧисла = Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный);
	ОписаниеЧисла = Новый ОписаниеТипов("Число", КвалификаторыЧисла);
	
	ТаблицаВыделеннойНоменклатуры = Новый ТаблицаЗначений;
	ТаблицаВыделеннойНоменклатуры.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаВыделеннойНоменклатуры.Колонки.Добавить("Характеристика",Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаВыделеннойНоменклатуры.Колонки.Добавить("Назначение",Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	ТаблицаВыделеннойНоменклатуры.Колонки.Добавить("Серия",Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаВыделеннойНоменклатуры.Колонки.Добавить("Упаковка",Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ТаблицаВыделеннойНоменклатуры.Колонки.Добавить("КоличествоУпаковок", ОписаниеЧисла);
	
	Если ПоВсейНоменклатуре <> 0 Тогда
		Для Каждого Строка Из КорзинаТоваров Цикл
			НоваяСтрока = ТаблицаВыделеннойНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Упаковка, "ТипИзмеряемойВеличины") <> Перечисления.ТипыИзмеряемыхВеличин.Упаковка Тогда
				НоваяСтрока.Упаковка = Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Менеджер = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Менеджер;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Назначение КАК Назначение,
	|	Таблица.Серия КАК Серия,
	|	Таблица.Упаковка КАК Упаковка
	|ПОМЕСТИТЬ ТаблицаНоменклатурыДляЗапроса
	|ИЗ
	|	&ТаблицаВыделеннойНоменклатуры КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыВЯчейкахОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыВЯчейкахОстатки.Характеристика КАК Характеристика,
	|	ТоварыВЯчейкахОстатки.Назначение КАК Назначение,
	|	ТоварыВЯчейкахОстатки.Серия,
	|	ТоварыВЯчейкахОстатки.Упаковка КАК Упаковка,
	|	ВЫБОР
	|		КОГДА ТоварыВЯчейкахОстатки.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук)
	|			ТОГДА ВЫРАЗИТЬ(ТоварыВЯчейкахОстатки.ВНаличииОстаток - ТоварыВЯчейкахОстатки.КОтборуОстаток - 0.5 КАК ЧИСЛО(15, 0))
	|		ИНАЧЕ ТоварыВЯчейкахОстатки.ВНаличииОстаток - ТоварыВЯчейкахОстатки.КОтборуОстаток
	|	КОНЕЦ КАК КоличествоУпаковок
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	РегистрНакопления.ТоварыВЯчейках.Остатки(
	|			,
	|			(&ПоВсейНоменклатуре
	|				ИЛИ (Номенклатура, Характеристика, Серия, Назначение, Упаковка) В
	|					(ВЫБРАТЬ
	|						Таблица.Номенклатура КАК Номенклатура,
	|						Таблица.Характеристика КАК Характеристика,
	|						Таблица.Серия КАК Серия,
	|				        Таблица.Назначение КАК Назначение,
	|				        Таблица.Упаковка КАК Упаковка
	|					ИЗ
	|						ТаблицаНоменклатурыДляЗапроса КАК Таблица))
	|				И Ячейка = &ЗоныПриемки) КАК ТоварыВЯчейкахОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетСерий
	|		ПО ТоварыВЯчейкахОстатки.Номенклатура.ВидНоменклатуры = ПолитикиУчетСерий.Ссылка
	|			И (ПолитикиУчетСерий.Склад = &Склад)
	|ГДЕ
	|	ТоварыВЯчейкахОстатки.ВНаличииОстаток - ТоварыВЯчейкахОстатки.КОтборуОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаНоменклатурыДляЗапроса";

	Запрос.УстановитьПараметр("ЗоныПриемки", ЗонаПриемки);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ТаблицаВыделеннойНоменклатуры", ТаблицаВыделеннойНоменклатуры);
	Запрос.УстановитьПараметр("ПоВсейНоменклатуре", ПоВсейНоменклатуре = 0);
	
	Результаты = Запрос.ВыполнитьПакет(); 
	
	Выборка = Результаты[1].Выбрать();
	Выборка.Следующий();
	
	Если Выборка.Количество = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Задания на размещение не сформированы: все товары или уже размещены, или по ним уже есть задания на размещение.'");
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = ТекстСообщения;
		СообщениеПользователю.Сообщить();
		ОшибкаПроверки = Истина;
		Возврат;
	КонецЕсли;
	
	СтруктураВозврата = СкладыСервер.РазместитьТоварВЯчейках(Менеджер, Склад, Помещение, Справочники.РабочиеУчастки.ПустаяСсылка(), ЗонаПриемки, ОшибкаПроверки, Ложь);
	
	Если ОшибкаПроверки Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураВозврата.ТаблицаРезультатов.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru='Задания на размещение не сформированы: не удалось разместить номенклатуру согласно правилам размещения.'");
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = ТекстСообщения;
		СообщениеПользователю.Сообщить();
		ОшибкаПроверки = Истина;
		Возврат;
	КонецЕсли;
	
	ТаблицаРабочихУчастков = Новый ТаблицаЗначений;
	ТаблицаРабочихУчастков.Колонки.Добавить("РабочийУчасток", Новый ОписаниеТипов("СправочникСсылка.РабочиеУчастки"));
	НоваяСтрока = ТаблицаРабочихУчастков.Добавить();
	НоваяСтрока.РабочийУчасток = Справочники.РабочиеУчастки.ПустаяСсылка();
	
	НевозможныйНабор = 9999999999;
	
	Для Каждого СтрокаРабочийУчасток Из ТаблицаРабочихУчастков Цикл
		
		МаксимальныйОбъем = ?(ОграничиватьПоОбъему, ОграничениеПоОбъему, НевозможныйНабор);
		МаксимальныйВес = ?(ОграничиватьПоВесу, ОграничениеПоВесу, НевозможныйНабор);
		
		ТаблицаРезультата = СтруктураВозврата.ТаблицаРезультатов;
		
		// Разбиение по весу и объему. Соглашения:
		//	- в одну ячейку идет один человек (т.е. строка результата размещения не разбивается)
		//  - если вес (объем) одной строки больше, чем ограничения - создается отдельный документ,
		//		вес (объем) которого будет больше, чем максимальный
		//	- разбиение по весу (объему) не оптимально, т.к. более приоритетно сохранения порядка обхода
		//			(лучше пусть будет больше заданий, но каждое можно быстрее обойти).
		
		ОбъемДокумента    = 0;
		ВесДокумента	  = 0;
		ТекущийДокумент = НовоеЗаданиеНаРазмещение(СтрокаРабочийУчасток.РабочийУчасток);
		
		ТаблицаЗаполнения = ТаблицаРезультата.СкопироватьКолонки();
		
		КоличествоОбработано = 0;
		
		Для Каждого СтрТабл Из ТаблицаРезультата Цикл
			
			Если СтрТабл.ОбъемУпаковки*СтрТабл.КоличествоУпаковок > МаксимальныйОбъем
				Или СтрТабл.ВесУпаковки*СтрТабл.КоличествоУпаковок > МаксимальныйВес Тогда
				
				ДокументОбъект = НовоеЗаданиеНаРазмещение(СтрокаРабочийУчасток.РабочийУчасток);
				
				ТаблицаЗаполненияЛокальная = ТаблицаРезультата.СкопироватьКолонки();
				НоваяСтрока = ТаблицаЗаполненияЛокальная.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрТабл);
				
				СкладыСервер.ДополнитьМногооборотнойТаройТаблицуРазмещения(ТаблицаЗаполненияЛокальная);
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаЗаполненияЛокальная, ДокументОбъект.ТоварыРазмещение);
				
				ЗаписатьДокумент(ДокументОбъект,СтрТабл.ОбъемУпаковки,СтрТабл.ВесУпаковки);
				КоличествоОбработано = КоличествоОбработано + 1;
			Иначе
				
				Если (ОбъемДокумента + СтрТабл.ОбъемУпаковки*СтрТабл.КоличествоУпаковок) > МаксимальныйОбъем
					Или (ВесДокумента + СтрТабл.ВесУпаковки*СтрТабл.КоличествоУпаковок) > МаксимальныйВес Тогда
					
					СкладыСервер.ДополнитьМногооборотнойТаройТаблицуРазмещения(ТаблицаЗаполнения);
					ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаЗаполнения, ТекущийДокумент.ТоварыРазмещение);
					
					ЗаписатьДокумент(ТекущийДокумент,ОбъемДокумента,ВесДокумента);
					
					ОбъемДокумента    = 0;
					ВесДокумента	  = 0;
					ТекущийДокумент = НовоеЗаданиеНаРазмещение(СтрокаРабочийУчасток.РабочийУчасток);
					ТаблицаЗаполнения.Очистить();
					
				КонецЕсли;
				
				НоваяСтрока = ТаблицаЗаполнения.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрТабл);
				
				ОбъемДокумента    = ОбъемДокумента + СтрТабл.ОбъемУпаковки*СтрТабл.КоличествоУпаковок;
				ВесДокумента	  = ВесДокумента + СтрТабл.ВесУпаковки*СтрТабл.КоличествоУпаковок;
				КоличествоОбработано = КоличествоОбработано + 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТаблицаЗаполнения.Количество() > 0 Тогда
			
			СкладыСервер.ДополнитьМногооборотнойТаройТаблицуРазмещения(ТаблицаЗаполнения);
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаЗаполнения, ТекущийДокумент.ТоварыРазмещение);
			
			ЗаписатьДокумент(ТекущийДокумент,ОбъемДокумента,ВесДокумента);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Ссылка = ТекущийДокумент.Ссылка;
	
	ОбновитьДанныеФормы();
	
КонецПроцедуры

&НаСервере
Функция НовоеЗаданиеНаРазмещение(РабочийУчасток)
	
	ДокументОбъект = Документы.ОтборРазмещениеТоваров.СоздатьДокумент();
	ДокументОбъект.Дата 				= ТекущаяДатаСеанса();
	ДокументОбъект.Статус 				= Перечисления.СтатусыОтборовРазмещенийТоваров.Подготовлено;
	ДокументОбъект.ВидОперации 			= Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Размещение;
	ДокументОбъект.Склад 				= Склад;
	ДокументОбъект.Помещение 			= Помещение;
	ДокументОбъект.ЗонаПриемки		 	= ЗонаПриемки;
	ДокументОбъект.Ответственный 		= Пользователи.ТекущийПользователь();
	
	ДокументОбъект.РабочийУчасток 		= РабочийУчасток;
	
	ДокументОбъект.Исполнитель          = Исполнитель;
	
	Возврат ДокументОбъект;
	
КонецФункции 

&НаСервере
Процедура ЗаписатьДокумент(ДокументОбъект, Объем, Вес)
	Попытка
		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект, Документы.ОтборРазмещениеТоваров);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект,ПараметрыУказанияСерий.Размещение);
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
	Исключение
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = ИнформацияОбОшибке();
		СообщениеПользователю.Сообщить();
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПодборВКорзину(Команда)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура",   Элементы.КорзинаТоваров.ТекущиеДанные.Номенклатура);
	СтруктураПоиска.Вставить("Характеристика", Элементы.КорзинаТоваров.ТекущиеДанные.Характеристика);
	СтруктураПоиска.Вставить("Серия",          Элементы.КорзинаТоваров.ТекущиеДанные.Серия);
	СтруктураПоиска.Вставить("Упаковка",       Элементы.КорзинаТоваров.ТекущиеДанные.Упаковка);
	
	РезультатПоиска = КорзинаТоваров.НайтиСтроки(СтруктураПоиска);
	Для Каждого Строка Из РезультатПоиска Цикл
		
		Строка.ТоварВыбран = Ложь;
		
	КонецЦикла;
	
	ИндексСтроки = КорзинаТоваров.Индекс(Элементы.КорзинаТоваров.ТекущиеДанные);
	КорзинаТоваров.Удалить(ИндексСтроки);
	
	ИзменитьИмяКомандыРазместить();
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьИмяКомандыРазместить()
	
	КоличествоСтрокВКорзине = КорзинаТоваров.Количество();
	Если КоличествоСтрокВКорзине > 0 Тогда
		Элементы.Разместить.Заголовок = СтрШаблон(НСтр("ru = 'Разместить (%1)'"), КоличествоСтрокВКорзине);
	Иначе
		Элементы.Разместить.Заголовок = НСтр("ru = 'Разместить все'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиТоварСервер(Штрихкод)
	
	Возврат Обработки.МобильноеРабочееМестоКладовщика.НайтиТоварПоШК(Штрихкод);
	
КонецФункции

#КонецОбласти
