
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Исполнитель") Тогда
		Исполнитель = Параметры.Исполнитель;
	Иначе
		Исполнитель = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если Параметры.Свойство("СтруктураЗаполнения") Тогда
		
		СтруктураЗаполнения = Параметры.СтруктураЗаполнения;
		ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры.СтруктураЗаполнения);
		
		РаспоряжениеНаОтгрузку = СтруктураЗаполнения.РаспоряженияНаОтгрузку[0];
		СоздатьРасходныйОрдер(СтруктураЗаполнения);
		
	Иначе
		
		Ссылка = Параметры.Ссылка;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ПоказыватьФотоТоваров = Параметры.ПоказыватьФотоТоваров;
	
	ЗаполнитьФорму();
	
	СвойстваСклада = Обработки.МобильноеРабочееМестоКладовщика.СвойстваСклада(Склад);
	
	ИспользоватьАдресноеХранение            = СвойстваСклада.ИспользоватьАдресноеХранение;
	ИспользоватьСкладскиеПомещения          = СвойстваСклада.ИспользоватьСкладскиеПомещения;
	
	Если СвойстваСклада.ИспользоватьСкладскиеПомещения Тогда
		СтруктураПомещения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Помещение, "ИспользоватьАдресноеХранение");
		ИспользоватьАдресноеХранение = СтруктураПомещения.ИспользоватьАдресноеХранение;
	КонецЕсли;
	
	//++ Локализация
	
	ИспользоватьУчетМаркируемойПродукции = Константы.ВестиУчетМаркируемойПродукцииИСМП.Получить();
	ПроверкаИПодборПродукцииИСМППереопределяемый.ПриОпределенииОрганизации(Ссылка, Организация);
	
	ЕстьМаркируемаяПродукция = Ложь;
	ВидыПродукцииИСМП = МобильноеРабочееМестоКладовщикаЛокализация.ВидыПродукцииИСМП();
	ПроверкаИПодборПродукцииИСМППереопределяемый.ЕстьМаркируемаяПродукцияВКоллекции(ТоварыКОтгрузке, ВидыПродукцииИСМП, ЕстьМаркируемаяПродукция);
	Если НЕ ЕстьМаркируемаяПродукция Тогда
		ПроверкаИПодборПродукцииИСМППереопределяемый.ЕстьМаркируемаяПродукцияВКоллекции(ТоварыОтгружено, ВидыПродукцииИСМП, ЕстьМаркируемаяПродукция);
	КонецЕсли;
	Если НЕ ЕстьМаркируемаяПродукция Тогда
		ПроверкаИПодборПродукцииИСМППереопределяемый.ЕстьМаркируемаяПродукцияВКоллекции(ТоварыОтобрано, ВидыПродукцииИСМП, ЕстьМаркируемаяПродукция);
	КонецЕсли;
	
	//-- Локализация
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОформитьМеню("КОтгрузке")
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияУТКлиент.ЕстьНеобработанноеСобытие() Тогда
			
			// Преобразуем предварительно к ожидаемому формату
			Если Параметр[1] = Неопределено Тогда
				Штрихкод = Параметр[0];
			Иначе
				Штрихкод = Параметр[1][1];
			КонецЕсли;
			
			ПараметрыКарточкаТовара = НайтиТоварСервер(Штрихкод);
			
			Если НЕ ЗначениеЗаполнено(ПараметрыКарточкаТовара.Номенклатура) Тогда
				
				ТекстОшибки = СтрШаблон(НСтр("ru='Не найдена номенклатура со штрихкодом: %1'"), Штрихкод);
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
				
				Возврат;
			КонецЕсли;
			
			Описание = Новый ОписаниеОповещения("ОбновитьФорму", ЭтаФорма);
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Номенклатура", ПараметрыКарточкаТовара.Номенклатура);
			ПараметрыФормы.Вставить("Характеристика", ПараметрыКарточкаТовара.Характеристика);
			ПараметрыФормы.Вставить("Упаковка", ПараметрыКарточкаТовара.Упаковка);
			ПараметрыФормы.Вставить("Количество", ПараметрыКарточкаТовара.Количество);
			ПараметрыФормы.Вставить("Режим", "Отгрузка");
			ПараметрыФормы.Вставить("НомерСтроки", 0);
			ПараметрыФормы.Вставить("Склад", Склад);
			ПараметрыФормы.Вставить("Помещение", Помещение);
			ПараметрыФормы.Вставить("ЭтоСканирование", Истина);
			ПараметрыФормы.Вставить("ПоказыватьФотоТоваров", ПоказыватьФотоТоваров);
		
			ОткрытьФорму(
			"Обработка.МобильноеРабочееМестоКладовщика.Форма.КарточкаТовара",ПараметрыФормы,
			ЭтаФорма,,,,Описание,
			РежимОткрытияОкнаФормы.Независимый);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПерейтиВРазделКОтгрузке(Команда)
	ОформитьМеню("КОтгрузке");
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВРазделОтгружено(Команда)
	ОформитьМеню("Отгружено");
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВРазделОтобрано(Команда)
	ОформитьМеню("Отобрано");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Описание = Новый ОписаниеОповещения("ОбновитьФорму", ЭтаФорма);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Номенклатура",   Элемент.ТекущиеДанные.Номенклатура);
	ПараметрыФормы.Вставить("Характеристика", Элемент.ТекущиеДанные.Характеристика);
	ПараметрыФормы.Вставить("Серия",          Элемент.ТекущиеДанные.Серия);
	ПараметрыФормы.Вставить("Назначение",     Элемент.ТекущиеДанные.Назначение);
	ПараметрыФормы.Вставить("Упаковка",       Элемент.ТекущиеДанные.Упаковка);
	ПараметрыФормы.Вставить("Количество",     Элемент.ТекущиеДанные.КоличествоУпаковок);
	ПараметрыФормы.Вставить("НомерСтроки",    Элемент.ТекущаяСтрока);
	ПараметрыФормы.Вставить("Склад",          Склад);
	ПараметрыФормы.Вставить("Помещение",      Помещение);
	
	Если ИспользоватьАдресноеХранение Тогда
		ПараметрыФормы.Вставить("Режим", "Просмотр");
	Иначе
		ПараметрыФормы.Вставить("Режим", "Отгрузка");
	КонецЕсли;
	ПараметрыФормы.Вставить("ПоказыватьФотоТоваров", ПоказыватьФотоТоваров);
	
	ОткрытьФорму(
	"Обработка.МобильноеРабочееМестоКладовщика.Форма.КарточкаТовара",ПараметрыФормы,
	ЭтаФорма,,,,Описание,
	РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОтобраноВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Описание = Новый ОписаниеОповещения("ЗавершитьПереносИзОтобраноВОтгружено", ЭтаФорма);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Номенклатура", Элемент.ТекущиеДанные.Номенклатура);
	ПараметрыФормы.Вставить("Характеристика", Элемент.ТекущиеДанные.Характеристика);
	ПараметрыФормы.Вставить("Серия", Элемент.ТекущиеДанные.Серия);
	ПараметрыФормы.Вставить("Упаковка", Элемент.ТекущиеДанные.Упаковка);
	ПараметрыФормы.Вставить("Количество", Элемент.ТекущиеДанные.КоличествоУпаковок);
	ПараметрыФормы.Вставить("Режим", "Отгрузка");
	ПараметрыФормы.Вставить("НомерСтроки", ТоварыОтобрано.Индекс(Элементы.ТоварыОтобрано.ТекущиеДанные));
	ПараметрыФормы.Вставить("Склад", Склад);
	ПараметрыФормы.Вставить("Помещение", Помещение);
	ПараметрыФормы.Вставить("ПоказыватьФотоТоваров", ПоказыватьФотоТоваров);
	
	ОткрытьФорму(
	"Обработка.МобильноеРабочееМестоКладовщика.Форма.КарточкаТовара",ПараметрыФормы,
	ЭтаФорма,,,,Описание,
	РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОтгруженоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Описание = Новый ОписаниеОповещения("ОбновитьФорму", ЭтаФорма);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Номенклатура", Элемент.ТекущиеДанные.Номенклатура);
	ПараметрыФормы.Вставить("Характеристика", Элемент.ТекущиеДанные.Характеристика);
	ПараметрыФормы.Вставить("Серия", Элемент.ТекущиеДанные.Серия);
	ПараметрыФормы.Вставить("Упаковка", Элемент.ТекущиеДанные.Упаковка);
	ПараметрыФормы.Вставить("Количество", Элемент.ТекущиеДанные.КоличествоУпаковок);
	ПараметрыФормы.Вставить("Режим", "РедактированиеОтгрузка");
	ПараметрыФормы.Вставить("НомерСтроки", ТоварыОтгружено.Индекс(Элементы.ТоварыОтгружено.ТекущиеДанные));
	ПараметрыФормы.Вставить("Склад", Склад);
	ПараметрыФормы.Вставить("Помещение", Помещение);
	ПараметрыФормы.Вставить("Назначение", Элемент.ТекущиеДанные.Назначение);
	ПараметрыФормы.Вставить("ПоказыватьФотоТоваров", ПоказыватьФотоТоваров);
	
	ОткрытьФорму(
	"Обработка.МобильноеРабочееМестоКладовщика.Форма.КарточкаТовара",ПараметрыФормы,
	ЭтаФорма,,,,Описание,
	РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОтгрузку(Команда)
	
	ИндексСтроки = ТоварыОтгружено.Индекс(Элементы.ТоварыОтгружено.ТекущиеДанные);
	
	Если ИндексСтроки < 0 Тогда
		Возврат;
	КонецЕсли;
	
	КоэффициентУпаковки = ПолучитьКоэффициентУпаковкиСервер(ТоварыОтгружено[ИндексСтроки].Номенклатура, ТоварыОтгружено[ИндексСтроки].Упаковка);
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура", ТоварыОтгружено[ИндексСтроки].Номенклатура);
	СтруктураПоиска.Вставить("Характеристика", ТоварыОтгружено[ИндексСтроки].Характеристика);
	СтруктураПоиска.Вставить("Серия", ТоварыОтгружено[ИндексСтроки].Серия);
	СтруктураПоиска.Вставить("Упаковка", ТоварыОтгружено[ИндексСтроки].Упаковка);
	СтруктураПоиска.Вставить("Назначение", ТоварыОтгружено[ИндексСтроки].Назначение);
	
	РезультатПоиска = ТоварыКОтгрузке.НайтиСтроки(СтруктураПоиска);
	Если РезультатПоиска.Количество() > 0 Тогда
		РезультатПоиска[0].КоличествоУпаковок = РезультатПоиска[0].КоличествоУпаковок + ТоварыОтгружено[ИндексСтроки].КоличествоУпаковок;
		РезультатПоиска[0].Количество = РезультатПоиска[0].КоличествоУпаковок * КоэффициентУпаковки;
	Иначе
		НоваяСтрока = ТоварыКОтгрузке.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТоварыОтгружено[ИндексСтроки]);
		НоваяСтрока.Количество = НоваяСтрока.КоличествоУпаковок * КоэффициентУпаковки;
	КонецЕсли;
	
	ТоварыОтгружено.Удалить(ИндексСтроки);
	СформироватьЗаголовкиКомандМеню();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьОтгрузку(Команда)
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить("Завершить", НСтр("ru = 'Завершить'"));
	СписокЗначений.Добавить("Продолжить", НСтр("ru = 'Продолжить'"));
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, НСтр("ru = 'Завершить отгрузку?'"), СписокЗначений, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ПомещениеПриИзменении(Элемент)
	ЗаполнитьЗонуПриемки();
КонецПроцедуры

&НаКлиенте
Процедура ОтгрузитьПоОтобраннымТоварам(Команда)
	ОтгрузитьПоОтобраннымТоварамНаСервере();
	ОформитьМеню("Отгружено");
КонецПроцедуры

&НаКлиенте
Процедура Сканировать(Команда)
	
	СтандартнаяОбработка = Ложь;
	
	Описание = Новый ОписаниеОповещения("РезультатСканирования", ЭтаФорма);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипПоиска",         "ПоискНоменклатуры");
	ПараметрыФормы.Вставить("Склад",             Склад);
	ПараметрыФормы.Вставить("Помещение",         Помещение);
	ПараметрыФормы.Вставить("ДокументСсылка",    Ссылка);
	ПараметрыФормы.Вставить("ШтрихкодыУпаковок", ШтрихкодыУпаковок);
	ПараметрыФормы.Вставить("Организация",       Организация);
	
	ОткрытьФорму(
	"Обработка.МобильноеРабочееМестоКладовщика.Форма.СканированиеШтрихкода",ПараметрыФормы,
	ЭтаФорма,,,,Описание,
	РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобратьТовары(Команда)
	
	ОтборСсылка = СоздатьОтборНаСервере();
	
	Если НЕ ЗначениеЗаполнено(ОтборСсылка) Тогда
		
		ТекстОшибки = НСтр("ru = 'Не удалось сформировать задания на отбор товаров согласно правилам отбора.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ссылка", ОтборСсылка);
	ПараметрыФормы.Вставить("Исполнитель", Исполнитель);
	ПараметрыФормы.Вставить("ПоказыватьФотоТоваров", ПоказыватьФотоТоваров);
	
	Описание = Новый ОписаниеОповещения("ЗаполнитьФорму", ЭтаФорма);
	
	ОткрытьФорму(
	"Обработка.МобильноеРабочееМестоКладовщика.Форма.Отбор",ПараметрыФормы,
	ЭтаФорма,,,,Описание,
	РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОтбору(Команда)
	
	ЗаполнитьОтгружено();
	СформироватьЗаголовкиКомандМеню();
	
КонецПроцедуры

&НаКлиенте
Процедура КодыМаркировки(Команда)
	
	Описание = Новый ОписаниеОповещения("ИзменитьШтрихкодыУпаковок", ЭтаФорма);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ШтрихкодыУпаковок", ШтрихкодыУпаковок);
	
	ОткрытьФорму(
	"Обработка.МобильноеРабочееМестоКладовщика.Форма.СписокКодовМаркировки",ПараметрыФормы,
	ЭтаФорма,,,,Описание,
	РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция СоздатьОтборНаСервере()
	
	ОтборОбъект = Документы.ОтборРазмещениеТоваров.СоздатьДокумент();
	ОтборОбъект.Заполнить(Ссылка);
	ОтборОбъект.Дата = ТекущаяДатаСеанса();
	ОтборОбъект.Исполнитель = Исполнитель;
	
	Сч = 0;
	Пока Сч < ОтборОбъект.ТоварыОтбор.Количество() Цикл
		
		Если НЕ ЗначениеЗаполнено(ОтборОбъект.ТоварыОтбор[Сч].Ячейка) Тогда
			ОтборОбъект.ТоварыОтбор.Удалить(ОтборОбъект.ТоварыОтбор[Сч]);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОтборОбъект.ТоварыОтбор.Количество() > 0 Тогда
		Попытка
			ОтборОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Возврат ОтборОбъект.Ссылка;
		Исключение
			Возврат Документы.ОтборРазмещениеТоваров.ПустаяСсылка();
		КонецПопытки;
	Иначе
		Возврат Документы.ОтборРазмещениеТоваров.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура РезультатСканирования(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Описание = Новый ОписаниеОповещения("ОбновитьФорму", ЭтаФорма);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Номенклатура", Результат.Номенклатура);
	ПараметрыФормы.Вставить("Характеристика", Результат.Характеристика);
	Если Результат.Свойство("Серия") Тогда
		ПараметрыФормы.Вставить("Серия", Результат.Серия);
	Иначе
		ПараметрыФормы.Вставить("Серия", ПустаяСерия);
	КонецЕсли;
	ПараметрыФормы.Вставить("Упаковка", Результат.Упаковка);
	Если Результат.Свойство("Количество") Тогда
		ПараметрыФормы.Вставить("Количество", Результат.Количество);
	Иначе
		ПараметрыФормы.Вставить("Количество", 1);
	КонецЕсли;
	ПараметрыФормы.Вставить("Режим", "Отгрузка");
	ПараметрыФормы.Вставить("НомерСтроки", 0);
	ПараметрыФормы.Вставить("Склад", Склад);
	ПараметрыФормы.Вставить("Помещение", Помещение);
	Если Результат.Свойство("ШтрихкодУпаковки") Тогда
		ПараметрыФормы.Вставить("ШтрихкодУпаковки", Результат.ШтрихкодУпаковки);
	Иначе
		ПараметрыФормы.Вставить("ШтрихкодУпаковки", Неопределено);
	КонецЕсли;
	ПараметрыФормы.Вставить("ПоказыватьФотоТоваров", ПоказыватьФотоТоваров);
	
	ОткрытьФорму(
	"Обработка.МобильноеРабочееМестоКладовщика.Форма.КарточкаТовара",ПараметрыФормы,
	ЭтаФорма,,,,Описание,
	РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьРасходныйОрдер(СтруктураЗаполнения)
	
	Получатели = Новый Соответствие;
	ЗаданияНаПеревозку = Новый Массив;
	
	СтруктураПараметровСозданияРасходныхОрдеров = СкладыСервер.ПараметрыПереоформленияРасходныхОрдеров();
	СтруктураПараметровСозданияРасходныхОрдеров.Склад = Склад;
	СтруктураПараметровСозданияРасходныхОрдеров.Помещение = Помещение;
	
	СтруктураПараметровСозданияРасходныхОрдеров.ЗонаОтгрузки = Справочники.СкладскиеЯчейки.ЗонаОтгрузкиПоУмолчанию(Склад, Помещение);
	
	МассивРаспоряжений = Новый Массив;
	Получатели.Вставить(СтруктураЗаполнения.Получатель, МассивРаспоряжений);
	МассивРаспоряжений.Добавить(РаспоряжениеНаОтгрузку);
	
	Если Получатели.Количество() > 0 Тогда
		
		СтруктураПараметровСозданияРасходныхОрдеров.ЗаданиеНаПеревозку = Неопределено;
		
		Для Каждого Получатель Из Получатели Цикл
			СтруктураПараметровСозданияРасходныхОрдеров.Получатель = Получатель.Ключ;
			СтруктураПараметровСозданияРасходныхОрдеров.РаспоряженияНаОтгрузку = Получатель.Значение;
			СкладыСервер.ПереоформитьРасходныеОрдера(СтруктураПараметровСозданияРасходныхОрдеров);
		КонецЦикла;
	КонецЕсли;
	
	Ссылка = ПолучитьСсылкуНаОрдер(РаспоряжениеНаОтгрузку);
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат;
	КонецЕсли;

	ДокументОбъект = Ссылка.ПолучитьОбъект();
	ДокументОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтбору;
	ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	Если ИспользоватьАдресноеХранение Тогда
		Элементы.ГруппаМеню2.Видимость = Истина;
	Иначе
		Элементы.ЗонаОтгрузки.Видимость      = Ложь;
		Элементы.ГруппаМеню2.Видимость       = Ложь;
	КонецЕсли;
	
	Элементы.Помещение.Видимость = ИспользоватьСкладскиеПомещения;
	Элементы.КодыМаркировки.Видимость = ИспользоватьУчетМаркируемойПродукции И ЕстьМаркируемаяПродукция;
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьМеню(ИмяВкладки)
	
	ПоказатьМеню();
	
	Элементы.РамкаКОтгрузке.Картинка = БиблиотекаКартинок.РамкаМенюБелая;
	Элементы.КомандаКОтгрузке.ЦветТекста = WebЦвета.ТемноСерый;
	
	Элементы.РамкаОтгружено.Картинка = БиблиотекаКартинок.РамкаМенюБелая;
	Элементы.КомандаОтгружено.ЦветТекста = WebЦвета.ТемноСерый;
	
	Элементы.РамкаОтобрано.Картинка = БиблиотекаКартинок.РамкаМенюБелая;
	Элементы.КомандаОтобрано.ЦветТекста = WebЦвета.ТемноСерый;
	
	Если ИмяВкладки = "КОтгрузке" Тогда 
		Элементы.КомандаКОтгрузке.ЦветТекста = WebЦвета.Черный;
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаКОтгрузке;
		Элементы.РамкаКОтгрузке.Картинка     = БиблиотекаКартинок.РамкаМенюЧерная;
		Элементы.ОтобратьТовары.Видимость    = ИспользоватьАдресноеХранение;
		Элементы.ЗаполнитьПоОтбору.Видимость = Ложь;
		Элементы.Контроль.Видимость = Ложь;
	ИначеЕсли ИмяВкладки = "Отобрано" Тогда  
		Элементы.КомандаОтобрано.ЦветТекста = WebЦвета.Черный;
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОтобрано;
		Элементы.РамкаОтобрано.Картинка     = БиблиотекаКартинок.РамкаМенюЧерная;
		Элементы.ОтобратьТовары.Видимость    = Ложь;
		Элементы.ЗаполнитьПоОтбору.Видимость = Ложь;
		Элементы.Контроль.Видимость = Ложь;
	ИначеЕсли ИмяВкладки = "Отгружено" Тогда     
		Элементы.КомандаОтгружено.ЦветТекста = WebЦвета.Черный;
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОтгружено;
		Элементы.РамкаОтгружено.Картинка     = БиблиотекаКартинок.РамкаМенюЧерная;
		Элементы.ОтобратьТовары.Видимость    = Ложь;
		Элементы.ЗаполнитьПоОтбору.Видимость = ИспользоватьАдресноеХранение;
		Элементы.Контроль.Видимость = Истина;
	КонецЕсли;
	
	СформироватьЗаголовкиКомандМеню();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЗаголовкиКомандМеню()
	
	Если ИспользоватьАдресноеХранение Тогда
		Элементы.КомандаКОтгрузке.Заголовок = СтрШаблон(НСтр("ru = 'Отобрать (%1)'"), ТоварыКОтгрузке.Количество()); 
	Иначе
		Элементы.КомандаКОтгрузке.Заголовок = СтрШаблон(НСтр("ru = 'К отгрузке (%1)'"), ТоварыКОтгрузке.Количество());
	КонецЕсли;

	Элементы.КомандаОтобрано.Заголовок = СтрШаблон(НСтр("ru = 'Отобрано (%1)'"), ТоварыОтобрано.Количество());
	Элементы.КомандаОтгружено.Заголовок = СтрШаблон(НСтр("ru = 'Отгружено (%1)'"), ТоварыОтгружено.Количество());
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФорму(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ТоварыКОтгрузке.Очистить();
	ТоварыОтобрано.Очистить();
	ТоварыОтгружено.Очистить();
	
	СтруктураОрдера = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Склад, Комментарий, Помещение, ЗонаОтгрузки, Статус");
	
	Склад        = СтруктураОрдера.Склад;
	Комментарий  = СтруктураОрдера.Комментарий;
	Помещение    = СтруктураОрдера.Помещение;
	ЗонаОтгрузки = СтруктураОрдера.ЗонаОтгрузки;
	
	// Заполнение товаров к отгрузке
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Номенклатура КАК Номенклатура,
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Характеристика КАК Характеристика,
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Назначение КАК Назначение,
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Серия КАК Серия,
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Количество КАК Количество,
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ВЫБОР
		|		КОГДА РасходныйОрдерНаТоварыОтгружаемыеТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА РасходныйОрдерНаТоварыОтгружаемыеТовары.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ РасходныйОрдерНаТоварыОтгружаемыеТовары.Упаковка
		|	КОНЕЦ КАК Упаковка
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары.ОтгружаемыеТовары КАК РасходныйОрдерНаТоварыОтгружаемыеТовары
		|ГДЕ
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтрокаКОтгрузке = ТоварыКОтгрузке.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаКОтгрузке, ВыборкаДетальныеЗаписи);
	КонецЦикла;
	
	// Заполнение товаров отгружено
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтборРазмещениеТоваровТоварыОтбор.Номенклатура КАК Номенклатура,
		|	ОтборРазмещениеТоваровТоварыОтбор.Характеристика КАК Характеристика,
		|	ОтборРазмещениеТоваровТоварыОтбор.Упаковка КАК Упаковка,
		|	ОтборРазмещениеТоваровТоварыОтбор.Серия КАК Серия,
		|	ОтборРазмещениеТоваровТоварыОтбор.Назначение КАК Назначение,
		|	ОтборРазмещениеТоваровТоварыОтбор.КоличествоОтобрано КАК КоличествоОтобрано,
		|	ОтборРазмещениеТоваровТоварыОтбор.КоличествоУпаковокОтобрано КАК КоличествоУпаковокОтобрано
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	Документ.ОтборРазмещениеТоваров.ТоварыОтбор КАК ОтборРазмещениеТоваровТоварыОтбор
		|ГДЕ
		|	ОтборРазмещениеТоваровТоварыОтбор.Ссылка.Распоряжение = &Ссылка
		|	И ОтборРазмещениеТоваровТоварыОтбор.Ссылка.Проведен
		|	И (ОтборРазмещениеТоваровТоварыОтбор.Ссылка.Статус = &СтатусВыполнено
		|			ИЛИ ОтборРазмещениеТоваровТоварыОтбор.Ссылка.Статус = &СтатусВыполненоСОшибками)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.Номенклатура КАК Номенклатура,
		|	ВТ.Характеристика КАК Характеристика,
		|	ВТ.Упаковка КАК Упаковка,
		|	ВТ.Серия КАК Серия,
		|	ВТ.Назначение КАК Назначение,
		|	СУММА(ЕСТЬNULL(ВТ.КоличествоОтобрано, 0)) КАК КоличествоОтобрано,
		|	СУММА(ЕСТЬNULL(ВТ.КоличествоУпаковокОтобрано, 0)) КАК КоличествоУпаковокОтобрано
		|ИЗ
		|	ВТ КАК ВТ
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ.Упаковка,
		|	ВТ.Номенклатура,
		|	ВТ.Характеристика,
		|	ВТ.Серия,
		|	ВТ.Назначение";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("СтатусВыполнено", Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок);
	Запрос.УстановитьПараметр("СтатусВыполненоСОшибками", Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоСОшибками);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НовыйТоварОтобрано = ТоварыОтобрано.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйТоварОтобрано, ВыборкаДетальныеЗаписи);
		НовыйТоварОтобрано.Количество = ВыборкаДетальныеЗаписи.КоличествоОтобрано;
		НовыйТоварОтобрано.КоличествоУпаковок = ВыборкаДетальныеЗаписи.КоличествоУпаковокОтобрано;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", ВыборкаДетальныеЗаписи.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", ВыборкаДетальныеЗаписи.Характеристика);
		СтруктураПоиска.Вставить("Серия", ВыборкаДетальныеЗаписи.Серия);
		СтруктураПоиска.Вставить("Назначение", ВыборкаДетальныеЗаписи.Назначение);
		
		РезультатПоиска = ТоварыКОтгрузке.НайтиСтроки(СтруктураПоиска);
		
		Если РезультатПоиска.Количество() > 0 Тогда
			КоэффициентУпаковки = ПолучитьКоэффициентУпаковкиСервер(РезультатПоиска[0].Номенклатура, РезультатПоиска[0].Упаковка);
			
			РезультатПоиска[0].Количество         = РезультатПоиска[0].Количество - ВыборкаДетальныеЗаписи.КоличествоОтобрано;
			РезультатПоиска[0].КоличествоУпаковок = РезультатПоиска[0].Количество / КоэффициентУпаковки;
		КонецЕсли;
	КонецЦикла;
		
	Сч = 0;
	Пока Сч < ТоварыКОтгрузке.Количество() Цикл
		
		Если ТоварыКОтгрузке[Сч].Количество <= 0 Тогда
			ТоварыКОтгрузке.Удалить(ТоварыКОтгрузке[Сч]);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	// Заполнение товаров отгружено
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Номенклатура КАК Номенклатура,
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Характеристика КАК Характеристика,
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Назначение КАК Назначение,
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Серия КАК Серия,
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Количество КАК Количество,
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ВЫБОР
		|		КОГДА РасходныйОрдерНаТоварыОтгружаемыеТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА РасходныйОрдерНаТоварыОтгружаемыеТовары.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ РасходныйОрдерНаТоварыОтгружаемыеТовары.Упаковка
		|	КОНЕЦ КАК Упаковка
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары.ОтгружаемыеТовары КАК РасходныйОрдерНаТоварыОтгружаемыеТовары
		|ГДЕ
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Ссылка = &Ссылка
		|	И РасходныйОрдерНаТоварыОтгружаемыеТовары.Действие = &Действие";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Действие", Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтрокаОтгружено = ТоварыОтгружено.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОтгружено, ВыборкаДетальныеЗаписи);
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", ВыборкаДетальныеЗаписи.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", ВыборкаДетальныеЗаписи.Характеристика);
		СтруктураПоиска.Вставить("Серия", ВыборкаДетальныеЗаписи.Серия);
		СтруктураПоиска.Вставить("Назначение", ВыборкаДетальныеЗаписи.Назначение);
		СтруктураПоиска.Вставить("Упаковка", ВыборкаДетальныеЗаписи.Упаковка);
		
		РезультатПоиска = ТоварыКОтгрузке.НайтиСтроки(СтруктураПоиска);
		
		Если РезультатПоиска.Количество() > 0 Тогда
			КоэффициентУпаковки = ПолучитьКоэффициентУпаковкиСервер(РезультатПоиска[0].Номенклатура, РезультатПоиска[0].Упаковка);
			
			РезультатПоиска[0].Количество         = РезультатПоиска[0].Количество - ВыборкаДетальныеЗаписи.Количество;
			РезультатПоиска[0].КоличествоУпаковок = РезультатПоиска[0].Количество / КоэффициентУпаковки;
		КонецЕсли;
		
		РезультатПоиска = ТоварыОтобрано.НайтиСтроки(СтруктураПоиска);
		
		Если РезультатПоиска.Количество() > 0 Тогда
			КоэффициентУпаковки = ПолучитьКоэффициентУпаковкиСервер(РезультатПоиска[0].Номенклатура, РезультатПоиска[0].Упаковка);
			
			РезультатПоиска[0].Количество         = РезультатПоиска[0].Количество - ВыборкаДетальныеЗаписи.Количество;
			РезультатПоиска[0].КоличествоУпаковок = РезультатПоиска[0].Количество / КоэффициентУпаковки;
		КонецЕсли;
		
	КонецЦикла;
	
	Сч = 0;
	Пока Сч < ТоварыКОтгрузке.Количество() Цикл
		
		Если ТоварыКОтгрузке[Сч].Количество <= 0 Тогда
			ТоварыКОтгрузке.Удалить(ТоварыКОтгрузке[Сч]);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
		
	КонецЦикла;  
	
	Сч = 0;
	Пока Сч < ТоварыОтобрано.Количество() Цикл
		
		Если ТоварыОтобрано[Сч].Количество <= 0 Тогда
			ТоварыОтобрано.Удалить(ТоварыОтобрано[Сч]);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "ТоварыПоРаспоряжениям");
	Для Каждого Строка Из СтруктураРеквизитов.ТоварыПоРаспоряжениям.Выгрузить() Цикл
		
		НоваяСтрока = ТоварыПоРаспоряжениям.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		Если НоваяСтрока.Упаковка.Пустая() Тогда
			НоваяСтрока.Упаковка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "ЕдиницаИзмерения");
		КонецЕсли;
		
	КонецЦикла;

	СформироватьЗаголовкиКомандМеню();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФорму(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьФормуНаСервере(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФормуНаСервере(Результат)
	
	КоэффициентУпаковки = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(Результат.Упаковка, Результат.Номенклатура);
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура", Результат.Номенклатура);
	СтруктураПоиска.Вставить("Характеристика", Результат.Характеристика);
	СтруктураПоиска.Вставить("Серия", Результат.Серия);
	СтруктураПоиска.Вставить("Упаковка", Результат.Упаковка);
	СтруктураПоиска.Вставить("Назначение", Результат.Назначение);
	
	Если Результат.Режим = "РедактированиеОтгрузка" Тогда
		
		Литерал = "НомерСтроки";
		НомерСтроки = Результат[Литерал];
		
		ИсходноеКоличество = ТоварыОтгружено[НомерСтроки].КоличествоУпаковок;
		Количество = Результат.КоличествоУпаковок * КоэффициентУпаковки;  
		
		Если ИсходноеКоличество = Количество Тогда		
			Возврат;
		КонецЕсли;    
		
		Если ОтгрузкаРазрешена(Результат, Количество) Тогда
			
			ТоварыОтгружено[НомерСтроки].Упаковка           = Результат.Упаковка;
			ТоварыОтгружено[НомерСтроки].КоличествоУпаковок = Результат.КоличествоУпаковок;
			ТоварыОтгружено[НомерСтроки].Количество         = ТоварыОтгружено[НомерСтроки].КоличествоУпаковок * КоэффициентУпаковки;
			ТоварыОтгружено[НомерСтроки].Назначение         = Результат.Назначение;
			ТоварыОтгружено[НомерСтроки].Серия              = Результат.Серия;
			
			РезультатПоиска = ТоварыКОтгрузке.НайтиСтроки(СтруктураПоиска);
			Если РезультатПоиска.Количество() > 0 Тогда 				
				ОтгружаемоеКоличество = ИсходноеКоличество - Количество; 
				РезультатПоиска[0].КоличествоУпаковок = РезультатПоиска[0].КоличествоУпаковок + ОтгружаемоеКоличество;
				РезультатПоиска[0].Количество = РезультатПоиска[0].КоличествоУпаковок * КоэффициентУпаковки;
			Иначе
				НоваяСтрока = ТоварыКОтгрузке.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Результат);
				НоваяСтрока.КоличествоУпаковок = ИсходноеКоличество - Результат.КоличествоУпаковок;
				НоваяСтрока.Количество         = НоваяСтрока.КоличествоУпаковок * КоэффициентУпаковки;
			КонецЕсли;
			
		Иначе
			Возврат;
		КонецЕсли;
		
	Иначе
		
		РезультатПоиска = ТоварыОтгружено.НайтиСтроки(СтруктураПоиска);
		Если РезультатПоиска.Количество() > 0 Тогда
			КоличествоУпаковок = РезультатПоиска[0].КоличествоУпаковок + Результат.КоличествоУпаковок;
			Количество = КоличествоУпаковок * КоэффициентУпаковки;
			
			Если ОтгрузкаРазрешена(Результат, Количество) Тогда
				РезультатПоиска[0].КоличествоУпаковок = КоличествоУпаковок;
				РезультатПоиска[0].Количество = Количество;
			Иначе
				Возврат;
			КонецЕсли;
		Иначе
			КоличествоУпаковок = Результат.КоличествоУпаковок;
			Количество = КоличествоУпаковок * КоэффициентУпаковки;
			
			Если ОтгрузкаРазрешена(Результат, Количество) Тогда
				НоваяСтрока = ТоварыОтгружено.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Результат);
				НоваяСтрока.Количество = Количество;
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		// Уменьшаем количество к отгрузке
		
		СтруктураПоиска.Удалить("Упаковка");
		РезультатПоиска = ТоварыКОтгрузке.НайтиСтроки(СтруктураПоиска);
		КоличествоОтобрано = Результат.КоличествоУпаковок * КоэффициентУпаковки;
		
		Для Каждого Строка Из РезультатПоиска Цикл
			
			Если КоличествоОтобрано = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ВычитаемоеЗначение = Мин(Строка.Количество, КоличествоОтобрано);
			Строка.Количество = Строка.Количество - ВычитаемоеЗначение;
			КоличествоОтобрано = КоличествоОтобрано - ВычитаемоеЗначение;
			
			КоэффициентУпаковки = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(Строка.Упаковка, Строка.Номенклатура);
			
			Строка.КоличествоУпаковок = Строка.Количество * КоэффициентУпаковки;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Удаляем строки если они полностью отработаны
	
	Сч = 0;
	Пока Сч < ТоварыКОтгрузке.Количество() Цикл
		
		Если ТоварыКОтгрузке[Сч].Количество <= 0 Тогда
			ТоварыКОтгрузке.Удалить(Сч);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаКодМаркировки Из Результат.ШтрихкодыУпаковок Цикл
		
		НоваяСтрока = ШтрихкодыУпаковок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКодМаркировки);
		
	КонецЦикла;
	
	СформироватьЗаголовкиКомандМеню();
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьПереносИзОтобраноВОтгружено(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Литерал = "НомерСтроки";
	НомерСтроки = Результат[Литерал];

	КоэффициентУпаковки = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(Результат.Упаковка, Результат.Номенклатура);
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура", Результат.Номенклатура);
	СтруктураПоиска.Вставить("Характеристика", Результат.Характеристика);
	СтруктураПоиска.Вставить("Серия", Результат.Серия);
	СтруктураПоиска.Вставить("Упаковка", Результат.Упаковка);
	СтруктураПоиска.Вставить("Назначение", Результат.Назначение);
	
	ТоварыОтобрано[НомерСтроки].КоличествоУпаковок = ТоварыОтобрано[НомерСтроки].КоличествоУпаковок - Результат.КоличествоУпаковок;
	ТоварыОтобрано[НомерСтроки].Количество         = ТоварыОтобрано[НомерСтроки].КоличествоУпаковок * КоэффициентУпаковки;
	
	РезультатПоиска = ТоварыОтгружено.НайтиСтроки(СтруктураПоиска);
	Если РезультатПоиска.Количество() > 0 Тогда
		РезультатПоиска[0].КоличествоУпаковок = РезультатПоиска[0].КоличествоУпаковок + Результат.КоличествоУпаковок;
		РезультатПоиска[0].Количество = РезультатПоиска[0].КоличествоУпаковок * КоэффициентУпаковки;
	Иначе
		НоваяСтрока = ТоварыОтгружено.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Результат);
		НоваяСтрока.КоличествоУпаковок = Результат.КоличествоУпаковок;
		НоваяСтрока.Количество         = НоваяСтрока.КоличествоУпаковок * КоэффициентУпаковки;
	КонецЕсли;
	

	// Удаляем строки если они полностью отработаны
	
	Сч = 0;
	Пока Сч < ТоварыОтобрано.Количество() Цикл
		
		Если ТоварыОтобрано[Сч].Количество <= 0 Тогда
			ТоварыОтобрано.Удалить(Сч);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	СформироватьЗаголовкиКомандМеню();
	
КонецПроцедуры

&НаСервере
Функция ЗакончитьОтгрузкуНаСервере()
	
	ОрдерОбъект = Ссылка.ПолучитьОбъект();
	
	ОрдерОбъект.Помещение   = Помещение;
	ОрдерОбъект.Комментарий = Комментарий;
	ОрдерОбъект.ЗонаОтгрузки = ЗонаОтгрузки;
	
	Если ИспользоватьСкладскиеПомещения И Помещение.Пустая() Тогда
		
		ТекстОшибки = НСтр("ru = 'Не выбрано помещение'");
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = СокрЛП(ТекстОшибки);
		СообщениеПользователю.Сообщить();
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы["СтраницаИнформация"];
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ЗонаОтгрузки.Пустая() И ИспользоватьАдресноеХранение Тогда
		
		ТекстОшибки = НСтр("ru = 'Не выбрана зона отгрузки'");
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = СокрЛП(ТекстОшибки);
		СообщениеПользователю.Сообщить();
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы["СтраницаИнформация"];
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Для Каждого Строка Из ТоварыОтгружено Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", Строка.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", Строка.Характеристика);
		СтруктураПоиска.Вставить("Серия", Строка.Серия);
		СтруктураПоиска.Вставить("Назначение", Строка.Назначение);
				
		РезультатПоиска = ОрдерОбъект.ОтгружаемыеТовары.НайтиСтроки(СтруктураПоиска);
		Для Каждого Результат Из РезультатПоиска Цикл     
			
			Если Не Результат.Упаковка.Пустая() И Не Результат.Упаковка = Строка.Упаковка Тогда
				Продолжить;
			КонецЕсли;
				
			РазницаКоличествоУпаковок = Результат.КоличествоУпаковок - Строка.КоличествоУпаковок;
			РазницаКоличество = Результат.Количество - Строка.Количество;
			
			Результат.КоличествоУпаковок = Строка.КоличествоУпаковок;
			Результат.Количество = Строка.Количество;
			Результат.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;
			Результат.Упаковка = Строка.Упаковка;
			
			Если РазницаКоличество > 0 Тогда
				НоваяСтрока = ОрдерОбъект.ОтгружаемыеТовары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Результат);
				НоваяСтрока.КоличествоУпаковок = РазницаКоличествоУпаковок;
				НоваяСтрока.Количество = РазницаКоличество;
				НоваяСтрока.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отобрать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ТоварыОтгружено.Количество() Тогда
		ОрдерОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен; 
	КонецЕсли;
	
	ОрдерОбъект.ШтрихкодыУпаковок.Очистить();
	Для Каждого СтрокаШК Из ШтрихкодыУпаковок Цикл
		
		НоваяСтрока = ОрдерОбъект.ШтрихкодыУпаковок.Добавить();
		НоваяСтрока.ШтрихкодУпаковки = СтрокаШК.ШтрихкодУпаковки;
		
	КонецЦикла;
	
	Попытка
		ОрдерОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура Информация(Команда)
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы["СтраницаИнформация"];
	СкрытьМеню();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы["СтраницаИнформация"] Тогда
		СтандартнаяОбработка = Ложь;
		Отказ = Истина;
		ОформитьМеню("КОтгрузке");
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьЗонуПриемки()
	
	ЗонаОтгрузки = Справочники.СкладскиеЯчейки.ЗонаПриемкиПоУмолчанию(Склад, Помещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьМеню()

	Элементы.ГруппаМеню.Видимость = Истина;
	Элементы.ГруппаКоманды.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьМеню()

	Элементы.ГруппаМеню.Видимость = Ложь;
	Элементы.ГруппаКоманды.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОтгрузитьПоОтобраннымТоварамНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТоварыКПоступлениюОстатки.ДокументПоступления КАК ДокументПоступления,
		|	ТоварыКПоступлениюОстатки.Номенклатура КАК Номенклатура,
		|	ТоварыКПоступлениюОстатки.Характеристика КАК Характеристика,
		|	ТоварыКПоступлениюОстатки.Назначение КАК Назначение,
		|	ТоварыКПоступлениюОстатки.Склад КАК Склад,
		|	ТоварыКПоступлениюОстатки.Отправитель КАК Отправитель,
		|	ТоварыКПоступлениюОстатки.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	ТоварыКПоступлениюОстатки.Серия КАК Серия,
		|	ТоварыКПоступлениюОстатки.КОформлениюОрдеровОстаток КАК Количество,
		|	ТоварыКПоступлениюОстатки.КОформлениюОрдеровОстаток КАК КоличествоУпаковок,
		|	ТоварыКПоступлениюОстатки.Номенклатура.ЕдиницаИзмерения КАК Упаковка
		|ИЗ
		|	РегистрНакопления.ТоварыКПоступлению.Остатки(, ДокументПоступления = &ДокументПоступления) КАК ТоварыКПоступлениюОстатки
		|ГДЕ
		|	ТоварыКПоступлениюОстатки.КОформлениюОрдеровОстаток > 0";
	
	Запрос.УстановитьПараметр("ДокументПоступления", РаспоряжениеНаОтгрузку);
	
	Остатки = Запрос.Выполнить().Выгрузить();
	ТоварыОтгружено.Загрузить(Остатки);
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПолучитьСсылкуНаОрдер(РаспоряжениеНаОтгрузку)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТоварыТоварыПоРаспоряжениям
		|ГДЕ
		|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение = &Распоряжение
		|	И РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка.Ссылка УБЫВ";
	
	Запрос.УстановитьПараметр("Распоряжение", РаспоряжениеНаОтгрузку);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ПолучитьКоэффициентУпаковкиСервер(Номенклатура, Упаковка)
	
	Возврат Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(Упаковка, Номенклатура);
	
КонецФункции

&НаКлиенте
Процедура Контроль(Команда)
	
	МассивСтрок = Новый Массив;
	Для Каждого Строка Из ТоварыОтгружено Цикл
		
		СтруктураЗаполнения = ПолучитьСтруктуруЗаполненияКонтроля();
		ЗаполнитьЗначенияСвойств(СтруктураЗаполнения, Строка);
		МассивСтрок.Добавить(СтруктураЗаполнения);
		
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МассивСтрок", МассивСтрок);
	ПараметрыФормы.Вставить("Склад", Склад);
	ПараметрыФормы.Вставить("Помещение", Помещение);
	ПараметрыФормы.Вставить("ПоказыватьФотоТоваров", ПоказыватьФотоТоваров);
	
	Описание = Новый ОписаниеОповещения("ЗавершитьКонтроль", ЭтаФорма);
	
	ОткрытьФорму(
	"Обработка.МобильноеРабочееМестоКладовщика.Форма.Контроль",ПараметрыФормы,
	ЭтаФорма,,,,Описание,
	РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьКонтроль(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТоварыОтгружено.Очистить();
	
	Для Каждого СтрокаКонтроль Из Результат Цикл
		Если СтрокаКонтроль.КоличествоУпаковокФакт >= 0 Тогда
			НоваяСтрока = ТоварыОтгружено.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКонтроль);
			
			НоваяСтрока.КоличествоУпаковок = СтрокаКонтроль.КоличествоУпаковокФакт;
			КоэффициентУпаковки = ПолучитьКоэффициентУпаковкиСервер(СтрокаКонтроль.Номенклатура, СтрокаКонтроль.Упаковка);
			НоваяСтрока.Количество = НоваяСтрока.КоличествоУпаковок * КоэффициентУпаковки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруЗаполненияКонтроля()
	
	Структура = Новый Структура;
	Структура.Вставить("Номенклатура");
	Структура.Вставить("Характеристика");
	Структура.Вставить("Серия");
	Структура.Вставить("Упаковка");
	Структура.Вставить("КоличествоУпаковок");
	Структура.Вставить("Назначение");
	Структура.Вставить("Действие");
	
	Возврат Структура;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьОтгружено()
	
	Для Каждого СтрокаОтобрано Из ТоварыОтобрано Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", СтрокаОтобрано.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", СтрокаОтобрано.Характеристика);
		СтруктураПоиска.Вставить("Серия", СтрокаОтобрано.Серия);
		СтруктураПоиска.Вставить("Упаковка", СтрокаОтобрано.Упаковка);
		СтруктураПоиска.Вставить("Назначение", СтрокаОтобрано.Назначение);
		
		КоэффициентУпаковки = ПолучитьКоэффициентУпаковкиСервер(СтрокаОтобрано.Номенклатура, СтрокаОтобрано.Упаковка);
		РезультатПоиска = ТоварыОтгружено.НайтиСтроки(СтруктураПоиска);
		
		Если РезультатПоиска.Количество() > 0 Тогда
			РезультатПоиска[0].КоличествоУпаковок = РезультатПоиска[0].КоличествоУпаковок + СтрокаОтобрано.КоличествоУпаковок;
			РезультатПоиска[0].Количество         = РезультатПоиска[0].КоличествоУпаковок * КоэффициентУпаковки;
		Иначе
			НоваяСтрока = ТоварыОтгружено.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОтобрано);
			НоваяСтрока.КоличествоУпаковок = СтрокаОтобрано.КоличествоУпаковок;
			НоваяСтрока.Количество         = НоваяСтрока.КоличествоУпаковок * КоэффициентУпаковки;
		КонецЕсли;
		
	КонецЦикла;
	
	ТоварыОтобрано.Очистить();
	
КонецПроцедуры

&НаСервере
Функция ОтгрузкаРазрешена(СвойстваТовара, Количество)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура", СвойстваТовара.Номенклатура);
	СтруктураПоиска.Вставить("Характеристика", СвойстваТовара.Характеристика);
	СтруктураПоиска.Вставить("Серия", СвойстваТовара.Серия);
	СтруктураПоиска.Вставить("Назначение", СвойстваТовара.Назначение);
	
	Литерал = "НомерСтроки";
	НомерСтроки = СвойстваТовара[Литерал];
	Если Не ТоварыПоРаспоряжениям[НомерСтроки].СтатусУказанияСерий = 0 Тогда
		СтруктураПоиска.Вставить("Серия", СвойстваТовара.Серия);
	КонецЕсли;
	
	ДоступноКОтгрузке = 0;
	РезультатПоиска = ТоварыПоРаспоряжениям.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого НайденнаяСтрока Из РезультатПоиска Цикл
		
		КоэффициентУпаковки = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(НайденнаяСтрока.Упаковка, НайденнаяСтрока.Номенклатура);
		ДоступноКОтгрузке = ДоступноКОтгрузке + НайденнаяСтрока.Количество * КоэффициентУпаковки;
		
	КонецЦикла;
	
	Если Количество > ДоступноКОтгрузке Тогда
		ТекстОшибки = НСтр("ru = 'Количество товара, которое нужно отгрузить по распоряжениям на отгрузку не равно количеству, которое отгружается ордером.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиТоварСервер(Штрихкод)
	
	Возврат Обработки.МобильноеРабочееМестоКладовщика.НайтиТоварПоШК(Штрихкод);
	
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	
	Если Результат = "Завершить" Тогда
		
		ОтгрузкаЗавершена = ЗакончитьОтгрузкуНаСервере();
		
		Если ОтгрузкаЗавершена Тогда
			Закрыть();
		КонецЕсли;
		
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьШтрихкодыУпаковок(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьШтрихкодыУпаковокНаСервере(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьШтрихкодыУпаковокНаСервере(Результат) Экспорт
	
	ШтрихкодыУпаковок.Очистить();
	ШтрихкодыУпаковок.Загрузить(Результат.Выгрузить());
	
КонецПроцедуры

#КонецОбласти