
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	// Возврат при получении формы для анализа.
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(Параметры.ЗаголовокФормы) Тогда
		Заголовок = Параметры.ЗаголовокФормы;
	КонецЕсли;
	
	СтруктураБыстрогоОтбора = ОбщегоНазначения.СкопироватьРекурсивно(Параметры.СтруктураБыстрогоОтбора);
	
	Элементы.СписокНаОформлениеОформитьОтчет.Доступность = ПравоДоступа("Добавление",Метаданные.Документы.ОтчетКомиссионера);
	Элементы.СписокНаОформлениеКонтрагент.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов");
	
	ОбновитьГиперссылкуКОформлению();
	
	// Установка отборов.
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжиданияГиперссылкиКОформлению();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ПередачаТоваровХранителю"
		ИЛИ ИмяСобытия = "Запись_ОприходованиеИзлишковТоваровУХранителя"
		ИЛИ ИмяСобытия = "Запись_ОтчетОСписанииТоваровУХранителя"
		ИЛИ ИмяСобытия = "Запись_РеализацияТоваровУслуг"
		ИЛИ ИмяСобытия = "Запись_ПоступлениеТоваровОтХранителя"
		ИЛИ ИмяСобытия = "Запись_ОтчетКомиссионера" Тогда
		
		Элементы.СписокНаОформление.Обновить();
		
		ПодключитьОбработчикОжиданияГиперссылкиКОформлению();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		СтруктураБыстрогоОтбора.Свойство("Комиссионер", Комиссионер);
		Настройки.Удалить("Комиссионер");
		СтруктураБыстрогоОтбора.Свойство("Организация", Организация);
		Настройки.Удалить("Организация");
	Иначе
		Комиссионер = Настройки.Получить("Комиссионер");
		Организация = Настройки.Получить("Организация");
	КонецЕсли;
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КомиссионерПриИзменении(Элемент)
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		СтруктураБыстрогоОтбора.Вставить("Партнер", Комиссионер);
	КонецЕсли;
	
	УстановитьОтборДинамическихСписков();
	
	ОбновитьГиперссылкуКОформлению();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		СтруктураБыстрогоОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	
	УстановитьОтборДинамическихСписков();
	
	ОбновитьГиперссылкуКОформлению();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОформитьОтчетКомиссионера(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени("Обработка.ЖурналДокументовОтчетыКомиссионеров.КОформлениюОтчетовКомиссионеров");
	
	ОформитьОтчетКомиссионераНаКлиенте();
		
КонецПроцедуры
	
&НаКлиенте
Процедура ОформитьРеализациюЧерезКомиссионера(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени("Обработка.ЖурналДокументовОтчетыКомиссионеров.КОформлениюРеализацииЧерезКомиссионера");
	
	ОформитьРеализациюТоваровУслугНаКлиенте();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Условное оформление динамического списка "СписокНазначенийНаОформление"
	СписокУсловноеОформление = СписокНаОформление.КомпоновщикНастроек.Настройки.УсловноеОформление;
	СписокУсловноеОформление.Элементы.Очистить();
	
КонецПроцедуры

#Область Создание_Документов

&НаКлиенте
Процедура ОформитьОтчетКомиссионераНаКлиенте()
	
	ОчиститьСообщения();
	
	ВыделенныеСтроки = Элементы.СписокНаОформление.ВыделенныеСтроки;
	СписокОтбора.Очистить();
	
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		НайденнаяСтрока = Элементы.СписокНаОформление.ДанныеСтроки(Строка);
		ДобавленнаяСтрока = СписокОтбора.Добавить();
		ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, НайденнаяСтрока);
	КонецЦикла;
	
	ПараметрыСозданныхДокументов = ОформитьОтчетКомиссионераНаСервере();
	ОформитьОтчетКомиссионераНаКлиентеЗавершение(Неопределено, ПараметрыСозданныхДокументов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьРеализациюТоваровУслугНаКлиенте()
	
	ОчиститьСообщения();
	
	ВыделенныеСтроки = Элементы.СписокНаОформление.ВыделенныеСтроки;
	СписокОтбора.Очистить();
	
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		НайденнаяСтрока = Элементы.СписокНаОформление.ДанныеСтроки(Строка);
		ДобавленнаяСтрока = СписокОтбора.Добавить();
		ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, НайденнаяСтрока);
	КонецЦикла;
	
	ПараметрыСозданныхДокументов = ОформитьРеализациюЧерезКомиссионераНаСервере();
	ОформитьОтчетКомиссионераНаКлиентеЗавершение(Неопределено, ПараметрыСозданныхДокументов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьОтчетКомиссионераНаКлиентеЗавершение(Результат, ДопПараметры)
	
	Если Результат = Неопределено Тогда
		ПараметрыСозданныхДокументов = ДопПараметры;
	Иначе
		ПараметрыСозданныхДокументов = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(ПараметрыСозданныхДокументов.СписокОшибок);
	
	Если ПараметрыСозданныхДокументов.Свойство("ТекстВопросаПользователю") Тогда
		ПоказатьВопрос(
			Новый ОписаниеОповещения(ПараметрыСозданныхДокументов.ПроцедураОбработкиОтветаПользователя, 
				ЭтотОбъект,
				ПараметрыСозданныхДокументов),
			ПараметрыСозданныхДокументов.ТекстВопросаПользователю,
			РежимДиалогаВопрос.ДаНет);
	ИначеЕсли ПараметрыСозданныхДокументов.Свойство("ИмяФормы") Тогда
		
		ОткрытьФорму(ПараметрыСозданныхДокументов.ИмяФормы, 
			ПараметрыСозданныхДокументов.Параметры,
			ЭтаФорма,,,,,);
	КонецЕсли;
	
	Элементы.СписокНаОформление.Обновить();
	
КонецПроцедуры

&НаСервере
Функция ОформитьОтчетКомиссионераНаСервере()
	
	Перем СписокОшибок;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ОформитьРядОтчетовКомиссионера", Ложь);
	ПараметрыФормы.Вставить("ДлительнаяОперация", Неопределено);
	ПараметрыФормы.Вставить("СписокОшибок", СписокОшибок);
	
	РазбивкаПоДокументам = СписокОтбора.Выгрузить();
	
	Если РазбивкаПоДокументам.Количество() = 1 Тогда
		
		ПараметрыФормы = ОформитьОтчетКомиссионераПоТаблице(РазбивкаПоДокументам, СписокОшибок);
		
	ИначеЕсли РазбивкаПоДокументам.Количество() = 0 Тогда
		
		ТекстОшибки = НСтр("ru = 'Не выбрано распоряжение для оформления документа'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление",ТекстОшибки, Неопределено);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыФормы) Тогда
		ПараметрыФормы = Новый Структура();
	Иначе 
		Элементы.СписокНаОформление.Обновить();
	КонецЕсли;
	
	РежимБезВопросов = Ложь;
	ПараметрыФормы.Вставить("СписокОшибок", СписокОшибок);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Функция ОформитьОтчетКомиссионераПоТаблице(РазбивкаПоДокументам, СписокОшибок)
	
	СозданныеДокументы = Новый СписокЗначений();
	
	ПерваяСтрока = РазбивкаПоДокументам[0];
	
	МетаданныеОтчетаКомиссионера = Метаданные.Документы.ОтчетКомиссионера;
	ИмяОтчетаКомиссионера        = МетаданныеОтчетаКомиссионера.Имя;
	
	НастройкиФормы = Новый Структура();
	ПараметрыФормы = Новый Структура();

	СтруктураПоиска = Документы.ОтчетКомиссионера.СтруктураЗначащихРеквизитов();
	
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, ПерваяСтрока);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИсключитьГруппыСкладовДоступныеВЗаказах", Истина);
	ДополнительныеПараметры.Вставить("ПустаяСсылкаДокумента", Документы.ОтчетКомиссионера.ПустаяСсылка());
	ДополнительныеПараметры.Вставить("ХозяйственныеОперации", Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
	ДополнительныеПараметры.Вставить("КомиссионныеПродажи25", Истина);
	ДополнительныеПараметры.Вставить("Валюта", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураПоиска.Договор, "ВалютаВзаиморасчетов"));
	
	УсловияПродажПоУмолчанию = ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(
		СтруктураПоиска.Партнер, ДополнительныеПараметры);
	
	Если Не УсловияПродажПоУмолчанию = Неопределено
		И УсловияПродажПоУмолчанию.Свойство("Соглашение") Тогда
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, УсловияПродажПоУмолчанию, 
			"Соглашение");
	КонецЕсли;
	
	РеквизитыШапки = Новый Структура();
	ОбщегоНазначенияУТКлиентСервер.ДополнитьСтруктуру(РеквизитыШапки, СтруктураПоиска, Истина);
	
	ПараметрыФормы.Вставить("РеквизитыШапки",    РеквизитыШапки);
	ПараметрыФормы.Вставить("ЗаполнятьПоДаннымКОформлению", Истина);
	ПараметрыФормы.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.РеализацияЧерезКомиссионера);
	
	НастройкиФормы.Вставить("ИмяФормы", "Документ." + ИмяОтчетаКомиссионера + ".Форма.ФормаДокумента");
	
	// Для вывода сообщения о количестве созданных документов
	СозданныеДокументы.Добавить(ПредопределенноеЗначение("Документ." + МетаданныеОтчетаКомиссионера.Имя + ".ПустаяСсылка"));
	
	ПараметрыФормы.Вставить("СозданныеДокументы", СозданныеДокументы);
	ПараметрыСОснованием = Новый Структура("Основание", ПараметрыФормы);
	
	НастройкиФормы.Вставить("Параметры", ПараметрыСОснованием);
	
	Возврат НастройкиФормы;
	
КонецФункции

&НаСервере
Функция ОформитьРеализациюТоваровУслугПоТаблице(РазбивкаПоДокументам, СписокОшибок)
	
	СозданныеДокументы = Новый СписокЗначений();
	
	ПерваяСтрока = РазбивкаПоДокументам[0];
	
	МетаданныеРеализацияТоваровУслуг = Метаданные.Документы.РеализацияТоваровУслуг;
	ИмяРеализацияТоваровУслуг        = МетаданныеРеализацияТоваровУслуг.Имя;
	
	НастройкиФормы = Новый Структура();
	ПараметрыФормы = Новый Структура();

	СтруктураПоиска = ПродажиСервер.СтруктураЗначащихРеквизитов();
	
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, ПерваяСтрока);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИсключитьГруппыСкладовДоступныеВЗаказах", Истина);
	ДополнительныеПараметры.Вставить("ПустаяСсылкаДокумента", Документы.РеализацияТоваровУслуг.ПустаяСсылка());
	ДополнительныеПараметры.Вставить("ХозяйственныеОперации", Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
	ДополнительныеПараметры.Вставить("КомиссионныеПродажи25", Истина);
	ДополнительныеПараметры.Вставить("Валюта", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураПоиска.Договор, "ВалютаВзаиморасчетов"));
	
	УсловияПродажПоУмолчанию = ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(
		СтруктураПоиска.Партнер, ДополнительныеПараметры);
	
	Если Не УсловияПродажПоУмолчанию = Неопределено
		И УсловияПродажПоУмолчанию.Свойство("Соглашение") Тогда
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, УсловияПродажПоУмолчанию, 
			"Соглашение");
	КонецЕсли;
	
	РеквизитыШапки = Новый Структура();
	ОбщегоНазначенияУТКлиентСервер.ДополнитьСтруктуру(РеквизитыШапки, СтруктураПоиска, Истина);
	
	ПараметрыФормы.Вставить("РеквизитыШапки",    РеквизитыШапки);
	ПараметрыФормы.Вставить("ЗаполнятьПоДаннымКОформлению", Истина);
	ПараметрыФормы.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.РеализацияЧерезКомиссионера);
	
	НастройкиФормы.Вставить("ИмяФормы", "Документ." + ИмяРеализацияТоваровУслуг + ".Форма.ФормаДокумента");
	
	// Для вывода сообщения о количестве созданных документов
	СозданныеДокументы.Добавить(ПредопределенноеЗначение("Документ." + МетаданныеРеализацияТоваровУслуг.Имя + ".ПустаяСсылка"));
	
	ПараметрыФормы.Вставить("СозданныеДокументы", СозданныеДокументы);
	ПараметрыСОснованием = Новый Структура("Основание", ПараметрыФормы);
	
	НастройкиФормы.Вставить("Параметры", ПараметрыСОснованием);
	
	Возврат НастройкиФормы;
	
КонецФункции

&НаСервере
Функция ОформитьРеализациюЧерезКомиссионераНаСервере()
	
	Перем СписокОшибок;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ОформитьРядОтчетовКомиссионера", Ложь);
	ПараметрыФормы.Вставить("ДлительнаяОперация", Неопределено);
	ПараметрыФормы.Вставить("СписокОшибок", СписокОшибок);
	
	РазбивкаПоДокументам = СписокОтбора.Выгрузить();
	
	Если РазбивкаПоДокументам.Количество() = 1 Тогда
		
		ПараметрыФормы = ОформитьРеализациюТоваровУслугПоТаблице(РазбивкаПоДокументам, СписокОшибок);
		
	ИначеЕсли РазбивкаПоДокументам.Количество() = 0 Тогда
		
		ТекстОшибки = НСтр("ru = 'Не выбрано распоряжение для оформления документа'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление",ТекстОшибки, Неопределено);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыФормы) Тогда
		ПараметрыФормы = Новый Структура();
	Иначе 
		Элементы.СписокНаОформление.Обновить();
	КонецЕсли;
	
	РежимБезВопросов = Ложь;
	ПараметрыФормы.Вставить("СписокОшибок", СписокОшибок);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Процедура СписокНаОформлениеПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрокаСписка = Элементы.СписокНаОформление.ТекущиеДанные;
	
	Если Не ТекущаяСтрокаСписка = Неопределено Тогда
		Элементы.СписокНаОформлениеОформитьОтчет.Доступность = Не (ТекущаяСтрокаСписка.ВестиРасчетыЧерезКонечныхПокупателей
			Или ТекущаяСтрокаСписка.ПорядокРасчетов = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоДоговорамНакладным"));
	КонецЕсли;
	
КонецПроцедуры
	
#КонецОбласти

#Область Прочее

&НаСервере
Процедура УстановитьОтборДинамическихСписков()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокНаОформление,
		"Партнер",
		Комиссионер,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(Комиссионер));
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокНаОформление,
		"Организация",
		Организация,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(Организация));

КонецПроцедуры

#Область ГиперссылкаКОформлению

&НаКлиенте
Процедура ПодключитьОбработчикОжиданияГиперссылкиКОформлению()

	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()

	Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда

		ОбновитьГиперссылкуКОформлениюЗавершение(
			АдресХранилища,
			Элементы.СмТакжеВРаботе.Видимость,
			СмТакжеВРаботе,
			ИдентификаторЗадания);

	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда

		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);

	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)

	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);

КонецФункции

&НаСервере
Процедура ОбновитьГиперссылкуКОформлению()
	
	ПараметрыФормирования = Новый Структура;
	ПараметрыФормирования.Вставить("Организация", Организация);
	ПараметрыФормирования.Вставить("Контрагент", Комиссионер);

	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить(ПараметрыФормирования);

	ПроцедураРасчета = "Обработки.ЖурналДокументовОтчетыКомиссионеров.СформироватьГиперссылкуКОформлениюФоновоеЗадание";

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	РезультатРасчета = ДлительныеОперации.ВыполнитьВФоне(ПроцедураРасчета,
	                                                     ПараметрыЗадания,
	                                                     ПараметрыВыполнения);
	
	АдресХранилища       = РезультатРасчета.АдресРезультата;
	ИдентификаторЗадания = РезультатРасчета.ИдентификаторЗадания;

	Если РезультатРасчета.Статус = "Выполнено" Тогда
		ОбновитьГиперссылкуКОформлениюЗавершение(
			АдресХранилища,
			Элементы.СмТакжеВРаботе.Видимость,
			СмТакжеВРаботе,
			ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
//
// Параметры:
// 	АдресХранилища - Строка - адрес данных во временном хранилище
// 	СмТакжеВРаботеВидимость - Булево - видимость реквизита СмТакжеВРаботе
// 	СмТакжеВРаботеЗначение - Строка - значение реквизита СмТакжеВРаботе
// 	ИдентификаторЗадания - УникальныйИдентификатор,Неопределено - идентификатор фонового задания
// 		
Процедура ОбновитьГиперссылкуКОформлениюЗавершение(
	Знач АдресХранилища,
	СмТакжеВРаботеВидимость, 
	СмТакжеВРаботеЗначение,
	ИдентификаторЗадания)

	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);

	Если Не ЗначениеЗаполнено(Результат.СмТакжеВРаботе) Тогда
		СмТакжеВРаботеВидимость = Ложь;
	Иначе
		СмТакжеВРаботеВидимость = Истина;
		СмТакжеВРаботеЗначение = Результат.СмТакжеВРаботе;
	КонецЕсли;

	ИдентификаторЗадания = Неопределено;

КонецПроцедуры

&НаКлиенте
Процедура СмТакжеВРаботеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	// &ЗамерПроизводительности
	ИмяКлючевойОперации = СтрШаблон("Обработка.ЖурналДокументовОтчетыКомиссионеров.Форма.КОформлениюОтчетовКомиссионеров.СмТакже.%1",
									НавигационнаяСсылкаФорматированнойСтроки);
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, ИмяКлючевойОперации);
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	СтруктураБыстрогоОтбора = Новый Структура;
	СтруктураБыстрогоОтбора.Вставить("Организация",Организация);
	СтруктураБыстрогоОтбора.Вставить("Контрагент", Комиссионер);
	СтруктураБыстрогоОтбора.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияЧерезКомиссионера"));
	ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	
	ОткрытьФорму(НавигационнаяСсылкаФорматированнойСтроки, ПараметрыФормы, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти
