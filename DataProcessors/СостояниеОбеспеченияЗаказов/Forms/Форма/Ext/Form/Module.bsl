#Область ОписаниеПеременных

&НаКлиенте
Перем ЭтоОжиданиеРезервированияИзДругихЗаказов;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьОбособленноеОбеспечение = ПолучитьФункциональнуюОпцию("ИспользоватьОбособленноеОбеспечениеЗаказов");
	ДосчитыватьРегистрРегламентнымЗаданием = РаспределениеЗапасов.ДосчитыватьРегистрРегламентнымЗаданием();
	ТолькоПросмотр = Параметры.ТолькоПросмотр;
	ЗакрыватьПриВыборе = Ложь;
	
	ЗаполнитьЗаказыДляПроверкиЗаданийПриСозданииНаСервере();
	
	Если Параметры.ЗаказыРегистраторыДвижений <> Неопределено Тогда
		ЗаказыРегистраторыДвижений.ЗагрузитьЗначения(Параметры.ЗаказыРегистраторыДвижений);
	КонецЕсли;
	ЗаказыРегистраторыДвижений.Добавить(Параметры.Заказ);
	
	ОтобранныеСостояния.Добавить(Перечисления.РаспределениеЗапасовСостояния.ВРезерве,
		Перечисления.РаспределениеЗапасовСостояния.ВРезерве, Истина);
	ОтобранныеСостояния.Добавить(Перечисления.РаспределениеЗапасовСостояния.ОбеспеченНаСкладе,
		Перечисления.РаспределениеЗапасовСостояния.ОбеспеченНаСкладе, Истина);
	ОтобранныеСостояния.Добавить(Перечисления.РаспределениеЗапасовСостояния.ОбеспеченКДате,
		НСтр("ru = 'Ожидается'"), Истина);
	ОтобранныеСостояния.Добавить(Перечисления.РаспределениеЗапасовСостояния.ОбеспеченКДате,
		НСтр("ru = 'Ожидается не в срок'"), Истина);
	ОтобранныеСостояния.Добавить(Перечисления.РаспределениеЗапасовСостояния.Обеспечить,
		Перечисления.РаспределениеЗапасовСостояния.Обеспечить, Истина);
	ОтобранныеСостояния.Добавить(Перечисления.РаспределениеЗапасовСостояния.НеОбеспечивать,
		Перечисления.РаспределениеЗапасовСостояния.НеОбеспечивать, Истина);
	
	КонтекстИспользования = Параметры.КонтекстИспользования;
	КомандыСпискаВидимость = Параметры.КомандыСпискаВидимость
		Или КонтекстИспользования = "СПИСОКЗАКАЗОВ"
		Или КонтекстИспользования = "РАЗДЕЛ";
	ЭтоДокумент = КонтекстИспользования = "СПИСОКЗАКАЗОВ"
		Или КонтекстИспользования = "РАЗДЕЛ"
		Или ЗначениеЗаполнено(Параметры.Заказ);
		
	ВосстановитьНастройки();
	Состояния = СтрокаСостояния(ОтобранныеСостояния);
	
	УправлениеВидимостью(Неопределено, ЭтотОбъект, КонтекстИспользования);
	УправлениеПараметрамиСписков(Неопределено);
	АдресАналитик = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	ДатаОтгрузкиВсехСтрокОднойДатой = ОбеспечениеВДокументахСервер.ДатаОтгрузкиВсехСтрокОднойДатой(
		Параметры.ДоступныеОстаткиПараметрыДокумента);
	ДатаОтгрузкиНовыхСтрок = НачалоДня(ТекущаяДатаСеанса());
	СниматьФлагОтгружатьОднойДатой = Параметры.ДоступныеОстаткиПараметрыДокумента <> Неопределено
		И Параметры.ДоступныеОстаткиПараметрыДокумента.ПараметрыВстраивания.ВыражениеДляВопросаПриВыполненииДействияВСпискеЗаказов <> "НЕОПРЕДЕЛЕНО";
	
	Если ПолучитьФункциональнуюОпцию("БазоваяВерсия") Тогда
		Элементы.НаборСпособОбеспеченияНаименование.Видимость = Ложь;
		Элементы.СписокСпособОбеспеченияНаименование.Видимость = Ложь;
		Элементы.СписокЗаказыСпособОбеспеченияНаименование.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗаказыДляПроверкиЗаданий.Количество() > 0 Тогда
		
		ИнтервалПереключитьСтраницы = 1;
		ПодключитьОбработчикОжидания("Подключаемый_ПереключитьСтраницы", ИнтервалПереключитьСтраницы, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ПометкаЗначенийВСписке" Тогда
		
		ОтобранныеСостояния.Очистить();
		Для Каждого Элемент Из ВыбранноеЗначение Цикл
			ОтобранныеСостояния.Добавить(Элемент.Значение, Элемент.Представление, Элемент.Пометка, Элемент.Картинка);
		КонецЦикла;
		ПометкаЗначенийВСпискеНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СостоянияНажатие(Элемент, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура("Список,Заголовок", ОтобранныеСостояния, НСтр("ru = 'Состояния обеспечения'"));
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму(
		"ОбщаяФорма.ПометкаЗначенийВСписке",
		ПараметрыФормы,
		ЭтотОбъект,
		УникальныйИдентификатор,
		,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	УправлениеПараметрамиСписков(Элементы.Склад.Имя);
	СохранитьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура МенеджерПриИзменении(Элемент)
	
	УправлениеПараметрамиСписков(Элементы.Менеджер.Имя);
	СохранитьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентПриИзменении(Элемент)
	
	УправлениеПараметрамиСписков(Элементы.Клиент.Имя);
	СохранитьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПодробнееНажатие(Элемент)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДополнительныеПараметры = Новый Структура("Номенклатура,Характеристика,Склад");
	Если Не ТекущиеДанные.Свойство("Номенклатура")
				Или Не ТекущиеДанные.Свойство("Характеристика")
				Или Не ТекущиеДанные.Свойство("Склад") Тогда
		Возврат;
	КонецЕсли;
	Если ТекущиеДанные <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, ТекущиеДанные);
	КонецЕсли;
	УправлениеПараметрамиСписков(Элементы.НадписьПодробнее.Имя, ДополнительныеПараметры);
	УправлениеВидимостью(Элементы.НадписьПодробнее.Имя, ЭтотОбъект, КонтекстИспользования);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьКТекущемуЗаказуНажатие(Элемент, СтандартнаяОбработка)
	
	УправлениеПараметрамиСписков(Элементы.НадписьКТекущемуЗаказу.Имя);
	УправлениеВидимостью(Элементы.НадписьКТекущемуЗаказу.Имя, ЭтотОбъект, КонтекстИспользования);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СписокВыборНаКлиенте(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_СписокПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	ПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыСписокЗаказы

&НаКлиенте
Процедура СписокЗаказыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СписокВыборНаКлиенте(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗаказыПриАктивизацииСтроки(Элемент)
	
	Если Элементы.СписокЗаказы.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Элементы.СписокЗаказы.Развернуть(Элементы.СписокЗаказы.ТекущаяСтрока);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокЗаказыПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	ПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыНабор

&НаКлиенте
Процедура НаборВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СписокВыборНаКлиенте(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НеОбеспечивать(Команда)
	
	ОчиститьСообщения();
	ВыполнитьДействие("ДЕЙСТВИЕ_НЕОБЕСПЕЧИВАТЬ");
	
КонецПроцедуры

&НаКлиенте
Процедура Отгрузить(Команда)
	
	ОчиститьСообщения();
	ВыполнитьДействие("ДЕЙСТВИЕ_ОТГРУЗИТЬ_ОБЕСПЕЧЕННОЕ");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтгрузитьДоступное(Команда)
	
	ОчиститьСообщения();
	ВыполнитьДействие("ДЕЙСТВИЕ_ОТГРУЗИТЬ_ДОСТУПНОЕ");
	
КонецПроцедуры

&НаКлиенте
Процедура РезервироватьНаСкладе(Команда)
	
	Если КонтекстИспользования = "ТАБЛИЦА" Тогда
		
		Кнопки = Новый СписокЗначений();
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Провести'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ТекстВопроса = НСтр("ru = 'Для выполнения команды необходимо провести документ.'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ВопросПровестиДокументЗавершение", ЭтотОбъект), ТекстВопроса, Кнопки);
		
		Возврат;
		
	КонецЕсли;
	РезервироватьНаСкладеКлиент();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СохранениеНастроек

&НаСервере
Процедура СохранитьНастройки()
	
	Настройки = Новый Структура();
	Настройки.Вставить("Менеджер", Менеджер);
	Настройки.Вставить("Клиент",   Клиент);
	Настройки.Вставить("Склад",    Склад);
	
	ЗначениеНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Обработка.СостояниеОбеспеченияЗаказов.Форма", "Основная");
	Если ТипЗнч(ЗначениеНастроек) = Тип("Структура") Тогда
		
		Если ЗначениеНастроек.Свойство("СостоянияРаздел") Тогда
			Настройки.Вставить("СостоянияРаздел", ЗначениеНастроек.СостоянияРаздел);
		КонецЕсли;
		
		Если ЗначениеНастроек.Свойство("СостоянияСписокЗаказов") Тогда
			Настройки.Вставить("СостоянияСписокЗаказов", ЗначениеНастроек.СостоянияСписокЗаказов);
		КонецЕсли;
		
	КонецЕсли;
	
	Если КонтекстИспользования = "РАЗДЕЛ" Тогда
		
		СостоянияСтруктура = Новый Структура();
		СостоянияСтруктура.Вставить("Состояние0", ОтобранныеСостояния[0].Пометка);
		СостоянияСтруктура.Вставить("Состояние1", ОтобранныеСостояния[1].Пометка);
		СостоянияСтруктура.Вставить("Состояние2", ОтобранныеСостояния[2].Пометка);
		СостоянияСтруктура.Вставить("Состояние3", ОтобранныеСостояния[3].Пометка);
		СостоянияСтруктура.Вставить("Состояние4", ОтобранныеСостояния[4].Пометка);
		СостоянияСтруктура.Вставить("Состояние5", ОтобранныеСостояния[5].Пометка);
		Настройки.Вставить("СостоянияРаздел", СостоянияСтруктура);
		
	КонецЕсли;
	
	Если КонтекстИспользования = "СПИСОКЗАКАЗОВ" Тогда
		
		СостоянияСтруктура = Новый Структура();
		СостоянияСтруктура.Вставить("Состояние0", ОтобранныеСостояния[0].Пометка);
		СостоянияСтруктура.Вставить("Состояние1", ОтобранныеСостояния[1].Пометка);
		СостоянияСтруктура.Вставить("Состояние2", ОтобранныеСостояния[2].Пометка);
		СостоянияСтруктура.Вставить("Состояние3", ОтобранныеСостояния[3].Пометка);
		СостоянияСтруктура.Вставить("Состояние4", ОтобранныеСостояния[4].Пометка);
		СостоянияСтруктура.Вставить("Состояние5", ОтобранныеСостояния[5].Пометка);
		Настройки.Вставить("СостоянияСписокЗаказов", СостоянияСтруктура);
		
	КонецЕсли;
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Обработка.СостояниеОбеспеченияЗаказов.Форма", "Основная", Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки()
	
	ЗначениеНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Обработка.СостояниеОбеспеченияЗаказов.Форма", "Основная");
	Если ТипЗнч(ЗначениеНастроек) = Тип("Структура") Тогда
		
		Менеджер = ЗначениеНастроек.Менеджер;
		Склад    = ЗначениеНастроек.Склад;
		Если ЗначениеНастроек.Свойство("Клиент") Тогда
			Клиент = ЗначениеНастроек.Клиент;
		КонецЕсли;
		Если ЗначениеНастроек.Свойство("СостоянияРаздел") И КонтекстИспользования = "РАЗДЕЛ" Тогда
			
			ОтобранныеСостояния[0].Пометка = ЗначениеНастроек.СостоянияРаздел.Состояние0;
			ОтобранныеСостояния[1].Пометка = ЗначениеНастроек.СостоянияРаздел.Состояние1;
			ОтобранныеСостояния[2].Пометка = ЗначениеНастроек.СостоянияРаздел.Состояние2;
			ОтобранныеСостояния[3].Пометка = ЗначениеНастроек.СостоянияРаздел.Состояние3;
			ОтобранныеСостояния[4].Пометка = ЗначениеНастроек.СостоянияРаздел.Состояние4;
			ОтобранныеСостояния[5].Пометка = ЗначениеНастроек.СостоянияРаздел.Состояние5;
			
		КонецЕсли;
		
		Если ЗначениеНастроек.Свойство("СостоянияСписокЗаказов") И КонтекстИспользования = "СПИСОКЗАКАЗОВ" Тогда
			
			ОтобранныеСостояния[0].Пометка = ЗначениеНастроек.СостоянияСписокЗаказов.Состояние0;
			ОтобранныеСостояния[1].Пометка = ЗначениеНастроек.СостоянияСписокЗаказов.Состояние1;
			ОтобранныеСостояния[2].Пометка = ЗначениеНастроек.СостоянияСписокЗаказов.Состояние2;
			ОтобранныеСостояния[3].Пометка = ЗначениеНастроек.СостоянияСписокЗаказов.Состояние3;
			ОтобранныеСостояния[4].Пометка = ЗначениеНастроек.СостоянияСписокЗаказов.Состояние4;
			ОтобранныеСостояния[5].Пометка = ЗначениеНастроек.СостоянияСписокЗаказов.Состояние5;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УсловноеОформление

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УстановитьОбщееУсловноеОформлениеСписков();
	УстановитьИндивидуальноеУсловноеОформлениеНабора();
	УстановитьИндивидуальноеУсловноеОформлениеСпискаЗаказы();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеСписка(СписокУсловноеОформление, ПутиКДанным, ИменаПолей)
	
	СписокУсловноеОформление.Элементы.Очистить();
	
	// Надпись "Обеспечен на складе / В резерве" в поле "Состояние"
	#Область ЭлементОформления
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Надпись ""Обеспечен на складе / В резерве"" в поле ""Состояние""'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаПолей.Состояние);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутиКДанным.ЗарезервированоИОбеспеченоОдновременно);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Обеспечен на складе / В резерве'"));
	#КонецОбласти
	
	// Надпись "<не определена>" в поле "Дата поступления", если не установлен основной способ обеспечения, не заполнен календарь или не установлена дата следующей поставки по графику
	#Область ЭлементОформления
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Надпись ""<не определена>"" в поле ""Дата поступления"", если не установлен основной способ обеспечения, не заполнен календарь или не установлена дата следующей поставки по графику'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаПолей.ДатаПоступления);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутиКДанным.Состояние);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.РаспределениеЗапасовСостояния.Обеспечить;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутиКДанным.ДатаПоступления);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не определена>'"));
	#КонецОбласти
	
	// Подсветка даты поступления если не заполнен календарь или не установлена дата следующей поставки по графику
	#Область ЭлементОформления
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Подсветка даты поступления и заказа на поступления, если не установлен основной способ обеспечения, не заполнен календарь или не установлена дата следующей поставки по графику'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаПолей.ДатаПоступления);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутиКДанным.Состояние);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.РаспределениеЗапасовСостояния.Обеспечить;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутиКДанным.ДатаПоступления);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);
	#КонецОбласти
	
	// Надпись "<как можно раньше>" в поле "Желаемая дата отгрузки", если она не установлена.
	#Область ЭлементОформления
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Надпись ""<как можно раньше>"" в поле ""Желаемая дата отгрузки"", если она не установлена'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаПолей.ЖелаемаяДатаОтгрузки);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутиКДанным.ЖелаемаяДатаОтгрузки);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<как можно раньше>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	#КонецОбласти
	
	// Подсветка даты поступления, если не исполнима дата отгрузки (дата поступления позже желаемой даты отгрузки).
	#Область ЭлементОформления
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Подсветка даты поступления, если не исполнима дата отгрузки (дата поступления позже желаемой даты отгрузки)'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаПолей.ДатаПоступления);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутиКДанным.ДатаОтгрузкиИсполнима);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);
	#КонецОбласти
	
	// Подсветка даты поступления и заказа на поступление, если плановая дата не определена.
	#Область ЭлементОформления
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Подсветка даты поступления и заказа на поступление, если плановая дата не определена'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаПолей.ДатаПоступления);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутиКДанным.Состояние);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.РаспределениеЗапасовСостояния.Обеспечить;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутиКДанным.ДатаПоступления);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);
	#КонецОбласти
	
	// Текст "Поступило" если состояние "Обеспечен на складе" или "В резерве".
	#Область ЭлементОформления
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Текст ""Поступило"" если состояние ""Обеспечен на складе"" или ""В резерве""'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаПолей.ДатаПоступления);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутиКДанным.Состояние);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокСостоянийВНаличии = Новый СписокЗначений();
	СписокСостоянийВНаличии.Добавить(Перечисления.РаспределениеЗапасовСостояния.ВРезерве);
	СписокСостоянийВНаличии.Добавить(Перечисления.РаспределениеЗапасовСостояния.ОбеспеченНаСкладе);
	ОтборЭлемента.ПравоеЗначение = СписокСостоянийВНаличии;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Поступило'"));
	#КонецОбласти
	// Скрытие заказа на поступление, если это необеспеченная строка.
	#Область ЭлементОформления
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Скрытие заказа на поступление, если это необеспеченная строка'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаПолей.ЗаказНаПоступление);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутиКДанным.Состояние);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.РаспределениеЗапасовСостояния.Обеспечить;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	#КонецОбласти
	
	// Скрытие способа обеспечения потребностей, если это обеспеченная строка.
	#Область ЭлементОформления
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Скрытие способа обеспечения потребностей, если это обеспеченная строка'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаПолей.СпособОбеспеченияНаименование);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутиКДанным.Состояние);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.РаспределениеЗапасовСостояния.Обеспечить;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	#КонецОбласти
	
	// Надпись "<способ обеспечения не задан>".
	#Область ЭлементОформления
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Надпись ""<способ обеспечения не задан>""'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаПолей.СпособОбеспеченияНаименование);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутиКДанным.СпособОбеспечения);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<способ обеспечения не задан>'"));
	#КонецОбласти
	
	// Надпись "Обеспечен в подразделении" для работ.
	#Область ЭлементОформления
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Надпись ""Обеспечен в подразделении"" для работ'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаПолей.Состояние);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутиКДанным.Состояние);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.РаспределениеЗапасовСостояния.ОбеспеченНаСкладе;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутиКДанным.ТипНоменклатуры);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Работа;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Обеспечен в подразделении'"));
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура УстановитьИндивидуальноеУсловноеОформлениеНабора()
	
	// Подсветка состояния, если можно отгрузить из наличия, с учетом резервов других заказов.
	#Область ЭлементОформления
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Подсветка состояния, если можно отгрузить из наличия, с учетом резервов других заказов.'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НаборСостояние");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Набор.МожноОтгрузитьИзНаличия");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);
	#КонецОбласти
	
	// Подсветка состояния, если можно отгрузить из доступного остатка.
	#Область ЭлементОформления
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Подсветка состояния, если можно отгрузить из доступного остатка.'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НаборСостояние");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Набор.МожноОтгрузитьИзДоступногоОстатка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПоложительногоЗначения);
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура УстановитьИндивидуальноеУсловноеОформлениеСпискаЗаказы()
	
	СписокУсловноеОформление = СписокЗаказы.КомпоновщикНастроек.Настройки.УсловноеОформление;
	
	// Скрытие поля заказ на отгрузку для детальных записей.
	#Область ЭлементОформления
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Скрытие поля ""Заказ на отгрузку"" для детальных записей'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ЗаказНаОтгрузку");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СистемныеПоля.Уровень");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОбщееУсловноеОформлениеСписков()
	
	ПутиКДанным = Новый Структура(
		"ДатаПоступления,
		|Состояние,
		|ЗарезервированоИОбеспеченоОдновременно,
		|ЖелаемаяДатаОтгрузки,
		|ДатаОтгрузкиИсполнима,
		|СпособОбеспечения,
		|ТипНоменклатуры");
	ПутиКДанным.ДатаПоступления = "Набор.ДатаПоступления";
	ПутиКДанным.Состояние = "Набор.Состояние";
	ПутиКДанным.ЖелаемаяДатаОтгрузки = "Набор.ЖелаемаяДатаОтгрузки";
	ПутиКДанным.ДатаОтгрузкиИсполнима = "Набор.ДатаОтгрузкиИсполнима";
	ПутиКДанным.СпособОбеспечения = "Набор.СпособОбеспечения";
	ПутиКДанным.ЗарезервированоИОбеспеченоОдновременно = "Набор.ЗарезервированоИОбеспеченоОдновременно";
	ПутиКДанным.ТипНоменклатуры = "Набор.ТипНоменклатуры";
	
	ИменаПолей = Новый Структура("ДатаПоступления,ЖелаемаяДатаОтгрузки,ЗаказНаПоступление,СпособОбеспеченияНаименование,Состояние");
	ИменаПолей.ДатаПоступления = Элементы.НаборДатаПоступления.Имя;
	ИменаПолей.ЖелаемаяДатаОтгрузки = Элементы.НаборЖелаемаяДатаОтгрузки.Имя;
	ИменаПолей.ЗаказНаПоступление = Элементы.НаборЗаказНаПоступление.Имя;
	ИменаПолей.СпособОбеспеченияНаименование = Элементы.НаборСпособОбеспеченияНаименование.Имя;
	ИменаПолей.Состояние = Элементы.НаборСостояние.Имя;
	
	УстановитьУсловноеОформлениеСписка(УсловноеОформление, ПутиКДанным, ИменаПолей);
	
	ПутиКДанным.ДатаПоступления = "ДатаПоступления";
	ПутиКДанным.Состояние = "Состояние";
	ПутиКДанным.ЖелаемаяДатаОтгрузки = "ЖелаемаяДатаОтгрузки";
	ПутиКДанным.ДатаОтгрузкиИсполнима = "ДатаОтгрузкиИсполнима";
	ПутиКДанным.СпособОбеспечения = "СпособОбеспечения";
	ПутиКДанным.ЗарезервированоИОбеспеченоОдновременно = "ЗарезервированоИОбеспеченоОдновременно";
	ПутиКДанным.ТипНоменклатуры = "ТипНоменклатуры";
	
	ИменаПолей.ДатаПоступления = "ДатаПоступления";
	ИменаПолей.ЖелаемаяДатаОтгрузки = "ЖелаемаяДатаОтгрузки";
	ИменаПолей.ЗаказНаПоступление = "ЗаказНаПоступление";
	ИменаПолей.СпособОбеспеченияНаименование = "СпособОбеспеченияНаименование";
	ИменаПолей.Состояние = "Состояние";
	
	УстановитьУсловноеОформлениеСписка(Список.КомпоновщикНастроек.Настройки.УсловноеОформление, ПутиКДанным, ИменаПолей);
	УстановитьУсловноеОформлениеСписка(СписокЗаказы.КомпоновщикНастроек.Настройки.УсловноеОформление, ПутиКДанным, ИменаПолей);
	
КонецПроцедуры

#КонецОбласти

#Область Видимость

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеВидимостью(ИмяЭлемента, Форма, КонтекстИспользования)
	
	Элементы = Форма.Элементы;
	Если ИмяЭлемента = Неопределено Тогда
		
		Если КонтекстИспользования = "ЗАКАЗ" Или КонтекстИспользования = "ТАБЛИЦА" Тогда
			
			Если ЗначениеЗаполнено(Форма.Параметры.Заказ) Тогда
				Форма.Заголовок = СтрЗаменить(НСтр("ru = 'Состояние обеспечения: %Заказ%'"), "%Заказ%", Форма.Параметры.Заказ);
				Если КонтекстИспользования = "ТАБЛИЦА" Тогда
					Форма.Заголовок = Форма.Заголовок + " (*)";
				КонецЕсли;
			Иначе
				Форма.Заголовок = СтрЗаменить(НСтр("ru = 'Состояние обеспечения: %ТипЗаказа% (новый)'"), "%ТипЗаказа%", ТипЗнч(Форма.Параметры.Заказ));
			КонецЕсли;
			
		ИначеЕсли КонтекстИспользования = "СПИСОКЗАКАЗОВ" Тогда
			
			Заголовок = НСтр("ru = 'Состояние обеспечения заказов (%1)'");
			Форма.Заголовок = СтрШаблон(Заголовок, Форма.Параметры.Заказы.Количество());
			
		ИначеЕсли КонтекстИспользования = "РАЗДЕЛ" Тогда
			
			Форма.Заголовок = НСтр("ru = 'Состояние обеспечения заказов'");
			
		КонецЕсли;
		
		МассивВсехРеквизитов = Новый Массив();
		
		МассивВсехРеквизитов.Добавить(Элементы.ПодвалСписка.Имя);
		МассивВсехРеквизитов.Добавить(Элементы.ГруппаНастройкиСписок.Имя);
		МассивВсехРеквизитов.Добавить(Элементы.Список.Имя);
		МассивВсехРеквизитов.Добавить(Элементы.СтандартныеКомандыСписка.Имя);
		МассивВсехРеквизитов.Добавить(Элементы.Состояния.Имя);
		МассивВсехРеквизитов.Добавить(Элементы.Отгрузить.Имя);
		МассивВсехРеквизитов.Добавить(Элементы.ОтгрузитьДоступное.Имя);
		МассивВсехРеквизитов.Добавить(Элементы.НеОбеспечивать.Имя);
		МассивВсехРеквизитов.Добавить(Элементы.РезервироватьНаСкладе.Имя);
		МассивВсехРеквизитов.Добавить(Элементы.ГруппаПользовательскиеНастройки.Имя);
		МассивВсехРеквизитов.Добавить(Элементы.СписокЗаказы.Имя);
		МассивВсехРеквизитов.Добавить(Элементы.СтандартныеКомандыСпискаЗаказы.Имя);
		МассивВсехРеквизитов.Добавить(Элементы.ГруппаОтборы.Имя);
		МассивВсехРеквизитов.Добавить(Элементы.Набор.Имя);
		МассивВсехРеквизитов.Добавить(Элементы.СтандартныеКомандыНабора.Имя);
		МассивВсехРеквизитов.Добавить(Элементы.СписокОбособленно.Имя);
		МассивВсехРеквизитов.Добавить(Элементы.СписокЗаказыОбособленно.Имя);
		МассивРеквизитовКонтекста = Новый Массив();
		
		Если КонтекстИспользования = "ЗАКАЗ" Тогда
			
			МассивРеквизитовКонтекста.Добавить(Элементы.ПодвалСписка.Имя);
			МассивРеквизитовКонтекста.Добавить(Элементы.ГруппаНастройкиСписок.Имя);
			МассивРеквизитовКонтекста.Добавить(Элементы.Список.Имя);
			МассивРеквизитовКонтекста.Добавить(Элементы.СтандартныеКомандыСписка.Имя);
			МассивРеквизитовКонтекста.Добавить(Элементы.Состояния.Имя);
			Если Форма.КомандыСпискаВидимость Тогда
				МассивРеквизитовКонтекста.Добавить(Элементы.Отгрузить.Имя);
				МассивРеквизитовКонтекста.Добавить(Элементы.ОтгрузитьДоступное.Имя);
				МассивРеквизитовКонтекста.Добавить(Элементы.НеОбеспечивать.Имя);
				Если Форма.ЭтоДокумент Тогда
					МассивРеквизитовКонтекста.Добавить(Элементы.РезервироватьНаСкладе.Имя);
				КонецЕсли;
			КонецЕсли;
			Если Форма.ИспользоватьОбособленноеОбеспечение Тогда
				МассивРеквизитовКонтекста.Добавить(Элементы.СписокОбособленно.Имя);
			КонецЕсли;
			
		ИначеЕсли КонтекстИспользования = "РАЗДЕЛ" Тогда
			
			МассивРеквизитовКонтекста.Добавить(Элементы.ГруппаПользовательскиеНастройки.Имя);
			МассивРеквизитовКонтекста.Добавить(Элементы.СписокЗаказы.Имя);
			МассивРеквизитовКонтекста.Добавить(Элементы.СтандартныеКомандыСпискаЗаказы.Имя);
			Если Форма.КомандыСпискаВидимость Тогда
				МассивРеквизитовКонтекста.Добавить(Элементы.РезервироватьНаСкладе.Имя);
			КонецЕсли;
			МассивРеквизитовКонтекста.Добавить(Элементы.ГруппаОтборы.Имя);
			Если Форма.ИспользоватьОбособленноеОбеспечение Тогда
				МассивРеквизитовКонтекста.Добавить(Элементы.СписокЗаказыОбособленно.Имя);
			КонецЕсли;
			
		ИначеЕсли КонтекстИспользования = "СПИСОКЗАКАЗОВ" Тогда
			
			МассивРеквизитовКонтекста.Добавить(Элементы.ГруппаПользовательскиеНастройки.Имя);
			МассивРеквизитовКонтекста.Добавить(Элементы.СписокЗаказы.Имя);
			МассивРеквизитовКонтекста.Добавить(Элементы.СтандартныеКомандыСпискаЗаказы.Имя);
			МассивРеквизитовКонтекста.Добавить(Элементы.Состояния.Имя);
			Если Форма.КомандыСпискаВидимость Тогда
				МассивРеквизитовКонтекста.Добавить(Элементы.РезервироватьНаСкладе.Имя);
			КонецЕсли;
			Если Форма.ИспользоватьОбособленноеОбеспечение Тогда
				МассивРеквизитовКонтекста.Добавить(Элементы.СписокЗаказыОбособленно.Имя);
			КонецЕсли;
			
		ИначеЕсли КонтекстИспользования = "ТАБЛИЦА" Тогда
			
			МассивРеквизитовКонтекста.Добавить(Элементы.Состояния.Имя);
			МассивРеквизитовКонтекста.Добавить(Элементы.Набор.Имя);
			МассивРеквизитовКонтекста.Добавить(Элементы.СтандартныеКомандыНабора.Имя);
			Если Форма.КомандыСпискаВидимость Тогда
				МассивРеквизитовКонтекста.Добавить(Элементы.Отгрузить.Имя);
				МассивРеквизитовКонтекста.Добавить(Элементы.ОтгрузитьДоступное.Имя);
				МассивРеквизитовКонтекста.Добавить(Элементы.НеОбеспечивать.Имя);
				Если Форма.ЭтоДокумент
					И Не ЭтоСтатусНаСогласовании(
						Форма.Параметры.ДоступныеОстаткиПараметрыДокумента.ДанныеПрограммногоОбъекта.Объект.Статус) Тогда
					МассивРеквизитовКонтекста.Добавить(Элементы.РезервироватьНаСкладе.Имя);
				КонецЕсли;
			КонецЕсли;
			Если Форма.ИспользоватьОбособленноеОбеспечение Тогда
				МассивРеквизитовКонтекста.Добавить(Элементы.СписокЗаказыОбособленно.Имя);
			КонецЕсли;
			
		КонецЕсли;
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьВидимостьЭлементовПоМассиву(Элементы, МассивВсехРеквизитов, МассивРеквизитовКонтекста);
		
	КонецЕсли;
	
	Если ИмяЭлемента = Неопределено Или ИмяЭлемента = Элементы.НадписьКТекущемуЗаказу.Имя Тогда
		
		Элементы.СтраницыЗаказЛибоВсеЗаказы.ТекущаяСтраница = Элементы.СтраницыЗаказЛибоВсеЗаказы.ПодчиненныеЭлементы.СтраницаЗаказ;
		Элементы.СписокЗаказНаОтгрузку.Видимость = Ложь;
		Элементы.Отгрузить.Доступность = Не Форма.ТолькоПросмотр;
		Элементы.ОтгрузитьДоступное.Доступность = Не Форма.ТолькоПросмотр;
		Элементы.НеОбеспечивать.Доступность = Не Форма.ТолькоПросмотр;
		Элементы.РезервироватьНаСкладе.Доступность = Не Форма.ТолькоПросмотр;
		
	КонецЕсли;
	
	Если ИмяЭлемента = Элементы.НадписьПодробнее.Имя Тогда
		
		Элементы.СтраницыЗаказЛибоВсеЗаказы.ТекущаяСтраница = Элементы.СтраницыЗаказЛибоВсеЗаказы.ПодчиненныеЭлементы.СтраницаЗаказы;
		Элементы.СписокЗаказНаОтгрузку.Видимость = Истина;
		Элементы.Отгрузить.Доступность = Ложь;
		Элементы.ОтгрузитьДоступное.Доступность = Ложь;
		Элементы.НеОбеспечивать.Доступность = Ложь;
		Элементы.РезервироватьНаСкладе.Доступность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаСостояния(Состояния)
	
	Все = Истина;
	Представления = Новый Массив();
	Для Каждого Элемент Из Состояния Цикл
		Все = Все И Элемент.Пометка;
		Если Элемент.Пометка Тогда
			Представления.Добавить(Элемент.Представление);
		КонецЕсли;
	КонецЦикла;
	Возврат ?(Все, НСтр("ru = 'Все'"), СтрСоединить(Представления, ", "));
	
КонецФункции

#КонецОбласти

#Область ПереключениеСтраниц

&НаСервере
Процедура ЗаполнитьЗаказыДляПроверкиЗаданийПриСозданииНаСервере()
	
	ЗаказыДляПроверкиЗаданий.Очистить();
	Если ДосчитыватьРегистрРегламентнымЗаданием Тогда
		Если Параметры.КонтекстИспользования = "ЗАКАЗ" Тогда
			ЗаказыДляПроверкиЗаданий.Добавить(Параметры.Заказ);
		ИначеЕсли Параметры.КонтекстИспользования = "ТАБЛИЦА" Тогда
			ЗаказыДляПроверкиЗаданий.Добавить(Параметры.Заказ);
		ИначеЕсли Параметры.КонтекстИспользования = "СПИСОКЗАКАЗОВ" Тогда
			ЗаказыДляПроверкиЗаданий.ЗагрузитьЗначения(Параметры.Заказы);
		КонецЕсли;
	КонецЕсли;
	Если ЗаказыДляПроверкиЗаданий.Количество() > 0 И Не ЕстьЗаданияПоЗаказам(ЗаказыДляПроверкиЗаданий) Тогда
		ЗаказыДляПроверкиЗаданий.Очистить();
	КонецЕсли;
	ЕстьЗадания = ЗаказыДляПроверкиЗаданий.Количество() > 0;
	Элементы.Страницы.ТекущаяСтраница = ?(ЕстьЗадания, Элементы.СтраницаОжидание, Элементы.СтраницаРабочееМесто);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаказыДляПроверкиЗаданийПослеРезервированияИзДругихЗаказов(ОбработанныеЗаказы)
	
	ЗаказыДляПроверкиЗаданий.Очистить();
	Если ДосчитыватьРегистрРегламентнымЗаданием Тогда
		ЗаказыДляПроверкиЗаданий.ЗагрузитьЗначения(ОбработанныеЗаказы);
	КонецЕсли;
	Если ЗаказыДляПроверкиЗаданий.Количество() > 0 И Не ЕстьЗаданияПоЗаказам(ЗаказыДляПроверкиЗаданий) Тогда
		ЗаказыДляПроверкиЗаданий.Очистить();
	КонецЕсли;
	ЕстьЗадания = ЗаказыДляПроверкиЗаданий.Количество() > 0;
	Элементы.Страницы.ТекущаяСтраница = ?(ЕстьЗадания, Элементы.СтраницаОжидание, Элементы.СтраницаРабочееМесто);
	
	ЭтоОжиданиеРезервированияИзДругихЗаказов = Истина;
	Если ЗаказыДляПроверкиЗаданий.Количество() > 0 Тогда
		
		ИнтервалПереключитьСтраницы = 1;
		ПодключитьОбработчикОжидания("Подключаемый_ПереключитьСтраницы", ИнтервалПереключитьСтраницы, Истина);
		
	Иначе
		
		ОбновитьСписок();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПереключитьСтраницы()
	
	УстановитьВидимостьСтраниц();
	Если ЗаказыДляПроверкиЗаданий.Количество() > 0 Тогда
		ИнтервалПереключитьСтраницы = ИнтервалПереключитьСтраницы + 1;
		ПодключитьОбработчикОжидания("Подключаемый_ПереключитьСтраницы", ИнтервалПереключитьСтраницы, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьСтраниц()
	
	Если Не ЕстьЗаданияПоЗаказам(ЗаказыДляПроверкиЗаданий) Тогда
		ЗаказыДляПроверкиЗаданий.Очистить();
	КонецЕсли;
	ЕстьЗадания = ЗаказыДляПроверкиЗаданий.Количество() > 0;
	Элементы.Страницы.ТекущаяСтраница = ?(ЕстьЗадания, Элементы.СтраницаОжидание, Элементы.СтраницаРабочееМесто);
	Если Не ЕстьЗадания Тогда
		ОбновитьСписок();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьЗаданияПоЗаказам(ЗаказыДляПроверкиЗаданий)
	
	Возврат ОбеспечениеВДокументахСервер.ЕстьЗаданияПоЗаказам(ЗаказыДляПроверкиЗаданий);
	
КонецФункции

#КонецОбласти

#Область НастройкаСписков

&НаСервере
Процедура УправлениеПараметрамиСписков(ИмяЭлемента, ДополнительныеПараметры = Неопределено)
	
	ПодменятьТекущийЗаказ = ДополнительныеПараметры <> Неопределено;
	
	ПараметрыЗапроса = ПараметрыЗапроса();
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура("Номенклатура,Характеристика,Склад");
	КонецЕсли;
	
	ДоступныеТипыЗаказов = ДоступныеТипыЗаказов();

	// Установка обязательных фиксированных парметров списков.
	Если ИмяЭлемента = Неопределено Тогда
		
		Если КонтекстИспользования = "РАЗДЕЛ" Тогда
			
			СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
			ЗаполнитьЗначенияСвойств(СвойстваСписка, СписокЗаказы);
			СвойстваСписка.ТекстЗапроса = ТекстЗапроса(Элементы.СписокЗаказы.Имя, ПодменятьТекущийЗаказ);
			ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.СписокЗаказы, СвойстваСписка);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокЗаказы, "ИсключаемыеЗаказы", Новый Массив());
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокЗаказы, "НадписьЗаказ", ПараметрыЗапроса.НадписьЗаказ);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокЗаказы, "НачалоЭтогоДня", ПараметрыЗапроса.НачалоЭтогоДня);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокЗаказы, "ДоступныеТипыЗаказов", ДоступныеТипыЗаказов);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокЗаказы, "НачалоТекущегоДня", НачалоДня(ТекущаяДатаСеанса()));
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокЗаказы, "ТекстКОбеспечениюИРезервироватьПоМереПоступления",
				ПараметрыЗапроса.ТекстКОбеспечениюИРезервироватьПоМереПоступления);
		КонецЕсли;
		
		Если КонтекстИспользования = "СПИСОКЗАКАЗОВ" Тогда
			СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
			ЗаполнитьЗначенияСвойств(СвойстваСписка, СписокЗаказы);
			СвойстваСписка.ТекстЗапроса = ТекстЗапроса(Элементы.СписокЗаказы.Имя, ПодменятьТекущийЗаказ);
			ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.СписокЗаказы, СвойстваСписка);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокЗаказы, "ИсключаемыеЗаказы", Новый Массив());
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокЗаказы, "НадписьЗаказ", ПараметрыЗапроса.НадписьЗаказ);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокЗаказы, "НачалоЭтогоДня", ПараметрыЗапроса.НачалоЭтогоДня);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокЗаказы, "ЗаказыНаОтгрузку", ПараметрыЗапроса.ЗаказыНаОтгрузку);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокЗаказы, "ДоступныеТипыЗаказов", ДоступныеТипыЗаказов);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокЗаказы, "НачалоТекущегоДня", НачалоДня(ТекущаяДатаСеанса()));
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокЗаказы, "ТекстКОбеспечениюИРезервироватьПоМереПоступления",
				ПараметрыЗапроса.ТекстКОбеспечениюИРезервироватьПоМереПоступления);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяЭлемента = Неопределено
			Или ИмяЭлемента = Элементы.НадписьКТекущемуЗаказу.Имя
			Или ИмяЭлемента = Элементы.НадписьПодробнее.Имя Тогда
		
		Если КонтекстИспользования = "ЗАКАЗ" Тогда
			
			СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
			ЗаполнитьЗначенияСвойств(СвойстваСписка, Список);
			СвойстваСписка.ТекстЗапроса = ТекстЗапроса(Элементы.Список.Имя, ПодменятьТекущийЗаказ);
			ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.Список, СвойстваСписка);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ИсключаемыеЗаказы", Новый Массив());
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "Состояния", ПараметрыЗапроса.Состояния);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "НадписьТекущийЗаказ", ПараметрыЗапроса.НадписьТекущийЗаказ);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "НадписьЗаказ",        ПараметрыЗапроса.НадписьЗаказ);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "НачалоЭтогоДня",      ПараметрыЗапроса.НачалоЭтогоДня);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ТекущийЗаказ",        ПараметрыЗапроса.ТекущийЗаказ);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "НадписьТекущийЗаказ", ПараметрыЗапроса.НадписьТекущийЗаказ);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ДоступныеТипыЗаказов", ДоступныеТипыЗаказов);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "НачалоТекущегоДня", НачалоДня(ТекущаяДатаСеанса()));
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ТекстКОбеспечениюИРезервироватьПоМереПоступления",
				ПараметрыЗапроса.ТекстКОбеспечениюИРезервироватьПоМереПоступления);
			
			Список.КомпоновщикНастроек.ФиксированныеНастройки.Порядок.Элементы.Очистить();
			ПоляПорядка = "ЖелаемаяДатаОтгрузки,ЗаказНаОтгрузку,Номенклатура,Характеристика,Склад,Порядок,ДатаПоступления,ЗаказНаПоступление";
			ПоляПорядка = СтрРазделить(ПоляПорядка, ",");
			Для Каждого ПолеПорядка Из ПоляПорядка Цикл
				ЭлементПорядка = Список.КомпоновщикНастроек.ФиксированныеНастройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
				ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных(ПолеПорядка);
				ЭлементПорядка.Использование = Истина;
				ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Отборы в шапке формы.
	Если ИмяЭлемента = Неопределено Или ИмяЭлемента = Элементы.Склад.Имя Тогда
		
		Если КонтекстИспользования = "РАЗДЕЛ" Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокЗаказы, "Склад", Склад, ЗначениеЗаполнено(Склад));
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяЭлемента = Неопределено Или ИмяЭлемента = Элементы.Менеджер.Имя Тогда
		
		Если КонтекстИспользования = "РАЗДЕЛ" Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокЗаказы, "Менеджер", Менеджер, ЗначениеЗаполнено(Менеджер));
		КонецЕсли;
		
	КонецЕсли;
	Если ИмяЭлемента = Неопределено Или ИмяЭлемента = Элементы.Клиент.Имя Тогда
		
		Если КонтекстИспользования = "РАЗДЕЛ" Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокЗаказы, "Клиент", Клиент, ЗначениеЗаполнено(Клиент));
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяЭлемента = Неопределено Или ИмяЭлемента = Элементы.Состояния.Имя Тогда
		
		Если КонтекстИспользования = "ЗАКАЗ" Тогда
				
					ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список,       "Состояния",        ПараметрыЗапроса.Состояния);
					ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список,       "Ожидается",        ПараметрыЗапроса.Ожидается);
					ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список,       "ОжидаетсяНеВСрок", ПараметрыЗапроса.ОжидаетсяНеВСрок);
		КонецЕсли;
		
		Если КонтекстИспользования = "РАЗДЕЛ" Или КонтекстИспользования = "СПИСОКЗАКАЗОВ" Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокЗаказы, "Состояния",        ПараметрыЗапроса.Состояния);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокЗаказы, "Ожидается",        ПараметрыЗапроса.Ожидается);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокЗаказы, "ОжидаетсяНеВСрок", ПараметрыЗапроса.ОжидаетсяНеВСрок);
		КонецЕсли;
		
	КонецЕсли;
	
	// Нажатие на гиперссылку в подвале формы.
	Если ИмяЭлемента = Неопределено
			Или ИмяЭлемента = Элементы.НадписьКТекущемуЗаказу.Имя
			Или ИмяЭлемента = Элементы.НадписьПодробнее.Имя Тогда
		
		Если КонтекстИспользования = "ЗАКАЗ" Тогда
			Использование = ИмяЭлемента = Неопределено Или ИмяЭлемента = Элементы.НадписьКТекущемуЗаказу.Имя;
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
				Список,
				"ЗаказНаОтгрузку",
				ПараметрыЗапроса.ЗаказНаОтгрузку,
				Использование);
			
			Использование = ИмяЭлемента = Элементы.НадписьПодробнее.Имя;
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
				Список,
				"Номенклатура",
				ДополнительныеПараметры.Номенклатура,
				Использование);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
				Список,
				"Характеристика",
				ДополнительныеПараметры.Характеристика,
				Использование);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
				Список,
				"Склад",
				ДополнительныеПараметры.Склад,
				Использование);
		КонецЕсли;
		
	КонецЕсли;
	
	Если КонтекстИспользования = "ТАБЛИЦА" Тогда
		НаборОбновить(ПараметрыЗапроса, Параметры.АдресТаблицыДвижений);
	ИначеЕсли ИмяЭлемента = Неопределено И КонтекстИспользования = "ЗАКАЗ" Тогда
		УстановитьПривилегированныйРежим(Истина);
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("ТекущийЗаказ", ПараметрыЗапроса.ТекущийЗаказ);
		Запрос.Текст =
			"ВЫБРАТЬ
			|КОЛИЧЕСТВО(*) КАК ВсегоЗаписей
			|ИЗ
			|	РегистрСведений.РаспределениеЗапасов КАК Таблица
			|ГДЕ
			|	Таблица.ЗаказНаОтгрузку = &ТекущийЗаказ
			|		И Таблица.Состояние В(
			|			ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченНаСкладе),
			|			ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченКДате),
			|			ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.Обеспечить),
			|			ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ВРезерве),
			|			ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.НеОбеспечивать),
			|			ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаетсяПоНеподтвержденномуЗаказу))
			|;
			|///////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИСТИНА КАК ЕстьОтгрузить
			|ИЗ
			|	РегистрНакопления.ЗапасыИПотребности КАК Таблица
			|ГДЕ
			|	Таблица.Регистратор = &ТекущийЗаказ
			|		И Таблица.ОтгружаемыйЗаказ = &ТекущийЗаказ
			|		И Таблица.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Расход)
			|		И Таблица.ВНаличии > 0";
		ВсегоСтрокВСпискеБезОтборов = 0;
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		Выборка = РезультатЗапроса[0].Выбрать();
		Если Выборка.Следующий() Тогда
			ВсегоСтрокВСпискеБезОтборов = Выборка.ВсегоЗаписей;
		КонецЕсли;
		
		Выборка = РезультатЗапроса[1].Выбрать();
		Если Выборка.Следующий() Тогда
			ВсегоСтрокВСпискеБезОтборов = ВсегоСтрокВСпискеБезОтборов + 1; // достаточно для понимания, что все строки нельзя выбрать в списке.
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДоступныеТипыЗаказов()
	
	ДоступныеТипы = Новый Массив();
	ВсеТипыЗаказов = Метаданные.ОпределяемыеТипы.ОжидаемаяОтгрузка.Тип.Типы();
	Для Каждого Элемент Из ВсеТипыЗаказов Цикл
		Если ПравоДоступа("Чтение", Метаданные.НайтиПоТипу(Элемент)) Тогда
			ДоступныеТипы.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
		
	Возврат ДоступныеТипы;
	
КонецФункции

&НаСервере
Функция ТекстЗапроса(ИмяЭлемента, ПодменятьТекущийЗаказ = Ложь)
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА СостояниеЗаказа.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ЗарезервированПриПоступлении)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ВРезерве)
		|		КОГДА СостояниеЗаказа.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченНаСкладе)
		|					И СостояниеЗаказа.Зарезервировано > 0 ТОГДА
		|			ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ВРезерве)
		|		ИНАЧЕ СостояниеЗаказа.Состояние
		|	КОНЕЦ КАК Состояние,
		|	СостояниеЗаказа.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченНаСкладе)
		|		И СостояниеЗаказа.Зарезервировано > 0 И СостояниеЗаказа.Обеспечено > 0 КАК ЗарезервированоИОбеспеченоОдновременно,
		|	СостояниеЗаказа.Номенклатура                                КАК Номенклатура,
		|	СостояниеЗаказа.Номенклатура.ТипНоменклатуры                КАК ТипНоменклатуры,
		|	СостояниеЗаказа.Характеристика                              КАК Характеристика,
		|	СостояниеЗаказа.Склад                                       КАК Склад,
		|	СостояниеЗаказа.Назначение                                  КАК Назначение,
		|	СостояниеЗаказа.ЖелаемаяДатаОтгрузки                        КАК ЖелаемаяДатаОтгрузки,
		|	СостояниеЗаказа.ЗаказНаПоступление                          КАК ЗаказНаПоступление,
		|	СостояниеЗаказа.Зарезервировано + СостояниеЗаказа.Обеспечено + СостояниеЗаказа.НеОбеспечено КАК Количество,
		|	&ЗаказНаОтгрузкуПереопределяемый                            КАК ЗаказНаОтгрузку,
		|	РеестрДокументов.Партнер                                    КАК Клиент,
		|	РеестрДокументов.Ответственный                              КАК Менеджер,
		|	
		// Производные поля.
		|	СостояниеЗаказа.Номенклатура.ЕдиницаИзмерения                              КАК ЕдиницаИзмерения,
		|	СостояниеЗаказа.Назначение.Заказ                                           КАК ЗаказНазначения,
		|	СостояниеЗаказа.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Обособленно,
		|	
		// Поле Действие.
		|	ВЫБОР
		|		КОГДА СостояниеЗаказа.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ВРезерве)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
		|		КОГДА СостояниеЗаказа.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ЗарезервированПриПоступлении)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.РезервироватьПоМереПоступления)
		|		КОГДА СостояниеЗаказа.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.НеОбеспечивать)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется)
		|		КОГДА ОжидаемаяОтгрузка.КОбеспечениюБезРезерва > 0
		|				И ОжидаемаяОтгрузка.РезервироватьПоМереПоступления + ОжидаемаяОтгрузка.ОтложитьРезервирование > 0
		|			ТОГДА ВЫРАЗИТЬ(&ТекстКОбеспечениюИРезервироватьПоМереПоступления КАК СТРОКА(50))
		|		КОГДА ОжидаемаяОтгрузка.КОбеспечениюБезРезерва > 0
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.КОбеспечению)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.РезервироватьПоМереПоступления)
		|	КОНЕЦ КАК Действие,
		|	
		// Поле ДатаПоступления.
		|	ВЫБОР КОГДА СостояниеЗаказа.Состояние В(
		|					ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.Обеспечить),
		|					ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаетсяПоНеподтвержденномуЗаказу)) ТОГДА
		|				
		|				РасчетПереопределяемый.ПлановаяДатаПоставки
		|				
		|			ИНАЧЕ
		|				
		|				СостояниеЗаказа.ДатаПоступления
		|				
		|		КОНЕЦ КАК ДатаПоступления,
		|	
		// Поля Способа обеспечения.
		|	ЕСТЬNULL(ВЫРАЗИТЬ(&НадписьЗаказ КАК СТРОКА(5)) + "" / "" + ОсновнойСпособОбеспечения.Наименование, """")     КАК СпособОбеспеченияНаименование,
		|	ЕСТЬNULL(ОсновнойСпособОбеспечения.Ссылка, ЗНАЧЕНИЕ(Справочник.СпособыОбеспеченияПотребностей.ПустаяСсылка)) КАК СпособОбеспечения,
		|	
		// Поле ДатаОтгрузкиИсполнима.
		|	СостояниеЗаказа.ЖелаемаяДатаОтгрузки = ДАТАВРЕМЯ(1,1,1)
		|		ИЛИ ВЫБОР
		|				КОГДА СостояниеЗаказа.ЖелаемаяДатаОтгрузки < &НачалоТекущегоДня
		|					ТОГДА &НачалоТекущегоДня
		|				ИНАЧЕ СостояниеЗаказа.ЖелаемаяДатаОтгрузки
		|			КОНЕЦ
		|				>= ВЫБОР
		|						КОГДА СостояниеЗаказа.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченКДате)
		|							ТОГДА
		|								ВЫБОР
		|									КОГДА СостояниеЗаказа.ДатаПоступления < &НачалоТекущегоДня
		|										ТОГДА &НачалоТекущегоДня
		|									ИНАЧЕ СостояниеЗаказа.ДатаПоступления
		|								КОНЕЦ
		|						КОГДА СостояниеЗаказа.Состояние В(
		|								ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаетсяПоНеподтвержденномуЗаказу),
		|								ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.Обеспечить)) ТОГДА
		|							РасчетПереопределяемый.ПлановаяДатаПоставки
		|						ИНАЧЕ
		|							ДАТАВРЕМЯ(1,1,1)
		|					КОНЕЦ КАК ДатаОтгрузкиИсполнима,
		|	
		|	СостояниеЗаказа.ДатаПоступления КАК ДатаПоступленияДляУпорядочивания,
		|	СостояниеЗаказа.Состояние КАК СостояниеДляУпорядочивания,
		|	ЛОЖЬ КАК МожноОтгрузитьИзДоступногоОстатка,
		|	ЛОЖЬ КАК МожноОтгрузитьИзНаличия
		|ИЗ
		|	РегистрСведений.РаспределениеЗапасов КАК СостояниеЗаказа
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументов
		|		ПО РеестрДокументов.Ссылка = СостояниеЗаказа.ЗаказНаОтгрузку
		|		 И НЕ РеестрДокументов.ДополнительнаяЗапись
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеЗапасов КАК ОжидаемаяОтгрузка
		|		ПО ОжидаемаяОтгрузка.ЗаказНаОтгрузку = СостояниеЗаказа.ЗаказНаОтгрузку
		|		 И ОжидаемаяОтгрузка.ЖелаемаяДатаОтгрузки = СостояниеЗаказа.ЖелаемаяДатаОтгрузки
		|		 И ОжидаемаяОтгрузка.Номенклатура = СостояниеЗаказа.Номенклатура
		|		 И ОжидаемаяОтгрузка.Характеристика = СостояниеЗаказа.Характеристика
		|		 И ОжидаемаяОтгрузка.Склад = СостояниеЗаказа.Склад
		|		 И ОжидаемаяОтгрузка.Назначение = СостояниеЗаказа.Назначение
		|		 И ОжидаемаяОтгрузка.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаемаяОтгрузка)
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РасчетПереопределяемый ПО ИСТИНА
		|		
		|ГДЕ
		|	ВЫБОР
		|		КОГДА СостояниеЗаказа.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ЗарезервированПриПоступлении)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ВРезерве)
		|		КОГДА СостояниеЗаказа.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченНаСкладе)
		|				И СостояниеЗаказа.Зарезервировано > 0
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ВРезерве)
		|		ИНАЧЕ СостояниеЗаказа.Состояние
		|	КОНЕЦ В (&Состояния)
		|	И ТИПЗНАЧЕНИЯ(СостояниеЗаказа.ЗаказНаОтгрузку) В (&ДоступныеТипыЗаказов)
		|	И(СостояниеЗаказа.Состояние <> ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченКДате)
		|			И СостояниеЗаказа.Состояние <> ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаетсяПоНеподтвержденномуЗаказу)
		|		ИЛИ &Ожидается
		|		ИЛИ &ОжидаетсяНеВСрок
		|			И СостояниеЗаказа.ЖелаемаяДатаОтгрузки <> ДАТАВРЕМЯ(1, 1, 1)
		|			И СостояниеЗаказа.ДатаПоступления <> ДАТАВРЕМЯ(1, 1, 1)
		|			И ВЫБОР КОГДА СостояниеЗаказа.ЖелаемаяДатаОтгрузки < &НачалоТекущегоДня ТОГДА
		|						&НачалоТекущегоДня
		|					ИНАЧЕ
		|						СостояниеЗаказа.ЖелаемаяДатаОтгрузки
		|				КОНЕЦ < СостояниеЗаказа.ДатаПоступления)
		|	И НЕ СостояниеЗаказа.ЗаказНаОтгрузку В(&ИсключаемыеЗаказы)
		|{ГДЕ
		|	ВЫБОР
		|		КОГДА СостояниеЗаказа.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ЗарезервированПриПоступлении)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ВРезерве)
		|		КОГДА СостояниеЗаказа.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченНаСкладе)
		|				И СостояниеЗаказа.Зарезервировано > 0
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ВРезерве)
		|		ИНАЧЕ СостояниеЗаказа.Состояние
		|	КОНЕЦ КАК Состояние}";
	
	ПодстановкаЗаказНаОтгрузку = "СостояниеЗаказа.ЗаказНаОтгрузку";
	Если ПодменятьТекущийЗаказ Тогда
		
		ПодстановкаЗаказНаОтгрузку =
			"ВЫБОР КОГДА СостояниеЗаказа.ЗаказНаОтгрузку = &ТекущийЗаказ ТОГДА
			|					ВЫРАЗИТЬ(&НадписьТекущийЗаказ КАК СТРОКА(20))
			|			ИНАЧЕ
			|				СостояниеЗаказа.ЗаказНаОтгрузку
			|		КОНЕЦ";
		
	КонецЕсли;
	
	Если ИмяЭлемента = Элементы.Список.Имя Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|{ГДЕ
			|	СостояниеЗаказа.ЗаказНаОтгрузку = &ЗаказНаОтгрузку}
			|{ГДЕ
			|	СостояниеЗаказа.Номенклатура     = &Номенклатура
			|	И СостояниеЗаказа.Характеристика = &Характеристика
			|	И СостояниеЗаказа.Склад          = &Склад}";
		
	ИначеЕсли ИмяЭлемента = Элементы.СписокЗаказы.Имя Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|{ГДЕ
			|	&Склад = СостояниеЗаказа.Склад}
			|{ГДЕ
			|	&Менеджер = ЕСТЬNULL(РеестрДокументов.Ответственный, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))}
			|{ГДЕ
			|	&Клиент = ЕСТЬNULL(РеестрДокументов.Партнер, ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))}
			|{ГДЕ
			|	СостояниеЗаказа.ЗаказНаОтгрузку В(&ЗаказыНаОтгрузку)}";
			
	ИначеЕсли ИмяЭлемента = Элементы.Набор.Имя Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений.РаспределениеЗапасов", "ИмитацияОтражения");
		ТекстЗапроса = ТекстЗапроса + "
			|	И СостояниеЗаказа.ЗаказНаОтгрузку В(
			|		ВЫБРАТЬ РАЗЛИЧНЫЕ
			|			Движения.Заказ КАК ЗаказНаОтгрузку
			|		ИЗ
			|			ДвиженияПриЗаписи КАК Движения)
			|УПОРЯДОЧИТЬ ПО
			|	СостояниеДляУпорядочивания,
			|	Номенклатура,
			|	Характеристика,
			|	Склад,
			|	Назначение,
			|	ЗаказНаОтгрузку,
			|	ЖелаемаяДатаОтгрузки,
			|	ЗаказНаПоступление,
			|	ДатаПоступленияДляУпорядочивания";
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЗаказНаОтгрузкуПереопределяемый", ПодстановкаЗаказНаОтгрузку);
	
	Подстановки = ОбеспечениеВДокументахСервер.ПодстановкиПлановойДатыПоставки(
		"СостояниеЗаказа.Номенклатура",
		"СостояниеЗаказа.Характеристика",
		"СостояниеЗаказа.Склад",
		"&НачалоЭтогоДня",
		"СостояниеЗаказа.Состояние В(
		|	ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаетсяПоНеподтвержденномуЗаказу),
		|	ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.Обеспечить))");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РасчетПереопределяемый.ПлановаяДатаПоставки",       Подстановки.Поле);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЛЕВОЕ СОЕДИНЕНИЕ РасчетПереопределяемый ПО ИСТИНА", Подстановки.Соединения);
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапроса()
	
	ПараметрСостояния = Новый Массив;
	Ожидается = Ложь;
	ОжидаетсяНеВСрок = Ложь;
	Для Каждого Элемент Из ОтобранныеСостояния Цикл
		
		Если Элемент.Пометка Тогда
			
			ПараметрСостояния.Добавить(Элемент.Значение);
			Если Элемент.Значение = Перечисления.РаспределениеЗапасовСостояния.ОбеспеченКДате Тогда
				
				ПараметрСостояния.Добавить(Перечисления.РаспределениеЗапасовСостояния.ОжидаетсяПоНеподтвержденномуЗаказу);
				Ожидается        = Ожидается Или Элемент.Представление = НСтр("ru = 'Ожидается'");
				ОжидаетсяНеВСрок = ОжидаетсяНеВСрок Или Элемент.Представление = НСтр("ru = 'Ожидается не в срок'");
				
			КонецЕсли;
			Если Элемент.Значение = Перечисления.РаспределениеЗапасовСостояния.ВРезерве Тогда
				ПараметрСостояния.Добавить(Перечисления.РаспределениеЗапасовСостояния.ЗарезервированПриПоступлении);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("Состояния", ПараметрСостояния);
	ПараметрыЗапроса.Вставить("Ожидается", Ожидается);
	ПараметрыЗапроса.Вставить("ТекстКОбеспечениюИРезервироватьПоМереПоступления",
		НСтр("ru = 'К обеспечению / Резервировать по мере поступления'"));
	ПараметрыЗапроса.Вставить("ОжидаетсяНеВСрок", ОжидаетсяНеВСрок);
	ПараметрыЗапроса.Вставить("ТекущийЗаказ", Параметры.Заказ);
	ПараметрыЗапроса.Вставить("НадписьЗаказ", НСтр("ru = 'Заказ'"));
	ПараметрыЗапроса.Вставить("НачалоЭтогоДня", НачалоДня(ТекущаяДатаСеанса()));
	ПараметрыЗапроса.Вставить("НадписьТекущийЗаказ", НСтр("ru = 'Текущий заказ'"));
	ПараметрыЗапроса.Вставить("ЗаказНаОтгрузку", Параметры.Заказ);
	ПараметрыЗапроса.Вставить("ЗаказыНаОтгрузку", Параметры.Заказы);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_СписокПриАктивизацииСтроки()
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Результат = СписокПриАктивизацииСтрокиНаСервере(
			?(ТекущиеДанные.Свойство("Номенклатура"), ТекущиеДанные.Номенклатура, Неопределено),
			?(ТекущиеДанные.Свойство("Характеристика"), ТекущиеДанные.Характеристика, Неопределено),
			?(ТекущиеДанные.Свойство("Склад"), ТекущиеДанные.Склад, Неопределено),
			?(ТекущиеДанные.Свойство("Назначение"), ТекущиеДанные.Назначение, Неопределено),
			?(ТекущиеДанные.Свойство("ЕдиницаИзмерения"), ТекущиеДанные.ЕдиницаИзмерения, Неопределено));
			
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат);
		Элементы.НадписьТовар.Заголовок = Результат.НадписьТовар;
		ЭтоРабота = ТекущиеДанные.Свойство("ТипНоменклатуры")
			И ТекущиеДанные.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа");
		Элементы.ИтогВНаличии.Заголовок = ?(ЭтоРабота, НСтр("ru = 'В подразделении'"), НСтр("ru = 'На складе'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокПриАктивизацииСтрокиНаСервере(Номенклатура, Характеристика, Склад, Назначение, ЕдиницаИзмерения)
	
	ТекстыЗапросов = Новый Массив();
	ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ
		|	Таблица.Наименование КАК Наименование
		|ИЗ
		|	Справочник.Номенклатура КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Номенклатура");
	ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ
		|	Таблица.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Характеристика");
	ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ
		|	Таблица.Наименование КАК Наименование
		|ИЗ
		|	Справочник.Склады КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Склад");
	ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ
		|	Таблица.Наименование КАК Наименование
		|ИЗ
		|	Справочник.УпаковкиЕдиницыИзмерения КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &ЕдиницаИзмерения");
	ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ
		|	СУММА(Запасы.ВНаличииОстаток) КАК ВНаличии,
		|	СУММА(Запасы.ВНаличииОстаток + Запасы.ПоступитОстаток) КАК Поступит,
		|	СУММА(ВЫБОР
		|			КОГДА Запасы.Назначение В(
		|						ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка),
		|						&Назначение)
		|				ТОГДА
		|					ВЫБОР
		|						КОГДА Запасы.ВНаличииОстаток
		|								- Запасы.РезервироватьНаСкладеОстаток
		|								- Запасы.РезервироватьПоМереПоступленияОстаток > 0
		|							ТОГДА
		|								Запасы.ВНаличииОстаток
		|								- Запасы.РезервироватьНаСкладеОстаток
		|								- Запасы.РезервироватьПоМереПоступленияОстаток
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ДоступноСейчас,
		|	СУММА(ВЫБОР
		|			КОГДА Запасы.Назначение В(
		|						ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка),
		|						&Назначение)
		|				ТОГДА
		|					ВЫБОР
		|						КОГДА Запасы.ВНаличииОстаток
		|								+ Запасы.ПоступитОстаток
		|								- Запасы.РезервироватьНаСкладеОстаток
		|								- Запасы.РезервироватьПоМереПоступленияОстаток > 0
		|							ТОГДА
		|								Запасы.ВНаличииОстаток
		|								+ Запасы.ПоступитОстаток
		|								- Запасы.РезервироватьНаСкладеОстаток
		|								- Запасы.РезервироватьПоМереПоступленияОстаток
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ДоступноВсего
		|ИЗ
		|	РегистрНакопления.ЗапасыИПотребности.Остатки(,
		|		Номенклатура = &Номенклатура
		|		И Характеристика = &Характеристика
		|		И Склад = &Склад) КАК Запасы
		|СГРУППИРОВАТЬ ПО
		|	Запасы.Номенклатура,
		|	Запасы.Характеристика,
		|	Запасы.Склад");
	
	Запрос = Новый Запрос();
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	Запрос.УстановитьПараметр("Номенклатура",     Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",   Характеристика);
	Запрос.УстановитьПараметр("Склад",            Склад);
	Запрос.УстановитьПараметр("Назначение",       Назначение);
	Запрос.УстановитьПараметр("ЕдиницаИзмерения", ЕдиницаИзмерения);
	
	РезультатВыполнения = Запрос.ВыполнитьПакет();
	
	ЭлементыНадписи = Новый Массив();
	Выборка = РезультатВыполнения[0].Выбрать();
	Если Выборка.Следующий() Тогда
		ЭлементыНадписи.Добавить(Выборка.Наименование);
	КонецЕсли;
	Выборка = РезультатВыполнения[1].Выбрать();
	Если Выборка.Следующий() Тогда
		ЭлементыНадписи.Добавить(Выборка.Наименование);
	КонецЕсли;
	Выборка = РезультатВыполнения[2].Выбрать();
	Если Выборка.Следующий() Тогда
		ЭлементыНадписи.Добавить(Выборка.Наименование);
	КонецЕсли;
	
	Результат = Новый Структура();
	Результат.Вставить("НадписьТовар", НСтр("ru = 'Позиция заказа:'") + Символы.НПП + СтрСоединить(ЭлементыНадписи, ", "));
	Результат.Вставить("ИтогВНаличии",         0);
	Результат.Вставить("ИтогПоступит",         0);
	Результат.Вставить("ИтогДоступноСейчас",   0);
	Результат.Вставить("ИтогДоступноВсего",    0);
	Результат.Вставить("ИтогВРезервеНаСкладе", 0);
	Результат.Вставить("ИтогВРезервеВсего",    0);
	Результат.Вставить("ЕдиницаИзмерения",     "");
	
	Выборка = РезультатВыполнения[3].Выбрать();
	Если Выборка.Следующий() Тогда
		Результат.Вставить("ЕдиницаИзмерения", Выборка.Наименование);
	КонецЕсли;
	
	Выборка = РезультатВыполнения[РезультатВыполнения.ВГраница()].Выбрать();
	Если Выборка.Следующий() Тогда
		
		Результат.ИтогВНаличии         = Выборка.ВНаличии;
		Результат.ИтогПоступит         = Выборка.Поступит;
		Результат.ИтогДоступноСейчас   = Выборка.ДоступноСейчас;
		Результат.ИтогДоступноВсего    = Выборка.ДоступноВсего;
		Результат.ИтогВРезервеНаСкладе = Выборка.ВНаличии - Выборка.ДоступноСейчас;
		Результат.ИтогВРезервеВсего    = Выборка.Поступит - Выборка.ДоступноВсего;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура СписокВыборНаКлиенте(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Данные = Неопределено;
	
	Если СтрНайти(Поле.Имя, "ЗаказНаОтгрузку") > 0
			И Элемент.ТекущиеДанные.Свойство("ЗаказНаОтгрузку") Тогда
		
		Данные = Элемент.ТекущиеДанные.ЗаказНаОтгрузку;
		
	ИначеЕсли СтрНайти(Поле.Имя, "ЗаказНаПоступление") > 0
				И Элемент.ТекущиеДанные.Свойство("ЗаказНаПоступление") Тогда
		
		Данные = Элемент.ТекущиеДанные.ЗаказНаПоступление;
		Если Не ЗначениеЗаполнено(Данные) И Элемент.ТекущиеДанные.Свойство("СпособОбеспечения") Тогда
			Данные = Элемент.ТекущиеДанные.СпособОбеспечения;
		КонецЕсли;
		
	ИначеЕсли СтрНайти(Поле.Имя, "СпособОбеспеченияНаименование") > 0
				И Элемент.ТекущиеДанные.Свойство("СпособОбеспечения") Тогда
		
		Данные = Элемент.ТекущиеДанные.СпособОбеспечения;
		Если Не ЗначениеЗаполнено(Данные) И Элемент.ТекущиеДанные.Свойство("ЗаказНаПоступление") Тогда
			Данные = Элемент.ТекущиеДанные.ЗаказНаПоступление;
		КонецЕсли;
		
	ИначеЕсли СтрНайти(Поле.Имя, "Номенклатура") > 0
				И Элемент.ТекущиеДанные.Свойство("Номенклатура") Тогда
		
		Данные = Элемент.ТекущиеДанные.Номенклатура;
		
	ИначеЕсли СтрНайти(Поле.Имя, "Характеристика") > 0
				И Элемент.ТекущиеДанные.Свойство("Характеристика") Тогда
		
		Данные = Элемент.ТекущиеДанные.Характеристика;
		
	ИначеЕсли СтрНайти(Поле.Имя, "Склад") > 0
				И Элемент.ТекущиеДанные.Свойство("Склад") Тогда
		
		Данные = Элемент.ТекущиеДанные.Склад;
		
	ИначеЕсли СтрНайти(Поле.Имя, "Назначение") > 0
				И Элемент.ТекущиеДанные.Свойство("ЗаказНазначения") Тогда
		
		Данные = Элемент.ТекущиеДанные.ЗаказНазначения;
		Если Не ЗначениеЗаполнено(Данные) И Элемент.ТекущиеДанные.Свойство("Назначение") Тогда
			Данные = Элемент.ТекущиеДанные.Назначение;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Данные) Тогда
		ПоказатьЗначение(, Данные);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Таблица.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Таблица.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	Таблица.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	Таблица.Колонки.Добавить("Обособленно", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("ЗаказНаОтгрузку", Метаданные.ОпределяемыеТипы.ОжидаемаяОтгрузка.Тип);
	Таблица.Колонки.Добавить("Индекс", Новый ОписаниеТипов("Число"));
	
	Индекс = 0;
	Ключи = Новый Массив();
	ДействиеНеОбеспечивать = Перечисления.ВариантыОбеспечения.НеТребуется;
	Для Каждого Строка Из Строки Цикл
		Если Строка.Значение.Данные.Действие <> ДействиеНеОбеспечивать Тогда
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка.Значение.Данные);
			НоваяСтрока.Индекс = Индекс;
			Ключи.Добавить(Строка.Ключ);
			Индекс = Индекс + 1;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Таблица", Таблица);
	Текст =
		"ВЫБРАТЬ
		|	Таблица.Номенклатура КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Склад КАК Склад,
		|	Таблица.Назначение КАК Назначение,
		|	ВЫБОР
		|		КОГДА Таблица.Обособленно
		|			ТОГДА Таблица.Назначение
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|	КОНЕЦ КАК Обособленно,
		|	Таблица.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку,
		|	Таблица.Индекс КАК Индекс
		|ПОМЕСТИТЬ Таблица
		|ИЗ
		|	&Таблица КАК Таблица
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад, Назначение, ЗаказНаОтгрузку
		|;
		|
		|//////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Номенклатура КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Склад КАК Склад,
		|	Таблица.Назначение КАК Назначение,
		|	Таблица.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку
		|ПОМЕСТИТЬ Аналитики
		|ИЗ
		|	Таблица КАК Таблица
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад, Назначение, ЗаказНаОтгрузку";
		
	Тексты = Новый Массив();
	Тексты.Добавить(Текст);
	Текст = Обработки.СостояниеОбеспеченияЗаказов.ТекстЗапросаЧисловыеПараметрыРезервирования(Ложь);
	Тексты.Добавить(Текст);
	
	Текст =
		"ВЫБРАТЬ
		|	Таблица.Индекс КАК Индекс,
		|	ЕСТЬNULL(Показатели.ПотребностьПоЗаказу
		|		- Показатели.РезервироватьНаСкладеПодЗаказом
		|		- Показатели.Свободно
		|		- Показатели.ЗарезервированоПоЗаказу <= 0, ИСТИНА) КАК МожноОтгрузитьИзДоступногоОстатка,
		|	ЕСТЬNULL(Показатели.ПотребностьПоЗаказу
		|		- Показатели.ВНаличииВсего <= 0, ИСТИНА) КАК МожноОтгрузитьИзНаличия
		|ИЗ
		|	Таблица КАК Таблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ Показатели КАК Показатели
		|		ПО Показатели.ЗаказНаОтгрузку = Таблица.ЗаказНаОтгрузку
		|		И Показатели.Номенклатура = Таблица.Номенклатура
		|		И Показатели.Характеристика = Таблица.Характеристика
		|		И Показатели.Склад = Таблица.Склад
		|		И Показатели.Назначение = Таблица.Назначение";
	Тексты.Добавить(Текст);
	
	Запрос.Текст = СтрСоединить(Тексты, ОбщегоНазначения.РазделительПакетаЗапросов());
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	ПараметрЦветТекста = Новый ПараметрКомпоновкиДанных("ЦветТекста");
	ЦветТекстаПоложительногоЗначения = ЦветаСтиля.ЦветТекстаПоложительногоЗначения;
	ГиперссылкаЦвет = ЦветаСтиля.ГиперссылкаЦвет;
	Пока Выборка.Следующий() Цикл
		
		Строка = Строки[Ключи[Выборка.Индекс]].Данные;
		ЗаполнитьЗначенияСвойств(Строка, Выборка, "МожноОтгрузитьИзДоступногоОстатка,МожноОтгрузитьИзНаличия");
		ОформлениеСостояния = Строки[Ключи[Выборка.Индекс]].Оформление.Получить("Состояние");
		Если ТипЗнч(ОформлениеСостояния) = Тип("ОформлениеЯчейкиДинамическогоСписка") Тогда
			
			Если Строка.МожноОтгрузитьИзДоступногоОстатка Тогда
				ОформлениеСостояния.УстановитьЗначениеПараметра(ПараметрЦветТекста, ЦветТекстаПоложительногоЗначения);
			ИначеЕсли Строка.МожноОтгрузитьИзНаличия Тогда
				ОформлениеСостояния.УстановитьЗначениеПараметра(ПараметрЦветТекста, ГиперссылкаЦвет);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеТаблиц

&НаСервере
Процедура НаборОбновить(ПараметрыЗапроса, АдресТаблицыДвижений)
	
	Данные = ПолучитьИзВременногоХранилища(АдресТаблицыДвижений);
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	РаспределениеЗапасовДвижения.ДобавитьКолонкиРегистра(Данные.ТаблицаДвижений);
	РаспределениеЗапасов.СостояниеСУчетомОтраженияИзменений(
		ЗаказыРегистраторыДвижений.ВыгрузитьЗначения(),
		Данные.ТаблицаДвижений,
		МенеджерВременныхТаблиц,
		Данные.ТаблицаИмитацияРеестра);
		
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапроса(Элементы.Набор.Имя);
	Запрос.УстановитьПараметр("ИсключаемыеЗаказы",    Новый Массив());
	Запрос.УстановитьПараметр("Состояния",            ПараметрыЗапроса.Состояния);
	Запрос.УстановитьПараметр("Ожидается",            ПараметрыЗапроса.Ожидается);
	Запрос.УстановитьПараметр("ТекстКОбеспечениюИРезервироватьПоМереПоступления", ПараметрыЗапроса.ТекстКОбеспечениюИРезервироватьПоМереПоступления);
	Запрос.УстановитьПараметр("ОжидаетсяНеВСрок",     ПараметрыЗапроса.ОжидаетсяНеВСрок);
	Запрос.УстановитьПараметр("ТекущийЗаказ",         ПараметрыЗапроса.ТекущийЗаказ);
	Запрос.УстановитьПараметр("НадписьЗаказ",         ПараметрыЗапроса.НадписьЗаказ);
	Запрос.УстановитьПараметр("НачалоЭтогоДня",       ПараметрыЗапроса.НачалоЭтогоДня);
	Запрос.УстановитьПараметр("ДоступныеТипыЗаказов", ДоступныеТипыЗаказов());
	Запрос.УстановитьПараметр("НачалоТекущегоДня", НачалоДня(ТекущаяДатаСеанса()));

	УстановитьПривилегированныйРежим(Истина);
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Таблица.Колонки.Добавить("Индекс", Новый ОписаниеТипов("Число"));
	Для Индекс = 0 По Таблица.Количество() - 1 Цикл
		Таблица[Индекс].Индекс = Индекс;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Таблица", Таблица);
	Текст =
		"ВЫБРАТЬ
		|	Таблица.Номенклатура КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Склад КАК Склад,
		|	Таблица.Назначение КАК Назначение,
		|	ВЫБОР
		|		КОГДА Таблица.Обособленно
		|			ТОГДА Таблица.Назначение
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|	КОНЕЦ КАК Обособленно,
		|	Таблица.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку,
		|	Таблица.Индекс КАК Индекс
		|ПОМЕСТИТЬ Таблица
		|ИЗ
		|	&Таблица КАК Таблица
		|ГДЕ
		|	Таблица.Действие <> ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется)
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад, Назначение, ЗаказНаОтгрузку
		|;
		|
		|//////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Номенклатура КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Склад КАК Склад,
		|	Таблица.Назначение КАК Назначение,
		|	Таблица.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку
		|ПОМЕСТИТЬ Аналитики
		|ИЗ
		|	Таблица КАК Таблица
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад, Назначение, ЗаказНаОтгрузку";
		
	Тексты = Новый Массив();
	Тексты.Добавить(Текст);
	Текст = Обработки.СостояниеОбеспеченияЗаказов.ТекстЗапросаЧисловыеПараметрыРезервирования(Истина);
	Текст = СтрЗаменить(Текст, "РегистрСведений.РаспределениеЗапасов", "ИмитацияОтражения");
	Тексты.Добавить(Текст);
	
	Текст =
		"ВЫБРАТЬ
		|	Таблица.Индекс КАК Индекс,
		|	ЕСТЬNULL(Показатели.ПотребностьПоЗаказу
		|		- Показатели.РезервироватьНаСкладеПодЗаказом
		|		- Показатели.Свободно
		|		- Показатели.ЗарезервированоПоЗаказу <= 0, ИСТИНА) КАК МожноОтгрузитьИзДоступногоОстатка,
		|	ЕСТЬNULL(Показатели.ПотребностьПоЗаказу
		|		- Показатели.ВНаличииВсего <= 0, ИСТИНА) КАК МожноОтгрузитьИзНаличия
		|ИЗ
		|	Таблица КАК Таблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ Показатели КАК Показатели
		|		ПО Показатели.ЗаказНаОтгрузку = Таблица.ЗаказНаОтгрузку
		|		И Показатели.Номенклатура = Таблица.Номенклатура
		|		И Показатели.Характеристика = Таблица.Характеристика
		|		И Показатели.Склад = Таблица.Склад
		|		И Показатели.Назначение = Таблица.Назначение";
	Тексты.Добавить(Текст);
	
	Запрос.Текст = СтрСоединить(Тексты, ОбщегоНазначения.РазделительПакетаЗапросов());
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Таблица[Выборка.Индекс], Выборка, "МожноОтгрузитьИзДоступногоОстатка,МожноОтгрузитьИзНаличия");
	КонецЦикла;
	Набор.Загрузить(Таблица);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|КОЛИЧЕСТВО(*) КАК ВсегоЗаписей
		|ИЗ
		|	ИмитацияОтражения КАК Таблица
		|ГДЕ
		|	Таблица.Состояние В(
		|		ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченНаСкладе),
		|		ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченКДате),
		|		ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.Обеспечить),
		|		ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ВРезерве),
		|		ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.НеОбеспечивать),
		|		ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаетсяПоНеподтвержденномуЗаказу))
		|
		|;
		|///////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЕстьОтгрузить
		|ИЗ
		|	ДвиженияПриЗаписи КАК Таблица
		|ГДЕ
		|	Таблица.ОтгружаемыйЗаказ = &ТекущийЗаказ
		|		И Таблица.ВНаличииРасход > 0";
	ВсегоСтрокВСпискеБезОтборов = 0;
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Выборка = РезультатЗапроса[0].Выбрать();
	Если Выборка.Следующий() Тогда
		ВсегоСтрокВСпискеБезОтборов = Выборка.ВсегоЗаписей;
	КонецЕсли;
	
	Выборка = РезультатЗапроса[1].Выбрать();
	Если Выборка.Следующий() Тогда
		ВсегоСтрокВСпискеБезОтборов = ВсегоСтрокВСпискеБезОтборов + 1; // достаточно для понимания, что все строки нельзя выделить в списке.
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВыполнениеКоманд

&НаКлиенте
Процедура ОбновитьСписок()
	
	Если КонтекстИспользования = "РАЗДЕЛ" Или КонтекстИспользования = "СПИСОКЗАКАЗОВ" Тогда
		Элементы.СписокЗаказы.Обновить();
	ИначеЕсли КонтекстИспользования = "ЗАКАЗ" Тогда
		Элементы.Список.Обновить();
		Если ЭтоОжиданиеРезервированияИзДругихЗаказов = Истина Тогда
			ВладелецФормы.Прочитать();
		КонецЕсли;
	КонецЕсли;
	ЭтоОжиданиеРезервированияИзДругихЗаказов = Ложь;
	
КонецПроцедуры

&НаКлиенте
Функция ТекущиеДанныеКлиент()
	
	Если КонтекстИспользования = "ТАБЛИЦА" Тогда
		
		ТекущиеДанные = Элементы.Набор.ТекущиеДанные;
		
	Иначе
		
		Если КонтекстИспользования = "ЗАКАЗ" Тогда
			
			ТекущиеДанные = Элементы.Список.ТекущиеДанные;
			
		ИначеЕсли КонтекстИспользования = "СПИСОКЗАКАЗОВ" Или КонтекстИспользования = "РАЗДЕЛ" Тогда
			
			ТекущиеДанные = Элементы.СписокЗаказы.ТекущиеДанные;
			
		КонецЕсли;
		
		Если ТекущиеДанные <> Неопределено Тогда
			
			Если ТекущиеДанные.Свойство("ГруппировкаСтроки") Тогда
				ТекущиеДанные = Неопределено;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекущиеДанные;
	
КонецФункции

&НаСервере
Процедура ПометкаЗначенийВСпискеНаСервере()
	
	СохранитьНастройки();
	Состояния = СтрокаСостояния(ОтобранныеСостояния);
	УправлениеПараметрамиСписков(Элементы.Состояния.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействие(КодДействия)
	
	ВыгружаемыеКолонки =
		"ЗаказНаОтгрузку,
		|ЖелаемаяДатаОтгрузки,
		|Номенклатура,
		|Характеристика,
		|Состояние,
		|Склад,
		|Назначение,
		|Действие,
		|Обособленно,
		|Количество";
	
	МассивСтрок = Новый Массив();
	
	Если КонтекстИспользования = "ТАБЛИЦА" Тогда
		
		Для Каждого Идентификатор Из Элементы.Набор.ВыделенныеСтроки Цикл
			
			ДанныеСтроки = Набор.НайтиПоИдентификатору(Идентификатор);
			НоваяСтрока = Новый Структура(ВыгружаемыеКолонки);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
			МассивСтрок.Добавить(НоваяСтрока);
			
		КонецЦикла;
		
	ИначеЕсли КонтекстИспользования = "ЗАКАЗ" Тогда
		
		КоличествоВсего = 0;
		Для Каждого Идентификатор Из Элементы.Список.ВыделенныеСтроки Цикл
			
			ДанныеСтроки = Элементы.Список.ДанныеСтроки(Идентификатор);
			НоваяСтрока = Новый Структура(ВыгружаемыеКолонки);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
			МассивСтрок.Добавить(НоваяСтрока);
			КоличествоВсего = КоличествоВсего + НоваяСтрока.Количество;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если КодДействия = "ДЕЙСТВИЕ_ОТГРУЗИТЬ_ОБЕСПЕЧЕННОЕ" Тогда
		
		ВсегоСтрок = МассивСтрок.Количество();
		Для Счетчик = 1 По ВсегоСтрок Цикл
			СтрокаМассива = МассивСтрок[ВсегоСтрок - Счетчик];
			Если СтрокаМассива.Состояние <> ПредопределенноеЗначение("Перечисление.РаспределениеЗапасовСостояния.ВРезерве")
					И СтрокаМассива.Состояние <> ПредопределенноеЗначение("Перечисление.РаспределениеЗапасовСостояния.ОбеспеченНаСкладе")
					И СтрокаМассива.Состояние <> ПредопределенноеЗначение("Перечисление.РаспределениеЗапасовСостояния.ЗарезервированПриПоступлении") Тогда
				МассивСтрок.Удалить(ВсегоСтрок - Счетчик);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если МассивСтрок.Количество() = 0 Тогда
		ПоказатьПредупреждение(,
			НСтр("ru = 'Команда не может быть выполнена для выбранных строк.
			|Для выполнения команды необходимо выбрать строки заказа в состояниях:
			|""В резерве"" / ""Обеспечен на складе""'"));
		Возврат;
	КонецЕсли;
	
	ПоместитьВХранилищеСтроки(ВыгружаемыеКолонки, МассивСтрок);
	
	Если КодДействия = "ДЕЙСТВИЕ_ОТГРУЗИТЬ_ОБЕСПЕЧЕННОЕ" Или КодДействия = "ДЕЙСТВИЕ_ОТГРУЗИТЬ_ДОСТУПНОЕ" Тогда
		
		Если Не СниматьФлагОтгружатьОднойДатой Тогда
			
			ВыполнитьДействиеПослеВопроса("КодВозвратаДиалога_Нет", КодДействия);
			
		ИначеЕсли ДатаОтгрузкиВсехСтрокОднойДатой <> Неопределено
				И ДатаОтгрузкиВсехСтрокОднойДатой < НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса()) Тогда
			
			Если МассивСтрок.Количество() = ВсегоСтрокВСпискеБезОтборов Тогда
				ВыполнитьДействиеПослеВопроса("КодВозвратаДиалога_Нет", КодДействия);
			Иначе
				ПараметрыУстановкиДат = Новый Структура("ДатаОтгрузкиВсехСтрокОднойДатой,ДатаОтгрузкиНовыхСтрок",
					ДатаОтгрузкиВсехСтрокОднойДатой, ДатаОтгрузкиНовыхСтрок);
				ОбеспечениеВДокументахКлиент.ПоказатьВопросСнятьФлагОтгружатьОднойДатойВСостоянииОбеспечения(
					ЭтотОбъект, ПараметрыУстановкиДат, КодДействия, "ВыполнитьДействиеПослеВопроса");
			КонецЕсли;
				
		Иначе
			ВыполнитьДействиеПослеВопроса(Неопределено, КодДействия);
		КонецЕсли;
		
	Иначе
		
		ВыполнитьДействиеПослеВопроса(Неопределено, КодДействия);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораЗаказовДляУстановкиДействий(ПараметрыЗаполнения, ДополнительныеПараметры) Экспорт
	
	Если ПараметрыЗаполнения = Неопределено Или ПараметрыЗаполнения = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ОбрабатываемыеЗаказы = Новый Массив();
	ДлительнаяОперация = ЗарезервироватьНаСервереЗапускФоновогоЗадания(ПараметрыЗаполнения, ОбрабатываемыеЗаказы);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗарезервироватьНаСервереПослеЗавершенияФоновогоЗадания",
		ЭтотОбъект,
		ОбрабатываемыеЗаказы);
		
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещения, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействиеПослеВопроса(Ответ, КодДействия) Экспорт
	
	ВыполняемоеОповещение = Новый ОписаниеОповещения(
		"ОбновитьНаборПослеПолученияАдресаТаблицыДвиженийНаКлиенте",
		ЭтотОбъект,
		Новый Структура);
		
	СтруктураОповещения = Новый Структура();
	СтруктураОповещения.Вставить("КодДействия", КодДействия);
	СтруктураОповещения.Вставить("АдресАналитик", АдресАналитик);
	СтруктураОповещения.Вставить("ВыполняемоеОповещение", ВыполняемоеОповещение);
	
	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("СнятьФлагОтгружатьОднойДатой", Ложь);
	ПараметрыЗаполнения.Вставить("ЗаполнитьДатуОтгрузкиОднойДатой", Ложь);
	
	Если СниматьФлагОтгружатьОднойДатой Тогда
		
		ПараметрыЗаполнения.Вставить("СнятьФлагОтгружатьОднойДатой", Ответ = "КодВозвратаДиалога_Да");
		ПараметрыЗаполнения.Вставить("ЗаполнитьДатуОтгрузкиОднойДатой", Ответ = "КодВозвратаДиалога_Нет"
		И ДатаОтгрузкиВсехСтрокОднойДатой < ДатаОтгрузкиНовыхСтрок);
		
		Если Ответ = "КодВозвратаДиалога_Нет" Тогда
			ДатаОтгрузкиВсехСтрокОднойДатой = Макс(ДатаОтгрузкиВсехСтрокОднойДатой, ДатаОтгрузкиНовыхСтрок);
		ИначеЕсли Ответ = "КодВозвратаДиалога_Да" Тогда
			ДатаОтгрузкиВсехСтрокОднойДатой = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураОповещения.Вставить("ПараметрыЗаполнения", ПараметрыЗаполнения);
	
	ОповеститьОВыборе(СтруктураОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьВХранилищеСтроки(ВыгружаемыеКолонки, МассивСтрок)
	
	Аналитики = Набор.Выгрузить(Новый Массив, ВыгружаемыеКолонки);
	Для Каждого Строка Из МассивСтрок Цикл
		ЗаполнитьЗначенияСвойств(Аналитики.Добавить(), Строка);
	КонецЦикла;
	ПоместитьВоВременноеХранилище(Аналитики, АдресАналитик);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаборПослеПолученияАдресаТаблицыДвижений(АдресТаблицыДвижений)
	
	НаборОбновить(ПараметрыЗапроса(), АдресТаблицыДвижений);
	УдалитьИзВременногоХранилища(АдресТаблицыДвижений);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНаборПослеПолученияАдресаТаблицыДвиженийНаКлиенте(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстИспользования = "ТАБЛИЦА";
	УправлениеВидимостью(Неопределено, ЭтотОбъект, КонтекстИспользования);
	ОбновитьНаборПослеПолученияАдресаТаблицыДвижений(Результат);
	
КонецПроцедуры

&НаСервере
Функция ЗарезервироватьНаСервереЗапускФоновогоЗадания(ПараметрыЗаполнения, ОбрабатываемыеЗаказы)
	
	ПараметрыПроцедуры = Новый Структура();
	
	ТаблицаЗаказов = ПолучитьИзВременногоХранилища(ПараметрыЗаполнения.АдресВХранилище);
	
	ОбрабатываемыеЗаказы.Добавить(ПараметрыЗаполнения.ЗаказНаОтгрузку);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбрабатываемыеЗаказы, ТаблицаЗаказов.ВыгрузитьКолонку("Заказ"));
	
	АналитикаТовара = Новый Структура();
	АналитикаТовара.Вставить("Номенклатура", ПараметрыЗаполнения.Номенклатура);
	АналитикаТовара.Вставить("Характеристика", ПараметрыЗаполнения.Характеристика);
	АналитикаТовара.Вставить("Склад", ПараметрыЗаполнения.Склад);
	АналитикаТовара.Вставить("Назначение", ПараметрыЗаполнения.Назначение);
	
	ПараметрыПроцедуры.Вставить("ЗаказНаОтгрузку", ПараметрыЗаполнения.ЗаказНаОтгрузку);
	ПараметрыПроцедуры.Вставить("КРезервированиюВсего", ПараметрыЗаполнения.КРезервированиюВсего);
	ПараметрыПроцедуры.Вставить("АналитикаТовара", АналитикаТовара);
	ПараметрыПроцедуры.Вставить("ТаблицаЗаказов", ТаблицаЗаказов);
	УдалитьИзВременногоХранилища(ПараметрыЗаполнения.АдресВХранилище);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Состояние обеспечения: Резервировать на складе'");
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("ОбеспечениеВДокументахСервер.РезервироватьИзДругихЗаказов",
		ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ЗарезервироватьНаСервереПослеЗавершенияФоновогоЗадания(Результат, ОбработанныеЗаказы) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ПоказатьПредупреждение(, Результат.КраткоеПредставлениеОшибки);
	Иначе
		СтруктураРезультата = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		УдалитьИзВременногоХранилища(Результат.АдресРезультата);
		Если СтруктураРезультата.ТекстОшибки <> Неопределено Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Резервирование не выполнено.'"));
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтруктураРезультата.ТекстОшибки);
		Иначе
			ЗаполнитьЗаказыДляПроверкиЗаданийПослеРезервированияИзДругихЗаказов(ОбработанныеЗаказы);
			ПоказатьОповещениеПользователя(НСтр("ru = 'Резервирование на складе.'"), ,
					НСтр("ru = 'Команда выполнена успешно.'"), , , );
		КонецЕсли;
		Для Каждого Ошибка Из СтруктураРезультата.СообщенияПользователю Цикл
			Ошибка.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезервироватьНаСкладеКлиент()
	
	ОчиститьСообщения();
	ТекстПредупреждения = Неопределено;
	ТекущиеДанные = ТекущиеДанныеКлиент();
	Если ТекущиеДанные = Неопределено Тогда
		
		ПоказатьПредупреждение(,
			НСтр("ru = 'Команда не может быть выполнена. Для резервирования необходимо выбрать строку (позицию) заказа.'"));
		
	ИначеЕсли ТипЗнч(ТекущиеДанные.Склад) <> Тип("СправочникСсылка.Склады") Тогда
	
		ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для работ.'"));
		
	ИначеЕсли Не ЗначениеЗаполнено(ТекущиеДанные.Склад) Тогда
	
		ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена, если склад в строке не заполнен.'"));
		
	ИначеЕсли ТипЗнч(ТекущиеДанные.ЗаказНаОтгрузку) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
				Или ТипЗнч(ТекущиеДанные.ЗаказНаОтгрузку) = Тип("ДокументСсылка.АктОРасхожденияхПослеПеремещения")
				
				
				Или ТипЗнч(ТекущиеДанные.ЗаказНаОтгрузку) = Тип("ДокументСсылка.АктОРасхожденияхПослеОтгрузки") Тогда
	
		ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для данного документа.'"));
		
	ИначеЕсли (ТипЗнч(ТекущиеДанные.ЗаказНаОтгрузку) = Тип("ДокументСсылка.ЗаказКлиента")
				Или ТипЗнч(ТекущиеДанные.ЗаказНаОтгрузку) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента")
				
				
				
				Или ТипЗнч(ТекущиеДанные.ЗаказНаОтгрузку) = Тип("ДокументСсылка.ЗаказНаВнутреннееПотребление"))
					И РезервироватьНаСкладеПроверкаЗаказа(ТекущиеДанные.ЗаказНаОтгрузку, ТекстПредупреждения) Тогда
				
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
	ИначеЕсли ТипЗнч(ТекущиеДанные.ЗаказНаОтгрузку) = Тип("ДокументСсылка.ЗаказНаСборку")
					И ЭтоРазборка(ТекущиеДанные.ЗаказНаОтгрузку) Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для заказов на разборку.'"));
		
	Иначе
		
		ПараметрыФормы = ОбеспечениеВДокументахКлиент.ПараметрыФормыВводаКоличестваЗарезервироватьИзДругихЗаказов();
		ЗаполнитьЗначенияСвойств(ПараметрыФормы, ТекущиеДанные);
		
		СтруктураРезультата = РезервироватьНаСкладеБезИспользованияРезервовДругихЗаказов(
			ПараметрыФормы,
			Параметры.Заказ,
			?(КонтекстИспользования = "ЗАКАЗ", ВладелецФормы.УникальныйИдентификатор, Неопределено));
		Если СтруктураРезультата = Неопределено Тогда
			
			Оповещение = Новый ОписаниеОповещения("ПослеВыбораЗаказовДляУстановкиДействий", ЭтотОбъект);
			
			ОценкаПроизводительностиКлиент.ЗамерВремени(
				"Обработка.СостояниеОбеспеченияЗаказов.Форма.УстановкаДействияРезервироватьНаСкладе.Событие.ОткрытьФорму");
			ОткрытьФорму("Обработка.СостояниеОбеспеченияЗаказов.Форма.УстановкаДействияРезервироватьНаСкладе",
				ПараметрыФормы, ЭтотОбъект, , , , Оповещение);
				
		Иначе
			Если СтруктураРезультата.ТекстОшибки <> Неопределено Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Резервирование не выполнено.'"));
				ОбщегоНазначенияКлиент.СообщитьПользователю(СтруктураРезультата.ТекстОшибки);
			Иначе
				ОбработанныеЗаказы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Параметры.Заказ);
				ЗаполнитьЗаказыДляПроверкиЗаданийПослеРезервированияИзДругихЗаказов(ОбработанныеЗаказы);
				ПоказатьОповещениеПользователя(НСтр("ru = 'Резервирование на складе.'"), ,
					НСтр("ru = 'Команда выполнена успешно.'"), , , );
			КонецЕсли;
			Для Каждого Ошибка Из СтруктураРезультата.СообщенияПользователю Цикл
				Ошибка.Сообщить();
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РезервироватьНаСкладеБезИспользованияРезервовДругихЗаказов(ПараметрыФормы, Заказ, УникальныйИдентификатор)
	
	Если УникальныйИдентификатор <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(Заказ, УникальныйИдентификатор);
	КонецЕсли;
	ПараметрыПроцедуры = Новый Структура();
	
	АналитикаТовара = Новый Структура("Номенклатура,Характеристика,Склад,Назначение,Обособленно");
	ЗаполнитьЗначенияСвойств(АналитикаТовара, ПараметрыФормы);
	
	ПараметрыПроцедуры.Вставить("ЗаказНаОтгрузку", ПараметрыФормы.ЗаказНаОтгрузку);
	ПараметрыПроцедуры.Вставить("КРезервированиюВсего", 0);
	ПараметрыПроцедуры.Вставить("АналитикаТовара", АналитикаТовара);
	ПараметрыПроцедуры.Вставить("ТаблицаЗаказов", Неопределено);
	
	АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
	ОбеспечениеВДокументахСервер.РезервироватьИзДругихЗаказов(ПараметрыПроцедуры, АдресРезультата);
	
	СтруктураРезультата = ПолучитьИзВременногоХранилища(АдресРезультата);
	Возврат СтруктураРезультата;
	
КонецФункции

&НаКлиенте
Процедура ВопросПровестиДокументЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаписьДокументаЗавершение", ЭтотОбъект);
		ОбщегоНазначенияУТКлиент.Провести(ВладелецФормы, Истина, ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьДокументаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	КонтекстИспользования = "ЗАКАЗ";
	УправлениеВидимостью(Неопределено, ЭтотОбъект, КонтекстИспользования);
	УправлениеПараметрамиСписков(Неопределено);
	РезервироватьНаСкладеКлиент();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РезервироватьНаСкладеПроверкаЗаказа(Заказ, ТекстПредупреждения)
	
	ТекстПредупреждения = Неопределено;
	Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказКлиента")
			Или ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
				
				РеквизитыЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Заказ, "Статус,ЭтоЗаказКакСчет");
				Если РеквизитыЗаказа.ЭтоЗаказКакСчет
						Или Не ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента") Тогда
							
							ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для заказов как счет.'");
							Возврат Истина;
							
				ИначеЕсли Не ПолучитьФункциональнуюОпцию("ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента") Тогда
					
					ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для заказов со склада.'");
					Возврат Истина;
					
				КонецЕсли;
				
	Иначе
		РеквизитыЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Заказ, "Статус");
	КонецЕсли;
	
	Если ЭтоСтатусНаСогласовании(РеквизитыЗаказа.Статус) Тогда
		
		ТекстПредупреждения = СтрШаблон(НСтр("ru = 'Команда не может быть выполнена для заказа в статусе ""%1"".'"),
			РеквизитыЗаказа.Статус);
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоСтатусНаСогласовании(Статус)
	
	Результат =
		Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован
				Или Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована
				Или Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату
		
		
		
			Или Статус = Перечисления.СтатусыВнутреннихЗаказов.НаСогласовании;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоРазборка(Заказ)
	ХозяйственнаяОперацияЗаказа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Заказ, "ХозяйственнаяОперация");
	Возврат ХозяйственнаяОперацияЗаказа = Перечисления.ХозяйственныеОперации.РазборкаТоваров;
КонецФункции

#КонецОбласти

#КонецОбласти
