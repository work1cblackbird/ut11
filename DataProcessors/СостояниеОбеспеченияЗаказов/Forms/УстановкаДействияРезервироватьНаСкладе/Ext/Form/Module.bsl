
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	ШрифтЖирный = Элементы.ПозицияЗаказаНадпись.Шрифт;
	ЕдиницаИзмерения = Строка(Параметры.ЕдиницаИзмерения);
	Номенклатура = Параметры.Номенклатура;
	Характеристика = Параметры.Характеристика;
	Назначение = Параметры.Назначение;
	Склад = Параметры.Склад;
	Обособленно = Параметры.Обособленно;
	ЗаказНаОтгрузку = Параметры.ЗаказНаОтгрузку;
	
	ОбновитьНаСервере();

	Элементы.ЗаказНаОтгрузку.Заголовок = СтрШаблон(НСтр("ru = 'Заказ: %1'"), Параметры.ЗаказНаОтгрузку);
	
	Запятая = НСтр("ru = ','") + Символы.НПП;
	Если ЗначениеЗаполнено(Параметры.Характеристика) Тогда
		ТекстТоварИСклад = Строка(Параметры.Номенклатура) + Запятая + Строка(Параметры.Характеристика) + Запятая + Строка(Параметры.Склад);
	Иначе
		ТекстТоварИСклад = Строка(Параметры.Номенклатура) + Запятая + Строка(Параметры.Склад);
	КонецЕсли;
	
	Элементы.ПозицияЗаказаНадпись.Заголовок = СтрШаблон(НСтр("ru = 'Позиция заказа: %1'"), ТекстТоварИСклад);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаЗаказов

&НаКлиенте
Процедура ТаблицаЗаказовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаТаблицы = ТаблицаЗаказов.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если Поле = Элементы.ТаблицаЗаказовЗаказ Тогда
		
		ПоказатьЗначение(, СтрокаТаблицы.Заказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗаказовОтметкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаЗаказов.ТекущиеДанные;
	ТекущиеДанные.КРезервированиюСУчетомФлага = ?(ТекущиеДанные.Отметка, ТекущиеДанные.КРезервированию, 0);
	РезервыДругихЗаказов = ТаблицаЗаказов.Итог("КРезервированиюСУчетомФлага");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗаказовКРезервированиюПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаЗаказов.ТекущиеДанные;
	ТекущиеДанные.Отметка = ТекущиеДанные.Количество > 0;
	ТекущиеДанные.КРезервированиюСУчетомФлага = ?(ТекущиеДанные.Отметка, ТекущиеДанные.КРезервированию, 0);
	РезервыДругихЗаказов = ТаблицаЗаказов.Итог("КРезервированиюСУчетомФлага");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Ок(Команда)
	
	ОчиститьСообщения();
	
	АдресВХранилище = ПоместитьВХранилище(ВладелецФормы.УникальныйИдентификатор);
	Если АдресВХранилище = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Закрыть(АдресВХранилище);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ТаблицаДругихЗаказов()
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("Назначение", Назначение);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ЗаказНаОтгрузку", ЗаказНаОтгрузку);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(ДанныеРеестра.Приоритет) КАК Приоритет,
		|	Таблица.ЗаказНаОтгрузку КАК Заказ,
		|	Таблица.ЖелаемаяДатаОтгрузки КАК ЖелаемаяДатаОтгрузки,
		|	ВЫБОР
		|		КОГДА Таблица.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ВРезерве)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.РезервироватьПоМереПоступления)
		|	КОНЕЦ КАК Действие,
		|	СУММА(Таблица.Зарезервировано) КАК Количество,
		|	МАКСИМУМ(Таблица.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
		|	МАКСИМУМ(ВЫБОР
		|		КОГДА Таблица.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ВРезерве)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ВРезерве)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ЗарезервированПриПоступлении)
		|	КОНЕЦ) КАК Состояние
		|ПОМЕСТИТЬ Заказы
		|ИЗ
		|	РегистрСведений.РаспределениеЗапасов КАК Таблица
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК ДанныеРеестра
		|		ПО ДанныеРеестра.Ссылка = Таблица.ЗаказНаОтгрузку
		|		И НЕ ДанныеРеестра.ДополнительнаяЗапись
		|ГДЕ
		|	Таблица.Номенклатура = &Номенклатура
		|		И Таблица.Характеристика = &Характеристика
		|		И Таблица.Склад = &Склад
		|		И Таблица.Назначение = &Назначение
		|		И Таблица.ЗаказНаОтгрузку <> &ЗаказНаОтгрузку
		|		И Таблица.Зарезервировано > 0
		|		И Таблица.Состояние В(
		|			ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ВРезерве),
		|			ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ЗарезервированПриПоступлении),
		|			ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченНаСкладе))
		|СГРУППИРОВАТЬ ПО
		|	Таблица.ЗаказНаОтгрузку,
		|	Таблица.ЖелаемаяДатаОтгрузки,
		|	ВЫБОР
		|		КОГДА Таблица.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ВРезерве)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.РезервироватьПоМереПоступления)
		|	КОНЕЦ
		|ИНДЕКСИРОВАТЬ ПО
		|	Заказ
		|;
		|
		|/////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Таблица.Приоритет КАК Приоритет,
		|	Таблица.Заказ.Ссылка КАК Заказ,
		|	Таблица.ЖелаемаяДатаОтгрузки КАК ЖелаемаяДатаОтгрузки,
		|	Таблица.Действие КАК Действие,
		|	Таблица.Количество КАК Количество,
		|	Таблица.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	Таблица.Состояние КАК Состояние,
		|	ТИПЗНАЧЕНИЯ(Таблица.Заказ) = ТИП(Документ.РеализацияТоваровУслуг)
		
		
		|		ИЛИ ТИПЗНАЧЕНИЯ(Таблица.Заказ) = ТИП(Документ.АктОРасхожденияхПослеПеремещения)
		|		ИЛИ ТИПЗНАЧЕНИЯ(Таблица.Заказ) = ТИП(Документ.АктОРасхожденияхПослеОтгрузки)
		|		ИЛИ ЕСТЬNULL(ВЫРАЗИТЬ(Таблица.Заказ КАК Документ.ЗаказКлиента).ЭтоЗаказКакСчет, ЛОЖЬ)
		|		ИЛИ ЕСТЬNULL(ВЫРАЗИТЬ(Таблица.Заказ КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).ЭтоЗаказКакСчет, ЛОЖЬ)
		|		ИЛИ ЕСТЬNULL(ВЫРАЗИТЬ(Таблица.Заказ КАК Документ.ЗаказНаСборку).ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РазборкаТоваров), ЛОЖЬ)
		|		ИЛИ ТИПЗНАЧЕНИЯ(Таблица.Заказ) В(
		|				ТИП(Документ.ЗаказКлиента),
		|				ТИП(Документ.ЗаявкаНаВозвратТоваровОтКлиента))
		|			И ПострочнаяОтгрузка.Значение ЕСТЬ NULL КАК ТолькоПросмотр
		|ИЗ
		|	Заказы КАК Таблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента КАК ПострочнаяОтгрузка
		|		ПО ПострочнаяОтгрузка.Значение
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет, ЖелаемаяДатаОтгрузки, Заказ, Действие, Состояние";
		
	Таблица = Запрос.Выполнить().Выгрузить();
	Возврат Таблица;
	
КонецФункции

&НаСервере
Процедура ОбновитьНаСервере()
	
	Показатели = Обработки.СостояниеОбеспеченияЗаказов.ЧисловыеПараметрыРезервирования(
		Номенклатура,
		Характеристика,
		Назначение,
		Обособленно,
		Склад,
		ЗаказНаОтгрузку);
		
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Показатели);
	
	Строки = Новый Массив();
	Если ЗначениеЗаполнено(Назначение) Тогда
		Строки.Добавить(НСтр("ru = 'Всего заказано (обособленно):'"));
	Иначе
		Строки.Добавить(НСтр("ru = 'Всего заказано:'"));
	КонецЕсли;
	Строки.Добавить(Символы.НПП);
	Текст = Новый ФорматированнаяСтрока(Формат(ПотребностьПоЗаказу, "ЧДЦ=3; ЧН=0,000;"), ШрифтЖирный);
	Строки.Добавить(Текст);
	Строки.Добавить(Символы.НПП);
	Строки.Добавить(ЕдиницаИзмерения);
	Строки.Добавить(НСтр("ru = '; из них ""Резервировать на складе"":'"));
	Строки.Добавить(Символы.НПП);
	Текст = Новый ФорматированнаяСтрока(Формат(РезервПодЗаказом, "ЧДЦ=3; ЧН=0,000;"), ШрифтЖирный);
	Строки.Добавить(Текст);
	Строки.Добавить(Символы.НПП);
	Строки.Добавить(ЕдиницаИзмерения);
	Элементы.ВсегоЗаказаноНадпись.Заголовок = Новый ФорматированнаяСтрока(Строки);
	
	ТаблицаЗаказов.Загрузить(ТаблицаДругихЗаказов());
	
КонецПроцедуры

&НаСервере
Функция ПоместитьВХранилище(ИдентификаторВладельца)
	
	Отмеченные = Новый Структура("Отметка", Истина);
	Таблица = ТаблицаЗаказов.Выгрузить(Отмеченные, "Заказ, ЖелаемаяДатаОтгрузки,Действие,КРезервированию");
	Таблица.Колонки.Добавить("КСнятиюРезерваСоСклада", Таблица.Колонки.КРезервированию.ТипЗначения);
	ВсегоСтрок = Таблица.Количество();
	Для Счетчик = 1 По ВсегоСтрок Цикл
		СтрокаТаблицы = Таблица[ВсегоСтрок - Счетчик];
		Если СтрокаТаблицы.КРезервированию = 0 Тогда
			Таблица.Удалить(ВсегоСтрок - Счетчик);
		Иначе
			Если СтрокаТаблицы.Действие = Перечисления.ВариантыОбеспечения.СоСклада Тогда
				СтрокаТаблицы.КСнятиюРезерваСоСклада = СтрокаТаблицы.КРезервированию;
				СтрокаТаблицы.КРезервированию = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Отказ = Ложь;
	ТекстСообщенияСПараметрами = НСтр("ru = 'Количество к резервированию %1 %2 в строке превышает количество резервов имеющихся в заказе %3 %2'");
	Для Индекс = 0 По Таблица.Количество() - 1 Цикл
		
		Строка = ТаблицаЗаказов[Индекс];
		Если Строка.Количество < Строка.КРезервированию Тогда
			
			ТекстОшибки = СтрШаблон(
				ТекстСообщенияСПараметрами,
				Строка.КРезервированию,
				ЕдиницаИзмерения,
				Строка.Количество);
				
			ПутьКДанным = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ТаблицаЗаказов", Индекс + 1, "КРезервированию");
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Неопределено, "ТаблицаЗаказовКРезервированию", ПутьКДанным, Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если РезервыДругихЗаказов > 0 И ПотребностьПоЗаказу - РезервПодЗаказом - Доступно < РезервыДругихЗаказов Тогда
		ТекстСообщенияСПараметрами = НСтр("ru = 'Количество к резервированию из других заказов %1 %2 превышает максимально допустимое %3 %2'");
			ТекстОшибки = СтрШаблон(
				ТекстСообщенияСПараметрами,
				РезервыДругихЗаказов,
				ЕдиницаИзмерения,
				Макс(0, ПотребностьПоЗаказу - РезервПодЗаказом - Доступно));
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Неопределено, Неопределено, Неопределено, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Таблица.Колонки.КРезервированию.Имя = "КСнятиюРезерваПоМереПоступления";
	Результат = Новый Структура();
	Результат.Вставить("ЗаказНаОтгрузку", ЗаказНаОтгрузку);
	Результат.Вставить("Номенклатура", Номенклатура);
	Результат.Вставить("Характеристика", Характеристика);
	Результат.Вставить("Склад", Склад);
	Результат.Вставить("Назначение", Назначение);
	Результат.Вставить("КРезервированиюВсего",
		Доступно + Таблица.Итог("КСнятиюРезерваСоСклада") + Таблица.Итог("КСнятиюРезерваПоМереПоступления"));
	Результат.Вставить("АдресВХранилище", ПоместитьВоВременноеХранилище(Таблица, ИдентификаторВладельца));
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаЗаказов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаЗаказов.ТолькоПросмотр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

#КонецОбласти