#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ
&НаКлиенте
Перем СтараяНоменклатура; // Используется в механизмах обработчиков событий табличной части Товары
&НаКлиенте
Перем СтараяНоменклатураПартнера; // Используется в механизмах обработчиков событий табличной части Товары
&НаКлиенте
Перем СтараяХарактеристика; // Используется в механизмах обработчиков событий табличной части Товары
&НаКлиенте
Перем ИзмененаЦена; // Используется в механизмах обработчиков событий табличной части Товары

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	КодФормы = "ЗагрузкаЦенПоставщикаИзВнешнихФайлов";
	
	Объект.Дата = КонецДня(ТекущаяДатаСеанса());
	
	ИспользоватьНоменклатуруПартнеров    = ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПартнеров");
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьУпаковкиНоменклатуры       = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	
	ТипДанныхЗаполнения = ТипЗнч(Параметры.Основание);
	Объект.Партнер = Параметры.Партнер;
	
	УстановитьДоступностьВыбораВидовЦен();
	
	Если Параметры.БлокироватьИзменениеОтбораПоПоставщику Тогда
		Элементы.Партнер.ТолькоПросмотр = Параметры.БлокироватьИзменениеОтбораПоПоставщику;
	КонецЕсли;
	
	УстановкаЦенСервер.ИнициализироватьВыбранныеЦены(ЭтотОбъект);
	
	Для Каждого СтрокаТЧ Из ВыбранныеЦены Цикл
		СтрокаТЧ.Выбрана = Параметры.ВидыЦен.Найти(СтрокаТЧ.Ссылка) <> Неопределено;
	КонецЦикла;
	
	ЗаполнитьСлужебныеКолонкиВидовЦен();
	
	УстановитьУсловноеОформлениеУпаковкаЗаказа();
	
	УстановкаЦенСервер.ПостроитьДеревоЦен(ЭтотОбъект);
	ИнициализироватьТабличныйДокумент();
	
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		СопоставлятьСправочники = Истина;
	КонецЕсли;

	Если Не ИспользоватьНоменклатуруПартнеров Тогда
		Элементы.ДеревоЦенНоменклатура.КнопкаВыпадающегоСписка = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ЗагрузкаЦенПоставщикаИзВнешнихФайлов.Форма.ФормаВыбораВидовЦенПоставщика" Тогда
	
		ОбновитьКолонкиВидовЦен(ВыбранноеЗначение);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ПринудительноЗакрытьФорму ИЛИ ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Готово И Модифицированность Тогда
		
		Отказ = Истина;
		
		СписокКнопок = Новый СписокЗначений();
		СписокКнопок.Добавить("Закрыть", НСтр("ru = 'Закрыть'"));
		СписокКнопок.Добавить("НеЗакрывать", НСтр("ru = 'Не закрывать'"));
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ПередЗакрытиемВопросЗавершение", ЭтотОбъект),
			НСтр("ru = 'Работа помощника будет завершена,
			           |все введенные данные будут потеряны. Закрыть помощник?'"),
			СписокКнопок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемВопросЗавершение(ОтветНаВопрос, ДополнительныеПараметры) Экспорт
	
	Если ОтветНаВопрос = "Закрыть" Тогда
		ПринудительноЗакрытьФорму = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	НеВыполнятьПроверкуСопоставленнойНоменклатурыПартнера = Настройки.Получить("НеВыполнятьПроверкуСопоставленнойНоменклатурыПартнера");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаСервере
Процедура ПартнерПриИзмененииНаСервере()
	
	УстановкаЦенСервер.ИнициализироватьВыбранныеЦены(ЭтотОбъект);
	
	НомерКолонки = 3;
	Для Каждого СтрокаТЧ Из УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(ЭтотОбъект) Цикл
		
		СтрокаТЧ.НаименованиеПоиск = ВРег(СтрЗаменить(СтрокаТЧ.Наименование, " ", ""));
		СтрокаТЧ.ИмяКолонкиMXL = НомерКолонки;
		СтрокаТЧ.Выбрана = Истина;
		
		НомерКолонки = НомерКолонки + 1;
		
	КонецЦикла;
	
	УстановкаЦенСервер.ПостроитьДеревоЦен(ЭтотОбъект);
	
	ИнициализироватьТабличныйДокумент();
	
	УстановитьДоступностьВыбораВидовЦен();
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	ПартнерПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Объект.Партнер = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
	
	ПартнерПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзменении(Элемент)
	
	СопоставлятьСправочники = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательЗагружатьТолькоСопоставленнуюНоменклатуру(Команда)
	УстановитьЗагружатьТолькоСопоставленнуюНоменклатуру(Не РегистрироватьТолькоРаспознаннуюНоменклатуру);
КонецПроцедуры
	
	
&НаКлиенте
Процедура УстановитьЗагружатьТолькоСопоставленнуюНоменклатуру(НовоеЗначение)
	
	РегистрироватьТолькоРаспознаннуюНоменклатуру = НовоеЗначение;
	Элементы.ПереключательРегистрироватьТолькоРаспознаннуюНоменклатуру.Пометка = НовоеЗначение;
	
	УстановитьОтборПоТоварам();
КонецПроцедуры

&НаКлиенте
Процедура ВариантОтображенияНоменклатурыПриИзменении(Элемент)
	
	УстановитьОтборПоТоварам();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЦенПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоЦен.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НоменклатураПартнеровКлиент.УстановитьПараметрыВыбораУпаковки(
			Элементы.ДеревоЦенНоменклатураПартнера.ПараметрыВыбора, ТекущиеДанные);
	
	Если ТекущиеДанные.КоличествоНоменклатурыДляВыбора = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивНоменклатурыПартнера = Новый Массив();
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Артикул) Тогда
		
		НайденныеСтроки = НоменклатураПартнера.НайтиСтроки(
			Новый Структура("АртикулПоиск", ВРег(СтрЗаменить(ТекущиеДанные.Артикул, " ", ""))));
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			МассивНоменклатурыПартнера.Добавить(НайденнаяСтрока);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.НоменклатураНаименование) Тогда
		
		НайденныеСтроки = НоменклатураПартнера.НайтиСтроки(
			Новый Структура("Наименование", ВРег(СтрЗаменить(ТекущиеДанные.НоменклатураНаименование, " ", ""))));
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если МассивНоменклатурыПартнера.Найти(НайденнаяСтрока) = Неопределено Тогда
				МассивНоменклатурыПартнера.Добавить(НайденнаяСтрока);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ИспользоватьНоменклатуруПартнеров Тогда
		ЭлементФормы = Элементы.ДеревоЦенНоменклатураПартнера;
	Иначе
		ЭлементФормы = Элементы.ДеревоЦенНоменклатура;
	КонецЕсли;
	
	ЭлементФормы.СписокВыбора.Очистить();
	
	Если МассивНоменклатурыПартнера.Количество() > 0 Тогда
		
		Для Каждого ТекЭлемент Из МассивНоменклатурыПартнера Цикл
			ЭлементФормы.СписокВыбора.Добавить(ТекЭлемент.Ссылка, ТекЭлемент.Наименование + " " + "(" + ТекЭлемент.Артикул + ")");
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЦенПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ДеревоЦен.ТекущиеДанные;
	СтараяНоменклатураПартнера = ТекущиеДанные.НоменклатураПартнера;
	СтараяНоменклатура = ТекущиеДанные.Номенклатура;
	СтараяХарактеристика = ТекущиеДанные.Характеристика;
	ИзмененаЦена = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЦенПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущиеДанные = Элементы.ДеревоЦен.ТекущиеДанные;
	
	Если ТекущиеДанные.Номенклатура <> СтараяНоменклатура Или Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		
		Для Каждого ЭлементНоменклатура Из ДеревоЦен Цикл
			Если (ЭлементНоменклатура.Номенклатура = ТекущиеДанные.Номенклатура И ЭлементНоменклатура.Характеристика = ТекущиеДанные.Характеристика)
				ИЛИ (Не ЗначениеЗаполнено(ЭлементНоменклатура.Номенклатура)
				     И ЭлементНоменклатура.НоменклатураПартнера = ТекущиеДанные.НоменклатураПартнера) Тогда
				
				Если ТекущиеДанные.ПолучитьИдентификатор() <> ЭлементНоменклатура.ПолучитьИдентификатор() И ЗначениеЗаполнено(ЭлементНоменклатура.Номенклатура) Тогда
					Если Не ОтменаРедактирования Тогда
						Отказ = Истина;
						ОчиститьСообщения();
						ОбщегоНазначенияКлиент.СообщитьПользователю(
							НСтр("ru = 'Такая номенклатура уже введена.'"),,
							"ДеревоЦен");
					Иначе
						ТекущиеДанные.Номенклатура = СтараяНоменклатура;
						ТекущиеДанные.Характеристика = СтараяХарактеристика;
					КонецЕсли;
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ДеревоЦенНоменклатураПриИзмененииСервер(Элементы.ДеревоЦен.ТекущиеДанные.ПолучитьИдентификатор());
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура)
		И Не ЗначениеЗаполнено(ТекущиеДанные.НоменклатураПартнера) Тогда
		Если Не ОтменаРедактирования Тогда
			Отказ = Истина;
			ОчиститьСообщения();
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Номенклатура не выбрана.'"),,
				"ДеревоЦен");
		Иначе
			ТекущиеДанные.НоменклатураПартнера = СтараяНоменклатураПартнера;
			ТекущиеДанные.Номенклатура = СтараяНоменклатура;
			ТекущиеДанные.Характеристика = СтараяХарактеристика;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанные.Характеристика <> СтараяХарактеристика Тогда
		
		Для Каждого ЭлементНоменклатура Из ДеревоЦен Цикл
			Если (ЭлементНоменклатура.Номенклатура = ТекущиеДанные.Номенклатура И ЭлементНоменклатура.Характеристика = ТекущиеДанные.Характеристика)
				ИЛИ (Не ЗначениеЗаполнено(ЭлементНоменклатура.Номенклатура)
					И ЗначениеЗаполнено(ЭлементНоменклатура.НоменклатураПартнера)
					И ЭлементНоменклатура.НоменклатураПартнера = ТекущиеДанные.НоменклатураПартнера) Тогда
				
				Если ТекущиеДанные.ПолучитьИдентификатор() <> ЭлементНоменклатура.ПолучитьИдентификатор() Тогда
					Если Не ОтменаРедактирования Тогда
						Отказ = Истина;
						ОчиститьСообщения();
						ОбщегоНазначенияКлиент.СообщитьПользователю(
							НСтр("ru = 'Такая номенклатура уже введена.'"),,
							"ДеревоЦен");
					Иначе
						ТекущиеДанные.Номенклатура = СтараяНоменклатура;
						ТекущиеДанные.Характеристика = СтараяХарактеристика;
					КонецЕсли;
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ДеревоЦенХарактеристикаПриИзмененииСервер(Элементы.ДеревоЦен.ТекущиеДанные.ПолучитьИдентификатор());
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЦенНоменклатураПартнераОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.ДеревоЦен.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураПартнера) Тогда
		
		СтандартнаяОбработка = Ложь;
		Элементы.ДеревоЦен.ЗакончитьРедактированиеСтроки(Истина);
		
	КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыДеревоЦен

&НаКлиенте
Процедура ДеревоЦенНоменклатураПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.ДеревоЦен.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПартнераПоНоменклатуре", Объект.Партнер);
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьСопоставленнуюНоменклатуруПартнера",
		ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПроверкиСопоставленнойНоменклатурыПоставщикаВСтрокеТЧ(
			Новый Структура(
				"Ссылка, Партнер",
				ПредопределенноеЗначение("Документ.РегистрацияЦенНоменклатурыПоставщика.ПустаяСсылка"),
				Объект.Партнер),
			НеВыполнятьПроверкуСопоставленнойНоменклатурыПартнера));
	
	ДополнительныеПараметрыЗаполнения = Новый Структура("НомерСтроки", Элементы.ДеревоЦен.ТекущаяСтрока);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения, ДополнительныеПараметрыЗаполнения);

	ТекущаяСтрока.СтрокаСопоставлена = ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура);
	
	ПометитьДублиТабличнойЧасти();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЦенХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ДеревоЦен.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПартнераПоНоменклатуре", Объект.Партнер);
	СтруктураДействий.Вставить("ПроверитьСопоставленнуюНоменклатуруПартнера",
		ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПроверкиСопоставленнойНоменклатурыПоставщикаВСтрокеТЧ(
			Новый Структура(
				"Ссылка, Партнер",
				ПредопределенноеЗначение("Документ.РегистрацияЦенНоменклатурыПоставщика.ПустаяСсылка"),
				Объект.Партнер),
			НеВыполнятьПроверкуСопоставленнойНоменклатурыПартнера));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЦенНоменклатураПартнераПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ДеревоЦен.ТекущиеДанные;
	
	НоменклатураПартнеровКлиент.УстановитьПараметрыВыбораУпаковки(Элемент.ПараметрыВыбора, ТекущаяСтрока);

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоНоменклатуреПартнера");
	СтруктураДействий.Вставить("ПроверитьСопоставленнуюНоменклатуруПартнера",
		ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПроверкиСопоставленнойНоменклатурыПоставщикаВСтрокеТЧ(
			Новый Структура(
				"Ссылка,Партнер",
				ПредопределенноеЗначение("Документ.РегистрацияЦенНоменклатурыПоставщика.ПустаяСсылка"),
				Объект.Партнер),
			НеВыполнятьПроверкуСопоставленнойНоменклатурыПартнера));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	Если ИспользоватьУпаковкиНоменклатуры Тогда
		ВидыЦен = УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(ЭтотОбъект);
		ИзменитьУпаковкиПоВидамЦен(ТекущаяСтрока);
	КонецЕсли;
	
	ТекущаяСтрока.СтрокаСопоставлена = ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура);
	
	ПометитьДублиТабличнойЧасти();
	
КонецПроцедуры
 
&НаКлиенте
Процедура ИзменитьУпаковкиПоВидамЦен(ТекущаяСтрока)
	ИзменитьУпаковкиПоВидамЦенНаСервере(ТекущаяСтрока.ПолучитьИдентификатор());
КонецПроцедуры

&НаСервере
Процедура ИзменитьУпаковкиПоВидамЦенНаСервере(ИдентификаторСтроки)

	ВидыЦен = УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(ЭтотОбъект);
	ТекущаяСтрока = ДеревоЦен.НайтиПоИдентификатору(ИдентификаторСтроки);
	Для Каждого ВидЦены Из ВидыЦен Цикл
		ИмяКолонкиУпаковка = "Упаковка" + ВидЦены.ИмяКолонки;
		Если ТекущаяСтрока[ИмяКолонкиУпаковка] <> ТекущаяСтрока.Упаковка Тогда
			ТекущаяСтрока[ИмяКолонкиУпаковка] = ТекущаяСтрока.Упаковка;
			ДеревоЦенУпаковкаПриИзмененииНаСервере(ИдентификаторСтроки, ИмяКолонкиУпаковка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//   Элемент - ПолеФормы - 
&НаКлиенте
Процедура ДеревоЦенЦенаПриИзмененииКлиент(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоЦен.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТекущейКолонки  = СтрЗаменить(Элемент.Имя, "ДеревоЦен", "");
	Если СтрНайти(ИмяТекущейКолонки, "ПроцентИзменения" + "ВидЦены") Тогда
		ИмяТекущейКолонки = СтрЗаменить(ИмяТекущейКолонки, "ПроцентИзменения" + "ВидЦены", "ВидЦены");
		ТекущиеДанные[ИмяТекущейКолонки] = Окр(
			ТекущиеДанные["СтараяЦена" + ИмяТекущейКолонки]
			*((ТекущиеДанные["ПроцентИзменения" + ИмяТекущейКолонки] / 100) + 1), 15, 2);
	КонецЕсли;
	
	ИмяКолонкиУпаковка = СтрЗаменить(
		СтрЗаменить(Элемент.Имя, "ПроцентИзменения" + "ВидЦены", "ВидЦены"), "ДеревоЦен" + "ВидЦены", "Упаковка" + "ВидЦены");
		
	Если СтрНайти(ИмяТекущейКолонки, "СуммаИзменения" + "ВидЦены") Тогда
		ИмяТекущейКолонки = СтрЗаменить(ИмяТекущейКолонки, "СуммаИзменения" + "ВидЦены", "ВидЦены");
		ТекущиеДанные[ИмяТекущейКолонки] = ТекущиеДанные["СтараяЦена" + ИмяТекущейКолонки] + ТекущиеДанные["СуммаИзменения" + ИмяТекущейКолонки];
		Если ТекущиеДанные["СтараяЦена" + ИмяТекущейКолонки] <> 0 Тогда
			ТекущиеДанные["ПроцентИзменения"+ИмяТекущейКолонки] = ТекущиеДанные[ИмяТекущейКолонки] / ТекущиеДанные["СтараяЦена" + ИмяТекущейКолонки] * 100;
		Иначе
			ТекущиеДанные["ПроцентИзменения"+ИмяТекущейКолонки] = 0;
		КонецЕсли;
		ИмяКолонкиУпаковка = СтрЗаменить(СтрЗаменить(Элемент.Имя, "СуммаИзменения" + "ВидЦены", "ВидЦены"), "ДеревоЦен" + "ВидЦены", "Упаковка" + "ВидЦены");
	КонецЕсли;
	
	ТекущаяСтрока = ДеревоЦен.НайтиПоИдентификатору(ТекущиеДанные.ПолучитьИдентификатор());
	
	ТекущиеДанные["ИзмененаВручную"+ИмяТекущейКолонки] = Истина;
	ТекущиеДанные["ЦеныИзменены"] = Истина;
	
	Если ТекущиеДанные["СтараяЦена"+ИмяТекущейКолонки] <> 0 Тогда
		ТекущиеДанные["ПроцентИзменения"+ИмяТекущейКолонки] = Окр(
			100 * (ТекущиеДанные[ИмяТекущейКолонки]
			       - ТекущиеДанные["СтараяЦена"+ИмяТекущейКолонки]) / ТекущиеДанные["СтараяЦена"+ИмяТекущейКолонки],5,2);
	Иначе
		ТекущиеДанные["ПроцентИзменения"+ИмяТекущейКолонки] = 0;
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//   Элемент - ПолеФормы - 
&НаКлиенте
Процедура ДеревоЦенУпаковкаПриИзмененииКлиент(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоЦен.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТекущейКолонки = СтрЗаменить(Элемент.Имя, "ДеревоЦен", "");

	ДеревоЦенУпаковкаПриИзмененииНаСервере(ТекущиеДанные.ПолучитьИдентификатор(), ИмяТекущейКолонки);
	
КонецПроцедуры

&НаСервере
Процедура ДеревоЦенУпаковкаПриИзмененииНаСервере(Идентификатор, ИмяТекущейКолонки)
	УстановкаЦенСервер.ДеревоЦенУпаковкаВалютаПриИзменении(ЭтотОбъект, Идентификатор, ИмяТекущейКолонки);
КонецПроцедуры

// Параметры:
//   Элемент - ПолеФормы - 
&НаКлиенте
Процедура Подключаемый_ДеревоЦенЦенаПриИзменении(Элемент)
	
	ИзмененаЦена = Истина;
	ДеревоЦенЦенаПриИзмененииКлиент(Элемент);
	
КонецПроцедуры

// Параметры:
//   Элемент - ПолеФормы - 
&НаКлиенте
Процедура Подключаемый_ДеревоЦенУпаковкаПриИзменении(Элемент)

	ДеревоЦенУпаковкаПриИзмененииКлиент(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ДеревоЦенНоменклатураПартнераНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = Элементы.ДеревоЦен.ТекущиеДанные;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЭлементФормы" , Элемент);
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	
	ОповещениеОЗакрытие = Новый ОписаниеОповещения("ОбработатьРезультатВыбораНоменклатурыПартнера", ЭтотОбъект, ДополнительныеПараметры);

	НоменклатураПартнеровКлиент.ОткрытьФормуВыбораНоменклатурыПартнера(ЭтотОбъект, Объект.Партнер, ТекущаяСтрока, Элемент.Заголовок, ОповещениеОЗакрытие);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Далее(Команда)
	
	Если Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг1 Тогда

		ОчиститьСообщения();
		Если Не ПроверитьЗаполнение() Тогда
			Возврат;
		КонецЕсли;
		
		Попытка
			ЗаполненаНоменклатураАртикул = ЗначениеЗаполнено(ТабличныйДокумент.Область("R2C1").Текст)
				                           Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R2C2").Текст);
		Исключение
			ОбщегоНазначенияКлиент.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		Если Не ЗаполненаНоменклатураАртикул Тогда
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Необходимо скопировать колонки в таблицу из внешнего файла.'"));
			Возврат;
		КонецЕсли;
		
		Если СопоставлятьСправочники Тогда
			ОчиститьСообщения();
			Состояние(НСтр("ru = 'Осуществляется сопоставление введенных данных
			                     |с данными информационной базы. Пожалуйста подождите...'"),,,БиблиотекаКартинок.Информация32);
			СопоставитьДанныеТабличногоДокументаСНоменклатуройПоставщика();
		КонецЕсли;
		
		Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг2;
		
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг2 Тогда
		
		ОчиститьСообщения();
		
		НоменклатураПоставщикаОбновлена = Истина;
		
		Если ИспользоватьНоменклатуруПартнеров Тогда
			НоменклатураПоставщикаОбновлена = ЗаписатьНоменклатуруПоставщика();
		КонецЕсли;
	
		Если НоменклатураПоставщикаОбновлена И (РегистрироватьТолькоРаспознаннуюНоменклатуру Или ПроверитьЗаполнение()) Тогда
			
			Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг3;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьТекущуюСтраницуПанелиНавигации();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатЗагрузкиПриОтветеНаВопрос(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Или Результат.Результат = "Подробнее" Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг3;
	УстановитьТекущуюСтраницуПанелиНавигации();
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	Если Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг2 Тогда
		
		Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг1;
		
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг3 Тогда
		
		Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг2;
		
	КонецЕсли;
	
	УстановитьТекущуюСтраницуПанелиНавигации();
	
КонецПроцедуры

&НаКлиенте
Процедура Справка(Команда)
	
	ОткрытьСправкуФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура Готово(Команда)
	
	ОчиститьСообщения();
	
	ЗавершитьРаботуПомощника();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	
	Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВидыЦен(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Партнер", Объект.Партнер);
	ПараметрыОткрытия.Вставить("ВыбранныеВидыЦен", УстановкаЦенКлиентСервер.ВыбранныеВидыЦен(ЭтотОбъект));
	
	ОткрытьФорму(
		"Обработка.ЗагрузкаЦенПоставщикаИзВнешнихФайлов.Форма.ФормаВыбораВидовЦенПоставщика",
		ПараметрыОткрытия,
		ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЦенНоменклатураПартнера.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЦен.НоменклатураПартнера");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЦен.КоличествоНоменклатурыДляВыбора");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("РегистрироватьТолькоРаспознаннуюНоменклатуру");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение	= Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Green);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<будет создана при регистрации>'"));
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЦенНоменклатураПартнера.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЦен.НоменклатураПартнера");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЦен.КоличествоНоменклатурыДляВыбора");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("РегистрироватьТолькоРаспознаннуюНоменклатуру");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение	= Истина ;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.FireBrick);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не будет создана при регистрации>'"));

	Если ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПартнеров") Тогда
	
		//

		Элемент = УсловноеОформление.Элементы.Добавить();

		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЦенНоменклатураПартнера.Имя);

		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЦен.НоменклатураПартнера");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЦен.КоличествоНоменклатурыДляВыбора");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.FireBrick);
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Необходимо сопоставить вручную>'"));

	Иначе
		
		//

		Элемент = УсловноеОформление.Элементы.Добавить();

		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЦенНоменклатура.Имя);

		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЦен.Номенклатура");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.FireBrick);
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Необходимо сопоставить вручную>'"));
		
	КонецЕсли;
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЦенНоменклатураПартнера.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЦенНаименование.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЦен.НоменклатураНаименованиеОтличается");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.LightGoldenRod);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЦенНоменклатураПартнера.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЦенАртикул.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЦен.АртикулОтличается");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.LightGoldenRod);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтотОбъект, "ДеревоЦен" + "Характеристика", "ДеревоЦен.ХарактеристикиИспользуются");

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЦенНоменклатура.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЦенХарактеристика.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЦен.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьНоменклатуруПартнеров");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.FireBrick);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<пропущена при регистрации>'"));
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРегистрацииЦен(Команда)
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РегистрироватьИзмененныеЦены",					РегистрироватьИзмененныеЦены);
	ПараметрыФормы.Вставить("РегистрироватьТолькоРаспознаннуюНоменклатуру",	РегистрироватьТолькоРаспознаннуюНоменклатуру);
	
	ОткрытьФорму(
		"Обработка.ЗагрузкаЦенПоставщикаИзВнешнихФайлов.Форма.ФормаНастройкиРегистрацииЦен",
		ПараметрыФормы,
		ЭтотОбъект,,,, Новый ОписаниеОповещения("НастройкаРегистрацииЦенЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРегистрацииЦенЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РегистрироватьИзмененныеЦены				 = Результат.РегистрироватьИзмененныеЦены;
	РегистрироватьТолькоРаспознаннуюНоменклатуру = Результат.РегистрироватьТолькоРаспознаннуюНоменклатуру;
	
	УстановитьОтборПоТоварам();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеУпаковкаЗаказа()
	
	// Упаковка заказа не найдена
	
	Для Каждого СтрокаТЧ Из УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(ЭтотОбъект) Цикл
		
		ИмяКолонкиУпаковкаЗаполнена = "ДеревоЦен.УпаковкаЗаполнена" + СтрокаТЧ.ИмяКолонки;
		ИмяКолонкиУпаковкаЗаказа    = "ДеревоЦен" + "УпаковкаЗаказа"    + СтрокаТЧ.ИмяКолонки;
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяКолонкиУпаковкаЗаказа);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяКолонкиУпаковкаЗаполнена);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЦен.УпаковкаЗаказа" + СтрокаТЧ.ИмяКолонки);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЦен.Номенклатура" + СтрокаТЧ.ИмяКолонки);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.FireBrick);
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Упаковка не найдена>'"));
		
	КонецЦикла;

КонецПроцедуры

#Область Прочее

&НаСервере
Процедура ОбновитьКолонкиВидовЦен(ВыбранноеЗначение)
	
	УстановкаЦенСервер.ПеречитатьВыбранныеЦены(ЭтотОбъект);
	
	Для Каждого СтрокаТЧ Из ВыбранныеЦены Цикл
		СтрокаТЧ.Выбрана = НЕ ВыбранноеЗначение.Найти(СтрокаТЧ.Ссылка) = Неопределено;
	КонецЦикла;
	
	ЗаполнитьСлужебныеКолонкиВидовЦен();
	
	ИнициализироватьТабличныйДокумент();
	УстановкаЦенСервер.ПостроитьДеревоЦен(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеКолонкиВидовЦен()

	НомерКолонки = 3;
	Для Каждого СтрокаТЧ Из ВыбранныеЦены Цикл
		
		СтрокаТЧ.НаименованиеПоиск = ВРег(СтрЗаменить(СтрокаТЧ.Наименование, " ", ""));
		Если СтрокаТЧ.Выбрана Тогда
			СтрокаТЧ.ИмяКолонкиMXL = НомерКолонки;
			НомерКолонки = НомерКолонки + 1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьТабличныйДокумент()
	
	Макет = Документы.РегистрацияЦенНоменклатурыПоставщика.ПолучитьМакет("ЗагрузкаЦен");
	
	ТабличныйДокумент.Очистить();
	
	ОбластьТовар = Макет.ПолучитьОбласть("Товар");
	ТабличныйДокумент.Присоединить(ОбластьТовар);
	
	Для Каждого СтрокаТЧ Из ВыбранныеЦены Цикл
		
		Если Не СтрокаТЧ.Выбрана Тогда
			Продолжить;
		КонецЕсли;
		ОбластьВидЦены = Макет.ПолучитьОбласть("ВидЦены");
		ОбластьВидЦены.Параметры.ВидЦены = СтрокаТЧ.Ссылка;
		ОбластьВидЦены.Параметры.МинПартия = СтрШаблон(НСтр("ru = 'Мин. партия %1'"), СтрокаТЧ.Ссылка);
		
		ТабличныйДокумент.Присоединить(ОбластьВидЦены);
		
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			ОбластьУпаковкаЗаказа = Макет.ПолучитьОбласть("УпаковкаЗаказа");
			ОбластьУпаковкаЗаказа.Параметры.УпаковкаЗаказа = СтрШаблон(НСтр("ru = 'Упаковка заказа %1'"), СтрокаТЧ.Ссылка);
			ТабличныйДокумент.Присоединить(ОбластьУпаковкаЗаказа)
		КонецЕсли;
		
	КонецЦикла;
	
	ТабличныйДокумент.ФиксацияСверху = 1;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьВыбораВидовЦен()
	Элементы.ВыбратьВидыЦен.Доступность = ЗначениеЗаполнено(Объект.Партнер);
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоТоварам()
	
	Элементы.ДеревоЦен.ОтборСтрок = Неопределено;
	
	ПараметрыОтбора = Новый Структура();
	
	Если ВариантОтображенияНоменклатуры = 1 Тогда
		ПараметрыОтбора.Вставить("СтрокаСопоставлена", Ложь);
	ИначеЕсли ВариантОтображенияНоменклатуры = 2 Тогда
		ПараметрыОтбора.Вставить("ЭтоДубль", Истина);
	ИначеЕсли ВариантОтображенияНоменклатуры = 3 Тогда
		ПараметрыОтбора.Вставить("СтрокаСопоставлена", Истина);
		ПараметрыОтбора.Вставить("ЭтоДубль", Ложь);
	КонецЕсли;
	
	Если ПоказыватьИзмененныеЦены <> 0 Тогда
		ПараметрыОтбора.Вставить("ЦеныИзменены", Истина);
	КонецЕсли;

	Элементы.ДеревоЦен.ОтборСтрок = Новый ФиксированнаяСтруктура(ПараметрыОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьИзмененныеЦеныПриИзменении(Элемент)
	УстановитьОтборПоТоварам();
КонецПроцедуры

&НаСервере
Процедура СвязатьНоменклатуруСНоменклатуройПоставщикаСервер(Отказ)
	
	НоменклатураПартнеровСервер.ЗаполнитьПустоеСопоставлениеВНоменклатуреПартнераПоНоменклатуреИБ(Объект.Товары, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРаботуПомощника()
	
	Состояние(НСтр("ru = 'Осуществляется создание документа
	                     |регистрации цен поставщика. Пожалуйста подождите...'"),,,БиблиотекаКартинок.Информация32);
	
	Объект.Товары.Очистить();
	
	Для Каждого СтрокаТЧ Из ДеревоЦен Цикл
		
		Для Каждого ВидЦены Из УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(ЭтотОбъект) Цикл
			
			НоваяЦена = СтрокаТЧ[ВидЦены.ИмяКолонки];
			ПроцентИзменения = СтрокаТЧ["ПроцентИзменения" + ВидЦены.ИмяКолонки];
			ЕстьОшибкиВСтроке = СтрокаТЧ["ЭтоДубль"] Или Не СтрокаТЧ["СтрокаСопоставлена"];
			
			Если 
				НоваяЦена = 0
				Или (РегистрироватьИзмененныеЦены И ПроцентИзменения = 0) 
				Или (РегистрироватьТолькоРаспознаннуюНоменклатуру И ЕстьОшибкиВСтроке)
				Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			Если ИспользоватьУпаковкиНоменклатуры Тогда
				НоваяСтрока.Упаковка = СтрокаТЧ["Упаковка" + ВидЦены.ИмяКолонки];
				НоваяСтрока.УпаковкаЗаказа = СтрокаТЧ["УпаковкаЗаказа" + ВидЦены.ИмяКолонки];
			КонецЕсли;
			НоваяСтрока.НоваяЦена = НоваяЦена;
			НоваяСтрока.ВидЦеныПоставщика = ВидЦены.Ссылка;
			НоваяСтрока.МинимальнаяПартияПоставки = СтрокаТЧ["МинимальнаяПартияПоставки" + ВидЦены.ИмяКолонки];
			
		КонецЦикла;
		
	КонецЦикла;
	
	СвязатьНоменклатуруСНоменклатуройПоставщикаСервер(Ложь);

	ДокументРегистрацииЦен = СоздатьДокументРегистрацииЦенНоменклатурыПоставщика();
	Если ДокументРегистрацииЦен <> Неопределено Тогда
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ДокументРегистрацииЦен);
		ПоказатьОповещениеПользователя(НСтр("ru = 'Создан документ'"),
										НавигационнаяСсылка,
									ДокументРегистрацииЦен,
									БиблиотекаКартинок.Информация32);
									Оповестить("Запись_РегистрацияЦенНоменклатурыПоставщика",
									, 
									ДокументРегистрацииЦен);
		Готово = Истина;
		Закрыть();
	Иначе
		ОбновитьСтарыеЦеныНоменклатурыНаСервере();
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не удалось создать документ регистрации цен поставщика'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущуюСтраницуПанелиНавигации()
	
	Если Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг1 Тогда
		Элементы.Навигация.ТекущаяСтраница = Элементы.НавигацияНачало;
		Элементы.НачалоДалее.КнопкаПоУмолчанию = Истина;
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг3 Тогда
		Элементы.Навигация.ТекущаяСтраница = Элементы.НавигацияОкончание;
		Элементы.ОкончаниеГотово.КнопкаПоУмолчанию = Истина;
		
		ИнформационнаяСтрокаПоРегистрируемымЦенам = ОбновитьИнформационнуюСтроку();
				
	Иначе
		Элементы.Навигация.ТекущаяСтраница = Элементы.НавигацияПродолжение;
		Элементы.ПродолжениеДалее.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОбновитьИнформационнуюСтроку()

	ФорматированнаяСтрока1 = ""; 
	ФорматированнаяСтрока2 = ""; 
	ФорматированнаяСтрока3 = ""; 
	ФорматированнаяСтрока4 = ""; 
	ФорматированнаяСтрока5 = ""; 

	ДанныеДляИнформационнойСтроки = Новый Структура();
	ДанныеДляИнформационнойСтроки.Вставить("ВсегоСтрок", 			ДеревоЦен.Количество());
	ДанныеДляИнформационнойСтроки.Вставить("БезОшибокСтрок", 		ДеревоЦен.Количество());
	ДанныеДляИнформационнойСтроки.Вставить("ДублирующихСтрок", 		0);
	ДанныеДляИнформационнойСтроки.Вставить("НеРаспознанныхСтрок", 	0);
	ДанныеДляИнформационнойСтроки.Вставить("ВыбранныеЦены", 		0);
	
	Для Каждого Строка Из ВыбранныеЦены Цикл
		Если Строка.Выбрана Тогда
			ДанныеДляИнформационнойСтроки.ВыбранныеЦены = ДанныеДляИнформационнойСтроки.ВыбранныеЦены + 1; 
		КонецЕсли;
	КонецЦикла;
		
	Для Каждого Строка Из ДеревоЦен Цикл
		Если Строка.ЭтоДубль или Не Строка.СтрокаСопоставлена Тогда
			
			ДанныеДляИнформационнойСтроки.БезОшибокСтрок = ДанныеДляИнформационнойСтроки.БезОшибокСтрок - 1;
			
			Если Строка.ЭтоДубль Тогда
				ДанныеДляИнформационнойСтроки.ДублирующихСтрок = ДанныеДляИнформационнойСтроки.ДублирующихСтрок + 1;
			КонецЕсли;
			
			Если Не Строка.СтрокаСопоставлена Тогда
				ДанныеДляИнформационнойСтроки.НеРаспознанныхСтрок = ДанныеДляИнформационнойСтроки.НеРаспознанныхСтрок + 1;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если РегистрироватьТолькоРаспознаннуюНоменклатуру Тогда
		Если ДанныеДляИнформационнойСтроки.БезОшибокСтрок = 0 Тогда
			ФорматированнаяСтрока1 = Новый ФорматированнаяСтрока(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Цены не будут загружены т.к. не распознаны все (%1) строки прайс листа.'"),ДанныеДляИнформационнойСтроки.ВсегоСтрок), Новый Шрифт(,,Истина));
		Иначе
			ФорматированнаяСтрока1 = Новый ФорматированнаяСтрока(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Будет загружено %1 из %2 строк прайс листа по %3 видам цен.'"),ДанныеДляИнформационнойСтроки.БезОшибокСтрок, ДанныеДляИнформационнойСтроки.ВсегоСтрок, ДанныеДляИнформационнойСтроки.ВыбранныеЦены), Новый Шрифт(,,Истина));
		КонецЕсли;
	Иначе
		ФорматированнаяСтрока1 = Новый ФорматированнаяСтрока(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Будет загружено %1 из %2 строк прайс листа по %3 видам цен.'"),ДанныеДляИнформационнойСтроки.ВсегоСтрок, ДанныеДляИнформационнойСтроки.ВсегоСтрок, ДанныеДляИнформационнойСтроки.ВыбранныеЦены), Новый Шрифт(,,Истина));
	КонецЕсли;
	
	Если (ДанныеДляИнформационнойСтроки.НеРаспознанныхСтрок > 0 
		Или ДанныеДляИнформационнойСтроки.ДублирующихСтрок > 0) 
		И Не (ДанныеДляИнформационнойСтроки.БезОшибокСтрок = 0 И РегистрироватьТолькоРаспознаннуюНоменклатуру) Тогда
		
		Если ДанныеДляИнформационнойСтроки.НеРаспознанныхСтрок > 0 Тогда
			ФорматированнаяСтрока2 = Новый ФорматированнаяСтрока(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru=' Нераспознанные (%1)'"), ДанныеДляИнформационнойСтроки.НеРаспознанныхСтрок), Новый Шрифт(,,Истина));
		КонецЕсли;
		
		Если ДанныеДляИнформационнойСтроки.ДублирующихСтрок > 0 Тогда
			Если ДанныеДляИнформационнойСтроки.НеРаспознанныхСтрок > 0 Тогда
				ФорматированнаяСтрока3 = Новый ФорматированнаяСтрока(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru=' и дублирующие (%1)'"), ДанныеДляИнформационнойСтроки.ДублирующихСтрок), Новый Шрифт(,,Истина));
			Иначе
				ФорматированнаяСтрока3 = Новый ФорматированнаяСтрока(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru=' Дублирующие (%1)'"), ДанныеДляИнформационнойСтроки.ДублирующихСтрок), Новый Шрифт(,,Истина));
			КонецЕсли;
		КонецЕсли;

		Если РегистрироватьТолькоРаспознаннуюНоменклатуру Тогда
			ФорматированнаяСтрока4 = Новый ФорматированнаяСтрока(НСтр("ru=' строки исключены из загрузки.'"), Новый Шрифт(,,Истина));
		Иначе
			ФорматированнаяСтрока4 = Новый ФорматированнаяСтрока(НСтр("ru=' строки будут также загружены.'"), Новый Шрифт(,,Истина));
		КонецЕсли;

		
	КонецЕсли;
	
	ФорматированнаяСтрока5 = Новый ФорматированнаяСтрока(НСтр("ru=' При необходимости, добавьте комментарий к изменению цен.'"), Новый Шрифт(,,Истина));

	Возврат Новый ФорматированнаяСтрока(ФорматированнаяСтрока1, 
										ФорматированнаяСтрока2, 
										ФорматированнаяСтрока3,
										ФорматированнаяСтрока4,
										ФорматированнаяСтрока5);
	
КонецФункции

&НаСервере
Процедура ОбновитьСтарыеЦеныНоменклатурыНаСервере()
	
	КэшДанных = Неопределено;
	
	ТаблицаНоменклатуры = УстановкаЦенСервер.ТаблицаТовары(ЭтотОбъект, КэшДанных);
	УстановкаЦенСервер.ЗагрузитьСтарыеЦеныНоменклатурыПоставщика(ЭтотОбъект, ТаблицаНоменклатуры, КэшДанных);
	
КонецПроцедуры

&НаСервере
Процедура ДеревоЦенХарактеристикаПриИзмененииСервер(ИдентификаторСтроки, РассчитатьЦены = Истина)
	
	УстановкаЦенСервер.ДеревоЦенХарактеристикаПриИзменении(ЭтотОбъект, ИдентификаторСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ДеревоЦенНоменклатураПриИзмененииСервер(ИдентификаторСтроки)
	
	ТекущаяСтрока = ДеревоЦен.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ВидыЦен = УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(ЭтотОбъект);
	Для Каждого ВидЦены Из ВидыЦен Цикл
		
		ИмяКолонки         = ВидЦены.ИмяКолонки;
		ИмяКолонкиУпаковка = "Упаковка" + ИмяКолонки;
		
		Если ИспользоватьУпаковкиНоменклатуры И ЗначениеЗаполнено(ТекущаяСтрока[ИмяКолонкиУпаковка]) Тогда
			ТекущаяСтрока[ИмяКолонкиУпаковка] = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
		КонецЕсли;
		
	КонецЦикла;
	
	КэшДанных = УстановкаЦенСервер.ИнициализироватьСтруктуруКэшаДанных();
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СправочникНоменклатура.ЦеноваяГруппа    КАК ЦеноваяГруппа,
		|	СправочникНоменклатура.Артикул          КАК Артикул,
		|	ВЫБОР
		|		КОГДА СправочникНоменклатура.ИспользованиеХарактеристик
		|		В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
		|		   ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры),
		|		   ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры))
		|		ТОГДА ИСТИНА
		|	ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ХарактеристикиИспользуются
		|ИЗ
		|	Справочник.Номенклатура КАК СправочникНоменклатура
		|ГДЕ
		|	СправочникНоменклатура.Ссылка = &Номенклатура
		|");
		
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			
			Запрос.Текст = Запрос.Текст + "
			|;
			|ВЫБРАТЬ
			|	ЦеныНоменклатуры.Характеристика    КАК Характеристика,
			|	ЦеныНоменклатуры.ВидЦеныПоставщика КАК ВидЦены,
			|	ЦеныНоменклатуры.Упаковка          КАК Упаковка
			|ИЗ
			|	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(&ДатаДокумента,
			|	                                                          Номенклатура = &Номенклатура
			|	                                                          И ВидЦеныПоставщика В (&ВидыЦен)) КАК ЦеныНоменклатуры
			|";
			
			Запрос.УстановитьПараметр("ВидыЦен",       УстановкаЦенКлиентСервер.ВыбранныеВидыЦен(ЭтотОбъект));
			Запрос.УстановитьПараметр("ДатаДокумента", НачалоДня(Объект.Дата) - 1);
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Номенклатура", ТекущаяСтрока.Номенклатура);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		РезультатЗапроса = МассивРезультатов[0]; // РезультатЗапроса
		ВыборкаНоменклатура = РезультатЗапроса.Выбрать();
		
		Если ВыборкаНоменклатура.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ВыборкаНоменклатура,,"Артикул");
		КонецЕсли;
		
		Если ИспользоватьУпаковкиНоменклатуры Тогда
				РезультатЗапроса = МассивРезультатов[1]; // РезультатЗапроса
				ВыборкаУпаковки = РезультатЗапроса.Выбрать();
			Пока ВыборкаУпаковки.Следующий() Цикл
				ТекущаяСтрока["Упаковка" + УстановкаЦенСервер.ИмяКолонкиПоВидуЦены(ВыборкаУпаковки.ВидЦены, КэшДанных)] = ВыборкаУпаковки.Упаковка;
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		
		ТекущаяСтрока.ЕдиницаИзмерения = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
		
	КонецЕсли;
	
	// Загрузка старых цен и процента изменения
	ТаблицаЗначений = УстановкаЦенСервер.СоздатьТаблицуТовары(Истина);//ТаблицаЗначений
	Для Каждого СтрокаВидЦены Из УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(ЭтотОбъект) Цикл
		
		ИмяКолонки = СтрокаВидЦены.ИмяКолонки;
		ИмяКолонкиУпаковка = "Упаковка" + ИмяКолонки;
		
		НоваяСтрока = ТаблицаЗначений.Добавить();
		НоваяСтрока.НоменклатураПартнера = ТекущаяСтрока.НоменклатураПартнера;
		НоваяСтрока.Номенклатура           = ТекущаяСтрока.Номенклатура;
		НоваяСтрока.Характеристика         = ТекущаяСтрока.Характеристика;
		НоваяСтрока.ВидЦены                = СтрокаВидЦены.Ссылка;
		НоваяСтрока.Цена                   = ТекущаяСтрока[ИмяКолонки];
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			НоваяСтрока.Упаковка = ТекущаяСтрока[ИмяКолонкиУпаковка];
		КонецЕсли;
		
	КонецЦикла;
	
	УстановкаЦенСервер.ЗагрузитьСтарыеЦеныНоменклатуры(ЭтотОбъект, ТаблицаЗначений, КэшДанных);
	
КонецПроцедуры

&НаСервере
Функция СоздатьДокументРегистрацииЦенНоменклатурыПоставщика()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ДокументРегистрацииЦен = ОбработкаОбъект.СоздатьДокументРегистрацииЦенНоменклатурыПоставщика(РегистрироватьИзмененныеЦены);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	Возврат ДокументРегистрацииЦен;
	
КонецФункции

&НаСервере
Процедура СопоставитьДанныеТабличногоДокументаСНоменклатуройПоставщика()
	
	ДеревоЦен.Очистить();
	
	// Подготовка таблицы товаров для сопоставления
	Если ИспользоватьНоменклатуруПартнеров Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Т.Артикул      КАК Артикул,
		|	Т.Артикул      КАК АртикулПоиск,
		|	Т.Наименование КАК Наименование,
		|	Т.НаименованиеНоменклатуры КАК НаименованиеПоиск,
		|	Т.Номенклатура   КАК Номенклатура,
		|	Т.Характеристика КАК Характеристика,
		|	Т.Упаковка       КАК Упаковка,
		|	Т.Ссылка         КАК Ссылка
		|ИЗ
		|	Справочник.НоменклатураКонтрагентов КАК Т
		|ГДЕ
		|	НЕ Т.ЭтоГруппа
		|	И НЕ Т.ПометкаУдаления
		|	И Т.Владелец = &Партнер
		|");
		
		Запрос.УстановитьПараметр("Партнер", Объект.Партнер);
		
	Иначе
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Т.Артикул      КАК Артикул,
		|	Т.Артикул      КАК АртикулПоиск,
		|	Т.Наименование КАК Наименование,
		|	Т.Наименование КАК НаименованиеПоиск,
		|	Т.Ссылка       КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Т
		|ГДЕ
		|	НЕ Т.ЭтоГруппа
		|	И НЕ Т.ПометкаУдаления
		|");
		
	КонецЕсли;
	
	НоменклатураПартнера.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Для Каждого ТекСтрока Из НоменклатураПартнера Цикл
		
		ТекСтрока.АртикулПоиск = ВРег(СтрЗаменить(ТекСтрока.Артикул, " ", ""));
		ТекСтрока.НаименованиеПоиск = ВРег(СтрЗаменить(ТекСтрока.НаименованиеПоиск, " ", ""));
		
	КонецЦикла;
	
	// Инициализация таблицы для поиска упаковок
	
	КвалификаторыСтроки = Новый КвалификаторыСтроки(100);
	ОписаниеСтроки = Новый ОписаниеТипов("Строка", ,КвалификаторыСтроки);
	
	ТаблицаУпаковок = Новый ТаблицаЗначений;
	ТаблицаУпаковок.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаУпаковок.Колонки.Добавить("Упаковка", ОписаниеСтроки);
	ТаблицаУпаковок.Колонки.Добавить("ВидЦены", ОписаниеСтроки);
	
	// Сопоставление данных прайс-листа с данными информационной базы
	КолонкаАртикул      = "C1";
	КолонкаНоменклатура = "C2";
	
	НомерСтроки = 2;
	СтроковыйНомер = Формат(НомерСтроки, "ЧН=0; ЧГ=0");
	ЗаполненаНоменклатураАртикул = ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + Формат(НомерСтроки, "ЧН=0; ЧГ=0") + КолонкаАртикул).Текст)
		Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + Формат(НомерСтроки, "ЧН=0; ЧГ=0") + КолонкаНоменклатура).Текст);
	
	Пока ЗаполненаНоменклатураАртикул Цикл
		
		НоваяСтрока = ДеревоЦен.Добавить();
		
		Попытка
			// 100 - Длина наименования номенклатуры поставщика
			НоваяСтрока.Артикул = ТабличныйДокумент.Область("R" + СтроковыйНомер + КолонкаАртикул).Текст;
			НоваяСтрока.НоменклатураНаименование = Лев(ТабличныйДокумент.Область("R" + СтроковыйНомер + КолонкаНоменклатура).Текст, 100);
		Исключение
			ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		ВидыЦен = УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(ЭтотОбъект);
		
		Для Каждого СтрокаТЧ Из ВидыЦен Цикл
			ЦенаНоменклатуры = ТабличныйДокумент.Область("R" + СтроковыйНомер + "C" + СтрокаТЧ.ИмяКолонкиMXL).Текст;
			НоваяСтрока[СтрокаТЧ.ИмяКолонки] = ЦенаНоменклатуры;
		КонецЦикла;
		
		МассивНоменклатурыПартнера = Новый Массив();
		
		Если ЗначениеЗаполнено(НоваяСтрока.Артикул)
			И ЗначениеЗаполнено(НоваяСтрока.НоменклатураНаименование) Тогда
			
			ПараметрыОтбора = Новый Структура(
					"АртикулПоиск, НаименованиеПоиск",
					ВРег(СтрЗаменить(НоваяСтрока.Артикул, " ", "")),
					ВРег(СтрЗаменить(НоваяСтрока.НоменклатураНаименование, " ", "")));
					
			НайденныеСтроки = НоменклатураПартнера.НайтиСтроки(ПараметрыОтбора);
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				МассивНоменклатурыПартнера.Добавить(НайденнаяСтрока);
			КонецЦикла;
			
		ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.Артикул)
			 И НЕ ЗначениеЗаполнено(НоваяСтрока.НоменклатураНаименование) Тогда
			
			ПараметрыОтбора = Новый Структура(
					"АртикулПоиск",
					ВРег(СтрЗаменить(НоваяСтрока.Артикул, " ", "")));
					
			НайденныеСтроки = НоменклатураПартнера.НайтиСтроки(ПараметрыОтбора);
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				МассивНоменклатурыПартнера.Добавить(НайденнаяСтрока);
			КонецЦикла;
			
		ИначеЕсли НЕ ЗначениеЗаполнено(НоваяСтрока.Артикул) 
			       И ЗначениеЗаполнено(НоваяСтрока.НоменклатураНаименование) Тогда
			
			ПараметрыОтбора = Новый Структура(
					"НаименованиеПоиск",
					ВРег(СтрЗаменить(НоваяСтрока.НоменклатураНаименование, " ", "")));
					
			НайденныеСтроки = НоменклатураПартнера.НайтиСтроки(ПараметрыОтбора);
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Если МассивНоменклатурыПартнера.Найти(НайденнаяСтрока) = Неопределено Тогда
					МассивНоменклатурыПартнера.Добавить(НайденнаяСтрока);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если МассивНоменклатурыПартнера.Количество() = 1 Тогда
			
			НоваяСтрока.КоличествоНоменклатурыДляВыбора = 1;
			
			Если ИспользоватьНоменклатуруПартнеров Тогда
				НоваяСтрока.НоменклатураПартнера = МассивНоменклатурыПартнера[0].Ссылка;
				НоваяСтрока.Номенклатура = МассивНоменклатурыПартнера[0].Номенклатура;
				НоваяСтрока.Характеристика = МассивНоменклатурыПартнера[0].Характеристика;
				НоваяСтрока.Упаковка = МассивНоменклатурыПартнера[0].Упаковка;
				Если ИспользоватьУпаковкиНоменклатуры Тогда		
					ВидыЦен = УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(ЭтотОбъект);
					ИзменитьУпаковкиПоВидамЦенНаСервере(НоваяСтрока.ПолучитьИдентификатор());
				КонецЕсли;
			Иначе
				НоваяСтрока.Номенклатура = МассивНоменклатурыПартнера[0].Ссылка;
			КонецЕсли;
			НоваяСтрока.НоменклатураСопоставленаАвтоматически = Истина;
			
			Если ЗначениеЗаполнено(НоваяСтрока.НоменклатураНаименование) И НоваяСтрока.НоменклатураНаименование <> МассивНоменклатурыПартнера[0].Наименование Тогда
				НоваяСтрока.НоменклатураНаименованиеОтличается = Истина;
			КонецЕсли;
			
			Если НоваяСтрока.Артикул <> МассивНоменклатурыПартнера[0].Артикул Тогда
				НоваяСтрока.АртикулОтличается = Истина;
			КонецЕсли;
			
		ИначеЕсли МассивНоменклатурыПартнера.Количество() > 1 Тогда
			
			НоваяСтрока.КоличествоНоменклатурыДляВыбора = МассивНоменклатурыПартнера.Количество();
			
			Для Каждого ТекЭлемент Из МассивНоменклатурыПартнера Цикл
				
				ПараметрыОтбора = Новый Структура();
				ПараметрыОтбора.Вставить("АртикулПоиск",      ТекЭлемент.АртикулПоиск);
				ПараметрыОтбора.Вставить("НаименованиеПоиск", ТекЭлемент.НаименованиеПоиск);
				ПараметрыОтбора.Вставить("Артикул",           НоваяСтрока.Артикул);
				ПараметрыОтбора.Вставить("Наименование",      НоваяСтрока.НоменклатураНаименование);
				ПараметрыОтбора.Вставить("Ссылка",            ТекЭлемент.Ссылка);
				
				НайденныеСтроки = НоменклатураПартнера.НайтиСтроки(ПараметрыОтбора);
				
				Если НайденныеСтроки.Количество() = 0 Тогда
					
					НоваяНоменклатураПартнера = НоменклатураПартнера.Добавить();
					НоваяНоменклатураПартнера.НаименованиеПоиск = ТекЭлемент.НаименованиеПоиск;
					НоваяНоменклатураПартнера.АртикулПоиск      = ТекЭлемент.АртикулПоиск;
					НоваяНоменклатураПартнера.Наименование      = НоваяСтрока.НоменклатураНаименование;
					НоваяНоменклатураПартнера.Артикул           = НоваяСтрока.Артикул;
					НоваяНоменклатураПартнера.Ссылка            = ТекЭлемент.Ссылка;
					
					Если ИспользоватьНоменклатуруПартнеров Тогда
						НоваяНоменклатураПартнера.Номенклатура   = ТекЭлемент.Номенклатура;
						НоваяНоменклатураПартнера.Характеристика = ТекЭлемент.Характеристика;
						НоваяНоменклатураПартнера.Упаковка = ТекЭлемент.Упаковка;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли ИспользоватьНоменклатуруПартнеров Тогда
			
			// произведем поиск по артикулу и / или наименованию по номенклатуре
			ПараметрыОтбора = Новый Структура(
				"АртикулПоиск, НаименованиеПоиск",
				ВРег(СокрЛП(НоваяСтрока.Артикул)),
				ВРег(СокрЛП(НоваяСтрока.НоменклатураНаименование)));
			
			НайденнаяНоменклатура = ПодобратьНоменклатуруПоСправочнику(ПараметрыОтбора);
			
			Если НайденнаяНоменклатура.Количество() = 1 Тогда
				
				ТекЭлемент = НайденнаяНоменклатура[0];
				
				НоваяСтрока.Номенклатура = ТекЭлемент.Ссылка;
				Если ИспользоватьУпаковкиНоменклатуры Тогда
					ВидыЦен = УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(ЭтотОбъект);
					ИзменитьУпаковкиПоВидамЦенНаСервере(НоваяСтрока.ПолучитьИдентификатор());
				КонецЕсли;
				НоваяСтрока.НоменклатураСопоставленаАвтоматически = Истина;
				НоваяСтрока.СтрокаСопоставлена = Истина;
				
				Если ЗначениеЗаполнено(НоваяСтрока.НоменклатураНаименование) И НоваяСтрока.НоменклатураНаименование <> ТекЭлемент.Наименование Тогда
					НоваяСтрока.НоменклатураНаименованиеОтличается = Истина;
				КонецЕсли;
				
				Если НоваяСтрока.Артикул <> ТекЭлемент.Артикул Тогда
					НоваяСтрока.АртикулОтличается = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НоваяСтрока.НоменклатураСопоставленаАвтоматически
			И Не НоваяСтрока.АртикулОтличается И
			  Не НоваяСтрока.НоменклатураНаименованиеОтличается Тогда
			
			НоваяСтрока.СтрокаСопоставлена = Истина;
			
		КонецЕсли;
		
		НоваяСтрока.ХарактеристикиИспользуются = Справочники.Номенклатура.ХарактеристикиИспользуются(НоваяСтрока.Номенклатура);
		
		СчКолонок = 0;
		Для Каждого СтрокаТЧ Из УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(ЭтотОбъект) Цикл
			НомерКолонкиЦена           = Число(СтрокаТЧ.ИмяКолонкиMXL) + СчКолонок;
			НомерКолонкиМинПартия      = Число(СтрокаТЧ.ИмяКолонкиMXL) + СчКолонок + 1;
			НомерКолонкиУпаковкаЗаказа = Число(СтрокаТЧ.ИмяКолонкиMXL) + СчКолонок + 2;
			
			ЦенаНоменклатуры = ТабличныйДокумент.Область("R" + СтроковыйНомер + "C" + НомерКолонкиЦена).Текст;
			НоваяСтрока[СтрокаТЧ.ИмяКолонки] = ЦенаНоменклатуры;
			
			// Минимальная партия - после колонки "Цена"
			МинимальнаяПартия = ТабличныйДокумент.Область("R" + СтроковыйНомер + "C" + НомерКолонкиМинПартия).Текст;
			НоваяСтрока["МинимальнаяПартияПоставки" + СтрокаТЧ.ИмяКолонки] = МинимальнаяПартия;
			
			// Упаковка - после колонки "Мин. партия"
			Если ИспользоватьУпаковкиНоменклатуры Тогда
				Упаковка = ТабличныйДокумент.Область("R" + СтроковыйНомер + "C" + НомерКолонкиУпаковкаЗаказа).Текст;
				НоваяСтрока["УпаковкаЗаполнена" + СтрокаТЧ.ИмяКолонки] = ЗначениеЗаполнено(Упаковка);
				НоваяСтрока["УпаковкаИмя" + СтрокаТЧ.ИмяКолонки] = Строка(Упаковка);
				
				// Добавить строку в таблицу для поиска упаковок
				СтрокаУпак = ТаблицаУпаковок.Добавить();
				СтрокаУпак.Номенклатура = НоваяСтрока.Номенклатура;
				СтрокаУпак.Упаковка = Упаковка;
				СтрокаУпак.ВидЦены = СтрокаТЧ.ИмяКолонки;
				
				СчКолонок = СчКолонок + 2;
			Иначе
				СчКолонок = СчКолонок + 1;
			КонецЕсли;
			
		КонецЦикла;
		
		НомерСтроки = НомерСтроки + 1;
		СтроковыйНомер = Формат(НомерСтроки, "ЧН=0; ЧГ=0");
		
		Попытка
			ЗаполненаНоменклатураАртикул = ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + КолонкаАртикул).Текст)
			                               Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + КолонкаНоменклатура).Текст);
		Исключение
			ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;
	
	ТаблицаУпаковок = НайтиУпаковки(ТаблицаУпаковок);
	Для Каждого СтрокаУпаковка Из ТаблицаУпаковок Цикл
		
		ПараметрыОтбора = Новый Структура();
		ПараметрыОтбора.Вставить("Номенклатура", СтрокаУпаковка.Номенклатура);
		
		НайденныеСтроки = ДеревоЦен.НайтиСтроки(ПараметрыОтбора);
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока["УпаковкаЗаказа" + СтрокаУпаковка.ВидЦены] = СтрокаУпаковка.УпаковкаСсылка;
		КонецЦикла;
		
	КонецЦикла;
	
	ОбновитьСтарыеЦеныНоменклатурыНаСервере();
	
	УстановитьОтборПоТоварам();
	
	СопоставлятьСправочники = Ложь;
	
	ПометитьДублиТабличнойЧасти(); 
	
КонецПроцедуры

// Описание
// 
// Параметры:
// 	ПараметрыОтбора - Структура - отбор по артикулу или наименованию
// Возвращаемое значение:
// 	ТаблицаЗначений - с результатами запроса
&НаСервере
Функция ПодобратьНоменклатуруПоСправочнику(ПараметрыОтбора)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Т.Артикул КАК Артикул,
	|	Т.Наименование КАК Наименование,
	|	Т.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Т
	|ГДЕ
	|	НЕ Т.ЭтоГруппа
	|	И НЕ Т.ПометкаУдаления
	|	И Т.Артикул = &АртикулПоиск
	|	И Т.Наименование = &НаименованиеПоиск");

	Если ЗначениеЗаполнено(ПараметрыОтбора.АртикулПоиск) Тогда
		Запрос.УстановитьПараметр("АртикулПоиск", ПараметрыОтбора.АртикулПоиск);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Т.Артикул = &АртикулПоиск", "");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОтбора.НаименованиеПоиск) Тогда
		Запрос.УстановитьПараметр("НаименованиеПоиск", ПараметрыОтбора.НаименованиеПоиск);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Т.Наименование = &НаименованиеПоиск", "");
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Процедура ПометитьДублиТабличнойЧасти(ТекущаяСтрока = Неопределено)
	
	СтруктураОтбора = Новый Структура;
	ПоляПроверки = Новый Структура("НоменклатураПартнера, Номенклатура, Характеристика", "НоменклатураПартнера", "Номенклатура","Характеристика");
	ИмяТабличнойЧасти = "ДеревоЦен";
	
	ПоляПроверкиСтрокой = "";
	Для Каждого КлючИЗначение Из ПоляПроверки Цикл
		ПоляПроверкиСтрокой = ПоляПроверкиСтрокой + ", " + КлючИЗначение.Ключ;
		СтруктураОтбора.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;
	ПоляПроверкиСтрокой = Сред(ПоляПроверкиСтрокой, 3);
	
	НаборыЗначений = ЭтотОбъект[ИмяТабличнойЧасти].Выгрузить(, ПоляПроверкиСтрокой);//ТаблицаЗначений
	НаборыЗначений.Колонки.Добавить("КоличествоВхождений", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	НаборыЗначений.ЗаполнитьЗначения(1, "КоличествоВхождений");
	НаборыЗначений.Свернуть(ПоляПроверкиСтрокой, "КоличествоВхождений");
	
	Для Каждого Элемент Из ЭтотОбъект[ИмяТабличнойЧасти] Цикл
		Элемент.ЭтоДубль = Ложь;
	КонецЦикла;
	
	Если НаборыЗначений.Количество() <> ЭтотОбъект[ИмяТабличнойЧасти].Количество() Тогда
		// Есть дубли
		Для Каждого НаборЗначений Из НаборыЗначений Цикл
			Если НаборЗначений.КоличествоВхождений = 1 Тогда
				Продолжить;
			КонецЕсли;
			
			ЗначенияСтрокой = "";
			
			ПропуститьНаборЗначений = Ложь;
			Для Каждого КлючИЗначение Из ПоляПроверки Цикл
				Если КлючИЗначение.Значение <> Истина Тогда
					Если НЕ ЗначениеЗаполнено(НаборЗначений[КлючИЗначение.Ключ]) Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				ЗначенияСтрокой = ЗначенияСтрокой + ", """ + НаборЗначений[КлючИЗначение.Ключ] + """";
			КонецЦикла;
			Если ПропуститьНаборЗначений Или ЗначенияСтрокой = "" Тогда
				Продолжить;
			КонецЕсли;
			
			ЗначенияСтрокой = Сред(ЗначенияСтрокой, 3);
			
			НомерВхождения = 0;
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, НаборЗначений);
			СтрокиДубли = ЭтотОбъект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаДубль Из СтрокиДубли Цикл
//				Установить дубли для всех кроме первого вхождения
				НомерВхождения	= НомерВхождения+1;
				Если НомерВхождения > 1 Тогда
					СтрокаДубль.ЭтоДубль	= истина;
				КонецЕсли; 
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьНоменклатуруПоставщика()
	
	Отказ = Ложь;
	
	МассивНоменклатуры = ДеревоЦен.Выгрузить(,"Номенклатура").ВыгрузитьКолонку("Номенклатура"); // Массив Из СправочникСсылка.Номенклатура
	НаименованияНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивНоменклатуры, "Наименование");
	
	Для Каждого ТекСтрока Из ДеревоЦен Цикл
		
		Если ТекСтрока.ХарактеристикиИспользуются И Не ЗначениеЗаполнено(ТекСтрока.Характеристика) Тогда
			
			ТекстОшибки = НСтр("ru='Не заполнено характеристика номенклатуры в строке %НомерСтроки%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ДеревоЦен.Индекс(ТекСтрока) + 1);
			
			ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки,
				,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ДеревоЦен", ДеревоЦен.Индекс(ТекСтрока)+1, "Характеристика"),
				,
				Отказ);
			
		КонецЕсли;
		
		Если Не РегистрироватьТолькоРаспознаннуюНоменклатуру
			И Не ЗначениеЗаполнено(ТекСтрока.НоменклатураПартнера) 
			И Не ЗначениеЗаполнено(ТекСтрока.НоменклатураНаименование) Тогда
			
			Если ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда
				
				ТекСтрока.НоменклатураНаименование = НаименованияНоменклатуры.Получить(ТекСтрока.Номенклатура);
				
			Иначе
				
				ТекстОшибки = НСтр("ru='Не заполнено наименование номенклатуры в строке %НомерСтроки%'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ДеревоЦен.Индекс(ТекСтрока) + 1);
				
				ОбщегоНазначения.СообщитьПользователю(
					ТекстОшибки,
					,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ДеревоЦен", ДеревоЦен.Индекс(ТекСтрока)+1, "НоменклатураНаименование"),
					,
					Отказ);
					
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			Для Каждого СтрокаТЧ Из УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(ЭтотОбъект) Цикл
				
				Если ТекСтрока.Номенклатура.Пустая() 
					Или НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекСтрока.Номенклатура, "ИспользоватьУпаковки") Тогда
					Продолжить;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(ТекСтрока["УпаковкаЗаказа" + СтрокаТЧ.ИмяКолонки]) И ТекСтрока["УпаковкаЗаполнена" + СтрокаТЧ.ИмяКолонки] И ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда
					
					ТекстОшибки = НСтр("ru='Не заполнена упаковка заказа в строке %НомерСтроки%'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ДеревоЦен.Индекс(ТекСтрока) + 1);
					
					ОбщегоНазначения.СообщитьПользователю(
					ТекстОшибки,
					,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ДеревоЦен", ДеревоЦен.Индекс(ТекСтрока)+1, "УпаковкаЗаказа"  + СтрокаТЧ.ИмяКолонки),
					,
					Отказ);
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;

	// ЭлектронноеВзаимодействие.СопоставлениеНоменклатурыКонтрагентов
	МассивЕдиницИзмерения = ДеревоЦен.Выгрузить(,"ЕдиницаИзмерения").ВыгрузитьКолонку("ЕдиницаИзмерения"); // Массив Из СправочникСсылка.УпаковкиЕдиницыИзмерения
	КодЕдиницИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивЕдиницИзмерения, "Код");

	Для Каждого ТекСтрока Из ДеревоЦен Цикл
		
		Если (ТекСтрока.НоменклатураНаименованиеОтличается Или ТекСтрока.АртикулОтличается) И ЗначениеЗаполнено(ТекСтрока.НоменклатураПартнера) 
			Или (Не РегистрироватьТолькоРаспознаннуюНоменклатуру И Не ЗначениеЗаполнено(ТекСтрока.НоменклатураПартнера)) Тогда
		
			НоменклатураКонтрагента = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента();
			
			Если ЗначениеЗаполнено(ТекСтрока.НоменклатураПартнера) Тогда
				СопоставлениеНоменклатурыКонтрагентов.ЗаполнитьДанныеНоменклатурыКонтрагентаПоСсылке(
					ТекСтрока.НоменклатураПартнера, НоменклатураКонтрагента);
			КонецЕсли;
			
			НоменклатураКонтрагента.Владелец         = Объект.Партнер;
			Если ЗначениеЗаполнено(ТекСтрока.НоменклатураНаименование) Тогда
				НоменклатураКонтрагента.Наименование = ТекСтрока.НоменклатураНаименование;
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекСтрока.Артикул) Тогда
				НоменклатураКонтрагента.Артикул      = ТекСтрока.Артикул;
			КонецЕсли;
			НоменклатураКонтрагента.ЕдиницаИзмерения = ТекСтрока.ЕдиницаИзмерения; // Базовая единица хранения номенклатуры.
			Если ЗначениеЗаполнено(ТекСтрока.ЕдиницаИзмерения) Тогда
				НоменклатураКонтрагента.ЕдиницаИзмеренияКод = КодЕдиницИзмерения.Получить(ТекСтрока.ЕдиницаИзмерения);
			КонецЕсли;
			
			НоменклатураИБ = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураИнформационнойБазы(
				ТекСтрока.Номенклатура, ТекСтрока.Характеристика, ТекСтрока.Упаковка);
				
			ДополнительныеПараметры = СопоставлениеНоменклатурыКонтрагентов.НовыеДополнительныеПараметрыПриЗаписиНоменклатурыКонтрагентов();
			ДополнительныеПараметры.ТребуетсяПоискСсылки = Ложь;
			ДополнительныеПараметры.ТребуетсяПоискЕдиницыИзмеренияПоОКЕИ = Ложь;
			
			ТекстОшибки = "";
			СопоставлениеНоменклатурыКонтрагентов.СоздатьОбновитьНоменклатуруКонтрагента(
				НоменклатураКонтрагента, НоменклатураИБ, Отказ, ТекстОшибки, ДополнительныеПараметры);
				
			ТекСтрока.НоменклатураПартнера = НоменклатураКонтрагента.НоменклатураКонтрагента;
			
			Если Не Отказ Тогда
				ТекСтрока.НоменклатураСопоставленаАвтоматически = Истина;
				Если Не ЗначениеЗаполнено(ТекСтрока.НоменклатураПартнера) Тогда
					ТекСтрока.НоменклатураПартнера = НоменклатураКонтрагента.НоменклатураКонтрагента;
				КонецЕсли;
			Иначе
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	// Конец ЭлектронноеВзаимодействие.СопоставлениеНоменклатурыКонтрагентов
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	КэшДанных = Неопределено;
	ТаблицаТовары = УстановкаЦенСервер.ТаблицаТовары(ЭтотОбъект, КэшДанных);
	ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(ТаблицаТовары, "НомерСтроки");
	
	Ценообразование.ПроверитьКорректностьЗаполненияДокументаУстановкиЦенНоменклатурыПоставщика(
		ЭтотОбъект.Объект, ТаблицаТовары, Отказ);
	
КонецПроцедуры

&НаСервере
Функция НайтиУпаковки(ТаблицаУпаковок)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаУпаковок", ТаблицаУпаковок);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаУпаковки.Номенклатура КАК Номенклатура,
		|	ТаблицаУпаковки.Упаковка КАК Упаковка,
		|	ТаблицаУпаковки.ВидЦены КАК ВидЦены
		|ПОМЕСТИТЬ ВТТаблицаУпаковок
		|ИЗ
		|	&ТаблицаУпаковок КАК ТаблицаУпаковки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТТаблицаУпаковок.Номенклатура КАК Номенклатура,
		|	ВТТаблицаУпаковок.Упаковка КАК Упаковка,
		|	ВТТаблицаУпаковок.ВидЦены КАК ВидЦены,
		|	МАКСИМУМ(ЕстьNULL(УпаковкиЕдиницыИзмерения.Ссылка, Значение(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))) КАК УпаковкаСсылка
		|ИЗ
		|	ВТТаблицаУпаковок КАК ВТТаблицаУпаковок
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
		|		ПО (ВЫБОР
		|				КОГДА ВТТаблицаУпаковок.Номенклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
		|					ТОГДА ВТТаблицаУпаковок.Номенклатура = УпаковкиЕдиницыИзмерения.Владелец
		|				ИНАЧЕ ВТТаблицаУпаковок.Номенклатура.НаборУпаковок = УпаковкиЕдиницыИзмерения.Владелец
		|			КОНЕЦ)
		|			И ВТТаблицаУпаковок.Упаковка = УпаковкиЕдиницыИзмерения.Наименование
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТТаблицаУпаковок.Номенклатура,
		|	ВТТаблицаУпаковок.Упаковка,
		|	ВТТаблицаУпаковок.ВидЦены";
	
	ТаблицаУпаковок = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаУпаковок;
	
КонецФункции

// Параметры:
// ВыбранноеЗначение - СправочникСсылка.НоменклатураКонтрагентов
// ДополнительныеПараметры - Структура
// 
&НаКлиенте
Процедура ОбработатьРезультатВыбораНоменклатурыПартнера(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.ТекущаяСтрока.НоменклатураПартнера = ВыбранноеЗначение;
	
	ДеревоЦенНоменклатураПартнераПриИзменении(ДополнительныеПараметры.ЭлементФормы);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
