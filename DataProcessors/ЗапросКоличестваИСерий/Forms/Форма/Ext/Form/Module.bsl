#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.Номенклатура) Тогда
		ВызватьИсключение НСтр("ru = 'Данная форма не предназначена для непосредственного открытия.'");
	КонецЕсли;
	
	КлючевыеПараметры = ОбеспечениеВДокументахКлиентСервер.КлючевыеПараметрыФормыЗапросаКоличестваИСерий();
	ЗаполнитьЗначенияСвойств(КлючевыеПараметры, Параметры);
	
	ДанныеЗаполнения  = ОбеспечениеВДокументахКлиентСервер.ПараметрыФормыЗапросаКоличестваИСерий(Ложь);
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения,  Параметры);
	
	// В незаписанном документе назначение пустое, а алгоритмы получения остатков рассчитывают на заполненное.
	Если КлючевыеПараметры.ПодборТоваров И Не ЗначениеЗаполнено(ДанныеЗаполнения.Назначение) Тогда
		ДанныеЗаполнения.Назначение = Справочники.Назначения.ПолучитьСсылку();
	КонецЕсли;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.Заполнить(КлючевыеПараметры, ДанныеЗаполнения);
	
	Обработки.ЗапросКоличестваИСерий.ПроверитьЗаполнение(Объект);
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	Если ТипЗнч(ДанныеЗаполнения.Склады) = Тип("Массив") Тогда
		Склады.ЗагрузитьЗначения(ДанныеЗаполнения.Склады);
	КонецЕсли;

	// Инициализация реквизитов формы, для интерактивной работы пользователя.
	ТекущиеРеквизиты = Обработки.ЗапросКоличестваИСерий.ТекущиеРеквизиты(Объект);
	
	ТекущаяНоменклатура          = ТекущиеРеквизиты.Номенклатура;
	ТекущаяХарактеристика        = ТекущиеРеквизиты.Характеристика;
	ТекущаяУпаковка              = ТекущиеРеквизиты.Упаковка;
	ТекущийИндексТовараДляОтбора = ТекущиеРеквизиты.ИндексТовараДляОтбора;
	
	РежимОтображенияТоваров = "ОстаткиИГрафик";
	Если Объект.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить
			Или Объект.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада Тогда
			РежимОтображенияТоваров = "СвободныеОстатки";
	КонецЕсли;
	
	ТолькоСкладыВыбраннойГруппы = Истина;
	
	РежимОтображенияСерий       = "СвободныеОстатки";
	ВариантПредоставленияСкидки = "СКИДКА";
	
	МаксимальныйПроцентСкидки   = 0;
	МаксимальныйПроцентНаценки  = 0;
	Если ЭтоАдресВременногоХранилища(Параметры.АдресВоВременномХранилище) Тогда
		СтруктураТаблиц = ПолучитьИзВременногоХранилища(Параметры.АдресВоВременномХранилище);
		МаксимальныйПроцентСкидки  = СтруктураТаблиц.Ограничения[0].МаксимальныйПроцентРучнойСкидки;
		МаксимальныйПроцентНаценки = СтруктураТаблиц.Ограничения[0].МаксимальныйПроцентРучнойНаценки;
	КонецЕсли;
	
	ТипНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Номенклатура, "ТипНоменклатуры");
	ОкруглятьКоличество = ОкруглятьКоличество();
	
	Если КлючевыеПараметры.ПодборТоваров И КлючевыеПараметры.ПодборВариантовОбеспечения Тогда
		
		ДопустимыеВариантыОбеспечения = ОбеспечениеВДокументахКлиентСервер.ДопустимыеВариантыОбеспечения(
			ТипНоменклатуры,
			Параметры.ДопустимыеОбособленныеДействия,
			Параметры.ДопустимыеНеобособленныеДействия,
			КлючевыеПараметры.ОграничиватьВариантыОбеспечения,
			Параметры.ВариантОбеспеченияИФлагОбособленно);
			
	КонецЕсли;
	
	РассчитатьЕдиницуИзмерения();
	Если Объект.ИндексСтрокиДокумента > -1 Тогда
		
		Элементы.Товары.ТекущаяСтрока = Объект.Товары[Объект.ИндексСтрокиДокумента].ПолучитьИдентификатор();
		УправлениеЭлементамиФормыПриСозданииИИзмененииРеквизитов(Элементы.КУказаниюСерий); // инициализация элементов серий
		УправлениеЭлементамиФормыПриСозданииИИзмененииРеквизитов(Элементы.КВыборуДействий);
		Обработки.ЗапросКоличестваИСерий.ЗаполнитьСерииДляСтрокиТовары(
			ЭтотОбъект,
			КлючевыеПараметры,
			Объект.ИндексСтрокиДокумента,
			Параметры.ПараметрыУказанияСерий);
			
		СтрокаДокумента = Объект.Товары[Объект.ИндексСтрокиДокумента];
		
		КоличествоПодобрано = Объект.КоличествоУпаковок;
		Если СтрокаДокумента.ПроверятьДоступность
				И КлючевыеПараметры.Режим = ОбеспечениеВДокументахКлиентСервер.РежимВыборДействия() Тогда
				
			ДоступноПоСтроке = Мин(СтрокаДокумента.ВНаличии, Объект.КоличествоУпаковок);
			Если ДоступноПоСтроке < Объект.КоличествоУпаковок Тогда  
				
				КоэффициентУпаковки = КоэффициентУпаковки(Объект.Упаковка, Объект.Номенклатура);  
				
				ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияКоличества();
				ПараметрыПроверки.ИмяТЧ = "Объект";
				СтруктураОбъект = Новый Структура();
				СтруктураОбъект.Вставить("Номенклатура", Объект.Номенклатура);
				СтруктураОбъект.Вставить("Упаковка", Объект.Упаковка);
				СтруктураОбъект.Вставить("Количество", ДоступноПоСтроке * КоэффициентУпаковки);
				СтруктураОбъект.Вставить("КоличествоУпаковок", Объект.КоличествоУпаковок);
				ОкруглениеНекорректно = НоменклатураСервер.НомераСтрокСНекорректнымОкруглениемКоличества(
					СтруктураОбъект,
					ПараметрыПроверки);
				Если ОкруглениеНекорректно.Количество() = 0 Тогда
					ДоступноПоСтроке = Объект.КоличествоУпаковок;
				КонецЕсли;
				
			КонецЕсли;
			КоличествоПодобрано = Макс(ДоступноПоСтроке, Объект.КоличествоОформлено);
			
		КонецЕсли;
		
		СтрокаДокумента.Подобрано            = КоличествоПодобрано;
		СтрокаДокумента.ПодобраноДоИзменения = КоличествоПодобрано;
		
		МассивСерий = Новый Массив();
		Если ТипЗнч(ДанныеЗаполнения.Серия) = Тип("Массив") Тогда
			МассивСерий = ДанныеЗаполнения.Серия;
		ИначеЕсли Не ДанныеЗаполнения.Серия.Пустая() Тогда
			МассивСерий.Добавить(Новый Структура("Серия,Количество", ДанныеЗаполнения.Серия, Объект.КоличествоУпаковок));
		КонецЕсли;
		
		Для Каждого СтруктураСерия Из МассивСерий Цикл
			
			НайденныеСтроки = Объект.Серии.НайтиСтроки(Новый Структура("Серия", СтруктураСерия.Серия));
			Если НайденныеСтроки.Количество() > 0 Тогда
				СтрокаСерии = НайденныеСтроки[0];
				СтрокаСерии.Подобрано = СтруктураСерия.Количество * ЕдиницаИзмеренияКоэффициент;
			КонецЕсли;
			
		КонецЦикла;
		
		ПересчитатьСтатусУказанияСерий(Объект, СтрокаДокумента, Параметры.ПараметрыУказанияСерий, ЭтоМернаяЕдиница, ДопустимоеОтклонение, ЕдиницаИзмеренияКоэффициент);
		
	КонецЕсли;
	
	Если Объект.ВариантКомплектацииНоменклатуры.Пустая() Тогда
		Обработки.ЗапросКоличестваИСерий.ПересчиатьОстаткиВУпаковке(Объект.Товары, ТекущаяУпаковка, ТекущаяНоменклатура, ТекущаяХарактеристика);
	КонецЕсли;
	
	УправлениеЭлементамиФормыПриСоздании();
	
	Если Параметры.ВыборСерии Тогда
		КУказаниюСерийНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КоличествоУпаковокПриИзменении(Элемент)
	
	ОчиститьСообщения();
	КоличествоУпаковокПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УпаковкаПриИзменении(Элемент)
	
	ОчиститьСообщения();
	УпаковкаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоПриИзменении(Элемент)
	
	ОчиститьСообщения();
	КоличествоПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательОбособленноПриИзменении(Элемент)
	
	ПереключательОбособленноПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеПриИзменении(Элемент)
	
	ДействиеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Число") Тогда
		
		Объект.ВидЦены = Неопределено;
		ВидЦеныПредставление = НСтр("ru='<произвольная>'");
		
	Иначе
		
		СтандартнаяОбработка = Ложь;
		
		Объект.ВидЦены = ВыбранноеЗначение;
		ВидЦеныПредставление = ВыбранноеЗначение;
		
		Для Каждого Строка Из Объект.ВидыЦен Цикл
			Если Строка.ВидЦены = ВыбранноеЗначение Тогда
				Объект.Цена = Строка.Цена;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Объект.ВидЦены = Неопределено;
	ВидЦеныПредставление = НСтр("ru='<произвольная>'");
	Объект.Цена = Число(Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦеныПриИзменении(Элемент)
	
	ВидЦеныПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаНаборПриИзменении(Элемент)
	
	ЦенаНаборПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантПредоставленияСкидкиПриИзменении(Элемент)
	
	ВариантПредоставленияСкидкиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимОтображенияСерийПриИзменении(Элемент)
	
	КУказаниюСерийНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимОтображенияТоваровПриИзменении(Элемент)
	
	РежимОтображенияТоваровПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоСкладыВыбраннойГруппыПриИзменении(Элемент)
	
	ТолькоСкладыВыбраннойГруппыПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСоставНабора

&НаКлиенте
Процедура СоставНабораПриАктивизацииСтроки(Элемент)
	
	СтрокаНабора = Элементы.СоставНабора.ТекущиеДанные;
	Если СтрокаНабора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяНоменклатура <> СтрокаНабора.Номенклатура
		Или ТекущаяХарактеристика <> СтрокаНабора.Характеристика
		Или ТекущаяУпаковка <> СтрокаНабора.Упаковка Тогда
		
		ТекущаяНоменклатура   = СтрокаНабора.Номенклатура;
		ТекущаяХарактеристика = СтрокаНабора.Характеристика;
		ТекущаяУпаковка       = СтрокаНабора.Упаковка;
		ТекущийИндексТовараДляОтбора = Объект.СоставНабора.Индекс(СтрокаНабора);
		
		СоставНабораПриАктивизацииСтрокиНаСервере();
		СформироватьНадписьПодобратьПодобрано(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если Поле = Элементы.ТоварыСтатусУказанияСерий И ТекущиеДанные.СтатусУказанияСерий <> 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		Если Не ТекущиеДанные.ЭтоСкладВыбраннойГруппы Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Данная строка недоступна для выбора в документ. Указание серий не требуется.'"));
			Возврат;
		КонецЕсли;
		КУказаниюСерийНаСервере();
		
	ИначеЕсли Поле = Элементы.ТоварыВРезерве И ЗначениеЗаполнено(ТекущиеДанные.ВРезерве) Тогда
		
		Назначение = ?(ТекущиеДанные.Обособленно И Не ЗначениеЗаполнено(ТекущиеДанные.Назначение),
			Неопределено,
			ТекущиеДанные.Назначение);
			
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = ОбеспечениеВДокументахКлиент.ПараметрыФормыРезервы();
		ПараметрыФормы.Номенклатура = ТекущиеДанные.Номенклатура;
		ПараметрыФормы.Характеристика = ТекущиеДанные.Характеристика;
		ПараметрыФормы.Склад = ТекущиеДанные.Склад;
		ПараметрыФормы.Назначение = Назначение;
		ПараметрыФормы.ЗаказыНаОтгрузку = Параметры.ЗаказыНаОтгрузку;
		ПараметрыФормы.Упаковка = Объект.Упаковка;
		
		ОткрытьФорму(
			"Обработка.ЗапросКоличестваИСерий.Форма.Резервы",
			ПараметрыФормы,
			ЭтотОбъект,
			УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Элементы.КУказаниюСерий.Доступность = ТекущиеДанные <> Неопределено И ТекущиеДанные.СтатусУказанияСерий > 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	Если Элемент.ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент.Имя = "ТоварыКартинкаПереместитьВправо" И Не ТолькоПросмотр Тогда
		
		ОчиститьСообщения();
		Элемент.ТекущийЭлемент = Элементы.ТоварыПодобрано;
		
		СтрокаТовары = Элементы.Товары.ТекущиеДанные;
		Если СтрокаТовары = Неопределено Или Не СтрокаТовары.ЭтоСкладВыбраннойГруппы Тогда
			Возврат;
		КонецЕсли;
		
		КлючевыеПараметры = ОбеспечениеВДокументахКлиентСервер.КлючевыеПараметрыФормыЗапросаКоличестваИСерий();
		ЗаполнитьЗначенияСвойств(КлючевыеПараметры, Параметры);
		
		КоличествоПодобрать = 0;
		
		УменьшитьСтрокуДокумента = Ложь;
		Если КлючевыеПараметры.ПодборТоваров Тогда
			Если Объект.ВариантКомплектацииНоменклатуры.Пустая() Тогда
				КоличествоПодобрать = Объект.КоличествоУпаковок - Объект.Товары.Итог("Подобрано");
				Если КоличествоПодобрать = 0 Тогда
					КоличествоПодобрать = 1;
				КонецЕсли;
			Иначе
				СтрокаНабора = Элементы.СоставНабора.ТекущиеДанные;
				КоличествоПодобрать = СтрокаНабора.КоличествоПодобрать - СтрокаНабора.КоличествоПодобрано;
			КонецЕсли;
		Иначе
			КоличествоПодобрать = Макс(Объект.КоличествоУпаковок - Объект.Товары.Итог("Подобрано"), 0);
			Если КоличествоПодобрать = 0 И Объект.ИндексСтрокиДокумента > -1 Тогда
				СтрокаДокумента = Объект.Товары[Объект.ИндексСтрокиДокумента];
				Если СтрокаДокумента.Подобрано = Объект.Товары.Итог("Подобрано") Тогда
					КоличествоПодобрать = СтрокаДокумента.Подобрано; 
					УменьшитьСтрокуДокумента = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если РежимОтображенияТоваров = "СвободныеОстатки" И СтрокаТовары.ПроверятьДоступность Тогда
			КоличествоПодобрать = Мин(КоличествоПодобрать, СтрокаТовары.ВНаличии);
		ИначеЕсли РежимОтображенияТоваров = "ОстаткиИГрафик" И СтрокаТовары.ПроверятьДоступность Тогда
			КоличествоПодобрать = Мин(КоличествоПодобрать, СтрокаТовары.ПоГрафику);
		КонецЕсли;
		
		Если УменьшитьСтрокуДокумента Тогда 
			СтрокаДокумента.Подобрано = СтрокаДокумента.Подобрано - КоличествоПодобрать;
			СтрокаДокумента.ПодобраноДоИзменения = СтрокаДокумента.Подобрано;
			ПересчитатьСтатусУказанияСерий(Объект, СтрокаДокумента, Параметры.ПараметрыУказанияСерий, ЭтоМернаяЕдиница, ДопустимоеОтклонение, ЕдиницаИзмеренияКоэффициент);
		КонецЕсли;
		
		КоличествоПодобрать = СкорректироватьИзменениеКоличества(КоличествоПодобрать, СтрокаТовары);
		
		ИзменитьПодобрано(ЭтотОбъект, СтрокаТовары, КоличествоПодобрать, ЕдиницаИзмеренияКоэффициент, ЭтоМернаяЕдиница, ДопустимоеОтклонение);
		
		Если НужноОбновитьКоличествоНаборов() Тогда
			ПодключитьОбработчикОжидания("Подключаемый_ОбновитьКоличествоНаборов", 0.5, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПодобраноПриИзменении(Элемент)
	
	ОчиститьСообщения();
	СтрокаТовары = Элементы.Товары.ТекущиеДанные;
	КоличествоПодобрать = СтрокаТовары.Подобрано - СтрокаТовары.ПодобраноДоИзменения;
	СтрокаТовары.Подобрано = СтрокаТовары.ПодобраноДоИзменения;
	КоличествоПодобрать = СкорректироватьИзменениеКоличества(КоличествоПодобрать, СтрокаТовары);
	ИзменитьПодобрано(ЭтотОбъект, СтрокаТовары, КоличествоПодобрать, ЕдиницаИзмеренияКоэффициент, ЭтоМернаяЕдиница, ДопустимоеОтклонение);
	
	Если НужноОбновитьКоличествоНаборов() Тогда
		ОбновитьКоличествоНаборов();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Округлить(Команда)
	
	ОчиститьСообщения();
	Объект.Количество = Окр(Объект.Количество, 0, РежимОкругления.Окр15как20);
	КоличествоПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КУказаниюСерий(Команда)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для выполнения действия нужно выбрать строку в таблице ""Товары"".'"));
		Возврат;
	КонецЕсли;
	Если Не ТекущиеДанные.ЭтоСкладВыбраннойГруппы Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Данная строка недоступна для выбора в документ. Указание серий не требуется.'"));
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	КУказаниюСерийНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьОстаток(Команда)
	
	ОчиститьСообщения();
	ТекстСообщения = Неопределено;
	Если Не РаспределитьОстатокНаСервере(ТекстСообщения) Тогда
		ПоказатьПредупреждение(, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоFEFO(Команда)
	
	ОчиститьСообщения();
	Если Не ЗаполнитьПоFEFOНаСервере() Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Все количество товара распределено по сериям.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КВыборуДействий(Команда)
	
	ОчиститьСообщения();
	КВыборуДействийНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОК(Команда)
	
	ОчиститьСообщения();
	Отказ = Ложь;
	
	Если Параметры.ПодборТоваров И Объект.КоличествоУпаковок = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не заполнено количество'"),,"Объект.КоличествоУпаковок",,Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.СтраницыТоварыСерии.ТекущаяСтраница = Элементы.СтраницаСерии Тогда
		КВыборуДействийНаСервере(Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПодобранныеТовары = ПодобранныеТовары();
	
	Если Параметры.РазбиватьСтрокиЗапрещено Тогда
		ВариантыОбеспеченияСоответствие = Новый Соответствие;
		КоличествоСерий = 0;
		Для Каждого СтрокаТовары Из ПодобранныеТовары Цикл
			ВариантыОбеспеченияСоответствие.Вставить(СтрокаТовары.ВариантОбеспечения);
			Если ЗначениеЗаполнено(СтрокаТовары.Серия) Тогда
				КоличествоСерий = КоличествоСерий + 1;
			КонецЕсли;
		КонецЦикла;
		Если ВариантыОбеспеченияСоответствие.Количество() > 1 Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Выбрано несколько вариантов обеспечения, допустимо выбирать только один'"),,,,Отказ);
		КонецЕсли;
		Если КоличествоСерий > 1 И ТипЗнч(Параметры.Серия) <> Тип("Массив") Тогда // массив в заказе на сборку.
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Выбрано несколько серий, допустимо выбирать только одну'"),,,,Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	КлючевыеПараметры = ОбеспечениеВДокументахКлиентСервер.КлючевыеПараметрыФормыЗапросаКоличестваИСерий();
	ЗаполнитьЗначенияСвойств(КлючевыеПараметры, Параметры);
	
	Если Не КлючевыеПараметры.ПодборТоваров Тогда
		
		ПараметрыУстановкиДатОтгрузки = Новый Структура("ДатаОтгрузкиВсехСтрокОднойДатой,ДатаОтгрузкиНовыхСтрок,ЗаполнятьДатуОтгрузкиВсехСтрокДатойНовыхСтрок");
		ПараметрыУстановкиДатОтгрузки.ЗаполнятьДатуОтгрузкиВсехСтрокДатойНовыхСтрок = Ложь;
		
		Если Объект.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить") Тогда
			
			ПараметрыУстановкиДатОтгрузки.ЗаполнятьДатуОтгрузкиВсехСтрокДатойНовыхСтрок = Истина;
			Если Параметры.ВыбраныВсеСтрокиДокумента Тогда
				Для Каждого Элемент Из ПодобранныеТовары Цикл
					Если Элемент.ВариантОбеспечения <> ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить") Тогда
						ПараметрыУстановкиДатОтгрузки.ЗаполнятьДатуОтгрузкиВсехСтрокДатойНовыхСтрок = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ПараметрыУстановкиДатОтгрузки.ДатаОтгрузкиВсехСтрокОднойДатой = КлючевыеПараметры.ДатаОтгрузкиВсехСтрокОднойДатой;
			ПараметрыУстановкиДатОтгрузки.ДатаОтгрузкиНовыхСтрок = КлючевыеПараметры.ДатаОтгрузкиНовыхСтрок;
			
		КонецЕсли;
		
		Результат = Новый Структура("ПодобранныеТовары,ПараметрыУстановкиДатОтгрузки",
		ПодобранныеТовары, ПараметрыУстановкиДатОтгрузки);
		Закрыть(Результат);
		
	Иначе
		
		Закрыть(Новый Структура("ПодобранныеТовары", ПодобранныеТовары));
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура РассчитатьЕдиницуИзмерения()
	ЕдиницаИзмерения = Неопределено;
	Если Объект.ВариантКомплектацииНоменклатуры.Пустая() Тогда
		ЕдиницаИзмерения = Объект.Упаковка;
	Иначе
		ЕдиницаИзмерения = ТекущаяУпаковка;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
		ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяНоменклатура, "ЕдиницаИзмерения");
	КонецЕсли;
	ЕдиницаИзмеренияКоэффициент = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(ЕдиницаИзмерения, ТекущаяНоменклатура);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоличествоНаборов()
	
	ОбновитьКоличествоНаборов();
	
КонецПроцедуры

&НаСервере
Процедура КоличествоУпаковокПриИзмененииНаСервере()
	
	ПриИзмененииКоличестваУпаковокИлиУпаковкиНаСервере();
	УправлениеЭлементамиФормыПриСозданииИИзмененииРеквизитов(Элементы.КоличествоУпаковок);
	
КонецПроцедуры

&НаСервере
Процедура УпаковкаПриИзмененииНаСервере()
	
	КлючевыеПараметры = ОбеспечениеВДокументахКлиентСервер.КлючевыеПараметрыФормыЗапросаКоличестваИСерий();
	ЗаполнитьЗначенияСвойств(КлючевыеПараметры, Параметры);
	
	ТекущаяУпаковка = Объект.Упаковка;
	Обработки.ЗапросКоличестваИСерий.ПересчиатьОстаткиВУпаковке(Объект.Товары, ТекущаяУпаковка, ТекущаяНоменклатура, ТекущаяХарактеристика);
	Обработки.ЗапросКоличестваИСерий.УпаковкаПриИзменении(Объект, КлючевыеПараметры);
	
	РассчитатьЕдиницуИзмерения();
	
	ОкруглятьКоличество = ОкруглятьКоличество();
	
	ПриИзмененииКоличестваУпаковокИлиУпаковкиНаСервере();
	
	Если КлючевыеПараметры.ПодборСерий И Объект.Товары.Количество() > 0 Тогда
		
		ТаблицаДляЗаполнения = Объект.Товары;
		ДопКолонкиДляУказанияСерий = КлючевыеПараметры.ДопКолонкиДляУказанияСерий;
		Если ДопКолонкиДляУказанияСерий <> Неопределено Тогда
			ТаблицаДляЗаполнения = Объект.Товары.Выгрузить(Новый Массив());
			ТаблицаДляЗаполнения.Колонки.Добавить("ИндексТовары");
			Для Каждого ДопКолонка Из ДопКолонкиДляУказанияСерий Цикл
				ТаблицаДляЗаполнения.Колонки.Добавить(ДопКолонка.Ключ);
			КонецЦикла;
			Для Индекс = 0 По Объект.Товары.Количество() - 1 Цикл
				НоваяСтрока = ТаблицаДляЗаполнения.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Объект.Товары[Индекс]);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДопКолонкиДляУказанияСерий);
				НоваяСтрока.ИндексТовары = Индекс;
			КонецЦикла;
		КонецЕсли;
		
		Обработки.ЗапросКоличестваИСерий.ЗаполнитьСтатусУказанияСерииВТаблице(
			Объект.ВариантОбеспечения, ТаблицаДляЗаполнения, Параметры.ПараметрыУказанияСерий, Объект.Товары[0].Склад);
		
		Если ДопКолонкиДляУказанияСерий <> Неопределено Тогда
			Для Каждого Строка Из ТаблицаДляЗаполнения Цикл
				Объект.Товары[Строка.ИндексТовары].СтатусУказанияСерий = Строка.СтатусУказанияСерий;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеЭлементамиФормыПриСозданииИИзмененииРеквизитов(Элементы.Упаковка);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКоличестваУпаковокИлиУпаковкиНаСервере()
	
	СтароеКоличествоУпаковок = Объект.КоличествоУпаковок;
	
	Если Объект.ВариантКомплектацииНоменклатуры.Пустая() Тогда
		
		КоэффициентУпаковки = КоэффициентУпаковки(Объект.Упаковка, Объект.Номенклатура);
		Объект.Количество = Объект.КоличествоУпаковок * КоэффициентУпаковки;
		Если Объект.КоличествоУпаковок < Объект.Товары.Итог("Подобрано") Тогда
			Объект.КоличествоУпаковок = Объект.Товары.Итог("Подобрано");
			Объект.Количество = Объект.КоличествоУпаковок * КоэффициентУпаковки;
		КонецЕсли;
		
	Иначе
		
		// Количество будет пересчитано.
		СоставНабораПересчитатьНаСервере("КОЛИЧЕСТВО");
		
	КонецЕсли;
	
	Если СтароеКоличествоУпаковок < Объект.КоличествоУпаковок Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Введено количество упаковок меньше, чем уже подобрано. Подобрано %1 %2.'"),
			Объект.КоличествоУпаковок,
			?(ЗначениеЗаполнено(Объект.Упаковка), Объект.Упаковка, ЕдиницаИзмерения));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КоличествоПриИзмененииНаСервере()
	
	СтароеКоличество = Объект.Количество;
	
	Если Объект.ВариантКомплектацииНоменклатуры.Пустая() Тогда
		
		КоэффициентУпаковки = КоэффициентУпаковки(Объект.Упаковка, Объект.Номенклатура);
		Объект.КоличествоУпаковок = Объект.Количество / КоэффициентУпаковки;
		Если Объект.КоличествоУпаковок < Объект.Товары.Итог("Подобрано") Тогда
			Объект.КоличествоУпаковок = Объект.Товары.Итог("Подобрано");
			Объект.Количество = Объект.КоличествоУпаковок * КоэффициентУпаковки;
		КонецЕсли;
		
	Иначе
		
		// Количество будет пересчитано на сервере.
		СоставНабораПересчитатьНаСервере("КОЛИЧЕСТВОУПАКОВОК");
		
	КонецЕсли;
	
	Если СтароеКоличество < Объект.Количество Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Введено количество упаковок меньше, чем уже подобрано. Подобрано %1 %2.'"),
			Объект.КоличествоУпаковок,
			?(ЗначениеЗаполнено(Объект.Упаковка), Объект.Упаковка, ЕдиницаИзмерения));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	УправлениеЭлементамиФормыПриСозданииИИзмененииРеквизитов(Элементы.Количество);
	
КонецПроцедуры

&НаСервере
Процедура ПереключательОбособленноПриИзмененииНаСервере()
	
	Если Элементы.Действие.СписокВыбора.НайтиПоЗначению(Объект.ВариантОбеспечения) = Неопределено Тогда
		Объект.ВариантОбеспечения = Элементы.Действие.СписокВыбора[0].Значение;
		ДействиеПриИзмененииНаСервере();
	КонецЕсли;
	УправлениеЭлементамиФормыПриСозданииИИзмененииРеквизитов(Элементы.ПереключательОбособленно);
	
КонецПроцедуры

&НаСервере
Процедура РежимОтображенияТоваровПриИзмененииНаСервере()
	
	УправлениеЭлементамиФормыПриСозданииИИзмененииРеквизитов(Элементы.РежимОтображенияТоваров);
	
КонецПроцедуры

&НаСервере
Процедура ТолькоСкладыВыбраннойГруппыПриИзмененииНаСервере()
	
	УправлениеЭлементамиФормыПриСозданииИИзмененииРеквизитов(Элементы.ТолькоСкладыВыбраннойГруппы);
	
КонецПроцедуры

&НаСервере
Процедура ДействиеПриИзмененииНаСервере()
	
	КлючевыеПараметры = ОбеспечениеВДокументахКлиентСервер.КлючевыеПараметрыФормыЗапросаКоличестваИСерий();
	ЗаполнитьЗначенияСвойств(КлючевыеПараметры, Параметры);
	
	Если КлючевыеПараметры.ПодборСерий Тогда
		
		СтрокиДляУстановкиСтатусаСерий = Новый Массив;
		Для Каждого Строка Из Объект.Товары Цикл
			СтрокиДляУстановкиСтатусаСерий.Добавить(Строка);
		КонецЦикла;
		Обработки.ПодборТоваровВДокументПродажи.ЗаполнитьСтатусУказанияСерииВСтроке(
			СтрокиДляУстановкиСтатусаСерий,
			Параметры.ПараметрыУказанияСерий,
			Объект.ВариантОбеспечения);
		Если Объект.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.Отгрузить
				И Объект.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.СоСклада Тогда
			Объект.Серии.Очистить();
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеЭлементамиФормыПриСозданииИИзмененииРеквизитов(Элементы.Действие);
	
КонецПроцедуры

&НаСервере
Процедура ВидЦеныПриИзмененииНаСервере()
	
	КлючевыеПараметры = ОбеспечениеВДокументахКлиентСервер.КлючевыеПараметрыФормыЗапросаКоличестваИСерий();
	ЗаполнитьЗначенияСвойств(КлючевыеПараметры, Параметры);

	Обработки.ЗапросКоличестваИСерий.ВидЦеныПриИзменении(Объект, КлючевыеПараметры, Склады.ВыгрузитьЗначения());
	УправлениеЭлементамиФормыПриСозданииИИзмененииРеквизитов(Элементы.ВидЦены);
	
КонецПроцедуры

&НаСервере
Процедура ЦенаНаборПриИзмененииНаСервере()
	
	Обработки.ЗапросКоличестваИСерий.ЦенаПриИзменении(Объект, Склады.ВыгрузитьЗначения());
	
КонецПроцедуры

&НаСервере
Процедура СоставНабораПриАктивизацииСтрокиНаСервере()
	
	РассчитатьЕдиницуИзмерения();
	Обработки.ЗапросКоличестваИСерий.ПересчиатьОстаткиВУпаковке(Объект.Товары, ТекущаяУпаковка, ТекущаяНоменклатура, ТекущаяХарактеристика);
	УправлениеЭлементамиФормыПриСозданииИИзмененииРеквизитов(Элементы.СоставНабора);
	
КонецПроцедуры

&НаСервере
Процедура ВариантПредоставленияСкидкиПриИзмененииНаСервере()
	
	УправлениеЭлементамиФормыПриСозданииИИзмененииРеквизитов(Элементы.ВариантПредоставленияСкидки);
	
КонецПроцедуры

#КонецОбласти

#Область ПриИзмененииКоличества

&НаКлиенте
Функция СкорректироватьИзменениеКоличества(КоличествоИзменениеИсходное, СтрокаТовары)
	
	КлючевыеПараметры = ОбеспечениеВДокументахКлиентСервер.КлючевыеПараметрыФормыЗапросаКоличестваИСерий();
	ЗаполнитьЗначенияСвойств(КлючевыеПараметры, Параметры);
	
	КоличествоИзменение = КоличествоИзменениеИсходное;
	
	СтрокаТовары = Элементы.Товары.ТекущиеДанные;
	
	// Нельзя изменить на количество большее чем указано в документе.
	Если Не КлючевыеПараметры.ПодборТоваров Тогда
		
		КоличествоИзменение = Мин(КоличествоИзменение, Объект.КоличествоУпаковок - Объект.Товары.Итог("Подобрано"));
		Если КоличествоИзменение < КоличествоИзменениеИсходное Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Указано количество больше, чем требуется подобрать. Изменено на: %1 %2.'"),
				СтрокаТовары.Подобрано + КоличествоИзменение, ЕдиницаИзмерения);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,);
		КонецЕсли;
	КонецЕсли;
	
	// Нельзя оставить количество меньшнее чем оформлено.
	Если Не КлючевыеПараметры.ПодборТоваров
				И СтрокаТовары.ЭтоСтрокаДокумента Тогда
		
		КоличествоРезультат = СтрокаТовары.Подобрано + КоличествоИзменение;
		КоличествоКорректировка = -Мин(КоличествоРезультат - Объект.КоличествоОформлено, 0);
		КоличествоИзменение = КоличествоИзменение + КоличествоКорректировка;
		Если КоличествоКорректировка > 0 Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Указано количество меньше чем отгружено. Изменено на %1 %2.'"),
				СтрокаТовары.Подобрано + КоличествоИзменение, ЕдиницаИзмерения);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,);
		КонецЕсли;
	КонецЕсли;
	
	Возврат КоличествоИзменение;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПодобрано(Форма, СтрокаТовары, КоличествоИзменение, ЕдиницаИзмеренияКоэффициент, ЭтоМернаяЕдиница, ДопустимоеОтклонение)
	
	Объект    = Форма.Объект;
	Параметры = Форма.Параметры;
	Элементы  = Форма.Элементы;
	
	КлючевыеПараметры = ОбеспечениеВДокументахКлиентСервер.КлючевыеПараметрыФормыЗапросаКоличестваИСерий();
	ЗаполнитьЗначенияСвойств(КлючевыеПараметры, Параметры);
	
	СтрокаТовары.Подобрано = СтрокаТовары.Подобрано + КоличествоИзменение;
	СтрокаТовары.ПодобраноДоИзменения = СтрокаТовары.Подобрано;
	
	Если КлючевыеПараметры.ПодборТоваров Тогда
		
		Если Объект.ВариантКомплектацииНоменклатуры.Пустая() Тогда
			
			Если Объект.КоличествоУпаковок < Объект.Товары.Итог("Подобрано") Тогда
				
				Объект.КоличествоУпаковок = Объект.Товары.Итог("Подобрано");
				КоэффициентУпаковки = КоэффициентУпаковки(Объект.Упаковка, Объект.Номенклатура);
				Объект.Количество = Объект.КоличествоУпаковок * КоэффициентУпаковки;
				
			КонецЕсли;
			
		Иначе
			
			СтрокаНабора = Объект.СоставНабора.НайтиПоИдентификатору(Элементы.СоставНабора.ТекущаяСтрока);
			СтрокаНабора.КоличествоПодобрано = СтрокаНабора.КоличествоПодобрано + КоличествоИзменение;
			
		КонецЕсли;
		
		ПересчитатьСтатусУказанияСерий(Объект, СтрокаТовары, Параметры.ПараметрыУказанияСерий, ЭтоМернаяЕдиница, ДопустимоеОтклонение, ЕдиницаИзмеренияКоэффициент);
		
	Иначе
		
		ПересчитатьСтатусУказанияСерий(Объект, СтрокаТовары, Параметры.ПараметрыУказанияСерий, ЭтоМернаяЕдиница, ДопустимоеОтклонение, ЕдиницаИзмеренияКоэффициент);
		
	КонецЕсли;
	
	СформироватьНадписьПодобратьПодобрано(Форма);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКоличествоНаборов()
	
	КлючевыеПараметры = ОбеспечениеВДокументахКлиентСервер.КлючевыеПараметрыФормыЗапросаКоличестваИСерий();
	ЗаполнитьЗначенияСвойств(КлючевыеПараметры, Параметры);
	Если КлючевыеПараметры.ПодборТоваров Тогда
		
		Если Не Объект.ВариантКомплектацииНоменклатуры.Пустая() Тогда
			
			СтрокаНабора = Объект.СоставНабора.НайтиПоИдентификатору(Элементы.СоставНабора.ТекущаяСтрока);
			Если СтрокаНабора.КоличествоПодобрано > СтрокаНабора.КоличествоПодобрать Тогда
				Объект.Количество = СтрокаНабора.КоличествоПодобрано / СтрокаНабора.КоличествоУпаковок;
				// Количество упаковок будет пересчитано на сервере.
				СоставНабораПересчитатьНаСервере("КОЛИЧЕСТВОПОДОБРАТЬ");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НужноОбновитьКоличествоНаборов()
	
	КлючевыеПараметры = ОбеспечениеВДокументахКлиентСервер.КлючевыеПараметрыФормыЗапросаКоличестваИСерий();
	ЗаполнитьЗначенияСвойств(КлючевыеПараметры, Параметры);
	Если КлючевыеПараметры.ПодборТоваров И Не Объект.ВариантКомплектацииНоменклатуры.Пустая() Тогда
		
		СтрокаНабора = Объект.СоставНабора.НайтиПоИдентификатору(Элементы.СоставНабора.ТекущаяСтрока);
		
		Возврат СтрокаНабора.КоличествоПодобрано > СтрокаНабора.КоличествоПодобрать;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьПодобратьПодобрано(Форма)
	
	Если Форма.Объект.ВариантКомплектацииНоменклатуры.Пустая() Тогда
		
		КоличествоПодобрать = Форма.Объект.КоличествоУпаковок;
		КоличествоПодобрано = Форма.Объект.Товары.Итог("Подобрано");
		
	Иначе
		
		ТекущаяСтрокаНабора = Форма.Объект.СоставНабора.НайтиПоИдентификатору(Форма.Элементы.СоставНабора.ТекущаяСтрока);
		КоличествоПодобрать = ТекущаяСтрокаНабора.КоличествоПодобрать;
		КоличествоПодобрано = ТекущаяСтрокаНабора.КоличествоПодобрано;
		
	КонецЕсли;
	
	ФорматнаяСтрока = "ЧДЦ=3; ЧН=0,000";
	Форма.Элементы.НадписьПодобратьПодобрано.Заголовок =
		СтрШаблон(НСтр("ru = 'Требуется подобрать - %1 %3. Подобрано - %2 %3'"),
		Формат(КоличествоПодобрать, ФорматнаяСтрока) ,
		Формат(КоличествоПодобрано, ФорматнаяСтрока) ,
		Форма.ЕдиницаИзмерения);
	
	Форма.Элементы.КоличествоПоДокументу.Заголовок =
		СтрШаблон(НСтр("ru = '%1 %2.'"),
		Формат(КоличествоПодобрать, ФорматнаяСтрока),
		Форма.ЕдиницаИзмерения);
	
	Форма.Элементы.КоличествоПодобрать.Заголовок =
		СтрШаблон(НСтр("ru = '%1 %2.'"),
		Формат(КоличествоПодобрать - КоличествоПодобрано, ФорматнаяСтрока),
		Форма.ЕдиницаИзмерения);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьПодобраноПриИзмененииСерий(СтрокаТовары, КоличествоИзменение, ЕдиницаИзмеренияКоэффициент)
	
	КлючевыеПараметры = ОбеспечениеВДокументахКлиентСервер.КлючевыеПараметрыФормыЗапросаКоличестваИСерий();
	ЗаполнитьЗначенияСвойств(КлючевыеПараметры, Параметры);
	
	СтрокаТовары.Подобрано = СтрокаТовары.Подобрано + КоличествоИзменение;
	СтрокаТовары.ПодобраноДоИзменения = СтрокаТовары.Подобрано;
	
	Если КлючевыеПараметры.ПодборТоваров Тогда
		
		Если Не Объект.ВариантКомплектацииНоменклатуры.Пустая() Тогда
			
			СтрокаНабора = Объект.СоставНабора.НайтиПоИдентификатору(Элементы.СоставНабора.ТекущаяСтрока);
			СтрокаНабора.КоличествоПодобрано = СтрокаНабора.КоличествоПодобрано + КоличествоИзменение;
			
			Если СтрокаНабора.КоличествоПодобрано > СтрокаНабора.КоличествоПодобрать Тогда
				Объект.Количество = СтрокаНабора.КоличествоПодобрано / СтрокаНабора.Количество;
				// Количество упаковок будет пересчитано на сервере.
				СоставНабораПересчитатьНаСервере("КОЛИЧЕСТВОПОДОБРАТЬ");
			КонецЕсли;
			
		Иначе
			
			Если Объект.КоличествоУпаковок < Объект.Товары.Итог("Подобрано") Тогда
				Объект.КоличествоУпаковок = Объект.Товары.Итог("Подобрано");
				КоэффициентУпаковки = КоэффициентУпаковки(Объект.Упаковка, Объект.Номенклатура);
				Объект.Количество = Объект.КоличествоУпаковок * КоэффициентУпаковки;
			КонецЕсли;
			
		КонецЕсли;
		
		ПересчитатьСтатусУказанияСерий(Объект, СтрокаТовары, Параметры.ПараметрыУказанияСерий, ЭтоМернаяЕдиница, ДопустимоеОтклонение, ЕдиницаИзмеренияКоэффициент);
		
	Иначе
		
		Если Объект.ИндексСтрокиДокумента > -1 Тогда
			
			СтрокаДокумента = Объект.Товары[Объект.ИндексСтрокиДокумента];
			СтрокаДокумента.Подобрано = СтрокаДокумента.Подобрано - КоличествоИзменение;
			СтрокаДокумента.ПодобраноДоИзменения = СтрокаДокумента.Подобрано;
			ПересчитатьСтатусУказанияСерий(Объект, СтрокаДокумента, Параметры.ПараметрыУказанияСерий, ЭтоМернаяЕдиница, ДопустимоеОтклонение, ЕдиницаИзмеренияКоэффициент);
		
		КонецЕсли;
		
		ПересчитатьСтатусУказанияСерий(Объект, СтрокаТовары, Параметры.ПараметрыУказанияСерий, ЭтоМернаяЕдиница, ДопустимоеОтклонение, ЕдиницаИзмеренияКоэффициент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоставНабораПересчитатьНаСервере(Реквизит)
	
	Если Реквизит = "КОЛИЧЕСТВОПОДОБРАТЬ" Тогда
		
		КоэффициентУпаковки = КоэффициентУпаковки(Объект.Упаковка, Объект.Номенклатура);
		Объект.КоличествоУпаковок = Объект.Количество / КоэффициентУпаковки;
		
	ИначеЕсли Реквизит = "КОЛИЧЕСТВО" Тогда
		
		КоэффициентУпаковки = КоэффициентУпаковки(Объект.Упаковка, Объект.Номенклатура);
		Объект.Количество = Объект.КоличествоУпаковок * КоэффициентУпаковки;
		
	ИначеЕсли Реквизит = "КОЛИЧЕСТВОУПАКОВОК" Тогда
		
		КоэффициентУпаковки = КоэффициентУпаковки(Объект.Упаковка, Объект.Номенклатура);
		Объект.КоличествоУпаковок = Объект.Количество / КоэффициентУпаковки;
		
	КонецЕсли;
	
	Обработки.ЗапросКоличестваИСерий.СоставНабораПересчитать(Объект, Реквизит);
	
КонецПроцедуры

&НаСервере
Функция ОкруглятьКоличество()
	
	КлючевыеПараметры = ОбеспечениеВДокументахКлиентСервер.КлючевыеПараметрыФормыЗапросаКоличестваИСерий();
	ЗаполнитьЗначенияСвойств(КлючевыеПараметры, Параметры);
	
	ЕдиницаИзмеренияТипИзмеряемойВеличины = "";
	УпаковкаТипИзмеряемойВеличины = "";
	
	ЕдиницаМерная = Справочники.УпаковкиЕдиницыИзмерения.ЭтоМернаяЕдиница(ЕдиницаИзмеренияСерий, ЕдиницаИзмеренияТипИзмеряемойВеличины);
	УпаковкаМерная = Справочники.УпаковкиЕдиницыИзмерения.ЭтоМернаяЕдиница(Объект.Упаковка, УпаковкаТипИзмеряемойВеличины);
	
	Возврат КлючевыеПараметры.ПодборТоваров И Не ЕдиницаМерная И ЕдиницаИзмеренияТипИзмеряемойВеличины = "КоличествоШтук" И УпаковкаМерная;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьСтатусУказанияСерий(Объект, СтрокаТовары, ПараметрыУказанияСерий, ЭтоМернаяЕдиница, ДопустимоеОтклонение, ЕдиницаИзмеренияКоэффициент)
	
	ВариантОбеспечения = Объект.ВариантОбеспечения;
	Серии = Объект.Серии;
	
	Если СтрокаТовары.СтатусУказанияСерий = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоТоваров   = Окр(СтрокаТовары.Подобрано * ЕдиницаИзмеренияКоэффициент, 3);
	КоличествоСерий     = КоличествоСерийПоСтроке(СтрокаТовары, Серии);
	
	СерииУказаныПолностью = КоличествоТоваров > 0
		И (КоличествоТоваров = КоличествоСерий
			Или ЭтоМернаяЕдиница И КоличествоТоваров > КоличествоСерий И КоличествоТоваров * (1 - ДопустимоеОтклонение / 100) <= КоличествоСерий
			Или ЭтоМернаяЕдиница И КоличествоТоваров < КоличествоСерий И КоличествоТоваров * (1 + ДопустимоеОтклонение / 100) >= КоличествоСерий);
	
	НоменклатураКлиентСервер.ПересчитатьСтатусУказанияСерийПриОбработке(ПараметрыУказанияСерий,
		СтрокаТовары.СтатусУказанияСерий,
		СерииУказаныПолностью,
		КоличествоСерий,
		ВариантОбеспечения);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КоличествоСерийПоСтроке(СтрокаТовары, Серии)
	
	КоличествоСерий = 0;
	
	Если СтрокаТовары.НомерПервойСтрокиСерий > 0 Тогда
		
		ИндексТаблицыСерий = СтрокаТовары.НомерПервойСтрокиСерий - 1;
		КлючСтроки = Новый Структура("Номенклатура,Характеристика,Склад,Назначение");
		ЗаполнитьЗначенияСвойств(КлючСтроки, Серии[ИндексТаблицыСерий]);
		Пока ИндексТаблицыСерий < Серии.Количество() Цикл
			
			СтрокаСерии = Серии[ИндексТаблицыСерий];
			Если Не ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(КлючСтроки, СтрокаСерии) Тогда
				Прервать;
			КонецЕсли;
			
			КоличествоСерий = КоличествоСерий + СтрокаСерии.Подобрано;
			ИндексТаблицыСерий = ИндексТаблицыСерий + 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат КоличествоСерий;
	
КонецФункции

#КонецОбласти

#Область ПриСоздании

&НаСервере
Процедура УправлениеЭлементамиФормыПриСоздании()
	
	КлючевыеПараметры = ОбеспечениеВДокументахКлиентСервер.КлючевыеПараметрыФормыЗапросаКоличестваИСерий();
	ЗаполнитьЗначенияСвойств(КлючевыеПараметры, Параметры);
	
	Если КлючевыеПараметры.РежимОтображенияТоваров <> Неопределено Тогда
		РежимОтображенияТоваров = КлючевыеПараметры.РежимОтображенияТоваров;
	КонецЕсли;
	
	Если ТолькоПросмотр Тогда
		Элементы.ТоварыКартинкаПереместитьВправо.Видимость = Ложь;
		Элементы.КоличествоПодобрать.Видимость = Ложь;
		Элементы.ТоварыГруппаПодобрано.КартинкаШапки = Новый Картинка();
		Элементы.НадписьКоличествоПодобать.Видимость = Ложь;
	КонецЕсли;
	
	// Установка заголовка формы.
	Текст = Неопределено;
	
	Если КлючевыеПараметры.ПодборТоваров Тогда
		
		Текст = НСтр("ru = 'Ввод количества и цены'");
		Если КлючевыеПараметры.СкрытьЦену Тогда
			Текст = НСтр("ru = 'Ввод количества'");
		КонецЕсли;
		
	ИначеЕсли КлючевыеПараметры.ВыборСерии Тогда
		
		Текст = НСтр("ru = 'Указание серий'");
		
	ИначеЕсли КлючевыеПараметры.ПодборСкладов Тогда
		
		Текст = ЗаголовокПодборСклада();
		
	КонецЕсли;
	
	Заголовок = Текст;
	
	// Вспомогательные реквизиты.
	РеквизитыНоменклатуры = Новый Массив();
	РеквизитыНоменклатуры.Добавить("ТипНоменклатуры");
	РеквизитыНоменклатуры.Добавить("ПлощадьМожноУказыватьВДокументах");
	РеквизитыНоменклатуры.Добавить("ОбъемМожноУказыватьВДокументах");
	РеквизитыНоменклатуры.Добавить("ВесМожноУказыватьВДокументах");
	РеквизитыНоменклатуры.Добавить("ДлинаМожноУказыватьВДокументах");
	РеквизитыНоменклатуры.Добавить("НаборУпаковок");
	
	РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.Номенклатура,
		СтрСоединить(РеквизитыНоменклатуры,","));
	
	ИспользоватьУпаковки = РеквизитыНоменклатуры.ПлощадьМожноУказыватьВДокументах
		Или РеквизитыНоменклатуры.ВесМожноУказыватьВДокументах
		Или РеквизитыНоменклатуры.ОбъемМожноУказыватьВДокументах
		Или РеквизитыНоменклатуры.ДлинаМожноУказыватьВДокументах
		Или ЗначениеЗаполнено(РеквизитыНоменклатуры.НаборУпаковок);
		
	ЭтоНабор = РеквизитыНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор;
	
	// Настройка упаковки.
	Элементы.ЕдиницаИзмерения.Видимость = Не ИспользоватьУпаковки И Не ЭтоНабор;
	Элементы.Упаковка.Видимость = ИспользоватьУпаковки И Не ЭтоНабор;
	Элементы.ЕдиницаИзмеренияНабора.Видимость = ЭтоНабор;
	
	// Установка видимости ценовых показателей.
	Элементы.ГруппаВидЦеныЦена.Видимость  = Не КлючевыеПараметры.СкрытьЦену;
	Элементы.ВидЦены.ТолькоПросмотр       = Не КлючевыеПараметры.РедактироватьВидЦены;
	Элементы.ВидЦены.ПропускатьПриВводе   = Не КлючевыеПараметры.РедактироватьВидЦены;
	Элементы.Цена.Доступность             = КлючевыеПараметры.РедактироватьВидЦены;
	Элементы.СоставНабораЦена.Видимость   = Не КлючевыеПараметры.СкрытьЦену;
	
	// Установка видимости скидок.
	ИспользоватьОграниченияРучныхСкидок = ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоПользователям")
		Или ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоСоглашениям");
	
	Элементы.ГруппаПараметрыСкидкиНаценки.Видимость           = КлючевыеПараметры.ИспользоватьРучныеСкидкиВПродажах
	                                                               И Не КлючевыеПараметры.СкрыватьРучныеСкидки;
	Элементы.НадписьМаксимальнаяРучнаяСкидка.Видимость        = ИспользоватьОграниченияРучныхСкидок;
	Элементы.НадписьМаксимальнаяРучнаяСкидка.Заголовок        = СтрШаблон(НСтр("ru = '%2 Макс. скидка: %1%%'"), МаксимальныйПроцентСкидки);
	Элементы.НадписьМаксимальнаяРучнаяНаценка.Видимость       = ИспользоватьОграниченияРучныхСкидок;
	Элементы.НадписьМаксимальнаяРучнаяНаценка.Заголовок       = СтрШаблон(НСтр("ru = '%2 Макс. наценка: %1%%'"), МаксимальныйПроцентНаценки);
	Элементы.НадписьМаксимальнаяСкидкаНеОграничена.Видимость  = Не ИспользоватьОграниченияРучныхСкидок;
	Элементы.НадписьМаксимальнаяНаценкаНеОграничена.Видимость = Не ИспользоватьОграниченияРучныхСкидок;
	
	// Установка видимости элементов наборов.
	Элементы.СоставНабора.Видимость                   = ЭтоНабор;
	Элементы.ГруппаВНаличииДоступноПоНабору.Видимость = ЭтоНабор;
	Элементы.ГруппаЦенаНабор.Видимость                = ЭтоНабор;
	Элементы.ГруппаЦена.Видимость                     = Не ЭтоНабор;
	Элементы.Действие.Видимость                       = Не ЭтоНабор;
	Элементы.ПереключательОбособленно.Видимость       = Не ЭтоНабор;
	
	// Установка видимости на страницах товаров и серий.
	Элементы.КВыборуДействий.Видимость = Не КлючевыеПараметры.ВыборСерии;
	
	// Установка видимости количества.
	Элементы.ГруппаКоличество.Видимость          = КлючевыеПараметры.ПодборТоваров;
	Элементы.НадписьПодобратьПодобрано.Видимость = КлючевыеПараметры.ПодборТоваров;
	
	// Установка видимости информации об остатках.
	ОтображатьИнформацию = Не КлючевыеПараметры.ПодборТоваров И Не КлючевыеПараметры.ВыборСерии;
	Элементы.ГруппаПодобратьПодобраноТовары.Видимость = ОтображатьИнформацию;
	Элементы.ГруппаПодобратьПодобраноТоварыЕдиницыИзмерения.Видимость = ОтображатьИнформацию;
	
	// Видимость действия и флага "Обособленно".
	Элементы.Действие.Видимость = КлючевыеПараметры.ПодборТоваров
		И КлючевыеПараметры.ПодборВариантовОбеспечения
		И Не КлючевыеПараметры.ОграничиватьВариантыОбеспечения;
	Элементы.ПереключательОбособленно.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьОбособленноеОбеспечениеЗаказов")
		И КлючевыеПараметры.ПодборТоваров
		И КлючевыеПараметры.ПодборВариантовОбеспечения
		И Не КлючевыеПараметры.ОграничиватьВариантыОбеспечения;
	
	// Видимость и заголовок поля "Только склады группы".
	Если Справочники.Склады.ЭтоГруппа(Объект.Склад) Тогда
		Элементы.ТолькоСкладыВыбраннойГруппы.Заголовок = СтрШаблон(Элементы.ТолькоСкладыВыбраннойГруппы.Заголовок, Объект.Склад);
	Иначе
		Элементы.ТолькоСкладыВыбраннойГруппы.Заголовок = СтрШаблон(НСтр("ru = 'Только склад ""%1""'"), Объект.Склад);
	КонецЕсли;
	
	Элементы.ТолькоСкладыВыбраннойГруппы.Видимость = Не КлючевыеПараметры.ВыборСерии
		И ЗначениеЗаполнено(Объект.Склад);
	
	// Установка текущей строки на строку документа.
	Если Объект.ИндексСтрокиДокумента > - 1 Тогда
		СтрокаДокумента = Объект.Товары[Объект.ИндексСтрокиДокумента];
		Элементы.Товары.ТекущаяСтрока = СтрокаДокумента.ПолучитьИдентификатор();
	КонецЕсли;
	
	Если Не КлючевыеПараметры.ПодборТоваров Тогда
		
		Если Объект.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада
				Или Объект.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить Тогда
				
			Элементы.РежимОтображенияТоваров.СписокВыбора.Удалить(
				Элементы.РежимОтображенияТоваров.СписокВыбора.НайтиПоЗначению("ОстаткиИГрафик"));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.СоставНабора.Количество() > 0 Тогда
		Элементы.СоставНабора.ТекущаяСтрока = Объект.СоставНабора[0].ПолучитьИдентификатор();
	КонецЕсли;

	// Настройка элементов которые должны быть настроены как при создании так и при репдактировании отдельных элементов в форме.
	УправлениеЭлементамиФормыПриСозданииИИзмененииРеквизитов(Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормыПриСозданииИИзмененииРеквизитов(Элемент)
	
	КлючевыеПараметры = ОбеспечениеВДокументахКлиентСервер.КлючевыеПараметрыФормыЗапросаКоличестваИСерий();
	ЗаполнитьЗначенияСвойств(КлючевыеПараметры, Параметры);
	
	Если Элемент = Неопределено Или Элемент = Элементы.СоставНабора  Или Элемент = Элементы.Упаковка Тогда
		
		ЕдиницаИзмерения = Неопределено;
		ЕдиницаИзмеренияНабора = Неопределено;
		Если Объект.ВариантКомплектацииНоменклатуры.Пустая() Тогда
			ЕдиницаИзмерения = Объект.Упаковка;
		Иначе
			ЕдиницаИзмерения = Объект.СоставНабора.НайтиПоИдентификатору(Элементы.СоставНабора.ТекущаяСтрока).Упаковка;
			ЕдиницаИзмеренияНабора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Номенклатура, "ЕдиницаИзмерения");
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
			ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяНоменклатура, "ЕдиницаИзмерения");
		КонецЕсли;
		ЕдиницаИзмеренияСерий = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяНоменклатура, "ЕдиницаИзмерения");
		ЕдиницаИзмеренияКоэффициент = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(ЕдиницаИзмерения, ТекущаяНоменклатура);
		ДопустимоеОтклонение = Константы.ДопустимоеОтклонениеПриОкругленииКоличества.Получить();
		ЭтоМернаяЕдиница = Справочники.УпаковкиЕдиницыИзмерения.ЭтоМернаяЕдиница(ЕдиницаИзмеренияСерий, "");
	
		
		// Упаковка в заголовках табличной части Товары.
		Элементы.ТоварыВРезерве.Заголовок = СтрШаблон(НСтр("ru = 'В резерве, %1'"), ЕдиницаИзмерения);
		Элементы.ТоварыДоступно.Заголовок = СтрШаблон(НСтр("ru = 'Доступно, %1'"), ЕдиницаИзмерения);
		Элементы.ТоварыГруппаПодобрано.Заголовок = СтрШаблон(НСтр("ru = 'Подобрано, %1'"), ЕдиницаИзмерения);
		Элементы.Упаковка.ПодсказкаВвода = ЕдиницаИзмерения;
		
		// Упаковка в заголовках табличной части Серии.
		Элементы.СерииДоступно.Заголовок = СтрШаблон(НСтр("ru = 'Доступно, %1'"), ЕдиницаИзмеренияСерий);
		Элементы.СерииПодобрано.Заголовок = СтрШаблон(НСтр("ru = 'Подобрано, %1'"), ЕдиницаИзмеренияСерий);
		
		ФорматнаяСтрока = "ЧДЦ=3; ЧН=0,000";
		Элементы.НадписьОбеспечено.Заголовок = СтрШаблон(
			НСтр("ru = 'Обособленно в наличии - %1 %3, в наличии и ожидается - %2 %3.'"),
			Формат(Объект.Товары.Итог("ВНаличииОбособленно"), ФорматнаяСтрока),
			Формат(Объект.Товары.Итог("ПоГрафикуОбособленно"), ФорматнаяСтрока),
			ЕдиницаИзмерения);
			
	КонецЕсли;
	
	Если Элемент = Неопределено Или Элемент = Элементы.Упаковка Тогда
		
		Обработки.ЗапросКоличестваИСерий.ВыгрузитьВидыЦенВСписок(Объект, Элементы.ВидЦены.СписокВыбора, Ложь);
		Элементы.ВидЦены.СписокВыбора.Добавить(Справочники.ВидыЦен.ПустаяСсылка(), НСтр("ru='<произвольная>'"));
		Если Элементы.ВидЦены.СписокВыбора.НайтиПоЗначению(Объект.ВидЦены) = Неопределено Тогда
			Объект.ВидЦены = Справочники.ВидыЦен.ПустаяСсылка();
		КонецЕсли;
		Обработки.ЗапросКоличестваИСерий.ВыгрузитьВидыЦенВСписок(Объект, Элементы.Цена.СписокВыбора, Истина);
		
		ЕдиницаИзмеренияТипИзмеряемойВеличины = "";
		УпаковкаТипИзмеряемойВеличины = "";
		
		ЕдиницаМерная  = Справочники.УпаковкиЕдиницыИзмерения.ЭтоМернаяЕдиница(ЕдиницаИзмеренияСерий, ЕдиницаИзмеренияТипИзмеряемойВеличины);
		УпаковкаМерная = Справочники.УпаковкиЕдиницыИзмерения.ЭтоМернаяЕдиница(Объект.Упаковка,  УпаковкаТипИзмеряемойВеличины);
		
		Если ЕдиницаМерная
			И УпаковкаТипИзмеряемойВеличины <> ЕдиницаИзмеренияТипИзмеряемойВеличины
			И УпаковкаТипИзмеряемойВеличины <> "Упаковка"
			И УпаковкаТипИзмеряемойВеличины <> ""
			Или ЕдиницаИзмеренияТипИзмеряемойВеличины = "КоличествоШтук"
				И УпаковкаМерная Тогда
			
			Элементы.Количество.Видимость = Истина;
			Элементы.НоменклатураЕдиницаИзмерения.Видимость = Истина;
			
		Иначе
			
			Элементы.Количество.Видимость = Ложь;
			Элементы.НоменклатураЕдиницаИзмерения.Видимость = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Элемент = Неопределено Или Элемент = Элементы.ВидЦены Тогда
		
		Элементы.ЦенаНабор.ТолькоПросмотр     = ЗначениеЗаполнено(Объект.ВидЦены);
		Элементы.ЦенаНабор.ПропускатьПриВводе = ЗначениеЗаполнено(Объект.ВидЦены);
		
	КонецЕсли;
	
	Если Элемент = Неопределено Или Элемент = Элементы.Цена Тогда
		
		ВидЦеныПредставление = ?(ЗначениеЗаполнено(Объект.ВидЦены), Объект.ВидЦены, НСтр("ru='<произвольная>'"));
		
	КонецЕсли;
	
	Если Элемент = Неопределено Или Элемент = Элементы.Цена Или Элемент = Элементы.ВариантПредоставленияСкидки Тогда
		
		Элементы.ПроцентРучнойСкидкиНаценки.КнопкаСпискаВыбора = Ложь;
		Элементы.ПроцентРучнойСкидкиНаценки.СписокВыбора.Очистить();
		
		Если ВариантПредоставленияСкидки = "СКИДКА" Тогда
			Элементы.СтраницыВариантыПредоставленияСкидки.ТекущаяСтраница = Элементы.Скидка;
			Если МаксимальныйПроцентСкидки > 0 Тогда
				Элементы.ПроцентРучнойСкидкиНаценки.КнопкаСпискаВыбора = Истина;
				Элементы.ПроцентРучнойСкидкиНаценки.СписокВыбора.Добавить(
					МаксимальныйПроцентСкидки,
					Формат(МаксимальныйПроцентСкидки, "ЧДЦ=2"));
			КонецЕсли;
		Иначе
			Элементы.СтраницыВариантыПредоставленияСкидки.ТекущаяСтраница = Элементы.Наценка;
			Если МаксимальныйПроцентНаценки > 0 Тогда
				Элементы.ПроцентРучнойСкидкиНаценки.КнопкаСпискаВыбора = Истина;
				Элементы.ПроцентРучнойСкидкиНаценки.СписокВыбора.Добавить(
					МаксимальныйПроцентНаценки,
					Формат(МаксимальныйПроцентНаценки, "ЧДЦ=2"));
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Элемент = Неопределено
			Или Элемент = Элементы.Количество
			Или Элемент = Элементы.Упаковка
			Или Элемент = Элементы.КоличествоУпаковок Тогда
			
			Если ОкруглятьКоличество И Объект.Количество <> Цел(Объект.Количество) Тогда
				
				Элементы.Округлить.Видимость = Истина;
				Элементы.НоменклатураЕдиницаИзмерения.ЦветТекста = ЦветаСтиля.ПоясняющийОшибкуТекст;
				Элементы.Количество.ЦветТекста                   = ЦветаСтиля.ПоясняющийОшибкуТекст;
				
			Иначе
				
				Элементы.Округлить.Видимость = Ложь;
				Элементы.НоменклатураЕдиницаИзмерения.ЦветТекста = ЦветаСтиля.ЦветТекстаПоля;
				Элементы.Количество.ЦветТекста                   = ЦветаСтиля.ЦветТекстаПоля;
				
			КонецЕсли;
			
	КонецЕсли;
	
	Если Элемент = Неопределено
			Или Элемент = Элементы.РежимОтображенияТоваров Тогда
			
			Элементы.ТоварыВРезерве.Видимость = РежимОтображенияТоваров = "СвободныеОстатки";
			Элементы.ТоварыДоступно.Видимость = РежимОтображенияТоваров <> "Все";
			Элементы.ТоварыВНаличии.Видимость = РежимОтображенияТоваров = "СвободныеОстатки";
			Элементы.ТоварыПоГрафику.Видимость = РежимОтображенияТоваров = "ОстаткиИГрафик";
			
	КонецЕсли;

	Если Элемент = Неопределено
			Или Элемент = Элементы.СоставНабора Тогда
				ТекущийТипНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяНоменклатура,
					 "ТипНоменклатуры");
	
					ЭтоРаботаИлиУслуга = ТекущийТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа
						Или ТекущийТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга;
					Элементы.СтраницыТоварыСерии.Видимость = Не ЭтоРаботаИлиУслуга;
				
	КонецЕсли;

	Если Элемент = Неопределено
			Или Элемент = Элементы.СоставНабора
			Или Элемент = Элементы.ПереключательОбособленно
			Или Элемент = Элементы.РежимОтображенияТоваров
			Или Элемент = Элементы.ТолькоСкладыВыбраннойГруппы Тогда
		
		ОтборСтрокТовары = Новый Структура();
		ОтборСтрокТовары.Вставить("Обособленно", Объект.Обособленно);
		Если Не Объект.ВариантКомплектацииНоменклатуры.Пустая() Тогда
			ОтборСтрокТовары.Вставить("ИндексТовараДляОтбора", ТекущийИндексТовараДляОтбора);
		КонецЕсли;
		
		Если РежимОтображенияТоваров = "СвободныеОстатки" Тогда
			ОтборСтрокТовары.Вставить("ЕстьОстатокНаСкладе", Истина);
		КонецЕсли;
		
		Если РежимОтображенияТоваров = "ОстаткиИГрафик" Тогда
			ОтборСтрокТовары.Вставить("ЕстьОстатокВГрафике", Истина);
		КонецЕсли;
		
		Если ТолькоСкладыВыбраннойГруппы Тогда
			ОтборСтрокТовары.Вставить("ЭтоСкладВыбраннойГруппы", Истина);
		КонецЕсли;
		
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрокТовары);
		
	КонецЕсли;
	
	Если Элемент = Элементы.КУказаниюСерий Тогда
		
		Элементы.СтраницыТоварыСерии.ТекущаяСтраница = Элементы.СтраницаСерии;
		
		СтрокаТовары = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
		ОтборСтрокСерии = Новый Структура();
		ОтборСтрокСерии.Вставить("Номенклатура",   СтрокаТовары.Номенклатура);
		ОтборСтрокСерии.Вставить("Характеристика", СтрокаТовары.Характеристика);
		ОтборСтрокСерии.Вставить("Склад",          СтрокаТовары.Склад);
		Если РежимОтображенияСерий = "СвободныеОстатки" Тогда
			ОтборСтрокСерии.Вставить("ПроверятьДоступность", Истина);
		КонецЕсли;
		ОтборСтрокСерии.Вставить("Назначение", ?(СтрокаТовары.Обособленно И Не ЗначениеЗаполнено(СтрокаТовары.Назначение),
		                                        Неопределено,
		                                        СтрокаТовары.Назначение));
		
		Элементы.Серии.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрокСерии);
		
		ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТовары.Номенклатура, "ВидНоменклатуры");
		
		НастройкиИспользованияСерий = Справочники.ВидыНоменклатуры.НастройкиИспользованияСерий(
			ВидНоменклатуры,
			Параметры.ПараметрыУказанияСерий,
			Новый Структура("Склад", СтрокаТовары.Склад));
		НастройкиИспользованияСерий = Новый ФиксированнаяСтруктура(НастройкиИспользованияСерий);
		
		Элементы.ГруппаСерииРеквизитыЛокализации.Видимость = Ложь;
		Элементы.СерииДатаПроизводства.Видимость = Ложь;
		
		УправлениеСвойствамиУТ.ДобавитьКолонкиДополнительныхРеквизитов(
			НастройкиИспользованияСерий,
			ЭтотОбъект,
			"Объект.Серии",
			"Серии",
			Элементы.СерииДоступно.Имя,
			Истина);
			
		Для Каждого Описание Из НастройкиИспользованияСерий.ОписанияИспользованияРеквизитовСерии Цикл
			
			ИмяЭлементаСерий = Обработки.ЗапросКоличестваИСерий.НазванияЭлементовСерий(Описание.ИмяРеквизита);
			Если Описание.ИмяНастройки <> "ИспользоватьRFIDМеткиСерии" Тогда
				
				НастраиваемыйЭлемент = Элементы.Найти(ИмяЭлементаСерий);
				
				Если НастраиваемыйЭлемент = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				НастраиваемыйЭлемент.Видимость = Описание.Использование; 
				
				Если Не ПустаяСтрока(Описание.Формат) Тогда
					НастраиваемыйЭлемент.Формат = Описание.Формат;
				КонецЕсли;
				
				Если Не ПустаяСтрока(Описание.ПредставлениеФорматнойСтрокиВЗаголовке) Тогда
					ПредставлениеЗаголовкаКолонки = НСтр("ru = '%ПредставлениеРеквизита% (%ПредставлениеФормата%)'");
					ПредставлениеЗаголовкаКолонки = СтрЗаменить(ПредставлениеЗаголовкаКолонки, "%ПредставлениеРеквизита%", Описание.ПредставлениеРеквизита);
					ПредставлениеЗаголовкаКолонки = СтрЗаменить(ПредставлениеЗаголовкаКолонки, "%ПредставлениеФормата%", Описание.ПредставлениеФорматнойСтрокиВЗаголовке);
					
					НастраиваемыйЭлемент.Заголовок = ПредставлениеЗаголовкаКолонки; 
				КонецЕсли;
				
				Если Описание.ИмяРеквизита = "ГоденДо" Тогда
					Элементы.СерииЗаполнитьПоFEFO.Видимость = Описание.Использование;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
			
		ВариантПолученияДанных = Обработки.ПодборСерийВДокументы.ВариантПолучениеДанныхИзРегистровПоПараметрамФормы(
			Параметры.ПараметрыУказанияСерий,
			Неопределено,
			СтрокаТовары.Склад,
			ВидНоменклатуры);
		Заголовки = Обработки.ПодборСерийВДокументы.ЗаголовкиПоВариантуПолучениеДанныхИзРегистров(ВариантПолученияДанных);
		Если Заголовки.ЗаголовокКнопки <> "" Тогда
			Элементы.РежимОтображенияСерий.СписокВыбора[0].Представление = Заголовки.ЗаголовокКнопки;
		КонецЕсли;
		Если Заголовки.ЗаголовокСвободногоОстатка <> "" Тогда
			Элементы.СерииДоступно.Заголовок = СтрЗаменить(Заголовки.ЗаголовокСвободногоОстатка,
				"%ЕдиницаИзмерения%", Строка(ЕдиницаИзмеренияСерий));
		КонецЕсли;
		
		Элементы.ГруппаКоличествоИДействие.Видимость = Ложь;
		Элементы.ГруппаДействияИОбособленно.Видимость = Ложь;
		Элементы.ГруппаТребуетсяПодобратьПодобрано.Видимость = Ложь;
		Элементы.ГруппаСтраницаСерииПодобратьПоСтроке.Видимость = Истина;
		Элементы.СоставНабора.Доступность = Ложь;
		
	КонецЕсли;
	
	Если Элемент = Элементы.КВыборуДействий Тогда
		
		Элементы.СтраницыТоварыСерии.ТекущаяСтраница = Элементы.СтраницаТовары;
		Элементы.ГруппаКоличествоИДействие.Видимость = Истина;
		Элементы.ГруппаСтраницаСерииПодобратьПоСтроке.Видимость = Ложь;
		Элементы.ГруппаДействияИОбособленно.Видимость = Истина;
		Элементы.ГруппаТребуетсяПодобратьПодобрано.Видимость = Истина;
		Элементы.СоставНабора.Доступность = Истина;
		
	КонецЕсли;
	
	Если Элемент = Неопределено
			Или Элемент = Элементы.КВыборуДействий
			Или Элемент = Элементы.Количество
			Или Элемент = Элементы.КоличествоУпаковок
			Или Элемент = Элементы.Упаковка Тогда
				
				СформироватьНадписьПодобратьПодобрано(ЭтотОбъект);
			
	КонецЕсли;
	
	Если Элемент = Неопределено
			Или Элемент = Элементы.КВыборуДействий
			Или Элемент = Элементы.КУказаниюСерий Тогда
			
			Элементы.НадписьОбеспечено.Видимость = Не КлючевыеПараметры.ПодборТоваров
				И Элементы.СтраницыТоварыСерии.ТекущаяСтраница = Элементы.СтраницаТовары
				И ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Услуга
				И ПолучитьФункциональнуюОпцию("ИспользоватьОбособленноеОбеспечениеЗаказов")
				И Не Объект.Обособленно
				И (Объект.Товары.Итог("ВНаличииОбособленно") > 0
					Или Объект.Товары.Итог("ПоГрафикуОбособленно") > 0);
				
			Элементы.НадписьПодобратьПодобрано.Видимость = КлючевыеПараметры.ПодборТоваров
				И Элементы.СтраницыТоварыСерии.ТекущаяСтраница = Элементы.СтраницаТовары;
				
			Элементы.ДекорацияИнформация.Видимость = Элементы.НадписьОбеспечено.Видимость
				Или Элементы.НадписьПодобратьПодобрано.Видимость;
			
	КонецЕсли;
	
	// Ограничение списка действий.
	Если Элемент = Неопределено
			Или Элемент = Элементы.ПереключательОбособленно Тогда
				
				Если ДопустимыеВариантыОбеспечения <> Неопределено Тогда
					
					Элементы.ПереключательОбособленно.Доступность =
						ДопустимыеВариантыОбеспечения.Обособленные.Количество() > 0
						И ДопустимыеВариантыОбеспечения.Необособленные.Количество() > 0;
						
					СписокЭлементов = ?(Объект.Обособленно,
						ДопустимыеВариантыОбеспечения.Обособленные,
						ДопустимыеВариантыОбеспечения.Необособленные);
						
					Элементы.Действие.СписокВыбора.ЗагрузитьЗначения(СписокЭлементов);
					Элементы.Действие.Доступность = Элементы.Действие.СписокВыбора.Количество() > 1;
						
				КонецЕсли;
				
	КонецЕсли;
	
	Если Элемент = Неопределено
			Или Элемент = Элементы.ПереключательОбособленно
			Или Элемент = Элементы.Действие Тогда
			
		НужноУказыватьСерии = Ложь;
		Для Каждого Строка Из Объект.Товары Цикл
			Если Строка.СтатусУказанияСерий <> 0 Тогда
				НужноУказыватьСерии = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Элементы.КУказаниюСерий.Видимость            = НужноУказыватьСерии;
		Элементы.ТоварыСтатусУказанияСерий.Видимость = НужноУказыватьСерии;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Скрытие единицы измерения комплектующей набора, если заполнена упаковка.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СоставНабораНоменклатураЕдиницаИзмерения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СоставНабора.Упаковка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Скрытие упаковки комплектующей набора, если не заполнена упаковка.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СоставНабораУпаковка.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СоставНабора.Упаковка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Превышение макисмального процента скидки.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПроцентРучнойСкидкиНаценки.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПроцентРучнойСкидкиНаценки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("МаксимальныйПроцентСкидки");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МаксимальныйПроцентСкидки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВариантПредоставленияСкидки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "СКИДКА";
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.FireBrick);
	
	// Превышение макисмального процента наценки.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПроцентРучнойСкидкиНаценки.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПроцентРучнойСкидкиНаценки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("МаксимальныйПроцентНаценки");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МаксимальныйПроцентНаценки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВариантПредоставленияСкидки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "НАЦЕНКА";
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.FireBrick);
	
	// Серии - Доступно.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СерииДоступно.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РежимОтображенияСерий");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "ВСЕСЕРИИ";
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Любое'"));
	
	// Товары - Доступно.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыВНаличии.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПоГрафику.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ПроверятьДоступность");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
	// Товары - Подобрано.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПодобрано.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РежимОтображенияТоваров");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "СвободныеОстатки";
	
	СписокВариантовПроверкиДоступности = Новый СписокЗначений();
	СписокВариантовПроверкиДоступности.Добавить(Перечисления.ВариантыОбеспечения.СоСклада);
	СписокВариантовПроверкиДоступности.Добавить(Перечисления.ВариантыОбеспечения.Отгрузить);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВариантОбеспечения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокВариантовПроверкиДоступности;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ПроверятьДоступность");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВНаличии");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Подобрано");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПроблема);
	
	// Серии - Доступно.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СерииДоступно.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РежимОтображенияСерий");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "Все";
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Любое'"));
	
	// Недоступность указания количества в строке, если не ЭтоСкладВыбраннойГруппы.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКартинкаПереместитьВправо.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЭтоСкладВыбраннойГруппы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Товары.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЭтоСкладВыбраннойГруппы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);
	
	// Текст "не заполнен склад".
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСклад.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Склад");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.Склады.ПустаяСсылка();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не указан>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);
	
КонецПроцедуры

#КонецОбласти

#Область ПриВыполненииКоманд

&НаСервере
Процедура КУказаниюСерийНаСервере()
	
	Если Элементы.Товары.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КлючевыеПараметры = ОбеспечениеВДокументахКлиентСервер.КлючевыеПараметрыФормыЗапросаКоличестваИСерий();
	ЗаполнитьЗначенияСвойств(КлючевыеПараметры, Параметры);
	
	УправлениеЭлементамиФормыПриСозданииИИзмененииРеквизитов(Элементы.КУказаниюСерий);
	
	ФорматнаяСтрока = "ЧДЦ=3; ЧН=0,000";
	Текст = Формат(Объект.Товары.НайтиПоИдентификатору(
		Элементы.Товары.ТекущаяСтрока).Подобрано * ЕдиницаИзмеренияКоэффициент, ФорматнаяСтрока);
	Элементы.КоличествоРаспределитьСерий.Заголовок =
		СтрШаблон(
			НСтр("ru = '%1 %2.'"),
			Текст,
			ЕдиницаИзмеренияСерий);
	
	Обработки.ЗапросКоличестваИСерий.ЗаполнитьСерииДляСтрокиТовары(
		ЭтотОбъект,
		КлючевыеПараметры,
		Элементы.Товары.ТекущаяСтрока,
		Параметры.ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Функция РаспределитьОстатокНаСервере(ТекстСообщения)
	
	СтрокаТовары = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Если СтрокаТовары.Обособленно И Не ЗначениеЗаполнено(СтрокаТовары.Назначение) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ВведенноеКоличествоСерий = 0;
	
	ОтборСтрок = Новый Структура();
	ОтборСтрок.Вставить("Номенклатура", СтрокаТовары.Номенклатура);
	ОтборСтрок.Вставить("Характеристика", СтрокаТовары.Характеристика);
	ОтборСтрок.Вставить("Склад", СтрокаТовары.Склад);
	ОтборСтрок.Вставить("Назначение", СтрокаТовары.Назначение);
	НайденныеСтроки = Объект.Серии.НайтиСтроки(ОтборСтрок);
	
	Для Каждого СтрокаСерийТекущая Из НайденныеСтроки Цикл
		ВведенноеКоличествоСерий = ВведенноеКоличествоСерий + СтрокаСерийТекущая.Подобрано;
	КонецЦикла;
	
	КоличествоКРаспределению = Окр(СтрокаТовары.Подобрано * ЕдиницаИзмеренияКоэффициент, 3) - ВведенноеКоличествоСерий;
	
	Если КоличествоКРаспределению <= 0 Тогда
		ТекстСообщения = НСтр("ru = 'Все количество товара распределено по сериям.'");
		Возврат Ложь;
	КонецЕсли;
	
	
	Для Каждого ИдентификаторСтроки Из Элементы.Серии.ВыделенныеСтроки Цикл
		
		Если КоличествоКРаспределению <= 0 Тогда
			Прервать;
		КонецЕсли;
		
		СтрокаСерии = Объект.Серии.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если РежимОтображенияСерий = "СвободныеОстатки" Тогда
			КоличествоНаСтроку = Макс(Мин(КоличествоКРаспределению, СтрокаСерии.Доступно - СтрокаСерии.Подобрано), 0);
		Иначе
			КоличествоНаСтроку = Макс(КоличествоКРаспределению, 0);
		КонецЕсли;
		
		КоличествоКРаспределению = КоличествоКРаспределению - КоличествоНаСтроку;
		
		СтрокаСерии.Подобрано = СтрокаСерии.Подобрано + КоличествоНаСтроку;
		ВведенноеКоличествоСерий = ВведенноеКоличествоСерий + КоличествоНаСтроку;
		
	КонецЦикла;
	
	Если КоличествоКРаспределению > 0 Тогда
		
		ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияКоличества();
		ПараметрыПроверки.ИмяТЧ = "Объект";
		СтруктураОбъект = Новый Структура();
		СтруктураОбъект = Новый Структура();
		СтруктураОбъект.Вставить("Номенклатура", СтрокаТовары.Номенклатура);
		СтруктураОбъект.Вставить("Упаковка", ТекущаяУпаковка);
		СтруктураОбъект.Вставить("Количество", ВведенноеКоличествоСерий);
		СтруктураОбъект.Вставить("КоличествоУпаковок", СтрокаТовары.Подобрано);
		
		ТипВеличины = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТовары.Номенклатура, "ЕдиницаИзмерения.ТипИзмеряемойВеличины");
		ЭтоШтучнаяЕдиницаИзмерения = ТипВеличины = Перечисления.ТипыИзмеряемыхВеличин.КоличествоШтук;
		
		ОкруглениеКорректно = СтрокаТовары.Подобрано <= 0;
		Если Не ОкруглениеКорректно
				И ЗначениеЗаполнено(ТекущаяУпаковка)
				И Окр(ВведенноеКоличествоСерий, 0, РежимОкругления.Окр15как20)
					= Окр(СтрокаТовары.Подобрано * ЕдиницаИзмеренияКоэффициент, 0, РежимОкругления.Окр15как20)
				И ЭтоШтучнаяЕдиницаИзмерения Тогда
				
					Ошибки = НоменклатураСервер.НомераСтрокСНекорректнымОкруглениемКоличества(
						СтруктураОбъект,
						ПараметрыПроверки);
					ОкруглениеКорректно = Ошибки.Количество() = 0;
				
		КонецЕсли;
		
		Если Не ОкруглениеКорректно Тогда
			ТекстСообщения = НСтр(
				"ru = 'Распределено все доступное количество в выделенных строках, но его недостаточно для распределения всего количества товара.
				|Попробуйте выделить другие строки и повторить распределение.'");
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗаполнитьПоFEFOНаСервере()
	
	СтрокаТовары = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Если СтрокаТовары.Обособленно И Не ЗначениеЗаполнено(СтрокаТовары.Назначение) Тогда
		Возврат Истина;
	КонецЕсли;
	
	КоличествоКРаспределению = Окр(СтрокаТовары.Подобрано * ЕдиницаИзмеренияКоэффициент, 3);
	
	Если КоличествоКРаспределению <= 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОтборСтрок = Новый Структура();
	ОтборСтрок.Вставить("Номенклатура",   СтрокаТовары.Номенклатура);
	ОтборСтрок.Вставить("Характеристика", СтрокаТовары.Характеристика);
	ОтборСтрок.Вставить("Склад",          СтрокаТовары.Склад);
	ОтборСтрок.Вставить("Назначение",     СтрокаТовары.Назначение);
	НайденныеСтроки = Объект.Серии.НайтиСтроки(ОтборСтрок);
	
	Для Каждого СтрокаСерии Из НайденныеСтроки Цикл
		
		Если РежимОтображенияСерий = "СвободныеОстатки" Тогда
			КоличествоНаСтроку = Макс(Мин(КоличествоКРаспределению, СтрокаСерии.Доступно), 0);
		Иначе
			КоличествоНаСтроку = Макс(КоличествоКРаспределению, 0);
		КонецЕсли;
		
		КоличествоКРаспределению = КоличествоКРаспределению - КоличествоНаСтроку;
		СтрокаСерии.Подобрано = КоличествоНаСтроку;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура КВыборуДействийНаСервере(Отказ = Ложь)
	
	СтрокаТовары = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	КоличествоСерий = КоличествоСерийПоСтроке(СтрокаТовары, Объект.Серии);
	КоличествоИзменение = КоличествоСерий - Окр(СтрокаТовары.Подобрано * ЕдиницаИзмеренияКоэффициент, 3);
	
	Если РежимОтображенияТоваров = "СвободныеОстатки" И СтрокаТовары.ПроверятьДоступность
			И КоличествоСерий > Окр(СтрокаТовары.ВНаличии * ЕдиницаИзмеренияКоэффициент, 3) Тогда
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Указано количество больше, чем доступно на %1 %2.'"),
			КоличествоСерий - Окр(СтрокаТовары.ВНаличии * ЕдиницаИзмеренияКоэффициент, 3), ЕдиницаИзмеренияСерий);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,);
		Отказ = Истина;
		Возврат;
		
	ИначеЕсли СтрокаТовары.ЭтоСтрокаДокумента Тогда
		
		Если КоличествоИзменение > 0 Тогда
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Введено серий больше чем требуется. Требуется указать %1 %2'"),
				СтрокаТовары.Подобрано, ЕдиницаИзмеренияСерий);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	Иначе
		
		КлючевыеПараметры = ОбеспечениеВДокументахКлиентСервер.КлючевыеПараметрыФормыЗапросаКоличестваИСерий();
		ЗаполнитьЗначенияСвойств(КлючевыеПараметры, Параметры);
		Если Объект.ИндексСтрокиДокумента > -1 Тогда
			СтрокаДокумента = Объект.Товары[Объект.ИндексСтрокиДокумента];
			Если КоличествоИзменение > Окр(СтрокаДокумента.Подобрано * ЕдиницаИзмеренияКоэффициент, 3) Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Указано количество больше, чем требуется перераспределить на %1 %2.'"),
					КоличествоИзменение - Окр(СтрокаДокумента.Подобрано * ЕдиницаИзмеренияКоэффициент, 3), ЕдиницаИзмеренияСерий);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,);
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		ИначеЕсли Не КлючевыеПараметры.ПодборТоваров Тогда
			Превышение = Макс(0, КоличествоИзменение / ЕдиницаИзмеренияКоэффициент + Объект.Товары.Итог("Подобрано") - Объект.КоличествоУпаковок);
			Если Превышение > 0 Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Указано количество больше, чем требуется подобрать на %1 %2.'"),
					Окр(Превышение * ЕдиницаИзмеренияКоэффициент, 3), ЕдиницаИзмеренияСерий);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ,);
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрокаТовары.ЭтоСтрокаДокумента Тогда
		ПересчитатьСтатусУказанияСерий(Объект, СтрокаТовары, Параметры.ПараметрыУказанияСерий, ЭтоМернаяЕдиница, ДопустимоеОтклонение, ЕдиницаИзмеренияКоэффициент);
	Иначе
		ИзменитьПодобраноПриИзмененииСерий(СтрокаТовары, Окр(КоличествоИзменение / ЕдиницаИзмеренияКоэффициент, 3), ЕдиницаИзмеренияКоэффициент);
	КонецЕсли;
	
	УправлениеЭлементамиФормыПриСозданииИИзмененииРеквизитов(Элементы.КВыборуДействий);
	
КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Функция КоэффициентУпаковки(Упаковка, Номенклатура)
	Возврат Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(Упаковка, Номенклатура);
КонецФункции

&НаСервере
Процедура ДобавитьПодобранныеТовары(ПодобранныеТовары, СтрокиТовары, РеквизитыТовара, ТаблицаПроверкиОкругления)
	
	Для Каждого СтрокаТовары Из СтрокиТовары Цикл
		
		Если СтрокаТовары.Подобрано = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыТовара = ПараметрыТовара();
		ПараметрыТовара.ТипНоменклатуры = РеквизитыТовара.ТипНоменклатуры;
		ПараметрыТовара.ВариантОбеспечения = Объект.ВариантОбеспечения;
		ЗаполнитьЗначенияСвойств(ПараметрыТовара, СтрокаТовары);
		ПараметрыТовара.Упаковка            = РеквизитыТовара.Упаковка;
		ПараметрыТовара.Цена                = РеквизитыТовара.Цена;
		ПараметрыТовара.ВидЦены             = Объект.ВидЦены;
		ПараметрыТовара.ПроцентРучнойСкидки = ?(ВариантПредоставленияСкидки = "СКИДКА",
			Объект.ПроцентРучнойСкидкиНаценки,
			-Объект.ПроцентРучнойСкидкиНаценки);
		ПараметрыТовара.ХарактеристикиИспользуются = РеквизитыТовара.ХарактеристикиИспользуются;
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Номенклатура",   СтрокаТовары.Номенклатура);
		СтруктураОтбора.Вставить("Характеристика", СтрокаТовары.Характеристика);
		СтруктураОтбора.Вставить("Склад",          СтрокаТовары.Склад);
		СтруктураОтбора.Вставить("Назначение",     СтрокаТовары.Назначение);
		СтрокиСерий = Объект.Серии.НайтиСтроки(СтруктураОтбора);
		
		КоличествоСерий = 0;
		Для Каждого СтрокаСерии Из СтрокиСерий Цикл
			
			Если СтрокаСерии.Подобрано = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаССерией = ПараметрыТовара();
			ЗаполнитьЗначенияСвойств(СтрокаССерией, ПараметрыТовара);
			СтрокаССерией.КоличествоУпаковок = СтрокаСерии.Подобрано / РеквизитыТовара.КоэффициентУпаковки;
			СтрокаССерией.Количество         = СтрокаСерии.Подобрано;
			СтрокаССерией.Серия              = СтрокаСерии.Серия;
			
			ПодобранныеТовары.Добавить(СтрокаССерией);
			КоличествоСерий = КоличествоСерий + СтрокаСерии.Подобрано;
			
		КонецЦикла;
		
		Подобрано = СтрокаТовары.Подобрано - КоличествоСерий / РеквизитыТовара.КоэффициентУпаковки;
		
		Если Подобрано > 0 И КоличествоСерий > 0 И РеквизитыТовара.ЭтоШтучнаяЕдиницаИзмерения И ЗначениеЗаполнено(РеквизитыТовара.Упаковка)
				И Окр(Подобрано * РеквизитыТовара.КоэффициентУпаковки, 0, РежимОкругления.Окр15как20) = 0 Тогда
				
					НоваяСтрокаПроверки = ТаблицаПроверкиОкругления.Добавить();
					НоваяСтрокаПроверки.НомерСтроки = ТаблицаПроверкиОкругления.Количество();
					НоваяСтрокаПроверки.ИндексДляВставки = ПодобранныеТовары.Количество();
					НоваяСтрокаПроверки.ПараметрыТовара = ПараметрыТовара;
					НоваяСтрокаПроверки.Номенклатура = СтрокаТовары.Номенклатура;
					НоваяСтрокаПроверки.Упаковка = РеквизитыТовара.Упаковка;
					НоваяСтрокаПроверки.Количество = 0;
					НоваяСтрокаПроверки.КоличествоУпаковок = Подобрано;
					
		ИначеЕсли Подобрано > 0 Тогда
			
			ПараметрыТовара.КоличествоУпаковок = Подобрано;
			ПараметрыТовара.Количество = Подобрано / РеквизитыТовара.КоэффициентУпаковки;
			ПодобранныеТовары.Добавить(ПараметрыТовара);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыТовара()
	
	ПараметрыТовара = Новый Структура();
	Если Не Объект.ВариантКомплектацииНоменклатуры.Пустая() Тогда
		ПараметрыТовара.Вставить("НоменклатураНабора",   Объект.Номенклатура);
		ПараметрыТовара.Вставить("ХарактеристикаНабора", Объект.Характеристика);
	КонецЕсли;
	
	ПараметрыТовара.Вставить("Номенклатура",                Справочники.Номенклатура.ПустаяСсылка());
	ПараметрыТовара.Вставить("Характеристика",              Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	ПараметрыТовара.Вставить("Упаковка",                    Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	ПараметрыТовара.Вставить("Цена",                        0);
	ПараметрыТовара.Вставить("ВидЦены",                     Справочники.ВидыЦен.ПустаяСсылка());
	ПараметрыТовара.Вставить("Склад",                       Справочники.Склады.ПустаяСсылка());
	ПараметрыТовара.Вставить("ДатаОтгрузки",                Дата('00010101'));
	ПараметрыТовара.Вставить("ВариантОбеспечения",          Перечисления.ВариантыОбеспечения.ПустаяСсылка());
	ПараметрыТовара.Вставить("ТипНоменклатуры",             Неопределено);
	ПараметрыТовара.Вставить("Обособленно",                 Ложь);
	ПараметрыТовара.Вставить("ПроцентРучнойСкидки",         0);
	ПараметрыТовара.Вставить("КоличествоУпаковок",          0);
	ПараметрыТовара.Вставить("Количество",                  0);
	ПараметрыТовара.Вставить("СтатусУказанияСерий",         0);
	ПараметрыТовара.Вставить("Серия",                       Справочники.СерииНоменклатуры.ПустаяСсылка());
	ПараметрыТовара.Вставить("ХарактеристикиИспользуются",  Ложь);
	Если Объект.ИндексСтрокиДокумента > -1 Тогда
		ПараметрыТовара.Вставить("ЭтоНоваяСтрока", Истина);
		ПараметрыТовара.Вставить("ЭтоСтрокаДокумента", Ложь);
	КонецЕсли;
	
	Возврат ПараметрыТовара;
	
КонецФункции

&НаСервере
Функция ПодобранныеТовары()
	
	ТаблицаПроверкиОкругления = Новый ТаблицаЗначений();
	ТаблицаПроверкиОкругления.Колонки.Добавить("НомерСтроки",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 0,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаПроверкиОкругления.Колонки.Добавить("Номенклатура",
		Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаПроверкиОкругления.Колонки.Добавить("Упаковка",
		Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ТаблицаПроверкиОкругления.Колонки.Добавить("Количество",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаПроверкиОкругления.Колонки.Добавить("КоличествоУпаковок",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаПроверкиОкругления.Колонки.Добавить("ИндексДляВставки",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 0, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаПроверкиОкругления.Колонки.Добавить("ПараметрыТовара", Новый ОписаниеТипов("Структура"));
	
	ПодобранныеТовары = Новый Массив();
	
	Если Объект.ВариантКомплектацииНоменклатуры.Пустая() Тогда
		
		КоэффициентУпаковки = КоэффициентУпаковки(Объект.Упаковка, Объект.Номенклатура);
		РеквизитыТекущие = ЗаполнитьРеквизитыНоменклатуры(Объект.Номенклатура)[Объект.Номенклатура];
		
		РеквизитыТовара = Новый Структура();
		РеквизитыТовара.Вставить("Упаковка", Объект.Упаковка);
		РеквизитыТовара.Вставить("Цена", Объект.Цена);
		РеквизитыТовара.Вставить("КоэффициентУпаковки", КоэффициентУпаковки);
		РеквизитыТовара.Вставить("ТипНоменклатуры", РеквизитыТекущие.ТипНоменклатуры);
		РеквизитыТовара.Вставить("ХарактеристикиИспользуются", РеквизитыТекущие.ХарактеристикиИспользуются);
		РеквизитыТовара.Вставить("ЭтоШтучнаяЕдиницаИзмерения", РеквизитыТекущие.ЭтоШтучнаяЕдиницаИзмерения);
		
		ДобавитьПодобранныеТовары(ПодобранныеТовары, Объект.Товары, РеквизитыТовара, ТаблицаПроверкиОкругления);
		
		ОсталосьПодобрать = Макс(Объект.КоличествоУпаковок - Объект.Товары.Итог("Подобрано"), 0);
		Если ОсталосьПодобрать > 0 Тогда
			
			Если Объект.ИндексСтрокиДокумента > -1 Тогда
				
				СтрокаДокумента = Объект.Товары[Объект.ИндексСтрокиДокумента];
				
				ПараметрыТовара = ПараметрыТовара();
				ПараметрыТовара.ЭтоСтрокаДокумента = Истина;
				ПараметрыТовара.Обособленно = Объект.Обособленно;
				ПараметрыТовара.ВариантОбеспечения = Объект.ВариантОбеспеченияДоИзменения;
				ПараметрыТовара.Склад = СтрокаДокумента.Склад;
				ПараметрыТовара.КоличествоУпаковок = ОсталосьПодобрать;
				ПараметрыТовара.Количество = ОсталосьПодобрать * КоэффициентУпаковки;
				ПараметрыТовара.ХарактеристикиИспользуются = РеквизитыТекущие.ХарактеристикиИспользуются;
				ПодобранныеТовары.Добавить(ПараметрыТовара);
				
			Иначе
				
				ПараметрыТовара = ПараметрыТовара();
				ЗаполнитьЗначенияСвойств(ПараметрыТовара, Объект);
				Если Склады.Количество() = 1 тогда
					ПараметрыТовара.Склад = Склады[0].Значение;
				Иначе
					ПараметрыТовара.Склад = Справочники.Склады.ПустаяСсылка();
				КонецЕсли;
				ПараметрыТовара.ПроцентРучнойСкидки = ?(ВариантПредоставленияСкидки = "СКИДКА",
					Объект.ПроцентРучнойСкидкиНаценки,
					-Объект.ПроцентРучнойСкидкиНаценки);
				ПараметрыТовара.КоличествоУпаковок = ОсталосьПодобрать;
				ПараметрыТовара.Количество = ОсталосьПодобрать * КоэффициентУпаковки;
				ПараметрыТовара.ХарактеристикиИспользуются = РеквизитыТекущие.ХарактеристикиИспользуются;
				ПодобранныеТовары.Добавить(ПараметрыТовара);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ВсеКомплектующиеИУпаковки = Объект.СоставНабора.Выгрузить(, "Номенклатура,Упаковка");
		ИспользуютсяУпаковки = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
		Если ИспользуютсяУпаковки Тогда
			КоэффициентыУпаковок = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентыУпаковок(ВсеКомплектующиеИУпаковки);
		КонецЕсли;
		ВсеКомплектующие = ВсеКомплектующиеИУпаковки.ВыгрузитьКолонку("Номенклатура");

		РеквизитыНоменклатуры = ЗаполнитьРеквизитыНоменклатуры(ВсеКомплектующие);
		
		Для Каждого ПозицияНабора Из Объект.СоставНабора Цикл
			
			РеквизитыТекущие = РеквизитыНоменклатуры.Получить(ПозицияНабора.Номенклатура);
			
			КоэффициентУпаковки = Неопределено;
			Если ИспользуютсяУпаковки Тогда
				КоэффициентУпаковки = КоэффициентыУпаковок[ПозицияНабора.Номенклатура][ПозицияНабора.Упаковка];
			КонецЕсли;
			Если Не ЗначениеЗаполнено(КоэффициентУпаковки) Тогда
				КоэффициентУпаковки = 1;
			КонецЕсли;
			
			Отбор = Новый Структура;
			Отбор.Вставить("Номенклатура",   ПозицияНабора.Номенклатура);
			Отбор.Вставить("Характеристика", ПозицияНабора.Характеристика);
			НайденныеСтроки = Объект.Товары.НайтиСтроки(Отбор);
			
			РеквизитыТовара = Новый Структура();
			РеквизитыТовара.Вставить("Упаковка", ПозицияНабора.Упаковка);
			РеквизитыТовара.Вставить("Цена", ПозицияНабора.Цена);
			РеквизитыТовара.Вставить("КоэффициентУпаковки", КоэффициентУпаковки);
			РеквизитыТовара.Вставить("ТипНоменклатуры", РеквизитыТекущие.ТипНоменклатуры);
			РеквизитыТовара.Вставить("ХарактеристикиИспользуются", РеквизитыТекущие.ХарактеристикиИспользуются);
			РеквизитыТовара.Вставить("ЭтоШтучнаяЕдиницаИзмерения", РеквизитыТекущие.ЭтоШтучнаяЕдиницаИзмерения);
			
			ДобавитьПодобранныеТовары(ПодобранныеТовары, НайденныеСтроки, РеквизитыТовара, ТаблицаПроверкиОкругления);
			
			Подобрано = ПозицияНабора.КоличествоПодобрать - ПозицияНабора.КоличествоПодобрано;
			Если Подобрано > 0 Тогда
				
				ПараметрыТовара = ПараметрыТовара();
				ЗаполнитьЗначенияСвойств(ПараметрыТовара, ПозицияНабора);
				ПараметрыТовара.ТипНоменклатуры = РеквизитыТекущие.ТипНоменклатуры;
				Если Склады.Количество() = 1 тогда
					ПараметрыТовара.Склад = Склады[0].Значение;
				Иначе
					ПараметрыТовара.Склад = Справочники.Склады.ПустаяСсылка();
				КонецЕсли;
				ПараметрыТовара.Упаковка            = ПозицияНабора.Упаковка;
				ПараметрыТовара.Цена                = ПозицияНабора.Цена;
				ПараметрыТовара.ВидЦены             = Объект.ВидЦены;
				ПараметрыТовара.ПроцентРучнойСкидки = ?(ВариантПредоставленияСкидки = "СКИДКА",
					Объект.ПроцентРучнойСкидкиНаценки,
					-Объект.ПроцентРучнойСкидкиНаценки);
				ПараметрыТовара.КоличествоУпаковок = Подобрано;
				ПараметрыТовара.Количество = Подобрано * КоэффициентУпаковки;
				ПараметрыТовара.ВариантОбеспечения = Объект.ВариантОбеспечения;
				ПодобранныеТовары.Добавить(ПараметрыТовара);
				ПараметрыТовара.ХарактеристикиИспользуются = РеквизитыТекущие.ХарактеристикиИспользуются;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияКоличества();
	ПараметрыПроверки.ПроверяемаяТаблица = ТаблицаПроверкиОкругления;
	НомераСтрок = НоменклатураСервер.НомераСтрокСНекорректнымОкруглениемКоличества(Неопределено, ПараметрыПроверки);
	НомераСтрок.Сортировать("НомерСтроки");
	
	Для Счетчик = 1 По НомераСтрок.Количество() Цикл
		
		СтрокаОкругления = НомераСтрок[НомераСтрок.Количество() - Счетчик];
		СтрокаТаблицыПроверки = ТаблицаПроверкиОкругления[СтрокаОкругления.НомерСтроки - 1];
		ПараметрыТовара = СтрокаТаблицыПроверки.ПараметрыТовара;
		ПараметрыТовара.КоличествоУпаковок = СтрокаТаблицыПроверки.КоличествоУпаковок;
		ПараметрыТовара.Количество = ПараметрыТовара.КоличествоУпаковок / КоэффициентУпаковки;
		ПодобранныеТовары.Вставить(СтрокаТаблицыПроверки.ИндексДляВставки, ПараметрыТовара);
		
	КонецЦикла;
	
	Если Объект.ИндексСтрокиДокумента > -1 Тогда
		
		// ЭтоНоваяСтрока = Ложь для первой добавленной строки, со складом как в выбранной строке документа.
		ИскатьПервуюСтрокуДокумента = Истина;
		Для Индекс = 0 По ПодобранныеТовары.Количество() - 1 Цикл
			Если Не ИскатьПервуюСтрокуДокумента Тогда
				Прервать;
			КонецЕсли;
			ПараметрыТовара = ПодобранныеТовары[Индекс];
			Если ИскатьПервуюСтрокуДокумента И ПараметрыТовара.ЭтоСтрокаДокумента Тогда
				ИскатьПервуюСтрокуДокумента = Ложь;
				ПараметрыТовара.ЭтоНоваяСтрока = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		Если ИскатьПервуюСтрокуДокумента И ПодобранныеТовары.Количество() > 0 Тогда
			ПодобранныеТовары[0].ЭтоНоваяСтрока = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПодобранныеТовары;
	
КонецФункции

&НаСервере
Функция ЗаголовокПодборСклада()
	
	Если ТолькоПросмотр Тогда
		
		Текст = НСтр("ru = 'Информация о доступности (%1)'");
			
	ИначеЕсли Объект.Обособленно Тогда
		
		Если Объект.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить Тогда
			
			Текст = НСтр("ru = 'Подбор склада для отгрузки из обособленного остатка (%1)'");
			
		ИначеЕсли Объект.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада Тогда
			
			Текст = НСтр("ru = 'Подбор склада для резервирования из обособленного остатка (%1)'");
			
		ИначеЕсли Объект.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.РезервироватьПоМереПоступления Тогда
			
			Текст = НСтр("ru = 'Подбор склада для обособленного обеспечения (%1)'");
			
		ИначеЕсли Объект.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.КОбеспечению Тогда
			
			Текст = НСтр("ru = 'Подбор склада для обособленного обеспечения (%1)'");
			
		ИначеЕсли Объект.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется Тогда
			
			Текст = НСтр("ru = 'Подбор склада (%1)'");
			
		КонецЕсли;
		
	ИначеЕсли ПолучитьФункциональнуюОпцию("ИспользоватьОбособленноеОбеспечениеЗаказов") Тогда
	
		Если Объект.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить Тогда
			
			Текст = НСтр("ru = 'Подбор склада для отгрузки из необособленного остатка (%1)'");
			
		ИначеЕсли Объект.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада Тогда
			
			Текст = НСтр("ru = 'Подбор склада для резервирования из необособленного остатка (%1)'");
			
		ИначеЕсли Объект.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.РезервироватьПоМереПоступления Тогда
			
			Текст = НСтр("ru = 'Подбор склада для необособленного обеспечения (%1)'");
			
		ИначеЕсли Объект.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.КОбеспечению Тогда
			
			Текст = НСтр("ru = 'Подбор склада для необособленного обеспечения (%1)'");
			
		ИначеЕсли Объект.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется Тогда
			
			Текст = НСтр("ru = 'Подбор склада (%1)'");
			
		КонецЕсли;
		
	Иначе
		
		Если Объект.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить Тогда
			
			Текст = НСтр("ru = 'Подбор склада для отгрузки (%1)'");
			
		ИначеЕсли Объект.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада Тогда
			
			Текст = НСтр("ru = 'Подбор склада для резервирования (%1)'");
			
		ИначеЕсли Объект.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.РезервироватьПоМереПоступления Тогда
			
			Текст = НСтр("ru = 'Подбор склада для обеспечения (%1)'");
			
		ИначеЕсли Объект.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.КОбеспечению Тогда
			
			Текст = НСтр("ru = 'Подбор склада для обеспечения (%1)'");
			
		ИначеЕсли Объект.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется Тогда
			
			Текст = НСтр("ru = 'Подбор склада (%1)'");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Подстановка = Неопределено;
	Если ЗначениеЗаполнено(Объект.Характеристика) Тогда
		Подстановка = СтрШаблон(НСтр("ru = 'Номенклатура: %1, Характеристика:%2'"),
			Объект.Номенклатура, Объект.Характеристика);
	Иначе
		Подстановка = СтрШаблон(НСтр("ru = 'Номенклатура: %1'"), Объект.Номенклатура);
	КонецЕсли;
	
	Возврат СтрШаблон(Текст, Подстановка);
	
КонецФункции

&НаСервере
Функция ЗаполнитьРеквизитыНоменклатуры(ВсеКомплектующие)
	
	РеквизитыНоменклатуры = Новый Соответствие();
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СпрНоменклатура.Ссылка КАК Номенклатура,
		|	СпрНоменклатура.ИспользованиеХарактеристик В(
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры),
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)) КАК ХарактеристикиИспользуются,
		|	СпрНоменклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук) КАК ЭтоШтучнаяЕдиницаИзмерения,
		|	СпрНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|ГДЕ
		|	СпрНоменклатура.Ссылка В(&ВсеКомплектующие)");
	
	Запрос.УстановитьПараметр("ВсеКомплектующие", ВсеКомплектующие);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		РеквизитыТекущие = Новый Структура("ХарактеристикиИспользуются,ЭтоШтучнаяЕдиницаИзмерения,ТипНоменклатуры");
		ЗаполнитьЗначенияСвойств(РеквизитыТекущие, Выборка);
		РеквизитыНоменклатуры.Вставить(Выборка.Номенклатура, РеквизитыТекущие);
	КонецЦикла;
	
	Возврат РеквизитыНоменклатуры;

КонецФункции

#КонецОбласти
