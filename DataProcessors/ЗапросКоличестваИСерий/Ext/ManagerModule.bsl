#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

///////////////////////////////////////////////////////////////////////////////
// Процедуры и функции используемые в модуле объекта для заполнения обработки.

Функция Комплектующие(Объект, Знач Склады) Экспорт
	
	ПараметрСклад = Справочники.Склады.ПустаяСсылка();
	Если ТипЗнч(Склады) = Тип("Массив") Тогда
		Если Склады.Количество() = 1 Тогда
			ПараметрСклад = Склады[0];
		КонецЕсли;
	Иначе
		Склады = Новый Массив();
	КонецЕсли;
	
	ПараметрыКомплектующих = Новый Структура();
	
	ПараметрыКомплектующих.Вставить("НоменклатураНабора",              Объект.Номенклатура);
	ПараметрыКомплектующих.Вставить("ХарактеристикаНабора",            Объект.Характеристика);
	ПараметрыКомплектующих.Вставить("ВидЦены",                         Объект.ВидЦены);
	ПараметрыКомплектующих.Вставить("ВариантКомплектацииНоменклатуры", Объект.ВариантКомплектацииНоменклатуры);
	ПараметрыКомплектующих.Вставить("Валюта",                          Объект.Валюта);
	ПараметрыКомплектующих.Вставить("КоличествоУпаковок",              Объект.КоличествоУпаковок);
	ПараметрыКомплектующих.Вставить("Количество",                      Объект.КоличествоУпаковок);
	ПараметрыКомплектующих.Вставить("ДатаОтгрузки",                    '00010101');
	ПараметрыКомплектующих.Вставить("ПроцентРучнойСкидки",             Объект.ПроцентРучнойСкидкиНаценки);
	ПараметрыКомплектующих.Вставить("Склад",                           ПараметрСклад);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Дата",                           Объект.Дата);
	ДополнительныеПараметры.Вставить("Валюта",                         Объект.Валюта);
	ДополнительныеПараметры.Вставить("Цена",                           Объект.Цена);
	ДополнительныеПараметры.Вставить("ВидЦены",                        Объект.ВидЦены);
	ДополнительныеПараметры.Вставить("Соглашение",                     Объект.Соглашение);
	ДополнительныеПараметры.Вставить("Склады",                         Склады);
	ДополнительныеПараметры.Вставить("Назначение",
		?(Объект.Обособленно, Объект.Назначение, Справочники.Назначения.ПустаяСсылка()));
	
	Результат = НаборыВызовСервера.Комплектующие(ПараметрыКомплектующих, ДополнительныеПараметры);
	Возврат Результат;
	
КонецФункции

Процедура УстановитьЦенуПоВидуЦены(Объект, КлючевыеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Объект.ВариантКомплектацииНоменклатуры) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не КлючевыеПараметры.РедактироватьВидЦены Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки = Объект.ВидыЦен.НайтиСтроки(Новый Структура("ВидЦены", Объект.ВидЦены));
	Если НайденныеСтроки.Количество() > 0 Тогда
		Объект.Цена = НайденныеСтроки[0].Цена;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьВидыЦен(Объект, РедактироватьВидЦены) Экспорт
	
	Если Не РедактироватьВидЦены Тогда
		Возврат;
	КонецЕсли;
	
	ИспользуетсяЦенообразование25 = Объект.ИспользуетсяЦенообразование25;
	
	ЭтоНаборЦеныПоКомплектующим = Не Объект.ВариантКомплектацииНоменклатуры.Пустая() 
		И Объект.ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.РассчитываетсяИзЦенКомплектующих;

	
	Объект.ВидыЦен.Очистить();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ЦенаВключаетНДС",              Объект.ЦенаВключаетНДС);
	Запрос.УстановитьПараметр("БезОтбораПоВключениюНДСВЦену", Объект.БезОтбораПоВключениюНДСВЦену);
	Запрос.УстановитьПараметр("Дата",                         Объект.Дата);
	Запрос.УстановитьПараметр("Номенклатура",                 Объект.Номенклатура);
	Если ИспользуетсяЦенообразование25 Тогда
		ВладелецХарактеристик = Неопределено;
		Если Справочники.Номенклатура.ПроверитьИспользованиеХарактеристикИПолучитьВладельцаДляВыбора(Объект.Номенклатура, ВладелецХарактеристик) Тогда
			Запрос.УстановитьПараметр("Характеристика",               ?(Объект.Характеристика.Пустая(), 
													Справочники.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка(), 
													Объект.Характеристика.ХарактеристикаНоменклатурыДляЦенообразования));
		Иначе
			Запрос.УстановитьПараметр("Характеристика",       Справочники.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка()); 
		КонецЕсли;
		Запрос.УстановитьПараметр("СерияЦО",                  Справочники.СерииНоменклатурыДляЦенообразования.ПустаяСсылка());
		
		НастройкиКлючаЦенПоУпаковке = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Номенклатура, "ВидНоменклатуры.НастройкиКлючаЦенПоУпаковке");
		
		Если НастройкиКлючаЦенПоУпаковке = Перечисления.ВариантОтбораДляКлючаЦен.НеИспользовать Тогда
			Запрос.УстановитьПараметр("УпаковкаЦО",               Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
		Иначе
			Запрос.УстановитьПараметр("УпаковкаЦО",               Объект.Упаковка);
		КонецЕсли;
	Иначе
		Запрос.УстановитьПараметр("Характеристика",               Объект.Характеристика);
	КонецЕсли;
	Запрос.УстановитьПараметр("Валюта",                       Объект.Валюта);
	Запрос.УстановитьПараметр("Упаковка",                     Объект.Упаковка);
	Запрос.УстановитьПараметр("БазоваяВалюта", ЗначениеНастроекПовтИсп.БазоваяВалютаПоУмолчанию());
	
	ТекстыЗапроса = Новый Массив();
		
	Если ЭтоНаборЦеныПоКомплектующим Тогда

		ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВидыЦен.Ссылка КАК ВидЦены
			|ИЗ
			|	Справочник.ВидыЦен КАК ВидыЦен
			|ГДЕ
			|	НЕ ВидыЦен.ПометкаУдаления
			|	И ВидыЦен.ИспользоватьПриПродаже
			|	И ВидыЦен.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияВидовЦен.Действует)
			|	И (&БезОтбораПоВключениюНДСВЦену
			|			ИЛИ ВидыЦен.ЦенаВключаетНДС = &ЦенаВключаетНДС)";
	
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		
	Иначе 
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидыЦен.Ссылка КАК ВидЦены
		|ПОМЕСТИТЬ ВидыЦен
		|ИЗ
		|	Справочник.ВидыЦен КАК ВидыЦен
		|ГДЕ
		|	НЕ ВидыЦен.ПометкаУдаления
		|	И ВидыЦен.ИспользоватьПриПродаже
		|	И ВидыЦен.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияВидовЦен.Действует)
		|	И (&БезОтбораПоВключениюНДСВЦену
		|			ИЛИ ВидыЦен.ЦенаВключаетНДС = &ЦенаВключаетНДС)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КурсыСрезПоследних.Валюта КАК Валюта,
		|	КурсыСрезПоследних.КурсЧислитель,
		|	КурсыСрезПоследних.КурсЗнаменатель
		|ПОМЕСТИТЬ КурсыСрезПоследних
		|ИЗ
		|	РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, БазоваяВалюта = &БазоваяВалюта) КАК КурсыСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Валюта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КурсыСрезПоследнихВалютаЦены.Валюта КАК Валюта,
		|	КурсыСрезПоследнихВалютаЦены.КурсЧислитель,
		|	КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель
		|ПОМЕСТИТЬ КурсыСрезПоследнихВалютаЦены
		|ИЗ
		|	РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта И БазоваяВалюта = &БазоваяВалюта) КАК КурсыСрезПоследнихВалютаЦены
		|;";

		ТекстыЗапроса.Добавить(ТекстЗапроса);
		
		Если ИспользуетсяЦенообразование25 Тогда
			ТекстЗапроса = "
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЦеныНоменклатурыСрезПоследних.ВидЦены КАК ВидЦены,
			|	ЦеныНоменклатурыСрезПоследних.Валюта КАК Валюта,
			|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
			|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) КАК Коэффициент
			|ПОМЕСТИТЬ ЦеныНоменклатурыСрезПоследних
			|ИЗ
			|	РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(
			|			КОНЕЦПЕРИОДА(&Дата, ДЕНЬ),
			|			Номенклатура = &Номенклатура
			|				И ХарактеристикаЦО = &Характеристика
			|				И СерияЦО = &СерияЦО
			|				И УпаковкаЦО = &УпаковкаЦО
			|				И ВидЦены В
			|					(ВЫБРАТЬ
			|						ВидыЦен.ВидЦены
			|					ИЗ
			|						ВидыЦен КАК ВидыЦен)) КАК ЦеныНоменклатурыСрезПоследних
			|;";
		Иначе
			ТекстЗапроса = "
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЦеныНоменклатурыСрезПоследних.ВидЦены КАК ВидЦены,
			|	ЦеныНоменклатурыСрезПоследних.Валюта КАК Валюта,
			|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
			|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) КАК Коэффициент
			|ПОМЕСТИТЬ ЦеныНоменклатурыСрезПоследних
			|ИЗ
			|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
			|			КОНЕЦПЕРИОДА(&Дата, ДЕНЬ),
			|			Номенклатура = &Номенклатура
			|				И Характеристика = &Характеристика
			|				И ВидЦены В
			|					(ВЫБРАТЬ
			|						ВидыЦен.ВидЦены
			|					ИЗ
			|						ВидыЦен КАК ВидыЦен)) КАК ЦеныНоменклатурыСрезПоследних
			|;";
		КонецЕсли;

		ТекстыЗапроса.Добавить(ТекстЗапроса);

		ТекстЗапроса = "
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.ВидЦены КАК ВидЦены,
		|	ВЫРАЗИТЬ(ЦеныНоменклатурыСрезПоследних.Цена * КурсыСрезПоследних.КурсЧислитель / КурсыСрезПоследних.КурсЗнаменатель / КурсыСрезПоследнихВалютаЦены.КурсЧислитель * КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель * ЦеныНоменклатурыСрезПоследних.Коэффициент КАК ЧИСЛО(31,2)) КАК Цена
		|ИЗ
		|	ЦеныНоменклатурыСрезПоследних КАК ЦеныНоменклатурыСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыСрезПоследних КАК КурсыСрезПоследних
		|		ПО КурсыСрезПоследних.Валюта = ЦеныНоменклатурыСрезПоследних.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыСрезПоследнихВалютаЦены КАК КурсыСрезПоследнихВалютаЦены
		|		ПО ИСТИНА";

		ТекстыЗапроса.Добавить(ТекстЗапроса);
		
		ТекстЗапроса = СтрСоединить(ТекстыЗапроса);
	
		Подстановка = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения)",
			"ЦеныНоменклатурыСрезПоследних.Номенклатура");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаКоэффициентУпаковки1", Подстановка);
		
		Подстановка = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ЦеныНоменклатурыСрезПоследних.Упаковка",
			"ЦеныНоменклатурыСрезПоследних.Номенклатура");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаКоэффициентУпаковки2", Подстановка);
	
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;

	Таблица = Запрос.Выполнить().Выгрузить();

	Если ЭтоНаборЦеныПоКомплектующим 
		И Не Объект.ВидЦены.Пустая() Тогда
		
		Если Таблица.Найти(Объект.ВидЦены, "ВидЦены") = Неопределено Тогда
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.ВидЦены = Объект.ВидЦены;
		КонецЕсли;
		
	КонецЕсли;
	
	Объект.ВидыЦен.Загрузить(Таблица);
	
КонецПроцедуры

Процедура СоставНабораРассчитатьКоличествоПодобрать(Объект) Экспорт
	
	Для Каждого СтрокаТЧ Из Объект.СоставНабора Цикл
		СтрокаТЧ.КоличествоПодобрать = Объект.Количество * СтрокаТЧ.КоличествоУпаковок;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьЦенуПоСоставуНабора(Объект) Экспорт
	
	Если Объект.ВариантКомплектацииНоменклатуры.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ВариантРасчетаЦеныНабора <> Перечисления.ВариантыРасчетаЦенНаборов.РассчитываетсяИзЦенКомплектующих Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Цена = 0;
	
	Для Каждого Строка Из Объект.СоставНабора Цикл
		Объект.Цена = Объект.Цена + Строка.Цена * Строка.КоличествоУпаковок;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение(Объект) Экспорт
	
	ТекстОшибки = Неопределено;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Номенклатура, "ТипНоменклатуры") = Перечисления.ТипыНоменклатуры.Набор
			И Не ЗначениеЗаполнено(Объект.ВариантКомплектацииНоменклатуры) Тогда
		
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Для номенклатуры %1 не определен состав набора'"), Объект.Номенклатура);
		
	ИначеЕсли ЗначениеЗаполнено(Объект.Склад) И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Склад, "Ссылка", Истина) = Неопределено Тогда
		
		ТекстОшибки = НСтр("ru = 'Склад в строке недоступен. Выбор действий невозможен.'");
		
	КонецЕсли;
	
	Если ТекстОшибки <> Неопределено Тогда
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Процедуры и функции используемые в форме обработки.

Процедура ПересчиатьОстаткиВУпаковке(Товары, Упаковка, Номенклатура, Характеристика) Экспорт
	
	КоэффициентУпаковки = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(Упаковка, Номенклатура);
	НайденныеСтроки = Товары.НайтиСтроки(Новый Структура("Номенклатура,Характеристика", Номенклатура, Характеристика));
	Для Каждого Строка Из НайденныеСтроки Цикл
		
		ВНаличии  = Строка.ВНаличииВБазовойЕдинице / КоэффициентУпаковки;
		ПоГрафику = Строка.ПоГрафикуВБазовойЕдинице / КоэффициентУпаковки;
		ВРезерве  = Строка.ВРезервеВБазовойЕдинице / КоэффициентУпаковки;
		
		Если Строка.ВНаличии <> ВНаличии
			Или Строка.ПоГрафику <> ПоГрафику
			Или Строка.ВРезерве <> ВРезерве Тогда // если в строку внести изменения, то она будет передана на клиент.
			
			Строка.ВНаличии  = ВНаличии;
			Строка.ПоГрафику = ПоГрафику;
			Строка.ВРезерве  = ВРезерве;
			
			Строка.ВНаличииОбособленно  = ?(Строка.Обособленно, Строка.ВНаличии, 0);
			Строка.ПоГрафикуОбособленно = ?(Строка.Обособленно, Строка.ПоГрафику, 0);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТекущиеРеквизиты(Объект) Экспорт
	
	Результат = Новый Структура("Номенклатура,Характеристика,Упаковка,ИндексТовараДляОтбора");
	Если Не ЗначениеЗаполнено(Объект.ВариантКомплектацииНоменклатуры) Тогда
		
		Результат.Номенклатура   = Объект.Номенклатура;
		Результат.Характеристика = Объект.Характеристика;
		Результат.Упаковка       = Объект.Упаковка;
		Результат.ИндексТовараДляОтбора = 0;
		
	ИначеЕсли Объект.СоставНабора.Количество() > 0 Тогда
		
		Результат.Номенклатура   = Объект.СоставНабора[0].Номенклатура;
		Результат.Характеристика = Объект.СоставНабора[0].Характеристика;
		Результат.Упаковка       = Объект.СоставНабора[0].Упаковка;
		Результат.ИндексТовараДляОтбора = 0;
		
	Иначе
		
		Результат.Номенклатура   = Неопределено;
		Результат.Характеристика = Неопределено;
		Результат.Упаковка       = Неопределено;
		Результат.ИндексТовараДляОтбора = 0;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура СоставНабораПересчитать(Объект, Реквизит) Экспорт
	
	Если Реквизит = "КОЛИЧЕСТВО" Или Реквизит = "КОЛИЧЕСТВОУПАКОВОК" Тогда
		
		СоставНабораРассчитатьКоличество(Объект);
		СоставНабораРассчитатьКоличествоПодобрать(Объект);
		
	ИначеЕсли Реквизит = "КОЛИЧЕСТВОПОДОБРАТЬ" Тогда
		
		СоставНабораРассчитатьКоличествоПодобрать(Объект);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Форма - ФормаКлиентскогоПриложения -
//  КлючевыеПараметры - см. ОбеспечениеВДокументахКлиентСервер.ПараметрыФормыЗапросаКоличестваИСерий
//  ИндексСтроки - Число -
//  ПараметрыУказанияСерий - см. НоменклатураСервер.ПараметрыУказанияСерий
Процедура ЗаполнитьСерииДляСтрокиТовары(Форма, КлючевыеПараметры, ИндексСтроки, ПараметрыУказанияСерий) Экспорт
	
	ПодборСерий = КлючевыеПараметры.ПодборСерий;
	Объект = Форма.Объект; // ОбработкаОбъект.ЗапросКоличестваИСерий
	Строка = Объект.Товары[ИндексСтроки];
	
	Если Не ПодборСерий
			Или Строка.СтатусУказанияСерий = 0
			Или Строка.НомерПервойСтрокиСерий <> 0
			Или Строка.Обособленно
				И Не ЗначениеЗаполнено(Строка.Назначение) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("Номенклатура,Характеристика,Склад,Обособленно");
	ЗаполнитьЗначенияСвойств(СтруктураОтбора, Строка);
	
	ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Номенклатура, "ВидНоменклатуры");
	
	ВариантПолученияДанных = Обработки.ПодборСерийВДокументы.ВариантПолучениеДанныхИзРегистровПоПараметрамФормы(
		ПараметрыУказанияСерий,
		Неопределено,
		Строка.Склад,
		ВидНоменклатуры);
		
	Если ЭтоАдресВременногоХранилища(Форма.Параметры.АдресТаблицыПодобраноРанее) Тогда
		
		Если КлючевыеПараметры.ПодборТоваров Тогда
			ПодобраноРанее = ПолучитьИзВременногоХранилища(Форма.Параметры.АдресТаблицыПодобраноРанее).Скопировать(СтруктураОтбора);
		Иначе
			ПодобраноРанее = ПолучитьИзВременногоХранилища(Форма.Параметры.АдресТаблицыПодобраноРанее);
		КонецЕсли;
		
	Иначе
		
		ПодобраноРанее = Новый ТаблицаЗначений();
		ПодобраноРанее.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
		ПодобраноРанее.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
		ПодобраноРанее.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ПодобраноРанее.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ПодобраноРанее.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
		ПодобраноРанее.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
		ПодобраноРанее.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура",   Строка.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Строка.Характеристика);
	Запрос.УстановитьПараметр("Назначение",     Строка.Назначение);
	Запрос.УстановитьПараметр("Склад",          Строка.Склад);
	Запрос.УстановитьПараметр("Подразделение",  Строка.Подразделение);
	Запрос.УстановитьПараметр("Помещение",      Справочники.СкладскиеПомещения.ПустаяСсылка());
	Запрос.УстановитьПараметр("Регистратор",    Объект.Регистратор);
	Запрос.УстановитьПараметр("Распоряжение",   Неопределено);
	Запрос.УстановитьПараметр("ПодобраноРанее", ПодобраноРанее);
	Запрос.УстановитьПараметр("ВсеСерии",       Истина);
	
	ТекстыЗапроса = Новый Массив();
	ТекстЗапроса = Обработки.ПодборСерийВДокументы.ТекстЗапросаФормированияТаблицыДанныеРегистров(
		ВариантПолученияДанных,
		Строка.Склад);
		
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Таблица.Серия      КАК Серия,
		|	Таблица.Количество КАК Количество
		|ПОМЕСТИТЬ ТаблицаТоваров
		|ИЗ
		|	&ПодобраноРанее КАК Таблица
		|ГДЕ
		|	Таблица.Номенклатура = &Номенклатура
		|		И Таблица.Характеристика = &Характеристика
		|		И Таблица.Склад = &Склад
		|		И Таблица.Назначение = &Назначение
		|		И Таблица.Подразделение = &Подразделение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.Серия             КАК Серия,
		|	СУММА(Таблица.Количество) КАК Количество
		|ПОМЕСТИТЬ ПодобраноРанее
		|ИЗ
		|	ТаблицаТоваров КАК Таблица
		|СГРУППИРОВАТЬ ПО
		|	Таблица.Серия
		|ИНДЕКСИРОВАТЬ ПО
		|	Серия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеРегистров.Серия                                                    КАК Серия,
		|	ДанныеРегистров.СвободныйОстаток - ЕСТЬNULL(ПодобраноРанее.Количество,0) КАК Доступно,
		|	&ТекстЗапросаРеквизитыСерийВыборка
		|ИЗ
		|	ДанныеРегистров КАК ДанныеРегистров
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПодобраноРанее КАК ПодобраноРанее
		|		ПО ПодобраноРанее.Серия = ДанныеРегистров.Серия
		|УПОРЯДОЧИТЬ ПО
		|	ГоденДо,
		|	Номер";
	
	ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Номенклатура, "ВидНоменклатуры");
	НастройкиИспользованияСерий = Справочники.ВидыНоменклатуры.НастройкиИспользованияСерий(
		ВидНоменклатуры,
		ПараметрыУказанияСерий,
		Новый Структура("Склад", Строка.Склад));
	Подстановка = Обработки.ПодборСерийВДокументы.ТекстЗапросаРеквизитыСерий("ДанныеРегистров", НастройкиИспользованияСерий, Ложь);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаРеквизитыСерийВыборка", Подстановка);
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаОстатков.Количество() = 0 Тогда
		НомерПервойСтрокиСерий = -1;
	Иначе
		НомерПервойСтрокиСерий = Объект.Серии.Количество() + 1;
	КонецЕсли;
	
	Для Каждого СтрокаСерий Из ТаблицаОстатков Цикл
		
		НоваяСтрокаСерий = Объект.Серии.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаСерий, Строка, "Номенклатура,Характеристика,Склад,Назначение");
		ЗаполнитьЗначенияСвойств(НоваяСтрокаСерий, СтрокаСерий);
		НоваяСтрокаСерий.ПроверятьДоступность = НоваяСтрокаСерий.Доступно > 0;
		
	КонецЦикла;
	
	УправлениеСвойствамиУТ.ЗаполнитьКолонкиДополнительныхРеквизитов(
		Форма,
		"Объект.Серии",
		"Серия");
	
	НайденныеСтроки = Объект.Товары.НайтиСтроки(СтруктураОтбора);
	Для Каждого Строка Из НайденныеСтроки Цикл
		Строка.НомерПервойСтрокиСерий = НомерПервойСтрокиСерий;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыгрузитьВидыЦенВСписок(Объект, Список, СЦенами) Экспорт
	
	Если СЦенами Тогда
		Список.Очистить();
		Для Каждого Строка Из Объект.ВидыЦен Цикл
			Представление = СтрШаблон("%1 (%2)", Формат(Строка.Цена, "ЧДЦ=2; ЧН="), Строка.ВидЦены);
			Список.Добавить(Строка.ВидЦены, Представление);
		КонецЦикла;
	Иначе
		Список.ЗагрузитьЗначения(Объект.ВидыЦен.Выгрузить().ВыгрузитьКолонку("ВидЦены"));
	КонецЕсли;
	
КонецПроцедуры

Процедура УпаковкаПриИзменении(Объект, КлючевыеПараметры) Экспорт
	
	ЗаполнитьВидыЦен(Объект, КлючевыеПараметры.РедактироватьВидЦены);
	УстановитьЦенуПоВидуЦены(Объект, КлючевыеПараметры);
	
КонецПроцедуры

Процедура ВидЦеныПриИзменении(Объект, КлючевыеПараметры, Склады) Экспорт
	
	МассивКомплектующих = Комплектующие(Объект, Склады);
	Таблица = Объект.СоставНабора.Выгрузить(Новый Массив);
	Для Каждого СтрокаТЧ Из МассивКомплектующих Цикл
		НоваяКомплектующая = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяКомплектующая, СтрокаТЧ);
	КонецЦикла;

	СоставНабораОбновитьЦены(Объект, Таблица);
	
	Если Объект.ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.РассчитываетсяИзЦенКомплектующих Тогда
		УстановитьЦенуПоСоставуНабора(Объект);
	Иначе
		УстановитьЦенуПоВидуЦены(Объект, КлючевыеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЦенаПриИзменении(Объект, Склады) Экспорт
	
	МассивКомплектующих = Комплектующие(Объект, Склады);
	Таблица = Объект.СоставНабора.Выгрузить(Новый Массив);
	Для Каждого СтрокаТЧ Из МассивКомплектующих Цикл
		НоваяКомплектующая = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяКомплектующая, СтрокаТЧ);
	КонецЦикла;

	СоставНабораОбновитьЦены(Объект, Таблица);
	
	Если Объект.ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.РассчитываетсяИзЦенКомплектующих Тогда
		УстановитьЦенуПоСоставуНабора(Объект);
	КонецЕсли;
	
КонецПроцедуры

// Прочие.

Функция НазванияЭлементовСерий(ИмяРеквизита) Экспорт
	
	ИмяЭлемента = "";
	
	Если ИмяРеквизита = "Номер" Тогда
		ИмяЭлемента = "СерииНомер";
	ИначеЕсли ИмяРеквизита = "ДатаПроизводства" Тогда
		ИмяЭлемента = "СерииДатаПроизводства";
	ИначеЕсли ИмяРеквизита = "ГоденДо" Тогда
		ИмяЭлемента = "СерииГоденДо";
	ИначеЕсли ВРег(ИмяРеквизита) = ВРег("НомерКИЗГИСМ") Тогда
		ИмяЭлемента = "СерииНомерКИЗГИСМ";
	ИначеЕсли ИмяРеквизита = "ПроизводительЕГАИС" Тогда
		ИмяЭлемента = "СерииПроизводительЕГАИС";
	ИначеЕсли ИмяРеквизита = "Справка2ЕГАИС" Тогда
		ИмяЭлемента = "СерииСправка2ЕГАИС";
	ИначеЕсли ИмяРеквизита = "ПроизводительВЕТИС" Тогда
		ИмяЭлемента = "СерииПроизводительВЕТИС";
	ИначеЕсли ИмяРеквизита = "ЗаписьСкладскогоЖурналаВЕТИС" Тогда
		ИмяЭлемента = "СерииЗаписьСкладскогоЖурналаВЕТИС";
	ИначеЕсли ИмяРеквизита = "ИдентификаторПартииВЕТИС" Тогда
		ИмяЭлемента = "СерииИдентификаторПартииВЕТИС";
	ИначеЕсли ИмяРеквизита = "МаксимальнаяРозничнаяЦенаМОТП" Тогда
		ИмяЭлемента = "СерииМаксимальнаяРозничнаяЦенаМОТП";
	КонецЕсли;
	
	Возврат ИмяЭлемента;
	
КонецФункции

Процедура ЗаполнитьСтатусУказанияСерииВТаблице(ВариантОбеспечения, Товары, ПараметрыУказанияСерий, Склад) Экспорт
	
	Если Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры
			Или ПараметрыУказанияСерий.ЭтоЗаказ
				И ВариантОбеспечения <> ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить")
				И ВариантОбеспечения <> ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.СоСклада") Тогда
			
			Для Каждого Строка Из Товары Цикл
				Строка.СтатусУказанияСерий = 0;
			КонецЦикла;
			Возврат;
			
	КонецЕсли;
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТоваров.Колонки.Добавить("Характеристика",Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("Серия",Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("ВариантОбеспечения",Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыОбеспечения"));
	ТаблицаТоваров.Колонки.Добавить("Обособленно",Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить(ПараметрыУказанияСерий.ИмяПоляКоличество,Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаТоваров.Колонки.Добавить("Упаковка",Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,0,ДопустимыйЗнак.Неотрицательный)));
	Если ЗначениеЗаполнено(ПараметрыУказанияСерий.ИмяПоляСклад) Тогда
		ТаблицаТоваров.Колонки.Добавить(ПараметрыУказанияСерий.ИмяПоляСклад,Новый ОписаниеТипов("СправочникСсылка.Склады"));
	КонецЕсли;
	
	НоменклатураСервер.ДополнитьТаблицуКолонкамиПоПолямПараметровУказанияСерий(ПараметрыУказанияСерий, ТаблицаТоваров); // Здесь же СтатусУказанияСерий
	
	ТаблицаСерий = ТаблицаТоваров.Скопировать();
	
	Если ЗначениеЗаполнено(ПараметрыУказанияСерий.ИмяПоляСклад)
			И ТаблицаТоваров.Колонки.Найти(ПараметрыУказанияСерий.ИмяПоляСклад) = Неопределено Тогда
		ТаблицаТоваров.Колонки.Добавить(ПараметрыУказанияСерий.ИмяПоляСклад, Новый ОписаниеТипов("СправочникСсылка.Склады"));
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыУказанияСерий.ИмяПоляСкладОтправитель)
			И ТаблицаТоваров.Колонки.Найти(ПараметрыУказанияСерий.ИмяПоляСкладОтправитель) = Неопределено Тогда
		ТаблицаТоваров.Колонки.Добавить(ПараметрыУказанияСерий.ИмяПоляСкладОтправитель, Новый ОписаниеТипов("СправочникСсылка.Склады"));
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыУказанияСерий.ИмяПоляСкладПолучатель)
			И ТаблицаТоваров.Колонки.Найти(ПараметрыУказанияСерий.ИмяПоляСкладПолучатель) = Неопределено Тогда
		ТаблицаТоваров.Колонки.Добавить(ПараметрыУказанияСерий.ИмяПоляСкладПолучатель, Новый ОписаниеТипов("СправочникСсылка.Склады"));
	КонецЕсли;
	
	Для НомерСтроки = 1 По Товары.Количество() Цикл
		НоваяСтрока = ТаблицаТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Товары[НомерСтроки - 1]);
		НоваяСтрока.ВариантОбеспечения = ВариантОбеспечения;
		Если ЗначениеЗаполнено(ПараметрыУказанияСерий.ИмяПоляСклад) Тогда
			НоваяСтрока[ПараметрыУказанияСерий.ИмяПоляСклад] = Товары[НомерСтроки - 1].Склад;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПараметрыУказанияСерий.ИмяПоляСкладОтправитель) Тогда
			НоваяСтрока[ПараметрыУказанияСерий.ИмяПоляСкладОтправитель] = Товары[НомерСтроки - 1].Склад;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураСклады = Новый Структура;
	Если ЗначениеЗаполнено(ПараметрыУказанияСерий.ИмяПоляСклад) Тогда
		СтруктураСклады.Вставить(ПараметрыУказанияСерий.ИмяПоляСклад, Склад);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыУказанияСерий.ИмяПоляСкладОтправитель) Тогда
		СтруктураСклады.Вставить(ПараметрыУказанияСерий.ИмяПоляСкладОтправитель, Склад);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыУказанияСерий.ИмяПоляСкладПолучатель) Тогда
		СтруктураСклады.Вставить(ПараметрыУказанияСерий.ИмяПоляСкладПолучатель,Справочники.Склады.ПустаяСсылка());
	КонецЕсли;
	
	ОбъектСтруктура = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаТоваров[0]);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ОбъектСтруктура, СтруктураСклады, Истина);
	
	Если ПараметрыУказанияСерий.ИмяТЧСерии <> ПараметрыУказанияСерий.ИмяТЧТовары
		И ЗначениеЗаполнено(ПараметрыУказанияСерий.ИмяТЧСерии) Тогда
		ОбъектСтруктура.Вставить(ПараметрыУказанияСерий.ИмяТЧСерии, ТаблицаСерий);
	КонецЕсли;
	
	Если Не ПараметрыУказанияСерий.ТоварВШапке Тогда
		ОбъектСтруктура.Вставить(ПараметрыУказанияСерий.ИмяТЧТовары, ТаблицаТоваров);
	КонецЕсли;
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ОбъектСтруктура, ПараметрыУказанияСерий);
	
	СкладыВТЧ = ПараметрыУказанияСерий.ПоляСвязи.Найти(ПараметрыУказанияСерий.ИмяПоляСклад) <> Неопределено
		Или ПараметрыУказанияСерий.ИменаПолейДополнительные.Найти(ПараметрыУказанияСерий.ИмяПоляСклад) <> Неопределено
		Или ПараметрыУказанияСерий.ИмяПоляСклад = Неопределено;
		
	Для Индекс = 0 По ТаблицаТоваров.Количество() - 1 Цикл
		Если ТаблицаТоваров[Индекс].СтатусУказанияСерий > 8
				И (СкладыВТЧ Или Товары[Индекс].Склад = Склад)
			Или ПараметрыУказанияСерий.ТоварВШапке И ОбъектСтруктура.СтатусУказанияСерий > 8
				И Товары[Индекс].Склад = Склад Тогда
			
				Если ПараметрыУказанияСерий.ТоварВШапке Тогда
					Товары[Индекс].СтатусУказанияСерий = ОбъектСтруктура.СтатусУказанияСерий;
				Иначе
					Товары[Индекс].СтатусУказанияСерий = ТаблицаТоваров[Индекс].СтатусУказанияСерий;
				КонецЕсли;
				
		Иначе
			Товары[Индекс].СтатусУказанияСерий = 0;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СоставНабораРассчитатьКоличество(Объект)
	
	РассчитанноеКоличество = 0;
	Для Каждого СтрокаТЧ Из Объект.СоставНабора Цикл
		РассчитанноеКоличество = Макс(СтрокаТЧ.КоличествоПодобрано / СтрокаТЧ.Количество, Объект.Количество);
	КонецЦикла;
	Если РассчитанноеКоличество > Объект.Количество Тогда
		Объект.Количество = РассчитанноеКоличество;
		Объект.КоличествоУпаковок = Объект.Количество / Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(Объект.Упаковка, Объект.Номенклатура);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоставНабораОбновитьЦены(Объект, Комплектующие)
	
	ПоляПоиска = "Номенклатура,Характеристика";
	Отбор = Новый Структура(ПоляПоиска);
	Комплектующие.Индексы.Добавить(ПоляПоиска);
	
	Для Каждого Строка Из Объект.СоставНабора Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, Строка);
		НайденныеСтроки = Комплектующие.НайтиСтроки(Отбор);
		Строка.Цена = ?(НайденныеСтроки.Количество() > 0, НайденныеСтроки[0].Цена, 0);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли