
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ЗаполнитьДанныеПоУчетнойЗаписи();

	ЗаполнитьИнформациюВПодсказке();

	УстановитьУсловноеОформление();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	УстановитьОтборТоваровПоМаркеру("", "", "ПоказатьВсе");
	ОбновитьПараметрыАссортиментаИсточника();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура МагазинПриемникПриИзменении(Элемент)

	ОбновитьПараметрыАссортиментаИсточника();

КонецПроцедуры

#КонецОбласти

 #Область ОбработчикиСобытийЭлементовТаблицыФормыАссортиментИсточника

&НаКлиенте
Процедура АссортиментИсточникаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Поле = Элементы.АссортиментИсточникаПометкаСнята Или Поле = Элементы.АссортиментИсточникаПометкаУстановлена Тогда
		СтандартнаяОбработка = Ложь;

		ТекущиеДанные.Пометка = Не ТекущиеДанные.Пометка;
		УстановитьПометку(ТекущиеДанные.Пометка, ТекущиеДанные.ИдентификаторПубликации);

		АссортиментИсточникаПриАктивизацииСтроки(Элемент);
	ИначеЕсли Поле = Элементы.АссортиментИсточникаПометкаНедоступна Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;

	Если Элементы.АссортиментИсточникаПометкаНедоступна.Видимость = Ложь
		И Элементы.АссортиментИсточникаПометкаСнята.Видимость = Ложь
		И Элементы.АссортиментИсточникаПометкаУстановлена.Видимость = Ложь Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура АссортиментИсточникаПриАктивизацииСтроки(Элемент)

	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПодсказкаМаркерТовара = -1;

		Если МагазинИсточник.Пустая() Тогда
			ПодсказкаСостояниеТовара = НСтр("ru = 'Не выбран магазин-источник ассортимента.'");
		Иначе
			ШаблонПодсказки = НСтр("ru = 'В магазине ""%1"" нет товаров.'");
			ПодсказкаСостояниеТовара = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПодсказки, МагазинПриемник);
		КонецЕсли;
		Возврат;
	КонецЕсли;

	СтатусЗагрузки = "";
	Если ТекущиеДанные.МаркерСтатуса = 7 Тогда
		ШаблонПодсказки = НСтр("ru = 'Товар существует в магазине ""%1"".'");
	ИначеЕсли Не ТекущиеДанные.Пометка Тогда
		ШаблонПодсказки = НСтр("ru = 'Товар доступен к добавлению в магазин ""%1"", но не отмечен.'");
	Иначе
		ШаблонПодсказки = НСтр("ru = 'Товар отмечен к добавлению в магазин ""%1"" и будет добавлен в статусе ""%2"".'");
		
		Если ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияПройдена") Тогда
			СтатусЗагрузки = ПредопределенноеЗначение("Перечисление.СтатусыВыгрузкиТоваровЯндексМаркет.УтвержденаРекомендация");
		Иначе
			СтатусЗагрузки = ТекущиеДанные.Статус;
		КонецЕсли;
	КонецЕсли;

	ПодсказкаМаркерТовара = ТекущиеДанные.МаркерСтатуса;
	ПодсказкаСостояниеТовара = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПодсказки, МагазинПриемник, СтатусЗагрузки);

КонецПроцедуры

#КонецОбласти

 #Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоказатьПодсказку(Команда)

	УстановитьВидимостьЭлементовПодсказки(Истина);

КонецПроцедуры

&НаКлиенте
Процедура СкрытьПодсказку(Команда)

	УстановитьВидимостьЭлементовПодсказки(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсе(Команда)

	УстановитьПометку(Истина);

КонецПроцедуры

&НаКлиенте
Процедура СброситьВсе(Команда)

	УстановитьПометку(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсе(Команда)

	УстановитьОтборТоваровПоМаркеру("", "", Команда.Имя);

КонецПроцедуры

&НаКлиенте
Процедура ОтобратьПоМаркеруНовые(Команда)

	УстановитьОтборТоваровПоМаркеру("МаркерСтатуса", 2, Команда.Имя);

КонецПроцедуры

&НаКлиенте
Процедура ОтобратьПоМаркеруВПроцессе(Команда)

	УстановитьОтборТоваровПоМаркеру("МаркерСтатуса", 1, Команда.Имя);

КонецПроцедуры

&НаКлиенте
Процедура ОтобратьПоМаркеруОшибка(Команда)

	УстановитьОтборТоваровПоМаркеру("МаркерСтатуса", 0, Команда.Имя);

КонецПроцедуры

&НаКлиенте
Процедура ОтобратьПоМаркеруГотовы(Команда)

	УстановитьОтборТоваровПоМаркеру("МаркерСтатуса", 3, Команда.Имя);

КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)

	ОчиститьСообщения();

	ОбновитьПараметрыАссортиментаИсточника();
	АссортиментИсточникаПриАктивизацииСтроки(Элементы.АссортиментИсточника);

КонецПроцедуры

&НаКлиенте
Процедура Добавить(Команда)

	ОчиститьСообщения();

	Если МагазинИсточник.Пустая() Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбран магазин-источник ассортимента.'"));
		Возврат;
	КонецЕсли;

	Если Не ЭтоУстановкаПометокДляВсехПозиций И ИдентификаторыПубликацииВыбранные.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не найдены отмеченные позиции для добавления ассортимента из магазина-источника.'"));
		Возврат;
	КонецЕсли;

	ПоказатьОповещениеПользователя(НСтр("ru = 'Добавление ассортимента'"),,
		НСтр("ru = 'Запущено фоновое добавление выбранного ассортимента из магазина-источника.'"), БиблиотекаКартинок.ЛоготипЯндексМаркет);

	ДлительнаяОперация    = ВызовЗаданияДобавленияАссортиментаНаСервере();
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбновитьДанныеФормыНаКлиенте", ЭтотОбъект);

	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, ДлительнаяОперация);
	Иначе
		ПараметрыОжидания                                  = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания             = Ложь;
		ПараметрыОжидания.ТекстСообщения                   = НСтр("ru = 'Добавление ассортимента'");
		ПараметрыОжидания.ОповещениеПользователя.Показать  = Истина;
		ПараметрыОжидания.ОповещениеПользователя.Текст     = НСтр("ru = 'Яндекс Маркет'");
		ПараметрыОжидания.ОповещениеПользователя.Пояснение = НСтр("ru = 'Завершено добавление выбранного ассортимента из магазина-источника.'");
		ПараметрыОжидания.ОповещениеПользователя.Картинка  = БиблиотекаКартинок.ЛоготипЯндексМаркет;

		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АссортиментИсточникаПометкаСнята.Имя);

	ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("АссортиментИсточника.Пометка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("АссортиментИсточника.МаркерСтатуса");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 7;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("АссортиментИсточника.ИдентификаторПубликации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АссортиментИсточникаПометкаУстановлена.Имя);

	ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("АссортиментИсточника.Пометка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("АссортиментИсточника.МаркерСтатуса");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 7;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("АссортиментИсточника.ИдентификаторПубликации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АссортиментИсточникаПометкаНедоступна.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("АссортиментИсточника.МаркерСтатуса");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 7;

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("АссортиментИсточника.ИдентификаторПубликации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьЭлементовПодсказки(ПоказатьПодсказку)

	Элементы.ПодсказкаКопирование.Видимость = ПоказатьПодсказку;
	Элементы.ПоказатьПодсказкуКопирование.Видимость = Не ПоказатьПодсказку;
	Элементы.СкрытьПодсказкуКопирование.Видимость = ПоказатьПодсказку;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоУчетнойЗаписи()

	Параметры.Свойство("УчетнаяЗапись", МагазинПриемник);
	АккаунтИдентификатор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МагазинПриемник, "ИдентификаторАккаунта");
	
	ДанныеАккаунта       = ИнтеграцияСЯндексМаркетСервер.ДанныеАвторизацииПоИдентификаторуАккаунта(АккаунтИдентификатор);   
	АккаунтПредставление = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеАккаунта, "login", "");

	МассивПараметровВыбора = Новый Массив;
	НовыйПараметр = Новый ПараметрВыбора("Отбор.ПометкаУдаления", Ложь);
	МассивПараметровВыбора.Добавить(НовыйПараметр);
	НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидМаркетплейса", ПредопределенноеЗначение("Перечисление.ВидыМаркетплейсов.МаркетплейсЯндексМаркет"));
	МассивПараметровВыбора.Добавить(НовыйПараметр);
	НовыйПараметр = Новый ПараметрВыбора("Отбор.ИдентификаторАккаунта", АккаунтИдентификатор);
	МассивПараметровВыбора.Добавить(НовыйПараметр);

	НовыеПараметры = Новый ФиксированныйМассив(МассивПараметровВыбора);
	Элементы.МагазинИсточник.ПараметрыВыбора = НовыеПараметры;

	ЭтоУстановкаПометокДляВсехПозиций = Истина;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформациюВПодсказке()

	ШаблонЗаголовка = НСтр("ru = 'Добавление товара в %1'");
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка, МагазинПриемник);

	ШаблонПодсказкиМагазинаИсточника = НСтр("ru = 'Копирование предложений (размещение товара из одного магазина в другой) возможно только в рамках аккаунта %1.'");
	Элементы.МагазинИсточник.Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПодсказкиМагазинаИсточника, АккаунтПредставление);

	Элементы.ПодсказкаКопирование.Заголовок = НСтр("ru = 'Копирование товарных предложений из одного магазина в другой возможно только в рамках одного аккаунта Яндекс.
	|Копирование ассортимента осуществляется в несколько этапов:
	|		Шаг 1. Выберите магазин, товары которого необходимо добавить к ассортименту текущего магазина. Обновите список публикаций товаров магазина-источника.
	|		Шаг 2. Отметьте флагами те товары, которые необходимо добавить к ассортименту текущего магазина. Нажмите ""Добавить"". 
	|		Шаг 3. Выбранные позиции будут добавлены к публикациям текущего магазина в фоновом режиме. По готовности система выдаст сообщение о завершении процесса.
	|		Шаг 4. Товары магазина-источника в статусе ""Модерация пройдена"" будут добавлены в ассортимент текущего магазина в статусе ""Утверждена рекомендация"" и автоматически отправлены на модерацию для завершения процесса добавления. Товары магазина-приемника в статусах, отличных от ""Модерация пройдена"", будут добавлены в текущий магазин в статусах, соответствующих источнику.'");

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборТоваровПоМаркеру(Поле, Значение, ИмяКоманды)

	ОчиститьСообщения();

	ИдентификаторОтбора = "ОтборПоМаркеру";

	Если ПустаяСтрока(Поле) Тогда// Удалить отбор
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(АссортиментИсточника,, ИдентификаторОтбора);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			АссортиментИсточника,
			Поле,
			Значение,
			ВидСравненияКомпоновкиДанных.Равно,
			ИдентификаторОтбора,,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	КонецЕсли;

	ОбновитьКнопкуОтбораПоСтатусу(ИмяКоманды);

	АссортиментИсточникаПриАктивизацииСтроки(Элементы.АссортиментИсточника);

КонецПроцедуры

&НаСервере
Процедура ОбновитьКнопкуОтбораПоСтатусу(ИмяКоманды)

	Команда = Команды.Найти(ИмяКоманды);
	Если Команда = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Элементы.ОтборПоМаркерам.Заголовок = Команда.Заголовок;
	Элементы.ОтборПоМаркерам.Картинка = Команда.Картинка;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПараметрыАссортиментаИсточника()

	АссортиментИсточника.Параметры.УстановитьЗначениеПараметра("УчетнаяЗаписьИсточника", МагазинИсточник);
	АссортиментИсточника.Параметры.УстановитьЗначениеПараметра("УчетнаяЗаписьПриемника", МагазинПриемник);
	АссортиментИсточника.Параметры.УстановитьЗначениеПараметра("ЭтоУстановкаПометокДляВсехПозиций", ЭтоУстановкаПометокДляВсехПозиций);
	АссортиментИсточника.Параметры.УстановитьЗначениеПараметра("ИдентификаторыПубликацииВыбранные", ИдентификаторыПубликацииВыбранные.ВыгрузитьЗначения());
	АссортиментИсточника.Параметры.УстановитьЗначениеПараметра("ИдентификаторыПубликацииИсключенные", ИдентификаторыПубликацииИсключенные.ВыгрузитьЗначения());

КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометку(Пометка, ИдентификаторПубликации = "")

	ОчиститьСообщения();

	Если ПустаяСтрока(ИдентификаторПубликации) Тогда
		ИдентификаторыПубликацииВыбранные.Очистить();
		ИдентификаторыПубликацииИсключенные.Очистить();
		ЭтоУстановкаПометокДляВсехПозиций = Пометка;

		ОбновитьПараметрыАссортиментаИсточника();
		Элементы.АссортиментИсточника.Обновить();
	Иначе
		ПараметрыИдентификаторыПубликацииВыбранные = АссортиментИсточника.Параметры.Элементы.Найти("ИдентификаторыПубликацииВыбранные").Значение;
		ПараметрыИдентификаторыПубликацииИсключенные = АссортиментИсточника.Параметры.Элементы.Найти("ИдентификаторыПубликацииИсключенные").Значение;
		ПараметрыИндексПозицииДобавления = ПараметрыИдентификаторыПубликацииВыбранные.Найти(ИдентификаторПубликации);
		ПараметрыИндексПозицииУдаления   = ПараметрыИдентификаторыПубликацииИсключенные.Найти(ИдентификаторПубликации);

		ИндексПозицииДобавления          = ИдентификаторыПубликацииВыбранные.НайтиПоЗначению(ИдентификаторПубликации);
		ИндексПозицииУдаления            = ИдентификаторыПубликацииИсключенные.НайтиПоЗначению(ИдентификаторПубликации);

		Если Пометка Тогда
			Если ИндексПозицииУдаления <> Неопределено Тогда
				ПараметрыИдентификаторыПубликацииИсключенные.Удалить(ПараметрыИндексПозицииУдаления);
				ИдентификаторыПубликацииИсключенные.Удалить(ИндексПозицииУдаления);
			Иначе
				ПараметрыИдентификаторыПубликацииВыбранные.Добавить(ИдентификаторПубликации);
				ИдентификаторыПубликацииВыбранные.Добавить(ИдентификаторПубликации);
			КонецЕсли;
		Иначе
			Если ИндексПозицииУдаления <> Неопределено Тогда
				ПараметрыИдентификаторыПубликацииВыбранные.Удалить(ПараметрыИндексПозицииУдаления);
				ИдентификаторыПубликацииВыбранные.Удалить(ИндексПозицииУдаления);
			Иначе
				ПараметрыИдентификаторыПубликацииИсключенные.Добавить(ИдентификаторПубликации);
				ИдентификаторыПубликацииИсключенные.Добавить(ИдентификаторПубликации);
			КонецЕсли;
		КонецЕсли;

		Если ИдентификаторыПубликацииВыбранные.Количество() = 0 И ИдентификаторыПубликацииИсключенные.Количество() = 0 Тогда
			ЭтоУстановкаПометокДляВсехПозиций = Истина;
		КонецЕсли;
	КонецЕсли;

	АссортиментИсточникаПриАктивизацииСтроки(Элементы.АссортиментИсточника);

КонецПроцедуры

&НаСервере
Функция ВызовЗаданияДобавленияАссортиментаНаСервере()

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Яндекс. Добавить ассортимент.'");
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;

	СписокИсточника = Элементы.АссортиментИсточника;

	ПараметрыКомпоновщикаНастроек = ИнтеграцияСЯндексМаркетСервер.ПараметрыДобавленияАссортимента();
	ПараметрыКомпоновщикаНастроек.НастройкиКомпоновкиДанных = СписокИсточника.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	ПараметрыКомпоновщикаНастроек.СхемаКомпоновкиДанных = СписокИсточника.ПолучитьИсполняемуюСхемуКомпоновкиДанных();

	Если ЭтоУстановкаПометокДляВсехПозиций Тогда
		ПараметрыКомпоновщикаНастроек.Вставить("ИдентификаторыПубликацииИсключенные", ИдентификаторыПубликацииИсключенные);
	Иначе
		ПараметрыКомпоновщикаНастроек.Вставить("ИдентификаторыПубликацииВыбранные", ИдентификаторыПубликацииВыбранные);
	КонецЕсли;

	// Добавить все выбранные поля, т.к. для пользователя выводятся не все поля динамического списка.
	Для Каждого ПолеВыбора Из АссортиментИсточника.КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы Цикл
		Если ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных("ПараметрыДанных") Тогда
			Продолжить;
		КонецЕсли;

		Для Каждого СтрокаСтруктуры Из ПараметрыКомпоновщикаНастроек.НастройкиКомпоновкиДанных.Структура Цикл
			КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(СтрокаСтруктуры.Выбор, ПолеВыбора.Поле, ПолеВыбора.Заголовок);
		КонецЦикла;
	КонецЦикла;

	// Установить параметры для отмеченных или снятых с пометки позиций.
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(ПараметрыКомпоновщикаНастроек.НастройкиКомпоновкиДанных, "ИдентификаторыПубликацииВыбранные",
		ИдентификаторыПубликацииВыбранные);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(ПараметрыКомпоновщикаНастроек.НастройкиКомпоновкиДанных, "ИдентификаторыПубликацииИсключенные",
		ИдентификаторыПубликацииИсключенные);

	ИмяМетода = "ИнтеграцияСЯндексМаркетСервер.ДобавитьАссортимент";

	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, ИмяМетода,
		МагазинИсточник, МагазинПриемник, ПараметрыКомпоновщикаНастроек);

КонецФункции

&НаКлиенте
Процедура ОбновитьДанныеФормыНаКлиенте(Результат, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.Статус = "Ошибка" Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки);
		ИначеЕсли Результат.Статус = "Выполнено" И Результат.Свойство("АдресРезультата") Тогда
			Ошибка = ИнтеграцияСЯндексМаркетВызовСервера.ПолучитьРезультатВыполненияФоновогоЗадания(Результат.АдресРезультата);

			Если Не ПустаяСтрока(Ошибка.КодОшибки) Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(Ошибка.ОписаниеОшибки);
			Иначе
				Обновить(Неопределено);

				РезультатДействия = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
				ИнтеграцияСМаркетплейсомOzonКлиент.ВывестиСостояние(РезультатДействия, ДополнительныеПараметры, Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
