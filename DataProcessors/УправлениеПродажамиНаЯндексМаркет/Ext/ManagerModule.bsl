
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область ВыгрузкаЗагрузкаДанных

// Задает использование процедур и функций.
//
// Возвращаемое значение:
//   См. ИнтеграцияСМаркетплейсамиСервер.ИспользуемыеМетодыМенеджераОбъектаМетаданных.
//
Функция ОпределитьИспользуемыеМетоды() Экспорт
	
	Методы = ИнтеграцияСМаркетплейсамиСервер.ИспользуемыеМетодыМенеджераОбъектаМетаданных();
	
	// Основные методы
	Методы.ВыполнитьПроверкуИнформацииПоКолонкам                    = Истина;
	Методы.УстановитьПараметрыЗагрузкиИзФайлаВТабличнуюЧасть        = Истина;
	Методы.ДополнитьУсловноеОформлениеТаблицыСопоставленияДанных    = Истина;
	Методы.НастроитьДинамическийСписокОтображенияРезультатаЗагрузки = Истина;
	Методы.ПолучитьДанныеИнтеграционнымиМетодами                    = Истина;
	Методы.СопоставитьЗагружаемыеДанные                             = Истина;
	Методы.ЗаписатьЗагружаемыеДанные                                = Истина;
	
	// Выгрузка в файл - см. СформироватьТабличныйДокументПоИмениМакетаСШаблоном
	Методы.НаименованиеСохраняемогоФайла                            = Истина;
	Методы.ЗаполнитьШапкуМакета                                     = Ложь;
	Методы.ЗаполнитьЗаголовокТаблицыМакета                          = Ложь;
	Методы.ПолучитьДанныеСтрокТаблицыМакета                         = Ложь;
	Методы.ВывестиТаблицуМакета                                     = Ложь;
	Методы.ЗаполнитьПодвалМакета                                    = Ложь;
	
	Возврат Методы;
	
КонецФункции

// Выполняет проверку таблицы с информацией по колонка на соответствие последней версии содержимого таблицы.
//
// Параметры:
//   ИнформацияПоКолонкам - см. ИнтеграцияСМаркетплейсамиСервер.ИнициализироватьТаблицуИнформацииПоКолонкам.
//   ИмяТабличнойЧасти    - Строка - имя табличной части объекта метаданных, например, "ДанныеОРеализованныхТоварах".
//
// Возвращаемое значение:
//   Булево - результат проверки.
//
Функция ВыполнитьПроверкуИнформацииПоКолонкам(ИнформацияПоКолонкам, ИмяТабличнойЧасти) Экспорт
	
	ПроверкаПройдена = Истина;
	
	// Проверка наличия новой колонки
	ИскомаяКолонка = "";
	Если ИмяТабличнойЧасти = "ДанныеОРеализованныхТоварах" Тогда
		ИскомаяКолонка = "УпаковкаКоэффициент";
	КонецЕсли;
	
	Если ПроверкаПройдена И Не ПустаяСтрока(ИскомаяКолонка) Тогда
		ПроверкаПройдена = (ИнформацияПоКолонкам.Найти(ИскомаяКолонка, "ИмяКолонки") <> Неопределено);
	КонецЕсли;
	
	// Проверка наличия удаленной колонки
	
	// Иные проверки
	
	Возврат ПроверкаПройдена;
	
КонецФункции

// Устанавливает параметры загрузки.
//
// Параметры:
//   Параметры - см. ИнтеграцияСМаркетплейсамиСервер.ПараметрыЗагрузкиИзФайлаВТабличнуюЧасть.
//
Процедура УстановитьПараметрыЗагрузкиИзФайлаВТабличнуюЧасть(Параметры) Экспорт
	
	// При дополнении состава Основных колонок в табличной части или дополнительных колонок в текущей процедуре
	// необходимо добавлять проверку в ВыполнитьПроверкуИнформацииПоКолонкам(), в противном случае информация
	// по колонкам будет взята из сохраненных настроек, и может возникнуть ошибка при обращении к новым колонкам
	// в заложенных алгоритмах.
	
	ЗаполняемыеПриЗагрузкеКолонки = Параметры.ЗаполняемыеПриЗагрузкеКолонки;	// Соответствие
	ТипыДанныхКолонок             = Параметры.ТипыДанныхКолонок;				// Соответствие
	ОсновныеКолонки               = Параметры.ОсновныеКолонки;					// Массив
	ПустыеВИтогахКолонки          = Параметры.ПустыеВИтогахКолонки;				// Массив
	ОбработчикиСобытий            = Параметры.ПодключаемыеОбработчикиСобытий;	// Структура
	
	ТипБулево     = Новый ОписаниеТипов("Булево");
	ТипЧисло_2_0  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(2, 0, ДопустимыйЗнак.Неотрицательный));
	ТипЧисло_15_2 = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2));
	ТипЧисло_15_3 = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 3));
	ТипЧисло_20_3 = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(20, 3));
	ТипСтрока25   = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(25));
	
	Если Параметры.ИмяТабличнойЧасти = "ДанныеОРеализованныхТоварах" Тогда
		ОсновныеКолонки.Добавить("ТипОперации");
		ОсновныеКолонки.Добавить("ИдентификаторПубликации");
		ОсновныеКолонки.Добавить("ПредставлениеТовара");
		ОсновныеКолонки.Добавить("Номенклатура");
		ОсновныеКолонки.Добавить("Характеристика");
		ОсновныеКолонки.Добавить("Упаковка");
		ОсновныеКолонки.Добавить("Количество");
		ОсновныеКолонки.Добавить("Цена");
		ОсновныеКолонки.Добавить("Сумма");
		ОсновныеКолонки.Добавить("НомерЗаказа");
		ОсновныеКолонки.Добавить("ДатаОформленияЗаказа");
		
		// С учетом строки с нумерацией колонок, которой нет в шапке шаблона.
		Параметры.ВысотаЗаголовкаТаблицыЗагружаемогоМакета = 3;
		Параметры.ВысотаЗаголовкаТаблицыМакетаСШаблоном    = 3;
		
		ПустыеВИтогахКолонки.Добавить("ИдентификаторПубликации");
		ПустыеВИтогахКолонки.Добавить("ПредставлениеТовара");
		
		ЗаполняемыеПриЗагрузкеКолонки.Вставить("ТипОперации", НСтр("ru = 'Тип операции'"));
		ТипыДанныхКолонок.Вставить("ТипОперации", ТипЧисло_2_0);
		
		ЗаполняемыеПриЗагрузкеКолонки.Вставить("Количество", НСтр("ru = 'Количество'"));
		ТипыДанныхКолонок.Вставить("Количество", ТипЧисло_15_3);
		
		ЗаполняемыеПриЗагрузкеКолонки.Вставить("СтавкаНДС", НСтр("ru = 'Ставка НДС'"));
		ТипыДанныхКолонок.Вставить("СтавкаНДС", ТипСтрока25);
		
		ЗаполняемыеПриЗагрузкеКолонки.Вставить("Цена", НСтр("ru = 'Цена продажи'"));
		ТипыДанныхКолонок.Вставить("Цена", ТипЧисло_15_2);
		
		ЗаполняемыеПриЗагрузкеКолонки.Вставить("СуммаСкидки", НСтр("ru = 'Сумма скидки'"));
		ТипыДанныхКолонок.Вставить("СуммаСкидки", ТипЧисло_15_2);
		
		ЗаполняемыеПриЗагрузкеКолонки.Вставить("ТипНоменклатуры", НСтр("ru = 'Тип номенклатуры'"));
		ТипыДанныхКолонок.Вставить("ТипНоменклатуры", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНоменклатуры"));
		
		ЗаполняемыеПриЗагрузкеКолонки.Вставить("НоменклатураЕдиницаИзмерения", НСтр("ru = 'Ед.изм.'"));
		ТипыДанныхКолонок.Вставить("НоменклатураЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
		
		ЗаполняемыеПриЗагрузкеКолонки.Вставить("ПрослеживаемыйТовар", НСтр("ru = 'Прослеживаемый товар'"));
		ТипыДанныхКолонок.Вставить("ПрослеживаемыйТовар", ТипБулево);
		
		ЗаполняемыеПриЗагрузкеКолонки.Вставить("ХарактеристикиИспользуются", НСтр("ru = 'Характеристики используются'"));
		ТипыДанныхКолонок.Вставить("ХарактеристикиИспользуются", ТипБулево);
		
		ЗаполняемыеПриЗагрузкеКолонки.Вставить("УпаковкаКоэффициент", НСтр("ru = 'Коэф.упак.'"));
		ТипыДанныхКолонок.Вставить("УпаковкаКоэффициент", ТипЧисло_20_3);
		
		// Установка команды изменения поведения элементов формы.
		Параметры.КомандаИзменитьПоведениеЭлементовФормы =
			"Обработки.УправлениеПродажамиНаЯндексМаркет.Подключаемый_ИзменитьПоведениеЭлементовФормы";
		
		// Обработчики событий изменения полей в таблице сопоставления.
		ОбработчикиСобытий.Вставить("ТипОперацииПриИзменении",
			"Обработки.УправлениеПродажамиНаЯндексМаркет.Подключаемый_ПолеПриИзменении");
		ОбработчикиСобытий.Вставить("ИдентификаторПубликацииПриИзменении",
			"Обработки.УправлениеПродажамиНаЯндексМаркет.Подключаемый_ПолеПриИзменении");
		ОбработчикиСобытий.Вставить("НоменклатураПриИзменении",
			"Обработки.УправлениеПродажамиНаЯндексМаркет.Подключаемый_ПолеПриИзменении");
		ОбработчикиСобытий.Вставить("ХарактеристикаПриИзменении",
			"Обработки.УправлениеПродажамиНаЯндексМаркет.Подключаемый_ПолеПриИзменении");
		ОбработчикиСобытий.Вставить("УпаковкаПриИзменении",
			"Обработки.УправлениеПродажамиНаЯндексМаркет.Подключаемый_ПолеПриИзменении");
		ОбработчикиСобытий.Вставить("КоличествоПриИзменении",
			"Обработки.УправлениеПродажамиНаЯндексМаркет.Подключаемый_ПолеПриИзменении");
		ОбработчикиСобытий.Вставить("КоличествоПереданоПриИзменении",
			"Обработки.УправлениеПродажамиНаЯндексМаркет.Подключаемый_ПолеПриИзменении");
		ОбработчикиСобытий.Вставить("КоличествоДоставленоПриИзменении",
			"Обработки.УправлениеПродажамиНаЯндексМаркет.Подключаемый_ПолеПриИзменении");
		ОбработчикиСобытий.Вставить("КоличествоВозвратПриИзменении",
			"Обработки.УправлениеПродажамиНаЯндексМаркет.Подключаемый_ПолеПриИзменении");
		ОбработчикиСобытий.Вставить("ЦенаПриИзменении",
			"Обработки.УправлениеПродажамиНаЯндексМаркет.Подключаемый_ПолеПриИзменении");
		ОбработчикиСобытий.Вставить("СуммаПриИзменении",
			"Обработки.УправлениеПродажамиНаЯндексМаркет.Подключаемый_ПолеПриИзменении");
		ОбработчикиСобытий.Вставить("СуммаСкидкиПриИзменении",
			"Обработки.УправлениеПродажамиНаЯндексМаркет.Подключаемый_ПолеПриИзменении");
	КонецЕсли;
	
КонецПроцедуры

// Дополняет условное оформление для элемента ТаблицаСопоставленияДанных.
//
// Параметры:
//   Форма             - ФормаКлиентскогоПриложения - форма, для которой необходимо дополнить условное оформление.
//   ИмяТабличнойЧасти - Строка - имя объекта метаданных, в зависимости от которого выполняется дополнение условного 
//                         оформления.
//
Процедура ДополнитьУсловноеОформлениеТаблицыСопоставленияДанных(Форма, ИмяТабличнойЧасти) Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	ИмяТаблицы = "ТаблицаСопоставленияДанных";
	
	Если ИмяТабличнойЧасти = "ДанныеОРеализованныхТоварах" Тогда
		// Тип операции
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Передано'"));
		
		ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "_" + "ТипОперации");
		
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + "ТипОперации");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = 1;
		
		//
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Доставлено'"));
		
		ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "_" + "ТипОперации");
		
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + "ТипОперации");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = 2;
		
		//
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Невыкуп'"));
		
		ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "_" + "ТипОперации");
		
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + "ТипОперации");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = 3;
		
		//
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Возврат'"));
		
		ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "_" + "ТипОперации");
		
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + "ТипОперации");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = 4;
		
		//
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст",      НСтр("ru = '<требуется заполнение>'"));
		
		ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "_" + "ТипОперации");
		
		ГруппаОтбора           = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		
			ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + "ТипОперации");
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Меньше;
			ЭлементОтбора.ПравоеЗначение = 1;
			
			ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + "ТипОперации");
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Больше;
			ЭлементОтбора.ПравоеЗначение = 4;
		
		// Характеристика
		НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(Форма,
			ИмяТаблицы + "_" + "Характеристика",
			ИмяТаблицы + "." + "ХарактеристикиИспользуются");
		
		//
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст",      НСтр("ru = '<требуется заполнение>'"));
		
		ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "_" + "Характеристика");
		
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + "ХарактеристикиИспользуются");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Истина;
		
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + "Характеристика");
		ЭлементОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;

		// Упаковка
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
		ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "_" + "Упаковка");
		
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + "Номенклатура");
		ЭлементОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		
		//
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста",     ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст",          Новый ПолеКомпоновкиДанных(ИмяТаблицы 
																					+ "." + "НоменклатураЕдиницаИзмерения"));
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
		ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "_" + "Упаковка");
		
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + "Упаковка");
		ЭлементОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		
		// Количество
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
		ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "_" + "Количество");
		
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ФильтрПоОсновнымКолонкам");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Ложь;
		
		// Количество доставленных
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
		ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "_" + "КоличествоДоставлено");
		
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + "ТипОперации");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
		ЭлементОтбора.ПравоеЗначение = 2;
		
		//
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
		
		ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "_" + "КоличествоДоставлено");
		
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + "ТипОперации");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = 2;
		
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + "КоличествоДоставлено");
		ЭлементОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		
		// Количество невыкупленных (возвращенных)
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
		ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "_" + "КоличествоВозврат");
		
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + "ТипОперации");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
		ЭлементОтбора.ПравоеЗначение = 3;
		
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + "ТипОперации");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
		ЭлементОтбора.ПравоеЗначение = 4;
		
		//
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
		
		ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "_" + "КоличествоВозврат");
		
		ГруппаОтбора           = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		
			ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + "ТипОперации");
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = 3;
		
			ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + "ТипОперации");
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = 4;
		
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + "КоличествоВозврат");
		ЭлементОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		
		// Дата доставки
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
		ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "_" + "ДатаДоставки");
		
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + "ТипОперации");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = 3;
		
		//
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
		
		ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "_" + "ДатаДоставки");
		
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + "ТипОперации");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
		ЭлементОтбора.ПравоеЗначение = 1;
		
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + "ТипОперации");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
		ЭлементОтбора.ПравоеЗначение = 3;
		
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + "ДатаДоставки");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Дата(1, 1, 1);
		
		// Дата невыкупа (возврата)
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
		ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "_" + "ДатаНевыкупаВозврата");
		
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + "ТипОперации");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
		ЭлементОтбора.ПравоеЗначение = 3;
		
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + "ТипОперации");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
		ЭлементОтбора.ПравоеЗначение = 4;
		
		//
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
		
		ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "_" + "ДатаНевыкупаВозврата");
		
		ГруппаОтбора           = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		
			ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + "ТипОперации");
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = 3;
		
			ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + "ТипОперации");
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = 4;
		
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + "ДатаНевыкупаВозврата");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Дата(1, 1, 1);
	КонецЕсли;
	
КонецПроцедуры

// Изменяет настройки динамического списка.
//
// Параметры:
//   ТаблицаФормы              - ТаблицаФормы - элемент формы, которым представлен динамический список.
//   СписокЗагруженныхОбъектов - ДинамическийСписок - динамический список.
//   ИмяТабличнойЧасти         - Строка - полное имя объекта метаданных, для которого настраивается динамический список.
//
Процедура НастроитьДинамическийСписокОтображенияРезультатаЗагрузки(ТаблицаФормы, СписокЗагруженныхОбъектов, 
			ИмяТабличнойЧасти) Экспорт
	
	СвойстваДинамическогоСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	ЗаполнитьЗначенияСвойств(СвойстваДинамическогоСписка, СписокЗагруженныхОбъектов);
	
	ПараметрыДинамическогоСписка = Новый Структура;
	
	Если ИмяТабличнойЧасти = "ДанныеОРеализованныхТоварах" Тогда
		СвойстваДинамическогоСписка.ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	РеестрДокументовПереопределяемый.Ссылка КАК Ссылка,
			|	ВЫРАЗИТЬ("""" КАК СТРОКА(50)) КАК СостояниеСсылки,
			|	РеестрДокументовПереопределяемый.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
			|	ТИПЗНАЧЕНИЯ(РеестрДокументовПереопределяемый.Ссылка) КАК ТипЗначения,
			|	РеестрДокументовПереопределяемый.Организация КАК Организация,
			|	РеестрДокументовПереопределяемый.Партнер КАК Партнер,
			|	РеестрДокументовПереопределяемый.Контрагент КАК Контрагент,
			|	РеестрДокументовПереопределяемый.МестоХранения КАК МестоХранения,
			|	РеестрДокументовПереопределяемый.Договор КАК Договор,
			|	РеестрДокументовПереопределяемый.НомерПервичногоДокумента КАК НомерПервичногоДокумента,
			|	РеестрДокументовПереопределяемый.ДатаПервичногоДокумента КАК ДатаПервичногоДокумента,
			|	РеестрДокументовПереопределяемый.Сумма КАК Сумма,
			|	РеестрДокументовПереопределяемый.Валюта КАК Валюта,
			|	РеестрДокументовПереопределяемый.НомерДокументаИБ КАК Номер,
			|	РеестрДокументовПереопределяемый.ДатаДокументаИБ КАК Дата,
			|	РеестрДокументовПереопределяемый.Комментарий КАК Комментарий,
			|	РеестрДокументовПереопределяемый.Автор КАК Автор,
			|	РеестрДокументовПереопределяемый.Ответственный КАК Менеджер,
			|	ВЫБОР
			|		КОГДА РеестрДокументовПереопределяемый.Проведен
			|			ТОГДА 0
			|		КОГДА РеестрДокументовПереопределяемый.ПометкаУдаления
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ КАК НестандартнаяКартинка,
			|	РеестрДокументовПереопределяемый.ПометкаУдаления КАК ПометкаУдаления,
			|	РеестрДокументовПереопределяемый.Проведен КАК Проведен
			|ИЗ
			|	РегистрСведений.РеестрДокументов КАК РеестрДокументовПереопределяемый
			|ГДЕ
			|	РеестрДокументовПереопределяемый.Ссылка В(&СписокОбъектовОтбор)"
	КонецЕсли;
	
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(ТаблицаФормы, СвойстваДинамическогоСписка);
	
	Если ЗначениеЗаполнено(ПараметрыДинамическогоСписка) Тогда
		Для Каждого Параметр Из ПараметрыДинамическогоСписка Цикл
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
				СписокЗагруженныхОбъектов,
				Параметр.Ключ,
				Параметр.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если ИмяТабличнойЧасти = "ДанныеОРеализованныхТоварах" Тогда
		ТаблицаФормы.ПодчиненныеЭлементы["СписокЗагруженныхОбъектовМестоХранения"].Видимость             = Ложь;
		ТаблицаФормы.ПодчиненныеЭлементы["СписокЗагруженныхОбъектовДанныеПервичногоДокумента"].Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает данные, полученные методами API.
//
// Параметры:
//   ТаблицаДляЗагрузкиДанных - ТаблицаЗначений - динамически подготовленная таблица для заполнения загруженных 
//                                сопоставленных данных.
//   Параметры                - см. ИнтеграцияСМаркетплейсамиСервер.ПараметрыЗагрузкиИнтеграционнымиМетодами.
//
// Возвращаемое значение:
//   См. ИнтеграцияСМаркетплейсамиСервер.РезультатПолученияДанныхИнтеграционнымиМетодами.
//
Функция ПолучитьДанныеИнтеграционнымиМетодами(ТаблицаДляЗагрузкиДанных, Параметры) Экспорт
	
	ПараметрыПрогресса = ИнтеграцияСМаркетплейсамиСервер.ПараметрыПрогресса();
	ПараметрыПрогресса.ШагИтерацииВПроцентах = 30;
	
	Если Параметры.ИмяТабличнойЧасти = "ДанныеОРеализованныхТоварах" Тогда
		Результат = ПолучитьДанныеОРеализованныхТоварах(ТаблицаДляЗагрузкиДанных, Параметры);
	Иначе
		Результат = ИнтеграцияСМаркетплейсамиСервер.РезультатПолученияДанныхИнтеграционнымиМетодами();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Производит сопоставление данных, загружаемых в табличную часть ИмяТабличнойЧасти, с данными в ИБ.
//
// Параметры:
//   ТаблицаСопоставленияДанных - ТаблицаЗначений - динамически подготовленная таблица для заполнения загруженных 
//                                  сопоставленных данных.
//   ДанныеИзФайла              - ТаблицаЗначений - динамически подготовленная таблица с загруженными данными.
//   Параметры                  - см. ИнтеграцияСМаркетплейсамиСервер.ПараметрыЗагрузкиИзФайлаВТабличнуюЧасть.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица результата сопоставления.
//
Функция СопоставитьЗагружаемыеДанные(ТаблицаСопоставленияДанных, ДанныеИзФайла, Параметры) Экспорт
	
	СписокНеоднозначностей = ИнтеграцияСМаркетплейсамиСервер.НовыйСписокНеоднозначностей();
	
	ПараметрыПрогресса = ИнтеграцияСМаркетплейсамиСервер.ПараметрыПрогресса();
	ПараметрыПрогресса.ШагИтерацииВПроцентах = 15;
	ПараметрыПрогресса.ПрогрессВыполнения    = 30;	// Часть прогресса выполнена (загрузка из файла/таблицы).
	
	Если Параметры.ИмяТабличнойЧасти = "ДанныеОРеализованныхТоварах" Тогда
		СопоставитьДанныеОРеализованныхТоварах(ТаблицаСопоставленияДанных, 
			ДанныеИзФайла, 
			СписокНеоднозначностей,
			Параметры, 
			ПараметрыПрогресса);
	КонецЕсли;
	
	ПараметрыПрогресса.ШагИтерацииВПроцентах = 15;
	ПараметрыПрогресса.ПрогрессВыполнения    = 45;	// Часть прогресса выполнена (сопоставление данных).
	
	ДополнитьДаннымиИзФайлаИРезультатомСопоставления(ТаблицаСопоставленияДанных, 
		ДанныеИзФайла,
		СписокНеоднозначностей, 
		Параметры, 
		ПараметрыПрогресса);
	
	Возврат ТаблицаСопоставленияДанных;
	
КонецФункции

// Производит запись загружаемых данных в учетную систему 1С.
//
// Параметры:
//   ТаблицаДанных  - ТаблицаЗначений - динамически подготовленная таблица для заполнения загруженных сопоставленных 
//                      данных.
//   Параметры      - Структура - параметры, переданные из формы-источника.
//   СсылкаНаОбъект - ДокументСсылка, Неопределено - ссылка на обновляемый объект или Неопределено для создания нового.
//
// Возвращаемое значение:
//   См. ИнтеграцияСМаркетплейсамиСервер.РезультатЗаписиЗагружаемыхДанных.
//
Функция ЗаписатьЗагружаемыеДанные(ТаблицаДанных, Параметры, СсылкаНаОбъект = Неопределено) Экспорт
	
	Результат = ИнтеграцияСМаркетплейсамиСервер.РезультатЗаписиЗагружаемыхДанных();
	
	ПараметрыПрогресса = ИнтеграцияСМаркетплейсамиСервер.ПараметрыПрогресса();
	ПараметрыПрогресса.ШагИтерацииВПроцентах = 40;
	ПараметрыПрогресса.ПрогрессВыполнения    = 60; // Часть прогресса выполнена (сопоставление данных).
	
	Если Параметры.ИмяТабличнойЧасти = "ДанныеОРеализованныхТоварах" Тогда
		ЗагружатьНезаполненныеСтроки = Параметры.ЗагружатьНезаполненныеСтроки;
		
		Если ТипЗнч(Параметры.ДополнительныеПараметры) = Тип("Структура")
				И Параметры.ДополнительныеПараметры.Свойство("ЗначенияПараметровСсылкиНаОбъект") Тогда
			ДанныеУчетнойЗаписи = Параметры.ДополнительныеПараметры.ЗначенияПараметровСсылкиНаОбъект;
			ДанныеУчетнойЗаписи.Вставить("УчетнаяЗапись", Параметры.УчетнаяЗапись);
		Иначе
			ДанныеУчетнойЗаписи = ИнтеграцияСЯндексМаркетВызовСервера.ДанныеУчетнойЗаписиЯндексМаркет(Параметры.УчетнаяЗапись);
		КонецЕсли;
		
		КонстантыСервиса      = ИнтеграцияСЯндексМаркетКлиентСервер.КонстантыСервиса();
		СпособОтраженияПродаж = ДанныеУчетнойЗаписи.СпособОтраженияПродаж;
		
		Если СпособОтраженияПродаж = Неопределено Тогда
			СпособОтраженияПродаж = КонстантыСервиса.СпособОтраженияПродажРеализация;
		КонецЕсли;
		
		Если СпособОтраженияПродаж = КонстантыСервиса.СпособОтраженияПродажРеализация Тогда
			Результат = ЗаписатьПродажиСОтложеннымПереходомПраваСобственности(
				ТаблицаДанных,
				ДанныеУчетнойЗаписи,
				ЗагружатьНезаполненныеСтроки,
				ПараметрыПрогресса);
			
		ИначеЕсли СпособОтраженияПродаж = КонстантыСервиса.СпособОтраженияПродажКомиссия Тогда
			Результат = ЗаписатьПродажиЧерезКомиссионера(
				ТаблицаДанных,
				ДанныеУчетнойЗаписи,
				ЗагружатьНезаполненныеСтроки,
				ПараметрыПрогресса);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует наименование присоединенного файла в зависимости от типа ссылки.
//
// Параметры:
//   СсылкаНаОбъект   - ДокументСсылка - ссылка на объект, для которого нужно получить наименование файла.
//   ДляВыгрузкиВФайл - Булево - признак формирования наименования файла для сохранения в файловую систему пользователя.
//
// Возвращаемое значение:
//   Строка - наименование файла.
//
Функция НаименованиеСохраняемогоФайла(СсылкаНаОбъект, ДляВыгрузкиВФайл = Ложь) Экспорт
	
	НаименованиеФайла = "";
	
	Возврат НаименованиеФайла;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииПолученияДанныхИнтеграционнымиМетодами

Функция ПолучитьДанныеОРеализованныхТоварах(ТаблицаДляЗагрузкиДанных, Параметры)
	
	Результат = ИнтеграцияСМаркетплейсамиСервер.РезультатПолученияДанныхИнтеграционнымиМетодами();
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.УчетнаяЗапись, "НеОбновлятьДанныеТорговойПлощадки") Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для учетной записи ""%1"" запрещен обмен данными с торговой площадкой.'", 
				ОбщегоНазначения.КодОсновногоЯзыка()),
			Параметры.УчетнаяЗапись);
		
		Результат.ИнформацияОбОшибке.КодОшибки      = "ЯндексМаркет_НеОбновлятьДанныеТорговойПлощадки";
		Результат.ИнформацияОбОшибке.ОписаниеОшибки = ТекстОшибки;
		Возврат Результат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.НачалоПериода)
			И Не ЗначениеЗаполнено(Параметры.КонецПериода) Тогда
		Результат.ИнформацияОбОшибке.КодОшибки      = "ЯндексМаркет_ПолучитьДанныеОРеализованныхТоварах";
		Результат.ИнформацияОбОшибке.ОписаниеОшибки = НСтр("ru = 'На задан период загрузки данных.'");
		Возврат Результат;
		
	ИначеЕсли Параметры.НачалоПериода > Параметры.КонецПериода Тогда
		Результат.ИнформацияОбОшибке.КодОшибки      = "ЯндексМаркет_ПолучитьДанныеОРеализованныхТоварах";
		Результат.ИнформацияОбОшибке.ОписаниеОшибки = НСтр("ru = 'Период загрузки информации о продажах товаров через торговую площадку указан неверно.'");
		Возврат Результат;
		
	ИначеЕсли Год(Параметры.НачалоПериода) <> Год(Параметры.КонецПериода)
				Или Месяц(Параметры.НачалоПериода) <> Месяц(Параметры.КонецПериода) Тогда
		Результат.ИнформацияОбОшибке.КодОшибки      = "ЯндексМаркет_ПолучитьДанныеОРеализованныхТоварах";
		Результат.ИнформацияОбОшибке.ОписаниеОшибки = НСтр("ru = 'В качестве периода загрузки информации о продажах товаров через торговую площадку доступен только месяц.'");
		Возврат Результат;
	КонецЕсли;
	
	ВыборкаДанных = ИнтеграцияСЯндексМаркетСервер.ВыбратьУчетныеЗаписиЯндексМаркет(Параметры.УчетнаяЗапись);
	
	Если ВыборкаДанных.Следующий() Тогда
		Файлы = Новый Массив;
		
		Попытка
			Отказ = Ложь;
			Файлы = ИнтеграцияСЯндексМаркетСервер.ПолучитьОтчетыОРеализованныхТоварахИзСервиса(ВыборкаДанных, 
						Параметры.НачалоПериода, 
						Параметры.КонецПериода, 
						Отказ);
			
			Если Отказ Тогда
				Результат.ИнформацияОбОшибке.КодОшибки      = "ЯндексМаркет_ПолучитьДанныеОРеализованныхТоварах";
				Результат.ИнформацияОбОшибке.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'При загрузке информации о продажах товаров через торговую площадку для учетной записи ""%1"" возникли ошибки. Подробности см. в журнале регистрации.'"),
					ВыборкаДанных.Наименование);
				Возврат Результат;
			КонецЕсли;
			
		Исключение
			Результат.ИнформацияОбОшибке.КодОшибки      = "ЯндексМаркет_ПолучитьДанныеОРеализованныхТоварах";
			Результат.ИнформацияОбОшибке.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При загрузке информации о продажах товаров через торговую площадку для учетной записи ""%1"" возникли ошибки: %2'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				ВыборкаДанных.УчетнаяЗапись,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Возврат Результат;
		КонецПопытки;
		
		Если Файлы.Количество() = 0 Тогда
			Результат.ИнформацияОбОшибке.КодОшибки      = "ЯндексМаркет_ПолучитьДанныеОРеализованныхТоварах";
			Результат.ИнформацияОбОшибке.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'За период с %1 по %2 нет данных.'", 
					ОбщегоНазначения.КодОсновногоЯзыка()), 
				Формат(Параметры.НачалоПериода, "ДЛФ=D;"),
				Формат(Параметры.КонецПериода, "ДЛФ=D;"));
			
		Иначе
			ДанныеФайла = Новый ТабличныйДокумент;
			ДанныеФайла.Прочитать(Файлы[0], СпособЧтенияЗначенийТабличногоДокумента.Значение);
			ФайловаяСистема.УдалитьВременныйФайл(Файлы[0]);
			
			Для Каждого Область Из ДанныеФайла.Области Цикл
				ОбластьИмя = СтрЗаменить(Область.Имя, "ё", "е");
				
				Если Параметры.ЛистыШаблона.Свойство(ОбластьИмя) Тогда
					ШаблонСДанными = Новый ТабличныйДокумент;
					ШаблонСДанными.Вывести(ДанныеФайла.ПолучитьОбласть(Область.Имя));
					
					Параметры.ЛистыШаблона[ОбластьИмя].ШаблонСДанными = ШаблонСДанными;
				КонецЕсли;
			КонецЦикла;
			
			ПараметрыЗагрузки = ИнтеграцияСМаркетплейсамиСервер.ПараметрыЗагрузкиТабличногоДокумента(Новый УникальныйИдентификатор);
			ЗаполнитьЗначенияСвойств(ПараметрыЗагрузки, Параметры);
			ПараметрыЗагрузки.АдресХранилища = Параметры.АдресТаблицыЗагруженныхДанных;
			
			РезультатЗагрузки = ИнтеграцияСМаркетплейсамиСервер.ТабличныйДокументВТаблицу(ДанныеФайла, ПараметрыЗагрузки);
			
			Результат.Вставить("АдресТаблицыЗагруженныхДанных", РезультатЗагрузки.АдресТаблицыЗагруженныхДанных);
			Результат.Вставить("ЛистыШаблона",                  РезультатЗагрузки.ЛистыШаблона);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииСопоставления

Процедура СопоставитьДанныеОРеализованныхТоварах(ТаблицаСопоставленияДанных, ДанныеИзФайла, СписокНеоднозначностей,
			Параметры, ПараметрыПрогресса = Неопределено)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗагружаемыеДанные.НомерСтроки КАК НомерСтроки,
		|	ЗагружаемыеДанные.Служебный КАК ТипОперации,
		|	ЗагружаемыеДанные.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	ЗагружаемыеДанные.ПредставлениеТовара КАК ПредставлениеТовара,
		|	ЗагружаемыеДанные.НомерЗаказа КАК НомерЗаказа,
		|	ЗагружаемыеДанные.ТипЗаказа КАК ТипЗаказа,
		|	ЗагружаемыеДанные.ДатаОформленияЗаказа КАК ДатаОформленияЗаказа,
		|	ЗагружаемыеДанные.ДатаПередачиВДоставку КАК ДатаПередачиВДоставку,
		|	ЗагружаемыеДанные.ДатаДоставки КАК ДатаДоставки,
		|	ЗагружаемыеДанные.ДатаНевыкупаВозврата КАК ДатаНевыкупаВозврата,
		|	ВЫБОР
		|		КОГДА ЗагружаемыеДанные.Служебный = 4
		|			ТОГДА ЗагружаемыеДанные.КоличествоДоставлено
		|		ИНАЧЕ ЗагружаемыеДанные.КоличествоПередано
		|	КОНЕЦ КАК КоличествоПередано,
		|	ЗагружаемыеДанные.КоличествоДоставлено КАК КоличествоДоставлено,
		|	ЗагружаемыеДанные.КоличествоВозврат КАК КоличествоВозврат,
		|	ВЫБОР
		|		КОГДА ЗагружаемыеДанные.Служебный = 1
		|			ТОГДА ЗагружаемыеДанные.КоличествоПередано
		|		КОГДА ЗагружаемыеДанные.Служебный = 2
		|			ТОГДА ЗагружаемыеДанные.КоличествоДоставлено
		|		КОГДА ЗагружаемыеДанные.Служебный В (3, 4)
		|			ТОГДА -ЗагружаемыеДанные.КоличествоВозврат
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Количество,
		|	ЗагружаемыеДанные.СтавкаНДС КАК СтавкаНДС,
		|	0 КАК Цена,
		|	ВЫБОР
		|		КОГДА ЗагружаемыеДанные.Служебный В (3, 4)
		|			ТОГДА -1
		|		ИНАЧЕ 1
		|	КОНЕЦ * ЗагружаемыеДанные.Сумма КАК Сумма,
		|	ВЫБОР
		|		КОГДА ЗагружаемыеДанные.Служебный В (3, 4)
		|			ТОГДА -1
		|		ИНАЧЕ 1
		|	КОНЕЦ * ЗагружаемыеДанные.СуммаСкидки КАК СуммаСкидки,
		|	ЗагружаемыеДанные.ИННКонтрагента КАК ИННКонтрагента,
		|	ЗагружаемыеДанные.КППКонтрагента КАК КППКонтрагента,
		|	ЗагружаемыеДанные.НаименованиеКонтрагента КАК НаименованиеКонтрагента,
		|	ЗагружаемыеДанные.Контрагент КАК Контрагент,
		|	ЗагружаемыеДанные.НомерУПД КАК НомерУПД,
		|	ЗагружаемыеДанные.ДатаУПД КАК ДатаУПД,
		|	ЗагружаемыеДанные.НомерУКД КАК НомерУКД,
		|	ЗагружаемыеДанные.ДатаУКД КАК ДатаУКД
		|ПОМЕСТИТЬ ВТ_ЗагружаемыеДанные
		|ИЗ
		|	&ДанныеИзФайла КАК ЗагружаемыеДанные
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИдентификаторПубликации";
	
	Запрос.УстановитьПараметр("ДанныеИзФайла", ДанныеИзФайла);
	Запрос.Выполнить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЗагружаемыеДанные.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	ЗагружаемыеДанные.ПредставлениеТовара КАК ПредставлениеТовара
		|ИЗ
		|	ВТ_ЗагружаемыеДанные КАК ЗагружаемыеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликации
		|		ПО (СтатусыПубликации.УчетнаяЗапись = &УчетнаяЗапись)
		|			И ЗагружаемыеДанные.ИдентификаторПубликации = СтатусыПубликации.ИдентификаторПубликации
		|ГДЕ
		|	СтатусыПубликации.Номенклатура ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("УчетнаяЗапись", Параметры.УчетнаяЗапись); 
	
	РазделителиСловПоиска = ",/(";
	ВыборкаПоиска         = НайтиНоменклатурыХарактеристикиУпаковки(Запрос.Выполнить(), РазделителиСловПоиска, Истина);
		
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"Обработка.УправлениеПродажамиНаЯндексМаркет.СопоставитьДанныеОРеализованныхТоварах");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗагружаемыеДанные.НомерСтроки КАК НомерСтроки,
		|	ЗагружаемыеДанные.ТипОперации КАК ТипОперации,
		|	ЗагружаемыеДанные.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	ЗагружаемыеДанные.ПредставлениеТовара КАК ПредставлениеТовара,
		|	ЗагружаемыеДанные.НомерЗаказа КАК НомерЗаказа,
		|	ЗагружаемыеДанные.ТипЗаказа КАК ТипЗаказа,
		|	ЗагружаемыеДанные.ДатаОформленияЗаказа КАК ДатаОформленияЗаказа,
		|	ЗагружаемыеДанные.ДатаПередачиВДоставку КАК ДатаПередачиВДоставку,
		|	ЗагружаемыеДанные.ДатаДоставки КАК ДатаДоставки,
		|	ЗагружаемыеДанные.ДатаНевыкупаВозврата КАК ДатаНевыкупаВозврата,
		|	ЗагружаемыеДанные.КоличествоПередано КАК КоличествоПередано,
		|	ЗагружаемыеДанные.КоличествоДоставлено КАК КоличествоДоставлено,
		|	ЗагружаемыеДанные.КоличествоВозврат КАК КоличествоВозврат,
		|	ЗагружаемыеДанные.Количество КАК Количество,
		|	ЗагружаемыеДанные.СтавкаНДС КАК СтавкаНДС,
		|	ВЫБОР
		|		КОГДА ЗагружаемыеДанные.Количество = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВЫРАЗИТЬ(ЗагружаемыеДанные.Сумма / ЗагружаемыеДанные.Количество КАК ЧИСЛО(31, 2))
		|	КОНЕЦ КАК Цена,
		|	ЗагружаемыеДанные.Сумма КАК Сумма,
		|	ЗагружаемыеДанные.СуммаСкидки КАК СуммаСкидки,
		|	ЗагружаемыеДанные.ИННКонтрагента КАК ИННКонтрагента,
		|	ЗагружаемыеДанные.КППКонтрагента КАК КППКонтрагента,
		|	ЗагружаемыеДанные.НаименованиеКонтрагента КАК НаименованиеКонтрагента,
		|	ЗагружаемыеДанные.Контрагент КАК Контрагент,
		|	ЗагружаемыеДанные.НомерУПД КАК НомерУПД,
		|	ЗагружаемыеДанные.ДатаУПД КАК ДатаУПД,
		|	ЗагружаемыеДанные.НомерУКД КАК НомерУКД,
		|	ЗагружаемыеДанные.ДатаУКД КАК ДатаУКД,
		|	ЕСТЬNULL(СтатусыПубликации.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
		|	ЕСТЬNULL(СтатусыПубликации.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
		|	ЕСТЬNULL(СтатусыПубликации.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК Упаковка,
		|	ЕСТЬNULL(СправочникНоменклатура.ТипНоменклатуры, ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)) КАК ТипНоменклатуры,
		|	ЕСТЬNULL(СправочникНоменклатура.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК НоменклатураЕдиницаИзмерения,
		|	ЕСТЬNULL(СправочникНоменклатура.ПрослеживаемыйТовар, ЛОЖЬ) КАК ПрослеживаемыйТовар,
		|	ВЫБОР
		|		КОГДА &ИспользоватьХарактеристикиНоменклатуры
		|				И НЕ СправочникНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ХарактеристикиИспользуются,
		|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковкиТовара, 1) КАК УпаковкаКоэффициент
		|ИЗ
		|	ВТ_ЗагружаемыеДанные КАК ЗагружаемыеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликации
		|		ПО (СтатусыПубликации.УчетнаяЗапись = &УчетнаяЗапись)
		|			И ЗагружаемыеДанные.ИдентификаторПубликации = СтатусыПубликации.ИдентификаторПубликации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО (СтатусыПубликации.Номенклатура = СправочникНоменклатура.Ссылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТипОперации,
		|	НомерСтроки
		|ИТОГИ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Номенклатура),
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Характеристика),
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Упаковка)
		|ПО
		|	ИдентификаторПубликации";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковкиТовара",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"СтатусыПубликации.Упаковка",
			"СтатусыПубликации.Номенклатура"));
		
	Запрос.УстановитьПараметр("УчетнаяЗапись",                          Параметры.УчетнаяЗапись); 
	Запрос.УстановитьПараметр("ИспользоватьХарактеристикиНоменклатуры", ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры"));
	
	ВыборкаИдентификатор = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВсегоСтрок         = ВыборкаИдентификатор.Количество();
	НомерТекущейСтроки = 1;
	ПроцентВыполнения  = 0;
	
	// Пока не определяем неоднозначность
	ОпределятьНеоднозначность = Ложь;
	ТипЧисло                  = Новый ОписаниеТипов("Число");
	
	Пока ВыборкаИдентификатор.Следующий() Цикл
		Если ПараметрыПрогресса <> Неопределено Тогда
			ИнтеграцияСМаркетплейсамиСервер.УстановитьПроцентПрогресса(
				ВсегоСтрок,
				НомерТекущейСтроки,
				ПроцентВыполнения,
				ПараметрыПрогресса);
		КонецЕсли;
			
		РезультатПоиска = Неопределено;
		
		ВыборкаДанных = ВыборкаИдентификатор.Выбрать();
		Пока ВыборкаДанных.Следующий() Цикл
			ЕстьНеоднозначность = ОпределятьНеоднозначность И (ВыборкаДанных.Количество() > 1);
			
			ПоляИсключения = "ТипОперации";
			Если ЕстьНеоднозначность Тогда
				ПоляИсключения = ПоляИсключения 
					+ ?(ЗначениеЗаполнено(ПоляИсключения), ", ", "") 
					+ "Номенклатура, Характеристика, Упаковка";
			КонецЕсли;
			
			Если ЕстьНеоднозначность Тогда
				Если ВыборкаИдентификатор.Номенклатура > 1 Тогда
					Неоднозначность             = СписокНеоднозначностей.Добавить();
					Неоднозначность.НомерСтроки = ВыборкаДанных.НомерСтроки;
					Неоднозначность.Колонка     = "Номенклатура";
				КонецЕсли;
				
				Если ВыборкаИдентификатор.Характеристика > 1 Тогда
					Неоднозначность             = СписокНеоднозначностей.Добавить();
					Неоднозначность.НомерСтроки = ВыборкаДанных.НомерСтроки;
					Неоднозначность.Колонка     = "Характеристика";
				КонецЕсли;
				
				Если ВыборкаИдентификатор.Упаковка > 1 Тогда
					Неоднозначность             = СписокНеоднозначностей.Добавить();
					Неоднозначность.НомерСтроки = ВыборкаДанных.НомерСтроки;
					Неоднозначность.Колонка     = "Упаковка";
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаСопоставленияДанных.Добавить();
			НоваяСтрока.ТипОперации = ТипЧисло.ПривестиЗначение(ВыборкаДанных.ТипОперации);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДанных,, ПоляИсключения);
			
			Если Не ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
				Если РезультатПоиска = Неопределено Тогда
					РезультатПоиска = ОпределитьНоменклатуруХарактеристикуУпаковку(ВыборкаПоиска, 
						ВыборкаИдентификатор.ИдентификаторПубликации, 
						"ИдентификаторПубликации");
				КонецЕсли;
				
				Если ЗначениеЗаполнено(РезультатПоиска.Номенклатура) Тогда
					ЗаполнитьЗначенияСвойств(НоваяСтрока, РезультатПоиска);
					НоваяСтрока.Служебный                    = "ПодобраноАвтоматически";
					НоваяСтрока.НоменклатураЕдиницаИзмерения = РезультатПоиска.ЕдиницаИзмерения;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		НомерТекущейСтроки = НомерТекущейСтроки + 1;
	КонецЦикла;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(
		Замер, 
		ДанныеИзФайла.Количество() / 1000);
		
КонецПроцедуры

Процедура ДополнитьДаннымиИзФайлаИРезультатомСопоставления(ТаблицаСопоставленияДанных, ДанныеИзФайла,
			СписокНеоднозначностей, Параметры, ПараметрыПрогресса = Неопределено)
	
	Если ДанныеИзФайла.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеЗагружаемыхКолонок = Новый Соответствие;
	Для Каждого Колонка Из ДанныеИзФайла.Колонки Цикл
		Префикс = "ФЛ_";
		Если ТаблицаСопоставленияДанных.Колонки.Найти(Префикс + Колонка.Имя) <> Неопределено Тогда
			СоответствиеЗагружаемыхКолонок.Вставить(Колонка.Имя, Префикс + Колонка.Имя);
		КонецЕсли;
	КонецЦикла;
	
	ВсегоСтрок         = ДанныеИзФайла.Количество();
	НомерТекущейСтроки = 1;
	ПроцентВыполнения  = 0;
	
	ДанныеИзФайла.Индексы.Добавить("НомерСтроки");
	
	Для Каждого СтрокаТаблицыЗначений Из ТаблицаСопоставленияДанных Цикл
		Если ПараметрыПрогресса <> Неопределено Тогда
			ИнтеграцияСМаркетплейсамиСервер.УстановитьПроцентПрогресса(
				ВсегоСтрок,
				НомерТекущейСтроки,
				ПроцентВыполнения,
				ПараметрыПрогресса);
		КонецЕсли;
		
		Отбор           = Новый Структура("НомерСтроки", СтрокаТаблицыЗначений.НомерСтроки);
		НайденныеСтроки = ДанныеИзФайла.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			Для Каждого ДанныеКолонки Из СоответствиеЗагружаемыхКолонок Цикл
				СтрокаТаблицыЗначений[ДанныеКолонки.Значение] = НайденныеСтроки[0][ДанныеКолонки.Ключ];
			КонецЦикла;
			
			Неоднозначности = СписокНеоднозначностей.НайтиСтроки(Отбор);
			
			Если Неоднозначности.Количество() > 0 Тогда
				СтрокаТаблицыЗначений.РезультатСопоставленияСтроки = "Неоднозначность";
				СтрокаТаблицыЗначений.ОписаниеОшибки               = "";
				
				Для Каждого Неоднозначность Из Неоднозначности Цикл
					СтрокаТаблицыЗначений.ОписаниеОшибки = СтрокаТаблицыЗначений.ОписаниеОшибки
						+ Неоднозначность.Колонка + ";";
				КонецЦикла;
			КонецЕсли;
			
			ДобавитьПроверкуЗаполненияХарактеристики(Параметры, СтрокаТаблицыЗначений);
			
			ИнтеграцияСМаркетплейсамиКлиентСервер.ЗаполнитьРезультатСопоставленияСтроки(
				СтрокаТаблицыЗначений,
				Параметры.КолонкиОбязательныеПриПроверке,
				Параметры.КолонкиДополнительныеПриПроверке);
		КонецЕсли;
		
		НомерТекущейСтроки = НомерТекущейСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет поиск номенклатуры, характеристик, упаковок, категорий для указанных товарных позиций из Яндекс Маркет 
// одним запросом.
//
// Параметры:                                                                   
//   ИсходныеДанные         - ТаблицаЗначений, РезультатЗапроса - исходные данные, для которых выполняется поиск.
//   РазделителиСловПоиска  - Строка - перечень символов-разделителей для поиска по частям наименований.
//   ПоискПоХарактеристикам - Булево - Истина, если выполнять поиск характеристик номенклатуры по частям наименования.
//
// Возвращаемое значение:
//   ВыборкаИзРезультатаЗапроса - результат поиска номенклатуры, характеристик, упаковки:
//     * ИдентификаторПубликации     - Строка - внутренний идентификатор товара в системе продавца;
//     * ИдентификаторТовараПлощадки - Строка - идентификатор товара на маркетплейсе;
//     * ВариантПоиска               - Число - вариант поиска: 
//                                       (-1) - не найдено; 
//                                       0 - неоднозначный поиск; 
//                                       1, 2 - по штрихкоду; 
//                                       3, 4 - по артикулу; 
//                                       5 - по идентификаторам из сервиса Яндекс Маркет;
//                                       6 - по наименованию; 
//                                       10 и более - по словам наименований; 
//                                       для поиска по номенклатуре контрагентов добавляется 0.1.
//     * ОднозначныйПоиск            - Булево - признак однозначных требований к результатам поиска;
//     * Номенклатура                - СправочникСсылка.Номенклатура - найденная номенклатура;
//     * ТипНоменклатуры             - ПеречислениеСсылка.ТипыНоменклатуры - тип номенклатуры;
//     * ПрослеживаемыйТовар         - Булево - признак прослеживаемости товара;
//     * ХарактеристикиИспользуются  - Булево - признак использования характеристик номенклатуры;
//     * Характеристика              - СправочникСсылка.ХарактеристикиНоменклатуры - найденная характеристика;
//     * ИспользоватьУпаковки        - Булево - признак использования упаковок номенклатуры;
//     * Упаковка                    - СправочникСсылка.УпаковкиЕдиницыИзмерения - найденная упаковка;
//     * УпаковкаКоэффициент         - Число - коэффициент упаковки;
//     * ЕдиницаИзмерения            - СправочникСсылка.УпаковкиЕдиницыИзмерения - единица хранения номенклатуры.
//
Функция НайтиНоменклатурыХарактеристикиУпаковки(ИсходныеДанные, РазделителиСловПоиска = Неопределено, 
			ПоискПоХарактеристикам = Ложь) Экспорт
	
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"Обработка.УправлениеПродажамиНаЯндексМаркет.НайтиНоменклатурыХарактеристикиУпаковки");
	
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьУпаковкиНоменклатуры       = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	
	Если Не ИспользоватьХарактеристикиНоменклатуры Тогда
		ПоискПоХарактеристикам = Ложь;
	КонецЕсли;
	
	ЕстьИдентификаторТовараПлощадки = (ИсходныеДанные.Колонки.Найти("ИдентификаторТовараПлощадки") <> Неопределено);
	ЕстьШтрихкод                    = (ИсходныеДанные.Колонки.Найти("Штрихкод") <> Неопределено );
	
	ТаблицаПоиска_1_2 = НоваяТаблицаПоискаНоменклатурыХарактеристикиУпаковки();
	ТаблицаПоиска_3_4 = НоваяТаблицаПоискаНоменклатурыХарактеристикиУпаковки();
	ТаблицаПоиска_5   = НоваяТаблицаПоискаНоменклатурыХарактеристикиУпаковки();
	ТаблицаПоиска_6   = НоваяТаблицаПоискаНоменклатурыХарактеристикиУпаковки();
	ТаблицаПоиска_10  = НоваяТаблицаПоискаНоменклатурыХарактеристикиУпаковки();
	
	Если ТипЗнч(ИсходныеДанные) = Тип("РезультатЗапроса") Тогда
		ВыборкаДанных = ИсходныеДанные.Выбрать();
	КонецЕсли;
	ИндексВыборки = 0;
	
	Пока Истина Цикл
		Если ТипЗнч(ИсходныеДанные) = Тип("ТаблицаЗначений") Тогда
			Если ИндексВыборки >= ИсходныеДанные.Количество() Тогда
				Прервать;
			КонецЕсли;
			
			ВыборкаДанных = ИсходныеДанные[ИндексВыборки];
			ИндексВыборки = ИндексВыборки + 1;
				
		Иначе
			Если Не ВыборкаДанных.Следующий() Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
	
		Если ЕстьИдентификаторТовараПлощадки Тогда
			ИдентификаторТовараПлощадки = ВыборкаДанных.ИдентификаторТовараПлощадки;
		Иначе
			ИдентификаторТовараПлощадки = "";
		КонецЕсли;
		
		// Поиск по штрихкоду
		Если ЕстьШтрихкод
				И ЗначениеЗаполнено(ВыборкаДанных.Штрихкод) Тогда
			Для Каждого ЭлементКоллекции Из СтрРазделить(ВыборкаДанных.Штрихкод, ";", Ложь) Цикл
				НоваяСтрока                             = ТаблицаПоиска_1_2.Добавить();
				НоваяСтрока.ИдентификаторПубликации     = ВыборкаДанных.ИдентификаторПубликации;
				НоваяСтрока.ИдентификаторТовараПлощадки = ИдентификаторТовараПлощадки;
				НоваяСтрока.ВариантПоиска               = 1;
				НоваяСтрока.ЗначениеПоиска              = СокрЛП(ЭлементКоллекции);
				НоваяСтрока.ПоискХарактеристики         = Ложь;
			КонецЦикла;
		КонецЕсли;
		
		// Поиск по артикулу как штрихкоду
		НоваяСтрока                             = ТаблицаПоиска_1_2.Добавить();
		НоваяСтрока.ИдентификаторПубликации     = ВыборкаДанных.ИдентификаторПубликации;
		НоваяСтрока.ИдентификаторТовараПлощадки = ИдентификаторТовараПлощадки;
		НоваяСтрока.ВариантПоиска               = 2;
		НоваяСтрока.ЗначениеПоиска              = ВыборкаДанных.ИдентификаторПубликации;
		НоваяСтрока.ПоискХарактеристики         = Ложь;
		
		// Поиск по артикулу
		НоваяСтрока                             = ТаблицаПоиска_3_4.Добавить();
		НоваяСтрока.ИдентификаторПубликации     = ВыборкаДанных.ИдентификаторПубликации;
		НоваяСтрока.ИдентификаторТовараПлощадки = ИдентификаторТовараПлощадки;
		НоваяСтрока.ВариантПоиска               = 4;
		НоваяСтрока.ЗначениеПоиска              = ВыборкаДанных.ИдентификаторПубликации;
		НоваяСтрока.ПоискХарактеристики         = Ложь;
		
		// Поиск по идентификатору контрагента
		Если ЕстьИдентификаторТовараПлощадки
				И ЗначениеЗаполнено(ИдентификаторТовараПлощадки) Тогда
			НоваяСтрока                             = ТаблицаПоиска_5.Добавить();
			НоваяСтрока.ИдентификаторПубликации     = ВыборкаДанных.ИдентификаторПубликации;
			НоваяСтрока.ИдентификаторТовараПлощадки = ИдентификаторТовараПлощадки;
			НоваяСтрока.ВариантПоиска               = 5;
			НоваяСтрока.ЗначениеПоиска              = ИдентификаторТовараПлощадки;
			НоваяСтрока.ПоискХарактеристики         = Ложь;
		КонецЕсли;
		
		// Поиск по наименованию
		Если ЗначениеЗаполнено(ВыборкаДанных.ПредставлениеТовара) Тогда
			НоваяСтрока                             = ТаблицаПоиска_6.Добавить();
			НоваяСтрока.ИдентификаторПубликации     = ВыборкаДанных.ИдентификаторПубликации;
			НоваяСтрока.ИдентификаторТовараПлощадки = ИдентификаторТовараПлощадки;
			НоваяСтрока.ВариантПоиска               = 6;
			НоваяСтрока.ЗначениеПоиска              = ВыборкаДанных.ПредставлениеТовара;
			НоваяСтрока.ПоискХарактеристики         = Ложь;
			
			Наименование         = ВыборкаДанных.ПредставлениеТовара;
			НаименованияПоСловам = Новый Массив;
			НомераВхождений      = Новый Соответствие;
			КоллекцияЭлементов   = РазложитьСтрокуВМассивСлов(Наименование, РазделителиСловПоиска);
			
			Для Каждого ЭлементКоллекции Из КоллекцияЭлементов Цикл
				НомерВхождения = НомераВхождений.Получить(ЭлементКоллекции);
				Если НомерВхождения = Неопределено Тогда
					НомерВхождения = 0;
				КонецЕсли;
				НомерВхождения = НомерВхождения + 1;
				
				НаименованияПоСловам.Вставить(0, Сред(Наименование, 1, СтрНайти(Наименование, ЭлементКоллекции,,, НомерВхождения) - 1) 
													+ ЭлементКоллекции);
				НомераВхождений.Вставить(ЭлементКоллекции, НомерВхождения);
			КонецЦикла;
			
			Индекс = 0;
			Пока Индекс < НаименованияПоСловам.Количество() Цикл
				НоваяСтрока                             = ТаблицаПоиска_10.Добавить();
				НоваяСтрока.ИдентификаторПубликации     = ВыборкаДанных.ИдентификаторПубликации;
				НоваяСтрока.ИдентификаторТовараПлощадки = ИдентификаторТовараПлощадки;
				НоваяСтрока.ВариантПоиска               = 10 + Индекс;
				НоваяСтрока.ЗначениеПоиска              = НаименованияПоСловам[Индекс];
				НоваяСтрока.ПоискХарактеристики         = Ложь;
				
				Если ЗначениеЗаполнено(НаименованияПоСловам[Индекс]) 
						И ПоискПоХарактеристикам Тогда
					Для Каждого ЭлементКоллекции Из НаименованияПоСловам Цикл
						Если СтрНайти(ЭлементКоллекции, НаименованияПоСловам[Индекс]) = 1 Тогда
							Наименование = СтрЗаменить(ЭлементКоллекции, НаименованияПоСловам[Индекс], "");
							
							Если ЗначениеЗаполнено(Наименование) Тогда
								НоваяСтрока                             = ТаблицаПоиска_10.Добавить();
								НоваяСтрока.ИдентификаторПубликации     = ВыборкаДанных.ИдентификаторПубликации;
								НоваяСтрока.ИдентификаторТовараПлощадки = ИдентификаторТовараПлощадки;
								НоваяСтрока.ВариантПоиска               = 10 + Индекс;
								НоваяСтрока.ЗначениеПоиска              = Наименование;
								НоваяСтрока.ПоискХарактеристики         = Истина;
								
								Если ИнтеграцияСМаркетплейсамиПовтИсп.ЭтоРазделительСлов(Сред(Наименование, 1, 1), РазделителиСловПоиска) Тогда
									НоваяСтрока                             = ТаблицаПоиска_10.Добавить();
									НоваяСтрока.ИдентификаторПубликации     = ВыборкаДанных.ИдентификаторПубликации;
									НоваяСтрока.ИдентификаторТовараПлощадки = ИдентификаторТовараПлощадки;
									НоваяСтрока.ВариантПоиска               = 10 + Индекс;
									НоваяСтрока.ЗначениеПоиска              = Сред(Наименование, 2);
									НоваяСтрока.ПоискХарактеристики         = Истина;
									
									НоваяСтрока                             = ТаблицаПоиска_10.Добавить();
									НоваяСтрока.ИдентификаторПубликации     = ВыборкаДанных.ИдентификаторПубликации;
									НоваяСтрока.ИдентификаторТовараПлощадки = ИдентификаторТовараПлощадки;
									НоваяСтрока.ВариантПоиска               = 10 + Индекс;
									НоваяСтрока.ЗначениеПоиска              = СокрЛП(Сред(Наименование, 2));
									НоваяСтрока.ПоискХарактеристики         = Истина;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Индекс = Индекс + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаПоиска.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	ТаблицаПоиска.ИдентификаторТовараПлощадки КАК ИдентификаторТовараПлощадки,
		|	ВЫРАЗИТЬ(ТаблицаПоиска.ВариантПоиска КАК ЧИСЛО(5, 1)) КАК ВариантПоиска,
		|	ТаблицаПоиска.ЗначениеПоиска КАК ЗначениеПоиска
		|ПОМЕСТИТЬ ВТ_ТаблицаПоиска_1_2
		|ИЗ
		|	&ТаблицаПоиска_1_2 КАК ТаблицаПоиска
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗначениеПоиска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПоиска.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	ТаблицаПоиска.ИдентификаторТовараПлощадки КАК ИдентификаторТовараПлощадки,
		|	ВЫРАЗИТЬ(ТаблицаПоиска.ВариантПоиска КАК ЧИСЛО(5, 1)) КАК ВариантПоиска,
		|	ТаблицаПоиска.ЗначениеПоиска КАК ЗначениеПоиска
		|ПОМЕСТИТЬ ВТ_ТаблицаПоиска_3_4
		|ИЗ
		|	&ТаблицаПоиска_3_4 КАК ТаблицаПоиска
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗначениеПоиска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПоиска.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	ТаблицаПоиска.ИдентификаторТовараПлощадки КАК ИдентификаторТовараПлощадки,
		|	ВЫРАЗИТЬ(ТаблицаПоиска.ВариантПоиска КАК ЧИСЛО(5, 1)) КАК ВариантПоиска,
		|	ТаблицаПоиска.ЗначениеПоиска КАК ЗначениеПоиска
		|ПОМЕСТИТЬ ВТ_ТаблицаПоиска_5
		|ИЗ
		|	&ТаблицаПоиска_5 КАК ТаблицаПоиска
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗначениеПоиска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПоиска.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	ТаблицаПоиска.ИдентификаторТовараПлощадки КАК ИдентификаторТовараПлощадки,
		|	ВЫРАЗИТЬ(ТаблицаПоиска.ВариантПоиска КАК ЧИСЛО(5, 1)) КАК ВариантПоиска,
		|	ТаблицаПоиска.ЗначениеПоиска КАК ЗначениеПоиска
		|ПОМЕСТИТЬ ВТ_ТаблицаПоиска_6
		|ИЗ
		|	&ТаблицаПоиска_6 КАК ТаблицаПоиска
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗначениеПоиска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПоиска.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	ТаблицаПоиска.ИдентификаторТовараПлощадки КАК ИдентификаторТовараПлощадки,
		|	ВЫРАЗИТЬ(ТаблицаПоиска.ВариантПоиска КАК ЧИСЛО(5, 1)) КАК ВариантПоиска,
		|	ТаблицаПоиска.ЗначениеПоиска КАК ЗначениеПоиска,
		|	ТаблицаПоиска.ПоискХарактеристики КАК ПоискХарактеристики
		|ПОМЕСТИТЬ ВТ_ТаблицаПоиска_10
		|ИЗ
		|	&ТаблицаПоиска_10 КАК ТаблицаПоиска
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗначениеПоиска,
		|	ПоискХарактеристики
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПоиска.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	ТаблицаПоиска.ИдентификаторТовараПлощадки КАК ИдентификаторТовараПлощадки,
		|	ТаблицаПоиска.ВариантПоиска КАК ВариантПоиска,
		|	Номенклатура.Ссылка КАК Ссылка,
		|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
		|			ТОГДА Номенклатура.ВидНоменклатуры
		|		КОГДА Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
		|			ТОГДА Номенклатура.ВладелецХарактеристик
		|		ИНАЧЕ Номенклатура.Ссылка
		|	КОНЕЦ КАК Владелец
		|ПОМЕСТИТЬ ВТ_Номенклатура
		|ИЗ
		|	ВТ_ТаблицаПоиска_10 КАК ТаблицаПоиска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		|		ПО ТаблицаПоиска.ЗначениеПоиска = Номенклатура.Наименование
		|ГДЕ
		|	&ПоискПоХарактеристикам
		|	И НЕ ТаблицаПоиска.ПоискХарактеристики
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Владелец,
		|	ВариантПоиска,
		|	ИдентификаторПубликации,
		|	ИдентификаторТовараПлощадки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СправочникХарактеристикиНоменклатуры.Владелец КАК Владелец,
		|	ТаблицаПоиска.ВариантПоиска КАК ВариантПоиска,
		|	ТаблицаПоиска.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	ТаблицаПоиска.ИдентификаторТовараПлощадки КАК ИдентификаторТовараПлощадки,
		|	СправочникХарактеристикиНоменклатуры.Ссылка КАК Характеристика
		|ПОМЕСТИТЬ ВТ_ХарактеристикиНоменклатуры
		|ИЗ
		|	ВТ_ТаблицаПоиска_10 КАК ТаблицаПоиска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК СправочникХарактеристикиНоменклатуры
		|		ПО ТаблицаПоиска.ЗначениеПоиска = СправочникХарактеристикиНоменклатуры.Наименование
		|ГДЕ
		|	&ПоискПоХарактеристикам
		|	И ТаблицаПоиска.ПоискХарактеристики
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Владелец,
		|	ВариантПоиска,
		|	ИдентификаторПубликации,
		|	ИдентификаторТовараПлощадки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПоиска.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	ТаблицаПоиска.ИдентификаторТовараПлощадки КАК ИдентификаторТовараПлощадки,
		|	ТаблицаПоиска.ВариантПоиска КАК ВариантПоиска,
		|	ИСТИНА КАК ОднозначныйПоиск,
		|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
		|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
		|	ШтрихкодыНоменклатуры.Упаковка КАК Упаковка
		|ПОМЕСТИТЬ ВТ_ВложенныйЗапрос
		|ИЗ
		|	ВТ_ТаблицаПоиска_1_2 КАК ТаблицаПоиска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|		ПО ТаблицаПоиска.ЗначениеПоиска = ШтрихкодыНоменклатуры.Штрихкод
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаПоиска.ИдентификаторПубликации,
		|	ТаблицаПоиска.ИдентификаторТовараПлощадки,
		|	ТаблицаПоиска.ВариантПоиска,
		|	ЛОЖЬ,
		|	СправочникНоменклатура.Ссылка,
		|	&ПустаяХарактеристика,
		|	СправочникНоменклатура.ЕдиницаИзмерения
		|ИЗ
		|	ВТ_ТаблицаПоиска_3_4 КАК ТаблицаПоиска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО ТаблицаПоиска.ЗначениеПоиска = СправочникНоменклатура.Артикул
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаПоиска.ИдентификаторПубликации,
		|	ТаблицаПоиска.ИдентификаторТовараПлощадки,
		|	ТаблицаПоиска.ВариантПоиска + 0.1,
		|	ЛОЖЬ,
		|	СправочникНоменклатураКонтрагентов.Номенклатура,
		|	СправочникНоменклатураКонтрагентов.Характеристика,
		|	СправочникНоменклатураКонтрагентов.Упаковка
		|ИЗ
		|	ВТ_ТаблицаПоиска_3_4 КАК ТаблицаПоиска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НоменклатураКонтрагентов КАК СправочникНоменклатураКонтрагентов
		|		ПО ТаблицаПоиска.ЗначениеПоиска = СправочникНоменклатураКонтрагентов.Артикул
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаПоиска.ИдентификаторПубликации,
		|	ТаблицаПоиска.ИдентификаторТовараПлощадки,
		|	ТаблицаПоиска.ВариантПоиска + 0.1,
		|	ЛОЖЬ,
		|	СправочникНоменклатураКонтрагентов.Номенклатура,
		|	СправочникНоменклатураКонтрагентов.Характеристика,
		|	СправочникНоменклатураКонтрагентов.Упаковка
		|ИЗ
		|	ВТ_ТаблицаПоиска_5 КАК ТаблицаПоиска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НоменклатураКонтрагентов КАК СправочникНоменклатураКонтрагентов
		|		ПО ТаблицаПоиска.ЗначениеПоиска = СправочникНоменклатураКонтрагентов.Идентификатор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаПоиска.ИдентификаторПубликации,
		|	ТаблицаПоиска.ИдентификаторТовараПлощадки,
		|	ТаблицаПоиска.ВариантПоиска,
		|	ЛОЖЬ,
		|	СправочникНоменклатура.Ссылка,
		|	&ПустаяХарактеристика,
		|	СправочникНоменклатура.ЕдиницаИзмерения
		|ИЗ
		|	ВТ_ТаблицаПоиска_6 КАК ТаблицаПоиска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО ТаблицаПоиска.ЗначениеПоиска = СправочникНоменклатура.Наименование
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаПоиска.ИдентификаторПубликации,
		|	ТаблицаПоиска.ИдентификаторТовараПлощадки,
		|	ТаблицаПоиска.ВариантПоиска + 0.1,
		|	ЛОЖЬ,
		|	СправочникНоменклатураКонтрагентов.Номенклатура,
		|	СправочникНоменклатураКонтрагентов.Характеристика,
		|	СправочникНоменклатураКонтрагентов.Упаковка
		|ИЗ
		|	ВТ_ТаблицаПоиска_6 КАК ТаблицаПоиска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НоменклатураКонтрагентов КАК СправочникНоменклатураКонтрагентов
		|		ПО ТаблицаПоиска.ЗначениеПоиска = СправочникНоменклатураКонтрагентов.Наименование
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Номенклатура.ИдентификаторПубликации,
		|	Номенклатура.ИдентификаторТовараПлощадки,
		|	Номенклатура.ВариантПоиска,
		|	ЛОЖЬ,
		|	Номенклатура.Ссылка,
		|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Характеристика, &ПустаяХарактеристика),
		|	Номенклатура.ЕдиницаИзмерения
		|ИЗ
		|	ВТ_Номенклатура КАК Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ПО Номенклатура.Владелец = ХарактеристикиНоменклатуры.Владелец
		|			И Номенклатура.ВариантПоиска = ХарактеристикиНоменклатуры.ВариантПоиска
		|			И Номенклатура.ИдентификаторПубликации = ХарактеристикиНоменклатуры.ИдентификаторПубликации
		|			И Номенклатура.ИдентификаторТовараПлощадки = ХарактеристикиНоменклатуры.ИдентификаторТовараПлощадки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ТаблицаПоиска_1_2
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ТаблицаПоиска_3_4
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ТаблицаПоиска_5
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ТаблицаПоиска_6
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ТаблицаПоиска_10
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ХарактеристикиНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВложенныйЗапрос.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	ВложенныйЗапрос.ИдентификаторТовараПлощадки КАК ИдентификаторТовараПлощадки,
		|	ВложенныйЗапрос.ВариантПоиска КАК ВариантПоиска,
		|	ВложенныйЗапрос.ОднозначныйПоиск КАК ОднозначныйПоиск,
		|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
		|	ЕСТЬNULL(СправочникНоменклатура.ТипНоменклатуры, ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)) КАК ТипНоменклатуры,
		|	ЕСТЬNULL(СправочникНоменклатура.ПрослеживаемыйТовар, ЛОЖЬ) КАК ПрослеживаемыйТовар,
		|	ВЫБОР
		|		КОГДА &ИспользоватьХарактеристикиНоменклатуры
		|				И НЕ ЕСТЬNULL(СправочникНоменклатура.ИспользованиеХарактеристик, ЛОЖЬ) = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ХарактеристикиИспользуются,
		|	ВложенныйЗапрос.Характеристика КАК Характеристика,
		|	ВЫБОР
		|		КОГДА &ИспользоватьХарактеристикиНоменклатуры
		|			ТОГДА ЕСТЬNULL(СправочникНоменклатура.ИспользоватьУпаковки, ЛОЖЬ)
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ИспользоватьУпаковки,
		|	ВЫБОР
		|		КОГДА ВложенныйЗапрос.Упаковка = СправочникНоменклатура.ЕдиницаИзмерения
		|			ТОГДА &ПустаяУпаковка
		|		ИНАЧЕ ВложенныйЗапрос.Упаковка
		|	КОНЕЦ КАК Упаковка,
		|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковкиТовара, 1) КАК УпаковкаКоэффициент,
		|	ЕСТЬNULL(СправочникНоменклатура.ЕдиницаИзмерения, &ПустаяУпаковка) КАК ЕдиницаИзмерения
		|ИЗ
		|	ВТ_ВложенныйЗапрос КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО ВложенныйЗапрос.Номенклатура = СправочникНоменклатура.Ссылка
		|			И (НЕ СправочникНоменклатура.ЭтоГруппа)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВариантПоиска,
		|	Характеристика УБЫВ,
		|	Упаковка УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ВложенныйЗапрос";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковкиТовара",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ВложенныйЗапрос.Упаковка",
			"ВложенныйЗапрос.Номенклатура"));
		
	Запрос.УстановитьПараметр("ТаблицаПоиска_1_2",                      ТаблицаПоиска_1_2);
	Запрос.УстановитьПараметр("ТаблицаПоиска_3_4",                      ТаблицаПоиска_3_4);
	Запрос.УстановитьПараметр("ТаблицаПоиска_5",                        ТаблицаПоиска_5);
	Запрос.УстановитьПараметр("ТаблицаПоиска_6",                        ТаблицаПоиска_6);
	Запрос.УстановитьПараметр("ТаблицаПоиска_10",                       ТаблицаПоиска_10);
	Запрос.УстановитьПараметр("ПоискПоХарактеристикам",                 ПоискПоХарактеристикам);
	Запрос.УстановитьПараметр("ИспользоватьХарактеристикиНоменклатуры", ИспользоватьХарактеристикиНоменклатуры);
	Запрос.УстановитьПараметр("ПустаяХарактеристика",                   Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("ИспользоватьУпаковкиНоменклатуры",       ИспользоватьУпаковкиНоменклатуры);
	Запрос.УстановитьПараметр("ПустаяУпаковка",                         Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(
		Замер, 
		(ТаблицаПоиска_1_2.Количество() + ТаблицаПоиска_3_4.Количество() + ТаблицаПоиска_5.Количество()
			+ ТаблицаПоиска_6.Количество() + ТаблицаПоиска_10.Количество()) / 1000);
		
	Возврат Результат;
	
КонецФункции

// Конструктор таблицы значений для поиска номенклатуры, характеристики, упаковки одним запросом.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица данных для поиска:
//     * ИдентификаторПубликации     - Строка - внутренний идентификатор товара в системе продавца.
//     * ИдентификаторТовараПлощадки - Строка - идентификатор товара на маркетплейсе.
//     * ВариантПоиска               - Число - вариант поиска:
//                                       1, 2 - по штрихкоду; 
//                                       3, 4 - по артикулу; 
//                                       5 - по идентификаторам Яндекс Маркет; 
//                                       6 - по наименованию; 
//                                       10 и более - по словам наименований.
//     * ЗначениеПоиска              - Строка - значение поиска по соответствующему варианту.
//     * ПоискХарактеристики         - Булево - Истина, если строка таблицы предназначена для поиска характеристики 
//                                       номенклатуры.
//
Функция НоваяТаблицаПоискаНоменклатурыХарактеристикиУпаковки() 
	
	ОписаниеТипаСтрока36  = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36));
	ОписаниеТипаСтрока300 = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(300));
	ОписаниеТипаСтрока500 = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(500));
	ОписаниеТипаБулево	  = Новый ОписаниеТипов("Булево");
	
	Результат = Новый ТаблицаЗначений; 
	Результат.Колонки.Добавить("ИдентификаторПубликации",     ОписаниеТипаСтрока36);
	Результат.Колонки.Добавить("ИдентификаторТовараПлощадки", ОписаниеТипаСтрока300);
	Результат.Колонки.Добавить("ВариантПоиска",               Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("ЗначениеПоиска",              ОписаниеТипаСтрока500);
	Результат.Колонки.Добавить("ПоискХарактеристики",         ОписаниеТипаБулево);
	
	Возврат Результат;
	
КонецФункции

// Определяет номенклатуру, характеристику, упаковку, категорию для конкретной товарной позиции по результатам поиска.
//
// Параметры:                   
//   ВыборкаПоиска     - ВыборкаИзРезультатаЗапроса - результат поиска, см. НайтиНоменклатурыХарактеристикиУпаковки.
//   Идентификатор     - Строка - внутренний идентификатор товара в системе продавца или идентификатор товара на 
//                         торговой площадке.
//   ИмяИдентификатора - Строка - имя поля идентификатора в анализируемых данных.
//
// Возвращаемое значение:
//   Структура - результат поиска:
//     * ВариантПоиска              - Число - вариант поиска.
//     * Номенклатура               - СправочникСсылка.Номенклатура - найденная номенклатура;
//     * ТипНоменклатуры            - ПеречислениеСсылка.ТипыНоменклатуры - тип номенклатуры;
//     * ПрослеживаемыйТовар        - Булево - признак прослеживаемости товара;
//     * ХарактеристикиИспользуются - Булево - признак использования характеристик номенклатуры;
//     * Характеристика             - СправочникСсылка.ХарактеристикиНоменклатуры - найденная характеристика;
//     * ИспользоватьУпаковки       - Булево - признак использования упаковок номенклатуры;
//     * Упаковка                   - СправочникСсылка.УпаковкиЕдиницыИзмерения - найденная упаковка;
//     * УпаковкаКоэффициент        - Число - коэффициент упаковки;
//     * ЕдиницаИзмерения           - СправочникСсылка.УпаковкиЕдиницыИзмерения - единица хранения номенклатуры.
//
Функция ОпределитьНоменклатуруХарактеристикуУпаковку(ВыборкаПоиска, Идентификатор, ИмяИдентификатора) Экспорт
	
	РезультатПоиска = Новый Структура;
	РезультатПоиска.Вставить("ВариантПоиска",              -1);
	РезультатПоиска.Вставить("Номенклатура",               Справочники.Номенклатура.ПустаяСсылка());
	РезультатПоиска.Вставить("ТипНоменклатуры",            Перечисления.ТипыНоменклатуры.Товар);
	РезультатПоиска.Вставить("ПрослеживаемыйТовар",        Ложь);
	РезультатПоиска.Вставить("ХарактеристикиИспользуются", Ложь);
	РезультатПоиска.Вставить("Характеристика",             Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	РезультатПоиска.Вставить("ИспользоватьУпаковки",       Ложь);
	РезультатПоиска.Вставить("Упаковка",                   Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	РезультатПоиска.Вставить("УпаковкаКоэффициент",        1);
	РезультатПоиска.Вставить("ЕдиницаИзмерения",           Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	
	Если ВыборкаПоиска <> Неопределено И ЗначениеЗаполнено(Идентификатор) Тогда
		ВыборкаПоиска.Сбросить();
		Отбор = Новый Структура(ИмяИдентификатора, Идентификатор);
		
		Пока ВыборкаПоиска.НайтиСледующий(Отбор) Цикл
			Если РезультатПоиска.ВариантПоиска > 0 Тогда
				Если РезультатПоиска.ВариантПоиска = ВыборкаПоиска.ВариантПоиска 
						И Не ВыборкаПоиска.ОднозначныйПоиск Тогда
					РезультатПоиска.Вставить("ВариантПоиска", 0);
					
					Если РезультатПоиска.Номенклатура <> ВыборкаПоиска.Номенклатура Тогда
						РезультатПоиска.Вставить("Номенклатура",               Справочники.Номенклатура.ПустаяСсылка());
						РезультатПоиска.Вставить("ТипНоменклатуры",            Перечисления.ТипыНоменклатуры.Товар);
						РезультатПоиска.Вставить("ПрослеживаемыйТовар",        Ложь);
						РезультатПоиска.Вставить("ХарактеристикиИспользуются", Ложь);
						РезультатПоиска.Вставить("ИспользоватьУпаковки",       Ложь);
						РезультатПоиска.Вставить("ЕдиницаИзмерения",           Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
					КонецЕсли;
					
					РезультатПоиска.Вставить("Характеристика",      Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
					РезультатПоиска.Вставить("Упаковка",            Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
					РезультатПоиска.Вставить("УпаковкаКоэффициент", 1);
				КонецЕсли;
				
				Прервать;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(РезультатПоиска, ВыборкаПоиска);
		КонецЦикла;
	КонецЕсли;
	
	Возврат РезультатПоиска;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииЗаписиЗагружаемыхДанных

Функция ЗаписатьПродажиСОтложеннымПереходомПраваСобственности(ТаблицаДанных, ДанныеУчетнойЗаписи, ЗагружатьНезаполненныеСтроки, 
			ПараметрыПрогресса)
	
	Результат = ИнтеграцияСМаркетплейсамиСервер.РезультатЗаписиЗагружаемыхДанных();
	Результат.Служебное = Новый Массив;
	
	КодОшибки                 = "ЯндексМаркет_ЗаписатьПродажиСОтложеннымПереходомПраваСобственности";
	СобытиеЖурналаРегистрации = ИнтеграцияСЯндексМаркетСервер.СобытиеЖурналаРегистрации();
	
	ТекстЗапроса = ТекстЗапросаПродажиСОтложеннымПереходомПраваСобственности(Истина);
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ВидТорговойПлощадки",             Перечисления.ВидыМаркетплейсов.МаркетплейсЯндексМаркет);
	ПараметрыЗаполнения.Вставить("УчетнаяЗапись",                   ДанныеУчетнойЗаписи.УчетнаяЗапись);
	ПараметрыЗаполнения.Вставить("ВалютаУчета",                     Неопределено);
	ПараметрыЗаполнения.Вставить("Организация",                     ДанныеУчетнойЗаписи.Организация);
	ПараметрыЗаполнения.Вставить("Партнер",                         ДанныеУчетнойЗаписи.РозничныйПартнер);
	ПараметрыЗаполнения.Вставить("Контрагент",                      ДанныеУчетнойЗаписи.РозничныйКонтрагент);
	ПараметрыЗаполнения.Вставить("Соглашение",                      ДанныеУчетнойЗаписи.СоглашениеРеализация);
	ПараметрыЗаполнения.Вставить("Договор",                         ДанныеУчетнойЗаписи.ДоговорРеализация);
	ПараметрыЗаполнения.Вставить("СкладВШапке",                     ДанныеУчетнойЗаписи.СкладОтгрузки);
	ПараметрыЗаполнения.Вставить("ПерезаписатьСклад",               Истина);
	ПараметрыЗаполнения.Вставить("КодОшибки",                       КодОшибки);
	ПараметрыЗаполнения.Вставить("СобытиеЖурналаРегистрации",       СобытиеЖурналаРегистрации);
	ПараметрыЗаполнения.Вставить("ЗагружатьНезаполненныеСтроки",    ЗагружатьНезаполненныеСтроки);
	ПараметрыЗаполнения.Вставить("ПерезаписатьДокументы",           Истина);
	ПараметрыЗаполнения.Вставить("ОчиститьТабличныеЧасти",          Истина);
	ПараметрыЗаполнения.Вставить("ПараметрыОбработкиРеализация",    Неопределено);
	ПараметрыЗаполнения.Вставить("ПараметрыОбработкиКорректировка", Неопределено);
	ПараметрыЗаполнения.Вставить("ВыполнитьКорректировкуПоСумме",   Ложь);
	ПараметрыЗаполнения.Вставить("ТекстЗапроса",                    ТекстЗапроса);
	
	ПараметрыПрогресса.ШагИтерацииВПроцентах = 30;
	ПараметрыПрогресса.ПрогрессВыполнения    = 60;
	
	Ошибка = ИнтеграцияСМаркетплейсамиСервер.ЗаписатьПродажиСОтложеннымПереходомПраваСобственности(
		Результат,
		ТаблицаДанных,
		ПараметрыЗаполнения,
		ПараметрыПрогресса);
	
	Если ЗначениеЗаполнено(Ошибка.КодОшибки) Тогда
		Результат.ОписаниеОшибки = Результат.ОписаниеОшибки 
			+ ?(ЗначениеЗаполнено(Результат.ОписаниеОшибки), Символы.ПС, "")
			+ Ошибка.ОписаниеОшибки;
	КонецЕсли;
	
	Если ТипЗнч(Ошибка.Детализация) = Тип("Массив") Тогда
		Результат.ОписаниеОшибки = Результат.ОписаниеОшибки 
			+ ?(ЗначениеЗаполнено(Результат.ОписаниеОшибки), Символы.ПС, "")
			+ СтрСоединить(Ошибка.Детализация, Символы.ПС);
	КонецЕсли;
	
	// 
	ТекстЗапроса = ТекстЗапросаВзаимозачетыЗадолженности(Истина);
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ВидТорговойПлощадки",       Перечисления.ВидыМаркетплейсов.МаркетплейсЯндексМаркет);
	ПараметрыЗаполнения.Вставить("УчетнаяЗапись",             ДанныеУчетнойЗаписи.УчетнаяЗапись);
	ПараметрыЗаполнения.Вставить("ВалютаУчета",               Неопределено);
	ПараметрыЗаполнения.Вставить("Организация",               ДанныеУчетнойЗаписи.Организация);
	ПараметрыЗаполнения.Вставить("Партнер",                   ДанныеУчетнойЗаписи.Партнер);
	ПараметрыЗаполнения.Вставить("Контрагент",                ДанныеУчетнойЗаписи.Контрагент);
	ПараметрыЗаполнения.Вставить("Соглашение",                Неопределено);
	ПараметрыЗаполнения.Вставить("Договор",                   ДанныеУчетнойЗаписи.ДоговорВзаимозачеты);
	ПараметрыЗаполнения.Вставить("КодОшибки",                 КодОшибки);
	ПараметрыЗаполнения.Вставить("СобытиеЖурналаРегистрации", СобытиеЖурналаРегистрации);
	ПараметрыЗаполнения.Вставить("ПерезаписатьДокументы",     Истина);
	ПараметрыЗаполнения.Вставить("ОчиститьТабличныеЧасти",    Истина);
	ПараметрыЗаполнения.Вставить("ТекстЗапроса",              ТекстЗапроса);
	ПараметрыЗаполнения.Вставить("ИсключаемыеОбъекты",        Результат.Служебное);
	
	ПараметрыПрогресса.ШагИтерацииВПроцентах = 10;
	ПараметрыПрогресса.ПрогрессВыполнения    = 90;
	
	Ошибка = ИнтеграцияСМаркетплейсамиСервер.ЗаписатьВзаимозачетыЗадолженности(
		Результат,
		ПараметрыЗаполнения,
		ПараметрыПрогресса);
	
	Если ЗначениеЗаполнено(Ошибка.КодОшибки) Тогда
		Результат.ОписаниеОшибки = Результат.ОписаниеОшибки 
			+ ?(ЗначениеЗаполнено(Результат.ОписаниеОшибки), Символы.ПС, "")
			+ Ошибка.ОписаниеОшибки;
	КонецЕсли;
	
	Если ТипЗнч(Ошибка.Детализация) = Тип("Массив") Тогда
		Результат.ОписаниеОшибки = Результат.ОписаниеОшибки 
			+ ?(ЗначениеЗаполнено(Результат.ОписаниеОшибки), Символы.ПС, "")
			+ СтрСоединить(Ошибка.Детализация, Символы.ПС);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаПродажиСОтложеннымПереходомПраваСобственности(Знач ДокументыНеПомеченныеНаУдаление = Ложь)
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаДанных.ТипОперации КАК ТипОперации,
		|	ТаблицаДанных.НомерСтроки КАК НомерСтроки,
		|	ТаблицаДанных.НомерЗаказа КАК НомерОтправления,
		|	НАЧАЛОПЕРИОДА(ТаблицаДанных.ДатаОформленияЗаказа, ДЕНЬ) КАК ДатаОтправления,
		|	КОНЕЦПЕРИОДА(ТаблицаДанных.ДатаПередачиВДоставку, ДЕНЬ) КАК ДатаПередачиВДоставку,
		|	НАЧАЛОПЕРИОДА(ВЫБОР
		|			КОГДА ТаблицаДанных.ТипОперации = 3
		|				ТОГДА ТаблицаДанных.ДатаНевыкупаВозврата
		|			ИНАЧЕ ТаблицаДанных.ДатаДоставки
		|		КОНЕЦ, ДЕНЬ) КАК ДатаДоставки,
		|	КОНЕЦПЕРИОДА(ТаблицаДанных.ДатаНевыкупаВозврата, ДЕНЬ) КАК ДатаНевыкупаВозврата,
		|	КОНЕЦПЕРИОДА(ВЫБОР
		|			КОГДА ТаблицаДанных.ТипОперации В (1, 2)
		|				ТОГДА ТаблицаДанных.ДатаПередачиВДоставку
		|			ИНАЧЕ ТаблицаДанных.ДатаНевыкупаВозврата
		|		КОНЕЦ, ДЕНЬ) КАК ДатаДокумента,
		|	ТаблицаДанных.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	ТаблицаДанных.ПредставлениеТовара КАК ПредставлениеТовара,
		|	ТаблицаДанных.РезультатСопоставленияСтроки КАК РезультатСопоставленияСтроки,
		|	ТаблицаДанных.Номенклатура КАК Номенклатура,
		|	ТаблицаДанных.ТипНоменклатуры КАК ТипНоменклатуры,
		|	ТаблицаДанных.НоменклатураЕдиницаИзмерения КАК НоменклатураЕдиницаИзмерения,
		|	ТаблицаДанных.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар,
		|	ТаблицаДанных.Характеристика КАК Характеристика,
		|	ТаблицаДанных.ХарактеристикиИспользуются КАК ХарактеристикиИспользуются,
		|	ТаблицаДанных.Упаковка КАК Упаковка,
		|	ТаблицаДанных.УпаковкаКоэффициент КАК УпаковкаКоэффициент,
		|	ВЫБОР
		|		КОГДА ТаблицаДанных.ТипОперации = 1
		|			ТОГДА ТаблицаДанных.КоличествоПередано
		|		КОГДА ТаблицаДанных.ТипОперации = 2
		|			ТОГДА ТаблицаДанных.КоличествоДоставлено
		|		ИНАЧЕ ТаблицаДанных.КоличествоВозврат
		|	КОНЕЦ КАК Количество,
		|	ТаблицаДанных.Цена КАК Цена,
		|	ВЫБОР
		|		КОГДА ТаблицаДанных.ТипОперации В (1, 2)
		|			ТОГДА 1
		|		ИНАЧЕ -1
		|	КОНЕЦ * ТаблицаДанных.Сумма КАК Сумма,
		|	ВЫБОР
		|		КОГДА ТаблицаДанных.ТипОперации В (1, 2)
		|			ТОГДА 1
		|		ИНАЧЕ -1
		|	КОНЕЦ * ТаблицаДанных.СуммаСкидки КАК СуммаСкидки,
		|	ТаблицаДанных.Контрагент КАК Покупатель,
		|	ВЫБОР
		|		КОГДА ТаблицаДанных.ТипОперации В (1, 2)
		|			ТОГДА ТаблицаДанных.НомерУПД
		|		ИНАЧЕ ТаблицаДанных.НомерУКД
		|	КОНЕЦ КАК НомерСчетаФактуры,
		|	ВЫБОР
		|		КОГДА ТаблицаДанных.ТипОперации В (1, 2)
		|			ТОГДА ТаблицаДанных.ДатаУПД
		|		ИНАЧЕ ТаблицаДанных.ДатаУКД
		|	КОНЕЦ КАК ДатаСчетаФактуры,
		|	ТаблицаДанных.ТипОперации = 4
		|		И КОНЕЦПЕРИОДА(ТаблицаДанных.ДатаДоставки, МЕСЯЦ) <> КОНЕЦПЕРИОДА(ТаблицаДанных.ДатаНевыкупаВозврата, МЕСЯЦ) КАК РеализацияДругогоПериода
		|ПОМЕСТИТЬ ВТ_ТаблицаДанных
		|ИЗ
		|	&ТаблицаДанных КАК ТаблицаДанных
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерОтправления,
		|	ДатаОтправления,
		|	ТипОперации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	НАЧАЛОПЕРИОДА(МИНИМУМ(ТаблицаДанных.ДатаДокумента), МЕСЯЦ) КАК НачалоПериода
		|ПОМЕСТИТЬ ВТ_Периоды
		|ИЗ
		|	ВТ_ТаблицаДанных КАК ТаблицаДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументРеализацияТоваровУслуг.Ссылка КАК Ссылка,
		|	ДокументРеализацияТоваровУслуг.Основание КАК Основание,
		|	ДокументРеализацияТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
		|	ДокументРеализацияТоваровУслуг.ОснованиеНомер КАК ОснованиеНомер,
		|	НАЧАЛОПЕРИОДА(ДокументРеализацияТоваровУслуг.ОснованиеДата, ДЕНЬ) КАК ОснованиеДата
		|ПОМЕСТИТЬ ВТ_РеализацияТоваровУслуг
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК ДокументРеализацияТоваровУслуг
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Периоды КАК Периоды
		|		ПО (ДокументРеализацияТоваровУслуг.Дата >= Периоды.НачалоПериода)
		|ГДЕ
		|	ДокументРеализацияТоваровУслуг.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности)
		|	И ДокументРеализацияТоваровУслуг.Организация = &Организация
		|	И ДокументРеализацияТоваровУслуг.Склад = &Склад
		|	И НЕ ДокументРеализацияТоваровУслуг.ПометкаУдаления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОснованиеНомер,
		|	ОснованиеДата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументКорректировкаРеализации.Ссылка КАК Ссылка,
		|	ДокументКорректировкаРеализации.Основание КАК Основание,
		|	ДокументКорректировкаРеализации.ОснованиеНомер КАК ОснованиеНомер,
		|	НАЧАЛОПЕРИОДА(ДокументКорректировкаРеализации.ОснованиеДата, ДЕНЬ) КАК ОснованиеДата
		|ПОМЕСТИТЬ ВТ_КорректировкаРеализации
		|ИЗ
		|	Документ.КорректировкаРеализации КАК ДокументКорректировкаРеализации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Периоды КАК Периоды
		|		ПО (ДокументКорректировкаРеализации.Дата >= Периоды.НачалоПериода)
		|ГДЕ
		|	ДокументКорректировкаРеализации.Организация = &Организация
		|	И ДокументКорректировкаРеализации.Склад = &Склад
		|	И НЕ ДокументКорректировкаРеализации.ПометкаУдаления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОснованиеНомер,
		|	ОснованиеДата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Периоды
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АВТОНОМЕРЗАПИСИ() КАК Индекс,
		|	ТаблицаДанных.ТипОперации КАК ТипОперации,
		|	ТаблицаДанных.НомерСтроки КАК НомерСтроки,
		|	ТаблицаДанных.НомерОтправления КАК НомерОтправления,
		|	ТаблицаДанных.ДатаОтправления КАК ДатаОтправления,
		|	ТаблицаДанных.ДатаПередачиВДоставку КАК ДатаПередачиВДоставку,
		|	ТаблицаДанных.ДатаДоставки КАК ДатаДоставки,
		|	ТаблицаДанных.ДатаНевыкупаВозврата КАК ДатаНевыкупаВозврата,
		|	ТаблицаДанных.ДатаДокумента КАК ДатаДокумента,
		|	ТаблицаДанных.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	ТаблицаДанных.ПредставлениеТовара КАК ПредставлениеТовара,
		|	ТаблицаДанных.РезультатСопоставленияСтроки КАК РезультатСопоставленияСтроки,
		|	ТаблицаДанных.Номенклатура КАК Номенклатура,
		|	ТаблицаДанных.ТипНоменклатуры КАК ТипНоменклатуры,
		|	ТаблицаДанных.НоменклатураЕдиницаИзмерения КАК НоменклатураЕдиницаИзмерения,
		|	ТаблицаДанных.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар,
		|	ТаблицаДанных.Характеристика КАК Характеристика,
		|	ТаблицаДанных.ХарактеристикиИспользуются КАК ХарактеристикиИспользуются,
		|	ТаблицаДанных.Упаковка КАК Упаковка,
		|	ТаблицаДанных.УпаковкаКоэффициент КАК УпаковкаКоэффициент,
		|	ТаблицаДанных.Количество КАК Количество,
		|	ТаблицаДанных.Цена КАК Цена,
		|	ТаблицаДанных.Сумма КАК Сумма,
		|	ТаблицаДанных.СуммаСкидки КАК СуммаСкидки,
		|	ТаблицаДанных.Покупатель КАК Покупатель,
		|	ТаблицаДанных.НомерСчетаФактуры КАК НомерСчетаФактуры,
		|	ТаблицаДанных.ДатаСчетаФактуры КАК ДатаСчетаФактуры,
		|	РеализацияТоваровУслуг.Ссылка КАК РеализацияТоваровУслугСсылка,  
		|	ЕСТЬNULL(РеализацияТоваровУслуг.СуммаДокумента, 0) КАК РеализацияТоваровУслугСумма,
		|	ТаблицаДанных.РеализацияДругогоПериода КАК РеализацияДругогоПериода,
		|	КорректировкаРеализации.Ссылка КАК КорректировкаРеализацииСсылка
		|ПОМЕСТИТЬ ВТ_ИтоговаяТаблицаДанных
		|ИЗ
		|	ВТ_ТаблицаДанных КАК ТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ПО (РеализацияТоваровУслуг.ОснованиеНомер = ТаблицаДанных.НомерОтправления)
		|			И (РеализацияТоваровУслуг.ОснованиеДата = ТаблицаДанных.ДатаОтправления)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КорректировкаРеализации КАК КорректировкаРеализации
		|		ПО (КорректировкаРеализации.ОснованиеНомер = ТаблицаДанных.НомерОтправления)
		|			И (КорректировкаРеализации.ОснованиеДата = ТаблицаДанных.ДатаОтправления)
		|			И (ТаблицаДанных.ТипОперации В (3, 4))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ТаблицаДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_РеализацияТоваровУслуг
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_КорректировкаРеализации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИтоговаяТаблицаДанных.ТипОперации КАК ТипОперации,
		|	ИтоговаяТаблицаДанных.НомерСтроки КАК НомерСтроки,
		|	ИтоговаяТаблицаДанных.НомерОтправления КАК НомерОтправления,
		|	ИтоговаяТаблицаДанных.ДатаОтправления КАК ДатаОтправления,
		|	ИтоговаяТаблицаДанных.ДатаПередачиВДоставку КАК ДатаПередачиВДоставку,
		|	ИтоговаяТаблицаДанных.ДатаДоставки КАК ДатаДоставки,
		|	ИтоговаяТаблицаДанных.ДатаНевыкупаВозврата КАК ДатаНевыкупаВозврата,
		|	ИтоговаяТаблицаДанных.ДатаДокумента КАК ДатаДокумента,
		|	ИтоговаяТаблицаДанных.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	ИтоговаяТаблицаДанных.ПредставлениеТовара КАК ПредставлениеТовара,
		|	ИтоговаяТаблицаДанных.РезультатСопоставленияСтроки КАК РезультатСопоставленияСтроки,
		|	ИтоговаяТаблицаДанных.Номенклатура КАК Номенклатура,
		|	ИтоговаяТаблицаДанных.ТипНоменклатуры КАК ТипНоменклатуры,
		|	ИтоговаяТаблицаДанных.НоменклатураЕдиницаИзмерения КАК НоменклатураЕдиницаИзмерения,
		|	ИтоговаяТаблицаДанных.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар,
		|	ИтоговаяТаблицаДанных.Характеристика КАК Характеристика,
		|	ИтоговаяТаблицаДанных.ХарактеристикиИспользуются КАК ХарактеристикиИспользуются,
		|	ИтоговаяТаблицаДанных.Упаковка КАК Упаковка,
		|	ИтоговаяТаблицаДанных.УпаковкаКоэффициент КАК УпаковкаКоэффициент,
		|	ИтоговаяТаблицаДанных.Количество КАК Количество,
		|	ИтоговаяТаблицаДанных.Цена КАК Цена,
		|	ИтоговаяТаблицаДанных.Сумма КАК Сумма,
		|	ИтоговаяТаблицаДанных.СуммаСкидки КАК СуммаСкидки,
		|	ИтоговаяТаблицаДанных.Покупатель КАК Покупатель,
		|	ИтоговаяТаблицаДанных.НомерСчетаФактуры КАК НомерСчетаФактуры,
		|	ИтоговаяТаблицаДанных.ДатаСчетаФактуры КАК ДатаСчетаФактуры,
		|	ИтоговаяТаблицаДанных.РеализацияТоваровУслугСсылка КАК РеализацияТоваровУслугСсылка,
		|	ИтоговаяТаблицаДанных.РеализацияТоваровУслугСумма КАК РеализацияТоваровУслугСумма,
		|	ИтоговаяТаблицаДанных.РеализацияДругогоПериода КАК РеализацияДругогоПериода,
		|	ИтоговаяТаблицаДанных.КорректировкаРеализацииСсылка КАК КорректировкаРеализацииСсылка
		|ИЗ
		|	ВТ_ИтоговаяТаблицаДанных КАК ИтоговаяТаблицаДанных
		|ГДЕ
		|	(ИтоговаяТаблицаДанных.Индекс, ИСТИНА) В
		|			(ВЫБРАТЬ
		|				МИНИМУМ(ТаблицаДанных.Индекс),
		|				ИСТИНА
		|			ИЗ
		|				ВТ_ИтоговаяТаблицаДанных КАК ТаблицаДанных
		|			ГДЕ
		|				ТаблицаДанных.НомерСтроки = ИтоговаяТаблицаДанных.НомерСтроки)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаДокумента,
		|	ТипОперации,
		|	НомерСтроки
		|ИТОГИ
		|	СУММА(Сумма),
		|	МАКСИМУМ(РеализацияТоваровУслугСсылка),
		|	МАКСИМУМ(РеализацияТоваровУслугСумма),
		|	МАКСИМУМ(КорректировкаРеализацииСсылка)
		|ПО
		|	НомерОтправления,
		|	ДатаДокумента,
		|	ДатаДоставки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ИтоговаяТаблицаДанных";
	
	Если Не ДокументыНеПомеченныеНаУдаление Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И НЕ ДокументРеализацияТоваровУслуг.ПометкаУдаления", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И НЕ ДокументКорректировкаРеализации.ПометкаУдаления", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВзаимозачетыЗадолженности(Знач ДокументыНеПомеченныеНаУдаление = Ложь)
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.ЭтоВозврат КАК ЭтоВозврат,
		|	ВложенныйЗапрос.ДатаДокумента КАК ДатаДокумента,
		|	ВложенныйЗапрос.ОбъектРасчетов КАК ОбъектРасчетов,
		|	ВложенныйЗапрос.Контрагент КАК Контрагент,
		|	СУММА(ВложенныйЗапрос.Сумма) КАК Сумма
		|ПОМЕСТИТЬ ВТ_ОбъектыРасчетов
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЛОЖЬ КАК ЭтоВозврат,
		|		КОНЕЦПЕРИОДА(ДокументРеализацияТоваровУслуг.ДатаПереходаПраваСобственности, МЕСЯЦ) КАК ДатаДокумента,
		|		ДокументРеализацияТоваровУслугТовары.ОбъектРасчетов КАК ОбъектРасчетов,
		|		ДокументРеализацияТоваровУслуг.Контрагент КАК Контрагент,
		|		ДокументРеализацияТоваровУслугТовары.СуммаСНДС КАК Сумма
		|	ИЗ
		|		Документ.РеализацияТоваровУслуг КАК ДокументРеализацияТоваровУслуг
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК ДокументРеализацияТоваровУслугТовары
		|			ПО (ДокументРеализацияТоваровУслугТовары.Ссылка = ДокументРеализацияТоваровУслуг.Ссылка)
		|	ГДЕ
		|		ДокументРеализацияТоваровУслуг.Ссылка В(&ЗагруженныеОбъекты)
		|		И ДокументРеализацияТоваровУслуг.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.Отгружено)
		|		И НЕ ДокументРеализацияТоваровУслуг.ПометкаУдаления
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА КОНЕЦПЕРИОДА(ДокументРеализацияТоваровУслуг.ДатаПереходаПраваСобственности, МЕСЯЦ) = КОНЕЦПЕРИОДА(ДокументКорректировкаРеализации.Дата, МЕСЯЦ)
		|					И ДокументКорректировкаРеализации.Комментарий ПОДОБНО &КомментарийНевыкупТоваров
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ,
		|		КОНЕЦПЕРИОДА(ДокументКорректировкаРеализации.Дата, МЕСЯЦ),
		|		ДокументКорректировкаРеализацииРасхождения.ОбъектРасчетов,
		|		ДокументКорректировкаРеализации.Контрагент КАК Контрагент,
		|		ДокументКорректировкаРеализацииРасхождения.СуммаСНДС
		|	ИЗ
		|		Документ.КорректировкаРеализации КАК ДокументКорректировкаРеализации
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации.Расхождения КАК ДокументКорректировкаРеализацииРасхождения
		|			ПО (ДокументКорректировкаРеализацииРасхождения.Ссылка = ДокументКорректировкаРеализации.Ссылка)
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК ДокументРеализацияТоваровУслуг
		|			ПО (ДокументРеализацияТоваровУслуг.Ссылка = ДокументКорректировкаРеализации.ДокументОснование)
		|	ГДЕ
		|		ДокументКорректировкаРеализации.Ссылка В(&ЗагруженныеОбъекты)
		|		И НЕ ДокументКорректировкаРеализации.ПометкаУдаления
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЛОЖЬ,
		|		КОНЕЦПЕРИОДА(ДокументРеализацияТоваровУслуг.ДатаПереходаПраваСобственности, МЕСЯЦ),
		|		ДокументРеализацияТоваровУслугТовары.ОбъектРасчетов,
		|		ДокументРеализацияТоваровУслуг.Контрагент КАК Контрагент,
		|		-ДокументРеализацияТоваровУслугТовары.СуммаСНДС
		|	ИЗ
		|		Документ.КорректировкаРеализации КАК ДокументКорректировкаРеализации
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК ДокументРеализацияТоваровУслуг
		|			ПО (ДокументРеализацияТоваровУслуг.Ссылка = ДокументКорректировкаРеализации.ДокументОснование)
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК ДокументРеализацияТоваровУслугТовары
		|			ПО (ДокументРеализацияТоваровУслугТовары.Ссылка = ДокументРеализацияТоваровУслуг.Ссылка)
		|	ГДЕ
		|		ДокументКорректировкаРеализации.Ссылка В(&ЗагруженныеОбъекты)
		|		И НЕ ДокументКорректировкаРеализации.ПометкаУдаления
		|		И ДокументРеализацияТоваровУслуг.Ссылка В(&ИсключаемыеОбъекты)
		|		И ДокументРеализацияТоваровУслуг.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.Отгружено)
		|		И НЕ ДокументРеализацияТоваровУслуг.ПометкаУдаления) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.ЭтоВозврат,
		|	ВложенныйЗапрос.ДатаДокумента,
		|	ВложенныйЗапрос.ОбъектРасчетов,
		|	ВложенныйЗапрос.Контрагент
		|
		|ИМЕЮЩИЕ
		|	СУММА(ВложенныйЗапрос.Сумма) <> 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДатаДокумента,
		|	ЭтоВозврат
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументВзаимозачетЗадолженности.Ссылка КАК Ссылка,
		|	ДокументВзаимозачетЗадолженности.Дата КАК Дата,
		|	ДокументВзаимозачетЗадолженности.КонтрагентДебитор КАК КонтрагентДебитор,
		|	ДокументВзаимозачетЗадолженности.КонтрагентКредитор КАК КонтрагентКредитор
		|ПОМЕСТИТЬ ВТ_ВзаимозачетЗадолженности
		|ИЗ
		|	ВТ_ОбъектыРасчетов КАК ОбъектыРасчетов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВзаимозачетЗадолженности КАК ДокументВзаимозачетЗадолженности
		|		ПО (ДокументВзаимозачетЗадолженности.Дата = ОбъектыРасчетов.ДатаДокумента)
		|ГДЕ
		|	ДокументВзаимозачетЗадолженности.Организация = &Организация
		|	И ДокументВзаимозачетЗадолженности.Комментарий ПОДОБНО &КомментарийОформлениеВзаимозачета
		|	И НЕ ДокументВзаимозачетЗадолженности.ПометкаУдаления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АВТОНОМЕРЗАПИСИ() КАК Индекс,
		|	ОбъектыРасчетов.ЭтоВозврат КАК ЭтоВозврат,
		|	ОбъектыРасчетов.ДатаДокумента КАК ДатаДокумента,
		|	ОбъектыРасчетов.ОбъектРасчетов КАК ОбъектРасчетов,
		|	СправочникОбъектыРасчетов.Организация КАК Организация,
		|	СправочникОбъектыРасчетов.Партнер КАК Партнер,
		|	ЕСТЬNULL(СправочникОбъектыРасчетов.Контрагент, ОбъектыРасчетов.Контрагент) КАК Контрагент,
		|	СправочникОбъектыРасчетов.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ВЫБОР
		|		КОГДА ОбъектыРасчетов.ЭтоВозврат
		|			ТОГДА -1
		|		ИНАЧЕ 1
		|	КОНЕЦ * ОбъектыРасчетов.Сумма КАК Сумма,
		|	ВЫБОР
		|		КОГДА ОбъектыРасчетов.ЭтоВозврат
		|			ТОГДА -1
		|		ИНАЧЕ 1
		|	КОНЕЦ * ОбъектыРасчетов.Сумма КАК СуммаВзаиморасчетов,
		|	ВзаимозачетЗадолженности.Ссылка КАК ВзаимозачетЗадолженностиСсылка
		|ПОМЕСТИТЬ ВТ_Результат
		|ИЗ
		|	ВТ_ОбъектыРасчетов КАК ОбъектыРасчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК СправочникОбъектыРасчетов
		|		ПО (СправочникОбъектыРасчетов.Ссылка = ОбъектыРасчетов.ОбъектРасчетов)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВзаимозачетЗадолженности КАК ВзаимозачетЗадолженности
		|		ПО (ВзаимозачетЗадолженности.Дата = ОбъектыРасчетов.ДатаДокумента)
		|			И (ВЫБОР
		|				КОГДА ОбъектыРасчетов.ЭтоВозврат
		|					ТОГДА ВзаимозачетЗадолженности.КонтрагентДебитор
		|				ИНАЧЕ ВзаимозачетЗадолженности.КонтрагентКредитор
		|			КОНЕЦ = &Контрагент)
		|			И (ВЫБОР
		|				КОГДА ОбъектыРасчетов.ЭтоВозврат
		|					ТОГДА ВзаимозачетЗадолженности.КонтрагентКредитор
		|				ИНАЧЕ ВзаимозачетЗадолженности.КонтрагентДебитор
		|			КОНЕЦ = ЕСТЬNULL(СправочникОбъектыРасчетов.Контрагент, ОбъектыРасчетов.Контрагент))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЭтоВозврат,
		|	ДатаДокумента,
		|	ОбъектРасчетов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ОбъектыРасчетов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Результат.ЭтоВозврат КАК ЭтоВозврат,
		|	Результат.ДатаДокумента КАК ДатаДокумента,
		|	Результат.ОбъектРасчетов КАК ОбъектРасчетов,
		|	Результат.Организация КАК Организация,
		|	Результат.Партнер КАК Партнер,
		|	Результат.Контрагент КАК Контрагент,
		|	Результат.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	Результат.Сумма КАК Сумма,
		|	Результат.Сумма КАК СуммаВзаиморасчетов,
		|	&ТипРасчетов КАК ТипРасчетов,
		|	Результат.ВзаимозачетЗадолженностиСсылка КАК ВзаимозачетЗадолженностиСсылка
		|ИЗ
		|	ВТ_Результат КАК Результат
		|ГДЕ
		|	(Результат.Индекс, ИСТИНА) В
		|			(ВЫБРАТЬ
		|				МИНИМУМ(ТаблицаДанных.Индекс),
		|				ИСТИНА
		|			ИЗ
		|				ВТ_Результат КАК ТаблицаДанных
		|			ГДЕ
		|				ТаблицаДанных.ЭтоВозврат = Результат.ЭтоВозврат
		|				И ТаблицаДанных.ДатаДокумента = Результат.ДатаДокумента
		|				И ТаблицаДанных.ОбъектРасчетов = Результат.ОбъектРасчетов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаДокумента
		|ИТОГИ ПО
		|	ДатаДокумента,
		|	Контрагент,
		|	ЭтоВозврат
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Результат";
	
	Если Не ДокументыНеПомеченныеНаУдаление Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И НЕ ДокументВзаимозачетЗадолженности.ПометкаУдаления", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ЗаписатьПродажиЧерезКомиссионера(ТаблицаДанных, ДанныеУчетнойЗаписи, ЗагружатьНезаполненныеСтроки, 
			ПараметрыПрогресса)
	
	Результат = ИнтеграцияСМаркетплейсамиСервер.РезультатЗаписиЗагружаемыхДанных();
	Результат.Служебное = Новый Массив;
	
	КодОшибки                 = "ЯндексМаркет_ЗаписатьПродажиЧерезКомиссионера";
	СобытиеЖурналаРегистрации = ИнтеграцияСЯндексМаркетСервер.СобытиеЖурналаРегистрации();
	
	ТекстЗапроса = ТекстЗапросаПродажиЧерезКомиссионера(Истина);
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ВидТорговойПлощадки",            Перечисления.ВидыМаркетплейсов.МаркетплейсЯндексМаркет);
	ПараметрыЗаполнения.Вставить("УчетнаяЗапись",                  ДанныеУчетнойЗаписи.УчетнаяЗапись);
	ПараметрыЗаполнения.Вставить("ВалютаУчета",                    Неопределено);
	ПараметрыЗаполнения.Вставить("Организация",                    ДанныеУчетнойЗаписи.Организация);
	ПараметрыЗаполнения.Вставить("Партнер",                        ДанныеУчетнойЗаписи.Партнер);
	ПараметрыЗаполнения.Вставить("Контрагент",                     ДанныеУчетнойЗаписи.Контрагент);
	ПараметрыЗаполнения.Вставить("Соглашение",                     ДанныеУчетнойЗаписи.СоглашениеКомиссия);
	ПараметрыЗаполнения.Вставить("Договор",                        ДанныеУчетнойЗаписи.ДоговорКомиссия);
	ПараметрыЗаполнения.Вставить("НомерВходящегоДокумента",        "");
	ПараметрыЗаполнения.Вставить("ДатаВходящегоДокумента",         Дата(1, 1, 1));
	ПараметрыЗаполнения.Вставить("НачалоПериода",                  Неопределено);
	ПараметрыЗаполнения.Вставить("КонецПериода",                   Неопределено);
	ПараметрыЗаполнения.Вставить("УслугаПродажиЧерезКомиссионера", Неопределено);
	ПараметрыЗаполнения.Вставить("КодОшибки",                      КодОшибки);
	ПараметрыЗаполнения.Вставить("СобытиеЖурналаРегистрации",      СобытиеЖурналаРегистрации);
	ПараметрыЗаполнения.Вставить("ЗагружатьНезаполненныеСтроки",   ЗагружатьНезаполненныеСтроки);
	ПараметрыЗаполнения.Вставить("ПерезаписатьДокументы",          Истина);
	ПараметрыЗаполнения.Вставить("ОчиститьТабличныеЧасти",         Истина);
	ПараметрыЗаполнения.Вставить("ПараметрыОбработки",             Неопределено);
	ПараметрыЗаполнения.Вставить("ТекстЗапроса",                   ТекстЗапроса);
	
	Ошибка = ИнтеграцияСМаркетплейсамиСервер.ЗаписатьПродажиЧерезКомиссионера(
		Результат,
		ТаблицаДанных,
		ПараметрыЗаполнения,
		ПараметрыПрогресса);
	
	Если ЗначениеЗаполнено(Ошибка.КодОшибки) Тогда
		Результат.ОписаниеОшибки = Результат.ОписаниеОшибки 
			+ ?(ЗначениеЗаполнено(Результат.ОписаниеОшибки), Символы.ПС, "")
			+ Ошибка.ОписаниеОшибки;
	КонецЕсли;
	
	Если ТипЗнч(Ошибка.Детализация) = Тип("Массив") Тогда
		Результат.ОписаниеОшибки = Результат.ОписаниеОшибки 
			+ ?(ЗначениеЗаполнено(Результат.ОписаниеОшибки), Символы.ПС, "")
			+ СтрСоединить(Ошибка.Детализация, Символы.ПС);
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции  

Функция ТекстЗапросаПродажиЧерезКомиссионера(Знач ДокументыНеПомеченныеНаУдаление = Ложь)
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаДанных.ТипОперации КАК ТипОперации,
		|	ТаблицаДанных.НомерСтроки КАК НомерСтроки,
		|	ТаблицаДанных.НомерЗаказа КАК НомерОтправления,
		|	НАЧАЛОПЕРИОДА(ТаблицаДанных.ДатаОформленияЗаказа, ДЕНЬ) КАК ДатаОтправления,
		|	КОНЕЦПЕРИОДА(ВЫБОР
		|			КОГДА ТаблицаДанных.ТипОперации = 2
		|				ТОГДА ТаблицаДанных.ДатаДоставки
		|			ИНАЧЕ ТаблицаДанных.ДатаНевыкупаВозврата
		|		КОНЕЦ, ДЕНЬ) КАК ДатаДокумента,
		|	НАЧАЛОПЕРИОДА(ВЫБОР
		|			КОГДА ТаблицаДанных.ТипОперации = 2
		|				ТОГДА ТаблицаДанных.ДатаДоставки
		|			ИНАЧЕ ТаблицаДанных.ДатаНевыкупаВозврата
		|		КОНЕЦ, МЕСЯЦ) КАК НачалоПериода,
		|	КОНЕЦПЕРИОДА(ВЫБОР
		|			КОГДА ТаблицаДанных.ТипОперации = 2
		|				ТОГДА ТаблицаДанных.ДатаДоставки
		|			ИНАЧЕ ТаблицаДанных.ДатаНевыкупаВозврата
		|		КОНЕЦ, МЕСЯЦ) КАК КонецПериода,
		|	ТаблицаДанных.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	ТаблицаДанных.ПредставлениеТовара КАК ПредставлениеТовара,
		|	ТаблицаДанных.РезультатСопоставленияСтроки КАК РезультатСопоставленияСтроки,
		|	ТаблицаДанных.Номенклатура КАК Номенклатура,
		|	ТаблицаДанных.ТипНоменклатуры КАК ТипНоменклатуры,
		|	ТаблицаДанных.НоменклатураЕдиницаИзмерения КАК НоменклатураЕдиницаИзмерения,
		|	ТаблицаДанных.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар,
		|	ТаблицаДанных.Характеристика КАК Характеристика,
		|	ТаблицаДанных.ХарактеристикиИспользуются КАК ХарактеристикиИспользуются,
		|	ТаблицаДанных.Упаковка КАК Упаковка,
		|	ТаблицаДанных.УпаковкаКоэффициент КАК УпаковкаКоэффициент,
		|	ВЫБОР
		|		КОГДА ТаблицаДанных.ТипОперации = 2
		|			ТОГДА ТаблицаДанных.КоличествоДоставлено
		|		ИНАЧЕ -ТаблицаДанных.КоличествоВозврат
		|	КОНЕЦ КАК Количество,
		|	ТаблицаДанных.Цена КАК Цена,
		|	ТаблицаДанных.Сумма КАК Сумма,
		|	ТаблицаДанных.СуммаСкидки КАК СуммаСкидки,
		|	ТаблицаДанных.Контрагент КАК Покупатель,
		|	ВЫБОР
		|		КОГДА ТаблицаДанных.ТипОперации = 2
		|			ТОГДА ТаблицаДанных.НомерУПД
		|		ИНАЧЕ ТаблицаДанных.НомерУКД
		|	КОНЕЦ КАК НомерСчетаФактуры,
		|	ВЫБОР
		|		КОГДА ТаблицаДанных.ТипОперации = 2
		|			ТОГДА ТаблицаДанных.ДатаУПД
		|		ИНАЧЕ ТаблицаДанных.ДатаУКД
		|	КОНЕЦ КАК ДатаСчетаФактуры
		|ПОМЕСТИТЬ ВТ_ИсходнаяТаблицаДанных
		|ИЗ
		|	&ТаблицаДанных КАК ТаблицаДанных
		|ГДЕ
		|	ТаблицаДанных.ТипОперации <> 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДанных.ТипОперации КАК ТипОперации,
		|	ТаблицаДанных.НомерСтроки КАК НомерСтроки,
		|	ТаблицаДанных.НомерОтправления КАК НомерОтправления,
		|	ТаблицаДанных.ДатаОтправления КАК ДатаОтправления,
		|	ТаблицаДанных.ДатаДокумента КАК ДатаДокумента,
		|	ТаблицаДанных.НачалоПериода КАК НачалоПериода,
		|	ТаблицаДанных.КонецПериода КАК КонецПериода,
		|	ТаблицаДанных.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	ТаблицаДанных.ПредставлениеТовара КАК ПредставлениеТовара,
		|	ТаблицаДанных.РезультатСопоставленияСтроки КАК РезультатСопоставленияСтроки,
		|	ТаблицаДанных.Номенклатура КАК Номенклатура,
		|	ТаблицаДанных.ТипНоменклатуры КАК ТипНоменклатуры,
		|	ТаблицаДанных.НоменклатураЕдиницаИзмерения КАК НоменклатураЕдиницаИзмерения,
		|	ТаблицаДанных.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар,
		|	ТаблицаДанных.Характеристика КАК Характеристика,
		|	ТаблицаДанных.ХарактеристикиИспользуются КАК ХарактеристикиИспользуются,
		|	ТаблицаДанных.Упаковка КАК Упаковка,
		|	ТаблицаДанных.УпаковкаКоэффициент КАК УпаковкаКоэффициент,
		|	ТаблицаДанных.Количество КАК Количество,
		|	ТаблицаДанных.Цена КАК Цена,
		|	ТаблицаДанных.Сумма КАК Сумма,
		|	ТаблицаДанных.СуммаСкидки КАК СуммаСкидки,
		|	ТаблицаДанных.Покупатель КАК Покупатель,
		|	ТаблицаДанных.НомерСчетаФактуры КАК НомерСчетаФактуры,
		|	ТаблицаДанных.ДатаСчетаФактуры КАК ДатаСчетаФактуры
		|ПОМЕСТИТЬ ВТ_ТаблицаДанных
		|ИЗ
		|	ВТ_ИсходнаяТаблицаДанных КАК ТаблицаДанных
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДанных.ТипОперации КАК ТипОперации,
		|	ТаблицаДанных.НомерСтроки + &КоличествоСтрок КАК НомерСтроки,
		|	ТаблицаДанных.НомерОтправления КАК НомерОтправления,
		|	ТаблицаДанных.ДатаОтправления КАК ДатаОтправления,
		|	ТаблицаДанных.ДатаДокумента КАК ДатаДокумента,
		|	ТаблицаДанных.НачалоПериода КАК НачалоПериода,
		|	ТаблицаДанных.КонецПериода КАК КонецПериода,
		|	ТаблицаДанных.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	ТаблицаДанных.ПредставлениеТовара КАК ПредставлениеТовара,
		|	ТаблицаДанных.РезультатСопоставленияСтроки КАК РезультатСопоставленияСтроки,
		|	ТаблицаДанных.Номенклатура КАК Номенклатура,
		|	ТаблицаДанных.ТипНоменклатуры КАК ТипНоменклатуры,
		|	ТаблицаДанных.НоменклатураЕдиницаИзмерения КАК НоменклатураЕдиницаИзмерения,
		|	ТаблицаДанных.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар,
		|	ТаблицаДанных.Характеристика КАК Характеристика,
		|	ТаблицаДанных.ХарактеристикиИспользуются КАК ХарактеристикиИспользуются,
		|	ТаблицаДанных.Упаковка КАК Упаковка,
		|	ТаблицаДанных.УпаковкаКоэффициент КАК УпаковкаКоэффициент,
		|	-ТаблицаДанных.Количество КАК Количество,
		|	ТаблицаДанных.Цена КАК Цена,
		|	-ТаблицаДанных.Сумма КАК Сумма,
		|	-ТаблицаДанных.СуммаСкидки КАК СуммаСкидки,
		|	ТаблицаДанных.Покупатель КАК Покупатель,
		|	ТаблицаДанных.НомерСчетаФактуры КАК НомерСчетаФактуры,
		|	ТаблицаДанных.ДатаСчетаФактуры КАК ДатаСчетаФактуры
		|ИЗ
		|	ВТ_ИсходнаяТаблицаДанных КАК ТаблицаДанных
		|ГДЕ
		|	ТаблицаДанных.ТипОперации = 3
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДатаДокумента,
		|	НачалоПериода,
		|	КонецПериода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ИсходнаяТаблицаДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	НАЧАЛОПЕРИОДА(МИНИМУМ(ТаблицаДанных.ДатаДокумента), МЕСЯЦ) КАК НачалоПериода
		|ПОМЕСТИТЬ ВТ_Периоды
		|ИЗ
		|	ВТ_ТаблицаДанных КАК ТаблицаДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументОтчетКомиссионера.Ссылка КАК Ссылка,
		|	КОНЕЦПЕРИОДА(ДокументОтчетКомиссионера.Дата, ДЕНЬ) КАК Дата,
		|	НАЧАЛОПЕРИОДА(ДокументОтчетКомиссионера.НачалоПериода, МЕСЯЦ) КАК НачалоПериода,
		|	КОНЕЦПЕРИОДА(ДокументОтчетКомиссионера.КонецПериода, МЕСЯЦ) КАК КонецПериода
		|ПОМЕСТИТЬ ВТ_ОтчетКомиссионера
		|ИЗ
		|	Документ.ОтчетКомиссионера КАК ДокументОтчетКомиссионера
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Периоды КАК Периоды
		|		ПО (ДокументОтчетКомиссионера.Дата >= Периоды.НачалоПериода)
		|ГДЕ
		|	ДокументОтчетКомиссионера.Организация = &Организация
		|	И ДокументОтчетКомиссионера.Партнер = &Партнер
		|	И ДокументОтчетКомиссионера.Контрагент = &Контрагент
		|	И ДокументОтчетКомиссионера.Соглашение = &Соглашение
		|	И ДокументОтчетКомиссионера.Договор = &Договор
		|	И НЕ ДокументОтчетКомиссионера.ПометкаУдаления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Дата,
		|	НачалоПериода,
		|	КонецПериода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Периоды
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АВТОНОМЕРЗАПИСИ() КАК Индекс,
		|	ТаблицаДанных.ТипОперации КАК ТипОперации,
		|	ТаблицаДанных.НомерСтроки КАК НомерСтроки,
		|	ТаблицаДанных.НомерОтправления КАК НомерОтправления,
		|	ТаблицаДанных.ДатаОтправления КАК ДатаОтправления,
		|	ТаблицаДанных.ДатаДокумента КАК ДатаДокумента,
		|	ТаблицаДанных.НачалоПериода КАК НачалоПериода,
		|	ТаблицаДанных.КонецПериода КАК КонецПериода,
		|	ТаблицаДанных.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	ТаблицаДанных.ПредставлениеТовара КАК ПредставлениеТовара,
		|	ТаблицаДанных.РезультатСопоставленияСтроки КАК РезультатСопоставленияСтроки,
		|	ТаблицаДанных.Номенклатура КАК Номенклатура,
		|	ТаблицаДанных.ТипНоменклатуры КАК ТипНоменклатуры,
		|	ТаблицаДанных.НоменклатураЕдиницаИзмерения КАК НоменклатураЕдиницаИзмерения,
		|	ТаблицаДанных.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар,
		|	ТаблицаДанных.Характеристика КАК Характеристика,
		|	ТаблицаДанных.ХарактеристикиИспользуются КАК ХарактеристикиИспользуются,
		|	ТаблицаДанных.Упаковка КАК Упаковка,
		|	ТаблицаДанных.УпаковкаКоэффициент КАК УпаковкаКоэффициент,
		|	ТаблицаДанных.Количество КАК Количество,
		|	ТаблицаДанных.Цена КАК Цена,
		|	ТаблицаДанных.Сумма КАК Сумма,
		|	ТаблицаДанных.СуммаСкидки КАК СуммаСкидки,
		|	ТаблицаДанных.Покупатель КАК Покупатель,
		|	ТаблицаДанных.НомерСчетаФактуры КАК НомерСчетаФактуры,
		|	ТаблицаДанных.ДатаСчетаФактуры КАК ДатаСчетаФактуры,
		|	ОтчетКомиссионера.Ссылка КАК ОтчетКомиссионераСсылка
		|ПОМЕСТИТЬ ВТ_ИтоговаяТаблицаДанных
		|ИЗ
		|	ВТ_ТаблицаДанных КАК ТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОтчетКомиссионера КАК ОтчетКомиссионера
		|		ПО ОтчетКомиссионера.Дата = ТаблицаДанных.ДатаДокумента
		|			И ОтчетКомиссионера.НачалоПериода = ТаблицаДанных.НачалоПериода
		|			И ОтчетКомиссионера.КонецПериода = ТаблицаДанных.КонецПериода
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ТаблицаДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ОтчетКомиссионера
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИтоговаяТаблицаДанных.ТипОперации КАК ТипОперации,
		|	ИтоговаяТаблицаДанных.НомерСтроки КАК НомерСтроки,
		|	ИтоговаяТаблицаДанных.НомерОтправления КАК НомерОтправления,
		|	ИтоговаяТаблицаДанных.ДатаОтправления КАК ДатаОтправления,
		|	ИтоговаяТаблицаДанных.ДатаДокумента КАК ДатаДокумента,
		|	ИтоговаяТаблицаДанных.НачалоПериода КАК НачалоПериода,
		|	ИтоговаяТаблицаДанных.КонецПериода КАК КонецПериода,
		|	ИтоговаяТаблицаДанных.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	ИтоговаяТаблицаДанных.ПредставлениеТовара КАК ПредставлениеТовара,
		|	ИтоговаяТаблицаДанных.РезультатСопоставленияСтроки КАК РезультатСопоставленияСтроки,
		|	ИтоговаяТаблицаДанных.Номенклатура КАК Номенклатура,
		|	ИтоговаяТаблицаДанных.ТипНоменклатуры КАК ТипНоменклатуры,
		|	ИтоговаяТаблицаДанных.НоменклатураЕдиницаИзмерения КАК НоменклатураЕдиницаИзмерения,
		|	ИтоговаяТаблицаДанных.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар,
		|	ИтоговаяТаблицаДанных.Характеристика КАК Характеристика,
		|	ИтоговаяТаблицаДанных.ХарактеристикиИспользуются КАК ХарактеристикиИспользуются,
		|	ИтоговаяТаблицаДанных.Упаковка КАК Упаковка,
		|	ИтоговаяТаблицаДанных.УпаковкаКоэффициент КАК УпаковкаКоэффициент,
		|	ИтоговаяТаблицаДанных.Количество КАК Количество,
		|	ИтоговаяТаблицаДанных.Цена КАК Цена,
		|	ИтоговаяТаблицаДанных.Цена КАК ЦенаПродажи,
		|	ИтоговаяТаблицаДанных.Сумма КАК Сумма,
		|	ИтоговаяТаблицаДанных.Сумма КАК СуммаПродажи,
		|	ИтоговаяТаблицаДанных.СуммаСкидки КАК СуммаСкидки,
		|	0 КАК СуммаВознаграждения,
		|	ИтоговаяТаблицаДанных.Покупатель КАК Покупатель,
		|	ИтоговаяТаблицаДанных.НомерСчетаФактуры КАК НомерСчетаФактуры,
		|	ИтоговаяТаблицаДанных.ДатаСчетаФактуры КАК ДатаСчетаФактуры,
		|	&Договор КАК Договор,
		|	ИтоговаяТаблицаДанных.ОтчетКомиссионераСсылка КАК ОтчетКомиссионераСсылка
		|ИЗ
		|	ВТ_ИтоговаяТаблицаДанных КАК ИтоговаяТаблицаДанных
		|ГДЕ
		|	(ИтоговаяТаблицаДанных.Индекс, ИСТИНА) В
		|			(ВЫБРАТЬ
		|				МИНИМУМ(ТаблицаДанных.Индекс),
		|				ИСТИНА
		|			ИЗ
		|				ВТ_ИтоговаяТаблицаДанных КАК ТаблицаДанных
		|			ГДЕ
		|				ТаблицаДанных.НомерСтроки = ИтоговаяТаблицаДанных.НомерСтроки)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаДокумента,
		|	НачалоПериода,
		|	НомерСтроки
		|ИТОГИ ПО
		|	ДатаДокумента,
		|	НачалоПериода,
		|	Договор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ИтоговаяТаблицаДанных";
	
	Если Не ДокументыНеПомеченныеНаУдаление Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И НЕ ДокументОтчетКомиссионера.ПометкаУдаления", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ПодключаемыеОбработчикиСобытий

// Изменяет поведение элементов формы.
// Можно установить фиксированные отборы, значения реквизитов формы и т.п.
//
// Параметры:
//   Форма              - ФормаКлиентскогоПриложения - форма, в которой требуется обработать событие.
//   ЗначенияПараметров - Структура - значения параметров, заданных пользователем через дополнительную форму.
//
Процедура Подключаемый_ИзменитьПоведениеЭлементовФормы(Форма, ЗначенияПараметров) Экспорт
	
	Элементы = Форма.Элементы;
	
	Если Форма.ИмяТабличнойЧасти = "ДанныеОРеализованныхТоварах" Тогда
		// Тип операции
		Элемент = Элементы["ТаблицаСопоставленияДанных_ТипОперации"];
		Элемент.СписокВыбора.Очистить();
		Элемент.СписокВыбора.Добавить(1, "Передано");
		Элемент.СписокВыбора.Добавить(2, "Доставлено");
		Элемент.СписокВыбора.Добавить(3, "Невыкуп");
		Элемент.СписокВыбора.Добавить(4, "Возврат");
		Элемент.АвтоОтметкаНезаполненного = Истина;
		Элемент.ГоризонтальноеПоложение   = ГоризонтальноеПоложениеЭлемента.Лево;
		Элемент.РежимВыбораИзСписка       = Истина;
		Элемент.Ширина                    = 14;
		
		// Характеристика
		Элемент = Элементы["ТаблицаСопоставленияДанных_Характеристика"];
		Элемент.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
		
		// Упаковка
		Элемент = Элементы["ТаблицаСопоставленияДанных_Упаковка"];
		Элемент.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
		Элемент.Ширина    = 11;
		
		// Количество
		Элемент = Элементы["ТаблицаСопоставленияДанных_Количество"];
		Элемент.АвтоОтметкаНезаполненного = Истина;
		Элемент.ВыделятьОтрицательные     = Истина;
		Элемент.Ширина                    = 10;
		
		// Количество переданных в доставку
		Элемент = Элементы["ТаблицаСопоставленияДанных_КоличествоПередано"];
		Элемент.АвтоОтметкаНезаполненного = Истина;
		Элемент.МинимальноеЗначение       = 0;
		
		// Количество доставленных
		Элемент = Элементы["ТаблицаСопоставленияДанных_КоличествоДоставлено"];
		Элемент.МинимальноеЗначение = 0;
		
		// Количество невыкупленных (возвращенных)
		Элемент = Элементы["ТаблицаСопоставленияДанных_КоличествоВозврат"];
		Элемент.МинимальноеЗначение = 0;
		
		Элемент = Элементы["ТаблицаСопоставленияДанных_ФЛ_КоличествоВозврат"];
		Элемент.Заголовок = НСтр("ru = 'Из файла: Не выкуплено (возвращено)'");
		
		// Цена
		Элемент = Элементы["ТаблицаСопоставленияДанных_Цена"];
		Элемент.АвтоОтметкаНезаполненного = Истина;
		Элемент.ВыделятьОтрицательные     = Истина;
		Элемент.Ширина                    = 10;
		
		// Сумма
		Элемент = Элементы["ТаблицаСопоставленияДанных_Сумма"];
		Элемент.АвтоОтметкаНезаполненного = Истина;
		Элемент.ВыделятьОтрицательные     = Истина;
		Элемент.Ширина                    = 10;
		
		Элемент = Элементы["ТаблицаСопоставленияДанных_ФЛ_Сумма"];
		Элемент.Заголовок = НСтр("ru = 'Из файла: Стоимость с НДС с учетом всех скидок'");
		
		// Сумма скидки
		Элемент = Элементы["ТаблицаСопоставленияДанных_СуммаСкидки"];
		Элемент.ВыделятьОтрицательные = Истина;
		Элемент.Ширина                = 10;
		
		Элемент = Элементы["ТаблицаСопоставленияДанных_ФЛ_СуммаСкидки"];
		Элемент.Заголовок = НСтр("ru = 'Из файла: Стоимость всех скидок'");
		
		// Номер заказа
		Элемент = Элементы["ТаблицаСопоставленияДанных_НомерЗаказа"];
		Элемент.АвтоОтметкаНезаполненного = Истина;
		
		// Дата оформления заказа
		Элемент = Элементы["ТаблицаСопоставленияДанных_ДатаОформленияЗаказа"];
		Элемент.АвтоОтметкаНезаполненного = Истина;
		
		// Дата передачи в доставку
		Элемент = Элементы["ТаблицаСопоставленияДанных_ДатаПередачиВДоставку"];
		Элемент.АвтоОтметкаНезаполненного = Истина;
		
		// Дата приема невыкупа (возврата)
		Элемент = Элементы["ТаблицаСопоставленияДанных_ФЛ_ДатаНевыкупаВозврата"];
		Элемент.Заголовок = НСтр("ru = 'Из файла: Дата приема невыкупа (возврата) складом'");
	КонецЕсли;
	
КонецПроцедуры

// Выполняет обработку события изменения значения поля.
//
// Параметры:
//   Форма               - ФормаКлиентскогоПриложения - форма, в которой требуется обработать событие.
//   ИмяПоля             - Строка - имя поля, изменение которого обрабатывается.
//   ИдентификаторСтроки - Число - идентификатор текущей обрабатываемой строки.
//
Процедура Подключаемый_ПолеПриИзменении(Форма, ИмяПоля, ИдентификаторСтроки) Экспорт
	
	ТекущиеДанные = Форма.ТаблицаСопоставленияДанных.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	// Обработка события в зависимости от полного имени объекта метаданных, для которого вызывается обработчик
	Если Форма.ИмяТабличнойЧасти = "ДанныеОРеализованныхТоварах" Тогда
		Если ИмяПоля = "ТипОперации" Тогда
			Если Не ЗначениеЗаполнено(ТекущиеДанные.ТипОперации) Тогда
				ТекущиеДанные.ТипОперации = 1;
			КонецЕсли;
			
			Если ((ТекущиеДанные.ТипОперации = 1 Или ТекущиеДанные.ТипОперации = 2)
						И ТекущиеДанные.Количество < 0)
					Или ((ТекущиеДанные.ТипОперации = 3 Или ТекущиеДанные.ТипОперации = 4)
							И ТекущиеДанные.Количество > 0) Тогда
				ТекущиеДанные.Количество  = -ТекущиеДанные.Количество;
				ТекущиеДанные.Сумма       = -ТекущиеДанные.Сумма;
				ТекущиеДанные.СуммаСкидки = -ТекущиеДанные.СуммаСкидки;
			КонецЕсли;
			
		ИначеЕсли ИмяПоля = "Номенклатура" 
					Или ИмяПоля = "Характеристика" 
					Или ИмяПоля = "Упаковка" Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторПубликации КАК ИдентификаторПубликации,
				|	СтатусыПубликацииТоваровЯндексМаркет.ПредставлениеТовара КАК ПредставлениеТовара
				|ИЗ
				|	РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет
				|ГДЕ
				|	СтатусыПубликацииТоваровЯндексМаркет.УчетнаяЗапись = &УчетнаяЗапись
				|	И СтатусыПубликацииТоваровЯндексМаркет.Номенклатура = &Номенклатура
				|	И СтатусыПубликацииТоваровЯндексМаркет.Характеристика = &Характеристика
				|	И СтатусыПубликацииТоваровЯндексМаркет.Упаковка = &Упаковка";
			
			Запрос.УстановитьПараметр("УчетнаяЗапись",  Форма.УчетнаяЗапись);
			Запрос.УстановитьПараметр("Номенклатура",   ТекущиеДанные.Номенклатура);
			Запрос.УстановитьПараметр("Характеристика", ТекущиеДанные.Характеристика);
			Запрос.УстановитьПараметр("Упаковка",       ТекущиеДанные.Упаковка);
			
			ВыборкаРезультата = Запрос.Выполнить().Выбрать();
			
			Если ВыборкаРезультата.Следующий() Тогда
				ЗаполнитьЗначенияСвойств(ТекущиеДанные, ВыборкаРезультата);
			КонецЕсли;
		
			Если ИмяПоля = "Номенклатура" Тогда
				НоменклатураПриИзменении(Форма, ТекущиеДанные);
			КонецЕсли;
	
			Если ИмяПоля = "Номенклатура" Или ИмяПоля = "Упаковка" Тогда
				Если ЗначениеЗаполнено(ТекущиеДанные.Упаковка) Тогда
					ТекущиеДанные.УпаковкаКоэффициент = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(
						ТекущиеДанные.Упаковка,
						ТекущиеДанные.Номенклатура);
				Иначе
					ТекущиеДанные.УпаковкаКоэффициент = 1;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоля = "ИдентификаторПубликации" Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	СтатусыПубликацииТоваровЯндексМаркет.Номенклатура КАК Номенклатура,
				|	СтатусыПубликацииТоваровЯндексМаркет.Характеристика КАК Характеристика,
				|	СтатусыПубликацииТоваровЯндексМаркет.Упаковка КАК Упаковка,
				|	СтатусыПубликацииТоваровЯндексМаркет.ПредставлениеТовара КАК ПредставлениеТовара
				|ИЗ
				|	РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет
				|ГДЕ
				|	СтатусыПубликацииТоваровЯндексМаркет.УчетнаяЗапись = &УчетнаяЗапись
				|	И СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторПубликации = &ИдентификаторПубликации";
			
			Запрос.УстановитьПараметр("УчетнаяЗапись",           Форма.УчетнаяЗапись);
			Запрос.УстановитьПараметр("ИдентификаторПубликации", ТекущиеДанные[ИмяПоля]);
			
			ВыборкаРезультата = Запрос.Выполнить().Выбрать();
			
			Если ВыборкаРезультата.Следующий() Тогда
				ЗаполнитьЗначенияСвойств(ТекущиеДанные, ВыборкаРезультата);
				
			Иначе                                          
				ТекущиеДанные.ПредставлениеТовара = "";
				ТекущиеДанные.Номенклатура        = Справочники.Номенклатура.ПустаяСсылка();
				ТекущиеДанные.Характеристика      = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
				ТекущиеДанные.Упаковка            = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
			КонецЕсли;
			
			НоменклатураПриИзменении(Форма, ТекущиеДанные);
		
		ИначеЕсли ИмяПоля = "Количество" Тогда
			Если ((ТекущиеДанные.ТипОперации = 1 Или ТекущиеДанные.ТипОперации = 2)
						И ТекущиеДанные.Количество < 0)
					Или ((ТекущиеДанные.ТипОперации = 3 Или ТекущиеДанные.ТипОперации = 4)
							И ТекущиеДанные.Количество > 0) Тогда
				ТекущиеДанные.Количество = -ТекущиеДанные.Количество;
			КонецЕсли;
			
			Если ТекущиеДанные.ТипОперации = 1 Тогда
				ТекущиеДанные.КоличествоПередано = ТекущиеДанные.Количество;
			ИначеЕсли ТекущиеДанные.ТипОперации = 2 Тогда
				ТекущиеДанные.КоличествоДоставлено = ТекущиеДанные.Количество;
			ИначеЕсли ТекущиеДанные.ТипОперации = 3 Или ТекущиеДанные.ТипОперации = 4 Тогда
				ТекущиеДанные.КоличествоВозврат = -ТекущиеДанные.Количество;
			КонецЕсли;
			
			ТекущиеДанные.Сумма = ТекущиеДанные.Количество * ТекущиеДанные.Цена;
		
		ИначеЕсли ИмяПоля = "КоличествоПередано" Тогда
			Если ТекущиеДанные.ТипОперации = 1 Тогда
				ТекущиеДанные.Количество = ТекущиеДанные.КоличествоПередано;
				ТекущиеДанные.Сумма      = ТекущиеДанные.Количество * ТекущиеДанные.Цена;
			КонецЕсли;
		
		ИначеЕсли ИмяПоля = "КоличествоДоставлено" Тогда
			Если ТекущиеДанные.ТипОперации = 2 Тогда
				ТекущиеДанные.Количество = ТекущиеДанные.КоличествоДоставлено;
				ТекущиеДанные.Сумма      = ТекущиеДанные.Количество * ТекущиеДанные.Цена;
			КонецЕсли;
		
		ИначеЕсли ИмяПоля = "КоличествоВозврат" Тогда
			Если ТекущиеДанные.ТипОперации = 3 Или ТекущиеДанные.ТипОперации = 4 Тогда
				ТекущиеДанные.Количество = -ТекущиеДанные.КоличествоВозврат;
				ТекущиеДанные.Сумма      = ТекущиеДанные.Количество * ТекущиеДанные.Цена;
			КонецЕсли;
		
		ИначеЕсли ИмяПоля = "Цена" Тогда
			ТекущиеДанные.Сумма = ТекущиеДанные.Количество * ТекущиеДанные.Цена;
		
		ИначеЕсли ИмяПоля = "Сумма" Тогда
			Если ((ТекущиеДанные.ТипОперации = 1 Или ТекущиеДанные.ТипОперации = 2)
						И ТекущиеДанные.Сумма < 0)
					Или ((ТекущиеДанные.ТипОперации = 3 Или ТекущиеДанные.ТипОперации = 4)
							И ТекущиеДанные.Сумма > 0) Тогда
				ТекущиеДанные.Сумма = -ТекущиеДанные.Сумма;
			КонецЕсли;
			
			ТекущиеДанные.Цена = Окр(?(ТекущиеДанные.Количество = 0, 
				0, 
				ТекущиеДанные.Сумма / ТекущиеДанные.Количество), 2, РежимОкругления.Окр15как20);
		
		ИначеЕсли ИмяПоля = "СуммаСкидки" Тогда
			Если ((ТекущиеДанные.ТипОперации = 1 Или ТекущиеДанные.ТипОперации = 2)
						И ТекущиеДанные.СуммаСкидки < 0)
					Или ((ТекущиеДанные.ТипОперации = 3 Или ТекущиеДанные.ТипОперации = 4)
							И ТекущиеДанные.СуммаСкидки > 0) Тогда
				ТекущиеДанные.СуммаСкидки = -ТекущиеДанные.СуммаСкидки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Процедура НоменклатураПриИзменении(Форма, ТекущиеДанные)
	
	ТекущиеДанные.Служебный = "";
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры",          Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти", 
																				Форма.ИмяФормы, "ТаблицаСопоставленияДанных"));
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу",       ТекущиеДанные.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу",    ТекущиеДанные.Упаковка);
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущиеДанные, 
		СтруктураДействий, 
		КэшированныеЗначения);
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ТипНоменклатуры) Тогда
		ТекущиеДанные.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
	КонецЕсли;
	
	ТекущиеДанные.НоменклатураЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, 
		"ЕдиницаИзмерения");
	
	ДобавитьПроверкуЗаполненияХарактеристики(Форма, ТекущиеДанные);
	
	ИнтеграцияСМаркетплейсамиКлиентСервер.ЗаполнитьРезультатСопоставленияСтроки(ТекущиеДанные,
		Форма.КолонкиОбязательныеПриПроверке,
		Форма.КолонкиДополнительныеПриПроверке);
		
	Если ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторПубликации)
			И ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		Для Каждого СтрокаТаблицыЗначений Из Форма.ТаблицаСопоставленияДанных Цикл
			Если СтрокаТаблицыЗначений.ИдентификаторПубликации = ТекущиеДанные.ИдентификаторПубликации
					И Не ЗначениеЗаполнено(СтрокаТаблицыЗначений.Номенклатура) Тогда
				СтрокаТаблицыЗначений.Номенклатура                 = ТекущиеДанные.Номенклатура;
				СтрокаТаблицыЗначений.ТипНоменклатуры              = ТекущиеДанные.ТипНоменклатуры;
				СтрокаТаблицыЗначений.НоменклатураЕдиницаИзмерения = ТекущиеДанные.НоменклатураЕдиницаИзмерения;
				СтрокаТаблицыЗначений.ХарактеристикиИспользуются   = ТекущиеДанные.ХарактеристикиИспользуются;
				СтрокаТаблицыЗначений.РезультатСопоставленияСтроки = ТекущиеДанные.РезультатСопоставленияСтроки;
				СтрокаТаблицыЗначений.ОписаниеОшибки               = ТекущиеДанные.ОписаниеОшибки;
				СтрокаТаблицыЗначений.СтрокаОбработана             = ТекущиеДанные.СтрокаОбработана;
				СтрокаТаблицыЗначений.Служебный                    = ТекущиеДанные.Служебный;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПроверкуЗаполненияХарактеристики(Форма, Знач ТекущиеДанные)
	
	Если ТипЗнч(ТекущиеДанные) = Тип("СтрокаТаблицыЗначений") Тогда
		ДанныеСтроки  = ТекущиеДанные;
		ТекущиеДанные = Новый Структура("ХарактеристикиИспользуются", Ложь);
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
	КонецЕсли;
	
	Если ТекущиеДанные.Свойство("ХарактеристикиИспользуются") Тогда
		Колонка        = Форма.КолонкиДополнительныеПриПроверке.НайтиПоЗначению("Характеристика");
		УдалитьКолонку = (Колонка <> Неопределено);
		
		Если ТекущиеДанные.ХарактеристикиИспользуются Тогда
			Если Колонка = Неопределено Тогда
				Форма.КолонкиДополнительныеПриПроверке.Добавить("Характеристика");
			КонецЕсли;
			УдалитьКолонку = Ложь;
		КонецЕсли;
		
		Если УдалитьКолонку Тогда
			Форма.КолонкиДополнительныеПриПроверке.Удалить(Колонка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Разбивает строку на несколько строк, используя заданный набор разделителей.
// Если параметр РазделителиСлов не задан, то разделителем слов считается любой из символов, 
// не относящихся к символам латиницы, кириллицы, цифры, подчеркивания.
//
// Параметры:
//   Значение        - Строка - исходная строка, которую необходимо разложить на слова.
//   РазделителиСлов - Строка - перечень символов-разделителей. Например, ".,;".
//
// Возвращаемое значение:
//   Массив Из Строка - список слов.
//
// Пример:
//   СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов("один-@#два2_!три") возвратит массив значений: "один",
//   "два2_", "три"; СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов("один-@#два2_!три", "#@!_") возвратит массив
//   значений: "один-", "два2", "три".
//
Функция РазложитьСтрокуВМассивСлов(Знач Значение, РазделителиСлов = Неопределено)
	
	Слова = Новый Массив;
	
	РазмерТекста = СтрДлина(Значение);
	НачалоСлова = 1;
	Для Позиция = 1 По РазмерТекста Цикл
		Если ИнтеграцияСМаркетплейсамиПовтИсп.ЭтоРазделительСлов(Сред(Значение, Позиция, 1), РазделителиСлов) Тогда
			Если Позиция <> НачалоСлова Тогда
				Слова.Добавить(Сред(Значение, НачалоСлова, Позиция - НачалоСлова));
			КонецЕсли;
			НачалоСлова = Позиция + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если Позиция <> НачалоСлова Тогда
		Слова.Добавить(Сред(Значение, НачалоСлова, Позиция - НачалоСлова));
	КонецЕсли;
	
	Возврат Слова;
	
КонецФункции

#КонецОбласти

#КонецЕсли
