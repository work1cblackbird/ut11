#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция РезультатПроверкиДокументаНаСоответствиеТребованиямГИСМТ(ПараметрыПроверки) Экспорт
	
	Документ = ПараметрыПроверки.Документ;
	
	Если Не ТипДокументаПоддерживается(Документ) Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Документ %1 не поддерживается'"), Документ);
	КонецЕсли;
	
	Если ПроверкаИПодборПродукцииИСМПКлиентСервер.ЭтоЧекККМ(Документ)
		Или ПроверкаИПодборПродукцииИСМПКлиентСервер.ЭтоЧекККМВозврат(Документ) Тогда
		
		Результат = РезультатПроверкиЧекаНаСоответствиеТребованиямГИСМТ(ПараметрыПроверки);
		
	Иначе
		ЭтоДокументПриобретения = ПроверкаИПодборПродукцииИСМПКлиентСервер.ЭтоДокументПриобретения(Документ);
		ПараметрыПроверки.Вставить("ЭтоДокументПриобретения", ЭтоДокументПриобретения);
		
		Результат = РезультатПроверкиНаСоответствиеТребованиямГИСМТ(ПараметрыПроверки);
		
	КонецЕсли;
	
	Если ПараметрыПроверки.Свойство("ДополнитьРезультатДаннымиКомандыФормы") Тогда
		ДополнитьРезультатДаннымиКомандыФормы(Результат);
	КонецЕсли;
	
	ДополнитьРезультатЕстьОшибки(Результат);
	
	Возврат Результат;
	
КонецФункции

Функция ОшибкиКвитанции(ПараметрыОбработки) Экспорт
	
	ЗаполнитьРезультатыПроверокПоСпискуОперацийГИСМТ(ПараметрыОбработки);
	
	ИтоговыйРезультат = СформироватьИтоговыйРезультатПоИтогамПроверокДокументаВСервисеГИСМТ(ПараметрыОбработки);
	
	Возврат ИтоговыйРезультат;
	
КонецФункции

Функция ПроверкаДокументаНаСоответствиеТребованиямГИСМТ(ПараметрыПроверки) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	ВозвращаемоеЗначение.Вставить("РезультатПроверки",              Неопределено);
	ВозвращаемоеЗначение.Вставить("Документ",                       ПараметрыПроверки.Документ);
	ВозвращаемоеЗначение.Вставить("Организация",                    Неопределено);
	ВозвращаемоеЗначение.Вставить("Контрагент",                     Неопределено);
	ВозвращаемоеЗначение.Вставить("АдресВоВременномХранилище",      Неопределено);
	ВозвращаемоеЗначение.Вставить("ДлительнаяОперация",             Неопределено);
	ВозвращаемоеЗначение.Вставить("Ожидать",                        Неопределено);
	
	Если ПараметрыПроверки.Свойство("ЭтоФоноваяПроверкаДокумента") И ПараметрыПроверки.ЭтоФоноваяПроверкаДокумента Тогда
		
		АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено, ПараметрыПроверки.УникальныйИдентификатор);
		
		НаименованиеФоновогоЗадания = НСтр("ru = 'Проверка документа на соответствие требованиям ГИС МТ'");
		
		ПараметрыФоновогоЗадания = Новый Структура;
		ПараметрыФоновогоЗадания.Вставить("ПараметрыПроверки", ПараметрыПроверки);
		ПараметрыФоновогоЗадания.Вставить("ПараметрыСеансаИС", ИнтеграцияИСМПСлужебный.ПараметрыСеансаИС());
		ПараметрыФоновогоЗадания.Вставить("ПараметрыЛогированияЗапросовИСМП", ПараметрыСеанса.ПараметрыЛогированияЗапросовИСМП);
		
		ПараметрыМетода = Новый Массив;
		ПараметрыМетода.Добавить(ПараметрыФоновогоЗадания);
		ПараметрыМетода.Добавить(АдресРезультата);
		
		ФоновоеЗадание = Новый Структура;
		ФоновоеЗадание.Вставить("Статус",                       "Выполняется");
		ФоновоеЗадание.Вставить("ИдентификаторЗадания",         Неопределено);
		ФоновоеЗадание.Вставить("АдресРезультата",              АдресРезультата);
		ФоновоеЗадание.Вставить("КраткоеПредставлениеОшибки",   "");
		ФоновоеЗадание.Вставить("ПодробноеПредставлениеОшибки", "");
		
		ВозвращаемоеЗначение.ДлительнаяОперация = ФоновоеЗадание;
		
		УстановитьОтключениеБезопасногоРежима(Истина);
		Попытка
			Задание = ФоновыеЗадания.Выполнить(
				"СоответствиеТребованиямГИСМТ.РезультатПроверкиДокументаНаСоответствиеТребованиямГИСМТИзФоновогоЗадания",
				ПараметрыМетода,
				Строка(ПараметрыПроверки.УникальныйИдентификатор),
				НаименованиеФоновогоЗадания);
			Исключение
				ФоновоеЗадание.Статус = "Ошибка";
				Если Задание <> Неопределено И Задание.ИнформацияОбОшибке <> Неопределено Тогда
					ФоновоеЗадание.КраткоеПредставлениеОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(
						Задание.ИнформацияОбОшибке);
					ФоновоеЗадание.ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(
						Задание.ИнформацияОбОшибке);
				Иначе
					ФоновоеЗадание.КраткоеПредставлениеОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(
						ИнформацияОбОшибке());
					ФоновоеЗадание.ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(
						ИнформацияОбОшибке());
				КонецЕсли;
				Возврат ВозвращаемоеЗначение;
			КонецПопытки;
		УстановитьОтключениеБезопасногоРежима(Ложь);
		
		Если Задание <> Неопределено И Задание.ИнформацияОбОшибке <> Неопределено Тогда
			ФоновоеЗадание.Статус = "Ошибка";
			ФоновоеЗадание.КраткоеПредставлениеОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(Задание.ИнформацияОбОшибке);
			ФоновоеЗадание.ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(Задание.ИнформацияОбОшибке);
			Возврат ВозвращаемоеЗначение;
		КонецЕсли;
		
		ФоновоеЗадание.ИдентификаторЗадания = Задание.УникальныйИдентификатор;
		
	ИначеЕсли ИнтеграцияИС.РежимРаботыБезФоновыхЗаданий() Или ОбщегоНазначения.РежимОтладки() Тогда
		
		ВозвращаемоеЗначение = РезультатПроверкиДокументаНаСоответствиеТребованиямГИСМТ(ПараметрыПроверки);
		
	Иначе
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ПараметрыПроверки.УникальныйИдентификатор);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Проверка документа на соответствие требованиям ГИС МТ'");
		
		ПараметрыФоновогоЗадания = Новый Структура;
		ПараметрыФоновогоЗадания.Вставить("ПараметрыПроверки", ПараметрыПроверки);
		ПараметрыФоновогоЗадания.Вставить("ПараметрыСеансаИС", ИнтеграцияИСМПСлужебный.ПараметрыСеансаИС());
		ПараметрыФоновогоЗадания.Вставить("ПараметрыЛогированияЗапросовИСМП", ПараметрыСеанса.ПараметрыЛогированияЗапросовИСМП);
		
		ВозвращаемоеЗначение.ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
			"Обработки.ПроверкаДокументовИСМП.РезультатПроверкиДокументаНаСоответствиеТребованиямГИСМТИзФоновогоЗадания",
			ПараметрыФоновогоЗадания, ПараметрыВыполнения);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура РезультатПроверкиДокументаНаСоответствиеТребованиямГИСМТИзФоновогоЗадания(ПараметрыФоновогоЗадания, АдресРезультата) Экспорт
	
	ПараметрыПроверки = ПараметрыФоновогоЗадания.ПараметрыПроверки;
	ПараметрыСеансаИС = ПараметрыФоновогоЗадания.ПараметрыСеансаИС;
	
	Если ПараметрыСеансаИС.ДанныеКлючаСессииИСМП <> Неопределено Тогда
		ПараметрыСеанса.ДанныеКлючаСессииИСМП = ПараметрыСеансаИС.ДанныеКлючаСессииИСМП;
	КонецЕсли;
	
	Если ПараметрыФоновогоЗадания.Свойство("ПараметрыЛогированияЗапросовИСМП") Тогда
		
		ЛогированиеЗапросовИСМП.УстановитьПараметрыЛогированияЗапросов(ПараметрыФоновогоЗадания.ПараметрыЛогированияЗапросовИСМП);
		ЛогированиеЗапросовИС.НастроитьПараметрыЛогированияВФоновомЗадании(ПараметрыФоновогоЗадания.ПараметрыЛогированияЗапросовИСМП);
		
	КонецЕсли;
	
	ВозвращаемоеЗначение = РезультатПроверкиДокументаНаСоответствиеТребованиямГИСМТ(ПараметрыПроверки);
	
	ЛогированиеЗапросовИСМП.ЗаполнитьВозвращаемыеДанныеФоновогоЗадания(ВозвращаемоеЗначение);
	
	ПоместитьВоВременноеХранилище(ВозвращаемоеЗначение, АдресРезультата);
	
КонецПроцедуры

Функция СформироватьИтоговыйРезультатПоИтогамПроверокДокументаВСервисеГИСМТ(ПараметрыОбработки) Экспорт
	
	РезультатПроверок = Новый Структура;
	РезультатПроверок.Вставить("Статус",     Неопределено); // перечисление
	РезультатПроверок.Вставить("Состояние",  Неопределено); // строка
	РезультатПроверок.Вставить("Результаты", Неопределено); // структура
	
	ПроверкиСОшибкамиПроцесса = Новый Массив;       // содержит ИдентификаторПроверки
	РезультатыПроверок        = Новый Соответствие; // ИдентификаторПроверки и Результат
	
	ИтоговыйСтатус = Перечисления.СтатусыОбработкиДокументовИСМП.ЗавершеноСОшибкой;
	
	ОшибкиОперацийПоДокументу = ПараметрыОбработки.РезультатыПроверок;
	
	ДанныеПоШтрихкодам = ОшибкиОперацийПоДокументу["ДанныеПоШтрихкодам"];
	КоличествоШтрихкодовСОшибками = ДанныеПоШтрихкодам["ДанныеПоОшибкамШтрихкода"].Количество();
	
	ОбщиеОшибки = ОшибкиОперацийПоДокументу["ОбщиеОшибки"];
	
	КодыОшибок = Новый Массив;
	
	Результаты = Новый Структура;
	Результаты.Вставить("ПроверкиСОшибкамиПроцесса", ПроверкиСОшибкамиПроцесса);
	Результаты.Вставить("РезультатыПроверок",        РезультатыПроверок);
	
	Результаты.Вставить("ДатаПоследнейОшибки",       ОшибкиОперацийПоДокументу["ДатаПоследнейОшибки"]);
	
	Если ОбщиеОшибки.Количество() > 0 Тогда
		
		КодыОбщихОшибок = Новый СписокЗначений;
		Для Каждого КлючЗначение Из ОбщиеОшибки Цикл
			КодыОбщихОшибок.Добавить(КлючЗначение.Ключ);
		КонецЦикла;
		КодыОбщихОшибок.СортироватьПоЗначению();
		
		КодыОшибок = КодыОбщихОшибок.ВыгрузитьЗначения();
		
		ПредставлениеОшибкиПоВыбраннойПроверке = ОшибкиОперацийПоДокументу["ОбщиеОшибки"].Получить(КодыОбщихОшибок[0].Значение);
		
	Иначе
		
		ПредставлениеОшибкиПоВыбраннойПроверке = СтрШаблон(
			НСтр("ru = 'Есть коды маркировки с ошибками (%1)'"),
			КоличествоШтрихкодовСОшибками);
		
	КонецЕсли;
	
	Для Каждого КодОшибки Из КодыОшибок Цикл
		ИдентификаторПроверки = СтрШаблон("КодОшибкиГИСМТ%1", Формат(КодОшибки, "ЧЦ=4; ЧВН=; ЧГ=0"));
		ПроверкиСОшибкамиПроцесса.Добавить(ИдентификаторПроверки);
		РезультатыПроверок[ИдентификаторПроверки] = ОшибкиОперацийПоДокументу["ОбщиеОшибки"][КодОшибки];
	КонецЦикла;
	
	Если КоличествоШтрихкодовСОшибками > 0 Тогда
		ИдентификаторПроверки = ПараметрыОбработки.ИдентификаторыПроверок.НаличиеОшибокВКодахМаркировки;
		ПроверкиСОшибкамиПроцесса.Добавить(ИдентификаторПроверки);
		РезультатыПроверок[ИдентификаторПроверки] = ДанныеПоШтрихкодам.ДанныеПоОшибкамШтрихкода;
	КонецЕсли;
	
	Для Каждого ОшибкаШтрихкода Из ДанныеПоШтрихкодам["ДанныеПоОшибкамШтрихкода"] Цикл
		КодыОшибок.Добавить(ОшибкаШтрихкода.КодОшибки);
	КонецЦикла;
	
	Результаты.Вставить("КодыОшибок", КодыОшибок);
	
	ТекстСостояния = СформироватьСостояниеПроверок(
		ИтоговыйСтатус, ПредставлениеОшибкиПоВыбраннойПроверке, ПроверкиСОшибкамиПроцесса.Количество());
	
	РезультатПроверок.Статус     = ИтоговыйСтатус;
	РезультатПроверок.Состояние  = ТекстСостояния;
	РезультатПроверок.Результаты = Результаты;
	
	Возврат РезультатПроверок;
	
КонецФункции

Процедура ПроверкаТаймаутаЗагрузкиГИСМТ(СуществующийРезультат) Экспорт
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ТребуетсяОбновлениеКлючаСессии",   Ложь);
	ПараметрыОбработки.Вставить("Документ",                         СуществующийРезультат.Документ);
	ПараметрыОбработки.Вставить("Организация",                      СуществующийРезультат.Организация);
	ПараметрыОбработки.Вставить("Статус",                           Неопределено);
	ПараметрыОбработки.Вставить("СписокОперацийГИСМТ",              Неопределено); // Список операций, связанных с обработкой исходного документа
	ПараметрыОбработки.Вставить("ИдентификаторыПроверок",           СоответствиеТребованиямГИСМТ.ИдентификаторыПроверок());
	ПараметрыОбработки.Вставить("РезультатыПроверок",               Новый Соответствие);
	ПараметрыОбработки.Вставить("СтатусОтправки",                   СуществующийРезультат.СтатусОтправки);
	ПараметрыОбработки.Вставить("Идентификатор",                    СуществующийРезультат.ИдентификаторЭлектронногоДокумента);
	ПараметрыОбработки.Вставить("ДатаОтправкиВГИСМТ",               СуществующийРезультат.ДатаОтправкиВГИСМТ);
	ПараметрыОбработки.Вставить("ВыполненаПредварительнаяПроверка", СуществующийРезультат.ВыполненаПредварительнаяПроверка);
	
	РезультатПроверки = ПроверкаТаймаутаОбработкиГИСМТ(ПараметрыОбработки);
	
	Если РезультатПроверки.ЕстьОшибки Тогда
		
		ИтоговыйРезультат = СформироватьИтоговыйРезультатПоИтогамОтдельныхПроверок(ПараметрыОбработки);
		
		РезультатПроверкиПоДокументу = Новый Структура;
		РезультатПроверкиПоДокументу.Вставить("Документ",            СуществующийРезультат.Документ);
		РезультатПроверкиПоДокументу.Вставить("ИдентификаторЗаписи", СуществующийРезультат.ИдентификаторЗаписи);
		РезультатПроверкиПоДокументу.Вставить("Статус",              ИтоговыйРезультат.Статус);
		РезультатПроверкиПоДокументу.Вставить("Результаты",          Новый ХранилищеЗначения(ИтоговыйРезультат.Результаты));
		РезультатПроверкиПоДокументу.Вставить("Состояние",           ИтоговыйРезультат.Состояние);
		
		СоответствиеТребованиямГИСМТ.ЗафиксироватьРезультатПроверкиНаСоответствиеТребованиямГИСМТ(РезультатПроверкиПоДокументу,, Истина);
		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ФорматЭдоПоТипуДокумента(ТипДокумента)
	
	ДопустимыеФорматы = Новый Соответствие();
	
	Если ТипДокумента = Перечисления.ТипыДокументовГИСМТ.УПД Тогда
		
		ФорматЭДО = "ON_NSCHFDOPPR_1_997_01_05_01";
		НаименованиеФормата = "УПД 2019 (ММВ-7-15/820@)";
		
		ДопустимыеФорматы.Вставить(ФорматЭДО, НаименованиеФормата);
		
		ФорматЭДО = "ON_NSCHFDOPPR_1_997_01_05_02_01";
		НаименованиеФормата = "УПД 5.02 (ЕД-7-26/970@)";
		
		ДопустимыеФорматы.Вставить(ФорматЭДО, НаименованиеФормата);
		
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовГИСМТ.УПДИсправительный Тогда
		
		ФорматЭДО = "ON_NSCHFDOPPR_1_997_01_05_01";
		НаименованиеФормата = "УПД 2019 (ММВ-7-15/820@)";
		
		ДопустимыеФорматы.Вставить(ФорматЭДО, НаименованиеФормата);
		
	Иначе
		
		ФорматЭДО = "ON_NKORSCHFDOPPR_1_996_03_05_01";
		НаименованиеФормата = "УКД (ЕД-7-26/736@)";
		
		ДопустимыеФорматы.Вставить(ФорматЭДО, НаименованиеФормата);
		
	КонецЕсли;
	
	Возврат ДопустимыеФорматы;
	
КонецФункции

Процедура ДополнитьРезультатЕстьОшибки(Результат)
	
	Результат.Вставить("ЕстьОшибки", Ложь);
		
	РезультатПроверкиПоДокументу = Результат.РезультатПроверки;
	
	Если РезультатПроверкиПоДокументу = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтатусыОбработкиДокументовИСМП = Перечисления.СтатусыОбработкиДокументовИСМП;
	Если РезультатПроверкиПоДокументу.Статус = СтатусыОбработкиДокументовИСМП.ЗавершеноСОшибкой
		Или РезультатПроверкиПоДокументу.Статус = СтатусыОбработкиДокументовИСМП.ЗавершеноСПредупреждением
		Или РезультатПроверкиПоДокументу.Статус = СтатусыОбработкиДокументовИСМП.ЗавершеноСОшибкойТаймаута Тогда
		Результат.ЕстьОшибки = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьРезультатДаннымиКомандыФормы(Результат)
	
	РезультатПроверкиПоДокументу = Результат.РезультатПроверки;
	
	Если РезультатПроверкиПоДокументу = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СостояниеКоманды = СоответствиеТребованиямГИСМТ.СостояниеКомандыСоответствиеТребованиямГИСМТ(Результат.Документ,
		РезультатПроверкиПоДокументу);
	
	Результат.Вставить("ТекущееСостояниеКомандыФормы", СостояниеКоманды);
КонецПроцедуры

Функция ТипДокументаПоддерживается(Документ)
	Возврат Метаданные.ОпределяемыеТипы.ПрикладныеДокументыГИСМТ.Тип.СодержитТип(ТипЗнч(Документ));
КонецФункции

Функция РезультатПроверкиЧекаНаСоответствиеТребованиямГИСМТ(ПараметрыПроверки)
	
	РезультатОбработки = Новый Структура;
	РезультатОбработки.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	РезультатОбработки.Вставить("РезультатПроверки",              Неопределено);
	РезультатОбработки.Вставить("Организация",                    Неопределено);
	
	РеквизитыДокумента       = СоответствиеТребованиямГИСМТ.РеквизитыДокумента(ПараметрыПроверки.Документ);
	НастройкиОбменаЭД = ОбменСКонтрагентами.НастройкиОтправки(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыПроверки.Документ))[ПараметрыПроверки.Документ];
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("Документ",                       ПараметрыПроверки.Документ);
	ПараметрыОбработки.Вставить("РеквизитыДокумента",             РеквизитыДокумента);
	ПараметрыОбработки.Вставить("Организация",                    РеквизитыДокумента.Организация);
	ПараметрыОбработки.Вставить("НастройкиОбменаЭД",              НастройкиОбменаЭД);
	ПараметрыОбработки.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	
	РезультатыПроверки = Неопределено;
	
	Если ПараметрыОбработки.ТребуетсяОбновлениеКлючаСессии Тогда
		РезультатОбработки.ТребуетсяОбновлениеКлючаСессии = Истина;
		Возврат РезультатОбработки
	КонецЕсли;
	
	РезультатОбработки.РезультатПроверки = Новый Структура;
	РезультатОбработки.РезультатПроверки.Вставить("Статус",    РезультатыПроверки.Статус);
	РезультатОбработки.РезультатПроверки.Вставить("Состояние", РезультатыПроверки.Состояние);
	
	Возврат РезультатОбработки;
	
КонецФункции

Функция РезультатПроверкиНаСоответствиеТребованиямГИСМТ(ПараметрыПроверки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Документ = ПараметрыПроверки.Документ;
	
	РезультатОбработки = Новый Структура;
	РезультатОбработки.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	РезультатОбработки.Вставить("РезультатПроверки",              Неопределено);
	РезультатОбработки.Вставить("Документ",                       Документ);
	РезультатОбработки.Вставить("Организация",                    Неопределено);
	РезультатОбработки.Вставить("Контрагент",                     Неопределено);
	РезультатОбработки.Вставить("АдресВоВременномХранилище",      Неопределено);
	РезультатОбработки.Вставить("ДлительнаяОперация",             Неопределено);

	РеквизитыДокумента = СоответствиеТребованиямГИСМТ.РеквизитыДокумента(Документ);
	
	РезультатОбработки.Организация = РеквизитыДокумента.Организация;
	РезультатОбработки.Контрагент  = РеквизитыДокумента.Контрагент;
	
	ВозможенЭДО = Метаданные.ОпределяемыеТипы.ОснованияЭлектронныхДокументовЭДО.Тип.СодержитТип(ТипЗнч(Документ));
	
	СтатусЭДО = "";
	ЭлектронныйДокумент = Неопределено;
	
	Если ВозможенЭДО Тогда
		СтатусДокументооборота = ОбменСКонтрагентами.СтатусДокументооборота(Документ);
		
		СтатусЭДО           = СтатусДокументооборота.Статус;
		ЭлектронныйДокумент = СтатусДокументооборота.ЭлектронныйДокумент;
	КонецЕсли;
	
	ИдентификаторЭлектронногоДокумента = Неопределено;
	Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		СведенияОбЭлектронномДокументе = ОбменСКонтрагентами.СведенияОбЭлектронномДокументе(ЭлектронныйДокумент);
		ИдентификаторЭлектронногоДокумента = СведенияОбЭлектронномДокументе.Сообщения.ДанныеОтправителя.ИмяФайлаБезРасширения;
	КонецЕсли;

	РезультатПроверкиПоДокументу = СоответствиеТребованиямГИСМТ.РезультатПроверкиПоДокументу(Документ, ИдентификаторЭлектронногоДокумента);
	
	Если РезультатПроверкиПоДокументу = Неопределено Тогда
		Возврат РезультатОбработки;
	КонецЕсли;
	
	Если РезультатПроверкиПоДокументу.Статус = Перечисления.СтатусыОбработкиДокументовИСМП.Завершено Тогда
		РезультатОбработки.РезультатПроверки = РезультатПроверкиПоДокументу;
		Возврат РезультатОбработки;
	КонецЕсли;
	
	ЗапуститьПовторнуюПроверку = ПараметрыПроверки.Свойство("ЗапуститьПовторнуюПроверку") И ПараметрыПроверки.ЗапуститьПовторнуюПроверку;
	
	Если РезультатПроверкиПоДокументу.Статус = Перечисления.СтатусыОбработкиДокументовИСМП.НеВыполнялось
		Или РезультатПроверкиПоДокументу.Статус = Перечисления.СтатусыОбработкиДокументовИСМП.ЗавершеноСОжиданием
		Или РезультатПроверкиПоДокументу.Статус = Перечисления.СтатусыОбработкиДокументовИСМП.ЗавершеноСОшибкойТаймаута 
		Или ЗапуститьПовторнуюПроверку Тогда
		
		Параметры = Новый Структура;
		Параметры.Вставить("РезультатПроверкиПоДокументу", РезультатПроверкиПоДокументу);
		Параметры.Вставить("РеквизитыДокумента",           РеквизитыДокумента);
		Параметры.Вставить("СтатусЭДО",                    СтатусЭДО);
		
		ПараметрыОбработки = СоответствиеТребованиямГИСМТ.ИнициализироватьПараметрыОбработки(Документ, Параметры);
		
		ПараметрыОбработки.Вставить("СтатусЭДО",                  СтатусЭДО);
		ПараметрыОбработки.Вставить("ЗапуститьПовторнуюПроверку", ЗапуститьПовторнуюПроверку);
		
		Если ПараметрыОбработки.СтатусЭДО <> "Утвержден" Тогда
			ПараметрыОбработки.СтатусОтправки = Перечисления.СтатусОтправкиГИСМТ.НеОтправлен;
		КонецЕсли;
			
		Если РезультатПроверкиПоДокументу.СтатусОтправки <> Перечисления.СтатусОтправкиГИСМТ.НеОтправлен
			И Не ЗапуститьПовторнуюПроверку Тогда
			ЗапроситьСтатусОтправкиИСтатусГИСМТ(ПараметрыОбработки);
			СоответствиеТребованиямГИСМТПереопределяемый.ПослеПроверкиСтатусаГИСМТ(ПараметрыОбработки);
		КонецЕсли;
		
		Если ПараметрыОбработки.ТребуетсяОбновлениеКлючаСессии Тогда
			РезультатОбработки.ТребуетсяОбновлениеКлючаСессии = Истина;
			Возврат РезультатОбработки
		КонецЕсли;
		
		ИтоговыйРезультат = Неопределено;
		
		Если РезультатПроверкиПоДокументу.СтатусОтправки = Перечисления.СтатусОтправкиГИСМТ.ДоставленВГИСМТ
			И ЗапуститьПовторнуюПроверку Тогда
		
			СоответствиеТребованиямГИСМТ.ОтправитьДокументНаПовторнуюОбработку(ПараметрыОбработки);
		
		ИначеЕсли ПараметрыОбработки.СтатусОтправки = Перечисления.СтатусОтправкиГИСМТ.ДоставленВГИСМТ
			И ПараметрыОбработки.Статус = Перечисления.СтатусыДокументовИСМП.ЕстьОшибки Тогда
			
			ЗаполнитьРезультатыПроверокПоСпискуОперацийГИСМТ(ПараметрыОбработки);
			
			ИтоговыйРезультат = СформироватьИтоговыйРезультатПоИтогамПроверокДокументаВСервисеГИСМТ(ПараметрыОбработки);
		
		ИначеЕсли ПараметрыОбработки.СтатусОтправки = Перечисления.СтатусОтправкиГИСМТ.ОжидаетсяПроверкаУПДвГИСМТ Тогда
		
			ПроверкаТаймаутаОбработкиГИСМТ(ПараметрыОбработки);
			
		ИначеЕсли РезультатПроверкиПоДокументу.СтатусОтправки = Перечисления.СтатусОтправкиГИСМТ.НеОтправлен
			Или ЗапуститьПовторнуюПроверку Тогда
			
			ПредварительнаяПроверкаВозможна = ЗначениеЗаполнено(ПараметрыОбработки.Идентификатор)
				И (РезультатПроверкиПоДокументу.ТипДокумента = Перечисления.ТипыДокументовГИСМТ.УПД
				Или РезультатПроверкиПоДокументу.ТипДокумента = Перечисления.ТипыДокументовГИСМТ.УПДИсправительный);
			
			Если ПредварительнаяПроверкаВозможна Тогда
				
				Если (ПараметрыОбработки.ОтправленНаПредварительнуюПроверку
					И Не ПараметрыОбработки.ВыполненаПредварительнаяПроверка)
					Или ЗапуститьПовторнуюПроверку Тогда
					
					СоответствиеТребованиямГИСМТ.ЗагрузитьРезультатПредварительнойПроверкиПоДокументу(ПараметрыОбработки);
					
					Если ПараметрыОбработки.Статус = Перечисления.СтатусыДокументовИСМП.ЕстьОшибки Тогда
						ИтоговыйРезультат = СформироватьИтоговыйРезультатПоИтогамПроверокДокументаВСервисеГИСМТ(ПараметрыОбработки);
					КонецЕсли;
					
				ИначеЕсли Не ПараметрыОбработки.ОтправленНаПредварительнуюПроверку Тогда
					
					СоответствиеТребованиямГИСМТ.ПредварительнаяПроверкаУПДПоДокументу(ПараметрыОбработки);
					
				КонецЕсли;
				
			Иначе
				
				ВыполнитьОтдельныеПроверкиПродавцаИПокупателя(ПараметрыОбработки, ПараметрыПроверки.ЭтоДокументПриобретения);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИтоговыйРезультат = Неопределено Тогда
			ИтоговыйРезультат = СформироватьИтоговыйРезультатПоИтогамОтдельныхПроверок(ПараметрыОбработки);
		КонецЕсли;
			
		Если ПараметрыОбработки.ТребуетсяОбновлениеКлючаСессии Тогда
			РезультатОбработки.ТребуетсяОбновлениеКлючаСессии = Истина;
			Возврат РезультатОбработки
		КонецЕсли;
		
		СуществующийРезультат = РезультатПроверкиПоДокументу;
		
		РезультатПроверкиПоДокументу = Новый Структура;
		РезультатПроверкиПоДокументу.Вставить("Документ",                           Документ);
		РезультатПроверкиПоДокументу.Вставить("ИдентификаторЗаписи",                СуществующийРезультат.ИдентификаторЗаписи);
		РезультатПроверкиПоДокументу.Вставить("Дата",                               РеквизитыДокумента.Дата);
		РезультатПроверкиПоДокументу.Вставить("Организация",                        РеквизитыДокумента.Организация);
		РезультатПроверкиПоДокументу.Вставить("Контрагент",                         РеквизитыДокумента.Контрагент);
		РезультатПроверкиПоДокументу.Вставить("Статус",                             ИтоговыйРезультат.Статус);
		РезультатПроверкиПоДокументу.Вставить("Результаты",                         Новый ХранилищеЗначения(ИтоговыйРезультат.Результаты));
		РезультатПроверкиПоДокументу.Вставить("Состояние",                          ИтоговыйРезультат.Состояние);
		РезультатПроверкиПоДокументу.Вставить("ХешСуммаДокумента",                  СуществующийРезультат.ХешСуммаДокумента);
		РезультатПроверкиПоДокументу.Вставить("ТипДокумента",                       СуществующийРезультат.ТипДокумента);
		РезультатПроверкиПоДокументу.Вставить("СтатусОтправки",                     ПараметрыОбработки.СтатусОтправки);
		РезультатПроверкиПоДокументу.Вставить("Идентификатор",                      СуществующийРезультат.Идентификатор);
		РезультатПроверкиПоДокументу.Вставить("ВыполненаПредварительнаяПроверка",   ПараметрыОбработки.ВыполненаПредварительнаяПроверка);
		РезультатПроверкиПоДокументу.Вставить("ОтправленНаПредварительнуюПроверку", ПараметрыОбработки.ОтправленНаПредварительнуюПроверку);
		РезультатПроверкиПоДокументу.Вставить("ПроверкаОтключена",                  СуществующийРезультат.ПроверкаОтключена);
		
		Если ПараметрыОбработки.ДанныеШтрихкодов.ВидыПродукцииВДокументе.Количество() > 0 Тогда
			
			ТоварныеГруппыДокумента = Новый Структура;
			ТоварныеГруппыДокумента.Вставить("Документ",            Документ);
			ТоварныеГруппыДокумента.Вставить("ИдентификаторЗаписи", СуществующийРезультат.ИдентификаторЗаписи);
			ТоварныеГруппыДокумента.Вставить("ТоварныеГруппы",      ПараметрыОбработки.ДанныеШтрихкодов.ВидыПродукцииВДокументе);
			
			СоответствиеТребованиямГИСМТ.ЗафиксироватьТоварныеГруппыДокументаГИСМТ(ТоварныеГруппыДокумента);
			
		КонецЕсли;
		
		Если СтатусЭДО = "Утвержден" Тогда
			
			ДатаДобавления = ?(ЗначениеЗаполнено(СуществующийРезультат.ДатаОтправкиВГИСМТ),
				СуществующийРезультат.ДатаОтправкиВГИСМТ, ТекущаяДатаСеанса());
			
			СписокОперацийГИСМТ = Неопределено;
			Если ПараметрыОбработки.СписокОперацийГИСМТ <> Неопределено Тогда
				СписокОперацийГИСМТ = Новый ХранилищеЗначения(ПараметрыОбработки.СписокОперацийГИСМТ);
			КонецЕсли;
			
			РезультатПроверкиПоДокументу.Вставить("СтатусДокументаВСервисе",              ПараметрыОбработки.Статус);

			РезультатПроверкиПоДокументу.Вставить("ДатаДобавления",      ДатаДобавления);
			РезультатПроверкиПоДокументу.Вставить("СписокОпераций",      СписокОперацийГИСМТ);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(РезультатПроверкиПоДокументу.Состояние) Тогда
			РезультатПроверкиПоДокументу.Состояние = СоответствиеТребованиямГИСМТ.ТекстСостоянияДокумента(РезультатПроверкиПоДокументу);
		КонецЕсли;
		
		СоответствиеТребованиямГИСМТ.ЗафиксироватьРезультатПроверкиНаСоответствиеТребованиямГИСМТ(РезультатПроверкиПоДокументу);
		
		РезультатОбработки.РезультатПроверки = РезультатПроверкиПоДокументу;
		
		Возврат РезультатОбработки;
	
	КонецЕсли;
	
	РезультатОбработки.РезультатПроверки = РезультатПроверкиПоДокументу;
	
	Возврат РезультатОбработки;
	
КонецФункции

Функция ЗапроситьСтатусыКодовМаркировки(ПараметрыОбработки)
	
	РезультатПроверки = РезультатПроверки();
	РезультатПроверки.ТекущаяПроверка = ПараметрыОбработки.ИдентификаторыПроверок.НаличиеОшибокВКодахМаркировки;
	ПараметрыОбработки.РезультатыПроверок[РезультатПроверки.ТекущаяПроверка] = РезультатПроверки;
	
	СтрокиСРазобраннымиШтрихкодами = ПараметрыОбработки.ДанныеШтрихкодов.СтрокиСРазобраннымиШтрихкодами;
	
	Если СтрокиСРазобраннымиШтрихкодами.Количество() = 0 Тогда
		Возврат РезультатПроверки;
	КонецЕсли;
	
	РезультатЗапросаСтатусов = ИнтерфейсМОТП.ЗапроситьСтатусыКодовМаркировки(СтрокиСРазобраннымиШтрихкодами);
	
	Если РезультатЗапросаСтатусов.ТребуетсяОбновлениеКлючаСессии Тогда
		РезультатПроверки.ТребуетсяОбновлениеКлючаСессии = Истина;
		Возврат РезультатПроверки;
	КонецЕсли;
		
	Если РезультатЗапросаСтатусов.СтатусыКодовМаркировки = Неопределено Тогда
		РезультатПроверки.ТекстОшибки   = РезультатЗапросаСтатусов.ТекстОшибки;
		РезультатПроверки.ОшибкаСервиса = Истина;
		Возврат РезультатПроверки;
	КонецЕсли;
	
	СтрокиСоСтатусами   = Новый Массив;
	Для Каждого ДанныеШтрихкода Из СтрокиСРазобраннымиШтрихкодами Цикл
		
		ДанныеСервиса = РезультатЗапросаСтатусов.СтатусыКодовМаркировки[ДанныеШтрихкода];
		Если ДанныеСервиса = Неопределено Тогда
			ДанныеШтрихкода.ОтсутствуетВСервисе = Истина;
			ДанныеШтрихкода.ОписаниеОшибки      = НСтр("ru = 'Коды маркировки отсутствует в сервисе'");
			Продолжить;
		КонецЕсли;
		
		ДанныеШтрихкода.ДанныеСервиса = ДанныеСервиса;
		
		СтрокиСоСтатусами.Добавить(ДанныеШтрихкода);
		
		ДополнитьДанныеШтрихкодаДаннымиИзСервиса(ДанныеШтрихкода);
		
	КонецЦикла;
	
	ПараметрыОбработки.ДанныеШтрихкодов.Вставить("СтрокиСоСтатусами", СтрокиСоСтатусами);
		
	Если СтрокиСРазобраннымиШтрихкодами.Количество() <> СтрокиСоСтатусами.Количество() Тогда
		РезультатПроверки.ЕстьОшибки = Истина;
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

Процедура ЗапроситьСтатусОтправкиИСтатусГИСМТ(ПараметрыОбработки)
	
	Если ПараметрыОбработки.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат;
	КонецЕсли;
	
	СтатусОбработкиДокумента = СтатусОбработкиУниверсальногоДокументаПоИдентификатору(
		ПараметрыОбработки.Организация, ПараметрыОбработки.Идентификатор);
	
	Если СтатусОбработкиДокумента.ТребуетсяОбновлениеКлючаСессии Тогда
		ПараметрыОбработки.ТребуетсяОбновлениеКлючаСессии = Истина;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтатусОбработкиДокумента.Статус) Тогда
		ПараметрыОбработки.СтатусОтправки = Перечисления.СтатусОтправкиГИСМТ.ДоставленВГИСМТ;
		ПараметрыОбработки.Статус              = СтатусОбработкиДокумента.Статус;
		ПараметрыОбработки.СписокОперацийГИСМТ = СтатусОбработкиДокумента.СписокОпераций;
	Иначе
		ПараметрыОбработки.СтатусОтправки = Перечисления.СтатусОтправкиГИСМТ.ОжидаетсяПроверкаУПДвГИСМТ;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОтдельныеПроверкиПродавцаИПокупателя(ПараметрыОбработки, ЭтоДокументПриобретения) Экспорт
	
	Если ПараметрыОбработки.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат;
	КонецЕсли;
	
	УпрощеннаяПроверка = ПараметрыОбработки.СтатусЭДО = "ЭДОНеНастроен"
		Или ПараметрыОбработки.ТипДокумента = Перечисления.ТипыДокументовГИСМТ.ВнутреннееПотребление;
	
	ОрганизацияЗарегистрированаВГИСМТ = Ложь;
	КонтрагентЗарегистрированВГИСМТ   = Ложь;
	
	РезультатПроверки = ТоварныеГруппыИНаличиеРегистрацииОрганизацииВГИСМТ(ПараметрыОбработки);
	Если РезультатПроверки.ТребуетсяОбновлениеКлючаСессии Тогда
		ПараметрыОбработки.ТребуетсяОбновлениеКлючаСессии = Истина;
		Возврат;
	ИначеЕсли Не (РезультатПроверки.ОшибкаСервиса Или РезультатПроверки.ЕстьОшибки) Тогда
		ОрганизацияЗарегистрированаВГИСМТ = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОбработки.РеквизитыДокумента.Контрагент) Тогда
		РезультатПроверки = ТоварныеГруппыИНаличиеРегистрацииКонтрагентаВГИСМТ(ПараметрыОбработки);
		Если РезультатПроверки.ТребуетсяОбновлениеКлючаСессии Тогда
			ПараметрыОбработки.ТребуетсяОбновлениеКлючаСессии = Истина;
			Возврат;
		ИначеЕсли Не (РезультатПроверки.ОшибкаСервиса Или РезультатПроверки.ЕстьОшибки) Тогда
			КонтрагентЗарегистрированВГИСМТ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	РезультатПроверки = ЗапроситьСтатусыКодовМаркировки(ПараметрыОбработки);
	Если РезультатПроверки.ТребуетсяОбновлениеКлючаСессии Тогда
		ПараметрыОбработки.ТребуетсяОбновлениеКлючаСессии = Истина;
		Возврат;
	КонецЕсли;
	
	СоответствиеТребованиямГИСМТПереопределяемый.ПриВыполненииОтдельныхПроверокПродавцаИПокупателя(ПараметрыОбработки);
	
	Если ОрганизацияЗарегистрированаВГИСМТ
		И (ПараметрыОбработки.ТипДокумента = Перечисления.ТипыДокументовГИСМТ.УПД
			Или ПараметрыОбработки.ТипДокумента = Перечисления.ТипыДокументовГИСМТ.ВнутреннееПотребление) Тогда
		
		РезультатПроверки = НаличиеОшибокВКодахМаркировки(ПараметрыОбработки);
		Если РезультатПроверки.ТребуетсяОбновлениеКлючаСессии Тогда
			ПараметрыОбработки.ТребуетсяОбновлениеКлючаСессии = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОрганизацияЗарегистрированаВГИСМТ Тогда
		
		РезультатПроверки = НаличиеИдентификатораЭДОЛайтУОрганизации(ПараметрыОбработки);
		Если РезультатПроверки.ТребуетсяОбновлениеКлючаСессии Тогда
			ПараметрыОбработки.ТребуетсяОбновлениеКлючаСессии = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если КонтрагентЗарегистрированВГИСМТ И Не ЭтоДокументПриобретения Тогда
		
		РезультатПроверки = НаличиеИдентификатораЭДОЛайтУКонтрагента(ПараметрыОбработки);
		Если РезультатПроверки.ТребуетсяОбновлениеКлючаСессии Тогда
			ПараметрыОбработки.ТребуетсяОбновлениеКлючаСессии = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если УпрощеннаяПроверка Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаТаймаутаОбработкиГИСМТ(ПараметрыОбработки);
	
	ПроверкаФорматаЭлектронногоДокументаВНастройкахЭДО(ПараметрыОбработки);
	
	Если КонтрагентЗарегистрированВГИСМТ Тогда
		
		НаличиеТоварныхГрупп(ПараметрыОбработки);
		
	КонецЕсли;
	
	Если ОрганизацияЗарегистрированаВГИСМТ Тогда
		
		НаличиеТоварныхГрупп(ПараметрыОбработки, ОрганизацияЗарегистрированаВГИСМТ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРезультатыПроверокПоСпискуОперацийГИСМТ(ПараметрыОбработки)
	
	СписокОперацийГИСМТ = ПараметрыОбработки.СписокОперацийГИСМТ;
	ОписаниеПолей = Новый Структура;
	ОписаниеПолей.Вставить("ЭтоСписокОпераций", Истина);
	
	ОшибкиОперацийПоДокументу = ОшибкиОперацийВыполненныхВСервисеПоДокументу(ПараметрыОбработки, СписокОперацийГИСМТ, ОписаниеПолей);
	
	ПараметрыОбработки.РезультатыПроверок = ОшибкиОперацийПоДокументу;
	
КонецПроцедуры

Функция СформироватьИтоговыйРезультатПоИтогамОтдельныхПроверок(ПараметрыОбработки) Экспорт
	
	РезультатПроверок = Новый Структура;
	РезультатПроверок.Вставить("Статус",     Неопределено); // перечисление
	РезультатПроверок.Вставить("Состояние",  Неопределено); // строка
	РезультатПроверок.Вставить("Результаты", Неопределено); // структура
	
	Если ПараметрыОбработки.СтатусОтправки = Перечисления.СтатусОтправкиГИСМТ.ДоставленВГИСМТ
		И ПараметрыОбработки.Статус = Перечисления.СтатусыДокументовИСМП.Проверен Тогда
		
		РезультатПроверок.Статус    = Перечисления.СтатусыОбработкиДокументовИСМП.Завершено;
		Возврат РезультатПроверок;
		
	КонецЕсли;
	
	ИдентификаторыПроверок = ПараметрыОбработки.ИдентификаторыПроверок;
	
	ПроверкиСОшибкамиСервиса  = Новый Массив;
	ПроверкиСОшибкамиПроцесса = Новый Массив;
	
	Для Каждого КлючЗначение Из ПараметрыОбработки.РезультатыПроверок Цикл
		
		ИдентификаторПроверки = КлючЗначение.Ключ;
		РезультатПроверки     = КлючЗначение.Значение;
		
		Если РезультатПроверки.ОшибкаСервиса Тогда
			ПроверкиСОшибкамиСервиса.Добавить(ИдентификаторПроверки);
		КонецЕсли;
		
		Если РезультатПроверки.ЕстьОшибки Тогда
			ПроверкиСОшибкамиПроцесса.Добавить(ИдентификаторПроверки);
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстСостояния = "";
	
	Если ПроверкиСОшибкамиСервиса.Количество() = 0 И ПроверкиСОшибкамиПроцесса.Количество() = 0 Тогда
		РезультатПроверок.Статус    = Перечисления.СтатусыОбработкиДокументовИСМП.ЗавершеноСОжиданием;
		
		Возврат РезультатПроверок;
	КонецЕсли;
	
	СтатусПредупреждения = Перечисления.СтатусыОбработкиДокументовИСМП.ЗавершеноСПредупреждением;
	СтатусОшибки         = Перечисления.СтатусыОбработкиДокументовИСМП.ЗавершеноСОшибкой;
	СтатусОшибкиСервиса  = Перечисления.СтатусыОбработкиДокументовИСМП.ЗавершеноСОшибкойСервиса;
	СтатусОшибкиТаймаут  = Перечисления.СтатусыОбработкиДокументовИСМП.ЗавершеноСОшибкойТаймаута;
	
	Если ПараметрыОбработки.СтатусОтправки = Перечисления.СтатусОтправкиГИСМТ.ДоставленВГИСМТ
		И ПараметрыОбработки.Статус = Перечисления.СтатусыДокументовИСМП.ЕстьОшибки Тогда
		СтатусПредупреждения = Перечисления.СтатусыОбработкиДокументовИСМП.ЗавершеноСОшибкой;
	ИначеЕсли ПараметрыОбработки.СтатусОтправки = Перечисления.СтатусОтправкиГИСМТ.ДоставленВГИСМТ
		И ПараметрыОбработки.Статус = Перечисления.СтатусыДокументовИСМП.Обрабатывается Тогда
		СтатусПредупреждения = Перечисления.СтатусыОбработкиДокументовИСМП.ЗавершеноСОжиданием;
		СтатусОшибки         = Перечисления.СтатусыОбработкиДокументовИСМП.ЗавершеноСОжиданием;
	ИначеЕсли ПараметрыОбработки.СтатусОтправки = Перечисления.СтатусОтправкиГИСМТ.ОжидаетсяПроверкаУПДвГИСМТ Тогда
		СтатусПредупреждения = Перечисления.СтатусыОбработкиДокументовИСМП.ЗавершеноСОжиданием;
		СтатусОшибки         = Перечисления.СтатусыОбработкиДокументовИСМП.ЗавершеноСОшибкой;
	КонецЕсли;
	
	ИтоговыйСтатус = СтатусПредупреждения;
	Результаты     = Неопределено;
	
	Если ПроверкиСОшибкамиПроцесса.Количество() > 0 Тогда
		
		ИдентификаторыПредупреждений = Новый Массив;
		ИдентификаторыПредупреждений.Добавить(ИдентификаторыПроверок.НаличиеРегистрацииКонтрагентаВГИСМТ);
		ИдентификаторыПредупреждений.Добавить(ИдентификаторыПроверок.НаличиеРегистрацииОрганизацииВГИСМТ);
		
		ИдентификаторыТаймаут = Новый Массив;
		ИдентификаторыТаймаут.Добавить(ИдентификаторыПроверок.ЛимитВремениОбработкиДокументаГИСМТ);
		
		РезультатыПроверок = Новый Соответствие;
		
		ИдентификаторПроверкиСОшибкой = Неопределено;
		ИдентификаторПроверкиТаймаут  = Неопределено;
		Для Каждого ИдентификаторПроверки Из ПроверкиСОшибкамиПроцесса Цикл
			
			РезультатыПроверок[ИдентификаторПроверки] = ПараметрыОбработки.РезультатыПроверок[ИдентификаторПроверки].Данные;
			
			Если ИдентификаторыПредупреждений.Найти(ИдентификаторПроверки) = Неопределено И ИдентификаторПроверкиСОшибкой = Неопределено
				И ИдентификаторыТаймаут.Найти(ИдентификаторПроверки) = Неопределено Тогда
				ИдентификаторПроверкиСОшибкой = ИдентификаторПроверки;
			КонецЕсли;
			
			Если ИдентификаторыТаймаут.Найти(ИдентификаторПроверки) <> Неопределено Тогда
				ИдентификаторПроверкиТаймаут = ИдентификаторПроверки;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ИдентификаторПроверкиТаймаут <> Неопределено Тогда
			ИтоговыйСтатус = СтатусОшибкиТаймаут;
		ИначеЕсли ИдентификаторПроверкиСОшибкой = Неопределено Тогда
			ИдентификаторПроверкиСОшибкой = ИдентификаторПроверки;
		Иначе
			ИтоговыйСтатус = СтатусОшибки;
		КонецЕсли;
		
		ПредставлениеОшибкиПоВыбраннойПроверке = ПараметрыОбработки.РезультатыПроверок[ИдентификаторПроверки].СостояниеОшибки;
		
		ТекстСостояния = СформироватьСостояниеПроверок(
			ИтоговыйСтатус, ПредставлениеОшибкиПоВыбраннойПроверке, ПроверкиСОшибкамиПроцесса.Количество(), ТекстСостояния);
		
		Результаты = Новый Структура;
		Результаты.Вставить("ПроверкиСОшибкамиПроцесса", ПроверкиСОшибкамиПроцесса);
		Результаты.Вставить("РезультатыПроверок",        РезультатыПроверок);
		
		Состояние = ТекстСостояния;
		
	КонецЕсли;
	
	Если ПроверкиСОшибкамиСервиса.Количество() > 0 Тогда
		
		ИдентификаторыОбязательныхПроверок = Новый Соответствие;
		ИдентификаторыОбязательныхПроверок.Вставить(ИдентификаторыПроверок.НаличиеРегистрацииОрганизацииВГИСМТ, Истина);
		ИдентификаторыОбязательныхПроверок.Вставить(ИдентификаторыПроверок.НаличиеРегистрацииКонтрагентаВГИСМТ, Истина);
		
		Для Каждого ИдентификаторПроверки Из ПроверкиСОшибкамиСервиса Цикл
			Если ИдентификаторыОбязательныхПроверок[ИдентификаторПроверки] <> Неопределено Тогда
				ИтоговыйСтатус = СтатусОшибкиСервиса;
				Состояние      = НСтр("ru = 'Ошибка сервиса.'");
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	РезультатПроверок.Статус     = ИтоговыйСтатус;
	РезультатПроверок.Состояние  = Состояние;
	РезультатПроверок.Результаты = Результаты;
	
	Возврат РезультатПроверок;
	
КонецФункции

Функция СформироватьСостояниеПроверок(Статус, ТекстОшибки, КоличествоОшибок, НачальныйТекст = "")
	
	Если Статус = Перечисления.СтатусыОбработкиДокументовИСМП.ЗавершеноСПредупреждением Тогда
		
		Состояние = СтрШаблон( НСтр("ru = 'Есть рекомендации ГИС МТ (%1)'"), КоличествоОшибок);
		
	Иначе
		
		МаксимальнаяДлиннаСтрокиСостояния = 50;
		
		Если ЗначениеЗаполнено(НачальныйТекст) Тогда
			МаксимальнаяДлиннаСтрокиСостояния = МаксимальнаяДлиннаСтрокиСостояния - СтрДлина(НачальныйТекст) - 2;
		КонецЕсли;
		
		Состояние = ТекстОшибки;
		
		Если КоличествоОшибок > 1 Тогда
			
			СостояниеЕще = СтрШаблон( НСтр("ru = '(+ еще %1)'") , КоличествоОшибок - 1);
			
			Если (СтрДлина(Состояние) + СтрДлина(СостояниеЕще)) > МаксимальнаяДлиннаСтрокиСостояния Тогда
				
				Состояние = СтрШаблон("%1...%2", Лев(Состояние, МаксимальнаяДлиннаСтрокиСостояния - 3 - СтрДлина(СостояниеЕще)), СостояниеЕще);
				
			Иначе
				
				Состояние = СтрШаблон("%1 %2", Состояние, СостояниеЕще);
				
			КонецЕсли;
			
		ИначеЕсли СтрДлина(Состояние) > МаксимальнаяДлиннаСтрокиСостояния Тогда
			
			Состояние = СтрШаблон("%1...", Лев(Состояние, МаксимальнаяДлиннаСтрокиСостояния - 3));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НачальныйТекст) Тогда
		Состояние = СтрШаблон("%1. %2", НачальныйТекст, Состояние);
	КонецЕсли;
	
	Возврат Состояние;
	
КонецФункции

Функция РезультатПроверки()
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	РезультатПроверки.Вставить("ЕстьОшибки",                     Ложь);
	РезультатПроверки.Вставить("ТекстОшибки",                    "");
	РезультатПроверки.Вставить("ОшибкаСервиса",                  Ложь);
	РезультатПроверки.Вставить("СостояниеОшибки",                "");
	РезультатПроверки.Вставить("Данные",                         Неопределено);
	РезультатПроверки.Вставить("ТекущаяПроверка",                Неопределено);
	
	Возврат РезультатПроверки;
	
КонецФункции

Процедура ДополнитьДанныеШтрихкодаДаннымиИзСервиса(ДанныеШтрихкода)
	
	ДанныеСервиса = ДанныеШтрихкода.ДанныеСервиса;
	
	Если ДанныеСервиса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеСервиса.ВидПродукции) Тогда
		ДанныеШтрихкода.ВидПродукции = ДанныеСервиса.ВидПродукции;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеСервиса.ВидУпаковки) Тогда
		ДанныеШтрихкода.ВидУпаковки = ДанныеСервиса.ВидУпаковки;
	КонецЕсли;
	
КонецПроцедуры

Процедура НаличиеКорректногоСтатусаУКодовМаркировкиДоОтправкиВГИСМТ(ПараметрыОбработки, СтрокиСоСтатусами)
	
	Если ПараметрыОбработки.СтатусОтправки <> Перечисления.СтатусОтправкиГИСМТ.НеОтправлен Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ДанныеШтрихкода Из СтрокиСоСтатусами Цикл
		
		ДанныеСервиса = ДанныеШтрихкода.ДанныеСервиса;
		
		Если ДанныеСервиса = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеСервиса.ИННВладельца = ПараметрыОбработки.РеквизитыДокумента.ОрганизацияИНН Тогда
			
			Если ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияМОТП(ДанныеСервиса.ВидПродукции) Тогда
				
				ДатаКонтроляСтатуса = ПараметрыОбработки.ПараметрыСканирования.ДатаПроизводстваНачалаКонтроляСтатусовКодовМаркировкиМОТП;
				Если ЗначениеЗаполнено(ДанныеСервиса.ДатаПроизводства) И ДанныеСервиса.ДатаПроизводства < ДатаКонтроляСтатуса Тогда
					Продолжить;
				КонецЕсли;
				
			Иначе
				
				ДатаКонтроляСтатуса = ИнтеграцияИСМПКлиентСерверПовтИсп.ДатаОбязательнойМаркировкиПродукции(ДанныеСервиса.ВидПродукции);
				Если ЗначениеЗаполнено(ДатаКонтроляСтатуса) И ТекущаяДатаСеанса() < ДатаКонтроляСтатуса Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияМОТП(ДанныеСервиса.ВидПродукции) Тогда
				
				Если ДанныеСервиса.Статус = Перечисления.СтатусыКодовМаркировкиМОТП.Нанесен Тогда
					
					СтатусКорректен = (ДанныеСервиса.ИННПроизводителя = ПараметрыОбработки.РеквизитыДокумента.ОрганизацияИНН)
						Или ДанныеШтрихкода.ВСеройЗоне;
					
				Иначе
					
					СтатусКорректен = (ДанныеСервиса.Статус = Перечисления.СтатусыКодовМаркировкиМОТП.ВведенВОборот);
					
				КонецЕсли;
				
			Иначе
				
				СтатусКорректен = (ДанныеСервиса.Статус = Перечисления.СтатусыКодовМаркировкиИСМП.ВведенВОборот);
				
			КонецЕсли;
			
			Если Не СтатусКорректен Тогда
				
				
				ТекстОшибки = СтрШаблон(НСтр("ru = 'Статус ""%1"" не допустим.'"), ДанныеСервиса.Статус);
				
				Если ПустаяСтрока(ДанныеШтрихкода.ОписаниеОшибки) Тогда
					ДанныеШтрихкода.ОписаниеОшибки = ТекстОшибки;
				Иначе
					ДанныеШтрихкода.ОписаниеОшибки = СтрШаблон("%1 %2", ДанныеШтрихкода.ОписаниеОшибки, ТекстОшибки);
				КонецЕсли;
				
				ДанныеШтрихкода.ОшибкаСтатуса = Истина;
				
			КонецЕсли;
		Иначе
			
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Принадлежит владельцу ИНН %1'"), ДанныеСервиса.ИННВладельца);
			
			Если ПустаяСтрока(ДанныеШтрихкода.ОписаниеОшибки) Тогда
				ДанныеШтрихкода.ОписаниеОшибки = ТекстОшибки;
			Иначе
				ДанныеШтрихкода.ОписаниеОшибки = СтрШаблон("%1 %2", ДанныеШтрихкода.ОписаниеОшибки, ТекстОшибки);
			КонецЕсли;
			
			ДанныеШтрихкода.ОшибкаСтатуса = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область Проверки

Функция ТоварныеГруппыИНаличиеРегистрацииОрганизацииВГИСМТ(ПараметрыОбработки)
	
	РезультатПроверки = РезультатПроверки();
	РезультатПроверки.ТекущаяПроверка = ПараметрыОбработки.ИдентификаторыПроверок.НаличиеРегистрацииОрганизацииВГИСМТ;
	ПараметрыОбработки.РезультатыПроверок[РезультатПроверки.ТекущаяПроверка] = РезультатПроверки;
	
	Если Не ЗначениеЗаполнено(ПараметрыОбработки.РеквизитыДокумента.ОрганизацияИНН) Тогда
		РезультатПроверки.ЕстьОшибки  = Истина;
		РезультатПроверки.СостояниеОшибки = НСтр("ru = 'Отсутствует ИНН организации'");
		РезультатПроверки.Данные = РезультатПроверки.СостояниеОшибки;
		Возврат РезультатПроверки;
	КонецЕсли;
	
	РезультатПроверки.СостояниеОшибки = СтрШаблон(
		НСтр("ru = 'Отсутствует регистрация организации ИНН %1 в ГИС МТ'"),
		ПараметрыОбработки.РеквизитыДокумента.ОрганизацияИНН);
	РезультатЗапроса = ЗапроситьСтатусРегистрацииУчастникаИТоварныеГруппы(
		ПараметрыОбработки.Организация, ПараметрыОбработки.РеквизитыДокумента.ОрганизацияИНН);
	
	РезультатПроверки.ОшибкаСервиса = РезультатЗапроса.ОшибкаСервиса;
	
	Если РезультатЗапроса.ТребуетсяОбновлениеКлючаСессии Тогда
		
		РезультатПроверки.ТребуетсяОбновлениеКлючаСессии = Истина;
		
	ИначеЕсли РезультатЗапроса.Статус = Неопределено Тогда
		
		РезультатПроверки.ЕстьОшибки  = Истина;
		РезультатПроверки.ТекстОшибки = РезультатЗапроса.ТекстОшибки;
		
	Иначе
		
		СтатусРегистрацииУчастника = ВРег(РезультатЗапроса.Статус);
		
		Если СтатусРегистрацииУчастника = "REGISTERED"
			Или СтатусРегистрацииУчастника = "ЗАРЕГИСТРИРОВАН"
			Или СтатусРегистрацииУчастника = "RESTORED"
			Или СтатусРегистрацииУчастника = "ВОССТАНОВЛЕН" Тогда
		Иначе
			РезультатПроверки.ЕстьОшибки  = Истина;
			РезультатПроверки.ТекстОшибки = НСтр("ru = 'Статус регистрации УОД не корректный'");
		КонецЕсли;
		
		РезультатПроверки.Данные = СтатусРегистрацииУчастника;
		
		ПараметрыОбработки.Вставить("ТоварныеГруппыОрганизации", РезультатЗапроса.ТоварныеГруппы);
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ТоварныеГруппыИНаличиеРегистрацииКонтрагентаВГИСМТ(ПараметрыОбработки)
	
	РезультатПроверки = РезультатПроверки();
	РезультатПроверки.ТекущаяПроверка = ПараметрыОбработки.ИдентификаторыПроверок.НаличиеРегистрацииКонтрагентаВГИСМТ;
	ПараметрыОбработки.РезультатыПроверок[РезультатПроверки.ТекущаяПроверка] = РезультатПроверки;
	
	Если Не ЗначениеЗаполнено(ПараметрыОбработки.РеквизитыДокумента.КонтрагентИНН) Тогда
		РезультатПроверки.ЕстьОшибки  = Истина;
		РезультатПроверки.СостояниеОшибки = НСтр("ru = 'Отсутствует ИНН контрагента'");
		РезультатПроверки.Данные = РезультатПроверки.СостояниеОшибки;
		Возврат РезультатПроверки;
	КонецЕсли;
	
	РезультатПроверки.СостояниеОшибки = СтрШаблон(
		НСтр("ru = 'Отсутствует регистрация контрагента ИНН %1 в ГИС МТ'"),
		ПараметрыОбработки.РеквизитыДокумента.КонтрагентИНН);
	РезультатЗапроса = ЗапроситьСтатусРегистрацииУчастникаИТоварныеГруппы(
		ПараметрыОбработки.РеквизитыДокумента.Контрагент, ПараметрыОбработки.РеквизитыДокумента.КонтрагентИНН);
	
	РезультатПроверки.ОшибкаСервиса = РезультатЗапроса.ОшибкаСервиса;
	
	Если РезультатЗапроса.ТребуетсяОбновлениеКлючаСессии Тогда
		
		РезультатПроверки.ТребуетсяОбновлениеКлючаСессии = Истина;
		
	ИначеЕсли РезультатЗапроса.Статус = Неопределено Тогда
		
		РезультатПроверки.ЕстьОшибки  = Истина;
		РезультатПроверки.ТекстОшибки = РезультатЗапроса.ТекстОшибки;
		
	Иначе
		
		СтатусРегистрацииУчастника = ВРег(РезультатЗапроса.Статус);
		
		Если СтатусРегистрацииУчастника = "REGISTERED"
			Или СтатусРегистрацииУчастника = "ЗАРЕГИСТРИРОВАН"
			Или СтатусРегистрацииУчастника = "RESTORED"
			Или СтатусРегистрацииУчастника = "ВОССТАНОВЛЕН" Тогда
		Иначе
			РезультатПроверки.ЕстьОшибки  = Истина;
			РезультатПроверки.ТекстОшибки = НСтр("ru = 'Статус регистрации УОД не корректный'");
		КонецЕсли;
		
		РезультатПроверки.Данные = СтатусРегистрацииУчастника;
		
		ПараметрыОбработки.Вставить("ТоварныеГруппыКонтрагента", РезультатЗапроса.ТоварныеГруппы);
		
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция НаличиеИдентификатораЭДОЛайтУОрганизации(ПараметрыОбработки)
	
	РезультатПроверки = РезультатПроверки();
	РезультатПроверки.ТекущаяПроверка = ПараметрыОбработки.ИдентификаторыПроверок.НаличиеИдентификатораЭДОЛайтУОрганизации;
	ПараметрыОбработки.РезультатыПроверок[РезультатПроверки.ТекущаяПроверка] = РезультатПроверки;
	
	РезультатПроверки.СостояниеОшибки = СтрШаблон(
		НСтр("ru = 'В личном кабинете ГИС МТ у организации ИНН %1 отсутствует идентификатор ЭДО Лайт'"),
		ПараметрыОбработки.РеквизитыДокумента.ОрганизацияИНН);
	
	РезультатЗапроса = ЗапроситьИдентификатораАбонентаВЭДОLite(
		ПараметрыОбработки.Организация, ПараметрыОбработки.РеквизитыДокумента.ОрганизацияИНН);
	
	РезультатПроверки.ОшибкаСервиса = РезультатЗапроса.ОшибкаСервиса;
	
	Если РезультатЗапроса.ТребуетсяОбновлениеКлючаСессии Тогда
		
		РезультатПроверки.ТребуетсяОбновлениеКлючаСессии = Истина;
		
	ИначеЕсли РезультатЗапроса.ИдентификаторАбонента = Неопределено Тогда
		
		Если РезультатЗапроса.ТекстОшибки = "УОТ использует другого оператора ЭДО" Тогда
		Иначе
			РезультатПроверки.ЕстьОшибки  = Истина;
			РезультатПроверки.ТекстОшибки = РезультатЗапроса.ТекстОшибки;
		КонецЕсли;
		
	Иначе
		
		РезультатПроверки.Данные = РезультатЗапроса.ИдентификаторАбонента;
		
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция НаличиеИдентификатораЭДОЛайтУКонтрагента(ПараметрыОбработки)
	
	РезультатПроверки = РезультатПроверки();
	РезультатПроверки.ТекущаяПроверка = ПараметрыОбработки.ИдентификаторыПроверок.НаличиеИдентификатораЭДОЛайтУКонтрагента;
	ПараметрыОбработки.РезультатыПроверок[РезультатПроверки.ТекущаяПроверка] = РезультатПроверки;
	
	РезультатПроверки.СостояниеОшибки = СтрШаблон(
		НСтр("ru = 'В личном кабинете ГИС МТ у контрагента ИНН %1 отсутствует идентификатор ЭДО Лайт'"),
		ПараметрыОбработки.РеквизитыДокумента.КонтрагентИНН);
	
	РезультатЗапроса = ЗапроситьИдентификатораАбонентаВЭДОLite(
		ПараметрыОбработки.Организация, ПараметрыОбработки.РеквизитыДокумента.КонтрагентИНН);
	
	РезультатПроверки.ОшибкаСервиса = РезультатЗапроса.ОшибкаСервиса;
	
	Если РезультатЗапроса.ТребуетсяОбновлениеКлючаСессии Тогда
		
		РезультатПроверки.ТребуетсяОбновлениеКлючаСессии = Истина;
		
	ИначеЕсли РезультатЗапроса.ИдентификаторАбонента = Неопределено Тогда
		
		Если РезультатЗапроса.ТекстОшибки = "УОТ использует другого оператора ЭДО" Тогда
		Иначе
			РезультатПроверки.ЕстьОшибки  = Истина;
			РезультатПроверки.ТекстОшибки = РезультатЗапроса.ТекстОшибки;
		КонецЕсли;
		
	Иначе
		
		РезультатПроверки.Данные = РезультатЗапроса.ИдентификаторАбонента;
		
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ПроверкаФорматаЭлектронногоДокументаВНастройкахЭДО(ПараметрыОбработки)
	
	РезультатПроверки = РезультатПроверки();
	РезультатПроверки.ТекущаяПроверка = ПараметрыОбработки.ИдентификаторыПроверок.ПроверкаФорматаЭлектронногоДокументаВНастройкахЭДО;
	ПараметрыОбработки.РезультатыПроверок[РезультатПроверки.ТекущаяПроверка] = РезультатПроверки;
	
	РезультатПроверки.СостояниеОшибки = СтрШаблон(
		НСтр("ru = 'Неверный формат электронного документа в настройках обмена с контрагентом ИНН %1'"),
		ПараметрыОбработки.РеквизитыДокумента.КонтрагентИНН);
	
	Если ПараметрыОбработки.НастройкиОбменаЭД = Неопределено Тогда
		РезультатПроверки.ЕстьОшибки  = Истина;
		РезультатПроверки.ТекстОшибки = НСтр("ru = 'Настройки обмена ЭД получить не удалось'");
		Возврат РезультатПроверки;
	КонецЕсли;
	
	ФорматыЭдоПоТипуДокумента = ФорматЭдоПоТипуДокумента(ПараметрыОбработки.ТипДокумента);
	
	Если ФорматыЭдоПоТипуДокумента.Получить(ПараметрыОбработки.НастройкиОбменаЭД.Формат) = Неопределено Тогда
		
		РезультатПроверки.ЕстьОшибки  = Истина;
		РезультатПроверки.ТекстОшибки = НСтр("ru = 'Неверный формат ЭД'");
		
		МассивДоступныхФорматов = Новый Массив;
		
		Для Каждого ФорматЭдо Из ФорматыЭдоПоТипуДокумента Цикл
			МассивДоступныхФорматов.Добавить(ФорматЭдо.Значение);
		КонецЦикла;
		
		РезультатПроверки.Данные = СтрСоединить(МассивДоступныхФорматов, ", ");
		
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ПроверкаТаймаутаОбработкиГИСМТ(ПараметрыОбработки)
	
	РезультатПроверки = РезультатПроверки();
	РезультатПроверки.ТекущаяПроверка = ПараметрыОбработки.ИдентификаторыПроверок.ЛимитВремениОбработкиДокументаГИСМТ;
	ПараметрыОбработки.РезультатыПроверок[РезультатПроверки.ТекущаяПроверка] = РезультатПроверки;
	
	Если ПараметрыОбработки.СтатусОтправки = Перечисления.СтатусОтправкиГИСМТ.ОжидаетсяПроверкаУПДвГИСМТ Тогда
		ЛимитВремениОбработкиДокумента = СоответствиеТребованиямГИСМТ.ЛимитВремениОбработкиДокумента();
		ПрошлоВремени = ТекущаяДатаСеанса() - КонецДня(ПараметрыОбработки.ДатаОтправкиВГИСМТ);
		Если ПрошлоВремени > ЛимитВремениОбработкиДокумента Тогда
			КоличествоДней = ПрошлоВремени / 86400;
			КоличествоДнейПредставление = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
				НСтр("ru = ';прошел %1 день;;прошло %1 дня;прошло %1 дней; прошло %1 дней'"),
				КоличествоДней,,"ЧДЦ=0;");
			РезультатПроверки.Данные = СтрШаблон(
				"С момента подписания документа покупателем %1, но документ не загружен в ГИС МТ",
				КоличествоДнейПредставление);
			РезультатПроверки.ЕстьОшибки  = Истина;
			РезультатПроверки.ТекстОшибки = НСтр("ru = 'Документ не найден в ГИС МТ'");
			РезультатПроверки.СостояниеОшибки = НСтр("ru = 'Документ не найден в ГИС МТ'");
		КонецЕсли;
	КонецЕсли;

	Возврат РезультатПроверки;
	
КонецФункции

Функция НаличиеОшибокВКодахМаркировки(ПараметрыОбработки)
	
	ТекущаяПроверка = ПараметрыОбработки.ИдентификаторыПроверок.НаличиеОшибокВКодахМаркировки;
	РезультатПроверки = ПараметрыОбработки.РезультатыПроверок[ТекущаяПроверка];
	
	Если РезультатПроверки.ЕстьОшибки Тогда
		Возврат РезультатПроверки;
	КонецЕсли;
	
	ДанныеШтрихкодовДокумента      = ПараметрыОбработки.ДанныеШтрихкодов.ДанныеШтрихкодовДокумента;
	СтрокиСРазобраннымиШтрихкодами = ПараметрыОбработки.ДанныеШтрихкодов.СтрокиСРазобраннымиШтрихкодами;
	
	Если СтрокиСРазобраннымиШтрихкодами.Количество() = 0 Тогда
		Возврат РезультатПроверки;
	КонецЕсли;
	
	СтрокиСоСтатусами       = ПараметрыОбработки.ДанныеШтрихкодов.СтрокиСоСтатусами;
	ВидыПродукцииВДокументе = ПараметрыОбработки.ДанныеШтрихкодов.ВидыПродукцииВДокументе;
	УникальныеВидыПродукции = Новый Соответствие;
	Для Каждого ВидПродукции Из ВидыПродукцииВДокументе Цикл
		УникальныеВидыПродукции[ВидПродукции] = Истина;
	КонецЦикла;
	
	КандидатыВСеруюЗону = Новый Массив;
	Для Каждого ДанныеШтрихкода Из СтрокиСРазобраннымиШтрихкодами Цикл
		
		Если ДанныеШтрихкода.ВидПродукции = Перечисления.ВидыПродукцииИС.Табак
			И (ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
				Или ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая) Тогда
			КандидатыВСеруюЗону.Добавить(ДанныеШтрихкода);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеШтрихкода.ВидПродукции)
			И УникальныеВидыПродукции[ДанныеШтрихкода.ВидПродукции] = Неопределено Тогда
			УникальныеВидыПродукции[ДанныеШтрихкода.ВидПродукции] = Истина;
			ВидыПродукцииВДокументе.Добавить(ДанныеШтрихкода.ВидПродукции);
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокиСоСтатусами.Количество() = 0 Тогда
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Если КандидатыВСеруюЗону.Количество() > 0 Тогда
		
		РезультатПроверкиСеройЗоны = ИнтерфейсМОТП.ПроверитьСеруюЗонуКодовМаркировки(КандидатыВСеруюЗону);
		Если РезультатПроверкиСеройЗоны.ТребуетсяОбновлениеКлючаСессии Тогда
			РезультатПроверки.ТребуетсяОбновлениеКлючаСессии = Истина;
			Возврат РезультатПроверки;
		ИначеЕсли РезультатПроверкиСеройЗоны.СостояниеСеройЗоны = Неопределено Тогда
			РезультатПроверки.ТекстОшибки = РезультатПроверкиСеройЗоны.ТекстОшибки;
			РезультатПроверки.ОшибкаСервиса = Истина;
			Возврат РезультатПроверки;
		КонецЕсли;
		
		Для Каждого ДанныеШтрихкода Из КандидатыВСеруюЗону Цикл
			СостояниеСеройЗоны = РезультатПроверкиСеройЗоны.СостояниеСеройЗоны[ДанныеШтрихкода];
			Если СостояниеСеройЗоны = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ДанныеШтрихкода.ВСеройЗоне = СостояниеСеройЗоны.ВСеройЗоне;
		КонецЦикла;
		
	КонецЕсли;
	
	НаличиеКорректногоСтатусаУКодовМаркировкиДоОтправкиВГИСМТ(ПараметрыОбработки, СтрокиСоСтатусами);
	
	ДанныеПоОшибкамШтрихкода = Новый ТаблицаЗначений;
	ДанныеПоОшибкамШтрихкода.Колонки.Добавить("Штрихкод", Новый ОписаниеТипов("Строка"));
	ДанныеПоОшибкамШтрихкода.Колонки.Добавить("Описание", Новый ОписаниеТипов("Строка"));
	
	Для Каждого ДанныеШтрихкода Из ДанныеШтрихкодовДокумента Цикл
		
		Если ДанныеШтрихкода.ОшибкаРазбора
			Или ДанныеШтрихкода.ОтсутствуетВСервисе
			Или ДанныеШтрихкода.ОшибкаСтатуса Тогда
			
			Строка = ДанныеПоОшибкамШтрихкода.Добавить();
			Строка.Штрихкод = ДанныеШтрихкода.Штрихкод;
			Строка.Описание = ДанныеШтрихкода.ОписаниеОшибки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	РезультатПроверки.Данные = ДанныеПоОшибкамШтрихкода;
	Если ДанныеПоОшибкамШтрихкода.Количество() > 0 Тогда
		РезультатПроверки.ЕстьОшибки = Истина;
		РезультатПроверки.СостояниеОшибки = СтрШаблон(
			НСтр("ru = 'Есть коды маркировки с ошибками (%1)'"),
			ДанныеПоОшибкамШтрихкода.Количество());
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция НаличиеТоварныхГрупп(ПараметрыОбработки, ПроверкаОрганизации = Ложь)
	
	ВидыПродукцииВДокументе = ПараметрыОбработки.ДанныеШтрихкодов.ВидыПродукцииВДокументе;
		
	Если ПроверкаОрганизации Тогда
		ОткрытыеТоварныеГруппы = ПараметрыОбработки.ТоварныеГруппыОрганизации;
		ИдентификаторПроверки = ПараметрыОбработки.ИдентификаторыПроверок.НаличиеТоварныхГруппУОрганизации;
		СтрокаОбращение = НСтр("ru = 'У организации'");
		КонтрагентОрганизация = ПараметрыОбработки.РеквизитыДокумента.Организация;
	Иначе
		ОткрытыеТоварныеГруппы = ПараметрыОбработки.ТоварныеГруппыКонтрагента;
		ИдентификаторПроверки = ПараметрыОбработки.ИдентификаторыПроверок.НаличиеТоварныхГруппУКонтрагента;
		СтрокаОбращение = НСтр("ru = 'У контрагента'");
		КонтрагентОрганизация = ПараметрыОбработки.РеквизитыДокумента.Контрагент;
	КонецЕсли;
		
	РезультатПроверки = РезультатПроверки();
	РезультатПроверки.ТекущаяПроверка = ИдентификаторПроверки;
	ПараметрыОбработки.РезультатыПроверок[РезультатПроверки.ТекущаяПроверка] = РезультатПроверки;
	
	Если ВидыПродукцииВДокументе.Количество() = 0 Тогда
		Возврат РезультатПроверки;
	КонецЕсли;
	
	РезультатПроверки.СостояниеОшибки = НСтр("ru = 'Товарная группа закрыта'");
	
	ТоварныеГруппы = Новый Массив;
	ТоварныеГруппыВидовПродукции = ШтрихкодированиеИС.ТоварныеГруппыВидовПродукции();
	
	Для Каждого ВидПродукции Из ВидыПродукцииВДокументе Цикл
		ТоварнаяГруппа = ТоварныеГруппыВидовПродукции[ВидПродукции];
		Если ОткрытыеТоварныеГруппы.Найти(ТоварнаяГруппа) = Неопределено Тогда
			ТоварныеГруппы.Добавить(ТоварнаяГруппа);
		КонецЕсли;
	КонецЦикла;
	
	Если ТоварныеГруппы.Количество() = 0 Тогда
		Возврат РезультатПроверки;
	КонецЕсли;
	
	РезультатПроверки.ЕстьОшибки  = Истина;
	РезультатПроверки.ТекстОшибки = СформироватьПредставлениеОшибкиНаличиеТоварныхГруппУКонтрагента(СтрокаОбращение,
		КонтрагентОрганизация, ТоварныеГруппы);
	
	РезультатПроверки.Данные = РезультатПроверки.ТекстОшибки;
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция СформироватьПредставлениеОшибкиНаличиеТоварныхГруппУКонтрагента(СтрокаОбращение, КонтрагентОрганизация, ТоварныеГруппы)
	
	НадписьДляДекорацииСОшибкой = Новый Массив;
	
	НадписьДляДекорацииСОшибкой.Добавить(СтрокаОбращение);
	НадписьДляДекорацииСОшибкой.Добавить(" ");
	НадписьДляДекорацииСОшибкой.Добавить(
		Новый ФорматированнаяСтрока(
			Строка(КонтрагентОрганизация),,,,
			ПолучитьНавигационнуюСсылку(КонтрагентОрганизация)));
	НадписьДляДекорацииСОшибкой.Добавить(" ");
	НадписьДляДекорацииСОшибкой.Добавить(НСтр("ru = 'не подписан договор с оператором на товарную группу:'"));
	
	Для Каждого ВидПродукции Из ТоварныеГруппы Цикл
		НадписьДляДекорацииСОшибкой.Добавить(Символы.ПС);
		НадписьДляДекорацииСОшибкой.Добавить("-");
		НадписьДляДекорацииСОшибкой.Добавить(" ");
		НадписьДляДекорацииСОшибкой.Добавить(Строка(ВидПродукции));
	КонецЦикла;
	
	Возврат НадписьДляДекорацииСОшибкой;
	
КонецФункции

#КонецОбласти

#Область TrueAPI

Функция ЗапроситьСтатусРегистрацииУчастникаИТоварныеГруппы(Организация, ИНН)
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ОбщегоНазначенияИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии());
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("Статус",                         Неопределено);
	ВозвращаемоеЗначение.Вставить("ТоварныеГруппы",                 Новый Массив);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	ВозвращаемоеЗначение.Вставить("ОшибкаСервиса",                  Ложь);
	
	Если ПустаяСтрока(ИНН) Тогда
		ВозвращаемоеЗначение.ТекстОшибки = НСтр("ru = 'Не заполнен ИНН'");
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	URLЗапроса = СтрШаблон(
		"api/v3/true-api/participants/%1",
		ИНН);
	РезультатЗапроса = ОбщегоНазначенияИСМП.ПолучитьДанныеИзСервиса(URLЗапроса, КлючСессии, ОбщегоНазначенияИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов(""));
	
	РезультатОтправкиЗапроса = ОбщегоНазначенияИСМП.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ОбщегоНазначенияИСМП.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИС.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				Если ДанныеОбработки.Свойство("productGroups") Тогда
					Для Каждого ЭлементТоварнаяГруппа Из ДанныеОбработки.productGroups Цикл
						ТоварнаяГруппаСсылка = ИнтерфейсИСМПОбщегоНазначения.ТоварнаяГруппа(ЭлементТоварнаяГруппа);
						
						Если ЗначениеЗаполнено(ТоварнаяГруппаСсылка) Тогда
							ВозвращаемоеЗначение.ТоварныеГруппы.Добавить(ТоварнаяГруппаСсылка);
						КонецЕсли;
						
					КонецЦикла;
				КонецЕсли;
				
				ВозвращаемоеЗначение.Статус         = ДанныеОбработки.status;
				
			КонецЕсли;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 404 Тогда
			
			// {"error_message":"УОТ не найден"}
			
			ДанныеОбработки = ОбщегоНазначенияИСМП.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИС.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ВозвращаемоеЗначение.ТекстОшибки = ДанныеОбработки.error_message;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИС.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			ВозвращаемоеЗначение.ОшибкаСервиса = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИС.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ЗапроситьИдентификатораАбонентаВЭДОLite(Организация, ИНН)
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ОбщегоНазначенияИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии());
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ИдентификаторАбонента",          Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	ВозвращаемоеЗначение.Вставить("ОшибкаСервиса",                  Ложь);
	
	Если ПустаяСтрока(ИНН) Тогда
		ВызватьИсключение НСтр("ru = 'Внутренняя ошибка: В метод ЗапроситьСтатусРегистрацииУчастника не передан ИНН'");
	КонецЕсли;
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	URLЗапроса = СтрШаблон(
		"api/v4/true-api/edo/inn/%1",
		ИНН);
	РезультатЗапроса = ОбщегоНазначенияИСМП.ПолучитьДанныеИзСервиса(URLЗапроса, КлючСессии, ОбщегоНазначенияИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов(""));
	
	РезультатОтправкиЗапроса = ОбщегоНазначенияИСМП.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			// В случае успеха для v4:
			//	{
			//	"inn": "7777777777",
			//	"id": "2LT-572279988",
			//	"name": "ООО",
			//	"hub": true
			//	}
			
			ДанныеОбработки = ОбщегоНазначенияИСМП.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			ВозвращаемоеЗначение.ИдентификаторАбонента = ДанныеОбработки.id;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 400 Тогда
			
			ДанныеОбработки = ОбщегоНазначенияИСМП.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИС.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ВозвращаемоеЗначение.ТекстОшибки = ДанныеОбработки.error_message;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИС.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			ВозвращаемоеЗначение.ОшибкаСервиса = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИС.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#Область ПолучениеИнформацииОбЭД

Функция СтатусОбработкиДокументаВГИСМТПоИдентификаторуЭД(Организация, ИдентификаторЭлектронногоДокумента) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ОбщегоНазначенияИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("СтатусДокументаВСервисе",        Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	ВозвращаемоеЗначение.Вставить("ОшибкаСервиса",                  Ложь);
	
	Если ПустаяСтрока(ИдентификаторЭлектронногоДокумента) Тогда
		ВызватьИсключение НСтр("ru = 'Внутренняя ошибка: В метод СтатусОбработкиДокументаВГИСМТПоИдентификаторуЭД не передан Идентификатор'");
	КонецЕсли;
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	// 6.3. Метод получения содержимого документа по идентификатору
	URLЗапроса = СтрШаблон("api/v3/true-api/documents/%1/info", ИдентификаторЭлектронногоДокумента);
	
	РезультатЗапроса = ОбщегоНазначенияИСМП.ПолучитьДанныеИзСервиса(URLЗапроса, КлючСессии, ОбщегоНазначенияИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов(""));
	
	РезультатОтправкиЗапроса = ОбщегоНазначенияИСМП.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ОбщегоНазначенияИСМП.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИС.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ВозвращаемоеЗначение.СтатусДокументаВСервисе = ИнтерфейсИСМПСлужебный.СтатусДокумента(ДанныеОбработки.status);
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИС.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			ВозвращаемоеЗначение.ОшибкаСервиса = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИС.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция СтатусОбработкиУниверсальногоДокументаПоИдентификатору(Организация, ИдентификаторЭлектронногоДокумента) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ОбщегоНазначенияИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("Статус",                         Неопределено);
	ВозвращаемоеЗначение.Вставить("СписокОпераций",                 Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	ВозвращаемоеЗначение.Вставить("ОшибкаСервиса",                  Ложь);
	
	Если ПустаяСтрока(ИдентификаторЭлектронногоДокумента) Тогда
		ВызватьИсключение НСтр("ru = 'Внутренняя ошибка: В метод СтатусОбработкиУниверсальногоДокументаПоИдентификатору не передан Идентификатор'");
	КонецЕсли;
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	// 7.1 Метод получения квитанций результата обработки универсального документа по идентификатору документа
	URLЗапроса = СтрШаблон("api/v3/true-api/documents/edo/tpr/ud?fileId=%1", ИдентификаторЭлектронногоДокумента);
	
	РезультатЗапроса = ОбщегоНазначенияИСМП.ПолучитьДанныеИзСервиса(URLЗапроса, КлючСессии, ОбщегоНазначенияИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов(""));
	
	РезультатОтправкиЗапроса = ОбщегоНазначенияИСМП.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ОбщегоНазначенияИСМП.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИС.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
				ВозвращаемоеЗначение.ОшибкаСервиса = Истина;
				
			Иначе
				
				Если ДанныеОбработки.state = "SUCCESS" Тогда
					Статус = Перечисления.СтатусыДокументовИСМП.Проверен;
				ИначеЕсли ДанныеОбработки.state = "FAILED" Тогда
					Статус = Перечисления.СтатусыДокументовИСМП.ЕстьОшибки;
				ИначеЕсли ДанныеОбработки.state = "IN_PROGRESS" Тогда
					Статус = Перечисления.СтатусыДокументовИСМП.Обрабатывается;
				Иначе
					ВызватьИсключение СтрШаблон(НСтр("ru = 'Неизвестный статус документа: %1'"), ДанныеОбработки.state);
				КонецЕсли;
				
				ВозвращаемоеЗначение.Статус = Статус;
				
				Если Статус = Перечисления.СтатусыДокументовИСМП.ЕстьОшибки Тогда
					ВозвращаемоеЗначение.СписокОпераций = ДанныеОбработки.operations;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИС.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			ВозвращаемоеЗначение.ОшибкаСервиса = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИС.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
		ВозвращаемоеЗначение.ОшибкаСервиса = Истина;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область РазборКодовВозвращаемыхОшибокВКвитанции

Функция ОшибкиОперацийВыполненныхВСервисеПоДокументу(ПараметрыОбработки, СписокОпераций, ОписаниеПолей) Экспорт
	
	Если СписокОпераций = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не заполнен СписокОпераций'");
	КонецЕсли;
	
	ДанныеПоОшибкамШтрихкода = Новый ТаблицаЗначений;
	ДанныеПоОшибкамШтрихкода.Колонки.Добавить("Штрихкод",  Новый ОписаниеТипов("Строка"));
	ДанныеПоОшибкамШтрихкода.Колонки.Добавить("Описание",  Новый ОписаниеТипов("Строка"));
	ДанныеПоОшибкамШтрихкода.Колонки.Добавить("КодОшибки", Новый ОписаниеТипов("Число"));
	
	ДанныеПоШтрихкодам = Новый Структура;
	ДанныеПоШтрихкодам.Вставить("ДанныеПоОшибкамШтрихкода", ДанныеПоОшибкамШтрихкода);
	ДанныеПоШтрихкодам.Вставить("СтрокиШтрихкодов",         Новый Соответствие);
	
	ОшибкиОперацийПоДокументу = Новый Соответствие;
	ОшибкиОперацийПоДокументу.Вставить("ДанныеПоШтрихкодам",  ДанныеПоШтрихкодам);
	ОшибкиОперацийПоДокументу.Вставить("ОбщиеОшибки",         Новый Соответствие);
	ОшибкиОперацийПоДокументу.Вставить("ДатаПоследнейОшибки", '00010101');
	
	ЕстьОшибки = Ложь;
	Если ОписаниеПолей.ЭтоСписокОпераций Тогда
		ОбработатьСписокОпераций(СписокОпераций, ОшибкиОперацийПоДокументу, ПараметрыОбработки.РеквизитыДокумента, ЕстьОшибки);
	Иначе
		ЕстьОшибки = Истина;
		ОбработатьОшибкиПредварительнойПроверки(СписокОпераций, ОшибкиОперацийПоДокументу, ПараметрыОбработки);
	КонецЕсли;
	
	Если Не ЕстьОшибки Тогда
		ВызватьИсключение НСтр("ru = 'Документ не содержит ошибок'");
	КонецЕсли;
	
	Возврат ОшибкиОперацийПоДокументу;
	
КонецФункции

Процедура ОбработатьСписокОпераций(СписокОпераций, ОшибкиОперацийПоДокументу, РеквизитыДокумента, ЕстьОшибки)
	
	Для Каждого ТекущаяОперация Из СписокОпераций Цикл
		
		Если  Не ТекущаяОперация.Свойство("details")
			Или НРег(ТекущаяОперация.details.successful) = "true" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяОперация.details.Свойство("errors") Тогда
			
			ОшибкиОбработкиДокумента = ТекущаяОперация.details.errors;
			
			ОбработатьОшибки(ОшибкиОбработкиДокумента, ОшибкиОперацийПоДокументу, РеквизитыДокумента);
			
			ЕстьОшибки = Истина;
			
			Если ТекущаяОперация.Свойство("operationDate") Тогда
				
				ДатаОшибки = ОбщегоНазначенияИС.ДатаИзСтроки(ТекущаяОперация.operationDate);
				
				Если ДатаОшибки > ОшибкиОперацийПоДокументу["ДатаПоследнейОшибки"] Тогда
					
					ОшибкиОперацийПоДокументу["ДатаПоследнейОшибки"] = ДатаОшибки;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

Процедура ОбработатьОшибки(ОшибкиОбработкиДокумента, ОшибкиОперацийПоДокументу, РеквизитыДокумента)

	Для Каждого ТекущаяОшибка Из ОшибкиОбработкиДокумента Цикл
					
		КодОшибки      = ТекущаяОшибка.code;
		ОписаниеОшибки = ТекущаяОшибка.data;
		
		ОбработатьОшибкуОперацииВыполненнойВСервисеПоДокументу(КодОшибки, ОписаниеОшибки, ОшибкиОперацийПоДокументу, РеквизитыДокумента)
		
	КонецЦикла;

КонецПроцедуры

Процедура ОбработатьОшибкиПредварительнойпроверки(ОшибкиОбработкиДокумента, ОшибкиОперацийПоДокументу, ПараметрыОбработки)

	Для Каждого ТекущаяОшибка Из ОшибкиОбработкиДокумента Цикл
					
		КодОшибки      = ТекущаяОшибка["code"];
		КМ             = ТекущаяОшибка["cis"];
		Упаковка       = ТекущаяОшибка["pack"];
		
		ОписаниеОшибки = Новый Структура;
		Если ЗначениеЗаполнено(КМ) Тогда
			ОписаниеОшибки.Вставить("cis", ОбщегоНазначенияКлиентСервер.ЗначениевМассиве(КМ));
		КонецЕсли;
				
		Если ЗначениеЗаполнено(Упаковка) Тогда
			ОписаниеОшибки.Вставить("pack", ОбщегоНазначенияКлиентСервер.ЗначениевМассиве(Упаковка));
		КонецЕсли;
		
		ТекущаяОшибкаПредставление = СтрЗаменить(ТекущаяОшибка["description"], ПараметрыОбработки.Идентификатор, "");
		
		ОписаниеОшибки.Вставить("Представление", ТекущаяОшибкаПредставление);
		
		ОбработатьОшибкуОперацииВыполненнойВСервисеПоДокументу(КодОшибки, ОписаниеОшибки, ОшибкиОперацийПоДокументу, ПараметрыОбработки.РеквизитыДокумента)
		
	КонецЦикла;

КонецПроцедуры

Процедура ОбработатьОшибкуОперацииВыполненнойВСервисеПоДокументу(КодОшибки, ОписаниеОшибки, ОшибкиОперацийПоДокументу, РеквизитыДокумента)
	
	Если ОписаниеОшибки.Свойство("Представление") И ЗначениеЗаполнено(ОписаниеОшибки.Представление) Тогда
		СообщениеОбОшибке = ОписаниеОшибки.Представление;
	Иначе
		СообщениеОбОшибке = СформироватьПредставлениеОшибкиОперацииВыполненнойВСервисеПоДокументу(
			КодОшибки, ОписаниеОшибки, РеквизитыДокумента);
	КонецЕсли;
	
	Если КодыОшибокВКвитанцииПоКодамМаркировки().Найти(КодОшибки) <> Неопределено Тогда
		
		ДанныеПоОшибкамШтрихкода = ОшибкиОперацийПоДокументу["ДанныеПоШтрихкодам"]["ДанныеПоОшибкамШтрихкода"];
		СтрокиШтрихкодов         = ОшибкиОперацийПоДокументу["ДанныеПоШтрихкодам"].СтрокиШтрихкодов;
		
		Штрихкоды = Новый Массив;
		Если ОписаниеОшибки.Свойство("cis") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Штрихкоды, ОписаниеОшибки.cis);
		КонецЕсли;
		Если ОписаниеОшибки.Свойство("pack") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Штрихкоды, ОписаниеОшибки.pack);
		КонецЕсли;
			
		Если ОписаниеОшибки.Свойство("gtin") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Штрихкоды, ОписаниеОшибки.gtin);
		КонецЕсли;
		
		Для Каждого Штрихкод Из Штрихкоды Цикл
			
			Строка = СтрокиШтрихкодов[Штрихкод];
			
			Если Строка = Неопределено Тогда
				
				Строка = ДанныеПоОшибкамШтрихкода.Добавить();
				Строка.Штрихкод  = Штрихкод;
				Строка.КодОшибки = КодОшибки;
				
				СтрокиШтрихкодов[Штрихкод] = Строка;
				
			Иначе
				
				Строка.Описание = Строка.Описание + Символы.ПС;
				
			КонецЕсли;
			
			Строка.Описание = Строка.Описание + СообщениеОбОшибке;
			
		КонецЦикла;
		
	Иначе
		
		ОшибкиОперацийПоДокументу["ОбщиеОшибки"].Вставить(КодОшибки, СообщениеОбОшибке);
		
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьПредставлениеОшибкиОперацииВыполненнойВСервисеПоДокументу(КодОшибки, ОписаниеОшибки, РеквизитыДокумента)
	
	//participant - Массив - ИНН участника оборота товаров. Для кодов ошибок: 13 и 102
	//cis         - Массив - Список кодов идентификации, из-за которых возникла ошибка обработки документа. Для кодов ошибок: 22, 23, 24 и 79
	//pack        - Массив - Список кодов упаковок, из-за которых возникла ошибка обработки документа. Для кодов ошибок: 22, 23, 24 и 79
	//invoice     - Строка - Номер документа. Для кодов ошибок: 16, 63 и 64
	//invoiceDate - Строка - Дата документа. Для кодов ошибок: 16, 63 и 64
	//fixnumber   - Строка - Номер исправления. Для кода ошибки 82
	//fixDate     - Строка - Дата исправления. Для кода ошибки 82
	
	Если КодОшибки = 4 Тогда
		
		СообщениеОбОшибке = НСтр("ru = 'Документ с таким номером уже зарегистрирован в ГИС МТ'");
	
	ИначеЕсли КодОшибки = 8 Тогда
		
		СообщениеОбОшибке = НСтр("ru = ' Значение поля не найдено в списке допустимых'");
		
	ИначеЕсли КодОшибки = 10 Тогда
		
		СообщениеОбОшибке = НСтр("ru = 'Продавец не зарегистрирован в ГИС МТ'");
		
	ИначеЕсли КодОшибки = 12 Тогда
		
		СообщениеОбОшибке = НСтр("ru = 'Покупатель не зарегистрирован в ГИС МТ'");
		
	ИначеЕсли КодОшибки = 13 Тогда
		
		ИННУчастникаОборотаTоваров = ОписаниеОшибки.participant;
		
		СообщениеОбОшибке = СтрШаблон(
			НСтр("ru = 'Участник(и) (ИНН: {ИНН}) не зарегистрирован(ы) в ГИС МТ'"),
			СтрСоединить(ИННУчастникаОборотаTоваров, ","));
		
	ИначеЕсли КодОшибки = 14 Тогда
		
		СообщениеОбОшибке = НСтр("ru = 'УПД/УКД зарегистрирован в ГИС МТ ранее'");
		
	ИначеЕсли КодОшибки = 16 Тогда
		
		НомерДокумента = ОписаниеОшибки.invoice;
		ДатаДокумента  = ОписаниеОшибки.invoiceDate;
		
		СообщениеОбОшибке = СтрШаблон(
			НСтр("ru = 'УКД №%1 от %2 не обработан. Не найден исходный УПД в ГИС МТ'"),
			СтрСоединить(НомерДокумента), СтрСоединить(ДатаДокумента));
		
	ИначеЕсли КодОшибки = 22 Тогда
		
		СообщениеОбОшибке = НСтр("ru = 'Код идентификации не найден в ГИС МТ'");
		
	ИначеЕсли КодОшибки = 23 Тогда
		
		СообщениеОбОшибке = НСтр("ru = 'У участника оборота товаров нет полномочий на выполнение операции с кодом(ами) идентификации'");
		
	ИначеЕсли КодОшибки = 24 Тогда
		
		СообщениеОбОшибке = НСтр("ru = 'Статус кода маркировки не соответствует выполняемой операции'");
			
	ИначеЕсли КодОшибки = 25 Тогда
		
		СообщениеОбОшибке = НСтр("ru = 'Коды идентификации не принадлежат товарной группе'");
		
	ИначеЕсли КодОшибки = 26 Тогда
		
		ИННУчастникаОборотаTоваров = ОписаниеОшибки.participant;
		
		СообщениеОбОшибке = СтрШаблон(
			НСтр("ru = 'Участник ИНН %1 не зарегистрирован в ЕГРИП/ЕГРЮЛ как действующее лицо'"),
			СтрСоединить(ИННУчастникаОборотаTоваров, ","));
	
	ИначеЕсли КодОшибки = 38 Тогда
		
		СообщениеОбОшибке = НСтр("ru = 'Код идентификации не имеет вложений'");
	
	ИначеЕсли КодОшибки = 41 Тогда
		
		СообщениеОбОшибке = НСтр("ru = 'Недостаточное описание товара'");

	ИначеЕсли КодОшибки = 41 Тогда
		
		СообщениеОбОшибке = НСтр("ru = 'Ошибка валидации документа по XSD-схеме'");
		
	ИначеЕсли КодОшибки = 46 Тогда
		
		СообщениеОбОшибке = НСтр("ru = 'Содержание или имя документа некорректно'");
		
	ИначеЕсли КодОшибки = 54 Тогда
		
		СообщениеОбОшибке = НСтр("ru = 'Не заполнена дата исправления'");
	
	ИначеЕсли КодОшибки = 60 Тогда
		
		СообщениеОбОшибке = НСтр("ru = 'Продукция с GTIN незарегистрирована в Национальном каталоге маркированных товаров'");
		
	ИначеЕсли КодОшибки = 63 Тогда
		
		НомерДокумента = ОписаниеОшибки.invoice;
		ДатаДокумента  = ОписаниеОшибки.invoiceDate;
		
		СообщениеОбОшибке = СтрШаблон(
			НСтр("ru = 'УПД №%1 от %2 не обработан. Данный документ зарегистрирован в ГИС МТ ранее, либо был проведен УПДи'"),
			СтрСоединить(НомерДокумента), СтрСоединить(ДатаДокумента));
		
	ИначеЕсли КодОшибки = 64 Тогда
		
		НомерДокумента = ОписаниеОшибки.invoice;
		ДатаДокумента  = ОписаниеОшибки.invoiceDate;
		
		СообщениеОбОшибке = СтрШаблон(
			НСтр("ru = 'УПДи №%1 от %2 не обработан. Был проведен УПДи с более поздними номером или датой исправления'"),
			СтрСоединить(НомерДокумента), СтрСоединить(ДатаДокумента));
		
	ИначеЕсли КодОшибки = 68 Тогда
		
		СообщениеОбОшибке = НСтр("ru = 'Код маркировки не оплачен'");
		
	ИначеЕсли КодОшибки = 69 Тогда
		
		СообщениеОбОшибке = НСтр("ru = 'Содержание или имя документа некорректно. Не смогли распарсить'");
		
	ИначеЕсли КодОшибки = 71 Тогда
		
		СообщениеОбОшибке = НСтр("ru = 'Содержание документа некорректно'");
		
	ИначеЕсли КодОшибки = 72 Тогда
		
		СообщениеОбОшибке = НСтр("ru = 'Некорректный тип документа'");
			
	ИначеЕсли КодОшибки = 75 Тогда
		
		СообщениеОбОшибке = НСтр("ru = 'Код маркировки имеет некорректный тип эмиссии'");
		
	ИначеЕсли КодОшибки = 76 Тогда
		
		СообщениеОбОшибке = НСтр("ru = 'Документ не найден'");
		
	ИначеЕсли КодОшибки = 77 Тогда
		
		СообщениеОбОшибке = НСтр("ru = 'Документ, аннулирующий УПД, не валидный'");
			
	ИначеЕсли КодОшибки = 79 Тогда
		
		СообщениеОбОшибке = НСтр("ru = 'Код идентификации некорректный.'");
		
	ИначеЕсли КодОшибки = 81 Тогда
		
		СообщениеОбОшибке = НСтр("ru = 'Код маркировки отсутствует в цепочке универсальных документов'");
		
	ИначеЕсли КодОшибки = 82 Тогда
		
		НомерИсправления = ОписаниеОшибки.fixnumber;
		ДатаИсправления  = ОписаниеОшибки.fixDate;
		
		СообщениеОбОшибке = СтрШаблон(
			НСтр("ru = 'УПДи не обработан. Данный документ (№ исправления: {%1}, дата исправления: {%2}) зарегистрирован в ГИС МТ ранее'"),
			СтрСоединить(НомерИсправления), СтрСоединить(ДатаИсправления));
	
	ИначеЕсли КодОшибки = 83 Тогда
		
		СообщениеОбОшибке = НСтр("ru = 'Некорректная последовательность УД для Кода Маркировки'");
		
	ИначеЕсли КодОшибки = 110 Тогда
		
		СообщениеОбОшибке = НСтр("ru = 'Некорректный статус документа'");
		
	ИначеЕсли КодОшибки = 116 Тогда
		
		СообщениеОбОшибке = НСтр("ru = 'Участник оборота товаров не может перемещать Код Маркировки, не введенный в оборот'");
	
	ИначеЕсли КодОшибки = 117 Тогда
		
		СообщениеОбОшибке = НСтр("ru = 'Код маркировки эмитирован'");
		
	ИначеЕсли КодОшибки = 123 Тогда
		
		СообщениеОбОшибке = НСтр("ru = 'Документ основание обработан с ошибкой или не найден. Массив кодов для движения пуст'");
	
	ИначеЕсли КодОшибки = 141 Тогда
		
		СообщениеОбОшибке = НСтр("ru = 'Товарная группа в карточке товара не подходит для Объемно-сортового учёта'");
		
	ИначеЕсли КодОшибки = 146 Тогда
		ИННУчастникаОборотаTоваров = ОписаниеОшибки.participant;
		
		СообщениеОбОшибке = СтрШаблон(
			НСтр("ru = 'Код маркировки уже отгружен/продан на участника оборота (ИНН %1)'"),
			СтрСоединить(ИННУчастникаОборотаTоваров, ","));
		
	ИначеЕсли КодОшибки = 177 Тогда
	
		СообщениеОбОшибке = НСтр("ru = 'Попытка возврата продавцу кодов маркировки, проданных покупателем'");
	
	ИначеЕсли КодОшибки = 190 Тогда
		
		СообщениеОбОшибке = НСтр("ru = 'Неверное указание данных в регулярном выражении'");
		
	Иначе
		
		СообщениеОбОшибке =  СтрШаблон(
			НСтр("ru = 'Неизвестная ошибка. Код ошибки %1'"),
			КодОшибки);
		
	КонецЕсли;
	
	Возврат СообщениеОбОшибке;
	
КонецФункции

Функция КодыОшибокВКвитанцииПоКодамМаркировки()
	
	КодыОшибок = Новый Массив;
	КодыОшибок.Добавить(18);
	КодыОшибок.Добавить(19);
	КодыОшибок.Добавить(20);
	КодыОшибок.Добавить(22);
	КодыОшибок.Добавить(23);
	КодыОшибок.Добавить(24);
	КодыОшибок.Добавить(25);
	КодыОшибок.Добавить(38);
	КодыОшибок.Добавить(41);
	КодыОшибок.Добавить(60);
	КодыОшибок.Добавить(68);
	КодыОшибок.Добавить(75);
	КодыОшибок.Добавить(79);
	КодыОшибок.Добавить(117);
	КодыОшибок.Добавить(141);
	КодыОшибок.Добавить(146);
	
	Возврат КодыОшибок;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли