#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка) 
	
	СсылкаНаИнструкциюСервиса = ИнтеграцияShare.СсылкаНаИнструкциюСервиса();
	
	УстановитьВидимостьФормыПриОткрытии(Элементы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПодсказкаКакПолучитьСсылкуОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьНавигационнуюСсылку(СсылкаНаИнструкциюСервиса);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНеУдалосьЗагрузитьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьНавигационнуюСсылку(СсылкаДляСкачиванияДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиПоСсылкеНажатие(Элемент)
	
	ОткрытьНавигационнуюСсылку(СсылкаДляСкачиванияДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеДокументаВОблакеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьНавигационнуюСсылку(СсылкаДляСкачиванияДокумента);

КонецПроцедуры

&НаКлиенте
Процедура СсылкаДляСкачиванияДокументаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УстановитьВидимостьФормыПриОткрытии(Элементы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗагрузитьДокумент(Команда)
	
	Отказ = Ложь;
	ПроверитьВалидностьСсылкиНаДокумент(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДоступКДокументуЗакрыт = Ложь;
	ДокументНеНайден       = Ложь;
	
	ЭлементСписка = СпособОтраженияВУчетеПоКомандам.НайтиПоЗначению(Команда.Имя);
	Если ЭлементСписка <> Неопределено Тогда
		СпособОтраженияВУчете = ЭлементСписка.Представление;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатПоискаДокументаПоПубличнойССылке", ЭтотОбъект);
	
	ОписаниеПараметров = ИнтеграцияShareКлиент.НовоеОписаниеПараметровПроцедурыВыполненияВФоне();
	ОписаниеПараметров.ВладелецФормы           = ЭтотОбъект;
	ОписаниеПараметров.УникальныйИдентификатор = УникальныйИдентификатор;
	ОписаниеПараметров.ОписаниеПриЗавершении   = Оповещение;
	
	ИнтеграцияShareКлиент.ЗагрузитьДанныеДокументаПоПубличнойСсылкеВФоне(СсылкаДляСкачиванияДокумента, ОписаниеПараметров);
	
	УстановитьВидимостьОжидания(ЭтотОбъект, Элементы, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСсылкуНаОбъект(Команда)
	
	Закрыть();
	ПоказатьЗначение(, СсылкаНаОбъектУчета);

КонецПроцедуры

&НаКлиенте
Процедура НайтиДокумент(Команда)
	
	Отказ = Ложь;
	ПроверитьВалидностьСсылкиНаДокумент(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьСтраницуПоискаДокумента();
	
	ПодключитьОбработчикОжидания("Подключаемый_ПоискДокументаПоПубличнойСсылке", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбработатьРезультатПоискаДокументаПоПубличнойСсылке(Результат, ДополнительныеПараметры) Экспорт
	
	ДанныеДокумента = ИнтеграцияShareКлиент.РезультатОперацииВФоне(Результат);
	
	Если ДанныеДокумента = Неопределено Тогда
		УстановитьВидимостьОшибок(ЭтотОбъект, Элементы, Истина);
		Возврат;
	КонецЕсли;
	
	ДоступКДокументуЗакрыт = ДанныеДокумента.ДоступКДокументуЗакрыт;
	ДокументНеНайден       = ДанныеДокумента.ДокументНеНайден;
	
	Если ДоступКДокументуЗакрыт Или ДокументНеНайден Тогда
		УстановитьВидимостьОшибок(ЭтотОбъект, Элементы, Истина);
		Возврат;
	КонецЕсли;
	
	ДанныеДокумента.СпособОтраженияВУчете = СпособОтраженияВУчете;
	
	СтандартнаяОбработка = Истина;
	ИнтеграцияShareКлиентПереопределяемый.ПриЗагрузкеДокументаПоСсылке(ДанныеДокумента, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка = Ложь Тогда
		Закрыть();
		Возврат;
	КонецЕсли;
	
	ДанныеЗагрузки = ДанныеДокумента.ДанныеЗагрузкиДокумента;
	Если ЗначениеЗаполнено(ДанныеЗагрузки)
		И ЗначениеЗаполнено(ДанныеЗагрузки.ОбъектУчета) Тогда
		Закрыть(); // Сначала закрываем форму загрузки, после открываем объект учета.
		ПоказатьЗначение(Неопределено, ДанныеЗагрузки.ОбъектУчета);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатЗагрузкиДокументаЗавершение", ЭтотОбъект);
	
	ОписаниеПараметров = ИнтеграцияShareКлиент.НовоеОписаниеПараметровПроцедурыВыполненияВФоне();
	ОписаниеПараметров.ВладелецФормы           = ЭтотОбъект;
	ОписаниеПараметров.УникальныйИдентификатор = УникальныйИдентификатор;
	ОписаниеПараметров.ОписаниеПриЗавершении   = Оповещение;
	
	ИнтеграцияShareКлиент.ЗагрузитьЭлектронныйДокументВОбъектУчетаВФоне(ДанныеДокумента, ОписаниеПараметров);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатЗагрузкиДокументаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДанныеДокумента = ИнтеграцияShareКлиент.РезультатОперацииВФоне(Результат);
	
	Если ДанныеДокумента = Неопределено Тогда
		УстановитьВидимостьОшибок(ЭтотОбъект, Элементы, Истина);
		Возврат;
	КонецЕсли;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ОбработатьРезультатЗагрузкиДокументаЗавершение", ЭтотОбъект);
	
	Если ДанныеДокумента.ТребуетсяСопоставлениеНоменклатуры Тогда
		
		ДанныеДокумента.ТребуетсяСопоставлениеНоменклатуры = Ложь;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ДанныеДокумента", ДанныеДокумента);
		ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
		ДополнительныеПараметры.Вставить("ЕстьФормаВладелец", Истина);

		Оповещение= Новый ОписаниеОповещения("ЗагрузитьЭлектронныйДокументПослеСопоставления", ИнтеграцияShareКлиент,
			ДополнительныеПараметры);

		ИнтеграцияShareКлиент.ОткрытьФормуСопоставленияНоменклатурыПриЗагрузкиДокумента(ДанныеДокумента, Оповещение);
		
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеДокумента.ДокументУчета) Тогда
		Закрыть(); // Сначала закрываем форму загрузки, после открываем объект учета.
		ПоказатьЗначение(Неопределено, ДанныеДокумента.ДокументУчета);
		ИнтеграцияShareКлиент.ПослеЗагрузкиДокументаПоСсылке(ДанныеДокумента);
		Возврат;
	КонецЕсли;
	
	ИнтеграцияShareКлиент.СоздатьВУчетеЭлектронныйДокумент(ЭтотОбъект, УникальныйИдентификатор, ДанныеДокумента,
		ОповещениеПриЗавершении);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоискДокументаПоПубличнойСсылке()

	ПоискДокументаПоПубличнойСсылке();
	
КонецПроцедуры

&НаСервере
Процедура ПоискДокументаПоПубличнойСсылке()
	
	РезультаПоиска = ИнтеграцияShare.РезультатПоискаДокументаПоПубличнойСсылке(СсылкаДляСкачиванияДокумента);
	
	ОчиститьДанныеФормыПоСсылке();
	ОчиститьКомандыВПодменюЗагрузитьКак();
	Если РезультаПоиска = Неопределено Тогда
		УстановитьВидимостьРезультатаПоиска(Истина);
		Возврат;
	КонецЕсли;
	
	ОписаниеЭлектронногоДокумента = РезультаПоиска.ОписаниеЭлектронногоДокумента;
	Если ОписаниеЭлектронногоДокумента.ДоступКДокументуЗакрыт Или ОписаниеЭлектронногоДокумента.ДокументНеНайден Тогда
		ДоступКДокументуЗакрыт = ОписаниеЭлектронногоДокумента.ДоступКДокументуЗакрыт;
		ДокументНеНайден = ОписаниеЭлектронногоДокумента.ДокументНеНайден;
		УстановитьВидимостьРезультатаПоиска(Истина);
		Возврат;
	КонецЕсли;
	
	ПараметрыОтраженияВУчете = РезультаПоиска.НастройкиЗагрузки.ПараметрыОтраженияВУчете;
	
	Если ПустаяСтрока(ОписаниеЭлектронногоДокумента.ТипДокумента) Тогда
		ТекстПричиныОшибки = СтрШаблон(НСтр("ru = 'Документ с типом ""%1"" не поддерживается.'", 
			ОбщегоНазначения.КодОсновногоЯзыка()),
			ОписаниеЭлектронногоДокумента.ТипЭлектронногоДокумента);
		УстановитьВидимостьРезультатаПоиска(Истина, ТекстПричиныОшибки);
		Возврат;
	КонецЕсли;
	
	ЕстьНесколькоСпособовОтражения = ПараметрыОтраженияВУчете.Количество() > 1;
	
	Для Каждого СтрокаПараметра Из ПараметрыОтраженияВУчете Цикл
		Если ЗначениеЗаполнено(СтрокаПараметра.СсылкаНаОбъектУчетаВБазе) Тогда
			СсылкаНаОбъектУчета = СтрокаПараметра.СсылкаНаОбъектУчетаВБазе;
		ИначеЕсли ЕстьНесколькоСпособовОтражения Тогда
			ИндексПараметра = ПараметрыОтраженияВУчете.Индекс(СтрокаПараметра);
			НаименованиеКоманды = СтрШаблон("ЗагрузитьКак_%1", ИндексПараметра);
			СоздатьКомандуВПодменюЗагрузитьКак(НаименованиеКоманды, СтрокаПараметра.ПредставлениеВПодменюЗагрузить,
				СтрокаПараметра.КартинкаВПодменюЗагрузить);

			СпособОтраженияВУчетеПоКомандам.Добавить(НаименованиеКоманды, СтрокаПараметра.СпособОтраженияВУчете);
		Иначе
			СпособОтраженияВУчете = СтрокаПараметра.СпособОтраженияВУчете;
		КонецЕсли;
		ПредставлениеДокумента = СтрокаПараметра.ПредставлениеДокумента;
	КонецЦикла;
	
	УстановитьВидимостьРезультатаПоиска();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКомандуВПодменюЗагрузитьКак(НаименованиеКоманды, ЗаголовокКоманды, КартинкаКоманды)
	
	Если Команды.Найти(НаименованиеКоманды) = Неопределено Тогда
		НоваяКоманда = Команды.Добавить(НаименованиеКоманды);
		НоваяКоманда.Действие = "ЗагрузитьДокумент";
	КонецЕсли;

	НовыйЭлемент = Элементы.Добавить(НаименованиеКоманды, Тип("КнопкаФормы"), Элементы.ЗагрузитьКак);
	НовыйЭлемент.ИмяКоманды                = НаименованиеКоманды;
	НовыйЭлемент.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанели;
	НовыйЭлемент.Заголовок                 = ЗаголовокКоманды;

	Если ЗначениеЗаполнено(КартинкаКоманды) Тогда
		НовыйЭлемент.Картинка = КартинкаКоманды;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьКомандыВПодменюЗагрузитьКак()
	
	Для Каждого ЭлементСписка Из СпособОтраженияВУчетеПоКомандам Цикл
		КнопкаЗагрузитьКак = Элементы.Найти(ЭлементСписка.Значение);
		
		Если КнопкаЗагрузитьКак <> Неопределено Тогда
			Элементы.Удалить(КнопкаЗагрузитьКак);
		КонецЕсли;
		
	КонецЦикла;
	
	СпособОтраженияВУчетеПоКомандам.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьДанныеФормыПоСсылке()
	
	ДокументНеНайден                  = Ложь;
	ДоступКДокументуЗакрыт            = Ложь;
	ЕстьНесколькоСпособовОтражения    = Ложь;
	СсылкаНаОбъектУчета               = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНавигационнуюСсылку(НавигационнаяСсылка)
	
	Если ПустаяСтрока(НавигационнаяСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(НавигационнаяСсылка);
	
КонецПроцедуры

#Область УправлениеВидимостьюФормы

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьОшибок(ОбъектФормы, ЭлементыФормы, Знач Видимость, Знач ТекстПричиныОшибки = "")
	
	Если Не ЭлементыФормы.ГруппаКакПолучитьСсылкуОшибка.Скрыта() Тогда
		ЭлементыФормы.ГруппаКакПолучитьСсылкуОшибка.Скрыть();
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, "СтраницыРезультатПоискаПоСсылке",
			"ТекущаяСтраница", ЭлементыФормы.СтраницаОшибок);

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, "ГруппаОшибкиЗагрузки", "Видимость",
		Видимость);
		
		Если ПустаяСтрока(ТекстПричиныОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, "ДекорацияТекстПричины",
			"Видимость", Ложь);
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, "ДекорацияТекстПричины",
			"Заголовок", ТекстПричиныОшибки);
		КонецЕсли;
		
	Если ОбъектФормы.ДокументНеНайден Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, "СтраницыОшибок",
			"ТекущаяСтраница", ЭлементыФормы.ДокументНеНайден);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, "ДоступЗакрыт", "Видимость", Ложь);
	ИначеЕсли ОбъектФормы.ДоступКДокументуЗакрыт Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, "СтраницыОшибок",
			"ТекущаяСтраница", ЭлементыФормы.ДоступЗакрыт);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, "ДоступЗакрыт", "Видимость", Истина);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, "СтраницыОшибок",
			"ТекущаяСтраница", ЭлементыФормы.ПерейтиКДокументуПриОшибке);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, "ДоступЗакрыт", "Видимость", Ложь);
	КонецЕсли;
	
	УстановитьВидимостьСтраницыРезультатПоискаПоСсылке(ЭлементыФормы);
	УстановитьВидимостьОжидания(ОбъектФормы, ЭлементыФормы, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтраницуПоискаДокумента()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаЗагрузитьДокумент",
		"Доступность", Ложь);
	
	Элементы.СтраницыРезультатПоискаПоСсылке.ТекущаяСтраница = Элементы.СтраницаПоиска;
	
	УстановитьВидимостьСтраницыРезультатПоискаПоСсылке(Элементы);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьВидимостьФормыПриОткрытии()
	
	УстановитьВидимостьФормыПриОткрытии(Элементы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьФормыПриОткрытии(ЭлементыФормы)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, "СтраницыРезультатПоискаПоСсылке",
		"ТекущаяСтраница", ЭлементыФормы.СтраницаПриОткрытии);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, "СтраницыКоманд", "ТекущаяСтраница",
		ЭлементыФормы.СтраницаНайти);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, "НайтиДокумент", "КнопкаПоУмолчанию",
		Истина);

	УстановитьВидимостьСтраницыРезультатПоискаПоСсылке(ЭлементыФормы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьСтраницыРезультатПоискаПоСсылке(ЭлементыФормы)
	
	Для Каждого Страница Из ЭлементыФормы.СтраницыРезультатПоискаПоСсылке.ПодчиненныеЭлементы Цикл
		Видимость = Страница = ЭлементыФормы.СтраницыРезультатПоискаПоСсылке.ТекущаяСтраница;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, Страница.Имя, "Видимость", Видимость);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьОжидания(ОбъектФормы, ЭлементыФормы, Знач Видимость)
	
	Если Видимость Тогда
		Страницаформы  = ЭлементыФормы.СтраницаОжидания;
		ЗаголовокФормы = " ";
	Иначе
		Страницаформы = ЭлементыФормы.СтраницаФормы;
		ЗаголовокФормы = НСтр("ru = 'Введите ссылку на документ'");
	КонецЕсли;
	
	Если ОбъектФормы.Заголовок <> ЗаголовокФормы Тогда
		ОбъектФормы.Заголовок = ЗаголовокФормы;
	КонецЕсли;
	
	ЭлементыФормы.СтраницыФормы.ТекущаяСтраница = Страницаформы;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьРезультатаПоиска(Знач ЕстьОшибка = Ложь, Знач ТекстПричиныОшибки = "")
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаЗагрузитьДокумент", "Доступность",
		Истина);

	Если ЗначениеЗаполнено(СсылкаНаОбъектУчета) Тогда
		Элементы.СтраницыКоманд.ТекущаяСтраница = Элементы.СтраницаОткрыть;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОткрытьСсылкуНаОбъект",
			"КнопкаПоУмолчанию", Истина);

		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтраницыРезультатПоискаПоСсылке",
			"ТекущаяСтраница", Элементы.СтраницаДокумента);
		Элементы.СтраницыНайденныхДокументов.ТекущаяСтраница = Элементы.СтраницаНайденоВБазе;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПредставлениеДокументаВБазе",
			"Заголовок", ПредставлениеДокумента);
	Иначе

		Если ДоступКДокументуЗакрыт Или ДокументНеНайден Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтраницыКоманд", "ТекущаяСтраница",
				Элементы.СтраницаНайти);

		Иначе
			Если ЕстьНесколькоСпособовОтражения Тогда
				Элементы.СтраницыКоманд.ТекущаяСтраница = Элементы.СтраницаЗагрузитьКак;
			Иначе
				Элементы.СтраницыКоманд.ТекущаяСтраница = Элементы.СтраницаЗагрузить;
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗагрузитьДокумент",
					"КнопкаПоУмолчанию", Истина);
			КонецЕсли;

		КонецЕсли;

		Если ЕстьОшибка Тогда
			УстановитьВидимостьОшибок(ЭтотОбъект, Элементы, Истина, ТекстПричиныОшибки);
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтраницыРезультатПоискаПоСсылке",
				"ТекущаяСтраница", Элементы.СтраницаДокумента);
			Элементы.СтраницыНайденныхДокументов.ТекущаяСтраница = Элементы.СтраницаНайденоВОблаке;
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПредставлениеДокументаВОблаке",
				"Заголовок", ПредставлениеДокумента);
		КонецЕсли;
	КонецЕсли;

	УстановитьВидимостьСтраницыРезультатПоискаПоСсылке(Элементы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВалидностьСсылкиНаДокумент(Отказ)
	
	ОчиститьСообщения();
	
	Если ПустаяСтрока(СсылкаДляСкачиванияДокумента) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не заполнена ссылка на документ'",
			ОбщегоНазначенияКлиент.КодОсновногоЯзыка()),
			, , "СсылкаДляСкачиванияДокумента");
		Отказ = Истина;
	ИначеЕсли Не ИнтеграцияShareКлиент.ЭтоДоменСервисаКороткихСсылокShare(СсылкаДляСкачиванияДокумента) Тогда
		ДокументНеНайден = Истина;
		УстановитьВидимостьОшибок(ЭтотОбъект, Элементы, Истина);
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти
