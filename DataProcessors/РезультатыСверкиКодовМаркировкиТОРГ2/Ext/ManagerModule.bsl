#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Вызывается из длительной операции по подготовке данных для формы проверки и подбора маркируемой продукции.
// 
// Параметры:
//	Параметры - Структура - содержит следующие значения:
// 	* ПроверкаНеПоДокументу            - Булево - признак получения данных не по ссылке на документ
// 	* ПроверяемыйДокумент              - ДокументСсылка - ссылка на документ, из формы которого открыта форма проверки и подбора
// 	* НачальныйСтатусПроверки          - ПеречислениеСсылка.СтатусыПроверкиНаличияПродукцииИС - статус наличия продукции, используемый при подготовке данных
// 	* ДетализацияСтруктурыХранения     - ПеречислениеСсылка.ДетализацияСтруктурыХраненияИС - значение детализации из формы проверки
// 	* РедактированиеФормыНедоступно    - Булево - признак запрета редактирования формы подбора
// 	* РежимПодбораСуществующихУпаковок - Булево - признак работы со штрихкодами упаковок, имеющимися в информационной базе
// 	* ПараметрыСканирования            - Структура - параметры обработки кодов маркировки, сформированные в форме проверки и подбора
// 	* ПараметрыПроверкиКодовМаркировки - Структура - параметры проверки кодов маркировки по статусу и владельцу, сформированные в форме проверки и подбора
// 	* КонтролироватьСканируемуюПродукциюПоДокументуОснованию - Булево - признак необходимости контроля наличия маркируемой продукции по основанию проверяемого документа
//	АдресРезультата - Строка - адрес временного хранилища, в которое будут помещены результаты выполнения
Процедура ЗагрузитьДанныеДокументаДлительнаяОперация(Параметры, АдресРезультата) Экспорт
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"Обработка.РезультатыСверкиКодовМаркировкиТОРГ2.МодульМенеджера.ЗагрузитьДанныеДокументаДлительнаяОперация");
	
	ДанныеДокумента = Новый Структура();
	ДанныеДокумента.Вставить("ДеревоМаркированнойПродукции",          ДеревоМаркированнойПродукции());
	ДанныеДокумента.Вставить("НачальныйСтатусПроверки",               Параметры.НачальныйСтатусПроверки);
	ДанныеДокумента.Вставить("ПроверкаЭлектронногоДокумента",         Параметры.ПроверкаЭлектронногоДокумента);
	ДанныеДокумента.Вставить("ДетализацияСтруктурыХранения",          Параметры.ДетализацияСтруктурыХранения);
	
	ДанныеДокумента.Вставить("СодержимоеУпаковокНедоступно",       Ложь);
	ДанныеДокумента.Вставить("СтрокаПродукцияБезУпаковки",         Неопределено);
	ДанныеДокумента.Вставить("СтрокаБлокиБезКоробки",              Неопределено);
	ДанныеДокумента.Вставить("СтрокаПродукцияОбъемноСортовойУчет", Неопределено);
	
	ДанныеДокумента.Вставить("Организация",                  Параметры.ПараметрыСканирования.Организация);
	ДанныеДокумента.Вставить("ПроверяемыйДокумент",          Параметры.ПроверяемыйДокумент);
	ДанныеДокумента.Вставить("СверкаПоДаннымКорректировки",  Параметры.СверкаПоДаннымКорректировки);
	
	ДанныеДокумента.Вставить("ТаблицаРасхожденийКодовМаркировки", СверкаКодовМаркировкиИСМП.ИнициализацияТаблицыШтрихкодыУпаковокПринятоИзлишекНедостача());
	ДанныеДокумента.Вставить("ДоступноСогласованиеРасхождений",   Параметры.ДоступноСогласованиеРасхождений);
	ДанныеДокумента.Вставить("ТаблицаРасхожденийПоДокументу",     СверкаКодовМаркировкиИСМП.ИнициализацияТаблицыШтрихкодыУпаковок(Истина));
	
	ДанныеДокумента.Вставить("ЭтоПродукцияМОТП",                  Ложь);
	ДанныеДокумента.Вставить("ПоддерживаетсяОбъемноСортовойУчет", Ложь);
	ДанныеДокумента.Вставить("ДополнительноеДействиеЗагрузки",    Неопределено);
	ДанныеДокумента.Вставить(
		"ВозможностьЗагрузкиДанныхБезПодключенияИСМП",
		Параметры.ВозможностьЗагрузкиДанныхБезПодключенияИСМП);
	
	Если Параметры.Свойство("ДанныеКлючаСессииИСМП") Тогда
		ПараметрыСеанса.ДанныеКлючаСессииИСМП = Параметры.ДанныеКлючаСессииИСМП;
	КонецЕсли;
	
	ДокументОснование = СверкаКодовМаркировкиИСМП.ОпределитьДокументОснованиеСверкиКодов(Параметры.ПроверяемыйДокумент); 
	Если ДокументОснование = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось определить документ-основание для сравнения кодов маркировки'");
	КонецЕсли;
	
	ДанныеДокумента.Вставить("ДокументОснование",       ДокументОснование);
	ДанныеДокумента.Вставить("НачальныйСтатусПроверки", Перечисления.СтатусыПроверкиНаличияПродукцииИС.Отсутствует);
	
	Если Не (ДанныеДокумента.СверкаПоДаннымКорректировки Или ДанныеДокумента.ДоступноСогласованиеРасхождений) Тогда 
		
		ВосстановитьДеревоДокументаПоРезультатамПроверки(Параметры, ДанныеДокумента, ОписаниеЗамера, АдресРезультата);
		
	Иначе
		
		ПараметрыСканирования = Параметры.ПараметрыСканирования;
		ПараметрыСканирования.СсылкаНаОбъект                                = ДокументОснование;
		ПараметрыСканирования.ИспользуетсяСоответствиеШтрихкодовСтрокДерева = Ложь;
		ПараметрыСканирования.ВыполняетсяЗагрузкаДанныхВФормуПроверкиИПодбораИСМП = Истина;
		
		Если ДанныеДокумента.СверкаПоДаннымКорректировки Тогда // УКД
			ТаблицаМаркируемойПродукцииДокументаОснования = СверкаКодовМаркировкиИСМП.ИнициализироватьТаблицуТоваровЗначенийШтрихкодов();
			СверкаКодовМаркировкиИСМП.ЗаполнитьТаблицуЗначенияШтрихкодовПродукцииПоДокументу(ДокументОснование, ТаблицаМаркируемойПродукцииДокументаОснования);
		ИначеЕсли ДанныеДокумента.ДоступноСогласованиеРасхождений Тогда // Акт о расхождениях после отгрузки
			ТаблицаМаркируемойПродукцииДокументаОснования = СверкаКодовМаркировкиИСМП.ТаблицаМаркируемойПродукцииДокумента(ДокументОснование);
			ТаблицаМаркируемойПродукцииДокументаОснования.Индексы.Добавить("ВидПродукции");
		КонецЕсли;
		
		Если ТаблицаМаркируемойПродукцииДокументаОснования.Количество() = 0 Тогда
			ВызватьИсключение НСтр("ru = 'Документ-основание не содежит маркируемой продукции для сравнения кодов маркировки'");
		КонецЕсли;
		
		ДеревоУпаковокДокументаОснования = ДеревоМаркированнойПродукции();
		
		ВидыПродукцииДокументаОснования = ТаблицаМаркируемойПродукцииДокументаОснования.ВыгрузитьКолонку("ВидПродукции");
		ВидыПродукцииДокументаОснования = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВидыПродукцииДокументаОснования);
		
		ЭтоПродукцияМОТП = ШтрихкодированиеОбщегоНазначенияИС.ПрисутствуетТабачнаяПродукция(ВидыПродукцииДокументаОснования);
		
		Если Не ЭтоПродукцияМОТП Тогда
			
			Для Каждого ВидПродукции Из ВидыПродукцииДокументаОснования Цикл
				Если ОбщегоНазначенияИСКлиентСерверПовтИсп.ВидПродукцииПоддерживаетОбъемноСортовойУчет(ВидПродукции) Тогда
					ДанныеДокумента.ПоддерживаетсяОбъемноСортовойУчет = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		СохраненнаяДетализацияСтруктурыХранения = СохраненнаяДетализацияСтруктурыХранения(ДанныеДокумента.ДоступноСогласованиеРасхождений);
		
		Если СохраненнаяДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковкиСПотребительскими Тогда
			СохраненнаяДетализацияСтруктурыХранения = Неопределено;
		КонецЕсли;
		
		Если СохраненнаяДетализацияСтруктурыХранения <> Неопределено Тогда 
			ПараметрыСканирования.ДетализацияСтруктурыХранения = СохраненнаяДетализацияСтруктурыХранения;
			ДанныеДокумента.ДетализацияСтруктурыХранения = СохраненнаяДетализацияСтруктурыХранения;
		КонецЕсли;
		
		ДляУпаковокТребоватьПодключениеИСМП = Истина;
		Если Параметры.ВозможностьЗагрузкиДанныхБезПодключенияИСМП = Истина Тогда
			ДляУпаковокТребоватьПодключениеИСМП = Ложь;
		КонецЕсли;
		
		Если ДанныеДокумента.СверкаПоДаннымКорректировки Тогда // сверка корректировки и ТОРГ2
			
			ПараметрыСканирования.СсылкаНаОбъект = ДокументОснование;
			
			ДанныеШтрихкодовСписок                = Новый Массив;
			СоответствиеШтрихкодовПоВидуПродукции = Новый Соответствие;
			ДобавленныеШтрихкоды                  = Новый Соответствие;
			
			Для Каждого СтрокаДанных Из ТаблицаМаркируемойПродукцииДокументаОснования Цикл
				
				Если ДобавленныеШтрихкоды[СтрокаДанных.ЗначениеШтрихкода] = Неопределено Тогда

					ДанныеШтрихкодовСписок.Добавить(
						Новый Структура("Штрихкод, Количество, ВидПродукции", СтрокаДанных.ЗначениеШтрихкода, 1, СтрокаДанных.ВидПродукции));
					ДобавленныеШтрихкоды[СтрокаДанных.ЗначениеШтрихкода] = Истина;

					ДанныеШтрихкодовПоВидуПродукции = СоответствиеШтрихкодовПоВидуПродукции[СтрокаДанных.ВидПродукции];
					Если ДанныеШтрихкодовПоВидуПродукции = Неопределено Тогда
						ДанныеШтрихкодовПоВидуПродукции = Новый Массив;
						СоответствиеШтрихкодовПоВидуПродукции[СтрокаДанных.ВидПродукции] = ДанныеШтрихкодовПоВидуПродукции;
					КонецЕсли;
					ДанныеШтрихкодовПоВидуПродукции.Добавить(
						Новый Структура("Штрихкод, Количество", СтрокаДанных.ЗначениеШтрихкода, 1));

				КонецЕсли;
				
			КонецЦикла;

			ПринудительноУстановитьДетализацию = ПроверкаИПодборПродукцииМОТП.ДетализацияНаОснованииСтатистикиПоШтрихкодам(
				ДанныеШтрихкодовСписок, ПараметрыСканирования, ДокументОснование, Неопределено);
			ПараметрыСканирования.ДетализацияСтруктурыХранения = ПринудительноУстановитьДетализацию;
			ДанныеДокумента.ДетализацияСтруктурыХранения       = ПринудительноУстановитьДетализацию;

			Для Каждого КлючИЗначение Из СоответствиеШтрихкодовПоВидуПродукции Цикл
				
				ВидПродукции           = КлючИЗначение.Ключ;
				ДанныеШтрихкодовСписок = КлючИЗначение.Значение;
				
				ПараметрыСканирования.ДопустимыеВидыПродукции.Очистить();
				ПараметрыСканирования.ДопустимыеВидыПродукции.Добавить(ВидПродукции);
				
				Если ЭтоПродукцияМОТП Тогда
					РезультатПолученияДанных = ШтрихкодированиеМОТП.ВложенныеШтрихкоды(
						ДанныеШтрихкодовСписок, ПараметрыСканирования, ДляУпаковокТребоватьПодключениеИСМП, Истина);
				Иначе
					РезультатПолученияДанных = ШтрихкодированиеИСМПСлужебный.ВложенныеШтрихкоды(
						ДанныеШтрихкодовСписок, ПараметрыСканирования, ДляУпаковокТребоватьПодключениеИСМП, Истина);
				КонецЕсли;
				
				Если РезультатПолученияДанных.ЕстьОшибки Тогда
					ВызватьИсключение РезультатПолученияДанных.ТекстОшибки;
				ИначеЕсли РезультатПолученияДанных = Неопределено Тогда
					ВызватьИсключение НСтр("ru = 'Не удалось получить данные штрихкодов в сервисе ИС МП'");
				ИначеЕсли ПрерватьОбработкуЗагрузкиДанных(
					ДанныеДокумента,
					ПараметрыСканирования,
					РезультатПолученияДанных) Тогда

					ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 0);
					ПоместитьВоВременноеХранилище(ДанныеДокумента, АдресРезультата);
					Возврат;

				КонецЕсли;
				
				Если РезультатПолученияДанных.ВложенныеШтрихкоды <> Неопределено 
					И РезультатПолученияДанных.ВложенныеШтрихкоды.Свойство("ДеревоУпаковок") Тогда
					ДополнитьДеревоМаркированнойПродукции(
						РезультатПолученияДанных.ВложенныеШтрихкоды.ДеревоУпаковок,
						ДеревоУпаковокДокументаОснования);
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе

			ШтрихкодыУпаковокПоДокументу = ШтрихкодированиеМОТП.ШтрихкодыУпаковокИзДокумента(
				ДокументОснование, ПараметрыСканирования);
			ПринудительноУстановитьДетализацию = ПроверкаИПодборПродукцииМОТП.ДетализацияНаОснованииСтатистикиПоШтрихкодам(
				ШтрихкодыУпаковокПоДокументу, ПараметрыСканирования, ДокументОснование, ВидыПродукцииДокументаОснования[0]);

			ПараметрыСканирования.ДетализацияСтруктурыХранения = ПринудительноУстановитьДетализацию;
			ДанныеДокумента.ДетализацияСтруктурыХранения       = ПринудительноУстановитьДетализацию;

			Если ЭтоПродукцияМОТП Тогда
				РезультатПолученияДанных = ШтрихкодированиеМОТП.ВложенныеШтрихкодыУпаковокПоДокументу(
					ДокументОснование, ПараметрыСканирования, Истина);
			Иначе
				РезультатПолученияДанных = ШтрихкодированиеИСМП.ВложенныеШтрихкодыУпаковокПоДокументу(
					ДокументОснование, ПараметрыСканирования, Истина);
			КонецЕсли;
			
			ВидыПродукцииШтрихкодовУпаковок = Новый Соответствие;
			Для Каждого СтрокаДерева Из РезультатПолученияДанных.ВложенныеШтрихкоды.ДеревоУпаковок.Строки Цикл
				Если ВидыПродукцииШтрихкодовУпаковок[СтрокаДерева.ВидПродукции] = Неопределено Тогда
					ВидыПродукцииШтрихкодовУпаковок.Вставить(СтрокаДерева.ВидПродукции, Истина);
				КонецЕсли;
			КонецЦикла;
	
			ДанныеНоменклатурыПоДаннымУПД = ПроверкаИПодборПродукцииИСМП.ДанныеНоменклатурыПоДаннымУПД(
				ДокументОснование, ВидыПродукцииДокументаОснования[0]);
			
			ДанныеШтрихкодовАвтоОСУ = Новый Массив;
			Для Каждого СтрокаДанных Из ДанныеНоменклатурыПоДаннымУПД.ШтрихкодНоменклатураТаблица Цикл
				Если ВидыПродукцииШтрихкодовУпаковок[СтрокаДанных.ВидПродукции] <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ДанныеШтрихкодовАвтоОСУ.Добавить(
					Новый Структура("Штрихкод, Количество", СтрокаДанных.ЗначениеШтрихкода, 1));
			КонецЦикла;
			
			РезультатПолученияДанныхАвтоОСУ = ШтрихкодированиеИСМПСлужебный.ВложенныеШтрихкоды(
				ДанныеШтрихкодовАвтоОСУ, ПараметрыСканирования, Ложь, Истина);
			
			Для Каждого СтрокаДереваАвтоОСУ Из РезультатПолученияДанныхАвтоОСУ.ВложенныеШтрихкоды.ДеревоУпаковок.Строки Цикл
				НоваяСтрокаДерева = РезультатПолученияДанных.ВложенныеШтрихкоды.ДеревоУпаковок.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаДерева, СтрокаДереваАвтоОСУ);
			КонецЦикла;
			
			Если РезультатПолученияДанных.ЕстьОшибки Тогда
				ВызватьИсключение РезультатПолученияДанных.ТекстОшибки;
			ИначеЕсли РезультатПолученияДанных = Неопределено Тогда
				ВызватьИсключение НСтр("ru = 'Не удалось получить данные штрихкодов по документу'");
			КонецЕсли;
			
			Если РезультатПолученияДанных.ВложенныеШтрихкоды <> Неопределено 
				И РезультатПолученияДанных.ВложенныеШтрихкоды.Свойство("ДеревоУпаковок") Тогда
				
				ДеревоУпаковокДокументаОснования = РезультатПолученияДанных.ВложенныеШтрихкоды.ДеревоУпаковок;
				
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыСканирования.СсылкаНаОбъект                                = Параметры.ПроверяемыйДокумент;

		Если Параметры.ПроверкаЭлектронногоДокумента И Параметры.ДоступноСогласованиеРасхождений Тогда
			ТипЭД = "ТОРГ2";
		ИначеЕсли СверкаКодовМаркировкиИСМП.ЭтоДокументКорректировкаПриобретенияПоСогласованиюСторон(Параметры.ПроверяемыйДокумент) Тогда
			ТипЭД = "УКД";
		Иначе // исправительный УПД
			ТипЭД = "УПД"
		КонецЕсли;

		ДанныеНоменклатурыПоДаннымЭДО = ШтрихкодированиеИСМПСлужебный.ДанныеМаркируемойНоменклатурыКодовМаркировкиПоДаннымЭДО(
			Параметры.ПроверяемыйДокумент,
			ТипЭД);

		ТаблицаМаркируемойПродукции = Параметры.ТаблицаМаркируемойПродукции;
		ВидыПродукцииДокумента = ТаблицаМаркируемойПродукции.ВыгрузитьКолонку("ВидПродукции");
		ВидыПродукцииДокумента = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВидыПродукцииДокумента);

		Если ТипЭД = "УКД" Тогда

			// УКД приходит в сокращенном формате. Для заполнения кодов требуется дополнить строки по данным УПД.
			ДокументПоступления     = СверкаКодовМаркировкиИСМП.ОпределитьДокументОснованиеСверкиКодов(ДокументОснование);
			ДанныеУпаковокОснования = ШтрихкодированиеИСМПСлужебный.ДанныеМаркируемойНоменклатурыКодовМаркировкиПоДаннымЭДО(ДокументПоступления);

			РезультатПолученияДанных = ТаблицыПринятыхКодовПоДаннымУКД(ДанныеУпаковокОснования, ДанныеНоменклатурыПоДаннымЭДО);

			ТоварыПринятыеБезРасхождений  = РезультатПолученияДанных.ТоварыПринятыеБезРасхождений;
			ТоварыПринятыеБезРасхождений.Индексы.Добавить("Номенклатура");

			ДанныеНоменклатурыПоДаннымЭДО = РезультатПолученияДанных.КодыМаркировкиПроверяемогоДокумента;

		ИначеЕсли ТипЭД = "ТОРГ2" Тогда

			МассивНоменклатурыПоДаннымЭДО = ДанныеНоменклатурыПоДаннымЭДО.ВыгрузитьКолонку("Номенклатура");

			ТоварыПринятыеБезРасхождений = СверкаКодовМаркировкиИСМП.СформироватьТаблицуПродукцииПринятойБезРасхождений(
				ДокументОснование,
				МассивНоменклатурыПоДаннымЭДО,
				ВидыПродукцииДокумента);
			ТоварыПринятыеБезРасхождений.Индексы.Добавить("Номенклатура");

		Иначе

			ТоварыПринятыеБезРасхождений = Новый ТаблицаЗначений;
			ТоварыПринятыеБезРасхождений.Колонки.Добавить("Номенклатура", Метаданные.ОпределяемыеТипы.Номенклатура.Тип);

		КонецЕсли;

		НедопустимыеШтрихкоды = Новый Соответствие;

		ДеревоУпаковокПроверяемогоДокумента = ДеревоМаркированнойПродукции();

		ПользовательскиеПараметрыРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки();
		ПользовательскиеПараметрыРазбораКодаМаркировки.ПроверятьАлфавитЭлементов = Ложь;

		Для Каждого ВидПродукции Из ВидыПродукцииДокумента Цикл

			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ВидПродукции", ВидПродукции);

			ТаблицаМаркируемойПродукцииПоВидуПродукции = ТаблицаМаркируемойПродукции.Скопировать(ПараметрыОтбора);

			ПараметрыСканирования.ДопустимыеВидыПродукции.Очистить();
			ПараметрыСканирования.ДопустимыеВидыПродукции.Добавить(ВидПродукции);

			ДанныеШтрихкодовСписок = Новый Массив;

			Если Параметры.ПроверкаЭлектронногоДокумента Тогда
				Если ЭтоПродукцияМОТП И ТипЭД = "ТОРГ2" Тогда
					ПараметрыНормализацииТабакЛогистическаяУпаковка = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
					ПараметрыНормализацииТабакЛогистическаяУпаковка.ИмяСвойстваКодМаркировки = "Штрихкод";
					ПараметрыНормализацииТабакЛогистическаяУпаковка.НачинаетсяСоСкобки       = Ложь;

					ПараметрыНормализацииТабакМаркируемыйТовар = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
					ПараметрыНормализацииТабакМаркируемыйТовар.ИмяСвойстваКодМаркировки = "Штрихкод";
					ПараметрыНормализацииТабакМаркируемыйТовар.НачинаетсяСоСкобки       = Ложь;
					ПараметрыНормализацииТабакМаркируемыйТовар.ВключатьМРЦ              = Ложь;
				КонецЕсли;

				Для Каждого СтрокаТоваровЭлектронногоДокумента Из ДанныеНоменклатурыПоДаннымЭДО Цикл
					Штрихкод = СтрокаТоваровЭлектронногоДокумента.ЗначениеШтрихкода;
					Если ТаблицаМаркируемойПродукцииПоВидуПродукции.Найти(СтрокаТоваровЭлектронногоДокумента.Номенклатура, "Номенклатура") = Неопределено Тогда
						Продолжить;
					КонецЕсли;

					Если ТипЭД = "ТОРГ2" И СтрокаТоваровЭлектронногоДокумента.Брак Тогда
						ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(Штрихкод, ВидПродукции);
						Если ДанныеРазбора = Неопределено Тогда
							НедопустимыеШтрихкоды.Вставить(Штрихкод, Штрихкод);
						Иначе
							Если ЭтоПродукцияМОТП Тогда
								РезультатРазбора = ШтрихкодированиеОбщегоНазначенияИС.НоваяСтруктураОбработкиШтрихкода(
									Штрихкод, ВидПродукции, ПользовательскиеПараметрыРазбораКодаМаркировки);
								Если ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
									НормализованныйКодМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
										РезультатРазбора, ВидПродукции, ПараметрыНормализацииТабакЛогистическаяУпаковка);
								Иначе
									НормализованныйКодМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
										РезультатРазбора, ВидПродукции, ПараметрыНормализацииТабакМаркируемыйТовар);
								КонецЕсли;
								НедопустимыеШтрихкоды.Вставить(НормализованныйКодМаркировки, Штрихкод);
							Иначе
								НедопустимыеШтрихкоды.Вставить(ДанныеРазбора.НормализованныйКодМаркировки, Штрихкод);
							КонецЕсли;
						КонецЕсли;
					ИначеЕсли ТипЭД = "ТОРГ2" И СтрокаТоваровЭлектронногоДокумента.Недостача Тогда
						Продолжить;
					Иначе
						ДанныеШтрихкодовСписок.Добавить(Новый Структура("Штрихкод, Количество", Штрихкод, 1));
					КонецЕсли;

				КонецЦикла;

			Иначе

				ШтрихкодыУпаковокДокумента = Новый Массив;
				ШтрихкодированиеИСПереопределяемый.ЗаполнитьШтрихкодыУпаковокДокумента(Параметры.ПроверяемыйДокумент, ШтрихкодыУпаковокДокумента);

				Для Каждого Штрихкод Из ШтрихкодыУпаковокДокумента Цикл
					ДанныеШтрихкодовСписок.Добавить(Новый Структура("Штрихкод, Количество", Штрихкод, 1));
				КонецЦикла;

			КонецЕсли;

			Если ЭтоПродукцияМОТП Тогда
				РезультатПолученияДанныхИСМП = ШтрихкодированиеМОТП.ВложенныеШтрихкоды(
					ДанныеШтрихкодовСписок, ПараметрыСканирования, ДляУпаковокТребоватьПодключениеИСМП, Истина);
			Иначе
				РезультатПолученияДанныхИСМП = ШтрихкодированиеИСМПСлужебный.ВложенныеШтрихкоды(
					ДанныеШтрихкодовСписок, ПараметрыСканирования, ДляУпаковокТребоватьПодключениеИСМП, Истина);
			КонецЕсли;

			Если РезультатПолученияДанныхИСМП.ЕстьОшибки Тогда
				ВызватьИсключение РезультатПолученияДанныхИСМП.ТекстОшибки;
			ИначеЕсли РезультатПолученияДанныхИСМП = Неопределено Тогда
				ВызватьИсключение НСтр("ru = 'Не удалось получить данные штрихкодов в сервисе ИС МП'");
			ИначеЕсли ПрерватьОбработкуЗагрузкиДанных(
					ДанныеДокумента,
					ПараметрыСканирования,
					РезультатПолученияДанныхИСМП) Тогда

					ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 0);
					ПоместитьВоВременноеХранилище(ДанныеДокумента, АдресРезультата);
					Возврат;
			КонецЕсли;

			Если РезультатПолученияДанныхИСМП.ВложенныеШтрихкоды <> Неопределено
				И РезультатПолученияДанныхИСМП.ВложенныеШтрихкоды.Свойство("ДеревоУпаковок") Тогда
				ДополнитьДеревоМаркированнойПродукции(
					РезультатПолученияДанныхИСМП.ВложенныеШтрихкоды.ДеревоУпаковок,
					ДеревоУпаковокПроверяемогоДокумента);
			КонецЕсли;

		КонецЦикла;

		Если ДанныеДокумента.СверкаПоДаннымКорректировки Тогда
			// для корректировки основное дерево УПД(и)/УКД, фактически принятые коды- данные акта (документ-основание)
			ДеревоУпаковокПлан  = ДеревоУпаковокПроверяемогоДокумента;
			ДеревоУпаковокФакт = ДеревоУпаковокДокументаОснования;
		Иначе // для реализации основное дерево УПД (документ-основание), фактически принятые коды - данные акта
			ДеревоУпаковокПлан = ДеревоУпаковокДокументаОснования;
			ДеревоУпаковокФакт  = ДеревоУпаковокПроверяемогоДокумента;
		КонецЕсли;

		ПараметрыСверки = СверкаКодовМаркировкиИСМП.ИнициализироватьПараметрыСверки();
		ПараметрыСверки.ЭтоПродукцияМОТП                        = ЭтоПродукцияМОТП;
		ПараметрыСверки.ТоварыПринятыеБезРасхождений            = ТоварыПринятыеБезРасхождений;
		ПараметрыСверки.СохраненнаяДетализацияСтруктурыХранения = ДанныеДокумента.ДетализацияСтруктурыХранения;

		Если ЭтоПродукцияМОТП Тогда
			НормализоватьЛогистическиеУпаковки(ДеревоУпаковокПлан);
			НормализоватьЛогистическиеУпаковки(ДеревоУпаковокФакт);
		КонецЕсли;

		СтруктураТаблицыПланФакт = СверкаКодовМаркировкиИСМП.ТаблицыРасхожденийПоДаннымЭДО(
			ДеревоУпаковокФакт,
			ДеревоУпаковокПлан,
			НедопустимыеШтрихкоды,
			ПараметрыСверки);

		ДанныеДокумента.ТаблицаРасхожденийКодовМаркировки = СверкаКодовМаркировкиИСМП.ТаблицаРасхожденийШтриховыхКодовПолная(СтруктураТаблицыПланФакт);
		ДанныеДокумента.ЭтоПродукцияМОТП = ЭтоПродукцияМОТП;

		Если Параметры.ДоступноСогласованиеРасхождений Тогда
			ТаблицаРасхожденийПоДокументу = Параметры.ПроверяемыйДокумент.ШтрихкодыУпаковокРасхождения.Выгрузить();
			ТаблицаРасхожденийПоДокументу.Индексы.Добавить("ЗначениеШтрихкода");

			ДанныеДокумента.ТаблицаРасхожденийПоДокументу = ТаблицаРасхожденийПоДокументу;
		КонецЕсли;
		
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("ПараметрыСканирования", ПараметрыСканирования);
		ПараметрыЗаполнения.Вставить("ВидПродукции", ВидПродукции);
		
		ЗаполнитьДеревоМаркированнойПродукции(ДеревоУпаковокПлан, ДанныеДокумента, ПараметрыЗаполнения);

	КонецЕсли;
	
	КоличествоДанных = ИнтеграцияИС.КоличествоСтрокДереваЗначений(ДанныеДокумента.ДеревоМаркированнойПродукции);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоДанных);
	
	ПоместитьВоВременноеХранилище(ДанныеДокумента, АдресРезультата);
	
КонецПроцедуры

Функция ДеревоМаркированнойПродукции() Экспорт
	
	ТипБулево = Новый ОписаниеТипов("Булево");
	ТипЧисло  = Новый ОписаниеТипов("Число");
	ТипСтрока = Новый ОписаниеТипов("Строка");

	ДеревоМаркированнойПродукции = Новый ДеревоЗначений();
	ДеревоМаркированнойПродукции.Колонки.Добавить("СтатусПроверки",                      Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыПроверкиНаличияПродукцииИС"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ПредставлениеПроверкиПодчиненных",    ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ТипУпаковки",                         Новый ОписаниеТипов("ПеречислениеСсылка.ПрочиеЗоныПересчетаПродукцииИСМП, ПеречислениеСсылка.ТипыУпаковок"));
	
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхУпаковок",                ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхВНаличии",                ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхОтсутствует",             ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхНеЧислилось",             ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхПотребительскихУпаковок", ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхГрупповыхУпаковок",       ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхВсего",                   ТипЧисло);
	
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПотребительскихУпаковок",   ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоГрупповыхУпаковок",         ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("Коэффициент",                         ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("Количество",                          ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	
	ДеревоМаркированнойПродукции.Колонки.Добавить("Штрихкод",                            ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВсяУпаковкаПроверена",                ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИндексКартинкиТипУпаковки",           ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИндексКартинкиСтатусПроверки",        ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("Представление",                       ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ПредставлениеСодержимоеУпаковки");
	ДеревоМаркированнойПродукции.Колонки.Добавить("НеСодержитсяВДанныхДокумента",        ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("НеСоответствуетОтбору",               ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ХешСумма",                            ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("Номенклатура",                        Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ДеревоМаркированнойПродукции.Колонки.Добавить("Характеристика",                      Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ДеревоМаркированнойПродукции.Колонки.Добавить("Серия",                               Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИдентификаторСтроки",                 ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазныеСерии",                ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазнаяНоменклатура",         ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазныеХарактеристики",       ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИННВладельца",                        ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("СтатусКодаМаркировки",                Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыКодовМаркировкиИСМП"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("GTIN",                                Метаданные.ОпределяемыеТипы.GTIN.Тип);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазныйGTIN",                 ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ПредставлениеПроверкиКодаМаркировки", ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("НедопустимыйКодМаркировки",           ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("СодержимоеНедоступно",                ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ДействиеПоРасхождениям",              Метаданные.ОпределяемыеТипы.ВариантДействийПоРасхождениямКодовМаркировкиИСМП.Тип);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВидПродукции",                        Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВидУпаковки",                         Новый ОписаниеТипов("ПеречислениеСсылка.ВидыУпаковокИС"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ХешСуммаНормализации",                ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("НормализованныйШтрихкод",             ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("НеПересчитыватьКоличествоПотребительскихУпаковок", ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ТипШтрихкода",                        Новый ОписаниеТипов("ПеречислениеСсылка.ТипыШтрихкодов"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ДобавленаПоДаннымЭДО",                ТипБулево);

	Возврат ДеревоМаркированнойПродукции;
	
КонецФункции

// Возвращает сохраненную в хранилище настроек данных форм детализацию отображения структуры упаковок в форме проверки и подбора табачной продукции.
// 
// Параметры:
//  РежимПодбораСуществующихУпаковок - Булево - признак работы со штрихкодами упаковок, имеющимися в информационной базе.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ДетализацияСтруктурыХраненияИС - сохраненная детализация отображения структуры упаковок.
//
Функция СохраненнаяДетализацияСтруктурыХранения(РежимПодбораСуществующихУпаковок) Экспорт
	
	СохраненнаяДетализация = ПроверкаИПодборПродукцииИСМП.СохраненнаяДетализацияСтруктурыХранения(РежимПодбораСуществующихУпаковок);
	Возврат СохраненнаяДетализация;
	
КонецФункции

Процедура ДополнитьДеревоМаркированнойПродукции(ДеревоИсточник, ДеревоПриемник)
	
	КоллекцияСтрокПриемника = ДеревоПриемник.Строки;
	
	Для Каждого СтрокаДереваУпаковок Из ДеревоИсточник.Строки Цикл
		
		ДобавитьСтрокуДереваМаркированнойПродукцииПриДополненииДерева(СтрокаДереваУпаковок, КоллекцияСтрокПриемника);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСтрокуДереваМаркированнойПродукцииПриДополненииДерева(СтрокаИсточника, КоллекцияСтрокПриемника)
	
	Если СтрокаИсточника.ТипУпаковки = ПроверкаИПодборПродукцииИСМПКлиентСервер.ТипУпаковкиПотребительскиеУпаковкиБезУпаковки()
		Или СтрокаИсточника.ТипУпаковки = ПроверкаИПодборПродукцииИСМПКлиентСервер.ТипУпаковкиГрупповыеУпаковкиБезКоробки()
		Или СтрокаИсточника.ТипУпаковки = ПроверкаИПодборПродукцииИСМПКлиентСервер.ТипУпаковкиОбъемноСортовойУчет() Тогда

		КоллекцияСтрокНовойСтроки = КоллекцияСтрокПриемника;

	Иначе

		НоваяСтрока = КоллекцияСтрокПриемника.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточника);

		КоллекцияСтрокНовойСтроки = НоваяСтрока.Строки;

	КонецЕсли;
	
	Для Каждого ПодчиненнаяСтрокаИсточника Из СтрокаИсточника.Строки Цикл
		ДобавитьСтрокуДереваМаркированнойПродукцииПриДополненииДерева(ПодчиненнаяСтрокаИсточника, КоллекцияСтрокНовойСтроки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДеревоМаркированнойПродукции(ДеревоУпаковокДокумента, ДанныеДокумента, ПараметрыЗаполнения)
	
	КоллекцияСтрокПриемника = ДанныеДокумента.ДеревоМаркированнойПродукции.Строки;
	
	Для Каждого СтрокаДереваУпаковок Из ДеревоУпаковокДокумента.Строки Цикл
		ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке(СтрокаДереваУпаковок, КоллекцияСтрокПриемника, ДанныеДокумента, ПараметрыЗаполнения);
	КонецЦикла;

	Если ДанныеДокумента.ЭтоПродукцияМОТП Тогда
		ВидПродукцииДетализации = Перечисления.ВидыПродукцииИС.Табак;
	Иначе
		ВидПродукцииДетализации = Неопределено;
	КонецЕсли;

	Если ДанныеДокумента.СтрокаПродукцияБезУпаковки = Неопределено
		И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковки Тогда
		ДобавленнаяСтрокаПродукцияБезУпаковки(ДанныеДокумента, ВидПродукцииДетализации);
	КонецЕсли;

	Если ДанныеДокумента.ЭтоПродукцияМОТП
		И ДанныеДокумента.СтрокаБлокиБезКоробки = Неопределено
		И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки
		И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковкиСПотребительскими Тогда
		ДобавленнаяСтрокаБлокиБезКоробки(ДанныеДокумента, ВидПродукцииДетализации);
	КонецЕсли;

	Если ДанныеДокумента.СтрокаПродукцияОбъемноСортовойУчет = Неопределено
		И ДанныеДокумента.ПоддерживаетсяОбъемноСортовойУчет Тогда
		ДобавленнаяСтрокаПродукцияОбъемноСортовогоУчета(ДанныеДокумента);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке(СтрокаИсточника, КоллекцияСтрокПриемника, ДанныеДокумента, ПараметрыЗаполнения)
	
	ОтрезатьВложенияОСУ = Ложь;

	Если ДанныеДокумента.ДоступноСогласованиеРасхождений Тогда
		ТаблицаРасхожденийПоДокументу = ДанныеДокумента.ТаблицаРасхожденийПоДокументу;
	КонецЕсли;
	
	Если ДанныеДокумента.ЭтоПродукцияМОТП Тогда
		ВидПродукцииДетализации = Перечисления.ВидыПродукцииИС.Табак;
	Иначе
		ВидПродукцииДетализации = Неопределено;
	КонецЕсли;
	
	Если СтрокаИсточника.ТипУпаковки = ПроверкаИПодборПродукцииИСМПКлиентСервер.ТипУпаковкиПотребительскиеУпаковкиБезУпаковки() Тогда
		
		Если ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки Тогда
			
			НоваяСтрока = ДанныеДокумента.СтрокаПродукцияБезУпаковки;
			
			Если НоваяСтрока = Неопределено Тогда
				НоваяСтрока = ДобавленнаяСтрокаПродукцияБезУпаковки(ДанныеДокумента, ВидПродукцииДетализации);
			КонецЕсли;
			
		Иначе
			
			Для Каждого СтрокаПродукции Из СтрокаИсточника.Строки Цикл
				ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке(СтрокаПродукции, КоллекцияСтрокПриемника, ДанныеДокумента, ПараметрыЗаполнения);
			КонецЦикла;
			
			Возврат;
			
		КонецЕсли;

	ИначеЕсли СтрокаИсточника.ТипУпаковки = ПроверкаИПодборПродукцииИСМПКлиентСервер.ТипУпаковкиГрупповыеУпаковкиБезКоробки() Тогда
		
		Если ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки
			И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковкиСПотребительскими Тогда
			
			НоваяСтрока = ДанныеДокумента.СтрокаБлокиБезКоробки;
			
			Если НоваяСтрока = Неопределено Тогда
				НоваяСтрока = ДобавленнаяСтрокаБлокиБезКоробки(ДанныеДокумента, ВидПродукцииДетализации);
			КонецЕсли;
			
		Иначе

			Для Каждого СтрокаИсточникаБлок Из СтрокаИсточника.Строки Цикл
				Если ДанныеДокумента.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковкиСПотребительскими Тогда
					ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке(СтрокаИсточникаБлок, КоллекцияСтрокПриемника, ДанныеДокумента, ПараметрыЗаполнения);
				Иначе
					Для Каждого СтрокаИсточникаПачка Из СтрокаИсточникаБлок.Строки Цикл
						ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке(СтрокаИсточникаПачка, КоллекцияСтрокПриемника, ДанныеДокумента, ПараметрыЗаполнения);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			Возврат;

		КонецЕсли;
		
	ИначеЕсли СтрокаИсточника.ТипУпаковки = ПроверкаИПодборПродукцииИСМПКлиентСервер.ТипУпаковкиОбъемноСортовойУчет() Тогда

		НоваяСтрока = ДанныеДокумента.СтрокаПродукцияОбъемноСортовойУчет;

		Если НоваяСтрока = Неопределено Тогда
			НоваяСтрока = ДобавленнаяСтрокаПродукцияОбъемноСортовогоУчета(ДанныеДокумента);
		КонецЕсли;

	ИначеЕсли СтрокаИсточника.Родитель = Неопределено
		И СтрокаИсточника.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет Тогда

		ЭлементГруппировкиПоGTIN = СтрокаОбъемноСортовогоУчетаПоGTIN(ДанныеДокумента, СтрокаИсточника);
		
		ОтрезатьВложенияОСУ = ДанныеДокумента.ДоступноСогласованиеРасхождений И ДанныеДокумента.ПоддерживаетсяОбъемноСортовойУчет;

		Если СтрокаИсточника.Строки.Количество() = 0
			Или ОтрезатьВложенияОСУ Тогда
			НоваяСтрока = ЭлементГруппировкиПоGTIN.Строки.Добавить();
			ЗаполнитьСтатусПроверки(НоваяСтрока, СтрокаИсточника, ДанныеДокумента);

			Если (ДанныеДокумента.СверкаПоДаннымКорректировки
					И НоваяСтрока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.Отсутствует)
				  Или НоваяСтрока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась Тогда
				НоваяСтрока.ДобавленаПоДаннымЭДО = Истина; // упаковка верхнего уровня ОСУ
			КонецЕсли;

		Иначе
			Для Каждого ПодчиненнаяСтрокаИсточника Из СтрокаИсточника.Строки Цикл
				ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке(ПодчиненнаяСтрокаИсточника, ЭлементГруппировкиПоGTIN.Строки, ДанныеДокумента, ПараметрыЗаполнения);
			КонецЦикла;
			Возврат;
		КонецЕсли;

	ИначеЕсли СтрокаИсточника.Родитель = Неопределено
		И СтрокаИсточника.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
		И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки Тогда

		СтрокаПродукцияБезУпаковки = ДанныеДокумента.СтрокаПродукцияБезУпаковки;

		Если СтрокаПродукцияБезУпаковки = Неопределено Тогда
			СтрокаПродукцияБезУпаковки = ДобавленнаяСтрокаПродукцияБезУпаковки(ДанныеДокумента, ВидПродукцииДетализации);
		КонецЕсли;
		
		НоваяСтрока = СтрокаПродукцияБезУпаковки.Строки.Добавить();
		ЗаполнитьСтатусПроверки(НоваяСтрока, СтрокаИсточника, ДанныеДокумента);

	ИначеЕсли СтрокаИсточника.Родитель = Неопределено
		И (ПроверкаИПодборПродукцииМОТПКлиентСервер.ЭтоУпаковкаБлока(СтрокаИсточника)
			Или ПроверкаИПодборПродукцииМОТПКлиентСервер.ЭтоУпаковкаНабор(СтрокаИсточника))
		И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки
		И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковкиСПотребительскими Тогда

		СтрокаБлокиБезКоробки = ДанныеДокумента.СтрокаБлокиБезКоробки;
		
		Если СтрокаБлокиБезКоробки = Неопределено Тогда
			СтрокаБлокиБезКоробки = ДобавленнаяСтрокаБлокиБезКоробки(ДанныеДокумента, ВидПродукцииДетализации);
		КонецЕсли;
		
		НоваяСтрока = СтрокаБлокиБезКоробки.Строки.Добавить();
		ЗаполнитьСтатусПроверки(НоваяСтрока, СтрокаИсточника, ДанныеДокумента);
		
	ИначеЕсли СтрокаИсточника.Родитель <> Неопределено
		И (ПроверкаИПодборПродукцииМОТПКлиентСервер.ЭтоУпаковкаБлока(СтрокаИсточника.Родитель)
			Или ПроверкаИПодборПродукцииМОТПКлиентСервер.ЭтоУпаковкаНабор(СтрокаИсточника.Родитель))
		И СтрокаИсточника.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
		И ДанныеДокумента.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками Тогда
		
		Возврат;
		
	Иначе
		
		НоваяСтрока = КоллекцияСтрокПриемника.Добавить();
		ЗаполнитьСтатусПроверки(НоваяСтрока, СтрокаИсточника, ДанныеДокумента);

		Если СтрокаИсточника.Родитель <> Неопределено Тогда

			Если ДанныеДокумента.СверкаПоДаннымКорректировки Или ДанныеДокумента.ДоступноСогласованиеРасхождений Тогда
				Если НоваяСтрока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии Тогда
					СтрокаИсточника.Родитель.ЕстьПринятыеТовары = Истина;
				ИначеЕсли НоваяСтрока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.Отсутствует Тогда
					СтрокаИсточника.Родитель.ЕстьНедостачиТовары = Истина;
				КонецЕсли;
			Иначе
				Если СтрокаИсточника.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии Тогда
					СтрокаИсточника.Родитель.ЕстьПринятыеТовары = Истина;
				ИначеЕсли СтрокаИсточника.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.Отсутствует Тогда
					СтрокаИсточника.Родитель.ЕстьНедостачиТовары = Истина;
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;
	
	ИсключаяСвойства = "";
	Если ДанныеДокумента.СверкаПоДаннымКорректировки Или ДанныеДокумента.ДоступноСогласованиеРасхождений Тогда
		ИмяСвойстваКоличествоПотребительскихУпаковок = "КоличествоПотребительскихУпаковок";
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаИсточника, "СтатусПроверки") Тогда
			ИсключаяСвойства = "СтатусПроверки";
		КонецЕсли;
	Иначе
		ИмяСвойстваКоличествоПотребительскихУпаковок = "КоличествоПодчиненныхПотребительскихУпаковок";
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточника, , ИсключаяСвойства);
	
	Если НоваяСтрока.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет
		И Не (ДанныеДокумента.СверкаПоДаннымКорректировки Или ДанныеДокумента.ДоступноСогласованиеРасхождений)
		И НоваяСтрока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии
		И НоваяСтрока.КоличествоПодчиненныхВНаличии > 0
		И НоваяСтрока.КоличествоПодчиненныхНеЧислилось > 0 Тогда
		
		НоваяСтрока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась;
		
	КонецЕсли;

	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаИсточника, "Статус") Тогда
		НоваяСтрока.СтатусКодаМаркировки = СтрокаИсточника.Статус;
	КонецЕсли;

	Если НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.ПустаяСсылка() Тогда
		НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
	ИначеЕсли НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
		Если Не ЗначениеЗаполнено(НоваяСтрока.Номенклатура)
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаИсточника, "ПредставлениеНоменклатуры") Тогда
			НоваяСтрока.ПредставлениеСодержимоеУпаковки = СтрокаИсточника.ПредставлениеНоменклатуры;
		КонецЕсли;		
	КонецЕсли;
	
	Если ДанныеДокумента.ДоступноСогласованиеРасхождений
		И (СтрокаИсточника.Строки.Количество() = 0
		   Или ОтрезатьВложенияОСУ) Тогда
		
		Если НоваяСтрока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась
			Или НоваяСтрока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.Отсутствует Тогда
			ВариантыДействийПоРасхождениямКодовМаркировкиИСМППризнать = ИнтеграцияИСМПКлиентСервер.ВариантДействийПоРасхождениямКодовМаркировкиИСМППризнать();
			ВариантыДействийПоРасхождениямКодовМаркировкиИСМПНеПризнать = ИнтеграцияИСМПКлиентСервер.ВариантДействийПоРасхождениямКодовМаркировкиИСМПНеПризнать();

			ДействиеПоРасхождениям = ВариантыДействийПоРасхождениямКодовМаркировкиИСМППризнать;
			
			СтрокаРасхожденийДокумента = ТаблицаРасхожденийПоДокументу.Найти(НоваяСтрока.Штрихкод, "ЗначениеШтрихкода");
			Если СтрокаРасхожденийДокумента <> Неопределено Тогда
				Если СтрокаРасхожденийДокумента.Признан = ВариантыДействийПоРасхождениямКодовМаркировкиИСМПНеПризнать Тогда
					ДействиеПоРасхождениям = ВариантыДействийПоРасхождениямКодовМаркировкиИСМПНеПризнать;
				КонецЕсли;
			КонецЕсли;
			НоваяСтрока.ДействиеПоРасхождениям = ДействиеПоРасхождениям;
		КонецЕсли;
		
	КонецЕсли;
	
	ОтрезатьСодержимоеГрупповыхУпаковок =
		(СтрокаИсточника.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Или СтрокаИсточника.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор)
		И (ДанныеДокумента.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками
			Или ДанныеДокумента.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.ПалетыСМонотоварнымиКоробами
			Или (СтрокаИсточника[ИмяСвойстваКоличествоПотребительскихУпаковок] > 0 И СтрокаИсточника.Строки.Количество() = 0));

	ОтрезатьСодержимоеЛогистическойУпаковки =
		(СтрокаИсточника.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
			Или СтрокаИсточника.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет)
		И (ЗначениеЗаполнено(СтрокаИсточника.Номенклатура) И СтрокаИсточника[ИмяСвойстваКоличествоПотребительскихУпаковок] > 0 И ЗначениеЗаполнено(СтрокаИсточника.GTIN))
		И (ДанныеДокумента.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.ПалетыСМонотоварнымиКоробами
			Или СтрокаИсточника.Строки.Количество() = 0);
	
	Если ОтрезатьСодержимоеЛогистическойУпаковки И СтрокаИсточника.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
		
		Если ОтрезатьСодержимоеЛогистическойУпаковки
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаИсточника, "СоставКодаМаркировки")
			И СтрокаИсточника.СоставКодаМаркировки <> Неопределено
			И Не СтрокаИсточника.СоставКодаМаркировки.Свойство("GTIN") Тогда
			ОтрезатьСодержимоеЛогистическойУпаковки = Ложь;
		Иначе
			
			КешДанныхРазбора      = Новый Соответствие;
			ПараметрыСканирования = ПараметрыЗаполнения.ПараметрыСканирования;
			
			ПользовательскиеПараметрыРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки();
			ПользовательскиеПараметрыРазбораКодаМаркировки.ПроверятьАлфавитЭлементов = ПараметрыСканирования.ПроверятьАлфавитКодовМаркировки;
			ПользовательскиеПараметрыРазбораКодаМаркировки.РасширеннаяДетализация    = ПараметрыСканирования.СохранятьКодыМаркировкиВПулИСМП;
			ПользовательскиеПараметрыРазбораКодаМаркировки.ВалидироватьШтрихкодЛогистическойУпаковкиGS1128СОшибками = Истина;
			
			НастройкиРазбораКодаМаркировки = Новый Структура;
			НастройкиРазбораКодаМаркировки.Вставить("Кеш",              РазборКодаМаркировкиИССлужебныйКлиентСервер.ИнициализироватьНастройкиИспользующиеРезультатыПредыдущихРазборов());
			НастройкиРазбораКодаМаркировки.Вставить("Общие",            РазборКодаМаркировкиИССлужебныйПовтИсп.НастройкиРазбораКодаМаркировки());
			НастройкиРазбораКодаМаркировки.Вставить("Пользовательские", ПользовательскиеПараметрыРазбораКодаМаркировки);
			
			ДанныеРазбора = ГрупповаяОбработкаШтрихкодовИС.ВидУпаковкиИПредставлениеШтрихкодаУпрощенныйРазбор(
				СтрокаИсточника.Штрихкод, ПараметрыЗаполнения.ВидПродукции, КешДанныхРазбора, НастройкиРазбораКодаМаркировки);
			
			Если ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
				
				GTIN = Неопределено;
				ДанныеРазбораИРезультат = КешДанныхРазбора[СтрокаИсточника.Штрихкод];
				Если ДанныеРазбораИРезультат <> Неопределено Тогда
					ДанныеРазбораИРезультат.ДанныеРазбора.СоставКодаМаркировки.Свойство("GTIN", GTIN);
				КонецЕсли;
				Если Не ЗначениеЗаполнено(GTIN) Тогда
					ОтрезатьСодержимоеЛогистическойУпаковки = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	НоваяСтрока.КоличествоПодчиненныхПотребительскихУпаковок = СтрокаИсточника[ИмяСвойстваКоличествоПотребительскихУпаковок];
	
	Если (НоваяСтрока.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
		Или НоваяСтрока.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор)
		И ОтрезатьСодержимоеГрупповыхУпаковок Тогда
		НоваяСтрока.НеПересчитыватьКоличествоПотребительскихУпаковок = Истина;
	КонецЕсли;
	
	Если (НоваяСтрока.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
		Или НоваяСтрока.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет)
		И (ОтрезатьСодержимоеЛогистическойУпаковки
		   Или ОтрезатьВложенияОСУ) Тогда
		НоваяСтрока.НеПересчитыватьКоличествоПотребительскихУпаковок = Истина;
	КонецЕсли;
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(НоваяСтрока, ВидПродукцииДетализации);
	
	Если НоваяСтрока.СодержимоеНедоступно Тогда
		ДанныеДокумента.СодержимоеУпаковокНедоступно = Истина;
	КонецЕсли;
	
	КоллекцияСтрокНовойСтроки = НоваяСтрока.Строки;
	
	Для Каждого ПодчиненнаяСтрокаИсточника Из СтрокаИсточника.Строки Цикл
		Если Не ОтрезатьВложенияОСУ Тогда
			ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке(ПодчиненнаяСтрокаИсточника, КоллекцияСтрокНовойСтроки, ДанныеДокумента, ПараметрыЗаполнения);
			Если СтрокаИсточника.Родитель = Неопределено
				И ДанныеДокумента.ДоступноСогласованиеРасхождений
				И СтрокаИсточника.ТипУпаковки <> Перечисления.ТипыУпаковок.МаркированныйТовар
				И (СтрокаИсточника.ЕстьПринятыеТовары И СтрокаИсточника.ЕстьНедостачиТовары) Тогда
				НоваяСтрока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеПроверялась;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ДобавленнаяСтрокаПродукцияБезУпаковки(ДанныеДокумента, ВидПродукции = Неопределено)
	
	НоваяСтрока = ДанныеДокумента.ДеревоМаркированнойПродукции.Строки.Вставить(0);
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ЗаполнитьСтрокуПродукцияБезУпаковки(НоваяСтрока, ВидПродукции);
	
	ДанныеДокумента.СтрокаПродукцияБезУпаковки = НоваяСтрока;
	
	Возврат НоваяСтрока;
	
КонецФункции

Функция ДобавленнаяСтрокаПродукцияОбъемноСортовогоУчета(ДанныеДокумента, ВидПродукции = Неопределено)

	СтрокиДерева = ДанныеДокумента.ДеревоМаркированнойПродукции.Строки;

	Если СтрокиДерева.Количество() = 0 Тогда
		НоваяСтрока = СтрокиДерева.Добавить();
	Иначе
		ТекущийИндекс            = 0;
		МаксимальныйИндексСтроки = 2;
		Для ТекущийИндекс = 0 По Мин(СтрокиДерева.Количество() - 1, МаксимальныйИндексСтроки) Цикл
			Если СтрокиДерева[ТекущийИндекс].ТипУпаковки = ПроверкаИПодборПродукцииИСМПКлиентСервер.ТипУпаковкиПотребительскиеУпаковкиБезУпаковки()
				Или СтрокиДерева[ТекущийИндекс].ТипУпаковки = ПроверкаИПодборПродукцииИСМПКлиентСервер.ТипУпаковкиГрупповыеУпаковкиБезКоробки() Тогда
				Продолжить;
			КонецЕсли;
			Прервать;
		КонецЦикла;
		НоваяСтрока = СтрокиДерева.Вставить(ТекущийИндекс);
	КонецЕсли;

	ПроверкаИПодборПродукцииИСМПКлиентСервер.ЗаполнитьСтрокуПродукцияОбъемноСортовойУчет(НоваяСтрока, ВидПродукции);

	ДанныеДокумента.СтрокаПродукцияОбъемноСортовойУчет = НоваяСтрока;

	Возврат НоваяСтрока;

КонецФункции

Функция СтрокаОбъемноСортовогоУчетаПоGTIN(ДанныеДокумента, ДанныеШтрихкода, СоздаватьСтроки = Истина) Экспорт

	СтрокаОбъемноСортовогоУчета = ДанныеДокумента.СтрокаПродукцияОбъемноСортовойУчет;

	Если СтрокаОбъемноСортовогоУчета = Неопределено Тогда
		Если Не СоздаватьСтроки Тогда
			Возврат Неопределено;
		КонецЕсли;
		СтрокаОбъемноСортовогоУчета = ДобавленнаяСтрокаПродукцияОбъемноСортовогоУчета(ДанныеДокумента);
	КонецЕсли;

	ЭлементыОбъемноСортовогоУчета = СтрокаОбъемноСортовогоУчета.Строки;

	ЭлементГруппировкиПоGTIN = Неопределено;
	Для Каждого СтрокаДерева Из ЭлементыОбъемноСортовогоУчета Цикл
		Если СтрокаДерева.GTIN = ДанныеШтрихкода.GTIN Тогда
			ЭлементГруппировкиПоGTIN = СтрокаДерева;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если ЭлементГруппировкиПоGTIN = Неопределено Тогда

		Если Не СоздаватьСтроки Тогда
			Возврат Неопределено;
		КонецЕсли;

		ЭлементГруппировкиПоGTIN = ЭлементыОбъемноСортовогоУчета.Добавить();
		ЗаполнитьЗначенияСвойств(ЭлементГруппировкиПоGTIN, ДанныеШтрихкода, "GTIN, Номенклатура, Характеристика");

		ПроверкаИПодборПродукцииИСМПКлиентСервер.ЗаполнитьСтрокуГруппировкаОбъемноСортовогоУчетаПоGTIN(ЭлементГруппировкиПоGTIN, Неопределено);

	КонецЕсли;

	Возврат ЭлементГруппировкиПоGTIN;

КонецФункции

#Область ЗаполнениеСГрупповымиУпаковкамиМОТП

Функция ДобавленнаяСтрокаБлокиБезКоробки(ДанныеДокумента, ВидПродукции)
	
	СтрокиДерева = ДанныеДокумента.ДеревоМаркированнойПродукции.Строки;
	
	Если СтрокиДерева.Количество() = 0 Тогда
		НоваяСтрока = СтрокиДерева.Вставить(0);
	ИначеЕсли СтрокиДерева[0].ТипУпаковки <> ПроверкаИПодборПродукцииИСМПКлиентСервер.ТипУпаковкиПотребительскиеУпаковкиБезУпаковки() Тогда
		НоваяСтрока = СтрокиДерева.Вставить(0);
	Иначе
		НоваяСтрока = СтрокиДерева.Вставить(1);
	КонецЕсли;
	
	ПроверкаИПодборПродукцииМОТПКлиентСервер.ЗаполнитьСтрокуБлокиБезКоробки(НоваяСтрока, ВидПродукции);
	
	ДанныеДокумента.СтрокаБлокиБезКоробки = НоваяСтрока;
	
	Возврат НоваяСтрока;
	
КонецФункции

Процедура НормализоватьЛогистическиеУпаковки(ДеревоУпаковок)
	
	ПараметрыНормализацииТабакЛогистическаяУпаковка = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализацииТабакЛогистическаяУпаковка.ИмяСвойстваКодМаркировки = "Штрихкод";
	ПараметрыНормализацииТабакЛогистическаяУпаковка.НачинаетсяСоСкобки       = Ложь;
	
	ПользовательскиеПараметрыРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки();
	ПользовательскиеПараметрыРазбораКодаМаркировки.ПроверятьАлфавитЭлементов = Ложь;
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
			
			РезультатРазбора = ШтрихкодированиеОбщегоНазначенияИС.НоваяСтруктураОбработкиШтрихкода(
				СтрокаДерева.Штрихкод, СтрокаДерева.ВидПродукции, ПользовательскиеПараметрыРазбораКодаМаркировки);
			НормализованныйКодМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
				РезультатРазбора, СтрокаДерева.ВидПродукции, ПараметрыНормализацииТабакЛогистическаяУпаковка);
			СтрокаДерева.НормализованныйШтрихкод = НормализованныйКодМаркировки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СохранениеРезультатов

Процедура ОбработатьНепринятыеСтрокиДерева(ДеревоМаркированнойПродукции, ТаблицаРасхожденийКодовМаркировки,
											МассивСтрокКУдалению = Неопределено, ЭтоПродукцияМОТП)
	
	Если МассивСтрокКУдалению = Неопределено Тогда
		МассивСтрокКУдалению = Новый Массив;
		МассивСтрокКРазбору = Новый Массив;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из ДеревоМаркированнойПродукции.Строки цикл
		Если СтрокаДерева.НеСоответствуетОтборуВсе Тогда
			МассивСтрокКУдалению.Добавить(СтрокаДерева);
			Продолжить;
		КонецЕсли;
		ОбработатьПодчиненныеСтрокиДерева(СтрокаДерева,
			ТаблицаРасхожденийКодовМаркировки,
			МассивСтрокКУдалению,
			МассивСтрокКРазбору);
	КонецЦикла;
	
	Для Каждого СтрокаДереваУдалить Из МассивСтрокКУдалению Цикл
		ТекущийРодитель = СтрокаДереваУдалить.Родитель;
		Если ТекущийРодитель = Неопределено Тогда
			РодительУдаляемойУпаковки = ДеревоМаркированнойПродукции;
		Иначе
			РодительУдаляемойУпаковки = ТекущийРодитель;
		КонецЕсли;
		РодительУдаляемойУпаковки.Строки.Удалить(СтрокаДереваУдалить);
	КонецЦикла;
	
	Для Каждого УпаковкаРазобрать Из МассивСтрокКРазбору Цикл
		ТекущийРодитель = УпаковкаРазобрать.Родитель;
		Если ТекущийРодитель = Неопределено Тогда
			РодительУдаляемойУпаковки = ДеревоМаркированнойПродукции;
		Иначе
			РодительУдаляемойУпаковки = ТекущийРодитель;
		КонецЕсли;
		ПереместитьВложенныеУпаковкиПриРазборкеУпаковки(УпаковкаРазобрать.Строки, ДеревоМаркированнойПродукции);
		РодительУдаляемойУпаковки.Строки.Удалить(УпаковкаРазобрать);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПереместитьВложенныеУпаковкиПриРазборкеУпаковки(СтрокиДерева, ДеревоМаркированнойПродукции, НовыйРодитель = Неопределено)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если НовыйРодитель <> Неопределено Тогда
			РодительДобавляемойСтроки = НовыйРодитель;
		Иначе
			РодительДобавляемойСтроки = ДеревоМаркированнойПродукции;
		КонецЕсли;
				
		Если РодительДобавляемойСтроки <> Неопределено Тогда
			НоваяСтрока = РодительДобавляемойСтроки.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
		Иначе
			НоваяСтрока = Неопределено;
		КонецЕсли;
		
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ПереместитьВложенныеУпаковкиПриРазборкеУпаковки(СтрокаДерева.Строки, ДеревоМаркированнойПродукции, НоваяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьПодчиненныеСтрокиДерева(СтрокаДерева, ТаблицаРасхожденийКодовМаркировки,
											МассивСтрокКУдалению, МассивСтрокКРазбору)
	
	ПодчиненныеСтроки = СтрокаДерева.Строки;
	
	Если Не СтрокаДерева.НеПересчитыватьКоличествоПотребительскихУпаковок Тогда
		СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок = 0;
	КонецЕсли;
	
	СтрокаДерева.КоличествоПодчиненныхГрупповыхУпаковок = 0;
	СтрокаДерева.КоличествоПодчиненныхУпаковок      = 0;
	СтрокаДерева.КоличествоПодчиненныхВсего         = 0;
	
	СтрокаДерева.КоличествоПодчиненныхВНаличии      = 0;
	СтрокаДерева.КоличествоПодчиненныхОтсутствует   = 0;
	СтрокаДерева.КоличествоПодчиненныхНеЧислилось   = 0;

	Если СтрокаДерева.НеПересчитыватьКоличествоПотребительскихУпаковок Тогда
		
		СтрокаДерева.КоличествоПодчиненныхГрупповыхУпаковок = 0;
		СтрокаДерева.КоличествоПодчиненныхУпаковок = 0;
		
		ОбработатьСтрокуСРасхождениями(СтрокаДерева, ТаблицаРасхожденийКодовМаркировки, МассивСтрокКУдалению);

		Если СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхВНаличии = СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок;
			
		ИначеЕсли СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует") Тогда

			СтрокаДерева.КоличествоПодчиненныхОтсутствует = СтрокаДерева.КоличествоПодчиненныхОтсутствует + 1;
			
		КонецЕсли;
		
	Иначе
		
		Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
			Если ПодчиненнаяСтрока.НеСоответствуетОтборуВсе Тогда
				МассивСтрокКУдалению.Добавить(ПодчиненнаяСтрока);
				Продолжить;
			КонецЕсли;
			
			ОбработатьСтрокуСРасхождениями(ПодчиненнаяСтрока, ТаблицаРасхожденийКодовМаркировки, МассивСтрокКУдалению);

			Если ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии")
				И СтрокаДерева.ТипУпаковки <> ПроверкаИПодборПродукцииИСМПКлиентСервер.ТипУпаковкиГруппировкаОбъемноСортовогоУчетаПоGTIN() Тогда
				
				СтрокаДерева.КоличествоПодчиненныхВНаличии = СтрокаДерева.КоличествоПодчиненныхВНаличии + 1;
				
			ИначеЕсли ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует")
				И СтрокаДерева.ТипУпаковки <> ПроверкаИПодборПродукцииИСМПКлиентСервер.ТипУпаковкиГруппировкаОбъемноСортовогоУчетаПоGTIN() Тогда

				СтрокаДерева.КоличествоПодчиненныхОтсутствует = СтрокаДерева.КоличествоПодчиненныхОтсутствует + 1;
				
			КонецЕсли;
			
			Если ПодчиненнаяСтрока.Строки.Количество() Тогда
				ОбработатьПодчиненныеСтрокиДерева(ПодчиненнаяСтрока, ТаблицаРасхожденийКодовМаркировки, МассивСтрокКУдалению, МассивСтрокКРазбору);
			КонецЕсли;
			
			Если ПодчиненнаяСтрока.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская")
				Или (ПодчиненнаяСтрока.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Набор")
					И ПодчиненнаяСтрока.ПолучитьЭлементы().Количество() = 0
					Или ПодчиненнаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МультитоварнаяУпаковка")) Тогда
				
				СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок = СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок + 1;
				
			ИначеЕсли ПроверкаИПодборПродукцииМОТПКлиентСервер.ЭтоУпаковкаБлока(ПодчиненнаяСтрока)
				Или ПроверкаИПодборПродукцииМОТПКлиентСервер.ЭтоУпаковкаНабор(ПодчиненнаяСтрока) Тогда
				
				СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок = СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок + ПодчиненнаяСтрока.КоличествоПодчиненныхПотребительскихУпаковок;
				СтрокаДерева.КоличествоПодчиненныхГрупповыхУпаковок = СтрокаДерева.КоличествоПодчиненныхГрупповыхУпаковок + 1;
				
			ИначеЕсли ПодчиненнаяСтрока.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая") Тогда
				
				СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок = СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок + ПодчиненнаяСтрока.КоличествоПодчиненныхПотребительскихУпаковок;
				СтрокаДерева.КоличествоПодчиненныхГрупповыхУпаковок       = СтрокаДерева.КоличествоПодчиненныхГрупповыхУпаковок       + ПодчиненнаяСтрока.КоличествоПодчиненныхГрупповыхУпаковок;
				СтрокаДерева.КоличествоПодчиненныхУпаковок                = СтрокаДерева.КоличествоПодчиненныхУпаковок                + 1;
				
			ИначеЕсли ПодчиненнаяСтрока.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.ОбъемноСортовойУчет")
				Или ПодчиненнаяСтрока.ТипУпаковки = ПроверкаИПодборПродукцииИСМПКлиентСервер.ТипУпаковкиГруппировкаОбъемноСортовогоУчетаПоGTIN() Тогда

				Если ПодчиненнаяСтрока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии Тогда
					СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок = СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок + ПодчиненнаяСтрока.КоличествоПодчиненныхПотребительскихУпаковок;
				КонецЕсли;

			КонецЕсли;
			
			Если СтрокаДерева.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.ОбъемноСортовойУчет")
				Или СтрокаДерева.ТипУпаковки = ПроверкаИПодборПродукцииИСМПКлиентСервер.ТипУпаковкиГруппировкаОбъемноСортовогоУчетаПоGTIN() Тогда
				СтрокаДерева.КоличествоПодчиненныхВНаличии = СтрокаДерева.КоличествоПодчиненныхВНаличии
					+ ПодчиненнаяСтрока.КоличествоПодчиненныхВНаличии
					+ ПодчиненнаяСтрока.КоличествоПодчиненныхНеЧислилось;
			Иначе
				СтрокаДерева.КоличествоПодчиненныхВНаличии    = СтрокаДерева.КоличествоПодчиненныхВНаличии + ПодчиненнаяСтрока.КоличествоПодчиненныхВНаличии;
				СтрокаДерева.КоличествоПодчиненныхОтсутствует = СтрокаДерева.КоличествоПодчиненныхОтсутствует + ПодчиненнаяСтрока.КоличествоПодчиненныхОтсутствует;
				СтрокаДерева.КоличествоПодчиненныхНеЧислилось = СтрокаДерева.КоличествоПодчиненныхНеЧислилось + ПодчиненнаяСтрока.КоличествоПодчиненныхНеЧислилось;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтрокаДерева.КоличествоПодчиненныхВсего = СтрокаДерева.КоличествоПодчиненныхУпаковок
		+ СтрокаДерева.КоличествоПодчиненныхГрупповыхУпаковок
		+ СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок;
	
	Если СтрокаДерева.ТипУпаковки <> ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар")
		И СтрокаДерева.ТипУпаковки <> ПроверкаИПодборПродукцииИСМПКлиентСервер.ТипУпаковкиПотребительскиеУпаковкиБезУпаковки()
		И СтрокаДерева.ТипУпаковки <> ПроверкаИПодборПродукцииИСМПКлиентСервер.ТипУпаковкиГрупповыеУпаковкиБезКоробки()
		И СтрокаДерева.ТипУпаковки <> ПроверкаИПодборПродукцииИСМПКлиентСервер.ТипУпаковкиОбъемноСортовойУчет() Тогда
		
		СтрокаДерева.ВсяУпаковкаПроверена = (СтрокаДерева.КоличествоПодчиненныхВсего = СтрокаДерева.КоличествоПодчиненныхВНаличии);
		Если СтрокаДерева.КоличествоПодчиненныхВНаличии = 0
			Или СтрокаДерева.КоличествоПодчиненныхВНаличии > 0
			    И СтрокаДерева.КоличествоПодчиненныхОтсутствует > 0 Тогда
			
			МассивСтрокКРазбору.Добавить(СтрокаДерева);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьСтрокуСРасхождениями(СтрокаДерева, ТаблицаРасхожденийКодовМаркировки, МассивСтрокКУдалению)

	Если СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДерева.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар")
		Или СтрокаДерева.Строки.Количество() = 0 Тогда

		СтрокаРасхождений = ТаблицаРасхожденийКодовМаркировки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРасхождений, СтрокаДерева);
		СтрокаРасхождений.Количество        = Макс(СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок, 1);
		СтрокаРасхождений.ЗначениеШтрихкода = СтрокаДерева.Штрихкод;

		ДействиеНеПризнать = ИнтеграцияИСМПКлиентСервер.ВариантДействийПоРасхождениямКодовМаркировкиИСМПНеПризнать();

		Если СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует") Тогда
			СтрокаРасхождений.ТипРасхождения = ИнтеграцияИСМП.ТипРасхожденияИСМПНедостача();
			Если СтрокаДерева.ДействиеПоРасхождениям = ДействиеНеПризнать Тогда
				СтрокаДерева.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии;
				СтрокаРасхождений.Признан = ИнтеграцияИСМПКлиентСервер.ВариантДействийПоРасхождениямКодовМаркировкиИСМПНеПризнать();
			Иначе
				СтрокаРасхождений.Признан = ИнтеграцияИСМПКлиентСервер.ВариантДействийПоРасхождениямКодовМаркировкиИСМППризнать();
				МассивСтрокКУдалению.Добавить(СтрокаДерева);
			КонецЕсли;

		ИначеЕсли СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась") Тогда
			СтрокаРасхождений.ТипРасхождения = ИнтеграцияИСМП.ТипРасхожденияИСМПИзлишек();
			Если СтрокаДерева.ДействиеПоРасхождениям = ДействиеНеПризнать Тогда
				СтрокаРасхождений.Признан = ИнтеграцияИСМПКлиентСервер.ВариантДействийПоРасхождениямКодовМаркировкиИСМПНеПризнать();
				СтрокаДерева.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.Отсутствует;
				МассивСтрокКУдалению.Добавить(СтрокаДерева);
			Иначе
				СтрокаДерева.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии;
				СтрокаРасхождений.Признан = ИнтеграцияИСМПКлиентСервер.ВариантДействийПоРасхождениямКодовМаркировкиИСМППризнать();
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Фоновая операция по фиксации результатов проверки и подбора в документе, 
// 
// Параметры:
// 	Параметры - Структура - содержит следующие значения:
// 	   * СоздаватьАктОРасхождениях    - Булево - признак необходимости создания акта о расхождениях.
// 	   * ПроверяемыйДокумент          - ДокументСсылка - документ, для которого выполнялась проверка и подбор.
// 	   * ДеревоМаркированнойПродукции - ДеревоЗначений - содержит результаты проверки и подбора с иерархией упаковок.
// 	   * ДанныеПроверкиИПодбора       - Структура      - содержит слепок состояния проверки и подбора, если предусмотрено его хранение по окончании результатов проверки.
// 	   * ПроверкаНеПоДокументу        - Булево - признак того, что проверка и подбор была вызвана из произвольной формы.
// 	   * ПодобраннаяМаркируемаяПродукция - ТаблицаЗначений - содержит информацию о подобранной продукции сгруппированную до 
// 	       номенклатуры, характеристики, серии.
// 	АдресРезультата - Строка - адрес временного хранилища, в которое будут помещены результаты выполнения
Процедура ЗафиксироватьРезультатПроверкиИПодбора(Параметры, АдресРезультата) Экспорт
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"Обработка.РезультатыСверкиКодовМаркировкиТОРГ2.МодульМенеджера.ЗафиксироватьРезультатПроверкиИПодбора");
		
	ДеревоМаркированнойПродукции  = Параметры.ДеревоМаркированнойПродукции;
	ЭтоПродукцияМОТП = Параметры.ЭтоПродукцияМОТП;
	
	ТаблицаРасхожденийКодовМаркировки = СверкаКодовМаркировкиИСМП.ИнициализацияТаблицыШтрихкодыУпаковок(Истина);

	ОбработатьНепринятыеСтрокиДерева(ДеревоМаркированнойПродукции, ТаблицаРасхожденийКодовМаркировки,,ЭтоПродукцияМОТП);
	
	ПараметрыОкончанияПроверки = СверкаКодовМаркировкиИСМП.ПараметрыОкончанияПроверки();
	ПараметрыОкончанияПроверки.ПроверяемыйДокумент = Параметры.ПроверяемыйДокумент;
	
	ДеревоМаркированнойПродукции = Параметры.ДеревоМаркированнойПродукции;
	ДеревоМаркированнойПродукции.Колонки.Добавить("ШтрихкодУпаковки", Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	
	ТаблицаШтрихкодовВерхнегоУровня = ПроверкаИПодборПродукцииИСМП.ПустаяТаблицаШтрихкодовВерхнегоУровня();
	
	ПараметрыСозданияШтрихкодов = Справочники.ШтрихкодыУпаковокТоваров.ПараметрыСозданияШтриходовУпаковокПоДеревуМаркируемойПродукции(
		ДеревоМаркированнойПродукции, Параметры.ПараметрыСканирования);
	
	ПараметрыОкончанияПроверки.ТаблицаШтрихкодовВерхнегоУровня   = ТаблицаШтрихкодовВерхнегоУровня;
	ПараметрыОкончанияПроверки.ТаблицаРасхожденийКодовМаркировки = ТаблицаРасхожденийКодовМаркировки;
	
	НачатьТранзакцию();
	
	Попытка
		
		Справочники.ШтрихкодыУпаковокТоваров.РезультатСозданияШтрихкодовУпаковокПоДеревуМаркируемойПродукции(
			ДеревоМаркированнойПродукции, ТаблицаШтрихкодовВерхнегоУровня,
			ПараметрыСозданияШтрихкодов);
		
		СверкаКодовМаркировкиИСМП.ЗафиксироватьРезультатСверки(ПараметрыОкончанияПроверки);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Произошла ошибка при сохранении результатов сверки: %1'"),
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
	
	КоличествоДанных = ИнтеграцияИС.КоличествоСтрокДереваЗначений(ДеревоМаркированнойПродукции);
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоДанных);
	
	РезультатПроверки = Новый Структура();
	
	РезультатПроверки.Вставить("ТаблицаШтрихкодовВерхнегоУровня", ТаблицаШтрихкодовВерхнегоУровня);
	РезультатПроверки.Вставить("ТаблицаПодобраннойПровереннойПродукции", ТаблицаРасхожденийКодовМаркировки);
	
	ПоместитьВоВременноеХранилище(РезультатПроверки, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

Процедура ВосстановитьДеревоДокументаПоРезультатамПроверки(Параметры, ДанныеДокумента, ОписаниеЗамера, АдресРезультата)

	ДетализацияСтруктурыХранения = Неопределено;
	ЭтоПродукцияМОТП             = Ложь;
	
	ВыборкаРесурсовПроверки = ПолучитьДанныеПроверкиПоДокументу(Параметры.ПроверяемыйДокумент);
	
	Если ВыборкаРесурсовПроверки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Пока ВыборкаРесурсовПроверки.Следующий() Цикл

		Если ТипЗнч(ВыборкаРесурсовПроверки.ДанныеПроверкиИПодбора) <> Тип("ХранилищеЗначения") Тогда
			Возврат;
		КонецЕсли;

		ДанныеПроверкиИПодбора = ВыборкаРесурсовПроверки.ДанныеПроверкиИПодбора.Получить();

		Если ТипЗнч(ДанныеПроверкиИПодбора) <> Тип("Структура") Тогда
			Возврат;
		КонецЕсли;

		ПоддерживаетсяОбъемноСортовойУчет = ОбщегоНазначенияИСКлиентСерверПовтИсп.ВидПродукцииПоддерживаетОбъемноСортовойУчет(ВыборкаРесурсовПроверки.ВидМаркируемойПродукции);
		ДанныеДокумента.ПоддерживаетсяОбъемноСортовойУчет = ПоддерживаетсяОбъемноСортовойУчет Или ДанныеДокумента.ПоддерживаетсяОбъемноСортовойУчет;

		ЭтоПродукцияМОТП = ЭтоПродукцияМОТП Или ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияМОТП(ВыборкаРесурсовПроверки.ВидМаркируемойПродукции);

		Если ДанныеПроверкиИПодбора.Свойство("ДетализацияСтруктурыХранения") Тогда
			ДетализацияСтруктурыХранения = ДанныеПроверкиИПодбора.ДетализацияСтруктурыХранения;
		ИначеЕсли ДанныеПроверкиИПодбора.Свойство("ДеревоМаркированнойПродукции") Тогда
			ДетализацияСтруктурыХранения = ДетализацияСтруктурыХраненияДерева(ДанныеПроверкиИПодбора.ДеревоМаркированнойПродукции, ЭтоПродукцияМОТП);
		КонецЕсли;

		Если ДетализацияСтруктурыХранения <> Неопределено Тогда
			ДанныеДокумента.ДетализацияСтруктурыХранения = ДетализацияСтруктурыХранения;
		КонецЕсли;

		Если ДанныеПроверкиИПодбора.Свойство("ДеревоМаркированнойПродукции") Тогда
			
			СверкаКодовМаркировкиИСМП.ДополнитьКолонкиДереваУпаковок(ДанныеПроверкиИПодбора.ДеревоМаркированнойПродукции);
			
			ПараметрыЗаполнения = Новый Структура;
			ПараметрыЗаполнения.Вставить("ПараметрыСканирования", Параметры.ПараметрыСканирования);
			ПараметрыЗаполнения.Вставить("ВидПродукции", ВыборкаРесурсовПроверки.ВидМаркируемойПродукции);
			ЗаполнитьДеревоМаркированнойПродукции(
				ДанныеПроверкиИПодбора.ДеревоМаркированнойПродукции, ДанныеДокумента, ПараметрыЗаполнения);
				
		КонецЕсли;

	КонецЦикла;

	ШтрихкодыБрак = ШтрихкодированиеИС.ЗначенияНедопустимыхШтрихкодовИзДереваМаркируемойПродукции(
		ДанныеДокумента.ДеревоМаркированнойПродукции);

	ТаблицаМаркируемойПродукции = Параметры.ТаблицаМаркируемойПродукции;
	ВидыПродукцииДокумента = ТаблицаМаркируемойПродукции.ВыгрузитьКолонку("ВидПродукции");
	ВидыПродукцииДокумента = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВидыПродукцииДокумента);

	ПараметрыСканирования                         = Параметры.ПараметрыСканирования;
	ПараметрыСканирования.ДопустимыеВидыПродукции = ВидыПродукцииДокумента;

	ЗапрашиватьДанныеСервисаИСМП = ОбщегоНазначенияИСМПКлиентСервер.ЗначениеПараметраСканированияЗапрашиватьДанныеСервисаИСМП(ПараметрыСканирования);
	ОбщегоНазначенияИСМПКлиентСервер.УстановитьПараметрСканированияЗапрашиватьДанныеСервисаИСМП(ПараметрыСканирования, Ложь);
	
	ПараметрыСканирования.СопоставлятьНоменклатуру     = Ложь;
	ПараметрыСканирования.ДетализацияСтруктурыХранения = ДетализацияСтруктурыХранения;

	ПараметрыСканирования.ОпределениеВидаПродукцииИСМП                        = Истина;
	ПараметрыСканирования.ИспользуетсяСоответствиеШтрихкодовСтрокДерева       = Ложь; // Для нормализации вложенных штрихкодов
	ПараметрыСканирования.ВыполняетсяЗагрузкаДанныхВФормуПроверкиИПодбораИСМП = Истина;
	
	ДеревоУпаковокФакт = ДеревоМаркированнойПродукции();

	Если ЭтоПродукцияМОТП Тогда
		РезультатПолученияДанных = ШтрихкодированиеМОТП.ВложенныеШтрихкодыУпаковокПоДокументу(
			Параметры.ПроверяемыйДокумент, ПараметрыСканирования);
	Иначе
		РезультатПолученияДанных = ШтрихкодированиеИСМП.ВложенныеШтрихкодыУпаковокПоДокументу(
			Параметры.ПроверяемыйДокумент, ПараметрыСканирования);
	КонецЕсли;

	Если РезультатПолученияДанных.ЕстьОшибки Тогда
		ВызватьИсключение РезультатПолученияДанных.ТекстОшибки;
	ИначеЕсли РезультатПолученияДанных = Неопределено
		Или РезультатПолученияДанных.ВложенныеШтрихкоды = Неопределено
		Или Не РезультатПолученияДанных.ВложенныеШтрихкоды.Свойство("ДеревоУпаковок") Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось получить данные штрихкодов по документу'");
	КонецЕсли;

	ДеревоУпаковокФакт = РезультатПолученияДанных.ВложенныеШтрихкоды.ДеревоУпаковок;

	// Восстановление настроек параметров сканирования.
	ОбщегоНазначенияИСМПКлиентСервер.УстановитьПараметрСканированияЗапрашиватьДанныеСервисаИСМП(ПараметрыСканирования, ЗапрашиватьДанныеСервисаИСМП);

	// Заполнение по данным УПД
	ДанныеШтрихкодовСписок = Новый Массив;
	ДанныеНоменклатурыПоДаннымУПД = ШтрихкодированиеИСМПСлужебный.ДанныеМаркируемойНоменклатурыКодовМаркировкиПоДаннымЭДО(ДанныеДокумента.ДокументОснование);

	ДляУпаковокТребоватьПодключениеИСМП = Истина;
	Если Параметры.ВозможностьЗагрузкиДанныхБезПодключенияИСМП = Истина Тогда
		ДляУпаковокТребоватьПодключениеИСМП = Ложь;
	КонецЕсли;

	ВидыПродукцииДокумента = ДанныеНоменклатурыПоДаннымУПД.ВыгрузитьКолонку("ВидПродукции");
	ДанныеНоменклатурыПоДаннымУПД.Свернуть("ЗначениеШтрихкода");

	Для Каждого СтрокаТаблицы Из ДанныеНоменклатурыПоДаннымУПД Цикл
		ДанныеШтрихкодовСписок.Добавить(Новый Структура("Штрихкод, Количество", СтрокаТаблицы.ЗначениеШтрихкода, 1));
	КонецЦикла;

	ПараметрыСканирования.ДопустимыеВидыПродукции = ВидыПродукцииДокумента;
	ПараметрыСканирования.СсылкаНаОбъект               = ДанныеДокумента.ДокументОснование;

	Если ЭтоПродукцияМОТП Тогда
		РезультатПолученияДереваИСМП = ШтрихкодированиеМОТП.ВложенныеШтрихкоды(
			ДанныеШтрихкодовСписок, ПараметрыСканирования, ДляУпаковокТребоватьПодключениеИСМП);
	Иначе
		РезультатПолученияДереваИСМП = ШтрихкодированиеИСМПСлужебный.ВложенныеШтрихкоды(
			ДанныеШтрихкодовСписок, ПараметрыСканирования, ДляУпаковокТребоватьПодключениеИСМП);
	КонецЕсли;

	Если РезультатПолученияДереваИСМП.ЕстьОшибки Тогда
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Ошибка при заполнении формы расхождений для ""Акта о расхождениях при поступлении"".
			           |%1'"),
			РезультатПолученияДереваИСМП.ТекстОшибки);
		Если РезультатПолученияДереваИСМП.ТребуетсяОбновлениеКлючаСессии
			И Не ОбщегоНазначенияИСМПКлиентСервер.ЗначениеПараметраСканированияЗапрашиватьДанныеСервисаИСМП(ПараметрыСканирования) Тогда
			ТекстОшибки = СтрШаблон(
				НСтр("ru = '%1
				           |Включите опцию ""Запрашивать данные сервиса ГИС МТ""
				           |в панели администрирования ""Интеграция с ИС МП (обувь, одежда, табак...)""
				           |в разделе ""Настройки сканирования кодов маркировки"".'"),
				ТекстОшибки);
		КонецЕсли;
		ВызватьИсключение ТекстОшибки;
	ИначеЕсли ПрерватьОбработкуЗагрузкиДанных(
		ДанныеДокумента,
		ПараметрыСканирования,
		РезультатПолученияДереваИСМП) Тогда

		ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 0);
		ПоместитьВоВременноеХранилище(ДанныеДокумента, АдресРезультата);

		Возврат;
	КонецЕсли;

	ДеревоУпаковокПлан = РезультатПолученияДереваИСМП.ВложенныеШтрихкоды.ДеревоУпаковок;

	Если ДанныеДокумента.ПоддерживаетсяОбъемноСортовойУчет Тогда
		ДополнитьДеревоДокументаПлановымиДаннымиОСУ(ДанныеДокумента, ДеревоУпаковокПлан, ДеревоУпаковокФакт);
	КонецЕсли;

	ПараметрыСверки = СверкаКодовМаркировкиИСМП.ИнициализироватьПараметрыСверки();
	ПараметрыСверки.ЭтоПродукцияМОТП = ЭтоПродукцияМОТП;
	ПараметрыСверки.СохраненнаяДетализацияСтруктурыХранения = ДетализацияСтруктурыХранения;

	Если ЭтоПродукцияМОТП Тогда
		НормализоватьЛогистическиеУпаковки(ДеревоУпаковокПлан);
		НормализоватьЛогистическиеУпаковки(ДеревоУпаковокФакт);
	КонецЕсли;

	СтруктураТаблицыПланФакт = СверкаКодовМаркировкиИСМП.ТаблицыРасхожденийПоДаннымЭДО(
		ДеревоУпаковокФакт,
		ДеревоУпаковокПлан,
		ШтрихкодыБрак,
		ПараметрыСверки);

	ДанныеДокумента.ТаблицаРасхожденийКодовМаркировки = СверкаКодовМаркировкиИСМП.ТаблицаРасхожденийШтриховыхКодовПолная(СтруктураТаблицыПланФакт);
	ДанныеДокумента.ЭтоПродукцияМОТП = ЭтоПродукцияМОТП;

КонецПроцедуры

Процедура ДополнитьДеревоДокументаПлановымиДаннымиОСУ(ДанныеДокумента, ДеревоЗначенийЭДО, ДеревоЗначенийФакт)

	КешОбработанныхСтрок = Новый Соответствие;
	КешГруппировокПоGTIN = Новый Соответствие;

	ДополнитьСтрокиДереваОСУ(
		ДанныеДокумента,
		ДеревоЗначенийФакт,
		КешГруппировокПоGTIN,
		КешОбработанныхСтрок);

	ДополнитьСтрокиДереваОСУ(
		ДанныеДокумента,
		ДеревоЗначенийЭДО,
		КешГруппировокПоGTIN,
		КешОбработанныхСтрок,
		Перечисления.СтатусыПроверкиНаличияПродукцииИС.Отсутствует);

	СтрокаОбъемноСортовогоУчета = ДанныеДокумента.СтрокаПродукцияОбъемноСортовойУчет;

	Для Каждого СтрокаДерева Из СтрокаОбъемноСортовогоУчета.Строки Цикл
		ОбработатьПринятыеСтрокиОСУ(СтрокаДерева, КешОбработанныхСтрок);
	КонецЦикла;

КонецПроцедуры

Процедура ДополнитьСтрокиДереваОСУ(ДанныеДокумента, ДеревоОСУ, КешГруппировокПоGTIN, КешОбработанныхСтрок, СтатусПроверки = Неопределено)

	Для Каждого СтрокаИсточника Из ДеревоОСУ.Строки Цикл

		Если СтрокаИсточника.ВидУпаковки <> ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.ОбъемноСортовойУчет") Тогда
			Продолжить;
		КонецЕсли;

		НайденнаяСтрока = ДанныеДокумента.ДеревоМаркированнойПродукции.Строки.Найти(СтрокаИсточника.Штрихкод, "Штрихкод", Истина);

		Если НайденнаяСтрока = Неопределено Тогда

			ЭлементГруппировкиПоGTIN = КешГруппировокПоGTIN[СтрокаИсточника.GTIN];
			Если ЭлементГруппировкиПоGTIN = Неопределено Тогда
				ЭлементГруппировкиПоGTIN = СтрокаОбъемноСортовогоУчетаПоGTIN(ДанныеДокумента, СтрокаИсточника);
				КешГруппировокПоGTIN.Вставить(СтрокаИсточника.GTIN, ЭлементГруппировкиПоGTIN);
			КонецЕсли;

			НоваяСтрока = ЭлементГруппировкиПоGTIN.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточника);

			Если Не ЗначениеЗаполнено(НоваяСтрока.Номенклатура)
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаИсточника, "ПредставлениеНоменклатуры") Тогда
				НоваяСтрока.ПредставлениеСодержимоеУпаковки = СтрокаИсточника.ПредставлениеНоменклатуры;
			КонецЕсли;

			НоваяСтрока.ДобавленаПоДаннымЭДО = Истина;
			НоваяСтрока.КоличествоПодчиненныхПотребительскихУпаковок     = СтрокаИсточника.КоличествоПотребительскихУпаковок;
			НоваяСтрока.НеПересчитыватьКоличествоПотребительскихУпаковок = Истина;

			ПроверкаИПодборПродукцииИСМПКлиентСервер.СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(НоваяСтрока, Неопределено);

			Если ЗначениеЗаполнено(СтатусПроверки) Тогда // по данным ЭДО
				НоваяСтрока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.Отсутствует;
				КешОбработанныхСтрок.Вставить(НоваяСтрока, Истина);
			Иначе // по данным упаковок ОСУ верхнего уровня
				НоваяСтрока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии;
			КонецЕсли;

		Иначе

			КешОбработанныхСтрок.Вставить(НайденнаяСтрока, Истина);
			Если Не ЗначениеЗаполнено(СтатусПроверки)
				И НайденнаяСтрока.КоличествоПодчиненныхВНаличии > 0 И НайденнаяСтрока.КоличествоПодчиненныхОтсутствует > 0 Тогда
				// упаковка фактически принятого дерева с расхождениями
				НайденнаяСтрока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура ОбработатьПринятыеСтрокиОСУ(СтрокаДерева, КешОбработанныхСтрок)

	Если СтрокаДерева.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.ОбъемноСортовойУчет")
		И КешОбработанныхСтрок[СтрокаДерева] = Неопределено Тогда

		Если СтрокаДерева.СтатусПроверки <> Перечисления.СтатусыПроверкиНаличияПродукцииИС.Отсутствует Тогда
			СтрокаДерева.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась;
		КонецЕсли;
		Возврат;

	КонецЕсли;

	Если СтрокаДерева.ТипУпаковки = ПроверкаИПодборПродукцииИСМПКлиентСервер.ТипУпаковкиГруппировкаОбъемноСортовогоУчетаПоGTIN() Тогда

		Для Каждого ВложеннаяСтрока Из СтрокаДерева.Строки Цикл
			ОбработатьПринятыеСтрокиОСУ(ВложеннаяСтрока, КешОбработанныхСтрок);
			Если Не ЗначениеЗаполнено(СтрокаДерева.Номенклатура) Тогда
				ЗаполнитьЗначенияСвойств(СтрокаДерева, ВложеннаяСтрока, "Номенклатура, Характеристика");
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Функция ПолучитьДанныеПроверкиПоДокументу(ДокументДляОтбора)

	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СтатусыПроверкиИПодбораДокументовИСМП.ВидМаркируемойПродукции КАК ВидМаркируемойПродукции,
		|	СтатусыПроверкиИПодбораДокументовИСМП.ДанныеПроверкиИПодбора КАК ДанныеПроверкиИПодбора,
		|	СтатусыПроверкиИПодбораДокументовИСМП.СтатусПроверкиИПодбора КАК СтатусПроверкиИПодбора,
		|	СтатусыПроверкиИПодбораДокументовИСМП.Документ КАК Документ
		|ИЗ
		|	РегистрСведений.СтатусыПроверкиИПодбораДокументовИС КАК СтатусыПроверкиИПодбораДокументовИСМП
		|ГДЕ
		|	СтатусыПроверкиИПодбораДокументовИСМП.Документ В(&Документ)");

	Запрос.УстановитьПараметр("Документ", ДокументДляОтбора);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат РезультатЗапроса.Выбрать();
	КонецЕсли;

КонецФункции

Функция ДетализацияСтруктурыХраненияДерева(ДеревоУпаковок, ЭтоПродукцияМОТП)
	Если ЭтоПродукцияМОТП Тогда
		Возврат Обработки.ПроверкаИПодборТабачнойПродукцииМОТП.ДетализацияСтруктурыХраненияДерева(ДеревоУпаковок);
	Иначе
		Возврат Обработки.ПроверкаИПодборПродукцииИСМП.ДетализацияСтруктурыХраненияДерева(ДеревоУпаковок);
	КонецЕсли;
КонецФункции

Процедура ЗаполнитьСтатусПроверки(НоваяСтрока, СтрокаИсточника, ДанныеДокумента)

	Если ДанныеДокумента.СверкаПоДаннымКорректировки Или ДанныеДокумента.ДоступноСогласованиеРасхождений Тогда

		Если ДанныеДокумента.СверкаПоДаннымКорректировки Тогда
			Если СтрокаИсточника.Излишек Тогда
				НоваяСтрока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.Отсутствует;
			ИначеЕсли СтрокаИсточника.Принята Тогда
				НоваяСтрока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии;
			Иначе
				НоваяСтрока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась;
			КонецЕсли;
		Иначе
			Если СтрокаИсточника.Излишек Тогда
				НоваяСтрока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась;
			ИначеЕсли СтрокаИсточника.Принята Тогда
				НоваяСтрока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии;
			Иначе
				НоваяСтрока.СтатусПроверки = ДанныеДокумента.НачальныйСтатусПроверки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция ТаблицыПринятыхКодовПоДаннымУКД(ДанныеУпаковокОснования, ДанныеНоменклатурыПоДаннымЭДО)

	Результат = Новый Структура;
	Результат.Вставить("ТоварыПринятыеБезРасхождений", Неопределено);
	Результат.Вставить("КодыМаркировкиПроверяемогоДокумента", Неопределено);

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ШтрихкодыПоДаннымЭДО.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
		|	ШтрихкодыПоДаннымЭДО.Номенклатура      КАК Номенклатура,
		|	ШтрихкодыПоДаннымЭДО.Характеристика    КАК Характеристика,
		|	ШтрихкодыПоДаннымЭДО.СведенияДо        КАК СведенияДо
		|ПОМЕСТИТЬ ДанныеШтрихкодовАкт
		|ИЗ
		|	&ДанныеНоменклатурыПоДаннымЭДО КАК ШтрихкодыПоДаннымЭДО
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеУпаковокОснования.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
		|	ДанныеУпаковокОснования.Номенклатура      КАК Номенклатура,
		|	ДанныеУпаковокОснования.Характеристика    КАК Характеристика
		|ПОМЕСТИТЬ ДанныеУпаковокОснования
		|ИЗ
		|	&ДанныеУпаковокОснования КАК ДанныеУпаковокОснования
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	ЗначениеШтрихкода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеУпаковокОснования.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
		|	ДанныеУпаковокОснования.Номенклатура      КАК Номенклатура,
		|	ДанныеУпаковокОснования.Характеристика    КАК Характеристика
		|ИЗ
		|	ДанныеУпаковокОснования КАК ДанныеУпаковокОснования
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеШтрихкодовАкт КАК ДанныеШтрихкодовАкт
		|		ПО ДанныеУпаковокОснования.Номенклатура = ДанныеШтрихкодовАкт.Номенклатура
		|			И ДанныеУпаковокОснования.Характеристика = ДанныеШтрихкодовАкт.Характеристика
		|			И ДанныеШтрихкодовАкт.СведенияДо
		|			И ДанныеШтрихкодовАкт.ЗначениеШтрихкода = ДанныеУпаковокОснования.ЗначениеШтрихкода
		|ГДЕ
		|	ДанныеШтрихкодовАкт.ЗначениеШтрихкода ЕСТЬ NULL
		|	И (ДанныеУпаковокОснования.Номенклатура, ДанныеУпаковокОснования.Характеристика) В
		|			(ВЫБРАТЬ
		|				ДанныеШтрихкодовАкт.Номенклатура,
		|				ДанныеШтрихкодовАкт.Характеристика
		|			ИЗ
		|				ДанныеШтрихкодовАкт КАК ДанныеШтрихкодовАкт)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеШтрихкодовАкт.ЗначениеШтрихкода,
		|	ДанныеШтрихкодовАкт.Номенклатура,
		|	ДанныеШтрихкодовАкт.Характеристика
		|ИЗ
		|	ДанныеШтрихкодовАкт КАК ДанныеШтрихкодовАкт
		|ГДЕ
		|	НЕ ДанныеШтрихкодовАкт.СведенияДо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеУпаковокОснования.Номенклатура КАК Номенклатура
		|ИЗ
		|	ДанныеУпаковокОснования КАК ДанныеУпаковокОснования
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеШтрихкодовАкт КАК ДанныеШтрихкодовАкт
		|		ПО ДанныеУпаковокОснования.Номенклатура = ДанныеШтрихкодовАкт.Номенклатура
		|			И ДанныеУпаковокОснования.Характеристика = ДанныеШтрихкодовАкт.Характеристика
		|ГДЕ
		|	ДанныеШтрихкодовАкт.ЗначениеШтрихкода ЕСТЬ NULL";

	Запрос.УстановитьПараметр("ДанныеУпаковокОснования",       ДанныеУпаковокОснования);
	Запрос.УстановитьПараметр("ДанныеНоменклатурыПоДаннымЭДО", ДанныеНоменклатурыПоДаннымЭДО);

	МассивРезультатов = Запрос.ВыполнитьПакет();

	Результат.ТоварыПринятыеБезРасхождений        = МассивРезультатов[МассивРезультатов.Количество() - 1].Выгрузить();
	Результат.КодыМаркировкиПроверяемогоДокумента = МассивРезультатов[МассивРезультатов.Количество() - 2].Выгрузить();

	Возврат Результат;

КонецФункции

Функция ПрерватьОбработкуЗагрузкиДанных(ДанныеДокумента, ПараметрыСканирования, РезультатПолученияДанных)

	ДеревоУпаковок = РезультатПолученияДанных.ВложенныеШтрихкоды.ДеревоУпаковок;

	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл

		Если Не ЗначениеЗаполнено(СтрокаДерева.GTIN)
			И ДанныеДокумента.ВозможностьЗагрузкиДанныхБезПодключенияИСМП = Истина Тогда

			ДанныеДокумента.ДополнительноеДействиеЗагрузки = "ЗапроситьПодключениеИСМП";
			Возврат Истина;

		КонецЕсли;

	КонецЦикла;

	Возврат Ложь;

КонецФункции

#КонецОбласти

#КонецЕсли
