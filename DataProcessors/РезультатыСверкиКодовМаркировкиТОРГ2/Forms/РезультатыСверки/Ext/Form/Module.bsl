#Область ОписаниеПеременных

&НаКлиенте
Перем СоответствиеШтрихкодовСтрокДерева Экспорт;

&НаКлиенте
Перем Ссылка Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ИнициализироватьДанныеФормы();
	
	СформироватьПараметрыСверкиКодовМаркировки();
	
	ОбработатьИПроверитьПереданныеПараметры(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// варианты открытия:
	//1. акт поступления - основание: результаты проверки по регистру, дополнить упаковками эдо расхождениями
	//2. акт реализации  - основание: дерево по кодам из реализации, дополнить деревом ИС МП по ТОРГ-2
	//3. корр.поступл    - основание: дерево ИС МП по кодам УПДи/УКД, дополнить деревом ИС МП из акта
	
	ТребуетсяОбновлениеКлючаСессии = ИнтерфейсАвторизацииИСМПВызовСервера.ТребуетсяОбновлениеКлючаСессии(
		ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	ШтрихкодированиеИСКлиентСервер.ОтобразитьСохраненныйВыборПоМаркируемойПродукции(ЭтотОбъект);
	Если Не СохраненВыборПоМаркируемойПродукции Тогда
		ИнициализироватьДанныеВыбораПоМаркируемойПродукции(ДанныеВыбораПоМаркируемойПродукции);
		СверкаКодовМаркировкиИСМПКлиентСервер.ОтобразитьФильтрПоМаркируемойПродукции(ЭтотОбъект, ДанныеВыбораПоМаркируемойПродукции);
	КонецЕсли;
	
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ИнициализироватьПараметрыСканирования(Истина);
	
	Если Не НеобходимоОбращениеКСервисуИСМП(ПараметрыСканирования) Тогда
		ТребуетсяОбновлениеКлючаСессии = Ложь;
	КонецЕсли;
	
	Если ТребуетсяОбновлениеКлючаСессии Тогда
		ПодключитьОбработчикОжидания("ОбработкаОжиданияЗапросаКлючаСессии", 0.5, Истина);
	Иначе
		ЗагрузитьДанныеДокумента();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПредставлениеСохраненногоВыбораОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИнтеграцияИСКлиент.ПредставлениеСохраненногоВыбораОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
	ИнициализироватьДанныеВыбораПоМаркируемойПродукции(ДанныеВыбораПоМаркируемойПродукции);
	
	ОбновитьДанныеВыбораПоМаркируемойПродукции();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеУстановитьОтборОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "СохранитьДанныеВыбораПоМаркируемойПродукции" Тогда
		
		СохраненВыборПоМаркируемойПродукции = Не СохраненВыборПоМаркируемойПродукции;
		
		СкрытьСтрокиДереваСОтборомПоНоменклатуре(ЭтотОбъект);
		
		ШтрихкодированиеИСКлиентСервер.ОтобразитьСохраненныйВыборПоМаркируемойПродукции(ЭтотОбъект);
		СверкаКодовМаркировкиИСМПКлиентСервер.ОтобразитьФильтрПоМаркируемойПродукции(ЭтотОбъект);
		
		ОбновитьОтображениеДанных();
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьНоменклатуру" Тогда
		
		ПоказатьЗначение(, ДанныеВыбораПоМаркируемойПродукции.Номенклатура);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьХарактеристику" Тогда
		
		ПоказатьЗначение(, ДанныеВыбораПоМаркируемойПродукции.Характеристика);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

#Область ОбработчикиСобытийЭлементовДерева

&НаКлиенте
Процедура ДеревоРезультатовЭДОПриАктивизацииСтроки(Элемент)
	
	Если СохраненВыборПоМаркируемойПродукции Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПредставлениеФильтраПоМаркируемойПродукции(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМаркированнойПродукцииПриАктивизацииСтроки(Элемент)
	
	Если СохраненВыборПоМаркируемойПродукции Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПредставлениеФильтраПоМаркируемойПродукции(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРезультатовЭДОВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.ДеревоРезультатовЭДОПредставление
		И ЗначениеЗаполнено(ТекущиеДанные.ЗначениеШтрихкода) Тогда
		СтандартнаяОбработка = Ложь;
		
		НайденнаяСтрокаДерева = Неопределено;
		
		Если ОтображатьРезультатыФизПроверки = "ЭДОРасхождения" Тогда
			ИдентификаторСтроки = СоответствиеШтрихкодовСтрокДерева.Получить(ТекущиеДанные.ЗначениеШтрихкода + "ЭДО");
			Если ИдентификаторСтроки <> Неопределено Тогда
				НайденнаяСтрокаДерева = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторСтроки);
			КонецЕсли;
		КонецЕсли;
		
		Если НайденнаяСтрокаДерева = Неопределено Тогда
			
			ИдентификаторСтроки = СоответствиеШтрихкодовСтрокДерева.Получить(ТекущиеДанные.ЗначениеШтрихкода);
			Если ИдентификаторСтроки <> Неопределено Тогда
				НайденнаяСтрокаДерева = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторСтроки);
			КонецЕсли;
		КонецЕсли;
		
		Если НайденнаяСтрокаДерева = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Элементы.ДеревоМаркированнойПродукции.ТекущаяСтрока = НайденнаяСтрокаДерева.ПолучитьИдентификатор();
		Элементы.СтраницыПродукция.ТекущаяСтраница = Элементы.СтраницаРезультатыСверки;
		
		ОбновитьТекущуюСтрокуДереваПоОтборам(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтображатьРезультатыФизПроверкиПриИзменении(Элемент)
	
	ОбновитьТекущуюСтрокуДереваПоОтборам(ЭтотОбъект);
	
	СверкаКодовМаркировкиИСМПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковок(ЭтотОбъект.ДеревоМаркированнойПродукции,
		ЭтотОбъект.ОтображатьРезультатыФизПроверки,
		ЭтотОбъект.ЭтоПродукцияМОТП);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьДействиеПризнать(Команда)
	
	УстановитьДействиеДляВыделенныхСтрок(
		Элементы.ДеревоМаркированнойПродукции.ВыделенныеСтроки,
		ИнтеграцияИСМПКлиентСервер.ВариантДействийПоРасхождениямКодовМаркировкиИСМППризнать());
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДействиеНеПризнать(Команда)
	
	УстановитьДействиеДляВыделенныхСтрок(
		Элементы.ДеревоМаркированнойПродукции.ВыделенныеСтроки,
		ИнтеграцияИСМПКлиентСервер.ВариантДействийПоРасхождениямКодовМаркировкиИСМПНеПризнать());
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаЗавершена(Команда)
	
	Если ДоступноСогласованиеРасхождений И Не ТолькоПросмотр Тогда
		ОценкаПроизводительностиКлиент.ЗамерВремени("Обработка.РезультатыСверкиКодовМаркировкиТОРГ2.Форма.РезультатыСверки.ЗавершитьПроверку");
		
		ПараметрыОкончанияПроверки = Новый Структура;
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Сохранение результатов сверки'");
		
		ДлительнаяОперация = НачатьЗавершениеПроверки(ПараметрыОкончанияПроверки, ПараметрыСканирования);
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершениеПроверкиОкончание", ЭтотОбъект);
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
		
	Иначе
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
#Область ОтборыДеревоМаркируемойПродукции
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииПредставлениеПроверкиПодчиненных.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.СтатусПроверки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыПроверкиНаличияПродукцииИС.Отложена;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукции.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтображатьРезультатыФизПроверки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "Все";
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.НеСоответствуетОтборуВсе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукции.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтображатьРезультатыФизПроверки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "ФактическиеРасхождения";
	
	ГруппаОтбораИЛИ = ГруппаОтбора.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.НеСоответствуетОтбору");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.НеСоответствуетОтборуВсе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукции.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтображатьРезультатыФизПроверки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "ЭДОРасхождения";
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.НеСоответствуетОтборуЭДО");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукции.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СохраненВыборПоМаркируемойПродукции");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.НеСоответствуетОтборуНоменклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
#КонецОбласти
	
#Область ДеревоУпаковокЭДО
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРезультатовЭДОЗначениеШтрихкода.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтображатьРезультатыЭДО");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "ТолькоРасхождения";
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРезультатовЭДО.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтображатьРезультатыЭДО");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "ТолькоРасхождения";
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРезультатовЭДО.НеСоответствуетОтбору");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
#КонецОбласти
	
#Область ПредставлениеСтатусов
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииСтатусПроверки.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.ТипУпаковки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ТипУпаковкиПотребительскиеУпаковкиБезУпаковки();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииСтатусПроверки.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.ТипУпаковки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ТипУпаковкиПотребительскиеУпаковкиБезУпаковки();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииСтатусПроверки.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.ТипУпаковки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ТипУпаковкиГрупповыеУпаковкиБезКоробки();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииСтатусПроверки.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.СтатусПроверки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеПроверялась;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДоступноСогласованиеРасхождений");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПроверкаЭлектронногоДокумента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Неизвестен'"));
	
#Область ПредставлениеСтатусовСверкиКорректировочногоДокумента
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииСтатусПроверки.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СверкаПоДаннымКорректировки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.СтатусПроверки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась;
		
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПроблемаГосИС);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Излишек'"));

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииСтатусПроверки.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СверкаПоДаннымКорректировки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.СтатусПроверки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии;
		
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Соответствует'"));
	
#КонецОбласти
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииСтатусПроверки.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.НедопустимыйКодМаркировки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.ПредставлениеПроверкиКодаМаркировки"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПроблемаГосИС);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
#КонецОбласти

#Область ПредставлениеСтатусовЭДО
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРезультатовЭДОСтатусПроверки.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоРезультатовЭДО.НедопустимыйКодМаркировки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПроблемаГосИС);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Брак'"));
	
#КонецОбласти

#Область ДоступноСогласованиеРасхождений
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииДействиеПоРасхождениям.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.СтатусПроверки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.СтатусПроверки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеПроверялась;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииСтатусПроверки.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДоступноСогласованиеРасхождений");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.СтатусПроверки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Принята'"));
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииСтатусПроверки.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента =ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДоступноСогласованиеРасхождений");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.СтатусПроверки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Излишек'"));
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииСтатусПроверки.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДоступноСогласованиеРасхождений");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.СтатусПроверки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыПроверкиНаличияПродукцииИС.Отсутствует;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.НедопустимыйКодМаркировки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Недостача'"));
	
#КонецОбласти

#Область СодержимоеУпаковки

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииПредставлениеСодержимоеУпаковки.Имя);

	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.КоличествоПодчиненныхУпаковок");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.КоличествоПодчиненныхГрупповыхУпаковок");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.КоличествоПодчиненныхПотребительскихУпаковок");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.ТипУпаковки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыУпаковок.МаркированныйТовар;
		
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	
#КонецОбласти

КонецПроцедуры

#Область НачальноеЗаполнение

&НаСервере
Процедура ИнициализироватьДанныеФормы(РежимОчистки = Ложь)
	
	ИндексКартинкиЭДОПоУмолчанию = 7;
	
	ЦветГиперссылки           = ЦветаСтиля.ЦветГиперссылкиГосИС;
	ЦветТекстаПоля            = ЦветаСтиля.ЦветТекстаПоля;
	ЦветТекстаТребуетВнимания = ЦветаСтиля.ЦветТекстаТребуетВниманияГосИС;
	
	ОтображатьРезультатыФизПроверки = "ФактическиеРасхождения";
	ОтображатьРезультатыЭДО         = "ТолькоРасхождения";
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИПроверитьПереданныеПараметры(Отказ)
	
	Организация = Параметры.Организация;
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'В форму не передана организация'"),,,,
			Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверяемыйДокумент = Параметры.ПроверяемыйДокумент;
	
	ИнициализироватьДанныеВыбораПоМаркируемойПродукции(ДанныеВыбораПоМаркируемойПродукции);
	
	Если Параметры.Свойство("ДанныеВыбораПоМаркируемойПродукции") Тогда
		Если Параметры.Свойство("СохраненВыборПоМаркируемойПродукции")
			И Параметры.СохраненВыборПоМаркируемойПродукции Тогда
			ДанныеВыбораПоМаркируемойПродукции  = Параметры.ДанныеВыбораПоМаркируемойПродукции;
			СохраненВыборПоМаркируемойПродукции = Параметры.СохраненВыборПоМаркируемойПродукции;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ПараметрыСверкиКодовМаркировки, Параметры);
	
	ПроверкаЭлектронногоДокумента   = Параметры.ПроверкаЭлектронногоДокумента;
	ДоступноСогласованиеРасхождений = Параметры.ДоступноСогласованиеРасхождений;
	СверкаПоДаннымКорректировки     = Не (Параметры.ВосстановитьПоДаннымПроверкиПодбора Или ДоступноСогласованиеРасхождений);
	
	ПараметрыСверкиКодовМаркировки.ВосстановитьДанныеПоРезультатамПроверкиИПодбора = Параметры.ВосстановитьПоДаннымПроверкиПодбора;
	
	Элементы.ДеревоМаркированнойПродукцииДействиеПоРасхождениям.Видимость = ДоступноСогласованиеРасхождений;
	Элементы.ПодменюПризнатьРасхождения.Видимость                         = ДоступноСогласованиеРасхождений И Не Параметры.РедактированиеФормыНедоступно;
	
	Заголовок = Параметры.ЗаголовокФормы;
	
	Если ДоступноСогласованиеРасхождений Тогда
		Элементы.ДеревоМаркированнойПродукцииСтатусПроверки.Заголовок = НСтр("ru = 'Статус проверки покупателем'");
	Иначе
		Если СверкаПоДаннымКорректировки Тогда
			Элементы.ДеревоМаркированнойПродукцииСтатусПроверки.Заголовок = НСтр("ru = 'УКД'");
			Элементы.ДеревоМаркированнойПродукцииЭДО.Заголовок = НСтр("ru = 'ТОРГ-2'");
		Иначе
			Элементы.ДеревоМаркированнойПродукцииСтатусПроверки.Заголовок = НСтр("ru = 'Статус проверки'");
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.РедактированиеФормыНедоступно Тогда
		ТолькоПросмотр = Истина;
		Элементы.ФормаПеренестиВДокумент.Заголовок = НСтр("ru = 'Закрыть'");
	КонецЕсли;
	
	Если Параметры.Свойство("ИдентификаторВладельца") Тогда
		ИдентификаторВладельца = Параметры.ИдентификаторВладельца;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПараметрыСверкиКодовМаркировки()
	
	ПараметрыСверкиКодовМаркировки = Новый Структура();
	ПараметрыСверкиКодовМаркировки.Вставить("ОтсутствуетПодключениеИСМП",      Ложь);
	ПараметрыСверкиКодовМаркировки.Вставить("ДоступноСогласованиеРасхождений", Ложь);
	
	ПараметрыСверкиКодовМаркировки.Вставить("ИмяТабличнойЧастиШтрихкодыУпаковокФакт",          "");
	ПараметрыСверкиКодовМаркировки.Вставить("ИмяТабличнойЧастиШтрихкодыУпаковокРасхождения",   "");
	ПараметрыСверкиКодовМаркировки.Вставить("ВосстановитьДанныеПоРезультатамПроверкиИПодбора", Ложь);
	
	ПараметрыСверкиКодовМаркировки.Вставить("ВозможностьЗагрузкиДанныхБезПодключенияИСМП", Неопределено);
	
	Если Не (ДоступноСогласованиеРасхождений Или СверкаПоДаннымКорректировки) Или ПроверкаЭлектронногоДокумента Тогда
		Если ОбщегоНазначенияИСМПКлиентСерверПовтИсп.ЗапрашиватьДанныеСервиса() Тогда
			ПараметрыСверкиКодовМаркировки.ВозможностьЗагрузкиДанныхБезПодключенияИСМП = Ложь;
		Иначе
			ПараметрыСверкиКодовМаркировки.ВозможностьЗагрузкиДанныхБезПодключенияИСМП = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоответствиеШтрихкодовСтрокДерева(АдресСоответствиеШтрихкодыИдентификаторыСтрок)
	
	Если ЭтоАдресВременногоХранилища(АдресСоответствиеШтрихкодыИдентификаторыСтрок) Тогда
		Возврат ПолучитьИзВременногоХранилища(АдресСоответствиеШтрихкодыИдентификаторыСтрок);
	Иначе
		Возврат Новый Соответствие;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОжиданияЗапросаКлючаСессии()
	
	ЗапроситьКлючСессииНачало();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьКлючСессииНачало(ПовторныйЗапрос = Ложь)
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ПовторныйЗапрос", ПовторныйЗапрос);
	
	ОповещениеПриЗапросеКлючаСессии = Новый ОписаниеОповещения("ЗапроситьКлючСессииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ИнтерфейсАвторизацииИСМПКлиент.ЗапроситьКлючСессии(
		ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация),
		ОповещениеПриЗапросеКлючаСессии);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьКлючСессииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОтказОтАвторизации = Ложь;
	ОшибкаАвторизации  = Ложь;
	
	Если ТипЗнч(Результат) <> Тип("Соответствие") Тогда
		ОтказОтАвторизации = Истина;
	Иначе
		РезультатАвторизации = Результат[Организация];
		
		Если РезультатАвторизации = Неопределено Тогда
			ОшибкаАвторизации = Истина;
			ТекстОшибки = НСтр("ru = 'Произошла ошибка при авторизации в ИС МП'");
		ИначеЕсли РезультатАвторизации <> Истина Тогда
			ОшибкаАвторизации = Истина;
			ТекстОшибки = РезультатАвторизации;
		КонецЕсли;
	КонецЕсли;
	
	ПовторныйЗапрос = Ложь;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ДополнительныеПараметры.Свойство("ПовторныйЗапрос", ПовторныйЗапрос);
	КонецЕсли;
	
	Если ПовторныйЗапрос Тогда
		Если ОтказОтАвторизации ИЛИ ОшибкаАвторизации Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		Иначе
			ПриПодключенииКСервисуИСМП();
		КонецЕсли;
	ИначеЕсли ОтказОтАвторизации Тогда
		ЗакрытьФорму();
	ИначеЕсли ОшибкаАвторизации Тогда
		ПриОшибкеПодключенияКСервисуИСМП(ТекстОшибки);
	Иначе
		ЗагрузитьДанныеДокумента();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПодключенииКСервисуИСМП()
	
	ПараметрыСверкиКодовМаркировки.ОтсутствуетПодключениеИСМП = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОшибкеПодключенияКСервисуИСМП(ТекстОшибки)
	
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
	ПараметрыСверкиКодовМаркировки.ОтсутствуетПодключениеИСМП = Истина;
	Если Открыта() Тогда
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ЗакрытьФорму", ЭтотОбъект), ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДанныеПроверкиИПодбораНаФорму(ДанныеПроверкиИПодбора)
	
	Если ДанныеПроверкиИПодбора.Свойство("ТаблицаРасхожденийКодовМаркировки") Тогда
		ТаблицаРасхожденийКодовМаркировкиОбъект = ДанныеПроверкиИПодбора.ТаблицаРасхожденийКодовМаркировки;
	Иначе
		Если ДанныеПроверкиИПодбора.Свойство("ТаблицыТОРГ2") Тогда
			ТаблицаРасхожденийКодовМаркировкиОбъект = СверкаКодовМаркировкиИСМП.ТаблицаРасхожденийШтриховыхКодовПолная(ДанныеПроверкиИПодбора.ТаблицыТОРГ2);
		Иначе
			ТаблицаРасхожденийКодовМаркировкиОбъект = СверкаКодовМаркировкиИСМП.ИнициализацияТаблицыШтрихкодыУпаковокПринятоИзлишекНедостача();
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка
		ЗначениеВРеквизитФормы(ТаблицаРасхожденийКодовМаркировкиОбъект, "ТаблицаРасхожденийКодовМаркировки");
	Исключение
		ПроверкаИПодборПродукцииИС.ПроверитьКолонкиИсточникаИПриемникаНаСовместимость(
			ТаблицаРасхожденийКодовМаркировкиОбъект, РеквизитФормыВЗначение("ТаблицаРасхожденийКодовМаркировки"));
		Возврат;
	КонецПопытки;
		
	Если ДанныеПроверкиИПодбора.Свойство("ДеревоМаркированнойПродукции") Тогда
		
		ДеревоМаркированнойПродукцииОбъект = ДанныеПроверкиИПодбора.ДеревоМаркированнойПродукции;
		
		ДобавитьКолонкиПриВосстановленииДерева(ДеревоМаркированнойПродукцииОбъект);
		
		ПараметрыЗаполнения = Новый Структура();
		ПараметрыЗаполнения.Вставить("СоответствуетОтбору", Ложь);
		ПараметрыЗаполнения.Вставить("ПерваяИтерация", Истина);
		ПараметрыЗаполнения.Вставить("ИндексКартинкиЭДОПоУмолчанию", ИндексКартинкиЭДОПоУмолчанию);
		ПараметрыЗаполнения.Вставить("СохраненВыборПоМаркируемойПродукции", СохраненВыборПоМаркируемойПродукции);
		
		Если СохраненВыборПоМаркируемойПродукции Тогда
			
			ПараметрыЗаполнения.Вставить("СоответствуетОтборуНоменклатура", Ложь);
			
			ПараметрыЗаполнения.Вставить("Номенклатура", ДанныеВыбораПоМаркируемойПродукции.Номенклатура);
			ПараметрыЗаполнения.Вставить("Характеристика", ДанныеВыбораПоМаркируемойПродукции.Характеристика);
			
		КонецЕсли;
		
		СтрокаГрупповыеУпаковкиБезКоробки = Неопределено;
		
		ЭлементыДерева = ДеревоМаркированнойПродукцииОбъект.Строки;
		Для ИндексСтроки = 0 По Мин(2, ЭлементыДерева.Количество() - 1) Цикл
			СтрокаДереваМаркированнойПродукции = ЭлементыДерева[ИндексСтроки];
			Если СтрокаДереваМаркированнойПродукции.ТипУпаковки = ТипУпаковкиГрупповыеУпаковкиБезКоробки() Тогда
				СтрокаГрупповыеУпаковкиБезКоробки = СтрокаДереваМаркированнойПродукции;  
			КонецЕсли;
		КонецЦикла;
		
		ДетализацияСтруктурыХранения = ДанныеПроверкиИПодбора.ДетализацияСтруктурыХранения;
		Если СтрокаГрупповыеУпаковкиБезКоробки = Неопределено
			И ЗначениеЗаполнено(ДетализацияСтруктурыХранения)
			И ДетализацияСтруктурыХранения <> ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки")
			И ДетализацияСтруктурыХранения <> ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковкиСПотребительскими") Тогда
			Если ЭлементыДерева.Количество() = 0 Тогда
				НоваяСтрока = ЭлементыДерева.Вставить(0);
			ИначеЕсли ЭлементыДерева[0].ТипУпаковки = ТипУпаковкиПотребительскиеУпаковкиБезУпаковки() Тогда
				НоваяСтрока = ЭлементыДерева.Вставить(1);
			Иначе
				НоваяСтрока = ЭлементыДерева.Вставить(0);
			КонецЕсли;
			
			Если ДанныеПроверкиИПодбора.ЭтоПродукцияМОТП Тогда
				ВидПродукции = Перечисления.ВидыПродукцииИС.Табак;
			Иначе
				ВидПродукции = Неопределено;
			КонецЕсли;
			ПроверкаИПодборПродукцииИСМПКлиентСервер.ЗаполнитьСтрокуГрупповыеУпаковкиБезКоробки(НоваяСтрока, ВидПродукции);
		КонецЕсли;
		
		ЗаполнитьСлужебныеРеквизитыКоллекцииСтрок(ДеревоМаркированнойПродукцииОбъект.Строки, ПараметрыЗаполнения, ДанныеПроверкиИПодбора);
		
		ДополнитьУпаковкиПоДаннымЭДО(
			ДеревоМаркированнойПродукцииОбъект,
			ТаблицаРасхожденийКодовМаркировкиОбъект,
			ДанныеПроверкиИПодбора);
		
		Попытка
			ЗначениеВРеквизитФормы(ДеревоМаркированнойПродукцииОбъект, "ДеревоМаркированнойПродукции");
		Исключение
			ПроверкаИПодборПродукцииИС.ПроверитьКолонкиИсточникаИПриемникаНаСовместимость(
				ДеревоМаркированнойПродукцииОбъект, РеквизитФормыВЗначение("ДеревоМаркированнойПродукции"));
			Возврат;
		КонецПопытки;
		
		СоответствиеШтрихкодовСтрокДерева = Новый Соответствие;
		ДополнитьСоответствиеШтрихкодовСтрокДереваДляКоллекции(ДеревоМаркированнойПродукции.ПолучитьЭлементы(), СоответствиеШтрихкодовСтрокДерева);
		
		Если ПустаяСтрока(АдресСоответствиеШтрихкодыИдентификаторыСтрок) Тогда
			АдресСоответствиеШтрихкодыИдентификаторыСтрок = ПоместитьВоВременноеХранилище(
				СоответствиеШтрихкодовСтрокДерева,
				УникальныйИдентификатор);
		Иначе
			АдресСоответствиеШтрихкодыИдентификаторыСтрок = ПоместитьВоВременноеХранилище(
				СоответствиеШтрихкодовСтрокДерева,
				АдресСоответствиеШтрихкодыИдентификаторыСтрок);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКолонкиПриВосстановленииДерева(ДеревоМаркированнойПродукцииОбъект)
	
	ИмяКолонки = "ВидУпаковки";
	Если ДеревоМаркированнойПродукцииОбъект.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
		ДеревоМаркированнойПродукцииОбъект.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("ПеречислениеСсылка.ВидыУпаковокИС"));
	КонецЕсли;
	
	ИмяКолонки = "ЭДО";
	Если ДеревоМаркированнойПродукцииОбъект.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
		ДеревоМаркированнойПродукцииОбъект.Колонки.Добавить(ИмяКолонки, ОбщегоНазначения.ОписаниеТипаЧисло(1));
	КонецЕсли;
	
	ИмяКолонки = "НеСоответствуетОтборуЭДО";
	Если ДеревоМаркированнойПродукцииОбъект.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
		ДеревоМаркированнойПродукцииОбъект.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	ИмяКолонки = "НеСоответствуетОтборуВсе";
	Если ДеревоМаркированнойПродукцииОбъект.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
		ДеревоМаркированнойПродукцииОбъект.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	ИмяКолонки = "НеСоответствуетОтборуНоменклатура";
	Если ДеревоМаркированнойПродукцииОбъект.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
		ДеревоМаркированнойПродукцииОбъект.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	ИмяКолонки = "ДействиеПоРасхождениям";
	Если ДеревоМаркированнойПродукцииОбъект.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
		ДеревоМаркированнойПродукцииОбъект.Колонки.Добавить(ИмяКолонки, Метаданные.ОпределяемыеТипы.ВариантДействийПоРасхождениямКодовМаркировкиИСМП.Тип);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСлужебныеРеквизитыКоллекцииСтрок(КоллекцияСтрок, 
	ПараметрыЗаполнения, ДанныеПроверкиИПодбора, СоответствуетОтбору = Ложь)
	
	ПараметрыЗаполненияВложенныхСтрок = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыЗаполнения);
	
	Для Каждого СтрокаДерева Из КоллекцияСтрок Цикл
		
		ЭтоСтрокаГруппировки = Ложь;
		Если СтрокаДерева.ТипУпаковки = ТипУпаковкиПотребительскиеУпаковкиБезУпаковки()
			Или СтрокаДерева.ТипУпаковки = ТипУпаковкиГрупповыеУпаковкиБезКоробки()
			Или СтрокаДерева.ТипУпаковки = ТипУпаковкиОбъемноСортовойУчет()
			Или СтрокаДерева.ТипУпаковки = ТипУпаковкиГруппировкаОбъемноСортовогоУчетаПоGTIN() Тогда
			
			СтрокаДерева.ИндексКартинкиСтатусПроверки = ПараметрыЗаполнения.ИндексКартинкиЭДОПоУмолчанию;
			СтрокаДерева.ЭДО = ПараметрыЗаполнения.ИндексКартинкиЭДОПоУмолчанию;
			Если СтрокаДерева.Строки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			ЭтоСтрокаГруппировки = Истина;
			
		КонецЕсли;
		
		ТекущаяСтрокаСоответствуетОтбору = Ложь;
		ТекущаяСтрокаСоответствуетОтборуНоменклатура = Ложь;
		
		Если ПараметрыЗаполнения.СохраненВыборПоМаркируемойПродукции Тогда
			ПараметрыЗаполненияВложенныхСтрок.СоответствуетОтборуНоменклатура = Ложь;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаДерева.ВидУпаковки) И Не ЭтоСтрокаГруппировки Тогда
			Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки) Тогда
				СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая;
			Иначе
				СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыЗаполнения.СохраненВыборПоМаркируемойПродукции Тогда
			
			Если (СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
				Или СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
				Или СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
				Или СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет)
				И СтрокаДерева.Номенклатура = ПараметрыЗаполнения.Номенклатура
				И СтрокаДерева.Характеристика = ПараметрыЗаполнения.Характеристика Тогда
				ТекущаяСтрокаСоответствуетОтборуНоменклатура = Истина;
			Иначе
				ТекущаяСтрокаСоответствуетОтборуНоменклатура = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		СоответствуетОтбору = Ложь;
		ПараметрыЗаполненияВложенныхСтрок.СоответствуетОтбору = Ложь;
		Если СтрокаДерева.Строки.Количество() = 0 Тогда
			
			ТекущаяСтрокаСоответствуетОтбору = СтрокаДерева.СтатусПроверки <> Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии
				И (Не СтрокаДерева.ДобавленаПоДаннымЭДО
				   Или ДанныеПроверкиИПодбора.ДоступноСогласованиеРасхождений
				   Или СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет);
			
		Иначе
			
			ЗаполнитьСлужебныеРеквизитыКоллекцииСтрок(СтрокаДерева.Строки, 
				ПараметрыЗаполненияВложенныхСтрок, ДанныеПроверкиИПодбора, СоответствуетОтбору);
			Если ПараметрыЗаполненияВложенныхСтрок.СоответствуетОтбору Тогда
				ТекущаяСтрокаСоответствуетОтбору = Истина;
			КонецЕсли;
			Если Не ТекущаяСтрокаСоответствуетОтбору 
				И Не СтрокаДерева.ТипУпаковки = ТипУпаковкиГруппировкаОбъемноСортовогоУчетаПоGTIN() Тогда
				ТекущаяСтрокаСоответствуетОтбору = СтрокаДерева.СтатусПроверки <> Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии;
			КонецЕсли;
			
			Если ПараметрыЗаполнения.СохраненВыборПоМаркируемойПродукции Тогда
				Если ПараметрыЗаполненияВложенныхСтрок.СоответствуетОтборуНоменклатура Тогда
					ТекущаяСтрокаСоответствуетОтборуНоменклатура = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		ПараметрыЗаполнения.СоответствуетОтбору = ТекущаяСтрокаСоответствуетОтбору Или ПараметрыЗаполнения.СоответствуетОтбору;
		СтрокаДерева.НеСоответствуетОтбору      = Не ТекущаяСтрокаСоответствуетОтбору;
		
		Если ПараметрыЗаполнения.СохраненВыборПоМаркируемойПродукции Тогда
			
			ПараметрыЗаполнения.СоответствуетОтборуНоменклатура = ТекущаяСтрокаСоответствуетОтборуНоменклатура
				Или ПараметрыЗаполнения.СоответствуетОтборуНоменклатура;
			СтрокаДерева.НеСоответствуетОтборуНоменклатура     = Не ТекущаяСтрокаСоответствуетОтборуНоменклатура;
			
		КонецЕсли;
		
		СтрокаДерева.НеСоответствуетОтборуЭДО = Не (СтрокаДерева.ТипУпаковки = ТипУпаковкиПотребительскиеУпаковкиБезУпаковки()
			Или СтрокаДерева.ТипУпаковки = ТипУпаковкиГрупповыеУпаковкиБезКоробки()
			Или СтрокаДерева.ТипУпаковки = ТипУпаковкиОбъемноСортовойУчет());
		СтрокаДерева.ЭДО = ПараметрыЗаполнения.ИндексКартинкиЭДОПоУмолчанию;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ДобавленнаяСтрокаГрупповыеУпаковкиБезКоробки()

	ЭлементыДерева = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
	
	Если ЭлементыДерева.Количество() = 0 Тогда
		НоваяСтрока = ЭлементыДерева.Вставить(0);
	ИначеЕсли ЭлементыДерева[0].ТипУпаковки = ТипУпаковкиПотребительскиеУпаковкиБезУпаковки() Тогда
		НоваяСтрока = ЭлементыДерева.Вставить(1);
	Иначе
		НоваяСтрока = ЭлементыДерева.Вставить(0);
	КонецЕсли;
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ЗаполнитьСтрокуГрупповыеУпаковкиБезКоробки(НоваяСтрока, Неопределено);
	
	Возврат НоваяСтрока;
	
КонецФункции

&НаКлиенте
Функция ДобавленнаяСтрокаПотребительскиеУпаковкиБезУпаковки()
	
	НоваяСтрока = ДеревоМаркированнойПродукции.ПолучитьЭлементы().Вставить(0);
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ЗаполнитьСтрокуПродукцияБезУпаковки(НоваяСтрока, Неопределено);
	
	Возврат НоваяСтрока;
	
КонецФункции

&НаСервереБезКонтекста
Функция СохраненнаяДетализацияСтруктурыХранения(РежимПодбораСуществующихУпаковок)
	
	СохраненнаяДетализация = ПроверкаИПодборПродукцииИСМП.СохраненнаяДетализацияСтруктурыХранения(РежимПодбораСуществующихУпаковок);
	Возврат СохраненнаяДетализация;
	
КонецФункции

&НаСервере
Процедура ДополнитьУпаковкиПоДаннымЭДО(ДеревоМаркированнойПродукцииОбъект, ТаблицаРасхожденийПолная, ДанныеПроверкиИПодбора)
	
	Детализация = ДанныеПроверкиИПодбора.ДетализацияСтруктурыХранения;
	
	СтрокаБлокиБезКоробки =  ДеревоМаркированнойПродукцииОбъект.Строки.Найти(
		ТипУпаковкиГрупповыеУпаковкиБезКоробки(),
		"ТипУпаковки");
	
	СтрокаПродукцияБезУпаковки = ДеревоМаркированнойПродукцииОбъект.Строки.Найти(
		ТипУпаковкиПотребительскиеУпаковкиБезУпаковки(),
		"ТипУпаковки"); 
	
	Если ДанныеПроверкиИПодбора.ПоддерживаетсяОбъемноСортовойУчет Тогда
		СтрокаОбъемноСортовогоУчета = ДеревоМаркированнойПродукцииОбъект.Строки.Найти(
			ТипУпаковкиОбъемноСортовойУчет(),
			"ТипУпаковки");
	КонецЕсли;
	
	ТаблицаРасхождений = ТаблицаРасхожденийПолная.Скопировать(,"ЗначениеШтрихкода, ТипРасхождения");
	ТаблицаРасхождений.Свернуть("ЗначениеШтрихкода, ТипРасхождения");
	
	Для Каждого СтрокаРасхождений Из ТаблицаРасхождений Цикл
		НайденнаяСтрокаДерева = ДеревоМаркированнойПродукцииОбъект.Строки.Найти(
			СтрокаРасхождений.ЗначениеШтрихкода,
			"Штрихкод", Истина);
		
		Если НайденнаяСтрокаДерева = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаРасхождений.ТипРасхождения = ИнтеграцияИСМП.ТипРасхожденияИСМПИзлишек() Тогда
			ИндексКартинкиЭДО = 4;
		ИначеЕсли СтрокаРасхождений.ТипРасхождения = ИнтеграцияИСМП.ТипРасхожденияИСМПНедостача()
			Или СтрокаРасхождений.ТипРасхождения = ИнтеграцияИСМП.ТипРасхожденияИСМПБрак() Тогда
			ИндексКартинкиЭДО = 1;
		Иначе
			ИндексКартинкиЭДО = ИндексКартинкиЭДОПоУмолчанию;
		КонецЕсли;
		
		НайденнаяСтрокаДерева.ЭДО = ИндексКартинкиЭДО;
		Если НайденнаяСтрокаДерева.ДобавленаПоДаннымЭДО
			И Не (ДанныеПроверкиИПодбора.ДоступноСогласованиеРасхождений
			      Или (ИндексКартинкиЭДО <> ИндексКартинкиЭДОПоУмолчанию
			           И НайденнаяСтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет)) Тогда
			НайденнаяСтрокаДерева.НеСоответствуетОтборуВсе = Истина;
		КонецЕсли;
		
		Если ИндексКартинкиЭДО = 4 Тогда
			Если НайденнаяСтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
				Если Детализация = Перечисления.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки
					Или Детализация = Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковки Тогда
					НайденнаяСтрокаДерева.НеСоответствуетОтборуЭДО = Ложь;
				Иначе
					СтрокаПродукцияБезУпаковки.НеСоответствуетОтборуЭДО = Ложь;
					Если НайденнаяСтрокаДерева.Родитель = СтрокаПродукцияБезУпаковки Тогда
						НайденнаяСтрокаДерева.НеСоответствуетОтборуЭДО = Ложь;
					Иначе
						НайденнаяСтрокаДерева.НеСоответствуетОтборуЭДО = Истина;
						ДобавитьСтрокуИзлишекЭДО(СтрокаПродукцияБезУпаковки, НайденнаяСтрокаДерева);
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ПроверкаИПодборПродукцииМОТПКлиентСервер.ЭтоУпаковкаБлока(НайденнаяСтрокаДерева)
				И Детализация <> Перечисления.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки
				И Детализация <> Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковкиСПотребительскими Тогда
				
				Если СтрокаБлокиБезКоробки <> Неопределено Тогда
					СтрокаБлокиБезКоробки.НеСоответствуетОтборуЭДО = Ложь;
					Если НайденнаяСтрокаДерева.Родитель = СтрокаБлокиБезКоробки Тогда
						НайденнаяСтрокаДерева.НеСоответствуетОтборуЭДО = Ложь;
					Иначе
						НайденнаяСтрокаДерева.НеСоответствуетОтборуЭДО = Истина;
						НоваяСтрока = ДобавитьСтрокуИзлишекЭДО(СтрокаБлокиБезКоробки, НайденнаяСтрокаДерева);
						Для Каждого ВложеннаяСтрока Из НайденнаяСтрокаДерева.Строки Цикл
							ЗаполнитьВложенныеСтрокиИзлишекЭДО(ВложеннаяСтрока, НоваяСтрока);
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ДанныеПроверкиИПодбора.ПоддерживаетсяОбъемноСортовойУчет
				И (НайденнаяСтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет
					Или НайденнаяСтрокаДерева.Родитель <> Неопределено
						И (НайденнаяСтрокаДерева.Родитель = СтрокаОбъемноСортовогоУчета
						   Или НайденнаяСтрокаДерева.Родитель.ТипУпаковки = ТипУпаковкиГруппировкаОбъемноСортовогоУчетаПоGTIN())) Тогда
				
				СтрокаОбъемноСортовогоУчета.НеСоответствуетОтборуЭДО = Ложь;
				НайденнаяСтрокаДерева.Родитель.НеСоответствуетОтборуЭДО = Ложь;
				НайденнаяСтрокаДерева.НеСоответствуетОтборуЭДО = Ложь;
				
			Иначе //логистическая
				НоваяСтрока = ДобавитьСтрокуИзлишекЭДО(ДеревоМаркированнойПродукцииОбъект, НайденнаяСтрокаДерева);
				Для Каждого ВложеннаяСтрока Из НайденнаяСтрокаДерева.Строки Цикл
					ЗаполнитьВложенныеСтрокиИзлишекЭДО(ВложеннаяСтрока, НоваяСтрока);
				КонецЦикла;
			КонецЕсли;
			
		ИначеЕсли ИндексКартинкиЭДО = 1 Тогда
			
			НайденнаяСтрокаДерева.НеСоответствуетОтборуЭДО = Ложь;
			
			Если НайденнаяСтрокаДерева.Родитель = СтрокаПродукцияБезУпаковки
				И СтрокаПродукцияБезУпаковки <> Неопределено
				И (Детализация <> Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковки
				   Или Детализация <> Перечисления.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки)
				Тогда
				СтрокаПродукцияБезУпаковки.НеСоответствуетОтборуЭДО = Ложь;
			КонецЕсли;
			
			Если Детализация <> Перечисления.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки
				И Детализация <> Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковкиСПотребительскими
				И НайденнаяСтрокаДерева.Родитель = СтрокаБлокиБезКоробки 
				И СтрокаБлокиБезКоробки <> Неопределено Тогда
				СтрокаБлокиБезКоробки.НеСоответствуетОтборуЭДО = Ложь;
			КонецЕсли;
			
			Если ДанныеПроверкиИПодбора.ПоддерживаетсяОбъемноСортовойУчет
				И (НайденнаяСтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет
					Или НайденнаяСтрокаДерева.Родитель <> Неопределено
						И (НайденнаяСтрокаДерева.Родитель = СтрокаОбъемноСортовогоУчета
						   Или НайденнаяСтрокаДерева.Родитель.ТипУпаковки = ТипУпаковкиГруппировкаОбъемноСортовогоУчетаПоGTIN())) Тогда
				СтрокаОбъемноСортовогоУчета.НеСоответствуетОтборуЭДО = Ложь;
				НайденнаяСтрокаДерева.Родитель.НеСоответствуетОтборуЭДО = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ДобавитьСтрокуИзлишекЭДО(СтрокаДерева, СтрокаИсточник)
	
	НоваяСтрока = СтрокаДерева.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточник);
	НоваяСтрока.НеСоответствуетОтборуВсе = Истина;
	НоваяСтрока.НеСоответствуетОтборуЭДО = Ложь;
	
	Возврат НоваяСтрока;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьВложенныеСтрокиИзлишекЭДО(Источник, СтрокаПриемник)
	
	НоваяСтрока = СтрокаПриемник.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Источник);
	НоваяСтрока.НеСоответствуетОтборуВсе = Истина;
	НоваяСтрока.НеСоответствуетОтборуЭДО = Ложь;
	НоваяСтрока.НеСоответствуетОтборуНоменклатура = Истина;
	
	Если Источник.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Потребительская Тогда
		Для Каждого ВложеннаяСтрока Из Источник.Строки Цикл
			ЗаполнитьВложенныеСтрокиИзлишекЭДО(ВложеннаяСтрока, НоваяСтрока);
		КонецЦикла;
	КонецЕсли;
	
Конецпроцедуры

&НаСервере
Процедура ВывестиРезультатыПроверкиЭДО()
	
	ДеревоРезультатовЭДООбъект = ДеревоРезультатовЭДО();
	
	ЗаполнитьДанныеДереваПродукцииЭДО(ТаблицаРасхожденийКодовМаркировки, ДеревоРезультатовЭДООбъект);
	
	Попытка
		ЗначениеВРеквизитФормы(ДеревоРезультатовЭДООбъект, "ДеревоРезультатовЭДО");
	Исключение
		ПроверкаИПодборПродукцииИС.ПроверитьКолонкиИсточникаИПриемникаНаСовместимость(
			ДеревоРезультатовЭДООбъект, РеквизитФормыВЗначение("ДеревоРезультатовЭДО"));
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ДеревоРезультатовЭДО()
	
	ДеревоЗначенийРезультатовЭДО = Новый ДеревоЗначений();
	
	ДеревоЗначенийРезультатовЭДО.Колонки.Добавить("СтатусПроверки",                      Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыПроверкиНаличияПродукцииИС"));
	ДеревоЗначенийРезультатовЭДО.Колонки.Добавить("ЗначениеШтрихкода",                   Новый ОписаниеТипов("Строка"));
	ДеревоЗначенийРезультатовЭДО.Колонки.Добавить("ИндексКартинкиТипУпаковки",           Новый ОписаниеТипов("Число"));
	ДеревоЗначенийРезультатовЭДО.Колонки.Добавить("ИндексКартинкиСтатусПроверки",        Новый ОписаниеТипов("Число"));
	ДеревоЗначенийРезультатовЭДО.Колонки.Добавить("Представление",                       Новый ОписаниеТипов("Строка"));
	ДеревоЗначенийРезультатовЭДО.Колонки.Добавить("НеСоответствуетОтбору",               Новый ОписаниеТипов("Булево"));
	ДеревоЗначенийРезультатовЭДО.Колонки.Добавить("НеСоответствуетОтборуНоменклатура",   Новый ОписаниеТипов("Булево"));
	ДеревоЗначенийРезультатовЭДО.Колонки.Добавить("КоличествоПодчиненныхНеЧислилось",    Новый ОписаниеТипов("Число"));
	ДеревоЗначенийРезультатовЭДО.Колонки.Добавить("КоличествоПодчиненныхВНаличии",       Новый ОписаниеТипов("Число"));
	ДеревоЗначенийРезультатовЭДО.Колонки.Добавить("КоличествоПодчиненныхОтсутствует",    Новый ОписаниеТипов("Число"));
	ДеревоЗначенийРезультатовЭДО.Колонки.Добавить("НедопустимыйКодМаркировки",           Новый ОписаниеТипов("Булево"));
	
	ДеревоЗначенийРезультатовЭДО.Колонки.Добавить("Номенклатура",                        Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ДеревоЗначенийРезультатовЭДО.Колонки.Добавить("Характеристика",                      Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ДеревоЗначенийРезультатовЭДО.Колонки.Добавить("ИдентификаторСтроки",                 Новый ОписаниеТипов("Строка"));
	
	Возврат ДеревоЗначенийРезультатовЭДО;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеДереваПродукцииЭДО(ТаблицаРасхождений, ДеревоРезультатовЭДО)
	
	ТекНоменклатура = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура");
	ТекХарактеристика = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры");
	
	НоваяГруппировка = Истина;
	ГруппировкаНеСоответствуетОтбору = Истина;
	
	КоличествоВНаличии  = 0;
	КоличествоИзлишек   = 0;
	КоличествоНедостача = 0;
	НоваяСтрокаПродукции = Неопределено;
	Для Каждого СтрокаРасхождений Из ТаблицаРасхождений Цикл
		Если СтрокаРасхождений.Номенклатура <> ТекНоменклатура
			Или СтрокаРасхождений.Характеристика <> ТекХарактеристика Тогда
			ТекНоменклатура = СтрокаРасхождений.Номенклатура;
			ТекХарактеристика = СтрокаРасхождений.Характеристика;
			НоваяГруппировка = Истина;
			Если НоваяСтрокаПродукции <> Неопределено Тогда
				НоваяСтрокаПродукции.КоличествоПодчиненныхВНаличии = КоличествоВНаличии;
				НоваяСтрокаПродукции.КоличествоПодчиненныхОтсутствует = КоличествоНедостача;
				НоваяСтрокаПродукции.КоличествоПодчиненныхНеЧислилось = КоличествоИзлишек;
				НоваяСтрокаПродукции.НеСоответствуетОтбору  = ГруппировкаНеСоответствуетОтбору;
			КонецЕсли;
		КонецЕсли;
		Если НоваяГруппировка Тогда 
			ГруппировкаНеСоответствуетОтбору = Истина;
			
			КоличествоВНаличии  = 0;
			КоличествоИзлишек   = 0;
			КоличествоНедостача = 0;
			
			НоваяСтрокаПродукции = ДеревоРезультатовЭДО.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПродукции,СтрокаРасхождений); 
			НоваяСтрокаПродукции.ИндексКартинкиСтатусПроверки = 5;
			НоваяСтрокаПродукции.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ПустаяСсылка();
			НоваяСтрокаПродукции.Представление = ОбщегоНазначенияИС.ПредставлениеНоменклатуры(
				СтрокаРасхождений.Номенклатура, СтрокаРасхождений.Характеристика);
			
			НоваяГруппировка = Ложь;
		КонецЕсли;
		
		Если СтрокаРасхождений.КоличествоВНаличии + СтрокаРасхождений.КоличествоИзлишек + СтрокаРасхождений.КоличествоНедостача > 0 Тогда
			
			НоваяСтрокаШтрихкод = НоваяСтрокаПродукции.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаШтрихкод,СтрокаРасхождений); 
			Если СтрокаРасхождений.ТипРасхождения = ИнтеграцияИСМП.ТипРасхожденияИСМПИзлишек() Тогда
				ИндексКартинкиЭДО = 4;
				СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась;
				ГруппировкаНеСоответствуетОтбору = Ложь;
				НоваяСтрокаШтрихкод.НеСоответствуетОтбору = Ложь;
			ИначеЕсли СтрокаРасхождений.ТипРасхождения = ИнтеграцияИСМП.ТипРасхожденияИСМПНедостача()
				Или СтрокаРасхождений.ТипРасхождения = ИнтеграцияИСМП.ТипРасхожденияИСМПБрак() Тогда
				ИндексКартинкиЭДО = 1;
				СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.Отсутствует;
				ГруппировкаНеСоответствуетОтбору = Ложь;
				НоваяСтрокаШтрихкод.НеСоответствуетОтбору = Ложь;
				Если СтрокаРасхождений.ТипРасхождения = ИнтеграцияИСМП.ТипРасхожденияИСМПБрак() Тогда
					НоваяСтрокаШтрихкод.НедопустимыйКодМаркировки = Истина;
				КонецЕсли;
			Иначе
				СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии;
				ИндексКартинкиЭДО = 0;
				НоваяСтрокаШтрихкод.НеСоответствуетОтбору = Истина;
			КонецЕсли;
			
			Если СтрокаРасхождений.ТипРасхождения = ИнтеграцияИСМП.ТипРасхожденияИСМПНедостача()
				Или СтрокаРасхождений.ТипРасхождения = ИнтеграцияИСМП.ТипРасхожденияИСМПБрак() Тогда
				КоличествоНедостача = КоличествоНедостача + СтрокаРасхождений.КоличествоНедостача;
				НоваяСтрокаШтрихкод.КоличествоПодчиненныхОтсутствует = СтрокаРасхождений.КоличествоНедостача;
			Иначе
				КоличествоВНаличии = КоличествоВНаличии + СтрокаРасхождений.КоличествоВНаличии;
				НоваяСтрокаШтрихкод.КоличествоПодчиненныхВНаличии = СтрокаРасхождений.КоличествоВНаличии;
				
				КоличествоИзлишек = КоличествоИзлишек + СтрокаРасхождений.КоличествоИзлишек; 
				НоваяСтрокаШтрихкод.КоличествоПодчиненныхНеЧислилось = СтрокаРасхождений.КоличествоИзлишек;
			КонецЕсли;
			
			НоваяСтрокаШтрихкод.ИндексКартинкиСтатусПроверки = ИндексКартинкиЭДО;
			НоваяСтрокаШтрихкод.Представление = СокрЛП(СтрокаРасхождений.ЗначениеШтрихкода);
			НоваяСтрокаШтрихкод.СтатусПроверки = СтатусПроверки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НоваяСтрокаПродукции <> Неопределено Тогда
		НоваяСтрокаПродукции.КоличествоПодчиненныхВНаличии    = КоличествоВНаличии;
		НоваяСтрокаПродукции.КоличествоПодчиненныхОтсутствует = КоличествоНедостача;
		НоваяСтрокаПродукции.КоличествоПодчиненныхНеЧислилось = КоличествоИзлишек;
		НоваяСтрокаПродукции.НеСоответствуетОтбору            = ГруппировкаНеСоответствуетОтбору;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДополнитьСоответствиеШтрихкодовСтрокДереваДляКоллекции(КоллекцияСтрок, СоответствиеШтрихкодовСтрокДерева)
	
	Для Каждого СтрокаДерева Из КоллекцияСтрок Цикл
		
		Если СтрокаДерева.ТипУпаковки <> ТипУпаковкиПотребительскиеУпаковкиБезУпаковки() Тогда
			Если СтрокаДерева.НеСоответствуетОтборуВсе Тогда
				СоответствиеШтрихкодовСтрокДерева.Вставить(СтрокаДерева.Штрихкод + "ЭДО", СтрокаДерева.ПолучитьИдентификатор());
			Иначе
				СоответствиеШтрихкодовСтрокДерева.Вставить(СтрокаДерева.Штрихкод, СтрокаДерева.ПолучитьИдентификатор());
			КонецЕсли;
		КонецЕсли;
			
		ДополнитьСоответствиеШтрихкодовСтрокДереваДляКоллекции(СтрокаДерева.ПолучитьЭлементы(), СоответствиеШтрихкодовСтрокДерева);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеДокумента()
	
	ИнициализироватьПараметрыСканирования();
	
	ДлительнаяОперация = НачатьЗагрузкуДанныхДокумента(ПараметрыСканирования);
	
	Если ДлительнаяОперация <> Неопределено Тогда
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗагрузкаДанныхДокументаЗавершение", ЭтотОбъект);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Получение структуры упаковок'");
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
		
	Иначе
		
		ДетализацияСтруктурыХранения = СохраненнаяДетализацияСтруктурыХранения(ДоступноСогласованиеРасхождений);
		Если Не ЗначениеЗаполнено(ДетализацияСтруктурыХранения) Тогда
			ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.Полная");
		КонецЕсли;
		
		Если ДетализацияСтруктурыХранения <> ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки") Тогда
			ДобавленнаяСтрокаПотребительскиеУпаковкиБезУпаковки();
		КонецЕсли;
		
		Если ДетализацияСтруктурыХранения <> ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки")
			И ДетализацияСтруктурыХранения <> ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковкиСПотребительскими") Тогда
			ДобавленнаяСтрокаГрупповыеУпаковкиБезКоробки();
		КонецЕсли;
		
		Результат = Новый Структура();
		Результат.Вставить("Статус",          "Выполнено");
		Результат.Вставить("АдресРезультата", "");
		
		ЗагрузкаДанныхДокументаЗавершение(Результат, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НачатьЗагрузкуДанныхДокумента(ПараметрыСканирования)
	
	ТаблицаМаркируемойПродукции = СверкаКодовМаркировкиИСМП.ТаблицаМаркируемойПродукцииДокумента(ПроверяемыйДокумент);
	
	Если ТаблицаМаркируемойПродукции.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаМаркируемойПродукции.Индексы.Добавить("ВидПродукции");
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ПроверяемыйДокумент",              ПроверяемыйДокумент);
	ПараметрыПроцедуры.Вставить("НачальныйСтатусПроверки",          НачальныйСтатусПроверки);
	ПараметрыПроцедуры.Вставить("ДетализацияСтруктурыХранения",     ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.Полная"));
	ПараметрыПроцедуры.Вставить("ДоступноСогласованиеРасхождений",  ДоступноСогласованиеРасхождений);
	ПараметрыПроцедуры.Вставить("ПараметрыСканирования",            ПараметрыСканирования);
	ПараметрыПроцедуры.Вставить("ПроверкаЭлектронногоДокумента",    ПроверкаЭлектронногоДокумента);
	ПараметрыПроцедуры.Вставить("ПараметрыПроверкиКодовМаркировки", ПараметрыСверкиКодовМаркировки);
	ПараметрыПроцедуры.Вставить("ТаблицаМаркируемойПродукции",      ТаблицаМаркируемойПродукции);
	ПараметрыПроцедуры.Вставить("СверкаПоДаннымКорректировки",      СверкаПоДаннымКорректировки);
	
	ПараметрыПроцедуры.Вставить("ВозможностьЗагрузкиДанныхБезПодключенияИСМП",
		ПараметрыСверкиКодовМаркировки.ВозможностьЗагрузкиДанныхБезПодключенияИСМП);
	
	Если НеобходимоОбращениеКСервисуИСМП(ПараметрыСканирования) Тогда
		ПараметрыПроцедуры.Вставить("ДанныеКлючаСессииИСМП", ПараметрыСеанса.ДанныеКлючаСессииИСМП);
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ЭтотОбъект.УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Фоновое заполнение данных сверки кодов маркировки'");
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	ИнтеграцияИСПереопределяемый.НастроитьДлительнуюОперацию(ПараметрыПроцедуры, ПараметрыВыполнения);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.РезультатыСверкиКодовМаркировкиТОРГ2.ЗагрузитьДанныеДокументаДлительнаяОперация",
		ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ЗагрузкаДанныхДокументаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда  // отменено пользователем
		
		ЗакрытьФорму();
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ЗакрытьФорму", ЭтотОбъект), Результат.КраткоеПредставлениеОшибки);
		
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		
		РезультатЗагрузкиДанных = ЗагрузкаДанныхДокументаЗавершениеНаСервере(Результат.АдресРезультата);
		
		Если РезультатЗагрузкиДанных.Действие = "ЗапроситьПодключениеИСМП" Тогда
			
			ПараметрыСверкиКодовМаркировки.ВозможностьЗагрузкиДанныхБезПодключенияИСМП = Ложь;
			ТребуетсяОбновлениеКлючаСессии = Истина;
			ЗапроситьКлючСессииНачало(); 
			
		Иначе
			
			СоответствиеШтрихкодовСтрокДерева = СоответствиеШтрихкодовСтрокДерева(АдресСоответствиеШтрихкодыИдентификаторыСтрок);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗагрузкаДанныхДокументаЗавершениеНаСервере(АдресДанныхДокумента)
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("Действие", "НеТребуется");
	
	Если ЭтоАдресВременногоХранилища(АдресДанныхДокумента) Тогда
		ДанныеДокумента = ПолучитьИзВременногоХранилища(АдресДанныхДокумента);
	Иначе
		ДанныеДокумента = Новый Структура();
	КонецЕсли;
	
	Если ТипЗнч(ДанныеДокумента) = Тип("Структура") Тогда
		
		ДанныеДокумента.Свойство("ДополнительноеДействиеЗагрузки", ВозвращаемоеЗначение.Действие);
		
		Если Не ЗначениеЗаполнено(ВозвращаемоеЗначение.Действие) Тогда
			
			ЭтоПродукцияМОТП = ДанныеДокумента.Свойство("ЭтоПродукцияМОТП") И ДанныеДокумента.ЭтоПродукцияМОТП;
			ВывестиДанныеПроверкиИПодбораНаФорму(ДанныеДокумента);
			ВывестиРезультатыПроверкиЭДО();
			РассчитатьИтогиУстановитьВидимость();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаСервере
Процедура РассчитатьИтогиУстановитьВидимость()
	
	ПересчитатьВсеИтогиФормыНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область УстановкаОтбораСкрытьНоменклатуру

&НаКлиентеНаСервереБезКонтекста
Процедура СкрытьСтрокиДереваСОтборомПоНоменклатуре(Форма)
	
	Если Форма.СохраненВыборПоМаркируемойПродукции Тогда
		
		ТекущиеДанные = Форма.Элементы.ДеревоМаркированнойПродукции.ТекущиеДанные;
		СтрокиДерева  = Форма.ДеревоМаркированнойПродукции.ПолучитьЭлементы();
		
		Для Каждого СтрокаДерева Из СтрокиДерева Цикл
			
			СоответствуетОтбору = Ложь;
			СкрытьСОтборомПоНоменклатуреВСтрокеДерева(Форма, СтрокаДерева, Форма.ДанныеВыбораПоМаркируемойПродукции, СоответствуетОтбору);
			
		КонецЦикла;
		
		Если ТекущиеДанные = Неопределено Или ТекущиеДанные.НеСоответствуетОтбору Тогда
			Для Каждого СтрокаДерева Из СтрокиДерева Цикл
				Если Не СтрокаДерева.НеСоответствуетОтборуНоменклатура Тогда
					Форма.Элементы.ДеревоМаркированнойПродукции.ТекущаяСтрока = СтрокаДерева.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СкрытьСОтборомПоНоменклатуреВСтрокеДерева(Форма, СтрокаДерева, ПараметрыОтбора, СоответствуетОтбору)
	
	ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
	
	ТекущаяСтрокаСоответствуетОтбору = Ложь;
	
	Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
		
		СоответствуетОтбору = Ложь;
		
		СкрытьСОтборомПоНоменклатуреВСтрокеДерева(Форма, ПодчиненнаяСтрока, ПараметрыОтбора, СоответствуетОтбору);
		
		Если СоответствуетОтбору Тогда
			ТекущаяСтрокаСоответствуетОтбору = Истина;
		КонецЕсли;
		
	КонецЦикла;

	Если Не ТекущаяСтрокаСоответствуетОтбору Тогда
		
		Если (СтрокаДерева.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская")
			Или СтрокаДерева.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая")
			Или СтрокаДерева.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Набор")
			Или СтрокаДерева.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.ОбъемноСортовойУчет"))
			И СтрокаДерева.Номенклатура = ПараметрыОтбора.Номенклатура 
			И СтрокаДерева.Характеристика = ПараметрыОтбора.Характеристика Тогда
			ТекущаяСтрокаСоответствуетОтбору = Истина;
		Иначе
			ТекущаяСтрокаСоответствуетОтбору = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	СоответствуетОтбору = ТекущаяСтрокаСоответствуетОтбору Или СоответствуетОтбору;
	СтрокаДерева.НеСоответствуетОтборуНоменклатура = Не ТекущаяСтрокаСоответствуетОтбору;
	
КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура ИнициализироватьДанныеВыбораПоМаркируемойПродукции(ДанныеВыбораПоМаркируемойПродукции)
	
	ДанныеВыбораПоМаркируемойПродукции = Новый Структура;
	ДанныеВыбораПоМаркируемойПродукции.Вставить("Номенклатура",   Неопределено);
	ДанныеВыбораПоМаркируемойПродукции.Вставить("Характеристика", Неопределено);
	ДанныеВыбораПоМаркируемойПродукции.Вставить("Представление",  "");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредставлениеФильтраПоМаркируемойПродукции(Элемент)
	
	ОбновитьДанныеВыбораПоМаркируемойПродукции();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеВыбораПоМаркируемойПродукции()
	
	ТекущиеДанные = Элементы.ДеревоМаркированнойПродукции.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) 
		И ЗначениеЗаполнено(ДанныеВыбораПоМаркируемойПродукции.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВыбораПоМаркируемойПродукции.Номенклатура = ТекущиеДанные.Номенклатура;
	ДанныеВыбораПоМаркируемойПродукции.Характеристика = ТекущиеДанные.Характеристика;
	
	СверкаКодовМаркировкиИСМПКлиентСервер.ОтобразитьФильтрПоМаркируемойПродукции(ЭтотОбъект, ДанныеВыбораПоМаркируемойПродукции);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТекущуюСтрокуДереваПоОтборам(Форма)
	
	ТекущиеДанные = Форма.Элементы.ДеревоМаркированнойПродукции.ТекущиеДанные;
	СтрокиДерева  = Форма.ДеревоМаркированнойПродукции.ПолучитьЭлементы();
	
	Если ОтображатьРезультатыФизПроверки = "Все" Тогда
		КолонкаОтбора = "НеСоответствуетОтборуВсе";
		КолонкаОтбораДополнительная = КолонкаОтбора;
	ИначеЕсли ОтображатьРезультатыФизПроверки = "ФактическиеРасхождения" Тогда
		КолонкаОтбора = "НеСоответствуетОтбору";
		КолонкаОтбораДополнительная = "НеСоответствуетОтборуВсе";
	ИначеЕсли ОтображатьРезультатыФизПроверки = "ЭДОРасхождения" Тогда
		КолонкаОтбора = "НеСоответствуетОтборуЭДО";
		КолонкаОтбораДополнительная = КолонкаОтбора;
	КонецЕсли;
	Если ТекущиеДанные = Неопределено
		 Или ТекущиеДанные[КолонкаОтбора]
		 Или ТекущиеДанные[КолонкаОтбораДополнительная] Тогда
		Для Каждого СтрокаДерева Из СтрокиДерева Цикл
			Если Не СтрокаДерева[КолонкаОтбора] Тогда
				Форма.Элементы.ДеревоМаркированнойПродукции.ТекущаяСтрока = СтрокаДерева.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#Область ПересчетИтогов

&НаСервере
Процедура ПересчитатьВсеИтогиФормыНаСервере()
	
	ПересчитатьВсеИтогиФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьВсеИтогиФормы(Форма)
	
	СверкаКодовМаркировкиИСМПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковок(Форма.ДеревоМаркированнойПродукции, Форма.ОтображатьРезультатыФизПроверки, Форма.ЭтоПродукцияМОТП);
	
	ШтрихкодированиеИСКлиентСервер.ОтобразитьСохраненныйВыборПоМаркируемойПродукции(Форма);
	
	Если Не Форма.СохраненВыборПоМаркируемойПродукции Тогда
		ИнициализироватьДанныеВыбораПоМаркируемойПродукции(Форма.ДанныеВыбораПоМаркируемойПродукции);
		СверкаКодовМаркировкиИСМПКлиентСервер.ОтобразитьФильтрПоМаркируемойПродукции(Форма, Форма.ДанныеВыбораПоМаркируемойПродукции);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Функция ИнициализироватьПараметрыСканирования(НачальнаяИнициализация = Ложь)
	
	Если ПараметрыСканирования = Неопределено Или НачальнаяИнициализация Тогда
		ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования(
			ВладелецФормы, Неопределено);
	КонецЕсли;
	
	ПараметрыСканирования.СоздаватьШтрихкодУпаковки                          = Ложь;
	ПараметрыСканирования.КэшМаркируемойПродукции                            = Неопределено;
	ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции                 = ДанныеВыбораПоМаркируемойПродукции;
	ПараметрыСканирования.ИспользуютсяДанныеВыбораПоМаркируемойПродукции     = Истина;
	ПараметрыСканирования.ПроверятьДублиКодовМаркировки                      = Истина;
	ПараметрыСканирования.ВозможнаЗагрузкаТСД                                = Ложь;
	ПараметрыСканирования.ИспользуетсяСоответствиеШтрихкодовСтрокДерева      = Истина;
	ПараметрыСканирования.ДоступнаПечатьЭтикеток                             = Ложь;
	ПараметрыСканирования.КонтрольУникальностиКодовМаркировки                = Ложь;
	ПараметрыСканирования.КонтрольПустыхУпаковок                             = Ложь;
	ПараметрыСканирования.СсылкаНаОбъект                                     = ПроверяемыйДокумент;
	ПараметрыСканирования.РазрешенаОбработкаНеНайденныхЛогистическихУпаковок = Истина;
	ПараметрыСканирования.ОтборПоВидуПродукции = Ложь;
	
	ПараметрыСканирования.КонтролироватьРасхождениеСоставаУпаковокМеждуИБиИСМП = Ложь;
	ПараметрыСканирования.Владелец                                             = Неопределено;
	
	Если ПараметрыСверкиКодовМаркировки.ВозможностьЗагрузкиДанныхБезПодключенияИСМП = Истина Тогда
		ОбщегоНазначенияИСМПКлиентСервер.УстановитьПараметрСканированияЗапрашиватьДанныеСервисаИСМП(ПараметрыСканирования, Ложь);
		ОбщегоНазначенияИСМПКлиентСервер.УстановитьПараметрСканированияЗапрашиватьДанныеНеизвестныхУпаковокИСМП(ПараметрыСканирования, Ложь);
	Иначе
		ОбщегоНазначенияИСМПКлиентСервер.УстановитьПараметрСканированияЗапрашиватьДанныеСервисаИСМП(ПараметрыСканирования, Истина);
		ОбщегоНазначенияИСМПКлиентСервер.УстановитьПараметрСканированияЗапрашиватьДанныеНеизвестныхУпаковокИСМП(ПараметрыСканирования, Истина);
	КонецЕсли;
	
	Если ПараметрыСверкиКодовМаркировки.ОтсутствуетПодключениеИСМП Тогда
		
		ПараметрыСканирования.КонтролироватьРасхождениеСоставаУпаковокМеждуИБиИСМП = Ложь;
		
		ОбщегоНазначенияИСМПКлиентСервер.УстановитьПараметрСканированияЗапрашиватьДанныеНеизвестныхУпаковокИСМП(ПараметрыСканирования, Ложь);
		ОбщегоНазначенияИСМПКлиентСервер.УстановитьПараметрСканированияЗапрашиватьДанныеСервисаИСМП(ПараметрыСканирования, Ложь);
		
		ПараметрыСканирования.КонтролироватьСтандартнуюВложенность        = Ложь;
		ПараметрыСканирования.КонтролироватьСтатусыКодовМаркировкиИСМП    = Ложь;
		ПараметрыСканирования.КонтролироватьВладельцевКодовМаркировкиИСМП = Ложь;
		
	КонецЕсли;
	
	Возврат ПараметрыСканирования;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НайтиПоИдентификатору(ДанныеФормыДерево, Идентификатор)
	
	// Сейчас есть проблема в веб-клиенте: метод НайтиПоИдентификатору, может вернуть ДанныеФормыДерево
	
	Если Идентификатор = -1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеФормыЭлементДерева = ДанныеФормыДерево.НайтиПоИдентификатору(Идентификатор);
	
	Если ТипЗнч(ДанныеФормыЭлементДерева) = Тип("ДанныеФормыЭлементДерева") Тогда
		Возврат ДанныеФормыЭлементДерева;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ЗакрытьФорму(ДополнительныеПараметры = Неопределено) Экспорт
	
	Закрыть();
	
КонецПроцедуры

#Область РезультатыПроверки

&НаКлиенте
Процедура ЗавершениеПроверкиОкончание(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда  // отменено пользователем
		
		Возврат;
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		
		ПоказатьПредупреждение(, Результат.КраткоеПредставлениеОшибки);
		
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		
		ЗакрытьФорму();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НачатьЗавершениеПроверки(ПараметрыОкончанияПроверки, ПараметрыСканирования)
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ПроверяемыйДокумент",          ПроверяемыйДокумент);
	ПараметрыПроцедуры.Вставить("ДеревоМаркированнойПродукции", РеквизитФормыВЗначение("ДеревоМаркированнойПродукции"));
	ПараметрыПроцедуры.Вставить("ЭтоПродукцияМОТП",             ЭтоПродукцияМОТП);
	ПараметрыПроцедуры.Вставить("ПараметрыСканирования",        ПараметрыСканирования);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ЭтотОбъект.УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Перенос результатов сверки кодов маркировки в документ'");
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	ИнтеграцияИСПереопределяемый.НастроитьДлительнуюОперацию(ПараметрыПроцедуры, ПараметрыВыполнения);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.РезультатыСверкиКодовМаркировкиТОРГ2.ЗафиксироватьРезультатПроверкиИПодбора",
		ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

#КонецОбласти

#Область ДействиеПриРасхождениях

&НаКлиенте
Процедура УстановитьДействиеДляВыделенныхСтрок(ВыделенныеСтроки, НовоеДействие)
	
	КоличествоКОбработке = ВыделенныеСтроки.Количество();
	КоличествоОбработанныхСтрок = 0;
	
	Для Каждого ИдентификаторВыделеннойСтроки Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторВыделеннойСтроки);
		
		Если ДанныеСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
				
		Если ДанныеСтроки.ДействиеПоРасхождениям = НовоеДействие Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеСтроки.ТипУпаковки = ТипУпаковкиПотребительскиеУпаковкиБезУпаковки()
			Или ДанныеСтроки.ТипУпаковки = ТипУпаковкиГрупповыеУпаковкиБезКоробки() Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеСтроки.СтатусПроверки <> ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась") 
			И ДанныеСтроки.СтатусПроверки <> ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует") Тогда 
			Продолжить;
		КонецЕсли;
		
		УстановитьДействиеДляПодчиненных(ЭтотОбъект, ДанныеСтроки, НовоеДействие);
		
		ДанныеСтроки.ДействиеПоРасхождениям = НовоеДействие;
		
		КоличествоОбработанныхСтрок = КоличествоОбработанныхСтрок + 1;
		
	КонецЦикла;
	
	ОповеститьПользователяОИзмененииДействияПоРасхождениям(НовоеДействие, КоличествоОбработанныхСтрок, КоличествоКОбработке);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДействиеДляПодчиненных(Форма, СтрокаДерева, НовоеДействие)
	 
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		Если ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась") 
			Или ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует") Тогда 
			ПодчиненнаяСтрока.ДействиеПоРасхождениям = НовоеДействие;
		КонецЕсли;
		
		Если ПодчиненнаяСтрока.ТипУпаковки <> ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
			УстановитьДействиеДляПодчиненных(Форма, ПодчиненнаяСтрока, НовоеДействие);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьПользователяОИзмененииДействияПоРасхождениям(НовоеДействие, КоличествоОбработанных, КоличествоВсего)
	
	ШаблонЗаголовкаОбработано   = НСтр("ru = 'Действие по расхождениям ""%1"" установлено'");
	ШаблонСообщенияОбработано   = НСтр("ru = 'Для %1 из %2 выделенных в списке строк установлено действие по расхождениям ""%3""'");
	ШаблонЗаголовкаНеОбработано = НСтр("ru = 'Действие по расхождениям ""%1"" не установлено'");
	ШаблонСообщенияНеОбработано = НСтр("ru = 'Действие по расхождениям ""%1"" не установлено ни для одной строки'");
	
	Если КоличествоОбработанных > 0 Тогда
		
		ТекстЗаголовка = СтрШаблон(ШаблонЗаголовкаОбработано, НовоеДействие);
		ТекстСообщения = СтрШаблон(
			ШаблонСообщенияОбработано,
			КоличествоОбработанных,
			КоличествоВсего,
			НовоеДействие);
		
	Иначе
		
		ТекстЗаголовка = СтрШаблон(ШаблонЗаголовкаНеОбработано, НовоеДействие);
		ТекстСообщения = СтрШаблон(ШаблонСообщенияНеОбработано, НовоеДействие);
		
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32ГосИС);
	
КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Функция ТипУпаковкиПотребительскиеУпаковкиБезУпаковки()
	Возврат ПроверкаИПодборПродукцииИСМПКлиентСервер.ТипУпаковкиПотребительскиеУпаковкиБезУпаковки();
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипУпаковкиГрупповыеУпаковкиБезКоробки()
	Возврат ПроверкаИПодборПродукцииИСМПКлиентСервер.ТипУпаковкиГрупповыеУпаковкиБезКоробки();
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипУпаковкиГруппировкаОбъемноСортовогоУчетаПоGTIN()
	Возврат ПроверкаИПодборПродукцииИСМПКлиентСервер.ТипУпаковкиГруппировкаОбъемноСортовогоУчетаПоGTIN();
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипУпаковкиОбъемноСортовойУчет()
	Возврат ПроверкаИПодборПродукцииИСМПКлиентСервер.ТипУпаковкиОбъемноСортовойУчет();
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НеобходимоОбращениеКСервисуИСМП(ПараметрыСканирования)
	
	Если ОбщегоНазначенияИСМПКлиентСервер.ЗначениеПараметраСканированияЗапрашиватьДанныеСервисаИСМП(ПараметрыСканирования)
		Или ОбщегоНазначенияИСМПКлиентСервер.ЗначениеПараметраСканированияЗапрашиватьДанныеНеизвестныхУпаковокИСМП(ПараметрыСканирования) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти
