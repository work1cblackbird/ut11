
#Область ОписаниеПеременных

&НаКлиенте
Перем ЗакрытьФорму;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Параметры.Идентификатор) Тогда
		ИдентификаторЗаписи = Параметры.Идентификатор;
	Иначе
		ИдентификаторЗаписи = СокрЛП(Новый УникальныйИдентификатор());
	КонецЕсли;
	ЗаполнитьДанныеФормыПоИдентификатору(ИдентификаторЗаписи);	
	
	УстройствоРегистрировалось = Состояние <> ПредопределенноеЗначение("Перечисление.СостояниеМПЭПД.Черновик")
		И Состояние <> ПредопределенноеЗначение("Перечисление.СостояниеМПЭПД.ПустаяСсылка");
		
	Если Параметры.Свойство("ДанныеВодителя")
		И Не УстройствоРегистрировалось Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры.ДанныеВодителя);	
		ПолноеИмя = Фамилия + " " + Имя + " " + Отчество;
		ИмяУстройства = ПолноеИмя;
		Если Параметры.ДанныеВодителя.Свойство("ФЛ_ИНН") Тогда
			ИНН = Параметры.ДанныеВодителя.ФЛ_ИНН;
		КонецЕсли;
	КонецЕсли;
	
	ИспользуетсяНесколькоОрганизаций = ОбщегоНазначенияБЭД.ИспользуетсяНесколькоОрганизаций();
	
	Если ЗначениеЗаполнено(Параметры.Организация) Тогда
		Организация = Параметры.Организация;
	Иначе
		Если ИспользуетсяНесколькоОрганизаций Тогда
			Организация = Параметры.Организация;
		Иначе
			Организация = СервисВзаимодействияМПЭПД.ОрганизацияПоУмолчанию();
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ГруппаОрганизация.Видимость = ИспользуетсяНесколькоОрганизаций Или Не ЗначениеЗаполнено(Организация);
	
	ПредставленияРолейМП = СервисВзаимодействияМПЭПДКлиентСервер.ПредставленияРолейМП();
	Для Каждого КиЗ Из ПредставленияРолейМП Цикл
		Элементы.Роль.СписокВыбора.Добавить(КиЗ.Ключ, КиЗ.Значение);
	КонецЦикла;
	Если Элементы.Роль.СписокВыбора.Количество() = 1 Тогда
		Роль = Элементы.Роль.СписокВыбора.Получить(0).Значение;	
		Элементы.ГруппаРоль.Видимость = Ложь;
	КонецЕсли;
	
	АтомарныеРолиМП = СервисВзаимодействияМПЭПДКлиентСервер.АтомарныеРолиМП();
	ОбязательныеРолиМП = СервисВзаимодействияМПЭПДКлиентСервер.ОбязательныеРолиМП();
	Для Каждого ОбязательнаяРоль Из ОбязательныеРолиМП Цикл
		Если ОбменСГИСЭПДКлиентСервер.ВхождениеРоли(Роль, ОбязательнаяРоль, АтомарныеРолиМП.Количество()) = Ложь Тогда
			Роль = Роль + ОбязательнаяРоль;
		КонецЕсли;	
	КонецЦикла;
	
	ПредставленияВидовДокументовМП = СервисВзаимодействияМПЭПДКлиентСервер.ПредставленияВидовДокументовМП();
	Для Каждого КиЗ Из ПредставленияВидовДокументовМП Цикл
		Элементы.ВидыДокументов.СписокВыбора.Добавить(КиЗ.Ключ, КиЗ.Значение);
	КонецЦикла;
	Если Элементы.ВидыДокументов.СписокВыбора.Количество() = 1 Тогда
		ВидыДокументов = Элементы.ВидыДокументов.СписокВыбора.Получить(0).Значение;	
		Элементы.ГруппаВидыДокументов.Видимость = Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Параметры.УчетнаяЗаписьЭДО) = Тип("Массив") Тогда
		Если Не ЗначениеЗаполнено(УчетнаяЗаписьЭДО) Тогда
			УчетнаяЗаписьЭДО = Параметры.УчетнаяЗаписьЭДО[0];
		КонецЕсли;
		//@skip-check expression-not-collection
		Для Каждого ТекущаяУчетнаяЗаписьЭДО Из Параметры.УчетнаяЗаписьЭДО Цикл
			Представление = СервисВзаимодействияМПЭПД.ПредставлениеУчетнойЗаписиЭДО(ТекущаяУчетнаяЗаписьЭДО);
			Элементы.ПредставлениеУчетнойЗаписиЭДО.СписокВыбора.Добавить(ТекущаяУчетнаяЗаписьЭДО, Представление);
		КонецЦикла;
	Иначе
		МассивУчетныхЗаписейЭДО = СервисВзаимодействияМПЭПД.УчетныеЗаписиОрганизации(Параметры.Организация);
		Для Каждого ТекущаяУчетнаяЗаписьЭДО Из МассивУчетныхЗаписейЭДО Цикл
			Представление = СервисВзаимодействияМПЭПД.ПредставлениеУчетнойЗаписиЭДО(ТекущаяУчетнаяЗаписьЭДО);
			Элементы.ПредставлениеУчетнойЗаписиЭДО.СписокВыбора.Добавить(ТекущаяУчетнаяЗаписьЭДО, Представление);
			Если Не ЗначениеЗаполнено(УчетнаяЗаписьЭДО)
				И Параметры.УчетнаяЗаписьЭДО = ТекущаяУчетнаяЗаписьЭДО Тогда
				УчетнаяЗаписьЭДО = Параметры.УчетнаяЗаписьЭДО;	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УчетнаяЗаписьЭДО) Тогда
		ПредставлениеУчетнойЗаписиЭДО = СервисВзаимодействияМПЭПД.ПредставлениеУчетнойЗаписиЭДО(УчетнаяЗаписьЭДО);
	КонецЕсли;
	УчетнаяЗаписьЭДОПодключена = УчетнаяЗаписьПодключена(УчетнаяЗаписьЭДО);
	
	СсылкаНаИнструкцию = СервисВзаимодействияМПЭПД.СсылкаНаИнструкцию();
	
	Элементы.ДекорацияТекстСчетчика.Заголовок = "Сгенерируйте код";
	
	Элементы.ГруппаИнструкция.Видимость = Не УстройствоРегистрировалось;
	ОтражатьКодРегистрации = Не УстройствоРегистрировалось;
	Элементы.ФормаСформироватьУведомление.Видимость = УстройствоРегистрировалось;
	
	Элементы.ПодписьГосключ.Видимость = ВидЭП = ПредопределенноеЗначение("Перечисление.ВидПодписиМПЭПД.ГосключНЭП");
	Элементы.ГруппаОписание3.Видимость = ВидЭП = ПредопределенноеЗначение("Перечисление.ВидПодписиМПЭПД.ГосключНЭП")
											Или ВидЭП = ПредопределенноеЗначение("Перечисление.ВидПодписиМПЭПД.ПростаяПодпись");
	
	Если УстройствоРегистрировалось Тогда
		ТекущийЭлемент = Элементы.ФормаЗаписать;
	Иначе
		ТекущийЭлемент = Элементы.ФормаЗаписатьИЗакрыть;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если ВебКлиент Тогда
		Элементы.СкопироватьКодРегистрации.Видимость = Ложь;
		Элементы.СкопироватьСсылкуНаИнструкцию.Видимость = Ложь;
		Элементы.ПолучитьКод.Ширина = 20;
	#КонецЕсли
	
	ОтразитьПриНеобходимостиКодРегистрации();
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)

	УбратьРеквизиты = Новый Массив;
	ПроверяемыеРеквизиты.Очистить();
	
	ВсеРеквизиты = ПолучитьРеквизиты();
	Для Каждого СтрокаМассива Из ВсеРеквизиты Цикл
		Если СтрокаМассива.СохраняемыеДанные Тогда
			ПроверяемыеРеквизиты.Добавить(СтрокаМассива.Имя);
		КонецЕсли;
	КонецЦикла;
	
	ФорматированныйТелефон = ЗначениеТелефона(НомерТелефона);
	Если СтрДлина(ФорматированныйТелефон) <> 12 Тогда
		ТекстСообщения = НСтр("ru='Телефон должен быть введен полностью и содержать 11 цифр.'");
		Поле = "НомерТелефона";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , Поле, , Отказ);
	КонецЕсли;
	
	ПроверяемыеРеквизиты.Добавить("ПредставлениеУчетнойЗаписиЭДО");
	
	УбратьРеквизиты.Добавить("ИНН");
		
	Если ВидЭП = Перечисления.ВидПодписиМПЭПД.НеИспользуется
		Или ВидЭП = Перечисления.ВидПодписиМПЭПД.ПростаяПодпись
		Или ПрямойОбмен = Ложь Тогда
		УбратьРеквизиты.Добавить("Доверенность");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, УбратьРеквизиты);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = СервисВзаимодействияМПЭПДКлиент.ИмяОповещенияОЗавершенииРегистрации() Тогда
		
		Если Параметр.Идентификатор = Идентификатор Тогда
			ИзменитьСостояниеЗаписиОбУстройстве(Параметр.НовоеСостояние, Параметр.ИдентификаторМП);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = СервисВзаимодействияМПЭПДКлиент.ИмяОповещенияОбИзмененииПрофиляПользователяМП() Тогда
		
		Если Параметр.УникальныйИдентификатор = УникальныйИдентификатор Тогда 
			ИзменитьЗначенияПолейФормы(Параметр);
			ЗаписатьДанныеПользователя();
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Не Модифицированность
		Или ЗакрытьФорму <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	Если ЗавершениеРаботы Тогда
		ТекстПредупреждения = НСтр("ru ='Данные мобильного устройства были изменены, закрытие приведет к потере всех не сохраненных данных.'");
	Иначе
		СообщениеПользователю = НСтр("ru ='Данные мобильного устройства были изменены, сохранить изменения?'");
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗакрытиемЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, СообщениеПользователю, РежимДиалогаВопрос.ОКОтмена);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПредставлениеУчетнойЗаписиЭДОНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СервисВзаимодействияМПЭПДКлиент.ОткрытьФормуПодборУчетныхЗаписейЭДО(ЭтотОбъект,
				Новый ОписаниеОповещения("ОкончаниеПодбораУчетнойЗаписи", ЭтотОбъект), Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ФамилияПриИзменении(Элемент)
	
	ИзменениеФИО();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяПриИзменении(Элемент)
	
	ИзменениеФИО();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчествоПриИзменении(Элемент)
	
	ИзменениеФИО();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСостояниеПодключенияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПолучениеКода" Тогда
		ОткрытьФорму("Обработка.ВзаимодействиеМПЭПД.Форма.ИнструкцияДляПодключения", , ЭтотОбъект,
				УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОписаниеЧасть2ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПодсветитьКод" Тогда
		ЗапуститьПодсветкуКодаРегистрации();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СНИЛСПриИзменении(Элемент)
	
	ЗадавалсяВопросОДубляхПользователя = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ИННПриИзменении(Элемент)
	
	ЗадавалсяВопросОДубляхПользователя = Ложь;
	
	ЗаполнитьСписокДоверенностей();
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкаНаИнструкциюНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПерейтиПоНавигационнойСсылке(СсылкаНаИнструкцию);
	
КонецПроцедуры

&НаКлиенте
Процедура ФизическоеЛицоПриИзменении(Элемент)
	
	ОкончаниеПодбораСотрудникаСервер(ФизическоеЛицо);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерТелефонаПриИзменении(Элемент)
	
	НомерТелефонаТолькоЦифрыИПрефикс = ЗначениеТелефона(НомерТелефона);
	Если МожноПолучитьПредставлениеТелефона(НомерТелефонаТолькоЦифрыИПрефикс) Тогда
		НомерТелефона = ОбменСГИСЭПДКлиентСервер.ПолучитьПредставлениеТелефона(НомерТелефонаТолькоЦифрыИПрефикс);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РольНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Роль", Роль);
	ПараметрыФормы.Вставить("ТолькоПросмотр", Элементы.ФормаЗаписать.Видимость = Ложь);
	
	РольОткрытие_Завершение = Новый ОписаниеОповещения("РольОткрытие_Завершение", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.ВзаимодействиеМПЭПД.Форма.ВыборРолей", 
		ПараметрыФормы, 
		ЭтотОбъект, 
		УникальныйИдентификатор, , , 
		РольОткрытие_Завершение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	

КонецПроцедуры

&НаКлиенте
Процедура ВидыДокументовНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидыДокументов", ВидыДокументов);
	ПараметрыФормы.Вставить("ТолькоПросмотр", Элементы.ФормаЗаписать.Видимость = Ложь);
	
	ВидыДокументов_Завершение = Новый ОписаниеОповещения("ВидыДокументов_Завершение", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.ВзаимодействиеМПЭПД.Форма.ВыборВидовДокументов", 
		ПараметрыФормы, 
		ЭтотОбъект, 
		УникальныйИдентификатор, , , 
		ВидыДокументов_Завершение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
		
КонецПроцедуры


&НаКлиенте
Процедура ФотоНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Фильтр = НСтр("ru='Все картинки|*.png;*.jpg;*.jpeg;*.bmp'");
	Диалог.Заголовок = НСтр("ru='Выберите фото'");
	
	ПараметрыЗагрузкиФайла = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
	ПараметрыЗагрузкиФайла.Диалог = Диалог;
	ПараметрыЗагрузкиФайла.ИдентификаторФормы = УникальныйИдентификатор;
	ПараметрыЗагрузкиФайла.Интерактивно = Истина;
	
	ОбработчикЗавершения = Новый ОписаниеОповещения("ФотоНажатие_Завершение", ЭтотОбъект);

	ФайловаяСистемаКлиент.ЗагрузитьФайл(ОбработчикЗавершения, ПараметрыЗагрузкиФайла);

КонецПроцедуры

&НаКлиенте
Процедура ВидЭППриИзменении(Элемент)
	
	Элементы.ПодписьГосключ.Видимость = ВидЭП = ПредопределенноеЗначение("Перечисление.ВидПодписиМПЭПД.ГосключНЭП");
	Элементы.ГруппаОписание3.Видимость = ВидЭП = ПредопределенноеЗначение("Перечисление.ВидПодписиМПЭПД.ГосключНЭП")
											Или ВидЭП = ПредопределенноеЗначение("Перечисление.ВидПодписиМПЭПД.ПростаяПодпись");

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОписаниеЧасть3ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	Если НавигационнаяСсылкаФорматированнойСтроки = "Уведомление" Тогда
		СтандартнаяОбработка = Ложь;
		
		СписокПользователей = Новый Массив;
		Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
			СписокПользователей.Добавить(ФизическоеЛицо);
		КонецЕсли;
		
		НастройкиВнутреннегоЭДОКлиент.ОткрытьФормуФормированияУведомленияОбИспользованииПЭП_УНЭП(Организация,
			СписокПользователей, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПолучитьКод(Команда)
	
	ЗапуститьСценарийПолучениеКодаРегистрации();
	
КонецПроцедуры

&НаКлиенте
Процедура Приостановить(Команда)
	
	ПеревестиНаСостояние = ПредопределенноеЗначение("Перечисление.СостояниеМПЭПД.Приостановлен");
	ИзменитьСостояниеМобильногоУстройства(ПеревестиНаСостояние);
	
КонецПроцедуры

&НаКлиенте
Процедура Возобновить(Команда)
	
	ПеревестиНаСостояние = ПредопределенноеЗначение("Перечисление.СостояниеМПЭПД.Подключен");
	ИзменитьСостояниеМобильногоУстройства(ПеревестиНаСостояние);
	
КонецПроцедуры

&НаКлиенте
Процедура Отключить(Команда)

	ЗапускСценарияОтключенияПользователя();
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСсылкуНаИнструкцию(Команда)
	
	ОбщегоНазначенияБЭДКлиент.СкопироватьВБуферОбмена(СсылкаНаИнструкцию,
		НСтр("ru = 'Ссылка на инструкцию скопирована в буфер обмена'"));
	
КонецПроцедуры
	
&НаКлиенте
Процедура СкопироватьКодРегистрации(Команда)
	
	ОбщегоНазначенияБЭДКлиент.СкопироватьВБуферОбмена(КодРегистрации,
		НСтр("ru = 'Код регистрации скопирован в буфер обмена'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ЗаписатьДанныеПользователя();
	ЗакрытьФорму = Истина;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	
	ЗаписатьДанныеПользователя();
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторитьРегистрацию(Команда)
	
	ЗапуститьСценарийПолучениеКодаРегистрации();
	
КонецПроцедуры

&НаКлиенте
Процедура Изменить(Команда)
	
	ПараметрыЗапуска = Новый Структура;
	ПараметрыЗапуска.Вставить("Организация", Организация);
	ПараметрыЗапуска.Вставить("ФизическоеЛицо", ФизическоеЛицо);
	ПараметрыЗапуска.Вставить("ИдентификаторЭДО", УчетнаяЗаписьЭДО);
	ПараметрыЗапуска.Вставить("Идентификатор", Идентификатор);
	ПараметрыЗапуска.Вставить("ИдентификаторМП", ТекущаяЗаписьМП.ИдентификаторМП);
	ПараметрыЗапуска.Вставить("Фамилия", Фамилия);
	ПараметрыЗапуска.Вставить("Имя", Имя);
	ПараметрыЗапуска.Вставить("Отчество", Отчество);
	ПараметрыЗапуска.Вставить("ИмяУстройства", ИмяУстройства);
	ПараметрыЗапуска.Вставить("СНИЛС", СНИЛС);
	ПараметрыЗапуска.Вставить("ИНН", ИНН);
	ПараметрыЗапуска.Вставить("НомерТелефона", НомерТелефона);
	ПараметрыЗапуска.Вставить("ВидЭП", ВидЭП);
	ПараметрыЗапуска.Вставить("Доверенность", Доверенность);
	ПараметрыЗапуска.Вставить("ЕстьБумажнаяДоверенность", ЕстьБумажнаяДоверенность);
	ПараметрыЗапуска.Вставить("ПрямойОбмен", ПрямойОбмен);
	ПараметрыЗапуска.Вставить("СписокДоверенностей", Элементы.Доверенность.СписокВыбора);
	ПараметрыЗапуска.Вставить("Роль", Роль);
	ПараметрыЗапуска.Вставить("ВидыДокументов", ВидыДокументов);
	
	ОткрытьФорму("Обработка.ВзаимодействиеМПЭПД.Форма.ИзменениеДанныхПрофиля", ПараметрыЗапуска,
			ЭтотОбъект, УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФото(Команда)
	
	АдресФото = "";
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура СформироватьУведомление(Команда)
	
	СписокПользователей = Новый Массив;
	Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		СписокПользователей.Добавить(ФизическоеЛицо);
	КонецЕсли;
	
	НастройкиВнутреннегоЭДОКлиент.ОткрытьФормуФормированияУведомленияОбИспользованииПЭП_УНЭП(Организация,
		СписокПользователей, ЭтотОбъект);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область АсинхронныеСценарии

&НаКлиенте
Функция СценарийИзменениеСостоянияПользователя(ОжиданиеРезультата, ПараметрыЦикла) Экспорт
	
	Результат = Истина;
	ЭтапЦикла = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЦикла, "ЭтапЦикла");
	
	Если ЭтапЦикла = "Начало" Тогда
		БлокироватьРаботуПользователя(Истина);
		ПараметрыЦикла.Вставить("ЭтапЦикла", "Авторизация");

		СписокКоманд = Новый СписокЗначений();
		СписокКоманд.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'ОК'"));
		СписокКоманд.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Отмена'"));
		
		Если ПараметрыЦикла.ПеревестиНаСостояние = ПредопределенноеЗначение("Перечисление.СостояниеМПЭПД.Приостановлен") Тогда
			ТекстВопроса =  НСтр("ru = 'Работа устройства будет приостановлена, документы на него автоматически распределяться не будут.
			|
			|Продолжить?'");
			ЗаголовокВопроса = НСтр("ru = 'Приостановка работы устройства'");
		Иначе
			ТекстВопроса =  НСтр("ru = 'Работа устройства будет возобновлена, документы на него начнут автоматически распределяться.
			|
			|Продолжить?'");
			ЗаголовокВопроса = НСтр("ru = 'Возобновление работы устройства'");
		КонецЕсли;
		
		ПоказатьВопрос(СервисВзаимодействияМПЭПДКлиент.РезультатАссинхронныйСценарий(ПараметрыЦикла),
					ТекстВопроса, СписокКоманд, , , ЗаголовокВопроса);
		Возврат Результат;
	КонецЕсли;
	
	Если ЭтапЦикла = "Авторизация" Тогда
		Если ОжиданиеРезультата = КодВозвратаДиалога.Да Тогда
			ПараметрыЦикла.Вставить("ЭтапЦикла", "ПослеПодключенияОрганизации");
			ПроверитьПодключитьОрганизацию(ПараметрыЦикла);
			Возврат Результат;
		Иначе
			БлокироватьРаботуПользователя(Ложь);
			УстановитьВидимостьДоступность();
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтапЦикла = "ПослеПодключенияОрганизации" Тогда
		Если ОжиданиеРезультата = Ложь Тогда
			Результат = Ложь;
			Возврат Результат;
		Иначе
			ЭтапЦикла = "ИзменитьСостояниеРаботыПользователя";
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтапЦикла = "ИзменитьСостояниеРаботыПользователя" Тогда
		ПараметрыЦикла.Вставить("ЭтапЦикла", "Завершение");
		ПараметрыЗадания = СервисВзаимодействияМПЭПДКлиент.МассивИзЗначений(ПараметрыЦикла.ИдентификаторЭДО, ПараметрыЦикла.ИдентификаторМП);
		
		Если ПараметрыЦикла.ПеревестиНаСостояние = ПредопределенноеЗначение("Перечисление.СостояниеМПЭПД.Приостановлен") Тогда
			СервисВзаимодействияМПЭПДКлиент.НовоеФоновоеЗадание(
				"СервисВзаимодействияМПЭПД.СервисПриостановитьРаботуВодителя", ПараметрыЗадания, ПараметрыЦикла, УникальныйИдентификатор);
		Иначе
			СервисВзаимодействияМПЭПДКлиент.НовоеФоновоеЗадание(
				"СервисВзаимодействияМПЭПД.СервисВозбновитьРаботуПользователя", ПараметрыЗадания, ПараметрыЦикла, УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтапЦикла = "Завершение" Тогда
		Если ОжиданиеРезультата.Статус = "Выполнено" Тогда
			РезультатПроцедуры = ПолучитьИзВременногоХранилища(ОжиданиеРезультата.АдресРезультата);
			Если РезультатПроцедуры <> Истина Тогда
				Если ПараметрыЦикла.ПеревестиНаСостояние = ПредопределенноеЗначение("Перечисление.СостояниеМПЭПД.Приостановлен") Тогда
					ТекстПредупреждения =  НСтр("ru = 'Не удалось приостановить работу устройства на сервере взаимодействия с мобильными устройствами.'")
				Иначе
					ТекстПредупреждения =  НСтр("ru = 'Не удалось возобновить работу устройства на сервере взаимодействия с мобильными устройствами.'")
				КонецЕсли;
				ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
			Иначе
				Состояние = ПараметрыЦикла.ПеревестиНаСостояние;
			КонецЕсли;
		Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю(ОжиданиеРезультата.КраткоеПредставлениеОшибки);
		КонецЕсли;
				
		ОповеститьОбИзмененииУстройства();
		
		БлокироватьРаботуПользователя(Ложь);
		УстановитьВидимостьДоступность();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗапуститьСценарийПолучениеКодаРегистрации()
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ПриСохранении = Ложь;
	СтруктураРезультата = ПроверитьУникальностьДанныхПользователя(ПриСохранении);
	
	Если СтруктураРезультата.Успешность Тогда
		СценарийПолучениеКодаРегистрацииПродолжение();
	Иначе
		ЗадатьВопросОПерезаполненииДанных(СтруктураРезультата);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросОПерезаполненииДанных(СтруктураРезультатаПроверкиУникальности)
	
	ОписаниеОповещенияОтвета = Новый ОписаниеОповещения("ВопросОПерезаполненииДанныхЗавершение", ЭтотОбъект, СтруктураРезультатаПроверкиУникальности);
	Если СтруктураРезультатаПроверкиУникальности.СоответствиеПользователей.Количество() = 1 Тогда
		ВопросПользователю = СтруктураРезультатаПроверкиУникальности.СообщениеПользователю
				+ Символы.ПС + Символы.ПС + "Открыть форму существующего мобильного устройства?";
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить("Да", "Да");
		СписокКнопок.Добавить("Нет", "Нет");
		КнопкаВыбораПоУмолчанию = "Да";
	Иначе
		ВопросПользователю = СтруктураРезультатаПроверкиУникальности.СообщениеПользователю
				+ Символы.ПС + Символы.ПС + "Открыть форму выбора существующего мобильного устройства?";
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить("Да", "Да");
		СписокКнопок.Добавить("Нет", "Нет");
		КнопкаВыбораПоУмолчанию = "Да";
	КонецЕсли;
	
	ПоказатьВопрос(ОписаниеОповещенияОтвета, ВопросПользователю, СписокКнопок, , КнопкаВыбораПоУмолчанию, , );
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОПерезаполненииДанныхЗавершение(Результат, ДополнительныеДанные) Экспорт
	
	Если Результат = "Да" Тогда
		
		СписокИдентификаторов = Новый СписокЗначений;
		СоответствиеПользователей = ДополнительныеДанные.СоответствиеПользователей;
		Для Каждого КлючЗначение Из СоответствиеПользователей Цикл
			ИднетификаторЗаписи = КлючЗначение.Ключ;
			СписокИдентификаторов.Добавить(ИднетификаторЗаписи);
		КонецЦикла;
		
		Если СписокИдентификаторов.Количество() = 1 Тогда
			ИдентификаторВыбраннойЗаписи = СписокИдентификаторов[0].Значение;
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Идентификатор", ИдентификаторВыбраннойЗаписи);
			ПараметрыФормы.Вставить("УчетнаяЗаписьЭДО", УчетнаяЗаписьЭДО);
			ПараметрыФормы.Вставить("Организация", Организация);
			СервисВзаимодействияМПЭПДКлиент.ОткрытьФормуПользователяМобильногоУстройства(ПараметрыФормы, ВладелецФормы);
			ПодключитьОбработчикОжидания("ОбработчикЗакрытияФормы", 0.1, Истина);
			Возврат;
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Идентификатор", СписокИдентификаторов);
		ОповещениеЗавершения = Новый ОписаниеОповещения("ВыборУстройстваДляПерезаполненияЗавершение", ЭтотОбъект);
		
		СервисВзаимодействияМПЭПДКлиент.ОткрытьФормуВыбораМП(ЭтотОбъект, Организация, УчетнаяЗаписьЭДО, СтруктураОтбора, ОповещениеЗавершения);
		
	ИначеЕсли Результат = "Нет" Тогда
		
		ЗадавалсяВопросОДубляхПользователя = Истина;
		СценарийПолучениеКодаРегистрацииПродолжение();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СценарийПолучениеКодаРегистрацииПродолжение()
	
	ПараметрыЦикла = Новый Структура;
	ПараметрыЦикла.Вставить("ЭтапЦикла", "Начало");
	ПараметрыЦикла.Вставить("Маркер", "");
	ПараметрыЦикла.Вставить("Организация", Организация);
	
	СервисВзаимодействияМПЭПДКлиент.НачатьАссинхронныйСценарий(Новый ОписаниеОповещения("СценарийПолучениеКодаРегистрации", ЭтотОбъект, ПараметрыЦикла));
	
КонецПроцедуры

&НаКлиенте
Функция СценарийПолучениеКодаРегистрации(ОжиданиеРезультата, ПараметрыЦикла) Экспорт
	
	Результат = Истина;
	ЭтапЦикла = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЦикла, "ЭтапЦикла");
	
	Если ЭтапЦикла = "Начало" Тогда
		БлокироватьРаботуПользователя(Истина);
		ПараметрыЦикла.Вставить("ЭтапЦикла", "ПослеПодключенияОрганизации");
		ПроверитьПодключитьОрганизацию(ПараметрыЦикла);
		Возврат Результат;
	КонецЕсли;
	
	Если ЭтапЦикла = "ПослеПодключенияОрганизации" Тогда
		Если ОжиданиеРезультата.Успешность = Ложь Тогда
			Результат = Ложь;
			Возврат Результат;
		Иначе
			ЭтапЦикла = "ПроверкаИПолучениеМаркера";
			Если ОжиданиеРезультата.Свойство("Маркер") Тогда
				ПараметрыЦикла.Вставить("Маркер", ОжиданиеРезультата.Маркер);
			Иначе
				ПараметрыЦикла.Вставить("Маркер", ОжиданиеРезультата.ДополнительныеПараметры.Маркер);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтапЦикла = "ПроверкаИПолучениеМаркера" Тогда
		Если ПустаяСтрока(ПараметрыЦикла.Маркер) Тогда
			ПараметрыЦикла.Вставить("ЭтапЦикла", "ПослеПолучениеМаркера");
			УчетныеЗаписи = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(УчетнаяЗаписьЭДО);
			КонтекстДиагностики = ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики();
			СинхронизацияЭДОКлиент.АвторизоватьсяВСервисеЭлектронногоДокументооборота(
				СервисВзаимодействияМПЭПДКлиент.РезультатАссинхронныйСценарий(ПараметрыЦикла),
				КонтекстДиагностики, УчетныеЗаписи);
		Иначе
			ЭтапЦикла = "ДобавитьПользователя";
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтапЦикла = "ПослеПолучениеМаркера" Тогда
		ДанныеМаркера = ОжиданиеРезультата.КлючиСинхронизации[УчетнаяЗаписьЭДО];
		Если ДанныеМаркера = Неопределено Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не удалось авторизоваться на сервере 1С-ЭДО.'"));
			БлокироватьРаботуПользователя(Ложь);
			УстановитьВидимостьДоступность();
		Иначе
			ПараметрыЦикла.Вставить("Маркер", ПолучитьСтрокуИзДвоичныхДанных(ДанныеМаркера.МаркерРасшифрованный));
			ЭтапЦикла = "ДобавитьПользователя";
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтапЦикла = "ДобавитьПользователя" Тогда
		ПараметрыЦикла.Вставить("ЭтапЦикла", "РегистрацияПользователя");
		
		Водитель = Новый Структура;
		Водитель.Вставить("Маркер", ПараметрыЦикла.Маркер);
		Водитель.Вставить("Телефон", ЗначениеТелефона(НомерТелефона));
		Водитель.Вставить("ВидЭП", ВидЭП);
		Водитель.Вставить("ИНН", ИНН);
		Водитель.Вставить("СНИЛС", СНИЛС);
		Водитель.Вставить("Идентификатор", Идентификатор);
		Водитель.Вставить("Наименование", ИмяУстройства);
		Водитель.Вставить("Состояние", Состояние);
		Водитель.Вставить("ИдентификаторМП", ТекущаяЗаписьМП.ИдентификаторМП);
		Водитель.Вставить("ФизическоеЛицо", ФизическоеЛицо);
		Водитель.Вставить("Фамилия", Фамилия);
		Водитель.Вставить("Имя", Имя);
		Водитель.Вставить("Отчество", Отчество);
		
		РольСУчетомДокументов = СервисВзаимодействияМПЭПДКлиентСервер.РольСУчетомВидовДокументов(Роль, ВидыДокументов);
		
		Водитель.Вставить("Роль", РольСУчетомДокументов);
		
		Если ЗначениеЗаполнено(Доверенность) Тогда
			Водитель.Вставить("МЧД", Доверенность);
		КонецЕсли;
		Водитель.Вставить("ЕстьБумажнаяДоверенность", ЕстьБумажнаяДоверенность);
		Водитель.Вставить("ПрямойОбмен", ПрямойОбмен);
		
		ПараметрыФункции = СервисВзаимодействияМПЭПДКлиент.МассивИзЗначений(УчетнаяЗаписьЭДО, Водитель);
		СервисВзаимодействияМПЭПДКлиент.НовоеФоновоеЗадание("СервисВзаимодействияМПЭПД.СервисДобавитьВодителя", ПараметрыФункции, ПараметрыЦикла, УникальныйИдентификатор);
	КонецЕсли;
	
	Если ЭтапЦикла = "РегистрацияПользователя" Тогда
		БлокироватьРаботуПользователя(Ложь);

		Если ОжиданиеРезультата.Статус = "Выполнено" Тогда
			РезультатПроцедуры = ПолучитьИзВременногоХранилища(ОжиданиеРезультата.АдресРезультата);
			Если ПустаяСтрока(РезультатПроцедуры) Тогда
				ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не удалось получить код от сервера взаимодействия с мобильными устройствами.'"));
			Иначе
				КодРегистрации = ФорматКодаРегистрации(РезультатПроцедуры);
				НачалоДействияКода = ОбщегоНазначенияКлиент.ДатаСеанса();
				
				Состояние = ПредопределенноеЗначение("Перечисление.СостояниеМПЭПД.ОжидаетсяПодключение");
				ОтражатьКодРегистрации = Истина;
				
				ПодключитьОбработчикОжидания("СчетчикДействияКода", 1);
				Модифицированность = Ложь;
			КонецЕсли;
		Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю(ОжиданиеРезультата.КраткоеПредставлениеОшибки);
		КонецЕсли;
		
		ИмяОповещения = СервисВзаимодействияМПЭПДКлиент.ИмяОповещенияОбОбновленииСпискаМобильныхУстройств();
		СтруктураОповещениеОбИзмененииСостояния = СтруктураОповещениеОбИзмененииСостояния();
		Оповестить(ИмяОповещения, СтруктураОповещениеОбИзмененииСостояния);
		
		УстановитьВидимостьДоступность();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗапускСценарияОтключенияПользователя()

	Если Состояние = ПредопределенноеЗначение("Перечисление.СостояниеМПЭПД.ОжидаетсяПодключение") Тогда
		ПоказатьПредупреждение(, Нстр("ru='Невозможно удалить устройство ожидающее подключение, дождитесь состояния ""Не подключено""'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыЦикла = Новый Структура;
	ПараметрыЦикла.Вставить("ЭтапЦикла", "Начало");
	ПараметрыЦикла.Вставить("ИдентификаторЭДО", УчетнаяЗаписьЭДО);
	ПараметрыЦикла.Вставить("Идентификатор", Идентификатор);
	ПараметрыЦикла.Вставить("ИдентификаторМП", ТекущаяЗаписьМП.ИдентификаторМП);
	
	СервисВзаимодействияМПЭПДКлиент.НачатьАссинхронныйСценарий(Новый ОписаниеОповещения("СценарийОтключенияПользователя", ЭтотОбъект, ПараметрыЦикла));
	
КонецПроцедуры

&НаКлиенте
Функция СценарийОтключенияПользователя(ОжиданиеРезультата, ПараметрыЦикла) Экспорт
	
	Результат = Истина;
	ЭтапЦикла = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЦикла, "ЭтапЦикла");
	
	Если ЭтапЦикла = "Начало" Тогда
		БлокироватьРаботуПользователя(Истина);
		ПараметрыЦикла.Вставить("ЭтапЦикла", "ПослеВопросаНаОтключение");

		СписокКоманд = Новый СписокЗначений();
		СписокКоманд.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'ОК'"));
		СписокКоманд.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Отмена'"));
		
		ПоказатьВопрос(СервисВзаимодействияМПЭПДКлиент.РезультатАссинхронныйСценарий(ПараметрыЦикла),
					НСтр("ru='Мобильное устройство будет отключено, запись об устройстве будет удалена.
					|
					|Продолжить?'"),
					СписокКоманд, , , НСтр("ru = 'Отключение устройства'"));
		Возврат Результат; 
	КонецЕсли;
	
	Если ЭтапЦикла = "ПослеВопросаНаОтключение" Тогда
		Если ОжиданиеРезультата <> КодВозвратаДиалога.Да Тогда
			Результат = Ложь;
			БлокироватьРаботуПользователя(Ложь);
			Возврат Результат;			
		КонецЕсли;
		
		ЭтапЦикла = "Авторизация";
	КонецЕсли;
	
	Если ЭтапЦикла = "Авторизация" Тогда
		ПараметрыЦикла.Вставить("ЭтапЦикла", "ПослеПодключенияОрганизации");
		ПроверитьПодключитьОрганизацию(ПараметрыЦикла);
		Возврат Результат;
	КонецЕсли;
	
	Если ЭтапЦикла = "ПослеПодключенияОрганизации" Тогда
		Если ОжиданиеРезультата = Ложь Тогда
			Результат = Ложь;
			БлокироватьРаботуПользователя(Ложь);
			Возврат Результат;
		Иначе
			ЭтапЦикла = "УдалитьВодителя";
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтапЦикла = "УдалитьВодителя" Тогда
		ПараметрыЦикла.Вставить("ЭтапЦикла", "ЗакрытьФорму");
		
		ПараметрыЗадания = СервисВзаимодействияМПЭПДКлиент.МассивИзЗначений(ПараметрыЦикла.ИдентификаторЭДО, ПараметрыЦикла.ИдентификаторМП, ПараметрыЦикла.Идентификатор);
		СервисВзаимодействияМПЭПДКлиент.НовоеФоновоеЗадание("СервисВзаимодействияМПЭПД.СервисУдалитьВодителя", ПараметрыЗадания, ПараметрыЦикла, УникальныйИдентификатор);
	КонецЕсли;
	
	Если ЭтапЦикла = "ЗакрытьФорму" Тогда
		БлокироватьРаботуПользователя(Ложь);
		
		Если ОжиданиеРезультата.Статус = "Выполнено" Тогда
			РезультатПроцедуры = ПолучитьИзВременногоХранилища(ОжиданиеРезультата.АдресРезультата);
			Если РезультатПроцедуры <> Истина Тогда
				ПоказатьПредупреждение(, НСтр("ru = 'Не удалось отключить устройство на сервере взаимодействия с мобильными устройствами.'"));
			Иначе
				НоваяЗапись = Ложь;
				Удалить = Истина;
				ОповеститьОбИзмененииУстройства(НоваяЗапись, Удалить);
								
				ПоказатьПредупреждение(, НСтр("ru = 'Мобильное устройство отключено.'"));
				
				МобильноеУстройствоУдалено = Истина;
				Модифицированность = Ложь;
			КонецЕсли;
		Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю(ОжиданиеРезультата.КраткоеПредставлениеОшибки);
		КонецЕсли;
		
		УстановитьВидимостьДоступность();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьПодключитьОрганизацию(ПараметрыЦикла)
	
	Оповещение = СервисВзаимодействияМПЭПДКлиент.РезультатАссинхронныйСценарий(ПараметрыЦикла);
	
	Если УчетнаяЗаписьЭДОПодключена Тогда
		Структура = Новый Структура("Успешность, Маркер", Истина, "");
		ВыполнитьОбработкуОповещения(Оповещение, Структура);
	Иначе
		Структура = СервисВзаимодействияМПЭПДКлиент.НоваяСтруктураПодключенияОрганизации();
		Структура.Организация = Организация;
		Структура.ИдентификаторЭДО = УчетнаяЗаписьЭДО;
		
		СервисВзаимодействияМПЭПДКлиент.ПодключениеОрганизации(Структура, УникальныйИдентификатор, Оповещение);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОформлениеФормы

&НаКлиенте
Процедура УстановитьВидимостьДоступность()
	
	Если ЗначениеЗаполнено(ИмяУстройства) Тогда
		Шаблон = "Мобильное устройство 1С-ЭПД, %1";
		Заголовок = СтрШаблон(Шаблон, ИмяУстройства);
	Иначе
		Заголовок = "Мобильное устройство 1С-ЭПД";
	КонецЕсли;
	
	НовоеМобильноеУстройство = Не ЗначениеЗаполнено(ТекущаяЗаписьМП.ИдентификаторМП);
	
	БлокироватьПоляФормы = Не НовоеМобильноеУстройство Или Не ПустаяСтрока(КодРегистрации);
	УстановитьРежимПросмотраПолейФормы(БлокироватьПоляФормы);
	
	Элементы.ФормаИзменить.Видимость = Не НовоеМобильноеУстройство И Не МобильноеУстройствоУдалено;
	
	// Доверенность
	Если ПрямойОбмен = Истина Тогда
		Элементы.ГруппаДоверенность.Видимость = ЗначениеЗаполнено(ВидЭП) 
				И ВидЭП <> ПредопределенноеЗначение("Перечисление.ВидПодписиМПЭПД.НеИспользуется")
				И ВидЭП <> ПредопределенноеЗначение("Перечисление.ВидПодписиМПЭПД.ПростаяПодпись");
	Иначе
		Элементы.ГруппаДоверенность.Видимость = Ложь;
	КонецЕсли;
			
	// Отражение группы с кодом регистрации
	Если Не МобильноеУстройствоУдалено Тогда
		Элементы.ГруппаКодРегистрации.Видимость = ОтражатьКодРегистрации;
		Элементы.ФормаПовторитьРегистрацию.Видимость = Не ОтражатьКодРегистрации;
	Иначе
		Элементы.ГруппаКодРегистрации.Видимость = Ложь;
		Элементы.ФормаПовторитьРегистрацию.Видимость = Ложь;
	КонецЕсли;
	
	// Отображение элементов управления в зависимости от состояния
	Если МобильноеУстройствоУдалено Тогда 
		
		Элементы.ФормаЗаписатьИЗакрыть.Видимость = Ложь;
		Элементы.ФормаЗаписать.Видимость = Ложь;
		Элементы.ФормаЗакрыть.Видимость = Истина;
		Элементы.ФормаЗакрыть.КнопкаПоУмолчанию = Истина;
		
		Элементы.ФормаПриостановить.Доступность = Ложь;
		Элементы.ФормаВозобновить.Доступность = Ложь;
		Элементы.ФормаОтключить.Видимость = Ложь;
		
		Элементы.ПолучитьКод.Видимость = Ложь;
		
		УстановитьТекстСостояния();
		
	ИначеЕсли Состояние = ПредопределенноеЗначение("Перечисление.СостояниеМПЭПД.Подключен") Тогда
		
		Элементы.ФормаЗаписатьИЗакрыть.Видимость = Ложь;
		Элементы.ФормаЗаписать.Видимость = Ложь;
		Элементы.ФормаЗакрыть.Видимость = Истина;
		Элементы.ФормаЗакрыть.КнопкаПоУмолчанию = Истина;
		
		Элементы.ФормаПриостановить.Доступность = Истина;
		Элементы.ФормаВозобновить.Доступность = Ложь;
		Элементы.ФормаОтключить.Видимость = Истина;
		
		УстановитьТекстСостояния();
		
	ИначеЕсли Состояние = ПредопределенноеЗначение("Перечисление.СостояниеМПЭПД.Приостановлен") Тогда
		
		Элементы.ФормаЗаписатьИЗакрыть.Видимость = Ложь;
		Элементы.ФормаЗаписать.Видимость = Ложь;
		Элементы.ФормаЗакрыть.Видимость = Истина;
		Элементы.ФормаЗакрыть.КнопкаПоУмолчанию = Истина;
		
		Элементы.ФормаПриостановить.Доступность = Ложь;
		Элементы.ФормаВозобновить.Доступность = Истина;
		Элементы.ФормаОтключить.Видимость = Истина;
		
		УстановитьТекстСостояния();
		
	ИначеЕсли Состояние = ПредопределенноеЗначение("Перечисление.СостояниеМПЭПД.ОжидаетсяПодключение") Тогда
		
		Элементы.ФормаЗаписатьИЗакрыть.Видимость = Ложь;
		Элементы.ФормаЗаписать.Видимость = Ложь;
		Элементы.ФормаЗакрыть.Видимость = Истина;
		Элементы.ФормаЗакрыть.КнопкаПоУмолчанию = Истина;
		
		Элементы.ФормаПриостановить.Доступность = Ложь;
		Элементы.ФормаВозобновить.Доступность = Ложь;
		Элементы.ФормаОтключить.Видимость = Ложь;
		
		УстановитьТекстСостояния();
		
	ИначеЕсли Состояние = ПредопределенноеЗначение("Перечисление.СостояниеМПЭПД.ПодключениеНеВыполнено") Тогда
		
		Элементы.ФормаЗаписатьИЗакрыть.Видимость = Ложь;
		Элементы.ФормаЗаписать.Видимость = Ложь;
		Элементы.ФормаЗакрыть.Видимость = Истина;
		Элементы.ФормаЗакрыть.КнопкаПоУмолчанию = Истина;
		
		Элементы.ФормаПриостановить.Доступность = Ложь;
		Элементы.ФормаВозобновить.Доступность = Ложь;
		Элементы.ФормаОтключить.Видимость = Истина;
		
		УстановитьТекстСостояния();
		
	Иначе
		
		// Оформление для формы нового устройства 
		Элементы.ФормаЗаписатьИЗакрыть.Видимость = Истина;
		Элементы.ФормаЗаписатьИЗакрыть.КнопкаПоУмолчанию = Истина;
		Элементы.ФормаЗаписать.Видимость = Истина;
		Элементы.ФормаЗакрыть.Видимость = Ложь;
		
		Элементы.ФормаПриостановить.Доступность = Ложь;
		Элементы.ФормаВозобновить.Доступность = Ложь;
		Если Состояние = ПредопределенноеЗначение("Перечисление.СостояниеМПЭПД.Черновик") Тогда
			Элементы.ФормаОтключить.Видимость = Истина;
		Иначе
			Элементы.ФормаОтключить.Видимость = Ложь;
		КонецЕсли;
		
		УстановитьТекстСостояния();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимПросмотраПолейФормы(ТолькоПросмотр = Неопределено)

	Элементы.ГруппаОрганизация.ТолькоПросмотр = ТолькоПросмотр;
	Элементы.ГруппаУчетнаяЗаписьЭДО.ТолькоПросмотр = ТолькоПросмотр;
	Элементы.ГруппаПолноеИмя.ТолькоПросмотр = ТолькоПросмотр;
	Элементы.ГруппаФИО.ТолькоПросмотр = ТолькоПросмотр;
	Элементы.ГруппаИмяУстройства.ТолькоПросмотр = ТолькоПросмотр;
	Элементы.ГруппаТекстовыеДанные.ТолькоПросмотр = ТолькоПросмотр;
	Элементы.ГруппаВидЭП.ТолькоПросмотр = ТолькоПросмотр;
	Элементы.ГруппаДоверенность.ТолькоПросмотр = ТолькоПросмотр;
	Элементы.ГруппаРоль.ТолькоПросмотр = ТолькоПросмотр;
	Элементы.ГруппаВидыДокументов.ТолькоПросмотр = ТолькоПросмотр;
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекстСостояния()
	
	ИнструкцияВидима = Элементы.ГруппаИнструкция.Видимость;
	
	Если МобильноеУстройствоУдалено Тогда 
		
		ТребуетсяСсылкаНаИнструкцию = Ложь;
		ЗаголовокСостояния = "Отключено";
		
	ИначеЕсли Состояние = ПредопределенноеЗначение("Перечисление.СостояниеМПЭПД.Подключен") Тогда
		
		ТребуетсяСсылкаНаИнструкцию = Не ИнструкцияВидима;
		ЗаголовокСостояния = "Подключено";
		
	ИначеЕсли Состояние = ПредопределенноеЗначение("Перечисление.СостояниеМПЭПД.Приостановлен") Тогда
		
		ТребуетсяСсылкаНаИнструкцию = Не ИнструкцияВидима;
		ЗаголовокСостояния = "Приостановлено";
		
	ИначеЕсли Состояние = ПредопределенноеЗначение("Перечисление.СостояниеМПЭПД.ОжидаетсяПодключение") Тогда
		
		ТребуетсяСсылкаНаИнструкцию = Не ИнструкцияВидима;
		ЗаголовокСостояния = "Ожидается подключение";
		
	ИначеЕсли Состояние = ПредопределенноеЗначение("Перечисление.СостояниеМПЭПД.ПодключениеНеВыполнено") Тогда
		
		ТребуетсяСсылкаНаИнструкцию = Не ИнструкцияВидима;
		ЗаголовокСостояния = "Не подключено";
		
	Иначе
		
		ТребуетсяСсылкаНаИнструкцию = Ложь;
		ЗаголовокСостояния = "Подключение нового устройства";
		
	КонецЕсли;
	
	Если ТребуетсяСсылкаНаИнструкцию Тогда
		СсылкаПолучениеИнструкции = СсылкаПолучениеИнструкции();
		ТекстГиперссылки = "Инструкция для подключения";
		ОформленныйЗаголовокСостояния = ЗаголовокСостоянияПолдключения(ЗаголовокСостояния, 
				ТекстГиперссылки, СсылкаПолучениеИнструкции);
		Элементы.ДекорацияСостояниеПодключения.Заголовок = ОформленныйЗаголовокСостояния;
	Иначе
		Элементы.ДекорацияСостояниеПодключения.Заголовок = ЗаголовокСостояния;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БлокироватьРаботуПользователя(Блокировать)
	
	Элементы.ПолучитьКод.Доступность = Не Блокировать;
	Элементы.ФормаЗаписатьИЗакрыть.Доступность = Не Блокировать;
	Элементы.ФормаЗаписать.Доступность = Не Блокировать;
	Элементы.ФормаИзменить.Доступность = Не Блокировать;
	Элементы.ФормаВозобновить.Доступность = Не Блокировать;
	Элементы.ФормаПриостановить.Доступность = Не Блокировать;
	Элементы.ФормаОтключить.Доступность = Не Блокировать;
	Элементы.ФормаПовторитьРегистрацию.Доступность = Не Блокировать;
	
	БлокироватьПоляФормы = ОтражатьКодРегистрации Или Блокировать; 
	УстановитьРежимПросмотраПолейФормы(БлокироватьПоляФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСостояниеМобильногоУстройства(ПеревестиНаСостояние)
	
	Если ПеревестиНаСостояние = ПредопределенноеЗначение("Перечисление.СостояниеМПЭПД.Приостановлен")
		И Состояние <> ПредопределенноеЗначение("Перечисление.СостояниеМПЭПД.Подключен") Тогда
		
		ПоказатьПредупреждение(, Нстр("ru='Приостановить можно только подключенное мобильное устройство.'"));
		Возврат;
		
	ИначеЕсли ПеревестиНаСостояние = ПредопределенноеЗначение("Перечисление.СостояниеМПЭПД.Подключен")
		И Состояние <> ПредопределенноеЗначение("Перечисление.СостояниеМПЭПД.Приостановлен") Тогда
		
		ПоказатьПредупреждение(, Нстр("ru='Возобновить работу можно только у устройства, чья работа приостановлена.'"));
		Возврат;
		
	КонецЕсли;
	
	ПараметрыЦикла = Новый Структура;
	ПараметрыЦикла.Вставить("ЭтапЦикла", "Начало");
	ПараметрыЦикла.Вставить("ИдентификаторЭДО", УчетнаяЗаписьЭДО);
	ПараметрыЦикла.Вставить("Идентификатор", Идентификатор);
	ПараметрыЦикла.Вставить("ИдентификаторМП", ТекущаяЗаписьМП.ИдентификаторМП);
	ПараметрыЦикла.Вставить("ПеревестиНаСостояние", ПеревестиНаСостояние);
	
	СервисВзаимодействияМПЭПДКлиент.НачатьАссинхронныйСценарий(Новый ОписаниеОповещения("СценарийИзменениеСостоянияПользователя", ЭтотОбъект, ПараметрыЦикла));
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСостояниеЗаписиОбУстройстве(НовоеСостояние, ИдентификаторМП)
	
	Если Не Открыта()
		Или НовоеСостояние = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Состояние = НовоеСостояние;
	
	СтруктураЗаписи = Новый Структура(ТекущаяЗаписьМП);
	СтруктураЗаписи.ИдентификаторМП = ИдентификаторМП;
	СтруктураЗаписи.Идентификатор = Идентификатор;
	СтруктураЗаписи.ИдентификаторЭДО = УчетнаяЗаписьЭДО;
	ТекущаяЗаписьМП = Новый ФиксированнаяСтруктура(СтруктураЗаписи);
	
	Если Состояние = ПредопределенноеЗначение("Перечисление.СостояниеМПЭПД.ПодключениеНеВыполнено") Тогда
		Элементы.ДекорацияТекстСчетчика.Заголовок = "Срок действия кода истек, сгенерируйте код повторно";
		Элементы.ДекорацияТекстСчетчика.ЦветТекста = WebЦвета.Красный;
		ОтключитьОбработчикОжидания("СчетчикДействияКода");
	ИначеЕсли Состояние = ПредопределенноеЗначение("Перечисление.СостояниеМПЭПД.Подключен") Тогда
		КодРегистрации = "";
		Элементы.ДекорацияТекстСчетчика.Заголовок = "Сгенерируйте код повторно";
		Элементы.ДекорацияТекстСчетчика.ЦветТекста = WebЦвета.ТемноОранжевый;
		ОтключитьОбработчикОжидания("СчетчикДействияКода");
		ОтражатьКодРегистрации = Ложь;
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВремяДействияКода()
	
	Возврат 1800;
	
КонецФункции

&НаКлиенте
Процедура ОтразитьПриНеобходимостиКодРегистрации()
	
	Если Состояние <> ПредопределенноеЗначение("Перечисление.СостояниеМПЭПД.ОжидаетсяПодключение") Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НачалоДействияКода) Тогда
		ВремяДействияКода = ВремяДействияКода();
		ПрошлоСекунд = ОбщегоНазначенияКлиент.ДатаСеанса() - НачалоДействияКода;
		ОсталосьСекунд = ВремяДействияКода - ПрошлоСекунд;
		Если ОсталосьСекунд > 0 Тогда
			ОтражатьКодРегистрации = Истина;
			СчетчикДействияКода();
			ПодключитьОбработчикОжидания("СчетчикДействияКода", 1, Ложь);
		Иначе
			КодРегистрации = "";
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетчикДействияКода()
	
	ВремяДействияКода = ВремяДействияКода();
	ПрошлоСекунд = ОбщегоНазначенияКлиент.ДатаСеанса() - НачалоДействияКода;
	ОсталосьСекунд = ВремяДействияКода - ПрошлоСекунд;
	
	Если ОсталосьСекунд <= 0 Тогда
		КодРегистрации = "";
		ТекстСчетчика = "Сгенерируйте код повторно";
		ОтключитьОбработчикОжидания("СчетчикДействияКода");
	Иначе
		ОсталосьМинут = Прав("0" + Цел(ОсталосьСекунд / 60), 2);
		ОсталосьСекунд = Прав("0" + (ОсталосьСекунд - ОсталосьМинут * 60), 2);
		
		ТекстСчетчика = "Действителен " + ОсталосьМинут + " мин. " + ОсталосьСекунд + " сек.";
	КонецЕсли;
	
	Элементы.ДекорацияТекстСчетчика.Заголовок = ТекстСчетчика; 
	Элементы.ДекорацияТекстСчетчика.ЦветТекста = WebЦвета.ТемноОранжевый;
	
КонецПроцедуры

#КонецОбласти

#Область ПодсветкаКодаРегистрации

&НаКлиенте
Функция КоличествоПовторенийПодсветкиКодаРегистрации()
	
	Возврат 6;
	
КонецФункции

&НаКлиенте
Функция ИнтервалПодсветкиКодаРегистрации()
	
	Возврат 0.5;
	
КонецФункции

&НаКлиенте
Процедура ЗапуститьПодсветкуКодаРегистрации()
	
	СчетчикПодсветкиКодаРегистрации = КоличествоПовторенийПодсветкиКодаРегистрации();
	ПодключитьОбработчикОжидания("ПодсветитьКодРегистрации", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодсветитьКодРегистрации()
	
	СчетчикЧетный = СчетчикПодсветкиКодаРегистрации % 2 = 0;
	
	Если СчетчикЧетный Тогда 
		Элементы.КодРегистрации.ЦветРамки = WebЦвета.ТемноСиний;
		Элементы.ПолучитьКод.ЦветРамки = WebЦвета.ТемноСиний;
	Иначе
		Элементы.КодРегистрации.ЦветРамки = Новый Цвет();
		Элементы.ПолучитьКод.ЦветРамки = Новый Цвет();
	КонецЕсли;
	
	СчетчикПодсветкиКодаРегистрации = СчетчикПодсветкиКодаРегистрации - 1;
	Если СчетчикПодсветкиКодаРегистрации = 0 Тогда
		Элементы.КодРегистрации.ЦветРамки = Новый Цвет();
		Элементы.ПолучитьКод.ЦветРамки = Новый Цвет();
	Иначе
		ИнтервалПодсветкиКодаРегистрации = ИнтервалПодсветкиКодаРегистрации();
		ПодключитьОбработчикОжидания("ПодсветитьКодРегистрации", ИнтервалПодсветкиКодаРегистрации, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИмяУстройства

&НаКлиенте
Процедура ИзменениеФИО()
	
	ПолноеИмя = Фамилия + " " + Имя + " " + Отчество;
	
	СформироватьИмяУстройства();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьИмяУстройства()
	
	ИмяУстройства = ПолноеИмя;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаУникальности

&НаКлиентеНаСервереБезКонтекста
Функция НовыйРезультатПроверкиУникальностиДанныхПользователя()
	
	Структура = Новый Структура;
	Структура.Вставить("Успешность", Истина);
	Структура.Вставить("СообщениеПользователю", "");
	Структура.Вставить("СоответствиеПользователей");
	
	Возврат Структура;
	
КонецФункции

&НаСервереБезКонтекста
Функция НоваяСтруктураДляВыбораПользователя()
		
	Структура = Новый Структура;
	Структура.Вставить("Наименование");
	Структура.Вставить("МассивПолей");
	Структура.Вставить("ПоляСтрокой");
	
	Возврат Структура;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьУникальностьДанныхПользователяНаСервере(Знач КлючевыеПоля, Знач Идентификатор, Знач УчетнаяЗаписьЭДО)
	
	Результат = НовыйРезультатПроверкиУникальностиДанныхПользователя();
	
	Запрос = Новый Запрос;
	РегистрыСведений.ПодключенныеМПЭПД.ДобавитьВЗапросТекстИПараметрыПоискаПовторяющихсяЗаписей(Запрос,
			КлючевыеПоля, Идентификатор, УчетнаяЗаписьЭДО);
			
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	СоответствиеПользователей = Новый Соответствие;
	МетоданныеРесурсов = Метаданные.НайтиПоТипу(Тип("РегистрСведенийКлючЗаписи.ПодключенныеМПЭПД")).Ресурсы;
	МассивПовторяющихсяПолей = Новый Массив;
	
	// Формирование соответствия с уникальными идентификаторами записей и повторяемыми полями
	Пока Выборка.Следующий() Цикл
		Если СоответствиеПользователей[Выборка.Идентификатор] = Неопределено Тогда
			СтруктураДляВыбораПользователя = НоваяСтруктураДляВыбораПользователя();
			СтруктураДляВыбораПользователя.Наименование = Выборка.Наименование;
			СтруктураДляВыбораПользователя.МассивПолей = Новый Массив;
			СоответствиеПользователей.Вставить(Выборка.Идентификатор, СтруктураДляВыбораПользователя);
		КонецЕсли;
		
		СтруктураДляВыбораПользователя = СоответствиеПользователей[Выборка.Идентификатор];
		СинонимРесурса = МетоданныеРесурсов[Выборка.ПолеПоискаПовторений].Синоним;
		СтруктураДляВыбораПользователя.МассивПолей.Добавить(СинонимРесурса);
		
		Если МассивПовторяющихсяПолей.Найти(СинонимРесурса) = Неопределено Тогда
			МассивПовторяющихсяПолей.Добавить(СинонимРесурса);
		КонецЕсли;
		
	КонецЦикла;
	
	Если СоответствиеПользователей.Количество() = 1 Тогда
		СообщениеПользователю = НСтр("ru = 'Введенные данные совпадают с ранее добавленным устройством.'");
	Иначе
		СообщениеПользователю = НСтр("ru = 'Введенные данные совпадают с ранее добавленными устройствами.'");
	КонецЕсли;
	
	Результат.СообщениеПользователю = СообщениеПользователю;
	Результат.СоответствиеПользователей = СоответствиеПользователей;
	Результат.Успешность = Ложь;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПроверитьУникальностьДанныхПользователя(ПриСохранении)
	
	// Отмена проверки при повторной регистрации и если вопрос уже был задан ранее
	Если (ЗначениеЗаполнено(ТекущаяЗаписьМП.Наименование) И Не ПриСохранении)
		Или ЗадавалсяВопросОДубляхПользователя Тогда
		СтруктураРезультата = НовыйРезультатПроверкиУникальностиДанныхПользователя();
		Возврат СтруктураРезультата;
	КонецЕсли;
	
	КлючевыеПоля = СервисВзаимодействияМПЭПДКлиент.КлючевыеПоляКонтроляПовторенийРегистраПодключенныхМПЭПД();
	ЗаполнитьЗначенияСвойств(КлючевыеПоля, ЭтотОбъект);
	СтруктураРезультата = ПроверитьУникальностьДанныхПользователяНаСервере(КлючевыеПоля, Идентификатор,
		УчетнаяЗаписьЭДО);
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаКлиенте
Процедура ВыборУстройстваДляПерезаполненияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторВыбраннойЗаписи = Результат.Идентификатор;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Идентификатор", ИдентификаторВыбраннойЗаписи);
	ПараметрыФормы.Вставить("УчетнаяЗаписьЭДО", УчетнаяЗаписьЭДО);
	ПараметрыФормы.Вставить("Организация", Организация);
	СервисВзаимодействияМПЭПДКлиент.ОткрытьФормуПользователяМобильногоУстройства(ПараметрыФормы, ВладелецФормы);
	ПодключитьОбработчикОжидания("ОбработчикЗакрытияФормы", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаписьДанных

&НаКлиенте
Процедура ЗаписатьДанныеПользователя()
	
	Если Не ЗначениеЗаполнено(Состояние) Тогда
		Состояние = ПредопределенноеЗначение("Перечисление.СостояниеМПЭПД.Черновик");
	КонецЕсли;
	
	СтруктураПолей = СервисВзаимодействияМПЭПДКлиент.СтруктураПолейРегистраПодключенныхМПЭПД();
	
	СтруктураПолей.Идентификатор = Идентификатор;
	СтруктураПолей.ИдентификаторЭДО = УчетнаяЗаписьЭДО;
	СтруктураПолей.ИдентификаторМП = ТекущаяЗаписьМП.ИдентификаторМП;
	СтруктураПолей.Состояние = Состояние;
	СтруктураПолей.ФизическоеЛицо = ФизическоеЛицо;
	СтруктураПолей.Фамилия = Фамилия;
	СтруктураПолей.Имя = Имя;
	СтруктураПолей.Отчество = Отчество;
	СтруктураПолей.Наименование = ИмяУстройства;
	СтруктураПолей.Телефоны = ЗначениеТелефона(НомерТелефона);
	СтруктураПолей.ВидПодписи = ВидЭП;
	СтруктураПолей.СНИЛС = СНИЛС;
	СтруктураПолей.ИНН = ИНН;
	СтруктураПолей.МЧД = Доверенность;
	СтруктураПолей.ЕстьБумажнаяДоверенность = ЕстьБумажнаяДоверенность;
	СтруктураПолей.ПрямойОбмен = ПрямойОбмен;
	СтруктураПолей.АдресФото = АдресФото;
	СтруктураПолей.Роль = Роль;
	СтруктураПолей.ВидыДокументов = ВидыДокументов;
	
	ЗаписатьДанныеПользователяНаСервере(СтруктураПолей);
	
	НоваяЗапись = Истина;
	ОповеститьОбИзмененииУстройства(НоваяЗапись);
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьДанныеПользователяНаСервере(Знач СтруктураПолей)
	
	Если ЗначениеЗаполнено(СтруктураПолей.АдресФото) Тогда
		ФотоДвоичныеДанные = ПолучитьИзВременногоХранилища(СтруктураПолей.АдресФото);
		СтруктураПолей.Вставить("Фото", Новый ХранилищеЗначения(ФотоДвоичныеДанные, Новый СжатиеДанных(9)));
	Иначе
		СтруктураПолей.Вставить("Фото", Новый ХранилищеЗначения(Неопределено));
	КонецЕсли;
	СтруктураПолей.Удалить("АдресФото");
	
	РегистрыСведений.ПодключенныеМПЭПД.РегистрироватьЗапись(СтруктураПолей);
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

&НаКлиенте
Процедура ОбработчикЗакрытияФормы()
	
	ЗакрытьФорму = Истина;
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеФормыПоИдентификатору(Знач ИдентификаторЗаписи)
	
	Идентификатор = ИдентификаторЗаписи;
	СтруктураРегистра = РегистрыСведений.ПодключенныеМПЭПД.СтруктураДанныхЗаписиПоИдентификатору(Идентификатор);
	Если СтруктураРегистра = Неопределено Тогда
		СтруктураРегистра = РегистрыСведений.ПодключенныеМПЭПД.ПараметрыЗаписиРегистра(
				УчетнаяЗаписьЭДО, Идентификатор);
	КонецЕсли;
	ТекущаяЗаписьМП = Новый ФиксированнаяСтруктура(СтруктураРегистра);
	
	Если ТекущаяЗаписьМП.Найден Тогда
		УчетнаяЗаписьЭДО = ТекущаяЗаписьМП.ИдентификаторЭДО;
		ИмяУстройства = ТекущаяЗаписьМП.Наименование;
		СНИЛС = ТекущаяЗаписьМП.СНИЛС;
		ИНН = ТекущаяЗаписьМП.ИНН;
		НомерТелефонаТолькоЦифрыИПрефикс = ЗначениеТелефона(ТекущаяЗаписьМП.Телефоны);
		Если МожноПолучитьПредставлениеТелефона(НомерТелефонаТолькоЦифрыИПрефикс) Тогда
			НомерТелефона = ОбменСГИСЭПДКлиентСервер.ПолучитьПредставлениеТелефона(НомерТелефонаТолькоЦифрыИПрефикс);
		Иначе
			НомерТелефона = НомерТелефонаТолькоЦифрыИПрефикс;
		КонецЕсли;
		ВидЭП = ТекущаяЗаписьМП.ВидПодписи;
		ФизическоеЛицо = ТекущаяЗаписьМП.ФизическоеЛицо;
		Фамилия = ТекущаяЗаписьМП.Фамилия;
		Имя = ТекущаяЗаписьМП.Имя;
		Отчество = ТекущаяЗаписьМП.Отчество;
		Роль = ТекущаяЗаписьМП.Роль;
		ВидыДокументов = ТекущаяЗаписьМП.ВидыДокументов;
		Доверенность = ТекущаяЗаписьМП.МЧД;
		ЕстьБумажнаяДоверенность = ТекущаяЗаписьМП.ЕстьБумажнаяДоверенность;
		ПрямойОбмен = ТекущаяЗаписьМП.ПрямойОбмен;
		Состояние = ТекущаяЗаписьМП.Состояние;
		ПолноеИмя = Фамилия + " " + Имя + " " + Отчество;
		КодРегистрации = ФорматКодаРегистрации(ТекущаяЗаписьМП.КодРегистрации);
		НачалоДействияКода = МестноеВремя(ТекущаяЗаписьМП.ДатаВремяПолученияКодаРегистрации);
		ФотоЗначениеХранилища = ТекущаяЗаписьМП.Фото.Получить();
		Если ФотоЗначениеХранилища <> Неопределено Тогда
			АдресФото = ПоместитьВоВременноеХранилище(ФотоЗначениеХранилища, УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.ВидЭП.СписокВыбора.Количество() = 1 Тогда
		Элементы.ГруппаВидЭП.Видимость = Ложь;
		ВидЭП = Элементы.ВидЭП.СписокВыбора[0].Значение;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидЭП) = Ложь Тогда
		ВидЭП = Перечисления.ВидПодписиМПЭПД.ПростаяПодпись;	
	КонецЕсли;
	
	ЗаполнитьСписокДоверенностей();
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеПодбораУчетнойЗаписи(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		УчетнаяЗаписьЭДО = РезультатВыбора.ИдентификаторЭДО;
		СтруктураИнформации = СтруктураИнформацииПоУчетнойЗаписиЭДО(УчетнаяЗаписьЭДО);
		УчетнаяЗаписьЭДОПодключена = СтруктураИнформации.УчетнаяЗаписьПодключена;
		ПредставлениеУчетнойЗаписиЭДО = СтруктураИнформации.ПредставлениеУчетнойЗаписиЭДО;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НовыйРезультатПолученияИнформацииПоУчетнойЗаписиЭДО()
	
	Структура = Новый Структура;
	
	Структура.Вставить("УчетнаяЗаписьПодключена");
	Структура.Вставить("ПредставлениеУчетнойЗаписиЭДО");
	
	Возврат Структура;
	
КонецФункции

&НаСервереБезКонтекста
Функция СтруктураИнформацииПоУчетнойЗаписиЭДО(Знач ИдентификаторЭДО)
	
	СтруктураРезультата = НовыйРезультатПолученияИнформацииПоУчетнойЗаписиЭДО();
	
	УчетнаяЗаписьПодключена = УчетнаяЗаписьПодключена(ИдентификаторЭДО);
	ПредставлениеУчетнойЗаписиЭДО = СервисВзаимодействияМПЭПД.ПредставлениеУчетнойЗаписиЭДО(ИдентификаторЭДО);
	
	СтруктураРезультата.УчетнаяЗаписьПодключена = УчетнаяЗаписьПодключена;
	СтруктураРезультата.ПредставлениеУчетнойЗаписиЭДО = ПредставлениеУчетнойЗаписиЭДО;
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервереБезКонтекста
Функция УчетнаяЗаписьПодключена(Знач ИдентификаторЭДО)

	Возврат СервисВзаимодействияМПЭПД.УчетнаяЗаписьПодключена(ИдентификаторЭДО);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокДоверенностей()
	
	Элементы.Доверенность.СписокВыбора.Очистить();
	Если ТекущаяЗаписьМП.Найден И ЗначениеЗаполнено(ТекущаяЗаписьМП.МЧД) Тогда
		Элементы.Доверенность.СписокВыбора.Добавить(ТекущаяЗаписьМП.МЧД);
	КонецЕсли;

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Доверенность.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.МашиночитаемыеДоверенностиОрганизаций КАК Доверенность
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МашиночитаемыеДоверенностиОрганизаций.Представители КАК ДоверенностьПредставители
	|		ПО Доверенность.Ссылка = ДоверенностьПредставители.Ссылка
	|ГДЕ
	|	Доверенность.Организация = &Организация
	|	И ДоверенностьПредставители.ФЛ_ИНН = &ПредставительИНН
	|	И НЕ Доверенность.ПометкаУдаления
	|	И Доверенность.СтатусВРеестреФНС = &СтатусВРеестреФНС
	|	И Доверенность.Отозвана = ЛОЖЬ
	|	И Доверенность.Верна = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Доверенность.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.МЧД003 КАК Доверенность
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МЧД003.Представители КАК ДоверенностьПредставители
	|		ПО Доверенность.Ссылка = ДоверенностьПредставители.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МЧД003.Доверители КАК ДоверенностьДоверители
	|		ПО Доверенность.Ссылка = ДоверенностьДоверители.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО Организации.Ссылка = &Организация
	|ГДЕ
	|	ДоверенностьДоверители.ИНН = Организации.ИНН
	|	И ДоверенностьДоверители.КПП = Организации.КПП
	|	И ДоверенностьПредставители.ИНН = &ПредставительИНН
	|	И НЕ Доверенность.ПометкаУдаления
	|	И Доверенность.СтатусВРеестреФНС = &СтатусВРеестреФНС
	|	И Доверенность.Верна = ИСТИНА";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СтатусВРеестреФНС", Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.Зарегистрировано);
	Запрос.УстановитьПараметр("ПредставительИНН", ИНН);
	РезультатЗапроса = Запрос.Выполнить(); 
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Элементы.Доверенность.СписокВыбора.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Если Элементы.Доверенность.СписокВыбора.Количество() > 0 Тогда
		Элементы.Доверенность.СписокВыбора.Добавить(Справочники.МашиночитаемыеДоверенностиОрганизаций.ПустаяСсылка(), "Отозвать доверенность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СтруктураОповещениеОбИзмененииСостояния()
	
	Структура = Новый Структура;
	Структура.Вставить("УникальныйИдентификаторФормы", УникальныйИдентификатор);
	Структура.Вставить("Идентификатор", Идентификатор);
	
	Возврат Структура;
	
КонецФункции

&НаКлиенте
Функция ЗаголовокСостоянияПолдключения(Знач СостояниеСтрокой, ТекстГиперссылки, АдресГиперссылки)
	
	Шаблон = "%1  ";
	СостояниеСтрокой = СтрШаблон(Шаблон, СостояниеСтрокой);
	
	МассивФорматированныхСтрок = Новый Массив;
	ФорматированнаяСтрока = Новый ФорматированнаяСтрока(СостояниеСтрокой);
	МассивФорматированныхСтрок.Добавить(ФорматированнаяСтрока);
	ФорматированнаяСтрока = Новый ФорматированнаяСтрока(ТекстГиперссылки, , , , АдресГиперссылки);
	МассивФорматированныхСтрок.Добавить(ФорматированнаяСтрока);
	ЗаголовокСостояния = Новый ФорматированнаяСтрока(МассивФорматированныхСтрок);
	
	Возврат ЗаголовокСостояния;
	
КонецФункции

&НаКлиенте
Функция СсылкаПолучениеИнструкции()
	
	Возврат "ПолучениеКода";
	
КонецФункции

&НаСервере
Процедура ОкончаниеПодбораСотрудникаСервер(Знач СсылкаСправочника)
	
	ИмяУстройстваСовпадаетСИменемСотрудника = ИмяУстройства = ПолноеИмя;
	
	ДанныеСотрудника = СервисВзаимодействияМПЭПД.ПолучитьДанныеФизическогоЛица(СсылкаСправочника);
	
	ИНН = ДанныеСотрудника.ИНН;
	СНИЛС = ДанныеСотрудника.СтраховойНомерПФР;
	НомерТелефонаТолькоЦифрыИПрефикс = ЗначениеТелефона(ДанныеСотрудника.Телефон);
	Если МожноПолучитьПредставлениеТелефона(НомерТелефонаТолькоЦифрыИПрефикс) Тогда
		НомерТелефона = ОбменСГИСЭПДКлиентСервер.ПолучитьПредставлениеТелефона(НомерТелефонаТолькоЦифрыИПрефикс);
	Иначе
		НомерТелефона = НомерТелефонаТолькоЦифрыИПрефикс;
	КонецЕсли;
	
	Имя = ДанныеСотрудника.Имя;
	Фамилия = ДанныеСотрудника.Фамилия;
	Отчество = ДанныеСотрудника.Отчество;
	ПолноеИмя = Фамилия + " " + Имя + " " + Отчество;
	
	Если ПустаяСтрока(ИмяУстройства) Или 
		ИмяУстройстваСовпадаетСИменемСотрудника Тогда
		ИмяУстройства = Фамилия + " " + Имя + " " + Отчество;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗначенияПолейФормы(СтруктураПолей)
	
	ПоляСтрокой = "Фамилия, Имя, Отчество, СНИЛС, ИНН, ИмяУстройства, ВидЭП, НомерТелефона, Доверенность,
	|ЕстьБумажнаяДоверенность, ПрямойОбмен, ФизическоеЛицо, Роль, ВидыДокументов"; 
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураПолей, ПоляСтрокой);
	ПолноеИмя = Фамилия + " " + Имя + " " + Отчество;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ФорматКодаРегистрации(Знач КодРегистрации)
	
	Если Не ЗначениеЗаполнено(КодРегистрации) Тогда
		Возврат "";
	КонецЕсли;
	
	ТриСлева = Лев(КодРегистрации, 3);
	ТриСправа = Прав(КодРегистрации, 3);
	Шаблон = "%1-%2";
	ФорматированныйКодРегистрации = СтрШаблон(Шаблон, ТриСлева, ТриСправа);
	
	Возврат ФорматированныйКодРегистрации;
	
КонецФункции

&НаКлиенте
Функция СтруктураОповешенияОбИзмененииУстройства(НоваяЗапись, Удалить)
	
	// Изменяемые поля из регистра ПодключенныеМПЭПД
	СтруктураИзмененныхПолей = Новый Структура;
	СтруктураИзмененныхПолей.Вставить("Состояние", Состояние);
	СтруктураИзмененныхПолей.Вставить("Наименование", ИмяУстройства);
	Если НоваяЗапись Тогда
		СтруктураИзмененныхПолей.Вставить("Организация", Организация);
		СтруктураИзмененныхПолей.Вставить("ИдентификаторЭДО", УчетнаяЗаписьЭДО);
	КонецЕсли;
	
	СтруктураОповещения = Новый Структура;
	СтруктураОповещения.Вставить("Идентификатор", Идентификатор);
	СтруктураОповещения.Вставить("НоваяЗапись", НоваяЗапись);
	СтруктураОповещения.Вставить("Удалить", Удалить);
	СтруктураОповещения.Вставить("СтруктураИзмененныхПолей", СтруктураИзмененныхПолей);	
	
	Возврат СтруктураОповещения;
	
КонецФункции

&НаКлиенте
Процедура ОповеститьОбИзмененииУстройства(НоваяЗапись = Ложь, Удалить = Ложь)
	
	СтруктураОповещения = СтруктураОповешенияОбИзмененииУстройства(НоваяЗапись, Удалить);
	
	ИмяОповещения = СервисВзаимодействияМПЭПДКлиент.ИмяОповещенияОбИзмененииУстройства();
	Оповестить(ИмяОповещения, СтруктураОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		ЗаписатьДанныеПользователя();
	КонецЕсли;
	
	ЗакрытьФорму = Истина;
	Закрыть();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗначениеТелефона(Знач ТекущееЗначение)
	
	МаскаПрименена = СтрНачинаетсяС(ТекущееЗначение, "+7");
	
	Результат = "";
	ТолькоСимволы = "0123456789";
	Для Счетчик = 1 По СтрДлина(ТекущееЗначение) Цикл
		ТекСимвол = Сред(ТекущееЗначение, Счетчик, 1);
		Если СтрНайти(ТолькоСимволы, ТекСимвол) > 0 Тогда
			Результат = Результат + ТекСимвол;
		КонецЕсли;
	КонецЦикла;
	
	Если Не МаскаПрименена 
		И Не ПустаяСтрока(Результат)
		И СтрДлина(Результат) = 10 Тогда
		Результат = "7" + Результат;
	КонецЕсли;
	
	Если СтрДлина(Результат) = 11 И Лев(Результат, 1) = "7" Тогда
		Результат = "+" + Результат;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МожноПолучитьПредставлениеТелефона(Знач Телефон)
	
	ЕстьПлюс = Лев(Телефон, 1) = "+";
	ДлинаТелефона = СтрДлина(Телефон);
	
	Если (ЕстьПлюс И ДлинаТелефона = 12) Или ДлинаТелефона = 11 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ФотоНажатие_Завершение(ПомещенныйФайл, ДополнительныеПараметры) Экспорт
	
	Если ПомещенныйФайл <> Неопределено Тогда
		ПреобразоватьФотоДляХранения(ПомещенныйФайл);
		АдресФото = ПомещенныйФайл.Хранение;
		Модифицированность = Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПреобразоватьФотоДляХранения(ПомещенныйФайл, МаксимальнаяСторона = 165)
	
	ИсходнаяКартинка = Новый Картинка(ПолучитьИзВременногоХранилища(ПомещенныйФайл.Хранение));
	
	ИсходнаяШирина = ИсходнаяКартинка.Ширина();
	ИсходнаяВысота = ИсходнаяКартинка.Высота();
	СоотношениеСторон = ИсходнаяШирина / ИсходнаяВысота;
	
	ОбрабатываемаяКартинка = Новый ОбрабатываемаяКартинка(ИсходнаяКартинка);
	ОбрабатываемаяКартинка.УстановитьФормат(ФорматКартинки.JPEG);
	ОбрабатываемаяКартинка.УстановитьРазмер(МаксимальнаяСторона * СоотношениеСторон, МаксимальнаяСторона);
	
	КартинкаРезультат = ОбрабатываемаяКартинка.ПолучитьКартинку();
	
	ПоместитьВоВременноеХранилище(КартинкаРезультат.ПолучитьДвоичныеДанные(), ПомещенныйФайл.Хранение);
	
КонецПроцедуры

&НаКлиенте
Процедура РольОткрытие_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Роль = Результат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДокументов_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ВидыДокументов = Результат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

