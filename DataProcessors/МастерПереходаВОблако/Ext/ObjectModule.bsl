#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область СлужебныйПрограммныйИнтерфейс

// Возвращает версию.
// 
// Возвращаемое значение:
//  Число
Функция Версия() Экспорт
	
	Возврат 1.2;
	
КонецФункции
 
// Возвращает HTTPСоединение
// 
// Параметры: 
//  Адрес - Строка
//  Логин - Строка
//  Пароль - Строка
//  Таймаут - Число
// 
// Возвращаемое значение:
//  HTTPСоединение
Функция Соединение(Адрес, Логин = Неопределено, Пароль = Неопределено, Таймаут = 30) Экспорт

	ЧастиАдреса = ОбщегоНазначенияКлиентСервер.СтруктураURI(Адрес);
	Соединение = Новый HTTPСоединение(ЧастиАдреса.Хост, 443, Логин, Пароль,
		ПолучениеФайловИзИнтернета.ПолучитьПрокси(ЧастиАдреса.Схема), Таймаут,
		ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение());
	
	Возврат Соединение;
	
КонецФункции

// Получить данные
// 
// Параметры:
//  Параметры - Структура:
// * Адрес - Строка
// * Метод - Строка
//  АдресРезультата - Строка - адрес помещения результата
// 
// Возвращаемое значение: 
//  см. РезультатЗапроса
Функция ПолучитьДанные(Параметры, АдресРезультата) Экспорт
	
	Адрес = Параметры.Адрес;
	Метод = Параметры.Метод;
	
	Соединение = Соединение(Адрес);
	Запрос = Новый HTTPЗапрос(СтрШаблон("/info/hs/migration/%1", Метод));
	
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод("GET", Запрос);
		Результат = РезультатЗапроса(Ответ);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Результат = ОшибкаВыполненияЗапроса(ИнформацияОбОшибке);
	КонецПопытки;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
	Возврат Результат;
	
КонецФункции

Процедура ОтправитьДанные(Параметры, АдресРезультата) Экспорт
	
	Адрес = Параметры.Адрес;
	Метод = Параметры.Метод;
	Данные = Параметры.Данные;
	
	Соединение = Соединение(Адрес);
	Запрос = Новый HTTPЗапрос(СтрШаблон("/info/hs/migration/%1", Метод));
	Запрос.УстановитьТелоИзСтроки(РаботаВМоделиСервисаБТС.СтрокаИзСтруктурыJSON(Данные));
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод("POST", Запрос);
		ПоместитьВоВременноеХранилище(РезультатЗапроса(Ответ), АдресРезультата);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПоместитьВоВременноеХранилище(ОшибкаВыполненияЗапроса(ИнформацияОбОшибке), АдресРезультата);
	КонецПопытки;
	
КонецПроцедуры

Функция ВыполнитьМетодВнешнегоИнтерфейса(Параметры, АдресРезультата) Экспорт
	
	АдресПрограммногоИнтерфейса = Параметры.АдресПрограммногоИнтерфейса;
	Метод = Параметры.Метод;
	СоставМетода = СтрРазделить(Метод,"/");
	ТипЗапроса = СоставМетода[0];
	СоставМетода.Удалить(0);
	Метод = СтрСоединить(СоставМетода, "/");
	
	ВерсияПрограммногоИнтерфейса = 0;
	Параметры.Свойство("ВерсияПрограммногоИнтерфейса", ВерсияПрограммногоИнтерфейса);
	МетодВАдресеПоддерживается = (ВерсияПрограммногоИнтерфейса <> Неопределено И ВерсияПрограммногоИнтерфейса >=19);
	
	Авторизация = Параметры.Авторизация;
	Данные = Параметры.Данные;
	Если Параметры.Свойство("Таймаут") Тогда
		Таймаут = Параметры.Таймаут;
	Иначе
		Таймаут = 30;
	КонецЕсли;
	
	СтруктураURL = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресПрограммногоИнтерфейса);
	Соединение = Соединение(СтруктураURL.Хост, Авторизация.Логин, Авторизация.Пароль, Таймаут);
	
	АдресРесурса = СтрШаблон("%1/execute", СтруктураURL.ПутьНаСервере);
	Если МетодВАдресеПоддерживается Тогда
		АдресРесурса = АдресРесурса + "/" + ТипЗапроса + "/" + Метод;
	КонецЕсли;
	Запрос = Новый HTTPЗапрос(АдресРесурса);
	
	Если Данные <> Неопределено Тогда
		ДанныеЗапроса = ОбщегоНазначения.СкопироватьРекурсивно(Данные);
	Иначе
		ДанныеЗапроса = Новый Структура;
	КонецЕсли; 
	
	Если Не МетодВАдресеПоддерживается Тогда
		РазделОсновное = Новый Структура;
		РазделОсновное.Вставить("type", ТипЗапроса);
		РазделОсновное.Вставить("method", Метод);
		Если ТипЗнч(ДанныеЗапроса) = Тип("Структура") Тогда
			ДанныеЗапроса.Вставить("general", РазделОсновное);
		КонецЕсли;
	КонецЕсли;
	
	Если Авторизация.Свойство("КодАбонента") Тогда
		РазделАвторизация = Новый Структура;
		РазделАвторизация.Вставить("account", Авторизация.КодАбонента);
		Если ТипЗнч(ДанныеЗапроса) = Тип("Структура") Тогда
			ДанныеЗапроса.Вставить("auth", РазделАвторизация);
		КонецЕсли;
	КонецЕсли;
	
	Запрос.УстановитьТелоИзСтроки(РаботаВМоделиСервисаБТС.СтрокаИзСтруктурыJSON(ДанныеЗапроса));
	
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод("POST", Запрос);
		Результат = РезультатЗапроса(Ответ);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Результат = ОшибкаВыполненияЗапроса(ИнформацияОбОшибке);
	КонецПопытки;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
	Возврат Результат;
	
КонецФункции

// Передает файл на сервер облачного сервиса.
// 
// Параметры:
//  Параметры - Структура:
//   * АдресПрограммногоИнтерфейса - Строка
//   * ВерсияПрограммногоИнтерфейса - Число
//   * Логин - Строка
//   * Пароль - Строка
//   * КодАбонента - Число
//   * ИмяФайла - Строка
//   * РазмерФайла - Число
//   * ИмяФайлаВременногоХранилища - Строка
//  АдресРезультата - Строка - адрес сохранения результата во временном хранилище.
//
Процедура ПередатьФайл(Параметры, АдресРезультата) Экспорт
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("АдресПрограммногоИнтерфейса", Параметры.АдресПрограммногоИнтерфейса);
	ПараметрыМетода.Вставить("ВерсияПрограммногоИнтерфейса", Параметры.ВерсияПрограммногоИнтерфейса);
	ПараметрыМетода.Вставить("Авторизация", ПараметрыАвторизации(Параметры.Логин, Параметры.Пароль));
	ПараметрыМетода.Вставить("Метод", "srv/files/new_multipart");
	
	Данные = Новый Структура;
	Данные.Вставить("name", Параметры.ИмяФайла);
	Данные.Вставить("size", Параметры.РазмерФайла);
	Данные.Вставить("type", "new_data_dump");
	Данные.Вставить("owner", Параметры.КодАбонента);
	
	ПараметрыМетода.Вставить("Данные", Данные);
	
	Результат = ВыполнитьМетодВнешнегоИнтерфейса(ПараметрыМетода, АдресРезультата);
	
	Если Результат.Ошибка Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторФайла = Результат.Данные.file_id;
	РасположениеФайла = ФайлыБТС.ПолноеИмяФайлаВременногоХранилища(Параметры.ИмяФайлаВременногоХранилища);
	Location = Результат.Данные.url;
	
	Если Результат.Данные.type = "s3" Тогда
		
		РазмерБлока = 1024 * 1024 * 100; // 100 Мбайт
		СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(Location);
		Соединение = Соединение(Location);
		ПотокДанных = ФайловыеПотоки.Открыть(РасположениеФайла, РежимОткрытияФайла.Открыть, ДоступКФайлу.Чтение);
		ОтправляемыйДиапазон = Новый Структура;
		ОтправляемыйДиапазон.Вставить("Начало", 0);
		ОтправляемыйДиапазон.Вставить("Конец", Мин(РазмерБлока - 1, Параметры.РазмерФайла - 1));
		Части = Новый Массив;
		Пока Истина Цикл
			Буфер = Новый БуферДвоичныхДанных(ОтправляемыйДиапазон.Конец - ОтправляемыйДиапазон.Начало + 1);
			ПотокДанных.Прочитать(Буфер, 0, Буфер.Размер);
			ЗапросДанных = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере);
			ЗапросДанных.УстановитьТелоИзДвоичныхДанных(ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(Буфер));
			Для Каждого Заголовок Из Результат.Данные.headers Цикл
				КлючЗначение = СтрРазделить(Заголовок, ":");
				ЗапросДанных.Заголовки.Вставить(КлючЗначение[0], КлючЗначение[1]);
			КонецЦикла; 
			Ответ = Соединение.ВызватьHTTPМетод("PUT", ЗапросДанных);
			Если Ответ.КодСостояния <> 200 Тогда
				ПотокДанных.Закрыть();
				ПараметрыМетода.Метод = "srv/files/abort_multipart";
				ПараметрыМетода.Данные = Новый Структура("file_id", ИдентификаторФайла);
				ВыполнитьМетодВнешнегоИнтерфейса(ПараметрыМетода, АдресРезультата);
				Результат = ШаблонРезультата();
				Результат.Ошибка = Истина;
				Результат.СообщениеОбОшибке = СтрШаблон(
					НСтр("ru = 'Не удалось отправить часть файла, код ответа: %1%2%3'"), 
					Ответ.КодСостояния, Символы.ПС, Ответ.ПолучитьТелоКакСтроку());
				ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
				Возврат;
			КонецЕсли;
			Части.Добавить(СтрЗаменить(ОбщегоНазначенияБТС.ЗаголовокHTTP(Ответ, "ETag"),"""",""));
			ОтправляемыйДиапазон.Начало = ОтправляемыйДиапазон.Конец + 1;
			ОтправляемыйДиапазон.Конец = Мин(ОтправляемыйДиапазон.Конец + РазмерБлока, Параметры.РазмерФайла - 1);
			Если ОтправляемыйДиапазон.Начало > ОтправляемыйДиапазон.Конец Тогда // все передано
				Прервать;
			КонецЕсли;
			ПараметрыМетода.Метод = "srv/files/new_part";
			ПараметрыМетода.Данные = Новый Структура("file_id, part_number", ИдентификаторФайла, Части.Количество() + 1);
			Результат = ВыполнитьМетодВнешнегоИнтерфейса(ПараметрыМетода, АдресРезультата);
			Если Результат.Ошибка Тогда
				ПотокДанных.Закрыть();
				Возврат;
			КонецЕсли;
			СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(Результат.Данные.url);
		КонецЦикла;
		ПотокДанных.Закрыть();
		
		ПараметрыМетода.Метод = "srv/files/complete_multipart";
		ПараметрыМетода.Данные = Новый Структура("file_id, parts", ИдентификаторФайла, Части);
		ВыполнитьМетодВнешнегоИнтерфейса(ПараметрыМетода, АдресРезультата);
		Если Результат.Ошибка Тогда
			Возврат;
		КонецЕсли;
			
	Иначе
		
		ПараметрыДоступа = Новый Структура;
		ПараметрыДоступа.Вставить("URL", Параметры.АдресПрограммногоИнтерфейса);
		ПараметрыДоступа.Вставить("UserName", Параметры.Логин);
		ПараметрыДоступа.Вставить("Password", Параметры.Пароль);
		
		ПараметрыОтправки = Новый Структура;
		ПараметрыОтправки.Вставить("Location", Location);
		ПараметрыОтправки.Вставить("SetCookie", Неопределено);
		
		Результат = ПередачаДанныхСервер.ОтправитьЧастьФайлаВЛогическоеХранилище(
			ПараметрыДоступа, ПараметрыОтправки, РасположениеФайла);
			
		Если Результат = Неопределено Тогда
			Результат = ШаблонРезультата();
			Результат.Ошибка = Истина;
			Результат.СообщениеОбОшибке = СтрШаблон(
				НСтр("ru = 'Не удалось отправить файл по адресу: %1'"), Location);
			ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = ШаблонРезультата();
	Результат.Вставить("ИдентификаторФайла", ИдентификаторФайла);
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Возвращает параметры авторизации.
// 
// Параметры: 
//  Логин - Строка
//  Пароль - Строка
//  КодАбонента - Число
// 
// Возвращаемое значение: 
//  Структура - Параметры авторизации:
// * Логин - Строка
// * Пароль - Строка
// * КодАбонента - Число - если значение передано в параметрах
Функция ПараметрыАвторизации(Логин, Пароль, КодАбонента = Неопределено) Экспорт
	
	ПараметрыАвторизации = Новый Структура;
	ПараметрыАвторизации.Вставить("Логин", Логин);
	ПараметрыАвторизации.Вставить("Пароль", Пароль);
	Если Не КодАбонента = Неопределено Тогда
		ПараметрыАвторизации.Вставить("КодАбонента", КодАбонента);
	КонецЕсли; 
	
	Возврат ПараметрыАвторизации;
	
КонецФункции

Процедура ПолучитьИнформациюОВозможностяхПерехода(Параметры, АдресРезультата) Экспорт

	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Адрес", Параметры.Адрес);
	ПараметрыЗапроса.Вставить("Метод", Параметры.МетодИнформация);
	
	Результат = Новый Структура;
	Результат.Вставить("Информация", ПолучитьДанные(ПараметрыЗапроса, АдресРезультата));
	
	ПараметрыЗапроса.Вставить("Метод", Параметры.МетодВариантыЗагрузки);
	Результат.Вставить("ВариантыЗагрузки", ПолучитьДанные(ПараметрыЗапроса, АдресРезультата));
	Результат.Вставить("ВерсияОбработкиНаСервере", 0);
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры
 
#КонецОбласти 
 
#Область СлужебныеПроцедурыИФункции

// Параметры:
//  Ответ - HTTPОтвет
//  ВключатьЗаголовки - Булево
// 
// Возвращаемое значение:
//  Структура:
//   * Заголовки - Массив из Строка
//   * Данные - Произвольный
//   * СообщениеОбОшибке - Строка
//   * Ошибка - Булево
//   * ТелоОтвета - Строка
//   * КодСостояния - Число
Функция РезультатЗапроса(Ответ, ВключатьЗаголовки = Ложь)
	
	СтрокаОтвета = Ответ.ПолучитьТелоКакСтроку();
	
	Результат = ШаблонРезультата();
	
	Если ВключатьЗаголовки Тогда
		Заголовки = Новый Массив;
		Для Каждого Заголовок Из Ответ.Заголовки Цикл
			Заголовки.Добавить(СтрШаблон("%1:%2", Заголовок.Ключ, Заголовок.Значение));
		КонецЦикла; 	
		Результат.Вставить("Заголовки", Заголовки);
	КонецЕсли; 
	
	Результат.КодСостояния = Ответ.КодСостояния;
	Результат.ТелоОтвета = СтрокаОтвета;
	Результат.Ошибка = (Ответ.КодСостояния > 204);
	
	Если Ответ.КодСостояния = 401 Тогда
		Результат.СообщениеОбОшибке = НСтр("ru = 'Ошибка авторизации. Неправильно задан логин или пароль.'"); 
	ИначеЕсли Ответ.КодСостояния = 403 Тогда
		Результат.СообщениеОбОшибке = НСтр("ru = 'Ошибка авторизации. У пользователя нет доступа к программному интерфейсу.'");
	ИначеЕсли Ответ.КодСостояния = 404 Тогда
		Результат.СообщениеОбОшибке = НСтр("ru = 'Не найдено. Адрес сервиса указан неверно или сервис не найден.'");
	ИначеЕсли Ответ.КодСостояния >= 500 Тогда
		Результат.СообщениеОбОшибке = НСтр("ru = 'Внутренняя ошибка. Подробности в журнале регистрации.'");
	КонецЕсли;
	
	Если Результат.Ошибка Тогда
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Переход в облако'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			СтрокаОтвета);
		Если Не ПустаяСтрока(СтрокаОтвета) Тогда
			//@skip-check empty-except-statement - Если не удалось получить данные, не стараемся их возвращать.
			Попытка
				Результат.Данные = РаботаВМоделиСервисаБТС.СтруктураИзСтрокиJSON(СтрокаОтвета);	
				Если Результат.Данные.Свойство("message") Тогда
					Результат.СообщениеОбОшибке = Результат.Данные.message;
				ИначеЕсли Результат.Данные.Свойство("description") Тогда
					Результат.СообщениеОбОшибке = Результат.Данные.description;
				КонецЕсли; 
			Исключение
			КонецПопытки;
		КонецЕсли; 
			
		Возврат Результат;
	ИначеЕсли Не ПустаяСтрока(СтрокаОтвета) Тогда
		Результат.Данные = РаботаВМоделиСервисаБТС.СтруктураИзСтрокиJSON(СтрокаОтвета);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОшибкаВыполненияЗапроса(ИнформацияОбОшибке)
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Переход в облако'"), 
		УровеньЖурналаРегистрации.Ошибка,,,
		ТехнологияСервиса.ПодробныйТекстОшибки(ИнформацияОбОшибке));
		
	Результат = ШаблонРезультата();
	Результат.Ошибка = Истина;
	Результат.СообщениеОбОшибке = ТехнологияСервиса.ПодробныйТекстОшибки(ИнформацияОбОшибке);
	
	Возврат Результат;
	
КонецФункции

Функция ШаблонРезультата()
	
	Результат = Новый Структура;
	Результат.Вставить("КодСостояния", 0);
	Результат.Вставить("ТелоОтвета", "");
	Результат.Вставить("Ошибка", Ложь);
	Результат.Вставить("СообщениеОбОшибке", "");
	Результат.Вставить("Данные", Неопределено);
	
	Возврат Результат;
	
КонецФункции
 
#КонецОбласти 

#КонецЕсли