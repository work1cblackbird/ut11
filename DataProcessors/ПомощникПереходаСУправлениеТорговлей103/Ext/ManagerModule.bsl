
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Формирует список зарегистрированных баз с учетом групп
//
// Параметры:
//  АдресФайлаСоСпискомИБ	- Строка - адрес хранилища в котором размещен файл со списком баз
//  ТолькоФайловыеБазы		- Булево - Истина, если нужно получить только "файловые базы".
//
// Возвращаемое значение:
//   ДеревоЗначений   - список зарегистрированных баз.
//
Функция СформироватьСписокЗарегистрированныхБаз(АдресФайлаСоСпискомИБ, ТолькоФайловыеБазы) Экспорт

	ДанныеФайлаСоСпискомБаз = ПолучитьИзВременногоХранилища(АдресФайлаСоСпискомИБ);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ДанныеФайлаСоСпискомБаз.Записать(ИмяВременногоФайла);
	
	Текст = Новый ТекстовыйДокумент;
	Текст.Прочитать(ИмяВременногоФайла);
	
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Помощник перехода с Управление торговлей.Удаление временных файлов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	СписокИБДерево = Новый ДеревоЗначений;
	СписокИБДерево.Колонки.Добавить("ИнформационнаяБаза", Новый ОписаниеТипов("Строка"));
	СписокИБДерево.Колонки.Добавить("СтрокаСоединения", Новый ОписаниеТипов("Строка"));
	СписокИБДерево.Колонки.Добавить("ID", Новый ОписаниеТипов("Строка"));
	СписокИБДерево.Колонки.Добавить("OrderInTree", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 3)));
	СписокИБДерево.Колонки.Добавить("Folder", Новый ОписаниеТипов("Булево"));
	СписокИБДерево.Колонки.Добавить("НомерКартинки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	СписокИБДерево.Колонки.Добавить("ФайловыйРежим", Новый ОписаниеТипов("Булево"));
	СписокИБДерево.Колонки.Добавить("ИмяСервера", Новый ОписаниеТипов("Строка"));
	СписокИБДерево.Колонки.Добавить("КаталогИБ", Новый ОписаниеТипов("Строка"));
	СписокИБДерево.Колонки.Добавить("ИмяИБ", Новый ОписаниеТипов("Строка"));
	СписокИБДерево.Колонки.Добавить("НаименованиеБазы", Новый ОписаниеТипов("Строка"));
	
	КореньИБ = СписокИБДерево.Строки.Добавить();
	КореньИБ.ИнформационнаяБаза = НСтр("ru = 'Информационные базы'");
	КореньИБ.Folder = Истина;
	КореньИБ.ID = "/";
	КореньИБ.СтрокаСоединения = "0";
	КореньИБ.НомерКартинки = 1;
	
	Folder = "";
	НоваяИБ = Неопределено;
	СтрокаСоединения = "";
	ID = "";
	OrderInTree = 0;
	ИнформационнаяБаза = "";
	
	Для Сч = 1 По Текст.КоличествоСтрок() Цикл
		
		ТекСтр = Текст.ПолучитьСтроку(Сч);
		
		Если Лев(ТекСтр,1) = "[" Тогда
			
			Если ID <> "" Тогда
				РодительИБ = ПолучитьРодителяИБ(Folder, КореньИБ);
				НоваяИБ = Неопределено;
				Если СтрокаСоединения = "" Тогда
					// Группа баз
					ID = Folder + ?(Folder = "/", "", "/") + ИнформационнаяБаза;
					НоваяИБ = РодительИБ.Строки.Найти(ID, "ID");
					Если НоваяИБ = Неопределено Тогда
						НоваяИБ = РодительИБ.Строки.Добавить();
						НоваяИБ.ID = ID;
						НоваяИБ.Folder = Истина;
						НоваяИБ.НомерКартинки = 1;
					КонецЕсли; 
				Иначе
					ПараметрыСоединения = ОбщегоНазначенияКлиентСервер.ПолучитьПараметрыПодключенияИзСтрокиСоединенияИнформационнойБазы(СтрокаСоединения);
					Если НЕ ТолькоФайловыеБазы ИЛИ ПараметрыСоединения.КаталогИнформационнойБазы <> "" Тогда
						НоваяИБ = РодительИБ.Строки.Добавить();
						НоваяИБ.ID = ID;
						НоваяИБ.СтрокаСоединения = СтрокаСоединения;
						ЗаполнитьЗначенияСвойств(НоваяИБ, РазобратьСтрокуСоединения(СтрокаСоединения));
					КонецЕсли; 
				КонецЕсли; 
				
				Если НоваяИБ <> Неопределено Тогда
					НоваяИБ.ИнформационнаяБаза = ИнформационнаяБаза;
					НоваяИБ.OrderInTree = OrderInTree;
				КонецЕсли;
				
				СтрокаСоединения = "";
				ID = "";
			КонецЕсли;
			
			ИнформационнаяБаза = Сред(ТекСтр, 2, СтрДлина(ТекСтр) - 2);
		Иначе
			Поз = СтрНайти(ТекСтр,"=");
			
			СвойствоИБ = СокрП(Лев(ТекСтр, Поз - 1));
			ЗначениеСвойства = Сред(ТекСтр, Поз + 1);
			
			Если СвойствоИБ = "Connect" Тогда
				СтрокаСоединения = Лев(ЗначениеСвойства,СтрДлина(ЗначениеСвойства)-1);
			ИначеЕсли СвойствоИБ = "Folder" Тогда
				Folder = ЗначениеСвойства;
			ИначеЕсли СвойствоИБ = "ID" Тогда
				ID = ЗначениеСвойства;
			ИначеЕсли СвойствоИБ = "OrderInTree" Тогда
				OrderInTree = Число(ЗначениеСвойства);
			КонецЕсли;			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ID <> "" Тогда
		РодительИБ = ПолучитьРодителяИБ(Folder, КореньИБ);
		НоваяИБ = Неопределено;
		Если СтрокаСоединения = "" Тогда
			// Группа баз
			ID = Folder + ?(Folder = "/", "", "/") + ИнформационнаяБаза;
			НоваяИБ = РодительИБ.Строки.Найти(ID, "ID");
			Если НоваяИБ = Неопределено Тогда
				НоваяИБ = РодительИБ.Строки.Добавить();
				НоваяИБ.ID = ID;
				НоваяИБ.Folder = Истина;
				НоваяИБ.НомерКартинки = 1;
			КонецЕсли; 
		Иначе
			ПараметрыСоединения = ОбщегоНазначенияКлиентСервер.ПолучитьПараметрыПодключенияИзСтрокиСоединенияИнформационнойБазы(СтрокаСоединения);
			Если НЕ ТолькоФайловыеБазы ИЛИ ПараметрыСоединения.КаталогИнформационнойБазы <> "" Тогда
				НоваяИБ = РодительИБ.Строки.Добавить();
				НоваяИБ.ID = ID;
				НоваяИБ.СтрокаСоединения = СтрокаСоединения;
				ЗаполнитьЗначенияСвойств(НоваяИБ, РазобратьСтрокуСоединения(СтрокаСоединения));
			КонецЕсли; 
		КонецЕсли; 
		
		Если НоваяИБ <> Неопределено Тогда
			НоваяИБ.ИнформационнаяБаза = ИнформационнаяБаза;
			НоваяИБ.OrderInTree = OrderInTree;
		КонецЕсли; 
		
		СтрокаСоединения = "";
		ID = "";
	КонецЕсли;
	
	УдалитьПустыеГруппыБаз(КореньИБ.Строки);
	
	СписокИБДерево.Строки.Сортировать("OrderInTree", Истина);
	
	Возврат СписокИБДерево;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьРодителяИБ(IDРодителя, КореньИБ)
	
	Если IDРодителя = "/" Тогда
		Возврат КореньИБ;
	КонецЕсли;
	
	РодительИБ = КореньИБ.Строки.Найти(IDРодителя, "ID", Истина);
	
	Если РодительИБ = Неопределено Тогда 
		
		IDРодителяНовый = Сред(IDРодителя,2);
		
		МассивРодителей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(IDРодителяНовый, "/");
		
		IDРодителяНовый = "";
		РодительИБ = КореньИБ;
		
		Для Каждого ЭлРодитель Из МассивРодителей Цикл
			
			IDРодителяНовый = IDРодителяНовый + "/" + ЭлРодитель;
			
			РодительСтрока = РодительИБ.Строки.Найти(IDРодителяНовый, "ID", Ложь);
			
			Если РодительСтрока = Неопределено Тогда 
				РодительСтрока = РодительИБ.Строки.Добавить();
				РодительСтрока.ID = IDРодителяНовый;
				РодительСтрока.Folder = Истина;
				РодительСтрока.ИнформационнаяБаза = ЭлРодитель;
				РодительСтрока.НомерКартинки = 1;
			КонецЕсли;
			
			РодительИБ = РодительСтрока;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат РодительИБ;
	
КонецФункции

Функция РазобратьСтрокуСоединения(СтрокаСоединения)

	Результат = Новый Структура;
	
	ПараметрыСоединения = ОбщегоНазначенияКлиентСервер.ПолучитьПараметрыПодключенияИзСтрокиСоединенияИнформационнойБазы(СтрокаСоединения);
	
	Если ПараметрыСоединения.КаталогИнформационнойБазы <> "" Тогда
		
		ФайловыйРежим = Истина;
		
		КаталогИБ = ПараметрыСоединения.КаталогИнформационнойБазы;
		Если ЗначениеЗаполнено(КаталогИБ) Тогда
			КаталогИБ = КаталогИБ + ?(Прав(КаталогИБ, 1) = "\", "", "\");
		КонецЕсли; 
	Иначе
		
		ФайловыйРежим = Ложь;
		
		ИмяСервера = ПараметрыСоединения.ИмяСервера1СПредприятия;
		ИмяИБ = ПараметрыСоединения.ИмяИнформационнойБазыНаСервере1СПредприятия;
		
	КонецЕсли;
	
	Результат.Вставить("ФайловыйРежим", ФайловыйРежим);
	Результат.Вставить("ИмяСервера", ИмяСервера);
	Результат.Вставить("КаталогИБ", КаталогИБ);
	Результат.Вставить("ИмяИБ", ИмяИБ);
	
	Возврат Результат;
	
КонецФункции

Процедура УдалитьПустыеГруппыБаз(КоллекцияСтрок)

	СтрокиКУдалению = Новый Массив;
	
	Для каждого ДанныеСтроки Из КоллекцияСтрок Цикл
		Если НЕ ДанныеСтроки.Folder Тогда
			Продолжить;
		КонецЕсли; 
		
		СтруктураПоиска = Новый Структура("Folder", Ложь);
  		СписокСтрок = ДанныеСтроки.Строки.НайтиСтроки(СтруктураПоиска, Истина);
		Если СписокСтрок.Количество() <> 0 Тогда
			УдалитьПустыеГруппыБаз(ДанныеСтроки.Строки);
		Иначе
			СтрокиКУдалению.Добавить(ДанныеСтроки);
		КонецЕсли; 
	КонецЦикла; 

	Для каждого ДанныеСтроки Из СтрокиКУдалению Цикл
		КоллекцияСтрок.Удалить(ДанныеСтроки);
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли