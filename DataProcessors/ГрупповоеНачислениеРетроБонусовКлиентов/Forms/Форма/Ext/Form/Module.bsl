//@strict-types

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ Параметры.Основание.Пустая() Тогда
		
		ДокументУРБ = Параметры.Основание;
		ДанныеУРБ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументУРБ, "Исправление, ИсправляемыйДокумент");
		
		Если ДанныеУРБ.Исправление Тогда
			Объект.ДокументУсловий = ДанныеУРБ.ИсправляемыйДокумент;
		Иначе
			Объект.ДокументУсловий = ДокументУРБ;
		КонецЕсли;
		
		ЗаполнитьРеквизитыПоУсловию();
		
		ТекущаяДатаНачала = Объект.НачалоПериода;
		ТекущаяДатаОкончания = Объект.ОкончаниеПериода;
		ТекущаяВалюта = Объект.Валюта;
		
	КонецЕсли;
	
	ЗаполнитьДанныеПоследнейКорректировки();
	УстановитьЗаголовокДекорацииФиксацииСегментов();
	ОбновитьФлагВозможностиИзмененияУРБ();
	НастроитьВидимостьДоступностьФормы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДокументУсловийПриИзменении(Элемент)
	
	ДокументУсловийПриИзмененииСервер();
	ТекущаяДатаНачала = Объект.НачалоПериода;
	ТекущаяДатаОкончания = Объект.ОкончаниеПериода;
	ТекущаяВалюта = Объект.Валюта;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументУсловийОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Объект.ДокументУсловий = ПредопределенноеЗначение("Документ.УсловияРетроБонусовКлиентов.ПустаяСсылка");
	ОчиститьРеквизитыПоУсловию(ЭтотОбъект);
	НастроитьВидимостьДоступностьФормы();
	
	ТекущаяДатаНачала = Объект.НачалоПериода;
	ТекущаяДатаОкончания = Объект.ОкончаниеПериода;
	ТекущаяВалюта = Объект.Валюта;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура НачалоПериодаПриИзменении(Элемент)
	
	Отказ = Ложь;
	Если Объект.НачалоПериода <> ТекущаяДатаНачала
	   И Объект.ДокументыНачисления.Количество() > 0 Тогда
		
		ПродолжитьОперацию = Ждать ПродолжитьОперациюСОчисткойДокументовНачисления();
		Если НЕ ПродолжитьОперацию Тогда
			
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Отказ Тогда
		
		Объект.НачалоПериода = ТекущаяДатаНачала;
		
	Иначе
		
		Объект.ДокументыНачисления.Очистить();
		РассчитатьИтоговыеПоказатели(ЭтотОбъект);
		ТекущаяДатаНачала = Объект.НачалоПериода;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ОкончаниеПериодаПриИзменении(Элемент)
	
	Отказ = Ложь;
	Если Объект.ОкончаниеПериода <> ТекущаяДатаОкончания
	   И Объект.ДокументыНачисления.Количество() > 0 Тогда
		
		ПродолжитьОперацию = Ждать ПродолжитьОперациюСОчисткойДокументовНачисления();
		Если НЕ ПродолжитьОперацию Тогда
			
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Отказ Тогда
		
		Объект.ОкончаниеПериода = ТекущаяДатаОкончания;
		
	Иначе
		
		Объект.ДокументыНачисления.Очистить();
		РассчитатьИтоговыеПоказатели(ЭтотОбъект);
		ТекущаяДатаОкончания = Объект.ОкончаниеПериода;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ВалютаПриИзменении(Элемент)
	
	Отказ = Ложь;
	Если Объект.Валюта <> ТекущаяВалюта
	   И Объект.ДокументыНачисления.Количество() > 0 Тогда
		
		ПродолжитьОперацию = Ждать ПродолжитьОперациюСОчисткойДокументовНачисления();
		Если НЕ ПродолжитьОперацию Тогда
			
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Отказ Тогда
		
		Объект.Валюта = ТекущаяВалюта;
		
	Иначе
		
		Объект.ДокументыНачисления.Очистить();
		РассчитатьИтоговыеПоказатели(ЭтотОбъект);
		ТекущаяВалюта = Объект.Валюта;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗафиксироватьСегментыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбрабатываемаяСсылка = "Зафиксировать";
	
	Если НавигационнаяСсылкаФорматированнойСтроки = ОбрабатываемаяСсылка Тогда
		ЗафиксироватьСоставСегментов();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыНачисления

&НаКлиенте
Процедура ДокументыНачисленияКонтрагентПриИзменении(Элемент)
	
	ЗаполнитьДанныеДокументаНачисленийВСтроке();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыНачисленияПартнерПриИзменении(Элемент)
	
	ЗаполнитьДанныеДокументаНачисленийВСтроке();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыНачисленияСуммаКНачислениюПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДокументыНачисления.ТекущиеДанные;
	
	Если ТекущиеДанные.СуммаКНачислению <> 0 Тогда
		
		ТекущиеДанные.Пометка = Истина;
		
	ИначеЕсли ТекущиеДанные.Пометка Тогда
		
		ТекущиеДанные.Пометка = Ложь;
		
	КонецЕсли;
	
	РассчитатьИтоговыеПоказатели(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыНачисленияПослеУдаления(Элемент)
	
	РассчитатьИтоговыеПоказатели(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыНачисленияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДокументыНачисления.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено
	   И НЕ ЗначениеЗаполнено(ТекущиеДанные.ДокументНачисления) Тогда
		ТекущиеДанные.ИндексКартинки = -1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыНачисленияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элементы.ДокументыНачисления.ТекущийЭлемент = Элементы.ДокументыНачисленияДокументНачисления Тогда
		
		СтандартнаяОбработка = Ложь;
		ДанныеСтроки = Элементы.ДокументыНачисления.ТекущиеДанные;
		
		Если ДанныеСтроки <> Неопределено
		   И НЕ ДанныеСтроки.ДокументНачисления.Пустая() Тогда
			
			ОткрытьЗначениеАсинх(ДанныеСтроки.ДокументНачисления);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьИнтервал(Команда)
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("УстановитьИнтервалЗавершение", ЭтотОбъект);
	ПараметрыПериода = Новый Структура("ДатаНачала, ДатаОкончания", "НачалоПериода", "ОкончаниеПериода");
	
	ОбщегоНазначенияУТКлиент.РедактироватьПериод(Объект, ПараметрыПериода, ОповещениеОЗавершении);
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьВсе(Команда)
	
	ЗаполнитьПометкуВСтроках(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометки(Команда)
	
	ЗаполнитьПометкуВСтроках(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДокументы(Команда)
	
	ОчиститьСообщения();
	
	Отказ = Ложь;
	
	ПроверкаЗаполненияПройдена = ПроверитьЗаполнение();
	Если НЕ ПроверкаЗаполненияПройдена Тогда
		Отказ = Истина;
	Иначе
		
		ПроверитьПометки(Отказ);
		ПроверитьФиксациюСоставаСегментов(Отказ);
		
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		ПроверитьДублиУчастников(Отказ);
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		АдресДанныхДляФормирования = ДанныеДокументовКФормированию();
		ПараметрыРасчета = ПараметрыРасчетаРетроБонусов();
		ПараметрыФормирования = ПараметрыФормированияДокументов();
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("СформироватьДокументыЗавершение", ЭтотОбъект);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			Элементы.ФормаСформироватьДокументы.Имя,
			"Доступность",
			Ложь);
		
		РетроБонусыКлиент.СформироватьДокументыНачисления(
			АдресДанныхДляФормирования,
			ПараметрыРасчета,
			ПараметрыФормирования,
			ЭтотОбъект,
			ОповещениеОЗавершении);
			
	КонецЕсли;
	
	НастроитьВидимостьДоступностьФормы();
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗаполнитьПоУсловиям(Команда)
	
	ОчиститьСообщения();
	
	Отказ = Ложь;
	ПроверитьЗаполнениеШапки(Отказ);
	ПроверитьПериодыПоПериодичности(Отказ);
	
	Если НЕ Отказ Тогда
		
		ПроверитьФиксациюСоставаСегментов(Отказ);
		
	КонецЕсли;
	
	Если НЕ Отказ
	   И Объект.ДокументыНачисления.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru = 'Табличная часть будет очищена.
								  |Продолжить?'");
		Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет); // КодВозвратаДиалога
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		ПараметрыРасчета = ПараметрыРасчетаРетроБонусов();
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗаполнитьНачисленияПоУсловиямЗавершение", ЭтотОбъект);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			Элементы.ДокументыНачисленияЗаполнитьПоУсловиям.Имя,
			"Доступность",
			Ложь);
		
		РетроБонусыКлиент.РетроБонусыЗаПериодПоДокументамПродажи(
			ПараметрыРасчета,
			ЭтотОбъект,
			ОповещениеОЗавершении);
		
	КонецЕсли;
	
	НастроитьВидимостьДоступностьФормы();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьРеквизитыПоУсловию()
	
	Если ЗначениеЗаполнено(Объект.ДокументУсловий) Тогда
		
		Объект.ДокументыНачисления.Очистить();
		
		РеквизитыУсловий = Документы.УсловияРетроБонусовКлиентов.АктуальныеДанные(Объект.ДокументУсловий);
		
		Объект.Организация = РеквизитыУсловий.Организация;
		Объект.НачалоПериода = РеквизитыУсловий.НачалоДействия;
		Объект.ОкончаниеПериода = РеквизитыУсловий.ОкончаниеДействия;
		Объект.Валюта = РеквизитыУсловий.Валюта;
		
		Если НЕ ЗначениеЗаполнено(Объект.Валюта)
		   И РеквизитыУсловий.БазаРасчетаПродаж = Перечисления.БазыРасчетаПродажРетроБонусов.ВыручкаВзаиморасчеты
		   И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют") Тогда
			
			Объект.Валюта = Справочники.Валюты.ПолучитьВалютуПоУмолчанию();
			
		КонецЕсли;
		
		БезРасчета = РеквизитыУсловий.БезРасчета;
		ПериодичностьНачислений = РеквизитыУсловий.ПериодичностьНачислений;
		ДетализацияРасчетаУчастников = РеквизитыУсловий.ДетализацияРасчетаУчастников;
		БазаРасчетаПродаж = РеквизитыУсловий.БазаРасчетаПродаж;
		ТекущаяДатаНачала = РеквизитыУсловий.НачалоДействия;
		ТекущаяДатаОкончания = РеквизитыУсловий.ОкончаниеДействия;
		ДатаНачалаУсловия = РеквизитыУсловий.НачалоДействия;
		ДатаОкончанияУсловия = РеквизитыУсловий.ОкончаниеДействия;
		ТекущаяВалюта = РеквизитыУсловий.Валюта;
		УчитыватьНДС = РеквизитыУсловий.УчитыватьНДС;
		
		ИспользуютсяСегментыТоваров =
			(РеквизитыУсловий.СоставТоваров = Перечисления.СоставыТоваровРетроБонусов.СегментыНоменклатуры);
		ИспользуютсяСегментыПартнеров =
			(РеквизитыУсловий.СоставУчастников = Перечисления.СоставыУчастниковРетроБонусов.СегментыПартнеров);
		ИспользуютсяСегменты = (ИспользуютсяСегментыТоваров ИЛИ ИспользуютсяСегментыПартнеров);
		СоставСегментовЗафиксирован = РеквизитыУсловий.СегментыЗафиксированы;
		
		ОбновитьФлагВозможностиИзмененияУРБ();
		
	Иначе
		
		ОчиститьРеквизитыПоУсловию(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьДоступностьФормы()
	
	Детализация = Перечисления.ДетализацияРасчетаУчастниковРетроБонусов;
	
	ИменаЭлементовВидимостьВсе = Новый Массив; // Массив из Строка
	ИменаЭлементовВидимостьВсе.Добавить(Элементы.ДокументыНачисленияКонтрагент.Имя);
	ИменаЭлементовВидимостьВсе.Добавить(Элементы.ДокументыНачисленияПартнер.Имя);
	ИменаЭлементовВидимостьВсе.Добавить(Элементы.НачалоПериода.Имя);
	ИменаЭлементовВидимостьВсе.Добавить(Элементы.ОкончаниеПериода.Имя);
	ИменаЭлементовВидимостьВсе.Добавить(Элементы.УстановитьИнтервал.Имя);
	ИменаЭлементовВидимостьВсе.Добавить(Элементы.ДекорацияЗафиксироватьСегменты.Имя);
	ИменаЭлементовВидимостьВсе.Добавить(Элементы.ДокументыНачисленияЗаполнитьПоУсловиям.Имя);
	
	ИменаЭлементовТолькоПросмотрВсе = Новый Массив; // Массив из Строка
	ИменаЭлементовТолькоПросмотрВсе.Добавить(Элементы.НачалоПериода.Имя);
	ИменаЭлементовТолькоПросмотрВсе.Добавить(Элементы.ОкончаниеПериода.Имя);
	ИменаЭлементовТолькоПросмотрВсе.Добавить(Элементы.Валюта.Имя);
	
	ИменаЭлементовВидимых = Новый Массив; // Массив из Строка
	Если НЕ Объект.ДокументУсловий.Пустая() Тогда
		
		ИменаЭлементовВидимых.Добавить(Элементы.НачалоПериода.Имя);
		ИменаЭлементовВидимых.Добавить(Элементы.ОкончаниеПериода.Имя);
		
		Если ПериодичностьНачислений <> Перечисления.ПериодичностиРетроБонусов.Однократно Тогда
			ИменаЭлементовВидимых.Добавить(Элементы.УстановитьИнтервал.Имя);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДетализацияРасчетаУчастников = Детализация.ПоКонтрагенту Тогда
		
		ИменаЭлементовВидимых.Добавить(Элементы.ДокументыНачисленияКонтрагент.Имя);
		
	ИначеЕсли ДетализацияРасчетаУчастников = Детализация.ПоКлиенту Тогда
		
		ИменаЭлементовВидимых.Добавить(Элементы.ДокументыНачисленияПартнер.Имя);
		
	ИначеЕсли ДетализацияРасчетаУчастников = Детализация.ПоКонтрагентуКлиенту Тогда
		
		ИменаЭлементовВидимых.Добавить(Элементы.ДокументыНачисленияКонтрагент.Имя);
		ИменаЭлементовВидимых.Добавить(Элементы.ДокументыНачисленияПартнер.Имя);
		
	КонецЕсли;
	
	Если ИспользуютсяСегменты 
	   И НЕ СоставСегментовЗафиксирован Тогда
		
		ИменаЭлементовВидимых.Добавить(Элементы.ДекорацияЗафиксироватьСегменты.Имя);
		
	КонецЕсли;
	
	Если НЕ БезРасчета Тогда
		
		ИменаЭлементовВидимых.Добавить(Элементы.ДокументыНачисленияЗаполнитьПоУсловиям.Имя);
		
	КонецЕсли;
	
	ИменаЭлементовТолькоПросмотр = Новый Массив; // Массив из Строка
	Если ПериодичностьНачислений = Перечисления.ПериодичностиРетроБонусов.Однократно Тогда
		
		ИменаЭлементовТолькоПросмотр.Добавить(Элементы.НачалоПериода.Имя);
		ИменаЭлементовТолькоПросмотр.Добавить(Элементы.ОкончаниеПериода.Имя);
		
	КонецЕсли;
	
	Если БазаРасчетаПродаж <> Перечисления.БазыРасчетаПродажРетроБонусов.ВыручкаВзаиморасчеты
	 ИЛИ БезРасчета Тогда
		
		ИменаЭлементовТолькоПросмотр.Добавить(Элементы.Валюта.Имя);
		
	КонецЕсли;
	
	Элементы.ДекорацияЗафиксироватьСегменты.Доступность = ЕстьПравоИзмененияУРБ;
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьВидимостьЭлементовПоМассиву(
		Элементы, ИменаЭлементовВидимостьВсе, ИменаЭлементовВидимых);
	
	РетроБонусыКлиентСервер.УстановитьТолькоПросмотрЭлементовПоМассиву(
		Элементы, ИменаЭлементовТолькоПросмотрВсе, ИменаЭлементовТолькоПросмотр);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьРеквизитыПоУсловию(Форма)
	
	ПустаяДата = Дата(1, 1, 1);
	
	Объект = Форма.Объект;
	Объект.ДокументыНачисления.Очистить();
	
	Объект.НачалоПериода = ПустаяДата;
	Форма.ТекущаяДатаНачала = ПустаяДата;
	Форма.ДатаНачалаУсловия = ПустаяДата;
	Объект.ОкончаниеПериода = ПустаяДата;
	Форма.ТекущаяДатаОкончания = ПустаяДата;
	Форма.ДатаОкончанияУсловия = ПустаяДата;
	Объект.Валюта = ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка");
	Форма.ТекущаяВалюта = ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка");
	
	Форма.БезРасчета = Ложь;
	Форма.ДетализацияРасчетаУчастников = ПредопределенноеЗначение("Перечисление.ДетализацияРасчетаУчастниковРетроБонусов.ПустаяСсылка");
	Форма.ПериодичностьНачислений = ПредопределенноеЗначение("Перечисление.ПериодичностиРетроБонусов.ПустаяСсылка");
	Форма.БазаРасчетаПродаж = ПредопределенноеЗначение("Перечисление.БазыРасчетаПродажРетроБонусов.ПустаяСсылка");
	Форма.ИспользуютсяСегменты = Ложь;
	Форма.СоставСегментовЗафиксирован = Ложь;
	Форма.ЕстьПравоИзмененияУРБ = Ложь;
	Форма.УчитыватьНДС = Ложь;
	
	РассчитатьИтоговыеПоказатели(Форма);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	ОрганизацияУказана = НЕ Объект.Организация.Пустая();
	
	Если ОрганизацияУказана Тогда
		
		Если НЕ Объект.ДокументУсловий.Пустая() Тогда
			
			ОрганизацияДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументУсловий, "Организация");
			Если ОрганизацияДокумента <> Объект.Организация Тогда
				
				Объект.ДокументУсловий = Документы.УсловияРетроБонусовКлиентов.ПустаяСсылка();
				ОчиститьРеквизитыПоУсловию(ЭтотОбъект);
				НастроитьВидимостьДоступностьФормы();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьСвязиПараметровВыбораДокументаУсловий();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвязиПараметровВыбораДокументаУсловий()
	
	СвязиПараметровВыбора = Новый Массив(); // Массив из СвязьПараметраВыбора
	
	Если НЕ Объект.Организация.Пустая() Тогда
		
		НоваяСвязь = Новый СвязьПараметраВыбора(
			"Отбор.Организация",
			"Объект.Организация",
			РежимИзмененияСвязанногоЗначения.НеИзменять);
		
		СвязиПараметровВыбора.Добавить(НоваяСвязь);
		
	КонецЕсли;
	
	Элементы.ДокументУсловий.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПометкуВСтроках(Пометка)
	
	Для Каждого СтрокаДокумента Из Объект.ДокументыНачисления Цикл
		
		СтрокаДокумента.Пометка = Пометка;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеДокументаНачисленийВСтроке()
	
	ТекущиеДанные = Элементы.ДокументыНачисления.ТекущиеДанные;
	ДанныеСтроки = СтруктураДанныхСтрокиНачисления(ТекущиеДанные);
	
	ЗаполнитьДанныеДокументаНачисленияВДанныхСтроки(ДанныеСтроки);
	
	ТекущиеДанные.ДокументНачисления = ДанныеСтроки.ДокументНачисления;
	ТекущиеДанные.СуммаНачисленная = ДанныеСтроки.СуммаНачисленная;
	Если ЗначениеЗаполнено(ТекущиеДанные.ДокументНачисления) Тогда
		ТекущиеДанные.ИндексКартинки = 1;
	Иначе
		ТекущиеДанные.ИндексКартинки = 0;
	КонецЕсли;
	
	РассчитатьИтоговыеПоказатели(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеДокументаНачисленияВДанныхСтроки(ДанныеСтроки)
	
	ДанныеСтроки.ДокументНачисления = Документы.НачислениеРетроБонусовКлиента.ПустаяСсылка();
	ДанныеСтроки.СуммаНачисленная = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПолученияДокументовНачисления();
	Запрос.УстановитьПараметр("ДокументУсловий", Объект.ДокументУсловий);
	Запрос.УстановитьПараметр("Контрагент", ДанныеСтроки.Контрагент);
	Запрос.УстановитьПараметр("Партнер", ДанныеСтроки.Партнер);
	Запрос.УстановитьПараметр("Валюта", Объект.Валюта);
	Запрос.УстановитьПараметр("НачалоПериода", Объект.НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", Объект.ОкончаниеПериода);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, Выборка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТекстЗапросаПолученияДокументовНачисления()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(РетроБонусыКлиентовОбороты.Регистратор КАК Документ.НачислениеРетроБонусовКлиента) КАК ДокументНачисления,
	|	РетроБонусыКлиентовОбороты.СуммаБонусОборот КАК СуммаНачисленная
	|ИЗ
	|	РегистрНакопления.РетроБонусыКлиентов.Обороты(,, Регистратор,
	|		ДокументУсловий = &ДокументУсловий
	|		И &УсловиеКонтрагентПартнер
	|		И Валюта = &Валюта
	|		И НачалоПериода = &НачалоПериода
	|		И ОкончаниеПериода = &ОкончаниеПериода) КАК РетроБонусыКлиентовОбороты
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(РетроБонусыКлиентовОбороты.Регистратор) = ТИП(Документ.НачислениеРетроБонусовКлиента)";
	
	Если ДетализацияРасчетаУчастников = Перечисления.ДетализацияРасчетаУчастниковРетроБонусов.ПоКлиенту Тогда
		
		ТекстУсловия = "Партнер = &Партнер";
		
	ИначеЕсли ДетализацияРасчетаУчастников = Перечисления.ДетализацияРасчетаУчастниковРетроБонусов.ПоКонтрагенту Тогда
		
		ТекстУсловия = "Контрагент = &Контрагент";
		
	ИначеЕсли ДетализацияРасчетаУчастников = Перечисления.ДетализацияРасчетаУчастниковРетроБонусов.ПоКонтрагентуКлиенту Тогда
		
		ТекстУсловия = "Контрагент = &Контрагент
					   |И Партнер = &Партнер";
		
	Иначе
		
		ТекстУсловия = "ИСТИНА";
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеКонтрагентПартнер", ТекстУсловия);
	Возврат ТекстЗапроса;
	
КонецФункции

// Параметры:
//  ДанныеСтроки - ДанныеФормыЭлементКоллекции:
//  * Контрагент - СправочникСсылка.Контрагенты
//  * Партнер - СправочникСсылка.Партнеры
//  * ДокументНачисления - ДокументСсылка.НачислениеРетроБонусовКлиента
//  * СуммаНачисленная - Число
// 
// Возвращаемое значение:
//  Структура - Структура данных строки начисления:
//  * Контрагент - СправочникСсылка.Контрагенты
//  * Партнер - СправочникСсылка.Партнеры
//  * ДокументНачисления - ДокументСсылка.НачислениеРетроБонусовКлиента
//  * СуммаНачисленная - Число
//
&НаКлиенте
Функция СтруктураДанныхСтрокиНачисления(ДанныеСтроки)
	
	Результат = Новый Структура;
	Результат.Вставить(
		"Контрагент",
		ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"));
	Результат.Вставить(
		"Партнер",
		ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка"));
	Результат.Вставить(
		"ДокументНачисления",
		ПредопределенноеЗначение("Документ.НачислениеРетроБонусовКлиента.ПустаяСсылка"));
	Результат.Вставить(
		"СуммаНачисленная",
		0);
	
	ЗаполнитьЗначенияСвойств(Результат, ДанныеСтроки);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОбновитьФлагВозможностиИзмененияУРБ()
	
	Если ЗначениеЗаполнено(Объект.ДокументУсловий) Тогда
		ЕстьПравоИзмененияУРБ = УправлениеДоступом.ИзменениеРазрешено(Объект.ДокументУсловий);
	Иначе
		ЕстьПравоИзмененияУРБ = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачисленияПоУсловиямСервер(АдресРезультата)
	
	Объект.ДокументыНачисления.Очистить();
	
	ТаблицаДокументов = ТаблицаДокументовНачисленияПоДаннымСистемы(АдресРезультата);
	
	Для Каждого ДанныеСистемы Из ТаблицаДокументов Цикл
		
		НоваяСтрока = Объект.ДокументыНачисления.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСистемы);
		Если НЕ ЗначениеЗаполнено(ДанныеСистемы.ДокументНачисления) Тогда
			
			НоваяСтрока.ИндексКартинки = -1;
			
		ИначеЕсли ДанныеСистемы.Проведен Тогда
			
			НоваяСтрока.ИндексКартинки = 1;
			
		Иначе
			
			НоваяСтрока.ИндексКартинки = 0;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ТаблицаДокументовНачисленияПоДаннымСистемы(АдресРезультата)
	
	ПараметрыЗаполнения = Обработки.ГрупповоеНачислениеРетроБонусовКлиентов.ПараметрыЗаполненияТаблицыНачислений();
	ПараметрыЗаполнения.ТаблицаБонусов = РетроБонусыПоДокументамПродажи(АдресРезультата);
	ПараметрыЗаполнения.ДокументУсловий = Объект.ДокументУсловий;
	ПараметрыЗаполнения.Валюта = Объект.Валюта;
	ПараметрыЗаполнения.НачалоПериода = Объект.НачалоПериода;
	ПараметрыЗаполнения.ОкончаниеПериода = Объект.ОкончаниеПериода;
	ПараметрыЗаполнения.ДетализацияРасчетаУчастников = ДетализацияРасчетаУчастников;
	
	ТаблицаДокументов = Обработки.ГрупповоеНачислениеРетроБонусовКлиентов.ТаблицаДокументовНачисленияПоДаннымСистемы(ПараметрыЗаполнения);
	
	Возврат ТаблицаДокументов;
	
КонецФункции

&НаСервере
Функция ПараметрыРасчетаРетроБонусов()
	
	ПараметрыРасчета = Отчеты.РасчетРетроБонусовКлиентов.ПараметрыРасчетаРетроБонусов();
	ПараметрыРасчета.ДокументУсловий = Объект.ДокументУсловий;
	ПараметрыРасчета.Организация = Объект.Организация;
	ПараметрыРасчета.ДатаНачала = Объект.НачалоПериода;
	ПараметрыРасчета.ДатаОкончания = Объект.ОкончаниеПериода;
	ПараметрыРасчета.Валюта = Объект.Валюта;
	Если ЗначениеЗаполнено(Объект.ДатаСозданияДокументов) Тогда
		ПараметрыРасчета.ДатаСозданияДокументов = Объект.ДатаСозданияДокументов;
	Иначе
		ПараметрыРасчета.ДатаСозданияДокументов = ТекущаяДатаСеанса();
	КонецЕсли;
	Возврат ПараметрыРасчета;
	
КонецФункции

&НаСервере
Функция ПараметрыФормированияДокументов()
	
	ПараметрыФормирования = Обработки.ГрупповоеНачислениеРетроБонусовКлиентов.ПараметрыФормированияДокументов();
	ПараметрыФормирования.ДетализацияРасчетаУчастников = ДетализацияРасчетаУчастников;
	ПараметрыФормирования.БезРасчета = БезРасчета;
	ПараметрыФормирования.ПроводитьБезКонтроляОстатковРетроБонусов =
		ПараметрыСеанса.ПроводитьБезКонтроляОстатковРетроБонусов;
	
	Если БазаРасчетаПродаж = Перечисления.БазыРасчетаПродажРетроБонусов.ВыручкаВзаиморасчеты
	 ИЛИ БазаРасчетаПродаж = Перечисления.БазыРасчетаПродажРетроБонусов.ВыручкаРеглУчет
	 ИЛИ БазаРасчетаПродаж = Перечисления.БазыРасчетаПродажРетроБонусов.ВыручкаУпрУчет Тогда
		
		Если УчитыватьНДС Тогда
			
			ПараметрыФормирования.ИмяКолонкиВыручка = "СуммаВыручки";
			
		Иначе
			
			ПараметрыФормирования.ИмяКолонкиВыручка = "СуммаВыручкиБезНДС";
			
		КонецЕсли;
		
	ИначеЕсли БазаРасчетаПродаж = Перечисления.БазыРасчетаПродажРетроБонусов.ВыручкаБазовыеЦены Тогда
		
		ПараметрыФормирования.ИмяКолонкиВыручка = "СуммаВБазовыхЦенах";
		
	ИначеЕсли НЕ БезРасчета
	        И НЕ БазаРасчетаПродаж.Пустая() Тогда
		
		ШаблонИсключения = НСтр("ru = 'Для базы расчета ""%1"" не определены правила заполнения суммы выручки'");
		ПредставлениеБазы = ОбщегоНазначения.ПредставленияСсылок(БазаРасчетаПродаж);
		
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонИсключения,
			ПредставлениеБазы[БазаРасчетаПродаж]);
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	Возврат ПараметрыФормирования;
	
КонецФункции

// Параметры:
//  АдресРезультата - Строка
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * Валюта - СправочникСсылка.Валюты
//  * ДокументПродажи - ДокументСсылка.РеализацияТоваровУслуг, ДокументСсылка.КорректировкаРеализации, ДокументСсылка.АктВыполненныхРабот, ДокументСсылка.ВозвратТоваровОтКлиента -
//  * Контрагент - СправочникСсылка.Контрагенты
//  * Организация - СправочникСсылка.Организации
//  * Партнер - СправочникСсылка.Партнеры
//  * РасчетнаяБаза - Число
//  * СуммаБонус - Число
//  * СуммаВБазовыхЦенах - Число
//  * СуммаВыручки - Число
//  * СуммаВыручкиБезНДС - Число
//
&НаСервереБезКонтекста
Функция РетроБонусыПоДокументамПродажи(АдресРезультата)
	
	ТаблицаБонусов = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Возврат ТаблицаБонусов;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьЗаполнениеШапки(Отказ)
	
	СписокПроверяемыхРеквизитов = Новый Массив; // Массив из Строка
	СписокПроверяемыхРеквизитов.Добавить("ДокументУсловий");
	СписокПроверяемыхРеквизитов.Добавить("НачалоПериода");
	СписокПроверяемыхРеквизитов.Добавить("ОкончаниеПериода");
	СписокПроверяемыхРеквизитов.Добавить("Валюта");
	
	Для Каждого ИмяРеквизита Из СписокПроверяемыхРеквизитов Цикл
		
		Если НЕ ЗначениеЗаполнено(Объект[ИмяРеквизита]) Тогда
			
			ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, ИмяРеквизита);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,, ИмяРеквизита, "Объект", Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьФиксациюСоставаСегментов(Отказ)
	
	ОбновитьДанныеОФиксацииСегментов();
	НужноЗафиксироватьСоставСегментов = (ИспользуютсяСегменты И НЕ СоставСегментовЗафиксирован);
	
	Если НЕ ДокументУсловийСогласован Тогда
		
		ТекстСообщения = НСтр("ru = 'Документ условий не согласован'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ДокументУсловий", "Объект", Отказ);
		
	ИначеЕсли НужноЗафиксироватьСоставСегментов Тогда
		
		ТекстСообщения = НСтр("ru = 'Не зафиксирован состав сегментов документа условий'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ДокументУсловий", "Объект", Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Результат - см. ДлительныеОперацииКлиент.НовыйРезультатДлительнойОперации
//  ДополнительныеПараметры - Неопределено
//
&НаКлиенте
Процедура ЗаполнитьНачисленияПоУсловиямЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Если Результат.Статус = "Ошибка" Тогда
			
			СтандартныеПодсистемыКлиент.ВывестиИнформациюОбОшибке(Результат.ИнформацияОбОшибке);
			
		Иначе
			
			ЗаполнитьНачисленияПоУсловиямСервер(Результат.АдресРезультата);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		Элементы.ДокументыНачисленияЗаполнитьПоУсловиям.Имя,
		"Доступность",
		Истина);
	
	РассчитатьИтоговыеПоказатели(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтоговыеПоказатели(Форма);
	
	КоллекцияНачислений = Форма.Объект.ДокументыНачисления;
	
	Форма.ИтогоСуммаРасчетная = КоллекцияНачислений.Итог("СуммаРасчетная");
	Форма.ИтогоСуммаНачисленная = КоллекцияНачислений.Итог("СуммаНачисленная");
	Форма.ИтогоСуммаКНачислению = КоллекцияНачислений.Итог("СуммаКНачислению");
	
КонецПроцедуры

// Параметры:
//  Результат - СтандартныйПериод, Неопределено -
//  ДополнительныеПараметры - Неопределено
//
&НаКлиенте
Асинх Процедура УстановитьИнтервалЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Отказ = Ложь;
		
		Если Объект.ДокументыНачисления.Количество() > 0
		   И (Объект.НачалоПериода <> ТекущаяДатаНачала
		  ИЛИ Объект.ОкончаниеПериода <> ТекущаяДатаОкончания) Тогда
			
			ПродолжитьОперацию = Ждать ПродолжитьОперациюСОчисткойДокументовНачисления();
			Если НЕ ПродолжитьОперацию Тогда
				
				Отказ = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Отказ Тогда
			
			Объект.НачалоПериода = ТекущаяДатаНачала;
			Объект.ОкончаниеПериода = ТекущаяДатаОкончания;
			
		Иначе
			
			Объект.ДокументыНачисления.Очистить();
			РассчитатьИтоговыеПоказатели(ЭтотОбъект);
			
			ТекущаяДатаНачала = Объект.НачалоПериода;
			ТекущаяДатаОкончания = Объект.ОкончаниеПериода;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Асинх Функция ПродолжитьОперациюСОчисткойДокументовНачисления()
	
	ТекстВопроса = НСтр("ru = 'Документы начисления будут очищены. Продолжить?'");
	Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет); // КодВозвратаДиалога
	ПродолжитьОперацию = (Ответ = КодВозвратаДиалога.Да);
	
	Возврат ПродолжитьОперацию;
	
КонецФункции

&НаСервере
Процедура УстановитьЗаголовокДекорацииФиксацииСегментов()
	
	Если ЕстьКорректировкаНаСогласовании Тогда
		
		ТекстЗафиксировать = НСтр("ru = 'Введена корректировка в статусе ""На согласовании"", фиксация состава сегментов запрещена'");
		
	Иначе
		
		ШаблонЗафиксировать = НСтр("ru = 'Состав сегментов не зафиксирован. <a href=""%1"">Зафиксировать</a>.'");
		ТекстЗафиксировать = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонЗафиксировать, "Зафиксировать");
		
	КонецЕсли;
	
	Элементы.ДекорацияЗафиксироватьСегменты.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(ТекстЗафиксировать);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоследнейКорректировки()
	
	ЕстьКорректировкаНаСогласовании = Ложь;
	Если НЕ Объект.ДокументУсловий.Пустая() Тогда
		
		ЕстьКорректировкаНаСогласовании = РетроБонусыСервер.ЕстьКорректировкаНаСогласовании(Объект.ДокументУсловий);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДокументУсловийПриИзмененииСервер()
	
	ЗаполнитьДанныеПоследнейКорректировки();
	УстановитьЗаголовокДекорацииФиксацииСегментов();
	ЗаполнитьРеквизитыПоУсловию();
	НастроитьВидимостьДоступностьФормы();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПередФиксациейСегментов()
	
	ЗаполнитьДанныеПоследнейКорректировки();
	Если ЕстьКорректировкаНаСогласовании Тогда
		
		УстановитьЗаголовокДекорацииФиксацииСегментов();
		
	КонецЕсли;
	ОбновитьДанныеОФиксацииСегментов();
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовШапкиФормыВспомогательные

&НаКлиенте
Асинх Процедура ЗафиксироватьСоставСегментов()
	
	ОбновитьДанныеПередФиксациейСегментов();
	Если НЕ ЕстьКорректировкаНаСогласовании
	   И НЕ СоставСегментовЗафиксирован Тогда
		
		ТекстВопроса = НСтр("ru = 'Зафиксировать состав сегментов документа условий?'");
		Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет); // КодВозвратаДиалога
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗафиксироватьСоставСегментовЗавершение", ЭтотОбъект);
			ОповещениеОперацияВыполняется = Новый ОписаниеОповещения(
				"ВыполняютсяОперацииПоФиксацииСоставаСегментов",
				ЭтотОбъект);
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				Элементы.ДекорацияЗафиксироватьСегменты.Имя,
				"Доступность",
				Ложь);
			
			РетроБонусыКлиент.ЗафиксироватьСоставСегментов(
				Объект.ДокументУсловий,
				ЭтотОбъект,
				ОповещениеОЗавершении,
				ОповещениеОперацияВыполняется);
			
		КонецЕсли;
	
	Иначе
		
		Если ЕстьКорректировкаНаСогласовании Тогда
			ТекстСообщения = НСтр("ru = 'Невозможно зафиксировать состав сегментов: введена корректировка в статусе ""На согласовании""'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Состав сегментов уже зафиксирован'");
		КонецЕсли;
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ДокументУсловий", "Объект");
		
	КонецЕсли;
	
	НастроитьВидимостьДоступностьФормы();
	
КонецПроцедуры

// Параметры:
//  Результат - см. ДлительныеОперацииКлиент.НовыйРезультатДлительнойОперации
//  ДополнительныеПараметры - Неопределено
//
&НаКлиенте
Процедура ЗафиксироватьСоставСегментовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено
	   И Результат.Статус = "Ошибка" Тогда
		
		СтандартныеПодсистемыКлиент.ВывестиИнформациюОбОшибке(Результат.ИнформацияОбОшибке);
		
	КонецЕсли;
	
	ОбновитьДанныеПередФиксациейСегментов();
	НастроитьВидимостьДоступностьФормы();
	
КонецПроцедуры

// Параметры:
//  Результат - см. ДлительныеОперацииКлиент.НовыйРезультатДлительнойОперации
//  ДополнительныеПараметры - Неопределено
//
&НаКлиенте
Процедура ВыполняютсяОперацииПоФиксацииСоставаСегментов(Результат, ДополнительныеПараметры) Экспорт
	
	ТекстСообщения =
		НСтр("ru = 'По документу условий уже выполняются операции по фиксации состава сегментов. Попробуйте позже'");
	
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	НастроитьВидимостьДоступностьФормы();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПериодыПоПериодичности(Отказ)
	
	Если НЕ Отказ
	   И (Объект.НачалоПериода > ДатаОкончанияУсловия
	  ИЛИ Объект.ОкончаниеПериода < ДатаНачалаУсловия) Тогда
		
		ТекстОшибки = НСтр("ru = 'Документ условия не действует в указанном периоде начисления'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,, "ДокументУсловий", "Объект", Отказ);
		
	КонецЕсли;
		
	Если НЕ Отказ Тогда
		
		РезультатПроверки = РетроБонусыСервер.ПроверитьПериодыПоПериодичности(
			ПериодичностьНачислений,
			Объект.НачалоПериода,
			Объект.ОкончаниеПериода,
			Истина);
			
		Если РезультатПроверки.ЕстьНарушениеНачала Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				РезультатПроверки.ТекстОшибкиНачала,
				,
				"НачалоПериода",
				"Объект",
				Отказ);
			
		КонецЕсли;
		
		Если РезультатПроверки.ЕстьНарушениеОкончания Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				РезультатПроверки.ТекстОшибкиОкончания,
				,
				"ОкончаниеПериода",
				"Объект",
				Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеДокументовКФормированию()
	
	ДанныеКФормированию = Обработки.ГрупповоеНачислениеРетроБонусовКлиентов.НовыеДанныеДляФормированияДокументовНачисления();
	
	Отбор = Новый Структура("Пометка", Истина);
	ДанныеДокументов = Объект.ДокументыНачисления.Выгрузить(Отбор);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаФормированияДокументов();
	Запрос.УстановитьПараметр("ДанныеДокументов", ДанныеДокументов);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	Если НЕ РезультатыЗапроса[2].Пустой() Тогда
		
		Выборка = РезультатыЗапроса[2].Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = ДанныеКФормированию.ЗаполнитьПоДаннымСистемы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ РезультатыЗапроса[3].Пустой() Тогда
		
		Выборка = РезультатыЗапроса[3].Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = ДанныеКФормированию.ЗаполнитьСКорректировкой.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ РезультатыЗапроса[4].Пустой() Тогда
		
		Выборка = РезультатыЗапроса[4].Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = ДанныеКФормированию.ЗаполнитьПоДаннымСтроки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ РезультатыЗапроса[5].Пустой() Тогда
		
		Выборка = РезультатыЗапроса[5].Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = ДанныеКФормированию.ПометитьНаУдаление.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Адрес = ПоместитьВоВременноеХранилище(ДанныеКФормированию, Новый УникальныйИдентификатор());
	
	Возврат Адрес;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстЗапросаФормированияДокументов()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокументов.Пометка КАК Пометка,
	|	ДанныеДокументов.Контрагент КАК Контрагент,
	|	ДанныеДокументов.Партнер КАК Партнер,
	|	ДанныеДокументов.ДокументНачисления КАК ДокументНачисления,
	|	ДанныеДокументов.СуммаКНачислению КАК СуммаКНачислению,
	|	ДанныеДокументов.СуммаНачисленная КАК СуммаНачисленная,
	|	ДанныеДокументов.СуммаРасчетная КАК СуммаРасчетная
	|ПОМЕСТИТЬ ВТ_ДанныеДокументов
	|ИЗ
	|	&ДанныеДокументов КАК ДанныеДокументов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокументов.Контрагент КАК Контрагент,
	|	ДанныеДокументов.Партнер КАК Партнер,
	|	ДанныеДокументов.ДокументНачисления КАК ДокументНачисления,
	|	ДанныеДокументов.СуммаКНачислению КАК СуммаКНачислению,
	|	ДанныеДокументов.СуммаНачисленная КАК СуммаНачисленная,
	|	ДанныеДокументов.СуммаРасчетная КАК СуммаРасчетная
	|ПОМЕСТИТЬ ВТ_ДанныеКФормированию
	|ИЗ
	|	ВТ_ДанныеДокументов КАК ДанныеДокументов
	|ГДЕ
	|	ДанныеДокументов.Пометка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеКФормированию.Контрагент КАК Контрагент,
	|	ДанныеКФормированию.Партнер КАК Партнер,
	|	ДанныеКФормированию.ДокументНачисления КАК ДокументНачисления,
	|	ДанныеКФормированию.СуммаКНачислению КАК СуммаКНачислению,
	|	ДанныеКФормированию.СуммаНачисленная КАК СуммаНачисленная,
	|	ДанныеКФормированию.СуммаРасчетная КАК СуммаРасчетная
	|ИЗ
	|	ВТ_ДанныеКФормированию КАК ДанныеКФормированию
	|ГДЕ
	|	ДанныеКФормированию.СуммаРасчетная <> 0
	|	И ДанныеКФормированию.СуммаКНачислению = ДанныеКФормированию.СуммаРасчетная
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеКФормированию.Контрагент КАК Контрагент,
	|	ДанныеКФормированию.Партнер КАК Партнер,
	|	ДанныеКФормированию.ДокументНачисления КАК ДокументНачисления,
	|	ДанныеКФормированию.СуммаКНачислению КАК СуммаКНачислению,
	|	ДанныеКФормированию.СуммаНачисленная КАК СуммаНачисленная,
	|	ДанныеКФормированию.СуммаРасчетная КАК СуммаРасчетная
	|ИЗ
	|	ВТ_ДанныеКФормированию КАК ДанныеКФормированию
	|ГДЕ
	|	ДанныеКФормированию.СуммаРасчетная <> 0
	|	И ДанныеКФормированию.СуммаКНачислению <> 0
	|	И ДанныеКФормированию.СуммаКНачислению <> ДанныеКФормированию.СуммаРасчетная
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеКФормированию.Контрагент КАК Контрагент,
	|	ДанныеКФормированию.Партнер КАК Партнер,
	|	ДанныеКФормированию.ДокументНачисления КАК ДокументНачисления,
	|	ДанныеКФормированию.СуммаКНачислению КАК СуммаКНачислению,
	|	ДанныеКФормированию.СуммаНачисленная КАК СуммаНачисленная,
	|	ДанныеКФормированию.СуммаРасчетная КАК СуммаРасчетная
	|ИЗ
	|	ВТ_ДанныеКФормированию КАК ДанныеКФормированию
	|ГДЕ
	|	ДанныеКФормированию.СуммаРасчетная = 0
	|	И ДанныеКФормированию.СуммаКНачислению <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеКФормированию.Контрагент КАК Контрагент,
	|	ДанныеКФормированию.Партнер КАК Партнер,
	|	ДанныеКФормированию.ДокументНачисления КАК ДокументНачисления,
	|	ДанныеКФормированию.СуммаКНачислению КАК СуммаКНачислению,
	|	ДанныеКФормированию.СуммаНачисленная КАК СуммаНачисленная,
	|	ДанныеКФормированию.СуммаРасчетная КАК СуммаРасчетная
	|ИЗ
	|	ВТ_ДанныеКФормированию КАК ДанныеКФормированию
	|ГДЕ
	|	ДанныеКФормированию.СуммаКНачислению = 0";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьПометки(Отказ)
	
	ЕстьПометки = Ложь;
	Для Каждого СтрокаДокумента Из Объект.ДокументыНачисления Цикл
		
		Если СтрокаДокумента.Пометка Тогда
			
			ЕстьПометки = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЕстьПометки Тогда
		
		ТекстСообщения = НСтр("ru = 'Не отмечено ни одной строки для формирования документов'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ДокументыНачислений", "Объект", Отказ);
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПроверитьДублиУчастников(Отказ)
	
	Отбор = Новый Структура("Пометка", Истина);
	ГруппировкаУчастников = "";
	Если ДетализацияРасчетаУчастников = Перечисления.ДетализацияРасчетаУчастниковРетроБонусов.ПоКлиенту Тогда
		ГруппировкаУчастников = "Партнер";
	ИначеЕсли ДетализацияРасчетаУчастников = Перечисления.ДетализацияРасчетаУчастниковРетроБонусов.ПоКонтрагенту Тогда
		ГруппировкаУчастников = "Контрагент";
	ИначеЕсли ДетализацияРасчетаУчастников = Перечисления.ДетализацияРасчетаУчастниковРетроБонусов.ПоКонтрагентуКлиенту Тогда
		ГруппировкаУчастников = "Контрагент, Партнер";
	КонецЕсли;
	
	Участники = Объект.ДокументыНачисления.Выгрузить(Отбор, ГруппировкаУчастников);
	КоличествоИсходное = Участники.Количество();
	Участники.Свернуть(ГруппировкаУчастников);
	КоличествоОригинальных = Участники.Количество();
	
	Если КоличествоИсходное <> КоличествоОригинальных Тогда
		
		ТекстСообщения = НСтр("ru = 'Данные документов начислений содержат дубли участников'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "ДокументыНачислений", "Объект", Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеОФиксацииСегментов()
	
	РеквизитыУсловий = Документы.УсловияРетроБонусовКлиентов.АктуальныеДанные(Объект.ДокументУсловий);
	
	Если РеквизитыУсловий.Количество() = 0 Тогда
		
		ДокументУсловийСогласован = Ложь;
		ИспользуютсяСегменты = Ложь;
		СоставСегментовЗафиксирован = Ложь;
		
	Иначе
		
		ДокументУсловийСогласован = Истина;
		
		ИспользуютсяСегментыТоваров =
			(РеквизитыУсловий.СоставТоваров = Перечисления.СоставыТоваровРетроБонусов.СегментыНоменклатуры);
		ИспользуютсяСегментыПартнеров =
			(РеквизитыУсловий.СоставУчастников = Перечисления.СоставыУчастниковРетроБонусов.СегментыПартнеров);
		ИспользуютсяСегменты = (ИспользуютсяСегментыТоваров ИЛИ ИспользуютсяСегментыПартнеров);
		СоставСегментовЗафиксирован = РеквизитыУсловий.СегментыЗафиксированы;
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Результат - см. ДлительныеОперацииКлиент.НовыйРезультатДлительнойОперации
//  ДополнительныеПараметры - Неопределено
//
&НаКлиенте
Процедура СформироватьДокументыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Если Результат.Статус = "Ошибка" Тогда
			
			СтандартныеПодсистемыКлиент.ВывестиИнформациюОбОшибке(Результат.ИнформацияОбОшибке);
			
		Иначе
			
			ЗаполнитьДанныеСозданныхДокументов(Результат.АдресРезультата)
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		Элементы.ФормаСформироватьДокументы.Имя,
		"Доступность",
		Истина);
	
	РассчитатьИтоговыеПоказатели(ЭтотОбъект);
	ОповеститьОбИзменении(Тип("ДокументСсылка.НачислениеРетроБонусовКлиента"));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеСозданныхДокументов(Знач АдресРезультата)
	
	СозданныеДокументы = ПолучитьИзВременногоХранилища(АдресРезультата); // см. Обработки.ГрупповоеНачислениеРетроБонусовКлиентов.НоваяТаблицаДокументовНачисления
	
	Для НомерСтроки = 1 По Объект.ДокументыНачисления.Количество() Цикл
		
		СтрокаДокумента = Объект.ДокументыНачисления[НомерСтроки - 1];
		
		Отбор = Новый Структура;
		Отбор.Вставить("Контрагент", СтрокаДокумента.Контрагент);
		Отбор.Вставить("Партнер", СтрокаДокумента.Партнер);
		
		ДанныеСозданныхДокументов = СозданныеДокументы.НайтиСтроки(Отбор);
		
		Если ДанныеСозданныхДокументов.Количество() > 0 Тогда
			
			ДанныеДокумента = ДанныеСозданныхДокументов[0];
			ЗаполнитьЗначенияСвойств(СтрокаДокумента, ДанныеДокумента);
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				"Объект.ДокументыНачисления",
				НомерСтроки,
				"ДокументНачисления");
			
			Если НЕ ПустаяСтрока(ДанныеДокумента.ОписаниеОшибки) Тогда
				
				ОбщегоНазначения.СообщитьПользователю(ДанныеДокумента.ОписаниеОшибки,, Поле);
				
			КонецЕсли;
			
			Для Каждого Сообщение Из ДанныеДокумента.Сообщения Цикл
				
				ОбщегоНазначения.СообщитьПользователю(Сообщение,, Поле);
				
			КонецЦикла;
			
			Если ДанныеДокумента.Проведен Тогда
				ИндексКартинки = 1;
			ИначеЕсли ДанныеДокумента.ПометкаУдаления Тогда 
				ИндексКартинки = 3;
			Иначе
				ИндексКартинки = 0;
			КонецЕсли;
			
			СтрокаДокумента.ИндексКартинки = ИндексКартинки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти