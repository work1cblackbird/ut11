//@strict-types

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// Добавляет команду открытия обработки.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
// Возвращаемое значение:
//  Неопределено, СтрокаТаблицыЗначений - Добавить команду создать на основании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Результат = Неопределено;
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.НачислениеРетроБонусовКлиента) Тогда
		
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Обработки.ГрупповоеНачислениеРетроБонусовКлиентов.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = 
			ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Обработки.ГрупповоеНачислениеРетроБонусовКлиентов);
		КомандаСоздатьНаОсновании.ИмяФормы = Метаданные.Обработки.ГрупповоеНачислениеРетроБонусовКлиентов.Формы.Форма.ПолноеИмя();
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		
		Результат = КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Формирует документы начисления из АРМ в транзакции
// 
// Параметры:
//  ДанныеДляФормирования - см. НовыеДанныеДляФормированияДокументовНачисления
//  ПараметрыРасчета - см. Отчеты.РасчетРетроБонусовКлиентов.ПараметрыРасчетаРетроБонусов
//  ПараметрыФормирования - см. ПараметрыФормированияДокументов
//
// Возвращаемое значение:
//  см. НоваяТаблицаДокументовНачисления
//
Функция СформироватьДокументыНачисления(ДанныеДляФормирования, ПараметрыРасчета, ПараметрыФормирования) Экспорт
	
	Если ПараметрыФормирования.ПроводитьБезКонтроляОстатковРетроБонусов Тогда
		ПараметрыСеанса.ПроводитьБезКонтроляОстатковРетроБонусов = Истина;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных();
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РетроБонусыКлиентов");
		ЭлементБлокировки.УстановитьЗначение("ДокументУсловий", ПараметрыРасчета.ДокументУсловий);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РетроБонусыКлиентовУсловия");
		ЭлементБлокировки.УстановитьЗначение("ДокументУсловий", ПараметрыРасчета.ДокументУсловий);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		Блокировка.Заблокировать();
		
		ДанныеДокументаУсловий = Документы.УсловияРетроБонусовКлиентов.АктуальныеДанные(ПараметрыРасчета.ДокументУсловий);
		ИспользуютсяСегментыТоваров =
			(ДанныеДокументаУсловий.СоставТоваров = Перечисления.СоставыТоваровРетроБонусов.СегментыНоменклатуры);
		ИспользуютсяСегментыПартнеров =
			(ДанныеДокументаУсловий.СоставУчастников = Перечисления.СоставыУчастниковРетроБонусов.СегментыПартнеров);
		ИспользуютсяСегменты = (ИспользуютсяСегментыТоваров ИЛИ ИспользуютсяСегментыПартнеров);
		СоставСегментовЗафиксирован = ДанныеДокументаУсловий.СегментыЗафиксированы;
		
		Если ИспользуютсяСегменты
		   И НЕ СоставСегментовЗафиксирован Тогда
			
			ТекстИсключения = НСтр("ru = 'По документу условий не зафиксирован состав сегментов'");
			ВызватьИсключение ТекстИсключения;
			
		КонецЕсли;
		
		ОбработанныеДокументы = СформироватьДокументыНачисленияБезПроведения(
			ДанныеДляФормирования,
			ПараметрыРасчета,
			ПараметрыФормирования);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
	ПровестиДокументыНачисления(ОбработанныеДокументы);
	
	Возврат ОбработанныеДокументы;
	
КонецФункции

// Возвращаемое значение:
//  Структура - Новые данные для формирования документов начисления:
// * ЗаполнитьПоДаннымСистемы - см. НоваяТаблицаДанныхДляФормированияДокументовНачисления
// * ЗаполнитьСКорректировкой - см. НоваяТаблицаДанныхДляФормированияДокументовНачисления
// * ЗаполнитьПоДаннымСтроки - см. НоваяТаблицаДанныхДляФормированияДокументовНачисления
// * ПометитьНаУдаление - см. НоваяТаблицаДанныхДляФормированияДокументовНачисления
//
Функция НовыеДанныеДляФормированияДокументовНачисления() Экспорт
	
	ДанныеКФормированию = Новый Структура; // Структура из см. НоваяТаблицаДанныхДляФормированияДокументовНачисления
	ДанныеКФормированию.Вставить("ЗаполнитьПоДаннымСистемы", НоваяТаблицаДанныхДляФормированияДокументовНачисления());
	ДанныеКФормированию.Вставить("ЗаполнитьСКорректировкой", НоваяТаблицаДанныхДляФормированияДокументовНачисления());
	ДанныеКФормированию.Вставить("ЗаполнитьПоДаннымСтроки", НоваяТаблицаДанныхДляФормированияДокументовНачисления());
	ДанныеКФормированию.Вставить("ПометитьНаУдаление", НоваяТаблицаДанныхДляФормированияДокументовНачисления());
	
	Возврат ДанныеКФормированию;
	
КонецФункции

// Возвращает таблицу начислений по переданным параметрам.
// 
// Параметры:
//  ПараметрыЗаполнения - см. ПараметрыЗаполненияТаблицыНачислений
// 
// Возвращаемое значение:
//  см. Обработки.ГрупповоеНачислениеРетроБонусовКлиентов.НоваяТаблицаДокументовНачисления
//
Функция ТаблицаДокументовНачисленияПоДаннымСистемы(ПараметрыЗаполнения) Экспорт
	
	Если ПараметрыЗаполнения.ДетализацияДоДокументаПродажи Тогда
		ТекстЗапроса = ТекстЗапросаДокументыНачисленияПоДокументуПродажи();
	Иначе
		ТекстЗапроса = ТекстЗапросаДокументыНачисленияПоУсловиям(ПараметрыЗаполнения.ДетализацияРасчетаУчастников);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	ОбщегоНазначенияУТ.УстановитьПараметрыЗапроса(Запрос, ПараметрыЗаполнения);
	
	ТаблицаДокументов = НоваяТаблицаДокументовНачисления();
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтрокаДокумента = ТаблицаДокументов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДокумента, Выборка);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаДокументов;
	
КонецФункции

// Возвращаемое значение:
//  ТаблицаЗначений:
// * Пометка - Булево
// * Контрагент - СправочникСсылка.Контрагенты
// * Партнер - СправочникСсылка.Валюты
// * ДокументНачисления - ДокументСсылка.НачислениеРетроБонусовКлиента
// * ДокументПродажи - ДокументСсылка.РеализацияТоваровУслуг, ДокументСсылка.КорректировкаРеализации, ДокументСсылка.АктВыполненныхРабот, ДокументСсылка.ВозвратТоваровОтКлиента -
// * СуммаКНачислению - Число
// * СуммаНачисленная - Число
// * СуммаРасчетная - Число
// * РасчетнаяБаза - Число
// * СуммаВБазовыхЦенах - Число
// * СуммаВыручки - Число
// * СуммаВыручкиБезНДС - Число
// * Проведен - Булево
// * ПометкаУдаления - Булево
// * ОписаниеОшибки - Строка
// * Сообщения - ФиксированныйМассив из Строка
//
Функция НоваяТаблицаДокументовНачисления() Экспорт
	
	ОписаниеТипаКонтрагент = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	ОписаниеТипаПартнер = Новый ОписаниеТипов("СправочникСсылка.Партнеры");
	ОписаниеТипаДокументНачисления = Новый ОписаниеТипов("ДокументСсылка.НачислениеРетроБонусовКлиента");
	ОписаниеТипаСумма = РаботаСКурсамиВалют.ОписаниеТипаДенежногоПоля(ДопустимыйЗнак.Любой);
	ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
	ОписаниеТипаДокументПродажи = Новый ОписаниеТипов("ДокументСсылка.РеализацияТоваровУслуг, ДокументСсылка.КорректировкаРеализации, ДокументСсылка.АктВыполненныхРабот, ДокументСсылка.ВозвратТоваровОтКлиента");
	ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка");
	ОписаниеТипаМассив = Новый ОписаниеТипов("ФиксированныйМассив");
	
	ТаблицаДокументов = Новый ТаблицаЗначений();
	ТаблицаДокументов.Колонки.Добавить("Пометка", ОписаниеТипаБулево);
	ТаблицаДокументов.Колонки.Добавить("Контрагент", ОписаниеТипаКонтрагент);
	ТаблицаДокументов.Колонки.Добавить("Партнер", ОписаниеТипаПартнер);
	ТаблицаДокументов.Колонки.Добавить("ДокументНачисления", ОписаниеТипаДокументНачисления);
	ТаблицаДокументов.Колонки.Добавить("ДокументПродажи", ОписаниеТипаДокументПродажи);
	ТаблицаДокументов.Колонки.Добавить("СуммаКНачислению", ОписаниеТипаСумма);
	ТаблицаДокументов.Колонки.Добавить("СуммаНачисленная", ОписаниеТипаСумма);
	ТаблицаДокументов.Колонки.Добавить("СуммаРасчетная", ОписаниеТипаСумма);
	ТаблицаДокументов.Колонки.Добавить("РасчетнаяБаза", ОписаниеТипаСумма);
	ТаблицаДокументов.Колонки.Добавить("СуммаВБазовыхЦенах", ОписаниеТипаСумма);
	ТаблицаДокументов.Колонки.Добавить("СуммаВыручки", ОписаниеТипаСумма);
	ТаблицаДокументов.Колонки.Добавить("СуммаВыручкиБезНДС", ОписаниеТипаСумма);
	ТаблицаДокументов.Колонки.Добавить("Проведен", ОписаниеТипаБулево);
	ТаблицаДокументов.Колонки.Добавить("ПометкаУдаления", ОписаниеТипаБулево);
	ТаблицаДокументов.Колонки.Добавить("ОписаниеОшибки", ОписаниеТипаСтрока);
	ТаблицаДокументов.Колонки.Добавить("Сообщения", ОписаниеТипаМассив);
	
	Возврат ТаблицаДокументов;
	
КонецФункции

// Возвращаемое значение:
//  Структура - Параметры формирования документов:
// * ДетализацияРасчетаУчастников - ПеречислениеСсылка.ДетализацияРасчетаУчастниковРетроБонусов - 
// * ПроводитьБезКонтроляОстатковРетроБонусов - Булево - 
// * ИмяКолонкиВыручка - Строка - 
// * БезРасчета - Булево - 
//
Функция ПараметрыФормированияДокументов() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ДетализацияРасчетаУчастников", Перечисления.ДетализацияРасчетаУчастниковРетроБонусов.ПустаяСсылка());
	Параметры.Вставить("ПроводитьБезКонтроляОстатковРетроБонусов", Ложь);
	Параметры.Вставить("ИмяКолонкиВыручка", "");
	Параметры.Вставить("БезРасчета", Ложь);
	
	Возврат Параметры;
	
КонецФункции

// Возвращаемое значение:
//  Структура - Параметры заполнения таблицы начислений:
// * ТаблицаБонусов - ТаблицаЗначений - 
// * ДокументУсловий - ДокументСсылка.УсловияРетроБонусовКлиентов - 
// * Валюта - СправочникСсылка.Валюты - 
// * Организация - СправочникСсылка.Организации - 
// * ДатаСозданияДокументов - Дата - 
// * НачалоПериода - Дата - 
// * ОкончаниеПериода - Дата - 
// * ДетализацияРасчетаУчастников - ПеречислениеСсылка.ДетализацияРасчетаУчастниковРетроБонусов - 
// * ДетализацияДоДокументаПродажи - Булево - 
// * ИмяКолонкиВыручка - Строка - 
// * БезРасчета - Булево - 
//
Функция ПараметрыЗаполненияТаблицыНачислений() Экспорт
	
	ПустаяДата = Дата(1, 1, 1);
	
	Параметры = Новый Структура;
	Параметры.Вставить("ТаблицаБонусов", Новый ТаблицаЗначений);
	Параметры.Вставить("ДокументУсловий", Документы.УсловияРетроБонусовКлиентов.ПустаяСсылка());
	Параметры.Вставить("Валюта", Справочники.Валюты.ПустаяСсылка());
	Параметры.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	Параметры.Вставить("ДатаСозданияДокументов", ПустаяДата);
	Параметры.Вставить("НачалоПериода", ПустаяДата);
	Параметры.Вставить("ОкончаниеПериода", ПустаяДата);
	Параметры.Вставить("ДетализацияРасчетаУчастников", Перечисления.ДетализацияРасчетаУчастниковРетроБонусов.ПустаяСсылка());
	Параметры.Вставить("ДетализацияДоДокументаПродажи", Ложь);
	Параметры.Вставить("ИмяКолонкиВыручка", "");
	Параметры.Вставить("БезРасчета", Ложь);
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращаемое значение:
//  ТаблицаЗначений:
// * Контрагент - СправочникСсылка.Контрагенты
// * Партнер - СправочникСсылка.Валюты
// * ДокументНачисления - ДокументСсылка.НачислениеРетроБонусовКлиента
// * СуммаКНачислению - Число
// * СуммаНачисленная - Число
// * СуммаРасчетная - Число
//
Функция НоваяТаблицаДанныхДляФормированияДокументовНачисления()
	
	ОписаниеТипаКонтрагент = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	ОписаниеТипаПартнер = Новый ОписаниеТипов("СправочникСсылка.Партнеры");
	ОписаниеТипаДокументНачисления = Новый ОписаниеТипов("ДокументСсылка.НачислениеРетроБонусовКлиента");
	ОписаниеТипаСумма = РаботаСКурсамиВалют.ОписаниеТипаДенежногоПоля(ДопустимыйЗнак.Любой);
	
	ТаблицаДокументов = Новый ТаблицаЗначений();
	ТаблицаДокументов.Колонки.Добавить("Контрагент", ОписаниеТипаКонтрагент);
	ТаблицаДокументов.Колонки.Добавить("Партнер", ОписаниеТипаПартнер);
	ТаблицаДокументов.Колонки.Добавить("ДокументНачисления", ОписаниеТипаДокументНачисления);
	ТаблицаДокументов.Колонки.Добавить("СуммаКНачислению", ОписаниеТипаСумма);
	ТаблицаДокументов.Колонки.Добавить("СуммаНачисленная", ОписаниеТипаСумма);
	ТаблицаДокументов.Колонки.Добавить("СуммаРасчетная", ОписаниеТипаСумма);
	
	Возврат ТаблицаДокументов;
	
КонецФункции

// Параметры:
//  ДетализацияРасчетаУчастников - ПеречислениеСсылка.ДетализацияРасчетаУчастниковРетроБонусов
// 
// Возвращаемое значение:
//  Строка
//
Функция ТекстЗапросаДокументыНачисленияПоУсловиям(ДетализацияРасчетаУчастников)
	
	ТекстЗапроса = ШаблонТекстаЗапросаПоУсловиям();
	
	Детализация = Перечисления.ДетализацияРасчетаУчастниковРетроБонусов;
	
	ТекстПоляТаблицаБонусов = "";
	ТекстПоляДанныеДокументов = "";
	ТекстПоляНачисления = "";
	ТекстУсловиеСвязи = "";
	ТекстНачисленияПоУсловиям = "";
	
	Если ДетализацияРасчетаУчастников = Детализация.ПоКонтрагентуКлиенту Тогда
		
		ТекстПоляТаблицаБонусов =
		"ТаблицаБонусов.Контрагент,
		|	ТаблицаБонусов.Партнер";
		
		ТекстПоляДанныеДокументов =
		"ДанныеДокументов.Контрагент,
		|	ДанныеДокументов.Партнер";
		
		ТекстПоляНачисления =
		"НачисленияПоУсловиям.Контрагент,
		|	НачисленияПоУсловиям.Партнер";
		
		ТекстУсловиеСвязи =
		"ТаблицаБонусов.Контрагент = ДанныеДокументов.Контрагент
		|		И ТаблицаБонусов.Партнер = ДанныеДокументов.Партнер";
		
		ТекстНачисленияПоУсловиям = "ЕСТЬNULL(ТаблицаБонусов.Контрагент, ДанныеДокументов.Контрагент) КАК Контрагент,
		|		ЕСТЬNULL(ТаблицаБонусов.Партнер, ДанныеДокументов.Партнер) КАК Партнер";
		
	ИначеЕсли ДетализацияРасчетаУчастников = Детализация.ПоКонтрагенту Тогда
		
		ТекстПоляТаблицаБонусов = "ТаблицаБонусов.Контрагент";
		ТекстПоляДанныеДокументов = "ДанныеДокументов.Контрагент";
		ТекстПоляНачисления = "НачисленияПоУсловиям.Контрагент";
		ТекстУсловиеСвязи = "ТаблицаБонусов.Контрагент = ДанныеДокументов.Контрагент";
		ТекстНачисленияПоУсловиям = "ЕСТЬNULL(ТаблицаБонусов.Контрагент, ДанныеДокументов.Контрагент) КАК Контрагент";
		
	ИначеЕсли ДетализацияРасчетаУчастников = Детализация.ПоКлиенту Тогда
		
		ТекстПоляТаблицаБонусов = "ТаблицаБонусов.Партнер";
		ТекстПоляДанныеДокументов = "ДанныеДокументов.Партнер";
		ТекстПоляНачисления = "НачисленияПоУсловиям.Партнер";
		ТекстУсловиеСвязи = "ТаблицаБонусов.Партнер = ДанныеДокументов.Партнер";
		ТекстНачисленияПоУсловиям = "ЕСТЬNULL(ТаблицаБонусов.Партнер, ДанныеДокументов.Партнер) КАК Партнер";
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаБонусовКонтрагентПартнер", ТекстПоляТаблицаБонусов);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДанныеДокументовКонтрагентПартнер", ТекстПоляДанныеДокументов);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НачисленияКонтрагентПартнер", ТекстПоляНачисления);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеСвязи", ТекстУсловиеСвязи);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НачисленияПоУсловиямКонтрагентПартнер", ТекстНачисленияПоУсловиям);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращаемое значение:
//  Строка
//
Функция ШаблонТекстаЗапросаПоУсловиям()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&ТаблицаБонусовКонтрагентПартнер,
	|	ТаблицаБонусов.СуммаБонус КАК СуммаБонус
	|ПОМЕСТИТЬ ВТ_ТаблицаБонусовПодготовка
	|ИЗ
	|	&ТаблицаБонусов КАК ТаблицаБонусов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ТаблицаБонусовКонтрагентПартнер,
	|	СУММА(ТаблицаБонусов.СуммаБонус) КАК СуммаБонус
	|ПОМЕСТИТЬ ВТ_ТаблицаБонусов
	|ИЗ
	|	ВТ_ТаблицаБонусовПодготовка КАК ТаблицаБонусов
	|СГРУППИРОВАТЬ ПО
	|	&ТаблицаБонусовКонтрагентПартнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ДанныеДокументовКонтрагентПартнер,
	|	ДанныеДокументов.Регистратор КАК ДокументНачисления,
	|	СУММА(РетроБонусыКлиентов.СуммаБонус) КАК СуммаНачисленная
	|ПОМЕСТИТЬ ВТ_ДанныеДокументов
	|ИЗ
	|	РегистрСведений.РетроБонусыКлиентовПериодыНачислений КАК ДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РетроБонусыКлиентов КАК РетроБонусыКлиентов
	|		ПО ДанныеДокументов.Регистратор = РетроБонусыКлиентов.Регистратор
	|		 И ДанныеДокументов.Контрагент = РетроБонусыКлиентов.Контрагент
	|		 И ДанныеДокументов.Партнер = РетроБонусыКлиентов.Партнер
	|ГДЕ
	|	ДанныеДокументов.ДокументУсловий = &ДокументУсловий
	|	И ДанныеДокументов.Валюта = &Валюта
	|	И ДанныеДокументов.НачалоПериода = &НачалоПериода
	|	И ДанныеДокументов.ОкончаниеПериода = &ОкончаниеПериода
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокументов.Регистратор,
	|	&ДанныеДокументовКонтрагентПартнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&НачисленияПоУсловиямКонтрагентПартнер,
	|	ЕСТЬNULL(ТаблицаБонусов.СуммаБонус, 0) КАК СуммаРасчетная,
	|	ЕСТЬNULL(ДанныеДокументов.СуммаНачисленная, 0) КАК СуммаНачисленная,
	|	ВЫБОР
	|		КОГДА ТаблицаБонусов.СуммаБонус = ДанныеДокументов.СуммаНачисленная
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ТаблицаБонусов.СуммаБонус, 0)
	|	КОНЕЦ КАК СуммаКНачислению,
	|	ВЫБОР
	|		КОГДА ТаблицаБонусов.СуммаБонус = ДанныеДокументов.СуммаНачисленная
	|				ИЛИ ЕСТЬNULL(ТаблицаБонусов.СуммаБонус, 0) = 0
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Пометка,
	|	ЕСТЬNULL(ДанныеДокументов.ДокументНачисления, ЗНАЧЕНИЕ(Документ.НачислениеРетроБонусовКлиента.ПустаяСсылка)) КАК ДокументНачисления
	|ПОМЕСТИТЬ ВТ_НачисленияПоУсловиям
	|ИЗ
	|	ВТ_ТаблицаБонусов КАК ТаблицаБонусов
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ДанныеДокументов КАК ДанныеДокументов
	|		ПО &УсловиеСвязи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&НачисленияКонтрагентПартнер,
	|	НачисленияПоУсловиям.СуммаРасчетная КАК СуммаРасчетная,
	|	НачисленияПоУсловиям.СуммаНачисленная КАК СуммаНачисленная,
	|	НачисленияПоУсловиям.СуммаКНачислению КАК СуммаКНачислению,
	|	НачисленияПоУсловиям.Пометка КАК Пометка,
	|	ВЫРАЗИТЬ(НачисленияПоУсловиям.ДокументНачисления КАК Документ.НачислениеРетроБонусовКлиента).Проведен КАК Проведен,
	|	НачисленияПоУсловиям.ДокументНачисления КАК ДокументНачисления
	|ПОМЕСТИТЬ ВТ_НачисленияПодготовка
	|ИЗ
	|	ВТ_НачисленияПоУсловиям КАК НачисленияПоУсловиям
	|ГДЕ
	|	НачисленияПоУсловиям.СуммаРасчетная <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&НачисленияКонтрагентПартнер,
	|	НачисленияПоУсловиям.СуммаРасчетная КАК СуммаРасчетная,
	|	НачисленияПоУсловиям.СуммаНачисленная КАК СуммаНачисленная,
	|	НачисленияПоУсловиям.СуммаКНачислению КАК СуммаКНачислению,
	|	НачисленияПоУсловиям.Пометка КАК Пометка,
	|	ВЫРАЗИТЬ(НачисленияПоУсловиям.ДокументНачисления КАК Документ.НачислениеРетроБонусовКлиента).Проведен КАК Проведен,
	|	НачисленияПоУсловиям.ДокументНачисления КАК ДокументНачисления
	|ИЗ
	|	ВТ_НачисленияПоУсловиям КАК НачисленияПоУсловиям
	|ГДЕ
	|	НачисленияПоУсловиям.СуммаРасчетная = 0
	|	И НачисленияПоУсловиям.ДокументНачисления <> ЗНАЧЕНИЕ(Документ.НачислениеРетроБонусовКлиента.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&НачисленияКонтрагентПартнер,
	|	НачисленияПоУсловиям.СуммаРасчетная КАК СуммаРасчетная,
	|	НачисленияПоУсловиям.СуммаНачисленная КАК СуммаНачисленная,
	|	НачисленияПоУсловиям.СуммаКНачислению КАК СуммаКНачислению,
	|	НачисленияПоУсловиям.Пометка КАК Пометка,
	|	НачисленияПоУсловиям.Проведен КАК Проведен,
	|	НачисленияПоУсловиям.ДокументНачисления КАК ДокументНачисления
	|ИЗ
	|	ВТ_НачисленияПодготовка КАК НачисленияПоУсловиям
	|УПОРЯДОЧИТЬ ПО
	|	НачисленияПоУсловиям.СуммаРасчетная УБЫВ,
	|	&НачисленияКонтрагентПартнер";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращаемое значение:
//  Строка
//
Функция ТекстЗапросаДокументыНачисленияПоДокументуПродажи()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаБонусов.ДокументПродажи КАК ДокументПродажи,
	|	ТаблицаБонусов.Контрагент КАК Контрагент,
	|	ТаблицаБонусов.Партнер КАК Партнер,
	|	ТаблицаБонусов.РасчетнаяБаза КАК РасчетнаяБаза,
	|	ТаблицаБонусов.СуммаВыручки КАК СуммаВыручки,
	|	ТаблицаБонусов.СуммаВыручкиБезНДС КАК СуммаВыручкиБезНДС,
	|	ТаблицаБонусов.СуммаВБазовыхЦенах КАК СуммаВБазовыхЦенах,
	|	ТаблицаБонусов.СуммаБонус КАК СуммаБонус
	|ПОМЕСТИТЬ ВТ_ТаблицаБонусовПодготовка
	|ИЗ
	|	&ТаблицаБонусов КАК ТаблицаБонусов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаБонусов.ДокументПродажи КАК ДокументПродажи,
	|	ТаблицаБонусов.Контрагент КАК Контрагент,
	|	ТаблицаБонусов.Партнер КАК Партнер,
	|	СУММА(ТаблицаБонусов.РасчетнаяБаза) КАК РасчетнаяБаза,
	|	СУММА(ТаблицаБонусов.СуммаВыручки) КАК СуммаВыручки,
	|	СУММА(ТаблицаБонусов.СуммаВыручкиБезНДС) КАК СуммаВыручкиБезНДС,
	|	СУММА(ТаблицаБонусов.СуммаВБазовыхЦенах) КАК СуммаВБазовыхЦенах,
	|	СУММА(ТаблицаБонусов.СуммаБонус) КАК СуммаБонус
	|ПОМЕСТИТЬ ВТ_ТаблицаБонусов
	|ИЗ
	|	ВТ_ТаблицаБонусовПодготовка КАК ТаблицаБонусов
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаБонусов.ДокументПродажи,
	|	ТаблицаБонусов.Контрагент,
	|	ТаблицаБонусов.Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокументов.Контрагент КАК Контрагент,
	|	ДанныеДокументов.Партнер КАК Партнер,
	|	ДанныеДокументов.Регистратор КАК ДокументНачисления,
	|	СУММА(РетроБонусыКлиентов.СуммаБонус) КАК СуммаНачисленная
	|ПОМЕСТИТЬ ВТ_ДанныеДокументов
	|ИЗ
	|	РегистрСведений.РетроБонусыКлиентовПериодыНачислений КАК ДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РетроБонусыКлиентов КАК РетроБонусыКлиентов
	|		ПО ДанныеДокументов.Регистратор = РетроБонусыКлиентов.Регистратор
	|		 И ДанныеДокументов.Контрагент = РетроБонусыКлиентов.Контрагент
	|		 И ДанныеДокументов.Партнер = РетроБонусыКлиентов.Партнер
	|ГДЕ
	|	ДанныеДокументов.ДокументУсловий = &ДокументУсловий
	|	И ДанныеДокументов.Валюта = &Валюта
	|	И ДанныеДокументов.НачалоПериода = &НачалоПериода
	|	И ДанныеДокументов.ОкончаниеПериода = &ОкончаниеПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокументов.Контрагент,
	|	ДанныеДокументов.Партнер,
	|	ДанныеДокументов.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаБонусов.ДокументПродажи КАК ДокументПродажи,
	|	ТаблицаБонусов.Контрагент КАК Контрагент,
	|	ТаблицаБонусов.Партнер КАК Партнер,
	|	ТаблицаБонусов.РасчетнаяБаза КАК РасчетнаяБаза,
	|	ТаблицаБонусов.СуммаВыручки КАК СуммаВыручки,
	|	ТаблицаБонусов.СуммаВыручкиБезНДС КАК СуммаВыручкиБезНДС,
	|	ТаблицаБонусов.СуммаВБазовыхЦенах КАК СуммаВБазовыхЦенах,
	|	ТаблицаБонусов.СуммаБонус КАК СуммаРасчетная,
	|	ДанныеДокументов.СуммаНачисленная КАК СуммаНачисленная,
	|	ВЫБОР
	|		КОГДА ТаблицаБонусов.СуммаБонус = ДанныеДокументов.СуммаНачисленная
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаБонусов.СуммаБонус
	|	КОНЕЦ КАК СуммаКНачислению,
	|	ВЫБОР
	|		КОГДА ТаблицаБонусов.СуммаБонус = ДанныеДокументов.СуммаНачисленная
	|				ИЛИ ТаблицаБонусов.СуммаБонус = 0
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Пометка,
	|	ЕСТЬNULL(ДанныеДокументов.ДокументНачисления, ЗНАЧЕНИЕ(Документ.НачислениеРетроБонусовКлиента.ПустаяСсылка)) КАК ДокументНачисления
	|ИЗ
	|	ВТ_ТаблицаБонусов КАК ТаблицаБонусов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеДокументов КАК ДанныеДокументов
	|		ПО ТаблицаБонусов.Контрагент = ДанныеДокументов.Контрагент
	|			И ТаблицаБонусов.Партнер = ДанныеДокументов.Партнер";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Параметры:
//  ДетализацияРасчетаУчастников - ПеречислениеСсылка.ДетализацияРасчетаУчастниковРетроБонусов
//
// Возвращаемое значение:
//  Строка
//
Функция ТекстЗапросаПоДаннымСистемы(ДетализацияРасчетаУчастников)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ИсходныеДанные.ДокументНачисления КАК ДокументНачисления,
	|	ИсходныеДанные.Контрагент КАК Контрагент,
	|	ИсходныеДанные.Партнер КАК Партнер
	|ПОМЕСТИТЬ ВТ_ИсходныеДанные
	|ИЗ
	|	&ИсходныеДанные КАК ИсходныеДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеСистемы.ДокументНачисления КАК ДокументНачисления,
	|	ДанныеСистемы.ДокументПродажи КАК ДокументПродажи,
	|	ВЫРАЗИТЬ(ДанныеСистемы.Контрагент КАК Справочник.Контрагенты) КАК Контрагент,
	|	ДанныеСистемы.Партнер КАК Партнер,
	|	ДанныеСистемы.РасчетнаяБаза КАК РасчетнаяБаза,
	|	ДанныеСистемы.СуммаВыручки КАК СуммаВыручки,
	|	ДанныеСистемы.СуммаВыручкиБезНДС КАК СуммаВыручкиБезНДС,
	|	ДанныеСистемы.СуммаВБазовыхЦенах КАК СуммаВБазовыхЦенах,
	|	ДанныеСистемы.СуммаКНачислению КАК СуммаКНачислению,
	|	ДанныеСистемы.СуммаРасчетная КАК СуммаРасчетная
	|ПОМЕСТИТЬ ВТ_ДанныеСистемы
	|ИЗ
	|	&ДанныеСистемы КАК ДанныеСистемы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИСТИНА КАК ЗаполнениеПоРасчету,
	|	ВЫБОР
	|		КОГДА ДанныеСистемы.ДокументНачисления = ЗНАЧЕНИЕ(Документ.НачислениеРетроБонусовКлиента.ПустаяСсылка)
	|			ТОГДА ИсходныеДанные.ДокументНачисления
	|		ИНАЧЕ ДанныеСистемы.ДокументНачисления
	|	КОНЕЦ КАК ДокументНачисления,
	|	ДанныеСистемы.ДокументПродажи КАК ДокументПродажи,
	|	ЕСТЬNULL(РеестрДокументов.ДатаДокументаИБ, ДАТАВРЕМЯ(1, 1, 1)) КАК Дата,
	|	ДанныеСистемы.Контрагент КАК Контрагент,
	|	ДанныеСистемы.Партнер КАК Партнер,
	|	ДанныеСистемы.Контрагент.Партнер КАК ПартнерКонтрагента,
	|	ДанныеСистемы.РасчетнаяБаза КАК РасчетнаяБаза,
	|	ДанныеСистемы.СуммаВыручки КАК СуммаВыручки,
	|	ДанныеСистемы.СуммаВыручкиБезНДС КАК СуммаВыручкиБезНДС,
	|	ДанныеСистемы.СуммаВБазовыхЦенах КАК СуммаВБазовыхЦенах,
	|	ДанныеСистемы.СуммаРасчетная КАК СуммаБонусНачисленный,
	|	ДанныеСистемы.СуммаРасчетная КАК СуммаБонусРасчетный
	|ИЗ
	|	ВТ_ИсходныеДанные КАК ИсходныеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеСистемы КАК ДанныеСистемы
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|			ПО ДанныеСистемы.ДокументПродажи = РеестрДокументов.Ссылка
	|		ПО &ТекстУсловия
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата
	|ИТОГИ
	|	СУММА(СуммаБонусНачисленный),
	|	СУММА(СуммаБонусРасчетный),
	|	СУММА(РасчетнаяБаза),
	|	СУММА(СуммаВыручки),
	|	СУММА(СуммаВыручкиБезНДС),
	|	СУММА(СуммаВБазовыхЦенах),
	|	МАКСИМУМ(ДокументНачисления)
	|ПО
	|	&ТекстКонтрагентКлиент";
	
	Детализация = Перечисления.ДетализацияРасчетаУчастниковРетроБонусов;
	ТекстКонтрагентКлиент = "";
	ТекстУсловия = "";
	
	Если ДетализацияРасчетаУчастников = Детализация.ПоКонтрагентуКлиенту Тогда
		
		ТекстКонтрагентКлиент = "ДанныеСистемы.Контрагент,
								|	ДанныеСистемы.Партнер КАК Партнер";
		ТекстУсловия = "ИсходныеДанные.Контрагент = ДанныеСистемы.Контрагент
					   |		И ИсходныеДанные.Партнер = ДанныеСистемы.Партнер";
		
	ИначеЕсли ДетализацияРасчетаУчастников = Детализация.ПоКонтрагенту Тогда
		
		ТекстКонтрагентКлиент = "ДанныеСистемы.Контрагент";
		ТекстУсловия = "ИсходныеДанные.Контрагент = ДанныеСистемы.Контрагент";
		
	ИначеЕсли ДетализацияРасчетаУчастников = Детализация.ПоКлиенту Тогда
		
		ТекстКонтрагентКлиент = "ДанныеСистемы.Партнер";
		ТекстУсловия = "ИсходныеДанные.Партнер = ДанныеСистемы.Партнер";
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстКонтрагентКлиент", ТекстКонтрагентКлиент);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстУсловия", ТекстУсловия);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Параметры:
//  ДетализацияРасчетаУчастников - ПеречислениеСсылка.ДетализацияРасчетаУчастниковРетроБонусов
//
// Возвращаемое значение:
//  Строка
//
Функция ТекстЗапросаСКорректировкой(ДетализацияРасчетаУчастников)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ИсходныеДанные.ДокументНачисления КАК ДокументНачисления,
	|	ВЫРАЗИТЬ(ИсходныеДанные.Контрагент КАК Справочник.Контрагенты) КАК Контрагент,
	|	ИсходныеДанные.Партнер КАК Партнер,
	|	ИсходныеДанные.СуммаКНачислению КАК СуммаКНачислению,
	|	ИсходныеДанные.СуммаРасчетная КАК СуммаРасчетная
	|ПОМЕСТИТЬ ВТ_ИсходныеДанные
	|ИЗ
	|	&ИсходныеДанные КАК ИсходныеДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеСистемы.ДокументНачисления КАК ДокументНачисления,
	|	ДанныеСистемы.ДокументПродажи КАК ДокументПродажи,
	|	ВЫРАЗИТЬ(ДанныеСистемы.Контрагент КАК Справочник.Контрагенты) КАК Контрагент,
	|	ДанныеСистемы.Партнер КАК Партнер,
	|	ДанныеСистемы.РасчетнаяБаза КАК РасчетнаяБаза,
	|	ДанныеСистемы.СуммаВыручки КАК СуммаВыручки,
	|	ДанныеСистемы.СуммаВыручкиБезНДС КАК СуммаВыручкиБезНДС,
	|	ДанныеСистемы.СуммаВБазовыхЦенах КАК СуммаВБазовыхЦенах,
	|	ДанныеСистемы.СуммаРасчетная КАК СуммаКНачислению,
	|	ДанныеСистемы.СуммаРасчетная КАК СуммаРасчетная
	|ПОМЕСТИТЬ ВТ_ДанныеСистемы
	|ИЗ
	|	&ДанныеСистемы КАК ДанныеСистемы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеНачислений.ДокументНачисления КАК ДокументНачисления,
	|	&ДанныеНачисленийКонтрагентКлиент,
	|	СУММА(ДанныеНачислений.СуммаКНачислению) КАК СуммаКНачислению
	|ПОМЕСТИТЬ ВТ_ИсходныеДанныеИтог
	|ИЗ
	|	ВТ_ИсходныеДанные КАК ДанныеНачислений
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеНачислений.ДокументНачисления,
	|	&ДанныеНачисленийКонтрагентКлиент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеНачислений.ДокументНачисления КАК ДокументНачисления,
	|	&ДанныеНачисленийКонтрагентКлиент,
	|	СУММА(ДанныеНачислений.РасчетнаяБаза) КАК РасчетнаяБаза,
	|	СУММА(ДанныеНачислений.СуммаВыручки) КАК СуммаВыручки,
	|	СУММА(ДанныеНачислений.СуммаВыручкиБезНДС) КАК СуммаВыручкиБезНДС,
	|	СУММА(ДанныеНачислений.СуммаВБазовыхЦенах) КАК СуммаВБазовыхЦенах,
	|	СУММА(ДанныеНачислений.СуммаРасчетная) КАК СуммаКНачислению
	|ПОМЕСТИТЬ ВТ_ДанныеСистемыИтог
	|ИЗ
	|	ВТ_ДанныеСистемы КАК ДанныеНачислений
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеНачислений.ДокументНачисления,
	|	&ДанныеНачисленийКонтрагентКлиент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИСТИНА КАК ЗаполнениеПоРасчету,
	|	0 КАК Порядок,
	|	ВЫБОР
	|		КОГДА ДанныеСистемы.ДокументНачисления = ЗНАЧЕНИЕ(Документ.НачислениеРетроБонусовКлиента.ПустаяСсылка)
	|			ТОГДА ИсходныеДанные.ДокументНачисления
	|		ИНАЧЕ ДанныеСистемы.ДокументНачисления
	|	КОНЕЦ КАК ДокументНачисления,
	|	ДанныеСистемы.ДокументПродажи КАК ДокументПродажи,
	|	ДанныеСистемы.Контрагент КАК Контрагент,
	|	ДанныеСистемы.Партнер КАК Партнер,
	|	ДанныеСистемы.РасчетнаяБаза КАК РасчетнаяБаза,
	|	ДанныеСистемы.СуммаВыручки КАК СуммаВыручки,
	|	ДанныеСистемы.СуммаВыручкиБезНДС КАК СуммаВыручкиБезНДС,
	|	ДанныеСистемы.СуммаВБазовыхЦенах КАК СуммаВБазовыхЦенах,
	|	ДанныеСистемы.СуммаРасчетная КАК СуммаБонусНачисленный,
	|	ДанныеСистемы.СуммаРасчетная КАК СуммаБонусРасчетный
	|ПОМЕСТИТЬ ВТ_ДанныеДокумента
	|ИЗ
	|	ВТ_ИсходныеДанные КАК ИсходныеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеСистемы КАК ДанныеСистемы
	|		ПО &ТекстУсловия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЛОЖЬ КАК ЗаполнениеПоРасчету,
	|	1 КАК Порядок,
	|	ВЫБОР
	|		КОГДА ДанныеСистемы.ДокументНачисления = ЗНАЧЕНИЕ(Документ.НачислениеРетроБонусовКлиента.ПустаяСсылка)
	|			ТОГДА ИсходныеДанные.ДокументНачисления
	|		ИНАЧЕ ДанныеСистемы.ДокументНачисления
	|	КОНЕЦ КАК ДокументНачисления,
	|	НЕОПРЕДЕЛЕНО КАК ДокументПродажи,
	|	&КонтрагентИтог КАК Контрагент,
	|	&ПартнерИтог КАК Партнер,
	|	0 КАК РасчетнаяБаза,
	|	0 КАК СуммаВыручки,
	|	0 КАК СуммаВыручкиБезНДС,
	|	0 КАК СуммаВБазовыхЦенах,
	|	ИсходныеДанные.СуммаКНачислению - ДанныеСистемы.СуммаКНачислению КАК СуммаБонусНачисленный,
	|	0 КАК СуммаБонусРасчетный
	|ИЗ
	|	ВТ_ИсходныеДанныеИтог КАК ИсходныеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеСистемыИтог КАК ДанныеСистемы
	|		ПО &ТекстУсловия
	|ГДЕ
	|	ДанныеСистемы.СуммаКНачислению <> 0
	|	ИЛИ ДанныеСистемы.ДокументНачисления <> ЗНАЧЕНИЕ(Документ.НачислениеРетроБонусовКлиента.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.ЗаполнениеПоРасчету КАК ЗаполнениеПоРасчету,
	|	ДанныеДокумента.Порядок КАК Порядок,
	|	ДанныеДокумента.ДокументНачисления КАК ДокументНачисления,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ВЫРАЗИТЬ(ДанныеДокумента.Контрагент КАК Справочник.Контрагенты).Партнер КАК ПартнерКонтрагента,
	|	ДанныеДокумента.ДокументПродажи КАК ДокументПродажи,
	|	ЕСТЬNULL(РеестрДокументов.ДатаДокументаИБ, ДАТАВРЕМЯ(1, 1, 1)) КАК Дата,
	|	ДанныеДокумента.РасчетнаяБаза КАК РасчетнаяБаза,
	|	ДанныеДокумента.СуммаВыручки КАК СуммаВыручки,
	|	ДанныеДокумента.СуммаВыручкиБезНДС КАК СуммаВыручкиБезНДС,
	|	ДанныеДокумента.СуммаВБазовыхЦенах КАК СуммаВБазовыхЦенах,
	|	ДанныеДокумента.СуммаБонусНачисленный КАК СуммаБонусНачисленный,
	|	ДанныеДокумента.СуммаБонусРасчетный КАК СуммаБонусРасчетный
	|ИЗ
	|	ВТ_ДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|		ПО ДанныеДокумента.ДокументПродажи = РеестрДокументов.Ссылка
	|		 И ДанныеДокумента.ДокументПродажи <> НЕОПРЕДЕЛЕНО
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	Дата
	|ИТОГИ
	|	МАКСИМУМ(ДокументНачисления),
	|	СУММА(РасчетнаяБаза),
	|	СУММА(СуммаВыручки),
	|	СУММА(СуммаВыручкиБезНДС),
	|	СУММА(СуммаВБазовыхЦенах),
	|	СУММА(СуммаБонусНачисленный),
	|	СУММА(СуммаБонусРасчетный)
	|ПО
	|	&ТекстКонтрагентКлиент";
	
	Детализация = Перечисления.ДетализацияРасчетаУчастниковРетроБонусов;
	ТекстКонтрагентКлиент = "";
	ТекстУсловия = "";
	ТекстДанныеНачислений = "";
	ТекстКонтрагентИтог = "";
	ТекстПартнерИтог = "";
	Если ДетализацияРасчетаУчастников = Детализация.ПоКонтрагентуКлиенту Тогда
		
		ТекстКонтрагентКлиент = "ДанныеДокумента.Контрагент,
								|	ДанныеДокумента.Партнер КАК Партнер";
		
		ТекстУсловия = "ИсходныеДанные.Контрагент = ДанныеСистемы.Контрагент
					   |		И ИсходныеДанные.Партнер = ДанныеСистемы.Партнер";
		
		ТекстДанныеНачислений = "ДанныеНачислений.Контрагент,
								|	ДанныеНачислений.Партнер";
		
		ТекстКонтрагентИтог = "ИсходныеДанные.Контрагент";
		ТекстПартнерИтог = "ИсходныеДанные.Партнер";
		
	ИначеЕсли ДетализацияРасчетаУчастников = Детализация.ПоКонтрагенту Тогда
		
		ТекстКонтрагентКлиент = "ДанныеДокумента.Контрагент";
		
		ТекстУсловия = "ИсходныеДанные.Контрагент = ДанныеСистемы.Контрагент";
		
		ТекстДанныеНачислений = "ДанныеНачислений.Контрагент";
		
		ТекстКонтрагентИтог = "ИсходныеДанные.Контрагент";
		ТекстПартнерИтог = "НЕОПРЕДЕЛЕНО";
		
	ИначеЕсли ДетализацияРасчетаУчастников = Детализация.ПоКлиенту Тогда
		
		ТекстКонтрагентКлиент = "ДанныеДокумента.Партнер";
		
		ТекстУсловия = "ИсходныеДанные.Партнер = ДанныеСистемы.Партнер";
		
		ТекстДанныеНачислений = "ДанныеНачислений.Партнер";
		
		ТекстКонтрагентИтог = "НЕОПРЕДЕЛЕНО";
		ТекстПартнерИтог = "ИсходныеДанные.Партнер";
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстКонтрагентКлиент", ТекстКонтрагентКлиент);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстУсловия", ТекстУсловия);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДанныеНачисленийКонтрагентКлиент", ТекстДанныеНачислений);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КонтрагентИтог", ТекстКонтрагентИтог);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПартнерИтог", ТекстПартнерИтог);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Параметры:
//  ДетализацияРасчетаУчастников - ПеречислениеСсылка.ДетализацияРасчетаУчастниковРетроБонусов
//
// Возвращаемое значение:
//  Строка
//
Функция ТекстЗапросаПоДаннымСтроки(ДетализацияРасчетаУчастников)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ИсходныеДанные.ДокументНачисления КАК ДокументНачисления,
	|	ВЫРАЗИТЬ(ИсходныеДанные.Контрагент КАК Справочник.Контрагенты) КАК Контрагент,
	|	ИсходныеДанные.Партнер КАК Партнер,
	|	ИсходныеДанные.СуммаКНачислению КАК СуммаКНачислению,
	|	ИсходныеДанные.СуммаНачисленная КАК СуммаНачисленная,
	|	ИсходныеДанные.СуммаРасчетная КАК СуммаРасчетная
	|ПОМЕСТИТЬ ВТ_ИсходныеДанные
	|ИЗ
	|	&ИсходныеДанные КАК ИсходныеДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЛОЖЬ КАК ЗаполнениеПоРасчету,
	|	ИсходныеДанные.ДокументНачисления КАК ДокументНачисления,
	|	НЕОПРЕДЕЛЕНО КАК ДокументПродажи,
	|	&ТекстКонтрагентКлиент,
	|	ИсходныеДанные.Контрагент.Партнер КАК ПартнерКонтрагента,
	|	0 КАК СуммаВыручки,
	|	0 КАК СуммаВыручкиБезНДС,
	|	0 КАК СуммаВБазовыхЦенах,
	|	ИсходныеДанные.СуммаКНачислению КАК СуммаБонусНачисленный,
	|	ИсходныеДанные.СуммаРасчетная КАК СуммаБонусРасчетный
	|ИЗ
	|	ВТ_ИсходныеДанные КАК ИсходныеДанные
	|ИТОГИ
	|	СУММА(СуммаБонусНачисленный),
	|	СУММА(СуммаБонусРасчетный),
	|	МАКСИМУМ(ДокументНачисления)
	|ПО
	|	&ТекстКонтрагентКлиент";
	
	Детализация = Перечисления.ДетализацияРасчетаУчастниковРетроБонусов;
	ТекстКонтрагентКлиент = "";
	Если ДетализацияРасчетаУчастников = Детализация.ПоКонтрагентуКлиенту Тогда
		
		ТекстКонтрагентКлиент = "ИсходныеДанные.Контрагент,
								|	ИсходныеДанные.Партнер КАК Партнер";
		
	ИначеЕсли ДетализацияРасчетаУчастников = Детализация.ПоКонтрагенту Тогда
		
		ТекстКонтрагентКлиент = "ИсходныеДанные.Контрагент";
		
	ИначеЕсли ДетализацияРасчетаУчастников = Детализация.ПоКлиенту Тогда
		
		ТекстКонтрагентКлиент = "ИсходныеДанные.Партнер";
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстКонтрагентКлиент", ТекстКонтрагентКлиент);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Параметры:
//  ДетализацияРасчетаУчастников - ПеречислениеСсылка.ДетализацияРасчетаУчастниковРетроБонусов
//
// Возвращаемое значение:
//  Строка
//
Функция ТекстЗапросаПометитьНаУдаление(ДетализацияРасчетаУчастников)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ИсходныеДанные.ДокументНачисления КАК ДокументНачисления,
	|	ВЫРАЗИТЬ(ИсходныеДанные.Контрагент КАК Справочник.Контрагенты) КАК Контрагент,
	|	ИсходныеДанные.Партнер КАК Партнер,
	|	ИсходныеДанные.СуммаРасчетная КАК СуммаРасчетная,
	|	ИсходныеДанные.СуммаКНачислению КАК СуммаКНачислению
	|ПОМЕСТИТЬ ВТ_ИсходныеДанные
	|ИЗ
	|	&ИсходныеДанные КАК ИсходныеДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&НачисленияКонтрагентПартнер,
	|	ДанныеСистемы.Регистратор КАК ДокументНачисления
	|ПОМЕСТИТЬ ВТ_ДанныеСистемы
	|ИЗ
	|	РегистрСведений.РетроБонусыКлиентовПериодыНачислений КАК ДанныеСистемы
	|ГДЕ ДанныеСистемы.ДокументУсловий = &ДокументУсловий
	|	И ДанныеСистемы.НачалоПериода = &НачалоПериода
	|	И ДанныеСистемы.ОкончаниеПериода = &ОкончаниеПериода
	|СГРУППИРОВАТЬ ПО
	|	&НачисленияКонтрагентПартнер,
	|	ДанныеСистемы.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&НачисленияКонтрагентПартнер,
	|	ИсходныеДанные.СуммаРасчетная КАК СуммаРасчетная,
	|	ИсходныеДанные.ДокументНачисления КАК ДокументНачисления
	|ИЗ
	|	ВТ_ИсходныеДанные КАК ИсходныеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеСистемы КАК ДанныеСистемы
	|		ПО ИсходныеДанные.ДокументНачисления = ДанныеСистемы.ДокументНачисления
	|		 И &ТекстУсловия
	|";
	
	Детализация = Перечисления.ДетализацияРасчетаУчастниковРетроБонусов;
	ТекстУсловия = "";
	ТекстДанныеНачислений = "";
	Если ДетализацияРасчетаУчастников = Детализация.ПоКонтрагентуКлиенту Тогда
		
		ТекстУсловия = "ИсходныеДанные.Контрагент = ДанныеСистемы.Контрагент
					   |		И ИсходныеДанные.Партнер = ДанныеСистемы.Партнер";
		
		ТекстДанныеНачислений = "ДанныеСистемы.Контрагент,
								|	ДанныеСистемы.Партнер";
		
	ИначеЕсли ДетализацияРасчетаУчастников = Детализация.ПоКонтрагенту Тогда
		
		ТекстУсловия = "ИсходныеДанные.Контрагент = ДанныеСистемы.Контрагент";
		
		ТекстДанныеНачислений = "ДанныеСистемы.Контрагент";
		
	ИначеЕсли ДетализацияРасчетаУчастников = Детализация.ПоКлиенту Тогда
		
		ТекстУсловия = "ИсходныеДанные.Партнер = ДанныеСистемы.Партнер";
		
		ТекстДанныеНачислений = "ДанныеСистемы.Партнер";
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстУсловия", ТекстУсловия);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НачисленияКонтрагентПартнер", ТекстДанныеНачислений);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Параметры:
//  РезультатЗапроса - РезультатЗапроса
//  ПараметрыЗаполнения - см. ПараметрыЗаполненияТаблицыНачислений
//  ДокументыНачисления - см. НоваяТаблицаДокументовНачисления
//
Процедура ОбработатьРезультатЗапроса(РезультатЗапроса, ПараметрыЗаполнения, ДокументыНачисления)
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Детализация = Перечисления.ДетализацияРасчетаУчастниковРетроБонусов;
		
		Если ПараметрыЗаполнения.ДетализацияРасчетаУчастников = Детализация.ПоКонтрагентуКлиенту Тогда
			
			ВыборкаКонтрагент = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаКонтрагент.Следующий() Цикл
				
				ВыборкаШапка = ВыборкаКонтрагент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				СоздатьДокументПоДаннымВыборки(ВыборкаШапка, ПараметрыЗаполнения, ДокументыНачисления)
				
			КонецЦикла;
			
		ИначеЕсли ПараметрыЗаполнения.ДетализацияРасчетаУчастников = Детализация.ПоКонтрагенту
		      ИЛИ ПараметрыЗаполнения.ДетализацияРасчетаУчастников = Детализация.ПоКлиенту Тогда
			
			ВыборкаШапка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			СоздатьДокументПоДаннымВыборки(ВыборкаШапка, ПараметрыЗаполнения, ДокументыНачисления)
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  РезультатЗапроса - РезультатЗапроса
//  ДокументыНачисления - см. НоваяТаблицаДокументовНачисления
//
Процедура ПометитьНаУдалениеДокументыНачисления(РезультатЗапроса, ДокументыНачисления)
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			РезультатПометкиУдаления = ПометитьДокументНаУдаление(Выборка.ДокументНачисления);
			НоваяСтрока = ДокументыНачисления.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			Если РезультатПометкиУдаления = Неопределено Тогда
				НоваяСтрока.ПометкаУдаления = Истина;
			Иначе
				
				НоваяСтрока.ПометкаУдаления = Ложь;
				НоваяСтрока.ОписаниеОшибки = РезультатПометкиУдаления.ОписаниеОшибки;
				НоваяСтрока.Сообщения = Новый ФиксированныйМассив(РезультатПометкиУдаления.Сообщения);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Выборка - ВыборкаИзРезультатаЗапроса
//  ПараметрыЗаполнения - см. ПараметрыЗаполненияТаблицыНачислений
//  ДокументыНачисления - см. НоваяТаблицаДокументовНачисления
//
Процедура СоздатьДокументПоДаннымВыборки(Выборка, ПараметрыЗаполнения, ДокументыНачисления)
	
	Пока Выборка.Следующий() Цикл
		
		СозданныйДокумент = СформироватьДокументНачисления(Выборка, ПараметрыЗаполнения);
		СтрокаДокумента = ДокументыНачисления.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДокумента, Выборка);
		СтрокаДокумента.ДокументНачисления = СозданныйДокумент;
		СтрокаДокумента.СуммаНачисленная = Выборка.СуммаБонусНачисленный;
		СтрокаДокумента.СуммаРасчетная = Выборка.СуммаБонусРасчетный;
		СтрокаДокумента.СуммаКНачислению = 0;
		
	КонецЦикла;
			
КонецПроцедуры

// Параметры:
//  ДанныеДокумента - ВыборкаИзРезультатаЗапроса
//  ПараметрыЗаполнения - см. ПараметрыЗаполненияТаблицыНачислений
// 
// Возвращаемое значение:
//  ДокументСсылка.НачислениеРетроБонусовКлиента
//
Функция СформироватьДокументНачисления(ДанныеДокумента, ПараметрыЗаполнения)
	
	ДокументНачисления = ДанныеДокумента.ДокументНачисления; // ДокументСсылка.НачислениеРетроБонусовКлиента
	
	Если ДокументНачисления.Пустая() Тогда
		
		ДокументОбъект = Документы.НачислениеРетроБонусовКлиента.СоздатьДокумент();
		ДокументОбъект.Заполнить(ПараметрыЗаполнения.ДокументУсловий);
		
	Иначе
		
		ДокументОбъект = ДокументНачисления.ПолучитьОбъект();
		Если ДокументОбъект.ПометкаУдаления Тогда
			ДокументОбъект.УстановитьПометкуУдаления(Ложь);
		КонецЕсли;
		
		ДокументОбъект.Начисления.Очистить();
		Если ДокументОбъект.Проведен Тогда
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект, ДанныеДокумента);
	
	ДокументОбъект.Дата = ПараметрыЗаполнения.ДатаСозданияДокументов;
	ДокументОбъект.Организация = ПараметрыЗаполнения.Организация;
	ДокументОбъект.НачалоПериода = ПараметрыЗаполнения.НачалоПериода;
	ДокументОбъект.ОкончаниеПериода = ПараметрыЗаполнения.ОкончаниеПериода;
	ДокументОбъект.Валюта = ПараметрыЗаполнения.Валюта;
	
	Детализация = ПараметрыЗаполнения.ДетализацияРасчетаУчастников;
	
	ДетальныеДанные = ДанныеДокумента.Выбрать();
	Пока ДетальныеДанные.Следующий() Цикл
		
		НоваяСтрока = ДокументОбъект.Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДетальныеДанные);
		
		Если Детализация = Перечисления.ДетализацияРасчетаУчастниковРетроБонусов.ПоКонтрагенту
		   И НЕ ЗначениеЗаполнено(НоваяСтрока.Партнер) Тогда
			
			НоваяСтрока.Партнер = ДетальныеДанные.ПартнерКонтрагента;
			
		КонецЕсли;
		
		Если НЕ ПараметрыЗаполнения.БезРасчета Тогда
			
			ВыручкаПоСтроке = ДетальныеДанные[ПараметрыЗаполнения.ИмяКолонкиВыручка]; // ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака
			НоваяСтрока.Выручка = ВыручкаПоСтроке;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции

// Формирует документы начисления по данным АРМ
// 
// Параметры:
//  ДанныеДляФормирования - см. НовыеДанныеДляФормированияДокументовНачисления
//  ПараметрыРасчета - см. Отчеты.РасчетРетроБонусовКлиентов.ПараметрыРасчетаРетроБонусов
//  ПараметрыФормирования - см. ПараметрыФормированияДокументов
//
// Возвращаемое значение:
//  см. НоваяТаблицаДокументовНачисления
//
Функция СформироватьДокументыНачисленияБезПроведения(ДанныеДляФормирования, ПараметрыРасчета, ПараметрыФормирования)
	
	ОбработанныеДокументы = НоваяТаблицаДокументовНачисления();
	
	ПараметрыЗаполнения = ПараметрыЗаполненияТаблицыНачислений();
	ПараметрыЗаполнения.ДокументУсловий = ПараметрыРасчета.ДокументУсловий;
	ПараметрыЗаполнения.Валюта = ПараметрыРасчета.Валюта;
	ПараметрыЗаполнения.ДатаСозданияДокументов = ПараметрыРасчета.ДатаСозданияДокументов;
	ПараметрыЗаполнения.Организация = ПараметрыРасчета.Организация;
	ПараметрыЗаполнения.НачалоПериода = ПараметрыРасчета.ДатаНачала;
	ПараметрыЗаполнения.ОкончаниеПериода = ПараметрыРасчета.ДатаОкончания;
	ПараметрыЗаполнения.ДетализацияРасчетаУчастников = ПараметрыФормирования.ДетализацияРасчетаУчастников;
	ПараметрыЗаполнения.ДетализацияДоДокументаПродажи = Истина;
	ПараметрыЗаполнения.ИмяКолонкиВыручка = ПараметрыФормирования.ИмяКолонкиВыручка;
	ПараметрыЗаполнения.БезРасчета = ПараметрыФормирования.БезРасчета;
	ПараметрыЗаполнения.ТаблицаБонусов =
		Отчеты.РасчетРетроБонусовКлиентов.РетроБонусыЗаПериодПоДокументамПродажи(ПараметрыРасчета);
	
	ТаблицаДокументов = ТаблицаДокументовНачисленияПоДаннымСистемы(ПараметрыЗаполнения);
	
	Если ДанныеДляФормирования.ЗаполнитьПоДаннымСистемы.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаПоДаннымСистемы(ПараметрыФормирования.ДетализацияРасчетаУчастников);
		Запрос.УстановитьПараметр("ИсходныеДанные", ДанныеДляФормирования.ЗаполнитьПоДаннымСистемы);
		Запрос.УстановитьПараметр("ДанныеСистемы", ТаблицаДокументов);
		
		РезультатЗапроса = Запрос.Выполнить();
		ОбработатьРезультатЗапроса(РезультатЗапроса, ПараметрыЗаполнения, ОбработанныеДокументы);
		
	КонецЕсли;
	
	Если ДанныеДляФормирования.ЗаполнитьСКорректировкой.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаСКорректировкой(ПараметрыФормирования.ДетализацияРасчетаУчастников);
		Запрос.УстановитьПараметр("ИсходныеДанные", ДанныеДляФормирования.ЗаполнитьСКорректировкой);
		Запрос.УстановитьПараметр("ДанныеСистемы", ТаблицаДокументов);
		
		РезультатЗапроса = Запрос.Выполнить();
		ОбработатьРезультатЗапроса(РезультатЗапроса, ПараметрыЗаполнения, ОбработанныеДокументы);
		
	КонецЕсли;
	
	Если ДанныеДляФормирования.ЗаполнитьПоДаннымСтроки.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаПоДаннымСтроки(ПараметрыФормирования.ДетализацияРасчетаУчастников);
		Запрос.УстановитьПараметр("ИсходныеДанные", ДанныеДляФормирования.ЗаполнитьПоДаннымСтроки);
		
		РезультатЗапроса = Запрос.Выполнить();
		ОбработатьРезультатЗапроса(РезультатЗапроса, ПараметрыЗаполнения, ОбработанныеДокументы);
		
	КонецЕсли;
	
	Если ДанныеДляФормирования.ПометитьНаУдаление.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаПометитьНаУдаление(ПараметрыФормирования.ДетализацияРасчетаУчастников);
		ОбщегоНазначенияУТ.УстановитьПараметрыЗапроса(Запрос, ПараметрыЗаполнения);
		Запрос.УстановитьПараметр("ИсходныеДанные", ДанныеДляФормирования.ПометитьНаУдаление);
		
		РезультатЗапроса = Запрос.Выполнить();
		ПометитьНаУдалениеДокументыНачисления(РезультатЗапроса, ОбработанныеДокументы);
		
	КонецЕсли;
	
	Возврат ОбработанныеДокументы;
	
КонецФункции

// Параметры:
//  ДокументыНачисления - см. НоваяТаблицаДокументовНачисления
//
Процедура ПровестиДокументыНачисления(ДокументыНачисления)
	
	Для Каждого СтрокаДокумента Из ДокументыНачисления Цикл
		
		Если НЕ СтрокаДокумента.ПометкаУдаления Тогда
			
			РезультатПроведения = ПровестиДокумент(СтрокаДокумента.ДокументНачисления);
			Если РезультатПроведения = Неопределено Тогда
				СтрокаДокумента.Проведен = Истина;
			Иначе
				
				СтрокаДокумента.Проведен = Ложь;
				СтрокаДокумента.ОписаниеОшибки = РезультатПроведения.ОписаниеОшибки;
				СтрокаДокумента.Сообщения = Новый ФиксированныйМассив(РезультатПроведения.Сообщения);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет попытку проведения документа.
//
// Параметры:
//  Документ - ДокументСсылка.НачислениеРетроБонусовКлиента
//
// Возвращаемое значение:
//  Неопределено -
//  Структура:
//   * ОписаниеОшибки - Строка  - текст описания ошибки при проведении.
//   * Сообщения - Массив из Строка -
//
Функция ПровестиДокумент(Документ)
	
	Результат = Неопределено;
	ВыполненоУспешно = Ложь;
	
	ДокументОбъект = Документ.ПолучитьОбъект();
	Если ДокументОбъект.ПроверитьЗаполнение() Тогда
		
		Попытка
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			ВыполненоУспешно = Истина;
			
		Исключение
			
			ПредставлениеОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если Не ВыполненоУспешно Тогда
		
		ТекстыСообщений = ТекстыСообщенийЗаписиДокумента();
		
		Результат = Новый Структура;
		Результат.Вставить("ОписаниеОшибки", ПредставлениеОшибки);
		Результат.Вставить("Сообщения", ТекстыСообщений);
		
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции 

// Выполняет попытку пометки документа на удаление.
//
// Параметры:
//  Документ - ДокументСсылка.НачислениеРетроБонусовКлиента
//
// Возвращаемое значение:
//  Неопределено -
//  Структура:
//   * ОписаниеОшибки - Строка  - текст описания ошибки при проведении.
//   * Сообщения - Массив из Строка -
//
Функция ПометитьДокументНаУдаление(Документ)
	
	Результат = Неопределено;
	
	ДокументОбъект = Документ.ПолучитьОбъект();
	
	Попытка
		
		ДокументОбъект.УстановитьПометкуУдаления(Истина);
		
	Исключение
		
		ПредставлениеОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстыСообщений = ТекстыСообщенийЗаписиДокумента();
		
		Результат = Новый Структура;
		Результат.Вставить("ОписаниеОшибки", ПредставлениеОшибки);
		Результат.Вставить("Сообщения", ТекстыСообщений);
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции 

Функция ТекстыСообщенийЗаписиДокумента()
	
	Сеанс = ПолучитьТекущийСеансИнформационнойБазы();
	ФоновоеЗадание = Сеанс.ПолучитьФоновоеЗадание();
	Если ФоновоеЗадание = Неопределено Тогда
		ИдентификаторФоновогоЗадания = Неопределено;
	Иначе
		ИдентификаторФоновогоЗадания = ФоновоеЗадание.УникальныйИдентификатор;
	КонецЕсли;
	Сообщения = ДлительныеОперации.СообщенияПользователю(Истина, ИдентификаторФоновогоЗадания);
	
	ТекстыСообщений = Новый Массив; // Массив из Строка
	Для Каждого Сообщение Из Сообщения Цикл
		
		ТекстыСообщений.Добавить(Сообщение.Текст);
		
	КонецЦикла;
	
	Возврат ТекстыСообщений;
	
КонецФункции

#КонецОбласти

#КонецЕсли
