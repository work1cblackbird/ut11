#Область ОписаниеПеременных

&НаКлиенте
Перем ВыполняетсяЗакрытие;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Документ = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Предусмотрено открытие обработки только из документов.'");
	КонецЕсли;
	
	КодФормы = "Обработка_ПодборПоТоварнымКатегориям_Форма";
	ВариантПоискаТоваров = "Расширенный";
	
	ОбъектПланирования = Параметры.ОбъектПланирования;
	Этап = Параметры.Этап;
	Стадия = Параметры.Стадия;
	КоллекцияНоменклатуры = Параметры.КоллекцияНоменклатуры;
	ДатаНачалаДействия = Параметры.ДатаНачалаДействия;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеКоллекциями") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокНоменклатура, "Ссылка.КоллекцияНоменклатуры", КоллекцияНоменклатуры, ВидСравненияКомпоновкиДанных.Равно,,Истина);
	КонецЕсли; 
	
	СохраненныеНастройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ПодборТоваровПоКатегориямНастройкиФормы", "");
	Если СохраненныеНастройки = Неопределено Тогда
		ПоказыватьПодобранныеТовары = Истина;
	Иначе
		Если СохраненныеНастройки.Свойство("ПоказыватьПодобранныеТовары") Тогда
			ПоказыватьПодобранныеТовары = СохраненныеНастройки.ПоказыватьПодобранныеТовары;
		КонецЕсли;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНоменклатура, "НаДату", ДатаНачалаДействия, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНоменклатура, "ОбъектПланирования", ОбъектПланирования, Истина);
	ВидЦены = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектПланирования, "РозничныйВидЦены");
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНоменклатура, "ВидЦены", ВидЦены, Истина);
	
	Если Параметры.ФормироватьДеревоПриОткрытии Тогда
		СформироватьДеревоКатегорийСервер();
	КонецЕсли;
	
	Если Параметры.Свойство("АдресТоваровВХранилище") Тогда
		ВременнаяТаблицаТовары = ПолучитьИзВременногоХранилища(Параметры.АдресТоваровВХранилище);
		Объект.ТаблицаВыбранныхТоваров.Загрузить(ВременнаяТаблицаТовары);
		
		УстановитьОтборСпискаНоменклатурыПоВыбранномуТовару(ЭтаФорма);
		
		Для каждого ДанныеСтроки Из Объект.ТаблицаВыбранныхТоваров Цикл
			ОбновитьНаполнениеСУчетомПодбораВДереве(ДанныеСтроки.СтадияАссортимента, ДанныеСтроки.ТоварнаяКатегория, ДанныеСтроки.Марка, 1);
		КонецЦикла; 
	КонецЕсли; 
	
	ЭтаФорма.Заголовок = НСтр("ru = 'Подбор по категориям'");
	Элементы.ФормаПеренестиВДокумент.Видимость = Истина;
	Элементы.ФормаПеренестиВДокумент.КнопкаПоУмолчанию = Истина;
	
	Элементы.ОбластьПодобранныеТовары.Видимость = ПоказыватьПодобранныеТовары;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьИнформационнуюНадписьКоличестваТоваров();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ВыполняетсяЗакрытие И НЕ ПеренестиВДокумент И Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru = 'Состав выбранных товаров был изменен.
								|Перенести выбранные позиции в документ?'");
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект), ТекстВопроса,РежимДиалогаВопрос.ДаНетОтмена);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПеренестиВДокумент = Истина;
		ВыполняетсяЗакрытие = Истина;
		Закрыть();
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		ВыполняетсяЗакрытие = Истина;
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗакрытия = Новый Структура;
	ПараметрыЗакрытия.Вставить("ПоказыватьПодобранныеТовары", ПоказыватьПодобранныеТовары);
	ХранилищеОбщихНастроекСохранить(ПараметрыЗакрытия);
	
	Если ПеренестиВДокумент Тогда
		СтруктураАдресов = ПоместитьТоварыВХранилище();
		ОповеститьОВыборе(СтруктураАдресов);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	ВыполнитьПоиск();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаПоискаНоменклатура = "";
	
	СнятьОтборПоСтрокеПоискаНоменклатурыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	СпискиВыбораКлиентСервер.АвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформационнаяНадписьНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказыватьПодобранныеТовары = НЕ ПоказыватьПодобранныеТовары;
	Элементы.ОбластьПодобранныеТовары.Видимость = ПоказыватьПодобранныеТовары;
	ОбновитьИнформационнуюНадписьКоличестваТоваров();
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиПоТочномуСоответствиюПриИзменении(Элемент)
	
	ВыполнитьПоиск();
	
КонецПроцедуры

&НаКлиенте
Процедура КатегорииПриИзменении(Элемент)
	
	Если Категории = 1 
		И Элементы.ДеревоКатегорий.ТекущаяСтрока <> Неопределено
		И НЕ ДеревоКатегорий.НайтиПоИдентификатору(Элементы.ДеревоКатегорий.ТекущаяСтрока).КвотаНенаполнена Тогда
		
		Элементы.ДеревоКатегорий.ТекущаяСтрока = Неопределено;
		Для каждого СтрокаДерева Из ДеревоКатегорий.ПолучитьЭлементы() Цикл
		
			Если СтрокаДерева.КвотаНенаполнена Тогда
			
				Элементы.ДеревоКатегорий.ТекущаяСтрока = СтрокаДерева.ПолучитьИдентификатор();
				Прервать;
			
			КонецЕсли; 
		
		КонецЦикла; 
		
	
	ИначеЕсли Категории = 2
		И Элементы.ДеревоКатегорий.ТекущаяСтрока <> Неопределено
		И НЕ ДеревоКатегорий.НайтиПоИдентификатору(Элементы.ДеревоКатегорий.ТекущаяСтрока).КвотаПереполнена Тогда
		
		Элементы.ДеревоКатегорий.ТекущаяСтрока = Неопределено;
		Для каждого СтрокаДерева Из ДеревоКатегорий.ПолучитьЭлементы() Цикл
		
			Если СтрокаДерева.КвотаПереполнена Тогда
			
				Элементы.ДеревоКатегорий.ТекущаяСтрока = СтрокаДерева.ПолучитьИдентификатор();
				Прервать;
			
			КонецЕсли; 
		
		КонецЦикла;
	
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокРасширенныйПоискНоменклатура

&НаКлиенте
Процедура СписокРасширенныйПоискНоменклатураВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаТаблицы = Элемент.ТекущиеДанные;
	
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТаблицы.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	СписокВыбранныхТоваров = Новый Массив;
	СписокВыбранныхТоваров.Добавить(ДанныеТовара(СтрокаТаблицы));
	ПроверитьИДобавитьТоварыВКорзину(СписокВыбранныхТоваров);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРасширенныйПоискНоменклатураПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРасширенныйПоискНоменклатураНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
	
	ПолучитьДанныеПеретаскивания(ПараметрыПеретаскивания);   
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРасширенныйПоискНоменклатураПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Структура") 
		И ПараметрыПеретаскивания.Значение.Свойство("МассивКлючейСтрокВыбранныхТоваров") Тогда
		
		УдалитьВыбранныеТоварыПоКлючуНаСервере(ПараметрыПеретаскивания.Значение.МассивКлючейСтрокВыбранныхТоваров);
		
		ПослеУдаленияСтрокИзТаблицыВыбранныхТоваров();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревокатегорий

&НаКлиенте
Процедура ДеревоКатегорийПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("УстановитьОтборПоТекущейСтрокеДереваОбработчикОжидания", 0.2, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаВыбранныхТоваров

&НаКлиенте
Процедура ТаблицаВыбранныхТоваровПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВыбранныхТоваровПередУдалением(Элемент, Отказ)
	
	// Запомним данные удаляемых строк, т.к. после удаления нужно обновить данные на форме.
	Для каждого ИдентификаторСтроки Из Элементы.ТаблицаВыбранныхТоваров.ВыделенныеСтроки Цикл
		ДанныеСтроки = Объект.ТаблицаВыбранныхТоваров.НайтиПоИдентификатору(ИдентификаторСтроки);
		ЗаполнитьЗначенияСвойств(УдаленныеСтрокиИзТаблицыВыбранныхТоваров.Добавить(), ДанныеСтроки);
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВыбранныхТоваровПослеУдаления(Элемент)
	
	ПослеУдаленияСтрокИзТаблицыВыбранныхТоваров();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВыбранныхТоваровНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
	
	МассивКлючейСтрок = Новый Массив; 
	
	Для каждого КлючСтроки Из ПараметрыПеретаскивания.Значение Цикл
		МассивКлючейСтрок.Добавить(КлючСтроки);
	КонецЦикла;
	
	ПараметрыПеретаскивания.Значение = Новый Структура("МассивКлючейСтрокВыбранныхТоваров", МассивКлючейСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВыбранныхТоваровПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	НеОбрабатывать = Истина;
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Структура") 
		ИЛИ ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив")
			И ПараметрыПеретаскивания.Значение.Количество() <> 0
			И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Структура") Тогда
		НеОбрабатывать = Ложь;
	КонецЕсли;
	
	Если НеОбрабатывать Тогда
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВыбранныхТоваровПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	ПроверитьИДобавитьТоварыВКорзину(ПараметрыПеретаскивания.Значение);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)
	ПеренестиВДокумент = Истина;
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура Поиск(Команда)
	
	ВыполнитьПоиск();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуТовара(Команда)
	
	ТекущаяСтрока = Элементы.СписокРасширенныйПоискНоменклатура.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ПоказатьЗначение(Неопределено, ТекущаяСтрока.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНоменклатуру(Команда)
	
	ПодборТоваровКлиент.ОткрытьКарточкуТовара(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтрокаПоискаНоменклатура.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПодборПоискНеУдачный");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ОшибкаПолнотекстовыйПоискФон);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоКатегорийПредставление.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоКатегорийВсегоНоменклатуры.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоКатегорийНаполнение.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоКатегорийНаполнениеСУчетомПодбора.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоКатегорийКвота.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Категории");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоКатегорий.КвотаНенаполнена");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоКатегорийПредставление.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоКатегорийВсегоНоменклатуры.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоКатегорийНаполнение.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоКатегорийНаполнениеСУчетомПодбора.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоКатегорийКвота.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Категории");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 2;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоКатегорий.КвотаПереполнена");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаТоваровМарка.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокНоменклатура.Марка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Прочие марки'"));
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаВыбранныхТоваровМарка.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТаблицаВыбранныхТоваров.Марка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Прочие марки'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВыбранныхТоваровПриИзменении()
	
	ОбновитьИнформационнуюНадписьКоличестваТоваров();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоТекущейСтрокеДереваОбработчикОжидания()
	
	ТекущаяСтрокаДерева = Элементы.ДеревоКатегорий.ТекущиеДанные;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокНоменклатура, "ОтборВидНоменклатуры",,,,Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокНоменклатура, "ОтборТоварнаяКатегория",,,,Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокНоменклатура, "ОтборМарка",,,,Ложь);
	
	Если ТекущаяСтрокаДерева<>Неопределено Тогда
		Если ТипЗнч(ТекущаяСтрокаДерева.ВидКатегорияМарка) = Тип("СправочникСсылка.ВидыНоменклатуры") Тогда
			Если ТекущаяСтрокаДерева.ЭтоГруппаВидов Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
					СписокНоменклатура,
					"ОтборВидНоменклатуры",
					ТекущаяСтрокаДерева.ВидКатегорияМарка,
					ВидСравненияКомпоновкиДанных.ВИерархии,,
					Истина);
			Иначе
				НайденныеДополнительныеВиды = ДополнительныеВиды.Получить(ТекущаяСтрокаДерева.ВидКатегорияМарка); // ФиксированныйМассив из ФиксированнаяСтруктура
				
				Если НайденныеДополнительныеВиды = Неопределено Тогда 
					ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
						СписокНоменклатура,
						"ОтборВидНоменклатуры",
						ТекущаяСтрокаДерева.ВидКатегорияМарка,
						ВидСравненияКомпоновкиДанных.Равно,,
						Истина);
				Иначе
					
					СписокВидов = Новый СписокЗначений;
					СписокВидов.Добавить(ТекущаяСтрокаДерева.ВидКатегорияМарка);
					
					Для Каждого ДополнительныйВид Из НайденныеДополнительныеВиды Цикл
						СписокВидов.Добавить(ДополнительныйВид.СсылкаВидаНоменклатуры);
					КонецЦикла;
					
					ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
						СписокНоменклатура,
						"ОтборВидНоменклатуры",
						СписокВидов,
						ВидСравненияКомпоновкиДанных.ВСписке,,
						Истина);
				КонецЕсли;
				
			КонецЕсли;
		ИначеЕсли ТипЗнч(ТекущаяСтрокаДерева.ВидКатегорияМарка) = Тип("СправочникСсылка.ТоварныеКатегории") Тогда
			Если ТекущаяСтрокаДерева.ЭтоГруппаКатегорий Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
					СписокНоменклатура,
					"ОтборТоварнаяКатегория",
					ТекущаяСтрокаДерева.ВидКатегорияМарка,
					ВидСравненияКомпоновкиДанных.ВИерархии,,
					Истина);
			Иначе
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
					СписокНоменклатура,
					"ОтборТоварнаяКатегория",
					ТекущаяСтрокаДерева.ВидКатегорияМарка,
					ВидСравненияКомпоновкиДанных.Равно,,
					Истина);
			КонецЕсли;
		ИначеЕсли ТипЗнч(ТекущаяСтрокаДерева.ВидКатегорияМарка) = Тип("СправочникСсылка.Марки")
			ИЛИ ТипЗнч(ТекущаяСтрокаДерева.ВидКатегорияМарка) = Тип("Строка") Тогда
			РодительСтрокиДерева = ТекущаяСтрокаДерева.ПолучитьРодителя();
			Если РодительСтрокиДерева<>Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
					СписокНоменклатура,
					"ОтборТоварнаяКатегория",
					РодительСтрокиДерева.ВидКатегорияМарка,
					ВидСравненияКомпоновкиДанных.Равно,,
					Истина);
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокНоменклатура,
				"ОтборМарка",
				ТекущаяСтрокаДерева.ВидКатегорияМарка,
				ВидСравненияКомпоновкиДанных.Равно,,
				Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаПоискаНоменклатура) Тогда
		ВыполнитьПоиск();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоКатегорийСервер()
	
	Запрос = Новый Запрос;
	Запрос.Текст  = 
	"ВЫБРАТЬ
	|	Квоты.ТоварнаяКатегория КАК ТоварнаяКатегория,
	|	Квоты.Марка КАК Марка,
	|	Квоты.Квота КАК Квота,
	|	Квоты.ПроцентОтклонения КАК ПроцентОтклонения
	|ПОМЕСТИТЬ втПланКатегории
	|ИЗ
	|	РегистрСведений.КвотыАссортимента.СрезПоследних(
	|			&НаДату,
	|			ОбъектПланирования = &ОбъектПланирования
	|				И Период В
	|					(ВЫБРАТЬ
	|						МАКСИМУМ(К.Период)
	|					ИЗ
	|						РегистрСведений.КвотыАссортимента КАК К
	|					ГДЕ
	|						К.Период <=  &НаДату
	|						И К.ОбъектПланирования = &ОбъектПланирования
	|						И &ОтборКоллекции2)
	|				И &ОтборКоллекции1) КАК Квоты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТоварнаяКатегория,
	|	Марка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СправочникНоменклатура.Ссылка КАК Ссылка,
	|	СправочникНоменклатура.ТоварнаяКатегория КАК ТоварнаяКатегория,
	|	СправочникНоменклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	|	ЕСТЬNULL(ПланКатегории.Марка, ЗНАЧЕНИЕ(Справочник.Марки.ПустаяСсылка)) КАК Марка,
	|	ЕСТЬNULL(ПланКатегории.Квота, 0) КАК Квота,
	|	Ассортимент.Номенклатура КАК НоменклатураНаполнения,
	|	ЕСТЬNULL(Ассортимент.РольАссортимента, ЗНАЧЕНИЕ(Перечисление.РолиАссортимента.ПустаяСсылка)) КАК РольАссортимента,
	|	ЕСТЬNULL(Ассортимент.РазрешеныЗакупки, ЛОЖЬ) КАК РазрешеныЗакупки,
	|	ЕСТЬNULL(Ассортимент.РазрешеныПродажи, ЛОЖЬ) КАК РазрешеныПродажи,
	|	Ассортимент.ВидЦены КАК ВидЦены
	|ПОМЕСТИТЬ втТекущийАссортимент
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Ассортимент.СрезПоследних(КОНЕЦПЕРИОДА(&НаДату, ДЕНЬ), ОбъектПланирования = &ОбъектПланирования) КАК Ассортимент
	|		ПО (Ассортимент.Номенклатура = СправочникНоменклатура.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПланКатегории КАК ПланКатегории
	|		ПО СправочникНоменклатура.ТоварнаяКатегория = ПланКатегории.ТоварнаяКатегория
	|			И СправочникНоменклатура.Марка = ПланКатегории.Марка
	|ГДЕ
	|	НЕ СправочникНоменклатура.ЭтоГруппа
	|	И &ОтборКоллекции3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТекущийАссортимент.ВидНоменклатуры,
	|	ТекущийАссортимент.ТоварнаяКатегория,
	|	ТекущийАссортимент.Марка,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТекущийАссортимент.Ссылка) КАК ВсегоНоменклатурыВКатегории,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТекущийАссортимент.НоменклатураНаполнения) КАК НаполнениеКатегории
	|ПОМЕСТИТЬ втИтогиПоКатегориям
	|ИЗ
	|	втТекущийАссортимент КАК ТекущийАссортимент
	|
	|СГРУППИРОВАТЬ ПО
	|	ТекущийАссортимент.ВидНоменклатуры,
	|	ТекущийАссортимент.ТоварнаяКатегория,
	|	ТекущийАссортимент.Марка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТекущийАссортимент.ВидНоменклатуры,
	|	ТекущийАссортимент.ТоварнаяКатегория,
	|	ТекущийАссортимент.Марка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СправочникКатегории.Владелец КАК ВидНоменклатуры,
	|	СправочникКатегории.Ссылка КАК ТоварнаяКатегория,
	|	ЕСТЬNULL(ПланКатегории.Марка, ЗНАЧЕНИЕ(Справочник.Марки.ПустаяСсылка)) КАК Марка,
	|	ЕСТЬNULL(ПланКатегории.Марка.Наименование, &ТекстПрочиеМарки) КАК НаименованиеМарки,
	|	ЕСТЬNULL(ПланКатегории.Квота, 0) КАК Квота,
	|	ЕСТЬNULL(ПланКатегории.ПроцентОтклонения, 0) КАК ПроцентОтклонения
	|ПОМЕСТИТЬ втКатегории
	|ИЗ
	|	Справочник.ТоварныеКатегории КАК СправочникКатегории
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПланКатегории КАК ПланКатегории
	|		ПО СправочникКатегории.Ссылка = ПланКатегории.ТоварнаяКатегория
	|ГДЕ
	|	НЕ СправочникКатегории.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварныеКатегории.ВидНоменклатуры КАК ВидНоменклатуры,
	|	ВидыНоменклатуры.Наименование КАК НаименованиеДополнительногоВидаНоменклатуры,
	|	ВидыНоменклатуры.Ссылка КАК ДополнительныйВидНоменклатуры
	|ИЗ
	|	втКатегории КАК ТоварныеКатегории
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО ТоварныеКатегории.ВидНоменклатуры = ВидыНоменклатуры.ВладелецТоварныхКатегорий
	|УПОРЯДОЧИТЬ ПО
	|	ВидНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКатегории.ВидНоменклатуры КАК ВидНоменклатуры,
	|	втКатегории.ВидНоменклатуры.Наименование КАК НаименованиеВидаНоменклатуры,
	|	втКатегории.ВидНоменклатуры.ЭтоГруппа КАК ЭтоГруппаВидов,
	|	втКатегории.ТоварнаяКатегория КАК ТоварнаяКатегория,
	|	втКатегории.ТоварнаяКатегория.Наименование КАК НаименованиеКатегории,
	|	втКатегории.ТоварнаяКатегория.ЭтоГруппа КАК ЭтоГруппаКатегорий,
	|	втКатегории.Марка КАК Марка,
	|	втКатегории.НаименованиеМарки КАК НаименованиеМарки,
	|	втКатегории.Квота КАК Квота,
	|	втКатегории.ПроцентОтклонения КАК ПроцентОтклонения,
	|	ИтогиПоКатегориям.ВсегоНоменклатурыВКатегории КАК ВсегоНоменклатуры,
	|	ИтогиПоКатегориям.НаполнениеКатегории КАК Наполнение
	|ИЗ
	|	втКатегории КАК втКатегории
	|		ЛЕВОЕ СОЕДИНЕНИЕ втИтогиПоКатегориям КАК ИтогиПоКатегориям
	|		ПО втКатегории.ВидНоменклатуры = ИтогиПоКатегориям.ВидНоменклатуры
	|			И втКатегории.ТоварнаяКатегория = ИтогиПоКатегориям.ТоварнаяКатегория
	|			И втКатегории.Марка = ИтогиПоКатегориям.Марка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НаименованиеВидаНоменклатуры,
	|	НаименованиеКатегории,
	|	НаименованиеМарки
	|ИТОГИ
	|	МАКСИМУМ(НаименованиеМарки),
	|	СУММА(Квота),
	|	0 КАК ПроцентОтклонения,
	|	СУММА(ВсегоНоменклатуры),
	|	СУММА(Наполнение)
	|ПО
	|	ВидНоменклатуры ИЕРАРХИЯ,
	|	ТоварнаяКатегория ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("ОбъектПланирования", ОбъектПланирования);
	Запрос.УстановитьПараметр("НаДату", ДатаНачалаДействия);
	Запрос.УстановитьПараметр("ТекстПрочиеМарки", НСтр("ru = 'Прочие марки'"));
	
	ОтборКоллекции1 = "ИСТИНА";
	ОтборКоллекции2 = "ИСТИНА";
	ОтборКоллекции3 = "ИСТИНА";
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеКоллекциями") Тогда
	
		ОтборКоллекции1 = " КоллекцияНоменклатуры = &КоллекцияНоменклатуры";
		ОтборКоллекции2 = " К.КоллекцияНоменклатуры = &КоллекцияНоменклатуры";
		ОтборКоллекции3 = " СправочникНоменклатура.КоллекцияНоменклатуры = &КоллекцияНоменклатуры";
		Запрос.УстановитьПараметр("КоллекцияНоменклатуры", КоллекцияНоменклатуры);
	
	КонецЕсли; 
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборКоллекции1", ОтборКоллекции1);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборКоллекции2", ОтборКоллекции2);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборКоллекции3", ОтборКоллекции3);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаПоДопВидамРезультатЗапроса = РезультатЗапроса[РезультатЗапроса.Количество() - 2]; // РезультатЗапроса - 
	ВыборкаПоДопВидам = ВыборкаПоДопВидамРезультатЗапроса.Выбрать();
	
	Если ВыборкаПоДопВидам.Следующий() Тогда
		ДополнительныеВидыСоответсвие = Новый Соответствие;
		
		ТекущийВид = ВыборкаПоДопВидам.ВидНоменклатуры; 
		МассивДопВидов = Новый Массив;
		
		ВыборкаПоДопВидам.Сбросить();
		Пока ВыборкаПоДопВидам.Следующий() Цикл
			
			Если ВыборкаПоДопВидам.ВидНоменклатуры <> ТекущийВид Тогда
				
				ДополнительныеВидыСоответсвие.Вставить(ТекущийВид, Новый ФиксированныйМассив(МассивДопВидов));
				МассивДопВидов = Новый Массив;
				
			КонецЕсли;
			
			ОписаниеДопВида = Новый Структура;
			ОписаниеДопВида.Вставить("СсылкаВидаНоменклатуры",ВыборкаПоДопВидам.ДополнительныйВидНоменклатуры); 
			ОписаниеДопВида.Вставить("НаименованиеВидаНоменклатуры",ВыборкаПоДопВидам.НаименованиеДополнительногоВидаНоменклатуры); 
			
			МассивДопВидов.Добавить(Новый ФиксированнаяСтруктура(ОписаниеДопВида));
			
		КонецЦикла;	
		ДополнительныеВидыСоответсвие.Вставить(ТекущийВид, Новый ФиксированныйМассив(МассивДопВидов));
		
		ДополнительныеВиды = Новый ФиксированноеСоответствие(ДополнительныеВидыСоответсвие);
	Иначе
		ДополнительныеВиды = Новый ФиксированноеСоответствие(Новый Соответствие);
	КонецЕсли;
		
	ЗаполнитьДеревоПоРезультатуЗапроса(РезультатЗапроса[РезультатЗапроса.Количество() - 1]);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоПоРезультатуЗапроса(РезультатЗапроса)
	
	ДеревоОбъект = РеквизитФормыВЗначение("ДеревоКатегорий",Тип("ДеревоЗначений"));
	ДеревоОбъект.Строки.Очистить();
	
	ДеревоРезультат = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ЗаполнитьПодчиненныеСтроки(ДеревоОбъект, ДеревоРезультат);
	
	ЗначениеВРеквизитФормы(ДеревоОбъект,"ДеревоКатегорий");
	Элементы.ДеревоКатегорий.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВерхнийУровень;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодчиненныеСтроки(ПриемникРодитель, ИсточникРодитель)
	
	Для Каждого СтрокаИсточника Из ИсточникРодитель.Строки Цикл
		СтрокаПриемника = ПриемникРодитель.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПриемника,СтрокаИсточника);
		СтрокаПриемника.НаполнениеСУчетомПодбора = СтрокаИсточника.Наполнение;
		
		Если СтрокаИсточника.Марка <> Null Тогда
			Если ЗначениеЗаполнено(СтрокаИсточника.Марка) Тогда
				СтрокаПриемника.ВидКатегорияМарка = СтрокаИсточника.Марка;
				СтрокаПриемника.Представление = СтрокаИсточника.НаименованиеМарки;
			Иначе
				СтрокаПриемника.ВидКатегорияМарка = Справочники.Марки.ПустаяСсылка();
				СтрокаПриемника.Представление = СтрокаИсточника.НаименованиеМарки;
			КонецЕсли;
			СтрокаПриемника.ЭтоИтог = Ложь;
			СтрокаПриемника.ИндексКартинки = 2;
		ИначеЕсли СтрокаИсточника.ТоварнаяКатегория <> Null Тогда
			СтрокаПриемника.ВидКатегорияМарка = СтрокаИсточника.ТоварнаяКатегория;
			СтрокаПриемника.Представление = СтрокаИсточника.НаименованиеКатегории;
			СтрокаПриемника.ЭтоИтог = Истина;
			Если СтрокаИсточника.ЭтоГруппаКатегорий Тогда
				СтрокаПриемника.ИндексКартинки = 0;
			Иначе
				СтрокаПриемника.ИндексКартинки = 1;
			КонецЕсли;
		Иначе
			СтрокаПриемника.ВидКатегорияМарка = СтрокаИсточника.ВидНоменклатуры;
			ТекстДополнительныхВидов = "";
			ТекстВида = НСтр("ru = '%ОсновнойВид%'");
			
			Если Не СтрокаИсточника.ЭтоГруппаВидов Тогда 
				
				ДополнительныеВидыПеременная = ДополнительныеВиды; // ФиксированноеСоответствие
				
				НайденныеДополнительныеВиды = ДополнительныеВидыПеременная.Получить(СтрокаИсточника.ВидНоменклатуры); // ФиксированныйМассив из ФиксированнаяСтруктура
				
				Если НайденныеДополнительныеВиды <> Неопределено Тогда
					ТекстВида = НСтр("ru = '%ОсновнойВид% (а так же %ДополнительныеВиды%)'");
					
					Для Каждого ДополнительныйВид Из НайденныеДополнительныеВиды Цикл
						ТекстДополнительныхВидов = ТекстДополнительныхВидов + ДополнительныйВид.НаименованиеВидаНоменклатуры + ", ";	
					КонецЦикла;
					
					ТекстДополнительныхВидов = Лев(ТекстДополнительныхВидов, СтрДлина(ТекстДополнительныхВидов) - 2);
				КонецЕсли;
				
			КонецЕсли;
			
			СтрокаПриемника.Представление = ТекстВида;
			СтрокаПриемника.Представление = СтрЗаменить(СтрокаПриемника.Представление, "%ОсновнойВид%", СтрокаИсточника.НаименованиеВидаНоменклатуры);
			СтрокаПриемника.Представление = СтрЗаменить(СтрокаПриемника.Представление, "%ДополнительныеВиды%", ТекстДополнительныхВидов);
			
			СтрокаПриемника.ЭтоИтог = Истина;
			СтрокаПриемника.ИндексКартинки = 0;
		КонецЕсли;
		
		СтрокаПриемника.КвотаНенаполнена = СтрокаПриемника.НаполнениеСУчетомПодбора < СтрокаПриемника.Квота;
		СтрокаПриемника.КвотаПереполнена = СтрокаПриемника.НаполнениеСУчетомПодбора > СтрокаПриемника.Квота;
		
		// И рекурсивно подчиненные
		ЗаполнитьПодчиненныеСтроки(СтрокаПриемника,СтрокаИсточника);
		
		Если ТипЗнч(ПриемникРодитель) = Тип("СтрокаДереваЗначений") Тогда
		
			ПриемникРодитель.КвотаНенаполнена = ПриемникРодитель.КвотаНенаполнена ИЛИ СтрокаПриемника.КвотаНенаполнена;
			ПриемникРодитель.КвотаПереполнена = ПриемникРодитель.КвотаПереполнена ИЛИ СтрокаПриемника.КвотаПереполнена;
		
		КонецЕсли; 
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ПоместитьТоварыВХранилище()
	
	ВременнаяТаблицаТовары = Объект.ТаблицаВыбранныхТоваров.Выгрузить();
	
	АдресТоваровВХранилище = ПоместитьВоВременноеХранилище(ВременнаяТаблицаТовары, УникальныйИдентификатор);
	СтруктураАдресов = Новый Структура;
	СтруктураАдресов.Вставить("АдресТоваровВХранилище", АдресТоваровВХранилище);
	
	Возврат СтруктураАдресов;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьИнформационнуюНадписьКоличестваТоваров()
	
	ПозицииПрописью = НРег(ЧислоПрописью(Объект.ТаблицаВыбранныхТоваров.Количество(), "ДП = Ложь; НП = Истина; НД = Ложь;", НСтр("ru = 'позиция,позиции,позиций,ж,,,,,0'")));
	ИнформационнаяНадпись = НСтр("ru = 'Всего подобрано %1 (%2)'");
	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ИнформационнаяНадпись, ПозицииПрописью, ?(ПоказыватьПодобранныеТовары, "Скрыть", "Показать"));
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаполнениеСУчетомПодбораВДереве(СтадияАссортимента, ТоварнаяКатегория, Марка, Количество)
	
	Обновлять = Ложь;
	
	Если (СтадияАссортимента <> Перечисления.СтадииАссортимента.РазрешеныЗакупкиИПродажи 
		И СтадияАссортимента <> Перечисления.СтадииАссортимента.РазрешеныТолькоЗакупки)
		И (Этап <> Перечисления.ЭтапыИзмененияАссортимента.ВыводИзАссортимента
			И Этап <> Перечисления.ЭтапыИзмененияАссортимента.ПереносВАрхивОтзыв) Тогда
		// Если товар был запрещен к закупке - т.е. отсутствовал в ассортименте,
		// и Этап не вывода из ассортимента
		// то в результате наполненность поменяется в большую сторону.
		Обновлять = Истина;
	ИначеЕсли (СтадияАссортимента = Перечисления.СтадииАссортимента.РазрешеныЗакупкиИПродажи 
		ИЛИ СтадияАссортимента = Перечисления.СтадииАссортимента.РазрешеныТолькоЗакупки)
		И (Этап = Перечисления.ЭтапыИзмененияАссортимента.ВыводИзАссортимента
			ИЛИ Этап = Перечисления.ЭтапыИзмененияАссортимента.ПереносВАрхивОтзыв) Тогда
		// Если товар был разрешен к закупке - т.е. присутствовал в ассортименте,
		// и Этап вывода из ассортимента
		// то в результате наполненность поменяется в меньшую сторону  => меняем знак.
		Обновлять = Истина;
		Количество = - Количество;
	КонецЕсли;
	
	Если НЕ Обновлять Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДерева = НайтиСтрокуВДеревеКоллекции(ДеревоКатегорий, ТоварнаяКатегория);
	Если СтрокаДерева <> Неопределено Тогда
		СтрокаДерева.НаполнениеСУчетомПодбора = СтрокаДерева.НаполнениеСУчетомПодбора + Количество;
		СтрокаДерева.КвотаНенаполнена = СтрокаДерева.НаполнениеСУчетомПодбора < СтрокаДерева.Квота;
		СтрокаДерева.КвотаПереполнена = СтрокаДерева.НаполнениеСУчетомПодбора > СтрокаДерева.Квота;
		СтрокаДереваСтроки = СтрокаДерева.ПолучитьЭлементы();
		Для Каждого ПодчиненнаяСтрока Из СтрокаДереваСтроки  Цикл
			Если ПодчиненнаяСтрока.ВидКатегорияМарка = Марка
				ИЛИ (ПодчиненнаяСтрока.ВидКатегорияМарка = НСтр("ru = 'Прочие марки'") И НЕ ЗначениеЗаполнено(Марка)) Тогда
				
				ПодчиненнаяСтрока.НаполнениеСУчетомПодбора = ПодчиненнаяСтрока.НаполнениеСУчетомПодбора + Количество;
				ПодчиненнаяСтрока.КвотаНенаполнена = ПодчиненнаяСтрока.НаполнениеСУчетомПодбора < ПодчиненнаяСтрока.Квота;
				ПодчиненнаяСтрока.КвотаПереполнена = ПодчиненнаяСтрока.НаполнениеСУчетомПодбора > ПодчиненнаяСтрока.Квота;
				
				Если ПодчиненнаяСтрока.КвотаНенаполнена Тогда
					СтрокаДерева.КвотаНенаполнена = Истина;
				КонецЕсли;
				
				Если ПодчиненнаяСтрока.КвотаПереполнена Тогда
					СтрокаДерева.КвотаПереполнена = Истина;
				КонецЕсли;
				
				Прервать;
				
			КонецЕсли;
		КонецЦикла;
		ОбновитьНаполнениеСУчетомПодбораРодителейСтроки(СтрокаДерева, Количество);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаполнениеСУчетомПодбораРодителейСтроки(СтрокаДерева, Количество)
	
	ТекущаяСтрокаРодитель = СтрокаДерева.ПолучитьРодителя();
	
	Если ТекущаяСтрокаРодитель <> Неопределено Тогда
		ТекущаяСтрокаРодитель.НаполнениеСУчетомПодбора = ТекущаяСтрокаРодитель.НаполнениеСУчетомПодбора + Количество;
		КвотаНенаполнена = Ложь;
		КвотаПереполнена = Ложь;
		СтрокиДерева = ТекущаяСтрокаРодитель.ПолучитьЭлементы();
		Для каждого Строка Из СтрокиДерева Цикл
			
			КвотаНенаполнена = КвотаНенаполнена ИЛИ Строка.КвотаНенаполнена;
			КвотаПереполнена = КвотаПереполнена ИЛИ Строка.КвотаПереполнена;
			
			Если КвотаНенаполнена И КвотаПереполнена Тогда
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		ТекущаяСтрокаРодитель.КвотаНенаполнена = КвотаНенаполнена ИЛИ ТекущаяСтрокаРодитель.НаполнениеСУчетомПодбора < ТекущаяСтрокаРодитель.Квота;
		ТекущаяСтрокаРодитель.КвотаПереполнена = КвотаПереполнена ИЛИ ТекущаяСтрокаРодитель.НаполнениеСУчетомПодбора > ТекущаяСтрокаРодитель.Квота;
		ОбновитьНаполнениеСУчетомПодбораРодителейСтроки(ТекущаяСтрокаРодитель, Количество);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиСтрокуВДеревеКоллекции(ДеревоКолекция, ТоварнаяКатегория)
	
	НайденнаяСтрока = Неопределено;
	ЭлементыКоллекции = ДеревоКолекция.ПолучитьЭлементы();
	
	Для Каждого ЭлементКоллекции Из ЭлементыКоллекции Цикл
		Если ЭлементКоллекции.ВидКатегорияМарка = ТоварнаяКатегория Тогда
			НайденнаяСтрока = ЭлементКоллекции;
			Прервать;
		Иначе
			ЭлементКоллекцииВПодчиненных = НайтиСтрокуВДеревеКоллекции(ЭлементКоллекции, ТоварнаяКатегория);
			Если ЭлементКоллекцииВПодчиненных <> Неопределено Тогда
				НайденнаяСтрока = ЭлементКоллекцииВПодчиненных;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденнаяСтрока;
	
КонецФункции

&НаСервереБезКонтекста
Функция СтруктураКвотыПоКатегории(Знач ОбъектПланирования, Знач ТоварнаяКатегория, Знач МаркаОтбора, Знач ДатаНачалаДействия)
	
	СтруктураКвоты = АссортиментСервер.СтруктураКвотыПоКатегории(
		ОбъектПланирования,
		ТоварнаяКатегория,
		МаркаОтбора,
		ДатаНачалаДействия);
	
	Возврат СтруктураКвоты;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ХранилищеОбщихНастроекСохранить(ПараметрыЗакрытия)
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"ПодборТоваровПоКатегориямНастройкиФормы",
		 "",
		ПараметрыЗакрытия);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборСпискаНоменклатурыПоВыбранномуТовару(Форма)

	ОтборНоменклатуры = Новый СписокЗначений;
	Для каждого СтрокаТЧ Из Форма.Объект.ТаблицаВыбранныхТоваров Цикл
		ОтборНоменклатуры.Добавить(СтрокаТЧ.Номенклатура);
	КонецЦикла; 
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.СписокНоменклатура, "Ссылка", ОтборНоменклатуры, ВидСравненияКомпоновкиДанных.НеВСписке,,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоиск()
	
	ПодборТоваровКлиент.ВыполнениеРасширенногоПоискаВозможно(ЭтаФорма, 
		Новый ОписаниеОповещения("ВыполнитьПоискЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоискЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	ВыполнитьПоискТоваровНаСервере();
	
	ПодборТоваровКлиент.ПослеВыполненияПоискаНоменклатуры(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ВыполнитьПоискТоваровНаСервере()
	
	ПодборТоваровСервер.ВыполнитьПоискНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СнятьОтборПоСтрокеПоискаНоменклатурыНаСервере()
	
	ПодборТоваровКлиентСервер.СнятьОтборПоСтрокеПоискаНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьИДобавитьТоварыВКорзину(СписокВыбранныхТоваров)

	СписокВыбранныхТоваровДляДобавления = Новый Массив;
	
	// Определим какие есть проблемы с добавлением товара
	РезультатПроверкиПриДобавленииВКорзину.Очистить();
	Для каждого ДанныеТовара Из СписокВыбранныхТоваров Цикл
		
		МожноДобавитьВКорзину = Истина;
		
		Если (Этап = ПредопределенноеЗначение("Перечисление.ЭтапыИзмененияАссортимента.ВыводИзАссортимента")
			ИЛИ Этап = ПредопределенноеЗначение("Перечисление.ЭтапыИзмененияАссортимента.ПереносВАрхивОтзыв")) Тогда
			
			Если (ДанныеТовара.СтадияАссортимента = Стадия ИЛИ НЕ ЗначениеЗаполнено(ДанныеТовара.СтадияАссортимента)) Тогда
				ДобавитьПроблемуПриДобавленииТовара("ТоварУжеВыведенИзАссортимента", МожноДобавитьВКорзину);
			КонецЕсли;
			
		Иначе
			
			Если ДанныеТовара.СтадияАссортимента = Стадия
				И Этап <> ПредопределенноеЗначение("Перечисление.ЭтапыИзмененияАссортимента.ИзменениеСостоянияАссортимента") Тогда
				
				ДобавитьПроблемуПриДобавленииТовара("ТоварУжеВСтадии", МожноДобавитьВКорзину);
			КонецЕсли;
			
			СтруктураКвоты = СтруктураКвотыПоКатегории(ОбъектПланирования,
														ДанныеТовара.ТоварнаяКатегория,
														ДанныеТовара.Марка,
														ДатаНачалаДействия);
														
			Если СтруктураКвоты.Квота = 0 Тогда
				ДобавитьПроблемуПриДобавленииТовара("НеУстановленаКвота", МожноДобавитьВКорзину);
			КонецЕсли;
		КонецЕсли;
		
		Если МожноДобавитьВКорзину Тогда
			СписокВыбранныхТоваровДляДобавления.Добавить(ДанныеТовара);
		КонецЕсли; 
		
	КонецЦикла; 
	
	ТекстВопроса = Неопределено;
	
	Если РезультатПроверкиПриДобавленииВКорзину.Количество() = 1 Тогда
		
		ПроблемаДобавленияТовара = РезультатПроверкиПриДобавленииВКорзину[0];
		
		Если ПроблемаДобавленияТовара.ИмяПроблемы = "ТоварУжеВыведенИзАссортимента" Тогда
			
			Если СписокВыбранныхТоваровДляДобавления.Количество() = 0 Тогда
				// Нет ни одного товара который можно добавить без вопроса
				Если ПроблемаДобавленияТовара.КоличествоТоваров = 1 Тогда
					ТекстВопроса = НСтр("ru = 'Данный товар уже выведен из ассортимента.
												  |Добавление его в документ не требуется.'");
				Иначе
					ТекстВопроса = НСтр("ru = 'Выбранные товары уже выведены из ассортимента.
												  |Добавление их в документ не требуется.'");
				КонецЕсли; 
			Иначе
				// Некоторые товары можно добавить без вопроса
				ТекстВопроса = НСтр("ru = 'Часть выбранного товара уже выведена из ассортимента.
											  |Добавление их в документ не требуется.'");
			КонецЕсли;

		ИначеЕсли ПроблемаДобавленияТовара.ИмяПроблемы = "ТоварУжеВСтадии" Тогда	
			
			Если СписокВыбранныхТоваровДляДобавления.Количество() = 0 Тогда
				// Нет ни одного товара который можно добавить без вопроса
				Если ПроблемаДобавленияТовара.КоличествоТоваров = 1 Тогда
					ТекстВопроса = НСтр("ru = 'Данный товар уже находится в стадии ""%1"".
									  			|Добавление его в документ не требуется.'");
				Иначе
					ТекстВопроса = НСтр("ru = 'Выбранные товары уже находится в стадии ""%1"".
												  |Добавление их в документ не требуется.'");
				КонецЕсли; 
			Иначе
				// Некоторые товары можно добавить без вопроса
				ТекстВопроса = НСтр("ru = 'Часть выбранного товара уже находится в стадии ""%1"".
											  |Добавление их в документ не требуется.'");
			КонецЕсли;
			
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, Стадия);
			
		ИначеЕсли ПроблемаДобавленияТовара.ИмяПроблемы = "НеУстановленаКвота" Тогда
			
			Если СписокВыбранныхТоваровДляДобавления.Количество() = 0 Тогда
				// Нет ни одного товара который можно добавить без вопроса
				Если ПроблемаДобавленияТовара.КоличествоТоваров = 1 Тогда
					// Выбран один товар, возьмем его данные
					ТоварнаяКатегория = СписокВыбранныхТоваров[0].ТоварнаяКатегория;
					Марка = СписокВыбранныхТоваров[0].Марка;
					Если ЗначениеЗаполнено(Марка) Тогда
						ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
												НСтр("ru = 'По товарной категории ""%1"" и марке ""%2"" не установлена квота.
															|Присутствие данного товара в ассортименте
												  			|противоречит ассортиментной политике.'"),
												ТоварнаяКатегория,
												Марка);
					Иначе
						ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
												НСтр("ru = 'По товарной категории ""%1"" не установлена квота.
															|Присутствие данного товара в ассортименте
														  	|противоречит ассортиментной политике.'"),
												ТоварнаяКатегория);
					КонецЕсли; 
				Иначе
					ТекстВопроса = НСтр("ru = 'По товарным категориям выбранных товаров не установлена квота.
												|Присутствие выбранных товаров в ассортименте
									  			|противоречит ассортиментной политике.'");
				КонецЕсли; 
			Иначе
				// Некоторые товары можно добавить без вопроса
				ТекстВопроса = НСтр("ru = 'По товарным категориям части выбранных товаров не установлена квота.
											|Присутствие этих товаров в ассортименте противоречит ассортиментной политике.'");
			КонецЕсли;
			
		КонецЕсли; 
	
	ИначеЕсли РезультатПроверкиПриДобавленииВКорзину.Количество() > 1 Тогда
		
		// Возникло несколько проблем
		
		Если СписокВыбранныхТоваровДляДобавления.Количество() = 0 Тогда
			// Нет ни одного товара который можно добавить без вопроса
			Если СписокВыбранныхТоваров.Количество() = 1 Тогда
				ТекстВопроса = НСтр("ru = 'Добавление товара в документ не требуется:'");
			Иначе
				ТекстВопроса = НСтр("ru = 'Добавление выбранных товаров в документ не требуется:'");
			КонецЕсли;
		Иначе
			// Некоторые товары можно добавить без вопроса
			ТекстВопроса = НСтр("ru = 'Часть выбранного товара не требуется добавлять в документ:'");
		КонецЕсли;
		
		ПроблемыСписком = "";
		Для каждого ПроблемаДобавленияТовара Из РезультатПроверкиПриДобавленииВКорзину Цикл
			
			Если ПроблемаДобавленияТовара.ИмяПроблемы = "ТоварУжеВыведенИзАссортимента" Тогда
				
				ПредставлениеПроблемы = НСтр("ru = '- товар уже выведен из ассортимента'");
				
			ИначеЕсли ПроблемаДобавленияТовара.ИмяПроблемы = "ТоварУжеВСтадии" Тогда
				
				ПредставлениеПроблемы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											НСтр("ru = '- товар уже находится в стадии ""%1""'"), 
											Стадия);
											
			ИначеЕсли ПроблемаДобавленияТовара.ИмяПроблемы = "НеУстановленаКвота" Тогда

				ПредставлениеПроблемы = НСтр("ru = '- не установлена квота'");
				
			КонецЕсли;
			
			ПроблемыСписком = ПроблемыСписком 
								+ ?(ПроблемыСписком = "", "", Символы.ПС)
								+ ПредставлениеПроблемы;
		КонецЦикла; 
		
		ТекстВопроса = ТекстВопроса + Символы.ПС + ПроблемыСписком;
		
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СписокВыбранныхТоваров", СписокВыбранныхТоваров);
	ДополнительныеПараметры.Вставить("СписокВыбранныхТоваровДляДобавления", СписокВыбранныхТоваровДляДобавления);
	Если ТекстВопроса <> Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьТоварыВКорзинуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		СписокКнопок = Новый СписокЗначений;
		Если СписокВыбранныхТоваров.Количество() = 1 Тогда
			СписокКнопок.Добавить("ДобавитьВсе", НСтр("ru = 'Добавить'"));
			СписокКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Не добавлять'"));
			
		ИначеЕсли СписокВыбранныхТоваровДляДобавления.Количество() <> 0 Тогда
			СписокКнопок.Добавить("ДобавитьПодходящие", НСтр("ru = 'Добавить только подходящие'"));
			СписокКнопок.Добавить("ДобавитьВсе", НСтр("ru = 'Добавить все'"));
			СписокКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Не добавлять'"));
		Иначе
			СписокКнопок.Добавить("ДобавитьВсе", НСтр("ru = 'Добавить все'"));
			СписокКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Не добавлять'"));
		КонецЕсли; 
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок);
	Иначе
		ДобавитьТоварыВКорзинуЗавершение("ДобавитьВсе", ДополнительныеПараметры);
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТоварыВКорзинуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = "ДобавитьВсе" Тогда
		СписокВыбранныхТоваров = ДополнительныеПараметры.СписокВыбранныхТоваров;
	ИначеЕсли РезультатВопроса = "ДобавитьПодходящие" Тогда
		СписокВыбранныхТоваров = ДополнительныеПараметры.СписокВыбранныхТоваровДляДобавления;
	Иначе
		Возврат;
	КонецЕсли;
	
	ДобавитьТоварыВКорзинуНаСервере(СписокВыбранныхТоваров);
	
	ТаблицаВыбранныхТоваровПриИзменении();
	
	Если Не ПоказыватьПодобранныеТовары Тогда
		
		Если СписокВыбранныхТоваров.Количество() = 1 Тогда
			ДанныеТовара = СписокВыбранныхТоваров[0];
			ТекстСобытия = НСтр("ru = 'Товар добавлен в таблицу подбора'");
			ТекстОповещения = НСтр("ru = 'Товар %Товар% добавлен в таблицу подбора'");
			ТекстОповещения = СтрЗаменить(ТекстОповещения, "%Товар%", Строка(ДанныеТовара.Номенклатура));
		Иначе
			ТекстСобытия = НСтр("ru = 'Товары добавлены в таблицу подбора'");
			ТекстОповещения = НСтр("ru = 'Выбранные товары добавлены в таблицу подбора'");
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(ТекстСобытия, ,ТекстОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьТоварыВКорзинуНаСервере(СписокВыбранныхТоваров)

	Для каждого ДанныеТовара Из СписокВыбранныхТоваров Цикл
		НоваяСтрока = Объект.ТаблицаВыбранныхТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеТовара);
		ОбновитьНаполнениеСУчетомПодбораВДереве(НоваяСтрока.СтадияАссортимента, НоваяСтрока.ТоварнаяКатегория, НоваяСтрока.Марка, 1);
	КонецЦикла; 
	
	Модифицированность = Истина;
	
	УстановитьОтборСпискаНоменклатурыПоВыбранномуТовару(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПроблемуПриДобавленииТовара(ИмяПроблемы, МожноДобавитьВКорзину)

	СтруктураПоиска = Новый Структура("ИмяПроблемы", ИмяПроблемы);
 	СписокСтрок = РезультатПроверкиПриДобавленииВКорзину.НайтиСтроки(СтруктураПоиска);
	Если СписокСтрок.Количество() <> 0 Тогда
		СтрокаРезультатПроверки = СписокСтрок[0];
	Иначе
		СтрокаРезультатПроверки = РезультатПроверкиПриДобавленииВКорзину.Добавить();
		СтрокаРезультатПроверки.ИмяПроблемы = ИмяПроблемы;
	КонецЕсли;
	
	СтрокаРезультатПроверки.КоличествоТоваров = СтрокаРезультатПроверки.КоличествоТоваров + 1;
	
	МожноДобавитьВКорзину = Ложь;
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеТовара(СтрокаНоменклатура)

	ДанныеТовара = ПодборТоваровКлиентСервер.ПараметрыТовара();
	ЗаполнитьЗначенияСвойств(ДанныеТовара, СтрокаНоменклатура);
	
	Возврат ДанныеТовара;

КонецФункции

&НаКлиенте
Процедура ПолучитьДанныеПеретаскивания(ПараметрыПеретаскивания)
	
	МассивПараметров = Новый Массив; 
	
	Для каждого КлючСтроки Из ПараметрыПеретаскивания.Значение Цикл
		
		ДанныеСтроки = Элементы.СписокРасширенныйПоискНоменклатура.ДанныеСтроки(КлючСтроки);
		
		Если ДанныеСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыТовара = ПодборТоваровКлиентСервер.ПараметрыТовара();
		ЗаполнитьЗначенияСвойств(ПараметрыТовара, ДанныеСтроки);
		
		МассивПараметров.Добавить(ПараметрыТовара);
		
	КонецЦикла;
	
	ПараметрыПеретаскивания.Значение = МассивПараметров;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьВыбранныеТоварыПоКлючуНаСервере(МассивКлючей)
	
	УдаленныеСтрокиИзТаблицыВыбранныхТоваров.Очистить();
	Для каждого ИдентификаторСтроки Из МассивКлючей Цикл
		ДанныеСтроки = Объект.ТаблицаВыбранныхТоваров.НайтиПоИдентификатору(ИдентификаторСтроки);
		ЗаполнитьЗначенияСвойств(УдаленныеСтрокиИзТаблицыВыбранныхТоваров.Добавить(), ДанныеСтроки);
		Объект.ТаблицаВыбранныхТоваров.Удалить(ДанныеСтроки);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУдаленияСтрокИзТаблицыВыбранныхТоваров()

	ОбновитьИнформационнуюНадписьКоличестваТоваров();
	
	ПослеУдаленияСтрокИзТаблицыВыбранныхТоваровНаСервере();

КонецПроцедуры

&НаСервере
Процедура ПослеУдаленияСтрокИзТаблицыВыбранныхТоваровНаСервере()

	Для каждого ДанныеСтроки Из УдаленныеСтрокиИзТаблицыВыбранныхТоваров Цикл
		ОбновитьНаполнениеСУчетомПодбораВДереве(
					ДанныеСтроки.СтадияАссортимента, 
					ДанныеСтроки.ТоварнаяКатегория, 
					ДанныеСтроки.Марка, -1);
	КонецЦикла;
	
	УстановитьОтборСпискаНоменклатурыПоВыбранномуТовару(ЭтаФорма);
	
	УдаленныеСтрокиИзТаблицыВыбранныхТоваров.Очистить();
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

ВыполняетсяЗакрытие = Ложь;

#КонецОбласти
