///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

&НаКлиенте
Перем СтраницаПриОтмене;	// Неопределено, ЭлементыФормы

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	// Проверка доступности использования сервиса
	Если ОблачныйАрхив20.ДоступноИспользованиеСервисаОблачныйАрхив(Истина) Тогда
		
		ПараметрыАрхивирования = ОблачныйАрхив20.СохраненныеПараметрыРезервногоКопирования();
		
		Если ПараметрыАрхивирования.РаботаРезервногоКопированияЗаблокирована <> Ложь Тогда
			
			Заголовок               =
				НСтр("ru = 'Информационная база была перемещена или восстановлена из резервной копии'");
			РежимОбновленияНастроек =
				ОблачныйАрхив20КлиентСервер.ИдентификаторРежимаОбновленияОбновитьАдресРазмещения();
			
		КонецЕсли;
		
		АктивироватьСтраницуДлительнойОперации(
			ЭтотОбъект,
			НСтр("ru = 'Проверка подключения Облачного архива.'"));
		
		ПараметрыИнициализации = ПараметрыИнициализацииФормы(ЭтотОбъект);
		Если Параметры.УстановкаАгента Тогда
			ПараметрыИнициализации.ПараметрыАрхивирования.АгентID    = "";
			ПараметрыИнициализации.ПараметрыАрхивирования.URI        = "";
			ПараметрыИнициализации.ПользовательскоеСоглашениеПринято = Истина;
		КонецЕсли;
		
		ДлительнаяОперация = ИнициализацияНастроекОблачногоАрхиваВФоне(
			ПараметрыИнициализации,
			УникальныйИдентификатор,
			ПараметрыАрхивирования.РаботаРезервногоКопированияЗаблокирована = Ложь);
		
	Иначе
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница    = Элементы.СтраницаСервисНедоступен;
		Элементы.НадписьСервисНедоступен.Заголовок =
			НСтр("ru = 'Использование обработки доступно при соблюдения следующих критериев:
				| - Информационная база работает в файловом режим без использования веб-сервера.
				| - Информационная база работает не в модели сервиса.
				| - Информационная база работает в режиме автономного рабочего места.
				| - Операционная система Windows 7 и старше.
				| - Пользователь обладает правом ""Администратор системы"".'");
		
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.ПодключениеСервисовСопровождения
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПодключениеСервисовСопровождения") Тогда
		
		МодульПодключениеСервисовСопровождения = ОбщегоНазначения.ОбщийМодуль("ПодключениеСервисовСопровождения");
		ПараметрыФормы = МодульПодключениеСервисовСопровождения.ПараметрыПодключенияТестовогоПериода();
		ПараметрыФормы.Идентификатор = ОблачныйАрхив20.ИдентификаторСервиса();
		ПараметрыФормы.ИмяЭлементаДляРазмещения = Элементы.СтраницаПодключенияТестовогоПериода.Имя;
		ПараметрыФормы.ИмяЭлементаДляРазмещенияКнопок = Элементы.ГруппаКнопокПодключенияТестовогоПериода.Имя;
		ПараметрыФормы.ИмяЭлементаКнопкиПоУмолчанию = Элементы.КомандаДалее.Имя;
		ПараметрыФормы.ОбработчикПриПодключении = "ТестовыйПериодПодключен";
		МодульПодключениеСервисовСопровождения.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыФормы);
		
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.ПодключениеСервисовСопровождения
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПриНачалеДлительнойОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(
		Отказ,
		ЗавершениеРаботы,
		ТекстПредупреждения,
		СтандартнаяОбработка)
		
	ОбновлениеНастроекОблачногоАрхива = ЭтоСценарийОбновленияНастроек(ЭтотОбъект)
		И РеквизитПараметрыАрхивирования().РаботаРезервногоКопированияЗаблокирована = Неопределено;
	
	Если ОбновлениеНастроекОблачногоАрхива Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если ЗавершениеРаботы Тогда
		
		Если ОбновлениеНастроекОблачногоАрхива Тогда
			
			ТекстПредупреждения = НСтр("ru = 'Обновление настроек облачного архива не завершено.'");
			
		// ИнтернетПоддержкаПользователей.ПодключениеСервисовСопровождения
		ИначеЕсли ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПодключениеСервисовСопровождения") Тогда
			МодульПодключениеСервисовСопровожденияКлиент =
				ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключениеСервисовСопровожденияКлиент");
			МодульПодключениеСервисовСопровожденияКлиент.ПередЗакрытием(
				ЭтотОбъект,
				Отказ,
				ЗавершениеРаботы,
				ТекстПредупреждения);
		// Конец ИнтернетПоддержкаПользователей.ПодключениеСервисовСопровождения
		
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если ОбновлениеНастроекОблачногоАрхива Тогда
		Оповещение   = Новый ОписаниеОповещения("ПередЗакрытиемПродолжение", ЭтотОбъект);
		ТекстВопроса =
			НСтр("ru = 'Резервное копирование в Облачный архив приостановлено из-за перемещения/восстановления информационной базы.
				|Прервать процесс восстановление работы резервного копирования?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		Возврат;
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.ПодключениеСервисовСопровождения
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПодключениеСервисовСопровождения") Тогда
		МодульПодключениеСервисовСопровожденияКлиент = 
			ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключениеСервисовСопровожденияКлиент");
		МодульПодключениеСервисовСопровожденияКлиент.ПередЗакрытием(
			ЭтотОбъект,
			Отказ,
			ЗавершениеРаботы,
			ТекстПредупреждения);
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.ПодключениеСервисовСопровождения
	
	Оповещение = Новый ОписаниеОповещения("ЗаписатьИЗакрытьОповещение", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область СтраницаОписаниеИСоглашение

&НаКлиенте
Процедура НадписьОписаниеСервисаОбработкаНавигационнойСсылки(
	Элемент,
	НавигационнаяСсылкаФорматированнойСтроки,
	СтандартнаяОбработка)
	
	ВыполнитьОбработкуНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСоглашениеОбработкаНавигационнойСсылки(
	Элемент,
	НавигационнаяСсылкаФорматированнойСтроки,
	СтандартнаяОбработка)
	
	ВыполнитьОбработкуНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаПодключениеИПП

&НаКлиенте
Процедура НадписьПояснениеПодключенияИППОбработкаНавигационнойСсылки(
	Элемент,
	НавигационнаяСсылкаФорматированнойСтроки,
	СтандартнаяОбработка)
	
	ВыполнитьОбработкуНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛогинПриИзменении(Элемент)
	
	СохранитьДанныеАутентификации = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПарольПриИзменении(Элемент)
	
	СохранитьДанныеАутентификации = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьВосстановленияПароляАвторизацияНажатие(Элемент)
	
	ИнтернетПоддержкаПользователейКлиент.ОткрытьСтраницуВосстановленияПароля();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНетЛогинаИПароляАвторизацияНажатие(Элемент)
	
	ИнтернетПоддержкаПользователейКлиент.ОткрытьСтраницуРегистрацииНовогоПользователя();
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаСервисНедоступен

&НаКлиенте
Процедура НадписьСервисНедоступенОбработкаНавигационнойСсылки(
	Элемент,
	НавигационнаяСсылкаФорматированнойСтроки,
	СтандартнаяОбработка)
	
	ВыполнитьОбработкуНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаОписаниеОшибки

&НаКлиенте
Процедура НадписьОписаниеОшибкиОбработкаНавигационнойСсылки(
	Элемент,
	НавигационнаяСсылкаФорматированнойСтроки,
	СтандартнаяОбработка)
	
	ВыполнитьОбработкуНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаНастройкиРезервногоКопирования

&НаКлиенте
Процедура ТипХраненияКопийПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипХраненияКопийОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодХраненияКопийОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипПериодаХраненияКопийОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоКопийВКаталогеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасписания

&НаКлиенте
Процедура РасписанияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.РасписанияРасписаниеПредставление Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СтрокаТаблицы = СтрокаРеквизитаРасписания(
			Расписания.НайтиПоИдентификатору(ВыбраннаяСтрока));
		
		Оповещение       = Новый ОписаниеОповещения("ПослеИзмененияРасписания", ЭтотОбъект, ВыбраннаяСтрока);
		ДиалогРасписания = Новый ДиалогРасписанияРегламентногоЗадания(СтрокаТаблицы.Расписание);
		
		ДиалогРасписания.Показать(Оповещение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасписанияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	//@skip-check use-non-recommended-method
	ДатаНачала = НачалоДня(ТекущаяДата());	// АПК:143 Используется только в клиентском коде.
	
	Расписание = Новый РасписаниеРегламентногоЗадания();
	Расписание.ДатаНачала = ДатаНачала;
	
	ДиалогРасписания = Новый ДиалогРасписанияРегламентногоЗадания(Расписание);
	
	ДиалогРасписания.Показать(
		Новый ОписаниеОповещения("ПослеИзмененияРасписания", ЭтотОбъект));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаДалее(Команда)
	
	ВыполнитьПереходНаСледующийШаг();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	ТекущаяСтраница = Элементы.ГруппаСтраницы.ТекущаяСтраница;
	Если ТекущаяСтраница = Элементы.СтраницаОписаниеИСоглашение Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаРежимОбновленияНастроек;
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаПодключениеИПП Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОписаниеИСоглашение;
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаРежимОбновленияНастроек Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаИнформационнаяБазаПеремещена;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	ТекущаяСтраница = Элементы.ГруппаСтраницы.ТекущаяСтраница;
	Если ТекущаяСтраница = Элементы.СтраницаДлительнаяОперация Тогда
		
		ОтменитьВыполнениеДлительнойОперации(РеквизитДлительнаяОперация().ИдентификаторЗадания);
		
		Если СтраницаПриОтмене = Неопределено Тогда
			Закрыть();
		Иначе
			Элементы.ГруппаСтраницы.ТекущаяСтраница = СтраницаПриОтмене;
		КонецЕсли;
		
		ДлительнаяОперация = Неопределено;
		
		УправлениеФормой(ЭтотОбъект);
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаИнформационнаяБазаПеремещена Тогда
		СброситьНастройкиРезервногоКопирования();
		Закрыть();
	Иначе
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщегоНазначения

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы        = Форма.Элементы;
	ТекущаяСтраница = Элементы.ГруппаСтраницы.ТекущаяСтраница;
	
	Если ТекущаяСтраница <> Элементы.СтраницаПодключенияТестовогоПериода
		И Элементы.ГруппаКнопокПодключенияТестовогоПериода.Видимость Тогда
		
		Элементы.ГруппаКнопокПодключенияТестовогоПериода.Видимость = Ложь;
		Элементы.КомандаДалее.КнопкаПоУмолчанию = Истина;
		
	КонецЕсли;
	
	ТекстОтмена = НСтр("ru = 'Отмена'");
	
	Если ТекущаяСтраница = Элементы.СтраницаОписаниеИСоглашение Тогда
		
		Элементы.КомандаНазад.Видимость   = ЭтоСценарийОбновленияНастроек(Форма);
		Элементы.КомандаДалее.Видимость   = Истина;
		Элементы.КомандаДалее.Заголовок   = "";
		Элементы.КомандаЗакрыть.Видимость = Истина;
		Элементы.КомандаЗакрыть.Заголовок = ТекстОтмена;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаПодключениеИПП Тогда
		
		Элементы.КомандаНазад.Видимость   = (ЭтоСценарийПодключения(Форма) Или ЭтоСценарийОбновленияНастроек(Форма));
		Элементы.КомандаДалее.Видимость   = Истина;
		Элементы.КомандаДалее.Заголовок   = "";
		Элементы.КомандаЗакрыть.Видимость = Истина;
		Элементы.КомандаЗакрыть.Заголовок = ТекстОтмена;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаСервисНедоступен Тогда
		
		Элементы.КомандаНазад.Видимость   = Ложь;
		Элементы.КомандаДалее.Видимость   = Ложь;
		Элементы.КомандаЗакрыть.Видимость = Истина;
		Элементы.КомандаЗакрыть.Заголовок = НСтр("ru = 'Закрыть'");
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаОписаниеОшибки Тогда
		
		Элементы.КомандаНазад.Видимость   = Ложь;
		Элементы.КомандаДалее.Видимость   = Истина;
		Элементы.КомандаДалее.Заголовок   = НСтр("ru = 'Повторить попытку'");
		Элементы.КомандаЗакрыть.Видимость = Истина;
		Элементы.КомандаЗакрыть.Заголовок = НСтр("ru = 'Закрыть'");
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаДлительнаяОперация Тогда
		
		Элементы.КомандаНазад.Видимость   = Ложь;
		Элементы.КомандаДалее.Видимость   = Ложь;
		Элементы.КомандаЗакрыть.Видимость = Истина;
		Элементы.КомандаЗакрыть.Заголовок = ТекстОтмена;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаИнформационнаяБазаПеремещена Тогда
		
		Элементы.КомандаНазад.Видимость   = Ложь;
		Элементы.КомандаДалее.Видимость   = Истина;
		Элементы.КомандаДалее.Заголовок   = НСтр("ru = 'Обновить настройки >'");
		Элементы.КомандаЗакрыть.Видимость = Истина;
		Элементы.КомандаЗакрыть.Заголовок = НСтр("ru = 'Отключить резервное копирование'");
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаРежимОбновленияНастроек Тогда
		
		Элементы.КомандаНазад.Видимость   = Истина;
		Элементы.КомандаДалее.Видимость   = Истина;
		Элементы.КомандаДалее.Заголовок   = "";
		Элементы.КомандаЗакрыть.Видимость = Истина;
		Элементы.КомандаЗакрыть.Заголовок = ТекстОтмена;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаНастройкиРезервногоКопирования Тогда
		
		Элементы.КомандаНазад.Видимость   = Ложь;
		Элементы.КомандаДалее.Видимость   = Истина;
		Элементы.КомандаЗакрыть.Видимость = Истина;
		Элементы.КомандаЗакрыть.Заголовок = ТекстОтмена;
		
		Если ЭтоСценарийПодключения(Форма)
			Или ЭтоСценарийОбновленияНастроек(Форма) Тогда
			Элементы.КомандаДалее.Заголовок = НСтр("ru = 'Готово'");
		Иначе
			Элементы.КомандаДалее.Заголовок = НСтр("ru = 'Сохранить'");
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаПодключенияТестовогоПериода Тогда
		
		Элементы.КомандаДалее.Видимость   = Ложь;
		Элементы.КомандаЗакрыть.Видимость = Истина;
		Элементы.КомандаЗакрыть.Заголовок = ТекстОтмена;
		Элементы.ГруппаКнопокПодключенияТестовогоПериода.Видимость = Истина;
		
	КонецЕсли;
	
	Если ЭтоТипХраненияКопийЗаПоследние(Форма) Тогда
		Элементы.ГруппаСтраницТиповХранения.ТекущаяСтраница = Элементы.СтраницаПериодаХранения;
	ИначеЕсли ЭтоТипХраненияКопийПоследние(Форма) Тогда
		Элементы.ГруппаСтраницТиповХранения.ТекущаяСтраница = Элементы.СтраницаКоличестваКопий;
	Иначе
		Элементы.ГруппаСтраницТиповХранения.ТекущаяСтраница = Элементы.СтраницаВсе;
	КонецЕсли;
	
	Элементы.РазныеЧасовыеПояса.Видимость = (Не ПустаяСтрока(Элементы.РазныеЧасовыеПоясаПояснение.Заголовок));
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеНаКлиенте()
	
	ОчиститьСообщения();
	
	ТекущаяСтраница = Элементы.ГруппаСтраницы.ТекущаяСтраница;
	Если ТекущаяСтраница = Элементы.СтраницаОписаниеИСоглашение Тогда
		
		Если Не ПользовательскоеСоглашение Тогда
			ТекстПредупреждение = НСтр("ru = 'Необходимо принять пользовательское соглашение.'");
			ПоказатьПредупреждение(, ТекстПредупреждение);
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаПодключениеИПП Тогда
		
		ДанныеАутентификации = Новый Структура("Логин, Пароль", Логин, Пароль);
		РезультатПроверки    = ИнтернетПоддержкаПользователейКлиентСервер.ПроверитьДанныеАутентификации(
			ДанныеАутентификации);
		
		Если РезультатПроверки.Отказ Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатПроверки.СообщениеОбОшибке, , РезультатПроверки.Поле);
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаНастройкиРезервногоКопирования Тогда
		
		Отказ = Ложь;
		
		Если ПустаяСтрока(НаименованиеИБ) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнено наименование информационной базы'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "НаименованиеИБ", , Отказ);
		КонецЕсли;
		
		Если ПустаяСтрока(ТипХраненияКопий) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнен тип хранения резервных копий'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ТипХраненияКопий", , Отказ);
		КонецЕсли;
		
		Если ЭтоТипХраненияКопийЗаПоследние(ЭтотОбъект) Тогда
			
			Если ПериодХраненияКопий = 0 Тогда
				ТекстСообщения = НСтр("ru = 'Не заполнен период хранения резервных копий'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ПериодХраненияРезервныхКопий", , Отказ);
			КонецЕсли;
			
			Если ПустаяСтрока(ТипПериодаХраненияКопий) Тогда
				ТекстСообщения = НСтр("ru = 'Не заполнен тип периода хранения резервных копий'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(
					ТекстСообщения,
					,
					"ТипПериодаХраненияРезервныхКопий",
					,
					Отказ);
			КонецЕсли;
			
		ИначеЕсли ЭтоТипХраненияКопийПоследние(ЭтотОбъект) Тогда
			
			Если КоличествоКопийВКаталоге = 0 Тогда
				ТекстСообщения = НСтр("ru = 'Не заполнено количество резервных копий'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "КоличествоКопийВКаталоге", , Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
		Если АвтоматическоеРезервноеКопированиеВключено
			И Расписания.НайтиСтроки(Новый Структура("Использование", Истина)).Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Нет ни одного активного расписания. Признак выполнения автоматического резервного копирования предполагает наличие хотя бы одного активного расписания.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Расписания", , Отказ);
		КонецЕсли;
		
		// Проверка заполнения обязательных полей расписания
		Для Каждого ТекРасписание Из Расписания Цикл
			
			ИндексСтроки     = Расписания.Индекс(ТекРасписание);
			Поле             = "Расписания[" + Формат(ИндексСтроки, "ЧН=0; ЧГ=0") + "].РасписаниеПредставление";
			СтрокаРасписание = СтрокаРеквизитаРасписания(ТекРасписание);
			Если Не ЗначениеЗаполнено(СтрокаРасписание.Расписание.ДатаНачала) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В строке %1 таблицы ""Расписания"" не заполнено поле ""Дата начала"".'"),
					Строка(ИндексСтроки + 1));
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , Поле, , Отказ);
			КонецЕсли;
			
			Если СтрокаРасписание.Расписание.ДетальныеРасписанияДня.Количество() = 0 Тогда
				Если Не ЗначениеЗаполнено(СтрокаРасписание.Расписание.ВремяНачала) Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'В строке %1 таблицы ""Расписания"" не заполнено поле ""Время начала"".'"),
						Строка(ИндексСтроки + 1));
					ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , Поле, , Отказ);
				КонецЕсли;
			Иначе
				Для Каждого ТекСтрокаРасписанияДня Из СтрокаРасписание.Расписание.ДетальныеРасписанияДня Цикл
					
					СтрокаРасписанияДня = СтрокаДетальногоРасписанияДня(ТекСтрокаРасписанияДня);
					Если Не ЗначениеЗаполнено(СтрокаРасписанияДня.ВремяНачала) Тогда
						
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'В строке %1 таблицы ""Расписания"" не во всех строках детального расписания для заполнено поле ""Время начала"".'"),
							Строка(ИндексСтроки + 1));
						ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , Поле, , Отказ);
						
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Не Отказ;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьОбработкуНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если СтрСравнить(НавигационнаяСсылкаФорматированнойСтроки, "Action:OpenPortal") = 0 Тогда
		СтандартнаяОбработка = Ложь;
		ИнтернетПоддержкаПользователейКлиент.ОткрытьГлавнуюСтраницуПортала();
	ИначеЕсли СтрСравнить(НавигационнаяСсылкаФорматированнойСтроки, "TechSupport") = 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СообщенияВСлужбуТехническойПоддержки") Тогда
		
			МодульСообщенияВСлужбуТехническойПоддержкиКлиентСервер =
				ОбщегоНазначенияКлиент.ОбщийМодуль("СообщенияВСлужбуТехническойПоддержкиКлиентСервер");
			ДанныеСообщения = МодульСообщенияВСлужбуТехническойПоддержкиКлиентСервер.ДанныеСообщения();
			
			Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПодключениеИПП Тогда
				
				ДанныеСообщения.Получатель = "webIts";
				ДанныеСообщения.Тема       = НСтр("ru = 'Интернет-поддержка. Подключение Интернет-поддержки.'");
				ДанныеСообщения.Сообщение  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не получается подключить Интернет-поддержку пользователей.
						|Для подключения указывается логин %1.'"),
					Логин);
				
			Иначе
				
				ДанныеСообщения.Получатель = "backup";
				ДанныеСообщения.Тема       = НСтр("ru = 'Интернет-поддержка. Подключение 1С:Облачный архив.'");
				ДанныеСообщения.Сообщение  = СообщениеТехподдержке;
				
			КонецЕсли;
			
			МодульСообщенияВСлужбуТехническойПоддержкиКлиент = 
				ОбщегоНазначенияКлиент.ОбщийМодуль("СообщенияВСлужбуТехническойПоддержкиКлиент");
			МодульСообщенияВСлужбуТехническойПоддержкиКлиент.ОтправитьСообщение(ДанныеСообщения);
			
		КонецЕсли;
		
	// Открытие лог файла установки агента
	ИначеЕсли СтрСравнить(НавигационнаяСсылкаФорматированнойСтроки, "Open:InstallLogAgent") = 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекстовыйДокумент = Новый ТекстовыйДокумент();
		ТекстовыйДокумент.УстановитьТекст(ЛогУстановкиАгента);
		ТекстовыйДокумент.Показать("install.log");
		
	// Запуск дистрибутива установки агента
	ИначеЕсли СтрСравнить(НавигационнаяСсылкаФорматированнойСтроки, "Action:InstallAgent") = 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если ПустаяСтрока(ФайлДистрибутиваАгента) Тогда
			ЗагрузитьИУстановитьАгента();
		Иначе
			
			ФайлИнфо = Новый Файл(ФайлДистрибутиваАгента);
			ФайлИнфо.НачатьПроверкуСуществования(
				Новый ОписаниеОповещения(
					"ИнтерактивноУстановитьАгентПослеПроверкиСуществованияДистрибутива",
					ЭтотОбъект));
			
		КонецЕсли;
		
	Иначе
		
		ОблачныйАрхив20Клиент.ОбработкаНавигационнойСсылки(
			ЭтотОбъект,
			Элемент,
			НавигационнаяСсылкаФорматированнойСтроки,
			СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИУстановитьАгента()
	
	ПараметрыИнициализации = ПараметрыИнициализацииФормы(ЭтотОбъект);
	ПараметрыИнициализации.ПараметрыАрхивирования.АгентID    = "";
	ПараметрыИнициализации.ПараметрыАрхивирования.URI        = "";
	ПараметрыИнициализации.ПользовательскоеСоглашениеПринято = Истина;
	
	ДлительнаяОперация = ИнициализацияНастроекОблачногоАрхиваВФоне(
		ПараметрыИнициализации,
		УникальныйИдентификатор);
	
	АктивироватьСтраницуДлительнойОперации(
		ЭтотОбъект,
		НСтр("ru = 'Проверка подключения Облачного архива.'"));
	
	УправлениеФормой(ЭтотОбъект);
	
	ПриНачалеДлительнойОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтерактивноУстановитьАгентПослеПроверкиСуществованияДистрибутива(Существует, ДополнительныеПараметры) Экспорт
	
	Если Существует Тогда
		
		ПараметрыЗапуска = ФайловаяСистемаКлиент.ПараметрыЗапускаПрограммы();
		ПараметрыЗапуска.ДождатьсяЗавершения = Истина;
		ПараметрыЗапуска.Оповещение =
			Новый ОписаниеОповещения("ПослеИнтерактивнойУстановкиАгента", ЭтотОбъект);
		
		ФайловаяСистемаКлиент.ЗапуститьПрограмму(
			ФайлДистрибутиваАгента,
			ПараметрыЗапуска);
		
	Иначе
		ЗагрузитьИУстановитьАгента();
	КонецЕсли;
	
КонецПроцедуры

// Обработка закрытия формы после вопроса о невыполненном восстановлении работы резервного копирования после блокировки.
//
// Параметры:
//  РезультатВопроса - КодВозвратаДиалога
//  ДополнительныеПараметры - Неопределено
//
&НаКлиенте
Процедура ПередЗакрытиемПродолжение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ЗаблокироватьОблачныйАрхивНаСервере();
		РеквизитПараметрыАрхивирования().РаботаРезервногоКопированияЗаблокирована = Истина;
		
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

// Обработка закрытия модифицированной формы с сохранения в процессе закрытия формы.
//
// Параметры:
//  Результат - Неопределено
//  Контекст - Неопределено
//
&НаКлиенте
Процедура ЗаписатьИЗакрытьОповещение(Результат, Контекст) Экспорт
	
	ВыполнитьПереходНаСледующийШаг();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПереходНаСледующийШаг()
	
	Если Не ПроверитьЗаполнениеНаКлиенте() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтраница   = Элементы.ГруппаСтраницы.ТекущаяСтраница;
	СтраницаПриОтмене = ТекущаяСтраница;
	
	Если ТекущаяСтраница = Элементы.СтраницаПодключениеИПП Тогда
		
		Если ЭтоСценарийПодключения(ЭтотОбъект) Тогда
			СтраницаПриОтмене = Элементы.СтраницаОписаниеИСоглашение;
		ИначеЕсли ЭтоСценарийОбновленияНастроек(ЭтотОбъект) Тогда
			СтраницаПриОтмене = Элементы.СтраницаРежимОбновленияНастроек;
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаИнформационнаяБазаПеремещена Тогда
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаРежимОбновленияНастроек;
		УправлениеФормой(ЭтотОбъект);
		
		Возврат;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаРежимОбновленияНастроек
		И РежимОбновленияНастроек <> ОблачныйАрхив20КлиентСервер.ИдентификаторРежимаОбновленияОбновитьАдресРазмещения() Тогда
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОписаниеИСоглашение;
		УправлениеФормой(ЭтотОбъект);
		
		Возврат;
		
	КонецЕсли;
	
	ПоказатьПрогресс = Истина;
	Если НастройкиЗагружены
		Или ТекущаяСтраница = Элементы.СтраницаНастройкиРезервногоКопирования Тогда
		
		ПоказатьПрогресс            = Ложь;
		ПояснениеДлительнойОперации = НСтр("ru = 'Сохранение настроек резервного копирования.'");
		ДлительнаяОперация          = СохранениеНастроекОблачногоАрхиваВФоне(
			ПараметрыСохраненияНастроек(),
			УникальныйИдентификатор);
		
	Иначе
		
		Если ТекущаяСтраница = Элементы.СтраницаРежимОбновленияНастроек Тогда
			ПояснениеДлительнойОперации = НСтр("ru = 'Обновление адреса размещения объекта копирования.'");
		Иначе
			ПояснениеДлительнойОперации = НСтр("ru = 'Проверка подключения Интернет-поддержки пользователя.'");
		КонецЕсли;
		
		ПараметрыИнициализации = ПараметрыИнициализацииФормы(ЭтотОбъект);
		ДлительнаяОперация     = ИнициализацияНастроекОблачногоАрхиваВФоне(
			ПараметрыИнициализации,
			УникальныйИдентификатор);
		
	КонецЕсли;
	
	АктивироватьСтраницуДлительнойОперации(ЭтотОбъект, ПояснениеДлительнойОперации, ПоказатьПрогресс);
	ПриНачалеДлительнойОперации();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

// Обработчик завершения работы с диалогом расписания регламентного задания.
//
// Параметры:
//  Расписание - РасписаниеРегламентногоЗадания - диалог закрыли по кнопке "OK".
//             - Неопределено - диалог расписания регламентного задания закрыт без сохранения.
//  ТекущаяСтрока - Число - идентификатор строки таблицы "Расписания".
//
&НаКлиенте
Процедура ПослеИзмененияРасписания(Расписание, ТекущаяСтрока) Экспорт
	
	Если Расписание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтрока = Неопределено Тогда
		СтрокаТаблицы = СтрокаРеквизитаРасписания(Расписания.Добавить());
		СтрокаТаблицы.Использование = Истина;
	Иначе
		СтрокаТаблицы = СтрокаРеквизитаРасписания(
			Расписания.НайтиПоИдентификатору(ТекущаяСтрока));
	КонецЕсли;
	
	СтрокаТаблицы.РасписаниеПредставление = Строка(Расписание);
	СтрокаТаблицы.Расписание              = Расписание;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СброситьНастройкиРезервногоКопирования()
	
	Возврат ОблачныйАрхив20.СброситьПараметрыРезервногоКопирования();
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаблокироватьОблачныйАрхивНаСервере()
	
	ОблачныйАрхив20.ЗаблокироватьОблачныйАрхив();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоТипХраненияКопийЗаПоследние(Форма)
	
	Возврат (Форма.ТипХраненияКопий = "AGE");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоТипХраненияКопийПоследние(Форма)
	
	Возврат (Форма.ТипХраненияКопий = "ITEM");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоСценарийПодключения(Форма)
	
	Возврат (Форма.Сценарий = ИдентификаторСценарияПодключение());
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоСценарийОбновленияНастроек(Форма)
	
	Возврат (Форма.Сценарий = ИдентификаторСценарияОбновлениеНастроек());
	
КонецФункции

// Вызывается после интерактивной установки Агента. Если Агент установлен успешно, то запускает асинхронную операцию
// инициализации настроек Облачного архива.
//
// Параметры:
//  КодВозврата - Неопределено, Число - код возврата, тип Число или Неопределено, если соответствующий входной параметр
//    <ДождатьсяЗавершения> не указан.
//  ДополнительныеПараметры - Произвольный - значение, которое было указано при создании объекта ОписаниеОповещения.
//
&НаКлиенте
Процедура ПослеИнтерактивнойУстановкиАгента(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Если КодВозврата = 0 Тогда
		
		ПараметрыИнициализации = ПараметрыИнициализацииФормы(ЭтотОбъект);
		
		ДлительнаяОперация = ИнициализацияНастроекОблачногоАрхиваВФоне(
			ПараметрыИнициализации,
			УникальныйИдентификатор);
		
		АктивироватьСтраницуДлительнойОперации(
			ЭтотОбъект,
			НСтр("ru = 'Проверка подключения Облачного архива.'"));
		
		УправлениеФормой(ЭтотОбъект);
		
		ПриНачалеДлительнойОперации();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	// Управление видимостью колонкой управления активностью расписания
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасписанияИспользование.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("АвтоматическоеРезервноеКопированиеВключено");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать"    , Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ДлительныеОперации

// Формирует данные для инициализации формы настроек.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения:
//    * Логин - Строка
//    * Пароль - Строка
//    * ПараметрыАрхивирования - см. РеквизитПараметрыАрхивирования
//    * СохранитьДанныеАутентификации - Булево
//    * ПользовательскоеСоглашение - Булево
//    * РежимОбновленияНастроек - Строка
// 
// Возвращаемое значение:
//  Структура:
//    * ПараметрыАрхивирования - см. РеквизитПараметрыАрхивирования
//    * СохранитьДанныеАутентификации - Булево
//    * ПользовательскоеСоглашениеПринято - Булево
//    * ДанныеАутентификации - Неопределено - использовать сохраненные данные аутентификации.
//                           - Структура:
//        ** Логин - Строка
//        ** Пароль - Строка
//    * РежимОбновленияНастроек - Строка - заполняется в сценарии обновления настроек.
//                              - Неопределено
//
&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыИнициализацииФормы(Форма)
	
	ДанныеАутентификации = Неопределено;	// см. ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки
	
	Если Не ПустаяСтрока(Форма.Логин) И Не ПустаяСтрока(Форма.Пароль) Тогда
		ДанныеАутентификации = Новый Структура();
		ДанныеАутентификации.Вставить("Логин" , Форма.Логин);
		ДанныеАутентификации.Вставить("Пароль", Форма.Пароль);
	КонецЕсли;
	
	РежимОбновленияНастроек = Неопределено;
	Если ЭтоСценарийОбновленияНастроек(Форма) Тогда
		РежимОбновленияНастроек = Форма.РежимОбновленияНастроек;
	КонецЕсли;
	
	Результат = Новый Структура();
	Результат.Вставить("ПараметрыАрхивирования"           , Форма.ПараметрыАрхивирования);
	Результат.Вставить("СохранитьДанныеАутентификации"    , Форма.СохранитьДанныеАутентификации);
	Результат.Вставить("ПользовательскоеСоглашениеПринято", Форма.ПользовательскоеСоглашение);
	Результат.Вставить("ДанныеАутентификации"             , ДанныеАутентификации);
	Результат.Вставить("РежимОбновленияНастроек"          , РежимОбновленияНастроек);
	
	Возврат Результат;
	
КонецФункции

// Формирует данные для сохранения настроек.
//
// Возвращаемое значение:
//  Структура:
//    * ПараметрыАрхивирования - см. РеквизитПараметрыАрхивирования
//    * НастройкиАрхивирования - Структура:
//        ** НаименованиеИБ - Строка
//        ** ТипХраненияКопий - Строка
//        ** ТипПериодаХраненияКопий - Строка
//        ** ПериодХраненияКопий - Число
//        ** КоличествоКопийВКаталоге - Число
//        ** Расписания - Массив из см. СтрокаРеквизитаРасписания
//
&НаКлиенте
Функция ПараметрыСохраненияНастроек()
	
	// Подготовка сохраняемых настроек
	РеквизитПараметрыАрхивирования().АвтоматическоеРезервноеКопированиеВключено =
		АвтоматическоеРезервноеКопированиеВключено;
	РеквизитПараметрыАрхивирования().ЗавершатьРаботуПользователей               = ЗавершатьРаботуПользователей;
	
	НастройкиАрхивирования = Новый Структура();
	НастройкиАрхивирования.Вставить("НаименованиеИБ"          , НаименованиеИБ);
	НастройкиАрхивирования.Вставить("ТипХраненияКопий"        , ТипХраненияКопий);
	НастройкиАрхивирования.Вставить("ТипПериодаХраненияКопий" , ТипПериодаХраненияКопий);
	НастройкиАрхивирования.Вставить("ПериодХраненияКопий"     , ПериодХраненияКопий);
	НастройкиАрхивирования.Вставить("КоличествоКопийВКаталоге", КоличествоКопийВКаталоге);
	
	НастройкиРасписания = Новый Массив();
	Для Каждого ТекРасписание Из Расписания Цикл
		
		СтрокаРасписания = СтрокаРеквизитаРасписания(ТекРасписание);
		
		Расписание = Новый Структура();
		Расписание.Вставить("Использование"          ,
			АвтоматическоеРезервноеКопированиеВключено И СтрокаРасписания.Использование);
		Расписание.Вставить("Расписание"             , СтрокаРасписания.Расписание);
		Расписание.Вставить("РасписаниеПредставление", СтрокаРасписания.РасписаниеПредставление);
		
		НастройкиРасписания.Добавить(Расписание);
		
	КонецЦикла;
	НастройкиАрхивирования.Вставить("Расписания", НастройкиРасписания);
	
	Результат = Новый Структура();
	Результат.Вставить("ПараметрыАрхивирования", РеквизитПараметрыАрхивирования());
	Результат.Вставить("НастройкиАрхивирования", НастройкиАрхивирования);
	
	Возврат Результат;
	
КонецФункции

// Запускает асинхронный процесс инициализации настроек облачного архива.
//
// Параметры:
//  ПараметрыИнициализации - см. ПараметрыИнициализацииФормы
//  ИдентификаторФормы - УникальныйИдентификатор
//  ЗапуститьВФоне - Булево - Истина, если необходимо запустить инициализацию в фоне.
//
// Возвращаемое значение:
//  Структура:
//    * Статус - Строка - доступные значения:
//        "Выполняется" - если задание еще не завершилось.
//        "Выполнено" - если задание было успешно выполнено.
//        "Ошибка" - если задание завершено с ошибкой.
//        "Отменено" - если задание отменено пользователем или администратором.
//   * ИдентификаторЗадания - УникальныйИдентификатор, Неопределено - если Статус = "Выполняется", то содержит
//       идентификатор запущенного фонового задания. Неопределено, если фоновое задание не запущено.
//   * АдресРезультата - Строка - адрес временного хранилища, в которое будет помещен результат работы функции.
//   * КраткоеПредставлениеОшибки - Строка - краткая информация об исключении, если Статус = "Ошибка".
//   * ПодробноеПредставлениеОшибки - Строка - подробная информация об исключении, если Статус = "Ошибка".
//   * Сообщения - ФиксированныйМассив из СообщениеПользователю - если Статус <> "Выполняется", то массив объектов
//       СообщениеПользователю, которые были сформированы в фоновом задании.
//   * Результат - Неопределено, Структура: см. ОблачныйАрхив20.ИнициализацияНастроекОблачногоАрхиваВФоне - заполняется
//       если Статус = "Выполнено".
//
&НаСервереБезКонтекста
Функция ИнициализацияНастроекОблачногоАрхиваВФоне(
	Знач ПараметрыИнициализации,
	Знач ИдентификаторФормы,
	Знач ЗапуститьВФоне = Истина)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(ИдентификаторФормы);
	ПараметрыВыполнения.ЗапуститьВФоне              = ЗапуститьВФоне;
	ПараметрыВыполнения.ЗапуститьНеВФоне            = Не ЗапуститьВФоне;
	ПараметрыВыполнения.КлючФоновогоЗадания         = "ИнициализацияНастроекОблачногоАрхива";
	ПараметрыВыполнения.НаименованиеФоновогоЗадания =
		НСтр("ru = 'Инициализация настроек сервиса ""Облачный архив""'");
		
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьФункцию(
		ПараметрыВыполнения,
		"ОблачныйАрхив20.ИнициализацияНастроекОблачногоАрхиваВФоне",
		ПараметрыИнициализации);
	
	ДлительнаяОперация.Вставить("Результат", Неопределено);
	
	Если ДлительнаяОперация.Статус <> "Выполняется" Тогда
		Если ЭтоАдресВременногоХранилища(ДлительнаяОперация.АдресРезультата) Тогда
			ДлительнаяОперация.Результат = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДлительнаяОперация;
	
КонецФункции

// Запускает асинхронный процесс сохранение настроек облачного архива.
//
// Параметры:
//  ПараметрыСохранения - см. ПараметрыСохраненияНастроек
//  ИдентификаторФормы - УникальныйИдентификатор
//
// Возвращаемое значение:
//  Структура:
//    * Статус - Строка - доступные значения:
//        "Выполняется" - если задание еще не завершилось.
//        "Выполнено" - если задание было успешно выполнено.
//        "Ошибка" - если задание завершено с ошибкой.
//        "Отменено" - если задание отменено пользователем или администратором.
//   * ИдентификаторЗадания - УникальныйИдентификатор, Неопределено - если Статус = "Выполняется", то содержит
//       идентификатор запущенного фонового задания. Неопределено, если фоновое задание не запущено.
//   * АдресРезультата - Строка - адрес временного хранилища, в которое будет помещен результат работы функции.
//   * КраткоеПредставлениеОшибки - Строка - краткая информация об исключении, если Статус = "Ошибка".
//   * ПодробноеПредставлениеОшибки - Строка - подробная информация об исключении, если Статус = "Ошибка".
//   * Сообщения - ФиксированныйМассив из СообщениеПользователю - если Статус <> "Выполняется", то массив объектов
//       СообщениеПользователю, которые были сформированы в фоновом задании.
//   * Результат - Неопределено, Структура: см. ОблачныйАрхив20.СохранениеНастроекОблачногоАрхиваВФоне - заполняется
//       если Статус = "Выполнено".
//
&НаСервереБезКонтекста
Функция СохранениеНастроекОблачногоАрхиваВФоне(Знач ПараметрыСохранения, Знач ИдентификаторФормы)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(ИдентификаторФормы);
	ПараметрыВыполнения.ЗапуститьВФоне              = Истина;
	ПараметрыВыполнения.КлючФоновогоЗадания         = "СохранениеНастроекОблачногоАрхива";
	ПараметрыВыполнения.НаименованиеФоновогоЗадания =
		НСтр("ru = 'Сохранение настроек сервиса ""Облачный архив""'");
		
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьФункцию(
		ПараметрыВыполнения,
		"ОблачныйАрхив20.СохранениеНастроекОблачногоАрхиваВФоне",
		ПараметрыСохранения);
	
	ДлительнаяОперация.Вставить("Результат", Неопределено);
	
	Если ДлительнаяОперация.Статус <> "Выполняется" Тогда
		Если ЭтоАдресВременногоХранилища(ДлительнаяОперация.АдресРезультата) Тогда
			ДлительнаяОперация.Результат = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура АктивироватьСтраницуДлительнойОперации(Форма, ПояснениеДлительнойОперации, ПоказатьПрогресс = Истина)
	
	Элементы = Форма.Элементы;
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница      = Элементы.СтраницаДлительнаяОперация;
	Элементы.НадписьДлительнаяОперация.Заголовок = ПояснениеДлительнойОперации;
	Элементы.Прогресс.Видимость                  = ПоказатьПрогресс;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриНачалеДлительнойОперации()
	
	Если РеквизитДлительнаяОперация() <> Неопределено
		И РеквизитДлительнаяОперация().Статус = "Выполняется" Тогда
		
		ОповещениеПриОбновлении = Новый ОписаниеОповещения("ПриОбновленииПрогрессаДлительнойОперации", ЭтотОбъект);
		ОповещениеОЗавершении   = Новый ОписаниеОповещения("ПослеЗавершенияДлительнойОперации"       , ЭтотОбъект);
		
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ВыводитьОкноОжидания           = Ложь;
		НастройкиОжидания.ВыводитьПрогрессВыполнения     = Истина;
		НастройкиОжидания.ОповещениеОПрогрессеВыполнения = ОповещениеПриОбновлении;
		НастройкиОжидания.Интервал                       = 1;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			РеквизитДлительнаяОперация(),
			ОповещениеОЗавершении,
			НастройкиОжидания);
		
	Иначе
		ПослеЗавершенияДлительнойОперации(РеквизитДлительнаяОперация(), СтраницаПриОтмене);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет обновление прогресса длительной операции на форме.
//
// Параметры:
//  Задание - Структура:
//    * Прогресс - Неопределено - отсутствует информация о прогрессе.
//               - Структура:
//        ** Текст - Строка
//        ** Процент - Число
//  ДополнительныеПараметры - Неопределено
//
&НаКлиенте
Процедура ПриОбновленииПрогрессаДлительнойОперации(Задание, ДополнительныеПараметры) Экспорт
	
	Если Задание.Прогресс <> Неопределено Тогда
		Элементы.НадписьДлительнаяОперация.Заголовок = Задание.Прогресс.Текст;
		Прогресс                                     = Задание.Прогресс.Процент;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет обработку результата длительной операции.
//
// Параметры:
//  Результат - Структура: см. ДлительныеОперации.ВыполнитьВФоне
//            - Неопределено
//  ДополнительныеПараметры - Произвольный
//
&НаКлиенте
Процедура ПослеЗавершенияДлительнойОперации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено
		Или Результат.Статус = "Отменено" Тогда
		
		Если ДлительнаяОперация <> Неопределено Тогда
			
			Если СтраницаПриОтмене = Неопределено Тогда
				Закрыть();
			Иначе
				Элементы.ГруппаСтраницы.ТекущаяСтраница = СтраницаПриОтмене;
			КонецЕсли;
			
			ДлительнаяОперация = Неопределено;
			
		КонецЕсли;
		
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		
		ПрименитьРезультатДлительнойОперации(Результат);
		
		ДлительнаяОперация = Неопределено;
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница  = Элементы.СтраницаОписаниеОшибки;
		Элементы.НадписьОписаниеОшибки.Заголовок = Результат.КраткоеПредставлениеОшибки;
		
		ДлительнаяОперация = Неопределено;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

// Отменяет выполнение фонового задания по переданному идентификатору.
//
// Параметры:
//  ИдентификаторЗадания - УникальныйИдентификатор
//
&НаСервереБезКонтекста
Процедура ОтменитьВыполнениеДлительнойОперации(Знач ИдентификаторЗадания)
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьРезультатДлительнойОперации(РезультатДлительнойОперации)
	
	СвойствоРезультат = Новый Структура("Результат");
	ЗаполнитьЗначенияСвойств(СвойствоРезультат, РезультатДлительнойОперации);
	
	Если СвойствоРезультат.Результат = Неопределено Тогда
		РезультатВыполнения = ПолучитьИзВременногоХранилища(РезультатДлительнойОперации.АдресРезультата);	// см. ОблачныйАрхив20.ИнициализацияНастроекОблачногоАрхиваВФоне
	Иначе
		РезультатВыполнения = СвойствоРезультат.Результат;	// см. ОблачныйАрхив20.ИнициализацияНастроекОблачногоАрхиваВФоне
	КонецЕсли;
	
	Если РезультатВыполнения.ПараметрыАрхивирования <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(
			ПараметрыАрхивирования,
			РезультатВыполнения.ПараметрыАрхивирования,
			"АгентID,URI,ЛогинИПП,РаботаРезервногоКопированияЗаблокирована,ДатаОбновленияНастроек");
	КонецЕсли;
	
	Статус = РезультатВыполнения.Статус;
	Если Статус = ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаОблачныйАрхивНастройкиПолучены() Тогда
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаНастройкиРезервногоКопирования;
		ЗаполнитьЗначенияСвойств(
			ЭтотОбъект,
			РезультатВыполнения.ПараметрыАрхивирования,
			"АвтоматическоеРезервноеКопированиеВключено,ЗавершатьРаботуПользователей");
		ЗаполнитьЗначенияСвойств(
			ЭтотОбъект,
			РезультатВыполнения.НастройкиАрхивирования,
			"НаименованиеИБ,ТипПериодаХраненияКопий,ПериодХраненияКопий,ТипХраненияКопий,КоличествоКопийВКаталоге,ЧасовойПояс,ЧасовойПоясСеанса,ЧасовойПоясСервера");
		
		Расписания.Очистить();
		Для Каждого ТекРасписание Из РезультатВыполнения.НастройкиАрхивирования.Расписания Цикл
			ЗаполнитьЗначенияСвойств(Расписания.Добавить(), ТекРасписание);
		КонецЦикла;
		
		Если ПустаяСтрока(ЧасовойПояс)
			Или ПустаяСтрока(ЧасовойПоясСеанса)
			Или ПустаяСтрока(ЧасовойПоясСервера) Тогда
			
			Элементы.РазныеЧасовыеПоясаПояснение.Заголовок = "";
			
		ИначеЕсли ЧасовойПояс <> ЧасовойПоясСеанса Тогда
			Элементы.РазныеЧасовыеПоясаПояснение.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Расписания резервного копирования сохранены в часовом поясе UTC %1.
					|При обновлении настроек, расписания будут сохранены в текущем часовом поясе UTC %2.'"),
				ЧасовойПояс,
				ЧасовойПоясСеанса);
		ИначеЕсли ЧасовойПоясСеанса <> ЧасовойПоясСервера Тогда
			Элементы.РазныеЧасовыеПоясаПояснение.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Часовой пояс сервера UTC %1.
					|При обновлении настроек, расписания будут сохранены в часовом поясе клиента UTC %2.'"),
				ЧасовойПоясСервера,
				ЧасовойПоясСеанса);
		Иначе
			Элементы.РазныеЧасовыеПоясаПояснение.Заголовок = "";
		КонецЕсли;
		
		НастройкиЗагружены = Истина;
		Если ПустаяСтрока(Сценарий) Тогда
			Сценарий  = ИдентификаторСценарияНастройки();
			Заголовок = НСтр("ru = 'Настройки 1С:Облачный архив'");
		КонецЕсли;
		
	ИначеЕсли Статус = ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаОблачныйАрхивНастройкиСохранены() Тогда
		
		Оповестить(
			ОблачныйАрхив20Клиент.ИмяСобытияОповещенияНастройкиОблачногоАрхиваСохранены(),
			РезультатВыполнения.ОблачныйАрхивРаботает);
		
		// Обновление времени до резервного копирования
		ОтключитьОбработчикОжидания("ОблачныйАрхив20_КонтрольПриближенияАвтоматическогоРезервногоКопирования");
		ОтключитьОбработчикОжидания("ОблачныйАрхив20_ОбновитьВремяДоАвтоматическогоРезервногоКопирования");
		
		ОблачныйАрхив20_ОбновитьВремяДоАвтоматическогоРезервногоКопирования();
		
		Модифицированность = Ложь;
		Закрыть();
		
	ИначеЕсли Статус = ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаОблачныйАрхивНеПодключен() Тогда
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОписаниеИСоглашение;
		
		Если ПустаяСтрока(Сценарий) Тогда
			Сценарий = ИдентификаторСценарияПодключение();
		КонецЕсли;
		
	ИначеЕсли Статус = ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаИППОшибкаАутентификации()
		Или Статус = ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаИППНеПодключена()
		Или Статус = ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаИПППодключенНаДругойЛогин() Тогда
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница        = Элементы.СтраницаПодключениеИПП;
		Элементы.ГруппаОшибкаПодключенияИПП.Видимость  = Не ПустаяСтрока(РезультатВыполнения.СообщениеПользователю);
		Элементы.НадписьОшибкаПодключенияИПП.Заголовок = РезультатВыполнения.СообщениеПользователю;
		
		Если РезультатВыполнения.ДанныеАутентификации <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, РезультатВыполнения.ДанныеАутентификации);
		КонецЕсли;
		
		Если ПустаяСтрока(Сценарий) Тогда
			Сценарий = ИдентификаторСценарияПодключениеИПП();
		КонецЕсли;
		
	// Отсутствует подписка
	ИначеЕсли Статус = ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаОблачныйАрхивНедоступен() Тогда
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСервисНедоступен;
		
		// ИнтернетПоддержкаПользователей.ПодключениеСервисовСопровождения
		Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПодключениеСервисовСопровождения") Тогда
			
			МодульПодключениеСервисовСопровожденияКлиент =
				ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключениеСервисовСопровожденияКлиент");
			МодульПодключениеСервисовСопровожденияКлиент.ОтображениеТестовыхПериодов(ЭтотОбъект);
			
		КонецЕсли;
		// Конец ИнтернетПоддержкаПользователей.ПодключениеСервисовСопровождения
		
	// Информационная база перемещена
	ИначеЕсли Статус = ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаИнформационнаяБазаПеремещена() Тогда
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаИнформационнаяБазаПеремещена;
		
		ИнформацияОПеремещении =
			НСтр("ru = 'Резервное копирование информационной базы приостановлено, так как изменилось размещение базы с
				|<b>%1</b>
				|на
				|<b>%2</b>
				|
				|
				|<b>Обновление настроек</b> позволит восстановить резервное копирование информационной базы.
				|<b>Отключение резервного копирования</b> переведет систему в первоначальное состояние по резервному копированию.'");
		
		Элементы.НадписьИнформационнаяБазаПеремещена.Заголовок = СтроковыеФункцииКлиент.ФорматированнаяСтрока(
			ИнформацияОПеремещении,
			РеквизитПараметрыАрхивирования().URI,
			РезультатВыполнения.URIТекущий);
		
		ПодсказкаРежимаОбновления =
			НСтр("ru = 'Отключить от резервного копирования <b>%1</b> и подключить <b>%2</b>.'");
		
		Элементы.РежимОбновленияНастроекОбновитьАдресРазмещенияРасширеннаяПодсказка.Заголовок =
			СтроковыеФункцииКлиент.ФорматированнаяСтрока(ПодсказкаРежимаОбновления,
				РеквизитПараметрыАрхивирования().URI,
				РезультатВыполнения.URIТекущий);
		
		Если ПустаяСтрока(Сценарий) Тогда
			Сценарий = ИдентификаторСценарияОбновлениеНастроек();
		КонецЕсли;
		
	// Ошибка в работе Облачного архива
	Иначе
		
		ЛогУстановкиАгента     = РезультатВыполнения.ЛогУстановкиАгента;
		ФайлДистрибутиваАгента = РезультатВыполнения.ФайлДистрибутиваАгента;
		СообщениеТехподдержке  = РезультатВыполнения.СообщениеТехподдержке;
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница  = Элементы.СтраницаОписаниеОшибки;
		Элементы.НадписьОписаниеОшибки.Заголовок = РезультатВыполнения.СообщениеПользователю;
		
		Если ПустаяСтрока(Сценарий) Тогда
			Сценарий = ИдентификаторСценарияОшибка();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИдентификаторыСценарийРаботы

&НаКлиентеНаСервереБезКонтекста
Функция ИдентификаторСценарияПодключение()
	
	Возврат "Подключение";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИдентификаторСценарияОбновлениеНастроек()
	
	Возврат "ОбновлениеНастроек";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИдентификаторСценарияПодключениеИПП()
	
	Возврат "ПодключениеИПП";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИдентификаторСценарияНастройки()
	
	Возврат "Настройки";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИдентификаторСценарияОшибка()
	
	Возврат "Ошибка";
	
КонецФункции

#КонецОбласти

#Область МетодыОписанияПеременных

// Возвращает описание реквизита "ПараметрыАрхивирования".
//
// Возвращаемое значение:
//  см. ОблачныйАрхив20.СохраненныеПараметрыРезервногоКопирования
//
&НаКлиенте
Функция РеквизитПараметрыАрхивирования()
	
	Возврат ПараметрыАрхивирования;
	
КонецФункции

// Возвращает описание реквизита формы "ДлительнаяОперация".
//
// Возвращаемое значение:
//  Неопределено - длительная операция не запущена.
//  см. ИнициализацияНастроекОблачногоАрхиваВФоне
//
&НаКлиенте
Функция РеквизитДлительнаяОперация()
	
	Возврат ДлительнаяОперация;
	
КонецФункции

// Возвращает описание реквизитов строки таблицы значений "Расписания".
//
// Параметры:
//  СтрокаТаблицы - ДанныеФормыЭлементКоллекции: см. Обработка.ОблачныйАрхив20.Форма.НастройкаСервиса.Элементы.Расписания
//
// Возвращаемое значение:
//  ДанныеФормыЭлементКоллекции:
//    * Использование - Булево
//    * Расписание - РасписаниеРегламентногоЗадания
//    * РасписаниеПредставление - Строка
//
&НаКлиентеНаСервереБезКонтекста
Функция СтрокаРеквизитаРасписания(СтрокаТаблицы)
	
	Возврат СтрокаТаблицы;
	
КонецФункции

// Возвращает описание строки детального расписания.
//
// Параметры:
//  СтрокаТаблицы - Произвольный
//
// Возвращаемое значение:
//  Структура:
//    * ВремяНачала - Дата
//    * ВремяКонца - Дата
//    * ВремяЗавершения - Дата
//    * ИнтервалЗавершения - Число
//    * ПериодПовтораВТечениеДня - Число
//    * ПаузаПовтора - Число
//
&НаКлиентеНаСервереБезКонтекста
Функция СтрокаДетальногоРасписанияДня(СтрокаТаблицы)
	
	Возврат СтрокаТаблицы;
	
КонецФункции

#КонецОбласти

#Область ПодключениеСервисовСопровождения

&НаКлиенте
Процедура ТестовыйПериодПодключен(Результат, ДополнительныеПараметры) Экспорт
	ПодключитьОбработчикОжидания("ВыполнитьПереходНаСледующийШаг", 0.1, Истина);
КонецПроцедуры

// ИнтернетПоддержкаПользователей.ПодключениеСервисовСопровождения
&НаКлиенте
Процедура Подключаемый_КомандаПодключенияТестовогоПериода()
	
	МодульПодключениеСервисовСопровожденияКлиент =
		ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключениеСервисовСопровожденияКлиент");
	МодульПодключениеСервисовСопровожденияКлиент.КомандаПодключенияТестовогоПериода(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриПодключенииТестовогоПериодаНаФорме(Результат, ДополнительныеПараметры) Экспорт
	
	ПриПодключенииТестовогоПериодаНаСервере(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ПриПодключенииТестовогоПериодаНаСервере(Знач Результат, Знач ДополнительныеПараметры)
	
	МодульПодключениеСервисовСопровождения = ОбщегоНазначения.ОбщийМодуль("ПодключениеСервисовСопровождения");
	МодульПодключениеСервисовСопровождения.ПриПодключенииТестовогоПериодаНаФорме(
		ЭтотОбъект,
		Результат,
		ДополнительныеПараметры);
	
КонецПроцедуры

// Конец ИнтернетПоддержкаПользователей.ПодключениеСервисовСопровождения

#КонецОбласти

#КонецОбласти