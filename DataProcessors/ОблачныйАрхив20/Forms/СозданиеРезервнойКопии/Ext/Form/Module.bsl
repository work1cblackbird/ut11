///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПараметрыОткрытия = НовыйПараметрыПриОткрытии();
	
	Если Параметры.ПоказатьСтатусКопирования Тогда
		
		НастройкиКопирования               = ОписаниеВходногоПараметраНастройкиКопирования();
		ИдентификаторРезервногоКопирования = НастройкиКопирования.ЗаданиеID;
		
		ПоказатьСтатусРезервногоКопированияНаСервере();
		
		// Удаление данных из общего хранилища
		ОблачныйАрхив20.УдалитьНастройки(
			ОблачныйАрхив20.КлючНастроекРучногоРезервногоКопирования());
		ОблачныйАрхив20.УдалитьНастройки(
			ОблачныйАрхив20.КлючНастроекРучногоРезервногоКопирования(),
			ИмяПользователя());
		
	// Проверка возможности использования сервиса
	ИначеЕсли ОблачныйАрхив20.ДоступноИспользованиеСервисаОблачныйАрхив() Тогда
		
		ПараметрыОткрытия.РезультатИнициализации = ИнициализацияРезервногоКопированияНаСервере(
			ПараметрыИнициализацииРезервногоКопирования(ЭтотОбъект));
		
		ДатаПоследнегоРезервногоКопирования = ОблачныйАрхив20.ЗагрузитьНастройки(
			ОблачныйАрхив20.КлючНастроекДатаПоследнегоРезервногоКопирования());	// Дата
		Если ЗначениеЗаполнено(ДатаПоследнегоРезервногоКопирования) Тогда
			Элементы.НадписьДатаПроведенияПоследнегоРезервногоКопирования.Заголовок =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В последний раз резервное копирование проводилось: %1'"),
					Формат(МестноеВремя(ДатаПоследнегоРезервногоКопирования), "ДЛФ=ДДВ"));
		КонецЕсли;
		
		// Обработка открытия формы через программный интерфейс
		Если Параметры.ПараметрыСозданияРезервнойКопии <> Неопределено Тогда
			
			ПараметрыСозданияРезервнойКопии = Параметры.ПараметрыСозданияРезервнойКопии;	// см. ОблачныйАрхив20Клиент.ПараметрыСозданияРезервнойКопии
			
			Комментарий = ПараметрыСозданияРезервнойКопии.Комментарий;
			
			ПараметрыОткрытия.КомментарийЗаполнен  = Истина;
			ПараметрыОткрытия.ЗапуститьПриОткрытии = ПараметрыСозданияРезервнойКопии.ЗапуститьПриОткрытии;
			
		КонецЕсли;
		
	Иначе
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница  = Элементы.СтраницаОписаниеОшибки;
		Элементы.НадписьОписаниеОшибки.Заголовок =
			НСтр("ru = 'Использование обработки доступно при соблюдения следующих критериев:
				| - Информационная база работает в файловом режим без использования веб-сервера.
				| - Информационная база работает не в модели сервиса.
				| - Информационная база работает в режиме автономного рабочего места.
				| - Операционная система Windows 7 и старше.
				| - Пользователь обладает правом ""Администратор системы"".'");
		
	КонецЕсли;
	
	ПараметрыПриОткрытии = ПараметрыОткрытия;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПараметрыОткрытия = ПараметрыПриОткрытии;	// см. НовыйПараметрыПриОткрытии
	
	Если Не ПараметрыОткрытия.КомментарийЗаполнен Тогда
		ПараметрыКлиента = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента();
		Комментарий      = ПараметрыКлиента.ЗаголовокПриложения;
	КонецЕсли;
	
	ТекущаяСтраница = Элементы.ГруппаСтраницы.ТекущаяСтраница;
	Если ТекущаяСтраница = Элементы.СтраницаОписаниеОшибки Тогда
		Возврат;
	КонецЕсли;
	
	РезультатИнициализации = ПараметрыОткрытия.РезультатИнициализации;
	Если РезультатИнициализации <> Неопределено Тогда
		ПрименитьРезультатОперации(РезультатИнициализации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница <> Элементы.СтраницаДлительнаяОперация Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	Если ЗавершениеРаботы Тогда
		ТекстПредупреждения =
			НСтр("ru = 'Процесс создания резервной копии не завершен.
				|Перед закрытием программы необходимо вручную отменить создание копии.'");
	Иначе
		
		Оповещение   = Новый ОписаниеОповещения("ПередЗакрытиемПродолжение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Прервать подготовку к резервному копированию?'");
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область СтраницаПодключениеИПП

&НаКлиенте
Процедура НадписьПояснениеПодключенияИППОбработкаНавигационнойСсылки(
	Элемент,
	НавигационнаяСсылкаФорматированнойСтроки,
	СтандартнаяОбработка)
	
	ВыполнитьОбработкуНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛогинПриИзменении(Элемент)
	
	СохранитьДанныеАутентификации = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПарольПриИзменении(Элемент)
	
	СохранитьДанныеАутентификации = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьВосстановленияПароляАвторизацияНажатие(Элемент)
	
	ИнтернетПоддержкаПользователейКлиент.ОткрытьСтраницуВосстановленияПароля();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНетЛогинаИПароляАвторизацияНажатие(Элемент)
	
	ИнтернетПоддержкаПользователейКлиент.ОткрытьСтраницуРегистрацииНовогоПользователя();
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаУспешногоВыполненияКопирования

&НаКлиенте
Процедура НадписьУспешногоРезервногоКопированияОбработкаНавигационнойСсылки(
	Элемент,
	НавигационнаяСсылкаФорматированнойСтроки,
	СтандартнаяОбработка)
	
	ВыполнитьОбработкуНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияАвтоматическоеРезервноеКопированиеОбработкаНавигационнойСсылки(
	Элемент,
	НавигационнаяСсылкаФорматированнойСтроки,
	СтандартнаяОбработка)
	
	ВыполнитьОбработкуНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура НадписьОписаниеОшибкиОбработкаНавигационнойСсылки(
	Элемент,
	НавигационнаяСсылкаФорматированнойСтроки,
	СтандартнаяОбработка)
	
	ВыполнитьОбработкуНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСервисНедоступенОбработкаНавигационнойСсылки(
	Элемент,
	НавигационнаяСсылкаФорматированнойСтроки,
	СтандартнаяОбработка)
	
	ВыполнитьОбработкуНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПосмотретьСписокАктивныхСеансовНажатие(Элемент)
	
	СтандартныеПодсистемыКлиент.ОткрытьСписокАктивныхПользователей(, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПользователейНажатие(Элемент)
	
	СтандартныеПодсистемыКлиент.ОткрытьСписокАктивныхПользователей(, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаДалее(Команда)
	
	ВыполнитьОбработкуКомандыДалее();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	ТекущаяСтраница = Элементы.ГруппаСтраницы.ТекущаяСтраница;
	Если ТекущаяСтраница = Элементы.СтраницаДлительнаяОперация Тогда
		
		// Прервать подготовку к резервному копированию
		ОтключитьОбработчикОжидания("ПроверитьСтатусВыполненияРезервногоКопирования");
		ОтключитьОбработчикОжидания("ТаймаутОжиданияНачалаРезервногоКопирования");
		
		ОтменитьПодготовкуРезервногоКопированиюНаКлиенте();
		
	Иначе
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщегоНазначения

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы        = Форма.Элементы;
	ТекущаяСтраница = Элементы.ГруппаСтраницы.ТекущаяСтраница;
	
	Если ТекущаяСтраница = Элементы.СтраницаПодключениеИПП Тогда
		
		Элементы.КомандаДалее.Видимость  = Истина;
		Элементы.КомандаДалее.Заголовок  = "";
		Элементы.КомандаОтмена.Заголовок = "";
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаПодготовкаККопированию Тогда
		
		Элементы.КомандаДалее.Видимость  = Истина;
		Элементы.КомандаДалее.Заголовок  = НСтр("ru = 'Сохранить резервную копию'");
		Элементы.КомандаОтмена.Заголовок = "";
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаОписаниеОшибки Тогда
		
		Элементы.КомандаДалее.Видимость  = Не ПустаяСтрока(Форма.ОперацияПовтора);
		Элементы.КомандаДалее.Заголовок  = НСтр("ru = 'Повторить попытку'");
		Элементы.КомандаОтмена.Заголовок = НСтр("ru = 'Закрыть'");
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаДлительнаяОперация Тогда
		
		Элементы.КомандаДалее.Видимость  = Ложь;
		Элементы.КомандаОтмена.Заголовок = "";
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаУспешногоВыполненияКопирования
		Или ТекущаяСтраница = Элементы.СтраницаСервисНедоступен Тогда
		
		Элементы.КомандаДалее.Видимость  = Ложь;
		Элементы.КомандаОтмена.Заголовок = НСтр("ru = 'Закрыть'");
		Элементы.ФормаСправка.Видимость  = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеНаКлиенте()
	
	ОчиститьСообщения();
	
	ТекущаяСтраница = Элементы.ГруппаСтраницы.ТекущаяСтраница;
	Если ТекущаяСтраница = Элементы.СтраницаПодключениеИПП Тогда
		
		ДанныеАутентификации = Новый Структура("Логин, Пароль", Логин, Пароль);
		РезультатПроверки    = ИнтернетПоддержкаПользователейКлиентСервер.ПроверитьДанныеАутентификации(
			ДанныеАутентификации);
		
		Если РезультатПроверки.Отказ Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатПроверки.СообщениеОбОшибке, , РезультатПроверки.Поле);
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьОбработкуНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если СтрСравнить(НавигационнаяСсылкаФорматированнойСтроки, "TechSupport") = 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СообщенияВСлужбуТехническойПоддержки") Тогда
			
			МодульСообщенияВСлужбуТехническойПоддержкиКлиентСервер =
				ОбщегоНазначенияКлиент.ОбщийМодуль("СообщенияВСлужбуТехническойПоддержкиКлиентСервер");
			ДанныеСообщения = МодульСообщенияВСлужбуТехническойПоддержкиКлиентСервер.ДанныеСообщения();
			
			Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПодключениеИПП Тогда
				
				ДанныеСообщения.Получатель = "webIts";
				ДанныеСообщения.Тема       = НСтр("ru = 'Интернет-поддержка. Подключение Интернет-поддержки.'");
				ДанныеСообщения.Сообщение  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не получается подключить Интернет-поддержку пользователей.
						|Для подключения указывается логин %1.'"),
					Логин);
				
			Иначе
				
				ДанныеСообщения.Получатель = "backup";
				ДанныеСообщения.Тема       = НСтр("ru = 'Интернет-поддержка. Ручное резервное копирование 1С:Облачный архив.'");
				ДанныеСообщения.Сообщение  = СообщениеТехподдержке;
				
			КонецЕсли;
			
			МодульСообщенияВСлужбуТехническойПоддержкиКлиент = 
				ОбщегоНазначенияКлиент.ОбщийМодуль("СообщенияВСлужбуТехническойПоддержкиКлиент");
			МодульСообщенияВСлужбуТехническойПоддержкиКлиент.ОтправитьСообщение(ДанныеСообщения);
			
		КонецЕсли;
		
	ИначеЕсли СтрСравнить(НавигационнаяСсылкаФорматированнойСтроки, "Action:InstallAgent") = 0 Тогда
		
		Закрыть();
		
		ОткрытьФорму(
			"Обработка.ОблачныйАрхив20.Форма.НастройкаСервиса",
			Новый Структура("УстановкаАгента", Истина));
		
	Иначе
		
		ОблачныйАрхив20Клиент.ОбработкаНавигационнойСсылки(
			ЭтотОбъект,
			Элемент,
			НавигационнаяСсылкаФорматированнойСтроки,
			СтандартнаяОбработка);
		
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница <> Элементы.СтраницаУспешногоВыполненияКопирования
			И СтрСравнить(НавигационнаяСсылкаФорматированнойСтроки, "Backup1C:OpenSettings") = 0 Тогда
			
			Закрыть();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик ответа на вопрос-подтверждения завершения работы с окном.
//
// Параметры:
//  РезультатВопроса - Неопределено, КодВозвратаДиалога - результат ответа на вопрос.
//  ДополнительныеПараметры - Произвольный
//
&НаКлиенте
Процедура ПередЗакрытиемПродолжение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОтменитьПодготовкуРезервногоКопированиюНаКлиенте();
	
	Закрыть();
	
КонецПроцедуры

// Описание дополнительных параметров полученные на сервере при открытии с целью передачи их на клиент.
//
// Возвращаемое значение:
//  Структура:
//    * РезультатИнициализации - Неопределено - инициализация резервного копирования не запускалась.
//                             - см. ИнициализацияРезервногоКопированияНаСервере
//    * КомментарийЗаполнен - Булево - Истина, если значение комментария было передано при открытии.
//    * ЗапуститьПриОткрытии - Булево - Истина, если необходимо сразу запустить резервное копирование при открытии.
//
&НаКлиентеНаСервереБезКонтекста
Функция НовыйПараметрыПриОткрытии()
	
	Результат = Новый Структура();
	Результат.Вставить("РезультатИнициализации", Неопределено);
	Результат.Вставить("КомментарийЗаполнен"   , Ложь);
	Результат.Вставить("ЗапуститьПриОткрытии"  , Ложь);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ИдентификаторыОпераций

&НаКлиентеНаСервереБезКонтекста
Функция ИдентификаторОперацииИнициализацииФормы()
	
	Возврат "ИнициализацияФормы";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИдентификаторОперацииРегистрацииЗадания()
	
	Возврат "РегистрацияЗадания";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИдентификаторОперацииОбновленияСтатусаЗадания()
	
	Возврат "ОбновлениеСтатусаЗадания";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИдентификаторОперацииОтменыЗадания()
	
	Возврат "ОтменаЗадания";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИдентификаторОперацииОбновленияСтатусаЗаданияПослеАрхивирования()
	
	Возврат "ОбновлениеСтатусаЗаданияПослеАрхивирования";
	
КонецФункции

#КонецОбласти

#Область ОперацииРезервногоКопирования

&НаКлиенте
Процедура ВыполнитьОбработкуКомандыДалее()
	
	Если Не ПроверитьЗаполнениеНаКлиенте() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтраница   = Элементы.ГруппаСтраницы.ТекущаяСтраница;
	ЭтоСтраницаОшибки = (ТекущаяСтраница = Элементы.СтраницаОписаниеОшибки);
	
	Если ТекущаяСтраница = Элементы.СтраницаПодготовкаККопированию
		Или (ЭтоСтраницаОшибки
		И ОперацияПовтора = ИдентификаторОперацииРегистрацииЗадания()) Тогда
		
		ПодготовкаРезервногоКопированияНаКлиенте();
		
	ИначеЕсли ЭтоСтраницаОшибки
		И ОперацияПовтора = ИдентификаторОперацииОбновленияСтатусаЗадания() Тогда
		
		ПроверитьСтатусВыполненияРезервногоКопирования();
		
	ИначеЕсли ЭтоСтраницаОшибки
		И ОперацияПовтора = ИдентификаторОперацииОтменыЗадания() Тогда
		
		ОтменитьПодготовкуРезервногоКопированиюНаКлиенте();
		
	ИначеЕсли ЭтоСтраницаОшибки
		И ОперацияПовтора = ИдентификаторОперацииОбновленияСтатусаЗаданияПослеАрхивирования() Тогда
		
		ПоказатьСтатусРезервногоКопированияНаСервере();
		
	Иначе
		ИнициализацияРезервногоКопированияНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыИнициализацииРезервногоКопирования(Форма)
	
	ДанныеАутентификации = Неопределено;
	
	Если Не ПустаяСтрока(Форма.Логин)
		И Не ПустаяСтрока(Форма.Пароль) Тогда
		
		ДанныеАутентификации = Новый Структура("Логин, Пароль", Форма.Логин, Форма.Пароль);
		
	КонецЕсли;
	
	Результат = Новый Структура();
	Результат.Вставить("СохранитьДанныеАутентификации", Форма.СохранитьДанныеАутентификации);
	Результат.Вставить("ДанныеАутентификации"         , ДанныеАутентификации);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ИнициализацияРезервногоКопированияНаКлиенте()
	
	ОперацияПовтора        = ИдентификаторОперацииИнициализацииФормы();
	ПараметрыВыполнения    = ПараметрыИнициализацииРезервногоКопирования(ЭтотОбъект);
	РезультатИнициализации = ИнициализацияРезервногоКопированияНаСервере(ПараметрыВыполнения);
	
	ПрименитьРезультатОперации(РезультатИнициализации);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИнициализацияРезервногоКопированияНаСервере(Знач ПараметрыВыполнения)
	
	Попытка
		Результат = ОблачныйАрхив20.ИнициализацияРезервногоКопированияПоЗапросу(ПараметрыВыполнения);
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ШаблонСообщения    =
			НСтр("ru = 'Ошибка инициализации резервного копирования по причине:
				|%1'");
		
		Результат = Новый Структура();
		Результат.Вставить("Статус"               , ОблачныйАрхив20.ИдентификаторСтатусаПрочаяОшибка());
		Результат.Вставить("СообщениеПользователю",
			НСтр("ru = 'Ошибка инициализации резервного копирования.'"));
		Результат.Вставить("СообщениеТехподдержке",
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения,
				ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке)));
		
		ОблачныйАрхив20.ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)),
			Истина);
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПоказатьСтатусРезервногоКопированияНаСервере()
	
	ОперацияПовтора   = ИдентификаторОперацииОбновленияСтатусаЗаданияПослеАрхивирования();
	РезультатПроверки = ПолучитьСтатусЗаданияНаВыполнениеРезервногоКопирования(ИдентификаторРезервногоКопирования);
	Если РезультатПроверки.Статус = ОблачныйАрхив20.ИдентификаторСтатусаРезервноеКопированиеВыполнено() Тогда
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница                     = Элементы.СтраницаУспешногоВыполненияКопирования;
		Элементы.ГруппаАвтоматическоеРезервноеКопирование.Видимость = АвтоматическоеРезервноеКопированиеНеВключено()
			И ОблачныйАрхив20.ДоступноИспользованиеСервисаОблачныйАрхив(Истина);
		
	ИначеЕсли РезультатПроверки.Статус = ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаРезервноеКопированиеЗаданиеОтменено() Тогда
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница  = Элементы.СтраницаОписаниеОшибки;
		Элементы.НадписьОписаниеОшибки.Заголовок =
			НСтр("ru = 'Резервное копирование отменен по инициативе пользователя или Агента облачного архива.'");
		
	ИначеЕсли РезультатПроверки.Статус = ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаРезервноеКопированиеЗаданиеСоздано()
		Или РезультатПроверки.Статус = ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаРезервноеКопированиеЗаданиеПодтверждено() Тогда
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница  = Элементы.СтраницаОписаниеОшибки;
		Элементы.НадписьОписаниеОшибки.Заголовок =
			НСтр("ru = 'Не удалось получить статус резервного копирования от Агента облачного архива. Возможные причины:
				|  - отсутствует или нестабильное подключение к сети Интернет на компьютере Агента облачного архива;
				|  - брандмауэр или другое промежуточное ПО (антивирусы и т.п.) блокируют попытки Агента облачного архива подключиться к сети Интернет;
				|  - недостаточно места на диске, где установлен Агент облачного архива;
				|  - программа или служба Агента облачного архива не запущена;
				|  - в сервисе Облачного архива возникли неполадки.
				|
				|Обратитесь к администратору или напишите в техническую поддержку.'");
		
	ИначеЕсли Не ПустаяСтрока(РезультатПроверки.СообщениеПользователю) Тогда
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница  = Элементы.СтраницаОписаниеОшибки;
		Элементы.НадписьОписаниеОшибки.Заголовок = РезультатПроверки.СообщениеПользователю;
		
	Иначе
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница  = Элементы.СтраницаОписаниеОшибки;
		Элементы.НадписьОписаниеОшибки.Заголовок = НСтр("ru = 'Ошибка чтение статуса резервного копирования.'");
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаРезервногоКопированияНаКлиенте()
	
	ОперацияПовтора     = ИдентификаторОперацииРегистрацииЗадания();
	РезультатПодготовки = ПодготовкаРезервногоКопированияНаСервере(Комментарий);
	
	Если РезультатПодготовки.Статус = ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаРезервноеКопированиеЗаданиеСоздано() Тогда
		
		ОперацияПовтора                    = "";
		ИдентификаторРезервногоКопирования = РезультатПодготовки.IDЗадания;
		
		УстановитьРежимЗавершенияРаботы(Истина);
		АктивироватьСтраницуДлительнойОперации(
			НСтр("ru = 'Выполняется регистрация задания резервного копирования.'"));
		ОбновитьИнформациюОбАктивныхСеансах(РезультатПодготовки);
		
		ПодключитьОбработчикОжидания("ПроверитьСтатусВыполненияРезервногоКопирования", 10, Истина);
		
	ИначеЕсли РезультатПодготовки.Статус = ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаРезервноеКопированиеЗаданиеПодтверждено() Тогда
		
		ОперацияПовтора                    = "";
		ИдентификаторРезервногоКопирования = РезультатПодготовки.IDЗадания;
		
		УстановитьРежимЗавершенияРаботы(Истина);
		
		Если РезультатПодготовки.НаличиеАктивныхСоединений Тогда
			
			АктивироватьСтраницуДлительнойОперации(
				НСтр("ru = 'Производится отключение сеансов других пользователей,
					|работающих в программе...'"));
			ОбновитьИнформациюОбАктивныхСеансах(РезультатПодготовки);
			
			ПодключитьОбработчикОжидания("ПроверкаВозможностиНачатьРезервноеКопирование", 5  , Истина);
			ПодключитьОбработчикОжидания("ТаймаутОжиданияНачалаРезервногоКопирования"   , 300, Истина);
			
		Иначе
			СохранитьПараметрыВыполненияРезервногоКопирования(ИдентификаторРезервногоКопирования, Истина);
			ПрекратитьРаботуСистемы(Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	ПрименитьРезультатОперации(РезультатПодготовки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодготовкаРезервногоКопированияНаСервере(Знач Комментарий)
	
	Результат = ОблачныйАрхив20.ПодготовкаРезервногоКопированияПоЗапросу(Комментарий);
	
	Если Результат.Статус = ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаРезервноеКопированиеЗаданиеСоздано()
		Или Результат.Статус = ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаРезервноеКопированиеЗаданиеПодтверждено() Тогда
		
		ОблачныйАрхив20ВызовСервера.УстановитьБлокировкуСоединений();
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОтменитьПодготовкуРезервногоКопированиюНаКлиенте()
	
	ОперацияПовтора = ИдентификаторОперацииОтменыЗадания();
	РезультатОтмены = ОтменитьПодготовкуРезервногоКопированиюНаСервере(ИдентификаторРезервногоКопирования);
	
	Если РезультатОтмены.Статус = ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаРезервноеКопированиеЗаданиеОтменено() Тогда
		
		ОперацияПовтора                    = "";
		ИдентификаторРезервногоКопирования = "";
		
		УстановитьРежимЗавершенияРаботы(Ложь);
		
	КонецЕсли;
	
	ПрименитьРезультатОперации(РезультатОтмены);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОтменитьПодготовкуРезервногоКопированиюНаСервере(Знач ЗаданиеID)
	
	Результат = ОблачныйАрхив20.ОтменитьПодготовкуРезервногоКопирования(ЗаданиеID);
	
	Если Результат.Статус = ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаРезервноеКопированиеЗаданиеОтменено() Тогда
		ОтменитьРезервноеКопированиеНаСервере();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОтменитьРезервноеКопированиеНаСервере()
	
	ОблачныйАрхив20.СнятьБлокировкуСоединение();
	СохранитьПараметрыВыполненияРезервногоКопирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСтатусВыполненияРезервногоКопирования()
	
	ОперацияПовтора   = ИдентификаторОперацииОбновленияСтатусаЗадания();
	РезультатПроверки = ПолучитьСтатусЗаданияНаВыполнениеРезервногоКопирования(ИдентификаторРезервногоКопирования);
	
	ОбновитьИнформациюОбАктивныхСеансах(РезультатПроверки);
	
	Если РезультатПроверки.Статус = ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаРезервноеКопированиеЗаданиеСоздано() Тогда
		ПодключитьОбработчикОжидания("ПроверитьСтатусВыполненияРезервногоКопирования", 10, Истина);
	ИначеЕсли РезультатПроверки.Статус = ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаРезервноеКопированиеЗаданиеПодтверждено() Тогда
		
		ОперацияПовтора = "";
		
		Если РезультатПроверки.НаличиеАктивныхСоединений Тогда
			
			АктивироватьСтраницуДлительнойОперации(
				НСтр("ru = 'Производится отключение сеансов других пользователей,
					|работающих в программе...'"));
			ОбновитьИнформациюОбАктивныхСеансах(РезультатПроверки);
			
			ПодключитьОбработчикОжидания("ПроверкаВозможностиНачатьРезервноеКопирование", 5  , Истина);
			ПодключитьОбработчикОжидания("ТаймаутОжиданияНачалаРезервногоКопирования"   , 300, Истина);
			
		Иначе
			СохранитьПараметрыВыполненияРезервногоКопирования(ИдентификаторРезервногоКопирования, Истина);
			ПрекратитьРаботуСистемы(Истина);
		КонецЕсли;
	Иначе
		ПрименитьРезультатОперации(РезультатПроверки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтатусЗаданияНаВыполнениеРезервногоКопирования(Знач ЗаданиеID)
	
	Возврат ОблачныйАрхив20.ПолучитьСтатусЗаданияНаВыполнениеРезервногоКопирования(ЗаданиеID);
	
КонецФункции

&НаКлиенте
Процедура ПрименитьРезультатОперации(РезультатОперации)
	
	// Агент готов к резервному копированию
	Если РезультатОперации.Статус = ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаРаботыАгентаАктивен() Тогда
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница             = Элементы.СтраницаПодготовкаККопированию;
		Элементы.СтраницыСтатусаКопирования.ТекущаяСтраница = ?(РезультатОперации.НаличиеАктивныхСоединений,
			Элементы.СтраницаАктивныеПользователи,
			Элементы.СтраницаПустая);
		
		Если ПараметрыПриОткрытии.ЗапуститьПриОткрытии Тогда
			ПараметрыПриОткрытии.ЗапуститьПриОткрытии = Ложь;
			ВыполнитьОбработкуКомандыДалее();
		КонецЕсли;
		
	// Статус регистрации и подтверждения задания на выполнение резервных копий обрабатываются в других методах
	ИначеЕсли ОперацияПовтора <> ИдентификаторОперацииОбновленияСтатусаЗаданияПослеАрхивирования()
		И (РезультатОперации.Статус = ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаРезервноеКопированиеЗаданиеСоздано()
		Или РезультатОперации.Статус = ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаРезервноеКопированиеЗаданиеПодтверждено()) Тогда
		// Обработка не требуется
		
	// Подсистема не подключена
	ИначеЕсли РезультатОперации.Статус = ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаОблачныйАрхивНеПодключен() Тогда
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница  = Элементы.СтраницаОписаниеОшибки;
		Элементы.НадписьОписаниеОшибки.Заголовок = РезультатОперации.СообщениеПользователю;
		
		// Оповещение открытых форм для обновления статуса подключения
		Оповестить(ОблачныйАрхив20Клиент.ИмяСобытияОповещенияОблачныйАрхивСервисНеПодключен());
		
	// Подсистема заблокирована
	ИначеЕсли РезультатОперации.Статус = ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаИнформационнаяБазаПеремещена() Тогда
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница  = Элементы.СтраницаОписаниеОшибки;
		Элементы.НадписьОписаниеОшибки.Заголовок = РезультатОперации.СообщениеПользователю;
		
		// Оповещение открытых форм для обновления статуса работы подсистемы
		Оповестить(ОблачныйАрхив20Клиент.ИмяСобытияОповещенияОблачныйАрхивСервисЗаблокирован());
		
	// Операция ручного резервного копирования отменена
	ИначеЕсли РезультатОперации.Статус = ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаРезервноеКопированиеЗаданиеОтменено() Тогда
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница  = Элементы.СтраницаПодготовкаККопированию;
		
	// Ошибка подключения Интернет-поддержки пользователей
	ИначеЕсли РезультатОперации.Статус = ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаИППОшибкаАутентификации()
		Или РезультатОперации.Статус = ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаИППНеПодключена()
		Или РезультатОперации.Статус = ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаИПППодключенНаДругойЛогин() Тогда
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПодключениеИПП;
		
		Если Не ПустаяСтрока(РезультатОперации.СообщениеПользователю) Тогда
			ПоказатьПредупреждение(, РезультатОперации.СообщениеПользователю);
		КонецЕсли;
		
		ДанныеАутентификации = РезультатОперации.ДанныеАутентификации;	// см. ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки
		Если ДанныеАутентификации <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеАутентификации, "Логин,Пароль");
		КонецЕсли;
		
	// Опция не подключена или отсутствует свободное место
	ИначеЕсли РезультатОперации.Статус = ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаОблачныйАрхивНедоступен() Тогда
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСервисНедоступен;
		
	// Задание резервного копирования по идентификатору не найдено
	ИначеЕсли РезультатОперации.Статус = ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаРезервноеКопированиеЗаданиеНеНайдено() Тогда
		
		ОперацияПовтора                    = "";
		ИдентификаторРезервногоКопирования = "";
		
		УстановитьРежимЗавершенияРаботы(Ложь);
		ОтменитьРезервноеКопированиеНаСервере();
		
	// Прочие ошибки сервиса
	Иначе
		
		// ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаОблачныйАрхивНедоступен()
		// ОблачныйАрхив20.ИдентификаторСтатусаРаботыАгентаНеАктивен()
		// ОблачныйАрхив20.ИдентификаторСтатусаОшибкаСервиса()
		// ОблачныйАрхив20.ИдентификаторСтатусаОшибкаЗапроса()
		// ОблачныйАрхив20.ИдентификаторСтатусаСервисВременноНедоступен()
		// ОблачныйАрхив20.ИдентификаторСтатусаРезервноеКопированиеОбъектКопированияНедоступен()
		// ОблачныйАрхив20.ИдентификаторСтатусаРезервноеКопированиеОшибка()
		// ОблачныйАрхив20.ИдентификаторСтатусаПрочаяОшибка()
		// ОблачныйАрхив20.ИдентификаторСтатусаРезервноеКопированиеАгентИлиОбъектКопированияНеНайден();
		
		// Неклассифицированная ошибка сервиса
		Если ПустаяСтрока(РезультатОперации.СообщениеПользователю) Тогда
			РезультатОперации.СообщениеПользователю = НСтр("ru = 'Ошибка сервиса.'");
			РезультатОперации.СообщениеТехподдержке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Сервис вернул неожиданный ответ: %1
					|Операция: %2'"),
				РезультатОперации.Статус,
				ОперацияПовтора);
		КонецЕсли;
		
		СообщениеТехподдержке = РезультатОперации.СообщениеТехподдержке;
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница  = Элементы.СтраницаОписаниеОшибки;
		Элементы.НадписьОписаниеОшибки.Заголовок = РезультатОперации.СообщениеПользователю;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеСлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция АвтоматическоеРезервноеКопированиеНеВключено()
	
	ПараметрыАрхивирования = ОблачныйАрхив20.СохраненныеПараметрыРезервногоКопирования();
	
	Возврат Не ПараметрыАрхивирования.АвтоматическоеРезервноеКопированиеВключено;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьПараметрыВыполненияРезервногоКопирования(Знач ЗаданиеID = "", Знач УстановитьДатуКопии = Ложь)
	
	Настройки = ОблачныйАрхив20.НовыйНастройкаРучногоРезервногоКопирования();
	Настройки.ЗаданиеID = ЗаданиеID;
	
	Если УстановитьДатуКопии Тогда
		Настройки.ДатаКопии = ТекущаяУниверсальнаяДата();
	КонецЕсли;
	
	ОблачныйАрхив20.СохранитьНастройки(
		ОблачныйАрхив20.КлючНастроекРучногоРезервногоКопирования(),
		Настройки);
	
	ТекстИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Создано задание резервного копирования:
			|ЗаданиеID: %1'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
		ЗаданиеID);
	ОблачныйАрхив20.ЗаписатьИнформациюВЖурналРегистрации(ТекстИнформации);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиНачатьРезервноеКопирование()
	
	ИнформацияОСоединениях = ИнформацияОСоединениях();
	
	ОбновитьИнформациюОбАктивныхСеансах(ИнформацияОСоединениях);
	
	Если ИнформацияОСоединениях.НаличиеАктивныхСоединений Тогда
		ПодключитьОбработчикОжидания("ПроверкаВозможностиНачатьРезервноеКопирование", 5, Истина);
	Иначе
		СохранитьПараметрыВыполненияРезервногоКопирования(ИдентификаторРезервногоКопирования, Истина);
		ПрекратитьРаботуСистемы(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформациюОбАктивныхСеансах(ИнформацияОСоединениях)
	
	Элементы.ГруппаОжиданияАктивныхПользователей.Видимость = ИнформацияОСоединениях.НаличиеАктивныхСоединений;
	Элементы.КоличествоАктивныхПользователей.Заголовок     = Строка(ИнформацияОСоединениях.КоличествоАктивныхСеансов);
	Элементы.НадписьБлокируемыеСеансы.Видимость            = (ИнформацияОСоединениях.НаличиеCOMСоединений
		Или ИнформацияОСоединениях.НаличиеСоединенияКонфигуратором);
	
	БлокирующиеСеансы = Новый Массив();
	Если ИнформацияОСоединениях.НаличиеCOMСоединений Тогда
		БлокирующиеСеансы.Добавить(" - " + НСтр("ru = 'внешние приложения'"));
	КонецЕсли;
	Если ИнформацияОСоединениях.НаличиеСоединенияКонфигуратором Тогда
		БлокирующиеСеансы.Добавить(" - " + НСтр("ru = 'конфигуратор'"));
	КонецЕсли;
	
	Элементы.НадписьБлокируемыеСеансы.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Имеются активные сеансы работы с программой,
			|которые не могут быть завершены принудительно:
			|%1'"),
		СтрСоединить(БлокирующиеСеансы, Символы.ПС));
	
КонецПроцедуры

&НаКлиенте
Процедура АктивироватьСтраницуДлительнойОперации(ПояснениеДлительнойОперации)
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница                = Элементы.СтраницаДлительнаяОперация;
	Элементы.НадписьДлительнаяОперация.Заголовок           = ПояснениеДлительнойОперации;
	Элементы.ГруппаОжиданияАктивныхПользователей.Видимость = Ложь;
	Элементы.НадписьБлокируемыеСеансы.Видимость            = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимЗавершенияРаботы(НовыйРежимРаботы)
	
	Если РежимЗавершенияРаботы <> НовыйРежимРаботы Тогда
		
		РежимЗавершенияРаботы = НовыйРежимРаботы;
		
		СоединенияИБКлиент.УстановитьПризнакЗавершитьВсеСеансыКромеТекущего(РежимЗавершенияРаботы);
		СоединенияИБКлиент.УстановитьРежимЗавершенияРаботыПользователей(РежимЗавершенияРаботы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаймаутОжиданияНачалаРезервногоКопирования()
	
	ОтключитьОбработчикОжидания("ПроверкаВозможностиНачатьРезервноеКопирование");
	
	ТекстВопроса   =
		НСтр("ru = 'Не удалось отключить всех пользователей от базы.
			|Продолжить ждать отключение всех пользователей?'");
	ТекстПояснения = НСтр("ru = 'Не удалось отключить пользователей.'");
	Оповещение     = Новый ОписаниеОповещения("ТаймаутОжиданияНачалаРезервногоКопированияЗавершение", ЭтотОбъект);
	
	ПоказатьВопрос(
		Оповещение,
		ТекстВопроса,
		РежимДиалогаВопрос.ДаНет,
		30,
		КодВозвратаДиалога.Нет,
		ТекстПояснения,
		КодВозвратаДиалога.Нет);
	
КонецПроцедуры

// Обработчик ответа на вопрос об ожидании отключения всех пользователей перед резервным копированием.
//
// Параметры:
//  Ответ - Неопределено, КодВозвратаДиалога - ответ на вопрос.
//  ДополнительныеПараметры - Произвольный
//
&НаКлиенте
Процедура ТаймаутОжиданияНачалаРезервногоКопированияЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ОблачныйАрхив20ВызовСервера.ПродлитьВремяЗавершенияБлокировкиСоединений();
		
		ПодключитьОбработчикОжидания("ПроверкаВозможностиНачатьРезервноеКопирование", 5  , Истина);
		ПодключитьОбработчикОжидания("ТаймаутОжиданияНачалаРезервногоКопирования"   , 300, Истина);
		
	Иначе
		ОтменитьПодготовкуРезервногоКопированиюНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИнформацияОСоединениях()
	
	Результат = СоединенияИБ.ИнформацияОСоединениях();
	Результат.Вставить("КоличествоАктивныхСеансов",
		ПолучитьСеансыИнформационнойБазы().Количество());
	
	Возврат Результат;
	
КонецФункции

// Описание структуры входного параметра "НастройкиКопирования".
//
// Возвращаемое значение:
//  см. ОблачныйАрхив20.НовыйНастройкаРучногоРезервногоКопирования
//
&НаСервере
Функция ОписаниеВходногоПараметраНастройкиКопирования()
	
	Возврат Параметры.НастройкиКопирования;
	
КонецФункции

#КонецОбласти

#КонецОбласти