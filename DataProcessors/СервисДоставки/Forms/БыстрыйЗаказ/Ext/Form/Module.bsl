#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не СервисДоставки.ПравоРаботыССервисомДоставки(Истина) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ДоступнаОтправкаЗаказовНаДоставку = СервисДоставки.ПравоОтправкиЗаказовНаДоставкуПеревозчику();
	
	Параметры.Свойство("РежимМастера", РежимМастера);
	Параметры.Свойство("ИдентификаторЗаказа", ИдентификаторЗаказа);
	Параметры.Свойство("ДокументОснование", ДокументОснование);
	Параметры.Свойство("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	Параметры.Свойство("ТипГрузоперевозки", ТипГрузоперевозки);
	
	Если НЕ ЗначениеЗаполнено(ТипГрузоперевозки) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не выбран тип грузоперевозки'"));
		Отказ = Истина;
		Возврат;
	ИначеЕсли НЕ СервисДоставки.ТипГрузоперевозкиДоступен(ТипГрузоперевозки) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Выбранный тип грузоперевозки не доступен'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	НастроитьФормуПоТипуГрузоперевозки();
	
	Если Параметры.Свойство("ПараметрыЗаказа") Тогда
		ПараметрыЗаказа = Параметры.ПараметрыЗаказа;
		ПараметрыЗаказа.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
		ПроверитьПараметрыЗаказа(ПараметрыЗаказа, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		ОбработатьПараметры(ПараметрыЗаказа);
	ИначеЕсли ЗначениеЗаполнено(ДокументОснование) Тогда
		ПараметрыЗаказа = ПараметрыЗаказаНаДоставкуПоДокументуОснованию(ТипГрузоперевозки, ДокументОснование);
		ОбработатьПараметры(ПараметрыЗаказа);
	КонецЕсли;
	КлючИдемпотентности = Новый УникальныйИдентификатор();
	
	СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ОрганизацияБизнесСетиСсылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьЗначенияПоУмолчанию();
	СформироватьПредставлениеВремениДоставки(ЭтотОбъект);
	УстановитьВидимостьДоступность();
	
	СервисДоставкиПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область Получатель

&НаКлиенте
Процедура ПолучательКонтактноеЛицоТелефонПриИзменении(Элемент)
	
	ОбработатьИзменениеКонтактнойИнформации(Элемент, "Телефон");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательКонтактноеЛицоТелефонОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТелефонНачалоВыбора(Элемент, ПолучательКонтрагентЭтоОрганизация);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательАдресОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	АдресНачалоВыбора(Элемент, ПолучательКонтрагентЭтоОрганизация);
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяДоставкиОчистка(Элемент, СтандартнаяОбработка)
	
	ВремяДоставкиС = Неопределено;
	ВремяДоставкиПо =  Неопределено;
	ВремяДоставкиОбедС = Неопределено;
	ВремяДоставкиОбедПо = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяДоставкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбораВремениИДаты(2);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательТерминалНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТерминалНачалоВыбора(2);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательТерминалОчистка(Элемент, СтандартнаяОбработка)
	
	ПунктВыдачиГрузаИдентификатор = "";
	ПунктВыдачиГрузаНаименование = "";
	ПунктВыдачиГрузаАдрес = "";
	ПунктВыдачиГрузаТелефон = "";
	ПунктВыдачиГрузаОписание = "";
	ПунктВыдачиГрузаТипНаименование = "";
	ПунктВыдачиГрузаТипИдентификатор = 0;
	
	СпособДоставки = 2;
КонецПроцедуры


&НаКлиенте
Процедура ПолучательТерминалОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуТерминала(ПунктВыдачиГрузаИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьЗаказ(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимМастера", ?(СостояниеИдентификатор = 0, 1, 2));
	ПараметрыФормы.Вставить("ИдентификаторЗаказа", ИдентификаторЗаказа);
	ПараметрыФормы.Вставить("ДокументОснование", ДокументОснование);
	ПараметрыФормы.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	ПараметрыФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	СервисДоставкиКлиент.ОткрытьФормуКарточкиЗаказаНаДоставку(ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура Редактировать(Команда)
	
	ПараметрыФормы = Новый Структура;
	Если ЗначениеЗаполнено(ИдентификаторЗаказа) Тогда
		ПараметрыФормы.Вставить("РежимМастера", ?(СостояниеИдентификатор = 0, 1, 2));
		ПараметрыФормы.Вставить("ИдентификаторЗаказа", ИдентификаторЗаказа);
	Иначе
		ПараметрыФормы.Вставить("РедактированиеБыстрогоЗаказа", Истина);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ДокументОснование", ДокументОснование);
	ПараметрыФормы.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	ПараметрыФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	Закрыть();
	
	СервисДоставкиКлиент.ОткрытьФормуКарточкиЗаказаНаДоставку(ПараметрыФормы);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьСохранитьЗаказ(Команда)
	
	Если ДоступнаОтправкаЗаказовНаДоставку Тогда
		ОформитьЗаказ();
	Иначе
		СоздатьИзменитьЗаказНаДоставку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКакЧерновик(Команда)
	
	СоздатьИзменитьЗаказНаДоставку();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьЗаказ(Команда)
	
	ОтменитьЗаказНаДоставку();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПараметрыТарифа

&НаКлиенте
Процедура ОткрытьФормуВыбораВремениИДаты(ВариантВыбораВремени)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборДатыВремени", ЭтаФорма);
	
	ПараметрыОткрытияФормы = Новый Структура;
	
	Если ВариантВыбораВремени = 1 Тогда
		
		ПараметрыОткрытияФормы.Вставить("Дата", ДатаОтгрузки);
		ПараметрыОткрытияФормы.Вставить("ВремяРаботыС", ВремяОтгрузкиС);
		ПараметрыОткрытияФормы.Вставить("ВремяРаботыПо", ВремяОтгрузкиПо);
		ПараметрыОткрытияФормы.Вставить("ВремяОбедС", ВремяОтгрузкиОбедС);  
		ПараметрыОткрытияФормы.Вставить("ВремяОбедПо", ВремяОтгрузкиОбедПо);
		ПараметрыОткрытияФормы.Вставить("ВариантВыбораВремени", 1);
		
	ИначеЕсли ВариантВыбораВремени = 2 Тогда
		
		ПараметрыОткрытияФормы.Вставить("Дата", ДатаДоставки);
		ПараметрыОткрытияФормы.Вставить("ВремяРаботыС", ВремяДоставкиС);
		ПараметрыОткрытияФормы.Вставить("ВремяРаботыПо", ВремяДоставкиПо);
		ПараметрыОткрытияФормы.Вставить("ВремяОбедС", ВремяДоставкиОбедС);  
		ПараметрыОткрытияФормы.Вставить("ВремяОбедПо", ВремяДоставкиОбедПо);
		ПараметрыОткрытияФормы.Вставить("ВариантВыбораВремени", 2);
			
	КонецЕсли;
	
	ПараметрыОткрытияФормы.Вставить("ТолькоПросмотр", РежимМастера = 2);
	ПараметрыОткрытияФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	ОткрытьФорму(
		"Обработка.СервисДоставки.Форма.ВыборВремениПередачиГруза",
		ПараметрыОткрытияФормы,
		ЭтаФорма,,,,ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборДатыВремени(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ВариантВыбораВремени = 0;
	Если Результат.Свойство("ВариантВыбораВремени", ВариантВыбораВремени) Тогда 
		
		Если ВариантВыбораВремени = 2 Тогда

			Результат.Свойство("ВремяРаботыС", ВремяДоставкиС);
			Результат.Свойство("ВремяРаботыПо", ВремяДоставкиПо);
			Результат.Свойство("ВремяОбедС", ВремяДоставкиОбедС);  
			Результат.Свойство("ВремяОбедПо", ВремяДоставкиОбедПо);
			
			СформироватьПредставлениеВремениДоставки(ЭтотОбъект);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеВремениДоставки(Форма)
	
	Форма.ВремяДоставкиПредставление = ПредставлениеДатыВремени(
		Форма.ВремяДоставкиС,
		Форма.ВремяДоставкиПо,
		Форма.ВремяДоставкиОбедС,
		Форма.ВремяДоставкиОбедПо);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеДатыВремени(ВремяРаботыС, ВремяРаботыПо, ВремяОбедС, ВремяОбедПо)
	
	СтрокаПредставления = НСтр("ru = '%1 (%2)'");
	
	СтрокаПериод = НСтр("ru = '09:00-18:00'");
	Если ЗначениеЗаполнено(ВремяРаботыС) ИЛИ ЗначениеЗаполнено(ВремяРаботыПо) Тогда
		СтрокаПериод = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1-%2'"),
			Формат(ВремяРаботыС, "ДЛФ=T; ДФ=HH:mm; ДП=09:00"),
			Формат(ВремяРаботыПо, "ДЛФ=T; ДФ=HH:mm; ДП=18:00"));
	КонецЕсли;
	
	СтрокаОбед = НСтр("ru = 'без обеда'");
	Если ЗначениеЗаполнено(ВремяОбедС) ИЛИ ЗначениеЗаполнено(ВремяОбедПо) Тогда
		СтрокаОбед = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'обед %1-%2'"),
			Формат(ВремяОбедС, "ДЛФ=T; ДФ=HH:mm; ДП=13:00"),
			Формат(ВремяОбедПо, "ДЛФ=T; ДФ=HH:mm; ДП=14:00"));
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаПредставления, СтрокаПериод, СтрокаОбед);
	
КонецФункции

&НаКлиенте
Процедура ТерминалНачалоВыбора(Направление)

	Если Не ЗначениеЗаполнено(ТарифИдентификатор) Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметрыОповещения = Новый Структура;
	ДополнительныеПараметрыОповещения.Вставить("Направление", Направление);
	
	ОписаниеОповещения =
		Новый ОписаниеОповещения("ОбработатьПодборТерминала", ЭтаФорма, ДополнительныеПараметрыОповещения);
	
	Если Направление = 1 Тогда
		Адресат = "Отправитель";
	Иначе
		Адресат = "Получатель";
	КонецЕсли;
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("Адрес", ЭтаФорма[Адресат + "АдресПредставление"]);
	ПараметрыОткрытияФормы.Вставить("АдресЗначение", ЭтаФорма[Адресат + "АдресЗначение"]);
	ПараметрыОткрытияФормы.Вставить("Направление", Направление);
	ПараметрыОткрытияФормы.Вставить("ГрузоперевозчикИдентификатор", ГрузоперевозчикИдентификатор);
	ПараметрыОткрытияФормы.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	ПараметрыОткрытияФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	ОткрытьФорму(
		"Обработка.СервисДоставки.Форма.СписокТерминалов",
		ПараметрыОткрытияФормы,
		ЭтаФорма,,,,ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

#КонецОбласти

#Область Проверки

&НаКлиенте
Процедура ПроверитьВГХ(ИмяРеквизита = "", ЕстьОшибки = Ложь, ВыводитьПредупреждения = Истина)
	
	ПроверитьВсе = (ИмяРеквизита = "");
	
	Если (ПроверитьВсе ИЛИ ИмяРеквизита = "ГрузСтоимость")
		И ЗначениеЗаполнено(ГрузСтоимость) 
		И ЗначениеЗаполнено(ГрузОграничениеСтоимость)
		И ГрузСтоимость > ГрузОграничениеСтоимость Тогда
		
		ЕстьОшибки = Истина;
		Если ВыводитьПредупреждения Тогда
			ТекстОшибки = НСтр("ru='Стоимость превышает максимальное значение, допустимо не более %1 рублей.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Формат(ГрузОграничениеСтоимость,"ЧГ=0"));
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"ГрузСтоимость");
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ПроверитьВсе ИЛИ ИмяРеквизита = "ГрузВес")
		И ЗначениеЗаполнено(ГрузВес) 
		И ЗначениеЗаполнено(ГрузОграничениеВес)
		И ГрузВес > ГрузОграничениеВес Тогда
		
		ЕстьОшибки = Истина;
		Если ВыводитьПредупреждения Тогда
			ТекстОшибки = НСтр("ru='Вес превышает максимальное значение, допустимо не более %1 т.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Формат(Цел(ГрузОграничениеВес/1000),"ЧГ=0"));
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"ГрузВес");
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ПроверитьВсе ИЛИ ИмяРеквизита = "ГрузВес")
		И ЗначениеЗаполнено(ГрузВес) 
		И ЗначениеЗаполнено(ГрузМаксимальныйВес)
		И ГрузМаксимальныйВес > ГрузВес Тогда
		
		ЕстьОшибки = Истина;
		Если ВыводитьПредупреждения Тогда
			ТекстОшибки = НСтр("ru='Общий вес меньше значения самого тяжелого места'");
			ТекстСообщения = ТекстОшибки;
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"ГрузВес");
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ПроверитьВсе ИЛИ ИмяРеквизита = "ГрузОбъем")
		И ЗначениеЗаполнено(ГрузОбъем) 
		И ЗначениеЗаполнено(ГрузОграничениеОбъем)
		И ГрузОбъем > ГрузОграничениеОбъем Тогда
		
		ЕстьОшибки = Истина;
		Если ВыводитьПредупреждения Тогда
			ТекстОшибки = НСтр("ru='Объем превышает максимальное значение, допустимо не более %1 м³.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Формат(ГрузОграничениеОбъем,"ЧГ=0"));
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"ГрузОбъем");
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ПроверитьВсе ИЛИ ИмяРеквизита = "ГрузМаксимальнаяДлина")
		И ЗначениеЗаполнено(ГрузМаксимальнаяДлина) 
		И ЗначениеЗаполнено(ГрузОграничениеДлина)
		И ГрузМаксимальнаяДлина > ГрузОграничениеДлина Тогда
		
		ЕстьОшибки = Истина;
		Если ВыводитьПредупреждения Тогда
			ТекстОшибки = НСтр("ru='Длина превышает максимальное значение, допустимо не более %1 м.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Формат(ГрузОграничениеДлина/100,"ЧГ=0"));
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"ГрузМаксимальнаяДлина");
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ПроверитьВсе ИЛИ ИмяРеквизита = "ГрузМаксимальнаяШирина")
		И ЗначениеЗаполнено(ГрузМаксимальнаяШирина) 
		И ЗначениеЗаполнено(ГрузОграничениеШирина)
		И ГрузМаксимальнаяШирина > ГрузОграничениеШирина Тогда
		
		ЕстьОшибки = Истина;
		Если ВыводитьПредупреждения Тогда
			ТекстОшибки = НСтр("ru='Ширина превышает максимальное значение, допустимо не более %1 м.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Формат(ГрузОграничениеШирина/100,"ЧГ=0"));
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"ГрузМаксимальнаяШирина");
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ПроверитьВсе ИЛИ ИмяРеквизита = "ГрузМаксимальнаяВысота")
		И ЗначениеЗаполнено(ГрузМаксимальнаяВысота) 
		И ЗначениеЗаполнено(ГрузОграничениеВысота)
		И ГрузМаксимальнаяВысота > ГрузОграничениеВысота Тогда
		
		ЕстьОшибки = Истина;
		Если ВыводитьПредупреждения Тогда
			ТекстОшибки = НСтр("ru='Высота превышает максимальное значение, допустимо не более %1 м.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Формат(ГрузОграничениеВысота/100,"ЧГ=0"));
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"ГрузМаксимальнаяВысота");
		КонецЕсли;
		
	КонецЕсли;
	
	
	Если ПереключательРасшифровки = 1 Тогда
	
		Если (ИмяРеквизита = "ГрузМаксимальныйВес")
			И ЗначениеЗаполнено(ГрузВес) 
			И ЗначениеЗаполнено(ГрузМаксимальныйВес)
			И ГрузМаксимальныйВес > ГрузВес Тогда
			
			ЕстьОшибки = Истина;
			Если ВыводитьПредупреждения Тогда
				ТекстОшибки = НСтр("ru='Общий вес меньше значения самого тяжелого места.'");
				ТекстСообщения = ТекстОшибки;
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"ГрузМаксимальныйВес");
			КонецЕсли;
			
		КонецЕсли;
		
		Если (ПроверитьВсе ИЛИ ИмяРеквизита = "ГрузМаксимальныйВес")
			И ЗначениеЗаполнено(ГрузМаксимальныйВес)
			И ЗначениеЗаполнено(ГрузОграничениеВес)
			И ГрузМаксимальныйВес > ГрузОграничениеВес Тогда
			
			ЕстьОшибки = Истина;
			Если ВыводитьПредупреждения Тогда
				ТекстОшибки = НСтр("ru='Вес превышает максимальное значение, допустимо не более %1 т.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Формат(Цел(ГрузОграничениеВес/1000),"ЧГ=0"));
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"ГрузМаксимальныйВес");
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеОбязательныхРеквизитов(НомерШага, Отказ, ВыводитьПредупреждения = Истина)
	
	ОчиститьСообщения();
	
	Если РежимМастера = 2 
		ИЛИ НомерШага <= 1 Тогда
		Возврат;
	КонецЕсли;
	
	ОбязательныеРеквизиты = ОбязательныеРеквизиты(НомерШага);
	
	ТекстОшибки = НСтр("ru='Поле ""%1"" на шаге ""%2"" не заполнено'");
	
	ШагОшибки = 10;
	
	ПроверитьЗаполнениеРеквизитовНаСервере(ШагОшибки, Отказ, ВыводитьПредупреждения);
	
	ЕстьОшибки = Ложь;
	ПроверитьТелефоныКонтактныхЛиц(ЕстьОшибки, ВыводитьПредупреждения);
	Если ЕстьОшибки Тогда
		Отказ = Истина;
		ШагОшибки = 0;
	КонецЕсли;
	
	ЕстьОшибки = Ложь;
	ПроверитьДатуОтгрузки(ЕстьОшибки, Истина);
	Если ЕстьОшибки Тогда
		Отказ = Истина;
		ШагОшибки = 0;
	КонецЕсли;
	
	ЕстьОшибки = Ложь;
	ПроверитьВГХ("",ЕстьОшибки, ВыводитьПредупреждения);
	Если ЕстьОшибки Тогда
		Отказ = Истина;
		ШагОшибки = 1;
	КонецЕсли;
	
	// Выполняем проверки заполнения реквизитов формы.
	Для Каждого ТекущийРеквизит Из ОбязательныеРеквизиты Цикл
		
		ПараметрыРеквизита = СтрРазделить(ТекущийРеквизит.Значение, ".");
		ШагТекущейОшибки = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыРеквизита[0]);
		Значение = ПараметрыРеквизита[1];
		
		Если ШагТекущейОшибки > ШагОшибки Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ЭтотОбъект[Значение]) Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
				ТекущийРеквизит.Представление,
				НСтр("ru = 'Создание заказа на доставку'"));
				
			Отказ = Истина;
			Если ВыводитьПредупреждения Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,Значение,,Отказ);
			КонецЕсли;
			
			ШагОшибки = Мин(ШагОшибки, ШагТекущейОшибки);
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеРеквизитовНаСервере(ШагОшибки, Отказ, ВыводитьПредупреждения = Истина)
	
	ЕстьОшибки = Ложь;
	ПроверитьРеквизитыКонтрагентов(ЕстьОшибки, ВыводитьПредупреждения);
	Если ЕстьОшибки Тогда
		Отказ = Истина;
		ШагОшибки = 0;
	КонецЕсли;
	
	ЕстьОшибки = Ложь;
	ПроверитьРеквизитыАдресов(ЕстьОшибки, ВыводитьПредупреждения);
	Если ЕстьОшибки Тогда
		Отказ = Истина;
		ШагОшибки = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьРеквизитыАдресов(ЕстьОшибки, ВыводитьПредупреждения)
	
	ПроверитьРеквизитыАдреса("ОтправительАдрес", ЕстьОшибки, ВыводитьПредупреждения);
	ПроверитьРеквизитыАдреса("ПолучательАдрес", ЕстьОшибки, ВыводитьПредупреждения);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьРеквизитыАдреса(ИмяРеквизита, ЕстьОшибки, ВыводитьПредупреждения)
	
	СервисДоставкиСлужебный.ПроверитьРеквизитыАдреса(ЭтотОбъект, ИмяРеквизита, ЕстьОшибки, ВыводитьПредупреждения);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьРеквизитыКонтрагентов(ЕстьОшибки, ВыводитьПредупреждения = Истина)
	
	ПроверитьРеквизитыКонтрагента("ОтправительКонтрагент", ЕстьОшибки, ВыводитьПредупреждения);
	ПроверитьРеквизитыКонтрагента("ПолучательКонтрагент", ЕстьОшибки, ВыводитьПредупреждения);
	
	Если ПлательщикРоль = 3 Тогда
		ПроверитьРеквизитыКонтрагента("Плательщик", ЕстьОшибки, ВыводитьПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьРеквизитыКонтрагента(Префикс, ЕстьОшибки, ВыводитьПредупреждения = Истина)
	
	ИмяРеквизита = Префикс + "Наименование";
	КонтрагентСсылка = ЭтотОбъект[Префикс + "Ссылка"];
	КонтрагентНаименование = ЭтотОбъект[Префикс + "Наименование"];
	КонтрагентЮрФизЛицо = ЭтотОбъект[Префикс + "ЮрФизЛицо"];
	КонтрагентИНН = ЭтотОбъект[Префикс + "ИНН"];
	КонтрагентКПП = ЭтотОбъект[Префикс + "КПП"];
	
	ЭтоОтправитель = (СтрНайти(Префикс, "Отправитель") > 0);
	
	Если Не ЗначениеЗаполнено(КонтрагентСсылка) 
		И КонтрагентНаименование = "" Тогда
		Возврат;
	КонецЕсли;
	
	УчастникГрузоперевозки = СтрЗаменить(Префикс, "Контрагент", "");
	
	ТекстОшибки = НСтр("ru='Некорректный реквизит ""%1"" у участника грузоперевозки в поле ""%2"".'");
	
	Если ЗначениеЗаполнено(КонтрагентСсылка) 
		И КонтрагентНаименование = "" Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, НСтр("ru='Наименование'"), УчастникГрузоперевозки);
		
		ЕстьОшибки = Истина;
		Если ВыводитьПредупреждения Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,ИмяРеквизита);
		КонецЕсли;
		
	КонецЕсли;
	
	Если КонтрагентЮрФизЛицо = 0 Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, НСтр("ru='Вид'"), УчастникГрузоперевозки);
		
		ЕстьОшибки = Истина;
		Если ВыводитьПредупреждения Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,ИмяРеквизита);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если КонтрагентЮрФизЛицо = 2 Тогда
		
		Если ЭтоОтправитель Тогда
			ТекстСообщения = НСтр("ru='Отправитель не может быть физическим лицом'");
			
			ЕстьОшибки = Истина;
			Если ВыводитьПредупреждения Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,ИмяРеквизита);
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КонтрагентИНН) Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, НСтр("ru='ИНН'"), УчастникГрузоперевозки);
		
		ЕстьОшибки = Истина;
		Если ВыводитьПредупреждения Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,ИмяРеквизита);
		КонецЕсли;
		
	Иначе
		
		ТекстСообщения = "";
		Если Не РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(
			КонтрагентИНН,
			КонтрагентЮрФизЛицо = 1,
			ТекстСообщения) Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, НСтр("ru='ИНН'"), УчастникГрузоперевозки) + Символы.ПС + ТекстСообщения;
		
			ЕстьОшибки = Истина;
			Если ВыводитьПредупреждения Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,ИмяРеквизита);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверяем юридический адрес
	
	ПроверитьРеквизитыАдреса(Префикс + "ЮридическийАдрес", ЕстьОшибки, ВыводитьПредупреждения);
	
	Если КонтрагентЮрФизЛицо = 3 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КонтрагентКПП) Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, НСтр("ru='КПП'"), УчастникГрузоперевозки);
		
		ЕстьОшибки = Истина;
		Если ВыводитьПредупреждения Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,ИмяРеквизита);
		КонецЕсли;
		
	Иначе
		
		ТекстСообщения = "";
		Если Не РегламентированныеДанныеКлиентСервер.КППСоответствуетТребованиям(КонтрагентКПП, ТекстСообщения) Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, НСтр("ru='КПП'"), УчастникГрузоперевозки) + Символы.ПС + ТекстСообщения;
		
			ЕстьОшибки = Истина;
			Если ВыводитьПредупреждения Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,ИмяРеквизита);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТелефоныКонтактныхЛиц(ЕстьОшибки, ВыводитьПредупреждения)
	
	ПроверитьНомерТелефона("ОтправительКонтактноеЛицоТелефон", ЕстьОшибки, ВыводитьПредупреждения);
	ПроверитьНомерТелефона("ПолучательКонтактноеЛицоТелефон", ЕстьОшибки, ВыводитьПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНомерТелефона(Префикс, ЕстьОшибки, ВыводитьПредупреждения = Истина)
	
	ИмяРеквизита = Префикс + "Представление";
	ЭтоТелефонОтправителя = (СтрНайти(ИмяРеквизита, "Отправитель") > 0);
	
	Представление = ЭтотОбъект[ИмяРеквизита];
	
	Если Не ЗначениеЗаполнено(Представление) Тогда
		Возврат;
	КонецЕсли;
	
	СписокОшибок = ОшибкиЗаполненияТелефона(Префикс);
	
	ЕстьОшибки = СписокОшибок.Количество();
	
	ТекстСообщения = "";
	Для Каждого ТекущаяОшибка Из СписокОшибок Цикл
		ТекстСообщения = ТекстСообщения + Символы.ПС + ТекущаяОшибка.Представление;
	КонецЦикла;
	
	ТекстСообщения = СокрЛП(ТекстСообщения);
	
	Если ВыводитьПредупреждения 
		И ЕстьОшибки Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Некорректный формат номера телефона в поле ""Телефон"" группы ""%1"".'"),
			?(ЭтоТелефонОтправителя, "Отправитель", "Получатель"));
		ТекстСообщения = ТекстОшибки + Символы.ПС + ТекстСообщения;
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,ИмяРеквизита);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДатуОтгрузки(ЕстьОшибки, ВыводитьПредупреждения)
	
	Если ЗначениеЗаполнено(ДатаОтгрузки) Тогда
	
		ТекущаяДата = '00010101';
		УстановитьДатуОтгрузки(ТекущаяДата);
		
		Если ТекущаяДата > ДатаОтгрузки Тогда
			
			ЕстьОшибки = Истина;
			Если ВыводитьПредупреждения Тогда
				ТекстОшибки = НСтр("ru='Выбранная дата отгрузки недоступна. Укажите актуальную дату.'");
				ТекстСообщения = ТекстОшибки;
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"ДатаОтгрузки");
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДозаполнитьАдрес(Префикс, ЕстьОшибки)
	
	ИмяРеквизитаАдресЗначение = Префикс + "Значение";
	
	СтруктураАдреса = СервисДоставки.ЗначениеИзСтрокиJSON(ЭтотОбъект[ИмяРеквизитаАдресЗначение]);
	
	Если Не ЗначениеЗаполнено(СтруктураАдреса) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭтотОбъект[ИмяРеквизитаАдресЗначение]) Тогда
		
		Если УправлениеКонтактнойИнформацией.АдресВведенВСвободнойФорме(ЭтотОбъект[ИмяРеквизитаАдресЗначение]) Тогда
			
			ЭтотОбъект[ИмяРеквизитаАдресЗначение] = "";
			ЭтотОбъект[Префикс + "Представление"] = "";
			ВызватьИсключение НСтр("ru = 'Для заказов на доставку нельзя использовать адрес в свободной форме.'");
			
		Иначе
			СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(ЭтотОбъект[ИмяРеквизитаАдресЗначение],
				Новый Структура("КодыАдреса", Истина));
			ЭтотОбъект[ИмяРеквизитаАдресЗначение] = РаботаСАдресами.ПоляАдресаВJSON(СведенияОбАдресе);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроверитьПараметрыЗаказа(ПараметрыЗаказа, Отказ)
	
	ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось заполнить заказ на доставку по документу основанию %1.'"),
		ПараметрыЗаказа.ДокументОснование);
	ТекстОшибкиДетально = НСтр("ru='Не заполнен обязательный реквизит ""%1""'");
	
	ТекстСообщения = "";
	Если Не ЗначениеЗаполнено(ПараметрыЗаказа.Отправитель.Контрагент.Ссылка) Тогда
		
		ТекстСообщения = ТекстСообщения + Символы.ПС + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибкиДетально, "Отправитель");
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыЗаказа.Получатель.Контрагент.Ссылка) Тогда
		
		ТекстСообщения = ТекстСообщения + Символы.ПС + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибкиДетально, "Получатель");
		
	КонецЕсли;
	
	ТекстСообщения = СокрЛП(ТекстСообщения);
	
	Если ТекстСообщения <> "" Тогда
		ТекстСообщения = ТекстОшибки + Символы.ПС+ ТекстСообщения;
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОбязательныеРеквизиты(НомерШага)
	
	ОбязательныеРеквизиты = Новый СписокЗначений();
	
	Если РежимМастера = 2
		ИЛИ НомерШага <= 1 Тогда
		Возврат ОбязательныеРеквизиты;
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("0.ОтправительКонтрагентНаименование", НСтр("ru='Отправитель'"));
	
	Если ЗначениеЗаполнено(ОтправительКонтрагентНаименование) Тогда
		Если НомерШага > 3  Тогда
			ОбязательныеРеквизиты.Добавить("0.ОтправительКонтактноеЛицоНаименование",
				НСтр("ru='Контактное лицо отправителя'"));
			ОбязательныеРеквизиты.Добавить("0.ОтправительКонтактноеЛицоТелефонПредставление",
				НСтр("ru='Телефон контактного лица отправителя'"));
		КонецЕсли;
		ОбязательныеРеквизиты.Добавить("0.ОтправительАдресПредставление", НСтр("ru='Откуда'"));
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("0.ПолучательКонтрагентНаименование", НСтр("ru='Получатель'"));
	
	Если ЗначениеЗаполнено(ПолучательКонтрагентНаименование) Тогда
		Если НомерШага > 3 Тогда
			ОбязательныеРеквизиты.Добавить("0.ПолучательКонтактноеЛицоНаименование",
				НСтр("ru='Контактное лицо получателя'"));
			ОбязательныеРеквизиты.Добавить("0.ПолучательКонтактноеЛицоТелефонПредставление",
				НСтр("ru='Телефон контактного лица получателя'"));
		КонецЕсли;
		ОбязательныеРеквизиты.Добавить("0.ПолучательАдресПредставление", НСтр("ru='Куда'"));
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("0.ДатаОтгрузки", НСтр("ru='Дата отгрузки'"));
	
	ОбязательныеРеквизиты.Добавить("0.ПлательщикРоль", НСтр("ru='Роль плательщика'"));
	
	ОбязательныеРеквизиты.Добавить("0.ОрганизацияБизнесСетиСсылка", НСтр("ru='Организация БС'"));
	
	ОбязательныеРеквизиты.Добавить("1.ГрузКоличествоГрузовыхМест", НСтр("ru='Количество мест'"));
	Если ГрузКоличествоГрузовыхМест > 1 Тогда
		ОбязательныеРеквизиты.Добавить("1.ГрузВес", НСтр("ru='Общий вес'"));
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("1.ГрузСодержимое", НСтр("ru='Описание содержимого'"));
	ОбязательныеРеквизиты.Добавить("1.ГрузМаксимальныйВес", НСтр("ru='Вес'"));
	ОбязательныеРеквизиты.Добавить("1.ГрузОбъем", НСтр("ru='Объем'"));
	ОбязательныеРеквизиты.Добавить("1.ГрузМаксимальнаяВысота", НСтр("ru='Высота'"));
	ОбязательныеРеквизиты.Добавить("1.ГрузМаксимальнаяШирина", НСтр("ru='Ширина'"));
	ОбязательныеРеквизиты.Добавить("1.ГрузМаксимальнаяДлина", НСтр("ru='Длина'"));;
	
	Если НомерШага > 2 Тогда
	
		Если Не ЗначениеЗаполнено(ТарифИдентификатор) Тогда
			ОбязательныеРеквизиты.Добавить("2.ТарифИдентификатор", НСтр("ru='Тариф грузоперевозки'"));
		КонецЕсли;
		
	КонецЕсли;
	
	Если НомерШага > 3 Тогда
		
		Если ЗначениеЗаполнено(ТарифИдентификатор) Тогда
			ОбязательныеРеквизиты.Добавить("3.ФормаОплатыПредставление", НСтр("ru='Форма оплаты'"));
			
			Если ТарифНеГабарит Тогда
				ОбязательныеРеквизиты.Добавить("3.ГрузНегабаритныйВес", НСтр("ru='Вес негабаритных мест'"));
				ОбязательныеРеквизиты.Добавить("3.ГрузНегабаритныйОбъем", НСтр("ru='Объем негабаритных мест'"));
				ОбязательныеРеквизиты.Добавить("3.ГрузКоличествоНегабаритныхГрузовыхМест",
					НСтр("ru='Количество негабаритных грузовых мест'"));
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОбязательныеРеквизиты;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеИзСтрокиJSON(Значение, Отказ, ТекстОшибки)
	
	Возврат СервисДоставки.ЗначениеИзСтрокиJSON(Значение, Отказ, ТекстОшибки);
	
КонецФункции

#КонецОбласти

#Область КонтактнаяИнформацияПолучателя

&НаКлиенте
Процедура ТелефонНачалоВыбора(Элемент, ЭтоНашаОрганизация)
	
	КонтактнаяИнформацияНачалоВыбора(
		Элемент,
		?(ЭтоНашаОрганизация, "ТелефонКонтактногоЛицаОрганизации", "ТелефонКонтактногоЛицаКонтрагента"));
КонецПроцедуры

&НаКлиенте
Процедура АдресНачалоВыбора(Элемент, ЭтоНашаОрганизация)

	КонтактнаяИнформацияНачалоВыбора(
		Элемент,
		?(ЭтоНашаОрганизация, "АдресСкладаОрганизации", "АдресСкладаКонтрагента"));
	
КонецПроцедуры	

&НаКлиенте
Процедура КонтактнаяИнформацияНачалоВыбора(Элемент, ВидКонтактнойИнформацииСтрока)
	
	ПараметрыВидаКонтактнойИнформации = ПараметрыВидаКонтактнойИнформации(ВидКонтактнойИнформацииСтрока);
	
	Если Не ЗначениеЗаполнено(ПараметрыВидаКонтактнойИнформации) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = Элемент.Имя;
	ИмяРеквизитаПредставление = ИмяРеквизита + "Представление";
	ИмяРеквизитаЗначенияПолей = ИмяРеквизита + "Значение";
	
	ЕстьИзменение = Ложь;
	Если Элемент.ТекстРедактирования <> ЭтотОбъект[ИмяРеквизитаПредставление] Тогда 
		ЭтотОбъект[ИмяРеквизитаПредставление] = Элемент.ТекстРедактирования;
		ЕстьИзменение = Истина;
	КонецЕсли;
	
	Если (ЭтотОбъект[ИмяРеквизитаЗначенияПолей] = ""
		И ЭтотОбъект[ИмяРеквизитаПредставление] <> "")
		ИЛИ ЕстьИзменение Тогда
		ЭтотОбъект[ИмяРеквизитаЗначенияПолей]
			= СервисДоставкиВызовСервера.КонтактнаяИнформацияПоПредставлению(
				ЭтотОбъект[ИмяРеквизитаПредставление],
				ПараметрыВидаКонтактнойИнформации.ТипНаименование);
	КонецЕсли;
	
	ПараметрыОткрытия = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
		ПараметрыВидаКонтактнойИнформации.Вид,
		ЭтотОбъект[ИмяРеквизитаЗначенияПолей],
		ЭтотОбъект[ИмяРеквизитаПредставление],
		,
		ПараметрыВидаКонтактнойИнформации.Тип);
		
	ПараметрыОткрытия.Вставить("Заголовок", Элемент.Заголовок);
	ПараметрыОткрытия.Вставить("ТолькоПросмотр", РежимМастера = 2);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяРеквизита", ИмяРеквизита);
	
	Оповещение = Новый ОписаниеОповещения(
		"ОткрытьФормуКонтактнойИнформацииЗавершение",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, ЭтотОбъект, Оповещение);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыВидаКонтактнойИнформации(ВидКонтактнойИнформацииСтрока)
	
	Возврат СервисДоставкиСлужебный.ПараметрыВидаКонтактнойИнформации(ВидКонтактнойИнформацииСтрока);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьИзменениеКонтактнойИнформации(Элемент, ТипКонтактнойИнформацииСтрока)
	
	ИмяРеквизита = Элемент.Имя;
	ИмяРеквизитаПредставление = ИмяРеквизита + "Представление";
	ИмяРеквизитаЗначенияПолей = ИмяРеквизита + "Значение";
	
	Если ТипКонтактнойИнформацииСтрока = "Телефон" Тогда
		
		Значение = СервисДоставкиВызовСервера.КонтактнаяИнформацияПоПредставлению(
			ЭтотОбъект[ИмяРеквизитаПредставление],
			ТипКонтактнойИнформацииСтрока);
		ЭтотОбъект[ИмяРеквизитаЗначенияПолей] = Значение;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	Отказ = Ложь;
	ПроверитьПредставлениеКонтактнойИнформации(ИмяРеквизита, Отказ);
	
	Если ЭтотОбъект[ИмяРеквизитаПредставление] <> Элемент.ТекстРедактирования Тогда
		ЭтотОбъект[ИмяРеквизитаПредставление] = Элемент.ТекстРедактирования;
	КонецЕсли;
	
	ЭтотОбъект[ИмяРеквизитаЗначенияПолей] =
		СервисДоставкиВызовСервера.КонтактнаяИнформацияПоПредставлению(
			ЭтотОбъект[ИмяРеквизитаПредставление],
			ТипКонтактнойИнформацииСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПредставлениеКонтактнойИнформации(Префикс, ЕстьОшибки)
	
	ОчиститьСообщения();
	
	Если Найти(Префикс, "Телефон") Тогда
		
		ПроверитьНомерТелефона(Префикс, ЕстьОшибки);
		
	ИначеЕсли Найти(Префикс, "Адрес") Тогда
		
		ПроверитьДозаполнитьАдрес(Префикс, ЕстьОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если (Не ЗначениеЗаполнено(Результат)) 
		ИЛИ РежимМастера = 2 Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	ИмяРеквизита = ДополнительныеПараметры.ИмяРеквизита;
		
	Если ТипЗнч(Результат) = Тип("Структура") Тогда 
		
		ЕстьИзменения = Ложь;
		Реквизит = ЭтотОбъект[ИмяРеквизита + "Представление"];
		Если Результат.Свойство("Представление") 
			И (Реквизит <> Результат.Представление) Тогда
			Результат.Свойство("Представление", ЭтотОбъект[ИмяРеквизита + "Представление"]);
			ЕстьИзменения = Истина;
		КонецЕсли;
		
		ЕстьИзменения = Ложь;
		Реквизит = ЭтотОбъект[ИмяРеквизита + "Значение"];
		Если Результат.Свойство("Значение") 
			И (Реквизит <> Результат.Значение) Тогда
			Результат.Свойство("Значение", ЭтотОбъект[ИмяРеквизита + "Значение"]);
			ЕстьИзменения = Истина;
		КонецЕсли;
		
		ОтборыИзменение = ОтборыИзменение ИЛИ ЕстьИзменения;
		
		Отказ = Ложь;
		ПроверитьПредставлениеКонтактнойИнформации(ИмяРеквизита, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОшибкиЗаполненияТелефона(Префикс)
	
	Представление = ЭтотОбъект[Префикс + "Представление"];
	Значение = ЭтотОбъект[Префикс + "Значение"];
	
	СписокОшибок = Новый СписокЗначений;
	
	Если Представление = "" Тогда
		Возврат СписокОшибок;
	КонецЕсли;
	
	СтруктураТелефона = Неопределено;
	
	Если Значение <> "" Тогда
		
		Отказ = Ложь;
		ТекстОшибки = "";
		СтруктураТелефона = ЗначениеИзСтрокиJSON(Значение, Отказ, ТекстОшибки);
		
	КонецЕсли;
	
	Если СтруктураТелефона = Неопределено Тогда
		
		Значение = СервисДоставкиВызовСервера.КонтактнаяИнформацияПоПредставлению(Представление, "Телефон");
		ЭтотОбъект[Префикс + "Значение"] = Значение;
		Отказ = Ложь;
		ТекстОшибки = "";
		СтруктураТелефона = ЗначениеИзСтрокиJSON(Значение, Отказ, ТекстОшибки);
		
	КонецЕсли;
	
	ПолныйНомерТелефона = СтруктураТелефона.countryCode + СтруктураТелефона.areaCode + СтруктураТелефона.number;
	
	НомерТелефонаТолькоЦифры = ТолькоЦифры(ПолныйНомерТелефона);
	
	Если СтрДлина(НомерТелефонаТолькоЦифры) < 10 Тогда
		СписокОшибок.Добавить("НомерТелефона", НСтр("ru = 'Номер телефона слишком короткий (менее 10 чисел)'"));
	КонецЕсли;
	
	Если СтрДлина(НомерТелефонаТолькоЦифры) > 15 Тогда
		СписокОшибок.Добавить("НомерТелефона", НСтр("ru = 'Номер телефона слишком длинный'"));
	КонецЕсли;
	
	Если НомерТелефонаСодержитНедопустимыеСимволы(ПолныйНомерТелефона) Тогда
		СписокОшибок.Добавить("НомерТелефона", НСтр("ru = 'Номер телефона содержит недопустимые символы'"));
	КонецЕсли;
	
	Возврат СписокОшибок;
	
КонецФункции

&НаКлиенте
Функция НомерТелефонаСодержитНедопустимыеСимволы(Знач СтрокаПроверки)
	
	СписокДопустимыхСимволов = "+-.,() wp1234567890";
	Возврат СтрРазделить(СтрокаПроверки, СписокДопустимыхСимволов, Ложь).Количество() > 0;
	
КонецФункции

&НаКлиенте
Функция ТолькоЦифры(Знач СтрокаДляПроверки)
	
	Возврат СервисДоставкиКлиент.ТолькоЦифры(СтрокаДляПроверки);
	
КонецФункции

#КонецОбласти

&НаСервере
Процедура ОбработатьПараметры(Параметры, Префикс = "")
	
	ПараметрыДляФормы = Новый Структура;
	СервисДоставкиКлиентСервер.ЗаполнитьЛинейныеДанныеПоСтруктуре(Параметры, ПараметрыДляФормы, Префикс);
	ЗаполнитьЗначенияСвойств(ЭтаФорма, ПараметрыДляФормы);
	УстановитьПризнакОрганизаций();
	
	УслугиТарифа.Очистить();

	УслугиОтгрузки = УслугиТарифа.Добавить();
	УслугиОтгрузки.Использовать = Истина;
	Если СпособОтгрузки = 2 Тогда
		УслугиОтгрузки.Идентификатор = "000000001";
		Значение = УслугиОтгрузки.Свойства.Добавить();
		Значение.Идентификатор = "000000002";
		Значение.Значение = "";
	Иначе
		УслугиОтгрузки.Идентификатор = "000000002";
		Значение = УслугиОтгрузки.Свойства.Добавить();
		Значение.Идентификатор = "000000003";
		Значение.Значение = "";
	КонецЕсли;
	
	УслугиДоставки = УслугиТарифа.Добавить();
	УслугиДоставки.Использовать = Истина;
	Если СпособДоставки = 2 Тогда
		УслугиДоставки.Идентификатор = "000000003";
		Значение = УслугиДоставки.Свойства.Добавить();
		Значение.Идентификатор = "000000002";
		Значение.Значение = "";
	Иначе
		УслугиДоставки.Идентификатор = "000000004";
		Значение = УслугиДоставки.Свойства.Добавить();
		Значение.Идентификатор = "000000003";
		Значение.Значение = "";
	КонецЕсли;
	
	Если Префикс = ""
		И ГрузКоличествоГрузовыхМест = 1 Тогда
		ГрузМаксимальныйВес = ГрузВес;
	КонецЕсли;
	
	ДатаОтгрузки = Макс(ТекущаяДатаСеанса(), ДатаОтгрузки);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакОрганизаций()
	
	ТипКонтрагента = ТипЗнч(ОтправительКонтрагентСсылка);
	ОтправительКонтрагентЭтоОрганизация
		= Метаданные.ОпределяемыеТипы.ОрганизацияСервисДоставки.Тип.СодержитТип(ТипКонтрагента);
	
	ТипКонтрагента = ТипЗнч(ПолучательКонтрагентСсылка);
	ПолучательКонтрагентЭтоОрганизация
		= Метаданные.ОпределяемыеТипы.ОрганизацияСервисДоставки.Тип.СодержитТип(ТипКонтрагента);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьДатуОтгрузки(ДатаОтгрузки)
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	Если ДатаОтгрузки < НачалоДня(ТекущаяДата) Тогда
		ДатаОтгрузки = НачалоДня(ТекущаяДата);
	КонецЕсли;
	
	Если ДатаОтгрузки = НачалоДня(ТекущаяДата) Тогда
		
		ПриведеннаяДата = ДатаОтгрузки + 17*60*60;
		
		Если ТекущаяДата > ПриведеннаяДата Тогда
			ДатаОтгрузки = НачалоДня(ТекущаяДата) + 24*60*60;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПериодОтгрузкиПоУмолчанию()
	
	ВремяОтгрузкиС = '00010101090000';
	ВремяОтгрузкиПо = '00010101180000';
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПериодДоставкиПоУмолчанию()
	
	ВремяДоставкиС = '00010101090000';
	ВремяДоставкиПо = '00010101180000';
	ВремяДоставкиОбедС = '00010101130000';
	ВремяДоставкиОбедПо = '00010101140000';
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияПоУмолчанию()
	
	Если Не ЗначениеЗаполнено(ГрузКоличествоГрузовыхМест) Тогда
		ГрузКоличествоГрузовыхМест = 1;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаОтгрузки) Тогда
		УстановитьДатуОтгрузки(ДатаОтгрузки);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВремяОтгрузкиПо) Тогда
		УстановитьПериодОтгрузкиПоУмолчанию();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВремяДоставкиПо) Тогда
		УстановитьПериодДоставкиПоУмолчанию();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СпособОтгрузки) Тогда
		СпособОтгрузки = 1;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СпособДоставки) Тогда
		СпособДоставки = 1;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТипГрузоперевозки) Тогда
		ТипГрузоперевозки = 1;
	КонецЕсли;
	
	ПараметрыВалюты = СервисДоставки.НовыйПараметрыВалюты();
	ВалютаНаименование = ПараметрыВалюты.Наименование;
	ВалютаКод = ПараметрыВалюты.Код;
	
	Если НЕ ЗначениеЗаполнено(ВалютаСсылка) Тогда
		ВалютаСсылка = ПараметрыВалюты.Ссылка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВалютаСсылка) Тогда
		ПараметрыВалюты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВалютаСсылка, "Код, Наименование");
		ВалютаНаименование = ПараметрыВалюты.Наименование;
		ВалютаКод = ПараметрыВалюты.Код;
	КонецЕсли;
	
	ГрузОграничениеВес = 20000;
	ГрузОграничениеОбъем = 80;
	ГрузОграничениеВысота = 240;
	ГрузОграничениеДлина = 1340;
	ГрузОграничениеШирина = 240;
	ГрузОграничениеСтоимость = 300000000;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность();
	
	Если РежимМастера = 0 Тогда
		
		Элементы.СохранитьКакЧерновик.Видимость = НЕ ДоступнаОтправкаЗаказовНаДоставку;
		Элементы.ОформитьЗаказ.Видимость = ДоступнаОтправкаЗаказовНаДоставку;
		Элементы.СохранитьКакЧерновик.Доступность = Истина;
		
		Элементы.ОформитьЗаказ.Доступность = Истина;
		
		Элементы.ОтменитьЗаказ.Доступность = ЗначениеЗаполнено(ИдентификаторЗаказа);
		
	ИначеЕсли РежимМастера = 1 Тогда
		
		Элементы.СохранитьКакЧерновик.Видимость = НЕ ДоступнаОтправкаЗаказовНаДоставку;
		Элементы.ОформитьЗаказ.Видимость = ДоступнаОтправкаЗаказовНаДоставку;
		Элементы.СохранитьКакЧерновик.Доступность = НЕ ЗначениеЗаполнено(ИдентификаторЗаказа);
		
		Элементы.ОформитьЗаказ.Доступность = Не ЗначениеЗаполнено(ТрекНомер);
		
		Элементы.ОтменитьЗаказ.Доступность = ЗначениеЗаполнено(ИдентификаторЗаказа) И Не ЗначениеЗаполнено(ТрекНомер);
		
		Элементы.ОткрытьФормуЗаказ.Видимость = ЗначениеЗаполнено(ИдентификаторЗаказа);
		
	КонецЕсли;
	
	Элементы.ОткрытьФормуЗаказ.Видимость = ЗначениеЗаполнено(ИдентификаторЗаказа);
	Элементы.Редактировать.Доступность = Не ЗначениеЗаполнено(ТрекНомер);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЗаголовокФормы()
	
	Если РежимМастера = 0 Тогда
		ЗаказНаДоставкуПредставление = НСтр("ru='Заказ на доставку (создание)'");
	ИначеЕсли ЗначениеЗаполнено(НомерЗаказа) Тогда
		ЗаказНаДоставкуПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Заказ на доставку %1 от %2'"),
			НомерЗаказа, Формат(ДатаЗаказа, "ДЛФ=DT"));
	Иначе
		ЗаказНаДоставкуПредставление = НСтр("ru='Заказ на доставку (открытие)'");
	КонецЕсли;
	
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: %2'"),
		СервисДоставкиКлиентСервер.ПредставлениеТипаГрузоперевозки(ТипГрузоперевозки),
		ЗаказНаДоставкуПредставление);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыЗаказаНаДоставкуПоДокументуОснованию(ТипГрузоперевозки, Значение)
	
	Возврат СервисДоставки.ПараметрыЗаказаНаДоставкуПоДокументуОснованию(ТипГрузоперевозки, Значение);
	
КонецФункции

#Область ЗапросыКСервису

&НаКлиенте
Процедура СоздатьИзменитьЗаказНаДоставку(ОформитьЗаказ = Ложь, ЗакрытьПослеЗавершенияОперации = Ложь)
	
	ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
	ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыСоздатьИзменитьЗаказНаДоставку();
	
	Если ЗначениеЗаполнено(ИдентификаторЗаказа) Тогда
		НаименованиеОперации = НСтр("ru = 'Сохранение заказа на доставку'");
	Иначе
		НаименованиеОперации = НСтр("ru = 'Создание заказа на доставку'");
	КонецЕсли;
	
	ПараметрыОперации.НаименованиеОперации = НаименованиеОперации;
	ПараметрыОперации.ВыводитьОкноОжидания = Истина;
	ПараметрыОперации.Вставить("ОформитьЗаказ", ОформитьЗаказ);
	ПараметрыОперации.Вставить("ЗакрытьПослеЗавершенияОперации", ЗакрытьПослеЗавершенияОперации);
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьЗаказНаДоставку()
	
	ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
	ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыОформитьЗаказНаДоставку();
	
	НаименованиеОперации = НСтр("ru = 'Отправка заказа на доставку грузоперевозчику'");
	
	ПараметрыОперации.НаименованиеОперации = НаименованиеОперации;
	ПараметрыОперации.ВыводитьОкноОжидания = Истина;
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьЗаказ()
	
	ОчиститьСообщения();
	Отказ = Ложь;
	ПроверитьЗаполнениеОбязательныхРеквизитов(5, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		СоздатьИзменитьЗаказНаДоставку(Истина);
	Иначе
		Если ЗначениеЗаполнено(ИдентификаторЗаказа) Тогда
			ОформитьЗаказНаДоставку();
		Иначе
			СоздатьИзменитьЗаказНаДоставку(Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьЗаказНаДоставку()
	
	ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
	ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыОтменитьЗаказНаДоставку();
	ПараметрыОперации.НаименованиеОперации = НСтр("ru = 'Отмена заказа на доставку.'");
	ПараметрыОперации.ВыводитьОкноОжидания = Истина;
	
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

#КонецОбласти

#Область ВыполнитьЗапрос

&НаКлиенте
Процедура ВыполнитьЗапрос(ПараметрыОперации)
	
	ИнтернетПоддержкаПодключена = Ложь;
	ОчиститьСообщения();
	
	ИмяФоновогоЗадания = "ФоновоеЗадание" + ПараметрыОперации.ИмяПроцедуры;
	ФоновоеЗадание = ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ПараметрыОперации);
	ЭтотОбъект[ИмяФоновогоЗадания] = ФоновоеЗадание;
	
	Если ИнтернетПоддержкаПодключена = Ложь Тогда
		
		// Загрузка с проверкой подключения интернет-поддержки.
		Оповещение = Новый ОписаниеОповещения("ВыполнитьЗапросПродолжение", ЭтотОбъект, ПараметрыОперации);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(Оповещение, ЭтотОбъект);
		Возврат;
		
	Иначе
		
		ПараметрыОперации.Вставить("ФоновоеЗадание", ФоновоеЗадание);
		ВыполнитьЗапросПродолжение(Истина, ПараметрыОперации);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	ИмяФоновогоЗадания = "ФоновоеЗадание"+ ДополнительныеПараметры.ИмяПроцедуры;
	
	Если Результат = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Отсутствует подключение к Интернет-поддержке пользователей.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("Логин") Тогда
		// Повторный вызов метода после подключения к Интернет-поддержке.
		ИнтернетПоддержкаПодключена = Ложь;
		ЭтотОбъект[ИмяФоновогоЗадания] = ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ДополнительныеПараметры);
		ДополнительныеПараметры.Добавить("ФоновоеЗадание", ЭтотОбъект[ИмяФоновогоЗадания]);
	КонецЕсли;
	
	Если ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтотОбъект[ИмяФоновогоЗадания].Статус = "Выполняется" Тогда
		
		ОжидатьЗавершениеВыполненияЗапроса(ДополнительныеПараметры);
		
	ИначеЕсли ЭтотОбъект[ИмяФоновогоЗадания].Статус = "Выполнено" Тогда
		
		ВыполнитьЗапросЗавершение(ЭтотОбъект[ИмяФоновогоЗадания], ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьЗавершениеВыполненияЗапроса(ПараметрыОперации)
	
	ВыводитьОкноОжидания = Ложь;
	
	// Инициализация обработчик ожидания завершения.
	ИмяФоновогоЗадания = "ФоновоеЗадание" + ПараметрыОперации.ИмяПроцедуры;
	ФоновоеЗадание = ЭтотОбъект[ИмяФоновогоЗадания];
	ПараметрыОперации.Вставить("ФоновоеЗадание", ФоновоеЗадание);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения = ПараметрыОперации.НаименованиеОперации;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
	ПараметрыОжидания.ВыводитьОкноОжидания = ВыводитьОкноОжидания;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	ПараметрыОжидания.Вставить("ИдентификаторЗадания", ФоновоеЗадание.ИдентификаторЗадания);
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ВыполнитьЗапросЗавершение",
		ЭтотОбъект, ПараметрыОперации);
		
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, ОбработкаЗавершения,	ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	// Инициализация.
	Отказ = Ложь;
	
	ИмяФоновогоЗадания = "ФоновоеЗадание" + ДополнительныеПараметры.ИмяПроцедуры;
	ФоновоеЗадание = ЭтотОбъект[ИмяФоновогоЗадания];
	
	// Вывод сообщений из фонового задания.
	Если Результат = Неопределено ИЛИ ФоновоеЗадание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СервисДоставкиКлиент.ОбработатьРезультатФоновогоЗадания(Результат, ДополнительныеПараметры, Отказ);
	
	// Проверка результата поиска.
	Если Не Отказ И Результат.Статус = "Выполнено" Тогда
		Если ЗначениеЗаполнено(Результат.АдресРезультата)
			И ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда
			
			Если ДополнительныеПараметры.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыСоздатьИзменитьЗаказНаДоставку()
				И ДополнительныеПараметры.ФоновоеЗадание.ИдентификаторЗадания =
					ЭтотОбъект[ИмяФоновогоЗадания].ИдентификаторЗадания Тогда
					
				ОперацияВыполнена = Истина;
				ЭтоСоздание = (ИдентификаторЗаказа = "");
				ЗагрузитьРезультатСозданияЗаказа(Результат.АдресРезультата, ОперацияВыполнена);
				Если ОперацияВыполнена = Истина Тогда 
					Если ЭтоСоздание Тогда
						ТекстПояснения = НСтр("ru='Заказ на доставку создан.'");
						ТипОперации = НСтр("ru='Создание:'");
					Иначе
						ТекстПояснения = НСтр("ru='Заказ на доставку изменен.'");
						ТипОперации = НСтр("ru='Изменение:'");
					КонецЕсли;
					
					ПоказатьОповещениеПользователя(ТипОперации,, ТекстПояснения, БиблиотекаКартинок.Информация32);
					
				КонецЕсли;
				
				ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено;
				
				Если ОперацияВыполнена Тогда
					
					Модифицированность = Ложь;
					
					Если ЭтоСоздание Тогда
						Оповестить("ОбновитьСписокЗаказовНаДоставку", ТипГрузоперевозки);
					КонецЕсли;
					
					Если ДополнительныеПараметры.ОформитьЗаказ Тогда
						ОформитьЗаказНаДоставку();
					КонецЕсли;
					
					Если ДополнительныеПараметры.Свойство("ЗакрытьПослеЗавершенияОперации")
						И ДополнительныеПараметры.ЗакрытьПослеЗавершенияОперации Тогда
						Закрыть();
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ДополнительныеПараметры.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыОформитьЗаказНаДоставку()
				И ДополнительныеПараметры.ФоновоеЗадание.ИдентификаторЗадания =
					ЭтотОбъект[ИмяФоновогоЗадания].ИдентификаторЗадания Тогда
					
				ОперацияВыполнена = Истина;
				ЗагрузитьРезультатОформленияЗаказа(Результат.АдресРезультата, ОперацияВыполнена);
				
				Если ОперацияВыполнена = Истина Тогда 
					ТекстПояснения = НСтр("ru='Заказ на доставку передан к оформлению грузоперевозчику'");
					ТипОперации = НСтр("ru='Оформление:'");
					ПоказатьОповещениеПользователя(ТипОперации,, ТекстПояснения, БиблиотекаКартинок.Информация32);
				КонецЕсли;
				ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено;
				
				Если ОперацияВыполнена Тогда
					Оповестить("ОбновитьСписокЗаказовНаДоставку", ТипГрузоперевозки);
					Если ДополнительныеПараметры.Свойство("ЗакрытьПослеЗавершенияОперации")
						И ДополнительныеПараметры.ЗакрытьПослеЗавершенияОперации Тогда
						Закрыть();
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ДополнительныеПараметры.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыОтменитьЗаказНаДоставку()
				И ДополнительныеПараметры.ФоновоеЗадание.ИдентификаторЗадания =
					ЭтотОбъект[ИмяФоновогоЗадания].ИдентификаторЗадания Тогда
				
				ОперацияВыполнена = Истина;
				ЗагрузитьРезультатОтменыЗаказа(Результат.АдресРезультата, ОперацияВыполнена);
				Если ОперацияВыполнена = Истина Тогда 
					ТекстПояснения = НСтр("ru='Заказ на доставку отменен.'");
					ПоказатьОповещениеПользователя(НСтр("ru='Отмена:'"),, ТекстПояснения, БиблиотекаКартинок.Информация32);
					Оповестить("ОбновитьСписокЗаказовНаДоставку", ТипГрузоперевозки);
					Закрыть();
				КонецЕсли;
				ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

#КонецОбласти

#Область ПараметрыЗапроса

&НаСервере
Функция ПараметрыЗапроса(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = Новый Структура();
	
	ИмяПроцедуры = ПараметрыОперации.ИмяПроцедуры;
	
	Если ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыСоздатьИзменитьЗаказНаДоставку() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаСоздатьИзменитьЗаказНаДоставку(ПараметрыОперации, Отказ);
	ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыОформитьЗаказНаДоставку() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаОформитьЗаказНаДоставку(ПараметрыОперации, Отказ);
	ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыОтменитьЗаказНаДоставку() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаОтменитьЗаказНаДоставку(ПараметрыОперации, Отказ);
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаОтменитьЗаказНаДоставку(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаОтменитьЗаказНаДоставку();
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗаказа)
		ИЛИ СостояниеИдентификатор <> 0 Тогда
		ТекстСообщения = НСтр("ru='Отменить заказ можно только в состоянии ""Черновик"".'");
		ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ИдентификаторЗаказа),
											СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Текущее состояние ""%1"".'"), Состояние), "");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Отказ = Истина;
		Возврат ПараметрыЗапроса;
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("Идентификатор", ИдентификаторЗаказа);

	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаСоздатьИзменитьЗаказНаДоставку(ПараметрыОперации, Отказ)
	
	Результат = СервисДоставки.НовыйПараметрыЗапросаСоздатьИзменитьЗаказНаДоставку();
	Результат.КлючИдемпотентности = КлючИдемпотентности;
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		Результат.Вставить("ДокументОснованиеИдентификатор", ДокументОснование.УникальныйИдентификатор());
	КонецЕсли;
	
	Если ПлательщикРоль = 0 Тогда
		ПлательщикРоль = ?(ОтправительКонтрагентЭтоОрганизация, 1, 2);
	КонецЕсли;
	
	РеквизитыФормы = ПолучитьРеквизиты();
	ДанныеФормы = Новый Структура();
	Для Каждого ТекущийРеквизит Из РеквизитыФормы Цикл
		ДанныеФормы.Вставить(ТекущийРеквизит.Имя, ЭтаФорма[ТекущийРеквизит.Имя]);
	КонецЦикла;
	СервисДоставкиКлиентСервер.ЗаполнитьСтруктуруПоЛинейнымДанным(Результат, ДанныеФормы);
	
	Для Каждого ТекущаяУслуга Из УслугиТарифа Цикл
		Если ТекущаяУслуга.Использовать Тогда
			НоваяУслуга = Результат.Услуги.Добавить();
			НоваяУслуга.Идентификатор = ТекущаяУслуга.Идентификатор;
			НоваяУслуга.Свойства = Новый Массив();
			Для Каждого ТекущееСвойство Из ТекущаяУслуга.Свойства Цикл
				ПараметрыСвойстваУслуги = СервисДоставки.НовыйПараметрыСвойстваУслуги();
				ПараметрыСвойстваУслуги.Идентификатор = ТекущееСвойство.Идентификатор;
				ПараметрыСвойстваУслуги.Значение = ТекущееСвойство.Значение;
				НоваяУслуга.Свойства.Добавить(ПараметрыСвойстваУслуги);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаОформитьЗаказНаДоставку(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаОформитьЗаказНаДоставку();
	ПараметрыЗапроса.Вставить("Идентификатор", ИдентификаторЗаказа);

	Возврат ПараметрыЗапроса;
	
КонецФункции

#КонецОбласти

#Область ЗагрузитьРезультаты

&НаСервере
Процедура ЗагрузитьРезультатСозданияЗаказа(АдресРезультата, ОперацияВыполнена)
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
			Если Результат.Свойство("Идентификатор") Тогда
				Результат.Свойство("Идентификатор", ИдентификаторЗаказа);
				Результат.Свойство("НомерЗаказа", НомерЗаказа);
				Результат.Свойство("ДатаЗаказа", ДатаЗаказа);
				Состояние = Результат.Статус;
				СостояниеИдентификатор = Результат.СтатусИдентификатор;
			Иначе
				ОперацияВыполнена = Ложь;
			КонецЕсли;
			
			Если ОперацияВыполнена 
				И РежимМастера = 0 Тогда
				РежимМастера = 1;
				СформироватьЗаголовокФормы();
				
			КонецЕсли;
			
			Если Результат.Свойство("Ошибки") Тогда
			
				Если ТипЗнч(Результат.Ошибки) = Тип("Массив") Тогда
					
					Для Каждого ТекущаяОшибка Из Результат.Ошибки Цикл
						
						ОбщегоНазначения.СообщитьПользователю(ТекущаяОшибка);
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			ОперацияВыполнена = Ложь;
		КонецЕсли;
		
	Иначе
		ОперацияВыполнена = Ложь;
	КонецЕсли;
	
	Если ОперацияВыполнена Тогда
		ДокументыОснования = Новый СписокЗначений();
		ДокументыОснования.Добавить(ДокументОснование);
		СервисДоставкиПереопределяемый.ОбработатьРезультатЗапросаСозданияИзмененияЗаказаНаДоставку(Результат, ДокументыОснования);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатОформленияЗаказа(АдресРезультата, ОперацияВыполнена)
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
			Если Результат.Свойство("ДатаСозданияЗаказа") Тогда
				ЗаполнитьЗначенияСвойств(ЭтаФорма, Результат);
				Состояние = Результат.Статус;
				СостояниеИдентификатор = Результат.СтатусИдентификатор;
			Иначе
				ОперацияВыполнена = Ложь;
			КонецЕсли;
			
			Если Результат.Свойство("Ошибки") Тогда
			
				Если ТипЗнч(Результат.Ошибки) = Тип("Массив") Тогда
					
					Для Каждого ТекущаяОшибка Из Результат.Ошибки Цикл
						
						ОбщегоНазначения.СообщитьПользователю(ТекущаяОшибка);
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			ОперацияВыполнена = Ложь;
		КонецЕсли;
		
	Иначе
		ОперацияВыполнена = Ложь;
	КонецЕсли;
	
	Если ОперацияВыполнена Тогда
		ДокументыОснования = Новый СписокЗначений();
		ДокументыОснования.Добавить(ДокументОснование);
		СервисДоставкиПереопределяемый.ОбработатьРезультатЗапросаОформленияЗаказаНаДоставку(Результат, ДокументыОснования);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатОтменыЗаказа(АдресРезультата, ОперацияВыполнена)
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			Если Результат.Свойство("Идентификатор") Тогда
				Результат.Свойство("Идентификатор", ИдентификаторЗаказа);
			Иначе
				ОперацияВыполнена = Ложь;
			КонецЕсли;
			Если Результат.Свойство("Ошибки") Тогда
				Если ТипЗнч(Результат.Ошибки) = Тип("Массив") Тогда
					Для Каждого ТекущаяОшибка Из Результат.Ошибки Цикл
						ОбщегоНазначения.СообщитьПользователю(ТекущаяОшибка);
					КонецЦикла;
				КонецЕсли;
				ОперацияВыполнена = Ложь;
			КонецЕсли;
		Иначе
			ОперацияВыполнена = Ложь;
		КонецЕсли;
	Иначе
		ОперацияВыполнена = Ложь;
	КонецЕсли;
	
	Если ОперацияВыполнена Тогда
		ДокументыОснования = Новый СписокЗначений();
		ДокументыОснования.Добавить(ДокументОснование);
		СервисДоставкиПереопределяемый.ОбработатьРезультатЗапросаОтменыЗаказаНаДоставку(Результат, ДокументыОснования);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВыполнитьЗапросВФоне

&НаСервере
Функция ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ПараметрыОперации)
	
	// Проверка подключения Интернет-поддержки пользователей.
	ИнтернетПоддержкаПодключена 
		= ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	Если Не ИнтернетПоддержкаПодключена Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Отказ = Ложь;
	ПараметрыЗапроса = ПараметрыЗапроса(ПараметрыОперации, Отказ);
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяФоновогоЗадания = "ФоновоеЗадание" + ПараметрыОперации.ИмяПроцедуры;
	ФоновоеЗадание = ЭтотОбъект[ИмяФоновогоЗадания];
	Если ФоновоеЗадание <> Неопределено Тогда
		ОтменитьВыполнениеЗадания(ФоновоеЗадание.ИдентификаторЗадания);
	КонецЕсли;
	
	Задание = Новый Структура("ИмяПроцедуры, Наименование, ПараметрыПроцедуры");
	Задание.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '1С:Доставка. %1.'"),
		ПараметрыОперации.НаименованиеОперации);
	Задание.ИмяПроцедуры = "СервисДоставки." + ПараметрыОперации.ИмяПроцедуры;
	Задание.ПараметрыПроцедуры = ПараметрыЗапроса;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = Задание.Наименование;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(Задание.ИмяПроцедуры,
		Задание.ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОтменитьВыполнениеЗадания(ИдентификаторЗадания)
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
		ИдентификаторЗадания = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОбработатьПодборТерминала(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Если ДополнительныеПараметры.Направление = 1 Тогда
		Адресат = "ПунктПриемаГруза";
	Иначе
		Адресат = "ПунктВыдачиГруза";
	КонецЕсли;
	
	Результат.Свойство("ТерминалИдентификатор", ЭтотОбъект[Адресат + "Идентификатор"]);
	Результат.Свойство("Терминал", ЭтотОбъект[Адресат + "Наименование"]);
	Результат.Свойство("Адрес", ЭтотОбъект[Адресат + "Адрес"]);
	Результат.Свойство("Телефон", ЭтотОбъект[Адресат + "Телефон"]);
	Результат.Свойство("Описание", ЭтотОбъект[Адресат + "Описание"]);
	Результат.Свойство("ТипНаименование", ЭтотОбъект[Адресат + "ТипНаименование"]);
	Результат.Свойство("ТипИдентификатор", ЭтотОбъект[Адресат + "ТипИдентификатор"]);
	
	Если ЗначениеЗаполнено(ЭтотОбъект[Адресат + "Идентификатор"]) Тогда
		СпособДоставки = 1;
	Иначе
		СпособДоставки = 2;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуТерминала(Идентификатор)
	
	Если Не ЗначениеЗаполнено(Идентификатор) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытияФормы = Новый Структура;
	
	ПараметрыОткрытияФормы.Вставить("Идентификатор", Идентификатор);
	ПараметрыОткрытияФормы.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	ПараметрыОткрытияФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	ОткрытьФорму(
		"Обработка.СервисДоставки.Форма.КарточкаТерминала",
		ПараметрыОткрытияФормы,
		ЭтаФорма,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
 
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоТипуГрузоперевозки()
	
	СформироватьЗаголовокФормы();
	
КонецПроцедуры

#КонецОбласти

