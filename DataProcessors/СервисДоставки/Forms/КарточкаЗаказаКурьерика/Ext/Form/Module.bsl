
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТаблицаСоответствия = Неопределено;
	Параметры.Свойство("СоответствиеСкладов", ТаблицаСоответствия);
	Параметры.Свойство("РежимМастера", РежимМастера);
	Параметры.Свойство("ТипГрузоперевозки", ТипГрузоперевозки);
	Параметры.Свойство("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	Параметры.Свойство("ИдентификаторЗаказа", ИдентификаторЗаказа);
	Параметры.Свойство("ПунктВыдачиКлиентаИдентификатор", ПунктВыдачиКлиентаИдентификатор);
	
	ЕстьОшибкаПодключения = Ложь;
	СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ОрганизацияБизнесСетиСсылка, ЕстьОшибкаПодключения);
	ОрганизацияПодключенаКБизнесСети = Не ЕстьОшибкаПодключения;
	
	Если ТаблицаСоответствия <> Неопределено Тогда
		
		Для Каждого СтрокаТаблицы Из ТаблицаСоответствия Цикл
			
			НоваяСтрока = СоответствиеСкладов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
		КонецЦикла;
		
	Иначе
		
		Если ОрганизацияПодключенаКБизнесСети Тогда
			ФоновоеЗаданиеПолучитьПунктыВыдачиКлиента = ПолучитьПунктыВыдачиКлиентаВФоне();
		КонецЕсли;
		
		Элементы.ПунктВыдачи.Доступность = Ложь;
		Элементы.ПунктВыдачи.ПодсказкаВвода = НСтр("ru = 'Получение пунктов выдачи...'");
		Элементы.ПунктВыдачи.ЦветФона = ЦветаСтиля.ЦветФонаПодсказки;
		
	КонецЕсли;
	
	Параметры.Свойство("ОпцияДоступнаКурьерика", ОпцияДоступнаКурьерика);
	Параметры.Свойство("КомментарийОпцияКурьерика", КомментарийОпцияКурьерика);
	Параметры.Свойство("БалансОпцияКурьерика", БалансОпцияКурьерика);
	Параметры.Свойство("СрокДействияОпцияКурьерика", СрокДействияОпцияКурьерика);
	Параметры.Свойство("ОтображатьУведомлениеПоОпцииКурьерика", ОтображатьУведомлениеПоОпцииКурьерика);
	
	Если ЗначениеЗаполнено(КомментарийОпцияКурьерика)
		Или ОпцияДоступнаКурьерика Тогда
			
		СервисДоставкиВызовСервера.УстановитьЗаголовокОпцияКурьерика(ЭтотОбъект);
		УстановитьДоступностьЭлементовПоЗначениюОпции();
		
	Иначе
		Если ОрганизацияПодключенаКБизнесСети Тогда
			ФоновоеЗаданиеПолучитьСостояниеОпцииКурьерика = ПолучитьСостояниеОпцииКурьерикаВФоне();
		КонецЕсли;
	КонецЕсли;

	ДоступнаОтправкаЗаказовНаДоставку = СервисДоставки.ПравоОтправкиЗаказовНаДоставкуПеревозчику();
	Элементы.ПолучательАдрес.РедактированиеТекста = ПолучитьФункциональнуюОпцию("РазрешитьВводАдресовДоставкиВСвободнойФорме");
	
	УстановитьОформлениеДатыДоставки();
	ЗаполнитьСпискиВыбора();
	СформироватьЗаголовокФормы();
	
	НастройкиДоступныхДействий = ПолучитьВсеДоступныеДействия();
	
	Если РежимМастера = СервисДоставкиКлиентСервер.РежимМастераНовый() Тогда
		
		ЗаполнитьФормуПоДаннымДокументаИБ();
		
		КлючИдемпотентности = Новый УникальныйИдентификатор();
		Модифицированность = Истина;
		
	ИначеЕсли РежимМастера = СервисДоставкиКлиентСервер.РежимМастераЧерновик() Тогда
		
		Параметры.Свойство("ДокументОснованиеДляДобавления", ДокументОснованиеДляДобавления);
		Модифицированность = Истина;
		
	КонецЕсли;
	
	Если ПустаяСтрока(ИдентификаторЗаказа) И ПустаяСтрока(ПолучательКонтактноеЛицоТелефонПредставление) Тогда
		УстановитьОформлениеТелефона();
	КонецЕсли;
	
	ЗаполнитьЗначенияСписковВыбораКонтактнойИнформации();
	УстановитьВидимостьДоступность();
	СформироватьСтрокуПредставлениеСостоянияЗаказаФормы();
	
	РедактируемыйРеквизитЦветФона = ЦветаСтиля.ДобавленныйРеквизитФон;
	
	ЦветТекстаПодсказки = ЦветаСтиля.ЦветТекстаСообщениеСервисДоставки;
	ЦветТекстаПоля = ЦветаСтиля.ЦветТекстаПоля;
	ЦветФонаПодсказки = ЦветаСтиля.ЦветФонаПодсказки;
	ЦветФонаПоля = ЦветаСтиля.ЦветФонаПоля;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ТекущийЭлемент = Элементы.ПунктВыдачи;
	
	Если РежимМастера = СервисДоставкиКлиентСервер.РежимМастераНовый() Тогда
		
		Элементы.ДекорацияСостояниеПредставление.Заголовок = НСтр("ru = 'Новый'");
		
		Элементы.Курьер.ЦветТекста = ЦветТекстаПодсказки;
		Курьер = НСтр("ru = '<не назначен>'");
		
		Если Не ЗначениеЗаполнено(ПолучательКонтрагентСсылка) Тогда
			УстановитьКонтрагентаВСвободнойФорме(Истина);
		КонецЕсли;
		
	Иначе
		
		ПолучитьЗаказНаДоставку(Истина);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФоновоеЗаданиеПолучитьПунктыВыдачиКлиента) Тогда
		
		ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
		ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьПунктыВыдачиКлиента();
		ПараметрыОперации.НаименованиеОперации = НСтр("ru = 'Получение списка пунктов выдачи клиента.'");
		
		ОжидатьЗавершениеВыполненияЗапроса(ПараметрыОперации);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФоновоеЗаданиеПолучитьСостояниеОпцииКурьерика) Тогда
		
		ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
		ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьСостояниеОпцииКурьерика();
		ПараметрыОперации.НаименованиеОперации = НСтр("ru = 'Получение информации по подписке.'");
		
		ОжидатьЗавершениеВыполненияЗапроса(ПараметрыОперации);
		
	КонецЕсли;

	ПриИзмененииРеквизита("ДокументыОснования");
	ПриИзмененииРеквизита("ВариантВремениОтгрузки");
	ПриИзмененииРеквизита("ТоварныйСостав");
	ПриИзмененииРеквизита("ПунктВыдачи");
	ПриИзмененииРеквизита("ТрекНомер");
	ПриИзмененииРеквизита("Оплачен");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ОпцияДоступнаКурьерика
		И Модифицированность Тогда
		
		ОбработчикОповещения  = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОбработчикОповещения,
			НСтр("ru = 'Данные были изменены. Сохранить изменения?'"),
			РежимДиалогаВопрос.ДаНетОтмена);
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияДокументыОснованияНажатие(Элемент)
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("ДокументыОснования", ДокументыОснования.ВыгрузитьЗначения());
	ПараметрыОткрытия.Вставить("Режим", ?(ОпцияДоступнаКурьерика, РежимМастера, 2));
	ПараметрыОткрытия.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	ПараметрыОткрытия.Вставить("Отправитель", ОрганизацияБизнесСетиСсылка);
	ПараметрыОткрытия.Вставить("Получатель", ПолучательКонтрагентСсылка);
	ПараметрыОткрытия.Вставить("ПолучательАдрес", ПолучательАдресПредставление);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОбработатьВыборЗначения",
		ЭтотОбъект,
		Новый Структура("ИмяРеквизита", "ДокументыОснования"));

	ОткрытьФорму(
		"Обработка.СервисДоставки.Форма.СписокДокументовОснований",
		ПараметрыОткрытия,
		ЭтотОбъект,,,,
		ОбработчикОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ПолучательАдресПриИзменении(Элемент)
	
	ПолучательАдресЗначение = СервисДоставкиВызовСервера.КонтактнаяИнформацияПоПредставлению(
		ПолучательАдресПредставление,
		ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес"));
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ПолучательКонтрагентЭтоОрганизация Тогда
		ОткрытьФормуВыбора("ОрганизацияСервисДоставки", Элемент.Имя + "Ссылка");
	Иначе
		ОткрытьФормуВыбора("КонтрагентСервисДоставки", Элемент.Имя + "Ссылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательАдресОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")
		И ВыбранноеЗначение.Свойство("Адрес") Тогда
		
		ПолучательАдресЗначение = ВыбранноеЗначение.Адрес;
		ПолучательАдресПредставление = ВыбранноеЗначение.Представление;
		
	Иначе
		
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Число") Тогда
			АдресОбработкаВыбора(Элемент, ВыбранноеЗначение);
		Иначе
			
			ПоискЗначения = Элементы.ПолучательАдрес.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
			Если ПоискЗначения <> Неопределено Тогда
				
				ПолучательАдресЗначение = ПоискЗначения.Значение;
				ПолучательАдресПредставление = ПредставлениеКонтактнойИнформации(ПолучательАдресЗначение);
				
				КомментарийКАдресу = КомментарийИзКонтактнойИнформации(ПолучательАдресЗначение);
				Если ЗначениеЗаполнено(КомментарийКАдресу) Тогда
					ЗадатьВопросДобавлениеКомментария(КомментарийКАдресу);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательАдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	АдресНачалоВыбора(Элемент, ПолучательКонтрагентЭтоОрганизация);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательАдресАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) И ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
		МодульУправлениеКонтактнойИнформациейКлиент.АвтоПодборАдреса(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательКонтактноеЛицоТелефонПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательКонтактноеЛицоТелефонОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоискЗначения = Элементы.ПолучательКонтактноеЛицоТелефон.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	Если ПоискЗначения <> Неопределено Тогда
		
		ПолучательКонтактноеЛицоТелефонЗначение = ПоискЗначения.Значение;
		Элементы.ПолучательКонтактноеЛицоТелефон.Маска = "";
		ПолучательКонтактноеЛицоТелефонПредставление = ПредставлениеКонтактнойИнформации(ПоискЗначения.Значение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательКонтактноеЛицоТелефонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТелефонНачалоВыбора(Элемент, ПолучательКонтрагентЭтоОрганизация);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	КонтрагентОткрытие(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательОчистка(Элемент, СтандартнаяОбработка)
	
	ОчиститьРеквизит(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСостояниеПредставлениеНажатие(Элемент)
	
	Если ЗначениеЗаполнено(ТрекНомер) Тогда
		Оповещение = Новый ОписаниеОповещения();
		НачатьЗапускПриложения(Оповещение,СервисДоставкиКлиентСервер.АдресСтраницыЗаказаНаДоставку1СКурьерика(ТрекНомер),,Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияТоварныйСоставНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТоварныйСостав", ТоварныйСостав);
	ПараметрыФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОбновитьИнформациюПоТоварномуСоставу", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.СервисДоставки.Форма.ТоварныйСостав",
		ПараметрыФормы,
		ЭтотОбъект,,,,
		ОбработчикОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияДобавитьСпособОплатыНажатие(Элемент)
	
	Элементы.ГруппаОплатаДополнительная.Видимость = Истина;
	Элементы.ДекорацияДобавитьСпособОплаты.Видимость = Ложь;
	
	ПриИзмененииРеквизита("СпособОплаты");
	ПриИзмененииРеквизита("КОплате");
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУдалитьСпособОплатыНажатие(Элемент)
	
	Элементы.ГруппаОплатаДополнительная.Видимость = Ложь;
	Элементы.ДекорацияДобавитьСпособОплаты.Видимость = Истина;
	
	НаложенныйПлатежВидОплатыДополнительный = 0;
	СуммаНаложенногоПлатежаДополнительный = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ПунктВыдачиПриИзменении(Элемент)
	
	ПриИзмененииРеквизита("ПунктВыдачи");
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантВремениОтгрузкиПриИзменении(Элемент)
	
	ПриИзмененииРеквизита("ВариантВремениОтгрузки");
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаДоставкиПриИзменении(Элемент)
	
	ПриИзмененииРеквизита("ДатаДоставки");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Элементы.ПолучательКонтактноеЛицо.КнопкаВыбора = Истина;
	Элементы.ПолучательКонтрагент.ЦветТекста = ЦветТекстаПоля;
	
	Если ВыбранноеЗначение = 1 Тогда
		ОткрытьФормуВыбора("ОрганизацияСервисДоставки", Элемент.Имя + "Ссылка");
	ИначеЕсли ВыбранноеЗначение = 2 Тогда
		ОткрытьФормуВыбора("КонтрагентСервисДоставки", Элемент.Имя + "Ссылка");
	ИначеЕсли ВыбранноеЗначение = 3 Тогда
		УстановитьКонтрагентаВСвободнойФорме(Истина);
		УстановитьОформлениеТелефона();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательКонтактноеЛицоПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПолучательКонтактноеЛицоОчистка(Элемент, СтандартнаяОбработка)
	
	ОчиститьРеквизит(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательКонтактноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОтбора = Новый Структура();
	
	Если ПолучательКонтрагентНаименование <> СервисДоставкиКлиентСервер.ПолучательВСвободнойФорме() Тогда
		
		Если ПолучательКонтрагентЭтоОрганизация Тогда
		
			ЗаполнитьПараметрыОтбораКонтактногоЛицаОрганизации(ПараметрыОтбора, ПолучательКонтрагентСсылка);
			ОткрытьФормуВыбора("КонтактноеЛицоОрганизацииСервисДоставки", Элемент["Имя"] + "Ссылка", ПараметрыОтбора);
			
		Иначе
			
			ЗаполнитьПараметрыОтбораКонтактногоЛицаКонтрагента(ПараметрыОтбора, ПолучательКонтрагентСсылка);
			ОткрытьФормуВыбора("КонтактноеЛицоКонтрагентаСервисДоставки", Элемент["Имя"] + "Ссылка", ПараметрыОтбора);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяДоставкиСПриИзменении(Элемент)
	
	ПроверитьИнтервалДоставки();
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяДоставкиПоПриИзменении(Элемент)
	
	ПроверитьИнтервалДоставки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОплаченПриИзменении(Элемент)
	
	ПриИзмененииРеквизита("Оплачен");
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОплатыПриИзменении(Элемент)
	
	ПриИзмененииРеквизита("СпособОплаты");
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОплатыДополнительныйПриИзменении(Элемент)
	
	ПриИзмененииРеквизита("СпособОплатыДополнительный");
	
КонецПроцедуры

&НаКлиенте
Процедура КОплатеПриИзменении(Элемент)
	
	ПриИзмененииРеквизита("КОплате");
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	ПриИзмененииРеквизита("СуммаДокумента");
	
КонецПроцедуры

&НаКлиенте
Процедура КОплатеДополнительноПриИзменении(Элемент)
	
	ПриИзмененииРеквизита("КОплатеДополнительно");
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОбновитьТоварныйСоставОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ПослеВыбораДействияСТоварнымСоставом", ЭтотОбъект);
	
	СписокДействий = Новый СписокЗначений();
	СписокДействий.Добавить(1, НСтр("ru = 'Перезаполнить товары'"));
	СписокДействий.Добавить(2, НСтр("ru = 'Игнорировать изменения'"));
	
	ПоказатьВыборИзМеню(ОбработчикОповещения, СписокДействий, Элементы.ДекорацияДействияТоварныйСостав);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтправитьЗаказ(Команда)
	
	ЗакрытьПослеЗавершенияОперации = Ложь;
	
	Если ДоступнаОтправкаЗаказовНаДоставку Тогда
		ОформитьЗаказ(ЗакрытьПослеЗавершенияОперации);
	Иначе
		СоздатьИзменитьЗаказНаДоставку(, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	ОписаниеОЗавершении = Новый ОписаниеОповещения("ЗавершениеОтменитьЗаказ", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОЗавершении, НСтр("ru = 'Отменить заказ?'"), РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура СохранитьКакЧерновик(Команда)

	СоздатьИзменитьЗаказНаДоставку();

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеЗаказа(Команда)
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОбновитьДанныеЗаказаВопрос", ЭтотОбъект);
	ПоказатьВопрос(ОбработчикОповещения,
		НСтр("ru = 'Данные заказа будут получены от оператора. Продолжить?'"),
		РежимДиалогаВопрос.ДаНет,,
		КодВозвратаДиалога.Нет,
		НСтр("ru = 'Обновление данных заказа'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтраницуЗаказа(Команда)
	
	Оповещение = Новый ОписаниеОповещения();
	НачатьЗапускПриложения(Оповещение,СтрШаблон("https://app.courierica.ru/#/order/%1", ТрекНомер),,Ложь);
	
КонецПроцедуры

#Область КомандыРедактированияРеквизитовЗаказа

&НаКлиенте
Процедура ИзменитьПараметрыЗаказа(Команда)
	
	ПараметрыОперации = ПараметрыОперацииПолучитьДоступныеДляИзмененияРеквизиты(Истина);
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьИзменения(Команда)
	
	РежимИзмененияРеквизитов(Ложь);
	
	ДоступныеДляИзмененияРеквизитыТолькоПросмотр(Истина);
	
	Если Модифицированность Тогда
	
		ПолучитьЗаказНаДоставку(Истина);
		
		Модифицированность = Ложь;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьИзменения(Команда)
	
	Отказ = Ложь;
	
	КонтрольЗаполненияРеквизитовОформленногоЗаказа(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьИзменитьЗаказНаДоставку(Ложь, Ложь);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДлительныеОперации

&НаКлиенте
Процедура ВыполнитьЗапрос(ПараметрыОперации, Знач ОчищатьСообщения = Истина)
	
	ИнтернетПоддержкаПодключена = Ложь;
	
	Если ОчищатьСообщения = Истина Тогда
		ОчиститьСообщения();
	КонецЕсли;
	
	ИмяФоновогоЗадания = "ФоновоеЗадание" + ПараметрыОперации.ИмяПроцедуры;
	ФоновоеЗадание = ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ПараметрыОперации);
	ЭтотОбъект[ИмяФоновогоЗадания] = ФоновоеЗадание;
	
	Если ИнтернетПоддержкаПодключена = Ложь Тогда
		
		// Загрузка с проверкой подключения интернет-поддержки.
		Оповещение = Новый ОписаниеОповещения("ВыполнитьЗапросПродолжение", ЭтотОбъект, ПараметрыОперации);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(Оповещение, ЭтотОбъект);
		Возврат;
		
	Иначе
		
		ПараметрыОперации.Вставить("ФоновоеЗадание", ФоновоеЗадание);
		ВыполнитьЗапросПродолжение(Истина, ПараметрыОперации);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	ИмяФоновогоЗадания = "ФоновоеЗадание"+ ДополнительныеПараметры.ИмяПроцедуры;
	
	Если Результат = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'Отсутствует подключение к Интернет-поддержке пользователей.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
		
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("Логин") Тогда
		
		// Повторный вызов метода после подключения к Интернет-поддержке.
		ИнтернетПоддержкаПодключена = Ложь;
		ЭтотОбъект[ИмяФоновогоЗадания] = ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ДополнительныеПараметры);
		ДополнительныеПараметры.Вставить("ФоновоеЗадание", ЭтотОбъект[ИмяФоновогоЗадания]);
		
	КонецЕсли;
	
	Если ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтотОбъект[ИмяФоновогоЗадания].Статус = "Выполняется" Тогда
		ОжидатьЗавершениеВыполненияЗапроса(ДополнительныеПараметры);
	ИначеЕсли ЭтотОбъект[ИмяФоновогоЗадания].Статус = "Выполнено" Тогда
		ВыполнитьЗапросЗавершение(ЭтотОбъект[ИмяФоновогоЗадания], ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьЗавершениеВыполненияЗапроса(ПараметрыОперации)
	
	Если ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьПунктыВыдачиКлиента() Тогда
		ВыводитьОкноОжидания = Ложь;
	Иначе
		ВыводитьОкноОжидания = Истина;
	КонецЕсли;
	
	// Инициализация обработчик ожидания завершения.
	ИмяФоновогоЗадания = "ФоновоеЗадание" + ПараметрыОперации.ИмяПроцедуры;
	ФоновоеЗадание = ЭтотОбъект[ИмяФоновогоЗадания];
	ПараметрыОперации.Вставить("ФоновоеЗадание", ФоновоеЗадание);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения = ПараметрыОперации.НаименованиеОперации;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
	ПараметрыОжидания.ВыводитьОкноОжидания = ВыводитьОкноОжидания;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	ПараметрыОжидания.Вставить("ИдентификаторЗадания", ФоновоеЗадание.ИдентификаторЗадания);
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ВыполнитьЗапросЗавершение", ЭтотОбъект, ПараметрыОперации);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, ОбработкаЗавершения,	ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	// Инициализация.
	Отказ = Ложь;
	ДанныеОбновлены = Ложь;
	
	ИмяФоновогоЗадания = "ФоновоеЗадание" + ДополнительныеПараметры.ИмяПроцедуры;
	ФоновоеЗадание = ЭтотОбъект[ИмяФоновогоЗадания];
	
	// Вывод сообщений из фонового задания.
	Если Результат = Неопределено
		Или ФоновоеЗадание = Неопределено Тогда

		// Проверка актуальности фонового задания
		Если ДополнительныеПараметры.ИмяПроцедуры = "ПолучитьЗаказНаДоставку" И Результат = Неопределено Тогда
			Если ДлительнаяОперацияОтменена(ДополнительныеПараметры.ФоновоеЗадание.ИдентификаторЗадания) Тогда
				Модифицированность = Ложь;
				Закрыть();
			КонецЕсли;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	СервисДоставкиКлиент.ОбработатьРезультатФоновогоЗадания(Результат, ДополнительныеПараметры, Отказ);
	
	// Проверка результата поиска.
	Если Не Отказ
		И Результат.Статус = "Выполнено" Тогда
			
		Если ЗначениеЗаполнено(Результат.АдресРезультата)
			И ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда
			
			Если ДополнительныеПараметры.Свойство("ПараметрыОповещения") 
				И ДополнительныеПараметры.ФоновоеЗадание.ИдентификаторЗадания = ЭтотОбъект[ИмяФоновогоЗадания].ИдентификаторЗадания Тогда
					
				ПараметрыОповещения = ДополнительныеПараметры.ПараметрыОповещения;
				ПараметрыОповещения.Параметры.Вставить("ИмяФоновогоЗадания", ИмяФоновогоЗадания);
				ПроцедураОбработкиРезультата = Новый ОписаниеОповещения(ПараметрыОповещения.ИмяПроцедуры, ЭтотОбъект, ПараметрыОповещения.Параметры);
				
				ВыполнитьОбработкуОповещения(ПроцедураОбработкиРезультата, Результат);
			
			ИначеЕсли ДополнительныеПараметры.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьЗаказНаДоставку()
				И ДополнительныеПараметры.ФоновоеЗадание.ИдентификаторЗадания = ЭтотОбъект[ИмяФоновогоЗадания].ИдентификаторЗадания Тогда
				
				ДанныеОбновлены = Истина;
				
				ЗагрузитьРезультатПолученияЗаказаНаДоставку(Результат.АдресРезультата, ДанныеОбновлены);
				Элементы.ГруппаОплатаДополнительная.Видимость = Не (СуммаНаложенногоПлатежаДополнительный = 0);
				
				Если РежимМастера = СервисДоставкиКлиентСервер.РежимМастераЧерновик()
					И ЗначениеЗаполнено(ДокументОснованиеДляДобавления)
					И ДокументыОснования.НайтиПоЗначению(ДокументОснованиеДляДобавления) = Неопределено Тогда
					
					ДокументыОснования.Добавить(ДокументОснованиеДляДобавления);
					ПараметрыЗаказа = ПараметрыЗаказаНаДоставкуПоДокументамОснованиям(ТипГрузоперевозки, ДокументыОснования);
					
					Если ПараметрыЗаказа.Свойство("ТоварныйСостав") Тогда
						
						ТоварныйСостав.Очистить();
						
						Для Каждого ТекСтрока Из ПараметрыЗаказа.ТоварныйСостав Цикл
							
							НоваяСтрока = ТоварныйСостав.Добавить();
							
							Если НоваяСтрока.СтавкаНДСПредставление = "" Тогда
								НоваяСтрока.СтавкаНДСПредставление = НоваяСтрока.СтавкаНДС;
							КонецЕсли;
							
							ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
							
						КонецЦикла;
						
					КонецЕсли;
					
					СуммаДокумента = ПараметрыЗаказа.ПолнаяСтоимость;
					
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(ПолучательКонтрагентСсылка) Тогда
					УстановитьКонтрагентаВСвободнойФорме();
					Если ПустаяСтрока(ПолучательКонтактноеЛицоТелефонПредставление) Тогда
						УстановитьОформлениеТелефона();
					КонецЕсли;
				КонецЕсли;
				
				ПриИзмененииРеквизита("ПунктВыдачи");
				ПриИзмененииРеквизита("ТрекНомер");
				ПриИзмененииРеквизита("ДокументыОснования");
				ПриИзмененииРеквизита("ТоварныйСостав");
				ПриИзмененииРеквизита("ВариантВремениОтгрузки", Ложь);
				ПриИзмененииРеквизита("Оплачен");
				
				УстановитьВидимостьДоступность();
				СформироватьСтрокуПредставлениеСостоянияЗаказаФормы();
				СформироватьЗаголовокФормы();
				
				Модифицированность = Ложь;
				
			ИначеЕсли ДополнительныеПараметры.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыОбновитьЗаказНаДоставку()
				И ДополнительныеПараметры.ФоновоеЗадание.ИдентификаторЗадания
				= ЭтотОбъект[ИмяФоновогоЗадания].ИдентификаторЗадания Тогда
					
				ЗагрузитьРезультатОбновленияЗаказа(Результат.АдресРезультата, ДанныеОбновлены);
				
				Если ДанныеОбновлены Тогда
					
					ЗагрузитьРезультатПолученияЗаказаНаДоставку(Результат.АдресРезультата, ДанныеОбновлены);
					Элементы.ГруппаОплатаДополнительная.Видимость = Не (СуммаНаложенногоПлатежаДополнительный = 0);
					
					Если Не ЗначениеЗаполнено(ПолучательКонтрагентСсылка) Тогда
						УстановитьКонтрагентаВСвободнойФорме();
						Если ПустаяСтрока(ПолучательКонтактноеЛицоТелефонПредставление) Тогда
							УстановитьОформлениеТелефона();
						КонецЕсли;
					КонецЕсли;
					
					ПриИзмененииРеквизита("Оплачен");
					ПриИзмененииРеквизита("ПунктВыдачи");
					ПриИзмененииРеквизита("ТрекНомер");
					ПриИзмененииРеквизита("ДокументыОснования");
					ПриИзмененииРеквизита("ТоварныйСостав");
					ПриИзмененииРеквизита("ВариантВремениОтгрузки", Ложь);
					
					УстановитьВидимостьДоступность();
					СформироватьСтрокуПредставлениеСостоянияЗаказаФормы();
					СформироватьЗаголовокФормы();
					
				КонецЕсли;
				
				ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено;
				
				Модифицированность = Ложь;
				
			ИначеЕсли ДополнительныеПараметры.ИмяПроцедуры
				= СервисДоставкиКлиентСервер.ИмяПроцедурыОтменитьЗаказНаДоставку()
				И ДополнительныеПараметры.ФоновоеЗадание.ИдентификаторЗадания
				= ЭтотОбъект[ИмяФоновогоЗадания].ИдентификаторЗадания Тогда
				
				РезультатОтмены = 0;
				СуммаОтмены = 0;
				ЗагрузитьРезультатОтменыЗаказа(Результат.АдресРезультата, РезультатОтмены, СуммаОтмены);
				Если РезультатОтмены = 1 Тогда //Отменен
					
					ТекстПояснения = НСтр("ru = 'Заказ на доставку отменен.'");
					ПоказатьОповещениеПользователя(НСтр("ru = 'Отмена:'"),, ТекстПояснения, БиблиотекаКартинок.Информация32);
					Оповестить("ОбновитьСписокЗаказовНаДоставку", ТипГрузоперевозки);
					Оповестить("СервисДоставки_ЗаказНаДоставкуОтменен", ТипГрузоперевозки, ИдентификаторЗаказа);
					Модифицированность = Ложь;
					Закрыть();
					
				ИначеЕсли РезультатОтмены = 3 Тогда //Отмена заказа уже невозможна
					
					ТекстПояснения = НСтр("ru = 'Заказ на доставку невозможно отменить.'");
					ПоказатьОповещениеПользователя(НСтр("ru = 'Отмена:'"),, ТекстПояснения, БиблиотекаКартинок.Информация32);
					
				КонецЕсли;
				ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено;
				ДанныеОбновлены = Истина;
				
			ИначеЕсли ДополнительныеПараметры.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыСоздатьИзменитьЗаказНаДоставку()
				И ДополнительныеПараметры.ФоновоеЗадание.ИдентификаторЗадания = ЭтотОбъект[ИмяФоновогоЗадания].ИдентификаторЗадания Тогда
					
				ОперацияВыполнена = Истина;
				ЭтоСоздание = (ИдентификаторЗаказа = "");

				ЗавершитьИзменениеОформленного = (РежимМастера = СервисДоставкиКлиентСервер.РежимМастераЗарегистрирован());
				ЗагрузитьРезультатСозданияЗаказа(Результат.АдресРезультата, ОперацияВыполнена);
				
				Если ОперацияВыполнена = Истина Тогда
					
					СоздатьОбновитьДанныеЗаказаНаДоставку();
					
					Если ЭтоСоздание Тогда
						ТекстПояснения = НСтр("ru = 'Заказ на доставку создан.'");
						ТипОперации = НСтр("ru = 'Создание:'");
					Иначе
						ТекстПояснения = НСтр("ru = 'Заказ на доставку изменен.'");
						ТипОперации = НСтр("ru = 'Изменение:'");
					КонецЕсли;
					
					ПоказатьОповещениеПользователя(ТипОперации,, ТекстПояснения, БиблиотекаКартинок.Информация32);
					УстановитьВидимостьДоступностьОрганизации();
					
				КонецЕсли;
				
				ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено;
				ДанныеОбновлены = Истина;
				
				Если ОперацияВыполнена = Истина Тогда
					
					Модифицированность = Ложь;
					
					Если ЭтоСоздание Тогда
						Оповестить("ОбновитьСписокЗаказовНаДоставку", ТипГрузоперевозки);
					КонецЕсли;
					
					Если ЗавершитьИзменениеОформленного Тогда
						ПолучитьЗаказНаДоставку(Ложь);
						КлючиРеквизитовДляИзменения.Очистить();
					КонецЕсли;
					
					ЗакрытьПослеЗавершенияОперации = Ложь;
					ДополнительныеПараметры.Свойство("ЗакрытьПослеЗавершенияОперации", ЗакрытьПослеЗавершенияОперации);
					
					Если ДополнительныеПараметры.ОформитьЗаказ Тогда
						ОформитьЗаказНаДоставку(,ЗакрытьПослеЗавершенияОперации);
					ИначеЕсли ЗакрытьПослеЗавершенияОперации Тогда
						Закрыть();
					КонецЕсли;

				КонецЕсли;
				
			ИначеЕсли ДополнительныеПараметры.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыОформитьЗаказНаДоставку()
				И ДополнительныеПараметры.ФоновоеЗадание.ИдентификаторЗадания = ЭтотОбъект[ИмяФоновогоЗадания].ИдентификаторЗадания Тогда
					
				РезультатОформленияЗаказаНаДоставку = 1;
				ЗагрузитьРезультатОформленияЗаказа(Результат.АдресРезультата, РезультатОформленияЗаказаНаДоставку);
				
				Если РезультатОформленияЗаказаНаДоставку = 1 Тогда 
					ТекстПояснения = НСтр("ru = 'Заказ на доставку передан к оформлению грузоперевозчику'");
					ТипОперации = НСтр("ru = 'Оформление:'");
					ПоказатьОповещениеПользователя(ТипОперации,, ТекстПояснения, БиблиотекаКартинок.Информация32);
					Оповестить("ОбновитьСписокЗаказовНаДоставку", ТипГрузоперевозки);
				КонецЕсли;
				ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено;
				ДанныеОбновлены = Истина;
				
				ЗакрытьПослеЗавершенияОперации = Ложь;
				ДополнительныеПараметры.Свойство("ЗакрытьПослеЗавершенияОперации", ЗакрытьПослеЗавершенияОперации);
				
				Если ЗакрытьПослеЗавершенияОперации Тогда 
					Закрыть();
				КонецЕсли;
				
				Элементы.ГруппаОплатаДополнительная.Видимость = Не (СуммаНаложенногоПлатежаДополнительный = 0);
				
				ПриИзмененииРеквизита("ТрекНомер");
				
				УстановитьВидимостьДоступность();
				СформироватьСтрокуПредставлениеСостоянияЗаказаФормы();
				СформироватьЗаголовокФормы();
				
				Модифицированность = Ложь;
				
			ИначеЕсли ДополнительныеПараметры.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьПунктыВыдачиКлиента() Тогда
				
				ЗагрузитьРезультатПолученияСпискаПунктовВыдачиКлиента(Результат.АдресРезультата);
				ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено;
				
				ПриИзмененииРеквизита("ПунктВыдачи");
				
			ИначеЕсли ДополнительныеПараметры.ИмяПроцедуры =
				СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьСостояниеОпцииКурьерика() Тогда
				
				ЗагрузитьРезультатПолучитьСостояниеОпцииКурьерика(Результат.АдресРезультата);
				
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьОбновитьДанныеЗаказаНаДоставку()
	
	КлючеваяОперация = "СервисДоставки.КарточкаЗаказаКурьерика.СоздатьОбновитьДанныеЗаказаНаДоставку";
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(КлючеваяОперация);
	
	ПараметрыСозданияДанныхЗаказа = СервисДоставкиКлиентСервер.НовыйПараметрыЗаписиДанныхЗаказаСервисаДоставки();
	ПараметрыСозданияДанныхЗаказа.ТипГрузоперевозки = ТипГрузоперевозки;
	ПараметрыСозданияДанныхЗаказа.Организация = ОрганизацияБизнесСетиСсылка;
	ПараметрыСозданияДанныхЗаказа.Идентификатор = ИдентификаторЗаказа;
	ПараметрыСозданияДанныхЗаказа.ДокументыОснования = ДокументыОснования.ВыгрузитьЗначения();
	ПараметрыСозданияДанныхЗаказа.Представление = СервисДоставкиКлиентСервер.ПредставлениеЗаказаНаДоставку(ЭтотОбъект, Истина);
	
	РегистрыСведений.ДанныеЗаказовСервисДоставки.СоздатьОбновитьДанныеЗаказа(ПараметрыСозданияДанныхЗаказа);
	
	КоличествоДанных = ПараметрыСозданияДанныхЗаказа.ДокументыОснования.Количество();
	Если КоличествоДанных > 0 Тогда
		ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, КоличествоДанных / 100);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДлительнаяОперацияОтменена(ИдентификаторЗадания)
	Возврат ПараметрыСеанса.ДлительныеОперации.Отмененные.Найти(ИдентификаторЗадания) <> Неопределено;
КонецФункции	

&НаСервере
Функция ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ПараметрыОперации)
	
	// Проверка подключения Интернет-поддержки пользователей.
	ИнтернетПоддержкаПодключена 
		= ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	Если Не ИнтернетПоддержкаПодключена Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Отказ = Ложь;
	ПараметрыЗапроса = ПараметрыЗапроса(ПараметрыОперации, Отказ);
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяФоновогоЗадания = "ФоновоеЗадание" + ПараметрыОперации.ИмяПроцедуры;
	ФоновоеЗадание = ЭтотОбъект[ИмяФоновогоЗадания];
	Если ФоновоеЗадание <> Неопределено Тогда
		ОтменитьВыполнениеЗадания(ФоновоеЗадание.ИдентификаторЗадания);
	КонецЕсли;
	
	Задание = Новый Структура("ИмяПроцедуры, Наименование, ПараметрыПроцедуры");
	Задание.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1. %2.'"),
		СервисДоставкиКлиентСервер.ПредставлениеТипаГрузоперевозки(ТипГрузоперевозки),
		ПараметрыОперации.НаименованиеОперации);
	Задание.ИмяПроцедуры = "СервисДоставки." + ПараметрыОперации.ИмяПроцедуры;
	Задание.ПараметрыПроцедуры = ПараметрыЗапроса;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = Задание.Наименование;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	Если ПараметрыОперации.Свойство("ЗапуститьВФоне")
		И ТипЗнч(ПараметрыОперации.ЗапуститьВФоне) = Тип("Булево") Тогда
		ПараметрыВыполнения.ЗапуститьВФоне = ПараметрыОперации.ЗапуститьВФоне;
	КонецЕсли;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(Задание.ИмяПроцедуры,
		Задание.ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОтменитьВыполнениеЗадания(ИдентификаторЗадания)
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
		ИдентификаторЗадания = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыЗапросаПолучитьЗаказНаДоставку(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаПолучитьЗаказНаДоставку();
	ПараметрыЗапроса.Вставить("Идентификатор", ИдентификаторЗаказа);

	Возврат ПараметрыЗапроса;
КонецФункции

&НаСервере
Функция ПараметрыЗапросаСоздатьИзменитьЗаказНаДоставку(ПараметрыОперации, Отказ)
	
	Результат = СервисДоставки.НовыйПараметрыЗапросаСоздатьИзменитьЗаказНаДоставку();
	Результат.КлючИдемпотентности = КлючИдемпотентности;
	
	Для Каждого ТекДокументОснование Из ДокументыОснования Цикл
		Результат.ДокументыОснованияИдентификаторы.Добавить(ТекДокументОснование.Значение.УникальныйИдентификатор());
	КонецЦикла;
	
	РеквизитыФормы = ПолучитьРеквизиты();
	ДанныеФормы = Новый Структура();
	Для Каждого ТекущийРеквизит Из РеквизитыФормы Цикл
		ДанныеФормы.Вставить(ТекущийРеквизит.Имя, ЭтотОбъект[ТекущийРеквизит.Имя]);
	КонецЦикла;
	
	СервисДоставкиКлиентСервер.ЗаполнитьСтруктуруПоЛинейнымДанным(Результат, ДанныеФормы);
	
	Результат.Вставить("ДополнительнаяИнформация", Комментарий);
	Результат.Товары = ТоварныйСостав.Выгрузить();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаОформитьЗаказНаДоставку(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаОформитьЗаказНаДоставку();
	ПараметрыЗапроса.Вставить("Идентификатор", ИдентификаторЗаказа);

	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаОбновитьЗаказНаДоставку(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаОбновитьЗаказНаДоставку();
	ПараметрыЗапроса.Вставить("Идентификатор", ИдентификаторЗаказа);

	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаОтменитьЗаказНаДоставку(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаОтменитьЗаказНаДоставку();
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗаказа)
		Или Не ДоступнаОтмена Тогда
		ТекстСообщения = НСтр("ru = 'Отмена данного заказа недоступна. Невозможно отменить заказ.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Отказ = Истина;
		Возврат ПараметрыЗапроса;
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("Идентификатор", ИдентификаторЗаказа);
	ПараметрыЗапроса.Вставить("ОтменитьЗаказПлатно", ?(ПараметрыОперации.ПлатнаяОтмена, "1", "0"));
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаПолучитьДоступныеДляИзмененияРеквизиты(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаПолучитьДоступныеДляИзмененияРеквизиты();
	ПараметрыЗапроса.Вставить("Идентификатор", ИдентификаторЗаказа);

	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаПолучитьПунктыВыдачиКлиента(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаПолучитьПунктыВыдачиКлиента();
	
	Если ЗначениеЗаполнено(ТипГрузоперевозки) Тогда
		ПараметрыЗапроса.ТипГрузоперевозки = ТипГрузоперевозки;
	Иначе
		ТекстОшибки = НСтр("ru = 'Не выбран тип грузоперевозки.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Отказ = Истина;
	КонецЕсли;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапроса(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = Новый Структура();
	
	ИмяПроцедуры = ПараметрыОперации.ИмяПроцедуры;
	
	Если ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьЗаказНаДоставку() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаПолучитьЗаказНаДоставку(ПараметрыОперации, Отказ);
	ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыСоздатьИзменитьЗаказНаДоставку() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаСоздатьИзменитьЗаказНаДоставку(ПараметрыОперации, Отказ);
	ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыОформитьЗаказНаДоставку() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаОформитьЗаказНаДоставку(ПараметрыОперации, Отказ);
	ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыОбновитьЗаказНаДоставку() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаОбновитьЗаказНаДоставку(ПараметрыОперации, Отказ);
	ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыОтменитьЗаказНаДоставку() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаОтменитьЗаказНаДоставку(ПараметрыОперации, Отказ);
	ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьДоступныеДляИзмененияРеквизиты() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаПолучитьДоступныеДляИзмененияРеквизиты(ПараметрыОперации, Отказ);
	ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьПунктыВыдачиКлиента() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаПолучитьПунктыВыдачиКлиента(ПараметрыОперации, Отказ);
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	ПараметрыЗапроса.Вставить("ТипГрузоперевозки", СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СКурьерика());
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыОперацииПолучитьЗаказНаДоставку()

	ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
	ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьЗаказНаДоставку();
	ПараметрыОперации.НаименованиеОперации = НСтр("ru = 'Получение данных по заказу на доставку.'");
	ПараметрыОперации.ВыводитьОкноОжидания = Истина;
	
	Возврат ПараметрыОперации;

КонецФункции

#КонецОбласти

#Область ЗапросыКСервису

&НаКлиенте
Процедура ОформитьЗаказ(ЗакрытьПослеЗавершенияОперации = Ложь)
	
	ОчиститьСообщения();
	
	Отказ = Ложь;
	ПроверитьЗаполнениеЗаказаПередОтправкой(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность 
		Или ИдентификаторЗаказа = "" Тогда
		СоздатьИзменитьЗаказНаДоставку(Истина, ЗакрытьПослеЗавершенияОперации);
	Иначе
		ОформитьЗаказНаДоставку(, ЗакрытьПослеЗавершенияОперации);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПунктыВыдачиКлиентаВФоне()
	
	ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
	ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьПунктыВыдачиКлиента();
	ПараметрыОперации.НаименованиеОперации = НСтр("ru = 'Получение списка пунктов выдачи клиента.'");
	
	Возврат ВыполнитьЗапросВФоне(Ложь, ПараметрыОперации);
	
КонецФункции

&НаСервере
Функция ПолучитьЗаказНаДоставкуВФоне()
	
	ПараметрыОперации = ПараметрыОперацииПолучитьЗаказНаДоставку();
	
	Возврат ВыполнитьЗапросВФоне(Ложь, ПараметрыОперации);
	
КонецФункции

&НаКлиенте
Процедура ПолучитьЗаказНаДоставку(Знач ОчищатьСообщения)
	
	ПараметрыОперации = ПараметрыОперацииПолучитьЗаказНаДоставку();
	
	ВыполнитьЗапрос(ПараметрыОперации, ОчищатьСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИзменитьЗаказНаДоставку(ОформитьЗаказ = Ложь, ЗакрытьПослеЗавершенияОперации = Ложь)
	
	ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
	ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыСоздатьИзменитьЗаказНаДоставку();
	
	Если ЗначениеЗаполнено(ИдентификаторЗаказа) Тогда
		НаименованиеОперации = НСтр("ru = 'Сохранение заказа на доставку.'");
	Иначе
		НаименованиеОперации = НСтр("ru = 'Создание заказа на доставку.'");
	КонецЕсли;
	
	ПараметрыОперации.НаименованиеОперации = НаименованиеОперации;
	ПараметрыОперации.ВыводитьОкноОжидания = Истина;
	ПараметрыОперации.Вставить("ОформитьЗаказ", ОформитьЗаказ);
	ПараметрыОперации.Вставить("ЗакрытьПослеЗавершенияОперации", ЗакрытьПослеЗавершенияОперации);
	
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьЗаказНаДоставку(НаименованиеОперации = "", ЗакрытьПослеЗавершенияОперации = Ложь)
	
	ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
	ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыОформитьЗаказНаДоставку();
	
	Если НаименованиеОперации = "" Тогда
		НаименованиеОперации = НСтр("ru = 'Отправка заказа на доставку грузоперевозчику'");
	КонецЕсли;
	
	ПараметрыОперации.НаименованиеОперации = НаименованиеОперации;
	ПараметрыОперации.ВыводитьОкноОжидания = Истина;
	ПараметрыОперации.Вставить("ЗакрытьПослеЗавершенияОперации", ЗакрытьПослеЗавершенияОперации);
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьЗаказНаДоставку(ПлатнаяОтмена = Ложь)
	
	ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
	ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыОтменитьЗаказНаДоставку();
	ПараметрыОперации.НаименованиеОперации = НСтр("ru = 'Отмена заказа на доставку.'");
	ПараметрыОперации.ВыводитьОкноОжидания = Истина;
	ПараметрыОперации.Вставить("ПлатнаяОтмена", Ложь);
	
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаказНаДоставку()
	
	ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
	ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыОбновитьЗаказНаДоставку();
	ПараметрыОперации.НаименованиеОперации = НСтр("ru = 'Обновление данных по заказу на доставку.'");
	ПараметрыОперации.ВыводитьОкноОжидания = Истина;
	
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыОперацииПолучитьДоступныеДляИзмененияРеквизиты(Знач ВыводитьОкноОжидания = Неопределено)

	ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
	ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьДоступныеДляИзмененияРеквизиты();
	ПараметрыОперации.НаименованиеОперации = НСтр("ru = 'Получение реквизитов для изменения.'");
	Если ТипЗнч(ВыводитьОкноОжидания) = Тип("Булево") Тогда
		ПараметрыОперации.ВыводитьОкноОжидания = ВыводитьОкноОжидания;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ПараметрыОповещения =  Новый Структура(
		"ИмяПроцедуры, Параметры", "ПолучитьДоступныеДляИзмененияРеквизитыЗавершение", ДополнительныеПараметры);
	ПараметрыОперации.Вставить("ПараметрыОповещения", ПараметрыОповещения);
	
	Возврат ПараметрыОперации;

КонецФункции

&НаКлиенте
Процедура ПолучитьДоступныеДляИзмененияРеквизитыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РедактированиеРеквизитовАктивацияНаФорме(Результат.АдресРезультата);
	ЭтотОбъект[ДополнительныеПараметры.ИмяФоновогоЗадания] = Неопределено;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСостояниеОпцииКурьерикаВФоне()
	
	ПараметрыОперации = Новый Структура("ВыводитьОкноОжидания");
	ПараметрыОперации.Вставить("ИмяПроцедуры", СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьСостояниеОпцииКурьерика());
	ПараметрыОперации.Вставить("НаименованиеОперации", НСтр("ru = 'Получение информации по подписке.'"));
	ПараметрыОперации.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	
	Возврат ВыполнитьЗапросВФоне(Ложь, ПараметрыОперации);
	
КонецФункции

#КонецОбласти

#Область ЗагрузитьРезультаты

&НаСервере
Процедура ЗагрузитьРезультатСозданияЗаказа(АдресРезультата, ОперацияВыполнена)
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
			Если Результат.Свойство("Идентификатор") Тогда
				Результат.Свойство("Идентификатор", ИдентификаторЗаказа);
				ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат);
				
				КонтрольныйЭлемент = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаОсновное;
				Если РежимМастера = СервисДоставкиКлиентСервер.РежимМастераЗарегистрирован()
					И КонтрольныйЭлемент.Родитель.ТекущаяСтраница = КонтрольныйЭлемент Тогда
					ИзменениеЗарегистрированногоЗаказаЗавершение();
					Если Не ПустаяСтрока(Результат.ЧастичныйОтказИзменений) Тогда
						ОбщегоНазначения.СообщитьПользователю(Результат.ЧастичныйОтказИзменений);
						ПолучитьЗаказНаДоставкуВФоне();
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				ОперацияВыполнена = Ложь;
			КонецЕсли;
			
			Если ОперацияВыполнена Тогда
				Если РежимМастера = СервисДоставкиКлиентСервер.РежимМастераНовый() Тогда
					РежимМастера = СервисДоставкиКлиентСервер.РежимМастераЧерновик();
				КонецЕсли;
				ДоступнаОтмена = Истина;
				СформироватьЗаголовокФормы();
				ТекущаяСтраница = Элементы.ГруппаСтраницы.ТекущаяСтраница;
				УстановитьВидимостьДоступность();
				СформироватьСтрокуПредставлениеСостоянияЗаказаФормы();
				Элементы.ГруппаСтраницы.ТекущаяСтраница = ТекущаяСтраница;
			КонецЕсли;
			
			Если Результат.Свойство("Ошибки") Тогда
			
				Если ТипЗнч(Результат.Ошибки) = Тип("Массив") Тогда
					
					Для Каждого ТекущаяОшибка Из Результат.Ошибки Цикл
						
						ОбщегоНазначения.СообщитьПользователю(ТекущаяОшибка);
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			ОперацияВыполнена = Ложь;
		КонецЕсли;
		
		УдалитьИзВременногоХранилища(АдресРезультата);
		
	Иначе
		ОперацияВыполнена = Ложь;
	КонецЕсли;
	
	Если ОперацияВыполнена Тогда
		СервисДоставкиПереопределяемый.ОбработатьРезультатЗапросаСозданияИзмененияЗаказаНаДоставку(Результат, ДокументыОснования);
		
		Если ТоварныйСоставОбновлен Тогда
			
			ТоварныйСоставОбновлен = Ложь;
			
			РегистрыСведений.ДанныеЗаказовСервисДоставки.УстановитьПризнакИзмененияЗаказов(
				Новый Структура("Идентификатор", ИдентификаторЗаказа),
				Ложь);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатОформленияЗаказа(АдресРезультата, РезультатОформленияЗаказаНаДоставку)
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			
			Если Результат.Свойство("ДатаСозданияЗаказа") Тогда
				ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат);
				РежимМастера = СервисДоставкиКлиентСервер.РежимМастераЗарегистрирован();
				СформироватьЗаголовокФормы();
				УстановитьВидимостьДоступность();
				СформироватьСтрокуПредставлениеСостоянияЗаказаФормы();
			Иначе
				РезультатОформленияЗаказаНаДоставку = 0;
			КонецЕсли;
			
			Если Результат.Свойство("Ошибки") Тогда
				
				Если ТипЗнч(Результат.Ошибки) = Тип("Массив") Тогда
					
					Для Каждого ТекущаяОшибка Из Результат.Ошибки Цикл
						
						ОбщегоНазначения.СообщитьПользователю(ТекущаяОшибка);
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			РезультатОформленияЗаказаНаДоставку = 0;
		КонецЕсли;
		
		УдалитьИзВременногоХранилища(АдресРезультата);
		
	Иначе
		РезультатОформленияЗаказаНаДоставку = 0;
	КонецЕсли;
	
	Если РезультатОформленияЗаказаНаДоставку = 1 Тогда
		СервисДоставкиПереопределяемый.ОбработатьРезультатЗапросаОформленияЗаказаНаДоставку(Результат, ДокументыОснования);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатОтменыЗаказа(АдресРезультата, РезультатВыполнения, СуммаОтмены)
	
	РезультатВыполнения = 0;
	ОперацияВыполнена = Истина;
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		Если ЗначениеЗаполнено(Результат) 
			И ТипЗнч(Результат) = Тип("Структура") Тогда
			
			Если Результат.Свойство("Идентификатор") Тогда
				
				Если Результат.Свойство("ДокументОтменен")
					И Результат.ДокументОтменен = Истина Тогда
					РезультатВыполнения = 1;
					ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат);
					УстановитьВидимостьДоступность();
					СформироватьСтрокуПредставлениеСостоянияЗаказаФормы();
				ИначеЕсли Результат.Свойство("ДоступнаПлатнаяОтмена")
					И Результат.ДоступнаПлатнаяОтмена = Истина Тогда
					РезультатВыполнения = 2;
					СуммаОтмены = Результат.СуммаПлатнойОтмены;
				ИначеЕсли Результат.Свойство("ДоступнаОтмена")
					И Не Результат.ДоступнаОтмена Тогда
					РезультатВыполнения = 3;
				КонецЕсли;
			Иначе
				СервисДоставки.ОбработатьБлокОшибок(Результат, ОперацияВыполнена);
			КонецЕсли;
			
		Иначе
			ОперацияВыполнена = Ложь;
		КонецЕсли;
		
		УдалитьИзВременногоХранилища(АдресРезультата);
		
	Иначе
		ОперацияВыполнена = Ложь;
	КонецЕсли;
	
	Если ОперацияВыполнена Тогда
		СервисДоставкиПереопределяемый.ОбработатьРезультатЗапросаОтменыЗаказаНаДоставку(Результат, ДокументыОснования);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатОбновленияЗаказа(АдресРезультата, РезультатВыполнения)
	
	ОперацияВыполнена = Истина;
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
			Если Результат.Свойство("ДатаОбновления") Тогда
				ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат.Данные);
				УстановитьОформлениеИсполнителя(Результат.Данные);
			Иначе
				ОперацияВыполнена = Ложь;
			КонецЕсли;
			
			Если Результат.Свойство("ЗаказОбновлен") Тогда
				РезультатВыполнения = Результат.ЗаказОбновлен;
			КонецЕсли;
			
			Если Не РезультатВыполнения 
				И Результат.Свойство("Данные") Тогда
				ДанныеЗаказа = Результат.Данные;
				ВерсияПолученныхДанных = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(ДанныеЗаказа);
				РезультатВыполнения = ВерсияПолученныхДанных <> ВерсияДанных;
			КонецЕсли;
			
			Если Результат.Свойство("Ошибки") Тогда
			
				Если ТипЗнч(Результат.Ошибки) = Тип("Массив") Тогда
					
					Для Каждого ТекущаяОшибка Из Результат.Ошибки Цикл
						
						ОбщегоНазначения.СообщитьПользователю(ТекущаяОшибка);
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			ОперацияВыполнена = Ложь;
		КонецЕсли;
		
		УдалитьИзВременногоХранилища(АдресРезультата);
		
	Иначе
		ОперацияВыполнена = Ложь;
	КонецЕсли;
	
	Если ОперацияВыполнена Тогда
		СервисДоставкиПереопределяемый.ОбработатьРезультатЗапросаОбновленияЗаказаНаДоставку(Результат, ДокументыОснования);
		Если Не РезультатВыполнения Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Текущая версия заказа является актуальной.'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатПолученияЗаказаНаДоставку(АдресРезультата, ДанныеОбновлены = Истина)
	
	Если РежимМастера = СервисДоставкиКлиентСервер.РежимМастераЗарегистрирован() Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОсновное;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			
			Если Результат.Свойство("Данные") Тогда
				
				ДанныеЗаказа = Результат.Данные;
				ВерсияДанных = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(ДанныеЗаказа);
				
				Если ЗначениеЗаполнено(ДанныеЗаказа.ДатаДоставки) Тогда
					ДатаДоставки = ДанныеЗаказа.ДатаДоставки;
				Иначе
					ДатаДоставки = ДанныеЗаказа.ДатаОтгрузки;
				КонецЕсли;
				
				РежимМастера = ?(ДанныеЗаказа.СостояниеИдентификатор = 0, 
					СервисДоставкиКлиентСервер.РежимМастераЧерновик(), 
					СервисДоставкиКлиентСервер.РежимМастераЗарегистрирован());
					
				ОбработатьПараметры(ДанныеЗаказа);
				
				ВариантВремениОтгрузки = ДанныеЗаказа.ВариантВремениОтгрузки;
				
				КоллекцияВалюта = ДанныеЗаказа.Валюта; // Структура
				ВалютаЗаказа = КоллекцияВалюта.Ссылка;
				ВалютаКОплате = ВалютаЗаказа;
				ВалютаКОплатеДополнительно = ВалютаЗаказа;
				
				Если ДанныеЗаказа.Получатель.Свойство("Контрагент")
					И ЗначениеЗаполнено(ДанныеЗаказа.Получатель.Контрагент) Тогда
						
					ПолучательКонтрагентИНН = ДанныеЗаказа.Получатель.Контрагент.ИНН;
					ПолучательКонтрагентКПП = ДанныеЗаказа.Получатель.Контрагент.КПП;
					ПолучательКонтрагентЭтоОрганизация = Метаданные.ОпределяемыеТипы.ОрганизацияСервисДоставки.Тип.СодержитТип(ТипЗнч(ПолучательКонтрагентСсылка));
						
				КонецЕсли;
				
				УстановитьОформлениеИсполнителя(ДанныеЗаказа);
				
				ПлательщикРоль = ДанныеЗаказа.ПлательщикРоль;
				
				Элементы.ДекорацияСостояниеПредставление.Заголовок = ДанныеЗаказа.Состояние;
				Комментарий = ДанныеЗаказа.ДополнительнаяИнформация;
				
				Если ДанныеЗаказа.Свойство("Товары") Тогда
					ТоварныйСостав.Загрузить(ДанныеЗаказа.Товары);
				КонецЕсли;
				
				ЗаполнитьЗначенияСписковВыбораКонтактнойИнформации();
				
				ПараметрыОтбораЗаказов = Новый Структура;
				ПараметрыОтбораЗаказов.Вставить("Организация", ОрганизацияБизнесСетиСсылка);
				ПараметрыОтбораЗаказов.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
				
				ЗаказыКПовторнойОтправке =
					РегистрыСведений.ДанныеЗаказовСервисДоставки.ЗаказыКПовторнойОтправке(ПараметрыОтбораЗаказов);
				
				ТребуетсяПовторнаяОтправка = ЗаказыКПовторнойОтправке.НайтиПоЗначению(ИдентификаторЗаказа) <> Неопределено;
				
			КонецЕсли;
			
		КонецЕсли;
		
		УдалитьИзВременногоХранилища(АдресРезультата);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатПолученияСпискаПунктовВыдачиКлиента(АдресРезультата)
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		Если ЗначениеЗаполнено(Результат)
			И ТипЗнч(Результат) = Тип("Структура") Тогда
			
			Если Результат.Свойство("Список") Тогда
				
				СоответствиеСкладов.Очистить();
				
				ЭлементыСписка = Результат.Список;
				СписокВыбора = Элементы.ПунктВыдачи.СписокВыбора;
				
				Для Каждого ТекущийЭлементСписка Из ЭлементыСписка Цикл
					
					НоваяСтрока = СоответствиеСкладов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущийЭлементСписка);
					
					Если СписокВыбора.НайтиПоЗначению(НоваяСтрока.Идентификатор) = Неопределено Тогда
						
						СписокВыбора.Добавить(НоваяСтрока.Идентификатор,
							СтрШаблон("%1%2%3",
								НоваяСтрока.Наименование,
								?(ЗначениеЗаполнено(НоваяСтрока.Склад), " (" +  НоваяСтрока.Склад + ")", ""),
								?(НоваяСтрока.ИспользоватьПоУмолчанию, " - " + НСтр("ru = 'по умолчанию'"), "")));
								
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				ОперацияВыполнена = Ложь;
			КонецЕсли;
			
			СервисДоставки.ОбработатьБлокОшибок(Результат, ОперацияВыполнена);
		
		Иначе
			ОперацияВыполнена = Ложь;
		КонецЕсли;
		
		УдалитьИзВременногоХранилища(АдресРезультата);
		
	Иначе
		ОперацияВыполнена = Ложь;
	КонецЕсли;
	
	Склад = Неопределено;
	
	Для Каждого ЭлементСписка Из ДокументыОснования Цикл
		
		Если ЗначениеЗаполнено(ЭлементСписка.Значение) Тогда
			
			Если ЭлементСписка.Значение.Метаданные().Реквизиты.Найти("Склад") <> Неопределено Тогда
				//@skip-check wrong-string-literal-content
				Склад = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементСписка.Значение, "Склад");
			ИначеЕсли ЭлементСписка.Значение.Метаданные().Реквизиты.Найти("СкладОтправитель") <> Неопределено Тогда
				//@skip-check wrong-string-literal-content
				Склад = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементСписка.Значение, "СкладОтправитель");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Склад) Тогда
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Склад) Тогда
		ПунктВыдачиКлиентаИдентификатор = СервисДоставки.ПолучитьПунктВыдачиКлиента(ТипГрузоперевозки, Склад);
	КонецЕсли;
	
	Элементы.ПунктВыдачи.Доступность = Истина;
	Элементы.ПунктВыдачи.ПодсказкаВвода = НСтр("ru = 'Выберите пункт выдачи'");
	Элементы.ПунктВыдачи.ЦветФона = ЦветаСтиля.ЦветФонаПоля;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатПолучитьСостояниеОпцииКурьерика(АдресРезультата)
	
	ОперацияВыполнена = Ложь;
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		
		Если ЗначениеЗаполнено(Результат)
			И ТипЗнч(Результат) = Тип("Структура") Тогда
			
			Если Результат.Свойство("ОпцияДоступна") Тогда
				
				ОпцияДоступнаКурьерика = Результат.ОпцияДоступна;
				КомментарийОпцияКурьерика = Результат.Комментарий;
				БалансОпцияКурьерика = Результат.Баланс;
				СрокДействияОпцияКурьерика = ПрочитатьДатуJSON(Результат.СрокДействия, ФорматДатыJSON.ISO);
				
				СервисДоставкиВызовСервера.УстановитьЗаголовокОпцияКурьерика(ЭтотОбъект);
				УстановитьДоступностьЭлементовПоЗначениюОпции();
				
				ОперацияВыполнена = Истина;
				
			КонецЕсли;
			
			СервисДоставки.ОбработатьБлокОшибок(Результат, ОперацияВыполнена);
			
		КонецЕсли;
		
		УдалитьИзВременногоХранилища(АдресРезультата);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РедактированиеРеквизитовАктивацияНаФорме(АдресРезультата)

	ЕстьОшибкиПолученияДанных = Истина;
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
			Если Результат.Свойство("ДоступностьРеквизитов") Тогда
				
				РазрешитьИзменениеРеквизитов(Результат);
				ЕстьОшибкиПолученияДанных = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьОшибкиПолученияДанных Тогда
		
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось получить перечень изменяемых реквизитов.
			|Возможно для работы с перевозчиками требуется авторизация. Проверьте настройки перевозчиков.'"));
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РедактированиеРеквизитовЗаказа

&НаСервере
Процедура РазрешитьИзменениеРеквизитов(ДоступныеДляИзмененияРеквизиты)
	
	КлючиРеквизитовДляИзменения.Очистить();
	
	ДоступныеЭлементы = Новый Массив;
	
	ДоступностьРеквизитов = Новый Структура;
	Если ТипЗнч(ДоступныеДляИзмененияРеквизиты) = Тип("Структура")
		И ДоступныеДляИзмененияРеквизиты.Свойство("ДоступностьРеквизитов", ДоступностьРеквизитов) Тогда
		СписокДоступных = ЭлементыФормыДляИзменения(ДоступностьРеквизитов);
		Для каждого ТекущийЭлементФормы Из СписокДоступных Цикл
			ТекЭлемент = Элементы.Найти(ТекущийЭлементФормы.Значение);
			Если ТекЭлемент <> Неопределено Тогда
				ДоступныеЭлементы.Добавить(ТекЭлемент);
			КонецЕсли;
		КонецЦикла;
		ДоступныеЭлементы = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ДоступныеЭлементы);
	Иначе
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось получить перечень изменяемых реквизитов.
			|Возможно для работы с перевозчиками требуется авторизация. Проверьте настройки перевозчиков.'"));
		Возврат;
	КонецЕсли;
	
	Если ДоступныеЭлементы.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Нет реквизитов, доступных для редактирования.'"));
		Возврат;
	КонецЕсли;
	
	Для каждого ТекущийЭлементФормы Из ДоступныеЭлементы Цикл
		ПодчиненныеПоляВводаТолькоПросмотр(ТекущийЭлементФормы, Ложь);
	КонецЦикла;
	
	Для каждого ТекущийРеквизитФормы Из ДоступностьРеквизитов Цикл
		Если ТекущийРеквизитФормы.Значение Тогда
			КлючиРеквизитовДляИзменения.Добавить(ТекущийРеквизитФормы.Ключ);
		КонецЕсли;
	КонецЦикла;
	РежимИзмененияРеквизитов(КлючиРеквизитовДляИзменения.Количество() > 0);
	
КонецПроцедуры

&НаСервере
Процедура РежимИзмененияРеквизитов(Знач Разрешено)
	
	Если НЕ Разрешено Тогда
		КлючиРеквизитовДляИзменения.Очистить();
	КонецЕсли;
	
	УстановитьДоступноеДействие(ИмяДействияПриИзменении(),Разрешено, Разрешено);
	
	ЦелеваяСтраница = Элементы.ГруппаОсновное;

	Если Элементы.ГруппаСтраницы.ТекущаяСтраница <> ЦелеваяСтраница Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = ЦелеваяСтраница;
	КонецЕсли;
	
	СформироватьСтрокуПредставлениеСостоянияЗаказаФормы();
	
КонецПроцедуры
 
&НаКлиентеНаСервереБезКонтекста
// Возвращаемое значение:
//	Структура:
//	*Ключ - Строка - ключ группы реквизитов для редактирования
//	*Значение - СписокЗначений:
//	**Значение - имя реквизита формы для разрешения
//	**Пометка - контроль заполнения связанного реквизита
Функция ГруппыРеквизитовПоКлючам()

	Результат = Новый Структура;
	
	// ПолучательАдрес
	ТекЭлементыФормы = Новый СписокЗначений;
	ТекЭлементыФормы.Добавить("ПолучательАдрес",, Истина);
	Результат.Вставить("ПолучательАдрес", ТекЭлементыФормы);
	
	// ПолучательКонтактнаяИнформация
	ТекЭлементыФормы = Новый СписокЗначений;
	ТекЭлементыФормы.Добавить("ПолучательКонтактноеЛицо",, Истина);
	ТекЭлементыФормы.Добавить("ПолучательКонтактноеЛицоТелефон",, Истина);
	Результат.Вставить("ПолучательКонтактнаяИнформация", ТекЭлементыФормы);
	
	// ПолучательКонтрагент
	ТекЭлементыФормы = Новый СписокЗначений;
	ТекЭлементыФормы.Добавить("ПолучательКонтрагент",, Истина);
	Результат.Вставить("ПолучательКонтрагент", ТекЭлементыФормы);
	
	// ПолучательДатаВремяДоставки
	ТекЭлементыФормы = Новый СписокЗначений;
	ТекЭлементыФормы.Добавить("ГруппаДатаВремяДоставки");
	ТекЭлементыФормы.Добавить("ВариантВремениОтгрузки");
	ТекЭлементыФормы.Добавить("ДатаДоставки");
	ТекЭлементыФормы.Добавить("ВремяДоставкиС");
	ТекЭлементыФормы.Добавить("ВремяДоставкиПо");
	Результат.Вставить("ПолучательДатаВремяДоставки", ТекЭлементыФормы);
	
	Возврат Результат;
	
КонецФункции 

&НаСервере
Процедура ДоступныеДляИзмененияРеквизитыТолькоПросмотр(Знач ТолькоПросмотр)
	
	Элементы.Комментарий.ТолькоПросмотр = ТолькоПросмотр;
	
	ПодчиненныеПоляВводаТолькоПросмотр(Элементы.ГруппаРеквизиты, ТолькоПросмотр);
	
КонецПроцедуры

&НаСервере
Процедура ПодчиненныеПоляВводаТолькоПросмотр(ЭлементФормы, Знач ТолькоПросмотр)
	
	ЦветРедактирования = РедактируемыйРеквизитЦветФона;
	ЦветНейтральный = Новый Цвет();
	
	КоллекцияПолей = Новый Массив;
	ПолучитьПодчиненныеЭлементыФормы(КоллекцияПолей, ЭлементФормы, Тип("ПолеФормы"));
	ПолучитьПодчиненныеЭлементыФормы(КоллекцияПолей, ЭлементФормы, Тип("ДекорацияФормы"));
	
	Для каждого ТекущийЭлементФормы Из КоллекцияПолей Цикл
		Если ТипЗнч(ТекущийЭлементФормы) = Тип("ПолеФормы") Тогда
			ТекущийЭлементФормы.ТолькоПросмотр = ТолькоПросмотр;
			Если НЕ ТолькоПросмотр Тогда
				ТекущийЭлементФормы.ЦветФона = ЦветРедактирования;
			ИначеЕсли ТолькоПросмотр И ТекущийЭлементФормы.ЦветФона = ЦветРедактирования Тогда
				ТекущийЭлементФормы.ЦветФона = ЦветНейтральный;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ТекущийЭлементФормы) = Тип("ДекорацияФормы") Тогда
			ТекущийЭлементФормы.Доступность = НЕ ТолькоПросмотр;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
 
&НаКлиентеНаСервереБезКонтекста
// Получает коллекцию подчиненных элементов определенного типа (кроме групп) 
// Параметры:
// 	КоллекцияЭлементов - Массив из ЭлементыФормы -
//	КорневойЭлемент - ЭлементФормы - исходный элемент формы, внутри которого нужно искать
//	ТипЭлемента - ТипЗначения - тип искомых элементов. Негрупповые элементы.
Процедура ПолучитьПодчиненныеЭлементыФормы(КоллекцияЭлементов, Знач КорневойЭлемент, Знач ТипЭлемента)
	
	Если ТипЗнч(КоллекцияЭлементов) <> Тип("Массив") Тогда
		КоллекцияЭлементов = Новый Массив;
	КонецЕсли;
	
	Если ТипЗнч(КорневойЭлемент) = ТипЭлемента Тогда
	
		КоллекцияЭлементов.Добавить(КорневойЭлемент);
		
	ИначеЕсли ТипЗнч(КорневойЭлемент) = Тип("ГруппаФормы") Тогда
	
		Для каждого ТекущийЭлементФормы Из КорневойЭлемент.ПодчиненныеЭлементы Цикл
			
			Если ТипЗнч(ТекущийЭлементФормы) = Тип("ГруппаФормы") Тогда
				ПолучитьПодчиненныеЭлементыФормы(КоллекцияЭлементов, ТекущийЭлементФормы, ТипЭлемента);
			ИначеЕсли ТипЗнч(ТекущийЭлементФормы) = ТипЭлемента Тогда
				КоллекцияЭлементов.Добавить(ТекущийЭлементФормы);
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьГруппуДоступныхДействий(Элементы)

	Возврат Элементы.ГруппаДоступныеДействия;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
// Возвращаемый результат:
// СписокЗначений:
//	*Значение - Строка - имя элемента формы, разрешенного к редактированию
//	*Пометка - Булево - флаг обязательности заполнения связанного реквизита формы
Функция ЭлементыФормыДляИзменения(ДоступныеГруппыРеквизитов)
	
	Результат = Новый СписокЗначений;
	
	СтруктураГрупп = ГруппыРеквизитовПоКлючам();
	
	Для каждого ТекущийЭлементФормы Из ДоступныеГруппыРеквизитов Цикл
		
		Если НЕ ТекущийЭлементФормы.Значение Тогда 
			Продолжить;
		КонецЕсли;
		
		ГруппыРеквизитов = Новый СписокЗначений;
		Если СтруктураГрупп.Свойство(ТекущийЭлементФормы.Ключ, ГруппыРеквизитов) Тогда
			Для каждого ЭлемСписка Из ГруппыРеквизитов Цикл
				Если Результат.НайтиПоЗначению(ЭлемСписка.Значение) = Неопределено Тогда
					Результат.Добавить(ЭлемСписка.Значение,, ЭлемСписка.Пометка);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
// Возвращаемый результат:
// СписокЗначений:
//	*Значение - Строка - имя реквизита формы
//	*Представление - Строка - синоним реквизита формы
Функция РеквизитыФормыДляИзменения(ДоступныеГруппыРеквизитов)
	
	Результат = Новый СписокЗначений;
	
	КонтрольныеРеквизитыФормы = ЭлементыФормыДляИзменения(ДоступныеГруппыРеквизитов);
	ВсеРеквизиты = ПолучитьРеквизиты();
	
	Для каждого ОписаниеЭлемента Из КонтрольныеРеквизитыФормы Цикл
		
		Если НЕ ОписаниеЭлемента.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		ТекЭлементФормы = Элементы.Найти(ОписаниеЭлемента.Значение);
		Если ТекЭлементФормы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизита = ТекЭлементФормы.ПутьКДанным;
		
		Для каждого ЭлемРеквизит Из ВсеРеквизиты Цикл
			Если ЭлемРеквизит.Имя = ИмяРеквизита Тогда
				РеквизитПредставление = ?(ПустаяСтрока(ЭлемРеквизит.Заголовок),ИмяРеквизита,ЭлемРеквизит.Заголовок);
				Результат.Добавить(ИмяРеквизита, РеквизитПредставление);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьГруппуДействийПоИмениДействия(Знач ИмяДействия)
	
	ПараметрыДействия = Неопределено; // Структура
	Если НастройкиДоступныхДействий.Свойство(ИмяДействия, ПараметрыДействия) Тогда
		
		Возврат Элементы[ПараметрыДействия.ИмяЭлемента];
		
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

&НаСервере
Процедура УстановитьВидимостьДоступныхДействий()
	
	ГруппаДоступныеДействия = ПолучитьГруппуДоступныхДействий(Элементы);
	ГруппаДействияПриИзменении = ПолучитьГруппуДействийПоИмениДействия(ИмяДействияПриИзменении());
	
	// Скорректируем настройки (устраним возможные противоречия)
	ЭлементОтменитьЗаказ = НастройкиДоступныхДействий[ИмяДействияОтменитьЗаказ()];
	ЭлементОтменитьЗаказ.Видимость = ДоступнаОтмена;
	ЭлементОтменитьЗаказ.Доступность = ДоступнаОтмена;
	
	Если ДоступноРедактированиеПослеОформления Тогда
		ВПроцессеИзменения = КлючиРеквизитовДляИзменения.Количество() > 0;
		НастройкиДоступныхДействий[ИмяДействияИзменить()].Видимость = НЕ ВПроцессеИзменения;
		НастройкиДоступныхДействий[ИмяДействияИзменить()].Доступность = НЕ ВПроцессеИзменения;
		НастройкиДоступныхДействий[ИмяДействияПриИзменении()].Видимость = ВПроцессеИзменения;
		НастройкиДоступныхДействий[ИмяДействияПриИзменении()].Доступность = ВПроцессеИзменения;
	Иначе
		НастройкиДоступныхДействий[ИмяДействияИзменить()].Видимость = Ложь;
		НастройкиДоступныхДействий[ИмяДействияПриИзменении()].Видимость = Ложь;
	КонецЕсли;
	
	Для Каждого ТекущееДействие Из НастройкиДоступныхДействий Цикл
		ЗаполнитьЗначенияСвойств(Элементы[ТекущееДействие.Значение["ИмяЭлемента"]], ТекущееДействие.Значение, "Видимость, Доступность");
	КонецЦикла;
	
	ЕстьВидимыеПодчиненные = Ложь;
	Для каждого ТекущееДействие Из ГруппаДоступныеДействия.ПодчиненныеЭлементы Цикл
		Если ТекущееДействие.Видимость Тогда
			ЕстьВидимыеПодчиненные = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ГруппаДоступныеДействия.Видимость = ЕстьВидимыеПодчиненные
		И Не ГруппаДействияПриИзменении.Видимость;
	
	Элементы.Обновить.Доступность = Не ГруппаДействияПриИзменении.Видимость;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступноеДействие(Знач ИмяДействия, Знач Видимость, Знач Доступность)
	
	ТекНастройка = Неопределено; // Структура
	Если Не НастройкиДоступныхДействий.Свойство(ИмяДействия, ТекНастройка) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Элементы[ТекНастройка.ИмяЭлемента], ТекНастройка);
	
КонецПроцедуры
 
// Возвращаемое значение:
//	Структура
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьВсеДоступныеДействия()
	
	Результат = Новый Структура;
	ПараметрыДействияШаблон = Новый Структура("ИмяЭлемента, Видимость, Доступность", "", Ложь, Ложь);
	
	КлючДействия = ИмяДействияИзменить();
	ПараметрыДействия = СкопироватьРекурсивно(ПараметрыДействияШаблон);
	ПараметрыДействия.Видимость = Истина;
	ПараметрыДействия.Доступность = Истина;
	Результат.Вставить(КлючДействия, ПараметрыДействия);
	
	КлючДействия = ИмяДействияОтменитьЗаказ();
	ПараметрыДействия = СкопироватьРекурсивно(ПараметрыДействияШаблон);
	Результат.Вставить(КлючДействия, ПараметрыДействия);
	
	КлючДействия = ИмяДействияПриИзменении();
	ПараметрыДействия = СкопироватьРекурсивно(ПараметрыДействияШаблон);
	Результат.Вставить(КлючДействия, ПараметрыДействия);
	
	Для Каждого ТекущийЭлемент Из Результат Цикл
		
		Если Не ЗначениеЗаполнено(ТекущийЭлемент.Значение["ИмяЭлемента"]) Тогда
			
			ТекущийЭлемент.Значение.Вставить("ИмяЭлемента", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"Группа%1",
				ТекущийЭлемент.Ключ));
				
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяДействияИзменить()
	
	Возврат "ДоступныеДействияИзменить";
	
КонецФункции
 
&НаКлиентеНаСервереБезКонтекста
Функция ИмяДействияОтменитьЗаказ()
	
	Возврат "ДоступныеДействияОтменитьЗаказ";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяДействияПриИзменении()
	
	Возврат "ДействияПриИзменении";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СкопироватьРекурсивно(Источник)

	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		
		Возврат ОбщегоНазначения.СкопироватьРекурсивно(Источник);
		
	#Иначе
		
		Возврат ОбщегоНазначенияКлиент.СкопироватьРекурсивно(Источник);
		
	#КонецЕсли

КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ЗадатьВопросДобавлениеКомментария(ТекстКомментария)
	
	ОбработчикОповещения = Новый ОписаниеОповещения("УстановитьКомментарийИзКонтактнойИнформации",
		ЭтотОбъект,
		Новый Структура("КомментарийКАдресу", ТекстКомментария));
	
	ПоказатьВопрос(ОбработчикОповещения,
		СтрШаблон(НСтр("ru = 'В выбранном адресе содержится комментарий. Добавить его в заказ?
			|
			|Комментарий: ""%1""'"),
			СокрЛП(ТекстКомментария)),
		РежимДиалогаВопрос.ДаНет,,
		КодВозвратаДиалога.Нет,
		НСтр("ru = 'Добавление комментария'"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКомментарийИзКонтактнойИнформации(Значение, ДополнительныеПараметры) Экспорт
	
	Если Значение = КодВозвратаДиалога.Да Тогда
		
		Комментарий = СокрЛП(Комментарий + Символы.ПС + ДополнительныеПараметры.КомментарийКАдресу);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КомментарийИзКонтактнойИнформации(ЗначениеКонтактнойИнформации)
	
	Результат = УправлениеКонтактнойИнформацией.КомментарийКонтактнойИнформации(ЗначениеКонтактнойИнформации);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеКонтактнойИнформации(ЗначениеКонтактнойИнформации)
	
	Результат = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(ЗначениеКонтактнойИнформации);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура УстановитьКонтрагентаВСвободнойФорме(ОчиститьРеквизиты = Ложь)
	
	Если ОчиститьРеквизиты Тогда
		ОчиститьРеквизит(Элементы.ПолучательКонтрагент, Ложь);
	КонецЕсли;
	
	ПолучательКонтрагентНаименование = СервисДоставкиКлиентСервер.ПолучательВСвободнойФорме();
	
	Элементы.ПолучательКонтактноеЛицо.КнопкаВыбора = Ложь;
	Элементы.ПолучательКонтрагент.ЦветТекста = ЦветТекстаПодсказки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПараметрыОтбораКонтактногоЛицаОрганизации(ПараметрыОтбора, КонтрагентСсылка)
	
	Если ЗначениеЗаполнено(КонтрагентСсылка) Тогда
		СервисДоставкиПереопределяемый.ЗаполнитьПараметрыОтбораКонтактногоЛицаОрганизации(ПараметрыОтбора,
			КонтрагентСсылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПараметрыОтбораКонтактногоЛицаКонтрагента(ПараметрыОтбора, КонтрагентСсылка)
	
	Если ЗначениеЗаполнено(КонтрагентСсылка) Тогда
		СервисДоставкиПереопределяемый.ЗаполнитьПараметрыОтбораКонтактногоЛицаКонтрагента(ПараметрыОтбора,
			КонтрагентСсылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		СоздатьИзменитьЗаказНаДоставку(, Истина);
		
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		
		Модифицированность = Ложь;
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменениеЗарегистрированногоЗаказаЗавершение()
	
	РежимИзмененияРеквизитов(Ложь);
	ДоступныеДляИзмененияРеквизитыТолькоПросмотр(Истина);
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформациюПоТоварномуСоставу(Значение, ДополнительныеПараметры) Экспорт
	
	ПриИзмененииРеквизита("ТоварныйСостав");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииРеквизита(ИмяРеквизита, ИнтерактивноеДействие = Истина)
	
	Модифицированность = Истина;
	
	Если ИмяРеквизита = "ПунктВыдачи" Тогда
		
		Если ЗначениеЗаполнено(ПунктВыдачиКлиентаИдентификатор) Тогда
			
			СтруктураПоиска = Новый Структура("Идентификатор", ПунктВыдачиКлиентаИдентификатор);
			ПоискСтрок = СоответствиеСкладов.НайтиСтроки(СтруктураПоиска);
			Если ПоискСтрок.Количество() > 0 Тогда
				АдресПунктаВыдачи = ПоискСтрок.Получить(0).Адрес;
			КонецЕсли;
			
		Иначе
			
			АдресПунктаВыдачи = "";
			
		КонецЕсли;
		
		Элементы.ПунктВыдачи.Подсказка = АдресПунктаВыдачи;
		
	ИначеЕсли ИмяРеквизита = "ВариантВремениОтгрузки" Тогда
		
		ДоставитьКакМожноСкорее = ВариантВремениОтгрузки = 0;
		
		Элементы.ДатаДоставки.Доступность = Не ДоставитьКакМожноСкорее;
		Элементы.ВремяДоставкиС.Доступность = Не ДоставитьКакМожноСкорее;
		Элементы.ВремяДоставкиПо.Доступность = Не ДоставитьКакМожноСкорее;
		
		Если ИнтерактивноеДействие
			И ДоставитьКакМожноСкорее Тогда
			
			ДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
			Если Час(ДатаСеанса) > 22 Тогда
				ДатаСеанса = НачалоДня(ДатаСеанса + 86400);
			КонецЕсли;
			
			ДатаДоставки = ДатаСеанса;
			БлижайшаяДатаНачала = ДатаСеанса + (15 - Минута(ДатаСеанса) % 15) * 60;
			ВремяДоставкиС = Дата(1, 1, 1) + Час(БлижайшаяДатаНачала) * 3600 + Минута(БлижайшаяДатаНачала) * 60;
			ВремяДоставкиПо = ВремяДоставкиС + 2 * 3600;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРеквизита = "ДатаДоставки" Тогда
		
		Если ДатаДоставки < НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса()) Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Дата доставки не может быть меньше текущей даты.'"),,
				"ДатаДоставки");
			
		КонецЕсли;
		
	ИначеЕсли ИмяРеквизита = "ДокументыОснования" Тогда
		
		Элементы.ДекорацияДокументыОснования.Заголовок = СтрШаблон(
			НСтр("ru = 'Основания (%1)'"),
			Формат(ДокументыОснования.Количество(), "ЧН="));
			
	ИначеЕсли ИмяРеквизита = "ТоварныйСостав" Тогда
		
		Элементы.ДекорацияТоварныйСостав.Заголовок = СтрШаблон(
			НСтр("ru = 'Товары (%1)'"),
			Формат(ТоварныйСостав.Количество(), "ЧН="));
			
	ИначеЕсли ИмяРеквизита = "СпособОплаты" Тогда
		
		УстановитьОформлениеРеквизитовОплаты();
			
		Если НаложенныйПлатежВидОплаты = 2 Тогда
			НаложенныйПлатежВидОплатыДополнительный = 1;
		ИначеЕсли НаложенныйПлатежВидОплаты = 1 Тогда
			НаложенныйПлатежВидОплатыДополнительный = 2;
		КонецЕсли;
		
	ИначеЕсли ИмяРеквизита = "СпособОплатыДополнительный" Тогда
		
		Если НаложенныйПлатежВидОплатыДополнительный = 2 Тогда
			НаложенныйПлатежВидОплаты = 1;
		ИначеЕсли НаложенныйПлатежВидОплатыДополнительный = 1 Тогда
			НаложенныйПлатежВидОплаты = 2;
		КонецЕсли;
	
	ИначеЕсли ИмяРеквизита = "СуммаДокумента" Тогда
		
		Если Элементы.ГруппаОплатаДополнительная.Видимость Тогда
			
			Если СуммаДокумента < СуммаНаложенногоПлатежа Тогда
				
				СуммаНаложенногоПлатежа = СуммаДокумента;
				Элементы.ГруппаОплатаДополнительная.Видимость = Ложь;
			КонецЕсли;
			
			СуммаНаложенногоПлатежаДополнительный = СуммаДокумента - СуммаНаложенногоПлатежа;
			
		Иначе
			
			СуммаНаложенногоПлатежа = ?(СуммаДокумента > СуммаНаложенногоПлатежа, СуммаНаложенногоПлатежа, СуммаДокумента);
			
		КонецЕсли;

	ИначеЕсли ИмяРеквизита = "КОплате" Тогда
		
		Если Элементы.ГруппаОплатаДополнительная.Видимость Тогда
			
			СуммаНаложенногоПлатежаДополнительный = СуммаДокумента - СуммаНаложенногоПлатежа;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРеквизита = "КОплатеДополнительно" Тогда
		
		СуммаНаложенногоПлатежа = СуммаДокумента - СуммаНаложенногоПлатежаДополнительный;
		
	ИначеЕсли ИмяРеквизита = "ТрекНомер" Тогда
		
		Элементы.ДекорацияСостояниеПредставление.Гиперссылка = ЗначениеЗаполнено(ТрекНомер);
		
	ИначеЕсли ИмяРеквизита = "Оплачен" Тогда
		
		Элементы.КОплате.Видимость = Не Оплачен;
		УстановитьОформлениеРеквизитовОплаты();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольЗаполненияРеквизитовОформленногоЗаказа(Отказ, ВыводитьПредупреждения = Истина)

	Если РежимМастера <> СервисДоставкиКлиентСервер.РежимМастераЗарегистрирован()
		Или КлючиРеквизитовДляИзменения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	СтруктураКлючей = Новый Структура;
	
	Для Каждого ТекущийКлючРеквизита Из КлючиРеквизитовДляИзменения Цикл
		СтруктураКлючей.Вставить(ТекущийКлючРеквизита.Значение, Истина);
	КонецЦикла;
	
	КонтролируемыеРеквизиты = РеквизитыФормыДляИзменения(СтруктураКлючей);
	
	ЕстьОшибки = Ложь;
	
	Если КлючиРеквизитовДляИзменения.НайтиПоЗначению("ПолучательКонтактнаяИнформация") <> Неопределено Тогда
		ПроверитьНомерТелефона("ПолучательКонтактноеЛицоТелефон", ЕстьОшибки, ВыводитьПредупреждения);
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ТекстОшибки = НСтр("ru = 'Поле ""%1"" не заполнено'");
	
	// Выполняем проверки заполнения реквизитов формы.
	Для Каждого ТекущийРеквизит Из КонтролируемыеРеквизиты Цикл
		
		Попытка
			ЗначениеРеквизита = ЭтотОбъект[ТекущийРеквизит.Значение];
		Исключение
			Продолжить;
		КонецПопытки;
		
		Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстОшибки,
				ТекущийРеквизит.Представление);
			
			Отказ = Истина;
			
			Если ВыводитьПредупреждения Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,ТекущийРеквизит.Значение);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

	ПроверитьИнтервалДоставки(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНомерТелефона(Префикс, ЕстьОшибки, ВыводитьПредупреждения = Истина)
	
	ИмяРеквизита = Префикс + "Представление";
	
	ИмяГруппы = "";
	Если СтрНайти(ИмяРеквизита, "Получатель") > 0 Тогда
		ИмяГруппы = "Получатель";
	КонецЕсли;
	
	Представление = ЭтотОбъект[ИмяРеквизита];
	
	Если Не ЗначениеЗаполнено(Представление) Тогда
		Возврат;
	КонецЕсли;
	
	СписокОшибок = ОшибкиЗаполненияТелефона(Префикс);
	
	ЕстьОшибки = СписокОшибок.Количество();
	
	ТекстСообщения = "";
	Для Каждого ТекущаяОшибка Из СписокОшибок Цикл
		ТекстСообщения = ТекстСообщения + Символы.ПС + ТекущаяОшибка.Представление;
	КонецЦикла;
	
	ТекстСообщения = СокрЛП(ТекстСообщения);
	
	Если ВыводитьПредупреждения 
		И ЕстьОшибки Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Некорректный формат номера телефона в поле ""Телефон"" группы ""%1"".'"),
			ИмяГруппы);
		ТекстСообщения = ТекстОшибки + Символы.ПС + ТекстСообщения;
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,ИмяРеквизита);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает список ошибок заполнения в виде списка значений:
//      Представление   - описание ошибки.
//      Значение        - XPath для поля.
&НаКлиенте
Функция ОшибкиЗаполненияТелефона(Префикс)
	
	Представление = ЭтотОбъект[Префикс + "Представление"];
	Значение = ЭтотОбъект[Префикс + "Значение"];
	
	СписокОшибок = Новый СписокЗначений;
	
	Если Представление = "" Тогда
		Возврат СписокОшибок;
	КонецЕсли;
	
	СтруктураТелефона = Неопределено;
	
	Если Значение <> "" Тогда
		
		Отказ = Ложь;
		ТекстОшибки = "";
		СтруктураТелефона = ЗначениеИзСтрокиJSON(Значение, Отказ, ТекстОшибки);
		
	КонецЕсли;
	
	Если СтруктураТелефона = Неопределено Тогда
		
		Значение = СервисДоставкиВызовСервера.КонтактнаяИнформацияПоПредставлению(Представление, "Телефон");
		ЭтотОбъект[Префикс + "Значение"] = Значение;
		Отказ = Ложь;
		ТекстОшибки = "";
		СтруктураТелефона = ЗначениеИзСтрокиJSON(Значение, Отказ, ТекстОшибки);
		
	КонецЕсли;
	
	ПолныйНомерТелефона = "";
	Если СтруктураТелефона.Свойство("countryCode") Тогда
		ПолныйНомерТелефона = ПолныйНомерТелефона + СтруктураТелефона.countryCode;
	КонецЕсли;
	
	Если СтруктураТелефона.Свойство("areaCode") Тогда
		ПолныйНомерТелефона = ПолныйНомерТелефона + СтруктураТелефона.areaCode;
	КонецЕсли;
	
	Если СтруктураТелефона.Свойство("number") Тогда
		ПолныйНомерТелефона = ПолныйНомерТелефона + СтруктураТелефона.number;
	КонецЕсли;
	
	НомерТелефонаТолькоЦифры = ТолькоЦифры(ПолныйНомерТелефона);
	
	Если СтрДлина(НомерТелефонаТолькоЦифры) < 10 Тогда
		СписокОшибок.Добавить("НомерТелефона", НСтр("ru = 'Номер телефона слишком короткий (менее 10 цифр)'"));
	КонецЕсли;
	
	Если СтрДлина(НомерТелефонаТолькоЦифры) > 15 Тогда
		СписокОшибок.Добавить("НомерТелефона", НСтр("ru = 'Номер телефона слишком длинный'"));
	КонецЕсли;
	
	Если НомерТелефонаСодержитНедопустимыеСимволы(ПолныйНомерТелефона) Тогда
		СписокОшибок.Добавить("НомерТелефона", НСтр("ru = 'Номер телефона содержит недопустимые символы'"));
	КонецЕсли;
	
	Возврат СписокОшибок;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеИзСтрокиJSON(Значение, Отказ, ТекстОшибки)
	
	Возврат СервисДоставки.ЗначениеИзСтрокиJSON(Значение, Отказ, ТекстОшибки);
	
КонецФункции

// Проверяет, содержит ли строка только 
//
// Параметры:
//  СтрокаПроверки          - Строка - Строка для проверки.
//
// Возвращаемое значение:
//   Булево - Истина - строка содержит только цифры или пустая, Ложь - строка содержит иные символы.
//
&НаКлиенте
Функция НомерТелефонаСодержитНедопустимыеСимволы(Знач СтрокаПроверки)
	
	СписокДопустимыхСимволов = "+-.,() wp1234567890";
	Возврат СтрРазделить(СтрокаПроверки, СписокДопустимыхСимволов, Ложь).Количество() > 0;
	
КонецФункции

&НаКлиенте
Функция ТолькоЦифры(Знач СтрокаДляПроверки)
	
	Возврат СервисДоставкиКлиент.ТолькоЦифры(СтрокаДляПроверки);
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДанныеЗаказаВопрос(Значение, ДополнительныеПараметры) Экспорт
	
	Если Значение = КодВозвратаДиалога.Да Тогда
		ОбновитьЗаказНаДоставку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеОтменитьЗаказ(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда //Отменить
		ОтменитьЗаказНаДоставку();
	ИначеЕсли Результат = КодВозвратаДиалога.Повторить Тогда //Отменить платно
		ОтменитьЗаказНаДоставку(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность()

	Если РежимМастера < СервисДоставкиКлиентСервер.РежимМастераЗарегистрирован() Тогда
		
		Элементы.СохранитьКакЧерновик.Видимость = Истина;
		Элементы.ОтправитьЗаказ.Видимость = ДоступнаОтправкаЗаказовНаДоставку;
		Элементы.Обновить.Видимость = Ложь;
		
		Элементы.ОрганизацияБизнесСетиСсылка.Видимость = Истина;
		Элементы.ОрганизацияБизнесСетиГиперссылка.Видимость = Ложь;
		
	Иначе
		
		Элементы.СохранитьКакЧерновик.Видимость = Ложь;
		Элементы.ОтправитьЗаказ.Видимость = Ложь;
		Элементы.Обновить.Видимость = Истина;
		
		ДоступныеДляИзмененияРеквизитыТолькоПросмотр(Истина);
		
		Элементы.ОрганизацияБизнесСетиСсылка.Видимость = Ложь;
		Элементы.ОрганизацияБизнесСетиГиперссылка.Видимость = Истина;
		
	КонецЕсли;
	
	Элементы.ГруппаПерезаполнениеТоваров.Видимость = ТребуетсяПовторнаяОтправка;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступностьОрганизации()
	
	ДоступноИзменениеОрганизации = (РежимМастера = СервисДоставкиКлиентСервер.РежимМастераНовый());
	Элементы.ОрганизацияБизнесСетиСсылка.ТолькоПросмотр = Не ДоступноИзменениеОрганизации;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФормуПоДаннымДокументаИБ()
	
	ПараметрыЗаказа = Неопределено;
	Параметры.Свойство("ПараметрыЗаказа", ПараметрыЗаказа);
	
	Если ПараметрыЗаказа <> Неопределено Тогда
		ПараметрыЗаказа.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	ИначеЕсли ДокументыОснования.Количество() Тогда
		ПараметрыЗаказа = ПараметрыЗаказаНаДоставкуПоДокументамОснованиям(ТипГрузоперевозки, ДокументыОснования);
	Иначе
		ПараметрыЗаказа = ПараметрыЗаказаНаДоставкуПоУмолчанию(ТипГрузоперевозки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОрганизацияБизнесСетиСсылка) Тогда
		ПараметрыЗаказа.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	КонецЕсли;
	
	ОбработатьПараметры(ПараметрыЗаказа);
	
	Если ПараметрыЗаказа.Свойство("ТоварныйСостав") Тогда
		
		Для Каждого ТекСтрока Из ПараметрыЗаказа.ТоварныйСостав Цикл
			
			НоваяСтрока = ТоварныйСостав.Добавить();
			
			Если НоваяСтрока.СтавкаНДСПредставление = "" Тогда
				НоваяСтрока.СтавкаНДСПредставление = НоваяСтрока.СтавкаНДС;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДокументОснование = Неопределено;
	Если ПараметрыЗаказа.Свойство("ДокументОснование", ДокументОснование)
		И ЗначениеЗаполнено(ДокументОснование) Тогда
		
		СтруктураВзаиморасчетов = СервисДоставки.НовыйСтруктураВзаиморасчетовПоДокументу();
		СервисДоставкиПереопределяемый.ЗаполнитьДанныеПоВзаиморасчетам(СтруктураВзаиморасчетов, ДокументОснование);
		Если СтруктураВзаиморасчетов.ДоступноВедениеВзаиморасчетов Тогда
			
			СуммаДокумента = СтруктураВзаиморасчетов.СуммаДокумента;
			Если СтруктураВзаиморасчетов.СуммаОплат >= СуммаДокумента Тогда
				Оплачен = Истина;
			Иначе
				
				СуммаНаложенногоПлатежа = СуммаДокумента - СтруктураВзаиморасчетов.СуммаОплат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если Не ЗначениеЗаполнено(ПунктВыдачиКлиентаИдентификатор)
			И СоответствиеСкладов.Количество() Тогда
				
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("ИспользоватьПоУмолчанию", Истина);
			
			ПоискСтрок = СоответствиеСкладов.НайтиСтроки(СтруктураОтбора);
			Если ПоискСтрок.Количество() Тогда
				ПунктВыдачиКлиентаИдентификатор = ПоискСтрок.Получить(0).Идентификатор;
			КонецЕсли;
				
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОрганизацияБизнесСетиСсылка) Тогда
			
			СервисДоставкиПереопределяемый.ЗаполнитьВалютуОрганизации(ОрганизацияБизнесСетиСсылка, ВалютаЗаказа);
			ВалютаКОплате = ВалютаЗаказа;
			ВалютаКОплатеДополнительно = ВалютаЗаказа;
			
		КонецЕсли;
		
	КонецЕсли;
	
	НаложенныйПлатежВидОплаты = 2;
	Элементы.ПолучательКонтактноеЛицо.КнопкаВыбора = ЗначениеЗаполнено(ПолучательКонтрагентСсылка);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыЗаказаНаДоставкуПоДокументамОснованиям(ТипГрузоперевозки, Значение)
	
	Возврат СервисДоставкиВызовСервера.ПараметрыЗаказаНаДоставкуПоДокументамОснованиям(ТипГрузоперевозки, Значение);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПараметрыЗаказаНаДоставкуПоУмолчанию(ТипГрузоперевозки)
	
	Возврат СервисДоставки.ПараметрыЗаказаНаДоставкуПоДокументуОснованию(ТипГрузоперевозки);
	
КонецФункции

&НаСервере
Процедура ОбработатьПараметры(Параметры, Префикс = "")
	
	ПараметрыДляФормы = Новый Структура;
	
	СервисДоставкиКлиентСервер.ЗаполнитьЛинейныеДанныеПоСтруктуре(Параметры, ПараметрыДляФормы, Префикс);
	
	Если ПараметрыДляФормы.Свойство("ТипГрузоперевозки")
		И ПараметрыДляФормы.ТипГрузоперевозки = 0 Тогда
			
		ПараметрыДляФормы.ТипГрузоперевозки = ?(ТипГрузоперевозки = 0, 
			СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СКурьерика(), 
			ТипГрузоперевозки);
			
	КонецЕсли;
	
	МассивИсключений = Новый Массив;
	Если ПараметрыДляФормы.Свойство("ТоварныйСостав") Тогда
		МассивИсключений.Добавить("ТоварныйСостав");
	КонецЕсли;
	Если ПустаяСтрока(Комментарий) Тогда
		Комментарий = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыДляФормы, "ДополнительнаяИнформация", "");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыДляФормы, , СтрСоединить(МассивИсключений, ", "));
	
	//@skip-check wrong-string-literal-content
	Если ПараметрыДляФормы.Свойство("ВалютаСсылка")
		И ЗначениеЗаполнено(ПараметрыДляФормы["ВалютаСсылка"]) Тогда
		
		ВалютаЗаказа = ПараметрыДляФормы["ВалютаСсылка"];
		ВалютаКОплате = ВалютаЗаказа;
		ВалютаКОплатеДополнительно = ВалютаЗаказа;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСписковВыбораКонтактнойИнформации();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияСписковВыбораКонтактнойИнформации()
	
	Элементы.ПолучательАдрес.СписокВыбора.Очистить();
	Элементы.ПолучательКонтактноеЛицоТелефон.СписокВыбора.Очистить();
	
	МассивВладельцевКонтактнойИнформации = Новый Массив;
	МассивВладельцевКонтактнойИнформации.Добавить(ПолучательКонтрагентСсылка);
	МассивВладельцевКонтактнойИнформации.Добавить(ПолучательКонтактноеЛицоСсылка);
	
	Если ЗначениеЗаполнено(ПолучательКонтрагентСсылка)
		И ПолучательКонтрагентСсылка.Метаданные().Реквизиты.Найти("Партнер") <> Неопределено Тогда
		МассивВладельцевКонтактнойИнформации.Добавить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПолучательКонтрагентСсылка, "Партнер"));
	КонецЕсли;
	
	СтруктураКонтактнаяИнформация = СервисДоставкиСлужебный.КонтактнаяИнформацияОбъектов(МассивВладельцевКонтактнойИнформации);
	
	Для Каждого ЭлементСоответствия Из СтруктураКонтактнаяИнформация Цикл
		
		Для Каждого СтрокаКонтактнаяИнформация Из ЭлементСоответствия.Значение Цикл
			
			Если СтрокаКонтактнаяИнформация.Значение.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
				
				Элементы.ПолучательАдрес.СписокВыбора.Добавить(
					СтрокаКонтактнаяИнформация.Значение.Значение,
					СтрШаблон("%1, %2",
						СтрокаКонтактнаяИнформация.Значение.Представление,
						ЭлементСоответствия.Ключ));
				
			ИначеЕсли СтрокаКонтактнаяИнформация.Значение.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
				
				Элементы.ПолучательКонтактноеЛицоТелефон.СписокВыбора.Добавить(
					СтрокаКонтактнаяИнформация.Значение.Значение,
					СтрШаблон("%1, %2",
						СтрокаКонтактнаяИнформация.Значение.Представление,
						ЭлементСоответствия.Ключ));
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Элементы.ПолучательАдрес.СписокВыбора.Добавить(2, НСтр("ru = 'Адрес контрагента'"));
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЗаголовокФормы()
	
	Если РежимМастера = СервисДоставкиКлиентСервер.РежимМастераНовый() Тогда
		
		ЗаказНаДоставкуПредставление = НСтр("ru = 'Заказ на доставку (создание)'");
		
	ИначеЕсли ЗначениеЗаполнено(НомерЗаказа) Тогда
		
		ЗаказНаДоставкуПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Заказ на доставку %1 от %2'"),
			НомерЗаказа, Формат(ДатаЗаказа, "ДЛФ=DT"));
			
	Иначе
		ЗаказНаДоставкуПредставление = НСтр("ru = 'Заказ на доставку (открытие)'");
	КонецЕсли;
	
	ТекстЗаголовка =  НСтр("ru = '%1: %2'");
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстЗаголовка,
		СервисДоставкиКлиентСервер.ПредставлениеТипаГрузоперевозки(ТипГрузоперевозки),
		ЗаказНаДоставкуПредставление);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтрокуПредставлениеСостоянияЗаказаФормы()
	
	Если РежимМастера = СервисДоставкиКлиентСервер.РежимМастераНовый() Тогда
		СостояниеПредставление = НСтр("ru = 'Новый'");
	ИначеЕсли ЗначениеЗаполнено(Состояние) Тогда
		СостояниеПредставление = Состояние;
	КонецЕсли;
	
	УстановитьВидимостьДоступныхДействий();
	
	Если НастройкиДоступныхДействий[ИмяДействияПриИзменении()].Видимость Тогда
		
		СостояниеПредставление = СостояниеПредставление + СтрШаблон(" (%1)", НСтр("ru = 'режим изменения оформленного заказа'"));
			
	КонецЕсли;
	
	Элементы.ДекорацияСостояниеПредставление.Заголовок = СостояниеПредставление;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыВидаКонтактнойИнформации(ВидКонтактнойИнформацииСтрока)
	
	Возврат СервисДоставкиСлужебный.ПараметрыВидаКонтактнойИнформации(ВидКонтактнойИнформацииСтрока);
	
КонецФункции

&НаКлиенте
Процедура КонтактнаяИнформацияНачалоВыбора(Элемент, ВидКонтактнойИнформацииСтрока)
	
	ПараметрыВидаКонтактнойИнформации = ПараметрыВидаКонтактнойИнформации(ВидКонтактнойИнформацииСтрока);
	
	Если Не ЗначениеЗаполнено(ПараметрыВидаКонтактнойИнформации) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = Элемент.Имя;
	ИмяРеквизитаПредставление = ИмяРеквизита + "Представление";
	ИмяРеквизитаЗначенияПолей = ИмяРеквизита + "Значение";
	
	ЕстьИзменение = Ложь;
	Если Элемент.ТекстРедактирования <> ЭтотОбъект[ИмяРеквизитаПредставление] Тогда
		ЭтотОбъект[ИмяРеквизитаПредставление] = Элемент.ТекстРедактирования;
		ЕстьИзменение = Истина;
	КонецЕсли;
	
	Если (ЭтотОбъект[ИмяРеквизитаЗначенияПолей] = ""
		И ЭтотОбъект[ИмяРеквизитаПредставление] <> "")
		Или ЕстьИзменение Тогда
		
		ЭтотОбъект[ИмяРеквизитаЗначенияПолей] = СервисДоставкиВызовСервера.КонтактнаяИнформацияПоПредставлению(ЭтотОбъект[ИмяРеквизитаПредставление],
			ПараметрыВидаКонтактнойИнформации.ТипНаименование);
		
	КонецЕсли;
		
	ЭтотОбъект[ИмяРеквизитаЗначенияПолей] = СервисДоставкиВызовСервера.АдресСДополнительнымиПолями(ПараметрыВидаКонтактнойИнформации.Тип, ЭтотОбъект[ИмяРеквизитаЗначенияПолей]);
	
	ПараметрыОткрытия = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
		ПараметрыВидаКонтактнойИнформации.Вид,
		ЭтотОбъект[ИмяРеквизитаЗначенияПолей],
		ЭтотОбъект[ИмяРеквизитаПредставление],,
		ПараметрыВидаКонтактнойИнформации.Тип);
		
	ПараметрыОткрытия.Вставить("Заголовок", Элемент.Заголовок);
	ПараметрыОткрытия.Вставить("ТолькоПросмотр", Ложь);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяРеквизита", ИмяРеквизита);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОткрытьФормуКонтактнойИнформацииЗавершение",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(
		ПараметрыОткрытия,
		ЭтотОбъект,
		ОбработчикОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	ИмяРеквизита = ДополнительныеПараметры.ИмяРеквизита;
		
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Реквизит = ЭтотОбъект[ИмяРеквизита + "Представление"];
		Если Результат.Свойство("Представление")
			И (Реквизит <> Результат.Представление) Тогда
				
			Результат.Свойство("Представление", ЭтотОбъект[ИмяРеквизита + "Представление"]);
			
		КонецЕсли;
		
		Реквизит = ЭтотОбъект[ИмяРеквизита + "Значение"];
		Если Результат.Свойство("Значение")
			И (Реквизит <> Результат.Значение) Тогда
				
			Результат.Свойство("Значение", ЭтотОбъект[ИмяРеквизита + "Значение"]);
			
		КонецЕсли;
		
		Отказ = Ложь;
		
		ПроверитьПредставлениеКонтактнойИнформации(ИмяРеквизита, Отказ);
		
		Если Результат.Свойство("Комментарий")
			И ЗначениеЗаполнено(Результат.Комментарий) Тогда
			ЗадатьВопросДобавлениеКомментария(Результат.Комментарий);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПредставлениеКонтактнойИнформации(Префикс, ЕстьОшибки)
	
	ОчиститьСообщения();
	
	Если СтрНайти(Префикс, "Телефон") > 0 Тогда
		
		ПроверитьНомерТелефона(Префикс, ЕстьОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОформлениеРеквизитовОплаты()
	
	Элементы.ГруппаОплатаПанельОплата.Видимость = Не Оплачен;
	Элементы.СуммаДокумента.АвтоОтметкаНезаполненного = Не Оплачен;
	Элементы.СуммаДокумента.ОтметкаНезаполненного = Элементы.СуммаДокумента.ОтметкаНезаполненного И Не Оплачен;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеДатыДоставки()
	
	ЧасыДоставки = Новый Массив;
	
	Для ИндексЧасы = 0 По 23 Цикл
		
		Для ИндексМинуты = 0 По 3 Цикл
			ЧасыДоставки.Добавить(Дата(1, 1, 1, ИндексЧасы, ИндексМинуты * 15, 0));
		КонецЦикла;
		
	КонецЦикла;
	
	Элементы.ВремяДоставкиС.СписокВыбора.ЗагрузитьЗначения(ЧасыДоставки);
	Элементы.ВремяДоставкиС.ВысотаСпискаВыбора = 7;
	Элементы.ВремяДоставкиС.Формат = НСтр("ru = 'ДФ=''""с ""HH:mm''; ДП=''с 00:00'''");
	Элементы.ВремяДоставкиС.ФорматРедактирования = Элементы.ВремяДоставкиС.Формат;
	
	Для Каждого ЭлементСписка Из Элементы.ВремяДоставкиС.СписокВыбора Цикл
		ЭлементСписка.Представление = Формат(ЭлементСписка.Значение, Элементы.ВремяДоставкиС.Формат);
	КонецЦикла;
	
	Элементы.ВремяДоставкиПо.СписокВыбора.ЗагрузитьЗначения(ЧасыДоставки);
	Элементы.ВремяДоставкиПо.ВысотаСпискаВыбора = 7;
	Элементы.ВремяДоставкиПо.Формат = НСтр("ru = 'ДФ=''""до ""HH:mm''; ДП=''до 00:00'''");
	Элементы.ВремяДоставкиПо.ФорматРедактирования = Элементы.ВремяДоставкиПо.Формат;

	Для Каждого ЭлементСписка Из Элементы.ВремяДоставкиПо.СписокВыбора Цикл
		ЭлементСписка.Представление = Формат(ЭлементСписка.Значение, Элементы.ВремяДоставкиПо.Формат);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеЗаказаПередОтправкой(Отказ)
	
	ПроверитьИнтервалДоставки(Отказ);
	ПроверитьСуммыОплаты(Отказ);
	ПроверитьПрочиеРеквизиты(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСуммыОплаты(Отказ = Ложь)
	
	Если Не Оплачен
		И СуммаДокумента = 0 Тогда
		
		ОчиститьСообщения();
		
		ТекстОшибки = НСтр("ru = 'Сумма заказа не заполнена.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,, "СуммаДокумента",, Отказ);
		
	ИначеЕсли СуммаНаложенногоПлатежа + СуммаНаложенногоПлатежаДополнительный > СуммаДокумента Тогда
		
		ОчиститьСообщения();
		
		ТекстОшибки = НСтр("ru = 'Сумма оплаты не может превышать сумму заказа.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,, "СуммаНаложенногоПлатежа",, Отказ);
		
	ИначеЕсли Не Оплачен
		И СуммаНаложенногоПлатежа + СуммаНаложенногоПлатежаДополнительный = 0 Тогда
		
		ОчиститьСообщения();
		
		Отказ = Истина;
		ТекстОшибки = НСтр("ru = 'Сумма оплаты не заполнена.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,, "СуммаНаложенногоПлатежа",, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьИнтервалДоставки(Отказ = Ложь)
	
	ТекущаяДата = ОбщегоНазначенияКлиент.ДатаСеанса();
	НачалоТекущегоДня = НачалоДня(ТекущаяДата);
	ТекущееВремя = Дата(1, 1, 1) + (ТекущаяДата - НачалоТекущегоДня);
	НачалоДняДоставки = НачалоДня(ДатаДоставки);

	Если НачалоТекущегоДня = НачалоДняДоставки 
		И ТекущееВремя > ВремяДоставкиС 
		И ВремяДоставкиС <> Дата(1,1,1,0,0,0) Тогда
			
		ОчиститьСообщения();
		
		ТекстОшибки = НСтр("ru = 'Выбранное время доставки не может быть меньше текущего времени.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,, "ВремяДоставкиС",, Отказ);
		
	ИначеЕсли НачалоТекущегоДня = НачалоДняДоставки
		И ВремяДоставкиПо <> Дата(1,1,1,0,0,0)
		И ТекущееВремя > ВремяДоставкиПо Тогда
			
		ОчиститьСообщения();
		
		ТекстОшибки = НСтр("ru = 'Невозможно оформить доставку на указанное время. Время доставки меньше, чем текущее.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,, "ОтправительВремяПлановойОтгрузки",, Отказ);
		
	ИначеЕсли ЗначениеЗаполнено(ВремяДоставкиС)
		И ЗначениеЗаполнено(ВремяДоставкиПо)
		И ВремяДоставкиПо <= ВремяДоставкиС Тогда
		
		ОчиститьСообщения();
		
		ТекстОшибки = НСтр("ru = 'Выбран неверный интервал доставки.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,,,, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПрочиеРеквизиты(Отказ = Ложь)
	
	Если Не ЗначениеЗаполнено(ПолучательКонтактноеЛицоТелефонПредставление) Тогда
		
		ОчиститьСообщения();
		
		ТекстОшибки = НСтр("ru = 'Контактный телефон не заполнен.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,, "ПолучательКонтактноеЛицоТелефонПредставление",, Отказ);
		
	ИначеЕсли Не ЗначениеЗаполнено(ПолучательАдресПредставление) Тогда
		
		ОчиститьСообщения();
		
		ТекстОшибки = НСтр("ru = 'Адрес доставки не заполнен.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,, "ПолучательАдресПредставление",, Отказ);
		
	ИначеЕсли Не ЗначениеЗаполнено(ПолучательКонтактноеЛицоНаименование) Тогда
		
		ОчиститьСообщения();
		
		ТекстОшибки = НСтр("ru = 'Контактное лицо не заполнено.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,, "ПолучательКонтактноеЛицоНаименование",, Отказ);
		
	ИначеЕсли Не ЗначениеЗаполнено(ПунктВыдачиКлиентаИдентификатор) Тогда
		
		ОчиститьСообщения();
		
		ТекстОшибки = НСтр("ru = 'Пункт выдачи не заполнен.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,, "ПунктВыдачиКлиентаИдентификатор",, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокВыбораСпособовОплаты()
	
	СписокСпособовОплаты = Новый СписокЗначений;
	СписокСпособовОплаты.Добавить(1, НСтр("ru = 'Картой'"));
	СписокСпособовОплаты.Добавить(2, НСтр("ru = 'Наличными'"));
	
	Возврат СписокСпособовОплаты;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСпискиВыбора()
	
	Элементы.НаложенныйПлатежВидОплаты.СписокВыбора.Очистить();
	Элементы.НаложенныйПлатежВидОплатыДополнительный.СписокВыбора.Очистить();
	Элементы.ПунктВыдачи.СписокВыбора.Очистить();
	
	СписокВыбора = Элементы.ПолучательКонтрагент.СписокВыбора;
	СписокВыбора.Добавить(1, НСтр("ru = 'Организация'"));
	СписокВыбора.Добавить(2, НСтр("ru = 'Контрагент'"));
	СписокВыбора.Добавить(3, НСтр("ru = 'В свободной форме'"));
	
	СписокСпособовОплаты = ПолучитьСписокВыбораСпособовОплаты();
	Для Каждого ЭлементСписка Из СписокСпособовОплаты Цикл
		
		Элементы.НаложенныйПлатежВидОплаты.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		Элементы.НаложенныйПлатежВидОплатыДополнительный.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		
	КонецЦикла;
	
	Для Каждого СтрокаСклад Из СоответствиеСкладов Цикл
		
		Если Элементы.ПунктВыдачи.СписокВыбора.НайтиПоЗначению(СтрокаСклад.Идентификатор) = Неопределено Тогда
			
			Элементы.ПунктВыдачи.СписокВыбора.Добавить(СтрокаСклад.Идентификатор,
				СтрШаблон("%1%2%3",
					СтрокаСклад.Наименование,
					?(ЗначениеЗаполнено(СтрокаСклад.Склад), " (" +  СтрокаСклад.Склад + ")", ""),
					?(СтрокаСклад.ИспользоватьПоУмолчанию, " - " + НСтр("ru = 'по умолчанию'"), "")));
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбора(ИмяСправочника, ИмяРеквизита, ПараметрыОтбора = Неопределено, ИмяПроцедурыОбработки = "ОбработатьВыборЗначения")
	
	Если ПараметрыОтбора = Неопределено Тогда
		ПараметрыОтбора = Новый Структура();
	КонецЕсли;
	
	ТекущееЗначениеРеквизита = ЭтотОбъект[ИмяРеквизита];
	
	ИмяФормыВыбора = СервисДоставкиВызовСервера.ИмяФормыВыбораПоОпределяемомуТипу(ИмяСправочника);
	
	Если ИмяФормыВыбора <> "" Тогда
		
		ПараметрыОткрытия = Новый Структура("ТекущаяСтрока", ТекущееЗначениеРеквизита);
		ПараметрыОткрытия.Вставить("Отбор", ПараметрыОтбора);
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		
		СервисДоставкиКлиент.ПередОткрытиемФормыВыбора(ПараметрыОткрытия, ИмяСправочника);
		
		ОбработчикОповещения = Новый ОписаниеОповещения(ИмяПроцедурыОбработки,
			ЭтотОбъект,
			Новый Структура("ИмяРеквизита", ИмяРеквизита));
			
		ОткрытьФорму(
			ИмяФормыВыбора,
			ПараметрыОткрытия,
			ЭтотОбъект,,,,
			ОбработчикОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборЗначения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		
		РежимИзмененияСоставаОснований = 0;
		Возврат;
		
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("КодВозвратаДиалога")
		И Результат = КодВозвратаДиалога.Отмена Тогда
			
		РежимИзмененияСоставаОснований = 0;
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
		
		Если ДополнительныеПараметры.ИмяРеквизита = "ДокументыОснования" Тогда
			
			Если РежимИзмененияСоставаОснований = 1
				И ДокументыОснования.Количество() = 1 Тогда
					
				Основание = ДокументыОснования[0].Значение;
				
				Для Каждого ТекОснование Из Результат Цикл
					
					Если ТекОснование <> Основание Тогда
						ДокументыОснования.Добавить(ТекОснование);
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				ДокументыОснования.ЗагрузитьЗначения(Результат);
			КонецЕсли;
			
			// Очистим наложенный платеж при необходимости
			Если ДокументыОснования.Количество() = 1 Тогда
				
				Если Не СервисДоставкиКлиент.ЭтотДокументДоступенДляНаложенногоПлатежа(ДокументыОснования[0].Значение) Тогда
					НаложенныйПлатежВидОплаты = 0;
				КонецЕсли;
				
			Иначе
				НаложенныйПлатежВидОплаты = 0;
			КонецЕсли;
			
			ПараметрыЗаказа = ПараметрыЗаказаНаДоставкуПоДокументамОснованиям(ТипГрузоперевозки, ДокументыОснования);
			
			Если ПараметрыЗаказа.Свойство("ТоварныйСостав") Тогда
				
				ТоварныйСостав.Очистить();
				
				Для Каждого ТекСтрока Из ПараметрыЗаказа.ТоварныйСостав Цикл
					
					НоваяСтрока = ТоварныйСостав.Добавить();
					
					Если НоваяСтрока.СтавкаНДСПредставление = "" Тогда
						НоваяСтрока.СтавкаНДСПредставление = НоваяСтрока.СтавкаНДС;
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
					
				КонецЦикла;
				
			КонецЕсли;
			
			СуммаДокумента = ПараметрыЗаказа.ПолнаяСтоимость;
			
			Если ПустаяСтрока(Комментарий) Тогда
				Комментарий = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗаказа,
					"ДополнительнаяИнформация", "");
			КонецЕсли;
				
			ПриИзмененииРеквизита("ДокументыОснования");
			ПриИзмененииРеквизита("ТоварныйСостав");
			
		Иначе
			ЭтотОбъект[ДополнительныеПараметры.ИмяРеквизита] = Результат;
		КонецЕсли;
		
		ОбработатьИзменениеРеквизитаФормы(ДополнительныеПараметры.ИмяРеквизита);
		
	КонецЕсли;
	
	РежимИзмененияСоставаОснований = 0;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПараметрыОтбораАдресаОрганизации(ПараметрыОтбора, ПолучательКонтрагентСсылка)
	СервисДоставкиПереопределяемый.ЗаполнитьПараметрыОтбораАдресаОрганизации(ПараметрыОтбора, ПолучательКонтрагентСсылка);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПараметрыОтбораАдресаКонтрагента(ПараметрыОтбора, ПолучательКонтрагентСсылка)
	СервисДоставкиПереопределяемый.ЗаполнитьПараметрыОтбораАдресаКонтрагента(ПараметрыОтбора, ПолучательКонтрагентСсылка);
КонецПроцедуры

&НаКлиенте
Процедура АдресОбработкаВыбора(Элемент, ВыбранноеЗначение)
	
	ПараметрыОтбора = Новый Структура();
	
	ИмяРеквизита = Элемент.Имя;
	
	Префикс = СтрЗаменить(ИмяРеквизита, "Адрес", "");
	
	Если ВыбранноеЗначение = 1 Тогда
		
		ЗаполнитьПараметрыОтбораАдресаОрганизации(ПараметрыОтбора, ЭтотОбъект[Префикс + "КонтрагентСсылка"]);
		ОткрытьФормуВыбора("АдресОрганизацииСервисДоставки", Элемент.Имя + "Владелец", ПараметрыОтбора);
		
	ИначеЕсли ВыбранноеЗначение = 2 Тогда
			
		ЗаполнитьПараметрыОтбораАдресаКонтрагента(ПараметрыОтбора, ЭтотОбъект[Префикс + "КонтрагентСсылка"]);
		ОткрытьФормуВыбора("АдресКонтрагентаСервисДоставки", Элемент.Имя + "Владелец", ПараметрыОтбора);
		
	ИначеЕсли ВыбранноеЗначение = 3 Тогда
			
		АдресНачалоВыбора(Элемент, ЭтотОбъект[СтрЗаменить(Элемент.Имя, "Адрес", "") + "КонтрагентЭтоОрганизация"]);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресНачалоВыбора(Элемент, ЭтоНашаОрганизация)

	КонтактнаяИнформацияНачалоВыбора(Элемент, ?(ЭтоНашаОрганизация,
		"АдресСкладаОрганизации",
		"АдресСкладаКонтрагента"));
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонНачалоВыбора(Элемент, ЭтоНашаОрганизация)
	
	КонтактнаяИнформацияНачалоВыбора(Элемент, ?(ЭтоНашаОрганизация,
		"ТелефонКонтактногоЛицаОрганизации",
		"ТелефонКонтактногоЛицаКонтрагента"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРеквизит(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИмяРеквизита = Элемент.Имя + "Ссылка";
	ЭтотОбъект[ИмяРеквизита] = Неопределено;
	ОбработатьИзменениеРеквизитаФормы(ИмяРеквизита);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеРеквизитаФормы(ИмяРеквизита)
	
	Отказ = Ложь;
	
	ОчиститьСообщения();
	ОбработатьИзменениеРеквизитаФормыНаСервере(ИмяРеквизита, Отказ);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыКонтрагента(Значение)
	
	ПараметрыКонтрагента = СервисДоставки.НовыйПараметрыКонтрагента();
	ПараметрыКонтрагента.Ссылка = Значение;
	
	Если ЗначениеЗаполнено(Значение) Тогда
		СервисДоставкиПереопределяемый.ЗаполнитьПараметрыКонтрагента(ПараметрыКонтрагента);
	КонецЕсли;
	
	Возврат ПараметрыКонтрагента;
	
КонецФункции

&НаСервере
Функция ПараметрыУчастникаГрузоперевозки(Значение)
	
	ПараметрыУчастника = СервисДоставки.НовыйПараметрыУчастникаГрузоперевозки();
	
	ПараметрыУчастника.Контрагент = ПараметрыКонтрагента(Значение);
	
	ПараметрыПоУмолчанию = СервисДоставки.ПараметрыПоУмолчанию(ТипГрузоперевозки);
	
	Если ПараметрыУчастника.Контрагент.ЭтоОрганизация Тогда
		Если ПараметрыПоУмолчанию.СпособОпределенияКонтактногоЛица = 2 
			И ПараметрыУчастника.Контрагент.ЭтоОрганизация Тогда
			
			Если ТипЗнч(ПараметрыПоУмолчанию.КонтактноеЛицо) = Тип("Строка") Тогда
				ПараметрыУчастника.КонтактноеЛицо.Наименование = ПараметрыПоУмолчанию.КонтактноеЛицо;
			Иначе
				ПараметрыУчастника.КонтактноеЛицо.Ссылка = ПараметрыПоУмолчанию.КонтактноеЛицо;
				СервисДоставки.ЗаполнитьПараметрыКонтактногоЛица(ПараметрыУчастника.КонтактноеЛицо);
			КонецЕсли;
			
		Иначе
			ПараметрыУчастника.КонтактноеЛицо.СпособОпределенияКонтактногоЛица = ПараметрыПоУмолчанию.СпособОпределенияКонтактногоЛица;
			СервисДоставкиПереопределяемый.ЗаполнитьПараметрыКонтактногоЛицаПоУмолчанию(ЭтотОбъект, ПараметрыУчастника);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыУчастника;
	
КонецФункции

&НаСервере
Процедура ПроверитьРеквизитыКонтрагента(Префикс, ЕстьОшибки, ВыводитьПредупреждения = Истина)
	
	ИмяРеквизита = Префикс + "Наименование";
	КонтрагентСсылка = ЭтотОбъект[Префикс + "Ссылка"];
	КонтрагентНаименование = ЭтотОбъект[Префикс + "Наименование"];
	КонтрагентЮрФизЛицо = ЭтотОбъект[Префикс + "ЮрФизЛицо"];
	КонтрагентИНН = ЭтотОбъект[Префикс + "ИНН"];
	КонтрагентКПП = ЭтотОбъект[Префикс + "КПП"];
	
	ЭтоОтправитель = (СтрНайти(Префикс, "Отправитель") > 0);
	
	Если Не ЗначениеЗаполнено(КонтрагентСсылка) 
		И КонтрагентНаименование = "" Тогда
		Возврат;
	КонецЕсли;
	
	УчастникГрузоперевозки = СтрЗаменить(Префикс, "Контрагент", "");
	
	ТекстОшибки = НСтр("ru = 'Некорректный реквизит ""%1"" у участника грузоперевозки в поле ""%2"".'");
	
	Если ЗначениеЗаполнено(КонтрагентСсылка) 
		И КонтрагентНаименование = "" Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстОшибки,
			НСтр("ru = 'Наименование'"),
			УчастникГрузоперевозки);
		
		ЕстьОшибки = Истина;
		Если ВыводитьПредупреждения Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,ИмяРеквизита);
		КонецЕсли;
		
	КонецЕсли;
	
	Если КонтрагентЮрФизЛицо = 0 Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстОшибки,
			НСтр("ru = 'Вид контрагента'"),
			УчастникГрузоперевозки);
		
		ЕстьОшибки = Истина;
		Если ВыводитьПредупреждения Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,ИмяРеквизита);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если КонтрагентЮрФизЛицо = 2 Тогда
		
		Если ЭтоОтправитель Тогда
			
			ТекстСообщения = НСтр("ru = 'Отправитель не может быть физическим лицом'");
			
			ЕстьОшибки = Истина;
			Если ВыводитьПредупреждения Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,ИмяРеквизита);
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КонтрагентИНН) Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстОшибки,
			НСтр("ru = 'ИНН'"),
			УчастникГрузоперевозки);
		
		ЕстьОшибки = Истина;
		Если ВыводитьПредупреждения Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,ИмяРеквизита);
		КонецЕсли;
		
	Иначе
		
		ТекстСообщения = "";
		
		Если Не РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(КонтрагентИНН,
			КонтрагентЮрФизЛицо = 1,
			ТекстСообщения) Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстОшибки,
				НСтр("ru = 'ИНН'"),
				УчастникГрузоперевозки)
				+ Символы.ПС + ТекстСообщения;
		
			ЕстьОшибки = Истина;
			Если ВыводитьПредупреждения Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,ИмяРеквизита);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверяем юридический адрес только на наличие
	КонтрагентЮридическийАдрес = ЭтотОбъект[Префикс + "ЮридическийАдресПредставление"];
	
	Если СтрДлина(СокрЛП(КонтрагентЮридическийАдрес)) < 5 Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстОшибки,
			НСтр("ru = 'Юридический адрес'"),
			УчастникГрузоперевозки);
			
		ЕстьОшибки = Истина;
		Если ВыводитьПредупреждения Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,ИмяРеквизита);
		КонецЕсли;
		
	КонецЕсли;
	
	Если КонтрагентЮрФизЛицо = 3 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КонтрагентКПП) Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстОшибки,
			НСтр("ru = 'КПП'"),
			УчастникГрузоперевозки);
			
		ЕстьОшибки = Истина;
		Если ВыводитьПредупреждения Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, ИмяРеквизита);
		КонецЕсли;
		
	Иначе
		
		ТекстСообщения = "";
		Если Не РегламентированныеДанныеКлиентСервер.КППСоответствуетТребованиям(КонтрагентКПП, ТекстСообщения) Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстОшибки,
				НСтр("ru = 'КПП'"),
				УчастникГрузоперевозки)
				+ Символы.ПС + ТекстСообщения;
				
			ЕстьОшибки = Истина;
			Если ВыводитьПредупреждения Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, ИмяРеквизита);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеРеквизитаФормыНаСервере(ИмяРеквизита, Отказ = Ложь)
	
	Модифицированность = Истина;
	
	Если ИмяРеквизита = "ПолучательКонтрагентСсылка" Тогда
		
		ПараметрыУчастника = ПараметрыУчастникаГрузоперевозки(ЭтотОбъект[ИмяРеквизита]);
		
		// В режиме редактирования реквизитов учесть доступность изменения адреса получателя
		Если ИмяРеквизита = "ПолучательКонтрагентСсылка"
			И КлючиРеквизитовДляИзменения.Количество() > 0
			И КлючиРеквизитовДляИзменения.НайтиПоЗначению("ПолучательАдрес") = Неопределено Тогда
			ПараметрыУчастника.Удалить("Адрес");
		КонецЕсли;
		
		ОбработатьПараметры(ПараметрыУчастника, СтрЗаменить(ИмяРеквизита, "КонтрагентСсылка", ""));
		
		ИмяЭлемента = СтрЗаменить(ИмяРеквизита, "Ссылка", "");
		ЕстьОшибки = Ложь;
		ПроверитьРеквизитыКонтрагента(ИмяЭлемента, ЕстьОшибки, Истина);
		
		УстановитьОформлениеТелефона();
		
	ИначеЕсли ИмяРеквизита = "ПолучательКонтрагентРеквизиты" Тогда
		
		ИмяЭлемента = СтрЗаменить(ИмяРеквизита, "Реквизиты", "");
		ПараметрыКонтрагента = ПараметрыКонтрагента(ЭтотОбъект[ИмяЭлемента + "Ссылка"]);
		
		ЕстьИзменения = Ложь;
		Для Каждого ТекущийПараметр Из ПараметрыКонтрагента Цикл
			
			Если ТипЗнч(ТекущийПараметр.Значение) = Тип("Структура") Тогда
				Продолжить;
			ИначеЕсли ТекущийПараметр.Значение <> ЭтотОбъект[ИмяЭлемента + ТекущийПараметр.Ключ] Тогда
				ЕстьИзменения = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПараметрыКонтрагента.ЮридическийАдрес.Представление
			<> ЭтотОбъект[ИмяЭлемента + "ЮридическийАдресПредставление"] Тогда
			ЕстьИзменения = Истина;
		КонецЕсли;
		
		Если ПараметрыКонтрагента.ЮридическийАдрес.Значение
			<> ЭтотОбъект[ИмяЭлемента + "ЮридическийАдресЗначение"] Тогда
			ЕстьИзменения = Истина;
		КонецЕсли;
		
		Если ЕстьИзменения Тогда
			ОбработатьПараметры(ПараметрыКонтрагента, ИмяЭлемента);
			
			ЕстьОшибки = Ложь;
			ПроверитьРеквизитыКонтрагента(ИмяЭлемента, ЕстьОшибки, Истина);
		КонецЕсли;
		
		УстановитьОформлениеТелефона();
		
	ИначеЕсли ИмяРеквизита = "ПолучательКонтактноеЛицоСсылка" Тогда
		
		Если ТипЗнч(ЭтотОбъект[ИмяРеквизита]) <> Тип("Строка") Тогда
			
			ПараметрыРеквизита = ПараметрыКонтактногоЛица(ЭтотОбъект[ИмяРеквизита]);
			ОбработатьПараметры(ПараметрыРеквизита, СтрЗаменить(ИмяРеквизита, "Ссылка", ""));
			
		КонецЕсли;

	ИначеЕсли ИмяРеквизита = "ПолучательАдресВладелец" Тогда
		
		ПараметрыРеквизита = ПараметрыАдреса(ЭтотОбъект[ИмяРеквизита]);
		
		ИмяЭлемента = СтрЗаменить(ИмяРеквизита, "Владелец", "");
		ОбработатьПараметры(ПараметрыРеквизита, ИмяЭлемента);
		
		ЕстьОшибки = Ложь;
		ПроверитьРеквизитыАдреса(ИмяЭлемента, ЕстьОшибки, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыКонтактногоЛица(Значение)
	
	Параметры = СервисДоставки.НовыйПараметрыКонтактногоЛица();
	Параметры.Ссылка = Значение;
	
	Если ЗначениеЗаполнено(Значение) Тогда
		СервисДоставки.ЗаполнитьПараметрыКонтактногоЛица(Параметры);
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПараметрыАдреса(Значение)
	
	Параметры = СервисДоставки.НовыйПараметрыАдреса("АдресДоставки");
	Параметры.Владелец = Значение;
	
	Если ЗначениеЗаполнено(Значение) Тогда
		СервисДоставкиСлужебный.ЗаполнитьАдресПоПараметрам(Параметры);
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

&НаСервере
Процедура ПроверитьРеквизитыАдреса(ИмяРеквизита, ЕстьОшибки, ВыводитьПредупреждения)
	
	СервисДоставкиСлужебный.ПроверитьРеквизитыАдреса(ЭтотОбъект, ИмяРеквизита, ЕстьОшибки, ВыводитьПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОткрытие(Элемент)
	
	ИмяРеквизита = Элемент.Имя + "Ссылка";
	ИмяРеквизитаЭтоОрганизация = Элемент.Имя + "ЭтоОрганизация";
	
	ЗначениеРеквизита = ЭтотОбъект[ИмяРеквизита];
	ЭтоОрганизация = ЭтотОбъект[ИмяРеквизитаЭтоОрганизация];
	
	Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
		
		Если ЭтоОрганизация Тогда
			ОткрытьФормуОбъекта("ОрганизацияСервисДоставки", ИмяРеквизита);
		Иначе
			ОткрытьФормуОбъекта("КонтрагентСервисДоставки", ИмяРеквизита);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОбъекта(ИмяОбъекта, ИмяРеквизита, ИмяПроцедурыОбработки = "ОбработатьИзменениеРеквизитовОбъекта")
	
	ТекущееЗначениеРеквизита = ЭтотОбъект[ИмяРеквизита];
	
	ИмяФормыВыбора = СервисДоставкиВызовСервера.ИмяФормыОбъектаПоОпределяемомуТипу(ИмяОбъекта);
	
	Если ИмяФормыВыбора <> "" Тогда
		
		ПараметрыОткрытия = Новый Структура();
		ПараметрыОткрытия.Вставить("Ключ", ТекущееЗначениеРеквизита);
		
		Если РежимМастера = СервисДоставкиКлиентСервер.РежимМастераЗарегистрирован() Тогда
			
			ПараметрыОткрытия.Вставить("ТолькоПросмотр", Истина);
			ОткрытьФорму(
				ИмяФормыВыбора,
				ПараметрыОткрытия,
				ЭтотОбъект,,,,,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		Иначе
			
			ОбработчикОповещения = Новый ОписаниеОповещения(ИмяПроцедурыОбработки,
				ЭтотОбъект,
				Новый Структура("ИмяРеквизита", ИмяРеквизита));
				
			ОткрытьФорму(
				ИмяФормыВыбора,
				ПараметрыОткрытия,
				ЭтотОбъект,,,,
				ОбработчикОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеРеквизитовОбъекта(Результат, ДополнительныеПараметры) Экспорт
	
	ОчиститьСообщения();
	Если РежимМастера = СервисДоставкиКлиентСервер.РежимМастераЗарегистрирован() Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
		
		ИмяРеквизита = СтрЗаменить(ДополнительныеПараметры.ИмяРеквизита, "Ссылка", "");
		ИмяРеквизита = ИмяРеквизита + "Реквизиты";
		ОбработатьИзменениеРеквизитаФормы(ИмяРеквизита);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПоЗначениюОпции()
	
	Если ОпцияДоступнаКурьерика Тогда
		
		Элементы.ГруппаПодпискаНаСервис.Видимость = ОтображатьУведомлениеПоОпцииКурьерика;
		Элементы.ГруппаИнформацияСостояние.Доступность = Истина;
		Элементы.ГруппаКоманднаяПанельДействия.Доступность = Истина;
		Элементы.ГруппаСтраницы.ТолькоПросмотр = Ложь;
		Элементы.ДекорацияДобавитьСпособОплаты.Доступность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ПослеВыбораДействияСТоварнымСоставом(Значение, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Значение) <> Тип("ЭлементСпискаЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	Если Значение.Значение = 1 Тогда
		
		Обещание = ВопросАсинх(
			НСтр("ru = 'Товары заказа будут перезаполнены из документов-оснований. Продолжить?'"),
			РежимДиалогаВопрос.ДаНет,,
			КодВозвратаДиалога.Да);
		
		Ответ = Ждать Обещание;
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			ПараметрыЗаказа = ПараметрыЗаказаНаДоставкуПоДокументамОснованиям(ТипГрузоперевозки, ДокументыОснования);
			
			Если ПараметрыЗаказа.Свойство("ТоварныйСостав") Тогда
				
				ТоварныйСостав.Очистить();
				
				Для Каждого ТекСтрока Из ПараметрыЗаказа.ТоварныйСостав Цикл
					
					НоваяСтрока = ТоварныйСостав.Добавить();
					
					Если НоваяСтрока.СтавкаНДСПредставление = "" Тогда
						НоваяСтрока.СтавкаНДСПредставление = НоваяСтрока.СтавкаНДС;
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
					
				КонецЦикла;
				
			КонецЕсли;
			
			ПриИзмененииРеквизита("ТоварныйСостав");
			Модифицированность = Истина;
			
			ТребуетсяПовторнаяОтправка = Ложь;
			ТоварныйСоставОбновлен = Истина;
			Элементы.ГруппаПерезаполнениеТоваров.Видимость = Ложь;
			
		КонецЕсли;
		
	ИначеЕсли Значение.Значение = 2 Тогда
		
		Обещание = ВопросАсинх(
			НСтр("ru = 'Изменения товарного состава заказа не будут отправлены в сервис. Продолжить?'"),
			РежимДиалогаВопрос.ДаНет,,
			КодВозвратаДиалога.Нет);
		
		Ответ = Ждать Обещание;
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			ИгнорироватьИзмененияНаСервере(ИдентификаторЗаказа);
			Оповестить("ОбновитьСписокЗаказовНаДоставку", ТипГрузоперевозки);
			
			ТребуетсяПовторнаяОтправка = Ложь;
			Элементы.ГруппаПерезаполнениеТоваров.Видимость = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИгнорироватьИзмененияНаСервере(Идентификатор)
	
	РегистрыСведений.ДанныеЗаказовСервисДоставки.УстановитьПризнакИзмененияЗаказов(
		Новый Структура("Идентификатор", Идентификатор),
		Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеТелефона()
	
	УстановитьПривилегированныйРежим(Истина);

	Если ЗначениеЗаполнено(ПолучательКонтрагентСсылка) Тогда
		
		Элементы.ПолучательКонтактноеЛицоТелефон.Маска = "";
		Если ПустаяСтрока(ПолучательКонтактноеЛицоТелефонПредставление) Тогда
			ВидКонтактнойИнформацииСтрока = ?(ПолучательКонтрагентЭтоОрганизация, "ТелефонКонтактногоЛицаОрганизации",
				"ТелефонКонтактногоЛицаКонтрагента");
			ПараметрыВидаКонтактнойИнформации = ПараметрыВидаКонтактнойИнформации(ВидКонтактнойИнформацииСтрока);
			ВидКИ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыВидаКонтактнойИнформации, "Вид");
			Если ЗначениеЗаполнено(ВидКИ) Тогда
				Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидКИ, "ВводитьНомерПоМаске, МаскаНомераТелефона");
				Если Реквизиты.ВводитьНомерПоМаске Тогда
					Элементы.ПолучательКонтактноеЛицоТелефон.Маска = Реквизиты.МаскаНомераТелефона;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ПустаяСтрока(ПолучательКонтактноеЛицоТелефонПредставление) Тогда
	
		Отбор = Новый Структура;
		Отбор.Вставить("ТипГрузоперевозки", 3);
		Отбор.Вставить("НаименованиеПараметра", "ВводитьНомерПоМаске");
		Запись = РегистрыСведений.НастройкиОбщиеСервисДоставки.Получить(Отбор);
		Если Запись.Значение = Истина Тогда;
			Отбор.Вставить("НаименованиеПараметра", "МаскаНомераТелефона");
			Запись = РегистрыСведений.НастройкиОбщиеСервисДоставки.Получить(Отбор);
			Если ЗначениеЗаполнено(Запись.Значение) Тогда
				Элементы.ПолучательКонтактноеЛицоТелефон.Маска = Запись.Значение;
			Иначе
				МаскаПоУмолчанию = СервисДоставкиКлиентСервер.МаскаНомераТелефонаПоУмолчанию();
				МенеджерЗаписи = РегистрыСведений.НастройкиОбщиеСервисДоставки.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Отбор);
				МенеджерЗаписи.Значение = МаскаПоУмолчанию;
				МенеджерЗаписи.Записать();
				Элементы.ПолучательКонтактноеЛицоТелефон.Маска = МаскаПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Установить оформление исполнителя (курьера).
// 
// Параметры:
//  Данные - Структура - Данные заказа на доставку
&НаСервере
Процедура УстановитьОформлениеИсполнителя(Данные)
	
	Если ЗначениеЗаполнено(Данные.ИсполнительНаименование) Тогда
		Элементы.Курьер.ЦветТекста = ЦветаСтиля.ЦветТекстаПоля;
		Курьер = СтрШаблон("%1%2", СокрЛП(Данные.ИсполнительНаименование),
			?(ЗначениеЗаполнено(Данные.ИсполнительТелефон), ", " + СокрЛП(Данные.ИсполнительТелефон), ""));
	Иначе
		Элементы.Курьер.ЦветТекста = ЦветТекстаПодсказки;
		Курьер = НСтр("ru = '<не назначен>'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
