
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не СервисДоставки.ПравоРаботыССервисомДоставки(Истина) Тогда
		
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	Параметры.Свойство("ТипГрузоперевозки", ТипГрузоперевозки);
	
	Если Не ЗначениеЗаполнено(ТипГрузоперевозки) Тогда
		
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не выбран тип грузоперевозки'"),,,, Отказ);
		Возврат;
		
	ИначеЕсли Не СервисДоставки.ТипГрузоперевозкиДоступен(ТипГрузоперевозки) Тогда
		
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Выбранный тип грузоперевозки не доступен'"),,,, Отказ);
		Возврат;
		
	КонецЕсли;
	
	НастроитьФормуПоТипуГрузоперевозки();
	
	ДоступнаОтправкаЗаказовНаДоставку = СервисДоставки.ПравоОтправкиЗаказовНаДоставкуПеревозчику();
	
	Если Не ДоступнаОтправкаЗаказовНаДоставку Тогда
		
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Недостаточно прав для работы с настройками.
			|Должна быть доступна роль ""Отправка заказов на доставку перевозчику""'"),,,,
			Отказ);
		
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьДанныеСервиса();
	ЗаполнитьСпискиВыбора();
	ЗаполнитьДанныеПоУмолчанию();
	
	СервисДоставкиПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	Элементы.СоответствиеОбъектовОператоровДоставки.Видимость = Ложь;

	Если ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СКурьерика() Тогда

		ТаблицаСоответствия = Неопределено;
		Параметры.Свойство("СоответствиеСкладов", ТаблицаСоответствия);
		Если ТаблицаСоответствия <> Неопределено Тогда
		
			Элементы.СоответствиеОбъектовОператоровДоставки.Видимость = Истина;
			Для Каждого СтрокаТаблицы Из ТаблицаСоответствия Цикл
				
				НоваяСтрока = СоответствиеСкладов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьДоступностьНастроекКурьерика();
	СформироватьПредставлениеВремениОтгрузки();
	СформироватьПредставлениеВремениДоставки();
	ОбновитьЗаголовокСоответствиеПунктовВыдачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ВладелецФормы <> Неопределено Тогда
		
		ВладелецФормы.СоответствиеСкладов.Очистить();
		
		Для Каждого СтрокаСоотвествия Из СоответствиеСкладов Цикл
			
			НоваяСтрока = ВладелецФормы.СоответствиеСкладов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСоотвествия);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РазмерГабаритПриИзменении(Элемент)
	
	ПриИзмененииГабарита(ЭтотОбъект, ПостфиксЭлемента(Элемент));
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяОтгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбораВремениИДаты(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяОтгрузкиОчистка(Элемент, СтандартнаяОбработка)
	
	ВремяОтгрузкиС = Неопределено;
	ВремяОтгрузкиПо =  Неопределено;
	ВремяОтгрузкиОбедС = Неопределено;
	ВремяОтгрузкиОбедПо = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяДоставкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбораВремениИДаты(2);
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяДоставкиОчистка(Элемент, СтандартнаяОбработка)
	
	ВремяДоставкиС = Неопределено;
	ВремяДоставкиПо =  Неопределено;
	ВремяДоставкиОбедС = Неопределено;
	ВремяДоставкиОбедПо = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОпределенияКонтактногоЛицаПриИзменении(Элемент)
	
	Если СпособОпределенияКонтактногоЛица <> 2 Тогда
		КонтактноеЛицо = Неопределено;
	КонецЕсли;
	
	УстановитьДоступностьНастроекКурьерика();
	
КонецПроцедуры

&НаКлиенте
Процедура УведомлятьОСостоянииПодписки(Элемент)
	
	УстановитьДоступностьНастроекКурьерика();
	
КонецПроцедуры

&НаКлиенте
Процедура ВводитьНомерПоМаскеПриИзменении(Элемент)
	
	УстановитьДоступностьНастроекКурьерика();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьАвтообновлениеПриИзменении(Элемент)
	
	УстановитьДоступностьНастроекКурьерика();
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ЭтоСтраницаПунктыВыдачи = ТекущаяСтраница = Элементы.СоответствиеОбъектовОператоровДоставки;
	
	Элементы.Записать.Видимость = Не ЭтоСтраницаПунктыВыдачи;
	Элементы.Отмена.Видимость = Не ЭтоСтраницаПунктыВыдачи;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСоответствиеСкладов

&НаКлиенте
Процедура СоответствиеСкладовИспользоватьПоУмолчаниюПриИзменении(Элемент)
	
	ПунктВыдачиПоУмолчаниюНаСервере();
	Элементы.СоответствиеСкладов.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствиеСкладовСкладПриИзменении(Элемент)
	
	СоответствиеСкладовСкладПриИзмененииНаСервере();
	ОбновитьЗаголовокСоответствиеПунктовВыдачи();
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствиеСкладовПриИзменении(Элемент)
	
	ОбновитьЗаголовокСоответствиеПунктовВыдачи();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Записать(Команда)
	
	ТекстОшибки = "";
	Отказ = Ложь;
	
	Если Модифицированность Тогда
		
		Если Не Отказ Тогда
			ЗаписатьНастройкиПоУмолчанию(Отказ, ТекстОшибки);
		КонецЕсли;
		
		Если Не Отказ Тогда
			Модифицированность = Ложь;
		Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Отказ Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСоответствие(Команда)
	
	Элементы.СоответствиеСкладов.Доступность = Ложь;
	
	ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
	ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьПунктыВыдачиКлиента();
	ПараметрыОперации.НаименованиеОперации = НСтр("ru = 'Получение списка пунктов выдачи клиента.'");
	
	ВыполнитьЗапрос(ПараметрыОперации);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Процедура ОтменитьВыполнениеЗадания(ИдентификаторЗадания)
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
		ИдентификаторЗадания = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыЗапросаПолучитьПунктыВыдачиКлиента(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаПолучитьПунктыВыдачиКлиента();
	ПараметрыЗапроса.ТипЗагрузки = 1; // 1 - запросить у оператора и получить
	
	Если ЗначениеЗаполнено(ТипГрузоперевозки) Тогда
		ПараметрыЗапроса.ТипГрузоперевозки = ТипГрузоперевозки;
	Иначе
		ТекстОшибки = НСтр("ru = 'Не выбран тип грузоперевозки.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Отказ = Истина;
	КонецЕсли;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапроса(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = Новый Структура();
	
	ИмяПроцедуры = ПараметрыОперации.ИмяПроцедуры;
	
	Если ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьПунктыВыдачиКлиента() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаПолучитьПунктыВыдачиКлиента(ПараметрыОперации, Отказ);
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСети);
	ПараметрыЗапроса.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьЗапрос(ПараметрыОперации)
	
	ИнтернетПоддержкаПодключена = Ложь;
	ОчиститьСообщения();
	
	ИмяФоновогоЗадания = "ФоновоеЗадание" + ПараметрыОперации.ИмяПроцедуры;
	ФоновоеЗадание = ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ПараметрыОперации);
	ЭтотОбъект[ИмяФоновогоЗадания] = ФоновоеЗадание;
	
	Если ИнтернетПоддержкаПодключена = Ложь Тогда
		
		Оповещение = Новый ОписаниеОповещения("ВыполнитьЗапросПродолжение", ЭтотОбъект, ПараметрыОперации);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(Оповещение, ЭтотОбъект);
		Возврат;
		
	Иначе
		
		ПараметрыОперации.Вставить("ФоновоеЗадание", ФоновоеЗадание);
		ВыполнитьЗапросПродолжение(Истина, ПараметрыОперации);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ПараметрыОперации)
	
	// Проверка подключения Интернет-поддержки пользователей.
	ИнтернетПоддержкаПодключена 
		= ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	Если Не ИнтернетПоддержкаПодключена Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Отказ = Ложь;
	ПараметрыЗапроса = ПараметрыЗапроса(ПараметрыОперации, Отказ);
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяФоновогоЗадания = "ФоновоеЗадание" + ПараметрыОперации.ИмяПроцедуры;
	ФоновоеЗадание = ЭтотОбъект[ИмяФоновогоЗадания];
	Если ФоновоеЗадание <> Неопределено Тогда
		ОтменитьВыполнениеЗадания(ФоновоеЗадание.ИдентификаторЗадания);
	КонецЕсли;
	
	Задание = Новый Структура("ИмяПроцедуры, Наименование, ПараметрыПроцедуры");
	Задание.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1. %2'"),
		СервисДоставкиКлиентСервер.ПредставлениеТипаГрузоперевозки(ТипГрузоперевозки),
		ПараметрыОперации.НаименованиеОперации);
	Задание.ИмяПроцедуры = "СервисДоставки." + ПараметрыОперации.ИмяПроцедуры;
	Задание.ПараметрыПроцедуры = ПараметрыЗапроса;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = Задание.Наименование;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	Если ПараметрыОперации.Свойство("ЗапуститьВФоне")
		И ТипЗнч(ПараметрыОперации.ЗапуститьВФоне) = Тип("Булево") Тогда
		ПараметрыВыполнения.ЗапуститьВФоне = ПараметрыОперации.ЗапуститьВФоне;
	КонецЕсли;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(Задание.ИмяПроцедуры,
		Задание.ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьЗапросПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	ИмяФоновогоЗадания = "ФоновоеЗадание" + ДополнительныеПараметры.ИмяПроцедуры;
	
	Если Результат = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'Отсутствует подключение к Интернет-поддержке пользователей.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
		
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("Логин") Тогда
		
		ИнтернетПоддержкаПодключена = Ложь;
		ЭтотОбъект[ИмяФоновогоЗадания] = ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ДополнительныеПараметры);
		ДополнительныеПараметры.Вставить("ФоновоеЗадание", ЭтотОбъект[ИмяФоновогоЗадания]);
		
	КонецЕсли;
	
	Если ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтотОбъект[ИмяФоновогоЗадания].Статус = "Выполняется" Тогда
		
		ОжидатьЗавершениеВыполненияЗапроса(ДополнительныеПараметры);
		
	ИначеЕсли ЭтотОбъект[ИмяФоновогоЗадания].Статус = "Выполнено" Тогда
		
		ВыполнитьЗапросЗавершение(ЭтотОбъект[ИмяФоновогоЗадания], ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьЗавершениеВыполненияЗапроса(ПараметрыОперации)
	
	ИмяФоновогоЗадания = "ФоновоеЗадание" + ПараметрыОперации.ИмяПроцедуры;
	ФоновоеЗадание = ЭтотОбъект[ИмяФоновогоЗадания];
	ПараметрыОперации.Вставить("ФоновоеЗадание", ФоновоеЗадание);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения = ПараметрыОперации.НаименованиеОперации;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	ПараметрыОжидания.Вставить("ИдентификаторЗадания", ФоновоеЗадание.ИдентификаторЗадания);
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ВыполнитьЗапросЗавершение",
		ЭтотОбъект, ПараметрыОперации);
		
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, ОбработкаЗавершения, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ИмяФоновогоЗадания = "ФоновоеЗадание" + ДополнительныеПараметры.ИмяПроцедуры;
	ФоновоеЗадание = ЭтотОбъект[ИмяФоновогоЗадания];
	
	СервисДоставкиКлиент.ОбработатьРезультатФоновогоЗадания(Результат, ДополнительныеПараметры, Ложь);
	Если Результат = Неопределено
		Или ФоновоеЗадание = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Результат.Статус = "Выполнено" Тогда
		
		Если ЗначениеЗаполнено(Результат.АдресРезультата)
			И ЭтоАдресВременногоХранилища(Результат.АдресРезультата)
			И ДополнительныеПараметры.ФоновоеЗадание.ИдентификаторЗадания = ЭтотОбъект[ИмяФоновогоЗадания].ИдентификаторЗадания Тогда
			
			Если  ДополнительныеПараметры.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьПунктыВыдачиКлиента() Тогда
				
				// Загрузка результатов поиска.
				ЗагрузитьРезультатПолученияСпискаПунктовВыдачиКлиента(Результат.АдресРезультата);
				ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатПолученияСпискаПунктовВыдачиКлиента(АдресРезультата)
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		Если ЗначениеЗаполнено(Результат) 
			И ТипЗнч(Результат) = Тип("Структура") Тогда
			
			Если Результат.Свойство("Список") Тогда
				
				СоответствиеСкладов.Очистить();
				
				ЭлементыСписка = Результат.Список;
				
				Для Каждого ТекущийЭлементСписка Из ЭлементыСписка Цикл
					
					НоваяСтрока = СоответствиеСкладов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущийЭлементСписка);
					
				КонецЦикла;
				
			Иначе
				ОперацияВыполнена = Ложь;
			КонецЕсли;
			
			СервисДоставки.ОбработатьБлокОшибок(Результат, ОперацияВыполнена);
			
		Иначе
			ОперацияВыполнена = Ложь;
		КонецЕсли;
		
		УдалитьИзВременногоХранилища(АдресРезультата);
		
	Иначе
		ОперацияВыполнена = Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипГрузоперевозки", ТипГрузоперевозки);
	Запрос.УстановитьПараметр("МассивИдентификаторов", СоответствиеСкладов.Выгрузить().ВыгрузитьКолонку("Идентификатор"));
	Запрос.Текст = ТекстЗапросаПунктыВыдачиПоИдентификаторам();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Идентификатор", Выборка.ИдентификаторОбъекта);
		
		ПоискСтрок = СоответствиеСкладов.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаСклад Из ПоискСтрок Цикл
			
			СтрокаСклад.ИспользоватьПоУмолчанию = Выборка.ЗначениеПоУмолчанию;
			СтрокаСклад.Склад = Выборка.Значение;
			СервисДоставкиКлиентСерверПереопределяемый.ЗаполнитьПредставлениеАдресаСклада(Выборка.Значение, 
																							СтрокаСклад.СкладАдрес);

		КонецЦикла;
		
	КонецЦикла;
	
	Элементы.СоответствиеСкладов.Доступность = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстЗапросаПунктыВыдачиПоИдентификаторам()
	
	Возврат
		"ВЫБРАТЬ
		|	ИдентификаторОбъекта,
		|	Значение,
		|	ЗначениеПоУмолчанию
		|ИЗ
		|	РегистрСведений.СоответствиеОбъектовСервисовДоставки КАК ТаблицаСоответствий
		|ГДЕ
		|	ТипГрузоперевозки = &ТипГрузоперевозки
		|	И ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовСервисовДоставки.ПунктВыдачи)
		|	И ИдентификаторОбъекта В (&МассивИдентификаторов)";
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СоответствиеСкладовНаименование.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СоответствиеСкладовСклад.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СоответствиеСкладов.ИспользоватьПоУмолчанию");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ЖирныйШрифтБЭД);
	
КонецПроцедуры

&НаСервере
Процедура ПунктВыдачиПоУмолчаниюНаСервере()
	
	ТекущиеДанные = СоответствиеСкладов.НайтиПоИдентификатору(Элементы.СоответствиеСкладов.ТекущаяСтрока);
	
	Если ТекущиеДанные.ИспользоватьПоУмолчанию Тогда
		
		Для Каждого СтрокаТЧ Из СоответствиеСкладов Цикл
			
			Если СтрокаТЧ.ПолучитьИдентификатор() <> Элементы.СоответствиеСкладов.ТекущаяСтрока
				И СтрокаТЧ.ИспользоватьПоУмолчанию Тогда
				СтрокаТЧ.ИспользоватьПоУмолчанию = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	ПараметрыЗаписи.Вставить("ИдентификаторОбъекта", ТекущиеДанные.Идентификатор);
	ПараметрыЗаписи.Вставить("ТипОбъекта", Перечисления.ТипыОбъектовСервисовДоставки.ПунктВыдачи);
	ПараметрыЗаписи.Вставить("Значение", ТекущиеДанные.Склад);
	ПараметрыЗаписи.Вставить("ЗначениеПоУмолчанию", ТекущиеДанные.ИспользоватьПоУмолчанию);
	
	РегистрыСведений.СоответствиеОбъектовСервисовДоставки.ДобавитьЗапись(ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура СоответствиеСкладовСкладПриИзмененииНаСервере()
	
	ТекущиеДанные = СоответствиеСкладов.НайтиПоИдентификатору(Элементы.СоответствиеСкладов.ТекущаяСтрока);
	СервисДоставкиКлиентСерверПереопределяемый.ЗаполнитьПредставлениеАдресаСклада(ТекущиеДанные.Склад, 
																					ТекущиеДанные.СкладАдрес);
			
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	ПараметрыЗаписи.Вставить("ИдентификаторОбъекта", ТекущиеДанные.Идентификатор);
	ПараметрыЗаписи.Вставить("ТипОбъекта", Перечисления.ТипыОбъектовСервисовДоставки.ПунктВыдачи);
	ПараметрыЗаписи.Вставить("Значение", ТекущиеДанные.Склад);
	ПараметрыЗаписи.Вставить("ЗначениеПоУмолчанию", ТекущиеДанные.ИспользоватьПоУмолчанию);
	
	РегистрыСведений.СоответствиеОбъектовСервисовДоставки.ДобавитьЗапись(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовокСоответствиеПунктовВыдачи()
	
	КоличествоЗаписей = СоответствиеСкладов.Количество();
	КоличествоНезаполненных = 0;
	Для каждого Строка Из СоответствиеСкладов Цикл
		Если Не ЗначениеЗаполнено(Строка.Склад) Тогда
			КоличествоНезаполненных = КоличествоНезаполненных + 1;
		КонецЕсли;
	КонецЦикла;
	КоличествоЗаполненных = КоличествоЗаписей - КоличествоНезаполненных;
	
	Элементы.СоответствиеОбъектовОператоровДоставки.Заголовок = СтрШаблон(НСтр("ru = 'Пункты выдачи (%1 / %2)'"), КоличествоЗаполненных, КоличествоЗаписей);
	
КонецПроцедуры

#Область ПриИзмененииРеквизитовФормы

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииГабарита(Форма, ПостФикс)
	
	Форма["Объем" + ПостФикс] = 
		Форма["Длина" + ПостФикс] * Форма["Ширина" + ПостФикс] * Форма["Высота" + ПостФикс]/1000000;
	
КонецПроцедуры

#КонецОбласти

#Область ОрганизацияБизнесСети

&НаСервереБезКонтекста
Функция ОрганизацииБизнесСетиНаСервере()
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(СервисДоставкиСлужебный.ОрганизацииБизнесСети());
	
КонецФункции

&НаСервере
Процедура СписокОрганизацийБизнесСети()
	
	СписокОрганизаций = Элементы.Организация.СписокВыбора;
	СписокОрганизаций.Очистить();
	ОрганизацииБизнесСети = ОрганизацииБизнесСетиНаСервере();
	Для Каждого Строка Из ОрганизацииБизнесСети Цикл
		СписокОрганизаций.Добавить(Строка.Организация, Строка["Наименование"]);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьДанныеСервиса()
	
	СписокОрганизацийБизнесСети();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоУмолчанию()
	
	ИнтервалОбновленияИнформацииПоЗаказам = Элементы.ИнтервалОбновленияИнформацииПоЗаказам.МинимальноеЗначение;
	
	Если УправлениеКонтактнойИнформациейСлужебныйПовтИсп.ДоступныМодулиРаботаСАдресами() Тогда
		МодульРаботаСАдресами = ОбщегоНазначения.ОбщийМодуль("РаботаСАдресами");
		МодульРаботаСАдресами.ЗаполнитьМаскиНомераТелефона(Элементы.МаскаНомераТелефона.СписокВыбора);
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТипГрузоперевозки", ТипГрузоперевозки);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиДоставки.НаименованиеПараметра КАК НаименованиеПараметра,
	|	НастройкиДоставки.Значение КАК Значение,
	|	НастройкиДоставки.ЗначениеХранилищеЗначения КАК ЗначениеХранилищеЗначения
	|ИЗ
	|	РегистрСведений.НастройкиОбщиеСервисДоставки КАК НастройкиДоставки
	|ГДЕ
	|	НастройкиДоставки.ТипГрузоперевозки = &ТипГрузоперевозки";
	
	ДанныеПоУмолчанию = Запрос.Выполнить().Выбрать();
	
	Пока ДанныеПоУмолчанию.Следующий() Цикл
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, 
			ДанныеПоУмолчанию.НаименованиеПараметра) Тогда
			
			Значение = Неопределено;
			
			Если ЗначениеЗаполнено(ДанныеПоУмолчанию.Значение) Тогда
				Значение = ДанныеПоУмолчанию.Значение;
			ИначеЕсли ЗначениеЗаполнено(ДанныеПоУмолчанию.ЗначениеХранилищеЗначения) Тогда 
				Значение = ДанныеПоУмолчанию.ЗначениеХранилищеЗначения.Получить();
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Значение) Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(ЭтотОбъект, 
					ДанныеПоУмолчанию.НаименованиеПараметра, 
					Значение);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПриИзмененииГабарита(ЭтотОбъект, "ЕдиницыТовара");
	ПриИзмененииГабарита(ЭтотОбъект, "ГрузовогоМеста");
	
КонецПроцедуры

#Область ЗаписьНастроек

&НаСервере
Процедура ЗаписатьНастройкиПоУмолчанию(Отказ, ТекстОшибки)
	
	Попытка
		
		НаборЗаписей = РегистрыСведений.НастройкиОбщиеСервисДоставки.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.ТипГрузоперевозки.Установить(ТипГрузоперевозки);
		
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "ОрганизацияБизнесСети");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "ВесЕдиницыТовара");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "ВысотаЕдиницыТовара");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "ДлинаЕдиницыТовара");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "ШиринаЕдиницыТовара");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "ВесГрузовогоМеста");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "ВысотаГрузовогоМеста");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "ДлинаГрузовогоМеста");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "ШиринаГрузовогоМеста");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "ВремяДоставкиОбедПо");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "ВремяДоставкиОбедС");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "ВремяДоставкиПо");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "ВремяДоставкиС");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "ВремяОтгрузкиОбедПо");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "ВремяОтгрузкиОбедС");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "ВремяОтгрузкиПо");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "ВремяОтгрузкиС");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "КонтактноеЛицо");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "СпособОпределенияКонтактногоЛица");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "СпособДоставки");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "СпособОтгрузки");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "ЗаказчикРоль");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "ВариантДоставки");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "КоличествоКалендарныхДней");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "ОстатокДоступныхЗаказов");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "УведомлятьОСостоянииПодписки");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "ВводитьНомерПоМаске");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "МаскаНомераТелефона");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "ИнтервалОбновленияИнформацииПоЗаказам");
		ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, "ИспользоватьАвтообновление");
		
		НаборЗаписей.Записать(Истина);
		
	Исключение
		
		Отказ = Истина;
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискиВыбора()
	
	СписокВыбора = Элементы.СпособОпределенияКонтактногоЛица.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(1, НСтр("ru = 'Указывать вручную'"));
	СписокВыбора.Добавить(2, НСтр("ru = 'Ответственный за доставку'"));
	
	СервисДоставкиПереопределяемый.ЗаполнитьСписокВыбораСпособаОпределенияКонтактногоЛица(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаписьЗначенияПоУмолчанию(НаборЗаписей, НаименованиеПараметра)
	
	Если ЗначениеЗаполнено(ЭтотОбъект[НаименованиеПараметра]) Тогда
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.НаименованиеПараметра = НаименованиеПараметра;
		НоваяЗапись.ТипГрузоперевозки = НаборЗаписей.Отбор.ТипГрузоперевозки.Значение;
		
		Если ТипЗнч(ЭтотОбъект[НаименованиеПараметра]) = Тип("СписокЗначений") Тогда
			НоваяЗапись.ЗначениеХранилищеЗначения = Новый ХранилищеЗначения(ЭтотОбъект[НаименованиеПараметра]);
			НоваяЗапись.Значение = Неопределено;
		Иначе
			НоваяЗапись.Значение = ЭтотОбъект[НаименованиеПараметра];
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Функция ПостфиксЭлемента(Элемент)
	
	Если СтрНайти(Элемент.Имя, "ЕдиницыТовара") > 0 Тогда
		Возврат "ЕдиницыТовара";
	Иначе
		Возврат "ГрузовогоМеста";
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура НастроитьФормуПоТипуГрузоперевозки()
	
	Заголовок = СтрШаблон(НСтр("ru = '%1: Общие настройки'"),
		СервисДоставкиКлиентСервер.ПредставлениеТипаГрузоперевозки(ТипГрузоперевозки));
	
КонецПроцедуры

#Область ВремяОтгрузки

&НаКлиенте
Процедура ОткрытьФормуВыбораВремениИДаты(ВариантВыбораВремени)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборДатыВремени", ЭтотОбъект);
	
	ПараметрыОткрытияФормы = Новый Структура;
	
	Если ВариантВыбораВремени = 1 Тогда
		
		ПараметрыОткрытияФормы.Вставить("ВремяРаботыС", ВремяОтгрузкиС);
		ПараметрыОткрытияФормы.Вставить("ВремяРаботыПо", ВремяОтгрузкиПо);
		ПараметрыОткрытияФормы.Вставить("ВремяОбедС", ВремяОтгрузкиОбедС);
		ПараметрыОткрытияФормы.Вставить("ВремяОбедПо", ВремяОтгрузкиОбедПо);
		ПараметрыОткрытияФормы.Вставить("ВариантВыбораВремени", 1);
		
	ИначеЕсли ВариантВыбораВремени = 2 Тогда
		
		ПараметрыОткрытияФормы.Вставить("ВремяРаботыС", ВремяДоставкиС);
		ПараметрыОткрытияФормы.Вставить("ВремяРаботыПо", ВремяДоставкиПо);
		ПараметрыОткрытияФормы.Вставить("ВремяОбедС", ВремяДоставкиОбедС);
		ПараметрыОткрытияФормы.Вставить("ВремяОбедПо", ВремяДоставкиОбедПо);
		ПараметрыОткрытияФормы.Вставить("ВариантВыбораВремени", 2);
			
	КонецЕсли;
	
	ПараметрыОткрытияФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	ОткрытьФорму(
		"Обработка.СервисДоставки.Форма.ВыборВремениПередачиГруза",
		ПараметрыОткрытияФормы,
		ЭтотОбъект,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборДатыВремени(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ВариантВыбораВремени = 0;
	Если Результат.Свойство("ВариантВыбораВремени", ВариантВыбораВремени) Тогда 
		Если ВариантВыбораВремени = 1 Тогда
			
			Результат.Свойство("ВремяРаботыС", ВремяОтгрузкиС);
			Результат.Свойство("ВремяРаботыПо", ВремяОтгрузкиПо);
			Результат.Свойство("ВремяОбедС", ВремяОтгрузкиОбедС);
			Результат.Свойство("ВремяОбедПо", ВремяОтгрузкиОбедПо);
			
			СформироватьПредставлениеВремениОтгрузки();
			
		ИначеЕсли ВариантВыбораВремени = 2 Тогда

			Результат.Свойство("ВремяРаботыС", ВремяДоставкиС);
			Результат.Свойство("ВремяРаботыПо", ВремяДоставкиПо);
			Результат.Свойство("ВремяОбедС", ВремяДоставкиОбедС);
			Результат.Свойство("ВремяОбедПо", ВремяДоставкиОбедПо);
			
			СформироватьПредставлениеВремениДоставки();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПредставлениеВремениОтгрузки()
	
	ВремяОтгрузкиПредставление = ПредставлениеДатыВремени(ВремяОтгрузкиС, 
									ВремяОтгрузкиПо, 
									ВремяОтгрузкиОбедС, 
									ВремяОтгрузкиОбедПо, 1);
									
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПредставлениеВремениДоставки()
	
	ВремяДоставкиПредставление = ПредставлениеДатыВремени(ВремяДоставкиС, 
									ВремяДоставкиПо, 
									ВремяДоставкиОбедС, 
									ВремяДоставкиОбедПо, 2);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеДатыВремени(ВремяРаботыС, ВремяРаботыПо, ВремяОбедС, ВремяОбедПо, Режим)
	
	СтрокаПредставления = "";
	
	Если ЗначениеЗаполнено(ВремяРаботыС) ИЛИ ЗначениеЗаполнено(ВремяРаботыПо) Тогда
		СтрокаПредставления = СтрокаПредставления + Формат(ВремяРаботыС, "ДФ=HH:mm; ДП=00:00")
			+ "-" + Формат(ВремяРаботыПо, "ДФ=HH:mm");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВремяОбедС) ИЛИ ЗначениеЗаполнено(ВремяОбедПо) Тогда
		СтрокаПредставления = СтрокаПредставления + " (обед " + Формат(ВремяОбедС, "ДФ=HH:mm; ДП=00:00")
			+ "-" + Формат(ВремяОбедПо, "ДФ=HH:mm") + ")";
	КонецЕсли;
	
	Возврат СтрокаПредставления;
	
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьНастроекКурьерика()
	
	Элементы.КоличествоКалендарныхДней.Доступность = УведомлятьОСостоянииПодписки;
	Элементы.ОстатокДоступныхЗаказов.Доступность = УведомлятьОСостоянииПодписки;
	
	Элементы.КонтактноеЛицо.Доступность = (СпособОпределенияКонтактногоЛица = 2);
	Элементы.МаскаНомераТелефона.Доступность = ВводитьНомерПоМаске;
	
	Элементы.ИнтервалОбновленияИнформацииПоЗаказам.Доступность = ИспользоватьАвтообновление;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	ЭтоКурьерика = ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СКурьерика();

	Элементы.ПараметрыГруза.Видимость = Не ЭтоКурьерика;
	Элементы.ГруппаЗаказчикРоль.Видимость = Не ЭтоКурьерика;
	Элементы.ГруппаКонтактноеЛицо.Видимость = Не ЭтоКурьерика;
	Элементы.ГруппаОсновноеПериоды.Видимость = Не ЭтоКурьерика;
	Элементы.ГруппаНастройкиКурьерика.Видимость = ЭтоКурьерика;

КонецПроцедуры

#КонецОбласти

#КонецОбласти
