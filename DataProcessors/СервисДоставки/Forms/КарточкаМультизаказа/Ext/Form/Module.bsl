#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не СервисДоставки.ПравоРаботыССервисомДоставки(Истина) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.Свойство("ТипГрузоперевозки", ТипГрузоперевозки);
	
	Если НЕ ЗначениеЗаполнено(ТипГрузоперевозки) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не выбран тип грузоперевозки'"));
		Отказ = Истина;
		Возврат;
	ИначеЕсли НЕ СервисДоставки.ТипГрузоперевозкиДоступен(ТипГрузоперевозки) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Выбранный тип грузоперевозки не доступен'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.Свойство("ИдентификаторЗаказа", ИдентификаторЗаказа);
	Параметры.Свойство("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	
	СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ОрганизацияБизнесСетиСсылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиДоступныхДействий = ПолучитьВсеДоступныеДействия();
	
	ФоновоеЗаданиеПолучитьМультизаказНаДоставку = ПолучитьЗаказНаДоставкуВФоне();
	
	УстановитьВидимостьДоступность();
	СформироватьЗаголовокФормы();
	СформироватьСтрокуПредставлениеСостоянияЗаказаФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(ФоновоеЗаданиеПолучитьМультизаказНаДоставку) Тогда
		ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
		ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьМультизаказНаДоставку();
		ПараметрыОперации.НаименованиеОперации = НСтр("ru = 'Получение данных по заказу на доставку.'");
		
		ОжидатьЗавершениеВыполненияЗапроса(ПараметрыОперации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаказы

&НаКлиенте
Процедура ЗаказыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ОткрытьФормуЗаказа(Заказы.НайтиПоИдентификатору(ВыбраннаяСтрока));
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПерейтиКарточка(Команда)
	
	СброситьПометкиКомандШапки(Элементы);
	Элементы.ПерейтиКарточка.Пометка = Истина;
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаКарточка;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиЗаказы(Команда)
	
	СброситьПометкиКомандШапки(Элементы);
	Элементы.ПерейтиЗаказы.Пометка = Истина;
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаЗаказы;
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	ОписаниеОЗавершении = Новый ОписаниеОповещения("ЗавершениеОтменитьЗаказ", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОЗавершении, НСтр("ru='Отменить мультизаказ?'"), РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеОтменитьЗаказ(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда //Отменить
		ОтменитьЗаказНаДоставку();
	ИначеЕсли Результат = КодВозвратаДиалога.Повторить Тогда //Отменить платно
		ОтменитьЗаказНаДоставку(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ИдентификаторЗаказа", ИдентификаторЗаказа);
	ПараметрыОткрытияФормы.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	ПараметрыОткрытияФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);

	ОткрытьФорму(
		"Обработка.СервисДоставки.Форма.ПечатныеФормы",
		ПараметрыОткрытияФормы,
		ЭтаФорма,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЗаказов(Команда)
	
	ТекущаяСтрока = Элементы.Заказы.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИдентификаторыЗаказов = Новый СписокЗначений();
	
	ТекущаяСтрока = Неопределено;
	Для Каждого ИдентификаторСтроки Из Элементы.Заказы.ВыделенныеСтроки Цикл
		ТекущаяСтрока = Заказы.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ТекущаяСтрока = Неопределено Или Не ЗначениеЗаполнено(ТекущаяСтрока.Идентификатор) Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторыЗаказов.Добавить(ТекущаяСтрока.Идентификатор);
	КонецЦикла;
	
	Если ИдентификаторыЗаказов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ИдентификаторыЗаказов", ИдентификаторыЗаказов);
	ПараметрыОткрытияФормы.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	ПараметрыОткрытияФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	ОткрытьФорму(
		"Обработка.СервисДоставки.Форма.ПечатныеФормы",
		ПараметрыОткрытияФормы,
		ЭтаФорма,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПоЗаказуУГрузоперевозчика(Команда)
	
	ОбновитьЗаказНаДоставку();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбработатьПараметры(Параметры, Префикс = "")
	
	ПараметрыДляФормы = Новый Структура;
	
	СервисДоставкиКлиентСервер.ЗаполнитьЛинейныеДанныеПоСтруктуре(Параметры, ПараметрыДляФормы, Префикс);
	
	Если ПараметрыДляФормы.Свойство("ТипГрузоперевозки") Тогда
		
		Если ПараметрыДляФормы.ТипГрузоперевозки = 0 Тогда
			ПараметрыДляФормы.ТипГрузоперевозки = ?(ТипГрузоперевозки = 0, 1, ТипГрузоперевозки);
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаИсключений = "";
	
	Если ПараметрыДляФормы.Свойство("Заказы") Тогда
		СтрокаИсключений = СтрокаИсключений + "Заказы";
	КонецЕсли;
	
	Если ПараметрыДляФормы.Свойство("ГрузоперевозчикИдентификатор")
		И ПараметрыДляФормы.ГрузоперевозчикИдентификатор = "" Тогда
		ПараметрыДляФормы.Удалить("ГрузоперевозчикИдентификатор");
		ПараметрыДляФормы.Удалить("ГрузоперевозчикНаименование");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, ПараметрыДляФормы,,СтрокаИсключений);
	УстановитьПризнакОрганизаций();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакОрганизаций()
	
	ТипКонтрагента = ТипЗнч(ОтправительКонтрагентСсылка);
	ОтправительКонтрагентЭтоОрганизация
		= Метаданные.ОпределяемыеТипы.ОрганизацияСервисДоставки.Тип.СодержитТип(ТипКонтрагента);
	
	ТипКонтрагента = ТипЗнч(ПлательщикКонтрагентСсылка);
	ПлательщикКонтрагентЭтоОрганизация
		= Метаданные.ОпределяемыеТипы.ОрганизацияСервисДоставки.Тип.СодержитТип(ТипКонтрагента);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность();
	
	Элементы.ГруппаДоступныеДействияОтменитьЗаказ.Видимость = ДоступнаОтмена;
	
	Элементы.ГруппаДоступныеДействия.Видимость = Элементы.ГруппаДоступныеДействияОтменитьЗаказ.Видимость;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЗаголовокФормы()
	
	Если ЗначениеЗаполнено(НомерЗаказа) Тогда
		ЗаказНаДоставкуПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 %2 от %3'"),
			ТипНаименование, НомерЗаказа, Формат(ДатаЗаказа, "ДЛФ=D"));
	Иначе
		ЗаказНаДоставкуПредставление = НСтр("ru='Мультизаказ (открытие)'");
	КонецЕсли;
	
	ТекстЗаголовка = НСтр("ru = '%1: %2'");
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстЗаголовка,
		СервисДоставкиКлиентСервер.ПредставлениеТипаГрузоперевозки(ТипГрузоперевозки),
		ЗаказНаДоставкуПредставление);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтрокуПредставлениеСостоянияЗаказаФормы()
	
	СостояниеПредставление = "";
	Если ЗначениеЗаполнено(Состояние) Тогда
		СостояниеПредставление = Состояние;
	КонецЕсли;
	
	Элементы.ДекорацияСостояниеПредставление.Заголовок = СостояниеПредставление;
	
	УстановитьВидимостьДоступныхДействий();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеДатыВремени(ДатаДоставки, ВремяРаботыС, ВремяРаботыПо, ВремяОбедС, ВремяОбедПо, Режим)
	
	СтрокаПредставления = "";
	
	Если ЗначениеЗаполнено(ВремяРаботыС) ИЛИ ЗначениеЗаполнено(ВремяРаботыПо) Тогда
		СтрокаПредставления = СтрокаПредставления + Формат(ВремяРаботыС, "ДФ=HH:mm; ДП=00:00")
			+ "-" + Формат(ВремяРаботыПо, "ДФ=HH:mm");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВремяОбедС) ИЛИ ЗначениеЗаполнено(ВремяОбедПо) Тогда
		СтрокаПредставления = СтрокаПредставления + " (обед " + Формат(ВремяОбедС, "ДФ=HH:mm; ДП=00:00")
			+ "-" + Формат(ВремяОбедПо, "ДФ=HH:mm") + ")";
	КонецЕсли;
	
	Возврат СтрокаПредставления;
	
КонецФункции

&НаКлиенте
Процедура СброситьПометкиКомандШапки(Элементы)
	
	Элементы.ПерейтиКарточка.Пометка = Ложь;
	Элементы.ПерейтиЗаказы.Пометка = Ложь;
	
КонецПроцедуры

#Область ЗапросыКСервису

&НаКлиенте
Процедура ОтменитьЗаказНаДоставку(ПлатнаяОтмена = Ложь)
	
	ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
	ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыОтменитьМультизаказНаДоставку();
	ПараметрыОперации.НаименованиеОперации = НСтр("ru = 'Отмена мультизаказа на доставку.'");
	ПараметрыОперации.ВыводитьОкноОжидания = Истина;
	ПараметрыОперации.Вставить("ПлатнаяОтмена", ПлатнаяОтмена);
	
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаказНаДоставку()
	
	ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
	ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыОбновитьМультизаказНаДоставку();
	ПараметрыОперации.НаименованиеОперации = НСтр("ru = 'Обновление данных по мультизаказу на доставку'");
	ПараметрыОперации.ВыводитьОкноОжидания = Истина;
	
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

#КонецОбласти

#Область ВыполнитьЗапрос

&НаКлиенте
Процедура ВыполнитьЗапрос(ПараметрыОперации)
	
	ИнтернетПоддержкаПодключена = Ложь;
	ОчиститьСообщения();
	
	ИмяФоновогоЗадания = "ФоновоеЗадание" + ПараметрыОперации.ИмяПроцедуры;
	ФоновоеЗадание = ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ПараметрыОперации);
	ЭтотОбъект[ИмяФоновогоЗадания] = ФоновоеЗадание;
	
	Если ИнтернетПоддержкаПодключена = Ложь Тогда
		
		// Загрузка с проверкой подключения интернет-поддержки.
		Оповещение = Новый ОписаниеОповещения("ВыполнитьЗапросПродолжение", ЭтотОбъект, ПараметрыОперации);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(Оповещение, ЭтотОбъект);
		Возврат;
		
	Иначе
		
		ПараметрыОперации.Вставить("ФоновоеЗадание", ФоновоеЗадание);
		ВыполнитьЗапросПродолжение(Истина, ПараметрыОперации);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	ИмяФоновогоЗадания = "ФоновоеЗадание"+ ДополнительныеПараметры.ИмяПроцедуры;
	
	Если Результат = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Отсутствует подключение к Интернет-поддержке пользователей.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("Логин") Тогда
		// Повторный вызов метода после подключения к Интернет-поддержке.
		ИнтернетПоддержкаПодключена = Ложь;
		ЭтотОбъект[ИмяФоновогоЗадания] = ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ДополнительныеПараметры);
		ДополнительныеПараметры.Добавить("ФоновоеЗадание", ЭтотОбъект[ИмяФоновогоЗадания]);
	КонецЕсли;
	
	Если ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтотОбъект[ИмяФоновогоЗадания].Статус = "Выполняется" Тогда
		
		ОжидатьЗавершениеВыполненияЗапроса(ДополнительныеПараметры);
		
	ИначеЕсли ЭтотОбъект[ИмяФоновогоЗадания].Статус = "Выполнено" Тогда
		
		ВыполнитьЗапросЗавершение(ЭтотОбъект[ИмяФоновогоЗадания], ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьЗавершениеВыполненияЗапроса(ПараметрыОперации)
	
	ВыводитьОкноОжидания = ?(ЗначениеЗаполнено(ПараметрыОперации.ВыводитьОкноОжидания), 
																	ПараметрыОперации.ВыводитьОкноОжидания,
																	Ложь);
	// Установка картинки длительной операции.
	Если Не ВыводитьОкноОжидания Тогда
		
		Если ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьМультизаказНаДоставку() Тогда
			
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОжиданиеЗагрузкиЗаказа;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Инициализация обработчик ожидания завершения.
	ИмяФоновогоЗадания = "ФоновоеЗадание" + ПараметрыОперации.ИмяПроцедуры;
	ФоновоеЗадание = ЭтотОбъект[ИмяФоновогоЗадания];
	ПараметрыОперации.Вставить("ФоновоеЗадание", ФоновоеЗадание);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения = ПараметрыОперации.НаименованиеОперации;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
	ПараметрыОжидания.ВыводитьОкноОжидания = ВыводитьОкноОжидания;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	ПараметрыОжидания.Вставить("ИдентификаторЗадания", ФоновоеЗадание.ИдентификаторЗадания);
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ВыполнитьЗапросЗавершение",
		ЭтотОбъект, ПараметрыОперации);
		
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, ОбработкаЗавершения,	ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	// Инициализация.
	Отказ = Ложь;
	ТекстСообщения = "";
	ДанныеОбновлены = Ложь;
	
	ИмяФоновогоЗадания = "ФоновоеЗадание" + ДополнительныеПараметры.ИмяПроцедуры;
	ФоновоеЗадание = ЭтотОбъект[ИмяФоновогоЗадания];
	
	// Вывод сообщений из фонового задания.
	Если Результат = Неопределено ИЛИ ФоновоеЗадание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СервисДоставкиКлиент.ОбработатьРезультатФоновогоЗадания(Результат, ДополнительныеПараметры, Отказ);
	
	// Проверка результата поиска.
	Если Не Отказ И Результат.Статус = "Выполнено" Тогда
		Если ЗначениеЗаполнено(Результат.АдресРезультата)
			И ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда
			
			Если ДополнительныеПараметры.ИмяПроцедуры
				= СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьМультизаказНаДоставку()
				И ДополнительныеПараметры.ФоновоеЗадание.ИдентификаторЗадания
				= ЭтотОбъект[ИмяФоновогоЗадания].ИдентификаторЗадания Тогда
				
				ДанныеОбновлены = Истина;
				ЗагрузитьРезультатПолученияЗаказаНаДоставку(Результат.АдресРезультата, ДанныеОбновлены);
				ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено;
				
			ИначеЕсли ДополнительныеПараметры.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыОбновитьМультизаказНаДоставку()
				И ДополнительныеПараметры.ФоновоеЗадание.ИдентификаторЗадания
				= ЭтотОбъект[ИмяФоновогоЗадания].ИдентификаторЗадания Тогда
					
				ЗагрузитьРезультатОбновленияЗаказа(Результат.АдресРезультата, ДанныеОбновлены);
				Если ДанныеОбновлены Тогда
					ЗагрузитьРезультатПолученияЗаказаНаДоставку(Результат.АдресРезультата, ДанныеОбновлены);
				КонецЕсли;
				ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено;
				
			ИначеЕсли ДополнительныеПараметры.ИмяПроцедуры
				= СервисДоставкиКлиентСервер.ИмяПроцедурыОтменитьМультизаказНаДоставку()
				И ДополнительныеПараметры.ФоновоеЗадание.ИдентификаторЗадания
				= ЭтотОбъект[ИмяФоновогоЗадания].ИдентификаторЗадания Тогда
				
				РезультатОтмены = 0;
				СуммаОтмены = 0;
				ЗагрузитьРезультатОтменыЗаказа(Результат.АдресРезультата, РезультатОтмены, СуммаОтмены);
				Если РезультатОтмены = 1 Тогда //Отменен
					
					ТекстПояснения = НСтр("ru='Мультизаказ на доставку отменен.'");
					ПоказатьОповещениеПользователя(НСтр("ru='Отмена:'"),, ТекстПояснения, БиблиотекаКартинок.Информация32);
					Оповестить("ОбновитьСписокЗаказовНаДоставку", ТипГрузоперевозки);
					Закрыть();
					
				ИначеЕсли РезультатОтмены = 2 Тогда //Возможна платная отмена
					
					ОписаниеОЗавершении = Новый ОписаниеОповещения("ЗавершениеОтменитьЗаказ", ЭтотОбъект);
					
					СписокКнопок = Новый СписокЗначений();
					СписокКнопок.Добавить(КодВозвратаДиалога.Повторить, НСтр("ru='Да'"));
					СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
					
					ТекстСообщения = НСтр("ru='Доступна только платная отмена мультизаказа.'");
					Если СуммаОтмены > 0 Тогда
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Сумма отмены мультизаказа %1.'"), СуммаОтмены);
					КонецЕсли;
						
					ТекстСообщения = ТекстСообщения + НСтр("ru='Отменить платно заказ?'");
					ПоказатьВопрос(ОписаниеОЗавершении, ТекстСообщения, СписокКнопок);
					
				ИначеЕсли РезультатОтмены = 3 Тогда //Отмена заказа уже невозможна
					
					ТекстПояснения = НСтр("ru='Мультизаказ на доставку невозможно отменить.'");
					ПоказатьОповещениеПользователя(НСтр("ru='Отмена:'"),, ТекстПояснения, БиблиотекаКартинок.Информация32);
					
				КонецЕсли;
				ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено;
				ДанныеОбновлены = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПараметрыЗапроса

&НаСервере
Функция ПараметрыЗапроса(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = Новый Структура();
	
	ИмяПроцедуры = ПараметрыОперации.ИмяПроцедуры;
	
	Если ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьМультизаказНаДоставку() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаПолучитьМультизаказНаДоставку(ПараметрыОперации, Отказ);
	ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыОбновитьМультизаказНаДоставку() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаОбновитьМультизаказНаДоставку(ПараметрыОперации, Отказ);
	ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыОтменитьМультизаказНаДоставку() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаОтменитьМультизаказНаДоставку(ПараметрыОперации, Отказ);
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаПолучитьМультизаказНаДоставку(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаПолучитьМультизаказНаДоставку();
	ПараметрыЗапроса.Вставить("Идентификатор", ИдентификаторЗаказа);

	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаОбновитьМультизаказНаДоставку(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаОбновитьМультизаказНаДоставку();
	ПараметрыЗапроса.Вставить("Идентификатор", ИдентификаторЗаказа);

	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаОтменитьМультизаказНаДоставку(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаОтменитьМультизаказНаДоставку();
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗаказа)
		ИЛИ Не ДоступнаОтмена Тогда
		ТекстСообщения = НСтр("ru='Отмена данного мультизаказа недоступна. Невозможно отменить мультизаказ.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Отказ = Истина;
		Возврат ПараметрыЗапроса;
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("Идентификатор", ИдентификаторЗаказа);
	ПараметрыЗапроса.Вставить("ОтменитьЗаказПлатно", ?(ПараметрыОперации.ПлатнаяОтмена, "1", "0"));
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

#КонецОбласти

#Область ЗагрузитьРезультаты

&НаСервере
Процедура ЗагрузитьРезультатОтменыЗаказа(АдресРезультата, РезультатВыполнения, СуммаОтмены)
	
	РезультатВыполнения = 0;
	ОперацияВыполнена = Истина;
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		Если ЗначениеЗаполнено(Результат) 
			И ТипЗнч(Результат) = Тип("Структура") Тогда
			
			Если Результат.Свойство("Идентификатор") Тогда
				
				Если Результат.Свойство("ДокументОтменен")
					И Результат.ДокументОтменен = Истина Тогда
					РезультатВыполнения = 1;
					ЗаполнитьЗначенияСвойств(ЭтаФорма, Результат);
					СформироватьИтоговуюИнформацию();
					ТекущаяСтраница = Элементы.ГруппаСтраницы.ТекущаяСтраница;
					УстановитьВидимостьДоступность();
					Элементы.ГруппаСтраницы.ТекущаяСтраница = ТекущаяСтраница;
				ИначеЕсли Результат.Свойство("ДоступнаПлатнаяОтмена")
					И Результат.ДоступнаПлатнаяОтмена = Истина Тогда
					РезультатВыполнения = 2;
					СуммаОтмены = Результат.СуммаПлатнойОтмены;
				ИначеЕсли Результат.Свойство("ДоступнаОтмена")
					И Не Результат.ДоступнаОтмена Тогда
					РезультатВыполнения = 3;
				КонецЕсли;
			Иначе
				СервисДоставки.ОбработатьБлокОшибок(Результат, ОперацияВыполнена);
			КонецЕсли;
			
		Иначе
			ОперацияВыполнена = Ложь;
		КонецЕсли;
	Иначе
		ОперацияВыполнена = Ложь;
	КонецЕсли;
	
	Если ОперацияВыполнена Тогда
		СервисДоставкиПереопределяемый.ОбработатьРезультатЗапросаОтменыМультизаказаНаДоставку(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатОбновленияЗаказа(АдресРезультата, РезультатВыполнения)
	
	ОперацияВыполнена = Истина;
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
			Если Результат.Свойство("ДатаОбновления") Тогда
				ЗаполнитьЗначенияСвойств(ЭтаФорма, Результат);
			Иначе
				ОперацияВыполнена = Ложь;
			КонецЕсли;
			
			Если Результат.Свойство("ЗаказОбновлен") Тогда
				РезультатВыполнения = Результат.ЗаказОбновлен;
			КонецЕсли;
			
			Если Не РезультатВыполнения 
				И Результат.Свойство("Данные") Тогда
				ДанныеЗаказа = Результат.Данные;
				ВерсияПолученныхДанных = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(ДанныеЗаказа);
				РезультатВыполнения = ВерсияПолученныхДанных <> ВерсияДанных;
			КонецЕсли;
			
			Если Результат.Свойство("Ошибки") Тогда
			
				Если ТипЗнч(Результат.Ошибки) = Тип("Массив") Тогда
					
					Для Каждого ТекущаяОшибка Из Результат.Ошибки Цикл
						
						ОбщегоНазначения.СообщитьПользователю(ТекущаяОшибка);
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			ОперацияВыполнена = Ложь;
		КонецЕсли;
		
	Иначе
		ОперацияВыполнена = Ложь;
	КонецЕсли;
	
	Если ОперацияВыполнена Тогда
		СервисДоставкиПереопределяемый.ОбработатьРезультатЗапросаОбновленияМультизаказаНаДоставку(Результат);
		Если Не РезультатВыполнения Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Текущая версия мультизаказа, является актуальной.'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатПолученияЗаказаНаДоставку(АдресРезультата, ДанныеОбновлены = Истина)
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаКарточка;
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			
			Если Результат.Свойство("Данные") Тогда
				
				ДанныеЗаказа = Результат.Данные;
				ВерсияДанных = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(ДанныеЗаказа);
				
				ОбработатьПараметры(ДанныеЗаказа);
				УслугиТарифа.Очистить();
				Если ДанныеЗаказа.Свойство("Услуги") 
					И ДанныеЗаказа.Услуги.Количество() Тогда
					
					Для Каждого ТекущаяУслуга Из ДанныеЗаказа.Услуги Цикл
						
						НоваяУслуга = УслугиТарифа.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяУслуга, ТекущаяУслуга);
						НоваяУслуга.Использовать = Истина;
						НайденныеСтроки = УслугиТарифов.НайтиСтроки(Новый Структура("Идентификатор", НоваяУслуга.Идентификатор));
						
						ТекущаяУслугаТарифов = Неопределено;
						Если НайденныеСтроки.Количество() Тогда
							ТекущаяУслугаТарифов = НайденныеСтроки[0];
							ЗаполнитьЗначенияСвойств(ТекущаяУслугаТарифов, НоваяУслуга,,"Свойства");
							ТекущаяУслугаТарифов.Свойства.Очистить();
						КонецЕсли;
						
						Для Каждого ТекущееСвойство Из ТекущаяУслуга.СвойстваУслуги Цикл
							НовоеСвойство = НоваяУслуга.Свойства.Добавить();
							ЗаполнитьЗначенияСвойств(НовоеСвойство, ТекущееСвойство);
							Если ТекущаяУслугаТарифов <> Неопределено Тогда
								НовоеСвойствоУслугиТарифов = ТекущаяУслугаТарифов.Свойства.Добавить();
								ЗаполнитьЗначенияСвойств(НовоеСвойствоУслугиТарифов, ТекущееСвойство);
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
				
				Заказы.Очистить();
				Если ДанныеЗаказа.Свойство("Заказы") 
					И ДанныеЗаказа.Заказы.Количество() Тогда
					
					Для Каждого ТекущаяСтрока Из ДанныеЗаказа.Заказы Цикл
						НоваяСтрока = Заказы.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
						
						Если ТекущаяСтрока.ДоставкаДоАдреса Тогда
							НоваяСтрока.ВариантДоставки = НСтр("ru='До адреса'");
						Иначе
							НоваяСтрока.ВариантДоставки = НСтр("ru='До терминала'");
						КонецЕсли;
						
						Если ЗначениеЗаполнено(ТекущаяСтрока.АдресДоставкиНаименование) Тогда
							НоваяСтрока.АдресДоставкиПредставление = ТекущаяСтрока.АдресДоставкиТипНаименование
								+ ": " + ТекущаяСтрока.АдресДоставкиНаименование;
						КонецЕсли;
						
					КонецЦикла;
				КонецЕсли;
				
				Элементы.ПерейтиЗаказы.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Заказы (%1)'"),
					Заказы.Количество());
				
				ДополнительныеДанные.Очистить();
				Если ДанныеЗаказа.Свойство("ДополнительныеДанныеЗаказа")
					И ЗначениеЗаполнено(ДанныеЗаказа.ДополнительныеДанныеЗаказа)
					И ДанныеЗаказа.ДополнительныеДанныеЗаказа.Количество() Тогда
					
					Для Каждого ТекущиеДанные Из ДанныеЗаказа.ДополнительныеДанныеЗаказа Цикл
						НоваяСтрока = ДополнительныеДанные.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущиеДанные,,"Список");
						Для Каждого ТекущийЭлементСписка Из ТекущиеДанные.Список Цикл
							НовыйЭлемент = НоваяСтрока.Список.Добавить();
							ЗаполнитьЗначенияСвойств(НовыйЭлемент, ТекущийЭлементСписка);
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
					
				СформироватьСтрокуПредставлениеСостоянияЗаказаФормы();
				УстановитьВидимостьДоступность();
				
				ВремяОтгрузкиПредставление = ПредставлениеДатыВремени(ДатаОтгрузки, 
												ВремяОтгрузкиС, 
												ВремяОтгрузкиПо, 
												ВремяОтгрузкиОбедС, 
												ВремяОтгрузкиОбедПо, 1);
				
				СформироватьЗаголовокФормы();
				СформироватьИтоговуюИнформацию();
				
			КонецЕсли;
			
			Если Результат.Свойство("Ошибки") Тогда
			
				Если ТипЗнч(Результат.Ошибки) = Тип("Массив") Тогда
					
					Для Каждого ТекущаяОшибка Из Результат.Ошибки Цикл
						
						ОбщегоНазначения.СообщитьПользователю(ТекущаяОшибка);
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			ДанныеОбновлены = Ложь;
			
		КонецЕсли;
	Иначе
		
		ДанныеОбновлены = Ложь;
	КонецЕсли;
	
	Если ДанныеОбновлены Тогда
		СервисДоставкиПереопределяемый.ОбработатьРезультатЗапросаПолученияМультизаказаНаДоставку(Результат);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВыполнитьЗапросВФоне

&НаСервере
Функция ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ПараметрыОперации)
	
	// Проверка подключения Интернет-поддержки пользователей.
	ИнтернетПоддержкаПодключена 
		= ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	Если Не ИнтернетПоддержкаПодключена Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Отказ = Ложь;
	ПараметрыЗапроса = ПараметрыЗапроса(ПараметрыОперации, Отказ);
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяФоновогоЗадания = "ФоновоеЗадание" + ПараметрыОперации.ИмяПроцедуры;
	ФоновоеЗадание = ЭтотОбъект[ИмяФоновогоЗадания];
	Если ФоновоеЗадание <> Неопределено Тогда
		ОтменитьВыполнениеЗадания(ФоновоеЗадание.ИдентификаторЗадания);
	КонецЕсли;
	
	Задание = Новый Структура("ИмяПроцедуры, Наименование, ПараметрыПроцедуры");
	
	ТекстЗаголовка = НСтр("ru = '%1: %2'");
	Задание.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстЗаголовка,
		СервисДоставкиКлиентСервер.ПредставлениеТипаГрузоперевозки(ТипГрузоперевозки),
		ПараметрыОперации.НаименованиеОперации);
	
	Задание.ИмяПроцедуры = "СервисДоставки." + ПараметрыОперации.ИмяПроцедуры;
	Задание.ПараметрыПроцедуры = ПараметрыЗапроса;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = Задание.Наименование;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(Задание.ИмяПроцедуры,
		Задание.ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОтменитьВыполнениеЗадания(ИдентификаторЗадания)
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
		ИдентификаторЗадания = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗаказНаДоставкуВФоне()
	
	ПараметрыОперации = ПараметрыОперацииПолучитьЗаказНаДоставку();
	
	Возврат ВыполнитьЗапросВФоне(Ложь, ПараметрыОперации);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыОперацииПолучитьЗаказНаДоставку()

	ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
	ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьМультизаказНаДоставку();
	ПараметрыОперации.НаименованиеОперации = НСтр("ru = 'Получение данных по мультизаказу на доставку'");
	ПараметрыОперации.ВыводитьОкноОжидания = Истина;
	
	Возврат ПараметрыОперации;

КонецФункции

#КонецОбласти

#Область ДоступныеОбласти

&НаКлиентеНаСервереБезКонтекста
// Возвращаемое значение:
//	Структура:
//	*ИмяДействия - Структура - имя доступного действия:
//	**ИмяЭлемента - Строка - имя элемента формы, содержащий команды действия(-й)
//	**Видимость - Булево - признак видимости элементов
Функция ПолучитьВсеДоступныеДействия()
	
	Результат = Новый Структура;
	ПараметрыДействияШаблон = Новый Структура("ИмяЭлемента, Видимость, Доступность", "", Ложь, Ложь);
	
	КлючДействия = ИмяДействияОтменитьЗаказ();
	ПараметрыДействия = СкопироватьРекурсивно(ПараметрыДействияШаблон);
	Результат.Вставить(КлючДействия, ПараметрыДействия);
	
	Для каждого ТекущийЭлемент Из Результат Цикл
		Если НЕ ЗначениеЗаполнено(ТекущийЭлемент.Значение.ИмяЭлемента) Тогда
			ТекущийЭлемент.Значение.Вставить("ИмяЭлемента", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"Группа%1",
				ТекущийЭлемент.Ключ));
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьДоступныхДействий()
	
	ГруппаДоступныеДействия = ПолучитьГруппуДоступныхДействий(Элементы);
	
	// Скорректируем настройки (устраним возможные противоречия)
	
	ЭлементОтменитьЗаказ = НастройкиДоступныхДействий[ИмяДействияОтменитьЗаказ()];
	ЭлементОтменитьЗаказ.Видимость = ДоступнаОтмена;
	ЭлементОтменитьЗаказ.Доступность = ДоступнаОтмена;
	
	Для Каждого НастройкаДоступныхДействий Из НастройкиДоступныхДействий Цикл
		ЗаполнитьЗначенияСвойств(Элементы[НастройкаДоступныхДействий.Значение.ИмяЭлемента],
			НастройкаДоступныхДействий.Значение, "Видимость, Доступность");
	КонецЦикла; 
	
	ЕстьВидимыеПодчиненные = Ложь;
	Для Каждого ЭлементГруппыДоступныеДействий Из ГруппаДоступныеДействия.ПодчиненныеЭлементы Цикл
		Если ЭлементГруппыДоступныеДействий.Видимость Тогда
			ЕстьВидимыеПодчиненные = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	ГруппаДоступныеДействия.Видимость = ЕстьВидимыеПодчиненные;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяДействияОтменитьЗаказ()
	Возврат "ДоступныеДействияОтменитьЗаказ";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьГруппуДоступныхДействий(Элементы)

	Возврат Элементы.ГруппаДоступныеДействия;

КонецФункции

#КонецОбласти

&НаСервере
Процедура СформироватьИтоговуюИнформацию()
	
	ИтоговаяИнформация = ТабличныйДокументИтоговаяИнформация();
	
КонецПроцедуры

&НаСервере
Функция ТабличныйДокументИтоговаяИнформация()
	
	ТабличныйДокумент = Новый ТабличныйДокумент();
	
	Обработка = РеквизитФормыВЗначение("Объект");
	Макет = Обработка.ПолучитьМакет("Мультизаказ");
	
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка");
	ПараметрыОбласти = ОбластьМакетаШапка.Параметры;
	
	ПараметрыОбласти.ГрузоперевозчикНаименование = ГрузоперевозчикНаименование;
	ПараметрыОбласти.РасшифровкаГрузоперевозчик = "Грузоперевозчик";
	ПараметрыОбласти.ТарифНаименование = ТарифНаименование;
	ПараметрыОбласти.РасшифровкаТариф = "Тариф";
	ПараметрыОбласти.ФормаОплатыНаименование = ФормаОплатыНаименование;
	
	ПараметрыОбласти.ОплатаПредставление = ?(Оплачен, НСтр("ru='Оплачено'"), НСтр("ru='Требует оплаты'"));
	
	ПараметрыОбласти.ДатаИВремяОформления = Формат(ДатаСозданияЗаказа,"ДЛФ=DT");
	ПараметрыОбласти.Состояние = Состояние;
	ПараметрыОбласти.ТрекНомер = ТрекНомер;
	
	ТабличныйДокумент.Вывести(ОбластьМакетаШапка);
	
	Если ИсполнительНаименование <> "" ИЛИ ИсполнительТелефон <> "" Тогда
		ОбластьМакетаИсполнитель = Макет.ПолучитьОбласть("Исполнитель");
		ПараметрыОбласти = ОбластьМакетаИсполнитель.Параметры;
		ПараметрыОбласти.ИсполнительПредставление = ИсполнительНаименование;
		ПараметрыОбласти.ИсполнительНомерТелефонаПредставление = ИсполнительТелефон;
		ТабличныйДокумент.Вывести(ОбластьМакетаИсполнитель);
	КонецЕсли;
	
	Если АвтомобильМарка <> "" ИЛИ АвтомобильНомер <> "" Тогда
		ОбластьМакетаАвтомобиль = Макет.ПолучитьОбласть("Автомобиль");
		ПараметрыОбласти = ОбластьМакетаАвтомобиль.Параметры;
		ПараметрыОбласти.АвтомобильПредставление = СокрЛП(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 %2'"),
			АвтомобильМарка,
			АвтомобильНомер));
		ТабличныйДокумент.Вывести(ОбластьМакетаАвтомобиль);
	КонецЕсли;

	Если ПлательщикРоль = 1 Тогда
		ОбластьМакетаКонтрагенты = Макет.ПолучитьОбласть("КонтрагентыБезПлательщика");
	Иначе
		ОбластьМакетаКонтрагенты = Макет.ПолучитьОбласть("Контрагенты");
	КонецЕсли;
	
	ПараметрыОбласти = ОбластьМакетаКонтрагенты.Параметры;
	
	ПараметрыОбласти.ОтправительНаименование = ОтправительКонтрагентНаименование;
	ПараметрыОбласти.РасшифровкаОтправительКонтрагент = "ОтправительКонтрагент";
	ПараметрыОбласти.ОтправительКонтактноеЛицо = ОтправительКонтактноеЛицоНаименование;
	ПараметрыОбласти.ОтправительТелефон = ОтправительКонтактноеЛицоТелефонПредставление;
	ПараметрыОбласти.Отправитель = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Отправитель %1'"),
		?(ПлательщикРоль = 1,
		"(плательщик)",""));
	
	Если ПлательщикРоль <> 1 Тогда
		
		ПараметрыОбласти.ПлательщикНаименование = ПлательщикКонтрагентНаименование;
		ПараметрыОбласти.РасшифровкаПлательщикКонтрагент = "ПлательщикКонтрагент";
		ПараметрыОбласти.ПлательщикКонтактноеЛицо = ПлательщикКонтактноеЛицоНаименование;
		ПараметрыОбласти.ПлательщикТелефон = ПлательщикКонтактноеЛицоТелефонПредставление;
		
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьМакетаКонтрагенты);

	Если ЗначениеЗаполнено(ОтправительКонтактноеЛицоТелефонДополнительныйПредставление) 
		Или ЗначениеЗаполнено(ПлательщикКонтактноеЛицоТелефонДополнительныйПредставление) Тогда
		
		ОбластьМакетаДополнительныйТелефон = Макет.ПолучитьОбласть("ДополнительныйТелефон");
		ПараметрыОбласти = ОбластьМакетаДополнительныйТелефон.Параметры;
	
		Если ЗначениеЗаполнено(ОтправительКонтактноеЛицоТелефонДополнительныйПредставление) Тогда
			ПараметрыОбласти.ТелефонДополнительныйТекст1 = НСтр("ru='Доп. телефон:'");
			ПараметрыОбласти.ТелефонДополнительный1 = ОтправительКонтактноеЛицоТелефонДополнительныйПредставление;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПлательщикКонтактноеЛицоТелефонДополнительныйПредставление) Тогда
			ПараметрыОбласти.ТелефонДополнительныйТекст2 = НСтр("ru='Доп. телефон:'");
			ПараметрыОбласти.ТелефонДополнительный2 = ПлательщикКонтактноеЛицоТелефонДополнительныйПредставление;
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакетаДополнительныйТелефон);
		
	КонецЕсли;
	
	
	ОбластьМакетаАдреса = Макет.ПолучитьОбласть("Адреса");
	ПараметрыОбласти = ОбластьМакетаАдреса.Параметры;
	
	ПараметрыОбласти.СпособОтгрузки = ?(СпособОтгрузки = 1,НСтр("ru='От терминала'"), НСтр("ru='От адреса'"));
	
	Если СпособОтгрузки = 1 Тогда
		ОтправительТерминалОтправительАдрес = ПунктПриемаГрузаНаименование;
		ОтправительТипАдресаНаименование = ?(ПунктПриемаГрузаТипНаименование="", НСтр("ru='Адрес'"),
			ПунктПриемаГрузаТипНаименование);
		Если ЗначениеЗаполнено(ПунктПриемаГрузаАдрес) Тогда
			ОтправительТерминалОтправительАдрес = ОтправительТерминалОтправительАдрес
												  + "(" + ПунктПриемаГрузаАдрес + ")";
		КонецЕсли;
	Иначе
		ОтправительТерминалОтправительАдрес = ОтправительАдресПредставление;
		ОтправительТипАдресаНаименование = НСтр("ru='Адрес'");
	КонецЕсли;
	
	ПараметрыОбласти.РасшифровкаОтправительТерминалОтправительАдрес = "ОтправительТерминалОтправительАдрес";
	ПараметрыОбласти.ОтправительТипАдресаНаименование = ОтправительТипАдресаНаименование;
	
	ПараметрыОбласти.ОтправительТерминалОтправительАдрес = ОтправительТерминалОтправительАдрес;
	ПараметрыОбласти.ОтправительТерминалТелефон = ПунктПриемаГрузаТелефон;
	
	ТабличныйДокумент.Вывести(ОбластьМакетаАдреса);
	
	Если ТипГрузоперевозки = 1 Тогда
		
		ВремяОтгрузкиПредставление = ПредставлениеДатыВремени(ДатаОтгрузки, 
										ВремяОтгрузкиС, 
										ВремяОтгрузкиПо, 
										ВремяОтгрузкиОбедС, 
										ВремяОтгрузкиОбедПо, 1);
										
		ОбластьМакетаШапкаВремя = Макет.ПолучитьОбласть("ШапкаВремя1");
		ПараметрыОбласти = ОбластьМакетаШапкаВремя.Параметры;
		ПараметрыОбласти.ОтправительДатаИВремяОтгрузкиПредставление = Формат(ДатаОтгрузки,"ДЛФ=D")
			+ " " + ВремяОтгрузкиПредставление;
	Иначе
		ОбластьМакетаШапкаВремя = Макет.ПолучитьОбласть("ШапкаВремя1");
		ПараметрыОбласти = ОбластьМакетаШапкаВремя.Параметры;
		ПараметрыОбласти.ОтправительДатаИВремяОтгрузкиПредставление = Формат(ДатаОтгрузки,"ДЛФ=D")
			+" "+?(ЗначениеЗаполнено(ВремяОтгрузкиК), Формат(ВремяОтгрузкиК,"ДЛФ=T"), НСтр("ru = '(на ближайшее время)'"));
			
		ПараметрыОбласти.ПолучательДатаИВремяОтгрузкиПредставление = Формат(ДатаДоставки,"ДЛФ=DT");
			
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьМакетаШапкаВремя);
	
	ОбластьМакетаПараметрыГруза = Макет.ПолучитьОбласть("ПараметрыГруза");
	
	ПараметрыОбласти = ОбластьМакетаПараметрыГруза.Параметры;
	
	ПараметрыОбласти.Валюта = ВалютаНаименование;
	ПараметрыОбласти.ГрузСодержимое = ГрузСодержимое;
	ПараметрыОбласти.ГрузСтоимость = ГрузСтоимость;
	ПараметрыОбласти.ГрузКоличествоГрузовыхМест = ГрузКоличествоГрузовыхМест;
	ПараметрыОбласти.ГрузВес = ГрузВес;
	ПараметрыОбласти.ГрузОбъем = ГрузОбъем;
	ПараметрыОбласти.ГрузМаксимальныйВес = ГрузМаксимальныйВес;
	ПараметрыОбласти.ГрузМаксимальнаяВысота = ГрузМаксимальнаяВысота;
	ПараметрыОбласти.ГрузМаксимальнаяШирина = ГрузМаксимальнаяШирина;
	ПараметрыОбласти.ГрузМаксимальнаяДлина = ГрузМаксимальнаяДлина;
	
	ПараметрыОбласти.Заказы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Кол-во заказов: %1'"),
		Заказы.Количество());
	ПараметрыОбласти.РасшифровкаЗаказы = "Заказы";
	
	ТабличныйДокумент.Вывести(ОбластьМакетаПараметрыГруза);
	
	Если ГрузНегабаритныйВес <> 0 
		ИЛИ ГрузНегабаритныйОбъем <> 0 
		ИЛИ ГрузКоличествоНегабаритныхГрузовыхМест <> 0 Тогда 
		ОбластьПараметрыНегабаритногоГруза = Макет.ПолучитьОбласть("ПараметрыНегабаритногоГруза");
		ОбластьПараметрыНегабаритногоГруза.Параметры.ГрузНегабаритныйВес = ГрузНегабаритныйВес;
		ОбластьПараметрыНегабаритногоГруза.Параметры.ГрузНегабаритныйОбъем = ГрузНегабаритныйОбъем;
		ОбластьПараметрыНегабаритногоГруза.Параметры.ГрузКоличествоНегабаритныхГрузовыхМест 
			= ГрузКоличествоНегабаритныхГрузовыхМест;
		
		ТабличныйДокумент.Вывести(ОбластьПараметрыНегабаритногоГруза);
	КонецЕсли;
	
	ОбластьТабличнаяЧастьУслуги = ТабличнаяЧастьУслуги(Макет, УслугиТарифа);
	ТабличныйДокумент.Вывести(ОбластьТабличнаяЧастьУслуги);

	Если СуммаСкидки <> 0 Тогда
		ОбластьМакетаПодвал = Макет.ПолучитьОбласть("ПодвалСоСкидкой");
		ОбластьМакетаПодвал.Параметры.СуммаСкидки = Формат(СуммаСкидки,"ЧДЦ=2; ЧН=-");
	Иначе
		ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
	КонецЕсли;
	
	ОбластьМакетаПодвал.Параметры.СуммаДокумента = Формат(СуммаДокумента,"ЧДЦ=2; ЧН=-");
	ОбластьМакетаПодвал.Параметры.Валюта = ВалютаНаименование;
	ТабличныйДокумент.Вывести(ОбластьМакетаПодвал);
	
	Если ДополнительнаяИнформация <> "" Тогда
		ОбластьМакетаДополнительнаяИнформация = Макет.ПолучитьОбласть("ДополнительнаяИнформация");
		ОбластьМакетаДополнительнаяИнформация.Параметры.Комментарий = ДополнительнаяИнформация;
		ТабличныйДокумент.Вывести(ОбластьМакетаДополнительнаяИнформация);
	КонецЕсли;
	
	ОбластьМакетаДополнительныеДанныеЗаголовок1 			= Макет.ПолучитьОбласть("ДополнительныеДанныеЗаголовок1");
	ОбластьМакетаДополнительныеДанныеСтрока 				= Макет.ПолучитьОбласть("ДополнительныеДанныеСтрока");
	ОбластьМакетаДополнительныеДанныеСтрокаСНаименованием
		= Макет.ПолучитьОбласть("ДополнительныеДанныеСтрокаСНаименованием");
	
	Для Каждого ТекущиеДополнительныеДанные Из ДополнительныеДанные Цикл
		
		ТекущаяОбласть = ОбластьМакетаДополнительныеДанныеЗаголовок1;
		
		ТекущаяОбласть.Параметры.Наименование = ТекущиеДополнительныеДанные.Наименование;
		ТабличныйДокумент.Вывести(ТекущаяОбласть);
		
		Если ТекущиеДополнительныеДанные.Список.Количество() = 0 Тогда
			ТекущаяОбласть = ОбластьМакетаДополнительныеДанныеСтрока;
			ТекущаяОбласть.Параметры.Значение = ТекущиеДополнительныеДанные.Значение;
			ТабличныйДокумент.Вывести(ТекущаяОбласть);
		Иначе
			Для Каждого ТекущиеДанныеИзСписка Из ТекущиеДополнительныеДанные.Список Цикл
				
				Если ЗначениеЗаполнено(ТекущиеДанныеИзСписка.Наименование) Тогда
					ТекущаяОбласть = ОбластьМакетаДополнительныеДанныеСтрокаСНаименованием;
					ТекущаяОбласть.Параметры.Наименование = ТекущиеДанныеИзСписка.Наименование;
				Иначе
					ТекущаяОбласть = ОбластьМакетаДополнительныеДанныеСтрока;
				КонецЕсли;
				
				ТекущаяОбласть.Параметры.Значение = ТекущиеДанныеИзСписка.Значение;
				ТабличныйДокумент.Вывести(ТекущаяОбласть);
				
			КонецЦикла;
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат ТабличныйДокумент;

КонецФункции 

&НаСервере
Функция ТабличнаяЧастьУслуги(Макет, Услуги)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ОбластьМакетаШапкаТалицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ТабличныйДокумент.Вывести(ОбластьМакетаШапкаТалицы);
	
	ОбластьМакетаКатегория         = Макет.ПолучитьОбласть("СтрокаТаблицыКатегория");
	ОбластьМакетаУслуга = Макет.ПолучитьОбласть("СтрокаТаблицыУслуга");
	ОбластьМакетаСвойство = Макет.ПолучитьОбласть("СтрокаТаблицыСвойство");
	
	ТекущаяКатегория = "";
	Для Каждого ТекущаяУслугаТарифа Из Услуги Цикл
		
		Если (Не ТекущаяУслугаТарифа.Использовать)
			ИЛИ ТекущаяУслугаТарифа.Обязательная Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяКатегория <> ТекущаяУслугаТарифа.Категория Тогда
			ТекущаяКатегория = ТекущаяУслугаТарифа.Категория;
			ОбластьСтрокаТаблицы = ОбластьМакетаКатегория;
			ОбластьСтрокаТаблицы.Параметры.Наименование = ТекущаяУслугаТарифа.Категория;
			ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
		КонецЕсли;
		
		ОбластьСтрокаТаблицы = ОбластьМакетаУслуга;
		ОбластьСтрокаТаблицы.Параметры.Наименование = ТекущаяУслугаТарифа.Наименование;
		ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
		
		Для Каждого ТекущееСвойство Из ТекущаяУслугаТарифа.Свойства Цикл
			ОбластьСтрокаТаблицы = ОбластьМакетаСвойство;
			ЗаполнитьЗначенияСвойств(ОбластьСтрокаТаблицы.Параметры, ТекущееСвойство);
			ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

&НаКлиенте
Процедура ИтоговаяИнформацияОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	Если Расшифровка = "Грузоперевозчик" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуГрузоперевозчика();
		
	ИначеЕсли Расшифровка = "ОтправительТерминалОтправительАдрес" Тогда
		
		СтандартнаяОбработка = Ложь;
		Если СпособОтгрузки = 1 Тогда
			ОткрытьФормуТерминала(ПунктПриемаГрузаИдентификатор);
		Иначе
			АдресНачалоВыбора("ОтправительАдрес", "Откуда", ОтправительКонтрагентЭтоОрганизация);
		КонецЕсли;
		
	ИначеЕсли Расшифровка = "ОтправительКонтрагент" Тогда
		
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(ОтправительКонтрагентСсылка) Тогда
			ОткрытьКонтрагента("ОтправительКонтрагент")
		КонецЕсли;
		
	ИначеЕсли Расшифровка = "ПлательщикКонтрагент" Тогда
		
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(ПлательщикКонтрагентСсылка) Тогда
			ОткрытьКонтрагента("ПлательщикКонтрагент")
		КонецЕсли;
		
	ИначеЕсли Расшифровка = "Тариф" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуТарифа();
		
	ИначеЕсли Расшифровка = "Заказы" Тогда
		
		СтандартнаяОбработка = Ложь;
		ПерейтиЗаказы(Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуЗаказа(ДанныеПоЗаказу)
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("РежимМастера", ?(ДанныеПоЗаказу.СостояниеИдентификатор = 0, 1, 2));
	ПараметрыОткрытияФормы.Вставить("ИдентификаторЗаказа", ДанныеПоЗаказу.Идентификатор);
	ПараметрыОткрытияФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	ПараметрыОткрытияФормы.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	
	СервисДоставкиКлиент.ОткрытьФормуКарточкиЗаказаНаДоставку(ПараметрыОткрытияФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонтрагента(ТипКонтрагента)
	
	ИмяРеквизита = ТипКонтрагента + "Ссылка";
	ИмяРеквизитаЭтоОрганизация = ТипКонтрагента + "ЭтоОрганизация";
	
	ЗначениеРеквизита = ЭтотОбъект[ИмяРеквизита];
	ЭтоОрганизация = ЭтотОбъект[ИмяРеквизитаЭтоОрганизация];
	
	Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
		
		Если ЭтоОрганизация Тогда
			ОткрытьФормуОбъекта("ОрганизацияСервисДоставки", ИмяРеквизита);
		Иначе
			ОткрытьФормуОбъекта("КонтрагентСервисДоставки", ИмяРеквизита);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОбъекта(ИмяОбъекта, ИмяРеквизита, ИмяПроцедурыОбработки="ОбработатьИзменениеРеквизитовОбъекта")
	
	ТекущееЗначениеРеквизита = ЭтотОбъект[ИмяРеквизита];
	
	ИмяФормыВыбора = СервисДоставкиВызовСервера.ИмяФормыОбъектаПоОпределяемомуТипу(ИмяОбъекта);
	
	Если ИмяФормыВыбора <> "" Тогда
		
		ПараметрыОткрытия = Новый Структура();
		ПараметрыОткрытия.Вставить("Ключ", ТекущееЗначениеРеквизита);
		
		ПараметрыОткрытия.Вставить("ТолькоПросмотр", Истина);
														
		ОткрытьФорму(
			ИмяФормыВыбора,
			ПараметрыОткрытия,
			ЭтаФорма,,,,,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуТерминала(Идентификатор)
	
	Если Не ЗначениеЗаполнено(Идентификатор) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытияФормы = Новый Структура;
	
	ПараметрыОткрытияФормы.Вставить("Идентификатор", Идентификатор);
	ПараметрыОткрытияФормы.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	ПараметрыОткрытияФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	ОткрытьФорму(
		"Обработка.СервисДоставки.Форма.КарточкаТерминала",
		ПараметрыОткрытияФормы,
		ЭтаФорма,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
 
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуГрузоперевозчика()
	
	ПараметрыОткрытияФормы = Новый Структура();
	ПараметрыОткрытияФормы.Вставить("Идентификатор", ГрузоперевозчикИдентификатор);
	ПараметрыОткрытияФормы.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	ПараметрыОткрытияФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	ОткрытьФорму("Обработка.СервисДоставки.Форма.КарточкаГрузоперевозчика", 
		ПараметрыОткрытияФормы,
		,
		ГрузоперевозчикИдентификатор,,,,
		РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуТарифа()
	
	ПараметрыОткрытияФормы = Новый Структура();
	ПараметрыОткрытияФормы.Вставить("Идентификатор", ТарифИдентификатор);
	ПараметрыОткрытияФормы.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	ПараметрыОткрытияФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	ОткрытьФорму("Обработка.СервисДоставки.Форма.КарточкаТарифа", 
		ПараметрыОткрытияФормы,
		,
		ТарифИдентификатор,,,,
		РежимОткрытияОкнаФормы.Независимый);
							
КонецПроцедуры

&НаКлиенте
Процедура АдресНачалоВыбора(ИмяЭлемента, Заголовок, ЭтоНашаОрганизация)

	КонтактнаяИнформацияНачалоВыбора(ИмяЭлемента, Заголовок, ?(ЭтоНашаОрганизация, 
												"АдресСкладаОрганизации",
												"АдресСкладаКонтрагента"));
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияНачалоВыбора(ИмяЭлемента, Заголовок, ВидКонтактнойИнформацииСтрока)
	
	ПараметрыВидаКонтактнойИнформации = ПараметрыВидаКонтактнойИнформации(ВидКонтактнойИнформацииСтрока);
	
	Если Не ЗначениеЗаполнено(ПараметрыВидаКонтактнойИнформации) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = ИмяЭлемента;
	ИмяРеквизитаПредставление = ИмяРеквизита + "Представление";
	ИмяРеквизитаЗначенияПолей = ИмяРеквизита + "Значение";
	
	ЭтотОбъект[ИмяРеквизитаЗначенияПолей] = СервисДоставкиВызовСервера.АдресСДополнительнымиПолями(ПараметрыВидаКонтактнойИнформации.Тип, ЭтотОбъект[ИмяРеквизитаЗначенияПолей]);
	
	ПараметрыОткрытия = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
		ПараметрыВидаКонтактнойИнформации.Вид, ЭтотОбъект[ИмяРеквизитаЗначенияПолей],
		ЭтотОбъект[ИмяРеквизитаПредставление],, ПараметрыВидаКонтактнойИнформации.Тип);
		
	ПараметрыОткрытия.Вставить("Заголовок", Заголовок);
	ПараметрыОткрытия.Вставить(
		"ТолькоПросмотр", 
		Истина);
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыВидаКонтактнойИнформации(ВидКонтактнойИнформацииСтрока)
	
	Возврат СервисДоставкиСлужебный.ПараметрыВидаКонтактнойИнформации(ВидКонтактнойИнформацииСтрока);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СкопироватьРекурсивно(Источник)

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	Возврат ОбщегоНазначения.СкопироватьРекурсивно(Источник);
#Иначе	
	Возврат ОбщегоНазначенияКлиент.СкопироватьРекурсивно(Источник);
#КонецЕсли	

КонецФункции

#КонецОбласти
