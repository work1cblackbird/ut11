
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не СервисДоставки.ПравоРаботыССервисомДоставки(Истина) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.Свойство("ТипГрузоперевозки", ТипГрузоперевозки);
	
	Если НЕ ЗначениеЗаполнено(ТипГрузоперевозки) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не выбран тип грузоперевозки'"));
		Отказ = Истина;
		Возврат;
	ИначеЕсли НЕ СервисДоставки.ТипГрузоперевозкиДоступен(ТипГрузоперевозки) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Выбранный тип грузоперевозки не доступен'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СформироватьЗаголовокФормы();
	
	Параметры.Свойство("Идентификатор", Идентификатор);
	Параметры.Свойство("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	
	ДоступноРедактирование = СервисДоставки.ПравоОтправкиЗаказовНаДоставкуПеревозчику();
	
	СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ОрганизацияБизнесСетиСсылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	УстановитьУсловноеОформление();
	ЗаполнитьСпискиВыбора();
	
	ФоновоеЗаданиеПолучитьДанныеПоТарифу = ВыполнитьЗапросПолучитьДанныеТарифаВФоне();
	
	Если ДоступноРедактирование Тогда
		ФоновоеЗаданиеПолучитьУслугиТарифов = ВыполнитьЗапросПолучитьУслугиТарифовВФоне();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(ФоновоеЗаданиеПолучитьДанныеПоТарифу) Тогда
		
		ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
		ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьДанныеПоТарифу();
		ПараметрыОперации.НаименованиеОперации = НСтр("ru = 'Получение данных тарифа.'");
		
		ОжидатьЗавершениеВыполненияЗапроса(ПараметрыОперации);
		
	КонецЕсли;

	Если ЗначениеЗаполнено(ФоновоеЗаданиеПолучитьУслугиТарифов) Тогда
		
		ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
		ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьУслугиТарифов();
		ПараметрыОперации.НаименованиеОперации = НСтр("ru = 'Получение услуг тарифов.'");
		
		ОжидатьЗавершениеВыполненияЗапроса(ПараметрыОперации);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект),
			НСтр("ru = 'Данные были изменены. Сохранить изменения?'"),
			РежимДиалогаВопрос.ДаНетОтмена);
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ВыполнитьЗапросЗаписатьТариф(Истина);
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПоУмолчаниюИспользоватьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.УслугиПоУмолчанию.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьИзменениеПризнакаИспользоватьУслугу(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеПризнакаИспользоватьУслугу(ТекущиеДанные)
	
	Если ТекущиеДанные.Использовать Тогда
		СброситьВзаимоисключающие(ТекущиеДанные);
		Элементы.УслугиПоУмолчанию.Развернуть(ТекущиеДанные.ПолучитьИдентификатор());
	Иначе
		Элементы.УслугиПоУмолчанию.Свернуть(ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
	ЗарегистрироватьИзменениеУслуг();
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПоУмолчаниюЗначениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.УслугиПоУмолчанию.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Значение) Тогда
		
		СтрокаДерева = УслугиПоУмолчанию.НайтиПоИдентификатору(Элементы.УслугиПоУмолчанию.ТекущаяСтрока);
		Если СтрокаДерева <> Неопределено Тогда
			Родитель = СтрокаДерева.ПолучитьРодителя();
			Родитель.Использовать = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗарегистрироватьИзменениеУслуг();
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПоУмолчаниюПриАктивизацииЯчейки(Элемент)
	
	ТекущиеДанные = Элементы.УслугиПоУмолчанию.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
	
		Поле = Элемент.ТекущийЭлемент;
		Поле.ТолькоПросмотр = Не ТекущиеДанные.ТребуетсяЗначение;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПоУмолчаниюПередРазворачиванием(Элемент, Строка, Отказ)
	
	ТекущиеДанные = УслугиПоУмолчанию.НайтиПоИдентификатору(Строка);
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (Не ТекущиеДанные.Использовать) 
		И ТекущиеДанные.ТипСтроки = 1 
		И ДоступноРедактирование Тогда
		ТекущиеДанные.Использовать = Истина;
		ОбработатьИзменениеПризнакаИспользоватьУслугу(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПоУмолчаниюПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.УслугиПоУмолчанию.ТекущиеДанные;
	
	Если Элементы.УслугиПоУмолчанию.ТекущийЭлемент = Элементы.УслугиПоУмолчаниюПоказыватьИнформацию 
		И ТекущиеДанные.ПоказыватьИнформацию Тогда
		ОткрытьФормуУслуги(ТекущиеДанные.Идентификатор);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УслугиПоУмолчаниюПередСворачиванием(Элемент, Строка, Отказ)
	
	ТекущиеДанные = УслугиПоУмолчанию.НайтиПоИдентификатору(Строка);
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Использовать И ТекущиеДанные.ТипСтроки = 1 Тогда
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТерминалыПоУмолчаниюНаправлениеОчистка(Элемент, СтандартнаяОбработка)
	
	ПараметрыСтроки = ТерминалыПоУмолчанию.НайтиПоИдентификатору(Элементы.ТерминалыПоУмолчанию.ТекущаяСтрока);
	
	ПараметрыСтроки.Идентификатор = "";
	ПараметрыСтроки.Наименование = "";
	ПараметрыСтроки.Направление = 0;
	ПараметрыСтроки.НаправлениеПредставление = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ТерминалыПоУмолчаниюАдресПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	
	ПараметрыСтроки = ТерминалыПоУмолчанию.НайтиПоИдентификатору(Элементы.ТерминалыПоУмолчанию.ТекущаяСтрока);
	
	ПараметрыСтроки.Идентификатор = "";
	ПараметрыСтроки.Наименование = "";
	ПараметрыСтроки.АдресЗначение = 0;
	ПараметрыСтроки.АдресПредставление = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ТерминалыПоУмолчаниюАдресПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	АдресНачалоВыбора(Элементы.ТерминалыПоУмолчанию.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТерминалыПоУмолчаниюНаименованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИдентификаторСтроки = Элементы.ТерминалыПоУмолчанию.ТекущаяСтрока;
	ПараметрыСтроки = Элементы.ТерминалыПоУмолчанию.ТекущиеДанные;
	Если ЗначениеЗаполнено(ПараметрыСтроки.Направление)
		И ЗначениеЗаполнено(ПараметрыСтроки.АдресЗначение) Тогда
		ТерминалНачалоВыбора(ИдентификаторСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТерминалыПоУмолчаниюНаименованиеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуТерминала(Элементы.ТерминалыПоУмолчанию.ТекущиеДанные.Идентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуУслуги(ИдентификаторУслуги)
	
	ПараметрыОткрытияФормы = Новый Структура();
	ПараметрыОткрытияФормы.Вставить("Идентификатор", ИдентификаторУслуги);
	ПараметрыОткрытияФормы.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	ПараметрыОткрытияФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	ОткрытьФорму("Обработка.СервисДоставки.Форма.КарточкаУслуги", 
		ПараметрыОткрытияФормы,
		,
		ГрузоперевозчикИдентификатор,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТарифПоУмолчанию(Команда)
	
	Если ПоУмолчанию Тогда
		ВыполнитьЗапросСброситьТарифПоУмолчанию();
	Иначе
		ВыполнитьЗапросУстановитьТарифПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ВыполнитьЗапросЗаписатьТариф(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	
	ВыполнитьЗапросЗаписатьТариф();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗапросыСервиса

#Область УстановитьТарифПоУмолчанию

&НаКлиенте
Процедура ВыполнитьЗапросУстановитьТарифПоУмолчанию()
	
	ПараметрыОперации = ПараметрыОперацииУстановитьТарифПоУмолчанию();
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыОперацииУстановитьТарифПоУмолчанию()

	ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
	ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыУстановитьТарифПоУмолчанию();
	ПараметрыОперации.НаименованиеОперации = НСтр("ru = 'Установка тарифа по умолчанию'");
	
	ДополнительныеПараметры = Новый Структура();
	ПараметрыОповещения =  Новый Структура(
		"ИмяПроцедуры, Параметры", "ВыполнитьЗапросУстановитьТарифПоУмолчаниюЗавершение", ДополнительныеПараметры);
	ПараметрыОперации.Вставить("ПараметрыОповещения", ПараметрыОповещения);
	
	Возврат ПараметрыОперации;

КонецФункции

&НаСервере
Функция ПараметрыЗапросаУстановитьТарифПоУмолчанию(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаУстановитьТарифПоУмолчанию();
	
	ПараметрыЗапроса.Вставить("ГрузоперевозчикИдентификатор", ГрузоперевозчикИдентификатор);
	ПараметрыЗапроса.Вставить("ТарифИдентификатор", ?(ПоУмолчанию, "",Идентификатор));
	ПараметрыЗапроса.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьЗапросУстановитьТарифПоУмолчаниюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОперацияВыполнена = Истина;
	ЗагрузитьРезультатУстановкиТарифаПоУмолчанию(Результат.АдресРезультата, ОперацияВыполнена);
	ЭтотОбъект[ДополнительныеПараметры.ИмяФоновогоЗадания] = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатУстановкиТарифаПоУмолчанию(АдресРезультата, ОперацияВыполнена)
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		Если ЗначениеЗаполнено(Результат) 
			И ТипЗнч(Результат) = Тип("Структура") Тогда
			
			Если Результат.Свойство("ОперацияВыполнена") Тогда
				ОперацияВыполнена = Результат.ОперацияВыполнена;
				ПоУмолчанию = Истина;
				СформироватьЗаголовокФормы();
				СформироватьЗаголовокКнопкиУстановитьПоУмолчанию();
			Иначе
				ОперацияВыполнена = Ложь;
			КонецЕсли;
			
			СервисДоставки.ОбработатьБлокОшибок(Результат, ОперацияВыполнена);
		Иначе
			ОперацияВыполнена = Ложь;
		КонецЕсли;
	Иначе
		ОперацияВыполнена = Ложь;
	КонецЕсли;
	
	Элементы.ФормаУстановитьТарифПоУмолчанию.Доступность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СброситьТарифПоУмолчанию

&НаКлиенте
Процедура ВыполнитьЗапросСброситьТарифПоУмолчанию()
	
	ПараметрыОперации = ПараметрыОперацииСброситьТарифПоУмолчанию();
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыОперацииСброситьТарифПоУмолчанию()

	ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
	ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыУстановитьТарифПоУмолчанию();
	ПараметрыОперации.НаименованиеОперации = НСтр("ru = 'Установка тарифа по умолчанию'");
	
	ДополнительныеПараметры = Новый Структура();
	ПараметрыОповещения =  Новый Структура(
		"ИмяПроцедуры, Параметры", "ВыполнитьЗапросСброситьТарифПоУмолчаниюЗавершение", ДополнительныеПараметры);
	ПараметрыОперации.Вставить("ПараметрыОповещения", ПараметрыОповещения);
	
	Возврат ПараметрыОперации;

КонецФункции

&НаСервере
Функция ПараметрыЗапросаСброситьТарифПоУмолчанию(ПараметрыОперации, Отказ)
	
	Возврат ПараметрыЗапросаУстановитьТарифПоУмолчанию(ПараметрыОперации, Отказ);
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьЗапросСброситьТарифПоУмолчаниюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОперацияВыполнена = Истина;
	ЗагрузитьРезультатСброситьТарифаПоУмолчанию(Результат.АдресРезультата, ОперацияВыполнена);
	ЭтотОбъект[ДополнительныеПараметры.ИмяФоновогоЗадания] = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатСброситьТарифаПоУмолчанию(АдресРезультата, ОперацияВыполнена)
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		Если ЗначениеЗаполнено(Результат) 
			И ТипЗнч(Результат) = Тип("Структура") Тогда
			
			Если Результат.Свойство("ОперацияВыполнена") Тогда
				ОперацияВыполнена = Результат.ОперацияВыполнена;
				ПоУмолчанию = Ложь;
				СформироватьЗаголовокФормы();
				СформироватьЗаголовокКнопкиУстановитьПоУмолчанию();
			Иначе
				ОперацияВыполнена = Ложь;
			КонецЕсли;
			
			СервисДоставки.ОбработатьБлокОшибок(Результат, ОперацияВыполнена);
		Иначе
			ОперацияВыполнена = Ложь;
		КонецЕсли;
	Иначе
		ОперацияВыполнена = Ложь;
	КонецЕсли;
	
	Элементы.ФормаУстановитьТарифПоУмолчанию.Доступность = Истина;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ВыполнитьЗапросЗаписатьТариф(ЗакрытьФорму = Ложь)

	Отказ = Ложь;
	
	ПроверитьЗаполнениеКарточкиТарифа(Отказ);
	
	Если Не Отказ Тогда
		
		ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
		
		ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыСохранитьПараметрыТарифа();
		НаименованиеОперации = НСтр("ru = 'Сохранение параметров тарифа'");
		
		ПараметрыОперации.НаименованиеОперации = НаименованиеОперации;
		ПараметрыОперации.ВыводитьОкноОжидания = Истина;
		ПараметрыОперации.Вставить("Идентификатор", Идентификатор);
		ПараметрыОперации.Вставить("ВыводитьОкноОжидания", Истина);
		ПараметрыОперации.Вставить("ЗакрытьФорму", ЗакрытьФорму);
		
		ВыполнитьЗапрос(ПараметрыОперации);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьЗапросПолучитьДанныеТарифаВФоне()
	
	ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
	ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьДанныеПоТарифу();
	ПараметрыОперации.НаименованиеОперации = НСтр("ru = 'Получение данные тарифа.'");
	
	Возврат ВыполнитьЗапросВФоне(Ложь, ПараметрыОперации);
	
КонецФункции

&НаСервере
Функция ВыполнитьЗапросПолучитьУслугиТарифовВФоне()
	
	ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
	ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьУслугиТарифов();
	ПараметрыОперации.НаименованиеОперации = НСтр("ru = 'Получение данные тарифа.'");
	
	Возврат ВыполнитьЗапросВФоне(Ложь, ПараметрыОперации);
	
КонецФункции

#КонецОбласти

#Область ПараметрыЗапроса

&НаСервере
Функция ПараметрыЗапроса(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = Новый Структура();
	
	ИмяПроцедуры = ПараметрыОперации.ИмяПроцедуры;
	
	Если ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьДанныеПоТарифу() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаПолучитьДанныеТарифа(ПараметрыЗапроса, Отказ);
	ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьУслугиТарифов() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаПолучитьУслугиТарифов(ПараметрыОперации, Отказ);
	ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыУстановитьТарифПоУмолчанию() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаУстановитьТарифПоУмолчанию(ПараметрыОперации, Отказ);
	ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыСброситьТарифПоУмолчанию() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаСброситьТарифПоУмолчанию(ПараметрыОперации, Отказ);
	ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыСохранитьПараметрыТарифа() Тогда
		ПараметрыЗапросаСохранитьПараметрыТарифа(ПараметрыЗапроса, Отказ);
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаПолучитьДанныеТарифа(ПараметрыЗапроса, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаПолучитьДанныеПоТарифу();
	ПараметрыЗапроса.Вставить("Идентификатор", Идентификатор);
	
	Возврат ПараметрыЗапроса;

КонецФункции

&НаСервере
Функция ПараметрыЗапросаПолучитьУслугиТарифов(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаПолучитьУслугиТарифов();
	
	ПараметрыЗапроса.ТипГрузоперевозки = ТипГрузоперевозки;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаСохранитьПараметрыТарифа(ПараметрыЗапроса, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаСохранитьПараметрыТарифа();
	ПараметрыЗапроса.Вставить("Идентификатор", Идентификатор);
	ПараметрыЗапроса.Вставить("ФормаОплаты", ФормаОплаты);
	
	УзлыДереваУслуг = УслугиПоУмолчанию.ПолучитьЭлементы();
	Для Каждого ТекущийУзел Из УзлыДереваУслуг Цикл
		КатегорииДереваУслуг = ТекущийУзел.ПолучитьЭлементы();
		Для Каждого ТекущаяКатегория Из КатегорииДереваУслуг Цикл
			УслугиКатегории = ТекущаяКатегория.ПолучитьЭлементы();
			Для Каждого ТекущаяУслуга Из УслугиКатегории Цикл
				Если ТекущаяУслуга.Использовать Тогда
					НоваяУслуга = ПараметрыЗапроса.Услуги.Добавить();
					НоваяУслуга.Идентификатор = ТекущаяУслуга.Идентификатор;
					НоваяУслуга.Свойства = Новый Массив();
					
					СвойстваУслуги = ТекущаяУслуга.ПолучитьЭлементы();
					Для Каждого ТекущееСвойство Из СвойстваУслуги Цикл
						ПараметрыСвойстваУслуги = СервисДоставки.НовыйПараметрыСвойстваУслуги();
						ПараметрыСвойстваУслуги.Идентификатор = ТекущееСвойство.Идентификатор;
						ПараметрыСвойстваУслуги.Значение = ТекущееСвойство.Значение;
						НоваяУслуга.Свойства.Добавить(ПараметрыСвойстваУслуги);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ТекущийТерминал Из ТерминалыПоУмолчанию Цикл
		НоваяСтрока = ПараметрыЗапроса.Терминалы.Добавить();
		НоваяСтрока.Идентификатор = ТекущийТерминал.Идентификатор;
		НоваяСтрока.Направление = ТекущийТерминал.Направление;
		НоваяСтрока.АдресПредставление = ТекущийТерминал.АдресПредставление;
		НоваяСтрока.АдресЗначение = ТекущийТерминал.АдресЗначение;
	КонецЦикла;
	
	Возврат ПараметрыЗапроса;

КонецФункции

#КонецОбласти

#Область ЗагрузитьРезультаты

&НаСервере
Процедура ЗагрузитьРезультатПолученияДанныхТарифов(АдресРезультата, ОперацияВыполнена)
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		Если ЗначениеЗаполнено(Результат) 
			И ТипЗнч(Результат) = Тип("Структура") Тогда
			
			Если Результат.Свойство("Данные") Тогда
				Данные = Результат.Данные;
				ЗаполнитьЗначенияСвойств(ЭтаФорма, Данные);
				
				Если ТипЗнч(Данные.ДоступныеФормыОплаты) = Тип("Массив") Тогда
					ДоступныеФормыОплаты.ЗагрузитьЗначения(Данные.ДоступныеФормыОплаты);
				КонецЕсли;
				
				Если Результат.Данные.Свойство("УслугиТарифа") Тогда
					СформироватьУслугиПоУмолчанию(Результат.Данные.УслугиТарифа);
				КонецЕсли;
				
				Если Результат.Данные.Свойство("ТерминалыТарифа") Тогда
					ТерминалыТарифа = Результат.Данные.ТерминалыТарифа;
					Для Каждого ТекущийТерминал Из ТерминалыТарифа Цикл
						НоваяСтрока = ТерминалыПоУмолчанию.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущийТерминал);
						НоваяСтрока.НаправлениеПредставление = 
							Элементы.ТерминалыПоУмолчаниюНаправление.СписокВыбора.НайтиПоЗначению(НоваяСтрока.Направление);
					КонецЦикла;
				КонецЕсли;
				
				СформироватьЗаголовокФормы();
			Иначе
				ОперацияВыполнена = Ложь;
			КонецЕсли;
			
			СформироватьКарточкуТарифа();
			СформироватьЗаголовокКнопкиУстановитьПоУмолчанию();
			Элементы.ФормаУстановитьТарифПоУмолчанию.Доступность = Истина;
			ЗаполнитьЗначенияСписковВыбора();
			
			СервисДоставки.ОбработатьБлокОшибок(Результат, ОперацияВыполнена);
		Иначе
			ОперацияВыполнена = Ложь;
		КонецЕсли;
	Иначе
		ОперацияВыполнена = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатПолученияУслугТарифов(АдресРезультата, ОперацияВыполнена = Истина)
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		
		Если Результат <> Неопределено Тогда
		
			Если Результат.Свойство("СписокНесовместимыеУслуги") Тогда
				ЗагрузитьНесовместимыеУслуги(Результат.СписокНесовместимыеУслуги);
			Иначе
				ОперацияВыполнена = Ложь;
			КонецЕсли;
			
			Если Результат.Свойство("Ошибки") Тогда
				Если ТипЗнч(Результат.Ошибки) = Тип("Массив") Тогда
					Для Каждого ТекущаяОшибка Из Результат.Ошибки Цикл
						ОбщегоНазначения.СообщитьПользователю(ТекущаяОшибка);
					КонецЦикла;
				КонецЕсли;
				ОперацияВыполнена = Ложь;
			КонецЕсли;
			
		Иначе
			ОперацияВыполнена = Ложь;
		КонецЕсли;
	Иначе
		ОперацияВыполнена = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНесовместимыеУслуги(Услуги)
	
	НесовместимыеУслуги.Очистить();
	
	Для Каждого ТекущаяУслуга Из Услуги Цикл
		НоваяУслуга = НесовместимыеУслуги.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяУслуга, ТекущаяУслуга);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатСохраненияПараметровТарифа(АдресРезультата, ОперацияВыполнена)
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		Если ЗначениеЗаполнено(Результат) 
			И ТипЗнч(Результат) = Тип("Структура") Тогда
			
			Если Результат.Свойство("ОперацияВыполнена") Тогда
				ОперацияВыполнена = Результат.ОперацияВыполнена;
				Модифицированность = Ложь;
			Иначе
				ОперацияВыполнена = Ложь;
			КонецЕсли;
			
			СервисДоставки.ОбработатьБлокОшибок(Результат, ОперацияВыполнена);
		Иначе
			ОперацияВыполнена = Ложь;
		КонецЕсли;
	Иначе
		ОперацияВыполнена = Ложь;
	КонецЕсли;
	
	Элементы.ФормаУстановитьТарифПоУмолчанию.Доступность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ВыполнитьЗапрос

&НаКлиенте
Процедура ВыполнитьЗапрос(ПараметрыОперации)
	
	ИнтернетПоддержкаПодключена = Ложь;
	ОчиститьСообщения();
	
	ИмяФоновогоЗадания = "ФоновоеЗадание" + ПараметрыОперации.ИмяПроцедуры;
	ФоновоеЗадание = ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ПараметрыОперации);
	ЭтотОбъект[ИмяФоновогоЗадания] = ФоновоеЗадание;
	
	Если ИнтернетПоддержкаПодключена = Ложь Тогда
		
		// Загрузка с проверкой подключения интернет-поддержки.
		Оповещение = Новый ОписаниеОповещения("ВыполнитьЗапросПродолжение", ЭтотОбъект, ПараметрыОперации);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(Оповещение, ЭтотОбъект);
		Возврат;
		
	Иначе
		
		ПараметрыОперации.Вставить("ФоновоеЗадание", ФоновоеЗадание);
		ВыполнитьЗапросПродолжение(Истина, ПараметрыОперации);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	ИмяФоновогоЗадания = "ФоновоеЗадание"+ ДополнительныеПараметры.ИмяПроцедуры;
	
	Если Результат = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Отсутствует подключение к Интернет-поддержке пользователей.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("Логин") Тогда
		// Повторный вызов метода после подключения к Интернет-поддержке.
		ИнтернетПоддержкаПодключена = Ложь;
		ЭтотОбъект[ИмяФоновогоЗадания] = ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ДополнительныеПараметры);
		ДополнительныеПараметры.Добавить("ФоновоеЗадание", ЭтотОбъект[ИмяФоновогоЗадания]);
	КонецЕсли;
	
	Если ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтотОбъект[ИмяФоновогоЗадания].Статус = "Выполняется" Тогда
		
		ОжидатьЗавершениеВыполненияЗапроса(ДополнительныеПараметры);
		
	ИначеЕсли ЭтотОбъект[ИмяФоновогоЗадания].Статус = "Выполнено" Тогда
		
		ВыполнитьЗапросЗавершение(ЭтотОбъект[ИмяФоновогоЗадания], ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьЗавершениеВыполненияЗапроса(ПараметрыОперации)
	
	ВыводитьОкноОжидания = ?(ЗначениеЗаполнено(ПараметрыОперации.ВыводитьОкноОжидания), 
																	ПараметрыОперации.ВыводитьОкноОжидания,
																	Ложь);
	// Установка картинки длительной операции.
	Если Не ВыводитьОкноОжидания Тогда
		
		Если ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьДанныеПоТарифу() Тогда
			
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОжиданиеЗагрузки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыУстановитьТарифПоУмолчанию()
		ИЛИ ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыСброситьТарифПоУмолчанию() Тогда
		
		Элементы.ФормаУстановитьТарифПоУмолчанию.Доступность = Ложь;
		
	КонецЕсли;
	
	// Инициализация обработчик ожидания завершения.
	ИмяФоновогоЗадания = "ФоновоеЗадание" + ПараметрыОперации.ИмяПроцедуры;
	ФоновоеЗадание = ЭтотОбъект[ИмяФоновогоЗадания];
	ПараметрыОперации.Вставить("ФоновоеЗадание", ФоновоеЗадание);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения = ПараметрыОперации.НаименованиеОперации;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
	ПараметрыОжидания.ВыводитьОкноОжидания = ВыводитьОкноОжидания;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	ПараметрыОжидания.Вставить("ИдентификаторЗадания", ФоновоеЗадание.ИдентификаторЗадания);
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ВыполнитьЗапросЗавершение",
		ЭтотОбъект, ПараметрыОперации);
		
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, ОбработкаЗавершения, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	// Инициализация.
	Отказ = Ложь;
	ИмяФоновогоЗадания = "ФоновоеЗадание" + ДополнительныеПараметры.ИмяПроцедуры;
	ФоновоеЗадание = ЭтотОбъект[ИмяФоновогоЗадания];
	
	// Скрыть элементы ожидания на форме
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОсновная;
	
	// Вывод сообщений из фонового задания.
	СервисДоставкиКлиент.ОбработатьРезультатФоновогоЗадания(Результат, ДополнительныеПараметры, Отказ);
	Если Результат = Неопределено ИЛИ ФоновоеЗадание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка результата поиска.
	Если Не Отказ И Результат.Статус = "Выполнено" Тогда
		Если ЗначениеЗаполнено(Результат.АдресРезультата)
			И ЭтоАдресВременногоХранилища(Результат.АдресРезультата) 
			И ДополнительныеПараметры.ФоновоеЗадание.ИдентификаторЗадания 
			= ЭтотОбъект[ИмяФоновогоЗадания].ИдентификаторЗадания Тогда
				
			Если ДополнительныеПараметры.Свойство("ПараметрыОповещения") 
				И ДополнительныеПараметры.ФоновоеЗадание.ИдентификаторЗадания = ЭтотОбъект[ИмяФоновогоЗадания].ИдентификаторЗадания Тогда
				ПараметрыОповещения = ДополнительныеПараметры.ПараметрыОповещения;
				ПараметрыОповещения.Параметры.Вставить("ИмяФоновогоЗадания", ИмяФоновогоЗадания);
				ПроцедураОбработкиРезультата = Новый ОписаниеОповещения(ПараметрыОповещения.ИмяПроцедуры, ЭтаФорма, ПараметрыОповещения.Параметры);
				
				ВыполнитьОбработкуОповещения(ПроцедураОбработкиРезультата, Результат);
				
			ИначеЕсли ДополнительныеПараметры.ИмяПроцедуры 
				= СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьДанныеПоТарифу() Тогда
				
				// Загрузка результатов запроса.
				ОперацияВыполнена = Истина;
				ЗагрузитьРезультатПолученияДанныхТарифов(Результат.АдресРезультата, ОперацияВыполнена);
				ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено;
				Если НЕ ОперацияВыполнена Тогда
					Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОшибкаПолученияДанных;
				Иначе
					РазвернутьСвойстваДляИспользуемыхУслуг();
				КонецЕсли;
				
			ИначеЕсли ДополнительныеПараметры.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьУслугиТарифов()
				И ДополнительныеПараметры.ФоновоеЗадание.ИдентификаторЗадания
				= ЭтотОбъект[ИмяФоновогоЗадания].ИдентификаторЗадания Тогда
				
				ОперацияВыполнена = Истина;
				ЗагрузитьРезультатПолученияУслугТарифов(Результат.АдресРезультата, ОперацияВыполнена);
				ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено;
				
			ИначеЕсли ДополнительныеПараметры.ИмяПроцедуры 
				= СервисДоставкиКлиентСервер.ИмяПроцедурыСохранитьПараметрыТарифа() Тогда
				
				ОперацияВыполнена = Истина;
				ЗагрузитьРезультатСохраненияПараметровТарифа(Результат.АдресРезультата, ОперацияВыполнена);
				ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено;
				
				Если ОперацияВыполнена 
					И ДополнительныеПараметры.Свойство("ЗакрытьФорму")
					И ДополнительныеПараметры.ЗакрытьФорму = Истина Тогда
					Закрыть();
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВыполнитьЗапросВФоне

&НаСервере
Функция ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ПараметрыОперации)
	
	// Проверка подключения Интернет-поддержки пользователей.
	ИнтернетПоддержкаПодключена 
		= ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	Если Не ИнтернетПоддержкаПодключена Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Отказ = Ложь;
	ПараметрыЗапроса = ПараметрыЗапроса(ПараметрыОперации, Отказ);
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяФоновогоЗадания = "ФоновоеЗадание" + ПараметрыОперации.ИмяПроцедуры;
	ФоновоеЗадание = ЭтотОбъект[ИмяФоновогоЗадания];
	Если ФоновоеЗадание <> Неопределено Тогда
		ОтменитьВыполнениеЗадания(ФоновоеЗадание.ИдентификаторЗадания);
	КонецЕсли;
	
	Задание = Новый Структура("ИмяПроцедуры, Наименование, ПараметрыПроцедуры");
	Задание.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '1С:Доставка. %1.'"),
		ПараметрыОперации.НаименованиеОперации);
	Задание.ИмяПроцедуры = "СервисДоставки." + ПараметрыОперации.ИмяПроцедуры;
	Задание.ПараметрыПроцедуры = ПараметрыЗапроса;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = Задание.Наименование;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(Задание.ИмяПроцедуры,
		Задание.ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОтменитьВыполнениеЗадания(ИдентификаторЗадания)
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
		ИдентификаторЗадания = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура СформироватьКарточкуТарифа()
	
	КарточкаТарифа = ТабличныйДокументКарточкаТарифа();
	
КонецПроцедуры

&НаСервере
Функция ТабличныйДокументКарточкаТарифа()
	
	ТабличныйДокумент = Новый ТабличныйДокумент();
	
	Обработка = РеквизитФормыВЗначение("Объект");
	Макет = Обработка.ПолучитьМакет("Тариф");
	
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка");
	
	ПараметрыОбласти = ОбластьМакетаШапка.Параметры;
	
	ПараметрыОбласти.МаксВес = МаксВес;
	ПараметрыОбласти.МаксОбъем = МаксОбъем;
	ПараметрыОбласти.МаксДлина = МаксДлина;
	ПараметрыОбласти.НегабаритныйВес = НегабаритныйВес;
	ПараметрыОбласти.НегабаритныйОбъем = НегабаритныйОбъем;
	ПараметрыОбласти.НегабаритнаяДлина = НегабаритнаяДлина;

	ПараметрыОбласти.Описание = Описание;
	
	ТабличныйДокумент.Вывести(ОбластьМакетаШапка);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

&НаСервере
Процедура СформироватьУслугиПоУмолчанию(Знач УслугиТарифа)

	ДеревоУслуг = УслугиПоУмолчанию.ПолучитьЭлементы();
	ДеревоУслуг.Очистить();
	
	ТекущаяКатегорияОсновная = "";
	ТекущаяКатегорияДополнительная = "";
	УзелОсновная = Неопределено;
	УзелДополнительная = Неопределено;
	ТекущийУзел = Неопределено;
	
	Для Каждого ТекущаяУслуга Из УслугиТарифа Цикл
		
		Если Не ТекущаяУслуга.Дополнительная Тогда
			
			Если УзелОсновная = Неопределено Тогда
				УзелОсновная = ДеревоУслуг.Добавить();
				УзелОсновная.Представление = НСтр("ru='Основные услуги'");;
				УзелОсновная.Использовать = Истина;
				УзелОсновная.Идентификатор = "";
				УзелОсновная.Значение = Неопределено;
				УзелОсновная.ТребуетсяЗначение = Ложь;
				УзелОсновная.Обязательная = Ложь;
				УзелОсновная.ТипСтроки = 0;
			КонецЕсли;
			
			ТекущийУзел = УзелОсновная;
			
			Если ТекущаяКатегорияОсновная <> ТекущаяУслуга.Категория Тогда
				ТекущаяКатегорияОсновная = ТекущаяУслуга.Категория;
				
				СтрокаДерева = ТекущийУзел.ПолучитьЭлементы().Добавить();
				СтрокаДерева.Представление = ТекущаяУслуга.Категория;
				СтрокаДерева.Использовать = Истина;
				СтрокаДерева.Идентификатор = "";
				СтрокаДерева.Значение = Неопределено;
				СтрокаДерева.ТребуетсяЗначение = Ложь;
				СтрокаДерева.Обязательная = Ложь;
				СтрокаДерева.ТипСтроки = 0;
				
			КонецЕсли;
			
		Иначе
			
			Если УзелДополнительная = Неопределено Тогда
				УзелДополнительная = ДеревоУслуг.Добавить();
				УзелДополнительная.Представление = НСтр("ru='Дополнительные услуги'");
				УзелДополнительная.Использовать = Истина;
				УзелДополнительная.Идентификатор = "";
				УзелДополнительная.Значение = Неопределено;
				УзелДополнительная.ТребуетсяЗначение = Ложь;
				УзелДополнительная.Обязательная = Ложь;
				УзелДополнительная.ТипСтроки = 0;
			КонецЕсли;
			
			ТекущийУзел = УзелДополнительная;
			
			Если ТекущаяКатегорияДополнительная <> ТекущаяУслуга.Категория Тогда
				ТекущаяКатегорияДополнительная = ТекущаяУслуга.Категория;
				
				СтрокаДерева = ТекущийУзел.ПолучитьЭлементы().Добавить();
				СтрокаДерева.Представление = ТекущаяУслуга.Категория;
				СтрокаДерева.Использовать = Истина;
				СтрокаДерева.Идентификатор = "";
				СтрокаДерева.Значение = Неопределено;
				СтрокаДерева.ТребуетсяЗначение = Ложь;
				СтрокаДерева.Обязательная = Ложь;
				СтрокаДерева.ТипСтроки = 0;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаДереваВетка = СтрокаДерева.ПолучитьЭлементы().Добавить();
		СтрокаДереваВетка.Наименование = ТекущаяУслуга.Наименование;
		СтрокаДереваВетка.Использовать = ТекущаяУслуга.Использовать;
		СтрокаДереваВетка.Идентификатор = ТекущаяУслуга.Идентификатор;
		СтрокаДереваВетка.Дополнительная = ТекущаяУслуга.Дополнительная;
		СтрокаДереваВетка.Категория = ТекущаяУслуга.Категория;
		СтрокаДереваВетка.ТипСтроки = 1;
		СтрокаДереваВетка.ПоказыватьИнформацию = ТекущаяУслуга.ПоказыватьИнформацию;
		СтрокаДереваВетка.Обязательная = ТекущаяУслуга.Обязательная;
		СформироватьПредставлениеНаименованияУслуги(СтрокаДереваВетка);
		
		СвойстваУслуги = ТекущаяУслуга.Свойства;
		
		Если СвойстваУслуги.Количество() Тогда
			
			СтрокиСвойств = СтрокаДереваВетка.ПолучитьЭлементы();
			СтрокиСвойств.Очистить();
			
			Для Каждого ТекущееСвойство Из СвойстваУслуги Цикл
				
				СтрокаДереваСвойство = СтрокиСвойств.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДереваСвойство, ТекущееСвойство);
				СтрокаДереваСвойство.Значение = СтрокаДереваСвойство.ТипЗначения.ПривестиЗначение(СтрокаДереваСвойство.Значение);
				СтрокаДереваСвойство.ТребуетсяЗначение = Истина;
				СтрокаДереваСвойство.ТипСтроки = 2;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЗаголовокФормы()
	
	ТекстЗаголовка = НСтр("ru = '%1: %2'");
	ТекстНаименования = НСтр("ru = 'Тариф'");
	
	Если Наименование <> "" Тогда
		
		ТекстНаименования = Наименование
			+ " ("
			+ ?(ПоУмолчанию, НСтр("ru = 'Тариф по умолчанию'"), НСтр("ru = 'Тариф'"))
			+ ")";
			
	КонецЕсли;
	
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстЗаголовка,
		СервисДоставкиКлиентСервер.ПредставлениеТипаГрузоперевозки(ТипГрузоперевозки),
		ТекстНаименования);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЗаголовокКнопкиУстановитьПоУмолчанию()
	
	Элементы.ФормаУстановитьТарифПоУмолчанию.Заголовок = ?(ПоУмолчанию, НСтр("ru='Сбросить тариф по умолчанию'"), НСтр("ru='Установить тариф по умолчанию'"));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияСписковВыбора()
	
	СписокВыбора = Элементы.ФормаОплаты.СписокВыбора;
	СписокВыбора.Очистить();
	
	Если ДоступныеФормыОплаты.Количество() = 0 Тогда
		Элементы.ФормаОплаты.Видимость = Ложь;
		ФормаОплаты = 0;
	Иначе
		Элементы.ФормаОплаты.Видимость = Истина;
		Для каждого ЗначениеФормыОплаты Из ДоступныеФормыОплаты Цикл
			Если ЗначениеФормыОплаты.Значение = 1 Тогда
				СписокВыбора.Добавить(1, НСтр("ru='Безналичная'"));
			ИначеЕсли ЗначениеФормыОплаты.Значение = 2 Тогда
				СписокВыбора.Добавить(2, НСтр("ru='Наличная'"));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЗначениеСписка = Элементы.ФормаОплаты.СписокВыбора.НайтиПоЗначению(ФормаОплаты);
	Если ЗначениеСписка = Неопределено Тогда
		ФормаОплатыПредставление = "";
	Иначе
		ФормаОплатыПредставление = ЗначениеСписка.Представление;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность();
	
	Элементы.ГруппаПараметрыТарифа.ТолькоПросмотр = Не ДоступноРедактирование;
	Элементы.ФормаУстановитьТарифПоУмолчанию.Видимость = ДоступноРедактирование;
	Элементы.ФормаЗаписатьИЗакрыть.Доступность = ДоступноРедактирование;
	Элементы.ФормаЗаписать.Доступность = ДоступноРедактирование;
	Элементы.УслугиПоУмолчанию.ТолькоПросмотр = Не ДоступноРедактирование;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	// Категории услуг.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УслугиПоУмолчаниюИспользовать.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УслугиПоУмолчанию.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

	// Категории услуг.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УслугиПоУмолчаниюНаименование.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УслугиПоУмолчанию.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ЖирныйШрифтБЭД);
	
	// Значение услуг.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УслугиПоУмолчаниюИспользовать.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УслугиПоУмолчанию.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 2;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

	// Значение отборов тарифов.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УслугиПоУмолчанию.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УслугиПоУмолчанию.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 2;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.НаклонныйТекстСервисДоставки);
	
	// Значение услуг.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УслугиПоУмолчаниюЗначение.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УслугиПоУмолчанию.ТребуетсяЗначение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УслугиПоУмолчанию.Значение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Пусто>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение",
		ГоризонтальноеПоложение.Центр);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);

	// Значение услуг.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УслугиПоУмолчаниюИспользовать.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УслугиПоУмолчанию.Обязательная");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УслугиПоУмолчанию.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискиВыбора()
	
	СписокВыбора = Элементы.ТерминалыПоУмолчаниюНаправление.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(1, НСтр("ru='Приемка'"));
	СписокВыбора.Добавить(2, НСтр("ru='Выдача'"));
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьВзаимоисключающие(ТекущиеДанные)
	
	НайденныеСтроки = НесовместимыеУслуги.НайтиСтроки(Новый Структура("Идентификатор", ТекущиеДанные.Идентификатор));
	
	Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
		СброситьВзаимоисключающее(ТекущиеДанные, ТекущаяСтрока.Идентификатор,
			ТекущаяСтрока.ИдентификаторНесовместимойУслуги);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьВзаимоисключающее(ТекущиеДанные, ИдентификаторНового, ИдентификаторТекущего)
	
	Если ТекущиеДанные.Идентификатор = ИдентификаторНового Тогда
		Родитель = ТекущиеДанные.ПолучитьРодителя();
		СтрокиДерева = Родитель.ПолучитьЭлементы();
		Для Каждого ТекущаяСтрокаДерева Из СтрокиДерева Цикл
			Если ТекущаяСтрокаДерева.Идентификатор = ИдентификаторТекущего Тогда
				ТекущаяСтрокаДерева.Использовать = Ложь;
				Элементы.УслугиПоУмолчанию.Свернуть(ТекущаяСтрокаДерева.ПолучитьИдентификатор());
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьИзменениеУслуг()
	
	УслугиИзменение = Истина;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСвойстваДляИспользуемыхУслуг()
	
	УзлыДереваУслуг = УслугиПоУмолчанию.ПолучитьЭлементы();
	
	Для Каждого ТекущийУзел Из УзлыДереваУслуг Цикл
		Элементы.УслугиПоУмолчанию.Развернуть(ТекущийУзел.ПолучитьИдентификатор());
		КатегорииУзла = ТекущийУзел.ПолучитьЭлементы();
		Для Каждого ТекущаяКатегория Из КатегорииУзла Цикл
			УслугиКатегории = ТекущаяКатегория.ПолучитьЭлементы();
			Для Каждого ТекущаяУслуга Из УслугиКатегории Цикл
				Если ТекущаяУслуга.Использовать Тогда
					Элементы.УслугиПоУмолчанию.Развернуть(ТекущаяУслуга.ПолучитьИдентификатор());
					Элементы.УслугиПоУмолчанию.Развернуть(ТекущаяКатегория.ПолучитьИдентификатор());
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПредставлениеНаименованияУслуги(Параметры)
	
	Параметры.Представление = Параметры.Наименование;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресНачалоВыбора(ИдентификаторСтроки)

	КонтактнаяИнформацияНачалоВыбора(ИдентификаторСтроки, "АдресСкладаОрганизации");
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияНачалоВыбора(ИдентификаторСтроки, ВидКонтактнойИнформацииСтрока)
	
	ПараметрыВидаКонтактнойИнформации = ПараметрыВидаКонтактнойИнформации(ВидКонтактнойИнформацииСтрока);
	ПараметрыВидаКонтактнойИнформации.Вид.НастройкиПроверки.ПроверятьКорректность = Ложь;
	
	Если Не ЗначениеЗаполнено(ПараметрыВидаКонтактнойИнформации) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыАдреса = ТерминалыПоУмолчанию.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	АдресПредставление = ПараметрыАдреса.АдресПредставление;
	АдресЗначение = ПараметрыАдреса.АдресЗначение;
	
	Если (АдресЗначение = ""
		И АдресПредставление <> "") Тогда
		АдресЗначение
			= СервисДоставкиВызовСервера.КонтактнаяИнформацияПоПредставлению(АдресПредставление,
			ПараметрыВидаКонтактнойИнформации.ТипНаименование);
		
	КонецЕсли;
		
	ПараметрыОткрытия = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
		ПараметрыВидаКонтактнойИнформации.Вид, АдресЗначение,
		АдресПредставление,, ПараметрыВидаКонтактнойИнформации.Тип);
		
	ПараметрыОткрытия.Вставить("ТолькоПросмотр", Не ДоступноРедактирование);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьФормуКонтактнойИнформацииЗавершение", ЭтотОбъект, 
								ДополнительныеПараметры);
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, ЭтотОбъект, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если (Не ЗначениеЗаполнено(Результат)) 
		ИЛИ Не ДоступноРедактирование Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	ПараметрыАдреса = ТерминалыПоУмолчанию.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
		
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ЕстьИзменения = Ложь;
		Реквизит = ПараметрыАдреса.АдресПредставление;
		Если Результат.Свойство("Представление") 
			И (Реквизит <> Результат.Представление) Тогда
			Результат.Свойство("Представление", ПараметрыАдреса.АдресПредставление);
			ЕстьИзменения = Истина;
		КонецЕсли;
		
		ЕстьИзменения = Ложь;
		Реквизит = ПараметрыАдреса.АдресЗначение;
		Если Результат.Свойство("Значение") 
			И (Реквизит <> Результат.Значение) Тогда
			Результат.Свойство("Значение", ПараметрыАдреса.АдресЗначение);
			ЕстьИзменения = Истина;
		КонецЕсли;
		
		Если ЕстьИзменения Тогда
			ПараметрыАдреса.Идентификатор = "";
			ПараметрыАдреса.Наименование = "";
		КонецЕсли;
		
		Отказ = Ложь;
		ПроверитьДозаполнитьАдрес(ДополнительныеПараметры.ИдентификаторСтроки, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыВидаКонтактнойИнформации(ВидКонтактнойИнформацииСтрока)
	
	Возврат СервисДоставкиСлужебный.ПараметрыВидаКонтактнойИнформации(ВидКонтактнойИнформацииСтрока);
	
КонецФункции

&НаСервере
Процедура ПроверитьДозаполнитьАдрес(ИдентификаторСтроки, ЕстьОшибки)
	
	ПараметрыАдреса = ТерминалыПоУмолчанию.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	АдресЗначение = ПараметрыАдреса.АдресЗначение; 
	
	СтруктураАдреса = СервисДоставки.ЗначениеИзСтрокиJSON(АдресЗначение);
	
	Если Не ЗначениеЗаполнено(СтруктураАдреса) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресЗначение) Тогда
		
		Если УправлениеКонтактнойИнформацией.АдресВведенВСвободнойФорме(АдресЗначение) Тогда
			
			ВызватьИсключение НСтр("ru = 'Для заказов на доставку нельзя использовать адрес в свободной форме.'");
			
		Иначе
			СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(АдресЗначение,
				Новый Структура("КодыАдреса", Истина));
			ПараметрыАдреса.АдресЗначение = РаботаСАдресами.ПоляАдресаВJSON(СведенияОбАдресе);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТерминалыПоУмолчаниюНаправлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыСтроки = ТерминалыПоУмолчанию.НайтиПоИдентификатору(Элементы.ТерминалыПоУмолчанию.ТекущаяСтрока);
	ЗначениеСписка = Элементы.ТерминалыПоУмолчаниюНаправление.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	
	Если ЗначениеСписка = Неопределено Тогда
		ПараметрыСтроки.Направление = 0;
		ПараметрыСтроки.НаправлениеПредставление = "";
	Иначе
		Если ПараметрыСтроки.Направление <> ВыбранноеЗначение Тогда
			ПараметрыСтроки.Направление = ВыбранноеЗначение;
			ПараметрыСтроки.НаправлениеПредставление = ЗначениеСписка.Представление;
			
			ПараметрыСтроки.Идентификатор = "";
			ПараметрыСтроки.Наименование = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуТерминала(Идентификатор)
	
	Если Не ЗначениеЗаполнено(Идентификатор) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытияФормы = Новый Структура;
	
	ПараметрыОткрытияФормы.Вставить("Идентификатор", Идентификатор);
	ПараметрыОткрытияФормы.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	ПараметрыОткрытияФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	ОткрытьФорму(
		"Обработка.СервисДоставки.Форма.КарточкаТерминала",
		ПараметрыОткрытияФормы,
		ЭтаФорма,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
 
КонецПроцедуры

&НаКлиенте
Процедура ТерминалНачалоВыбора(ИдентификаторСтроки)
	
	ПараметрыСтроки = ТерминалыПоУмолчанию.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьПодборТерминала", ЭтаФорма, ДополнительныеПараметры);
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("Адрес", ПараметрыСтроки.АдресПредставление);
	ПараметрыОткрытияФормы.Вставить("АдресЗначение", ПараметрыСтроки.АдресЗначение);
	ПараметрыОткрытияФормы.Вставить("Направление", ПараметрыСтроки.Направление);
	ПараметрыОткрытияФормы.Вставить("ГрузоперевозчикИдентификатор", ГрузоперевозчикИдентификатор);
	ПараметрыОткрытияФормы.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	ПараметрыОткрытияФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	ОткрытьФорму(
		"Обработка.СервисДоставки.Форма.СписокТерминалов",
		ПараметрыОткрытияФормы,
		ЭтаФорма,,,,ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры
	
&НаКлиенте
Процедура ОбработатьПодборТерминала(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ПараметрыСтроки = ТерминалыПоУмолчанию.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	
	Результат.Свойство("ТерминалИдентификатор", ПараметрыСтроки.Идентификатор);
	Результат.Свойство("Терминал", ПараметрыСтроки.Наименование);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеКарточкиТарифа(Отказ)
	
	ТекстОшибки = НСтр("ru='Значение поля ""%1"" в строке ""%2"" не заполнено'");
	НомерСтроки = 0;
	Для Каждого ТекущийТерминал Из ТерминалыПоУмолчанию Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		Если ТекущийТерминал.Направление = 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, "Направление", НомерСтроки);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;
		
		Если ТекущийТерминал.Идентификатор = "" Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, "Терминал", НомерСтроки);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;
		
		Если ТекущийТерминал.АдресЗначение = "" Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, "Адрес", НомерСтроки);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;
		
		Если ТекущийТерминал.АдресПредставление = "" Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, "Адрес", НомерСтроки);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
