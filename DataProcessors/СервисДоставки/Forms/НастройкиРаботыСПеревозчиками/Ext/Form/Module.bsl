
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не СервисДоставки.ПравоРаботыССервисомДоставки(Истина) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ДоступнаОтправкаЗаказовНаДоставку = СервисДоставки.ПравоОтправкиЗаказовНаДоставкуПеревозчику();
	
	Если Не ДоступнаОтправкаЗаказовНаДоставку Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Недостаточно прав для работы с настройками.
			|Должна быть доступна роль ""Отправка заказов на доставку перевозчику""'"));
		Возврат;
	КонецЕсли;
	
	АвтоНавигационнаяСсылка = Ложь;
	НавигационнаяСсылка = "e1cib/command/" + СтрЗаменить(ЭтотОбъект.ИмяФормы, "Форма", "Команда");
	
	Вес1 = 5;
	Вес2 = 10;
	
	СервисДоставкиПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	Если Не Отказ Тогда
		ЗаполнитьДанныеСервиса();
		ЗаполнитьДанныеОбработки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(ФоновоеЗаданиеПолучитьГрузоперевозчиков) Тогда
		
		ПараметрыОперации = Новый Структура("ВыводитьОкноОжидания");
		ПараметрыОперации.Вставить("ИмяПроцедуры", СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьГрузоперевозчиков());
		ПараметрыОперации.Вставить("НаименованиеОперации", НСтр("ru = 'Получение списка грузоперевозчиков.'"));
		
		ОжидатьЗавершениеВыполненияЗапроса(ПараметрыОперации);
		
	КонецЕсли;
	
	Для к = 0 По 4 Цикл
		
		Если ЗначениеЗаполнено(ЭтотОбъект["ФоновоеЗаданиеПолучитьТарифы" + Строка(к)]) Тогда
			
			ПараметрыОперации = Новый Структура("ВыводитьОкноОжидания");
			ПараметрыОперации.Вставить("ИмяПроцедуры", СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьТарифы());
			ПараметрыОперации.Вставить("НаименованиеОперации", НСтр("ru = 'Получение списка доступных тарифов.'"));
			ПараметрыОперации.Вставить("Постфикс", Строка(к));
			
			ОжидатьЗавершениеВыполненияЗапроса(ПараметрыОперации);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭтотОбъект["ФоновоеЗаданиеПолучитьДоступныеТерминалы" + Строка(к)]) Тогда
			
			ПараметрыОперации = Новый Структура("ВыводитьОкноОжидания");
			ПараметрыОперации.Вставить("ИмяПроцедуры", СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьДоступныеТерминалы());
			ПараметрыОперации.Вставить("НаименованиеОперации", НСтр("ru = 'Получение списка доступных терминалов.'"));
			ПараметрыОперации.Вставить("Постфикс", Строка(к));
			
			ОжидатьЗавершениеВыполненияЗапроса(ПараметрыОперации);
			
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ТекущаяОрганизация = Организация Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		Отказ = Ложь;
		
		ПроверитьОрганизациюБизнесСети(Организация, Отказ);
		
		Если Отказ Тогда
			
			ТекстВопроса =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Организация %1 не зарегистрирована в Бизнес-Сети. Зарегистрировать?'"), Организация);
			
			Оповещение = Новый ОписаниеОповещения("ПослеОтветаНаВопросЗарегистрироватьОрганизацию", ЭтотОбъект);
			ОтветыНаВопрос = Новый СписокЗначений();
			ОтветыНаВопрос.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Зарегистрировать'"));
			ОтветыНаВопрос.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Отменить'"));
			ПоказатьВопрос(Оповещение,
			ТекстВопроса,
			ОтветыНаВопрос,
			, КодВозвратаДиалога.Нет,
			НСтр("ru = 'Регистрация в Бизнес-Сети'"));
		Иначе
			ТекущаяОрганизация = Организация;
			ЗаполнитьЗначенияПоОрганизации(Организация);
		КонецЕсли;
	Иначе
		ТекущаяОрганизация = Организация;
		ЗаполнитьЗначенияПоОрганизации(Организация);
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ССобственногоСклада0ПриИзменении(Элемент)
	
	Если ССобственногоСклада0 Тогда
		УстановитьЗначениеПолей(ЭтотОбъект, "Терминал", "");
	КонецЕсли;
	
	УстановитьДоступностьПолейПунктПриема(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ГрузоперевозчикПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	Постфикс = ПостфиксЭлемента(Элемент);
	
	ПриИзмененииГрузоперевозчикаНаСервере(ПостФикс);
	
	Если ЗначениеЗаполнено(ЭтотОбъект["ФоновоеЗаданиеПолучитьТарифы" + Постфикс]) Тогда
		
		ПараметрыОперации = Новый Структура("ВыводитьОкноОжидания");
		ПараметрыОперации.Вставить("ИмяПроцедуры", СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьТарифы());
		ПараметрыОперации.Вставить("НаименованиеОперации", НСтр("ru = 'Получение списка доступных тарифов.'"));
		ПараметрыОперации.Вставить("Постфикс", Постфикс);
		
		ОжидатьЗавершениеВыполненияЗапроса(ПараметрыОперации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭтотОбъект["ФоновоеЗаданиеПолучитьДоступныеТерминалы" + Постфикс]) Тогда
		
		ПараметрыОперации = Новый Структура("ВыводитьОкноОжидания");
		ПараметрыОперации.Вставить("ИмяПроцедуры", СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьДоступныеТерминалы());
		ПараметрыОперации.Вставить("НаименованиеОперации", НСтр("ru = 'Получение списка доступных терминалов.'"));
		ПараметрыОперации.Вставить("Постфикс", Постфикс);
		
		ОжидатьЗавершениеВыполненияЗапроса(ПараметрыОперации);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузоперевозчикОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект["Грузоперевозчик" + ПостфиксЭлемента(Элемент)]) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Идентификатор",
		ИдентификаторПеревозчика(ЭтотОбъект["Грузоперевозчик" + ПостфиксЭлемента(Элемент)], Перевозчики));
	ПараметрыФормы.Вставить("ОрганизацияБизнесСетиСсылка", Организация);
	ПараметрыФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	ОткрытьФорму("Обработка.СервисДоставки.Форма.КарточкаГрузоперевозчика",
		ПараметрыФормы,
		ЭтотОбъект,
		,
		,
		,
		,);
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьДругихПеревозчиковПриИзменении(Элемент)
	
	ПриИзмененииИсключитьДругихПеревозчиков(ЭтотОбъект, ПостфиксЭлемента(Элемент));
КонецПроцедуры

&НаКлиенте
Процедура ТарифПриИзменении(Элемент)
	
	ПриИзмененииТарифаПеревозчика(ЭтотОбъект, ПостфиксЭлемента(Элемент));
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьДругиеТарифыПриИзменении(Элемент)
	
	ПриИзмененииИсключитьДругиеТарифы(ЭтотОбъект, ПостфиксЭлемента(Элемент));
КонецПроцедуры

&НаКлиенте
Процедура ТерминалОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект["Терминал" + ПостфиксЭлемента(Элемент)]) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Идентификатор",
		ИдентификаторТерминала(
			ЭтотОбъект["Терминал" + ПостфиксЭлемента(Элемент)],
			ИдентификаторПеревозчика(ЭтотОбъект["Грузоперевозчик" + ПостфиксЭлемента(Элемент)], Перевозчики),
			Терминалы));
	ПараметрыФормы.Вставить("ОрганизацияБизнесСетиСсылка", Организация);
	ПараметрыФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	ОткрытьФорму("Обработка.СервисДоставки.Форма.КарточкаТерминала",
		ПараметрыФормы,
		ЭтотОбъект,
		,
		,
		,
		,);
КонецПроцедуры

&НаКлиенте
Процедура ВесРассчитывается0ПриИзменении(Элемент)
	
	Если Не ВесРассчитывается0 Тогда
		Для к = 1 По 3 Цикл
			ОчиститьЗначенияСценария(ЭтотОбъект, Строка(к));
		КонецЦикла;
	КонецЕсли;
	
	УстановитьДоступностьПоляВес(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ГабаритыРассчитываются0ПриИзменении(Элемент)
	
	УстановитьДоступностьПолейГабариты(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура РазмерГабаритПриИзменении(Элемент)
	
	ПриИзмененииГабарита(ЭтотОбъект, ПостфиксЭлемента(Элемент));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Записать(Команда)
	
	Если Модифицированность Тогда
		Отказ = Ложь;
		ТекстОшибки = "";
		ЗаписатьЗначенияНастроек(Отказ, ТекстОшибки);
		
		Если Не Отказ Тогда
			Модифицированность = Ложь;
		Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТребуетсяАвторизация(Команда)
	
	ПостФикс = ПостфиксЭлемента(ТекущийЭлемент);
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("Перевозчик", ЭтотОбъект["Грузоперевозчик" + ПостФикс]);
	
	НайденныеСтроки = Перевозчики.НайтиСтроки(Новый Структура("Перевозчик", ЭтотОбъект["Грузоперевозчик" + ПостФикс]));
	
	ИдентификаторСервиса = "";
	Авторизован = Ложь;
	ТипАвторизации = "";
	Если НайденныеСтроки.Количество()>0 Тогда
		ИдентификаторСервиса = НайденныеСтроки[0].ИдентификаторСервиса;
		Авторизован = НайденныеСтроки[0].Авторизован;
		ТипАвторизации = НайденныеСтроки[0].ТипАвторизации;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ИдентификаторСервиса", ИдентификаторСервиса);
	ПараметрыФормы.Вставить("Авторизован", Авторизован);
	ПараметрыФормы.Вставить("ТипАвторизации", ТипАвторизации);
	ПараметрыФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);

	ОткрытьФорму("Обработка.СервисДоставки.Форма.АвторизацияВЛичномКабинетеГрузоперевозчика", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПриИзмененииРеквизитовФормы

&НаСервере
Процедура ПриИзмененииГрузоперевозчикаНаСервере(ПостФикс)
	
	Если ЗначениеЗаполнено(ЭтотОбъект["Грузоперевозчик" + ПостФикс]) Тогда
		
		ЭтотОбъект["Тариф" + ПостФикс] = "";
			Элементы["Тариф" + ПостФикс].СписокВыбора.Очистить();
			
		ЗаполнитьСпискиВыбораТарифов();
		
		ЭтотОбъект["ФоновоеЗаданиеПолучитьТарифы" + ПостФикс] =
				ПолучитьДоступныеТарифыВФоне(ПостФикс);
				
		Если Не ССобственногоСклада0 Тогда
			
			ЭтотОбъект["Терминал" + ПостФикс] = "";
			Элементы["Терминал" + ПостФикс].СписокВыбора.Очистить();
			
			ЗаполнитьСпискиВыбораТерминалов();
			
			ЭтотОбъект["ФоновоеЗаданиеПолучитьДоступныеТерминалы" + ПостФикс] =
				ПолучитьДоступныеТерминалыВФоне(ПостФикс);
		КонецЕсли;
		
		ЭтотОбъект["Тариф" + ПостФикс] = "";
		Элементы["Тариф" + ПостФикс].СписокВыбора.Очистить();
	КонецЕсли;
	
	ПриИзмененииГрузоперевозчика(ЭтотОбъект, ПостФикс);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииГрузоперевозчика(Форма, ПостФикс)
	
	ТекущийГрузоперевозчик = Форма["Грузоперевозчик" + ПостФикс];
	НастройкиПеревозчика = Форма.Перевозчики.НайтиСтроки(Новый Структура("Перевозчик", ТекущийГрузоперевозчик));
	Если НЕ НастройкиПеревозчика.Количество() Тогда
		Форма["ТребуетсяАвторизация" + ПостФикс] = Ложь;
		Форма["ИсключитьДругихПеревозчиков" + ПостФикс] = Ложь;
		Форма["Тариф" + ПостФикс] = "";
		Форма["ИсключитьДругиеТарифы" + ПостФикс] = Ложь;
		Форма["Терминал" + ПостФикс] = "";
		
		Форма.Элементы["ТребуетсяАвторизация" + ПостФикс].Доступность = Ложь;
		Форма.Элементы["ИсключитьДругихПеревозчиков" + ПостФикс].Доступность = Ложь;
		Форма.Элементы["Тариф" + ПостФикс].ТолькоПросмотр = Истина;
		Форма.Элементы["ИсключитьДругиеТарифы" + ПостФикс].Доступность = Ложь;
		Форма.Элементы["Терминал" + ПостФикс].ТолькоПросмотр = Истина;
		Возврат;
	КонецЕсли;
	
	НастройкаПеревозчика = НастройкиПеревозчика[0];
	
	ТребуетсяАвторизация = НастройкаПеревозчика.ТребуетсяАвторизация
		И ЗначениеЗаполнено(НастройкаПеревозчика.ИдентификаторСервиса);
	
	Форма["ТребуетсяАвторизация" + ПостФикс] = ТребуетсяАвторизация;
	Форма.Элементы["ТребуетсяАвторизация" + ПостФикс].Доступность = ТребуетсяАвторизация;
	
	ПеревозчикЗаполнен = ЗначениеЗаполнено(ТекущийГрузоперевозчик);
	Форма.Элементы["ИсключитьДругихПеревозчиков" + ПостФикс].Доступность = ПеревозчикЗаполнен;
	Форма.Элементы["Терминал" + ПостФикс].ТолькоПросмотр = 
		Форма.ССобственногоСклада0 ИЛИ (НЕ Форма.ССобственногоСклада0 И НЕ ПеревозчикЗаполнен);
	
	Форма.Элементы["Тариф" + ПостФикс].ТолькоПросмотр = НЕ ПеревозчикЗаполнен;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииТарифаПеревозчика(Форма, ПостФикс)
	
	ТекущийТариф = Форма["Тариф" + ПостФикс];
	
	ТарифЗаполнен = ЗначениеЗаполнено(ТекущийТариф);
	
	Форма.Элементы["ИсключитьДругиеТарифы" + ПостФикс].Доступность = ТарифЗаполнен;
	
	Если Не ТарифЗаполнен Тогда
		Форма["ИсключитьДругиеТарифы" + ПостФикс] = Ложь;
		ЗаголовокТарифа = "";
	Иначе
		ТекущийПеревозчик = Форма["Грузоперевозчик" + ПостФикс];
		ЗаголовокТарифа = ОписаниеТарифа(ТекущийТариф,
			ИдентификаторПеревозчика(ТекущийПеревозчик, Форма.Перевозчики),
			Форма.Тарифы);
	КонецЕсли;
	
	Форма.Элементы["Тариф" + ПостФикс + "РасширеннаяПодсказка"].Заголовок = ЗаголовокТарифа;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииИсключитьДругихПеревозчиков(Форма, ПостФикс)
	
	Если ЗначениеЗаполнено(Форма["Грузоперевозчик" + ПостФикс]) Тогда
		
		Форма.Элементы["Грузоперевозчик" + ПостФикс].ТолькоПросмотр =
			Форма["ИсключитьДругихПеревозчиков" + ПостФикс];
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииИсключитьДругиеТарифы(Форма, ПостФикс)
	
	Если ЗначениеЗаполнено(Форма["Тариф" + ПостФикс]) Тогда
		
		Форма.Элементы["Тариф" + ПостФикс].ТолькоПросмотр = 
			Форма["ИсключитьДругиеТарифы" + ПостФикс];
			
		Если Форма["ИсключитьДругиеТарифы" + ПостФикс] Тогда
			Если НЕ Форма["ИсключитьДругихПеревозчиков" + ПостФикс] Тогда
				Форма["ИсключитьДругихПеревозчиков" + ПостФикс] = Истина;
				ПриИзмененииИсключитьДругихПеревозчиков(Форма, ПостФикс);
			КонецЕсли;
			Форма.Элементы["ИсключитьДругихПеревозчиков" + ПостФикс].Доступность = Ложь;
		Иначе
			Форма.Элементы["ИсключитьДругихПеревозчиков" + ПостФикс].Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииГабарита(Форма, ПостФикс)
	
	Форма["Объем" + ПостФикс] = 
		Форма["Длина" + ПостФикс] * Форма["Ширина" + ПостФикс] * Форма["Высота" + ПостФикс]/1000000;
	
КонецПроцедуры

#КонецОбласти

#Область Организация

&НаКлиенте
Процедура ПроверитьОрганизациюБизнесСети(ОрганизацияБизнесСети, Отказ)
	
	Если СписокОрганизаций.НайтиПоЗначению(ОрганизацияБизнесСети) = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопросЗарегистрироватьОрганизацию(Знач Результат = Неопределено, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Организация = Неопределено;
		Если СписокОрганизаций.Количество()>0 Тогда
			Организация = СписокОрганизаций.Получить(0).Значение;
		КонецЕсли;
		
		ТекущаяОрганизация = Организация;
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Ссылка", Организация);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПослеРегистрацииОрганизации", ЭтотОбъект);
	ОткрытьФорму("Обработка.БизнесСеть.Форма.РегистрацияОрганизаций",, ЭтотОбъект,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеРегистрацииОрганизации(Знач Результат = Неопределено, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Отказ = Ложь;
	
	СписокОрганизацийБизнесСети();
	
	ПроверитьОрганизациюБизнесСети(Организация, Отказ);
	
	Если Отказ Тогда
		Организация = Неопределено;
		Если СписокОрганизаций.Количество()>0 Тогда
			Организация = СписокОрганизаций.Получить(0).Значение;
		КонецЕсли;
	КонецЕсли;
	
	ТекущаяОрганизация = Организация;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОрганизацииБизнесСетиНаСервере()
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(СервисДоставкиСлужебный.ОрганизацииБизнесСети());
	
КонецФункции

&НаСервере
Процедура СписокОрганизацийБизнесСети()
	
	СписокОрганизаций.Очистить();
	ОрганизацииБизнесСети = ОрганизацииБизнесСетиНаСервере();
	Для Каждого Строка Из ОрганизацииБизнесСети Цикл
		СписокОрганизаций.Добавить(Строка.Организация, Строка.Наименование);
	КонецЦикла;
	
	Если СписокОрганизаций.Количество()>0 Тогда
		Организация = СписокОрганизаций.Получить(0).Значение;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяОрганизация = Организация;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФактическийАдрес(Организация)
	
	АдресОрганизацииПредставление = "";
	АдресОрганизацииЗначение = "";
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ФактическийАдрес = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		Организация,
		Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации,
		ТекущаяДатаСеанса(),
		Ложь);
		
	Если ФактическийАдрес.Количество()>0 Тогда
		АдресОрганизацииПредставление = ФактическийАдрес[0].Представление;
		АдресОрганизацииЗначение = ФактическийАдрес[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияПоОрганизации(Организация)
	
	ЗаполнитьФактическийАдрес(Организация);
	
	Для к = 0 По 4 Цикл
		
		НастройкиПоОрганизации = НастройкиРаботыСПеревозчиком.НайтиСтроки(
			Новый Структура("Организация, СценарийПеревозки", Организация, Перечисления.СценарииПеревозкиСервисДоставки[к]));
			
		ШаблонНастройки = Новый Структура();
		ШаблонНастройки.Вставить("Контрагент" + Строка(к), "");
		ШаблонНастройки.Вставить("ТребуетсяАвторизация" + Строка(к), Ложь);
		ШаблонНастройки.Вставить("ОплачиваетЗаказчик" + Строка(к), Ложь);
		ШаблонНастройки.Вставить("ФормаОплаты" + Строка(к), "");
		ШаблонНастройки.Вставить("ВесРассчитывается" + Строка(к), Ложь);
		ШаблонНастройки.Вставить("Вес" + Строка(к), 0);
		ШаблонНастройки.Вставить("ГабаритыРассчитываются" + Строка(к), Ложь);
		ШаблонНастройки.Вставить("Длина" + Строка(к), 0);
		ШаблонНастройки.Вставить("Ширина" + Строка(к), 0);
		ШаблонНастройки.Вставить("Высота" + Строка(к), 0);
		ШаблонНастройки.Вставить("Объем" + Строка(к), 0);
		ШаблонНастройки.Вставить("ССобственногоСклада" + Строка(к), Ложь);
		ШаблонНастройки.Вставить("Грузоперевозчик" + Строка(к), "");
		ШаблонНастройки.Вставить("Тариф" + Строка(к), "");
		ШаблонНастройки.Вставить("Терминал" + Строка(к), "");
		ШаблонНастройки.Вставить("ИсключитьДругихПеревозчиков" + Строка(к), Ложь);
		ШаблонНастройки.Вставить("ИсключитьДругиеТарифы" + Строка(к), Ложь);
		
		Если НастройкиПоОрганизации.Количество()>0 Тогда
			
			ТекущийШаблон = НастройкиПоОрганизации[0];
			
			ШаблонНастройки.Вставить("Контрагент" + Строка(к), ТекущийШаблон.Контрагент);
			ШаблонНастройки.Вставить("ТребуетсяАвторизация" + Строка(к), ТекущийШаблон.ТребуетсяАвторизация);
			ШаблонНастройки.Вставить("ОплачиваетЗаказчик" + Строка(к), ТекущийШаблон.ОплачиваетЗаказчик);
			ШаблонНастройки.Вставить("ФормаОплаты" + Строка(к), ТекущийШаблон.ФормаОплаты);
			ШаблонНастройки.Вставить("ВесРассчитывается" + Строка(к), ТекущийШаблон.ВесРассчитывается);
			ШаблонНастройки.Вставить("Вес" + Строка(к), ТекущийШаблон.Вес);
			ШаблонНастройки.Вставить("ГабаритыРассчитываются" + Строка(к), ТекущийШаблон.ГабаритыРассчитываются);
			ШаблонНастройки.Вставить("Длина" + Строка(к), ТекущийШаблон.Длина);
			ШаблонНастройки.Вставить("Ширина" + Строка(к), ТекущийШаблон.Ширина);
			ШаблонНастройки.Вставить("Высота" + Строка(к), ТекущийШаблон.Высота);
			ШаблонНастройки.Вставить("Объем" + Строка(к), ТекущийШаблон.Объем);
			ШаблонНастройки.Вставить("ССобственногоСклада" + Строка(к), ТекущийШаблон.ССобственногоСклада);
			
			ШаблонНастройки.Вставить("Грузоперевозчик" + Строка(к), ТекущийШаблон.Грузоперевозчик);
			ШаблонНастройки.Вставить("Тариф" + Строка(к), ТекущийШаблон.Тариф);
			ШаблонНастройки.Вставить("Терминал" + Строка(к), ТекущийШаблон.Терминал);
			ШаблонНастройки.Вставить("ИсключитьДругихПеревозчиков" + Строка(к), ТекущийШаблон.ИсключитьДругихПеревозчиков);
			ШаблонНастройки.Вставить("ИсключитьДругиеТарифы" + Строка(к), ТекущийШаблон.ИсключитьДругиеТарифы);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ШаблонНастройки);
		
		УстановитьДоступность();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Перевозчики

&НаСервере
Процедура СписокПеревозчиков()
	
	Перевозчики.Очистить();
	
	ФоновоеЗаданиеПолучитьГрузоперевозчиков = ПолучитьГрузоперевозчиковВФоне();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискиВыбораПеревозчиков()
	
	СписокВыбора = Новый СписокЗначений();
	
	Для каждого Строка Из Перевозчики Цикл
		
		СписокВыбора.Добавить(Строка.Перевозчик, Строка.Перевозчик);
	КонецЦикла;
	
	УстановитьСвойствоПолей(ЭтотОбъект, "Грузоперевозчик", "СписокВыбора", СписокВыбора);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискиВыбораТарифов()
	
	Для каждого СтрокаПеревозчик Из Перевозчики Цикл
		
		СписокВыбора = Новый Массив();
		
		НайденныеТарифы = Тарифы.НайтиСтроки(Новый Структура("ПеревозчикИД", СтрокаПеревозчик.ПеревозчикИД));
		Для каждого Строка Из НайденныеТарифы Цикл
			СписокВыбора.Добавить(Строка.Тариф);
		КонецЦикла;
		
		Для к = 0 По 4 Цикл
			
			Если ЭтотОбъект["Грузоперевозчик" + Строка(к)] = СтрокаПеревозчик.Перевозчик Тогда
				Элементы["Тариф" + Строка(к)].СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискиВыбораТерминалов()
	
	Для каждого СтрокаПеревозчик Из Перевозчики Цикл
		
		СписокВыбора = Новый Массив();
		
		НайденныеТерминалы = Терминалы.НайтиСтроки(Новый Структура("ПеревозчикИД", СтрокаПеревозчик.ПеревозчикИД));
		Для каждого Строка Из НайденныеТерминалы Цикл
			СписокВыбора.Добавить(Строка.Терминал);
		КонецЦикла;
		
		Для к = 0 По 4 Цикл
			
			Если ЭтотОбъект["Грузоперевозчик" + Строка(к)] = СтрокаПеревозчик.Перевозчик Тогда
				Элементы["Терминал" + Строка(к)].СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиРаботыСПеревозчиком()
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	НастройкиРаботыСПеревозчиком.Организация КАК Организация,
	|	НастройкиРаботыСПеревозчиком.СценарийПеревозки КАК СценарийПеревозки,
	|	НастройкиРаботыСПеревозчиком.Контрагент КАК Контрагент,
	|	НастройкиРаботыСПеревозчиком.ТребуетсяАвторизация КАК ТребуетсяАвторизация,
	|	НастройкиРаботыСПеревозчиком.ПеревозчикИД КАК ПеревозчикИД,
	|	НастройкиРаботыСПеревозчиком.ТарифИД КАК ТарифИД,
	|	НастройкиРаботыСПеревозчиком.ТерминалИД КАК ТерминалИД,
	|	НастройкиРаботыСПеревозчиком.Грузоперевозчик КАК Грузоперевозчик,
	|	НастройкиРаботыСПеревозчиком.Тариф КАК Тариф,
	|	НастройкиРаботыСПеревозчиком.Терминал КАК Терминал,
	|	НастройкиРаботыСПеревозчиком.ОплачиваетЗаказчик КАК ОплачиваетЗаказчик,
	|	НастройкиРаботыСПеревозчиком.ФормаОплаты КАК ФормаОплаты,
	|	НастройкиРаботыСПеревозчиком.ВесРассчитывается КАК ВесРассчитывается,
	|	НастройкиРаботыСПеревозчиком.Вес КАК Вес,
	|	НастройкиРаботыСПеревозчиком.ГабаритыРассчитываются КАК ГабаритыРассчитываются,
	|	НастройкиРаботыСПеревозчиком.Длина КАК Длина,
	|	НастройкиРаботыСПеревозчиком.Ширина КАК Ширина,
	|	НастройкиРаботыСПеревозчиком.Высота КАК Высота,
	|	НастройкиРаботыСПеревозчиком.Объем КАК Объем,
	|	НастройкиРаботыСПеревозчиком.ИсключитьДругихПеревозчиков КАК ИсключитьДругихПеревозчиков,
	|	НастройкиРаботыСПеревозчиком.ИсключитьДругиеТарифы КАК ИсключитьДругиеТарифы,
	|	НастройкиРаботыСПеревозчиком.ССобственногоСклада КАК ССобственногоСклада
	|ИЗ
	|	РегистрСведений.НастройкиРаботыСПеревозчикамиСервисДоставки КАК НастройкиРаботыСПеревозчиком
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиПеревозчиков.Грузоперевозчик КАК Перевозчик,
	|	НастройкиПеревозчиков.ТребуетсяАвторизация КАК ТребуетсяАвторизация,
	|	НастройкиПеревозчиков.ПеревозчикИД КАК ПеревозчикИД
	|ИЗ
	|	РегистрСведений.НастройкиРаботыСПеревозчикамиСервисДоставки КАК НастройкиПеревозчиков
	|ГДЕ
	|	НЕ НастройкиПеревозчиков.ПеревозчикИД = """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиПеревозчиков.Терминал КАК Терминал,
	|	НастройкиПеревозчиков.ТерминалИД КАК ТерминалИД,
	|	НастройкиПеревозчиков.ПеревозчикИД КАК ПеревозчикИД
	|ИЗ
	|	РегистрСведений.НастройкиРаботыСПеревозчикамиСервисДоставки КАК НастройкиПеревозчиков
	|ГДЕ
	|	НЕ НастройкиПеревозчиков.ПеревозчикИД = """"";
	
	Результат = Запрос.ВыполнитьПакет();
	
	НастройкиРаботыСПеревозчиком.Загрузить(Результат[0].Выгрузить());
	
	Перевозчики.Загрузить(Результат[1].Выгрузить());
	
	Терминалы.Загрузить(Результат[2].Выгрузить());
	
	ЗаполнитьЗначенияПоОрганизации(Организация);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьДанныеСервиса()
	
	СписокОрганизацийБизнесСети();
	СписокПеревозчиков();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеОбработки()
	
	ЗаполнитьНастройкиРаботыСПеревозчиком();
	ЗаполнитьСпискиВыбораПеревозчиков();
	ЗаполнитьСпискиВыбораТарифов();
	ЗаполнитьСпискиВыбораТерминалов();
	
	Для к = 0 По 4 Цикл
		Если ЗначениеЗаполнено(ЭтотОбъект["Грузоперевозчик" + Строка(к)]) Тогда
			ЭтотОбъект["ФоновоеЗаданиеПолучитьТарифы" + Строка(к)] =
				ПолучитьДоступныеТарифыВФоне(Строка(к));
				
			Если НЕ ЭтотОбъект.ССобственногоСклада0 Тогда
				ЭтотОбъект["ФоновоеЗаданиеПолучитьДоступныеТерминалы" + Строка(к)] =
					ПолучитьДоступныеТерминалыВФоне(Строка(к));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступность()
	
	УстановитьДоступностьПолейПунктПриема(ЭтотОбъект);
	УстановитьДоступностьПоляВес(ЭтотОбъект);
	УстановитьДоступностьПолейГабариты(ЭтотОбъект);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьПоляВес(Форма)
	
	УстановитьСвойствоПолей(Форма, "Вес", "ТолькоПросмотр", Форма.ВесРассчитывается0);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьПолейГабариты(Форма)
	
	УстановитьСвойствоПолей(Форма, "ГруппаГабариты", "ТолькоПросмотр", Форма.ГабаритыРассчитываются0);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьПолейПунктПриема(Форма)
	
	УстановитьСвойствоПолей(Форма, "Терминал", "ТолькоПросмотр", Форма.ССобственногоСклада0);
	
	ПодсказкаВвода = НСтр("ru = 'выбирать при заказе доставки'");
	Если Форма.ССобственногоСклада0 Тогда
		ПодсказкаВвода = НСтр("ru = 'не используется'");
	КонецЕсли;
	УстановитьСвойствоПолей(Форма, "Терминал", "ПодсказкаВвода", ПодсказкаВвода);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойствоПолей(Форма, ИмяЭлемента, СвойствоЭлемента, Значение)
	
	Для к = 0 По 4 Цикл
		ЭлементФормы = Форма.Элементы.Найти(ИмяЭлемента + Строка(к));
		Если ЭлементФормы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Значение) = Тип("СписокЗначений") И СвойствоЭлемента = "СписокВыбора" Тогда
			ЭлементФормы[СвойствоЭлемента].Очистить();
			Для каждого Элемент Из Значение Цикл
				ЭлементФормы[СвойствоЭлемента].Добавить(Элемент.Значение, Элемент.Представление);
			КонецЦикла;
		Иначе
			ЭлементФормы[СвойствоЭлемента] = Значение;
			
		КонецЕсли;
		
		УстановитьСвойствоЗависимыхПолей(Форма, ИмяЭлемента);
	КонецЦикла;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗначениеПолей(Форма, ИмяЭлемента, Значение)
	
	ДанныеРеквизитов = Новый Структура();
	
	Для к = 0 По 4 Цикл
		
		ДанныеРеквизитов.Вставить(ИмяЭлемента + Строка(к), Значение);
		
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(Форма, ДанныеРеквизитов);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойствоЗависимыхПолей(Форма, ИмяЭлемента)
	
	Если ИмяЭлемента = "Грузоперевозчик" Тогда
		
		Для к = 0 По 4 Цикл
			ПриИзмененииГрузоперевозчика(Форма, Строка(к));
			ПриИзмененииИсключитьДругихПеревозчиков(Форма, Строка(к));
			ПриИзмененииТарифаПеревозчика(Форма, Строка(к));
			ПриИзмененииИсключитьДругиеТарифы(Форма, Строка(к))
		КонецЦикла;
	ИначеЕсли ИмяЭлемента = "Вес" Тогда
		Для к = 1 По 3 Цикл
			Форма.Элементы["ГруппаКатегорииГрузов" + Строка(к)].Доступность = Форма.ВесРассчитывается0;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПостфиксЭлемента(Элемент)
	
	Возврат Прав(Элемент.Имя, 1);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИдентификаторПеревозчика(Перевозчик, Перевозчики)
	
	ИдентификаторПеревозчика = "";
	НайденныеСтроки = Перевозчики.НайтиСтроки(Новый Структура("Перевозчик", Перевозчик));
	Если НайденныеСтроки.Количество()>0 Тогда
		ИдентификаторПеревозчика = НайденныеСтроки[0].ПеревозчикИД;
	КонецЕсли;
	
	Возврат ИдентификаторПеревозчика;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИдентификаторТарифа(Тариф, ИдентификаторПеревозчика, Тарифы)
	
	ИдентификаторТарифа = "";
	НайденныеСтроки = Тарифы.НайтиСтроки(Новый Структура("Тариф, ПеревозчикИД", Тариф, ИдентификаторПеревозчика));
	Если НайденныеСтроки.Количество()>0 Тогда
		ИдентификаторТарифа = НайденныеСтроки[0].ТарифИД;
	КонецЕсли;
	
	Возврат ИдентификаторТарифа;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТарифа(Тариф, ИдентификаторПеревозчика, Тарифы)
	
	ИдентификаторТарифа = "";
	НайденныеСтроки = Тарифы.НайтиСтроки(Новый Структура("Тариф, ПеревозчикИД", Тариф, ИдентификаторПеревозчика));
	Если НайденныеСтроки.Количество()>0 Тогда
		ИдентификаторТарифа = НайденныеСтроки[0].Описание;
	КонецЕсли;
	
	Возврат ИдентификаторТарифа;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИдентификаторТерминала(Терминал, ИдентификаторПеревозчика, Терминалы)
	
	ИдентификаторТерминала = "";
	НайденныеСтроки = Терминалы.НайтиСтроки(Новый Структура("Терминал, ПеревозчикИД", Терминал, ИдентификаторПеревозчика));
	Если НайденныеСтроки.Количество()>0 Тогда
		ИдентификаторТерминала = НайденныеСтроки[0].ТерминалИД;
	КонецЕсли;
	
	Возврат ИдентификаторТерминала;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьЗначенияСценария(Форма, Постфикс)
	
	Форма["Грузоперевозчик" + Постфикс] = "";
	ПриИзмененииГрузоперевозчика(Форма, ПостФикс);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАдресПолучателя(Результат, Постфикс)
	
	Если НЕ Постфикс = "4" Тогда
		Результат.Вставить("ПолучательАдрес", АдресОрганизацииПредставление);
		Результат.Вставить("ПолучательАдресЗначение",
			Новый ХранилищеЗначения(АдресОрганизацииЗначение, Новый СжатиеДанных(9)));
			
		Возврат;
	КонецЕсли;
		
	Результат.Вставить("ПолучательАдрес",
		НСтр("ru = '690025, Приморский край, городской округ Владивостокский, Владивосток г, 1-я Встречная ул, дом 1'"));
		
	АдресЗначение = НСтр("ru = '{
		|""value"": ""690025, Приморский край, городской округ Владивостокский, Владивосток г, 1-я Встречная ул, дом 1"",
		|""comment"": """",
		|""type"": ""Адрес"",
		|""country"": ""РОССИЯ"",
		|""addressType"": ""Муниципальный"",
		|""countryCode"": ""643"",
		|""ZIPcode"": ""690025"",
		|""area"": ""Приморский"",
		|""areaType"": ""край"",
		|""city"": ""Владивосток"",
		|""cityType"": ""г"",
		|""street"": ""1-я Встречная"",
		|""streetType"": ""ул"",
		|""id"": ""e8b7ab73-33df-48aa-83ac-7b8e6db81b42"",
		|""areaCode"": """",
		|""areaId"": ""43909681-d6e1-432d-b61f-ddac393cb5da"",
		|""district"": """",
		|""districtType"": """",
		|""districtId"": """",
		|""munDistrict"": ""городской округ Владивостокский"",
		|""munDistrictType"": ""г.о."",
		|""munDistrictId"": ""437a37c7-681e-4b62-b03d-055ee761024c"",
		|""cityId"": ""7b6de6a5-86d0-4735-b11a-499081111af8"",
		|""settlement"": """",
		|""settlementType"": """",
		|""settlementId"": """",
		|""cityDistrict"": """",
		|""cityDistrictType"": """",
		|""cityDistrictId"": """",
		|""territory"": """",
		|""territoryType"": """",
		|""territoryId"": """",
		|""locality"": """",
		|""localityType"": """",
		|""localityId"": """",
		|""streetId"": ""e8b7ab73-33df-48aa-83ac-7b8e6db81b42"",
		|""houseType"": ""Дом"",
		|""houseNumber"": ""1"",
		|""houseId"": ""9e1e7db7-40c2-4d22-98d6-7fb2a99ce629"",
		|""buildings"": [],
		|""apartments"": [],
		|""codeKLADR"": """",
		|""oktmo"": ""05701000001"",
		|""okato"": ""05401372000"",
		|""asInDocument"": """",
		|""ifnsFLCode"": ""2543"",
		|""ifnsULCode"": ""2543"",
		|""ifnsFLAreaCode"": """",
		|""ifnsULAreaCode"": """",
		|""stead"": """",
		|""steadId"": """"
		|}'");
	Результат.Вставить("ПолучательАдресЗначение",
		Новый ХранилищеЗначения(АдресЗначение, Новый СжатиеДанных(9)));
		
КонецПроцедуры

#Область ВыполнитьЗапросВФоне

&НаСервере
Функция ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ПараметрыОперации)
	
	// Проверка подключения Интернет-поддержки пользователей.
	ИнтернетПоддержкаПодключена = ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	Если Не ИнтернетПоддержкаПодключена Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Отказ = Ложь;
	ПараметрыЗапроса = ПараметрыЗапроса(ПараметрыОперации, Отказ);
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Постфикс = "";
	ПараметрыОперации.Свойство("Постфикс", Постфикс);
	
	ИмяФоновогоЗадания = "ФоновоеЗадание" + ПараметрыОперации.ИмяПроцедуры + Постфикс;
	ФоновоеЗадание = ЭтотОбъект[ИмяФоновогоЗадания];
	Если ФоновоеЗадание <> Неопределено Тогда
		ОтменитьВыполнениеЗадания(ФоновоеЗадание.ИдентификаторЗадания);
	КонецЕсли;
	
	Задание = Новый Структура("ИмяПроцедуры, Наименование, ПараметрыПроцедуры");
	Задание.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.'"),
		ПараметрыОперации.НаименованиеОперации);
	Задание.ИмяПроцедуры = "СервисДоставки." + ПараметрыОперации.ИмяПроцедуры;
	Задание.ПараметрыПроцедуры = ПараметрыЗапроса;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = Задание.Наименование;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(Задание.ИмяПроцедуры,
		Задание.ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОтменитьВыполнениеЗадания(ИдентификаторЗадания)
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
		ИдентификаторЗадания = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьГрузоперевозчиковВФоне()
	
	ПараметрыОперации = Новый Структура("ВыводитьОкноОжидания");
	ПараметрыОперации.Вставить("ИмяПроцедуры", СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьГрузоперевозчиков());
	ПараметрыОперации.Вставить("НаименованиеОперации", НСтр("ru = 'Получение списка грузоперевозчиков.'"));
	
	Возврат ВыполнитьЗапросВФоне(Ложь, ПараметрыОперации);
	
КонецФункции

&НаСервере
Функция ПолучитьДоступныеТарифыВФоне(Постфикс)
	
	ПараметрыОперации = Новый Структура("ВыводитьОкноОжидания");
	ПараметрыОперации.Вставить("ИмяПроцедуры", СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьТарифы());
	ПараметрыОперации.Вставить("НаименованиеОперации", НСтр("ru = 'Получение списка доступных тарифов.'"));
	ПараметрыОперации.Вставить("Постфикс", Постфикс);
	
	Возврат ВыполнитьЗапросВФоне(Ложь, ПараметрыОперации);
	
КонецФункции

&НаСервере
Функция ПолучитьДоступныеТерминалыВФоне(Постфикс)
	
	ПараметрыОперации = Новый Структура("ВыводитьОкноОжидания");
	ПараметрыОперации.Вставить("ИмяПроцедуры", СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьДоступныеТерминалы());
	ПараметрыОперации.Вставить("НаименованиеОперации", НСтр("ru = 'Получение списка доступных терминалов.'"));
	ПараметрыОперации.Вставить("Постфикс", Постфикс);
	
	Возврат ВыполнитьЗапросВФоне(Ложь, ПараметрыОперации);
	
КонецФункции

#КонецОбласти

#Область ПараметрыЗапроса

&НаСервере
Функция ПараметрыЗапроса(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = Новый Структура();
	
	ИмяПроцедуры = ПараметрыОперации.ИмяПроцедуры;
	
	Если ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьГрузоперевозчиков() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаПолучитьГрузоперевозчиков(ПараметрыОперации, Отказ);
	ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьТарифы() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаПолучитьТарифы(ПараметрыОперации, Отказ);
	ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьДоступныеТерминалы() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаСпискаДоступныхТерминалов(ПараметрыОперации, Отказ);
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("ОрганизацияБизнесСетиСсылка", Организация);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаПолучитьГрузоперевозчиков(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаПолучитьГрузоперевозчиков();
	
	Возврат ПараметрыЗапроса;
КонецФункции

&НаСервере
Функция ПараметрыЗапросаПолучитьТарифы(ПараметрыОперации, Отказ)
	
	Результат = СервисДоставки.НовыйПараметрыЗапросаПолучитьТарифы();

	Результат.Вставить("ТипГрузоперевозки", 1);
	Результат.Вставить("ЗаказчикРоль", 1);
	
	Результат.Вставить("ДатаОтгрузки", НачалоДня(ТекущаяДатаСеанса()) + 24*60*60);
	Результат.Вставить("ВремяОтгрузкиС", 00010101090000);
	Результат.Вставить("ВремяОтгрузкиПо", 00010101180000);
	Результат.Вставить("ВремяОтгрузкиОбедС", 00010101130000);
	Результат.Вставить("ВремяОтгрузкиОбедПо", 00010101140000);
	
	Результат.Вставить("ДатаДоставки", КонецДня(ТекущаяДатаСеанса()) + 24*60*60);
	Результат.Вставить("ВремяДоставкиС", 00010101090000);
	Результат.Вставить("ВремяДоставкиПо", 00010101180000);
	Результат.Вставить("ВремяДоставкиОбедС", 00010101130000);
	Результат.Вставить("ВремяДоставкиОбедПо", 00010101140000);

	Результат.Вставить("ОтправительАдрес", АдресОрганизацииПредставление);
	Результат.Вставить("ОтправительАдресЗначение",
		Новый ХранилищеЗначения(АдресОрганизацииЗначение, Новый СжатиеДанных(9)));
		
	ЗаполнитьАдресПолучателя(Результат, ПараметрыОперации.Постфикс);
	
	Результат.Вставить("ГрузКоличествоГрузовыхМест", 1);
	Результат.Вставить("ГрузОбщийВес", Макс(0.1, ЭтотОбъект["Вес" + ПараметрыОперации.Постфикс]));
	Результат.Вставить("ГрузОбщийОбъем", Макс(0.1, ЭтотОбъект["Объем" + ПараметрыОперации.Постфикс]));
	Результат.Вставить("ГрузМаксимальнаяВысота", Макс(1, ЭтотОбъект["Высота" + ПараметрыОперации.Постфикс]));
	Результат.Вставить("ГрузМаксимальнаяДлина", Макс(1, ЭтотОбъект["Длина" + ПараметрыОперации.Постфикс]));
	Результат.Вставить("ГрузМаксимальнаяШирина", Макс(1, ЭтотОбъект["Ширина" + ПараметрыОперации.Постфикс]));
	
	Результат.Вставить("ГрузСодержимое", НСтр("ru = 'Товары'"));
	Результат.Вставить("ГрузСтоимость", 1);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаСпискаДоступныхТерминалов(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаПолучитьДоступныеТерминалы();
	
	ГрузоперевозчикИдентификатор =
		ИдентификаторПеревозчика(ЭтотОбъект["Грузоперевозчик" + ПараметрыОперации.Постфикс], Перевозчики);
		
	Если Не ЗначениеЗаполнено(ГрузоперевозчикИдентификатор) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(АдресОрганизацииЗначение) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("Адрес", АдресОрганизацииПредставление);
	ПараметрыЗапроса.Вставить("АдресЗначение", Новый ХранилищеЗначения(АдресОрганизацииЗначение, Новый СжатиеДанных(9)));
	
	ПараметрыЗапроса.Вставить("ГрузоперевозчикИдентификатор", ГрузоперевозчикИдентификатор);
	ПараметрыЗапроса.Вставить("Направление", 1);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

#КонецОбласти

#Область ВыполнитьЗапрос

&НаКлиенте
Процедура ОжидатьЗавершениеВыполненияЗапроса(ПараметрыОперации)
	
	Постфикс = "";
	ПараметрыОперации.Свойство("Постфикс", Постфикс);
	ИмяФоновогоЗадания = "ФоновоеЗадание" + ПараметрыОперации.ИмяПроцедуры + Постфикс;
	ФоновоеЗадание = ЭтотОбъект[ИмяФоновогоЗадания];
	ПараметрыОперации.Вставить("ФоновоеЗадание", ФоновоеЗадание);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения = ПараметрыОперации.НаименованиеОперации;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	ПараметрыОжидания.Вставить("ИдентификаторЗадания", ФоновоеЗадание.ИдентификаторЗадания);
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ВыполнитьЗапросЗавершение",
		ЭтотОбъект, ПараметрыОперации);
		
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, ОбработкаЗавершения, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;
	Постфикс = "";
	ДополнительныеПараметры.Свойство("Постфикс", Постфикс);
	ИмяФоновогоЗадания = "ФоновоеЗадание" + ДополнительныеПараметры.ИмяПроцедуры + Постфикс;
	ФоновоеЗадание = ЭтотОбъект[ИмяФоновогоЗадания];
	
	СервисДоставкиКлиент.ОбработатьРезультатФоновогоЗадания(Результат, ДополнительныеПараметры, Отказ);
	Если Результат = Неопределено ИЛИ ФоновоеЗадание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Отказ И Результат.Статус = "Выполнено" Тогда
		Если ЗначениеЗаполнено(Результат.АдресРезультата)
			И ЭтоАдресВременногоХранилища(Результат.АдресРезультата) 
			И ДополнительныеПараметры.ФоновоеЗадание.ИдентификаторЗадания =
				ЭтотОбъект[ИмяФоновогоЗадания].ИдентификаторЗадания Тогда
			
			Если ДополнительныеПараметры.ИмяПроцедуры =
					СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьГрузоперевозчиков() Тогда
				
				ЗагрузитьРезультатПолученияСпискаПеревозчиков(Результат.АдресРезультата);
				ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено;
				
			ИначеЕсли ДополнительныеПараметры.ИмяПроцедуры =
						СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьТарифы() Тогда
				
				ЗагрузитьРезультатПолученияТарифов(Результат.АдресРезультата, Постфикс);
				ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено;
				
			ИначеЕсли ДополнительныеПараметры.ИмяПроцедуры =
						СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьДоступныеТерминалы() Тогда
				
				ЗагрузитьРезультатПолученияСпискаДоступныхТерминалов(Результат.АдресРезультата, Постфикс);
				ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РезультатыЗапросаEDI

&НаСервере
Процедура ЗагрузитьРезультатПолученияСпискаПеревозчиков(АдресРезультата)
	
	ОперацияВыполнена = Ложь;
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		
		Если ЗначениеЗаполнено(Результат) И ТипЗнч(Результат) = Тип("Структура") Тогда
			
			Если Результат.Свойство("Список") Тогда
				
				ЭлементыСписка = Результат.Список;
				
				Для Каждого ТекущийЭлементСписка Из ЭлементыСписка Цикл
					
					ПараметрыПоиска = Новый Структура();
					ПараметрыПоиска.Вставить("Перевозчик", ТекущийЭлементСписка.Наименование);
					ПараметрыПоиска.Вставить("ПеревозчикИД", ТекущийЭлементСписка.Идентификатор);
					
					НайденныеСтроки = Перевозчики.НайтиСтроки(ПараметрыПоиска);
					
					Если НайденныеСтроки.Количество()>0 Тогда
						СтрокаТаблицы = НайденныеСтроки[0];
					Иначе
						СтрокаТаблицы = Перевозчики.Добавить();
						СтрокаТаблицы.Перевозчик = ТекущийЭлементСписка.Наименование;
						СтрокаТаблицы.ПеревозчикИД = ТекущийЭлементСписка.Идентификатор;
					КонецЕсли;
					
					
					СтрокаТаблицы.ТребуетсяАвторизация = ТекущийЭлементСписка.ТребуетсяАвторизация;
					СтрокаТаблицы.ИдентификаторСервиса = ТекущийЭлементСписка.ИдентификаторСервиса;
					СтрокаТаблицы.Авторизован = ТекущийЭлементСписка.ДанныеАвторизацииВведены;
					СтрокаТаблицы.ТипАвторизации = ТекущийЭлементСписка.ТипАвторизации;
					
				КонецЦикла;
				
				ОперацияВыполнена = Истина;
			
			КонецЕсли;
			
			СервисДоставки.ОбработатьБлокОшибок(Результат, ОперацияВыполнена);
			
		КонецЕсли;
	КонецЕсли;
	
	Если ОперацияВыполнена Тогда
		
		ЗаполнитьСпискиВыбораПеревозчиков();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатПолученияСпискаДоступныхТерминалов(АдресРезультата, Постфикс)
	
	ОперацияВыполнена = Ложь;
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		
		Если ЗначениеЗаполнено(Результат) И ТипЗнч(Результат) = Тип("Структура") Тогда
			
			Если Результат.Свойство("Список") И ТипЗнч(Результат.Список) = Тип("Массив") Тогда
					
					Для Каждого Терминал Из Результат.Список Цикл
						
						ПараметрыПоиска = Новый Структура();
						ПараметрыПоиска.Вставить("ТерминалИД", Терминал.Идентификатор);
						ПараметрыПоиска.Вставить("ПеревозчикИД", Терминал.ГрузоперевозчикИдентификатор);
						НайденныеСтроки = Терминалы.НайтиСтроки(ПараметрыПоиска);
						
						Если НайденныеСтроки.Количество()>0 Тогда
							СтрокаТерминал = НайденныеСтроки[0];
						Иначе
							СтрокаТерминал = Терминалы.Добавить();
							СтрокаТерминал.ТерминалИД = Терминал.Идентификатор;
							СтрокаТерминал.ПеревозчикИД = Терминал.ГрузоперевозчикИдентификатор;
						КонецЕсли;
						
						СтрокаТерминал.Терминал = Терминал.Наименование;
						
					КонецЦикла;
			КонецЕсли;
			
			ОперацияВыполнена = Истина;
			СервисДоставки.ОбработатьБлокОшибок(Результат, ОперацияВыполнена);
		КонецЕсли;
	КонецЕсли;
	
	Если ОперацияВыполнена Тогда
		
		ЗаполнитьСпискиВыбораТерминалов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатПолученияТарифов(АдресРезультата, Постфикс)
	
	ОперацияВыполнена = Ложь;
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		
		Если ЗначениеЗаполнено(Результат) И ТипЗнч(Результат) = Тип("Структура") Тогда
			
			Если Результат.Свойство("Список") И ТипЗнч(Результат.Список) = Тип("Массив") Тогда
					
					Для Каждого Тариф Из Результат.Список Цикл
						
						ПараметрыПоиска = Новый Структура();
						ПараметрыПоиска.Вставить("ТарифИД", Тариф.ТарифИдентификатор);
						ПараметрыПоиска.Вставить("ПеревозчикИД", Тариф.ГрузоперевозчикИдентификатор);
						НайденныеСтроки = Тарифы.НайтиСтроки(ПараметрыПоиска);
						
						Если НайденныеСтроки.Количество()>0 Тогда
							СтрокаТариф = НайденныеСтроки[0];
						Иначе
							СтрокаТариф = Тарифы.Добавить();
							СтрокаТариф.ТарифИД = Тариф.ТарифИдентификатор;
							СтрокаТариф.ПеревозчикИД = Тариф.ГрузоперевозчикИдентификатор;
						КонецЕсли;
						
						СтрокаТариф.Тариф = Тариф.ТарифНаименование;
						СтрокаТариф.Описание = Тариф.Описание;
						
					КонецЦикла;
			КонецЕсли;
			
			ОперацияВыполнена = Истина;
			СервисДоставки.ОбработатьБлокОшибок(Результат, ОперацияВыполнена);
		КонецЕсли;
	КонецЕсли;
	
	Если ОперацияВыполнена Тогда
		
		ЗаполнитьСпискиВыбораТарифов();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаписьНастроек

&НаСервере
Процедура ЗаписатьЗначенияНастроек(Отказ, ТекстОшибки)
	
	Для к = 0 По 4 Цикл
		
		НастройкиПоОрганизацииИШаблону = НастройкиРаботыСПеревозчиком.НайтиСтроки(
			Новый Структура("Организация, СценарийПеревозки", Организация, Перечисления.СценарииПеревозкиСервисДоставки[к]));
			
		ПеревозчикЗаполнен = ЗначениеЗаполнено(ЭтотОбъект["Грузоперевозчик" + Строка(к)]);
		ОчиститьЗапись = Ложь;
		
		Если НастройкиПоОрганизацииИШаблону.Количество()>0 Тогда
			НастройкаПоОрганизации = НастройкиПоОрганизацииИШаблону[0];
			Если Не ПеревозчикЗаполнен Тогда
				НастройкиРаботыСПеревозчиком.Удалить(НастройкаПоОрганизации);
				ОчиститьЗапись = Истина;
			КонецЕсли;
		Иначе
			Если ПеревозчикЗаполнен Тогда
				НастройкаПоОрганизации = НастройкиРаботыСПеревозчиком.Добавить();
				НастройкаПоОрганизации.Организация = Организация;
				НастройкаПоОрганизации.СценарийПеревозки = Перечисления.СценарииПеревозкиСервисДоставки[к];
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ОчиститьЗапись Тогда
			
			НастройкаПоОрганизации.Контрагент = ЭтотОбъект["Контрагент" + Строка(к)];
			НастройкаПоОрганизации.ССобственногоСклада = ССобственногоСклада0;
			НастройкаПоОрганизации.ТребуетсяАвторизация = ЭтотОбъект["ТребуетсяАвторизация" + Строка(к)];
			НастройкаПоОрганизации.ОплачиваетЗаказчик = ЭтотОбъект["ОплачиваетЗаказчик" + Строка(к)];
			НастройкаПоОрганизации.ФормаОплаты = ЭтотОбъект["ФормаОплаты" + Строка(к)];
			
			НастройкаПоОрганизации.ГабаритыРассчитываются = ГабаритыРассчитываются0;
			НастройкаПоОрганизации.Длина = Макс(1, ЭтотОбъект["Длина" + Строка(к)]);
			НастройкаПоОрганизации.Ширина = Макс(1, ЭтотОбъект["Ширина" + Строка(к)]);
			НастройкаПоОрганизации.Высота = Макс(1, ЭтотОбъект["Высота" + Строка(к)]);
			НастройкаПоОрганизации.Объем = Макс(0.1, ЭтотОбъект["Объем" + Строка(к)]);
			
			НастройкаПоОрганизации.ВесРассчитывается = ВесРассчитывается0;
			НастройкаПоОрганизации.Вес = Макс(0.1, ЭтотОбъект["Вес" + Строка(к)]);
			
			НастройкаПоОрганизации.Грузоперевозчик = ЭтотОбъект["Грузоперевозчик" + Строка(к)];
			НастройкаПоОрганизации.Тариф = ЭтотОбъект["Тариф" + Строка(к)];
			НастройкаПоОрганизации.Терминал = ЭтотОбъект["Терминал" + Строка(к)];
			НастройкаПоОрганизации.ИсключитьДругиеТарифы = ЭтотОбъект["ИсключитьДругиеТарифы" + Строка(к)];
			НастройкаПоОрганизации.ИсключитьДругихПеревозчиков = ЭтотОбъект["ИсключитьДругихПеревозчиков" + Строка(к)];
			
			НастройкаПоОрганизации.ПеревозчикИД =
				ИдентификаторПеревозчика(ЭтотОбъект["Грузоперевозчик" + Строка(к)], Перевозчики);
			
			Если ЗначениеЗаполнено(ЭтотОбъект["Тариф" + Строка(к)]) Тогда
				НастройкаПоОрганизации.ТарифИД = ИдентификаторТарифа(
					ЭтотОбъект["Тариф" + Строка(к)],
					НастройкаПоОрганизации.ПеревозчикИД,
					Тарифы);
			Иначе
				НастройкаПоОрганизации.ТарифИД = "";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЭтотОбъект["Терминал" + Строка(к)]) Тогда
				НастройкаПоОрганизации.ТерминалИД = ИдентификаторТерминала(
					ЭтотОбъект["Терминал" + Строка(к)],
					НастройкаПоОрганизации.ПеревозчикИД,
					Терминалы);
			Иначе
				НастройкаПоОрганизации.ТерминалИД = "";
			КонецЕсли;
		Иначе
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаписатьДанныеПоНастройке(Отказ, ТекстОшибки);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеПоНастройке(Отказ, ТекстОшибки)
	
	НаборЗаписей = РегистрыСведений.НастройкиРаботыСПеревозчикамиСервисДоставки.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор["Организация"].Установить(Организация);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НастройкиРаботыСПеревозчикамиСервисДоставки");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Организация", Организация);
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		НаборЗаписей.Записать(Истина);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Отказ = Истина;
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат;
	КонецПопытки;
	
	НастройкиПоОрганизации = НастройкиРаботыСПеревозчиком.НайтиСтроки(
		Новый Структура("Организация", Организация));
	
	Для Каждого Настройка Из НастройкиПоОрганизации Цикл
		
		НаборЗаписей = РегистрыСведений.НастройкиРаботыСПеревозчикамиСервисДоставки.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(НаборЗаписей, Настройка);
		
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
