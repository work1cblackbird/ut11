#Область ОписаниеПеременных

&НаКлиенте
Перем ВариантыВремениОтгрузки; //см. СервисДоставкиПовтИсп.ВариантыВремениОтгрузки

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не СервисДоставки.ПравоОтправкиЗаказовНаДоставкуПеревозчику() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.Свойство("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	
	СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ОрганизацияБизнесСетиСсылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Свойство("ТипГрузоперевозки", ТипГрузоперевозки);
	
	Если Не ЗначениеЗаполнено(ТипГрузоперевозки) Тогда
		
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не выбран тип грузоперевозки'"));
		Отказ = Истина;
		Возврат;
		
	ИначеЕсли Не СервисДоставки.ТипГрузоперевозкиДоступен(ТипГрузоперевозки) Тогда
		
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Выбранный тип грузоперевозки не доступен'"));
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	ЭтоКурьерскаяДоставка = (ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СКурьер()
		Или ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СКурьерика());
	
	НастроитьФормуПоТипуГрузоперевозки();
	
	УстановитьУсловноеОформление();
	
	// Установка полученных параметров и отборов.
	Параметры.Свойство("Отправитель", ОтборОтправитель);
	Параметры.Свойство("Получатель", ОтборПолучатель);
	
	ОтборыИзменение = ЗначениеЗаполнено(ОтборОтправитель) 
		Или ЗначениеЗаполнено(ОтборПолучатель)
		Или ЗначениеЗаполнено(ОтборОтправительАдресПредставление)
		Или ЗначениеЗаполнено(ОтборПолучательАдресПредставление)
		Или ЗначениеЗаполнено(ОтборГрузоперевозчик);
	
	ЗаполнитьСпискиВыбора();
	
	УстановитьЗначенияПоУмолчанию();
	
	СформироватьПараметрыОтбора();
	
	// Запуск фонового задания для загрузки справочников.
	ФоновоеЗаданиеПолучитьГрузоперевозчиков = ПолучитьГрузоперевозчиковВФоне();
	
	// Запуск фонового задания для поиска.
	ФоновоеЗаданиеПолучитьЗаказыНаДоставку = ПолучитьЗаказыНаДоставкуВФоне();
	
	// Запуск фонового задания для получения услуг.
	ФоновоеЗаданиеПолучитьУслугиТарифов = ПолучитьУслугиТарифовВФоне();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЭтоКурьерскаяДоставка Тогда

		ВариантыВремениОтгрузки = СервисДоставкиКлиентСервер.ВариантыВремениОтгрузки();
	
	КонецЕсли;

	Если ЗначениеЗаполнено(ФоновоеЗаданиеПолучитьГрузоперевозчиков) Тогда
		
		ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
		ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьГрузоперевозчиков();
		ПараметрыОперации.НаименованиеОперации = НСтр("ru = 'Получение списка грузоперевозчиков.'");
		
		ОжидатьЗавершениеВыполненияЗапроса(ПараметрыОперации);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФоновоеЗаданиеПолучитьЗаказыНаДоставку) Тогда 
		
		ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
		ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьЗаказыНаДоставку();
		ПараметрыОперации.НаименованиеОперации = НСтр("ru = 'Получение заказов на доставку.'");
		ПараметрыОперации.ВыводитьОкноОжидания = Истина;
		
		ОжидатьЗавершениеВыполненияЗапроса(ПараметрыОперации);
		
	КонецЕсли;

	Если ЗначениеЗаполнено(ФоновоеЗаданиеПолучитьУслугиТарифов) Тогда
		ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
		ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьУслугиТарифов();
		ПараметрыОперации.НаименованиеОперации = НСтр("ru = 'Получение услуг тарифов.'");
		
		ОжидатьЗавершениеВыполненияЗапроса(ПараметрыОперации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОбъединитьЗаказыВМультизаказыПриИзменении(Элемент)

	Если Не ОбъединитьЗаказыВМультизаказы Тогда
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ОбъединитьЗаказыВМультизаказыПриИзмененииЗавершение", ЭтотОбъект),
			НСтр("ru = 'Список мультизаказов и состав заказов на доставку в них будут перезаполнены. Продолжить?'"),
			РежимДиалогаВопрос.ДаНетОтмена);
	Иначе
		ДополнительныеПараметры = Новый Структура();
		ОбъединитьЗаказыВМультизаказыПриИзмененииЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъединитьЗаказыВМультизаказыПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
	
		Если Не ОбъединитьЗаказыВМультизаказы Тогда
			Элементы.ГруппаСписокПраво.Видимость = Ложь;
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаЗаказы;
		Иначе
			Элементы.ГруппаСписокПраво.Видимость = Истина;
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаМультизаказы;
		КонецЕсли;
		
		ГруппаСтраницыПриСменеСтраницы(Неопределено, Элементы.ГруппаСтраницы.ТекущаяСтраница)
		
	Иначе
		ОбъединитьЗаказыВМультизаказы = ?(ОбъединитьЗаказыВМультизаказы, Ложь, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ГруппаЗаказы Тогда
		ОбъединитьЗаказыВМультизаказы = Ложь;
		ОбновитьЗаказы(Неопределено);
	Иначе
		ОбъединитьЗаказыВМультизаказы = Истина;
		СгруппироватьЗаказыПоМультизаказам();
	КонецЕсли;
	
	УстановитьДоступностьОтправкиЗаказов();
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовШапкиФормыСтраницаЗаказы

&НаКлиенте
Процедура ДатаОтгрузкиПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ДатаОтгрузки) Тогда
		ТекущаяДата = НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса());
		ДатаОтгрузки = Макс(ТекущаяДата, ДатаОтгрузки);
	КонецЕсли;
	
	ЗарегистрироватьИзменениеОтборов(Ложь);
	ПолучитьЗаказыНаДоставку();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОтгрузкиРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЗначениеЗаполнено(ДатаОтгрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыСГруппировкамиПеревозчикНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущаяСтрока = Элементы.ЗаказыСГруппировками.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		ОткрытьФормуГрузоперевозчика(ТекущаяСтрока.ГрузоперевозчикИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

#Область ЭлементыОтборов

#Область Отправитель

&НаКлиенте
Процедура ОтборОтправительПриИзменении(Элемент)
	
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтправительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УчастникГрузоперевозкиНачалоВыбора(Элемент, 1, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтправительОчистка(Элемент, СтандартнаяОбработка)
	
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтправительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработатьВыборТипаУчастникаГрузоперевозки(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область Получатель

&НаКлиенте
Процедура ОтборПолучательПриИзменении(Элемент)
	
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПолучательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УчастникГрузоперевозкиНачалоВыбора(Элемент, 2, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПолучательОчистка(Элемент, СтандартнаяОбработка)
	
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПолучательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработатьВыборТипаУчастникаГрузоперевозки(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область Откуда

&НаКлиенте
Процедура ОтборОткудаПриИзменении(Элемент)
	
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОткудаОчистка(Элемент, СтандартнаяОбработка)
	
	ОтборОтправительАдресЗначение = "";
	ОтборОтправительАдресВладелец = Неопределено;
	ОтборОтправительАдресПредставление = "";
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОткудаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	АдресНачалоВыбора(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОткудаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	АдресОбработкаВыбора(Элемент, ВыбранноеЗначение);
	
КонецПроцедуры

#КонецОбласти

#Область Куда

&НаКлиенте
Процедура ОтборКудаПриИзменении(Элемент)
	
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКудаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	АдресНачалоВыбора(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКудаОчистка(Элемент, СтандартнаяОбработка)
	
	ОтборПолучательАдресЗначение = "";
	ОтборПолучательАдресВладелец = Неопределено;
	ОтборПолучательАдресПредставление = "";
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКудаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	АдресОбработкаВыбора(Элемент, ВыбранноеЗначение);
	
КонецПроцедуры

#КонецОбласти

#Область Грузоперевозчик

&НаКлиенте
Процедура ОтборГрузоперевозчикОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗначениеСписка = Элементы.ОтборГрузоперевозчик.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	Если ЗначениеСписка = Неопределено Тогда
		ОтборГрузоперевозчик = "";
		ОтборГрузоперевозчикНаименование = "";
	Иначе
		ОтборГрузоперевозчик = ВыбранноеЗначение;
		ОтборГрузоперевозчикНаименование = ЗначениеСписка.Представление;
	КонецЕсли;
	
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборГрузоперевозчикОчистка(Элемент, СтандартнаяОбработка)
	
	ОтборГрузоперевозчик = "";
	ОтборГрузоперевозчикНаименование = "";
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборГрузоперевозчикОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ОтборГрузоперевозчик <> "" Тогда
		ОткрытьФормуГрузоперевозчика(ОтборГрузоперевозчик);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ГотовностьЗаказов

&НаКлиенте
Процедура ОтборПоГотовностиЗаказовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ЗначениеСписка = Элементы.ОтборПоГотовностиЗаказов.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	Если ЗначениеСписка = Неопределено Тогда
		ОтборПоГотовностиЗаказов = 0;
		ОтборПоГотовностиЗаказовНаименование = "";
	Иначе
		ОтборПоГотовностиЗаказов = ВыбранноеЗначение;
		ОтборПоГотовностиЗаказовНаименование = ЗначениеСписка.Представление;
	КонецЕсли;

	ЗарегистрироватьИзменениеОтборов();

КонецПроцедуры

&НаКлиенте
Процедура ОтборПоГотовностиЗаказовОчистка(Элемент, СтандартнаяОбработка)
	
	ОтборПоГотовностиЗаказов = 0;
	ОтборПоГотовностиЗаказовНаименование = "";
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормыСтраницаЗаказыСГруппировками

&НаКлиенте
Процедура ВремяОтгрузкиПриИзменении(Элемент)
	
	Мультизаказ = Элементы.ЗаказыСГруппировками.ТекущиеДанные;
	
	Если Мультизаказ <> Неопределено Тогда
		СброситьТариф(Мультизаказ);
		ПослеИзмененияРеквизитовМультизаказа(Мультизаказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МультизаказыДатаОтгрузкиПриИзменении(Элемент)
	
	Мультизаказ = Элементы.ЗаказыСГруппировками.ТекущиеДанные;
	
	Если Мультизаказ <> Неопределено Тогда
		ТекущаяДата = НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса());
		Мультизаказ.ДатаОтгрузки = Макс(ТекущаяДата, Мультизаказ.ДатаОтгрузки);
		Мультизаказ.ЗаказПредставление = ПредставлениеНовогоМультизаказа(Мультизаказ, ЭтоКурьерскаяДоставка);
		СброситьТариф(Мультизаказ);
		ПослеИзмененияРеквизитовМультизаказа(Мультизаказ);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура МультизаказыДатаОтгрузкиОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	Мультизаказ = Элементы.ЗаказыСГруппировками.ТекущиеДанные;
	Если Мультизаказ <> Неопределено Тогда
		Мультизаказ.ДатаОтгрузки = Неопределено;
		МультизаказыДатаОтгрузкиПриИзменении(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительКонтактноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Мультизаказ = Элементы.ЗаказыСГруппировками.ТекущиеДанные; 
	ПараметрыОтбора = Новый Структура();
	ИмяРеквизита = Элемент.Имя + "Ссылка";
	
	Если Мультизаказ.ОтправительЭтоОрганизация Тогда
		ЗаполнитьПараметрыОтбораКонтактногоЛицаОрганизации(ПараметрыОтбора, Мультизаказ.ОтправительКонтрагентСсылка);
		ОткрытьФормуВыбора("КонтактноеЛицоОрганизацииСервисДоставки",
							ИмяРеквизита,
							ПараметрыОтбора,
							"ОбработатьВыборЗначенияДляТаблицыЗаказыСГруппировками",
							Мультизаказ[ИмяРеквизита]);
	Иначе
		ЗаполнитьПараметрыОтбораКонтактногоЛицаКонтрагента(ПараметрыОтбора, Мультизаказ.ОтправительКонтрагентСсылка);
		ОткрытьФормуВыбора("КонтактноеЛицоКонтрагентаСервисДоставки",
							ИмяРеквизита,
							ПараметрыОтбора,
							"ОбработатьВыборЗначенияДляТаблицыЗаказыСГруппировками",
							Мультизаказ[ИмяРеквизита]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительКонтактноеЛицоПриИзменении(Элемент)
	
	Мультизаказ = Элементы.ЗаказыСГруппировками.ТекущиеДанные;
	
	Если Мультизаказ <> Неопределено Тогда
		Мультизаказ.ОтправительКонтактноеЛицоСсылка = Неопределено;
		ПослеИзмененияРеквизитовМультизаказа(Мультизаказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительКонтактноеЛицоОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Мультизаказ = Элементы.ЗаказыСГруппировками.ТекущиеДанные;
	Если Мультизаказ <> Неопределено Тогда
		Мультизаказ.ОтправительКонтактноеЛицоНаименование = Неопределено;
		ОчиститьРеквизитМультизаказа(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительКонтактноеЛицоТелефонПриИзменении(Элемент)
	
	Мультизаказ = Элементы.ЗаказыСГруппировками.ТекущиеДанные;
	Если Мультизаказ <> Неопределено Тогда
		Мультизаказ.ОтправительКонтактноеЛицоТелефонЗначение = Неопределено;
		ОбработатьИзменениеКонтактнойИнформацииМультизаказа(Элемент, "Телефон");
		ПослеИзмененияРеквизитовМультизаказа(Мультизаказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительКонтактноеЛицоТелефонОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Мультизаказ = Элементы.ЗаказыСГруппировками.ТекущиеДанные;
	Если Мультизаказ <> Неопределено Тогда
		Мультизаказ.ОтправительКонтактноеЛицоТелефонПредставление = Неопределено;
		Мультизаказ.ОтправительКонтактноеЛицоТелефонЗначение = Неопределено;
		ПослеИзмененияРеквизитовМультизаказа(Мультизаказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительКонтактноеЛицоТелефонОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТелефонНачалоВыбора(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительКонтактноеЛицоТелефонДополнительныйПриИзменении(Элемент)
	Мультизаказ = Элементы.ЗаказыСГруппировками.ТекущиеДанные;
	Если Мультизаказ <> Неопределено Тогда
		Мультизаказ.ОтправительКонтактноеЛицоТелефонДополнительныйЗначение = Неопределено;
		ОбработатьИзменениеКонтактнойИнформацииМультизаказа(Элемент, "Телефон");
		ПослеИзмененияРеквизитовМультизаказа(Мультизаказ);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтправительКонтактноеЛицоТелефонДополнительныйОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Мультизаказ = Элементы.ЗаказыСГруппировками.ТекущиеДанные;
	Если Мультизаказ <> Неопределено Тогда
		Мультизаказ.ОтправительКонтактноеЛицоТелефонДополнительныйПредставление = Неопределено;
		Мультизаказ.ОтправительКонтактноеЛицоТелефонДополнительныйЗначение = Неопределено;
		ПослеИзмененияРеквизитовМультизаказа(Мультизаказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительКонтактноеЛицоТелефонДополнительныйОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТелефонНачалоВыбора(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительДобавитьДополнительныйТелефоныНажатие(Элемент)

	Мультизаказ = Элементы.ЗаказыСГруппировками.ТекущиеДанные;
	Если Мультизаказ <> Неопределено Тогда
		Мультизаказ.ОтправительКонтактноеЛицоТелефонДополнительныйДоступен = Истина;
		УстановитьВидимостьДополнительногоТелефона(Мультизаказ);
		ПослеИзмененияРеквизитовМультизаказа(Мультизаказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительУдалитьДополнительныйТелефонНажатие(Элемент)
	
	Мультизаказ = Элементы.ЗаказыСГруппировками.ТекущиеДанные;
	Если Мультизаказ <> Неопределено Тогда
		Мультизаказ.ОтправительКонтактноеЛицоТелефонДополнительныйЗначение = "";
		Мультизаказ.ОтправительКонтактноеЛицоТелефонДополнительныйПредставление = "";
		Мультизаказ.ОтправительКонтактноеЛицоТелефонДополнительныйДоступен = Ложь;
		УстановитьВидимостьДополнительногоТелефона(Мультизаказ);
		ПослеИзмененияРеквизитовМультизаказа(Мультизаказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяОтгрузкиПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Мультизаказ = Элементы.ЗаказыСГруппировками.ТекущиеДанные;
	Если Мультизаказ <> Неопределено Тогда
		
		Мультизаказ.ВремяОтгрузкиПредставление = Неопределено;
		Мультизаказ.ВариантВремениОтгрузкиПредставление = Неопределено;
		Мультизаказ.ВремяОтгрузкиС = Неопределено; 
		Мультизаказ.ВремяОтгрузкиПо = Неопределено; 
		Мультизаказ.ВремяОтгрузкиОбедС = Неопределено; 
		Мультизаказ.ВремяОтгрузкиОбедПо = Неопределено;
		ПослеИзмененияРеквизитовМультизаказа(Мультизаказ);
		
		СброситьТариф(Мультизаказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяОтгрузкиПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбораВремениИДаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийТарифНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Мультизаказ = Элементы.ЗаказыСГруппировками.ТекущиеДанные;
	Если Мультизаказ <> Неопределено Тогда
		ОткрытьФормуТарифа(Мультизаказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТребованияКТСПриАктивизацииЯчейки(Элемент)
	
	ТекущиеДанные = Элементы.ТребованияКТС.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
	
		Поле = Элемент.ТекущийЭлемент;
		Поле.ТолькоПросмотр = Не ТекущиеДанные.ТребуетсяЗначение;
		
		Если ТекущиеДанные.ТипСтроки = 1 И ТекущиеДанные.Обязательная Тогда
			Элементы.ТребованияКТС.Развернуть(ТекущиеДанные.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеТребованияПриАктивизацииЯчейки(Элемент)
	
	ТекущиеДанные = Элементы.ДополнительныеТребования.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
	
		Поле = Элемент.ТекущийЭлемент;
		Поле.ТолькоПросмотр = Не ТекущиеДанные.ТребуетсяЗначение;
		
		Если ТекущиеДанные.ТипСтроки = 1 И ТекущиеДанные.Обязательная Тогда
			Элементы.ДополнительныеТребования.Развернуть(ТекущиеДанные.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТребованияКТСПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ТребованияКТС.ТекущиеДанные;
	
	Если Элементы.ТребованияКТС.ТекущийЭлемент = Элементы.ТребованияКТСПоказыватьИнформацию
		И ТекущиеДанные.ПоказыватьИнформацию Тогда
			ОткрытьФормуУслуги(ТекущиеДанные.Идентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеТребованияПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ДополнительныеТребования.ТекущиеДанные;
	
	Если Элементы.ДополнительныеТребования.ТекущийЭлемент = Элементы.ДополнительныеТребованияПоказыватьИнформацию 
		И ТекущиеДанные.ПоказыватьИнформацию Тогда
		ОткрытьФормуУслуги(ТекущиеДанные.Идентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТребованияКТСПередРазворачиванием(Элемент, Строка, Отказ)
	
	ТекущиеДанные = ТребованияКТС.НайтиПоИдентификатору(Строка);
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (Не ТекущиеДанные.Использовать) И ТекущиеДанные.ТипСтроки = 1 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеТребованияПередРазворачиванием(Элемент, Строка, Отказ)
	
	ТекущиеДанные = ДополнительныеТребования.НайтиПоИдентификатору(Строка);
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (Не ТекущиеДанные.Использовать) И ТекущиеДанные.ТипСтроки = 1 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТребованияКТСПередСворачиванием(Элемент, Строка, Отказ)
	
	ТекущиеДанные = ТребованияКТС.НайтиПоИдентификатору(Строка);
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Использовать И ТекущиеДанные.ТипСтроки = 1 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеТребованияПередСворачиванием(Элемент, Строка, Отказ)
	
	ТекущиеДанные = ДополнительныеТребования.НайтиПоИдентификатору(Строка);
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Использовать И ТекущиеДанные.ТипСтроки = 1 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТребованияКТСЗначениеПриИзменении(Элемент)
	
	СтрокаОтбора = ТребованияКТС.НайтиПоИдентификатору(Элементы.ТребованияКТС.ТекущаяСтрока);
	Если СтрокаОтбора <> Неопределено Тогда
		СтрокаУслуги = СтрокаОтбора.ПолучитьРодителя();
		
		Если ЗначениеЗаполнено(Элементы.ТребованияКТС.ТекущиеДанные.Значение) Тогда
			СтрокаУслуги.Использовать = Истина;
		КонецЕсли;
		ЗарегистрироватьИзменениеТребованийКТС(СтрокаУслуги);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеТребованияЗначениеПриИзменении(Элемент)
	
	СтрокаОтбора = ДополнительныеТребования.НайтиПоИдентификатору(Элементы.ТребованияКТС.ТекущаяСтрока);
	Если СтрокаОтбора <> Неопределено Тогда
		СтрокаУслуги = СтрокаОтбора.ПолучитьРодителя();
		
		Если ЗначениеЗаполнено(Элементы.ДополнительныеТребования.ТекущиеДанные.Значение) Тогда
			СтрокаУслуги.Использовать = Истина;
		КонецЕсли;
		ЗарегистрироватьИзменениеДополнительныхТребований(СтрокаУслуги);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТребованияКТСИспользоватьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТребованияКТС.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗарегистрироватьИзменениеТребованийКТС(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеТребованияИспользоватьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДополнительныеТребования.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗарегистрироватьИзменениеДополнительныхТребований(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантВремениОтгрузкиПриИзменении(Элемент)
	
	Мультизаказ = Элементы.ЗаказыСГруппировками.ТекущиеДанные;
	
	Если Мультизаказ <> Неопределено Тогда
		
		ТекущаяДата = ОбщегоНазначенияКлиент.ДатаСеанса();
		
		Если Мультизаказ.ВариантВремениОтгрузки = ВариантыВремениОтгрузки.ВОпределенноеВремя Тогда
			
			Мультизаказ.ВремяОтгрузкиК = ТекущаяДата + 3600;
			Мультизаказ.ДатаОтгрузки = НачалоДня(Мультизаказ.ДатаОтгрузки) 
										+ (Мультизаказ.ВремяОтгрузкиК - НачалоДня(Мультизаказ.ВремяОтгрузкиК));
			
		Иначе
			
			Мультизаказ.ВремяОтгрузкиК = '00010101';
			Мультизаказ.ДатаОтгрузки = НачалоДня(ТекущаяДата);
			Мультизаказ.ЗаказПредставление = ПредставлениеНовогоМультизаказа(Мультизаказ, ЭтоКурьерскаяДоставка);
			
		КонецЕсли;
		
		СброситьТариф(Мультизаказ);
		ПослеИзмененияРеквизитовМультизаказа(Мультизаказ);
		ЗаказыСГруппировкамиПриАктивизацииСтрокиУстановитьВидимостьДоступность(Мультизаказ);
		
	КонецЕсли;
	
	УстановитьВидимостьВидаДатыОтгрузки(Мультизаказ);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаказы

&НаКлиенте
Процедура СписокЗаказовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Заказы.ТекущиеДанные;
	
	Если Поле.Имя = "ЗаказыИспользовать" Тогда
		СтандартнаяОбработка = ТекущиеДанные.ОбязательныеРеквизитыЗаполнены; 
		УстановитьДоступностьОтправкиЗаказов();
	Иначе
		ОткрытьФормуЗаказа(Заказы.НайтиПоИдентификатору(ВыбраннаяСтрока));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыИспользоватьПриИзменении(Элемент)
	УстановитьДоступностьОтправкиЗаказов();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаказыСГруппировками

&НаКлиенте
Процедура ЗаказыСГруппировкамиПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрока = Элементы.ЗаказыСГруппировками.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Элементы.ГруппаСписокПраво.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаМультизаказы Тогда
		
		Если ТекущаяСтрока = ТекущаяСтрокаЗаказовСГруппировками Тогда
			Возврат;
		КонецЕсли;
		
		ЗаказыСГруппировкамиПриАктивизацииСтрокиУстановитьВидимостьДоступность(ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыСГруппировкамиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущаяСтрока = ЗаказыСГруппировками.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если Не ТекущаяСтрока.ЭтоМультизаказ Тогда
		ОткрытьФормуЗаказа(ЗаказыСГруппировками.НайтиПоИдентификатору(ВыбраннаяСтрока));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыСГруппировкамиИспользоватьПриИзменении(Элемент)
	УстановитьДоступностьОтправкиЗаказов();
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыСГруппировкамиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыСГруппировкамиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЗаказыСГруппировками.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено
		И Не ТекущиеДанные.ЭтоМультизаказ
		И Не ТекущиеДанные.Нераспределенные Тогда
		ТекущийМультизаказ = Элементы.ЗаказыСГруппировками.ТекущиеДанные.ПолучитьРодителя();
		РасчетныйНомер = ТекущийМультизаказ.ПолучитьЭлементы().Индекс(ТекущиеДанные) + 1;
		Если РасчетныйНомер <> ТекущиеДанные.ПорядковыйНомер Тогда
			ПересчитатьПорядковыеНомераМультизаказа(ТекущийМультизаказ);
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоМультизаказ Тогда
		ТекущийИндекс = ЗаказыСГруппировками.ПолучитьЭлементы().Индекс(ТекущиеДанные); 
		Если ТекущиеДанные.Нераспределенные Тогда
			ЗаказыСГруппировками.ПолучитьЭлементы().Сдвинуть(ТекущийИндекс,1);
		ИначеЕсли ТекущийИндекс = ЗаказыСГруппировками.ПолучитьЭлементы().Количество()-1 Тогда
			ЗаказыСГруппировками.ПолучитьЭлементы().Сдвинуть(ТекущийИндекс,-1);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыСГруппировкамиПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыСГруппировкамиНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ТекущаяСтрока = Элементы.ЗаказыСГруппировками.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтрока.ЭтоМультизаказ
		ИЛИ ТекущаяСтрока.Оформлен
		ИЛИ ТекущаяСтрока.ПолучитьРодителя().Оформлен Тогда
		Выполнение = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыСГруппировкамиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Строка = Неопределено Тогда
		КоличествоГрупп = ЗаказыСГруппировками.ПолучитьЭлементы().Количество();
		Строка = ЗаказыСГруппировками.ПолучитьЭлементы()[КоличествоГрупп-1].ПолучитьИдентификатор();
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ТекущаяСтрока = ЗаказыСГруппировками.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение[0]);
	ТекущийРодитель = ТекущаяСтрока.ПолучитьРодителя();
	Приемник = ЗаказыСГруппировками.НайтиПоИдентификатору(Строка);
	
	Если Приемник <> Неопределено Тогда
		Если (Приемник.ЭтоМультизаказ И Приемник.Оформлен)
			ИЛИ (Не Приемник.ЭтоМультизаказ И Приемник.ПолучитьРодителя().Оформлен) Тогда
			ТекстСообщенияОшибки = НСтр("ru='Нельзя добавлять заказы на доставку в оформленные мультизаказы.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщенияОшибки);
			Возврат;
		КонецЕсли;
		
		Если Не ТекущаяСтрока.ЗаборОтАдреса
			И ((Приемник.ЭтоМультизаказ И Не Приемник.Нераспределенные)
			ИЛИ (Не Приемник.ЭтоМультизаказ И Не Приемник.ПолучитьРодителя().Нераспределенные)) Тогда
			ТекстСообщенияОшибки = НСтр("ru='Нельзя добавлять заказы с самостоятельной доставкой до терминала в мультизаказы.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщенияОшибки);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	НомерСтрокиДляВставки = 0;
	Если Приемник.ЭтоМультизаказ Тогда
		НовыйРодитель = Приемник;
	Иначе
		НовыйРодитель = Приемник.ПолучитьРодителя();
		НомерСтрокиДляВставки = НовыйРодитель.ПолучитьЭлементы().Индекс(Приемник)+1;
	КонецЕсли;
	
	// Выполнить проверку соответствия заказа мультизаказу (обязательные реквизиты).
	Отказ = Ложь;
	ТекстСообщения = НСтр("ru='Добавить ""%1"" невозможно. Не совпадают обязательные параметры заказа: %2'");
	ТекстСообщенияОшибки = "";
	Если Не НовыйРодитель.Нераспределенные
		И НовыйРодитель.ПолучитьЭлементы().Количество() > 0 Тогда
		СписокРеквизитовПроверки = ПараметрыЗаказаОбязательныеДляДобавленияВМультизаказ(НовыйРодитель.ЗаборОтАдреса);
		
		Для Каждого ТекущийРеквизит Из СписокРеквизитовПроверки Цикл
			Если ТекущаяСтрока[ТекущийРеквизит.Ключ] <> НовыйРодитель[ТекущийРеквизит.Ключ] Тогда
				Отказ = Истина;
				ТекстСообщенияОшибки = ТекстСообщенияОшибки + Символы.ПС
								+ " - " + ТекущийРеквизит.Значение + ";";
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Отказ Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения,
			ТекущаяСтрока.ЗаказПредставление,
			ТекстСообщенияОшибки));
		Возврат;
	КонецЕсли;
	
	// Выполнить проверку соответствия заказа мультизаказу (необязательные реквизиты).
	ЕстьРазличия = Ложь;
	ТекстСообщения = НСтр("ru='Не совпадают параметры у %1: %2
							|При создании мультизаказа эти параметры заказа будут заменены на параметры из мультизаказа. Продолжить?'");
	Если Не НовыйРодитель.Нераспределенные
		И НовыйРодитель.ПолучитьЭлементы().Количество() > 0 
		И НовыйРодитель <> ТекущийРодитель Тогда
		СписокРеквизитовПроверки = ПараметрыЗаказаНеОбязательныеДляДобавленияВМультизаказ();
		ТекстСообщенияОшибки = "";
		
		Для Каждого ТекущийРеквизит Из СписокРеквизитовПроверки Цикл
			Если ТекущаяСтрока[ТекущийРеквизит.Ключ] <> НовыйРодитель[ТекущийРеквизит.Ключ]
				И ЗначениеЗаполнено(НовыйРодитель[ТекущийРеквизит.Ключ]) Тогда
				ЕстьРазличия = Истина;
				ТекстСообщенияОшибки = ТекстСообщенияОшибки + Символы.ПС
								+ " - " + ТекущийРеквизит.Значение + ";";
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("НовыйРодитель", НовыйРодитель);
	ДополнительныеПараметры.Вставить("ТекущийРодитель", ТекущийРодитель);
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	ДополнительныеПараметры.Вставить("НомерСтрокиДляВставки", НомерСтрокиДляВставки);
	
	Если ЕстьРазличия Тогда
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ЗаказыСГруппировкамиПеретаскиваниеЗавершение", ЭтотОбъект, ДополнительныеПараметры),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
				ТекущаяСтрока.ЗаказПредставление, ТекстСообщенияОшибки), РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ЗаказыСГруппировкамиПеретаскиваниеЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТарифы

&НаКлиенте
Процедура ТарифыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыбратьТариф(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ОбработчикиКомандФормыСтраницаЗаказы

&НаКлиенте
Процедура ПрименитьОтборы(Команда)
	
	ЗарегистрироватьИзменениеОтборов(Ложь);
	Элементы.ГруппаЗаказыОтборы.Скрыть();
	ПолучитьЗаказыНаДоставку();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗаказы(Команда)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаЗаказы Тогда
		ОтправитьЗаказыСписком();
	Иначе
		ОтправитьМультизаказыСписком();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыСнятьВсеФлажки(Команда)
	УстановитьПометкуДляВсехЗаказов(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыУстановитьВсеФлажки(Команда)
	УстановитьПометкуДляВсехЗаказов(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаказы(Команда)
	
	Если ОтборыИзменение = Истина Тогда
		ЗарегистрироватьИзменениеОтборов(Ложь);
	КонецЕсли;
	
	ПолучитьЗаказыНаДоставку();

КонецПроцедуры

&НаКлиенте
Процедура ТребованияКТСЗакрыть(Команда)
	
	Элементы.ГруппаВыбораТребованийКТС.Скрыть();

КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеТребованияЗакрыть(Команда)
	
	Элементы.ГруппаВыбораДополнительныхТребований.Скрыть();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьГруппуТарифы(Команда)
	
	Элементы.ГруппаВыбораТарифа.Видимость = Истина;
	Элементы.КнопкаОткрытьГруппуТарифы.Видимость = Ложь;
	ПодключитьОбработчикОжидания("ОткрытьГруппуТарифыПродолжение", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьТариф(Команда)
	
	Если Элементы.Тарифы.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьВыборТарифа(Элементы.Тарифы.ТекущиеДанные);
	Элементы.ГруппаВыбораТарифа.Скрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТарифы(Команда)
	
	ПолучитьТарифы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормыСтраницаЗаказыСГруппировками

&НаКлиенте
Процедура ОбновитьМультизаказы(Команда)
	
	ПоказатьВопрос(
		Новый ОписаниеОповещения("ОбновитьМультизаказыЗавершение", ЭтотОбъект),
		НСтр("ru = 'Список мультизаказов и состав заказов на доставку в них будут перезаполнены. Продолжить?'"),
		РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьГруппу(Команда)
	
	ДобавитьНовыйМультизаказ(ЗаказыСГруппировками);
		
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗаказ(Команда)
	
	ТекущийЗаказ = Элементы.ЗаказыСГруппировками.ТекущиеДанные;
	
	Если ТекущийЗаказ.ЭтоМультизаказ Тогда
		ЗаказыСГруппировкойОтправитьМультизаказ(ТекущийЗаказ);
	Иначе
		ЗаказыСГруппировкойОтправитьЗаказ(ТекущийЗаказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьГруппу(Команда)
	
	ТекущийЗаказ = Элементы.ЗаказыСГруппировками.ТекущиеДанные;
	Если ТекущийЗаказ.ЭтоМультизаказ
		И (Не ТекущийЗаказ.Нераспределенные)
		И ТекущийЗаказ.ПолучитьЭлементы().Количество() = 0 Тогда
		ЗаказыСГруппировками.ПолучитьЭлементы().Удалить(ТекущийЗаказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗапросыКСервису

&НаКлиенте
Процедура ПолучитьЗаказыНаДоставку()
	
	ОчиститьСообщения();
	Отказ = Ложь;
	ПроверитьОтборы(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаЗаказы Тогда
		Элементы.ДекорацияОбновитьЗаказыСостояние.Заголовок = "";
	КонецЕсли;
	
	Заказы.Очистить();
	
	ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
	ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьЗаказыНаДоставку();
	ПараметрыОперации.НаименованиеОперации = НСтр("ru = 'Получение заказов на доставку.'");
	ПараметрыОперации.ВыводитьОкноОжидания = Истина;
	
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОтборы(Отказ)
	
	Если ОтборОтправительАдресПредставление <> "" Тогда
		ПроверитьРеквизитыАдреса("ОтборОтправительАдрес", Отказ, Истина);
	КонецЕсли;
	
	Если ОтборПолучательАдресПредставление <> "" Тогда
		ПроверитьРеквизитыАдреса("ОтборПолучательАдрес", Отказ, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьТарифы(ИдентификаторСтроки = Неопределено)
	
	Если ИдентификаторСтроки = Неопределено Тогда
		ИдентификаторСтроки = Элементы.ЗаказыСГруппировками.ТекущаяСтрока;
	КонецЕсли;
	
	ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
	ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьТарифы();
	ПараметрыОперации.НаименованиеОперации = НСтр("ru = 'Поиск подходящих тарифов'");
	ПараметрыОперации.ВыводитьОкноОжидания = Ложь;
	ПараметрыОперации.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
	Тарифы.Очистить();
	Элементы.ВыбратьТариф.Доступность = Ложь;
	
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьЗаказНаДоставку(ПараметрыОтправкиЗаказа)
	
	ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
	ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыОформитьЗаказНаДоставку();
	
	НаименованиеОперации = НСтр("ru = 'Отправка заказа на доставку'");
	
	ТекущийЗаказ = ЭтотОбъект[ПараметрыОтправкиЗаказа.Источник].НайтиПоИдентификатору(ПараметрыОтправкиЗаказа.ИдентификаторСтроки);
	ЗаказПредставление = СервисДоставкиКлиентСервер.ПредставлениеЗаказаНаДоставку(ТекущийЗаказ);
	НаименованиеОперации = НаименованиеОперации + ":" + ЗаказПредставление;
	
	ПараметрыОперации.НаименованиеОперации = НаименованиеОперации;
	ПараметрыОперации.ВыводитьОкноОжидания = Истина;
	ПараметрыОперации.Вставить("ВыводитьСообщения", Ложь);
	ПараметрыОперации.Вставить("ПараметрыОтправки", ПараметрыОтправкиЗаказа);
	
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьМультизаказ(ПараметрыОтправки)
	
	Мультизаказ = ЗаказыСГруппировками.НайтиПоИдентификатору(ПараметрыОтправки.ИдентификаторСтроки);
	
	Мультизаказ.ОписаниеОшибки = "";
	Мультизаказ.ЕстьОшибка = Ложь;
	
	ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
	ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыОформитьМультизаказНаДоставку();
	
	НаименованиеОперации = НСтр("ru = 'Отправка мультизаказа'");
	НаименованиеОперации = НаименованиеОперации + ":" + Мультизаказ.ЗаказПредставление;
	
	ПараметрыОперации.НаименованиеОперации = НаименованиеОперации;
	ПараметрыОперации.ВыводитьОкноОжидания = Истина;
	ПараметрыОперации.Вставить("ВыводитьСообщения", Ложь);
	ПараметрыОперации.Вставить("ПараметрыОтправки", ПараметрыОтправки);
	
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьМультизаказ(ПараметрыОтправки)
	
	Мультизаказ = ЗаказыСГруппировками.НайтиПоИдентификатору(ПараметрыОтправки.ИдентификаторСтроки);
	Если Мультизаказ.Идентификатор = "" Тогда
		Мультизаказ.Идентификатор = Новый УникальныйИдентификатор();
	КонецЕсли;
	
	Мультизаказ.ОписаниеОшибки = "";
	Мультизаказ.ЕстьОшибка = Ложь;
	
	ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
	ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыСоздатьМультизаказНаДоставку();
	
	НаименованиеОперации = НСтр("ru = 'Создание мультизаказа'");
	НаименованиеОперации = НаименованиеОперации + ":" + Мультизаказ.ЗаказПредставление;
	ПараметрыОперации.НаименованиеОперации = НаименованиеОперации;
	
	ПараметрыОперации.ВыводитьОкноОжидания = Истина;
	ПараметрыОперации.Вставить("ВыводитьСообщения", Ложь);
	ПараметрыОперации.Вставить("ПараметрыОтправки", ПараметрыОтправки);
	
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗаказНаДоставкуВМультизаказ(ПараметрыДобавления, ПараметрыЗаказа)
	
	ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
	ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыДобавитьЗаказНаДоставкуВМультизаказ();
	
	НаименованиеОперации = НСтр("ru = 'Обработка заказа на доставку'");
	
	ЗаказПредставление = СервисДоставкиКлиентСервер.ПредставлениеЗаказаНаДоставку(ПараметрыЗаказа);
	НаименованиеОперации = НаименованиеОперации + ":" + ЗаказПредставление;
	
	ПараметрыОперации.НаименованиеОперации = НаименованиеОперации;
	ПараметрыОперации.ВыводитьОкноОжидания = Истина;
	ПараметрыОперации.Вставить("ВыводитьСообщения", Ложь);
	ПараметрыОперации.Вставить("ПараметрыДобавления", ПараметрыДобавления);

	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

#КонецОбласти

#Область ВыполнитьЗапрос

&НаКлиенте
Процедура ВыполнитьЗапрос(ПараметрыОперации)
	
	ИнтернетПоддержкаПодключена = Ложь;
	ОчиститьСообщения();
	
	ИмяФоновогоЗадания = "ФоновоеЗадание" + ПараметрыОперации.ИмяПроцедуры;
	ФоновоеЗадание = ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ПараметрыОперации);
	ЭтотОбъект[ИмяФоновогоЗадания] = ФоновоеЗадание;
	
	Если ИнтернетПоддержкаПодключена = Ложь Тогда
		
		// Загрузка с проверкой подключения интернет-поддержки.
		Оповещение = Новый ОписаниеОповещения("ВыполнитьЗапросПродолжение", ЭтотОбъект, ПараметрыОперации);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(Оповещение, ЭтотОбъект);
		Возврат;
		
	Иначе
		
		ПараметрыОперации.Вставить("ФоновоеЗадание", ФоновоеЗадание);
		ВыполнитьЗапросПродолжение(Истина, ПараметрыОперации);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	ИмяФоновогоЗадания = "ФоновоеЗадание"+ ДополнительныеПараметры.ИмяПроцедуры;
	
	Если Результат = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Отсутствует подключение к Интернет-поддержке пользователей.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("Логин") Тогда
		// Повторный вызов метода после подключения к Интернет-поддержке.
		ИнтернетПоддержкаПодключена = Ложь;
		ЭтотОбъект[ИмяФоновогоЗадания] = ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ДополнительныеПараметры);
		ДополнительныеПараметры.Добавить("ФоновоеЗадание", ЭтотОбъект[ИмяФоновогоЗадания]);
	КонецЕсли;
	
	Если ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтотОбъект[ИмяФоновогоЗадания].Статус = "Выполняется" Тогда
		
		ОжидатьЗавершениеВыполненияЗапроса(ДополнительныеПараметры);
		
	ИначеЕсли ЭтотОбъект[ИмяФоновогоЗадания].Статус = "Выполнено" Тогда
		
		ВыполнитьЗапросЗавершение(ЭтотОбъект[ИмяФоновогоЗадания], ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьЗавершениеВыполненияЗапроса(ПараметрыОперации)
	
	ВыводитьОкноОжидания = ?(ЗначениеЗаполнено(ПараметрыОперации.ВыводитьОкноОжидания), 
																	ПараметрыОперации.ВыводитьОкноОжидания,
																	Ложь);
	// Установка картинки длительной операции.
	Если Не ВыводитьОкноОжидания Тогда
		
		Если ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьЗаказыНаДоставку() Тогда
			
			Элементы.ДекорацияОбновитьЗаказыСостояние.Заголовок = НСтр("ru='Идет загрузка...'");
			
		ИначеЕсли ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьТарифы() Тогда
			
			Элементы.ОбновитьТарифы.Картинка = БиблиотекаКартинок.СинхронизацияДанныхДлительнаяОперация;
			Элементы.ДекорацияСостояниеВыполненияЗапросаТарифы.Заголовок = НСтр("ru='Поиск подходящих тарифов...'");
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Инициализация обработчик ожидания завершения.
	ИмяФоновогоЗадания = "ФоновоеЗадание" + ПараметрыОперации.ИмяПроцедуры;
	ФоновоеЗадание = ЭтотОбъект[ИмяФоновогоЗадания];
	ПараметрыОперации.Вставить("ФоновоеЗадание", ФоновоеЗадание);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения = ПараметрыОперации.НаименованиеОперации;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
	ПараметрыОжидания.ВыводитьОкноОжидания = ВыводитьОкноОжидания;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ВыводитьСообщения = Истина;
	Если ПараметрыОперации.Свойство("ВыводитьСообщения") Тогда
		ВыводитьСообщения = ПараметрыОперации.ВыводитьСообщения;
	КонецЕсли;
	ПараметрыОжидания.ВыводитьСообщения = ВыводитьСообщения;
	ПараметрыОжидания.Вставить("ИдентификаторЗадания", ФоновоеЗадание.ИдентификаторЗадания);
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ВыполнитьЗапросЗавершение",
		ЭтотОбъект, ПараметрыОперации);
		
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, ОбработкаЗавершения, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	// Инициализация.
	Отказ = Ложь;
	ИмяФоновогоЗадания = "ФоновоеЗадание" + ДополнительныеПараметры.ИмяПроцедуры;
	ФоновоеЗадание = ЭтотОбъект[ИмяФоновогоЗадания];
	
	// Вывод сообщений из фонового задания.
	СервисДоставкиКлиент.ОбработатьРезультатФоновогоЗадания(Результат, ДополнительныеПараметры, Отказ);
	Если Результат = Неопределено ИЛИ ФоновоеЗадание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка результата поиска.
	Если Не Отказ И Результат.Статус = "Выполнено" Тогда
		Если ЗначениеЗаполнено(Результат.АдресРезультата)
			И ЭтоАдресВременногоХранилища(Результат.АдресРезультата)
			И ДополнительныеПараметры.ФоновоеЗадание.ИдентификаторЗадания
			= ЭтотОбъект[ИмяФоновогоЗадания].ИдентификаторЗадания Тогда
			
			Если ДополнительныеПараметры.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьЗаказыНаДоставку() Тогда
				
				// Сохранение текущей строки для позиционирования после загрузки.
				ТекущиеДанныеСписка = Элементы.Заказы.ТекущиеДанные;
				
				// Загрузка результатов поиска.
				ЗагрузитьРезультатПолученияЗаказов(Результат.АдресРезультата);
				
				Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаЗаказы Тогда
					// Подготовка данных для элементов постраничной выдачи данных.
					КоличествоСтрок = Заказы.Количество();
					Если КоличествоСтрок = 0 Тогда
						СостояниеВыполненияЗапроса = НСтр("ru = 'Заказы на доставку не найдены'");
					ИначеЕсли КоличествоЗаказовВсего > КоличествоСтрок Тогда
						СостояниеВыполненияЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Отображается заказов на доставку: %1 из %2'"),
							КоличествоСтрок,
							КоличествоЗаказовВсего);
					Иначе
						СостояниеВыполненияЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Найдено заказов на доставку: %1'"),
							КоличествоСтрок);
					КонецЕсли;
					Элементы.ДекорацияОбновитьЗаказыСостояние.Заголовок = СостояниеВыполненияЗапроса;
					
					ОтборыИзменение = Ложь;
					СформироватьНадписьОтбора();
				
					// Позиционирование на текущей строке списка.
					Если ТекущиеДанныеСписка <> Неопределено Тогда
						СтрокиСписка = Заказы.НайтиСтроки(Новый Структура("Идентификатор", ТекущиеДанныеСписка.Идентификатор));
						Если СтрокиСписка.Количество() Тогда
							Элементы.Заказы.ТекущаяСтрока = СтрокиСписка[0].ПолучитьИдентификатор();
						КонецЕсли;
					КонецЕсли;
				Иначе
					СгруппироватьЗаказыПоМультизаказам();
				КонецЕсли;
				
				УстановитьДоступностьОтправкиЗаказов();
				ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено;
				
			ИначеЕсли ДополнительныеПараметры.ИмяПроцедуры 
				= СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьГрузоперевозчиков() Тогда
				
				// Загрузка результатов поиска.
				ЗагрузитьРезультатПолученияСпискаПеревозчиков(Результат.АдресРезультата);
				ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено;
				
			ИначеЕсли ДополнительныеПараметры.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыОформитьЗаказНаДоставку() Тогда
				
				РезультатОформленияЗаказаНаДоставку = 1;
				ПараметрыОтправки = ДополнительныеПараметры.ПараметрыОтправки;
				
				ЗагрузитьРезультатОформленияЗаказа(Результат.АдресРезультата, ПараметрыОтправки, РезультатОформленияЗаказаНаДоставку);
				УстановитьДоступностьОтправкиЗаказов();
				ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено;
				
				Если РезультатОформленияЗаказаНаДоставку = 2 Тогда
					ОформитьЗаказНаДоставку(ПараметрыОтправки);
				Иначе
					Если ПараметрыОтправки.ОформлятьСписком Тогда
						Если ПараметрыОтправки.Источник = Элементы.Заказы.Имя Тогда
							ОтправитьЗаказыСписком(ПараметрыОтправки.ИндексСтроки+1);
						ИначеЕсли ПараметрыОтправки.Источник = Элементы.ЗаказыСГруппировками.Имя Тогда
							ЗаказыСГруппировкамиПриАктивизацииСтрокиУстановитьВидимостьДоступность(ЗаказыСГруппировками.НайтиПоИдентификатору(ПараметрыОтправки.ИдентификаторСтроки));
							ОтправитьНераспределенныеЗаказыСписком(ПараметрыОтправки.ИндексСтроки+1);
						КонецЕсли;
					Иначе
						Если ПараметрыОтправки.Источник = Элементы.ЗаказыСГруппировками.Имя Тогда
							ЗаказыСГруппировкамиПриАктивизацииСтрокиУстановитьВидимостьДоступность(ЗаказыСГруппировками.НайтиПоИдентификатору(ПараметрыОтправки.ИдентификаторСтроки));
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ДополнительныеПараметры.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыДобавитьЗаказНаДоставкуВМультизаказ() Тогда
				
				ПараметрыДобавления = ДополнительныеПараметры.ПараметрыДобавления;
				ИдентификаторСтрокиМультизаказа = ПараметрыДобавления.ИдентификаторРодителя;
				ИндексСтроки = ПараметрыДобавления.ИндексСтроки;
				Отказ = Ложь;
				ЗагрузитьРезультатДобавленияЗаказаНаДоставкуВМультизаказ(Результат.АдресРезультата, ИдентификаторСтрокиМультизаказа, ИндексСтроки, Отказ);
				ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено;
				ДобавитьЗаказыВМультизаказ(ПараметрыДобавления, ИндексСтроки+1);
				
			ИначеЕсли ДополнительныеПараметры.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыСоздатьМультизаказНаДоставку() Тогда
				
				ПараметрыОтправки = ДополнительныеПараметры.ПараметрыОтправки;
				ИдентификаторСтроки = ПараметрыОтправки.ИдентификаторСтроки;
				
				Отказ = Ложь;
				ЗагрузитьРезультатСозданияМультизаказа(Результат.АдресРезультата, ИдентификаторСтроки, Отказ);
				ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено;
				
				Если Отказ Тогда
					ЗаказыСГруппировкамиПриАктивизацииСтрокиУстановитьВидимостьДоступность(ЗаказыСГруппировками.НайтиПоИдентификатору(ИдентификаторСтроки));
				КонецЕсли;
					
				Если Не Отказ Тогда
					ПараметрыЗаказа = Новый Структура();
					ПараметрыЗаказа.Вставить("ИдентификаторРодителя", ПараметрыОтправки.ИдентификаторСтроки);
					ПараметрыЗаказа.Вставить("ОформлятьСписком", ПараметрыОтправки.ОформлятьСписком);
					ДобавитьЗаказыВМультизаказ(ПараметрыЗаказа, 0);
				ИначеЕсли ДополнительныеПараметры.ПараметрыОтправки.ОформлятьСписком Тогда
					ОтправитьМультизаказыСписком(ПараметрыОтправки.ИндексСтроки+1);
				КонецЕсли;
				
			ИначеЕсли ДополнительныеПараметры.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыОформитьМультизаказНаДоставку() Тогда
				
				ПараметрыОтправки = ДополнительныеПараметры.ПараметрыОтправки;
				ИдентификаторСтроки = ПараметрыОтправки.ИдентификаторСтроки;
				
				РезультатОформленияЗаказаНаДоставку = 1;
				ЗагрузитьРезультатОформленияМультизаказа(Результат.АдресРезультата, ИдентификаторСтроки, РезультатОформленияЗаказаНаДоставку);
				ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено;
				УстановитьДоступностьОтправкиЗаказов();
				
				Мультизаказ = ЗаказыСГруппировками.НайтиПоИдентификатору(ИдентификаторСтроки);
				Если Мультизаказ.КартинкаИдентификатор = 2 Тогда
					СброситьПризнакПроверенУЗаказовМультизаказа(Мультизаказ);
				КонецЕсли;
				
				Если РезультатОформленияЗаказаНаДоставку = 2 Тогда
					ОформитьМультизаказ(ПараметрыОтправки);
				Иначе
					ЗаказыСГруппировкамиПриАктивизацииСтрокиУстановитьВидимостьДоступность(ЗаказыСГруппировками.НайтиПоИдентификатору(ИдентификаторСтроки));
					Если ПараметрыОтправки.ОформлятьСписком Тогда
						ОтправитьМультизаказыСписком(ПараметрыОтправки.ИндексСтроки+1);
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ДополнительныеПараметры.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьТарифы() Тогда
				
				СостояниеВыполненияЗапроса = "";
				Элементы.ОбновитьТарифы.Картинка = БиблиотекаКартинок.Обновить;
				ЗагрузитьРезультатПолученияТарифов(Результат.АдресРезультата);
				
				Если ЭтоКурьерскаяДоставка Тогда
					ЗаполнитьСписокВыбораВремениОтгрузки();
					
					ТекущаяСтрокаМультизаказ = Элементы.ЗаказыСГруппировками.ТекущиеДанные;
				КонецЕсли;
				
				ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено;
				КоличествоСтрок = Тарифы.Количество();
				Если КоличествоСтрок = 0 Тогда
					СостояниеВыполненияЗапроса = НСтр("ru = 'Подходящие тарифы не найдены. Проверьте условия запроса.
						|Возможно для работы с перевозчиками требуется авторизация. Проверьте настройки перевозчиков.'");
				Иначе
					СостояниеВыполненияЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Найдено подходящих тарифов: %1'"),
						КоличествоСтрок);
					Элементы.ВыбратьТариф.Доступность = Истина;
				КонецЕсли;
				Элементы.ДекорацияСостояниеВыполненияЗапросаТарифы.Заголовок = СостояниеВыполненияЗапроса;
				
			ИначеЕсли ДополнительныеПараметры.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьУслугиТарифов() Тогда
				
				ЗагрузитьРезультатПолученияУслугТарифов(Результат.АдресРезультата);
				ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено;
				ТекущаяСтрокаМультизаказ = Элементы.ЗаказыСГруппировками.ТекущиеДанные;
				СформироватьТребованияКТСМультизаказа(ТекущаяСтрокаМультизаказ);
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьНадписьОтбора()
	
	ТекстЗаголовка = НСтр("ru='Настроить отбор'");
	Элементы.ГруппаЗаказыОтборы.Заголовок = ?(ОтборыИзменение, ТекстЗаголовка + "*", ТекстЗаголовка);
	
КонецПроцедуры

#КонецОбласти

#Область ВыполнитьЗапросВФоне

&НаСервере
Функция ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ПараметрыОперации)
	
	// Проверка подключения Интернет-поддержки пользователей.
	ИнтернетПоддержкаПодключена = ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	Если Не ИнтернетПоддержкаПодключена Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Отказ = Ложь;
	ПараметрыЗапроса = ПараметрыЗапроса(ПараметрыОперации, Отказ);
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяФоновогоЗадания = "ФоновоеЗадание" + ПараметрыОперации.ИмяПроцедуры;
	ФоновоеЗадание = ЭтотОбъект[ИмяФоновогоЗадания];
	Если ФоновоеЗадание <> Неопределено Тогда
		ОтменитьВыполнениеЗадания(ФоновоеЗадание.ИдентификаторЗадания);
	КонецЕсли;
	
	Задание = Новый Структура("ИмяПроцедуры, Наименование, ПараметрыПроцедуры");
	Задание.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"%1: %2.",
		СервисДоставкиКлиентСервер.ПредставлениеТипаГрузоперевозки(ТипГрузоперевозки),
		ПараметрыОперации.НаименованиеОперации);
	
	Задание.ИмяПроцедуры = "СервисДоставки." + ПараметрыОперации.ИмяПроцедуры;
	Задание.ПараметрыПроцедуры = ПараметрыЗапроса;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = Задание.Наименование;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(Задание.ИмяПроцедуры,
		Задание.ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОтменитьВыполнениеЗадания(ИдентификаторЗадания)
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
		ИдентификаторЗадания = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗаказыНаДоставкуВФоне()
	
	ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
	ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьЗаказыНаДоставку();
	ПараметрыОперации.НаименованиеОперации = НСтр("ru = 'Получение заказов на доставку.'");
	ПараметрыОперации.ВыводитьОкноОжидания = Истина;
	
	Возврат ВыполнитьЗапросВФоне(Ложь, ПараметрыОперации);
	
КонецФункции

&НаСервере
Функция ПолучитьУслугиТарифовВФоне()
	
	ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
	ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьУслугиТарифов();
	ПараметрыОперации.НаименованиеОперации = НСтр("ru = 'Получение услуг тарифов'");
	
	Возврат ВыполнитьЗапросВФоне(Ложь, ПараметрыОперации);
	
КонецФункции

&НаСервере
Функция ПолучитьГрузоперевозчиковВФоне()
	
	ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
	ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьГрузоперевозчиков();
	ПараметрыОперации.НаименованиеОперации = НСтр("ru = 'Получение списка грузоперевозчиков.'");
	
	Возврат ВыполнитьЗапросВФоне(Ложь, ПараметрыОперации);
	
КонецФункции

#КонецОбласти

#Область ПараметрыЗапроса

&НаСервере
Функция ПараметрыЗапроса(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = Новый Структура();
	
	ИмяПроцедуры = ПараметрыОперации.ИмяПроцедуры;
	
	Если ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьУслугиТарифов() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаПолучитьУслугиТарифов(ПараметрыОперации, Отказ);
	ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьТарифы() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаПолучитьТарифы(ПараметрыОперации, Отказ);
	ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьЗаказыНаДоставку() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаПолучитьЗаказыНаДоставку(ПараметрыОперации, Отказ);
	ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьГрузоперевозчиков() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаПолучитьГрузоперевозчиков(ПараметрыОперации, Отказ);
	ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыОформитьЗаказНаДоставку() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаОформитьЗаказНаДоставку(ПараметрыОперации, Отказ);
	ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыСоздатьМультизаказНаДоставку() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаСоздатьМультизаказ(ПараметрыОперации, Отказ);
	ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыОформитьМультизаказНаДоставку() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаОформитьМультизаказ(ПараметрыОперации, Отказ);
	ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыДобавитьЗаказНаДоставкуВМультизаказ() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаДобавитьЗаказНаДоставкуВМультизаказ(ПараметрыОперации, Отказ);
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	ПараметрыЗапроса.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаПолучитьУслугиТарифов(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаПолучитьУслугиТарифов();
	
	ПараметрыЗапроса.ТипГрузоперевозки = ТипГрузоперевозки;
	ПараметрыЗапроса.УслугиДляМультизаказов = Истина;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаПолучитьТарифы(ПараметрыОперации, Отказ)
	
	Результат = СервисДоставки.НовыйПараметрыЗапросаПолучитьТарифы();
	
	Мультизаказ = ЗаказыСГруппировками.НайтиПоИдентификатору(ПараметрыОперации.ИдентификаторСтроки);
	
	Если Мультизаказ = Неопределено Тогда
		Отказ = Истина;
		Возврат Результат;
	КонецЕсли;
	
	Результат.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	Результат.Вставить("ГрузоперевозчикИдентификатор", Мультизаказ.ГрузоперевозчикИдентификатор);
	
	Результат.Вставить("ДатаОтгрузки", Мультизаказ.ДатаОтгрузки);
	Результат.Вставить("ВариантВремениОтгрузки", Мультизаказ.ВариантВремениОтгрузки);
	Результат.Вставить("ВремяОтгрузкиС", Мультизаказ.ВремяОтгрузкиС);
	Результат.Вставить("ВремяОтгрузкиПо", Мультизаказ.ВремяОтгрузкиПо);
	Результат.Вставить("ВремяОтгрузкиОбедС", Мультизаказ.ВремяОтгрузкиОбедС);
	Результат.Вставить("ВремяОтгрузкиОбедПо", Мультизаказ.ВремяОтгрузкиОбедПо);
	
	Результат.Вставить("ОтправительАдрес", Мультизаказ.ОтправительАдресПредставление);         //Полный адрес
	Результат.Вставить("ОтправительАдресЗначение", Новый ХранилищеЗначения(Мультизаказ.ОтправительАдресЗначение,
		Новый СжатиеДанных(9))); //Формат JSON 1С:БСП
	Результат.Вставить("ОтправительАдресДолгота", Мультизаказ.ОтправительАдресДолгота);
	Результат.Вставить("ОтправительАдресШирота",Мультизаказ.ОтправительАдресШирота);

	НовыйАдрес = Результат.АдресаМаршрута.Добавить();
	НовыйАдрес.ПорядковыйНомер = 0;
	НовыйАдрес.Представление = Мультизаказ.ОтправительАдресПредставление;
	НовыйАдрес.Значение = Новый ХранилищеЗначения(Мультизаказ.ОтправительАдресЗначение, Новый СжатиеДанных(9));
	НовыйАдрес.Долгота = Мультизаказ.ОтправительАдресДолгота;
	НовыйАдрес.Широта = Мультизаказ.ОтправительАдресШирота;
	НовыйАдрес.Идентификатор = Мультизаказ.АдресОтгрузкиИдентификатор;
	
	СписокЗаказов = Мультизаказ.ПолучитьЭлементы();
	Для Каждого ТекущийЗаказ Из СписокЗаказов Цикл
		НовыйАдрес = Результат.АдресаМаршрута.Добавить();
		НовыйАдрес.ПорядковыйНомер = ТекущийЗаказ.ПорядковыйНомер;
		НовыйАдрес.Представление = ТекущийЗаказ.ПолучательАдресПредставление;
		НовыйАдрес.Значение = Новый ХранилищеЗначения(ТекущийЗаказ.ПолучательАдресЗначение, Новый СжатиеДанных(9));
		НовыйАдрес.Долгота = ТекущийЗаказ.ПолучательАдресДолгота;
		НовыйАдрес.Широта = ТекущийЗаказ.ПолучательАдресШирота;
		НовыйАдрес.Идентификатор = ТекущийЗаказ.АдресДоставкиИдентификатор;
	КонецЦикла;
	
	Результат.Вставить("ПолучательАдрес", ТекущийЗаказ.ПолучательАдресПредставление);          //Полный адрес
	Результат.Вставить("ПолучательАдресЗначение", Новый ХранилищеЗначения(ТекущийЗаказ.ПолучательАдресЗначение,
		Новый СжатиеДанных(9))); //Формат JSON 1С:БСП
	Результат.Вставить("ПолучательАдресДолгота", ТекущийЗаказ.ПолучательАдресДолгота);
	Результат.Вставить("ПолучательАдресШирота",ТекущийЗаказ.ПолучательАдресШирота);
	
	Результат.Вставить("ГрузКоличествоГрузовыхМест", Мультизаказ.КоличествоГрузовыхМест);
	Результат.Вставить("ГрузОбщийВес", Мультизаказ.ГрузВес);
	Результат.Вставить("ГрузОбщийОбъем", Мультизаказ.ГрузОбъем);
	
	Услуги = Мультизаказ.Услуги;
	Для Каждого ТекущаяУслуга Из Услуги Цикл
		Если ТекущаяУслуга.Использовать Тогда
			НоваяУслуга = Результат.Услуги.Добавить();
			НоваяУслуга.Идентификатор = ТекущаяУслуга.Идентификатор;
			НоваяУслуга.Свойства = Новый Массив();
			Для Каждого ТекущееСвойство Из ТекущаяУслуга.Свойства Цикл
				ПараметрыСвойстваУслуги = СервисДоставки.НовыйПараметрыСвойстваУслуги();
				ПараметрыСвойстваУслуги.Идентификатор = ТекущееСвойство.Идентификатор;
				ПараметрыСвойстваУслуги.Значение = ТекущееСвойство.Значение;
				НоваяУслуга.Свойства.Добавить(ПараметрыСвойстваУслуги);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаПолучитьЗаказыНаДоставку(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаПолучитьЗаказыНаДоставку();
	
	ПараметрыЗапроса.Страница = 0;
	ПараметрыЗапроса.РазмерСтраницы = 100;
	ПараметрыЗапроса.Сортировка = СервисДоставки.СортировкаЗаказовНаОтправкуПоУмолчанию();
	
	Если ЗначениеЗаполнено(ТипГрузоперевозки) Тогда
		ПараметрыЗапроса.ТипГрузоперевозки = ТипГрузоперевозки;
	Иначе
		ТекстОшибки = НСтр("ru='Не выбран тип грузоперевозки.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Отказ = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборГрузоперевозчик) Тогда
		ПараметрыЗапроса.Грузоперевозчик = ОтборГрузоперевозчик;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборПоГотовностиЗаказов) Тогда
		ПараметрыЗапроса.ОтборПоГотовностиЗаказов = ОтборПоГотовностиЗаказов;
	КонецЕсли;
	
	ПараметрыЗапроса.ФильтрПоМультизаказам = СервисДоставки.ФильтрПоМультизаказамОдиночныеЗаказы();
	
	ПараметрыЗапроса.ДатаОтгрузкиОт = ?(ЗначениеЗаполнено(ДатаОтгрузки), ДатаОтгрузки, НачалоДня(ТекущаяДатаСеанса()));
	ПараметрыЗапроса.ДатаОтгрузкиДо = ДатаОтгрузки;
	
	Если ЗначениеЗаполнено(ОтборОтправитель) Тогда
		НовыйЭлемент = ПараметрыЗапроса.Отправитель.Добавить();
		
		ПараметрыКонтрагента = СервисДоставки.НовыйПараметрыКонтрагента();
		ПараметрыКонтрагента.Ссылка = ОтборОтправитель;
		СервисДоставкиПереопределяемый.ЗаполнитьПараметрыКонтрагента(ПараметрыКонтрагента);
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, ПараметрыКонтрагента);
		
		Для каждого СтрокаОтправителя Из ПараметрыЗапроса.Отправитель Цикл
			Если СтрокаОтправителя.ЮрФизЛицо = 0 Тогда
				ТекстОшибки = НСтр("ru='Некорректное значение поля ""Отправитель"".
								|Отправитель может быть ИП, либо юридическим лицом.'");
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
				Отказ = Истина;
			ИначеЕсли СтрокаОтправителя.ЮрФизЛицо = 0 Тогда
				ТекстОшибки = НСтр("ru='Некорректное значение поля ""Отправитель"".
								|Отправитель не может быть физическим лицом.'");
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборПолучатель) Тогда
		НовыйЭлемент = ПараметрыЗапроса.Получатель.Добавить();
		
		ПараметрыКонтрагента = СервисДоставки.НовыйПараметрыКонтрагента();
		ПараметрыКонтрагента.Ссылка = ОтборПолучатель;
		СервисДоставкиПереопределяемый.ЗаполнитьПараметрыКонтрагента(ПараметрыКонтрагента);
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, ПараметрыКонтрагента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборОтправительАдресЗначение) Тогда
		
		ПараметрыЗначения = СервисДоставки.ЗначениеИзСтрокиJSON(ОтборОтправительАдресЗначение);
		НовыйЭлемент = ПараметрыЗапроса.Откуда.Добавить();
		НовыйЭлемент.КодФИАС = ПараметрыЗначения.ID;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборПолучательАдресЗначение) Тогда
		
		ПараметрыЗначения = СервисДоставки.ЗначениеИзСтрокиJSON(ОтборПолучательАдресЗначение);
		НовыйЭлемент = ПараметрыЗапроса.Куда.Добавить();
		НовыйЭлемент.КодФИАС = ПараметрыЗначения.ID;
		
	КонецЕсли;
	
	НовоеСостояние = ПараметрыЗапроса.Состояние.Добавить();
	НовоеСостояние.Идентификатор = СервисДоставки.ИдентификаторСостоянияЧерновик();
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаПолучитьГрузоперевозчиков(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаПолучитьГрузоперевозчиков();
	
	Если ЗначениеЗаполнено(ТипГрузоперевозки) Тогда
		ПараметрыЗапроса.ТипГрузоперевозки = ТипГрузоперевозки;
	Иначе
		ТекстОшибки = НСтр("ru='Не выбран тип грузоперевозки.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Отказ = Истина;
	КонецЕсли;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаОформитьЗаказНаДоставку(ПараметрыОперации, Отказ)
	
	ПараметрыОтправки = ПараметрыОперации.ПараметрыОтправки;
	ТекущийЗаказ = ЭтотОбъект[ПараметрыОтправки.Источник].НайтиПоИдентификатору(ПараметрыОтправки.ИдентификаторСтроки);
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаОформитьЗаказНаДоставку();
	ПараметрыЗапроса.Вставить("Идентификатор", ТекущийЗаказ.Идентификатор);

	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаДобавитьЗаказНаДоставкуВМультизаказ(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаДобавитьЗаказНаДоставкуВМультизаказ();
	
	ПараметрыДобавления = ПараметрыОперации.ПараметрыДобавления;
	Мультизаказ = ЗаказыСГруппировками.НайтиПоИдентификатору(ПараметрыДобавления.ИдентификаторРодителя);
	ЗаказНаДоставку = ЗаказыСГруппировками.НайтиПоИдентификатору(ПараметрыДобавления.ИдентификаторСтроки);
	
	ПараметрыЗапроса.Вставить("Идентификатор", Мультизаказ.Идентификатор);
	ПараметрыЗапроса.Вставить("ИдентификаторЗаказа", ЗаказНаДоставку.Идентификатор);

	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаСоздатьМультизаказ(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаСоздатьМультизаказ();
	ПараметрыОтправки = ПараметрыОперации.ПараметрыОтправки;
	
	Мультизаказ = ЗаказыСГруппировками.НайтиПоИдентификатору(ПараметрыОтправки.ИдентификаторСтроки);
	ПараметрыМультизаказа = ПараметрыМультизаказа();
	ЗаполнитьЗначенияСвойств(ПараметрыМультизаказа, Мультизаказ);
	СервисДоставкиКлиентСервер.ЗаполнитьСтруктуруПоЛинейнымДанным(ПараметрыЗапроса, ПараметрыМультизаказа);
	
	ПараметрыЗапроса.ИдентификаторЗаказа = Мультизаказ.Идентификатор;
	ПараметрыЗапроса.СпособОтгрузки = ?(ПараметрыМультизаказа.ЗаборОтАдреса, СервисДоставкиКлиентСервер.СпособОтгрузкиОтАдреса(), СервисДоставкиКлиентСервер.СпособОтгрузкиОтТерминала());
	ПараметрыЗапроса.ПунктПриемаГруза.Идентификатор = ПараметрыМультизаказа.АдресОтгрузкиИдентификатор;
	ВариантыВремениОтгрузки = СервисДоставкиПовтИсп.ВариантыВремениОтгрузки();
	
	Если Мультизаказ.ВариантВремениОтгрузки = ВариантыВремениОтгрузки.ВОпределенноеВремя Тогда
		ПараметрыЗапроса.ДатаОтгрузки = НачалоДня(Мультизаказ.ДатаОтгрузки) + (Мультизаказ.ВремяОтгрузкиК - '00010101');
	Иначе
		ПараметрыЗапроса.ДатаОтгрузки = НачалоДня(Мультизаказ.ДатаОтгрузки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Отправитель.Контрагент.Ссылка) Тогда
		ПараметрыОтправителя = ПараметрыКонтрагента(ПараметрыЗапроса.Отправитель.Контрагент.Ссылка);
		ПараметрыЗапроса.Отправитель.Контрагент = ПараметрыОтправителя;
	КонецЕсли;
	
	УслугиМультизаказа = Мультизаказ.Услуги;
	
	Для Каждого ТекущаяУслуга Из УслугиМультизаказа Цикл
		Если ТекущаяУслуга.Использовать Тогда
			НоваяУслуга = ПараметрыЗапроса.Услуги.Добавить();
			НоваяУслуга.Идентификатор = ТекущаяУслуга.Идентификатор;
			НоваяУслуга.Свойства = Новый Массив();
			Для Каждого ТекущееСвойство Из ТекущаяУслуга.Свойства Цикл
				ПараметрыСвойстваУслуги = СервисДоставки.НовыйПараметрыСвойстваУслуги();
				ПараметрыСвойстваУслуги.Идентификатор = ТекущееСвойство.Идентификатор;
				ПараметрыСвойстваУслуги.Значение = ТекущееСвойство.Значение;
				НоваяУслуга.Свойства.Добавить(ПараметрыСвойстваУслуги);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	УслугиМультизаказа = Мультизаказ.ДополнительныеТребования;
	
	Для Каждого ТекущаяУслуга Из УслугиМультизаказа Цикл
		Если ТекущаяУслуга.Использовать Тогда
			НоваяУслуга = ПараметрыЗапроса.Услуги.Добавить();
			НоваяУслуга.Идентификатор = ТекущаяУслуга.Идентификатор;
			НоваяУслуга.Свойства = Новый Массив();
			Для Каждого ТекущееСвойство Из ТекущаяУслуга.Свойства Цикл
				ПараметрыСвойстваУслуги = СервисДоставки.НовыйПараметрыСвойстваУслуги();
				ПараметрыСвойстваУслуги.Идентификатор = ТекущееСвойство.Идентификатор;
				ПараметрыСвойстваУслуги.Значение = ТекущееСвойство.Значение;
				НоваяУслуга.Свойства.Добавить(ПараметрыСвойстваУслуги);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаОформитьМультизаказ(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаОформитьМультизаказ();
	Мультизаказ = ЗаказыСГруппировками.НайтиПоИдентификатору(ПараметрыОперации.ПараметрыОтправки.ИдентификаторСтроки);
	ПараметрыЗапроса.Вставить("Идентификатор", Мультизаказ.Идентификатор);

	Возврат ПараметрыЗапроса;
	
КонецФункции

#КонецОбласти

#Область ЗагрузитьРезультаты

&НаСервере
Процедура ЗагрузитьРезультатПолученияЗаказов(АдресРезультата, ОперацияВыполнена = Истина)
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		Если ЗначениеЗаполнено(Результат) 
			И ТипЗнч(Результат) = Тип("Структура") Тогда
			
			Заказы.Очистить();
			
			Если Результат.Свойство("Страницы") Тогда
				КоличествоЗаказовВсего = Результат.Страницы.КоличествоСтрок;
			КонецЕсли;
				
			Если Результат.Свойство("Список") Тогда
			
				Если ТипЗнч(Результат.Список) = Тип("Массив") Тогда
					
					Для Каждого ТекущаяСтрока Из Результат.Список Цикл
						
						НоваяСтрока = Заказы.Добавить();
						
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
						
						НоваяСтрока.ГрузоперевозчикНаименование = ТекущаяСтрока.ПеревозчикНаименование;
						НоваяСтрока.ГрузоперевозчикИдентификатор = ТекущаяСтрока.ПеревозчикИдентификатор;
						НоваяСтрока.ОтправительКонтрагентИНН = ТекущаяСтрока.ОтправительИНН;
						НоваяСтрока.ОтправительКонтрагентКПП = ТекущаяСтрока.ОтправительКПП;
						НоваяСтрока.ОтправительКонтрагентНаименование = ТекущаяСтрока.ОтправительНаименование;
						
						Если ЗначениеЗаполнено(ТекущаяСтрока.АдресОтгрузкиНаименование) Тогда
							НоваяСтрока.АдресОтгрузкиПредставление = ТекущаяСтрока.АдресОтгрузкиТипНаименование
								+ ": " + ТекущаяСтрока.АдресОтгрузкиНаименование;
						КонецЕсли;
						
						Если ЗначениеЗаполнено(ТекущаяСтрока.АдресДоставкиНаименование) Тогда
							НоваяСтрока.АдресДоставкиПредставление = ТекущаяСтрока.АдресДоставкиТипНаименование
								+ ": " + ТекущаяСтрока.АдресДоставкиНаименование;
						КонецЕсли;
						
						НоваяСтрока.КартинкаИдентификатор = 1;
						
						Если НоваяСтрока.ЕстьОшибка Тогда
							НоваяСтрока.КартинкаИдентификатор = 2;
						ИначеЕсли НоваяСтрока.Проверен Тогда
							НоваяСтрока.КартинкаИдентификатор = 3;
							НоваяСтрока.Использовать = Ложь;
						ИначеЕсли НоваяСтрока.ОбязательныеРеквизитыЗаполнены Тогда
							НоваяСтрока.КартинкаИдентификатор = 0;
							НоваяСтрока.Использовать = Истина;
						КонецЕсли;
						
						НоваяСтрока.ЗаказПредставление = СервисДоставки.ПредставлениеЗаказаНаДоставку(НоваяСтрока, Истина);
						
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
			СервисДоставки.ОбработатьБлокОшибок(Результат, ОперацияВыполнена);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатПолученияСпискаПеревозчиков(АдресРезультата)
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		Если ЗначениеЗаполнено(Результат) 
			И ТипЗнч(Результат) = Тип("Структура") Тогда
			
			Если Результат.Свойство("Список") Тогда
				ЭлементыСписка = Результат.Список;
				СписокВыбора = Элементы.ОтборГрузоперевозчик.СписокВыбора;
				Для Каждого ТекущийЭлементСписка Из ЭлементыСписка Цикл
					
					СписокВыбора.Добавить(ТекущийЭлементСписка.Идентификатор, ТекущийЭлементСписка.Наименование);
					
				КонецЦикла;
				
			Иначе
				ОперацияВыполнена = Ложь;
			КонецЕсли;
			
			СервисДоставки.ОбработатьБлокОшибок(Результат, ОперацияВыполнена);
		
		Иначе
			ОперацияВыполнена = Ложь;
		КонецЕсли;
	Иначе
		ОперацияВыполнена = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатОформленияЗаказа(АдресРезультата, ПараметрыЗаказа, РезультатОформленияЗаказаНаДоставку)
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
			ТекущийЗаказ = ЭтотОбъект[ПараметрыЗаказа.Источник].НайтиПоИдентификатору(ПараметрыЗаказа.ИдентификаторСтроки);
			
			Если ТекущийЗаказ = Неопределено Тогда
				РезультатОформленияЗаказаНаДоставку = 0;
				Возврат;
			КонецЕсли;
			
			Если Результат.Свойство("ОжидатьРасчета")
				И Результат.ОжидатьРасчета = Истина Тогда
				РезультатОформленияЗаказаНаДоставку = 2;
				Возврат;
			КонецЕсли;
			
			ОписаниеОшибки = "";
			Если Результат.Свойство("Ошибки") Тогда
			
				Если ТипЗнч(Результат.Ошибки) = Тип("Массив") Тогда
					
					Для Каждого ТекущаяОшибка Из Результат.Ошибки Цикл
						
						ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + ТекущаяОшибка;
						
					КонецЦикла;
					
					ОписаниеОшибки = СокрЛП(ОписаниеОшибки);
					
				КонецЕсли;
				
			КонецЕсли;
			
			ТекущийЗаказ.ОписаниеОшибки = ОписаниеОшибки;
			ТекущийЗаказ.ЕстьОшибка = ЗначениеЗаполнено(ОписаниеОшибки);
			
			Если Не ТекущийЗаказ.ЕстьОшибка Тогда
				ЗаполнитьЗначенияСвойств(ТекущийЗаказ, Результат);
				ТекущийЗаказ.Оформлен = Истина;
				ТекущийЗаказ.Использовать = Ложь;
				ТекущийЗаказ.КартинкаИдентификатор = 3;
			Иначе
				РезультатОформленияЗаказаНаДоставку = 0;
				ТекущийЗаказ.Использовать = Ложь;
				ТекущийЗаказ.КартинкаИдентификатор = 2;
			КонецЕсли;
			
		Иначе
			РезультатОформленияЗаказаНаДоставку = 0;
		КонецЕсли;
		
	Иначе
		РезультатОформленияЗаказаНаДоставку = 0;
	КонецЕсли;
	
	Если РезультатОформленияЗаказаНаДоставку = 1 Тогда
		СервисДоставкиПереопределяемый.ОбработатьРезультатЗапросаОформленияЗаказаНаДоставку(Результат, ТекущийЗаказ.ДокументыОснования);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатСозданияМультизаказа(АдресРезультата, ИдентификаторСтроки, Отказ)

	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
			Мультизаказ = ЗаказыСГруппировками.НайтиПоИдентификатору(ИдентификаторСтроки);
			
			Если Мультизаказ = Неопределено Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
			ОписаниеОшибки = "";
			Если Результат.Свойство("Ошибки") Тогда
			
				Если ТипЗнч(Результат.Ошибки) = Тип("Массив") Тогда
					
					Для Каждого ТекущаяОшибка Из Результат.Ошибки Цикл
						
						ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + ТекущаяОшибка;
						
					КонецЦикла;
					
					ОписаниеОшибки = СокрЛП(ОписаниеОшибки);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Мультизаказ.ОписаниеОшибки = ОписаниеОшибки;
			Мультизаказ.ЕстьОшибка = ЗначениеЗаполнено(ОписаниеОшибки);
			
			Если Мультизаказ.ЕстьОшибка Тогда
				Отказ = Истина;
				Мультизаказ.КартинкаИдентификатор = 2;
			КонецЕсли;
			
			Элементы.ГруппаОшибки.Видимость = Мультизаказ.ЕстьОшибка;
			
		Иначе
			Отказ = Истина;
		КонецЕсли;
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатДобавленияЗаказаНаДоставкуВМультизаказ(АдресРезультата, ИдентификаторСтрокиМультизаказа, ИндексСтроки, Отказ)
	
	ТекущийМультизаказ = ЗаказыСГруппировками.НайтиПоИдентификатору(ИдентификаторСтрокиМультизаказа);
	Если ТекущийМультизаказ = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТекущийЗаказ = ТекущийМультизаказ.ПолучитьЭлементы().Получить(ИндексСтроки);
	Если ТекущийЗаказ = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		
		ПерезаполнитьЗаказНаДоставкуПоДаннымМультизаказа(ТекущийМультизаказ, ТекущийЗаказ);
		
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
			ОписаниеОшибки = "";
			Если Результат.Свойство("Ошибки") Тогда
			
				Если ТипЗнч(Результат.Ошибки) = Тип("Массив") Тогда
					
					Для Каждого ТекущаяОшибка Из Результат.Ошибки Цикл
						
						ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + ТекущаяОшибка;
						
					КонецЦикла;
					
					ОписаниеОшибки = СокрЛП(ОписаниеОшибки);
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	Иначе
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТекущийЗаказ.ОписаниеОшибки = ОписаниеОшибки;
	ТекущийЗаказ.ЕстьОшибка = ЗначениеЗаполнено(ОписаниеОшибки);
	
	Если Не ТекущийЗаказ.ЕстьОшибка Тогда
		ТекущийЗаказ.Проверен = Истина;
		ТекущийЗаказ.КартинкаИдентификатор = 3;
	Иначе
		ТекущийЗаказ.Проверен = Ложь;
		ТекущийЗаказ.КартинкаИдентификатор = 2;
		ТекущийМультизаказ.КартинкаИдентификатор = 2;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатОформленияМультизаказа(АдресРезультата, ИдентификаторСтрокиМультизаказа, РезультатОформленияЗаказаНаДоставку)

	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
			Мультизаказ = ЗаказыСГруппировками.НайтиПоИдентификатору(ИдентификаторСтрокиМультизаказа);
			
			Если Мультизаказ = Неопределено Тогда
				РезультатОформленияЗаказаНаДоставку = 0;
				Возврат;
			КонецЕсли;
			
			Если Результат.Свойство("ОжидатьРасчета")
				И Результат.ОжидатьРасчета = Истина Тогда
				РезультатОформленияЗаказаНаДоставку = 2;
				Возврат;
			КонецЕсли;
			
			ОписаниеОшибки = "";
			Если Результат.Свойство("Ошибки") Тогда
			
				Если ТипЗнч(Результат.Ошибки) = Тип("Массив") Тогда
					
					Для Каждого ТекущаяОшибка Из Результат.Ошибки Цикл
						
						ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + ТекущаяОшибка;
						
					КонецЦикла;
					
					ОписаниеОшибки = СокрЛП(ОписаниеОшибки);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Мультизаказ.ОписаниеОшибки = ОписаниеОшибки;
			Мультизаказ.ЕстьОшибка = ЗначениеЗаполнено(ОписаниеОшибки);
			
			Если Не Мультизаказ.ЕстьОшибка Тогда
				ЗаполнитьЗначенияСвойств(Мультизаказ, Результат);
				Мультизаказ.Использовать = Ложь;
				Мультизаказ.Оформлен = Истина;
				Мультизаказ.КартинкаИдентификатор = 3;
				
				Если Элементы.ЗаказыСГруппировками.ТекущаяСтрока
					= ИдентификаторСтрокиМультизаказа Тогда
					Элементы.ГруппаСписокПраво.ТолькоПросмотр = Истина;
					Элементы.ГруппаВыбораТарифа.Видимость = Ложь;
					Элементы.КнопкаОткрытьГруппуТарифы.Видимость = Ложь;
					Элементы.ГруппаВыбораТребованийКТС.Доступность = Ложь;
					Элементы.ГруппаВыбораДополнительныхТребований.Доступность = Ложь;
					Элементы.ОтправительДобавитьТелефонДополнительный.Видимость = Ложь;
					Элементы.ОтправительУдалитьТелефонДополнительный.Видимость = Ложь;
				КонецЕсли;
			Иначе
				РезультатОформленияЗаказаНаДоставку = 0;
				Мультизаказ.Использовать = Ложь;
				Мультизаказ.КартинкаИдентификатор = 2;
			КонецЕсли;
			
		Иначе
			РезультатОформленияЗаказаНаДоставку = 0;
		КонецЕсли;
		
	Иначе
		РезультатОформленияЗаказаНаДоставку = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатПолученияТарифов(АдресРезультата)
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		
		Если Результат <> Неопределено Тогда
		
			ДоступныПериодыОтгрузки = Результат.ДоступныПериодыОтгрузки;
		
			Если Результат.Свойство("Список") Тогда
				
				Для Каждого ТекущаяСтрока Из Результат.Список Цикл
					
					НоваяСтрока = Тарифы.Добавить();
					
					НоваяСтрока.ГрузоперевозчикИдентификатор = ТекущаяСтрока.ГрузоперевозчикИдентификатор;
					НоваяСтрока.ГрузоперевозчикНаименование = ТекущаяСтрока.ГрузоперевозчикНаименование;
					НоваяСтрока.ТарифИдентификатор = ТекущаяСтрока.ТарифИдентификатор;
					НоваяСтрока.ТарифНаименование = ТекущаяСтрока.ТарифНаименование;
					НоваяСтрока.Стоимость = ТекущаяСтрока.Стоимость;
					НоваяСтрока.СуммаСкидки = ТекущаяСтрока.СуммаСкидки;
					НоваяСтрока.МинимальныйСрок = ТекущаяСтрока.МинимальныйСрок;
					НоваяСтрока.МаксимальныйСрок = ТекущаяСтрока.МаксимальныйСрок;
					НоваяСтрока.Негабарит = ТекущаяСтрока.Негабарит;
					НоваяСтрока.ОписаниеНеГабарит = ТекущаяСтрока.ОписаниеНеГабарит;
					НоваяСтрока.Описание = ТекущаяСтрока.Описание;
					НоваяСтрока.МаксВес = ТекущаяСтрока.МаксВес;
					НоваяСтрока.МаксОбъем = ТекущаяСтрока.МаксОбъем;
					НоваяСтрока.МаксДлина = ТекущаяСтрока.МаксДлина;
					НоваяСтрока.ТочкаОтправленияПредставление = ТекущаяСтрока.ТочкаОтправленияПредставление;
					НоваяСтрока.ТочкаОтправленияШирота = ТекущаяСтрока.ТочкаОтправленияШирота;
					НоваяСтрока.ТочкаОтправленияДолгота = ТекущаяСтрока.ТочкаОтправленияДолгота;
					НоваяСтрока.ТочкаДоставкиПредставление = ТекущаяСтрока.ТочкаДоставкиПредставление;
					НоваяСтрока.ТочкаДоставкиШирота = ТекущаяСтрока.ТочкаДоставкиШирота;
					НоваяСтрока.ТочкаДоставкиДолгота = ТекущаяСтрока.ТочкаДоставкиДолгота;
					НоваяСтрока.НегабаритныйВес = ТекущаяСтрока.НегабаритныйВес;
					НоваяСтрока.НегабаритныйОбъем = ТекущаяСтрока.НегабаритныйОбъем;
					НоваяСтрока.НегабаритнаяДлина = ТекущаяСтрока.НегабаритнаяДлина;
					Если ТипЗнч(ТекущаяСтрока.ФормаОплаты) = Тип("Массив") Тогда
						НоваяСтрока.ФормаОплаты.ЗагрузитьЗначения(ТекущаяСтрока.ФормаОплаты);
					КонецЕсли;
					НоваяСтрока.ФормаОплатыПоУмолчанию = ТекущаяСтрока.ФормаОплатыПоУмолчанию;
					НоваяСтрока.ТолькоВремяДоставки = ТекущаяСтрока.ТолькоВремяДоставки;
					НоваяСтрока.Срок = "" + НоваяСтрока.МинимальныйСрок + " - " + НоваяСтрока.МаксимальныйСрок + "";
					СформироватьПредставлениеТарифа(НоваяСтрока);
					
					Для Каждого ТекущаяДопУслуга Из ТекущаяСтрока.ДополнительныеУслуги Цикл
				
						НоваяДопУслуга = НоваяСтрока.ДополнительныеУслуги.Добавить();
						НоваяДопУслуга.Идентификатор = ТекущаяДопУслуга.Идентификатор;
						НоваяДопУслуга.Наименование = ТекущаяДопУслуга.Наименование;
						НоваяДопУслуга.Обязательная = ТекущаяДопУслуга.Обязательная;
						НоваяДопУслуга.Категория = ТекущаяДопУслуга.Категория;
						НоваяДопУслуга.Использовать = ТекущаяДопУслуга.Использовать;
						НоваяДопУслуга.ПоказыватьИнформацию = ТекущаяДопУслуга.ПоказыватьИнформацию;
						
						Для Каждого ТекущееСвойство Из ТекущаяДопУслуга.Свойства Цикл
							
							НовоеСвойство = НоваяДопУслуга.Свойства.Добавить();
							НовоеСвойство.Идентификатор = ТекущееСвойство.Идентификатор;
							НовоеСвойство.Наименование = ТекущееСвойство.Наименование;
							НовоеСвойство.ЕдиницаИзмерения = ТекущееСвойство.ЕдиницаИзмерения;
							НовоеСвойство.ТипЗначения = ТекущееСвойство.ТипЗначения;
							Если ТекущееСвойство.Свойство("Использовать")
								И ТекущееСвойство.Использовать Тогда
								НовоеСвойство.Использовать = ТекущееСвойство.Использовать;
								НовоеСвойство.Значение = НовоеСвойство.ТипЗначения.ПривестиЗначение(НовоеСвойство.Значение);
							КонецЕсли;
						КонецЦикла;
						
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
			Если Результат.Свойство("Ошибки") Тогда
			
				Если ТипЗнч(Результат.Ошибки) = Тип("Массив") Тогда
					
					Для Каждого ТекущаяОшибка Из Результат.Ошибки Цикл
						
						ОбщегоНазначения.СообщитьПользователю(ТекущаяОшибка);
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ЗаказыСГруппировкамиПеретаскиваниеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(РезультатВопроса) Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ТекущаяСтрока = ДополнительныеПараметры.ТекущаяСтрока;
		ТекущийРодитель = ДополнительныеПараметры.ТекущийРодитель;
		НовыйРодитель = ДополнительныеПараметры.НовыйРодитель;
		НовыйРодительИдентификатор = НовыйРодитель.ПолучитьИдентификатор();
		
		ПараметрыДляДобавления = Новый Структура();
		ПараметрыДляДобавления.Вставить("ЗаказИдентификаторСтроки", ТекущаяСтрока.ПолучитьИдентификатор());
		ПараметрыДляДобавления.Вставить("МультизаказИдентификаторСтроки", НовыйРодительИдентификатор);
		ПараметрыДляДобавления.Вставить("НомерСтрокиДляВставки", ДополнительныеПараметры.НомерСтрокиДляВставки);
		
		ТекущаяСтрока.Проверен = Ложь;
		ОбновитьКартинкуИдентификаторУЗаказа(ТекущаяСтрока);
		ДобавитьЗаказВМультизаказНаСервере(ПараметрыДляДобавления);
		Элементы.ЗаказыСГруппировками.Развернуть(НовыйРодительИдентификатор);
		
		// Удалить строку из текущего мультизаказ.
		ТекущийРодитель.ПолучитьЭлементы().Удалить(ТекущаяСтрока);
		Если ТекущийРодитель.ПолучитьЭлементы().Количество() = 0 Тогда
			ОбработатьПустойМультизаказПослеУдаленияЗаказа(ТекущийРодитель)
		КонецЕсли;
		
		// Пересчитать текущий мультизаказ.
		Если ТекущийРодитель <> НовыйРодитель Тогда 
			
			Если ЭтоКурьерскаяДоставка Тогда
				// Если у заказа сменился мультизаказ, то у мультизаказа необходимо сбросить тариф
				СброситьТариф(НовыйРодитель);
				СброситьТариф(ТекущийРодитель);
				
			КонецЕсли;
			
			ПересчитатьМультизаказ(ТекущийРодитель);
			
		КонецЕсли;
		
		// Пересчитать новый мультизаказ.
		ПересчитатьМультизаказ(НовыйРодитель);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьТариф(Мультизаказ)
	
	Тарифы.Очистить();
	Элементы.ВыбратьТариф.Доступность = Ложь;
	Элементы.ДекорацияСостояниеВыполненияЗапросаТарифы.Заголовок = "";
	
	Элементы.ГруппаВыбораТарифа.Видимость = Истина;
	Элементы.КнопкаОткрытьГруппуТарифы.Видимость = Ложь;
	
	Мультизаказ.ТарифИдентификатор = "";
	Мультизаказ.ТарифНаименование = "";
	Мультизаказ.ТарифТолькоВремяДоставки = Ложь;
	Мультизаказ.Сумма = 0;
	Мультизаказ.ОбязательныеРеквизитыЗаполнены = Ложь;
	
	ДополнительныеТребованияПредставление = "";
	Мультизаказ.ДополнительныеТребования.Очистить();
	
	СформироватьНадписьТарифа(Мультизаказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьГруппуТарифыПродолжение()

	Элементы.ГруппаВыбораТарифа.Показать();
	ПолучитьТарифы();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьНовыйМультизаказ(ДеревоМультизаказов)
	
	ЭлементыДерева = ДеревоМультизаказов.ПолучитьЭлементы();
	НоваяГруппа = ЭлементыДерева.Вставить(ЭлементыДерева.Количество()-1);
	НоваяГруппа.ЗаказПредставление = ПредставлениеПустогоМультизаказа();
	НоваяГруппа.КартинкаИдентификатор = 4;
	НоваяГруппа.КоличествоЗаказов = 0;
	НоваяГруппа.ЭтоМультизаказ = Истина;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьГруппуНераспределенные(ДеревоМультизаказов)
	
	ГруппаНераспределенные = ДеревоМультизаказов.ПолучитьЭлементы().Добавить();
	
	ГруппаНераспределенные.ЗаказПредставление = НСтр("ru='Нераспределенные заказы'");
	ГруппаНераспределенные.КоличествоЗаказов = 0;
	ГруппаНераспределенные.ЭтоМультизаказ = Истина;
	ГруппаНераспределенные.Нераспределенные = Истина;
	ГруппаНераспределенные.КартинкаИдентификатор = КартинкаИдентификаторДляГруппыНераспределенныхЗаказов();
	ГруппаНераспределенные.КартинкиПапкиИдентификатор = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьНадписьТарифа(ТекущаяСтрока)
	
	ТекущийТариф = ?(ТекущаяСтрока.ТарифИдентификатор = "", НадписьПустогоТарифа(), ТекущаяСтрока.ТарифНаименование);
	Элементы.ТекущийТариф.Гиперссылка = ТекущаяСтрока.ТарифИдентификатор <> "";
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НадписьПустогоТарифа()
	
	Возврат НСтр("ru='<Не выбран>'");
	
КонецФункции

&НаСервере
Процедура ЗагрузитьРезультатПолученияУслугТарифов(АдресРезультата)
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		
		Если Результат <> Неопределено Тогда
		
			Если Результат.Свойство("Список") Тогда
				ЗагрузитьУслугиТарифовДляТипаГрузоперевозки(Результат.Список);
			КонецЕсли;
			
			Если Результат.Свойство("СписокНесовместимыеУслуги") Тогда
				ЗагрузитьНесовместимыеУслуги(Результат.СписокНесовместимыеУслуги);
			КонецЕсли;
			
			Если Результат.Свойство("Ошибки") Тогда
				Если ТипЗнч(Результат.Ошибки) = Тип("Массив") Тогда
					Для Каждого ТекущаяОшибка Из Результат.Ошибки Цикл
						ОбщегоНазначения.СообщитьПользователю(ТекущаяОшибка);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьУслугиТарифовДляТипаГрузоперевозки(Услуги)
	
	УслугиТарифов.Очистить();
	
	Для Каждого ТекущаяУслуга Из Услуги Цикл
		
		НоваяУслуга = УслугиТарифов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяУслуга, ТекущаяУслуга,,"Свойства");
		НоваяУслуга.Использовать = Ложь;
			
		Для Каждого ТекущееСвойство Из ТекущаяУслуга.Свойства Цикл
			НовоеСвойство = НоваяУслуга.Свойства.Добавить();
			ЗаполнитьЗначенияСвойств(НовоеСвойство, ТекущееСвойство);
			НовоеСвойство.Значение = НовоеСвойство.ТипЗначения.ПривестиЗначение(НовоеСвойство.Значение);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНесовместимыеУслуги(Услуги)
	
	НесовместимыеУслуги.Очистить();
	
	Для Каждого ТекущаяУслуга Из Услуги Цикл
		НоваяУслуга = НесовместимыеУслуги.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяУслуга, ТекущаяУслуга);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьТребованияКТСМультизаказа(Мультизаказ = Неопределено)
	
	Если Мультизаказ = Неопределено Тогда
		Мультизаказ = Элементы.ЗаказыСГруппировками.ТекущиеДанные;
	КонецЕсли;
	
	Если Мультизаказ = Неопределено 
		ИЛИ Не Мультизаказ.ЭтоМультизаказ 
		ИЛИ Мультизаказ.Нераспределенные Тогда
		Возврат;
	КонецЕсли;
		
	ЗаполнитьТребованияКТС();
	РазвернутьРодителейСпискаТребованийКТС();
	СформироватьВыбранныеТребованияКТС();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДополнительныеТребованияМультизаказа(Мультизаказ = Неопределено)
	
	Если Мультизаказ = Неопределено Тогда
		Мультизаказ = Элементы.ЗаказыСГруппировками.ТекущиеДанные;
	КонецЕсли;
	
	Если Мультизаказ = Неопределено 
		ИЛИ Не Мультизаказ.ЭтоМультизаказ 
		ИЛИ Мультизаказ.Нераспределенные Тогда
		Возврат;
	КонецЕсли;
		
	ЗаполнитьДополнительныеТребования();
	РазвернутьРодителейСпискаЗаполнитьДополнительныхТребований();
	СформироватьДополнительныеТребования();
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьРодителейСпискаТребованийКТС()
	
	ЭлементыДереваСписка = ТребованияКТС.ПолучитьЭлементы();
	Для Каждого ЭлементДереваСписка Из ЭлементыДереваСписка Цикл
		Элементы.ТребованияКТС.Развернуть(ЭлементДереваСписка.ПолучитьИдентификатор());
		ЭлементыУслуги = ЭлементДереваСписка.ПолучитьЭлементы();
		Для Каждого ЭлементДереваСпискаУслуги Из ЭлементыУслуги Цикл
			
			Если ЭлементДереваСпискаУслуги.Использовать Тогда
				Элементы.ТребованияКТС.Развернуть(ЭлементДереваСпискаУслуги.ПолучитьИдентификатор());
			КонецЕсли;
				
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьРодителейСпискаЗаполнитьДополнительныхТребований()
	
	ЭлементыДереваСписка = ДополнительныеТребования.ПолучитьЭлементы();
	Для Каждого ЭлементДереваСписка Из ЭлементыДереваСписка Цикл
		Элементы.ДополнительныеТребования.Развернуть(ЭлементДереваСписка.ПолучитьИдентификатор());
		ЭлементыУслуги = ЭлементДереваСписка.ПолучитьЭлементы();
		Для Каждого ЭлементДереваСпискаУслуги Из ЭлементыУслуги Цикл
			
			Если ЭлементДереваСпискаУслуги.Использовать Тогда
				Элементы.ДополнительныеТребования.Развернуть(ЭлементДереваСпискаУслуги.ПолучитьИдентификатор());
			КонецЕсли;
				
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПредставлениеТарифа(Параметры)
	
	Параметры.ТарифПредставление = Параметры.ТарифНаименование 
		+ ?(Параметры.ПоУмолчанию, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(" (%1)",	НСтр("ru='по умолчанию'")), "");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборТарифа(ДанныеПоТарифу)
	
	Мультизаказ = Элементы.ЗаказыСГруппировками.ТекущиеДанные;
	
	Если Мультизаказ = Неопределено 
		ИЛИ Не Мультизаказ.ЭтоМультизаказ 
		ИЛИ Мультизаказ.Нераспределенные Тогда
		Возврат;
	КонецЕсли;
	
	Мультизаказ.ТарифИдентификатор = ДанныеПоТарифу.ТарифИдентификатор;
	Мультизаказ.ТарифНаименование = ДанныеПоТарифу.ТарифНаименование;
	Мультизаказ.ТарифТолькоВремяДоставки = ДанныеПоТарифу.ТолькоВремяДоставки;
	Мультизаказ.Сумма = ДанныеПоТарифу.Стоимость;
	
	ЗаполнитьДополнительныеТребованияМультизаказа(ДанныеПоТарифу.ДополнительныеУслуги);
	ЗаполнитьДополнительныеТребования();
	СформироватьДополнительныеТребования();
	
	СформироватьНадписьТарифа(Мультизаказ);
	ПослеИзмененияРеквизитовМультизаказа(Мультизаказ);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоТипуГрузоперевозки()
	
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1: Помощник отправки заказов'"),
		СервисДоставкиКлиентСервер.ПредставлениеТипаГрузоперевозки(ТипГрузоперевозки));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискиВыбора()

	ЗаполнитьСписокВыбораОтправитель();
	ЗаполнитьСписокВыбораПолучатель();
	ЗаполнитьСписокВыбораОтборОткуда();
	ЗаполнитьСписокВыбораОтборКуда();
	ЗаполнитьСписокВыбораВремениОтгрузки();
	
	СписокГотовностьЗаказов = Элементы.ОтборПоГотовностиЗаказов.СписокВыбора;
	СписокГотовностьЗаказов.Очистить();
	СписокГотовностьЗаказов.Добавить(1, НСтр("ru='Готовые к отправке'"));
	СписокГотовностьЗаказов.Добавить(2, НСтр("ru='Есть незаполненные реквизиты'"));

КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияПоУмолчанию()

	ВыбиратьКонтактноеЛицоКонтрагента
		= (Метаданные.ОпределяемыеТипы.КонтактноеЛицоКонтрагентаСервисДоставки.Тип.Типы().Количество() > 1)
		ИЛИ (Не Метаданные.ОпределяемыеТипы.КонтактноеЛицоКонтрагентаСервисДоставки.Тип.СодержитТип(Тип("Строка")));
	
	ВыбиратьКонтактноеЛицоОрганизации
		= (Метаданные.ОпределяемыеТипы.КонтактноеЛицоОрганизацииСервисДоставки.Тип.Типы().Количество() > 1)
		ИЛИ (Не Метаданные.ОпределяемыеТипы.КонтактноеЛицоОрганизацииСервисДоставки.Тип.СодержитТип(Тип("Строка")));

	ПараметрыПоУмолчанию = СервисДоставки.ПараметрыПоУмолчанию(ТипГрузоперевозки);
	ПараметрыПоУмолчанию.Свойство("ВремяОтгрузкиС", ВремяОтгрузкиС);
	ПараметрыПоУмолчанию.Свойство("ВремяОтгрузкиПо", ВремяОтгрузкиПо);
	ПараметрыПоУмолчанию.Свойство("ВремяОтгрузкиОбедС", ВремяОтгрузкиОбедС);
	ПараметрыПоУмолчанию.Свойство("ВремяОтгрузкиОбедПо", ВремяОтгрузкиОбедПо);

	Если Не ЗначениеЗаполнено(ВремяОтгрузкиПо) Тогда
		УстановитьПериодОтгрузкиПоУмолчанию();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьПериодОтгрузкиПоУмолчанию()
	
	ВремяОтгрузкиС = '00010101090000';
	ВремяОтгрузкиПо = '00010101180000';
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаказыИспользовать.Имя);
	
	ОтборГруппаИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ОтборЭлемента = ОтборГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Заказы.КартинкаИдентификатор");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 0;
	ОтборЭлемента = ОтборГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Заказы.КартинкаИдентификатор");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 2;

	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаказыСГруппировками.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаказыСГруппировками.ЭтоМультизаказ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ШрифтВыделенныйСервисДоставки);

	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаказыСГруппировками.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаказыСГруппировками.ЭтоМультизаказ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФактическихСтрокГрафикаСервисДоставки);
	
	// Устанавливаем для поля "Использовать" свойство "Только просмотр", если это не мультизаказ и не нераспределенный заказ.
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаказыСГруппировкамиИспользовать.Имя);
	
	ОтборГруппаИЛИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппаИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборГруппаИ = ОтборГруппаИЛИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	
	ОтборГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ОтборЭлемента = ОтборГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаказыСГруппировками.КартинкаИдентификатор");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 0;
	ОтборЭлемента = ОтборГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаказыСГруппировками.КартинкаИдентификатор");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 2;
	
	ОтборГруппаИ = ОтборГруппаИЛИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	
	ОтборГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ОтборЭлемента = ОтборГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаказыСГруппировками.ЭтоМультизаказ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	ОтборЭлемента = ОтборГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаказыСГруппировками.Нераспределенные");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборГруппаИ = ОтборГруппаИЛИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	
	ОтборГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ОтборЭлемента = ОтборГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаказыСГруппировками.ЭтоМультизаказ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	ОтборЭлемента = ОтборГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаказыСГруппировками.Нераспределенные");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

#Область Тариф

	// Подкраска невыбранного тарифа.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТекущийТариф.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТекущийТариф");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = НадписьПустогоТарифа();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);

#КонецОбласти

#Область ТребованияКТС

	// Категория. Не отображение поле "Использовать".
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТребованияКТСИспользовать.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТребованияКТС.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

	// Категория. Шрифт заголовка.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТребованияКТСНаименование.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТребованияКТС.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ЖирныйШрифтБЭД);
	
	// Значение свойств. Не отображение поле "Использовать".
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТребованияКТСИспользовать.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТребованияКТС.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 2;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

	// Значение свойств. Отображение пустого значения.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТребованияКТСЗначение.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТребованияКТС.ТребуетсяЗначение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТребованияКТС.Значение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Пусто>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение",
		ГоризонтальноеПоложение.Центр);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);

	// Услуга. Нет доступа редактировать обязательную услугу. Она всегда выбрана.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТребованияКТСИспользовать.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТребованияКТС.Обязательная");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТребованияКТС.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

#КонецОбласти

#Область ДополнительныеТребования

	// Категория. Не отображение поле "Использовать".
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДополнительныеТребованияИспользовать.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДополнительныеТребования.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

	// Категория. Шрифт заголовка.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДополнительныеТребованияНаименование.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДополнительныеТребования.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ЖирныйШрифтБЭД);
	
	// Значение свойств. Не отображение поле "Использовать".
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДополнительныеТребованияИспользовать.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДополнительныеТребования.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 2;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

	// Значение свойств. Отображение пустого значения.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДополнительныеТребованияЗначение.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДополнительныеТребования.ТребуетсяЗначение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДополнительныеТребования.Значение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Пусто>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение",
		ГоризонтальноеПоложение.Центр);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);

	// Услуга. Нет доступа редактировать обязательную услугу. Она всегда выбрана.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДополнительныеТребованияИспользовать.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДополнительныеТребования.Обязательная");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДополнительныеТребования.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

#КонецОбласти

КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьОтправкиЗаказов()
	Элементы.ОтправитьЗаказы.Доступность = ЕстьОтмеченныеЗаказы();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьВидаДатыОтгрузки(ТекущаяСтрока)
	
	ПоказыватьВремяОтгрузки = ТекущаяСтрока.ЗаборОтАдреса;
	ЭтоМультизаказ = ТекущаяСтрока.ЭтоМультизаказ;
	
	Если ЭтоКурьерскаяДоставка Тогда
		
		Элементы.ГруппаВариантВремениОтгрузки.Видимость = Истина;
		Элементы.ВариантВремениОтгрузки.Видимость = ЭтоМультизаказ;
		Элементы.ВариантВремениОтгрузкиНадпись.Видимость = Не ЭтоМультизаказ;

		Элементы.ВариантВремениОтгрузки.ОтображениеПодсказки = ?(ТекущаяСтрока.ВариантВремениОтгрузки = 0, 
																	ОтображениеПодсказки.Кнопка,
																	ОтображениеПодсказки.Нет);
		
		Элементы.МультизаказыДатаОтгрузки.Доступность = ТекущаяСтрока.ВариантВремениОтгрузки <> ВариантыВремениОтгрузки.КакМожноСкорее;
		
		Элементы.ГруппаПериодОтгрузки.Видимость = Ложь;
		Элементы.ПериодОтгрузкиПредставление.Видимость = Ложь;
		Элементы.ПериодОтгрузкиПредставлениеНадпись.Видимость = Ложь;
		
		Элементы.ГруппаВремяОтгрузки.Видимость = ТекущаяСтрока.ВариантВремениОтгрузки = ВариантыВремениОтгрузки.ВОпределенноеВремя;
		Элементы.ВремяОтгрузки.Видимость = ЭтоМультизаказ
											И ПоказыватьВремяОтгрузки 
											И ТекущаяСтрока.ВариантВремениОтгрузки = ВариантыВремениОтгрузки.ВОпределенноеВремя;
		Элементы.ВремяОтгрузкиНадпись.Видимость = Не Элементы.ВремяОтгрузки.Видимость;
		
	Иначе

		Элементы.ГруппаВариантВремениОтгрузки.Видимость = Ложь;
		
		Элементы.ГруппаПериодОтгрузки.Видимость = ПоказыватьВремяОтгрузки;
		Элементы.ПериодОтгрузкиПредставление.Видимость = ЭтоМультизаказ И ПоказыватьВремяОтгрузки;
		Элементы.ПериодОтгрузкиПредставлениеНадпись.Видимость = Не Элементы.ПериодОтгрузкиПредставлениеНадпись.Видимость;
		
		Элементы.ГруппаВремяОтгрузки.Видимость = ПоказыватьВремяОтгрузки И Не Элементы.ГруппаПериодОтгрузки.Видимость;
		Элементы.ВремяОтгрузки.Видимость = ЭтоМультизаказ И ПоказыватьВремяОтгрузки;
		Элементы.ВремяОтгрузки.Доступность = Истина;
		Элементы.ВремяОтгрузкиНадпись.Видимость = Не Элементы.ВремяОтгрузки.Видимость И ПоказыватьВремяОтгрузки;

	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Функция ЕстьОтмеченныеЗаказы()
	
	ЕстьОтмеченныеЗаказы = Ложь;
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаЗаказы Тогда
		ЕстьОтмеченныеЗаказы = Заказы.НайтиСтроки(Новый Структура("Использовать", Истина)).Количество() > 0;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаМультизаказы Тогда
		Для Каждого ТекущаяГруппа Из ЗаказыСГруппировками.ПолучитьЭлементы() Цикл
			ЕстьОтмеченныеЗаказы = ЕстьОтмеченныеЗаказы ИЛИ ТекущаяГруппа.Использовать;
			Для Каждого ТекущаяСтрока Из ТекущаяГруппа.ПолучитьЭлементы() Цикл
				ЕстьОтмеченныеЗаказы = ЕстьОтмеченныеЗаказы ИЛИ ТекущаяСтрока.Использовать;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЕстьОтмеченныеЗаказы;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуЗаказа(ДанныеПоЗаказу)
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("РежимМастера", 1);
	ПараметрыОткрытияФормы.Вставить("ИдентификаторЗаказа", ДанныеПоЗаказу.Идентификатор);
	ПараметрыОткрытияФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	ОткрытьФормуКарточкиЗаказаНаДоставку(ПараметрыОткрытияФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКарточкиЗаказаНаДоставку(ПараметрыОткрытияФормы)
	
	ПараметрыОткрытияФормы.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	
	СервисДоставкиКлиент.ОткрытьФормуКарточкиЗаказаНаДоставку(ПараметрыОткрытияФормы);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьРеквизитыАдреса(ИмяРеквизита, ЕстьОшибки, ВыводитьПредупреждения)
	
	СервисДоставкиСлужебный.ПроверитьУникальныйИдентификаторАдреса(ЭтотОбъект, ИмяРеквизита, ЕстьОшибки, ВыводитьПредупреждения);
	
	Возврат;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыАдреса(Значение)
	
	ПараметрыАдреса = СервисДоставки.НовыйПараметрыАдреса("АдресДоставки");
	ПараметрыАдреса.Владелец = Значение;
	
	Если ЗначениеЗаполнено(Значение) Тогда
		СервисДоставкиСлужебный.ЗаполнитьАдресПоПараметрам(ПараметрыАдреса);
	КонецЕсли;
	
	Возврат ПараметрыАдреса;
	
КонецФункции

&НаКлиенте
Процедура АдресНачалоВыбора(Элемент)

	ПараметрыВидаКонтактнойИнформации = ПараметрыВидаКонтактнойИнформации();
	
	Если Не ЗначениеЗаполнено(ПараметрыВидаКонтактнойИнформации) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыВидаКонтактнойИнформации.Вид) = Тип("Структура") Тогда
		ПараметрыВидаКонтактнойИнформации.Вид.НастройкиПроверки.ПроверятьКорректность = Ложь;
	КонецЕсли;
	
	ИмяРеквизита = Элемент.Имя;
	ИмяРеквизитаПредставление = ИмяРеквизита + "Представление";
	ИмяРеквизитаЗначенияПолей = ИмяРеквизита + "Значение";
	
	АдресПредставление = ЭтотОбъект[ИмяРеквизитаПредставление];
	АдресЗначенияПолей = ЭтотОбъект[ИмяРеквизитаЗначенияПолей];
	
	ПараметрыОткрытия = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
		ПараметрыВидаКонтактнойИнформации.Вид, АдресЗначенияПолей,
		АдресПредставление,, ПараметрыВидаКонтактнойИнформации.Тип);
		
	ТекстЗаголовка = "Адрес";
	Если СтрНайти(Элемент.Имя, "Отправитель") Тогда
		ТекстЗаголовка = ТекстЗаголовка + " отправления";
	ИначеЕсли СтрНайти(Элемент.Имя, "Получатель") Тогда
		ТекстЗаголовка = ТекстЗаголовка + " получения";
	КонецЕсли;
		
	ПараметрыОткрытия.Вставить("Заголовок", ТекстЗаголовка);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяРеквизита",	ИмяРеквизита);
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьФормуКонтактнойИнформацииЗавершение", ЭтотОбъект, 
								ДополнительныеПараметры);
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, ЭтотОбъект, Оповещение);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыВидаКонтактнойИнформации(ВидКонтактнойИнформацииСтрока="")
	
	Возврат СервисДоставкиСлужебный.ПараметрыВидаКонтактнойИнформации(ВидКонтактнойИнформацииСтрока);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = ДополнительныеПараметры.ИмяРеквизита;
	Данные = ЭтотОбъект;
		
	Если ТипЗнч(Результат) = Тип("Структура") Тогда 
		
		Результат.Свойство("Представление", Данные[ИмяРеквизита + "Представление"]);
		Результат.Свойство("Значение", Данные[ИмяРеквизита + "Значение"]);
		
		ОбработатьРеквизитыАдреса(ИмяРеквизита);
		
	КонецЕсли;
	
	ЗарегистрироватьИзменениеОтборов();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииМультизаказаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = ДополнительныеПараметры.ИмяРеквизита;
	Мультизаказ = Элементы.ЗаказыСГруппировками.ТекущиеДанные;
		
	Если ТипЗнч(Результат) = Тип("Структура") Тогда 
		
		Результат.Свойство("Представление", Мультизаказ[ИмяРеквизита + "Представление"]);
		Результат.Свойство("Значение", Мультизаказ[ИмяРеквизита + "Значение"]);
		
		Отказ = Ложь;
		ПроверитьПредставлениеКонтактнойИнформацииМультизаказа(Мультизаказ, ИмяРеквизита, Отказ);
		ПослеИзмененияРеквизитовМультизаказа(Мультизаказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРеквизитыАдреса(ИмяРеквизита)
	
	СервисДоставкиСлужебный.УстановитьЗначенияАдреса(ЭтотОбъект, ИмяРеквизита);
	ЕстьОшибки = Ложь;
	ПроверитьРеквизитыАдреса(ИмяРеквизита, ЕстьОшибки, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТребованияКТС()
	
	СписокТребованияКТС = ТребованияКТС.ПолучитьЭлементы();
	СписокТребованияКТС.Очистить();
	
	Мультизаказ = Элементы.ЗаказыСГруппировками.ТекущиеДанные;
	
	Если Мультизаказ = Неопределено 
		ИЛИ Не Мультизаказ.ЭтоМультизаказ 
		ИЛИ Мультизаказ.Нераспределенные Тогда
		Возврат;
	КонецЕсли;
	
	УслугиМультизаказа = Мультизаказ.Услуги;
	
	ТекущаяКатегория = "";
	
	Для Каждого ТекущаяУслуга Из УслугиТарифов Цикл
		
		Если ТекущаяКатегория <> ТекущаяУслуга.Категория Тогда
			ТекущаяКатегория = ТекущаяУслуга.Категория;
			
			СтрокаДерева = СписокТребованияКТС.Добавить();
			СтрокаДерева.Наименование = ТекущаяУслуга.Категория;
			СтрокаДерева.Использовать = Истина;
			СтрокаДерева.Идентификатор = "";
			СтрокаДерева.Значение = Неопределено;
			СтрокаДерева.ТребуетсяЗначение = Ложь;
			СтрокаДерева.Обязательная = Ложь;
			СтрокаДерева.ТипСтроки = 0;
			
		КонецЕсли;
		
		СтрокаДереваВетка = СтрокаДерева.ПолучитьЭлементы().Добавить();
		СтрокаДереваВетка.Наименование = ТекущаяУслуга.Наименование;
		СтрокаДереваВетка.Использовать = Ложь;
		СтрокаДереваВетка.Идентификатор = ТекущаяУслуга.Идентификатор;
		СтрокаДереваВетка.ТипСтроки = 1;
		СтрокаДереваВетка.ПоказыватьИнформацию = ТекущаяУслуга.ПоказыватьИнформацию;
		
		НайденныеСтроки = УслугиМультизаказа.НайтиСтроки(Новый Структура("Идентификатор", ТекущаяУслуга.Идентификатор));
		
		СвойстваУслугиМультизаказа = Неопределено;
		Если НайденныеСтроки.Количество() Тогда
			СтрокаДереваВетка.Использовать = Истина;
			СвойстваУслугиМультизаказа = НайденныеСтроки[0].Свойства;
		КонецЕсли;
		
		СвойстваУслуги = ТекущаяУслуга.Свойства;
		
		Если СвойстваУслуги.Количество() Тогда
			
			СтрокиСвойств = СтрокаДереваВетка.ПолучитьЭлементы();
			СтрокиСвойств.Очистить();
			
			Для Каждого ТекущееСвойство Из СвойстваУслуги Цикл
				
				СтрокаДереваСвойство = СтрокиСвойств.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДереваСвойство, ТекущееСвойство);
				СтрокаДереваСвойство.ТребуетсяЗначение = Истина;
				СтрокаДереваСвойство.ТипСтроки = 2;
				
				Если СвойстваУслугиМультизаказа <> Неопределено Тогда
					
					НайденныеСтроки = СвойстваУслугиМультизаказа.НайтиСтроки(Новый Структура("Идентификатор", ТекущееСвойство.Идентификатор));
					
					Если НайденныеСтроки.Количество() Тогда
						СтрокаДереваСвойство.Значение = НайденныеСтроки[0].Значение;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТребованияКТС.ПолучитьЭлементы().Количество() > 0 Тогда
		Если Не Элементы.ГруппаТребованияКТС.Видимость Тогда
			Элементы.ГруппаТребованияКТС.Видимость = Истина;
			УстановитьВидимостьНаСервере(Элементы.ГруппаТребованияКТС.Имя);
		КонецЕсли;
	Иначе
		Элементы.ГруппаТребованияКТС.Видимость = Ложь;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьВыбранныеТребованияКТС()
	
	ТребованияКТСПредставление = "";
	Мультизаказ = Элементы.ЗаказыСГруппировками.ТекущиеДанные;
	
	Если Мультизаказ = Неопределено 
		ИЛИ Не Мультизаказ.ЭтоМультизаказ 
		ИЛИ Мультизаказ.Нераспределенные Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекущаяУслуга Из Мультизаказ.Услуги Цикл
		ТребованияКТСПредставление = ТребованияКТСПредставление
									+ ?(ТребованияКТСПредставление = "", "", ", ")
									+ ТекущаяУслуга.Наименование;
	КонецЦикла;
	
	ТребованияКТСПредставление = ?(ТребованияКТСПредставление = "", НСтр("ru='<Не выбраны>'"),ТребованияКТСПредставление);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДополнительныеТребования()
	
	СписокДополнительныеТребования = ДополнительныеТребования.ПолучитьЭлементы();
	СписокДополнительныеТребования.Очистить();
	
	Мультизаказ = Элементы.ЗаказыСГруппировками.ТекущиеДанные;
	
	Если Мультизаказ = Неопределено 
		ИЛИ Не Мультизаказ.ЭтоМультизаказ 
		ИЛИ Мультизаказ.Нераспределенные Тогда
		Возврат;
	КонецЕсли;
	
	УслугиМультизаказа = Мультизаказ.ДополнительныеТребования;
	
	ТекущаяКатегория = "";
	
	Для Каждого ТекущаяУслуга Из УслугиМультизаказа Цикл
		
		Если ТекущаяКатегория <> ТекущаяУслуга.Категория Тогда
			ТекущаяКатегория = ТекущаяУслуга.Категория;
			
			СтрокаДерева = СписокДополнительныеТребования.Добавить();
			СтрокаДерева.Наименование = ТекущаяУслуга.Категория;
			СтрокаДерева.Использовать = Истина;
			СтрокаДерева.Идентификатор = "";
			СтрокаДерева.Значение = Неопределено;
			СтрокаДерева.ТребуетсяЗначение = Ложь;
			СтрокаДерева.Обязательная = Ложь;
			СтрокаДерева.ТипСтроки = 0;
			
		КонецЕсли;
		
		СтрокаДереваВетка = СтрокаДерева.ПолучитьЭлементы().Добавить();
		СтрокаДереваВетка.Наименование = ТекущаяУслуга.Наименование;
		СтрокаДереваВетка.Использовать = ТекущаяУслуга.Использовать;
		СтрокаДереваВетка.Идентификатор = ТекущаяУслуга.Идентификатор;
		СтрокаДереваВетка.Категория = ТекущаяУслуга.Категория;
		СтрокаДереваВетка.Обязательная = ТекущаяУслуга.Обязательная;
		СтрокаДереваВетка.ТипСтроки = 1;
		СтрокаДереваВетка.ПоказыватьИнформацию = ТекущаяУслуга.ПоказыватьИнформацию;
		
		СвойстваУслуги = ТекущаяУслуга.Свойства;
		
		Если СвойстваУслуги.Количество() Тогда
			
			СтрокиСвойств = СтрокаДереваВетка.ПолучитьЭлементы();
			СтрокиСвойств.Очистить();
			
			Для Каждого ТекущееСвойство Из СвойстваУслуги Цикл
				
				СтрокаДереваСвойство = СтрокиСвойств.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДереваСвойство, ТекущееСвойство);
				СтрокаДереваСвойство.ТребуетсяЗначение = Истина;
				СтрокаДереваСвойство.ТипСтроки = 2;
				СтрокаДереваСвойство.Значение = ТекущееСвойство.Значение;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДополнительныеТребования.ПолучитьЭлементы().Количество() > 0 Тогда
		Если Не Элементы.ГруппаДополнительныеТребования.Видимость Тогда
			Элементы.ГруппаДополнительныеТребования.Видимость = Истина;
			УстановитьВидимостьНаСервере(Элементы.ГруппаДополнительныеТребования.Имя);
		КонецЕсли;
	Иначе
		Элементы.ГруппаДополнительныеТребования.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьНаСервере(ИмяЭлемента)
	
	Элементы[ИмяЭлемента].Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДополнительныеТребованияМультизаказа(УслугиТарифа)
	
	Мультизаказ = Элементы.ЗаказыСГруппировками.ТекущиеДанные;
	
	Если Мультизаказ = Неопределено 
		ИЛИ Не Мультизаказ.ЭтоМультизаказ 
		ИЛИ Мультизаказ.Нераспределенные Тогда
		Возврат;
	КонецЕсли;
	
	УслугиМультизаказа = Мультизаказ.ДополнительныеТребования;
	УслугиМультизаказа.Очистить();
	
	Для Каждого ТекущаяУслуга Из УслугиТарифа Цикл
		
		НоваяУслуга = УслугиМультизаказа.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяУслуга, ТекущаяУслуга, , "Свойства");
		СвойстваТекущейУслуги = ТекущаяУслуга.Свойства;
		
		Если СвойстваТекущейУслуги.Количество() Тогда
			СвойстваНовойУслуги = НоваяУслуга.Свойства;
			Для Каждого СвойствоТекущейУслуги Из СвойстваТекущейУслуги Цикл
				СвойствоНовойУслуги = СвойстваНовойУслуги.Добавить();
				ЗаполнитьЗначенияСвойств(СвойствоНовойУслуги, СвойствоТекущейУслуги);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДополнительныеТребования()
	
	ДополнительныеТребованияПредставление = "";
	Мультизаказ = Элементы.ЗаказыСГруппировками.ТекущиеДанные;
	
	Если Мультизаказ = Неопределено 
		ИЛИ Не Мультизаказ.ЭтоМультизаказ 
		ИЛИ Мультизаказ.Нераспределенные Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекущаяУслуга Из Мультизаказ.ДополнительныеТребования Цикл
		Если ТекущаяУслуга.Использовать Тогда
			ДополнительныеТребованияПредставление = ДополнительныеТребованияПредставление
										+ ?(ДополнительныеТребованияПредставление = "", "", ", ")
										+ ТекущаяУслуга.Наименование;
		КонецЕсли;
	КонецЦикла;
	
	ДополнительныеТребованияПредставление = ?(ДополнительныеТребованияПредставление = "",
											НСтр("ru='<Не выбраны>'"),
											ДополнительныеТребованияПредставление);
	Элементы.ДополнительныеТребованияПредставление.Подсказка = ДополнительныеТребованияПредставление;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПараметрыОтбора()
	
	// Быстрые отборы.
	
	БыстрыеОтборы.Очистить();
	
	Если ЗначениеЗаполнено(ОтборОтправитель) Тогда
		БыстрыеОтборы.Добавить("ОтборОтправитель", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отправитель: %1'"),
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтборОтправитель, "Наименование")));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборОтправительАдресПредставление) Тогда
		БыстрыеОтборы.Добавить("ОтборОтправительАдрес", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Откуда: %1'"), 
			ОтборОтправительАдресПредставление));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборПолучатель) Тогда
		БыстрыеОтборы.Добавить("ОтборПолучатель", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Получатель: %1'"), 
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтборПолучатель, "Наименование")));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборПолучательАдресПредставление) Тогда
		БыстрыеОтборы.Добавить("ОтборПолучательАдрес", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Куда: %1'"),
			ОтборПолучательАдресПредставление));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборГрузоперевозчик) Тогда
		БыстрыеОтборы.Добавить("ОтборГрузоперевозчик", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Перевозчик: %1'"),
			ОтборГрузоперевозчикНаименование));
	КонецЕсли;

	Если ЗначениеЗаполнено(ОтборПоГотовностиЗаказов) Тогда
		БыстрыеОтборы.Добавить("ОтборПоГотовностиЗаказов", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Заказы: %1'"), 
			Элементы.ОтборПоГотовностиЗаказов.СписокВыбора.НайтиПоЗначению(ОтборПоГотовностиЗаказов)));
	КонецЕсли;
	
	// Удаление старых элементов быстрых отборов.
	КоличествоЭлементов = Элементы.ГруппаОтборыОтображение.ПодчиненныеЭлементы.Количество();
	Для ОбратныйИндекс = 1 По КоличествоЭлементов Цикл
		ЭлементОтбора = Элементы.ГруппаОтборыОтображение.ПодчиненныеЭлементы[КоличествоЭлементов - ОбратныйИндекс];
		Если ЭлементОтбора.Видимость Тогда
			Элементы.Удалить(ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	
	// Создание новых элементов быстрых отборов.
	Для Каждого ЭлементОтбора Из БыстрыеОтборы Цикл
		
		// Добавление пустой группы.
		НоваяГруппа = Элементы.Добавить("ГруппаБыстрогоОтбора_" + ЭлементОтбора.Значение, Тип("ГруппаФормы"), 
			Элементы.ГруппаОтборыОтображение);
		НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
		НоваяГруппа.ОтображатьЗаголовок = Ложь;
		НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		НоваяГруппа.Видимость = Истина;
		НоваяГруппа.ОтображатьОтступСлева = Ложь;
		НоваяГруппа.ЦветФона = WebЦвета.СветлоЖелтый;
		НоваяГруппа.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
		
		НовыйЭлемент = Элементы.Добавить("ЗаголовокОтбора_" + ЭлементОтбора.Значение, Тип("ДекорацияФормы"), НоваяГруппа);
		
		// Разбитие на форматированную строку.
		
		НачалоПредставления = Лев(ЭлементОтбора.Представление, СтрНайти(ЭлементОтбора.Представление, ":"));
		КонецПредставления = Сред(ЭлементОтбора.Представление, СтрНайти(ЭлементОтбора.Представление, ":")+1);
		
		НовыйЭлемент.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(
			НСтр("ru='%1 <span style=""color: ЦветВажнойНадписиБИП"">%2</span>'"),
			НачалоПредставления,
			КонецПредставления);
		НовыйЭлемент.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
		НовыйЭлемент.Гиперссылка = Истина;
		НовыйЭлемент.УстановитьДействие("Нажатие", "Подключаемый_Нажатие");
		
		НовыйЭлемент = Элементы.Добавить("ОчиститьОтбор_" + ЭлементОтбора.Значение, Тип("ДекорацияФормы"), НоваяГруппа);
		НовыйЭлемент.Вид = ВидДекорацииФормы.Картинка;
		НовыйЭлемент.Картинка = БиблиотекаКартинок.ПолеВводаОчистить;
		НовыйЭлемент.Гиперссылка = Истина;
		НовыйЭлемент.УстановитьДействие("Нажатие", "Подключаемый_Нажатие");
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Нажатие(Элемент)
	
	Если Найти(Элемент.Имя, "ОчиститьОтбор_") Тогда
		
		// Очистка отбора.
		ИмяРеквизита = Сред(Элемент.Имя, СтрНайти(Элемент.Имя, "_") + 1);
		
		Если ИмяРеквизита = "ОтборОтправитель" Тогда
			ОтборОтправитель = Неопределено;
		ИначеЕсли ИмяРеквизита = "ОтборОтправительАдрес" Тогда
			ОтборОтправительАдресПредставление = "";
			ОтборОтправительАдресЗначение = "";
			ОтборОтправительАдресВладелец = Неопределено;
		ИначеЕсли ИмяРеквизита = "ОтборПолучатель" Тогда
			ОтборПолучатель = Неопределено;
		ИначеЕсли ИмяРеквизита = "ОтборПолучательАдрес" Тогда
			ОтборПолучательАдресПредставление = "";
			ОтборПолучательАдресЗначение = "";
			ОтборПолучательАдресВладелец = Неопределено;
		ИначеЕсли ИмяРеквизита = "ОтборГрузоперевозчик" Тогда
			ОтборГрузоперевозчикНаименование = "";
			ОтборГрузоперевозчик = "";
		Иначе
			ЗначениеРеквизита = ЭтотОбъект[ИмяРеквизита];
			Если ТипЗнч(ЗначениеРеквизита) = Тип("Булево") Тогда
				ЭтотОбъект[ИмяРеквизита] = Ложь;
			ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("Число") Тогда
				ЭтотОбъект[ИмяРеквизита] = 0;
			ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("Строка") Тогда
				ЭтотОбъект[ИмяРеквизита] = "";
			ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("СписокЗначений") Тогда 
				Для Каждого ЭлементСписка Из ЭтотОбъект[ИмяРеквизита] Цикл
					ЭлементСписка.Пометка = Ложь;
				КонецЦикла;
			ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("СтандартныйПериод") Тогда
				ЭтотОбъект[ИмяРеквизита] = Неопределено;
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ОтборыИзменение = Ложь;
		СформироватьНадписьОтбора();
		ПолучитьЗаказыНаДоставку();
		
	ИначеЕсли Найти(Элемент.Имя, "ЗаголовокОтбора_") Тогда
		
		ИмяРеквизита = Сред(Элемент.Имя, СтрНайти(Элемент.Имя, "_") + 1);
		ТекущийЭлемент = Элементы[ИмяРеквизита];
		
	КонецЕсли;
	
	СформироватьПараметрыОтбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьИзменениеОтборов(ОтборыБылиИзменены = Истина)
	
	ОтборыИзменение = ОтборыБылиИзменены;
	СформироватьПараметрыОтбора();
	СформироватьНадписьОтбора();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораОтправитель()
	
	СписокВыбора = Элементы.ОтборОтправитель.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(1, НСтр("ru='Наша организация...'"));
	СписокВыбора.Добавить(2, НСтр("ru='Контрагент...'"));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораПолучатель()
	
	СписокВыбора = Элементы.ОтборПолучатель.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(1, НСтр("ru='Наша организация...'"));
	СписокВыбора.Добавить(2, НСтр("ru='Контрагент...'"));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораОтборОткуда()
	
	СписокВыбора = Элементы.ОтборОтправительАдрес.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(1, НСтр("ru='Наш склад...'"));
	СписокВыбора.Добавить(2, НСтр("ru='Адрес контрагента...'"));
	СписокВыбора.Добавить(3, НСтр("ru='Произвольный адрес...'"));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораОтборКуда()
	
	СписокВыбора = Элементы.ОтборПолучательАдрес.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(2, НСтр("ru='Адрес контрагента...'"));
	СписокВыбора.Добавить(3, НСтр("ru='Произвольный адрес...'"));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораВремениОтгрузки()
	
	// Список выбора варианта времени отгрузки
	СписокВыбора = Элементы.ВариантВремениОтгрузки.СписокВыбора;
	СписокВыбора.Очистить();
	
	ВариантыВремениОтгрузки = СервисДоставкиПовтИсп.ВариантыВремениОтгрузки();

	Если ВариантыВремениОтгрузкиСписокВыбора.Количество() = 0 Тогда
		ВариантыВремениОтгрузкиСписокВыбора = СервисДоставкиПовтИсп.СписокВариантовВремениОтгрузки();
	КонецЕсли;

	Для Каждого Элемент Из ВариантыВремениОтгрузкиСписокВыбора Цикл
		
		Если Элемент.Значение = ВариантыВремениОтгрузки.ВТечениеДня Тогда
			Продолжить;
		КонецЕсли;

		СписокВыбора.Добавить(Элемент.Значение, Элемент.Представление);
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборЗначения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
	
		ЭтотОбъект[ДополнительныеПараметры.ИмяРеквизита] = Результат;
		ОбработатьИзменениеЗначения(ДополнительныеПараметры.ИмяРеквизита);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборЗначенияДляТаблицыЗаказыСГруппировками(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
	
		Мультизаказ = Элементы.ЗаказыСГруппировками.ТекущиеДанные;
		Мультизаказ[ДополнительныеПараметры.ИмяРеквизита] = Результат;
		ОбработатьИзменениеРеквизитаМультизаказа(ДополнительныеПараметры.ИмяРеквизита);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеЗначения(ИмяРеквизита)
	
	ОчиститьСообщения();
	ОбработатьИзменениеРеквизитаФормыНаСервере(ИмяРеквизита);
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеРеквизитаФормыНаСервере(ИмяРеквизита)
	
	Если ИмяРеквизита = "ОтборОтправительАдресВладелец" 
		ИЛИ ИмяРеквизита = "ОтборПолучательАдресВладелец" Тогда
		
		ПараметрыРеквизита = ПараметрыАдреса(ЭтотОбъект[ИмяРеквизита]);
		ИмяЭлемента = СтрЗаменить(ИмяРеквизита, "Владелец", "");
		ОбработатьПараметры(ПараметрыРеквизита, ИмяЭлемента);
		
		ОбработатьРеквизитыАдреса(ИмяЭлемента);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПараметры(Параметры, Префикс = "")
	
	ПараметрыДляФормы = Новый Структура; 
	СервисДоставкиКлиентСервер.ЗаполнитьЛинейныеДанныеПоСтруктуре(Параметры, ПараметрыДляФормы, Префикс);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыДляФормы);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПараметрыМультизаказа(Параметры, ПараметрыМультизаказа, Префикс = "")
	
	ПараметрыДляФормы = Новый Структура; 
	СервисДоставкиКлиентСервер.ЗаполнитьЛинейныеДанныеПоСтруктуре(Параметры, ПараметрыДляФормы, Префикс);
	ЗаполнитьЗначенияСвойств(ПараметрыМультизаказа, ПараметрыДляФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборТипаУчастникаГрузоперевозки(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = 1 Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуВыбора("ОрганизацияСервисДоставки", Элемент.Имя);
		
	ИначеЕсли ВыбранноеЗначение = 2 Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуВыбора("КонтрагентСервисДоставки", Элемент.Имя);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбора(ИмяСправочника, ИмяРеквизита, ПараметрыОтбора = Неопределено, 
	ИмяПроцедурыОбработки="ОбработатьВыборЗначения", ТекущееЗначениеРеквизита = Неопределено)
	
	Если ПараметрыОтбора = Неопределено Тогда
		ПараметрыОтбора = Новый Структура();
	КонецЕсли;
	
	Если ИмяПроцедурыОбработки <> "ОбработатьВыборЗначенияДляТаблицыЗаказыСГруппировками" Тогда
		ТекущееЗначениеРеквизита = ЭтотОбъект[ИмяРеквизита];
	КонецЕсли;
	
	ИмяФормыВыбора = СервисДоставкиВызовСервера.ИмяФормыВыбораПоОпределяемомуТипу(ИмяСправочника);
	
	Если ИмяФормыВыбора <> "" Тогда
		
		ПараметрыОткрытия = Новый Структура("ТекущаяСтрока", ТекущееЗначениеРеквизита);
		ПараметрыОткрытия.Вставить("Отбор", ПараметрыОтбора);
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		
		СервисДоставкиКлиент.ПередОткрытиемФормыВыбора(ПараметрыОткрытия, ИмяСправочника);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(ИмяПроцедурыОбработки, ЭтотОбъект,
														Новый Структура("ИмяРеквизита", ИмяРеквизита));
		ОткрытьФорму(
			ИмяФормыВыбора,
			ПараметрыОткрытия,
			ЭтотОбъект,,,,ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникГрузоперевозкиНачалоВыбора(Элемент, НомерРоли, СтандартнаяОбработка)
	
	Если Не Элемент.КнопкаВыбора Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеРеквизита = ЭтотОбъект[Элемент.Имя];
	
	Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
		
		СтандартнаяОбработка = Ложь;
		Если ОпределяемыйТипСодержитТипЗначения("ОрганизацияСервисДоставки", ЗначениеРеквизита) Тогда
			ОткрытьФормуВыбора("ОрганизацияСервисДоставки", Элемент.Имя);
		Иначе
			ОткрытьФормуВыбора("КонтрагентСервисДоставки", Элемент.Имя);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределяемыйТипСодержитТипЗначения(ИмяОпределяемогоТипа, Значение)
	
	Возврат Метаданные.ОпределяемыеТипы[ИмяОпределяемогоТипа].Тип.СодержитТип(ТипЗнч(Значение));
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуГрузоперевозчика(ГрузоперевозчикИдентификатор)
	
	ПараметрыОткрытияФормы = Новый Структура();
	ПараметрыОткрытияФормы.Вставить("Идентификатор", ГрузоперевозчикИдентификатор);
	ПараметрыОткрытияФормы.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	ПараметрыОткрытияФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	ОткрытьФорму("Обработка.СервисДоставки.Форма.КарточкаГрузоперевозчика", 
							ПараметрыОткрытияФормы,
							ЭтотОбъект,,,,,
							РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
							
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуУслуги(ИдентификаторУслуги)
	
	ПараметрыОткрытияФормы = Новый Структура();
	ПараметрыОткрытияФормы.Вставить("Идентификатор", ИдентификаторУслуги);
	ПараметрыОткрытияФормы.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	ПараметрыОткрытияФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	ОткрытьФорму("Обработка.СервисДоставки.Форма.КарточкаУслуги", 
		ПараметрыОткрытияФормы,
		ЭтотОбъект,
		,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуДляВсехЗаказов(Использовать)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаЗаказы Тогда
		Для Каждого ТекущийЗаказ Из Заказы Цикл
			ТекущийЗаказ.Использовать = ТекущийЗаказ.ОбязательныеРеквизитыЗаполнены
										И Использовать;
		КонецЦикла;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаМультизаказы Тогда
		Для Каждого ТекущийМультизаказ Из ЗаказыСГруппировками.ПолучитьЭлементы() Цикл
			Если ТекущийМультизаказ.Нераспределенные Тогда 
				Для Каждого ТекущийЗаказ Из ТекущийМультизаказ.ПолучитьЭлементы() Цикл
					ТекущийЗаказ.Использовать = ТекущийЗаказ.ОбязательныеРеквизитыЗаполнены
												И Использовать;
				КонецЦикла;
			Иначе
				ТекущийМультизаказ.Использовать = (ТекущийМультизаказ.КартинкаИдентификатор = 0 
												ИЛИ ТекущийМультизаказ.КартинкаИдентификатор = 2)
												И Использовать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	УстановитьДоступностьОтправкиЗаказов();
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьЗаказыПоМультизаказам()
	
	СгруппироватьЗаказыПоМультизаказамНаСервере();
	РазвернутьМультизаказы();
	ОбновитьКартинкуИдентификаторУГрупп();
		
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьМультизаказы()
	
	ЭлементыДереваСписка = ЗаказыСГруппировками.ПолучитьЭлементы();
	Для Каждого ЭлементДереваСписка Из ЭлементыДереваСписка Цикл
		Элементы.ЗаказыСГруппировками.Развернуть(ЭлементДереваСписка.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СгруппироватьЗаказыПоМультизаказамНаСервере()
	
	ЗаказыСГруппировками.ПолучитьЭлементы().Очистить();
	ДобавитьГруппуНераспределенные(ЗаказыСГруппировками);
	ГруппаНераспределенные = ЗаказыСГруппировками.ПолучитьЭлементы()[0];
		
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	Заказы.ГрузоперевозчикИдентификатор КАК ГрузоперевозчикИдентификатор,
	|	Заказы.ЗаборОтАдреса КАК ЗаборОтАдреса,
	|	Заказы.АдресОтгрузкиИдентификатор КАК АдресОтгрузкиИдентификатор,
	|	Заказы.АдресОтгрузкиПредставление КАК АдресОтгрузкиПредставление,
	|	Заказы.АдресОтгрузкиНаименование КАК АдресОтгрузкиНаименование,
	|	Заказы.ОтправительАдресДолгота КАК ОтправительАдресДолгота,
	|	Заказы.ОтправительАдресШирота КАК ОтправительАдресШирота,
	|	Заказы.ДатаОтгрузки КАК ДатаОтгрузки,
	|	Заказы.ОтправительКонтрагентИНН КАК ОтправительКонтрагентИНН,
	|	Заказы.ОтправительКонтрагентКПП КАК ОтправительКонтрагентКПП,
	|	Заказы.ОтправительКонтактноеЛицоНаименование КАК ОтправительКонтактноеЛицоНаименование,
	|	Заказы.ОтправительКонтактноеЛицоИдентификатор КАК ОтправительКонтактноеЛицоИдентификатор,
	|	Заказы.ОтправительКонтактноеЛицоТелефонПредставление КАК ОтправительКонтактноеЛицоТелефонПредставление,
	|	Заказы.ОтправительКонтактноеЛицоТелефонДополнительныйПредставление КАК ОтправительКонтактноеЛицоТелефонДополнительныйПредставление,
	|	Заказы.ГрузВес КАК ГрузВес,
	|	Заказы.ГрузОбъем КАК ГрузОбъем,
	|	Заказы.КоличествоГрузовыхМест КАК КоличествоГрузовыхМест
	|ПОМЕСТИТЬ ТаблицаЗаказы
	|ИЗ
	|	&ТаблицаЗаказы КАК Заказы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗаказы.ГрузоперевозчикИдентификатор,
	|	ТаблицаЗаказы.ЗаборОтАдреса КАК ЗаборОтАдреса,
	|	ВЫБОР КОГДА ТаблицаЗаказы.ЗаборОтАдреса ТОГДА """" ИНАЧЕ ТаблицаЗаказы.АдресОтгрузкиИдентификатор КОНЕЦ КАК АдресОтгрузкиИдентификатор,
	|	ТаблицаЗаказы.АдресОтгрузкиПредставление КАК АдресОтгрузкиПредставление,
	|	ВЫБОР КОГДА ТаблицаЗаказы.ЗаборОтАдреса ТОГДА ТаблицаЗаказы.ОтправительАдресДолгота ИНАЧЕ 0 КОНЕЦ КАК ОтправительАдресДолгота,
	|	ВЫБОР КОГДА ТаблицаЗаказы.ЗаборОтАдреса ТОГДА ТаблицаЗаказы.ОтправительАдресШирота ИНАЧЕ 0 КОНЕЦ КАК ОтправительАдресШирота,
	|	ТаблицаЗаказы.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ТаблицаЗаказы.ОтправительКонтрагентИНН,
	|	ТаблицаЗаказы.ОтправительКонтрагентКПП,
	|	ТаблицаЗаказы.ОтправительКонтактноеЛицоНаименование,
	|	ТаблицаЗаказы.ОтправительКонтактноеЛицоИдентификатор,
	|	ТаблицаЗаказы.ОтправительКонтактноеЛицоТелефонПредставление,
	|	ТаблицаЗаказы.ОтправительКонтактноеЛицоТелефонДополнительныйПредставление,
	|	СУММА(ТаблицаЗаказы.ГрузВес) КАК ГрузВес,
	|	СУММА(ТаблицаЗаказы.ГрузОбъем) КАК ГрузОбъем,
	|	СУММА(ТаблицаЗаказы.КоличествоГрузовыхМест) КАК КоличествоГрузовыхМест,
	|	КОЛИЧЕСТВО(*) КАК КоличествоЗаказов
	|ИЗ
	|	ТаблицаЗаказы КАК ТаблицаЗаказы
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗаказы.ГрузоперевозчикИдентификатор,
	|	ТаблицаЗаказы.ЗаборОтАдреса,
	|	ВЫБОР КОГДА ТаблицаЗаказы.ЗаборОтАдреса ТОГДА """" ИНАЧЕ ТаблицаЗаказы.АдресОтгрузкиИдентификатор КОНЕЦ,
	|	ТаблицаЗаказы.АдресОтгрузкиПредставление,
	|	ВЫБОР КОГДА ТаблицаЗаказы.ЗаборОтАдреса ТОГДА ТаблицаЗаказы.ОтправительАдресДолгота ИНАЧЕ 0 КОНЕЦ,
	|	ВЫБОР КОГДА ТаблицаЗаказы.ЗаборОтАдреса ТОГДА ТаблицаЗаказы.ОтправительАдресШирота ИНАЧЕ 0 КОНЕЦ,
	|	ТаблицаЗаказы.ДатаОтгрузки,
	|	ТаблицаЗаказы.ОтправительКонтрагентИНН,
	|	ТаблицаЗаказы.ОтправительКонтрагентКПП,
	|	ТаблицаЗаказы.ОтправительКонтактноеЛицоНаименование,
	|	ТаблицаЗаказы.ОтправительКонтактноеЛицоИдентификатор,
	|	ТаблицаЗаказы.ОтправительКонтактноеЛицоТелефонПредставление,
	|	ТаблицаЗаказы.ОтправительКонтактноеЛицоТелефонДополнительныйПредставление
	|УПОРЯДОЧИТЬ ПО
	|	ДатаОтгрузки,
	|	ЗаборОтАдреса,
	|	ГрузоперевозчикИдентификатор,
	|	АдресОтгрузкиПредставление,
	|	ОтправительКонтрагентИНН";
	
	Запрос.УстановитьПараметр("ТаблицаЗаказы", Заказы.Выгрузить());
	ВыборкаПоМультизаказам = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаПоМультизаказам.Следующий() Цикл
		
		ОтборПоМультизаказу = ПараметрыМультизаказаОтбор();
		ЗаполнитьЗначенияСвойств(ОтборПоМультизаказу, ВыборкаПоМультизаказам);
		НайденныеСтроки = Заказы.НайтиСтроки(ОтборПоМультизаказу);
		
		Если НайденныеСтроки.Количество() = 1 
			ИЛИ (Не ЗаполненыПараметрыМультизаказаОбязательныеДляАвтоматическогоСоздания(ОтборПоМультизаказу))
			ИЛИ (Не ВыборкаПоМультизаказам.ЗаборОтАдреса) Тогда
			
			НоваяГруппа = ГруппаНераспределенные;
			
		ИначеЕсли НайденныеСтроки.Количество() > 1 Тогда
			
			ДобавитьНовыйМультизаказ(ЗаказыСГруппировками);
			НоваяГруппа = ЗаказыСГруппировками.ПолучитьЭлементы()[ЗаказыСГруппировками.ПолучитьЭлементы().Количество()-2];
			
		КонецЕсли;
		
		Для Каждого ТекущийЗаказ Из НайденныеСтроки Цикл
			
			ДобавитьЗаказВМультизаказ(НоваяГруппа, ТекущийЗаказ);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВремяОтгрузкиПоУмолчаниюНаСервере(Мультизаказ)
	
	Мультизаказ.ВремяОтгрузкиС = ВремяОтгрузкиС;
	Мультизаказ.ВремяОтгрузкиПо = ВремяОтгрузкиПо;
	Мультизаказ.ВремяОтгрузкиОбедС = ВремяОтгрузкиОбедС;
	Мультизаказ.ВремяОтгрузкиОбедПо = ВремяОтгрузкиОбедПо;
	 
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРеквизитМультизаказа(Элемент)
	
	Мультизаказ = Элементы.ЗаказыСГруппировками.ТекущиеДанные;
	ИмяРеквизита = Элемент.Имя + "Ссылка";
	Мультизаказ[ИмяРеквизита] = Неопределено;
	ОбработатьИзменениеРеквизитаМультизаказа(ИмяРеквизита);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеРеквизитаМультизаказа(ИмяРеквизита)
	
	ОчиститьСообщения();
	Отказ = Ложь;

	Мультизаказ = Элементы.ЗаказыСГруппировками.ТекущиеДанные;
	ПараметрыМультизаказа = ПараметрыМультизаказа();
	ЗаполнитьЗначенияСвойств(ПараметрыМультизаказа, Мультизаказ);
	
	ОбработатьИзменениеРеквизитаМультизаказаНаСервере(ПараметрыМультизаказа, ИмяРеквизита, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Мультизаказ, ПараметрыМультизаказа);
	ПослеИзмененияРеквизитовМультизаказа(Мультизаказ);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеРеквизитаМультизаказаНаСервере(ПараметрыМультизаказа, ИмяРеквизита, Отказ = Ложь)
	
	Модифицированность = Истина;
	
	Если ИмяРеквизита = "ОтправительКонтактноеЛицоСсылка" Тогда
		
		Если ТипЗнч(ПараметрыМультизаказа[ИмяРеквизита]) <> Тип("Строка") Тогда
			
			ПараметрыРеквизита = ПараметрыКонтактногоЛица(ПараметрыМультизаказа[ИмяРеквизита]);
			ОбработатьПараметрыМультизаказа(ПараметрыРеквизита, ПараметрыМультизаказа, СтрЗаменить(ИмяРеквизита, "Ссылка", ""));
			
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонНачалоВыбора(Элемент)
	
	Мультизаказ = Элементы.ЗаказыСГруппировками.ТекущиеДанные;
	КонтактнаяИнформацияМультизаказаНачалоВыбора(Элемент, ?(Мультизаказ.ОтправительЭтоОрганизация, 
												"ТелефонКонтактногоЛицаОрганизации",
												"ТелефонКонтактногоЛицаКонтрагента"));
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеКонтактнойИнформацииМультизаказа(Элемент, ТипКонтактнойИнформацииСтрока)
	
	ИмяРеквизита = Элемент.Имя;
	ИмяРеквизитаПредставление = ИмяРеквизита + "Представление";
	ИмяРеквизитаЗначенияПолей = ИмяРеквизита + "Значение";
	Мультизаказ = Элементы.ЗаказыСГруппировками.ТекущиеДанные;
	
	Если ТипКонтактнойИнформацииСтрока = "Телефон" Тогда
		
		Значение = СервисДоставкиВызовСервера.КонтактнаяИнформацияПоПредставлению(Мультизаказ[ИмяРеквизитаПредставление], ТипКонтактнойИнформацииСтрока);
		Мультизаказ[ИмяРеквизитаЗначенияПолей] = Значение;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	Отказ = Ложь;
	ПроверитьПредставлениеКонтактнойИнформацииМультизаказа(Мультизаказ, ИмяРеквизита, Отказ);
	
	Если Мультизаказ[ИмяРеквизитаПредставление] <> Элемент.ТекстРедактирования Тогда
		Мультизаказ[ИмяРеквизитаПредставление] = Элемент.ТекстРедактирования;
	КонецЕсли;
	
	Мультизаказ[ИмяРеквизитаЗначенияПолей] = СервисДоставкиВызовСервера.КонтактнаяИнформацияПоПредставлению(Мультизаказ[ИмяРеквизитаПредставление],
		ТипКонтактнойИнформацииСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПредставлениеКонтактнойИнформацииМультизаказа(Мультизаказ, Префикс, ЕстьОшибки)
	
	ОчиститьСообщения();
	
	Если Найти(Префикс, "Телефон") Тогда
		
		ПроверитьНомерТелефонаМультизаказа(Мультизаказ, Префикс, ЕстьОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает список ошибок заполнения в виде списка значений:
//      Представление   - описание ошибки.
//      Значение        - XPath для поля.
&НаКлиенте
Функция ОшибкиЗаполненияТелефона(Префикс, Параметры)
	
	Представление = Параметры[Префикс + "Представление"];
	Значение = Параметры[Префикс + "Значение"];
	
	СписокОшибок = Новый СписокЗначений;
	
	Если Представление = "" Тогда
		Возврат СписокОшибок;
	КонецЕсли;
	
	СтруктураТелефона = Неопределено;
	
	Если Значение <> "" Тогда
		
		Отказ = Ложь;
		ТекстОшибки = "";
		СтруктураТелефона = ЗначениеИзСтрокиJSON(Значение, Отказ, ТекстОшибки);
		
	КонецЕсли;
	
	Если СтруктураТелефона = Неопределено Тогда
		
		Значение = СервисДоставкиВызовСервера.КонтактнаяИнформацияПоПредставлению(Представление, "Телефон");
		Параметры[Префикс + "Значение"] = Значение;
		Отказ = Ложь;
		ТекстОшибки = "";
		СтруктураТелефона = ЗначениеИзСтрокиJSON(Значение, Отказ, ТекстОшибки);
		
	КонецЕсли;
	
	ПолныйНомерТелефона = "";
	Если СтруктураТелефона.Свойство("countryCode") Тогда
		ПолныйНомерТелефона = ПолныйНомерТелефона + СтруктураТелефона.countryCode;
	КонецЕсли;
	
	Если СтруктураТелефона.Свойство("areaCode") Тогда
		ПолныйНомерТелефона = ПолныйНомерТелефона + СтруктураТелефона.areaCode;
	КонецЕсли;
	
	Если СтруктураТелефона.Свойство("number") Тогда
		ПолныйНомерТелефона = ПолныйНомерТелефона + СтруктураТелефона.number;
	КонецЕсли;
	
	НомерТелефонаТолькоЦифры = ТолькоЦифры(ПолныйНомерТелефона);
	
	Если СтрДлина(НомерТелефонаТолькоЦифры) < 10 Тогда
		СписокОшибок.Добавить("НомерТелефона", НСтр("ru = 'Номер телефона слишком короткий (менее 10 цифр)'"));
	КонецЕсли;
	
	Если СтрДлина(НомерТелефонаТолькоЦифры) > 15 Тогда
		СписокОшибок.Добавить("НомерТелефона", НСтр("ru = 'Номер телефона слишком длинный'"));
	КонецЕсли;
	
	Если НомерТелефонаСодержитНедопустимыеСимволы(ПолныйНомерТелефона) Тогда
		СписокОшибок.Добавить("НомерТелефона", НСтр("ru = 'Номер телефона содержит недопустимые символы'"));
	КонецЕсли;
	
	Возврат СписокОшибок;
	
КонецФункции

// Проверяет, содержит ли строка только 
//
// Параметры:
//  СтрокаПроверки          - Строка - Строка для проверки.
//
// Возвращаемое значение:
//   Булево - Истина - строка содержит только цифры или пустая, Ложь - строка содержит иные символы.
//
&НаКлиенте
Функция НомерТелефонаСодержитНедопустимыеСимволы(Знач СтрокаПроверки)
	
	СписокДопустимыхСимволов = "+-.,() wp1234567890";
	Возврат СтрРазделить(СтрокаПроверки, СписокДопустимыхСимволов, Ложь).Количество() > 0;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеИзСтрокиJSON(Значение, Отказ, ТекстОшибки)
	
	Возврат СервисДоставки.ЗначениеИзСтрокиJSON(Значение, Отказ, ТекстОшибки);
	
КонецФункции

&НаКлиенте
Функция ТолькоЦифры(Знач СтрокаДляПроверки)
	
	Возврат СервисДоставкиКлиент.ТолькоЦифры(СтрокаДляПроверки);
	
КонецФункции

&НаКлиенте
Процедура КонтактнаяИнформацияМультизаказаНачалоВыбора(Элемент, ВидКонтактнойИнформацииСтрока)
	
	Мультизаказ = Элементы.ЗаказыСГруппировками.ТекущиеДанные;
	ПараметрыВидаКонтактнойИнформации = ПараметрыВидаКонтактнойИнформации(ВидКонтактнойИнформацииСтрока);
	
	Если Не ЗначениеЗаполнено(ПараметрыВидаКонтактнойИнформации) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = Элемент.Имя;
	ИмяРеквизитаПредставление = ИмяРеквизита + "Представление";
	ИмяРеквизитаЗначенияПолей = ИмяРеквизита + "Значение";
	
	ЕстьИзменение = Ложь;
	Если Элемент.ТекстРедактирования <> Мультизаказ[ИмяРеквизитаПредставление] Тогда 
		Мультизаказ[ИмяРеквизитаПредставление] = Элемент.ТекстРедактирования;
		ЕстьИзменение = Истина;
	КонецЕсли;
	
	Если (Мультизаказ[ИмяРеквизитаЗначенияПолей] = ""
		И Мультизаказ[ИмяРеквизитаПредставление] <> "")
		ИЛИ ЕстьИзменение Тогда
		Мультизаказ[ИмяРеквизитаЗначенияПолей]
			= СервисДоставкиВызовСервера.КонтактнаяИнформацияПоПредставлению(Мультизаказ[ИмяРеквизитаПредставление],
			ПараметрыВидаКонтактнойИнформации.ТипНаименование);
		
	КонецЕсли;
		
	Мультизаказ[ИмяРеквизитаЗначенияПолей] = СервисДоставкиВызовСервера.АдресСДополнительнымиПолями(ПараметрыВидаКонтактнойИнформации.Тип, Мультизаказ[ИмяРеквизитаЗначенияПолей]);
	
	ПараметрыОткрытия = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
		ПараметрыВидаКонтактнойИнформации.Вид, Мультизаказ[ИмяРеквизитаЗначенияПолей],
		Мультизаказ[ИмяРеквизитаПредставление],, ПараметрыВидаКонтактнойИнформации.Тип);
		
	ПараметрыОткрытия.Вставить("Заголовок", Элемент.Заголовок);
	ПараметрыОткрытия.Вставить("ТолькоПросмотр", Мультизаказ.КартинкаИдентификатор = 3);
	
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяРеквизита", ИмяРеквизита);
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьФормуКонтактнойИнформацииМультизаказаЗавершение", ЭтотОбъект, 
								ДополнительныеПараметры);
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, ЭтотОбъект, Оповещение);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыКонтрагента(Значение)
	
	ПараметрыКонтрагента = СервисДоставки.НовыйПараметрыКонтрагента();
	ПараметрыКонтрагента.Ссылка = Значение;
	
	Если ЗначениеЗаполнено(Значение) Тогда
		СервисДоставкиПереопределяемый.ЗаполнитьПараметрыКонтрагента(ПараметрыКонтрагента);
	КонецЕсли;
	
	Возврат ПараметрыКонтрагента;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПараметрыКонтактногоЛица(Значение)
	
	Параметры = СервисДоставки.НовыйПараметрыКонтактногоЛица();
	Параметры.Ссылка = Значение;
	
	Если ЗначениеЗаполнено(Значение) Тогда
		СервисДоставки.ЗаполнитьПараметрыКонтактногоЛица(Параметры);
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьПараметрыОтбораКонтактногоЛицаКонтрагента(ПараметрыОтбора, КонтрагентСсылка)
	СервисДоставкиПереопределяемый.ЗаполнитьПараметрыОтбораКонтактногоЛицаКонтрагента(ПараметрыОтбора,
		КонтрагентСсылка);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПараметрыОтбораКонтактногоЛицаОрганизации(ПараметрыОтбора, КонтрагентСсылка)
	СервисДоставкиПереопределяемый.ЗаполнитьПараметрыОтбораКонтактногоЛицаОрганизации(ПараметрыОтбора,
		КонтрагентСсылка);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыУчастника(ИНН, КПП)
	
	Возврат СервисДоставки.УчастникГрузоперевозки(ИНН, КПП);
	
КонецФункции

&НаСервереБезКонтекста
Функция КонтактноеЛицоУчастникаГрузоперевозкиПоИдентификатору(Идентификатор)
	
	Возврат СервисДоставки.КонтактноеЛицоУчастникаГрузоперевозкиПоИдентификатору(Идентификатор);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеНовогоМультизаказа(Параметры, ЭтоКурьерскаяДоставка)
	
	ПредставлениеМультизаказа = Параметры.ЗаказПредставление;
	Если Не Параметры.Нераспределенные Тогда
		
		Если Не ЭтоКурьерскаяДоставка Тогда
			
			Если Параметры.ЗаборОтАдреса Тогда
				
				ШаблонПредставления = НСтр("ru='Доставка %1 от адреса: %2'");
				АдресПредставление = Параметры.АдресОтгрузкиПредставление;
				
			Иначе
				
				ШаблонПредставления = НСтр("ru='Самопривоз %1 на терминал: %2'");
				АдресПредставление = Параметры.АдресОтгрузкиНаименование;
				
			КонецЕсли;
			
		Иначе
			
			ШаблонПредставления = НСтр("ru='Доставка %1 по адресам от: %2'");
			АдресПредставление = Параметры.АдресОтгрузкиПредставление;
			
		КонецЕсли;
		
		ПредставлениеДатыОтгрузки = Формат(Параметры.ДатаОтгрузки, "ДЛФ=D");
		ПредставлениеМультизаказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонПредставления,
			ПредставлениеДатыОтгрузки,
			АдресПредставление);
		
	КонецЕсли;
	
	Возврат ПредставлениеМультизаказа;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеЗаказаНаДоставкуВМультизаказе(Параметры)
	
	ЗаказПредставление = Параметры.ЗаказПредставление;
	
	Если Не Параметры.Нераспределенные Тогда
		ЗаказПредставление = Параметры.АдресДоставкиПредставление;
	Иначе
		ЗаказПредставление = СервисДоставкиКлиентСервер.ПредставлениеЗаказаНаДоставку(Параметры, Истина);
	КонецЕсли;
	
	Возврат ЗаказПредставление;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьКартинкуИдентификаторУГрупп()
	
	Группы = ЗаказыСГруппировками.ПолучитьЭлементы();
	Для Каждого ТекущаяГруппа Из Группы Цикл
		
		ОбновитьКартинкуИдентификаторУГруппы(ТекущаяГруппа);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКартинкуИдентификаторУГруппы(ТекущаяГруппа)
	
	Если ТекущаяГруппа.КартинкаИдентификатор = 3 Тогда
		Возврат;
	КонецЕсли;
	
	КартинкаИдентификаторГруппы = 0;
	Если Не ТекущаяГруппа.Нераспределенные Тогда
		
		ЗаказыГруппы = ТекущаяГруппа.ПолучитьЭлементы();
		Для Каждого ТекущийЗаказ Из ЗаказыГруппы Цикл
			
			Если ТекущийЗаказ.КартинкаИдентификатор = 2 Тогда
				КартинкаИдентификаторГруппы = 2;
			ИначеЕсли КартинкаИдентификаторГруппы <> 2
				И ТекущийЗаказ.КартинкаИдентификатор = 1 Тогда
				КартинкаИдентификаторГруппы = 1;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ТекущаяГруппа.ОбязательныеРеквизитыЗаполнены 
			ИЛИ ЗаказыГруппы.Количество() = 1 Тогда
			КартинкаИдентификаторГруппы = 1;
		КонецЕсли;
		
		Если ЗаказыГруппы.Количество() = 0 Тогда
			КартинкаИдентификаторГруппы = 4;
		КонецЕсли;
		
		Если ТекущаяГруппа.ЕстьОшибка Тогда
			КартинкаИдентификаторГруппы = 2;
		КонецЕсли;
		
	Иначе
		КартинкаИдентификаторГруппы = КартинкаИдентификаторДляГруппыНераспределенныхЗаказов();
	КонецЕсли;
	
	ТекущаяГруппа.КартинкаИдентификатор = КартинкаИдентификаторГруппы;
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьПризнакПроверенУЗаказовМультизаказа(Мультизаказ)
	
	ЗаказыГруппы = Мультизаказ;
		
	ЗаказыГруппы = ЗаказыГруппы.ПолучитьЭлементы();
	Для Каждого ТекущийЗаказ Из ЗаказыГруппы Цикл
		Если ТекущийЗаказ.Проверен Тогда
			ТекущийЗаказ.Проверен = Ложь;
			ТекущийЗаказ.КартинкаИдентификатор = 0;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКартинкуИдентификаторУЗаказа(ТекущийЗаказ)
	
	ТекущийЗаказ.КартинкаИдентификатор = 1;
	
	Если ТекущийЗаказ.ЕстьОшибка Тогда
		ТекущийЗаказ.КартинкаИдентификатор = 2;
	ИначеЕсли ТекущийЗаказ.Проверен Тогда
		ТекущийЗаказ.КартинкаИдентификатор = 3;
	ИначеЕсли ТекущийЗаказ.ОбязательныеРеквизитыЗаполнены Тогда
		ТекущийЗаказ.КартинкаИдентификатор = 0;
	КонецЕсли;
	
	Если ТекущийЗаказ.КартинкаИдентификатор <> 0 Тогда
		ТекущийЗаказ.Использовать = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КартинкаИдентификаторДляГруппыНераспределенныхЗаказов()
	Возврат 4;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыМультизаказа()

	ПараметрыЗаказа = Новый Структура();
	ПараметрыЗаказа.Вставить("ГрузоперевозчикНаименование", "");
	ПараметрыЗаказа.Вставить("ГрузоперевозчикИдентификатор", "");
	ПараметрыЗаказа.Вставить("ТарифНаименование", "");
	ПараметрыЗаказа.Вставить("ТарифИдентификатор", "");
	ПараметрыЗаказа.Вставить("Сумма", 0);
	ПараметрыЗаказа.Вставить("ВалютаНаименование", "RUB");
	ПараметрыЗаказа.Вставить("ВалютаКод", "643");
	ПараметрыЗаказа.Вставить("ТарифТолькоВремяДоставки", Ложь);
	ПараметрыЗаказа.Вставить("ЗаборОтАдреса", Ложь);
	ПараметрыЗаказа.Вставить("АдресОтгрузкиИдентификатор", "");
	ПараметрыЗаказа.Вставить("АдресОтгрузкиНаименование", "");
	ПараметрыЗаказа.Вставить("АдресОтгрузкиПредставление", "");
	ПараметрыЗаказа.Вставить("ОтправительАдресПредставление", "");
	ПараметрыЗаказа.Вставить("ОтправительАдресЗначение", "");
	ПараметрыЗаказа.Вставить("ОтправительАдресДолгота", 0);
	ПараметрыЗаказа.Вставить("ОтправительАдресШирота", 0);
	ПараметрыЗаказа.Вставить("ДатаОтгрузки", Дата(1,1,1));
	ПараметрыЗаказа.Вставить("ВариантВремениОтгрузки", 0);
	ПараметрыЗаказа.Вставить("ВремяОтгрузкиС", Дата(1,1,1));
	ПараметрыЗаказа.Вставить("ВремяОтгрузкиПо", Дата(1,1,1));
	ПараметрыЗаказа.Вставить("ВремяОтгрузкиОбедС", Дата(1,1,1));
	ПараметрыЗаказа.Вставить("ВремяОтгрузкиОбедПо", Дата(1,1,1));
	ПараметрыЗаказа.Вставить("ОтправительКонтрагентСсылка", Неопределено);
	ПараметрыЗаказа.Вставить("ОтправительКонтрагентИНН", "");
	ПараметрыЗаказа.Вставить("ОтправительКонтрагентКПП", "");
	ПараметрыЗаказа.Вставить("ОтправительКонтрагентНаименование", "");
	ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоТелефонПредставление", "");
	ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоТелефонЗначение", "");
	ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоТелефонДополнительныйПредставление", "");
	ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоТелефонДополнительныйЗначение", "");
	ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоНаименование", "");
	ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоИдентификатор", "");
	ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоСсылка", Неопределено);
	
	Возврат ПараметрыЗаказа;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыЗаказаДляИзменения()

	ПараметрыЗаказа = Новый Структура();
	ПараметрыЗаказа.Вставить("ТарифНаименование", "");
	ПараметрыЗаказа.Вставить("ТарифИдентификатор", "");
	ПараметрыЗаказа.Вставить("ТарифТолькоВремяДоставки", Ложь);
	ПараметрыЗаказа.Вставить("ДатаОтгрузки", Дата(1,1,1));
	ПараметрыЗаказа.Вставить("ВремяОтгрузкиС", Дата(1,1,1));
	ПараметрыЗаказа.Вставить("ВремяОтгрузкиПо", Дата(1,1,1));
	ПараметрыЗаказа.Вставить("ВремяОтгрузкиОбедС", Дата(1,1,1));
	ПараметрыЗаказа.Вставить("ВремяОтгрузкиОбедПо", Дата(1,1,1));
	ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоТелефонПредставление", "");
	ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоТелефонЗначение", "");
	ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоТелефонДополнительныйПредставление", "");
	ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоТелефонДополнительныйЗначение", "");
	ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоНаименование", "");
	ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоИдентификатор", "");
	ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоСсылка", Неопределено);
	
	Возврат ПараметрыЗаказа;
	
КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьДополнительногоТелефона(Мультизаказ)
	
	Элементы.ГруппаОтправительТелефонДополнительный.Видимость = Мультизаказ.ОтправительКонтактноеЛицоТелефонДополнительныйДоступен;
	Элементы.ОтправительДобавитьТелефонДополнительный.Видимость = Не Мультизаказ.ОтправительКонтактноеЛицоТелефонДополнительныйДоступен;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыМультизаказаОтбор()

	ПараметрыЗаказа = Новый Структура();
	ПараметрыЗаказа.Вставить("ГрузоперевозчикИдентификатор", "");
	ПараметрыЗаказа.Вставить("ЗаборОтАдреса", Ложь);
	ПараметрыЗаказа.Вставить("АдресОтгрузкиИдентификатор", "");
	ПараметрыЗаказа.Вставить("АдресОтгрузкиПредставление", "");
	ПараметрыЗаказа.Вставить("ОтправительАдресДолгота", 0);
	ПараметрыЗаказа.Вставить("ОтправительАдресШирота", 0);
	ПараметрыЗаказа.Вставить("ДатаОтгрузки", Дата(1,1,1));
	ПараметрыЗаказа.Вставить("ОтправительКонтрагентИНН", "");
	ПараметрыЗаказа.Вставить("ОтправительКонтрагентКПП", "");
	ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоНаименование", "");
	ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоИдентификатор", "");
	ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоТелефонПредставление", "");
	ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоТелефонДополнительныйПредставление", "");
	
	Возврат ПараметрыЗаказа;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыМультизаказаОбязательные(Параметры, ЭтоКурьерскаяДоставка, ВариантыВремениОтгрузки)

	ПараметрыЗаказа = Новый Структура();
	ПараметрыЗаказа.Вставить("ДатаОтгрузки", Дата(1,1,1));
	ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоНаименование", "");
	ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоТелефонПредставление", "");
	Если Параметры.ОтправительКонтактноеЛицоТелефонДополнительныйДоступен Тогда
		ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоТелефонДополнительныйПредставление", "");
	КонецЕсли;
	
	Если ЭтоКурьерскаяДоставка Тогда
		
		ПараметрыЗаказа.Вставить("ТарифИдентификатор");

		Если Параметры.ВариантВремениОтгрузки = ВариантыВремениОтгрузки.ВОпределенноеВремя Тогда
			ПараметрыЗаказа.Вставить("ВремяОтгрузкиК", Дата(1,1,1));
		КонецЕсли;
		
	Иначе
		
		Если Параметры.ЗаборОтАдреса Тогда
			
			ПараметрыЗаказа.Вставить("ВремяОтгрузкиПо", Дата(1,1,1));
			Если ЗначениеЗаполнено(Параметры.ВремяОтгрузкиОбедС) Тогда
				ПараметрыЗаказа.Вставить("ВремяОтгрузкиОбедПо", Дата(1,1,1));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПараметрыЗаказа;
	
КонецФункции

&НаСервере
Функция ПараметрыМультизаказаОбязательныеДляАвтоматическогоСоздания(ЗаборОтАдреса)

	ПараметрыЗаказа = Новый Структура();
	ПараметрыЗаказа.Вставить("ГрузоперевозчикИдентификатор", "");
	ПараметрыЗаказа.Вставить("ДатаОтгрузки", Дата(1,1,1));
	ПараметрыЗаказа.Вставить("ОтправительКонтрагентИНН", "");
	ПараметрыЗаказа.Вставить("АдресОтгрузкиПредставление", "");
	
	Возврат ПараметрыЗаказа;
	
КонецФункции

// Чтобы добавить заказ на доставку в мультизаказ, данные реквизиты должны совпадать у заказа и мультизаказа.
&НаКлиенте
Функция ПараметрыЗаказаОбязательныеДляДобавленияВМультизаказ(ЗаборОтАдреса)

	ПараметрыЗаказа = Новый Структура();
	ПараметрыЗаказа.Вставить("ГрузоперевозчикИдентификатор", НСтр("ru='Грузоперевозчик'"));
	ПараметрыЗаказа.Вставить("ОтправительКонтрагентНаименование", НСтр("ru='Отправитель'"));
	ПараметрыЗаказа.Вставить("ОтправительКонтрагентИНН", НСтр("ru='ИНН отправителя'"));
	ПараметрыЗаказа.Вставить("ОтправительКонтрагентКПП", НСтр("ru='КПП отправителя'"));
	ПараметрыЗаказа.Вставить("ЗаборОтАдреса", НСтр("ru='Способ отгрузки'"));
	Если ЗаборОтАдреса Тогда
		ПараметрыЗаказа.Вставить("АдресОтгрузкиПредставление", НСтр("ru='Адрес отгрузки'"));
	Иначе
		ПараметрыЗаказа.Вставить("АдресОтгрузкиНаименование", НСтр("ru='Терминал приема груза'"));
	КонецЕсли;
	
	Возврат ПараметрыЗаказа;
	
КонецФункции

&НаКлиенте
Функция ПараметрыЗаказаНеОбязательныеДляДобавленияВМультизаказ()

	ПараметрыЗаказа = Новый Структура();
	ПараметрыЗаказа.Вставить("ДатаОтгрузки", НСтр("ru='Дата отгрузки'"));
	ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоНаименование", НСтр("ru='Контактное лицо отправителя'"));
	ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоТелефонПредставление", НСтр("ru='Телефон контактного лица отправителя'"));
	ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоТелефонДополнительныйПредставление", НСтр("ru='Дополнительный телефон контактного лица отправителя'"));
	
	Возврат ПараметрыЗаказа;
	
КонецФункции

&НаСервере
Функция ЗаполненыПараметрыМультизаказаОбязательныеДляАвтоматическогоСоздания(ПараметрыМультизаказа)
		
	Результат = Истина;
	ОбязательныеРеквизитыМультизаказа = ПараметрыМультизаказаОбязательныеДляАвтоматическогоСоздания(ПараметрыМультизаказа.ЗаборОтАдреса);
	ЗаполнитьЗначенияСвойств(ОбязательныеРеквизитыМультизаказа, ПараметрыМультизаказа);
	
	Для Каждого ТекущийПараметр Из ОбязательныеРеквизитыМультизаказа Цикл
		Если Не ЗначениеЗаполнено(ТекущийПараметр.Значение) Тогда
			Результат = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗаполненыОбязательныеРеквизитыМультизаказаДляОформления(ПараметрыМультизаказа, ЭтоКурьерскаяДоставка, ВариантыВремениОтгрузки)
		
	Результат = Истина;
	ОбязательныеРеквизитыМультизаказа = ПараметрыМультизаказаОбязательные(ПараметрыМультизаказа, 
		ЭтоКурьерскаяДоставка, 
		ВариантыВремениОтгрузки);
	
	ЗаполнитьЗначенияСвойств(ОбязательныеРеквизитыМультизаказа, ПараметрыМультизаказа);
	
	Для Каждого ТекущийПараметр Из ОбязательныеРеквизитыМультизаказа Цикл
		
		Если Не ЗначениеЗаполнено(ТекущийПараметр.Значение) Тогда
			
			Результат = Ложь;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьМультизаказыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПолучитьЗаказыНаДоставку();
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораВремениИДаты()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборДатыВремени", ЭтотОбъект);
	
	Мультизаказ = Элементы.ЗаказыСГруппировками.ТекущиеДанные;
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("Дата", Мультизаказ.ДатаОтгрузки);
	ПараметрыОткрытияФормы.Вставить("ВремяРаботыС", Мультизаказ.ВремяОтгрузкиС);
	ПараметрыОткрытияФормы.Вставить("ВремяРаботыПо", Мультизаказ.ВремяОтгрузкиПо);
	ПараметрыОткрытияФормы.Вставить("ВремяОбедС", Мультизаказ.ВремяОтгрузкиОбедС);  
	ПараметрыОткрытияФормы.Вставить("ВремяОбедПо", Мультизаказ.ВремяОтгрузкиОбедПо);
	ПараметрыОткрытияФормы.Вставить("ВариантВыбораВремени", 1);
	ПараметрыОткрытияФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	ПараметрыОткрытияФормы.Вставить("ТолькоПросмотр", Мультизаказ.КартинкаИдентификатор = 3);
	
	ОткрытьФорму(
		"Обработка.СервисДоставки.Форма.ВыборВремениПередачиГруза",
		ПараметрыОткрытияФормы,
		ЭтотОбъект,,,,ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборДатыВремени(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	Мультизаказ = Элементы.ЗаказыСГруппировками.ТекущиеДанные;
	
	Результат.Свойство("ВремяРаботыС", Мультизаказ.ВремяОтгрузкиС);
	Результат.Свойство("ВремяРаботыПо", Мультизаказ.ВремяОтгрузкиПо);
	Результат.Свойство("ВремяОбедС", Мультизаказ.ВремяОтгрузкиОбедС);
	Результат.Свойство("ВремяОбедПо", Мультизаказ.ВремяОтгрузкиОбедПо);
	СформироватьПредставлениеВремениОтгрузки(Мультизаказ);
	СформироватьПредставлениеВариантаВремениОтгрузки(Мультизаказ, ВариантыВремениОтгрузкиСписокВыбора);
	СброситьТариф(Мультизаказ);
	
	ЕстьОшибки = Ложь;
	ПроверитьВремяОтгрузки(Мультизаказ, ЕстьОшибки, Истина);
	
	ПослеИзмененияРеквизитовМультизаказа(Мультизаказ);
	
КонецПроцедуры


&НаКлиенте
Процедура ПослеИзмененияРеквизитовМультизаказа(Мультизаказ)
	
	Мультизаказ.ОбязательныеРеквизитыЗаполнены = ЗаполненыОбязательныеРеквизитыМультизаказаДляОформления(Мультизаказ, ЭтоКурьерскаяДоставка, ВариантыВремениОтгрузки);
	ОбновитьКартинкуИдентификаторУГруппы(Мультизаказ);
	Элементы.ОтправитьЗаказ.Доступность = Мультизаказ.КартинкаИдентификатор = 0 ИЛИ Мультизаказ.КартинкаИдентификатор = 2;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьПорядковыеНомераМультизаказа(Мультизаказ)
	
	ЗаказыМультизаказы = Мультизаказ.ПолучитьЭлементы();
	ЭтоНераспределенные = Мультизаказ.Нераспределенные;
	Для Каждого ТекущийЗаказ Из ЗаказыМультизаказы Цикл
		Если ЭтоНераспределенные Тогда
			ТекущийЗаказ.ПорядковыйНомер = 0;
		Иначе
			ТекущийЗаказ.ПорядковыйНомер = ЗаказыМультизаказы.Индекс(ТекущийЗаказ) + 1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьМультизаказ(Мультизаказ)
	
	ЭлементыМультизаказа = Мультизаказ.ПолучитьЭлементы();
	
	Мультизаказ.КоличествоЗаказов = 0;
	Мультизаказ.ГрузВес = 0;
	Мультизаказ.ГрузОбъем = 0;
	Мультизаказ.КоличествоГрузовыхМест = 0;
	
	Для Каждого ТекущийЗаказ Из ЭлементыМультизаказа Цикл
		Мультизаказ.ГрузВес = Мультизаказ.ГрузВес + ТекущийЗаказ.ГрузВес;
		Мультизаказ.ГрузОбъем = Мультизаказ.ГрузОбъем + ТекущийЗаказ.ГрузОбъем;
		Мультизаказ.КоличествоГрузовыхМест = Мультизаказ.КоличествоГрузовыхМест + ТекущийЗаказ.КоличествоГрузовыхМест;
		Мультизаказ.КоличествоЗаказов = Мультизаказ.КоличествоЗаказов + 1;
	КонецЦикла;
	
	ОбновитьКартинкуИдентификаторУГруппы(Мультизаказ);
	Если Мультизаказ.КартинкаИдентификатор <> 0
		И Мультизаказ.КартинкаИдентификатор <> 2
		И Мультизаказ.Использовать Тогда
		Мультизаказ.Использовать = Ложь;
	КонецЕсли;
	
	ПересчитатьПорядковыеНомераМультизаказа(Мультизаказ);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗаказВМультизаказНаСервере(ДополнительныеПараметры)
	
	ТекущаяСтрока = ЗаказыСГруппировками.НайтиПоИдентификатору(ДополнительныеПараметры.ЗаказИдентификаторСтроки);
	ТекущийРодитель = ЗаказыСГруппировками.НайтиПоИдентификатору(ДополнительныеПараметры.МультизаказИдентификаторСтроки);
	НомерСтрокиДляВставки = ДополнительныеПараметры.НомерСтрокиДляВставки;
	
	ДобавитьЗаказВМультизаказ(ТекущийРодитель, ТекущаяСтрока, НомерСтрокиДляВставки);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗаказВМультизаказ(Мультизаказ, ТекущийЗаказ, НомерСтрокиДляВставки = -1)
	
	ПорядковыйНомер = 0;
	ВариантыВремениОтгрузки = СервисДоставкиПовтИсп.ВариантыВремениОтгрузки();
		
	// Вставить строку в новый мультизаказ.
	Если НомерСтрокиДляВставки = -1 Тогда
		НоваяСтрока = Мультизаказ.ПолучитьЭлементы().Добавить();
		Если Не Мультизаказ.Нераспределенные Тогда
			ПорядковыйНомер = Мультизаказ.ПолучитьЭлементы().Количество();
		КонецЕсли;
	Иначе
		НоваяСтрока = Мультизаказ.ПолучитьЭлементы().Вставить(НомерСтрокиДляВставки);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущийЗаказ,,"Использовать"
								+ ?(ТекущийЗаказ.Свойство("Услуги"), ",Услуги, ДополнительныеТребования", ""));
								
	НоваяСтрока.Нераспределенные = Мультизаказ.Нераспределенные;
	НоваяСтрока.ПорядковыйНомер = ПорядковыйНомер;
	НоваяСтрока.ЗаказПредставление = ПредставлениеЗаказаНаДоставкуВМультизаказе(НоваяСтрока);
	НоваяСтрока.КартинкиПапкиИдентификатор = 3;
	НоваяСтрока.ОтправительКонтактноеЛицоТелефонДополнительныйДоступен = НоваяСтрока.ОтправительКонтактноеЛицоТелефонДополнительныйПредставление <> "";

	Если ЭтоКурьерскаяДоставка Тогда
		
		СформироватьПредставлениеВариантаВремениОтгрузки(НоваяСтрока, ВариантыВремениОтгрузкиСписокВыбора);
		Если НоваяСтрока.ВариантВремениОтгрузки = ВариантыВремениОтгрузки.ВОпределенноеВремя Тогда 
			НоваяСтрока.ВремяОтгрузкиК = Дата(1,1,1) + (НоваяСтрока.ДатаОтгрузки-НачалоДня(НоваяСтрока.ДатаОтгрузки));
		КонецЕсли;
		
	Иначе
		СформироватьПредставлениеВремениОтгрузки(НоваяСтрока);
	КонецЕсли;
	
	Мультизаказ.ГрузВес = Мультизаказ.ГрузВес + ТекущийЗаказ.ГрузВес;
	Мультизаказ.ГрузОбъем = Мультизаказ.ГрузОбъем + ТекущийЗаказ.ГрузОбъем;
	Мультизаказ.КоличествоГрузовыхМест = Мультизаказ.КоличествоГрузовыхМест + ТекущийЗаказ.КоличествоГрузовыхМест;
	Мультизаказ.КоличествоЗаказов = Мультизаказ.КоличествоЗаказов + 1;
	
	Если Мультизаказ.Нераспределенные Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыМультизаказа = ПараметрыМультизаказа();
	ЗаполнитьЗначенияСвойств(ПараметрыМультизаказа, НоваяСтрока);
	
	Если Не ПараметрыМультизаказа.ЗаборОтАдреса Тогда
		ПараметрыМультизаказа.ОтправительАдресДолгота = 0;
		ПараметрыМультизаказа.ОтправительАдресШирота = 0;
		ПараметрыМультизаказа.ОтправительАдресПредставление = "";
		ПараметрыМультизаказа.ОтправительАдресЗначение = "";
	КонецЕсли;
	Мультизаказ.ЗаборОтАдреса = ПараметрыМультизаказа.ЗаборОтАдреса;
	
	Для Каждого ТекущийПараметр Из ПараметрыМультизаказа Цикл
		Если Не ЗначениеЗаполнено(Мультизаказ[ТекущийПараметр.Ключ])
			И Не ТекущийПараметр.Ключ = "Услуги" Тогда
			Мультизаказ[ТекущийПараметр.Ключ] = ТекущийПараметр.Значение;
			Если ТекущийПараметр.Ключ = "ОтправительКонтрагентСсылка" Тогда
				ПараметрыУчастника = ПараметрыУчастника(Мультизаказ.ОтправительКонтрагентИНН, Мультизаказ.ОтправительКонтрагентКПП);
				Если ПараметрыУчастника <> Неопределено Тогда
					Мультизаказ.ОтправительКонтрагентСсылка = ПараметрыУчастника.Ссылка;
					Мультизаказ.ОтправительЭтоОрганизация = ПараметрыУчастника.ЭтоОрганизация;
				КонецЕсли;
			ИначеЕсли ТекущийПараметр.Ключ = "ОтправительКонтактноеЛицоИдентификатор" Тогда
				Мультизаказ.ОтправительКонтактноеЛицоСсылка = КонтактноеЛицоУчастникаГрузоперевозкиПоИдентификатору(Мультизаказ.ОтправительКонтактноеЛицоИдентификатор);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Всегда сбрасываем тариф у мультизаказа, так как изменились данные для расчета тарифа.
	Мультизаказ.ТарифНаименование = "";
	Мультизаказ.ТарифИдентификатор = "";
	Мультизаказ.Сумма = 0;
	Мультизаказ.ТарифТолькоВремяДоставки = Ложь;
	 
	Мультизаказ.ЗаказПредставление = ПредставлениеНовогоМультизаказа(Мультизаказ, ЭтоКурьерскаяДоставка);
	Мультизаказ.КартинкиПапкиИдентификатор = 0;
	Мультизаказ.КартинкаИдентификатор = 0;
	Мультизаказ.ОтправительКонтактноеЛицоТелефонДополнительныйДоступен = Мультизаказ.ОтправительКонтактноеЛицоТелефонДополнительныйПредставление <> "";
	
	// Если мультизаказ был пустым, то обновляем данные по времени отгрузки
	Если Мультизаказ.ПолучитьЭлементы().Количество() = 1 Тогда
		
		Если ЭтоКурьерскаяДоставка Тогда
			Если Мультизаказ.ВариантВремениОтгрузки = ВариантыВремениОтгрузки.КакМожноСкорее Тогда
				Мультизаказ.ВариантВремениОтгрузки = ВариантыВремениОтгрузки.КакМожноСкорее;
			ИначеЕсли Мультизаказ.ВариантВремениОтгрузки = ВариантыВремениОтгрузки.ВОпределенноеВремя Тогда
				Мультизаказ.ВремяОтгрузкиК = Дата(1,1,1) + (НоваяСтрока.ДатаОтгрузки-НачалоДня(НоваяСтрока.ДатаОтгрузки));
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоКурьерскаяДоставка Тогда
		СформироватьПредставлениеВариантаВремениОтгрузки(Мультизаказ, ВариантыВремениОтгрузкиСписокВыбора);
		Если Мультизаказ.ВариантВремениОтгрузки = ВариантыВремениОтгрузки.ВОпределенноеВремя Тогда 
			Мультизаказ.ВремяОтгрузкиК = Дата(1,1,1) + (НоваяСтрока.ДатаОтгрузки-НачалоДня(НоваяСтрока.ДатаОтгрузки));
		КонецЕсли;
	Иначе
		ЗаполнитьВремяОтгрузкиПоУмолчаниюНаСервере(Мультизаказ);
		СформироватьПредставлениеВремениОтгрузки(Мультизаказ);
	КонецЕсли;
	
	Мультизаказ.ОбязательныеРеквизитыЗаполнены = ЗаполненыОбязательныеРеквизитыМультизаказаДляОформления(Мультизаказ, ЭтоКурьерскаяДоставка, ВариантыВремениОтгрузки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПерезаполнитьЗаказНаДоставкуПоДаннымМультизаказа(Мультизаказ, ТекущийЗаказ)
	
	ИзменяемыеПараметры = ПараметрыЗаказаДляИзменения();
	Для Каждого ТекущийПараметр Из ИзменяемыеПараметры Цикл
		Если ТекущийПараметр.Ключ = "ТарифНаименование"
			ИЛИ ТекущийПараметр.Ключ = "ТарифИдентификатор"
			ИЛИ  ТекущийПараметр.Ключ = "ТарифТолькоВремяДоставки" Тогда
			Если ЗначениеЗаполнено(Мультизаказ.ТарифИдентификатор) Тогда
				ТекущийЗаказ[ТекущийПараметр.Ключ] = Мультизаказ[ТекущийПараметр.Ключ];
			КонецЕсли;
		Иначе
			ТекущийЗаказ[ТекущийПараметр.Ключ] = Мультизаказ[ТекущийПараметр.Ключ];
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПустойМультизаказПослеУдаленияЗаказа(Мультизаказ)

	ПараметрыМультизаказа = ПараметрыМультизаказа();
	ЗаполнитьЗначенияСвойств(Мультизаказ, ПараметрыМультизаказа);
	ИсправитьОшибку(Мультизаказ);
	Если Не Мультизаказ.Нераспределенные Тогда
		Мультизаказ.ЗаказПредставление = ПредставлениеПустогоМультизаказа();
		Мультизаказ.ВремяОтгрузкиПредставление = "";
		Мультизаказ.ВариантВремениОтгрузкиПредставление = "";
		Мультизаказ.ОбязательныеРеквизитыЗаполнены = Ложь;
		Мультизаказ.КартинкаИдентификатор = 4;
		Мультизаказ.Услуги.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеВремениОтгрузки(Мультизаказ, ПоказыватьОбед = Истина)
	
	Мультизаказ.ВремяОтгрузкиПредставление = ПредставлениеВремени(Мультизаказ.ВремяОтгрузкиС, 
									Мультизаказ.ВремяОтгрузкиПо, 
									?(ПоказыватьОбед, Мультизаказ.ВремяОтгрузкиОбедС, Неопределено), 
									?(ПоказыватьОбед, Мультизаказ.ВремяОтгрузкиОбедПо, Неопределено));
									
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеВариантаВремениОтгрузки(Мультизаказ, Список)
	
	Мультизаказ.ВариантВремениОтгрузкиПредставление = Список.НайтиПоЗначению(Мультизаказ.ВариантВремениОтгрузки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеВремени(ВремяРаботыС, ВремяРаботыПо, ВремяОбедС, ВремяОбедПо)
	
	СтрокаПредставления = "";
	
	Если ЗначениеЗаполнено(ВремяРаботыС) ИЛИ ЗначениеЗаполнено(ВремяРаботыПо) Тогда
		СтрокаПредставления = СтрокаПредставления + Формат(ВремяРаботыС, "ДФ=HH:mm; ДП=00:00")
			+ "-" + Формат(ВремяРаботыПо, "ДФ=HH:mm");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВремяОбедС) ИЛИ ЗначениеЗаполнено(ВремяОбедПо) Тогда
		СтрокаПредставления = СтрокаПредставления + " (обед " + Формат(ВремяОбедС, "ДФ=HH:mm; ДП=00:00")
			+ "-" + Формат(ВремяОбедПо, "ДФ=HH:mm") + ")";
	КонецЕсли;
	
	Возврат СтрокаПредставления;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеПустогоМультизаказа()
	Возврат НСтр("ru='Пустой мультизаказ'");
КонецФункции 

&НаКлиенте
Процедура ОтправитьМультизаказ(ПараметрыОтправки, Отказ = Ложь)
	
	ПроверитьЗаполнениеОбязательныхРеквизитовМультизаказа(ПараметрыОтправки, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	СоздатьМультизаказ(ПараметрыОтправки)
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыСГруппировкойОтправитьЗаказ(ТекущийЗаказ)
	
	ИсправитьОшибку(ТекущийЗаказ);
	РодительЗаказа = ТекущийЗаказ.ПолучитьРодителя();
	ИдентификаторРодителя = РодительЗаказа.ПолучитьИдентификатор(); 
	
	ПараметрыЗаказа = Новый Структура();
	ПараметрыЗаказа.Вставить("Источник", Элементы.ЗаказыСГруппировками.Имя);
	ПараметрыЗаказа.Вставить("ИдентификаторРодителя", ИдентификаторРодителя);
	ПараметрыЗаказа.Вставить("ИдентификаторСтроки", ТекущийЗаказ.ПолучитьИдентификатор());
	ПараметрыЗаказа.Вставить("ИндексСтроки", РодительЗаказа.ПолучитьЭлементы().Индекс(ТекущийЗаказ));
	ПараметрыЗаказа.Вставить("ОформлятьСписком", Ложь);
	
	ОформитьЗаказНаДоставку(ПараметрыЗаказа);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыСГруппировкойОтправитьМультизаказ(Мультизаказ)
			
	ИсправитьОшибку(Мультизаказ);
	ПараметрыОтправки = Новый Структура();
	ПараметрыОтправки.Вставить("ИдентификаторСтроки", Мультизаказ.ПолучитьИдентификатор());
	ПараметрыОтправки.Вставить("ИндексСтроки", ЗаказыСГруппировками.ПолучитьЭлементы().Индекс(Мультизаказ));
	ПараметрыОтправки.Вставить("ОформлятьСписком", Ложь);
	
	ОтправитьМультизаказ(ПараметрыОтправки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыСГруппировкойОформитьМультизаказ(ПараметрыОтправки)

	ОформитьМультизаказ(ПараметрыОтправки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗаказыВМультизаказ(ПараметрыДобавления, ИндексЗаказа = 0)
	
	Мультизаказ = ЗаказыСГруппировками.НайтиПоИдентификатору(ПараметрыДобавления.ИдентификаторРодителя);
	
	Если Мультизаказ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоЗаказов = Мультизаказ.ПолучитьЭлементы().Количество();
	Если ИндексЗаказа <= (КоличествоЗаказов-1) Тогда
		ОчиститьСообщения();
		ТекущийЗаказ = Мультизаказ.ПолучитьЭлементы().Получить(ИндексЗаказа);
		Элементы.ЗаказыСГруппировками.ТекущаяСтрока = ТекущийЗаказ.ПолучитьИдентификатор();
		ИсправитьОшибку(ТекущийЗаказ);
		ПараметрыЗаказа = СервисДоставкиКлиентСервер.НовыйПараметрыЗаказаНаДоставкуДляСписка();
		ЗаполнитьЗначенияСвойств(ПараметрыЗаказа, ТекущийЗаказ);
		ПараметрыДобавления.Вставить("ИдентификаторСтроки", ТекущийЗаказ.ПолучитьИдентификатор());
		ПараметрыДобавления.Вставить("ИндексСтроки", Мультизаказ.ПолучитьЭлементы().Индекс(ТекущийЗаказ));
		ДобавитьЗаказНаДоставкуВМультизаказ(ПараметрыДобавления, ПараметрыЗаказа);
		Возврат;
	КонецЕсли;
	
	Элементы.ЗаказыСГруппировками.ТекущаяСтрока = Мультизаказ.ПолучитьИдентификатор();
	
	ПараметрыОтправки = Новый Структура();
	ПараметрыОтправки.Вставить("ИдентификаторСтроки", ПараметрыДобавления.ИдентификаторРодителя);
	ПараметрыОтправки.Вставить("ИндексСтроки", ЗаказыСГруппировками.ПолучитьЭлементы().Индекс(Мультизаказ));
	ПараметрыОтправки.Вставить("ОформлятьСписком", ПараметрыДобавления.ОформлятьСписком);
	
	ОбновитьКартинкуИдентификаторУГруппы(Мультизаказ);
	
	Если Мультизаказ.КартинкаИдентификатор = 0 Тогда
		ЗаказыСГруппировкойОформитьМультизаказ(ПараметрыОтправки);
	Иначе
		Мультизаказ.Использовать = Ложь;
		СброситьПризнакПроверенУЗаказовМультизаказа(Мультизаказ);
		Если ПараметрыОтправки.ОформлятьСписком Тогда
			ОтправитьМультизаказыСписком(ПараметрыОтправки.ИндексСтроки+1);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеОбязательныхРеквизитовМультизаказа(ПараметрыОтправки, Отказ)
	
	Мультизаказ = ЗаказыСГруппировками.НайтиПоИдентификатору(ПараметрыОтправки.ИдентификаторСтроки);

	ЕстьОшибки = Ложь;
	ПроверитьКонтактноеЛицоМультизаказа(Мультизаказ, ЕстьОшибки, Не ПараметрыОтправки.ОформлятьСписком);
	Если ЕстьОшибки Тогда
		Отказ = Истина;
	КонецЕсли;

	ЕстьОшибки = Ложь;
	ПроверитьНомерТелефонаМультизаказа(Мультизаказ, "ОтправительКонтактноеЛицоТелефон", ЕстьОшибки, Не ПараметрыОтправки.ОформлятьСписком);
	Если ЕстьОшибки Тогда
		Отказ = Истина;
	КонецЕсли;

	Если Мультизаказ.ОтправительКонтактноеЛицоТелефонДополнительныйДоступен Тогда
		ЕстьОшибки = Ложь;
		ПроверитьНомерТелефонаМультизаказа(Мультизаказ, "ОтправительКонтактноеЛицоТелефонДополнительный", ЕстьОшибки, Не ПараметрыОтправки.ОформлятьСписком);
		Если ЕстьОшибки Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьОшибки = Ложь;
	ПроверитьДатуОтгрузкиМультизаказа(Мультизаказ, ЕстьОшибки, Не ПараметрыОтправки.ОформлятьСписком);
	Если ЕстьОшибки Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Мультизаказ.ЗаборОтАдреса Тогда
		ЕстьОшибки = Ложь;
		ПроверитьВремяОтгрузки(Мультизаказ, ЕстьОшибки, Не ПараметрыОтправки.ОформлятьСписком);
		Если ЕстьОшибки Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Мультизаказ.ОписаниеОшибки = СокрЛП(Мультизаказ.ОписаниеОшибки);
	
	Если ПараметрыОтправки.ОформлятьСписком
		И ЕстьОшибки Тогда
		Мультизаказ.Использовать = Ложь;
		ОбновитьКартинкуИдентификаторУГруппы(Мультизаказ);
		ЗаказыСГруппировкамиПриАктивизацииСтрокиУстановитьВидимостьДоступность(Мультизаказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДатуОтгрузкиМультизаказа(Мультизаказ, ЕстьОшибки, ВыводитьПредупреждения)
	
	Если ЗначениеЗаполнено(Мультизаказ.ДатаОтгрузки) Тогда
	
		ТекущаяДата = НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса());
		
		Если ТекущаяДата > НачалоДня(Мультизаказ.ДатаОтгрузки) Тогда
			
			ЕстьОшибки = Истина;
			Если ВыводитьПредупреждения Тогда
				ТекстОшибки = НСтр("ru='Выбранная дата отгрузки недоступна. Укажите актуальную дату.'");
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		ТекстОшибки = НСтр("ru='Поле ""Дата отгрузки""  не заполнено'");
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		Если ВыводитьПредупреждения Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,,"Элементы.ЗаказыСГруппировками.ТекущиеДанные.ДатаОтгрузки");
		Иначе
			Мультизаказ.ЕстьОшибка = Истина;
			Мультизаказ.ОписаниеОшибки = Мультизаказ.ОписаниеОшибки + Символы.ПС + ТекстОшибки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВремяОтгрузки(Мультизаказ, ЕстьОшибки, ВыводитьПредупреждения)
	
	ТекущаяДата = ОбщегоНазначенияКлиент.ДатаСеанса();
	НачалоТекущейДаты = НачалоДня(ТекущаяДата);
	НачалоДатыОтгрузки = НачалоДня(Мультизаказ.ДатаОтгрузки);
	
	Если ЭтоКурьерскаяДоставка Тогда
		Если Мультизаказ.ВариантВремениОтгрузки = ВариантыВремениОтгрузки.ВОпределенноеВремя Тогда
			Если НачалоТекущейДаты < НачалоДатыОтгрузки Тогда 
				Если Мультизаказ.ВремяОтгрузкиК = Дата(1,1,1,0,0,0) Тогда
					ЕстьОшибки = Истина;
					ТекстОшибки = НСтр("ru='При отгрузке в определенное время необходимо указать время'");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	Если ЕстьОшибки Тогда
		Если ВыводитьПредупреждения Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,,"Элементы.ЗаказыСГруппировками.ТекущиеДанные.ВремяОтгрузкиПредставление");
		Иначе
			Мультизаказ.ЕстьОшибка = Истина;
			Мультизаказ.ОписаниеОшибки = Мультизаказ.ОписаниеОшибки + Символы.ПС + ТекстОшибки;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтактноеЛицоМультизаказа(Мультизаказ, ЕстьОшибки, ВыводитьПредупреждения)
	
	ТекстОшибки = "";
	Если Не ЗначениеЗаполнено(Мультизаказ.ОтправительКонтактноеЛицоНаименование) Тогда
		ТекстОшибки = НСтр("ru='Поле ""Контактное лицо""  не заполнено'");
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		Если ВыводитьПредупреждения Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,,"Элементы.ЗаказыСГруппировками.ТекущиеДанные.ОтправительКонтактноеЛицоНаименование");
		Иначе
			Мультизаказ.ЕстьОшибка = Истина;
			Мультизаказ.ОписаниеОшибки = Мультизаказ.ОписаниеОшибки + Символы.ПС + ТекстОшибки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНомерТелефонаМультизаказа(Мультизаказ, Префикс, ЕстьОшибки, ВыводитьПредупреждения = Истина)
	
	ИмяРеквизита = Префикс + "Представление";
	
	Представление = Мультизаказ[ИмяРеквизита];
	
	Если Не ЗначениеЗаполнено(Представление) Тогда
		Возврат;
	КонецЕсли;
	
	СписокОшибок = ОшибкиЗаполненияТелефона(Префикс, Мультизаказ);
	
	ЕстьОшибки = СписокОшибок.Количество()>0;
	
	ТекстСообщения = "";
	Для Каждого ТекущаяОшибка Из СписокОшибок Цикл
		ТекстСообщения = ТекстСообщения + Символы.ПС + ТекущаяОшибка.Представление;
	КонецЦикла;
	
	ТекстСообщения = СокрЛП(ТекстСообщения);
	
	Если ЕстьОшибки Тогда
		ТекстОшибки = НСтр("ru='Некорректный формат номера телефона в поле ""Телефон"" группы ""Отгрузка"".'");
		ТекстСообщения = ТекстОшибки + Символы.ПС + ТекстСообщения;
		Если ВыводитьПредупреждения Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"Элементы.ЗаказыСГруппировками.ТекущиеДанные.ОтправительКонтактноеЛицоТелефон");
		Иначе
			Мультизаказ.ЕстьОшибка = Истина;
			Мультизаказ.ОписаниеОшибки = Мультизаказ.ОписаниеОшибки + Символы.ПС + ТекстСообщения;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗаказыСписком(ТекущийИндекс = 0)
	
	КоличествоЗаказов = Заказы.Количество();
	Пока ТекущийИндекс <= (КоличествоЗаказов-1) Цикл
		ТекущийЗаказ = Заказы.Получить(ТекущийИндекс);
		Если ТекущийЗаказ.Использовать Тогда
			Элементы.Заказы.ТекущаяСтрока = ТекущийЗаказ.ПолучитьИдентификатор();
			ИсправитьОшибку(ТекущийЗаказ);
			
			ПараметрыЗаказа = Новый Структура();
			ПараметрыЗаказа.Вставить("Источник", Элементы.Заказы.Имя);
			ПараметрыЗаказа.Вставить("ИдентификаторРодителя", Неопределено);
			ПараметрыЗаказа.Вставить("ИдентификаторСтроки", ТекущийЗаказ.ПолучитьИдентификатор());
			ПараметрыЗаказа.Вставить("ИндексСтроки", ТекущийИндекс);
			ПараметрыЗаказа.Вставить("ОформлятьСписком", Истина);
			
			ОформитьЗаказНаДоставку(ПараметрыЗаказа);
			Возврат;
		КонецЕсли;
		ТекущийИндекс = ТекущийИндекс + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьМультизаказыСписком(ТекущийИндекс=0)
	
	КоличествоЗаказов = ЗаказыСГруппировками.ПолучитьЭлементы().Количество();
	Пока ТекущийИндекс <= (КоличествоЗаказов-1) Цикл
		Мультизаказ = ЗаказыСГруппировками.ПолучитьЭлементы().Получить(ТекущийИндекс);
		Если Мультизаказ.Использовать Тогда
			Элементы.ЗаказыСГруппировками.ТекущаяСтрока = Мультизаказ.ПолучитьИдентификатор();
			ИсправитьОшибку(Мультизаказ);
			
			ПараметрыОтправки = Новый Структура();
			ПараметрыОтправки.Вставить("ИдентификаторСтроки", Мультизаказ.ПолучитьИдентификатор());
			ПараметрыОтправки.Вставить("ИндексСтроки", ТекущийИндекс);
			ПараметрыОтправки.Вставить("ОформлятьСписком", Истина);
			
			Отказ = Ложь;
			ОтправитьМультизаказ(ПараметрыОтправки, Отказ);
			Если Не Отказ Тогда
				Возврат;
			КонецЕсли;
		ИначеЕсли Мультизаказ.Нераспределенные Тогда
			ОтправитьНераспределенныеЗаказыСписком(0);
		КонецЕсли;
		
		ТекущийИндекс = ТекущийИндекс + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНераспределенныеЗаказыСписком(ТекущийИндекс)
	
	ГруппаНераспределенныеЗаказы = ЗаказыСГруппировками.ПолучитьЭлементы().Получить(ЗаказыСГруппировками.ПолучитьЭлементы().Количество()-1);
	НераспределенныеЗаказы = ГруппаНераспределенныеЗаказы.ПолучитьЭлементы();
	
	КоличествоЗаказов = НераспределенныеЗаказы.Количество();
	Пока ТекущийИндекс <= (КоличествоЗаказов-1) Цикл
		ОчиститьСообщения();
		ТекущийЗаказ = НераспределенныеЗаказы.Получить(ТекущийИндекс);
		Если ТекущийЗаказ.Использовать Тогда
			Элементы.ЗаказыСГруппировками.ТекущаяСтрока = ТекущийЗаказ.ПолучитьИдентификатор();
			ИсправитьОшибку(ТекущийЗаказ);
			
			ПараметрыЗаказа = Новый Структура();
			ПараметрыЗаказа.Вставить("Источник", Элементы.ЗаказыСГруппировками.Имя);
			ПараметрыЗаказа.Вставить("ИдентификаторРодителя", ГруппаНераспределенныеЗаказы.ПолучитьИдентификатор());
			ПараметрыЗаказа.Вставить("ИдентификаторСтроки", ТекущийЗаказ.ПолучитьИдентификатор());
			ПараметрыЗаказа.Вставить("ИндексСтроки", ТекущийИндекс);
			ПараметрыЗаказа.Вставить("ОформлятьСписком", Истина);
			
			ОформитьЗаказНаДоставку(ПараметрыЗаказа);
			Возврат;
		КонецЕсли;
		ТекущийИндекс = ТекущийИндекс + 1;
	КонецЦикла;
	ОчиститьСообщения();
	
КонецПроцедуры

&НаКлиенте
Процедура АдресОбработкаВыбора(Элемент, ВыбранноеЗначение)
	
	ПараметрыОтбора = Новый Структура(); 
	
	ИмяРеквизита = Элемент.Имя;
	
	Если ВыбранноеЗначение = 1 Тогда
		
		ОткрытьФормуВыбора("АдресОрганизацииСервисДоставки", Элемент.Имя + "Владелец", ПараметрыОтбора);

	ИначеЕсли ВыбранноеЗначение = 2 Тогда
			
		ОткрытьФормуВыбора("АдресКонтрагентаСервисДоставки", Элемент.Имя + "Владелец", ПараметрыОтбора);
		
	ИначеЕсли ВыбранноеЗначение = 3 Тогда
			
		АдресНачалоВыбора(Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуТарифа(Параметры)
	
	ПараметрыОткрытияФормы = Новый Структура();
	ПараметрыОткрытияФормы.Вставить("Идентификатор", Параметры.ТарифИдентификатор);
	ПараметрыОткрытияФормы.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	ПараметрыОткрытияФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	ОткрытьФорму("Обработка.СервисДоставки.Форма.КарточкаТарифа", 
		ПараметрыОткрытияФормы,
		,
		Параметры.ТарифИдентификатор,,,,
		РежимОткрытияОкнаФормы.Независимый);
							
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыСГруппировкамиПриАктивизацииСтрокиУстановитьВидимостьДоступность(ТекущаяСтрока);
	
	Элементы.ГруппаСписокПраво.Видимость = Истина;
	ИдентификаторСтроки = ТекущаяСтрока.ПолучитьИдентификатор();
	
	Если ТекущаяСтрока.ЭтоМультизаказ Тогда
		
		НеПустойМультизаказ = ТекущаяСтрока.ПолучитьЭлементы().Количество()>0;
		
		Элементы.ГруппаНомерИДата.Видимость = Истина;
		Элементы.ДекорацияЗаказПредставление.Заголовок = ТекущаяСтрока.ЗаказПредставление;
		Элементы.ГруппаПеревозчик.Видимость = НеПустойМультизаказ И Не ТекущаяСтрока.Нераспределенные;
		
		// Тариф.
		Элементы.ГруппаТариф.Видимость = НеПустойМультизаказ
											И (Не ТекущаяСтрока.Нераспределенные) 
											И (ЭтоКурьерскаяДоставка);
		Элементы.ГруппаСумма.Видимость = Элементы.ГруппаТариф.Видимость;
		Если ТекущаяСтрокаЗаказовСГруппировками <> ИдентификаторСтроки Тогда
			Элементы.ГруппаВыбораТарифа.Видимость = Ложь;
			Элементы.КнопкаОткрытьГруппуТарифы.Видимость = Истина;
		КонецЕсли;	
		Элементы.ТекущийТариф.Видимость = Истина;
		
		// Требования к ТС.
		Элементы.ГруппаТребованияКТС.Видимость = Ложь;

		// Дополнительные услуги.
		Элементы.ГруппаДополнительныеТребования.Видимость = Ложь;
		
		// Дата и время отгрузки.
		Элементы.МультизаказыДатаОтгрузки.Видимость = Истина;
		Элементы.МультизаказыДатаОтгрузкиНадпись.Видимость = Ложь;

		УстановитьВидимостьВидаДатыОтгрузки(ТекущаяСтрока);
		
		// Контактное лицо
		Элементы.ОтправительКонтактноеЛицо.Видимость = Истина;
		Элементы.ОтправительКонтактноеЛицоНадпись.Видимость = Ложь;
		
		Элементы.ГруппаОтправительТелефон.Видимость = Истина;
		Элементы.ОтправительКонтактноеЛицоТелефонНадпись.Видимость = Ложь;

		УстановитьВидимостьДополнительногоТелефона(ТекущаяСтрока);
		Элементы.ОтправительКонтактноеЛицоТелефонДополнительныйНадпись.Видимость = Ложь;
		
		// Группы разделов
		Элементы.ГруппаДатаВремяОтгрузки.Видимость = НеПустойМультизаказ И Не ТекущаяСтрока.Нераспределенные;
		Элементы.ГруппаОтгрузка.Видимость = НеПустойМультизаказ И Не ТекущаяСтрока.Нераспределенные;
		Элементы.ГруппаДоставка.Видимость = Ложь;
		Элементы.ГруппаПараметрыГруза.Видимость = НеПустойМультизаказ;
		Элементы.КоличествоЗаказов.Видимость = Истина;
		
		// Команды
		Элементы.ОтправитьЗаказ.Видимость = НеПустойМультизаказ И Не ТекущаяСтрока.Нераспределенные;
		
		
		Элементы.УдалитьГруппу.Доступность = (Не ТекущаяСтрока.Нераспределенные)
												И ТекущаяСтрока.ПолучитьЭлементы().Количество() = 0;
												
		ЕстьОтправитель = ЗначениеЗаполнено(ТекущаяСтрока.ОтправительКонтрагентСсылка);
		Элементы.ОтправительКонтактноеЛицо.КнопкаВыбора = ЕстьОтправитель
														И ((ТекущаяСтрока.ОтправительЭтоОрганизация
														И ВыбиратьКонтактноеЛицоОрганизации)
														ИЛИ (Не ТекущаяСтрока.ОтправительЭтоОрганизация
														И ВыбиратьКонтактноеЛицоКонтрагента));
	Иначе
		
		Элементы.ГруппаНомерИДата.Видимость = Истина;
		ЗаказПредставление = ТекущаяСтрока.ЗаказПредставление;
		Если Не ТекущаяСтрока.Нераспределенные Тогда
			ЗаказПредставление = СервисДоставкиКлиентСервер.ПредставлениеЗаказаНаДоставку(ТекущаяСтрока, Истина);
		КонецЕсли;
		Элементы.ДекорацияЗаказПредставление.Заголовок = ЗаказПредставление;
		
		Элементы.ГруппаПеревозчик.Видимость = Истина;
		
		// Тариф.
		Элементы.ГруппаТариф.Видимость = Истина;
		Элементы.ГруппаСумма.Видимость = Ложь;
		Элементы.ГруппаВыбораТарифа.Видимость = Ложь;
		Элементы.КнопкаОткрытьГруппуТарифы.Видимость = Ложь;
		Элементы.ТекущийТариф.Видимость = Истина;
		
		// Требования к ТС
		Элементы.ГруппаТребованияКТС.Видимость = Ложь;
		
		// Дополнительные услуги.
		Элементы.ГруппаДополнительныеТребования.Видимость = Ложь;
		
		// Дата и время отгрузки
		Элементы.МультизаказыДатаОтгрузки.Видимость = Ложь;
		Элементы.МультизаказыДатаОтгрузкиНадпись.Видимость = Истина;

		УстановитьВидимостьВидаДатыОтгрузки(ТекущаяСтрока);
		
		// Контактное лицо
		Элементы.ОтправительКонтактноеЛицо.Видимость = Ложь;
		Элементы.ОтправительКонтактноеЛицоНадпись.Видимость = Истина;
		
		Элементы.ГруппаОтправительТелефон.Видимость = Ложь;
		Элементы.ОтправительКонтактноеЛицоТелефонНадпись.Видимость = Истина;
		
		Элементы.ГруппаОтправительТелефонДополнительный.Видимость = Ложь;
		Элементы.ОтправительКонтактноеЛицоТелефонДополнительныйНадпись.Видимость = ТекущаяСтрока.ОтправительКонтактноеЛицоТелефонДополнительныйДоступен;
		
		// Группы разделов
		Элементы.ГруппаДатаВремяОтгрузки.Видимость = Истина;
		Элементы.ГруппаОтгрузка.Видимость = Истина;
		Элементы.ГруппаДоставка.Видимость = Истина;
		Элементы.ГруппаПараметрыГруза.Видимость = Истина;
		Элементы.КоличествоЗаказов.Видимость = Ложь;
		
		// Команды
		Элементы.ОтправитьЗаказ.Видимость = ТекущаяСтрока.Нераспределенные;
		Элементы.УдалитьГруппу.Доступность = Ложь;
		
	КонецЕсли;
	
	Если Элементы.ОтправитьЗаказ.Видимость Тогда
		Элементы.ОтправитьЗаказ.Доступность = ((ТекущаяСтрока.КартинкаИдентификатор = 0 ИЛИ ТекущаяСтрока.КартинкаИдентификатор = 2)
												И Не ТекущаяСтрока.Оформлен);
	КонецЕсли;
	
	Если Элементы.ГруппаСумма.Видимость Тогда
		Элементы.ЗаказыСГруппировкамиСтоимостьПеревозки.Заголовок =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сумма (%1)'"), ТекущаяСтрока.ВалютаНаименование);
	КонецЕсли;
	
	СформироватьНадписьТарифа(ТекущаяСтрока);
	СформироватьТребованияКТСМультизаказа(ТекущаяСтрока);
	СформироватьДополнительныеТребованияМультизаказа(ТекущаяСтрока);
	
	Элементы.ОтправительОткуда.Видимость = ТекущаяСтрока.ЗаборОтАдреса;
	Элементы.ОтправительТерминал.Видимость = Не ТекущаяСтрока.ЗаборОтАдреса;
	Элементы.ПолучательКуда.Видимость = ТекущаяСтрока.ДоставкаДоАдреса;
	Элементы.ПолучательТерминал.Видимость = Не ТекущаяСтрока.ДоставкаДоАдреса;
	Элементы.ГруппаОшибки.Видимость = ТекущаяСтрока.ЕстьОшибка;
	
	Если ТекущаяСтрока.ЭтоМультизаказ Тогда 
		Если ТекущаяСтрока.Оформлен Тогда
			Элементы.ГруппаСписокПраво.ТолькоПросмотр = Истина;
			Элементы.ГруппаВыбораТарифа.Видимость = Ложь;
			Элементы.ГруппаВыбораТребованийКТС.Доступность = Ложь;
			Элементы.ГруппаВыбораДополнительныхТребований.Доступность = Ложь;
			Элементы.КнопкаОткрытьГруппуТарифы.Видимость = Ложь;
			Элементы.ОтправительДобавитьТелефонДополнительный.Видимость = Ложь;
			Элементы.ОтправительУдалитьТелефонДополнительный.Видимость = Ложь;
		Иначе
			Элементы.ГруппаСписокПраво.ТолькоПросмотр = Ложь;
			Элементы.ГруппаВыбораТребованийКТС.Доступность = Истина;
			Элементы.ГруппаВыбораДополнительныхТребований.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ТекущаяСтрокаЗаказовСГруппировками = ИдентификаторСтроки;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьИзменениеТребованийКТС(ТекущиеДанные)

	Мультизаказ = Элементы.ЗаказыСГруппировками.ТекущиеДанные;
	
	Если Мультизаказ = Неопределено 
		ИЛИ Не Мультизаказ.ЭтоМультизаказ 
		ИЛИ Мультизаказ.Нераспределенные Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Использовать Тогда
		СброситьВзаимоисключающие(ТекущиеДанные);
		Элементы.ТребованияКТС.Развернуть(ТекущиеДанные.ПолучитьИдентификатор());
	Иначе
		Элементы.ТребованияКТС.Свернуть(ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
	ОбновитьВыбраннымУслугиВМультизаказе();
	СформироватьВыбранныеТребованияКТС();
	Если ЗначениеЗаполнено(Мультизаказ.ТарифИдентификатор) Тогда
		СброситьТариф(Мультизаказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьИзменениеДополнительныхТребований(ТекущиеДанные)
	
	Если ТекущиеДанные.Использовать Тогда
		СброситьВзаимоисключающие(ТекущиеДанные);
		Элементы.ДополнительныеТребования.Развернуть(ТекущиеДанные.ПолучитьИдентификатор());
	Иначе
		Элементы.ДополнительныеТребования.Свернуть(ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
	ОбновитьДополнительныеТребованияВМультизаказе();
	СформироватьДополнительныеТребования();
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьВзаимоисключающие(ТекущиеДанные)
	
	НайденныеСтроки = НесовместимыеУслуги.НайтиСтроки(Новый Структура("Идентификатор", ТекущиеДанные.Идентификатор));
	
	Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
		СброситьВзаимоисключающее(ТекущиеДанные, ТекущаяСтрока.Идентификатор,
			ТекущаяСтрока.ИдентификаторНесовместимойУслуги);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьВзаимоисключающее(ТекущиеДанные, ИдентификаторНового, ИдентификаторТекущего)
	
	Если ТекущиеДанные.Идентификатор = ИдентификаторНового Тогда
		Родитель = ТекущиеДанные.ПолучитьРодителя();
		СтрокиДерева = Родитель.ПолучитьЭлементы();
		Для Каждого ТекущаяСтрокаДерева Из СтрокиДерева Цикл
			Если ТекущаяСтрокаДерева.Идентификатор = ИдентификаторТекущего Тогда
				ТекущаяСтрокаДерева.Использовать = Ложь;
				Если Не Элементы.ГруппаВыбораТребованийКТС.Скрыта() Тогда
					Элементы.ТребованияКТС.Свернуть(ТекущаяСтрокаДерева.ПолучитьИдентификатор());
				ИначеЕсли Не Элементы.ГруппаВыбораТребованийКТС.Скрыта() Тогда
					Элементы.ДополнительныеТребования.Свернуть(ТекущаяСтрокаДерева.ПолучитьИдентификатор());
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВыбраннымУслугиВМультизаказе()
	
	Мультизаказ = Элементы.ЗаказыСГруппировками.ТекущиеДанные;
	УслугиМультизаказа = Мультизаказ.Услуги;
	УслугиМультизаказа.Очистить();
	
	Если Мультизаказ = Неопределено 
		ИЛИ Не Мультизаказ.ЭтоМультизаказ 
		ИЛИ Мультизаказ.Нераспределенные Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекущаяКатегория Из ТребованияКТС.ПолучитьЭлементы() Цикл
		Для Каждого ТекущаяУслуга Из ТекущаяКатегория.ПолучитьЭлементы() Цикл
			Если ТекущаяУслуга.Использовать Тогда
				НоваяУслуга = УслугиМультизаказа.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяУслуга, ТекущаяУслуга,"Идентификатор, Наименование, Использовать, Обязательная, Категория");
				СтрокиСвойств = ТекущаяУслуга.ПолучитьЭлементы();
				
				Для Каждого ТекущееСвойство Из СтрокиСвойств Цикл
					Если ЗначениеЗаполнено(ТекущееСвойство.Значение) Тогда
						НовоеСвойство = НоваяУслуга.Свойства.Добавить();
						ЗаполнитьЗначенияСвойств(НовоеСвойство, ТекущееСвойство);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

	
&НаКлиенте
Процедура ОбновитьДополнительныеТребованияВМультизаказе()
	
	Мультизаказ = Элементы.ЗаказыСГруппировками.ТекущиеДанные;
	УслугиМультизаказа = Мультизаказ.ДополнительныеТребования;
	УслугиМультизаказа.Очистить();
	
	Если Мультизаказ = Неопределено 
		ИЛИ Не Мультизаказ.ЭтоМультизаказ 
		ИЛИ Мультизаказ.Нераспределенные Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекущаяКатегория Из ДополнительныеТребования.ПолучитьЭлементы() Цикл
		Для Каждого ТекущаяУслуга Из ТекущаяКатегория.ПолучитьЭлементы() Цикл
			НоваяУслуга = УслугиМультизаказа.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяУслуга, ТекущаяУслуга,"Идентификатор, Наименование, Использовать, Обязательная, Категория");
			СтрокиСвойств = ТекущаяУслуга.ПолучитьЭлементы();
			
			Для Каждого ТекущееСвойство Из СтрокиСвойств Цикл
				Если ЗначениеЗаполнено(ТекущееСвойство.Значение) Тогда
					НовоеСвойство = НоваяУслуга.Свойства.Добавить();
					ЗаполнитьЗначенияСвойств(НовоеСвойство, ТекущееСвойство);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсправитьОшибку(ТекущийЗаказ)
	
	Если ТекущийЗаказ.ЕстьОшибка = Истина Тогда
		 
		ТекущийЗаказ.ЕстьОшибка = Ложь;
		ТекущийЗаказ.ОписаниеОшибки = "";
		
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаМультизаказы Тогда
			Если Не ТекущийЗаказ.ЭтоМультизаказ Тогда
				ОбновитьКартинкуИдентификаторУЗаказа(ТекущийЗаказ);
				Мультизаказ = ТекущийЗаказ.ПолучитьРодителя();
			Иначе
				Мультизаказ = ТекущийЗаказ;
			КонецЕсли;
			
			ОбновитьКартинкуИдентификаторУГруппы(Мультизаказ);
			ЗаказыСГруппировкамиПриАктивизацииСтрокиУстановитьВидимостьДоступность(ТекущийЗаказ);
		Иначе
			ОбновитьКартинкуИдентификаторУЗаказа(ТекущийЗаказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
