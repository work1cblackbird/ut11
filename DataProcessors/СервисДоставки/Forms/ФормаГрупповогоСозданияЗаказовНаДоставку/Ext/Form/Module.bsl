
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ОрганизацияБизнесСетиСсылка", Организация);
	Параметры.Свойство("ТипГрузоперевозки", ТипГрузоперевозки);
	
	ЗаполнитьТаблицуДокументов(Параметры.ДокументыОснования);
	
	Если Документы.Количество() = 0 Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	УстановитьОформлениеПоУмолчанию();
	ЗаполнитьФормуПоНастройкамПодсистемы();
	УстановитьОформлениеДатыДоставки();
	УстановитьДоступностьЭлементовПоЗначениюОпции();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПриИзмененииРеквизита("ВариантВремениОтгрузки");
	УстановитьОформлениеПрогресса();
	ПолучитьСостояниеОпцияКурьерика();
	ПолучитьСостоянияЗаказовНаДоставку();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СервисДоставки_ЗаказНаДоставкуОтменен" Тогда
		ПоискСтроки = Документы.НайтиСтроки(Новый Структура("ИдентификаторЗаказа", Источник));
		Если ПоискСтроки.Количество() > 0 Тогда
			Строка = ПоискСтроки[0];
			Строка.Состояние = 6;
			Строка.Информация = СформироватьСостояние(НСтр("ru = 'Отменен заказчиком'"));
			Строка.ИнформацияПолная = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВариантВремениОтгрузкиПриИзменении(Элемент)
	
	ПриИзмененииРеквизита("ВариантВремениОтгрузки");
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаДоставкиПриИзменении(Элемент)
	
	ПриИзмененииРеквизита("ДатаДоставки");
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяДоставкиСПриИзменении(Элемент)
	
	ПроверитьИнтервалДоставки();
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяДоставкиПоПриИзменении(Элемент)
	
	ПроверитьИнтервалДоставки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеОпцииНажатие(Элемент)
	
	ПолучитьСостояниеОпцияКурьерика();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПрогрессОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	УстановитьОформлениеПрогресса( , Истина);
	
	Если ФоновоеЗаданиеСоздатьИзменитьОтправитьЗаказыНаДоставку <> Неопределено Тогда
		ИдентификаторЗадания = ФоновоеЗаданиеСоздатьИзменитьОтправитьЗаказыНаДоставку.ИдентификаторЗадания;
	Иначе
		Возврат;
	КонецЕсли;

	ОтменитьВыполнениеЗадания(ИдентификаторЗадания);

КонецПроцедуры

&НаКлиенте
Процедура ДокументыИнформацияПолнаяОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ПустаяСтрока(Элемент.ТекстРедактирования) Тогда
		ПоказатьПредупреждение( , Элемент.ТекстРедактирования);
	КонецЕсли;
	
	ТекущийЭлемент = Элементы.Документы;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыПриИзменении(Элемент)
	
	УстановитьОформлениеПрогресса( , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыПередУдалением(Элемент, Отказ)
	
	Отказ = ВыполняетсяДлительнаяОперация();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументы

&НаКлиенте
Процедура ДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Значение = ТекущиеДанные[СтрЗаменить(Элементы[Элемент.Имя].ТекущийЭлемент.Имя, Элемент.ТекущийЭлемент.Родитель.Имя,"")];
	Если ЗначениеЗаполнено(Значение) Тогда
		Если Поле = Элементы.ДокументыИнформация И Значение = СтрокаОшибка() Тогда
			ПоказатьПредупреждение( , ТекущиеДанные.ИнформацияПолная);
		ИначеЕсли Поле = Элементы.ДокументыЗаказНаДоставку И Не ПустаяСтрока(ТекущиеДанные.ИдентификаторЗаказа) Тогда
			ОткрытьКарточкуЗаказаНаДоставку(ТекущиеДанные.ИдентификаторЗаказа);
		ИначеЕсли Поле = Элементы.ДокументыДокументОснование Тогда
			ПоказатьЗначение( , Значение);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Асинх Процедура СохранитьКакЧерновики(Команда)

	ОчиститьСообщения();

	Обещание = ВопросАсинх(
		НСтр("ru = 'По документам будут созданы заказы на доставку. Продолжить?'"),
		РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);

	Ответ = Ждать Обещание;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		УстановитьОформлениеПрогресса();
		ПодключитьОбработчикОжидания("Подключаемый_СоздатьИзменитьЗаказыНаДоставку", 0.1, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Асинх Процедура ОтправитьЗаказы(Команда)

	ОчиститьСообщения();

	Обещание = ВопросАсинх(
		НСтр("ru = 'По документам будут созданы и отправлены в сервис заказы на доставку. Продолжить?'"),
		РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);

	Ответ = Ждать Обещание;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		УстановитьОформлениеПрогресса();
		ПодключитьОбработчикОжидания("Подключаемый_СоздатьИзменитьОтправитьЗаказыНаДоставку", 0.1, Истина);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДлительныеОперации

&НаКлиенте
Процедура ВыполнитьЗапрос(ПараметрыОперации, Знач ОчищатьСообщения = Истина)
	
	ИнтернетПоддержкаПодключена = Ложь;
	
	Если ОчищатьСообщения = Истина Тогда
		ОчиститьСообщения();
	КонецЕсли;
	
	ИмяФоновогоЗадания = "ФоновоеЗадание" + ПараметрыОперации.ИмяПроцедуры;
	ФоновоеЗадание = ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ПараметрыОперации);
	ЭтотОбъект[ИмяФоновогоЗадания] = ФоновоеЗадание;
	
	Если ИнтернетПоддержкаПодключена = Ложь Тогда
		
		Оповещение = Новый ОписаниеОповещения("ВыполнитьЗапросПродолжение", ЭтотОбъект, ПараметрыОперации);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(Оповещение, ЭтотОбъект);
		Возврат;
		
	Иначе
		
		ПараметрыОперации.Вставить("ФоновоеЗадание", ФоновоеЗадание);
		ВыполнитьЗапросПродолжение(Истина, ПараметрыОперации);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ПараметрыОперации)
	
	// Проверка подключения Интернет-поддержки пользователей.
	ИнтернетПоддержкаПодключена 
		= ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	Если Не ИнтернетПоддержкаПодключена Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Отказ = Ложь;
	
	ПараметрыЗапроса = ПараметрыЗапроса(ПараметрыОперации, Отказ);
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Отсутствует подключение к Интернет-поддержке пользователей.'"));
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяМетода = ПараметрыОперации.ИмяПроцедуры;
	ПолноеИмяМетода = "СервисДоставки." + ИмяМетода;
	ИмяФоновогоЗадания = "ФоновоеЗадание" + ПараметрыОперации.ИмяПроцедуры;
	ФоновоеЗадание = ЭтотОбъект[ИмяФоновогоЗадания];
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1. %2'"), СервисДоставкиКлиентСервер.ПредставлениеТипаГрузоперевозки(ТипГрузоперевозки),
		ПараметрыОперации.НаименованиеОперации);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОперации,
		"ЗапуститьВФоне", Истина);
	
	Если ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыСоздатьИзменитьОтправитьЗаказыНаДоставку() Тогда
		Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, ПолноеИмяМетода, ПараметрыЗапроса);
	Иначе
		Возврат ДлительныеОперации.ВыполнитьВФоне(ПолноеИмяМетода, ПараметрыЗапроса, ПараметрыВыполнения);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьЗапросПродолжение(Результат, ПараметрыОперации) Экспорт
	
	ИмяФоновогоЗадания = "ФоновоеЗадание"+ ПараметрыОперации.ИмяПроцедуры;
	
	Если Результат = Неопределено Тогда
		УстановитьОформлениеПрогресса( , Истина);
		Возврат;
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("Логин") Тогда
		ИнтернетПоддержкаПодключена = Ложь;
		ЭтотОбъект[ИмяФоновогоЗадания] = ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ПараметрыОперации);
		ПараметрыОперации.Вставить("ФоновоеЗадание", ЭтотОбъект[ИмяФоновогоЗадания]);
	КонецЕсли;
	
	Если ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено Тогда
		УстановитьОформлениеПрогресса( , Истина);
	ИначеЕсли ЭтотОбъект[ИмяФоновогоЗадания].Статус = "Выполняется" Тогда
		ОжидатьЗавершениеВыполненияЗапроса(ПараметрыОперации);
	ИначеЕсли ЭтотОбъект[ИмяФоновогоЗадания].Статус = "Выполнено" Тогда
		ВыполнитьЗапросЗавершение(ЭтотОбъект[ИмяФоновогоЗадания], ПараметрыОперации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьЗавершениеВыполненияЗапроса(ПараметрыОперации)
	
	// Инициализация обработчика ожидания завершения.
	ИмяФоновогоЗадания = "ФоновоеЗадание" + ПараметрыОперации.ИмяПроцедуры;
	ФоновоеЗадание = ЭтотОбъект[ИмяФоновогоЗадания];
	ПараметрыОперации.Вставить("ФоновоеЗадание", ФоновоеЗадание);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ЗаполнитьЗначенияСвойств(ПараметрыОжидания, ПараметрыОперации);
	ПараметрыОжидания.ТекстСообщения = ПараметрыОперации.НаименованиеОперации;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.Вставить("ИдентификаторЗадания", ФоновоеЗадание.ИдентификаторЗадания);
	Если ПараметрыОжидания.ВыводитьПрогрессВыполнения И Не ПараметрыОжидания.ВыводитьОкноОжидания Тогда
		ПараметрыОжидания.ОповещениеОПрогрессеВыполнения = Новый ОписаниеОповещения("ОповещениеОПрогрессеВыполнения",
		ЭтотОбъект)
	КонецЕсли;
	ОбработкаЗавершения = Новый ОписаниеОповещения("ВыполнитьЗапросЗавершение", ЭтотОбъект, ПараметрыОперации);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, ОбработкаЗавершения, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;
	
	ИмяМетода = ДополнительныеПараметры.ИмяПроцедуры;
	ИмяФоновогоЗадания = "ФоновоеЗадание" + ИмяМетода;
	ФоновоеЗадание = ЭтотОбъект[ИмяФоновогоЗадания];
	
	Если Результат = Неопределено Тогда
		Если ДлительнаяОперацияОтменена(ДополнительныеПараметры.ФоновоеЗадание.ИдентификаторЗадания) Тогда
			ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено;
			Если ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьСостояниеОпцииКурьерика()
				Или ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьЗаказыНаДоставку() Тогда
				Модифицированность = Ложь;
				Закрыть();
			Иначе
				УстановитьОформлениеПрогресса( , Истина);
			КонецЕсли;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	СервисДоставкиКлиент.ОбработатьРезультатФоновогоЗадания(Результат, ДополнительныеПараметры, Отказ);
	
	Если Не Отказ И Результат.Статус = "Выполнено" Тогда
		
		Для Каждого Сообщение Из Результат.Сообщения Цикл
			ВывестиСообщениеОбОшибке(Сообщение.Текст);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(Результат.АдресРезультата) И ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда
			
			Если ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьЗаказыНаДоставку()
				И ДополнительныеПараметры.ФоновоеЗадание.ИдентификаторЗадания = ЭтотОбъект[ИмяФоновогоЗадания].ИдентификаторЗадания Тогда
				
				ЗагрузитьРезультатПолученияСостоянийЗаказов(Результат.АдресРезультата);
				ОбработатьОтмененныеЗаказыНаДоставку();
				УстановитьОформлениеПрогресса( , Истина);
			
			ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыСоздатьИзменитьОтправитьЗаказыНаДоставку()
				И ДополнительныеПараметры.ФоновоеЗадание.ИдентификаторЗадания = ЭтотОбъект[ИмяФоновогоЗадания].ИдентификаторЗадания Тогда
				
				ЗагрузитьРезультатСозданияИзмененияОтправленияЗаказов(Результат.АдресРезультата);
				УстановитьОформлениеПрогресса( , Истина);
				Оповестить("ОбновитьСписокЗаказовНаДоставку", ТипГрузоперевозки);
				
			ИначеЕсли ИмяМетода = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьСостояниеОпцииКурьерика() Тогда
				
				ЗагрузитьРезультатПолучитьСостояниеОпцииКурьерика(Результат.АдресРезультата);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОПрогрессеВыполнения(Результат, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ИдентификаторЗадания = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "ИдентификаторЗадания");
		Прогресс = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "Прогресс");
		Если ТипЗнч(Прогресс) = Тип("Структура") Тогда
			Если ИдентификаторЗадания = ФоновоеЗаданиеСоздатьИзменитьОтправитьЗаказыНаДоставку.ИдентификаторЗадания Тогда
				МассивРезультатов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Прогресс, "ДополнительныеПараметры");
				Если ТипЗнч(МассивРезультатов) = Тип("Массив") Тогда
					Для Каждого ДанныеЗаказа Из МассивРезультатов Цикл
						ОбработатьРезультатСоздатьИзменитьОтправитьЗаказыНаДоставку(ДанныеЗаказа);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			Текст = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Прогресс, "Текст", "");
			Если Не ПустаяСтрока(Текст) Тогда
				УстановитьОформлениеПрогресса(Текст);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтменитьВыполнениеЗадания(ИдентификаторЗадания)
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
		ИдентификаторЗадания = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДлительнаяОперацияОтменена(ИдентификаторЗадания)
	
	Возврат ПараметрыСеанса.ДлительныеОперации.Отмененные.Найти(ИдентификаторЗадания) <> Неопределено;
	
КонецФункции

// Выполняется длительная операция.
// 
// Возвращаемое значение:
//  Булево - Выполняется длительная операция
&НаКлиенте
Функция ВыполняетсяДлительнаяОперация()
	
	Возврат Элементы.ГруппаСтраницыДокументы.ТекущаяСтраница <> Элементы.ГруппаСтраницаИтоги;
	
КонецФункции

#КонецОбласти

&НаСервере
Процедура ЗаполнитьТаблицуДокументов(ДокументыОснования)
	
	Для Каждого ДокументОснование Из Параметры.ДокументыОснования Цикл
		Документы.Добавить().ДокументОснование = ДокументОснование.Значение;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ДокументыОснования.ДокументОснование) КАК Идентификатор,
		|	ДокументыОснования.ДокументОснование КАК ДокументОснование
		|ПОМЕСТИТЬ ВТ_Документы
		|ИЗ
		|	&ДокументыОснования КАК ДокументыОснования
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Документы.ДокументОснование КАК ДокументОснование,
		|	ВТ_Документы.Идентификатор КАК Идентификатор,
		|	ДанныеЗаказовСервисДоставки.Идентификатор КАК ИдентификаторЗаказа,
		|	2 КАК Состояние,
		|	ДанныеЗаказовСервисДоставки.Представление КАК ЗаказНаДоставку
		|ИЗ
		|	ВТ_Документы КАК ВТ_Документы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеЗаказовСервисДоставки КАК ДанныеЗаказовСервисДоставки
		|		ПО ДанныеЗаказовСервисДоставки.ТипГрузоперевозки = &ТипГрузоперевозки
		|		И ДанныеЗаказовСервисДоставки.Организация = &Организация
		|		И ВТ_Документы.ДокументОснование = ДанныеЗаказовСервисДоставки.ДокументОснование
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДокументОснование,
		|	ЗаказНаДоставку";
	
	Запрос.УстановитьПараметр("ТипГрузоперевозки", ТипГрузоперевозки);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДокументыОснования", Документы.Выгрузить());
	
	Результат = Запрос.Выполнить().Выгрузить();
	Документы.Загрузить(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиСообщениеОбОшибке(ТекстОшибки, СтрокаТаблицыДокументы = Неопределено)
	
	ТекстОшибки = СтрЗаменить(ТекстОшибки, "Bad Request", ОшибкаСервиса());
	
	Если СтрокаТаблицыДокументы = Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицыДокументы.Состояние = 0; // Ошибка
	СтрокаТаблицыДокументы.Информация = СтрокаОшибка();
	СтрокаТаблицыДокументы.ИнформацияПолная = ТекстОшибки;
	
КонецПроцедуры

// Сформировать состояние.
// 
// Возвращаемое значение:
//  Строка - Состояние
&НаКлиентеНаСервереБезКонтекста
Функция СформироватьСостояние(Состояние)
	Возврат СтрШаблон("%1: %2", НСтр("ru = 'Состояние'"),
		?(ЗначениеЗаполнено(Состояние), Состояние, НСтр("ru = 'Неизвестно'")));
КонецФункции

// Текст ошибка.
// 
// Возвращаемое значение:
//  Строка - Текст ошибка
&НаКлиентеНаСервереБезКонтекста
Функция СтрокаОшибка()
	Возврат НСтр("ru = 'Ошибка'");
КонецФункции

// Текст ошибка сервиса.
// 
// Возвращаемое значение:
//  Строка - Текст ошибка сервиса
&НаКлиентеНаСервереБезКонтекста
Функция ОшибкаСервиса()
	Возврат СервисДоставкиКлиентСервер.ТекстОшибкиВнутренняяОшибкаСервиса();
КонецФункции

&НаСервере
Функция ПараметрыЗапроса(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = Новый Структура();
	
	ИмяПроцедуры = ПараметрыОперации.ИмяПроцедуры;
	Если ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьЗаказыНаДоставку() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаПолучитьСостоянияЗаказовНаДоставку(ПараметрыОперации, Отказ);
	ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыСоздатьИзменитьОтправитьЗаказыНаДоставку() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаСоздатьИзменитьОтправитьЗаказыНаДоставку(ПараметрыОперации, Отказ);
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("ОрганизацияБизнесСетиСсылка", Организация);
	ПараметрыЗапроса.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаПолучитьСостоянияЗаказовНаДоставку(ПараметрыОперации, Отказ)
	
	Результат = СервисДоставки.НовыйПараметрыЗапросаПолучитьЗаказыНаДоставку();
	
	Результат.Состояние.Добавить().Идентификатор = -1; // Все состояния
	
	СписокИдентификаторов = Результат.ИдентификаторыЗаказов;
	Для Каждого Строка Из Документы Цикл
		Если Не ПустаяСтрока(Строка.ИдентификаторЗаказа) Тогда
			СписокИдентификаторов.Добавить(Строка.ИдентификаторЗаказа);
		КонецЕсли;
	КонецЦикла;
	
	Если СписокИдентификаторов.Количество() = 0 Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаСоздатьИзменитьОтправитьЗаказыНаДоставку(ПараметрыОперации, Отказ)
	
	Результат = СервисДоставки.НовыйПараметрыЗапросаЗаписатьИзменитьОтправитьСписокЗаказовНаДоставку();
	
	Результат.Отправка = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОперации, "Отправка", Ложь);
	Результат.ГрупповаяОбработка = Истина;
	Результат.ПараметрыДанныеФормы = ПараметрыДанныеФормы();
	
	СписокЗаказов = Результат.СписокЗаказов;
	
	Для Каждого Строка Из Документы Цикл
		
		Если Строка.Состояние = 3 Или Строка.Состояние = 6 Тогда // Заказ на доставку отправлен или отменен
			Продолжить;
		Иначе
			Строка.Обработано = Ложь;
		КонецЕсли;
		
		ПараметрыЗаказа = СервисДоставки.НовыйПараметрыЗапросаСоздатьИзменитьОтправитьЗаказНаДоставку();
		
		ПараметрыЗаказа.ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
		ПараметрыЗаказа.ИдентификаторЗаказа = Строка.ИдентификаторЗаказа;
		ПараметрыЗаказа.Идентификатор = Строка.ИдентификаторЗаказа;
		ПараметрыЗаказа.ДокументыОснования.Добавить(Строка.ДокументОснование);
		ПараметрыЗаказа.ДокументыОснованияИдентификаторы.Добавить(Строка.Идентификатор);
		
		СписокЗаказов.Добавить(ПараметрыЗаказа);
		
	КонецЦикла;
	
	Если СписокЗаказов.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Обработка документов не требуется.'"));
		Отказ = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПараметрыДанныеФормы()
	
	Структура = Новый Структура;
	
	Структура.Вставить("ФормаОплаты", 1);
	Структура.Вставить("НаложенныйПлатежВидОплаты", 2);
	Структура.Вставить("ВариантВремениОтгрузки", ВариантВремениОтгрузки);
	Структура.Вставить("ДатаДоставки", ДатаДоставки);
	Структура.Вставить("ВремяДоставки", СервисДоставки.НовыйПараметрыВремениОтгрузкиДоставки());
	Структура.ВремяДоставки.С = ВремяДоставкиС;
	Структура.ВремяДоставки.По = ВремяДоставкиПо;
	
	Возврат Структура;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьРезультатПолученияСостоянийЗаказов(АдресРезультата)
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		
		Если ЗначениеЗаполнено(Результат) И ТипЗнч(Результат) = Тип("Структура") Тогда
			
			Список = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "Список", Новый Массив);
			Для Каждого ДанныеЗаказа Из Список Цикл
				ОбработатьРезультатПолученияСостоянияЗаказов(ДанныеЗаказа);
			КонецЦикла;
			
		КонецЕсли;
		
		УдалитьИзВременногоХранилища(АдресРезультата);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатПолучитьСостояниеОпцииКурьерика(АдресРезультата)
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		
		Если ЗначениеЗаполнено(Результат) И ТипЗнч(Результат) = Тип("Структура") Тогда
			
			Если Результат.Свойство("ОпцияДоступна") Тогда
				
				ОпцияДоступнаКурьерика = Результат.ОпцияДоступна;
				КомментарийОпцияКурьерика = Результат.Комментарий;
				БалансОпцияКурьерика = Результат.Баланс;
				СрокДействияОпцияКурьерика = ПрочитатьДатуJSON(Результат.СрокДействия, ФорматДатыJSON.ISO);
				
				СервисДоставкиВызовСервера.УстановитьЗаголовокОпцияКурьерика(ЭтотОбъект);
				УстановитьДоступностьЭлементовПоЗначениюОпции();
				
			КонецЕсли;
			
			Если Результат.Свойство("Ошибки") Тогда

				ТекстОшибки = ОшибкаСервиса();
				Если Результат.Ошибки.Количество() > 0 Тогда
					ТекстОшибки = СтрСоединить(Результат.Ошибки, Символы.ПС);
				КонецЕсли;
				ВывестиСообщениеОбОшибке(ТекстОшибки);
				
			КонецЕсли;
			
		КонецЕсли;
		
		УдалитьИзВременногоХранилища(АдресРезультата);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатСозданияИзмененияОтправленияЗаказов(АдресРезультата)
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		
		Если Результат <> Неопределено Тогда
			
			Если ТипЗнч(Результат) = Тип("Структура") Тогда
				ОбработатьРезультатСоздатьИзменитьОтправитьЗаказыНаДоставку(Результат);
			ИначеЕсли ТипЗнч(Результат) = Тип("Массив") Тогда
				Для Каждого ДанныеЗаказа Из Результат Цикл
					ОбработатьРезультатСоздатьИзменитьОтправитьЗаказыНаДоставку(ДанныеЗаказа);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		УдалитьИзВременногоХранилища(АдресРезультата);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьИнтервалДоставки(Отказ = Ложь)
	
	ТекущаяДата = ОбщегоНазначенияКлиент.ДатаСеанса();
	НачалоТекущегоДня = НачалоДня(ТекущаяДата);
	ТекущееВремя = Дата(1, 1, 1) + (ТекущаяДата - НачалоТекущегоДня);
	НачалоДняДоставки = НачалоДня(ДатаДоставки);

	Если НачалоТекущегоДня = НачалоДняДоставки 
		И ТекущееВремя > ВремяДоставкиС 
		И ВремяДоставкиС <> Дата(1,1,1,0,0,0) Тогда
			
		ОчиститьСообщения();
		
		ТекстОшибки = НСтр("ru = 'Выбранное время доставки не может быть меньше текущего времени.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,, "ВремяДоставкиС",, Отказ);
		
	ИначеЕсли НачалоТекущегоДня = НачалоДняДоставки
		И ВремяДоставкиПо <> Дата(1,1,1,0,0,0)
		И ТекущееВремя > ВремяДоставкиПо Тогда
			
		ОчиститьСообщения();
		
		ТекстОшибки = НСтр("ru = 'Невозможно оформить доставку на указанное время. Время доставки меньше, чем текущее.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,, "ОтправительВремяПлановойОтгрузки",, Отказ);
		
	ИначеЕсли ЗначениеЗаполнено(ВремяДоставкиС)
		И ЗначениеЗаполнено(ВремяДоставкиПо)
		И ВремяДоставкиПо <= ВремяДоставкиС Тогда
		
		ОчиститьСообщения();
		
		ТекстОшибки = НСтр("ru = 'Выбран неверный интервал доставки.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,,,, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииРеквизита(ИмяРеквизита)
	
	Если ИмяРеквизита = "ВариантВремениОтгрузки" Тогда
	
		ДоставитьКакМожноСкорее = ВариантВремениОтгрузки = 0;
		
		Элементы.ДатаДоставки.Доступность = Не ДоставитьКакМожноСкорее;
		Элементы.ВремяДоставкиС.Доступность = Не ДоставитьКакМожноСкорее;
		Элементы.ВремяДоставкиПо.Доступность = Не ДоставитьКакМожноСкорее;
		
		ДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
		Если Час(ДатаСеанса) > 22 Тогда
			ДатаСеанса = НачалоДня(ДатаСеанса + 86400);
		КонецЕсли;
		
		Если ДоставитьКакМожноСкорее Тогда
			ДатаДоставки = ДатаСеанса;
		КонецЕсли;
		
		БлижайшаяДатаНачала = ДатаСеанса + (15 - Минута(ДатаСеанса) % 15) * 60;
		ВремяДоставкиС = Дата(1, 1, 1) + Час(БлижайшаяДатаНачала) * 3600 + Минута(БлижайшаяДатаНачала) * 60;
		ВремяДоставкиПо = ВремяДоставкиС + 2 * 3600;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФормуПоНастройкамПодсистемы()
	
	НастройкиПодсистемы = СервисДоставки.НастройкиПодсистемыСервисДоставки(ТипГрузоперевозки);
	Если НастройкиПодсистемы.Свойство("ВариантДоставки") Тогда
		
		Если НастройкиПодсистемы.ВариантДоставки = 0 Тогда
			ВариантВремениОтгрузки = 0;
		Иначе
			ВариантВремениОтгрузки = 1;
			ДатаДоставки = НачалоДня(ТекущаяДатаСеанса() + 86400);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеПоУмолчанию()

	Элементы.ОтправитьЗаказы.Видимость = СервисДоставки.ПравоОтправкиЗаказовНаДоставкуПеревозчику();

КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеДатыДоставки()
	
	ЧасыДоставки = Новый Массив;
	
	Для ИндексЧасы = 0 По 23 Цикл
		
		Для ИндексМинуты = 0 По 3 Цикл
			ЧасыДоставки.Добавить(Дата(1, 1, 1, ИндексЧасы, ИндексМинуты * 15, 0));
		КонецЦикла;
		
	КонецЦикла;
	
	Элементы.ВремяДоставкиС.СписокВыбора.ЗагрузитьЗначения(ЧасыДоставки);
	Элементы.ВремяДоставкиС.ВысотаСпискаВыбора = 7;
	Элементы.ВремяДоставкиС.Формат = НСтр("ru = 'ДФ=''""с ""HH:mm''; ДП=''с 00:00'''");
	Элементы.ВремяДоставкиС.ФорматРедактирования = Элементы.ВремяДоставкиС.Формат;
	
	Для Каждого ЭлементСписка Из Элементы.ВремяДоставкиС.СписокВыбора Цикл
		ЭлементСписка.Представление = Формат(ЭлементСписка.Значение, Элементы.ВремяДоставкиС.Формат);
	КонецЦикла;
	
	Элементы.ВремяДоставкиПо.СписокВыбора.ЗагрузитьЗначения(ЧасыДоставки);
	Элементы.ВремяДоставкиПо.ВысотаСпискаВыбора = 7;
	Элементы.ВремяДоставкиПо.Формат = НСтр("ru = 'ДФ=''""до ""HH:mm''; ДП=''до 00:00'''");
	Элементы.ВремяДоставкиПо.ФорматРедактирования = Элементы.ВремяДоставкиПо.Формат;
	
	Для Каждого ЭлементСписка Из Элементы.ВремяДоставкиПо.СписокВыбора Цикл
		ЭлементСписка.Представление = Формат(ЭлементСписка.Значение, Элементы.ВремяДоставкиПо.Формат);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОформлениеПрогресса(Текст = "", ОбработкаЗавершена = Ложь)

	Элементы.ОтправитьЗаказы.Доступность = ОбработкаЗавершена;
	Элементы.СохранитьКакЧерновики.Доступность = ОбработкаЗавершена;
	
	МассивФС = Новый Массив;

	Если ОбработкаЗавершена Тогда
		Всего = Документы.Количество();
		Ошибки = Документы.НайтиСтроки(Новый Структура("Состояние", 0)).Количество();
		Создано = Всего - Документы.НайтиСтроки(Новый Структура("ИдентификаторЗаказа", "")).Количество();
		Отправлено = Документы.НайтиСтроки(Новый Структура("Состояние", 3)).Количество();
		Элементы.ДекорацияДокументы.Заголовок = СтрШаблон(НСтр("ru = 'Документы (%1)'"), Всего);
		Элементы.ДекорацияСоздано.Заголовок = СтрШаблон(НСтр("ru = 'Создано (%1)'"), Создано);
		Элементы.ДекорацияОтправлено.Заголовок = СтрШаблон(НСтр("ru = 'Отправлено (%1)'"), Отправлено);
		Элементы.ДекорацияОшибки.Заголовок = СтрШаблон(НСтр("ru = 'Ошибки (%1)'"), Ошибки);
		Элементы.ГруппаСтраницыДокументы.ТекущаяСтраница = Элементы.ГруппаСтраницаИтоги;
	ИначеЕсли ПустаяСтрока(Текст) Тогда
		Элементы.ДекорацияКартинкаДлительнаяОперация.Видимость = Истина;
		МассивФС.Добавить(НСтр("ru = 'Подготовка документов'"));
		МассивФС.Добавить("...");
		Элементы.ГруппаСтраницыДокументы.ТекущаяСтраница = Элементы.ГруппаСтраницаДлительнаяОперация;
	Иначе
		Элементы.ДекорацияКартинкаДлительнаяОперация.Видимость = Истина;
		МассивФС.Добавить(Текст);
		МассивФС.Добавить("  ");
		МассивФС.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Прервать'"),,,, "Прервать"));
	КонецЕсли;

	Элементы.ДекорацияПрогрессВыполнения.Заголовок = Новый ФорматированнаяСтрока(МассивФС);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПоЗначениюОпции()
	
	Элементы.ГруппаПодпискаНаСервис.Видимость = ОтображатьУведомлениеПоОпцииКурьерика;
	Элементы.ГруппаСтраницы.ТолькоПросмотр = Не ОпцияДоступнаКурьерика;
	Элементы.ОтправитьЗаказы.Доступность = ОпцияДоступнаКурьерика;
	Элементы.СохранитьКакЧерновики.Доступность = ОпцияДоступнаКурьерика;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСостояниеОпцияКурьерика()
	
	ПараметрыОперации = Новый Структура;
	
	ПараметрыОперации.Вставить("ИмяПроцедуры", СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьСостояниеОпцииКурьерика());
	ПараметрыОперации.Вставить("НаименованиеОперации", НСтр("ru = 'Получение информации по подписке.'"));
	ПараметрыОперации.Вставить("ВыводитьОкноОжидания", Истина);
	
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСостоянияЗаказовНаДоставку()
	
	ПараметрыОперации = Новый Структура;
	
	ПараметрыОперации.Вставить("ИмяПроцедуры", СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьЗаказыНаДоставку());
	ПараметрыОперации.Вставить("НаименованиеОперации", НСтр("ru = 'Получение состояний заказов на доставку.'"));
	ПараметрыОперации.Вставить("ВыводитьОкноОжидания", Истина);
	
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СоздатьИзменитьЗаказыНаДоставку()

	СоздатьИзменитьОтправитьЗаказыНаДоставку();

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СоздатьИзменитьОтправитьЗаказыНаДоставку()

	СоздатьИзменитьОтправитьЗаказыНаДоставку(Истина);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьИзменитьОтправитьЗаказыНаДоставку(Отправка = Ложь)
	
	ПриИзмененииРеквизита("ВариантВремениОтгрузки");
	
	ПараметрыОперации = Новый Структура;
	
	ПараметрыОперации.Вставить("ИмяПроцедуры", СервисДоставкиКлиентСервер.ИмяПроцедурыСоздатьИзменитьОтправитьЗаказыНаДоставку());
	ПараметрыОперации.Вставить("НаименованиеОперации", НСтр("ru = 'Создание и отправка заказов на доставку.'"));
	ПараметрыОперации.Вставить("ВыводитьОкноОжидания", Ложь);
	ПараметрыОперации.Вставить("Отправка", Отправка);
	ПараметрыОперации.Вставить("ЗакрытьПослеЗавершенияОперации", Ложь);
	ПараметрыОперации.Вставить("ВыводитьПрогрессВыполнения", Истина);
	ПараметрыОперации.Вставить("Интервал", 1);
	
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатПолученияСостоянияЗаказов(ДанныеЗаказа)

	СтрокаТаблицыДокументы = Неопределено;

	Если ДанныеЗаказа.Свойство("Идентификатор") И Не ПУстаяСтрока(ДанныеЗаказа.Идентификатор) Тогда
		ПоискСтроки = Документы.НайтиСтроки(Новый Структура("ИдентификаторЗаказа", ДанныеЗаказа.Идентификатор));
		Если ПоискСтроки.Количество() > 0 Тогда
			СтрокаТаблицыДокументы = ПоискСтроки[0];
		КонецЕсли;
	КонецЕсли;

	Если ДанныеЗаказа.Свойство("Ошибки") Тогда

		ТекстОшибки = ОшибкаСервиса();
		Если ДанныеЗаказа.Ошибки.Количество() > 0 Тогда
			ТекстОшибки = СтрСоединить(ДанныеЗаказа.Ошибки, Символы.ПС);
		КонецЕсли;
		ВывестиСообщениеОбОшибке(ТекстОшибки, СтрокаТаблицыДокументы);

	ИначеЕсли СтрокаТаблицыДокументы <> Неопределено Тогда

			Если ДанныеЗаказа.СостояниеИдентификатор = 0 Тогда
				Состояние = 1; // Заказ на доставку создан
			ИначеЕсли ДанныеЗаказа.СостояниеИдентификатор = 18 Тогда
				Состояние = 6; // Заказ на доставку отменен
			Иначе
				Состояние = 3; // Заказ на доставку отправлен
			КонецЕсли;

			СтрокаТаблицыДокументы.Состояние = Состояние;
			СтрокаТаблицыДокументы.Информация = СформироватьСостояние(ДанныеЗаказа.Состояние);

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработатьОтмененныеЗаказыНаДоставку()
	
	Для Каждого Строка Из Документы Цикл

		Если Строка.Состояние = 6 Тогда
			ПоискПоОснованию = Документы.НайтиСтроки(Новый Структура("Идентификатор", Строка.Идентификатор));
			ЕстьЗаказНадоставку = Ложь;
			Для Каждого СтрокаПоОснованию Из ПоискПоОснованию Цикл
				Если СтрокаПоОснованию.Состояние <> 6 Тогда
					ЕстьЗаказНадоставку = Истина;
				КонецЕсли;
			КонецЦикла;
			Если Не ЕстьЗаказНадоставку Тогда
				ИндексТекущейСтроки = Документы.Индекс(Строка);
				НоваяСтрока = Документы.Вставить(ИндексТекущейСтроки + 1);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, "Идентификатор, ДокументОснование");
				НоваяСтрока.Состояние = 2; // Заказ на доставку не создан
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатСоздатьИзменитьОтправитьЗаказыНаДоставку(ДанныеЗаказа)
	
	СтрокаТаблицыДокументы = Документы.НайтиПоИдентификатору(ДанныеЗаказа.ИдентификаторСтроки);
	
	Если СтрокаТаблицыДокументы = Неопределено Или СтрокаТаблицыДокументы.Обработано Тогда
		Возврат;
	Иначе
		СтрокаТаблицыДокументы.Обработано = Истина;
	КонецЕсли;
	
	Отправка = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЗаказа, "Отправка", Ложь);
	ДокументОснование = СтрокаТаблицыДокументы.ДокументОснование;
	Представление = СтрокаТаблицыДокументы.ЗаказНаДоставку;
	Если ПустаяСтрока(Представление) И ДанныеЗаказа.Свойство("НомерЗаказа") Тогда
		Представление = СервисДоставкиКлиентСервер.ПредставлениеЗаказаНаДоставку(ДанныеЗаказа, Истина);
		СтрокаТаблицыДокументы.ЗаказНаДоставку = Представление;
	КонецЕсли;
	
	Идентификатор = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЗаказа, "Идентификатор", "");
	Если Не ПустаяСтрока(Представление) И ПустаяСтрока(СтрокаТаблицыДокументы.ИдентификаторЗаказа)
		И Не ПустаяСтрока(Идентификатор) Тогда
		ПараметрыСозданияДанныхЗаказа = СервисДоставкиКлиентСервер.НовыйПараметрыЗаписиДанныхЗаказаСервисаДоставки();
		ПараметрыСозданияДанныхЗаказа.ТипГрузоперевозки = ТипГрузоперевозки;
		ПараметрыСозданияДанныхЗаказа.Организация = Организация;
		ПараметрыСозданияДанныхЗаказа.ДокументыОснования = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
			ДокументОснование);
		ПараметрыСозданияДанныхЗаказа.Идентификатор = ДанныеЗаказа.Идентификатор;
		ПараметрыСозданияДанныхЗаказа.Представление = Представление;
		РегистрыСведений.ДанныеЗаказовСервисДоставки.СоздатьОбновитьДанныеЗаказа(ПараметрыСозданияДанныхЗаказа);
	КонецЕсли;
	
	СтрокаТаблицыДокументы.ИдентификаторЗаказа = ?(ПустаяСтрока(Идентификатор),
		СтрокаТаблицыДокументы.ИдентификаторЗаказа, Идентификатор);
	
	Если ДанныеЗаказа.Свойство("Ошибки") Тогда
		ТекстОшибки = ОшибкаСервиса();
		Если ДанныеЗаказа.Ошибки.Количество() > 0 Тогда
			ТекстОшибки = СтрСоединить(ДанныеЗаказа.Ошибки, Символы.ПС);
		КонецЕсли;
		ВывестиСообщениеОбОшибке(ТекстОшибки, СтрокаТаблицыДокументы);
	Иначе
		СтрокаТаблицыДокументы.Состояние = ?(Отправка, 3, 1); // 1 - Заказ на доставку создан, 3 - Заказ на доставку отправлен
		СтрокаТаблицыДокументы.Информация = СформироватьСостояние(ДанныеЗаказа.Состояние);
		СтрокаТаблицыДокументы.ИнформацияПолная = "";
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуЗаказаНаДоставку(ИдентификаторЗаказа)
	
	Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ИдентификаторЗаказа) Тогда
		
		ПараметрыОткрытия = Новый Структура();
		ПараметрыОткрытия.Вставить("ОрганизацияБизнесСетиСсылка", Организация);
		ПараметрыОткрытия.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
		ПараметрыОткрытия.Вставить("ИдентификаторЗаказа", ИдентификаторЗаказа);
		ПараметрыОткрытия.Вставить("РежимМастера", СервисДоставкиКлиентСервер.РежимМастераЧерновик());
		
		Если ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СКурьерика() Тогда
			ИмяФормыКарточкиЗаказа = "КарточкаЗаказаКурьерика";
		Иначе
			ИмяФормыКарточкиЗаказа = "КарточкаЗаказа";
		КонецЕсли;
		
		ОткрытьФорму(СтрШаблон("Обработка.СервисДоставки.Форма.%1", ИмяФормыКарточкиЗаказа), ПараметрыОткрытия,
			ЭтотОбъект, ИдентификаторЗаказа);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
