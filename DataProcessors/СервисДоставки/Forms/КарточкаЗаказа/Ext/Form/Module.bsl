#Область ОписаниеПеременных

&НаКлиенте
Перем ВариантыВремениОтгрузки; //см. СервисДоставкиПовтИсп.ВариантыВремениОтгрузки

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не СервисДоставки.ПравоРаботыССервисомДоставки(Истина) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.Свойство("ТипГрузоперевозки", ТипГрузоперевозки);
	
	Если НЕ ЗначениеЗаполнено(ТипГрузоперевозки) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не выбран тип грузоперевозки'"));
		Отказ = Истина;
		Возврат;
	ИначеЕсли НЕ СервисДоставки.ТипГрузоперевозкиДоступен(ТипГрузоперевозки) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Выбранный тип грузоперевозки не доступен'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ДоступнаОтправкаЗаказовНаДоставку = СервисДоставки.ПравоОтправкиЗаказовНаДоставкуПеревозчику();
	
	УстановитьУсловноеОформление();
	
	Параметры.Свойство("РежимМастера", РежимМастера);
	Параметры.Свойство("ИдентификаторЗаказа", ИдентификаторЗаказа);
	Параметры.Свойство("ДокументыОснования", ДокументыОснования);
	Параметры.Свойство("ДокументОснованиеДляДобавления", ДокументОснованиеДляДобавления);
	Параметры.Свойство("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	
	Если ЗначениеЗаполнено(РежимМастера) И Не ЗначениеЗаполнено(ИдентификаторЗаказа) Тогда
		ТекстСообщения = НСтр("ru = 'Идентификатор заказа не указан. Работа с заказом на доставку невозможна.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ОрганизацияБизнесСетиСсылка);
		Возврат;
	КонецЕсли;
	
	НастройкиДоступныхДействий = ПолучитьВсеДоступныеДействия();
	ЗаполнитьСпискиВыбора();
	
	Если РежимМастера = СервисДоставкиКлиентСервер.РежимМастераНовый() Тогда
		
		Если Параметры.Свойство("ПараметрыЗаказа") Тогда
			ПараметрыЗаказа = Параметры.ПараметрыЗаказа;
			ПараметрыЗаказа.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
		ИначеЕсли ДокументыОснования.Количество() Тогда
			ПараметрыЗаказа = ПараметрыЗаказаНаДоставкуПоДокументамОснованиям(ТипГрузоперевозки, ДокументыОснования);
		Иначе
			ПараметрыЗаказа = ПараметрыЗаказаНаДоставкуПоУмолчанию(ТипГрузоперевозки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОрганизацияБизнесСетиСсылка) Тогда
			ПараметрыЗаказа.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
		КонецЕсли;
		
		ОбработатьПараметры(ПараметрыЗаказа);
		
		Если ЗначениеЗаполнено(ДатаОтгрузки)
			И ДатаОтгрузки < НачалоДня(ТекущаяДатаСеанса()) Тогда
			ДатаОтгрузки = НачалоДня(ТекущаяДатаСеанса());
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДатаДоставки)
			И ДатаДоставки < НачалоДня(ТекущаяДатаСеанса()) Тогда
			ДатаДоставки = НачалоДня(ТекущаяДатаСеанса());
		КонецЕсли;
		
		Если ПараметрыЗаказа.Свойство("ТоварныйСостав") Тогда
			Для Каждого ТекСтрока Из ПараметрыЗаказа.ТоварныйСостав Цикл
				НоваяСтрока = ТоварныйСостав.Добавить();
				Если НоваяСтрока.СтавкаНДСПредставление = "" Тогда
					НоваяСтрока.СтавкаНДСПредставление = НоваяСтрока.СтавкаНДС;
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			КонецЦикла;
		КонецЕсли;
		
		КлючИдемпотентности = Новый УникальныйИдентификатор();
		
	КонецЕсли;
	
	СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ОрганизацияБизнесСетиСсылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьЗначенияПоУмолчанию();
	
	ЗапущеноФоновоеСОжиданием = Ложь;
	
	Если РежимМастера = СервисДоставкиКлиентСервер.РежимМастераНовый() Тогда
		ФоновоеЗаданиеПолучитьУслугиТарифов = ПолучитьУслугиТарифовВФоне();
	КонецЕсли;
	
	Если РежимМастера = СервисДоставкиКлиентСервер.РежимМастераНовый()
		ИЛИ РежимМастера = СервисДоставкиКлиентСервер.РежимМастераЧерновик() Тогда
		
		ТарифыУстановитьРежимСортировки(ТарифыРежимСортировки);
		
		ФоновоеЗаданиеПолучитьГрузоперевозчиков = ПолучитьГрузоперевозчиковВФоне();
		
	КонецЕсли;
	
	Если РежимМастера <> СервисДоставкиКлиентСервер.РежимМастераНовый() Тогда
		
		ФоновоеЗаданиеПолучитьЗаказНаДоставку = ПолучитьЗаказНаДоставкуВФоне();
		ЗапущеноФоновоеСОжиданием = Истина;
		
	КонецЕсли;
	
	ПереключательРасшифровки = ?(ГрузКоличествоГрузовыхМест = 1, 0, 1);
	СформироватьПредставлениеДокументаОснования();
	УстановитьВидимостьДоступность();
	СформироватьЗаголовокФормы();
	Если НЕ ЗапущеноФоновоеСОжиданием Тогда
		СформироватьСтрокуПредставлениеСостоянияЗаказаФормы();
	КонецЕсли;
	
	ОформитьЭлементыУправления();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ВариантыВремениОтгрузки = СервисДоставкиКлиентСервер.ВариантыВремениОтгрузки();
	
	ЗаполнитьЗаголовок();
	УстановитьВидимостьДоступностьНаСтраницеОсновная();
	УстановитьВидимостьДоступностьНаСтраницеПараметровГруза();
	УстановитьВидимостьДоступностьНаСтраницеПараметрыТарифа();
	УстановитьВидимостьДоступностьНаСтраницеКарточки();
	УстановитьВидимостьДоступностьНаСтраницеТарифы();
	УстановитьКомандыПересчетаПараметровГруза();
	
	ОбновитьФормуДляДокументаОснования();
	СформироватьПредставлениеТарифаИГрузоперевозчика();
	
	Если ЗначениеЗаполнено(ФоновоеЗаданиеПолучитьУслугиТарифов) Тогда
		ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
		ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьУслугиТарифов();
		ПараметрыОперации.НаименованиеОперации = НСтр("ru = 'Получение услуг тарифов.'");
		ПараметрыОперации.ВыводитьОкноОжидания = Истина;
		
		ОжидатьЗавершениеВыполненияЗапроса(ПараметрыОперации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФоновоеЗаданиеПолучитьЗаказНаДоставку) Тогда
		ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
		ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьЗаказНаДоставку();
		ПараметрыОперации.НаименованиеОперации = НСтр("ru = 'Получение данных по заказу на доставку.'");
		ПараметрыОперации.ВыводитьОкноОжидания = Истина;
		
		ОжидатьЗавершениеВыполненияЗапроса(ПараметрыОперации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФоновоеЗаданиеПолучитьТипыГрузоперевозки) Тогда
		ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
		ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьТипыГрузоперевозки();
		ПараметрыОперации.НаименованиеОперации = НСтр("ru = 'Получение типов грузоперевозки.'");
		ПараметрыОперации.ВыводитьОкноОжидания = Истина;
		
		ОжидатьЗавершениеВыполненияЗапроса(ПараметрыОперации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФоновоеЗаданиеПолучитьГрузоперевозчиков) Тогда
		
		ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
		ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьГрузоперевозчиков();
		ПараметрыОперации.НаименованиеОперации = НСтр("ru = 'Получение списка грузоперевозчиков.'");
		ПараметрыОперации.ВыводитьОкноОжидания = Истина;
		
		ОжидатьЗавершениеВыполненияЗапроса(ПараметрыОперации);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФоновоеЗаданиеПолучитьДоступныеДляИзмененияРеквизиты) Тогда
		ПараметрыОперации = ПараметрыОперацииПолучитьДоступныеДляИзмененияРеквизиты();
		ОжидатьЗавершениеВыполненияЗапроса(ПараметрыОперации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект),
			НСтр("ru = 'Данные были изменены. Сохранить изменения?'"),
			РежимДиалогаВопрос.ДаНетОтмена);
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		СоздатьИзменитьЗаказНаДоставку(,Истина);
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область СтраницаОсновное

&НаКлиенте
Процедура МультизаказПредставлениеНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ОткрытьФормуМультизаказа();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПредставлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, 
	СтандартнаяОбработка)

	РежимИзмененияСоставаОснований = 0;
	Если НавигационнаяСсылка = "ДобавитьДокументыОснования" Тогда
		СтандартнаяОбработка = Ложь;
		РежимИзмененияСоставаОснований = 1;
		ОткрытьФормуВыбораДокументаОснования();
	ИначеЕсли НавигационнаяСсылка = "ИзменитьДокументыОснования" Тогда
		РежимИзмененияСоставаОснований = 2;
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуВыбораДокументаОснования();
	ИначеЕсли НавигационнаяСсылка = "ОчиститьДокументыОснования" Тогда
		СтандартнаяОбработка = Ложь;
		ДокументыОснования.Очистить();
		НаложенныйПлатежВидОплаты = 0;
		СформироватьПредставлениеДокументаОснования();
		УстановитьВидимостьДоступностьНаложенныйПлатеж();
		Модифицированность = Истина;
	ИначеЕсли НавигационнаяСсылка = "ОткрытьФормуОснования" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуОснования();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ОтправительКонтрагентЭтоОрганизация Тогда
		ОткрытьФормуВыбора("ОрганизацияСервисДоставки", Элемент.Имя + "Ссылка");
	Иначе
		ОткрытьФормуВыбора("КонтрагентСервисДоставки", Элемент.Имя + "Ссылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлательщикКонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	
	Если ПлательщикКонтрагентЭтоОрганизация Тогда
		ОткрытьФормуВыбора("ОрганизацияСервисДоставки", Элемент.Имя + "Ссылка");
	Иначе
		ОткрытьФормуВыбора("КонтрагентСервисДоставки", Элемент.Имя + "Ссылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ПолучательКонтрагентЭтоОрганизация Тогда
		ОткрытьФормуВыбора("ОрганизацияСервисДоставки", Элемент.Имя + "Ссылка");
	Иначе
		ОткрытьФормуВыбора("КонтрагентСервисДоставки", Элемент.Имя + "Ссылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение = 1 Тогда
		ОткрытьФормуВыбора("ОрганизацияСервисДоставки", Элемент.Имя + "Ссылка");
	ИначеЕсли ВыбранноеЗначение = 2 Тогда
		ОткрытьФормуВыбора("КонтрагентСервисДоставки", Элемент.Имя + "Ссылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлательщикКонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение = 1 Тогда
		ОткрытьФормуВыбора("ОрганизацияСервисДоставки", Элемент.Имя + "Ссылка");
	ИначеЕсли ВыбранноеЗначение = 2 Тогда
		ОткрытьФормуВыбора("КонтрагентСервисДоставки", Элемент.Имя + "Ссылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение = 1 Тогда
		ОткрытьФормуВыбора("ОрганизацияСервисДоставки", Элемент.Имя + "Ссылка");
	ИначеЕсли ВыбранноеЗначение = 2 Тогда
		ОткрытьФормуВыбора("КонтрагентСервисДоставки", Элемент.Имя + "Ссылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	КонтрагентОткрытие(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлательщикКонтрагентОткрытие(Элемент, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	
	КонтрагентОткрытие(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	КонтрагентОткрытие(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительОчистка(Элемент, СтандартнаяОбработка)
	
	ОчиститьРеквизит(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлательщикКонтрагентОчистка(Элемент, СтандартнаяОбработка)
	
	ОчиститьРеквизит(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательОчистка(Элемент, СтандартнаяОбработка)
	
	ОчиститьРеквизит(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительКонтактноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОтбора = Новый Структура(); 
	
	Если ОтправительКонтрагентЭтоОрганизация Тогда
		ЗаполнитьПараметрыОтбораКонтактногоЛицаОрганизации(ПараметрыОтбора, ОтправительКонтрагентСсылка);
		ОткрытьФормуВыбора("КонтактноеЛицоОрганизацииСервисДоставки", Элемент.Имя + "Ссылка", ПараметрыОтбора);
	Иначе
		ЗаполнитьПараметрыОтбораКонтактногоЛицаКонтрагента(ПараметрыОтбора, ОтправительКонтрагентСсылка);
		ОткрытьФормуВыбора("КонтактноеЛицоКонтрагентаСервисДоставки", Элемент.Имя + "Ссылка", ПараметрыОтбора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлательщикКонтактноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	ПараметрыОтбора = Новый Структура(); 
	
	Если ПлательщикКонтрагентЭтоОрганизация Тогда
		ЗаполнитьПараметрыОтбораКонтактногоЛицаОрганизации(ПараметрыОтбора, ПлательщикКонтрагентСсылка);
		ОткрытьФормуВыбора("КонтактноеЛицоОрганизацииСервисДоставки", Элемент.Имя + "Ссылка", ПараметрыОтбора);
	Иначе
		ЗаполнитьПараметрыОтбораКонтактногоЛицаКонтрагента(ПараметрыОтбора, ПлательщикКонтрагентСсылка);
		ОткрытьФормуВыбора("КонтактноеЛицоКонтрагентаСервисДоставки", Элемент.Имя + "Ссылка", ПараметрыОтбора);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолучательКонтактноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОтбора = Новый Структура(); 
	
	Если ПолучательКонтрагентЭтоОрганизация Тогда
		ЗаполнитьПараметрыОтбораКонтактногоЛицаОрганизации(ПараметрыОтбора, ПолучательКонтрагентСсылка);
		ОткрытьФормуВыбора("КонтактноеЛицоОрганизацииСервисДоставки", Элемент.Имя + "Ссылка", ПараметрыОтбора);
	Иначе
		ЗаполнитьПараметрыОтбораКонтактногоЛицаКонтрагента(ПараметрыОтбора, ПолучательКонтрагентСсылка);
		ОткрытьФормуВыбора("КонтактноеЛицоКонтрагентаСервисДоставки", Элемент.Имя + "Ссылка", ПараметрыОтбора);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПараметрыОтбораКонтактногоЛицаКонтрагента(ПараметрыОтбора, КонтрагентСсылка)
	СервисДоставкиПереопределяемый.ЗаполнитьПараметрыОтбораКонтактногоЛицаКонтрагента(ПараметрыОтбора,
		КонтрагентСсылка);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПараметрыОтбораКонтактногоЛицаОрганизации(ПараметрыОтбора, КонтрагентСсылка)
	СервисДоставкиПереопределяемый.ЗаполнитьПараметрыОтбораКонтактногоЛицаОрганизации(ПараметрыОтбора,
		КонтрагентСсылка);
КонецПроцедуры

&НаКлиенте
Процедура ОтправительКонтактноеЛицоОчистка(Элемент, СтандартнаяОбработка)
	
	ОчиститьРеквизит(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлательщикКонтактноеЛицоОчистка(Элемент, СтандартнаяОбработка)
		
	ОчиститьРеквизит(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры


&НаКлиенте
Процедура ПолучательКонтактноеЛицоОчистка(Элемент, СтандартнаяОбработка)
	
	ОчиститьРеквизит(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры   

&НаКлиенте
Процедура ОтправительДатаПлановойОтгрузкиПриИзменении(Элемент)
		
	ОчиститьСообщения();
	
	УстановитьДатуОтгрузки(ДатаОтгрузки);
	
	Если ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СДоставка() Тогда
		ЕстьОшибки = Ложь;
		ПроверитьВремяОтгрузки(ЕстьОшибки, Истина);
	КонецЕсли;
	
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

 &НаКлиенте
 Процедура НаложенныйПлатежВидОплатыПриИзменении(Элемент)
 	
 	УстановитьВидимостьДоступностьНаложенныйПлатеж()
 	
 КонецПроцедуры

&НаКлиенте
Процедура ВремяОтгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбораВремениИДаты(1, Элемент.ТолькоПросмотр);
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяДоставкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбораВремениИДаты(2, Элемент.ТолькоПросмотр);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительКонтактноеЛицоТелефонПриИзменении(Элемент)
	
	ОбработатьИзменениеКонтактнойИнформации(Элемент, "Телефон");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительКонтактноеЛицоТелефонОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТелефонНачалоВыбора(Элемент, ОтправительКонтрагентЭтоОрганизация);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительКонтактноеЛицоТелефонОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = "ПроизвольныйТелефон" Тогда
		
		СтандартнаяОбработка = Ложь;
		ТелефонНачалоВыбора(Элемент, ОтправительКонтрагентЭтоОрганизация);
		
	Иначе
		
		СтандартнаяОбработка = Ложь;
		
		ПоискЗначения = Элементы.ОтправительКонтактноеЛицоТелефон.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
		Если ПоискЗначения <> Неопределено Тогда
			
			ОтправительКонтактноеЛицоТелефонЗначение = ПоискЗначения.Значение;
			ОтправительКонтактноеЛицоТелефонПредставление = ПредставлениеКонтактнойИнформации(ПоискЗначения.Значение);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительКонтактноеЛицоТелефонДополнительныйПриИзменении(Элемент)
	
	ОбработатьИзменениеКонтактнойИнформации(Элемент, "Телефон");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительКонтактноеЛицоТелефонДополнительныйОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТелефонНачалоВыбора(Элемент, ОтправительКонтрагентЭтоОрганизация);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительКонтактноеЛицоТелефонДополнительныйОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = "ПроизвольныйТелефон" Тогда
		
		СтандартнаяОбработка = Ложь;
		ТелефонНачалоВыбора(Элемент, ОтправительКонтрагентЭтоОрганизация);
		
	Иначе
		
		СтандартнаяОбработка = Ложь;
		
		ПоискЗначения = Элементы.ОтправительКонтактноеЛицоТелефонДополнительный.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
		Если ПоискЗначения <> Неопределено Тогда
			
			ОтправительКонтактноеЛицоТелефонДополнительныйЗначение = ПоискЗначения.Значение;
			ОтправительКонтактноеЛицоТелефонДополнительныйПредставление = ПредставлениеКонтактнойИнформации(ПоискЗначения.Значение);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательКонтактноеЛицоТелефонПриИзменении(Элемент)
	
	ОбработатьИзменениеКонтактнойИнформации(Элемент, "Телефон");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательКонтактноеЛицоТелефонОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТелефонНачалоВыбора(Элемент, ПолучательКонтрагентЭтоОрганизация);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательКонтактноеЛицоТелефонОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = "ПроизвольныйТелефон" Тогда
		
		СтандартнаяОбработка = Ложь;
		ТелефонНачалоВыбора(Элемент, ПолучательКонтрагентЭтоОрганизация);
		
	Иначе
		
		СтандартнаяОбработка = Ложь;
		
		ПоискЗначения = Элементы.ПолучательКонтактноеЛицоТелефон.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
		Если ПоискЗначения <> Неопределено Тогда
			
			ПолучательКонтактноеЛицоТелефонЗначение = ПоискЗначения.Значение;
			ПолучательКонтактноеЛицоТелефонПредставление = ПредставлениеКонтактнойИнформации(ПоискЗначения.Значение);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолучательКонтактноеЛицоТелефонДополнительныйПриИзменении(Элемент)
	
	ОбработатьИзменениеКонтактнойИнформации(Элемент, "Телефон");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательКонтактноеЛицоТелефонДополнительныйОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТелефонНачалоВыбора(Элемент, ПолучательКонтрагентЭтоОрганизация);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательКонтактноеЛицоТелефонДополнительныйОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = "ПроизвольныйТелефон" Тогда
		
		СтандартнаяОбработка = Ложь;
		ТелефонНачалоВыбора(Элемент, ПолучательКонтрагентЭтоОрганизация);
		
	Иначе
		
		СтандартнаяОбработка = Ложь;
		
		ПоискЗначения = Элементы.ПолучательКонтактноеЛицоТелефонДополнительный.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
		Если ПоискЗначения <> Неопределено Тогда
			
			ПолучательКонтактноеЛицоТелефонДополнительныйЗначение = ПоискЗначения.Значение;
			ПолучательКонтактноеЛицоТелефонДополнительныйПредставление = ПредставлениеКонтактнойИнформации(ПоискЗначения.Значение);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательКонтактноеЛицоEmailПриИзменении(Элемент)
	
	Модифицированность = Истина;
	Отказ = Ложь;
	ПроверитьПредставлениеКонтактнойИнформации(Элемент.Имя, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлательщикКонтактноеЛицоТелефонПриИзменении(Элемент)
		
	ОбработатьИзменениеКонтактнойИнформации(Элемент, "Телефон");

КонецПроцедуры

&НаКлиенте
Процедура ПлательщикКонтактноеЛицоТелефонОткрытие(Элемент, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	ТелефонНачалоВыбора(Элемент, ПлательщикКонтрагентЭтоОрганизация);

КонецПроцедуры

&НаКлиенте
Процедура ПлательщикКонтактноеЛицоТелефонОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = "ПроизвольныйТелефон" Тогда
		
		СтандартнаяОбработка = Ложь;
		ТелефонНачалоВыбора(Элемент, ПлательщикКонтрагентЭтоОрганизация);
		
	Иначе
		
		СтандартнаяОбработка = Ложь;
		
		ПоискЗначения = Элементы.ПлательщикКонтактноеЛицоТелефон.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
		Если ПоискЗначения <> Неопределено Тогда
			
			ПлательщикКонтактноеЛицоТелефонЗначение = ПоискЗначения.Значение;
			ПлательщикКонтактноеЛицоТелефонПредставление = ПредставлениеКонтактнойИнформации(ПоискЗначения.Значение);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлательщикКонтактноеЛицоТелефонДополнительныйПриИзменении(Элемент)
	
	ОбработатьИзменениеКонтактнойИнформации(Элемент, "Телефон");
	
КонецПроцедуры

&НаКлиенте
Процедура ПлательщикКонтактноеЛицоТелефонДополнительныйОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТелефонНачалоВыбора(Элемент, ПлательщикКонтрагентЭтоОрганизация);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлательщикКонтактноеЛицоТелефонДополнительныйОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если ВыбранноеЗначение = "ПроизвольныйТелефон" Тогда
		
		СтандартнаяОбработка = Ложь;
		ТелефонНачалоВыбора(Элемент, ПлательщикКонтрагентЭтоОрганизация);
		
	Иначе
		
		СтандартнаяОбработка = Ложь;
		
		ПоискЗначения = Элементы.ПлательщикКонтактноеЛицоТелефонДополнительный.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
		Если ПоискЗначения <> Неопределено Тогда
			
			ПлательщикКонтактноеЛицоТелефонДополнительныйЗначение = ПоискЗначения.Значение;
			ПлательщикКонтактноеЛицоТелефонДополнительныйПредставление = ПредставлениеКонтактнойИнформации(ПоискЗначения.Значение);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПолучательКонтрагентНажатие(Элемент)
	
	ОчиститьСообщения();
	
	Отказ = Ложь;
	ОбработатьИзменениеРеквизитаФормыНаСервере("ПолучательКонтрагентСсылка", Отказ);
	ЗаполнитьПолучателяПоОтправителю();
	УстановитьВидимостьОнЖе();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПолучателяПоОтправителю()
	
	ПараметрыУчастника = СервисДоставки.НовыйПараметрыУчастникаГрузоперевозки();
	ПараметрыКонтрагента = ПараметрыУчастника.Контрагент;
	ПараметрыКонтрагента.Ссылка = ОтправительКонтрагентСсылка;
	ПараметрыКонтрагента.ИНН = ОтправительКонтрагентИНН;
	ПараметрыКонтрагента.КПП = ОтправительКонтрагентКПП;
	ПараметрыКонтрагента.Наименование = ОтправительКонтрагентНаименование;
	ПараметрыКонтрагента.ЮрФизЛицо = ОтправительКонтрагентЮрФизЛицо;
	
	ЮридическийАдрес = ПараметрыКонтрагента.ЮридическийАдрес;
	ЮридическийАдрес.Значение = ОтправительКонтрагентЮридическийАдресЗначение;
	ЮридическийАдрес.Представление = ОтправительКонтрагентЮридическийАдресПредставление;
	
	ОбработатьПараметры(ПараметрыУчастника, "Получатель");
	ОтборыИзменение = Истина;
	УстановитьПризнакОрганизаций();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительАдресОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	АдресНачалоВыбора(Элемент, ОтправительКонтрагентЭтоОрганизация);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлательщикАдресОткрытие(Элемент, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	АдресНачалоВыбора(Элемент, ПлательщикКонтрагентЭтоОрганизация);

КонецПроцедуры

&НаКлиенте
Процедура ПолучательАдресОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	АдресНачалоВыбора(Элемент, ПолучательКонтрагентЭтоОрганизация);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ЭтоДеловыеЛинии = ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СДоставка();
	Адресат = ОпределитьАдресата(Элемент.Имя);
	ПредставлениеАдресаДо = ЭтотОбъект[Адресат + "АдресПредставление"];

	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("Адрес") Тогда

		ЭтотОбъект[Адресат + "АдресЗначение"] = ВыбранноеЗначение.Адрес;
		
		Если ЭтоДеловыеЛинии Тогда
			Представление = ПредставлениеАдресаБезМуниципальнойЧасти(ВыбранноеЗначение.Адрес);
			ЭтотОбъект[Адресат + "АдресПредставление"] = ?(ПустаяСтрока(Представление),
				ВыбранноеЗначение.Представление, Представление);
		Иначе
			ЭтотОбъект[Адресат + "АдресПредставление"] = ВыбранноеЗначение.Представление;
		КонецЕсли;

	Иначе

		Если ТипЗнч(ВыбранноеЗначение) = Тип("Число") Тогда
			АдресОбработкаВыбораПродолжение(Элемент, ВыбранноеЗначение);
		Иначе

			ПоискЗначения = Элементы[Адресат + "Адрес"].СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
			Если ПоискЗначения <> Неопределено Тогда

				ЭтотОбъект[Адресат + "АдресЗначение"] = ПоискЗначения.Значение;
				
				Если ЭтоДеловыеЛинии Тогда
					Представление = ПредставлениеАдресаБезМуниципальнойЧасти(ПоискЗначения.Значение);
					ЭтотОбъект[Адресат + "АдресПредставление"] = ?(ПустаяСтрока(Представление),
						ПредставлениеКонтактнойИнформации(ЭтотОбъект[Адресат + "АдресЗначение"]), Представление);
				Иначе
					ЭтотОбъект[Адресат + "АдресПредставление"] = ПредставлениеКонтактнойИнформации(ЭтотОбъект[Адресат
						+ "АдресЗначение"]);
				КонецЕсли;

				КомментарийКАдресу = КомментарийИзКонтактнойИнформации(ЭтотОбъект[Адресат + "АдресЗначение"]);
				Если ЗначениеЗаполнено(КомментарийКАдресу) Тогда
					ЗадатьВопросДобавлениеКомментария(КомментарийКАдресу);
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Если ПредставлениеАдресаДо <> ЭтотОбъект[Адресат + "АдресПредставление"] Тогда
		ЗарегистрироватьИзменениеОтборов(Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура АдресОбработкаВыбораПродолжение(Элемент, ВыбранноеЗначение)
	
	ПараметрыОтбора = Новый Структура(); 
	
	ИмяРеквизита = Элемент.Имя;
	
	Префикс = СтрЗаменить(ИмяРеквизита, "Адрес", "");
	ПоследнийСимвол = Прав(Префикс, 1);
	Префикс = ?(ПоследнийСимвол = "1" Или ПоследнийСимвол = "2", Лев(Префикс, СтрДлина(Префикс) - 1), Префикс);
	
	Если ВыбранноеЗначение = 1 Тогда
		
		ЗаполнитьПараметрыОтбораАдресаОрганизации(ПараметрыОтбора, ЭтотОбъект[Префикс + "КонтрагентСсылка"]);
		ОткрытьФормуВыбора("АдресОрганизацииСервисДоставки", Элемент.Имя + "Владелец", ПараметрыОтбора);
		
	ИначеЕсли ВыбранноеЗначение = 2 Тогда
			
		ЗаполнитьПараметрыОтбораАдресаКонтрагента(ПараметрыОтбора, ЭтотОбъект[Префикс + "КонтрагентСсылка"]);
		ОткрытьФормуВыбора("АдресКонтрагентаСервисДоставки", Элемент.Имя + "Владелец", ПараметрыОтбора);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст)
		И ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
		МодульУправлениеКонтактнойИнформациейКлиент.АвтоПодборАдреса(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПараметрыОтбораАдресаОрганизации(ПараметрыОтбора, ПолучательКонтрагентСсылка)
	СервисДоставкиПереопределяемый.ЗаполнитьПараметрыОтбораАдресаОрганизации(ПараметрыОтбора, ПолучательКонтрагентСсылка);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПараметрыОтбораАдресаКонтрагента(ПараметрыОтбора, ПолучательКонтрагентСсылка)
	СервисДоставкиПереопределяемый.ЗаполнитьПараметрыОтбораАдресаКонтрагента(ПараметрыОтбора, ПолучательКонтрагентСсылка);
КонецПроцедуры

&НаКлиенте
Процедура ВремяОтгрузкиОчистка(Элемент, СтандартнаяОбработка)
	
	ВремяОтгрузкиС = Неопределено;
	ВремяОтгрузкиПо =  Неопределено;
	ВремяОтгрузкиОбедС = Неопределено;
	ВремяОтгрузкиОбедПо = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяДоставкиОчистка(Элемент, СтандартнаяОбработка)
	
	ВремяДоставкиС = Неопределено;
	ВремяДоставкиПо =  Неопределено;
	ВремяДоставкиОбедС = Неопределено;
	ВремяДоставкиОбедПо = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлательщикРольОчистка(Элемент, СтандартнаяОбработка)
	
	ПлательщикРоль = 0;
	ПлательщикРольПредставление = "";
	ПлательщикКонтрагентСсылка = Неопределено;
	ОчиститьРеквизит(Элементы.ПлательщикКонтрагент, Ложь);
	
	УстановитьВидимостьДоступностьНаСтраницеОсновная();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказчикРольОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказчикРольПриИзменении(Элемент)
	
	ОбработатьПрименениеОтборов(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантВремениОтгрузкиПриИзменении(Элемент)
		
	ОбновитьИнформациюПоВремениОтгрузки(ОбщегоНазначенияКлиент.ДатаСеанса());
	ВариантВремениОтгрузкиПриИзмененииНаСервере();
	ЗаполнитьСписокВыбораПериодовОтгрузки(Истина);
	
	ОбработатьПрименениеОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОтгрузкиПриИзменении(Элемент)
	
	УстановитьДатуОтгрузки(ДатаОтгрузки);
	
	ЗаполнитьСписокВыбораПериодовОтгрузки(Истина);
	
	ОбработатьПрименениеОтборов(Ложь, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодОтгрузкиПриИзменении(Элемент)
	
	ИзменитьПериодОтгрузки();
	
	ОбработатьПрименениеОтборов(Ложь, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяОтгрузкиКПриИзменении(Элемент)
	
	ОчиститьСообщения();
	ЕстьОшибки = Ложь;
	ПроверитьВремяОтгрузки(ЕстьОшибки,Истина);
	ОбновитьИнформациюПоВремениОтгрузки();

	ОбработатьПрименениеОтборов(Ложь, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлательщикРольОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗначениеСписка = Элементы.ПлательщикРоль.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	
	ПлательщикРольСтарое = ПлательщикРоль; 
	Если ЗначениеСписка = Неопределено Тогда
		ПлательщикРоль = 0;
		ПлательщикРольПредставление = "";
	Иначе
		ПлательщикРоль = ВыбранноеЗначение;
		Если ПлательщикРольСтарое <> ВыбранноеЗначение Тогда
			ПлательщикКонтрагентСсылка = Неопределено;
			ОчиститьРеквизит(Элементы.ПлательщикКонтрагент, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Если ПлательщикРольСтарое<>ПлательщикРоль Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	УстановитьВидимостьДоступностьНаСтраницеОсновная();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительДобавитьДополнительныйТелефоныНажатие(Элемент)
	
	ОтправительКонтактноеЛицоТелефонДополнительныйДоступен = Истина;
	УстановитьВидимостьДополнительныхТелефонов("Отправитель");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательДобавитьДополнительныйТелефоныНажатие(Элемент)
	
	ПолучательКонтактноеЛицоТелефонДополнительныйДоступен = Истина;
	УстановитьВидимостьДополнительныхТелефонов("Получатель");
	
КонецПроцедуры

&НаКлиенте
Процедура ПлательщикДобавитьДополнительныйТелефоныНажатие(Элемент)
	
	ПлательщикКонтактноеЛицоТелефонДополнительныйДоступен = Истина;
	УстановитьВидимостьДополнительныхТелефонов("Плательщик");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительУдалитьДополнительныйТелефонНажатие(Элемент)
	
	ОтправительКонтактноеЛицоТелефонДополнительныйЗначение = "";
	ОтправительКонтактноеЛицоТелефонДополнительныйПредставление = "";

	ОтправительКонтактноеЛицоТелефонДополнительныйДоступен = Ложь;
	УстановитьВидимостьДополнительныхТелефонов("Отправитель");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцедураПолучательУдалитьДополнительныйТелефонНажатие(Элемент)
	
	ПолучательКонтактноеЛицоТелефонДополнительныйЗначение = "";
	ПолучательКонтактноеЛицоТелефонДополнительныйПредставление = "";
	
	ПолучательКонтактноеЛицоТелефонДополнительныйДоступен = Ложь;
	УстановитьВидимостьДополнительныхТелефонов("Получатель");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцедураПлательщикУдалитьДополнительныйТелефонНажатие(Элемент)
	
	ПлательщикКонтактноеЛицоТелефонДополнительныйЗначение = "";
	ПлательщикКонтактноеЛицоТелефонДополнительныйПредставление = "";
	
	ПлательщикКонтактноеЛицоТелефонДополнительныйДоступен = Ложь;
	УстановитьВидимостьДополнительныхТелефонов("Плательщик");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительАдресОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	АдресОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура ПлательщикАдресОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	АдресОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательАдресОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	АдресОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательАдресАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	АдресАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительАдресАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	АдресАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлательщикАдресАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	АдресАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаПараметрыГруза

&НаКлиенте
Процедура ПереключательРасшифровкиПриИзменении(Элемент)
	
	УстановитьВидимостьДоступностьГруппыВГХ();
	
	ГрузКоличествоГрузовыхМестДо = ГрузКоличествоГрузовыхМест;
	ГрузКоличествоГрузовыхМест = ?(ПереключательРасшифровки = 0, 1, 0);
	
	ГрузОбъемДо = ГрузОбъем;
	РассчитатьОбъем();
	
	РассчитатьВес();
	
	Если ГрузКоличествоГрузовыхМестДо <> ГрузКоличествоГрузовыхМест 
		ИЛИ ГрузОбъемДо <> ГрузОбъем 
		ИЛИ ГрузВес <> ГрузМаксимальныйВес Тогда
		ЗарегистрироватьИзменениеОтборов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузОдноМестоВесПриИзменении(Элемент)
	
	ОчиститьСообщения();
	ГрузМаксимальныйВес = ГрузВес;
	ПроверитьВГХ("ГрузВес");
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаОбъявленнойЦенностиПриИзменении(Элемент)
	
	ОчиститьСообщения();
	ПроверитьВГХ("ГрузСтоимость");
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузОдноМестоКоличествоГрузовыхМестПриИзменении(Элемент)
	
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузКоличествоГрузовыхМестПриИзменении(Элемент)
	
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузОбщийВесПриИзменении(Элемент)
	
	ОчиститьСообщения();
	ПроверитьВГХ("ГрузВес");
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузОбщийОбъемПриИзменении(Элемент)
	
	ОчиститьСообщения();
	ПроверитьВГХ("ГрузОбъем");
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузОдноМестоВысотаПриИзменении(Элемент)
	
	ОчиститьСообщения();
	РассчитатьОбъем();
	ПроверитьВГХ("ГрузМаксимальнаяВысота");
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузОдноМестоШиринаПриИзменении(Элемент)
	
	ОчиститьСообщения();
	РассчитатьОбъем();
	ПроверитьВГХ("ГрузМаксимальнаяШирина");
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузОдноМестоДлинаПриИзменении(Элемент)
	
	ОчиститьСообщения();
	РассчитатьОбъем();
	ПроверитьВГХ("ГрузМаксимальнаяДлина");
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузМаксимальнаяВысотаПриИзменении(Элемент)
	
	ОчиститьСообщения();
	ПроверитьВГХ("ГрузМаксимальнаяВысота");
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузМаксимальнаяШиринаПриИзменении(Элемент)
	
	ОчиститьСообщения();
	ПроверитьВГХ("ГрузМаксимальнаяШирина");
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузМаксимальнаяДлинаПриИзменении(Элемент)
	
	ОчиститьСообщения();
	ПроверитьВГХ("ГрузМаксимальнаяДлина");
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузМаксимальныйВесПриИзменении(Элемент)
	
	ОчиститьСообщения();
	ПроверитьВГХ("ГрузМаксимальныйВес");
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПараметрыГруза(Команда)
	
	ИмяКоманды = Команда.Имя;
	
	Если ИмяКоманды = "ОбновитьПараметрыГруза" Тогда
		МассивРеквизитовДляПересчета = РеквизитыДляПересчета();
		
		Для Каждого ТекРеквизитДляПересчета Из МассивРеквизитовДляПересчета Цикл
			ИмяРеквизита = "Груз" + ТекРеквизитДляПересчета;
			ОбновитьПараметрГруза(ИмяРеквизита)
		КонецЦикла;
		
	Иначе
		
		ИмяРеквизита = СтрЗаменить(ИмяКоманды, "Обновить", "Груз");
		ОбновитьПараметрГруза(ИмяРеквизита);
		
	КонецЕсли;
	
	УстановитьКомандыПересчетаПараметровГруза();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПараметрГруза(ИмяРеквизита)
	
	ЗначениеРеквизитаДляПересчета = ЭтотОбъект[ИмяРеквизита + "ДляПересчета"];
	
	Если ТипЗнч(ЗначениеРеквизитаДляПересчета) = Тип("Число")
		И ЭтотОбъект[ИмяРеквизита] <> ЗначениеРеквизитаДляПересчета 
		И ЗначениеРеквизитаДляПересчета <> 0 Тогда
		ЭтотОбъект[ИмяРеквизита] = ЗначениеРеквизитаДляПересчета;
		Если ГрузКоличествоГрузовыхМест = 1 Тогда
			Если СтрНайти(ИмяРеквизита, "Максимальная") Тогда
				РассчитатьОбъем();
				ЭтотОбъект["ГрузОбъемДляПересчета"] = Неопределено;
			ИначеЕсли ИмяРеквизита = "ГрузВес" Тогда
				ЭтотОбъект["ГрузМаксимальныйВес"] = ЭтотОбъект[ИмяРеквизита];
				ЭтотОбъект["ГрузМаксимальныйВесДляПересчета"] = Неопределено;
			КонецЕсли;
		КонецЕсли;

		ПроверитьВГХ(ИмяРеквизита);
		ЗарегистрироватьИзменениеОтборов();
		
	ИначеЕсли ТипЗнч(ЗначениеРеквизитаДляПересчета) = Тип("Строка")
		И ЗначениеРеквизитаДляПересчета <> "" Тогда
		ЭтотОбъект[ИмяРеквизита] = ЗначениеРеквизитаДляПересчета;
	КонецЕсли;
	
	ЭтотОбъект[ИмяРеквизита + "ДляПересчета"] = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаТарифы

&НаКлиенте
Процедура ТарифыТекущийГрузоперевозчикНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуГрузоперевозчика();
	
КонецПроцедуры

&НаКлиенте
Процедура ТарифыТекущийТарифПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуТарифа();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Нажатие(Элемент)
	
	Если Найти(Элемент.Имя, "ОчиститьОтбор_") Тогда
		
		// Очистка отбора.
		ИмяРеквизита = Сред(Элемент.Имя, СтрНайти(Элемент.Имя, "_") + 1);
		
		Если СтрНайти(ИмяРеквизита, "_") Тогда
			
			Идентификатор = Сред(ИмяРеквизита, СтрНайти(ИмяРеквизита, "_") + 1);
			ИмяРеквизита = Лев(ИмяРеквизита, СтрНайти(ИмяРеквизита, "_") - 1);
			
			СтрокаТаблицы = ЭтотОбъект[ИмяРеквизита].НайтиПоИдентификатору(Идентификатор);
			
			Если СтрокаТаблицы <> Неопределено Тогда 
				ЗначениеРеквизита = СтрокаТаблицы.Значение;
				СтрокаТаблицы.Использовать = Ложь;
				
				Если ТипЗнч(ЗначениеРеквизита) = Тип("Булево") Тогда
					СтрокаТаблицы.Значение = Ложь;
				ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("Число") Тогда
					СтрокаТаблицы.Значение = 0;
				ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("Строка") Тогда
					СтрокаТаблицы.Значение = "";
				ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("Дата") Тогда
					СтрокаТаблицы.Значение = Неопределено;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			ЗначениеРеквизита = ЭтотОбъект[ИмяРеквизита];
			
			Если ТипЗнч(ЗначениеРеквизита) = Тип("Булево") Тогда
				ЭтотОбъект[ИмяРеквизита] = Ложь;
			ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("Число") Тогда
				ЭтотОбъект[ИмяРеквизита] = 0;
			ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("Строка") Тогда
				ЭтотОбъект[ИмяРеквизита] = "";
			ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("СписокЗначений") Тогда 
				Для Каждого ЭлементСписка Из ЭтотОбъект[ИмяРеквизита] Цикл
					ЭлементСписка.Пометка = Ложь;
				КонецЦикла;
			ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("СтандартныйПериод") Тогда
				ЭтотОбъект[ИмяРеквизита] = Неопределено;
			Иначе
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		ОбработатьПрименениеОтборов(Ложь);
		
	ИначеЕсли Найти(Элемент.Имя, "ЗаголовокОтбора_") Тогда
		
		ИмяРеквизита = Сред(Элемент.Имя, СтрНайти(Элемент.Имя, "_") + 1);
		
		Если СтрНайти(ИмяРеквизита, "_") Тогда
			
			Идентификатор = Сред(ИмяРеквизита, СтрНайти(ИмяРеквизита, "_") + 1);
			ИмяРеквизита = Лев(ИмяРеквизита, СтрНайти(ИмяРеквизита, "_") - 1);
			
			Элементы[ИмяРеквизита].ТекущаяСтрока = Идентификатор;
			
		КонецЕсли;
		
		ТекущийЭлемент = Элементы[ИмяРеквизита];
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОтгрузкиПриИзменении(Элемент)
	
	УстановитьВидимостьСпособовОтгрузкиДоставки();
	СформироватьОтборыТарифов();
	РазвернутьРодителейСпискаСВыбраннымиСтроками();
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособДоставкиПриИзменении(Элемент)
	
	УстановитьВидимостьСпособовОтгрузкиДоставки();
	СформироватьОтборыТарифов();
	РазвернутьРодителейСпискаСВыбраннымиСтроками();
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыТарифовИспользоватьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОтборыТарифов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Использовать Тогда
		СброситьВзаимоисключающие(ТекущиеДанные);
		Элементы.ОтборыТарифов.Развернуть(ТекущиеДанные.ПолучитьИдентификатор());
	Иначе
		Элементы.ОтборыТарифов.Свернуть(ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
	ЗарегистрироватьИзменениеОтборов(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыТарифовПриАктивизацииЯчейки(Элемент)
	
	ТекущиеДанные = Элементы.ОтборыТарифов.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
	
		Поле = Элемент.ТекущийЭлемент;
		Поле.ТолькоПросмотр = Не ТекущиеДанные.ТребуетсяЗначение;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыТарифовЗначениеПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Элементы.ОтборыТарифов.ТекущиеДанные.Значение) Тогда
		
		СтрокаОтбора = ОтборыТарифов.НайтиПоИдентификатору(Элементы.ОтборыТарифов.ТекущаяСтрока);
		Если СтрокаОтбора <> Неопределено Тогда
			СтрокаУслуги = СтрокаОтбора.ПолучитьРодителя();
			СтрокаУслуги.Использовать = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗарегистрироватьИзменениеОтборов(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыТарифовПередРазворачиванием(Элемент, Строка, Отказ)
	
	ТекущиеДанные = ОтборыТарифов.НайтиПоИдентификатору(Строка);
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (Не ТекущиеДанные.Использовать) И ТекущиеДанные.ТипСтроки = 1 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыТарифовПередСворачиванием(Элемент, Строка, Отказ)
	
	ТекущиеДанные = ОтборыТарифов.НайтиПоИдентификатору(Строка);
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Использовать И ТекущиеДанные.ТипСтроки = 1 Тогда
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтборыТарифовПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ОтборыТарифов.ТекущиеДанные;
	
	Если Элементы.ОтборыТарифов.ТекущийЭлемент = Элементы.ОтборыТарифовПоказыватьИнформацию
		И ТекущиеДанные.ПоказыватьИнформацию Тогда
			ОткрытьФормуУслуги(ТекущиеДанные.Идентификатор);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПараметрыТарифа

&НаКлиенте
Процедура ОтправительТерминалНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТерминалНачалоВыбора(1, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательТерминалНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	 ТерминалНачалоВыбора(2, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ТерминалНачалоВыбора(Направление, ИмяЭлемента)
	
	ВсеТерминалы = Не (ИмяЭлемента = "ОтправительТерминал" Или ИмяЭлемента = "ПолучательТерминал");
	
	Если Не ЗначениеЗаполнено(ТарифИдентификатор) И Не ВсеТерминалы Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметрыОповещения = Новый Структура;
	ДополнительныеПараметрыОповещения.Вставить("Направление", Направление);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьПодборТерминала", ЭтотОбъект, ДополнительныеПараметрыОповещения);
	
	Если Направление = 1 Тогда
		Адресат = "Отправитель";
		Терминал = "ПунктПриемаГруза";
	Иначе
		Адресат = "Получатель";
		Терминал = "ПунктВыдачиГруза";
	КонецЕсли;
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("Адрес", ЭтотОбъект[Адресат + "АдресПредставление"]);
	ПараметрыОткрытияФормы.Вставить("АдресЗначение", ЭтотОбъект[Адресат + "АдресЗначение"]);
	ПараметрыОткрытияФормы.Вставить("Направление", Направление);
	ПараметрыОткрытияФормы.Вставить("ГрузоперевозчикИдентификатор", ГрузоперевозчикИдентификатор);
	ПараметрыОткрытияФормы.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	ПараметрыОткрытияФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	ПараметрыОткрытияФормы.Вставить("ВсеТерминалы", ВсеТерминалы);
	ПараметрыОткрытияФормы.Вставить("НаселенныйПунктИдентификатор", ЭтотОбъект[Терминал + "НаселенныйПунктИдентификатор"]);
	ПараметрыОткрытияФормы.Вставить("Идентификатор", ЭтотОбъект[Терминал + "Идентификатор"]);
	
	ОткрытьФорму(
		"Обработка.СервисДоставки.Форма.СписокТерминалов",
		ПараметрыОткрытияФормы,
		ЭтотОбъект,,,,ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ОтправительТерминалОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуТерминала(ПунктПриемаГрузаИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательТерминалОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуТерминала(ПунктВыдачиГрузаИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаОплатыОчистка(Элемент, СтандартнаяОбработка)
	
	ФормаОплаты = 0;
	ФормаОплатыПредставление = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаОплатыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗначениеСписка = Элементы.ФормаОплаты.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	Если ЗначениеСписка = Неопределено Тогда
		ФормаОплаты = 0;
		ФормаОплатыПредставление = "";
	Иначе
		ФормаОплаты = ВыбранноеЗначение;
		ФормаОплатыПредставление = ЗначениеСписка.Представление;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительТерминалОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СброситьТерминал("ПунктПриема");
КонецПроцедуры

&НаКлиенте
Процедура ПолучательТерминалОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СброситьТерминал("ПунктВыдачи");
КонецПроцедуры

&НаКлиенте
Процедура АдресПриИзменении(Элемент)
	
	Адресат = ОпределитьАдресата(Элемент.Имя);
	
	ЭтотОбъект[Адресат + "АдресЗначение"] = "";
	ЭтотОбъект[Адресат + "АдресВладелец"] = "";
	ЭтотОбъект[Адресат + "АдресВладелецНаименование"] = "";
	ЭтотОбъект[Адресат + "АдресПредставление"] = СокрЛП(ЭтотОбъект[Адресат + "АдресПредставление"]);
	
	ЗарегистрироватьИзменениеОтборов(Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТарифы

&НаКлиенте
Процедура ТарифыПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрока = Элементы.Тарифы.ТекущиеДанные;
	
	Если ТекущаяСтрока <> Неопределено Тогда
		ИнформацияПоТарифу = ТабличныйДокументИнформацияПоТарифу(Элементы.Тарифы.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТарифыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыбратьТариф(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьТариф(Команда)
	
	ТекущаяСтрока = Элементы.Тарифы.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НеЗагружатьУслуги = Ложь;
	Модифицированность = Истина;
	СброситьТариф();
	
	ВыделенныйТариф = ТекущаяСтрока.ТарифИдентификатор;
	
	ДанныеПоТарифу = Новый Структура();
	ДанныеПоТарифу.Вставить("ГрузоперевозчикИдентификатор", ТекущаяСтрока.ГрузоперевозчикИдентификатор);
	ДанныеПоТарифу.Вставить("ГрузоперевозчикНаименование", ТекущаяСтрока.ГрузоперевозчикНаименование);
	ДанныеПоТарифу.Вставить("ТарифИдентификатор", ТекущаяСтрока.ТарифИдентификатор);
	ДанныеПоТарифу.Вставить("ТарифНаименование", ТекущаяСтрока.ТарифНаименование);
	ДанныеПоТарифу.Вставить("Негабарит", ТекущаяСтрока.Негабарит);
	ДанныеПоТарифу.Вставить("ФормаОплаты", ТекущаяСтрока.ФормаОплаты);
	ДанныеПоТарифу.Вставить("ФормаОплатыПоУмолчанию", ТекущаяСтрока.ФормаОплатыПоУмолчанию);
	ДанныеПоТарифу.Вставить("ТолькоВремяДоставки", ТекущаяСтрока.ТолькоВремяДоставки);
	ДанныеПоТарифу.Вставить("ТочкаОтправленияШирота", ТекущаяСтрока.ТочкаОтправленияШирота);
	ДанныеПоТарифу.Вставить("ТочкаОтправленияДолгота", ТекущаяСтрока.ТочкаОтправленияДолгота);
	ДанныеПоТарифу.Вставить("ТочкаДоставкиШирота", ТекущаяСтрока.ТочкаДоставкиШирота);
	ДанныеПоТарифу.Вставить("ТочкаДоставкиДолгота", ТекущаяСтрока.ТочкаДоставкиДолгота);
	ДанныеПоТарифу.Вставить("Стоимость", ТекущаяСтрока.Стоимость);
	ДанныеПоТарифу.Вставить("СуммаСкидки", ТекущаяСтрока.СуммаСкидки);
	ДанныеПоТарифу.Вставить("Описание", ТекущаяСтрока.Описание);
	
	Адресат = "ПунктПриемаГруза";
	ДанныеПоТарифу.Вставить(Адресат + "Идентификатор", ТекущаяСтрока[Адресат + "Идентификатор"]);
	ДанныеПоТарифу.Вставить(Адресат + "Наименование", ТекущаяСтрока[Адресат + "Наименование"]);
	ДанныеПоТарифу.Вставить(Адресат + "Адрес", ТекущаяСтрока[Адресат + "Адрес"]);
	ДанныеПоТарифу.Вставить(Адресат + "Телефон", ТекущаяСтрока[Адресат + "Телефон"]);
	ДанныеПоТарифу.Вставить(Адресат + "ТипНаименование", ТекущаяСтрока[Адресат + "ТипНаименование"]);
	ДанныеПоТарифу.Вставить(Адресат + "ТипИдентификатор", ТекущаяСтрока[Адресат + "ТипИдентификатор"]);
	
	Адресат = "ПунктВыдачиГруза";
	ДанныеПоТарифу.Вставить(Адресат + "Идентификатор", ТекущаяСтрока[Адресат + "Идентификатор"]);
	ДанныеПоТарифу.Вставить(Адресат + "Наименование", ТекущаяСтрока[Адресат + "Наименование"]);
	ДанныеПоТарифу.Вставить(Адресат + "Адрес", ТекущаяСтрока[Адресат + "Адрес"]);
	ДанныеПоТарифу.Вставить(Адресат + "Телефон", ТекущаяСтрока[Адресат + "Телефон"]);
	ДанныеПоТарифу.Вставить(Адресат + "ТипНаименование", ТекущаяСтрока[Адресат + "ТипНаименование"]);
	ДанныеПоТарифу.Вставить(Адресат + "ТипИдентификатор", ТекущаяСтрока[Адресат + "ТипИдентификатор"]);
	
	ОбработатьВыборТарифа(ДанныеПоТарифу);
	СформироватьПредставлениеТарифаИГрузоперевозчика();
	ЗаполнитьЗначенияСписковВыбора();
	
	СформироватьДопУслугиПоТарифу(ТекущаяСтрока.ДополнительныеУслуги);
	ОбновитьИнформациюПоВыбраннымДопУслугам();
	Элементы.ГруппаПредупрежденияПоДопУслугам.Видимость = ПроверитьЗаполнениеЗначенийДополнительныхУслуг();
	
	ПерейтиКШагуПараметрыТарифа();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТарифПоУмолчанию(Команда)
	
	ТекущиеДанные = Элементы.Тарифы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
	ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыУстановитьТарифПоУмолчанию();
	НаименованиеОперации = НСтр("ru = 'Установка тарифа по умолчанию'");
	ПараметрыОперации.НаименованиеОперации = НаименованиеОперации;
	ПараметрыОперации.ВыводитьОкноОжидания = Истина;
	ПараметрыОперации.Вставить("ГрузоперевозчикИдентификатор", ТекущиеДанные.ГрузоперевозчикИдентификатор);
	ПараметрыОперации.Вставить("ТарифИдентификатор", ТекущиеДанные.ТарифИдентификатор);
	
	ПараметрыОперации.Вставить("ВыводитьОкноОжидания", Истина);
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьТарифПоУмолчанию(Команда)
	
	ТекущиеДанные = Элементы.Тарифы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.ПоУмолчанию Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
	ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыСброситьТарифПоУмолчанию();
	НаименованиеОперации = НСтр("ru = 'Сброс тарифа по умолчанию'");
	ПараметрыОперации.НаименованиеОперации = НаименованиеОперации;
	ПараметрыОперации.ВыводитьОкноОжидания = Истина;
	ПараметрыОперации.Вставить("ГрузоперевозчикИдентификатор", ТекущиеДанные.ГрузоперевозчикИдентификатор);
	ПараметрыОперации.Вставить("ТарифИдентификатор", "");
	ПараметрыОперации.Вставить("ВыводитьОкноОжидания", Истина);
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиОсновное(Команда)
	
	ПерейтиКШагуОсновное();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиГруз(Команда)
	
	ПерейтиКШагуГруз();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиТарифы(Команда)
	
	Отказ = Ложь;
	ПроверитьЗаполнениеОбязательныхРеквизитов(2, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПерейтиКШагуТарифы();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиПараметрыТарифа(Команда)
	
	Отказ = Ложь;
	ПроверитьЗаполнениеОбязательныхРеквизитов(3, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПерейтиКШагуПараметрыТарифа();

КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиПроверка(Команда)
	
	Отказ = Ложь;
	ПроверитьЗаполнениеОбязательныхРеквизитов(4, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПерейтиКШагуПроверка();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКТекущемуШагуМастера(ВыводитьПредупреждения, ПолучитьТарифыАвтоматически = Ложь)
	
	Отказ = Ложь;
	ПроверитьЗаполнениеОбязательныхРеквизитов(4, Отказ, ВыводитьПредупреждения, ПолучитьТарифыАвтоматически);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПерейтиКШагуПроверка();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиКарточка(Команда)
	
	ПерейтиКШагуКарточка();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКШагуОсновное()
	
	Элементы.ГруппаТарифыГрузоперевозчик.Видимость = Ложь;
	СброситьПометкиКомандШапки(Элементы);
	Элементы.ПерейтиОсновное.Пометка = Истина;
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОсновное;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКШагуГруз()
	
	Элементы.ГруппаТарифыГрузоперевозчик.Видимость = Ложь;
	СброситьПометкиКомандШапки(Элементы);
	Элементы.ПерейтиГруз.Пометка = Истина;
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПараметрыГруза;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКШагуТарифы(ПолучитьТарифыАвтоматически = Ложь)
	
	Элементы.ГруппаТарифыГрузоперевозчик.Видимость = Истина;
	СброситьПометкиКомандШапки(Элементы);
	Элементы.ПерейтиТарифы.Пометка = Истина;
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаТарифы;
	
	УстановитьВидимостьВидаВремениОтгрузки();

	Если ОтборыИзменение Тогда
		ОбработатьПрименениеОтборов(Ложь);
	Иначе
		СформироватьПараметрыОтбора();
		Если ПолучитьТарифыАвтоматически Или Тарифы.Количество() = 0 Тогда
			ПолучитьТарифы(ПолучитьТарифыАвтоматически);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКШагуПараметрыТарифа()
	
	Элементы.ГруппаТарифыГрузоперевозчик.Видимость = Истина;
	СброситьПометкиКомандШапки(Элементы);
	Элементы.ПерейтиПараметрыТарифа.Пометка = Истина;
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПараметрыТарифа;
	Элементы.ГруппаНегабаритныеМеста.Видимость = (ТарифНеГабарит И ГрузКоличествоГрузовыхМест <> 1);
	Элементы.ГрузКоличествоНегабаритныхГрузовыхМест.МаксимальноеЗначение = ГрузКоличествоГрузовыхМест;
	Элементы.ГрузНегабаритныйВес.МаксимальноеЗначение = ГрузВес;
	Элементы.ГрузНегабаритныйОбъем.МаксимальноеЗначение = ГрузОбъем;
	
	ОбработатьИзменениеВариантовДоставки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКШагуПроверка()
	
	// Если были изменены дополнительные услуги, то требуется пересчитать тариф.
	Если ДополнительныеУслугиИзменение Тогда
		ПерейтиКШагуПараметрыТарифа();
		ОбновитьТариф();
		Возврат;
	КонецЕсли;
	
	СформироватьИтоговуюИнформацию();
	Элементы.ГруппаТарифыГрузоперевозчик.Видимость = Ложь;
	СброситьПометкиКомандШапки(Элементы);
	Элементы.ПерейтиПроверка.Пометка = Истина;
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаКарточка;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКШагуКарточка()
	
	Элементы.ГруппаТарифыГрузоперевозчик.Видимость = Ложь;
	СброситьПометкиКомандШапки(Элементы);
	Элементы.ПерейтиКарточка.Пометка = Истина;
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаКарточка;
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьСохранитьЗаказ(Команда)
	
	ЗакрытьПослеЗавершенияОперации = Ложь;
	
	Если ДоступнаОтправкаЗаказовНаДоставку Тогда
		ОформитьЗаказ(ЗакрытьПослеЗавершенияОперации);
	Иначе
		СоздатьИзменитьЗаказНаДоставку(,ЗакрытьПослеЗавершенияОперации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеОбязательныхРеквизитов(НомерШага, Отказ, ВыводитьПредупреждения = Истина, ПолучитьТарифыАвтоматически = Ложь)
	
	ОчиститьСообщения();
	
	Если РежимМастера = СервисДоставкиКлиентСервер.РежимМастераЗарегистрирован()
		ИЛИ НомерШага <= 1 Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ОбязательныеРеквизиты = ОбязательныеРеквизитыДляПереходаНаСтраницу(НомерШага);
	
	ТекстОшибки = НСтр("ru='Поле ""%1"" на шаге ""%2"" не заполнено'");
	
	ШагОшибки = 10;
	
	ПроверитьЗаполнениеРеквизитовНаСервере(ШагОшибки, Отказ, ВыводитьПредупреждения);
	
	ЕстьОшибки = Ложь;
	ПроверитьТелефоныКонтактныхЛиц(ЕстьОшибки, ВыводитьПредупреждения);
	Если ЕстьОшибки Тогда
		Отказ = Истина;
		ШагОшибки = 0;
	КонецЕсли;
	
	ЕстьОшибки = Ложь;
	ПроверитьEmailКонтактныхЛиц(ЕстьОшибки, ВыводитьПредупреждения);
	Если ЕстьОшибки Тогда
		Отказ = Истина;
		ШагОшибки = 0;
	КонецЕсли;
	
	ЕстьОшибки = Ложь;
	ПроверитьТоварныйСостав(ЕстьОшибки, Истина);
	Если ЕстьОшибки Тогда
		Отказ = Истина;
		ШагОшибки = 1;
	КонецЕсли;
	
	Если НомерШага = 4 Тогда
		ЕстьОшибки = Ложь;
		ТекущийШагОшибки = ПроверитьВремяОтгрузки(ЕстьОшибки, ВыводитьПредупреждения);
		Если ЕстьОшибки Тогда
			ШагОшибки = Мин(ШагОшибки, ТекущийШагОшибки);
			Отказ = Истина;
		КонецЕсли;
		Если НЕ Отказ И ПроверитьЗаполнениеЗначенийДополнительныхУслуг() Тогда
			ЕстьОшибки = Истина;
			Если ВыводитьПредупреждения Тогда
				ТекстСообщения = НСтр("ru = 'Есть незаполненные свойства для выбранных дополнительных услуг.'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			Отказ = Истина;
			ШагОшибки = 3;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьОшибки = Ложь;
	ПроверитьВГХ("",ЕстьОшибки, ВыводитьПредупреждения);
	Если ЕстьОшибки Тогда
		Отказ = Истина;
		ШагОшибки = 1;
	КонецЕсли;
	
	// Выполняем проверки заполнения реквизитов формы.
	Для Каждого ТекущийРеквизит Из ОбязательныеРеквизиты Цикл
		
		ПараметрыРеквизита = СтрРазделить(ТекущийРеквизит.Значение, ".");
		ШагТекущейОшибки = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыРеквизита[0]);
		Значение = ПараметрыРеквизита[1];
		
		Если ШагТекущейОшибки > ШагОшибки Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ЭтотОбъект[Значение]) Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, 
										ТекущийРеквизит.Представление, 
										Элементы.ГруппаСтраницы.ПодчиненныеЭлементы[ШагТекущейОшибки].Заголовок);
										
			Отказ = Истина;
			Если ВыводитьПредупреждения Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,Значение,,Отказ);
			КонецЕсли;
			
			ШагОшибки = Мин(ШагОшибки, ШагТекущейОшибки);
		КонецЕсли;
		
	КонецЦикла;
	
	Если НомерШага = 5 И НЕ Отказ Тогда
		ТекущийШагОшибки = ПроверитьВремяОтгрузки(ЕстьОшибки, Истина);
		
		Если ЕстьОшибки Тогда
			ШагОшибки = Мин(ШагОшибки, ТекущийШагОшибки);
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Отказ Тогда
		Если ШагОшибки = 0 Тогда
			ПерейтиКШагуОсновное();
		ИначеЕсли ШагОшибки = 1 Тогда
			ПерейтиКШагуГруз();
		ИначеЕсли ШагОшибки = 2 Тогда
			ПерейтиКШагуТарифы(ПолучитьТарифыАвтоматически);
		ИначеЕсли ШагОшибки = 3 Тогда
			ПерейтиКШагуПараметрыТарифа();
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеРеквизитовНаСервере(ШагОшибки, Отказ, ВыводитьПредупреждения = Истина)
	
	ЕстьОшибки = Ложь;
	ПроверитьРеквизитыКонтрагентов(ЕстьОшибки, ВыводитьПредупреждения);
	Если ЕстьОшибки Тогда
		Отказ = Истина;
		ШагОшибки = 0;
	КонецЕсли;
	
	ЕстьОшибки = Ложь;
	ПроверитьРеквизитыАдресов(ЕстьОшибки, ВыводитьПредупреждения);
	Если ЕстьОшибки Тогда
		Отказ = Истина;
		ШагОшибки = 0;
	КонецЕсли;
	
	ЕстьОшибки = Ложь;
	ПроверитьДатуОтгрузки(ЕстьОшибки, ВыводитьПредупреждения);
	Если ЕстьОшибки Тогда
		Отказ = Истина;
		ШагОшибки = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьРеквизитыАдресов(ЕстьОшибки, ВыводитьПредупреждения)
	
	Если ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СДоставка() Тогда
		Возврат;	
	КонецЕсли;
	
	ПроверитьРеквизитыАдреса("ОтправительАдрес", ЕстьОшибки, ВыводитьПредупреждения);
	ПроверитьРеквизитыАдреса("ПолучательАдрес", ЕстьОшибки, ВыводитьПредупреждения);
	Если ПлательщикРоль = 3 Тогда
		ПроверитьРеквизитыАдреса("ПлательщикАдрес", ЕстьОшибки, ВыводитьПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьРеквизитыАдреса(ИмяРеквизита, ЕстьОшибки, ВыводитьПредупреждения)
	
	СервисДоставкиСлужебный.ПроверитьРеквизитыАдреса(ЭтотОбъект, ИмяРеквизита, ЕстьОшибки, ВыводитьПредупреждения);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьРеквизитыКонтрагентов(ЕстьОшибки, ВыводитьПредупреждения = Истина)
	
	ПроверитьРеквизитыКонтрагента("ОтправительКонтрагент", ЕстьОшибки, ВыводитьПредупреждения);
	ПроверитьРеквизитыКонтрагента("ПолучательКонтрагент", ЕстьОшибки, ВыводитьПредупреждения);
	
	Если ПлательщикРоль = 3 Тогда
		ПроверитьРеквизитыКонтрагента("ПлательщикКонтрагент", ЕстьОшибки, ВыводитьПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьРеквизитыКонтрагента(Префикс, ЕстьОшибки, ВыводитьПредупреждения = Истина)
	
	ИмяРеквизита = Префикс + "Наименование";
	КонтрагентСсылка = ЭтотОбъект[Префикс + "Ссылка"];
	КонтрагентНаименование = ЭтотОбъект[Префикс + "Наименование"];
	КонтрагентЮрФизЛицо = ЭтотОбъект[Префикс + "ЮрФизЛицо"];
	КонтрагентИНН = ЭтотОбъект[Префикс + "ИНН"];
	КонтрагентКПП = ЭтотОбъект[Префикс + "КПП"];
	
	ЭтоОтправитель = (СтрНайти(Префикс, "Отправитель") > 0);
	
	Если Не ЗначениеЗаполнено(КонтрагентСсылка) 
		И КонтрагентНаименование = "" Тогда
		Возврат;
	КонецЕсли;
	
	УчастникГрузоперевозки = СтрЗаменить(Префикс, "Контрагент", "");
	
	ТекстОшибки = НСтр("ru='Некорректный реквизит ""%1"" у участника грузоперевозки в поле ""%2"".'");
	
	Если ЗначениеЗаполнено(КонтрагентСсылка) 
		И КонтрагентНаименование = "" Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстОшибки,
			НСтр("ru='Наименование'"),
			УчастникГрузоперевозки);
		
		ЕстьОшибки = Истина;
		Если ВыводитьПредупреждения Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,ИмяРеквизита);
		КонецЕсли;
		
	КонецЕсли;
	
	Если КонтрагентЮрФизЛицо = 0 Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстОшибки,
			НСтр("ru='Вид контрагента'"),
			УчастникГрузоперевозки);
		
		ЕстьОшибки = Истина;
		Если ВыводитьПредупреждения Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,ИмяРеквизита);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если КонтрагентЮрФизЛицо = 2 Тогда
		
		Если ЭтоОтправитель Тогда
			ТекстСообщения = НСтр("ru='Отправитель не может быть физическим лицом'");
			
			ЕстьОшибки = Истина;
			Если ВыводитьПредупреждения Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,ИмяРеквизита);
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КонтрагентИНН) Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстОшибки,
			НСтр("ru='ИНН'"),
			УчастникГрузоперевозки);
		
		ЕстьОшибки = Истина;
		Если ВыводитьПредупреждения Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,ИмяРеквизита);
		КонецЕсли;
		
	Иначе
		
		ТекстСообщения = "";
		Если Не РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(КонтрагентИНН, КонтрагентЮрФизЛицо = 1,
			ТекстСообщения) Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстОшибки,
				НСтр("ru='ИНН'"),
				УчастникГрузоперевозки)
				+ Символы.ПС + ТекстСообщения;
		
			ЕстьОшибки = Истина;
			Если ВыводитьПредупреждения Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,ИмяРеквизита);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверяем юридический адрес только на наличие
	КонтрагентЮридическийАдрес = ЭтотОбъект[Префикс + "ЮридическийАдресПредставление"];
	
	Если СтрДлина(СокрЛП(КонтрагентЮридическийАдрес)) < 5 Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстОшибки,
			НСтр("ru='Юридический адрес'"),
			УчастникГрузоперевозки);
									
		ЕстьОшибки = Истина;
		Если ВыводитьПредупреждения Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,ИмяРеквизита);
		КонецЕсли;
		
	КонецЕсли;
	
	Если КонтрагентЮрФизЛицо = 3 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КонтрагентКПП) Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстОшибки,
			НСтр("ru='КПП'"),
			УчастникГрузоперевозки);
									
		ЕстьОшибки = Истина;
		Если ВыводитьПредупреждения Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,ИмяРеквизита);
		КонецЕсли;
		
	Иначе
		
		ТекстСообщения = "";
		Если Не РегламентированныеДанныеКлиентСервер.КППСоответствуетТребованиям(КонтрагентКПП, ТекстСообщения) Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстОшибки,
				НСтр("ru='КПП'"),
				УчастникГрузоперевозки)
				+ Символы.ПС + ТекстСообщения;
		
			ЕстьОшибки = Истина;
			Если ВыводитьПредупреждения Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,ИмяРеквизита);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТелефоныКонтактныхЛиц(ЕстьОшибки, ВыводитьПредупреждения)
	
	ПроверитьНомерТелефона("ОтправительКонтактноеЛицоТелефон", ЕстьОшибки, ВыводитьПредупреждения);

	Если ОтправительКонтактноеЛицоТелефонДополнительныйДоступен Тогда
		ПроверитьНомерТелефона("ОтправительКонтактноеЛицоТелефонДополнительный", ЕстьОшибки, ВыводитьПредупреждения);
	КонецЕсли;

	ПроверитьНомерТелефона("ПолучательКонтактноеЛицоТелефон", ЕстьОшибки, ВыводитьПредупреждения);
	
	Если ПолучательКонтактноеЛицоТелефонДополнительныйДоступен Тогда
		ПроверитьНомерТелефона("ПолучательКонтактноеЛицоТелефонДополнительный", ЕстьОшибки, ВыводитьПредупреждения);
	КонецЕсли;
	
	Если ПлательщикРоль = 3 Тогда
		ПроверитьНомерТелефона("ПлательщикКонтактноеЛицоТелефон", ЕстьОшибки, ВыводитьПредупреждения);
		
		Если ПлательщикКонтактноеЛицоТелефонДополнительныйДоступен Тогда
			ПроверитьНомерТелефона("ПлательщикКонтактноеЛицоТелефонДополнительный", ЕстьОшибки, ВыводитьПредупреждения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьEmailКонтактныхЛиц(ЕстьОшибки, ВыводитьПредупреждения)
	
	ПроверитьEmail("ПолучательКонтактноеЛицоEmail", ЕстьОшибки, ВыводитьПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьEmail(Префикс, ЕстьОшибки, ВыводитьПредупреждения = Истина)
	
	ИмяРеквизита = Префикс;
	ЭтоEmailОтправителя = (СтрНайти(ИмяРеквизита, "Отправитель") > 0);
	
	Представление = ЭтотОбъект[ИмяРеквизита];
	
	Если Не ЗначениеЗаполнено(Представление) Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьОшибки = Не ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(Представление);
	
	ТекстСообщения = "";
	
	Если ВыводитьПредупреждения 
		И ЕстьОшибки Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Адрес электронной почты группы ""%1"" содержит ошибки.'"),
			?(ЭтоEmailОтправителя, "Отправитель", "Получатель"));
		ТекстСообщения = ТекстОшибки + Символы.ПС + ТекстСообщения;
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,ИмяРеквизита);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНомерТелефона(Префикс, ЕстьОшибки, ВыводитьПредупреждения = Истина)
	
	ИмяРеквизита = Префикс + "Представление";
	
	ИмяГруппы = "";
	Если СтрНайти(ИмяРеквизита, "Отправитель") > 0 Тогда
		ИмяГруппы = "Отправитель";
	ИначеЕсли СтрНайти(ИмяРеквизита, "Получатель") > 0 Тогда
		ИмяГруппы = "Получатель";
	ИначеЕсли СтрНайти(ИмяРеквизита, "Плательщик") > 0 Тогда
		ИмяГруппы = "Плательщик";
	КонецЕсли;
	
	Представление = ЭтотОбъект[ИмяРеквизита];
	
	Если Не ЗначениеЗаполнено(Представление) Тогда
		Возврат;
	КонецЕсли;
	
	СписокОшибок = ОшибкиЗаполненияТелефона(Префикс);
	
	ЕстьОшибки = СписокОшибок.Количество();
	
	ТекстСообщения = "";
	Для Каждого ТекущаяОшибка Из СписокОшибок Цикл
		ТекстСообщения = ТекстСообщения + Символы.ПС + ТекущаяОшибка.Представление;
	КонецЦикла;
	
	ТекстСообщения = СокрЛП(ТекстСообщения);
	
	Если ВыводитьПредупреждения 
		И ЕстьОшибки Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Некорректный формат номера телефона в поле ""Телефон"" группы ""%1"".'"),
			ИмяГруппы);
		ТекстСообщения = ТекстОшибки + Символы.ПС + ТекстСообщения;
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,ИмяРеквизита);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДатуОтгрузки(ЕстьОшибки, ВыводитьПредупреждения)
	
	Если ЗначениеЗаполнено(ДатаОтгрузки) Тогда
	
		ТекущаяДата = '00010101';
		УстановитьДатуОтгрузки(ТекущаяДата);
		
		Если ТекущаяДата > ДатаОтгрузки Тогда
			
			ЕстьОшибки = Истина;
			Если ВыводитьПредупреждения Тогда
				ТекстОшибки = НСтр("ru='Выбранная дата отгрузки недоступна. Укажите актуальную дату.'");
				ТекстСообщения = ТекстОшибки;
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"ДатаОтгрузки");
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТоварныйСостав(ЕстьОшибки, ВыводитьПредупреждения)
	
	Если НаложенныйПлатежВидОплаты = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	КонтрольныеРеквизиты = Новый Структура("Артикул, ИННВладельцаГруза, СтавкаНДС");
	Для каждого ЭлемСтрока Из ТоварныйСостав Цикл
		Для каждого ЭлемРеквизит Из КонтрольныеРеквизиты Цикл
			
			Если НЕ ЗначениеЗаполнено(ЭлемСтрока[ЭлемРеквизит.Ключ]) Тогда
				ЕстьОшибки = Истина;
				Если ВыводитьПредупреждения Тогда
					ТекстОшибки = НСтр("ru='В строке %1 товарного состава для товара ""%2"" не заполнен реквизит ""%3""'");
					НомерСтроки = ТоварныйСостав.Индекс(ЭлемСтрока)+1;
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ТекстОшибки,
						НомерСтроки,
						ЭлемСтрока["Наименование"], ЭлемРеквизит.Ключ);
					ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
				Иначе
					Возврат;
				КонецЕсли;
			КонецЕсли;

		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьВремяОтгрузки(ЕстьОшибки, ВыводитьПредупреждения)
	
	ШагОшибки = 0;
	ТекущаяДата = ОбщегоНазначенияКлиент.ДатаСеанса();
	НачалоТекущегоДня = НачалоДня(ТекущаяДата);
	ТекущееВремя = Дата(1,1,1) + (ТекущаяДата - НачалоТекущегоДня);
	НачалоДняОтгрузки = НачалоДня(ДатаОтгрузки);
	
	Если ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СКурьер() Тогда
		Если ВариантВремениОтгрузки = ВариантыВремениОтгрузки.ВОпределенноеВремя Тогда
			Если НачалоТекущегоДня = НачалоДняОтгрузки 
				И ТекущееВремя > ВремяОтгрузкиК 
				И ВремяОтгрузкиК <> Дата(1,1,1,0,0,0) Тогда
				ЕстьОшибки = Истина;
				ШагОшибки = 3;
				Если ВыводитьПредупреждения Тогда
					ТекстОшибки = НСтр("ru='Выбранное время отгрузки не может быть меньше текущего времени'");
					ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,,"ВремяОтгрузкиК");
				КонецЕсли;
			ИначеЕсли НачалоТекущегоДня < НачалоДняОтгрузки И ВремяОтгрузкиК = Дата(1,1,1,0,0,0) Тогда
				ЕстьОшибки = Истина;
				ШагОшибки = 3;
				Если ВыводитьПредупреждения Тогда
					ТекстОшибки = НСтр("ru='При отгрузке не на ближайшее время необходимо указать время'");
					ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,,"ВремяОтгрузкиК");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если НачалоТекущегоДня = НачалоДняОтгрузки И ТекущееВремя > ВремяОтгрузкиПо Тогда
			ЕстьОшибки = Истина;
			ШагОшибки = 3;
			Если ВыводитьПредупреждения Тогда
				ТекстОшибки = НСтр(
					"ru='Невозможно оформить доставку на указанное время отгрузки. Время отгрузки меньше, чем текущее.'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, , "ОтправительВремяПлановойОтгрузки");
				Возврат ШагОшибки;
			КонецЕсли;
		КонецЕсли;
		Если СпособОтгрузки = 2 Тогда
			ПлановоеНачальноеВремяОтгрузки = ПолучитьВремяСОкруглением(ВремяОтгрузкиС);
			Если НачалоТекущегоДня = НачалоДняОтгрузки Тогда
				ПлановоеНачальноеВремяОтгрузки = Макс(ПлановоеНачальноеВремяОтгрузки, ПолучитьВремяСОкруглением(
					ТекущееВремя));
			КонецЕсли;
			Если ВремяОтгрузкиПо - ПлановоеНачальноеВремяОтгрузки < 4 * 3600 Тогда
				ЕстьОшибки = Истина;
				ШагОшибки = 3;
				Если ВыводитьПредупреждения Тогда
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
						"ru='Невозможно оформить доставку на указанное время отгрузки. 
						|Разница между начальным %1 и конечным %2 временем отгрузки меньше 4-х часов.
						|Установите конечное время отгрузки не меньше, чем %3.'"),
						Формат(ПлановоеНачальноеВремяОтгрузки, "ДФ=ЧЧ:мм"),
						Формат(ВремяОтгрузкиПо, "ДФ=ЧЧ:мм"),
						Формат(ПлановоеНачальноеВремяОтгрузки + 4 * 3600, "ДФ=ЧЧ:мм"));
					ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, , "ОтправительВремяПлановойОтгрузки");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ШагОшибки;
	
КонецФункции

&НаСервере
Процедура ПроверитьДозаполнитьАдрес(Префикс, ЕстьОшибки, ЕстьИзменения)
	
	ИмяРеквизитаАдресЗначение = Префикс + "Значение";
	
	СтруктураАдреса = СервисДоставки.ЗначениеИзСтрокиJSON(ЭтотОбъект[ИмяРеквизитаАдресЗначение]);
	
	Если Не ЗначениеЗаполнено(СтруктураАдреса) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭтотОбъект[ИмяРеквизитаАдресЗначение]) Тогда
		
		Если УправлениеКонтактнойИнформацией.АдресВведенВСвободнойФорме(ЭтотОбъект[ИмяРеквизитаАдресЗначение]) Тогда
			
			ВызватьИсключение НСтр("ru = 'Для заказов на доставку нельзя использовать адрес в свободной форме.'");
			
		Иначе
			СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(ЭтотОбъект[ИмяРеквизитаАдресЗначение],
				Новый Структура("КодыАдреса", Истина));
			ЭтотОбъект[ИмяРеквизитаАдресЗначение] = РаботаСАдресами.ПоляАдресаВJSON(СведенияОбАдресе);
		КонецЕсли;
		
		ЕстьИзменения = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОбязательныеРеквизитыДляПереходаНаСтраницу(НомерШага)
	
	ЭтоДеловыеЛинии = ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СДоставка();
	
	ОбязательныеРеквизиты = Новый СписокЗначений();
	
	Если РежимМастера = СервисДоставкиКлиентСервер.РежимМастераЗарегистрирован()
		ИЛИ НомерШага <= 1 Тогда
		Возврат ОбязательныеРеквизиты;
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("0.ОтправительКонтрагентНаименование", НСтр("ru='Отправитель'"));
	
	Если ЗначениеЗаполнено(ОтправительКонтрагентНаименование) Тогда
		Если НомерШага > 3  Тогда
			ОбязательныеРеквизиты.Добавить("0.ОтправительКонтактноеЛицоНаименование",
				НСтр("ru='Контактное лицо отправителя'"));
			ОбязательныеРеквизиты.Добавить("0.ОтправительКонтактноеЛицоТелефонПредставление",
				НСтр("ru='Телефон контактного лица отправителя'"));
				
			Если ОтправительКонтактноеЛицоТелефонДополнительныйДоступен Тогда
				ОбязательныеРеквизиты.Добавить("0.ОтправительКонтактноеЛицоТелефонДополнительныйПредставление",
					НСтр("ru='Дополнительный телефон контактного лица отправителя'"));
			КонецЕсли;
		КонецЕсли;
		Если СпособОтгрузки = 2 Или Не ЭтоДеловыеЛинии Тогда
			ОбязательныеРеквизиты.Добавить("0.ОтправительАдресПредставление", НСтр("ru='Откуда'"));
		Иначе
			ОбязательныеРеквизиты.Добавить("0.ПунктПриемаГрузаНаименование", НСтр("ru='От терминала'"));
		КонецЕсли;	
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("0.ПолучательКонтрагентНаименование", НСтр("ru='Получатель'"));
	
	Если ЗначениеЗаполнено(ПолучательКонтрагентНаименование) Тогда
		Если НомерШага > 3 Тогда
			ОбязательныеРеквизиты.Добавить("0.ПолучательКонтактноеЛицоНаименование",
				НСтр("ru='Контактное лицо получателя'"));
			ОбязательныеРеквизиты.Добавить("0.ПолучательКонтактноеЛицоТелефонПредставление",
				НСтр("ru='Телефон контактного лица получателя'"));
			
			Если ПолучательКонтактноеЛицоТелефонДополнительныйДоступен Тогда
				ОбязательныеРеквизиты.Добавить("0.ПолучательКонтактноеЛицоТелефонДополнительныйПредставление",
					НСтр("ru='Дополнительный телефон контактного лица получателя'"));
			КонецЕсли;	
		КонецЕсли;
		Если СпособДоставки = 2 Или Не ЭтоДеловыеЛинии Тогда
			ОбязательныеРеквизиты.Добавить("0.ПолучательАдресПредставление", НСтр("ru='Куда'"));
		Иначе
			ОбязательныеРеквизиты.Добавить("0.ПунктВыдачиГрузаНаименование", НСтр("ru='До терминала'"));
		КонецЕсли;	
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("0.ПлательщикРоль", НСтр("ru='Плательщик'"));

	Если ПлательщикРоль = 3 Тогда
		ОбязательныеРеквизиты.Добавить("0.ПлательщикКонтрагентНаименование", НСтр("ru='Плательщик'"));
		Если ЗначениеЗаполнено(ПлательщикКонтрагентНаименование) Тогда
			Если НомерШага > 3 Тогда
				ОбязательныеРеквизиты.Добавить("0.ПлательщикКонтактноеЛицоНаименование",
					НСтр("ru='Контактное лицо плательщика'"));
				ОбязательныеРеквизиты.Добавить("0.ПлательщикКонтактноеЛицоТелефонПредставление",
					НСтр("ru='Телефон контактного лица плательщика'"));
					
				Если ПлательщикКонтактноеЛицоТелефонДополнительныйДоступен Тогда
					ОбязательныеРеквизиты.Добавить("0.ПлательщикКонтактноеЛицоТелефонДополнительныйПредставление",
						НСтр("ru='Дополнительный телефон контактного лица плательщика'"));
				КонецЕсли;
					
			КонецЕсли;
		КонецЕсли;
		ОбязательныеРеквизиты.Добавить("0.ПлательщикАдресПредставление", НСтр("ru='Где'"));
	КонецЕсли;	
	
	ОбязательныеРеквизиты.Добавить("0.ДатаОтгрузки", НСтр("ru='Дата отгрузки'"));
	
	ОбязательныеРеквизиты.Добавить("0.ЗаказчикРоль", НСтр("ru='Роль заказчика'"));

	ОбязательныеРеквизиты.Добавить("0.ОрганизацияБизнесСетиСсылка", НСтр("ru='Организация БС'"));
	
	ОбязательныеРеквизиты.Добавить("1.ГрузКоличествоГрузовыхМест", НСтр("ru='Количество мест'"));
	Если ГрузКоличествоГрузовыхМест > 1 Тогда
		ОбязательныеРеквизиты.Добавить("1.ГрузВес", НСтр("ru='Общий вес'"));
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("1.ГрузСодержимое", НСтр("ru='Описание содержимого'"));
	ОбязательныеРеквизиты.Добавить("1.ГрузМаксимальныйВес", НСтр("ru='Вес'"));
	ОбязательныеРеквизиты.Добавить("1.ГрузОбъем", НСтр("ru='Объем'"));
	ОбязательныеРеквизиты.Добавить("1.ГрузМаксимальнаяВысота", НСтр("ru='Высота'"));
	ОбязательныеРеквизиты.Добавить("1.ГрузМаксимальнаяШирина", НСтр("ru='Ширина'"));
	ОбязательныеРеквизиты.Добавить("1.ГрузМаксимальнаяДлина", НСтр("ru='Длина'"));;
	
	Если НомерШага > 2 Тогда
	
		Если Не ЗначениеЗаполнено(ТарифИдентификатор) Тогда
			ОбязательныеРеквизиты.Добавить("2.ТарифИдентификатор", НСтр("ru='Тариф грузоперевозки'"));
		КонецЕсли;
		
	КонецЕсли;
	
	Если НомерШага > 3 Тогда
		
		Если ЗначениеЗаполнено(ТарифИдентификатор) Тогда
			ОбязательныеРеквизиты.Добавить("3.ФормаОплатыПредставление", НСтр("ru='Форма оплаты'"));
			
			Если ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СДоставка() Тогда
				Если СпособОтгрузки = 1 Тогда
					ОбязательныеРеквизиты.Добавить("3.ПунктПриемаГрузаНаименование", НСтр("ru='Пункт приема груза'"));
				ИначеЕсли СпособОтгрузки = 2 Тогда
					ОбязательныеРеквизиты.Добавить("3.ВремяОтгрузкиПредставление", НСтр("ru='Время отгрузки'"));
				КонецЕсли;
				
				Если СпособДоставки = 1 Тогда
					ОбязательныеРеквизиты.Добавить("3.ПунктВыдачиГрузаНаименование", НСтр("ru='Пункт выдачи груза'"));
				ИначеЕсли СпособДоставки = 2 Тогда
					ОбязательныеРеквизиты.Добавить("3.ВремяДоставкиПредставление", НСтр("ru='Время доставки'"));
				КонецЕсли;
				
				Если ТарифНеГабарит И ГрузКоличествоГрузовыхМест <> 1 Тогда
					ОбязательныеРеквизиты.Добавить("3.ГрузНегабаритныйВес", НСтр("ru='Вес негабаритных мест'"));
					ОбязательныеРеквизиты.Добавить("3.ГрузНегабаритныйОбъем", НСтр("ru='Объем негабаритных мест'"));
					ОбязательныеРеквизиты.Добавить("3.ГрузКоличествоНегабаритныхГрузовыхМест",
						НСтр("ru='Количество негабаритных грузовых мест'"));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОбязательныеРеквизиты;
	
КонецФункции

&НаКлиенте
Процедура СортироватьТарифыПоЦене(Команда)
	
	ТарифыУстановитьРежимСортировки(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьТарифыПоСроку(Команда)
	
	ТарифыУстановитьРежимСортировки(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТарифы(Команда)

	Если ОтборыИзменение Тогда
		ОбработатьПрименениеОтборов(Ложь);
	Иначе
		ПолучитьТарифы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКакЧерновик(Команда)
	
	СоздатьИзменитьЗаказНаДоставку();
	
КонецПроцедуры

&НаСервере
Процедура ИзменениеЗарегистрированногоЗаказаЗавершение()
	
	РежимИзмененияРеквизитов(Ложь);
	ДоступныеДляИзмененияРеквизитыТолькоПросмотр(Истина);
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьИзменения(Команда)
	
	Отказ = Ложь;
	КонтрольЗаполненияРеквизитовОформленногоЗаказа(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	СоздатьИзменитьЗаказНаДоставку(Ложь, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	ОписаниеОЗавершении = Новый ОписаниеОповещения("ЗавершениеОтменитьЗаказ", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОЗавершении, НСтр("ru='Отменить заказ?'"), РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеОтменитьЗаказ(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда //Отменить
		ОтменитьЗаказНаДоставку();
	ИначеЕсли Результат = КодВозвратаДиалога.Повторить Тогда //Отменить платно
		ОтменитьЗаказНаДоставку(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьОтборы(Команда)
	
	Отказ = Ложь;
	
	ПроверитьЗаполнениеЗначенийОтборовТарифов(Отказ);
	ПроверитьЗаполнениеАдресов(Отказ);
	
	Если Не Отказ Тогда
		
		Модифицированность = Истина;
		Элементы.ГруппаОтборы.Скрыть();
		ОбработатьИзменениеВариантовДоставки();
		ОбработатьПрименениеОтборов(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьТариф()
	
	ТарифИдентификатор = "";
	ТарифНаименование = "";
	ТарифНеГабарит = Ложь;
	ГрузНегабаритныйВес = 0;
	ГрузНегабаритныйОбъем = 0;
	ГрузКоличествоНегабаритныхГрузовыхМест = 0;
	ОтправительАдресШирота = 0;
	ОтправительАдресДолгота = 0;
	ПолучательАдресШирота = 0;
	ПолучательАдресДолгота = 0;
	СуммаДокумента = 0;
	СуммаСкидки = 0;
	
	ИнформацияПоТекущемуТарифу = Новый ТабличныйДокумент();
	
	Если ТипГрузоперевозки <> СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СДоставка() Тогда
		СброситьТерминал("ПунктПриема");
		СброситьТерминал("ПунктВыдачи");
	КонецЕсли;
	
	ФормаОплаты = 0;
	ФормаОплатыПредставление = "";
	
	УслугиТарифа.Очистить();
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПараметрыТарифа Тогда
		ПерейтиКШагуТарифы();
	КонецЕсли;
	
	СформироватьПредставлениеТарифаИГрузоперевозчика();
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ИдентификаторЗаказа", ИдентификаторЗаказа);
	ПараметрыОткрытияФормы.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	ПараметрыОткрытияФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);

	ОткрытьФорму(
		"Обработка.СервисДоставки.Форма.ПечатныеФормы",
		ПараметрыОткрытияФормы,
		ЭтотОбъект,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПоЗаказуУГрузоперевозчика(Команда)
	
	Если РежимМастера = СервисДоставкиКлиентСервер.РежимМастераЗарегистрирован() Тогда
		ОбновитьЗаказНаДоставку();
	КонецЕсли;
	
КонецПроцедуры

#Область КомандыРедактированияРеквизитовЗаказа

&НаКлиенте
Процедура ИзменитьПараметрыЗаказа(Команда)
	
	ПараметрыОперации = ПараметрыОперацииПолучитьДоступныеДляИзмененияРеквизиты(Истина);
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьИзменения(Команда)
	
	РежимИзмененияРеквизитов(Ложь);
	
	ДоступныеДляИзмененияРеквизитыТолькоПросмотр(Истина);
	
	Если Модифицированность Тогда
	
		ПолучитьЗаказНаДоставку(Истина);
		
		Модифицированность = Ложь;
	
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура КонтрольЗаполненияРеквизитовОформленногоЗаказа(Отказ, ВыводитьПредупреждения = Истина)

	Если РежимМастера <> СервисДоставкиКлиентСервер.РежимМастераЗарегистрирован()
		ИЛИ КлючиРеквизитовДляИзменения.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОчиститьСообщения();
	
	СтруктураКлючей = Новый Структура;
	Для каждого ТекущийКлючРеквизита Из КлючиРеквизитовДляИзменения Цикл
		СтруктураКлючей.Вставить(ТекущийКлючРеквизита.Значение, Истина);
	КонецЦикла; 
	КонтролируемыеРеквизиты = РеквизитыФормыДляИзменения(СтруктураКлючей);
	
	ЕстьОшибки = Ложь;
	
	Если КлючиРеквизитовДляИзменения.НайтиПоЗначению("ПолучательКонтрагент") <> Неопределено Тогда
		ПроверитьРеквизитыКонтрагента("ПолучательКонтрагент", ЕстьОшибки, ВыводитьПредупреждения);
	КонецЕсли; 
	Если КлючиРеквизитовДляИзменения.НайтиПоЗначению("ПлательщикКонтрагент") <> Неопределено
		И ПлательщикРоль = 3 Тогда
		ПроверитьРеквизитыКонтрагента("ПлательщикКонтрагент", ЕстьОшибки, ВыводитьПредупреждения);
	КонецЕсли; 
	
	Если КлючиРеквизитовДляИзменения.НайтиПоЗначению("ОтправительАдрес") <> Неопределено Тогда
		ПроверитьРеквизитыАдреса("ОтправительАдрес", ЕстьОшибки, ВыводитьПредупреждения);
	КонецЕсли; 
	Если КлючиРеквизитовДляИзменения.НайтиПоЗначению("ПолучательАдрес") <> Неопределено Тогда
		ПроверитьРеквизитыАдреса("ПолучательАдрес", ЕстьОшибки, ВыводитьПредупреждения);
	КонецЕсли; 
	Если КлючиРеквизитовДляИзменения.НайтиПоЗначению("ПлательщикАдрес") <> Неопределено 
		И ПлательщикРоль = 3 Тогда
		ПроверитьРеквизитыАдреса("ПлательщикАдрес", ЕстьОшибки, ВыводитьПредупреждения);
	КонецЕсли; 
	
	Если КлючиРеквизитовДляИзменения.НайтиПоЗначению("ОтправительКонтактнаяИнформация") <> Неопределено Тогда
		ПроверитьНомерТелефона("ОтправительКонтактноеЛицоТелефон", ЕстьОшибки, ВыводитьПредупреждения);
	КонецЕсли; 
	Если КлючиРеквизитовДляИзменения.НайтиПоЗначению("ПолучательКонтактнаяИнформация") <> Неопределено Тогда
		ПроверитьНомерТелефона("ПолучательКонтактноеЛицоТелефон", ЕстьОшибки, ВыводитьПредупреждения);
	КонецЕсли; 
	
	Если ЕстьОшибки Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ТекстОшибки = НСтр("ru='Поле ""%1"" не заполнено'");
	
	// Выполняем проверки заполнения реквизитов формы.
	Для Каждого ТекущийРеквизит Из КонтролируемыеРеквизиты Цикл
		
		Попытка
			ЗначениеРеквизита = ЭтотОбъект[ТекущийРеквизит.Значение];
		Исключение
			Продолжить;
		КонецПопытки; 
		
		Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстОшибки,
				ТекущийРеквизит.Представление);
										
			Отказ = Истина;
			
			Если ВыводитьПредупреждения Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,ТекущийРеквизит.Значение);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТарифКоманда(Команда)
	ОбновитьТариф();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	РедактируемыйРеквизитЦветФона = ЦветаСтиля.ДобавленныйРеквизитФон;
	
	// Категории отборов тарифов.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыТарифовИспользовать.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтборыТарифов.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

	// Категории отборов тарифов.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыТарифовНаименование.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтборыТарифов.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ЖирныйШрифтБЭД);
	
	// Значение отборов тарифов.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыТарифовИспользовать.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтборыТарифов.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 2;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Значение отборов тарифов.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыТарифов.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтборыТарифов.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 2;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.НаклонныйТекстСервисДоставки);
	
	// Значение отборов тарифов.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыТарифовЗначение.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтборыТарифов.ТребуетсяЗначение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтборыТарифов.Значение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Пусто>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение",
		ГоризонтальноеПоложение.Центр);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);

	// Время отгрузки.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтправительВремяПлановойОтгрузки.Имя);
	ОтборГруппа = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтборыТарифов.ОтправительВремяОтгрузкиПо");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "";
	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтборыТарифов.ОтправительВремяОтгрузкиС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "";
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// Тарифы "Текущий тариф".
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Тарифы.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Тарифы.ТарифИдентификатор");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ВыделенныйТариф");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Тарифы.ТочкаОтправленияШирота");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ОтправительАдресШирота");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Тарифы.ТочкаДоставкиШирота");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ПолучательАдресШирота");
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ЖирныйШрифтБЭД);
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ЖирныйШрифтБЭД);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона",
		ЦветаСтиля.ЦветФонаКнопкаПоУмолчаниюСервисДоставки);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ПрименитьОтборы");

	/////////////////////////
	
	// Категории дополнительных услуг.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОборотыДопУслугИспользовать.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТарифДополнительныеУслуги.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

	// Категории дополнительных услуг.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОборотыДопУслугНаименование.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТарифДополнительныеУслуги.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ЖирныйШрифтБЭД);
	
	// Значение дополнительных услуг.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОборотыДопУслугИспользовать.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТарифДополнительныеУслуги.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 2;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

	// Значение дополнительных услуг.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОборотыДопУслугЗначение.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТарифДополнительныеУслуги.ТребуетсяЗначение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТарифДополнительныеУслуги.Значение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Пусто>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение",
		ГоризонтальноеПоложение.Центр);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);

	// Значение дополнительных услуг.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОборотыДопУслугИспользовать.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТарифДополнительныеУслуги.Обязательная");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТарифДополнительныеУслуги.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры

&НаСервере
Процедура ОбработатьПараметры(Параметры, Префикс = "")
	
	ПараметрыДляФормы = Новый Структура;
	
	СервисДоставкиКлиентСервер.ЗаполнитьЛинейныеДанныеПоСтруктуре(Параметры, ПараметрыДляФормы, Префикс);
	
	Если ПараметрыДляФормы.Свойство("ТипГрузоперевозки") Тогда
		
		Если ПараметрыДляФормы.ТипГрузоперевозки = 0 Тогда
			ПараметрыДляФормы.ТипГрузоперевозки = ?(ТипГрузоперевозки = 0, 
													СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СДоставка(), 
													ТипГрузоперевозки);
		КонецЕсли;
		
	КонецЕсли;
	
	МассивИсключений = Новый Массив;
	Если ПараметрыДляФормы.Свойство("ТоварныйСостав") Тогда
		МассивИсключений.Добавить("ТоварныйСостав");
	КонецЕсли;
	Если ПараметрыДляФормы.Свойство("ГрузоперевозчикИдентификатор")
		И ПараметрыДляФормы.ГрузоперевозчикИдентификатор = "" Тогда
		МассивИсключений.Добавить("ГрузоперевозчикИдентификатор");
		МассивИсключений.Добавить("ГрузоперевозчикНаименование");
	КонецЕсли;
	Если Не ПустаяСтрока(ДополнительнаяИнформация) Тогда
		МассивИсключений.Добавить("ДополнительнаяИнформация");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыДляФормы, , СтрСоединить(МассивИсключений, ", "));
	УстановитьПризнакОрганизаций();
	ЗаполнитьЗначенияСписковВыбора();
	ЗаполнитьЗначенияСписковВыбораКонтактнойИнформации();
	
	Если Префикс = ""
		И ГрузКоличествоГрузовыхМест = 1 Тогда
		ГрузМаксимальныйВес = ГрузВес;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПараметрыПослеДобавленияОснований(Параметры)
	
	ПараметрыДляФормы = Новый Структура;
	
	СервисДоставкиКлиентСервер.ЗаполнитьЛинейныеДанныеПоСтруктуре(Параметры, ПараметрыДляФормы);
	
	МассивРеквизитовДляПересчета = РеквизитыДляПересчета();
	
	Для Каждого ТекРеквизитДляПересчета Из МассивРеквизитовДляПересчета Цикл
		
		ИмяРеквизита = "Груз" + ТекРеквизитДляПересчета;
		ЗначениеРеквизитаДляПересчета = ПараметрыДляФормы[ИмяРеквизита];
		
		Если ТипЗнч(ЗначениеРеквизитаДляПересчета) = Тип("Число")
			И ЭтотОбъект[ИмяРеквизита] <> ЗначениеРеквизитаДляПересчета 
			И ЗначениеРеквизитаДляПересчета <> 0 Тогда
			ЭтотОбъект[ИмяРеквизита + "ДляПересчета"] = ЗначениеРеквизитаДляПересчета;
		ИначеЕсли ТипЗнч(ЗначениеРеквизитаДляПересчета) = Тип("Строка")
			И ЭтотОбъект[ИмяРеквизита] <> ЗначениеРеквизитаДляПересчета 
			И ЗначениеРеквизитаДляПересчета <> "" Тогда
			ЭтотОбъект[ИмяРеквизита + "ДляПересчета"] = ЗначениеРеквизитаДляПересчета;
		Иначе
			ЭтотОбъект[ИмяРеквизита + "ДляПересчета"] = Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ГрузКоличествоГрузовыхМест = 1 Тогда
		ГрузМаксимальныйВесДляПересчета = ГрузВесДляПересчета;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакОрганизаций()
	
	ТипКонтрагента = ТипЗнч(ОтправительКонтрагентСсылка);
	ОтправительКонтрагентЭтоОрганизация
		= Метаданные.ОпределяемыеТипы.ОрганизацияСервисДоставки.Тип.СодержитТип(ТипКонтрагента);
	
	ТипКонтрагента = ТипЗнч(ПолучательКонтрагентСсылка);
	ПолучательКонтрагентЭтоОрганизация
		= Метаданные.ОпределяемыеТипы.ОрганизацияСервисДоставки.Тип.СодержитТип(ТипКонтрагента);
	
	ТипКонтрагента = ТипЗнч(ПлательщикКонтрагентСсылка);
	ПлательщикКонтрагентЭтоОрганизация
		= Метаданные.ОпределяемыеТипы.ОрганизацияСервисДоставки.Тип.СодержитТип(ТипКонтрагента);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьДатуОтгрузки(ДатаОтгрузки)
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	ДатаОтгрузки = НачалоДня(ДатаОтгрузки);
	
	Если ДатаОтгрузки < НачалоДня(ТекущаяДата) Тогда
		ДатаОтгрузки = НачалоДня(ТекущаяДата);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПериодОтгрузкиПоУмолчанию()
	
	ВремяОтгрузкиС = '00010101090000';
	ВремяОтгрузкиПо = '00010101180000';
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПериодДоставкиПоУмолчанию()
	
	ВремяДоставкиС = '00010101090000';
	ВремяДоставкиПо = '00010101180000';
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискиВыбора()
	
	СписокВыбораТиповДокументовОснований();
	
	СписокВыбора = Элементы.ОтправительКонтрагент.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(1, НСтр("ru='Наша организация...'"));
	СписокВыбора.Добавить(2, НСтр("ru='Контрагент...'"));

	СписокВыбора = Элементы.ПолучательКонтрагент.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(1, НСтр("ru='Наша организация...'"));
	СписокВыбора.Добавить(2, НСтр("ru='Контрагент...'"));
	
	СписокВыбора = Элементы.ПлательщикКонтрагент.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(1, НСтр("ru='Наша организация...'"));
	СписокВыбора.Добавить(2, НСтр("ru='Контрагент...'"));

	Элементы.СпособОтгрузки.СписокВыбора.Очистить();
	Элементы.ОтправительСпособОтгрузки.СписокВыбора.Очистить();
	Элементы.ОтправительСпособОтгрузки.СписокВыбора.Добавить(0, НСтр("ru='Загрузка услуг...'"));
	
	Элементы.СпособДоставки.СписокВыбора.Очистить();
	Элементы.ПолучательСпособДоставки.СписокВыбора.Очистить();
	Элементы.ПолучательСпособДоставки.СписокВыбора.Добавить(0, НСтр("ru='Загрузка услуг...'"));
	
	СписокВыбора = Элементы.ФормаОплаты.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(1, НСтр("ru='Безналичная'"));
	СписокВыбора.Добавить(2, НСтр("ru='Наличная'"));
	
	СписокВыбора = Элементы.ПлательщикРоль.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(1, НСтр("ru='Совпадает с отправителем'"));
	СписокВыбора.Добавить(2, НСтр("ru='Совпадает с получателем'"));
	СписокВыбора.Добавить(3, НСтр("ru='Третье лицо'"));
	
	СписокВыбора = Элементы.ЗаказчикРоль.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(1, НСтр("ru='Отправителя'"));
	СписокВыбора.Добавить(2, НСтр("ru='Получателя'"));
	СписокВыбора.Добавить(3, НСтр("ru='Плательщика'"));
	СписокВыбора.Добавить(4, НСтр("ru='Третьего лица'"));
	
	СписокВыбора = Элементы.НаложенныйПлатежВидОплаты.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(0, НСтр("ru='Не требуется'"));
	СписокВыбора.Добавить(1, НСтр("ru='Картой'"));
	СписокВыбора.Добавить(2, НСтр("ru='Наличными'"));
	
	СписокВыбора = Элементы.ОрганизацияБизнесСетиСсылка.СписокВыбора;
	ОрганизацииБизнесСети = ОрганизацииБизнесСетиНаСервере();
	Для Каждого ТекущаяОрганизация Из ОрганизацииБизнесСети Цикл
		СписокВыбора.Добавить(ТекущаяОрганизация.Организация, ТекущаяОрганизация.Наименование);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияСписковВыбора()
	
	СписокВыбора = Элементы.ФормаОплаты.СписокВыбора;
	СписокВыбора.Очистить();
	
	Если ТарифФормаОплаты.Количество() = 0 Тогда
		СписокВыбора.Добавить(1, НСтр("ru='Безналичная'"));
		СписокВыбора.Добавить(2, НСтр("ru='Наличная'"));
	Иначе
		Для каждого ЗначениеФормыОплаты Из ТарифФормаОплаты Цикл
			Если ЗначениеФормыОплаты.Значение = 1 Тогда
				СписокВыбора.Добавить(1, НСтр("ru='Безналичная'"));
			ИначеЕсли ЗначениеФормыОплаты.Значение = 2 Тогда
				СписокВыбора.Добавить(2, НСтр("ru='Наличная'"));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЗначениеСписка = Элементы.ФормаОплаты.СписокВыбора.НайтиПоЗначению(ФормаОплаты);
	Если ЗначениеСписка = Неопределено Тогда
		ФормаОплатыПредставление = "";
	Иначе
		ФормаОплатыПредставление = ЗначениеСписка.Представление;
	КонецЕсли;
	
	ЗначениеСписка = Элементы.ПлательщикРоль.СписокВыбора.НайтиПоЗначению(ПлательщикРоль);
	Если ЗначениеСписка = Неопределено Тогда
		ПлательщикРольПредставление = "";
	Иначе
		ПлательщикРольПредставление = ЗначениеСписка.Представление;
	КонецЕсли;
	
	ЗаполнитьСпискиВыбораТелефоновКонтактныхЛиц();
	
	Если ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СКурьер() Тогда
		ЗаполнитьСписокВыбораВремениОтгрузки();
		ЗаполнитьСписокВыбораПериодовОтгрузки();
	КонецЕсли;
	
	УстановитьВидимостьВидаВремениОтгрузки();

	Если ТарифТолькоВремяДоставки Тогда
		ВремяОтгрузкиК = Дата(1,1,1) + (ДатаОтгрузки-НачалоДня(ДатаОтгрузки));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискиВыбораТелефоновКонтактныхЛиц(ВидРоли = "")
	
	Если ВидРоли = "" Тогда
		ЗаполнитьСписокВыбораКонтактноеЛицоТелефонСервер("Отправитель");
		ЗаполнитьСписокВыбораКонтактноеЛицоТелефонСервер("Получатель");
		ЗаполнитьСписокВыбораКонтактноеЛицоТелефонСервер("Плательщик");
	Иначе
		ЗаполнитьСписокВыбораКонтактноеЛицоТелефонСервер(ВидРоли);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораКонтактноеЛицоТелефонСервер(ВидРоли)
	
	СписокВыбора = Элементы[ВидРоли + "КонтактноеЛицоТелефон"].СписокВыбора;
	СписокВыбора.Очистить();

	СписокВыбораДополнительный = Элементы[ВидРоли + "КонтактноеЛицоТелефонДополнительный"].СписокВыбора;
	СписокВыбораДополнительный.Очистить();
	
	КонтактнаяИнформация = Неопределено;
	
	ВладельцыКонтактнойИнформации = Новый Массив();
	
	УстановитьВладельцаКонтактнойИнформации(ЭтотОбъект[ВидРоли + "КонтактноеЛицоСсылка"], ВладельцыКонтактнойИнформации);
	УстановитьВладельцаКонтактнойИнформации(ЭтотОбъект[ВидРоли + "КонтрагентСсылка"], ВладельцыКонтактнойИнформации);
	
	Если ВладельцыКонтактнойИнформации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
		ВладельцыКонтактнойИнформации,
		Перечисления.ТипыКонтактнойИнформации.Телефон,,
		ТекущаяДатаСеанса());

	Если ЗначениеЗаполнено(КонтактнаяИнформация) Тогда
		
		Для Каждого СтрокаКИ Из КонтактнаяИнформация Цикл
			
			ВидТелефона = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаКИ.Вид, "Наименование");
			СервисДоставкиПереопределяемый.СкорректироватьНаименованиеВидаТелефона(ВидТелефона, СтрокаКИ.Тип);
			СписокВыбора.Добавить(СтрокаКИ.Представление, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1: %2'"),
				ВидТелефона,
				СтрокаКИ.Представление));
			СписокВыбораДополнительный.Добавить(СтрокаКИ.Представление, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1: %2'"),
				ВидТелефона,
				СтрокаКИ.Представление));
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если СписокВыбора.Количество() > 0 Тогда
		
		СписокВыбора.Добавить("ПроизвольныйТелефон", НСтр("ru='Произвольный телефон...'"));
		СписокВыбораДополнительный.Добавить("ПроизвольныйТелефон", НСтр("ru='Произвольный телефон...'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьВладельцаКонтактнойИнформации(Знач ВладелецКонтактнойИнформации, ВладельцыКонтактнойИнформации)

	Если ЗначениеЗаполнено(ВладелецКонтактнойИнформации) Тогда
		ВладельцыКонтактнойИнформации.Добавить(ВладелецКонтактнойИнформации);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияПоУмолчанию()
	
	КлючНастроекФормы = "Обработка.СервисДоставки.Форма.КарточкаЗаказа/ТекущиеДанные";
	Настройки = ХранилищеСистемныхНастроек.Загрузить(КлючНастроекФормы);
	
	Если Настройки <> Неопределено
		И ТипЗнч(Настройки) = Тип("Соответствие") Тогда
		ТарифыРежимСортировки = Настройки.Получить("ТарифыРежимСортировки");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТипГрузоперевозки) Тогда
		ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СДоставка();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ГрузКоличествоГрузовыхМест) Тогда
		ГрузКоличествоГрузовыхМест = 1;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаОтгрузки) Тогда
		УстановитьДатуОтгрузки(ДатаОтгрузки);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВремяОтгрузкиПо) Тогда
		УстановитьПериодОтгрузкиПоУмолчанию();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВремяДоставкиПо) Тогда
		УстановитьПериодДоставкиПоУмолчанию();
	КонецЕсли;
	
	ВыбиратьКонтактноеЛицоКонтрагента
		= (Метаданные.ОпределяемыеТипы.КонтактноеЛицоКонтрагентаСервисДоставки.Тип.Типы().Количество() > 1)
		ИЛИ (Не Метаданные.ОпределяемыеТипы.КонтактноеЛицоКонтрагентаСервисДоставки.Тип.СодержитТип(Тип("Строка")));
	
	ВыбиратьКонтактноеЛицоОрганизации
		= (Метаданные.ОпределяемыеТипы.КонтактноеЛицоОрганизацииСервисДоставки.Тип.Типы().Количество() > 1)
		ИЛИ (Не Метаданные.ОпределяемыеТипы.КонтактноеЛицоОрганизацииСервисДоставки.Тип.СодержитТип(Тип("Строка")));
	
	Если Не ЗначениеЗаполнено(СпособОтгрузки) Тогда
		СпособОтгрузки = 1;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СпособДоставки) Тогда
		СпособДоставки = 1;
	КонецЕсли;
	
	ПараметрыВалюты = СервисДоставки.НовыйПараметрыВалюты();
	ВалютаНаименование = ПараметрыВалюты.Наименование;
	ВалютаКод = ПараметрыВалюты.Код;
	
	Если НЕ ЗначениеЗаполнено(ВалютаСсылка) Тогда
		ВалютаСсылка = ПараметрыВалюты.Ссылка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВалютаСсылка) Тогда
		ПараметрыВалюты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВалютаСсылка, "Код, Наименование");
		ВалютаНаименование = ПараметрыВалюты.Наименование;
		ВалютаКод = ПараметрыВалюты.Код;
	КонецЕсли;
	
	ГрузОграничениеВес = 20000;
	ГрузОграничениеОбъем = 80;
	ГрузОграничениеВысота = 240;
	ГрузОграничениеДлина = 1340;
	ГрузОграничениеШирина = 240;
	ГрузОграничениеСтоимость = 300000000;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПараметрыОтбора()
	
	// Быстрые отборы.
	
	БыстрыеОтборы.Очистить();
	
	Если СпособОтгрузки = 1 Тогда
		БыстрыеОтборы.Добавить("СпособОтгрузки", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Способ отгрузки: %1'"),
			НСтр("ru='Самопривоз'")));
	Иначе
		БыстрыеОтборы.Добавить("СпособОтгрузки", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Способ отгрузки: %1'"),
			НСтр("ru='Забор от адреса'")));
	КонецЕсли;
	
	Если СпособДоставки = 1 Тогда
		БыстрыеОтборы.Добавить("СпособДоставки", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Способ доставки: %1'"),
			НСтр("ru='Самовывоз'")));
	Иначе
		БыстрыеОтборы.Добавить("СпособДоставки", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Способ доставки: %1'"),
			НСтр("ru='Доставка до адреса'")));
	КонецЕсли;
	
	СтрокиОтборовВерхнийУровень = ОтборыТарифов.ПолучитьЭлементы();
	
	Для Каждого СтрокаОтбораВерхнийУровень Из СтрокиОтборовВерхнийУровень Цикл
		
		СтрокиОтборы = СтрокаОтбораВерхнийУровень.ПолучитьЭлементы();
		
		Если СтрокиОтборы.Количество() Тогда
			Для Каждого СтрокаОтборы Из СтрокиОтборы Цикл
				Если СтрокаОтборы.Использовать Тогда
					БыстрыеОтборы.Добавить("ОтборыТарифов_" + СтрокаОтборы.ПолучитьИдентификатор(),
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = '%1'"),
							СтрокаОтборы.Наименование));
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если СтрокаОтбораВерхнийУровень.Использовать Тогда
				БыстрыеОтборы.Добавить("ОтборыТарифов_" + СтрокаОтбораВерхнийУровень.ПолучитьИдентификатор(),
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '%1'"),
						СтрокаОтбораВерхнийУровень.Наименование));
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Удаление старых элементов быстрых отборов.
	КоличествоЭлементов = Элементы.ГруппаБыстрыхОтборов.ПодчиненныеЭлементы.Количество();
	Для ОбратныйИндекс = 1 По КоличествоЭлементов Цикл
		ЭлементОтбора = Элементы.ГруппаБыстрыхОтборов.ПодчиненныеЭлементы[КоличествоЭлементов - ОбратныйИндекс];
		Если ЭлементОтбора.Видимость Тогда
			Элементы.Удалить(ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	
	// Создание новых элементов быстрых отборов.
	Для Каждого ЭлементОтбора Из БыстрыеОтборы Цикл
		
		// Добавление пустой группы.
		НоваяГруппа = Элементы.Добавить("ГруппаБыстрогоОтбора_" + ЭлементОтбора.Значение, Тип("ГруппаФормы"),
			Элементы.ГруппаБыстрыхОтборов);
		НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
		НоваяГруппа.ОтображатьЗаголовок = Ложь;
		НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		НоваяГруппа.Видимость = Истина;
		НоваяГруппа.ОтображатьОтступСлева = Ложь;
		НоваяГруппа.ЦветФона = WebЦвета.СветлоЖелтый;
		НоваяГруппа.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
		
		НовыйЭлемент = Элементы.Добавить("ЗаголовокОтбора_" + ЭлементОтбора.Значение, Тип("ДекорацияФормы"), НоваяГруппа);
		
		// Разбитие на форматированную строку.
		НачалоПредставления = Лев(ЭлементОтбора.Представление, СтрНайти(ЭлементОтбора.Представление, ":"));
		КонецПредставления = Сред(ЭлементОтбора.Представление, СтрНайти(ЭлементОтбора.Представление, ":")+1);
		
		НовыйЭлемент.Заголовок 
			= СтроковыеФункции.ФорматированнаяСтрока(НСтр("ru='%1 <span style=""color: ЦветВажнойНадписиБИП"">%2</span>'"),
			НачалоПредставления,
			КонецПредставления);
		НовыйЭлемент.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
		НовыйЭлемент.Гиперссылка = Истина;
		НовыйЭлемент.УстановитьДействие("Нажатие", "Подключаемый_Нажатие");
		
		Если НЕ (ЭлементОтбора.Значение = "СпособОтгрузки"
			ИЛИ ЭлементОтбора.Значение = "СпособДоставки") Тогда
			
			НовыйЭлемент = Элементы.Добавить("ОчиститьОтбор_" + ЭлементОтбора.Значение, Тип("ДекорацияФормы"), НоваяГруппа);
			НовыйЭлемент.Вид = ВидДекорацииФормы.Картинка;
			НовыйЭлемент.Картинка = БиблиотекаКартинок.ПолеВводаОчистить;
			НовыйЭлемент.Гиперссылка = Истина;
			НовыйЭлемент.УстановитьДействие("Нажатие", "Подключаемый_Нажатие");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПредставлениеДокументаОснования()
	
	ЕстьДоступныеДокументы = СписокВыбораДокументовОснований.Количество() <> 0;
	
	Элементы.ДокументыОснованияПредставление.Доступность = ЕстьДоступныеДокументы;
	ДокументыОснованияПредставление = Новый ФорматированнаяСтрока("");
	
	Если ЕстьДоступныеДокументы Тогда
		
		КоличествоОснований = ДокументыОснования.Количество();
		
		Если КоличествоОснований = 0 Тогда
			
			Если РежимМастера <> СервисДоставкиКлиентСервер.РежимМастераЗарегистрирован() Тогда
				ДокументыОснованияПредставление = Новый ФорматированнаяСтрока(
					НСтр("ru = 'Выбрать'"), ,
					ЦветаСтиля.ГиперссылкаЦвет, ,
					"ИзменитьДокументыОснования");
			КонецЕсли;
			
		ИначеЕсли КоличествоОснований = 1 Тогда
			
			ПервыйДокумент = ДокументыОснования[0].Значение;
			
			СтрокаДляДокументыОснованияПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<a style=""color: ЦветГиперссылкиБЭД"" href = ""%1"">%2</a>",
				ПолучитьНавигационнуюСсылку(ПервыйДокумент), Строка(ПервыйДокумент));
				
			Если РежимМастера <> СервисДоставкиКлиентСервер.РежимМастераЗарегистрирован() Тогда
				СтрокаДляДокументыОснованияПредставление = СтрокаДляДокументыОснованияПредставление
					+ " " + НСтр("ru='<a style=""color: ЦветГиперссылкиБЭД"" href = ""ДобавитьДокументыОснования"">(Добавить)</a>'");
					
				СтрокаДляДокументыОснованияПредставление = СтрокаДляДокументыОснованияПредставление
					+ " " + НСтр("ru='<a style=""color: ЦветГиперссылкиБЭД"" href = ""ОчиститьДокументыОснования"">(Очистить)</a>'");
			КонецЕсли;
				
			ДокументыОснованияПредставление = СтроковыеФункции.ФорматированнаяСтрока(СтрокаДляДокументыОснованияПредставление);
				
		Иначе
			
			СтрокаДляДокументыОснованияПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='<a style=""color: ЦветГиперссылкиБЭД"" href = ""ОткрытьФормуОснования"">Всего документов: %1</a>'"), КоличествоОснований);
			
			ДокументыОснованияПредставление = СтроковыеФункции.ФорматированнаяСтрока(СтрокаДляДокументыОснованияПредставление);
				
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПредставлениеГрузоперевозчика()
	
	ГрузоперевозчикПредставление = ?(ЗначениеЗаполнено(ГрузоперевозчикИдентификатор), ГрузоперевозчикНаименование, НСтр("ru='<Не выбран>'"));
	Элементы.ТарифыТекущийГрузоперевозчик.Гиперссылка = ЗначениеЗаполнено(ГрузоперевозчикИдентификатор);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФормуДляДокументаОснования()
	
	УстановитьВидимостьДоступностьНаСтраницеПараметровГруза();
	УстановитьВидимостьДоступностьНаСтраницеКарточки();
	СформироватьПредставлениеВремениОтгрузки();
	СформироватьПредставлениеВремениДоставки();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьОнЖе()
	
	Элементы.ДекорацияПолучательКонтрагент.Заголовок = ?(ПолучательКонтрагентЭтоОрганизация, НСтр("ru='Она же'"),
		НСтр("ru='Он же'"));
	Элементы.ДекорацияПолучательКонтрагент.Видимость = (РежимМастера <> СервисДоставкиКлиентСервер.РежимМастераЗарегистрирован())
												И (ТипЗнч(ПолучательКонтрагентСсылка) = ТипЗнч(ОтправительКонтрагентСсылка))
												И (ПолучательКонтрагентСсылка <> ОтправительКонтрагентСсылка);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступностьОрганизации()
	
	ДоступноИзменениеОрганизации = (РежимМастера = СервисДоставкиКлиентСервер.РежимМастераНовый());
	Элементы.ОрганизацияБизнесСетиСсылка.ТолькоПросмотр = Не ДоступноИзменениеОрганизации;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступностьНаложенныйПлатеж()
	
	Если (ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СКурьер()) 
		И (ДокументыОснования.Количество() = 1) 
		И (НаложенныйПлатежВидОплаты > 0) Тогда
		СуммаНаложенногоПлатежа = ПолнаяСтоимость;
	Иначе
		СуммаНаложенногоПлатежа = 0;
	КонецЕсли;
	
	ДекорацияСуммаНаложенногоПлатежа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Сумма к оплате - %1 %2'")
		, ?(НаложенныйПлатежВидОплаты > 0, СуммаНаложенногоПлатежа, 0)
		, ВалютаНаименование);
		
	Элементы.ГруппаНаложенныйПлатеж.Видимость = 
		(ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СКурьер()) 
		И (ДокументыОснования.Количество() = 1)
		И СервисДоставкиКлиент.ЭтотДокументДоступенДляНаложенногоПлатежа(ДокументыОснования[0].Значение);
	Элементы.ГруппаГруппаНаложенныйПлатежДопРеквизиты.Доступность = (НаложенныйПлатежВидОплаты > 0)
															И ЗначениеЗаполнено(ПолучательКонтрагентНаименование);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность();
	
	Если РежимМастера < СервисДоставкиКлиентСервер.РежимМастераЗарегистрирован() Тогда
		
		Элементы.СохранитьКакЧерновик.Видимость = Истина;
		Элементы.ГруппаПараметрыГруза.ТолькоПросмотр = Ложь;
		Элементы.ГруппаПараметрыТарифа.ТолькоПросмотр = Ложь;
		Элементы.Печать.Видимость = Ложь;
		Элементы.ПерейтиКарточка.Видимость = Ложь;
		Элементы.ПерейтиТарифы.Видимость = Истина;
		Элементы.ПерейтиПроверка.Видимость = Истина;
		Элементы.ОформитьЗаказ.Видимость = ДоступнаОтправкаЗаказовНаДоставку;
		Элементы.Обновить.Видимость = Ложь;
		Элементы.ТарифыКонтекстноеМенюУстановитьТарифПоУмолчанию.Видимость = ДоступнаОтправкаЗаказовНаДоставку;
		Элементы.ТарифыКонтекстноеМенюСброситьТарифПоУмолчанию.Видимость = ДоступнаОтправкаЗаказовНаДоставку;
		
		Элементы.ОрганизацияБизнесСетиСсылка.Видимость = Истина;
		Элементы.ОрганизацияБизнесСетиГиперссылка.Видимость = Ложь;
		
	Иначе
		
		Элементы.СохранитьКакЧерновик.Видимость = Ложь;
		Элементы.Печать.Видимость = Истина;
		Элементы.ПерейтиКарточка.Видимость = Истина;
		Элементы.ПерейтиТарифы.Видимость = Ложь;
		Элементы.ПерейтиПроверка.Видимость = Ложь;
		Элементы.ОформитьЗаказ.Видимость = Ложь;
		Элементы.Обновить.Видимость = Истина;
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаКарточка;
		Элементы.ПерейтиКарточка.Пометка = Истина;
		Элементы.ГруппаДанныхПоДопУслугам.Видимость = Ложь;
	
		ДоступныеДляИзмененияРеквизитыТолькоПросмотр(Истина);
		Элементы.ГруппаПараметрыГруза.ТолькоПросмотр = Истина;
		Элементы.ГруппаПараметрыТарифа.ТолькоПросмотр = Истина;
		
		Элементы.ГруппаОснование.Видимость = ДокументыОснования.Количество();
		
		Элементы.ГруппаКоманднаяПанельНавигация.Видимость = Ложь;
		Элементы.ОрганизацияБизнесСетиСсылка.Видимость = Ложь;
		Элементы.ОрганизацияБизнесСетиГиперссылка.Видимость = Истина;
		
	КонецЕсли;
	
	Элементы.ГруппаМультизаказ.Видимость = (МультизаказИдентификатор <> "");
	Элементы.ГруппаТарифыГрузоперевозчик.Видимость = Ложь;
	Элементы.СуммаСкидки.Видимость = СуммаСкидки > 0;
	
	УстановитьВидимостьДанныхПлательщика();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьДополнительныхТелефонов()

	ОтправительКонтактноеЛицоТелефонДополнительныйДоступен = ЗначениеЗаполнено(ОтправительКонтактноеЛицоТелефонДополнительныйПредставление);
	ПолучательКонтактноеЛицоТелефонДополнительныйДоступен = ЗначениеЗаполнено(ПолучательКонтактноеЛицоТелефонДополнительныйПредставление);
	ПлательщикКонтактноеЛицоТелефонДополнительныйДоступен = ЗначениеЗаполнено(ПлательщикКонтактноеЛицоТелефонДополнительныйПредставление);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЗаголовокФормы()
	
	Если РежимМастера = СервисДоставкиКлиентСервер.РежимМастераНовый() Тогда
		ЗаказНаДоставкуПредставление = НСтр("ru='Заказ на доставку (создание)'");
	ИначеЕсли ЗначениеЗаполнено(НомерЗаказа) Тогда
		ЗаказНаДоставкуПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Заказ на доставку %1 от %2'"),
			НомерЗаказа, Формат(ДатаЗаказа, "ДЛФ=DT"));
	Иначе
		ЗаказНаДоставкуПредставление = НСтр("ru='Заказ на доставку (открытие)'");
	КонецЕсли;
	
	ТекстЗаголовка =  НСтр("ru = '%1: %2'");
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстЗаголовка,
		СервисДоставкиКлиентСервер.ПредставлениеТипаГрузоперевозки(ТипГрузоперевозки),
		ЗаказНаДоставкуПредставление);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтрокуПредставлениеСостоянияЗаказаФормы()
	
	Если РежимМастера = СервисДоставкиКлиентСервер.РежимМастераНовый() Тогда
		СостояниеПредставление = НСтр("ru='Новый'");
	ИначеЕсли ЗначениеЗаполнено(Состояние) Тогда
		СостояниеПредставление = Состояние;
	КонецЕсли;
	
	УстановитьВидимостьДоступныхДействий();
	
	Если НастройкиДоступныхДействий[ИмяДействияПриИзменении()].Видимость Тогда
		СостояниеПредставление = СостояниеПредставление 
			+ "(" 
			+ НСтр("ru='режим изменения оформленного заказа'")
			+ ")";
	КонецЕсли;
	
	Элементы.ДекорацияСостояниеПредставление.Заголовок = СостояниеПредставление;
	
КонецПроцедуры

&НаСервере
Процедура ОформитьЭлементыУправления()
	
	Если Не ДоступнаОтправкаЗаказовНаДоставку Тогда
		Элементы.ОформитьЗаказ.Заголовок = НСтр("ru='Сохранить заказ'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораДокументаОснования()
	
	Если СписокВыбораДокументовОснований.Количество() > 1 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборТипаОснования", ЭтотОбъект);
		СписокВыбораДокументовОснований.ПоказатьВыборЭлемента(ОписаниеОповещения);
	ИначеЕсли СписокВыбораДокументовОснований.Количество() = 1 Тогда
		ОбработатьВыборТипаОснования(СписокВыбораДокументовОснований[0], Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОснования()
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("ДокументыОснования", ДокументыОснования.ВыгрузитьЗначения());
	ПараметрыОткрытия.Вставить("Режим", РежимМастера);
	ПараметрыОткрытия.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	ПараметрыОткрытия.Вставить("Отправитель", ОтправительКонтрагентСсылка);
	ПараметрыОткрытия.Вставить("Получатель", ПолучательКонтрагентСсылка);
	ПараметрыОткрытия.Вставить("ОтправительАдрес", ОтправительАдресПредставление);
	ПараметрыОткрытия.Вставить("ПолучательАдрес", ПолучательАдресПредставление);
	ПараметрыОткрытия.Вставить("ПлательщикАдрес", ПлательщикАдресПредставление);
	ПараметрыОткрытия.Вставить("ДатаОтгрузки", ДатаОтгрузки);
	ПараметрыОткрытия.Вставить("СпособОтгрузки", СпособОтгрузки);
	ПараметрыОткрытия.Вставить("СпособДоставки", СпособДоставки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборЗначения", ЭтотОбъект, 
								Новый Структура("ИмяРеквизита", "ДокументыОснования"));
	РежимИзмененияСоставаОснований = 1;
	ОткрытьФорму(
		"Обработка.СервисДоставки.Форма.СписокДокументовОснований",
		ПараметрыОткрытия,
		ЭтотОбъект,,,,ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбора(ИмяСправочника, ИмяРеквизита, ПараметрыОтбора = Неопределено,
			ИмяПроцедурыОбработки="ОбработатьВыборЗначения")
	
	Если ПараметрыОтбора = Неопределено Тогда
		ПараметрыОтбора = Новый Структура();
	КонецЕсли;
	
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "1", "");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "2", "");
	
	ТекущееЗначениеРеквизита = ЭтотОбъект[ИмяРеквизита];
	
	ИмяФормыВыбора = СервисДоставкиВызовСервера.ИмяФормыВыбораПоОпределяемомуТипу(ИмяСправочника);
	
	Если ИмяФормыВыбора <> "" Тогда
		
		ПараметрыОткрытия = Новый Структура("ТекущаяСтрока", ТекущееЗначениеРеквизита);
		ПараметрыОткрытия.Вставить("Отбор", ПараметрыОтбора);
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		
		СервисДоставкиКлиент.ПередОткрытиемФормыВыбора(ПараметрыОткрытия, ИмяСправочника);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(ИмяПроцедурыОбработки, ЭтотОбъект,
														Новый Структура("ИмяРеквизита", ИмяРеквизита));
		ОткрытьФорму(
			ИмяФормыВыбора,
			ПараметрыОткрытия,
			ЭтотОбъект,,,,ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОбъекта(ИмяОбъекта, ИмяРеквизита, ИмяПроцедурыОбработки="ОбработатьИзменениеРеквизитовОбъекта")
	
	ТекущееЗначениеРеквизита = ЭтотОбъект[ИмяРеквизита];
	
	ИмяФормыВыбора = СервисДоставкиВызовСервера.ИмяФормыОбъектаПоОпределяемомуТипу(ИмяОбъекта);
	
	Если ИмяФормыВыбора <> "" Тогда
		
		ПараметрыОткрытия = Новый Структура();
		ПараметрыОткрытия.Вставить("Ключ", ТекущееЗначениеРеквизита);
		
		Если РежимМастера = СервисДоставкиКлиентСервер.РежимМастераЗарегистрирован() 
			ИЛИ Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаКарточка Тогда
			ПараметрыОткрытия.Вставить("ТолькоПросмотр", Истина);
			ОткрытьФорму(
				ИмяФормыВыбора,
				ПараметрыОткрытия,
				ЭтотОбъект,,,,,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			ОписаниеОповещения = Новый ОписаниеОповещения(ИмяПроцедурыОбработки, ЭтотОбъект,
															Новый Структура("ИмяРеквизита", ИмяРеквизита));
			ОткрытьФорму(
				ИмяФормыВыбора,
				ПараметрыОткрытия,
				ЭтотОбъект,,,,ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

		КонецЕсли;
														
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборТипаОснования(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмяОбъекта = Результат.Значение;
	
	ИмяФормыВыбора = "";
	СервисДоставкиКлиентПереопределяемый.УстановитьИмяФормыВыбораОбъектаПоИмени(ПолноеИмяОбъекта, ИмяФормыВыбора);
	
	Если ИмяФормыВыбора = "" Тогда
		ИмяФормыВыбора = ПолноеИмяОбъекта + ".ФормаВыбора";
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура();
	Если ДокументыОснования.Количество() = 1 Тогда
		ПараметрыОткрытия.Вставить("ТекущаяСтрока", ДокументыОснования[0].Значение);
	КонецЕсли;
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	ПараметрыОткрытия.Вставить("МножественныйВыбор", Истина);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборЗначения", ЭтотОбъект, 
													Новый Структура("ИмяРеквизита", "ДокументыОснования"));
	ОткрытьФорму(
		ИмяФормыВыбора,
		ПараметрыОткрытия,
		ЭтотОбъект,,,,ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборЗначения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		РежимИзмененияСоставаОснований = 0;
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("КодВозвратаДиалога")
		И Результат = КодВозвратаДиалога.Отмена Тогда
		РежимИзмененияСоставаОснований = 0;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
		
		Если ДополнительныеПараметры.ИмяРеквизита = "ДокументыОснования" Тогда
			Если РежимИзмененияСоставаОснований = 1 
				И ЭтотОбъект.ДокументыОснования.Количество() = 1 Тогда
				Основание = ЭтотОбъект.ДокументыОснования[0].Значение;
				Для Каждого ТекОснование Из Результат Цикл
					Если ТекОснование <> Основание Тогда
						ЭтотОбъект.ДокументыОснования.Добавить(ТекОснование);
					КонецЕсли;
				КонецЦикла;
			Иначе
				ЭтотОбъект.ДокументыОснования.ЗагрузитьЗначения(Результат);
			КонецЕсли;
			
			// Очистим наложенный платеж при необходимости
			Если ЭтотОбъект.ДокументыОснования.Количество() = 1 Тогда
				Если НЕ СервисДоставкиКлиент.ЭтотДокументДоступенДляНаложенногоПлатежа(ЭтотОбъект.ДокументыОснования[0].Значение) Тогда
					НаложенныйПлатежВидОплаты = 0;
				КонецЕсли; 
			Иначе
				НаложенныйПлатежВидОплаты = 0;
			КонецЕсли; 
		Иначе
			ЭтотОбъект[ДополнительныеПараметры.ИмяРеквизита] = Результат;
		КонецЕсли;
		ОбработатьИзменениеРеквизитаФормы(ДополнительныеПараметры.ИмяРеквизита);
		
	КонецЕсли;
	
	РежимИзмененияСоставаОснований = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеРеквизитовОбъекта(Результат, ДополнительныеПараметры) Экспорт
	
	ОчиститьСообщения();
	Если РежимМастера = СервисДоставкиКлиентСервер.РежимМастераЗарегистрирован() Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
		
		ИмяРеквизита = СтрЗаменить(ДополнительныеПараметры.ИмяРеквизита, "Ссылка", "");
		ИмяРеквизита = ИмяРеквизита + "Реквизиты";
		ОбработатьИзменениеРеквизитаФормы(ИмяРеквизита);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеРеквизитаФормы(ИмяРеквизита)
	
	ОчиститьСообщения();
	Отказ = Ложь;
	ОбработатьИзменениеРеквизитаФормыНаСервере(ИмяРеквизита, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяРеквизита = "ДокументыОснования" Тогда
		Если РежимИзмененияСоставаОснований = 2 Тогда
			СформироватьОтборыТарифов(Истина);
			РазвернутьРодителейСпискаСВыбраннымиСтроками();
		ИначеЕсли РежимИзмененияСоставаОснований = 1 Тогда
			УстановитьКомандыПересчетаПараметровГруза();
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимостьДоступностьНаСтраницеОсновная();
	СформироватьНадписьОтбора();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеРеквизитаФормыНаСервере(ИмяРеквизита, Отказ = Ложь)
	
	Модифицированность = Истина;
	
	Если ИмяРеквизита = "ДокументыОснования" Тогда
		
		ПараметрыРеквизита = ПараметрыЗаказаНаДоставкуПоДокументамОснованиям(ТипГрузоперевозки, ЭтотОбъект[ИмяРеквизита]);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Если РежимИзмененияСоставаОснований = 2 Тогда
			
			ОбработатьПараметры(ПараметрыРеквизита);
			
			УстановитьДатуОтгрузки(ДатаОтгрузки);
		
			Если Не ЗначениеЗаполнено(ВремяОтгрузкиПо) Тогда
				УстановитьПериодОтгрузкиПоУмолчанию();
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ВремяДоставкиПо) Тогда
				УстановитьПериодДоставкиПоУмолчанию();
			КонецЕсли;
			
			ОтборыИзменение = Истина;
			ПереключательРасшифровки = ?(ГрузКоличествоГрузовыхМест = 1, 0, 1);
			
			ТоварныйСостав.Очистить();
			
			Если ПараметрыРеквизита.Свойство("ТоварныйСостав") Тогда
				Для Каждого ТекСтрока Из ПараметрыРеквизита.ТоварныйСостав Цикл
					НоваяСтрока = ТоварныйСостав.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				КонецЦикла;
			КонецЕсли;
		Иначе
			
			ОбработатьПараметрыПослеДобавленияОснований(ПараметрыРеквизита);
			
			ТоварныйСостав.Очистить();
			
			Если ПараметрыРеквизита.Свойство("ТоварныйСостав") Тогда
				Для Каждого ТекСтрока Из ПараметрыРеквизита.ТоварныйСостав Цикл
					НоваяСтрока = ТоварныйСостав.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		СформироватьПредставлениеДокументаОснования();
		
	ИначеЕсли ИмяРеквизита = "ОтправительКонтрагентСсылка" 
		ИЛИ ИмяРеквизита = "ПолучательКонтрагентСсылка"
		ИЛИ ИмяРеквизита = "ПлательщикКонтрагентСсылка" Тогда
		
		ПараметрыУчастника = ПараметрыУчастникаГрузоперевозки(ЭтотОбъект[ИмяРеквизита]);
		
		// В режиме редактирования реквизитов учесть доступность изменения адреса получателя
		Если ИмяРеквизита = "ПолучательКонтрагентСсылка"
			И КлючиРеквизитовДляИзменения.Количество() > 0
			И КлючиРеквизитовДляИзменения.НайтиПоЗначению("ПолучательАдрес") = Неопределено Тогда
			ПараметрыУчастника.Удалить("Адрес");
		КонецЕсли; 
		
		ОбработатьПараметры(ПараметрыУчастника, СтрЗаменить(ИмяРеквизита, "КонтрагентСсылка", ""));
		ОтборыИзменение = Истина;
		
		ИмяЭлемента = СтрЗаменить(ИмяРеквизита, "Ссылка", "");
		ЕстьОшибки = Ложь;
		ПроверитьРеквизитыКонтрагента(ИмяЭлемента, ЕстьОшибки, Истина);
		
	ИначеЕсли ИмяРеквизита = "ОтправительКонтрагентРеквизиты" 
		ИЛИ ИмяРеквизита = "ПолучательКонтрагентРеквизиты"
		ИЛИ ИмяРеквизита = "ПлательщикКонтрагентРеквизиты" Тогда
		
		ИмяЭлемента = СтрЗаменить(ИмяРеквизита, "Реквизиты", "");
		ПараметрыКонтрагента = ПараметрыКонтрагента(ЭтотОбъект[ИмяЭлемента + "Ссылка"]);
		
		ЕстьИзменения = Ложь;
		Для Каждого ТекущийПараметр Из ПараметрыКонтрагента Цикл
			
			Если ТипЗнч(ТекущийПараметр.Значение) = Тип("Структура") Тогда
				Продолжить;
			ИначеЕсли ТекущийПараметр.Значение <> ЭтотОбъект[ИмяЭлемента + ТекущийПараметр.Ключ] Тогда
				ЕстьИзменения = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПараметрыКонтрагента.ЮридическийАдрес.Представление
			<> ЭтотОбъект[ИмяЭлемента + "ЮридическийАдресПредставление"] Тогда
			ЕстьИзменения = Истина;
		КонецЕсли;
		
		Если ПараметрыКонтрагента.ЮридическийАдрес.Значение
			<> ЭтотОбъект[ИмяЭлемента + "ЮридическийАдресЗначение"] Тогда
			ЕстьИзменения = Истина;
		КонецЕсли;
		
		Если ЕстьИзменения Тогда
			ОбработатьПараметры(ПараметрыКонтрагента, ИмяЭлемента);
			
			ЕстьОшибки = Ложь;
			ПроверитьРеквизитыКонтрагента(ИмяЭлемента, ЕстьОшибки, Истина);
		КонецЕсли;
		
	ИначеЕсли ИмяРеквизита = "ОтправительКонтактноеЛицоСсылка" 
		ИЛИ ИмяРеквизита = "ПолучательКонтактноеЛицоСсылка" 
		ИЛИ ИмяРеквизита = "ПлательщикКонтактноеЛицоСсылка" Тогда
		
		Если ТипЗнч(ЭтотОбъект[ИмяРеквизита]) <> Тип("Строка") Тогда
			
			ПараметрыРеквизита = ПараметрыКонтактногоЛица(ЭтотОбъект[ИмяРеквизита]);
			ОбработатьПараметры(ПараметрыРеквизита, СтрЗаменить(ИмяРеквизита, "Ссылка", ""));
			
		КонецЕсли;

	ИначеЕсли ИмяРеквизита = "ОтправительАдресВладелец" 
		ИЛИ ИмяРеквизита = "ПолучательАдресВладелец"
		ИЛИ ИмяРеквизита = "ПлательщикАдресВладелец" Тогда
		
		ПараметрыРеквизита = ПараметрыАдреса(ЭтотОбъект[ИмяРеквизита]);
		
		ЭтоДеловыеЛинии = ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СДоставка();
		Если ЭтоДеловыеЛинии Тогда
			Представление = ПредставлениеАдресаБезМуниципальнойЧасти(ПараметрыРеквизита.Значение);
			ПараметрыРеквизита.Представление = ?(ПустаяСтрока(Представление), ПараметрыРеквизита.Представление,
				Представление);
		КонецЕсли;
		
		ИмяЭлемента = СтрЗаменить(ИмяРеквизита, "Владелец", "");
		ОбработатьПараметры(ПараметрыРеквизита, ИмяЭлемента);
		
		ЕстьОшибки = Ложь;
		ПроверитьРеквизитыАдреса(ИмяЭлемента, ЕстьОшибки, Истина);
		ОтборыИзменение = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыЗаказаНаДоставкуПоДокументамОснованиям(ТипГрузоперевозки, Значение)
	
	Возврат СервисДоставкиВызовСервера.ПараметрыЗаказаНаДоставкуПоДокументамОснованиям(ТипГрузоперевозки, Значение);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПараметрыЗаказаНаДоставкуПоУмолчанию(ТипГрузоперевозки)
	
	Возврат СервисДоставки.ПараметрыЗаказаНаДоставкуПоДокументуОснованию(ТипГрузоперевозки);
	
КонецФункции

&НаСервере
Функция ПараметрыУчастникаГрузоперевозки(Значение)
	
	ПараметрыУчастника = СервисДоставки.НовыйПараметрыУчастникаГрузоперевозки();
	
	ПараметрыУчастника.Контрагент = ПараметрыКонтрагента(Значение);
	
	ПараметрыПоУмолчанию = СервисДоставки.ПараметрыПоУмолчанию(ТипГрузоперевозки);
	
	Если ПараметрыУчастника.Контрагент.ЭтоОрганизация Тогда
		Если ПараметрыПоУмолчанию.СпособОпределенияКонтактногоЛица = 2 
			И ПараметрыУчастника.Контрагент.ЭтоОрганизация Тогда
			
			Если ТипЗнч(ПараметрыПоУмолчанию.КонтактноеЛицо) = Тип("Строка") Тогда
				ПараметрыУчастника.КонтактноеЛицо.Наименование = ПараметрыПоУмолчанию.КонтактноеЛицо;
			Иначе
				ПараметрыУчастника.КонтактноеЛицо.Ссылка = ПараметрыПоУмолчанию.КонтактноеЛицо;
				СервисДоставки.ЗаполнитьПараметрыКонтактногоЛица(ПараметрыУчастника.КонтактноеЛицо);
			КонецЕсли;
			
		Иначе
			ПараметрыУчастника.КонтактноеЛицо.СпособОпределенияКонтактногоЛица = ПараметрыПоУмолчанию.СпособОпределенияКонтактногоЛица;
			СервисДоставкиПереопределяемый.ЗаполнитьПараметрыКонтактногоЛицаПоУмолчанию(ЭтотОбъект, ПараметрыУчастника);
		КонецЕсли;
	ИначеЕсли ПараметрыУчастника.Контрагент.ЮрФизЛицо = 2 Тогда
		ПараметрыУчастника.КонтактноеЛицо.Ссылка = ПараметрыУчастника.Контрагент.Ссылка;
		СервисДоставки.ЗаполнитьПараметрыКонтактногоЛица(ПараметрыУчастника.КонтактноеЛицо);
	КонецЕсли;
	
	Возврат ПараметрыУчастника;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПараметрыКонтрагента(Значение)
	
	ПараметрыКонтрагента = СервисДоставки.НовыйПараметрыКонтрагента();
	ПараметрыКонтрагента.Ссылка = Значение;
	
	Если ЗначениеЗаполнено(Значение) Тогда
		СервисДоставкиПереопределяемый.ЗаполнитьПараметрыКонтрагента(ПараметрыКонтрагента);
	КонецЕсли;
	
	Возврат ПараметрыКонтрагента;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПараметрыКонтактногоЛица(Значение)
	
	Параметры = СервисДоставки.НовыйПараметрыКонтактногоЛица();
	Параметры.Ссылка = Значение;
	
	Если ЗначениеЗаполнено(Значение) Тогда
		СервисДоставки.ЗаполнитьПараметрыКонтактногоЛица(Параметры);
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПараметрыАдреса(Значение)
	
	Параметры = СервисДоставки.НовыйПараметрыАдреса("АдресДоставки");
	Параметры.Владелец = Значение;
	
	Если ЗначениеЗаполнено(Значение) Тогда
		СервисДоставкиСлужебный.ЗаполнитьАдресПоПараметрам(Параметры);
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьЗаголовок()
	
	Заголовок = СтрШаблон(НСтр("ru = '%1: Помощник создания заказа на доставку'"),
		СервисДоставкиКлиентСервер.ПредставлениеТипаГрузоперевозки(ТипГрузоперевозки));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступностьНаСтраницеОсновная()
	
	Элементы.ОтправительКонтрагент.Заголовок = ?(ОтправительКонтрагентЭтоОрганизация, НСтр("ru='Организация'"),
		НСтр("ru='Контрагент'"));
	Элементы.ПолучательКонтрагент.Заголовок = ?(ПолучательКонтрагентЭтоОрганизация, НСтр("ru='Организация'"),
		НСтр("ru='Контрагент'"));
	Элементы.ПлательщикКонтрагент.Заголовок = ?(ПолучательКонтрагентЭтоОрганизация, НСтр("ru='Организация'"),
		НСтр("ru='Контрагент'"));
	
	ЕстьОтправитель = ЗначениеЗаполнено(ОтправительКонтрагентСсылка);
	ЕстьПолучатель = ЗначениеЗаполнено(ПолучательКонтрагентСсылка);
	ЕстьПлательщик = ЗначениеЗаполнено(ПлательщикКонтрагентСсылка);
	
	Элементы.ОтправительКонтактноеЛицо.КнопкаВыбора = ЕстьОтправитель
														И ((ОтправительКонтрагентЭтоОрганизация
														И ВыбиратьКонтактноеЛицоОрганизации)
														ИЛИ (Не ОтправительКонтрагентЭтоОрганизация
														И ВыбиратьКонтактноеЛицоКонтрагента));
	Элементы.ПолучательКонтактноеЛицо.КнопкаВыбора = ЕстьПолучатель
														И ((ПолучательКонтрагентЭтоОрганизация
														И ВыбиратьКонтактноеЛицоОрганизации)
														ИЛИ (Не ПолучательКонтрагентЭтоОрганизация
														И ВыбиратьКонтактноеЛицоКонтрагента));
	
	Элементы.ПлательщикКонтактноеЛицо.КнопкаВыбора = ЕстьПлательщик
														И ((ПлательщикКонтрагентЭтоОрганизация
														И ВыбиратьКонтактноеЛицоОрганизации)
														ИЛИ (Не ПлательщикКонтрагентЭтоОрганизация
														И ВыбиратьКонтактноеЛицоКонтрагента));
	
	Элементы.ОтправительАдрес.КнопкаВыпадающегоСписка = ЕстьОтправитель;
	Элементы.ОтправительАдрес1.КнопкаВыпадающегоСписка = ЕстьОтправитель;
	Элементы.ПолучательАдрес.КнопкаВыпадающегоСписка = ЕстьПолучатель;
	Элементы.ПолучательАдрес1.КнопкаВыпадающегоСписка = ЕстьПолучатель;
	Элементы.ПлательщикАдрес.КнопкаВыпадающегоСписка = ЕстьПлательщик;

	Элементы.ГруппаОтправительРеквизиты.Доступность = ЗначениеЗаполнено(ОтправительКонтрагентНаименование);
	Элементы.ГруппаПолучательРеквизиты.Доступность = ЗначениеЗаполнено(ПолучательКонтрагентНаименование);
	Элементы.ГруппаПлательщикРеквизиты.Доступность = ЗначениеЗаполнено(ПлательщикКонтрагентНаименование);
	Элементы.ГруппаНаложенныйПлатеж.Доступность = ЗначениеЗаполнено(ПолучательКонтрагентНаименование);
	
	ЭтоДеловыеЛинии = ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СДоставка();
	Элементы.ГруппаОсновноеПериодыПраво.Видимость = ЭтоДеловыеЛинии;
	Элементы.ОтправительВремяПлановойОтгрузки.Видимость = ЭтоДеловыеЛинии;
	Элементы.ОтправительСпособОтгрузки.Видимость = ЭтоДеловыеЛинии;
	Элементы.ПолучательСпособДоставки.Видимость = ЭтоДеловыеЛинии;
	Элементы.ОтправительТерминал.ТолькоПросмотр = ЭтоДеловыеЛинии;
	Элементы.ПолучательТерминал.ТолькоПросмотр = ЭтоДеловыеЛинии;
	
	Если ЭтоДеловыеЛинии Тогда
		Элементы.ОтправительАдрес.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		Элементы.ПолучательАдрес.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	КонецЕсли;
	
	УстановитьВидимостьОнЖе();
	УстановитьВидимостьДоступностьОрганизации();
	УстановитьВидимостьСпособовОтгрузкиДоставки();
	УстановитьВидимостьДоступностьНаложенныйПлатеж();
	
	ЗаполнитьЗначенияСписковВыбораКонтактнойИнформации();
	
	УстановитьВидимостьДополнительныхТелефонов();
	УстановитьВидимостьДанныхПлательщика();
	
	ОбновитьФормуДляДокументаОснования();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступностьНаСтраницеПараметровГруза()
	
	УстановитьВидимостьДоступностьГруппыВГХ();

	ЕстьПозиционныйСостав = ЗначениеЗаполнено(ТоварныйСостав);
	Элементы.ТоварныйСоставГруза.Видимость = ?(
		ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СДоставка(), 
		Ложь, 
		ЕстьПозиционныйСостав И Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступностьГруппыВГХ()
	
	ОдноМесто = (ПереключательРасшифровки = 0);
	
	Элементы.ГруппаОдноМестоВГХ.Видимость = ОдноМесто;
	Элементы.ГруппаНесколькоМест.Видимость = Не ОдноМесто;
	Элементы.ДекорацияНесколькоМест.Видимость = Не ОдноМесто;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступностьНаСтраницеТарифы()
	
	Элементы.ТарифыГруппаАдреса.Видимость = ?(
		ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СДоставка(), 
		Ложь, 
		Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступностьНаСтраницеПараметрыТарифа()
	
	Элементы.ОтправительТерминал.КнопкаВыбора = (РежимМастера <> СервисДоставкиКлиентСервер.РежимМастераЗарегистрирован());
	Элементы.ПолучательТерминал.КнопкаВыбора = (РежимМастера <> СервисДоставкиКлиентСервер.РежимМастераЗарегистрирован());
	Элементы.ОтправительТерминал.КнопкаОткрытия = (РежимМастера = СервисДоставкиКлиентСервер.РежимМастераЗарегистрирован());
	Элементы.ПолучательТерминал.КнопкаОткрытия = (РежимМастера = СервисДоставкиКлиентСервер.РежимМастераЗарегистрирован());
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступностьНаСтраницеКарточки()
	
	ЕстьПозиционныйСостав = ЗначениеЗаполнено(ТоварныйСостав);
	Элементы.ТоварныйСостав.Видимость = ?(
		ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СДоставка(), 
		Ложь, 
		ЕстьПозиционныйСостав И Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПредставлениеТарифаИГрузоперевозчика()
	
	ТарифПредставление = ?(ЗначениеЗаполнено(ТарифНаименование), ТарифНаименование, НСтр("ru='<Не выбран>'"));
	
	Элементы.ТарифыТекущийТарифПредставление.Гиперссылка = ЗначениеЗаполнено(ТарифНаименование);
	
	СформироватьПредставлениеГрузоперевозчика();
								
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьОбъем()
	
	Если ГрузКоличествоГрузовыхМест = 1 Тогда
		ГрузОбъемРасчетный = ГрузМаксимальнаяВысота*ГрузМаксимальнаяДлина*ГрузМаксимальнаяШирина*0.01*0.01*0.01;
		Если ГрузОбъемРасчетный > 0 Тогда
			ГрузОбъем = Макс(ГрузОбъемРасчетный, 0.001);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьВес()
	
	Если ГрузКоличествоГрузовыхМест = 1 
		И ГрузМаксимальныйВес > 0 Тогда
		ГрузВес = Мин(ГрузВес, ГрузМаксимальныйВес);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВГХ(ИмяРеквизита = "", ЕстьОшибки = Ложь, ВыводитьПредупреждения = Истина)
	
	ПроверитьВсе = (ИмяРеквизита = "");
	
	Если (ПроверитьВсе ИЛИ ИмяРеквизита = "ГрузСтоимость")
		И ЗначениеЗаполнено(ГрузСтоимость) 
		И ЗначениеЗаполнено(ГрузОграничениеСтоимость)
		И ГрузСтоимость > ГрузОграничениеСтоимость Тогда
		
		ЕстьОшибки = Истина;
		Если ВыводитьПредупреждения Тогда
			ТекстОшибки = НСтр("ru='Стоимость превышает максимальное значение, допустимо не более %1 рублей.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстОшибки,
				Формат(ГрузОграничениеСтоимость,"ЧГ=0"));
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"ГрузСтоимость");
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ПроверитьВсе ИЛИ ИмяРеквизита = "ГрузВес")
		И ЗначениеЗаполнено(ГрузВес) 
		И ЗначениеЗаполнено(ГрузОграничениеВес)
		И ГрузВес > ГрузОграничениеВес Тогда
		
		ЕстьОшибки = Истина;
		Если ВыводитьПредупреждения Тогда
			ТекстОшибки = НСтр("ru='Вес превышает максимальное значение, допустимо не более %1 т.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстОшибки,
				Формат(Цел(ГрузОграничениеВес/1000),"ЧГ=0"));
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"ГрузВес");
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ПроверитьВсе ИЛИ ИмяРеквизита = "ГрузВес")
		И ЗначениеЗаполнено(ГрузВес) 
		И ЗначениеЗаполнено(ГрузМаксимальныйВес)
		И ГрузМаксимальныйВес > ГрузВес Тогда
		
		ЕстьОшибки = Истина;
		Если ВыводитьПредупреждения Тогда
			ТекстОшибки = НСтр("ru='Общий вес меньше значения самого тяжелого места'");
			ТекстСообщения = ТекстОшибки;
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"ГрузВес");
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ПроверитьВсе ИЛИ ИмяРеквизита = "ГрузОбъем")
		И ЗначениеЗаполнено(ГрузОбъем) 
		И ЗначениеЗаполнено(ГрузОграничениеОбъем)
		И ГрузОбъем > ГрузОграничениеОбъем Тогда
		
		ЕстьОшибки = Истина;
		Если ВыводитьПредупреждения Тогда
			ТекстОшибки = НСтр("ru='Объем превышает максимальное значение, допустимо не более %1 м³.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстОшибки,
				Формат(ГрузОграничениеОбъем,"ЧГ=0"));
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"ГрузОбъем");
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ПроверитьВсе ИЛИ ИмяРеквизита = "ГрузМаксимальнаяДлина")
		И ЗначениеЗаполнено(ГрузМаксимальнаяДлина) 
		И ЗначениеЗаполнено(ГрузОграничениеДлина)
		И ГрузМаксимальнаяДлина > ГрузОграничениеДлина Тогда
		
		ЕстьОшибки = Истина;
		Если ВыводитьПредупреждения Тогда
			ТекстОшибки = НСтр("ru='Длина превышает максимальное значение, допустимо не более %1 м.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстОшибки,
				Формат(ГрузОграничениеДлина/100,"ЧГ=0"));
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"ГрузМаксимальнаяДлина");
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ПроверитьВсе ИЛИ ИмяРеквизита = "ГрузМаксимальнаяШирина")
		И ЗначениеЗаполнено(ГрузМаксимальнаяШирина) 
		И ЗначениеЗаполнено(ГрузОграничениеШирина)
		И ГрузМаксимальнаяШирина > ГрузОграничениеШирина Тогда
		
		ЕстьОшибки = Истина;
		Если ВыводитьПредупреждения Тогда
			ТекстОшибки = НСтр("ru='Ширина превышает максимальное значение, допустимо не более %1 м.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстОшибки,
				Формат(ГрузОграничениеШирина/100,"ЧГ=0"));
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"ГрузМаксимальнаяШирина");
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ПроверитьВсе ИЛИ ИмяРеквизита = "ГрузМаксимальнаяВысота")
		И ЗначениеЗаполнено(ГрузМаксимальнаяВысота) 
		И ЗначениеЗаполнено(ГрузОграничениеВысота)
		И ГрузМаксимальнаяВысота > ГрузОграничениеВысота Тогда
		
		ЕстьОшибки = Истина;
		Если ВыводитьПредупреждения Тогда
			ТекстОшибки = НСтр("ru='Высота превышает максимальное значение, допустимо не более %1 м.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстОшибки,
				Формат(ГрузОграничениеВысота/100,"ЧГ=0"));
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"ГрузМаксимальнаяВысота");
		КонецЕсли;
		
	КонецЕсли;
	
	
	Если ПереключательРасшифровки = 1 Тогда
	
		Если (ИмяРеквизита = "ГрузМаксимальныйВес")
			И ЗначениеЗаполнено(ГрузВес) 
			И ЗначениеЗаполнено(ГрузМаксимальныйВес)
			И ГрузМаксимальныйВес > ГрузВес Тогда
			
			ЕстьОшибки = Истина;
			Если ВыводитьПредупреждения Тогда
				ТекстОшибки = НСтр("ru='Общий вес меньше значения самого тяжелого места.'");
				ТекстСообщения = ТекстОшибки;
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"ГрузМаксимальныйВес");
			КонецЕсли;
			
		КонецЕсли;
		
		Если (ПроверитьВсе ИЛИ ИмяРеквизита = "ГрузМаксимальныйВес")
			И ЗначениеЗаполнено(ГрузМаксимальныйВес) 
			И ЗначениеЗаполнено(ГрузОграничениеВес)
			И ГрузМаксимальныйВес > ГрузОграничениеВес Тогда
			
			ЕстьОшибки = Истина;
			Если ВыводитьПредупреждения Тогда
				ТекстОшибки = НСтр("ru='Вес превышает максимальное значение, допустимо не более %1 т.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстОшибки,
					Формат(Цел(ГрузОграничениеВес/1000),"ЧГ=0"));
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"ГрузМаксимальныйВес");
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СписокВыбораТиповДокументовОснований()
	
	ТипыДокументов = Метаданные.ОпределяемыеТипы.ОснованиеЗаказаСервисДоставки.Тип.Типы();
	
	Для Каждого ТекущийТип Из ТипыДокументов Цикл
		
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТекущийТип);
		
		Если ОбъектМетаданных <> Неопределено
			И ПравоДоступа("Чтение", ОбъектМетаданных) Тогда
			
			ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
			Если ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(ОбъектМетаданных) Тогда
				СписокВыбораДокументовОснований.Добавить(ПолноеИмя, ОбъектМетаданных.Синоним);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРеквизит(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИмяРеквизита = Элемент.Имя + "Ссылка";
	ЭтотОбъект[ИмяРеквизита] = Неопределено;
	ОбработатьИзменениеРеквизитаФормы(ИмяРеквизита);
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонНачалоВыбора(Элемент, ЭтоНашаОрганизация)
	
	КонтактнаяИнформацияНачалоВыбора(Элемент, ?(ЭтоНашаОрганизация, 
												"ТелефонКонтактногоЛицаОрганизации",
												"ТелефонКонтактногоЛицаКонтрагента"));
КонецПроцедуры

&НаКлиенте
Процедура АдресНачалоВыбора(Элемент, ЭтоНашаОрганизация)

	КонтактнаяИнформацияНачалоВыбора(Элемент, ?(ЭтоНашаОрганизация, 
												"АдресСкладаОрганизации",
												"АдресСкладаКонтрагента"));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьАдресата(ИмяЭлемента)
	
	Если СтрНачинаетсяС(ИмяЭлемента, "Получатель") Тогда
		Адресат = "Получатель";
	ИначеЕсли СтрНачинаетсяС(ИмяЭлемента, "Отправитель") Тогда
		Адресат = "Отправитель";
	Иначе
		Адресат = "Плательщик";
	КонецЕсли;
	
	Возврат Адресат;
	
КонецФункции

&НаКлиенте
Процедура КонтактнаяИнформацияНачалоВыбора(Элемент, ВидКонтактнойИнформацииСтрока)
	
	ПараметрыВидаКонтактнойИнформации = ПараметрыВидаКонтактнойИнформации(ВидКонтактнойИнформацииСтрока);
	
	Если Не ЗначениеЗаполнено(ПараметрыВидаКонтактнойИнформации) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = Элемент.Имя;
	ПоследнийСимвол = Прав(ИмяРеквизита, 1);
	ИмяРеквизита = ?(ПоследнийСимвол = "1" Или ПоследнийСимвол = "2", Лев(ИмяРеквизита, СтрДлина(ИмяРеквизита) - 1),
		ИмяРеквизита);
	
	ИмяРеквизитаПредставление = ИмяРеквизита + "Представление";
	ИмяРеквизитаЗначенияПолей = ИмяРеквизита + "Значение";
	
	ЕстьИзменение = Ложь;
	Если Элемент.ТекстРедактирования <> ЭтотОбъект[ИмяРеквизитаПредставление] Тогда 
		ЭтотОбъект[ИмяРеквизитаПредставление] = Элемент.ТекстРедактирования;
		ЕстьИзменение = Истина;
	КонецЕсли;
	
	Если (ЭтотОбъект[ИмяРеквизитаЗначенияПолей] = ""
		И ЭтотОбъект[ИмяРеквизитаПредставление] <> "")
		ИЛИ ЕстьИзменение Тогда
		ЭтотОбъект[ИмяРеквизитаЗначенияПолей]
			= СервисДоставкиВызовСервера.КонтактнаяИнформацияПоПредставлению(ЭтотОбъект[ИмяРеквизитаПредставление],
			ПараметрыВидаКонтактнойИнформации.ТипНаименование);
		
	КонецЕсли;
		
	ЭтотОбъект[ИмяРеквизитаЗначенияПолей] = СервисДоставкиВызовСервера.АдресСДополнительнымиПолями(ПараметрыВидаКонтактнойИнформации.Тип, ЭтотОбъект[ИмяРеквизитаЗначенияПолей]);
	
	ПараметрыОткрытия = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
		ПараметрыВидаКонтактнойИнформации.Вид, ЭтотОбъект[ИмяРеквизитаЗначенияПолей],
		ЭтотОбъект[ИмяРеквизитаПредставление],, ПараметрыВидаКонтактнойИнформации.Тип);
		
	ПараметрыОткрытия.Вставить("Заголовок", Элемент.Заголовок);
	ПараметрыОткрытия.Вставить(
		"ТолькоПросмотр", 
		Элемент.ТолькоПросмотр 
		ИЛИ Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаКарточка);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяРеквизита", ИмяРеквизита);
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьФормуКонтактнойИнформацииЗавершение", ЭтотОбъект, 
								ДополнительныеПараметры);
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, ЭтотОбъект, Оповещение);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыВидаКонтактнойИнформации(ВидКонтактнойИнформацииСтрока)
	
	Возврат СервисДоставкиСлужебный.ПараметрыВидаКонтактнойИнформации(ВидКонтактнойИнформацииСтрока);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьИзменениеКонтактнойИнформации(Элемент, ТипКонтактнойИнформацииСтрока)
	
	ИмяРеквизита = Элемент.Имя;
	ИмяРеквизитаПредставление = ИмяРеквизита + "Представление";
	ИмяРеквизитаЗначенияПолей = ИмяРеквизита + "Значение";
	
	Если ТипКонтактнойИнформацииСтрока = "Телефон" Тогда
		
		Значение = СервисДоставкиВызовСервера.КонтактнаяИнформацияПоПредставлению(ЭтотОбъект[ИмяРеквизитаПредставление], ТипКонтактнойИнформацииСтрока);
		ЭтотОбъект[ИмяРеквизитаЗначенияПолей] = Значение;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	Отказ = Ложь;
	ПроверитьПредставлениеКонтактнойИнформации(ИмяРеквизита, Отказ);
	
	Если ЭтотОбъект[ИмяРеквизитаПредставление] <> Элемент.ТекстРедактирования Тогда
		ЭтотОбъект[ИмяРеквизитаПредставление] = Элемент.ТекстРедактирования;
	КонецЕсли;
	
	ЭтотОбъект[ИмяРеквизитаЗначенияПолей] = СервисДоставкиВызовСервера.КонтактнаяИнформацияПоПредставлению(ЭтотОбъект[ИмяРеквизитаПредставление],
		ТипКонтактнойИнформацииСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПредставлениеКонтактнойИнформации(Префикс, ЕстьОшибки)
	
	ОчиститьСообщения();
	
	Если Найти(Префикс, "Телефон") Тогда
		
		ПроверитьНомерТелефона(Префикс, ЕстьОшибки);
		
	ИначеЕсли Найти(Префикс, "Адрес") Тогда
		
		ЕстьИзменения = Ложь;
		ПроверитьДозаполнитьАдрес(Префикс, ЕстьОшибки, ЕстьИзменения);
		Если ЕстьИзменения Тогда
			ЗарегистрироватьИзменениеОтборов();
		КонецЕсли;
	ИначеЕсли Найти(Префикс, "Email") Тогда
		
		ПроверитьEmail(Префикс, ЕстьОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если (Не ЗначениеЗаполнено(Результат)) Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	ИмяРеквизита = ДополнительныеПараметры.ИмяРеквизита;
		
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ЕстьИзменения = Ложь;
		Реквизит = ЭтотОбъект[ИмяРеквизита + "Представление"];
		Если Результат.Свойство("Представление") 
			И (Реквизит <> Результат.Представление) Тогда
			Результат.Свойство("Представление", ЭтотОбъект[ИмяРеквизита + "Представление"]);
			ЕстьИзменения = Истина;
		КонецЕсли;
		
		Реквизит = ЭтотОбъект[ИмяРеквизита + "Значение"];
		Если Результат.Свойство("Значение") 
			И (Реквизит <> Результат.Значение) Тогда
			Результат.Свойство("Значение", ЭтотОбъект[ИмяРеквизита + "Значение"]);
			ЕстьИзменения = Истина;
		КонецЕсли;
		
		ОтборыИзменение = ОтборыИзменение ИЛИ ЕстьИзменения;
		
		Отказ = Ложь;
		ПроверитьПредставлениеКонтактнойИнформации(ИмяРеквизита, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьПометкиКомандШапки(Элементы)
	
	Элементы.ПерейтиОсновное.Пометка = Ложь;
	Элементы.ПерейтиГруз.Пометка = Ложь;
	Элементы.ПерейтиТарифы.Пометка = Ложь;
	Элементы.ПерейтиПараметрыТарифа.Пометка = Ложь;
	Элементы.ПерейтиПроверка.Пометка = Ложь;
	Элементы.ПерейтиКарточка.Пометка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеЗначенийОтборовТарифов(Отказ)
	
	ОчиститьСообщения();
	
	ЭлементыДереваСписка = ОтборыТарифов.ПолучитьЭлементы();
	ТекстОшибки = НСтр("ru='Значение поля ""%1"" услуги ""%2"" не заполнено'");
	
	Для Каждого ЭлементДереваСписка Из ЭлементыДереваСписка Цикл
		ЭлементыУслуги = ЭлементДереваСписка.ПолучитьЭлементы();
		Для Каждого ЭлементДереваСпискаУслуги Из ЭлементыУслуги Цикл
			Если ЭлементДереваСпискаУслуги.Использовать Тогда
				ЭлементыДереваСпискаУслугиСвойства = ЭлементДереваСпискаУслуги.ПолучитьЭлементы();
				Для Каждого ЭлементДереваСпискаУслугиСвойства Из ЭлементыДереваСпискаУслугиСвойства Цикл
					
					Если Не ЗначениеЗаполнено(ЭлементДереваСпискаУслугиСвойства.Значение) Тогда
						
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ТекстОшибки,
							ЭлементДереваСпискаУслугиСвойства.Наименование,
							ЭлементДереваСпискаУслуги.Наименование);
						ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,,Отказ);
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеАдресов(Отказ)

	Если ТипГрузоперевозки <> СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СДоставка() Тогда
		Возврат;
	КонецЕсли;
	
	ОтправкаОтАдреса = СпособОтгрузки = 2;
	ДоставкаДоАдреса = СпособДоставки = 2;
	
	ПолеОшибки = "";
	Если ОтправкаОтАдреса Тогда
		Если ПустаяСтрока(ОтправительАдресПредставление) Тогда
			ПолеОшибки = Элементы.ОтправительАдрес.Заголовок;
		КонецЕсли;
	Иначе
		Если ПустаяСтрока(ПунктПриемаГрузаНаименование) Тогда
			ПолеОшибки = Элементы.ОтправительТерминал.Заголовок;
		КонецЕсли;
	КонецЕсли;
	Если Не ПустаяСтрока(ПолеОшибки) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Поле ""%1"" не заполнено'"), ПолеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЕсли;

	ПолеОшибки = "";
	Если ДоставкаДоАдреса Тогда
		Если ПустаяСтрока(ПолучательАдресПредставление) Тогда
			ПолеОшибки = Элементы.ПолучательАдрес.Заголовок;
		КонецЕсли;
	Иначе
		Если ПустаяСтрока(ПунктВыдачиГрузаНаименование) Тогда
			ПолеОшибки = Элементы.ПолучательТерминал.Заголовок;
		КонецЕсли;
	КонецЕсли;
	Если Не ПустаяСтрока(ПолеОшибки) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Поле ""%1"" не заполнено'"), ПолеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОткрытие(Элемент)
	
	ИмяРеквизита = Элемент.Имя + "Ссылка";
	ИмяРеквизитаЭтоОрганизация = Элемент.Имя + "ЭтоОрганизация";
	
	ЗначениеРеквизита = ЭтотОбъект[ИмяРеквизита];
	ЭтоОрганизация = ЭтотОбъект[ИмяРеквизитаЭтоОрганизация];
	
	Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
		
		Если ЭтоОрганизация Тогда
			ОткрытьФормуОбъекта("ОрганизацияСервисДоставки", ИмяРеквизита);
		Иначе
			ОткрытьФормуОбъекта("КонтрагентСервисДоставки", ИмяРеквизита);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьВидаВремениОтгрузки()
	
	ВариантыВремениОтгрузки = СервисДоставкиПовтИсп.ВариантыВремениОтгрузки();
	
	ТипГрузоперевозкиСервис1СДоставка = (ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СДоставка());
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, Элементы.ГруппаВремяОтгрузки.Имя,
		"Видимость", Не ТипГрузоперевозкиСервис1СДоставка);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, Элементы.ПараметрыТарифаВремяДоставки.Имя,
		"Видимость", Не ТарифТолькоВремяДоставки);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, Элементы.ПараметрыТарифаВремяОтгрузки.Имя,
		"Видимость", Не ТарифТолькоВремяДоставки);

	Если Не ТипГрузоперевозкиСервис1СДоставка Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, Элементы.ДатаОтгрузки.Имя,
			"Видимость", ВариантВремениОтгрузки <> ВариантыВремениОтгрузки.КакМожноСкорее);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, Элементы.ВремяОтгрузкиК.Имя,
			"Видимость", ВариантВремениОтгрузки = ВариантыВремениОтгрузки.ВОпределенноеВремя);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, Элементы.ПериодОтгрузки.Имя,
			"Видимость", ВариантВремениОтгрузки = ВариантыВремениОтгрузки.ВТечениеДня);
		
		СпособОтображенияПодсказки = ?(ВариантВремениОтгрузки = ВариантыВремениОтгрузки.КакМожноСкорее, 
															ОтображениеПодсказки.Кнопка, ОтображениеПодсказки.Нет);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, Элементы.ВариантВремениОтгрузки.Имя,
					"ОтображениеПодсказки", СпособОтображенияПодсказки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюПоВремениОтгрузки(ТекущаяДата = Неопределено)
	
	ВариантыВремениОтгрузки = СервисДоставкиПовтИсп.ВариантыВремениОтгрузки();
	
	Если ВариантВремениОтгрузки = ВариантыВремениОтгрузки.ВОпределенноеВремя Тогда
		Если Не ТекущаяДата = Неопределено Тогда
			ВремяОтгрузкиК = ТекущаяДата+3600;
		КонецЕсли;
		ДатаОтгрузки = НачалоДня(ДатаОтгрузки) + (ВремяОтгрузкиК-НачалоДня(ВремяОтгрузкиК));
	Иначе
		ВремяОтгрузкиК = '00010101000000';
		ДатаОтгрузки = НачалоДня(ДатаОтгрузки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВариантВремениОтгрузкиПриИзмененииНаСервере()
	УстановитьВидимостьВидаВремениОтгрузки();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораВремениОтгрузки()
	
	// Список выбора варианта времени отгрузки
	СписокВыбора = Элементы.ВариантВремениОтгрузки.СписокВыбора;
	СписокВыбора.Очистить();
	
	ВариантыВремениОтгрузки = СервисДоставкиПовтИсп.ВариантыВремениОтгрузки();

	ВариантыВремениОтгрузкиСписокВыбора = СервисДоставкиПовтИсп.СписокВариантовВремениОтгрузки();

	Для Каждого Элемент Из ВариантыВремениОтгрузкиСписокВыбора Цикл
		
		Если Не ДоступныПериодыОтгрузки
			И ВариантВремениОтгрузки <> ВариантыВремениОтгрузки.ВТечениеДня 
			И Элемент.Значение = ВариантыВремениОтгрузки.ВТечениеДня Тогда
			Продолжить;
		КонецЕсли;

		СписокВыбора.Добавить(Элемент.Значение, Элемент.Представление);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораПериодовОтгрузки(ИзменятьПериодОтгрузки = Ложь)

	ВариантыВремениОтгрузки = СервисДоставкиПовтИсп.ВариантыВремениОтгрузки();
	Если Не ВариантВремениОтгрузки = ВариантыВремениОтгрузки.ВТечениеДня Тогда
		Возврат;
	КонецЕсли;
	
	// Список выбора периодов времени отгрузки
	СписокВыбора = Элементы.ПериодОтгрузки.СписокВыбора;
	СписокВыбора.Очистить();
	
	НайденныеПериоды = ДоступныеПериодыОтгрузки.НайтиСтроки(Новый Структура("ДатаОтгрузки", ДатаОтгрузки));
	Если НайденныеПериоды.Количество() Тогда
		
		НайденныйИдентификаторПериода = Неопределено;
		
		Для Каждого НайденныйПериод Из НайденныеПериоды Цикл
			СписокВыбора.Добавить(НайденныйПериод.ПолучитьИдентификатор(), НайденныйПериод.ПериодОтгрузкиПредставление);
			Если НайденныйИдентификаторПериода = Неопределено
				И НайденныйПериод.ВремяОтгрузкиС = ВремяОтгрузкиС
				И НайденныйПериод.ВремяОтгрузкиПо = ВремяОтгрузкиПо Тогда
				НайденныйИдентификаторПериода = НайденныйПериод.ПолучитьИдентификатор();
			КонецЕсли;
		КонецЦикла;
		
		Если НайденныйИдентификаторПериода = Неопределено Тогда
			ИзменятьПериодОтгрузки = Истина;
		Иначе
			ПериодОтгрузки = НайденныйИдентификаторПериода;
		КонецЕсли;
		
	ИначеЕсли Не ИзменятьПериодОтгрузки Тогда
		ВосстановитьТекущееЗначениеСпискаВыбораПериодовОтгрузки();
	Иначе
		СписокВыбора.Добавить(0, НСтр("ru='<...>'"));
	КонецЕсли;
	
	Если ИзменятьПериодОтгрузки Тогда
		ПериодОтгрузки = СписокВыбора[0].Значение;
		ИзменитьПериодОтгрузки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьПериодОтгрузки()
	
	ВариантыВремениОтгрузки = СервисДоставкиПовтИсп.ВариантыВремениОтгрузки();
	
	Если ВариантВремениОтгрузки = ВариантыВремениОтгрузки.ВТечениеДня Тогда
		НайденныйПериод = ДоступныеПериодыОтгрузки.НайтиПоИдентификатору(ПериодОтгрузки);
		
		Если НайденныйПериод = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ВремяОтгрузкиС = НайденныйПериод.ВремяОтгрузкиС;
		ВремяОтгрузкиПО = НайденныйПериод.ВремяОтгрузкиПо;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьТекущееЗначениеСпискаВыбораПериодовОтгрузки()

	НовыйПериод = ДоступныеПериодыОтгрузки.Добавить();
	НовыйПериод.ДатаОтгрузки = ДатаОтгрузки;
	НовыйПериод.ВремяОтгрузкиС = ВремяОтгрузкиС;
	НовыйПериод.ВремяОтгрузкиПо = ВремяОтгрузкиПо;
	НовыйПериод.ПериодОтгрузкиПредставление = Формат(ВремяОтгрузкиС, "ДФ=ЧЧ:мм; ДП=00:00") + " - " + Формат(ВремяОтгрузкиПо, "ДФ=ЧЧ:мм; ДП=00:00");

	Элементы.ПериодОтгрузки.СписокВыбора.Добавить(НовыйПериод.ПолучитьИдентификатор(), НовыйПериод.ПериодОтгрузкиПредставление);
	
	ПериодОтгрузки = НовыйПериод.ПолучитьИдентификатор();
	
КонецПроцедуры

#Область ЗапросыКСервису

&НаКлиенте
Процедура ПолучитьТарифы(ПолучитьТарифыАвтоматически = Ложь)
	
	РежимСозданияЗаказаПоУмолчанию = ПолучитьТарифыАвтоматически;
	
	ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания, ВыводитьСообщения");
	ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьТарифы();
	ПараметрыОперации.НаименованиеОперации = НСтр("ru = 'Поиск подходящих тарифов'");
	ПараметрыОперации.ВыводитьОкноОжидания = Ложь;
	ПараметрыОперации.ВыводитьСообщения = Ложь;
	Тарифы.Очистить();
	ИнформацияПоТарифу = Новый ТабличныйДокумент;
	
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьТариф()

	ВыделенныйТариф = "";
	
	ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
	ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьТариф();
	ПараметрыОперации.НаименованиеОперации = НСтр("ru = 'Обновление параметров тарифа'");
	ПараметрыОперации.ВыводитьОкноОжидания = Ложь;
	
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьУслугиТарифов()
	
	ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
	ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьУслугиТарифов();
	ПараметрыОперации.НаименованиеОперации = НСтр("ru = 'Получение услуг тарифов'");
	ПараметрыОперации.ВыводитьОкноОжидания = Ложь;
	
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИзменитьЗаказНаДоставку(ОформитьЗаказ = Ложь, ЗакрытьПослеЗавершенияОперации = Ложь)
	
	ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
	ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыСоздатьИзменитьЗаказНаДоставку();
	
	Если ЗначениеЗаполнено(ИдентификаторЗаказа) Тогда
		НаименованиеОперации = НСтр("ru = 'Сохранение заказа на доставку'");
	Иначе
		НаименованиеОперации = НСтр("ru = 'Создание заказа на доставку'");
	КонецЕсли;
	
	ПараметрыОперации.НаименованиеОперации = НаименованиеОперации;
	ПараметрыОперации.ВыводитьОкноОжидания = Истина;
	ПараметрыОперации.Вставить("ОформитьЗаказ", ОформитьЗаказ);
	ПараметрыОперации.Вставить("ЗакрытьПослеЗавершенияОперации", ЗакрытьПослеЗавершенияОперации);
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьЗаказНаДоставку(НаименованиеОперации = "", ЗакрытьПослеЗавершенияОперации = Ложь)
	
	ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
	ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыОформитьЗаказНаДоставку();
	
	Если НаименованиеОперации = "" Тогда
		НаименованиеОперации = НСтр("ru = 'Отправка заказа на доставку грузоперевозчику'");
	КонецЕсли;
	
	ПараметрыОперации.НаименованиеОперации = НаименованиеОперации;
	ПараметрыОперации.ВыводитьОкноОжидания = Истина;
	ПараметрыОперации.Вставить("ЗакрытьПослеЗавершенияОперации", ЗакрытьПослеЗавершенияОперации);
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьЗаказ(ЗакрытьПослеЗавершенияОперации = Ложь)
	
	ОчиститьСообщения();
	Отказ = Ложь;
	ПроверитьЗаполнениеОбязательныхРеквизитов(5, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Элементы.ПерейтиПроверка.Пометка Тогда
		ПерейтиКШагуПроверка();
	ИначеЕсли Модифицированность 
		Или ИдентификаторЗаказа = "" Тогда
		СоздатьИзменитьЗаказНаДоставку(Истина, ЗакрытьПослеЗавершенияОперации);
	Иначе
		ОформитьЗаказНаДоставку(,ЗакрытьПослеЗавершенияОперации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьЗаказНаДоставку(ПлатнаяОтмена = Ложь)
	
	ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
	ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыОтменитьЗаказНаДоставку();
	ПараметрыОперации.НаименованиеОперации = НСтр("ru = 'Отмена заказа на доставку.'");
	ПараметрыОперации.ВыводитьОкноОжидания = Истина;
	ПараметрыОперации.Вставить("ПлатнаяОтмена", ПлатнаяОтмена);
	
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаказНаДоставку()
	
	ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
	ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыОбновитьЗаказНаДоставку();
	ПараметрыОперации.НаименованиеОперации = НСтр("ru = 'Обновление данных по заказу на доставку'");
	ПараметрыОперации.ВыводитьОкноОжидания = Истина;
	
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

#КонецОбласти

#Область ВыполнитьЗапрос

&НаКлиенте
Процедура ВыполнитьЗапрос(ПараметрыОперации, Знач ОчищатьСообщения = Истина)
	
	ИнтернетПоддержкаПодключена = Ложь;
	
	Если ОчищатьСообщения = Истина Тогда
		ОчиститьСообщения();
	КонецЕсли; 
	
	ИмяФоновогоЗадания = "ФоновоеЗадание" + ПараметрыОперации.ИмяПроцедуры;
	ФоновоеЗадание = ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ПараметрыОперации);
	ЭтотОбъект[ИмяФоновогоЗадания] = ФоновоеЗадание;
	
	Если ИнтернетПоддержкаПодключена = Ложь Тогда
		
		// Загрузка с проверкой подключения интернет-поддержки.
		Оповещение = Новый ОписаниеОповещения("ВыполнитьЗапросПродолжение", ЭтотОбъект, ПараметрыОперации);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(Оповещение, ЭтотОбъект);
		Возврат;
		
	Иначе
		
		ПараметрыОперации.Вставить("ФоновоеЗадание", ФоновоеЗадание);
		ВыполнитьЗапросПродолжение(Истина, ПараметрыОперации);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	ИмяФоновогоЗадания = "ФоновоеЗадание"+ ДополнительныеПараметры.ИмяПроцедуры;
	
	Если Результат = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Отсутствует подключение к Интернет-поддержке пользователей.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("Логин") Тогда
		// Повторный вызов метода после подключения к Интернет-поддержке.
		ИнтернетПоддержкаПодключена = Ложь;
		ЭтотОбъект[ИмяФоновогоЗадания] = ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ДополнительныеПараметры);
		ДополнительныеПараметры.Добавить("ФоновоеЗадание", ЭтотОбъект[ИмяФоновогоЗадания]);
	КонецЕсли;
	
	Если ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтотОбъект[ИмяФоновогоЗадания].Статус = "Выполняется" Тогда
		
		ОжидатьЗавершениеВыполненияЗапроса(ДополнительныеПараметры);
		
	ИначеЕсли ЭтотОбъект[ИмяФоновогоЗадания].Статус = "Выполнено" Тогда
		
		ВыполнитьЗапросЗавершение(ЭтотОбъект[ИмяФоновогоЗадания], ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьЗавершениеВыполненияЗапроса(ПараметрыОперации)
	
	ВыводитьОкноОжидания = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОперации, "ВыводитьОкноОжидания", Ложь);
	ВыводитьОкноОжидания = ?(ВыводитьОкноОжидания = Неопределено, Ложь, ВыводитьОкноОжидания);
	ВыводитьСообщения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОперации, "ВыводитьСообщения", Истина);
	
	// Установка картинки длительной операции.
	Если Не ВыводитьОкноОжидания Тогда
		
		Если ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьУслугиТарифов() Тогда
			
			Элементы.ГруппаОжиданиеЗагрузкиОтборов.Видимость = Истина;
			Элементы.ОбновитьТарифы.Доступность = Ложь;
			
		ИначеЕсли ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьЗаказНаДоставку() Тогда
			
			Если РежимМастера = СервисДоставкиКлиентСервер.РежимМастераЗарегистрирован() Тогда
				Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОжиданиеЗагрузкиЗаказа;
			КонецЕсли;
			
		ИначеЕсли ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьТарифы() Тогда
			
			Элементы.ОбновитьТарифы.Картинка = БиблиотекаКартинок.СинхронизацияДанныхДлительнаяОперация;
			Элементы.ДекорацияСостояниеВыполненияЗапросаТарифы.Заголовок = НСтр("ru='Поиск подходящих тарифов...'");
			
		ИначеЕсли ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьТариф() Тогда
			
			Элементы.ГруппаОжиданияОбновленияТарифа.Видимость = Истина;
			Элементы.ГруппаПараметрыТарифа.ТолькоПросмотр = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Инициализация обработчик ожидания завершения.
	ИмяФоновогоЗадания = "ФоновоеЗадание" + ПараметрыОперации.ИмяПроцедуры;
	ФоновоеЗадание = ЭтотОбъект[ИмяФоновогоЗадания];
	ПараметрыОперации.Вставить("ФоновоеЗадание", ФоновоеЗадание);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения = ПараметрыОперации.НаименованиеОперации;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
	ПараметрыОжидания.ВыводитьОкноОжидания = ВыводитьОкноОжидания;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = ВыводитьСообщения;
	ПараметрыОжидания.Вставить("ИдентификаторЗадания", ФоновоеЗадание.ИдентификаторЗадания);
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ВыполнитьЗапросЗавершение",
		ЭтотОбъект, ПараметрыОперации);
		
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, ОбработкаЗавершения,	ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	// Инициализация.
	Отказ = Ложь;
	ТекстСообщения = "";
	ДанныеОбновлены = Ложь;
	
	ИмяФоновогоЗадания = "ФоновоеЗадание" + ДополнительныеПараметры.ИмяПроцедуры;
	ФоновоеЗадание = ЭтотОбъект[ИмяФоновогоЗадания];
	
	// Вывод сообщений из фонового задания.
	Если Результат = Неопределено ИЛИ ФоновоеЗадание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СервисДоставкиКлиент.ОбработатьРезультатФоновогоЗадания(Результат, ДополнительныеПараметры, Отказ);
	
	// Проверка результата поиска.
	Если Не Отказ И Результат.Статус = "Выполнено" Тогда
		Если ЗначениеЗаполнено(Результат.АдресРезультата)
			И ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда
			
			Если ДополнительныеПараметры.Свойство("ПараметрыОповещения") 
				И ДополнительныеПараметры.ФоновоеЗадание.ИдентификаторЗадания = ЭтотОбъект[ИмяФоновогоЗадания].ИдентификаторЗадания Тогда
				ПараметрыОповещения = ДополнительныеПараметры.ПараметрыОповещения;
				ПараметрыОповещения.Параметры.Вставить("ИмяФоновогоЗадания", ИмяФоновогоЗадания);
				ПроцедураОбработкиРезультата = Новый ОписаниеОповещения(ПараметрыОповещения.ИмяПроцедуры, ЭтотОбъект, ПараметрыОповещения.Параметры);
				
				ВыполнитьОбработкуОповещения(ПроцедураОбработкиРезультата, Результат);
			
			ИначеЕсли ДополнительныеПараметры.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыСоздатьИзменитьЗаказНаДоставку()
				И ДополнительныеПараметры.ФоновоеЗадание.ИдентификаторЗадания
				= ЭтотОбъект[ИмяФоновогоЗадания].ИдентификаторЗадания Тогда
					
				ОперацияВыполнена = Истина;
				ЭтоСоздание = (ИдентификаторЗаказа = "");
				ЗавершитьИзменениеОформленного = (РежимМастера = СервисДоставкиКлиентСервер.РежимМастераЗарегистрирован());
				ЗагрузитьРезультатСозданияЗаказа(Результат.АдресРезультата, ОперацияВыполнена);
				
				Если ОперацияВыполнена = Истина Тогда
					 
					Если ЭтоСоздание Тогда
						ТекстПояснения = НСтр("ru='Заказ на доставку создан.'");
						ТипОперации = НСтр("ru='Создание:'");
					Иначе
						ТекстПояснения = НСтр("ru='Заказ на доставку изменен.'");
						ТипОперации = НСтр("ru='Изменение:'");
					КонецЕсли;
					
					ПоказатьОповещениеПользователя(ТипОперации,, ТекстПояснения, БиблиотекаКартинок.Информация32);
					УстановитьВидимостьДоступностьОрганизации();
				КонецЕсли;
				
				ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено;
				ДанныеОбновлены = Истина;
				
				Если ОперацияВыполнена Тогда
					
					Модифицированность = Ложь;
					
					Если ЭтоСоздание 
						И Не ДополнительныеПараметры.ОформитьЗаказ Тогда
						Оповестить("ОбновитьСписокЗаказовНаДоставку", ТипГрузоперевозки);
					КонецЕсли;
					
					Если ЗавершитьИзменениеОформленного Тогда
						ПолучитьЗаказНаДоставку(Ложь);
						КлючиРеквизитовДляИзменения.Очистить();
					КонецЕсли; 
					
					ЗакрытьПослеЗавершенияОперации = Ложь;
					ДополнительныеПараметры.Свойство("ЗакрытьПослеЗавершенияОперации", ЗакрытьПослеЗавершенияОперации);
					
					Если ДополнительныеПараметры.ОформитьЗаказ Тогда
						ОформитьЗаказНаДоставку(,ЗакрытьПослеЗавершенияОперации);
					ИначеЕсли ЗакрытьПослеЗавершенияОперации Тогда
						Закрыть();
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ДополнительныеПараметры.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыОформитьЗаказНаДоставку()
				И ДополнительныеПараметры.ФоновоеЗадание.ИдентификаторЗадания
				= ЭтотОбъект[ИмяФоновогоЗадания].ИдентификаторЗадания Тогда
					
				РезультатОформленияЗаказаНаДоставку = 1;
				ЗагрузитьРезультатОформленияЗаказа(Результат.АдресРезультата, РезультатОформленияЗаказаНаДоставку);
				
				Если РезультатОформленияЗаказаНаДоставку = 1 Тогда 
					ТекстПояснения = НСтр("ru='Заказ на доставку передан к оформлению грузоперевозчику'");
					ТипОперации = НСтр("ru='Оформление:'");
					ПоказатьОповещениеПользователя(ТипОперации,, ТекстПояснения, БиблиотекаКартинок.Информация32);
				КонецЕсли;
				ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено;
				ДанныеОбновлены = Истина;
				
				ЗакрытьПослеЗавершенияОперации = Ложь;
				ДополнительныеПараметры.Свойство("ЗакрытьПослеЗавершенияОперации", ЗакрытьПослеЗавершенияОперации);
				
				Если РезультатОформленияЗаказаНаДоставку = 1 Тогда
					Оповестить("ОбновитьСписокЗаказовНаДоставку", ТипГрузоперевозки);
					Если ЗакрытьПослеЗавершенияОперации Тогда 
						Закрыть();
					КонецЕсли;
				ИначеЕсли РезультатОформленияЗаказаНаДоставку = 2 Тогда
					ОформитьЗаказНаДоставку(НСтр("ru='Расчет стоимости заказа на доставку'"),ЗакрытьПослеЗавершенияОперации);
				КонецЕсли;
				
			ИначеЕсли ДополнительныеПараметры.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьТарифы()
				И ДополнительныеПараметры.ФоновоеЗадание.ИдентификаторЗадания
				= ЭтотОбъект[ИмяФоновогоЗадания].ИдентификаторЗадания Тогда
				
				ЗагрузитьРезультатПолученияТарифов(Результат.АдресРезультата);
				ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено;
				СформироватьПредставлениеТарифаИГрузоперевозчика();
				ОтборыИзменение = Ложь;
				СформироватьНадписьОтбора();
				ДанныеОбновлены = Истина;
				
				// Если получение тарифов запущено автоматически и заполнен тариф по умолчанию, то необходимо перейти
				// на сразу вкладку "Проверка" или "Параметры тарифа".
				Если РежимСозданияЗаказаПоУмолчанию 
					И ТарифИдентификатор <> "" Тогда
					ПерейтиКТекущемуШагуМастера(Ложь);
					РежимСозданияЗаказаПоУмолчанию = Ложь;
				КонецЕсли;
				
			ИначеЕсли ДополнительныеПараметры.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьТариф()
				И ДополнительныеПараметры.ФоновоеЗадание.ИдентификаторЗадания
				= ЭтотОбъект[ИмяФоновогоЗадания].ИдентификаторЗадания Тогда
				
				ЗагрузитьРезультатПолученияТарифа(Результат.АдресРезультата);
				ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено;
				СформироватьЗаголовокГруппыДополнительныхУслуг();
				СформироватьПредставлениеТарифаИГрузоперевозчика();
				ДанныеОбновлены = Истина;
				
			ИначеЕсли ДополнительныеПараметры.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьУслугиТарифов()
				И ДополнительныеПараметры.ФоновоеЗадание.ИдентификаторЗадания
				= ЭтотОбъект[ИмяФоновогоЗадания].ИдентификаторЗадания Тогда
				
				ОперацияВыполнена = Истина;
				ЗагрузитьРезультатПолученияУслугТарифов(Результат.АдресРезультата, ОперацияВыполнена);
				РазвернутьРодителейСпискаСВыбраннымиСтроками();
				ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено;
				Если ОперацияВыполнена Тогда
					ПроверитьЗаполнениеЗначенийОтборовТарифов(Отказ);
					Если Не Отказ Тогда
						Элементы.ГруппаОтборы.Скрыть();
						ОбработатьИзменениеВариантовДоставки();
						
						Если РежимМастера = СервисДоставкиКлиентСервер.РежимМастераНовый()
							И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаТарифы Тогда
							ОбработатьПрименениеОтборов(, Ложь);
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
				ДанныеОбновлены = Истина;
				
				ПолучитьТарифыАвтоматически();
				
			ИначеЕсли ДополнительныеПараметры.ИмяПроцедуры
				= СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьЗаказНаДоставку()
				И ДополнительныеПараметры.ФоновоеЗадание.ИдентификаторЗадания
				= ЭтотОбъект[ИмяФоновогоЗадания].ИдентификаторЗадания Тогда
				
				ДанныеОбновлены = Истина;
				ЗагрузитьРезультатПолученияЗаказаНаДоставку(Результат.АдресРезультата, ДанныеОбновлены);
				ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено;
				Если ДанныеОбновлены Тогда
					УстановитьДоступностьДополнительныхТелефонов();
					УстановитьВидимостьДоступностьНаСтраницеОсновная();
					ОбновитьФормуДляДокументаОснования();
					СформироватьПредставлениеТарифаИГрузоперевозчика();
					Если РежимМастера = СервисДоставкиКлиентСервер.РежимМастераЧерновик() Тогда
						ПерейтиКТекущемуШагуМастера(Ложь);
						ПолучитьУслугиТарифов();
						ТарифыУстановитьРежимСортировки(ТарифыРежимСортировки);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ДокументОснованиеДляДобавления) Тогда
						РежимИзмененияСоставаОснований = 0;
						Если ЭтотОбъект.ДокументыОснования.Количество() > 0 Тогда
							НайденныйЭлемент = ЭтотОбъект.ДокументыОснования.НайтиПоЗначению(ДокументОснованиеДляДобавления);
							Если НайденныйЭлемент = Неопределено Тогда
								РежимИзмененияСоставаОснований = 1;
								ЭтотОбъект.ДокументыОснования.Добавить(ДокументОснованиеДляДобавления);
							КонецЕсли;
						Иначе
							ЭтотОбъект.ДокументыОснования.Добавить(ДокументОснованиеДляДобавления);
							РежимИзмененияСоставаОснований = 2; 
						КонецЕсли;
						
						Если РежимИзмененияСоставаОснований <> 0 Тогда
							ОбработатьИзменениеРеквизитаФормы("ДокументыОснования");
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ДополнительныеПараметры.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыОбновитьЗаказНаДоставку()
				И ДополнительныеПараметры.ФоновоеЗадание.ИдентификаторЗадания
				= ЭтотОбъект[ИмяФоновогоЗадания].ИдентификаторЗадания Тогда
					
				ЗагрузитьРезультатОбновленияЗаказа(Результат.АдресРезультата, ДанныеОбновлены);
				
				Если ДанныеОбновлены Тогда
					ЗагрузитьРезультатПолученияЗаказаНаДоставку(Результат.АдресРезультата, ДанныеОбновлены);
					Если ДанныеОбновлены Тогда
						ПолучитьУслугиТарифов();
						ТарифыУстановитьРежимСортировки(ТарифыРежимСортировки);
						УстановитьВидимостьДоступностьНаСтраницеОсновная();
						ОбновитьФормуДляДокументаОснования();
						СформироватьПредставлениеТарифаИГрузоперевозчика();
					КонецЕсли;
				КонецЕсли;
				
				ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено;
				
			ИначеЕсли ДополнительныеПараметры.ИмяПроцедуры
				= СервисДоставкиКлиентСервер.ИмяПроцедурыОтменитьЗаказНаДоставку()
				И ДополнительныеПараметры.ФоновоеЗадание.ИдентификаторЗадания
				= ЭтотОбъект[ИмяФоновогоЗадания].ИдентификаторЗадания Тогда
				
				РезультатОтмены = 0;
				СуммаОтмены = 0;
				ЗагрузитьРезультатОтменыЗаказа(Результат.АдресРезультата, РезультатОтмены, СуммаОтмены);
				Если РезультатОтмены = 1 Тогда //Отменен
					
					ТекстПояснения = НСтр("ru='Заказ на доставку отменен.'");
					ПоказатьОповещениеПользователя(НСтр("ru='Отмена:'"),, ТекстПояснения, БиблиотекаКартинок.Информация32);
					Оповестить("ОбновитьСписокЗаказовНаДоставку", ТипГрузоперевозки);
					Модифицированность = Ложь;
					Закрыть();
					
				ИначеЕсли РезультатОтмены = 2 Тогда //Возможна платная отмена
					
					ОписаниеОЗавершении = Новый ОписаниеОповещения("ЗавершениеОтменитьЗаказ", ЭтотОбъект);
					
					СписокКнопок = Новый СписокЗначений();
					СписокКнопок.Добавить(КодВозвратаДиалога.Повторить, НСтр("ru='Да'"));
					СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
					
					ТекстСообщения = НСтр("ru='Доступна только платная отмена заказа.'");
					Если СуммаОтмены > 0 Тогда
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Сумма отмены заказа %1.'"), СуммаОтмены);
					КонецЕсли;
						
					ТекстСообщения = ТекстСообщения + НСтр("ru='Отменить платно заказ?'");
					ПоказатьВопрос(ОписаниеОЗавершении, ТекстСообщения, СписокКнопок);
					
				ИначеЕсли РезультатОтмены = 3 Тогда //Отмена заказа уже невозможна
					
					ТекстПояснения = НСтр("ru='Заказ на доставку невозможно отменить.'");
					ПоказатьОповещениеПользователя(НСтр("ru='Отмена:'"),, ТекстПояснения, БиблиотекаКартинок.Информация32);
					
				КонецЕсли;
				ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено;
				ДанныеОбновлены = Истина;
				
			ИначеЕсли ДополнительныеПараметры.ИмяПроцедуры
				= СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьГрузоперевозчиков() Тогда
				
				// Загрузка результатов поиска.
				ЗагрузитьРезультатПолученияСпискаПеревозчиков(Результат.АдресРезультата);
				ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено;
				ДанныеОбновлены = Истина;
				
				СформироватьПредставлениеГрузоперевозчика();
				ПолучитьТарифыАвтоматически();
				
			ИначеЕсли ДополнительныеПараметры.ИмяПроцедуры 
				= СервисДоставкиКлиентСервер.ИмяПроцедурыУстановитьТарифПоУмолчанию() Тогда
				
				ОперацияВыполнена = Истина;
				ЗагрузитьРезультатУстановкиТарифаПоУмолчанию(Результат.АдресРезультата, ОперацияВыполнена);
				ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено;
				ДанныеОбновлены = Истина;
				
			ИначеЕсли ДополнительныеПараметры.ИмяПроцедуры 
				= СервисДоставкиКлиентСервер.ИмяПроцедурыСброситьТарифПоУмолчанию() Тогда
				
				ОперацияВыполнена = Истина;
				ЗагрузитьРезультатСбросаТарифаПоУмолчанию(Результат.АдресРезультата, ОперацияВыполнена);
				ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено;
				ДанныеОбновлены = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПараметрыЗапроса

&НаСервере
Функция ПараметрыЗапроса(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = Новый Структура();
	
	ИмяПроцедуры = ПараметрыОперации.ИмяПроцедуры;
	
	Если ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьУслугиТарифов() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаПолучитьУслугиТарифов(ПараметрыОперации, Отказ);
	ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьТарифы() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаПолучитьТарифы(ПараметрыОперации, Отказ);
	ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьТариф() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаПолучитьТарифы(ПараметрыОперации, Отказ);
	ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыСоздатьИзменитьЗаказНаДоставку() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаСоздатьИзменитьЗаказНаДоставку(ПараметрыОперации, Отказ);
	ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыОформитьЗаказНаДоставку() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаОформитьЗаказНаДоставку(ПараметрыОперации, Отказ);
	ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьЗаказНаДоставку() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаПолучитьЗаказНаДоставку(ПараметрыОперации, Отказ);
	ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыОбновитьЗаказНаДоставку() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаОбновитьЗаказНаДоставку(ПараметрыОперации, Отказ);
	ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыОтменитьЗаказНаДоставку() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаОтменитьЗаказНаДоставку(ПараметрыОперации, Отказ);
	ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьТипыГрузоперевозки() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаПолучитьТипыГрузоперевозки(ПараметрыОперации, Отказ);
	ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьГрузоперевозчиков() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаПолучитьГрузоперевозчиков(ПараметрыОперации, Отказ);
	ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыУстановитьТарифПоУмолчанию() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаУстановитьТарифПоУмолчанию(ПараметрыОперации, Отказ);
	ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыСброситьТарифПоУмолчанию() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаУстановитьТарифПоУмолчанию(ПараметрыОперации, Отказ);
	ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьДоступныеДляИзмененияРеквизиты() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаПолучитьДоступныеДляИзмененияРеквизиты(ПараметрыОперации, Отказ);
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаПолучитьУслугиТарифов(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаПолучитьУслугиТарифов();
	
	ПараметрыЗапроса.ТипГрузоперевозки = ТипГрузоперевозки;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаПолучитьЗаказНаДоставку(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаПолучитьЗаказНаДоставку();
	ПараметрыЗапроса.Вставить("Идентификатор", ИдентификаторЗаказа);

	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаОбновитьЗаказНаДоставку(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаОбновитьЗаказНаДоставку();
	ПараметрыЗапроса.Вставить("Идентификатор", ИдентификаторЗаказа);

	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаОтменитьЗаказНаДоставку(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаОтменитьЗаказНаДоставку();
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗаказа)
		ИЛИ Не ДоступнаОтмена Тогда
		ТекстСообщения = НСтр("ru='Отмена данного заказа недоступна. Невозможно отменить заказ.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Отказ = Истина;
		Возврат ПараметрыЗапроса;
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("Идентификатор", ИдентификаторЗаказа);
	ПараметрыЗапроса.Вставить("ОтменитьЗаказПлатно", ?(ПараметрыОперации.ПлатнаяОтмена, "1", "0"));
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаПолучитьТарифы(ПараметрыОперации, Отказ)
	
	Результат = СервисДоставки.НовыйПараметрыЗапросаПолучитьТарифы();
	
	ЗаполнитьЗначенияСвойств(Результат, ЭтотОбъект);
	
	Если СписокГрузоперевозчиков.Количество() = 1 Тогда
		Результат.ГрузоперевозчикИдентификатор = ГрузоперевозчикИдентификатор;
	КонецЕсли;
	
	Результат.ЗаказчикРоль = ?(ЗначениеЗаполнено(ЗаказчикРоль), ЗаказчикРоль, 3);	
	Если ЗаказчикРоль = 1 Тогда
		ЗаказчикИНН = ОтправительКонтрагентИНН;
	ИначеЕсли ЗаказчикРоль = 2 Тогда
		ЗаказчикИНН = ПолучательКонтрагентИНН;
	ИначеЕсли ЗаказчикРоль = 3 Тогда
		Если ПлательщикРоль = 1 Тогда
			ЗаказчикИНН = ОтправительКонтрагентИНН;
		ИначеЕсли ПлательщикРоль = 2 Тогда
			ЗаказчикИНН = ПолучательКонтрагентИНН;
		Иначе
			ЗаказчикИНН = ПлательщикКонтрагентИНН;
		КонецЕсли;
	Иначе
		ЗаказчикИНН = "";
	КонецЕсли;
	Результат.Вставить("ЗаказчикИНН", ЗаказчикИНН);
	
	Результат.ОтправительАдрес = ОтправительАдресПредставление; //Полный адрес
	Результат.ОтправительАдресЗначение = Новый ХранилищеЗначения(ОтправительАдресЗначение,
		Новый СжатиеДанных(9)); //Формат JSON 1С:БСП
	
	Результат.ПолучательАдрес = ПолучательАдресПредставление; //Полный адрес
	Результат.ПолучательАдресЗначение = Новый ХранилищеЗначения(ПолучательАдресЗначение,
		Новый СжатиеДанных(9)); //Формат JSON 1С:БСП
		
	Если ПустаяСтрока(ПлательщикАдресПредставление) Тогда
		Если ПлательщикРоль = 1 Тогда
			Если ПустаяСтрока(ОтправительАдресПредставление) Тогда
				УстановленныйПлательщикАдрес = ОтправительКонтрагентЮридическийАдресПредставление;
				УстановленныйПлательщикАдресЗначение = ОтправительКонтрагентЮридическийАдресЗначение;
			Иначе
				УстановленныйПлательщикАдрес = ОтправительАдресПредставление;
				УстановленныйПлательщикАдресЗначение = ОтправительАдресЗначение;
			КонецЕсли;
		ИначеЕсли ПлательщикРоль = 2 Тогда
			Если ПустаяСтрока(ПолучательАдресПредставление) Тогда
				УстановленныйПлательщикАдрес = ПолучательКонтрагентЮридическийАдресПредставление;
				УстановленныйПлательщикАдресЗначение = ПолучательКонтрагентЮридическийАдресЗначение;
			Иначе
				УстановленныйПлательщикАдрес = ПолучательАдресПредставление;
				УстановленныйПлательщикАдресЗначение = ПолучательАдресЗначение;
			КонецЕсли;
		Иначе
			УстановленныйПлательщикАдрес = ПлательщикКонтрагентЮридическийАдресПредставление;
			УстановленныйПлательщикАдресЗначение = ПлательщикКонтрагентЮридическийАдресЗначение;	
		КонецЕсли;
	Иначе
		УстановленныйПлательщикАдрес = ПлательщикАдресПредставление;
		УстановленныйПлательщикАдресЗначение = ПлательщикАдресЗначение;	
	КонецЕсли;
	Результат.ПлательщикАдрес = УстановленныйПлательщикАдрес; //Полный адрес
	Результат.ПлательщикАдресЗначение = Новый ХранилищеЗначения(УстановленныйПлательщикАдресЗначение,
			Новый СжатиеДанных(9)); //Формат JSON 1С:БСП	
	
	Результат.ГрузОбщийВес = ГрузВес;
	Результат.ГрузОбщийОбъем = ГрузОбъем;
	
	Для Каждого ТекущаяУслуга Из УслугиТарифов Цикл
		Если ТекущаяУслуга.Использовать Тогда
			НоваяУслуга = Результат.Услуги.Добавить();
			НоваяУслуга.Идентификатор = ТекущаяУслуга.Идентификатор;
			НоваяУслуга.Свойства = Новый Массив();
			Для Каждого ТекущееСвойство Из ТекущаяУслуга.Свойства Цикл
				ПараметрыСвойстваУслуги = СервисДоставки.НовыйПараметрыСвойстваУслуги();
				ПараметрыСвойстваУслуги.Идентификатор = ТекущееСвойство.Идентификатор;
				ПараметрыСвойстваУслуги.Значение = ТекущееСвойство.Значение;
				НоваяУслуга.Свойства.Добавить(ПараметрыСвойстваУслуги);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СДоставка() Тогда
		Для Каждого Элемент Из ТарифДополнительныеУслуги.ПолучитьЭлементы() Цикл
			Для Каждого ТекущаяУслуга Из Элемент.ПолучитьЭлементы() Цикл
				НоваяУслуга = Результат.Услуги.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяУслуга, ТекущаяУслуга);
				НоваяУслуга.Свойства = Новый Массив;
				ПараметрыСвойстваУслуги = СервисДоставки.НовыйПараметрыСвойстваУслуги();
				ПараметрыСвойстваУслуги.Значение = ТекущаяУслуга.Использовать;
				НоваяУслуга.Свойства.Добавить(ПараметрыСвойстваУслуги);
				Для Каждого ТекущееСвойство Из ТекущаяУслуга.ПолучитьЭлементы() Цикл
					ПараметрыСвойстваУслуги = СервисДоставки.НовыйПараметрыСвойстваУслуги();
					ЗаполнитьЗначенияСвойств(ПараметрыСвойстваУслуги, ТекущееСвойство);
					НоваяУслуга.Свойства.Добавить(ПараметрыСвойстваУслуги);
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Для каждого СтрокаТовара Из ТоварныйСостав Цикл
		НовыйТовар = Результат.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйТовар, СтрокаТовара);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаСоздатьИзменитьЗаказНаДоставку(ПараметрыОперации, Отказ)
	
	Результат = СервисДоставки.НовыйПараметрыЗапросаСоздатьИзменитьЗаказНаДоставку();
	Результат.КлючИдемпотентности = КлючИдемпотентности;
	Для Каждого ТекДокументОснование Из ДокументыОснования Цикл
		Результат.ДокументыОснованияИдентификаторы.Добавить(ТекДокументОснование.Значение.УникальныйИдентификатор());
	КонецЦикла;
	
	Если ПлательщикРоль = 0 Тогда
		ПлательщикРоль = ?(ОтправительКонтрагентЭтоОрганизация, 1, 2); //1 - отправитель, 2 - получатель, 3 - третье лицо
	КонецЕсли;
	
	РеквизитыФормы = ПолучитьРеквизиты();
	ДанныеФормы = Новый Структура();
	Для Каждого ТекущийРеквизит Из РеквизитыФормы Цикл
		ДанныеФормы.Вставить(ТекущийРеквизит.Имя, ЭтотОбъект[ТекущийРеквизит.Имя]);
	КонецЦикла;
	СервисДоставкиКлиентСервер.ЗаполнитьСтруктуруПоЛинейнымДанным(Результат, ДанныеФормы);
	
	Для Каждого ТекущаяУслуга Из УслугиТарифа Цикл
		Если ТекущаяУслуга.Использовать Тогда
			НоваяУслуга = Результат.Услуги.Добавить();
			НоваяУслуга.Идентификатор = ТекущаяУслуга.Идентификатор;
			НоваяУслуга.Свойства = Новый Массив();
			Для Каждого ТекущееСвойство Из ТекущаяУслуга.Свойства Цикл
				ПараметрыСвойстваУслуги = СервисДоставки.НовыйПараметрыСвойстваУслуги();
				ПараметрыСвойстваУслуги.Идентификатор = ТекущееСвойство.Идентификатор;
				ПараметрыСвойстваУслуги.Значение = ТекущееСвойство.Значение;
				НоваяУслуга.Свойства.Добавить(ПараметрыСвойстваУслуги);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекущаяПозиция Из ТоварныйСостав Цикл
		НоваяПозиция = Результат.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяПозиция, ТекущаяПозиция);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаОформитьЗаказНаДоставку(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаОформитьЗаказНаДоставку();
	ПараметрыЗапроса.Идентификатор = ИдентификаторЗаказа;
	ПараметрыЗапроса.ТипГрузоперевозки = ТипГрузоперевозки;

	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаПолучитьТипыГрузоперевозки(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаПолучитьТипыГрузоперевозки();
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаПолучитьГрузоперевозчиков(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаПолучитьГрузоперевозчиков();
	
	Если ЗначениеЗаполнено(ТипГрузоперевозки) Тогда
		ПараметрыЗапроса.ТипГрузоперевозки = ТипГрузоперевозки;
	Иначе
		ТекстОшибки = НСтр("ru='Не выбран тип грузоперевозки.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Отказ = Истина;
	КонецЕсли;
	
	ПараметрыЗапроса.ГрузоперевозчикИНН = ГрузоперевозчикИНН;
	ПараметрыЗапроса.ГрузоперевозчикКПП = ГрузоперевозчикКПП;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаУстановитьТарифПоУмолчанию(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаУстановитьТарифПоУмолчанию();
	
	ПараметрыЗапроса.Вставить("ГрузоперевозчикИдентификатор", ПараметрыОперации.ГрузоперевозчикИдентификатор);
	ПараметрыЗапроса.Вставить("ТарифИдентификатор", ПараметрыОперации.ТарифИдентификатор);
	ПараметрыЗапроса.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаПолучитьДоступныеДляИзмененияРеквизиты(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаПолучитьДоступныеДляИзмененияРеквизиты();
	ПараметрыЗапроса.Вставить("Идентификатор", ИдентификаторЗаказа);

	Возврат ПараметрыЗапроса;
	
КонецФункции

#КонецОбласти

#Область ЗагрузитьРезультаты

&НаСервере
Процедура ЗагрузитьРезультатПолученияУслугТарифов(АдресРезультата, ОперацияВыполнена = Истина)
	
	Элементы.ГруппаОжиданиеЗагрузкиОтборов.Видимость = Ложь;
	Элементы.ОбновитьТарифы.Доступность = Истина;
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		
		Если Результат <> Неопределено Тогда
		
			Если Результат.Свойство("Список") Тогда
				ЗагрузитьУслугиТарифовДляТипаГрузоперевозки(Результат.Список);
			Иначе
				ОперацияВыполнена = Ложь;
			КонецЕсли;
			
			Если Результат.Свойство("СписокНесовместимыеУслуги") Тогда
				ЗагрузитьНесовместимыеУслуги(Результат.СписокНесовместимыеУслуги);
			Иначе
				ОперацияВыполнена = Ложь;
			КонецЕсли;
			
			Если Результат.Свойство("Ошибки") Тогда
				Если ТипЗнч(Результат.Ошибки) = Тип("Массив") Тогда
					Для Каждого ТекущаяОшибка Из Результат.Ошибки Цикл
						ОбщегоНазначения.СообщитьПользователю(ТекущаяОшибка);
					КонецЦикла;
				КонецЕсли;
				ОперацияВыполнена = Ложь;
			КонецЕсли;
		Иначе
			ОперацияВыполнена = Ложь;
		КонецЕсли;
	Иначе
		ОперацияВыполнена = Ложь;
	КонецЕсли;
	
	Если ОперацияВыполнена Тогда
		СформироватьОтборыТарифов(Истина);
		СформироватьПараметрыОтбора();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьУслугиТарифовДляТипаГрузоперевозки(Услуги)
	
	УслугиТарифов.Очистить();
	
	ИдентификаторУслугиОтгрузки = ?(СпособОтгрузки = 1, "000000002", "000000001");
	ИдентификаторУслугиДоставки = ?(СпособДоставки = 1, "000000004", "000000003");
	
	Элементы.ОтправительСпособОтгрузки.СписокВыбора.Очистить();
	Элементы.ПолучательСпособДоставки.СписокВыбора.Очистить();
	
	Для Каждого ТекущаяУслуга Из Услуги Цикл
		
		ДобавитьПредопределенныеУслуги(ТекущаяУслуга.Идентификатор);
		
		НоваяУслуга = УслугиТарифов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяУслуга, ТекущаяУслуга,,"Свойства");
		
		НоваяУслуга.Использовать = (НоваяУслуга.Идентификатор = ИдентификаторУслугиОтгрузки
									ИЛИ НоваяУслуга.Идентификатор = ИдентификаторУслугиДоставки);
									
		НайденныеСтроки = УслугиТарифа.НайтиСтроки(Новый Структура("Идентификатор", НоваяУслуга.Идентификатор));
		
		БратьЗначенияИзТарифа = НайденныеСтроки.Количество();
		Если БратьЗначенияИзТарифа Тогда
			ДанныеИзТарифа = НайденныеСтроки[0];
			НоваяУслуга.Использовать = ДанныеИзТарифа.Использовать;
		КонецЕсли;
			
		Для Каждого ТекущееСвойство Из ТекущаяУслуга.Свойства Цикл
			
			НовоеСвойство = НоваяУслуга.Свойства.Добавить();
			ЗаполнитьЗначенияСвойств(НовоеСвойство, ТекущееСвойство);
			НовоеСвойство.Значение = НовоеСвойство.ТипЗначения.ПривестиЗначение(НовоеСвойство.Значение);
			
			Если БратьЗначенияИзТарифа Тогда
				НайденныеСвойства = ДанныеИзТарифа.Свойства.НайтиСтроки(Новый Структура("Идентификатор",
					НовоеСвойство.Идентификатор));
					
				Если НайденныеСвойства.Количество() Тогда
					НовоеСвойство.Значение = НайденныеСвойства[0].Значение;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Элементы.ОтправительСпособОтгрузки.ТолькоПросмотр = Ложь;
	Элементы.ПолучательСпособДоставки.ТолькоПросмотр = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНесовместимыеУслуги(Услуги)
	
	НесовместимыеУслуги.Очистить();
	
	Для Каждого ТекущаяУслуга Из Услуги Цикл
		НоваяУслуга = НесовместимыеУслуги.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяУслуга, ТекущаяУслуга);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПредопределенныеУслуги(ИдентификаторУслуги)
	
	Если ИдентификаторУслуги = "000000002" И Элементы.СпособОтгрузки.СписокВыбора.НайтиПоЗначению(1) = Неопределено Тогда
		Элементы.СпособОтгрузки.СписокВыбора.Добавить(1, ПредставлениеСпособаОтгрузки(1));
		Элементы.ОтправительСпособОтгрузки.СписокВыбора.Добавить(1, ПредставлениеСпособаОтгрузки(1));
	КонецЕсли;
	
	Если ИдентификаторУслуги = "000000001" И Элементы.СпособОтгрузки.СписокВыбора.НайтиПоЗначению(2) = Неопределено Тогда
		Элементы.СпособОтгрузки.СписокВыбора.Добавить(2, ПредставлениеСпособаОтгрузки(2));
		Элементы.ОтправительСпособОтгрузки.СписокВыбора.Добавить(2, ПредставлениеСпособаОтгрузки(2));
	КонецЕсли;
	
	Если ИдентификаторУслуги = "000000004" И Элементы.СпособДоставки.СписокВыбора.НайтиПоЗначению(1) = Неопределено Тогда
		Элементы.СпособДоставки.СписокВыбора.Добавить(1, ПредставлениеСпособаДоставки(1));
		Элементы.ПолучательСпособДоставки.СписокВыбора.Добавить(1, ПредставлениеСпособаДоставки(1));
	КонецЕсли;
	
	Если ИдентификаторУслуги = "000000003" И Элементы.СпособДоставки.СписокВыбора.НайтиПоЗначению(2) = Неопределено Тогда
		Элементы.СпособДоставки.СписокВыбора.Добавить(2, ПредставлениеСпособаДоставки(2));
		Элементы.ПолучательСпособДоставки.СписокВыбора.Добавить(2, ПредставлениеСпособаДоставки(2));
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПредставлениеСпособаОтгрузки(СпособОтгрузки)
	
	Возврат СпособыОтгрузки().Получить(СпособОтгрузки);

КонецФункции

&НаСервере
Функция ПредставлениеСпособаДоставки(СпособДоставки)
	
	Возврат СпособыДоставки().Получить(СпособДоставки);

КонецФункции

&НаСервере
Функция СпособыОтгрузки()
	
	СпособыОтгрузки = Новый Соответствие();
	
	СпособыОтгрузки.Вставить(1, НСтр("ru='Самопривоз'"));
	СпособыОтгрузки.Вставить(2, НСтр("ru='Забор от адреса'"));
	
	Возврат СпособыОтгрузки;

КонецФункции

&НаСервере
Функция СпособыДоставки()
	
	СпособыДоставки = Новый Соответствие();
	
	СпособыДоставки.Вставить(1, НСтр("ru='Самовывоз'"));
	СпособыДоставки.Вставить(2, НСтр("ru='Доставка до адреса'"));
	
	Возврат СпособыДоставки;

КонецФункции


&НаСервере
Процедура ЗагрузитьРезультатПолученияТарифов(АдресРезультата)
	
	Элементы.ОбновитьТарифы.Картинка = БиблиотекаКартинок.Обновить;
	
	СостояниеВыполненияЗапроса = "";
	Тарифы.Очистить();
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		
		Если Результат <> Неопределено Тогда
		
			ДоступныПериодыОтгрузки = Результат.ДоступныПериодыОтгрузки;

			Если Результат.Свойство("Список") Тогда
				
				МассивТарифовПоУмолчанию = Новый Массив();
				Для Каждого ТекущаяСтрока Из Результат.Список Цикл
					
					НоваяСтрока = Тарифы.Добавить();
					
					НоваяСтрока.ГрузоперевозчикИдентификатор = ТекущаяСтрока.ГрузоперевозчикИдентификатор;
					НоваяСтрока.ГрузоперевозчикНаименование = ТекущаяСтрока.ГрузоперевозчикНаименование;
					НоваяСтрока.ТарифИдентификатор = ТекущаяСтрока.ТарифИдентификатор;
					НоваяСтрока.ТарифНаименование = ТекущаяСтрока.ТарифНаименование;
					НоваяСтрока.Стоимость = ТекущаяСтрока.Стоимость;
					НоваяСтрока.СуммаСкидки = ТекущаяСтрока.СуммаСкидки;
					НоваяСтрока.МинимальныйСрок = ТекущаяСтрока.МинимальныйСрок;
					НоваяСтрока.МаксимальныйСрок = ТекущаяСтрока.МаксимальныйСрок;
					НоваяСтрока.Негабарит = ТекущаяСтрока.Негабарит;
					НоваяСтрока.ОписаниеНеГабарит = ТекущаяСтрока.ОписаниеНеГабарит;
					НоваяСтрока.Описание = ТекущаяСтрока.Описание;
					НоваяСтрока.МаксВес = ТекущаяСтрока.МаксВес;
					НоваяСтрока.МаксОбъем = ТекущаяСтрока.МаксОбъем;
					НоваяСтрока.МаксДлина = ТекущаяСтрока.МаксДлина;
					НоваяСтрока.ТочкаОтправленияПредставление = ТекущаяСтрока.ТочкаОтправленияПредставление;
					НоваяСтрока.ТочкаОтправленияШирота = ТекущаяСтрока.ТочкаОтправленияШирота;
					НоваяСтрока.ТочкаОтправленияДолгота = ТекущаяСтрока.ТочкаОтправленияДолгота;
					НоваяСтрока.ТочкаДоставкиПредставление = ТекущаяСтрока.ТочкаДоставкиПредставление;
					НоваяСтрока.ТочкаДоставкиШирота = ТекущаяСтрока.ТочкаДоставкиШирота;
					НоваяСтрока.ТочкаДоставкиДолгота = ТекущаяСтрока.ТочкаДоставкиДолгота;
					НоваяСтрока.НегабаритныйВес = ТекущаяСтрока.НегабаритныйВес;
					НоваяСтрока.НегабаритныйОбъем = ТекущаяСтрока.НегабаритныйОбъем;
					НоваяСтрока.НегабаритнаяДлина = ТекущаяСтрока.НегабаритнаяДлина;
					Если ТипЗнч(ТекущаяСтрока.ФормаОплаты) = Тип("Массив") Тогда
						НоваяСтрока.ФормаОплаты.ЗагрузитьЗначения(ТекущаяСтрока.ФормаОплаты);
					КонецЕсли;
					НоваяСтрока.ФормаОплатыПоУмолчанию = ТекущаяСтрока.ФормаОплатыПоУмолчанию;
					НоваяСтрока.ТолькоВремяДоставки = ТекущаяСтрока.ТолькоВремяДоставки;
					НоваяСтрока.Срок = "" + НоваяСтрока.МинимальныйСрок + " - " + НоваяСтрока.МаксимальныйСрок + "";
			
					Для Каждого ТекущаяУслуга Из ТекущаяСтрока.ДетализацияСтоимости Цикл
				
						НоваяУслуга = НоваяСтрока.ДетализацияСтоимостиПоУслугам.Добавить();
						НоваяУслуга.Идентификатор = ТекущаяУслуга.Идентификатор;
						НоваяУслуга.Наименование = ТекущаяУслуга.Наименование;
						НоваяУслуга.Стоимость = ТекущаяУслуга.Стоимость;
						НоваяУслуга.ВариантУчета = ТекущаяУслуга.ВариантУчета;
						НоваяУслуга.Описание = ТекущаяУслуга.Описание;
						
					КонецЦикла;
					
					Для Каждого ТекущаяДопУслуга Из ТекущаяСтрока.ДополнительныеУслуги Цикл
				
						НоваяДопУслуга = НоваяСтрока.ДополнительныеУслуги.Добавить();
						НоваяДопУслуга.Идентификатор = ТекущаяДопУслуга.Идентификатор;
						НоваяДопУслуга.Наименование = ТекущаяДопУслуга.Наименование;
						НоваяДопУслуга.Обязательная = ТекущаяДопУслуга.Обязательная;
						НоваяДопУслуга.Категория = ТекущаяДопУслуга.Категория;
						НоваяДопУслуга.Использовать = ТекущаяДопУслуга.Использовать;
						НоваяДопУслуга.ПоказыватьИнформацию = ТекущаяДопУслуга.ПоказыватьИнформацию;
						
						Для Каждого ТекущееСвойство Из ТекущаяДопУслуга.Свойства Цикл
							
							НовоеСвойство = НоваяДопУслуга.Свойства.Добавить();
							НовоеСвойство.Идентификатор = ТекущееСвойство.Идентификатор;
							НовоеСвойство.Наименование = ТекущееСвойство.Наименование;
							НовоеСвойство.ЕдиницаИзмерения = ТекущееСвойство.ЕдиницаИзмерения;
							НовоеСвойство.ТипЗначения = ТекущееСвойство.ТипЗначения;
							Если ТекущееСвойство.Свойство("Использовать")
								И ТекущееСвойство.Использовать Тогда
								НовоеСвойство.Использовать = ТекущееСвойство.Использовать;
								НовоеСвойство.Значение = НовоеСвойство.ТипЗначения.ПривестиЗначение(НовоеСвойство.Значение);
							КонецЕсли;
						КонецЦикла;
						
					КонецЦикла;
					
					Для Каждого ТекущееСвойство Из ТекущаяСтрока.ПунктПриемаГруза Цикл
						ИмяСвойства = "ПунктПриемаГруза"+ТекущееСвойство.Ключ;
						Если НоваяСтрока.Свойство(ИмяСвойства) Тогда
							НоваяСтрока[ИмяСвойства] = ТекущееСвойство.Значение;
						КонецЕсли;
					КонецЦикла;
					
					Для Каждого ТекущееСвойство Из ТекущаяСтрока.ПунктВыдачиГруза Цикл
						ИмяСвойства = "ПунктВыдачиГруза"+ТекущееСвойство.Ключ;
						Если НоваяСтрока.Свойство(ИмяСвойства) Тогда
							НоваяСтрока[ИмяСвойства] = ТекущееСвойство.Значение;
						КонецЕсли;
					КонецЦикла;
					
					НоваяСтрока.КартинкаТариф = 0;
					
					ЕстьУслугиНеВключенныеВТариф = (НоваяСтрока.ДетализацияСтоимостиПоУслугам.НайтиСтроки(
						Новый Структура("ВариантУчета", 3)).Количество());
					ЕстьУслугиНеВключенныеВРасчет = (НоваяСтрока.ДетализацияСтоимостиПоУслугам.НайтиСтроки(
						Новый Структура("ВариантУчета", 2)).Количество());
					
					Если ЕстьУслугиНеВключенныеВРасчет Тогда
						НоваяСтрока.КартинкаТариф = ?(ЕстьУслугиНеВключенныеВТариф, 3, 1);
					ИначеЕсли ЕстьУслугиНеВключенныеВТариф Тогда
						НоваяСтрока.КартинкаТариф = ?(ЕстьУслугиНеВключенныеВРасчет, 3, 2);
					КонецЕсли;
					
					НоваяСтрока.ПоУмолчанию = ТекущаяСтрока.ПоУмолчанию;
					СформироватьПредставлениеТарифа(НоваяСтрока);
					
					Если НоваяСтрока.ГрузоперевозчикИдентификатор = ГрузоперевозчикИдентификатор
						И ТарифИдентификатор = ""
						И НоваяСтрока.ПоУмолчанию Тогда
						МассивТарифовПоУмолчанию.Добавить(НоваяСтрока.ПолучитьИдентификатор())
					КонецЕсли;
					
				КонецЦикла;
				
				Если МассивТарифовПоУмолчанию.Количество() = 1 
					Или Тарифы.Количество() = 1 Тогда
					
					Если МассивТарифовПоУмолчанию.Количество() = 1 Тогда
						ТарифПоУмолчанию = Тарифы.НайтиПоИдентификатору(МассивТарифовПоУмолчанию[0]);
					Иначе
						ТарифПоУмолчанию = Тарифы[0];
					КонецЕсли;
					
					ВыделенныйТариф = ТарифПоУмолчанию.ТарифИдентификатор;
					ОбновитьДанныеПоТарифу(ТарифПоУмолчанию);
					
				КонецЕсли;
			КонецЕсли;
			
			ДоступныеПериодыОтгрузки.Очистить();
			Если ДоступныПериодыОтгрузки Тогда
				
				Для Каждого СтрокаПериодаОтгрузки Из Результат.ДоступныеПериодыОтгрузки Цикл
					НоваяСтрока = ДоступныеПериодыОтгрузки.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПериодаОтгрузки);
				КонецЦикла;
				
				ЗаполнитьСписокВыбораПериодовОтгрузки();
				
			КонецЕсли;
			
			ЗаполнитьСписокВыбораВремениОтгрузки();
			
			Если Результат.Свойство("Ошибки") Тогда
			
				Если ТипЗнч(Результат.Ошибки) = Тип("Массив") Тогда
					
					Для Каждого ТекущаяОшибка Из Результат.Ошибки Цикл
						
						ОбщегоНазначения.СообщитьПользователю(ТекущаяОшибка);
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	КоличествоСтрок = Тарифы.Количество();
	Если КоличествоСтрок = 0 Тогда
		СостояниеВыполненияЗапроса = НСтр("ru = 'Подходящие тарифы не найдены. Проверьте условия запроса.
			|Возможно для работы с перевозчиками требуется авторизация. Проверьте настройки перевозчиков.'");
	Иначе
		СостояниеВыполненияЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Найдено подходящих тарифов: %1'"),
			КоличествоСтрок);
		ТарифыУстановитьРежимСортировки(ТарифыРежимСортировки);
	КонецЕсли;
	Элементы.ДекорацияСостояниеВыполненияЗапросаТарифы.Заголовок = СостояниеВыполненияЗапроса;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатПолученияТарифа(АдресРезультата)
	
	Элементы.ГруппаОжиданияОбновленияТарифа.Видимость = Ложь;
	Элементы.ГруппаПараметрыТарифа.ТолькоПросмотр = Ложь;
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		
		Если Результат <> Неопределено Тогда
			
			ДополнительныеУслугиИзменение = Ложь;
		
			Если Результат.Свойство("Список") Тогда
				
				Для Каждого ТекущаяСтрока Из Результат.Список Цикл
					
					Если Не (ТекущаяСтрока.ТарифИдентификатор = ТарифИдентификатор
						И ОтправительАдресШирота = ТекущаяСтрока.ТочкаОтправленияШирота
						И ОтправительАдресДолгота = ТекущаяСтрока.ТочкаОтправленияДолгота
						И ПолучательАдресШирота = ТекущаяСтрока.ТочкаДоставкиШирота
						И ПолучательАдресДолгота = ТекущаяСтрока.ТочкаДоставкиДолгота) Тогда
						Продолжить;
					КонецЕсли;
					
					ПараметрыТарифа = Тарифы.Выгрузить().Колонки;
					
					НоваяСтрока = Новый Структура();
					Для Каждого ТекущийПараметр Из ПараметрыТарифа Цикл
						НоваяСтрока.Вставить(ТекущийПараметр.Имя);
					КонецЦикла;
					
					НоваяСтрока.Вставить("ДетализацияСтоимости");
					НоваяСтрока.Вставить("ДополнительныеУслуги");
					
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
					
					НоваяСтрока.Вставить("ФормаОплаты", Новый СписокЗначений);
					
					Если ТипЗнч(ТекущаяСтрока.ФормаОплаты) = Тип("Массив") Тогда
						НоваяСтрока.ФормаОплаты.ЗагрузитьЗначения(ТекущаяСтрока.ФормаОплаты);
					КонецЕсли;
					
					НоваяСтрока.Срок = "" + НоваяСтрока.МинимальныйСрок + " - " + НоваяСтрока.МаксимальныйСрок + "";
					НоваяСтрока.Вставить("ДетализацияСтоимостиПоУслугам", Новый Массив());
			
					Для Каждого ТекущаяУслуга Из ТекущаяСтрока.ДетализацияСтоимости Цикл
				
						НоваяУслуга = Новый Структура("Идентификатор,Наименование,Стоимость,ВариантУчета,Описание");
						НоваяУслуга.Идентификатор = ТекущаяУслуга.Идентификатор;
						НоваяУслуга.Наименование = ТекущаяУслуга.Наименование;
						НоваяУслуга.Стоимость = ТекущаяУслуга.Стоимость;
						НоваяУслуга.ВариантУчета = ТекущаяУслуга.ВариантУчета;
						НоваяУслуга.Описание = ТекущаяУслуга.Описание;
						
						НоваяСтрока.ДетализацияСтоимостиПоУслугам.Добавить(НоваяУслуга);
						
					КонецЦикла;
					
					НоваяСтрока.Вставить("ДополнительныеУслуги", Новый Массив());
					
					Для Каждого ТекущаяДопУслуга Из ТекущаяСтрока.ДополнительныеУслуги Цикл
				
						НоваяДопУслуга = Новый Структура("Идентификатор,Наименование,Обязательная,Категория,Использовать,ПоказыватьИнформацию");
						НоваяДопУслуга.Идентификатор = ТекущаяДопУслуга.Идентификатор;
						НоваяДопУслуга.Наименование = ТекущаяДопУслуга.Наименование;
						НоваяДопУслуга.Обязательная = ТекущаяДопУслуга.Обязательная;
						НоваяДопУслуга.Категория = ТекущаяДопУслуга.Категория;
						НоваяДопУслуга.Использовать = ТекущаяДопУслуга.Использовать;
						НоваяДопУслуга.ПоказыватьИнформацию = ТекущаяДопУслуга.ПоказыватьИнформацию;
						НоваяДопУслуга.Вставить("Свойства", Новый Массив());
						
						Для Каждого ТекущееСвойство Из ТекущаяДопУслуга.Свойства Цикл
							
							НовоеСвойство = Новый Структура("Идентификатор,Наименование,ЕдиницаИзмерения,ТипЗначения,Использовать,Значение");
							НовоеСвойство.Идентификатор = ТекущееСвойство.Идентификатор;
							НовоеСвойство.Наименование = ТекущееСвойство.Наименование;
							НовоеСвойство.ЕдиницаИзмерения = ТекущееСвойство.ЕдиницаИзмерения;
							НовоеСвойство.ТипЗначения = ТекущееСвойство.ТипЗначения;
							Если ТекущееСвойство.Свойство("Использовать")
								И ТекущееСвойство.Использовать Тогда
								НовоеСвойство.Использовать = ТекущееСвойство.Использовать;
								НовоеСвойство.Значение = НовоеСвойство.ТипЗначения.ПривестиЗначение(НовоеСвойство.Значение);
							КонецЕсли;
							
							НоваяДопУслуга.Свойства.Добавить(НовоеСвойство);
							
						КонецЦикла;
						
						НоваяСтрока.ДополнительныеУслуги.Добавить(НоваяДопУслуга);
						
					КонецЦикла;
					
					Для Каждого ТекущееСвойство Из ТекущаяСтрока.ПунктПриемаГруза Цикл
						ИмяСвойства = "ПунктПриемаГруза"+ТекущееСвойство.Ключ;
						Если НоваяСтрока.Свойство(ИмяСвойства) Тогда
							НоваяСтрока[ИмяСвойства] = ТекущееСвойство.Значение;
						КонецЕсли;
					КонецЦикла;
					
					Для Каждого ТекущееСвойство Из ТекущаяСтрока.ПунктВыдачиГруза Цикл
						ИмяСвойства = "ПунктВыдачиГруза"+ТекущееСвойство.Ключ;
						Если НоваяСтрока.Свойство(ИмяСвойства) Тогда
							НоваяСтрока[ИмяСвойства] = ТекущееСвойство.Значение;
						КонецЕсли;
					КонецЦикла;
					
					НеЗагружатьУслуги = Истина;
					ОбновитьДанныеПоТарифу(НоваяСтрока);
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если Результат.Свойство("Ошибки") Тогда
			
				Если ТипЗнч(Результат.Ошибки) = Тип("Массив") Тогда
					
					Для Каждого ТекущаяОшибка Из Результат.Ошибки Цикл
						
						ОбщегоНазначения.СообщитьПользователю(ТекущаяОшибка);
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПоТарифу(ДанныеПоТарифу)
	
	Модифицированность = Истина;
	ОбработатьВыборТарифа(ДанныеПоТарифу);
	ЗаполнитьЗначенияСписковВыбора();
	
	Если Не НеЗагружатьУслуги Тогда
		СформироватьДопУслугиПоТарифу(ДанныеПоТарифу.ДополнительныеУслуги);
	КонецЕсли;
	
	НеЗагружатьУслуги = Ложь;
	
	ОбновитьИнформациюПоВыбраннымДопУслугам();
	Элементы.ГруппаПредупрежденияПоДопУслугам.Видимость = ПроверитьЗаполнениеЗначенийДополнительныхУслуг();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатСозданияЗаказа(АдресРезультата, ОперацияВыполнена)
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
			Если Результат.Свойство("Идентификатор") Тогда
				Результат.Свойство("Идентификатор", ИдентификаторЗаказа);
				ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат);
				
				КонтрольныйЭлемент = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаОсновное;
				Если РежимМастера = СервисДоставкиКлиентСервер.РежимМастераЗарегистрирован()
					И КонтрольныйЭлемент.Родитель.ТекущаяСтраница = КонтрольныйЭлемент Тогда
					ИзменениеЗарегистрированногоЗаказаЗавершение();
					Если Не ПустаяСтрока(Результат.ЧастичныйОтказИзменений) Тогда
						ОбщегоНазначения.СообщитьПользователю(Результат.ЧастичныйОтказИзменений);
						ПолучитьЗаказНаДоставкуВФоне();
					КонецЕсли; 
				КонецЕсли; 
				
			Иначе
				ОперацияВыполнена = Ложь;
			КонецЕсли;
			
			Если ОперацияВыполнена Тогда
				Если РежимМастера = СервисДоставкиКлиентСервер.РежимМастераНовый() Тогда
					РежимМастера = СервисДоставкиКлиентСервер.РежимМастераЧерновик();
				КонецЕсли;
				ДоступнаОтмена = Истина;
				СформироватьЗаголовокФормы();
				СформироватьИтоговуюИнформацию();
				ТекущаяСтраница = Элементы.ГруппаСтраницы.ТекущаяСтраница;
				ГруппаТарифыГрузоперевозчикВидимость = Элементы.ГруппаТарифыГрузоперевозчик.Видимость;
				УстановитьВидимостьДоступность();
				СформироватьСтрокуПредставлениеСостоянияЗаказаФормы();
				Элементы.ГруппаТарифыГрузоперевозчик.Видимость = ГруппаТарифыГрузоперевозчикВидимость;
				Элементы.ГруппаСтраницы.ТекущаяСтраница = ТекущаяСтраница;
			КонецЕсли;
			
			Если Результат.Свойство("Ошибки") Тогда
			
				Если ТипЗнч(Результат.Ошибки) = Тип("Массив") Тогда
					
					Для Каждого ТекущаяОшибка Из Результат.Ошибки Цикл
						
						ОбщегоНазначения.СообщитьПользователю(ТекущаяОшибка);
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			ОперацияВыполнена = Ложь;
		КонецЕсли;
		
	Иначе
		ОперацияВыполнена = Ложь;
	КонецЕсли;
	
	Если ОперацияВыполнена Тогда
		СервисДоставкиПереопределяемый.ОбработатьРезультатЗапросаСозданияИзмененияЗаказаНаДоставку(Результат, ДокументыОснования);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатОформленияЗаказа(АдресРезультата, РезультатОформленияЗаказаНаДоставку)
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
			Если Результат.Свойство("ДатаСозданияЗаказа") Тогда
				ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат);
				РежимМастера = СервисДоставкиКлиентСервер.РежимМастераЗарегистрирован();
				СформироватьЗаголовокФормы();
				СформироватьИтоговуюИнформацию();
				УстановитьВидимостьДоступность();
				СформироватьСтрокуПредставлениеСостоянияЗаказаФормы();
				СформироватьПредставлениеДокументаОснования();
			Иначе
				РезультатОформленияЗаказаНаДоставку = 0;
			КонецЕсли;
			
			Если Результат.Свойство("ОжидатьРасчета")
				И Результат.ОжидатьРасчета = Истина Тогда
				РезультатОформленияЗаказаНаДоставку = 2;
			КонецЕсли;
			
			Если Результат.Свойство("Ошибки") Тогда
			
				Если ТипЗнч(Результат.Ошибки) = Тип("Массив") Тогда
					
					Для Каждого ТекущаяОшибка Из Результат.Ошибки Цикл
						
						ОбщегоНазначения.СообщитьПользователю(ТекущаяОшибка);
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			РезультатОформленияЗаказаНаДоставку = 0;
		КонецЕсли;
		
	Иначе
		РезультатОформленияЗаказаНаДоставку = 0;
	КонецЕсли;
	
	Если РезультатОформленияЗаказаНаДоставку = 1 Тогда
		СервисДоставкиПереопределяемый.ОбработатьРезультатЗапросаОформленияЗаказаНаДоставку(Результат, ДокументыОснования);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатОтменыЗаказа(АдресРезультата, РезультатВыполнения, СуммаОтмены)
	
	РезультатВыполнения = 0;
	ОперацияВыполнена = Истина;
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		Если ЗначениеЗаполнено(Результат) 
			И ТипЗнч(Результат) = Тип("Структура") Тогда
			
			Если Результат.Свойство("Идентификатор") Тогда
				
				Если Результат.Свойство("ДокументОтменен")
					И Результат.ДокументОтменен = Истина Тогда
					РезультатВыполнения = 1;
					ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат);
					СформироватьИтоговуюИнформацию();
					ТекущаяСтраница = Элементы.ГруппаСтраницы.ТекущаяСтраница;
					УстановитьВидимостьДоступность();
					СформироватьСтрокуПредставлениеСостоянияЗаказаФормы();
					Элементы.ГруппаСтраницы.ТекущаяСтраница = ТекущаяСтраница;
				ИначеЕсли Результат.Свойство("ДоступнаПлатнаяОтмена")
					И Результат.ДоступнаПлатнаяОтмена = Истина Тогда
					РезультатВыполнения = 2;
					СуммаОтмены = Результат.СуммаПлатнойОтмены;
				ИначеЕсли Результат.Свойство("ДоступнаОтмена")
					И Не Результат.ДоступнаОтмена Тогда
					РезультатВыполнения = 3;
				КонецЕсли;
			Иначе
				СервисДоставки.ОбработатьБлокОшибок(Результат, ОперацияВыполнена);
			КонецЕсли;
			
		Иначе
			ОперацияВыполнена = Ложь;
		КонецЕсли;
	Иначе
		ОперацияВыполнена = Ложь;
	КонецЕсли;
	
	Если ОперацияВыполнена Тогда
		СервисДоставкиПереопределяемый.ОбработатьРезультатЗапросаОтменыЗаказаНаДоставку(Результат, ДокументыОснования);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатОбновленияЗаказа(АдресРезультата, РезультатВыполнения)
	
	ОперацияВыполнена = Истина;
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
			Если Результат.Свойство("ДатаОбновления") Тогда
				ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат);
			Иначе
				ОперацияВыполнена = Ложь;
			КонецЕсли;
			
			Если Результат.Свойство("ЗаказОбновлен") Тогда
				РезультатВыполнения = Результат.ЗаказОбновлен;
			КонецЕсли;
			
			Если Не РезультатВыполнения 
				И Результат.Свойство("Данные") Тогда
				ДанныеЗаказа = Результат.Данные;
				ВерсияПолученныхДанных = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(ДанныеЗаказа);
				РезультатВыполнения = ВерсияПолученныхДанных <> ВерсияДанных;
			КонецЕсли;
			
			Если Результат.Свойство("Ошибки") Тогда
			
				Если ТипЗнч(Результат.Ошибки) = Тип("Массив") Тогда
					
					Для Каждого ТекущаяОшибка Из Результат.Ошибки Цикл
						
						ОбщегоНазначения.СообщитьПользователю(ТекущаяОшибка);
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			ОперацияВыполнена = Ложь;
		КонецЕсли;
		
	Иначе
		ОперацияВыполнена = Ложь;
	КонецЕсли;
	
	Если ОперацияВыполнена Тогда
		СервисДоставкиПереопределяемый.ОбработатьРезультатЗапросаОбновленияЗаказаНаДоставку(Результат, ДокументыОснования);
		Если Не РезультатВыполнения Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Текущая версия заказа является актуальной.'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатПолученияЗаказаНаДоставку(АдресРезультата, ДанныеОбновлены = Истина)
	
	Если РежимМастера = СервисДоставкиКлиентСервер.РежимМастераЗарегистрирован() Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаКарточка;
	КонецЕсли;

	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			
			Если Результат.Свойство("Данные") Тогда
				
				ДанныеЗаказа = Результат.Данные;
				ВерсияДанных = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(ДанныеЗаказа);
				
				РежимМастера = ?(ДанныеЗаказа.СостояниеИдентификатор = 0, 
					СервисДоставкиКлиентСервер.РежимМастераЧерновик(), 
					СервисДоставкиКлиентСервер.РежимМастераЗарегистрирован());
				ОбработатьПараметры(ДанныеЗаказа);
				УслугиТарифа.Очистить();
				Если ДанныеЗаказа.Свойство("Услуги") 
					И ДанныеЗаказа.Услуги.Количество() Тогда
					
					Для Каждого ТекущаяУслуга Из ДанныеЗаказа.Услуги Цикл
						
						НоваяУслуга = УслугиТарифа.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяУслуга, ТекущаяУслуга);
						НоваяУслуга.Использовать = Истина;
						НайденныеСтроки = УслугиТарифов.НайтиСтроки(Новый Структура("Идентификатор", НоваяУслуга.Идентификатор));
						
						ТекущаяУслугаТарифов = Неопределено;
						Если НайденныеСтроки.Количество() Тогда
							ТекущаяУслугаТарифов = НайденныеСтроки[0];
							ЗаполнитьЗначенияСвойств(ТекущаяУслугаТарифов, НоваяУслуга,,"Свойства");
							ТекущаяУслугаТарифов.Свойства.Очистить();
						КонецЕсли;
						
						Для Каждого ТекущееСвойство Из ТекущаяУслуга.СвойстваУслуги Цикл
							НовоеСвойство = НоваяУслуга.Свойства.Добавить();
							ЗаполнитьЗначенияСвойств(НовоеСвойство, ТекущееСвойство);
							Если ТекущаяУслугаТарифов <> Неопределено Тогда
								НовоеСвойствоУслугиТарифов = ТекущаяУслугаТарифов.Свойства.Добавить();
								ЗаполнитьЗначенияСвойств(НовоеСвойствоУслугиТарифов, ТекущееСвойство);
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
				
				Если РежимМастера < СервисДоставкиКлиентСервер.РежимМастераЗарегистрирован() 
					И ДанныеЗаказа.Свойство("ДополнительныеУслуги")
					И ДанныеЗаказа.ДополнительныеУслуги.Количество() Тогда
					
					Для Каждого ТекущаяУслуга Из ДанныеЗаказа.ДополнительныеУслуги Цикл
						
						НоваяУслуга = ДополнительныеУслугиТарифа.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяУслуга, ТекущаяУслуга);
						НайденныеСтроки = УслугиТарифов.НайтиСтроки(Новый Структура("Идентификатор", НоваяУслуга.Идентификатор));
						
						ТекущаяУслугаТарифов = Неопределено;
						Если НайденныеСтроки.Количество() Тогда
							ТекущаяУслугаТарифов = НайденныеСтроки[0];
							ЗаполнитьЗначенияСвойств(ТекущаяУслугаТарифов, НоваяУслуга,,"Свойства");
							ТекущаяУслугаТарифов.Свойства.Очистить();
						КонецЕсли;
						
						Для Каждого ТекущееСвойство Из ТекущаяУслуга.СвойстваУслуги Цикл
							НовоеСвойство = НоваяУслуга.Свойства.Добавить();
							ЗаполнитьЗначенияСвойств(НовоеСвойство, ТекущееСвойство);
							Если ТекущаяУслугаТарифов <> Неопределено Тогда
								НовоеСвойствоУслугиТарифов = ТекущаяУслугаТарифов.Свойства.Добавить();
								ЗаполнитьЗначенияСвойств(НовоеСвойствоУслугиТарифов, ТекущееСвойство);
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
					
					СформироватьДопУслугиПоТарифу(ДополнительныеУслугиТарифа);
					ОбновитьИнформациюПоВыбраннымДопУслугам();
					Элементы.ГруппаПредупрежденияПоДопУслугам.Видимость = ПроверитьЗаполнениеЗначенийДополнительныхУслуг();
					
				КонецЕсли;
				
				Если ДанныеЗаказа.Свойство("Товары") Тогда
					ТоварныйСостав.Загрузить(ДанныеЗаказа.Товары);
				КонецЕсли;
				
				СписокДокументов.Очистить();
				Если ДанныеЗаказа.Свойство("Документы") 
					И ДанныеЗаказа.Документы.Количество() Тогда
					Для Каждого ТекущийДокумент Из ДанныеЗаказа.Документы Цикл
						НовыйДокумент = СписокДокументов.Добавить();
						ЗаполнитьЗначенияСвойств(НовыйДокумент, ТекущийДокумент);
					КонецЦикла;
				КонецЕсли;
				
				ДополнительныеДанные.Очистить();
				Если ДанныеЗаказа.Свойство("ДополнительныеДанныеЗаказа")
					И ЗначениеЗаполнено(ДанныеЗаказа.ДополнительныеДанныеЗаказа)
					И ДанныеЗаказа.ДополнительныеДанныеЗаказа.Количество() Тогда
					
					Для Каждого ТекущиеДанные Из ДанныеЗаказа.ДополнительныеДанныеЗаказа Цикл
						НоваяСтрока = ДополнительныеДанные.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущиеДанные,,"Список");
						Для Каждого ТекущийЭлементСписка Из ТекущиеДанные.Список Цикл
							НовыйЭлемент = НоваяСтрока.Список.Добавить();
							ЗаполнитьЗначенияСвойств(НовыйЭлемент, ТекущийЭлементСписка);
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
					
				ПереключательРасшифровки = ?(ГрузКоличествоГрузовыхМест = 1, 0, 1);
				СформироватьПредставлениеДокументаОснования();
				СформироватьСтрокуПредставлениеСостоянияЗаказаФормы();
				УстановитьВидимостьДоступность();
				СформироватьСтрокуПредставлениеСостоянияЗаказаФормы();
				СформироватьЗаголовокФормы();
				
				ВремяОтгрузкиПредставление = ПредставлениеДатыВремени(ДатаОтгрузки, 
												ВремяОтгрузкиС, 
												ВремяОтгрузкиПо, 
												ВремяОтгрузкиОбедС, 
												ВремяОтгрузкиОбедПо, 1);
				
				ВремяДоставкиПредставление = ПредставлениеДатыВремени(ДатаДоставки, 
												ВремяДоставкиС, 
												ВремяДоставкиПо, 
												ВремяДоставкиОбедС, 
												ВремяДоставкиОбедПо, 2);
												
				Если ЗначениеЗаполнено(ТарифИдентификатор) Тогда
					СформироватьОтборыТарифов(Истина);
					ЗаполнитьИнформациюПоТекущемуТарифу();
				КонецЕсли;
				
				Если РежимМастера = СервисДоставкиКлиентСервер.РежимМастераЗарегистрирован() Тогда
					СформироватьИтоговуюИнформацию();
				КонецЕсли;
			КонецЕсли;
			
			Если Результат.Свойство("Ошибки") Тогда
			
				Если ТипЗнч(Результат.Ошибки) = Тип("Массив") Тогда
					
					Для Каждого ТекущаяОшибка Из Результат.Ошибки Цикл
						
						ОбщегоНазначения.СообщитьПользователю(ТекущаяОшибка);
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			ДанныеОбновлены = Ложь;
			
		КонецЕсли;
	Иначе
		ДанныеОбновлены = Ложь;
	КонецЕсли;
	
	Если ДанныеОбновлены Тогда
		СервисДоставкиПереопределяемый.ОбработатьРезультатЗапросаПолученияЗаказаНаДоставку(Результат, ДокументыОснования);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатПолученияСпискаПеревозчиков(АдресРезультата)
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		Если ЗначениеЗаполнено(Результат) 
			И ТипЗнч(Результат) = Тип("Структура") Тогда
			
			Если Результат.Свойство("Список") Тогда
				ЭлементыСписка = Результат.Список;
				Для Каждого ТекущийЭлементСписка Из ЭлементыСписка Цикл
					
					СписокГрузоперевозчиков.Добавить(ТекущийЭлементСписка.Идентификатор, ТекущийЭлементСписка.Наименование);
					
				КонецЦикла;
				
			Иначе
				ОперацияВыполнена = Ложь;
			КонецЕсли;
			
			Если СписокГрузоперевозчиков.Количество() = 1 
				И ГрузоперевозчикИдентификатор = "" Тогда
				ГрузоперевозчикНаименование = СписокГрузоперевозчиков[0].Представление;
				ГрузоперевозчикИдентификатор = СписокГрузоперевозчиков[0].Значение;
			КонецЕсли;
			
			СервисДоставки.ОбработатьБлокОшибок(Результат, ОперацияВыполнена);
		
		Иначе
			ОперацияВыполнена = Ложь;
		КонецЕсли;
	Иначе
		ОперацияВыполнена = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатУстановкиТарифаПоУмолчанию(АдресРезультата, ОперацияВыполнена)
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		Если ЗначениеЗаполнено(Результат) 
			И ТипЗнч(Результат) = Тип("Структура") Тогда
			
			Если Результат.Свойство("ОперацияВыполнена") Тогда
				ОперацияВыполнена = Результат.ОперацияВыполнена;
			Иначе
				ОперацияВыполнена = Ложь;
			КонецЕсли;
			
			Если Результат.Свойство("ГрузоперевозчикИдентификатор") Тогда
				НайденныеСтроки = Тарифы.НайтиСтроки(Новый Структура("ГрузоперевозчикИдентификатор", Результат.ГрузоперевозчикИдентификатор));
				Для Каждого ТекущийТариф Из НайденныеСтроки Цикл
					Если ТекущийТариф.ПоУмолчанию Тогда
						ТекущийТариф.ПоУмолчанию = Ложь;
						СформироватьПредставлениеТарифа(ТекущийТариф);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если Результат.Свойство("ТарифИдентификатор") Тогда
				НайденныеСтроки = Тарифы.НайтиСтроки(Новый Структура("ТарифИдентификатор", Результат.ТарифИдентификатор));
				Если НайденныеСтроки.Количество() Тогда
					НайденныеСтроки[0].ПоУмолчанию = Истина;
					СформироватьПредставлениеТарифа(НайденныеСтроки[0]);
				КонецЕсли;
			КонецЕсли;
			
			СервисДоставки.ОбработатьБлокОшибок(Результат, ОперацияВыполнена);
		Иначе
			ОперацияВыполнена = Ложь;
		КонецЕсли;
	Иначе
		ОперацияВыполнена = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатСбросаТарифаПоУмолчанию(АдресРезультата, ОперацияВыполнена)
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		Если ЗначениеЗаполнено(Результат) 
			И ТипЗнч(Результат) = Тип("Структура") Тогда
			
			Если Результат.Свойство("ОперацияВыполнена") Тогда
				ОперацияВыполнена = Результат.ОперацияВыполнена;
			Иначе
				ОперацияВыполнена = Ложь;
			КонецЕсли;
			
			Если Результат.Свойство("ГрузоперевозчикИдентификатор") Тогда
				НайденныеСтроки = Тарифы.НайтиСтроки(Новый Структура("ГрузоперевозчикИдентификатор", Результат.ГрузоперевозчикИдентификатор));
				Для Каждого ТекущийТариф Из НайденныеСтроки Цикл
					Если ТекущийТариф.ПоУмолчанию Тогда
						ТекущийТариф.ПоУмолчанию = Ложь;
						СформироватьПредставлениеТарифа(ТекущийТариф);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			СервисДоставки.ОбработатьБлокОшибок(Результат, ОперацияВыполнена);
		Иначе
			ОперацияВыполнена = Ложь;
		КонецЕсли;
	Иначе
		ОперацияВыполнена = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РедактированиеРеквизитовАктивацияНаФорме(АдресРезультата)

	ЕстьОшибкиПолученияДанных = Истина;
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
			Если Результат.Свойство("ДоступностьРеквизитов") Тогда
				
				РазрешитьИзменениеРеквизитов(Результат);
				ЕстьОшибкиПолученияДанных = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьОшибкиПолученияДанных Тогда
		
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось получить перечень изменяемых реквизитов.
			|Возможно для работы с перевозчиками требуется авторизация. Проверьте настройки перевозчиков.'"));
		
	КонецЕсли; 

КонецПроцедуры
 
#КонецОбласти

#Область ВыполнитьЗапросВФоне

&НаСервере
Функция ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ПараметрыОперации)
	
	// Проверка подключения Интернет-поддержки пользователей.
	ИнтернетПоддержкаПодключена 
		= ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	Если Не ИнтернетПоддержкаПодключена Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Отказ = Ложь;
	ПараметрыЗапроса = ПараметрыЗапроса(ПараметрыОперации, Отказ);
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяФоновогоЗадания = "ФоновоеЗадание" + ПараметрыОперации.ИмяПроцедуры;
	ФоновоеЗадание = ЭтотОбъект[ИмяФоновогоЗадания];
	Если ФоновоеЗадание <> Неопределено Тогда
		ОтменитьВыполнениеЗадания(ФоновоеЗадание.ИдентификаторЗадания);
	КонецЕсли;
	
	Задание = Новый Структура("ИмяПроцедуры, Наименование, ПараметрыПроцедуры");
	Задание.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '1С:Доставка. %1.'"),
		ПараметрыОперации.НаименованиеОперации);
	Задание.ИмяПроцедуры = "СервисДоставки." + ПараметрыОперации.ИмяПроцедуры;
	Задание.ПараметрыПроцедуры = ПараметрыЗапроса;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = Задание.Наименование;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	Если ПараметрыОперации.Свойство("ЗапуститьВФоне")
		И ТипЗнч(ПараметрыОперации.ЗапуститьВФоне) = Тип("Булево") Тогда
		ПараметрыВыполнения.ЗапуститьВФоне = ПараметрыОперации.ЗапуститьВФоне;
	КонецЕсли; 
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(Задание.ИмяПроцедуры,
		Задание.ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОтменитьВыполнениеЗадания(ИдентификаторЗадания)
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
		ИдентификаторЗадания = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьУслугиТарифовВФоне()
	
	ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
	ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьУслугиТарифов();
	ПараметрыОперации.НаименованиеОперации = НСтр("ru = 'Получение услуг тарифов'");
	
	Возврат ВыполнитьЗапросВФоне(Ложь, ПараметрыОперации);
	
КонецФункции

&НаСервере
Функция ПолучитьГрузоперевозчиковВФоне()
	
	ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
	ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьГрузоперевозчиков();
	ПараметрыОперации.НаименованиеОперации = НСтр("ru = 'Получение списка грузоперевозчиков.'");
	
	Возврат ВыполнитьЗапросВФоне(Ложь, ПараметрыОперации);
	
КонецФункции

&НаСервере
Функция ПолучитьЗаказНаДоставкуВФоне()
	
	ПараметрыОперации = ПараметрыОперацииПолучитьЗаказНаДоставку();
	
	Возврат ВыполнитьЗапросВФоне(Ложь, ПараметрыОперации);
	
КонецФункции

&НаКлиенте
Процедура ПолучитьЗаказНаДоставку(Знач ОчищатьСообщения)
	
	ПараметрыОперации = ПараметрыОперацииПолучитьЗаказНаДоставку();
	
	ВыполнитьЗапрос(ПараметрыОперации, ОчищатьСообщения);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыОперацииПолучитьЗаказНаДоставку()

	ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
	ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьЗаказНаДоставку();
	ПараметрыОперации.НаименованиеОперации = НСтр("ru = 'Получение данных по заказу на доставку'");
	ПараметрыОперации.ВыводитьОкноОжидания = Истина;
	
	Возврат ПараметрыОперации;

КонецФункции

&НаКлиенте
Функция ПараметрыОперацииПолучитьДоступныеДляИзмененияРеквизиты(Знач ВыводитьОкноОжидания = Неопределено)

	ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
	ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьДоступныеДляИзмененияРеквизиты();
	ПараметрыОперации.НаименованиеОперации = НСтр("ru = 'Получение реквизитов для изменения'");
	Если ТипЗнч(ВыводитьОкноОжидания) = Тип("Булево") Тогда
		ПараметрыОперации.ВыводитьОкноОжидания = ВыводитьОкноОжидания;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ПараметрыОповещения =  Новый Структура(
		"ИмяПроцедуры, Параметры", "ПолучитьДоступныеДляИзмененияРеквизитыЗавершение", ДополнительныеПараметры);
	ПараметрыОперации.Вставить("ПараметрыОповещения", ПараметрыОповещения);
	
	Возврат ПараметрыОперации;

КонецФункции

&НаКлиенте
Процедура ПолучитьДоступныеДляИзмененияРеквизитыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РедактированиеРеквизитовАктивацияНаФорме(Результат.АдресРезультата);
	ЭтотОбъект[ДополнительныеПараметры.ИмяФоновогоЗадания] = Неопределено;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура СформироватьОтборыТарифов(ЗаполнитьИспользоватьПоТарифам = Ложь)
	
	ОтборыТарифовКатегории = ОтборыТарифов.ПолучитьЭлементы();
	
	ТекущиеДанные = Новый ТаблицаЗначений();
	ТекущиеДанные.Колонки.Добавить("Идентификатор");
	ТекущиеДанные.Колонки.Добавить("Свойства");
	
	Если Не ЗаполнитьИспользоватьПоТарифам Тогда
		Для Каждого ТекущаяКатегория Из ОтборыТарифовКатегории Цикл
			
			ОтборыТарифовЭлементы = ТекущаяКатегория.ПолучитьЭлементы();
			Для Каждого ТекущаяУслуга Из ОтборыТарифовЭлементы Цикл
				
				Если ТекущаяУслуга.Использовать Тогда
					
					НоваяСтрока = ТекущиеДанные.Добавить();
					НоваяСтрока.Идентификатор = ТекущаяУслуга.Идентификатор;
					НоваяСтрока.Свойства = Новый Массив();
					
					ОтборыТарифовСвойства = ТекущаяУслуга.ПолучитьЭлементы();
					
					Для Каждого ТекущееСвойство Из ОтборыТарифовСвойства Цикл
						
						СтрокаСвойство = Новый Структура();
						СтрокаСвойство.Вставить("Наименование", ТекущееСвойство.Наименование);
						СтрокаСвойство.Вставить("Использовать", Ложь);
						СтрокаСвойство.Вставить("Идентификатор", ТекущееСвойство.Идентификатор);
						СтрокаСвойство.Вставить("Значение", ТекущееСвойство.Значение);
						СтрокаСвойство.Вставить("ТребуетсяЗначение", Истина);
						СтрокаСвойство.Вставить("ЕдиницаИзмерения", ТекущееСвойство.ЕдиницаИзмерения);
						СтрокаСвойство.Вставить("ИдентификаторУслугТарифов", ТекущееСвойство.ИдентификаторУслугТарифов);
						
						НоваяСтрока.Свойства.Добавить(СтрокаСвойство);
						
					КонецЦикла;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	Если Элементы.СпособДоставки.СписокВыбора.НайтиПоЗначению(СпособДоставки) = Неопределено 
		И Элементы.СпособДоставки.СписокВыбора.Количество() > 0 Тогда
		СпособДоставки = Элементы.СпособДоставки.СписокВыбора[0].Значение;
	КонецЕсли;
	
	Если Элементы.СпособОтгрузки.СписокВыбора.НайтиПоЗначению(СпособОтгрузки) = Неопределено 
		И Элементы.СпособОтгрузки.СписокВыбора.Количество() > 0 Тогда
		СпособОтгрузки = Элементы.СпособОтгрузки.СписокВыбора[0].Значение;
	КонецЕсли;
	
	ОтборыТарифовКатегории.Очистить();
	
	ТекущаяКатегория = "";
	
	Для Каждого ТекущаяУслуга Из УслугиТарифов Цикл
		
		
		Если СпособОтгрузки = 1 
			И НесовместимыеУслуги.НайтиСтроки(Новый Структура("Идентификатор,ИдентификаторНесовместимойУслуги", "000000002",
				ТекущаяУслуга.Идентификатор)).Количество() Тогда
			Продолжить;
		КонецЕсли;
		
		Если СпособДоставки = 1 
			И НесовместимыеУслуги.НайтиСтроки(Новый Структура("Идентификатор,ИдентификаторНесовместимойУслуги", "000000004",
				ТекущаяУслуга.Идентификатор)).Количество() Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяУслуга.Обязательная Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяКатегория <> ТекущаяУслуга.Категория Тогда
			ТекущаяКатегория = ТекущаяУслуга.Категория;
			
			СтрокаДерева = ОтборыТарифовКатегории.Добавить();
			СтрокаДерева.Наименование = ТекущаяУслуга.Категория;
			СтрокаДерева.Использовать = Истина;
			СтрокаДерева.Идентификатор = "";
			СтрокаДерева.Значение = Неопределено;
			СтрокаДерева.ТребуетсяЗначение = Ложь;
			СтрокаДерева.Обязательный = Ложь;
			СтрокаДерева.ТипСтроки = 0;
			
		КонецЕсли;
		
		СтрокаДереваВетка = СтрокаДерева.ПолучитьЭлементы().Добавить();
		СтрокаДереваВетка.Наименование = ТекущаяУслуга.Наименование;
		СтрокаДереваВетка.Использовать = ?(ЗаполнитьИспользоватьПоТарифам, ТекущаяУслуга.Использовать, Ложь);
		СтрокаДереваВетка.Идентификатор = ТекущаяУслуга.Идентификатор;
		СтрокаДереваВетка.ТипСтроки = 1;
		СтрокаДереваВетка.ПоказыватьИнформацию = ТекущаяУслуга.ПоказыватьИнформацию;
		СтрокаДереваВетка.ИдентификаторУслугТарифов = ТекущаяУслуга.ПолучитьИдентификатор();
		
		НайденныеСтроки = ТекущиеДанные.НайтиСтроки(Новый Структура("Идентификатор", ТекущаяУслуга.Идентификатор));
		
		Свойства = Неопределено;
		Если НайденныеСтроки.Количество() Тогда
			СтрокаДереваВетка.Использовать = Истина;
			Свойства = НайденныеСтроки[0].Свойства;
		КонецЕсли;
		
		СвойстваУслуги = ТекущаяУслуга.Свойства;
		
		Если СвойстваУслуги.Количество() Тогда
			
			СтрокиСвойств = СтрокаДереваВетка.ПолучитьЭлементы();
			СтрокиСвойств.Очистить();
			
			ЗаполнитьИдентификаторУслугТарифов = (Свойства = Неопределено);
			Свойства = ?(ЗаполнитьИдентификаторУслугТарифов, СвойстваУслуги, Свойства);
			
			Для Каждого ТекущееСвойство Из Свойства Цикл
				
				СтрокаДереваСвойство = СтрокиСвойств.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДереваСвойство, ТекущееСвойство);
				СтрокаДереваСвойство.ТребуетсяЗначение = Истина;
				СтрокаДереваСвойство.ТипСтроки = 2;
				
				Если ЗаполнитьИдентификаторУслугТарифов Тогда
					СтрокаДереваСвойство.ИдентификаторУслугТарифов = ТекущееСвойство.ПолучитьИдентификатор();
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.ГруппаОтборыОсновная.Видимость = ОтборыТарифов.ПолучитьЭлементы().Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьРодителейСпискаСВыбраннымиСтроками()
	
	ЭлементыДереваСписка = ОтборыТарифов.ПолучитьЭлементы();
	Для Каждого ЭлементДереваСписка Из ЭлементыДереваСписка Цикл
		Элементы.ОтборыТарифов.Развернуть(ЭлементДереваСписка.ПолучитьИдентификатор());
		ЭлементыУслуги = ЭлементДереваСписка.ПолучитьЭлементы();
		Для Каждого ЭлементДереваСпискаУслуги Из ЭлементыУслуги Цикл
			
			Если ЭлементДереваСпискаУслуги.Использовать Тогда
				Элементы.ОтборыТарифов.Развернуть(ЭлементДереваСпискаУслуги.ПолучитьИдентификатор());
			КонецЕсли;
				
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеВариантовДоставки()
	
	Элементы.ГруппаОтгрузкаАдрес.Видимость = (СпособОтгрузки = 2);
	Элементы.ГруппаОтгрузкаТерминал.Видимость = (СпособОтгрузки = 1);
	Элементы.ПараметрыТарифаВремяОтгрузки.АвтоОтметкаНезаполненного = (СпособОтгрузки = 2);
	
	Элементы.ГруппаДоставкаАдрес.Видимость = (СпособДоставки = 2);
	Элементы.ГруппаДоставкаТерминал.Видимость = (СпособДоставки = 1);
	Элементы.ПараметрыТарифаВремяДоставки.АвтоОтметкаНезаполненного = (СпособДоставки = 2);
	
КонецПроцедуры

&НаСервере
Процедура ТарифыУстановитьРежимСортировки(ВыбранныйВариантСортировки)
	
	Если Не ЗначениеЗаполнено(ВыбранныйВариантСортировки) Тогда
		ВыбранныйВариантСортировки = "СортироватьТарифыПоЦене";
	КонецЕсли;
	
	Если Не ВариантыСортировки().Свойство(ВыбранныйВариантСортировки) Тогда
		ВыбранныйВариантСортировки = "СортироватьТарифыПоЦене";
	КонецЕсли;
	
	Элементы.ГруппаПодменюТарифыСортировать.Заголовок = Команды[ВыбранныйВариантСортировки].Заголовок;
	
	Для Каждого ТекущийВариант Из ВариантыСортировки() Цикл
		Элементы[ТекущийВариант.Ключ].Пометка = ТекущийВариант.Ключ = ВыбранныйВариантСортировки;
	КонецЦикла;
	
	ТарифыРежимСортировки = ВыбранныйВариантСортировки;
	
	Если Тарифы.Количество() Тогда
		СортироватьТарифы();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВариантыСортировки()
	
	Результат = Новый Структура;
	Результат.Вставить("СортироватьТарифыПоЦене", 					"КартинкаТариф Возр, Стоимость Возр");
	Результат.Вставить("СортироватьТарифыПоСроку", 					"МинимальныйСрок Возр");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СортироватьТарифы()
	
	Тарифы.Сортировать(ВариантыСортировки()[ТарифыРежимСортировки]);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВыборТарифа(ДанныеПоТарифу)
	
	ГрузоперевозчикИдентификатор = ДанныеПоТарифу.ГрузоперевозчикИдентификатор;
	ГрузоперевозчикНаименование = ДанныеПоТарифу.ГрузоперевозчикНаименование;
	ТарифИдентификатор = ДанныеПоТарифу.ТарифИдентификатор;
	ТарифНаименование = ДанныеПоТарифу.ТарифНаименование;
	ТарифОписание = ДанныеПоТарифу.Описание;
	ТарифНегабарит = ДанныеПоТарифу.Негабарит;
	ТарифТолькоВремяДоставки = ДанныеПоТарифу.ТолькоВремяДоставки;
	ОтправительАдресШирота = ДанныеПоТарифу.ТочкаОтправленияШирота;
	ОтправительАдресДолгота = ДанныеПоТарифу.ТочкаОтправленияДолгота;
	ПолучательАдресШирота = ДанныеПоТарифу.ТочкаДоставкиШирота;
	ПолучательАдресДолгота = ДанныеПоТарифу.ТочкаДоставкиДолгота;
	СуммаДокумента = ДанныеПоТарифу.Стоимость;
	СуммаСкидки = ДанныеПоТарифу.СуммаСкидки;
	
	Если ТарифНегабарит Тогда
		ГрузКоличествоНегабаритныхГрузовыхМест = 1;
		Если ГрузКоличествоГрузовыхМест = 1 Тогда
			ГрузНегабаритныйВес = ГрузВес;
			ГрузНегабаритныйОбъем = ГрузОбъем;
		КонецЕсли;
	КонецЕсли;
	
	ТарифФормаОплаты = ДанныеПоТарифу.ФормаОплаты;
	Если ФормаОплаты = 0 Тогда
		ФормаОплаты = ДанныеПоТарифу.ФормаОплатыПоУмолчанию;
	КонецЕсли;
	
	Если ФормаОплаты = 0
		И ТарифФормаОплаты.Количество() = 1 Тогда
		ФормаОплаты = ТарифФормаОплаты[0].Значение;
	КонецЕсли;
	
	Если ПунктПриемаГрузаИдентификатор = "" Тогда
		Адресат = "ПунктПриемаГруза";
		ЭтотОбъект[Адресат + "Идентификатор"] = ДанныеПоТарифу[Адресат + "Идентификатор"];
		ЭтотОбъект[Адресат + "Наименование"] = ДанныеПоТарифу[Адресат + "Наименование"];
		ЭтотОбъект[Адресат + "Адрес"] = ДанныеПоТарифу[Адресат + "Адрес"];
		ЭтотОбъект[Адресат + "Телефон"] = ДанныеПоТарифу[Адресат + "Телефон"];
		ЭтотОбъект[Адресат + "ТипНаименование"] = ДанныеПоТарифу[Адресат + "ТипНаименование"];
		ЭтотОбъект[Адресат + "ТипИдентификатор"] = ДанныеПоТарифу[Адресат + "ТипИдентификатор"];
	КонецЕсли;
	
	Если ПунктВыдачиГрузаИдентификатор = "" Тогда
		Адресат = "ПунктВыдачиГруза";
		ЭтотОбъект[Адресат + "Идентификатор"] = ДанныеПоТарифу[Адресат + "Идентификатор"];
		ЭтотОбъект[Адресат + "Наименование"] = ДанныеПоТарифу[Адресат + "Наименование"];
		ЭтотОбъект[Адресат + "Адрес"] = ДанныеПоТарифу[Адресат + "Адрес"];
		ЭтотОбъект[Адресат + "Телефон"] = ДанныеПоТарифу[Адресат + "Телефон"];
		ЭтотОбъект[Адресат + "ТипНаименование"] = ДанныеПоТарифу[Адресат + "ТипНаименование"];
		ЭтотОбъект[Адресат + "ТипИдентификатор"] = ДанныеПоТарифу[Адресат + "ТипИдентификатор"];
	КонецЕсли;
	
	Если Не НеЗагружатьУслуги Тогда 
		УслугиТарифа.Очистить();
		Для Каждого ТекущаяСтрокаУслугиТарифа Из УслугиТарифов Цикл
			НоваяСтрока = УслугиТарифа.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрокаУслугиТарифа,,"Свойства");
			
			СтрокиСвойств = ТекущаяСтрокаУслугиТарифа.Свойства;
			
			Для Каждого ТекущееСвойство Из СтрокиСвойств Цикл
				НовоеСвойство = НоваяСтрока.Свойства.Добавить();
				ЗаполнитьЗначенияСвойств(НовоеСвойство, ТекущееСвойство);
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнитьИнформациюПоТекущемуТарифу();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформациюПоТекущемуТарифу()
	
	Элементы.СуммаСкидки.Видимость = СуммаСкидки > 0;
	
	ТабличныйДокумент = Новый ТабличныйДокумент();
	
	Если Не ЗначениеЗаполнено(ТарифИдентификатор) Тогда
		ИнформацияПоТекущемуТарифу = ТабличныйДокумент;
		Возврат;
	КонецЕсли;
	
	Обработка = РеквизитФормыВЗначение("Объект");
	Макет = Обработка.ПолучитьМакет("ВыбранныеУслугиТарифа");
	
	ОбластьТабличнаяЧастьУслуги = ТабличнаяЧастьУслуги(Макет, УслугиТарифа);
	
	Если ОбластьТабличнаяЧастьУслуги.ВысотаТаблицы > 3 Тогда
		ТабличныйДокумент.Вывести(ОбластьТабличнаяЧастьУслуги);
	КонецЕсли;
	
	ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы");
	ТабличныйДокумент.Вывести(ОбластьПодвалТаблицы);
	
	Если ЗначениеЗаполнено(ТарифОписание) Тогда
		ОбластьОписаниеТарифа = Макет.ПолучитьОбласть("ОписаниеТарифа");
		ОбластьОписаниеТарифа.Параметры.ОписаниеТарифа = ТарифОписание;
		ТабличныйДокумент.Вывести(ОбластьОписаниеТарифа);
	КонецЕсли;
	
	ИнформацияПоТекущемуТарифу = ТабличныйДокумент;
	
КонецПроцедуры

&НаСервере
Функция ТабличнаяЧастьУслуги(Макет, Услуги)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ОбластьМакетаШапкаТалицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ТабличныйДокумент.Вывести(ОбластьМакетаШапкаТалицы);
	
	ОбластьМакетаКатегория         = Макет.ПолучитьОбласть("СтрокаТаблицыКатегория");
	ОбластьМакетаУслуга = Макет.ПолучитьОбласть("СтрокаТаблицыУслуга");
	ОбластьМакетаСвойство = Макет.ПолучитьОбласть("СтрокаТаблицыСвойство");
	
	ТекущаяКатегория = "";
	Для Каждого ТекущаяУслугаТарифа Из Услуги Цикл
		
		Если (Не ТекущаяУслугаТарифа.Использовать)
			ИЛИ ТекущаяУслугаТарифа.Обязательная Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяКатегория <> ТекущаяУслугаТарифа.Категория Тогда
			ТекущаяКатегория = ТекущаяУслугаТарифа.Категория;
			ОбластьСтрокаТаблицы = ОбластьМакетаКатегория;
			ОбластьСтрокаТаблицы.Параметры.Наименование = ТекущаяУслугаТарифа.Категория;
			ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
		КонецЕсли;
		
		ОбластьСтрокаТаблицы = ОбластьМакетаУслуга;
		ОбластьСтрокаТаблицы.Параметры.Наименование = ТекущаяУслугаТарифа.Наименование;
		ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
		
		Для Каждого ТекущееСвойство Из ТекущаяУслугаТарифа.Свойства Цикл
			ОбластьСтрокаТаблицы = ОбластьМакетаСвойство;
			ЗаполнитьЗначенияСвойств(ОбластьСтрокаТаблицы.Параметры, ТекущееСвойство);
			ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

&НаКлиенте
Процедура СброситьТерминал(ПрефиксТерминала)
	
	ИмяРеквизита = ПрефиксТерминала+"Груза";
	
	ЭтотОбъект[ИмяРеквизита + "Идентификатор"] = Неопределено;
	ЭтотОбъект[ИмяРеквизита + "НаселенныйПунктИдентификатор"] = Неопределено;
	ЭтотОбъект[ИмяРеквизита + "Наименование"] = Неопределено;
	ЭтотОбъект[ИмяРеквизита + "Описание"] = Неопределено;
	ЭтотОбъект[ИмяРеквизита + "Адрес"] = Неопределено;
	ЭтотОбъект[ИмяРеквизита + "Телефон"] = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПрименениеОтборов(СброситьТариф = Истина, ПолучатьТарифы = Истина)
	
	СформироватьПараметрыОтбора();
	
	ОбновитьЗначенияВУслугахТарифов();
	
	Если СброситьТариф Тогда
		СброситьТариф();
	КонецЕсли;
	
	Если ПолучатьТарифы Тогда
		
		ПолучитьТарифы();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗначенияВУслугахТарифов()
	
	СтрокиОтборовВерхнийУровень = ОтборыТарифов.ПолучитьЭлементы();
	
	ИдентификаторУслугиСпособаОтгрузки = ?(СпособОтгрузки = 1, "000000002", "000000001");
	ИдентификаторУслугиСпособаДоставки = ?(СпособДоставки = 1, "000000004", "000000003");
	
	Для Каждого ТекущаяСтрока Из УслугиТарифов Цикл
		ТекущаяСтрока.Использовать = Ложь;
		
		Если ТекущаяСтрока.Идентификатор = ИдентификаторУслугиСпособаОтгрузки Тогда
			ТекущаяСтрока.Использовать = Истина;
		КонецЕсли;
		
		Если ТекущаяСтрока.Идентификатор = ИдентификаторУслугиСпособаДоставки Тогда
			ТекущаяСтрока.Использовать = Истина;
		КонецЕсли;
		
		Если ТекущаяСтрока.Свойства.Количество() Тогда
			Для Каждого ТекущееСвойство Из ТекущаяСтрока.Свойства Цикл
				ТекущееСвойство.Значение = ТекущееСвойство.ТипЗначения.ПривестиЗначение(ТекущееСвойство.Значение);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаОтбораВерхнийУровень Из СтрокиОтборовВерхнийУровень Цикл
		
		СтрокиОтборы = СтрокаОтбораВерхнийУровень.ПолучитьЭлементы();
		
		Если СтрокиОтборы.Количество() Тогда
			Для Каждого СтрокаОтборы Из СтрокиОтборы Цикл
				Если СтрокаОтборы.Использовать Тогда
					НайденнаяУслуга = УслугиТарифов.НайтиПоИдентификатору(СтрокаОтборы.ИдентификаторУслугТарифов);
					Если НайденнаяУслуга <> Неопределено Тогда
						НайденнаяУслуга.Использовать = Истина;
						НайденнаяУслуга.Свойства.Очистить();
						Свойства = СтрокаОтборы.ПолучитьЭлементы();
						Для Каждого ТекущееСвойство Из Свойства Цикл
							
							НовоеСвойство = НайденнаяУслуга.Свойства.Добавить();
							ЗаполнитьЗначенияСвойств(НовоеСвойство, ТекущееСвойство);
							
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ТабличныйДокументИнформацияПоТарифу(ИдентификаторСтроки)
	
	ТабличныйДокумент = Новый ТабличныйДокумент();
	
	Если ИдентификаторСтроки = Неопределено Тогда
		Возврат ТабличныйДокумент;
	КонецЕсли;
	
	ДанныеПоТарифу = Тарифы.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Обработка = РеквизитФормыВЗначение("Объект");
	Макет = Обработка.ПолучитьМакет("ДетализацияСтоимости");
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	
	ОбластьШапка.Параметры.ГрузоперевозчикНаименование = ДанныеПоТарифу.ГрузоперевозчикНаименование;
	ОбластьШапка.Параметры.ТарифНаименование = ДанныеПоТарифу.ТарифНаименование;
	
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	ОбластьПредупреждениеВерх = Макет.ПолучитьОбласть("ПредупреждениеВерх");
	
	ТабличныйДокумент.Вывести(ОбластьПредупреждениеВерх);
	
	ОбластьШапкаТалицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	
	ТабличныйДокумент.Вывести(ОбластьШапкаТалицы);
	
	Для Каждого ТекущаяСтрока Из ДанныеПоТарифу.ДетализацияСтоимостиПоУслугам Цикл
		
		Если ТекущаяСтрока.ВариантУчета = 0 Тогда
			ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицыОбычная");
		ИначеЕсли ТекущаяСтрока.ВариантУчета = 2 Тогда
			ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицыБезСтоимости");
		ИначеЕсли ТекущаяСтрока.ВариантУчета = 3 Тогда
			ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицыОтсутствиеУслуги");
		КонецЕсли;
			
		ОбластьСтрокаТаблицы.Параметры.УслугаНаименование = ТекущаяСтрока.Наименование;
		ОбластьСтрокаТаблицы.Параметры.Стоимость = ТекущаяСтрока.Стоимость;
		ОбластьСтрокаТаблицы.Параметры.ВалютаНаименование = ВалютаНаименование;
			
		ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
		
	КонецЦикла;
	
	ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы");
	
	ОбластьПодвалТаблицы.Параметры.Стоимость = ДанныеПоТарифу.Стоимость;
	ОбластьПодвалТаблицы.Параметры.ВалютаНаименование = ВалютаНаименование;
	
	ТабличныйДокумент.Вывести(ОбластьПодвалТаблицы);
	
	Если ДанныеПоТарифу.КартинкаТариф = 1
		ИЛИ ДанныеПоТарифу.КартинкаТариф = 3 Тогда
	
		ОбластьПредупреждениеНизБезСтоимости = Макет.ПолучитьОбласть("ПредупреждениеНизБезСтоимости");
		
		ТабличныйДокумент.Вывести(ОбластьПредупреждениеНизБезСтоимости);
		
	КонецЕсли;
	
	Если ДанныеПоТарифу.КартинкаТариф = 2
		ИЛИ ДанныеПоТарифу.КартинкаТариф = 3 Тогда
		
		ОбластьПредупреждениеНизОтсутствиеУслуги = Макет.ПолучитьОбласть("ПредупреждениеНизОтсутствиеУслуги");
		
		ТабличныйДокумент.Вывести(ОбластьПредупреждениеНизОтсутствиеУслуги);
		
	КонецЕсли;
	
	Если ДанныеПоТарифу.Негабарит Тогда
		ОбластьПредупреждениеНеГабарит = Макет.ПолучитьОбласть("ПредупреждениеНеГабарит");
		ОбластьПредупреждениеНеГабарит.Параметры.ПредупреждениеНеГабарит = ДанныеПоТарифу.ОписаниеНеГабарит;
		ТабличныйДокумент.Вывести(ОбластьПредупреждениеНеГабарит);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПоТарифу.Описание) Тогда
		ОбластьОписаниеТарифа = Макет.ПолучитьОбласть("ОписаниеТарифа");
		ОбластьОписаниеТарифа.Параметры.ОписаниеТарифа = ДанныеПоТарифу.Описание;
		ТабличныйДокумент.Вывести(ОбластьОписаниеТарифа);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;

КонецФункции

&НаСервере
Функция ТабличныйДокументИтоговаяИнформация()
	
	ТабличныйДокумент = Новый ТабличныйДокумент();
	
	Обработка = РеквизитФормыВЗначение("Объект");
	Макет = Обработка.ПолучитьМакет("Заказ");
	
	Если Заблокирован Тогда
		ОбластьМакетаЗаголовокБлокировки = Макет.ПолучитьОбласть("ЗаголовокБлокировки");
		ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовокБлокировки);
	КонецЕсли;
	
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка");
	ПараметрыОбласти = ОбластьМакетаШапка.Параметры;
	
	Если ДокументыОснования.Количество() = 1 Тогда
		ПараметрыОбласти.РасшифровкаОснование = ДокументыОснования[0].Значение;
		ПараметрыОбласти.ОснованиеПредставление = ДокументыОснования[0].Значение;
	ИначеЕсли ДокументыОснования.Количество() > 1 Тогда
		ПараметрыОбласти.РасшифровкаОснование = "ОткрытьФормуОснования";
		ПараметрыОбласти.ОснованиеПредставление = ДокументыОснованияПредставление;
	КонецЕсли;
	
	ПараметрыОбласти.ГрузоперевозчикНаименование = ГрузоперевозчикНаименование;
	ПараметрыОбласти.РасшифровкаГрузоперевозчик = "Грузоперевозчик";
	ПараметрыОбласти.ТарифНаименование = ТарифНаименование;
	ПараметрыОбласти.РасшифровкаТариф = "Тариф";
	
	ФормаОплатыЭлемент = Элементы.ФормаОплаты.СписокВыбора.НайтиПоЗначению(ФормаОплаты);
	
	Если ФормаОплатыЭлемент <> Неопределено Тогда
		ПараметрыОбласти.ФормаОплатыНаименование 
			= ФормаОплатыЭлемент.Представление;
	КонецЕсли;
	
	ПараметрыОбласти.ОплатаПредставление = ?(Оплачен, НСтр("ru='Оплачено'"), НСтр("ru='Требует оплаты'"));
	ПараметрыОбласти.ПлательщикПредставление = ?(ПлательщикРоль = 1, НСтр("ru='Отправитель'"), НСтр("ru='Получатель'"));
	
	ПараметрыОбласти.ДатаИВремяОформления = Формат(ДатаСозданияЗаказа,"ДЛФ=DT");
	ПараметрыОбласти.Состояние = Состояние;
	ПараметрыОбласти.РасшифровкаСостояние = "Состояние";
	ПараметрыОбласти.ТрекНомер = ТрекНомер;
	
	ТабличныйДокумент.Вывести(ОбластьМакетаШапка);
	
	Если ИсполнительНаименование <> "" ИЛИ ИсполнительТелефон <> "" Тогда
		ОбластьМакетаИсполнитель = Макет.ПолучитьОбласть("Исполнитель");
		ПараметрыОбласти = ОбластьМакетаИсполнитель.Параметры;
		ПараметрыОбласти.ИсполнительПредставление = ИсполнительНаименование;
		ПараметрыОбласти.ИсполнительНомерТелефонаПредставление = ИсполнительТелефон;
		ТабличныйДокумент.Вывести(ОбластьМакетаИсполнитель);
	КонецЕсли;
	
	Если АвтомобильМарка <> "" ИЛИ АвтомобильНомер <> "" Тогда
		ОбластьМакетаАвтомобиль = Макет.ПолучитьОбласть("Автомобиль");
		ПараметрыОбласти = ОбластьМакетаАвтомобиль.Параметры;
		ПараметрыОбласти.АвтомобильПредставление = СокрЛП(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 %2'"),
			АвтомобильМарка,
			АвтомобильНомер));
		ТабличныйДокумент.Вывести(ОбластьМакетаАвтомобиль);
	КонецЕсли;
	
	ОбластьМакетаКонтрагенты = Макет.ПолучитьОбласть("Контрагенты");
	ПараметрыОбласти = ОбластьМакетаКонтрагенты.Параметры;
	
	ПараметрыОбласти.ОтправительНаименование = ОтправительКонтрагентНаименование;
	ПараметрыОбласти.РасшифровкаОтправительКонтрагент = "ОтправительКонтрагент";
	ПараметрыОбласти.ОтправительКонтактноеЛицо = ОтправительКонтактноеЛицоНаименование;
	ПараметрыОбласти.ОтправительТелефон = ОтправительКонтактноеЛицоТелефонПредставление;
	
	ПараметрыОбласти.ПолучательНаименование = ПолучательКонтрагентНаименование;
	ПараметрыОбласти.РасшифровкаПолучательКонтрагент = "ПолучательКонтрагент";
	ПараметрыОбласти.ПолучательКонтактноеЛицо = ПолучательКонтактноеЛицоНаименование;
	ПараметрыОбласти.ПолучательТелефон = ПолучательКонтактноеЛицоТелефонПредставление;

	ПараметрыОбласти.Отправитель = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Отправитель %1'"),
		?(ПлательщикРоль = 1, "(плательщик)",""));
	ПараметрыОбласти.Получатель = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Получатель %1'"),
		?(ПлательщикРоль = 2, "(плательщик)",""));

	ТабличныйДокумент.Вывести(ОбластьМакетаКонтрагенты);

	Если ЗначениеЗаполнено(ОтправительКонтактноеЛицоТелефонДополнительныйПредставление) 
		Или ЗначениеЗаполнено(ПолучательКонтактноеЛицоТелефонДополнительныйПредставление) Тогда
		
		ОбластьМакетаДополнительныйТелефон = Макет.ПолучитьОбласть("ДополнительныйТелефон");
		ПараметрыОбласти = ОбластьМакетаДополнительныйТелефон.Параметры;
	
		Если ЗначениеЗаполнено(ОтправительКонтактноеЛицоТелефонДополнительныйПредставление) Тогда
			ПараметрыОбласти.ТелефонДополнительныйТекст1 = НСтр("ru='Доп. телефон:'");
			ПараметрыОбласти.ТелефонДополнительный1 = ОтправительКонтактноеЛицоТелефонДополнительныйПредставление;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПолучательКонтактноеЛицоТелефонДополнительныйПредставление) Тогда
			ПараметрыОбласти.ТелефонДополнительныйТекст2 = НСтр("ru='Доп. телефон:'");
			ПараметрыОбласти.ТелефонДополнительный2 = ПолучательКонтактноеЛицоТелефонДополнительныйПредставление;
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакетаДополнительныйТелефон);
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНаложенныеПлатежиСервисДоставки") И НаложенныйПлатежВидОплаты <> 0 Тогда
		ОбластьМакетаНаложенныйПлатеж = Макет.ПолучитьОбласть("НаложенныйПлатеж");
		
		СуммаНаложенногоПлатежа = ПолнаяСтоимость;
		
		ПараметрыОбласти = ОбластьМакетаНаложенныйПлатеж.Параметры;
		
		ПараметрыОбласти.НаложенныйПлатежВидОплаты = ?(НаложенныйПлатежВидОплаты =1, НСтр("ru='Картой'"),НСтр("ru='Наличными'"));		
		ПараметрыОбласти.СуммаНаложенногоПлатежа = СуммаНаложенногоПлатежа;
		ПараметрыОбласти.СуммаНаложенногоПлатежа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1 %2 %3",
			СуммаНаложенногоПлатежа,
			ВалютаНаименование,
			?(НаложенныйПлатежПолучен, НСтр("ru='(оплачено)'"), НСтр("ru='(ожидает оплаты)'")));
		
		ТабличныйДокумент.Вывести(ОбластьМакетаНаложенныйПлатеж);
	Иначе
		СуммаНаложенногоПлатежа = 0;
	КонецЕсли;
	
	Если ПлательщикРоль = 3 Тогда
		
		ОбластьМакетаПлательщик = Макет.ПолучитьОбласть("Плательщик");
		ПараметрыОбласти = ОбластьМакетаПлательщик.Параметры;
		
		ПараметрыОбласти.ПлательщикНаименование = ПлательщикКонтрагентНаименование;
		ПараметрыОбласти.РасшифровкаПлательщикКонтрагент = "ПлательщикКонтрагент";
		ПараметрыОбласти.ПлательщикКонтактноеЛицо = ПлательщикКонтактноеЛицоНаименование;
		ПараметрыОбласти.ПлательщикТелефон = ПлательщикКонтактноеЛицоТелефонПредставление;
		
		ТабличныйДокумент.Вывести(ОбластьМакетаПлательщик);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПлательщикКонтактноеЛицоТелефонДополнительныйПредставление) Тогда
		
		ОбластьМакетаДополнительныйТелефон = Макет.ПолучитьОбласть("ДополнительныйТелефон");
		ПараметрыОбласти = ОбластьМакетаДополнительныйТелефон.Параметры;
	
		Если ЗначениеЗаполнено(ОтправительКонтактноеЛицоТелефонДополнительныйПредставление) Тогда
			ПараметрыОбласти.ТелефонДополнительныйТекст1 = НСтр("ru='Доп. телефон:'");
			ПараметрыОбласти.ТелефонДополнительный1 = ПлательщикКонтактноеЛицоТелефонДополнительныйПредставление;
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакетаДополнительныйТелефон);
		
	КонецЕсли;

	ОбластьМакетаАдреса = Макет.ПолучитьОбласть("Адреса");
	ПараметрыОбласти = ОбластьМакетаАдреса.Параметры;
	
	ПараметрыОбласти.СпособОтгрузки = ПредставлениеСпособаОтгрузки(СпособОтгрузки);
	
	Если СпособОтгрузки = 1 Тогда
		ОтправительТерминалОтправительАдрес = ПунктПриемаГрузаНаименование;
		ОтправительТипАдресаНаименование = ?(ПунктПриемаГрузаТипНаименование="", НСтр("ru='Адрес'"),
			ПунктПриемаГрузаТипНаименование);
		Если ЗначениеЗаполнено(ПунктПриемаГрузаАдрес) Тогда
			ОтправительТерминалОтправительАдрес = ОтправительТерминалОтправительАдрес
												  + "(" + ПунктПриемаГрузаАдрес + ")";
		КонецЕсли;
	Иначе
		ОтправительТерминалОтправительАдрес = ОтправительАдресПредставление;
		ОтправительТипАдресаНаименование = НСтр("ru='Адрес'");
	КонецЕсли;
	
	ПараметрыОбласти.РасшифровкаОтправительТерминалОтправительАдрес = "ОтправительТерминалОтправительАдрес";
	ПараметрыОбласти.ОтправительТипАдресаНаименование = ОтправительТипАдресаНаименование;
	
	Если СпособДоставки = 1 Тогда
		ПолучательТерминалПолучательАдрес = ПунктВыдачиГрузаНаименование;
		ПолучательТипАдресаНаименование = ?(ПунктВыдачиГрузаТипНаименование="", НСтр("ru='Адрес'"),
			ПунктВыдачиГрузаТипНаименование);
		Если ЗначениеЗаполнено(ПунктВыдачиГрузаАдрес) Тогда
			ПолучательТерминалПолучательАдрес = ПолучательТерминалПолучательАдрес
												+ "(" + ПунктВыдачиГрузаАдрес + ")";
		КонецЕсли;
	Иначе
		ПолучательТерминалПолучательАдрес = ПолучательАдресПредставление;
		ПолучательТипАдресаНаименование = НСтр("ru='Адрес'");
	КонецЕсли;
	
	ПараметрыОбласти.РасшифровкаПолучательТерминалПолучательАдрес = "ПолучательТерминалПолучательАдрес";
	ПараметрыОбласти.ПолучательТипАдресаНаименование = ПолучательТипАдресаНаименование;
	
	ПараметрыОбласти.ОтправительТерминалОтправительАдрес = ОтправительТерминалОтправительАдрес;
	ПараметрыОбласти.ОтправительТерминалТелефон = ПунктПриемаГрузаТелефон;
	ПараметрыОбласти.СпособДоставки = ПредставлениеСпособаДоставки(СпособДоставки);
	ПараметрыОбласти.ПолучательТерминалПолучательАдрес = ПолучательТерминалПолучательАдрес;
	ПараметрыОбласти.ПолучательТерминалТелефон = ПунктВыдачиГрузаТелефон;
	
	ТабличныйДокумент.Вывести(ОбластьМакетаАдреса);
	
	Если ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СДоставка() Тогда
		ОбластьМакетаШапкаВремя = Макет.ПолучитьОбласть("ШапкаВремя1");
		ПараметрыОбласти = ОбластьМакетаШапкаВремя.Параметры;
		ПараметрыОбласти.ОтправительДатаИВремяОтгрузкиПредставление = Формат(ДатаОтгрузки,"ДЛФ=D")
			+ " " + ВремяОтгрузкиПредставление;
		ПараметрыОбласти.ПолучательДатаИВремяОтгрузкиПредставление = Формат(ДатаДоставки,"ДЛФ=D")
			+ " " + ВремяДоставкиПредставление;
		
	Иначе
		ОбластьМакетаШапкаВремя = Макет.ПолучитьОбласть("ШапкаВремя1");
		ПараметрыОбласти = ОбластьМакетаШапкаВремя.Параметры;
		
		СтрокиДляПодстановки = Новый Массив();
		СтрокиДляПодстановки.Добавить(Формат(ДатаОтгрузки,"ДЛФ=D"));
		ВариантыВремениОтгрузки = СервисДоставкиПовтИсп.ВариантыВремениОтгрузки();
		
		Если ВариантВремениОтгрузки = ВариантыВремениОтгрузки.ВОпределенноеВремя Тогда
			СтрокиДляПодстановки.Добавить(" ");
			СтрокиДляПодстановки.Добавить(Формат(ВремяОтгрузкиК,"ДФ=ЧЧ:мм; ДП=00:00"));
		ИначеЕсли ВариантВремениОтгрузки = ВариантыВремениОтгрузки.ВТечениеДня Тогда 
			СтрокиДляПодстановки.Добавить(" (");
			СтрокиДляПодстановки.Добавить(Формат(ВремяОтгрузкиС, "ДФ=ЧЧ:мм; ДП=00:00"));
			СтрокиДляПодстановки.Добавить("-");
			СтрокиДляПодстановки.Добавить(Формат(ВремяОтгрузкиПо, "ДФ=ЧЧ:мм; ДП=00:00"));
			СтрокиДляПодстановки.Добавить(")");
		ИначеЕсли ВариантВремениОтгрузки = ВариантыВремениОтгрузки.КакМожноСкорее Тогда 
			СтрокиДляПодстановки.Добавить(" ");
			СтрокиДляПодстановки.Добавить(НСтр("ru = '(на ближайшее время)'"));
		КонецЕсли;
		
		ПараметрыОбласти.ОтправительДатаИВремяОтгрузкиПредставление = СтрСоединить(СтрокиДляПодстановки);
		
		ПараметрыОбласти.ПолучательДатаИВремяОтгрузкиПредставление = Формат(ДатаДоставки,"ДЛФ=DT;");
			
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьМакетаШапкаВремя);
	
	ОбластьМакетаПараметрыГруза = Макет.ПолучитьОбласть("ПараметрыГруза");
	
	ПараметрыОбласти = ОбластьМакетаПараметрыГруза.Параметры;
	
	ПараметрыОбласти.Валюта = ВалютаНаименование;
	ПараметрыОбласти.ГрузСодержимое = ГрузСодержимое;
	ПараметрыОбласти.ГрузСтоимость = ГрузСтоимость;
	ПараметрыОбласти.ГрузКоличествоГрузовыхМест = ГрузКоличествоГрузовыхМест;
	ПараметрыОбласти.ГрузВес = ГрузВес;
	ПараметрыОбласти.ГрузОбъем = ГрузОбъем;
	ПараметрыОбласти.ГрузМаксимальныйВес = ГрузМаксимальныйВес;
	ПараметрыОбласти.ГрузМаксимальнаяВысота = ГрузМаксимальнаяВысота;
	ПараметрыОбласти.ГрузМаксимальнаяШирина = ГрузМаксимальнаяШирина;
	ПараметрыОбласти.ГрузМаксимальнаяДлина = ГрузМаксимальнаяДлина;
	
	ТабличныйДокумент.Вывести(ОбластьМакетаПараметрыГруза);
	
	Если ГрузНегабаритныйВес <> 0 
		ИЛИ ГрузНегабаритныйОбъем <> 0 
		ИЛИ ГрузКоличествоНегабаритныхГрузовыхМест <> 0 Тогда 
		ОбластьПараметрыНегабаритногоГруза = Макет.ПолучитьОбласть("ПараметрыНегабаритногоГруза");
		ОбластьПараметрыНегабаритногоГруза.Параметры.ГрузНегабаритныйВес = ГрузНегабаритныйВес;
		ОбластьПараметрыНегабаритногоГруза.Параметры.ГрузНегабаритныйОбъем = ГрузНегабаритныйОбъем;
		ОбластьПараметрыНегабаритногоГруза.Параметры.ГрузКоличествоНегабаритныхГрузовыхМест 
			= ГрузКоличествоНегабаритныхГрузовыхМест;
		
		ТабличныйДокумент.Вывести(ОбластьПараметрыНегабаритногоГруза);
	КонецЕсли;
	
	ОбластьТабличнаяЧастьУслуги = ТабличнаяЧастьУслуги(Макет, УслугиТарифа);
	ТабличныйДокумент.Вывести(ОбластьТабличнаяЧастьУслуги);
	
	Если СуммаСкидки <> 0 Тогда
		ОбластьМакетаПодвал = Макет.ПолучитьОбласть("ПодвалСоСкидкой");
		ОбластьМакетаПодвал.Параметры.СуммаСкидки = Формат(СуммаСкидки,"ЧДЦ=2; ЧН=-");
	Иначе
		ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
	КонецЕсли;
	
	ОбластьМакетаПодвал.Параметры.СуммаДокумента = Формат(СуммаДокумента,"ЧДЦ=2; ЧН=-");
	ОбластьМакетаПодвал.Параметры.Валюта = ВалютаНаименование;
	ТабличныйДокумент.Вывести(ОбластьМакетаПодвал);
	
	Если ДополнительнаяИнформация <> "" Тогда
		ОбластьМакетаДополнительнаяИнформация = Макет.ПолучитьОбласть("ДополнительнаяИнформация");
		ОбластьМакетаДополнительнаяИнформация.Параметры.Комментарий = ДополнительнаяИнформация;
		ТабличныйДокумент.Вывести(ОбластьМакетаДополнительнаяИнформация);
	КонецЕсли;
	
	Если РежимМастера = СервисДоставкиКлиентСервер.РежимМастераЗарегистрирован() Тогда
		
		ОбластьМакетаДополнительныеДанныеЗаголовок1 			= Макет.ПолучитьОбласть("ДополнительныеДанныеЗаголовок1");
		ОбластьМакетаДополнительныеДанныеСтрока 				= Макет.ПолучитьОбласть("ДополнительныеДанныеСтрока");
		ОбластьМакетаДополнительныеДанныеСтрокаСНаименованием
			= Макет.ПолучитьОбласть("ДополнительныеДанныеСтрокаСНаименованием");
		
		Для Каждого ТекущиеДополнительныеДанные Из ДополнительныеДанные Цикл
			
			ТекущаяОбласть = ОбластьМакетаДополнительныеДанныеЗаголовок1;
			
			ТекущаяОбласть.Параметры.Наименование = ТекущиеДополнительныеДанные.Наименование;
			ТабличныйДокумент.Вывести(ТекущаяОбласть);
			
			Если ТекущиеДополнительныеДанные.Список.Количество() = 0 Тогда
				ТекущаяОбласть = ОбластьМакетаДополнительныеДанныеСтрока;
				ТекущаяОбласть.Параметры.Значение = ТекущиеДополнительныеДанные.Значение;
				ТабличныйДокумент.Вывести(ТекущаяОбласть);
			Иначе
				Для Каждого ТекущиеДанныеИзСписка Из ТекущиеДополнительныеДанные.Список Цикл
					
					Если ЗначениеЗаполнено(ТекущиеДанныеИзСписка.Наименование) Тогда
						ТекущаяОбласть = ОбластьМакетаДополнительныеДанныеСтрокаСНаименованием;
						ТекущаяОбласть.Параметры.Наименование = ТекущиеДанныеИзСписка.Наименование;
					Иначе
						ТекущаяОбласть = ОбластьМакетаДополнительныеДанныеСтрока;
					КонецЕсли;
					
					ТекущаяОбласть.Параметры.Значение = ТекущиеДанныеИзСписка.Значение;
					ТабличныйДокумент.Вывести(ТекущаяОбласть);
					
				КонецЦикла;
			КонецЕсли;
				
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТабличныйДокумент;

КонецФункции

&НаСервере
Процедура СформироватьИтоговуюИнформацию()
	
	ИтоговаяИнформация = ТабличныйДокументИтоговаяИнформация();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораВремениИДаты(ВариантВыбораВремени, ТолькоПросмотр)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборДатыВремени", ЭтотОбъект);
	
	ПараметрыОткрытияФормы = Новый Структура;
	
	Если ВариантВыбораВремени = 1 Тогда
		
		ПараметрыОткрытияФормы.Вставить("Дата", ДатаОтгрузки);
		ПараметрыОткрытияФормы.Вставить("ВремяРаботыС", ВремяОтгрузкиС);
		ПараметрыОткрытияФормы.Вставить("ВремяРаботыПо", ВремяОтгрузкиПо);
		ПараметрыОткрытияФормы.Вставить("ВремяОбедС", ВремяОтгрузкиОбедС);  
		ПараметрыОткрытияФормы.Вставить("ВремяОбедПо", ВремяОтгрузкиОбедПо);
		ПараметрыОткрытияФормы.Вставить("ВариантВыбораВремени", 1);
		
	ИначеЕсли ВариантВыбораВремени = 2 Тогда
		
		ПараметрыОткрытияФормы.Вставить("Дата", ДатаДоставки);
		ПараметрыОткрытияФормы.Вставить("ВремяРаботыС", ВремяДоставкиС);
		ПараметрыОткрытияФормы.Вставить("ВремяРаботыПо", ВремяДоставкиПо);
		ПараметрыОткрытияФормы.Вставить("ВремяОбедС", ВремяДоставкиОбедС);  
		ПараметрыОткрытияФормы.Вставить("ВремяОбедПо", ВремяДоставкиОбедПо);
		ПараметрыОткрытияФормы.Вставить("ВариантВыбораВремени", 2);
			
	КонецЕсли;
	
	ПараметрыОткрытияФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	ПараметрыОткрытияФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	ОткрытьФорму(
		"Обработка.СервисДоставки.Форма.ВыборВремениПередачиГруза",
		ПараметрыОткрытияФормы,
		ЭтотОбъект,,,,ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборДатыВремени(Результат, ДополнительныеПараметры) Экспорт
		
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ВариантВыбораВремени = 0;
	Если Результат.Свойство("ВариантВыбораВремени", ВариантВыбораВремени) Тогда 
		Если ВариантВыбораВремени = 1 Тогда
			
			Результат.Свойство("ВремяРаботыС", ВремяОтгрузкиС);
			Результат.Свойство("ВремяРаботыПо", ВремяОтгрузкиПо);
			Результат.Свойство("ВремяОбедС", ВремяОтгрузкиОбедС);  
			Результат.Свойство("ВремяОбедПо", ВремяОтгрузкиОбедПо);
			
			СформироватьПредставлениеВремениОтгрузки();
			
		ИначеЕсли ВариантВыбораВремени = 2 Тогда

			Результат.Свойство("ВремяРаботыС", ВремяДоставкиС);
			Результат.Свойство("ВремяРаботыПо", ВремяДоставкиПо);
			Результат.Свойство("ВремяОбедС", ВремяДоставкиОбедС);  
			Результат.Свойство("ВремяОбедПо", ВремяДоставкиОбедПо);
			
			СформироватьПредставлениеВремениДоставки();
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЕстьОшибки = Ложь;
	ПроверитьВремяОтгрузки(ЕстьОшибки, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПредставлениеВремениОтгрузки()
	
	ВремяОтгрузкиПредставление = ПредставлениеДатыВремени(ДатаОтгрузки, 
									ВремяОтгрузкиС, 
									ВремяОтгрузкиПо, 
									ВремяОтгрузкиОбедС, 
									ВремяОтгрузкиОбедПо, 1);
									
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПредставлениеВремениДоставки()
	
	ВремяДоставкиПредставление = ПредставлениеДатыВремени(ДатаДоставки, 
									ВремяДоставкиС, 
									ВремяДоставкиПо, 
									ВремяДоставкиОбедС, 
									ВремяДоставкиОбедПо, 2);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеДатыВремени(ДатаДоставки, ВремяРаботыС, ВремяРаботыПо, ВремяОбедС, ВремяОбедПо, Режим)
	
	СтрокаПредставления = "";
	
	Если ЗначениеЗаполнено(ВремяРаботыС) ИЛИ ЗначениеЗаполнено(ВремяРаботыПо) Тогда
		СтрокаПредставления = СтрокаПредставления + Формат(ВремяРаботыС, "ДФ=HH:mm; ДП=00:00")
			+ "-" + Формат(ВремяРаботыПо, "ДФ=HH:mm");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВремяОбедС) ИЛИ ЗначениеЗаполнено(ВремяОбедПо) Тогда
		СтрокаПредставления = СтрокаПредставления + " (обед " + Формат(ВремяОбедС, "ДФ=HH:mm; ДП=00:00")
			+ "-" + Формат(ВремяОбедПо, "ДФ=HH:mm") + ")";
	КонецЕсли;
	
	Возврат СтрокаПредставления;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьПодборТерминала(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Если ДополнительныеПараметры.Направление = 1 Тогда
		Адресат = "ПунктПриемаГруза";
	Иначе
		Адресат = "ПунктВыдачиГруза";
	КонецЕсли;
	
	ЭтоДеловыеЛинии = ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СДоставка();
	
	Если ЭтоДеловыеЛинии И Результат.ТерминалИдентификатор <> ЭтотОбъект[Адресат + "Идентификатор"] Тогда
		ЗарегистрироватьИзменениеОтборов(Истина);
	КонецЕсли;
	
	Результат.Свойство("ТерминалИдентификатор", ЭтотОбъект[Адресат + "Идентификатор"]);
	Результат.Свойство("ТерминалИдентификаторВСистемеГрузоперевозчика", ЭтотОбъект[Адресат + "ИдентификаторВСистемеГрузоперевозчика"]);
	Результат.Свойство("Терминал", ЭтотОбъект[Адресат + "Наименование"]);
	Результат.Свойство("Адрес", ЭтотОбъект[Адресат + "Адрес"]);
	Результат.Свойство("Телефон", ЭтотОбъект[Адресат + "Телефон"]);
	Результат.Свойство("Описание", ЭтотОбъект[Адресат + "Описание"]);
	Результат.Свойство("ТипНаименование", ЭтотОбъект[Адресат + "ТипНаименование"]);
	Результат.Свойство("ТипИдентификатор", ЭтотОбъект[Адресат + "ТипИдентификатор"]);
	Результат.Свойство("НаселенныйПунктИдентификатор", ЭтотОбъект[Адресат + "НаселенныйПунктИдентификатор"]);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуТерминала(Идентификатор)
	
	Если Не ЗначениеЗаполнено(Идентификатор) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытияФормы = Новый Структура;
	
	ПараметрыОткрытияФормы.Вставить("Идентификатор", Идентификатор);
	ПараметрыОткрытияФормы.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	ПараметрыОткрытияФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	ОткрытьФорму(
		"Обработка.СервисДоставки.Форма.КарточкаТерминала",
		ПараметрыОткрытияФормы,
		ЭтотОбъект,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура СброситьВзаимоисключающие(ТекущиеДанные)
	
	НайденныеСтроки = НесовместимыеУслуги.НайтиСтроки(Новый Структура("Идентификатор", ТекущиеДанные.Идентификатор));
	
	Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
		СброситьВзаимоисключающее(ТекущиеДанные, ТекущаяСтрока.Идентификатор,
			ТекущаяСтрока.ИдентификаторНесовместимойУслуги);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьВзаимоисключающее(ТекущиеДанные, ИдентификаторНового, ИдентификаторТекущего)
	
	Если ТекущиеДанные.Идентификатор = ИдентификаторНового Тогда
		Родитель = ТекущиеДанные.ПолучитьРодителя();
		СтрокиДерева = Родитель.ПолучитьЭлементы();
		Для Каждого ТекущаяСтрокаДерева Из СтрокиДерева Цикл
			Если ТекущаяСтрокаДерева.Идентификатор = ИдентификаторТекущего Тогда
				ТекущаяСтрокаДерева.Использовать = Ложь;
				Элементы.ОтборыТарифов.Свернуть(ТекущаяСтрокаДерева.ПолучитьИдентификатор());
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьИзменениеОтборов(СброситьТариф = Истина)
	
	ОтборыИзменение = Истина;
	ВыделенныйТариф = "";
	СформироватьНадписьОтбора();
	
	Если СброситьТариф Тогда
		СброситьТариф();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьНадписьОтбора()
	
	ТекстЗаголовка = НСтр("ru='Настроить отбор'");
	Элементы.ГруппаОтборы.Заголовок = ?(ОтборыИзменение, ТекстЗаголовка + "*", ТекстЗаголовка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуГрафикаДвиженияЗаказа()
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ИдентификаторЗаказа", ИдентификаторЗаказа);
	ПараметрыОткрытияФормы.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	ПараметрыОткрытияФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
		
	ОткрытьФорму("Обработка.СервисДоставки.Форма.ОтслеживаниеЗаказа",
		ПараметрыОткрытияФормы,
		ЭтотОбъект,
		ИдентификаторЗаказа,,,,
		РежимОткрытияОкнаФормы.Независимый);
							
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуМультизаказа()
	
	ПараметрыОткрытияФормы = Новый Структура();
	ПараметрыОткрытияФормы.Вставить("ИдентификаторЗаказа", МультизаказИдентификатор);
	ПараметрыОткрытияФормы.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	ПараметрыОткрытияФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	СервисДоставкиКлиент.ОткрытьФормуКарточкиМультизаказаНаДоставку(ПараметрыОткрытияФормы);
							
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуГрузоперевозчика()
	
	ПараметрыОткрытияФормы = Новый Структура();
	ПараметрыОткрытияФормы.Вставить("Идентификатор", ГрузоперевозчикИдентификатор);
	ПараметрыОткрытияФормы.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	ПараметрыОткрытияФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	ОткрытьФорму("Обработка.СервисДоставки.Форма.КарточкаГрузоперевозчика", 
		ПараметрыОткрытияФормы,
		,
		ГрузоперевозчикИдентификатор,,,,
		РежимОткрытияОкнаФормы.Независимый);
							
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуУслуги(ИдентификаторУслуги)
	
	ПараметрыОткрытияФормы = Новый Структура();
	ПараметрыОткрытияФормы.Вставить("Идентификатор", ИдентификаторУслуги);
	ПараметрыОткрытияФормы.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	ПараметрыОткрытияФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	ОткрытьФорму("Обработка.СервисДоставки.Форма.КарточкаУслуги", 
		ПараметрыОткрытияФормы,
		,
		,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуТарифа()
	
	ПараметрыОткрытияФормы = Новый Структура();
	ПараметрыОткрытияФормы.Вставить("Идентификатор", ТарифИдентификатор);
	ПараметрыОткрытияФормы.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	ПараметрыОткрытияФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	ОткрытьФорму("Обработка.СервисДоставки.Форма.КарточкаТарифа", 
		ПараметрыОткрытияФормы,
		,
		ТарифИдентификатор,,,,
		РежимОткрытияОкнаФормы.Независимый);
							
КонецПроцедуры

&НаКлиенте
Процедура ИтоговаяИнформацияОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	Если Расшифровка = "Грузоперевозчик" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуГрузоперевозчика();
		
	ИначеЕсли Расшифровка = "Состояние" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ОткрытьФормуГрафикаДвиженияЗаказа();
		
	ИначеЕсли Расшифровка = "ОтправительТерминалОтправительАдрес" Тогда
		
		СтандартнаяОбработка = Ложь;
		Если СпособОтгрузки = 1 Тогда
			ОткрытьФормуТерминала(ПунктПриемаГрузаИдентификатор);
		Иначе
			АдресНачалоВыбора(Элементы.ОтправительАдрес, ОтправительКонтрагентЭтоОрганизация);
		КонецЕсли;
	ИначеЕсли Расшифровка = "ПолучательТерминалПолучательАдрес" Тогда
		
		СтандартнаяОбработка = Ложь;
		Если СпособДоставки = 1 Тогда
			ОткрытьФормуТерминала(ПунктВыдачиГрузаИдентификатор);
		Иначе
			АдресНачалоВыбора(Элементы.ПолучательАдрес, ПолучательКонтрагентЭтоОрганизация);
		КонецЕсли;
		
	ИначеЕсли Расшифровка = "ОтправительКонтрагент" Тогда
		
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(ОтправительКонтрагентСсылка) Тогда
			КонтрагентОткрытие(Элементы.ОтправительКонтрагент)
		КонецЕсли;
		
	ИначеЕсли Расшифровка = "ПолучательКонтрагент" Тогда
		
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(ПолучательКонтрагентСсылка) Тогда
			КонтрагентОткрытие(Элементы.ПолучательКонтрагент)
		КонецЕсли;
		
	ИначеЕсли Расшифровка = "ПлательщикКонтрагент" Тогда
		
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(ПлательщикКонтрагентСсылка) Тогда
			КонтрагентОткрытие(Элементы.ПлательщикКонтрагент)
		КонецЕсли;
		
	ИначеЕсли Расшифровка = "Тариф" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуТарифа();
		
	ИначеЕсли Расшифровка = "ОткрытьФормуОснования" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуОснования();
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает список ошибок заполнения в виде списка значений:
//      Представление   - описание ошибки.
//      Значение        - XPath для поля.
&НаКлиенте
Функция ОшибкиЗаполненияТелефона(Префикс)
	
	Представление = ЭтотОбъект[Префикс + "Представление"];
	Значение = ЭтотОбъект[Префикс + "Значение"];
	
	СписокОшибок = Новый СписокЗначений;
	
	Если Представление = "" Тогда
		Возврат СписокОшибок;
	КонецЕсли;
	
	СтруктураТелефона = Неопределено;
	
	Если Значение <> "" Тогда
		
		Отказ = Ложь;
		ТекстОшибки = "";
		СтруктураТелефона = ЗначениеИзСтрокиJSON(Значение, Отказ, ТекстОшибки);
		
	КонецЕсли;
	
	Если СтруктураТелефона = Неопределено Тогда
		
		Значение = СервисДоставкиВызовСервера.КонтактнаяИнформацияПоПредставлению(Представление, "Телефон");
		ЭтотОбъект[Префикс + "Значение"] = Значение;
		Отказ = Ложь;
		ТекстОшибки = "";
		СтруктураТелефона = ЗначениеИзСтрокиJSON(Значение, Отказ, ТекстОшибки);
		
	КонецЕсли;
	
	ПолныйНомерТелефона = "";
	Если СтруктураТелефона.Свойство("countryCode") Тогда
		ПолныйНомерТелефона = ПолныйНомерТелефона + СтруктураТелефона.countryCode;
	КонецЕсли;
	
	Если СтруктураТелефона.Свойство("areaCode") Тогда
		ПолныйНомерТелефона = ПолныйНомерТелефона + СтруктураТелефона.areaCode;
	КонецЕсли;
	
	Если СтруктураТелефона.Свойство("number") Тогда
		ПолныйНомерТелефона = ПолныйНомерТелефона + СтруктураТелефона.number;
	КонецЕсли;
	
	НомерТелефонаТолькоЦифры = ТолькоЦифры(ПолныйНомерТелефона);
	
	Если СтрДлина(НомерТелефонаТолькоЦифры) < 10 Тогда
		СписокОшибок.Добавить("НомерТелефона", НСтр("ru = 'Номер телефона слишком короткий (менее 10 цифр)'"));
	КонецЕсли;
	
	Если СтрДлина(НомерТелефонаТолькоЦифры) > 15 Тогда
		СписокОшибок.Добавить("НомерТелефона", НСтр("ru = 'Номер телефона слишком длинный'"));
	КонецЕсли;
	
	Если НомерТелефонаСодержитНедопустимыеСимволы(ПолныйНомерТелефона) Тогда
		СписокОшибок.Добавить("НомерТелефона", НСтр("ru = 'Номер телефона содержит недопустимые символы'"));
	КонецЕсли;
	
	Возврат СписокОшибок;
	
КонецФункции

// Проверяет, содержит ли строка только 
//
// Параметры:
//  СтрокаПроверки          - Строка - Строка для проверки.
//
// Возвращаемое значение:
//   Булево - Истина - строка содержит только цифры или пустая, Ложь - строка содержит иные символы.
//
&НаКлиенте
Функция НомерТелефонаСодержитНедопустимыеСимволы(Знач СтрокаПроверки)
	
	СписокДопустимыхСимволов = "+-.,() wp1234567890";
	Возврат СтрРазделить(СтрокаПроверки, СписокДопустимыхСимволов, Ложь).Количество() > 0;
	
КонецФункции

&НаКлиенте
Функция ТолькоЦифры(Знач СтрокаДляПроверки)
	
	Возврат СервисДоставкиКлиент.ТолькоЦифры(СтрокаДляПроверки);
	
КонецФункции

&НаСервереБезКонтекста
Функция ОрганизацииБизнесСетиНаСервере()
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(СервисДоставкиСлужебный.ОрганизацииБизнесСети());
	
КонецФункции

&НаКлиенте
Процедура ОрганизацияБизнесСетиСсылкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокВыбора = Элементы.ОрганизацияБизнесСетиСсылка.СписокВыбора;
	СписокВыбора.Очистить();
	
	ОрганизацииБизнесСети = ОрганизацииБизнесСетиНаСервере();
	Для Каждого ТекущаяОрганизация Из ОрганизацииБизнесСети Цикл
		СписокВыбора.Добавить(ТекущаяОрганизация.Организация, ТекущаяОрганизация.Наименование);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначениеИзСтрокиJSON(Значение, Отказ, ТекстОшибки)
	
	Возврат СервисДоставки.ЗначениеИзСтрокиJSON(Значение, Отказ, ТекстОшибки);
	
КонецФункции

&НаКлиенте
Процедура ТоварныйСостав(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТоварныйСостав", ТоварныйСостав);
	ПараметрыФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	ПараметрыФормы.Вставить("НаложенныйПлатежВидОплаты", НаложенныйПлатежВидОплаты);
	
	ОткрытьФорму("Обработка.СервисДоставки.Форма.ТоварныйСостав",ПараметрыФормы, ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОборотыДопУслугПриАктивизацииЯчейки(Элемент)
	
	ТекущиеДанные = Элементы.ТарифДополнительныеУслуги.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
	
		Поле = Элемент.ТекущийЭлемент;
		Поле.ТолькоПросмотр = Не ТекущиеДанные.ТребуетсяЗначение;
		
		Если ТекущиеДанные.ТипСтроки = 1 И ТекущиеДанные.Обязательная Тогда
			Элементы.ТарифДополнительныеУслуги.Развернуть(ТекущиеДанные.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТарифДополнительныеУслугиПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ТарифДополнительныеУслуги.ТекущиеДанные;
	
	Если Элементы.ТарифДополнительныеУслуги.ТекущийЭлемент = Элементы.ОборотыДопУслугПоказыватьИнформацию 
		И ТекущиеДанные.ПоказыватьИнформацию Тогда
		ОткрытьФормуУслуги(ТекущиеДанные.Идентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОборотыДопУслугПередРазворачиванием(Элемент, Строка, Отказ)
	
	ТекущиеДанные = ТарифДополнительныеУслуги.НайтиПоИдентификатору(Строка);
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (Не ТекущиеДанные.Использовать) И ТекущиеДанные.ТипСтроки = 1 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОборотыДопУслугПередСворачиванием(Элемент, Строка, Отказ)
	
	ТекущиеДанные = ТарифДополнительныеУслуги.НайтиПоИдентификатору(Строка);
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Использовать И ТекущиеДанные.ТипСтроки = 1 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОборотыДопУслугЗначениеПриИзменении(Элемент)
	
	СтрокаОтбора = ТарифДополнительныеУслуги.НайтиПоИдентификатору(Элементы.ТарифДополнительныеУслуги.ТекущаяСтрока);
	Если СтрокаОтбора <> Неопределено Тогда
		СтрокаУслуги = СтрокаОтбора.ПолучитьРодителя();
		
		Если ЗначениеЗаполнено(Элементы.ТарифДополнительныеУслуги.ТекущиеДанные.Значение) Тогда
			СтрокаУслуги.Использовать = Истина;
		КонецЕсли;
		ЗарегистрироватьИзменениеДополнительныхУслуг(СтрокаУслуги);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОборотыДопУслугИспользоватьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТарифДополнительныеУслуги.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗарегистрироватьИзменениеДополнительныхУслуг(ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДопУслугиПоТарифу(Знач ТабДопУслуг)

	ДеревоДопУслуг = ТарифДополнительныеУслуги.ПолучитьЭлементы();
	
	ДеревоДопУслуг.Очистить();
	
	ТекущаяКатегория = "";
	
	МассивВыбранныхУслуг = Новый Массив();
	
	Для Каждого ТекущаяУслуга Из ТабДопУслуг Цикл
		
		ЕстьНесовместимаяУслуга = Ложь;
		Для Каждого ИдентификаторВыбраннойУслуги Из МассивВыбранныхУслуг Цикл
			
			Если НесовместимыеУслуги.НайтиСтроки(Новый Структура("Идентификатор,ИдентификаторНесовместимойУслуги",
				ИдентификаторВыбраннойУслуги, ТекущаяУслуга.Идентификатор)).Количество() Тогда
				ЕстьНесовместимаяУслуга = Истина;
				Продолжить;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьНесовместимаяУслуга Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяКатегория <> ТекущаяУслуга.Категория Тогда
			ТекущаяКатегория = ТекущаяУслуга.Категория;
			
			СтрокаДерева = ДеревоДопУслуг.Добавить();
			СтрокаДерева.Наименование = ТекущаяУслуга.Категория;
			СтрокаДерева.Использовать = Истина;
			СтрокаДерева.Идентификатор = "";
			СтрокаДерева.Значение = Неопределено;
			СтрокаДерева.ТребуетсяЗначение = Ложь;
			СтрокаДерева.Обязательная = Ложь;
			СтрокаДерева.ТипСтроки = 0;
			
		КонецЕсли;
		
		СтрокаДереваВетка = СтрокаДерева.ПолучитьЭлементы().Добавить();
		СтрокаДереваВетка.Наименование = ТекущаяУслуга.Наименование;
		СтрокаДереваВетка.Использовать = ТекущаяУслуга.Использовать;
		СтрокаДереваВетка.Идентификатор = ТекущаяУслуга.Идентификатор;
		СтрокаДереваВетка.Категория = ТекущаяУслуга.Категория;
		СтрокаДереваВетка.ТипСтроки = 1;
		СтрокаДереваВетка.ИдентификаторУслугТарифов = ТекущаяУслуга.ПолучитьИдентификатор();
		СтрокаДереваВетка.ПоказыватьИнформацию = ТекущаяУслуга.ПоказыватьИнформацию;
		СтрокаДереваВетка.Обязательная = ТекущаяУслуга.Обязательная;
		
		Если СтрокаДереваВетка.Обязательная Тогда
			СтрокаДереваВетка.Использовать = Истина;
			МассивВыбранныхУслуг.Добавить(ТекущаяУслуга.Идентификатор);
		КонецЕсли;
		
		НайденныеСтроки = УслугиТарифа.НайтиСтроки(Новый Структура("Идентификатор", ТекущаяУслуга.Идентификатор));
		
		Свойства = Неопределено;
		Если НайденныеСтроки.Количество() Тогда
			СтрокаДереваВетка.Использовать = Истина;
			Свойства = НайденныеСтроки[0].Свойства;
		КонецЕсли;
		
		СвойстваУслуги = ТекущаяУслуга.Свойства;
		
		Если СвойстваУслуги.Количество() Тогда
			
			СтрокиСвойств = СтрокаДереваВетка.ПолучитьЭлементы();
			СтрокиСвойств.Очистить();
			
			Для Каждого ТекущееСвойство Из СвойстваУслуги Цикл
				
				Если Не Свойства = Неопределено Тогда
					НайденныеСвойства = Свойства.НайтиСтроки(Новый Структура("Идентификатор", ТекущееСвойство.Идентификатор));
				КонецЕсли;
				
				СтрокаДереваСвойство = СтрокиСвойств.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДереваСвойство, ТекущееСвойство);
				СтрокаДереваСвойство.ТребуетсяЗначение = Истина;
				СтрокаДереваСвойство.ТипСтроки = 2;
				Если Не Свойства = Неопределено И НайденныеСвойства.Количество() Тогда
					СтрокаДереваСвойство.Значение = НайденныеСвойства[0].Значение;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьДополнительныеУслуги(Команда)
	
	ОчиститьСообщения();
	
	Если ПроверитьЗаполнениеЗначенийДополнительныхУслуг() Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Есть незаполненные свойства для выбранных дополнительных услуг.'"));
	Иначе
		Модифицированность = Истина;
		Элементы.ГруппаДополнительныхУслугТарифа.Скрыть();
		Элементы.ГруппаПредупрежденияПоДопУслугам.Видимость = Ложь;
		ОбновитьИнформациюПоВыбраннымДопУслугам();
	КонецЕсли;
	
	Если ДополнительныеУслугиИзменение Тогда
		ОбновитьТариф();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюПоВыбраннымДопУслугам()
	
	Для Каждого ТекущаяКатегория Из ТарифДополнительныеУслуги.ПолучитьЭлементы() Цикл
		Для Каждого ТекущаяДопУслуга Из ТекущаяКатегория.ПолучитьЭлементы() Цикл
			Если ТекущаяДопУслуга.Использовать Тогда
				ОтборПоИдентификатору = Новый Структура();
				ОтборПоИдентификатору.Вставить("Идентификатор", ТекущаяДопУслуга.Идентификатор);
				НайденныеСтрокиУслуг = УслугиТарифа.НайтиСтроки(ОтборПоИдентификатору);
				Если НайденныеСтрокиУслуг.Количество() Тогда
					НоваяУслуга = НайденныеСтрокиУслуг[0];
				Иначе
					НоваяУслуга = УслугиТарифа.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяУслуга, ТекущаяДопУслуга,"Идентификатор, Наименование, Использовать, Обязательная, Категория");
				КонецЕсли;
				
				НоваяУслуга.Свойства.Очистить();
				СтрокиСвойств = ТекущаяДопУслуга.ПолучитьЭлементы();
				
				Для Каждого ТекущееСвойство Из СтрокиСвойств Цикл
					Если ЗначениеЗаполнено(ТекущееСвойство.Значение) Тогда
						НовоеСвойство = НоваяУслуга.Свойства.Добавить();
						ЗаполнитьЗначенияСвойств(НовоеСвойство, ТекущееСвойство);
					КонецЕсли;
				КонецЦикла;
			Иначе
				ОтборПоИдентификатору = Новый Структура();
				ОтборПоИдентификатору.Вставить("Идентификатор", ТекущаяДопУслуга.Идентификатор);
				НайденныеСтрокиУслуг = УслугиТарифа.НайтиСтроки(ОтборПоИдентификатору);
				Если НайденныеСтрокиУслуг.Количество() Тогда
					УслугиТарифа.Удалить(НайденныеСтрокиУслуг[0]);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ЗаполнитьИнформациюПоТекущемуТарифу();
	
КонецПроцедуры

&НаСервере
Функция ПроверитьЗаполнениеЗначенийДополнительныхУслуг()
	
	Отказ = Ложь;
	
	ДеревоДопУслуг = ТарифДополнительныеУслуги.ПолучитьЭлементы();
	
	Для Каждого СтрокаДопУслуги Из ДеревоДопУслуг Цикл
		
		СтрокиУслуг = СтрокаДопУслуги.ПолучитьЭлементы();
		
		Для Каждого СтрокаУслуги Из СтрокиУслуг Цикл
			
			Если СтрокаУслуги.Использовать
				ИЛИ СтрокаУслуги.Обязательная Тогда
				
				СвойстваУслуги = СтрокаУслуги.ПолучитьЭлементы();
				
				Для Каждого СвойствоУслуги Из СвойстваУслуги Цикл
					
					Если Не ЗначениеЗаполнено(СвойствоУслуги.Значение) Тогда
						Отказ = Истина;
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если Отказ Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Отказ Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Процедура ОборотыДопУслугТребуетсяЗначениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТарифДополнительныеУслуги.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Поле = Элемент.ТекущийЭлемент;
		Поле.ТолькоПросмотр = ТекущиеДанные.Обязательная;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РеквизитыДляПересчета()
	Возврат СтрРазделить(
		"Вес,Объем,МаксимальнаяВысота,МаксимальнаяДлина,МаксимальнаяШирина,МаксимальныйВес,Содержимое,Стоимость", ",");
КонецФункции

&НаКлиенте
Процедура УстановитьКомандыПересчетаПараметровГруза()
	
	Элементы.ОбновитьСтоимость.Видимость = ЗначениеЗаполнено(ГрузСтоимостьДляПересчета);
	Элементы.ОбновитьСодержимое.Видимость = ЗначениеЗаполнено(ГрузСодержимоеДляПересчета);
	Элементы.ОбновитьВес.Видимость = ЗначениеЗаполнено(ГрузВесДляПересчета);
	Элементы.ОбновитьОбъем.Видимость = ЗначениеЗаполнено(ГрузОбъемДляПересчета);
	Элементы.ОбновитьОбщийВес.Видимость = ЗначениеЗаполнено(ГрузВесДляПересчета);
	Элементы.ОбновитьОбщийОбъем.Видимость = ЗначениеЗаполнено(ГрузОбъемДляПересчета);
	Элементы.ОбновитьДлину.Видимость = ЗначениеЗаполнено(ГрузМаксимальнаяДлинаДляПересчета);
	Элементы.ОбновитьШирину.Видимость = ЗначениеЗаполнено(ГрузМаксимальнаяШиринаДляПересчета);
	Элементы.ОбновитьВысоту.Видимость = ЗначениеЗаполнено(ГрузМаксимальнаяВысотаДляПересчета);
	Элементы.ОбновитьМаксимальнуюДлину.Видимость = ЗначениеЗаполнено(ГрузМаксимальнаяДлинаДляПересчета);
	Элементы.ОбновитьМаксимальнуюШирину.Видимость = ЗначениеЗаполнено(ГрузМаксимальнаяШиринаДляПересчета);
	Элементы.ОбновитьМаксимальнуюВысоту.Видимость = ЗначениеЗаполнено(ГрузМаксимальнаяВысотаДляПересчета);
	Элементы.ОбновитьМаксимальныйВес.Видимость = ЗначениеЗаполнено(ГрузМаксимальныйВесДляПересчета);
	
	МассивРеквизитовДляПересчета = РеквизитыДляПересчета();
	
	ГруппаОбщаяПересчетВидимость = Ложь;
	Для Каждого ТекРеквизитДляПересчета Из МассивРеквизитовДляПересчета Цикл
		ИмяРеквизита = "Груз" + ТекРеквизитДляПересчета + "ДляПересчета";
		ГруппаОбщаяПересчетВидимость = ГруппаОбщаяПересчетВидимость 
			ИЛИ ЗначениеЗаполнено(ЭтотОбъект[ИмяРеквизита]);
			
		Если ГруппаОбщаяПересчетВидимость Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ГруппаОбщаяПересчет.Видимость = ГруппаОбщаяПересчетВидимость;
	Элементы.ДекорацияОснованиеПересчет.Видимость = ГруппаОбщаяПересчетВидимость;
	
	Если (Элементы.ГруппаСтраницы.ТекущаяСтраница
		<> Элементы.ГруппаОсновное)
		И ГруппаОбщаяПересчетВидимость Тогда
		ПерейтиКШагуГруз();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПредставлениеТарифа(Параметры)
	
	Параметры.ТарифПредставление = Параметры.ТарифНаименование 
		+ ?(Параметры.ПоУмолчанию, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			" (%1)",
			НСтр("ru='по умолчанию'")), "");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьИзменениеДополнительныхУслуг(ТекущиеДанные)
	
	Модифицированность = Истина;
	ДополнительныеУслугиИзменение = Истина;
	СформироватьЗаголовокГруппыДополнительныхУслуг();

	Если ТекущиеДанные.Использовать Тогда
		СброситьВзаимоисключающие(ТекущиеДанные);
		Элементы.ТарифДополнительныеУслуги.Развернуть(ТекущиеДанные.ПолучитьИдентификатор());
	Иначе
		Элементы.ТарифДополнительныеУслуги.Свернуть(ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
	ОбновитьИнформациюПоВыбраннымДопУслугам();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьТарифыАвтоматически()
	
	Если ГрузоперевозчикИдентификатор = ""
		ИЛИ УслугиТарифов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимМастера = СервисДоставкиКлиентСервер.РежимМастераНовый() Тогда
		ПерейтиКТекущемуШагуМастера(Ложь, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТариф()
	
	НеЗагружатьУслуги = Истина;
	ПолучитьТариф()
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗаголовокГруппыДополнительныхУслуг()
	
	Элементы.ГруппаДополнительныхУслугТарифа.Заголовок = НСтр("ru='Дополнительные услуги'") + ?(ДополнительныеУслугиИзменение, " *", "");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДанныхПлательщика()
	
	Элементы.ГруппаПлательщикВидимость.Видимость = (ПлательщикРоль = 3);
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДополнительныхТелефонов(ВидДополнительногоТелефона = "Все")
	
	Если ВидДополнительногоТелефона = "Все" Или ВидДополнительногоТелефона = "Отправитель" Тогда
		Элементы.ГруппаОтправительТелефонДополнительный.Видимость = ОтправительКонтактноеЛицоТелефонДополнительныйДоступен;
		Элементы.ОтправительДобавитьТелефонДополнительный.Видимость = Не ОтправительКонтактноеЛицоТелефонДополнительныйДоступен;
	КонецЕсли;
		
	Если ВидДополнительногоТелефона = "Все" Или ВидДополнительногоТелефона = "Получатель" Тогда
		Элементы.ГруппаПолучательТелефонДополнительный.Видимость = ПолучательКонтактноеЛицоТелефонДополнительныйДоступен;
		Элементы.ПолучательДобавитьТелефонДополнительный.Видимость = Не ПолучательКонтактноеЛицоТелефонДополнительныйДоступен;
	КонецЕсли;
		
	Если ВидДополнительногоТелефона = "Все" Или ВидДополнительногоТелефона = "Плательщик" Тогда
		Элементы.ГруппаПлательщикТелефонДополнительный.Видимость = ПлательщикКонтактноеЛицоТелефонДополнительныйДоступен;
		Элементы.ПлательщикДобавитьТелефонДополнительный.Видимость = Не ПлательщикКонтактноеЛицоТелефонДополнительныйДоступен;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьСпособовОтгрузкиДоставки()
	
	Если ТипГрузоперевозки <> СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СДоставка() Тогда
		Возврат;
	КонецЕсли;
	
	ОтправкаОтАдреса = СпособОтгрузки = 2;
	ДоставкаДоАдреса = СпособДоставки = 2;
	
	Элементы.ОтправительАдрес.Видимость = ОтправкаОтАдреса;
	Элементы.ОтправительАдрес1.Видимость = ОтправкаОтАдреса;
	Элементы.ОтправительТерминал1.Видимость = Не ОтправкаОтАдреса;
	Элементы.ОтправительТерминал2.Видимость = Не ОтправкаОтАдреса;
	
	Элементы.ПолучательАдрес.Видимость = ДоставкаДоАдреса;
	Элементы.ПолучательАдрес1.Видимость = ДоставкаДоАдреса;
	Элементы.ПолучательТерминал1.Видимость = Не ДоставкаДоАдреса;
	Элементы.ПолучательТерминал2.Видимость = Не ДоставкаДоАдреса;
		
КонецПроцедуры

#Область РедактированиеРеквизитовЗаказа

&НаСервере
Процедура РазрешитьИзменениеРеквизитов(ДоступныеДляИзмененияРеквизиты)
	
	КлючиРеквизитовДляИзменения.Очистить();
	
	ДоступныеЭлементы = Новый Массив;
	
	ДоступностьРеквизитов = Новый Структура;
	Если ТипЗнч(ДоступныеДляИзмененияРеквизиты) = Тип("Структура")
		И ДоступныеДляИзмененияРеквизиты.Свойство("ДоступностьРеквизитов", ДоступностьРеквизитов) Тогда
		СписокДоступных = ЭлементыФормыДляИзменения(ДоступностьРеквизитов);
		Для каждого ТекущийЭлементФормы Из СписокДоступных Цикл
			ТекЭлемент = Элементы.Найти(ТекущийЭлементФормы.Значение);
			Если ТекЭлемент <> Неопределено Тогда
				ДоступныеЭлементы.Добавить(ТекЭлемент);
			КонецЕсли; 
		КонецЦикла; 
		ДоступныеЭлементы = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ДоступныеЭлементы);
	Иначе
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось получить перечень изменяемых реквизитов.
			|Возможно для работы с перевозчиками требуется авторизация. Проверьте настройки перевозчиков.'"));
		Возврат;
	КонецЕсли; 
	
	Если ДоступныеЭлементы.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Нет реквизитов, доступных для редактирования.'"));
		Возврат;
	КонецЕсли; 
	
	Для каждого ТекущийЭлементФормы Из ДоступныеЭлементы Цикл
		ПодчиненныеПоляВводаТолькоПросмотр(ТекущийЭлементФормы, Ложь);
	КонецЦикла; 
	
	Для каждого ТекущийРеквизитФормы Из ДоступностьРеквизитов Цикл
		Если ТекущийРеквизитФормы.Значение Тогда
			КлючиРеквизитовДляИзменения.Добавить(ТекущийРеквизитФормы.Ключ);
		КонецЕсли; 
	КонецЦикла; 
	РежимИзмененияРеквизитов(КлючиРеквизитовДляИзменения.Количество() > 0);
	
КонецПроцедуры

&НаСервере
Процедура РежимИзмененияРеквизитов(Знач Разрешено)
	
	Если НЕ Разрешено Тогда
		КлючиРеквизитовДляИзменения.Очистить();
	КонецЕсли; 
	
	УстановитьДоступноеДействие(ИмяДействияПриИзменении(),Разрешено, Разрешено);
	
	Если Разрешено Тогда
		ЦелеваяСтраница = Элементы.ГруппаОсновное;
		Для каждого ЭлемСтраница Из ЦелеваяСтраница.Родитель.ПодчиненныеЭлементы Цикл
			Если ЭлемСтраница = ЦелеваяСтраница ИЛИ ЭлемСтраница = Элементы.ГруппаКарточка Тогда
				Продолжить;
			Иначе
				ЭлемСтраница.Доступность = Ложь;
			КонецЕсли;
			
		КонецЦикла; 
	Иначе
		ЦелеваяСтраница = Элементы.ГруппаКарточка;
	КонецЕсли; 
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница <> ЦелеваяСтраница Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = ЦелеваяСтраница;
	КонецЕсли; 
	
	СформироватьСтрокуПредставлениеСостоянияЗаказаФормы();
	
КонецПроцедуры
 
&НаКлиентеНаСервереБезКонтекста
// Возвращаемое значение:
//	Структура:
//	*Ключ - Строка - ключ группы реквизитов для редактирования
//	*Значение - СписокЗначений:
//	**Значение - имя реквизита формы для разрешения
//	**Пометка - контроль заполнения связанного реквизита
Функция ГруппыРеквизитовПоКлючам()

	Результат = Новый Структура;
	
	// ПлательщикАдрес
	ТекЭлементыФормы = Новый СписокЗначений;
	ТекЭлементыФормы.Добавить("ПлательщикАдрес");
	Результат.Вставить("ПлательщикАдрес", ТекЭлементыФормы);
	
	// ПлательщикКонтактнаяИнформация
	ТекЭлементыФормы = Новый СписокЗначений;
	ТекЭлементыФормы.Добавить("ПлательщикКонтактноеЛицо");
	ТекЭлементыФормы.Добавить("ПлательщикКонтактноеЛицоТелефон");
	ТекЭлементыФормы.Добавить("ПлательщикКонтактноеЛицоТелефонДополнительный");
	ТекЭлементыФормы.Добавить("ПлательщикДобавитьТелефонДополнительный");
	ТекЭлементыФормы.Добавить("ПлательщикУдалитьТелефонДополнительный");
	ТекЭлементыФормы.Добавить("ГруппаПлательщикТелефон");
	Результат.Вставить("ПлательщикКонтактнаяИнформация", ТекЭлементыФормы);
	
	// ПлательщикКонтрагент
	ТекЭлементыФормы = Новый СписокЗначений;
	ТекЭлементыФормы.Добавить("ПлательщикРоль",, Истина);
	ТекЭлементыФормы.Добавить("ПлательщикКонтрагент");
	Результат.Вставить("ПлательщикКонтрагент", ТекЭлементыФормы);
	
	// ПолучательАдрес
	ТекЭлементыФормы = Новый СписокЗначений;
	ТекЭлементыФормы.Добавить("ПолучательАдрес",, Истина);
	Результат.Вставить("ПолучательАдрес", ТекЭлементыФормы);
	
	// ПолучательКонтактнаяИнформация
	ТекЭлементыФормы = Новый СписокЗначений;
	ТекЭлементыФормы.Добавить("ПолучательКонтактноеЛицо",, Истина);
	ТекЭлементыФормы.Добавить("ПолучательКонтактноеЛицоТелефон",, Истина);
	ТекЭлементыФормы.Добавить("ПолучательКонтактноеЛицоТелефонДополнительный");
	ТекЭлементыФормы.Добавить("ПолучательДобавитьТелефонДополнительный");
	ТекЭлементыФормы.Добавить("ПолучательУдалитьТелефонДополнительный");
	ТекЭлементыФормы.Добавить("ГруппаПолучательТелефон");
	Результат.Вставить("ПолучательКонтактнаяИнформация", ТекЭлементыФормы);
	
	// ПолучательКонтрагент
	ТекЭлементыФормы = Новый СписокЗначений;
	ТекЭлементыФормы.Добавить("ПолучательКонтрагент",, Истина);
	Результат.Вставить("ПолучательКонтрагент", ТекЭлементыФормы);
	
	// ПолучательДатаВремяДоставки
	ТекЭлементыФормы = Новый СписокЗначений;
	ТекЭлементыФормы.Добавить("ПолучательВремяПлановойДоставки");
	ТекЭлементыФормы.Добавить("ПолучательДатаПлановойДоставки");
	Результат.Вставить("ПолучательДатаВремяДоставки", ТекЭлементыФормы);
	
	// ОтправительАдрес
	ТекЭлементыФормы = Новый СписокЗначений;
	ТекЭлементыФормы.Добавить("ОтправительАдрес",, Истина);
	Результат.Вставить("ОтправительАдрес", ТекЭлементыФормы);
	
	// ОтправительКонтактнаяИнформация
	ТекЭлементыФормы = Новый СписокЗначений;
	ТекЭлементыФормы.Добавить("ОтправительКонтактноеЛицо",, Истина);
	ТекЭлементыФормы.Добавить("ОтправительКонтактноеЛицоТелефон",, Истина);
	ТекЭлементыФормы.Добавить("ОтправительКонтактноеЛицоТелефонДополнительный");
	ТекЭлементыФормы.Добавить("ОтправительДобавитьТелефонДополнительный");
	ТекЭлементыФормы.Добавить("ОтправительУдалитьТелефонДополнительный");
	ТекЭлементыФормы.Добавить("ГруппаОтправительТелефон");
	Результат.Вставить("ОтправительКонтактнаяИнформация", ТекЭлементыФормы);
	
	// ОтправительДатаВремяОтгрузки 
	ТекЭлементыФормы = Новый СписокЗначений;
	ТекЭлементыФормы.Добавить("ОтправительДатаПлановойОтгрузки");
	ТекЭлементыФормы.Добавить("ОтправительВремяПлановойОтгрузки");
	Результат.Вставить("ОтправительДатаВремяОтгрузки", ТекЭлементыФормы);
			
	Возврат Результат;
	
КонецФункции 

&НаСервере
Процедура ДоступныеДляИзмененияРеквизитыТолькоПросмотр(Знач ТолькоПросмотр)
	
	Элементы.ГруппаОснование.ТолькоПросмотр = ТолькоПросмотр;
	Элементы.ГруппаДополнительно.ТолькоПросмотр = ТолькоПросмотр;
	
	ПодчиненныеПоляВводаТолькоПросмотр(Элементы.ГруппаРеквизиты, ТолькоПросмотр);
	
КонецПроцедуры

&НаСервере
Процедура ПодчиненныеПоляВводаТолькоПросмотр(ЭлементФормы, Знач ТолькоПросмотр)
	
	ЦветРедактирования = РедактируемыйРеквизитЦветФона;
	ЦветНейтральный = Новый Цвет();
	
	КоллекцияПолей = Новый Массив;
	ПолучитьПодчиненныеЭлементыФормы(КоллекцияПолей, ЭлементФормы, Тип("ПолеФормы"));
	ПолучитьПодчиненныеЭлементыФормы(КоллекцияПолей, ЭлементФормы, Тип("ДекорацияФормы"));
	
	Для каждого ТекущийЭлементФормы Из КоллекцияПолей Цикл
		Если ТипЗнч(ТекущийЭлементФормы) = Тип("ПолеФормы") Тогда
			ТекущийЭлементФормы.ТолькоПросмотр = ТолькоПросмотр;
			Если НЕ ТолькоПросмотр Тогда
				ТекущийЭлементФормы.ЦветФона = ЦветРедактирования;
			ИначеЕсли ТолькоПросмотр И ТекущийЭлементФормы.ЦветФона = ЦветРедактирования Тогда
				ТекущийЭлементФормы.ЦветФона = ЦветНейтральный;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ТекущийЭлементФормы) = Тип("ДекорацияФормы") Тогда
			ТекущийЭлементФормы.Доступность = НЕ ТолькоПросмотр;
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры
 
&НаКлиентеНаСервереБезКонтекста
// Получает коллекцию подчиненных элементов определенного типа (кроме групп) 
// Параметры:
// 	КоллекцияЭлементов - Массив из ЭлементыФормы -
//	КорневойЭлемент - ЭлементФормы - исходный элемент формы, внутри которого нужно искать
//	ТипЭлемента - ТипЗначения - тип искомых элементов. Негрупповые элементы.
Процедура ПолучитьПодчиненныеЭлементыФормы(КоллекцияЭлементов, Знач КорневойЭлемент, Знач ТипЭлемента)
	
	Если ТипЗнч(КоллекцияЭлементов) <> Тип("Массив") Тогда
		КоллекцияЭлементов = Новый Массив;
	КонецЕсли;
	
	Если ТипЗнч(КорневойЭлемент) = ТипЭлемента Тогда
	
		КоллекцияЭлементов.Добавить(КорневойЭлемент);
		
	ИначеЕсли ТипЗнч(КорневойЭлемент) = Тип("ГруппаФормы") Тогда
	
		Для каждого ТекущийЭлементФормы Из КорневойЭлемент.ПодчиненныеЭлементы Цикл
			
			Если ТипЗнч(ТекущийЭлементФормы) = Тип("ГруппаФормы") Тогда
				ПолучитьПодчиненныеЭлементыФормы(КоллекцияЭлементов, ТекущийЭлементФормы, ТипЭлемента);
			ИначеЕсли ТипЗнч(ТекущийЭлементФормы) = ТипЭлемента Тогда
				КоллекцияЭлементов.Добавить(ТекущийЭлементФормы);
			КонецЕсли; 
			
		КонецЦикла; 
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьГруппуДоступныхДействий(Элементы)

	Возврат Элементы.ГруппаДоступныеДействия;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
// Возвращаемый результат:
// СписокЗначений:
//	*Значение - Строка - имя элемента формы, разрешенного к редактированию
//	*Пометка - Булево - флаг обязательности заполнения связанного реквизита формы
Функция ЭлементыФормыДляИзменения(ДоступныеГруппыРеквизитов)
	
	Результат = Новый СписокЗначений;
	
	СтруктураГрупп = ГруппыРеквизитовПоКлючам();
	
	Для каждого ТекущийЭлементФормы Из ДоступныеГруппыРеквизитов Цикл
		
		Если НЕ ТекущийЭлементФормы.Значение Тогда 
			Продолжить;
		КонецЕсли;
		
		ГруппыРеквизитов = Новый СписокЗначений;
		Если СтруктураГрупп.Свойство(ТекущийЭлементФормы.Ключ, ГруппыРеквизитов) Тогда
			Для каждого ЭлемСписка Из ГруппыРеквизитов Цикл
				Если Результат.НайтиПоЗначению(ЭлемСписка.Значение) = Неопределено Тогда
					Результат.Добавить(ЭлемСписка.Значение,, ЭлемСписка.Пометка);
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
		
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции

&НаСервере
// Возвращаемый результат:
// СписокЗначений:
//	*Значение - Строка - имя реквизита формы
//	*Представление - Строка - синоним реквизита формы
Функция РеквизитыФормыДляИзменения(ДоступныеГруппыРеквизитов)
	
	
	Результат = Новый СписокЗначений;
	
	КонтрольныеРеквизитыФормы = ЭлементыФормыДляИзменения(ДоступныеГруппыРеквизитов);
	ВсеРеквизиты = ПолучитьРеквизиты();
	
	Для каждого ОписаниеЭлемента Из КонтрольныеРеквизитыФормы Цикл
		
		Если НЕ ОписаниеЭлемента.Пометка Тогда
			Продолжить;
		КонецЕсли; 
		
		ТекЭлементФормы = Элементы.Найти(ОписаниеЭлемента.Значение);
		Если ТекЭлементФормы = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		ИмяРеквизита = ТекЭлементФормы.ПутьКДанным;
		
		Для каждого ЭлемРеквизит Из ВсеРеквизиты Цикл
			Если ЭлемРеквизит.Имя = ИмяРеквизита Тогда
				РеквизитПредставление = ?(ПустаяСтрока(ЭлемРеквизит.Заголовок),ИмяРеквизита,ЭлемРеквизит.Заголовок);
				Результат.Добавить(ИмяРеквизита, РеквизитПредставление);
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьГруппуДействийПоИмениДействия(Знач ИмяДействия)
	
	ПараметрыДействия = Неопределено;
	Если НастройкиДоступныхДействий.Свойство(ИмяДействия, ПараметрыДействия) Тогда
		
		Возврат Элементы[ПараметрыДействия.ИмяЭлемента];
		
	КонецЕсли; 
	
	Возврат Неопределено;

КонецФункции

&НаСервере
Процедура УстановитьВидимостьДоступныхДействий()
	
	ГруппаДоступныеДействия = ПолучитьГруппуДоступныхДействий(Элементы);
	ГруппаДействияПриИзменении = ПолучитьГруппуДействийПоИмениДействия(ИмяДействияПриИзменении());
	
	// Скорректируем настройки (устраним возможные противоречия)
	ЭлементОтменитьЗаказ = НастройкиДоступныхДействий[ИмяДействияОтменитьЗаказ()];
	ЭлементОтменитьЗаказ.Видимость = ДоступнаОтмена;
	ЭлементОтменитьЗаказ.Доступность = ДоступнаОтмена;
	
	Если ДоступноРедактированиеПослеОформления Тогда
		ВПроцессеИзменения = КлючиРеквизитовДляИзменения.Количество() > 0;
		НастройкиДоступныхДействий[ИмяДействияИзменить()].Видимость = НЕ ВПроцессеИзменения;
		НастройкиДоступныхДействий[ИмяДействияИзменить()].Доступность = НЕ ВПроцессеИзменения;
		НастройкиДоступныхДействий[ИмяДействияПриИзменении()].Видимость = ВПроцессеИзменения;
		НастройкиДоступныхДействий[ИмяДействияПриИзменении()].Доступность = ВПроцессеИзменения;
	Иначе
		НастройкиДоступныхДействий[ИмяДействияИзменить()].Видимость = Ложь;
		НастройкиДоступныхДействий[ИмяДействияПриИзменении()].Видимость = Ложь;
	КонецЕсли; 
	
	Для каждого ТекущееДействие Из НастройкиДоступныхДействий Цикл
		ЗаполнитьЗначенияСвойств(Элементы[ТекущееДействие.Значение.ИмяЭлемента], ТекущееДействие.Значение, "Видимость, Доступность");
	КонецЦикла; 
	
	ЕстьВидимыеПодчиненные = Ложь;
	Для каждого ТекущееДействие Из ГруппаДоступныеДействия.ПодчиненныеЭлементы Цикл
		Если ТекущееДействие.Видимость Тогда
			ЕстьВидимыеПодчиненные = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	ГруппаДоступныеДействия.Видимость = ЕстьВидимыеПодчиненные И НЕ ГруппаДействияПриИзменении.Видимость;
	
	Элементы.Печать.Доступность = НЕ ГруппаДействияПриИзменении.Видимость;
	Элементы.Обновить.Доступность = НЕ ГруппаДействияПриИзменении.Видимость;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступноеДействие(Знач ИмяДействия, Знач Видимость, Знач Доступность)
	
	ТекНастройка = Неопределено;
	Если НЕ НастройкиДоступныхДействий.Свойство(ИмяДействия, ТекНастройка) Тогда
		Возврат;
	КонецЕсли; 
	
	ЗаполнитьЗначенияСвойств(Элементы[ТекНастройка.ИмяЭлемента], ТекНастройка);
	
КонецПроцедуры
 
&НаКлиентеНаСервереБезКонтекста
// Возвращаемое значение:
//	Структура:
//	*ИмяДействия - Структура - имя доступного действия:
//	**ИмяЭлемента - Строка - имя элемента формы, содержащий команды действия(-й)
//	**Видимость - Булево - признак видимости элементов
Функция ПолучитьВсеДоступныеДействия()
	
	Результат = Новый Структура;
	ПараметрыДействияШаблон = Новый Структура("ИмяЭлемента, Видимость, Доступность", "", Ложь, Ложь);
	
	КлючДействия = ИмяДействияИзменить();
	ПараметрыДействия = СкопироватьРекурсивно(ПараметрыДействияШаблон);
	ПараметрыДействия.Видимость = Истина;
	ПараметрыДействия.Доступность = Истина;
	Результат.Вставить(КлючДействия, ПараметрыДействия);
	
	КлючДействия = ИмяДействияОтменитьЗаказ();
	ПараметрыДействия = СкопироватьРекурсивно(ПараметрыДействияШаблон);
	Результат.Вставить(КлючДействия, ПараметрыДействия);
	
	КлючДействия = ИмяДействияОтменитьДоставкуЗаказа();
	ПараметрыДействия = СкопироватьРекурсивно(ПараметрыДействияШаблон);
	Результат.Вставить(КлючДействия, ПараметрыДействия);
	
	КлючДействия = ИмяДействияПриИзменении();
	ПараметрыДействия = СкопироватьРекурсивно(ПараметрыДействияШаблон);
	Результат.Вставить(КлючДействия, ПараметрыДействия);
	
	Для каждого ТекущийЭлемент Из Результат Цикл
		Если НЕ ЗначениеЗаполнено(ТекущийЭлемент.Значение.ИмяЭлемента) Тогда
			ТекущийЭлемент.Значение.Вставить("ИмяЭлемента", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"Группа%1",
				ТекущийЭлемент.Ключ));
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяДействияИзменить()
	Возврат "ДоступныеДействияИзменить";
КонецФункции
 
&НаКлиентеНаСервереБезКонтекста
Функция ИмяДействияОтменитьЗаказ()
	Возврат "ДоступныеДействияОтменитьЗаказ";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяДействияОтменитьДоставкуЗаказа()
	Возврат "ДоступныеДействияОтменитьДоставкуЗаказа";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяДействияПриИзменении()
	Возврат "ДействияПриИзменении";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьВремяСОкруглением(Дата)
	
	ВремяЧасы   = Час(Дата);
	ВремяМинуты = Минута(Дата);
	
	Если ВремяМинуты = 0 Тогда
		ВремяМинуты = "30";
	ИначеЕсли ВремяМинуты <= 30 Тогда
		ВремяМинуты = "00";
		ВремяЧасы = ВремяЧасы + 1;
	Иначе
		ВремяМинуты = "30";
		ВремяЧасы = ВремяЧасы + 1;
	КонецЕсли;
	
	Если ВремяЧасы > 23 Тогда
		Возврат Дата("00010101235959");
	КонецЕсли;
	
	ВремяЧасы = Строка(ВремяЧасы);
	
	Возврат Дата("00010101" + ?(СтрДлина(ВремяЧасы) = 1, "0", "") + ВремяЧасы + ВремяМинуты + "00");
	
КонецФункции

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Функция СкопироватьРекурсивно(Источник)

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	Возврат ОбщегоНазначения.СкопироватьРекурсивно(Источник);
#Иначе	
	Возврат ОбщегоНазначенияКлиент.СкопироватьРекурсивно(Источник);
#КонецЕсли	

КонецФункции

&НаКлиенте
Процедура ЗадатьВопросДобавлениеКомментария(ТекстКомментария)
	
	ОбработчикОповещения = Новый ОписаниеОповещения("УстановитьКомментарийИзКонтактнойИнформации",
		ЭтотОбъект,
		Новый Структура("КомментарийКАдресу", ТекстКомментария));
	
	ПоказатьВопрос(ОбработчикОповещения,
		СтрШаблон(НСтр("ru = 'В выбранном адресе содержится комментарий. Добавить его в заказ?
			|
			|Комментарий: ""%1""'"),
			СокрЛП(ТекстКомментария)),
		РежимДиалогаВопрос.ДаНет,,
		КодВозвратаДиалога.Нет,
		НСтр("ru = 'Добавление комментария'"));
	
КонецПроцедуры
&НаКлиенте
Процедура УстановитьКомментарийИзКонтактнойИнформации(Значение, ДополнительныеПараметры) Экспорт
	
	Если Значение = КодВозвратаДиалога.Да Тогда
		
		ДополнительнаяИнформация = СокрЛП(ДополнительнаяИнформация + Символы.ПС + ДополнительныеПараметры.КомментарийКАдресу);
		
	КонецЕсли;
	
КонецПроцедуры
&НаСервереБезКонтекста
Функция КомментарийИзКонтактнойИнформации(ЗначениеКонтактнойИнформации)
	
	Результат = УправлениеКонтактнойИнформацией.КомментарийКонтактнойИнформации(ЗначениеКонтактнойИнформации);

	Возврат Результат;
	
КонецФункции
&НаСервереБезКонтекста
Функция ПредставлениеКонтактнойИнформации(ЗначениеКонтактнойИнформации)
	
	Результат = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(ЗначениеКонтактнойИнформации);

	Возврат Результат;
	
КонецФункции
&НаСервере
Процедура ЗаполнитьЗначенияСписковВыбораКонтактнойИнформации()
	
	ЭтоДеловыеЛинии = ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СДоставка();
	
	ЗаполнитьЗначенияСписковВыбораКонтактнойИнформацииУчастника(
		ОтправительКонтрагентСсылка,
		ОтправительКонтрагентЭтоОрганизация,
		ОтправительКонтактноеЛицоСсылка,
		Элементы.ОтправительАдрес,
		Элементы.ОтправительКонтактноеЛицоТелефон,
		Элементы.ОтправительКонтактноеЛицоТелефонДополнительный);
	
	ЗаполнитьЗначенияСписковВыбораКонтактнойИнформацииУчастника(
		ПолучательКонтрагентСсылка,
		ПолучательКонтрагентЭтоОрганизация,
		ПолучательКонтактноеЛицоСсылка,
		Элементы.ПолучательАдрес,
		Элементы.ПолучательКонтактноеЛицоТелефон,
		Элементы.ПолучательКонтактноеЛицоТелефонДополнительный);
	
	ЗаполнитьЗначенияСписковВыбораКонтактнойИнформацииУчастника(
		ПлательщикКонтрагентСсылка,
		ПлательщикКонтрагентЭтоОрганизация,
		ПлательщикКонтактноеЛицоСсылка,
		Элементы.ПлательщикАдрес,
		Элементы.ПлательщикКонтактноеЛицоТелефон,
		Элементы.ПлательщикКонтактноеЛицоТелефонДополнительный);
	
	Если ЭтоДеловыеЛинии Тогда
		
		ЗаполнитьЗначенияСписковВыбораКонтактнойИнформацииУчастника(
			ОтправительКонтрагентСсылка,
			ОтправительКонтрагентЭтоОрганизация,
			ОтправительКонтактноеЛицоСсылка,
			Элементы.ОтправительАдрес1,
			Элементы.ОтправительКонтактноеЛицоТелефон,
			Элементы.ОтправительКонтактноеЛицоТелефонДополнительный);
	
		ЗаполнитьЗначенияСписковВыбораКонтактнойИнформацииУчастника(
			ПолучательКонтрагентСсылка,
			ПолучательКонтрагентЭтоОрганизация,
			ПолучательКонтактноеЛицоСсылка,
			Элементы.ПолучательАдрес1,
			Элементы.ПолучательКонтактноеЛицоТелефон,
			Элементы.ПолучательКонтактноеЛицоТелефонДополнительный);
		
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура ЗаполнитьЗначенияСписковВыбораКонтактнойИнформацииУчастника(Контрагент, ЭтоОрганизация, КонтактноеЛицо, ЭлементАдрес, ЭлементТелефон, ЭлементТелефонДополнительный)
	
	ЭлементАдрес.СписокВыбора.Очистить();
	ЭлементТелефон.СписокВыбора.Очистить();
	ЭлементТелефонДополнительный.СписокВыбора.Очистить();
	
	МассивВладельцевКонтактнойИнформации = Новый Массив;
	МассивВладельцевКонтактнойИнформации.Добавить(Контрагент);
	МассивВладельцевКонтактнойИнформации.Добавить(КонтактноеЛицо);
	
	Если ЗначениеЗаполнено(Контрагент)
		И Контрагент.Метаданные().Реквизиты.Найти("Партнер") <> Неопределено Тогда
		МассивВладельцевКонтактнойИнформации.Добавить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "Партнер"));
	КонецЕсли;
	
	СтруктураКонтактнаяИнформация = СервисДоставкиСлужебный.КонтактнаяИнформацияОбъектов(МассивВладельцевКонтактнойИнформации);
	
	Для Каждого ЭлементСоответствия Из СтруктураКонтактнаяИнформация Цикл
		
		Для Каждого СтрокаКонтактнаяИнформация Из ЭлементСоответствия.Значение Цикл
			
			Если СтрокаКонтактнаяИнформация.Значение.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
				
				ЭлементАдрес.СписокВыбора.Добавить(
					СтрокаКонтактнаяИнформация.Значение.Значение,
					СтрШаблон("%1, %2",
						СтрокаКонтактнаяИнформация.Значение.Представление,
						ЭлементСоответствия.Ключ));
				
			ИначеЕсли СтрокаКонтактнаяИнформация.Значение.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
				
				ЭлементТелефон.СписокВыбора.Добавить(
					СтрокаКонтактнаяИнформация.Значение.Значение,
					СтрШаблон("%1, %2",
						СтрокаКонтактнаяИнформация.Значение.Представление,
						ЭлементСоответствия.Ключ));
				
				ЭлементТелефонДополнительный.СписокВыбора.Добавить(
					СтрокаКонтактнаяИнформация.Значение.Значение,
					СтрШаблон("%1, %2",
						СтрокаКонтактнаяИнформация.Значение.Представление,
						ЭлементСоответствия.Ключ));
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ЭтоОрганизация Тогда
		ЭлементАдрес.СписокВыбора.Добавить(1, НСтр("ru = 'Наш склад...'"));
	Иначе
		ЭлементАдрес.СписокВыбора.Добавить(2, НСтр("ru = 'Адрес контрагента...'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредставлениеАдресаБезМуниципальнойЧасти(Знач АдресЗначение)

	Представление = "";

	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВJSON(АдресЗначение) Тогда
		СтруктураАдреса = УправлениеКонтактнойИнформациейСлужебный.JSONВКонтактнуюИнформациюПоПолям(
			АдресЗначение, Перечисления.ТипыКонтактнойИнформации.Адрес);
		ТипАдреса = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураАдреса, "AddressType", Ложь);
		Если РаботаСАдресамиКлиентСервер.ЭтоМуниципальныйАдрес(ТипАдреса) Тогда
			СтруктураАдреса.AddressType = РаботаСАдресамиКлиентСервер.АдминистративноТерриториальныйАдрес();
			Представление = РаботаСАдресамиКлиентСервер.ПредставлениеАдреса(СтруктураАдреса, Истина);
		КонецЕсли;
	КонецЕсли;

	Возврат Представление;

КонецФункции	

#КонецОбласти
