
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.ГруппаКнопкиТаблицы.Видимость = Ложь;
	Элементы.ДанныеДокументов.ОтборСтрок = Новый ФиксированнаяСтруктура("НомерКомплекта, Статус",
		0, Перечисления.СтатусыСозданныхДокументовРаспознаваниеДокументов.Новый);
	
	ВыбранныеДокументы = ВсеДокументыПоОтбору(Параметры.ОтборИзСписка);
	ВсеДанныеДокументов = РаспознаваниеДокументовКомплекты.ДополнитьДанныеДокументов(ВыбранныеДокументы);
	ДанныеКомплектов = РаспознаваниеДокументовКомплекты.НайтиКомплекты(ВсеДанныеДокументов);
	
	КоличествоКомплектов = ДанныеКомплектов.КоличествоКомплектов;
	
	ВсеДанныеДокументов.ОбщаяТаблицаДокументов.Сортировать("Контрагент Убыв, Организация Убыв, ДатаДокумента Убыв");
	ДанныеДокументов.Загрузить(ВсеДанныеДокументов.ОбщаяТаблицаДокументов);
	
	Для Каждого СтрокаТаблицы Из ДанныеДокументов Цикл
		СтрокаТаблицы.ОшибокДляКомплекта = РаспознаваниеДокументовСлужебный.ПроблемныеРеквизиты(
				СтрокаТаблицы.Ссылка.ПолучитьОбъект(), "ТолькоМешающиеПроведению"
			).Количество();
		Если СтрокаТаблицы.НомерКомплекта = 0 Тогда
			// На форме в списке "не комплектов" отображается количество ошибок, где значение совсем не заполнено
			// (заполненные поля, подсвеченные красным не считаются). Ошибки в комплектах заполняются процедурой ОбновитьОшибкиКомплекта
			СтрокаТаблицы.Ошибок = СтрокаТаблицы.ОшибокДляКомплекта;
		КонецЕсли;
	КонецЦикла;
	
	РезультатОбратнойСвязи = Новый Структура("Комплекты, Отправить", Новый Соответствие, Новый Структура);
	Для НомерКомплекта = 1 По КоличествоКомплектов Цикл
		РезультатОбратнойСвязи.Комплекты.Вставить(НомерКомплекта, Новый Соответствие);
		НовыйКомплектНаСервере(Ложь, НомерКомплекта);
	КонецЦикла;
	НастроитьПанельИОшибкиКомплекта();
	
	ОбратнаяСвязьКомплектов = РезультатОбратнойСвязи.Комплекты;
	Для Каждого СтрокаКомплекта Из ДанныеКомплектов.ТаблицаКомплектов Цикл
		ОбратнаяСвязьКомплектов[СтрокаКомплекта.НомерКомплекта].Вставить(СтрокаКомплекта.Ссылка, "ДобавленАвтоматически");
	КонецЦикла;
	
	ОбновитьДоступностьОбработатьВсе();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "РаспознанныйДокумент_ОбновитьОтборФормыСписка"
		Или ИмяСобытия = "РаспознанныйДокумент_СтатусОбработан" Тогда
		ОбновитьДанныеДокумента(Параметр);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПредложениеПеретащитьНажатие(Элемент)
	
	СтрокиДляКомплекта = Элементы.ДанныеДокументов.ВыделенныеСтроки;
	КоличествоКомплектов = КоличествоКомплектов + 1;
	
	РезультатОбратнойСвязи.Комплекты.Вставить(КоличествоКомплектов, Новый Соответствие);
	НовыйКомплектНаСервере(Истина, КоличествоКомплектов);
	
	Если СтрокиДляКомплекта.Количество() > 1 Тогда
		Для Каждого ИдСтроки Из СтрокиДляКомплекта Цикл
			СтрокаТаблицы = ДанныеДокументов.НайтиПоИдентификатору(ИдСтроки);
			СтрокаТаблицы.НомерКомплекта = КоличествоКомплектов;
		КонецЦикла;
		НастроитьПанельИОшибкиКомплекта(КоличествоКомплектов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложениеПеретащитьПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	// Если нужно будет запретить перетаскивание из уже созданных комплектов:
	
	//Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Массив") Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Если ПараметрыПеретаскивания.Значение.Количество() <> 0
	//	И ПараметрыПеретаскивания.Значение[0].НомерКомплекта = 0 Тогда
	//	
	//	СтандартнаяОбработка = Ложь;
	//КонецЕсли;
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложениеПеретащитьПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоКомплектов = КоличествоКомплектов + 1;
	РезультатОбратнойСвязи.Комплекты.Вставить(КоличествоКомплектов, Новый Соответствие);
	ТекущиеДействия = РезультатОбратнойСвязи.Комплекты.Получить(КоличествоКомплектов);
	
	Для Каждого СтрокаТаблицы Из ПараметрыПеретаскивания.Значение Цикл
		ТекущиеДействия.Вставить(СтрокаТаблицы.Ссылка, "ДобавленВручную");
		СтрокаТаблицы.НомерКомплекта = КоличествоКомплектов;
	КонецЦикла;
	
	#Если ВебКлиент Тогда
		ИзменяемыеКомплекты = Новый Массив;
		ИзменяемыеКомплекты.Добавить(КоличествоКомплектов);
		ДокументыДляПересчетаОшибок.ЗагрузитьЗначения(ИзменяемыеКомплекты);
		ПодключитьОбработчикОжидания("Подключаемый_НовыйКомплектНаСервере", 0.1, Истина);
		ПодключитьОбработчикОжидания("Подключаемый_НастроитьПанельИОшибкиКомплекта", 0.1, Истина);
	#Иначе
		НовыйКомплектНаСервере(Истина, КоличествоКомплектов);
		НастроитьПанельИОшибкиКомплекта(КоличествоКомплектов);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НастроитьПанельИОшибкиКомплекта()
	
	НастроитьПанельИОшибкиКомплектаНесколько();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПанельИОшибкиКомплектаНесколько()
	
	ВсеНомераКомплектов = ДокументыДляПересчетаОшибок.ВыгрузитьЗначения();
	Для Каждого НомерКомплекта Из ВсеНомераКомплектов Цикл
		НастроитьПанельИОшибкиКомплекта(НомерКомплекта);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НовыйКомплектНаСервере()
	
	ВсеНомераКомплектов = ДокументыДляПересчетаОшибок.ВыгрузитьЗначения();
	Для Каждого НомерКомплекта Из ВсеНомераКомплектов Цикл
		НовыйКомплектНаСервере(Истина, НомерКомплекта);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицФормы

&НаКлиенте
Процедура ВсеТаблицыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыделеннойСтроки();
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеТаблицыПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ОткрытьФормуВыделеннойСтроки();
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеТаблицыПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВсеТаблицыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПеретаскивания.Значение.Количество() <> 0
		И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Число") Тогда
		
		// При перетаскивании строк внутри одной таблицы на форме
		Возврат;
	КонецЕсли;
	
	ИзменяемыеКомплекты = Новый Массив;
	Если Элемент.Имя = "ДанныеДокументов" Тогда
		Для Каждого СтрокаТаблицы Из ПараметрыПеретаскивания.Значение Цикл
			Если СтрокаТаблицы = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИзменяемыеКомплекты.Найти(СтрокаТаблицы.НомерКомплекта) = Неопределено Тогда
				ИзменяемыеКомплекты.Добавить(СтрокаТаблицы.НомерКомплекта);
			КонецЕсли;
			
			ТекущиеДействия = РезультатОбратнойСвязи.Комплекты.Получить(СтрокаТаблицы.НомерКомплекта);
			ДействиеДокумента = ТекущиеДействия.Получить(СтрокаТаблицы.Ссылка);
			Если ДействиеДокумента = "ДобавленАвтоматически" Тогда
				ТекущиеДействия.Вставить(СтрокаТаблицы.Ссылка, "Удален");
			Иначе
				ТекущиеДействия.Удалить(СтрокаТаблицы.Ссылка);
			КонецЕсли;
			
			НоваяСтрока = ДанныеДокументов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.НомерКомплекта = 0;
			НоваяСтрока.ТипКомплекта = "";
			ДанныеДокументов.Удалить(СтрокаТаблицы);
		КонецЦикла;
		
	Иначе
		
		НомерКомплекта = Число(СтрЗаменить(Элемент.Имя, "Комплект", ""));
		ИзменяемыеКомплекты.Добавить(НомерКомплекта);
		Для Каждого СтрокаТаблицы Из ПараметрыПеретаскивания.Значение Цикл
			Если ИзменяемыеКомплекты.Найти(СтрокаТаблицы.НомерКомплекта) = Неопределено Тогда
				ИзменяемыеКомплекты.Добавить(СтрокаТаблицы.НомерКомплекта);
			КонецЕсли;
			
			ТекущиеДействия = РезультатОбратнойСвязи.Комплекты.Получить(НомерКомплекта);
			ДействиеПрошлогоДобавления = ТекущиеДействия.Получить(СтрокаТаблицы.Ссылка);
			Если ДействиеПрошлогоДобавления <> Неопределено И ДействиеПрошлогоДобавления = "Удален" Тогда
				// Действие "Удален" может быть только у автоматически добавленных документов
				ТекущиеДействия.Вставить(СтрокаТаблицы.Ссылка, "ДобавленАвтоматически");
			Иначе
				ТекущиеДействия.Вставить(СтрокаТаблицы.Ссылка, "ДобавленВручную");
			КонецЕсли;
			
			НоваяСтрока = ДанныеДокументов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.НомерКомплекта = НомерКомплекта;
			ДанныеДокументов.Удалить(СтрокаТаблицы);
		КонецЦикла;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		ДокументыДляПересчетаОшибок.ЗагрузитьЗначения(ИзменяемыеКомплекты);
		ПодключитьОбработчикОжидания("Подключаемый_НастроитьПанельИОшибкиКомплекта", 0.1, Истина);
	#Иначе
		Для Каждого НомерКомплекта Из ИзменяемыеКомплекты Цикл
			НастроитьПанельИОшибкиКомплекта(НомерКомплекта);
		КонецЦикла;
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Перепроверить(Команда)
	ПерепроверитьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВсе(Команда)
	ОбработатьВсеПоФорме();
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеВопросаЗакрытиеФормы", ЭтотОбъект);
	
	ТекстВопроса = НСтр("ru = 'Все изменения будут потеряны. Закрыть эту форму?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВопросаЗакрытиеФормы(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьКомплект(Команда)
	
	ИмяТаблицы = СтрЗаменить(Команда.Имя, "УдалитьКомплект", "");
	НомерКомплекта = Число(СтрЗаменить(ИмяТаблицы, "Комплект", ""));
	
	СтрокиКомплекта = ДанныеДокументов.НайтиСтроки(Новый Структура("НомерКомплекта", НомерКомплекта));
	Если СтрокиКомплекта.Количество() = 0 Тогда
		УдалитьКомплектНаСервере(НомерКомплекта, Ложь, Истина);
	Иначе
		ДополнительныеПараметры = Новый Структура("НомерКомплекта", НомерКомплекта);
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеВопросаУдаленияКомплекта", ЭтотОбъект, ДополнительныеПараметры);
		
		ТекстВопроса = НСтр("ru = 'Удалить комплект?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВопросаУдаленияКомплекта(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		УдалитьКомплектНаСервере(ДополнительныеПараметры.НомерКомплекта, Ложь, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументыКомплекта(Команда)
	
	Позиция_ = СтрНайти(Команда.Имя, "_", НаправлениеПоиска.СКонца);
	ИмяТаблицы = Сред(Команда.Имя, Позиция_ + 1);
	
	СтрокаПоступленияРеализации = Сред(Команда.Имя, 1, Позиция_ - 1);
	СтрокаПоступленияРеализации = СтрЗаменить(СтрокаПоступленияРеализации, "СчетНаОплату", "");
	СтрокаПоступленияРеализации = СтрЗаменить(СтрокаПоступленияРеализации, "СчетФактура", "");
	
	ПараметрыОперации = РаспознаваниеДокументовКомплектыКлиентСервер.ТипДокументаИВидОперации(СтрокаПоступленияРеализации);
	ОткрытиеФормыДокументаНаКлиенте(ПараметрыОперации, ИмяТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытиеФормыДокументаНаКлиенте(ПараметрыОперации, ИмяТаблицы)
	
	ДанныеОбработки = РаспознаваниеДокументовКомплектыКлиентСервер.НовыеДанныеОбработкиКомплектов();
	ДанныеОбработки.РезультатОбратнойСвязи = РезультатОбратнойСвязи;
	ОткрытиеФормыДокумента(ЭтотОбъект, ПараметрыОперации, ИмяТаблицы, ДанныеОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура УбратьЛишние(Команда)
	ИмяТаблицы = СтрЗаменить(Команда.Имя, "УбратьЛишние", "");
	УбратьЛишниеНаСервере(ИмяТаблицы);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьОшибкиКомплекта(НомерКомплекта)
	
	СтрокиКомплекта = ДанныеДокументов.НайтиСтроки(Новый Структура("НомерКомплекта", НомерКомплекта));
	Если СтрокиКомплекта.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТаблицы = "Комплект" + Формат(НомерКомплекта, "ЧГ=");
	Если СтрокиКомплекта.Количество() > 1 Тогда
		ВысотаТаблицы = 2 + 2 * СтрокиКомплекта.Количество();
	Иначе
		ВысотаТаблицы = 6;
	КонецЕсли;
	Элементы[ИмяТаблицы].Высота = ВысотаТаблицы;
	Элементы[ИмяТаблицы].МаксимальнаяВысота = ВысотаТаблицы;
	
	ТипКомплекта = СтрокиКомплекта[0].ТипКомплекта;
	Если РаспознаваниеДокументовКомплектыКлиентСервер.ЭтоТипКомплектаМожноОбработать(ТипКомплекта) Тогда
		
		// Определяем основной документ
		ПараметрыДляТипов = Новый Структура("ТипКомплекта, НаправлениеДокумента", ТипКомплекта, СтрокиКомплекта[0].Направление);
		ТипыДокументов1С = РаспознаваниеДокументовКомплектыКлиентСервер.СоздаваемыеДокументыКомплекта(ПараметрыДляТипов);
		
		СтрокаОсновногоДокумента = Неопределено;
		ТипыРаспознанныхДокументов = РаспознаваниеДокументовКомплектыКлиентСервер.ПодходящиеТипыРаспознанногоДокумента(ТипыДокументов1С[0]);
		Для Каждого ТипРаспознанного Из ТипыРаспознанныхДокументов Цикл
			Для Каждого СтрокаКомплекта Из СтрокиКомплекта Цикл
				Если ТипРаспознанного = СтрокаКомплекта.ТипДокумента Тогда
					СтрокаОсновногоДокумента = СтрокаКомплекта;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если СтрокаОсновногоДокумента <> Неопределено Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		СтрокаОсновногоДокумента.Ошибок = РаспознаваниеДокументовСлужебный.ПроблемныеРеквизиты(
				СтрокаОсновногоДокумента.Ссылка.ПолучитьОбъект(), "ТолькоМешающиеПроведению"
			).Количество();
		
		Для Каждого СтрокаТаблицы Из СтрокиКомплекта Цикл
			Если СтрокаТаблицы = СтрокаОсновногоДокумента Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТаблицы.Ошибок = 0;
			
			// Заполнение ошибок для подчиненных документов
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.НомерДокумента) Тогда
				СтрокаТаблицы.Ошибок = СтрокаТаблицы.Ошибок + 1;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.ДатаДокумента) Тогда
				СтрокаТаблицы.Ошибок = СтрокаТаблицы.Ошибок + 1;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Для Каждого СтрокаТаблицы Из СтрокиКомплекта Цикл
			СтрокаТаблицы.Ошибок = РаспознаваниеДокументовСлужебный.ПроблемныеРеквизиты(
					СтрокаТаблицы.Ссылка.ПолучитьОбъект(), "ТолькоМешающиеПроведению"
				).Количество();
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВсеДокументыПоОтбору(ОтборИзСписка)
	
	Если ЗначениеЗаполнено(ОтборИзСписка.ТекущаяДата) Тогда 
		
		ОтборДата = Истина;
		
		Если Параметры.ОтборИзСписка.ТекущаяДатаПериод = "День" Тогда
			НачалоПериода = НачалоДня(Параметры.ОтборИзСписка.ТекущаяДата);
			КонецПериода = КонецДня(Параметры.ОтборИзСписка.ТекущаяДата);
		ИначеЕсли Параметры.ОтборИзСписка.ТекущаяДатаПериод = "Месяц" Тогда
			НачалоПериода = НачалоМесяца(Параметры.ОтборИзСписка.ТекущаяДата);
			КонецПериода = КонецМесяца(Параметры.ОтборИзСписка.ТекущаяДата);
		КонецЕсли;
	Иначе
		ОтборДата = Ложь;
	КонецЕсли;
	
	ОтборОрганизация = ЗначениеЗаполнено(ОтборИзСписка.ТекущаяОрганизация);
	ОтборКонтрагент = ЗначениеЗаполнено(ОтборИзСписка.ТекущийКонтрагент);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаспознанныйДокумент.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РаспознанныйДокумент КАК РаспознанныйДокумент
	|ГДЕ
	|	НЕ РаспознанныйДокумент.ПометкаУдаления
	|	И РаспознанныйДокумент.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСозданныхДокументовРаспознаваниеДокументов.Новый)
	|	И РаспознанныйДокумент.ТипДокумента <> ЗНАЧЕНИЕ(Перечисление.ТипыДокументовРаспознаваниеДокументов.НеопознанныйДокумент)
	|	И РаспознанныйДокумент.ТипДокумента <> ЗНАЧЕНИЕ(Перечисление.ТипыДокументовРаспознаваниеДокументов.ПустаяСсылка)
	|	И РаспознанныйДокумент.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РаспознанныйДокумент.Контрагент = &Контрагент
	|	И РаспознанныйДокумент.Организация = &Организация";
	
	Если ОтборДата Тогда
		Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
		Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И РаспознанныйДокумент.Дата МЕЖДУ &НачалоПериода И &КонецПериода", "");
	КонецЕсли;
	
	Если ОтборОрганизация Тогда
		Запрос.УстановитьПараметр("Организация", ОтборИзСписка.ТекущаяОрганизация);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И РаспознанныйДокумент.Организация = &Организация", "");
	КонецЕсли;
	
	Если ОтборКонтрагент Тогда
		Запрос.УстановитьПараметр("Контрагент", ОтборИзСписка.ТекущийКонтрагент);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И РаспознанныйДокумент.Контрагент = &Контрагент", "");
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаСервере
Процедура НовыйКомплектНаСервере(ОбновитьТекущийЭлемент, НомерКомплекта)
	
	Если НомерКомплекта = 0 Тогда
		КоличествоКомплектов = КоличествоКомплектов + 1;
		НомерКомплекта = КоличествоКомплектов;
	КонецЕсли;
	ИмяТаблицы = "Комплект" + Формат(НомерКомплекта, "ЧГ=");
	
	// Просто убрать Автозаполнение у КоманднаяПанель нельзя, нужно полностью скрыть
	// КоманднаяПанель и сделать её аналог
	КнопкиТаблицы = Элементы.Добавить("ГруппаКнопкиТаблицы" + ИмяТаблицы, Тип("ГруппаФормы"), Элементы.ГруппаКомплекты);
	КнопкиТаблицы.Вид = Элементы.ГруппаКнопкиТаблицы.Вид;
	ЗаполнитьЗначенияСвойств(КнопкиТаблицы, Элементы.ГруппаКнопкиТаблицы, "Отображение, Группировка, ОтображатьЗаголовок");
	
	// Заполнение КнопкиТаблицы
	ПанельКомплекта = Элементы.Добавить("ГруппаКоманднаяПанель" + ИмяТаблицы, Тип("ГруппаФормы"), КнопкиТаблицы);
	ПанельКомплекта.Вид = Элементы.ГруппаКоманднаяПанель.Вид;
	ЗаполнитьЗначенияСвойств(ПанельКомплекта, Элементы.ГруппаКоманднаяПанель, "РастягиватьПоГоризонтали");
	
	ДекорацияКомплекта = Элементы.Добавить("ДекорацияТекст" + ИмяТаблицы, Тип("ДекорацияФормы"), КнопкиТаблицы);
	ДекорацияКомплекта.Вид = Элементы.ДекорацияТекст.Вид;
	ЗаполнитьЗначенияСвойств(
		ДекорацияКомплекта,
		Элементы.ДекорацияТекст,
		"АвтоМаксимальнаяШирина,
		|ВертикальноеПоложениеВГруппе,
		|ГоризонтальноеПоложение,
		|Заголовок,
		|РастягиватьПоГоризонтали,
		|Шрифт"
	);
	
	ДекорацияРаздвижная = Элементы.Добавить("ДекорацияРаздвижная" + ИмяТаблицы, Тип("ДекорацияФормы"), КнопкиТаблицы);
	ДекорацияРаздвижная.Вид = Элементы.ДекорацияРаздвижная.Вид;
	ЗаполнитьЗначенияСвойств(
		ДекорацияРаздвижная,
		Элементы.ДекорацияРаздвижная,
		"АвтоМаксимальнаяШирина,
		|ГоризонтальноеПоложение,
		|Заголовок,
		|РастягиватьПоГоризонтали"
	);
	
	НовоеИмяКоманды = Элементы.УдалитьКомплект.Имя + ИмяТаблицы;
	НоваяКоманда = Команды.Добавить(НовоеИмяКоманды);
	ЗаполнитьЗначенияСвойств(НоваяКоманда, Команды.УдалитьКомплект, "Заголовок, Действие, Картинка, Подсказка, Отображение");
	
	КнопкаУдалить = Элементы.Добавить("УдалитьКомплект" + ИмяТаблицы, Тип("КнопкаФормы"), КнопкиТаблицы);
	КнопкаУдалить.ИмяКоманды = НовоеИмяКоманды;
	КнопкаУдалить.Заголовок = Элементы.УдалитьКомплект.Заголовок;
	
	// Заполнение ПанельКомплекта
	ПодменюКомплекта = Элементы.Добавить("ПодменюСозданиеДокумента" + ИмяТаблицы, Тип("ГруппаФормы"), ПанельКомплекта);
	ПодменюКомплекта.Вид = Элементы.ПодменюСозданиеДокумента.Вид;
	ЗаполнитьЗначенияСвойств(
		ПодменюКомплекта,
		Элементы.ПодменюСозданиеДокумента,
		"Видимость, Доступность, Заголовок, Картинка, Отображение, ЦветФона"
	);
	
	Для Каждого ЭлементПодменю Из Элементы.ПодменюСозданиеДокумента.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ЭлементПодменю) = Тип("ГруппаФормы") Тогда
			ГруппаКнопок = Элементы.Добавить(ЭлементПодменю.Имя + ИмяТаблицы, Тип("ГруппаФормы"), ПодменюКомплекта);
			ГруппаКнопок.Вид = ВидГруппыФормы.ГруппаКнопок;
			ГруппаКнопок.Видимость = Ложь;
			Для Каждого КнопкаИзГруппы Из ЭлементПодменю.ПодчиненныеЭлементы Цикл
				НовоеИмяКоманды = КнопкаИзГруппы.Имя + "_" + ИмяТаблицы;
				НоваяКоманда = Команды.Добавить(НовоеИмяКоманды);
				// У копируемой кнопки ИмяКоманды должно совпадать с действием
				НоваяКоманда.Действие = КнопкаИзГруппы.ИмяКоманды;
				
				НоваяКнопка = Элементы.Добавить(КнопкаИзГруппы.Имя + "_" + ИмяТаблицы, Тип("КнопкаФормы"), ГруппаКнопок);
				НоваяКнопка.ИмяКоманды = НовоеИмяКоманды;
				НоваяКнопка.Заголовок = КнопкаИзГруппы.Заголовок;
			КонецЦикла;
		Иначе
			НовоеИмяКоманды = ЭлементПодменю.Имя + "_" + ИмяТаблицы;
			НоваяКоманда = Команды.Добавить(НовоеИмяКоманды);
			// У копируемой кнопки ИмяКоманды должно совпадать с действием
			НоваяКоманда.Действие = ЭлементПодменю.ИмяКоманды;
			
			НоваяКнопка = Элементы.Добавить(ЭлементПодменю.Имя + "_" + ИмяТаблицы, Тип("КнопкаФормы"), ПодменюКомплекта);
			НоваяКнопка.ИмяКоманды = НовоеИмяКоманды;
			НоваяКнопка.Заголовок = ЭлементПодменю.Заголовок;

		КонецЕсли;
	КонецЦикла;
	
	НовоеИмяКоманды = Элементы.НедоступнаяКнопкаСоздать.Имя + ИмяТаблицы;
	НоваяКоманда = Команды.Добавить(НовоеИмяКоманды);
	НоваяКоманда.Действие = "СоздатьДокументыКомплекта";
	
	НоваяКнопка = Элементы.Добавить(Элементы.НедоступнаяКнопкаСоздать.Имя + ИмяТаблицы, Тип("КнопкаФормы"), ПанельКомплекта);
	НоваяКнопка.ИмяКоманды = НовоеИмяКоманды;
	ЗаполнитьЗначенияСвойств(
		НоваяКнопка,
		Элементы.НедоступнаяКнопкаСоздать,
		"Видимость, Доступность, Заголовок, Картинка, Отображение, ЦветФона"
	);
	
	НовоеИмяКоманды = "УбратьЛишние" + ИмяТаблицы;
	НоваяКоманда = Команды.Добавить(НовоеИмяКоманды);
	НоваяКоманда.Действие = "УбратьЛишние";
	НоваяКоманда.Подсказка = Команды.УбратьЛишние.Подсказка;
	
	НоваяКнопка = Элементы.Добавить("УбратьЛишние" + ИмяТаблицы, Тип("КнопкаФормы"), ПанельКомплекта);
	НоваяКнопка.ИмяКоманды = НовоеИмяКоманды;
	НоваяКнопка.Заголовок = Элементы.УбратьЛишние.Заголовок;
	НоваяКнопка.Доступность = Ложь;
	
	ТаблицаНаФорме = Элементы.Добавить(ИмяТаблицы, Тип("ТаблицаФормы"), Элементы.ГруппаКомплекты);
	ТаблицаНаФорме.ПутьКДанным = "ДанныеДокументов";
	ТаблицаНаФорме.Отображение = ОтображениеТаблицы.Список;
	ТаблицаНаФорме.ОтборСтрок = Новый ФиксированнаяСтруктура("НомерКомплекта", НомерКомплекта);
	ТаблицаНаФорме.ИзменятьСоставСтрок = Ложь;
	ТаблицаНаФорме.РазрешитьНачалоПеретаскивания = Истина;
	ТаблицаНаФорме.РазрешитьПеретаскивание = Истина;
	
	ТаблицаНаФорме.УстановитьДействие("Выбор", "ВсеТаблицыВыбор");
	ТаблицаНаФорме.УстановитьДействие("ПередНачаломИзменения", "ВсеТаблицыПередНачаломИзменения");
	ТаблицаНаФорме.УстановитьДействие("ПередУдалением", "ВсеТаблицыПередУдалением");
	ТаблицаНаФорме.УстановитьДействие("Перетаскивание", "ВсеТаблицыПеретаскивание");
	ТаблицаНаФорме.Высота = 6;
	ТаблицаНаФорме.АвтоМаксимальнаяВысота = Ложь;
	ТаблицаНаФорме.МаксимальнаяВысота = 6;
	ТаблицаНаФорме.КоманднаяПанель.Видимость = Ложь;
	
	ЗаполнитьКолонкиРекурсивно(ИмяТаблицы, Элементы.ДанныеДокументов.ПодчиненныеЭлементы, ТаблицаНаФорме);
	
	ОбновитьДоступностьОбработатьВсе();
	Если ОбновитьТекущийЭлемент И Не ОбщегоНазначения.ЭтоВебКлиент() Тогда
		ТекущийЭлемент = ТаблицаНаФорме;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКолонкиРекурсивно(ИмяТаблицы, ЭлементыПеребора, РодительЭлемента)
	
	Для Каждого КолонкаИлиГруппа Из ЭлементыПеребора Цикл
		Если ТипЗнч(КолонкаИлиГруппа) = Тип("ГруппаФормы") Тогда
			НовыйЭлемент = Элементы.Добавить(ИмяТаблицы + КолонкаИлиГруппа.Имя, Тип("ГруппаФормы"), РодительЭлемента);
			НовыйЭлемент.Вид = ВидГруппыФормы.ГруппаКолонок;
			ЗаполнитьКолонкиРекурсивно(ИмяТаблицы, КолонкаИлиГруппа.ПодчиненныеЭлементы, НовыйЭлемент);
		Иначе
			НовыйЭлемент = Элементы.Добавить(ИмяТаблицы + КолонкаИлиГруппа.Имя, Тип("ПолеФормы"), РодительЭлемента);
			НовыйЭлемент.Заголовок = КолонкаИлиГруппа.Заголовок;
			НовыйЭлемент.Вид = КолонкаИлиГруппа.Вид;
			НовыйЭлемент.ПутьКДанным = "ДанныеДокументов." + КолонкаИлиГруппа.Имя;
			НовыйЭлемент.ПоложениеЗаголовка = КолонкаИлиГруппа.ПоложениеЗаголовка;
			Если КолонкаИлиГруппа.Имя = "Ошибок" Тогда
				НовыйЭлемент.Формат = КолонкаИлиГруппа.Формат;
			КонецЕсли;
			//НовыйЭлемент.ФорматРедактирования = Колонка.ФорматРедактирования;
			НовыйЭлемент.Подсказка = КолонкаИлиГруппа.Подсказка;
			НовыйЭлемент.КартинкаШапки = КолонкаИлиГруппа.КартинкаШапки;
			НовыйЭлемент.Ширина = КолонкаИлиГруппа.Ширина;
			
			Если КолонкаИлиГруппа.Имя = "СтатусРаспознавания" Тогда
				НовыйЭлемент.КартинкаЗначений = БиблиотекаКартинок.КоллекцияСтатусыРаспознаванияДокумента;
			ИначеЕсли КолонкаИлиГруппа.Имя = "НаправлениеДокумента" Тогда
				НовыйЭлемент.КартинкаЗначений = БиблиотекаКартинок.НаправлениеРаспознанногоДокумента;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДоступностьОбработатьВсе()
	Элементы.ОбработатьВсе.Доступность = (Элементы.ГруппаКомплекты.ПодчиненныеЭлементы.Количество() <> 0);
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеДокумента(РаспознанныйДокумент)
	
	СтрокиТаблицы = ДанныеДокументов.НайтиСтроки(Новый Структура("Ссылка", РаспознанныйДокумент));
	КоличествоСтрок = СтрокиТаблицы.Количество();
	Если КоличествоСтрок = 0 Тогда
		Возврат;
	ИначеЕсли СтрокиТаблицы.Количество() > 1 Тогда
		// Сюда не должны попадать. Дополнительная проверка
		ВызватьИсключение НСтр("ru = 'В основной таблице появились дубли документов.'");
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
		ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			РаспознанныйДокумент,
			"ПометкаУдаления, Статус, Направление, ТипДокумента, Наименование, Организация, Контрагент, СуммаДокумента, НомерДокумента, ДатаДокумента",
			Истина);
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеДокумента);
		РаспознаваниеДокументовКомплекты.ДополнитьДанныеДокументовПоСтроке(СтрокаТаблицы);
		СтрокаТаблицы.Ошибок = РаспознаваниеДокументовСлужебный.ПроблемныеРеквизиты(
				РаспознанныйДокумент.ПолучитьОбъект(), "ТолькоМешающиеПроведению"
			).Количество();
		НастроитьПанельИОшибкиКомплекта(СтрокаТаблицы.НомерКомплекта);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПанельИОшибкиКомплекта(НастраиваемыйКомплект = Неопределено)
	
	Если НастраиваемыйКомплект = Неопределено Тогда
		СтрокиДляОбхода = ДанныеДокументов;
	Иначе
		Если НастраиваемыйКомплект = 0 Тогда
			// Т.к. комплекты нумеруются с 1
			Возврат;
		КонецЕсли;
		СтрокиДляОбхода = ДанныеДокументов.НайтиСтроки(Новый Структура("НомерКомплекта", НастраиваемыйКомплект));
		
		// Обновим ТипКомплекта для всех строк этого комплекта
		ТипКомплекта = РаспознаваниеДокументовКомплекты.СформироватьТипКомплекта(СтрокиДляОбхода, "ПоТаблице");
		Для Каждого СтрокаДанных Из СтрокиДляОбхода Цикл
			СтрокаДанных.ТипКомплекта = ТипКомплекта;
		КонецЦикла;
		
		
		ИмяТаблицы = "Комплект" + Формат(НастраиваемыйКомплект, "ЧГ=");
		Если СтрокиДляОбхода.Количество() = 0 Тогда
			Элементы["УбратьЛишние" + ИмяТаблицы].Доступность = Ложь;
		Иначе
			
			// Кнопка УбратьЛишние появляется, если:
			// 1 - это комплект неизвестного типа
			// 2 - есть документы разного направления
			
			Если Не Элементы["УбратьЛишние" + ИмяТаблицы].Доступность Тогда
				Если Не РаспознаваниеДокументовКомплектыКлиентСервер.ЭтоТипКомплектаМожноОбработать(СтрокиДляОбхода[0].ТипКомплекта) Тогда
					Элементы["УбратьЛишние" + ИмяТаблицы].Доступность = Истина;
				Иначе
					Для Каждого СтрокаДанных Из СтрокиДляОбхода Цикл
						Если СтрокаДанных.НаправлениеДокумента <> СтрокиДляОбхода[0].НаправлениеДокумента Тогда // НаправлениеДокумента - это число
							Элементы["УбратьЛишние" + ИмяТаблицы].Доступность = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ПройденныеКомплекты = Новый Массив;
	
	Для Каждого СтрокаДанных Из СтрокиДляОбхода Цикл
		Если СтрокаДанных.НомерКомплекта = 0 Тогда
			// Т.к. комплекты нумеруются с 1
			Продолжить;
		КонецЕсли;
		
		Если НастраиваемыйКомплект <> Неопределено И СтрокаДанных.НомерКомплекта <> НастраиваемыйКомплект Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяТаблицы = "Комплект" + Формат(СтрокаДанных.НомерКомплекта, "ЧГ=");
		Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элементы, ИмяТаблицы) Тогда
			// Для удаленных комплектов
			Продолжить;
		КонецЕсли;
		
		Если ПройденныеКомплекты.Найти(СтрокаДанных.НомерКомплекта) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОбновитьОшибкиКомплекта(СтрокаДанных.НомерКомплекта);
		
		Если СтрокаДанных.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий Тогда
			
			СтрокаТипДокумента = НСтр("ru = 'Поступление'");
			Если ЗначениеЗаполнено(СтрокаДанных.Контрагент) Тогда
				ВОтКонтрагента = СтрШаблон(НСтр("ru = ' от ""%1""'"), СокрЛП(СтрокаДанных.Контрагент));
			Иначе
				ВОтКонтрагента = "";
			КонецЕсли;
			
			Элементы[Элементы.КнопкиРеализация.Имя + ИмяТаблицы].Видимость = Ложь;
			Элементы[Элементы.КнопкиПоступление.Имя + ИмяТаблицы].Видимость = Истина;
			ДоступныеКоманды = РаспознаваниеДокументовКомплектыКлиентСервер.ДоступныеКомандыПоТипуКомплекта(
				СтрокаДанных.Направление, СтрокаДанных.ТипКомплекта);
			Если ДоступныеКоманды[0] = "СоздатьНевозможно" Тогда
				Элементы[Элементы.ПодменюСозданиеДокумента.Имя + ИмяТаблицы].Видимость = Ложь;
				Элементы[Элементы.НедоступнаяКнопкаСоздать.Имя + ИмяТаблицы].Видимость = Истина;
			Иначе
				Элементы[Элементы.ПодменюСозданиеДокумента.Имя + ИмяТаблицы].Видимость = Истина;
				Элементы[Элементы.НедоступнаяКнопкаСоздать.Имя + ИмяТаблицы].Видимость = Ложь;
				Для Каждого КомандаГруппы Из Элементы[Элементы.КнопкиПоступление.Имя + ИмяТаблицы].ПодчиненныеЭлементы Цикл
					ИмяКомандыБезТаблицы = СтрЗаменить(КомандаГруппы.Имя, "_" + ИмяТаблицы, "");
					КомандаГруппы.Видимость = (ДоступныеКоманды.Найти(ИмяКомандыБезТаблицы) <> Неопределено);
				КонецЦикла;
			КонецЕсли;
			
		ИначеЕсли СтрокаДанных.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий Тогда
			
			СтрокаТипДокумента = НСтр("ru = 'Реализация'");
			Если ЗначениеЗаполнено(СтрокаДанных.Контрагент) Тогда
				ВОтКонтрагента = СтрШаблон(НСтр("ru = ' в ""%1""'"), СокрЛП(СтрокаДанных.Контрагент));
			Иначе
				ВОтКонтрагента = "";
			КонецЕсли;
			
			Элементы[Элементы.КнопкиПоступление.Имя + ИмяТаблицы].Видимость = Ложь;
			Элементы[Элементы.КнопкиРеализация.Имя + ИмяТаблицы].Видимость = Истина;
			ДоступныеКоманды = РаспознаваниеДокументовКомплектыКлиентСервер.ДоступныеКомандыПоТипуКомплекта(
				СтрокаДанных.Направление, СтрокаДанных.ТипКомплекта);
			Если ДоступныеКоманды[0] = "СоздатьНевозможно" Тогда
				Элементы[Элементы.ПодменюСозданиеДокумента.Имя + ИмяТаблицы].Видимость = Ложь;
				Элементы[Элементы.НедоступнаяКнопкаСоздать.Имя + ИмяТаблицы].Видимость = Истина;
			Иначе
				Элементы[Элементы.ПодменюСозданиеДокумента.Имя + ИмяТаблицы].Видимость = Истина;
				Элементы[Элементы.НедоступнаяКнопкаСоздать.Имя + ИмяТаблицы].Видимость = Ложь;
				Для Каждого КомандаГруппы Из Элементы[Элементы.КнопкиРеализация.Имя + ИмяТаблицы].ПодчиненныеЭлементы Цикл
					ИмяКомандыБезТаблицы = СтрЗаменить(КомандаГруппы.Имя, "_" + ИмяТаблицы, "");
					КомандаГруппы.Видимость = (ДоступныеКоманды.Найти(ИмяКомандыБезТаблицы) <> Неопределено);
				КонецЦикла;
			КонецЕсли;
			
		Иначе
			
			Элементы[Элементы.КнопкиРеализация.Имя + ИмяТаблицы].Видимость = Ложь;
			Элементы[Элементы.КнопкиПоступление.Имя + ИмяТаблицы].Видимость = Ложь;
			Элементы[Элементы.КнопкиОтказ.Имя + ИмяТаблицы].Видимость = Истина;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДанных.ДатаДокумента) Тогда
			ДатаВДекорации = НСтр("ru = ' от '") + Формат(СтрокаДанных.ДатаДокумента, "ДФ=dd.MM.yyyy");
		Иначе
			ДатаВДекорации = "";
		КонецЕсли;
		Элементы["ДекорацияТекст" + ИмяТаблицы].Заголовок = СтрШаблон(НСтр("ru = '%1%2%3'"),
			СтрокаТипДокумента, ДатаВДекорации, ВОтКонтрагента);
		
		ПройденныеКомплекты.Добавить(СтрокаДанных.НомерКомплекта);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьКомплектНаСервере(НомерКомплекта, УдалятьСтроки, ОтправитьОбратнуюСвязь = Ложь)
	
	СтрокиКомплекта = ДанныеДокументов.НайтиСтроки(Новый Структура("НомерКомплекта", НомерКомплекта));
	Для Каждого СтрокаТаблицы Из СтрокиКомплекта Цикл
		Если Не УдалятьСтроки Тогда
			НоваяСтрока = ДанныеДокументов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.НомерКомплекта = 0;
			НоваяСтрока.ТипКомплекта = "";
		КонецЕсли;
		ДанныеДокументов.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
	ИмяТаблицы = "Комплект" + Формат(НомерКомплекта, "ЧГ=");
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элементы, ИмяТаблицы) Тогда
		Элементы.Удалить(Элементы[ИмяТаблицы]);
		Элементы.Удалить(Элементы["ГруппаКнопкиТаблицы" + ИмяТаблицы]);
		ОбновитьДоступностьОбработатьВсе();
	КонецЕсли;
	
	ТекущиеДействия = РезультатОбратнойСвязи.Комплекты.Получить(НомерКомплекта);
	НовыеДействия = Новый Соответствие;
	Для Каждого КлючЗначение Из ТекущиеДействия Цикл
		Если КлючЗначение.Значение = "ДобавленАвтоматически"
			Или КлючЗначение.Значение = "Удален"
			Или КлючЗначение.Значение = "ОтказОтСоздания" Тогда
			// Действие "Удален" может быть только у автоматически добавленных документов
			
			НовыеДействия.Вставить(КлючЗначение.Ключ, "ОтказОтСоздания");
		КонецЕсли;
	КонецЦикла;
	
	Если ОтправитьОбратнуюСвязь И НовыеДействия.Количество() <> 0 Тогда
		ДанныеПакета = Новый Массив;
		
		ВсеРаспознанные = Новый Массив;
		Для Каждого КлючЗначение Из НовыеДействия Цикл
			ВсеРаспознанные.Добавить(КлючЗначение.Ключ);
		КонецЦикла;
		
		ТипыДокументовВСервисе = РаспознаваниеДокументовСлужебныйКлиентСервер.ПолучитьОбратноеСоответствие(
			Документы.РаспознанныйДокумент.СоответствиеТиповДокументовВСервисеИБРД());
		
		set_id = Строка(Новый УникальныйИдентификатор);
		РаспознанныеДанные = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ВсеРаспознанные,
			"Номер, Направление, ТипДокумента, НомерДокумента, ДатаДокумента, СуммаДокумента, Контрагент, Организация, ИдентификаторРезультата");
		
		Для Каждого КлючЗначение Из РаспознанныеДанные Цикл
			ДанныеДокумента = КлючЗначение.Значение;
			ДопДанныеПакета = РаспознаваниеДокументовКомплектыВызовСервера.ПолучитьОбратнуюСвязьДляСозданногоДокумента(ДанныеДокумента);
			ДопДанныеПакета.Удалить("Статус");
			ДопДанныеПакета.Вставить("set_id", set_id);
			ДопДанныеПакета.Вставить("doc_uuid", ДанныеДокумента.ИдентификаторРезультата);
			ДопДанныеПакета.Вставить("ТипДокумента", ТипыДокументовВСервисе.Получить(ДанныеДокумента.ТипДокумента));
			ДопДанныеПакета.Вставить("ОсновнойДокумент", Ложь);
			ДопДанныеПакета.Вставить("Действие", "ОтказОтСоздания");
			
			ДанныеПакета.Добавить(ДопДанныеПакета);
		КонецЦикла;
		
		Пакет = Новый Структура;
		Пакет.Вставить("set_creation", Новый Структура("set_data", ДанныеПакета));
		РаспознаваниеДокументовКоннекторСлужебный.ПередатьОбратнуюСвязь(КлючЗначение.Значение.ИдентификаторРезультата, Пакет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьИСоздатьДокументыПоКомплекту(Форма, ПараметрыСоздания)
	
	#Если Сервер Тогда
		ЗаполнитьПараметрыСозданияНаСервере(ПараметрыСоздания);
		ПолученВариантСозданияКомплекта(ПараметрыСоздания, Форма);
	#Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("ПолученВариантСозданияКомплектаНаКлиенте", Форма);
		ПараметрыФормы = Новый Структура("ПараметрыСоздания", ПараметрыСоздания);
		ОткрытьФорму("Обработка.РаспознаваниеДокументов.Форма.СозданиеКомплекта", ПараметрыФормы, Форма,,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	#КонецЕсли
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПараметрыСозданияНаСервере(ПараметрыСоздания)
	
	РаспознаваниеДокументовКомплекты.ОбновитьИЗаполнитьСвязанныеИСозданныеДокументы(ПараметрыСоздания);
	Для Каждого ЭтотПараметр Из ПараметрыСоздания.СозданныеДокументы Цикл
		Если ЭтотПараметр.Значение.СканУжеПрикреплен Тогда
			ЭтотПараметр.Значение.ПрикрепитьСкан = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#Область СлужебныеИзФормыТорг12

&НаКлиентеНаСервереБезКонтекста
Процедура ОткрытиеФормыДокумента(Форма, ПараметрыОперации, ИмяТаблицы, ДанныеОбработки = Неопределено)
	
	НомерКомплекта = Число(СтрЗаменить(ИмяТаблицы, "Комплект", ""));
	РезультатПроверки = ПроверитьПравилаКомплекта(Форма.ДанныеДокументов, НомерКомплекта);
	
	Если Не РезультатПроверки.ПроверкиПройдены Тогда
		Если ДанныеОбработки <> Неопределено Тогда
			ДанныеОбработки.КомплектовНеУдалосьОбработать = ДанныеОбработки.КомплектовНеУдалосьОбработать + 1;
		КонецЕсли;
		
		#Если Не Сервер Тогда
			ПоказатьПредупреждение(, РезультатПроверки.ТекстСообщения);
		#КонецЕсли
		
		Возврат;
	КонецЕсли;
	
	ДокументыПоТипам = Новый Соответствие;
	СтрокиКомплекта = Форма.ДанныеДокументов.НайтиСтроки(Новый Структура("НомерКомплекта", НомерКомплекта));
	Для Каждого СтрокаТаблицы Из СтрокиКомплекта Цикл
		ДокументыПоТипам.Вставить(СтрокаТаблицы.ТипДокумента, СтрокаТаблицы.Ссылка);
	КонецЦикла;
	
	ПараметрыСоздания = РаспознаваниеДокументовКомплектыКлиентСервер.НовыеПараметрыСозданияКомплекта();
	ПараметрыСоздания.ПараметрыОперации    = ПараметрыОперации;
	ПараметрыСоздания.НаправлениеДокумента = СтрокаТаблицы.Направление;
	ПараметрыСоздания.ТипКомплекта         = РезультатПроверки.ТипКомплекта;
	ПараметрыСоздания.РаспознанныеДокументыПоТипам = ДокументыПоТипам;
	ПараметрыСоздания.ДанныеОбработки      = ДанныеОбработки;
	
	ПараметрыСоздания.Вставить("НомерКомплекта", НомерКомплекта); // Необязательный параметр
	ПроверитьИСоздатьДокументыПоКомплекту(Форма, ПараметрыСоздания);
	
	Если ДанныеОбработки <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ДанныеОбработки, ПараметрыСоздания.ДанныеОбработки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученВариантСозданияКомплектаНаКлиенте(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеНаКлиенте = Новый ОписаниеОповещения("ПолученРезультатСозданияКомплекта", ЭтотОбъект);
	ПолученВариантСозданияКомплекта(Результат, ЭтотОбъект, ОповещениеНаКлиенте);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученРезультатСозданияКомплекта(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.ДанныеОбработки <> Неопределено Тогда
		Для Каждого НомерКомплекта Из Результат.ДанныеОбработки.НомераСозданныхКомплектов Цикл
			УдалитьКомплектНаСервере(НомерКомплекта, Истина);
		КонецЦикла;
		
		Если Результат.ДанныеОбработки.КомплектовНеУдалосьОбработать <> 0 Тогда
			ТекстПредупреждения = НСтр("ru = 'Не удалось обработать комплект. Повторите операцию после исправления ошибок:'");
			ПараметрыФормы = Новый Структура(
				"ОшибкиПроведения, ТекстПредупреждения",
				Результат.ДанныеОбработки.ОшибкиПроведения,
				ТекстПредупреждения
			);
			ОткрытьФорму("Обработка.РаспознаваниеДокументов.Форма.ОтчетПоОшибкам",
				ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПолученВариантСозданияКомплекта(Результат, Форма, ОповещениеНаКлиенте = Неопределено) Экспорт
	
	РаспознаваниеДокументовКомплектыКлиентСервер.ОбработатьДокументыКомплекта(Форма, Результат, ОповещениеНаКлиенте);
	
КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Функция ПроверитьПравилаКомплекта(ДанныеДокументов, НомерКомплекта)
	
	РезультатПроверки = Новый Структура("ПроверкиПройдены, ТипКомплекта, ТекстСообщения",
		Ложь, "", НСтр("ru = 'Выбранные типы документов не могут входить в один комплект. Уберите лишние документы из комплекта.'"));
	СтрокиКомплекта = ДанныеДокументов.НайтиСтроки(Новый Структура("НомерКомплекта", НомерКомплекта));
	
	Если СтрокиКомплекта.Количество() = 0 Тогда
		РезультатПроверки.ПроверкиПройдены = Ложь;
		РезультатПроверки.ТекстСообщения = НСтр("ru = 'Нельзя создать комплект без документов'");
		Возврат РезультатПроверки;
	КонецЕсли;
	
	ТипКомплекта = СтрокиКомплекта[0].ТипКомплекта;
	РезультатПроверки.ТипКомплекта = ТипКомплекта;
	Если РаспознаваниеДокументовКомплектыКлиентСервер.ЭтоТипКомплектаМожноОбработать(ТипКомплекта) Тогда
		ПроверитьКомплектАктОбОказанииУслугСчетНаОплатуСчетФактураТОРГ12(СтрокиКомплекта, ТипКомплекта, РезультатПроверки);
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьКомплектАктОбОказанииУслугСчетНаОплатуСчетФактураТОРГ12(СтрокиКомплекта, ТипКомплекта, РезультатПроверки)
	
	РезультатПроверки.ПроверкиПройдены = Истина;
	ПервыйДокументКомплекта = СтрокиКомплекта[0];
	
	Для Каждого ЭтотДокументКомплекта Из СтрокиКомплекта Цикл
		Если ПервыйДокументКомплекта = ЭтотДокументКомплекта Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПервыйДокументКомплекта.Направление <> ЭтотДокументКомплекта.Направление Тогда
			РезультатПроверки.ПроверкиПройдены = Ложь;
			РезультатПроверки.ТекстСообщения = НСтр("ru = 'Комплект не может одновременно содержать документы поступления и списания. Убедитесь, что либо все документы комплекта относятся к списанию, либо все – к поступлению.'");
			Возврат;
		КонецЕсли;
		
		Если ПервыйДокументКомплекта.Организация <> ЭтотДокументКомплекта.Организация Тогда
			РезультатПроверки.ПроверкиПройдены = Ложь;
			РезультатПроверки.ТекстСообщения = НСтр("ru = 'Данные документы принадлежат разным организациям и не могут быть обработаны в комплекте. Проверьте корректность заполнения данных документов или обработайте их по отдельности.'");
			Возврат;
		КонецЕсли;
		
		Если ПервыйДокументКомплекта.Контрагент <> ЭтотДокументКомплекта.Контрагент Тогда
			РезультатПроверки.ПроверкиПройдены = Ложь;
			РезультатПроверки.ТекстСообщения = НСтр("ru = 'Данные документы принадлежат разным контрагентам и не могут быть обработаны в комплекте. Проверьте корректность заполнения данных документов или обработайте их по отдельности.'");
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПерепроверитьНаСервере()
	
	Для НомерКомплекта = 1 По КоличествоКомплектов Цикл
		ИмяТаблицы = "Комплект" + Формат(НомерКомплекта, "ЧГ=");
		УбратьЛишниеНаСервере(ИмяТаблицы);
	КонецЦикла;
	
	ТаблицаДокументов = ДанныеДокументов.Выгрузить(Новый Структура("НомерКомплекта", 0));
	ВсеДанныеДокументов = РаспознаваниеДокументовКомплекты.ДополнитьДанныеДокументов(ТаблицаДокументов.ВыгрузитьКолонку("Ссылка"));
	
	ДанныеКомплектов = РаспознаваниеДокументовКомплекты.НайтиКомплекты(ВсеДанныеДокументов);
	УдалитьДублиКомплектов(ДанныеКомплектов);
	
	БылоКомплектов = КоличествоКомплектов;
	КоличествоКомплектов = КоличествоКомплектов + ДанныеКомплектов.КоличествоКомплектов;
	
	Для Каждого СтрокаКомплекта Из ДанныеКомплектов.ТаблицаКомплектов Цикл
		СтрокиТаблицы = ДанныеДокументов.НайтиСтроки(Новый Структура("Ссылка", СтрокаКомплекта.Ссылка));
		Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
			СтрокаТаблицы.НомерКомплекта = СтрокаКомплекта.НомерКомплекта + БылоКомплектов;
			СтрокаТаблицы.ТипКомплекта = СтрокаКомплекта.ТипКомплекта;
		КонецЦикла;
	КонецЦикла;
	
	Для НомерКомплекта = БылоКомплектов + 1 По КоличествоКомплектов Цикл
		РезультатОбратнойСвязи.Комплекты.Вставить(НомерКомплекта, Новый Соответствие);
		НовыйКомплектНаСервере(Ложь, НомерКомплекта);
	КонецЦикла;
	НастроитьПанельИОшибкиКомплекта();
	
	ОбратнаяСвязьКомплектов = РезультатОбратнойСвязи.Комплекты;
	Для Каждого СтрокаКомплекта Из ДанныеКомплектов.ТаблицаКомплектов Цикл
		ОбратнаяСвязьКомплектов[СтрокаКомплекта.НомерКомплекта + БылоКомплектов].Вставить(СтрокаКомплекта.Ссылка, "ДобавленАвтоматически");
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДублиКомплектов(ДанныеКомплектов)
	
	ДублиКомплектов = Новый Массив;
	
	ТаблицаПоискаДублей = ДанныеДокументов.Выгрузить();
	ИдПоиска = ТаблицаПоискаДублей.Количество();
	Пока ИдПоиска > 0 Цикл
		ИдПоиска = ИдПоиска - 1;
		Если ТаблицаПоискаДублей[ИдПоиска].НомерКомплекта = 0 Тогда
			ТаблицаПоискаДублей.Удалить(ИдПоиска);
		КонецЕсли;
	КонецЦикла;
	
	Для НомерКомплекта = 1 По ДанныеКомплектов.КоличествоКомплектов Цикл
		СтрокиКомплекта = ДанныеКомплектов.ТаблицаКомплектов.НайтиСтроки(Новый Структура("НомерКомплекта", НомерКомплекта));
		Если СтрокиКомплекта.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаКомплекта Из СтрокиКомплекта Цикл
			ЭтоДубль = РаспознаваниеДокументовКомплекты.ЕстьДубльДокументаИзКомплекта(СтрокаКомплекта, ТаблицаПоискаДублей);
			Если ЭтоДубль Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЭтоДубль Тогда
			ДублиКомплектов.Добавить(НомерКомплекта);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДублиКомплектов.Количество() <> 0 Тогда
		
		ИдСтрокиКомплектов = ДанныеКомплектов.ТаблицаКомплектов.Количество();
		Пока ИдСтрокиКомплектов > 0 Цикл
			ИдСтрокиКомплектов = ИдСтрокиКомплектов - 1;
			Если ДублиКомплектов.Найти(ДанныеКомплектов.ТаблицаКомплектов[ИдСтрокиКомплектов].НомерКомплекта)
				<> Неопределено Тогда
				
				ДанныеКомплектов.ТаблицаКомплектов.Удалить(ИдСтрокиКомплектов);
			КонецЕсли;
		КонецЦикла;
		
		// Исправление нумерации
		МассивНомеров = Новый Массив;
		МассивНомеров.Добавить(0); // для выравнивания
		Для НомерКомплекта = 1 По ДанныеКомплектов.КоличествоКомплектов Цикл
			МассивНомеров.Добавить(НомерКомплекта);
		КонецЦикла;
		
		Для Каждого НомерДубля Из ДублиКомплектов Цикл
			Для ПозицияУменьшения = НомерДубля + 1 По ДанныеКомплектов.КоличествоКомплектов Цикл
				МассивНомеров[ПозицияУменьшения] = МассивНомеров[ПозицияУменьшения] - 1;
			КонецЦикла;
		КонецЦикла;
		
		Для Каждого СтрокаКомплекта Из ДанныеКомплектов.ТаблицаКомплектов Цикл
			СтрокаКомплекта.НомерКомплекта = МассивНомеров[СтрокаКомплекта.НомерКомплекта];
		КонецЦикла;
		
		ДанныеКомплектов.КоличествоКомплектов = ДанныеКомплектов.КоличествоКомплектов - ДублиКомплектов.Количество();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВсеПоФорме()
	
	ДанныеОбработки = РаспознаваниеДокументовКомплектыКлиентСервер.НовыеДанныеОбработкиКомплектов();
	ДанныеОбработки.ГрупповаяОбработка = Истина;
	ДанныеОбработки.РезультатОбратнойСвязи = РезультатОбратнойСвязи;
	ОбработатьВсеПоФормеНаСервере(ДанныеОбработки);
	
	Если ДанныеОбработки.КомплектовНеУдалосьОбработать <> 0 Тогда
		ТекстПредупреждения = СтрШаблон(НСтр("ru = 'Некоторые комплекты содержат ошибки и не могут быть обработаны.
		|Обработано: %1; Не удалось обработать: %2
		|
		|Повторите операцию после исправления ошибок:
		| - документы комплекта должны быть заполнены корректно,
		| - документы должны принадлежать одному комплекту.'"),
		ДанныеОбработки.КомплектовВсего - ДанныеОбработки.КомплектовНеУдалосьОбработать,
		ДанныеОбработки.КомплектовНеУдалосьОбработать);
		
		ПараметрыФормы = Новый Структура("ОшибкиПроведения, ТекстПредупреждения", ДанныеОбработки.ОшибкиПроведения, ТекстПредупреждения);
		ОткрытьФорму("Обработка.РаспознаваниеДокументов.Форма.ОтчетПоОшибкам",
			ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВсеПоФормеНаСервере(ДанныеОбработки)
	
	Для НомерКомплекта = 1 По КоличествоКомплектов Цикл
		ИмяТаблицы = "Комплект" + Формат(НомерКомплекта, "ЧГ=");
		ПодменюКнопок = "ПодменюСозданиеДокумента" + ИмяТаблицы;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элементы, ПодменюКнопок) Тогда
			
			// Удаление пустых комплектов
			СтрокиКомплекта = ДанныеДокументов.НайтиСтроки(Новый Структура("НомерКомплекта", НомерКомплекта));
			Если СтрокиКомплекта.Количество() = 0 Тогда
				УдалитьКомплектНаСервере(НомерКомплекта, Ложь);
				Продолжить;
			КонецЕсли;
			
			ДанныеОбработки.КомплектовВсего = ДанныеОбработки.КомплектовВсего + 1;
			// На случай, если в подменю нет команды
			ДанныеОбработки.КомплектовНеУдалосьОбработать = ДанныеОбработки.КомплектовНеУдалосьОбработать + 1;
			
			Для Каждого ЭлементПодменю Из Элементы[ПодменюКнопок].ПодчиненныеЭлементы Цикл
				Если ТипЗнч(ЭлементПодменю) = Тип("ГруппаФормы") И ЭлементПодменю.Видимость Тогда
					Для Каждого КнопкаГруппы Из ЭлементПодменю.ПодчиненныеЭлементы Цикл
						Если КнопкаГруппы.Видимость Тогда
							ДанныеОбработки.КомплектовНеУдалосьОбработать = ДанныеОбработки.КомплектовНеУдалосьОбработать - 1;
							
							Позиция_ = СтрНайти(КнопкаГруппы.Имя, "_", НаправлениеПоиска.СКонца);
							ИмяТаблицы = Сред(КнопкаГруппы.Имя, Позиция_ + 1);
							
							СтрокаПоступленияРеализации = Сред(КнопкаГруппы.Имя, 1, Позиция_ - 1);
							СтрокаПоступленияРеализации = СтрЗаменить(СтрокаПоступленияРеализации, "СчетНаОплату", "");
							СтрокаПоступленияРеализации = СтрЗаменить(СтрокаПоступленияРеализации, "СчетФактура", "");
							
							ПараметрыОперации = РаспознаваниеДокументовКомплектыКлиентСервер.ТипДокументаИВидОперации(СтрокаПоступленияРеализации);
							ОткрытиеФормыДокумента(ЭтотОбъект, ПараметрыОперации, ИмяТаблицы, ДанныеОбработки);
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	ОбратнаяСвязь = ДанныеОбработки.РезультатОбратнойСвязи.Отправить;
	Если ЗначениеЗаполнено(ОбратнаяСвязь) Тогда
		Пакет = Новый Структура;
		Пакет.Вставить("set_creation", Новый Структура("set_data", ОбратнаяСвязь.ДанныеПакета));
		РаспознаваниеДокументовКоннекторСлужебный.ПередатьОбратнуюСвязь(ОбратнаяСвязь.ИдентификаторРезультата, Пакет);
	КонецЕсли;
	
	Для Каждого НомерКомплекта Из ДанныеОбработки.НомераСозданныхКомплектов Цикл
		УдалитьКомплектНаСервере(НомерКомплекта, Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыделеннойСтроки()
	
	ЧастьКомплекта = (ТекущийЭлемент.ТекущиеДанные.НомерКомплекта <> 0);
	ПараметрыФормы = Новый Структура("Ключ, ЧастьКомплекта", ТекущийЭлемент.ТекущиеДанные.Ссылка, ЧастьКомплекта);
	
	ИмяФормыОбработчика = РаспознаваниеДокументовСлужебныйКлиентПовтИсп.ПолучитьИмяОткрываемойФормыПоТипу(ТекущийЭлемент.ТекущиеДанные.ТипДокумента, ТекущийЭлемент.ТекущиеДанные.ВариантОбработки);
	ОткрытьФорму(ИмяФормыОбработчика, ПараметрыФормы);
	
КонецПроцедуры

&НаСервере
Процедура УбратьЛишниеНаСервере(ИмяТаблицы)
	
	НомерКомплекта = Число(СтрЗаменить(ИмяТаблицы, "Комплект", ""));
	СтрокиКомплекта = ДанныеДокументов.НайтиСтроки(Новый Структура("НомерКомплекта", НомерКомплекта));
	
	Если СтрокиКомплекта.Количество() < 2 Тогда
		УдалитьКомплектНаСервере(НомерКомплекта, Ложь);
		Возврат;
	КонецЕсли;
	
	Элементы["УбратьЛишние" + ИмяТаблицы].Доступность = Ложь;
	ТаблицаПоиска = ДанныеДокументов.Выгрузить(Новый Структура("НомерКомплекта", НомерКомплекта));
	
	ДанныеКомплекта = РаспознаваниеДокументовКомплекты.ПоследнийПеренесенныйКомплект(ТаблицаПоиска);
	Если ДанныеКомплекта.ДокументыКомплекта.Количество() = 0 Тогда
		УдалитьКомплектНаСервере(НомерКомплекта, Ложь);
	Иначе
		Для Каждого СтрокаТаблицы Из СтрокиКомплекта Цикл
			Если ДанныеКомплекта.ДокументыКомплекта.Найти(СтрокаТаблицы.Ссылка) = Неопределено Тогда
				ТекущиеДействия = РезультатОбратнойСвязи.Комплекты.Получить(СтрокаТаблицы.НомерКомплекта);
				ДействиеДокумента = ТекущиеДействия.Получить(СтрокаТаблицы.Ссылка);
				Если ДействиеДокумента = "ДобавленАвтоматически" Тогда
					ТекущиеДействия.Вставить(СтрокаТаблицы.Ссылка, "Удален");
				Иначе
					ТекущиеДействия.Удалить(СтрокаТаблицы.Ссылка);
				КонецЕсли;
				
				СтрокаТаблицы.НомерКомплекта = 0;
				СтрокаТаблицы.ТипКомплекта = "";
			Иначе
				СтрокаТаблицы.ТипКомплекта = ДанныеКомплекта.ТипКомплекта;
			КонецЕсли;
		КонецЦикла;
		
		НастроитьПанельИОшибкиКомплекта(НомерКомплекта);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
