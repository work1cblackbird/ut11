#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПытатьсяПодключитьсяПриПроверке = Ложь;
	ПодключеноКСервисуРаспознавания = РаспознаваниеДокументов.ПодключеноКСервисуРаспознавания(ПытатьсяПодключитьсяПриПроверке);
	АккаунтАктивирован = РаспознаваниеДокументов.АккаунтАктивирован();
	ТекущиеНастройки = РегистрыСведений.ОбщиеНастройкиРаспознаваниеДокументов.ТекущиеНастройки();
	
	АдресЭлПочты = ТекущиеНастройки.АдресЭлПочты;
	
	ЗагрузитьСправку();
	
	// Загрузка файлов при переотправке
	Если ТипЗнч(Параметры.ФайлыДокумента) = Тип("Массив") Тогда
		Для Каждого ФайлДокумента Из Параметры.ФайлыДокумента Цикл
			ФайлИнфо = Новый Файл(ФайлДокумента.Имя);
			Расширение = ФайлИнфо.Расширение;
			
			НовыйФайл = Файлы.ПолучитьЭлементы().Добавить();
			НовыйФайл.Наименование = ФайлДокумента.Имя;
			НовыйФайл.Адрес = ФайлДокумента.Хранение;
			НовыйФайл.ИдентификаторФайла = Новый УникальныйИдентификатор;
			НовыйФайл.Расширение = Расширение;
			НовыйФайл.ИндексКартинки = РаботаСФайламиСлужебныйКлиентСервер.ИндексПиктограммыФайла(Расширение);
		КонецЦикла;
	КонецЕсли;
	
	// ПерсонализированныеПредложения
	Элементы.БаннерПриПодборе.Видимость = Ложь;
	Элементы.БаннерПриОжиданииОтправки.Видимость = Ложь;
	// Конец ПерсонализированныеПредложения
	
	ЗакрыватьАвтоматически = Истина;
	Элементы.ОжиданиеОтправкиЗагрузкаЗавершена.Видимость = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПерерисоватьПоСостоянию();
	ПодключитьОбработчикОжидания("ЗагрузитьПревью", 0.2, Истина);
	
	Если Не ПодключеноКСервисуРаспознавания Тогда
		ВыполнитьАвторизацию();
	КонецЕсли;
	
	// ПерсонализированныеПредложения
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьБаннер", 0.1, Истина);
	// Конец ПерсонализированныеПредложения

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	// ПерсонализированныеПредложения
	СвернутьБаннер = Элементы.БаннерПриПодборе.Скрыта();
	// Конец ПерсонализированныеПредложения
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если ФокусНаСправку Тогда
		Элементы.Помощник.ТекущаяСтраница = Элементы.СправкаHTML;
	Иначе
		Элементы.Помощник.ТекущаяСтраница = Элементы.Предпросмотр;
	КонецЕсли;
	
	// ПерсонализированныеПредложения
	Если СвернутьБаннер Тогда
		Элементы.БаннерПриПодборе.Скрыть();
	КонецЕсли;
	// Конец ПерсонализированныеПредложения
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура АдресЭлПочтыИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	Ошибка = Не ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(Текст);
	Элементы.ТекстНеверныйАдресЭлПочты.Видимость = Ошибка;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложениеПеретащитьИзображениеНажатие(Элемент)
	
	ВыполнитьЗагрузкуФайловИнтерактивно();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложениеПеретащитьИзображениеПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложениеПеретащитьИзображениеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДобавитьФайлВСписок(ПараметрыПеретаскивания.Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПомощникПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ФокусНаСправку = (Элементы.Помощник.ТекущаяСтраница = Элементы.СправкаHTML);
	ЗагрузитьПревью();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФайлы

&НаКлиенте
Процедура ФайлыПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ЗагрузитьПревью", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	Если Не ВыполняетсяЗагрузка Тогда
		ВыполнитьЗагрузкуФайловИнтерактивно();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередУдалением(Элемент, Отказ)
	
	Если ВыполняетсяЗагрузка Тогда
		Отказ = Истина;
	Иначе
		УдалитьИзВременногоХранилищаФайлы(Элемент.ВыделенныеСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПослеУдаления(Элемент)
	
	ПерерисоватьПоСостоянию();
	ЗагрузитьПревью();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	Если ВыполняетсяЗагрузка Тогда 
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
	Иначе 
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	Если Не ВыполняетсяЗагрузка Тогда
		ДобавитьФайлВСписок(ПараметрыПеретаскивания.Значение);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Авторизация(Команда)
	
	ВыполнитьАвторизацию();
	
КонецПроцедуры

&НаКлиенте
Процедура Распознать(Команда)
	
	Элементы.ШагиОтправки.ТекущаяСтраница = Элементы.ОжиданиеОтправки;
	ТекстОписанияОтправки = НСтр("ru = 'Подготовка файлов к передаче...'");
	ВыполнитьОтправкуФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьАдресЭлПочты(Команда)
	
	Ошибка = Не ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(АдресЭлПочты);
	Если Ошибка Тогда
		Возврат;
	КонецЕсли;
		
	Попытка
		СохранитьАдресЭлПочтыНаСервере();
		
		ПараметрыВопроса = РаспознаваниеДокументовСлужебныйКлиент.ПараметрыВопросаПользователю();
		ПараметрыВопроса.ПредлагатьБольшеНеЗадаватьЭтотВопрос = Ложь;
		ПараметрыВопроса.Картинка = БиблиотекаКартинок.УспешнаяОтправкаБРД;
		ПараметрыВопроса.Заголовок = НСтр("ru = 'Подписка оформлена'");
		
		РаспознаваниеДокументовСлужебныйКлиент.ПоказатьВопросПользователю(
			,
			НСтр("ru = 'Адрес электронной почты подписан на уведомления'"),
			РежимДиалогаВопрос.ОК,
			ПараметрыВопроса
		);
	Исключение
		ПоказатьИнформациюОбОшибке(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКОбработкеДокументов(Команда)
	
	Закрыть(Файлы.ПолучитьЭлементы().Количество());
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КомандыДействий

&НаКлиенте
Процедура ВыполнитьАвторизацию()
	
	Обработчик = Новый ОписаниеОповещения("ПослеПроверкиПодключенияКСервисуРаспознавания", ЭтотОбъект);
	РаспознаваниеДокументовКлиент.ПоказатьАвторизациюИТС(Обработчик, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерерисоватьПоСостоянию()
	
	Если Не ПодключеноКСервисуРаспознавания Тогда
		Элементы.ШагиОтправки.ТекущаяСтраница = Элементы.ПроверкаАвторизации;
		Возврат;
	КонецЕсли;
	
	Если Не АккаунтАктивирован Тогда
		Элементы.ШагиОтправки.ТекущаяСтраница = Элементы.ОжиданиеАктивации;
		Возврат;
	КонецЕсли;
	
	Элементы.ШагиОтправки.ТекущаяСтраница = Элементы.ПодборФайлов;
	
	ЕстьЗагруженныеФайлы = (Файлы.ПолучитьЭлементы().Количество() > 0);
	
	Если ВыполняетсяЗагрузка Или ЕстьЗагруженныеФайлы Тогда
		Элементы.ВыборФайлов.ТекущаяСтраница = Элементы.Список;
	Иначе
		Элементы.ВыборФайлов.ТекущаяСтраница = Элементы.ПредложениеПеретащить;
	КонецЕсли;
	
	Элементы.СостояниеЗагрузки.Видимость = ВыполняетсяЗагрузка;
	Элементы.ФормаРаспознать.Доступность = Не ВыполняетсяЗагрузка И ЕстьЗагруженныеФайлы;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПревью()
	
	Изображение = Неопределено;
	
	Если Не ФокусНаСправку Тогда
		Элементы.ПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ПредпросмотрИзображение;
		
		ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			ТекстНевыбраннойКартинки = НСтр("ru = 'Выберите файл для предварительного просмотра'");
		ИначеЕсли ПустаяСтрока(ТекущиеДанные.Адрес) Тогда 
			ТекстНевыбраннойКартинки = НСтр("ru = 'Файл в процессе загрузки. Пожалуйста подождите...'");
		ИначеЕсли ЭтоРасширениеИзображения(ТекущиеДанные.Расширение) Тогда 
			Изображение = ТекущиеДанные.Адрес;
		Иначе
			ТекстНевыбраннойКартинки = НСтр("ru = 'Предварительный просмотр файлов данного типа не поддерживается'");
		КонецЕсли;
		
		Элементы.Изображение.ТекстНевыбраннойКартинки = ТекстНевыбраннойКартинки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлВСписок(СсылкиНаФайлы)
	
	Если ТипЗнч(СсылкиНаФайлы) = Тип("СсылкаНаФайл") Тогда
		СсылкиНаФайлы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СсылкиНаФайлы);
	КонецЕсли;
	
	Для Каждого СсылкаНаФайл Из СсылкиНаФайлы Цикл
		ДобавитьФайл(СсылкаНаФайл.Имя, СсылкаНаФайл.ИдентификаторФайла, СсылкаНаФайл.Расширение);
	КонецЦикла;
	
	ВыполнитьЗагрузкуФайлов(СсылкиНаФайлы);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьИзВременногоХранилищаФайлы(Знач ВыделенныеСтроки)
	
	Для Каждого Идентификатор Из ВыделенныеСтроки Цикл 
		
		Файл = Файлы.НайтиПоИдентификатору(Идентификатор);
		
		Если ЭтоАдресВременногоХранилища(Файл.Адрес) Тогда
			УдалитьИзВременногоХранилища(Файл.Адрес);
		КонецЕсли;
		
		Файл.Адрес = Неопределено;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеФайлов(ПомещенныеФайлы)
	
	Для Каждого ПомещенныйФайл Из ПомещенныеФайлы Цикл
		
		Файл = НайтиФайлПоИдентификатору(ПомещенныйФайл.СсылкаНаФайл.ИдентификаторФайла);
		
		Если Файл = Неопределено Тогда
			Файл = ДобавитьФайл(
				ПомещенныйФайл.СсылкаНаФайл.Имя,
				ПомещенныйФайл.СсылкаНаФайл.ИдентификаторФайла,
				ПомещенныйФайл.СсылкаНаФайл.Расширение
			);
		КонецЕсли;
		
		Файл.Адрес = ПомещенныйФайл.Адрес;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуФайловИнтерактивно()
	
	ПараметрыДиалога = Новый ПараметрыДиалогаПомещенияФайлов(НСтр("ru = 'Выберите файлы для распознавания'"));
	ВыполнитьЗагрузкуФайлов(ПараметрыДиалога);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуФайлов(СсылкиНаФайлыИлиПараметрыДиалога)
	
	НачатьПомещениеФайловНаСервер(
		Новый ОписаниеОповещения("ПриЗавершенииПомещенияФайлов", ЭтотОбъект),
		Новый ОписаниеОповещения("ПриВыполненииПомещенияФайлов", ЭтотОбъект),
		Новый ОписаниеОповещения("ПередНачаломПомещенияФайлов", ЭтотОбъект),
		СсылкиНаФайлыИлиПараметрыДиалога,
		УникальныйИдентификатор
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОтправкуФайлов()
	
	ФоновоеЗадание = ЗапуститьФоновуюОтправкуФайлов();
	
	ОбработчикПрогресса = Новый ОписаниеОповещения("ПриПрогрессеОтправкиФайлов", ЭтотОбъект);
	
	НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
	НастройкиОжидания.ОповещениеОПрогрессеВыполнения = ОбработчикПрогресса;
	
	Обработчик = Новый ОписаниеОповещения("ПослеОтправкиФайлов", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, Обработчик, НастройкиОжидания);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСправку()
	
	Вложения = Неопределено;
	
	Элементы.Справка.Видимость = Ложь;
	
	ФорматированныйДокумент = Новый ФорматированныйДокумент;
	ФорматированныйДокумент.УстановитьФорматированнуюСтроку(Элементы.ТекстСправка.Заголовок);
	
	ФорматированныйДокумент.ПолучитьHTML(ТекстСправкаHTML, Вложения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеОбработчикиСобытий

&НаКлиенте
Процедура ПослеПроверкиПодключенияКСервисуРаспознавания(Результат, Контекст) Экспорт
	
	Если Результат Тогда 
		ПодключеноКСервисуРаспознавания = РаспознаваниеДокументовСлужебныйВызовСервера.ПодключеноКСервисуРаспознавания();
		ПерерисоватьПоСостоянию();
		Оповестить("РаспознанныйДокумент_ОбновитьПредставлениеБаланса");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередНачаломПомещенияФайлов(ПомещаемыеФайлы, ОтказОтПомещенияВсехФайлов, Контекст) Экспорт
	
	ВыполняетсяЗагрузка = Истина;
	ПерерисоватьПоСостоянию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВыполненииПомещенияФайлов(ПомещаемыйФайл, Помещено, ОтказОтПомещенияФайла, ПомещеноВсего, ОтказОтПомещенияВсехФайлов, Контекст) Экспорт
	
	Если Не ЭтотОбъект.Открыта() Тогда
		ОтказОтПомещенияВсехФайлов = Истина;
	КонецЕсли;
	
	ПрогрессЗагрузки = ПомещеноВсего;
	ТекстСообщенияЗагрузки = СтрШаблон(
		НСтр("ru = 'Загрузка %1 (%2)'"),
		ПомещаемыйФайл.Имя,
		Формат(Помещено, "ЧФ='Ч %'")
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗавершенииПомещенияФайлов(ПомещенныеФайлы, Контекст) Экспорт
	
	ВыполняетсяЗагрузка = Ложь;
	
	Если Не ЗначениеЗаполнено(ПомещенныеФайлы) Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьСостояниеФайлов(ПомещенныеФайлы);
	
	ПодключитьОбработчикОжидания("ПерерисоватьПоСостоянию", 0.2, Истина);
	ПодключитьОбработчикОжидания("ЗагрузитьПревью", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПрогрессеОтправкиФайлов(Результат, Контекст) Экспорт
	
	Если Результат.Статус = "Выполняется" Тогда
		Прогресс = ПрочитатьПрогресс(Результат.ИдентификаторЗадания);
		Если Прогресс <> Неопределено Тогда
			ТекстОписанияОтправки = Прогресс.Текст;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтправкиФайлов(Задание, Контекст) Экспорт
	
	Если Задание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Задание.Статус = "Выполнено" Тогда
		
		Если ЗакрыватьАвтоматически Тогда
			Закрыть(Файлы.ПолучитьЭлементы().Количество());
		Иначе
			Элементы.ОжиданиеОтправкиПрогресс.Видимость = Ложь;
			Элементы.ОжиданиеОтправкиЗагрузкаЗавершена.Видимость = Истина;
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(, Задание.КраткоеПредставлениеОшибки);
		Элементы.ШагиОтправки.ТекущаяСтраница = Элементы.ПодборФайлов;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область БизнесЛогика

&НаСервере
Функция ЗапуститьФоновуюОтправкуФайлов()
	
	ОтправляемыеФайлы = Новый Массив;
	Для Каждого Файл Из Файлы.ПолучитьЭлементы() Цикл 
		
		ОписаниеФайла = Новый Структура;
		ОписаниеФайла.Вставить("ИмяФайла", Файл.Наименование);
		ОписаниеФайла.Вставить("ДатаИзменения");
		ОписаниеФайла.Вставить("Каталог");
		ОписаниеФайла.Вставить("ДвоичныеДанные", ПолучитьИзВременногоХранилища(Файл.Адрес));
		
		ОтправляемыеФайлы.Добавить(ОписаниеФайла);
	КонецЦикла;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Отправка файлов в сервиса распознавания документов'");
	
	ФоновоеЗадание = ДлительныеОперации.ВыполнитьПроцедуру(
		ПараметрыВыполнения,
		"Обработки.РаспознаваниеДокументов.ОтправитьФайлыНаРаспознавание",
		ОтправляемыеФайлы
	);
	
	Возврат ФоновоеЗадание;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПрочитатьПрогресс(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ПрочитатьПрогресс(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Функция ДобавитьФайл(Имя, ИдентификаторФайла, Расширение)
	
	НовыйФайл = Файлы.ПолучитьЭлементы().Добавить();
	НовыйФайл.Наименование = Имя;
	НовыйФайл.ИдентификаторФайла = ИдентификаторФайла;
	НовыйФайл.Расширение = Расширение;
	НовыйФайл.ИндексКартинки = РаботаСФайламиСлужебныйКлиентСервер.ИндексПиктограммыФайла(Расширение);
	
	Возврат НовыйФайл;
	
КонецФункции

&НаКлиенте
Функция НайтиФайлПоИдентификатору(ИдентификаторФайла)
	
	Для Каждого Файл Из Файлы.ПолучитьЭлементы() Цикл
		
		Если Файл.ИдентификаторФайла = ИдентификаторФайла Тогда
			Возврат Файл;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоРасширениеИзображения(Знач РасширениеФайла)
	
	Возврат СтрНайти(
		".jpg;.jpeg;.jp2;.jpe;.bmp;.dib;.tif;.tiff;.gif;.gif;.png;",
		НормализоватьРасширениеФайла(РасширениеФайла)
	) <> 0;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НормализоватьРасширениеФайла(Знач РасширениеФайла)
	
	Если ТипЗнч(РасширениеФайла) <> Тип("Строка")
		Или ПустаяСтрока(РасширениеФайла) Тогда
		Возврат 0;
	КонецЕсли;
	
	РасширениеФайла = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(РасширениеФайла);
	
	Возврат "." + НРег(РасширениеФайла) + ";";
	
КонецФункции

&НаСервере
Процедура СохранитьАдресЭлПочтыНаСервере()
	
	РаспознаваниеДокументовSDK.УстановитьАдресЭлектроннойПочты(АдресЭлПочты);
	
	МенеджерЗаписи = РегистрыСведений.ОбщиеНастройкиРаспознаваниеДокументов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Прочитать();
	МенеджерЗаписи.АдресЭлПочты = АдресЭлПочты;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область ПерсонализированныеПредложения

&НаКлиенте
Процедура Подключаемый_УстановитьБаннер()
	
	УстановитьБаннер();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьБаннер()
	
	ДлительнаяОперация = НачатьПолучениеБаннера();
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
		
		Обработчик = Новый ОписаниеОповещения("ПослеПолученияБаннера", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НачатьПолучениеБаннера()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение баннера в фоне'");
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(
		ПараметрыВыполнения,
		"РаспознаваниеДокументовПерсонализированныеПредложения.ПолучитьСтраницуПриЗагрузкеФайла"
	);
	
КонецФункции

&НаКлиенте
Процедура ПослеПолученияБаннера(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		УстановитьБаннерНаФорме(ДлительнаяОперация.АдресРезультата);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьБаннерНаФорме(АдресРезультата)
	
	ПриЗагрузкеФайла = ПолучитьИзВременногоХранилища(АдресРезультата);
	Если ПриЗагрузкеФайла.ПоведениеСтраницы = "НеПоказывать" Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.БаннерПриПодборе.Видимость = Истина;
	Элементы.БаннерПриПодборе.Заголовок = ПриЗагрузкеФайла.Страница.Заголовок;
	
	Элементы.БаннерПриОжиданииОтправки.Видимость = Истина;
	Элементы.БаннерПриОжиданииОтправки.Заголовок = ПриЗагрузкеФайла.Страница.Заголовок;
	
	СодержимоеHTML = ПриЗагрузкеФайла.Страница.СтраницаHTML;
	
	ЗакрыватьАвтоматически = (ПриЗагрузкеФайла.ПоведениеСтраницы <> "ПоказатьДоЗакрытия");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти