#Область ОписаниеПеременных

&НаКлиенте
Перем СоответствиеШтрихкодовСтрокДерева Экспорт;

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьНачальныеПараметрыПриСоздании();
	Если Параметры.Штрихкоды <> Неопределено Тогда
		СтандартныеПодсистемыСервер.СброситьРазмерыИПоложениеОкна(ЭтотОбъект);
	КонецЕсли;
	
	ПоддерживаемыеТипыПодключаемогоОборудования = "СканерШтрихкода";
	ИнтеграцияИС.НастроитьПодключаемоеОборудование(ЭтотОбъект, ПоддерживаемыеТипыПодключаемогоОборудования, "Форма");
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СоответствиеШтрихкодовСтрокДерева = Новый Соответствие();
	
	Если ЗначениеЗаполнено(ОрганизацияПриОткрытии) Тогда
		Организация = ОрганизацияПриОткрытии;
	Иначе 
		Организация = ОрганизацияДляСохранения;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из ДеревоКодовМаркировки.ПолучитьЭлементы() Цикл
		СоответствиеШтрихкодовСтрокДерева.Вставить(СтрокаДерева.Штрихкод, СтрокаДерева.ПолучитьИдентификатор());
	КонецЦикла;
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, ПоддерживаемыеТипыПодключаемогоОборудования);
	// Конец ПодключаемоеОборудование
	
	ЭтоНезависимоеОкно = (РежимОткрытияОкна = РежимОткрытияОкнаФормы.Независимый);
	НастроитьЭлементыФормыНаСервере(ЭтотОбъект);
	ОбновитьДанныеПоСтрокамКоллекции(ДеревоКодовМаркировки.ПолучитьЭлементы());
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)

	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	
	Активизировать();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПерейтиВЛичныйКабинет" Тогда
		СтандартнаяОбработка = Ложь;
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПерейтиВЛичныйКабинетТест" Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИнтеграцияИСКлиент.ЭтоЗагрузкаКодовМаркировки(ИсточникВыбора, ЭтотОбъект) Тогда
		//Формат загрузки из внешнего файла полностью соответствует формату загрузки из ТСД
		Подключаемый_ПолученыДанныеИзТСД(ВыбранноеЗначение, Неопределено);
	КонецЕсли;
	
	СобытияФормИСМПКлиентПереопределяемый.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ИсточникВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ОбщегоНазначенияСобытияФормИСКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
	Если ИмяСобытия = "ИзменилсяОстатокВскрытойПотребительскойУпаковки"
		И Элементы.ДеревоКодовМаркировки.ТекущаяСтрока <> Неопределено Тогда
		
		ТекущиеДанныеСтроки = ДеревоКодовМаркировки.НайтиПоИдентификатору(Элементы.ДеревоКодовМаркировки.ТекущаяСтрока);
		Если ТекущиеДанныеСтроки.ШтрихкодУпаковки = Параметр.ШтрихкодУпаковки Тогда
			ТекущиеДанныеСтроки.ЧастичноеВыбытиеОстаток = Параметр.Остаток;
			УстановитьПоляПредставленияСтроки(ЭтотОбъект, ТекущиеДанныеСтроки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузкаДанныхТСД = Неопределено;
	СобытияФормИСКлиент.ВнешнееСобытиеПолученыШтрихкоды(
		"ПоискПоШтрихкодуЗавершение",
		ЭтотОбъект, Источник, Событие,
		Данные, ПараметрыСканированияКодовМаркировки());
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияШтрихкодУпаковкиРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "МестаИспользования" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если Не ЗначениеЗаполнено(ПолноеИмяФормыОтчетаМестаИспользования) Тогда
			Возврат;
		КонецЕсли;
		
		ТекущиеДанные = ДеревоКодовМаркировки.НайтиПоИдентификатору(Элементы.ДеревоКодовМаркировки.ТекущаяСтрока);
		МассивСсылок = Новый Массив();
		МассивСсылок.Добавить(ТекущиеДанные.ШтрихкодУпаковки);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Новый Структура);
		ПараметрыФормы.Отбор.Вставить("НаборСсылок", МассивСсылок);
		
		ОткрытьФорму(
			ПолноеИмяФормыОтчетаМестаИспользования,
			ПараметрыФормы,
			ЭтотОбъект,
			ТекущиеДанные.ШтрихкодУпаковки,,,,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВходитВУпаковкуРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "РодительскаяУпаковка" Тогда
		
		СтандартнаяОбработка = Ложь;
		Если Элементы.ДеревоКодовМаркировки.ТекущаяСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущиеДанные = ДеревоКодовМаркировки.НайтиПоИдентификатору(Элементы.ДеревоКодовМаркировки.ТекущаяСтрока);
		
		Если Не ЗначениеЗаполнено(ТекущиеДанные.РодительскаяУпаковка) Тогда
			Возврат;
		КонецЕсли;
		
		МассивШтрихкодов = Новый Массив();
		НовыйЭлемент = Новый Структура("Штрихкод, Количество", ТекущиеДанные.РодительскаяУпаковка, 1);
		МассивШтрихкодов.Добавить(НовыйЭлемент);
		Подключаемый_ПолученыДанныеИзТСД(МассивШтрихкодов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ОрганизацияПриОткрытии) Тогда
		ОрганизацияДляСохранения = Организация;
	КонецЕсли;
	
	НастроитьЭлементыФормыНаСервере(ЭтотОбъект);
	ОбновитьДанныеПоСтрокамКоллекции(ДеревоКодовМаркировки.ПолучитьЭлементы());
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЛогЗапросовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(НавигационнаяСсылкаФорматированнойСтроки) Тогда
		Возврат;
	КонецЕсли;
	
	ЛогированиеЗапросовИСКлиент.ОткрытьПросмотрЛогаЗапросов(УникальныйИдентификатор, "ИСМП", НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияШтрихкодУпаковкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКодМаркировкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если РежимРаботыОдинКод Тогда
		ЭлементыДерева = ДеревоКодовМаркировки.ПолучитьЭлементы();
		Если ЭлементыДерева.Количество() = 1 Тогда
			Штрихкод = ЭлементыДерева[0].Штрихкод;
		КонецЕсли;
	КонецЕсли;
	ИнтеграцияИСКлиент.СкопироватьШтрихКодВБуферОбмена(Элементы.БуферОбмена, Штрихкод);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКоэффициентРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ИзменитьПлановоеКоличествоПотребительскихУпаковокПоGTIN" Тогда
		
		ТекущаяСтрока = Элементы.ДеревоКодовМаркировки.ТекущаяСтрока;
		Если ТекущаяСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ТекущиеДанные = ДеревоКодовМаркировки.НайтиПоИдентификатору(ТекущаяСтрока);
		
		ПараметрыЗавершения = Новый Структура();
		ПараметрыЗавершения.Вставить("ИсходныйШтрихкод", ИсходныйШтрихкодПоТекущейСтроке(ТекущиеДанные));
		
		ВводКоэффициентаЗавершение = Новый ОписаниеОповещения(
			"ВводКоэффициентаЗавершение",
			ЭтотОбъект,
			ПараметрыЗавершения);
		
		ЭлементУточнения = Новый Структура();
		ЭлементУточнения.Вставить("GTIN",                              ТекущиеДанные.GTIN);
		ЭлементУточнения.Вставить("ВидУпаковки",                       ТекущиеДанные.ВидУпаковки);
		ЭлементУточнения.Вставить("ВидПродукции",                      ТекущиеДанные.ВидПродукции);
		ЭлементУточнения.Вставить("КоличествоПотребительскихУпаковок", ТекущиеДанные.КоличествоПотребительскихУпаковок);
		
		ЭлементУточнения.Вставить("Номенклатура",   ТекущиеДанные.Номенклатура);
		ЭлементУточнения.Вставить("Характеристика", ТекущиеДанные.Характеристика);
		ЭлементУточнения.Вставить("Серия",          ТекущиеДанные.Серия);
		ЭлементУточнения.Вставить("Упаковка",       ТекущиеДанные.Упаковка);
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ПредставлениеУпаковки) Тогда
			ЭлементУточнения.Вставить("ПредставлениеСодержимоеУпаковки", ТекущиеДанные.ПредставлениеУпаковки);
		Иначе
			ЭлементУточнения.Вставить("ПредставлениеСодержимоеУпаковки", ТекущиеДанные.ПредставлениеНоменклатуры);
		КонецЕсли;
		
		ДанныеУточнения = Новый Массив;
		ДанныеУточнения.Добавить(ЭлементУточнения);
		
		ПараметрыОткрытия = ИнтеграцияИСМПКлиент.ПараметрыОткрытияФормыУточненияУпаковокПоGTIN();
		ПараметрыОткрытия.АдресУточнениеКоэффициентовУпаковок = ПоместитьВоВременноеХранилище(ДанныеУточнения);
		ПараметрыОткрытия.ДоступноРедактированиеВидаУпаковки  = Истина;
		ПараметрыОткрытия.ЭтоНастройкаКарточкиНоменклатуры    = Истина;
		
		ИнтеграцияИСМПКлиент.ОткрытьФормуНастройкиВидовУпаковокПоGTIN(ПараметрыОткрытия, ЭтотОбъект, ВводКоэффициентаЗавершение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЧастичноеВыбытиеРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(НавигационнаяСсылкаФорматированнойСтроки) Тогда
		Возврат;
	КонецЕсли;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ИзменитьОстатокВскрытойПотребительскойУпаковик" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекущиеДанные = ДеревоКодовМаркировки.НайтиПоИдентификатору(Элементы.ДеревоКодовМаркировки.ТекущаяСтрока);
		Если Не ЗначениеЗаполнено(ТекущиеДанные.ШтрихкодУпаковки) Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыОткрытия = ИнтеграцияИСКлиент.ПараметрыОткрытияФормыВскрытияПотребительскойУпаковки();
		ПараметрыОткрытия.ПараметрыСканирования = ПараметрыСканированияКодовМаркировки();
		ПараметрыОткрытия.ИмяПодсистемы         = "ИСМП";
		ПараметрыОткрытия.КодМаркировки         = ТекущиеДанные.ШтрихкодУпаковки;
		
		ИнтеграцияИСКлиент.ОткрытьФормуВскрытияПотребительскойУпаковки(ПараметрыОткрытия, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоКодовМаркировки

&НаКлиенте
Процедура ДеревоКодовМаркировкиПослеУдаления(Элемент)
	
	ТоварыПослеУдаленияСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКодовМаркировкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКодовМаркировкиПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	УдаляемыеЭлементы = Новый Массив();
	
	Для Каждого ИдентификаторСтроки Из Элемент.ВыделенныеСтроки Цикл
		
		УдаляемыйЭлемент = НайтиПоИдентификатору(ДеревоКодовМаркировки, ИдентификаторСтроки);
		РодительУдаляемогоЭлемента = УдаляемыйЭлемент.ПолучитьРодителя();
		Если РодительУдаляемогоЭлемента <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СоответствиеШтрихкодовСтрокДерева.Удалить(УдаляемыйЭлемент.Штрихкод);
		
		УдаляемыеЭлементы.Добавить(УдаляемыйЭлемент);
		
	КонецЦикла;
	
	ЭлементыДерева = ДеревоКодовМаркировки.ПолучитьЭлементы();
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		ЭлементыДерева.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКодовМаркировкиПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанныеСтроки = Неопределено;
	Если Элементы.ДеревоКодовМаркировки.ТекущаяСтрока <> Неопределено Тогда
		ТекущиеДанныеСтроки = ДеревоКодовМаркировки.НайтиПоИдентификатору(Элементы.ДеревоКодовМаркировки.ТекущаяСтрока);
	КонецЕсли;
	
	УстановитьПоляПредставленияСтроки(ЭтотОбъект, ТекущиеДанныеСтроки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ОчиститьСообщения();
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ШтрихкодированиеИСКлиент.ПоказатьВводШтрихкода(
		Новый ОписаниеОповещения("РучнойВводШтрихкодаЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзВнешнегоФайла(Команда)
	
	ОчиститьСообщения();
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияИСКлиент.ОткрытьФормуЗагрузкиКодовМаркировки(
		ЭтотОбъект,
		Ложь,
		ИнтеграцияИСМПКлиент.ЗаголовокФормыЗагрузкиКодовМаркировки(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ОчиститьСообщения();
	
	МенеджерОборудованияИСКлиент.НачатьЗагрузкуДанныеИзТСД(
		Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПоКоду(Команда)
	
	Если РежимРаботыОдинКод Тогда
		Коллекция = ДеревоКодовМаркировки.ПолучитьЭлементы();
	Иначе
		Коллекция = Новый Массив();
		Для Каждого Элемент Из Элементы.ДеревоКодовМаркировки.ВыделенныеСтроки Цикл
			Коллекция.Добавить(ДеревоКодовМаркировки.НайтиПоИдентификатору(Элемент));
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьДанныеПоСтрокамКоллекции(Коллекция);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВводКоэффициентаЗавершение(Коэффициент, ПараметрыЗавершения) Экспорт
	
	Если Коэффициент <> "УточненыКоэффициентыУпаковокИСМП" Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗавершения.ИсходныйШтрихкод) Тогда
		
		ЭлементКоллекции = Новый Структура();
		ЭлементКоллекции.Вставить("Штрихкод",   ПараметрыЗавершения.ИсходныйШтрихкод);
		ЭлементКоллекции.Вставить("Количество", 1);
		Коллекция = Новый Массив();
		Коллекция.Добавить(ЭлементКоллекции);
		
		ОбновитьДанныеПоСтрокамКоллекции(Коллекция);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИзменитьОстатокВскрытойПотребительскойУпаковкиЗавершение(Результат, ТекущаяСтрокаДерева) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеСтроки = ДеревоКодовМаркировки.НайтиПоИдентификатору(Элементы.ДеревоКодовМаркировки.ТекущаяСтрока);
	ТекущиеДанныеСтроки.ЧастичноеВыбытиеОстаток = Результат;
	
	УстановитьПоляПредставленияСтроки(ЭтотОбъект, ТекущиеДанныеСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПослеУдаленияСервер()
	
	ШтрихкодированиеИС.ОбновитьКэшМаркируемойПродукции(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПоляПредставленияСтроки(Форма, ТекущиеДанные)
	
	Элементы = Форма.Элементы;
	Если ТекущиеДанные = Неопределено Тогда
		СтрокаДанных = Новый Соответствие();
	Иначе
		СтрокаДанных = ТекущиеДанные;
	КонецЕсли;
	
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(СтрокаДанных["АдресЛогаЗапросов"]) Тогда
		Элементы.ДекорацияЛогЗапросов.Заголовок = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Открыть лог запросов'"),
			,,,
			СтрокаДанных.АдресЛогаЗапросов);
	Иначе
		Элементы.ДекорацияЛогЗапросов.Заголовок = НСтр("ru = 'Запись лога отсутствует'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДанных["Статус"]) Тогда
		ЗначениеСтатус = СтрокаДанных["Статус"];
		Если ЗначениеЗаполнено(СтрокаДанных["ОсобоеСостояние"])
			И СтрокаДанных["ОсобоеСостояние"] <> ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.Неопределен")
			И СтрокаДанных["ОсобоеСостояние"] <> ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиМОТП.Неопределен") Тогда
			ЗначениеСтатус = СтрШаблон("%1 (%2)", ЗначениеСтатус, СтрокаДанных["ОсобоеСостояние"])
		КонецЕсли;
	КонецЕсли;
	ЭтоТабак               = (СтрокаДанных["ВидПродукции"] = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак"));
	ЭтоАльтернативныйТабак = (СтрокаДанных["ВидПродукции"] = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АльтернативныйТабак"));
	ЭтоНСП                 = (СтрокаДанных["ВидПродукции"] = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.НикотиносодержащаяПродукция"));
	ЭтоУпакованнаяВода     = (СтрокаДанных["ВидПродукции"] = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.УпакованнаяВода"));
	ЭтоМолочнаяПродукция   = ОбщегоНазначенияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(СтрокаДанных["ВидПродукции"]);
	ЭтоДухи                = (СтрокаДанных["ВидПродукции"] = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Духи"));
	ЭтоПиво                = СтрокаДанных["ВидПродукции"] = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво")
		Или СтрокаДанных["ВидПродукции"] = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПивоВПотребительскихУпаковках");
	ЭтоМорепродукты        = (СтрокаДанных["ВидПродукции"] = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МорепродуктыПодконтрольныеВЕТИС"));
	ЭтоБАД                 = (СтрокаДанных["ВидПродукции"] = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БАДы"));
	ЭтоКреслаКоляски       = СтрокаДанных["ВидПродукции"] = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КреслаКоляски")
		Или СтрокаДанных["ВидПродукции"] = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТехническиеСредстваРеабилитации")
		Или СтрокаДанных["ВидПродукции"] = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МедицинскиеИзделия");
	Если СтрокаДанных["ТребуетВзвешивания"] = Неопределено Тогда
		ЭтоВесовойТовар  = Ложь;
	Иначе
		ЭтоВесовойТовар = СтрокаДанных["ТребуетВзвешивания"];
	КонецЕсли;
	ЭтоПродукцияСоСрокамиГодности   = ОбщегоНазначенияИСКлиентСервер.ЭтоВидПродукцииСоСрокамиГодности(СтрокаДанных["ВидПродукции"]);
	
	СкрыватьЭлементыПриОтсутствииДанных = Новый Соответствие();
	СкрыватьЭлементыПриОтсутствииДанных.Вставить(Элементы.ДекорацияМРЦ,               ЭтоТабак);
	СкрыватьЭлементыПриОтсутствииДанных.Вставить(Элементы.ДекорацияВСеройЗоне,        ЭтоТабак);
	СкрыватьЭлементыПриОтсутствииДанных.Вставить(Элементы.ДекорацияСодержитСерыеКоды, ЭтоТабак);
	СкрыватьЭлементыПриОтсутствииДанных.Вставить(Элементы.ДекорацияНанесен,
		ЭтоТабак Или ЭтоАльтернативныйТабак Или ЭтоНСП Или ЭтоУпакованнаяВода Или ЭтоМолочнаяПродукция Или ЭтоМорепродукты);
	СкрыватьЭлементыПриОтсутствииДанных.Вставить(Элементы.ДекорацияВведенВОборот,     Не (ЭтоТабак Или ЭтоАльтернативныйТабак Или ЭтоНСП));
	
	СкрыватьЭлементыПриОтсутствииДанных.Вставить(Элементы.ДекорацияКоэффициент,   (ЭтоТабак Или ЭтоАльтернативныйТабак Или ЭтоНСП));
	СкрыватьЭлементыПриОтсутствииДанных.Вставить(Элементы.ДекорацияГоденДо,       ЭтоПродукцияСоСрокамиГодности);
	СкрыватьЭлементыПриОтсутствииДанных.Вставить(Элементы.ДекорацияПроизводитель, (ЭтоТабак Или ЭтоАльтернативныйТабак Или ЭтоНСП));
	СкрыватьЭлементыПриОтсутствииДанных.Вставить(Элементы.ДекорацияМерноеКоличество, ЭтоВесовойТовар И ЗначениеЗаполнено(СтрокаДанных["ШтрихкодУпаковки"]));
	СкрыватьЭлементыПриОтсутствииДанных.Вставить(Элементы.ДекорацияМерноеКоличество, ЭтоВесовойТовар И ЗначениеЗаполнено(СтрокаДанных["ШтрихкодУпаковки"]));
	СкрыватьЭлементыПриОтсутствииДанных.Вставить(
		Элементы.ДекорацияПоследнийДокумент,
		ЗначениеЗаполнено(СтрокаДанных["ПредставлениеПоследнегоДокумента"]));
	СкрыватьЭлементыПриОтсутствииДанных.Вставить(
		Элементы.ДекорацияАгент,
		ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияИСМП(СтрокаДанных["ВидПродукции"]));
	СкрыватьЭлементыПриОтсутствииДанных.Вставить(
		Элементы.ДекорацияЧастичноеВыбытие,
		(ОбщегоНазначенияИСКлиентСерверПовтИсп.ПоддерживаетсяЧастичноеВыбытие(СтрокаДанных["ВидПродукции"])
			И (СтрокаДанных["ЧастичноеВыбытиеОстаток"] <> Неопределено Или СтрокаДанных["ЧастичноеВыбытиеОстатокГИСМТ"] <> Неопределено)));
	
	Если ЭтоТабак Или ЭтоАльтернативныйТабак Или ЭтоНСП Или ЭтоМолочнаяПродукция Или ЭтоУпакованнаяВода Или ЭтоМорепродукты Тогда
		ЗначениеПодсказкиНанесен = Формат(СтрокаДанных["ДатаПроизводства"], "ДФ=dd.MM.yyyy;");
	Иначе
		ЗначениеПодсказкиНанесен = "";
	КонецЕсли;
	Если ЭтоТабак Тогда
		ЗначениеПодсказкиВСеройЗоне        = Формат(СтрокаДанных["ВСеройЗоне"],        "БЛ=; БИ=Да;");
		ЗначениеПодсказкиСодержитСерыеКоды = Формат(СтрокаДанных["СодержитСерыеКоды"], "БЛ=; БИ=Да;");
	Иначе
		ЗначениеПодсказкиВСеройЗоне        = "";
		ЗначениеПодсказкиСодержитСерыеКоды = "";
	КонецЕсли;
	
	ДанныеПодсказки = Новый Соответствие();
	ДанныеПодсказки.Вставить(Элементы.ДекорацияВведенВОборот,      Формат(СтрокаДанных["ДатаВводаВОборот"],    "ДФ=dd.MM.yyyy;"));
	ДанныеПодсказки.Вставить(Элементы.ДекорацияВыведенИзОборота,   Формат(СтрокаДанных["ДатаСписания"],        "ДФ=dd.MM.yyyy;"));
	ДанныеПодсказки.Вставить(Элементы.ДекорацияДатаЭмиссии,        Формат(СтрокаДанных["ДатаЭмиссии"],         "ДФ='dd.MM.yyyy HH:mm:ss';"));
	ДанныеПодсказки.Вставить(Элементы.ДекорацияСпособВводаВОборот, СтрокаДанных["СпособВводаВОборот"]);
	ДанныеПодсказки.Вставить(Элементы.ДекорацияНаименование,       СтрокаДанных["ПредставлениеНоменклатуры"]);
	ДанныеПодсказки.Вставить(Элементы.ДекорацияКодТовара,          СтрокаДанных["GTIN"]);
	ДанныеПодсказки.Вставить(Элементы.ДекорацияСерийныйНомер,      СтрокаДанных["СерийныйНомер"]);
	ДанныеПодсказки.Вставить(Элементы.ДекорацияВидУпаковки,        СтрокаДанных["ВидУпаковки"]);
	ДанныеПодсказки.Вставить(Элементы.ДекорацияМРЦ,                Формат(СтрокаДанных["МРЦ"], "ЧДЦ=2;"));
	ДанныеПодсказки.Вставить(Элементы.ДекорацияСостояние,          ЗначениеСтатус);
	ДанныеПодсказки.Вставить(Элементы.ДекорацияВСеройЗоне,         ЗначениеПодсказкиВСеройЗоне);
	ДанныеПодсказки.Вставить(Элементы.ДекорацияСодержитСерыеКоды,  ЗначениеПодсказкиСодержитСерыеКоды);
	ДанныеПодсказки.Вставить(Элементы.ДекорацияНанесен,            ЗначениеПодсказкиНанесен);
	
	Если ЗначениеЗаполнено(СтрокаДанных["ГоденДо"]) Тогда
		
		ЧастиПредставленияСрокаГодности = Новый Массив();
		ЧастиПредставленияСрокаГодности.Добавить(Формат(СтрокаДанных["ГоденДо"], "ДФ=dd.MM.yyyy;"));
		ДанныеПредставленияСрока = ИнтеграцияИСКлиентСервер.ДанныеПредставленияСрокаГодности(
			СтрокаДанных["ГоденДо"], Форма.ТекущаяДата);
		
		Если ДанныеПредставленияСрока.ОсталосьДней < 0 Тогда
			ЧастиПредставленияСрокаГодности.Добавить(" (");
			ЧастиПредставленияСрокаГодности.Добавить(
				Новый ФорматированнаяСтрока(ДанныеПредставленияСрока.Представление,, Форма.ЦветТребуетВнимания));
			ЧастиПредставленияСрокаГодности.Добавить(")");
		ИначеЕсли ДанныеПредставленияСрока.ОсталосьДней = 0 Тогда
			ЧастиПредставленияСрокаГодности.Добавить(" (");
			ЧастиПредставленияСрокаГодности.Добавить(
				Новый ФорматированнаяСтрока(ДанныеПредставленияСрока.Представление,, Форма.ЦветПроблема));
			ЧастиПредставленияСрокаГодности.Добавить(")");
		КонецЕсли;
		
		ДанныеПодсказки.Вставить(Элементы.ДекорацияГоденДо, Новый ФорматированнаяСтрока(ЧастиПредставленияСрокаГодности));
		
	Иначе
		
		ДанныеПодсказки.Вставить(Элементы.ДекорацияГоденДо, Неопределено);
		
	КонецЕсли;
	
	Если ЭтоВесовойТовар И ЗначениеЗаполнено(СтрокаДанных["ШтрихкодУпаковки"]) Тогда
		ДанныеПодсказки.Вставить(Элементы.ДекорацияМерноеКоличество, Формат(СтрокаДанных["Количество"], "ЧДЦ=3; ЧН=0.000;"));
	Иначе
		ДанныеПодсказки.Вставить(Элементы.ДекорацияМерноеКоличество, "");
	КонецЕсли;
	
	ДанныеРодительскойУпаковки = "-";
	Если ЗначениеЗаполнено(СтрокаДанных["РодительскаяУпаковка"]) Тогда
		ДанныеРодительскойУпаковки = Новый ФорматированнаяСтрока(
			СтрокаДанных["РодительскаяУпаковка"],,,,
			"РодительскаяУпаковка");
	КонецЕсли;
	ДанныеПодсказки.Вставить(Элементы.ДекорацияВходитВУпаковку, ДанныеРодительскойУпаковки);
	
	ЗначениеПодсказкиЧастичноеВыбытие = Неопределено;
	Если ОбщегоНазначенияИСКлиентСерверПовтИсп.ПоддерживаетсяЧастичноеВыбытие(СтрокаДанных["ВидПродукции"])
		И ЗначениеЗаполнено(СтрокаДанных["ЕмкостьПотребительскойУпаковки"])
		И (СтрокаДанных["ЧастичноеВыбытиеОстаток"] <> Неопределено
			Или СтрокаДанных["ЧастичноеВыбытиеОстатокГИСМТ"] <> Неопределено) Тогда
		
		ДанныеСтрокиЧастичногоВыбытия = Новый Массив();
		
		Если СтрокаДанных["ВидПродукции"] = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво")
			Или СтрокаДанных["ВидПродукции"] = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПивоВПотребительскихУпаковках") Тогда
			
			Если СтрокаДанных["ЧастичноеВыбытиеОстаток"] <> Неопределено Тогда
				ДанныеСтрокиЧастичногоВыбытия.Добавить(
					СтрШаблон(
						НСтр("ru = 'Остаток: %1 из %2 %3'"),
						СтрокаДанных["ЧастичноеВыбытиеОстаток"],
						СтрокаДанных["ЕмкостьПотребительскойУпаковки"],
						ОбщегоНазначенияИСКлиентСервер.ПредставлениеЕдиницыЧастичногоВыбытия(СтрокаДанных["ВидПродукции"])));
				ДанныеСтрокиЧастичногоВыбытия.Добавить(" ");
				ДанныеСтрокиЧастичногоВыбытия.Добавить(
					Новый ФорматированнаяСтрока(
						НСтр("ru = 'Изменить'"),,,,
						"ИзменитьОстатокВскрытойПотребительскойУпаковик"));
			КонецЕсли;
			Если СтрокаДанных["ЧастичноеВыбытиеОстатокГИСМТ"] <> Неопределено Тогда
				Если ДанныеСтрокиЧастичногоВыбытия.Количество() Тогда
					ДанныеСтрокиЧастичногоВыбытия.Добавить(Символы.ПС);
				КонецЕсли;
				ДанныеСтрокиЧастичногоВыбытия.Добавить(
					СтрШаблон(
						НСтр("ru = 'Остаток по данным ГИС МТ: %1 из %2 %3'"),
						СтрокаДанных["ЧастичноеВыбытиеОстатокГИСМТ"],
						СтрокаДанных["ЕмкостьПотребительскойУпаковки"],
						ОбщегоНазначенияИСКлиентСервер.ПредставлениеЕдиницыЧастичногоВыбытия(СтрокаДанных["ВидПродукции"])));
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаДанных["ЧастичноеВыбытиеОбъемСливаПредставление"]) Тогда
				Если ДанныеСтрокиЧастичногоВыбытия.Количество() Тогда
					ДанныеСтрокиЧастичногоВыбытия.Добавить(Символы.ПС);
				КонецЕсли;
				ДанныеСтрокиЧастичногоВыбытия.Добавить(СтрокаДанных["ЧастичноеВыбытиеОбъемСливаПредставление"]);
			КонецЕсли;
			Если СтрокаДанных["ЧастичноеВыбытиеОстатокСУчетомОбъемаСлива"] <> Неопределено Тогда
				Если ДанныеСтрокиЧастичногоВыбытия.Количество() Тогда
					ДанныеСтрокиЧастичногоВыбытия.Добавить(Символы.ПС);
				КонецЕсли;
				ДанныеСтрокиЧастичногоВыбытия.Добавить(
					СтрШаблон(
						НСтр("ru = 'Расчетный остаток: %1 %2'"),
						СтрокаДанных["ЧастичноеВыбытиеОстатокСУчетомОбъемаСлива"],
						ОбщегоНазначенияИСКлиентСервер.ПредставлениеЕдиницыЧастичногоВыбытия(СтрокаДанных["ВидПродукции"])));
			КонецЕсли;
			Если СтрокаДанных["ЧастичноеВыбытиеОстатокСУчетомОбъемаСливаГИСМТ"] <> Неопределено Тогда
				Если ДанныеСтрокиЧастичногоВыбытия.Количество() Тогда
					ДанныеСтрокиЧастичногоВыбытия.Добавить(Символы.ПС);
				КонецЕсли;
				ДанныеСтрокиЧастичногоВыбытия.Добавить(
					СтрШаблон(
						НСтр("ru = 'Расчетный остаток по данным ГИС МТ: %1 %2'"),
						СтрокаДанных["ЧастичноеВыбытиеОстатокСУчетомОбъемаСливаГИСМТ"],
						ОбщегоНазначенияИСКлиентСервер.ПредставлениеЕдиницыЧастичногоВыбытия(СтрокаДанных["ВидПродукции"])));
			КонецЕсли;
			
		Иначе
			
			Если СтрокаДанных["ЧастичноеВыбытиеОстаток"] <> Неопределено Тогда
				ДанныеСтрокиЧастичногоВыбытия.Добавить(
					СтрШаблон(
						НСтр("ru = 'Остаток: %1 из %2 %3'"),
						СтрокаДанных["ЧастичноеВыбытиеОстаток"],
						СтрокаДанных["ЕмкостьПотребительскойУпаковки"],
						ОбщегоНазначенияИСКлиентСервер.ПредставлениеЕдиницыЧастичногоВыбытия(СтрокаДанных["ВидПродукции"])));
				ДанныеСтрокиЧастичногоВыбытия.Добавить(" ");
				ДанныеСтрокиЧастичногоВыбытия.Добавить(
					Новый ФорматированнаяСтрока(
						НСтр("ru = 'Изменить'"),,,,
						"ИзменитьОстатокВскрытойПотребительскойУпаковик"));
			КонецЕсли;
			Если СтрокаДанных["ЧастичноеВыбытиеОстатокГИСМТ"] <> Неопределено Тогда
				Если ДанныеСтрокиЧастичногоВыбытия.Количество() Тогда
					ДанныеСтрокиЧастичногоВыбытия.Добавить(Символы.ПС);
				КонецЕсли;
				ДанныеСтрокиЧастичногоВыбытия.Добавить(
					СтрШаблон(
						НСтр("ru = 'Остаток по данным ГИС МТ: %1 из %2 %3'"),
						СтрокаДанных["ЧастичноеВыбытиеОстатокГИСМТ"],
						СтрокаДанных["ЕмкостьПотребительскойУпаковки"],
						ОбщегоНазначенияИСКлиентСервер.ПредставлениеЕдиницыЧастичногоВыбытия(СтрокаДанных["ВидПродукции"])));
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаДанных["ЧастичноеВыбытиеНеКорректныйОстаток"] Тогда
			Если ДанныеСтрокиЧастичногоВыбытия.Количество() Тогда
					ДанныеСтрокиЧастичногоВыбытия.Добавить(Символы.ПС);
				КонецЕсли;
			ДанныеСтрокиЧастичногоВыбытия.Добавить(НСтр("ru = 'Остаток по данными ГИС МИ не корректный'"));
		КонецЕсли;
		
		ЗначениеПодсказкиЧастичноеВыбытие = Новый ФорматированнаяСтрока(ДанныеСтрокиЧастичногоВыбытия);
		
		Если ЭтоАльтернативныйТабак Или ЭтоБАД Или ЭтоНСП Или ЭтоКреслаКоляски Тогда
			Элементы.ДекорацияЧастичноеВыбытие.Заголовок = НСтр("ru = 'Поштучная продажа'");
		ИначеЕсли ЭтоДухи Или ЭтоПиво Тогда 
			Элементы.ДекорацияЧастичноеВыбытие.Заголовок = НСтр("ru = 'Продажа на разлив'");
		Иначе
			Элементы.ДекорацияЧастичноеВыбытие.Заголовок = НСтр("ru = 'Частичное выбытие'");
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеПодсказки.Вставить(Элементы.ДекорацияЧастичноеВыбытие, ЗначениеПодсказкиЧастичноеВыбытие);
	
	НаименованиеПроизводителя = Новый Массив();
	Если ЗначениеЗаполнено(СтрокаДанных["НаименованиеПроизводителя"]) Тогда
		НаименованиеПроизводителя.Добавить(СтрокаДанных["НаименованиеПроизводителя"]);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаДанных["ИННПроизводителя"]) Тогда
		НаименованиеПроизводителя.Добавить(Символы.ПС);
		НаименованиеПроизводителя.Добавить(СтрШаблон("%1", СтрокаДанных["ИННПроизводителя"]));
	КонецЕсли;
	ДанныеПодсказки.Вставить(Элементы.ДекорацияПроизводитель, СтрСоединить(НаименованиеПроизводителя));
	
	НаименованиеАгента = Новый Массив();
	ДанныеПодсказки.Вставить(Элементы.ДекорацияАгент, СтрСоединить(НаименованиеАгента));
	
	НаименованиеВладельца = Новый Массив();
	Если ЗначениеЗаполнено(СтрокаДанных["Владелец"]) Тогда
		НаименованиеВладельца.Добавить(СтрокаДанных["Владелец"]);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаДанных["ИННВладельца"]) Тогда
		НаименованиеВладельца.Добавить(Символы.ПС);
		НаименованиеВладельца.Добавить(СтрШаблон("%1", СтрокаДанных["ИННВладельца"]));
	КонецЕсли;
	ДанныеПодсказки.Вставить(Элементы.ДекорацияВладелец, СтрСоединить(НаименованиеВладельца));
	
	Для Каждого КлючИЗначение Из ДанныеПодсказки Цикл
		ЭлементФормы = КлючИЗначение.Ключ;
		Если ЗначениеЗаполнено(СокрЛП(КлючИЗначение.Значение)) Тогда
			Значение = КлючИЗначение.Значение;
			ЭлементФормы.Видимость = Истина;
		ИначеЕсли СкрыватьЭлементыПриОтсутствииДанных.Получить(ЭлементФормы) = Неопределено Тогда
			ЭлементФормы.Видимость = Истина;
			Значение = "-";
		Иначе
			ЭлементФормы.Видимость = СкрыватьЭлементыПриОтсутствииДанных.Получить(ЭлементФормы);
			Значение = "-";
		КонецЕсли;
		ЭлементФормы.РасширеннаяПодсказка.Заголовок = Значение;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СтрокаДанных["ПредставлениеУпаковки"]) Тогда
		Элементы.ДекорацияШтрихкодУпаковки.Заголовок = Новый ФорматированнаяСтрока(
			СтрокаДанных["ПредставлениеУпаковки"],,,,
			ПолучитьНавигационнуюСсылку(СтрокаДанных["ШтрихкодУпаковки"]));
		Если ЗначениеЗаполнено(Форма.ПолноеИмяФормыОтчетаМестаИспользования) Тогда
			Элементы.ДекорацияШтрихкодУпаковки.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
				НСтр("ru = 'Места использования'"),,,, "МестаИспользования");
		КонецЕсли;
	Иначе
		Элементы.ДекорацияШтрихкодУпаковки.Заголовок = "-";
		Элементы.ДекорацияШтрихкодУпаковки.РасширеннаяПодсказка.Заголовок = "";
	КонецЕсли;
	
	ДанныеСтрокиКоэффициент = Новый Массив();
	Если ЗначениеЗаполнено(СтрокаДанных["ПлановоеКоличествоПотребительскихУпаковок"])
		Или ЗначениеЗаполнено(СтрокаДанных["КоличествоПотребительскихУпаковок"])
		Или ЗначениеЗаполнено(СтрокаДанных["КоличествоГрупповыхУпаковок"]) Тогда
		
		ТекстКоличествоГрупповыхУпаковок = НСтр("ru = 'Групповых упаковок: %1'");
		ТекстКоличествоПотребительскихУпаковок = НСтр("ru = 'Потребительских упаковок: %1'");
		
		Если ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияМОТП(СтрокаДанных.ВидПродукции) Тогда
			ТекстКоличествоГрупповыхУпаковок = НСтр("ru = 'Блоков: %1'");
			ТекстКоличествоПотребительскихУпаковок = НСтр("ru = 'Пачек: %1'");
		ИначеЕсли СтрокаДанных.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Духи") Тогда
			ТекстКоличествоПотребительскихУпаковок = НСтр("ru = 'Флаконов: %1'");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДанных["КоличествоГрупповыхУпаковок"])
			И СтрокаДанных["КоличествоГрупповыхУпаковок"] > 1 Тогда
			ДанныеСтрокиКоэффициент.Добавить(
				СтрШаблон(
					ТекстКоличествоГрупповыхУпаковок,
					СтрокаДанных["КоличествоГрупповыхУпаковок"]));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДанных["КоличествоПотребительскихУпаковок"])
			И СтрокаДанных["КоличествоПотребительскихУпаковок"] > 1 Тогда
			Если ДанныеСтрокиКоэффициент.Количество() Тогда
				ДанныеСтрокиКоэффициент.Добавить(" ");
			КонецЕсли;
			ДанныеСтрокиКоэффициент.Добавить(
				СтрШаблон(
					ТекстКоличествоПотребительскихУпаковок,
					СтрокаДанных["КоличествоПотребительскихУпаковок"]));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДанных["ПлановоеКоличествоПотребительскихУпаковок"])
			И (СтрокаДанных["ПлановоеКоличествоПотребительскихУпаковок"] > 1
				Или СтрокаДанных["ЕстьПлановоеКоличествоПотребительскихУпаковокПоGTIN"]) Тогда
			
			Если СтрокаДанных["ЕстьПлановоеКоличествоПотребительскихУпаковокПоGTIN"] Тогда
				Если ДанныеСтрокиКоэффициент.Количество() Тогда
					ДанныеСтрокиКоэффициент.Добавить(" ");
				КонецЕсли;
				ДанныеСтрокиКоэффициент.Добавить(
				СтрШаблон(
					НСтр("ru = 'План: %1'"),
					СтрокаДанных["ПлановоеКоличествоПотребительскихУпаковок"]));
				ДанныеСтрокиКоэффициент.Добавить(" ");
				ДанныеСтрокиКоэффициент.Добавить(
					Новый ФорматированнаяСтрока(
						НСтр("ru = 'Изменить'"),,,,
						"ИзменитьПлановоеКоличествоПотребительскихУпаковокПоGTIN"));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеСтрокиКоэффициент.Количество() Тогда
		Элементы.ДекорацияКоэффициент.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(ДанныеСтрокиКоэффициент);
	Иначе
		Элементы.ДекорацияКоэффициент.РасширеннаяПодсказка.Заголовок = "-";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДанных["ИдентификаторДокумента"]) Тогда
		Если Не Элементы.ДекорацияПоследнийДокумент.Видимость Тогда
			Элементы.ДекорацияПоследнийДокумент.Видимость = Истина;
		КонецЕсли;
		ДанныеСтроки = Новый Массив();
		ДанныеСтроки.Добавить(СтрокаДанных["ИдентификаторДокумента"]);
		Если ЗначениеЗаполнено(СтрокаДанных["ПредставлениеПоследнегоДокумента"]) Тогда
			ДанныеСтроки.Добавить(Символы.ПС);
			Если ЗначениеЗаполнено(СтрокаДанных["ПоследнийДокумент"]) Тогда
				СсылкаНаОткрытие = ПолучитьНавигационнуюСсылку(СтрокаДанных["ПоследнийДокумент"]);
			КонецЕсли;
			ДанныеСтроки.Добавить(Новый ФорматированнаяСтрока(
				Строка(СтрокаДанных["ПредставлениеПоследнегоДокумента"]),,,,
				СсылкаНаОткрытие));
		КонецЕсли;
		Элементы.ДекорацияПоследнийДокумент.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(ДанныеСтроки);
	ИначеЕсли Элементы.ДекорацияПоследнийДокумент.Видимость Тогда
		Элементы.ДекорацияПоследнийДокумент.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПоСтрокамКоллекции(Коллекция)
	
	Если Коллекция.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	МассивШтрихкодов = Новый Массив();
	
	Для Каждого ЭлементКоллекции Из Коллекция Цикл
		НовыйЭлемент = Новый Структура("Штрихкод, Количество", ЭлементКоллекции.Штрихкод, 1);
		МассивШтрихкодов.Добавить(НовыйЭлемент);
	КонецЦикла;
	
	Подключаемый_ПолученыДанныеИзТСД(МассивШтрихкодов);
	
КонецПроцедуры

#Область ОбработкаШтрихкодов

#Область РаботаСТСД

&НаСервере
Процедура ОбработатьПолученныеДанныеТСДНаСервере(ДанныеДляТСД)
	
	ПараметрыЛогирования = ЛогированиеЗапросовИСМП.ПараметрыЛогированияЗапросов();
	ЛогированиеЗапросовИС.ВключитьЛогированиеЗапросов(ПараметрыЛогирования,, Истина);
	ЛогированиеЗапросовИСМП.УстановитьПараметрыЛогированияЗапросов(ПараметрыЛогирования);
	
	Результат = ГрупповаяОбработкаШтрихкодовИС.РезультатЗагрузкиШтрихкодовИзТСД();
	
	ГрупповаяОбработкаШтрихкодовИС.ДополнитьУпорядочитьДанныеТСД(ДанныеДляТСД.Штрихкоды);
	
	ДанныеШтрихкодов            = Новый Массив();
	КешДанныхРазбора            = Новый Соответствие();
	МассивПропущенныхШтрихкодов = Новый Массив();
	
	ПользовательскиеПараметрыРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки();
	ПользовательскиеПараметрыРазбораКодаМаркировки.РасширеннаяДетализация = ДанныеДляТСД.ПараметрыСканирования.СохранятьКодыМаркировкиВПулИСМП;
	
	ОбщиеНастройкиРазбора = РазборКодаМаркировкиИССлужебный.НастройкиРазбораКодаМаркировки(
		ДанныеДляТСД.ПараметрыСканирования.ДопустимыеВидыПродукции, Ложь);
	
	НастройкиРазбораКодаМаркировки = Новый Структура;
	НастройкиРазбораКодаМаркировки.Вставить("Кеш",              РазборКодаМаркировкиИССлужебныйКлиентСервер.ИнициализироватьНастройкиИспользующиеРезультатыПредыдущихРазборов());
	НастройкиРазбораКодаМаркировки.Вставить("Общие",            ОбщиеНастройкиРазбора);
	НастройкиРазбораКодаМаркировки.Вставить("Пользовательские", ПользовательскиеПараметрыРазбораКодаМаркировки);
	
	Для Каждого СтрокаДанныхТСД Из ДанныеДляТСД.Штрихкоды Цикл
		
		СтрокаДанныхТСД.Вставить("ШтрихкодСОшибкой",        Ложь);
		СтрокаДанныхТСД.Вставить("НормализованныйШтрихкод", СтрокаДанныхТСД.Штрихкод);
		СтрокаДанныхТСД.Вставить("Уровень",                 0);
		
		Штрихкод      = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.Base64ВШтрихкод(СтрокаДанныхТСД.Штрихкод);
		ДанныеРазбора = ГрупповаяОбработкаШтрихкодовИС.ВидУпаковкиИПредставлениеШтрихкодаУпрощенныйРазбор(
			Штрихкод,
			ДанныеДляТСД.ПараметрыСканирования.ДопустимыеВидыПродукции,
			КешДанныхРазбора,
			НастройкиРазбораКодаМаркировки);
		
		Если ДанныеРазбора.ВидУпаковки = Неопределено И Не ДанныеРазбора.КодМаркировкиСоответствуетНесколькимШаблонам Тогда
			
			Штрихкод = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(Штрихкод, "");
			
			ОбщегоНазначенияИС.СообщитьПользователюВФорму(
				УникальныйИдентификатор,
				СтрШаблон(
					НСтр("ru = 'Код %1 не является штрихкодом потребительской, групповой или логистической
					           |упаковки продукции, поддерживаемой ГИС МТ.'"),
					Штрихкод));
			
			МассивПропущенныхШтрихкодов.Добавить(СтрокаДанныхТСД);
			Продолжить;
			
		КонецЕсли;
		
		СтрокаДанныхТСД.Вставить("НормализованныйШтрихкод", ДанныеРазбора.НормализованныйШтрихкод);
		
		ДанныеШтрихкода = Новый Структура(
			"Штрихкод, ШтрихкодBase64, Количество",
			Штрихкод, СтрокаДанныхТСД.Штрихкод, СтрокаДанныхТСД.Количество);
		
		ДанныеШтрихкодов.Добавить(ДанныеШтрихкода);
		
	КонецЦикла;
	
	Если МассивПропущенныхШтрихкодов.Количество() Тогда
		Для Каждого ЭлементМассива Из МассивПропущенныхШтрихкодов Цикл
			ПорядковыйНомер = ДанныеДляТСД.Штрихкоды.Найти(ЭлементМассива);
			Если ПорядковыйНомер <> Неопределено Тогда
				ДанныеДляТСД.Штрихкоды.Удалить(ПорядковыйНомер);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	РезультатОбработкиШтрихкодов = ШтрихкодированиеОбщегоНазначенияИС.ОбработатьШтрихкоды(
		ДанныеШтрихкодов, ДанныеДляТСД.ПараметрыСканирования,
		Неопределено, ЭтотОбъект, КешДанныхРазбора);
	
	// 1. Авторизация
	ТребуетсяАвторизация            = Ложь;
	ТребуетсяАвторизацияИСМПРозница = Ложь;
	ОтсутствуютCDNПлощадки          = Ложь;
	
	Для Каждого КлючИЗначение Из РезультатОбработкиШтрихкодов.РезультатыОбработки Цикл
		РезультатОбработки = КлючИЗначение.Значение;
		Если РезультатОбработки.Свойство("ТребуетсяАвторизацияИСМП")
			И РезультатОбработки.ТребуетсяАвторизацияИСМП Тогда
			ТребуетсяАвторизация = Истина;
			Прервать;
		ИначеЕсли РезультатОбработки.Свойство("ТребуетсяАвторизацияИСМПРозница")
			И РезультатОбработки.ТребуетсяАвторизацияИСМПРозница Тогда
			ТребуетсяАвторизацияИСМПРозница = Истина;
		ИначеЕсли РезультатОбработки.Свойство("ОтсутствуютCDNПлощадки")
			И РезультатОбработки.ОтсутствуютCDNПлощадки Тогда
			ОтсутствуютCDNПлощадки = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Результат.ТребуетсяАвторизация            = ТребуетсяАвторизация;
	Результат.ТребуетсяАвторизацияИСМПРозница = ТребуетсяАвторизацияИСМПРозница;
	Результат.ОтсутствуютCDNПлощадки          = ОтсутствуютCDNПлощадки;
	
	Если ТребуетсяАвторизация Или ТребуетсяАвторизацияИСМПРозница Или ОтсутствуютCDNПлощадки Тогда
		ЗагрузкаДанныхТСД = Результат;
		Возврат;
	КонецЕсли;
	
	ГрупповаяОбработкаШтрихкодовИС.УпорядочитьДанныеТСДПоРезультатамОбработкиШтрихкодов(
		ДанныеДляТСД.Штрихкоды, РезультатОбработкиШтрихкодов.РезультатыОбработки);
	
	Результат.Всего = ДанныеДляТСД.Штрихкоды.Количество();
	ЗагрузкаДанныхТСД = Результат;
	
	// 2. Проверка на ошибки
	Результат.ШтрихкодыТСД = ДанныеДляТСД.Штрихкоды;
	ГрупповаяОбработкаШтрихкодовИС.ПроверитьНаОшибкиРезультатОбработкиДанныхТСД(
		Результат, ЭтотОбъект, ДанныеДляТСД.ПараметрыСканирования);
	
	Если Результат.ОбщаяОшибка
		Или Результат.ШтрихкодыДляСопоставления.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	// 3. Обработка всех строк, не требующих вмешательства пользователя
	ЗагрузкаДанныхТСД = ОбработатьШтрихкодыНаСервере(
		ДанныеДляТСД.ПараметрыСканирования,
		ДанныеДляТСД.СоответствиеШтрихкодовСтрокДерева);
	
	// 4. Уменьшение количества данных к обработке на клиенте
	ГрупповаяОбработкаШтрихкодовИС.ОставитьНеобработанныеДанные(ЗагрузкаДанныхТСД);
	
	ЛогированиеЗапросовИСМП.ЗавершитьЛогированиеЗапросовПоИдентификатору(ПараметрыЛогирования.ТекущийИдентификатор);;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьШтрихкодыНаСервере(ПараметрыСканирования, СоответствиеШтрихкодовСтрокДерева)
	
	Если ЗагрузкаДанныхТСД = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КешСтрокДереваУпаковок    = Новый Соответствие();
	ИдентификаторСтрокиДерева = Неопределено;
	
	ПараметрыОбработки = Новый Структура();
	ПараметрыОбработки.Вставить("ИдентификаторыДокументов", Новый Соответствие());
	ПараметрыОбработки.Вставить("ОписаниеGTIN",             Новый Соответствие());
	
	Пока ЗагрузкаДанныхТСД.Обработано < ЗагрузкаДанныхТСД.Всего Цикл
		Если Не ОбработатьОчереднойШтрихкодНаСервере(
			ПараметрыСканирования,
			СоответствиеШтрихкодовСтрокДерева,
			КешСтрокДереваУпаковок,
			ИдентификаторСтрокиДерева,
			ПараметрыОбработки) Тогда
			Возврат ЗагрузкаДанныхТСД;
		КонецЕсли;
		ЗагрузкаДанныхТСД.Обработано = ЗагрузкаДанныхТСД.Обработано + 1;
	КонецЦикла;
	
	ЗаполнитьДокументыПоИдентификаторам(ПараметрыОбработки.ИдентификаторыДокументов);
	ЗаполнитьОписаниеGTIN(ПараметрыОбработки.ОписаниеGTIN);
	
	Если РежимРаботыОдинКод И Не ЭтоОтображениеОдногоКода(ЭтотОбъект) Тогда
		РежимРаботыОдинКод = Ложь;
		НастроитьЭлементыФормыНаСервере(ЭтотОбъект);
	КонецЕсли;
	Если ИдентификаторСтрокиДерева <> Неопределено Тогда
		СпозиционироватьсяНаСтрокеДерева(ЭтотОбъект, ИдентификаторСтрокиДерева);
	КонецЕсли;
	
	Возврат ЗагрузкаДанныхТСД;
	
КонецФункции

&НаСервере
Функция ОбработатьОчереднойШтрихкодНаСервере(ПараметрыСканирования, СоответствиеШтрихкодовСтрокДерева, КешСтрокДереваУпаковок, ИдентификаторСтрокиДерева, ПараметрыОбработки)
	
	Если ЗагрузкаДанныхТСД.Обработано = ЗагрузкаДанныхТСД.Всего Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтрокаШтрихкод = ЗагрузкаДанныхТСД.ШтрихкодыТСД[ЗагрузкаДанныхТСД.Обработано];
	Если СтрокаШтрихкод.ШтрихкодСОшибкой Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтрокаШтрихкод.РезультатОбработки = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрокаШтрихкод.РезультатОбработки.ТребуетсяОбработкаШтрихкода Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеШтрихкода = СтрокаШтрихкод.РезультатОбработки.ДанныеШтрихкода;
	
	ИдентификаторСтрокиДерева = НайтиДобавитьСтрокуДерева(ЭтотОбъект, ДанныеШтрихкода, СоответствиеШтрихкодовСтрокДерева);
	ЗаполнитьСтрокуДереваПоДаннымШтрихкода(ИдентификаторСтрокиДерева, ДанныеШтрихкода, ПараметрыОбработки);
	
	ШтрихкодОбработан = Истина;
	Если Не ШтрихкодОбработан Тогда
		СтрокаШтрихкод.Вставить("ТребуетсяОбработкаНаКлиенте");
	КонецЕсли;
	
	Возврат ШтрихкодОбработан;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьОчереднойШтрихкод()
	ПодключитьОбработчикОжидания("ОбработатьПолученныеДанныеТСД", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолученныеДанныеТСД()
	
	Если ЗагрузкаДанныхТСД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗагрузкаДанныхТСД.Обработано = ЗагрузкаДанныхТСД.Всего Тогда
		ГрупповаяОбработкаШтрихкодовИСКлиент.ОповеститьОбОкончанииОбработкиДанныхТСД();
		ЗагрузкаДанныхТСД = Неопределено;
	Иначе
		
		СтрокаШтрихкод = ЗагрузкаДанныхТСД.ШтрихкодыТСД[ЗагрузкаДанныхТСД.Обработано];
		
		Если ЗначениеЗаполнено(СтрокаШтрихкод.Штрихкод) Тогда
			
			Если СтрокаШтрихкод.ШтрихкодСОшибкой Тогда
				ЗагрузкаДанныхТСД.Обработано = ЗагрузкаДанныхТСД.Обработано + 1;
				ОбработатьОчереднойШтрихкод();
				Возврат;
			КонецЕсли;
			
			Если СтрокаШтрихкод.РезультатОбработки.ТребуетсяОбработкаШтрихкода Тогда
				ЗагрузкаДанныхТСД.Обработано = ЗагрузкаДанныхТСД.Обработано + 1;
				ОбработатьОчереднойШтрихкод();
				Возврат;
			КонецЕсли;
			
			ДанныеШтрихкода = СтрокаШтрихкод.РезультатОбработки.ДанныеШтрихкода;
			ПоискПоШтрихкодуЗавершение(ДанныеШтрихкода);
			
		Иначе
			ОбработатьОчереднойШтрихкод();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗагрузитьИзТСДПослеАвторизации(РезультатАвторизации, ДополнительныеПараметры) Экспорт
	
	Подключаемый_ПолученыДанныеИзТСД(ДополнительныеПараметры.Штрихкоды, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолученыДанныеИзТСД(Штрихкоды, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Штрихкоды.Количество() = 0 Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'В полученных данных не содержится информации о считанных штриховых кодах'"));
		Возврат;
		
	КонецЕсли;
	ГрупповаяОбработкаШтрихкодовИСКлиент.ОповеститьОНачалеОбработкиДанныхТСД();
	ШтрихкодированиеИСКлиент.ПреобразоватьШтрихкодыТСДВBase64(Штрихкоды);
	
	ПараметрыСканирования = ПараметрыСканированияКодовМаркировки();
	
	ДанныеДляТСД = Новый Структура;
	ДанныеДляТСД.Вставить("Штрихкоды",                         Штрихкоды);
	ДанныеДляТСД.Вставить("ПараметрыСканирования",             ПараметрыСканирования);
	ДанныеДляТСД.Вставить("СоответствиеШтрихкодовСтрокДерева", СоответствиеШтрихкодовСтрокДерева);
	ДанныеДляТСД.Вставить("ДополнительныеПараметры",           ДополнительныеПараметры);
	
	ОбработатьПолученныеДанныеТСДНаСервере(ДанныеДляТСД);
	СоответствиеШтрихкодовСтрокДерева = ДанныеДляТСД.СоответствиеШтрихкодовСтрокДерева;
	
	Если ЗагрузкаДанныхТСД.ТребуетсяАвторизация Тогда
		
		Если Не ДополнительныеПараметры = Неопределено
			И ДополнительныеПараметры.Свойство("ОбработкаПолученияТокена")
			И ДополнительныеПараметры.ОбработкаПолученияТокена Тогда
			
			ПоказатьПредупреждение(, НСтр("ru = 'Загрузка данных недоступна: авторизация в сервисе не пройдена'"));
			ЗагрузкаДанныхТСД = Неопределено;
			
			Возврат;
			
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура("Штрихкоды, ОбработкаПолученияТокена", Штрихкоды, Истина);
		
		ИнтерфейсАвторизацииИСМПКлиент.ЗапроситьКлючСессии(
			ИнтерфейсАвторизацииИСМПКлиент.ПараметрыЗапросаКлючаСессии(
				ПараметрыСканирования.Организация, ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувь")),
			Новый ОписаниеОповещения("Подключаемый_ЗагрузитьИзТСДПослеАвторизации", ЭтотОбъект, ДополнительныеПараметры));
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗагрузкаДанныхТСД.ТребуетсяАвторизацияИСМПРозница Тогда
		
		Если Не ДополнительныеПараметры = Неопределено
			И ДополнительныеПараметры.Свойство("ОбработкаПолученияТокенаРозницы")
			И ДополнительныеПараметры.ОбработкаПолученияТокенаРозницы Тогда
			
			ПоказатьПредупреждение(, НСтр("ru = 'Загрузка данных недоступна: авторизация в сервисе не пройдена'"));
			ЗагрузкаДанныхТСД = Неопределено;
			
			Возврат;
			
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура("Штрихкоды, ОбработкаПолученияТокенаРозницы", Штрихкоды, Истина);
		
		ИнтерфейсАвторизацииИСМПКлиент.ЗапроситьКлючСессии(
			ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ПараметрыЗапросаКлючаСессииИСМПРозница(ПараметрыСканирования.Организация),
			Новый ОписаниеОповещения("Подключаемый_ЗагрузитьИзТСДПослеАвторизации", ЭтотОбъект, ДополнительныеПараметры));
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗагрузкаДанныхТСД.ОтсутствуютCDNПлощадки Тогда
		
		Если Не ДополнительныеПараметры = Неопределено
			И ДополнительныеПараметры.Свойство("ЗагрузкаCDNПлощадок")
			И ДополнительныеПараметры.ЗагрузкаCDNПлощадок Тогда
			
			ПоказатьПредупреждение(, НСтр("ru = 'Загрузка CDN-площадок завершена с ошибками: получение данных невозможно.'"));
			ЗагрузкаДанныхТСД = Неопределено;
			
			Возврат;
			
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура("Штрихкоды, ЗагрузкаCDNПлощадок", Штрихкоды, Истина);
		
		ПараметрыЗапроса                         = ИнтерфейсИСМПОбщегоНазначенияКлиент.ПараметрыЗапросаДанных();
		ПараметрыЗапроса.УникальныйИдентификатор = УникальныйИдентификатор;
		ПараметрыЗапроса.Организация             = Организация;
		ПараметрыЗапроса.Параметры               = Новый Структура("НеВыводитьОкноОжидания", Ложь);
		ПараметрыЗапроса.ОповещениеОЗавершении   = Новый ОписаниеОповещения("Подключаемый_ЗагрузитьИзТСДПослеАвторизации", ЭтотОбъект, ДополнительныеПараметры);

		ИнтерфейсИСМПОбщегоНазначенияКлиент.АктуализацияСпискаCDNПлощадок(ПараметрыЗапроса);
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗагрузкаДанныхТСД.ОбщаяОшибка Тогда
		
		ПараметрыОткрытияФормы = ШтрихкодированиеИСКлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного();
		
		Если ТипЗнч(ЗагрузкаДанныхТСД.ТекстОбщейОшибки) = Тип("ФорматированнаяСтрока") Тогда
			ПараметрыОткрытияФормы.ТекстОшибкиФорматированнаяСтрока = ЗагрузкаДанныхТСД.ТекстОбщейОшибки;
		Иначе
			ПараметрыОткрытияФормы.ТекстОшибки = ЗагрузкаДанныхТСД.ТекстОбщейОшибки;
		КонецЕсли;
		
		ШтрихкодированиеИСКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(ЭтотОбъект, ПараметрыОткрытияФормы);
		
		ЗагрузкаДанныхТСД = Неопределено;
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗагрузкаДанныхТСД.ШтрихкодыДляСопоставления.Количество() > 0 Тогда
		
		ДополнительныеПараметры = Новый Структура("ВсеШтрихкоды, ШтрихкодыДляСопоставления",
			Штрихкоды, ЗагрузкаДанныхТСД.ШтрихкодыДляСопоставления);
		ОписаниеОповещения = Новый ОписаниеОповещения("СопоставлениеШтрихкодовЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ШтрихкодированиеИСКлиентПереопределяемый.ОткрытьФормуПодбораНоменклатурыПоШтрихкодам(
			ЗагрузкаДанныхТСД.ШтрихкодыДляСопоставления, ЭтотОбъект, ОписаниеОповещения);
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗагрузкаДанныхТСД.ЕстьОшибкиВДереве
		И Не ПараметрыСканирования.ПропускатьСтрокиСОшибкамиПриЗагрузкеИзТСД Тогда
		
		ПараметрыОткрытияФормы = ШтрихкодированиеИСКлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного(
			ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувь"));
		ПараметрыОткрытияФормы.АдресДереваУпаковок = ЗагрузкаДанныхТСД.АдресДереваУпаковок;
		ШтрихкодированиеИСКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(
			ЭтотОбъект, ПараметрыОткрытияФормы);
		
		ЗагрузкаДанныхТСД = Неопределено;
		
		Возврат;
		
	КонецЕсли;
	
	ОбработатьПолученныеДанныеТСД();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	СобытияФормИСКлиентПереопределяемый.ПриПолученииДанныхИзТСД(
		Новый ОписаниеОповещения("Подключаемый_ПолученыДанныеИзТСД", ЭтотОбъект),
		ЭтотОбъект, РезультатВыполнения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СопоставлениеШтрихкодовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ШтрихкодированиеИСВызовСервера.ОчиститьОтложенныеКодыМаркировки(КэшМаркируемойПродукции);
		Возврат;
	КонецЕсли;
	
	Если Результат.НайденыНезарегистрированныеТовары Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("СопоставлениеШтрихкодовЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ШтрихкодированиеИСКлиентПереопределяемый.ОткрытьФормуПодбораНоменклатурыПоШтрихкодам(
			Результат.ОтложенныеТовары, ЭтотОбъект, ОписаниеОповещения);
		Возврат;
	КонецЕсли;
	
	Подключаемый_ПолученыДанныеИзТСД(ДополнительныеПараметры.ВсеШтрихкоды);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОткрытьФормуУточненияДанных()
	
	Если КодМаркировкиДляУточнения <> Неопределено
		И (КодМаркировкиДляУточнения.РезультатОбработкиШтрихкода.ТребуетсяУточнениеДанных
		Или КодМаркировкиДляУточнения.РезультатОбработкиШтрихкода.ТребуетсяУточнениеКоэффициентовУпаковок
		Или КодМаркировкиДляУточнения.РезультатОбработкиШтрихкода.ТребуетсяУточнениеСоставаУпаковки) Тогда
		
		КодМаркировкиДляУточнения.РезультатОбработкиШтрихкода.ТребуетсяУточнениеДанных                = Ложь;
		КодМаркировкиДляУточнения.РезультатОбработкиШтрихкода.ТребуетсяУточнениеКоэффициентовУпаковок = Ложь;
		КодМаркировкиДляУточнения.РезультатОбработкиШтрихкода.ТребуетсяУточнениеСоставаУпаковки       = Ложь;
		
		ПараметрыЗавершенияВводаШтрихкода = ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыЗавершенияОбработкиШтрихкода("","",КодМаркировкиДляУточнения.ЗавершениеОбработки);
		ПараметрыЗавершенияВводаШтрихкода.РезультатОбработкиШтрихкода = КодМаркировкиДляУточнения.РезультатОбработкиШтрихкода;
		ПараметрыЗавершенияВводаШтрихкода.ПараметрыСканирования       = КодМаркировкиДляУточнения.ПараметрыСканирования;
		ПараметрыЗавершенияВводаШтрихкода.Форма                       = ЭтотОбъект;
		ПараметрыЗавершенияВводаШтрихкода.ВызовИзФормыДокумента       = Ложь;
		
		ШтрихкодированиеОбщегоНазначенияИСКлиент.ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
		
	Иначе
		
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("РучнойВводШтрихкодаЗавершение", ЭтотОбъект);
		ШтрихкодированиеИСКлиент.Подключаемый_ОткрытьФормуУточненияДанных(ЭтотОбъект, ОповещениеПриЗавершении);
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуДереваПоДаннымШтрихкода(НайденныйИдентификаторСтроки, ДанныеШтрихкода, ПараметрыОбработки)
	
	СтрокаДанных = ДеревоКодовМаркировки.НайтиПоИдентификатору(НайденныйИдентификаторСтроки);
	
	ДополнительныеКолонки = Новый Массив;
	ДополнительныеКолонки.Добавить("GTIN");
	ДополнительныеКолонки.Добавить("МРЦ");
	ДополнительныеКолонки.Добавить("ГоденДо");
	ДополнительныеКолонки.Добавить("СерийныйНомер");
	
	ЗаполнитьЗначенияСвойств(СтрокаДанных, ДанныеШтрихкода);
	Если ДанныеШтрихкода.СоставКодаМаркировки <> Неопределено Тогда
		Для Каждого ИмяКолонки Из ДополнительныеКолонки Цикл
			Если ДанныеШтрихкода.СоставКодаМаркировки.Свойство(ИмяКолонки)
				И ЗначениеЗаполнено(ДанныеШтрихкода.СоставКодаМаркировки[ИмяКолонки])
				И Не ЗначениеЗаполнено(СтрокаДанных[ИмяКолонки]) Тогда
				СтрокаДанных[ИмяКолонки] = ДанныеШтрихкода.СоставКодаМаркировки[ИмяКолонки];
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ДополнительныеДанные = Новый Структура();
	ДополнительныеДанные.Вставить("АдресЛогаЗапросов",     ДанныеШтрихкода.АдресЛогаЗапросов);
	ДополнительныеДанные.Вставить("ДополнительныеКолонки", ДополнительныеКолонки);
	
	РассчитатьДанныеПоСтроке(СтрокаДанных, ДополнительныеДанные, ПараметрыОбработки);
	
	Если (СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.Пиво
			Или СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.ПивоВПотребительскихУпаковках)
		И (СтрокаДанных.ЧастичноеВыбытиеОстаток <> Неопределено Или СтрокаДанных.ЧастичноеВыбытиеОстатокГИСМТ <> Неопределено)
		И ЗначениеЗаполнено(СтрокаДанных.ШтрихкодУпаковки) Тогда
		
		СтрокаДанных.ЧастичноеВыбытиеОстатокСУчетомОбъемаСлива      = Неопределено;
		СтрокаДанных.ЧастичноеВыбытиеОстатокСУчетомОбъемаСливаГИСМТ = Неопределено;
		СтрокаДанных.ЧастичноеВыбытиеОбъемСливаПредставление        = Неопределено;
		
		ДанныеВскрытия = РегистрыСведений.ВскрытыеПотребительскиеУпаковкиИС.ВскрытыеПотребительскиеУпаковкиПоКодуМаркировки(
			СтрокаДанных.ШтрихкодУпаковки, Истина)[СтрокаДанных.ШтрихкодУпаковки];
		Если ДанныеВскрытия <> Неопределено
			И ЗначениеЗаполнено(ДанныеВскрытия.ОбъемСлива) Тогда
			
			ДнейСлива  = Цел((ТекущаяДата - НачалоДня(ДанныеВскрытия.ДатаПодключения)) / (60 * 60 * 24));
			
			Если ДнейСлива > 0 Тогда
				ОбъемСлива = ДанныеВскрытия.ОбъемСлива * ДнейСлива;
				ПредставлениеДнейОбъемСлива = ПолучитьСклоненияСтрокиПоЧислу(
									НСтр("ru = 'день'"),
									ДнейСлива,,
									"ЧС=Количественное;Л=ru_RU",
									"ПД=Именительный");
				Если ПредставлениеДнейОбъемСлива.Количество() Тогда
					ПредставлениеДнейОбъемСлива = ПредставлениеДнейОбъемСлива[0];
				Иначе
					ПредставлениеДнейОбъемСлива = НСтр("ru = 'дн.'");
				КонецЕсли;
				СтрокаДанных.ЧастичноеВыбытиеОбъемСливаПредставление = СтрШаблон(
					НСтр("ru = 'Тех. сливы: %1 л. за %2'"),
					ОбъемСлива,
					ПредставлениеДнейОбъемСлива);
				Если СтрокаДанных.ЧастичноеВыбытиеОстатокГИСМТ <> Неопределено Тогда
					СтрокаДанных.ЧастичноеВыбытиеОстатокСУчетомОбъемаСливаГИСМТ = Окр(СтрокаДанных.ЧастичноеВыбытиеОстатокГИСМТ - ОбъемСлива, 1);
				КонецЕсли;
				Если СтрокаДанных.ЧастичноеВыбытиеОстаток <> Неопределено Тогда
					СтрокаДанных.ЧастичноеВыбытиеОстатокСУчетомОбъемаСлива = Окр(СтрокаДанных.ЧастичноеВыбытиеОстаток - ОбъемСлива, 1);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(ДанныеШтрихкода.АдресДереваУпаковок) Тогда
		
		ДеревоУпаковок = ПолучитьИзВременногоХранилища(ДанныеШтрихкода.АдресДереваУпаковок);
		
		Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
			
			Если СтрокаДерева.Штрихкод = ДанныеШтрихкода.Штрихкод
				Или СтрокаДерева.Штрихкод = ДанныеШтрихкода.НормализованныйШтрихкод Тогда
				
				СтрокаДанных.ПолучитьЭлементы().Очистить();
				
				ЗаполнитьДанныеПоСтрокеДереваРекурсивно(
					СтрокаДанных, СтрокаДерева, ДополнительныеДанные, ПараметрыОбработки);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоСтрокеДереваРекурсивно(СтрокаДанных, СтрокаДерева, ДополнительныеДанные, ИдентификаторыДокументов)
	
	ЗаполнитьЗначенияСвойств(СтрокаДанных, СтрокаДерева);
	
	РассчитатьДанныеПоСтроке(СтрокаДанных, ДополнительныеДанные, ИдентификаторыДокументов);
	
	Для Каждого ВложеннаяСтрокаДерева Из СтрокаДерева.Строки Цикл
		
		НоваяСтрока = СтрокаДанных.ПолучитьЭлементы().Добавить();
		
		ЗаполнитьДанныеПоСтрокеДереваРекурсивно(
			НоваяСтрока, ВложеннаяСтрокаДерева, ДополнительныеДанные, ИдентификаторыДокументов);
		
		Если ВложеннаяСтрокаДерева.СоставКодаМаркировки <> Неопределено Тогда
			Для Каждого ИмяКолонки Из ДополнительныеДанные.ДополнительныеКолонки Цикл
				Если ВложеннаяСтрокаДерева.СоставКодаМаркировки.Свойство(ИмяКолонки)
					И ЗначениеЗаполнено(ВложеннаяСтрокаДерева.СоставКодаМаркировки[ИмяКолонки])
					И Не ЗначениеЗаполнено(НоваяСтрока[ИмяКолонки]) Тогда
					НоваяСтрока[ИмяКолонки] = ВложеннаяСтрокаДерева.СоставКодаМаркировки[ИмяКолонки];
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокаДанных.ПолучитьЭлементы().Количество() > 1 Тогда
		СтрокаДанных.КоличествоКодовМаркировки = СтрокаДанных.ПолучитьЭлементы().Количество();
	Иначе
		СтрокаДанных.КоличествоКодовМаркировки = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьДанныеПоСтроке(СтрокаДанных, ДополнительныеДанные, ПараметрыОбработки)
	
	ИдентификаторыДокументов = ПараметрыОбработки.ИдентификаторыДокументов;
	ОписаниеGTIN             = ПараметрыОбработки.ОписаниеGTIN;
	
	ЗаполнитьЗначенияСвойств(СтрокаДанных, ДополнительныеДанные);
	
	СтрокаДанных.ИндексКартинкиВидаПродукции = ИнтеграцияИСМПСлужебный.ИндексКартинкиПоВидуУпаковкиИВидуПродукции(
		СтрокаДанных.ВидУпаковки,
		СтрокаДанных.ВидПродукции);
	
	Если ЗначениеЗаполнено(СтрокаДанных.ШтрихкодУпаковки) Тогда
		СтрокаДанных.ПредставлениеУпаковки = ОбщегоНазначенияИС.ПредставлениеНоменклатуры(
			СтрокаДанных.Номенклатура,
			СтрокаДанных.Характеристика,
			СтрокаДанных.Упаковка,
			СтрокаДанных.Серия);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаДанных.ПредставлениеУпаковки)
		И ЗначениеЗаполнено(СтрокаДанных.ШтрихкодУпаковки) Тогда
		СтрокаДанных.ПредставлениеУпаковки = НСтр("ru = 'Номенклатура не указана'");
	КонецЕсли;
	
	Если СтрокаДанных.ПолучитьЭлементы().Количество() > 1 Тогда
		СтрокаДанных.КоличествоКодовМаркировки = СтрокаДанных.ПолучитьЭлементы().Количество();
	Иначе
		СтрокаДанных.КоличествоКодовМаркировки = 1;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДанных.ИдентификаторДокумента) Тогда
		
		СтрокиПоИдентификатору = ИдентификаторыДокументов.Получить(СтрокаДанных.ИдентификаторДокумента);
		Если СтрокиПоИдентификатору = Неопределено Тогда
			СтрокиПоИдентификатору = Новый Массив();
			ИдентификаторыДокументов.Вставить(СтрокаДанных.ИдентификаторДокумента, СтрокиПоИдентификатору);
		КонецЕсли;
		
		СтрокиПоИдентификатору.Добавить(СтрокаДанных);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДанных.GTIN)
		И СтрокаДанных.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Потребительская Тогда
		
		СтрокиПоGTIN = ОписаниеGTIN.Получить(СтрокаДанных.GTIN);
		Если СтрокиПоGTIN = Неопределено Тогда
			СтрокиПоGTIN = Новый Массив();
			ОписаниеGTIN.Вставить(СтрокаДанных.GTIN, СтрокиПоGTIN);
		КонецЕсли;
		
		СтрокиПоGTIN.Добавить(СтрокаДанных);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НайтиПоИдентификатору(ДанныеФормыДерево, Идентификатор)
	
	// Сейчас есть проблема в веб-клиенте: метод НайтиПоИдентификатору, может вернуть ДанныеФормыДерево
	
	Если Идентификатор = -1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеФормыЭлементДерева = ДанныеФормыДерево.НайтиПоИдентификатору(Идентификатор);
	
	Если ТипЗнч(ДанныеФормыЭлементДерева) = Тип("ДанныеФормыЭлементДерева") Тогда
		Возврат ДанныеФормыЭлементДерева;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура РучнойВводШтрихкодаЗавершение(ДанныеШтрихкода, ДополнительныеПараметры) Экспорт
	
	Если ДанныеШтрихкода = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузкаДанныхТСД = Неопределено;
	
	ШтрихкодированиеОбщегоНазначенияИСКлиент.ОбработатьДанныеШтрихкода(
		"ПоискПоШтрихкодуЗавершение", ЭтотОбъект, ДанныеШтрихкода, ПараметрыСканированияКодовМаркировки());
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныеШтрихкода, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДанныеШтрихкода = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеШтрихкода.МаркируемаяПродукция = Истина
		И ДанныеШтрихкода.ЭтоШтрихкодНоменклатуры Тогда
		
		ПараметрыОткрытияФормы = ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыОткрытияФормыВводаКодаМаркировки();
		ПараметрыОткрытияФормы.Номенклатура          = ДанныеШтрихкода.Номенклатура;
		ПараметрыОткрытияФормы.Характеристика        = ДанныеШтрихкода.Характеристика;
		ПараметрыОткрытияФормы.ВидПродукции          = ДанныеШтрихкода.ВидПродукции;
		ПараметрыОткрытияФормы.МаркируемаяПродукция  = ДанныеШтрихкода.МаркируемаяПродукция;
		ПараметрыОткрытияФормы.ПараметрыСканирования = ПараметрыСканированияКодовМаркировки();
		ПараметрыОткрытияФормы.ДанныеШтрихкода       = ДанныеШтрихкода;
		ПараметрыОткрытияФормы.РазрешатьДобавлениеБезКодаМарки = Ложь;
		
		ШтрихкодированиеИСКлиент.ОткрытьФормуСчитыванияКодаМаркировки(
			ЭтотОбъект, ПараметрыОткрытияФормы);
		
		Возврат;
		
	КонецЕсли;
	
	КодМаркировкиДляУточнения = Неопределено;
	
	ИдентификаторСтрокиДерева = НайтиДобавитьСтрокуДерева(ЭтотОбъект, ДанныеШтрихкода, СоответствиеШтрихкодовСтрокДерева);
	ПоискПоШтрихкодуЗавершениеСервер(ИдентификаторСтрокиДерева, ДанныеШтрихкода);
	
	Если РежимРаботыОдинКод И Не ЭтоОтображениеОдногоКода(ЭтотОбъект) Тогда
		РежимРаботыОдинКод = Ложь;
		НастроитьЭлементыФормыНаСервере(ЭтотОбъект);
	КонецЕсли;
	
	СпозиционироватьсяНаСтрокеДерева(ЭтотОбъект, ИдентификаторСтрокиДерева);
	
КонецПроцедуры

&НаСервере
Процедура ПоискПоШтрихкодуЗавершениеСервер(ИдентификаторСтрокиДерева, ДанныеШтрихкода)
	
	ТекущаяДата        = НачалоДня(ТекущаяДатаСеанса());
	ПараметрыОбработки = Новый Структура();
	ПараметрыОбработки.Вставить("ИдентификаторыДокументов", Новый Соответствие());
	ПараметрыОбработки.Вставить("ОписаниеGTIN",             Новый Соответствие());
	
	ЗаполнитьСтрокуДереваПоДаннымШтрихкода(ИдентификаторСтрокиДерева, ДанныеШтрихкода, ПараметрыОбработки);
	ЗаполнитьДокументыПоИдентификаторам(ПараметрыОбработки.ИдентификаторыДокументов);
	ЗаполнитьОписаниеGTIN(ПараметрыОбработки.ОписаниеGTIN);
	
	ШтрихкодированиеИСВызовСервера.ОчиститьКэшМаркируемойПродукции(КэшМаркируемойПродукции);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НайтиДобавитьСтрокуДерева(Форма, ДанныеШтрихкода, СоответствиеШтрихкодов)
	
	НайденныйИдентификаторСтроки = СоответствиеШтрихкодов.Получить(ДанныеШтрихкода.Штрихкод);
	
	Если НайденныйИдентификаторСтроки = Неопределено Тогда
		
		СтрокаДерева = Форма.ДеревоКодовМаркировки.ПолучитьЭлементы().Добавить();
		
		НайденныйИдентификаторСтроки = СтрокаДерева.ПолучитьИдентификатор();
		СоответствиеШтрихкодов.Вставить(ДанныеШтрихкода.Штрихкод, НайденныйИдентификаторСтроки);
		
	Иначе
		
		СтрокаДерева = Форма.ДеревоКодовМаркировки.НайтиПоИдентификатору(НайденныйИдентификаторСтроки);
		СтрокаДерева.ПолучитьЭлементы().Очистить();
		
	КонецЕсли;
	
	Возврат НайденныйИдентификаторСтроки;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СпозиционироватьсяНаСтрокеДерева(Форма, СтрокаДерева)
	
	Если СтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(СтрокаДерева) = Тип("Число") Тогда
		Форма.Элементы.ДеревоКодовМаркировки.ТекущаяСтрока = СтрокаДерева;
		ДанныеСтроки = Форма.ДеревоКодовМаркировки.НайтиПоИдентификатору(СтрокаДерева);
	Иначе
		Форма.Элементы.ДеревоКодовМаркировки.ТекущаяСтрока = СтрокаДерева.ПолучитьИдентификатор();
		ДанныеСтроки = СтрокаДерева; 
	КонецЕсли;
	
	УстановитьПоляПредставленияСтроки(Форма, ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыСканированияКодовМаркировки()
	
	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования(
		ЭтотОбъект);
	
	ПараметрыСканирования.ТолькоМаркируемаяПродукция          = Истина;
	ПараметрыСканирования.ОпределениеВидаПродукцииИСМП        = Истина;
	ПараметрыСканирования.КонтрольУникальностиКодовМаркировки = Ложь;
	
	ПараметрыСканирования.Организация             = Организация;
	ПараметрыСканирования.ДопустимыеВидыПродукции = ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииИСМП(Истина);
	
	Возврат ПараметрыСканирования
	
КонецФункции

#КонецОбласти
	
&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЭлементыФормыНаСервере(Форма)
	
	Элементы = Форма.Элементы;
	Форма.РежимРаботыОдинКод = ЭтоОтображениеОдногоКода(Форма);
	
	Если Форма.РежимРаботыОдинКод Тогда
		Форма.Заголовок = НСтр("ru = 'Проверка кода маркировки ГИС МТ'");
	Иначе
		Форма.Заголовок = НСтр("ru = 'Проверка кодов маркировки ГИС МТ'");
	КонецЕсли;
	
	РежимНесколькоКодовМаркировки                = (Не Форма.РежимРаботыОдинКод);
	Элементы.ГруппаШапкаОдногоКода.Видимость     = Форма.РежимРаботыОдинКод;
	Элементы.ГруппаРабочаяОбластьЛевая.Видимость = РежимНесколькоКодовМаркировки;
	Элементы.Организация.Видимость               = (РежимНесколькоКодовМаркировки
		Или Не ЗначениеЗаполнено(Форма.ОрганизацияПриОткрытии));
	
	КартинкаТипУпаковки = БиблиотекаКартинок.УпаковкиПоВидамПродукцииИСМП;
	Элементы.ДеревоКодовМаркировкиИндексКартинкиВидаПродукции.КартинкаЗначений = КартинкаТипУпаковки;
	
	ТекстИнформации = Новый Массив();
	ТекстИнформации.Добавить(НСтр("ru = 'Производится логирование выполняемых запросов к ГИС МТ'"));
	Если Форма.РежимРаботыОдинКод Тогда
		ТекстИнформации.Добавить(" ");
		ТекстИнформации.Добавить(СтрШаблон(
			НСтр("ru = '(%1.)'"),
			Форма.Организация));
	КонецЕсли;
	
	Элементы.ДекорацияЛогЗапросовКонтрольСтатусов.Заголовок = Новый ФорматированнаяСтрока(ТекстИнформации);
	
	ТекстОписания = Новый Массив();
	ТекстОписания.Добавить(НСтр("ru = 'Информация по'"));
	ТекстОписания.Добавить(" ");
	Если Форма.РежимРаботыОдинКод Тогда
		ЭлементыДерева = Форма.ДеревоКодовМаркировки.ПолучитьЭлементы();
		ТекстОписания.Добавить(
			Новый ФорматированнаяСтрока(ЭлементыДерева[0].Штрихкод,,,, "СкопироватьШтриховойКодВБуферОбмена"));
	КонецЕсли;
	
	Элементы.ДекорацияКодМаркировки.Заголовок = Новый ФорматированнаяСтрока(ТекстОписания);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеПараметрыПриСоздании()
	
	СоответствствиеШтрихкодов = Новый Соответствие();
	
	Если ТипЗнч(Параметры.Штрихкоды) = Тип("Массив") Тогда
		
		Для Каждого СтрокаШтрихкод Из Параметры.Штрихкоды Цикл
			ДобавитьШтрихкодДляПроверки(СтрокаШтрихкод, СоответствствиеШтрихкодов);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Параметры.Штрихкоды) = Тип("СписокЗначений") Тогда
		
		Для Каждого СтрокаШтрихкод Из Параметры.Штрихкоды Цикл
			ДобавитьШтрихкодДляПроверки(СтрокаШтрихкод.Значение, СоответствствиеШтрихкодов);
		КонецЦикла;
		
	Иначе
		
		ДобавитьШтрихкодДляПроверки(Параметры.Штрихкоды, СоответствствиеШтрихкодов);
		
	КонецЕсли;
	
	ОрганизацияПриОткрытии = Параметры.Организация;
	РежимРаботыОдинКод     = ЭтоОтображениеОдногоКода(ЭтотОбъект);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПоискИУдалениеДублей") Тогда
		ПолноеИмяФормыОтчетаМестаИспользования = "Отчет.МестаИспользованияСсылок.Форма";
	КонецЕсли;
	
	ЦветТребуетВнимания   = ЦветаСтиля.ЦветТекстаТребуетВниманияГосИС;
	ЦветПроблема          = ЦветаСтиля.ЦветТекстаОтложенаПриПроверкеГосИС;
	ТекущаяДата           = ТекущаяДатаСеанса();
	
КонецПроцедуры

&НаКлиенте
Функция ИсходныйШтрихкодПоТекущейСтроке(ТекущиеДанные)
	
	Родитель = ТекущиеДанные.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		Возврат ТекущиеДанные.Штрихкод;
	Иначе
		Возврат ИсходныйШтрихкодПоТекущейСтроке(Родитель);
	КонецЕсли;
	
КонецФункции

#Область ОбработчикиКомандФормыНаСервере

&НаСервере
Процедура ДобавитьШтрихкодДляПроверки(Штрихкод, СоответствствиеШтрихкодов)
	
	Если Не ЗначениеЗаполнено(Штрихкод) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеШтрихкода = Новый Структура();
	ДанныеШтрихкода.Вставить("Штрихкод", Штрихкод);
	ИдентификаторНовойСтроки = НайтиДобавитьСтрокуДерева(ЭтотОбъект, ДанныеШтрихкода, СоответствствиеШтрихкодов);
	НоваяСтрока = ДеревоКодовМаркировки.НайтиПоИдентификатору(ИдентификаторНовойСтроки);
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеШтрихкода);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументыПоИдентификаторам(ДанныеДляОбработки)
	
	Если ДанныеДляОбработки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторыДокументов = Новый Массив();
	
	Для Каждого КлючИЗначение Из ДанныеДляОбработки Цикл
		ИдентификаторыДокументов.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ИдентификаторыДокументов", ИдентификаторыДокументов);
	Запрос.Текст = ИнтеграцияИСМППовтИсп.ТекстЗапросаПоискаДокументаПоИдентификаторуЗаявки();
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Для Каждого СтрокаТаблицы Из ТаблицаДокументов Цикл
		СтрокиДерева = ДанныеДляОбработки.Получить(СтрокаТаблицы.ИдентификаторЗаявки);
		Для Каждого СтрокаДерева Из СтрокиДерева Цикл
			СтрокаДерева.ПредставлениеПоследнегоДокумента = СтрокаТаблицы.Представление;
			Если УправлениеДоступом.ЧтениеРазрешено(СтрокаТаблицы.Ссылка) Тогда
				СтрокаДерева.ПоследнийДокумент = СтрокаТаблицы.Ссылка;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОписаниеGTIN(ДанныеДляОбработки)
	
	Если ДанныеДляОбработки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	GTINДляПроверки = Новый Массив();
	
	Для Каждого КлючИЗначение Из ДанныеДляОбработки Цикл
		GTINДляПроверки.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	ДанныеОписания = РегистрыСведений.ОписаниеGTINИС.ПолучитьОписание(GTINДляПроверки);
	
	Для Каждого КлючИЗначение Из ДанныеОписания Цикл
		
		СтрокиДляОбработки = ДанныеДляОбработки.Получить(КлючИЗначение.Ключ);
		Если СтрокиДляОбработки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(КлючИЗначение.Значение.КоличествоПотребительскихУпаковок) Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого СтрокаДляОбработки Из СтрокиДляОбработки Цикл
			Если Не ЗначениеЗаполнено(СтрокаДляОбработки.Коэффициент) Тогда
				СтрокаДляОбработки.Коэффициент = КлючИЗначение.Значение.КоличествоПотребительскихУпаковок;
			КонецЕсли;
			СтрокаДляОбработки.ЕстьПлановоеКоличествоПотребительскихУпаковокПоGTIN = Истина;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоОтображениеОдногоКода(Форма)
	
	ЭлементыДерева = Форма.ДеревоКодовМаркировки.ПолучитьЭлементы();
	
	Если ЭлементыДерева.Количество() = 1
		И ЭлементыДерева[0].ПолучитьЭлементы().Количество() = 0 Тогда
		Возврат (Не Форма.ЭтоНезависимоеОкно);
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#КонецОбласти
