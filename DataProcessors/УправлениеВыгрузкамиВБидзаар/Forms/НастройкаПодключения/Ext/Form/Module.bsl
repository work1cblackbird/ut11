// @strict-types

#Область ОписаниеПеременных

&НаКлиенте
Перем РезультатАвторизации; //Булево

&НаКлиенте
Перем ПутьКФайлуАвторизации; //Строка

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Параметры.Свойство("РазделУчета", РазделУчета);
	ВидЭТП = ИнтеграцияСЭлектроннымиТорговымиПлощадками.ПолучитьВидЭТПИлиРазделУчета(РазделУчета);
	УчетнаяЗаписьЭТП.ВидЭТП = ВидЭТП;

	Если Параметры.Свойство("Организация", УчетнаяЗаписьЭТП.Организация) Тогда

		ЗаполнитьДанныеПоОрганизации();
		Если ЗначениеЗаполнено(УчетнаяЗаписьСсылка) Тогда
			ПроверитьПодключениеНаСервере();
		КонецЕсли;
		Элементы.Организация.ТолькоПросмотр = Истина;

	КонецЕсли;

	Если РазделУчета = ИнтеграцияСЭлектроннымиТорговымиПлощадкамиКлиентСервер.РазделУчетаПоставщики() Тогда
		
		Результат = ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюСЭТПБидзаарДляПоставщиков");
		УстановитьЗначениеКонстантыПриНаличииПрав(Результат);
		
		Элементы.ДекорацияПодсказкаЛоготип.Заголовок = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Для подключения к сервису укажите организацию'") + " "
				+ НСтр("ru = 'и уникальный ключ API.'"));
		
		Элементы.ГруппаДанныеДляПокупателей.Видимость = Ложь;
		Элементы.ГруппаДанныеДляПоставщиков.Видимость = Результат;
		
	ИначеЕсли РазделУчета = ИнтеграцияСЭлектроннымиТорговымиПлощадкамиКлиентСервер.РазделУчетаПокупатели() Тогда
		
		Результат = ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюСЭТПБидзаарДляПокупателей");
		УстановитьЗначениеКонстантыПриНаличииПрав(Результат);
		
		Элементы.ДекорацияПодсказкаЛоготип.Заголовок = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Для подключения к сервису укажите организацию,'") + " "
				+ НСтр("ru = 'уникальный идентификатор клиента client_id'") + " "
				+ НСтр("ru = 'и секретный ключ client_secret.'"));
		
		Элементы.ГруппаДанныеДляПоставщиков.Видимость = Ложь;
		Элементы.ГруппаДанныеДляПокупателей.Видимость = Результат;
		Элементы.ДекорацияДоступенРежимВыгрузкиExcel.Видимость = Ложь;
		
	КонецЕсли;

	СформироватьОписаниеПолученияClient_secret();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьИнформациюОПодключении();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПроверитьНаличиеУчетнойЗаписи();
	ОбновитьИнформациюОПодключении();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПодсказкаClietn_secretОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ИзменитьВидимостьОписанияПолученияClient_secret" Тогда
		Элементы.ГруппаНастройкаПодключенияПравая.Видимость = Не Элементы.ГруппаНастройкаПодключенияПравая.Видимость;
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПроверитьПодключение(Команда)

	ОчиститьСообщения();

	ПроверитьПодключениеНаСервере();
	ОбновитьИнформациюОПодключении();
	
	Если УспешнаяАвторизация Тогда
		
		ПоказатьОповещениеПользователя(НСтр("ru = 'Подключение к ЭТП'"),,
			НСтр("ru = 'Подключение к сервису успешно выполнено.'"),
			БиблиотекаКартинок.Успешно32);
		
	Иначе
		
		ПоказатьОповещениеПользователя(НСтр("ru = 'Подключение к ЭТП'"),,
			НСтр("ru = 'Ошибка подключения к сервису.'"),
			БиблиотекаКартинок.Ошибка32);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)

	ОчиститьСообщения();

	ЗаписьУспешна = ЗаписатьДанныеВХранилище();

	Если ЗаписьУспешна Тогда
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("УчетнаяЗапись", УчетнаяЗаписьСсылка);
		ПараметрыОповещения.Вставить("Организация", УчетнаяЗаписьЭТП.Организация);
		ПараметрыОповещения.Вставить("УспешнаяАвторизация", УспешнаяАвторизация);
		ПараметрыОповещения.Вставить("РазделУчета", РазделУчета);
		Оповестить("Бидзаар_УчетнаяЗаписьАктивация", ПараметрыОповещения, УчетнаяЗаписьСсылка);
		Закрыть(ПараметрыОповещения);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПроверитьПодключениеПоставщикиНаСервере()

	Если Не ЗначениеЗаполнено(КлючAPI) Тогда
		ПроверкаПройдена = Ложь;

	Иначе
		
		ДанныеУчетнойЗаписи = Новый Структура;
		ДанныеУчетнойЗаписи.Вставить("ВидЭТП", УчетнаяЗаписьЭТП.ВидЭТП);
		
		Если КлючAPI = XMLСтрока(УчетнаяЗаписьСсылка) Тогда
			// Проверяет корректности ключа, ранее сохраненного в 1С
			ДанныеУчетнойЗаписи.Вставить("УчетнаяЗапись", УчетнаяЗаписьСсылка);
			ДанныеУчетнойЗаписи.Вставить("Организация", Неопределено);
			ДанныеУчетнойЗаписи.Вставить("KeyAPI", Неопределено);
	
		Иначе
			// Проверяет корректности нового ключа
			ДанныеУчетнойЗаписи.Вставить("УчетнаяЗапись", Неопределено);
			ДанныеУчетнойЗаписи.Вставить("Организация", УчетнаяЗаписьЭТП.Организация);
			ДанныеУчетнойЗаписи.Вставить("KeyAPI", КлючAPI);
		КонецЕсли;

		ПроверкаПройдена = ПроверитьПодключениеКСерверу(ДанныеУчетнойЗаписи, РазделУчета);
	КонецЕсли;

	Возврат ПроверкаПройдена;

КонецФункции

&НаСервере
Функция ПроверитьПодключениеПокупателиНаСервере()

	ПроверкаПройдена = Ложь;

	ДанныеУчетнойЗаписи = Новый Структура;
	ДанныеУчетнойЗаписи.Вставить("ВидЭТП", УчетнаяЗаписьЭТП.ВидЭТП);

	ИдентификаторУчетнойЗаписи = XMLСтрока(УчетнаяЗаписьСсылка);

	Если Client_id = ИдентификаторУчетнойЗаписи Или Client_secret = ИдентификаторУчетнойЗаписи Тогда

		//Проверка корректности ключей, ранее сохраненных в 1С
		ДанныеУчетнойЗаписи.Вставить("УчетнаяЗапись", УчетнаяЗаписьСсылка);
		ДанныеУчетнойЗаписи.Вставить("Организация", Неопределено);

		Если Client_id = ИдентификаторУчетнойЗаписи Тогда
			ДанныеУчетнойЗаписи.Вставить("client_id", Неопределено);
		Иначе
			ДанныеУчетнойЗаписи.Вставить("client_id", Client_id);
		КонецЕсли;
		Если Client_secret = ИдентификаторУчетнойЗаписи Тогда
			ДанныеУчетнойЗаписи.Вставить("client_secret", Неопределено);
		Иначе
			ДанныеУчетнойЗаписи.Вставить("client_secret", Client_secret);
		КонецЕсли;

	Иначе

		//Проверка корректности ключей до их сохранения в 1С
		ДанныеУчетнойЗаписи.Вставить("УчетнаяЗапись", Неопределено);
		ДанныеУчетнойЗаписи.Вставить("Организация", УчетнаяЗаписьЭТП.Организация);
		ДанныеУчетнойЗаписи.Вставить("client_id", Client_id);
		ДанныеУчетнойЗаписи.Вставить("client_secret", client_secret);

	КонецЕсли;

	ПроверкаПройдена = ПроверитьПодключениеКСерверу(ДанныеУчетнойЗаписи, РазделУчета);

	Возврат ПроверкаПройдена;

КонецФункции

&НаСервере
Процедура ПроверитьПодключениеНаСервере()
	
	Отказ = Ложь;
	
	ПроверитьОбязательныеРеквизиты(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если РазделУчета = ИнтеграцияСЭлектроннымиТорговымиПлощадкамиКлиентСервер.РазделУчетаПоставщики() Тогда
		УспешнаяАвторизация = ПроверитьПодключениеПоставщикиНаСервере();
	Иначе
		УспешнаяАвторизация = ПроверитьПодключениеПокупателиНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаличиеУчетнойЗаписи()

	ЭтоДубль = Ложь;

	КлючAPI = "";
	Client_id = "";
	Client_secret = "";

	ВидЭТП = ИнтеграцияСЭлектроннымиТорговымиПлощадками.ПолучитьВидЭТПИлиРазделУчета(РазделУчета);
	УчетнаяЗаписьСсылка = Справочники.УчетныеЗаписиЭлектронныхТорговыхПлощадок.ПустаяСсылка();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидЭТП", ВидЭТП);
	Запрос.УстановитьПараметр("Организация", УчетнаяЗаписьЭТП.Организация);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УчетныеЗаписиЭТП.Ссылка КАК УчетнаяЗаписьЭТП,
	|	УчетныеЗаписиЭТП.ПометкаУдаления КАК ПометкаУдаления,
	|	УчетныеЗаписиЭТП.ВидЭТП
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектронныхТорговыхПлощадок КАК УчетныеЗаписиЭТП
	|ГДЕ
	|	УчетныеЗаписиЭТП.ВидЭТП = &ВидЭТП
	|	И УчетныеЗаписиЭТП.Организация = &Организация
	|	И НЕ УчетныеЗаписиЭТП.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПометкаУдаления Возр";

	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);

	Если Не РезультатЗапроса.Пустой() Тогда

		ВыборкаДанныхПроверки = РезультатЗапроса.Выбрать();
		ВыборкаДанныхПроверки.Следующий();

		Если ВыборкаДанныхПроверки.ПометкаУдаления Тогда
			ЗаполнитьДанныеПоОрганизации();
		Иначе
			ЭтоДубль = Истина;
			ИнформацияОДубле = НСтр(
				"ru='Для организации %1 уже существует активная учетная запись. Создание новой учетной записи невозможно.'");
			Элементы.ДекорацияИнформацияОДубле.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ИнформацияОДубле, Строка(УчетнаяЗаписьЭТП.Организация));
		КонецЕсли;
	КонецЕсли;

	Элементы.ГруппаДанныеДляПоставщиков.Видимость = Не ЭтоДубль И РазделУчета = ИнтеграцияСЭлектроннымиТорговымиПлощадкамиКлиентСервер.РазделУчетаПоставщики();
	Элементы.ГруппаДанныеДляПокупателей.Видимость = Не ЭтоДубль И РазделУчета = ИнтеграцияСЭлектроннымиТорговымиПлощадкамиКлиентСервер.РазделУчетаПокупатели();
	Элементы.ГруппаИнформацияОДубле.Видимость = ЭтоДубль;
	Элементы.ПроверитьПодключение.Доступность = Не ЭтоДубль;
	Элементы.Сохранить.Доступность = Не ЭтоДубль;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьПодключениеКСерверу(ДанныеУчетнойЗаписи, Знач РазделУчета)

	Если РазделУчета = ИнтеграцияСЭлектроннымиТорговымиПлощадкамиКлиентСервер.РазделУчетаПоставщики() Тогда
		Результат = ИнтеграцияСЭлектроннымиТорговымиПлощадками.ПроверитьСвязьСЭТПБидзаарДляПоставщиков(ДанныеУчетнойЗаписи);
	ИначеЕсли РазделУчета = ИнтеграцияСЭлектроннымиТорговымиПлощадкамиКлиентСервер.РазделУчетаПокупатели() Тогда
		Результат = ИнтеграцияСЭлектроннымиТорговымиПлощадками.ПроверитьСвязьСЭТПБидзаарДляПокупателей(ДанныеУчетнойЗаписи);
	Иначе
		Возврат Ложь;
	КонецЕсли;

	Если Результат.КодСостояния = 200 Тогда
		Возврат Истина;
	Иначе
		ШаблонОшибки = НСтр("ru = 'Во время проверки подключения к HTTP-серверу произошла ошибка: %1 (%2)'");
		Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, Строка(
			Результат.КодСостояния), Результат.ТекстОшибки); // Строка
		СобытиеЖР = ИнтеграцияСЭлектроннымиТорговымиПлощадками.СобытиеЖурналаРегистрации(ДанныеУчетнойЗаписи.ВидЭТП);
		ЗаписьЖурналаРегистрации(СобытиеЖР, УровеньЖурналаРегистрации.Ошибка, , , Комментарий);
		Возврат Ложь;
	КонецЕсли;

КонецФункции

// Выполняет удаление временных данных, сформированных при авторизации
// 
// Параметры:
//  Результат - Строка - Результат выполнения команды отображения страницы авторизации
//  ДополнительныеПараметры - Структура - Дополнительные параметры:
//  	* АвторизацияУспешна - Булево
//  	* ПутьКФайлу - Строка.
//
&НаКлиенте
Процедура ЗапуститьПрограммуЗавершенияАвторизации(Результат, ДополнительныеПараметры) Экспорт

	РезультатАвторизации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры,
		"АвторизацияУспешна", Ложь);
	ПутьКФайлуАвторизации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ПутьКФайлу", "");

	ПодключитьОбработчикОжидания("УдалитьФайлРезультатаПодключения_Подключаемый", 1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура УдалитьФайлРезультатаПодключения_Подключаемый()

	Если ЗначениеЗаполнено(ПутьКФайлуАвторизации) Тогда
		Попытка
			УдалитьФайлы(Строка(ПутьКФайлуАвторизации));
		Исключение
			ЗаписатьОшибкуУдаленияФайла(Строка(ПутьКФайлуАвторизации), ОбработкаОшибок.ПодробноеПредставлениеОшибки(
				ИнформацияОбОшибке()),
				ИнтеграцияСЭлектроннымиТорговымиПлощадкамиВызовСервера.ПолучитьВидЭТПИлиРазделУчета(РазделУчета));
		КонецПопытки;
	КонецЕсли;

	Если РезультатАвторизации = Истина Тогда
		Оповестить("ВывестиСообщение", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Подключение организации <%1> выполнено успешно.'"), Строка(УчетнаяЗаписьЭТП.Организация)));
		Закрыть();
	КонецЕсли;

КонецПроцедуры

// Записывает ошибку удаления файла в журнал регистрации
// 
// Параметры:
//  ПутьФайлу - Строка - Путь файлу
//  ПредставлениеОшибки - Строка - Представление ошибки
//  ВидЭТП - ПеречислениеСсылка.ВидыЭлектронныхТорговыхПлощадок - Вид ЭТП
&НаСервереБезКонтекста
Процедура ЗаписатьОшибкуУдаленияФайла(ПутьФайлу, ПредставлениеОшибки, ВидЭТП)

	ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не удалось удалить временный файл <%1> по причине: %2'", ОбщегоНазначения.КодОсновногоЯзыка()),
		ПутьФайлу, ПредставлениеОшибки);
	ЗаписьЖурналаРегистрации(ИнтеграцияСЭлектроннымиТорговымиПлощадками.СобытиеЖурналаРегистрации(ВидЭТП),
		УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки);

КонецПроцедуры

&НаСервере
Функция ЗаписатьДанныеВХранилище()
	
	Отказ = Ложь;

	ПроверитьОбязательныеРеквизиты(Отказ, Истина);

	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаписьУспешна = Истина;

	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);

	Попытка

		Если ЗначениеЗаполнено(УчетнаяЗаписьСсылка) Тогда
			БлокировкаДанных = Новый БлокировкаДанных;
			ЗаблокироватьДанныеДляРедактирования(УчетнаяЗаписьСсылка);
			ЭлементБлокировки = БлокировкаДанных.Добавить("Справочник.УчетныеЗаписиЭлектронныхТорговыхПлощадок");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", УчетнаяЗаписьСсылка);
			БлокировкаДанных.Заблокировать();

			УчетнаяЗаписьОбъект = УчетнаяЗаписьСсылка.ПолучитьОбъект();
			УстановитьНаименование = УчетнаяЗаписьОбъект.Организация <> УчетнаяЗаписьЭТП.Организация;
			УчетнаяЗаписьОбъект.Организация = УчетнаяЗаписьЭТП.Организация;
			УчетнаяЗаписьОбъект.ПометкаУдаления = Ложь;
		Иначе
			БлокировкаДанных = Новый БлокировкаДанных;
			ЗаблокироватьДанныеДляРедактирования(УчетнаяЗаписьЭТП.Ссылка);
			ЭлементБлокировки = БлокировкаДанных.Добавить("Справочник.УчетныеЗаписиЭлектронныхТорговыхПлощадок");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", УчетнаяЗаписьЭТП.Ссылка);
			БлокировкаДанных.Заблокировать();

			УчетнаяЗаписьОбъект = РеквизитФормыВЗначение("УчетнаяЗаписьЭТП", Тип(
				"СправочникОбъект.УчетныеЗаписиЭлектронныхТорговыхПлощадок"));
			УстановитьНаименование = Истина;
		КонецЕсли;

		Если УстановитьНаименование Тогда
			УчетнаяЗаписьОбъект.Наименование = Строка(УчетнаяЗаписьОбъект.Организация);
		КонецЕсли;

		УчетнаяЗаписьОбъект.ВидЭТП = ИнтеграцияСЭлектроннымиТорговымиПлощадками.ПолучитьВидЭТПИлиРазделУчета(РазделУчета);
		УчетнаяЗаписьОбъект.Записать();

		ИдентификаторУчетнойЗаписи = XMLСтрока(УчетнаяЗаписьОбъект.Ссылка);

		ВладелецЗаписиХранилища = ИнтеграцияСЭлектроннымиТорговымиПлощадками.ПрефиксыСервиса(
			УчетнаяЗаписьОбъект.ВидЭТП).НастройкиСервиса + ИдентификаторУчетнойЗаписи;

		УстановитьПривилегированныйРежим(Истина);
		КлючиДоступа = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ВладелецЗаписиХранилища, "КлючиДоступа");
		
		Если ТипЗнч(КлючиДоступа) <> Тип("Структура") Тогда
			КлючиДоступа = Новый Структура;
		КонецЕсли;
		
		СохранитьКлючиДоступа = Ложь;

		Если КлючAPI <> ИдентификаторУчетнойЗаписи Тогда
			КлючиДоступа.Вставить("KeyAPI", КлючAPI);
			КлючAPI = ?(ЗначениеЗаполнено(КлючAPI), ИдентификаторУчетнойЗаписи, "");
			СохранитьКлючиДоступа = Истина;
		КонецЕсли;
		Если Client_id <> ИдентификаторУчетнойЗаписи Тогда
			КлючиДоступа.Вставить("client_id", Client_id);
			Client_id = ?(ЗначениеЗаполнено(Client_id), ИдентификаторУчетнойЗаписи, "");
			СохранитьКлючиДоступа = Истина;
		КонецЕсли;
		Если Client_secret <> ИдентификаторУчетнойЗаписи Тогда
			КлючиДоступа.Вставить("client_secret", Client_secret);
			Client_secret = ?(ЗначениеЗаполнено(Client_secret), ИдентификаторУчетнойЗаписи, "");
			СохранитьКлючиДоступа = Истина;
		КонецЕсли;
		 
		Если СохранитьКлючиДоступа Тогда
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ВладелецЗаписиХранилища, КлючиДоступа, "КлючиДоступа");
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Ложь);

		ЗафиксироватьТранзакцию();

		УчетнаяЗаписьСсылка = УчетнаяЗаписьОбъект.Ссылка;

	Исключение

		ОтменитьТранзакцию();

		ЗаписьУспешна = Ложь;

		ШаблонСообщения = НСтр("ru = 'Не удалось выполнить подключение по причине: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;

	Возврат ЗаписьУспешна;

КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеПоОрганизации()

	УчетнаяЗаписьСсылка = Справочники.УчетныеЗаписиЭлектронныхТорговыхПлощадок.УчетнаяЗаписьОрганизации(
		ИнтеграцияСЭлектроннымиТорговымиПлощадками.ПолучитьВидЭТПИлиРазделУчета(РазделУчета),
		УчетнаяЗаписьЭТП.Организация);

	Если ЗначениеЗаполнено(УчетнаяЗаписьСсылка) Тогда

		ЗначениеВРеквизитФормы(УчетнаяЗаписьСсылка.ПолучитьОбъект(), "УчетнаяЗаписьЭТП");

		ИдентификаторУчетнойЗаписи = XMLСтрока(УчетнаяЗаписьСсылка);

		ВладелецЗаписиХранилища = ИнтеграцияСЭлектроннымиТорговымиПлощадками.ПрефиксыСервиса(
			УчетнаяЗаписьЭТП.ВидЭТП).НастройкиСервиса + ИдентификаторУчетнойЗаписи;

		УстановитьПривилегированныйРежим(Истина);
		КлючиДоступа = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ВладелецЗаписиХранилища, "КлючиДоступа");
		УстановитьПривилегированныйРежим(Ложь);

		Если КлючиДоступа <> Неопределено Тогда
			
			ЗначениеКлюча = "";
			КлючиДоступа.Свойство("KeyAPI", ЗначениеКлюча);
			КлючAPI = ?(ЗначениеЗаполнено(ЗначениеКлюча), ИдентификаторУчетнойЗаписи, "");
			
			КлючиДоступа.Свойство("client_id", ЗначениеКлюча);
			Client_id = ?(ЗначениеЗаполнено(ЗначениеКлюча), ИдентификаторУчетнойЗаписи, "");
			
			КлючиДоступа.Свойство("client_secret", ЗначениеКлюча);
			Client_secret = ?(ЗначениеЗаполнено(ЗначениеКлюча), ИдентификаторУчетнойЗаписи, "");
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформациюОПодключении()
	
	Если УспешнаяАвторизация Тогда
		
		Элементы.ДекорацияДоступенРежимAPI.Картинка = БиблиотекаКартинок.ОформлениеЗнакФлажок;
		Элементы.ДекорацияДоступенРежимAPI.Подсказка = НСтр("ru = 'Доступна работа c Бидзаар'");
		
	Иначе
		
		Элементы.ДекорацияДоступенРежимAPI.Картинка = БиблиотекаКартинок.ОформлениеЗнакКрест;
		Элементы.ДекорацияДоступенРежимAPI.Подсказка = НСтр("ru = 'Работа с Бидзаар недоступна'");
		
	КонецЕсли;
	
КонецПроцедуры

// Проверить обязательные реквизиты.
// 
// Параметры:
//  Отказ - Булево - Результат проверки
&НаСервере
Процедура ПроверитьОбязательныеРеквизиты(Отказ, ЭтоЗапись = Ложь)

	Если РазделУчета = ИнтеграцияСЭлектроннымиТорговымиПлощадкамиКлиентСервер.РазделУчетаПокупатели() Тогда
		Если ПустаяСтрока(Client_secret) Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Поле ""%1"" не заполнено'"), "client_secret");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "Client_secret", , Отказ);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Client_id) Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Поле ""%1"" не заполнено'"), "client_id");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "Client_id", , Отказ);
		КонецЕсли;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(УчетнаяЗаписьЭТП.Организация) Тогда
		ТекстОшибки = НСтр("ru = 'Поле ""Организация"" не заполнено'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "Организация", "УчетнаяЗаписьЭТП", Отказ);
	КонецЕсли;
	Если ЭтоЗапись И Не УспешнаяАвторизация
		И РазделУчета = ИнтеграцияСЭлектроннымиТорговымиПлощадкамиКлиентСервер.РазделУчетаПокупатели() Тогда
		ТекстОшибки = НСтр("ru = 'Перед сохранением необходимо успешно авторизоваться в сервисе, проверив подключение'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , , , Отказ);
	КонецЕсли;

КонецПроцедуры

// Установить значение константы в Истина при наличии прав.
// 
// Параметры:
//  Результат - Булево - Значение константы
&НаСервере
Процедура УстановитьЗначениеКонстантыПриНаличииПрав(Результат)

		Если Не Результат И ИнтеграцияСЭлектроннымиТорговымиПлощадками.ДоступноПравоНастройкиАвторизацииБидзаар() Тогда

			Если РазделУчета = ИнтеграцияСЭлектроннымиТорговымиПлощадкамиКлиентСервер.РазделУчетаПоставщики()
				И ИнтеграцияСЭлектроннымиТорговымиПлощадками.ДоступноПравоАктивацииИнтеграцииДляПоставщиковБидзаар() Тогда
				Константы.ИспользоватьИнтеграциюСЭТПБидзаарДляПоставщиков.Установить(Истина);
				Результат = Истина;
				ОбновитьПовторноИспользуемыеЗначения();
			ИначеЕсли РазделУчета = ИнтеграцияСЭлектроннымиТорговымиПлощадкамиКлиентСервер.РазделУчетаПокупатели()
				И ИнтеграцияСЭлектроннымиТорговымиПлощадками.ДоступноПравоАктивацииИнтеграцииДляПокупателейБидзаар() Тогда
				Константы.ИспользоватьИнтеграциюСЭТПБидзаарДляПокупателей.Установить(Истина);
				Результат = Истина;
				ОбновитьПовторноИспользуемыеЗначения();
			КонецЕсли;

		КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СформироватьОписаниеПолученияClient_secret()
		
		ОписаниеПолученияClient_secret = "
		|<HTML>
		|<FONT size=2>
		|<b>1. Подача заявки на получение интеграции</b>
		|<br>
		|Отправьте заявку на получение интеграции на почту <a href=""mailto:bidconnect@bidzaar.com"">bidconnect@bidzaar.com</a>. Укажите ваше имя, должность, контактную информацию и детали компании.
		|<br>
		|<br>
		|<b>2. Подписание документов</b>
		|<br>
		|После получения вашей заявки, мы свяжемся с вами для заключения договора и подписания дополнительного соглашения о передаче ключей.
		|<br>
		|<br>
		|<b>3. Регистрация на Bidzaar</b>
		|<br>
		|Для получения доступа к коннектору необходимо быть зарегистрированным на платформе Bidzaar. После заключения договора зарегистрируйте компанию на bidzaar.com. Каждый пользователь внутри вашей компании получит уникальный логин и пароль для доступа.
		|<br>
		|<br>
		|<b>4. Запрос на предоставление доступа к коннектору</b>
		|<br>
		|После подписания всех документов отправьте запрос с рабочего домена на почту <a href=""mailto:bidconnect@bidzaar.com"">bidconnect@bidzaar.com</a> с просьбой прислать логин и пароль для активации коннектора.
		|<br>
		|<br>
		|<b>5. Получение логина и пароля</b>
		|<br>
		|Мы сформируем и отправим вам логин и пароль для активации коннектора.
		|</FONT>
		|</HTML>";
	
КонецПроцедуры

#КонецОбласти
