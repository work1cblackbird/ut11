// @strict-types
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюСЭТПБидзаарДляПоставщиков") Тогда
		
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(НСтр(
			"ru = 'Интеграция с ЭТП Бидзаар для поставщиков не активирована, обратитесь к администратору.'"));
		Возврат;
		
	КонецЕсли;
	
	ВосстановитьНастройки();
	
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектронныхТорговыхПлощадок.ОсновнаяУчетнаяЗапись(
			Перечисления.ВидыЭлектронныхТорговыхПлощадок.БидзаарПоставщики);
		Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗапись, "Организация");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПоляФормированияПредставления) Тогда
		ЗаполнитьПоляПредставления();
	КонецЕсли;

	УстановитьПараметрыДинамическогоСписка();

	УстановитьУсловноеОформление();
	ОбновитьКнопкуОтбораПоСтатусу(Команды.ОтборПоказатьВсе.Имя);

	ИнтеграцияСЭлектроннымиТорговымиПлощадкамиПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ,
		СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметры, Источник)

	Если ИмяСобытия = "Бидзаар_УчетнаяЗаписьАктивация" И ТипЗнч(Параметры) = Тип("Структура") Тогда
		
		РазделУчета = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "РазделУчета", "");
		Если РазделУчета = ИнтеграцияСЭлектроннымиТорговымиПлощадкамиКлиентСервер.РазделУчетаПоставщики() Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры);
			УчетнаяЗаписьПриИзмененииНаСервере();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Бидзаар_УчетнаяЗаписьДеактивация" И УчетнаяЗапись = Источник Тогда
		
		УчетнаяЗапись = ПредопределенноеЗначение("Справочник.УчетныеЗаписиЭлектронныхТорговыхПлощадок.ПустаяСсылка");
		УчетнаяЗаписьПриИзмененииНаСервере();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если Не ЗавершениеРаботы Тогда
		СохранитьНастройки();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура УчетнаяЗаписьСоздание(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РазделУчета", ИнтеграцияСЭлектроннымиТорговымиПлощадкамиКлиентСервер.РазделУчетаПоставщики());
	ОткрытьФорму("Обработка.УправлениеВыгрузкамиВБидзаар.Форма.НастройкаПодключения", ПараметрыФормы, ЭтотОбъект,
		УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура УчетнаяЗаписьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	Если Не ЕстьДоступнаяУчетнаяЗапись() Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РазделУчета", ИнтеграцияСЭлектроннымиТорговымиПлощадкамиКлиентСервер.РазделУчетаПоставщики());
		ОткрытьФорму("Обработка.УправлениеВыгрузкамиВБидзаар.Форма.НастройкаПодключения", ПараметрыФормы, ЭтотОбъект,
			УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УчетнаяЗаписьПриИзменении(Элемент)

	УчетнаяЗаписьПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура УчетнаяЗаписьОткрытие(Элемент, СтандартнаяОбработка)

	Если Не УчетнаяЗапись.Пустая() Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РазделУчета", ИнтеграцияСЭлектроннымиТорговымиПлощадкамиКлиентСервер.РазделУчетаПоставщики());
		ПараметрыФормы.Вставить("Организация", Организация);
		ПараметрыФормы.Вставить("УчетнаяЗапись", УчетнаяЗапись);
		ОткрытьФорму("Обработка.УправлениеВыгрузкамиВБидзаар.Форма.НастройкаПодключения", ПараметрыФормы, ЭтотОбъект,
			УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПоляФормированияПредставления

&НаКлиенте
Процедура ПоляФормированияПредставленияПередНачаломИзменения(Элемент, Отказ)

	ОчиститьСообщения();

	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Отказ = Ложь;
	Если Элемент.ТекущиеДанные.Значение = "Наименование" Тогда
		НаименованиеПолное = ПоляФормированияПредставления.НайтиПоЗначению("НаименованиеПолное");
		Если НаименованиеПолное <> Неопределено Тогда
			НаименованиеПолное.Пометка = Элемент.ТекущиеДанные.Пометка;
		Иначе
			Отказ = Элемент.ТекущиеДанные.Пометка <> Ложь;
			Элемент.ТекущиеДанные.Пометка = Истина;
		КонецЕсли;
	ИначеЕсли Элемент.ТекущиеДанные.Значение = "НаименованиеПолное" Тогда
		НаименованиеПолное = ПоляФормированияПредставления.НайтиПоЗначению("Наименование");
		Если НаименованиеПолное <> Неопределено Тогда
			НаименованиеПолное.Пометка = Элемент.ТекущиеДанные.Пометка;
		Иначе
			Отказ = Элемент.ТекущиеДанные.Пометка <> Ложь;
			Элемент.ТекущиеДанные.Пометка = Истина;
		КонецЕсли;
	КонецЕсли;

	Если Отказ Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр(
				"ru = 'Поле ""Номенклатура"" является основным, его нельзя отключить'"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоляФормированияПредставленияПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыгрузитьДанные(Команда)

	ОчиститьСообщения();
	
	ПередВыгрузкойДанных(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияПоОтбору(Команда)

	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Обработка.УправлениеВыгрузкамиВБидзаар.Форма.ВыгрузкаДанных.ДействияПоОтбору");
		
	ОчиститьСообщения();

	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Учетная запись"" не заполнено'"), ,
			"УчетнаяЗапись", "УчетнаяЗапись", Отказ);
	КонецЕсли;

	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	ДополнительныеПараметры = Новый Структура("ИмяКоманды", Команда.Имя);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПодбораТоваровУслуг", ЭтотОбъект, ДополнительныеПараметры);

	ФормаИмя = "";
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ПараметрыФормы.Вставить("Организация", Организация);

	ИнтеграцияСЭлектроннымиТорговымиПлощадкамиКлиентПереопределяемый.ПриОпределенииФормыПодбораИПараметров(Команда.Имя,
		ФормаИмя, ПараметрыФормы);

	Если ФормаИмя = "" Тогда
		ФормаИмя = "Обработка.УправлениеВыгрузкамиВБидзаар.Форма.УсловияОтбораНоменклатуры";
		Для Каждого ПараметрФормы Из ПараметрыФормыУсловияОтбораНоменклатуры() Цикл
			ПараметрыФормы.Вставить(ПараметрФормы.Ключ, ПараметрФормы.Значение);
		КонецЦикла;
	КонецЕсли;

	ОткрытьФорму(ФормаИмя, ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор, , , ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура Добавить(Команда)

	ПараметрыФормы = ПолучитьПараметрыЗаполнения();

	ОткрытьФорму("РегистрСведений.СтатусыПубликацииТоваровЭТП.Форма.ФормаЗаписи", Новый Структура("ЗначенияЗаполнения",
		ПараметрыФормы), ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура НастройкиОтмена(Команда)
	
	ОчиститьСообщения();
	ВосстановитьНастройки("ПоляФормированияПредставления");
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПросмотрИРедактированиеДанныхВыгрузки;
	УстановитьУсловноеОформление();

КонецПроцедуры

&НаКлиенте
Процедура НастройкиСохранить(Команда)

	ОчиститьСообщения();
	СохранитьНастройки();
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПросмотрИРедактированиеДанныхВыгрузки;
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиСтандартные(Команда)
	
	ОчиститьСообщения();
	ПоляФормированияПредставления.Очистить();
	ЗаполнитьПоляПредставления();
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройки(Команда)

	ОчиститьСообщения();
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаНастройки;
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура Подобрать(Команда)

	ОчиститьСообщения();

	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Учетная запись"" не заполнено'"), ,
			"УчетнаяЗапись", "УчетнаяЗапись", Отказ);
	КонецЕсли;

	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	ДополнительныеПараметры = Новый Структура("ИмяКоманды", Команда.Имя);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПодбораТоваровУслуг", ЭтотОбъект, ДополнительныеПараметры);

	ФормаИмя = "";
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);

	ИнтеграцияСЭлектроннымиТорговымиПлощадкамиКлиентПереопределяемый.ПриОпределенииФормыПодбораИПараметров(Команда.Имя,
		ФормаИмя, ПараметрыФормы);
		
	Если ФормаИмя <> "" Тогда
		ОткрытьФорму(ФормаИмя, ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор, , , ОписаниеОповещения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УдалитьВсеСтроки(Команда)

	ОчиститьСообщения();

	ЗаголовокВопроса = НСтр("ru = 'Удалить все записи?'");
	ОписаниеВопроса = НСтр("ru = 'Данное действие не влияет на данные, ранее выгруженные на ЭТП ""Бидзаар""'");
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОтветаУдалитьВсеСтроки", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ОписаниеВопроса, РежимДиалогаВопрос.ДаНет, , , ЗаголовокВопроса);

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВExcel(Команда)
	
	ОчиститьСообщения();
	
	#Если ВебКлиент Тогда
	Оповещение = Новый ОписаниеОповещения("ВыгрузитьВExcelЗавершениеПодключенияРасширения", ЭтотОбъект);
	ТекстСообщения = НСтр("ru = 'Для выгрузки в Excel необходимо установить расширение работы с файлами.'");
	ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(Оповещение, ТекстСообщения);
	#Иначе
	ВыгрузитьВExcelЗавершение();
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКПубликации(Команда)
	УстановитьОтбор("Статус", ПредопределенноеЗначение("Перечисление.СтатусыОбъектовЭТП.КПубликации"),
		Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ОтборВыгружено(Команда)
	УстановитьОтбор("Статус", ПредопределенноеЗначение("Перечисление.СтатусыОбъектовЭТП.Выгружено"),
		Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоказатьВсе(Команда)
	УстановитьОтбор("", "", Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокПодключений(Команда)
	
	ОчиститьСообщения();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("УчетнаяЗапись", УчетнаяЗапись);
	ПараметрыФормы.Вставить("РазделУчета", "Поставщики");
	
	ОткрытьФорму("Обработка.УправлениеВыгрузкамиВБидзаар.Форма.СписокПодключенийКСервису", ПараметрыФормы, ЭтотОбъект,
			УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ВосстановитьНастройки(СписокСвойств = Неопределено)

	Если Не Пользователи.РолиДоступны("СохранениеДанныхПользователя") Тогда
		Возврат;
	КонецЕсли;

	ЗначениеНастроек = ХранилищеОбщихНастроек.Загрузить(ИмяФормы);

	Если ТипЗнч(ЗначениеНастроек) = Тип("Структура") Тогда
		Если СписокСвойств = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗначениеНастроек);
		Иначе
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗначениеНастроек, СписокСвойств);
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Если Не Справочники.УчетныеЗаписиЭлектронныхТорговыхПлощадок.УчетнаяЗаписьАктуальна(УчетнаяЗапись,
			Перечисления.ВидыЭлектронныхТорговыхПлощадок.БидзаарПоставщики) Тогда
			УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектронныхТорговыхПлощадок.ПустаяСсылка();
			Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗапись, "Организация");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Выполнить запрос в фоне.
// 
// Параметры:
//  ПараметрыОперации - Структура - Параметры операции:
//  * ВариантВыгрузки - Число
// 
// Возвращаемое значение:
//  Неопределено, Структура
&НаСервере
Функция ВыполнитьЗапросВФоне(ПараметрыОперации)

	ДополнитьПараметрыОперации(ПараметрыОперации);

	Если ПараметрыОперации = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	ЗаполнитьЗначенияСвойств(ПараметрыВыполнения, ПараметрыОперации);

	ИмяПроцедуры = "";
	ПараметрыОперации.Свойство("ИмяПроцедуры", ИмяПроцедуры);
	ФоновоеЗадание = ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыОперации, ПараметрыВыполнения);

	ПараметрыОперации.Удалить("Список");

	Возврат ФоновоеЗадание;

КонецФункции

// Дополнить параметры операции по начальным условиям.
// 
// Параметры:
//  ВариантВыгрузки - Число - Вариант выгрузки
// 	ИмяКоманды - Строка - Команда инициатор
// 	
// Возвращаемое значение:
//  Неопределено, Структура
&НаСервере
Процедура ДополнитьПараметрыОперации(ПараметрыОперации)

	ВариантВыгрузки = 0;
	ПараметрыОперации.Свойство("ВариантВыгрузки", ВариантВыгрузки);

	Если ВариантВыгрузки = 1 Или ВариантВыгрузки = 3 Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса("ПередВыгрузкойДанных");
		Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
		Запрос.УстановитьПараметр("ВариантВыгрузки", ВариантВыгрузки);
		РезультатЗапроса = Запрос.Выполнить();

		Если РезультатЗапроса.Пустой() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Нет данных для выгрузки'"));
			ПараметрыОперации = Неопределено;
			Возврат;
		КонецЕсли;

	ИначеЕсли ВариантВыгрузки = 2 Тогда

		Список = Новый ТаблицаЗначений;
		Список.Колонки.Добавить("Номенклатура",
			Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.НоменклатураИнтеграцияСЭлектроннымиТорговымиПлощадками.Тип));
		Список.Колонки.Добавить("Характеристика",
			Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатурыИнтеграцияСЭлектроннымиТорговымиПлощадками.Тип));

		Для Каждого КлючЗаписи Из Элементы.ДанныеВыгрузки.ВыделенныеСтроки Цикл
			Запись = РегистрыСведений.СтатусыПубликацииТоваровЭТП.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, КлючЗаписи);
			Запись.Прочитать();
			Если Запись.Выбран() Тогда
				ЗаполнитьЗначенияСвойств(Список.Добавить(), Запись);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр(
					"ru = 'Данные не актуальны, обновите табличную часть и повторите'"));
				ПараметрыОперации = Неопределено;
				Возврат;
			КонецЕсли;
		КонецЦикла;
		ПараметрыОперации.Вставить("Список", Список);

	КонецЕсли;

	ПараметрыОперации.Вставить("ВыводитьОкноОжидания", Истина);
	ПараметрыОперации.Вставить("ИмяПроцедуры",
		"ИнтеграцияСЭлектроннымиТорговымиПлощадками.ПубликацияТоваровИУслугБидзаар");
	ПараметрыОперации.Вставить("НаименованиеФоновогоЗадания", НСтр("ru = 'Публикация данных'"));
	ПараметрыОперации.Вставить("УчетнаяЗапись", УчетнаяЗапись);
	ПараметрыОперации.Вставить("ЛимитПозицийНаИтерацию", 1000);
	ПараметрыОперации.Вставить("ОжидатьЗавершение", 0);
	ПараметрыОперации.Вставить("ЗапуститьВФоне", Истина);

КонецПроцедуры

&НаСервере
Функция ЕстьДоступнаяУчетнаяЗапись()

	Возврат Справочники.УчетныеЗаписиЭлектронныхТорговыхПлощадок.ЕстьДоступнаяУчетнаяЗапись(
		Перечисления.ВидыЭлектронныхТорговыхПлощадок.БидзаарПоставщики);

КонецФункции

&НаСервере
Процедура ЗаполнитьПоляПредставления()

	ТипыНоменклатураЭТП = Метаданные.ОпределяемыеТипы.НоменклатураИнтеграцияСЭлектроннымиТорговымиПлощадками.Тип.Типы();

	Если ТипыНоменклатураЭТП.Количество() = 0 Тогда
		ВызватьИсключение (НСтр("ru = 'Не определен тип Номенклатуры, обратитесь к администратору'"));
	КонецЕсли;

	НоменклатураЭТП = ТипыНоменклатураЭТП[0];
	ЕстьНаименованиеПолное = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
			Новый (НоменклатураЭТП), "НаименованиеПолное");

	СтруктураНаименование = ПолучитьНовуюСтруктуруЭлементаСпискаЗначений();
	СтруктураНаименование.Значение = "Наименование";
	СтруктураНаименование.Представление = НСтр("ru = 'Номенклатура (Наименование)'");
	СтруктураНаименование.Пометка = Не ЕстьНаименованиеПолное;
	ЗаполнитьЗначенияСвойств(ПоляФормированияПредставления.Добавить(), СтруктураНаименование);

	Если ЕстьНаименованиеПолное Тогда
		СтруктураНаименование = ПолучитьНовуюСтруктуруЭлементаСпискаЗначений();
		СтруктураНаименование.Значение = "НаименованиеПолное";
		СтруктураНаименование.Представление = НСтр("ru = 'Номенклатура (Наименование для печати)'");
		СтруктураНаименование.Пометка = ЕстьНаименованиеПолное;
		ЗаполнитьЗначенияСвойств(ПоляФормированияПредставления.Добавить(), СтруктураНаименование);
	КонецЕсли;

	ХарактеристикиЭТП = Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатурыИнтеграцияСЭлектроннымиТорговымиПлощадками;
	Если ХарактеристикиЭТП.Тип.Типы().Количество() > 0 Тогда
		СтруктураХарактеристика = ПолучитьНовуюСтруктуруЭлементаСпискаЗначений();
		СтруктураХарактеристика.Значение = "Характеристика";
		СтруктураХарактеристика.Пометка = Ложь;
		СтруктураХарактеристика.Представление = НСтр("ru = 'Характеристика'");
		ЗаполнитьЗначенияСвойств(ПоляФормированияПредставления.Добавить(), СтруктураХарактеристика);
	КонецЕсли;

	ИнтеграцияСЭлектроннымиТорговымиПлощадкамиПереопределяемый.ПриОпределенииПолейПредставления(
		ПоляФормированияПредставления);

КонецПроцедуры

// Обрабатывает строку данных.
// 
// Параметры:
//  ТекущиеДанные - СтрокаТаблицыЗначений
//  Реквизиты - Структура - Значения реквизитов по выбранным полям
//  ВыбранныеПоля - Массив из Строка - Выбранные поля формирования представления номенклатуры для выгрузки
&НаКлиентеНаСервереБезКонтекста
Процедура ОбработатьСтрокуДанныхВыгрузки(ТекущиеДанные, Реквизиты, ВыбранныеПоля)

	МассивПредставления = Новый Массив; // Массив из Строка
	Значение = "";
	Для Каждого Поле Из ВыбранныеПоля Цикл
		Если Поле = "Характеристика" Тогда
			Значение = Строка(ТекущиеДанные.Характеристика);
		Иначе
			Реквизиты.Свойство(Поле, Значение);
		КонецЕсли;
		Если ЗначениеЗаполнено(Значение) Тогда
			МассивПредставления.Добавить(Значение);
		ИначеЕсли СтрНайти(Поле,"Наименование") > 0 Тогда
			МассивПредставления.Добавить(Строка(ТекущиеДанные.Номенклатура));
		КонецЕсли;
	КонецЦикла;
	ТекущиеДанные.ПредставлениеНоменклатуры = СтрСоединить(МассивПредставления, ", ");

КонецПроцедуры

&НаСервере
Функция ПолучитьНовуюСтруктуруЭлементаСпискаЗначений()
	Возврат Новый Структура("Значение, Представление, Пометка, Картинка", Неопределено, "", Истина, Новый Картинка);
КонецФункции

// Перезаполняет данные выгрузки.
// 
// Параметры:
//  Результат - Строка, Неопределено
//  Параметры - Структура
&НаСервере
Процедура ОбработатьДанныеНаСервере(Результат = Неопределено, Параметры = Неопределено)

	ЕстьВременноеХранилище = Ложь;

	Если ЭтоАдресВременногоХранилища(Результат) Тогда
		Список = ПолучитьИзВременногоХранилища(Результат);
		ЕстьВременноеХранилище = Истина;
	ИначеЕсли ТипЗнч(Результат) = Тип("НастройкиКомпоновкиДанных") Тогда
		Список = Обработки.УправлениеВыгрузкамиВБидзаар.ДанныеПоОтборуНоменклатуры(Результат);
	КонецЕсли;

	Если ЗначениеЗаполнено(Список) Тогда
		Если ТипЗнч(Список) = Тип("ТаблицаЗначений") Тогда
			
			Если Список.Колонки.Найти("Характеристика") = Неопределено Тогда
				ТипХарактеристики = Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатурыИнтеграцияСЭлектроннымиТорговымиПлощадками.Тип;
				Список.Колонки.Добавить("Характеристика", Новый ОписаниеТипов(ТипХарактеристики));
			КонецЕсли;
			
			ИмяКоманды = "";
			Если Параметры.Свойство("ИмяКоманды", ИмяКоманды) Тогда
				Если ИмяКоманды = "Подобрать" Или ИмяКоманды = "ДобавитьПоОтбору" Тогда
					
					Запрос = Новый Запрос;
					Запрос.Текст = ТекстЗапроса("ПередДобавлениемДанных");
					Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
					Запрос.УстановитьПараметр("Список", Список);
					СписокОбработанный = Запрос.Выполнить().Выгрузить();

					ПараметрыОбработки = ПолучитьСтруктуруОбработкиСтрок(СписокОбработанный.ВыгрузитьКолонку(
						"Номенклатура"));
					Для Каждого Строка Из СписокОбработанный Цикл
						ОбработатьСтрокуДанныхВыгрузки(Строка,
							ПараметрыОбработки.ЗначенияРеквизитов[Строка.Номенклатура],
							ПараметрыОбработки.ВыбранныеПоля);
					КонецЦикла;
					
					НаборЗаписей = ПолучитьНаборЗаписейСтатусыЭТП();
					НаборЗаписей.Загрузить(СписокОбработанный);		
					НаборЗаписей.Записать(Ложь);

				ИначеЕсли ИмяКоманды = "УдалитьПоОтбору" Тогда

					НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);

					Попытка

						БлокировкаДанных = Новый БлокировкаДанных;
						ЭлементБлокировкиДанных = БлокировкаДанных.Добавить(
								"РегистрСведений.СтатусыПубликацииТоваровЭТП");
						ЭлементБлокировкиДанных.УстановитьЗначение("УчетнаяЗапись", УчетнаяЗапись);
						ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
						БлокировкаДанных.Заблокировать();
						
						Запрос = Новый Запрос;
						Запрос.Текст = ТекстЗапроса("ПередУдалениемДанных");
						Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
						Запрос.УстановитьПараметр("Список", Список);
						Результаты = Запрос.ВыполнитьПакет();
						ВыборкаУдалить = Результаты[1].Выбрать();
						ВыборкаЗаписать = Результаты[2].Выбрать();
						КоличествоУдалить = ВыборкаУдалить.Количество();
						КоличествоЗаписать = ВыборкаЗаписать.Количество();
						
						Если Не ЗначениеЗаполнено(КоличествоУдалить) Тогда
							ОтменитьТранзакцию();
							Возврат;
						КонецЕсли;
						
						Если КоличествоУдалить > 5000 Или КоличествоЗаписать < 50000 Тогда
							НаборЗаписей = ПолучитьНаборЗаписейСтатусыЭТП();
							НаборЗаписей.Загрузить(Результаты[2].Выгрузить());
							НаборЗаписей.Записать(Истина);
						Иначе	
							Пока ВыборкаУдалить.Следующий() Цикл
								МенеджерЗаписи = РегистрыСведений.СтатусыПубликацииТоваровЭТП.СоздатьМенеджерЗаписи();
								ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ВыборкаУдалить);
								МенеджерЗаписи.Удалить();
							КонецЦикла;
						Конецесли;
						
						ЗафиксироватьТранзакцию();

					Исключение

						ОтменитьТранзакцию();
						ЗаписьЖурналаРегистрации("УправлениеВыгрузкамиВБидзаар.УдалитьПоОтбору",
							УровеньЖурналаРегистрации.Ошибка, , , ОбработкаОшибок.ПодробноеПредставлениеОшибки(
								ИнформацияОбОшибке()));

					КонецПопытки;

				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если ЕстьВременноеХранилище Тогда
		УдалитьИзВременногоХранилища(Результат);
	КонецЕсли;

	Элементы.ДанныеВыгрузки.Обновить();

КонецПроцедуры

&НаКлиенте
Процедура ОжидатьЗавершениеВыполненияЗапроса(ПараметрыОперации, ФоновоеЗадание)

	ВыводитьОкноОжидания = Ложь;
	ПараметрыОперации.Свойство("ВыводитьОкноОжидания", ВыводитьОкноОжидания);

	// Установка картинки длительной операции.
	Если Не ВыводитьОкноОжидания Тогда
		Доступность = Ложь;
	КонецЕсли;
	
	// Инициализация обработчик ожидания завершения.
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения = ПараметрыОперации.НаименованиеФоновогоЗадания;
	ПараметрыОжидания.ВыводитьОкноОжидания = ВыводитьОкноОжидания;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	ПараметрыОжидания.Вставить("ИдентификаторЗадания", ФоновоеЗадание.ИдентификаторЗадания);

	ОбработкаЗавершения = Новый ОписаниеОповещения("ВыполнитьЗапросЗавершение", ЭтотОбъект, ПараметрыОперации);

	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, ОбработкаЗавершения, ПараметрыОжидания);

КонецПроцедуры

// Выполнить запрос завершение.
// 
// Параметры:
//  Результат - Структура
//  ДополнительныеПараметры - Структура
&НаКлиенте
Процедура ВыполнитьЗапросЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Доступность = Истина;
	Элементы.ДанныеВыгрузки.Обновить();

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	СтруктураРезультата = ПолучитьИзВременногоХранилища(Результат.АдресРезультата); // Структура

	Если СтруктураРезультата = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекстОшибки = "";
	Если СтруктураРезультата.Свойство("ТекстОшибки", ТекстОшибки) И ЗначениеЗаполнено(ТекстОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	КоличествоОпубликованныхПозиций = 0;
	Если СтруктураРезультата.Свойство("КоличествоОпубликованныхПозиций", КоличествоОпубликованныхПозиций) Тогда
		Если КоличествоОпубликованныхПозиций = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Нет данных для выгрузки'"));
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(НСтр(
			"ru = 'На ЭТП ""Бидзаар"" успешно опубликовано позиций: %1'"), Строка(
			КоличествоОпубликованныхПозиций)));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКнопкуОтбораПоСтатусу(ИмяКоманды)

	Команда = Команды.Найти(ИмяКоманды);
	Если Команда = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Элементы.ГруппаОтбор.Заголовок = Команда.Заголовок;
	Элементы.ГруппаОтбор.Картинка = Команда.Картинка;

КонецПроцедуры

// Возвращает параметры формы условия отбора номенклатуры.
// 
// Возвращаемое значение:
//  Структура - Параметры формы условия отбора номенклатуры:
// * ТекстЗапросаОтбораНоменклатуры - Строка - Текст запроса
// * ИменаКолонокРезультатаОтбора - Строка - Имена колонок
&НаСервереБезКонтекста
Функция ПараметрыФормыУсловияОтбораНоменклатуры()

	Результат = Новый Структура("ТекстЗапросаОтбораНоменклатуры, ИменаКолонокРезультатаОтбора", "", "");

	ИнтеграцияСЭлектроннымиТорговымиПлощадкамиПереопределяемый.ТекстЗапросаОтбораНоменклатуры(
		Результат.ТекстЗапросаОтбораНоменклатуры);
	ИнтеграцияСЭлектроннымиТорговымиПлощадкамиПереопределяемый.ИменаКолонокРезультатаОтбора(
		Результат.ИменаКолонокРезультатаОтбора);

	Возврат Результат;

КонецФункции

// Возвращает выбранные поля представления.
// 
// Параметры:
//  ПоляФормированияПредставления - СписокЗначений
// 
// Возвращаемое значение:
//  ВыбранныеПоляФормирования - Массив
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьВыбранныеПоляПредставления(ПоляФормированияПредставления)

	ВыбранныеПоляФормирования = Новый Массив; // Массив из Строка
	Для Каждого Элемент Из ПоляФормированияПредставления Цикл
		Если Элемент.Пометка Тогда
			ВыбранныеПоляФормирования.Добавить(Элемент.Значение);
		КонецЕсли;
	КонецЦикла;

	Возврат ВыбранныеПоляФормирования;

КонецФункции

// Возвращает набор записей статусов публикации товаров ЭТП.
// 
// Возвращаемое значение:
//  РегистрСведенийНаборЗаписей.СтатусыПубликацииТоваровЭТП - Набор записей статусов публикации товаров ЭТП
&НаСервере
Функция ПолучитьНаборЗаписейСтатусыЭТП()

	НаборЗаписей = РегистрыСведений.СтатусыПубликацииТоваровЭТП.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.УчетнаяЗапись.Установить(УчетнаяЗапись);

	Возврат НаборЗаписей;

КонецФункции

// Возвращает структуру для значений заполнения.
// 
// Возвращаемое значение:
//  Структура - Структура значений заполнения
&НаКлиенте
Функция ПолучитьПараметрыЗаполнения()

	Структура = Новый Структура;
	Структура.Вставить("УчетнаяЗапись", УчетнаяЗапись);
	Структура.Вставить("Номенклатура");
	Структура.Вставить("Характеристика");
	Структура.Вставить("ПредставлениеНоменклатуры");
	Структура.Вставить("Статус");
	Структура.Вставить("ДатаВыгрузки");

	Возврат Структура;

КонецФункции

// После ответа выгрузка данных.
// 
// Параметры:
//  РезультатВопроса - Число
//  ДополнительныеПараметры - Структура
&НаКлиенте
Процедура ПослеОтветаВыгрузкаДанных(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если Не ЗначениеЗаполнено(РезультатВопроса) Тогда
		Возврат;
	ИначеЕсли РезультатВопроса = 2 И Не ЗначениеЗаполнено(Элементы.ДанныеВыгрузки.ВыделенныеСтроки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Нет выделенных строк для выгрузки'"));
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	ИмяКоманды = "";
	ДополнительныеПараметры.Свойство("ИмяКоманды", ИмяКоманды);
	Если ИмяКоманды = "ВыгрузитьДанные" Тогда
		
		ПараметрыОперации = Новый Структура;
		ПараметрыОперации.Вставить("ВариантВыгрузки", РезультатВопроса);
		
		ФоновоеЗадание = ВыполнитьЗапросВФоне(ПараметрыОперации);	
		Если ФоновоеЗадание = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ОжидатьЗавершениеВыполненияЗапроса(ПараметрыОперации, ФоновоеЗадание);
		
	Иначе
		
		АдресФайлаВоВременномХранилище = ПоместитьДанныеВExcelНаСервере(РезультатВопроса, Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыПечати = Новый Структура;
		ПараметрыПечати.Вставить("АдресФайлаВоВременномХранилище", АдресФайлаВоВременномХранилище);
		ПараметрыПечати.Вставить("ВыводитьШапку", Ложь);

		ПолучаемыеФайлы = Новый Массив;
		ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(, АдресФайлаВоВременномХранилище));

		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ДиалогВыбораФайла.Расширение = "xls";

		НачатьПолучениеФайлов(Новый ОписаниеОповещения("ВыгрузитьВExcelНачатьПолучениеФайловЗавершение", ЭтотОбъект),
			ПолучаемыеФайлы, ДиалогВыбораФайла, Истина);	
					
	КонецЕсли;
	
КонецПроцедуры

// После ответа на вопрос об удалении всех строк.
// 
// Параметры:
//  РезультатВопроса - КодВозвратаДиалога
//  ДополнительныеПараметры - Структура
&НаКлиенте
Процедура ПослеОтветаУдалитьВсеСтроки(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		УдалитьВсеСтрокиНаСервере();
		Элементы.ДанныеВыгрузки.Обновить();
	КонецЕсли;

КонецПроцедуры

// После подбора товаров услуг.
//
// Параметры:
//  РезультатПодбора - Структура, Строка, Неопределено - Результат закрытия формы подбора
//  ДополнительныеПараметры - Структура
&НаКлиенте
Процедура ПослеПодбораТоваровУслуг(РезультатПодбора, ДополнительныеПараметры) Экспорт

	Если РезультатПодбора <> Неопределено Тогда
		АдресТоваровВХранилище = "";
		Если ТипЗнч(РезультатПодбора) = Тип("Структура") И РезультатПодбора.Свойство("АдресТоваровВХранилище",
			АдресТоваровВХранилище) Тогда
			Результат = АдресТоваровВХранилище;
		Иначе
			Результат = РезультатПодбора;
		КонецЕсли;
		ОбработатьДанныеНаСервере(Результат, ДополнительныеПараметры);
	КонецЕсли;

КонецПроцедуры

// Получает необходимые данные для обработки строк.
// 
// Параметры:
//  Данные - Массив, ЛюбаяСсылка
// 
// Возвращаемое значение:
//  Структура - Получить структуру обработки строк:
// * ВыбранныеПоля - Массив - выбранные поля представления
// * Реквизиты - Строка - выбранные поля представления строкой
// * ЗначенияРеквизитов - Соответствие, Структура - полученные данные
&НаСервере
Функция ПолучитьСтруктуруОбработкиСтрок(Данные)

	Структура = Новый Структура;
	ВыбранныеПоля = ПолучитьВыбранныеПоляПредставления(ПоляФормированияПредставления);
	Структура.Вставить("ВыбранныеПоля", ВыбранныеПоля);
	Реквизиты = "";
	Для Каждого Поле Из ВыбранныеПоля Цикл
		Если Поле <> "Характеристика" Тогда
			Реквизиты = ?(ПустаяСтрока(Реквизиты), Поле, Реквизиты + ", " + Поле);
		КонецЕсли;
	КонецЦикла;
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Данные, Реквизиты);

	Структура.Вставить("ЗначенияРеквизитов", ЗначенияРеквизитов);

	Возврат Структура;

КонецФункции

&НаСервере
Процедура СохранитьНастройки()

	Если Не Пользователи.РолиДоступны("СохранениеДанныхПользователя") Тогда
		Возврат;
	КонецЕсли;

	Настройки = Новый Структура;
	Настройки.Вставить("Организация", Организация);
	Настройки.Вставить("УчетнаяЗапись", УчетнаяЗапись);
	Настройки.Вставить("ПоляФормированияПредставления", ПоляФормированияПредставления);
	ВыбранныеПоляПредставления = СтрСоединить(ПолучитьВыбранныеПоляПредставления(ПоляФормированияПредставления), ", ");
	Настройки.Вставить("ВыбранныеПоляПредставления", ВыбранныеПоляПредставления);

	ХранилищеОбщихНастроек.Сохранить(ИмяФормы, , Настройки);

КонецПроцедуры

&НаСервере
Процедура УдалитьВсеСтрокиНаСервере()

	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);

	Попытка

		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СтатусыПубликацииТоваровЭТП");
		ЭлементБлокировкиДанных.УстановитьЗначение("УчетнаяЗапись", УчетнаяЗапись);
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();

		НаборЗаписей = ПолучитьНаборЗаписейСтатусыЭТП();
		НаборЗаписей.Записать();

		ЗафиксироватьТранзакцию();

	Исключение

		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации("УправлениеВыгрузкамиВБидзаар.ДанныеВыгрузкиПередУдалением",
			УровеньЖурналаРегистрации.Ошибка, , , ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

	КонецПопытки;

КонецПроцедуры

// Установить отбор по маркеру.
// 
// Параметры:
//  Поле - Строка
//  Значение - Перечисления.СтатусыОбъектовЭТП
//  ИмяКоманды - Строка - Имя команды
&НаКлиенте
Процедура УстановитьОтбор(Поле, Значение, ИмяКоманды)

	ИдентификаторОтбора = "ОтборПоСостоянию";
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(ДанныеВыгрузки, , ИдентификаторОтбора);

	Если Не ПустаяСтрока(Поле) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			ДанныеВыгрузки, Поле, Значение, ВидСравненияКомпоновкиДанных.Равно, ИдентификаторОтбора, ,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	КонецЕсли;

	ОбновитьКнопкуОтбораПоСтатусу(ИмяКоманды);

КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыДинамическогоСписка()

	ДанныеВыгрузки.Параметры.УстановитьЗначениеПараметра("УчетнаяЗапись", УчетнаяЗапись);

	СвойстваСписка = ДанныеВыгрузки.КомпоновщикНастроек.Настройки.ДополнительныеСвойства;
	СвойстваСписка.Вставить("УчетнаяЗапись", УчетнаяЗапись);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УчетнаяЗаписьЗаполнена = ЗначениеЗаполнено(УчетнаяЗапись);
	СохранениеДанныхПользователя = Пользователи.РолиДоступны("СохранениеДанныхПользователя");

	Элементы.ДанныеВыгрузки.Доступность = УчетнаяЗаписьЗаполнена;
	Элементы.Настройки.Видимость = СохранениеДанныхПользователя;
	Элементы.СтраницаНастройки.Видимость = СохранениеДанныхПользователя;
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПросмотрИРедактированиеДанныхВыгрузки Тогда
		Заголовок = НСтр("ru = 'Выгрузка товаров и услуг в Бидзаар'");
	Иначе
		Заголовок = НСтр("ru = 'Настройки выгрузки в Бидзаар'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УчетнаяЗаписьПриИзмененииНаСервере()

	Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗапись, "Организация");
	УстановитьПараметрыДинамическогоСписка();
	УстановитьУсловноеОформление();

КонецПроцедуры

// Формирование текста запроса в зависимости от варианта
// 
// Параметры:
//  Ключ - Строка
//
&НаСервереБезКонтекста
Функция ТекстЗапроса(Ключ)

	ТекстЗапроса = "";

	Если Ключ = "ПередВыгрузкойДанных" Тогда

		ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СтатусыПубликацииТоваровЭТП.ПредставлениеНоменклатуры
		|ИЗ
		|	РегистрСведений.СтатусыПубликацииТоваровЭТП КАК СтатусыПубликацииТоваровЭТП
		|ГДЕ
		|	СтатусыПубликацииТоваровЭТП.УчетнаяЗапись = &УчетнаяЗапись
		|	И ВЫБОР
		|		КОГДА &ВариантВыгрузки = 1
		|			ТОГДА СтатусыПубликацииТоваровЭТП.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовЭТП.КПубликации))
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ";

	ИначеЕсли Ключ = "ПередВыгрузкойВыделенныхСтрок" Тогда

		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Список.Номенклатура КАК Номенклатура,
		|	Список.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ ВТ_Список
		|ИЗ
		|	&Список КАК Список
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтатусыПубликацииТоваровЭТП.ПредставлениеНоменклатуры КАК ПредставлениеНоменклатуры
		|ИЗ
		|	РегистрСведений.СтатусыПубликацииТоваровЭТП КАК СтатусыПубликацииТоваровЭТП
		|ГДЕ
		|	(СтатусыПубликацииТоваровЭТП.УчетнаяЗапись, СтатусыПубликацииТоваровЭТП.Номенклатура, СтатусыПубликацииТоваровЭТП.Характеристика) В
		|			(ВЫБРАТЬ
		|				&УчетнаяЗапись,
		|				ВТ_Список.Номенклатура,
		|				ВТ_Список.Характеристика
		|			ИЗ
		|				ВТ_Список)";

	ИначеЕсли Ключ = "ПередДобавлениемДанных" Тогда

		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Список.Номенклатура КАК Номенклатура,
		|	Список.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ ВТ_Список
		|ИЗ
		|	&Список КАК Список
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&УчетнаяЗапись КАК УчетнаяЗапись,
		|	Список.Номенклатура КАК Номенклатура,
		|	Список.Характеристика КАК Характеристика,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(1000)) КАК ПредставлениеНоменклатуры,
		|	ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовЭТП.КПубликации) КАК Статус,
		|	ПРЕДСТАВЛЕНИЕ(Список.Номенклатура) КАК НоменклатураПредставление,
		|	ПРЕДСТАВЛЕНИЕ(Список.Характеристика) КАК ХарактеристикаПредставление
		|ИЗ
		|	ВТ_Список КАК Список
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииТоваровЭТП КАК СтатусыПубликацииТоваровЭТП
		|		ПО (&УчетнаяЗапись = СтатусыПубликацииТоваровЭТП.УчетнаяЗапись)
		|		И Список.Номенклатура = СтатусыПубликацииТоваровЭТП.Номенклатура
		|		И Список.Характеристика = СтатусыПубликацииТоваровЭТП.Характеристика
		|ГДЕ
		|	СтатусыПубликацииТоваровЭТП.УчетнаяЗапись ЕСТЬ NULL";

	ИначеЕсли Ключ = "ПередУдалениемДанных" Тогда

		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Список.Номенклатура КАК Номенклатура,
		|	Список.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ ВТ_Список
		|ИЗ
		|	&Список КАК Список
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&УчетнаяЗапись КАК УчетнаяЗапись,
		|	Список.Номенклатура КАК Номенклатура,
		|	Список.Характеристика КАК Характеристика
		|ИЗ
		|	ВТ_Список КАК Список
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииТоваровЭТП КАК СтатусыПубликацииТоваровЭТП
		|		ПО (&УчетнаяЗапись = СтатусыПубликацииТоваровЭТП.УчетнаяЗапись)
		|			И Список.Номенклатура = СтатусыПубликацииТоваровЭТП.Номенклатура
		|			И Список.Характеристика = СтатусыПубликацииТоваровЭТП.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&УчетнаяЗапись КАК УчетнаяЗапись,
		|	СтатусыПубликацииТоваровЭТП.Номенклатура КАК Номенклатура,
		|	СтатусыПубликацииТоваровЭТП.Характеристика КАК Характеристика,
		|	СтатусыПубликацииТоваровЭТП.Статус КАК Статус,
		|	СтатусыПубликацииТоваровЭТП.ПредставлениеНоменклатуры КАК ПредставлениеНоменклатуры,
		|	СтатусыПубликацииТоваровЭТП.ДатаВыгрузки КАК ДатаВыгрузки
		|ИЗ
		|	РегистрСведений.СтатусыПубликацииТоваровЭТП КАК СтатусыПубликацииТоваровЭТП
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Список КАК Список
		|		ПО СтатусыПубликацииТоваровЭТП.Номенклатура = Список.Номенклатура
		|			И СтатусыПубликацииТоваровЭТП.Характеристика = Список.Характеристика
		|ГДЕ
		|	СтатусыПубликацииТоваровЭТП.УчетнаяЗапись = &УчетнаяЗапись
		|	И Список.Номенклатура ЕСТЬ NULL";

	КонецЕсли;

	Возврат ТекстЗапроса;

КонецФункции

// Завершение подключения расширения работы с файлами
// 
// Параметры:
//  Результат - Булево - Результат выполнения подключения расширения
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
&НаКлиенте
Процедура ВыгрузитьВExcelЗавершениеПодключенияРасширения(Результат, ДополнительныеПараметры) Экспорт
	#Если ВебКлиент Тогда
	Если НЕ ПодключитьРасширениеРаботыСФайлами()Тогда
		
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Расширение работы с файлами не подключено.'"));
		Возврат;
		
	КонецЕсли;
	#КонецЕсли
	
	ВыгрузитьВExcelЗавершение();
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВExcelЗавершение() Экспорт
	
	ПередВыгрузкойДанных("ВыгрузитьВExcel");
	
КонецПроцедуры

// Выгрузить в excel начать получение файлов завершение.
// 
// Параметры:
//  Результат - Булево - Результат выолпнения операции получения файлов
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
&НаКлиенте
Процедура ВыгрузитьВExcelНачатьПолучениеФайловЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(Результат) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НачатьЗапускПриложения(Новый ОписаниеОповещения("ОткрытиеФайлаЗавершение", ЭтотОбъект), Результат[0]["ПолноеИмя"]);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытиеФайлаЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Возврат;

КонецПроцедуры

&НаКлиенте
Процедура ПередВыгрузкойДанных(ИмяКоманды)
	
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Учетная запись"" не заполнено'"), ,
			"УчетнаяЗапись");
		Возврат;
	КонецЕсли;

	Кнопки = Новый СписокЗначений; // СписокЗначений из Число
	Кнопки.Добавить(1, НСтр("ru = 'Невыгруженные'"));
	Кнопки.Добавить(2, НСтр("ru = 'Выделенные'"));
	Кнопки.Добавить(3, НСтр("ru = 'Все'"));
	Кнопки.Добавить(0, НСтр("ru = 'Отмена'"));

	ЗаголовокВопроса = НСтр("ru = 'Какие данные выгрузить?'");
	ДополнительныеПараметры = Новый Структура("ИмяКоманды", ИмяКоманды);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОтветаВыгрузкаДанных", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОписаниеОповещения, "", Кнопки, , 1, ЗаголовокВопроса);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьДанныеВExcelНаСервере(ВариантВыгрузки, Отказ)
	
	Если ВариантВыгрузки = 1 Или ВариантВыгрузки = 3 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса("ПередВыгрузкойДанных");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1", "");
		Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
		Запрос.УстановитьПараметр("ВариантВыгрузки", ВариантВыгрузки);
		РезультатЗапроса = Запрос.Выполнить();

		Если РезультатЗапроса.Пустой() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Нет данных для выгрузки'"));
			Отказ = Истина;
			Возврат Неопределено;
		Иначе
			Данные = РезультатЗапроса.Выгрузить();
		КонецЕсли;
		
	Иначе
		
		Список = Новый ТаблицаЗначений;
		ТипыНоменклатуры = Метаданные.ОпределяемыеТипы.НоменклатураИнтеграцияСЭлектроннымиТорговымиПлощадками.Тип;
		Список.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов(ТипыНоменклатуры));

		ТипыХарактеристики = Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатурыИнтеграцияСЭлектроннымиТорговымиПлощадками.Тип;
		Список.Колонки.Добавить("Характеристика", Новый ОписаниеТипов(ТипыХарактеристики));

		Для Каждого ВыделеннаяСтрока Из Элементы.ДанныеВыгрузки.ВыделенныеСтроки Цикл
			ЗаполнитьЗначенияСвойств(Список.Добавить(), ВыделеннаяСтрока);
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса("ПередВыгрузкойВыделенныхСтрок");
		Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
		Запрос.УстановитьПараметр("Список", Список);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Нет данных для выгрузки'"));
			Отказ = Истина;
			Возврат Неопределено;
		Иначе
			Данные = РезультатЗапроса.Выгрузить();
		КонецЕсли;
		
	КонецЕсли;
	
	ТабличныйДокумент = Обработки.УправлениеВыгрузкамиВБидзаар.СформироватьПечатнуюФормуДляВыгрузки(Данные);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(".xls");
	ТабличныйДокумент.Записать(ИмяВременногоФайла, ТипФайлаТабличногоДокумента.XLS97);
	
	АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(
		Новый ДвоичныеДанные(ИмяВременногоФайла), УникальныйИдентификатор);
	
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение		
		ТекстИсключения = НСтр("ru = '%1'", ОбщегоНазначения.КодОсновногоЯзыка());
		ТекстИсключения = СтрШаблон(ТекстИсключения, "УправлениеВыгрузкамиВБидзаар.ВыгрузкаВExcel");
		
		ЗаписьЖурналаРегистрации(ТекстИсключения,
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Обработки.УправлениеВыгрузкамиВБидзаар,,
			ОписаниеОшибки());
	КонецПопытки;
	
	Возврат АдресФайлаВоВременномХранилище;	
	
КонецФункции

#КонецОбласти