#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область Печать

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	СтруктураТипов = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(МассивОбъектов);
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТОРГ1") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ТОРГ1",
			"ТОРГ-1",
			СформироватьПечатнуюФормуТОРГ1(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТОРГ2") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ТОРГ2",
			"ТОРГ-2",
			СформироватьПечатнуюФормуТОРГ2(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
			
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТОРГ3") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ТОРГ3",
			"ТОРГ-3",
			СформироватьПечатнуюФормуТОРГ3(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
		
	КонецЕсли;
	
	ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

#Область Печать_ТОРГ1

Функция СформироватьПечатнуюФормуТОРГ1(СтруктураТипов, ОбъектыПечати, ПараметрыПечати)

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	УстановитьПривилегированныйРежим(Истина);
	
	ПечатьВНоменклатуреПоставщкика = ПараметрыПечати.Свойство("ПечатьВНоменклатуреПоставщика") И ПараметрыПечати.ПечатьВНоменклатуреПоставщика;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТОРГ1";
	
	НомерТипаДокумента = 0;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл

		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		МенеджерОбъекта = ОбщегоНазначенияУТ.ПолучитьМодульЛокализации(СтруктураОбъектов.Ключ);
		Если МенеджерОбъекта = Неопределено Тогда
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтруктураОбъектов.Ключ);
		КонецЕсли;
		
		ДанныеДляПечати = МенеджерОбъекта.ПолучитьДанныеДляПечатнойФормыТОРГ1(ПараметрыПечати, СтруктураОбъектов.Значение);
		
		ЗаполнитьТабличныйДокументТорг1(
			ТабличныйДокумент,
			ДанныеДляПечати,
			ОбъектыПечати,
			ПечатьВНоменклатуреПоставщкика);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Параметры:
// 	ТабличныйДокумент              - ТабличныйДокумент - 
// 	ДанныеДляПечати                - см. АктОРасхожденияхПослеОтгрузкиЛокализация.ПолучитьДанныеДляПечатнойФормыТОРГ1
// 	ОбъектыПечати                  - СписокЗначений - 
// 	ПечатьВНоменклатуреПоставщкика - Булево - 
// 
Процедура ЗаполнитьТабличныйДокументТорг1(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, ПечатьВНоменклатуреПоставщкика)

	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьАктыОРасхождениях.ПФ_MXL_ТОРГ1_ru");
	Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
	
	ДанныеСчетовФактур = ДанныеДляПечати.ДанныеСчетовФактур.Выбрать();
	ДанныеПечати       = ДанныеДляПечати.ДанныеПечати.Выбрать();
	ТаблицаТоваров     = ДанныеДляПечати.ДанныеТоваров.Выгрузить();
	ТаблицаКурсовВалют = ДанныеДляПечати.ДанныеКурсовВалют.Выгрузить();
	
	ПересчитатьСуммыВВалютеРегламентированногоУчета(ТаблицаТоваров, ТаблицаКурсовВалют, "ТОРГ1");
	
	ПервыйДокумент = Истина;
	
	КолонкаКодов = ФормированиеПечатныхФорм.ДополнительнаяКолонкаПечатныхФормДокументов().ИмяКолонки;
	
	Если НЕ ЗначениеЗаполнено(КолонкаКодов) Тогда
		КолонкаКодов = "Код";
	КонецЕсли;
	
	Пока ДанныеПечати.Следующий() Цикл
		
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;

		Область = Макет.ПолучитьОбласть("ШапкаПервойСтраницы");
		Область.Параметры.Заполнить(ДанныеПечати);
		Область.Параметры.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеПечати.НомерДокумента, Ложь, Истина);
		Область.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.ДатаДокумента), "ПолноеНаименование,ЮридическийАдрес,Телефоны,");
		Область.Параметры.Грузоотправитель = ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Грузоотправитель, ДанныеПечати.ДатаДокумента), "ПолноеНаименование,ЮридическийАдрес,Телефоны,");
		Область.Параметры.Производитель = ДанныеПечати.Производитель;
		Область.Параметры.Поставщик = ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Поставщик, ДанныеПечати.ДатаДокумента), "ПолноеНаименование,ЮридическийАдрес,Телефоны,");
		Область.Параметры.СтраховаяКомпания = ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.СтраховаяКомпания, ДанныеПечати.ДатаДокумента), "ПолноеНаименование,ЮридическийАдрес,Телефоны,");
		Область.Параметры.Заполнить(ПараметрыПоДате("ДатаДоставкиТоваров", ДанныеПечати.ДатаДоставкиТоваров));
		Область.Параметры.Заполнить(ПараметрыПоДате("ДатаОтправленияТоваров", ДанныеПечати.ДатаОтправленияТоваров));
		Область.Параметры.Заполнить(ПараметрыПоДате("ДатаДоговораПоставки", ДанныеПечати.ДатаДоговораПоставки));
		ДанныеСчетовФактур.Сбросить();
		Если ДанныеСчетовФактур.НайтиСледующий(Новый Структура("ДокументОснование", ДанныеПечати.Ссылка)) Тогда
			Область.Параметры.Заполнить(ДанныеСчетовФактур);
			Область.Параметры.НомерСчетаФактуры = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеСчетовФактур.НомерСчетаФактуры);
			Область.Параметры.Заполнить(ПараметрыПоДате("ДатаСчетаФактуры", ДанныеСчетовФактур.ДатаСчетаФактуры));
		КонецЕсли;
		Область.Параметры.Заполнить(ПараметрыПоДате("ДатаКоммерческогоАкта", ДанныеПечати.ДатаКоммерческогоАкта));
		Область.Параметры.Заполнить(ПараметрыПоДате("ДатаВетеринарногоСвидетельства", ДанныеПечати.ДатаВетеринарногоСвидетельства));
		Область.Параметры.Заполнить(ПараметрыПоДате("ДатаЖелезнодорожнойНакладной", ДанныеПечати.ДатаЖелезнодорожнойНакладной));
		Область.Параметры.Заполнить(ПараметрыПоДате("ДатаДокументаОВызовеПредставителяПартнера", ДанныеПечати.ДатаДокументаОВызовеПредставителяПартнера));
		Область.Параметры.ВызываемыйПредставительПартнера = ПолучитьЗначениеРеквизитаПоШаблону(ДанныеПечати.ВызываемыйПредставительПартнера, НСтр("ru='грузоотправителя, поставщика, производителя'", Метаданные.Языки.Русский.КодЯзыка));
		Область.Параметры.ВидДокументаОВызовеПредставителяПартнера = ПолучитьЗначениеРеквизитаПоШаблону(ДанныеПечати.ВидДокументаОВызовеПредставителяПартнера, НСтр("ru='телеграмма, факс, телефонограмма, радиограмма'", Метаданные.Языки.Русский.КодЯзыка));
		Область.Параметры.ОснованиеДляСоставленияАкта = ПолучитьЗначениеРеквизитаПоШаблону(ДанныеПечати.ОснованиеДляСоставленияАкта, НСтр("ru='приказ, распоряжение'", Метаданные.Языки.Русский.КодЯзыка));
		Область.Параметры.РуководительФИО = ДанныеПечати.Руководитель;
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, Область, ДанныеПечати.Ссылка);
		ТабличныйДокумент.Вывести(Область);
		
		// Вывод таблицы приемки товаров
		Область = Макет.ПолучитьОбласть("ТаблицаПриемкиТоваровШапка");
		ТабличныйДокумент.Вывести(Область);
		ТаблицаПриемкиТоваров = ДанныеПечати.ТаблицаПриемкиТоваров.Выгрузить();
		Для Каждого Строка Из ТаблицаПриемкиТоваров Цикл
			Область = Макет.ПолучитьОбласть("ТаблицаПриемкиТоваровСтрока");
			Область.Параметры.Заполнить(Строка);
			ТабличныйДокумент.Вывести(Область);
		КонецЦикла;
		Область = Макет.ПолучитьОбласть("ТаблицаПриемкиТоваровПодвал");
		ТабличныйДокумент.Вывести(Область);
		
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		// Страница №2 ////////////////////////////////////////////////////////////////////////////////////////////////////
		
		// Вывод шапки
		Область = Макет.ПолучитьОбласть("ШапкаВторойСтраницы");
		ТабличныйДокумент.Вывести(Область);
		
		// Вывод первой части таблицы товаров
		СтруктураИтогов = Новый Структура("КоличествоПоДокументам, СуммаПоДокументам", 0, 0);
		Область = Макет.ПолучитьОбласть("ТаблицаТоваров1Шапка");
		ТабличныйДокумент.Вывести(Область);
		Область = Макет.ПолучитьОбласть("ТаблицаТоваров1СтрокаТовара");
		Товары = ТаблицаТоваров.НайтиСтроки(Новый Структура("Ссылка", ДанныеПечати.Ссылка));
		НомерСтроки = 1;
		
		ДопПараметрыПредставлениеНоменклатуры = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
		ДопПараметрыПредставлениеНоменклатуры.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
		
		Для Каждого Товар Из Товары Цикл
			Область.Параметры.Заполнить(Товар);
			Если ПечатьВНоменклатуреПоставщкика Тогда
				Область.Параметры.Товар = Товар.НоменклатураПартнера;
			Иначе
				Если ЗначениеЗаполнено(Товар.Номенклатура) Тогда
					Область.Параметры.Товар = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
						Товар.НоменклатураНаименование,
						Товар.ХарактеристикаНаименование,
						,
						,
						ДопПараметрыПредставлениеНоменклатуры);
				Иначе
					Область.Параметры.Товар = Товар.ТекстовоеОписание;
				КонецЕсли;
			КонецЕсли;
			Область.Параметры.НомерСтроки = НомерСтроки;
			Область.Параметры.ЗначениеКода = Товар[КолонкаКодов];
			ТабличныйДокумент.Вывести(Область);
			
			НомерСтроки = НомерСтроки + 1;
			СтруктураИтогов.КоличествоПоДокументам = СтруктураИтогов.КоличествоПоДокументам + Товар.КоличествоПоДокументам;
			СтруктураИтогов.СуммаПоДокументам = СтруктураИтогов.СуммаПоДокументам + Товар.СуммаПоДокументам;
			
		КонецЦикла;
		
		// Вывод строк с тарой и тарифом
		Область = Макет.ПолучитьОбласть("ТаблицаТоваров1СтрокаТараТариф");
		Область.Параметры.Наименование = НСтр("ru='Тара'", Метаданные.Языки.Русский.КодЯзыка);
		ТабличныйДокумент.Вывести(Область);
		Область.Параметры.Наименование = НСтр("ru='Тариф'", Метаданные.Языки.Русский.КодЯзыка);
		ТабличныйДокумент.Вывести(Область);
		
		Область = Макет.ПолучитьОбласть("ТаблицаТоваров1Подвал");
		Область.Параметры.Заполнить(СтруктураИтогов);
		ТабличныйДокумент.Вывести(Область);
		
		// Вывод Состояния Товара В Момент Осмотра
		ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "СостояниеТовараВМоментОсмотра", 4);
		// Вывод Способа Определения Количества Товара
		ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "СпособОпределенияКоличестваТовара", 4);
		// Вывод Заключения О Причинах Образования Недостачи
		ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "ЗаключениеОПричинахОбразованияНедостачи", 4);
		
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		// Страница №3 ////////////////////////////////////////////////////////////////////////////////////////////////////
		
		// Вывод шапки
		Область = Макет.ПолучитьОбласть("ШапкаТретьейСтраницы");
		ТабличныйДокумент.Вывести(Область);
		
		// Вывод второй части таблицы товаров
		СтруктураИтогов = Новый Структура;
		СтруктураИтогов.Вставить("КоличествоПоФакту", 0);
		СтруктураИтогов.Вставить("СуммаПоФакту", 0);
		СтруктураИтогов.Вставить("СуммаСНДСПоФакту", 0);
		СтруктураИтогов.Вставить("СуммаНДСПоФакту", 0);
		СтруктураИтогов.Вставить("КоличествоОтклонение", 0);
		СтруктураИтогов.Вставить("СуммаОтклонение", 0);
		
		Область = Макет.ПолучитьОбласть("ТаблицаТоваров2Шапка");
		ТабличныйДокумент.Вывести(Область);
		Область = Макет.ПолучитьОбласть("ТаблицаТоваров2СтрокаТовара");
		Для Каждого Товар Из Товары Цикл
			Область.Параметры.Заполнить(Товар);
			ТабличныйДокумент.Вывести(Область);
			
			Для Каждого Итог Из СтруктураИтогов Цикл
				СтруктураИтогов[Итог.Ключ] = Итог.Значение + Товар[Итог.Ключ];
			КонецЦикла;
		КонецЦикла;
		// Вывод строк с тарой и тарифом
		Область = Макет.ПолучитьОбласть("ТаблицаТоваров2СтрокаТовара");
		ТабличныйДокумент.Вывести(Область);
		ТабличныйДокумент.Вывести(Область);
		
		Область = Макет.ПолучитьОбласть("ТаблицаТоваров2Подвал");
		Область.Параметры.Заполнить(СтруктураИтогов);
		ТабличныйДокумент.Вывести(Область);
		
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		// Страница №4 ////////////////////////////////////////////////////////////////////////////////////////////////////
		
		// Вывод шапки
		Область = Макет.ПолучитьОбласть("ШапкаЧетвертойСтраницы");
		ТабличныйДокумент.Вывести(Область);
		
		// Вывод членов комиссии
		Область = Макет.ПолучитьОбласть("ЧленыКомиссии");
		Область.Параметры.Заполнить(ДанныеПечати);
		Область.Параметры.ПредседательКомиссииФИО = ДанныеПечати.ПредседательКомиссии;
		Область.Параметры.ЧленКомиссии1ФИО = ДанныеПечати.ЧленКомиссии1;
		Область.Параметры.ЧленКомиссии2ФИО = ДанныеПечати.ЧленКомиссии2;
		Область.Параметры.ЧленКомиссии3ФИО = ДанныеПечати.ЧленКомиссии3;
		ТабличныйДокумент.Вывести(Область);
		
		// Вывод заключения комиссии
		ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "ЗаключениеКомиссии", 4);
		
		Область = Макет.ПолучитьОбласть("Представитель");
		Область.Параметры.Заполнить(ДанныеПечати);
		Область.Параметры.Заполнить(ПараметрыПоДате("ДатаВыдачиДокументаУдостоверяющегоПолномочияПредставителяПартнера",
		                                            ДанныеПечати.ДатаВыдачиДокументаУдостоверяющегоПолномочияПредставителяПартнера));
		ТабличныйДокумент.Вывести(Область);
		
		Область = Макет.ПолучитьОбласть("ГлавныйБухгалтер");
		Область.Параметры.Заполнить(ДанныеПечати);
		Область.Параметры.ГлавныйБухгалтерФИО = ДанныеПечати.ГлавныйБухгалтер;
		ТабличныйДокумент.Вывести(Область);
		
		// Вывод решения руководителя
		ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "РешениеРуководителя", 4);
		
		// Вывод кладовщика
		Область = Макет.ПолучитьОбласть("Кладовщик");
		Область.Параметры.КладовщикПринявшийТоварФИО = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.КладовщикПринявшийТовар);
		ТабличныйДокумент.Вывести(Область);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область Печать_ТОРГ2

Функция СформироватьПечатнуюФормуТОРГ2(СтруктураТипов, ОбъектыПечати, ПараметрыПечати)

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	УстановитьПривилегированныйРежим(Истина);
	
	ПечатьВНоменклатуреПоставщкика = ПараметрыПечати.Свойство("ПечатьВНоменклатуреПоставщика") И ПараметрыПечати.ПечатьВНоменклатуреПоставщика;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТОРГ2";
	
	НомерТипаДокумента = 0;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл

		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		МенеджерОбъекта = ОбщегоНазначенияУТ.ПолучитьМодульЛокализации(СтруктураОбъектов.Ключ);
		Если МенеджерОбъекта = Неопределено Тогда
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтруктураОбъектов.Ключ);
		КонецЕсли;
		
		ДанныеДляПечати = МенеджерОбъекта.ПолучитьДанныеДляПечатнойФормыТОРГ2(ПараметрыПечати, СтруктураОбъектов.Значение); // см. АктОРасхожденияхПослеОтгрузкиЛокализация.ПолучитьДанныеДляПечатнойФормыТОРГ2 
		
		ЗаполнитьТабличныйДокументТорг2(
			ТабличныйДокумент,
			ДанныеДляПечати,
			ОбъектыПечати,
			ПечатьВНоменклатуреПоставщкика);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;

КонецФункции

// Параметры:
// 	ТабличныйДокумент              - ТабличныйДокумент - 
// 	ДанныеДляПечати                - см. АктОРасхожденияхПослеОтгрузкиЛокализация.ПолучитьДанныеДляПечатнойФормыТОРГ2
// 	ОбъектыПечати                  - СписокЗначений - 
// 	ПечатьВНоменклатуреПоставщкика - Булево - 
// 
Процедура ЗаполнитьТабличныйДокументТорг2(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, ПечатьВНоменклатуреПоставщкика)
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьАктыОРасхождениях.ПФ_MXL_ТОРГ2_ru");
	Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
	
	ДанныеСчетовФактур         = ДанныеДляПечати.ДанныеСчетовФактур.Выбрать();
	ДанныеПечати               = ДанныеДляПечати.ДанныеПечати.Выбрать();
	ТаблицаТоваров             = ДанныеДляПечати.ДанныеТовары.Выгрузить();
	ТаблицаТоваровПоДокументам = ДанныеДляПечати.ДанныеТоваровПоДокументам.Выгрузить();
	ТаблицаКурсовВалют         = ДанныеДляПечати.ДанныеКурсовВалют.Выгрузить();
	
	ПересчитатьСуммыВВалютеРегламентированногоУчета(ТаблицаТоваров, ТаблицаКурсовВалют, "ТОРГ2");
	
	ПервыйДокумент = Истина;
	
	Если ПечатьВНоменклатуреПоставщкика Тогда
		КолонкаКодов = "НоменклатураПартнераАртикул";
	Иначе
		КолонкаКодов = ФормированиеПечатныхФорм.ДополнительнаяКолонкаПечатныхФормДокументов().ИмяКолонки;
		Если НЕ ЗначениеЗаполнено(КолонкаКодов) Тогда
			КолонкаКодов = "Артикул";
		КонецЕсли;
	КонецЕсли;
		
	Пока ДанныеПечати.Следующий() Цикл
	
		Если НЕ ДанныеПечати.ЕстьРасхождения Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В документе %1 нет расхождений. Печать акта об установленном расхождении по количеству и качеству при приемке %2 не требуется.'"),
				ДанныеПечати.Ссылка,
				НСтр("ru='товарно-материальных ценностей'"));
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка);
			Продолжить;
		КонецЕсли;
		
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТекстНДСВШапкеТаблицы = ?(ДанныеПечати.ЦенаВключаетНДС, "", " " + НСтр("ru='(Без НДС)'", Метаданные.Языки.Русский.КодЯзыка));
		
		Область = Макет.ПолучитьОбласть("ШапкаПервойСтраницы");
		Область.Параметры.Заполнить(ДанныеПечати);
		Область.Параметры.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеПечати.НомерДокумента, Ложь, Истина);
		Область.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.ДатаДокумента), "ПолноеНаименование,ЮридическийАдрес,Телефоны,");
		Область.Параметры.Поставщик = ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Поставщик, ДанныеПечати.ДатаДокумента), "ПолноеНаименование,ЮридическийАдрес,Телефоны,");
		Область.Параметры.Грузоотправитель = ДанныеПечати.Грузоотправитель;
		Область.Параметры.Производитель = ДанныеПечати.Производитель;
		Область.Параметры.Поставщик = ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Поставщик, ДанныеПечати.ДатаДокумента), "ПолноеНаименование,ЮридическийАдрес,Телефоны,");
		Область.Параметры.СтраховаяКомпания = ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.СтраховаяКомпания, ДанныеПечати.ДатаДокумента), "ПолноеНаименование,ЮридическийАдрес,Телефоны,");
		Область.Параметры.Заполнить(ПараметрыПоДате("ДатаДоставкиТоваров", ДанныеПечати.ДатаДоставкиТоваров));
		Область.Параметры.Заполнить(ПараметрыПоДате("ДатаОтправленияТоваров", ДанныеПечати.ДатаОтправленияТоваров));
		Область.Параметры.Заполнить(ПараметрыПоДате("ДатаДоговораПоставки", ДанныеПечати.ДатаДоговораПоставки));
		ДанныеСчетовФактур.Сбросить();
		Если ДанныеСчетовФактур.НайтиСледующий(Новый Структура("ДокументОснование", ДанныеПечати.Ссылка)) Тогда
			Область.Параметры.Заполнить(ДанныеСчетовФактур);
			Область.Параметры.НомерСчетаФактуры = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеСчетовФактур.НомерСчетаФактуры);
			Область.Параметры.Заполнить(ПараметрыПоДате("ДатаСчетаФактуры", ДанныеСчетовФактур.ДатаСчетаФактуры));
		КонецЕсли;
		Область.Параметры.Заполнить(ПараметрыПоДате("ДатаКоммерческогоАкта", ДанныеПечати.ДатаКоммерческогоАкта));
		Область.Параметры.Заполнить(ПараметрыПоДате("ДатаВетеринарногоСвидетельства", ДанныеПечати.ДатаВетеринарногоСвидетельства));
		Область.Параметры.Заполнить(ПараметрыПоДате("ДатаЖелезнодорожнойНакладной", ДанныеПечати.ДатаЖелезнодорожнойНакладной));
		Область.Параметры.Заполнить(ПараметрыПоДате("ДатаДокументаОВызовеПредставителяПартнера", ДанныеПечати.ДатаДокументаОВызовеПредставителяПартнера));
		Область.Параметры.Заполнить(ПараметрыПоДате("ДатаКоносамента", ДанныеПечати.ДатаКоносамента));
		Область.Параметры.Заполнить(ПараметрыПоДате("ДатаВскрытияТары", ДанныеПечати.ДатаВскрытияТары));
		Область.Параметры.ВызываемыйПредставительПартнера = ПолучитьЗначениеРеквизитаПоШаблону(ДанныеПечати.ВызываемыйПредставительПартнера, НСтр("ru='грузоотправителя, поставщика, производителя'", Метаданные.Языки.Русский.КодЯзыка));
		Область.Параметры.ВидДокументаОВызовеПредставителяПартнера = ПолучитьЗначениеРеквизитаПоШаблону(ДанныеПечати.ВидДокументаОВызовеПредставителяПартнера, НСтр("ru='телеграмма, факс, телефонограмма, радиограмма'", Метаданные.Языки.Русский.КодЯзыка));
		Область.Параметры.ОснованиеДляСоставленияАкта = ПолучитьЗначениеРеквизитаПоШаблону(ДанныеПечати.ОснованиеДляСоставленияАкта, НСтр("ru='приказ, распоряжение'", Метаданные.Языки.Русский.КодЯзыка));
		Область.Параметры.РуководительФИО = ДанныеПечати.Руководитель;
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, Область, ДанныеПечати.Ссылка);
		ТабличныйДокумент.Вывести(Область);
		
		// Вывод таблицы приемки товаров
		Область = Макет.ПолучитьОбласть("ТаблицаПриемкиТоваровШапка");
		ТабличныйДокумент.Вывести(Область);
		ТаблицаПриемкиТоваров = ДанныеПечати.ТаблицаПриемкиТоваров.Выгрузить();
		Для Каждого Строка Из ТаблицаПриемкиТоваров Цикл
			Область = Макет.ПолучитьОбласть("ТаблицаПриемкиТоваровСтрока");
			Область.Параметры.Заполнить(Строка);
			ТабличныйДокумент.Вывести(Область);
		КонецЦикла;
		Область = Макет.ПолучитьОбласть("ТаблицаПриемкиТоваровПодвал");
		ТабличныйДокумент.Вывести(Область);
		
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		// Страница №2 ////////////////////////////////////////////////////////////////////////////////////////////////////
		
		// Вывод шапки
		Область = Макет.ПолучитьОбласть("ШапкаВторойСтраницы");
		ТабличныйДокумент.Вывести(Область);
			
		// Вывод состояния транспорта по документам
		ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "СостояниеТранспортаПоДокументам", 4);
		
		// Вывод таблицы товаров по документам
		Область = Макет.ПолучитьОбласть("ТаблицаТоваровПоДокументамШапка");
		ТабличныйДокумент.Вывести(Область);
		Строки = ТаблицаТоваровПоДокументам.НайтиСтроки(Новый Структура("Ссылка",ДанныеПечати.Ссылка));
		Для Каждого Строка Из Строки Цикл
			Область = Макет.ПолучитьОбласть("ТаблицаТоваровПоДокументамСтрока");
			Область.Параметры.Заполнить(Строка);
			Если ПечатьВНоменклатуреПоставщкика Тогда
				
			Иначе
				Если ЗначениеЗаполнено(Строка.Номенклатура) Тогда
					
					ДопПараметрыПредставлениеНоменклатуры = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
					ДопПараметрыПредставлениеНоменклатуры.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
					
					Область.Параметры.Товар = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
						Строка.НоменклатураНаименование,
						Строка.ХарактеристикаНаименование,
						,
						,
						ДопПараметрыПредставлениеНоменклатуры);
				
				Иначе
					Область.Параметры.Товар = Строка.ТекстовоеОписание;
				КонецЕсли;
			КонецЕсли;
			ТабличныйДокумент.Вывести(Область);
		КонецЦикла;
		Область = Макет.ПолучитьОбласть("ТаблицаТоваровПоДокументамПодвал");
		ТабличныйДокумент.Вывести(Область);
		
		// Вывод состояния транспорта по факту
		ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "СостояниеТранспортаПоФакту", 4);
		
		// Вывод таблицы итогов
		Область = Макет.ПолучитьОбласть("ТаблицаИтогов");
		Область.Параметры.Заполнить(ДанныеПечати);
		ТабличныйДокумент.Вывести(Область);
		
		// Вывод первой части таблицы товаров
		Область = Макет.ПолучитьОбласть("ТаблицаТоваров1Шапка");
		Область.Параметры.НДС = ТекстНДСВШапкеТаблицы;
		ТабличныйДокумент.Вывести(Область);
		Область = Макет.ПолучитьОбласть("ТаблицаТоваров1Строка");
		Товары = ТаблицаТоваров.НайтиСтроки(Новый Структура("Ссылка", ДанныеПечати.Ссылка));
		Для Каждого Товар Из Товары Цикл
			Область.Параметры.Заполнить(Товар);
			Если ПечатьВНоменклатуреПоставщкика Тогда
				Область.Параметры.Товар   = Товар.НоменклатураПартнера;
			Иначе
				Если ЗначениеЗаполнено(Товар.НоменклатураНаименование) Тогда
					ДопПараметрыПредставлениеНоменклатуры = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
					ДопПараметрыПредставлениеНоменклатуры.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
					
					Область.Параметры.Товар = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
						Товар.НоменклатураНаименование,
						Товар.ХарактеристикаНаименование,
						,
						,
						ДопПараметрыПредставлениеНоменклатуры);
				Иначе
					Область.Параметры.Товар = Товар.ТекстовоеОписание;
				КонецЕсли;
			КонецЕсли;
			Область.Параметры.ЗначениеКода = Товар[КолонкаКодов];
			ТабличныйДокумент.Вывести(Область);
		КонецЦикла;
		Область = Макет.ПолучитьОбласть("ТаблицаТоваров1Подвал");
		ТабличныйДокумент.Вывести(Область);
		
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		// Страница №3 ////////////////////////////////////////////////////////////////////////////////////////////////////
		
		// Вывод шапки
		Область = Макет.ПолучитьОбласть("ШапкаТретьейСтраницы");
		ТабличныйДокумент.Вывести(Область);
		
		// Вывод Условий Хранения Товара До Вскрытия
		ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "УсловияХраненияТовараДоВскрытия", 4);
		
		// Вывод Температуры При Разгрузке
		Область = Макет.ПолучитьОбласть("ТемператураПриРазгрузке");
		Область.Параметры.ТемператураПриРазгрузке = ДанныеПечати.ТемператураПриРазгрузке;
		ТабличныйДокумент.Вывести(Область);
		
		// Вывод Состояния Тары И Упаковки
		ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "СостояниеТарыИУпаковки", 4);
			
		// Вывод содержания наружной маркировки
		ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "СодержаниеНаружнойМаркировки", 4);
		
		// Вывод даты вскрытия тары
		Область = Макет.ПолучитьОбласть("ДатаВскрытияТары");
		Область.Параметры.Заполнить(ПараметрыПоДате("ДатаВскрытияТары", ДанныеПечати.ДатаВскрытияТары));
		ТабличныйДокумент.Вывести(Область);
		
		// Вывод Организации Взвесившей И Опломбировавшей Товар
		ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "ОрганизацияВзвесившаяИОпломбировавшаяТовар", 4);
		
		// Вывод Порядока Отбора Товара Для Выборочной Проверки
		ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "ПорядокОтбораТовараДляВыборочнойПроверки", 4);
		
		// Вывод второй части таблицы товаров
		Область = Макет.ПолучитьОбласть("ТаблицаТоваров2Шапка");
		Область.Параметры.НДС = ТекстНДСВШапкеТаблицы;

		ТабличныйДокумент.Вывести(Область);
		Область = Макет.ПолучитьОбласть("ТаблицаТоваров2Строка");
		Для Каждого Товар Из Товары Цикл
			Область.Параметры.Заполнить(Товар);
			Если ЗначениеЗаполнено(КолонкаКодов) Тогда
				Область.Параметры.ЗначениеКода = Товар[КолонкаКодов];
			КонецЕсли;
			ТабличныйДокумент.Вывести(Область);
		КонецЦикла;
		Область = Макет.ПолучитьОбласть("ТаблицаТоваров2Подвал");
		ТабличныйДокумент.Вывести(Область);
		
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		// Страница №4 ////////////////////////////////////////////////////////////////////////////////////////////////////
		
		// Вывод шапки
		Область = Макет.ПолучитьОбласть("ШапкаЧетвертойСтраницы");
		ТабличныйДокумент.Вывести(Область);
		
		// Вывод способа определения количества
		Область = Макет.ПолучитьОбласть("СпособОпределенияКоличества");
		Область.Параметры.Заполнить(ДанныеПечати);
		ТабличныйДокумент.Вывести(Область);
		// Вывод места определения количества
		ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "МестоОпределенияКоличества", 4);
		// Вывод сведений об исправности весоизмерительных приборов
		ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "СведенияОбИсправностиВесоизмерительныхПриборов", 4);
		// Вывод прочих данных
		ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "ПрочиеДанные", 4);
		// Вывод подробного описания дефектов
		ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "ПодробноеОписаниеДефектов", 4);
		// Вывод заключения комиссии
		ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "ЗаключениеКомиссии", 4);
		// Вывод приложения
		ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "Приложение", 4);
		
		// Вывод членов комиссии
		Область = Макет.ПолучитьОбласть("ЧленыКомиссии");
		Область.Параметры.Заполнить(ДанныеПечати);
		Область.Параметры.Заполнить(ПараметрыПоДате("ДатаВыдачиДокументаУдостоверяющегоПолномочияПредставителяПартнера", ДанныеПечати.ДатаВыдачиДокументаУдостоверяющегоПолномочияПредставителяПартнера));
		Область.Параметры.ПредседательКомиссииФИО = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.ПредседательКомиссии);
		Область.Параметры.ЧленКомиссии1ФИО    = ДанныеПечати.ЧленКомиссии1;
		Область.Параметры.ЧленКомиссии2ФИО    = ДанныеПечати.ЧленКомиссии2;
		Область.Параметры.ЧленКомиссии3ФИО    = ДанныеПечати.ЧленКомиссии3;
		Область.Параметры.ГлавныйБухгалтерФИО = ДанныеПечати.ГлавныйБухгалтер;
		ТабличныйДокумент.Вывести(Область);
		
		// Вывод решения руководителя
		ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "РешениеРуководителя", 4);
		
		// Вывод кладовщика
		Область = Макет.ПолучитьОбласть("Кладовщик");
		Область.Параметры.КладовщикПринявшийТоварФИО = ДанныеПечати.КладовщикПринявшийТовар;
		ТабличныйДокумент.Вывести(Область);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область Печать_ТОРГ3

Функция СформироватьПечатнуюФормуТОРГ3(СтруктураТипов, ОбъектыПечати, ПараметрыПечати)

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	УстановитьПривилегированныйРежим(Истина);
	
	ПечатьВНоменклатуреПоставщкика = ПараметрыПечати.Свойство("ПечатьВНоменклатуреПоставщика") И ПараметрыПечати.ПечатьВНоменклатуреПоставщика;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТОРГ3";
	
	НомерТипаДокумента = 0;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл

		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		МенеджерОбъекта = ОбщегоНазначенияУТ.ПолучитьМодульЛокализации(СтруктураОбъектов.Ключ);
		Если МенеджерОбъекта = Неопределено Тогда
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтруктураОбъектов.Ключ);
		КонецЕсли;
		
		ДанныеДляПечати = МенеджерОбъекта.ПолучитьДанныеДляПечатнойФормыТОРГ3(ПараметрыПечати, СтруктураОбъектов.Значение);
		
		ЗаполнитьТабличныйДокументТорг3(
			ТабличныйДокумент,
			ДанныеДляПечати,
			ОбъектыПечати,
			ПечатьВНоменклатуреПоставщкика);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Параметры:
// 	ТабличныйДокумент              - ТабличныйДокумент - 
// 	ДанныеДляПечати                - см. АктОРасхожденияхПослеПриемкиЛокализация.ПолучитьДанныеДляПечатнойФормыТОРГ3
// 	ОбъектыПечати                  - СписокЗначений - 
// 	ПечатьВНоменклатуреПоставщкика - Булево - 
// 
Процедура ЗаполнитьТабличныйДокументТорг3(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, ПечатьВНоменклатуреПоставщкика)
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьАктыОРасхождениях.ПФ_MXL_ТОРГ3_ru");
	Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
	
	ДанныеСчетовФактур         = ДанныеДляПечати.ДанныеСчетовФактур.Выбрать();
	ДанныеПечати               = ДанныеДляПечати.ДанныеПечати.Выбрать();
	ТаблицаТоваров             = ДанныеДляПечати.ДанныеТовары.Выгрузить();
	
	ПервыйДокумент = Истина;
	
	КолонкаКодов = ФормированиеПечатныхФорм.ДополнительнаяКолонкаПечатныхФормДокументов().ИмяКолонки;
	Если НЕ ЗначениеЗаполнено(КолонкаКодов) Тогда
		КолонкаКодов = "Код";
	КонецЕсли;
	
	Пока ДанныеПечати.Следующий() Цикл
	
		Если НЕ ДанныеПечати.ЕстьРасхождения Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В документе %1 нет расхождений. Печать акта об установленном расхождении по количеству и качеству при приемке %2 не требуется.'"),
				ДанныеПечати.Ссылка,
				НСтр("ru='импортных товаров'"));
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка);
			Продолжить;
		КонецЕсли;
		
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТекстНДСВШапкеТаблицы = ?(ДанныеПечати.ЦенаВключаетНДС, "", " " + НСтр("ru='(Без НДС)'", Метаданные.Языки.Русский.КодЯзыка));
		
		Область = Макет.ПолучитьОбласть("ШапкаПервойСтраницы");
		Область.Параметры.Заполнить(ДанныеПечати);
		Область.Параметры.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеПечати.НомерДокумента, Ложь, Истина);
		Область.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.ДатаДокумента), "ПолноеНаименование,ЮридическийАдрес,Телефоны,");
		Область.Параметры.Поставщик = ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Поставщик, ДанныеПечати.ДатаДокумента), "ПолноеНаименование,ЮридическийАдрес,Телефоны,");
		Область.Параметры.Грузоотправитель = ДанныеПечати.Грузоотправитель;
		Область.Параметры.Производитель = ДанныеПечати.Производитель;
		Область.Параметры.Поставщик = ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Поставщик, ДанныеПечати.ДатаДокумента), "ПолноеНаименование,ЮридическийАдрес,Телефоны,");
		Область.Параметры.СтраховаяКомпания = ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.СтраховаяКомпания, ДанныеПечати.ДатаДокумента), "ПолноеНаименование,ЮридическийАдрес,Телефоны,");
		Область.Параметры.Заполнить(ПараметрыПоДате("ДатаДоставкиТоваров", ДанныеПечати.ДатаДоставкиТоваров));
		Область.Параметры.Заполнить(ПараметрыПоДате("ДатаОтправленияТоваров", ДанныеПечати.ДатаОтправленияТоваров));
		Область.Параметры.Заполнить(ПараметрыПоДате("ДатаДоговораПоставки", ДанныеПечати.ДатаДоговораПоставки));
		ДанныеСчетовФактур.Сбросить();
		Если ДанныеСчетовФактур.НайтиСледующий(Новый Структура("ДокументОснование", ДанныеПечати.Ссылка)) Тогда
			Область.Параметры.Заполнить(ДанныеСчетовФактур);
			Область.Параметры.НомерСчетаФактуры = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеСчетовФактур.НомерСчетаФактуры);
			Область.Параметры.Заполнить(ПараметрыПоДате("ДатаСчетаФактуры", ДанныеСчетовФактур.ДатаСчетаФактуры));
		КонецЕсли;
		Область.Параметры.Заполнить(ПараметрыПоДате("ДатаКоммерческогоАкта", ДанныеПечати.ДатаКоммерческогоАкта));
		Область.Параметры.Заполнить(ПараметрыПоДате("ДатаВетеринарногоСвидетельства", ДанныеПечати.ДатаВетеринарногоСвидетельства));
		Область.Параметры.Заполнить(ПараметрыПоДате("ДатаЖелезнодорожнойНакладной", ДанныеПечати.ДатаЖелезнодорожнойНакладной));
		Область.Параметры.Заполнить(ПараметрыПоДате("ДатаДокументаОВызовеПредставителяПартнера", ДанныеПечати.ДатаДокументаОВызовеПредставителяПартнера));
		Область.Параметры.Заполнить(ПараметрыПоДате("ДатаКоносамента", ДанныеПечати.ДатаКоносамента));
		Область.Параметры.Заполнить(ПараметрыПоДате("ДатаВскрытияТары", ДанныеПечати.ДатаВскрытияТары));
		Область.Параметры.ВызываемыйПредставительПартнера = ПолучитьЗначениеРеквизитаПоШаблону(ДанныеПечати.ВызываемыйПредставительПартнера, НСтр("ru='грузоотправителя, поставщика, производителя'", Метаданные.Языки.Русский.КодЯзыка));
		Область.Параметры.ВидДокументаОВызовеПредставителяПартнера = ПолучитьЗначениеРеквизитаПоШаблону(ДанныеПечати.ВидДокументаОВызовеПредставителяПартнера, НСтр("ru='телеграмма, факс, телефонограмма, радиограмма'", Метаданные.Языки.Русский.КодЯзыка));
		Область.Параметры.ОснованиеДляСоставленияАкта = ПолучитьЗначениеРеквизитаПоШаблону(ДанныеПечати.ОснованиеДляСоставленияАкта, НСтр("ru='приказ, распоряжение'", Метаданные.Языки.Русский.КодЯзыка));
		Область.Параметры.РуководительФИО = ДанныеПечати.Руководитель;
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, Область, ДанныеПечати.Ссылка);
		ТабличныйДокумент.Вывести(Область);
		
		// Страница №2 ////////////////////////////////////////////////////////////////////////////////////////////////////
		
		// Вывод шапки
		Область = Макет.ПолучитьОбласть("ШапкаВторойСтраницы");
		ТабличныйДокумент.Вывести(Область);
		
		// Вывод таблицы брутто по документам
		Область = Макет.ПолучитьОбласть("ТаблицаБруттоПоДокументам");
		ТабличныйДокумент.Вывести(Область);
			
		// Вывод Условия Хранения Товара До Вскрытия
		ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "УсловияХраненияТовараДоВскрытия", 4);
		
		// Вывод первой части таблицы товаров
		Область = Макет.ПолучитьОбласть("ТаблицаТоваров1Шапка");
		Область.Параметры.НДС = ТекстНДСВШапкеТаблицы;
		Область.Параметры.Валюта = ДанныеПечати.Валюта;
		ТабличныйДокумент.Вывести(Область);
		Область = Макет.ПолучитьОбласть("ТаблицаТоваров1Строка");
		Товары = ТаблицаТоваров.НайтиСтроки(Новый Структура("Ссылка", ДанныеПечати.Ссылка));
		Для Каждого Товар Из Товары Цикл
			Область.Параметры.Заполнить(Товар);
			Если ПечатьВНоменклатуреПоставщкика Тогда
				Область.Параметры.Товар = Товар.НоменклатураПартнера;
			Иначе
				ДопПараметрыПредставлениеНоменклатуры = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
				ДопПараметрыПредставлениеНоменклатуры.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
				
				Область.Параметры.Товар = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
					Товар.НоменклатураНаименование,
					Товар.ХарактеристикаНаименование,
					,
					,
					ДопПараметрыПредставлениеНоменклатуры);
			КонецЕсли;
			Область.Параметры.ЗначениеКода = Товар[КолонкаКодов];
			ТабличныйДокумент.Вывести(Область);
		КонецЦикла;
		Область = Макет.ПолучитьОбласть("ТаблицаТоваров1Подвал");
		ТабличныйДокумент.Вывести(Область);
		
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		// Страница №3 ////////////////////////////////////////////////////////////////////////////////////////////////////
		
		// Вывод шапки
		Область = Макет.ПолучитьОбласть("ШапкаТретьейСтраницы");
		ТабличныйДокумент.Вывести(Область);
		
		// Вывод таблицы итогов
		Область = Макет.ПолучитьОбласть("ТаблицаИтогов");
		Область.Параметры.Заполнить(ДанныеПечати);
		ТабличныйДокумент.Вывести(Область);
		
		// Вывод Состояния Тары И Упаковки
		ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "СостояниеТарыИУпаковки", 4);
		
		// Вывод второй части таблицы товаров
		Область = Макет.ПолучитьОбласть("ТаблицаТоваров2Шапка");
		Область.Параметры.НДС = ТекстНДСВШапкеТаблицы;
		Область.Параметры.Валюта = ДанныеПечати.Валюта;
		
		ТабличныйДокумент.Вывести(Область);
		Область = Макет.ПолучитьОбласть("ТаблицаТоваров2Строка");
		Для Каждого Товар Из Товары Цикл
			Область.Параметры.Заполнить(Товар);
			ТабличныйДокумент.Вывести(Область);
		КонецЦикла;
		Область = Макет.ПолучитьОбласть("ТаблицаТоваров2Подвал");
		ТабличныйДокумент.Вывести(Область);
		
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		// Страница №4 ////////////////////////////////////////////////////////////////////////////////////////////////////
		
		// Вывод шапки
		Область = Макет.ПолучитьОбласть("ШапкаЧетвертойСтраницы");
		ТабличныйДокумент.Вывести(Область);
		
		// Вывод способа определения количества
		Область = Макет.ПолучитьОбласть("СпособОпределенияКоличества");
		Область.Параметры.Заполнить(ДанныеПечати);
		ТабличныйДокумент.Вывести(Область);
		// Вывод места определения количества
		ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "МестоОпределенияКоличества", 4);
		// Вывод сведений об исправности весоизмерительных приборов
		ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "СведенияОбИсправностиВесоизмерительныхПриборов", 4);
		// Вывод прочих данных
		ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "ПрочиеДанные", 4);
		// Вывод подробного описания дефектов
		ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "ПодробноеОписаниеДефектов", 4);
		// Вывод заключения комиссии
		ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "ЗаключениеКомиссии", 4);
		// Вывод приложения
		ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "Приложение", 4);
		
		// Вывод членов комиссии
		Область = Макет.ПолучитьОбласть("ЧленыКомиссии");
		Область.Параметры.Заполнить(ДанныеПечати);
		Область.Параметры.Заполнить(ПараметрыПоДате("ДатаВыдачиДокументаУдостоверяющегоПолномочияПредставителяПартнера", ДанныеПечати.ДатаВыдачиДокументаУдостоверяющегоПолномочияПредставителяПартнера));
		Область.Параметры.ПредседательКомиссииФИО = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.ПредседательКомиссии);
		Область.Параметры.ЧленКомиссии1ФИО    = ДанныеПечати.ЧленКомиссии1;
		Область.Параметры.ЧленКомиссии2ФИО    = ДанныеПечати.ЧленКомиссии2;
		Область.Параметры.ЧленКомиссии3ФИО    = ДанныеПечати.ЧленКомиссии3;
		Область.Параметры.ГлавныйБухгалтерФИО = ДанныеПечати.ГлавныйБухгалтер;
		ТабличныйДокумент.Вывести(Область);
		
		// Вывод решения руководителя
		ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "РешениеРуководителя", 4);
		
		// Вывод кладовщика
		Область = Макет.ПолучитьОбласть("Кладовщик");
		Область.Параметры.КладовщикПринявшийТоварФИО = ДанныеПечати.КладовщикПринявшийТовар;
		ТабличныйДокумент.Вывести(Область);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;

КонецПроцедуры


#КонецОбласти

#КонецОбласти

#Область Прочее

// Производит пересчет ценовых показателей таблицы товаров в валюте регламентированного учета.
//
// Параметры:
//  ТаблицаТоваров - ТаблицаЗначений - Таблица по товарам, содержит в том числе:
//  	* Ссылка - ДокументСсылка.АктОРасхожденияхПослеОтгрузки, ДокументСсылка.АктОРасхожденияхПослеПриемки - 
//  ТаблицаВалют   - ТаблицаЗначений - Таблица значений курсов валют.
//  ИмяФормы       - Строка          - Имя печатной формы.
Процедура ПересчитатьСуммыВВалютеРегламентированногоУчета(ТаблицаТоваров, ТаблицаВалют, ИмяФормы)
	
	СоответствиеСсылок = Новый Соответствие;    // Ключ - <ДокументСсылка.АктОРасхождениях>
	                                            // Значение - <Структура>
	
	Для Каждого Строка Из ТаблицаТоваров Цикл
		
		ТекущаяСсылка = СоответствиеСсылок[Строка.Ссылка];
		
		Если ТекущаяСсылка = Неопределено Тогда
			
			ТекущаяСсылка = Новый Структура;
			
			ОписаниеКурсовВалют = ТаблицаВалют.Найти(Строка.Ссылка, "Ссылка");
			Если ОписаниеКурсовВалют = Неопределено ИЛИ ОписаниеКурсовВалют.ПересчетНеТребуется Тогда
				ТекущаяСсылка.Вставить("ТребуетсяПересчет", Ложь);
			Иначе
				ТекущаяСсылка.Вставить("ТребуетсяПересчет", Истина);
				
				ТекущаяСсылка.Вставить("КоэффициентПересчета",
					ОписаниеКурсовВалют.КурсВалютыДокумента * ОписаниеКурсовВалют.КратностьВалютыРегламентированногоУчета
					/ (ОписаниеКурсовВалют.КратностьВалютыДокумента * ОписаниеКурсовВалют.КурсВалютыРегламентированногоУчета));
				
				ТекущаяСсылка.Вставить("ЦенаВключаетНДСПоДокументам", Строка.ЦенаВключаетНДСПоДокументам);
				ТекущаяСсылка.Вставить("ЦенаВключаетНДСПоФакту", Строка.ЦенаВключаетНДСПоДокументам);
				
				ТекущаяСсылка.Вставить("ИтогПоДокументам", 0);
				ТекущаяСсылка.Вставить("МассивПоДокументам", Новый Массив);
				ТекущаяСсылка.Вставить("ИтогПоФакту", 0);
				ТекущаяСсылка.Вставить("МассивПоФакту", Новый Массив);
				
			КонецЕсли;
			
			СоответствиеСсылок.Вставить(Строка.Ссылка, ТекущаяСсылка);
			
		КонецЕсли;
		
		Если ТекущаяСсылка.ТребуетсяПересчет Тогда
			
			Если Строка.СуммаПоДокументам <> 0 Тогда
				СуммаПоДокументам = ?(ТекущаяСсылка.ЦенаВключаетНДСПоДокументам,
					Строка.СуммаПоДокументам,
					Строка.СуммаПоДокументам+Строка.СуммаНДСПоДокументам)
					* ТекущаяСсылка.КоэффициентПересчета;
				ТекущаяСсылка.ИтогПоДокументам = ТекущаяСсылка.ИтогПоДокументам + СуммаПоДокументам;
				ТекущаяСсылка.МассивПоДокументам.Добавить(СуммаПоДокументам);
			КонецЕсли;
			Если Строка.СуммаПоФакту <> 0 Тогда
				СуммаПоФакту = ?(ТекущаяСсылка.ЦенаВключаетНДСПоФакту,
					Строка.СуммаПоФакту,
					Строка.СуммаПоФакту+Строка.СуммаНДСПоФакту)
					* ТекущаяСсылка.КоэффициентПересчета;
				ТекущаяСсылка.ИтогПоФакту = ТекущаяСсылка.ИтогПоФакту + СуммаПоФакту;
				ТекущаяСсылка.МассивПоФакту.Добавить(СуммаПоФакту);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ТекущаяСсылка Из СоответствиеСсылок Цикл
		
		Если НЕ ТекущаяСсылка.Значение.ТребуетсяПересчет Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяСсылка.Значение.МассивПоДокументам = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
			ТекущаяСсылка.Значение.ИтогПоДокументам, ТекущаяСсылка.Значение.МассивПоДокументам);
		ТекущаяСсылка.Значение.МассивПоФакту = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
			ТекущаяСсылка.Значение.ИтогПоФакту, ТекущаяСсылка.Значение.МассивПоФакту);
		
	КонецЦикла;
	
	Для Каждого Строка Из ТаблицаТоваров Цикл
		
		ТекущаяСсылка = СоответствиеСсылок[Строка.Ссылка];
		Если ТекущаяСсылка = Неопределено ИЛИ НЕ ТекущаяСсылка.ТребуетсяПересчет Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяСсылка.МассивПоДокументам <> Неопределено И Строка.СуммаПоДокументам<>0 Тогда
			СуммаСНДС                   = ТекущаяСсылка.МассивПоДокументам[0];
			Строка.СуммаНДСПоДокументам = Окр(ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(СуммаСНДС,Строка.СтавкаНДС),2);
			Строка.СуммаПоДокументам    = ?(ТекущаяСсылка.ЦенаВключаетНДСПоДокументам, СуммаСНДС, СуммаСНДС - Строка.СуммаНДСПоДокументам);
			ТекущаяСсылка.МассивПоДокументам.Удалить(0);
			Если Строка.КоличествоПоДокументам > 0 Тогда
				Строка.Цена= Строка.СуммаПоДокументам / Строка.КоличествоПоДокументам;
			КонецЕсли;
		КонецЕсли;
		
		ЦенаПоФакту = 0;
		СуммаСНДСПоФакту = 0;
		Если ТекущаяСсылка.МассивПоФакту <> Неопределено И Строка.СуммаПоФакту <> 0 Тогда
			СуммаСНДСПоФакту       = ТекущаяСсылка.МассивПоФакту[0];
			Строка.СуммаНДСПоФакту = Окр(ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(СуммаСНДСПоФакту,Строка.СтавкаНДС),2);
			Строка.СуммаПоФакту    = ?(ТекущаяСсылка.ЦенаВключаетНДСПоФакту, СуммаСНДСПоФакту, СуммаСНДСПоФакту - Строка.СуммаНДСПоФакту);
			ТекущаяСсылка.МассивПоФакту.Удалить(0);
			Если Строка.КоличествоПоФакту > 0 Тогда
				ЦенаПоФакту = Строка.СуммаПоФакту / Строка.КоличествоПоФакту;
				Строка.Цена = ЦенаПоФакту;
			КонецЕсли;
		Иначе
			Строка.Цена = Строка.Цена;
		КонецЕсли;
		
		Если ТекущаяСсылка.МассивПоДокументам <> Неопределено И Строка.СуммаПоДокументам<>0 Тогда
			Строка.Цена = Строка.Цена;
		КонецЕсли;
		
		Если ИмяФормы = "ТОРГ1" ТОГДА
			Строка.СуммаСНДСПоФакту = СуммаСНДСПоФакту;
			Строка.СуммаОтклонение = Строка.СуммаПоФакту - Строка.СуммаПоДокументам;
		КонецЕсли;
		
		Если ИмяФормы = "ТОРГ2" Тогда
			Строка.СуммаИзлишек   = ?(Строка.СуммаПоФакту>Строка.СуммаПоДокументам, Строка.СуммаПоФакту-Строка.СуммаПоДокументам, 0);
			Строка.СуммаНедостача = ?(Строка.СуммаПоФакту<Строка.СуммаПоДокументам, Строка.СуммаПоДокументам-Строка.СуммаПоФакту, 0);
			Строка.ЦенаПоФакту = ЦенаПоФакту;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выводит многострочное поле в табличный документ
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент
//  Макет - ТабличныйДокумент - Макет табличного документа
//  ДанныеПечати - ВыборкаИзРезультатаЗапроса
//  ИмяПоля - Строка - Имя реквизита результата запроса, имя области макета, имя параметра области макета
//  КоличествоСтрокРучногоВвода - Число - Количество строк ручного заполнения.
//
Процедура ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, ИмяПоля, КоличествоСтрокРучногоВвода=4)
	
	Область = Макет.ПолучитьОбласть(ИмяПоля);
	ТабличныйДокумент.Вывести(Область);
	Если ЗначениеЗаполнено(ДанныеПечати[ИмяПоля]) Тогда
		
		Область = Макет.ПолучитьОбласть("МногострочноеПоле");
		Область.Параметры.Значение = ДанныеПечати[ИмяПоля];
		ТабличныйДокумент.Вывести(Область);
		
	Иначе
		ОбластьСтрокиРучногоЗаполнения = Макет.ПолучитьОбласть("СтрокаРучногоЗаполнения");
		Для Счет =1 По КоличествоСтрокРучногоВвода Цикл
			ТабличныйДокумент.Вывести(ОбластьСтрокиРучногоЗаполнения);
		КонецЦикла;
		
	КонецЕсли;
	
	ОбластьСтрокиПробела = Макет.ПолучитьОбласть("СтрокаПробела");
	ТабличныйДокумент.Вывести(ОбластьСтрокиПробела);
	
КонецПроцедуры

// Получает заполненную структуру по дате и имени параметра
//
// Параметры:
//  ИмяПараметра - Строка - Строка префикса имен параметров структуры
//  Дата - Дата - Дата, которую необходимо разбить на параметры.
//
// Возвращаемое значение:
//  Структура даты - Структура - содержит данные указанной даты.
//
Функция ПараметрыПоДате(ИмяПараметра, Дата)
	
	СтруктураДаты = Новый Структура;
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Возврат СтруктураДаты;
	КонецЕсли;
	СтруктураДаты.Вставить(ИмяПараметра+"День", День(Дата));
	СтруктураДаты.Вставить(ИмяПараметра+"Месяц", Сред(Формат(Дата,"ДФ=dd.MMMM"), 4));
	СтруктураДаты.Вставить(ИмяПараметра+"Год", Формат(Год(Дата), "ЧГ=0"));
	
	Возврат СтруктураДаты;
	
КонецФункции

// Возвращает реквизит или шаблонную строку
//
// Параметры:
//  Значение - ПроизвольноеЗначение - Значение реквизита документа для преобразования
//  ШаблонПустогоЗначения - Строка - Строка, возвращаемая в случае если параметр "Значение" на заполнен.
//
// Возвращаемое значение:
//  Строка
//
Функция ПолучитьЗначениеРеквизитаПоШаблону(Значение, ШаблонПустогоЗначения)
	
	Если ЗначениеЗаполнено(Значение) Тогда
		Возврат Строка(Значение);
	Иначе
		Возврат ШаблонПустогоЗначения;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
