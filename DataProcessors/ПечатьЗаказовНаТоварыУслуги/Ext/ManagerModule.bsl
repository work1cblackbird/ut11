#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область Печать

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов - см. УправлениеПечатьюПереопределяемый.ПриПечати.МассивОбъектов
//  ПараметрыПечати - см. УправлениеПечатьюПереопределяемый.ПриПечати.ПараметрыПечати
//  КоллекцияПечатныхФорм - см. УправлениеПечатьюПереопределяемый.ПриПечати.КоллекцияПечатныхФорм
//  ОбъектыПечати - см. УправлениеПечатьюПереопределяемый.ПриПечати.ОбъектыПечати
//  ПараметрыВывода - см. УправлениеПечатьюПереопределяемый.ПриПечати.ПараметрыВывода
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	СтруктураТипов = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(МассивОбъектов);
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаказКлиента") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ЗаказКлиента",
			НСтр("ru = 'Заказ клиента'"),
			СформироватьПечатнуюФормуЗаказаКлиента(СтруктураТипов, ОбъектыПечати, ПараметрыПечати, ПараметрыВывода.КодЯзыка),,
			"Обработка.ПечатьЗаказовНаТоварыУслуги.ПФ_MXL_ЗаказКлиента");
		
		ОписаниеПечатнойФормы = КоллекцияПечатныхФорм.Найти(ВРег("ЗаказКлиента"), "ИмяВРЕГ");
		Если ОписаниеПечатнойФормы <> Неопределено Тогда
			ОписаниеПечатнойФормы.ДоступенВыводНаДругихЯзыках = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаказПоставщику") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ЗаказПоставщику",
			НСтр("ru = 'Заказ поставщику'"),
			СформироватьПечатнуюФормуЗаказаПоставщику(СтруктураТипов, ОбъектыПечати, ПараметрыПечати, ПараметрыВывода.КодЯзыка),,
			"Обработка.ПечатьЗаказовНаТоварыУслуги.ПФ_MXL_ЗаказПоставщику");
		
		ОписаниеПечатнойФормы = КоллекцияПечатныхФорм.Найти(ВРег("ЗаказПоставщику"), "ИмяВРЕГ");
		Если ОписаниеПечатнойФормы <> Неопределено Тогда
			ОписаниеПечатнойФормы.ДоступенВыводНаДругихЯзыках = Истина;
		КонецЕсли;
		
	КонецЕсли;
	

	
	ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, СтруктураТипов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

Функция СформироватьПечатнуюФормуЗаказаКлиента(СтруктураТипов, ОбъектыПечати, ПараметрыПечати, КодЯзыка = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТабличныйДокумент.АвтоМасштаб			= Истина;
	ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ИмяПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказКлиента";
	
	НомерТипаДокумента = 0;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
			
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтруктураОбъектов.Ключ);
		
		// Данные для массива объектов
		ДанныеДляПечати = МенеджерОбъекта.ПолучитьДанныеДляПечатнойФормыЗаказаНаТоварыУслуги(
			СтруктураОбъектов.Значение,
			ПараметрыПечати,
			КодЯзыка);
		
		// Сформированный тбаличный документ
		ЗаполнитьТабличныйДокументЗаказаНаТоварыУслуги(
			ТабличныйДокумент,
			ДанныеДляПечати,
			ОбъектыПечати,
			"Обработка.ПечатьЗаказовНаТоварыУслуги.ПФ_MXL_ЗаказКлиента",
			КодЯзыка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция СформироватьПечатнуюФормуЗаказаПоставщику(СтруктураТипов, ОбъектыПечати, ПараметрыПечати, КодЯзыка = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТабличныйДокумент.АвтоМасштаб			= Истина;
	ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ИмяПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПоставщику";
	
	НомерТипаДокумента = 0;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
			
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтруктураОбъектов.Ключ);
		
		// Данные для массива объектов
		ДанныеДляПечати = МенеджерОбъекта.ПолучитьДанныеДляПечатнойФормыЗаказаНаТоварыУслуги(
			СтруктураОбъектов.Значение,
			ПараметрыПечати,
			КодЯзыка);
		
		// Сформированный тбаличный документ                    
		ЗаполнитьТабличныйДокументЗаказаНаТоварыУслуги(
			ТабличныйДокумент,
			ДанныеДляПечати,
			ОбъектыПечати,
			"Обработка.ПечатьЗаказовНаТоварыУслуги.ПФ_MXL_ЗаказПоставщику",
			КодЯзыка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции



#КонецОбласти

#Область ПечатьЗаказаПартнеруОтПартнераНаТоварыРаботыИлиУслуги

// Параметры:
//	ТабличныйДокумент           - ТабличныйДокумент -
//	ДанныеДляПечати             - Структура - Содержит в себе данные по шапке документа, этапам оплаты, табличной части:
//		* РезультатПоШапке          - РезультатЗапроса -
//		* РезультатПоЭтапамОплаты   - РезультатЗапроса -
//		* РезультатПоТабличнойЧасти - РезультатЗапроса -
//	ОбъектыПечати               - см. УправлениеПечатьюПереопределяемый.ПриПечати.ОбъектыПечати
//	ИмяМакета                   - Строка -
//	КодЯзыка                    - Строка, Неопределено -
//
Процедура ЗаполнитьТабличныйДокументЗаказаНаТоварыУслуги(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, ИмяМакета, КодЯзыка)
	
	ШаблонОшибкиТовары	= НСтр("ru = 'В документе %1 отсутствуют товары. Печать %2 не требуется'");
	
	ДанныеПечати	= ДанныеДляПечати.РезультатПоШапке.Выбрать();
	ЭтапыОплаты		= ДанныеДляПечати.РезультатПоЭтапамОплаты.Выгрузить();
	Товары			= ДанныеДляПечати.РезультатПоТабличнойЧасти.Выгрузить();
	
	ПервыйДокумент	= Истина;
	КолонкаКодов = ФормированиеПечатныхФорм.ДополнительнаяКолонкаПечатныхФормДокументов();
	ИмяКолонкиКодов = КолонкаКодов.ИмяКолонки;
	ПредставлениеКолонкиКодов = КолонкаКодов.ПредставлениеКолонки;
	ВыводитьКоды = Не ПустаяСтрока(ИмяКолонкиКодов);
	
	ПараметрыЗаполненияПФ = Новый Структура;
	ПараметрыЗаполненияПФ.Вставить("ШаблонОшибкиТовары", ШаблонОшибкиТовары);
	ПараметрыЗаполненияПФ.Вставить("ИмяКолонкиКодов", ИмяКолонкиКодов);
	ПараметрыЗаполненияПФ.Вставить("ПредставлениеКолонкиКодов", ПредставлениеКолонкиКодов);
	ПараметрыЗаполненияПФ.Вставить("ВыводитьКоды", ВыводитьКоды);
	ПараметрыЗаполненияПФ.Вставить("ДанныеПечати", ДанныеПечати);
	ПараметрыЗаполненияПФ.Вставить("ЭтапыОплаты", ЭтапыОплаты);
	ПараметрыЗаполненияПФ.Вставить("Товары", Товары);
	
	Пока ДанныеПечати.Следующий() Цикл
		
		Макет = УправлениеПечатью.МакетПечатнойФормы(ИмяМакета, КодЯзыка);
		
		ПараметрыЗаполненияПФ.Вставить("Макет", Макет);
		
		// выполнено разделение кода для совместимости с пользовательскими макетами, отредактированными вручную, в версии до 2.5.10
		Если НЕ Макет.Области.Найти("Макет_2_5_10") = Неопределено Тогда
			                                               // адаптирован для перевода
			ЗаполнитьТабличныйДокументЗаказаНаТоварыУслугиАдаптированДляПеревода(ТабличныйДокумент, ПараметрыЗаполненияПФ, ОбъектыПечати, ПервыйДокумент, КодЯзыка);
			
		Иначе
			                                               // не адаптирован
			ЗаполнитьТабличныйДокументЗаказаНаТоварыУслугиДо_2_5_10(ТабличныйДокумент, ПараметрыЗаполненияПФ, ОбъектыПечати, ПервыйДокумент, КодЯзыка);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


Процедура ЗаполнитьТабличныйДокументЗаказаНаТоварыУслугиАдаптированДляПеревода(ТабличныйДокумент, ПараметрыЗаполненияПФ, ОбъектыПечати, ПервыйДокумент, КодЯзыка)
	
	ШаблонОшибкиТовары = ПараметрыЗаполненияПФ.ШаблонОшибкиТовары;
	Макет = ПараметрыЗаполненияПФ.Макет;
	ИмяКолонкиКодов = ПараметрыЗаполненияПФ.ИмяКолонкиКодов;
	ВыводитьКоды = ПараметрыЗаполненияПФ.ВыводитьКоды;
	ДанныеПечати = ПараметрыЗаполненияПФ.ДанныеПечати;
	ЭтапыОплаты = ПараметрыЗаполненияПФ.ЭтапыОплаты;
	Товары = ПараметрыЗаполненияПФ.Товары;
	
	СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
	
	ТаблицаТовары = Товары.НайтиСтроки(СтруктураПоиска);
	
	Если ТаблицаТовары.Количество() = 0 Тогда
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонОшибкиТовары,
		ДанныеПечати.Ссылка,
		ДанныеПечати.ПредставлениеВОшибке);
		
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ДанныеПечати.Ссылка);
		Возврат;
		
	КонецЕсли;
	
	ТаблицаЭтапыОплаты = ЭтапыОплаты.НайтиСтроки(СтруктураПоиска);
	
	Если ПервыйДокумент Тогда
		ПервыйДокумент = Ложь;
	Иначе
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	
	ЕстьНаценки = Ложь;
	ЕстьСкидки  = Ложь;
	
	Если ДанныеПечати.ИспользоватьАвтоСкидки Тогда
		
		Для Каждого СтрокаТоваров Из Товары Цикл
			Если СтрокаТоваров.СуммаСкидки>0 Тогда
				ЕстьСкидки = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаТоваров Из Товары Цикл
			Если СтрокаТоваров.СуммаСкидки<0 Тогда
				ЕстьНаценки = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ВыводитьВидЦены = Ложь;
	Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
		
		Если ЗначениеЗаполнено(СтрокаТовары.ВидЦеныИсполнителя) Тогда
			ВыводитьВидЦены = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	СкидкиНастройка = Новый Структура;
	СкидкиНастройка.Вставить("ЕстьСкидки", ЕстьНаценки ИЛИ ЕстьСкидки);
	СкидкиНастройка.Вставить("ЕстьСкидка", ЕстьСкидки);
	СкидкиНастройка.Вставить("ЕстьНаценка", ЕстьНаценки);
	ЕстьСкидки = ЕстьНаценки ИЛИ ЕстьСкидки;
	
	ПоказыватьНДС	= ДанныеПечати.ПоказыватьНДСВСтроках И ДанныеПечати.УчитыватьНДС;
	
#Область ОпределениеИменЗаголовковОбластей
	
	ЕстьДопПараметр		= ЕстьСкидки Или ПоказыватьНДС;
	ДвойнойДопПараметр	= ЕстьСкидки И ПоказыватьНДС;
	
	ОбластиКолонок = НазванияОбластейКолонок(ДвойнойДопПараметр, ЕстьДопПараметр);
	
	ОбластьКолонкаТовар = Макет.Область(ОбластиКолонок.Товар);
	
	Если Не ВыводитьКоды Тогда
		
		Если ДвойнойДопПараметр Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 1.35;
		ИначеЕсли ЕстьДопПараметр Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 1.2;
		Иначе
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 1.14;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбластиСтрок = НазванияОбластейСтрок(СкидкиНастройка, ВыводитьВидЦены, ПоказыватьНДС);
	
#КонецОбласти
	
#Область ОбластиМакета
	
	// ОБЛАСТЕЙ ТАБЛИЦЫ "ТОВАРЫ"
	СтруктураОбластьКодовШапки = Новый Структура("Код, Артикул");
	
	ОбластьНомераШапки = Макет.ПолучитьОбласть(ОбластиСтрок.ШапкаТаблицы + "|НомерСтроки");
	СтруктураОбластьКодовШапки.Код = Макет.ПолучитьОбласть(ОбластиСтрок.ШапкаТаблицы + "|КолонкаКод");
	СтруктураОбластьКодовШапки.Артикул = Макет.ПолучитьОбласть(ОбластиСтрок.ШапкаТаблицы + "|КолонкаАртикул");
	ОбластьКодовШапки = ?(ВыводитьКоды, СтруктураОбластьКодовШапки[ИмяКолонкиКодов], Неопределено);
	
	ОбластьТоварШапки = Макет.ПолучитьОбласть(ОбластиСтрок.ШапкаТаблицы + "|" + ОбластиКолонок.Товар);
	ОбластьДанныхШапки = Макет.ПолучитьОбласть(ОбластиСтрок.ШапкаТаблицы + "|" + ОбластиКолонок.Данные);
	
	ОбластьНомераСтрокиСтандарт = Макет.ПолучитьОбласть(ОбластиСтрок.СтрокаТаблицы + "|НомерСтроки");
	ОбластьКодовСтрокиСтандарт  = Макет.ПолучитьОбласть(ОбластиСтрок.СтрокаТаблицы + "|КолонкаКод");
	ОбластьТоварСтрокиСтандарт  = Макет.ПолучитьОбласть(ОбластиСтрок.СтрокаТаблицы + "|" + ОбластиКолонок.Товар);
	ОбластьДанныхСтрокиСтандарт = Макет.ПолучитьОбласть(ОбластиСтрок.СтрокаТаблицы + "|" + ОбластиКолонок.Данные);
	
	ИспользоватьНаборы = Ложь;
	Если Товары.Колонки.Найти("ЭтоНабор") <> Неопределено Тогда
		ИспользоватьНаборы = Истина;
		ОбластьНомераСтрокиНабор         = Макет.ПолучитьОбласть(ОбластиСтрок.СтрокаТаблицы + "|НомерСтроки");
		ОбластьНомераСтрокиКомплектующие = Макет.ПолучитьОбласть(ОбластиСтрок.СтрокаТаблицы + "|НомерСтроки");
		ОбластьКодовСтрокиНабор          = Макет.ПолучитьОбласть(ОбластиСтрок.СтрокаТаблицы + "|КолонкаКод");
		ОбластьКодовСтрокиКомплектующие  = Макет.ПолучитьОбласть(ОбластиСтрок.СтрокаТаблицы + "|КолонкаКод");
		ОбластьТоварСтрокиНабор          = Макет.ПолучитьОбласть(ОбластиСтрок.СтрокаТаблицы + "|" + ОбластиКолонок.Товар);
		ОбластьТоварСтрокиКомплектующие  = Макет.ПолучитьОбласть(ОбластиСтрок.СтрокаТаблицы + "|" + ОбластиКолонок.Товар);
		ОбластьДанныхСтрокиНабор         = Макет.ПолучитьОбласть(ОбластиСтрок.СтрокаТаблицы + "|" + ОбластиКолонок.Данные);
		ОбластьДанныхСтрокиКомплектующие = Макет.ПолучитьОбласть(ОбластиСтрок.СтрокаТаблицы + "|" + ОбластиКолонок.Данные);
	КонецЕсли;
	
	ОбластьНомераПодвала	= Макет.ПолучитьОбласть(ОбластиСтрок.ПодвалТаблицы + "|НомерСтроки");
	ОбластьКодовПодвала		= Макет.ПолучитьОбласть(ОбластиСтрок.ПодвалТаблицы + "|КолонкаКод");
	ОбластьТоварПодвала		= Макет.ПолучитьОбласть(ОбластиСтрок.ПодвалТаблицы + "|" + ОбластиКолонок.Товар);
	ОбластьДанныхПодвала	= Макет.ПолучитьОбласть(ОбластиСтрок.ПодвалТаблицы + "|" + ОбластиКолонок.Данные);
	
	Если НЕ ДанныеПечати.Тип = "ЗаказПереработчикуНаУслуги" Тогда
		
		ОбластьНомераНДС = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|НомерСтроки");
		ОбластьКодовНДС = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|КолонкаАртикул");
		
		ОбластьДанныеНДС = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|ДанныеНДС");
		ОбластьДанныеНДСИсчисляетсяНалоговымАгентом = Макет.ПолучитьОбласть("ПодвалТаблицыНДСИсчисляетсяНалоговымАгентом|ДанныеНДС");
		ОбластьДанныеБезНДС = Макет.ПолучитьОбласть("ПодвалТаблицыНДСБезНДС|ДанныеНДС");
		ОбластьДанныеВТЧНДС = Макет.ПолучитьОбласть("ПодвалТаблицыВТЧНДС|ДанныеНДС");
		
	КонецЕсли;
	
	ОбластьСуммаПрописью = Макет.ПолучитьОбласть("СуммаПрописью");
	
#КонецОбласти
	
#Область ВыводШапки
	
	// ШАПКА - ЗАГОЛОВОК
	Если ДанныеПечати.Тип = "ЗаказДавальцаНаУслуги" Тогда
		
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокЗаказДавальцаНаУслуги");
		
	ИначеЕсли  ДанныеПечати.Тип = "ЗаказДавальцуНаСырье" Тогда
		
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокЗаказДавальцуНаСырье");
		
	Иначе
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		
	КонецЕсли;
	
	ФормированиеПечатныхФорм.ВывестиЛоготипВТабличныйДокумент(Макет, ОбластьМакета, "ЗаголовокЛоготип", ДанныеПечати.Организация);
	
	СтруктураДанныхШапки = Новый Структура;
	СтруктураДанныхШапки.Вставить("НомерДокумента", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеПечати.Номер));
	СтруктураДанныхШапки.Вставить("ДатаДокумента", Формат(ДанныеПечати.Дата, СтрШаблон("Л=%1;ДЛФ=DD", КодЯзыка)));
	
	ОбластьМакета.Параметры.Заполнить(СтруктураДанныхШапки);
	
	ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(
	ТабличныйДокумент,
	Макет,
	ОбластьМакета,
	ДанныеПечати.Ссылка);
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// ШАПКА - ИСПОЛНИТЕЛЬ
	
	ОбластьМакета = Макет.ПолучитьОбласть("Исполнитель");
	УстановитьПараметр(ОбластьМакета, "ПредставлениеИсполнителя", ОписаниеОрганизации(ДанныеПечати, "Исполнитель", КодЯзыка));
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// ШАПКА - ЗАКАЗЧИК
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заказчик");
	УстановитьПараметр(ОбластьМакета, "ПредставлениеЗаказчика", ОписаниеОрганизации(ДанныеПечати, "Заказчик", КодЯзыка));
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// ШАПКА - ГРУЗООТПРАВИТЕЛЬ
	
	Если ЗначениеЗаполнено(ДанныеПечати.Грузоотправитель) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("Грузоотправитель");
		УстановитьПараметр(ОбластьМакета, "ПредставлениеГрузоотправителя", ОписаниеОрганизации(ДанныеПечати, "Грузоотправитель", КодЯзыка));
		ТабличныйДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	// ШАПКА - ГРУЗОПОЛУЧАТЕЛЬ
	
	Если ЗначениеЗаполнено(ДанныеПечати.Грузополучатель) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("Грузополучатель");
		УстановитьПараметр(ОбластьМакета, "ПредставлениеГрузополучателя", ОписаниеОрганизации(ДанныеПечати, "Грузополучатель", КодЯзыка));
		ТабличныйДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	// ШАПКА - АДРЕС ДОСТАВКИ
	
	Если ЗначениеЗаполнено(ДанныеПечати.АдресДоставки) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("АдресДоставки");
		УстановитьПараметр(ОбластьМакета, "АдресДоставки", ДанныеПечати.АдресДоставки);
		ТабличныйДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
#КонецОбласти
	
#Область ВыводТаблицыТовары
	
	// ТАБЛИЦА ТОВАРЫ - СТРОКИ
	
	МассивПроверкиВывода = Новый Массив;
	МассивПроверкиВывода.Добавить(ОбластьНомераШапки);
	МассивПроверкиВывода.Добавить(ОбластьНомераПодвала);
	Если ПоказыватьНДС Тогда
		МассивПроверкиВывода.Добавить(ОбластьНомераНДС);
	КонецЕсли;
	МассивПроверкиВывода.Добавить(ОбластьСуммаПрописью);
	
	Сумма			= 0;
	СуммаНДС		= 0;
	ВсегоСкидок		= 0;
	ВсегоБезСкидок	= 0;
	
	НомерСтроки = 0;
	
	ПустыеДанные = НаборыСервер.ПустыеДанные();
	ВыводШапки = 0;
	
	СоответствиеСтавокНДС = Новый Соответствие;
	
	Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
		
		Если НаборыСервер.ИспользоватьОбластьНабор(СтрокаТовары, ИспользоватьНаборы) Тогда
			ОбластьКодовСтроки   = ОбластьКодовСтрокиНабор;
			ОбластьНомераСтроки  = ОбластьНомераСтрокиНабор;
			ОбластьДанныхСтроки  = ОбластьДанныхСтрокиНабор;
			ОбластьТоварСтроки   = ОбластьТоварСтрокиНабор;
		ИначеЕсли НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) Тогда
			ОбластьКодовСтроки   = ОбластьКодовСтрокиКомплектующие;
			ОбластьНомераСтроки  = ОбластьНомераСтрокиКомплектующие;
			ОбластьДанныхСтроки  = ОбластьДанныхСтрокиКомплектующие;
			ОбластьТоварСтроки   = ОбластьТоварСтрокиКомплектующие;
		Иначе
			ОбластьКодовСтроки   = ОбластьКодовСтрокиСтандарт;
			ОбластьНомераСтроки  = ОбластьНомераСтрокиСтандарт;
			ОбластьДанныхСтроки  = ОбластьДанныхСтрокиСтандарт;
			ОбластьТоварСтроки   = ОбластьТоварСтрокиСтандарт;
		КонецЕсли;
		
		Если НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
			УстановитьПараметр(ОбластьНомераСтроки, "НомерСтроки", Неопределено);
		Иначе
			НомерСтроки = НомерСтроки + 1;
			УстановитьПараметр(ОбластьНомераСтроки, "НомерСтроки", НомерСтроки);
		КонецЕсли;
		
		Если НомерСтроки = 0 И ВыводШапки <> 2 Тогда
			ВыводШапки = 1;
		КонецЕсли;
		
		МассивПроверкиВывода.Добавить(ОбластьНомераСтроки);
		
		Если ТабличныйДокумент.ПроверитьВывод(МассивПроверкиВывода) Тогда
			
			Если (НомерСтроки = 1 И ВыводШапки = 0) ИЛИ (НомерСтроки = 0 И ВыводШапки = 1) Тогда
				
				ВыводШапки = 2;
				
				ВывестиШапку(ТабличныйДокумент, ОбластьНомераШапки, ОбластьКодовШапки, ОбластьТоварШапки, ОбластьДанныхШапки, ВыводитьКоды);
				МассивПроверкиВывода.Удалить(0);
				
			КонецЕсли;
			
		Иначе
			
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ВывестиШапку(ТабличныйДокумент, ОбластьНомераШапки, ОбластьКодовШапки, ОбластьТоварШапки, ОбластьДанныхШапки, ВыводитьКоды);
			
		КонецЕсли;
		
		МассивПроверкиВывода.Удалить(МассивПроверкиВывода.ВГраница());
		
		УстановитьПараметр(ОбластьНомераСтроки, "НомерСтроки", НомерСтроки);
		ТабличныйДокумент.Вывести(ОбластьНомераСтроки);
		
		Если ВыводитьКоды Тогда
			
			ИмяКолонки = ИмяКолонкиКодов;
			Если ДанныеПечати.Тип = "ЗаказПоставщикуПоДаннымПоставщика" Тогда
				Если ИмяКолонки = "Код" Тогда
					ИмяКолонки = "КодИсполнителя";
				ИначеЕсли ИмяКолонки = "Артикул" Тогда
					ИмяКолонки = "АртикулИсполнителя";
				Иначе
					ИмяКолонки = "Исполнителя"
				КонецЕсли;
			КонецЕсли;
			
			УстановитьПараметр(ОбластьКодовСтроки, "Артикул", СтрокаТовары[ИмяКолонки]);
			ТабличныйДокумент.Присоединить(ОбластьКодовСтроки);
			
		КонецЕсли;
		
		Если ДанныеПечати.Тип = "ЗаказПоставщикуПоДаннымПоставщика" Тогда
			
			ПредставлениеНоменклатурыДляПечати = СтрокаТовары.НаименованиеНоменклатурыИсполнителя;
			
		Иначе
			ДополнительныеПараметрыПолученияНаименованияДляПечати = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
			ДополнительныеПараметрыПолученияНаименованияДляПечати.ВозвратнаяТара = СтрокаТовары.ЭтоВозвратнаяТара;				
			ДополнительныеПараметрыПолученияНаименованияДляПечати.Содержание = СтрокаТовары.Содержание;				
			ДополнительныеПараметрыПолученияНаименованияДляПечати.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
			
			ПредставлениеНоменклатурыДляПечати = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
			СтрокаТовары.НаименованиеПолное,
			СтрокаТовары.Характеристика,
			,
			,
			ДополнительныеПараметрыПолученияНаименованияДляПечати);
			
		КонецЕсли;
		
		ПрефиксИПостфикс = НаборыСервер.ПолучитьПрефиксИПостфикс(СтрокаТовары, ИспользоватьНаборы);
		УстановитьПараметр(ОбластьТоварСтроки, "Товар", ПрефиксИПостфикс.Префикс + ПредставлениеНоменклатурыДляПечати + ПрефиксИПостфикс.Постфикс);
		
		Если ВыводитьВидЦены Тогда
			УстановитьПараметр(ОбластьТоварСтроки, "ВидЦеныИсполнителя", СтрокаТовары.ВидЦеныИсполнителя);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьТоварСтроки);
		ОбластьДанныхСтроки.Параметры.Заполнить(СтрокаТовары);
		
		Если ЕстьСкидки Тогда
			УстановитьПараметр(ОбластьДанныхСтроки, "СуммаБезСкидки", СтрокаТовары.СуммаБезСкидки);
			УстановитьПараметр(ОбластьДанныхСтроки, "СуммаСкидки", ?(СкидкиНастройка.ЕстьНаценка И НЕ СкидкиНастройка.ЕстьСкидка, - СтрокаТовары.СуммаСкидки, СтрокаТовары.СуммаСкидки));
		КонецЕсли;
		
		Если НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
			ОбластьДанныхСтроки.Параметры.Заполнить(ПустыеДанные);
		Иначе
			ОбластьДанныхСтроки.Параметры.Заполнить(СтрокаТовары);
		КонецЕсли;
		
		Если ДанныеПечати.ОперацияОблагаетсяНДСУПокупателя Тогда
			УстановитьПараметр(ОбластьДанныхСтроки, "СтавкаНДС", Макет.Области.ТекстНДСИсчисляетсяНалоговымШаблон.Текст);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьДанныхСтроки);
		
		Если Не НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) Тогда
			Сумма    = Сумма    + СтрокаТовары.Сумма;
			СуммаНДС = СуммаНДС + СтрокаТовары.СуммаНДС;
			
			Если ЕстьСкидки Тогда
				ВсегоСкидок    = ВсегоСкидок    + СтрокаТовары.СуммаСкидки;
				ВсегоБезСкидок = ВсегоБезСкидок + СтрокаТовары.СуммаБезСкидки;
			КонецЕсли;
			
			Если ДанныеПечати.УчитыватьНДС Тогда
				
				СуммаНДСПоСтавке = СоответствиеСтавокНДС[СтрокаТовары.СтавкаНДС];
				
				Если СуммаНДСПоСтавке = Неопределено Тогда
					СуммаНДСПоСтавке = 0;
				КонецЕсли;
				
				Если ДанныеПечати.ОперацияОблагаетсяНДСУПокупателя Тогда
					СоответствиеСтавокНДС.Вставить(ПредопределенноеЗначение("Справочник.СтавкиНДС.БезНДС"), СуммаНДСПоСтавке + СтрокаТовары.СуммаНДС);
				Иначе
					СоответствиеСтавокНДС.Вставить(СтрокаТовары.СтавкаНДС, СуммаНДСПоСтавке + СтрокаТовары.СуммаНДС);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// ТАБЛИЦА ТОВАРЫ - ПОДВАЛ
	
	ТабличныйДокумент.Вывести(ОбластьНомераПодвала);
	
	Если ВыводитьКоды Тогда
		ТабличныйДокумент.Присоединить(ОбластьКодовПодвала);
	КонецЕсли;
	
	ТабличныйДокумент.Присоединить(ОбластьТоварПодвала);
	
	Если ЕстьСкидки Тогда
		УстановитьПараметр(ОбластьДанныхПодвала, "ВсегоСкидок", ?(СкидкиНастройка.ЕстьНаценка И НЕ СкидкиНастройка.ЕстьСкидка, -ВсегоСкидок, ВсегоСкидок));
		УстановитьПараметр(ОбластьДанныхПодвала, "ВсегоБезСкидок", ВсегоБезСкидок);
	КонецЕсли;
	
	УстановитьПараметр(ОбластьДанныхПодвала, "Всего", ФормированиеПечатныхФорм.ФорматСумм(Сумма,,,,КодЯзыка));
	ТабличныйДокумент.Присоединить(ОбластьДанныхПодвала);
	
	// ТАБЛИЦА ТОВАРЫ - ИТОГО НДС
	Если НЕ ДанныеПечати.Тип = "ЗаказПереработчикуНаУслуги" Тогда
		
		Если Не ДанныеПечати.УчитыватьНДС Или ДанныеПечати.ОперацияОблагаетсяНДСУПокупателя Тогда
			
			ТабличныйДокумент.Вывести(ОбластьНомераНДС);
			
			Если ВыводитьКоды Тогда
				ТабличныйДокумент.Присоединить(ОбластьКодовНДС);
			КонецЕсли;
			
			Если ДанныеПечати.ОперацияОблагаетсяНДСУПокупателя Тогда
				
				ОбластьДанныхНДС = ОбластьДанныеНДСИсчисляетсяНалоговымАгентом;
				
			Иначе
				
				ОбластьДанныхНДС = ОбластьДанныеБезНДС;
				
			КонецЕсли;
			УстановитьПараметр(ОбластьДанныхНДС, "ВсегоНДС", "-");
			
			ТабличныйДокумент.Присоединить(ОбластьДанныхНДС);
			
		Иначе
			
			Для Каждого ТекСтавкаНДС Из СоответствиеСтавокНДС Цикл
				
				ТабличныйДокумент.Вывести(ОбластьНомераНДС);
				
				Если ВыводитьКоды Тогда
					
					ТабличныйДокумент.Присоединить(ОбластьКодовНДС);
					
				КонецЕсли;
				
				ОбластьДанныхНДС = ?(ДанныеПечати.ЦенаВключаетНДС, ОбластьДанныеВТЧНДС, ОбластьДанныеНДС);
				
				УстановитьПараметр(ОбластьДанныхНДС, "ИмяСтавкиНДС", ТекСтавкаНДС.Ключ);
				УстановитьПараметр(ОбластьДанныхНДС, "ВсегоНДС", ФормированиеПечатныхФорм.ФорматСумм(ТекСтавкаНДС.Значение, , "-",,КодЯзыка));
				ТабличныйДокумент.Присоединить(ОбластьДанныхНДС);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
#КонецОбласти
	
#Область ВыводПодвала
	
	// ПОДВАЛ - СУММА ПРОПИСЬЮ
	
	СуммаКПрописи = Сумма + ?(ДанныеПечати.ЦенаВключаетНДС, 0, СуммаНДС);
	
	УстановитьПараметр(ОбластьСуммаПрописью, "КоличествоСтрок", НомерСтроки);
	УстановитьПараметр(ОбластьСуммаПрописью, "СуммаИтого", ФормированиеПечатныхФорм.ФорматСумм(СуммаКПрописи, ДанныеПечати.Валюта, КодЯзыка));
	УстановитьПараметр(ОбластьСуммаПрописью, "СуммаПрописью", РаботаСКурсамиВалютУТ.СформироватьСуммуПрописью(
	СуммаКПрописи, ДанныеПечати.Валюта,, КодЯзыка));
	
	ТабличныйДокумент.Вывести(ОбластьСуммаПрописью);
	
	// ПОДВАЛ - ЭТАПЫ ГРАФИКА ОПЛАТЫ
	
	Если ТаблицаЭтапыОплаты.Количество() > 1 Тогда
		
		ОбластьШапкиТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицыЭтапыОплаты");
		ОбластьПодвалаТаблицы = Макет.ПолучитьОбласть("ИтогоЭтапыОплаты");
		
		МассивПроверкиВывода.Очистить();
		МассивПроверкиВывода.Добавить(ОбластьШапкиТаблицы);
		МассивПроверкиВывода.Добавить(ОбластьПодвалаТаблицы);
		
		ОбластьСтрокиТаблицыАвансДоОбеспечения = Макет.ПолучитьОбласть("СтрокаТаблицыЭтапыОплатыАвансДоОбеспечения");
		ОбластьСтрокиТаблицыПредоплатаДоОтгрузки = Макет.ПолучитьОбласть("СтрокаТаблицыЭтапыОплатыПредоплатаДоОтгрузки");
		ОбластьСтрокиТаблицыКредитПослеОтгрузки = Макет.ПолучитьОбласть("СтрокаТаблицыЭтапыОплатыКредитПослеОтгрузки");
		ОбластьСтрокиТаблицыКредитСдвиг = Макет.ПолучитьОбласть("СтрокаТаблицыЭтапыОплатыКредитСдвиг");
		ОбластьСтрокиТаблицыНеНайденВариант = Макет.ПолучитьОбласть("СтрокаТаблицыЭтапыОплатыНеНайденВариант");
		
		ОбластьСтрокиТаблицыАвансДоОбеспеченияТара = Макет.ПолучитьОбласть("СтрокаТаблицыЭтапыОплатыАвансДоОбеспеченияТара");
		ОбластьСтрокиТаблицыПредоплатаДоОтгрузкиТара = Макет.ПолучитьОбласть("СтрокаТаблицыЭтапыОплатыПредоплатаДоОтгрузкиТара");
		ОбластьСтрокиТаблицыКредитПослеОтгрузкиТара = Макет.ПолучитьОбласть("СтрокаТаблицыЭтапыОплатыКредитПослеОтгрузкиТара");
		ОбластьСтрокиТаблицыКредитСдвигТара = Макет.ПолучитьОбласть("СтрокаТаблицыЭтапыОплатыКредитСдвигТара");
		ОбластьСтрокиТаблицыНеНайденВариантТара = Макет.ПолучитьОбласть("СтрокаТаблицыЭтапыОплатыНеНайденВариантТара");
		
		НомерЭтапа = 1;
		ТекстНДСШаблон = Макет.Области.ТекстНДСШаблон.Текст;
		ТекстНДСВТЧШаблон = Макет.Области.ТекстНДСВТЧШаблон.Текст;
		ТекстНДСБезНалогаШаблон = Макет.Области.ТекстНДСБезНалогаШаблон.Текст;
		Для Каждого ТекЭтап Из ТаблицаЭтапыОплаты Цикл
			
			ПараметрыСтроки = НовыеПараметрыСтрокиЭтапа();
			ЗаполнитьЗначенияСвойств(ПараметрыСтроки, ТекЭтап);
			ПараметрыСтроки.НомерСтроки = НомерЭтапа;
			
			Если Не ПараметрыСтроки.ЭтоЗалогЗаТару Тогда
				
				ТекстНДС = "";
				
				Если СоответствиеСтавокНДС.Количество() > 0 Тогда
					
					Для Каждого ТекСтавкаНДС Из СоответствиеСтавокНДС Цикл
						
						Если ТекСтавкаНДС.Значение <> 0 Тогда
							
							ТекстНДС = ТекстНДС + ?(ПустаяСтрока(ТекстНДС), ТекстНДСВТЧШаблон, ", " + ТекстНДСШаблон);
							ТекстНДС = СтрЗаменить(ТекстНДС, "[ИмяСтавкиНДС]", ТекСтавкаНДС.Ключ);
							ТекстНДС = СтрЗаменить(ТекстНДС, "[СуммаНДС]",  Формат(ТекСтавкаНДС.Значение / 100 * ТекЭтап.ПроцентПлатежа, "ЧДЦ=2"));
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ТекстНДС) Тогда
					ПараметрыСтроки.ТекстНДС = ТекстНДС;
				Иначе
					ПараметрыСтроки.ТекстНДС = ТекстНДСБезНалогаШаблон;
				КонецЕсли;
				
				Если ПараметрыСтроки.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыКонтроляОплатыКлиентом.АвансДоОбеспечения") Тогда
					
					ОбластьСтрокиТаблицы = ОбластьСтрокиТаблицыАвансДоОбеспечения;
					
				ИначеЕсли ПараметрыСтроки.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыКонтроляОплатыКлиентом.ПредоплатаДоОтгрузки") Тогда
					
					ОбластьСтрокиТаблицы = ОбластьСтрокиТаблицыПредоплатаДоОтгрузки;
					
				ИначеЕсли ПараметрыСтроки.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыКонтроляОплатыКлиентом.КредитПослеОтгрузки") Тогда
					
					ОбластьСтрокиТаблицы = ОбластьСтрокиТаблицыКредитПослеОтгрузки;
					
				ИначеЕсли ПараметрыСтроки.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыКонтроляОплатыКлиентом.КредитСдвиг") Тогда
					
					ОбластьСтрокиТаблицы = ОбластьСтрокиТаблицыКредитСдвиг;
					
				Иначе
					
					ОбластьСтрокиТаблицы = ОбластьСтрокиТаблицыНеНайденВариант;
					
				КонецЕсли;
				
			Иначе
				
				Если ПараметрыСтроки.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыКонтроляОплатыКлиентом.АвансДоОбеспечения") Тогда
					
					ОбластьСтрокиТаблицы = ОбластьСтрокиТаблицыАвансДоОбеспеченияТара;
					
				ИначеЕсли ПараметрыСтроки.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыКонтроляОплатыКлиентом.ПредоплатаДоОтгрузки") Тогда
					
					ОбластьСтрокиТаблицы = ОбластьСтрокиТаблицыПредоплатаДоОтгрузкиТара;
					
				ИначеЕсли ПараметрыСтроки.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыКонтроляОплатыКлиентом.КредитПослеОтгрузки") Тогда
					
					ОбластьСтрокиТаблицы = ОбластьСтрокиТаблицыКредитПослеОтгрузкиТара;
					
				ИначеЕсли ПараметрыСтроки.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыКонтроляОплатыКлиентом.КредитСдвиг") Тогда
					
					ОбластьСтрокиТаблицы = ОбластьСтрокиТаблицыКредитСдвигТара;
					
				Иначе
					
					ОбластьСтрокиТаблицы = ОбластьСтрокиТаблицыНеНайденВариантТара;
					
				КонецЕсли;
				
				ПараметрыСтроки.ПроцентПлатежа = "-";
				ПараметрыСтроки.ТекстНДС = ТекстНДСБезНалогаШаблон;
				
			КонецЕсли;
			
			ОбластьСтрокиТаблицы.Параметры.Заполнить(ПараметрыСтроки);
			
			МассивПроверкиВывода.Добавить(ОбластьСтрокиТаблицы);
			
			Если ТабличныйДокумент.ПроверитьВывод(МассивПроверкиВывода) Тогда
				
				Если НомерЭтапа=1 Тогда
					ТабличныйДокумент.Вывести(ОбластьШапкиТаблицы);
					МассивПроверкиВывода.Удалить(0);
				КонецЕсли;
				
			Иначе
				
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ОбластьШапкиТаблицы);
				
			КонецЕсли;
			
			МассивПроверкиВывода.Удалить(МассивПроверкиВывода.ВГраница());
			
			ТабличныйДокумент.Вывести(ОбластьСтрокиТаблицы);
			
			НомерЭтапа = НомерЭтапа + 1;
			
		КонецЦикла;
		
		ТабличныйДокумент.Вывести(ОбластьПодвалаТаблицы);
		
	КонецЕсли;
	
	// ПОДВАЛ - ДОПОЛНИТЕЛЬНАЯ ИНФОРМАЦИЯ
	
	Если ЗначениеЗаполнено(ДанныеПечати.ДополнительнаяИнформация) Тогда
		
		ОбластьМакета = Макет.ПолучитьОбласть("ДополнительнаяИнформация");
		УстановитьПараметр(ОбластьМакета, "ДополнительнаяИнформация", ДанныеПечати.ДополнительнаяИнформация);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
	КонецЕсли;
	
	// ПОДВАЛ - ПОДПИСИ
	
	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗаказа");
	УстановитьПараметр(ОбластьМакета, "ФИОМенеджер", ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.Менеджер, ДанныеПечати.Дата));
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
#КонецОбласти
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
		ТабличныйДокумент,
		НомерСтрокиНачало,
		ОбъектыПечати,
		ДанныеПечати.Ссылка);
	
КонецПроцедуры

Функция НазванияОбластейСтрок(СкидкиНастройка, ВыводитьВидЦены, ПоказыватьНДС)

	СтруктураВозврата = Новый Структура(
		"ШапкаТаблицы, СтрокаТаблицы, СтрокаТаблицыНабор, СтрокаТаблицыКомплектующие, ПодвалТаблицы");
	
	Если СкидкиНастройка.ЕстьСкидки И ВыводитьВидЦены Тогда
		
		Если СкидкиНастройка.ЕстьСкидка
			И СкидкиНастройка.ЕстьНаценка Тогда
			
			СтруктураВозврата.ШапкаТаблицы = "ШапкаТаблицыСУсловиемСоСкидкойСкидкаНаценка";
			
		ИначеЕсли СкидкиНастройка.ЕстьСкидка Тогда
			
			СтруктураВозврата.ШапкаТаблицы = "ШапкаТаблицыСУсловиемСоСкидкойСкидка";
			
		ИначеЕсли СкидкиНастройка.ЕстьНаценка Тогда
			
			СтруктураВозврата.ШапкаТаблицы = "ШапкаТаблицыСУсловиемСоСкидкойНаценка";
			
		КонецЕсли;
		
		СтруктураВозврата.СтрокаТаблицы = "СтрокаТаблицыСУсловиемСоСкидкой";
		СтруктураВозврата.СтрокаТаблицыНабор = "СтрокаТаблицыСУсловиемСоСкидкойНабор";
		СтруктураВозврата.СтрокаТаблицыКомплектующие = "СтрокаТаблицыСУсловиемСоСкидкойКомплектующие";
		СтруктураВозврата.ПодвалТаблицы = "ПодвалТаблицыСУсловиемСоСкидкой";
		
	ИначеЕсли СкидкиНастройка.ЕстьСкидки И ПоказыватьНДС Тогда
		
		Если СкидкиНастройка.ЕстьСкидка
			И СкидкиНастройка.ЕстьНаценка Тогда
			
			СтруктураВозврата.ШапкаТаблицы = "ШапкаТаблицыСНДССоСкидкойСкидкаНаценка";
			
		ИначеЕсли СкидкиНастройка.ЕстьСкидка Тогда
			
			СтруктураВозврата.ШапкаТаблицы = "ШапкаТаблицыСНДССоСкидкойСкидка";
			
		ИначеЕсли СкидкиНастройка.ЕстьНаценка Тогда
			
			СтруктураВозврата.ШапкаТаблицы = "ШапкаТаблицыСНДССоСкидкойНаценка";
			
		КонецЕсли;
		
		СтруктураВозврата.СтрокаТаблицы = "СтрокаТаблицыСНДССоСкидкой";
		СтруктураВозврата.СтрокаТаблицыНабор = "СтрокаТаблицыСНДССоСкидкойНабор";
		СтруктураВозврата.СтрокаТаблицыКомплектующие = "СтрокаТаблицыСНДССоСкидкойКомплектующие";
		СтруктураВозврата.ПодвалТаблицы = "ПодвалТаблицыСНДССоСкидкой";
		
	ИначеЕсли ПоказыватьНДС Тогда
		
		СтруктураВозврата.ШапкаТаблицы = "ШапкаТаблицыСНДС";
		СтруктураВозврата.СтрокаТаблицы = "СтрокаТаблицыСНДС";
		СтруктураВозврата.СтрокаТаблицыНабор = "СтрокаТаблицыСНДСНабор";
		СтруктураВозврата.СтрокаТаблицыКомплектующие = "СтрокаТаблицыСНДСКомплектующие";
		СтруктураВозврата.ПодвалТаблицы = "ПодвалТаблицыСНДС";
		
	ИначеЕсли СкидкиНастройка.ЕстьСкидки Тогда
		
		Если СкидкиНастройка.ЕстьСкидка
			И СкидкиНастройка.ЕстьНаценка Тогда
			
			СтруктураВозврата.ШапкаТаблицы = "ШапкаТаблицыСоСкидкойСкидкаНаценка";
			
		ИначеЕсли СкидкиНастройка.ЕстьСкидка Тогда
			
			СтруктураВозврата.ШапкаТаблицы = "ШапкаТаблицыСоСкидкойСкидка";
			
		ИначеЕсли СкидкиНастройка.ЕстьНаценка Тогда
			
			СтруктураВозврата.ШапкаТаблицы = "ШапкаТаблицыСоСкидкойНаценка";
			
		КонецЕсли;
		
		СтруктураВозврата.СтрокаТаблицы = "СтрокаТаблицыСоСкидкой";
		СтруктураВозврата.СтрокаТаблицыНабор = "СтрокаТаблицыСоСкидкойНабор";
		СтруктураВозврата.СтрокаТаблицыКомплектующие = "СтрокаТаблицыСоСкидкойКомплектующие";
		СтруктураВозврата.ПодвалТаблицы = "ПодвалТаблицыСоСкидкой";
		
	ИначеЕсли ВыводитьВидЦены Тогда
		
		СтруктураВозврата.ШапкаТаблицы = "ШапкаТаблицыСУсловием";
		СтруктураВозврата.СтрокаТаблицы = "СтрокаТаблицыСУсловием";
		СтруктураВозврата.СтрокаТаблицыНабор = "СтрокаТаблицыСУсловиемНабор";
		СтруктураВозврата.СтрокаТаблицыКомплектующие = "СтрокаТаблицыСУсловиемКомплектующие";
		СтруктураВозврата.ПодвалТаблицы = "ПодвалТаблицыСУсловием";
		
	Иначе
		
		СтруктураВозврата.ШапкаТаблицы = "ШапкаТаблицы";
		СтруктураВозврата.СтрокаТаблицы = "СтрокаТаблицы";
		СтруктураВозврата.СтрокаТаблицыНабор = "СтрокаТаблицыНабор";
		СтруктураВозврата.СтрокаТаблицыКомплектующие = "СтрокаТаблицыКомплектующие";
		СтруктураВозврата.ПодвалТаблицы = "ПодвалТаблицы";
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция НазванияОбластейКолонок(ДвойнойДопПараметр, ЕстьДопПараметр)
	
	СтруктураВозврата = Новый Структура("Товар, Данные");
	
	Если ДвойнойДопПараметр Тогда
		СтруктураВозврата.Товар = "ТоварСДвумяПараметрами";
		СтруктураВозврата.Данные = "ДанныеСДвумяПараметрами";
	ИначеЕсли ЕстьДопПараметр Тогда
		СтруктураВозврата.Товар = "ТоварСОднимПараметром";
		СтруктураВозврата.Данные = "ДанныеСОднимПараметром";
	Иначе
		СтруктураВозврата.Товар = "Товар";
		СтруктураВозврата.Данные = "Данные";
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ОписаниеОрганизации(ДанныеПечати, ИмяОрганизации, КодЯзыка = Неопределено)
	
	Сведения = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати[ИмяОрганизации], ДанныеПечати.Дата);
	
	Если НЕ ЗначениеЗаполнено(КодЯзыка)
		ИЛИ КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка() Тогда
		
		ИмяРеквизитаНаименование = "ПолноеНаименование";
		ИмяРеквизитаАдрес = "ЮридическийАдрес";
		
	Иначе
		
		ИмяРеквизитаНаименование = ?(ЗначениеЗаполнено(Сведения.НаименованиеМеждународное), "НаименованиеМеждународное", "ПолноеНаименование");
		ИмяРеквизитаАдрес = ?(ЗначениеЗаполнено(Сведения.МеждународныйАдрес), "МеждународныйАдрес", "ЮридическийАдрес");
		
	КонецЕсли;
	
	СтрокаРеквизиты = СтрШаблон("%1,ИНН,КПП,%2,Телефоны,", ИмяРеквизитаНаименование, ИмяРеквизитаАдрес);
	
	Возврат ФормированиеПечатныхФорм.ОписаниеОрганизации(Сведения, СтрокаРеквизиты);
	
КонецФункции

// Устаревшая процедура, оставлена для совместимости с макетами, отредактированными вручную до обновления на макеты с переводами
//
Процедура ЗаполнитьТабличныйДокументЗаказаНаТоварыУслугиДо_2_5_10(ТабличныйДокумент, ПараметрыЗаполненияПФ, ОбъектыПечати, ПервыйДокумент, КодЯзыка)
	
	ШаблонОшибкиТовары = ПараметрыЗаполненияПФ.ШаблонОшибкиТовары;
	Макет = ПараметрыЗаполненияПФ.Макет;
	ИмяКолонкиКодов = ПараметрыЗаполненияПФ.ИмяКолонкиКодов;
	ВыводитьКоды = ПараметрыЗаполненияПФ.ВыводитьКоды;
	ДанныеПечати = ПараметрыЗаполненияПФ.ДанныеПечати;
	ЭтапыОплаты = ПараметрыЗаполненияПФ.ЭтапыОплаты;
	Товары = ПараметрыЗаполненияПФ.Товары;
	ПредставлениеКолонкиКодов = ПараметрыЗаполненияПФ.ПредставлениеКолонкиКодов;
	
	СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
	
	ТаблицаТовары = Товары.НайтиСтроки(СтруктураПоиска);
	
	Если ТаблицаТовары.Количество() = 0 Тогда
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонОшибкиТовары,
		ДанныеПечати.Ссылка,
		ДанныеПечати.ПредставлениеВОшибке);
		
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ДанныеПечати.Ссылка);
		Возврат;
		
	КонецЕсли;
	
	ТаблицаЭтапыОплаты = ЭтапыОплаты.НайтиСтроки(СтруктураПоиска);
	
	Если ПервыйДокумент Тогда
		ПервыйДокумент = Ложь;
	Иначе
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	
	ВыводитьВидЦены = Ложь;
	Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
		
		Если ЗначениеЗаполнено(СтрокаТовары.ВидЦеныИсполнителя) Тогда
			ВыводитьВидЦены = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаголовокСкидки	= ФормированиеПечатныхФорм.НужноВыводитьСкидки(ТаблицаТовары, ДанныеПечати.ИспользоватьАвтоСкидки);
	ЕстьСкидки		= ЗаголовокСкидки.ЕстьСкидки;
	ПоказыватьНДС	= ДанныеПечати.ПоказыватьНДСВСтроках И ДанныеПечати.УчитыватьНДС;
	
#Область ОпределениеИменЗаголовковОбластей
	
	ЕстьДопПараметр		= ЕстьСкидки Или ВыводитьВидЦены Или ПоказыватьНДС;
	ДвойнойДопПараметр	= (ЕстьСкидки И ВыводитьВидЦены) Или (ЕстьСкидки И ПоказыватьНДС);
	
	Если ДвойнойДопПараметр Тогда
		ПостфиксКолонок = "СДвумяПараметрами";
	ИначеЕсли ЕстьДопПараметр Тогда
		ПостфиксКолонок = "СОднимПараметром";
	Иначе
		ПостфиксКолонок = "";
	КонецЕсли;
	
	ОбластиКолонок = НазванияОбластейКолонок(ДвойнойДопПараметр, ЕстьДопПараметр);
	
	ОбластьКолонкаТовар = Макет.Область(ОбластиКолонок.Товар);
	
	Если Не ВыводитьКоды Тогда
		
		Если ДвойнойДопПараметр Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 1.35;
		ИначеЕсли ЕстьДопПараметр Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 1.2;
		Иначе
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 1.14;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбластиСтрок = НазванияОбластейСтрокДо_2_5_10(ЕстьСкидки, ВыводитьВидЦены, ПоказыватьНДС);
	
#КонецОбласти
	
#Область ОбластиМакета
	
	// ОБЛАСТЕЙ ТАБЛИЦЫ "ТОВАРЫ"
	
	ОбластьНомераШапки		= Макет.ПолучитьОбласть(ОбластиСтрок.ШапкаТаблицы + "|НомерСтроки");
	ОбластьКодовШапки		= Макет.ПолучитьОбласть(ОбластиСтрок.ШапкаТаблицы + "|КолонкаКодов");
	ОбластьТоварШапки		= Макет.ПолучитьОбласть(ОбластиСтрок.ШапкаТаблицы + "|" + ОбластиКолонок.Товар);
	ОбластьДанныхШапки		= Макет.ПолучитьОбласть(ОбластиСтрок.ШапкаТаблицы + "|" + ОбластиКолонок.Данные);
	
	ОбластьНомераСтрокиСтандарт = Макет.ПолучитьОбласть(ОбластиСтрок.СтрокаТаблицы + "|НомерСтроки");
	ОбластьКодовСтрокиСтандарт  = Макет.ПолучитьОбласть(ОбластиСтрок.СтрокаТаблицы + "|КолонкаКодов");
	ОбластьТоварСтрокиСтандарт  = Макет.ПолучитьОбласть(ОбластиСтрок.СтрокаТаблицы + "|" + ОбластиКолонок.Товар);
	ОбластьДанныхСтрокиСтандарт = Макет.ПолучитьОбласть(ОбластиСтрок.СтрокаТаблицы + "|" + ОбластиКолонок.Данные);
	
	ИспользоватьНаборы = Ложь;
	Если Товары.Колонки.Найти("ЭтоНабор") <> Неопределено Тогда
		ИспользоватьНаборы = Истина;
		ОбластьНомераСтрокиНабор         = Макет.ПолучитьОбласть(ОбластиСтрок.СтрокаТаблицы + "|НомерСтроки");
		ОбластьНомераСтрокиКомплектующие = Макет.ПолучитьОбласть(ОбластиСтрок.СтрокаТаблицы + "|НомерСтроки");
		ОбластьКодовСтрокиНабор          = Макет.ПолучитьОбласть(ОбластиСтрок.СтрокаТаблицы + "|КолонкаКодов");
		ОбластьКодовСтрокиКомплектующие  = Макет.ПолучитьОбласть(ОбластиСтрок.СтрокаТаблицы + "|КолонкаКодов");
		ОбластьТоварСтрокиНабор          = Макет.ПолучитьОбласть(ОбластиСтрок.СтрокаТаблицы + "|" + ОбластиКолонок.Товар);
		ОбластьТоварСтрокиКомплектующие  = Макет.ПолучитьОбласть(ОбластиСтрок.СтрокаТаблицы + "|" + ОбластиКолонок.Товар);
		ОбластьДанныхСтрокиНабор         = Макет.ПолучитьОбласть(ОбластиСтрок.СтрокаТаблицы + "|" + ОбластиКолонок.Данные);
		ОбластьДанныхСтрокиКомплектующие = Макет.ПолучитьОбласть(ОбластиСтрок.СтрокаТаблицы + "|" + ОбластиКолонок.Данные);
	КонецЕсли;
	
	ОбластьНомераПодвала	= Макет.ПолучитьОбласть(ОбластиСтрок.ПодвалТаблицы + "|НомерСтроки");
	ОбластьКодовПодвала		= Макет.ПолучитьОбласть(ОбластиСтрок.ПодвалТаблицы + "|КолонкаКодов");
	ОбластьТоварПодвала		= Макет.ПолучитьОбласть(ОбластиСтрок.ПодвалТаблицы + "|" + ОбластиКолонок.Товар);
	ОбластьДанныхПодвала	= Макет.ПолучитьОбласть(ОбластиСтрок.ПодвалТаблицы + "|" + ОбластиКолонок.Данные);
	
	ОбластьНомераНДС		= Макет.ПолучитьОбласть("ПодвалТаблицыНДС|НомерСтроки");
	ОбластьКодовНДС			= Макет.ПолучитьОбласть("ПодвалТаблицыНДС|КолонкаКодов");
	ОбластьТоварНДС			= Макет.ПолучитьОбласть("ПодвалТаблицыНДС|" + ОбластиКолонок.Товар);
	ОбластьДанныхНДС		= Макет.ПолучитьОбласть("ПодвалТаблицыНДС|" + ОбластиКолонок.Данные);
	
	ОбластьСуммаПрописью = Макет.ПолучитьОбласть("СуммаПрописью");
	
#КонецОбласти
	
#Область ВыводШапки
	
	// ШАПКА - ЗАГОЛОВОК
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ФормированиеПечатныхФорм.ВывестиЛоготипВТабличныйДокумент(Макет, ОбластьМакета, "ЗаголовокЛоготип", ДанныеПечати.Организация);
	
	УстановитьПараметр(ОбластьМакета, "ТекстЗаголовка", ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(
	ДанныеПечати,
	ДанныеПечати.ПредставлениеДокумента));
	
	ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(
	ТабличныйДокумент,
	Макет,
	ОбластьМакета,
	ДанныеПечати.Ссылка);
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// ШАПКА - ИСПОЛНИТЕЛЬ
	
	ОбластьМакета = Макет.ПолучитьОбласть("Исполнитель");
	УстановитьПараметр(ОбластьМакета, "ПредставлениеИсполнителя", ОписаниеОрганизацииДо_2_5_10(ДанныеПечати, "Исполнитель"));
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// ШАПКА - ЗАКАЗЧИК
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заказчик");
	УстановитьПараметр(ОбластьМакета, "ПредставлениеЗаказчика", ОписаниеОрганизацииДо_2_5_10(ДанныеПечати, "Заказчик"));
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// ШАПКА - ГРУЗООТПРАВИТЕЛЬ
	
	Если ЗначениеЗаполнено(ДанныеПечати.Грузоотправитель) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("Грузоотправитель");
		УстановитьПараметр(ОбластьМакета, "ПредставлениеГрузоотправителя", ОписаниеОрганизацииДо_2_5_10(ДанныеПечати, "Грузоотправитель"));
		ТабличныйДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	// ШАПКА - ГРУЗОПОЛУЧАТЕЛЬ
	
	Если ЗначениеЗаполнено(ДанныеПечати.Грузополучатель) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("Грузополучатель");
		УстановитьПараметр(ОбластьМакета, "ПредставлениеГрузополучателя", ОписаниеОрганизацииДо_2_5_10(ДанныеПечати, "Грузополучатель"));
		ТабличныйДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	// ШАПКА - АДРЕС ДОСТАВКИ
	
	Если ЗначениеЗаполнено(ДанныеПечати.АдресДоставки) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("АдресДоставки");
		УстановитьПараметр(ОбластьМакета, "АдресДоставки", ДанныеПечати.АдресДоставки);
		ТабличныйДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
#КонецОбласти
	
#Область ВыводТаблицыТовары
	
	// ТАБЛИЦА ТОВАРЫ - ШАПКА
	
	Если ЕстьСкидки Тогда
		УстановитьПараметр(ОбластьДанныхШапки, "Скидка", ЗаголовокСкидки.Скидка);
		УстановитьПараметр(ОбластьДанныхШапки, "СуммаБезСкидки", ЗаголовокСкидки.СуммаСкидки);
	КонецЕсли; 
	
	Если ВыводитьКоды Тогда
		УстановитьПараметр(ОбластьКодовШапки, "ИмяКолонкиКодов", ПредставлениеКолонкиКодов);
	КонецЕсли;
	
	// ТАБЛИЦА ТОВАРЫ - СТРОКИ
	
	МассивПроверкиВывода = Новый Массив;
	МассивПроверкиВывода.Добавить(ОбластьНомераШапки);
	МассивПроверкиВывода.Добавить(ОбластьНомераПодвала);
	Если ПоказыватьНДС Тогда
		МассивПроверкиВывода.Добавить(ОбластьНомераНДС);
	КонецЕсли;
	МассивПроверкиВывода.Добавить(ОбластьСуммаПрописью);
	
	Сумма			= 0;
	СуммаНДС		= 0;
	ВсегоСкидок		= 0;
	ВсегоБезСкидок	= 0;
	
	НомерСтроки = 0;
	
	ПустыеДанные = НаборыСервер.ПустыеДанные();
	ВыводШапки = 0;
	
	СоответствиеСтавокНДС = Новый Соответствие;
	
	Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
		
		Если НаборыСервер.ИспользоватьОбластьНабор(СтрокаТовары, ИспользоватьНаборы) Тогда
			ОбластьКодовСтроки   = ОбластьКодовСтрокиНабор;
			ОбластьНомераСтроки  = ОбластьНомераСтрокиНабор;
			ОбластьДанныхСтроки  = ОбластьДанныхСтрокиНабор;
			ОбластьТоварСтроки   = ОбластьТоварСтрокиНабор;
		ИначеЕсли НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) Тогда
			ОбластьКодовСтроки   = ОбластьКодовСтрокиКомплектующие;
			ОбластьНомераСтроки  = ОбластьНомераСтрокиКомплектующие;
			ОбластьДанныхСтроки  = ОбластьДанныхСтрокиКомплектующие;
			ОбластьТоварСтроки   = ОбластьТоварСтрокиКомплектующие;
		Иначе
			ОбластьКодовСтроки   = ОбластьКодовСтрокиСтандарт;
			ОбластьНомераСтроки  = ОбластьНомераСтрокиСтандарт;
			ОбластьДанныхСтроки  = ОбластьДанныхСтрокиСтандарт;
			ОбластьТоварСтроки   = ОбластьТоварСтрокиСтандарт;
		КонецЕсли;
		
		Если НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
			УстановитьПараметр(ОбластьНомераСтроки, "НомерСтроки", Неопределено);
		Иначе
			НомерСтроки = НомерСтроки + 1;
			УстановитьПараметр(ОбластьНомераСтроки, "НомерСтроки", НомерСтроки);
		КонецЕсли;
		
		Если НомерСтроки = 0 И ВыводШапки <> 2 Тогда
			ВыводШапки = 1;
		КонецЕсли;
		
		МассивПроверкиВывода.Добавить(ОбластьНомераСтроки);
		
		Если ТабличныйДокумент.ПроверитьВывод(МассивПроверкиВывода) Тогда
			
			Если (НомерСтроки = 1 И ВыводШапки = 0) ИЛИ (НомерСтроки = 0 И ВыводШапки = 1) Тогда
				
				ВыводШапки = 2;
				
				ВывестиШапку(ТабличныйДокумент, ОбластьНомераШапки, ОбластьКодовШапки, ОбластьТоварШапки, ОбластьДанныхШапки, ВыводитьКоды);
				МассивПроверкиВывода.Удалить(0);
				
			КонецЕсли;
			
		Иначе
			
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ВывестиШапку(ТабличныйДокумент, ОбластьНомераШапки, ОбластьКодовШапки, ОбластьТоварШапки, ОбластьДанныхШапки, ВыводитьКоды);
			
		КонецЕсли;
		
		МассивПроверкиВывода.Удалить(МассивПроверкиВывода.ВГраница());
		
		УстановитьПараметр(ОбластьНомераСтроки, "НомерСтроки", НомерСтроки);
		ТабличныйДокумент.Вывести(ОбластьНомераСтроки);
		
		Если ВыводитьКоды Тогда
			
			ИмяКолонки = ИмяКолонкиКодов;
			Если ДанныеПечати.Тип = "ЗаказПоставщикуПоДаннымПоставщика" Тогда
				Если ИмяКолонки = "Код" Тогда
					ИмяКолонки = "КодИсполнителя";
				ИначеЕсли ИмяКолонки = "Артикул" Тогда
					ИмяКолонки = "АртикулИсполнителя";
				Иначе
					ИмяКолонки = "Исполнителя"
				КонецЕсли;
			КонецЕсли;
			
			УстановитьПараметр(ОбластьКодовСтроки, "Артикул", СтрокаТовары[ИмяКолонки]);
			ТабличныйДокумент.Присоединить(ОбластьКодовСтроки);
			
		КонецЕсли;
		
		Если ДанныеПечати.Тип = "ЗаказПоставщикуПоДаннымПоставщика" Тогда
			
			ПредставлениеНоменклатурыДляПечати = СтрокаТовары.НаименованиеНоменклатурыИсполнителя;
			
		Иначе
			ДополнительныеПараметрыПолученияНаименованияДляПечати = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
			ДополнительныеПараметрыПолученияНаименованияДляПечати.ВозвратнаяТара = СтрокаТовары.ЭтоВозвратнаяТара;				
			ДополнительныеПараметрыПолученияНаименованияДляПечати.Содержание = СтрокаТовары.Содержание;				
			ДополнительныеПараметрыПолученияНаименованияДляПечати.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
			
			ПредставлениеНоменклатурыДляПечати = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
			СтрокаТовары.НаименованиеПолное,
			СтрокаТовары.Характеристика,
			,
			,
			ДополнительныеПараметрыПолученияНаименованияДляПечати);
			
		КонецЕсли;
		
		ПрефиксИПостфикс = НаборыСервер.ПолучитьПрефиксИПостфикс(СтрокаТовары, ИспользоватьНаборы);
		УстановитьПараметр(ОбластьТоварСтроки, "Товар", ПрефиксИПостфикс.Префикс + ПредставлениеНоменклатурыДляПечати + ПрефиксИПостфикс.Постфикс);
		
		Если ВыводитьВидЦены Тогда
			УстановитьПараметр(ОбластьТоварСтроки, "ВидЦеныИсполнителя", СтрокаТовары.ВидЦеныИсполнителя);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьТоварСтроки);
		ОбластьДанныхСтроки.Параметры.Заполнить(СтрокаТовары);
		
		Если ЗаголовокСкидки.ЕстьСкидки Тогда
			УстановитьПараметр(ОбластьДанныхСтроки, "СуммаСкидки", ?(ЗаголовокСкидки.ТолькоНаценка, - СтрокаТовары.СуммаСкидки, СтрокаТовары.СуммаСкидки));
		КонецЕсли;
		
		Если НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
			ОбластьДанныхСтроки.Параметры.Заполнить(ПустыеДанные);
		Иначе
			ОбластьДанныхСтроки.Параметры.Заполнить(СтрокаТовары);
		КонецЕсли;
		
		Если ДанныеПечати.ОперацияОблагаетсяНДСУПокупателя Тогда
			УстановитьПараметр(ОбластьДанныхСтроки, "СтавкаНДС", НСтр("ru='НДС исчисляется налоговым агентом'", ОбщегоНазначения.КодОсновногоЯзыка()));
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьДанныхСтроки);
		
		Если Не НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) Тогда
			Сумма    = Сумма    + СтрокаТовары.Сумма;
			СуммаНДС = СуммаНДС + СтрокаТовары.СуммаНДС;
			
			Если ЕстьСкидки Тогда
				ВсегоСкидок    = ВсегоСкидок    + СтрокаТовары.СуммаСкидки;
				ВсегоБезСкидок = ВсегоБезСкидок + СтрокаТовары.СуммаБезСкидки;
			КонецЕсли;
			
			Если ДанныеПечати.УчитыватьНДС Тогда
				
				СуммаНДСПоСтавке = СоответствиеСтавокНДС[СтрокаТовары.СтавкаНДС];
				
				Если СуммаНДСПоСтавке = Неопределено Тогда
					СуммаНДСПоСтавке = 0;
				КонецЕсли;
				
				Если ДанныеПечати.ОперацияОблагаетсяНДСУПокупателя Тогда
					СоответствиеСтавокНДС.Вставить(ПредопределенноеЗначение("Справочник.СтавкиНДС.БезНДС"), СуммаНДСПоСтавке + СтрокаТовары.СуммаНДС);
				Иначе
					СоответствиеСтавокНДС.Вставить(СтрокаТовары.СтавкаНДС, СуммаНДСПоСтавке + СтрокаТовары.СуммаНДС);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// ТАБЛИЦА ТОВАРЫ - ПОДВАЛ
	
	ТабличныйДокумент.Вывести(ОбластьНомераПодвала);
	
	Если ВыводитьКоды Тогда
		ТабличныйДокумент.Присоединить(ОбластьКодовПодвала);
	КонецЕсли;
	
	ТабличныйДокумент.Присоединить(ОбластьТоварПодвала);
	
	Если ЕстьСкидки Тогда
		УстановитьПараметр(ОбластьДанныхПодвала, "ВсегоСкидок", ?(ЗаголовокСкидки.ТолькоНаценка, -ВсегоСкидок, ВсегоСкидок));
		УстановитьПараметр(ОбластьДанныхПодвала, "ВсегоБезСкидок", ВсегоБезСкидок);
	КонецЕсли;
	
	УстановитьПараметр(ОбластьДанныхПодвала, "Всего", ФормированиеПечатныхФорм.ФорматСумм(Сумма));
	ТабличныйДокумент.Присоединить(ОбластьДанныхПодвала);
	
	// ТАБЛИЦА ТОВАРЫ - ИТОГО НДС
	
	Если Не ДанныеПечати.УчитыватьНДС Или ДанныеПечати.ОперацияОблагаетсяНДСУПокупателя Тогда
		
		ТабличныйДокумент.Вывести(ОбластьНомераНДС);
		
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодовНДС);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьТоварНДС);
		
		Если ДанныеПечати.ОперацияОблагаетсяНДСУПокупателя Тогда
			УстановитьПараметр(ОбластьДанныхНДС, "НДС", НСтр("ru='НДС исчисляется налоговым агентом'", ОбщегоНазначения.КодОсновногоЯзыка()));
		Иначе
			УстановитьПараметр(ОбластьДанныхНДС, "НДС", НСтр("ru='Без налога (НДС)'", ОбщегоНазначения.КодОсновногоЯзыка()));
		КонецЕсли;
		УстановитьПараметр(ОбластьДанныхНДС, "ВсегоНДС", "-");
		
		ТабличныйДокумент.Присоединить(ОбластьДанныхНДС);
		
	Иначе
		
		Для Каждого ТекСтавкаНДС Из СоответствиеСтавокНДС Цикл
			
			ТабличныйДокумент.Вывести(ОбластьНомераНДС);
			
			Если ВыводитьКоды Тогда
				ТабличныйДокумент.Присоединить(ОбластьКодовНДС);
			КонецЕсли;
			
			ТабличныйДокумент.Присоединить(ОбластьТоварНДС);
			
			УстановитьПараметр(ОбластьДанныхНДС, "НДС", ФормированиеПечатныхФорм.ТекстНДСПоСтавке(ТекСтавкаНДС.Ключ, ДанныеПечати.ЦенаВключаетНДС));
			УстановитьПараметр(ОбластьДанныхНДС, "ВсегоНДС", ФормированиеПечатныхФорм.ФорматСумм(ТекСтавкаНДС.Значение, , "-"));
			
			ТабличныйДокумент.Присоединить(ОбластьДанныхНДС);
			
		КонецЦикла;
		
	КонецЕсли;
	
#КонецОбласти
	
#Область ВыводПодвала
	
	// ПОДВАЛ - СУММА ПРОПИСЬЮ
	
	СуммаКПрописи = Сумма + ?(ДанныеПечати.ЦенаВключаетНДС, 0, СуммаНДС);
	
		ТекстИтоговойСтроки = НСтр("ru='Всего наименований %1, на сумму %2'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	ТекстИтоговойСтроки,
	НомерСтроки, // Количество
	ФормированиеПечатныхФорм.ФорматСумм(СуммаКПрописи, ДанныеПечати.Валюта)); // Сумма
	
	УстановитьПараметр(ОбластьСуммаПрописью, "ИтоговаяСтрока", ИтоговаяСтрока);
	УстановитьПараметр(ОбластьСуммаПрописью, "СуммаПрописью", РаботаСКурсамиВалютУТ.СформироватьСуммуПрописью(
	СуммаКПрописи,
	ДанныеПечати.Валюта));
	
	ТабличныйДокумент.Вывести(ОбластьСуммаПрописью);
	
	// ПОДВАЛ - ЭТАПЫ ГРАФИКА ОПЛАТЫ
	
	Если ТаблицаЭтапыОплаты.Количество() > 1 Тогда
		
		ОбластьШапкиТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицыЭтапыОплаты");
		ОбластьПодвалаТаблицы = Макет.ПолучитьОбласть("ИтогоЭтапыОплаты");
		
		МассивПроверкиВывода.Очистить();
		МассивПроверкиВывода.Добавить(ОбластьШапкиТаблицы);
		МассивПроверкиВывода.Добавить(ОбластьПодвалаТаблицы);
		
		ОбластьСтрокиТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицыЭтапыОплаты");
		
		НомерЭтапа = 1;
		Для Каждого ТекЭтап Из ТаблицаЭтапыОплаты Цикл
			
			ПараметрыСтроки = НовыеПараметрыСтрокиЭтапа();
			ЗаполнитьЗначенияСвойств(ПараметрыСтроки, ТекЭтап);
			ПараметрыСтроки.НомерСтроки = НомерЭтапа;
			Если Не ПараметрыСтроки.ЭтоЗалогЗаТару Тогда
				ПараметрыСтроки.ТекстНДС = ФормированиеПечатныхФорм.СформироватьТекстНДСЭтапаОплаты(
				СоответствиеСтавокНДС,
				ТекЭтап.ПроцентПлатежа);
			Иначе
				ПараметрыСтроки.ВариантОплаты = Строка(ТекЭтап.ВариантОплаты) + " " + НСтр("ru='(залог за тару)'", ОбщегоНазначения.КодОсновногоЯзыка());
				ПараметрыСтроки.ПроцентПлатежа = "-";
				ПараметрыСтроки.ТекстНДС = НСтр("ru='Без налога (НДС)'", ОбщегоНазначения.КодОсновногоЯзыка());
			КонецЕсли;
			
			ОбластьСтрокиТаблицы.Параметры.Заполнить(ПараметрыСтроки);
			
			МассивПроверкиВывода.Добавить(ОбластьСтрокиТаблицы);
			
			Если ТабличныйДокумент.ПроверитьВывод(МассивПроверкиВывода) Тогда
				
				Если НомерЭтапа=1 Тогда
					ТабличныйДокумент.Вывести(ОбластьШапкиТаблицы);
					МассивПроверкиВывода.Удалить(0);
				КонецЕсли;
				
			Иначе
				
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ОбластьШапкиТаблицы);
				
			КонецЕсли;
			
			МассивПроверкиВывода.Удалить(МассивПроверкиВывода.ВГраница());
			
			ТабличныйДокумент.Вывести(ОбластьСтрокиТаблицы);
			
			НомерЭтапа = НомерЭтапа + 1;
			
		КонецЦикла;
		
		ТабличныйДокумент.Вывести(ОбластьПодвалаТаблицы);
		
	КонецЕсли;
	
	// ПОДВАЛ - ДОПОЛНИТЕЛЬНАЯ ИНФОРМАЦИЯ
	
	Если ЗначениеЗаполнено(ДанныеПечати.ДополнительнаяИнформация) Тогда
		
		ОбластьМакета = Макет.ПолучитьОбласть("ДополнительнаяИнформация");
		УстановитьПараметр(ОбластьМакета, "ДополнительнаяИнформация", ДанныеПечати.ДополнительнаяИнформация);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
	КонецЕсли;
	
	// ПОДВАЛ - ПОДПИСИ
	
	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗаказа");
	УстановитьПараметр(ОбластьМакета, "ФИОМенеджер", ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.Менеджер, ДанныеПечати.Дата));
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
#КонецОбласти
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
		ТабличныйДокумент,
		НомерСтрокиНачало,
		ОбъектыПечати,
		ДанныеПечати.Ссылка);
	
КонецПроцедуры

// Устаревшая процедура, оставлена для совместимости с макетами, отредактированными вручную до обновления на макеты с переводами
//
Функция НазванияОбластейСтрокДо_2_5_10(ЕстьСкидки, ВыводитьВидЦены, ПоказыватьНДС)
	
	СтруктураВозврата = Новый Структура(
		"ШапкаТаблицы, СтрокаТаблицы, СтрокаТаблицыНабор, СтрокаТаблицыКомплектующие, ПодвалТаблицы");
	Если ЕстьСкидки И ВыводитьВидЦены Тогда
		СтруктураВозврата.ШапкаТаблицы = "ШапкаТаблицыСУсловиемСоСкидкой";
		СтруктураВозврата.СтрокаТаблицы = "СтрокаТаблицыСУсловиемСоСкидкой";
		СтруктураВозврата.СтрокаТаблицыНабор = "СтрокаТаблицыСУсловиемСоСкидкойНабор";
		СтруктураВозврата.СтрокаТаблицыКомплектующие = "СтрокаТаблицыСУсловиемСоСкидкойКомплектующие";
		СтруктураВозврата.ПодвалТаблицы = "ПодвалТаблицыСУсловиемСоСкидкой";
	ИначеЕсли ЕстьСкидки И ПоказыватьНДС Тогда
		СтруктураВозврата.ШапкаТаблицы = "ШапкаТаблицыСНДССоСкидкой";
		СтруктураВозврата.СтрокаТаблицы = "СтрокаТаблицыСНДССоСкидкой";
		СтруктураВозврата.СтрокаТаблицыНабор = "СтрокаТаблицыСНДССоСкидкойНабор";
		СтруктураВозврата.СтрокаТаблицыКомплектующие = "СтрокаТаблицыСНДССоСкидкойКомплектующие";
		СтруктураВозврата.ПодвалТаблицы = "ПодвалТаблицыСНДССоСкидкой";
	ИначеЕсли ПоказыватьНДС Тогда
		СтруктураВозврата.ШапкаТаблицы = "ШапкаТаблицыСНДС";
		СтруктураВозврата.СтрокаТаблицы = "СтрокаТаблицыСНДС";
		СтруктураВозврата.СтрокаТаблицыНабор = "СтрокаТаблицыСНДСНабор";
		СтруктураВозврата.СтрокаТаблицыКомплектующие = "СтрокаТаблицыСНДСКомплектующие";
		СтруктураВозврата.ПодвалТаблицы = "ПодвалТаблицыСНДС";
	ИначеЕсли ЕстьСкидки Тогда
		СтруктураВозврата.ШапкаТаблицы = "ШапкаТаблицыСоСкидкой";
		СтруктураВозврата.СтрокаТаблицы = "СтрокаТаблицыСоСкидкой";
		СтруктураВозврата.СтрокаТаблицыНабор = "СтрокаТаблицыСоСкидкойНабор";
		СтруктураВозврата.СтрокаТаблицыКомплектующие = "СтрокаТаблицыСоСкидкойКомплектующие";
		СтруктураВозврата.ПодвалТаблицы = "ПодвалТаблицыСоСкидкой";
	ИначеЕсли ВыводитьВидЦены Тогда
		СтруктураВозврата.ШапкаТаблицы = "ШапкаТаблицыСУсловием";
		СтруктураВозврата.СтрокаТаблицы = "СтрокаТаблицыСУсловием";
		СтруктураВозврата.СтрокаТаблицыНабор = "СтрокаТаблицыСУсловиемНабор";
		СтруктураВозврата.СтрокаТаблицыКомплектующие = "СтрокаТаблицыСУсловиемКомплектующие";
		СтруктураВозврата.ПодвалТаблицы = "ПодвалТаблицыСУсловием";
	Иначе
		СтруктураВозврата.ШапкаТаблицы = "ШапкаТаблицы";
		СтруктураВозврата.СтрокаТаблицы = "СтрокаТаблицы";
		СтруктураВозврата.СтрокаТаблицыНабор = "СтрокаТаблицыНабор";
		СтруктураВозврата.СтрокаТаблицыКомплектующие = "СтрокаТаблицыКомплектующие";
		СтруктураВозврата.ПодвалТаблицы = "ПодвалТаблицы";
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Устаревшая процедура, оставлена для совместимости с макетами, отредактированными вручную до обновления на макеты с переводами
//
Функция ОписаниеОрганизацииДо_2_5_10(ДанныеПечати, ИмяОрганизации, КодЯзыка = Неопределено)
	
	Сведения = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати[ИмяОрганизации], ДанныеПечати.Дата);
	Реквизиты = "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,";
	
	Возврат ФормированиеПечатныхФорм.ОписаниеОрганизации(Сведения, Реквизиты);
	
КонецФункции

// Прочее

Процедура УстановитьПараметр(ОбластьМакета, ИмяПараметра, ЗначениеПараметра)
	ОбластьМакета.Параметры.Заполнить(Новый Структура(ИмяПараметра, ЗначениеПараметра));
КонецПроцедуры

Процедура ВывестиШапку(ТабличныйДокумент, ОбластьНомераШапки, ОбластьКодовШапки, ОбластьТоварШапки, ОбластьДанныхШапки, ВыводитьКоды)
	
	ТабличныйДокумент.Вывести(ОбластьНомераШапки);
	Если ВыводитьКоды Тогда
		ТабличныйДокумент.Присоединить(ОбластьКодовШапки);
	КонецЕсли;
	ТабличныйДокумент.Присоединить(ОбластьТоварШапки);
	ТабличныйДокумент.Присоединить(ОбластьДанныхШапки);
	
КонецПроцедуры

Функция НовыеПараметрыСтрокиЭтапа()
	
	СтруктураСтрокиЭтапа = Новый Структура;
	СтруктураСтрокиЭтапа.Вставить("НомерСтроки", 0);
	СтруктураСтрокиЭтапа.Вставить("ВариантОплаты", "");
	СтруктураСтрокиЭтапа.Вставить("ДатаПлатежа", '00010101');
	СтруктураСтрокиЭтапа.Вставить("ПроцентПлатежа", 0);
	СтруктураСтрокиЭтапа.Вставить("СуммаПлатежа", 0);
	СтруктураСтрокиЭтапа.Вставить("ТекстНДС", "");
	СтруктураСтрокиЭтапа.Вставить("ЭтоЗалогЗаТару", Ложь);
	
	Возврат СтруктураСтрокиЭтапа;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
