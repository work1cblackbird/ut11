#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьЭлементыФормыНаСервере();
	
	ЛичныйКабинет = Новый ФорматированнаяСтрока(
		НСтр("ru = 'Личный кабинет'"), , ЦветаСтиля.ЦветГиперссылкиГосИС, , "ПерейтиВЛичныйКабинет");
	Если ИнтеграцияСАТУРНКлиентСервер.РежимРаботыСТестовымКонтуромСАТУРН() Тогда
		ЛичныйКабинетТест = Новый ФорматированнаяСтрока(
			НСтр("ru = '(Тестовый контур)'"), , ЦветаСтиля.ЦветГиперссылкиГосИС, , "ПерейтиВЛичныйКабинетТест");
		ПерейтиВЛичныйКабинет = Новый ФорматированнаяСтрока(ЛичныйКабинет, " ", ЛичныйКабинетТест);
	Иначе
		ПерейтиВЛичныйКабинет = ЛичныйКабинет;
	КонецЕсли;
	
	ЦветГиперссылки = ЦветаСтиля.ЦветГиперссылкиГосИС;
	ИнтеграцияИС.УстановитьВидимостьКомандыВыполнитьОбмен(ЭтотОбъект, Метаданные.ОпределяемыеТипы.ДокументыСАТУРН, "ВыполнитьОбмен");
	
	ВосстановитьНастройкиФормы();
	ОбновитьСпискиДокументов();
	ПараметрыЛогирования = ПолучитьПараметрыЛогирования();
	
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьПредставлениеЛогирования();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПерейтиВЛичныйКабинет" Тогда
		СтандартнаяОбработка = Ложь;
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("https://fgis-saturn.ru/");
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПерейтиВЛичныйКабинетТест" Тогда
		СтандартнаяОбработка = Ложь;
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("https://demo.fgis-saturn.ru/");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область ОтборПоОрганизации

&НаКлиенте
Процедура ОтборОрганизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияСАТУРНКлиент.ОткрытьФормуВыбораОрганизаций(ЭтотОбъект, "Отбор", "Отбор",
		Новый ОписаниеОповещения("ПослеВыбораОрганизации", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияСАТУРНКлиент.ОткрытьФормуВыбораОрганизаций(ЭтотОбъект, "Отбор", "Отбор",
		Новый ОписаниеОповещения("ПослеВыбораОрганизации", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияСАТУРНКлиент.ОбработатьВыборОрганизаций(ЭтотОбъект, Истина, Ложь, "Отбор", "Отбор");
	ОбновитьСпискиДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияСАТУРНКлиент.ОбработатьВыборОрганизаций(ЭтотОбъект, Истина, Ложь, "Отбор", "Отбор");
	ОбновитьСпискиДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияСАТУРНКлиент.ОбработатьВыборОрганизаций(ЭтотОбъект, ВыбранноеЗначение, Ложь, "Отбор", "Отбор");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияСАТУРНКлиент.ОбработатьВыборОрганизаций(ЭтотОбъект, ВыбранноеЗначение, Ложь, "Отбор", "Отбор");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацииПриИзменении(Элемент)
	
	ИнтеграцияСАТУРНКлиент.ОбработатьВыборОрганизаций(ЭтотОбъект, ОрганизацииСАТУРН, Ложь, "Отбор", "Отбор");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	ИнтеграцияСАТУРНКлиент.ОбработатьВыборОрганизаций(ЭтотОбъект, ОрганизацияСАТУРН, Ложь, "Отбор", "Отбор");
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	
	ОбновитьСпискиДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСостояниеОбменаНажатие(Элемент)
	
	Если ЕстьТолькоСообщенияОжидающиеОтправки Тогда
		
		ПараметрыОткрытияФормы  = Новый Структура();
		СтруктураБыстрогоОтбора = Новый Структура();
		
		ИмяПоляОтветственный                = "Ответственный";
		ИмяПоляОрганизации                  = "ОрганизацииСАТУРН";
		ИмяПоляОрганизация                  = "ОрганизацияСАТУРН";
		ИмяПоляПредставления                = "ОрганизацииСАТУРНПредставление";
		
		СтруктураБыстрогоОтбора.Вставить(ИмяПоляОтветственный,                Ответственный);
		СтруктураБыстрогоОтбора.Вставить(ИмяПоляОрганизации,                  ОрганизацииСАТУРН);
		СтруктураБыстрогоОтбора.Вставить(ИмяПоляОрганизация,                  ОрганизацияСАТУРН);
		СтруктураБыстрогоОтбора.Вставить(ИмяПоляПредставления,                ОрганизацииСАТУРНПредставление);
		
		ПараметрыОткрытияФормы.Вставить("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
		
		ОткрытьФорму("РегистрСведений.ОчередьСообщенийСАТУРН.ФормаСписка", ПараметрыОткрытияФормы, ЭтотОбъект);
		
	Иначе
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("ОрганизацииСАТУРН", ОрганизацииСАТУРН.ВыгрузитьЗначения());
		
		ОткрытьФорму(
			"Обработка.ПанельОбменСАТУРН.Форма.СостоянияОбмена",
			ПараметрыОткрытияФормы, ЭтотОбъект,,,,,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеЛогированияЗапросовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОбработкаНавигационнойСсылкиЛогирования(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеЛогированияЗапросовРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОбработкаНавигационнойСсылкиЛогирования(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ДокументыПодсистемы

#Область ИмпортПродукции

&НаКлиенте
Процедура ОткрытьИмпортПродукции(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ИмпортПродукцииСАТУРН.Форма.ФормаСпискаДокументов.ОткрытиеОсновногоСписка");
	ОткрытьФормуСпискаДокументов("Документ.ИмпортПродукцииСАТУРН.Форма.ФормаСпискаДокументов", "ВсеТребующиеДействияИлиОжидания");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИмпортПродукцииОформите(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ИмпортПродукцииСАТУРН.Форма.ФормаСпискаДокументов.ОткрытиеСпискаРаспоряжений");
	ОткрытьФормуСпискаДокументов("Документ.ИмпортПродукцииСАТУРН.Форма.ФормаСпискаДокументов", Неопределено, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИмпортПродукцииОтработайте(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ИмпортПродукцииСАТУРН.Форма.ФормаСпискаДокументов.ОткрытиеОсновногоСписка");
	ОткрытьФормуСпискаДокументов("Документ.ИмпортПродукцииСАТУРН.Форма.ФормаСпискаДокументов", "ВсеТребующиеДействия");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИмпортПродукцииОжидайте(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ИмпортПродукцииСАТУРН.Форма.ФормаСпискаДокументов.ОткрытиеОсновногоСписка");
	ОткрытьФормуСпискаДокументов("Документ.ИмпортПродукцииСАТУРН.Форма.ФормаСпискаДокументов", "ВсеТребующиеОжидания");
	
КонецПроцедуры

#КонецОбласти

#Область АктИнвентаризации

&НаКлиенте
Процедура ОткрытьАктИнвентаризации(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.АктИнвентаризацииСАТУРН.Форма.ФормаСпискаДокументов.ОткрытиеОсновногоСписка");
	ОткрытьФормуСпискаДокументов("Документ.АктИнвентаризацииСАТУРН.Форма.ФормаСпискаДокументов", "ВсеТребующиеДействияИлиОжидания");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьАктИнвентаризацииОформите(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.АктИнвентаризацииСАТУРН.Форма.ФормаСпискаДокументов.ОткрытиеСпискаРаспоряжений");
	ОткрытьФормуСпискаДокументов("Документ.АктИнвентаризацииСАТУРН.Форма.ФормаСпискаДокументов", Неопределено, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьАктИнвентаризацииОтработайте(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.АктИнвентаризацииСАТУРН.Форма.ФормаСпискаДокументов.ОткрытиеОсновногоСписка");
	ОткрытьФормуСпискаДокументов("Документ.АктИнвентаризацииСАТУРН.Форма.ФормаСпискаДокументов", "ВсеТребующиеДействия");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьАктИнвентаризацииОжидайте(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.АктИнвентаризацииСАТУРН.Форма.ФормаСпискаДокументов.ОткрытиеОсновногоСписка");
	ОткрытьФормуСпискаДокументов("Документ.АктИнвентаризацииСАТУРН.Форма.ФормаСпискаДокументов", "ВсеТребующиеОжидания");
	
КонецПроцедуры

#КонецОбласти

#Область ПланПрименения

&НаКлиенте
Процедура ОткрытьПланПрименения(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ПланПримененияСАТУРН.Форма.ФормаСпискаДокументов.ОткрытиеОсновногоСписка");
	ОткрытьФормуСпискаДокументов("Документ.ПланПримененияСАТУРН.Форма.ФормаСпискаДокументов", "ВсеТребующиеДействияИлиОжидания");

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПланПримененияОжидайте(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ПланПримененияСАТУРН.Форма.ФормаСпискаДокументов.ОткрытиеОсновногоСписка");
	ОткрытьФормуСпискаДокументов("Документ.ПланПримененияСАТУРН.Форма.ФормаСпискаДокументов", "ВсеТребующиеОжидания");

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПланПримененияОтработайте(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ПланПримененияСАТУРН.Форма.ФормаСпискаДокументов.ОткрытиеОсновногоСписка");
	ОткрытьФормуСпискаДокументов("Документ.ПланПримененияСАТУРН.Форма.ФормаСпискаДокументов", "ВсеТребующиеДействия");

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПланПримененияОформите(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ПланПримененияСАТУРН.Форма.ФормаСпискаДокументов.ОткрытиеСпискаРаспоряжений");
	ОткрытьФормуСпискаДокументов("Документ.ПланПримененияСАТУРН.Форма.ФормаСпискаДокументов", Неопределено, Истина);

КонецПроцедуры

#КонецОбласти

#Область АктПрименения

&НаКлиенте
Процедура ОткрытьАктПрименения(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.АктПримененияСАТУРН.Форма.ФормаСпискаДокументов.ОткрытиеОсновногоСписка");
	ОткрытьФормуСпискаДокументов("Документ.АктПримененияСАТУРН.Форма.ФормаСпискаДокументов", "ВсеТребующиеДействияИлиОжидания");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьАктПримененияОформите(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.АктПримененияСАТУРН.Форма.ФормаСпискаДокументов.ОткрытиеСпискаРаспоряжений");
	ОткрытьФормуСпискаДокументов("Документ.АктПримененияСАТУРН.Форма.ФормаСпискаДокументов", Неопределено, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьАктПримененияОтработайте(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.АктПримененияСАТУРН.Форма.ФормаСпискаДокументов.ОткрытиеОсновногоСписка");
	ОткрытьФормуСпискаДокументов("Документ.АктПримененияСАТУРН.Форма.ФормаСпискаДокументов", "ВсеТребующиеДействия");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьАктПримененияОжидайте(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.АктПримененияСАТУРН.Форма.ФормаСпискаДокументов.ОткрытиеОсновногоСписка");
	ОткрытьФормуСпискаДокументов("Документ.АктПримененияСАТУРН.Форма.ФормаСпискаДокументов", "ВсеТребующиеОжидания");
	
КонецПроцедуры

#КонецОбласти

#Область ПроизводственнаяОперация

&НаКлиенте
Процедура ОткрытьПроизводственнаяОперация(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ПроизводственнаяОперацияСАТУРН.Форма.ФормаСпискаДокументов.ОткрытиеОсновногоСписка");
	ОткрытьФормуСпискаДокументов("Документ.ПроизводственнаяОперацияСАТУРН.Форма.ФормаСпискаДокументов", "ВсеТребующиеДействияИлиОжидания");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПроизводственнаяОперацияОформите(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ПроизводственнаяОперацияСАТУРН.Форма.ФормаСпискаДокументов.ОткрытиеСпискаРаспоряжений");
	ОткрытьФормуСпискаДокументов("Документ.ПроизводственнаяОперацияСАТУРН.Форма.ФормаСпискаДокументов", Неопределено, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПроизводственнаяОперацияОтработайте(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ПроизводственнаяОперацияСАТУРН.Форма.ФормаСпискаДокументов.ОткрытиеОсновногоСписка");
	ОткрытьФормуСпискаДокументов("Документ.ПроизводственнаяОперацияСАТУРН.Форма.ФормаСпискаДокументов", "ВсеТребующиеДействия");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПроизводственнаяОперацияОжидайте(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ПроизводственнаяОперацияСАТУРН.Форма.ФормаСпискаДокументов.ОткрытиеОсновногоСписка");
	ОткрытьФормуСпискаДокументов("Документ.ПроизводственнаяОперацияСАТУРН.Форма.ФормаСпискаДокументов", "ВсеТребующиеОжидания");
	
КонецПроцедуры

#КонецОбласти

#Область ЗапросОстатковПартий

&НаКлиенте
Процедура ОткрытьЗапросОстатковПартий(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ЗапросОстатковПартийСАТУРН.Форма.ФормаСпискаДокументов.ОткрытиеОсновногоСписка");
	ОткрытьФормуСпискаДокументов("Документ.ЗапросОстатковПартийСАТУРН.Форма.ФормаСпискаДокументов", "ВсеТребующиеДействияИлиОжидания");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗапросОстатковПартийОформите(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ЗапросОстатковПартийСАТУРН.Форма.ФормаСпискаДокументов.ОткрытиеСпискаРаспоряжений");
	ОткрытьФормуСпискаДокументов("Документ.ЗапросОстатковПартийСАТУРН.Форма.ФормаСпискаДокументов", Неопределено, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗапросОстатковПартийОтработайте(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ЗапросОстатковПартийСАТУРН.Форма.ФормаСпискаДокументов.ОткрытиеОсновногоСписка");
	ОткрытьФормуСпискаДокументов("Документ.ЗапросОстатковПартийСАТУРН.Форма.ФормаСпискаДокументов", "ВсеТребующиеДействия");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗапросОстатковПартийОжидайте(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ЗапросОстатковПартийСАТУРН.Форма.ФормаСпискаДокументов.ОткрытиеОсновногоСписка");
	ОткрытьФормуСпискаДокументов("Документ.ЗапросОстатковПартийСАТУРН.Форма.ФормаСпискаДокументов", "ВсеТребующиеОжидания");
	
КонецПроцедуры

#КонецОбласти

#Область Накладная

&НаКлиенте
Процедура ОткрытьНакладная(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.НакладнаяСАТУРН.Форма.ФормаСпискаДокументов.ОткрытиеОсновногоСписка");
	ОткрытьФормуСпискаДокументов("Документ.НакладнаяСАТУРН.Форма.ФормаСпискаДокументов", "ВсеТребующиеДействияИлиОжидания");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНакладнаяОформите(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.НакладнаяСАТУРН.Форма.ФормаСпискаДокументов.ОткрытиеСпискаРаспоряжений");
	ОткрытьФормуСпискаДокументов("Документ.НакладнаяСАТУРН.Форма.ФормаСпискаДокументов", Неопределено, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНакладнаяОтработайте(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.НакладнаяСАТУРН.Форма.ФормаСпискаДокументов.ОткрытиеОсновногоСписка");
	ОткрытьФормуСпискаДокументов("Документ.НакладнаяСАТУРН.Форма.ФормаСпискаДокументов", "ВсеТребующиеДействия");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНакладнаяОжидайте(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.НакладнаяСАТУРН.Форма.ФормаСпискаДокументов.ОткрытиеОсновногоСписка");
	ОткрытьФормуСпискаДокументов("Документ.НакладнаяСАТУРН.Форма.ФормаСпискаДокументов", "ВсеТребующиеОжидания");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбъектыПодсистемы

&НаКлиенте
Процедура ПанельАдминистрирования(Команда)
	
	ОткрытьФорму("Обработка.ПанельАдминистрированияСАТУРН.Форма",, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКлассификаторОрганизацийСатурн(Команда)
		
	ОткрытьФорму("Справочник.КлассификаторОрганизацийСАТУРН.Форма.ФормаСписка",, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьМестаХраненияСатурн(Команда)
		
	ОткрытьФорму("Справочник.МестаХраненияСАТУРН.Форма.ФормаСписка",, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОстаткиПартий(Команда)
	
	ОткрытьФормуСпискаДокументов("РегистрНакопления.ОстаткиПартийСАТУРН.Форма.ФормаОстатков", Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКлассификаторПАТ(Команда)
	
	ОткрытьФорму("Справочник.КлассификаторПАТСАТУРН.Форма.ФормаСписка",, ЭтотОбъект);

КонецПроцедуры

#КонецОбласти

#Область ПрикладныеОбъекты

&НаКлиенте
Процедура ОткрытьВидыНоменклатуры(Команда)
	
	ИнтеграцияИСКлиентПереопределяемый.ОткрытьФормуСпискаВидыНоменклатуры(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНоменклатуру(Команда)

	ИнтеграцияИСКлиентПереопределяемый.ОткрытьФормуСпискаНоменклатуры(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьОбменОбработкаОжидания()
	ИнтеграцияСАТУРНСлужебныйКлиент.ПродолжитьВыполнениеОбмена(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьСпискиДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбмен(Команда)
	
	ИнтеграцияСАТУРНКлиент.ВыполнитьОбмен(
		ЭтотОбъект,
		ИнтеграцияСАТУРНКлиент.ОрганизацииДляОбмена(ЭтотОбъект));

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДействияСФормамиДокументов

#Область ЛогированиеЗапросов

&НаСервере
Процедура ВключитьЛогированиеЗапросов(ПродолжительностьВМинутах)
	
	ПараметрыЛогирования = ЛогированиеЗапросовСАТУРН.ПараметрыЛогированияЗапросов();
	ЛогированиеЗапросовИС.ВключитьЛогированиеЗапросов(ПараметрыЛогирования, ПродолжительностьВМинутах * 60);
	ЛогированиеЗапросовСАТУРН.УстановитьПараметрыЛогированияЗапросов(ПараметрыЛогирования);
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьЛогированиеЗапросов()
	
	ЛогированиеЗапросовСАТУРН.ОтключитьЛогированиеЗапросов();
	
	ПараметрыЛогирования = ПолучитьПараметрыЛогирования();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьЛогЗапросов()
	
	ЛогированиеЗапросовИС.ОчиститьЛогЗапросов(ПолучитьПараметрыЛогирования());
	ЛогированиеЗапросовСАТУРН.УстановитьПараметрыЛогированияЗапросов(ПараметрыЛогирования);
	ПараметрыЛогирования = ПолучитьПараметрыЛогирования();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыЛогирования()
	
	ПараметрыЛогирования = ЛогированиеЗапросовСАТУРН.ПараметрыЛогированияЗапросов();
	ЛогированиеЗапросовИС.ЗаполнитьПараметрыЛогирования(ПараметрыЛогирования);
	
	Возврат ПараметрыЛогирования;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ОбработкаОжиданияЗавершенияЛогирования()
	
	ПараметрыЛогирования = ПолучитьПараметрыЛогирования();
	ОбновитьПредставлениеЛогирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылкиЛогирования(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ВключитьЛогЗапросов" Тогда
		
		СписокПродолжительностьЛога = Новый СписокЗначений();
		СписокПродолжительностьЛога.Добавить(5,  НСтр("ru='5 мин.'"));
		СписокПродолжительностьЛога.Добавить(10, НСтр("ru='10 мин.'"));
		СписокПродолжительностьЛога.Добавить(15, НСтр("ru='15 мин.'"));
		
		ПараметрыВыбораПродолжительности = Новый Структура;
		ПараметрыВыбораПродолжительности.Вставить("РежимПродления", Ложь);
		
		ОповещениеОВыбора = Новый ОписаниеОповещения("ВыборПродолжительностьЛогаЗавершение", ЭтотОбъект, ПараметрыВыбораПродолжительности);
		ПоказатьВыборИзСписка(ОповещениеОВыбора, СписокПродолжительностьЛога, Элемент);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьЛогЗапросов" Тогда
		
		ЛогированиеЗапросовИСКлиент.ОткрытьПросмотрЛогаЗапросов(УникальныйИдентификатор, "САТУРН");
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ИзменитьВремяОкончанияЗаписиЛогов" Тогда
		
		СписокПродолжительностьЛога = Новый СписокЗначений();
		СписокПродолжительностьЛога.Добавить(5,  НСтр("ru='продлить на 5 мин.'"));
		СписокПродолжительностьЛога.Добавить(10, НСтр("ru='продлить на 10 мин.'"));
		СписокПродолжительностьЛога.Добавить(15, НСтр("ru='продлить на 15 мин.'"));
		
		ПараметрыВыбораПродолжительности = Новый Структура;
		ПараметрыВыбораПродолжительности.Вставить("РежимПродления", Истина);
		
		ОповещениеОВыбора = Новый ОписаниеОповещения("ВыборПродолжительностьЛогаЗавершение", ЭтотОбъект, ПараметрыВыбораПродолжительности);
		ПоказатьВыборИзСписка(ОповещениеОВыбора, СписокПродолжительностьЛога, Элемент);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтключитьЗаписьЛогов" Тогда
		
		ОтключитьЛогированиеЗапросов();
		ОбновитьПредставлениеЛогирования();
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОчиститьЛогЗапросов" Тогда
		
		ОписаниеОповещенияВопросОчиститьЛогЗапросовЗавершение = Новый ОписаниеОповещения("ОписаниеОповещенияВопросОчиститьЛогЗапросовЗавершение", ЭтотОбъект);
		
		ПоказатьВопрос(
			ОписаниеОповещенияВопросОчиститьЛогЗапросовЗавершение,
			НСтр("ru='Очистить лог запросов?'"),
			РежимДиалогаВопрос.ДаНет,,
			КодВозвратаДиалога.Да);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредставлениеЛогирования()
	
	ОтключитьОбработчикОжидания("Подключаемый_ОбработкаОжиданияЗавершенияЛогирования");
	
	ДанныеОсновнойЧасти = Новый Массив();
	ДанныеПодсказки     = Новый Массив();
	ДанныеПодсказки.Добавить(НСтр("ru='Логирование запросов позволяет получить подробную'"));
	ДанныеПодсказки.Добавить(" ");
	ДанныеПодсказки.Добавить(НСтр("ru='техническую информацию по взаимодействию с ФГИС ""Сатурн""'"));
	ДанныеПодсказки.Добавить(" ");
	ДанныеПодсказки.Добавить(НСтр("ru='для расследования проблем и ошибок службами поддержки.'"));
	
	Если ПараметрыЛогирования.Включено Тогда
		
		Если ЗначениеЗаполнено(ПараметрыЛогирования.ОкончаниеЗаписи) Тогда
			ДатаЗавершенияЛогирования = ИнтеграцияИСКлиентСервер.ДатаИзУниверсальнойДаты(ПараметрыЛогирования.ОкончаниеЗаписи);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДатаЗавершенияЛогирования) Тогда
			
			ДанныеОсновнойЧасти.Добавить(НСтр("ru='Логирование запросов производится до'"));
			ДанныеОсновнойЧасти.Добавить(" ");
			
			Если НачалоДня(ТекущаяДата()) <> НачалоДня(ДатаЗавершенияЛогирования) Тогда
				ПредставлениеДаты = СтрШаблон(
					" (%1)",
					Формат(ДатаЗавершенияЛогирования, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
			
			ПредставлениеВремени = СтрШаблон(
				"%1%2",
				Формат(ДатаЗавершенияЛогирования, "ДФ=HH:mm;"),
				ПредставлениеДаты);
			
			ДанныеОсновнойЧасти.Добавить(
				Новый ФорматированнаяСтрока(
					ПредставлениеВремени,,
					ЦветГиперссылки,,
					"ИзменитьВремяОкончанияЗаписиЛогов"));
			
			ПодключитьОбработчикОжидания(
				"Подключаемый_ОбработкаОжиданияЗавершенияЛогирования",
				(ДатаЗавершенияЛогирования - ТекущаяДата()) + 10,
				Истина);
			
		Иначе
			
			ДанныеОсновнойЧасти.Добавить(НСтр("ru='Запись логов запросов продолжается'"));
			
		КонецЕсли;
		
		ДанныеОсновнойЧасти.Добавить(" ");
		ДанныеОсновнойЧасти.Добавить(
			Новый ФорматированнаяСтрока(
				НСтр("ru='Отключить'"),,
				ЦветГиперссылки,,
				"ОтключитьЗаписьЛогов"));
		
	Иначе
		
		ДанныеОсновнойЧасти.Добавить(НСтр("ru='Запись логов запросов не производится.'"));
		
		ДанныеОсновнойЧасти.Добавить(" ");
		ДанныеОсновнойЧасти.Добавить(
			Новый ФорматированнаяСтрока(
				НСтр("ru='Включить'"),,
				ЦветГиперссылки,,
				"ВключитьЛогЗапросов"));
		
	КонецЕсли;
	
	Если ПараметрыЛогирования.Включено
		Или ЗначениеЗаполнено(ПараметрыЛогирования.ОкончаниеЗаписи) Тогда
		
		ДанныеПодсказки.Добавить(Символы.ПС);
		
		ДанныеПодсказки.Добавить(
				Новый ФорматированнаяСтрока(
					НСтр("ru='Открыть'"),,
					ЦветГиперссылки,,
					"ОткрытьЛогЗапросов"));
		
		ДанныеПодсказки.Добавить(" ");
		
		ДанныеПодсказки.Добавить(
			Новый ФорматированнаяСтрока(
				НСтр("ru='Очистить'"),,
				ЦветГиперссылки,,
				"ОчиститьЛогЗапросов"));
		
	КонецЕсли;
	
	ПредставлениеЛогированияЗапросов = Новый ФорматированнаяСтрока(ДанныеОсновнойЧасти);
	Элементы.ПредставлениеЛогированияЗапросов.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(ДанныеПодсказки);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОткрытьФормуСпискаДокументов(ИмяФормы,
                                       ДальнейшееДействие,
                                       ОткрытьРаспоряжения = Ложь)
	
	СтруктураБыстрогоОтбора = Новый Структура();
	ПараметрыФормы = Новый Структура;
	
	Если ОткрытьРаспоряжения Тогда
		ПараметрыФормы.Вставить("ОткрытьРаспоряжения", Истина);
	Иначе
		СтруктураБыстрогоОтбора.Вставить("ДальнейшееДействие", ДальнейшееДействие);
	КонецЕсли;
	
	ИмяПоляОтветственный                = "Ответственный";
	ИмяПоляОрганизации                  = "ОрганизацииСАТУРН";
	ИмяПоляОрганизация                  = "ОрганизацияСАТУРН";
	ИмяПоляПредставления                = "ОрганизацииСАТУРНПредставление";
	ИмяПоляСопоставленныеОрганизации    = "СопоставленныеОрганизации";
	
	СтруктураБыстрогоОтбора.Вставить(ИмяПоляОтветственный,             Ответственный);
	СтруктураБыстрогоОтбора.Вставить(ИмяПоляОрганизации,               ОрганизацииСАТУРН);
	СтруктураБыстрогоОтбора.Вставить(ИмяПоляОрганизация,               ОрганизацияСАТУРН);
	СтруктураБыстрогоОтбора.Вставить(ИмяПоляПредставления,             ОрганизацииСАТУРНПредставление);
	СтруктураБыстрогоОтбора.Вставить(ИмяПоляСопоставленныеОрганизации, СопоставленныеОрганизации);
	
	ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	ОткрытьФорму(ИмяФормы, ПараметрыФормы);

КонецПроцедуры

#КонецОбласти

#Область ОписанияОповещений

&НаКлиенте
Процедура ВыборПродолжительностьЛогаЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Продолжительность = ВыбранныйЭлемент.Значение;
	Если ДополнительныеПараметры.РежимПродления
		И ЗначениеЗаполнено(ПараметрыЛогирования.ОкончаниеЗаписи) Тогда
		ДатаОкончания = ИнтеграцияИСКлиентСервер.ДатаИзУниверсальнойДаты(ПараметрыЛогирования.ОкончаниеЗаписи);
		Если ДатаОкончания > ТекущаяДата() Тогда
			Продолжительность = Цел((КонецМинуты(ДатаОкончания) - КонецМинуты(ТекущаяДата())) / 60 + Продолжительность);
		КонецЕсли;
	КонецЕсли;
	
	ВключитьЛогированиеЗапросов(Продолжительность);
	ОбновитьПредставлениеЛогирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеОповещенияВопросОчиститьЛогЗапросовЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьЛогЗапросов();
	ОбновитьПредставлениеЛогирования();
	
	ПоказатьОповещениеПользователя(НСтр("ru='Очистка лога запросов выполнена.'"));
	
КонецПроцедуры

#КонецОбласти

#Область ДействияСНастройкамиФормы

&НаСервере
Процедура СохранитьНастройкиФормы()
	
	СтруктураОтбораОрганизаций = ИнтеграцияСАТУРНКлиентСервер.СтруктураОтбораОрганизаций(
		ОрганизацииСАТУРН, СопоставленныеОрганизации, Ложь);
	СтруктураОтбораОрганизаций.Организация   = ОрганизацияСАТУРН;
	СтруктураОтбораОрганизаций.Представление = ОрганизацииСАТУРНПредставление;
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"ПанельОбменСАТУРН", "СтруктураОтбораОрганизаций", СтруктураОтбораОрганизаций);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"ПанельОбменСАТУРН", "Ответственный", Ответственный);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиФормы()
	
	Ответственный = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ПанельОбменСАТУРН", "Ответственный", Ответственный);
	СтруктураОтбораОрганизаций = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ПанельОбменСАТУРН", "СтруктураОтбораОрганизаций");
	
	Если СтруктураОтбораОрганизаций = Неопределено Тогда
		ИнтеграцияСАТУРНКлиентСервер.НастроитьОтборПоОрганизации(ЭтотОбъект, Истина, "Отбор", "Отбор");
	Иначе
		СопоставленныеОрганизацииКонтрагенты = Справочники.КлассификаторОрганизацийСАТУРН.ОрганизацииКонтрагентыПоКлассификаторамСАТУРН(
			СтруктураОтбораОрганизаций.Организации);
		Для Каждого КлючиИЗначение Из СопоставленныеОрганизацииКонтрагенты Цикл
			Если ЗначениеЗаполнено(КлючиИЗначение.Значение.Организация) Тогда
				СопоставленныеОрганизации.Добавить(КлючиИЗначение.Значение.Организация);
			КонецЕсли;
		КонецЦикла;
		СтруктураОтбораОрганизаций.Вставить("СопоставленныеОрганизации", СопоставленныеОрганизации.ВыгрузитьЗначения());
		ИнтеграцияСАТУРНКлиентСервер.НастроитьОтборПоОрганизации(ЭтотОбъект, СтруктураОтбораОрганизаций, "Отбор", "Отбор");
	КонецЕсли;
	
	СобытияФормСАТУРН.ЗаполнитьСписокВыбораОрганизацииПоСохраненнымНастройкам(ЭтотОбъект, "Отбор");
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеЭлементовФормы

&НаСервере
Процедура ОбновитьСпискиДокументов()
	
	ОбновитьСпискиДокументовПодсистемы();
	ОтобразитьСостояниеОбмена();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормыНаСервере()
	
	Элементы.ОткрытьВидыНоменклатуры.Видимость = ИнтеграцияИС.ВидыНоменклатурыИспользуются();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСпискиДокументовПодсистемы()
	
	// Заполним таблицу документов.
	ТаблицаДокументы = Новый ТаблицаЗначений;
	ТаблицаДокументы.Колонки.Добавить("Метаданные");
	ТаблицаДокументы.Колонки.Добавить("Заголовок");
	ТаблицаДокументы.Колонки.Добавить("Оформите");
	ТаблицаДокументы.Колонки.Добавить("Отработайте");
	ТаблицаДокументы.Колонки.Добавить("Ожидайте");
	ТаблицаДокументы.Колонки.Добавить("ЕстьПравоЧтение");
	ТаблицаДокументы.Колонки.Добавить("ЕстьПравоДобавление");
	ТаблицаДокументы.Колонки.Добавить("ЕстьПравоРедактирование");
	
	ДобавитьДокумент(
		ТаблицаДокументы,
		Метаданные.Документы.ИмпортПродукцииСАТУРН,
		НСтр("ru='Импорт продукции ФГИС ""Сатурн""'"),
		Истина,  // Оформите
		Истина,  // Отработайте
		Истина); // Ожидайте
	
	ДобавитьДокумент(
		ТаблицаДокументы,
		Метаданные.Документы.АктИнвентаризацииСАТУРН,
		НСтр("ru='Акты инвентаризации ФГИС ""Сатурн""'"),
		Истина,  // Оформите
		Истина,  // Отработайте
		Истина); // Ожидайте
	
	ДобавитьДокумент(
		ТаблицаДокументы,
		Метаданные.Документы.АктПримененияСАТУРН,
		НСтр("ru='Акты применения ФГИС ""Сатурн""'"),
		Истина,  // Оформите
		Истина,  // Отработайте
		Истина); // Ожидайте
		
	ДобавитьДокумент(
		ТаблицаДокументы,
		Метаданные.Документы.ПланПримененияСАТУРН,
		НСтр("ru='Планы применения ФГИС ""Сатурн""'"),
		Истина,  // Оформите
		Истина,  // Отработайте
		Истина); // Ожидайте
	
	ДобавитьДокумент(
		ТаблицаДокументы,
		Метаданные.Документы.ПроизводственнаяОперацияСАТУРН,
		НСтр("ru='Производственные операции ФГИС ""Сатурн""'"),
		Истина,  // Оформите
		Истина,  // Отработайте
		Истина); // Ожидайте
	
	ДобавитьДокумент(
		ТаблицаДокументы,
		Метаданные.Документы.ЗапросОстатковПартийСАТУРН,
		НСтр("ru='Запросы остатков ФГИС ""Сатурн""'"),
		Ложь,    // Оформите
		Истина,  // Отработайте
		Истина); // Ожидайте
	
	ДобавитьДокумент(
		ТаблицаДокументы,
		Метаданные.Документы.НакладнаяСАТУРН,
		НСтр("ru='Накладные ФГИС ""Сатурн""'"),
		Истина,  // Оформите
		Истина,  // Отработайте
		Истина); // Ожидайте
	
	Организации                = СопоставленныеОрганизации.ВыгрузитьЗначения();
	ВыбранныеОрганизацииСАТУРН = ОрганизацииСАТУРН.ВыгрузитьЗначения();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организации",                  Организации);
	Запрос.УстановитьПараметр("БезОтбораПоОрганизации",       Организации.Количество() = 0);
	Запрос.УстановитьПараметр("ОрганизацииСАТУРН",            ВыбранныеОрганизацииСАТУРН);
	Запрос.УстановитьПараметр("БезОтбораПоОрганизацииСАТУРН", ВыбранныеОрганизацииСАТУРН.Количество() = 0);
	Запрос.УстановитьПараметр("Ответственный",                ?(ЗначениеЗаполнено(Ответственный), Ответственный, Неопределено));
	Запрос.УстановитьПараметр("БезОтбораПоОтветственным",     НЕ ЗначениеЗаполнено(Ответственный));
	
	Для Каждого ТекЭлемент Из ТаблицаДокументы Цикл
		
		Если НЕ ТекЭлемент.ЕстьПравоЧтение Тогда
			Элементы["Группа" + ТекЭлемент.Метаданные.Имя].Видимость = Ложь;
			Продолжить;
		КонецЕсли;
		
		МетаРеквизитОснование = ИнтеграцияИС.РеквизитДокументОснованиеДокументаИС(ТекЭлемент.Метаданные);
		
		Если МетаРеквизитОснование = Неопределено Тогда
			Запрос.УстановитьПараметр("ПустойДокументОснование", Неопределено);
		Иначе
			Запрос.УстановитьПараметр("ПустойДокументОснование", 
				ИнтеграцияИС.МассивПустыхЗначенийСоставногоТипа(МетаРеквизитОснование.Тип));
		КонецЕсли;
		
		// Сформируем текст запроса выборки количества документов для каждого действия.
		ТекстыЗапроса = Новый СписокЗначений;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("Оформите",
			Новый Структура("Представление, Доступно",
				НСтр("ru='оформите'"),
				ТекЭлемент.ЕстьПравоДобавление));
		Если Не ТекЭлемент.Оформите Тогда
			СтруктураДействий.Оформите.Вставить("СкрытьЭлемент");
		КонецЕсли;
		СтруктураДействий.Вставить("Отработайте",
			Новый Структура("Представление, Доступно",
				НСтр("ru='отработайте'"),
				ТекЭлемент.ЕстьПравоРедактирование));
		СтруктураДействий.Вставить("Ожидайте",
			Новый Структура("Представление, Доступно",
				НСтр("ru='ожидайте'"),
				ТекЭлемент.ЕстьПравоЧтение));
		
		Если ТекЭлемент.Оформите Тогда
			ТекстыЗапроса.Добавить(
				ТекстЗапросаОформите(ТекЭлемент.Метаданные),
				ТекЭлемент.Метаданные.Имя + "Оформите");
		КонецЕсли;
		
		Если ТекЭлемент.Отработайте Тогда
			ТекстыЗапроса.Добавить(
				ТекстЗапросаОтработайте(ТекЭлемент.Метаданные),
				ТекЭлемент.Метаданные.Имя + "Отработайте");
		КонецЕсли;
		
		Если ТекЭлемент.Ожидайте Тогда
			ТекстыЗапроса.Добавить(
				ТекстЗапросаОжидайте(ТекЭлемент.Метаданные),
				ТекЭлемент.Метаданные.Имя + "Ожидайте");
		КонецЕсли;
		
		// Получим запросом количество документов.
		МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ТекЭлемент.Метаданные.ПолноеИмя());
		Запрос.УстановитьПараметр("ВсеТребующиеОжидания", МенеджерДокумента.ВсеТребующиеОжидания());
		Запрос.УстановитьПараметр("ВсеТребующиеДействия", МенеджерДокумента.ВсеТребующиеДействия());
		
		РезультатыЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса);
		
		ОбщееКоличество = 0;
		
		// Обновим тексты надписей действий с документом.
		Для Каждого КлючИЗначение Из СтруктураДействий Цикл
			
			ЭлементНадписи = Элементы.Найти("Открыть" + ТекЭлемент.Метаданные.Имя + КлючИЗначение.Ключ);
			
			Если ЭлементНадписи = Неопределено Тогда
				// Такое действие для документа не предусмотрено.
			ИначеЕсли КлючИЗначение.Значение.Свойство("СкрытьЭлемент") Тогда
				// Не определены соответствующие операции
				ЭлементНадписи.Видимость = Ложь;
				Элементы[ЭлементНадписи.Имя + "Декорация"].Заголовок = " ";
			ИначеЕсли Не ТекЭлемент[КлючИЗначение.Ключ] Тогда
				ВывестиПоказатель(
					0,
					ЭлементНадписи,
					КлючИЗначение.Значение.Представление,
					КлючИЗначение.Значение.Доступно);
			Иначе
				ОбщееКоличество = ОбщееКоличество + ВывестиПоказатель(
					РезультатыЗапроса[ТекЭлемент.Метаданные.Имя + КлючИЗначение.Ключ].Выбрать(),
					ЭлементНадписи,
					КлючИЗначение.Значение.Представление,
					КлючИЗначение.Значение.Доступно);
			КонецЕсли;
			
		КонецЦикла;
		
		// Обновим текст надписи самого документа.
		ВывестиПоказатель(
			ОбщееКоличество,
			Элементы["Открыть" + ТекЭлемент.Метаданные.Имя], 
			ТекЭлемент.Заголовок,
			Истина);
		
	КонецЦикла;
	
	СохранитьНастройкиФормы();
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьСостояниеОбмена()
	
	РезультатыЗапроса = ИнтеграцияСАТУРН.СостояниеОбмена(ОрганизацииСАТУРН.ВыгрузитьЗначения());
	
	ПерваяПроблема = Неопределено;
	ЕщеПроблемы    = 0;
	
	ЕстьТолькоСообщенияОжидающиеОтправки = Ложь;
	
	Если Не СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации()
		И Не ИнтеграцияИС.ХранитьФайлыВТомахНаДиске() Тогда
		Если ПерваяПроблема <> Неопределено Тогда
			ЕщеПроблемы = ЕщеПроблемы + 1;
		Иначе
			ПерваяПроблема = НСтр("ru='Рекомендуется настроить хранение файлов в томах на диске'");
			Элементы.ГруппаДекорацияСостояниеОбмена.ТекущаяСтраница = Элементы.СостояниеОбменаЖелтый;
		КонецЕсли;
	КонецЕсли;
	
	Проблемы = РезультатыЗапроса["ЕстьСообщенияОжидающиеОтправки"].Выбрать();
	Если Проблемы.Количество() > 0 Тогда
		Если ПерваяПроблема <> Неопределено Тогда
			ЕщеПроблемы = ЕщеПроблемы + 1;
		Иначе
			Проблемы.Следующий();
			ПерваяПроблема = СтрШаблон(
				НСтр("ru = 'Есть сообщения (%1), ожидающие отправки в ФГИС ""Сатурн"". Выполните обмен.'"),
				Проблемы.КоличествоСообщений);
			Элементы.ГруппаДекорацияСостояниеОбмена.ТекущаяСтраница = Элементы.СостояниеОбменаИнформация;
			ЕстьТолькоСообщенияОжидающиеОтправки = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьПроблема = Не (РезультатыЗапроса["НастройкаРегламентногоОбменаДанными"].Пустой()
		Или ИнтеграцияИС.РегЗаданияНастроены(РезультатыЗапроса, "НастройкаРегламентногоОбменаДанными"));
	Если ЕстьПроблема Тогда
		Если ПерваяПроблема <> Неопределено Тогда
			ЕщеПроблемы = ЕщеПроблемы + 1;
		Иначе
			ПерваяПроблема = НСтр("ru='Рекомендуется настроить регламентное задание для отправки сообщений из общей очереди'");
			Элементы.ГруппаДекорацияСостояниеОбмена.ТекущаяСтраница = Элементы.СостояниеОбменаЖелтый;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьПроблема = Не (РезультатыЗапроса["НастройкаЗагрузкаСтатусовНакладных"].Пустой()
		Или ИнтеграцияИС.РегЗаданияНастроены(РезультатыЗапроса, "НастройкаЗагрузкаСтатусовНакладных"));
	Если ЕстьПроблема Тогда
		Если ПерваяПроблема <> Неопределено Тогда
			ЕщеПроблемы = ЕщеПроблемы + 1;
		Иначе
			ПерваяПроблема = НСтр("ru='Рекомендуется настроить регламентное задание для загрузки статусов накладных'");
			Элементы.ГруппаДекорацияСостояниеОбмена.ТекущаяСтраница = Элементы.СостояниеОбменаЖелтый;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьПроблема = Не (РезультатыЗапроса["НастройкаЗагрузкаИмпортируемыхПартий"].Пустой()
		Или ИнтеграцияИС.РегЗаданияНастроены(РезультатыЗапроса, "НастройкаЗагрузкаИмпортируемыхПартий"));
	Если ЕстьПроблема Тогда
		Если ПерваяПроблема <> Неопределено Тогда
			ЕщеПроблемы = ЕщеПроблемы + 1;
		Иначе
			ПерваяПроблема = НСтр("ru='Рекомендуется настроить регламентное задание для загрузки импортируемых партий'");
			Элементы.ГруппаДекорацияСостояниеОбмена.ТекущаяСтраница = Элементы.СостояниеОбменаЖелтый;
		КонецЕсли;
	КонецЕсли;
	
	Если ПерваяПроблема <> Неопределено Тогда
		
		Если ЕщеПроблемы > 0 Тогда
			ТекстЗаголовка = СтрШаблон(НСтр("ru='%1 ( + еще %2 )'"), ПерваяПроблема, ЕщеПроблемы);
			ЕстьТолькоСообщенияОжидающиеОтправки = Ложь;
		Иначе
			ТекстЗаголовка = ПерваяПроблема;
		КонецЕсли;
		
		Элементы.НадписьСостояниеОбмена.Заголовок = ТекстЗаголовка;
		Элементы.ГруппаДекорацияСостояниеОбмена.Видимость = Истина;
		Элементы.НадписьСостояниеОбмена.Видимость         = Истина;
		
	Иначе
		Элементы.ГруппаДекорацияСостояниеОбмена.Видимость = Ложь;
		Элементы.НадписьСостояниеОбмена.Видимость         = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьДокумент(Таблица, ОбъектМетаданных, Заголовок, Оформите, Отработайте, Ожидайте)
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.Метаданные  = ОбъектМетаданных;
	НоваяСтрока.Заголовок   = Заголовок;
	
	НоваяСтрока.ЕстьПравоЧтение         = ПравоДоступа("Чтение",         ОбъектМетаданных);
	НоваяСтрока.ЕстьПравоДобавление     = ПравоДоступа("Добавление",     ОбъектМетаданных);
	НоваяСтрока.ЕстьПравоРедактирование = ПравоДоступа("Редактирование", ОбъектМетаданных);
	
	НоваяСтрока.Оформите    = Оформите;
	НоваяСтрока.Отработайте = Отработайте;
	НоваяСтрока.Ожидайте    = Ожидайте;
	
КонецПроцедуры

&НаСервере
Функция ВывестиПоказатель(Выборка, Кнопка, ТекстПоказателя, ДействиеДоступно)
	
	Если ДействиеДоступно Тогда
		
		Если ТипЗнч(Выборка) = Тип("Число") Тогда
			КоличествоДокументов = Выборка;
		ИначеЕсли Выборка.Следующий() Тогда
			КоличествоДокументов = Выборка.КоличествоДокументов;
		Иначе
			КоличествоДокументов = 0;
		КонецЕсли;
		
		Если КоличествоДокументов > 0 Тогда
			ТекстЗаголовка = СтрШаблон(НСтр("ru = '%1 (%2)'"), ТекстПоказателя, КоличествоДокументов);
			ЦветТекста     = ЦветаСтиля.ЦветГиперссылкиГосИС;
		Иначе
			ТекстЗаголовка = ТекстПоказателя;
			ЦветТекста     = ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС;
		КонецЕсли;
		
	Иначе
		
		КоличествоДокументов = 0;
		ТекстЗаголовка       = " ";
		ЦветТекста           = ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС;
		
	КонецЕсли;
	
	Кнопка.Заголовок   = ТекстЗаголовка;
	Кнопка.ЦветТекста  = ЦветТекста;
	Кнопка.Видимость   = Истина;
	Кнопка.Доступность = НЕ ПустаяСтрока(ТекстЗаголовка);
	
	Возврат КоличествоДокументов;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаОтработайте(МетаданныеДокумента)
	
	ТекстЗапроса = ТекстЗапросаКоличестваДокументовПоДальнейшемуДействию(
		МетаданныеДокумента,
		"&ВсеТребующиеДействия");
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаОжидайте(МетаданныеДокумента)
	
	ТекстЗапроса = ТекстЗапросаКоличестваДокументовПоДальнейшемуДействию(
		МетаданныеДокумента,
		"&ВсеТребующиеОжидания");
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаОформите(МетаданныеДокумента)
	
	МетаРеквизитОснование = ИнтеграцияИС.РеквизитДокументОснованиеДокументаИС(МетаданныеДокумента);
	
	Если МетаРеквизитОснование = Неопределено Тогда
		ТипыДокументаОснования = Новый Массив;
	Иначе
		ТипыДокументаОснования = МетаРеквизитОснование.Тип.Типы();
	КонецЕсли;
	СтрокиСоединенияДокументов = Новый Массив;
	СтрокиОтбораДокументов     = Новый Массив;
	
	Для Каждого ТипОснования Из ТипыДокументаОснования Цикл
		
		МетаданныеОснования = Метаданные.НайтиПоТипу(ТипОснования);
		
		Если МетаданныеОснования = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПравоДоступа("Чтение", МетаданныеОснования) Тогда
			Продолжить;
		КонецЕсли;
		
		// Добавим соединение с документом-основанием для RLS.
		СтрокиСоединенияДокументов.Добавить("	ЛЕВОЕ СОЕДИНЕНИЕ " + МетаданныеОснования.ПолноеИмя() + " КАК Основание" + МетаданныеОснования.Имя + "
			|		ПО Статусы.Основание = Основание" + МетаданныеОснования.Имя + ".Ссылка");
		
		СтрокиОтбораДокументов.Добавить("Основание" + МетаданныеОснования.Имя + ".Ссылка ЕСТЬ НЕ NULL");
		
	КонецЦикла;
	
	Если СтрокиОтбораДокументов.Количество() = 0 Тогда
		
		// Нет ни одного доступного документа-основания.
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	0 КАК КоличествоДокументов";
		
	Иначе
		
		ТекстСоединения = СтрСоединить(СтрокиСоединенияДокументов, Символы.ПС);
		ТекстОтбора 	= " И (" + СтрСоединить(СтрокиОтбораДокументов, Символы.ПС + "		ИЛИ ") + ")";
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Статусы.Основание) КАК КоличествоДокументов
		|ИЗ
		|	РегистрСведений.СтатусыОформленияДокументовСАТУРН КАК Статусы
		|%2
		|ГДЕ
		|	Статусы.Документ = ЗНАЧЕНИЕ(Документ.%1.ПустаяСсылка)
		|	И Статусы.СтатусОформления В
		|		(ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовГосИС.НеОформлено),
		|		 ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовГосИС.ОформленоЧастично),
		|		 ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовГосИС.ЕстьОшибкиОформления),
		|		 ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовГосИС.ТребуетсяСопоставлениеНоменклатуры))
		|	И НЕ Статусы.Архивный
		|	И (&БезОтбораПоОрганизацииСАТУРН ИЛИ Статусы.Контрагент В (&Организации))
		|	%3";
		
		ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстЗапроса,
			МетаданныеДокумента.Имя,
			ТекстСоединения,
			ТекстОтбора);
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаКоличестваДокументовПоДальнейшемуДействиюНакладнаяСАТУРН(МетаданныеДокумента, ОтборДействия)
	
	МетаРеквизитОснование = ИнтеграцияИС.РеквизитДокументОснованиеДокументаИС(МетаданныеДокумента);
	
	ТекстСоединения = "";
	ТекстОтбора     = "";
	
	Если МетаРеквизитОснование <> Неопределено Тогда
		
		ТипыДокументаОснования        = МетаРеквизитОснование.Тип.Типы();
		СтрокиСоединенияДокументов    = Новый Массив;
		СтрокиОтбораДокументов        = Новый Массив;
		ДокументИмеетОснования        = Ложь;
		
		Для Каждого ТипОснования Из ТипыДокументаОснования Цикл
			
			МетаданныеОснования = Метаданные.НайтиПоТипу(ТипОснования);
			
			Если МетаданныеОснования = Неопределено Тогда
				Продолжить
			ИначеЕсли Не Метаданные.Документы.Содержит(МетаданныеОснования) Тогда
				Продолжить;
			Иначе
				ДокументИмеетОснования = Истина;
			КонецЕсли;
			Если НЕ ПравоДоступа("Чтение", МетаданныеОснования) Тогда
				Продолжить;
			КонецЕсли;
			
			// Добавим соединение с документом-основанием для RLS.
			СтрокиСоединенияДокументов.Добавить(
				"	ЛЕВОЕ СОЕДИНЕНИЕ Документ." + МетаданныеОснования.Имя + " КАК Документ" + МетаданныеОснования.Имя + "
				|		ПО Документ.ДокументОснование = Документ" + МетаданныеОснования.Имя + ".Ссылка");
			
			СтрокиОтбораДокументов.Добавить("Документ" + МетаданныеОснования.Имя + ".Ссылка ЕСТЬ НЕ NULL");
			
		КонецЦикла;
		
		Если ДокументИмеетОснования Тогда
			
			Если СтрокиОтбораДокументов.Количество() = 0 Тогда
				ТекстСоединения = "";
			Иначе
				ТекстСоединения = СтрСоединить(СтрокиСоединенияДокументов, Символы.ПС);
			КонецЕсли;
			
			СтрокиОтбораДокументов.Добавить("Документ.ДокументОснование В (&ПустойДокументОснование)");
			ТекстОтбора = " И (" + СтрСоединить(СтрокиОтбораДокументов, Символы.ПС + "		ИЛИ ") + ")";
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтатусыОбъектов.Документ КАК Документ
	|ПОМЕСТИТЬ ТаблицаДокументы
	|ИЗ
	|	РегистрСведений.СтатусыДокументовСАТУРН КАК СтатусыОбъектов
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НакладнаяСАТУРН КАК Документы
	|		ПО СтатусыОбъектов.Документ = Документы.Ссылка
	|%1
	|ГДЕ
	|	СтатусыОбъектов.ДальнейшееДействие1 В (%2)
	|	И НЕ Документы.ПометкаУдаления
	|	И (&БезОтбораПоОтветственным ИЛИ Документы.Ответственный = &Ответственный)
	|	И (&БезОтбораПоОрганизацииСАТУРН ИЛИ Документы.ГрузоотправительОрганизацияСАТУРН В(&ОрганизацииСАТУРН))
	|	%3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СтатусыОбъектов.Документ
	|ИЗ
	|	РегистрСведений.СтатусыДокументовСАТУРН КАК СтатусыОбъектов
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НакладнаяСАТУРН КАК Документы
	|		ПО СтатусыОбъектов.Документ = Документы.Ссылка
	|%1
	|ГДЕ
	|	СтатусыОбъектов.ДальнейшееДействие1 В (%2)
	|	И НЕ Документы.ПометкаУдаления
	|	И (&БезОтбораПоОтветственным ИЛИ Документы.Ответственный = &Ответственный)
	|	И (&БезОтбораПоОрганизацииСАТУРН ИЛИ Документы.ГрузополучательОрганизацияСАТУРН В(&ОрганизацииСАТУРН))
	|	%3
	|
	|;
	|//#РезультатЗапроса#////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ ТаблицаДокументы.Документ) КАК КоличествоДокументов
	|ИЗ
	|	ТаблицаДокументы КАК ТаблицаДокументы
	|;
	|
	|УНИЧТОЖИТЬ ТаблицаДокументы";
	
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстЗапроса,
		ТекстСоединения,
		ОтборДействия,
		ТекстОтбора);
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаКоличестваДокументовПоДальнейшемуДействию(МетаданныеДокумента, ОтборДействия)
	
	Если МетаданныеДокумента = Метаданные.Документы.НакладнаяСАТУРН Тогда
		Возврат ТекстЗапросаКоличестваДокументовПоДальнейшемуДействиюНакладнаяСАТУРН(МетаданныеДокумента, ОтборДействия);
	КонецЕсли;
	
	МетаРеквизитОснование = ИнтеграцияИС.РеквизитДокументОснованиеДокументаИС(МетаданныеДокумента);
	
	ТекстСоединения = "";
	ТекстОтбора     = "";
	
	Если МетаРеквизитОснование <> Неопределено Тогда
		
		ТипыДокументаОснования        = МетаРеквизитОснование.Тип.Типы();
		СтрокиСоединенияДокументов    = Новый Массив;
		СтрокиОтбораДокументов        = Новый Массив;
		ДокументИмеетОснования        = Ложь;
		
		ЕстьРеквизитОрганизация       = ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация",       МетаданныеДокумента);
		ЕстьРеквизитОрганизацияСАТУРН = ОбщегоНазначения.ЕстьРеквизитОбъекта("ОрганизацияСАТУРН", МетаданныеДокумента);
		
		Для Каждого ТипОснования Из ТипыДокументаОснования Цикл
			
			МетаданныеОснования = Метаданные.НайтиПоТипу(ТипОснования);
			
			Если МетаданныеОснования = Неопределено Тогда
				Продолжить
			ИначеЕсли Не Метаданные.Документы.Содержит(МетаданныеОснования) Тогда
				Продолжить;
			Иначе
				ДокументИмеетОснования = Истина;
			КонецЕсли;
			Если НЕ ПравоДоступа("Чтение", МетаданныеОснования) Тогда
				Продолжить;
			КонецЕсли;
			
			// Добавим соединение с документом-основанием для RLS.
			СтрокиСоединенияДокументов.Добавить(
				"	ЛЕВОЕ СОЕДИНЕНИЕ Документ." + МетаданныеОснования.Имя + " КАК Документ" + МетаданныеОснования.Имя + "
				|		ПО Документ.ДокументОснование = Документ" + МетаданныеОснования.Имя + ".Ссылка");
			
			СтрокиОтбораДокументов.Добавить("Документ" + МетаданныеОснования.Имя + ".Ссылка ЕСТЬ НЕ NULL");
			
		КонецЦикла;
		
		Если ДокументИмеетОснования Тогда
			
			Если СтрокиОтбораДокументов.Количество() = 0 Тогда
				ТекстСоединения = "";
			Иначе
				ТекстСоединения = СтрСоединить(СтрокиСоединенияДокументов, Символы.ПС);
			КонецЕсли;
			
			СтрокиОтбораДокументов.Добавить("Документ.ДокументОснование В (&ПустойДокументОснование)");
			ТекстОтбора = " И (" + СтрСоединить(СтрокиОтбораДокументов, Символы.ПС + "		ИЛИ ") + ")";
			
		КонецЕсли;
		
		Если ЕстьРеквизитОрганизация Тогда
			
			ТекстОтбора = ТекстОтбора
				+ Символы.ПС
				+ "И (&БезОтбораПоОрганизации ИЛИ Документы.Организация В(&Организации))";
			
		КонецЕсли;
		
		Если ЕстьРеквизитОрганизацияСАТУРН Тогда
			
			ТекстОтбора = ТекстОтбора
				+ Символы.ПС
				+ "И (&БезОтбораПоОрганизацииСАТУРН ИЛИ Документы.ОрганизацияСАТУРН В(&ОрганизацииСАТУРН))";
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыОбъектов.Документ) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыДокументовСАТУРН КАК СтатусыОбъектов
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.%1 КАК Документы
	|		ПО СтатусыОбъектов.Документ = Документы.Ссылка
	|%2
	|ГДЕ
	|	СтатусыОбъектов.ДальнейшееДействие1 В (%3)
	|	И НЕ Документы.ПометкаУдаления
	|	И (&БезОтбораПоОтветственным ИЛИ Документы.Ответственный = &Ответственный)
	|	%4";
	
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстЗапроса,
		МетаданныеДокумента.Имя,
		ТекстСоединения,
		ОтборДействия,
		ТекстОтбора);

	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ОтборПоОрганизации

&НаКлиенте
Процедура ПослеВыбораОрганизации(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьСпискиДокументов();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти