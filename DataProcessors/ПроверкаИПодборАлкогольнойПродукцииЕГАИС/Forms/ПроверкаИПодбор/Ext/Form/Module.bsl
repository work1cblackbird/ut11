#Область ОписаниеПеременных

&НаКлиенте
Перем СоответствиеШтрихкодовСтрокДерева Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ИнициализироватьДанныеФормы();
	
	ОбработатьИПроверитьПереданныеПараметры(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьРежимПросмотра();
		
	Если НЕ ПроверкаНеПоДокументу Тогда
		ВосстановитьСохраненныеРезультатыПроверки();
		
		Если ВостановленыРезультатыПроверки Тогда
			УстановитьРежимПросмотра();
			РассчитатьИтогиУстановитьВидимость();
		КонецЕсли;
	КонецЕсли;
	
	ПоддерживаемыеТипыПодключаемогоОборудования = "СканерШтрихкода";
	ИнтеграцияИС.НастроитьПодключаемоеОборудование(ЭтотОбъект, ПоддерживаемыеТипыПодключаемогоОборудования, "");
	
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, ПоддерживаемыеТипыПодключаемогоОборудования);
	// Конец ПодключаемоеОборудование
		
	Если ВостановленыРезультатыПроверки Тогда
		СоответствиеШтрихкодовСтрокДерева = СоответствиеШтрихкодовСтрокДерева(АдресСоответствиеШтрихкодыИдентификаторыСтрок);
	Иначе
		ЗагрузитьДанныеДокумента();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Если ВостановленыРезультатыПроверки 
		И Настройки.Получить("РежимПроверки") <> Неопределено Тогда
		
		Настройки.Удалить("РежимПроверки");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	РежимПроверкиСохраненный = Настройки.Получить("РежимПроверки");
	Если РежимПроверкиСохраненный <> Неопределено Тогда
		РежимПроверки = РежимПроверкиСохраненный;
		СформироватьПредставлениеНастроек(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ВыполняетсяЗакрытие Тогда
		
		Если Модифицированность Тогда
			
			Отказ = Истина;
			
			ТекстВопроса = НСтр("ru = 'Все несохраненные результаты проверки будут потеряны. Все равно закрыть?'");
			ОписаниеОповещенияПослеВопросаПриЗакрытииФормы = Новый ОписаниеОповещения("ПослеВопросаПриЗакрытииФормы", ЭтотОбъект);
			
			ПоказатьВопрос(ОписаниеОповещенияПослеВопросаПриЗакрытииФормы, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если РежимПросмотра Тогда
		Возврат;
	КонецЕсли;
	
	СобытияФормИСКлиент.ВнешнееСобытиеПолученыШтрихкоды(
		"ПоискПоШтрихкодуЗавершение",
		ЭтотОбъект, Источник, Событие,
		Данные, ПараметрыСканирования());
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИнтеграцияИСКлиент.ЭтоЗагрузкаКодовМаркировки(ИсточникВыбора, ЭтотОбъект) Тогда
		//Формат загрузки из внешнего файла полностью соответствует формату загрузки из ТСД
		Подключаемый_ПолученыДанныеИзТСД(ВыбранноеЗначение, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияИнформацияТребуетсяПеремаркировкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ИзменитьОтборТребуетсяПеремаркировка" Тогда
		
		УстановленОтборТребуетсяПеремаркировать = Не УстановленОтборТребуетсяПеремаркировать;
		
		Если УстановленОтборТребуетсяПеремаркировать Тогда
			УстановитьОтборПоТребующимПеремаркировки();
		Иначе
			ПроверитьПризнакУстановкиОтбораВДереве(ЭтотОбъект);
		КонецЕсли;
		
		ПроверкаИПодборПродукцииЕГАИСКлиентСервер.ОтобразитьИнформациюОНеобходимостиПеремаркировки(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеРежимаПроверкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ИзменитьРежимПроверки" Тогда
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("РежимПроверки", РежимПроверки);
		
		ОповещениеОИзмененииРежимаПроверки = Новый ОписаниеОповещения("ПослеИзмененияРежимаПроверки", ЭтотОбъект);
		
		ОткрытьФорму(
			"Обработка.ПроверкаИПодборАлкогольнойПродукцииЕГАИС.Форма.ИзменениеРежимаПроверки", ПараметрыОткрытия, ЭтотОбъект,
			УникальныйИдентификатор,,,
			ОповещениеОИзмененииРежимаПроверки, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ИзменитьДетализацию" Тогда
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ДетализацияСтруктурыХранения", ДетализацияСтруктурыХранения);
		ПараметрыОткрытия.Вставить("РежимВыбора",                  Истина);
		
		ОповещениеОИзмененииРежимаДетализации = Новый ОписаниеОповещения("ПослеИзмененияРежимаДетализации", ЭтотОбъект);
		
		ОткрытьФорму(
			"Обработка.ПроверкаИПодборАлкогольнойПродукцииЕГАИС.Форма.ИзменениеДетализации", ПараметрыОткрытия, ЭтотОбъект,
			УникальныйИдентификатор,,,
			ОповещениеОИзмененииРежимаДетализации, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСохраненногоВыбораОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	АкцизныеМаркиЕГАИСКлиент.ПредставлениеСохраненногоВыбораОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПоказатьТекстОшибкиНажатие(Элемент)
	
	Если ПроверкаНеПоДокументу Тогда
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Документ", СообщениеПротоколаОбмена);
		ОткрытьФорму("Справочник.ЕГАИСПрисоединенныеФайлы.Форма.ФормаОшибки", ПараметрыОткрытияФормы, ЭтотОбъект);
	Иначе
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Документ", ПроверяемыйДокумент);
		ОткрытьФорму("Справочник.ЕГАИСПрисоединенныеФайлы.Форма.ФормаОшибки", ПараметрыОткрытияФормы, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоМаркированнойПродукции

&НаКлиенте
Процедура ДеревоМаркированнойПродукцииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМаркированнойПродукцииПередУдалением(Элемент, Отказ)
	
	ОчиститьСообщения();
	
	ТекущиеДанные = Элементы.ДеревоМаркированнойПродукции.ТекущиеДанные;
	
	Если ТекущиеДанные.СтатусПроверки <> ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась") Тогда
		
		Если Не РежимПодбораСуществующихУпаковок Тогда
		
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Удалять можно только строки в статусе ""Не числилось"".'"),
				,
				,"ДеревоМаркированнойПродукции"
				,
				Отказ);
			
			Возврат;
			
		Иначе
			
			РодительскаяСтрока = ТекущиеДанные.ПолучитьРодителя();
			
			Если ТекущиеДанные.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаАлкогольнойПродукции.БутылкиБезКоробки")
				Или (РодительскаяСтрока <> Неопределено
				     И РодительскаяСтрока.ТипУпаковки <> ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаАлкогольнойПродукции.БутылкиБезКоробки")) Тогда
			
				ОбщегоНазначенияКлиент.СообщитьПользователю(
					НСтр("ru = 'Удалять можно только строки в статусе ""Не числилось"", упаковки верхнего уровня и бутылки без упаковки.'"),
					,
					,"ДеревоМаркированнойПродукции"
					,
					Отказ);
			
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТекущиеДанные.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
		
		АлкогольнаяПродукцияУдаляемойСтроки = ТекущиеДанные.АлкогольнаяПродукция;
		Справка2УдаляемойСтроки             = ТекущиеДанные.Справка2;
		
	КонецЕсли;
	
	РодительскаяСтрока        = ТекущиеДанные.ПолучитьРодителя();
	
	ИдентификаторТекущейСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	
	Если РодительскаяСтрока <> Неопределено Тогда
		
		ИдентификаторРодителяУдаляемойСтроки = РодительскаяСтрока.ПолучитьИдентификатор();
		
	КонецЕсли;
	
	Если ИдентификаторТекущейСтроки = ИдентификаторТекущейПроверяемойУпаковки Тогда
		
		ИдентификаторТекущейПроверяемойУпаковки = ИдентификаторРодителяУдаляемойСтроки;
		
	КонецЕсли;
	
	Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ТекущиеДанные.ТипУпаковки) Тогда
		
		КоличествоУдаляемыхТребующихПеремаркировки = ?(ТекущиеДанные.ТребуетсяПеремаркировка, 1, 0);
		ОпределитьКоличествоТребующихПеремаркировкиДляКоллекции(ТекущиеДанные.ПолучитьЭлементы(), КоличествоУдаляемыхТребующихПеремаркировки);
		
		Если КоличествоУдаляемыхТребующихПеремаркировки > 0 Тогда
			КоличествоУпаковокКоторыеНеобходимоПеремаркировать = КоличествоУпаковокКоторыеНеобходимоПеремаркировать - КоличествоУдаляемыхТребующихПеремаркировки;
			ТребуетсяОбновитьИнформациюОНеобходимостиПеремаркировки = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ТекущиеДанные.ТипУпаковки) Тогда
		
		Для Каждого СтрокаТаблицы Из ТекущиеДанные.ПолучитьЭлементы() Цикл
			
			ДобавитьСтрокуСПодчиненнымиВТаблицуИзменений(ТаблицаИзмененийАлкогольнойПродукции, СтрокаТаблицы);
			
		КонецЦикла 
		
	Иначе
		ДобавитьСтрокуВТаблицуИзменений(ТаблицаИзмененийАлкогольнойПродукции, ТекущиеДанные, -1);
	КонецЕсли;
	
	СоответствиеШтрихкодовСтрокДерева.Удалить(ТекущиеДанные.Штрихкод);
	УдалитьИзСоответствияШтрихкодовДляКоллекции(ТекущиеДанные.ПолучитьЭлементы());
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМаркированнойПродукцииСтатусПроверкиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоМаркированнойПродукции.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ТекущиеДанные.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует") Тогда
			
			УстановитьСтатусОтсутствуетДляПодчиненных(ТекущиеДанные);
			ПроверкаИПодборПродукцииЕГАИСКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(ТекущиеДанные, Ложь);
			
		КонецЕсли;
		
		ПроверкаИПодборПродукцииЕГАИСКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(ТекущиеДанные);
		ПроверкаИПодборПродукцииЕГАИСКлиентСервер.УстановитьИндексКартинкиСтатусаПроверки(ТекущиеДанные);
		ПроверкаИПодборПродукцииЕГАИСКлиентСервер.УстановитьДоступностьУпаковкиДляПроверки(ТекущиеДанные, ДоступныеДляПроверкиУпаковки);
		
		ПроверитьСоответствиеОтборуПриИзмененииСтроки(ТекущиеДанные);
		ПроверкаИПодборПродукцииЕГАИСКлиентСервер.ОбновитьВыводимоеПредставлениеПроверкиСодержимого(ЭтотОбъект, ТекущиеДанные);
		
		Если ПроверитьНеобходимостьПеремаркировкиПриИзмененииСтатусаПроверки Тогда
			
			ПриИзмененииМаркировкиСоставаУпаковкиНаСервере(ТекущиеДанные.ПолучитьИдентификатор(), Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМаркированнойПродукцииСтатусПроверкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоМаркированнойПродукции.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует") Тогда
		
		Если Не УстановкаСтатусаОтсутствуетВозможна(ТекущиеДанные) Тогда
			
			СтандартнаяОбработка = Ложь;
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыбранноеЗначение <> ТекущиеДанные.СтатусПроверки 
		И (ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует")
		Или ТекущиеДанные.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует")) Тогда
		
		ПроверитьНеобходимостьПеремаркировкиПриИзмененииСтатусаПроверки = Истина;
		
	КонецЕсли;
	
	Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует")
		И ТекущиеДанные.СтатусПроверки <> ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует") Тогда
		
		ДобавитьСтрокуВТаблицуИзменений(ТаблицаИзмененийАлкогольнойПродукции, ТекущиеДанные, -1);
		
	ИначеЕсли ВыбранноеЗначение <> ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует")
		И ТекущиеДанные.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует") Тогда

		ДобавитьСтрокуВТаблицуИзменений(ТаблицаИзмененийАлкогольнойПродукции, ТекущиеДанные, 1);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМаркированнойПродукцииПослеУдаления(Элемент)
	
	Если ИдентификаторРодителяУдаляемойСтроки <> - 1 Тогда
		
		СтрокаДляПересчета = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторРодителяУдаляемойСтроки);
		Если СтрокаДляПересчета <> Неопределено Тогда
			ПроверкаИПодборПродукцииЕГАИСКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(СтрокаДляПересчета, Ложь);
			ПроверкаИПодборПродукцииЕГАИСКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(СтрокаДляПересчета);
			ПриИзмененииМаркировкиСоставаУпаковкиНаСервере(ИдентификаторРодителяУдаляемойСтроки, Истина);
		КонецЕсли;
		
		ИдентификаторРодителяУдаляемойСтроки = - 1;
		
	КонецЕсли;
	
	Если ТребуетсяОбновитьИнформациюОНеобходимостиПеремаркировки
		Или ТаблицаИзмененийАлкогольнойПродукции.Количество() > 0 Тогда
		ПроверкаИПодборПродукцииЕГАИСКлиентСервер.ОтобразитьИнформациюОНеобходимостиПеремаркировки(ЭтотОбъект);
		ОбработатьТаблицуИзмененияАлкогольнойПродукции(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМаркированнойПродукцииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.ДеревоМаркированнойПродукцииПредставлениеСодержимоеУпаковки
		И НЕ ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ТекущиеДанные.ТипУпаковки)
		И ЗначениеЗаполнено(ТекущиеДанные.АлкогольнаяПродукция) Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.АлкогольнаяПродукция);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМаркированнойПродукцииПриАктивизацииСтроки(Элемент)
		
	ТекущиеДанные = Элементы.ДеревоМаркированнойПродукции.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеДоступностьюКонтекстныхКоманд();
	
	ПроверкаИПодборПродукцииЕГАИСКлиентСервер.ОбновитьВыводимоеПредставлениеПроверкиСодержимого(ЭтотОбъект, ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаНеМаркируемойПродукции

&НаКлиенте
Процедура ТаблицаНеМаркируемойПродукцииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если Поле = Элементы.ТаблицаНеМаркируемойПродукцииАлкогольнаяПродукция Тогда
		ПоказываемоеЗначение = ТекущиеДанные.АлкогольнаяПродукция;
	ИначеЕсли Поле = Элементы.ТаблицаНеМаркируемойПродукцииСправка2 Тогда
		ПоказываемоеЗначение = ТекущиеДанные.Справка2;
	Иначе
		ПоказываемоеЗначение = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПоказываемоеЗначение) Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ПоказываемоеЗначение);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыАлкогольнаяПродукцияКОпределениюСправок2

&НаКлиенте
Процедура АлкогольнаяПродукцияКОпределениюСправок2Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если Поле = Элементы.АлкогольнаяПродукцияКОпределениюСправок2Номенклатура Тогда
		ПоказываемоеЗначение = ТекущиеДанные.Номенклатура;
	ИначеЕсли Поле = Элементы.АлкогольнаяПродукцияКОпределениюСправок2АлкогольнаяПродукция Тогда
		ПоказываемоеЗначение = ТекущиеДанные.АлкогольнаяПродукция;
	ИначеЕсли Поле = Элементы.АлкогольнаяПродукцияКОпределениюСправок2Справка2 Тогда
		ПоказываемоеЗначение = ТекущиеДанные.Справка2;
	Иначе
		ПоказываемоеЗначение = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПоказываемоеЗначение) Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ПоказываемоеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АлкогольнаяПродукцияКОпределениюСправок2ПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.АлкогольнаяПродукцияКОпределениюСправок2.ТекущиеДанные;
	
	Если ТекущиеДанные.Маркируемая
		Или ТекущиеДанные.Количество > 0 Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Удалять можно только строки с немаркируемой алкогольной продукцией с нулевым количеством.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АлкогольнаяПродукцияКОпределениюСправок2ПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура АлкогольнаяПродукцияКОпределениюСправок2ПослеУдаления(Элемент)
	
	КоличествоСтрокПодобраннойАлкогольнойПродукции = АлкогольнаяПродукцияКОпределениюСправок2.ПолучитьЭлементы().Количество();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура АлкогольнаяПродукцияКОпределениюСправок2ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

#Область УстановкаСтатуса

&НаКлиенте
Процедура УстановитьСтатусПроверкиВНаличии(Команда)
	
	УстановитьСтатусДляВыделенныхСтрок(Элементы.ДеревоМаркированнойПродукции.ВыделенныеСтроки,
	                                  ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусПроверкиНеПроверялась(Команда)
	
	УстановитьСтатусДляВыделенныхСтрок(Элементы.ДеревоМаркированнойПродукции.ВыделенныеСтроки,
	                                  ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеПроверялась"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусПроверкиОтложена(Команда)
	
	УстановитьСтатусДляВыделенныхСтрок(Элементы.ДеревоМаркированнойПродукции.ВыделенныеСтроки,
	                                  ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отложена"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусПроверкиОтсутствует(Команда)
	
	УстановитьСтатусДляВыделенныхСтрок(Элементы.ДеревоМаркированнойПродукции.ВыделенныеСтроки,
	                                  ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует"));
	
КонецПроцедуры

#КонецОбласти

#Область ПереносРезультатовВДокументОснование

&НаКлиенте
Процедура СохранитьПромежуточныеРезультатыПроверки(Команда)
	
	ОчиститьСообщения();
	
	Если Модифицированность Тогда
		
		Если РезультатыПроверкиУспешноСохранены() Тогда
			Модифицированность = Ложь;
			Оповестить("ПредварительноеСохранениеРезультатовСканированияАлкогольнойПродукции", ПроверяемыйДокумент);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаЗавершена(Команда)
	
	ОчиститьСообщения();
	
	КоличествоНепроверенных = 0;
	КоличествоОтложенных    = 0;
	КоличествоВсего         = 0;
	
	КоличествоСтрокНеМаркированнойВсего       = 0;
	КоличествоСтрокНеМаркированнойОтсутствует = 0;
	
	Для Каждого СтрокаДерева Из ДеревоМаркированнойПродукции.ПолучитьЭлементы() Цикл
		
		КоличествоНепроверенных = КоличествоНепроверенных + СтрокаДерева.КоличествоПодчиненныхНеПроверялось;
		КоличествоОтложенных    = КоличествоОтложенных + СтрокаДерева.КоличествоПодчиненныхОтложено;
		КоличествоВсего         = КоличествоВсего + СтрокаДерева.КоличествоПодчиненныхВсего;
		
		Если СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаАлкогольнойПродукции.БутылкиБезКоробки") Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеПроверялась") Тогда
			
			КоличествоНепроверенных = КоличествоНепроверенных + 1;
			
		ИначеЕсли СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отложена") Тогда
			
			КоличествоОтложенных = 1;
			
		КонецЕсли;
		
		КоличествоВсего = КоличествоВсего + 1;
		
	КонецЦикла;
	
	Если РежимПодбораСуществующихУпаковок Тогда
		
		Для Каждого СтрокаПродукции Из АлкогольнаяПродукцияКОпределениюСправок2.ПолучитьЭлементы() Цикл
			
			Если СтрокаПродукции.Маркируемая Тогда
				Продолжить;
			КонецЕсли;
			
			КоличествоСтрокНеМаркированнойВсего = КоличествоСтрокНеМаркированнойВсего + СтрокаПродукции.Количество;
			КоличествоСтрокНеМаркированнойОтсутствует = КоличествоСтрокНеМаркированнойОтсутствует + СтрокаПродукции.Количество 
			                                            - СтрокаПродукции.КоличествоРаспределено;
		
		КонецЦикла;
		
	Иначе
		
		Для Каждого СтрокаНеМаркируемой Из ТаблицаНеМаркируемойПродукции Цикл
		
			КоличествоСтрокНеМаркированнойВсего = КоличествоСтрокНеМаркированнойВсего + СтрокаНеМаркируемой.КоличествоПоДокументу;
			КоличествоСтрокНеМаркированнойОтсутствует = КоличествоСтрокНеМаркированнойОтсутствует + СтрокаНеМаркируемой.КоличествоПоДокументу 
			                                            - СтрокаНеМаркируемой.КоличествоФактическое;
		
		КонецЦикла;
		
	КонецЕсли;
	
	Если КоличествоНепроверенных > 0
		Или КоличествоОтложенных > 0
		Или КоличествоСтрокНеМаркированнойОтсутствует > 0 Тогда
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("КоличествоНепроверенных",                   КоличествоНепроверенных);
		ПараметрыОткрытияФормы.Вставить("КоличествоОтложенных",                      КоличествоОтложенных);
		ПараметрыОткрытияФормы.Вставить("КоличествоВсего",                           КоличествоВсего);
		ПараметрыОткрытияФормы.Вставить("КоличествоСтрокНеМаркированнойВсего",       КоличествоСтрокНеМаркированнойВсего);
		ПараметрыОткрытияФормы.Вставить("КоличествоСтрокНеМаркированнойОтсутствует", КоличествоСтрокНеМаркированнойОтсутствует);
		
		ОписаниеОповещенияПослеОтветаНаВопрос = Новый ОписаниеОповещения("ОтветНаВопросПриЗавершенииПроверки", ЭтотОбъект);
		
		ОткрытьФорму("Обработка.ПроверкаИПодборАлкогольнойПродукцииЕГАИС.Форма.ВопросПередСохранениемРезультатовПроверки",
		             ПараметрыОткрытияФормы, ЭтотОбъект, УникальныйИдентификатор,,,
		             ОписаниеОповещенияПослеОтветаНаВопрос, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе

		ЗавершитьПроверку(Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСУпаковками

&НаКлиенте
Процедура ДобавитьМаркированнуюУпаковку(Команда)
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("АдресПредыдущихШтрихкодов", АдресПредыдущихШтрихкодов);
	
	ОповещениеПослеГенерацииШтрихкодаУпаковки = Новый ОписаниеОповещения("ПослеГенерацииШтрихкодаДляНовойУпаковки", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.ГенерацияШтрихкодовУпаковок.Форма.Форма", ПараметрыОткрытияФормы, ЭтотОбъект,,,,
	             ОповещениеПослеГенерацииШтрихкодаУпаковки, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура МаркироватьУпаковку(Команда)
	
	СтрокаСУпаковкойДляПеремаркировки = СтрокаСУпаковкойДляПеремаркировки();
	
	Если СтрокаСУпаковкойДляПеремаркировки = Неопределено Тогда
		
		ПоказатьПредупреждение( , НСтр("ru = 'Спозиционируйтесь на упаковке, которую хотите перемаркировать.'"));
		Возврат;
		
	КонецЕсли;
	
	ДанныеУпаковки = ДанныеУпаковкиДляПеремаркировки(СтрокаСУпаковкойДляПеремаркировки);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", СтрокаСУпаковкойДляПеремаркировки.ПолучитьИдентификатор());
	
	ОповещениеПослеПеремаркировкиУпаковки = Новый ОписаниеОповещения("ПослеПеремаркировкиУпаковки",
	                                                                 ЭтотОбъект, 
	                                                                 ДополнительныеПараметры);
	
	ОткрытьФорму("Обработка.ГенерацияШтрихкодовУпаковок.Форма.Форма", ДанныеУпаковки, ЭтотОбъект,,,,
	             ОповещениеПослеПеремаркировкиУпаковки, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура РазобратьУпаковку(Команда)

	ТекущиеДанные = Элементы.ДеревоМаркированнойПродукции.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	ИначеЕсли НЕ ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ТекущиеДанные.ТипУпаковки) Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущийРодитель = ТекущиеДанные.ПолучитьРодителя();
	
	Если ТекущийРодитель = Неопределено Тогда
		ТекущийРодитель = ДеревоМаркированнойПродукции;
	КонецЕсли;
	
	ПереместитьВложенныеУпаковкиПриРазборкеУпаковки(ТекущиеДанные.ПолучитьЭлементы());
	
	ТекущийРодитель.ПолучитьЭлементы().Удалить(ТекущиеДанные);
	
	СоответствиеШтрихкодовСтрокДерева = Новый Соответствие;
	ДополнитьСоответствиеШтрихкодовСтрокДереваДляКоллекции(
		ДеревоМаркированнойПродукции.ПолучитьЭлементы(),
		СоответствиеШтрихкодовСтрокДерева);
	
	ПроверкаИПодборПродукцииЕГАИСКлиент.ПересчитатьХешСуммыВсехУпаковок(ЭтотОбъект);
	ПроверкаИПодборПродукцииЕГАИСКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковок(ДеревоМаркированнойПродукции);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьКакПартионную(Команда)

	Если ТаблицаИзмененийАлкогольнойПродукции.Количество() > 0 Тогда
		ОбработатьТаблицуИзмененияАлкогольнойПродукции(ЭтотОбъект);
	КонецЕсли;
	
	ДобавитьКИзменениюПродукциюСМарками68Символов(Элементы.ДеревоМаркированнойПродукции.ВыделенныеСтроки, Истина);
	
	Если ТаблицаИзмененийАлкогольнойПродукции.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Маркируемая алкогольная продукция с марками старого образца в количестве %1 единиц будет учтена как партионная.'");
		ТекстВопроса = СтрШаблон(ТекстВопроса, ТаблицаИзмененийАлкогольнойПродукции.Количество());
		
		СписокКнопок = Новый СписокЗначений();
		СписокКнопок.Добавить(КодВозвратаДиалога.Да,  "Продолжить");
		СписокКнопок.Добавить(КодВозвратаДиалога.Нет, "Отказаться");
		
		ОповещениеПриОтвете = Новый ОписаниеОповещения("ПринятьМаркируемуюКакПартионнуюПриОтветеНаВопрос", ЭтотОбъект);
		ПоказатьВопрос(ОповещениеПриОтвете, ТекстВопроса, СписокКнопок);
	Иначе
		ТекстПредупреждения = НСтр("ru = 'Отсутствует маркируемая алкогольная продукция с марками старого образца, которую можно учесть как партионную.'");
		ПоказатьПредупреждение(, ТекстПредупреждения, 30);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)
	
	ОчиститьСообщения();
	
	ШтрихкодированиеИСКлиент.ПоказатьВводШтрихкода(
		Новый ОписаниеОповещения("РучнойВводШтрихкодаЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПроверкуЗаново(Команда)
	
	ОчиститьСообщения();

	ОписаниеОповещенияПослеОтвета = Новый ОписаниеОповещения("ПослеВопросаОНачалеПроверкиЗаново", ЭтотОбъект);
	
	Если РежимПодбораСуществующихУпаковок Тогда
		ТекстВопроса = НСтр("ru = 'Сохраненные промежуточные результаты проверки и подбора будут удалены. Продолжить?'");
	Иначе
		ТекстВопроса = НСтр("ru = 'Результаты проверки будут очищены. Продолжить?'");
	КонецЕсли;
	
	ПоказатьВопрос(ОписаниеОповещенияПослеОтвета, ТекстВопроса,РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискНечитаемойАкцизнойМарки(Команда)
	
	ОповещениеОЗакрытииПоискаНечитаемойАкцизнойМарки = Новый ОписаниеОповещения("ПоискНечитаемойАкцизнойМаркиПослеЗакрытия", ЭтотОбъект);
	
	ПараметрОткрытияФормы = Новый Структура();
	ПараметрОткрытияФормы.Вставить("СоответствиеШтрихкодов", Новый ФиксированноеСоответствие(СоответствиеШтрихкодовСтрокДерева));
	
	ОткрытьФорму("Обработка.ПроверкаИПодборАлкогольнойПродукцииЕГАИС.Форма.ПоискНесчитываемойАкцизнойМарки",
		ПараметрОткрытияФормы, ЭтотОбъект,,,,
		ОповещениеОЗакрытииПоискаНечитаемойАкцизнойМарки,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПроверенные(Команда)
	
	СкрытьПроверенные = Не СкрытьПроверенные;
	Элементы.ДеревоМаркированнойПродукцииСкрытьПроверенные.Пометка = СкрытьПроверенные;
	
	Если СкрытьПроверенные Тогда
		СкрытьПроверенныеСтрокиДерева(ЭтотОбъект);
	Иначе
		ПроверитьПризнакУстановкиОтбораВДереве(ЭтотОбъект);
	КонецЕсли;
	
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоСОшибками(Команда)
	
	ТолькоСОшибками = Не ТолькоСОшибками;
	Элементы.ДеревоМаркированнойПродукцииТолькоСОшибками.Пометка = ТолькоСОшибками;
	
	Если ТолькоСОшибками Тогда
		СкрытьСтрокиДереваБезОшибок(ЭтотОбъект);
	Иначе
		ПроверитьПризнакУстановкиОтбораВДереве(ЭтотОбъект);
	КонецЕсли;
	
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСД(Команда)
	
	ОчиститьСообщения();
	
	МенеджерОборудованияИСКлиент.НачатьЗагрузкуДанныеИзТСД(
		Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВТСД(Команда)
	
	ОчиститьСообщения();
	
	МенеджерОборудованияИСКлиент.НачатьВыгрузкуДанныеВТСД(
		Новый ОписаниеОповещения("ВыгрузитьВТСДЗавершение", ЭтотОбъект),
		УникальныйИдентификатор,
		Неопределено,
		СформироватьТаблицуВыгрузкиИзДерева());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзВнешнегоФайла(Команда)
	
	ИнтеграцияИСКлиент.ОткрытьФормуЗагрузкиКодовМаркировки(
		ЭтотОбъект,
		Истина,
		ИнтеграцияЕГАИСКлиент.ЗаголовокФормыЗагрузкиКодовМаркировки(ЭтотОбъект, Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФактическоеКоличество(Команда)
	
	ВыделенныеСтроки = Элементы.ТаблицаНеМаркируемойПродукции.ВыделенныеСтроки;
	
	Для каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		ДанныеСтроки = ТаблицаНеМаркируемойПродукции.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		Если ДанныеСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеСтроки.КоличествоФактическое = ДанныеСтроки.КоличествоПоДокументу;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКоличествоПодобрано(Команда)

	ВыделенныеСтроки = Элементы.АлкогольнаяПродукцияКОпределениюСправок2.ВыделенныеСтроки;
	
	Для каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = АлкогольнаяПродукцияКОпределениюСправок2.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		Если ДанныеСтроки = Неопределено 
			Или ДанныеСтроки.Маркируемая = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеСтроки.КоличествоРаспределено = ДанныеСтроки.Количество;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УточнитьДанныеЧастичногоВыбытия(Команда)
	
	ТекущиеДанные = Элементы.ДеревоМаркированнойПродукции.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено
		И ТекущиеДанные.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар")
		И ТекущиеДанные.ЧастичноеВыбытие Тогда
		ДанныеШтрихкода = Новый Структура;
		ДанныеШтрихкода.Вставить("Количество", 1);
		ДанныеШтрихкода.Вставить("Штрихкод",   ТекущиеДанные.Штрихкод);
		ШтрихкодированиеОбщегоНазначенияИСКлиент.ОбработатьДанныеШтрихкода(
			"ПоискПоШтрихкодуЗавершение", ЭтотОбъект, ДанныеШтрихкода, ПараметрыСканирования());
	Иначе
		ОчиститьСообщения();
		Если ТекущиеДанные = Неопределено Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Строка не выбрана.'"));
		Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Уточнение данных для выбранной строки недоступно.'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область ПодключаемыеПереопределяемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда) Экспорт
	СобытияФормЕГАИСКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда, Неопределено);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьПереопределяемуюКомандуНаСервере(Контекст, Результат) Экспорт
	СобытияФормЕГАИС.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Контекст, Неопределено, Результат);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПоискНечитаемойАкцизнойМарки

&НаКлиенте
Процедура ПоискНечитаемойАкцизнойМаркиПослеЗакрытия(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> Неопределено Тогда
		
		ДанныеШтрихкода = Новый Структура;
		ДанныеШтрихкода.Вставить("Штрихкод", Результат);
		ДанныеШтрихкода.Вставить("Количество", 1);
		
		ШтрихкодированиеОбщегоНазначенияИСКлиент.ОбработатьДанныеШтрихкода(
			"ПоискПоШтрихкодуЗавершение", ЭтотОбъект, ДанныеШтрихкода, ПараметрыСканирования());
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область УстановкаОтбора

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьПризнакУстановкиОтбораВДереве(Форма)
	
	Если Форма.КоличествоУпаковокКоторыеНеобходимоПеремаркировать = 0 Тогда
		Форма.УстановленОтборТребуетсяПеремаркировать = Ложь;
	КонецЕсли;
	
	Форма.УстановленОтбор = Форма.СкрытьПроверенные
		Или Форма.ТолькоСОшибками
		Или Форма.УстановленОтборТребуетсяПеремаркировать;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СкрытьПроверенныеСтрокиДерева(Форма)

	Если Форма.УстановленОтборТребуетсяПеремаркировать Тогда
		
		Форма.УстановленОтборТребуетсяПеремаркировать = Ложь;
		ПроверкаИПодборПродукцииЕГАИСКлиентСервер.ОтобразитьИнформациюОНеобходимостиПеремаркировки(Форма);
		
	КонецЕсли;
	
	Если Форма.ТолькоСОшибками Тогда
		
		Форма.ТолькоСОшибками = Ложь;
		Форма.Элементы.ДеревоМаркированнойПродукцииТолькоСОшибками.Пометка = Ложь;
		
	КонецЕсли;
	
	Если Форма.СкрытьПроверенные Тогда
		
		ТекущиеДанные = Форма.Элементы.ДеревоМаркированнойПродукции.ТекущиеДанные;
		СтрокиДерева  = Форма.ДеревоМаркированнойПродукции.ПолучитьЭлементы();
		
		Для Каждого СтрокаДерева Из СтрокиДерева Цикл
			
			СоответствуетОтбору = Ложь;
			СкрытьПроверенныеВСтрокеДерева(Форма, СтрокаДерева, СоответствуетОтбору);
			
		КонецЦикла;
		
		Если ТекущиеДанные = Неопределено
		 Или ТекущиеДанные.НеСоответствуетОтбору Тогда
			Для Каждого СтрокаДерева Из СтрокиДерева Цикл
				Если НЕ СтрокаДерева.НеСоответствуетОтбору Тогда
					Форма.Элементы.ДеревоМаркированнойПродукции.ТекущаяСтрока = СтрокаДерева.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	ПроверитьПризнакУстановкиОтбораВДереве(Форма);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СкрытьСтрокиДереваБезОшибок(Форма)

	Если Форма.УстановленОтборТребуетсяПеремаркировать Тогда
		
		Форма.УстановленОтборТребуетсяПеремаркировать = Ложь;
		ПроверкаИПодборПродукцииЕГАИСКлиентСервер.ОтобразитьИнформациюОНеобходимостиПеремаркировки(Форма);
		
	КонецЕсли;
	
	Если Форма.СкрытьПроверенные Тогда
		
		Форма.СкрытьПроверенные = Ложь;
		Форма.Элементы.ДеревоМаркированнойПродукцииСкрытьПроверенные.Пометка = Ложь;
		
	КонецЕсли;
	
	Если Форма.ТолькоСОшибками Тогда
		
		ТекущиеДанные = Форма.Элементы.ДеревоМаркированнойПродукции.ТекущиеДанные;
		СтрокиДерева  = Форма.ДеревоМаркированнойПродукции.ПолучитьЭлементы();
		
		Для Каждого СтрокаДерева Из СтрокиДерева Цикл
			
			СоответствуетОтбору = Ложь;
			СкрытьСтрокиБезОшибокВСтрокеДерева(Форма, СтрокаДерева, СоответствуетОтбору);
			
		КонецЦикла;
		
		Если ТекущиеДанные = Неопределено
		 Или ТекущиеДанные.НеСоответствуетОтбору Тогда
			Для Каждого СтрокаДерева Из СтрокиДерева Цикл
				Если НЕ СтрокаДерева.НеСоответствуетОтбору Тогда
					Форма.Элементы.ДеревоМаркированнойПродукции.ТекущаяСтрока = СтрокаДерева.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	ПроверитьПризнакУстановкиОтбораВДереве(Форма);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СкрытьПроверенныеВСтрокеДерева(Форма, СтрокаДерева, СоответствуетОтбору)
	
	ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();

	ТекущаяСтрокаСоответствуетОтбору = Ложь;
	
	Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
		
		СоответствуетОтбору = Ложь;
		
		СкрытьПроверенныеВСтрокеДерева(Форма, ПодчиненнаяСтрока, СоответствуетОтбору);
		
		Если СоответствуетОтбору Тогда
			ТекущаяСтрокаСоответствуетОтбору = Истина;
		КонецЕсли;
		
	КонецЦикла;

	Если Не ТекущаяСтрокаСоответствуетОтбору Тогда
		
		ТекущаяСтрокаСоответствуетОтбору = СтрокаДерева.СтатусПроверки <> ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии")
		                              И СтрокаДерева.СтатусПроверки <> ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась");
		
	КонецЕсли;
	
	СоответствуетОтбору = ТекущаяСтрокаСоответствуетОтбору;
	СтрокаДерева.НеСоответствуетОтбору = Не СоответствуетОтбору;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СкрытьСтрокиБезОшибокВСтрокеДерева(Форма, СтрокаДерева, СоответствуетОтбору)
	
	ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();

	ТекущаяСтрокаСоответствуетОтбору = Ложь;
	
	Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
		
		СоответствуетОтбору = Ложь;
		
		СкрытьСтрокиБезОшибокВСтрокеДерева(Форма, ПодчиненнаяСтрока, СоответствуетОтбору);
		
		Если СоответствуетОтбору Тогда
			ТекущаяСтрокаСоответствуетОтбору = Истина;
		КонецЕсли;
		
	КонецЦикла;

	Если Не ТекущаяСтрокаСоответствуетОтбору Тогда
		
		ТекущаяСтрокаСоответствуетОтбору = СтрокаДерева.ЕстьОшибкаПоПротоколуОбмена;
		
	КонецЕсли;
	
	СоответствуетОтбору = ТекущаяСтрокаСоответствуетОтбору;
	СтрокаДерева.НеСоответствуетОтбору = Не СоответствуетОтбору;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСоответствиеОтборуПриИзмененииСтроки(СтрокаДерева)
	
	Если Не СкрытьПроверенные Тогда
		Возврат;
	КонецЕсли;
	
	СоответствуетОтбору = Ложь;
	
	СкрытьПроверенныеВСтрокеДерева(ЭтотОбъект, СтрокаДерева, СоответствуетОтбору);
	СтрокаДерева.НеСоответствуетОтбору = Не СоответствуетОтбору;
	
	РодительскаяСтрока = СтрокаДерева.ПолучитьРодителя();
	Пока РодительскаяСтрока <> Неопределено Цикл
		
		Для Каждого ПодчиненнаяСтрока Из РодительскаяСтрока.ПолучитьЭлементы() Цикл
			
			РодительскаяСтрока.НеСоответствуетОтбору = Истина;
			Если Не ПодчиненнаяСтрока.НеСоответствуетОтбору Тогда
				РодительскаяСтрока.НеСоответствуетОтбору = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		РодительскаяСтрока = РодительскаяСтрока.ПолучитьРодителя();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ИзменениеСтатуса

&НаКлиенте
Процедура УстановитьСтатусДляВыделенныхСтрок(ВыделенныеСтроки, НовыйСтатус)
	
	КоличествоКОбработке = ВыделенныеСтроки.Количество();
	КоличествоОбработанныхСтрок = 0;
	МассивУпаковокСИзменившимсяСоставом = Новый Массив;
	
	Для Каждого ИдентификаторВыделеннойСтроки Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторВыделеннойСтроки);
		
		Если ДанныеСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеСтроки.СтатусПроверки = НовыйСтатус Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеСтроки.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаАлкогольнойПродукции.БутылкиБезКоробки") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеСтроки.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась") Тогда
			Продолжить;
		КонецЕсли;
		
		Если НовыйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует") Тогда
			
			Если Не УстановкаСтатусаОтсутствуетВозможна(ДанныеСтроки) Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеСтроки.СтатусПроверки = НовыйСтатус;
			УстановитьСтатусОтсутствуетДляПодчиненных(ДанныеСтроки);
			
			ДобавитьУпаковкуСтрокиВМассивИзмененныхУпаковок(ДанныеСтроки, МассивУпаковокСИзменившимсяСоставом);
			ДобавитьСтрокуВТаблицуИзменений(ТаблицаИзмененийАлкогольнойПродукции, ДанныеСтроки, -1);
			
		Иначе
			
			РодительскаяСтрока = ДанныеСтроки.ПолучитьРодителя();
			Если РодительскаяСтрока <> Неопределено 
				И РодительскаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует") Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если ДанныеСтроки.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует") Тогда
				
				ДобавитьУпаковкуСтрокиВМассивИзмененныхУпаковок(ДанныеСтроки, МассивУпаковокСИзменившимсяСоставом);
				ДобавитьСтрокуВТаблицуИзменений(ТаблицаИзмененийАлкогольнойПродукции, ДанныеСтроки, 1);
				
			КонецЕсли;
			
			ДанныеСтроки.СтатусПроверки = НовыйСтатус;
			
		КонецЕсли;
		
		ПроверкаИПодборПродукцииЕГАИСКлиентСервер.УстановитьИндексКартинкиСтатусаПроверки(ДанныеСтроки);
		ПроверкаИПодборПродукцииЕГАИСКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(ДанныеСтроки, ЗагрузкаДанныхТСД);
		КоличествоОбработанныхСтрок = КоличествоОбработанныхСтрок + 1;
		
	КонецЦикла;
	
	Если СкрытьПроверенные И КоличествоОбработанныхСтрок > 0 Тогда
		СкрытьПроверенныеСтрокиДерева(ЭтотОбъект);
	КонецЕсли;
	
	Если МассивУпаковокСИзменившимсяСоставом.Количество() > 0
		Или ТаблицаИзмененийАлкогольнойПродукции.Количество() > 0 Тогда
		ПриИзмененииМаркировкиСоставаУпаковкиМассиваСтрок(МассивУпаковокСИзменившимсяСоставом, Истина);
	КонецЕсли;
	
	ОповеститьПользователяОИзмененииСтатусаПроверки(НовыйСтатус, КоличествоОбработанныхСтрок, КоличествоКОбработке);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусОтсутствуетДляПодчиненных(СтрокаДерева)
	 
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		УстановитьСтатусОтсутствуетДляСтрокиДерева(ПодчиненнаяСтрока);
		
	КонецЦикла;
	
	ПроверкаИПодборПродукцииЕГАИСКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(СтрокаДерева, Ложь, ЗагрузкаДанныхТСД);
	ПроверкаИПодборПродукцииЕГАИСКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(СтрокаДерева, ЗагрузкаДанныхТСД);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусОтсутствуетДляСтрокиДерева(СтрокаДерева)
	
	Если СтрокаДерева.СтатусПроверки <> ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отложена") Тогда
		СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует");
		ДобавитьСтрокуВТаблицуИзменений(ТаблицаИзмененийАлкогольнойПродукции, СтрокаДерева, -1);
	КонецЕсли;
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		УстановитьСтатусОтсутствуетДляСтрокиДерева(ПодчиненнаяСтрока);
		
	КонецЦикла;
	
	ПроверкаИПодборПродукцииЕГАИСКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(СтрокаДерева, Ложь);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция УстановкаСтатусаОтсутствуетВозможна(ТекущиеДанные)
	
	Для Каждого ПодчиненнаяСтрока Из ТекущиеДанные.ПолучитьЭлементы() Цикл
		
		Если ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась") Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Если Не УстановкаСтатусаОтсутствуетВозможна(ПодчиненнаяСтрока) Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ОтметитьСтрокуКакНайденную(СтрокаДерева)

	Если СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии")
		Или СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась") Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии");
	СпозиционироватьсяНаСтрокеДерева(ЭтотОбъект, СтрокаДерева);
	
	ПроверкаИПодборПродукцииЕГАИСКлиентСервер.УстановитьИндексКартинкиСтатусаПроверки(СтрокаДерева);
	ПроверкаИПодборПродукцииЕГАИСКлиентСервер.УстановитьДоступностьУпаковкиДляПроверки(СтрокаДерева, ДоступныеДляПроверкиУпаковки);
	ПроверкаИПодборПродукцииЕГАИСКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(СтрокаДерева, ЗагрузкаДанныхТСД);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьСтрокуКакОтложенную(СтрокаДерева)

	Если СтрокаДерева.СтатусПроверки <> ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отложена") Тогда
		
		СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отложена");
		СтрокаДерева.НомерСтикераОтложено = СтрШаблон(НСтр("ru = 'под номером - %1'"), СледующийСтикерОтложено);
		СледующийСтикерОтложено = СледующийСтикерОтложено + 1;
		
		ПроверкаИПодборПродукцииЕГАИСКлиентСервер.УстановитьИндексКартинкиСтатусаПроверки(СтрокаДерева);
		ПроверкаИПодборПродукцииЕГАИСКлиентСервер.УстановитьДоступностьУпаковкиДляПроверки(СтрокаДерева, ДоступныеДляПроверкиУпаковки);
		ПроверкаИПодборПродукцииЕГАИСКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(СтрокаДерева, ЗагрузкаДанныхТСД);
		
	КонецЕсли;
	
	ПроверкаИПодборПродукцииЕГАИСКлиентСервер.УстановитьДоступностьУпаковкиДляПроверки(СтрокаДерева, ДоступныеДляПроверкиУпаковки);

КонецПроцедуры

&НаКлиенте
Процедура ОповеститьПользователяОИзмененииСтатусаПроверки(НовыйСтатус, КоличествоОбработанных, КоличествоВсего)

	ШаблонЗаголовкаОбработано   = НСтр("ru='Статус проверки ""%1"" установлен'");
	ШаблонСообщенияОбработано   = НСтр("ru='Для %1 из %2 выделенных в списке строк установлен статус проверки ""%3""'");
	ШаблонЗаголовкаНеОбработано = НСтр("ru='Статус проверки ""%1"" не установлен'");
	ШаблонСообщенияНеОбработано = НСтр("ru='Статус проверки ""%1"" не установлен ни для одной строки.'");
	
	Если КоличествоОбработанных > 0 Тогда
		
		ТекстЗаголовка = СтрШаблон(ШаблонЗаголовкаОбработано, НовыйСтатус);
		ТекстСообщения = СтрШаблон(ШаблонСообщенияОбработано,
		                           КоличествоОбработанных,
		                           КоличествоВсего,
		                           НовыйСтатус);
		
	Иначе
		
		ТекстЗаголовка = СтрШаблон(ШаблонЗаголовкаНеОбработано, НовыйСтатус);
		ТекстСообщения = СтрШаблон(ШаблонСообщенияНеОбработано, НовыйСтатус);
		
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32ГосИС);
	
КонецПроцедуры

#КонецОбласти

#Область ПересчетИтогов

&НаСервере
Процедура ПересчитатьВсеИтогиФормыНаСервере()
	
	ПроверкаИПодборПродукцииЕГАИС.ПересчитатьХешСуммыВсехУпаковок(ЭтотОбъект);
	
	ПересчитатьВсеИтогиФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьВсеИтогиФормыНаКлиенте()
	
	ПроверкаИПодборПродукцииЕГАИСКлиент.ПересчитатьХешСуммыВсехУпаковок(ЭтотОбъект);
	
	ПересчитатьВсеИтогиФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьВсеИтогиФормы(Форма)
	
	ПроверкаИПодборПродукцииЕГАИСКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковок(Форма.ДеревоМаркированнойПродукции);
	ПроверкаИПодборПродукцииЕГАИСКлиентСервер.ОпределитьТипыВсехУпаковок(Форма);
	
	Форма.КоличествоСтрокПодобраннойАлкогольнойПродукции = Форма.АлкогольнаяПродукцияКОпределениюСправок2.ПолучитьЭлементы().Количество();
	Форма.КоличествоСтрокНеМаркируемойПродукции          = Форма.ТаблицаНеМаркируемойПродукции.Количество();
	
	СформироватьПредставлениеНастроек(Форма);
	
	ШтрихкодированиеИСКлиентСервер.ОтобразитьСохраненныйВыборПоМаркируемойПродукции(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область Перемаркировка

&НаКлиенте
Процедура ПослеГенерацииШтрихкодаДляНовойУпаковки(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	ПроверитьКорректностьШтрихкодаПриДобавлении(Результат.Штрихкод, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	АдресПредыдущихШтрихкодов = Результат.АдресПредыдущихШтрихкодов;
	
	ДобавитьНовуюУпаковку(Результат.Штрихкод, Результат.ТипУпаковки);

КонецПроцедуры

&НаКлиенте
Процедура ПослеПеремаркировкиУпаковки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	ПроверитьКорректностьШтрихкодаПриДобавлении(Результат.Штрихкод, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	АдресПредыдущихШтрихкодов = Результат.АдресПредыдущихШтрихкодов;
	
	ПеремаркироватьУпаковку(Результат.Штрихкод, ДополнительныеПараметры.ИдентификаторСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКорректностьШтрихкодаПриДобавлении(Штрихкод, Отказ)

	Если ПустаяСтрока(Штрихкод) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Упаковке не может быть назначен пустой Штрихкод.'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ИдентификаторСтроки = СоответствиеШтрихкодовСтрокДерева.Получить(Штрихкод);
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Штрихкодом %1 уже промаркирована другая упаковка. Выполните маркировку упаковки другим штрихкодом.'"),
			ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ПредставлениеШтрихкода(Штрихкод));
		
		ПоказатьПредупреждение(,ТекстСообщения); 
		Отказ = Истина;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПеремаркироватьУпаковку(Штрихкод, ИдентификаторСтрокиУпаковки)
	
	СтрокаСУпаковкой = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторСтрокиУпаковки);
	
	Если СтрокаСУпаковкой = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаменитьШтрихкодВСпискахУпаковок(ЭтотОбъект, СтрокаСУпаковкой.Штрихкод, Штрихкод);
	СоответствиеШтрихкодовСтрокДерева.Удалить(СтрокаСУпаковкой.Штрихкод);
	СтрокаСУпаковкой.Штрихкод = Штрихкод;
	СоответствиеШтрихкодовСтрокДерева.Вставить(СтрокаСУпаковкой.Штрихкод, ИдентификаторСтрокиУпаковки);
	
	ПроверкаИПодборПродукцииЕГАИСКлиентСервер.СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(СтрокаСУпаковкой);
	
	ПриИзмененииМаркировкиСоставаУпаковкиНаСервере(ИдентификаторСтрокиУпаковки, Ложь);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаменитьШтрихкодВСпискахУпаковок(Форма, СтарыйШтрихкод, НовыйШтрихкод)

	ИзменитьЗначениеШтрихкодаВСписке(СтарыйШтрихкод, НовыйШтрихкод, Форма.ДобавленныеУпаковки);
	ИзменитьЗначениеШтрихкодаВСписке(СтарыйШтрихкод, НовыйШтрихкод, Форма.ДоступныеДляПроверкиУпаковки);
	ИзменитьЗначениеШтрихкодаВСписке(СтарыйШтрихкод, НовыйШтрихкод, Форма.УпаковкиДокумента);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьЗначениеШтрихкодаВСписке(СтарыйШтрихкод, НовыйШтрихкод, СписокШтрихкодов)
	
	НайденныйЭлемент = СписокШтрихкодов.НайтиПоЗначению(СтарыйШтрихкод);
	
	Если НайденныйЭлемент <> Неопределено Тогда
		
		СписокШтрихкодов.Удалить(НайденныйЭлемент);
		СписокШтрихкодов.Добавить(НовыйШтрихкод);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииМаркировкиСоставаУпаковкиНаСервере(ИдентификаторСтрокиУпаковки, ПроверятьТипУпаковки)

	Если ПроверятьНеобходимостьПеремаркировки Тогда
		ПроверитьНеобходимостьМаркировкиПриИзмененииСтроки(ИдентификаторСтрокиУпаковки);
	КонецЕсли;
	
	Если ПроверятьТипУпаковки Тогда
		ПроверкаИПодборПродукцииЕГАИСКлиентСервер.ОпределитьТипУпаковкиПриИзмененииСтроки(ЭтотОбъект, ИдентификаторСтрокиУпаковки);
	КонецЕсли;
	
	ОбработатьТаблицуИзмененияАлкогольнойПродукции(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииМаркировкиСоставаУпаковкиМассиваСтрок(МассивСтрок, ПроверятьТипУпаковки)

	Если ПроверятьНеобходимостьПеремаркировки Тогда
		Для Каждого СтрокаМассива Из МассивСтрок Цикл
			ПроверитьНеобходимостьМаркировкиПриИзмененииСтроки(СтрокаМассива);
		КонецЦикла
	КонецЕсли;
	
	Если ПроверятьТипУпаковки Тогда
		Для Каждого СтрокаМассива Из МассивСтрок Цикл
			ПроверкаИПодборПродукцииЕГАИСКлиентСервер.ОпределитьТипУпаковкиПриИзмененииСтроки(ЭтотОбъект, СтрокаМассива);
		КонецЦикла;
	КонецЕсли;

	ОбработатьТаблицуИзмененияАлкогольнойПродукции(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоТребующимПеремаркировки()
	
	Если СкрытьПроверенные Тогда
		СкрытьПроверенные = Ложь;
		Элементы.ДеревоМаркированнойПродукцииСкрытьПроверенные.Пометка = Ложь;
	КонецЕсли;
	
	СтрокиДерева = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
		
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		СоответствуетОтбору = Ложь;
		ПроверкаИПодборПродукцииЕГАИСКлиентСервер.УстановитьОтборТребуетсяПеремаркировкаВСтрокеДерева(СтрокаДерева, СоответствуетОтбору);
		
	КонецЦикла;
	
	ПроверитьПризнакУстановкиОтбораВДереве(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоТребующимПеремаркировкиВСтрокеДерева(Знач СтрокаДерева, СоответствуетОтбору)

	Если ТипЗнч(СтрокаДерева) = Тип("Число") Тогда
		СтрокаДерева = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, СтрокаДерева);
	КонецЕсли;
	
	ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();

	ТекущаяСтрокаСоответствуетОтбору = Ложь;
	
	Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
		
		СоответствуетОтбору = Ложь;
		
		УстановитьОтборПоТребующимПеремаркировкиВСтрокеДерева(ПодчиненнаяСтрока, СоответствуетОтбору);
		
		Если СоответствуетОтбору Тогда
			ТекущаяСтрокаСоответствуетОтбору = Истина;
		КонецЕсли;
		
	КонецЦикла;

	Если Не ТекущаяСтрокаСоответствуетОтбору Тогда
		
		ТекущаяСтрокаСоответствуетОтбору = СтрокаДерева.ТребуетсяПеремаркировка;
		
	КонецЕсли;
	
	СоответствуетОтбору = ТекущаяСтрокаСоответствуетОтбору;
	СтрокаДерева.НеСоответствуетОтбору = Не СоответствуетОтбору;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНеобходимостьМаркировкиПриИзмененииСтроки(ИдентификаторИзмененнойСтроки)

	ИзмененнаяСтрока = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторИзмененнойСтроки);
	
	Если ИзмененнаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаХешСумм = ПроверкаИПодборПродукцииИС.ПустаяТаблицаХешСумм();
	
	Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ИзмененнаяСтрока.ТипУпаковки) Тогда
		
		ПроверкаИПодборПродукцииИС.РассчитатьХешСуммыУпаковки(ИзмененнаяСтрока, ТаблицаХешСумм, Ложь);
		
	КонецЕсли;
	
	РодительИзмененнойСтроки = ИзмененнаяСтрока.ПолучитьРодителя();
	
	Пока РодительИзмененнойСтроки <> Неопределено 
		И ИнтеграцияИСКлиентСервер.ЭтоУпаковка(РодительИзмененнойСтроки.ТипУпаковки) Цикл
		
		ПроверкаИПодборПродукцииИС.РассчитатьХешСуммыУпаковки(РодительИзмененнойСтроки, ТаблицаХешСумм, Ложь);
		РодительИзмененнойСтроки = РодительИзмененнойСтроки.ПолучитьРодителя();
		
	КонецЦикла;
	
	ТаблицаПеремаркировки = ПроверкаИПодборПродукцииИС.ТаблицаПеремаркировки(ТаблицаХешСумм);
	
	ПроверкаИПодборПродукцииЕГАИСКлиентСервер.ПроверитьНеобходимостьПеремаркировки(ЭтотОбъект, ТаблицаПеремаркировки, Истина);
	
КонецПроцедуры

&НаКлиенте
Функция СтрокаСУпаковкойДляПеремаркировки()
	
	ТекущиеДанные = Элементы.ДеревоМаркированнойПродукции.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'Спозиционируйтесь на упаковке, которую хотите перемаркировать.'"));
		Возврат Неопределено;
	КонецЕсли;
	
	Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ТекущиеДанные.ТипУпаковки) Тогда
		
		Возврат ТекущиеДанные;
		
	Иначе
		
		РодительскаяСтрока = ТекущиеДанные.ПолучитьРодителя();
		Если РодительскаяСтрока = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(РодительскаяСтрока.ТипУпаковки) Тогда
			
			Возврат РодительскаяСтрока;
			
		Иначе
			
			Возврат Неопределено;
			
		КонецЕсли
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ДанныеУпаковкиДляПеремаркировки(СтрокаДерева)
	
	ДанныеДляПеремаркировки = Новый Структура;
	ДанныеДляПеремаркировки.Вставить("ТипУпаковки",               СтрокаДерева.ТипУпаковки);
	ДанныеДляПеремаркировки.Вставить("Штрихкод",                  СтрокаДерева.Штрихкод);
	ДанныеДляПеремаркировки.Вставить("АдресПредыдущихШтрихкодов", АдресПредыдущихШтрихкодов);
	
	ДанныеДляПеремаркировки.Вставить("КоличествоВложенныхЕдиниц", 0);
	ДанныеДляПеремаркировки.Вставить("Характеристика",            ПолучитьПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры"));
	ДанныеДляПеремаркировки.Вставить("Номенклатура",              ПолучитьПустоеЗначениеОпределяемогоТипа("Номенклатура"));
	
	Если СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МонотоварнаяУпаковка") Тогда
		
		НоменклатураОпределена = Ложь;
		
		Если ЗначениеЗаполнено(СтрокаДерева.Справка2) Тогда
			
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("Справка2", СтрокаДерева.Справка2);
			
			НайденныеСтроки = Справки2СопоставленнаяНоменклатура.НайтиСтроки(ПараметрыПоиска);
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				ДанныеДляПеремаркировки.Номенклатура   = НайденныеСтроки[0].Номенклатура;
				ДанныеДляПеремаркировки.Характеристика = НайденныеСтроки[0].Характеристика;
				
				НоменклатураОпределена = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НоменклатураОпределена Тогда
			
			Для Каждого СтрокаСодержимого Из СтрокаДерева.ПолучитьЭлементы() Цикл
				
				Если СтрокаСодержимого.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
					
					ДанныеДляПеремаркировки.КоличествоВложенныхЕдиниц = ДанныеДляПеремаркировки.КоличествоВложенныхЕдиниц + 1;
					
				КонецЕсли;
				
			КонецЦикла
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеДляПеремаркировки;
	
КонецФункции

&НаКлиенте
Процедура ОпределитьКоличествоТребующихПеремаркировкиДляКоллекции(СтрокиДерева, КоличествоТребующихПеремаркировки)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если СтрокаДерева.ТребуетсяПеремаркировка Тогда
			КоличествоТребующихПеремаркировки = КоличествоТребующихПеремаркировки + 1;
		КонецЕсли;
		
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки) Тогда 
			ОпределитьКоличествоТребующихПеремаркировкиДляКоллекции(СтрокаДерева.ПолучитьЭлементы(), КоличествоТребующихПеремаркировки);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьУпаковкуСтрокиВМассивИзмененныхУпаковок(СтрокаДерева, МассивУпаковокСИзменившимсяСоставом)
	
	СтрокаРодитель = СтрокаДерева.ПолучитьРодителя();

	Если СтрокаРодитель <> Неопределено
		И ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаРодитель.ТипУпаковки) Тогда
		
		ИденитификаторСтрокиРодителя = СтрокаРодитель.ПолучитьИдентификатор();
		
		Если МассивУпаковокСИзменившимсяСоставом.Найти(ИденитификаторСтрокиРодителя) = Неопределено Тогда
			
			МассивУпаковокСИзменившимсяСоставом.Добавить(ИденитификаторСтрокиРодителя);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПустоеЗначениеОпределяемогоТипа(ИмяТипа)
	
	Возврат ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа(ИмяТипа);
	
КонецФункции

#КонецОбласти

#Область НачальноеЗаполнение

&НаСервереБезКонтекста
Функция СоответствиеШтрихкодовСтрокДерева(АдресСоответствиеШтрихкодыИдентификаторыСтрок)
	
	Если ЭтоАдресВременногоХранилища(АдресСоответствиеШтрихкодыИдентификаторыСтрок) Тогда
		Возврат ПолучитьИзВременногоХранилища(АдресСоответствиеШтрихкодыИдентификаторыСтрок);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОбработатьИПроверитьПереданныеПараметры(Отказ)
	
	ОрганизацияЕГАИС = Параметры.ОрганизацияЕГАИС;
	
	Если Не ЗначениеЗаполнено(ОрганизацияЕГАИС)
		И Параметры.БезУчетаОрганизацииЕГАИС = Ложь Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не указана организация ЕГАИС.'"),,,,Отказ);
	КонецЕсли;
	
	ПроверкаНеПоДокументу = Параметры.ПроверкаНеПоДокументу;
	ПроверяемыйДокумент   = Параметры.ПроверяемыйДокумент;
	
	Если Не ПроверкаНеПоДокументу И Не ЗначениеЗаполнено(ПроверяемыйДокумент) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не указан документ для проверки.'"),,,,Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	АдресДанныхПроверяемойАлкогольнойПродукции             = Параметры.АдресДанныхПроверяемойАлкогольнойПродукции;
	ПостфиксСохранения                                     = Параметры.ПостфиксСохранения;
	РежимПодбораСуществующихУпаковок                       = Параметры.РежимПодбораСуществующихУпаковок;
	РедактированиеФормыНедоступно                          = Параметры.РедактированиеФормыНедоступно;
	РежимПросмотра                                         = Параметры.РежимПросмотра;
	КонтролироватьСканируемуюПродукциюПоДокументуОснованию = Параметры.КонтролироватьСканируемуюПродукциюПоДокументуОснованию;
	ПриЗавершенииСохранятьРезультатыПроверки               = Параметры.ПриЗавершенииСохранятьРезультатыПроверки;
	ПроверятьНеобходимостьПеремаркировки                   = Параметры.ПроверятьНеобходимостьПеремаркировки;
	НачальныйСтатусПроверки                                = ?(ЗначениеЗаполнено(Параметры.НачальныйСтатусПроверки),
	                                                           Параметры.НачальныйСтатусПроверки, 
	                                                           Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеПроверялась);
	СообщениеПротоколаОбмена                               = Параметры.СообщениеПротоколаОбмена;
	
	ЧастичноеВыбытиеДоступно = Параметры.ЧастичноеВыбытиеДоступно
		Или Не ПроверкаНеПоДокументу И ШтрихкодированиеОбщегоНазначенияИС.ТребуетсяЧастичноеВыбытие(
		ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(ПроверяемыйДокумент));
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеРезультатыПроверки()
	
	Если ЭтоАдресВременногоХранилища(Параметры.АдресПредварительноСохраненныхРезультатовПроверки) Тогда
		ДанныеПроверки = ПолучитьИзВременногоХранилища(Параметры.АдресПредварительноСохраненныхРезультатовПроверки);
	Иначе
		ДанныеПроверки = Неопределено;
	КонецЕсли;

	Если ТипЗнч(ДанныеПроверки) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ВостановленыРезультатыПроверки = Истина;
	
	ПреобразоватьСохраненныеРезультатыПриНеобходимости(ДанныеПроверки);
	
	ВывестиДанныеПроверкиИПодбораНаФорму(ДанныеПроверки);
	
КонецПроцедуры

&НаСервере
Процедура ПреобразоватьСохраненныеРезультатыПриНеобходимости(ДанныеПроверки)
	
	КолонкиДереваПродукции = ДанныеПроверки.ДеревоМаркированнойПродукции.Колонки;
	КолонкиДереваСправок2  = ДанныеПроверки.АлкогольнаяПродукцияКОпределениюСправок2.Колонки;
	
	КолонкаЗначениеШтрихкода         = КолонкиДереваПродукции.Найти("ЗначениеШтрихкода");
	КолонкаШтрихкод                  = КолонкиДереваПродукции.Найти("Штрихкод");
	КолонкаШтрихкодПоДаннымДокумента = КолонкиДереваПродукции.Найти("ШтрихкодУпаковкиПоДаннымДокумента");
	КолонкаЕстьОшибкиПоПротоколу     = КолонкиДереваПродукции.Найти("ЕстьОшибкаПоПротоколуОбмена");
	КолонкаЧастичноеВыбытие          = КолонкиДереваПродукции.Найти("ЧастичноеВыбытие");
	КолонкаКоэффициент               = КолонкиДереваПродукции.Найти("Коэффициент");
	
	Если КолонкаШтрихкод = Неопределено И КолонкаЗначениеШтрихкода <> Неопределено Тогда
		КолонкаЗначениеШтрихкода.Имя = "Штрихкод";
	КонецЕсли;
	
	КолонкаДлинаАкцизнойМарки        = КолонкиДереваПродукции.Найти("ДлинаАкцизнойМарки");
	КолонкаВУпаковкеРазныеДлиныМарок = КолонкиДереваПродукции.Найти("ВУпаковкеРазныеДлиныМарок");
	
	Если КолонкаДлинаАкцизнойМарки = Неопределено Тогда
		КолонкиДереваПродукции.Добавить("ДлинаАкцизнойМарки", Новый ОписаниеТипов("Число"));
	КонецЕсли;
	
	Если КолонкаВУпаковкеРазныеДлиныМарок = Неопределено Тогда
		КолонкиДереваПродукции.Добавить("ВУпаковкеРазныеДлиныМарок", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Если КолонкаШтрихкодПоДаннымДокумента <> Неопределено Тогда
		КолонкиДереваПродукции.Удалить("ШтрихкодУпаковкиПоДаннымДокумента");
	КонецЕсли;
	
	Если КолонкаЕстьОшибкиПоПротоколу = Неопределено Тогда
		КолонкиДереваПродукции.Добавить("ЕстьОшибкаПоПротоколуОбмена", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Если КолонкаЧастичноеВыбытие = Неопределено Тогда
		КолонкиДереваПродукции.Добавить("ЧастичноеВыбытие",               Новый ОписаниеТипов("Булево"));
		КолонкиДереваПродукции.Добавить("ЧастичноеВыбытиеКоличество",     ОбщегоНазначения.ОписаниеТипаЧисло(18, 8));
		КолонкиДереваПродукции.Добавить("ЧастичноеВыбытиеВариантУчета",   Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыУчетаЧастичногоВыбытияИС"));
		КолонкиДереваПродукции.Добавить("ЧастичноеВыбытиеНоменклатура",   Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
		КолонкиДереваПродукции.Добавить("ЧастичноеВыбытиеХарактеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
		КолонкиДереваПродукции.Добавить("ВыбытиеБутылки",                 Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Если КолонкаКоэффициент = Неопределено Тогда
		КолонкиДереваПродукции.Добавить("Коэффициент", ОбщегоНазначения.ОписаниеТипаЧисло(18, 8));
	КонецЕсли;
	
	Если КолонкиДереваСправок2.Найти("КоличествоАкцизныхМарок") = Неопределено Тогда
		КолонкиДереваСправок2.Добавить("КоличествоАкцизныхМарок",   ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
		КолонкиДереваСправок2.Добавить("НеупакованнаяПродукция",    Новый ОписаниеТипов("Булево"));
		КолонкиДереваСправок2.Добавить("ДоступноДробноеКоличество", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Если ДанныеПроверки.Свойство("ДетализацияСтруктурыХранения") Тогда
		ДанныеПроверки.ДетализацияСтруктурыХранения = Обработки.ПроверкаИПодборАлкогольнойПродукцииЕГАИС.ДетализацияСтруктурыХраненияИС(
			ДанныеПроверки.ДетализацияСтруктурыХранения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДанныеПроверкиИПодбораНаФорму(ДанныеПроверки)
	
	Если ДанныеПроверки.Свойство("ДеревоМаркированнойПродукции") Тогда
		
		ДеревоМаркированнойПродукцииОбъект = ДанныеПроверки.ДеревоМаркированнойПродукции;
		
		ДобавитьИЗаполнитьКолонкуВидУпаковкиПриВосстановленииДерева(ДеревоМаркированнойПродукцииОбъект);
		
		Попытка
			ЗначениеВРеквизитФормы(ДеревоМаркированнойПродукцииОбъект, "ДеревоМаркированнойПродукции");
		Исключение
			ПроверкаИПодборПродукцииИС.ПроверитьКолонкиИсточникаИПриемникаНаСовместимость(
				ДеревоМаркированнойПродукцииОбъект, РеквизитФормыВЗначение("ДеревоМаркированнойПродукции"));
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
	Если ДанныеПроверки.Свойство("АлкогольнаяПродукцияКОпределениюСправок2") Тогда
		
		АлкогольнаяПродукцияКОпределениюСправок2Объект = ДанныеПроверки.АлкогольнаяПродукцияКОпределениюСправок2;
		
		Попытка
			ЗначениеВРеквизитФормы(АлкогольнаяПродукцияКОпределениюСправок2Объект, "АлкогольнаяПродукцияКОпределениюСправок2");
		Исключение
			ПроверкаИПодборПродукцииИС.ПроверитьКолонкиИсточникаИПриемникаНаСовместимость(
				АлкогольнаяПродукцияКОпределениюСправок2Объект, РеквизитФормыВЗначение("АлкогольнаяПродукцияКОпределениюСправок2"));
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
	СоответствиеШтрихкодовСтрокДерева = Новый Соответствие;
	ДополнитьСоответствиеШтрихкодовСтрокДереваДляКоллекции(ДеревоМаркированнойПродукции.ПолучитьЭлементы(), СоответствиеШтрихкодовСтрокДерева);
	
	Если ДанныеПроверки.Свойство("ПулНеизвестныхАкцизныхМарок") Тогда
		ПулНеизвестныхАкцизныхМарок.Загрузить(ДанныеПроверки.ПулНеизвестныхАкцизныхМарок);
	КонецЕсли;
	
	Если ДанныеПроверки.Свойство("ТаблицаНеМаркируемойПродукции") Тогда
		ТаблицаНеМаркируемойПродукции.Загрузить(ДанныеПроверки.ТаблицаНеМаркируемойПродукции);
	КонецЕсли;
	
	Если ДанныеПроверки.Свойство("ТаблицаШтрихкодовНеМаркируемойПродукции") Тогда
		ТаблицаШтрихкодовНеМаркируемойПродукции.Загрузить(ДанныеПроверки.ТаблицаШтрихкодовНеМаркируемойПродукции);
	КонецЕсли;
	
	Если ДанныеПроверки.Свойство("Справки2СопоставленнаяНоменклатура") Тогда
		Справки2СопоставленнаяНоменклатура.Загрузить(ДанныеПроверки.Справки2СопоставленнаяНоменклатура);
	КонецЕсли;
	
	Если ДанныеПроверки.Свойство("УпаковкиДокумента") Тогда
		УпаковкиДокумента = ДанныеПроверки.УпаковкиДокумента;
	КонецЕсли;
	
	Если ДанныеПроверки.Свойство("ДобавленныеУпаковки") Тогда
		ДобавленныеУпаковки = ДанныеПроверки.ДобавленныеУпаковки;
	КонецЕсли;
	
	Если ДанныеПроверки.Свойство("ДоступныеДляПроверкиУпаковки") Тогда
		ДоступныеДляПроверкиУпаковки = ДанныеПроверки.ДоступныеДляПроверкиУпаковки;
	КонецЕсли;
	
	Если ДанныеПроверки.Свойство("СледующийСтикерОтложено") Тогда
		СледующийСтикерОтложено = ДанныеПроверки.СледующийСтикерОтложено;
	КонецЕсли;
	
	Если ДанныеПроверки.Свойство("ДетализацияСтруктурыХранения") Тогда
		ДетализацияСтруктурыХранения = ДанныеПроверки.ДетализацияСтруктурыХранения;
	ИначеЕсли ДанныеПроверки.Свойство("ДеревоМаркированнойПродукции") Тогда
		ДетализацияСтруктурыХранения = ДетализацияСтруктурыХраненияДерева(ДанныеПроверки.ДеревоМаркированнойПродукции);
	Иначе
		ДетализацияСтруктурыХранения = СохраненнаяДетализацияСтруктурыХранения();
	КонецЕсли;
	
	Если ДанныеПроверки.Свойство("РежимПроверки") Тогда
		РежимПроверки = ДанныеПроверки.РежимПроверки;
	КонецЕсли;
	
	Если ДанныеПроверки.Свойство("СохраненВыборПоМаркируемойПродукции") Тогда
		СохраненВыборПоМаркируемойПродукции = ДанныеПроверки.СохраненВыборПоМаркируемойПродукции;
	КонецЕсли;
	
	Если ДанныеПроверки.Свойство("ДанныеВыбораПоМаркируемойПродукции") Тогда
		ДанныеВыбораПоМаркируемойПродукции = ДанныеПроверки.ДанныеВыбораПоМаркируемойПродукции;
	КонецЕсли;
	
	Если ДанныеПроверки.Свойство("ШтрихкодТекущейПроверяемойУпаковки") Тогда
		ШтрихкодТекущейПроверяемойУпаковки = ДанныеПроверки.ШтрихкодТекущейПроверяемойУпаковки;
		Если ЗначениеЗаполнено(ШтрихкодТекущейПроверяемойУпаковки) Тогда
			ИдентификаторТекущейПроверяемойУпаковки = СоответствиеШтрихкодовСтрокДерева.Получить(ШтрихкодТекущейПроверяемойУпаковки);
			Если ИдентификаторТекущейПроверяемойУпаковки <> Неопределено Тогда
				Элементы.ДеревоМаркированнойПродукции.ТекущаяСтрока = ИдентификаторТекущейПроверяемойУпаковки;
				ДанныеТекущейСтроки = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторТекущейПроверяемойУпаковки);
				ПроверкаИПодборПродукцииЕГАИСКлиентСервер.ОбновитьВыводимоеПредставлениеПроверкиСодержимого(ЭтотОбъект, ДанныеТекущейСтроки);
			Иначе
				ИдентификаторТекущейПроверяемойУпаковки = -1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеПроверки.Свойство("ДанныеРанееСгенерированныхШтрихкодов") Тогда
		ДанныеРанееСгенерированныхШтрихкодов = ДанныеПроверки.ДанныеРанееСгенерированныхШтрихкодов;
		Если ДанныеРанееСгенерированныхШтрихкодов <> Неопределено Тогда
			Если ПустаяСтрока(АдресПредыдущихШтрихкодов) Тогда
				АдресПредыдущихШтрихкодов = ПоместитьВоВременноеХранилище(ДанныеРанееСгенерированныхШтрихкодов, УникальныйИдентификатор);
			Иначе
				АдресПредыдущихШтрихкодов = ПоместитьВоВременноеХранилище(ДанныеРанееСгенерированныхШтрихкодов, АдресПредыдущихШтрихкодов);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаДереваМаркированнойПродукции Из ДеревоМаркированнойПродукции.ПолучитьЭлементы() Цикл
		Если СтрокаДереваМаркированнойПродукции.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаАлкогольнойПродукции.БутылкиБезКоробки Тогда
			ИдентификаторСтрокиБутылкиБезУпаковки = СтрокаДереваМаркированнойПродукции.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПустаяСтрока(АдресСоответствиеШтрихкодыИдентификаторыСтрок) Тогда
		АдресСоответствиеШтрихкодыИдентификаторыСтрок = ПоместитьВоВременноеХранилище(
			СоответствиеШтрихкодовСтрокДерева,
			УникальныйИдентификатор);
	Иначе
		АдресСоответствиеШтрихкодыИдентификаторыСтрок = ПоместитьВоВременноеХранилище(
			СоответствиеШтрихкодовСтрокДерева,
			АдресСоответствиеШтрихкодыИдентификаторыСтрок);
	КонецЕсли;
	
	Если ДанныеПроверки.Свойство("СообщениеПротоколаОбмена") Тогда
		СообщениеПротоколаОбмена = ДанныеПроверки.СообщениеПротоколаОбмена;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьИЗаполнитьКолонкуВидУпаковкиПриВосстановленииДерева(ДеревоМаркированнойПродукцииОбъект)
	
	// Выполняем адаптацию старого формата
	
	ИмяКолонкиВидУпаковки = "ВидУпаковки";
	Если ДеревоМаркированнойПродукцииОбъект.Колонки.Найти(ИмяКолонкиВидУпаковки) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоМаркированнойПродукцииОбъект.Колонки.Добавить(ИмяКолонкиВидУпаковки, Новый ОписаниеТипов("ПеречислениеСсылка.ВидыУпаковокИС"));
	
	ЗаполнениеКолонкиВидУпаковкиПриВосстановленииДерева(ДеревоМаркированнойПродукцииОбъект.Строки);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеКолонкиВидУпаковкиПриВосстановленииДерева(КоллекцияСтрок)
	
	Для Каждого СтрокаДерева Из КоллекцияСтрок Цикл
		
		Если СтрокаДерева.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаАлкогольнойПродукции.БутылкиБезКоробки
			Или СтрокаДерева.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаАлкогольнойПродукции.ЗонаПереупаковки Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки) Тогда
			СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая;
		Иначе
			СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская;
		КонецЕсли;
		
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ЗаполнениеКолонкиВидУпаковкиПриВосстановленииДерева(СтрокаДерева.Строки);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДополнитьСоответствиеШтрихкодовСтрокДереваДляКоллекции(КоллекцияСтрок, СоответствиеШтрихкодовСтрокДерева)
	
	Для Каждого СтрокаДерева Из КоллекцияСтрок Цикл
		
		Если Не СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаАлкогольнойПродукции.БутылкиБезКоробки") Тогда
			СоответствиеШтрихкодовСтрокДерева.Вставить(СтрокаДерева.Штрихкод, СтрокаДерева.ПолучитьИдентификатор());
		КонецЕсли;
			
		ДополнитьСоответствиеШтрихкодовСтрокДереваДляКоллекции(СтрокаДерева.ПолучитьЭлементы(), СоответствиеШтрихкодовСтрокДерева);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимПросмотра()
	
	Если РедактированиеФормыНедоступно Тогда
		РежимПросмотра = Истина;
	ИначеЕсли НЕ ПроверкаНеПоДокументу Тогда
		РежимПросмотра = НЕ ПравоДоступа("Изменение", ПроверяемыйДокумент.Метаданные());
	КонецЕсли;
	
	Если РежимПросмотра Тогда
		ПроверятьНеобходимостьПеремаркировки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеДокумента()
	
	ДлительнаяОперация = НачатьЗагрузкуДанныхДокумента();

	Если ДлительнаяОперация <> Неопределено Тогда
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Получение структуры упаковок алкогольной продукции.'");
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗагрузкаДанныхДокументаЗавершение", ЭтотОбъект);
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
		
	Иначе
		
		Если ДетализацияСтруктурыХранения <> ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковки") Тогда
			ДобавленнаяСтрокаБутылкиБезКоробки();
		КонецЕсли;
		
		Результат = Новый Структура;
		Результат.Вставить("Статус",          "Выполнено");
		Результат.Вставить("АдресРезультата", "");
		
		ЗагрузкаДанныхДокументаЗавершение(Результат, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НачатьЗагрузкуДанныхДокумента()
	
	Если ЭтоАдресВременногоХранилища(АдресДанныхПроверяемойАлкогольнойПродукции) Тогда
		ПроверяемыеДанные = ПолучитьИзВременногоХранилища(АдресДанныхПроверяемойАлкогольнойПродукции);
	Иначе
		ПроверяемыеДанные = Неопределено;
	КонецЕсли;
	
	ВыполнитьДлительнуюОперацию = Истина;
	
	Если ПроверкаНеПоДокументу Тогда
		
		Если ПроверяемыеДанные = Неопределено Тогда
			ВыполнитьДлительнуюОперацию = Ложь;
		ИначеЕсли ПроверяемыеДанные.ДеревоУпаковок.Строки.Количество() = 0
			И ПроверяемыеДанные.ТаблицаАлкогольнойПродукцииКОпределениюСправок2.Количество() = 0 Тогда
			ВыполнитьДлительнуюОперацию = Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ПроверяемыйДокумент) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
		
		ДанныеПроверяемогоДокумента = Документы.ТТНВходящаяЕГАИС.ВходящееДеревоУпаковок(ПроверяемыйДокумент);
		
		Если ДанныеПроверяемогоДокумента.ДеревоУпаковок.Строки.Количество() = 0
			И ДанныеПроверяемогоДокумента.ТоварыБезАкцизныхМарок.Количество() = 0 Тогда
			ВыполнитьДлительнуюОперацию = Ложь;
		КонецЕсли;
		
	Иначе
		
		Если ТипЗнч(ПроверяемыйДокумент) = Тип("ДокументСсылка.АктПостановкиНаБалансЕГАИС")
		 Или ТипЗнч(ПроверяемыйДокумент) = Тип("ДокументСсылка.АктСписанияЕГАИС")
		 Или ТипЗнч(ПроверяемыйДокумент) = Тип("ДокументСсылка.ЧекЕГАИС")
		 Или ТипЗнч(ПроверяемыйДокумент) = Тип("ДокументСсылка.ЧекЕГАИСВозврат")
		 Или (ТипЗнч(ПроверяемыйДокумент) = Тип("ДокументСсылка.ТТНИсходящаяЕГАИС") И РежимПодбораСуществующихУпаковок) Тогда
			
			МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ПроверяемыйДокумент);
			ТаблицаКОпределениюСправок2 = МенеджерДокумента.ТаблицаАлкогольнойПродукцииКОпределениюСправок2(ПроверяемыйДокумент);
			
			Если ТаблицаКОпределениюСправок2.Количество() = 0 Тогда
				ВыполнитьДлительнуюОперацию = Ложь;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ПроверяемыйДокумент) = Тип("ДокументСсылка.ТТНИсходящаяЕГАИС") Тогда
			
			ТаблицаКОпределениюСправок2 = Документы.ТТНИсходящаяЕГАИС.ТаблицаАлкогольнойПродукцииКОпределениюСправок2(ПроверяемыйДокумент);
			Если ТипЗнч(ПроверяемыеДанные) = Тип("Структура") Тогда
				Если ПроверяемыеДанные.ДеревоУпаковок.Строки.Количество() = 0
					И ПроверяемыеДанные.ТаблицаАлкогольнойПродукцииКОпределениюСправок2.Количество() = 0 Тогда
					ВыполнитьДлительнуюОперацию = Ложь;
				КонецЕсли;
			ИначеЕсли ТаблицаКОпределениюСправок2.Количество() = 0 Тогда
				ВыполнитьДлительнуюОперацию = Ложь;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ПроверяемыеДанные) = Тип("Структура") Тогда
		ПроверкаИПодборПродукцииИС.ПреобразоватьНесериализуемыеЗначения(ПроверяемыеДанные);
	КонецЕсли;
	
	Если ВыполнитьДлительнуюОперацию Тогда
		ПараметрыПроцедуры = Обработки.ПроверкаИПодборАлкогольнойПродукцииЕГАИС.ПараметрыЗагрузкиДанныхДокумента();
		ПараметрыПроцедуры.ПроверкаНеПоДокументу = ПроверкаНеПоДокументу;
		ПараметрыПроцедуры.ПроверяемыеДанные = ПроверяемыеДанные;
		ПараметрыПроцедуры.ПроверяемыйДокумент = ПроверяемыйДокумент;
		ПараметрыПроцедуры.СообщениеПротоколаОбмена = СообщениеПротоколаОбмена;
		ПараметрыПроцедуры.НачальныйСтатусПроверки = НачальныйСтатусПроверки;
		ПараметрыПроцедуры.ДетализацияСтруктурыХранения = ДетализацияСтруктурыХранения;
		ПараметрыПроцедуры.РедактированиеФормыНедоступно = РедактированиеФормыНедоступно;
		ПараметрыПроцедуры.РежимПодбораСуществующихУпаковок = РежимПодбораСуществующихУпаковок;
		ПараметрыПроцедуры.КонтролироватьСканируемуюПродукциюПоДокументуОснованию = КонтролироватьСканируемуюПродукциюПоДокументуОснованию;
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Фоновое заполнение данных проверки и подбора алкогольной продукции'");
		ПараметрыВыполнения.ЗапуститьВФоне = Истина;
		
		ИнтеграцияИСПереопределяемый.НастроитьДлительнуюОперацию(ПараметрыПроцедуры, ПараметрыВыполнения);
		
		Возврат ДлительныеОперации.ВыполнитьВФоне(
			"Обработки.ПроверкаИПодборАлкогольнойПродукцииЕГАИС.ЗагрузитьДанныеДокументаДлительнаяОперация",
			ПараметрыПроцедуры, ПараметрыВыполнения);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузкаДанныхДокументаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда  // отменено пользователем
		ЗакрытьФорму();
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ЗакрытьФорму", ЭтотОбъект), Результат.КраткоеПредставлениеОшибки);
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		ЗагрузкаДанныхДокументаЗавершениеНаСервере(Результат.АдресРезультата);
		СоответствиеШтрихкодовСтрокДерева = СоответствиеШтрихкодовСтрокДерева(АдресСоответствиеШтрихкодыИдентификаторыСтрок);
	КонецЕсли;
	
	УправлениеДоступностьюКонтекстныхКоманд();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузкаДанныхДокументаЗавершениеНаСервере(АдресДанныхДокумента)
	
	ДанныеДокумента = Новый Структура;
	Если ЭтоАдресВременногоХранилища(АдресДанныхДокумента) Тогда
		ДанныеДокумента = ПолучитьИзВременногоХранилища(АдресДанныхДокумента);
	КонецЕсли;
	
	ВывестиДанныеПроверкиИПодбораНаФорму(ДанныеДокумента);
	ОпределитьСправки2ПриСозданииДереваУпаковок(ДеревоМаркированнойПродукции.ПолучитьЭлементы());
	РассчитатьИтогиУстановитьВидимость();
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьСправки2ПриСозданииДереваУпаковок(СтрокиДерева)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		ОпределениеСправок2ПриДобавленииСтроки(ЭтотОбъект, СтрокаДерева);
		
		ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
		
		Если ПодчиненныеСтроки.Количество() > 0 Тогда
			ОпределитьСправки2ПриСозданииДереваУпаковок(ПодчиненныеСтроки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьИтогиУстановитьВидимость()

	УправлениеЭлементамиФормыПриСоздании();
	ПересчитатьВсеИтогиФормыНаСервере();
	УправлениеВидимостьюКомандУпаковок(ЭтотОбъект);
	УправлениеВидимостьюКомандПротоколаОбмена();

КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОНачалеПроверкиЗаново(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ИнициализироватьДанныеФормы(Истина);
		ЗагрузитьДанныеДокумента();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьДанныеФормы(РежимОчистки = Ложь)

	ИдентификаторТекущейПроверяемойУпаковки = -1;
	ИдентификаторРодителяУдаляемойСтроки    = -1;
	ИдентификаторСтрокиБутылкиБезУпаковки   = -1;
	СледующийСтикерОтложено                 = 1;
	
	Если РежимОчистки Тогда
		
		ДеревоМаркированнойПродукции.ПолучитьЭлементы().Очистить();
		ДобавленныеУпаковки.Очистить();
		ДоступныеДляПроверкиУпаковки.Очистить();
		ПулНеизвестныхАкцизныхМарок.Очистить();
		ТаблицаНеМаркируемойПродукции.Очистить();
		УпаковкиДокумента.Очистить();
		АлкогольнаяПродукцияКОпределениюСправок2.ПолучитьЭлементы().Очистить();
		
	КонецЕсли;
	
	ЦветГиперссылки           = ЦветаСтиля.ЦветГиперссылкиГосИС;
	ЦветТекстаПоля            = ЦветаСтиля.ЦветТекстаПоля;
	ЦветТекстаТребуетВнимания = ЦветаСтиля.ЦветТекстаТребуетВниманияГосИС;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормыПриСоздании()
	
	Если РежимПросмотра Тогда
		
		Если РежимПодбораСуществующихУпаковок Тогда
			Заголовок                                  = НСтр("ru = 'Результаты подбора алкогольной продукции'");
			Элементы.ПроверяемыйДокумент.Заголовок     = НСтр("ru = 'В документ'");
		Иначе
			Заголовок                                  = НСтр("ru = 'Результаты проверки алкогольной продукции'");
			Элементы.ПроверяемыйДокумент.Заголовок     = НСтр("ru = 'В документе'");
		КонецЕсли;
		
		Элементы.ФормаПеренестиВДокумент.Видимость                                  = Ложь;
		Элементы.ФормаСохранитьПромежуточныеРезультатыПроверки.Видимость            = Ложь;
		Элементы.ГруппаМаркируемаяКоманднаяПанельТребуетсяПеремаркировать.Видимость = Ложь;
		Элементы.ДеревоМаркированнойПродукцииНачатьПроверкуЗаново.Видимость         = Ложь;
		Элементы.ДеревоМаркированнойПродукцииРазобратьУпаковку.Видимость            = Ложь;
		Элементы.СтраницаНеМаркируемая.ТолькоПросмотр                               = Истина;
		Элементы.СтраницаПодобраннаяПродукция.ТолькоПросмотр                        = Истина;
		Элементы.ПоискПоШтрихкодуНеМаркируемая.Видимость                            = Ложь;
		Элементы.ДеревоМаркированнойПродукцииУказатьШтрихкод.Видимость              = Ложь;
		Элементы.ПоискПоШтрихкодуНеМаркируемая.Видимость                            = Ложь;
		Элементы.ПоискПоШтрихкодуПодобранная.Видимость                              = Ложь;
		Элементы.ФормаЗакрыть.КнопкаПоУмолчанию = Истина;
		
	Иначе
		
		Если РежимПодбораСуществующихУпаковок Тогда
			Заголовок                                  = НСтр("ru = 'Подбор и проверка алкогольной продукции'");
			Элементы.ФормаПеренестиВДокумент.Заголовок = НСтр("ru = 'Завершить подбор'");
			Элементы.ПроверяемыйДокумент.Заголовок     = НСтр("ru = 'В документ'");
		Иначе
			Элементы.ДеревоМаркированнойПродукцииПринятьКакПартионную.Видимость = Истина;
		КонецЕсли;

		Если ПроверкаНеПоДокументу Тогда
			Элементы.ДеревоМаркированнойПродукцииНачатьПроверкуЗаново.Видимость = Ложь;
			Элементы.ФормаСохранитьПромежуточныеРезультатыПроверки.Видимость    = Ложь;
		КонецЕсли;
		
		Элементы.ФормаЗакрыть.Видимость = Ложь;
	
	КонецЕсли;
	
	Если ПроверкаНеПоДокументу Тогда
		Элементы.ПроверяемыйДокумент.Видимость = Ложь;
	КонецЕсли;
	
	УправлениеВидимостьюСтраницФормы();

КонецПроцедуры

&НаСервере
Процедура УправлениеВидимостьюСтраницФормы()
	
	ЕстьДанныеВДереве = Ложь;
	СтрокиВерхнегоУровня = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
	КоличествоСтрокВерхнегоУровня = ДеревоМаркированнойПродукции.ПолучитьЭлементы().Количество();
	
	Если КоличествоСтрокВерхнегоУровня > 1 Тогда
		ЕстьДанныеВДереве = Истина;
	ИначеЕсли КоличествоСтрокВерхнегоУровня = 1 Тогда
		ЕдинственнаяСтрока = СтрокиВерхнегоУровня[0];
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ЕдинственнаяСтрока.ТипУпаковки) Тогда
			ЕстьДанныеВДереве = Истина;
		ИначеЕсли ЕдинственнаяСтрока.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаАлкогольнойПродукции.БутылкиБезКоробки Тогда
			Если ЕдинственнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				ЕстьДанныеВДереве = Истина;
			КонецЕсли;
		Иначе
			ЕстьДанныеВДереве = Истина;
		КонецЕсли;
	КонецЕсли;
	
	КоличествоВидимыхСтраниц = 0;
	
	Если ПроверкаНеПоДокументу Тогда
		
		ЕстьМаркируемая   = Истина;
		ЕстьНеМаркируемая = Истина;
		
		Элементы.СтраницаМаркируемая.Видимость          = Истина;
		Элементы.СтраницаПодобраннаяПродукция.Видимость = Истина;
		Элементы.СтраницаНеМаркируемая.Видимость        = Ложь;
		
		КоличествоВидимыхСтраниц = 2;
		
	ИначеЕсли РежимПросмотра Тогда
		
		Если ЕстьДанныеВДереве Тогда 
			Элементы.СтраницаМаркируемая.Видимость = Истина;
			КоличествоВидимыхСтраниц = КоличествоВидимыхСтраниц + 1;
		Иначе
			Элементы.СтраницаМаркируемая.Видимость = Ложь;
		КонецЕсли;
		
		Если РежимПодбораСуществующихУпаковок Тогда
			
			Элементы.СтраницаНеМаркируемая.Видимость        = Ложь;
			Элементы.СтраницаПодобраннаяПродукция.Видимость = Истина;
			КоличествоВидимыхСтраниц = КоличествоВидимыхСтраниц + 1;
			
		Иначе
			
			Элементы.СтраницаПодобраннаяПродукция.Видимость = Ложь;
			
			Если ТаблицаНеМаркируемойПродукции.Количество() > 0 Тогда
				
				Элементы.СтраницаНеМаркируемая.Видимость = Истина;
				КоличествоВидимыхСтраниц = КоличествоВидимыхСтраниц + 1;
				
			Иначе
				
				Элементы.СтраницаНеМаркируемая.Видимость = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Не РежимПодбораСуществующихУпаковок Тогда
		
		Элементы.СтраницаПодобраннаяПродукция.Видимость = Ложь;
		
		Если ЕстьДанныеВДереве 
			Или ПулНеизвестныхАкцизныхМарок.Количество() > 0 Тогда
			
			ЕстьМаркируемая   = Истина;
			Элементы.СтраницаМаркируемая.Видимость = Истина;
			КоличествоВидимыхСтраниц = КоличествоВидимыхСтраниц + 1;
			
		Иначе
			
			Элементы.СтраницаМаркируемая.Видимость = Ложь;
			
		КонецЕсли;
		
		Элементы.СтраницаПодобраннаяПродукция.Видимость = Ложь;
			
		Если ТаблицаНеМаркируемойПродукции.Количество() > 0 Тогда
			
			ЕстьНеМаркируемая = Истина;
			Элементы.СтраницаНеМаркируемая.Видимость = Истина;
			КоличествоВидимыхСтраниц = КоличествоВидимыхСтраниц + 1;
			
		Иначе
			
			Элементы.СтраницаНеМаркируемая.Видимость = Ложь;
			
		КонецЕсли;
	
	ИначеЕсли КонтролироватьСканируемуюПродукциюПоДокументуОснованию Тогда
		
		НаличиеМаркированнойПродукции = ПроверкаИПодборПродукцииЕГАИС.НаличиеМаркируемойПродукции(ПроверяемыйДокумент);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, НаличиеМаркированнойПродукции);
		
		Если НаличиеМаркированнойПродукции.ЕстьМаркируемая Тогда
			Элементы.СтраницаМаркируемая.Видимость = Истина;
			КоличествоВидимыхСтраниц = КоличествоВидимыхСтраниц + 1;
		Иначе
			Элементы.СтраницаМаркируемая.Видимость = Ложь;
		КонецЕсли;
		
		Элементы.СтраницаНеМаркируемая.Видимость        = Ложь;
		Элементы.СтраницаПодобраннаяПродукция.Видимость = Истина;
		КоличествоВидимыхСтраниц = КоличествоВидимыхСтраниц + 1;
		
	Иначе
		
		ЕстьМаркируемая   = Истина;
		ЕстьНеМаркируемая = Истина;
	
		Элементы.СтраницаМаркируемая.Видимость          = Истина;
		Элементы.СтраницаПодобраннаяПродукция.Видимость = Истина;
		Элементы.СтраницаНеМаркируемая.Видимость        = Ложь;
		
		КоличествоВидимыхСтраниц = 2;
		
	КонецЕсли;
	
	Если КоличествоВидимыхСтраниц <= 1 Тогда
		Элементы.СтраницыПродукция.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Иначе
		Элементы.СтраницыПродукция.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеДоступностьюКонтекстныхКоманд()
	
	Если РежимПросмотра Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ДеревоМаркированнойПродукции.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено
		Или ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковки") Тогда
		ДоступностьКомандУпаковки = Ложь;
	Иначе
		ДоступностьКомандУпаковки = ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ТекущиеДанные.ТипУпаковки);
	КонецЕсли;

	Элементы.ДеревоМаркированнойПродукцииРазобратьУпаковку.Доступность = ДоступностьКомандУпаковки;
	
	Если Элементы.ДеревоМаркированнойПродукцииПринятьКакПартионную.Видимость Тогда
		Элементы.ДеревоМаркированнойПродукцииПринятьКакПартионную.Доступность = ДоступностьКомандУпаковки
			И ЭтоАкцизнаяМаркаСтарогоФормата(ТекущиеДанные);
	КонецЕсли;

	Элементы.ДеревоМаркированнойПродукцииКонтекстноеМенюУточнитьДанныеЧастичногоВыбытия.Доступность =
		ТекущиеДанные <> Неопределено
		И ТекущиеДанные.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар")
		И ТекущиеДанные.ЧастичноеВыбытие

КонецПроцедуры

#КонецОбласти

#Область РезультатыПроверки

&НаКлиенте
Процедура ОтветНаВопросПриЗавершенииПроверки(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("ПеречислениеСсылка.СтатусыПроверкиНаличияПродукцииИС") Тогда
		ЗавершитьПроверку(Результат);
	ИначеЕсли Результат = Истина Тогда
		ЗавершитьПроверку(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПроверку(СтатусПроверки)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Обработка.ПроверкаИПодборАлкогольнойПродукцииЕГАИС.Форма.ПроверкаИПодбор.ЗавершитьПроверку");
	
	ПараметрыПроверки = Новый Структура();
	ПараметрыПроверки.Вставить("СтатусПроверки",              СтатусПроверки);
	ПараметрыПроверки.Вставить("ИдентификаторВладельцаФормы", ВладелецФормы.УникальныйИдентификатор);
	ПараметрыПроверки.Вставить("ЕстьОшибки",                  Ложь);
	ПараметрыПроверки.Вставить("ТекстОшибки",                 "");
	ПараметрыПроверки.Вставить("ДлительнаяОперация",          Неопределено);
	
	ЗавершитьПроверкуНаСервере(ПараметрыПроверки);
	
	Если ПараметрыПроверки.ЕстьОшибки Тогда
		ПоказатьПредупреждение(, ПараметрыПроверки.ТекстОшибки);
	Иначе
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Сохранение результатов проверки.'");
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершениеПроверкиОкончание", ЭтотОбъект);
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ПараметрыПроверки.ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьПроверкуНаСервере(ПараметрыПроверки)
	
	ИзменитьСтатусПриЗавершенииПроверки(ПараметрыПроверки);
	
	Если НЕ ПараметрыПроверки.ЕстьОшибки Тогда
		ПараметрыПроверки.ДлительнаяОперация = НачатьЗавершениеПроверки(ПараметрыПроверки.ИдентификаторВладельцаФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьСтатусПриЗавершенииПроверки(ПараметрыПроверки)
	
	Если ПараметрыПроверки.СтатусПроверки <> Неопределено Тогда
		Для Каждого СтрокаПроверяемого Из ДеревоМаркированнойПродукции.ПолучитьЭлементы() Цикл
			ИзменитьСтатусПроверкиВСтрокеДерева(СтрокаПроверяемого, ПараметрыПроверки.СтатусПроверки, Ложь);
		КонецЦикла;
	КонецЕсли;
	
	ПересчитатьВсеИтогиФормыНаСервере();
	
	Если КоличествоУпаковокКоторыеНеобходимоПеремаркировать > 0 Тогда
		ПараметрыПроверки.ЕстьОшибки  = Истина;
		ПараметрыПроверки.ТекстОшибки = НСтр("ru = 'Есть упаковки требующие перемаркировки'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьСтатусПроверкиВСтрокеДерева(СтрокаДерева, СтатусПроверки, УстанавливатьБезусловно)
	
	Если УстанавливатьБезусловно Тогда
		
		СтрокаДерева.СтатусПроверки = СтатусПроверки;
		
	ИначеЕсли ЗначениеЗаполнено(СтатусПроверки)
		И СтрокаДерева.ТипУпаковки <> ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаАлкогольнойПродукции.БутылкиБезКоробки")
		И (СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеПроверялась")
		  Или СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отложена")) Тогда
		
		СтрокаДерева.СтатусПроверки = СтатусПроверки;
		
	КонецЕсли;
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		УстанавливатьБезусловно = ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки)
			И СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует");
		
		ИзменитьСтатусПроверкиВСтрокеДерева(ПодчиненнаяСтрока, СтатусПроверки, УстанавливатьБезусловно);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НачатьЗавершениеПроверки(ИдентификаторВладельцаФормы)
	
	ОписаниеТиповТипУпаковки = Новый ОписаниеТипов;
	ОписаниеТиповТипУпаковки.Типы().Добавить(Тип("ПеречислениеСсылка.ТипыУпаковок"));
	ОписаниеТиповТипУпаковки.Типы().Добавить(Тип("ПеречислениеСсылка.ПрочиеЗоныПересчетаАлкогольнойПродукции"));
	
	ВозвращаемоеДерево = Новый ДеревоЗначений;
	ВозвращаемоеДерево.Колонки.Добавить("Штрихкод",                ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ВозвращаемоеДерево.Колонки.Добавить("ТипУпаковки",             ОписаниеТиповТипУпаковки);
	ВозвращаемоеДерево.Колонки.Добавить("АлкогольнаяПродукция",    Неопределено);
	ВозвращаемоеДерево.Колонки.Добавить("Номенклатура",            Неопределено);
	ВозвращаемоеДерево.Колонки.Добавить("Характеристика",          Неопределено);
	ВозвращаемоеДерево.Колонки.Добавить("Серия",                   Неопределено);
	ВозвращаемоеДерево.Колонки.Добавить("Справка2",                Неопределено);
	ВозвращаемоеДерево.Колонки.Добавить("ВсеСправки2Указаны",      Новый ОписаниеТипов("Булево"));
	ВозвращаемоеДерево.Колонки.Добавить("СтатусПроверки",          Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыПроверкиНаличияПродукцииИС"));
	ВозвращаемоеДерево.Колонки.Добавить("КоличествоАкцизныхМарок", ОбщегоНазначения.ОписаниеТипаЧисло(15));
	ВозвращаемоеДерево.Колонки.Добавить("ИдентификаторСтроки",     ОбщегоНазначения.ОписаниеТипаЧисло(15));
	ВозвращаемоеДерево.Колонки.Добавить("ХешСумма",                ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ВозвращаемоеДерево.Колонки.Добавить("ЧастичноеВыбытие",               Новый ОписаниеТипов("Булево"));
	ВозвращаемоеДерево.Колонки.Добавить("ЧастичноеВыбытиеВариантУчета",   Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыУчетаЧастичногоВыбытияИС"));
	ВозвращаемоеДерево.Колонки.Добавить("ЧастичноеВыбытиеНоменклатура",   Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ВозвращаемоеДерево.Колонки.Добавить("ЧастичноеВыбытиеХарактеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ВозвращаемоеДерево.Колонки.Добавить("ЧастичноеВыбытиеКоличество",     ОбщегоНазначения.ОписаниеТипаЧисло(10, 3));
	ВозвращаемоеДерево.Колонки.Добавить("ВыбытиеБутылки",                 Новый ОписаниеТипов("Булево"));
	ВозвращаемоеДерево.Колонки.Добавить("Коэффициент",                    ОбщегоНазначения.ОписаниеТипаЧисло(18, 8));
	
	Для Каждого СтрокаПроверяемого Из ДеревоМаркированнойПродукции.ПолучитьЭлементы() Цикл
		
		ДобавитьСтрокуВРезультирующееДерево(СтрокаПроверяемого, ВозвращаемоеДерево.Строки);
		
	КонецЦикла;
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ПроверкаНеПоДокументу",      ПроверкаНеПоДокументу);
	ПараметрыПроцедуры.Вставить("ПроверяемыйДокумент",        ПроверяемыйДокумент);
	ПараметрыПроцедуры.Вставить("ПостфиксСохранения",         ПостфиксСохранения);
	ПараметрыПроцедуры.Вставить("АдресРезультатовПроверки",   Неопределено);
	ПараметрыПроцедуры.Вставить("ДеревоМаркируемойПродукции", ВозвращаемоеДерево);
	
	Если РежимПодбораСуществующихУпаковок Тогда
		ПараметрыПроцедуры.Вставить("ТаблицаНеМаркируемойПродукции", ТаблицаРезультатаСканированияНеМаркируемойПродукции());
	Иначе
		ПараметрыПроцедуры.Вставить("ТаблицаНеМаркируемойПродукции", ТаблицаНеМаркируемойПродукции.Выгрузить());
	КонецЕсли;
	
	Если ПриЗавершенииСохранятьРезультатыПроверки Тогда
		ДанныеРезультатовПроверки = ПроверкаИПодборПродукцииЕГАИС.ДанныеРезультатовПроверки(ЭтотОбъект);
		ПараметрыПроцедуры.АдресРезультатовПроверки = Новый ХранилищеЗначения(ДанныеРезультатовПроверки);
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторВладельцаФормы);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Перенос результатов проверки и подбора в документ ЕГАИС.'");
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	ИнтеграцияИСПереопределяемый.НастроитьДлительнуюОперацию(ПараметрыПроцедуры, ПараметрыВыполнения);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("Обработки.ПроверкаИПодборАлкогольнойПродукцииЕГАИС.ЗафиксироватьРезультатПроверкиИПодбора",
		ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ЗавершениеПроверкиОкончание(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда  // отменено пользователем
		Возврат;
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ПоказатьПредупреждение(, Результат.КраткоеПредставлениеОшибки);
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		ВыполняетсяЗакрытие = Истина;
		Закрыть(Результат.АдресРезультата);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РезультатыПроверкиУспешноСохранены()

	ТекстОшибки = "";
	
	Если ПроверкаИПодборПродукцииЕГАИС.РезультатыПроверкиУспешноСохранены(ЭтотОбъект, ПостфиксСохранения, ТекстОшибки) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,, "ПроверяемыйДокумент");
	Возврат Ложь;
	
КонецФункции 

&НаСервере
Процедура ДобавитьСтрокуВРезультирующееДерево(СтрокаИсточник, КоллекцияСтрокПриемника)
	
	Если СтрокаИсточник.ТипУпаковки <> Перечисления.ПрочиеЗоныПересчетаАлкогольнойПродукции.БутылкиБезКоробки
		И СтрокаИсточник.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.Отсутствует Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НоваяСтрока = КоллекцияСтрокПриемника.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточник);
	
	Для Каждого ПодчиненнаяСтрокаИсточник Из СтрокаИсточник.ПолучитьЭлементы() Цикл
		
		ДобавитьСтрокуВРезультирующееДерево(ПодчиненнаяСтрокаИсточник, НоваяСтрока.Строки);
		
	КонецЦикла;
	
	Если НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
		
		Возврат ;
		
	КонецЕсли;
	
	НоваяСтрока.АлкогольнаяПродукция = ?(СтрокаИсточник.ВУпаковкеРазнаяАлкогольнаяПродукция, Неопределено, СтрокаИсточник.АлкогольнаяПродукция);
	НоваяСтрока.Номенклатура         = ?(СтрокаИсточник.ВУпаковкеРазнаяНоменклатура,         Неопределено, СтрокаИсточник.Номенклатура);
	НоваяСтрока.Характеристика       = ?(СтрокаИсточник.ВУпаковкеРазныеХарактеристики,       Неопределено, СтрокаИсточник.Характеристика);
	НоваяСтрока.Серия                = ?(СтрокаИсточник.ВУпаковкеРазныеСерии,                Неопределено, СтрокаИсточник.Серия);
	НоваяСтрока.Справка2             = ?(СтрокаИсточник.ВУпаковкеРазныеСправки2,             Неопределено, СтрокаИсточник.Справка2);
	
	Для Каждого ПодчиненнаяСтрока Из НоваяСтрока.Строки Цикл
		
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ПодчиненнаяСтрока.ТипУпаковки) Тогда
			
			НоваяСтрока.КоличествоАкцизныхМарок = НоваяСтрока.КоличествоАкцизныхМарок + ПодчиненнаяСтрока.КоличествоАкцизныхМарок;
			
		ИначеЕсли ПодчиненнаяСтрока.ТипУпаковки =  Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			
			НоваяСтрока.КоличествоАкцизныхМарок = НоваяСтрока.КоличествоАкцизныхМарок + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ТаблицаРезультатаСканированияНеМаркируемойПродукции()

	ТаблицаНеМаркируемойАлкогольнойПродукции = Новый ТаблицаЗначений;
	ТаблицаНеМаркируемойАлкогольнойПродукции.Колонки.Добавить("Номенклатура");
	ТаблицаНеМаркируемойАлкогольнойПродукции.Колонки.Добавить("Характеристика");
	ТаблицаНеМаркируемойАлкогольнойПродукции.Колонки.Добавить("АлкогольнаяПродукция");
	ТаблицаНеМаркируемойАлкогольнойПродукции.Колонки.Добавить("Серия");
	ТаблицаНеМаркируемойАлкогольнойПродукции.Колонки.Добавить("Справка2");
	ТаблицаНеМаркируемойАлкогольнойПродукции.Колонки.Добавить("Количество");
	
	Для Каждого СтрокаВерхнегоУровня Из АлкогольнаяПродукцияКОпределениюСправок2.ПолучитьЭлементы() Цикл
		
		Если Не СтрокаВерхнегоУровня.Маркируемая Тогда
			
			НоваяСтрока = ТаблицаНеМаркируемойАлкогольнойПродукции.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВерхнегоУровня);
			НоваяСтрока.Количество = СтрокаВерхнегоУровня.КоличествоРаспределено
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаНеМаркируемойАлкогольнойПродукции;
	
КонецФункции

#КонецОбласти

#Область СканированиеШтрихкодаИОбработка

&НаКлиенте
Функция ИдентификаторСтрокиДереваПоШтрихкоду(Штрихкод)

	НайденныйИдентификаторСтроки = СоответствиеШтрихкодовСтрокДерева.Получить(Штрихкод);
	
	Если НайденныйИдентификаторСтроки = Неопределено Тогда
		
		НайденныйИдентификаторСтроки = -1;
		
	КонецЕсли;
	
	Возврат НайденныйИдентификаторСтроки;

КонецФункции

&НаКлиенте
Функция ПараметрыСканирования()
	
	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования(
		ВладелецФормы,
		Неопределено,
		ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная"));
	
	ПараметрыСканирования.СоздаватьШтрихкодУпаковки                          = Ложь;
	ПараметрыСканирования.ЗапрашиватьНоменклатуру                            = РежимПодбораСуществующихУпаковок;
	ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции                 = ДанныеВыбораПоМаркируемойпродукции;
	ПараметрыСканирования.ИспользуютсяДанныеВыбораПоМаркируемойПродукции     = Истина;
	ПараметрыСканирования.ВозможнаЗагрузкаТСД                                = Истина;
	ПараметрыСканирования.ИспользуетсяСоответствиеШтрихкодовСтрокДерева      = Истина;
	ПараметрыСканирования.КэшМаркируемойПродукции                            = КэшМаркируемойПродукции;
	ПараметрыСканирования.КонтрольУникальностиКодовМаркировки                = Ложь;
	ПараметрыСканирования.РазрешенаОбработкаНеНайденныхЛогистическихУпаковок = Истина;
	ПараметрыСканирования.РазрешенаОбработкаБезУказанияМарки                 = Истина;
	
	Возврат ПараметрыСканирования;
	
КонецФункции

&НаКлиенте
Процедура РучнойВводШтрихкодаЗавершение(ДанныеШтрихкода, ДополнительныеПараметры) Экспорт
	
	Если ДанныеШтрихкода = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузкаДанныхТСД = Неопределено;
	
	Если СоответствиеШтрихкодовСтрокДерева.Получить(ДанныеШтрихкода.Штрихкод) <> Неопределено
			Или ДанныеШтрихкода.Свойство("ШтрихкодУпаковки") Тогда
		
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ДанныеШтрихкода);
		
	Иначе
		
		ШтрихкодированиеОбщегоНазначенияИСКлиент.ОбработатьДанныеШтрихкода(
			"ПоискПоШтрихкодуЗавершение", ЭтотОбъект, ДанныеШтрихкода, ПараметрыСканирования());
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУспешногоОбнаруженияОтсканированногоШтрихкодаВДереве(НайденнаяСтрокаДерева, 
	                                                                ТекущаяСтрокаДерева,
	                                                                РодительНайденнойСтроки,
	                                                                ТребуетсяОткрытиеФормыВыбораДействия,
	                                                                ТипУпаковкиГдеНашли,
	                                                                ОбработкаДанныхТСД)
	
	Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(НайденнаяСтрокаДерева.ТипУпаковки) Тогда
		
		Если ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковки") Тогда
			Возврат;
		КонецЕсли;
		
		Если ОбработкаДанныхТСД Тогда
			
			Если ЗагрузкаДанныхТСД.ТекущаяОперация = "ЕдинственнаяУпаковка" Тогда
				
				ЗагрузкаДанныхТСД.ИдентификаторУпаковки = НайденнаяСтрокаДерева.ПолучитьИдентификатор();
				ТребуетсяОткрытиеФормыВыбораДействия = Ложь;
				
				Если НайденнаяСтрокаДерева.ПолучитьРодителя() = Неопределено Тогда
					ОтметитьСтрокуКакНайденную(НайденнаяСтрокаДерева);
				КонецЕсли;
				Возврат;
				
			Иначе
				
				СтрокаПроверяемойУпаковки = СтрокаТекущейПроверяемойУпаковкиТСД(ЭтотОбъект, Истина);
				
			КонецЕсли;
			
		Иначе
			СтрокаПроверяемойУпаковки = СтрокаТекущейПроверяемойУпаковки(ЭтотОбъект, Истина);
		КонецЕсли;
		
		Если НайденнаяСтрокаДерева.ИдетПроверкаДаннойУпаковки
			И Не ОбработкаДанныхТСД Тогда
			
			СнятьПризнакПроверкиУпаковки(НайденнаяСтрокаДерева);
			СпозиционироватьсяНаСтрокеДерева(ЭтотОбъект, НайденнаяСтрокаДерева);
			ТребуетсяОткрытиеФормыВыбораДействия = Ложь;
			
		ИначеЕсли РодительНайденнойСтроки = СтрокаПроверяемойУпаковки Тогда
		
			Если НайденнаяСтрокаДерева = ТекущаяСтрокаДерева
				И Не ОбработкаДанныхТСД Тогда
				
				ОтметитьСтрокуКакНайденную(НайденнаяСтрокаДерева);
				ИзменитьСостояниеПроверкиУпаковки(НайденнаяСтрокаДерева);
				ТребуетсяОткрытиеФормыВыбораДействия = Ложь;
				
			Иначе
				
				Если РодительНайденнойСтроки = Неопределено Тогда
					СнятьПризнакПроверкиУпаковки(ТекущаяСтрокаДерева);
				КонецЕсли;
				
				ОтметитьСтрокуКакНайденную(НайденнаяСтрокаДерева);
				СпозиционироватьсяНаСтрокеДерева(ЭтотОбъект, НайденнаяСтрокаДерева);
				ТребуетсяОткрытиеФормыВыбораДействия = Ложь;
				
			КонецЕсли;
			
		ИначеЕсли ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками")
			И СтрокаПроверяемойУпаковки <> Неопределено Тогда

			ОтметитьСтрокуКакНайденную(НайденнаяСтрокаДерева);
			СнятьПризнакПроверкиУпаковки(СтрокаПроверяемойУпаковки);
			СпозиционироватьсяНаСтрокеДерева(ЭтотОбъект, НайденнаяСтрокаДерева);
			ТребуетсяОткрытиеФормыВыбораДействия = Ложь;
			
		ИначеЕсли ОбработкаДанныхТСД
			И ЗагрузкаДанныхТСД.ТекущаяОперация = "Упаковка"
			И РежимПроверки = ПредопределенноеЗначение("Перечисление.ВариантыПроверкиПоступившейПродукцииИС.ОставлятьТамГдеНайдены") Тогда
			
			ПереместитьУпаковкуВДругуюУпаковку(
				НайденнаяСтрокаДерева, СтрокаПроверяемойУпаковки,
				ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии"));
			ТребуетсяОткрытиеФормыВыбораДействия = Ложь;
			
		КонецЕсли;
		
	Иначе
		
		Если ОбработкаДанныхТСД Тогда
			СтрокаПроверяемойУпаковки = СтрокаТекущейПроверяемойУпаковкиТСД(ЭтотОбъект, Ложь);
			ИдентификаторУпаковки = ЗагрузкаДанныхТСД.ИдентификаторУпаковки;
		Иначе
			СтрокаПроверяемойУпаковки = СтрокаТекущейПроверяемойУпаковки(ЭтотОбъект, Ложь);
			ИдентификаторУпаковки = ИдентификаторТекущейПроверяемойУпаковки;
		КонецЕсли;
		
		Если (РодительНайденнойСтроки = Неопределено 
			Или РодительНайденнойСтроки.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаАлкогольнойПродукции.БутылкиБезКоробки"))
			И ИдентификаторУпаковки = -1 Тогда
			
			ОтметитьСтрокуКакНайденную(НайденнаяСтрокаДерева);
			СпозиционироватьсяНаСтрокеДерева(ЭтотОбъект, НайденнаяСтрокаДерева);
			ТребуетсяОткрытиеФормыВыбораДействия = Ложь;
		
		ИначеЕсли РодительНайденнойСтроки.ПолучитьИдентификатор() = ИдентификаторУпаковки Тогда
			
			ОтметитьСтрокуКакНайденную(НайденнаяСтрокаДерева);
			СпозиционироватьсяНаСтрокеДерева(ЭтотОбъект, НайденнаяСтрокаДерева);
			ТребуетсяОткрытиеФормыВыбораДействия = Ложь;
			
		ИначеЕсли ОбработкаДанныхТСД
			И РежимПроверки = ПредопределенноеЗначение("Перечисление.ВариантыПроверкиПоступившейПродукцииИС.ОставлятьТамГдеНайдены") Тогда
			
			ПереместитьБутылку(
				НайденнаяСтрокаДерева, СтрокаПроверяемойУпаковки,
				ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии"));
			ТребуетсяОткрытиеФормыВыбораДействия = Ложь;
			
		Иначе
			
			Если (РодительНайденнойСтроки.НеСодержитсяВДанныхДокумента
				Или РодительНайденнойСтроки.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаАлкогольнойПродукции.БутылкиБезКоробки"))
				И (СтрокаПроверяемойУпаковки.НеСодержитсяВДанныхДокумента
				Или СтрокаПроверяемойУпаковки.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаАлкогольнойПродукции.БутылкиБезКоробки")) Тогда
				
				ОтметитьСтрокуКакНайденную(НайденнаяСтрокаДерева);
				ПереместитьБутылку(НайденнаяСтрокаДерева, СтрокаПроверяемойУпаковки);
				ТребуетсяОткрытиеФормыВыбораДействия = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрокаПроверяемойУпаковки <> Неопределено Тогда
		ТипУпаковкиГдеНашли = СтрокаПроверяемойУпаковки.ТипУпаковки;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСканированиеИмеющегосяВДеревеШтрихкода(ДанныеШтрихкода, ТекущаяСтрокаДерева, ИдентификаторНайденнойСтроки, ОбработкаДанныхТСД = Ложь)

	ТребуетсяОткрытиеФормыВыбораДействия = Истина;
	
	НайденнаяСтрокаДерева = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторНайденнойСтроки);
	
	Если НайденнаяСтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НайденнаяСтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар")
		И НайденнаяСтрокаДерева.ЧастичноеВыбытие Тогда
		
		Если ДанныеШтрихкода.Свойство("ШтрихкодУпаковки") Тогда
			
			ДобавитьСтрокуВТаблицуИзменений(ТаблицаИзмененийАлкогольнойПродукции, НайденнаяСтрокаДерева, -1);
			СоответствиеШтрихкодовСтрокДерева.Удалить(НайденнаяСтрокаДерева.Штрихкод);
			
			РодительскаяСтрока = НайденнаяСтрокаДерева.ПолучитьРодителя();
			Если РодительскаяСтрока = Неопределено Тогда
				ЭлементыРодительскойСтроки = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
			Иначе
				ЭлементыРодительскойСтроки = РодительскаяСтрока.ПолучитьЭлементы();
			КонецЕсли;
			КоличествоЭлементовРодительскойСтроки = ЭлементыРодительскойСтроки.Количество();
			ИндексНайденнойСтроки = ЭлементыРодительскойСтроки.Индекс(НайденнаяСтрокаДерева);
			ЭлементыРодительскойСтроки.Удалить(НайденнаяСтрокаДерева);
			
			ОбработатьТаблицуИзмененияАлкогольнойПродукции(ЭтотОбъект);
			ОбработатьНеНайденныйВДеревеШтрихкод(ДанныеШтрихкода, ТекущаяСтрокаДерева, ОбработкаДанныхТСД);
			
			Если КоличествоЭлементовРодительскойСтроки = ЭлементыРодительскойСтроки.Количество() Тогда
				ИндексНовогоЭлемента = КоличествоЭлементовРодительскойСтроки - 1;
				ЭлементыРодительскойСтроки.Сдвинуть(ИндексНовогоЭлемента, ИндексНайденнойСтроки - ИндексНовогоЭлемента);
				СпозиционироватьсяНаСтрокеДерева(ЭтотОбъект, ЭлементыРодительскойСтроки[ИндексНайденнойСтроки]);
			КонецЕсли;
			
		Иначе
			ШтрихкодированиеОбщегоНазначенияИСКлиент.ОбработатьДанныеШтрихкода(
				"ПоискПоШтрихкодуЗавершение", ЭтотОбъект, ДанныеШтрихкода, ПараметрыСканирования());
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	РодительНайденнойСтроки = НайденнаяСтрокаДерева.ПолучитьРодителя();
	ТипУпаковкиГдеНашли     = Неопределено;
	
	ПослеУспешногоОбнаруженияОтсканированногоШтрихкодаВДереве(НайденнаяСтрокаДерева, 
	                                                          ТекущаяСтрокаДерева,
	                                                          РодительНайденнойСтроки,
	                                                          ТребуетсяОткрытиеФормыВыбораДействия,
	                                                          ТипУпаковкиГдеНашли,
	                                                          ОбработкаДанныхТСД);
	
	Если Не ТребуетсяОткрытиеФормыВыбораДействия = Истина Тогда
		Если ОбработкаДанныхТСД Тогда
			ОбработатьПолученныеДанныеТСД(Истина);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("Штрихкод",                         ДанныеШтрихкода.Штрихкод);
	ПараметрыОткрытияФормы.Вставить("ШтрихкодНайден",                   Истина);
	ПараметрыОткрытияФормы.Вставить("ТипУпаковкиНайденного",            НайденнаяСтрокаДерева.ТипУпаковки);
	ПараметрыОткрытияФормы.Вставить("СледующийСтикерОтложено",          СледующийСтикерОтложено);
	ПараметрыОткрытияФормы.Вставить("НомерСтикераОтложено",             НайденнаяСтрокаДерева.НомерСтикераОтложено);
	ПараметрыОткрытияФормы.Вставить("РежимПроверки",                    РежимПроверки);
	ПараметрыОткрытияФормы.Вставить("РежимПодбораСуществующихУпаковок", РежимПодбораСуществующихУпаковок);
	ПараметрыОткрытияФормы.Вставить("СтатусПроверки",                   НайденнаяСтрокаДерева.СтатусПроверки);
	ПараметрыОткрытияФормы.Вставить("НеСодержитсяВДанныхДокумента",     НайденнаяСтрокаДерева.НеСодержитсяВДанныхДокумента);
	ПараметрыОткрытияФормы.Вставить("ШтрихкодУпаковкиГдеДолжноБыть",    ?(РодительНайденнойСтроки = Неопределено, "", РодительНайденнойСтроки.Штрихкод));
	
	ПараметрыОткрытияФормы.Вставить("ДобавленныеУпаковки",              ДобавленныеУпаковки);
	ПараметрыОткрытияФормы.Вставить("ДоступныеДляПроверкиУпаковки",     ДоступныеДляПроверкиУпаковки);
	ПараметрыОткрытияФормы.Вставить("УпаковкиДокумента",                УпаковкиДокумента);
	
	ПараметрыОткрытияФормы.Вставить("ТипУпаковкиГдеДолжноНаходиться",   ?(РодительНайденнойСтроки = Неопределено, Неопределено, РодительНайденнойСтроки.ТипУпаковки));
	ПараметрыОткрытияФормы.Вставить("ТипУпаковкиНайденного",            НайденнаяСтрокаДерева.ТипУпаковки); 
	ПараметрыОткрытияФормы.Вставить("ТипУпаковкиГдеНашли",              ТипУпаковкиГдеНашли);
	ПараметрыОткрытияФормы.Вставить("ДетализацияСтруктурыХранения",     ДетализацияСтруктурыХранения);
	
	ПараметрыОткрытияФормы.Вставить("ОбработкаДанныхТСД",               ОбработкаДанныхТСД);
	
	ДополнительныеПараметры = Новый  Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторНайденнойСтроки", ИдентификаторНайденнойСтроки);
	ДополнительныеПараметры.Вставить("ОбработкаДанныхТСД", ОбработкаДанныхТСД);
	
	ОповещениеПослеВыбораДействия = Новый ОписаниеОповещения("ВыборДействияПоРезультатамВводаШтрихкодаПриЗавершении", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму(
		"Обработка.ПроверкаИПодборАлкогольнойПродукцииЕГАИС.Форма.ВыборДействияПоРезультатамВводаШтрихкода",
		ПараметрыОткрытияФормы, ЭтотОбъект, УникальныйИдентификатор,,,
		ОповещениеПослеВыбораДействия, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНеНайденныйВДеревеШтрихкод(ДанныеШтрихкода, ТекущаяСтрокаДерева, ОбработкаДанныхТСД)
	
	ПараметрыСканирования = ПараметрыСканирования();
	ЭтоШтрихкодЛогистическойУпаковки   = (ДанныеШтрихкода.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая"));
	ЭтоШтрихкодПотребительскойУпаковки = (ДанныеШтрихкода.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская"));
	ЭтоАлкогольнаяПродукция = (ДанныеШтрихкода.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная"))
		Или (ПараметрыСканирования.ТолькоЕГАИС
			И ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииЕГАИС().Найти(ДанныеШтрихкода.ВидПродукции) <> Неопределено);
	
	Если РежимПодбораСуществующихУпаковок
		И ЭтоШтрихкодПотребительскойУпаковки
		И ЭтоАлкогольнаяПродукция Тогда
		
		ДанныеШтрихкода.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар");
		
		Если ПараметрыСканирования.ДоступныеСтатусы.Количество() > 0
			И ПараметрыСканирования.ДоступныеСтатусы.Найти(ПредопределенноеЗначение("Перечисление.СтатусыАкцизныхМарок.ПустаяСсылка")) = Неопределено Тогда
			
			ДанныеШтрихкода.Вставить("ЕстьОшибки",  Истина);
			ДанныеШтрихкода.Вставить("ТекстОшибки", НСтр("ru = 'Запрещено добавлять алкогольную продукцию с неопределенным статусом акцизной марки'"));
			
			ШтрихкодированиеЕГАИСКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(ЭтотОбъект, ДанныеШтрихкода);
			
			Возврат;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеШтрихкода.АлкогольнаяПродукция) Тогда
			
			ДанныеШтрихкода.Вставить("ЕстьОшибки",  Истина);
			ДанныеШтрихкода.Вставить("ТекстОшибки", НСтр("ru = 'Не удалось идентифицировать алкогольную продукцию'"));
			
			ШтрихкодированиеЕГАИСКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(ЭтотОбъект, ДанныеШтрихкода);
			
			Возврат;
			
		КонецЕсли;
		
		ОшибкаКонтроля = Ложь;
		
		Если ШтрихкодированиеЕГАИСКлиентСервер.ЭтоЧастичноеВыбытие(ДанныеШтрихкода) Тогда
			Количество = ДанныеШтрихкода.Количество;
		Иначе
			Количество = 0;
		КонецЕсли;
		ДанныеШтрихкода.Вставить("ЧастичноеВыбытиеКоличество", Количество);
		
		ОпределениеСправок2ПриДобавленииСтроки(ЭтотОбъект, ДанныеШтрихкода, ОшибкаКонтроля);
		
		Если ОшибкаКонтроля Тогда
			
			ДанныеШтрихкода.Вставить("ЕстьОшибки",  Истина);
			ДанныеШтрихкода.Вставить("ТекстОшибки", ИнтеграцияЕГАИСКлиентСервер.ТекстОшибкиНеСоответствуютДокументуОснованию(ДанныеШтрихкода));
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ОбработкаДанныхТСД", ОбработкаДанныхТСД);
			
			ОповещениеЗакрытияФормы = Новый ОписаниеОповещения("ИнформацияОНевозможностиДобавленияОтсканированногоПослеЗакрытия", ЭтотОбъект, ДополнительныеПараметры);
			
			ШтрихкодированиеЕГАИСКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(ЭтотОбъект, ДанныеШтрихкода, ОповещениеЗакрытияФормы);
			
			Возврат;
			
		Иначе
			
			ДобавитьНовуюАлкогольнуюПродукциюВДерево(ДанныеШтрихкода, Неопределено, ОбработкаДанныхТСД);
			Если ОбработкаДанныхТСД Тогда
				ОбработатьПолученныеДанныеТСД(Истина);
			КонецЕсли;
			
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли ЭтоАлкогольнаяПродукция Тогда
		
		НайденнаяСправка2             = Неопределено;
		НайденнаяАлкогольнаяПродукция = ДанныеШтрихкода.АлкогольнаяПродукция;
		
		Если ЭтоШтрихкодПотребительскойУпаковки Тогда
			
			Если ЗначениеЗаполнено(НайденнаяАлкогольнаяПродукция)
				И ПулНеизвестныхАкцизныхМарок.Количество() > 0 Тогда
				
				ПараметрыПоиска = Новый Структура;
				ПараметрыПоиска.Вставить("АлкогольнаяПродукция", НайденнаяАлкогольнаяПродукция);
				
				Если СтрДлина(ДанныеШтрихкода.Штрихкод) = 150 Тогда
					ПараметрыПоиска.Вставить("Поштучная", Истина);
				КонецЕсли;
				
				МассивСтрокПулаПоАлкогольнойПродукции = ПулНеизвестныхАкцизныхМарок.НайтиСтроки(ПараметрыПоиска);
				Если МассивСтрокПулаПоАлкогольнойПродукции.Количество() > 0 Тогда
					
					Для Каждого СтрокаПула Из МассивСтрокПулаПоАлкогольнойПродукции Цикл
						
						Если СтрокаПула.Количество = 0 Тогда
							Продолжить;
						КонецЕсли;
						
						НайденнаяСправка2 = СтрокаПула.Справка2;
						ДанныеШтрихкода.Вставить("Справка2", НайденнаяСправка2);
						
						Если РежимПроверки = ПредопределенноеЗначение("Перечисление.ВариантыПроверкиПоступившейПродукцииИС.ОставлятьТамГдеНайдены")
						 Или ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковки")Тогда
							
							ДобавитьНовуюАлкогольнуюПродукциюВДерево(ДанныеШтрихкода);
							Если ОбработкаДанныхТСД Тогда
								ОбработатьПолученныеДанныеТСД(Истина);
							КонецЕсли;
							Возврат;
							
						Иначе
							
							СтрокаПроверяемойУпаковки = СтрокаТекущейПроверяемойУпаковки(ЭтотОбъект, Ложь);
							Если СтрокаПроверяемойУпаковки.НеСодержитсяВДанныхДокумента
							 Или СтрокаПроверяемойУпаковки.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаАлкогольнойПродукции.БутылкиБезКоробки") Тогда
								
								ДобавитьНовуюАлкогольнуюПродукциюВДерево(ДанныеШтрихкода);
								Если ОбработкаДанныхТСД Тогда
									ОбработатьПолученныеДанныеТСД(Истина);
								КонецЕсли;
								Возврат;
								
							КонецЕсли;
						
						КонецЕсли;
						
					КонецЦикла
					
				КонецЕсли;
			
			КонецЕсли;
			
			ДанныеШтрихкода.Вставить("ЕстьОшибки", Истина);
			ДанныеШтрихкода.Вставить("ТекстОшибки", НСтр("ru = 'Продукция отсутствует в данных документа.'"));
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ОбработкаДанныхТСД", ОбработкаДанныхТСД);
			
			ОповещениеЗакрытияФормы = Новый ОписаниеОповещения("ИнформацияОНевозможностиДобавленияОтсканированногоПослеЗакрытия", ЭтотОбъект, ДополнительныеПараметры);
			
			ШтрихкодированиеЕГАИСКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(ЭтотОбъект, ДанныеШтрихкода, ОповещениеЗакрытияФормы);
			
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		НайденнаяСправка2             = Неопределено;
		НайденнаяАлкогольнаяПродукция = Неопределено;
		
	КонецЕсли;
	
	Если ДанныеШтрихкода.МаркируемаяПродукция = Истина
		И Не ЗначениеЗаполнено(ДанныеШтрихкода.ТипШтрихкода) Тогда
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Номенклатура"  ,        ДанныеШтрихкода.Номенклатура);
		ПараметрыОткрытияФормы.Вставить("Характеристика",        ДанныеШтрихкода.Характеристика);
		ПараметрыОткрытияФормы.Вставить("ПараметрыСканирования", ПараметрыСканирования);
		
		ОткрытьФорму(
			"Обработка.РаботаСАкцизнымиМаркамиЕГАИС.Форма.ФормаВводаАкцизнойМарки",
			ПараметрыОткрытияФормы,
			ЭтотОбъект,,,,
			Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект));
			
		Возврат;
		
	КонецЕсли;
	
	Если ЭтоШтрихкодЛогистическойУпаковки
		И ЭтоАлкогольнаяПродукция Тогда
		
		ТипУпаковкиНайденного = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МонотоварнаяУпаковка");
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Штрихкод",                             ДанныеШтрихкода.Штрихкод);
		ПараметрыОткрытияФормы.Вставить("АдресПулаНеизвестныхАкцизныхМарок",    ДанныеПулаНеизвестныхАкцизныхМарок());
		ПараметрыОткрытияФормы.Вставить("ШтрихкодНайден",                       Ложь);
		ПараметрыОткрытияФормы.Вставить("НайденнаяАлкогольнаяПродукция",        НайденнаяАлкогольнаяПродукция);
		ПараметрыОткрытияФормы.Вставить("НайденнаяСправка2",                    НайденнаяСправка2);
		ПараметрыОткрытияФормы.Вставить("РежимПроверки",                        РежимПроверки);
		ПараметрыОткрытияФормы.Вставить("ЭтоШтрихкодАлкогольнойПродукции",      ЭтоШтрихкодПотребительскойУпаковки);
		ПараметрыОткрытияФормы.Вставить("УпаковкаНеСодержитсяВДанныхДокумента", УпаковкаНеСодержитсяВДанныхДокумента(ТекущаяСтрокаДерева, ДетализацияСтруктурыХранения));
		ПараметрыОткрытияФормы.Вставить("ТипУпаковкиНайденного",                ТипУпаковкиНайденного);
		ПараметрыОткрытияФормы.Вставить("РежимПодбораСуществующихУпаковок",     РежимПодбораСуществующихУпаковок);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОбработкаДанныхТСД", ОбработкаДанныхТСД);
		
		ОповещениеПослеВыбораДействия = Новый ОписаниеОповещения(
			"ВыборДействияПоРезультатамВводаШтрихкодаПриЗавершении",
			ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму(
			"Обработка.ПроверкаИПодборАлкогольнойПродукцииЕГАИС.Форма.ВыборДействияПоРезультатамВводаШтрихкода",
			ПараметрыОткрытияФормы, ЭтотОбъект, УникальныйИдентификатор,,,
			ОповещениеПослеВыбораДействия, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		ДанныеШтрихкода.Вставить("ЕстьОшибки",  Истина);
		ДанныеШтрихкода.Вставить("ТекстОшибки", НСтр("ru = 'Недопустимый формат штрихкода'"));
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОбработкаДанныхТСД", ОбработкаДанныхТСД);
		
		ОповещениеЗакрытияФормы = Новый ОписаниеОповещения(
			"ИнформацияОНевозможностиДобавленияОтсканированногоПослеЗакрытия",
			ЭтотОбъект, ДополнительныеПараметры);
		
		ШтрихкодированиеЕГАИСКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(
			ЭтотОбъект, ДанныеШтрихкода, ОповещениеЗакрытияФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьШтрихкодВДеревеМаркированнойПродукции(ДанныеШтрихкода, ОбработкаДанныхТСД = Ложь)
	
	ТекущаяСтрокаДерева = Элементы.ДеревоМаркированнойПродукции.ТекущиеДанные;
	
	Если ТипЗнч(ДанныеШтрихкода.Штрихкод) = Тип("Структура") Тогда
		
		ДанныеШтрихкода.Штрихкод = ДанныеШтрихкода.Штрихкод.Штрихкод;
		
	КонецЕсли;
	
	ИдентификаторНайденнойСтроки = ИдентификаторСтрокиДереваПоШтрихкоду(ДанныеШтрихкода.Штрихкод);
	
	Если ИдентификаторНайденнойСтроки <> -1 Тогда
		
		ОбработатьСканированиеИмеющегосяВДеревеШтрихкода(ДанныеШтрихкода,
		                                                 ТекущаяСтрокаДерева,
		                                                 ИдентификаторНайденнойСтроки,
		                                                 ОбработкаДанныхТСД);
		
	ИначеЕсли РежимПодбораСуществующихУпаковок И ЗначениеЗаполнено(ДанныеШтрихкода.ШтрихкодУпаковки)
		И (ДанныеШтрихкода.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МонотоварнаяУпаковка")
			Или ДанныеШтрихкода.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МультитоварнаяУпаковка")) Тогда
		
		Результат = РезультатДобавленияСуществующейУпаковкиВДеревоМаркированнойПродукции(ДанныеШтрихкода,
			СоответствиеШтрихкодовСтрокДерева, ПараметрыСканирования(), ОбработкаДанныхТСД);
		
		Если Результат.ЕстьОшибки Тогда
			
			ПараметрыОткрытияФормы = ШтрихкодированиеИСКлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного();
			ПараметрыОткрытияФормы.АдресДереваУпаковок = Результат.АдресХранилищаДереваУпаковки;
			
			ШтрихкодированиеЕГАИСКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(ЭтотОбъект, ПараметрыОткрытияФормы);
			
		ИначеЕсли Результат.ТребуетсяСбросКонтекстаПроверки Тогда
			
			ИзменитьКонтекстПроверки(Неопределено);
			
		КонецЕсли;
		
		Если ОбработкаДанныхТСД Тогда
			ОбработатьПолученныеДанныеТСД(Не Результат.ЕстьОшибки);
		КонецЕсли;
		
	Иначе
		
		ОбработатьНеНайденныйВДеревеШтрихкод(ДанныеШтрихкода,
		                                     ТекущаяСтрокаДерева,
		                                     ОбработкаДанныхТСД);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьШтрихкодВТаблицеНеМаркированнойПродукции(ДанныеШтрихкода, ШтрихкодОбработан, ОбработкаДанныхТСД)
	
	Если ОбработкаДанныхТСД
		И ЗагрузкаДанныхТСД.ТекущаяОперация <> "ПартионнаяАлкогольнаяПродукция" Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ДанныеШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.PDF417")
		Или ДанныеШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.DataMatrix") Тогда
		
		Возврат;
		
	ИначеЕсли ДанныеШтрихкода.МаркируемаяПродукция = Истина Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если РежимПодбораСуществующихУпаковок Тогда
		
		Если ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура)
			И Не ЗначениеЗаполнено(ДанныеШтрихкода.ТипУпаковки) Тогда
			
			ОтработатьСканированиеНеМаркированнойПродукцииВДеревеПодобраннойПродукции(ЭтотОбъект,
			                                                                          ДанныеШтрихкода,
			                                                                          ШтрихкодОбработан);
			
		КонецЕсли;
		
	Иначе
		
		Если ТаблицаШтрихкодовНеМаркируемойПродукции.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("Штрихкод", ДанныеШтрихкода.Штрихкод);
		
		НайденныеСтроки = ТаблицаШтрихкодовНеМаркируемойПродукции.НайтиСтроки(ПараметрыПоиска);
		Если НайденныеСтроки.Количество() <> 1
			Или Не ЗначениеЗаполнено(НайденныеСтроки[0].АлкогольнаяПродукция) Тогда
			Возврат;
		КонецЕсли;
		
		НайденнаяСтрока = НайденныеСтроки[0];
		КоличествоКРаспределениюПоШтриховомуКоду = ДанныеШтрихкода.Количество * ?(НайденнаяСтрока.Коэффициент = 0,1,НайденнаяСтрока.Коэффициент);
		
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("АлкогольнаяПродукция", НайденнаяСтрока.АлкогольнаяПродукция);
		
		НайденныеСтроки = ТаблицаНеМаркируемойПродукции.НайтиСтроки(ПараметрыПоиска);
		
		КоличествоНайденныхСтрок = НайденныеСтроки.Количество();
		ОбрабатываемаяСтрока = 1;
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			КоличествоКРаспределениюВСтроке = НайденнаяСтрока.КоличествоПоДокументу - НайденнаяСтрока.КоличествоФактическое;
			
			Если КоличествоКРаспределениюВСтроке > КоличествоКРаспределениюПоШтриховомуКоду
				Или ОбрабатываемаяСтрока = КоличествоНайденныхСтрок Тогда
				
				НайденнаяСтрока.КоличествоФактическое = НайденнаяСтрока.КоличествоФактическое + КоличествоКРаспределениюПоШтриховомуКоду;
				Прервать;
				
			Иначе
				
				НайденнаяСтрока.КоличествоФактическое = НайденнаяСтрока.КоличествоФактическое + КоличествоКРаспределениюВСтроке;
				КоличествоКРаспределениюПоШтриховомуКоду = КоличествоКРаспределениюПоШтриховомуКоду - КоличествоКРаспределениюВСтроке;
				ОбрабатываемаяСтрока = ОбрабатываемаяСтрока + 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если КоличествоНайденныхСтрок > 0 Тогда
			ШтрихкодОбработан = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбработкаДанныхТСД Тогда
		ОбработатьПолученныеДанныеТСД(ШтрихкодОбработан);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныеШтрихкода, ДополнительныеПараметры) Экспорт
	
	Если ДанныеШтрихкода = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаДанныхТСД = Ложь;
	Если ДополнительныеПараметры <> Неопределено
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
			ДополнительныеПараметры, "ОбработкаДанныхТСД")
			И ДополнительныеПараметры.ОбработкаДанныхТСД <> Неопределено Тогда
		ОбработкаДанныхТСД = ДополнительныеПараметры.ОбработкаДанныхТСД;
	КонецЕсли;
	
	// Если штрихкод упаковки найден в соответствии СоответствиеШтрихкодовСтрокДерева, то детальные
	// данные по штрихкоду не собираются. В этом случае в ДанныеШтрихкода есть 2 поля: Штрихкод и Количество.
	Если ДанныеШтрихкода.Свойство("ШтрихкодУпаковки") Тогда
		
		ОбработатьОтсканированныйШтрихкод(ДанныеШтрихкода, ОбработкаДанныхТСД);
		
	Иначе
		
		Штрихкод = ДанныеШтрихкода.Штрихкод;
		
		ТекущаяСтрокаДерева = Элементы.ДеревоМаркированнойПродукции.ТекущиеДанные;
		
		ИдентификаторСтрокиДерева = ИдентификаторСтрокиДереваПоШтрихкоду(Штрихкод);
		
		ОбработатьСканированиеИмеющегосяВДеревеШтрихкода(ДанныеШтрихкода,
		                                                 ТекущаяСтрокаДерева,
		                                                 ИдентификаторСтрокиДерева,
		                                                 ОбработкаДанныхТСД);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборДействияПоРезультатамВводаШтрихкодаПриЗавершении(Результат, ДополнительныеПараметры) Экспорт
	
	ОбработкаДанныхТСД = Ложь;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ОбработкаДанныхТСД") 
		И ДополнительныеПараметры.ОбработкаДанныхТСД  Тогда
		
		ОбработкаДанныхТСД = Истина;
		
	КонецЕсли;
	
	Если Результат = Неопределено
		Или Результат = КодВозвратаДиалога.Отмена Тогда
		Если ОбработкаДанныхТСД Тогда
			ОбработатьПолученныеДанныеТСД(Ложь);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Не ТипЗнч(Результат) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.ВидДействия = "ДобавлениеАлкогольнойПродукции" Тогда
		
		ДобавитьНовуюАлкогольнуюПродукциюВДерево(Результат);
	
	ИначеЕсли Результат.ВидДействия = "ПереместитьУпаковкуВДругуюУпаковку" Тогда
		
		ПереместитьУпаковкуВДругуюУпаковку(ДополнительныеПараметры.ИдентификаторНайденнойСтроки, 
		                                   Результат.ШтрихкодУпаковкиНазначения,
		                                   Результат.СтатусПроверки);
		
	ИначеЕсли Результат.ВидДействия = "ПереместитьБутылкуВДругуюУпаковку" Тогда
		
		ПереместитьБутылкуВДругуюУпаковку(ДополнительныеПараметры.ИдентификаторНайденнойСтроки, 
		                                  Результат.ШтрихкодУпаковкиНазначения,
		                                  Результат.СтатусПроверки);
		
	ИначеЕсли Результат.ВидДействия = "ПереместитьВБутылкиБезУпаковки" Тогда
		
		ПереместитьВБутылкиБезУпаковки(ДополнительныеПараметры.ИдентификаторНайденнойСтроки,
		                               ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии"),
		                               Результат.ИзменятьКонтекстПроверки);
		
	ИначеЕсли Результат.ВидДействия = "ПоместитьНовуюВБутылкиБезУпаковки" Тогда
		
		ПоместитьНовуюВБутылкиБезУпаковки(Результат);
		
	ИначеЕсли Результат.ВидДействия = "ОтложитьНайденноеВДругоеМесте" Тогда
		
		ТекущиеДанныеДерева = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ДополнительныеПараметры.ИдентификаторНайденнойСтроки);
		Если ТекущиеДанныеДерева <> Неопределено Тогда
			
			ОтметитьСтрокуКакОтложенную(ТекущиеДанныеДерева);
			
		КонецЕсли;
		
	ИначеЕсли Результат.ВидДействия = "ИзменитьКонтекстПроверки" Тогда
		
		ТекущиеДанныеДерева = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ДополнительныеПараметры.ИдентификаторНайденнойСтроки);
		
		Если ТекущиеДанныеДерева <> Неопределено Тогда
			
			ОтметитьСтрокуКакНайденную(ТекущиеДанныеДерева);
			ИзменитьКонтекстПроверки(ТекущиеДанныеДерева.ПолучитьРодителя());
			
		КонецЕсли;
		
	ИначеЕсли Результат.ВидДействия = "ДобавитьНовуюУпаковку" Тогда
		
		ДобавитьНовуюУпаковку(Результат.Штрихкод,
		                      ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МонотоварнаяУпаковка"),
		                      Истина,
		                      ОбработкаДанныхТСД);
		
	КонецЕсли;
	
	Если ОбработкаДанныхТСД Тогда
		ОбработатьПолученныеДанныеТСД(Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтсканированныйШтрихкод(ДанныеШтрихкода, ОбработкаДанныхТСД = Ложь)

	Если ДанныеШтрихкода = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ШтрихкодированиеЕГАИСКлиентСервер.ОбработатьСохраненныйВыборДанныхПоАлкогольнойПродукции(ЭтотОбъект, ДанныеШтрихкода);
	
	ШтрихкодОбработан = Ложь;
	
	Если ЕстьНеМаркируемая
		Или Не КонтролироватьСканируемуюПродукциюПоДокументуОснованию Тогда
		
		ПроверитьШтрихкодВТаблицеНеМаркированнойПродукции(ДанныеШтрихкода, ШтрихкодОбработан, ОбработкаДанныхТСД);
		
	КонецЕсли;
	
	Если (ЕстьМаркируемая
		Или РежимПодбораСуществующихУпаковок)
		И Не ШтрихкодОбработан Тогда
		
		ПроверитьШтрихкодВДеревеМаркированнойПродукции(ДанныеШтрихкода, ОбработкаДанныхТСД);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияОНевозможностиДобавленияОтсканированногоПослеЗакрытия(Результат, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Свойство("ОбработкаДанныхТСД")
		И ДополнительныеПараметры.ОбработкаДанныхТСД Тогда
		ОбработатьПолученныеДанныеТСД(Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПулНеизвестныхАкцизныхМарок

&НаКлиенте
Функция ДанныеПулаНеизвестныхАкцизныхМарок()
	
	Если ПулНеизвестныхАкцизныхМарок.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат АдресПулаНеизвестныхАкцизныхМарок(ПулНеизвестныхАкцизныхМарок);
	КонецЕсли;

КонецФункции

&НаСервереБезКонтекста
Функция АдресПулаНеизвестныхАкцизныхМарок(Знач ПулНеизвестныхАкцизныхМарок)
	
	Возврат ПоместитьВоВременноеХранилище(ПулНеизвестныхАкцизныхМарок.Выгрузить());
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьДанныеПулаАлкогольнойПродукции(Форма, СтрокаИзменений, Добавить)

	СтруктураПоиска = Новый Структура;
	
	СтруктураПоиска.Вставить("АлкогольнаяПродукция", СтрокаИзменений.АлкогольнаяПродукция);
	СтруктураПоиска.Вставить("Справка2", СтрокаИзменений.Справка2);
	
	НайденныеСтроки = Форма.ПулНеизвестныхАкцизныхМарок.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
		Если Добавить Тогда
			
			НайденнаяСтрока.Количество = НайденнаяСтрока.Количество + 1;
			Прервать;
			
		Иначе
			
			Если НайденнаяСтрока.Количество > 0 Тогда
				
				НайденнаяСтрока.Количество = НайденнаяСтрока.Количество - 1;
				Прервать;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

	Если Добавить И НайденныеСтроки.Количество() = 0 Тогда
		
		НоваяСтрока = Форма.ПулНеизвестныхАкцизныхМарок.Добавить();
		НоваяСтрока.АлкогольнаяПродукция = СтрокаИзменений.АлкогольнаяПродукция;
		НоваяСтрока.Справка2             = СтрокаИзменений.Справка2;
		НоваяСтрока.Количество           = 1;
		
	КонецЕсли;
	
	ИзменитьДанныеНеМаркированнойПродукции(Форма, СтрокаИзменений, Добавить);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьДанныеНеМаркированнойПродукции(Форма, СтрокаИзменений, Добавить)
	
	СтруктураПоиска = Новый Структура;
	
	СтруктураПоиска.Вставить("АлкогольнаяПродукция", СтрокаИзменений.АлкогольнаяПродукция);
	СтруктураПоиска.Вставить("Справка2", СтрокаИзменений.Справка2);
	
	НайденныеСтроки = Форма.ТаблицаНеМаркируемойПродукции.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
		Если Добавить Тогда
			
			НайденнаяСтрока.КоличествоПоДокументу = НайденнаяСтрока.КоличествоПоДокументу + 1;
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаИзменений, "СтатусПроверки") Тогда
				Если СтрокаИзменений.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии")
				 ИЛИ СтрокаИзменений.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась") Тогда
					НайденнаяСтрока.КоличествоФактическое = НайденнаяСтрока.КоличествоФактическое + 1;
				КонецЕсли;
			КонецЕсли;
			
			Прервать;
			
		Иначе
			
			НайденнаяСтрока.КоличествоПоДокументу = НайденнаяСтрока.КоличествоПоДокументу - 1;
			
			Если НайденнаяСтрока.КоличествоПоДокументу = 0 Тогда
				
				Форма.ТаблицаНеМаркируемойПродукции.Удалить(НайденнаяСтрока);
				Форма.КоличествоСтрокНеМаркируемойПродукции = Форма.КоличествоСтрокНеМаркируемойПродукции -1;
				
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Добавить И НайденныеСтроки.Количество() = 0 Тогда
		
		НоваяСтрока = Форма.ТаблицаНеМаркируемойПродукции.Добавить();
		НоваяСтрока.АлкогольнаяПродукция  = СтрокаИзменений.АлкогольнаяПродукция;
		НоваяСтрока.Справка2              = СтрокаИзменений.Справка2;
		НоваяСтрока.КоличествоПоДокументу = 1;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаИзменений, "СтатусПроверки") Тогда
			Если СтрокаИзменений.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии")
			 ИЛИ СтрокаИзменений.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась") Тогда
				НоваяСтрока.КоличествоФактическое = 1;
			КонецЕсли;
		КонецЕсли;
		
		Форма.КоличествоСтрокНеМаркируемойПродукции = Форма.КоличествоСтрокНеМаркируемойПродукции + 1;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПеремещениеДобавлениеБутылокИУпаковок

&НаКлиенте
Процедура ДобавитьНовуюУпаковку(Штрихкод, ТипУпаковки, СпозиционироватьсяНаДобавленной = Истина, ОбработкаДанныхТСД = Ложь)
	
	УпаковкаНеСодержитсяВДанныхДокумента = Ложь;
	
	Если ОбработкаДанныхТСД Тогда
		
			ТекущаяПроверяемаяУпаковка = СтрокаТекущейПроверяемойУпаковкиТСД(ЭтотОбъект, Истина);
			Если Не ТекущаяПроверяемаяУпаковка = Неопределено Тогда
				УпаковкаНеСодержитсяВДанныхДокумента = ТекущаяПроверяемаяУпаковка.НеСодержитсяВДанныхДокумента;
			КонецЕсли;
		
	Иначе
	
		Если ИдентификаторТекущейПроверяемойУпаковки = - 1
			Или ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками") Тогда
			
			ТекущаяПроверяемаяУпаковка = Неопределено;
			
		Иначе
			
			ТекущаяПроверяемаяУпаковка = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторТекущейПроверяемойУпаковки);
			Если Не ТекущаяПроверяемаяУпаковка = Неопределено Тогда
				УпаковкаНеСодержитсяВДанныхДокумента = ТекущаяПроверяемаяУпаковка.НеСодержитсяВДанныхДокумента;
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
	Если ТекущаяПроверяемаяУпаковка = Неопределено Тогда
		
		НоваяСтрока = ДеревоМаркированнойПродукции.ПолучитьЭлементы().Добавить();
		
	ИначеЕсли РежимПроверки = ПредопределенноеЗначение("Перечисление.ВариантыПроверкиПоступившейПродукцииИС.ПеремещатьТудаГдеДолжныБыть")
		И (Не УпаковкаНеСодержитсяВДанныхДокумента) Тогда
		
		НоваяСтрока = ДеревоМаркированнойПродукции.ПолучитьЭлементы().Добавить();
		
	Иначе
		
		НоваяСтрока = ТекущаяПроверяемаяУпаковка.ПолучитьЭлементы().Добавить();
		
	КонецЕсли;
	
	НоваяСтрока.Штрихкод                     = Штрихкод;
	НоваяСтрока.ТипУпаковки                  = ?(ЗначениеЗаполнено(ТипУпаковки), ТипУпаковки, ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МонотоварнаяУпаковка"));
	НоваяСтрока.НеСодержитсяВДанныхДокумента = Истина;
	НоваяСтрока.ИндексКартинкиШтрихкод       = 0;
	
	Если Не РежимПодбораСуществующихУпаковок Тогда
		НоваяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась");
	Иначе
		НоваяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии");
	КонецЕсли;
	
	ДобавленныеУпаковки.Добавить(Штрихкод);
	
	ПроверкаИПодборПродукцииЕГАИСКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(НоваяСтрока, Ложь, ЗагрузкаДанныхТСД);
	ПроверкаИПодборПродукцииЕГАИСКлиентСервер.УстановитьИндексКартинкиСтатусаПроверки(НоваяСтрока);
	ПроверкаИПодборПродукцииЕГАИСКлиентСервер.УстановитьДоступностьУпаковкиДляПроверки(НоваяСтрока, ДоступныеДляПроверкиУпаковки);
	ПроверкаИПодборПродукцииЕГАИСКлиентСервер.СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(НоваяСтрока);
	
	ИдентификаторСтроки = НоваяСтрока.ПолучитьИдентификатор();
	
	Если ОбработкаДанныхТСД Тогда
		Если ЗагрузкаДанныхТСД.ТекущаяОперация = "ЕдинственнаяУпаковка"
			Или ЗагрузкаДанныхТСД.ТекущаяОперация = "УпаковкаССодержимым" Тогда
			ЗагрузкаДанныхТСД.ИдентификаторУпаковки = ИдентификаторСтроки;
		КонецЕсли;
		Если ЗагрузкаДанныхТСД.ЕстьИерархия Тогда
			ИзменитьКонтекстПроверки(НоваяСтрока);
		КонецЕсли;
	Иначе
		ИзменитьКонтекстПроверки(НоваяСтрока);
	КонецЕсли;
	
	ПроверкаИПодборПродукцииЕГАИСКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(НоваяСтрока, ЗагрузкаДанныхТСД);
	
	Если СпозиционироватьсяНаДобавленной Тогда
		
		СпозиционироватьсяНаСтрокеДерева(ЭтотОбъект, НоваяСтрока);
		
	КонецЕсли;
	
	СоответствиеШтрихкодовСтрокДерева.Вставить(НоваяСтрока.Штрихкод, ИдентификаторСтроки);
	ПриИзмененииМаркировкиСоставаУпаковкиНаСервере(ИдентификаторСтроки, Истина);
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПоместитьНовуюВБутылкиБезУпаковки(ДанныеШтрихкода)
	
	СтрокаБутылкиБезУпаковки = СтрокаБутылкиБезУпаковки(ЭтотОбъект);
	
	ДобавитьНовуюАлкогольнуюПродукциюВДерево(ДанныеШтрихкода, СтрокаБутылкиБезУпаковки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовуюАлкогольнуюПродукциюВДерево(ДанныеШтрихкода, ДобавлятьВУпаковку = Неопределено, ОбработкаДанныхТСД = Ложь)
	
	Если ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковки") Тогда
		
		НоваяСтрока = ДеревоМаркированнойПродукции.ПолучитьЭлементы().Добавить();
		
	Иначе
		
		Если ДобавлятьВУпаковку = Неопределено Тогда
			
			Если ОбработкаДанныхТСД
				И ЗагрузкаДанныхТСД.ИдентификаторУпаковки <> -1 Тогда
				
				ДобавлятьВУпаковку = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ЗагрузкаДанныхТСД.ИдентификаторУпаковки);
				
			ИначеЕсли ИдентификаторТекущейПроверяемойУпаковки = - 1 Тогда
				
				ДобавлятьВУпаковку = СтрокаБутылкиБезУпаковки(ЭтотОбъект);
				
			Иначе
				
				ДобавлятьВУпаковку = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторТекущейПроверяемойУпаковки);
				
			КонецЕсли;
			
			Если ДобавлятьВУпаковку = Неопределено Тогда
				ДобавлятьВУпаковку = СтрокаБутылкиБезУпаковки(ЭтотОбъект);
			КонецЕсли;
			
			НоваяСтрока = ДобавлятьВУпаковку.ПолучитьЭлементы().Добавить();
			
		Иначе
			
			НоваяСтрока = ДобавлятьВУпаковку.ПолучитьЭлементы().Добавить();
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеШтрихкода);
	НоваяСтрока.ТипУпаковки                  = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар");
	НоваяСтрока.НеСодержитсяВДанныхДокумента = Истина;
	
	Если Не РежимПодбораСуществующихУпаковок Тогда
		НоваяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась");
	Иначе
		НоваяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии");
	КонецЕсли;
	
	НоваяСтрока.ДлинаАкцизнойМарки = СтрДлина(НоваяСтрока.Штрихкод);
	
	ПроверкаИПодборПродукцииЕГАИСКлиентСервер.УстановитьИндексКартинкиТипаУпаковки(НоваяСтрока);
	ПроверкаИПодборПродукцииЕГАИСКлиентСервер.УстановитьИндексКартинкиСтатусаПроверки(НоваяСтрока);
	ПроверкаИПодборПродукцииЕГАИСКлиентСервер.СформироватьПредставлениеПроверкиПодчиненных(НоваяСтрока);
	ПроверкаИПодборПродукцииЕГАИСКлиентСервер.СформироватьПредставлениеСодержимогоУпаковки(НоваяСтрока);
	ПроверкаИПодборПродукцииЕГАИСКлиентСервер.СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(НоваяСтрока);
	ПроверкаИПодборПродукцииЕГАИСКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(НоваяСтрока, ЗагрузкаДанныхТСД);
	
	ИзменитьДанныеПулаАлкогольнойПродукции(ЭтотОбъект, ДанныеШтрихкода, Ложь);
	
	ИдентификаторСтроки = НоваяСтрока.ПолучитьИдентификатор();
	СоответствиеШтрихкодовСтрокДерева.Вставить(НоваяСтрока.Штрихкод, ИдентификаторСтроки);
	
	Если ДетализацияСтруктурыХранения <> ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковки")
		И ДобавлятьВУпаковку.ТипУпаковки <> ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаАлкогольнойПродукции.БутылкиБезКоробки") Тогда
		ПриИзмененииМаркировкиСоставаУпаковкиНаСервере(ИдентификаторСтроки, Истина);
	КонецЕсли;
	
	СпозиционироватьсяНаСтрокеДерева(ЭтотОбъект, НоваяСтрока);
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВБутылкиБезУпаковки(ИдентификаторСтрокиПеремещаемойБутылки, СтатусПроверки = Неопределено, ИзменятьКонтекстПроверки = Ложь)
	
	СтрокаНазначения   = СтрокаБутылкиБезУпаковки(ЭтотОбъект);
	ПеремещаемаяСтрока = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторСтрокиПеремещаемойБутылки);
	
	ПереместитьБутылку(ПеремещаемаяСтрока, СтрокаНазначения, СтатусПроверки);
	
	Если ИзменятьКонтекстПроверки Тогда
		ИзменитьКонтекстПроверки(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьБутылкуВДругуюУпаковку(ИдентификаторСтрокиПеремещаемойБутылки, ШтрихкодУпаковкиНазначения, СтатусПроверки = Неопределено)
	
	ИдентификаторСтрокиУпаковкиНазначения = ИдентификаторСтрокиДереваПоШтрихкоду(ШтрихкодУпаковкиНазначения);
	
	СтрокаНазначения   = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторСтрокиУпаковкиНазначения);
	ПеремещаемаяСтрока = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторСтрокиПеремещаемойБутылки);
	
	ПереместитьБутылку(ПеремещаемаяСтрока, СтрокаНазначения, СтатусПроверки);
	ИзменитьКонтекстПроверки(СтрокаНазначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьБутылку(СтрокаСБутылкой, НоваяУпаковка, СтатусПроверки = Неопределено)

	ТекущаяУпаковка = СтрокаСБутылкой.ПолучитьРодителя();
	
	НоваяСтрока = НоваяУпаковка.ПолучитьЭлементы().Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСБутылкой);
	Если СтатусПроверки <> Неопределено Тогда
		НоваяСтрока.СтатусПроверки = СтатусПроверки;
		ПроверкаИПодборПродукцииЕГАИСКлиентСервер.УстановитьИндексКартинкиСтатусаПроверки(НоваяСтрока);
	КонецЕсли;
	
	ТекущаяУпаковка.ПолучитьЭлементы().Удалить(СтрокаСБутылкой);
	
	ПроверкаИПодборПродукцииЕГАИСКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(ТекущаяУпаковка, Ложь, ЗагрузкаДанныхТСД);
	ПроверкаИПодборПродукцииЕГАИСКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(ТекущаяУпаковка, ЗагрузкаДанныхТСД);
	ПроверкаИПодборПродукцииЕГАИСКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(НоваяСтрока, ЗагрузкаДанныхТСД);
	
	МассивСтрокИзменившихсяУпаковок = Новый Массив;
	МассивСтрокИзменившихсяУпаковок.Добавить(НоваяУпаковка.ПолучитьИдентификатор());
	МассивСтрокИзменившихсяУпаковок.Добавить(ТекущаяУпаковка.ПолучитьИдентификатор());
	
	ПриИзмененииМаркировкиСоставаУпаковкиМассиваСтрок(МассивСтрокИзменившихсяУпаковок, Истина);
	
	СоответствиеШтрихкодовСтрокДерева.Вставить(НоваяСтрока.Штрихкод, НоваяСтрока.ПолучитьИдентификатор());
	
	СпозиционироватьсяНаСтрокеДерева(ЭтотОбъект, НоваяСтрока);
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПереместитьУпаковкуВДругуюУпаковку(ИдентификаторСтрокиПеремещаемойУпаковки, ШтрихкодУпаковкиНазначения, СтатусПроверки = Неопределено)
	
	ИдентификаторПеремещеннойСтроки = -1;
	Если ТипЗнч(ИдентификаторСтрокиПеремещаемойУпаковки) = Тип("ДанныеФормыЭлементДерева") Тогда
		ПеремещаемаяСтрока = ИдентификаторСтрокиПеремещаемойУпаковки;
	Иначе
		ПеремещаемаяСтрока = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторСтрокиПеремещаемойУпаковки);
	КонецЕсли;
	РодительПеремещаемойСтроки = ПеремещаемаяСтрока.ПолучитьРодителя();
	
	Если СтатусПроверки <> Неопределено Тогда
		ПеремещаемаяСтрока.СтатусПроверки = СтатусПроверки;
	КонецЕсли;
	
	МассивСтрокИзмененыхУпаковок = Новый Массив;
	
	Если ШтрихкодУпаковкиНазначения <> Неопределено Тогда
		
		Если ТипЗнч(ШтрихкодУпаковкиНазначения) = Тип("ДанныеФормыЭлементДерева") Тогда
			
			СтрокаНазначения = ШтрихкодУпаковкиНазначения;
			
		Иначе
			
			ИдентификаторСтрокиУпаковкиНазначения = ИдентификаторСтрокиДереваПоШтрихкоду(ШтрихкодУпаковкиНазначения);
			СтрокаНазначения = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторСтрокиУпаковкиНазначения);
	
		КонецЕсли;
				
		Если ИдентификаторСтрокиУпаковкиНазначения <> - 1 Тогда
			
			ПереместитьЭлементДерева(СтрокаНазначения,
			                         ПеремещаемаяСтрока,
			                         ИдентификаторПеремещеннойСтроки);
			
		КонецЕсли;
		
		ПроверкаИПодборПродукцииЕГАИСКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(СтрокаНазначения, Истина, ЗагрузкаДанныхТСД);
		МассивСтрокИзмененыхУпаковок.Добавить(СтрокаНазначения.ПолучитьИдентификатор());
	
	Иначе
		
		ПереместитьЭлементДерева(Неопределено,
		                         ПеремещаемаяСтрока,
		                         ИдентификаторПеремещеннойСтроки);
	
	КонецЕсли;
	
	ИзменитьКонтекстПроверки(СтрокаНазначения);
	
	Если РодительПеремещаемойСтроки <> Неопределено Тогда
		ПроверкаИПодборПродукцииЕГАИСКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(РодительПеремещаемойСтроки, Истина);
		МассивСтрокИзмененыхУпаковок.Добавить(РодительПеремещаемойСтроки.ПолучитьИдентификатор());
	КонецЕсли;
	
	Если МассивСтрокИзмененыхУпаковок.Количество() > 0 Тогда
		ПриИзмененииМаркировкиСоставаУпаковкиМассиваСтрок(МассивСтрокИзмененыхУпаковок, Истина);
	КонецЕсли;
	
	Элементы.ДеревоМаркированнойПродукции.ТекущаяСтрока = ИдентификаторПеремещеннойСтроки;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьЭлементДерева(СтрокаНазначение, ПеремещаемаяСтрока, ИдентификаторПеремещеннойСтроки, УдалятьПослеДобавления = Истина)
	
	Если Не ПеремещениеЭлементаДереваВозможно(СтрокаНазначение, ПеремещаемаяСтрока) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаНазначение = Неопределено Тогда
		НоваяСтрока = ДеревоМаркированнойПродукции.ПолучитьЭлементы().Добавить();
	Иначе
		НоваяСтрока = СтрокаНазначение.ПолучитьЭлементы().Добавить();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ПеремещаемаяСтрока);
	СоответствиеШтрихкодовСтрокДерева.Вставить(НоваяСтрока.Штрихкод, НоваяСтрока.ПолучитьИдентификатор());
	
	Для каждого Элемент Из ПеремещаемаяСтрока.ПолучитьЭлементы() Цикл
		ПереместитьЭлементДерева(НоваяСтрока, Элемент, ИдентификаторПеремещеннойСтроки, Ложь);
	КонецЦикла;
	
	Если УдалятьПослеДобавления Тогда
		
		РодительПеремещаемойСтроки = ПеремещаемаяСтрока.ПолучитьРодителя();
		Если РодительПеремещаемойСтроки <> Неопределено Тогда
			КоллекцияЭлементов = РодительПеремещаемойСтроки.ПолучитьЭлементы();
		Иначе
			КоллекцияЭлементов = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
		КонецЕсли;
		
		КоллекцияЭлементов.Удалить(ПеремещаемаяСтрока);
		ИдентификаторПеремещеннойСтроки = НоваяСтрока.ПолучитьИдентификатор();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПеремещениеЭлементаДереваВозможно(СтрокаНазначение, ПеремещаемаяСтрока)
	
	Если ПеремещаемаяСтрока = СтрокаНазначение Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ПеремещаемаяСтрока.ПолучитьРодителя() = СтрокаНазначение Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ПодчиненнаяСтрока Из ПеремещаемаяСтрока.ПолучитьЭлементы() Цикл
		
		Если ПодчиненнаяСтрока = СтрокаНазначение Тогда
			Возврат Ложь;
		КонецЕсли;
		
		РезультатПроверкиПодчиненнойСтроки = ПеремещениеЭлементаДереваВозможно(СтрокаНазначение, ПодчиненнаяСтрока);
		
		Если НЕ РезультатПроверкиПодчиненнойСтроки Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат Истина;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаБутылкиБезУпаковки(Форма)
	
	Возврат НайтиПоИдентификатору(Форма.ДеревоМаркированнойПродукции, Форма.ИдентификаторСтрокиБутылкиБезУпаковки);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаТекущейПроверяемойУпаковки(Форма, ЭтоУпаковка)
	
	Если Форма.ИдентификаторТекущейПроверяемойУпаковки = - 1 Тогда
		
		Если ЭтоУпаковка Тогда
			Возврат Неопределено;
		Иначе
			Возврат СтрокаБутылкиБезУпаковки(Форма);
		КонецЕсли;
		
	Иначе
		
		Если ЭтоУпаковка 
			И Форма.ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками") Тогда
			
			СтрокаДерева = НайтиПоИдентификатору(Форма.ДеревоМаркированнойПродукции, Форма.ИдентификаторТекущейПроверяемойУпаковки);
			СтрокаДерева.ИдетПроверкаДаннойУпаковки = Ложь;
			ПроверкаИПодборПродукцииЕГАИСКлиентСервер.УстановитьИндексКартинкиТипаУпаковки(СтрокаДерева);
			Возврат Неопределено;
			
		Иначе
			
			Возврат НайтиПоИдентификатору(Форма.ДеревоМаркированнойПродукции, Форма.ИдентификаторТекущейПроверяемойУпаковки);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СканированиеСуществующихУпаковокИАлкогольнойПродукции

&НаСервере
Процедура ПеренестиСтрокуСуществующейУпаковкиВДеревоМаркированнойПродукции(СтрокаИсточника,
	                                                                       КоллекцияСтрокПриемника, 
	                                                                       СоответствиеШтрихкодовСтрокДерева, 
	                                                                       СтатусПроверки, 
	                                                                       ЭтоПерваяДобавляемаяСтрока,
	                                                                       ОбработкаДанныхТСД)
	
	НоваяСтрока = КоллекцияСтрокПриемника.Добавить();
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточника);
	
	ИдентификаторДобавленнойСтроки = НоваяСтрока.ПолучитьИдентификатор();
	СоответствиеШтрихкодовСтрокДерева.Вставить(НоваяСтрока.Штрихкод, ИдентификаторДобавленнойСтроки);
	
	Если НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.ПустаяСсылка() Тогда
		НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
	ИначеЕсли НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
		НоваяСтрока.ДлинаАкцизнойМарки = СтрДлина(НоваяСтрока.Штрихкод);
	КонецЕсли;
	
	НоваяСтрока.СтатусПроверки               = СтатусПроверки;
	НоваяСтрока.НеСодержитсяВДанныхДокумента = Истина;
	
	ПроверкаИПодборПродукцииЕГАИСКлиентСервер.СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(НоваяСтрока);
	
	Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(НоваяСтрока.ТипУпаковки) Тогда
		УпаковкиДокумента.Добавить(НоваяСтрока.Штрихкод);
	КонецЕсли;
	
	КоллекцияСтрокДобавленнойСтроки = НоваяСтрока.ПолучитьЭлементы();
	
	Для Каждого ПодчиненнаяСтрокаИсточника Из СтрокаИсточника.Строки Цикл
		
		ПеренестиСтрокуСуществующейУпаковкиВДеревоМаркированнойПродукции(ПодчиненнаяСтрокаИсточника,
		                                                                 КоллекцияСтрокДобавленнойСтроки,
		                                                                 СоответствиеШтрихкодовСтрокДерева,
		                                                                 Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеПроверялась,
		                                                                 Ложь,
		                                                                 ОбработкаДанныхТСД);
		
	КонецЦикла;
	
	ОпределениеСправок2ПриДобавленииСтроки(ЭтотОбъект, НоваяСтрока);
	
	ПроверкаИПодборПродукцииЕГАИСКлиентСервер.УстановитьИндексКартинкиСтатусаПроверки(НоваяСтрока);
	ПроверкаИПодборПродукцииЕГАИСКлиентСервер.УстановитьИндексКартинкиТипаУпаковки(НоваяСтрока);
	ПроверкаИПодборПродукцииЕГАИСКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(НоваяСтрока, Ложь, ЗагрузкаДанныхТСД);
	ПроверкаИПодборПродукцииЕГАИСКлиентСервер.СформироватьПредставлениеПроверкиПодчиненных(НоваяСтрока);
	
	Если ЭтоПерваяДобавляемаяСтрока Тогда
	
		СпозиционироватьсяНаСтрокеДерева(ЭтотОбъект, НоваяСтрока);
		ПроверкаИПодборПродукцииЕГАИСКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(НоваяСтрока, ЗагрузкаДанныхТСД);
		ПроверкаИПодборПродукцииЕГАИСКлиентСервер.УстановитьДоступностьУпаковкиДляПроверки(НоваяСтрока, ДоступныеДляПроверкиУпаковки);
		
		Если ОбработкаДанныхТСД 
			И (ЗагрузкаДанныхТСД.ТекущаяОперация = "ЕдинственнаяУпаковка" 
			Или ЗагрузкаДанныхТСД.ТекущаяОперация = "УпаковкаССодержимым") Тогда
			
			ЗагрузкаДанныхТСД.ИдентификаторУпаковки = ИдентификаторДобавленнойСтроки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьДублиВОсканированнойУпаковке(ДеревоУпаковок, СоответствиеШтрихкодовСтрокДерева)
	
	ЕстьОшибки = Ложь;

	Если ДеревоУпаковок.Колонки.Найти("ЕстьОшибки") = Неопределено Тогда
		ДеревоУпаковок.Колонки.Добавить("ЕстьОшибки", Новый ОписаниеТипов("Булево"));
		ДеревоУпаковок.Колонки.Добавить("ТекстОшибки", ОбщегоНазначения.ОписаниеТипаСтрока(500));
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		ПроверитьНаДубльВСтрокеДерева(СтрокаДерева, СоответствиеШтрихкодовСтрокДерева, ЕстьОшибки)
		
	КонецЦикла;
	
	Возврат ЕстьОшибки;
	
КонецФункции

&НаСервере
Процедура ПроверитьНаДубльВСтрокеДерева(СтрокаДерева, СоответствиеШтрихкодовСтрокДерева, ЕстьОшибки)

	Если СоответствиеШтрихкодовСтрокДерева.Получить(СтрокаДерева.Штрихкод) <> Неопределено Тогда
		
		СтрокаДерева.ЕстьОшибки = Истина;
		СтрокаДерева.ТекстОшибки = НСтр("ru = 'Уже присутствует в данных формы проверки и подбора'");
		
		ЕстьОшибки = Истина;
		
	КонецЕсли;
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.Строки Цикл
		
		ПроверитьНаДубльВСтрокеДерева(ПодчиненнаяСтрока, СоответствиеШтрихкодовСтрокДерева, ЕстьОшибки);
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция РезультатДобавленияСуществующейУпаковкиВДеревоМаркированнойПродукции(ДанныеШтрихкода,
	СоответствиеШтрихкодовСтрокДерева, ПараметрыСканирования, ОбработкаДанныхТСД)
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьОшибки", Ложь);
	Результат.Вставить("АдресХранилищаДереваУпаковки",    Неопределено);
	Результат.Вставить("ТребуетсяСбросКонтекстаПроверки", Ложь);
	
	Если ЭтоАдресВременногоХранилища(ДанныеШтрихкода.АдресДереваУпаковок) Тогда
		ДеревоУпаковок = ПолучитьИзВременногоХранилища(ДанныеШтрихкода.АдресДереваУпаковок);
	Иначе
		Упаковки = Новый Массив;
		Упаковки.Добавить(ДанныеШтрихкода.ШтрихкодУпаковки);
		ВложенныеШтрихкодыУпаковок = ШтрихкодированиеИС.ВложенныеШтрихкодыУпаковок(Упаковки, ПараметрыСканирования);
		ДеревоУпаковок             = ВложенныеШтрихкодыУпаковок.ДеревоУпаковок;
	КонецЕсли;
	
	ПреобразоватьСчитаннуюУпаковкуЕслиНеобходимо(ДеревоУпаковок);
	
	ЕстьОшибки = ЕстьДублиВОсканированнойУпаковке(ДеревоУпаковок, СоответствиеШтрихкодовСтрокДерева);
	
	Если ЕстьОшибки Тогда
		
		Результат.ЕстьОшибки                   = Истина;
		Результат.АдресХранилищаДереваУпаковки = ПоместитьВоВременноеХранилище(ДеревоУпаковок);
		Возврат Результат;
		
	КонецЕсли;
	
	Если ДеревоУпаковок.Строки.Количество() = 0 Тогда 
		
		Возврат Результат;
		
	КонецЕсли;
	
	ЭтоУпаковка = ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ДанныеШтрихкода.ТипУпаковки);
	
	Если ОбработкаДанныхТСД Тогда
		
		СтрокаПроверяемойУпаковки = СтрокаТекущейПроверяемойУпаковкиТСД(ЭтотОбъект, ЭтоУпаковка); 
		
	Иначе
		
		Если ДетализацияСтруктурыХранения <> ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковки") Тогда
			
			СтрокаПроверяемойУпаковки = СтрокаТекущейПроверяемойУпаковки(ЭтотОбъект, ЭтоУпаковка);
			
		Иначе
			
			СтрокаПроверяемойУпаковки = Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрокаПроверяемойУпаковки = Неопределено Тогда
		
		КоллекцияСтрокПриемника = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
		
	Иначе
		
		КоллекцияСтрокПриемника = СтрокаПроверяемойУпаковки.ПолучитьЭлементы();
		
	КонецЕсли;
	
	Если СтрокаПроверяемойУпаковки <> Неопределено Тогда
		Если ЭтоУпаковка Тогда
			СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась;
		Иначе
			Если СтрокаПроверяемойУпаковки.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаАлкогольнойПродукции.БутылкиБезКоробки Тогда
				СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии;
			Иначе
				СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась;
			КонецЕсли;
		КонецЕсли;
	Иначе
		СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		ЭтоСтрокаСоСчитаннымШтрихкодом = СтрокаДерева.Штрихкод = ДанныеШтрихкода.Штрихкод;
		УстанавливаемыйСтатусПроверки = ?(ЭтоСтрокаСоСчитаннымШтрихкодом,
		                                  СтатусПроверки, 
		                                  Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеПроверялась);
		
		Если ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
			И Не ЗначениеЗаполнено(СтрокаДерева.АлкогольнаяПродукция) Тогда
			
			СтрокаДерева.АлкогольнаяПродукция = ДанныеШтрихкода.АлкогольнаяПродукция;
			СтрокаДерева.Номенклатура         = ДанныеШтрихкода.Номенклатура;
			СтрокаДерева.Характеристика       = ДанныеШтрихкода.Характеристика;
			СтрокаДерева.Серия                = ДанныеШтрихкода.Серия;
			
		КонецЕсли;
		
		ПеренестиСтрокуСуществующейУпаковкиВДеревоМаркированнойПродукции(СтрокаДерева, 
		                                                                 КоллекцияСтрокПриемника,
		                                                                 СоответствиеШтрихкодовСтрокДерева,
		                                                                 УстанавливаемыйСтатусПроверки,
		                                                                 ЭтоСтрокаСоСчитаннымШтрихкодом,
		                                                                 ОбработкаДанныхТСД);
		
	КонецЦикла;
	
	Если ЭтоУпаковка 
		И ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками Тогда
		
		Результат.ТребуетсяСбросКонтекстаПроверки = Истина;
		
	КонецЕсли;
	
	Если ИдентификаторТекущейПроверяемойУпаковки <> -1 Тогда
		ПриИзмененииМаркировкиСоставаУпаковкиНаСервере(ИдентификаторТекущейПроверяемойУпаковки, Истина);
	КонецЕсли;
	
	КоличествоСтрокПодобраннойАлкогольнойПродукции = АлкогольнаяПродукцияКОпределениюСправок2.ПолучитьЭлементы().Количество();
	
	Модифицированность = Истина;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПреобразоватьСчитаннуюУпаковкуЕслиНеобходимо(ДеревоУпаковок)

	ДетализацияСтруктурыХраненияДерева = ДетализацияСтруктурыХраненияДерева(ДеревоУпаковок);
	
	Если ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковки
		И (ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияИС.Полная
		   Или ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками) Тогда
		
		ПреобразоватьДетализациюСчитаннойУпаковкиДоБутылки(ДеревоУпаковок);
		
	ИначеЕсли ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками 
		И ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияИС.Полная Тогда
		
		ПреобразоватьДетализациюСчитаннойУпаковкиДоКоробаСБутылками(ДеревоУпаковок);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОпределениеСправок2АлкогольнойПродукции

&НаКлиентеНаСервереБезКонтекста
Процедура ОпределениеСправок2ПриУдаленииСтроки(Форма, СтрокаДерева)
	
	Если СтрокаДерева.ТипУпаковки <> ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
		Возврат;
	КонецЕсли;
	
	НайденнаяСтрокаСПустойАлкогольнойПродукцией = Неопределено;
	
	Для Каждого СтрокаАлкогольнойПродукции Из Форма.АлкогольнаяПродукцияКОпределениюСправок2.ПолучитьЭлементы() Цикл
		
		Если СтрокаДерева.Номенклатура = СтрокаАлкогольнойПродукции.Номенклатура
			И СтрокаДерева.Характеристика = СтрокаАлкогольнойПродукции.Характеристика
			И СтрокаДерева.АлкогольнаяПродукция = СтрокаАлкогольнойПродукции.АлкогольнаяПродукция
			И СтрокаДерева.Серия = СтрокаАлкогольнойПродукции.Серия Тогда
			
			УменьшитьКоличествоОпределеннойСправки2(СтрокаАлкогольнойПродукции,
				СтрокаДерева, Форма.АлкогольнаяПродукцияКОпределениюСправок2);
			
			Возврат;
			
		ИначеЕсли СтрокаДерева.Номенклатура = СтрокаАлкогольнойПродукции.Номенклатура
			И СтрокаДерева.Характеристика = СтрокаАлкогольнойПродукции.Характеристика
			И СтрокаДерева.Серия = СтрокаАлкогольнойПродукции.Серия
			И Не ЗначениеЗаполнено(СтрокаАлкогольнойПродукции.АлкогольнаяПродукция) Тогда
			
			НайденнаяСтрокаСПустойАлкогольнойПродукцией = СтрокаАлкогольнойПродукции;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НайденнаяСтрокаСПустойАлкогольнойПродукцией <> Неопределено Тогда
		
		УменьшитьКоличествоОпределеннойСправки2(НайденнаяСтрокаСПустойАлкогольнойПродукцией,
			СтрокаДерева, Форма.АлкогольнаяПродукцияКОпределениюСправок2);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УменьшитьКоличествоОпределеннойСправки2(СтрокаАлкогольнойПродукции, СтрокаДерева, АлкогольнаяПродукцияКОпределениюСправок2)

	Если СтрокаДерева.ЧастичноеВыбытиеКоличество > 0 Тогда
		КоличествоСтрокиДерева = СтрокаДерева.ЧастичноеВыбытиеКоличество;
	ИначеЕсли СтрокаДерева.Коэффициент <> Неопределено И СтрокаДерева.Коэффициент > 0 Тогда
		КоличествоСтрокиДерева = Окр(СтрокаДерева.Коэффициент, 3);
	Иначе
		КоличествоСтрокиДерева = 1;
	КонецЕсли;
	
	СтрокаАлкогольнойПродукции.КоличествоРаспределено = СтрокаАлкогольнойПродукции.КоличествоРаспределено - КоличествоСтрокиДерева;
	СтрокаАлкогольнойПродукции.КоличествоАкцизныхМарок = СтрокаАлкогольнойПродукции.КоличествоАкцизныхМарок - 1;
	
	ПроверкаИПодборПродукцииЕГАИСКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораАкцизныхМарок(СтрокаАлкогольнойПродукции);
		
	Для Каждого СтрокаРаспределения Из СтрокаАлкогольнойПродукции.ПолучитьЭлементы() Цикл
		
		Если СтрокаРаспределения.Справка2 = СтрокаДерева.Справка2 Тогда
			
			СтрокаРаспределения.КоличествоРаспределено = СтрокаРаспределения.КоличествоРаспределено - КоличествоСтрокиДерева;
			СтрокаРаспределения.КоличествоАкцизныхМарок = СтрокаРаспределения.КоличествоАкцизныхМарок - 1;
			
			Если СтрокаРаспределения.КоличествоРаспределено = 0 Тогда
				
				СтрокаАлкогольнойПродукции.ПолучитьЭлементы().Удалить(СтрокаРаспределения);
				
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокаАлкогольнойПродукции.КоличествоРаспределено = 0
		И СтрокаАлкогольнойПродукции.Количество = 0 Тогда
		
		АлкогольнаяПродукцияКОпределениюСправок2.ПолучитьЭлементы().Удалить(СтрокаАлкогольнойПродукции);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОпределениеСправок2ПриДобавленииСтроки(Форма, СтрокаДерева, ОшибкаКонтроля = Ложь)
	
	Если СтрокаДерева.ТипУпаковки <> ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаАлкогольнойПродукцииНайдена           = Ложь;
	НайденнаяСтрокаСПустойАлкогольнойПродукцией = Неопределено;
	
	Для Каждого СтрокаАлкогольнойПродукции Из Форма.АлкогольнаяПродукцияКОпределениюСправок2.ПолучитьЭлементы() Цикл
		
		Если СтрокаДерева.Номенклатура = СтрокаАлкогольнойПродукции.Номенклатура
			И СтрокаДерева.Характеристика = СтрокаАлкогольнойПродукции.Характеристика
			И СтрокаДерева.АлкогольнаяПродукция = СтрокаАлкогольнойПродукции.АлкогольнаяПродукция
			И (СтрокаДерева.Справка2 = СтрокаАлкогольнойПродукции.Справка2
				Или Не ЗначениеЗаполнено(СтрокаАлкогольнойПродукции.Справка2))
			И (СтрокаДерева.Серия = СтрокаАлкогольнойПродукции.Серия
			   Или (Не ЗначениеЗаполнено(СтрокаДерева.Серия)
			        И Не ЗначениеЗаполнено(СтрокаАлкогольнойПродукции.Серия))) Тогда
			
			СтрокаАлкогольнойПродукцииНайдена = Истина;
			
			ДобавитьКоличествоОпределеннойСправки2(СтрокаАлкогольнойПродукции, СтрокаДерева);
			
			Прервать;
			
		ИначеЕсли СтрокаДерева.Номенклатура = СтрокаАлкогольнойПродукции.Номенклатура
			И СтрокаДерева.Характеристика = СтрокаАлкогольнойПродукции.Характеристика
			И (СтрокаДерева.Справка2 = СтрокаАлкогольнойПродукции.Справка2
				Или Не ЗначениеЗаполнено(СтрокаАлкогольнойПродукции.Справка2))
			И (СтрокаДерева.Серия = СтрокаАлкогольнойПродукции.Серия
			   Или (Не ЗначениеЗаполнено(СтрокаДерева.Серия)
			        И Не ЗначениеЗаполнено(СтрокаАлкогольнойПродукции.Серия)))
			И Не ЗначениеЗаполнено(СтрокаАлкогольнойПродукции.АлкогольнаяПродукция) Тогда
			
			НайденнаяСтрокаСПустойАлкогольнойПродукцией = СтрокаАлкогольнойПродукции;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не СтрокаАлкогольнойПродукцииНайдена
		И НайденнаяСтрокаСПустойАлкогольнойПродукцией <> Неопределено Тогда
		
		СтрокаАлкогольнойПродукцииНайдена = Истина;
		
		ДобавитьКоличествоОпределеннойСправки2(НайденнаяСтрокаСПустойАлкогольнойПродукцией, СтрокаДерева);
		
	КонецЕсли;
	
	Если Не СтрокаАлкогольнойПродукцииНайдена Тогда
		
		Если Не Форма.КонтролироватьСканируемуюПродукциюПоДокументуОснованию Тогда
			
			Если СтрокаДерева.ЧастичноеВыбытиеКоличество > 0 Тогда
				КоличествоСтрокиДерева = СтрокаДерева.ЧастичноеВыбытиеКоличество;
			ИначеЕсли СтрокаДерева.Коэффициент <> Неопределено И СтрокаДерева.Коэффициент > 0 Тогда
				КоличествоСтрокиДерева = Окр(СтрокаДерева.Коэффициент, 3);
			Иначе
				КоличествоСтрокиДерева = 1;
			КонецЕсли;
			
			НоваяСтрока = Форма.АлкогольнаяПродукцияКОпределениюСправок2.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
			ЗаполнитьСлужебныеРеквизитыСтроки(НоваяСтрока, Форма.ЧастичноеВыбытиеДоступно);
			НоваяСтрока.Справка2                = ПредопределенноеЗначение("Справочник.Справки2ЕГАИС.ПустаяСсылка");
			НоваяСтрока.Количество              = 0;
			НоваяСтрока.КоличествоРаспределено  = КоличествоСтрокиДерева;
			НоваяСтрока.КоличествоАкцизныхМарок = 1;
			
			СтрокаРаспределения = НоваяСтрока.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРаспределения, НоваяСтрока);
			
			ПроверкаИПодборПродукцииЕГАИСКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораАкцизныхМарок(НоваяСтрока);
			
		Иначе
			
			ОшибкаКонтроля = Истина;
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьКоличествоОпределеннойСправки2(СтрокаАлкогольнойПродукции, СтрокаДерева)

	Если СтрокаДерева.ЧастичноеВыбытиеКоличество > 0 Тогда
		КоличествоСтрокиДерева = СтрокаДерева.ЧастичноеВыбытиеКоличество;
	ИначеЕсли СтрокаДерева.Коэффициент <> Неопределено И СтрокаДерева.Коэффициент > 0 Тогда
		КоличествоСтрокиДерева = Окр(СтрокаДерева.Коэффициент, 3);
	Иначе
		КоличествоСтрокиДерева = 1;
	КонецЕсли;
	
	СтрокаАлкогольнойПродукции.КоличествоРаспределено = СтрокаАлкогольнойПродукции.КоличествоРаспределено + КоличествоСтрокиДерева;
	СтрокаАлкогольнойПродукции.КоличествоАкцизныхМарок = СтрокаАлкогольнойПродукции.КоличествоАкцизныхМарок + 1;
	
	ПроверкаИПодборПродукцииЕГАИСКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораАкцизныхМарок(СтрокаАлкогольнойПродукции);
	
	СтрокаРаспределенияСправка2Найдена = Ложь;
	
	Для Каждого СтрокаРаспределения Из СтрокаАлкогольнойПродукции.ПолучитьЭлементы() Цикл
		
		Если СтрокаРаспределения.Справка2 = СтрокаДерева.Справка2
			Или (Не ЗначениеЗаполнено(СтрокаРаспределения.Справка2) 
			И Не ЗначениеЗаполнено(СтрокаДерева.Справка2)) Тогда
			
			СтрокаРаспределенияСправка2Найдена = Истина;
			СтрокаРаспределения.КоличествоРаспределено = СтрокаРаспределения.КоличествоРаспределено + КоличествоСтрокиДерева;
			СтрокаРаспределения.КоличествоАкцизныхМарок = СтрокаРаспределения.КоличествоАкцизныхМарок + 1;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не СтрокаРаспределенияСправка2Найдена Тогда
		
		СтрокаРаспределения = СтрокаАлкогольнойПродукции.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРаспределения, СтрокаДерева);
		ЗаполнитьЗначенияСвойств(СтрокаРаспределения, СтрокаАлкогольнойПродукции, "Маркируемая,НеупакованнаяПродукция,ДоступноДробноеКоличество");
		СтрокаРаспределения.Количество              = 0;
		СтрокаРаспределения.КоличествоРаспределено  = КоличествоСтрокиДерева;
		СтрокаРаспределения.КоличествоАкцизныхМарок = 1;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбработатьТаблицуИзмененияАлкогольнойПродукции(Форма)

	Для Каждого СтрокаТаблицы Из Форма.ТаблицаИзмененийАлкогольнойПродукции Цикл
		
		Если СтрокаТаблицы.Изменение = 1 Тогда
			
			Если Форма.РежимПодбораСуществующихУпаковок Тогда
				
				ОпределениеСправок2ПриДобавленииСтроки(Форма, СтрокаТаблицы);
				
			Иначе
				
				ИзменитьДанныеПулаАлкогольнойПродукции(Форма, СтрокаТаблицы, Ложь);
				
			КонецЕсли;
			
		ИначеЕсли СтрокаТаблицы.Изменение = - 1 Тогда
			
			Если Форма.РежимПодбораСуществующихУпаковок Тогда
				
				ОпределениеСправок2ПриУдаленииСтроки(Форма, СтрокаТаблицы);
				
			Иначе
				
				ИзменитьДанныеПулаАлкогольнойПродукции(Форма, СтрокаТаблицы, Истина);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Форма.КоличествоСтрокПодобраннойАлкогольнойПродукции = Форма.АлкогольнаяПродукцияКОпределениюСправок2.ПолучитьЭлементы().Количество();
	
	Форма.ТаблицаИзмененийАлкогольнойПродукции.Очистить();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьСтрокуВТаблицуИзменений(ТаблицаИзмененийАлкогольнойПродукции, СтрокаДерева, Изменение)
	
	НоваяСтрока = ТаблицаИзмененийАлкогольнойПродукции.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
	НоваяСтрока.Изменение = Изменение;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьСтрокуСПодчиненнымиВТаблицуИзменений(ТаблицаИзмененийАлкогольнойПродукции, СтрокаДерева)
	
	ДобавитьСтрокуВТаблицуИзменений(ТаблицаИзмененийАлкогольнойПродукции, СтрокаДерева, -1);
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		ДобавитьСтрокуВТаблицуИзменений(ТаблицаИзмененийАлкогольнойПродукции, ПодчиненнаяСтрока, -1);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтработатьСканированиеНеМаркированнойПродукцииВДеревеПодобраннойПродукции(Форма, ДанныеШтрихкода, ШтрихкодОбработан)
	
	СтрокаАлкогольнойПродукцииНайдена = Ложь;
	
	КоллекцияСтрок = Форма.АлкогольнаяПродукцияКОпределениюСправок2.ПолучитьЭлементы();
	
	Для Каждого СтрокаАлкогольнойПродукции Из КоллекцияСтрок Цикл
		
		Если ДанныеШтрихкода.Номенклатура = СтрокаАлкогольнойПродукции.Номенклатура
			И ДанныеШтрихкода.Характеристика = СтрокаАлкогольнойПродукции.Характеристика
			И (ДанныеШтрихкода.АлкогольнаяПродукция = СтрокаАлкогольнойПродукции.АлкогольнаяПродукция
				Или Не ЗначениеЗаполнено(ДанныеШтрихкода.АлкогольнаяПродукция)) Тогда
			
			СтрокаАлкогольнойПродукции.КоличествоРаспределено = СтрокаАлкогольнойПродукции.КоличествоРаспределено + ДанныеШтрихкода.Количество;
			
			СтрокаАлкогольнойПродукцииНайдена = Истина;
			ШтрихкодОбработан                 = Истина;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не СтрокаАлкогольнойПродукцииНайдена
		И Не Форма.КонтролироватьСканируемуюПродукциюПоДокументуОснованию Тогда
		
		НоваяСтрока = КоллекцияСтрок.Добавить();
		НоваяСтрока.Номенклатура           = ДанныеШтрихкода.Номенклатура;
		НоваяСтрока.Характеристика         = ДанныеШтрихкода.Характеристика;
		НоваяСтрока.АлкогольнаяПродукция   = ДанныеШтрихкода.АлкогольнаяПродукция;
		НоваяСтрока.Маркируемая            = Ложь;
		НоваяСтрока.КоличествоРаспределено = ДанныеШтрихкода.Количество;
		
		ШтрихкодОбработан = Истина;
		
		Форма.КоличествоСтрокПодобраннойАлкогольнойПродукции = КоллекцияСтрок.Количество();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСлужебныеРеквизитыСтроки(Строка, ЧастичноеВыбытиеДоступно)
	
	СвойстваВходящие  = "Номенклатура,АлкогольнаяПродукция";
	СвойстваИсходящие = "Маркируемая,НеупакованнаяПродукция,ДоступноДробноеКоличество";
	
	Данные = Новый Структура(СтрШаблон("%1,%2", СвойстваВходящие, СвойстваИсходящие));
	ЗаполнитьЗначенияСвойств(Данные, Строка, СвойстваВходящие);
	
	ЗаполнитьСлужебныеРеквизитыСтрокиСервер(Данные, ЧастичноеВыбытиеДоступно);
	
	ЗаполнитьЗначенияСвойств(Строка, Данные, СвойстваИсходящие);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСлужебныеРеквизитыСтрокиСервер(Данные, ЧастичноеВыбытиеДоступно)
	АкцизныеМаркиЕГАИС.ЗаполнитьСлужебныеРеквизитыДляПроверкиИПодбора(Данные, ЧастичноеВыбытиеДоступно);
КонецПроцедуры

#КонецОбласти

#Область ПризнакПроверкиУпаковки

&НаКлиенте
Процедура ИзменитьСостояниеПроверкиУпаковки(СтрокаДерева)

	Если Не ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДерева.ИдетПроверкаДаннойУпаковки Тогда
		
		СнятьПризнакПроверкиУпаковки(СтрокаДерева);
		
	Иначе
		
		УстановитьПризнакПроверкиУпаковки(СтрокаДерева);
		
	КонецЕсли;
	
	ПроверкаИПодборПродукцииЕГАИСКлиентСервер.УстановитьИндексКартинкиТипаУпаковки(СтрокаДерева);

КонецПроцедуры

&НаКлиенте
Процедура СнятьПризнакПроверкиУпаковки(СтрокаДерева, ВключаяРодителей = Ложь)
	
	Если СтрокаДерева = Неопределено
		Или Не ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки)
		Или Не СтрокаДерева.ИдетПроверкаДаннойУпаковки Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДерева.ИдетПроверкаДаннойУпаковки = Ложь;
	Элементы.ДеревоМаркированнойПродукции.Свернуть(СтрокаДерева.ПолучитьИдентификатор());
	ПроверкаИПодборПродукцииЕГАИСКлиентСервер.УстановитьИндексКартинкиТипаУпаковки(СтрокаДерева);
	
	ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
	
	Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
		
		Если ПодчиненнаяСтрока.ИдетПроверкаДаннойУпаковки Тогда
			СнятьПризнакПроверкиУпаковки(ПодчиненнаяСтрока);
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокаДерева.КоличествоПодчиненныхВсего  > 6
		И СтрокаДерева.КоличествоПодчиненныхНеПроверялось < 4 Тогда
		
		Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
			
			Если ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеПроверялась") Тогда
				
				ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует");
				
				УстановитьСтатусОтсутствуетДляПодчиненных(ПодчиненнаяСтрока);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ПроверкаИПодборПродукцииЕГАИСКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(СтрокаДерева, Ложь, ЗагрузкаДанныхТСД);
		ПроверкаИПодборПродукцииЕГАИСКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(СтрокаДерева, ЗагрузкаДанныхТСД);
		
	КонецЕсли;
	
	СтрокаРодитель = СтрокаДерева.ПолучитьРодителя();
	
	Если ВключаяРодителей Тогда
		
		Пока СтрокаРодитель <> Неопределено Цикл
			
			СтрокаРодитель.ИдетПроверкаДаннойУпаковки = Ложь;
			ПроверкаИПодборПродукцииЕГАИСКлиентСервер.УстановитьИндексКартинкиТипаУпаковки(СтрокаРодитель);
			Элементы.ДеревоМаркированнойПродукции.Свернуть(СтрокаРодитель.ПолучитьИдентификатор());
			СтрокаРодитель = СтрокаРодитель.ПолучитьРодителя();
			
		КонецЦикла;
		
		ИдентификаторТекущейПроверяемойУпаковки = -1;
		
	Иначе
		
		Если СтрокаРодитель = Неопределено Тогда
			ИдентификаторТекущейПроверяемойУпаковки = -1;
		ИначеЕсли СтрокаРодитель = СтрокаБутылкиБезУпаковки(ЭтотОбъект) Тогда
			ИдентификаторТекущейПроверяемойУпаковки = -1;
		Иначе
			ИдентификаторТекущейПроверяемойУпаковки = СтрокаРодитель.ПолучитьИдентификатор();
		КонецЕсли;

	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПризнакПроверкиУпаковки(СтрокаДерева)
	
	Если СтрокаДерева = Неопределено
		Или Не ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки)
		Или СтрокаДерева.ИдетПроверкаДаннойУпаковки Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаРодитель = СтрокаДерева.ПолучитьРодителя();
	
	Пока СтрокаРодитель <> Неопределено Цикл
		
		Если СтрокаРодитель.ИдетПроверкаДаннойУпаковки Тогда
			Прервать;
		Иначе
			СтрокаРодитель.ИдетПроверкаДаннойУпаковки = Истина;
			ПроверкаИПодборПродукцииЕГАИСКлиентСервер.УстановитьИндексКартинкиТипаУпаковки(СтрокаДерева);
		КонецЕсли;
		
		СтрокаРодитель = СтрокаРодитель.ПолучитьРодителя();
		
	КонецЦикла;
	
	СтрокаДерева.ИдетПроверкаДаннойУпаковки = Истина;
	Модифицированность                      = Истина;
	ПроверкаИПодборПродукцииЕГАИСКлиентСервер.УстановитьИндексКартинкиТипаУпаковки(СтрокаДерева);
	ИдентификаторТекущейПроверяемойУпаковки = СтрокаДерева.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКонтекстПроверки(НоваяПроверяемаяУпаковка)
	
	Если НоваяПроверяемаяУпаковка = Неопределено Тогда
		ИдентификаторНовойПроверяемойУпаковки = -1;
	Иначе
		ИдентификаторНовойПроверяемойУпаковки = НоваяПроверяемаяУпаковка.ПолучитьИдентификатор();
	КонецЕсли;
	
	Если ИдентификаторНовойПроверяемойУпаковки = ИдентификаторТекущейПроверяемойУпаковки Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяПроверяемаяУпаковка = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторТекущейПроверяемойУпаковки);
	Если ТекущаяПроверяемаяУпаковка <> Неопределено Тогда
		СнятьПризнакПроверкиУпаковки(ТекущаяПроверяемаяУпаковка, Истина);
	КонецЕсли;
	
	Если НоваяПроверяемаяУпаковка <> Неопределено Тогда
		УстановитьПризнакПроверкиУпаковки(НоваяПроверяемаяУпаковка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ПослеВопросаПриЗакрытииФормы(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ЗакрытьФорму(ДополнительныеПараметры);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму(ДополнительныеПараметры = Неопределено) Экспорт
	
	ВыполняетсяЗакрытие = Истина;
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
#Область СтатусПроверки

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииСтатусПроверки.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.СтатусПроверки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветУспешнойОперацииГосИС);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииСтатусПроверки.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.СтатусПроверки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыПроверкиНаличияПродукцииИС.Отсутствует;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПроблемаГосИС);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииСтатусПроверки.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииНомерСтикераОтложено.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.СтатусПроверки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыПроверкиНаличияПродукцииИС.Отложена;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтложенаПриПроверкеГосИС);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииСтатусПроверки.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.ТипУпаковки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ПрочиеЗоныПересчетаАлкогольнойПродукции.БутылкиБезКоробки;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииСтатусПроверки.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.СтатусПроверки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РежимПросмотра");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
#КонецОбласти

#Область ПроверкаСодержимого

	НепроверяемыеТипыУпаковок = Новый СписокЗначений;
	НепроверяемыеТипыУпаковок.Добавить(Перечисления.ТипыУпаковок.МаркированныйТовар);
	НепроверяемыеТипыУпаковок.Добавить(Перечисления.ПрочиеЗоныПересчетаАлкогольнойПродукции.БутылкиБезКоробки);

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииПредставлениеПроверкиПодчиненных.Имя);

	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.КоличествоПодчиненныхУпаковок");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.КоличествоПодчиненныхБутылок");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииПредставлениеПроверкиПодчиненных.Имя);

	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.КоличествоПодчиненныхОтложено");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.КоличествоПодчиненныхОтсутствует");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтложенаПриПроверкеГосИС);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииПредставлениеПроверкиПодчиненных.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.ТипУпаковки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = НепроверяемыеТипыУпаковок;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииПредставлениеПроверкиПодчиненных.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.НеСодержитсяВДанныхДокумента");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииПредставлениеПроверкиПодчиненных.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.КоличествоПодчиненныхОтсутствует");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПроблемаГосИС);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииПредставлениеПроверкиПодчиненных.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.ВсяУпаковкаПроверена");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветУспешнойОперацииГосИС);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииКоличествоПодчиненныхНеПроверялось.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииКоличествоПодчиненныхВНаличии.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииКоличествоПодчиненныхОтсутствует.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииКоличествоПодчиненныхНеЧислилось.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииКоличествоПодчиненныхОтложено.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииКоличествоПодчиненныхВсего.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.ТипУпаковки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыУпаковок.МаркированныйТовар;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаНеТребуетВниманияГосИС);
	
#КонецОбласти

#Область СодержимоеУпаковки

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииПредставлениеСодержимоеУпаковки.Имя);

	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.КоличествоПодчиненныхУпаковок");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.КоличествоПодчиненныхБутылок");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.ТипУпаковки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыУпаковок.МаркированныйТовар;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.ИдетПроверкаДаннойУпаковки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииПредставлениеСодержимоеУпаковки.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.ИдетПроверкаДаннойУпаковки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииПредставлениеСодержимоеУпаковки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.ТребуетсяПеремаркировка");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПроблемаГосИС);
	
#КонецОбласти

#Область НомерСтикераОтолжена

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииНомерСтикераОтложено.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.СтатусПроверки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыПроверкиНаличияПродукцииИС.Отложена;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииНомерСтикераОтложено.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.НомерСтикераОтложено");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "";
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не помечена>'"));

#КонецОбласти

#Область Отборы

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукции.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УстановленОтбор");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.НеСоответствуетОтбору");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

#КонецОбласти

#Область ПодобраннаяПродукция

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АлкогольнаяПродукцияКОпределениюСправок2КоличествоРаспределено.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("АлкогольнаяПродукцияКОпределениюСправок2.Маркируемая");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Ложь);

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АлкогольнаяПродукцияКОпределениюСправок2КоличествоАкцизныхМарок.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("АлкогольнаяПродукцияКОпределениюСправок2.Маркируемая");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АлкогольнаяПродукцияКОпределениюСправок2Характеристика.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("АлкогольнаяПродукцияКОпределениюСправок2.Характеристика");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<характеристики не используются>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АлкогольнаяПродукцияКОпределениюСправок2АлкогольнаяПродукция.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("АлкогольнаяПродукцияКОпределениюСправок2.АлкогольнаяПродукция");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не сопоставлена>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПроблемаГосИС);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АлкогольнаяПродукцияКОпределениюСправок2Номенклатура.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("АлкогольнаяПродукцияКОпределениюСправок2.Номенклатура");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не сопоставлена>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПроблемаГосИС);
	
	// Дробное количество
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АлкогольнаяПродукцияКОпределениюСправок2Количество.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АлкогольнаяПродукцияКОпределениюСправок2КоличествоРаспределено.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("АлкогольнаяПродукцияКОпределениюСправок2.НеупакованнаяПродукция");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
		
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("АлкогольнаяПродукцияКОпределениюСправок2.ДоступноДробноеКоличество");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Формат", "ЧДЦ=0;");
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АлкогольнаяПродукцияКОпределениюСправок2Количество.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АлкогольнаяПродукцияКОпределениюСправок2КоличествоРаспределено.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("АлкогольнаяПродукцияКОпределениюСправок2.НеупакованнаяПродукция");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("АлкогольнаяПродукцияКОпределениюСправок2.ДоступноДробноеКоличество");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Формат", "ЧДЦ=3;");
	
#КонецОбласти

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СпозиционироватьсяНаСтрокеДерева(Форма, СтрокаДерева)
	
	Форма.Элементы.ДеревоМаркированнойПродукции.ТекущаяСтрока = СтрокаДерева.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзСоответствияШтрихкодовДляКоллекции(КоллекцияСтрокДерева)
	
	Для Каждого СтрокаДерева Из КоллекцияСтрокДерева Цикл
		
		СоответствиеШтрихкодовСтрокДерева.Удалить(СтрокаДерева.Штрихкод);
		УдалитьИзСоответствияШтрихкодовДляКоллекции(СтрокаДерева.ПолучитьЭлементы());
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеВидимостьюКомандПротоколаОбмена()
	
	Элементы.ГруппаОшибкиОбмена.Видимость = ЗначениеЗаполнено(СообщениеПротоколаОбмена);
	Элементы.ДеревоМаркированнойПродукцииТолькоСОшибками.Видимость = ЗначениеЗаполнено(СообщениеПротоколаОбмена);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеВидимостьюКомандУпаковок(Форма)
	
	КомандыВидимы = Форма.ДетализацияСтруктурыХранения <> ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковки");
	
	Элементы = Форма.Элементы;
	
	Элементы.ДеревоМаркированнойПродукцииДобавитьПустуюКоробку.Видимость = КомандыВидимы;
	Элементы.ДеревоМаркированнойПродукцииМаркироватьУпаковку.Видимость   = КомандыВидимы;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция УпаковкаНеСодержитсяВДанныхДокумента(ТекущаяСтрокаДерева, Детализация)
	
	Если Детализация = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковки") Тогда
		
		Возврат Ложь;
		
	ИначеЕсли ТекущаяСтрокаДерева = Неопределено Тогда
		
		Возврат Истина;
		
	ИначеЕсли ТекущаяСтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаАлкогольнойПродукции.БутылкиБезКоробки") Тогда
		
		Возврат Истина;
		
	ИначеЕсли ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ТекущаяСтрокаДерева.ТипУпаковки) Тогда
		
		Возврат ТекущаяСтрокаДерева.НеСодержитсяВДанныхДокумента;
		
	Иначе
		
		Возврат УпаковкаНеСодержитсяВДанныхДокумента(ТекущаяСтрокаДерева.ПолучитьРодителя(), Детализация);
		
	КонецЕсли;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоАкцизнаяМаркаСтарогоФормата(ТипШтрихкодаИВидУпаковки)
	Возврат ТипШтрихкодаИВидУпаковки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская")
		И ТипШтрихкодаИВидУпаковки.ДлинаАкцизнойМарки = 68;
КонецФункции

#КонецОбласти

#Область РаботаСТСД

#Область Загрузка

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	СобытияФормЕГАИСКлиентПереопределяемый.ПриПолученииДанныхИзТСД(
		Новый ОписаниеОповещения("Подключаемый_ПолученыДанныеИзТСД", ЭтотОбъект),
		ЭтотОбъект, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолученыДанныеИзТСД(ТаблицаТоваров, ДополнительныеПараметры) Экспорт
	
	МассивСчитанныхДанных = ТаблицаТоваров;
	
	Если МассивСчитанныхДанных.Количество() = 0 Тогда
		
		ЗагрузкаДанныхТСД = Неопределено;
		
		ПоказатьПредупреждение(, НСтр("ru = 'В полученных данных не содержится информации о считанных штриховых кодах'"));
		
		Возврат;
		
	КонецЕсли;
	
	ЗагрузкаДанныхТСД = РезультатПроверкиДанныхТСД(МассивСчитанныхДанных,
		СоответствиеШтрихкодовСтрокДерева,
		ПараметрыСканирования());
	
	Если ЗагрузкаДанныхТСД.ОбщаяОшибка Тогда
		
		ПараметрыОткрытияФормы = ШтрихкодированиеИСКлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного();
		
		Если ТипЗнч(ЗагрузкаДанныхТСД.ТекстОбщейОшибки) = Тип("ФорматированнаяСтрока") Тогда
			ПараметрыОткрытияФормы.ТекстОшибкиФорматированнаяСтрока = ЗагрузкаДанныхТСД.ТекстОбщейОшибки;
		Иначе
			ПараметрыОткрытияФормы.ТекстОшибки = ЗагрузкаДанныхТСД.ТекстОбщейОшибки;
		КонецЕсли;
		
		ШтрихкодированиеИСКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(ЭтотОбъект, ПараметрыОткрытияФормы);
		
		ЗагрузкаДанныхТСД = Неопределено;
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗагрузкаДанныхТСД.ЕстьОшибкиВДереве Тогда
		
		Если ЗагрузкаДанныхТСД.ОбщаяОшибка Тогда
			ПараметрыОткрытияФормы = ШтрихкодированиеИСКлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного();
		Иначе
			ПараметрыОткрытияФормы = ШтрихкодированиеИСКлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного(
				ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная"));
		КонецЕсли;
		
		ПараметрыОткрытияФормы.АдресДереваУпаковок = ЗагрузкаДанныхТСД.АдресДереваУпаковок; 
		ШтрихкодированиеИСКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(ЭтотОбъект, ПараметрыОткрытияФормы);
		
		ЗагрузкаДанныхТСД = Неопределено;
		
		Возврат;
		
	КонецЕсли;
	
	ОбработатьПолученныеДанныеТСД(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПослеОбработкиШтрихкодаТСД()
	
	ОбработатьПолученныеДанныеТСД(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Спозиционироваться(ДанныеШтрихкода)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеШтрихкода, "Родитель") Тогда
		Штрихкод = ДанныеШтрихкода.Родитель;
		Если Штрихкод = "" Тогда
			ИзменитьКонтекстПроверки(СтрокаБутылкиБезУпаковки(ЭтотОбъект));
		КонецЕсли;
	Иначе
		Штрихкод = ДанныеШтрихкода.ШтриховойКод.Родитель;
	КонецЕсли;
	Если Штрихкод = "" Тогда
		Возврат;
	КонецЕсли;
	ИдентификаторСтрокиДерева = ИдентификаторСтрокиДереваПоШтрихкоду(Штрихкод);
	Если ИдентификаторСтрокиДерева <> -1 Тогда
		ИзменитьКонтекстПроверки(
			НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторСтрокиДерева));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолученныеДанныеТСД(Результат)
	
	СледующаяОперацияОбработкиДанныхТСД(Результат);
	ПодключитьОбработчикОжидания("ВыполнитьСледующуюОперациюОбработкиДанныхТСД", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СледующаяОперацияОбработкиДанныхТСД(Результат)
	
	СледующаяОперация = Неопределено;
	
	Если ЗагрузкаДанныхТСД.ТекущаяОперация = "" Тогда
		
		Если ЗагрузкаДанныхТСД.Упаковки.Количество() = 1 Тогда
			
			Если ЗагрузкаДанныхТСД.МаркируемаяПродукция.Количество() > 0 Тогда
				СледующаяОперация = "ЕдинственнаяУпаковка";
			Иначе
				СледующаяОперация = "Упаковка";
			КонецЕсли;
			
		ИначеЕсли ЗагрузкаДанныхТСД.Упаковки.Количество() > 1 Тогда
			
			Если ЗагрузкаДанныхТСД.ЕстьИерархия Тогда
				
				СледующаяОперация = "Упаковка";
				
			ИначеЕсли ЗначениеЗаполнено(ЗагрузкаДанныхТСД.Упаковки[0].ШтриховойКод) Тогда
				
				СледующаяОперация = "УпаковкаССодержимым";
				
			Иначе
				
				ЗагрузкаДанныхТСД.ИндексОбрабатываемогоЭлемента = 1;
				СледующаяОперация = "Упаковка";
				
			КонецЕсли;
			
		ИначеЕсли ЗагрузкаДанныхТСД.МаркируемаяПродукция.Количество() > 0 Тогда
			
			СледующаяОперация = "МаркируемаяПродукция";
			
		ИначеЕсли ЗагрузкаДанныхТСД.ПартионнаяАлкогольнаяПродукция.Количество() > 0 Тогда
			
			СледующаяОперация = "ПартионнаяАлкогольнаяПродукция";
			
		КонецЕсли;
		
		ГрупповаяОбработкаШтрихкодовИСКлиент.ОповеститьОНачалеОбработкиДанныхТСД();
		
	ИначеЕсли ЗагрузкаДанныхТСД.ТекущаяОперация = "ЕдинственнаяУпаковка" Тогда
		
		ЗагрузкаДанныхТСД.ИндексОбрабатываемогоЭлемента = 0;
		
		Если Результат = Истина Тогда
			
			Если ЗагрузкаДанныхТСД.МаркируемаяПродукция.Количество() > 0 Тогда
				
				СледующаяОперация = "МаркируемаяПродукция";
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ЗагрузкаДанныхТСД.ТекущаяОперация = "УпаковкаССодержимым" Тогда
		
		ЗагрузкаДанныхТСД.ИндексОбрабатываемогоЭлемента = 1;
		
		Если Результат = Истина Тогда
			
			СледующаяОперация = "Упаковка";
			
		Иначе
			
			СледующаяОперация = "ПартионнаяАлкогольнаяПродукция";
			
		КонецЕсли;
		
	ИначеЕсли ЗагрузкаДанныхТСД.ТекущаяОперация = "Упаковка" Тогда
		
		Если ЗагрузкаДанныхТСД.ИндексОбрабатываемогоЭлемента <> ЗагрузкаДанныхТСД.Упаковки.Количество() Тогда
			
			СледующаяОперация = "Упаковка";
			
		Иначе
			
			ЗагрузкаДанныхТСД.ИндексОбрабатываемогоЭлемента = 0;
			СледующаяОперация = "МаркируемаяПродукция";
			
		КонецЕсли;
			
	ИначеЕсли ЗагрузкаДанныхТСД.ТекущаяОперация = "МаркируемаяПродукция" Тогда
		
		Если ЗагрузкаДанныхТСД.ИндексОбрабатываемогоЭлемента <> ЗагрузкаДанныхТСД.МаркируемаяПродукция.Количество() Тогда
			
			СледующаяОперация = "МаркируемаяПродукция";
			
		Иначе
			
			ЗагрузкаДанныхТСД.ИндексОбрабатываемогоЭлемента = 0;
			СледующаяОперация = "ПартионнаяАлкогольнаяПродукция";
			
		КонецЕсли;
		
	ИначеЕсли  ЗагрузкаДанныхТСД.ТекущаяОперация = "ПартионнаяАлкогольнаяПродукция" Тогда
		
		Если ЗагрузкаДанныхТСД.ИндексОбрабатываемогоЭлемента <> ЗагрузкаДанныхТСД.ПартионнаяАлкогольнаяПродукция.Количество() Тогда
			
			СледующаяОперация = "ПартионнаяАлкогольнаяПродукция";
			
		Иначе
			
			ЗагрузкаДанныхТСД.ИндексОбрабатываемогоЭлемента = 0;
			СледующаяОперация = "ОкончаниеПроверки";
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗагрузкаДанныхТСД.Вставить("СледующаяОперация", СледующаяОперация);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСледующуюОперациюОбработкиДанныхТСД()
	
	СледующаяОперация = ЗагрузкаДанныхТСД.СледующаяОперация;
	ЗагрузкаДанныхТСД.ТекущаяОперация = СледующаяОперация;
	
	Если СледующаяОперация = "ЕдинственнаяУпаковка" Тогда
		
		ДанныеУпаковки = ЗагрузкаДанныхТСД.Упаковки[0];
		
		ЗагрузкаДанныхТСД.ТекущаяОперация        = "ЕдинственнаяУпаковка";
		ЗагрузкаДанныхТСД.ОбрабатываемыйШтрихкод = ДанныеУпаковки.ШтриховойКод;
		
		Если ЗагрузкаДанныхТСД.ЕстьИерархия Тогда
			Спозиционироваться(ДанныеУпаковки);
		КонецЕсли;
		
		ОбработатьОтсканированныйШтрихкод(ДанныеУпаковки.РезультатОбработки.ДанныеШтрихкода, Истина);
		
	ИначеЕсли СледующаяОперация = "УпаковкаССодержимым" Тогда
		
		ДанныеУпаковки = ЗагрузкаДанныхТСД.Упаковки[0];
		
		ЗагрузкаДанныхТСД.ТекущаяОперация        = "УпаковкаССодержимым";
		ЗагрузкаДанныхТСД.ОбрабатываемыйШтрихкод = ДанныеУпаковки.ШтриховойКод;
		
		Если ЗагрузкаДанныхТСД.ЕстьИерархия Тогда
			Спозиционироваться(ДанныеУпаковки);
		КонецЕсли;
		
		ОбработатьОтсканированныйШтрихкод(ДанныеУпаковки.РезультатОбработки.ДанныеШтрихкода, Истина);
		
	ИначеЕсли СледующаяОперация = "Упаковка" Тогда
		
		ЗагрузкаДанныхТСД.ТекущаяОперация  = "Упаковка";
		
		Если ЗагрузкаДанныхТСД.Упаковки.Количество() <> ЗагрузкаДанныхТСД.ИндексОбрабатываемогоЭлемента Тогда
			
			ЗагрузкаДанныхТСД.ИндексОбрабатываемогоЭлемента = ЗагрузкаДанныхТСД.ИндексОбрабатываемогоЭлемента + 1;
			
			РезультатОбработкиШтрихкода = ЗагрузкаДанныхТСД.Упаковки[ЗагрузкаДанныхТСД.ИндексОбрабатываемогоЭлемента - 1].РезультатОбработки;
			
			Если ЗагрузкаДанныхТСД.ЕстьИерархия Тогда
				
				Спозиционироваться(ЗагрузкаДанныхТСД.Упаковки[ЗагрузкаДанныхТСД.ИндексОбрабатываемогоЭлемента - 1]);
				
			КонецЕсли;
			
			ОбработатьОтсканированныйШтрихкод(РезультатОбработкиШтрихкода.ДанныеШтрихкода, Истина);
			
		КонецЕсли;
		
	ИначеЕсли СледующаяОперация = "МаркируемаяПродукция" Тогда 
		
		Если ЗагрузкаДанныхТСД.МаркируемаяПродукция.Количество() = 0 Тогда
			
			ОбработатьПолученныеДанныеТСД(Истина);
			
		ИначеЕсли ЗагрузкаДанныхТСД.МаркируемаяПродукция.Количество() <> ЗагрузкаДанныхТСД.ИндексОбрабатываемогоЭлемента Тогда
			
			ПараметрыСканирования = ПараметрыСканирования();
			ЗагрузкаДанныхТСД.ИндексОбрабатываемогоЭлемента = ЗагрузкаДанныхТСД.ИндексОбрабатываемогоЭлемента + 1;
			
			РезультатОбработкиШтрихкода = ЗагрузкаДанныхТСД.МаркируемаяПродукция[ЗагрузкаДанныхТСД.ИндексОбрабатываемогоЭлемента - 1].РезультатОбработки;
			
			Если ЗагрузкаДанныхТСД.ЕстьИерархия Тогда
				Спозиционироваться(ЗагрузкаДанныхТСД.МаркируемаяПродукция[ЗагрузкаДанныхТСД.ИндексОбрабатываемогоЭлемента - 1]);
			КонецЕсли;
			
			Если РезультатОбработкиШтрихкода <> Неопределено Тогда
				
				Если ПараметрыСканирования.ИспользуетсяСоответствиеШтрихкодовСтрокДерева
					И РезультатОбработкиШтрихкода.ТребуетсяВыборНоменклатуры Тогда
					
					Если СоответствиеШтрихкодовСтрокДерева.Получить(РезультатОбработкиШтрихкода.ДанныеШтрихкода.Штрихкод) <> Неопределено Тогда
						РезультатОбработкиШтрихкода.ТребуетсяВыборНоменклатуры = Ложь;
					КонецЕсли;
					
				КонецЕсли;
				
				Если РезультатОбработкиШтрихкода.ТребуетсяУточнениеДанных
					Или ШтрихкодированиеОбщегоНазначенияИСКлиент.ТребуетсяУточнениеДанныхУПользователя(ЭтотОбъект, РезультатОбработкиШтрихкода, ПараметрыСканирования) Тогда
					
					Если ДанныеВыбораПоМаркируемойПродукции <> Неопределено
						И РезультатОбработкиШтрихкода.ДанныеШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.PDF417")
						И ЗначениеЗаполнено(РезультатОбработкиШтрихкода.ДанныеШтрихкода.АлкогольнаяПродукция)
						И ДанныеВыбораПоМаркируемойПродукции.АлкогольнаяПродукция = РезультатОбработкиШтрихкода.ДанныеШтрихкода.АлкогольнаяПродукция Тогда
						
						РезультатОбработкиШтрихкода.ДанныеШтрихкода.Номенклатура   = ДанныеВыбораПоМаркируемойПродукции.Номенклатура;
						РезультатОбработкиШтрихкода.ДанныеШтрихкода.Характеристика = ДанныеВыбораПоМаркируемойПродукции.Характеристика;
						РезультатОбработкиШтрихкода.ДанныеШтрихкода.Серия          = ДанныеВыбораПоМаркируемойПродукции.Серия;
						
						ОбработатьОтсканированныйШтрихкод(РезультатОбработкиШтрихкода.ДанныеШтрихкода , Истина);
						
					ИначеЕсли ДанныеВыбораПоМаркируемойПродукции <> Неопределено
						И РезультатОбработкиШтрихкода.ДанныеШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.DataMatrix") Тогда
						
						РезультатОбработкиШтрихкода.ДанныеШтрихкода.АлкогольнаяПродукция = ДанныеВыбораПоМаркируемойПродукции.АлкогольнаяПродукция;
						РезультатОбработкиШтрихкода.ДанныеШтрихкода.Номенклатура         = ДанныеВыбораПоМаркируемойПродукции.Номенклатура;
						РезультатОбработкиШтрихкода.ДанныеШтрихкода.Характеристика       = ДанныеВыбораПоМаркируемойПродукции.Характеристика;
						РезультатОбработкиШтрихкода.ДанныеШтрихкода.Серия                = ДанныеВыбораПоМаркируемойПродукции.Серия;
						
						ОбработатьОтсканированныйШтрихкод(РезультатОбработкиШтрихкода.ДанныеШтрихкода , Истина);
						
					Иначе
						
						ПараметрыЗавершенияВводаШтрихкода = ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыЗавершенияОбработкиШтрихкода("","","ПоискПоШтрихкодуЗавершение");
						ПараметрыЗавершенияВводаШтрихкода.Форма                       = ЭтотОбъект;
						ПараметрыЗавершенияВводаШтрихкода.ОбработкаДанныхТСД          = Истина;
						ПараметрыЗавершенияВводаШтрихкода.ВызовИзФормыДокумента       = Ложь;
						ПараметрыЗавершенияВводаШтрихкода.ПараметрыСканирования       = ПараметрыСканирования;
						ПараметрыЗавершенияВводаШтрихкода.РезультатОбработкиШтрихкода = РезультатОбработкиШтрихкода;
						ПараметрыЗавершенияВводаШтрихкода.ДанныеШтрихкода             = РезультатОбработкиШтрихкода.ДанныеШтрихкода;
						
						ШтрихкодированиеОбщегоНазначенияИСКлиент.ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
						
					КонецЕсли;
					
				Иначе
					
					ОбработатьОтсканированныйШтрихкод(РезультатОбработкиШтрихкода.ДанныеШтрихкода, Истина);
					
				КонецЕсли;
				
			Иначе
				
				ОбработатьОтсканированныйШтрихкод(Новый Структура("Штрихкод", ЗагрузкаДанныхТСД.МаркируемаяПродукция[ЗагрузкаДанныхТСД.ИндексОбрабатываемогоЭлемента - 1].АкцизнаяМарка), Истина);
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли СледующаяОперация = "ПартионнаяАлкогольнаяПродукция" Тогда
		
		Если ЗагрузкаДанныхТСД.ПартионнаяАлкогольнаяПродукция.Количество() = 0 Тогда
			
			ОбработатьПолученныеДанныеТСД(Истина);
			
		ИначеЕсли ЗагрузкаДанныхТСД.ПартионнаяАлкогольнаяПродукция.Количество() <> ЗагрузкаДанныхТСД.ИндексОбрабатываемогоЭлемента Тогда
			
			ЗагрузкаДанныхТСД.ИндексОбрабатываемогоЭлемента = ЗагрузкаДанныхТСД.ИндексОбрабатываемогоЭлемента + 1;
			
			РезультатОбработкиШтрихкода = ЗагрузкаДанныхТСД.ПартионнаяАлкогольнаяПродукция[ЗагрузкаДанныхТСД.ИндексОбрабатываемогоЭлемента - 1].РезультатОбработки;
			
			Если РезультатОбработкиШтрихкода.ТребуетсяУточнениеДанных
				Или ШтрихкодированиеОбщегоНазначенияИСКлиент.ТребуетсяУточнениеДанныхУПользователя(ЭтотОбъект, РезультатОбработкиШтрихкода, ПараметрыСканирования) Тогда
				
				Если ДанныеВыбораПоМаркируемойПродукции <> Неопределено
					И ЗначениеЗаполнено(РезультатОбработкиШтрихкода.ДанныеШтрихкода.Номенклатура)
					И ДанныеВыбораПоМаркируемойПродукции.Номенклатура = РезультатОбработкиШтрихкода.ДанныеШтрихкода.Номенклатура
					И ДанныеВыбораПоМаркируемойПродукции.Характеристика = РезультатОбработкиШтрихкода.ДанныеШтрихкода.Характеристика Тогда
					
					РезультатОбработкиШтрихкода.ДанныеШтрихкода.АлкогольнаяПродукция = ДанныеВыбораПоМаркируемойПродукции.АлкогольнаяПродукция;
					РезультатОбработкиШтрихкода.ДанныеШтрихкода.Серия                = ДанныеВыбораПоМаркируемойПродукции.Серия;
					
					ОбработатьОтсканированныйШтрихкод(РезультатОбработкиШтрихкода.ДанныеШтрихкода , Истина);
					
				Иначе
					
					ПараметрыЗавершенияВводаШтрихкода = ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыЗавершенияОбработкиШтрихкода("","","ПоискПоШтрихкодуЗавершение");
					ПараметрыЗавершенияВводаШтрихкода.Форма                       = ЭтотОбъект;
					ПараметрыЗавершенияВводаШтрихкода.ВызовИзФормыДокумента       = Ложь;
					ПараметрыЗавершенияВводаШтрихкода.ОбработкаДанныхТСД          = Истина;
					ПараметрыЗавершенияВводаШтрихкода.ПараметрыСканирования       = ПараметрыСканирования;
					ПараметрыЗавершенияВводаШтрихкода.ДанныеШтрихкода             = РезультатОбработкиШтрихкода.ДанныеШтрихкода;
					ПараметрыЗавершенияВводаШтрихкода.РезультатОбработкиШтрихкода = РезультатОбработкиШтрихкода;
					
					ШтрихкодированиеОбщегоНазначенияИСКлиент.ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
					
				КонецЕсли;
				
			Иначе
				
				ОбработатьОтсканированныйШтрихкод(РезультатОбработкиШтрихкода.ДанныеШтрихкода , Истина);
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли СледующаяОперация = "ОкончаниеПроверки" Тогда
		
		ЗагрузкаДанныхТСД = Неопределено;
		
		ПроверкаИПодборПродукцииЕГАИСКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковок(ДеревоМаркированнойПродукции);
		
		ГрупповаяОбработкаШтрихкодовИСКлиент.ОповеститьОбОкончанииОбработкиДанныхТСД();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыборНоменклатурыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		
		ОбработатьПолученныеДанныеТСД(Ложь);
		
	Иначе
		
		ДанныеШтрихкода = ДополнительныеПараметры.ДанныеШтрихкода;
		ДанныеШтрихкода.АлкогольнаяПродукция      = Результат.АлкогольнаяПродукция;
		ДанныеШтрихкода.Номенклатура              = Результат.Номенклатура;
		ДанныеШтрихкода.Характеристика            = Результат.Характеристика;
		ДанныеШтрихкода.Серия                     = Результат.Серия;
		ДанныеШтрихкода.ДополнительныеПараметры   = Результат.ДополнительныеПараметры;
		
		ОбработатьОтсканированныйШтрихкод(ДанныеШтрихкода , Истина);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Функция РезультатПроверкиДанныхТСД(МассивСчитанныхДанных, СоответствиеШтрихкодовСтрокДерева, ПараметрыСканирования)
	
	ПараметрыПроверки = ИнтеграцияЕГАИС.ПараметрыПроверкиДанныхТСД(ЭтотОбъект, ОрганизацияЕГАИС);
	ПараметрыПроверки.СоответствиеШтрихкодовСтрокДерева = СоответствиеШтрихкодовСтрокДерева;
	ПараметрыПроверки.ПараметрыСканирования             = ПараметрыСканирования;
	ПараметрыПроверки.ДетализацияСтруктурыХранения      = ДетализацияСтруктурыХранения;
	ПараметрыПроверки.ДеревоМаркированнойПродукции      = ДеревоМаркированнойПродукции;
	
	Возврат ИнтеграцияЕГАИС.ОбработатьПолученныеДанныеТСД(МассивСчитанныхДанных, ПараметрыПроверки);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаТекущейПроверяемойУпаковкиТСД(Форма, ЭтоУпаковка)
	
	Если Форма.ЗагрузкаДанныхТСД.ЕстьИерархия Тогда
		Возврат НайтиПоИдентификатору(Форма.ДеревоМаркированнойПродукции, Форма.ИдентификаторТекущейПроверяемойУпаковки);
	КонецЕсли;
	
	Если Форма.ЗагрузкаДанныхТСД.ИдентификаторУпаковки = -1 Тогда
		
		Если ЭтоУпаковка Тогда
			Возврат Неопределено;
		Иначе
			Возврат СтрокаБутылкиБезУпаковки(Форма);
		КонецЕсли;
		
	Иначе
		
		Если ЭтоУпаковка
			И Форма.ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками") Тогда
			
			СтрокаДерева = НайтиПоИдентификатору(Форма.ДеревоМаркированнойПродукции, Форма.ИдентификаторТекущейПроверяемойУпаковки);
			СтрокаДерева.ИдетПроверкаДаннойУпаковки = Ложь;
			ПроверкаИПодборПродукцииЕГАИСКлиентСервер.УстановитьИндексКартинкиТипаУпаковки(СтрокаДерева);
			Возврат Неопределено;
			
		Иначе
			
			Возврат НайтиПоИдентификатору(Форма.ДеревоМаркированнойПродукции, Форма.ЗагрузкаДанныхТСД.ИдентификаторУпаковки);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Выгрузка

&НаСервере
Функция СформироватьТаблицуВыгрузкиИзДерева()
	
	КешРеквизитовНоменклатурыИАлкогольнойПродукцииДерева = КешРеквизитовНоменклатурыИАлкогольнойПродукцииДерева();
	Результат = Новый Массив;
	ДобавитьСтрокуВВыгрузкуРекурсивно(Результат, ДеревоМаркированнойПродукции, КешРеквизитовНоменклатурыИАлкогольнойПродукцииДерева);
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция КешРеквизитовНоменклатурыИАлкогольнойПродукцииДерева()
	
	ТаблицаНоменклатуры = Новый ТаблицаЗначений;
	ТаблицаНоменклатуры.Колонки.Добавить("Номенклатура", Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаНоменклатуры.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТаблицаНоменклатуры.Колонки.Добавить("Штрихкод", Новый ОписаниеТипов("Строка"));
	
	МассивАлкогольнойПродукции = Новый Массив;
	ЗаполнитьВыгружаемыеОбъектыРекурсивно(МассивАлкогольнойПродукции, ТаблицаНоменклатуры, ДеревоМаркированнойПродукции);
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", МассивАлкогольнойПродукции);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Классификатор.Ссылка КАК Ссылка,
	|	Классификатор.Код КАК Код,
	|	Классификатор.Объем КАК Объем,
	|	Классификатор.Крепость КАК Крепость,
	|	Классификатор.Производитель.ИНН КАК ИННПроизводителя,
	|	Классификатор.Производитель.КПП КАК КПППроизводителя,
	|	Классификатор.ВидПродукции.Код КАК КодВидаАлкогольнойПродукции
	|ИЗ
	|	Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК Классификатор
	|ГДЕ
	|	Классификатор.Ссылка В (&Ссылка)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗначенияРеквизитов = Новый Структура("Код,Объем,Крепость,ИННПроизводителя,КПППроизводителя,КодВидаАлкогольнойПродукции");
		ЗаполнитьЗначенияСвойств(ЗначенияРеквизитов, Выборка);
		Результат.Вставить(Выборка.Ссылка, ЗначенияРеквизитов);
	КонецЦикла;
	
	ТаблицаНоменклатуры.Индексы.Добавить("Номенклатура,Характеристика");
	ШтрихкодированиеИСПереопределяемый.ЗаполнитьШтрихкоды(ТаблицаНоменклатуры);
	Результат.Вставить("Штрихкоды", ТаблицаНоменклатуры);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьВыгружаемыеОбъектыРекурсивно(МассивАлкогольнойПродукции, ТаблицаНоменклатуры, ДеревоИлиГруппа)
	
	Для Каждого СтрокаДерева Из ДеревоИлиГруппа.ПолучитьЭлементы() Цикл
		Если ЗначениеЗаполнено(СтрокаДерева.Номенклатура) Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаНоменклатуры.Добавить(), СтрокаДерева);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаДерева.АлкогольнаяПродукция) Тогда
			МассивАлкогольнойПродукции.Добавить(СтрокаДерева.АлкогольнаяПродукция);
		КонецЕсли;
		ЗаполнитьВыгружаемыеОбъектыРекурсивно(МассивАлкогольнойПродукции, ТаблицаНоменклатуры, СтрокаДерева);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуВВыгрузкуРекурсивно(Результат, ДеревоИлиГруппа, Кеш)
	
	Для Каждого СтрокаДерева Из ДеревоИлиГруппа.ПолучитьЭлементы() Цикл
		
		ДобавляемаяСтрока = Новый Структура;
		
		Если СтрокаДерева.ТипУпаковки <> Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			ДобавляемаяСтрока.Вставить("Штрихкод", СтрокаДерева.Штрихкод);
		Иначе
			Строки = Кеш.Получить("Штрихкоды").НайтиСтроки(Новый Структура("Номенклатура,Характеристика",СтрокаДерева.Номенклатура, СтрокаДерева.Характеристика));
			Если Строки.Количество() Тогда
				ДобавляемаяСтрока.Вставить("Штрихкод", Строки[0].Штрихкод);
			КонецЕсли;
		КонецЕсли;
		
		ПредставлениеНоменклатуры = Новый Массив;
		Если ТипЗнч(СтрокаДерева.ТипУпаковки) = Тип("ПеречислениеСсылка.ТипыУпаковок")
			И СтрокаДерева.ТипУпаковки<> Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			ПредставлениеНоменклатуры.Добавить("Упаковка");
		КонецЕсли;
		ПредставлениеНоменклатуры.Добавить("" + СтрокаДерева.Номенклатура);
		
		ДобавляемаяСтрока.Вставить("Номенклатура",               СтрСоединить(ПредставлениеНоменклатуры, " "));
		ДобавляемаяСтрока.Вставить("ХарактеристикаНоменклатуры", "" + СтрокаДерева.Характеристика);
		ДобавляемаяСтрока.Вставить("СерияНоменклатуры",          "" + СтрокаДерева.Серия);
		ДобавляемаяСтрока.Вставить("Количество",                 1);
		
		Если ЗначениеЗаполнено(СтрокаДерева.АлкогольнаяПродукция) Тогда
			
			ДобавляемаяСтрока.Вставить("Алкоголь",                          Истина);
			ДобавляемаяСтрока.Вставить("Маркируемый",                       Истина);
			
			ДанныеАлкогольнойПродукции = Кеш.Получить(СтрокаДерева.АлкогольнаяПродукция);
			
			Если Не(ДанныеАлкогольнойПродукции = Неопределено) Тогда
				ДобавляемаяСтрока.Вставить("КодВидаАлкогольнойПродукции", ДанныеАлкогольнойПродукции.КодВидаАлкогольнойПродукции);
				ДобавляемаяСтрока.Вставить("КодАлкогольнойПродукции",     ДанныеАлкогольнойПродукции.Код);
				ДобавляемаяСтрока.Вставить("ЕмкостьТары",                 ДанныеАлкогольнойПродукции.Объем);
				ДобавляемаяСтрока.Вставить("Крепость",                    ДанныеАлкогольнойПродукции.Крепость);
				ДобавляемаяСтрока.Вставить("ИННПроизводителя",            ДанныеАлкогольнойПродукции.ИННПроизводителя);
				ДобавляемаяСтрока.Вставить("КПППроизводителя",            ДанныеАлкогольнойПродукции.КПППроизводителя);
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			ДобавляемаяСтрока.Вставить("ШтрихкодМаркиАлкогольнойПродукции", СтрокаДерева.Штрихкод);
		КонецЕсли;
		
		Если Не(СтрокаДерева.ПолучитьРодителя() = Неопределено) Тогда
			ДобавляемаяСтрока.Вставить("ШтрихкодУпаковки", СтрокаДерева.ПолучитьРодителя().Штрихкод);
		КонецЕсли;
		
		Результат.Добавить(ДобавляемаяСтрока);
		
		ДобавитьСтрокуВВыгрузкуРекурсивно(Результат, СтрокаДерева, Кеш);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВТСДЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Результат Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Выгрузка успешно завершена'"));
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Настройки

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеНастроек(Форма)
	
	Форма.ПредставлениеНастроек = Новый ФорматированнаяСтрока(ПредставлениеУровняДетализации(Форма), " " ,ПредставлениеРежимаПроверки(Форма));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеРежимаПроверки(Форма)
	
	Если Форма.ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковки") Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Форма.РежимПроверки) Тогда
		
		Форма.РежимПроверки = ПредопределенноеЗначение("Перечисление.ВариантыПроверкиПоступившейПродукцииИС.ОставлятьТамГдеНайдены");
		
	КонецЕсли;
	
	ТекстВступление = НСтр("ru = 'При выявлении некорректного содержимого'");
	
	Если Форма.РежимПроверки = ПредопределенноеЗначение("Перечисление.ВариантыПроверкиПоступившейПродукцииИС.ОставлятьТамГдеНайдены") Тогда
		
		СтрокаДействие = НСтр("ru = 'оставлять там, где найдено.'");
		
	ИначеЕсли Форма.РежимПроверки = ПредопределенноеЗначение("Перечисление.ВариантыПроверкиПоступившейПродукцииИС.ПеремещатьТудаГдеДолжныБыть") Тогда
		
		СтрокаДействие = НСтр("ru = 'перемещать в упаковку, где должно находиться.'");
		
	КонецЕсли;
	
	Если Не Форма.РежимПросмотра Тогда
		СтрокаДействие = Новый ФорматированнаяСтрока(СтрокаДействие,, Форма.ЦветГиперссылки,, "ИзменитьРежимПроверки");
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(ТекстВступление, " ", СтрокаДействие);
	
КонецФункции

&НаКлиенте
Процедура ПослеИзмененияРежимаПроверки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат)
		Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат <> РежимПроверки Тогда
		
		Модифицированность = Истина;
		РежимПроверки = Результат;
		СформироватьПредставлениеНастроек(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьНастройкиФормы(СохраняемыеНастройки)
	
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(
		"Обработка.ПроверкаИПодборАлкогольнойПродукцииЕГАИС.Форма.ПроверкаИПодбор",
		"", СохраняемыеНастройки);
	
КонецПроцедуры

#КонецОбласти

#Область ДетализацияСтруктурыХранения

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеУровняДетализации(Форма)
	
	Если Не ЗначениеЗаполнено(Форма.ДетализацияСтруктурыХранения) Тогда
		
		Форма.ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.Полная");
		
	КонецЕсли;
	
	ТекстВступление = НСтр("ru = 'Детализация'");
	СтрокаДействие = НРег(Строка(Форма.ДетализацияСтруктурыХранения));
	Если Форма.ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками") Тогда
		СтрокаДействие = "короба с бутылками";
	ИначеЕсли Форма.ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковки") Тогда
		СтрокаДействие = "бутылки";
	КонецЕсли;
	
	Если Не Форма.РежимПросмотра Тогда
		СтрокаДействие = Новый ФорматированнаяСтрока(СтрокаДействие,, Форма.ЦветГиперссылки,, "ИзменитьДетализацию");
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(ТекстВступление, ": ", СтрокаДействие, ".");
	
КонецФункции

&НаКлиенте
Процедура ПослеИзмененияРежимаДетализации(Результат, ДополнительныеПараметры) Экспорт

	Если ЗначениеЗаполнено(Результат)
		И Результат <> КодВозвратаДиалога.Отмена 
		И Результат <> ДетализацияСтруктурыХранения Тогда
		
		Модифицированность = Истина;
		
		ИзменитьРежимДетализации(Результат, СоответствиеШтрихкодовСтрокДерева);
		УправлениеДоступностьюКонтекстныхКоманд();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРежимДетализации(НовыйРежимДетализации, СоответствиеШтрихкодовСтрокДерева)
	
	ТребуетсяПересчет = Ложь;
	
	Если ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.Полная")
		И НовыйРежимДетализации = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками") Тогда
		
		ТребуетсяПересчет = Истина;
		ПонизитьУровеньДетализацииДоКоробаСБутылками();
		
	ИначеЕсли (ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.Полная")
		Или ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками"))
		И НовыйРежимДетализации = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковки") Тогда
		
		ТребуетсяПересчет = Истина;
		ПонизитьУровеньДетализацииДоБутылки();
		ИдентификаторТекущейПроверяемойУпаковки = - 1;
		
	ИначеЕсли ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковки")
		И НовыйРежимДетализации <> ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковки") Тогда
		
		ТребуетсяПересчет = Истина;
		УстановитьУровеньДетализацииВышеЧемБутылки();
		
	КонецЕсли;
	
	ДетализацияСтруктурыХранения = НовыйРежимДетализации;
	
	Если ТребуетсяПересчет Тогда
		
		СоответствиеШтрихкодовСтрокДерева = Новый Соответствие;
		ДополнитьСоответствиеШтрихкодовСтрокДереваДляКоллекции(
			ДеревоМаркированнойПродукции.ПолучитьЭлементы(),
			СоответствиеШтрихкодовСтрокДерева);
		
		ПересчитатьВсеИтогиФормыНаКлиенте();
	КонецЕсли;
	
	Если ТипЗнч(ПроверяемыйДокумент) <> Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
		
		СохраняемыеНастройки = Новый Структура;
		СохраняемыеНастройки.Вставить("ДетализацияСтруктурыХранения", ДетализацияСтруктурыХранения);
		
		СохранитьНастройкиФормы(СохраняемыеНастройки);
		
	КонецЕсли;
	
	УправлениеВидимостьюКомандУпаковок(ЭтотОбъект);
	СформироватьПредставлениеНастроек(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьУровеньДетализацииВышеЧемБутылки()
	
	МассивБутылокКПереносу = Новый Массив;
	
	Для Каждого СтрокаСБутылкой Из ДеревоМаркированнойПродукции.ПолучитьЭлементы() Цикл
		
		МассивБутылокКПереносу.Добавить(СтрокаСБутылкой);
		
	КонецЦикла;
	
	СтрокаБутылкиБезУпаковки = ДобавленнаяСтрокаБутылкиБезКоробки();
	
	Для Каждого БутылкаКПереносу Из МассивБутылокКПереносу Цикл
		
		НоваяСтрока = СтрокаБутылкиБезУпаковки.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, БутылкаКПереносу);
		
	КонецЦикла;
	
	ЭлементыДерева = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
	
	Для Каждого СтрокаКУдалению Из МассивБутылокКПереносу Цикл
		
		ЭлементыДерева.Удалить(СтрокаКУдалению);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПонизитьУровеньДетализацииДоКоробаСБутылками()

	МассивСтрокКУдалению = Новый Массив;
	
	Для Каждого СтрокаДерева Из ДеревоМаркированнойПродукции.ПолучитьЭлементы() Цикл
		
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки) Тогда
			
			ПонизитьУровеньДетализацииУпаковкиДоКоробаСБутылками(СтрокаДерева, МассивСтрокКУдалению);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаДерева Из МассивСтрокКУдалению Цикл
		
		Родитель = СтрокаДерева.ПолучитьРодителя();
		Если Родитель = Неопределено Тогда
			ДеревоМаркированнойПродукции.ПолучитьЭлементы().Удалить(СтрокаДерева);
		Иначе
			Родитель.ПолучитьЭлементы().Удалить(СтрокаДерева);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИдентификаторТекущейПроверяемойУпаковки <> - 1 Тогда
		Если НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторТекущейПроверяемойУпаковки) = Неопределено Тогда
			ИдентификаторТекущейПроверяемойУпаковки = -1;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПонизитьУровеньДетализацииДоБутылки()

	СтрокиВерхнегоУровня = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
	
	МассивСтрокКОбработке = Новый Массив;
	Для Каждого СтрокаДерева Из СтрокиВерхнегоУровня Цикл
		МассивСтрокКОбработке.Добавить(СтрокаДерева);
	КонецЦикла;
	
	Для Каждого СтрокаДерева Из МассивСтрокКОбработке Цикл
		
		Если СтрокаДерева.ТипУпаковки <> ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
			
			ПонизитьУровеньДетализацииУпаковкиДоБутылки(СтрокаДерева);
			СтрокиВерхнегоУровня.Удалить(СтрокаДерева);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПонизитьУровеньДетализацииУпаковкиДоБутылки(СтрокаДерева)
	
	ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
	
	Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
		
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ПодчиненнаяСтрока.ТипУпаковки) Тогда
			
			ПонизитьУровеньДетализацииУпаковкиДоБутылки(ПодчиненнаяСтрока);
			
		Иначе
			
			НоваяСтрока = ДеревоМаркированнойПродукции.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПодчиненнаяСтрока);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПодчиненныеСтроки.Очистить();

КонецПроцедуры

&НаКлиенте
Процедура ПонизитьУровеньДетализацииУпаковкиДоКоробаСБутылками(СтрокаДерева, МассивСтрокКУдалению)

	ЕстьВложенныеУпаковки    = Ложь;
	ЕстьАлкогольнаяПродукция = Ложь;
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ПодчиненнаяСтрока.ТипУпаковки) Тогда
			
			ЕстьВложенныеУпаковки = Истина;
			ПонизитьУровеньДетализацииУпаковкиДоКоробаСБутылками(ПодчиненнаяСтрока, МассивСтрокКУдалению);
			
		ИначеЕсли ПодчиненнаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
			
			ЕстьАлкогольнаяПродукция = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	РодительУпаковки = СтрокаДерева.ПолучитьРодителя();
	Если ЕстьАлкогольнаяПродукция
		И ЕстьВложенныеУпаковки Тогда
		
		СтрокаБутылкиБезУпаковки = СтрокаБутылкиБезУпаковки(ЭтотОбъект);
		
		Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
			
			Если ПодчиненнаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
				СтрокаСБутылкой = СтрокаБутылкиБезУпаковки.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаСБутылкой,ПодчиненнаяСтрока);
			КонецЕсли;
			
		КонецЦикла;
		
		МассивСтрокКУдалению.Добавить(СтрокаДерева);
	
	ИначеЕсли ЕстьАлкогольнаяПродукция Тогда
		
		Если РодительУпаковки <> Неопределено Тогда
			
			НоваяСтрока = ДеревоМаркированнойПродукции.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
			
			Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
				
				СтрокаСБутылкой = НоваяСтрока.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаСБутылкой,ПодчиненнаяСтрока);
				
			КонецЦикла;
			
			МассивСтрокКУдалению.Добавить(СтрокаДерева);
			
		КонецЕсли;
		
	ИначеЕсли ЕстьВложенныеУпаковки Тогда
		
		МассивСтрокКУдалению.Добавить(СтрокаДерева);
		
	Иначе
		
		Если РодительУпаковки <> Неопределено Тогда
			
			НоваяСтрока = ДеревоМаркированнойПродукции.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
			
			МассивСтрокКУдалению.Добавить(СтрокаДерева);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ДобавленнаяСтрокаБутылкиБезКоробки()

	НоваяСтрока = ДеревоМаркированнойПродукции.ПолучитьЭлементы().Вставить(0);

	ПроверкаИПодборПродукцииЕГАИСКлиентСервер.ЗаполнитьСтрокуБутылкиБезКоробки(НоваяСтрока);
	
	ИдентификаторСтрокиБутылкиБезУпаковки = НоваяСтрока.ПолучитьИдентификатор();
	
	Возврат НоваяСтрока;

КонецФункции

&НаСервереБезКонтекста
Функция СохраненнаяДетализацияСтруктурыХранения()
	
	Возврат Обработки.ПроверкаИПодборАлкогольнойПродукцииЕГАИС.СохраненнаяДетализацияСтруктурыХранения();
	
КонецФункции

&НаСервереБезКонтекста
Функция ДетализацияСтруктурыХраненияДерева(ДеревоУпаковок)
	
	Возврат Обработки.ПроверкаИПодборАлкогольнойПродукцииЕГАИС.ДетализацияСтруктурыХраненияДерева(ДеревоУпаковок);
	
КонецФункции

#КонецОбласти

#Область ПреобразованиеДетализацииСчитанойУпаковки

&НаСервере
Процедура ПреобразоватьДетализациюСчитаннойУпаковкиДоБутылки(ДеревоУпаковок)

	НовоеДерево = ДеревоУпаковок.Скопировать();
	НовоеДерево.Строки.Очистить();
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		СкопироватьСтрокуДереваПриПониженииДетализацииДоБутылки(СтрокаДерева, НовоеДерево);
		
	КонецЦикла;
	
	ДеревоУпаковок = НовоеДерево;

КонецПроцедуры

&НаСервере
Процедура СкопироватьСтрокуДереваПриПониженииДетализацииДоБутылки(СтрокаДерева, НовоеДерево)

	Для каждого ПодчиненнаяСтрока Из СтрокаДерева.Строки Цикл
	
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ПодчиненнаяСтрока.ТипУпаковки) Тогда
			СкопироватьСтрокуДереваПриПониженииДетализацииДоБутылки(ПодчиненнаяСтрока, НовоеДерево);
		Иначе
			НоваяСтрока = НовоеДерево.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПодчиненнаяСтрока);
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПреобразоватьДетализациюСчитаннойУпаковкиДоКоробаСБутылками(ДеревоУпаковок)

	НовоеДерево = ДеревоУпаковок.Скопировать();
	НовоеДерево.Строки.Очистить();
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		СкопироватьСтрокуДереваПриПониженииДетализацииДоКоробаСБутылками(СтрокаДерева, НовоеДерево);
		
	КонецЦикла;
	
	ДеревоУпаковок = НовоеДерево;

КонецПроцедуры

&НаСервере
Процедура СкопироватьСтрокуДереваПриПониженииДетализацииДоКоробаСБутылками(СтрокаДерева, НовоеДерево)

	ЕстьАлкогольнаяПродукция = Ложь;
	
	Для каждого ПодчиненнаяСтрока Из СтрокаДерева.Строки Цикл
	
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ПодчиненнаяСтрока.ТипУпаковки) Тогда
			
			СкопироватьСтрокуДереваПриПониженииДетализацииДоКоробаСБутылками(ПодчиненнаяСтрока, НовоеДерево)
			
		Иначе
			
			ЕстьАлкогольнаяПродукция = Истина;
			
		КонецЕсли;
			
	КонецЦикла;
	
	Если ЕстьАлкогольнаяПродукция Тогда
		
		НоваяСтрока = НовоеДерево.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
		
		Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.Строки Цикл
			
			Если ПодчиненнаяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
				
				НоваяСтрокаСБутылкой = НоваяСтрока.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаСБутылкой, ПодчиненнаяСтрока);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
	
#Область РазагрегацияУпаковки

&НаКлиенте
Процедура ПереместитьВложенныеУпаковкиПриРазборкеУпаковки(СтрокиДерева, НовыйРодитель = Неопределено)
	
	ИзменитьТекущуюСтрокуДерева = Истина;
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если НовыйРодитель <> Неопределено Тогда
			РодительДобавляемойСтроки = НовыйРодитель;
			ИзменитьТекущуюСтрокуДерева = Ложь;
		ИначеЕсли СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует") Тогда
			РодительДобавляемойСтроки = Неопределено;
		ИначеЕсли СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
			РодительДобавляемойСтроки = СтрокаБутылкиБезУпаковки(ЭтотОбъект);
		Иначе
			РодительДобавляемойСтроки = ДеревоМаркированнойПродукции;
		КонецЕсли;
				
		Если РодительДобавляемойСтроки <> Неопределено Тогда
			НоваяСтрока = РодительДобавляемойСтроки.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
			
			Если ИзменитьТекущуюСтрокуДерева Тогда
				Элементы.ДеревоМаркированнойПродукции.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
				ИзменитьТекущуюСтрокуДерева = Ложь;
			КонецЕсли;
		Иначе
			НоваяСтрока = Неопределено;
		КонецЕсли;
		
		Если СтрокаДерева.ПолучитьЭлементы().Количество() > 0 Тогда
			ПереместитьВложенныеУпаковкиПриРазборкеУпаковки(СтрокаДерева.ПолучитьЭлементы(), НоваяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПриемПродукцииСМаркамиДлиной68СимволовКакПартионной

&НаКлиенте
Процедура ДобавитьКИзменениюПродукциюСМарками68Символов(СтрокиДерева, ЭтоВыделенныеСтроки = Ложь)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если ЭтоВыделенныеСтроки Тогда
			СтрокаДерева = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, СтрокаДерева);
			Если НЕ ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки) Тогда
				Продолжить;
			ИначеЕсли СтрокаДерева.ДлинаАкцизнойМарки <> 68 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ПодчиненныеСтрокиДерева = СтрокаДерева.ПолучитьЭлементы();
		
		Если ПодчиненныеСтрокиДерева.Количество() > 0 Тогда
			ДобавитьКИзменениюПродукциюСМарками68Символов(ПодчиненныеСтрокиДерева);
		ИначеЕсли СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар")
			И СтрокаДерева.ДлинаАкцизнойМарки = 68 Тогда
			СтруктураПоиска = Новый Структура("Штрихкод", СтрокаДерева.Штрихкод);
			Если ТаблицаИзмененийАлкогольнойПродукции.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
				ДобавитьСтрокуВТаблицуИзменений(ТаблицаИзмененийАлкогольнойПродукции, СтрокаДерева, -1);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьМаркируемуюКакПартионнуюПриОтветеНаВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторыИзмененныхУпаковок = Новый Массив();
	
	Для Каждого СтрокаИзменений Из ТаблицаИзмененийАлкогольнойПродукции Цикл
		ИдентификаторСтрокиДерева = СоответствиеШтрихкодовСтрокДерева.Получить(СтрокаИзменений.Штрихкод);
		Если ИдентификаторСтрокиДерева <> Неопределено Тогда
			УдалитьСтрокуДереваПриПриемеМаркируемойКакПартионной(ИдентификаторСтрокиДерева, ИдентификаторыИзмененныхУпаковок);
		КонецЕсли;
	КонецЦикла;
	
	КоличествоИзмененныхУпаковок = 0;
	
	Пока ИдентификаторыИзмененныхУпаковок.Количество() <> КоличествоИзмененныхУпаковок Цикл
		КоличествоИзмененныхУпаковок = ИдентификаторыИзмененныхУпаковок.Количество();
		
		Для Счетчик = 1 По КоличествоИзмененныхУпаковок Цикл
			ИдентификаторСтрокиДерева = ИдентификаторыИзмененныхУпаковок[Счетчик - 1];
			СтрокаДерева = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторСтрокиДерева);
			
			Если СтрокаДерева <> Неопределено И СтрокаДерева.ПолучитьЭлементы().Количество() = 0 Тогда
				УдалитьСтрокуДереваПриПриемеМаркируемойКакПартионной(ИдентификаторСтрокиДерева, ИдентификаторыИзмененныхУпаковок);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ПринятьМаркируемуюКакПартионнуюНаСервере(ИдентификаторыИзмененныхУпаковок);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуДереваПриПриемеМаркируемойКакПартионной(ИдентификаторСтрокиДерева, ИдентификаторыИзмененныхУпаковок)
	
	СтрокаДерева = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторСтрокиДерева);
	
	Если СтрокаДерева <> Неопределено Тогда
		СоответствиеШтрихкодовСтрокДерева.Удалить(СтрокаДерева.Штрихкод);
		
		Родитель = СтрокаДерева.ПолучитьРодителя();
		
		Если Родитель = Неопределено Тогда
			ДеревоМаркированнойПродукции.ПолучитьЭлементы().Удалить(СтрокаДерева);
		Иначе
			Родитель.ПолучитьЭлементы().Удалить(СтрокаДерева);
			Если Родитель.ТипУпаковки <> ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаАлкогольнойПродукции.БутылкиБезКоробки") Тогда
				ИдентификаторРодителя = Родитель.ПолучитьИдентификатор();
				Если ИдентификаторыИзмененныхУпаковок.Найти(ИдентификаторРодителя) = Неопределено Тогда
					ИдентификаторыИзмененныхУпаковок.Добавить(ИдентификаторРодителя);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПринятьМаркируемуюКакПартионнуюНаСервере(ИдентификаторыИзмененныхУпаковок)
	
	Для Каждого ИдентификаторСтрокиДерева Из ИдентификаторыИзмененныхУпаковок Цикл
		СтрокаДерева = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторСтрокиДерева);
		Если СтрокаДерева <> Неопределено Тогда
			ПроверкаИПодборПродукцииЕГАИСКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(СтрокаДерева, Ложь, ЗагрузкаДанныхТСД);
			ПроверкаИПодборПродукцииЕГАИСКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(СтрокаДерева, ЗагрузкаДанныхТСД);
		КонецЕсли;
	КонецЦикла;
	
	ПриИзмененииМаркировкиСоставаУпаковкиМассиваСтрок(ИдентификаторыИзмененныхУпаковок, Истина);	
	
	УправлениеВидимостьюСтраницФормы();
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ОткрытьФормуУточненияДанных() Экспорт
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("РучнойВводШтрихкодаЗавершение", ЭтотОбъект);
	ШтрихкодированиеИСКлиент.Подключаемый_ОткрытьФормуУточненияДанных(ЭтотОбъект, ОповещениеПриЗавершении);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НайтиПоИдентификатору(ДанныеФормыДерево, Идентификатор)
	
	// Сейчас есть проблема в веб-клиенте: метод НайтиПоИдентификатору, может вернуть ДанныеФормыДерево
	
	Если Идентификатор = -1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеФормыЭлементДерева = ДанныеФормыДерево.НайтиПоИдентификатору(Идентификатор);
	
	Если ТипЗнч(ДанныеФормыЭлементДерева) = Тип("ДанныеФормыЭлементДерева") Тогда
		Возврат ДанныеФормыЭлементДерева;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти