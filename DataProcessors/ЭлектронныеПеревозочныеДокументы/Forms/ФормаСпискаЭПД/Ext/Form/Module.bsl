
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("ОтборДокументОснование") Тогда // Форма открыта в режиме просмотра по документу основания
		ИзменитьЗапросНаОтборПоДокументуОснования(Параметры);
	КонецЕсли;
	
	Если Не Параметры.Свойство("КлючНазначенияФормы")
		Или ПустаяСтрока(Параметры.КлючНазначенияФормы) Тогда
		КлючНазначенияИспользования = КлючНазначенияФормыПоУмолчанию();
		КлючНастроек = "";
	Иначе
		КлючНазначенияИспользования = Параметры.КлючНазначенияФормы;
		КлючНастроек = Параметры.КлючНазначенияФормы;
	КонецЕсли;
	
	ВосстановитьНастройки();
	
	ЗаполнитьРеквизитыФормыПриСоздании();
	НастроитьЭлементыФормыПриСоздании();
	
	ИспользуемыеТипыДокументов = Новый Массив;
	Для каждого ОписаниеОперации Из ХозяйственныеОперацииИДокументы Цикл
		ИспользуемыеТипыДокументов.Добавить(Тип("ДокументСсылка." + СтрРазделить(ОписаниеОперации.ПолноеИмяДокумента, ".")[1]));
	КонецЦикла;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД.СервисВзаимодействияМПЭПД") Тогда
		МодульСервисВзаимодействияМПЭПДКлиентСервер = ОбщегоНазначения.ОбщийМодуль("СервисВзаимодействияМПЭПДКлиентСервер");	
		КартинкаМП = МодульСервисВзаимодействияМПЭПДКлиентСервер.КартинкаМобильноеУстройствоЭПД();
		
		Элементы.КнопкаОтборНовыеСообщения.Картинка = КартинкаМП;
		Команды.НастройкаВзаимодействияМП.Картинка = КартинкаМП;
		
		КартинкаКоллекцияСобытияМП = МодульСервисВзаимодействияМПЭПДКлиентСервер.КартинкаКоллекцияСобытияМобильногоПриложенияЭПД();
		
		Элементы.КартинкаМобильноеПриложение.КартинкаЗначений = КартинкаКоллекцияСобытияМП;
		Элементы.КартинкаМобильноеПриложениеБезГиперссылки.КартинкаЗначений = КартинкаКоллекцияСобытияМП;
	Иначе
		Элементы.КнопкаОтборНовыеСообщения.Видимость = Ложь;
		Элементы.СписокПереключитьИспользованиеМП.Видимость = Ложь;
		Элементы.СписокНастройкаВзаимодействияМП.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.СписокПолучитьДокументыЭДО.Доступность = СинхронизацияЭДО.ЕстьПравоВыполненияОбмена();
	
	Обработки.ЭлектронныеПеревозочныеДокументы.ЗаполнитьОбязательныеПараметрыЗапроса(Список.Параметры);
	
	ПоказатьКоличествоВыбранныхТиповДокументов();
	ПоказатьОтборПоПериоду();
	ОбновитьОтборТребующихРеакцию();
	ОбновитьНадписьПолейПоиска();
	ОбновитьИспользованиеМобильногоПриложения();
	
	Элементы.СписокОткрытьНастройкиДопРеквизитов.Видимость = ОбменСГИСЭПДКлиентСервер.ИспользуютсяДополнительныеРеквизитыЭПД() > 0;
	
	ОбменСГИСЭПД.ДобавитьБаннер(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_БаннерПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	ОбменСГИСЭПДКлиент.БаннерПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаБаннерЗакрыть(Команда)
	
	ИмяБаннера = СтрЗаменить(Команда.Имя, "Закрыть", "");
	ЭлементБаннер = Элементы.Найти(ИмяБаннера); 
	
	Если ЭлементБаннер <> Неопределено Тогда
		ОбменСГИСЭПДКлиент.БаннерКомандаЗакрыть(ЭлементБаннер);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьИспользованиеМобильногоПриложения(НовоеЗначение = Неопределено)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД.СервисВзаимодействияМПЭПД") Тогда
		МодульСервисВзаимодействияМПЭПД = ОбщегоНазначения.ОбщийМодуль("СервисВзаимодействияМПЭПД");		
		Если НовоеЗначение = Неопределено Тогда        
			ИспользованиеМобильногоПриложенияНастройка = ХранилищеОбщихНастроек.Загрузить("СписокРеестрЭПД", "ИспользованиеМобильногоПриложения");
			Если ИспользованиеМобильногоПриложенияНастройка = Неопределено Тогда		
				СписокПодключенныхМП = МодульСервисВзаимодействияМПЭПД.СписокПодключенныхМП();
				ИспользованиеМобильногоПриложенияНастройка = СписокПодключенныхМП.Количество() > 0;
				ХранилищеОбщихНастроек.Сохранить("СписокРеестрЭПД", "ИспользованиеМобильногоПриложения", ИспользованиеМобильногоПриложенияНастройка);
			КонецЕсли;
		Иначе
			ИспользованиеМобильногоПриложенияНастройка = НовоеЗначение;	
			ХранилищеОбщихНастроек.Сохранить("СписокРеестрЭПД", "ИспользованиеМобильногоПриложения", ИспользованиеМобильногоПриложенияНастройка);
		КонецЕсли;   
	Иначе
		ИспользованиеМобильногоПриложенияНастройка = Ложь;
	КонецЕсли;
	
	ИспользуетсяМобильноеПриложение = ИспользованиеМобильногоПриложенияНастройка;
	
	Элементы.ГруппаМобильноеПриложениеОбщая.Видимость = ИспользуетсяМобильноеПриложение;
	Элементы.СписокПереключитьИспользованиеМП.Пометка = ИспользуетсяМобильноеПриложение;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("ВыполнитьПериодическиеДействияНаКлиенте", 60);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Файл"
		Или ИмяСобытия = "Запись_ДокументыЭПД"
		Или ИмяСобытия = "ОбновитьСостояниеЭД"
		Или ИмяСобытия = "МПОтвязаноОтДокумента"
		Или ИмяСобытия = "МППривязаноКДокументу" Тогда
		
		Элементы.Список.Обновить();
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ДокументыЭПД" Тогда
	
		ОбновитьОтборТребующихРеакцию();
	
	ИначеЕсли ИмяСобытия = "УстановитьОтправкуПолучениеСОтборомПоОрганизации" Тогда
	
		Элементы.ВыборочныйОбменПоОрганизациям.Пометка = Параметр;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаВзаимодействияМП(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД.СервисВзаимодействияМПЭПД") Тогда
		МодульСервисВзаимодействияМПЭПДКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("СервисВзаимодействияМПЭПДКлиентСервер");
	
		ОрганизацияДляНастройки = ОтборОрганизация;
		Если ЗначениеЗаполнено(ОрганизацияДляНастройки) = Ложь Тогда
			ВыбраннаяСтрока = Элементы.Список.ТекущаяСтрока;
			Если ВыбраннаяСтрока <> Неопределено Тогда
				ДанныеСтроки = Элементы.Список.ДанныеСтроки(ВыбраннаяСтрока);	
				ОрганизацияДляНастройки = ДанныеСтроки.Организация;
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация", ОрганизацияДляНастройки);
		
		ОткрытьФорму(МодульСервисВзаимодействияМПЭПДКлиентСервер.ИмяФормыСостоянияПодключенныхМП(),
					ПараметрыФормы,
					ЭтотОбъект,
					УникальныйИдентификатор,
					,
					,
					,
					РежимОткрытияОкнаФормы.Независимый);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДокументыЭДО(Команда)
	
	Элементы.СписокПолучитьДокументыЭДО.Доступность = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ПолучитьДокументыЭДОЗавершение", ЭтотОбъект);
	ИнтерфейсДокументовЭДОКлиент.ОтправитьПолучитьДокументыЭДО(ЭтотОбъект, Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДокументыЭДОЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Элементы.СписокПолучитьДокументыЭДО.Доступность = Истина;
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаСервере
Функция КоличествоСтрокСОтбором(ПараметрыОтбора)

	ИсполняемаяСхема = Элементы.Список.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	ИсполняемыеНастройки = Элементы.Список.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	Если ТипЗнч(ПараметрыОтбора) = Тип("Структура") Тогда
		МассивОтбор = Новый Массив;
		МассивОтбор.Добавить(ПараметрыОтбора);
	ИначеЕсли ТипЗнч(ПараметрыОтбора) = Тип("Массив") Тогда
		МассивОтбор = ПараметрыОтбора;
	Иначе
		МассивОтбор = Новый Массив;
	КонецЕсли;
	
	Для Каждого ОписаниеОтбора Из МассивОтбор Цикл
		НовыйОтбор = ИсполняемыеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ОписаниеОтбора.ЛевоеЗначение);
		НовыйОтбор.ПравоеЗначение = ОписаниеОтбора.ПравоеЗначение;
		Если ОписаниеОтбора.Свойство("ВидСравнения") Тогда
			НовыйОтбор.ВидСравнения = ОписаниеОтбора.ВидСравнения;
		КонецЕсли;
		НовыйОтбор.Использование = Истина;
	КонецЦикла;

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(ИсполняемаяСхема, ИсполняемыеНастройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	ПроцессорВыводаРезультата = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТаблицаРезультат = ПроцессорВыводаРезультата.Вывести(ПроцессорКомпоновкиДанных);
	
	Возврат ТаблицаРезультат.Количество();

КонецФункции


&НаКлиенте
Процедура ВыполнитьПериодическиеДействияНаКлиенте()
	
	ОбновитьОтборТребующихРеакцию();
	
КонецПроцедуры


&НаСервере
Процедура ОбновитьОтборТребующихРеакцию()
	
	ПараметрыОтбора = Новый Структура; 
	ПараметрыОтбора.Вставить("ЛевоеЗначение", "ТекущийШагВыполнен");
	ПараметрыОтбора.Вставить("ПравоеЗначение", Ложь);
	КоличествоСтрокТребуютРеакцию = КоличествоСтрокСОтбором(ПараметрыОтбора);
	
	Элементы.КнопкаОтборНеобработанные.Заголовок = Команды.ОтборНеобработанные.Заголовок 
													+ " (" + КоличествоСтрокТребуютРеакцию + ")";
	
	ПараметрыОтбора = Новый Структура; 
	ПараметрыОтбора.Вставить("ЛевоеЗначение", "КартинкаМобильноеПриложение");
	ПараметрыОтбора.Вставить("ПравоеЗначение", 5);
	ПараметрыОтбора.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Больше);	
	КоличествоСтрокПолученоМП = КоличествоСтрокСОтбором(ПараметрыОтбора);
	
	Если ИспользуетсяМобильноеПриложение > 0 Тогда
		Элементы.КнопкаОтборНовыеСообщения.Заголовок = Команды.ОтборНовыеСообщения.Заголовок
														+ " (" + КоличествоСтрокПолученоМП + ")";
		Элементы.КнопкаОтборНовыеСообщения.Видимость = Истина;
	Иначе
		Элементы.КнопкаОтборНовыеСообщения.Видимость = Ложь;	
	КонецЕсли;
	
КонецПроцедуры



#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	ПриИзмененииОтбора();
КонецПроцедуры

&НаКлиенте
Процедура ОтборКонтрагентПриИзменении(Элемент)
	ПриИзмененииОтбора();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, СтрокиСписка)
	
	Ключи = СтрокиСписка.ПолучитьКлючи();
	СтрокаСписка = СтрокиСписка.Получить(Ключи[0]);
	Если Не СтрокаСписка.Данные.Свойство("ДокументОснование") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭлектроннаяТранспортнаяНакладнаяДокументыОснования.Ссылка,
		|	ЭлектроннаяТранспортнаяНакладнаяДокументыОснования.ДокументОснование.Представление КАК ДокументОснованиеПредставление
		|ИЗ
		|	Документ.ЭлектроннаяТранспортнаяНакладная.ДокументыОснования КАК ЭлектроннаяТранспортнаяНакладнаяДокументыОснования
		|ГДЕ
		|	ЭлектроннаяТранспортнаяНакладнаяДокументыОснования.Ссылка В (&Документы)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭлектронныйЗаказНарядДокументыОснования.Ссылка,
		|	ЭлектронныйЗаказНарядДокументыОснования.ДокументОснование.Представление КАК ДокументОснованиеПредставление
		|ИЗ
		|	Документ.ЭлектронныйЗаказНаряд.ДокументыОснования КАК ЭлектронныйЗаказНарядДокументыОснования
		|ГДЕ
		|	ЭлектронныйЗаказНарядДокументыОснования.Ссылка В (&Документы)";
		
	Ссылки = Новый Массив;
	Для Каждого Ключ Из Ключи Цикл //РегистрСведенийКлючЗаписи
		Ссылки.Добавить(Ключ.Ссылка);
	КонецЦикла;
		
	Запрос.УстановитьПараметр("Документы", Ссылки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Для Каждого Строка Из СтрокиСписка Цикл
		Строка = СтрокиСписка[Строка.Ключ];
		Выборка.Сбросить();
		СтрокиДокументОснование = Новый Массив();
		Пока Выборка.НайтиСледующий(Строка.Данные["Ссылка"], "Ссылка") Цикл 
			СтрокиДокументОснование.Добавить(Выборка.ДокументОснованиеПредставление);
		КонецЦикла;
		Если СтрокиДокументОснование.Количество() Тогда
			Строка.Данные["ДокументОснование"] = СтрСоединить(СтрокиДокументОснование, ", " + Символы.ПС);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры




&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ПредставлениеСостояния Тогда
		СтандартнаяОбработка = Ложь;
		
		ДанныеСтроки = Элементы.Список.ДанныеСтроки(ВыбраннаяСтрока);
		// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
		ОбменСКонтрагентамиКлиент.СостояниеЭДОНажатие_ФормаСписка(ДанныеСтроки.Ссылка, СтандартнаяОбработка);
		// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД.СервисВзаимодействияМПЭПД") Тогда
		МодульСервисВзаимодействияМПЭПДКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("СервисВзаимодействияМПЭПДКлиент");
		МодульСервисВзаимодействияМПЭПДКлиент.СписокВыборНаФорме(ЭтотОбъект, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	КонецЕсли;
	
	Если СтандартнаяОбработка = Истина Тогда
		СтандартнаяОбработка = Ложь;
		ОбменСГИСЭПДКлиентПереопределяемый.ИзменитьЭлемент(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ОбменСГИСЭПДКлиентПереопределяемый.УстановитьПометкуУдаления(Элемент, Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	
	Если Копирование = Истина Тогда
		Отказ = Истина;
		СписокСкопировать();	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ОбменСГИСЭПДКлиентПереопределяемый.ИзменитьЭлемент(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиДопРеквизитов(Команда)
	
	ОткрытьФорму("ОбщаяФорма.НастройкиДополнительныхРеквизитовЭПД");
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, ТекущийСписок(ЭтотОбъект));
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, ТекущийСписок(ЭтотОбъект), Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, ТекущийСписок(ЭтотОбъект));
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте
Процедура НастроитьОтбор(Команда)
	
	ВидыДокументов = ПолучитьВидыДокументов();
	
	ОповещениеПослеВыбора = Новый ОписаниеОповещения("ЗакончитьВыборТиповЭПД", ЭтотОбъект);
	
	ВидыДокументов.ПоказатьОтметкуЭлементов(ОповещениеПослеВыбора, НСтр("ru = 'Виды документов'"));
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЭЗН(Команда)
	ОткрытьФорму("Документ.ЭлектронныйЗаказНаряд.ФормаОбъекта");
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЭСВ(Команда)
	ОткрытьФорму("Документ.ЭлектроннаяСопроводительнаяВедомость.ФормаОбъекта");
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЭТН(Команда)
	ОткрытьФорму("Документ.ЭлектроннаяТранспортнаяНакладная.ФормаОбъекта");
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЭЗЗ(Команда)
	ОткрытьФорму("Документ.ЭлектронныйЗаказЗаявка.ФормаОбъекта");
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЭДФ(Команда)
	ОткрытьФорму("Документ.ЭлектронныйДоговорФрахтования.ФормаОбъекта");
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЭПЛ(Команда)
	ОткрытьФорму("Документ.ЭлектронныйПутевойЛист.ФормаОбъекта");
КонецПроцедуры

&НаКлиенте
Процедура СписокУстановитьИнтервал(Команда)
	
	Оповещение = Новый ОписаниеОповещения("УстановитьИнтервалЗавершение", ЭтотОбъект);
	
	ОбменСГИСЭПДКлиентПереопределяемый.РедактироватьПериод(СписокИнтервал,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьИспользованиеМП(Команда)
	
	Элементы.СписокПереключитьИспользованиеМП.Пометка = НЕ Элементы.СписокПереключитьИспользованиеМП.Пометка;
	
	ИспользуетсяМобильноеПриложение = Элементы.СписокПереключитьИспользованиеМП.Пометка;
	
	ОбновитьИспользованиеМобильногоПриложения(ИспользуетсяМобильноеПриложение);
	ОбновитьОтборТребующихРеакцию();	

КонецПроцедуры

&НаКлиенте
Процедура ВыборочныйОбменПоОрганизациям(Команда)
	ИнтерфейсДокументовЭДОВызовСервера.УстановитьОтправкуПолучениеСОтборомПоОрганизации(
		Не Элементы.ВыборочныйОбменПоОрганизациям.Пометка);
	Оповестить("УстановитьОтправкуПолучениеСОтборомПоОрганизации", Не Элементы.ВыборочныйОбменПоОрганизациям.Пометка);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьИнтервалЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииОтбора();
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки()
	
	Если Параметры.Свойство("ОтборыФормыСписка") Тогда
		
		ОтборТипыДокументов.ЗагрузитьЗначения(Параметры.ОтборыФормыСписка.ОтборТипыДокументов.ВыгрузитьЗначения());
		
	ИначеЕсли Параметры.Свойство("ТипЭПД") И ТипЗнч(Параметры.ТипЭПД) = Тип("Тип") Тогда
		 
		ОтборТипыДокументов.Добавить(Параметры.ТипЭПД);
		
	Иначе
	
		Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Обработка.ЭлектронныеПеревозочныеДокументы.Форма.ФормаСпискаЭПД", КлючНазначенияИспользования);
		
		Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		
			Настройки.Свойство("ОтборОрганизация", ОтборОрганизация);
			Настройки.Свойство("ОтборКонтрагент", ОтборКонтрагент);
			Настройки.Свойство("ПоляПоиска", ПоляПоиска);
			
			ИсторияПоиска = Неопределено;
			Настройки.Свойство("ИсторияПоиска", ИсторияПоиска);
			
			Если ИсторияПоиска <> Неопределено Тогда
				Для Каждого ЭлементСписка Из ИсторияПоиска Цикл
					Элементы.Поиск.СписокВыбора.Добавить(ЭлементСписка.Значение);	
				КонецЦикла;	
			КонецЕсли;
			
			Если Настройки.Свойство("ОтборТипыДокументов") И ТипЗнч(Настройки.ОтборТипыДокументов) = Тип("СписокЗначений") Тогда
				Для Каждого ЭлементСписка Из Настройки.ОтборТипыДокументов Цикл
					Если ТипЗнч(ЭлементСписка.Значение) = Тип("Тип") Тогда
						ОтборТипыДокументов.Добавить(ЭлементСписка.Значение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если Настройки.Свойство("ОтборХозяйственныеОперации") Тогда
				ОтборХозяйственныеОперации.ЗагрузитьЗначения(Настройки.ОтборХозяйственныеОперации.ВыгрузитьЗначения());
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "Список.Дата", "Дата");
	
	Если ИнтерфейсДокументовЭДОВызовСервера.ИспользуетсяОтправкаПолучениеСОтборомПоОрганизации() = Истина Тогда
		Элементы.ВыборочныйОбменПоОрганизациям.Пометка = Истина;
	Иначе
		Элементы.ВыборочныйОбменПоОрганизациям.Пометка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьЗапросНаОтборПоДокументуОснования(Параметры)

	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	ЗаполнитьЗначенияСвойств(СвойстваСписка, Список);
	СвойстваСписка.ТекстЗапроса = Обработки.ЭлектронныеПеревозочныеДокументы.ЗапросПоДокументуОснования();
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.Список, СвойстваСписка);
	
	Список.Параметры.УстановитьЗначениеПараметра("ДокументОснование", Параметры.ОтборДокументОснование);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КлючНазначенияФормыПоУмолчанию()
	
	Возврат "ФормаСпискаЭПД";
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРеквизитыФормыПриСоздании()
	
	ИнициализироватьХозяйственныеОперацииИДокументы(ХозяйственныеОперацииИДокументы, КлючНазначенияИспользования);
	
	// ОтборТипыДокументов
	Если ОтборТипыДокументов.Количество() = 0 Тогда
		Для Каждого Стр Из ХозяйственныеОперацииИДокументы Цикл
			
			ОтборТипыДокументов.Добавить(Стр.ТипДокумента, , Истина);
			
		КонецЦикла;
	КонецЕсли;
	
	УстановитьОтборыДинамическогоСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьВыборТиповЭПД(ЭлементыВыбора, Параметры) Экспорт
	
	Если ЭлементыВыбора <> Неопределено Тогда
		ОтборТипыДокументов.Очистить();
		
		ОтборПоОперациям = Новый Структура;
		
		КоличествоВыбрано = 0;
		Для Каждого СтрокаТипДокумента Из ЭлементыВыбора Цикл
			Если СтрокаТипДокумента.Пометка Тогда
				КоличествоВыбрано = КоличествоВыбрано + 1;
				
				ОтборТипыДокументов.Добавить(СтрокаТипДокумента.Значение);
				ОтборПоОперациям.Вставить("ТипДокумента", СтрокаТипДокумента.Значение);
				
				РезультатПоиска = ХозяйственныеОперацииИДокументы.НайтиСтроки(ОтборПоОперациям);
				Для Каждого СтрокаХозОперации Из РезультатПоиска Цикл
					
					СтрокаХозОперации.Отбор = Истина;
					
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ПриИзмененииОтбора();
	
	Если ЗначениеЗаполнено(Поиск) Тогда
		УстановитьОтборПоляПоиска();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИнициализироватьХозяйственныеОперацииИДокументы(ХозяйственныеОперацииИДокументы, КлючНазначенияИспользования)
	
	// Электронный заказ-наряд
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ПолноеИмяДокумента             = Метаданные.Документы.ЭлектронныйЗаказНаряд.ПолноеИмя();
	Строка.ТипДокумента					  = Тип("ДокументСсылка.ЭлектронныйЗаказНаряд");
	Строка.КлючНазначенияИспользования    = КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста         = НСтр("ru = 'Заказ-наряд'");
	Строка.ДобавитьКнопкуСоздать          = Истина;
	Строка.ПравоДоступаДобавление         = Истина;
	Строка.Отбор                          = Истина;
	Строка.ПравоДоступаИзменение          = Истина;
	Строка.Порядок                        = 1;
	Строка.ГруппаКнопок                   = "ЭПД";
	
	// Электронная транспортная накладная
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ПолноеИмяДокумента             = Метаданные.Документы.ЭлектроннаяТранспортнаяНакладная.ПолноеИмя();
	Строка.ТипДокумента					  = Тип("ДокументСсылка.ЭлектроннаяТранспортнаяНакладная");
	Строка.КлючНазначенияИспользования    = КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста         = НСтр("ru = 'Транспортная накладная'");
	Строка.ДобавитьКнопкуСоздать          = Истина;
	Строка.ПравоДоступаДобавление         = Истина;
	Строка.Отбор                          = Истина;
	Строка.ПравоДоступаИзменение          = Истина;
	Строка.Порядок                        = 3;
	Строка.ГруппаКнопок                   = "ЭПД";
	
	// Электронная сопроводительная ведомость
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ПолноеИмяДокумента             = Метаданные.Документы.ЭлектроннаяСопроводительнаяВедомость.ПолноеИмя();
	Строка.ТипДокумента					  = Тип("ДокументСсылка.ЭлектроннаяСопроводительнаяВедомость");
	Строка.КлючНазначенияИспользования    = КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста         = НСтр("ru = 'Сопроводительная ведомость'");
	Строка.ДобавитьКнопкуСоздать          = Истина;
	Строка.ПравоДоступаДобавление         = Истина;
	Строка.Отбор                          = Истина;
	Строка.ПравоДоступаИзменение          = Истина;
	Строка.Порядок                        = 2;
	Строка.ГруппаКнопок                   = "ЭПД";
	
	// Электронный заказ (заявка)
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ПолноеИмяДокумента             = Метаданные.Документы.ЭлектронныйЗаказЗаявка.ПолноеИмя();
	Строка.ТипДокумента					  = Тип("ДокументСсылка.ЭлектронныйЗаказЗаявка");
	Строка.КлючНазначенияИспользования    = КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста         = НСтр("ru = 'Заказ (заявка)'");
	Строка.ДобавитьКнопкуСоздать          = Истина;
	Строка.ПравоДоступаДобавление         = Истина;
	Строка.Отбор                          = Истина;
	Строка.ПравоДоступаИзменение          = Истина;
	Строка.Порядок                        = 3;
	Строка.ГруппаКнопок                   = "ЭПД";
	
	// Электронный договор фрахтования
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ПолноеИмяДокумента             = Метаданные.Документы.ЭлектронныйДоговорФрахтования.ПолноеИмя();
	Строка.ТипДокумента					  = Тип("ДокументСсылка.ЭлектронныйДоговорФрахтования");
	Строка.КлючНазначенияИспользования    = КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста         = НСтр("ru = 'Договор фрахтования'");
	Строка.ДобавитьКнопкуСоздать          = Истина;
	Строка.ПравоДоступаДобавление         = Истина;
	Строка.Отбор                          = Истина;
	Строка.ПравоДоступаИзменение          = Истина;
	Строка.Порядок                        = 3;
	Строка.ГруппаКнопок                   = "ЭПД";
	
	// Электронный путевой лист
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ПолноеИмяДокумента             = Метаданные.Документы.ЭлектронныйПутевойЛист.ПолноеИмя();
	Строка.ТипДокумента					  = Тип("ДокументСсылка.ЭлектронныйПутевойЛист");
	Строка.КлючНазначенияИспользования    = КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста         = НСтр("ru = 'Путевой лист'");
	Строка.ДобавитьКнопкуСоздать          = Истина;
	Строка.ПравоДоступаДобавление         = Истина;
	Строка.Отбор                          = Истина;
	Строка.ПравоДоступаИзменение          = Истина;
	Строка.Порядок                        = 3;
	Строка.ГруппаКнопок                   = "ЭПД";
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВидыДокументов()

	ВидыДокументов = Новый СписокЗначений; 
	
	Для Каждого ЭлементОтбора Из ХозяйственныеОперацииИДокументы Цикл
		
		Отбор = ОтборТипыДокументов.НайтиПоЗначению(ЭлементОтбора.ТипДокумента) <> Неопределено;
		ВидыДокументов.Добавить(ЭлементОтбора.ТипДокумента, ЭлементОтбора.ЗаголовокРабочегоМеста, Отбор);
		
	КонецЦикла;
	
	Возврат ВидыДокументов;
	
КонецФункции

&НаСервере
Процедура НастроитьЭлементыФормыПриСоздании()
	
	Если Параметры.Свойство("СтруктураБыстрогоОтбора") Тогда
		Если Параметры.СтруктураБыстрогоОтбора.Свойство("ПолноеИмяДокумента") Тогда
						
			Отбор = Новый Структура();
			Отбор.Вставить("ПолноеИмяДокумента", Параметры.СтруктураБыстрогоОтбора.ПолноеИмяДокумента);
			
			НайденныеСтроки = ХозяйственныеОперацииИДокументы.НайтиСтроки(Отбор);
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НайденнаяСтрока.Отбор = Истина;
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	НастроитьФормуПоНастройкамХозяйственныхОперацийИДокументов();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоНастройкамХозяйственныхОперацийИДокументов()
	
	ДанныеРабочегоМеста = ДанныеРабочегоМеста(
		ХозяйственныеОперацииИДокументы.Выгрузить(), 
		КлючНазначенияФормыПоУмолчанию(), 
		НСтр("ru = 'Электронные перевозочные документы'"));
	
	Заголовок = ДанныеРабочегоМеста.ЗаголовокРабочегоМеста;
	
КонецПроцедуры

&НаСервере
Функция ДанныеРабочегоМеста(ТаблицаХозОперацииИТипыДокументов, КлючНазначенияФормыПоУмолчанию, ЗаголовокФормыПоУмолчанию)
	
	ОтобранныеХозОперацииИТипыДокументов = ТаблицаХозОперацииИТипыДокументов.Скопировать(Новый Структура("Отбор",Истина),
		"КлючНазначенияИспользования,ЗаголовокРабочегоМеста");
	ОтобранныеХозОперацииИТипыДокументов.Свернуть("КлючНазначенияИспользования,ЗаголовокРабочегоМеста");
	
	ДанныеРабочегоМеста = Новый Структура("КлючНазначенияИспользования,ЗаголовокРабочегоМеста",
		КлючНазначенияФормыПоУмолчанию, ЗаголовокФормыПоУмолчанию);
		
	Если ОтобранныеХозОперацииИТипыДокументов.Количество() = 1 Тогда
		Если ЗначениеЗаполнено(ОтобранныеХозОперацииИТипыДокументов[0].КлючНазначенияИспользования) Тогда
			ДанныеРабочегоМеста.КлючНазначенияИспользования = ОтобранныеХозОперацииИТипыДокументов[0].КлючНазначенияИспользования;	
		КонецЕсли;
		Если ЗначениеЗаполнено(ОтобранныеХозОперацииИТипыДокументов[0].ЗаголовокРабочегоМеста) Тогда
			ДанныеРабочегоМеста.ЗаголовокРабочегоМеста = ОтобранныеХозОперацииИТипыДокументов[0].ЗаголовокРабочегоМеста;	
		КонецЕсли;			
	КонецЕсли;
	
	Возврат ДанныеРабочегоМеста;
	
КонецФункции

&НаСервере
Процедура ПоказатьКоличествоВыбранныхТиповДокументов()
	
	Если ОтборТипыДокументов.Количество() < ХозяйственныеОперацииИДокументы.Количество() Тогда
		Элементы.НастроитьОтбор.Заголовок = Команды.НастроитьОтбор.Заголовок 
												+ " (" + ОтборТипыДокументов.Количество() + " из " + ХозяйственныеОперацииИДокументы.Количество() + ")";
	Иначе
		Элементы.НастроитьОтбор.Заголовок = Команды.НастроитьОтбор.Заголовок;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьОтборПоПериоду()
	
	Если ЗначениеЗаполнено(СписокИнтервал.ДатаНачала)
	Или ЗначениеЗаполнено(СписокИнтервал.ДатаОкончания) Тогда
		Элементы.СписокУстановитьИнтервалГиперссылка.Заголовок = Формат(СписокИнтервал.ДатаНачала, "ДЛФ=D;")
																	+ " - "
																	+ Формат(СписокИнтервал.ДатаОкончания, "ДЛФ=D;");
		Элементы.СписокУстановитьИнтервалГиперссылка.Видимость = Истина;
	Иначе
		Элементы.СписокУстановитьИнтервалГиперссылка.Видимость = Ложь;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОтбора()
	
	СохранитьНастройки();
	УстановитьОтборыДинамическогоСписка();
	
	ПоказатьКоличествоВыбранныхТиповДокументов();
	ПоказатьОтборПоПериоду();
	
	ОбновитьОтборТребующихРеакцию();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	Если ФормыОткрытаПоГиперссылке Тогда
		Возврат;
	КонецЕсли;
	
	ИменаСохраняемыхРеквизитов =
		"ОтборОрганизация,ОтборКонтрагент,
		|ОтборГрузоотправитель,
		|ОтборПеревозчик,ОтборГрузополучатель,
		|ОтборХозяйственныеОперации,
		|ОтборТипыДокументов,
		|ПоляПоиска";
	
	Настройки = Новый Структура(ИменаСохраняемыхРеквизитов);
	ЗаполнитьЗначенияСвойств(Настройки, ЭтотОбъект);
	
	Настройки.Вставить("ИсторияПоиска", Элементы.Поиск.СписокВыбора);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Обработка.ЭлектронныеПеревозочныеДокументы.Форма.ФормаСпискаЭПД", КлючНазначенияИспользования, Настройки);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыДинамическогоСписка()

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"ТипСсылки",
		ОтборТипыДокументов,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		Истина);
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Организация",
		ОтборОрганизация,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(ОтборОрганизация));
		
	ОтборСписка = Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор;
	ГруппаОтборКонтрагент = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
								ОтборСписка,
								"Контрагент",
								ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
								
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ГруппаОтборКонтрагент,
		"Грузоотправитель",
		ОтборКонтрагент,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(ОтборКонтрагент));
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ГруппаОтборКонтрагент,
		"Перевозчик",
		ОтборКонтрагент,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(ОтборКонтрагент));
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ГруппаОтборКонтрагент,
		"Грузополучатель",
		ОтборКонтрагент,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(ОтборКонтрагент));
		
	Список.Параметры.УстановитьЗначениеПараметра("НачалоПериода", СписокИнтервал.ДатаНачала);
	
	Список.Параметры.УстановитьЗначениеПараметра("КонецПериода", 
		?(ЗначениеЗаполнено(СписокИнтервал.ДатаОкончания),
			КонецДня(СписокИнтервал.ДатаОкончания),
			СписокИнтервал.ДатаОкончания));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекущийСписок(Форма)

	Возврат Форма.Элементы.Список;

КонецФункции

&НаКлиенте
Процедура СписокСкопировать()
	
	ОбменСГИСЭПДКлиентПереопределяемый.СкопироватьЭлемент(Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВсе(Команда)
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.Отбор, "КартинкаМобильноеПриложение");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.Отбор, "ТекущийШагВыполнен");
	
	Элементы.КнопкаОтборНеобработанные.Пометка = Ложь;
	Элементы.КнопкаОтборНовыеСообщения.Пометка = Ложь;
	Элементы.КнопкаОтборВсе.Пометка = Истина;
		
КонецПроцедуры

&НаКлиенте
Процедура ОтборНеобработанные(Команда)
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.Отбор, "КартинкаМобильноеПриложение");
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ТекущийШагВыполнен", Ложь);
	
	Элементы.КнопкаОтборВсе.Пометка = Ложь;
	Элементы.КнопкаОтборНовыеСообщения.Пометка = Ложь;
	Элементы.КнопкаОтборНеобработанные.Пометка = Истина;
		
КонецПроцедуры

&НаКлиенте
Процедура ОтборНовыеСообщения(Команда)
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.Отбор, "ТекущийШагВыполнен");
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "КартинкаМобильноеПриложение", 5, ВидСравненияКомпоновкиДанных.Больше);
		
	Элементы.КнопкаОтборВсе.Пометка = Ложь;
	Элементы.КнопкаОтборНеобработанные.Пометка = Ложь;
	Элементы.КнопкаОтборНовыеСообщения.Пометка = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервалГиперссылка(Команда)
	
	Оповещение = Новый ОписаниеОповещения("УстановитьИнтервалЗавершение", ЭтотОбъект);
	
	ОбменСГИСЭПДКлиентПереопределяемый.РедактироватьПериод(СписокИнтервал,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Поиск) Тогда
		Если Элементы.Поиск.СписокВыбора.НайтиПоЗначению(Поиск) = Неопределено Тогда
			Элементы.Поиск.СписокВыбора.Вставить(0, Поиск);
			Если Элементы.Поиск.СписокВыбора.Количество() > 10 Тогда
				Элементы.Поиск.СписокВыбора.Удалить(10);	
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	УстановитьОтборПоляПоиска();

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоляПоиска()
	
	СписокДокументов = ОбменСГИСЭПДВызовСервера.ПоискДокументовПоСтроке(Поиск, ОтборТипыДокументов, ПоляПоиска, СписокИнтервал);

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, 
		"Ссылка", 
		СписокДокументов, 
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		ЗначениеЗаполнено(Поиск));
		
КонецПроцедуры

&НаКлиенте
Процедура ПоискНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	
	ПоискНачалоВыбора_Завершение = Новый ОписаниеОповещения("ПоискНачалоВыбора_Завершение", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.ЭлектронныеПеревозочныеДокументы.Форма.ФормаНастройкиПоиска", 
		ПараметрыФормы, 
		ЭтотОбъект, 
		УникальныйИдентификатор, , , 
		ПоискНачалоВыбора_Завершение, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПоиска(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПоляПоиска", ПоляПоиска);
	
	ПоискНачалоВыбора_Завершение = Новый ОписаниеОповещения("ПоискНачалоВыбора_Завершение", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.ЭлектронныеПеревозочныеДокументы.Форма.ФормаНастройкиПоиска", 
		ПараметрыФормы, 
		ЭтотОбъект, 
		УникальныйИдентификатор, , , 
		ПоискНачалоВыбора_Завершение, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ПоискНачалоВыбора_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ПоляПоиска = Результат;
		СохранитьНастройки();
		ОбновитьНадписьПолейПоиска();
		Если ЗначениеЗаполнено(Поиск) Тогда
			УстановитьОтборПоляПоиска();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНадписьПолейПоиска()
	
	КоличествоПолей = 0;
	Для Каждого ЭлементСписка Из ПоляПоиска Цикл
		Если ЭлементСписка.Пометка = Истина Тогда
			КоличествоПолей = КоличествоПолей + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоПолей = 0 Тогда
		Элементы.НастройкаПоиска.Заголовок = "Поиск по всем полям";
	Иначе
		Элементы.НастройкаПоиска.Заголовок = "Поиск по " 
			+ КоличествоПолей 
			+ ?(КоличествоПолей <> 11 И КоличествоПолей % 10 = 1, " полю", " полям");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти