
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Возврат при получении формы для анализа.
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьДекорации();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "Запись_ОприходованиеПрослеживаемыхТоваров" 
		Или ИмяСобытия = "Запись_УведомлениеОбОстаткахПрослеживаемыхТоваров"
		Или ИмяСобытия = "Запись_УведомлениеОВвозеПрослеживаемыхТоваров"
		Или ИмяСобытия = "Запись_УведомлениеОПеремещенииПрослеживаемыхТоваров" Тогда
		ОбновитьДекорации();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияКлассификаторТНВЭДНажатие(Элемент)
	ОткрытьФорму("Справочник.КлассификаторТНВЭД.ФормаСписка", Неопределено, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНоменклатураНажатие(Элемент)
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаСписка", Неопределено, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУведомленияОбОстаткахОформитьНажатие(Элемент)
	ОткрытьФормуУведомлений(Тип("ДокументСсылка.УведомлениеОбОстаткахПрослеживаемыхТоваров"), "Оформить");
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУведомленияОбОстаткахОтправитьНажатие(Элемент)
	ОткрытьФормуУведомлений(Тип("ДокументСсылка.УведомлениеОбОстаткахПрослеживаемыхТоваров"), "ОжидаютОтправки");
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУведомленияОбОстаткахОжидатьНажатие(Элемент)
	ОткрытьФормуУведомлений(Тип("ДокументСсылка.УведомлениеОбОстаткахПрослеживаемыхТоваров"), "ОжидаютПолучения");
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУведомленияОбОстаткахАрхивНажатие(Элемент)
	ОткрытьФормуУведомлений(Тип("ДокументСсылка.УведомлениеОбОстаткахПрослеживаемыхТоваров"), "Завершены");
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИнвентаризацияОстатковПересчетНажатие(Элемент)
	ОткрытьФорму("Документ.ПересчетТоваров.Форма.ФормаСписка", Неопределено, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИнвентаризацияОстатковСкладскиеАктыНажатие(Элемент)
	ОткрытьФорму("Обработка.ЖурналСкладскихАктов.Форма", Неопределено, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПроверкаОтрицательныхОстатковОткрытьПомощникНажатие(Элемент)
	ОткрытьФорму("Обработка.ПомощникИсправленияОстатковТоваровОрганизаций.Форма.ОсновнаяФорма", Неопределено, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОткрытьСписокСоглашенияСКомиссионерамиНажатие(Элемент)
	
	ПараметрыВыбора = Новый Структура("Отбор", ОтборСписокСоглашений());
	
	ОткрытьФорму("Справочник.СоглашенияСКлиентами.ФормаСписка", ПараметрыВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСформироватьОтчетНажатие(Элемент)
	
	ОткрытьФорму("Отчет.ОстаткиТоваровПереданныхНаКомиссию.Форма");
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВыбратьСкладНажатие(Элемент)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Склад", Склад);
	
	Описание = Новый ОписаниеОповещения("ЗавершитьВыборСклада", ЭтаФорма);
	
	ОткрытьФорму(
		"Обработка.ПанельАдминистрированияУчетПрослеживаемыхТоваров.Форма.ВыборСклада",ПараметрыОткрытия,
		ЭтаФорма,,,,Описание,
		РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОформитьОтчетыНажатие(Элемент)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ИмяТекущейСтраницы", "СтраницаКомиссионеры");
	
	ОткрытьФорму(
		"Обработка.ЖурналДокументовОтчетыКомиссионеров.Форма.СписокДокументов",ПараметрыОткрытия,
		ЭтаФорма,,,,,
		РежимОткрытияОкнаФормы.Независимый);
		
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОткрытьСписокОтчетовНажатие(Элемент)
	
	ИмяОткрываемойФормы = "Обработка.ЖурналДокументовОтчетыКомиссионеров.Форма.СписокДокументов";
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ИмяТекущейСтраницы", "СтраницаОтчетыКомиссионеров");
	
	ОткрытьФормуСОтборомПоПериоду(ИмяОткрываемойФормы, ПараметрыОткрытия);
		
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОткрытьСписокВозвратыНажатие(Элемент)
	
	Если Склад.Пустая() Тогда
		ОчиститьСообщения();
		ТекстСообщения = НСтр("ru = 'Не выбран склад.'");
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
	КонецЕсли;
	
	ПараметрыВыбора = Новый Структура("ПрослеживаемостьВозвратыТоваровОтКомиссионеров", ОтборСписокВозвратовОтКомиссионера());
	
	ОткрытьФорму("Обработка.ЖурналДокументовПродажи.Форма.СписокДокументов", ПараметрыВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОткрытьСписокПередачКомиссионерамНажатие(Элемент)
	
	Если Склад.Пустая() Тогда
		ОчиститьСообщения();
		ТекстСообщения = НСтр("ru = 'Не выбран склад.'");
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
	КонецЕсли;
	
	ПараметрыВыбора = Новый Структура("ПрослеживаемостьПередачиКомиссионерам", ОтборСписокПередачНаКомиссию());
	
	ОткрытьФорму("Обработка.ЖурналДокументовПродажи.Форма.СписокДокументов", ПараметрыВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОформитьВозвратыНажатие(Элемент)
	
	Если Склад.Пустая() Тогда
		ОчиститьСообщения();
		ТекстСообщения = НСтр("ru = 'Не выбран склад.'");
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
	КонецЕсли;
	
	Описание = Новый ОписаниеОповещения("ОбновитьДекорации", ЭтаФорма);
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Склад", Склад);
	
	ОткрытьФорму(
	"Обработка.ПанельАдминистрированияУчетПрослеживаемыхТоваров.Форма.ОформлениеВозвратовОтКомиссионеров",ПараметрыОткрытия,
	ЭтаФорма,,,,Описание,
	РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОформитьПередачиТоваровКомиссионерамНажатие(Элемент)
	
	Если Склад.Пустая() Тогда
		ОчиститьСообщения();
		ТекстСообщения = НСтр("ru = 'Не выбран склад.'");
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
	КонецЕсли;
	
	Описание = Новый ОписаниеОповещения("ОбновитьДекорации", ЭтаФорма);
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Склад", Склад);
	
	ОткрытьФорму(
	"Обработка.ПанельАдминистрированияУчетПрослеживаемыхТоваров.Форма.ОформлениеПередачиКомиссионерам",ПараметрыОткрытия,
	ЭтаФорма,,,,Описание,
	РежимОткрытияОкнаФормы.Независимый);

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОформлениеОтчетовКомитентамНажатие(Элемент)

	ОписаниеОповещения = Новый ОписаниеОповещения("ДекорацияОформлениеОтчетовКомитентамНажатиеЗавершение", ЭтаФорма, Новый Структура);
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ИмяТекущейСтраницы", "СтраницаРаспоряженияНаОформление");
	ПараметрыОткрытия.Вставить("Период", Новый СтандартныйПериод('00010101', КонецДня(ДатаПрослеживаемости() - 24 * 3600)));
	
	ОткрытьФорму("Обработка.ЖурналДокументовОтчетыКомитентам.Форма.СписокДокументов", 
		ПараметрыОткрытия, 
		ЭтаФорма, , , ,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОткрытьСписокОтчетовКомитентамНажатие(Элемент)
	
	ИмяОткрываемойФормы = "Обработка.ЖурналДокументовОтчетыКомитентам.Форма.СписокДокументов";
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ИмяТекущейСтраницы", "СтраницаОтчетыКомитентам");
	
	ОткрытьФормуСОтборомПоПериоду(ИмяОткрываемойФормы, ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияФормированиеОтчетаСверкиСКомитентамиНажатие(Элемент)
	
	ОткрытьФорму("Отчет.ОстаткиТоваровПринятыхНаКомиссию.Форма");
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОткрытьСписокВозвратовИПриемовНажатие(Элемент)
	
	ПараметрыВыбора = Новый Структура("ПрослеживаемостьПриемНаКомиссию", ОтборСписокПередачНаКомиссию());
	
	ОткрытьФорму("Обработка.ЖурналДокументовЗакупки.Форма.СписокДокументов", ПараметрыВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОформлениеВозвратовНажатие(Элемент)

	ОписаниеОповещения = Новый ОписаниеОповещения("ДекорацияОформлениеВозвратовНажатиеЗавершение", ЭтаФорма, Новый Структура);
	ОткрытьФорму("Обработка.ПанельАдминистрированияУчетПрослеживаемыхТоваров.Форма.ОформлениеВозвратовКомитентамИПриемаНаКомиссию", 
		Неопределено, 
		ЭтаФорма, , , ,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУведомленияОВвозеОформитьНажатие(Элемент)
	ОткрытьФормуУведомлений(Тип("ДокументСсылка.УведомлениеОВвозеПрослеживаемыхТоваров"), "Оформить");
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУведомленияОВвозеОтправитьНажатие(Элемент)
	ОткрытьФормуУведомлений(Тип("ДокументСсылка.УведомлениеОВвозеПрослеживаемыхТоваров"), "ОжидаютОтправки");
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУведомленияОВвозеОжидатьНажатие(Элемент)
	ОткрытьФормуУведомлений(Тип("ДокументСсылка.УведомлениеОВвозеПрослеживаемыхТоваров"), "ОжидаютПолучения");
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУведомленияОВвозеАрхивНажатие(Элемент)
	ОткрытьФормуУведомлений(Тип("ДокументСсылка.УведомлениеОВвозеПрослеживаемыхТоваров"), "Завершены");
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУведомленияОВывозеОформитьНажатие(Элемент)
	ОткрытьФормуУведомлений(Тип("ДокументСсылка.УведомлениеОПеремещенииПрослеживаемыхТоваров"), "Оформить");
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУведомленияОВывозеОтправитьНажатие(Элемент)
	ОткрытьФормуУведомлений(Тип("ДокументСсылка.УведомлениеОПеремещенииПрослеживаемыхТоваров"), "ОжидаютОтправки");
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУведомленияОВывозеАрхивНажатие(Элемент)
	ОткрытьФормуУведомлений(Тип("ДокументСсылка.УведомлениеОПеремещенииПрослеживаемыхТоваров"), "Завершены");
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВедомостьПоОстаткамСформироватьНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура("КлючВарианта", "ДвиженияТоваровОрганизацийПоРНПТ");
	ОткрытьФорму("Отчет.ВедомостьПоТоварамОрганизаций.Форма", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВедомостьТМЦВЭксплуатацииСформироватьНажатие(Элемент)
	
	
	Возврат; // В УТ не требуется
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОстаткиТМЦВЭксплуатацииСформироватьНажатие(Элемент)
	
	
	Возврат; // В УТ не требуется
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОформитьВводОстатковНажатие(Элемент)
	ОткрытьФормуУведомлений(Тип("ДокументСсылка.УведомлениеОбОстаткахПрослеживаемыхТоваров"), "Оформить");
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтправитьУведомлениеНажатие(Элемент)
	ОткрытьФормуУведомлений(Тип("ДокументСсылка.УведомлениеОбОстаткахПрослеживаемыхТоваров"), "ОжидаютОтправки");
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОжидатьПолученияРНПТНажатие(Элемент)
	ОткрытьФормуУведомлений(Тип("ДокументСсылка.УведомлениеОбОстаткахПрослеживаемыхТоваров"), "ОжидаютПолучения");
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияАрхивНажатие(Элемент)
	ОткрытьФормуУведомлений(Тип("ДокументСсылка.УведомлениеОбОстаткахПрослеживаемыхТоваров"), "Завершены");
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОткрытьЖурналПрослеживаемыхОперацийНажатие(Элемент)
	
	Возврат; // В УТ не требуется
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСформироватьОтчетОбОперацияхНажатие(Элемент)
	
	Возврат; // В УТ не требуется
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСформироватьДекларациюПоНДСНажатие(Элемент)
	
	Возврат; // В УТ не требуется
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСформироватьКнигуПродажНажатие(Элемент)
	
	ОткрытьФорму("Отчет.КнигаПродаж.Форма");
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСформироватьКнигуПокупокНажатие(Элемент)
	
	ОткрытьФорму("Отчет.КнигаПокупок.Форма");
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСформироватьЖурналУчетаСчетовФактурНажатие(Элемент)
	
	ОткрытьФорму("Отчет.ЖурналУчетаСчетовФактур.Форма");
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСформироватьВедомостьПрослеживаемыхТоваровВСоставеОСНажатие(Элемент) 
	
	Возврат;
КонецПроцедуры


&НаКлиенте
Процедура Обновить(Команда)
	ОбновитьДекорации();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции     

&НаСервере
Функция ЕстьОстаткиПрослеживаемыхТоваровВСоставеОСНеПринятыхКУчету() 
	
	ЕстьОстатки = Ложь; 
	Возврат ЕстьОстатки;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьЭлементов()
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"ГруппаСоглашенияСКомиссионерами", 
		"Видимость", 
		ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами"));
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"ГруппаВводОстатковПереданныхНаКомиссию", 
		"Видимость", 
		ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриПродажах"));
	
	#Область ГруппаНСИИВводОстатков
	
	ПравоДоступаУведомленияОбОстатках = ПравоДоступа("Просмотр", Метаданные.Документы.УведомлениеОбОстаткахПрослеживаемыхТоваров);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаУведомленияОСобственныхОстатках",
		"Видимость",
		ПравоДоступаУведомленияОбОстатках);
	
	ПравоДоступаПересчет = ПравоДоступа("Просмотр", Метаданные.Документы.ПересчетТоваров);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ДекорацияИнвентаризацияОстатковПересчет",
		"Видимость",
		ПравоДоступаПересчет);
	
	ПравоДоступаСкладскиеАкты = ПравоДоступа("Просмотр", Метаданные.Обработки.ЖурналСкладскихАктов);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ДекорацияИнвентаризацияОстатковСкладскиеАкты",
		"Видимость",
		ПравоДоступаСкладскиеАкты);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаИнвентаризацияОстатков",
		"Видимость",
		ПравоДоступаПересчет
			Или ПравоДоступаСкладскиеАкты);
	
	ПравоДоступаПроверкаОтрицательныхОстатков = ПравоДоступа("Просмотр", Метаданные.Обработки.ПомощникИсправленияОстатковТоваровОрганизаций);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаПроверкаОтрицательныхОстатков",
		"Видимость",
		ПравоДоступаПроверкаОтрицательныхОстатков);
	
	#КонецОбласти
	
	#Область ГруппаВводВПрослеживаемостьОстатковНаКомиссии
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"ГруппаВводВПрослеживаемостьОстатковНаКомиссии", 
		"Видимость", 
		ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриЗакупках"));
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"ГруппаОтчетыКомитентам", 
		"Видимость", 
		ПравоДоступа("Просмотр", Метаданные.Обработки.ЖурналДокументовОтчетыКомитентам));
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"ГруппаСверкаОстатковСКомитентами", 
		"Видимость", 
		ПравоДоступа("Просмотр", Метаданные.Отчеты.ОстаткиТоваровПринятыхНаКомиссию));
		
	ПравоДоступаВозвратТоваровПоставщику = ПравоДоступа("Добавление", Метаданные.Документы.ВозвратТоваровПоставщику);
	ПравоДоступаПриобретениеТоваровУслуг = ПравоДоступа("Добавление", Метаданные.Документы.ПриобретениеТоваровУслуг);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"ГруппаВозвратыТоваров", 
		"Видимость", 
		ПравоДоступаВозвратТоваровПоставщику И ПравоДоступаПриобретениеТоваровУслуг);
	
	#КонецОбласти
	
	#Область ГруппаВвозИзЕАЭСИПеремещениеВывозВЕАЭС
	
	Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаВвозИзЕАЭСИПеремещениеВывозВЕАЭС",
			"Видимость",
			Ложь);
	Иначе
		ПравоДоступаУведомленияОВвозе = ПравоДоступа("Просмотр", Метаданные.Документы.УведомлениеОВвозеПрослеживаемыхТоваров);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаУведомленияОВвозе",
			"Видимость",
			ПравоДоступаУведомленияОВвозе);
		
		ПравоДоступаУведомленияОВывозе = ПравоДоступа("Просмотр", Метаданные.Документы.УведомлениеОПеремещенииПрослеживаемыхТоваров);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаУведомленияОВывозе",
			"Видимость",
			ПравоДоступаУведомленияОВывозе);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаВвозИзЕАЭСИПеремещениеВывозВЕАЭС",
			"Видимость",
			ПравоДоступаУведомленияОВвозе
				Или ПравоДоступаУведомленияОВывозе);
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ГруппаВедомостьПоОстаткам
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаВедомостьПоОстаткам",
		"Видимость",
		ПравоДоступа("Просмотр", Метаданные.Отчеты.ВедомостьПоТоварамОрганизаций));
	
	#КонецОбласти
	
	#Область ГруппаОтчетыКомиссионеров
	
	ПравоДоступаОтчетыКомиссионеров = ПравоДоступа("Просмотр", Метаданные.Обработки.ЖурналДокументовОтчетыКомиссионеров);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаОтчетыКомиссионеров",
		"Видимость",
		ПравоДоступаОтчетыКомиссионеров);
	
	#КонецОбласти
	
			
	#Область ГруппаОтчетыПрослеживаемыхТоваровВСоставеОС
	
	Если ЕстьОстаткиПрослеживаемыхТоваровВСоставеОСНеПринятыхКУчету() Тогда 
		Элементы.ДекорацияЕстьОстаткиПрослеживаемыхТоваров.Видимость = Истина;
	Иначе
		Элементы.ДекорацияЕстьОстаткиПрослеживаемыхТоваров.Видимость = Ложь;
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ГруппаОтчетыПрослеживаемыхТоваров
	
	Если ПолучитьФункциональнуюОпцию("УправлениеТорговлей") Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаЖурналПрослеживаемыхОпераций",
			"Видимость",
			Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаОтчетОбОперациях",
			"Видимость",
			Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаДекларацияПоНДС",
			"Видимость",
			Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаВедомостьПрослеживаемыхТоваровВСоставеОС",
			"Видимость",
			Ложь);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаОстаткиПрослеживаемыхТоваровВСоставеОС",
			"Видимость",
			Ложь);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаВедомостьТМЦВЭксплуатации",
			"Видимость",
			Ложь);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаОстаткиТМЦВЭксплуатации",
			"Видимость",
			Ложь);
		
	КонецЕсли;
	
	#КонецОбласти
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСОтборомПоПериоду(ИмяОткрываемойФормы, ПараметрыОткрытия, НастройкиОтбора = Неопределено)
	
	Если НастройкиОтбора = Неопределено Тогда
		НастройкиОтбора = Новый НастройкиКомпоновкиДанных;
	КонецЕсли;
	
	ЭлементОтбор = НастройкиОтбора.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Дата");
	ЭлементОтбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбор.ПравоеЗначение = ДатаПрослеживаемости();
	ЭлементОтбор.Использование  = Истина;
	
	ЭлементОтбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ПараметрыОткрытия.Вставить("ФиксированныеНастройки", НастройкиОтбора);
	
	ОткрытьФорму(ИмяОткрываемойФормы, ПараметрыОткрытия, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОформлениеОтчетовКомитентамНажатиеЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	СформироватьЗаголовокОформленияОтчетовКомитентам();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОформлениеВозвратовНажатиеЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	СформироватьЗаголовокОформленияВозвратовКомитентам();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОтборСписокСоглашений()
	
	Структура = Новый Структура;
	Структура.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
	
	Возврат Структура;
	
КонецФункции

&НаСервере
Функция ОтборСписокВозвратовОтКомиссионера()
	
	Возврат Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера;
	
КонецФункции

&НаСервере
Функция ОтборСписокПередачНаКомиссию()
	
	Возврат Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДатаПрослеживаемости()
	
	Возврат УчетПрослеживаемыхТоваровЛокализация.ДатаНачалаУчетаПрослеживаемыхИмпортныхТоваров();
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьВыборСклада(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Склад = Результат;
	ОбновитьСклад();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСклад()
	
	Если Склад.Пустая() Тогда
		Элементы.ДекорацияВыбратьСклад.Заголовок = НСтр("ru = 'Выбрать склад.'");
	Иначе
		Элементы.ДекорацияВыбратьСклад.Заголовок = Строка(Склад);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДекорации(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОбновитьСклад();
	ОбновитьДекорацииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДекорацииНаСервере()
	
	СформироватьЗаголовокОформленияОтчетовКомитентам();
	СформироватьЗаголовокОформленияВозвратовКомитентам();
	
	ЗаголовокЭлемента = НСтр("ru = 'Оформить %1'");
	КоличествоКОформлению = УчетПрослеживаемыхТоваровЛокализация.КоличествоОтчетовКОформлению();
	ЗаголовокЭлемента =
		СтрШаблон(
			ЗаголовокЭлемента,
			?(ЗначениеЗаполнено(КоличествоКОформлению), "(" + Строка(КоличествоКОформлению) + ")", ""));
	ЗаголовокЭлемента = СокрЛП(ЗаголовокЭлемента);
	Элементы.ДекорацияОформитьОтчеты.Заголовок = ЗаголовокЭлемента;
	
	ЗаголовокЭлемента = НСтр("ru = 'Оформить %1'");
	КоличествоКОформлению = УчетПрослеживаемыхТоваровЛокализация.КоличествоВозвратовКОформлению();
	ЗаголовокЭлемента =
		СтрШаблон(
			ЗаголовокЭлемента,
			?(ЗначениеЗаполнено(КоличествоКОформлению), "(" + Строка(КоличествоКОформлению) + ")", ""));
	ЗаголовокЭлемента = СокрЛП(ЗаголовокЭлемента);
	Элементы.ДекорацияОформитьВозвраты.Заголовок = ЗаголовокЭлемента;
	
	ЗаголовокЭлемента = НСтр("ru = 'Оформить %1'");
	КоличествоКОформлению = УчетПрослеживаемыхТоваровЛокализация.КоличествоПередачКОформлению(Склад);
	ЗаголовокЭлемента =
		СтрШаблон(
			ЗаголовокЭлемента,
			?(ЗначениеЗаполнено(КоличествоКОформлению), "(" + Строка(КоличествоКОформлению) + ")", ""));
	ЗаголовокЭлемента = СокрЛП(ЗаголовокЭлемента);
	Элементы.ДекорацияОформитьПередачиТоваровКомиссионерам.Заголовок = ЗаголовокЭлемента;
	
	ТипыУведомлений = Новый Массив;
	ТипыУведомлений.Добавить(Тип("ДокументСсылка.УведомлениеОбОстаткахПрослеживаемыхТоваров"));
	ТипыУведомлений.Добавить(Тип("ДокументСсылка.УведомлениеОВвозеПрослеживаемыхТоваров"));
	ТипыУведомлений.Добавить(Тип("ДокументСсылка.УведомлениеОПеремещенииПрослеживаемыхТоваров"));
	
	КоличестваУведомленийКОформлению = УчетПрослеживаемыхТоваровЛокализация.КоличествоРаспоряженийКОформлениюУведомлений(ТипыУведомлений);
	ШаблонЗаголовокЭлемента = НСтр("ru = 'Оформить %1'");
	
	Для Каждого КлючЗначение Из КоличестваУведомленийКОформлению Цикл
		
		КоличествоКОформлению = КлючЗначение.Значение;
	
		ЗаголовокЭлемента =
			СтрШаблон(
				ШаблонЗаголовокЭлемента,
				?(ЗначениеЗаполнено(КоличествоКОформлению), "(" + Строка(КоличествоКОформлению) + ")", ""));
	
		ЗаголовокЭлемента = СокрЛП(ЗаголовокЭлемента);
		
		Если КлючЗначение.Ключ = Тип("ДокументСсылка.УведомлениеОбОстаткахПрослеживаемыхТоваров") Тогда
			Элементы.ДекорацияУведомленияОбОстаткахОформить.Заголовок = ЗаголовокЭлемента;
			Элементы.ДекорацияОформитьВводОстатков.Заголовок = ЗаголовокЭлемента;
		ИначеЕсли КлючЗначение.Ключ = Тип("ДокументСсылка.УведомлениеОВвозеПрослеживаемыхТоваров") Тогда
			Элементы.ДекорацияУведомленияОВвозеОформить.Заголовок = ЗаголовокЭлемента;
		ИначеЕсли КлючЗначение.Ключ = Тип("ДокументСсылка.УведомлениеОПеремещенииПрослеживаемыхТоваров") Тогда
			Элементы.ДекорацияУведомленияОВывозеОформить.Заголовок = ЗаголовокЭлемента;
		КонецЕсли;
		
	КонецЦикла;
	
	КоличестваУведомленийКОформлению =
		ЖурналыДокументов.ПрослеживаемостьУведомления.СтатистикаОтправкиУведомлений(ТипыУведомлений, Неопределено);
	
	ШаблонЗаголовокЭлементаОтправить = НСтр("ru = 'Отправить (%1)'");
	ШаблонЗаголовокЭлементаОжидать = НСтр("ru = 'Ожидать получения РНПТ (%1)'");
	ШаблонЗаголовокЭлементаАрхив = НСтр("ru = 'Архив (%1)'");
	
	Для Каждого КлючЗначение Из КоличестваУведомленийКОформлению Цикл
		
		КоличествоКОформлениюОтправить = КлючЗначение.Значение.ОжидаютОтправки;
		КоличествоКОформлениюОжидать = КлючЗначение.Значение.ОжидаютПолучения;
		КоличествоКОформлениюАрхив = КлючЗначение.Значение.Завершены;
	
		ЗаголовокЭлементаОтправить =
			СтрШаблон(ШаблонЗаголовокЭлементаОтправить, Строка(КоличествоКОформлениюОтправить));
		
		ЗаголовокЭлементаОжидать =
			СтрШаблон(ШаблонЗаголовокЭлементаОжидать, Строка(КоличествоКОформлениюОжидать));
		
		ЗаголовокЭлементаАрхив =
			СтрШаблон(ШаблонЗаголовокЭлементаАрхив, Строка(КоличествоКОформлениюАрхив));
		
		ЗаголовокЭлементаОтправить = СокрЛП(ЗаголовокЭлементаОтправить);
		ЗаголовокЭлементаОжидать = СокрЛП(ЗаголовокЭлементаОжидать);
		ЗаголовокЭлементаАрхив = СокрЛП(ЗаголовокЭлементаАрхив);
		
		Если КлючЗначение.Ключ = Тип("ДокументСсылка.УведомлениеОбОстаткахПрослеживаемыхТоваров") Тогда
			Элементы.ДекорацияУведомленияОбОстаткахОтправить.Заголовок = ЗаголовокЭлементаОтправить;
			Элементы.ДекорацияОтправитьУведомление.Заголовок = ЗаголовокЭлементаОтправить;
			Элементы.ДекорацияУведомленияОбОстаткахОжидать.Заголовок = ЗаголовокЭлементаОжидать;
			Элементы.ДекорацияОжидатьПолученияРНПТ.Заголовок = ЗаголовокЭлементаОжидать;
			Элементы.ДекорацияУведомленияОбОстаткахАрхив.Заголовок = ЗаголовокЭлементаАрхив;
			Элементы.ДекорацияАрхив.Заголовок = ЗаголовокЭлементаАрхив;
		ИначеЕсли КлючЗначение.Ключ = Тип("ДокументСсылка.УведомлениеОВвозеПрослеживаемыхТоваров") Тогда
			Элементы.ДекорацияУведомленияОВвозеОтправить.Заголовок = ЗаголовокЭлементаОтправить;
			Элементы.ДекорацияУведомленияОВвозеОжидать.Заголовок = ЗаголовокЭлементаОжидать;
			Элементы.ДекорацияУведомленияОВвозеАрхив.Заголовок = ЗаголовокЭлементаАрхив;
		ИначеЕсли КлючЗначение.Ключ = Тип("ДокументСсылка.УведомлениеОПеремещенииПрослеживаемыхТоваров") Тогда
			Элементы.ДекорацияУведомленияОВывозеОтправить.Заголовок = ЗаголовокЭлементаОтправить;
			Элементы.ДекорацияУведомленияОВывозеАрхив.Заголовок = ЗаголовокЭлементаАрхив;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуУведомлений(ТипУведомления, Состояние)
	
	ПараметрыФормы = Новый Структура;
	ИмяФормыУведомлений = "";
	
	Если Состояние = "Оформить" Тогда
		Если ТипУведомления = Тип("ДокументСсылка.УведомлениеОбОстаткахПрослеживаемыхТоваров") Тогда
			ИмяФормыУведомлений = "Документ.УведомлениеОбОстаткахПрослеживаемыхТоваров.Форма.ФормаРабочееМесто";
		ИначеЕсли ТипУведомления = Тип("ДокументСсылка.УведомлениеОПеремещенииПрослеживаемыхТоваров")
			Или ТипУведомления = Тип("ДокументСсылка.УведомлениеОВвозеПрослеживаемыхТоваров") Тогда
			ИмяФормыУведомлений = "ОбщаяФорма.ФормированиеУведомленийОВвозеПеремещении";
			ПараметрыФормы.Вставить("ТипУведомления", ТипУведомления);
		КонецЕсли;
	Иначе
		ИмяФормыУведомлений = "ЖурналДокументов.ПрослеживаемостьУведомления.ФормаСписка";
		ПараметрыФормы.Вставить("ТипУведомления", ТипУведомления);
		ПараметрыФормы.Вставить("Состояние", Состояние);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяФормыУведомлений) Тогда
		ОткрытьФорму(
			ИмяФормыУведомлений,
			ПараметрыФормы,
			,,,,,
			РежимОткрытияОкнаФормы.Независимый);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЗаголовокОформленияОтчетовКомитентам()
	
	ЗапросОтчетовКОформлению = Новый Запрос;
	ЗапросОтчетовКОформлению.Текст = ТекстЗапросаОтчетовКОформлению();
	
	ЗапросОтчетовКОформлению.УстановитьПараметр("НачГраница", '00010101');
	ЗапросОтчетовКОформлению.УстановитьПараметр("КонГраница", КонецДня(ДатаПрослеживаемости() - 24 * 3600));
	
	КоличествоОтчетовКОформлению = ЗапросОтчетовКОформлению.Выполнить().Выбрать().Количество();
	
	ЗаголовокЭлемента =
		СтрШаблон(
			НСтр("ru = 'Оформить %1'"),
			?(ЗначениеЗаполнено(КоличествоОтчетовКОформлению), "(" + Строка(КоличествоОтчетовКОформлению) + ")", ""));
			
	Элементы.ДекорацияОформлениеОтчетовКомитентам.Заголовок = СокрЛП(ЗаголовокЭлемента);
		
КонецПроцедуры

&НаСервере
Процедура СформироватьЗаголовокОформленияВозвратовКомитентам()
	
	ТаблицаВозвратов = Обработки.ПанельАдминистрированияУчетПрослеживаемыхТоваров.ПолучитьДокументыКОформлениюПоПрослеживаемымТоварамНаКомиссии();
	КоличествоВозвратовКОформлению = ТаблицаВозвратов.Количество();
	
	ЗаголовокЭлемента =
		СтрШаблон(
			НСтр("ru = 'Оформить %1'"),
			?(ЗначениеЗаполнено(КоличествоВозвратовКОформлению), "(" + Строка(КоличествоВозвратовКОформлению) + ")", ""));
	
	Элементы.ДекорацияОформлениеВозвратов.Заголовок = СокрЛП(ЗаголовокЭлемента);
		
КонецПроцедуры

&НаСервере
Функция ТекстЗапросаОтчетовКОформлению()
	
	Возврат
	
	"ВЫБРАТЬ
	|	КОформлению.Валюта КАК Валюта,
	|	КОформлению.Организация КАК Организация,
	|	КОформлению.Комитент КАК Комитент,
	|	КОформлению.Контрагент КАК Контрагент,
	|	КОформлению.Соглашение КАК Соглашение,
	|	КОформлению.Договор КАК Договор,
	|	КОформлению.НалогообложениеНДС КАК НалогообложениеНДС,
	|	КОформлению.ВидОперации КАК ВидОперации
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыКОформлению.Валюта КАК Валюта,
	|		ТоварыКОформлению.ВидЗапасов.Организация КАК Организация,
	|		ТоварыКОформлению.ВидЗапасов.ВладелецТовара КАК Комитент,
	|		ТоварыКОформлению.ВидЗапасов.Контрагент КАК Контрагент,
	|		ТоварыКОформлению.ВидЗапасов.Соглашение КАК Соглашение,
	|		ТоварыКОформлению.ВидЗапасов.Договор КАК Договор,
	|		ТоварыКОформлению.ВидЗапасов.НалогообложениеНДС КАК НалогообложениеНДС,
	|		ТоварыКОформлению.ВидЗапасов.ВидЗапасовВладельца.ТипЗапасов КАК ТипЗапасовКомитента,
	|		0 КАК ВидОперации 
	|	ИЗ
	|		РегистрНакопления.ТоварыКОформлениюОтчетовКомитенту.ОстаткиИОбороты(&НачГраница, &КонГраница, Авто) КАК
	|			ТоварыКОформлению
	|	ГДЕ
	|		ТоварыКОформлению.ВидЗапасов.ВладелецТовара ССЫЛКА Справочник.Партнеры
	|		И ТоварыКОформлению.КоличествоКонечныйОстаток <> 0
	|		И (ТоварыКОформлению.КоличествоПриход <> 0
	|		ИЛИ ТоварыКОформлению.КоличествоРасход <> 0)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ТоварыКОформлению.Валюта КАК Валюта,
	|		ТоварыКОформлению.ВидЗапасов.Организация КАК Организация,
	|		ТоварыКОформлению.ВидЗапасов.ВладелецТовара КАК Комитент,
	|		ТоварыКОформлению.ВидЗапасов.Контрагент КАК Контрагент,
	|		ТоварыКОформлению.ВидЗапасов.Соглашение КАК Соглашение,
	|		ТоварыКОформлению.ВидЗапасов.Договор КАК Договор,
	|		ТоварыКОформлению.ВидЗапасов.НалогообложениеНДС КАК НалогообложениеНДС,
	|		ТоварыКОформлению.ВидЗапасов.ВидЗапасовВладельца.ТипЗапасов КАК ТипЗапасовКомитента,
	|		1 КАК ВидОперации
	|	ИЗ
	|		РегистрНакопления.ТоварыКОформлениюОтчетовКомитенту.ОстаткиИОбороты(&НачГраница, &КонГраница, Авто) КАК
	|			ТоварыКОформлению
	|	ГДЕ
	|		ТоварыКОформлению.ВидЗапасов.ВладелецТовара ССЫЛКА Справочник.Партнеры
	|		И ТоварыКОформлению.КоличествоСписаноКонечныйОстаток <> 0
	|		И (ТоварыКОформлению.КоличествоСписаноПриход <> 0
	|		ИЛИ ТоварыКОформлению.КоличествоСписаноРасход <> 0)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		УслугиКОформлению.Валюта КАК Валюта,
	|		УслугиКОформлению.Организация КАК Организация,
	|		УслугиКОформлению.АналитикаУчетаНоменклатуры.МестоХранения КАК Комитент,
	|		НЕОПРЕДЕЛЕНО КАК Контрагент,
	|		УслугиКОформлению.Соглашение КАК Соглашение,
	|		НЕОПРЕДЕЛЕНО КАК Договор,
	|		НЕОПРЕДЕЛЕНО КАК НалогообложениеНДС,
	|		ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПустаяСсылка) КАК ТипЗапасовКомитента,
	|		0 КАК ВидОперации
	|	ИЗ
	|		РегистрНакопления.УслугиКОформлениюОтчетовПринципалу.ОстаткиИОбороты(&НачГраница, &КонГраница, Авто) КАК
	|			УслугиКОформлению
	|	ГДЕ
	|		УслугиКОформлению.АналитикаУчетаНоменклатуры.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.Партнер)
	|		И УслугиКОформлению.КоличествоКонечныйОстаток <> 0
	|		И (УслугиКОформлению.КоличествоПриход <> 0
	|		ИЛИ УслугиКОформлению.КоличествоРасход <> 0)) КАК КОформлению
	|СГРУППИРОВАТЬ ПО
	|	КОформлению.Валюта,
	|	КОформлению.Организация,
	|	КОформлению.Комитент,
	|	КОформлению.Контрагент,
	|	КОформлению.Соглашение,
	|	КОформлению.Договор,
	|	КОформлению.НалогообложениеНДС,
	|	КОформлению.ВидОперации"
	
КонецФункции


&НаКлиенте
Процедура СформироватьОстаткиПрослеживаемыхТоваровВСоставеОСНажатие(Элемент)
	
	
	Возврат;
КонецПроцедуры  // В УТ не требуется


#КонецОбласти