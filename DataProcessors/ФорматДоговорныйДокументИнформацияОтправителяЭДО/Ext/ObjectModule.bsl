#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем Менеджер; // ОбработкаМенеджер.ФорматДоговорныйДокументИнформацияОтправителяЭДО
Перем ДатаФормирования; // Дата

#КонецОбласти

#Область ПрограммныйИнтерфейс

#Область СтруктураДанных

// Возвращаемое значение:
//  ОбработкаТабличнаяЧастьСтрока.ФорматДоговорныйДокументИнформацияОтправителяЭДО.Фрагменты
//
Функция НовыйФрагмент() Экспорт

	Возврат Фрагменты.Добавить();
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращаемое значение:
//  Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//
Функция ПолучитьОшибкиЗаполнения() Экспорт
	Возврат Новый Массив;
КонецФункции

// Параметры:
//  СоответствиеНоменклатуры - см. СопоставлениеНоменклатурыКонтрагентов.НайтиСоответствиеНоменклатуры
//
Процедура ЗаполнитьДанныеСопоставления(СоответствиеНоменклатуры) Экспорт

КонецПроцедуры

// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//  * Ключ - см. СопоставлениеНоменклатурыКонтрагентов.ИдентификаторНоменклатурыКонтрагентаПоНатуральнымКлючам
//  * Значение - см. ФорматыЭДО.НовыеДанныеДляСопоставленияТоваров
//
Функция СтрокиТребующиеСопоставления() Экспорт
	
	Возврат Новый Соответствие;

КонецФункции

// Параметры:
//  ДополнительныеДанные - см. ФорматыЭДО.НовыеДанныеДляФормированияОсновногоТитула 
//
Процедура УстановитьДополнительныеДанныеДляФормирования(ДополнительныеДанные) Экспорт
	ДополнительныеДанныеДляФормирования = ДополнительныеДанные;
КонецПроцедуры

// Возвращаемое значение:
//  см. ФорматыЭДО.НовыеДанныеДляФормированияОсновногоТитула
//
Функция ПолучитьДополнительныеДанныеДляФормирования() Экспорт
	Возврат ДополнительныеДанныеДляФормирования;
КонецФункции

#Область ФормированиеЭлектронногоДокумента

// Возвращаемое значение:
//  Строка - Идентификатор файла по шаблону формата
//
Функция ИдентификаторФайла() Экспорт
	
	ДанныеШаблона = Новый Структура;
	ДанныеШаблона.Вставить("ТипФайла", Менеджер.ПрефиксФормата());
	ДанныеШаблона.Вставить("Получатель",
		ПолучитьДополнительныеДанныеДляФормирования().Участники.ИдентификаторПолучателя);
	ДанныеШаблона.Вставить("Отправитель",
		ПолучитьДополнительныеДанныеДляФормирования().Участники.ИдентификаторОтправителя);
	ДанныеШаблона.Вставить("Дата", Формат(ДатаФормирования, "ДФ=yyyyMMdd"));
	
	ДанныеШаблона.Вставить("Пар1", ПолучитьДополнительныеДанныеДляФормирования().УникальныйИдентификатор); // УИД
	ДанныеШаблона.Вставить("Пар2", "1"); // Функция файла
	ДанныеШаблона.Вставить("Пар3", "00"); // Номер доп. соглашения
	ДанныеШаблона.Вставить("Пар4", "00"); // Номер прилагаемого файла
	ДанныеШаблона.Вставить("Пар5", "01"); // Порядковый номер
	
	Возврат СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
		"[ТипФайла]_[Получатель]_[Отправитель]_[Дата]_[Пар1]_[Пар2]_[Пар3]_[Пар4]_[Пар5]", ДанныеШаблона);

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура Инициализировать()
	
	Менеджер = Обработки.ФорматДоговорныйДокументИнформацияОтправителяЭДО;
	ДатаФормирования = ТекущаяДатаСеанса();
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

Инициализировать();

#КонецОбласти

#КонецЕсли