
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ЗаголовокФормы) Тогда
		Заголовок = Параметры.ЗаголовокФормы;
	КонецЕсли;
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	Если ПустаяСтрока(Параметры.КлючНазначенияФормы) Тогда
		КлючНазначенияИспользования = КлючНазначенияФормыПоУмолчанию();
	Иначе
		КлючНазначенияИспользования = Параметры.КлючНазначенияФормы;
	КонецЕсли;
	
	Если КлючНазначенияИспользования = КлючНазначенияФормыПоУмолчанию() Тогда
		КлючНастроек = "";
	Иначе
		КлючНастроек = КлючНазначенияИспользования;
	КонецЕсли;
	
	Если Параметры.Свойство("Распоряжения") Тогда
		Распоряжения.ЗагрузитьЗначения(Параметры.Распоряжения);
	КонецЕсли;
	
	ВосстановитьНастройки(Параметры);
	УстановитьОтборПоОрганизации();
	
	ТЗХозОперацииИТипыДокументов = ОбщегоНазначенияУТ.ДоступныеХозяйственныеОперацииИДокументы(
		Обработки.ЖурналДокументовВнутреннегоТовародвижения.ОписаниеОперацийИТиповДокументов(
			ХозяйственныеОперацииИДокументы.Выгрузить(Новый Массив)).Скопировать(
				Новый Структура("МенеджерРасчетаГиперссылкиКОформлению", "Обработка.ЖурналДокументовВнутреннегоТовародвижения")),
		ОтборХозяйственныеОперации, ОтборТипыДокументов, КлючНастроек);
	
	ХозяйственныеОперацииИДокументы.Загрузить(ТЗХозОперацииИТипыДокументов);
	
	НастроитьФормуПоПравамИФункциональнымОпциям();
	
	НастроитьФормуПоВыбраннымОперациямИДокументам(ТЗХозОперацииИТипыДокументов);
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтаФорма, "СканерШтрихкода");
	
	СостояниеДокументовПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не ЗавершениеРаботы И КлючНазначенияИспользования <> "ТекущиеДела" И КлючНазначенияИспользования <> "ВводНаОсновании" Тогда
		СохранитьНастройки();
	КонецЕсли;
	
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияУТКлиент.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияУТКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "Запись_ЗаказНаВнутреннееПотребление"
		Или ИмяСобытия = "Запись_ЗаказНаПеремещение"
		Или ИмяСобытия = "Запись_ЗаказНаСборку"
		Или ИмяСобытия = "Запись_ВнутреннееПотребление"
		Или ИмяСобытия = "Запись_ПеремещениеТоваров"
		Или ИмяСобытия = "Запись_СборкаТоваров"
		Или ИмяСобытия = "Запись_ПрочееОприходованиеТоваров"

		Или ИмяСобытия = "Запись_РасходныйОрдерНаТовары"
		Или ИмяСобытия = "Запись_ПриходныйОрдерНаТовары"
		Или ИмяСобытия = "Принять_ФормаСозданныхДокументов" Тогда
		
		ОбновитьСписокРаспоряженияНаОформлениеНаСервере();
		
		Если ЗначениеЗаполнено(Распоряжения) И СписокРаспоряженияНаОформление.Количество() = 0
				И (
					ИмяСобытия = "Запись_ВнутреннееПотребление"
					Или ИмяСобытия = "Запись_ПеремещениеТоваров"
					Или ИмяСобытия = "Запись_СборкаТоваров"
					Или ИмяСобытия = "Принять_ФормаСозданныхДокументов")
				И Параметр.ИдентификаторФормыВладельца = УникальныйИдентификатор Тогда
			Закрыть();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.ЖурналДокументовВнутреннегоТовародвижения.Форма.СписокДокументовКОформлению.Элемент.Организация.ПриИзменении");
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	СкладПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура МенеджерПриИзменении(Элемент)
	МенеджерПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СостояниеДокументовПриИзменении(Элемент)
	
	ОтборСтрок = Новый Структура;
	
	Если Не ПустаяСтрока(СостояниеНакладной) Тогда
		ОтборСтрок.Вставить("СостояниеНакладной", Число(СостояниеНакладной));
	КонецЕсли;
	Если Не ПустаяСтрока(СостояниеОрдераНаОтгрузку) Тогда
		ОтборСтрок.Вставить("СостояниеОрдераНаОтгрузку", Число(СостояниеОрдераНаОтгрузку));
	КонецЕсли;
	Если Не ПустаяСтрока(СостояниеОрдераНаПриемку) Тогда
		ОтборСтрок.Вставить("СостояниеОрдераНаПриемку", Число(СостояниеОрдераНаПриемку));
	КонецЕсли;
	
	Элементы.СписокРаспоряженияНаОформление.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбщегоНазначенияУТКлиент.ИзменитьЭлемент(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформационнаяНадписьОтборОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ДоступныеХозяйственныеОперацииИДокументы", ПоместитьВоВременноеХранилищеХозяйственныеОперацииИДокументы());
	ПараметрыФормы.Вставить("КлючНастроек", КлючНазначенияИспользования);
	ПараметрыФормы.Вставить("КлючФормы", КлючНазначенияФормыПоУмолчанию());
	
	ОткрытьФорму("Справочник.НастройкиХозяйственныхОпераций.Форма.ФормаУстановкиОтбора",
		ПараметрыФормы,,,,,
		Новый ОписаниеОповещения("УстановитьОтборыПоХозОперациямИДокументам", 
		ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборыПоХозОперациямИДокументам(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		СтандартнаяОбработка = Ложь;
		
		АдресДоступныхХозяйственныхОперацийИДокументов = ВыбранноеЗначение;
		
		ОтборОперацияТипОбработкаВыбораСервер(АдресДоступныхХозяйственныхОперацийИДокументов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаВнутренниеДокументыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияУТКлиент.ОткрытьЖурнал(ПараметрыЖурнала());
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОформитьПоЗаказам(Команда)
	
	Перем СписокОшибок;
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.ЖурналДокументовВнутреннегоТовародвижения.Форма.СписокДокументовКОформлению.Команда.ОформитьПоЗаказам");
	
	ВыделенныеСтроки = Элементы.СписокРаспоряженияНаОформление.ВыделенныеСтроки;
	Если Не ОбщегоНазначенияУТКлиент.ВыбраныДокументыКОформлению(
		ВыделенныеСтроки, ПараметрыЖурнала()) Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ГруппировкиРаспоряжений = НакладныеКлиент.ДанныеДляОформленияПоЗаказам(СписокРаспоряженияНаОформление,
		ВыделенныеСтроки, "ХозяйственнаяОперация,Склад,Отправитель,Получатель,Подразделение",
		СписокОшибок, "Объект.СписокРаспоряженияНаОформление", ХозяйственныеОперацииИДокументы);
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(СписокОшибок);
	
	Если ЗначениеЗаполнено(ГруппировкиРаспоряжений) Тогда
		
		ПараметрыПроцедуры = Новый Структура();
		ПараметрыПроцедуры.Вставить("ГруппировкиРаспоряжений", ГруппировкиРаспоряжений);
		ПараметрыПроцедуры.Вставить("ПараметрыФормыСозданныхДокументов", ПараметрыФормыСозданныхДокументов());
		ПараметрыПроцедуры.Вставить("ПолеОшибки", "Объект.СписокРаспоряженияНаОформление");

		НаименованиеЗадания = НСтр("ru = 'Журнал внутренних документов: Оформление по заказам'");
		
		ДлительнаяОперация = ВыполнитьДействияВФоне(
			ДействиеОформитьНакладныеПоЗаказам(),
			ПараметрыПроцедуры,
			НаименованиеЗадания);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация,
			Новый ОписаниеОповещения("ВыполнитьДействияВФонеЗавершение", ЭтотОбъект), ПараметрыОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьПоОтгрузкеПриемке(Команда)
	
	Перем СписокОшибок;
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.ЖурналДокументовВнутреннегоТовародвижения.Форма.СписокДокументовКОформлению.Команда.ОформитьПоОтгрузкеПриемке");
	
	ВыделенныеСтроки = Элементы.СписокРаспоряженияНаОформление.ВыделенныеСтроки;
	Если Не ОбщегоНазначенияУТКлиент.ВыбраныДокументыКОформлению(
		ВыделенныеСтроки, ПараметрыЖурнала()) Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ГруппировкиРаспоряжений = НакладныеКлиент.ДанныеДляОформленияПоОрдерам(СписокРаспоряженияНаОформление,
		ВыделенныеСтроки, "ХозяйственнаяОперация,Склад,Отправитель,Получатель",
		СписокОшибок, "Объект.СписокРаспоряженияНаОформление", ХозяйственныеОперацииИДокументы);
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(СписокОшибок);
	
	Если ЗначениеЗаполнено(ГруппировкиРаспоряжений) Тогда
		
		ПараметрыПроцедуры = Новый Структура();
		ПараметрыПроцедуры.Вставить("ГруппировкиРаспоряжений", ГруппировкиРаспоряжений);
		ПараметрыПроцедуры.Вставить("ПараметрыФормыСозданныхДокументов", ПараметрыФормыСозданныхДокументов());
		ПараметрыПроцедуры.Вставить("ПолеОшибки", "Объект.СписокРаспоряженияНаОформление");

		НаименованиеЗадания = НСтр("ru = 'Журнал внутренних документов: Оформление по отгрузке/приемке'");
		
		ДлительнаяОперация = ВыполнитьДействияВФоне(
			ДействиеОформитьНакладныеПоОрдерам(),
			ПараметрыПроцедуры,
			НаименованиеЗадания);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация,
			Новый ОписаниеОповещения("ВыполнитьДействияВФонеЗавершение", ЭтотОбъект), ПараметрыОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьАктОРасхождениях(Команда)
	
	Перем СписокОшибок;
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.ЖурналДокументовВнутреннегоТовародвижения.Форма.СписокДокументовКОформлению.Команда.ОформитьАктОРасхождениях");
	
	ВыделенныеСтроки = Элементы.СписокРаспоряженияНаОформление.ВыделенныеСтроки;
	Если Не ОбщегоНазначенияУТКлиент.ВыбраныДокументыКОформлению(
		ВыделенныеСтроки, ПараметрыЖурнала()) Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	Заказы = Новый Массив;
	Накладные = Новый Массив;
	Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		
		Строка = СписокРаспоряженияНаОформление.НайтиПоИдентификатору(ИдентификаторСтроки);
		ТекстОшибки = "";
		
		Если ТипЗнч(Строка.Ссылка) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
			Если Строка.СостояниеНакладной = 1 Тогда
				ТекстОшибки = НСтр("ru = 'Для распоряжения %1 невозможно оформить акт о расхождениях, т.к. нет ни одной накладной.'");
				ТекстОшибки = СтрШаблон(ТекстОшибки, Строка.Ссылка);
			Иначе
				Заказы.Добавить(Строка.Ссылка);
			КонецЕсли;
		ИначеЕсли ТипЗнч(Строка.Ссылка) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
			Накладные.Добавить(Строка.Ссылка);
		Иначе
			ТекстОшибки = НСтр("ru = 'Для распоряжения %1 невозможно оформить акт о расхождениях, т.к. оно не является перемещением товаров.'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, Строка.Ссылка);
		КонецЕсли;
		
		Если Не ПустаяСтрока(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление", ТекстОшибки, Неопределено);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Накладные) Или ЗначениеЗаполнено(Заказы) Тогда
	
		ПараметрыПроцедуры = Новый Структура();
		ПараметрыПроцедуры.Вставить("Накладные", Накладные);
		ПараметрыПроцедуры.Вставить("Заказы",    Заказы);
		ПараметрыПроцедуры.Вставить("ПараметрыФормыСозданныхДокументов", ПараметрыФормыСозданныхДокументов(Истина));
		ПараметрыПроцедуры.Вставить("ПолеОшибки", "Объект.СписокРаспоряженияНаОформление");

		НаименованиеЗадания = НСтр("ru = 'Журнал внутренних документов: Оформление актов о расхождениях'");
		
		ДлительнаяОперация = ВыполнитьДействияВФоне(
			ДействиеОформитьАктыОРасхождениях(),
			ПараметрыПроцедуры,
			НаименованиеЗадания);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация,
			Новый ОписаниеОповещения("ВыполнитьДействияВФонеЗавершение", ЭтотОбъект), ПараметрыОжидания);
		
	ИначеЕсли Элементы.СписокРаспоряженияНаОформление.ВыделенныеСтроки.Количество() > 1 Тогда
		
		ТекстОшибки = НСтр("ru = 'Не выбрано ни одного документа, для которого можно было бы оформить акт о расхождениях.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление", ТекстОшибки, Неопределено);
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(СписокОшибок);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.ЖурналДокументовВнутреннегоТовародвижения.Форма.СписокДокументовКОформлению.Команда.Обновить");
	
	ОбновитьСписокРаспоряженияНаОформлениеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеВыполнения(Команда)
	
	Если Элементы.СписокРаспоряженияНаОформление.ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выделено ни одной строки. Выполнение команды невозможно.'"));
	Иначе
		СписокДокументов = Новый СписокЗначений;
		Для каждого Идентификатор Из Элементы.СписокРаспоряженияНаОформление.ВыделенныеСтроки Цикл
			СтрокаТаблицы = СписокРаспоряженияНаОформление.НайтиПоИдентификатору(Идентификатор);
			Если ТипЗнч(СтрокаТаблицы.Ссылка) = Тип("ДокументСсылка.ЗаказНаВнутреннееПотребление")
				ИЛИ ТипЗнч(СтрокаТаблицы.Ссылка) = Тип("ДокументСсылка.ВнутреннееПотребление")

				ИЛИ ТипЗнч(СтрокаТаблицы.Ссылка) = Тип("ДокументСсылка.ЗаказНаПеремещение")
				ИЛИ ТипЗнч(СтрокаТаблицы.Ссылка) = Тип("ДокументСсылка.ПеремещениеТоваров")
				ИЛИ ТипЗнч(СтрокаТаблицы.Ссылка) = Тип("ДокументСсылка.ЗаказНаСборку")
				ИЛИ ТипЗнч(СтрокаТаблицы.Ссылка) = Тип("ДокументСсылка.СборкаТоваров") Тогда
				СписокДокументов.Добавить(СтрокаТаблицы.Ссылка);
			КонецЕсли;
		КонецЦикла;
		
		Если СписокДокументов.Количество() = 0 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Для выбранных документов отчет не поддерживается. Выполнение команды невозможно.'"));
			Возврат;
		КонецЕсли;
		
		ОткрытьФорму("Отчет.СостояниеВыполненияДокументов.Форма.ФормаОтчета",
			Новый Структура("ВходящиеДокументы", СписокДокументов));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВыполнениеКомандВФоне

&НаКлиенте
Процедура ВыполнитьДействияВФонеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ПоказатьПредупреждение(, Результат.КраткоеПредставлениеОшибки);
	Иначе
		РезультатВыполненияВФоне = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		ПараметрыСозданныхДокументов = РезультатВыполненияВФоне.ПараметрыСозданныхДокументов;
		НакладныеКлиент.ОткрытьФормуСозданныхДокументов(ПараметрыСозданныхДокументов, ЭтотОбъект);
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(РезультатВыполненияВФоне.СписокОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьДействияВФоне(Действие, ПараметрыПроцедуры, НаименованиеЗадания)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	
	Если Действие = ДействиеОформитьНакладныеПоОрдерам() Тогда
		
		Возврат ДлительныеОперации.ВыполнитьВФоне(
			"НакладныеСервер.ОформитьНакладныеПоОрдерамВФоне",
			ПараметрыПроцедуры,
			ПараметрыВыполнения);
		
	ИначеЕсли Действие = ДействиеОформитьНакладныеПоЗаказам() Тогда
	
		Возврат ДлительныеОперации.ВыполнитьВФоне(
			"НакладныеСервер.ОформитьНакладныеПоЗаказамВФоне",
			ПараметрыПроцедуры,
			ПараметрыВыполнения);
			
	ИначеЕсли Действие = ДействиеОформитьАктыОРасхождениях() Тогда
	
		Возврат ДлительныеОперации.ВыполнитьВФоне(
			"НакладныеСервер.ОформитьАктыОРасхожденияхВФоне",
			ПараметрыПроцедуры,
			ПараметрыВыполнения);
			
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДействиеОформитьНакладныеПоОрдерам()
	
	Возврат "ДействиеОформитьНакладныеПоОрдерам";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДействиеОформитьНакладныеПоЗаказам()
	
	Возврат "ДействиеОформитьНакладныеПоЗаказам";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДействиеОформитьАктыОРасхождениях()
	
	Возврат "ДействиеОформитьАктыОРасхождениях";
	
КонецФункции

#КонецОбласти

#Область НастройкаФормы

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "СписокРаспоряженияНаОформление.Дата", "СписокРаспоряженияНаОформлениеДата");
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоПравамИФункциональнымОпциям()
	
	Элементы.СписокРаспоряженияНаОформлениеСостояниеВыполнения.Видимость = ПравоДоступа("Просмотр", Метаданные.Отчеты.СостояниеВыполненияДокументов);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОрдернуюСхемуПриОтгрузке")
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ТоварыКОтгрузке) Тогда
		Элементы.СостояниеОрдераНаОтгрузку.Видимость = Ложь;
		Элементы.СписокРаспоряженияНаОформлениеСостояниеРасходногоОрдера.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОрдернуюСхемуПриПоступлении")
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ТоварыКПоступлению) Тогда
		Элементы.СостояниеОрдераНаПриемку.Видимость = Ложь;
		Элементы.СписокРаспоряженияНаОформлениеСостояниеПриходногоОрдера.Видимость = Ложь;
	КонецЕсли;
	
	Если Элементы.СостояниеОрдераНаОтгрузку.Видимость ИЛИ Элементы.СостояниеОрдераНаПриемку.Видимость Тогда
		НакладныеСервер.ЗаполнитьСостоянияНакладной(Элементы.СостояниеНакладной.СписокВыбора);
		НакладныеСервер.ЗаполнитьСостоянияОрдера(Элементы.СостояниеОрдераНаОтгрузку.СписокВыбора);
		НакладныеСервер.ЗаполнитьСостоянияОрдера(Элементы.СостояниеОрдераНаПриемку.СписокВыбора);
		
		ДоступностьАктовОРасхождениях = ПолучитьФункциональнуюОпцию("ИспользоватьАктыРасхожденийПослеПеремещения")
			И ПравоДоступа("Добавление", Метаданные.Документы.АктОРасхожденияхПослеПеремещения);
	Иначе
		НакладныеСервер.ЗаполнитьСостоянияНакладной(Элементы.СостояниеНакладной.СписокВыбора, Истина);
		
		Элементы.СписокРаспоряженияНаОформлениеОформитьПоОтгрузкеПриемке.Видимость = Ложь;
		ДоступностьАктовОРасхождениях = Ложь;
		
		Элементы.СписокРаспоряженияНаОформлениеОформитьПоЗаказам.Заголовок = НСтр("ru = 'Оформить'");
		Элементы.Переместить(Элементы.ГруппаКомандыДокументов, Элементы.ГруппаСостоянияДокументов);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Распоряжения) Тогда
		Элементы.ГруппаОтборы.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	ЕстьПраваНаСоздание = ХозяйственныеОперацииИДокументы.НайтиСтроки(Новый Структура("Отбор, ПравоДоступаДобавление", Истина, Истина)).Количество() > 0;
	
	Элементы.СписокРаспоряженияНаОформлениеОформитьПоЗаказам.Доступность = ЕстьПраваНаСоздание;
	Элементы.СписокРаспоряженияНаОформлениеОформитьПоОтгрузкеПриемке.Доступность = ЕстьПраваНаСоздание;
	
	Элементы.СписокРаспоряженияНаОформлениеОформитьАктОРасхождениях.Видимость = ДоступностьАктовОРасхождениях
		И ХозяйственныеОперацииИДокументы.НайтиСтроки(Новый Структура("Отбор, ТипДокумента", Истина, Тип("ДокументСсылка.ПеремещениеТоваров"))).Количество() > 0;
	
КонецПроцедуры

#КонецОбласти

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Функция СсылкаНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	ШтрихкодированиеПечатныхФормВызовСервера.СсылкаНаЭлементСпискаПоШтрихкоду(
		Штрихкод, ХозяйственныеОперацииИДокументы.Выгрузить());
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	МассивСсылок = СсылкаНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		
		Ссылка = МассивСсылок[0];
		
		Найдено = СписокРаспоряженияНаОформление.НайтиСтроки(Новый Структура("Ссылка", Ссылка));
		Если ЗначениеЗаполнено(Найдено) Тогда
			Элементы.СписокРаспоряженияНаОформление.ТекущаяСтрока = Найдено[0].ПолучитьИдентификатор();
		КонецЕсли;
		ПоказатьЗначение(Неопределено, Ссылка);
		
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ОтборОперацияТипОбработкаВыбораСервер(АдресХозяйственныхОперацийИДокументов)
	
	ТЗХозОперацииИТипыДокументов = ПолучитьИзВременногоХранилища(АдресХозяйственныхОперацийИДокументов);
	ХозяйственныеОперацииИДокументы.Загрузить(ТЗХозОперацииИТипыДокументов);
	ОбщегоНазначенияУТ.ЗаполнитьОтборыПоТаблицеХозОперацийИТиповДокументов(ТЗХозОперацииИТипыДокументов, ОтборХозяйственныеОперации, ОтборТипыДокументов);
	
	НастроитьФормуПоВыбраннымОперациямИДокументам(ТЗХозОперацииИТипыДокументов);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КлючНазначенияФормыПоУмолчанию()
	
	Возврат "ВнутреннееТовародвижение";
	
КонецФункции

&НаСервере
Функция ПоместитьВоВременноеХранилищеХозяйственныеОперацииИДокументы()
	Возврат ПоместитьВоВременноеХранилище(ХозяйственныеОперацииИДокументы.Выгрузить(), УникальныйИдентификатор);
КонецФункции

&НаКлиенте
Функция ПараметрыЖурнала()
	
	СтруктураБыстрогоОтбора = Новый Структура;
	СтруктураБыстрогоОтбора.Вставить("Организация",	Организация);
	СтруктураБыстрогоОтбора.Вставить("Склад",		Склад);
	СтруктураБыстрогоОтбора.Вставить("Менеджер",	Менеджер);
	СтруктураБыстрогоОтбора.Вставить("ОтборТипыДокументов",			ОтборТипыДокументов);
	СтруктураБыстрогоОтбора.Вставить("ОтборХозяйственныеОперации",	ОтборХозяйственныеОперации);
	
	ПараметрыЖурнала = Новый Структура;
	ПараметрыЖурнала.Вставить("СтруктураБыстрогоОтбора",	СтруктураБыстрогоОтбора);
	ПараметрыЖурнала.Вставить("ИмяРабочегоМеста",			"ЖурналДокументовВнутреннегоТовародвижения");
	ПараметрыЖурнала.Вставить("КлючНазначенияФормы",		КлючНазначенияИспользования);
	ПараметрыЖурнала.Вставить("СинонимЖурнала",				НСтр("ru = 'Внутренние документы'"));
	
	Возврат ПараметрыЖурнала;
	
КонецФункции

Процедура НастроитьФормуПоВыбраннымОперациямИДокументам(ТЗХозОперацииИТипыДокументов)
	
	ЗаголовокПоУмолчанию = НСтр("ru = 'Внутренние документы (к оформлению)'");
	ДанныеРабочегоМеста = ОбщегоНазначенияУТ.ДанныеРабочегоМеста(ТЗХозОперацииИТипыДокументов,
		КлючНазначенияФормыПоУмолчанию(), ЗаголовокПоУмолчанию);
	
	Заголовок = ДанныеРабочегоМеста.ЗаголовокРабочегоМеста;
	Если Заголовок <> ЗаголовокПоУмолчанию Тогда
		Заголовок = Заголовок + " " + НСтр("ru = '(к оформлению)'");
	КонецЕсли;
	
	СформироватьТекстыЗапросов();
	ОбновитьСписокРаспоряженияНаОформлениеНаСервере();
	
	УстановитьВидимостьДоступность();
	
	ОбщегоНазначенияУТ.СформироватьНадписьОтбор(Элементы.ИнформационнаяНадписьОтбор.Заголовок,
		ХозяйственныеОперацииИДокументы, ОтборТипыДокументов, ОтборХозяйственныеОперации);
	
КонецПроцедуры

#Область СохраняемыеНастройкиФормы

&НаСервере
Процедура ВосстановитьНастройки(Параметры)
	
	Если Параметры.Свойство("СтруктураБыстрогоОтбора") Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма, НастройкиФормы(Параметры.СтруктураБыстрогоОтбора));
		
		ИспользоватьЗагрузкуНастроек = Параметры.ИспользоватьЗагрузкуСохраненныхНастроек;
		ИсключитьСвойства            = "Организация, Склад, Менеджер";
	Иначе
		ИспользоватьЗагрузкуНастроек = Истина;
		ИсключитьСвойства            = "";
	КонецЕсли;
	
	Если ИспользоватьЗагрузкуНастроек Тогда
		НастройкиИзХранилища = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Обработка.ЖурналДокументовВнутреннегоТовародвижения.Форма.СписокДокументовКОформлению", КлючНазначенияИспользования);
	
		Если ТипЗнч(НастройкиИзХранилища) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(ЭтаФорма, НастройкиФормы(НастройкиИзХранилища),, ИсключитьСвойства);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Обработка.ЖурналДокументовВнутреннегоТовародвижения.Форма.СписокДокументовКОформлению",
		КлючНазначенияИспользования, НастройкиФормы(ЭтаФорма));
	
КонецПроцедуры

&НаСервере
Функция НастройкиФормы(ИсточникНастроек)
	
	ИменаСохраняемыхРеквизитов =
		"Организация,
		|Склад,
		|Менеджер,
		|СостояниеНакладной,
		|СостояниеОрдераНаОтгрузку,
		|СостояниеОрдераНаПриемку,
		|ОтборХозяйственныеОперации,
		|ОтборТипыДокументов";
	
	Настройки = Новый Структура(ИменаСохраняемыхРеквизитов);
	ЗаполнитьЗначенияСвойств(Настройки, ИсточникНастроек);
	
	Возврат Настройки;
	
КонецФункции

#КонецОбласти

&НаСервере
Процедура ОбновитьСписокРаспоряженияНаОформлениеНаСервере()
	
	Если Элементы.СписокРаспоряженияНаОформление.ТекущаяСтрока <> Неопределено Тогда
		ТекущийДокумент = СписокРаспоряженияНаОформление.НайтиПоИдентификатору(Элементы.СписокРаспоряженияНаОформление.ТекущаяСтрока).Ссылка;
	Иначе
		ТекущийДокумент = Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапросаРасчетаСостояний);
	ПараметрыОтбора = НакладныеСервер.ПараметрыОтбораРаспоряжений(Организация,, Склад, ОтборХозяйственныеОперации, Менеджер);
	НакладныеСервер.ДобавитьПараметрыОтбораПоРееструДокументов(Запрос, ПараметрыОтбора);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТипыЗаказов = Новый Массив;
	ТипыЗаказов.Добавить(Тип("ДокументСсылка.ЗаказНаВнутреннееПотребление"));
	ТипыЗаказов.Добавить(Тип("ДокументСсылка.ЗаказНаПеремещение"));
	ТипыЗаказов.Добавить(Тип("ДокументСсылка.ЗаказНаСборку"));

	
	Запрос.УстановитьПараметр("НачалоТекущегоДня", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Организация",       СписокОрганизаций.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("Склад",             Склад);
	Запрос.УстановитьПараметр("Менеджер",          Менеджер);
	Запрос.УстановитьПараметр("ХозОперация",       ОтборХозяйственныеОперации.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("ТипыЗаказов",       ТипыЗаказов);
	Запрос.УстановитьПараметр("Распоряжения",      Распоряжения.ВыгрузитьЗначения());
	
	Запрос.Выполнить();
	
	Запрос.Текст = ТекстЗапросаСпискаРаспоряжений;
	Запрос.УстановитьПараметр("ОтбиратьПоРаспоряжениям", ЗначениеЗаполнено(Распоряжения));
	Запрос.УстановитьПараметр("АктыОРасхожденияхДоступны", ДоступностьАктовОРасхождениях);
	
	Запрос.Текст = ТекстЗапросаСпискаРаспоряжений;
	
	УстановитьПривилегированныйРежим(Истина);
	СписокРаспоряженияНаОформление.Загрузить(Запрос.Выполнить().Выгрузить());
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ТекущийДокумент <> Неопределено Тогда
		Найдено = СписокРаспоряженияНаОформление.НайтиСтроки(Новый Структура("Ссылка", ТекущийДокумент));
		Если ЗначениеЗаполнено(Найдено) Тогда
			Элементы.СписокРаспоряженияНаОформление.ТекущаяСтрока = Найдено[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	УстановитьОтборПоОрганизации();
	
	СформироватьТекстыЗапросов();
	ОбновитьСписокРаспоряженияНаОформлениеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоОрганизации()

	СписокОрганизаций.Очистить();
	Если ЗначениеЗаполнено(Организация) Тогда
		СписокОрганизаций.ЗагрузитьЗначения(Справочники.Организации.ФилиалыСРасчетамиЧерезГоловнуюОрганизацию(Организация));
		СписокОрганизаций.Добавить(Организация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииНаСервере()
	
	СформироватьТекстыЗапросов();
	ОбновитьСписокРаспоряженияНаОформлениеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура МенеджерПриИзмененииНаСервере()
	
	СформироватьТекстыЗапросов();
	ОбновитьСписокРаспоряженияНаОформлениеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьТекстыЗапросов()
	
	ПараметрыОтбора = НакладныеСервер.ПараметрыОтбораРаспоряжений(Организация,, Склад, ОтборХозяйственныеОперации, Менеджер);
	
	Пакет = Новый Массив;
	Выборка = Новый Массив;
	Состояния = НакладныеСервер.СостоянияПоХозоперациям(ОтборХозяйственныеОперации.ВыгрузитьЗначения());
	Для каждого КЗ Из Состояния Цикл
		Пакет.Добавить(НакладныеСервер.ТекстЗапросаСостояний(КЗ.Ключ, ПараметрыОтбора, КЗ.Значение));
		
		Если КЗ.Ключ = "СостоянияРасходныхОрдеров" Тогда
			Выборка.Добавить(
			"ВЫБРАТЬ
			|	СостоянияРасходныхОрдеров.Распоряжение КАК Распоряжение,
			|	СостоянияРасходныхОрдеров.Склад КАК Склад,
			|	СостоянияРасходныхОрдеров.Склад КАК Отправитель,
			|	ВЫБОР
			|		КОГДА ТИПЗНАЧЕНИЯ(СостоянияРасходныхОрдеров.Распоряжение) = ТИП(Документ.ЗаказНаВнутреннееПотребление)
			|			ТОГДА НЕОПРЕДЕЛЕНО
			|		ИНАЧЕ СостоянияРасходныхОрдеров.Получатель
			|	КОНЕЦ КАК Получатель,
			|	ВЫБОР
			|		КОГДА ИСТИНА
			|			ТОГДА NULL
			|	КОНЕЦ КАК ХозОперация,
			|	ВЫБОР
			|		КОГДА ТИПЗНАЧЕНИЯ(СостоянияРасходныхОрдеров.Распоряжение) В (&ТипыЗаказов)
			|			ТОГДА 0
			|		ИНАЧЕ 4
			|	КОНЕЦ КАК СостояниеНакладной,
			|	СостоянияРасходныхОрдеров.Состояние КАК СостояниеРасходногоОрдера,
			|	ВЫБОР
			|		КОГДА СпрСкладыПолучатель.Ссылка ЕСТЬ NULL
			|				ИЛИ ВЫБОР
			|					КОГДА ТИПЗНАЧЕНИЯ(СостоянияРасходныхОрдеров.Распоряжение) = ТИП(Документ.ЗаказНаПеремещение)
			|						ТОГДА ВЫРАЗИТЬ(СостоянияРасходныхОрдеров.Распоряжение КАК Документ.ЗаказНаПеремещение).ВариантПриемкиТоваров
			|					КОГДА ТИПЗНАЧЕНИЯ(СостоянияРасходныхОрдеров.Распоряжение) = ТИП(Документ.ЗаказНаСборку)
			|						ТОГДА ВЫРАЗИТЬ(СостоянияРасходныхОрдеров.Распоряжение КАК Документ.ЗаказНаСборку).ВариантПриемкиТоваров
			|				КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным)
			|			ТОГДА 4
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК СостояниеПриходногоОрдера,
			|	ИСТИНА КАК НакладнаяНаОтгрузку,
			|	ЛОЖЬ КАК НакладнаяНаПриемку
			|ИЗ
			|	ВТСостоянияРасходныхОрдеров КАК СостоянияРасходныхОрдеров
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСкладыПолучатель
			|		ПО (СпрСкладыПолучатель.Ссылка = СостоянияРасходныхОрдеров.Получатель)
			|			И (СпрСкладыПолучатель.ИспользоватьОрдернуюСхемуПриПоступлении)
			|			И (СпрСкладыПолучатель.ДатаНачалаОрдернойСхемыПриПоступлении <= &НачалоТекущегоДня)");
		ИначеЕсли КЗ.Ключ = "СостоянияПриходныхОрдеров" Тогда
			Выборка.Добавить(
			"ВЫБРАТЬ
			|	СостоянияПриходныхОрдеров.Распоряжение КАК Распоряжение,
			|	СостоянияПриходныхОрдеров.Склад КАК Склад,
			|	ВЫБОР
			|		КОГДА ТИПЗНАЧЕНИЯ(СостоянияПриходныхОрдеров.Распоряжение) = ТИП(Документ.ПрочееОприходованиеТоваров)
			|			ТОГДА НЕОПРЕДЕЛЕНО
			|		ИНАЧЕ СостоянияПриходныхОрдеров.Отправитель
			|	КОНЕЦ КАК Отправитель,
			|	СостоянияПриходныхОрдеров.Склад КАК Получатель,
			|	ВЫБОР
			|		КОГДА ИСТИНА
			|			ТОГДА NULL
			|	КОНЕЦ КАК ХозОперация,
			|	ВЫБОР
			|		КОГДА ТИПЗНАЧЕНИЯ(СостоянияПриходныхОрдеров.Распоряжение) В (&ТипыЗаказов)
			|			ТОГДА 0
			|		ИНАЧЕ 4
			|	КОНЕЦ КАК СостояниеНакладной,
			|	ВЫБОР
			|		КОГДА СпрСкладыОтправитель.Ссылка ЕСТЬ NULL
			|				ИЛИ ВЫБОР
			|					КОГДА ТИПЗНАЧЕНИЯ(СостоянияПриходныхОрдеров.Распоряжение) = ТИП(Документ.СборкаТоваров)
			|						ТОГДА ВЫБОР
			|								КОГДА ВЫРАЗИТЬ(СостоянияПриходныхОрдеров.Распоряжение КАК Документ.СборкаТоваров).ЗаказНаСборку = ЗНАЧЕНИЕ(Документ.ЗаказНаСборку.ПустаяСсылка)
			|									ТОГДА НЕОПРЕДЕЛЕНО
			|								ИНАЧЕ ВЫРАЗИТЬ(СостоянияПриходныхОрдеров.Распоряжение КАК Документ.СборкаТоваров).ВариантПриемкиТоваров
			|							КОНЕЦ
			|				КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным)
			|			ТОГДА 4
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК СостояниеРасходногоОрдера,
			|	СостоянияПриходныхОрдеров.Состояние КАК СостояниеПриходногоОрдера,
			|	ЛОЖЬ КАК НакладнаяНаОтгрузку,
			|	ИСТИНА КАК НакладнаяНаПриемку
			|ИЗ
			|	ВтСостоянияПриходныхОрдеров КАК СостоянияПриходныхОрдеров
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСкладыОтправитель
			|		ПО (СпрСкладыОтправитель.Ссылка = СостоянияПриходныхОрдеров.Отправитель)
			|			И (СпрСкладыОтправитель.ИспользоватьОрдернуюСхемуПриОтгрузке)
			|			И (СпрСкладыОтправитель.ДатаНачалаОрдернойСхемыПриОтгрузке <= &НачалоТекущегоДня)
			|ГДЕ
			|	ТИПЗНАЧЕНИЯ(СостоянияПриходныхОрдеров.Распоряжение) <> ТИП(Документ.ЗаказНаПеремещение)
			|	И ТИПЗНАЧЕНИЯ(СостоянияПриходныхОрдеров.Распоряжение) <> ТИП(Документ.ПеремещениеТоваров)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	СостоянияПриходныхОрдеров.Распоряжение,
			|	СостоянияПриходныхОрдеров.Отправитель,
			|	СостоянияПриходныхОрдеров.Отправитель,
			|	СостоянияПриходныхОрдеров.Склад,
			|	NULL,
			|	ВЫБОР
			|		КОГДА ТИПЗНАЧЕНИЯ(СостоянияПриходныхОрдеров.Распоряжение) В (&ТипыЗаказов)
			|			ТОГДА 0
			|		ИНАЧЕ 4
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА СпрСкладыОтправитель.Ссылка ЕСТЬ NULL
			|				ИЛИ ВЫБОР
			|					КОГДА ТИПЗНАЧЕНИЯ(СостоянияПриходныхОрдеров.Распоряжение) = ТИП(Документ.ПеремещениеТоваров)
			|						ТОГДА ВЫБОР
			|								КОГДА НЕ ВЫРАЗИТЬ(СостоянияПриходныхОрдеров.Распоряжение КАК Документ.ПеремещениеТоваров).ПеремещениеПоЗаказам
			|									ТОГДА НЕОПРЕДЕЛЕНО
			|								ИНАЧЕ ВЫРАЗИТЬ(СостоянияПриходныхОрдеров.Распоряжение КАК Документ.ПеремещениеТоваров).ВариантПриемкиТоваров
			|							КОНЕЦ
			|				КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным)
			|			ТОГДА 4
			|		ИНАЧЕ 0
			|	КОНЕЦ,
			|	СостоянияПриходныхОрдеров.Состояние,
			|	ИСТИНА,
			|	ЛОЖЬ
			|ИЗ
			|	ВтСостоянияПриходныхОрдеров КАК СостоянияПриходныхОрдеров
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСкладыОтправитель
			|		ПО (СпрСкладыОтправитель.Ссылка = СостоянияПриходныхОрдеров.Отправитель)
			|			И (СпрСкладыОтправитель.ИспользоватьОрдернуюСхемуПриОтгрузке)
			|			И (СпрСкладыОтправитель.ДатаНачалаОрдернойСхемыПриОтгрузке <= &НачалоТекущегоДня)
			|ГДЕ
			|	ТИПЗНАЧЕНИЯ(СостоянияПриходныхОрдеров.Распоряжение) = ТИП(Документ.ЗаказНаПеремещение)
			|		ИЛИ ТИПЗНАЧЕНИЯ(СостоянияПриходныхОрдеров.Распоряжение) = ТИП(Документ.ПеремещениеТоваров)
			|");
		ИначеЕсли КЗ.Ключ = "СостоянияПеремещений" Тогда
			Выборка.Добавить(
			"ВЫБРАТЬ
			|	СостоянияПеремещений.Распоряжение КАК Распоряжение,
			|	ДокЗаказНаПеремещение.СкладОтправитель КАК Склад,
			|	ДокЗаказНаПеремещение.СкладОтправитель КАК Отправитель,
			|	ДокЗаказНаПеремещение.СкладПолучатель КАК Получатель,
			|	NULL КАК ХозОперация,
			|	СостоянияПеремещений.Состояние КАК СостояниеНакладной,
			|	ВЫБОР
			|		КОГДА СпрСкладыОтправитель.Ссылка ЕСТЬ NULL
			|			ТОГДА 4
			|		КОГДА СостоянияПеремещений.Состояние = 1
			|			ТОГДА 1
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК СостояниеРасходногоОрдера,
			|	ВЫБОР
			|		КОГДА СпрСкладыПолучатель.Ссылка ЕСТЬ NULL
			|				ИЛИ ДокЗаказНаПеремещение.ВариантПриемкиТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным)
			|			ТОГДА 4
			|		КОГДА СостоянияПеремещений.Состояние = 1
			|			ТОГДА 1
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК СостояниеПриходногоОрдера,
			|	ИСТИНА КАК НакладнаяНаОтгрузку,
			|	ЛОЖЬ КАК НакладнаяНаПриемку
			|ИЗ
			|	ВтСостоянияПеремещений КАК СостоянияПеремещений
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПеремещение КАК ДокЗаказНаПеремещение
			|		ПО СостоянияПеремещений.Распоряжение = ДокЗаказНаПеремещение.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСкладыОтправитель
			|		ПО (СпрСкладыОтправитель.Ссылка = ДокЗаказНаПеремещение.СкладОтправитель)
			|			И (СпрСкладыОтправитель.ИспользоватьОрдернуюСхемуПриОтгрузке)
			|			И (СпрСкладыОтправитель.ДатаНачалаОрдернойСхемыПриОтгрузке <= &НачалоТекущегоДня)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСкладыПолучатель
			|		ПО (СпрСкладыПолучатель.Ссылка = ДокЗаказНаПеремещение.СкладПолучатель)
			|			И (СпрСкладыПолучатель.ИспользоватьОрдернуюСхемуПриПоступлении)
			|			И (СпрСкладыПолучатель.ДатаНачалаОрдернойСхемыПриПоступлении <= &НачалоТекущегоДня)");
		ИначеЕсли КЗ.Ключ = "СостоянияСборок" Тогда
			Выборка.Добавить(
			"ВЫБРАТЬ
			|	СостоянияСборок.Распоряжение КАК Распоряжение,
			|	ДокЗаказНаСборку.Склад КАК Склад,
			|	ДокЗаказНаСборку.Склад КАК Отправитель,
			|	ДокЗаказНаСборку.Склад КАК Получатель,
			|	NULL КАК ХозОперация,
			|	СостоянияСборок.Состояние КАК СостояниеНакладной,
			|	ВЫБОР
			|		КОГДА СпрСкладыОтправитель.Ссылка ЕСТЬ NULL
			|			ТОГДА 4
			|		КОГДА СостоянияСборок.Состояние = 1
			|			ТОГДА 1
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК СостояниеРасходногоОрдера,
			|	ВЫБОР
			|		КОГДА СпрСкладыПолучатель.Ссылка ЕСТЬ NULL
			|				ИЛИ ДокЗаказНаСборку.ВариантПриемкиТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным)
			|			ТОГДА 4
			|		КОГДА СостоянияСборок.Состояние = 1
			|			ТОГДА 1
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК СостояниеПриходногоОрдера,
			|	ИСТИНА КАК НакладнаяНаОтгрузку,
			|	ИСТИНА КАК НакладнаяНаПриемку
			|ИЗ
			|	ВтСостоянияСборок КАК СостоянияСборок
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаСборку КАК ДокЗаказНаСборку
			|		ПО СостоянияСборок.Распоряжение = ДокЗаказНаСборку.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСкладыОтправитель
			|		ПО (СпрСкладыОтправитель.Ссылка = ДокЗаказНаСборку.Склад)
			|			И (СпрСкладыОтправитель.ИспользоватьОрдернуюСхемуПриОтгрузке)
			|			И (СпрСкладыОтправитель.ДатаНачалаОрдернойСхемыПриОтгрузке <= &НачалоТекущегоДня)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСкладыПолучатель
			|		ПО (СпрСкладыПолучатель.Ссылка = ДокЗаказНаСборку.Склад)
			|			И (СпрСкладыПолучатель.ИспользоватьОрдернуюСхемуПриПоступлении)
			|			И (СпрСкладыПолучатель.ДатаНачалаОрдернойСхемыПриПоступлении <= &НачалоТекущегоДня)");
		ИначеЕсли КЗ.Ключ = "СостоянияВнутреннихПотреблений" Тогда
			Выборка.Добавить(
			"ВЫБРАТЬ
			|	СостоянияВнутреннихПотреблений.Распоряжение КАК Распоряжение,
			|	СостоянияВнутреннихПотреблений.Склад КАК Склад,
			|	СостоянияВнутреннихПотреблений.Склад КАК Отправитель,
			|	НЕОПРЕДЕЛЕНО КАК Получатель,
			|	ВЫБОР
			|		КОГДА ИСТИНА
			|			ТОГДА NULL
			|	КОНЕЦ КАК ХозОперация,
			|	СостоянияВнутреннихПотреблений.Состояние КАК СостояниеНакладной,
			|	ВЫБОР
			|		КОГДА СпрСкладыОтправитель.Ссылка ЕСТЬ NULL
			|			ТОГДА 4
			|		КОГДА СостоянияВнутреннихПотреблений.Состояние = 1
			|			ТОГДА 1
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК СостояниеРасходногоОрдера,
			|	4 КАК СостояниеПриходногоОрдера,
			|	ИСТИНА КАК НакладнаяНаОтгрузку,
			|	ЛОЖЬ КАК НакладнаяНаПриемку
			|ИЗ
			|	ВтСостоянияВнутреннихПотреблений КАК СостоянияВнутреннихПотреблений
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСкладыОтправитель
			|		ПО (СпрСкладыОтправитель.Ссылка = СостоянияВнутреннихПотреблений.Склад)
			|			И (СпрСкладыОтправитель.ИспользоватьОрдернуюСхемуПриОтгрузке)
			|			И (СпрСкладыОтправитель.ДатаНачалаОрдернойСхемыПриОтгрузке <= &НачалоТекущегоДня)");

		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапросаРасчетаСостояний = СтрСоединить(Пакет, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	ТекстЗапросаСпискаРаспоряжений =
		СтрЗаменить(
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Распоряжение КАК Ссылка,
		|	ВложенныйЗапрос.Склад КАК Склад,
		|	ВложенныйЗапрос.Отправитель КАК Отправитель,
		|	ВложенныйЗапрос.Получатель КАК Получатель,
		|	ВложенныйЗапрос.ХозОперация КАК ХозОперация,
		|	МАКСИМУМ(ВложенныйЗапрос.СостояниеНакладной) КАК СостояниеНакладной,
		|	МАКСИМУМ(ВложенныйЗапрос.СостояниеРасходногоОрдера) КАК СостояниеОрдераНаОтгрузку,
		|	МАКСИМУМ(ВложенныйЗапрос.СостояниеПриходногоОрдера) КАК СостояниеОрдераНаПриемку,
		|	МАКСИМУМ(ВложенныйЗапрос.НакладнаяНаОтгрузку) КАК НакладнаяНаОтгрузку,
		|	МАКСИМУМ(ВложенныйЗапрос.НакладнаяНаПриемку) КАК НакладнаяНаПриемку
		|ПОМЕСТИТЬ ВтОстаткиСостояния
		|ИЗ
		|	ТекстЗапросаВложенный КАК ВложенныйЗапрос
		|ГДЕ
		|	НЕ &ОтбиратьПоРаспоряжениям Или ВложенныйЗапрос.Распоряжение В (&Распоряжения)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Распоряжение,
		|	ВложенныйЗапрос.Склад,
		|	ВложенныйЗапрос.Отправитель,
		|	ВложенныйЗапрос.Получатель,
		|	ВложенныйЗапрос.ХозОперация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РеестрДокументов.НомерДокументаИБ КАК Номер,
		|	ЕСТЬNULL(РеестрДокументов.ДатаДокументаИБ, ДАТАВРЕМЯ(1,1,1)) КАК Дата,
		|	ТИПЗНАЧЕНИЯ(РеестрДокументов.Ссылка) КАК ТипРаспоряжения,
		|	ОстаткиСостояния.СостояниеНакладной КАК СостояниеНакладной,
		|	ОстаткиСостояния.СостояниеОрдераНаОтгрузку КАК СостояниеОрдераНаОтгрузку,
		|	ОстаткиСостояния.СостояниеОрдераНаПриемку КАК СостояниеОрдераНаПриемку,
		|	ОстаткиСостояния.НакладнаяНаОтгрузку КАК НакладнаяНаОтгрузку,
		|	ОстаткиСостояния.НакладнаяНаПриемку КАК НакладнаяНаПриемку,
		|	РеестрДокументов.Организация КАК Организация,
		|	РеестрДокументов.Подразделение КАК Подразделение,
		|	ОстаткиСостояния.Склад КАК Склад,
		|	ОстаткиСостояния.Отправитель КАК Отправитель,
		|	ОстаткиСостояния.Получатель КАК Получатель,
		|	РеестрДокументов.Ответственный КАК Менеджер,
		|	ЕСТЬNULL(ОстаткиСостояния.ХозОперация, РеестрДокументов.ХозяйственнаяОперация) КАК ХозяйственнаяОперация,
		|	ОстаткиСостояния.Ссылка КАК Ссылка,
		|	РеестрДокументов.Комментарий КАК Комментарий
		|ИЗ
		|	ВтОстаткиСостояния КАК ОстаткиСостояния
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументов
		|		ПО ОстаткиСостояния.Ссылка = РеестрДокументов.Ссылка
		|			И (НЕ РеестрДокументов.ДополнительнаяЗапись)
		|ГДЕ
		|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(ОстаткиСостояния.Ссылка) В(
		|					ТИП(Документ.ЗаказНаПеремещение),
		|					ТИП(Документ.ПеремещениеТоваров)) ТОГДА
		|				НЕ &ОтбиратьПоСкладу ИЛИ ОстаткиСостояния.Склад В (&Склад)
		|				И (&АктыОРасхожденияхДоступны
		|					ИЛИ ОстаткиСостояния.СостояниеНакладной <> 0 И ОстаткиСостояния.СостояниеНакладной <> 4
		|					ИЛИ ОстаткиСостояния.СостояниеОрдераНаОтгрузку <> 0 И ОстаткиСостояния.СостояниеОрдераНаОтгрузку <> 4)
		|			ИНАЧЕ		
		|				ИСТИНА
		|			КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата", "ТекстЗапросаВложенный", "(" + СтрСоединить(Выборка, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении()) + ")");
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыФормыСозданныхДокументов(ОформляетсяАктОРасхождении = Ложь)
	
	ПараметрыФормы = Новый Структура("КлючДанных, ВидимыеКолонки, СобытияОбновления",
		КлючНазначенияИспользования, Новый Массив, Новый Массив);
	
	ПараметрыФормы.ВидимыеКолонки.Добавить("Номер");
	ПараметрыФормы.ВидимыеКолонки.Добавить("Дата");
	ПараметрыФормы.ВидимыеКолонки.Добавить("ТипЗначения");
	ПараметрыФормы.ВидимыеКолонки.Добавить("ХозяйственнаяОперация");
	ПараметрыФормы.ВидимыеКолонки.Добавить("Организация");
	ПараметрыФормы.ВидимыеКолонки.Добавить("Склад");
	ПараметрыФормы.ВидимыеКолонки.Добавить("Подразделение");
	Если ОформляетсяАктОРасхождении
		Или ХозяйственныеОперацииИДокументы.НайтиСтроки(Новый Структура("Отбор, ИспользуютсяСтатусы", Истина, Истина)).Количество() <> 0 Тогда
		ПараметрыФормы.ВидимыеКолонки.Добавить("Статус");
	КонецЕсли;
	ПараметрыФормы.ВидимыеКолонки.Добавить("Дополнительно");
	
	ПараметрыФормы.СобытияОбновления.Добавить("Запись_АктОРасхожденияхПослеПеремещения");
	ПараметрыФормы.СобытияОбновления.Добавить("Запись_ВнутреннееПотребление");
	ПараметрыФормы.СобытияОбновления.Добавить("Запись_ПеремещениеТоваров");
	ПараметрыФормы.СобытияОбновления.Добавить("Запись_СборкаТоваров");
	
	Возврат ПараметрыФормы;
	
КонецФункции

#КонецОбласти
