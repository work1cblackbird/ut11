#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Формирует данные описаний процессов для выгрузки
//
// Параметры:
//  ПараметрыФормирования  - Структура - 
//
// Возвращаемое значение:
//   Структура  - содержит:
//     * Успешно               - Булево - признак того, что отчет сформирован успешно.
//     * СообщенияОбОшибках    - Массив - сообщения об ошибках, в случае, если подготовка данных завершилась неудачей.
//     * ПодготовленныеДанные  - Структура - подготовленные данные.
//
Функция РезультатПолученияДанныхДляВыгрузки(ПараметрыФормирования) Экспорт
	
	ПодготовленныеДанные = Новый Структура;
	ПодготовленныеДанные.Вставить("ОписанияПроцессов", Неопределено);
	ПодготовленныеДанные.Вставить("Глоссарий",         Неопределено);
	
	РезультатПолученияДанных = Новый Структура;
	РезультатПолученияДанных.Вставить("Успешно",               Истина);
	РезультатПолученияДанных.Вставить("СообщенияОбОшибках",    Новый Массив);
	РезультатПолученияДанных.Вставить("ПодготовленныеДанные",  ПодготовленныеДанные);
	
	ПодготовитьДанныеОписанийДляВыгрузки(РезультатПолученияДанных, ПараметрыФормирования.НастройкиКомпоновщика, ПараметрыФормирования.ЭтоПолнаяВыгрузка);
	
	Если РезультатПолученияДанных.Успешно Тогда
		ПодготовитьДанныеГлоссарияДляВыгрузки(РезультатПолученияДанных, ПараметрыФормирования.ЭтоПолнаяВыгрузка);
	КонецЕсли;
	
	Возврат РезультатПолученияДанных;
	
КонецФункции 

// Используется фоновым заданием по получению данных описаний процессов для выгрузки.
// Параметры:
//  ПараметрыФормирования  - Структура - 
//  АдресХранилища         - Строка - адрес временного хранилища, в которое будут помещены полученные данные
//
Процедура ПолучитьДанныеВыгружаемыхОписаний(ПараметрыФормирования, АдресХранилища) Экспорт
	
	РезультатПолученияДанных = РезультатПолученияДанныхДляВыгрузки(ПараметрыФормирования);
	
	ПоместитьВоВременноеХранилище(РезультатПолученияДанных, АдресХранилища);
	
КонецПроцедуры 

// Используется фоновым заданием по получению навигационных ссылок из выгружаемых описаний для формирования скриншотов.
// Параметры:
//  ПараметрыФормирования  - Структура - 
//  АдресХранилища         - Строка - адрес временного хранилища, в которое будут помещены полученные данные
//
Процедура ПолучитьНавигационныеСсылкиИзОписаний(ПараметрыФормирования, АдресХранилища) Экспорт
	
	РезультатПолученияНавигационныхСсылок = РезультатПолученияНавигационныхСсылокИзВыгружаемыхОписаний(ПараметрыФормирования);
	
	ПоместитьВоВременноеХранилище(РезультатПолученияНавигационныхСсылок, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

#Область ПодготовкаОписанийПроцессов

Функция НовыйДеревоОписанияКВыгрузке()
	
	ОписанияКВыгрузке = Новый ДеревоЗначений;
	
	ОписанияКВыгрузке.Колонки.Добавить("Сценарий",                Новый ОписаниеТипов("СправочникСсылка.ДемонстрационныеСценарии"));
	ОписанияКВыгрузке.Колонки.Добавить("ОписанияСценария",        Новый ОписаниеТипов("ТаблицаЗначений"));
	ОписанияКВыгрузке.Колонки.Добавить("ПолныйКод",               ОбщегоНазначения.ОписаниеТипаСтрока(150));
	ОписанияКВыгрузке.Колонки.Добавить("УникальныйИдентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ОписанияКВыгрузке.Колонки.Добавить("ХешИдентификатора",       ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ОписанияКВыгрузке.Колонки.Добавить("ОписанийКВыгрузке",       ОбщегоНазначения.ОписаниеТипаЧисло(2,0, ДопустимыйЗнак.Неотрицательный));
	ОписанияКВыгрузке.Колонки.Добавить("РеквизитыСценария",       ОбщегоНазначения.ОписаниеТипаСтрока(0));
	
	Возврат ОписанияКВыгрузке;
	
КонецФункции

Процедура ПодготовитьДанныеОписанийДляВыгрузки(Результат, НастройкиКомпоновщика, ЭтоПолнаяВыгрузка)
	
	ОписанияКВыгрузке = НовыйДеревоОписанияКВыгрузке();
	
	Запрос = Новый Запрос;
	
	Если Не ЭтоПолнаяВыгрузка Тогда
		
		УстановитьТекстЗапросаПоОтбору(Запрос, НастройкиКомпоновщика);
		
		Запрос.Текст = Запрос.Текст + ОбщегоНазначения.РазделительПакетаЗапросов();
		
		ДобавитьТекстЗапросаВыгрузки(Запрос); 
		
	Иначе
		
		Запрос.Текст = ТекстЗапросаПолнаяВыгрузкаОписаний();
	
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДеревоДанных = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ОписанияПроцессовСтрокиДерева = Новый Соответствие;
	
	ОбработатьСтрокиДереваДанных(ДеревоДанных.Строки, ОписанияКВыгрузке.Строки, Неопределено, ОписанияПроцессовСтрокиДерева);
	
	ДобавитьДанныеJSONРеквизитовСценария(ОписанияПроцессовСтрокиДерева);
	
	Результат.ПодготовленныеДанные.ОписанияПроцессов = ОписанияКВыгрузке;
	
КонецПроцедуры

Функция ТекстЗапросаПолнаяВыгрузкаОписаний()
	
	Возврат "
	|ВЫБРАТЬ
	|	ДемонстрационныеСценарии.Ссылка                             КАК Ссылка,
	|	ДемонстрационныеСценарииОписанияСценария.КодЯзыка           КАК КодЯзыка,
	|	ДемонстрационныеСценарииОписанияСценария.ПрисоединенныйФайл КАК ПрисоединенныйФайл,
	|	ДемонстрационныеСценарии.ПолныйКод                          КАК ПолныйКод
	|ИЗ
	|	Справочник.ДемонстрационныеСценарии.ОписанияСценария КАК ДемонстрационныеСценарииОписанияСценария
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДемонстрационныеСценарии КАК ДемонстрационныеСценарии
	|		ПО ДемонстрационныеСценарииОписанияСценария.Ссылка = ДемонстрационныеСценарии.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПолныйКод
	|ИТОГИ ПО
	|	Ссылка ИЕРАРХИЯ
	|";
	
КонецФункции

Процедура ДобавитьДанныеJSONРеквизитовСценария(ОписанияПроцессовСтрокиДерева)

	СценарииДляПолученияДанных = Новый Массив;
	Для Каждого ЭлементСоответствия Из ОписанияПроцессовСтрокиДерева Цикл
		
		СценарииДляПолученияДанных.Добавить(ЭлементСоответствия.Ключ);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДемонстрационныеСценарии.Ссылка            КАК Ссылка,
	|	ДемонстрационныеСценарии.ПометкаУдаления   КАК ПометкаУдаления,
	|	ДемонстрационныеСценарии.Родитель          КАК Родитель,
	|	ДемонстрационныеСценарии.ЭтоГруппа         КАК ЭтоГруппа,
	|	ДемонстрационныеСценарии.Код               КАК Код,
	|	ДемонстрационныеСценарии.Наименование      КАК Наименование,
	|	ДемонстрационныеСценарии.ПолныйКод         КАК ПолныйКод,
	|	ДемонстрационныеСценарии.Статус            КАК Статус,
	|	ДемонстрационныеСценарии.Комментарий       КАК Комментарий,
	|	ДемонстрационныеСценарии.ТипГруппы         КАК ТипГруппы,
	|	ДемонстрационныеСценарии.НаименованиеЯзык1 КАК НаименованиеЯзык1,
	|	ДемонстрационныеСценарии.НаименованиеЯзык2 КАК НаименованиеЯзык2,
	|	ДемонстрационныеСценарии.ПрофилиГруппДоступа.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Профиль КАК Профиль
	|	) КАК ПрофилиГруппДоступа,
	|	ДемонстрационныеСценарии.ОбъектыКонфигурации.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		ОбъектКонфигурации КАК ОбъектКонфигурации
	|	) КАК ОбъектыКонфигурации
	|ИЗ
	|	Справочник.ДемонстрационныеСценарии КАК ДемонстрационныеСценарии
	|ГДЕ
	|	ДемонстрационныеСценарии.Ссылка В (&МассивСценариев)";
	
	Запрос.УстановитьПараметр("МассивСценариев", СценарииДляПолученияДанных);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		ДанныеРеквизитовОписания = ДемонстрационныеСценарии.НовыйДанныеРеквизитовОписаниеПроцессов();
		
		ЗаполнитьЗначенияСвойств(ДанныеРеквизитовОписания, Выборка, , "ПрофилиГруппДоступа, ОбъектыКонфигурации");
		
		ДанныеРеквизитовОписания.ПрофилиГруппДоступа = Выборка.ПрофилиГруппДоступа.Выгрузить();
		ДанныеРеквизитовОписания.ОбъектыКонфигурации = Выборка.ОбъектыКонфигурации.Выгрузить();
		
		СтрокаДерева = ОписанияПроцессовСтрокиДерева.Получить(Выборка.Ссылка);
		Если СтрокаДерева <> Неопределено Тогда
			СтрокаДерева.РеквизитыСценария = ДемонстрационныеСценарии.ТекстJSONРеквизитыОписаниеПроцессов(ДанныеРеквизитовОписания);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьСтрокиДереваДанных(СтрокиДереваЗапроса, СтрокиДереваФормы, СтрокаДереваФормы, ОписанияПроцессовСтрокиДерева)
	
	Для Каждого СтрокаДереваЗапроса Из СтрокиДереваЗапроса Цикл
		
		Если СтрокаДереваЗапроса.КодЯзыка = NULL
			Или СтрокаДереваЗапроса.ПрисоединенныйФайл = NULL Тогда
			
			РодительскаяСтрока = СтрокаДереваЗапроса.Родитель;
			Если РодительскаяСтрока <> Неопределено
				И РодительскаяСтрока.Ссылка = СтрокаДереваЗапроса.Ссылка Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			НоваяСтрокаДереваФормы = СтрокиДереваФормы.Добавить();
			НоваяСтрокаДереваФормы.Сценарий         = СтрокаДереваЗапроса.Ссылка;
			НоваяСтрокаДереваФормы.ПолныйКод        = СтрокаДереваЗапроса.ПолныйКод;
			НоваяСтрокаДереваФормы.ОписанияСценария = НовыйТаблицаОписания();
			
			ОписанияПроцессовСтрокиДерева.Вставить(СтрокаДереваЗапроса.Ссылка, НоваяСтрокаДереваФормы);
			
			НоваяСтрокаДереваФормы.УникальныйИдентификатор = СтрЗаменить(СтрокаДереваЗапроса.Ссылка.УникальныйИдентификатор(), "-", "_");
			НоваяСтрокаДереваФормы.ХешИдентификатора       = Формат(ДемонстрационныеСценарии.ХешТекста(НоваяСтрокаДереваФормы.УникальныйИдентификатор), "ЧГ=0");
			
			ОбработатьСтрокиДереваДанных(СтрокаДереваЗапроса.Строки, НоваяСтрокаДереваФормы.Строки, НоваяСтрокаДереваФормы, ОписанияПроцессовСтрокиДерева);
			
		Иначе
			
			ДобавитьОписанияСценарияВДерево(СтрокаДереваФормы, СтрокаДереваЗапроса);
			
			СтрокаДереваФормы.ОписанийКВыгрузке = СтрокаДереваФормы.ОписанияСценария.Количество();
			
		КонецЕсли;
		
	КонецЦикла

КонецПроцедуры

Функция НовыйТаблицаОписания()
	
	ОписанияСценария = Новый ТаблицаЗначений;
	
	ОписанияСценария.Колонки.Добавить("КодЯзыка", ОбщегоНазначения.ОписаниеТипаСтрока(2));
	ОписанияСценария.Колонки.Добавить("ТекстHTML", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	
	Возврат ОписанияСценария
	
КонецФункции

Процедура ДобавитьОписанияСценарияВДерево(СтрокаДереваФормы, СтрокаДереваЗапроса)

	НоваяСтрокаТаблицыОписания = СтрокаДереваФормы.ОписанияСценария.Добавить();
	НоваяСтрокаТаблицыОписания.КодЯзыка = СтрокаДереваЗапроса.КодЯзыка;
	
	ДанныеФайла = РаботаСФайлами.ДанныеФайла(СтрокаДереваЗапроса.ПрисоединенныйФайл);
	НоваяСтрокаТаблицыОписания.ТекстHTML = ДемонстрационныеСценарии.ТекстHTMLПоДаннымПрисоединенногоФайла(ДанныеФайла);

КонецПроцедуры

Процедура УстановитьТекстЗапросаПоОтбору(Запрос, НастройкиКомпоновщика)

	СхемаКомпоновки = Обработки.ВыгрузкаОписанийПроцессов.ПолучитьМакет("ОтборОписанийПроцессов");
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновки, 
	                                                    НастройкиКомпоновщика,,,
	                                                    Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	Запрос.Текст = МакетКомпоновкиДанных.НаборыДанных.ОсновнойНаборДанных.Запрос;
	
	Для каждого Параметр Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
		Запрос.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
	КонецЦикла;
	
	НайденнаяПозицияИЗ = СтрНайти(Запрос.Текст,"ИЗ");
	Если НайденнаяПозицияИЗ <> 0 Тогда
		Запрос.Текст = Лев(Запрос.Текст,НайденнаяПозицияИЗ - 1) + "  ПОМЕСТИТЬ ОтборПоСценариям
		|  " + Прав(Запрос.Текст,СтрДлина(Запрос.Текст) - НайденнаяПозицияИЗ + 1);
		
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьТекстЗапросаВыгрузки(Запрос)

	ТекстОсновногоЗапроса = "
	|ВЫБРАТЬ
	|	ДемонстрационныеСценарии.Ссылка                             КАК Ссылка,
	|	ДемонстрационныеСценарииОписанияСценария.КодЯзыка           КАК КодЯзыка,
	|	ДемонстрационныеСценарииОписанияСценария.ПрисоединенныйФайл КАК ПрисоединенныйФайл,
	|	ДемонстрационныеСценарии.ПолныйКод                          КАК ПолныйКод
	|ИЗ
	|	Справочник.ДемонстрационныеСценарии.ОписанияСценария КАК ДемонстрационныеСценарииОписанияСценария
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборПоСценариям КАК ОтборПоСценариям
	|		ПО ДемонстрационныеСценарииОписанияСценария.Ссылка = ОтборПоСценариям.ОписаниеПроцесса
	|			И ДемонстрационныеСценарииОписанияСценария.ПрисоединенныйФайл = ОтборПоСценариям.ПрисоединенныйФайл
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДемонстрационныеСценарии КАК ДемонстрационныеСценарии
	|		ПО ДемонстрационныеСценарииОписанияСценария.Ссылка = ДемонстрационныеСценарии.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПолныйКод
	|ИТОГИ ПО
	|	Ссылка ИЕРАРХИЯ
	|";

	Запрос.Текст = Запрос.Текст + ТекстОсновногоЗапроса;

КонецПроцедуры

#КонецОбласти 

#Область ПодготовкаГлоссария

Функция НовыйТаблицаГлоссарийКВыгрузке()
	
	ОписанияКВыгрузке = Новый ТаблицаЗначений;
	
	ОписанияКВыгрузке.Колонки.Добавить("Глоссарий",               Новый ОписаниеТипов("СправочникСсылка.Глоссарий"));
	ОписанияКВыгрузке.Колонки.Добавить("ОписанияГлоссария",       Новый ОписаниеТипов("ТаблицаЗначений"));
	ОписанияКВыгрузке.Колонки.Добавить("УникальныйИдентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ОписанияКВыгрузке.Колонки.Добавить("РеквизитыГлоссария",      ОбщегоНазначения.ОписаниеТипаСтрока(0));
	
	Возврат ОписанияКВыгрузке;
	
КонецФункции

Процедура ПодготовитьДанныеГлоссарияДляВыгрузки(РезультатПолученияДанных, ЭтоПолнаяВыгрузка)
	
	ГлоссарийКВыгрузке = НовыйТаблицаГлоссарийКВыгрузке();
	
	Запрос = Новый Запрос;
	
	Если ЭтоПолнаяВыгрузка Тогда
		
		Запрос.Текст = ТекстЗапросаПолнаяВыгрузкаГлоссария();
		
	Иначе
		
		ИспользуемыеГлоссарии = ИспользуемыеВВыгружаемыхОписанияхГлоссарии(РезультатПолученияДанных.ПодготовленныеДанные.ОписанияПроцессов);
		Запрос.Текст = ТекстЗапросаЧастичнаяВыгрузкаГлоссария();
		Запрос.УстановитьПараметр("ИспользуемыеГлоссарии", ИспользуемыеГлоссарии);
		
	КонецЕсли; 
	
	Запрос.Текст =  Запрос.Текст + ЧастьТекстаЗапросаВыгрузкаГлоссарияУпорядочить();
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ЗаполнитьТаблицуГлоссарийКВыгрузке(РезультатЗапроса, ГлоссарийКВыгрузке);
	
	РезультатПолученияДанных.ПодготовленныеДанные.Глоссарий = ГлоссарийКВыгрузке;
	
КонецПроцедуры

Функция ИспользуемыеВВыгружаемыхОписанияхГлоссарии(ДеревоВыгружаемыхОписаний)
	
	
	ИспользуемыеГлоссарии = Новый Массив;
	
	Для Каждого СтрокаДерева Из ДеревоВыгружаемыхОписаний.Строки Цикл
		
		ОпределитьИспользуемыеГлоссарииПоСтрокеДерева(СтрокаДерева, ИспользуемыеГлоссарии);
		
	КонецЦикла;
	
	Возврат ИспользуемыеГлоссарии;
	
КонецФункции

Процедура ОпределитьИспользуемыеГлоссарииПоСтрокеДерева(СтрокаДерева, ИспользуемыеГлоссарии)
	
	Для Каждого СтрокаОписаниеНаЯзыке Из СтрокаДерева.ОписанияСценария Цикл
		
		СсылкиВОписании = ДемонстрационныеСценарии.УникальныеСсылкиВHTMLДокументе(СтрокаОписаниеНаЯзыке.ТекстHTML);
		
		Для Каждого СсылкаВОписании Из СсылкиВОписании Цикл
			
			Если СтрНайти(СсылкаВОписании, "e1cib/data/Справочник.Глоссарий") <> 0 Тогда
				
				СсылкаНаГлоссарий = ДемонстрационныеСценарииВызовСервера.СсылкаНаОбъектПоНавигационнойСсылке(СсылкаВОписании);
				
				Если СсылкаНаГлоссарий <> Неопределено
					И ИспользуемыеГлоссарии.Найти(СсылкаНаГлоссарий) = Неопределено Тогда
					
					ИспользуемыеГлоссарии.Добавить(СсылкаНаГлоссарий);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.Строки Цикл
		
		ОпределитьИспользуемыеГлоссарииПоСтрокеДерева(ПодчиненнаяСтрока, ИспользуемыеГлоссарии);
		
	КонецЦикла
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуГлоссарийКВыгрузке(РезультатЗапроса, ГлоссарийКВыгрузке) 
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ГлоссарийКВыгрузке.Добавить();
		
		НоваяСтрока.Глоссарий               = Выборка.Ссылка;
		НоваяСтрока.ОписанияГлоссария       = НовыйТаблицаОписания();
		
		ДанныеРеквизитовГлоссария = ДемонстрационныеСценарии.НовыйДанныеРеквизитовГлоссарий();
		ЗаполнитьЗначенияСвойств(ДанныеРеквизитовГлоссария, Выборка, , "ОбъектыКонфигурации");
		ДанныеРеквизитовГлоссария.ОбъектыКонфигурации = Выборка.ОбъектыКонфигурации.Выгрузить();
		
		НоваяСтрока.РеквизитыГлоссария      = ДемонстрационныеСценарии.ТекстJSONРеквизитовГлоссария(ДанныеРеквизитовГлоссария);
		НоваяСтрока.УникальныйИдентификатор = Строка(Выборка.Ссылка.УникальныйИдентификатор());

		ЗаполнитьТаблицуОписанийГлоссария(НоваяСтрока, Выборка);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуОписанийГлоссария(СтрокаТаблицыГлоссарии, Выборка)

	ОписанияГлоссария = Выборка.ОписанияГлоссария.Выгрузить();
	
	Для Каждого СтрокаОписанияВыборка Из  ОписанияГлоссария Цикл
		
		НоваяСтрока = СтрокаТаблицыГлоссарии.ОписанияГлоссария.Добавить();
		НоваяСтрока.КодЯзыка = СтрокаОписанияВыборка.КодЯзыка; 
		
		ТекстHTML = "";
		Вложения = Новый Структура;
		ФорматированныйДокументОписания = СтрокаОписанияВыборка.Описание.Получить();
		ФорматированныйДокументОписания.ПолучитьHTML(ТекстHTML, Вложения);
		
		НоваяСтрока.ТекстHTML = ТекстHTML; 
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаПолнаяВыгрузкаГлоссария()
	
	Возврат "
	|ВЫБРАТЬ
	|	Глоссарий.Ссылка            КАК Ссылка,
	|	Глоссарий.ВерсияДанных      КАК ВерсияДанных,
	|	Глоссарий.ПометкаУдаления   КАК ПометкаУдаления,
	|	Глоссарий.Код               КАК Код,
	|	Глоссарий.Наименование      КАК Наименование,
	|	Глоссарий.НаименованиеЯзык1 КАК НаименованиеЯзык1,
	|	Глоссарий.НаименованиеЯзык2 КАК НаименованиеЯзык2,
	|	Глоссарий.ОбъектыКонфигурации.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		ОбъектКонфигурации КАК ОбъектКонфигурации
	|	)                           КАК ОбъектыКонфигурации,
	|	Глоссарий.ОписанияГлоссария.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		КодЯзыка КАК КодЯзыка,
	|		Описание КАК Описание
	|	)                           КАК ОписанияГлоссария
	|ИЗ
	|	Справочник.Глоссарий КАК Глоссарий";
	
КонецФункции

Функция ТекстЗапросаЧастичнаяВыгрузкаГлоссария() 
	
	Возврат  ТекстЗапросаПолнаяВыгрузкаГлоссария() + "
	|ГДЕ
	|	Глоссарий.Ссылка В(&ИспользуемыеГлоссарии)";
	
	
КонецФункции

Функция ЧастьТекстаЗапросаВыгрузкаГлоссарияУпорядочить() 

	Возврат "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Глоссарий.Код";
	
КонецФункции


#КонецОбласти

#Область ПолучениеНавигационныхСсылокИзОписаний

Функция РезультатПолученияНавигационныхСсылокИзВыгружаемыхОписаний(ПараметрыФормирования)
	
	РезультатРазбораСсылок = ДемонстрационныеСценарии.НовыйРезультатРазбораСсылок();
	
	РезультатПолученияНавигационныхСсылок = Новый Структура;
	РезультатПолученияНавигационныхСсылок.Вставить("Успешно",               Истина);
	РезультатПолученияНавигационныхСсылок.Вставить("СообщенияОбОшибках",    Новый Массив);
	РезультатПолученияНавигационныхСсылок.Вставить("ПодготовленныеДанные",  РезультатРазбораСсылок);
	
	Для Каждого ДанныеСценария Из ПараметрыФормирования.СценарииКВыгрузке Цикл
		
		РазобратьСсылкиОписанияПоСценарию(ДанныеСценария, РезультатРазбораСсылок);
		
	КонецЦикла;
	
	Возврат РезультатПолученияНавигационныхСсылок;
	
КонецФункции

Процедура РазобратьСсылкиОписанияПоСценарию(СтрокаДереваОписаний, РезультатРазбораСсылок)
	
	Для Каждого ДанныеОписания Из СтрокаДереваОписаний.Описания Цикл
		
		ДобавитьСсылкиОписанияВРезультатРазбора(ДанныеОписания.ТекстHTML, РезультатРазбораСсылок, СтрокаДереваОписаний, ДанныеОписания.КодЯзыка)
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДобавитьСсылкиОписанияВРезультатРазбора(ТекстСценария, РезультатРазбора, СтрокаДереваОписаний, КодЯзыка)
	
	УникальныеСсылки = ДемонстрационныеСценарии.УникальныеСсылкиВHTMLДокументе(ТекстСценария);
	
	Для Каждого УникальнаяСсылка Из УникальныеСсылки Цикл
		
		Если СтрНайти(УникальнаяСсылка, "e1cib/command/") <> 0 Тогда
			
			ДанныеСсылки = НовыйДанныеНавигационныеСсылки();
			ДанныеСсылки.ТипСсылки = "Команда";
			ДанныеСсылки.СсылкаЦеликом = УникальнаяСсылка;
			
			ПозицияНайденного = СтрНайти(УникальнаяСсылка, "e1cib/command/");
			
			НавигационнаяСсылка = Прав(УникальнаяСсылка, СтрДлина(УникальнаяСсылка) + 1 - ПозицияНайденного); 
			
			ДобавитьДанныеСсылкиВКоллекцию(РезультатРазбора.Команды, НавигационнаяСсылка, ДанныеСсылки, СтрокаДереваОписаний, КодЯзыка);
			
		ИначеЕсли СтрНайти(УникальнаяСсылка, "e1cib/list/") <> 0 Тогда
			
			ДанныеСсылки = НовыйДанныеНавигационныеСсылки();
			ДанныеСсылки.ТипСсылки = "Список";
			ДанныеСсылки.СсылкаЦеликом = УникальнаяСсылка;
			
			ПозицияНайденного = СтрНайти(УникальнаяСсылка, "e1cib/list/");
			
			НавигационнаяСсылка = Прав(УникальнаяСсылка, СтрДлина(УникальнаяСсылка) + 1 - ПозицияНайденного);
			
			ДобавитьДанныеСсылкиВКоллекцию(РезультатРазбора.Списки, НавигационнаяСсылка, ДанныеСсылки, СтрокаДереваОписаний, КодЯзыка);
			
		ИначеЕсли СтрНайти(УникальнаяСсылка, "e1cib/data/") <> 0 Тогда
			
			ДанныеСсылки = НовыйДанныеНавигационныеСсылки();
			ДанныеСсылки.ТипСсылки = "СсылкаНаОбъектИБ";
			ДанныеСсылки.СсылкаЦеликом = УникальнаяСсылка;
			
			ПозицияНайденного = СтрНайти(УникальнаяСсылка, "e1cib/data/");
			
			НавигационнаяСсылка = Прав(УникальнаяСсылка, СтрДлина(УникальнаяСсылка) + 1 - ПозицияНайденного);
			
			ДанныеСсылки.СсылкаНаОбъектИБ = ДемонстрационныеСценарииВызовСервера.СсылкаНаОбъектПоНавигационнойСсылке(НавигационнаяСсылка);
			
			ДобавитьДанныеСсылкиВКоллекцию(РезультатРазбора.СсылкиНаОбъекты, НавигационнаяСсылка, ДанныеСсылки, СтрокаДереваОписаний, КодЯзыка);
			
		Иначе
			
			ДанныеСсылки = НовыйДанныеНавигационныеСсылки();
			ДанныеСсылки.ТипСсылки = "ВнешняяСсылка";
			ДанныеСсылки.СсылкаЦеликом = УникальнаяСсылка;
			
			ДобавитьДанныеСсылкиВКоллекцию(РезультатРазбора.ВнешниеСсылки, УникальнаяСсылка, ДанныеСсылки, СтрокаДереваОписаний, КодЯзыка);
			
		КонецЕсли; 
		
		ДанныеСсылки.ХэшСсылки= Формат(ДемонстрационныеСценарии.ХешТекста(УникальнаяСсылка), "ЧГ=0");
		
	КонецЦикла;
	
КонецФункции

Функция НовыйДанныеНавигационныеСсылки()

	ДанныеСсылки = Новый Структура;
	ДанныеСсылки.Вставить("ТипСсылки",           "");
	ДанныеСсылки.Вставить("СсылкаЦеликом",       "");
	ДанныеСсылки.Вставить("ХэшСсылки",           "");
	ДанныеСсылки.Вставить("СсылкаНаОбъектИБ",    "");
	ДанныеСсылки.Вставить("Заголовок",           ""); 
	ДанныеСсылки.Вставить("Сценарии",            Новый Массив);
	ДанныеСсылки.Вставить("ДанныеСтраниц",       Неопределено);
	
	Возврат ДанныеСсылки;

КонецФункции

Процедура ДобавитьДанныеСсылкиВКоллекцию(Коллекция, НавигационнаяСсылка, ДанныеСсылки, СтрокаДереваОписаний, КодЯзыка)
	
	ДанныеСценария = Новый Структура;
	ДанныеСценария.Вставить("Сценарий",            СтрокаДереваОписаний.Сценарий);
	ДанныеСценария.Вставить("ИдентификаторСтроки", СтрокаДереваОписаний.ИдентификаторСтроки);
	ДанныеСценария.Вставить("КодЯзыка",            КодЯзыка); 
	
	ЭлементКоллекции = Коллекция.Получить(НавигационнаяСсылка);
	
	Если ЭлементКоллекции = Неопределено Тогда 
		ДанныеСсылки.Сценарии.Добавить(ДанныеСценария);
		Коллекция.Вставить(НавигационнаяСсылка, ДанныеСсылки);
	Иначе
		ЭлементКоллекции.Сценарии.Добавить(ДанныеСценария);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти 

#КонецЕсли
