#Если НЕ ВебКлиент Тогда
	
#Область ОписаниеПеременных

&НаКлиенте
Перем ТестовоеПриложение, ЯдроВиндоус;

&НаКлиенте
Перем КешПроверенныхОконНаМодальность;

&НаКлиенте
Перем ВнешняяКомпонентаДляСкриншотов Экспорт;

&НаКлиенте
Перем МестоположениеВнешнейКомпонентыДляСкриншотов;

&НаКлиенте
Перем ДескрипторОсновногоОкнаТекущегоКлиентаТестирования;

&НаКлиенте
Перем PIDТекущегоКлиентаТестирования;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если РежимОткрытия = "ПолучениеСкриншотов" Тогда
		
		ИнициализироватьДанныеНаКлиенте();
		
	ИначеЕсли ВнешняяКомпонентаСкриншотыСуществует Тогда
		
		ВыполнитьПодключениеВнешнейКомпоненты();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнициализироватьФорму();
	
	ДемонстрационныеСценарии.СброситьРазмерыИПоложениеОкна(ЭтотОбъект);
	
	ОбработатьПереданныеПараметры();
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияКакПодключитьКомпонентуОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	Если НавигационнаяСсылкаФорматированнойСтроки = "e1cib/list/Справочник.ВнешниеКомпоненты" Тогда
		
		ИдентификаторКомпоненты = "WindowsControl";
		
		HTMLДокумент = Элементы.HTMLДляКопирования.document;
		ВременноеПолеВвода = HTMLДокумент.createElement("INPUT");
		АктивныйЭлемент = HTMLДокумент.activeElement;
		ВременноеПолеВвода.value = ИдентификаторКомпоненты;
		HTMLДокумент.body.appendChild(ВременноеПолеВвода);
		ВременноеПолеВвода.select();
		HTMLДокумент.execCommand("copy");
		HTMLДокумент.body.removeChild(ВременноеПолеВвода);
		АктивныйЭлемент.focus();
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Идентификатор компоненты ""%1"" помещен в буфер обмена.'"), ИдентификаторКомпоненты);
		ПоказатьОповещениеПользователя(,,ТекстСообщения,БиблиотекаКартинок.ИнтеграцияВключена);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодключитьКлиентТестирования()
	
	РазорватьСоединениеTestClient();
	
	Если РезультатПодключенияУжеЗапущенногоКлиентаТестирования() Тогда
		
		Если РежимОткрытия = "НастройкиПодключения" Тогда
			
			ТекстОповещения = НСтр("ru = 'Подключен уже запущенный клиент тестирования.'");
			ЗакрытьПослеУспешногоПодключения();
			
		Иначе
			
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("ПодключенУжеСуществующийСеанс", Истина);
			ЗаполнитьPidДескрипторОкнаКлиентаТестирования(ДанныеЗапускаКлиентаТестирования(), ДопПараметры);
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	ЗапуститьИПодключитьКлиентТестирования();
	
КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияФормы

&НаКлиенте
Процедура ИнициализироватьДанныеНаКлиенте()

	КешПроверенныхОконНаМодальность = Новый Соответствие; 
	
	ВыполнитьПодключениеВнешнейКомпоненты();

КонецПроцедуры

&НаСервере
Процедура ОбработатьПереданныеПараметры()

	НомерПортаКлиентТестирования        = Параметры.НомерПортаКлиентТестирования;
	СтрокаСоединенияКлиентаТестирования = Параметры.СтрокаСоединенияКлиентаТестирования;
	ТаймаутЗапускаКлиентаТестирования   = Параметры.ТаймаутЗапускаКлиентаТестирования;
	РежимОткрытия                       = Параметры.РежимОткрытия; 
	ИдентификаторФормыВладельца         = Параметры.ИдентификаторФормыВладельца;
	ИмяКаталога                         = Параметры.ИмяКаталога;
	
	Если НомерПортаКлиентТестирования = 0 Тогда
		НомерПортаКлиентТестирования = 48123;
	КонецЕсли; 
	
	Если Не ПустаяСтрока(СтрокаСоединенияКлиентаТестирования) Тогда
		
		СтрокаСоединенияКлиентаТестирования = СтрокаСоединенияИнформационнойБазы();
		
		Если ЭтоФайловаяБаза Тогда
			
			СтрокаСоединенияКлиентаТестирования = Сред(СтрокаСоединенияКлиентаТестирования, 7, СтрДлина(СтрокаСоединенияКлиентаТестирования) - 8);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если РежимОткрытия = "НастройкиПодключения" Тогда
		
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаНастройкиПодключения;
		
	ИначеЕсли РежимОткрытия = "ПолучениеСкриншотов" Тогда
		
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаПолучениеСкриншотов;
		
		ЗаполнитьТаблицуНавигационныхСсылок(Параметры.ДанныеДляПолученияСкриншотов);
		
		Элементы.ДекорацияТекстОжиданиеПолучениеСкриншотов.Заголовок = НСтр("ru = 'Выполняется получение скриншотов. Пожалуйста подождите....'");
		
		Заголовок = НСтр("ru = 'Получение скриншотов'");
		
	КонецЕсли;

КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьТаблицуНавигационныхСсылок(ДанныеНавигационныхСсылок) 
	
	ИменаСоответствий = Новый Массив;
	ИменаСоответствий.Добавить("Команды");
	ИменаСоответствий.Добавить("СсылкиНаОбъекты");
	ИменаСоответствий.Добавить("Списки"); 
	
	Для Каждого ЭлементМассива Из ИменаСоответствий Цикл
		
		Для Каждого ДанныеНавигационнойСсылки Из Параметры.ДанныеДляПолученияСкриншотов[ЭлементМассива] Цикл
		
			ДобавитьСтрокуТаблицыНавигационнойСсылки(ДанныеНавигационнойСсылки, ЭлементМассива);
		
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуТаблицыНавигационнойСсылки(ДанныеНавигационнойСсылки, ТипСсылки)
	
	НоваяСтрока = НавигационныеСсылки.Добавить(); 
	
	НоваяСтрока.НавигационнаяСсылка = ДанныеНавигационнойСсылки.Ключ;
	НоваяСтрока.СсылкаНаОбъект      = ДанныеНавигационнойСсылки.Значение.СсылкаНаОбъектИБ; 
	НоваяСтрока.ХэшСсылки           = ДанныеНавигационнойСсылки.Значение.ХэшСсылки;
	НоваяСтрока.ТипСсылки           = ТипСсылки;
	
	Для Каждого ДанныеСценария Из ДанныеНавигационнойСсылки.Значение.Сценарии Цикл
	
		НоваяСтрокаСценарии = НоваяСтрока.Сценарии.Добавить();
		НоваяСтрокаСценарии.Сценарий            = ДанныеСценария.Сценарий;
		НоваяСтрокаСценарии.КодЯзыка            = ДанныеСценария.КодЯзыка;
		НоваяСтрокаСценарии.ИдентификаторСтроки = ДанныеСценария.ИдентификаторСтроки; 
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьФорму()
	
	Объект.ДополнительныеПараметры = Новый Структура;
	
	ЦветГиперссылка = ЦветаСтиля.ГиперссылкаЦвет;
	
	ИнформацияОКомпоненте = ВнешниеКомпонентыВызовСервера.ИнформацияОКомпоненте(ДемонстрационныеСценарииКлиентСервер.ИдентификаторВнешнейКомпонентыПолученияСкриншотов());
	
	Если Не ИнформацияОКомпоненте.Существует Тогда
		
		Массив = Новый Массив;
		Массив.Добавить(СтрШаблон(НСтр("ru = 'Проверка компоненты получения скриншотов: %1'"), ИнформацияОКомпоненте.ОписаниеОшибки));
		
		Элементы.ДекорацияВерсияКомпоненты.Заголовок = Новый ФорматированнаяСтрока(Массив,, ЦветаСтиля.ПоясняющийОшибкуТекст); 
		
		Элементы.ДекорацияКакПодключитьКомпоненту.Видимость = Истина;
		
		Ширина = 50;
		Высота = 17;
		
	Иначе
		
		Элементы.ДекорацияКакПодключитьКомпоненту.Видимость = Ложь;
		ВнешняяКомпонентаСкриншотыСуществует = Истина; 
		
		Ширина = 50;
		Высота = 10;
		
	КонецЕсли;
	
	ЭтоФайловаяБаза = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	Если ЭтоФайловаяБаза Тогда
		
		Элементы.СтрокаСоединенияКлиентаТестирования.Заголовок = НСтр("ru = 'Каталог информационной базы'");
		Элементы.СтрокаСоединенияКлиентаТестирования.ПодсказкаВвода = СтрШаблон(НСтр("ru = 'Например: %1'"), "C:\Bases\MyBase");
		
	Иначе
		
		Элементы.СтрокаСоединенияКлиентаТестирования.Заголовок = НСтр("ru = 'Строка соединения ИБ'");
		Элементы.СтрокаСоединенияКлиентаТестирования.ПодсказкаВвода = СтрШаблон(НСтр("ru = 'Например: %1'"), "Srvr=""МyServer"";Ref=""MyBase""");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДеревоСтраниц

&НаКлиенте
Процедура ВывестиПрогрессОбработки(ДанныеДляВыводаПрогресса)
	
	ДанныеДляВыводаПрогресса.Обработано = ДанныеДляВыводаПрогресса.Обработано + 1;
	ПрогрессВыполнения                  = (ДанныеДляВыводаПрогресса.Обработано / ДанныеДляВыводаПрогресса.КОбработке) * 100;
	ОбновитьОтображениеДанных(Элементы.ПрогрессВыполнения);
	
КонецПроцедуры

&НаКлиенте
Функция НовыйДанныеДляВыводаПрогресса()

	ДанныеПрогресса = Новый Структура;
	ДанныеПрогресса.Вставить("Обработано", 0);
	ДанныеПрогресса.Вставить("КОбработке", 0);
	
	Возврат ДанныеПрогресса;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РезультатПоискаВДанныхФормыДерево(ГдеИскать,Значение,Колонка,ИскатьВПодчиненных)
	
	ЭлементыДерева = ГдеИскать.ПолучитьЭлементы();
	
	Для каждого ЭлементДерева Из ЭлементыДерева Цикл
		Если ЭлементДерева[Колонка] = Значение Тогда
			Возврат ЭлементДерева.ПолучитьИдентификатор();
		ИначеЕсли  ИскатьВПодчиненных Тогда
			НайденныйИдентификаторСтроки =  РезультатПоискаВДанныхФормыДерево(ЭлементДерева,Значение,Колонка,ИскатьВПодчиненных);
			Если НайденныйИдентификаторСтроки >=0 Тогда
				Возврат НайденныйИдентификаторСтроки;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат -1;
	
КонецФункции

&НаКлиенте
Функция ДанныеОткрываемойФормы(НавигационнаяСсылка)
	
	Результат = Новый Структура;
	Результат.Вставить("ДанныеСтраниц", Новый Массив);
	Результат.Вставить("Заголовок",     "");
	Результат.Вставить("ТекущаяФорма",  "");
	Результат.Вставить("Успешно",       Истина);
	
	РезультатОткрытия = РезультатОткрытияОкнаПоНавигационнойСсылке(НавигационнаяСсылка);
	
	Если Не РезультатОткрытия.Успешно Тогда
		
		Результат.Успешно = Ложь;
		Возврат Результат;
	
	ИначеЕсли РезультатОткрытия.ТекущееОкно = Неопределено 
		Или ТипЗнч(РезультатОткрытия.ТекущееОкно) <> Тип("ТестируемоеОкноКлиентскогоПриложения") Тогда
		
		РезультатОткрытия.Успешно = Ложь;
		Возврат Неопределено;
		
	ИначеЕсли ЭтоЗаголовокОкнаМодальногоДиалога(РезультатОткрытия.ТекущееОкно.Заголовок) Тогда
	
		Если ЭтоФормаОшибки(РезультатОткрытия.ТекущаяФорма) Тогда
			
			РезультатОткрытия.Успешно = Ложь;
			Результат.Успешно = Ложь;
			Возврат Результат;
			
		КонецЕсли;
		
	Иначе 
		
		Результат.ТекущаяФорма = РезультатОткрытия.ТекущаяФорма;
		
		Результат.Заголовок = РезультатОткрытия.ТекущаяФорма.ТекстЗаголовка;
		
		ПодчиненныеОбъекты = РезультатОткрытия.ТекущаяФорма.ПолучитьПодчиненныеОбъекты(); 
		
		Для Каждого ПодчиненныйОбъект Из ПодчиненныеОбъекты Цикл // ТестируемаяГруппаФормы
			
			Если ТипЗнч(ПодчиненныйОбъект) <> Тип("ТестируемаяГруппаФормы") Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если ПодчиненныйОбъект.Вид = ВидГруппыФормы.Страницы Тогда
				
				ПодчиненныеОбъектыСтраницы = ПодчиненныйОбъект.ПолучитьПодчиненныеОбъекты();
				
				Для Каждого ПодчиненныйОбъектСтраница Из ПодчиненныеОбъектыСтраницы Цикл 
					
					Если Не ПодчиненныйОбъектСтраница.ТекущаяДоступность() 
						Или Не ПодчиненныйОбъектСтраница.ТекущаяВидимость() Тогда
						
						Продолжить;
						
					КонецЕсли;
					
					ДанныеСтраницы = НовыйДанныеСтраницы();
					ДанныеСтраницы.Заголовок = ПодчиненныйОбъектСтраница.ТекстЗаголовка;
					ДанныеСтраницы.Имя =       ПодчиненныйОбъектСтраница.Имя;
					
					Результат.ДанныеСтраниц.Добавить(ДанныеСтраницы);
					
				КонецЦикла;
				
			ИначеЕсли ПодчиненныйОбъект.Вид = ВидГруппыФормы.ОбычнаяГруппа Тогда 
				
				ПодчиненныеОбъектыВторойУровень = ПодчиненныйОбъект.ПолучитьПодчиненныеОбъекты(); 
				
				Для Каждого ПодчиненныйОбъектВторойУровень Из ПодчиненныеОбъектыВторойУровень Цикл // ТестируемаяГруппаФормы
					
					Если ТипЗнч(ПодчиненныйОбъектВторойУровень) <> Тип("ТестируемаяГруппаФормы") Тогда
						
						Продолжить;
						
					КонецЕсли;
					
					Если ПодчиненныйОбъектВторойУровень.Вид = ВидГруппыФормы.Страницы Тогда
						
						ПодчиненныеОбъектыСтраницы = ПодчиненныйОбъектВторойУровень.ПолучитьПодчиненныеОбъекты();
						
						Для Каждого ПодчиненныйОбъектСтраница Из ПодчиненныеОбъектыСтраницы Цикл
							
							Если Не ПодчиненныйОбъектСтраница.ТекущаяВидимость() 
								Или Не ПодчиненныйОбъектСтраница.ТекущаяДоступность() Тогда
								
								Продолжить;
								
							КонецЕсли;
							
							ДанныеСтраницы = НовыйДанныеСтраницы();
							ДанныеСтраницы.Заголовок       = ПодчиненныйОбъектСтраница.ТекстЗаголовка;
							ДанныеСтраницы.ЗаголовокГруппы = ПодчиненныйОбъект.ТекстЗаголовка;
							Результат.ДанныеСтраниц.Добавить(ДанныеСтраницы);
							
						КонецЦикла
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции 

&НаКлиенте
Функция НовыйДанныеСтраницы()

	ДанныеСтраницы = Новый Структура;
	
	ДанныеСтраницы.Вставить("Заголовок",       "");
	ДанныеСтраницы.Вставить("ЗаголовокГруппы", "");
	ДанныеСтраницы.Вставить("Имя",             "");
	ДанныеСтраницы.Вставить("Путь",            "");
	
	Возврат ДанныеСтраницы;
	
КонецФункции

#КонецОбласти

#Область СоединенияКлиентаТестирования

&НаКлиенте
Функция РезультатПодключенияУжеЗапущенногоКлиентаТестирования()
	
	#Если Не МобильныйКлиент Тогда
	
	Попытка
		ТестовоеПриложение = Новый ТестируемоеПриложение(,НомерПортаКлиентТестирования);
		ТестовоеПриложение.УстановитьСоединение();
		СоединениеУстановлено = Истина;
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки; 
	
	#КонецЕсли
	
КонецФункции

&НаКлиенте
Процедура РазорватьСоединениеTestClient()
	
	Если ТестовоеПриложение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ТестовоеПриложение.РазорватьСоединение();
	Исключение
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьИПодключитьКлиентТестирования()
	
	ПереданПользователь = Ложь;
	Если ЗначениеЗаполнено(СтрокаСоединенияКлиентаТестирования) Тогда
		СтрокаСоединения = СтрокаСоединенияКлиентаТестирования;
		Если Найти(СтрокаСоединения, " /N") > 0 Тогда
			ПереданПользователь = Истина;
		КонецЕсли;
	Иначе
		СтрокаСоединения = СтрЗаменить(СтрокаСоединенияИнформационнойБазы(),"""","""""");
	КонецЕсли;
	
	Если ЭтоФайловаяБаза Тогда
		СтрокаСоединения = " /F " +  """" + СтрокаСоединения + """";
	Иначе 
		СтрокаСоединения = СтрЗаменить(СтрокаСоединения, "Srvr=", "/S");
		СтрокаСоединения = СтрЗаменить(СтрокаСоединения, """;Ref=""", "\");
	КонецЕсли;
	
	СтрокаЗапуска = "ENTERPRISE  "
		+ СтрокаСоединения
		+ " /AllowExecuteScheduledJobs -Off"
		+ " /TESTCLIENT -TPort " + Формат(НомерПортаКлиентТестирования, "ЧГ=; ЧН=0");
		
	Если ЗначениеЗаполнено(ИмяПользователя()) И НЕ ПереданПользователь Тогда
		СтрокаЗапуска = СтрокаЗапуска + " /N """ + ИмяПользователя() + """";
	КонецЕсли;
	
	СтрокаЗапуска1с = КаталогПрограммы() + "1cv8c";
	
	Если НЕ ЭтоLinux() Тогда
		СтрокаЗапуска1с = "start /max """" """ + СтрокаЗапуска1с  + """ " + СтрокаЗапуска;
		
		ВыполнитьКомандуОСБезПоказаЧерногоОкна(СтрокаЗапуска1с, 0);
	Иначе
		СтрокаЗапуска = СтрокаЗапуска1с + " " + СтрокаЗапуска + " &";
		ФайловаяСистемаКлиент.ЗапуститьПрограмму(СтрокаЗапуска);
	КонецЕсли;
	
	УстановитьКоннектТестовыйКлиент(); 
	
КонецПроцедуры

#КонецОбласти

#Область ОкнаКлиентаТестирования

// Активное окно из тестовое приложение.
// 
// Возвращаемое значение:
//  ТестируемоеОкноКлиентскогоПриложения -
&НаКлиенте
Функция АктивноеОкноИзТестовоеПриложение()
	
	Возврат ТестовоеПриложение.ПолучитьАктивноеОкно();
	
КонецФункции

// Результат открытия окна по навигационной ссылке.
// 
// Параметры:
//  НавигационнаяСсылка - Строка - Навигационная ссылка
// 
// Возвращаемое значение:
//  Структура - Результат открытия окна по навигационной ссылке:
// * ТекущееОкно - Неопределено, ТестируемоеОкноКлиентскогоПриложения - 
// * ТекущаяФорма - Неопределено, ТестируемаяФорма - 
// * Успешно - Булево - 
&НаКлиенте
Функция РезультатОткрытияОкнаПоНавигационнойСсылке(НавигационнаяСсылка)
	
	РезультатОткрытия = Новый Структура;
	РезультатОткрытия.Вставить("ТекущееОкно",  Неопределено);
	РезультатОткрытия.Вставить("ТекущаяФорма", Неопределено);
	РезультатОткрытия.Вставить("Успешно",      Истина);
	
	ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Открываем ссылку %1'"), НавигационнаяСсылка));
	
	Попытка
	
		ЗакрытьВсеОкнаКлиентаТестирования();
		
		ГлавноеОкно = ГлавноеОкноТестируемого();
		ТекущееОкно = АктивноеОкноИзТестовоеПриложение();
		ГлавноеОкно.ВыполнитьКоманду(НавигационнаяСсылка);

		ВыполнитьОжиданиеСменыОкна(ТекущееОкно);
		
		РезультатОткрытия.ТекущееОкно = АктивноеОкноИзТестовоеПриложение();
		РезультатОткрытия.ТекущаяФорма = РеальнаяФормаИзОкна(РезультатОткрытия.ТекущееОкно);
	
	Исключение
		
		РезультатОткрытия.Успешно = Ложь;
		
	КонецПопытки;
	
	Возврат РезультатОткрытия;
	
КонецФункции 

// Закрыть все окна клиента тестирования.
// 
// Параметры:
//  ОкноИсключение - Неопределено, ТестируемоеОкноКлиентскогоПриложения - 
//  ФормаОкнаИсключение - Неопределено, ТестируемаяФорма - 
//  ПытатьсяНажатьДругиеКнопки - Булево - 
//  СимволАстериксСчитатьДругимОкном - Булево - 
&НаКлиенте
Процедура ЗакрытьВсеОкнаКлиентаТестирования(ОкноИсключение = Неопределено, ФормаОкнаИсключение = Неопределено, ПытатьсяНажатьДругиеКнопки = Истина, СимволАстериксСчитатьДругимОкном = Истина)
	
	ТекущееОкно = АктивноеОкноИзТестовоеПриложение();
	Счетчик = 0;
	Пока ЭтоОкноДлительнойОперации(ТекущееОкно) Цикл
		ВыполнитьБездействие(1);
		ТекущееОкно = АктивноеОкноИзТестовоеПриложение();
		Счетчик = Счетчик + 1;
		Если Счетчик > 100 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ПолучилосьЗакрытьВсеМодальныеДиалоги = Ложь;
	
	Для Счетчик = 1 По 5 Цикл
		БылНайденМодальныйДиалог = Ложь;
		ЗакрытьМодальныйДиалогЕслиОнЕсть(БылНайденМодальныйДиалог);
		Если НЕ БылНайденМодальныйДиалог Тогда
			ПолучилосьЗакрытьВсеМодальныеДиалоги = Истина;
			Прервать;
		Иначе
			ВыполнитьБездействие(1);
		КонецЕсли;
	КонецЦикла;

	Если НЕ ПолучилосьЗакрытьВсеМодальныеДиалоги Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не получилось закрыть модальный диалог.'"));
	КонецЕсли;
	
	КоличествоПопытокЗакрытияОкон = 1;
	
	Для Сч = 1 По КоличествоПопытокЗакрытияОкон Цикл
		
		БылаПопыткаЗакрытияОкон = Ложь;
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("БылаПопыткаЗакрытияОкон",           БылаПопыткаЗакрытияОкон);
		ДопПараметры.Вставить("ОкноИсключение",                    ОкноИсключение);
		ДопПараметры.Вставить("ФормаОкнаИсключение",               ФормаОкнаИсключение);
		ДопПараметры.Вставить("СимволАстериксСчитатьДругимОкном",  СимволАстериксСчитатьДругимОкном);
		ДопПараметры.Вставить("ПаузаПослеЗакрытияОкна",            1);
		ВыполнитьЗакрытиеОткрытыхОкон(ДопПараметры);
		
		БылаПопыткаЗакрытияОкон = ДопПараметры.БылаПопыткаЗакрытияОкон;
		Если НЕ БылаПопыткаЗакрытияОкон Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ТекущееОкно        = АктивноеОкноИзТестовоеПриложение();
	ЭтоОкноНадоЗакрыть = ЭтоОкноНадоЗакрыть(ТекущееОкно, ОкноИсключение, СимволАстериксСчитатьДругимОкном);
	Если ЭтоОкноНадоЗакрыть Тогда

		Попытка
			ФормаОкна = ТекущееОкно.НайтиОбъект(Тип("ТестируемаяФорма"));
			ФормаОкна.ПерейтиКСледующемуЭлементу();
		Исключение
			Возврат;
		КонецПопытки;
		
		Попытка
			ФормаОкна.ВыполнитьВыборИзСписка(0);
		Исключение 
			Возврат;
		КонецПопытки;
		
		Для Сч = 1 По КоличествоПопытокЗакрытияОкон Цикл
			
			БылаПопыткаЗакрытияОкон = Ложь;
			ДопПараметры.Вставить("БылаПопыткаЗакрытияОкон",           БылаПопыткаЗакрытияОкон);
			ДопПараметры.Вставить("ОкноИсключение",                    ОкноИсключение);
			ДопПараметры.Вставить("ФормаОкнаИсключение",               ФормаОкнаИсключение);
			ДопПараметры.Вставить("СимволАстериксСчитатьДругимОкном",  Истина);
			ДопПараметры.Вставить("ПаузаПослеЗакрытияОкна",            3);
			
			ВыполнитьЗакрытиеОткрытыхОкон(ДопПараметры);
			
			БылаПопыткаЗакрытияОкон = ДопПараметры.БылаПопыткаЗакрытияОкон;
			Если НЕ БылаПопыткаЗакрытияОкон Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	ТекОкно = АктивноеОкноИзТестовоеПриложение();
	ЭтоОкноНадоЗакрыть = ЭтоОкноНадоЗакрыть(ТекОкно, ОкноИсключение, СимволАстериксСчитатьДругимОкном);
	
	Если ЭтоОкноНадоЗакрыть Тогда
		
				Если ПытатьсяНажатьДругиеКнопки Тогда
			Если НЕ ПолучилосьЗакрытьОкноЧерезДругиеКнопки(ТекОкно) Тогда
				ВызватьИсключение НСтр("ru = 'Не получилось закрыть все окна.'");
			Иначе
				ЗакрытьВсеОкнаКлиентаТестирования(ОкноИсключение, ФормаОкнаИсключение, Ложь);
			КонецЕсли;
		Иначе	
			ВызватьИсключение НСтр("ru = 'Не получилось закрыть все окна.'");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗакрытиеОткрытыхОкон(ДопПараметры) 
	
	БылаПопыткаЗакрытияОкон = ДопПараметры.БылаПопыткаЗакрытияОкон;
	ОкноИсключение                    = ДопПараметры.ОкноИсключение;
	ФормаОкнаИсключение               = ДопПараметры.ФормаОкнаИсключение;
	СимволАстериксСчитатьДругимОкном  = ДопПараметры.СимволАстериксСчитатьДругимОкном;
	ПаузаПослеЗакрытияОкна            = ДопПараметры.ПаузаПослеЗакрытияОкна;
	
	Попытка
		ОкнаПриложения = ТестовоеПриложение.НайтиОбъекты(Тип("ТестируемоеОкноКлиентскогоПриложения"));
	Исключение
		Возврат;
	КонецПопытки;
	
	ПроблемныеОкна = Новый Массив;
	ПроблемныеОкна2 = Новый Массив;
	
	Для Счетчик = 0 По ОкнаПриложения.Количество()-1 Цикл
		НадоПродолжить = Ложь;
		
		ОкноПриложение = ОкнаПриложения[ОкнаПриложения.Количество() - 1 - Счетчик];
	
		Если ОкноПриложение.Основное Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОкноПриложение.НачальнаяСтраница Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			ФормаОкна = ОкноПриложение.НайтиОбъект(Тип("ТестируемаяФорма"));
		Исключение
			ФормаОкна = Неопределено;
		КонецПопытки;
		
		Если ОкноИсключение <> Неопределено И ОкноПриложение.Заголовок = ОкноИсключение.Заголовок Тогда
			НадоПродолжить = Истина;
		КонецЕсли;
		
		Если НЕ НадоПродолжить И ОкноИсключение <> Неопределено И НЕ СимволАстериксСчитатьДругимОкном Тогда
			Если Прав(ОкноПриложение.Заголовок, 1) = "*" Тогда
				СтрокаДляПроверки = Лев(ОкноПриложение.Заголовок, СтрДлина(ОкноПриложение.Заголовок) - 2);
				Если СтрокаДляПроверки = ОкноИсключение.Заголовок Тогда
					НадоПродолжить = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НадоПродолжить И ФормаОкнаИсключение <> Неопределено Тогда
			Если ФормаОкна <> Неопределено И ФормаОкнаИсключение.ИмяФормы <> ФормаОкна.ИмяФормы Тогда
				НадоПродолжить = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если НадоПродолжить Тогда
			Продолжить;
		КонецЕсли;
		
		Если ФормаОкна <> Неопределено Тогда
			НРег_ИмяФормы = НРег(ФормаОкна.ИмяФормы);
			Если НРег_ИмяФормы = НРег("ОбщаяФорма.Вопрос") Тогда
			ИначеЕсли НРег_ИмяФормы = НРег("Обработка.РезультатыОбновленияПрограммы.Форма.ОтложенноеОбновлениеНеЗавершено") Тогда
				ТекстСообщения = НСтр("ru = 'Не выполнены дополнительные процедуры обработки данных.'");
				ВызватьИсключение ТекстСообщения;
			ИначеЕсли НРег_ИмяФормы = НРег("Обработка.РезультатыОбновленияПрограммы.Форма.ИндикацияХодаОбновленияИБ") Тогда
				ТекстСообщения = НСтр("ru = 'Обнаружено окно обновления конфигурации.'");
				ВызватьИсключение ТекстСообщения;
			ИначеЕсли НРег_ИмяФормы = НРег("Обработка.РезультатыОбновленияПрограммы.Форма.СообщениеОНеудачномОбновлении") Тогда
				ТекстСообщения = НСтр("ru = 'Обнаружено окно c сообщением о неудачном обновлением конфигурации.'");
				ВызватьИсключение ТекстСообщения;
			ИначеЕсли НРег_ИмяФормы = НРег("Обработка.РезультатыОбновленияПрограммы.Форма.СообщениеОНеудачномОбновлении") Тогда
				КнопкаПродолжить = ФормаОкна.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,"ПродолжитьРаботуНаТекущейВерсии");
				Попытка
					БылаПопыткаЗакрытияОкон = Истина;
					КнопкаПродолжить.Нажать();
					ВыполнитьБездействие(1);
				Исключение
					ТекстСообщения = НСтр("ru = 'Обнаружено окно перехода на новую версию программы 1С:Предприятие.'");
					ВызватьИсключение ТекстСообщения;
				КонецПопытки;
			ИначеЕсли НРег_ИмяФормы = НРег("ОбщаяФорма.РегиональныеНастройки") Тогда 
				КнопкаОК = ФормаОкна.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,"ОК");
				Попытка
					БылаПопыткаЗакрытияОкон = Истина;
					КнопкаОК.Нажать();
				Исключение
					ТекстСообщения = НСтр("ru = 'Не удалось нажать <ОК> в окне региональных настроек.'");
					ВызватьИсключение ТекстСообщения;
				КонецПопытки;
				Если ФормаОкна.ОжидатьЗакрытие() Тогда
					Продолжить;
				Иначе
					ТекстСообщения = НСтр("ru = 'Не удалось дождаться закрытия окна региональных настроек'");
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли; 
		
		Попытка
			
			БылаПопыткаЗакрытияОкон = Истина;
			ОкноПриложение.Закрыть();
			
		Исключение
			ПроблемныеОкна.Добавить(ОкноПриложение);
			ТекстСообщения = НСтр("ru = 'Не удалось закрыть окно %1'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ОкноПриложение.Заголовок); 
		КонецПопытки;
		
		ВыполнитьБездействие(ПаузаПослеЗакрытияОкна); 
		
		ЗакрытьМодальныйДиалогЕслиОнЕсть();
		
	КонецЦикла;
	
	ОкноПриложение = Неопределено;
	//попробуем закрыть проблемные окна еще раз
	Для Каждого ОкноПриложение Из ПроблемныеОкна Цикл
		Попытка
			БылаПопыткаЗакрытияОкон = Истина;
			ОкноПриложение.Закрыть();
		Исключение
			ПроблемныеОкна2.Добавить(ОкноПриложение); 
			ТекстСообщения = НСтр("ru = 'Не удалось закрыть повторно окно %1'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ОкноПриложение.Заголовок); 
		КонецПопытки;
		
		ВыполнитьБездействие(ПаузаПослеЗакрытияОкна);
		ЗакрытьМодальныйДиалогЕслиОнЕсть();//диалог мог появиться при закрытии окна.
	КонецЦикла;
	
	ОкноПриложение = Неопределено;
	//попробуем закрыть проблемные окна еще раз
	Для Каждого ОкноПриложение Из ПроблемныеОкна2 Цикл
		Попытка
			НашлиКнопкуОтмена = Ложь;
			КнопкаОтмена = ОкноПриложение.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),"Отмена*");	
			Если КнопкаОтмена <> Неопределено Тогда
				Попытка
					БылаПопыткаЗакрытияОкон = Истина;
					КнопкаОтмена.Нажать();
					НашлиКнопкуОтмена = Истина;
				Исключение 
					НашлиКнопкуОтмена = Ложь;
				КонецПопытки;
			КонецЕсли;
			
			Если НЕ НашлиКнопкуОтмена Тогда
				БылаПопыткаЗакрытияОкон = Истина;
				ОкноПриложение.Закрыть();
			КонецЕсли;
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось закрыть повторно окно %1'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ОкноПриложение.Заголовок); 
		КонецПопытки;
		
		ВыполнитьБездействие(ПаузаПослеЗакрытияОкна);
		ЗакрытьМодальныйДиалогЕслиОнЕсть();//диалог мог появиться при закрытии окна.
	КонецЦикла;
	
	Если БылаПопыткаЗакрытияОкон Тогда
		Попытка
			ТекОкно = АктивноеОкноИзТестовоеПриложение();
			НадоВызватьSleep = Истина;
			Если ОкноИсключение <> Неопределено И ТекОкно.Заголовок = ОкноИсключение.Заголовок Тогда
				НадоВызватьSleep = Ложь;
			КонецЕсли;
			
			Если НадоВызватьSleep Тогда
				ВыполнитьБездействие(ПаузаПослеЗакрытияОкна);
			КонецЕсли;
		Исключение
			НадоВызватьSleep = Ложь;
		КонецПопытки;
	КонецЕсли;
	
	ДопПараметры.Вставить("БылаПопыткаЗакрытияОкон", БылаПопыткаЗакрытияОкон);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучилосьЗакрытьОкноЧерезДругиеКнопки(ТекОкно)
	
	КнопкиОтмена = Новый Массив;
	Если КнопкиОтмена.Количество() = 0 Тогда
		ДополнитьМассивИзДругогоМассива(КнопкиОтмена, ТекОкно.НайтиОбъекты(Тип("ТестируемаяКнопкаФормы"),"Отмена"));
	КонецЕсли;
	Если КнопкиОтмена.Количество() = 0 Тогда
		ДополнитьМассивИзДругогоМассива(КнопкиОтмена, ТекОкно.НайтиОбъекты(Тип("ТестируемаяКнопкаФормы"),"Отменить расчет"));
	КонецЕсли;
	Если КнопкиОтмена.Количество() = 0 Тогда
		ДополнитьМассивИзДругогоМассива(КнопкиОтмена, ТекОкно.НайтиОбъекты(Тип("ТестируемаяКнопкаФормы"),"Отменить*"));
	КонецЕсли;
	Если КнопкиОтмена.Количество() = 0 Тогда
		ДополнитьМассивИзДругогоМассива(КнопкиОтмена, ТекОкно.НайтиОбъекты(Тип("ТестируемаяКнопкаФормы"),"Да"));
	КонецЕсли;
	Если КнопкиОтмена.Количество() = 0 Тогда
		ДополнитьМассивИзДругогоМассива(КнопкиОтмена, ТекОкно.НайтиОбъекты(Тип("ТестируемаяКнопкаФормы"),"Нет"));
	КонецЕсли;
	Если КнопкиОтмена.Количество() = 0 Тогда
		ДополнитьМассивИзДругогоМассива(КнопкиОтмена, ТекОкно.НайтиОбъекты(Тип("ТестируемаяКнопкаФормы"),"Напомнить позже"));
	КонецЕсли;
	Если КнопкиОтмена.Количество() = 0 Тогда
		ДополнитьМассивИзДругогоМассива(КнопкиОтмена, ТекОкно.НайтиОбъекты(Тип("ТестируемаяКнопкаФормы"),"Показать позже"));
	КонецЕсли;
	
	БылаНажатаКнопка = Ложь;
	Для Каждого ТекКнопка Из КнопкиОтмена Цикл
		Попытка
			ТекКнопка.Нажать();
			БылаНажатаКнопка = Истина;
			Прервать;
		Исключение
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	
	ВыполнитьБездействие(2);
	
	ТекОкно = ТестовоеПриложение.НайтиОбъект(Тип("ТестируемоеОкноКлиентскогоПриложения"), ТекОкно.Заголовок);
	Если ТекОкно = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ЗакрытьМодальныйДиалогЕслиОнЕсть(БылНайденМодальныйДиалог = Ложь)
	
	ТекОкно = АктивноеОкноИзТестовоеПриложение();
	Счетчик = 0;
	Пока ЭтоОкноДлительнойОперации(ТекОкно) Цикл
		ВыполнитьБездействие(1);
		ТекОкно = АктивноеОкноИзТестовоеПриложение();
		Счетчик = Счетчик + 1;
		Если Счетчик > 100 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	БылНайденМодальныйДиалог = Ложь;
	НужноеОкно = Неопределено;
	
	ОкнаПриложения = ТестовоеПриложение.НайтиОбъекты(Тип("ТестируемоеОкноКлиентскогоПриложения"));
	Для Каждого ОкноПриложения Из ОкнаПриложения Цикл
		Если ЭтоМодальныйДиалог(ОкноПриложения) Тогда
			НужноеОкно = ОкноПриложения; // ТестируемоеОкноКлиентскогоПриложения
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НужноеОкно = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	БылНайденМодальныйДиалог = Истина;
	
	Попытка
		ЭлементыДиалога = НужноеОкно.НайтиОбъекты();
	Исключение
		Возврат;
	КонецПопытки;
	
	КнопкиДиалога = Новый Массив;
	ПоляДиалога = Новый Массив;
	
	Для Каждого Элем Из ЭлементыДиалога Цикл
		Если ТипЗнч(Элем) = Тип("ТестируемаяКнопкаФормы") ИЛИ ТипЗнч(Элем) = Тип("ТестируемаяКнопкаКомандногоИнтерфейса") Тогда
			КнопкиДиалога.Добавить(Элем);
		ИначеЕсли ТипЗнч(Элем) = Тип("ТестируемаяГруппаФормы") Тогда
			Продолжить;
		ИначеЕсли ТипЗнч(Элем) = Тип("ТестируемаяФорма") Тогда
			Продолжить;
		Иначе	
			ПоляДиалога.Добавить(Элем);
		КонецЕсли;
	КонецЦикла;
	
	СчетчикПолейДиалога = 0;
	Для Каждого ТекПоле Из ПоляДиалога Цикл // ТестируемоеПолеФормы
		
		СчетчикПолейДиалога = СчетчикПолейДиалога + 1;
		ТекстЗаголовка = ТекПоле.ТекстЗаголовка;
		
		Если НЕ ЗначениеЗаполнено(ТекстЗаголовка) Тогда
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
	Попытка
		МассивКнопокОтмена = НужноеОкно.НайтиОбъекты(Тип("ТестируемаяКнопкаФормы"),"Отмена*");
	Исключение
		МассивКнопокОтмена = Новый Массив;
	КонецПопытки;
	
	Для Каждого Кнопка Из МассивКнопокОтмена Цикл
		
		Попытка
			Кнопка.Нажать();
			Возврат;
		Исключение
		КонецПопытки;
		
	КонецЦикла;

	Попытка
		МассивКнопок = НужноеОкно.НайтиОбъекты(Тип("ТестируемаяКнопкаФормы"));
	Исключение
		МассивКнопок = Новый Массив;
	КонецПопытки;
	
	Для Каждого Кнопка Из МассивКнопок Цикл
		Если НРег(Кнопка.ТекстЗаголовка) = "нет" Тогда
			
			Попытка
				Кнопка.Нажать();
			Исключение
				Продолжить;
			КонецПопытки;
			
			Возврат;
		ИначеЕсли НРег(Кнопка.ТекстЗаголовка) = "no" Тогда
			Попытка
				Кнопка.Нажать();
			Исключение
				Продолжить;
			КонецПопытки;
			
			Возврат;
		ИначеЕсли НРег(Кнопка.ТекстЗаголовка) = "отмена" Тогда
			Попытка
				Кнопка.Нажать();
			Исключение 
				Продолжить;
			КонецПопытки;
			
			Возврат;
		ИначеЕсли ВРег(Кнопка.ТекстЗаголовка) = "OK" Тогда
			Попытка
				Кнопка.Нажать();
			Исключение
				Продолжить;
			КонецПопытки;
			
			Возврат;
		ИначеЕсли НРег(Кнопка.ТекстЗаголовка) = "закрыть" Тогда
			Попытка
				Кнопка.Нажать();
			Исключение
				Продолжить;
			КонецПопытки;
			
			Возврат;

		ИначеЕсли Найти(НРег(Кнопка.ТекстЗаголовка), "отменить") > 0 Тогда
			Попытка
				Кнопка.Нажать();
			Исключение
				Продолжить;
			КонецПопытки;
			
			Возврат;

		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Выполнить ожидание смены окна.
// 
// Параметры:
//  СтароеОкно - ТестируемоеОкноКлиентскогоПриложения - Старое окно
//
&НаКлиенте
Процедура ВыполнитьОжиданиеСменыОкна(СтароеОкно)
	
	БылаСменаОкна = Ложь;
	
	Для Сч = 1 По 60 Цикл
		АктивноеОкно = ТестовоеПриложение.ПолучитьАктивноеОкно(); // ТестируемоеОкноКлиентскогоПриложения
		Если АктивноеОкно.Заголовок <> СтароеОкно.Заголовок Тогда
			БылаСменаОкна = Истина;
			Прервать;
		КонецЕсли;
		
		ВыполнитьБездействие(1);
		
	КонецЦикла;
	
	Если НЕ БылаСменаОкна Тогда
		ВызватьИсключение НСтр("ru = 'Не получилось дождаться смены окна.'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция РеальнаяФормаИзОкна(ТекОкно)
	
	ТекущаяФорма = ФормаИзОкна(ТекОкно);
	
	Если ТекущаяФорма = Неопределено Или ЭтоФормаДлительнойОперации(ТекущаяФорма) Тогда
		
		Для Сч = 1 По 5 Цикл
			
			Попытка
				ТекОкно = АктивноеОкноИзТестовоеПриложение();
				ТекущаяФорма = ФормаИзОкна(ТекОкно);
				Если ТекущаяФорма <> Неопределено И НЕ ЭтоФормаДлительнойОперации(ТекущаяФорма) Тогда
					Прервать;
				КонецЕсли;
				Если ТекОкно.Основное Тогда
					Возврат ТекущаяФорма;
				КонецЕсли;
			Исключение
				Продолжить;
			КонецПопытки;
			
			ВыполнитьБездействие(1);
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТекущаяФорма;
	
КонецФункции

&НаКлиенте
Функция ФормаИзОкна(ТекущееОкно)
	
	Возврат ТекущееОкно.НайтиОбъект(Тип("ТестируемаяФорма"));
	
КонецФункции

#Область ОпределениеТипаОкна

&НаКлиенте
Функция ЭтоОкноДлительнойОперации(ТекОкно)
	
	Попытка
		Если ТекОкно.Заголовок = НСтр("ru = 'Пожалуйста, подождите...'") Тогда
			Возврат Истина;
		КонецЕсли;
		
		ТекФорма = ТекОкно.НайтиОбъект(Тип("ТестируемаяФорма"));
		
		Если ТекФорма <> Неопределено И ЭтоФормаДлительнойОперации(ТекФорма) Тогда
			Возврат Истина;
		КонецЕсли;
		
		Возврат Ложь;
		
	Исключение
		
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Функция ЭтоФормаДлительнойОперации(ТекФорма)
	
	Если ТекФорма.ИмяФормы = "ОбщаяФорма.ДлительнаяОперация" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция ГлавноеОкноТестируемого()
	
	ГлавноеОкноТестируемого = Неопределено;
	КлиентскиеОкнаТестируемогоПриложения = ТестовоеПриложение.ПолучитьПодчиненныеОбъекты();
	Для Каждого ТестируемоеОкно Из КлиентскиеОкнаТестируемогоПриложения Цикл
		Если ТестируемоеОкно.Основное Тогда
			ГлавноеОкноТестируемого = ТестируемоеОкно;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ГлавноеОкноТестируемого;
	
КонецФункции

&НаКлиенте
Функция ЭтоМодальныйДиалог(ОкноПриложения) Экспорт
	
	Если КешПроверенныхОконНаМодальность[ОкноПриложения.Заголовок] = Ложь Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЭтоЗаголовокОкнаМодальногоДиалога(ОкноПриложения.Заголовок) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ОкноПриложения.Основное Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		ФормаОкна = ОкноПриложения.НайтиОбъект(Тип("ТестируемаяФорма"));
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Если ФормаОкна = Неопределено Тогда
		Если ЗначениеЗаполнено(ОкноПриложения.Заголовок) Тогда
			КешПроверенныхОконНаМодальность.Вставить(ОкноПриложения.Заголовок, Ложь);
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	Если Лев(НРег(ФормаОкна.ТекстЗаголовка), 9) = НРег("Свойства:") И ФормаОкна.ИмяФормы = "" Тогда
		// Это форма "Настройка формы"
		Если ЗначениеЗаполнено(ОкноПриложения.Заголовок) Тогда
			КешПроверенныхОконНаМодальность.Вставить(ОкноПриложения.Заголовок, Ложь);
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	Если ФормаОкна.ИмяФормы = "" Тогда
		Возврат Истина;
	КонецЕсли;
	Если ФормаОкна.ИмяФормы = "MessageBox" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НРег(Прав(ФормаОкна.ИмяФормы,13)) = НРег(".ДиалогОтмены") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОкноПриложения.Заголовок) Тогда
		КешПроверенныхОконНаМодальность.Вставить(ОкноПриложения.Заголовок, Ложь);
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции 

#КонецОбласти

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоLinux()
	
	Значение = Ложь;
	СисИнфо = Новый СистемнаяИнформация;
	Если СисИнфо.ТипПлатформы = ТипПлатформы.Linux_x86 
		ИЛИ СисИнфо.ТипПлатформы = ТипПлатформы.Linux_x86_64
		ИЛИ СисИнфо.ТипПлатформы = ТипПлатформы.MacOS_x86
		ИЛИ СисИнфо.ТипПлатформы = ТипПлатформы.MacOS_x86_64 Тогда 
		Значение = Истина;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

&НаКлиенте
Функция ВыполнитьКомандуОСБезПоказаЧерногоОкна(Знач ТекстКоманды, ЖдатьОкончания = -1)
	
	ТекстКоманды = СтрЗаменить(ТекстКоманды, "%", "%%");
		
	Если ЭтоLinux() Тогда
		
		ФайловаяСистемаКлиент.ЗапуститьПрограмму(ТекстКоманды);
		Возврат 0;
		
	КонецЕсли;
	
	ИмяВременногоФайлаКоманды = ПолучитьИмяВременногоФайла("bat");
	
	// эти две строки нужны для записи файла без BOM - начало
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайлаКоманды, КодировкаТекста.ANSI, , Ложь); 
	ЗаписьТекста.Закрыть();
	// эти две строки нужны для записи файла без BOM - окончание
	
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайлаКоманды, КодировкаТекста.UTF8, , Истина); 
	ЗаписьТекста.ЗаписатьСтроку("chcp 65001"); 
	ЗаписьТекста.ЗаписатьСтроку(ТекстКоманды); 
	ЗаписьТекста.Закрыть();
	
	Если ЯдроВиндоус = Неопределено Тогда
		ЯдроВиндоус = ЯдроВиндоус();
		// Далее переменная ЯдроВиндоус будет закэширована, чтобы не создавать ComObject каждый раз
	КонецЕсли; 
	Рез = ЯдроВиндоус.Run("""" + ИмяВременногоФайлаКоманды + """", 0, ЖдатьОкончания);
	
	Если ЖдатьОкончания = -1 Тогда
		Попытка
			УдалитьФайлы(ИмяВременногоФайлаКоманды);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции

&НаКлиенте
Процедура УстановитьКоннектТестовыйКлиент()
	
	МаксДата = ОбщегоНазначенияКлиент.ДатаСеанса() + ТаймаутЗапускаКлиентаТестирования;
	Пока Истина Цикл
		
		Если ОбщегоНазначенияКлиент.ДатаСеанса() > МаксДата Тогда
			
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Не получилось подключить Тестовый клиент. Прерывание по таймауту <%1>'"), ТаймаутЗапускаКлиентаТестирования);
			
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли; 
		
		СоединениеУстановлено = Ложь;
		Попытка
			ТестовоеПриложение.УстановитьСоединение();
			ГлавноеОкноТестируемого = ГлавноеОкноТестируемого();
			СоединениеУстановлено = Истина;
		Исключение
		КонецПопытки;
		
		Если СоединениеУстановлено Тогда
			Если РежимОткрытия = "НастройкиПодключения" Тогда
				ТекстОповещения = НСтр("ru = 'Подключение установлено.'");
				ЗакрытьПослеУспешногоПодключения();
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
		ВыполнитьБездействие(1);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьБездействие(КолСекунд)
	
	Если ТестовоеПриложение <> Неопределено Тогда
		
		Попытка
			ТестовоеПриложение.НайтиОбъект(Тип("ТестируемоеОкноКлиентскогоПриложения"), 
			Строка(Новый УникальныйИдентификатор),, КолСекунд);
			Возврат;
		Исключение
			
		КонецПопытки;
		
	КонецЕсли;
	
	Попытка
		Если ЭтоLinux() Тогда
			Команда = "ping -i " + Формат(КолСекунд, "ЧГ=; ЧН=0") + " 127.0.0.1 -c 2 > /dev/null";
			ФайловаяСистемаКлиент.ЗапуститьПрограмму(Команда);
		Иначе
			Команда = "ping 127.0.0.1 -n " + Формат(КолСекунд + 1, "ЧГ=; ЧН=0"); 
			ВыполнитьКомандуОСБезПоказаЧерногоОкна(Команда);
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(("Sleep:%1"), ОписаниеОшибки()));
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Функция ЯдроВиндоус()
	
	Если ЯдроВиндоус = Неопределено Тогда
		Попытка
			ЯдроВиндоус = Новый COMОбъект("WScript.Shell");
		Исключение 
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Не удалось подключить COM объект %1'"), "<WScript.Shell>");
		КонецПопытки;
	КонецЕсли;
	
	Возврат ЯдроВиндоус;
	
КонецФункции 

&НаКлиенте
Функция ЭтоОкноНадоЗакрыть(ТекОкно, ОкноИсключение, СимволАстериксСчитатьДругимОкном)
	
	ЭтоОкноНадоЗакрыть = Ложь;
	
	Попытка
		Если НЕ (ТекОкно.НачальнаяСтраница ИЛИ ТекОкно.Основное) Тогда
			Если ОкноИсключение = Неопределено 
				ИЛИ (ОкноИсключение <> Неопределено И ТекОкно.Заголовок <> ОкноИсключение.Заголовок) Тогда
				
					ЭтоОкноНадоЗакрыть = Истина;
					
					Если ОкноИсключение <> Неопределено И НЕ СимволАстериксСчитатьДругимОкном Тогда
						Если Прав(ТекОкно.Заголовок, 1) = "*" Тогда
							СтрокаДляПроверки = Лев(ТекОкно.Заголовок, СтрДлина(ТекОкно.Заголовок) - 2);
							Если СтрокаДляПроверки = ОкноИсключение.Заголовок Тогда
								ЭтоОкноНадоЗакрыть = Ложь;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Исключение
		Возврат ЭтоОкноНадоЗакрыть;
	КонецПопытки;
	
	Возврат ЭтоОкноНадоЗакрыть;
	
КонецФункции

&НаКлиенте
Процедура ДополнитьМассивИзДругогоМассива(Получатель, Источник)
	
	Для Каждого Элем Из Источник Цикл
		Если Получатель.Найти(Элем) = Неопределено Тогда
			Получатель.Добавить(Элем);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоЗаголовокОкнаМодальногоДиалога(ЗаголовокОкна)
	
	Если ЗаголовокОкна = "1С:Предприятие"
		Или ЗаголовокОкна = "1C:Enterprise"  Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция ЭтоФормаОшибки(ТестируемаяФорма)
	
	Возврат ТестируемаяФорма.ИмяФормы = "ErrorWindow";
	
КонецФункции

&НаКлиенте
Процедура ЗакрытьПослеУспешногоПодключения()
	
	Закрыть(СтруктураВозврата());
	
КонецПроцедуры 

&НаКлиенте
Функция СтруктураВозврата()

	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("НомерПортаКлиентТестирования",        НомерПортаКлиентТестирования);
	СтруктураВозврата.Вставить("СтрокаСоединенияКлиентаТестирования", СтрокаСоединенияКлиентаТестирования);
	СтруктураВозврата.Вставить("ТаймаутЗапускаКлиентаТестирования",   ТаймаутЗапускаКлиентаТестирования);
	СтруктураВозврата.Вставить("СоединениеУстановлено",               СоединениеУстановлено);
	СтруктураВозврата.Вставить("ТекстОповещения",                     ТекстОповещения);
	
	Возврат СтруктураВозврата;

КонецФункции

#Область ПолучениеСкриншотов

&НаКлиенте
Процедура ПолучитьСкриншотыПоОбъектам()
	
	ИмяКаталогаСкриншоты = ИмяКаталога  
	                       + ДемонстрационныеСценарииКлиентСервер.ИмяКаталогаВыгрузкиСкриншоты() 
	                       + ПолучитьРазделительПути();
	
	Если Не ДемонстрационныеСценарииКлиентСервер.КаталогНаДискеСуществует(ИмяКаталогаСкриншоты) Тогда
		СоздатьКаталог(ИмяКаталогаСкриншоты);
	КонецЕсли;
	
	ДанныеПрогресса = ДанныеПрогрессаПолучениеСкриншотов();
	
	Для Каждого СтрокаТаблицы Из НавигационныеСсылки Цикл
		
		ПолучитьСкриншотыПоСтрокеНавигационныеСсылки(СтрокаТаблицы, Неопределено, ДанныеПрогресса);
		
	КонецЦикла;
	
	Закрыть(ДанныеСкриншотовКВозврату());
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеПрогрессаПолучениеСкриншотов()
	
	ДанныеПрогресса = НовыйДанныеДляВыводаПрогресса();
	
	ДанныеПрогресса.КОбработке = НавигационныеСсылки.Количество();
	
	Возврат ДанныеПрогресса;
	
КонецФункции

&НаСервере
Функция ДанныеСкриншотовКВозврату()
	
	ДанныеСкриншотовКВозврату = Новый Структура;
	
	ДанныеСкриншотовКВозврату.Вставить("Успешно", Истина);
	ДанныеСкриншотовКВозврату.Вставить("АдресДанныеСкриншотов", ПоместитьВоВременноеХранилище(РеквизитФормыВЗначение("НавигационныеСсылки"), ИдентификаторФормыВладельца));
	
	Возврат ДанныеСкриншотовКВозврату;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьСкриншотыПоСтрокеНавигационныеСсылки(СтрокаТаблицы, ДанныеОткрытойФормы, ДанныеПрогресса)
	
	Если СтрокаТаблицы.ТипСсылки = "СсылкиНаОбъекты" 
		И  Не ЗначениеЗаполнено(СтрокаТаблицы.СсылкаНаОбъект) Тогда
		
		СтрокаТаблицы.Ошибки.Добавить(НСтр("ru = 'Не удалось определить открываемые объект по навигационной ссылке'"));
		Возврат;
		
	КонецЕсли;
	
	ДанныеОткрытойФормы = ДанныеОткрываемойФормы(СтрокаТаблицы.НавигационнаяСсылка);
	Если Не ДанныеОткрытойФормы.Успешно Тогда
		СтрокаТаблицы.Ошибки.Добавить(НСтр("ru = 'Не удалось открыть форму по навигационной ссылке'"));
		Возврат;
	КонецЕсли;
	
	Если СтрокаТаблицы.ТипСсылки = "СсылкиНаОбъекты" Тогда
		Пауза = 1;
	Иначе
		Пауза = 4;
	КонецЕсли;
	
	Если ДанныеОткрытойФормы.ДанныеСтраниц.Количество() > 0  Тогда
		
		Для Каждого ДанныеСтраницы Из ДанныеОткрытойФормы.ДанныеСтраниц Цикл
			
			ИдентификаторСкриншота = ИдентификаторСкриншота(СтрокаТаблицы);
			
			ДобавитьПолученныйСкриншотВТаблицу(РезультатПолученияСкриншота(ДанныеОткрытойФормы, ДанныеСтраницы.Имя, ИдентификаторСкриншота, Пауза), СтрокаТаблицы);
			
		КонецЦикла;
		
	Иначе
		
		ИдентификаторСкриншота = ИдентификаторСкриншота(СтрокаТаблицы);
		
		ДобавитьПолученныйСкриншотВТаблицу(РезультатПолученияСкриншота(ДанныеОткрытойФормы, "", ИдентификаторСкриншота, Пауза), СтрокаТаблицы);
		
	КонецЕсли;
	
	ВывестиПрогрессОбработки(ДанныеПрогресса);
	
КонецПроцедуры 

&НаКлиенте
Функция ИдентификаторСкриншота(СтрокаТаблицы)  
	
	Возврат СтрШаблон("%1_%2", СтрокаТаблицы.ХэшСсылки, Строка(СтрокаТаблицы.Скриншоты.Количество() + 1));
	
КонецФункции

&НаКлиенте
Процедура ДобавитьПолученныйСкриншотВТаблицу(РезультатПолученияСкриншота, СтрокаТаблицы)
	
	Если РезультатПолученияСкриншота.Успешно Тогда 
		
		НоваяСтрока = СтрокаТаблицы.Скриншоты.Добавить();
		НоваяСтрока.ДвоичныеДанные          = РезультатПолученияСкриншота.ДвоичныеДанные;
		НоваяСтрока.ИмяФайла                = РезультатПолученияСкриншота.ИмяФайла;
		НоваяСтрока.ИдентификаторСкриншота  = РезультатПолученияСкриншота.ИдентификаторСкриншота; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция РезультатПолученияСкриншота(ДанныеОткрытойФормы, ИмяСтраницы, ИдентификаторСкриншота, Пауза)
	
	РезультатПолучения = Новый Структура;
	РезультатПолучения.Вставить("ДвоичныеДанные",          Неопределено);
	РезультатПолучения.Вставить("Успешно",                 Ложь);
	РезультатПолучения.Вставить("ИмяФайла",                "");
	РезультатПолучения.Вставить("ИдентификаторСкриншота",  "");
	
	Если Не ПустаяСтрока(ИмяСтраницы) Тогда
		
		СтраницаДляОтображения = ДанныеОткрытойФормы.ТекущаяФорма.НайтиОбъект(Тип("ТестируемаяГруппаФормы"),, ИмяСтраницы);
		
		Если СтраницаДляОтображения <> Неопределено
			И СтраницаДляОтображения.ТекущаяВидимость()
			И СтраницаДляОтображения.ТекущаяДоступность() Тогда
			
			СтраницаДляОтображения.Активизировать();
			ВыполнитьБездействие(Пауза);
			
			СделатьСкриншотКомпонента(РезультатПолучения);
			
		КонецЕсли;
		
	Иначе
		
		СделатьСкриншотКомпонента(РезультатПолучения);
		
	КонецЕсли;
	
	Если РезультатПолучения.Успешно Тогда
		
		ИмяФайлаСкриншота = ИмяКаталогаСкриншоты + ИдентификаторСкриншота + ".png";
		РезультатПолучения.ДвоичныеДанные.Записать(ИмяФайлаСкриншота);
		РезультатПолучения.ИмяФайла                = ИмяФайлаСкриншота;
		РезультатПолучения.ИдентификаторСкриншота  = ИдентификаторСкриншота;
		
	КонецЕсли;
	
	Возврат РезультатПолучения;
	
КонецФункции

#КонецОбласти

#Область РаботаСВнешнейКомпонентойДляСнятияСкриншотов

&НаКлиенте
Процедура ВыполнитьПодключениеВнешнейКомпоненты(ДополнительныеПараметры = Неопределено)
	
	ИмяВнешнегоМодуля = ДемонстрационныеСценарииКлиентСервер.ИдентификаторВнешнейКомпонентыПолученияСкриншотов(); 
	
	ПараметрыПодключения = ВнешниеКомпонентыКлиент.ПараметрыПодключения();
	ПараметрыПодключения.Изолированно           = Ложь;
	ПараметрыПодключения.ОбновлятьАвтоматически = Ложь;
	ПараметрыПодключения.ПредложитьЗагрузить    = Ложь;
	
	Оповещение = Новый ОписаниеОповещения(
	                 "КомпонентаПодключенияСкриншотовПослеПодключения", ЭтотОбъект, ДополнительныеПараметры);
	
	ВнешниеКомпонентыКлиент.ПодключитьКомпоненту(Оповещение, ИмяВнешнегоМодуля, , ПараметрыПодключения);
	
КонецПроцедуры

&НаКлиенте
Процедура КомпонентаПодключенияСкриншотовПослеПодключения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Подключено Тогда
		
		ТекстПрефикс = НСтр("ru = 'Версия компоненты получения скриншотов'") + ": ";
		ВерсияКомпоненты = СтрЗаменить(Результат.ПодключаемыйМодуль.Версия, Символ(0), "");
		АдресГиперссылки = "https://github.com/lintest/VanessaExt/releases";
		
		ТекстКомпонентаПодключена = "%1 <a style= 'Color: ГиперссылкаЦвет ' href=""%2"">%3</a>.";
		
		ТекстВерсияКомпоненты = СтроковыеФункцииКлиент.ФорматированнаяСтрока(ТекстКомпонентаПодключена, ТекстПрефикс, АдресГиперссылки, ВерсияКомпоненты); 
		
		Элементы.ДекорацияВерсияКомпоненты.Заголовок = ТекстВерсияКомпоненты; 
		
		ВнешняяКомпонентаДляСкриншотов = Результат.ПодключаемыйМодуль;
		
		Если РежимОткрытия = "ПолучениеСкриншотов" Тогда
			
			ПодключитьКлиентТестирования();
			
			Если СоединениеУстановлено Тогда
			
				ПодключитьОбработчикОжидания("ПолучитьСкриншотыПоОбъектам", 1, Истина);
			
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось подключить компоненту получению скриншотов по причине: %1'"), Результат.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СделатьСкриншотКомпонента(РезультатПолучения)
	
	ДвоичныеДанные = ВнешняяКомпонентаДляСкриншотов.ПолучитьСнимокПроцесса(PIDТекущегоКлиентаТестирования);
	
	РезультатПолучения.Вставить("ДвоичныеДанные", Неопределено);
	РезультатПолучения.Вставить("Успешно",        Ложь);
	РезультатПолучения.Вставить("ИмяФайла",       "");
	
	Если ДвоичныеДанные <> Неопределено Тогда
		
		РезультатПолучения.ДвоичныеДанные = ДвоичныеДанные;
		РезультатПолучения.Успешно        = Истина;
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьPidДескрипторОкнаКлиентаТестирования(ДанныеЗапускаКлиентаТестирования, ДопПараметры = Неопределено)
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли; 
	
	ДопПараметры.Вставить("ДанныеЗапускаКлиентаТестирования",ДанныеЗапускаКлиентаТестирования);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолученКлиентТестирования", ЭтотОбъект, ДопПараметры);
	ВнешняяКомпонентаДляСкриншотов.НачатьВызовНайтиКлиентТестирования(ОписаниеОповещения ,ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученКлиентТестирования(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт 
	
	СтруктураСвойствПроцесса = ПрочитатьСтрокуJSON(РезультатВызова);
	Если СтруктураСвойствПроцесса <> Неопределено Тогда
		ДескрипторОсновногоОкнаТекущегоКлиентаТестирования = СтруктураСвойствПроцесса.Window;
		PIDТекущегоКлиентаТестирования                     = СтруктураСвойствПроцесса.ProcessId;
	КонецЕсли;
	
	ДанныеЗапускаКлиентаТестирования = ДополнительныеПараметры.ДанныеЗапускаКлиентаТестирования;
	ДанныеЗапускаКлиентаТестирования.PIDКлиентаТестирования = PIDТекущегоКлиентаТестирования;

	Если ДескрипторОсновногоОкнаТекущегоКлиентаТестирования <> Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения("ПустойОбработчикОповещения", ЭтотОбъект, 1);
		ВнешняяКомпонентаДляСкриншотов.НачатьВызовАктивироватьОкно(Оповещение, ДескрипторОсновногоОкнаТекущегоКлиентаТестирования);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПустойОбработчикОповещения(Результат, ДополнительныеПараметры, ДополнительныеДанные) Экспорт
	
	Возврат;
	
КонецПроцедуры 

&НаКлиенте
Функция ДанныеЗапускаКлиентаТестирования()
	
	ДанныеЗапускаКлиентаТестирования = Новый Структура;
	ДанныеЗапускаКлиентаТестирования.Вставить("ПортЗапускаТестКлиента", НомерПортаКлиентТестирования);
	ДанныеЗапускаКлиентаТестирования.Вставить("PIDКлиентаТестирования", Неопределено);
	
	Возврат ДанныеЗапускаКлиентаТестирования;
	
КонецФункции

&НаКлиенте
Функция ПрочитатьСтрокуJSON(ТекстJSON)
	
	Если ПустаяСтрока(ТекстJSON) Тогда
		Возврат Неопределено;
	КонецЕсли;

	ПоляДаты = Новый Массив;
	ПоляДаты.Добавить("CreationDate");
	ПоляДаты.Добавить("date");
		
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(ТекстJSON);
	Возврат ПрочитатьJSON(ЧтениеJSON, , ПоляДаты);
	
КонецФункции

#КонецОбласти

#КонецОбласти 

#КонецЕсли
