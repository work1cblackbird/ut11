#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнициализироватьДанныеФормы();
	
	УправлениеДоступностью(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПриложениеЗапущеноКакМенеджерТестирования = ПриложениеЗапущеноКакМенеджерТестирования();
	
	ИнициализироватьДанныеФормыНаКлиенте();
	
	СформироватьИнформациюОНастройкахКлиентаТестирования();
	
	УправлениеДоступностью(ЭтотОбъект);
	УстановитьНавигаторПомощника();
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	БылИзмененОтборКомпоновщика = Настройки.Получить("ОтборКомпоновщикаИзменен");
	Если БылИзмененОтборКомпоновщика <> Неопределено 
		И  БылИзмененОтборКомпоновщика Тогда
		
		Настройки.Вставить("НастройкиОтбораКомпоновкиДанных", Новый ХранилищеЗначения(КомпоновщикНастроек.Настройки));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Настройки.Удалить("ОтборКомпоновщикаИзменен");
	
	СохраненныеНастройкиОтбора = Настройки.Получить("НастройкиОтбораКомпоновкиДанных");
	Если ТипЗнч(СохраненныеНастройкиОтбора) = Тип("ХранилищеЗначения") Тогда
		
		НастройкиОтбора = СохраненныеНастройкиОтбора.Получить();
		
		КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОтбора);
		КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность); 
		
	КонецЕсли;
	
	Настройки.Удалить("НастройкиОтбораКомпоновкиДанных");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы 

&НаКлиенте
Процедура ДекорацияНавигаторПомощникаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОчиститьСообщения();
	
	СтандартнаяОбработка = Ложь;
	
	Отказ = Ложь;
	
	ПроверитьВозможностьВыполненияПереходаПоСтраницам("Далее", Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПерейтиНаНачальнуюСтраницу" Тогда
		
		ПерейтиНаСтраницуПомощника("СтраницаВыгрузкаСтартовая");
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПерейтиНаСтраницуОтбор" Тогда 
		
		ПерейтиНаСтраницуПомощника("СтраницаВыгрузкаОтбор");
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПерейтиНаСтраницуРезультатОтбора" Тогда
		
		ПерейтиНаСтраницуПомощника("СтраницаЧтоБудетВыгружено"); 
		
	КонецЕсли;
	
КонецПроцедуры

#Область СтраницаВыгрузкаСтартовая 

&НаКлиенте
Процедура СпособВыгрузкиБезЗаменыСсылокПриИзменении(Элемент)
	
	УправлениеДоступностью(ЭтотОбъект);
	ОпределитьЗаголовокКнопкиДалее();
	УстановитьНавигаторПомощника();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособВыгрузкиЗаменаСсылокПриИзменении(Элемент)
	
	УправлениеДоступностью(ЭтотОбъект);
	ОпределитьЗаголовокКнопкиДалее();
	УстановитьНавигаторПомощника();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИнформацияОНастройкахКлиентаТестированияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПерейтиКНастройкамКлиентаТестирования" Тогда
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("НомерПортаКлиентТестирования",        НомерПортаКлиентТестирования);
		ПараметрыОткрытия.Вставить("СтрокаСоединенияКлиентаТестирования", СтрокаСоединенияКлиентаТестирования);
		ПараметрыОткрытия.Вставить("ТаймаутЗапускаКлиентаТестирования",   ТаймаутЗапускаКлиентаТестирования);
		ПараметрыОткрытия.Вставить("РежимОткрытия",                       "НастройкиПодключения");
		
		ОповещениеПослеЗакрытияНастройкиКлиентаТестирования = Новый ОписаниеОповещения("ПослеЗакрытияНастройкиКлиентаТестирования",ЭтотОбъект);
		
		ОткрытьФорму("Обработка.ВыгрузкаОписанийПроцессов.Форма.РаботаСКлиентомТестирования", ПараметрыОткрытия, ЭтотОбъект, ,,, ОповещениеПослеЗакрытияНастройкиКлиентаТестирования, 
		             РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияТребуетсяМенеджерТестированияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПерезапуститьПриложениеСКлючомМенеджерТестирования" Тогда
		
		ЗавершитьРаботуСистемы(Истина, Истина, "/TESTMANAGER");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолнаяВыгрузкаПриИзменении(Элемент)
	
	ОпределитьЗаголовокКнопкиДалее();
	УстановитьНавигаторПомощника();
	
КонецПроцедуры

&НаКлиенте
Процедура ЧастичнаяВыгрузкаПриИзменении(Элемент)
	
	ОпределитьЗаголовокКнопкиДалее();
	УстановитьНавигаторПомощника();
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогФайловВыгрузкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДемонстрационныеСценарииКлиент.ОбработкаНачалоВыбораФайла(ЭтотОбъект, 
	                                                          РежимДиалогаВыбораФайла.ВыборКаталога, 
	                                                          "КаталогВыгрузки",
	                                                          Истина, 
	                                                          Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогВыгрузкиПриИзменении(Элемент)
	
	УправлениеДоступностью(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаВыгружено

&НаКлиенте
Процедура ДекорацияРезультатыВыгрузкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПерейтиВКаталогВыгрузки" Тогда
		
		Если Не ДемонстрационныеСценарииКлиентСервер.КаталогНаДискеСуществует(КаталогВыгрузки) Тогда
			Возврат;
		КонецЕсли;
		
		ФайловаяСистемаКлиент.ОткрытьПроводник(КаталогВыгрузки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКомпоновщикНастроекНастройкиОтбор

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиОтборПриИзменении(Элемент)
	
	ОтборКомпоновщикаИзменен           = Истина;
	ТребуетсяПолучениеЧтоВыгружаем     = Истина;
	ТребуетсяПолучениеДереваСкриншотов = Истина;
	ТребуетсяВыгрузка                  = Истина;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСценарииКВыгрузке

&НаКлиенте
Процедура СценарииКВыгрузкеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДанныеСтроки = СценарииКВыгрузке.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ДанныеСтроки.Сценарий);
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Далее(Команда)
	
	ВыполнитьПереходПоСтраницам(Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	ВыполнитьПереходПоСтраницам( Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияДанныхФормы

&НаСервере
Процедура ИнициализироватьДанныеФормы()
	
	ИнициализироватьКомпоновщикОтбораОписаний(Неопределено); 
	
	Элементы.СтраницыПомощникВыгрузки.ТекущаяСтраница = Элементы.СтраницаВыгрузкаСтартовая;
	Элементы.СтраницыПодвал.ТекущаяСтраница           = Элементы.СтраницаКнопкиДалее;
	
	ИнформацияОПоставке = ДемонстрационныеСценарии.ПредставлениеТекущаяВерсияКонфигурации();
	
	ТребуетсяПолучениеЧтоВыгружаем = Истина;
	ТребуетсяВыгрузка              = Истина;
	
КонецПроцедуры 

&НаКлиенте
Процедура ИнициализироватьДанныеФормыНаКлиенте()
	
	Если ТаймаутЗапускаКлиентаТестирования = 0 Тогда
		 ТаймаутЗапускаКлиентаТестирования = 300;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьКомпоновщикОтбораОписаний(НастройкаКомпоновки)
	
	СхемаКомпоновки = Обработки.ВыгрузкаОписанийПроцессов.ПолучитьМакет("ОтборОписанийПроцессов");
	АдресСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновки,УникальныйИдентификатор);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
	
	Если НастройкаКомпоновки = Неопределено Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновки.НастройкиПоУмолчанию);
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(НастройкаКомпоновки);
		КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПриложениеЗапущеноКакМенеджерТестирования()
	
	ТипТестируемоеПриложение = Неопределено;
	
	Попытка
		ТипТестируемоеПриложение = Тип("ТестируемоеПриложение");
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат ТипТестируемоеПриложение <> Неопределено;
	
КонецФункции

#КонецОбласти

#Область НастройкиКлиентаТестирования

&НаКлиенте
Процедура СформироватьИнформациюОНастройкахКлиентаТестирования()
	
	ТекстКоманды = "ПерейтиКНастройкамКлиентаТестирования";
	
	Если КлиентТестированияПодключен Тогда
		
		ТекстОписания = СтроковыеФункцииКлиент.ФорматированнаяСтрока("<a href=""%1"">%2</a>",
		                                                       ТекстКоманды,
		                                                       НСтр("ru = 'Клиент тестирования подключен'"));
		
	Иначе
		
		ТекстОписания = СтроковыеФункцииКлиент.ФорматированнаяСтрока("<a href=""%1"">%2</a>",
		                                                       ТекстКоманды,
		                                                       НСтр("ru = 'Требуется настроить и подключить клиент тестирования'"));
		
	КонецЕсли;
	
	Элементы.ДекорацияИнформацияОНастройкахКлиентаТестирования.Заголовок = ТекстОписания;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеЗакрытияНастройкиКлиентаТестирования(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено
		Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	НомерПортаКлиентТестирования        = Результат.НомерПортаКлиентТестирования;
	СтрокаСоединенияКлиентаТестирования = Результат.СтрокаСоединенияКлиентаТестирования;
	ТаймаутЗапускаКлиентаТестирования   = Результат.ТаймаутЗапускаКлиентаТестирования;
	КлиентТестированияПодключен         = Результат.СоединениеУстановлено;
	
	Если Не ПустаяСтрока(Результат.ТекстОповещения) Тогда 
		
		ЗаголовокОповещения = НСтр("ru = 'Клиент тестирования'");
		ПоказатьОповещениеПользователя(ЗаголовокОповещения, , Результат.ТекстОповещения);
		
	КонецЕсли;
	
	СформироватьИнформациюОНастройкахКлиентаТестирования()

КонецПроцедуры

#КонецОбласти

#Область УправлениеЭлементамиФормы

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеДоступностью(Форма)
	
	УправлениеДоступностьюНастройкиКлиентаТестирования(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеДоступностьюНастройкиКлиентаТестирования(Форма)

	Элементы = Форма.Элементы;
	
	Если Форма.СпособВыгрузки = 1 Тогда
		
		Элементы.СтраницыПодключениеКлиентаТестирования.Видимость = Истина;
		
		Если Форма.ПриложениеЗапущеноКакМенеджерТестирования Тогда
			
			Элементы.СтраницыПодключениеКлиентаТестирования.ТекущаяСтраница = Элементы.СтраницаНастройкиКлиентаТестирования;
			
		Иначе
			
			Элементы.СтраницыПодключениеКлиентаТестирования.ТекущаяСтраница = Элементы.СтраницаТребуетсяМенеджерТестирования;
			
		КонецЕсли;
		
	Иначе
		
		Элементы.СтраницыПодключениеКлиентаТестирования.Видимость = Ложь;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьНавигаторПомощника()
	
	СтрокаСтартоваяСтраница    = ДемонстрационныеСценарииКлиентСервер.ЗаголовокЧастиНавигатораПомощника(НСтр("ru = 'Настройка выгрузки'"), 
	                                                               "ПерейтиНаНачальнуюСтраницу",
	                                                               Истина,
	                                                               Элементы.СтраницыПомощникВыгрузки.ТекущаяСтраница = Элементы.СтраницаВыгрузкаСтартовая);
	
	СтрокаОтбор                = ДемонстрационныеСценарииКлиентСервер.ЗаголовокЧастиНавигатораПомощника(НСтр("ru = 'Отбор'"), 
	                                                               "ПерейтиНаСтраницуОтбор",
	                                                               ПолнаяИлиЧастичнаяВыгрузка = 1,
	                                                               Элементы.СтраницыПомощникВыгрузки.ТекущаяСтраница = Элементы.СтраницаВыгрузкаОтбор);
	
	СтрокаРезультатОтбора     = ДемонстрационныеСценарииКлиентСервер.ЗаголовокЧастиНавигатораПомощника(НСтр("ru = 'Результат отбора'"), 
	                                                               "ПерейтиНаСтраницуРезультатОтбора",
	                                                               ТребуетсяПолучениеЧтоВыгружаем = Ложь,
	                                                               Элементы.СтраницыПомощникВыгрузки.ТекущаяСтраница = Элементы.СтраницаЧтоБудетВыгружено);
	
	СтрокаРезультатВыгрузки     = ДемонстрационныеСценарииКлиентСервер.ЗаголовокЧастиНавигатораПомощника(НСтр("ru = 'Результат выгрузки'"), 
	                                                               "ПерейтиНаСтраницуРезультатВыгрузки",
	                                                               ТребуетсяВыгрузка = Ложь,
	                                                               Элементы.СтраницыПомощникВыгрузки.ТекущаяСтраница = Элементы.СтраницаЧтоБудетВыгружено);
	
	СтрокаМеждуСтраницами = " -> ";
	
	МассивФорматированнаяСтрока = Новый Массив;
	МассивФорматированнаяСтрока.Добавить(СтрокаСтартоваяСтраница);
	
	Если  ПолнаяИлиЧастичнаяВыгрузка = 1 Тогда
		
		МассивФорматированнаяСтрока.Добавить(СтрокаМеждуСтраницами);
		МассивФорматированнаяСтрока.Добавить(СтрокаОтбор);
		МассивФорматированнаяСтрока.Добавить(СтрокаМеждуСтраницами);
		МассивФорматированнаяСтрока.Добавить(СтрокаРезультатОтбора);
		
	КонецЕсли;
	
	МассивФорматированнаяСтрока.Добавить(СтрокаМеждуСтраницами);
	МассивФорматированнаяСтрока.Добавить(СтрокаРезультатВыгрузки);
	
	Элементы.ДекорацияНавигаторПомощника.Заголовок = Новый ФорматированнаяСтрока(МассивФорматированнаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьЗаголовокКнопкиДалее()
	
	Если Элементы.СтраницыПомощникВыгрузки.ТекущаяСтраница = Элементы.СтраницаВыгрузкаСтартовая Тогда
		
		Если СпособВыгрузки = 0 
			И ПолнаяИлиЧастичнаяВыгрузка = 0 Тогда
			
			Элементы.Далее.Заголовок = НСтр("ru = 'Выгрузить'");
			
		Иначе
			
			Элементы.Далее.Заголовок = НСтр("ru = 'Далее >>'");
			
		КонецЕсли;
		
	ИначеЕсли Элементы.СтраницыПомощникВыгрузки.ТекущаяСтраница = Элементы.СтраницаЧтоБудетВыгружено Тогда 
		
		Если СпособВыгрузки = 0 Тогда
			
			Элементы.ДалееНазадДалее.Заголовок = НСтр("ru = 'Выгрузить'");
			
		Иначе
			
			Элементы.ДалееНазадДалее.Заголовок = НСтр("ru = 'Далее >>'");
			
		КонецЕсли; 
		
	Иначе
		
		Элементы.ДалееНазадДалее.Заголовок = НСтр("ru = 'Далее >>'");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьКнопкуПоУмолчаниюПодвал()

	Если Элементы.СтраницыПодвал.ТекущаяСтраница = Элементы.СтраницаКнопкиДалее Тогда
		
		Элементы.Далее.КнопкаПоУмолчанию = Истина;
		
	ИначеЕсли Элементы.СтраницыПодвал.ТекущаяСтраница = Элементы.СтраницаКнопкиГотово Тогда
		
		Элементы.ДалееГотово.КнопкаПоУмолчанию = Истина;
		
	ИначеЕсли Элементы.СтраницыПодвал.ТекущаяСтраница = Элементы.СтраницаКнопкиНазадДалее Тогда
		
		Элементы.ДалееНазадДалее.КнопкаПоУмолчанию = Истина;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПереходПоСтраницам

&НаКлиенте
Процедура ВыполнитьПереходПоСтраницам(Команда)
	
	ОчиститьСообщения();
	
	ИмяКоманды = Команда.Имя;
	Отказ      = Ложь;
	
	ПроверитьВозможностьВыполненияПереходаПоСтраницам(ИмяКоманды, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьНеобходимыеДействияПриПереходеПоСтраницам(ИмяКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНеобходимыеДействияПриПереходеПоСтраницам(ИмяКоманды)

	Если ИмяКоманды = "Далее" Тогда
		ПерейтиНаСледующуюСтраницу();
	Иначе
		ПерейтиНаПредыдущуюСтраницу();
	КонецЕсли;
	
	УстановитьНавигаторПомощника();

КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСледующуюСтраницу()
	
	Если Элементы.СтраницыПомощникВыгрузки.ТекущаяСтраница = Элементы.СтраницаВыгрузкаСтартовая Тогда
		
		Если ПолнаяИлиЧастичнаяВыгрузка = 1 Тогда
			
			ПерейтиНаСтраницуПомощника("СтраницаВыгрузкаОтбор"); 
			
		Иначе 
			
			ПерейтиНаСтраницуПомощника("СтраницаВыгружено");
			
		КонецЕсли;
		
	ИначеЕсли Элементы.СтраницыПомощникВыгрузки.ТекущаяСтраница = Элементы.СтраницаВыгрузкаОтбор Тогда
		
		ПерейтиНаСтраницуПомощника("СтраницаЧтоБудетВыгружено"); 
		
	ИначеЕсли Элементы.СтраницыПомощникВыгрузки.ТекущаяСтраница = Элементы.СтраницаЧтоБудетВыгружено Тогда
		
		ПерейтиНаСтраницуПомощника("СтраницаВыгружено");
		
	ИначеЕсли Элементы.СтраницыПомощникВыгрузки.ТекущаяСтраница = Элементы.СтраницаВыгружено Тогда
		
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаПредыдущуюСтраницу()

	Если Элементы.СтраницыПомощникВыгрузки.ТекущаяСтраница = Элементы.СтраницаВыгрузкаОтбор Тогда 
		
		ПерейтиНаСтраницуПомощника("СтраницаВыгрузкаСтартовая");
		
	ИначеЕсли Элементы.СтраницыПомощникВыгрузки.ТекущаяСтраница = Элементы.СтраницаЧтоБудетВыгружено Тогда
		
		ПерейтиНаСтраницуПомощника("СтраницаВыгрузкаОтбор");
		
	ИначеЕсли Элементы.СтраницыПомощникВыгрузки.ТекущаяСтраница = Элементы.СтраницаВыгружено Тогда
		
		Если ПолнаяИлиЧастичнаяВыгрузка = 1 Тогда
			
			ПерейтиНаСтраницуПомощника("СтраницаЧтоБудетВыгружено");
			
		Иначе 
			
			ПерейтиНаСтраницуПомощника("СтраницаВыгрузкаСтартовая");
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуПомощника(ИмяСтраницы)
	
	Если ИмяСтраницы = "СтраницаВыгрузкаСтартовая" Тогда
		
		ПерейтиНаСтраницуПомощникаСтартовая();
		
	ИначеЕсли ИмяСтраницы = "СтраницаВыгрузкаОтбор" Тогда
		
		ПерейтиНаСтраницуПомощникаОтбор();
		
	ИначеЕсли ИмяСтраницы = "СтраницаЧтоБудетВыгружено" Тогда
		
		Если ТребуетсяПолучениеЧтоВыгружаем Тогда 
			
			ВыполнитьПолучениеДанныхВыгружаемыхОписанийПроцессов();
			
		Иначе
			
			ПерейтиНаСтраницуПомощникаЧтоБудетВыгружено();
			
		КонецЕсли;
		
	ИначеЕсли ИмяСтраницы = "СтраницаВыгружено" Тогда
		
		Если ТребуетсяВыгрузка Тогда
			
			Если ТребуетсяПолучениеЧтоВыгружаем Тогда 
			
				ВыполнитьПолучениеДанныхВыгружаемыхОписанийПроцессов();
				
			Иначе
			
				НачатьВыгрузкуСценариевВКаталог();
			
			КонецЕсли;
			
		Иначе
			
			ПерейтиНаСтраницуВыгружено();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуПомощникаОтбор()
	
	Элементы.СтраницыПомощникВыгрузки.ТекущаяСтраница = Элементы.СтраницаВыгрузкаОтбор;
	Элементы.СтраницыПодвал.ТекущаяСтраница = Элементы.СтраницаКнопкиНазадДалее;
	
	УстановитьНавигаторПомощника();
	ОпределитьЗаголовокКнопкиДалее();
	ОпределитьКнопкуПоУмолчаниюПодвал();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуПомощникаСтартовая()
	
	Элементы.СтраницыПомощникВыгрузки.ТекущаяСтраница = Элементы.СтраницаВыгрузкаСтартовая;
	Элементы.СтраницыПодвал.ТекущаяСтраница           = Элементы.СтраницаКнопкиДалее;
	
	УстановитьНавигаторПомощника();
	ОпределитьЗаголовокКнопкиДалее();
	ОпределитьКнопкуПоУмолчаниюПодвал();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуПомощникаЧтоБудетВыгружено()
	
	Элементы.СтраницыПомощникВыгрузки.ТекущаяСтраница = Элементы.СтраницаЧтоБудетВыгружено;
	Элементы.СтраницыПодвал.ТекущаяСтраница           = Элементы.СтраницаКнопкиНазадДалее;
	
	УстановитьНавигаторПомощника();
	ОпределитьЗаголовокКнопкиДалее();
	ОпределитьКнопкуПоУмолчаниюПодвал();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуВыгружено()
	
	Элементы.СтраницыПомощникВыгрузки.ТекущаяСтраница = Элементы.СтраницаВыгружено;
	Элементы.СтраницыПодвал.ТекущаяСтраница           = Элементы.СтраницаКнопкиГотово;
	
	УстановитьНавигаторПомощника();
	ОпределитьКнопкуПоУмолчаниюПодвал();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВозможностьВыполненияПереходаПоСтраницам(ИмяКоманды, Отказ)

	Если Элементы.СтраницыПомощникВыгрузки.ТекущаяСтраница = Элементы.СтраницаВыгрузкаСтартовая
		И ИмяКоманды = "Далее" Тогда
		
		Если ПустаяСтрока(Поставщик) Тогда
			
			ТекстСообщения = НСтр("ru = 'Не указан поставщик конфигурации'");
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Поставщик",, Отказ);
			
		КонецЕсли;
		
		Если ПустаяСтрока(КаталогВыгрузки) Тогда
			
			ТекстСообщения = НСтр("ru = 'Не указан каталог выгрузки'");
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "КаталогВыгрузки",, Отказ);
			
		ИначеЕсли Не ДемонстрационныеСценарииКлиентСервер.КаталогНаДискеСуществует(КаталогВыгрузки) Тогда
			
			ТекстСообщения = НСтр("ru = 'Указанный каталог на диске не существует'");
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "КаталогВыгрузки",, Отказ);
			
		КонецЕсли;
		
		Если СпособВыгрузки = 1 Тогда
			
			Если Не ПриложениеЗапущеноКакМенеджерТестирования Тогда
				
				ТекстСообщения = НСтр("ru = 'Для выгрузки с заменой ссылок на объекты на скриншоты требуется, чтобы приложение было запущено как ""Менеджер тестирования""'");
				
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
				
			ИначеЕсли Не КлиентТестированияПодключен Тогда
				
				ТекстСообщения = НСтр("ru = 'Для выгрузки с заменой ссылок на объекты на скриншоты необходимо подключить ""Клиент тестирования""'");
				
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, ,, Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОтборВыгружаемыхСценариев

&НаКлиенте
Процедура ВыполнитьПолучениеДанныхВыгружаемыхОписанийПроцессов()
	
	СценарииКВыгрузке.ПолучитьЭлементы().Очистить();
	
	ДлительнаяОперация = ВыполнитьПолучениеДанныхВыгружаемыхОписанийПроцессовДлительнаяОперация(УникальныйИдентификатор);
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		ПолучениеДанныеВыгружаемыхОписанийПроцессовЗавершение(ДлительнаяОперация, ДополнительныеПараметры);
		
	ИначеЕсли ДлительнаяОперация.Статус = "Выполняется" Тогда
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		Если ПолнаяИлиЧастичнаяВыгрузка = 0 Тогда
			ТекстЗаголовка = НСтр("ru = 'Подготовка данных описаний процессов к выгрузке'");
		Иначе
			ТекстЗаголовка = НСтр("ru = 'Определение выгружаемых описаний процессов'");
		КонецЕсли;
		ПараметрыОжидания.Заголовок = ТекстЗаголовка;
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПолучениеДанныеВыгружаемыхОписанийПроцессовЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ВыполнитьПолучениеДанныхВыгружаемыхОписанийПроцессовДлительнаяОперация(УникальныйИдентификатор)
	
	ПараметрыФормирования = Новый Структура;
	ПараметрыФормирования.Вставить("НастройкиКомпоновщика",  КомпоновщикНастроек.ПолучитьНастройки());
	ПараметрыФормирования.Вставить("ЭтоПолнаяВыгрузка ",     ПолнаяИлиЧастичнаяВыгрузка = 0);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение данных выгружаемых описаний процессов'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне("Обработки.ВыгрузкаОписанийПроцессов.ПолучитьДанныеВыгружаемыхОписаний",
	                                                       ПараметрыФормирования, ПараметрыВыполнения);
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ПолучениеДанныеВыгружаемыхОписанийПроцессовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		ОбработатьПолученныеДанныеДляВыгрузки(Результат, ДополнительныеПараметры);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолученныеДанныеДляВыгрузки(Результат, ДополнительныеПараметры)

	Если Не ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда 
		Возврат;
	КонецЕсли;
	
	Если РезультатОбработкиПолученныхДанныхНаСервере(Результат) Тогда
		
		ТребуетсяПолучениеЧтоВыгружаем = Ложь;
		
		Если ПолнаяИлиЧастичнаяВыгрузка = 1 Тогда
			
			ПерейтиНаСтраницуПомощникаЧтоБудетВыгружено();
			
		Иначе
			
			НачатьВыгрузкуСценариевВКаталог();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РезультатОбработкиПолученныхДанныхНаСервере(РезультатВыполненияФоновогоЗадания) 
	
	РезультатПолученияДанных = ПолучитьИзВременногоХранилища(РезультатВыполненияФоновогоЗадания.АдресРезультата);
	
	Если РезультатПолученияДанных = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если РезультатПолученияДанных.Успешно Тогда
		
		Если РезультатПолученияДанных.ПодготовленныеДанные.ОписанияПроцессов <> Неопределено
			И ТипЗнч(РезультатПолученияДанных.ПодготовленныеДанные.ОписанияПроцессов) = Тип("ДеревоЗначений") Тогда
			
			ЗначениеВРеквизитФормы(РезультатПолученияДанных.ПодготовленныеДанные.ОписанияПроцессов, "СценарииКВыгрузке");
			
		КонецЕсли;
		
		Если РезультатПолученияДанных.ПодготовленныеДанные.Глоссарий <> Неопределено
			И ТипЗнч(РезультатПолученияДанных.ПодготовленныеДанные.Глоссарий) = Тип("ТаблицаЗначений") Тогда
			
			ЗначениеВРеквизитФормы(РезультатПолученияДанных.ПодготовленныеДанные.Глоссарий, "ГлоссарииКВыгрузке");
			
		КонецЕсли;
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
	
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ВыгрузкаВКаталог

&НаКлиенте
Процедура НачатьВыгрузкуСценариевВКаталог()
	
	Элементы.СтраницыВыгружаетсяВыгружено.ТекущаяСтраница = Элементы.СтраницаВыгружается;
	
	ПерейтиНаСтраницуВыгружено();
	
	ПодключитьОбработчикОжидания("ВыгрузитьОписанияПроцессовВКаталог", 2, Истина);
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыгрузитьОписанияПроцессовВКаталог()
	
	Если ТребуетсяПолучениеСкриншотов() Тогда 
		
		ПолучитьТребуемыеСкриншоты();
		
	Иначе
		
		УдалитьФайлы(КаталогВыгрузки,  ПолучитьМаскуВсеФайлыКлиента());
		ВыгрузитьОписанияПроцессов();
		
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Функция РезультатВыгрузкиНаСервере(ДанныеСкриншотов)
	
	РезультатВыгрузки = Новый Структура;
	РезультатВыгрузки.Вставить("ДанныеДляВыводаПрогресса", ДанныеВыгрузкиДляВыводаПрогресса());
	РезультатВыгрузки.Вставить("Успешно",                  Истина);
	РезультатВыгрузки.Вставить("ДанныеФайла",              Неопределено);
	РезультатВыгрузки.Вставить("ИмяФайла",                 "");
	РезультатВыгрузки.Вставить("СообщениеОбОшибке",        "");
	
	ИмяВременногоФайла  = ПолучитьИмяВременногоФайла();
	РазделительПути     = ПолучитьРазделительПутиСервера();
	МассивСтрокКаталога = СтрРазделить(ИмяВременногоФайла, РазделительПути);
	
	МассивСтрокКаталога.Удалить(МассивСтрокКаталога.Количество() - 1); 
	КаталогВыгрузкиНаСервере = СтрСоединить(МассивСтрокКаталога, РазделительПути);
	КаталогВыгрузкиНаСервере =  КаталогВыгрузкиНаСервере + РазделительПути + "DesriptionUnload" + РазделительПути;
	
	Попытка
		
		Если Не ДемонстрационныеСценарииКлиентСервер.КаталогНаДискеСуществует(КаталогВыгрузкиНаСервере) Тогда
			СоздатьКаталог(КаталогВыгрузкиНаСервере);
		Иначе
			УдалитьФайлы(КаталогВыгрузкиНаСервере, ПолучитьМаскуВсеФайлыСервера());
		КонецЕсли;
		
		Для Каждого СтрокаДереваФормы Из СценарииКВыгрузке.ПолучитьЭлементы() Цикл
			
			ИмяКаталогаОписанияПроцессов = КаталогВыгрузкиНаСервере 
			                               + ДемонстрационныеСценарииКлиентСервер.ИмяКаталогаВыгрузкиОписанияПроцессов()
			                               + РазделительПути;
			
			Если Не ДемонстрационныеСценарииКлиентСервер.КаталогНаДискеСуществует(ИмяКаталогаОписанияПроцессов) Тогда
				СоздатьКаталог(ИмяКаталогаОписанияПроцессов);
			КонецЕсли;
			
			ВыгрузитьСтрокуДереваОписанийВКаталог(СтрокаДереваФормы, ИмяКаталогаОписанияПроцессов, РезультатВыгрузки.ДанныеДляВыводаПрогресса, РазделительПути);
			
		КонецЦикла;
		
		Для Каждого СтрокаТаблицы Из ГлоссарииКВыгрузке Цикл
			
			ИмяКаталогаОписанияПроцессов = КаталогВыгрузкиНаСервере + ДемонстрационныеСценарииКлиентСервер.ИмяКаталогаГлоссария() + РазделительПути;
			
			Если Не ДемонстрационныеСценарииКлиентСервер.КаталогНаДискеСуществует(ИмяКаталогаОписанияПроцессов) Тогда
				СоздатьКаталог(ИмяКаталогаОписанияПроцессов);
			КонецЕсли;
			
			ВыгрузитьСтрокуТаблицыГлоссарияВКаталог(СтрокаТаблицы, ИмяКаталогаОписанияПроцессов, РезультатВыгрузки.ДанныеДляВыводаПрогресса, РазделительПути);
			
		КонецЦикла;
		
		ВыгрузитьВКаталогДанныеСкриншотов(ДанныеСкриншотов, КаталогВыгрузкиНаСервере);
		
		ВыгрузитьВКаталогОписаниеВыгрузки(КаталогВыгрузкиНаСервере);
		
		ТекущаяДата = ТекущаяДатаСеанса();
		
		ДатаВыгрузкиСтрокой = Формат(День(ТекущаяДата), "ЧГ=0") + Формат(Месяц(ТекущаяДата), "ЧГ=0") + Формат(Год(ТекущаяДата), "ЧГ=0");
		
		ИмяФайлаАрхива  = "UnloadDescrionsOfProcesses_" + ДатаВыгрузкиСтрокой + ".zip";
		ПолныйПутьАрхив = КаталогВыгрузки + ИмяФайлаАрхива;
		
		ЗаархивироватьСодержимоеКаталога(КаталогВыгрузкиНаСервере, ПолныйПутьАрхив);
		УдалитьФайлыВыгрузки(КаталогВыгрузкиНаСервере, ПолныйПутьАрхив);
	
	Исключение
		
		РезультатВыгрузки.Успешно           = Ложь;
		РезультатВыгрузки.СообщениеОбОшибке = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		УдалитьФайлыВыгрузки(КаталогВыгрузкиНаСервере, ПолныйПутьАрхив);
		
		Возврат РезультатВыгрузки;
	
	КонецПопытки;
	
	РезультатВыгрузки.ИмяФайла    = ИмяФайлаАрхива;
	РезультатВыгрузки.ДанныеФайла = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПолныйПутьАрхив), УникальныйИдентификатор);
	
	Возврат РезультатВыгрузки;
	
КонецФункции

&НаКлиенте
Процедура ПослеСохраненияВыгруженногоАрхива(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляВыводаПрогресса = ДополнительныеПараметры.ДанныеДляВыводаПрогресса;
	
	СтрокаКаталог = СтроковыеФункцииКлиент.ФорматированнаяСтрока("<a href=""%1"">%2</a>",
	                                                               "ПерейтиВКаталогВыгрузки",
	                                                               КаталогВыгрузки);
	
	СтрокаУспешно =  НСтр("ru = 'Данные успешно выгружены в каталог'");
	СтрокаКоличествоОписаний  =  СтрШаблон(НСтр("ru = 'Выгружено описаний процессов - %1'"), ДанныеДляВыводаПрогресса.ОписанийВыгружено);
	СтрокаКоличествоГлоссарий =  СтрШаблон(НСтр("ru = 'Выгружено элементов глоссария - %1'"), ДанныеДляВыводаПрогресса.ГлоссарийВыгружено);;
	
	СтрокаИтого = Новый ФорматированнаяСтрока(СтрокаУспешно, " ", СтрокаКаталог, 
	                                          Символы.ПС, СтрокаКоличествоОписаний,
	                                          Символы.ПС, СтрокаКоличествоГлоссарий);
	
	Элементы.ДекорацияРезультатыВыгрузки.Заголовок = СтрокаИтого;
	
	Элементы.СтраницыВыгружаетсяВыгружено.ТекущаяСтраница = Элементы.СтраницаВыгрузкаЗакончена;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОписанияПроцессов()
	
	ДанныеСкриншотов = ДанныеСкриншотовДляАрхивирования();
	РезультатВыгрузки = РезультатВыгрузкиНаСервере(ДанныеСкриншотов);
	
	Если РезультатВыгрузки.Успешно Тогда
		
		ИмяВыгруженногоАрхива = КаталогВыгрузки + РезультатВыгрузки.ИмяФайла;
		ПараметрыСохраненияФайла              = ФайловаяСистемаКлиент.ПараметрыСохраненияФайла();
		ПараметрыСохраненияФайла.Интерактивно = Ложь;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ДанныеДляВыводаПрогресса", РезультатВыгрузки.ДанныеДляВыводаПрогресса);
		ОписаниеОповещенияПослеСохраненияАрхива = Новый ОписаниеОповещения("ПослеСохраненияВыгруженногоАрхива", ЭтотОбъект, ДополнительныеПараметры);
		
		ФайловаяСистемаКлиент.СохранитьФайл(ОписаниеОповещенияПослеСохраненияАрхива, 
		                                    РезультатВыгрузки.ДанныеФайла, 
		                                    ИмяВыгруженногоАрхива, 
		                                    ПараметрыСохраненияФайла); 
		
	Иначе
		
		ВызватьИсключение РезультатВыгрузки.СообщениеОбОшибке;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Функция ДанныеСкриншотовДляАрхивирования()
	
	ДанныеСкриншотов = Новый Массив;
	
	ИмяКаталога = КаталогВыгрузки 
	              + ДемонстрационныеСценарииКлиентСервер.ИмяКаталогаВыгрузкиСкриншоты() 
	              + ПолучитьРазделительПутиКлиента();
	
	ФайлыВКаталоге = НайтиФайлы(ИмяКаталога, "*.png", Ложь);
	
	Для Каждого ИнформацияОФайле Из ФайлыВКаталоге Цикл
		
		ДанныеСкриншота = Новый Структура;
		ДанныеСкриншота.Вставить("ДвоичныеДанные",        Новый ДвоичныеДанные(ИнформацияОФайле.ПолноеИмя)); 
		ДанныеСкриншота.Вставить("ИмяФайла",              ИнформацияОФайле.Имя);
		
		ДанныеСкриншотов.Добавить(ДанныеСкриншота);
		
	КонецЦикла;
	
	УдалитьФайлы(КаталогВыгрузки, ПолучитьМаскуВсеФайлыКлиента());
	
	Возврат ДанныеСкриншотов;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаархивироватьСодержимоеКаталога(КаталогВыгрузкиНаСервере, ИмяАрхива)
	
	ЗаписьZipФайла = Новый ЗаписьZipФайла(ИмяАрхива); 
	
	ЗаписьZipФайла.Добавить(КаталогВыгрузкиНаСервере + "*", РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
	ЗаписьZipФайла.Записать();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьФайлыВыгрузки(КаталогВыгрузкиНаСервере, ИмяАрхива)
	
	ФайлыВКаталоге = НайтиФайлы(КаталогВыгрузкиНаСервере, ПолучитьМаскуВсеФайлыКлиента(), Ложь);
	
	Для Каждого ФайлВКаталоге Из ФайлыВКаталоге Цикл
		
		Если ФайлВКаталоге.ПолноеИмя = ИмяАрхива Тогда
			Продолжить;
		КонецЕсли;
		
		УдалитьФайлы(ФайлВКаталоге.ПолноеИмя);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьВКаталогДанныеСкриншотов(ДанныеСкриншотов, КаталогВыгрузкиНаСервере)
	
	РазделительПути = ПолучитьРазделительПутиСервера();
	
	ИмяКаталогаСкриншоты = КаталогВыгрузкиНаСервере 
	                       + ДемонстрационныеСценарииКлиентСервер.ИмяКаталогаВыгрузкиСкриншоты()
	                       + РазделительПути;
	
	Если Не ДемонстрационныеСценарииКлиентСервер.КаталогНаДискеСуществует(ИмяКаталогаСкриншоты) Тогда
		СоздатьКаталог(ИмяКаталогаСкриншоты);
	КонецЕсли;
	
	Для Каждого ДанныеСкриншота Из ДанныеСкриншотов Цикл
		
		ИмяФайла = ИмяКаталогаСкриншоты + ДанныеСкриншота.ИмяФайла;
		ДанныеСкриншота.ДвоичныеДанные.Записать(ИмяФайла);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьВКаталогОписаниеВыгрузки(КаталогВыгрузкиНаСервере)
	
	ТекстJSONОписаниеВыгрузки = ТекстJSONДанныеВыгрузки();
	
	ИмяФайла = КаталогВыгрузкиНаСервере + ДемонстрационныеСценарииКлиентСервер.ИмяФайлаОписаниеВыгрузки();
	
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла);
	ЗаписьТекста.Записать(ТекстJSONОписаниеВыгрузки);
	ЗаписьТекста.Закрыть();
	
КонецПроцедуры

&НаСервере
Функция ДанныеВыгрузкиДляВыводаПрогресса()

	ДанныеДляВыводаПрогресса = Новый Структура;
	ДанныеДляВыводаПрогресса.Вставить("КВыгрузке", 1);
	ДанныеДляВыводаПрогресса.Вставить("Выгружено", 0);
	ДанныеДляВыводаПрогресса.Вставить("ОписанийВыгружено", 0);
	ДанныеДляВыводаПрогресса.Вставить("ГлоссарийВыгружено", 0);
	
	Для Каждого СтрокаДереваФормы Из СценарииКВыгрузке.ПолучитьЭлементы() Цикл
		
		ОбработатьДанныеВыводаПрогрессаДляСтрокиДереваОписанийПроцесса(СтрокаДереваФормы, ДанныеДляВыводаПрогресса);
		
	КонецЦикла;
	
	ДанныеДляВыводаПрогресса.КВыгрузке = ДанныеДляВыводаПрогресса.КВыгрузке + ГлоссарииКВыгрузке.Количество();
	
	Возврат ДанныеДляВыводаПрогресса;
	
КонецФункции 

&НаСервере
Процедура ОбработатьДанныеВыводаПрогрессаДляСтрокиДереваОписанийПроцесса(СтрокаДереваФормы, ДанныеДляВыводаПрогресса)
	
	Если СтрокаДереваФормы.ОписанияСценария.Количество() > 0 Тогда
		
		ДанныеДляВыводаПрогресса.КВыгрузке = ДанныеДляВыводаПрогресса.КВыгрузке + 1;
		
	КонецЕсли;
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДереваФормы.ПолучитьЭлементы() Цикл
		
		ОбработатьДанныеВыводаПрогрессаДляСтрокиДереваОписанийПроцесса(ПодчиненнаяСтрока, ДанныеДляВыводаПрогресса)
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьСтрокуТаблицыГлоссарияВКаталог(СтрокаТаблицы, КаталогВыгрузки, ДанныеДляВыводаПрогресса, РазделительПути)
	
	КаталогЭтойСтроки = КаталогВыгрузки 
	                   + СтрокаТаблицы.УникальныйИдентификатор 
	                   + РазделительПути;
	
	Если Не ДемонстрационныеСценарииКлиентСервер.КаталогНаДискеСуществует(КаталогЭтойСтроки) Тогда
		
		СоздатьКаталог(КаталогЭтойСтроки);
		
	КонецЕсли;
	
	ВыгрузитьВКаталогДанныеРеквизитов(СтрокаТаблицы.РеквизитыГлоссария, КаталогЭтойСтроки, СтрокаТаблицы.УникальныйИдентификатор); 
	
	Для Каждого ДанныеФайла Из СтрокаТаблицы.ОписанияГлоссария Цикл
		
		ВыгрузитьВКаталогОписаниеНаЯзыке(ДанныеФайла, КаталогЭтойСтроки, СтрокаТаблицы.УникальныйИдентификатор);
		
	КонецЦикла; 
	
	ДанныеДляВыводаПрогресса.ГлоссарийВыгружено = ДанныеДляВыводаПрогресса.ГлоссарийВыгружено +1;
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьСтрокуДереваОписанийВКаталог(СтрокаДереваФормы, КаталогВыгрузки, ДанныеДляВыводаПрогресса, РазделительПути)
	
	НужноСоздаватьКаталог = Истина;
	
	СтрокаРодитель = СтрокаДереваФормы.ПолучитьРодителя();
	Если СтрокаРодитель <> Неопределено 
		И СтрокаРодитель.ПолныйКод = СтрокаДереваФормы.ПолныйКод Тогда
		
		НужноСоздаватьКаталог = Ложь;
		
	КонецЕсли;
	
	Если НужноСоздаватьКаталог Тогда
		
		КаталогЭтойСтроки = КаталогВыгрузки 
		                   + ДемонстрационныеСценарииКлиентСервер.ПолныйКодСтрокойДляИмениФайла(СтрокаДереваФормы.ПолныйКод)
		                   + "_"
		                   + СтрокаДереваФормы.ХешИдентификатора
		                   + РазделительПути;
		
	Иначе
		
		КаталогЭтойСтроки = КаталогВыгрузки;
		
	КонецЕсли;
		
	Если Не ДемонстрационныеСценарииКлиентСервер.КаталогНаДискеСуществует(КаталогЭтойСтроки) Тогда
		
		СоздатьКаталог(КаталогЭтойСтроки);
		
	КонецЕсли;
	
	ВыгрузитьВКаталогДанныеРеквизитов(СтрокаДереваФормы.РеквизитыСценария, КаталогЭтойСтроки, СтрокаДереваФормы.УникальныйИдентификатор);
	
	Для Каждого ДанныеФайла Из СтрокаДереваФормы.ОписанияСценария Цикл
		
		ВыгрузитьВКаталогОписаниеНаЯзыке(ДанныеФайла, КаталогЭтойСтроки, СтрокаДереваФормы.УникальныйИдентификатор);
		
	КонецЦикла;
	
	Если СтрокаДереваФормы.ОписанияСценария.Количество() > 0 Тогда
		
		ДанныеДляВыводаПрогресса.ОписанийВыгружено = ДанныеДляВыводаПрогресса.ОписанийВыгружено +1;
		
	КонецЕсли;
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДереваФормы.ПолучитьЭлементы() Цикл
		
		ВыгрузитьСтрокуДереваОписанийВКаталог(ПодчиненнаяСтрока, КаталогЭтойСтроки, ДанныеДляВыводаПрогресса, РазделительПути);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьВКаталогОписаниеНаЯзыке(ДанныеФайла,КаталогЭтойСтроки, УникальныйИдентификатор)
	
	ИмяФайла = КаталогЭтойСтроки + ДанныеФайла.КодЯзыка + "_" + УникальныйИдентификатор + ".html";
	
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла);
	ЗаписьТекста.Записать(ДанныеФайла.ТекстHTML);
	ЗаписьТекста.Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьВКаталогДанныеРеквизитов(РеквизитыСценария, КаталогЭтойСтроки, УникальныйИдентификатор)

	ИмяФайла = КаталогЭтойСтроки + "Requisites_" + УникальныйИдентификатор + ".json";
	
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла);
	ЗаписьТекста.Записать(РеквизитыСценария);
	ЗаписьТекста.Закрыть()

КонецПроцедуры

&НаСервере
Функция ТекстJSONДанныеВыгрузки()
	
	ЗаписьДанных = Новый ЗаписьJSON;
	ЗаписьДанных.УстановитьСтроку();
	
	ЗаписьДанных.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанных.ЗаписатьИмяСвойства("ConfigurationDescription");
	ЗаписьДанных.ЗаписатьЗначение(ИнформацияОПоставке);
	
	ЗаписьДанных.ЗаписатьИмяСвойства("Supplier");
	ЗаписьДанных.ЗаписатьЗначение(Поставщик);
	
	ЗаписьДанных.ЗаписатьИмяСвойства("Partial");
	ЗаписьДанных.ЗаписатьЗначение(ПолнаяИлиЧастичнаяВыгрузка = 1); 
	
	ЗаписьДанных.ЗаписатьКонецОбъекта();
	
	ТекстJSON = ЗаписьДанных.Закрыть();
	
	Возврат ТекстJSON;
	
КонецФункции

#КонецОбласти 

#Область ПолучениеСкриншотов

&НаКлиенте
Функция ТребуетсяПолучениеСкриншотов()
	
	Возврат СпособВыгрузки = 1;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьТребуемыеСкриншоты()
	
	УдалитьФайлы(КаталогВыгрузки, ПолучитьМаскуВсеФайлыКлиента());
	
	ДемонстрационныеСценарииКлиентСервер.КаталогНаДискеСуществует(КаталогВыгрузки);
	
	ВыполнитьПодготовкуДанныхОбъектовДляПолученияСкриншотов()
	
КонецПроцедуры
	
&НаКлиенте
Процедура ВыполнитьПодготовкуДанныхОбъектовДляПолученияСкриншотов()
	
	ОбъектыСкриншоты.Очистить();
	
	ДлительнаяОперация = ВыполнитьПодготовкуДанныхОбъектовДляПолученияСкриншотовДлительнаяОперация(УникальныйИдентификатор);
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		ПодготовкаДанныхОбъектовДляПолученияСкриншотовЗавершение(ДлительнаяОперация, ДополнительныеПараметры);
		
	ИначеЕсли ДлительнаяОперация.Статус = "Выполняется" Тогда
		
		ТекстЗаголовка = НСтр("ru = 'Разбор выгружаемых описаний для формирования скриншотов'");
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.Заголовок = ТекстЗаголовка;
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПодготовкаДанныхОбъектовДляПолученияСкриншотовЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ВыполнитьПодготовкуДанныхОбъектовДляПолученияСкриншотовДлительнаяОперация(УникальныйИдентификатор)
	
	ПараметрыФормирования = Новый Структура;
	ПараметрыФормирования.Вставить("СценарииКВыгрузке", ДанныеОписанийСценариевДляПолученияНавигационныхСсылок());
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение навигационных ссылок для формирования скриншотов при выгрузке'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне("Обработки.ВыгрузкаОписанийПроцессов.ПолучитьНавигационныеСсылкиИзОписаний",
	                                                       ПараметрыФормирования, ПараметрыВыполнения);
	Возврат ДлительнаяОперация;
	
КонецФункции 

&НаСервере
Функция ДанныеОписанийСценариевДляПолученияНавигационныхСсылок()
	
	ДанныеОписаний = Новый Массив;
	
	Для Каждого СтрокаДерева Из СценарииКВыгрузке.ПолучитьЭлементы() Цикл
		
		 ДобавитьДанныеОписанийДляПолученияНавигационныхСсылокПоСтрокеДерева(СтрокаДерева, ДанныеОписаний);
		
	КонецЦикла;
	 
	Возврат ДанныеОписаний;
	
КонецФункции

&НаСервере
Процедура  ДобавитьДанныеОписанийДляПолученияНавигационныхСсылокПоСтрокеДерева(СтрокаДерева, ДанныеОписаний)
	
	Описания = Новый Массив;
	
	Для Каждого СтрокаСОписанием Из СтрокаДерева.ОписанияСценария Цикл
		
		ДанныеОписания = Новый Структура;
		ДанныеОписания.Вставить("КодЯзыка", СтрокаСОписанием.КодЯзыка);
		ДанныеОписания.Вставить("ТекстHTML", СтрокаСОписанием.ТекстHTML);
		
		Описания.Добавить(ДанныеОписания);
		
	КонецЦикла;
	
	Если Описания.Количество() > 0 Тогда 
		
		ДанныеПоСценарию = Новый Структура;
		ДанныеПоСценарию.Вставить("Сценарий",            СтрокаДерева.Сценарий); 
		ДанныеПоСценарию.Вставить("ИдентификаторСтроки", СтрокаДерева.ПолучитьИдентификатор());
		ДанныеПоСценарию.Вставить("Описания",            Описания);
		
		ДанныеОписаний.Добавить(ДанныеПоСценарию);
		
	КонецЕсли;
	
	Для Каждого ПодчиненнаяСтрока Из  СтрокаДерева.ПолучитьЭлементы() Цикл
		
		 ДобавитьДанныеОписанийДляПолученияНавигационныхСсылокПоСтрокеДерева(ПодчиненнаяСтрока, ДанныеОписаний);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаДанныхОбъектовДляПолученияСкриншотовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		ОбработатьПолученныеДанныеДляПолученияСкриншотов(Результат, ДополнительныеПараметры);
	КонецЕсли;

КонецПроцедуры 

&НаКлиенте
Процедура ОбработатьПолученныеДанныеДляПолученияСкриншотов(Результат, ДополнительныеПараметры)

	Если Не ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеДляПолученияСкриншотов = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	Если Не ДанныеДляПолученияСкриншотов.Успешно Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьСкриншотыПоДаннымНавигационныхСсылокВОписаниях(ДанныеДляПолученияСкриншотов.ПодготовленныеДанные);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПолучитьСкриншотыПоДаннымНавигационныхСсылокВОписаниях(ДанныеДляПолученияСкриншотов)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("НомерПортаКлиентТестирования",        НомерПортаКлиентТестирования);
	ПараметрыОткрытия.Вставить("СтрокаСоединенияКлиентаТестирования", СтрокаСоединенияКлиентаТестирования);
	ПараметрыОткрытия.Вставить("ТаймаутЗапускаКлиентаТестирования",   ТаймаутЗапускаКлиентаТестирования);
	ПараметрыОткрытия.Вставить("ДанныеДляПолученияСкриншотов",        ДанныеДляПолученияСкриншотов);
	ПараметрыОткрытия.Вставить("ИмяКаталога",                         КаталогВыгрузки);
	ПараметрыОткрытия.Вставить("РежимОткрытия",                       "ПолучениеСкриншотов");
	
	ОповещениеПослеЗакрытияНастройкиКлиентаТестирования = Новый ОписаниеОповещения("ПолучениеСкриншотовЗавершение",ЭтотОбъект);
	
	ОткрытьФорму("Обработка.ВыгрузкаОписанийПроцессов.Форма.РаботаСКлиентомТестирования", ПараметрыОткрытия, ЭтотОбъект,,,,
	             ОповещениеПослеЗакрытияНастройкиКлиентаТестирования, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеСкриншотовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Успешно 
		И ЭтоАдресВременногоХранилища(Результат.АдресДанныеСкриншотов) Тогда
		ЗаменитьСсылкиНаОбъектыСсылкамиНаСкриншоты(Результат.АдресДанныеСкриншотов);
		ВыгрузитьОписанияПроцессов();
	КонецЕсли; 
	
КонецПроцедуры 

&НаСервере
Процедура ЗаменитьСсылкиНаОбъектыСсылкамиНаСкриншоты(АдресДанныеСкриншотов)
	
	ДанныеСкриншотов = ПолучитьИзВременногоХранилища(АдресДанныеСкриншотов);
	
	Если ТипЗнч(ДанныеСкриншотов) <> Тип("ТаблицаЗначений") Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	Для Каждого СтрокаДанныеСкриншотов Из ДанныеСкриншотов Цикл
		
		ЗаменитьСсылкуНаОбъектНаСкриншотыВОписаниях(СтрокаДанныеСкриншотов);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаменитьСсылкуНаОбъектНаСкриншотыВОписаниях(СтрокаДанныеСкриншотов) 
	
	СтрокаСоСсылкамиНаСкриншоты = "";
	
	ШаблонСтрокаСсылкаНаТекущийСкриншот = "<a href=""e1cib/data/Справочник.ДемонстрационныеСценарииПрисоединенныеФайлы?УникальныйИдентификатор""> НомерСкриншота </a>";
	НомерСкриншота = 1;
	
	Для Каждого СтрокаДанныеСкриншота Из СтрокаДанныеСкриншотов.Скриншоты Цикл
		
		Если НомерСкриншота = 1 Тогда
			 СтрокаСоСсылкамиНаСкриншоты = СтрокаСоСсылкамиНаСкриншоты + " (";
		 Иначе
			 СтрокаСоСсылкамиНаСкриншоты = СтрокаСоСсылкамиНаСкриншоты + "<span> </span>";
		КонецЕсли;
		
		СтрокаНомерСкриншота = Строка(НомерСкриншота);
		
		СтрокаСоСсылкойНаТекущийСкриншот = СтрЗаменить(ШаблонСтрокаСсылкаНаТекущийСкриншот,"УникальныйИдентификатор", СтрокаДанныеСкриншота.ИдентификаторСкриншота);
		СтрокаСоСсылкойНаТекущийСкриншот = СтрЗаменить(СтрокаСоСсылкойНаТекущийСкриншот,
		                                               "НомерСкриншота", 
		                                              ?(НомерСкриншота > 1, "," +  СтрокаНомерСкриншота, СтрокаНомерСкриншота));
		
		СтрокаСоСсылкамиНаСкриншоты = СтрокаСоСсылкамиНаСкриншоты + СтрокаСоСсылкойНаТекущийСкриншот;
		НомерСкриншота = НомерСкриншота + 1;
		
	КонецЦикла;
	
	Если СтрокаДанныеСкриншотов.Скриншоты.Количество() > 0 Тогда
		 СтрокаСоСсылкамиНаСкриншоты = СтрокаСоСсылкамиНаСкриншоты + ")";
	КонецЕсли;
	
	Для Каждого СтрокаДанныеОписания Из  СтрокаДанныеСкриншотов.Сценарии Цикл
		
		СтрокаДереваВыгружаемыхСценариев = СценарииКВыгрузке.НайтиПоИдентификатору(СтрокаДанныеОписания.ИдентификаторСтроки);
		Если СтрокаДереваВыгружаемыхСценариев = Неопределено Тогда
			 Продолжить;
		 КонецЕсли;
		 
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("КодЯзыка", СтрокаДанныеОписания.КодЯзыка);
		
		НайденныеСтроки = СтрокаДереваВыгружаемыхСценариев.ОписанияСценария.НайтиСтроки(ПараметрыПоиска); 
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			ЗаменитьСсылкуНаОбъектНаСкриншотыДляОписания(НайденнаяСтрока, СтрокаДанныеСкриншотов, СтрокаСоСсылкамиНаСкриншоты);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Процедура ЗаменитьСсылкуНаОбъектНаСкриншотыДляОписания(СтрокаОписания, СтрокаДанныеСкриншотов, СтрокаСоСсылкамиНаСкриншоты)
	
	ПозицияГиперссылки = СтрНайти(СтрокаОписания.ТекстHTML, СтрокаДанныеСкриншотов.НавигационнаяСсылка);
	
	Пока ПозицияГиперссылки > 0 Цикл
		
		 СтрокаОписания.ТекстHTML = Лев(СтрокаОписания.ТекстHTML, ПозицияГиперссылки -8)
		                          + "span"
		                          + Прав(СтрокаОписания.ТекстHTML, СтрДлина(СтрокаОписания.ТекстHTML) - ПозицияГиперссылки - СтрДлина(СтрокаДанныеСкриншотов.НавигационнаяСсылка));
		
		ПозицияКонцаГиперссылки =  СтрНайти(СтрокаОписания.ТекстHTML, "</a", НаправлениеПоиска.СНачала, ПозицияГиперссылки);
		
		СтрокаОписания.ТекстHTML = Лев(СтрокаОписания.ТекстHTML, ПозицияКонцаГиперссылки  - 1)
		                          + "</span>"
		                          + СтрокаСоСсылкамиНаСкриншоты
		                          + Прав(СтрокаОписания.ТекстHTML, СтрДлина(СтрокаОписания.ТекстHTML) -3 - ПозицияКонцаГиперссылки);
		 
		 ПозицияГиперссылки = СтрНайти(СтрокаОписания.ТекстHTML, СтрокаДанныеСкриншотов.НавигационнаяСсылка);
		 
	КонецЦикла;

КонецПроцедуры

#КонецОбласти 

#КонецОбласти
