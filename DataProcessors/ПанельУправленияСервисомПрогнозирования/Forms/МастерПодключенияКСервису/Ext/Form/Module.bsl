
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ПолучитьНастройкиСервиса();
	ПолучитьОпцииИспользованияПланирований();
	
	// Восстановление доступа на новой версии.
	Если ИзмененАПИСервиса Тогда
		СервисПрогнозирования.ОчиститьИнформациюСервиса();
		СтруктураОтвета = СервисПрогнозирования.ПеререгистрироватьПриложениеВСервисеПоИТС();
		Если ПустаяСтрока(СтруктураОтвета.ТекстОшибки) Тогда
			ИзмененАПИСервиса = Ложь;
			ПереключательИнформацииИзмененияИнтерфейса = 1;
		Иначе
			ПереключательИнформацииИзмененияИнтерфейса = 2;
			Элементы.ДекорацияИнформацияЗаголовокОжидаетсяВосстановлениеДоступа.Заголовок = СтрШаблон(
				Элементы.ДекорацияИнформацияЗаголовокОжидаетсяВосстановлениеДоступа.Заголовок,
				СтруктураОтвета.ТекстОшибки);
		КонецЕсли;
	Иначе
		ПереключательИнформацииИзмененияИнтерфейса     = 0;
	КонецЕсли;
	
	РассчитатьРеквизитыСтатусовАвторизации();
	
	СформироватьДеревоВыгрузкиМетаданных(Истина);
	СформироватьУказательСтраниц();
	РассчитатьСтатусПодключения();
	УстановитьВидимостьДоступность();
	УстановитьТексты();
	
	ПоддерживаемыеПериодичности = СервисПрогнозирования.ПоддерживаемыеПериодичностиСервисом();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(ТокенПриложения) Тогда
		ОбновитьСтатусПодключения(Неопределено);
	КонецЕсли;
	
	Если ИзмененыНастройкиИнтернетПоддержки Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьВариантДействияПриИзмененииНастроекИнтернетПоддержки", ЭтотОбъект);
		ОткрытьФорму("Обработка.ПанельУправленияСервисомПрогнозирования.Форма.ВопросПриИзмененииНастроекИнтернетПоддержки",
		             Новый Структура("ИдентификаторПриложения", ИдентификаторПриложения),
		             ЭтотОбъект,,,,
		             ОписаниеОповещения,
		             РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СозданиеСценарияПрогнозирования" Тогда
		СценарийПрогнозирования = Параметр.НовыйСценарий;
	ИначеЕсли ИмяСобытия = "СозданиеВидаПлана" Тогда
		ВидПлана = Параметр.НовыйВидПланов;
	ИначеЕсли ИмяСобытия = "ПодборРеквизитовКоллекций" Тогда
		Если Параметр.ОбновитьСписокРеквизитов Тогда
			СформироватьДеревоВыгрузкиМетаданных(Ложь);
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ПодборРеквизитовКоллекцийВыборРеквизита" Тогда
		Если Параметр.ОбновитьСписокРеквизитов Тогда
			СформироватьДеревоВыгрузкиМетаданных(Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	Если Не ЗакрытьПринудительно Тогда
		СохранитьНастройкиИПередаваемыеДанные();
	КонецЕсли;
	
	АктуализироватьИнформациюИзмененияФорматовКоллекций();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВыгрузкаДанныхПоРасписаниюАктивнаПриИзменении(Элемент)
	Если Не ВыгрузкаДанныхПоРасписаниюАктивна Тогда
		ВыгрузкаДанныхПоРасписаниюЗапускатьОбучение = Ложь;
	КонецЕсли;
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьОстаткиЗаВсеВремяПриИзменении(Элемент)
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьОстаткиЗаПериодПриИзменении(Элемент)
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьКонтрольныеПланыЗаВсеВремяПриИзменении(Элемент)
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьКонтрольныеПланыЗаПериодПриИзменении(Элемент)
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПлановыеОстаткиИПродажПриИзменении(Элемент)
	ИспользованиеОстатковИПродажПересчитать(ЭтотОбъект);
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРеальныеОстаткиИПланыПриИзменении(Элемент)
	СценарийПрогнозированияФактИПлан = ПредопределенноеЗначение("Справочник.СценарииТоварногоПланирования.ПустаяСсылка");
	ИспользованиеОстатковИПродажПересчитать(ЭтотОбъект);
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРеальныеИПлановыеОстаткиИПродажиПриИзменении(Элемент)
	ИспользованиеОстатковИПродажПересчитать(ЭтотОбъект);
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура УказательНаСтраницыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыполнитьДействияПриПереключенииСтраницНаКлиенте();
	УказательНаСтраницыОбработкаНавигационнойСсылкиНаСервере(НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура СуществующийИлиНовыйСценарийНовыйГиперссылкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Обработка.ПанельУправленияСервисомПрогнозирования.Форма.МастерСозданияСценарияПрогнозирования",
		Новый Структура(),
		ЭтотОбъект,
		,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура СуществующийИлиНовыйВидПланаНовыйГиперссылкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОчиститьСообщения();
	
	Если СценарийПрогнозирования.Пустая() Тогда
		ТекстСообщенияОбОшибке = ТекстОшибкиНеЗаполненСценарийПрогнозирования();
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщенияОбОшибке,
			Неопределено, "СуществующийСценарийПрогнозирования");
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ПанельУправленияСервисомПрогнозирования.Форма.МастерСозданияВидаПлана",
		Новый Структура("СценарийПрогнозирования, ИспользоватьПланированиеПродаж, ИспользоватьПланированиеПродажПоКатегориям",
			СценарийПрогнозирования, ИспользоватьПланированиеПродаж, ИспользоватьПланированиеПродажПоКатегориям),
		ЭтотОбъект,
		,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРасписаниеВыгрузкиПоУмолчаниюОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Элементы.НастроитьИнтервалВыгрузкиДанных.Заголовок = Неопределено;
	УстановитьРасписаниеВыгрузкиПоУмолчаниюСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРасписаниеЗагрузкиПоУмолчаниюОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Элементы.НастроитьИнтервалЗагрузкиДанных.Заголовок = Неопределено;
	УстановитьРасписаниеЗагрузкиПоУмолчаниюСервер();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СвязанныеКоллекцииИРеквизиты()
	
	Соответствие = Новый Соответствие();
	
	ВложенноеСоответствие = Новый Соответствие();
	ВложенноеСоответствие.Вставить(Перечисления.КоллекцииСервисаПрогнозированияПродаж.Продажи, "КодХарактеристики");
	ВложенноеСоответствие.Вставить(Перечисления.КоллекцииСервисаПрогнозированияПродаж.Промо, "КодХарактеристики");
	
	Соответствие.Вставить(Перечисления.КоллекцииСервисаПрогнозированияПродаж.ХарактеристикиНоменклатуры, ВложенноеСоответствие);
	
	ВложенноеСоответствие = Новый Соответствие();
	ВложенноеСоответствие.Вставить(Перечисления.КоллекцииСервисаПрогнозированияПродаж.Продажи, "КодКлиента");
	ВложенноеСоответствие.Вставить(Перечисления.КоллекцииСервисаПрогнозированияПродаж.Промо, "КодКлиента");
	
	Соответствие.Вставить(Перечисления.КоллекцииСервисаПрогнозированияПродаж.Покупатели, ВложенноеСоответствие);
	
	Возврат Соответствие;
	
КонецФункции

&НаКлиенте
Процедура НастройкиВыгрузкиМетаданныхПриИзменении(Элемент)
	
	Если Элемент.ТекущиеДанные.ЗаблокироватьФлагВыбора Тогда
		Возврат;
	КонецЕсли;
	ИзмененыНастройкиВыгрузкиМетаданных = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиВыгрузкиМетаданныхВыбраноПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.НастройкиВыгрузкиМетаданных.ТекущиеДанные;
	Если ТекущаяСтрока.ЗаблокироватьФлагВыбора Тогда
		ТекущаяСтрока.Выбрано = Истина;
	КонецЕсли;
	
	НастройкиВыгрузкиМетаданныхВыбраноПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НайтиЭлементДерева(ЭлементыДерева, КолонкаДляПоиска, ЗначениеДляПоиска)
	НайденнаяСтрока = Неопределено;
	Для Каждого СтрокаДерева Из ЭлементыДерева Цикл
		Если СтрокаДерева[КолонкаДляПоиска] = ЗначениеДляПоиска Тогда
			НайденнаяСтрока = СтрокаДерева;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат НайденнаяСтрока;
КонецФункции

&НаКлиенте
Процедура НастройкиВыгрузкиМетаданныхВыбраноПриИзмененииНаСервере()
	
	СвязанныеКоллекцииИРеквизиты = СвязанныеКоллекцииИРеквизиты();
	
	ТекущаяСтрока = Элементы.НастройкиВыгрузкиМетаданных.ТекущиеДанные;
	Выбрано = ТекущаяСтрока.Выбрано;
	ИмяВИсточнике = ТекущаяСтрока.ИмяВИсточнике;
	
	ИмяВИсточникеРодителя = Неопределено;
	Если ТекущаяСтрока.УровеньДерева = 2 Тогда
		СтрокаРодитель = ТекущаяСтрока.ПолучитьРодителя();
		ИмяВИсточникеРодителя = СтрокаРодитель.ИмяВИсточнике;
	КонецЕсли;
	
	ЭлементыДерева = НастройкиВыгрузкиМетаданных.ПолучитьЭлементы();
	
	ЭлементыДляВзводаФлага = Новый Массив();
	ЭлементыДляВзводаФлага.Добавить(ТекущаяСтрока.ПолучитьИдентификатор());
	
	СтрокиДляВывода = Новый Массив();
	
	Если ИмяВИсточникеРодителя = Неопределено
		И Выбрано Тогда
		
		// Контроль выполняется при взводе флага "Выбрано", поскольку выгружаемая коллекция должна быть связана 
		// с какой-либо иной коллекцией при помощи поля связи.
		// Если связи нет - это ошибка. Требуется сообщить пользователю.
		// При снятии флага выгрузки коллекции - ошибки нет, т.к. сервис сможет производить расчет 
		// по guid, без обращения к объекту.
		
		СвязиОбъектов = СвязанныеКоллекцииИРеквизиты[ИмяВИсточнике];
		Если СвязиОбъектов = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Для Каждого КлючЗначение Из СвязиОбъектов Цикл
			
			// Строка дерева верхнего уровня.
			НайденнаяСтрока = НайтиЭлементДерева(ЭлементыДерева,
				"ИмяВИсточнике",
				КлючЗначение.Ключ);
			
			Если НайденнаяСтрока <> Неопределено Тогда
				// Реквизиты выбранной коллекции.
				ПодчиненныеСтроки = НайденнаяСтрока.ПолучитьЭлементы();
				НайденнаяСтрокаПодчиненная = НайтиЭлементДерева(ПодчиненныеСтроки,
					"ИмяВИсточнике",
					КлючЗначение.Значение);
				Если НайденнаяСтрокаПодчиненная <> Неопределено
					И Выбрано <> НайденнаяСтрокаПодчиненная.Выбрано Тогда
						ЭлементыДляВзводаФлага.Добавить(НайденнаяСтрокаПодчиненная.ПолучитьИдентификатор());
						ШаблонСтроки = НСтр("ru='- Коллекция: %1, реквизит: %2'");
						СтрокиДляВывода.Добавить(СтрШаблон(ШаблонСтроки,
							НайденнаяСтрока.Наименование, НайденнаяСтрокаПодчиненная.Наименование));
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если ЭлементыДляВзводаФлага.Количество() > 1 Тогда
		ШаблонСообщения = НСтр("ru = 'Выгрузка коллекции %1 требует выгрузки следующих реквизитов связанных коллекций:
		|%2
		|Указанные реквизиты будут отмечены к выгрузке. Продолжить?'");
		ТекстВопроса = СтрШаблон(ШаблонСообщения, ИмяВИсточнике, СтрСоединить(СтрокиДляВывода, Символы.ПС));
		Оповещение = Новый ОписаниеОповещения("ЗаписатьИзменениеФлаговВыгрузки", ЭтотОбъект, ЭлементыДляВзводаФлага);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИзменениеФлаговВыгрузки(Результат, ПараметрКоманды) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Для Индекс = 0 По ПараметрКоманды.Количество() - 1 Цикл
			Если Индекс = 0 Тогда
				Продолжить;
			КонецЕсли;
			Строка = ПараметрКоманды[Индекс];
			ЭлементДерева = НастройкиВыгрузкиМетаданных.НайтиПоИдентификатору(Строка);
			ЭлементДерева.Выбрано = Не ЭлементДерева.Выбрано;
		КонецЦикла;
		
	ИначеЕсли ПараметрКоманды.Количество() > 0 Тогда
		Строка = ПараметрКоманды[0];
		ЭлементДерева = НастройкиВыгрузкиМетаданных.НайтиПоИдентификатору(Строка);
			ЭлементДерева.Выбрано = Не ЭлементДерева.Выбрано;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОшибкиПроверкиДанныхПриАктивизацииСтроки(Элемент)
	ТекущаяСтрока = Элементы.ИнформацияОВыгружаемыхОбъектах.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		ТекстОшибкиПроверкиДанных = ТекущаяСтрока.ОписаниеОшибки;
	Иначе
		ТекстОшибкиПроверкиДанных = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СуществующийСценарийПрогнозированияПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	Если СценарийПрогнозирования = СценарийПрогнозированияФактИПлан
		И Не СценарийПрогнозирования.Пустая() Тогда
		ШаблонТекстаОшибки = ТекстОшибкиСценарийИспользуетсяДляПодменыПродаж();
		ТекстОшибки = СтрШаблон(ШаблонТекстаОшибки, СценарийПрогнозирования);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, Неопределено, "СуществующийСценарийПрогнозирования");
		СценарийПрогнозирования = ПредопределенноеЗначение("Справочник.СценарииТоварногоПланирования.ПустаяСсылка");
	ИначеЕсли СценарийПрогнозирования = СценарийПрогнозированияКонтрольныхПланов
		И Не СценарийПрогнозирования.Пустая() Тогда
		ШаблонТекстаОшибки = ТекстОшибкиСценарийИспользуетсяДляКонтрольныхПланов();
		ТекстОшибки = СтрШаблон(ШаблонТекстаОшибки, СценарийПрогнозирования);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, Неопределено, "СуществующийСценарийПрогнозирования");
		СценарийПрогнозирования = ПредопределенноеЗначение("Справочник.СценарииТоварногоПланирования.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СуществующийСценарийПрогнозированияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОчиститьСообщения();
	СуществующийСценарийПрогнозированияОбработкаВыбораНаСервере(ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СценарийПрогнозированияКонтрольныхПлановПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	Если СценарийПрогнозированияФактИПлан = СценарийПрогнозированияКонтрольныхПланов
		И Не СценарийПрогнозированияКонтрольныхПланов.Пустая() Тогда
		ШаблонТекстаОшибки = ТекстОшибкиСценарийИспользуетсяДляПодменыПродаж();
		ТекстОшибки = СтрШаблон(ШаблонТекстаОшибки, СценарийПрогнозирования);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, Неопределено, "СценарийПрогнозированияКонтрольныхПланов");
		СценарийПрогнозированияКонтрольныхПланов = ПредопределенноеЗначение("Справочник.СценарииТоварногоПланирования.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СценарийПрогнозированияФактИПланПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	Если СценарийПрогнозированияФактИПлан = СценарийПрогнозированияКонтрольныхПланов
		И Не СценарийПрогнозированияФактИПлан.Пустая() Тогда
		ШаблонТекстаОшибки = ТекстОшибкиСценарийИспользуетсяДляКонтрольныхПланов();
		ТекстОшибки = СтрШаблон(ШаблонТекстаОшибки, СценарийПрогнозирования);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, Неопределено, "СценарийПрогнозированияФактИПлан");
		СценарийПрогнозированияФактИПлан = ПредопределенноеЗначение("Справочник.СценарииТоварногоПланирования.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипАвторизацииПриИзменении(Элемент)
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура НомерТелефонаПриИзменении(Элемент)
	НомерТелефонаПриИзмененииСервер(НомерТелефона, НомерТелефонаЗначенияПолей);
КонецПроцедуры

&НаКлиенте
Процедура НомерТелефонаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НомерТелефона = Элемент.ТекстРедактирования;
	НомерТелефонаНачалоВыбораСервер();
	
	ПараметрыОткрытия = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
	             ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица"), 
	             НомерТелефонаЗначенияПолей,
	             Элемент.ТекстРедактирования);
	
	ПараметрыОткрытия.Вставить("ВидКонтактнойИнформации", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица"));
	ПараметрыОткрытия.Вставить("ЗначенияПолей",           НомерТелефонаЗначенияПолей);
	ПараметрыОткрытия.Вставить("Представление",           НомерТелефона);
	ПараметрыОткрытия.Вставить("НомерТелефона",           НомерТелефона);
	ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru='Ввод номера телефона'"));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяРеквизитаПредставление", "НомерТелефона");
	ДополнительныеПараметры.Вставить("ИмяРеквизитаЗначенияПолей", "НомерТелефонаЗначенияПолей");
	ОповещениеОкончанияРедактированияКИ = Новый ОписаниеОповещения("РедактированиеКонтактнойИнформацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, ЭтотОбъект, ОповещениеОкончанияРедактированияКИ);
КонецПроцедуры

&НаКлиенте
Процедура СтатусЗаявкиПриИзменении(Элемент)
	УстановитьВидимостьДоступность();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Назад(Команда)
	
	ИмеющиесяСтраницы = ИмеющиесяСтраницы();
	ИндексСтраницы = ИмеющиесяСтраницы.Найти(Элементы.Страницы.ТекущаяСтраница.Имя);
	Если ИндексСтраницы > 0 Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы[ИмеющиесяСтраницы[ИндексСтраницы - 1]];
		СформироватьУказательСтраниц(ИндексСтраницы - 1);
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействияПриПереключенииСтраницНаКлиенте()
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаАвторизация
		И Не ЗначениеЗаполнено(ТокенПриложения) Тогда
		
		Если ПереключательЗаявкаАвторизация = 0 Тогда
			ОтправитьЗаявку(Неопределено);
		ИначеЕсли ПереключательЗаявкаАвторизация = 1 Тогда
			ВосстановитьДоступ(Неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	
	ОчиститьСообщения();
	
	ВыполнитьДействияПриПереключенииСтраницНаКлиенте();
	ДалееНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПрогнозирование(Команда)
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(ТокенПриложения)
		Или Не СтатусПодключенияАктивен Тогда
		ТекстСообщенияОбОшибке = ТекстОшибкиАвторизацияНеНайдена();
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщенияОбОшибке);
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СценарийПрогнозирования) Тогда
		ТекстСообщенияОбОшибке = ТекстОшибкиНеЗаполненСценарийПрогнозирования();
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщенияОбОшибке);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидПлана) Тогда
		
		НачатьПрогнозированиеНаСервере(Истина, Истина, Истина);
		
		Оповестить("ЗапускВыгрузкиДанныхВСервисПрогнозирования");
		
	Иначе
		ТекстСообщенияОбОшибке = ТекстОшибкиНеЗаполненВидПлана();
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщенияОбОшибке, , "ВидПлана");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДогрузитьДанные(Команда)
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(ТокенПриложения)
		Или Не СтатусПодключенияАктивен Тогда
		ТекстСообщенияОбОшибке = ТекстОшибкиАвторизацияНеНайдена();
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщенияОбОшибке);
		Возврат;
	КонецЕсли;
	
	НачатьПрогнозированиеНаСервере(Ложь, Ложь, Ложь);
	
	Оповестить("ЗапускВыгрузкиДанныхВСервисПрогнозирования");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолнаяВыгрузкаДанных(Команда)
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(ТокенПриложения)
		Или Не СтатусПодключенияАктивен Тогда
		ТекстСообщенияОбОшибке = ТекстОшибкиАвторизацияНеНайдена();
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщенияОбОшибке);
		Возврат;
	КонецЕсли;
	
	НачатьПрогнозированиеНаСервере(Истина, Ложь, Ложь);
	
	Оповестить("ЗапускВыгрузкиДанныхВСервисПрогнозирования");
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВРабочееМесто(Команда)
	ОткрытьФорму("Обработка.ПанельУправленияСервисомПрогнозирования.Форма.ПланированиеИПрогнозированиеПродажФормаОтчета");
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура НастроитьИнтервалВыгрузкиДанных(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьРасписаниеВыгрузкиДанных", ЭтотОбъект);
	ОткрытьНастройкуРасписанияОбмена(ОписаниеОповещения, ВыгрузкаДанныхВСервисПрогнозированияПродаж);
КонецПроцедуры

&НаКлиенте
Процедура НастроитьИнтервалЗагрузкиДанных(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьРасписаниеЗагрузкиДанных", ЭтотОбъект);
	ОткрытьНастройкуРасписанияОбмена(ОписаниеОповещения, ЗагрузкаДанныхИзСервисаПрогнозированияПродаж);
КонецПроцедуры

&НаКлиенте
Процедура Готово(Команда)
	СохранитьНастройкиИПередаваемыеДанные();
	ЗакрытьПринудительно = Истина;
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура НачатьПроверкуДанных(Команда)
	НачатьПроверкуДанныхНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСоставПередаваемыхДанных(Команда)
	СформироватьДеревоВыгрузкиМетаданных(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДопРеквизитыИзСоставаПередаваемыхДанных(Команда)
	ТекстВопроса = ТекстОшибкиБудутУдаленыПользовательскиеРеквизиты();
	Оповещение = Новый ОписаниеОповещения("УдалитьДопРеквизитыИзСоставаПередаваемыхДанныхПродолжение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьДоступ(Команда)
	ОчиститьСообщения();
	ПодключитьсяКСервису();
	Если Не ПустаяСтрока(ИдентификаторЗаданияПодключитьсяКСервису) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПодключитьсяКСервисуНаКлиенте", 1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗаявку(Команда)
	
	ОчиститьСообщения();
	
	ЕстьОшибка = Ложь;
	Если ЗначениеЗаполнено(ЭлектроннаяПочта) Тогда
		
		Если ОбщегоНазначенияУТКлиентСервер.ПроверитьЗаполнениеПочтовогоАдреса(ЭлектроннаяПочта) Тогда
			ТекстСообщенияОбОшибке = ТекстОшибкиНеверныйФорматАдресаЭлектроннойПочты();
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщенияОбОшибке, Неопределено, "ЭлектроннаяПочта");
			ЕстьОшибка = Истина;
		КонецЕсли;
		
	Иначе
		
		ТекстСообщенияОбОшибке = ТекстОшибкиНеЗаполненаЭлектроннаяПочта();
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщенияОбОшибке, Неопределено, "ЭлектроннаяПочта");
		ЕстьОшибка = Истина;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ФИОКонтактногоЛица) Тогда
		
		ТекстСообщенияОбОшибке = ТекстОшибкиНеЗаполненоФИО();
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщенияОбОшибке, Неопределено, "ФИОКонтактногоЛица");
		ЕстьОшибка = Истина;
		
	КонецЕсли;
	
	Если ЕстьОшибка Тогда
		Возврат;
	КонецЕсли;
	
	ОтправитьЗаявкуВСервис();
	Если Не ПустаяСтрока(ИдентификаторЗаданияОтправитьЗаявкуВСервис) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ОтправитьЗаявкуВСервисНаКлиенте", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусПодключения(Команда)
	ОбновитьСтатусПодключенияНаСервере();
	Если Не ПустаяСтрока(ИдентификаторЗаданияОбновитьСтатусПодключения) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьСтатусПодключенияНаКлиенте", 1, Истина);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УправлениеЭлементамиФормы

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ТекущийШрифт = Элементы.НастройкиВыгрузкиМетаданных.Шрифт;
	ЖирныйШрифт = Новый Шрифт(ТекущийШрифт, , , Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НастройкиВыгрузкиМетаданных.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиВыгрузкиМетаданных.ЗаблокироватьФлагВыбора");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", ЖирныйШрифт);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИнформацияОВыгружаемыхОбъектахДатаПервойЗаписи.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИнформацияОВыгружаемыхОбъектахДатаПоследнейЗаписи.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИнформацияОВыгружаемыхОбъектах.КатегориальнаяКоллекция");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<нет>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область Разное

&НаКлиенте
Процедура РедактированиеКонтактнойИнформацииЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ЭтотОбъект[ДополнительныеПараметры.ИмяРеквизитаЗначенияПолей] = Результат.КонтактнаяИнформация;
		ЭтотОбъект[ДополнительныеПараметры.ИмяРеквизитаПредставление] = Результат.Представление;
		
		РедактированиеКонтактнойИнформацииЗавершениеСервер();
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура НомерТелефонаНачалоВыбораСервер()
	НомерТелефонаПриИзмененииСервер(НомерТелефона, НомерТелефонаЗначенияПолей);
	УправлениеКонтактнойИнформацией.УстановитьКомментарийКонтактнойИнформации(НомерТелефонаЗначенияПолей, НомерТелефонаКомментарий);
КонецПроцедуры

&НаСервере
Процедура РедактированиеКонтактнойИнформацииЗавершениеСервер()
	НомерТелефонаКомментарий = УправлениеКонтактнойИнформацией.КомментарийКонтактнойИнформации(НомерТелефонаЗначенияПолей);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НомерТелефонаПриИзмененииСервер(Знач НомерТелефона, НомерТелефонаЗначенияПолей)
	ПартнерыИКонтрагенты.ЗначенияПолейКонтактнойИнформации(НомерТелефона, НомерТелефонаЗначенияПолей, 
		ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица"));
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДопРеквизитыИзСоставаПередаваемыхДанныхПродолжение(Результат, ПараметрКоманды) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьДопРеквизитыИзСоставаПередаваемыхДанныхНаСервере();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРегламентноеЗадание(ИмяЗадания)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Метаданные", ИмяЗадания);
	УстановитьПривилегированныйРежим(Истина);
	ДанныеЗадания = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыОтбора);
	Если ДанныеЗадания.Количество() > 0 Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат ДанныеЗадания[0];
	Иначе
		УстановитьПривилегированныйРежим(Ложь);
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПолучитьНастройкиСервиса()
	
	УстановитьПривилегированныйРежим(Истина);
	Пароли = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("ПарольПользователяСервисаПрогнозирования",
		"Пароль");
	УстановитьПривилегированныйРежим(Ложь);
	
	Пароль = ?(ЗначениеЗаполнено(Пароли), УникальныйИдентификатор, "");
	
	Настройки = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	НеобходимыеНастройки = "Логин, ИмяБазы, АдресПодключения, ТипАвторизации, СтатусПодключения,
	|ИдентификаторПриложения, ТокенПриложения, ЗаявкаНаПодключениеОтправлена, ИзмененыНастройкиИнтернетПоддержки, ИзмененАПИСервиса,
	|НазваниеКомпании, ФИОКонтактногоЛица, ЭлектроннаяПочта, НомерТелефона, НомерТелефонаЗначенияПолей, НомерТелефонаКомментарий,
	|ДатаНачалаВыгрузкиОстатковИПродаж, ДатаОкончанияВыгрузкиОстатковИПродаж,
	|ИспользоватьРеальныеОстаткиИПродажи, ИспользоватьПлановыеОстаткиИПродажи,
	|СценарийПрогнозированияФактИПлан, СценарийПрогнозированияКонтрольныхПланов,
	|ДатаНачалаВыгрузкиКонтрольныхПланов, ДатаОкончанияВыгрузкиКонтрольныхПланов,
	|УчетПотерянныхПродаж, КоэффициентВосстановленияУчетаПотерянныхПродаж,
	|ВыгрузкаДанныхПоРасписаниюАктивна, ВыгрузкаДанныхПоРасписаниюЗапускатьОбучение, ЗагрузкаДанныхПоРасписаниюАктивна";
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Настройки, НеобходимыеНастройки);
	
	// Снятие флага в связи с отсутствием необходимости в перерегистрации.
	Если ИзмененАПИСервиса
		И Не ЗначениеЗаполнено(ТокенПриложения) Тогда
		ИзмененАПИСервиса = Ложь;
	КонецЕсли;
	
	СтатусПодключенияАктивен = СтатусПодключения = СервисПрогнозирования.СтатусПодключенияАктивен()
							   И Не ИзмененАПИСервиса;
	
	// Перевод информации с наличия ошибки на успешную перерегистрацию.
	Если Не ИзмененАПИСервиса
		И ПереключательИнформацииИзмененияИнтерфейса = 2 Тогда
		ПереключательИнформацииИзмененияИнтерфейса = 1;
	КонецЕсли;
	
	ВыгружатьОстаткиЗаВсеВремя = ?(Настройки.ВыгружатьОстаткиЗаВсеВремя, 0, 1);
	ВыгружатьКонтрольныеПланыЗаВсеВремя = ?(Настройки.ВыгружатьКонтрольныеПланыЗаВсеВремя, 0, 1);
	
	ИспользоватьРеальныеИлиПлановыеОстаткиИПродажиВыбор = 0;
	Если ИспользоватьРеальныеОстаткиИПродажи И ИспользоватьПлановыеОстаткиИПродажи Тогда
		ИспользоватьРеальныеИлиПлановыеОстаткиИПродажиВыбор = 2;
	ИначеЕсли ИспользоватьПлановыеОстаткиИПродажи Тогда
		ИспользоватьРеальныеИлиПлановыеОстаткиИПродажиВыбор = 1;
	КонецЕсли;
	
	// Расписание
	ДанныеЗадания = ПолучитьРегламентноеЗадание("ВыгрузкаДанныхВСервисПрогнозированияПродаж");
	Если ДанныеЗадания <> Неопределено Тогда
		ВыгрузкаДанныхВСервисПрогнозированияПродаж = ДанныеЗадания.Расписание;
	КонецЕсли;
	
	ДанныеЗадания = ПолучитьРегламентноеЗадание("ЗагрузкаДанныхИзСервисаПрогнозированияПродаж");
	Если ДанныеЗадания <> Неопределено Тогда
		ЗагрузкаДанныхИзСервисаПрогнозированияПродаж = ДанныеЗадания.Расписание;
	КонецЕсли;
	
	// Отборы выгрузки
	СхемаКомпоновкиДанных = ПолучитьОбщийМакет("СервисПрогнозированияФильтрОтправляемыхДанных");
	КомпоновщикНастроекОтборовНаВыгрузку.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
	КомпоновщикНастроекОтборовНаВыгрузку.Инициализировать(ИсточникНастроек);
	КомпоновщикНастроекОтборовНаВыгрузку.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КомпоновщикНастроекОтборовНаВыгрузку.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	СобытиеЖурналаРегистрации = СервисПрогнозированияПереопределяемый.ТекстСобытиеЖурналаРегистрации();
	
	Попытка
		НастройкиОтборов = Константы.НастройкиОтборовНаВыгрузкуСервисаПрогнозирования.Получить().Получить();
		Если НастройкиОтборов <> Неопределено Тогда
			КомпоновщикНастроекОтборовНаВыгрузку.ЗагрузитьНастройки(НастройкиОтборов.ОбщийОтборВыгрузки);
			КомпоновщикНастроекОтборовНаВыгрузку.Восстановить(
				СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
		КонецЕсли;
	Исключение
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации,
			УровеньЖурналаРегистрации.Ошибка, , , 
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	// Отборы загрузки
	СхемаКомпоновкиДанных = ПолучитьОбщийМакет("СервисПрогнозированияФильтрЗагрузкиПрогноза");
	КомпоновщикНастроекОтборовНаЗагрузку.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
	КомпоновщикНастроекОтборовНаЗагрузку.Инициализировать(ИсточникНастроек);
	КомпоновщикНастроекОтборовНаЗагрузку.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КомпоновщикНастроекОтборовНаЗагрузку.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	Попытка
		НастройкиОтборов = Константы.НастройкиОтборовНаЗагрузкуСервисаПрогнозирования.Получить().Получить();
		Если НастройкиОтборов <> Неопределено Тогда
			КомпоновщикНастроекОтборовНаЗагрузку.ЗагрузитьНастройки(НастройкиОтборов.ОбщийОтборЗагрузки);
			КомпоновщикНастроекОтборовНаЗагрузку.Восстановить(
				СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
		КонецЕсли;
	Исключение
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации,
			УровеньЖурналаРегистрации.Ошибка, , , 
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьОпцииИспользованияПланирований()
	
	ИспользоватьПланированиеПродаж             = ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеПродаж");
	ИспользоватьПланированиеПродажПоКатегориям = ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеПродажПоКатегориям");
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьДействияПриПереключенииСтраницНаСервере(ЕстьОшибкаЗаполнения)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаИсточникиДанных Тогда
		// Проверка периодов выгрузки.
		Если ВыгружатьОстаткиЗаВсеВремя = 1 Тогда
			Если Не ЗначениеЗаполнено(ДатаНачалаВыгрузкиОстатковИПродаж)
				И Не ЗначениеЗаполнено(ДатаОкончанияВыгрузкиОстатковИПродаж) Тогда
				ТекстТипаПериода = НСтр("ru = 'остатков и продаж'");
				ТекстОшибки = ТекстОшибкиПериодНеУстановлен(ТекстТипаПериода);
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Неопределено, "ДатаОкончанияВыгрузкиОстатковИПродаж");
				ЕстьОшибкаЗаполнения = Истина;
			ИначеЕсли ДатаОкончанияВыгрузкиОстатковИПродаж < ДатаНачалаВыгрузкиОстатковИПродаж Тогда
				ТекстОшибки = ТекстОшибкиКонецПериодаБольшеНачала();
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Неопределено, "ДатаОкончанияВыгрузкиОстатковИПродаж");
				ЕстьОшибкаЗаполнения = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ВыгружатьКонтрольныеПланыЗаВсеВремя = 1 Тогда
			Если Не ЗначениеЗаполнено(ДатаНачалаВыгрузкиКонтрольныхПланов)
				И Не ЗначениеЗаполнено(ДатаОкончанияВыгрузкиКонтрольныхПланов) Тогда
				ТекстТипаПериода = НСтр("ru = 'экспертных планов продаж'");
				ТекстОшибки = ТекстОшибкиПериодНеУстановлен(ТекстТипаПериода);
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Неопределено, "ДатаОкончанияВыгрузкиКонтрольныхПланов");
				ЕстьОшибкаЗаполнения = Истина;
			ИначеЕсли ДатаОкончанияВыгрузкиКонтрольныхПланов < ДатаНачалаВыгрузкиКонтрольныхПланов Тогда
				ТекстОшибки = ТекстОшибкиКонецПериодаБольшеНачала();
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Неопределено, "ДатаОкончанияВыгрузкиКонтрольныхПланов");
				ЕстьОшибкаЗаполнения = Истина;
			КонецЕсли;
		КонецЕсли;
		// Проверка сценариев.
		Если СценарийПрогнозированияФактИПлан = СценарийПрогнозированияКонтрольныхПланов
			И Не СценарийПрогнозированияКонтрольныхПланов.Пустая() Тогда
			ТекстОшибки = ТекстОшибкиСценарийНеМожетБытьРавенСценариюПодменыПродаж();
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Неопределено, "СценарийПрогнозированияКонтрольныхПланов");
			ЕстьОшибкаЗаполнения = Истина;
		КонецЕсли;
		Если ИспользоватьПлановыеОстаткиИПродажи
			И СценарийПрогнозированияФактИПлан.Пустая() Тогда
			ТекстОшибки = ТекстОшибкиСценарийПодменыПродажНеМожетБытьПустым();
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Неопределено, "СценарийПрогнозированияФактИПлан");
			ЕстьОшибкаЗаполнения = Истина;
		КонецЕсли;
		
		Если ЕстьОшибкаЗаполнения Тогда
			Возврат;
		КонецЕсли;
		ЗаписатьНастройки();
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСоставПередаваемыхДанных Тогда
		СохранитьСоставПередаваемыхДанных();
	Иначе
		ЗаписатьНастройки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмеющиесяСтраницы()
	
	Массив = Новый Массив();
	Массив.Добавить("СтраницаАвторизация");
	Массив.Добавить("СтраницаИсточникиДанных");
	Массив.Добавить("СтраницаСоставПередаваемыхДанных");
	Массив.Добавить("СтраницаФильтры");
	Массив.Добавить("СтраницаПроверкаДанных");
	Массив.Добавить("СтраницаРасписаниеОбновлений");
	Массив.Добавить("СтраницаТестовыйПрогноз");
	
	Возврат Массив;
	
КонецФункции

&НаСервере
Процедура СформироватьУказательСтраниц(ВыделитьСтраницу = 0)
	
	ЦветНажатойГиперссылки = ЦветаСтиля.ЦветПустойГиперссылки;
	
	Разделитель = Новый ФорматированнаяСтрока(" -> ");
	
	МассивСтраниц = Новый Массив();
	МассивСтраниц.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = '1. Авторизация'"),,,, "СтраницаАвторизация"));
	МассивСтраниц.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = '2. Источники данных'"),,,, "СтраницаИсточникиДанных"));
	МассивСтраниц.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = '3. Состав передаваемых данных'"),,,, "СтраницаСоставПередаваемыхДанных"));
	МассивСтраниц.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = '4. Фильтры'"),,,, "СтраницаФильтры"));
	МассивСтраниц.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = '5. Проверка данных'"),,,, "СтраницаПроверкаДанных"));
	МассивСтраниц.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = '6. Расписание обновлений'"),,,, "СтраницаРасписаниеОбновлений"));
	МассивСтраниц.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = '7. Параметры первого прогноза'"),,,, "СтраницаТестовыйПрогноз"));
	
	МассивСтраниц[ВыделитьСтраницу] = Новый ФорматированнаяСтрока(МассивСтраниц[ВыделитьСтраницу],, ЦветНажатойГиперссылки);
	
	СборкаУказателя = Новый Массив();
	Для Инд = 0 По МассивСтраниц.Количество() - 1 Цикл
		СборкаУказателя.Добавить(МассивСтраниц[Инд]);
		СборкаУказателя.Добавить(Разделитель);
	КонецЦикла;
	СборкаУказателя.Удалить(СборкаУказателя.Количество() - 1);
	
	УказательНаСтраницы = Новый ФорматированнаяСтрока(СборкаУказателя);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоВыгрузкиМетаданных(СформироватьДеревоСохраненныхНастроек)
	
	НастройкиКоллекций        = НастройкиВыгрузкиМетаданных.ПолучитьЭлементы();
	НастройкиКоллекций.Очистить();
	
	Если СформироватьДеревоСохраненныхНастроек Тогда
		СохраненныеНастройкиКоллекций = СохраненныеНастройкиВыгрузкиМетаданных.ПолучитьЭлементы();
		СохраненныеНастройкиКоллекций.Очистить();
	КонецЕсли;
	
	Настройки          = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	КоллекцииПоПорядку = СервисПрогнозированияПереопределяемый.КоллекцииПоПорядку(ИспользоватьПланированиеПродаж);
	ОсновноеОписание   = СервисПрогнозированияПереопределяемый.ОсновноеОписаниеВыгружаемогоЭлементаДанных();
	
	Для Каждого Коллекция Из КоллекцииПоПорядку Цикл
		
		ОписаниеКоллекции = Настройки.Коллекции[Коллекция]; // см. СервисПрогнозированияПереопределяемыйКлиентСервер.ОписаниеВыгружаемогоЭлементаДанных.
		
		Если ОписаниеКоллекции.ИмяВИсточнике = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Товары Тогда
			Если Не ИспользоватьПланированиеПродаж Тогда
				ОписаниеКоллекции.Выгружать                                   = Истина;
				ОписаниеКоллекции.Обязательный                                = Истина;
				ОписаниеКоллекции.ВложенноеОписание.КодКатегории.Выгружать    = Истина;
				ОписаниеКоллекции.ВложенноеОписание.КодКатегории.Обязательный = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Выгружать = ОписаниеКоллекции.Выгружать Или ОписаниеКоллекции.Обязательный;
		
		ТекущаяСтрокаГруппа                         = НастройкиКоллекций.Добавить();
		ТекущаяСтрокаГруппа.Наименование            = ОписаниеКоллекции.Представление;
		ТекущаяСтрокаГруппа.ЗаблокироватьФлагВыбора = ОписаниеКоллекции.Обязательный;
		ТекущаяСтрокаГруппа.Выбрано                 = Выгружать;
		ТекущаяСтрокаГруппа.ИмяВИсточнике           = ОписаниеКоллекции.ИмяВИсточнике; // ПеречислениеСсылка.КоллекцииСервисаПрогнозированияПродаж
		ТекущаяСтрокаГруппа.ИмяВСервисе             = ОписаниеКоллекции.ИмяВСервисе;
		ТекущаяСтрокаГруппа.ТипДанных               = ОписаниеКоллекции.ТипДанных;
		ТекущаяСтрокаГруппа.УровеньДерева           = 1;
		
		Если СформироватьДеревоСохраненныхНастроек Тогда
			ТекущаяСтрокаСохраненнойГруппы                         = СохраненныеНастройкиКоллекций.Добавить();
			ТекущаяСтрокаСохраненнойГруппы.Наименование            = ОписаниеКоллекции.Представление;
			ТекущаяСтрокаСохраненнойГруппы.ЗаблокироватьФлагВыбора = ОписаниеКоллекции.Обязательный;
			ТекущаяСтрокаСохраненнойГруппы.Выбрано                 = Выгружать;
			ТекущаяСтрокаСохраненнойГруппы.ИмяВИсточнике           = ОписаниеКоллекции.ИмяВИсточнике; // ПеречислениеСсылка.КоллекцииСервисаПрогнозированияПродаж
			ТекущаяСтрокаСохраненнойГруппы.ИмяВСервисе             = ОписаниеКоллекции.ИмяВСервисе;
			ТекущаяСтрокаСохраненнойГруппы.ТипДанных               = ОписаниеКоллекции.ТипДанных;
			ТекущаяСтрокаСохраненнойГруппы.УровеньДерева           = 1;
		КонецЕсли;
		
		ОписаниеРеквизитов = ОписаниеКоллекции.ВложенноеОписание;
		
		Если ОписаниеКоллекции.ИмяВИсточнике = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Продажи
			Или ОписаниеКоллекции.ИмяВИсточнике = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Промо Тогда
			
			Если Не ИспользоватьПланированиеПродаж Тогда
				ОписаниеРеквизитов.Удалить("КодКлиента");
				ОписаниеРеквизитов.Удалить("КодХарактеристики");
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОписаниеКоллекции.ИмяВИсточнике = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Товары Тогда
			Если Не ИспользоватьПланированиеПродаж Тогда
				ОписаниеРеквизитов.Удалить("КодВидаНоменклатуры");
			КонецЕсли;
			Если Не ИспользоватьПланированиеПродажПоКатегориям Тогда
				ОписаниеРеквизитов.Удалить("КодКатегории");
				ОписаниеРеквизитов.Удалить("НаименованиеКатегории");
			КонецЕсли;
		КонецЕсли;
		
		Если ОписаниеКоллекции.ИмяВИсточнике = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Сезонность Тогда
			Если Не ИспользоватьПланированиеПродаж Тогда
				ОписаниеРеквизитов.Удалить("КодХарактеристики");
			КонецЕсли;
		КонецЕсли;
		
		ТекущиеСтрокиРеквизитов = ТекущаяСтрокаГруппа.ПолучитьЭлементы();
		Если СформироватьДеревоСохраненныхНастроек Тогда
			ТекущиеСтрокиСохраненныхРеквизитов = ТекущаяСтрокаСохраненнойГруппы.ПолучитьЭлементы();
		КонецЕсли;
		
		Для Каждого КлючЗначениеРеквизита Из ОписаниеРеквизитов Цикл
			
			ОписаниеРеквизита = СервисПрогнозированияПереопределяемыйКлиентСервер.ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание);
			ЗаполнитьЗначенияСвойств(ОписаниеРеквизита, КлючЗначениеРеквизита.Значение);
			
			Выгружать = ОписаниеРеквизита.Выгружать Или ОписаниеРеквизита.Обязательный;
			
			ТекущаяСтрокаРеквизит                         = ТекущиеСтрокиРеквизитов.Добавить();
			ТекущаяСтрокаРеквизит.Наименование            = ОписаниеРеквизита.Представление;
			ТекущаяСтрокаРеквизит.ЗаблокироватьФлагВыбора = ОписаниеРеквизита.Обязательный;
			ТекущаяСтрокаРеквизит.Выбрано                 = Выгружать;
			ТекущаяСтрокаРеквизит.ИмяВИсточнике           = ОписаниеРеквизита.ИмяВИсточнике; // Строка
			ТекущаяСтрокаРеквизит.ИмяВСервисе             = ОписаниеРеквизита.ИмяВСервисе;
			ТекущаяСтрокаРеквизит.ТипДанных               = ОписаниеРеквизита.ТипДанных;
			ТекущаяСтрокаРеквизит.Свойство                = ОписаниеРеквизита.ДополнительноеСвойство;
			ТекущаяСтрокаРеквизит.ЭтоПользовательскоеПоле = ОписаниеРеквизита.ЭтоПользовательскоеПоле;
			ТекущаяСтрокаРеквизит.УровеньДерева           = 2;
			
			Если СформироватьДеревоСохраненныхНастроек Тогда
				ТекущаяСтрокаСохраненногоРеквизита                         = ТекущиеСтрокиСохраненныхРеквизитов.Добавить();
				ТекущаяСтрокаСохраненногоРеквизита.Наименование            = ОписаниеРеквизита.Представление;
				ТекущаяСтрокаСохраненногоРеквизита.ЗаблокироватьФлагВыбора = ОписаниеРеквизита.Обязательный;
				ТекущаяСтрокаСохраненногоРеквизита.Выбрано                 = Выгружать;
				ТекущаяСтрокаСохраненногоРеквизита.ИмяВИсточнике           = ОписаниеРеквизита.ИмяВИсточнике; // Строка
				ТекущаяСтрокаСохраненногоРеквизита.ИмяВСервисе             = ОписаниеРеквизита.ИмяВСервисе;
				ТекущаяСтрокаСохраненногоРеквизита.ТипДанных               = ОписаниеРеквизита.ТипДанных;
				ТекущаяСтрокаСохраненногоРеквизита.Свойство                = ОписаниеРеквизита.ДополнительноеСвойство;
				ТекущаяСтрокаСохраненногоРеквизита.ЭтоПользовательскоеПоле = ОписаниеРеквизита.ЭтоПользовательскоеПоле;
				ТекущаяСтрокаСохраненногоРеквизита.УровеньДерева           = 2;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСводкуНастроек()
	
	Настройки = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	
	ИзменилсяИнтерфейсСервиса = ПереключательИнформацииИзмененияИнтерфейса > 0;
	НастройкиИзменены         = ИзменилсяИнтерфейсСервиса;
	ЕстьФильтрВыгрузкиДанных  = Ложь;
	
	ЗначениеКонстанты = Константы.НастройкиОтборовНаВыгрузкуСервисаПрогнозирования.Получить().Получить();
	Если ЗначениеКонстанты <> Неопределено
		И ЗначениеКонстанты.Свойство("ОбщийОтборВыгрузки") Тогда
		НастройкиОтборов = ЗначениеКонстанты.ОбщийОтборВыгрузки;
		Если НастройкиОтборов <> Неопределено Тогда
			
			ОтборыНастроек = НастройкиОтборов.Отбор; // ОтборКомпоновкиДанных.
			Для Каждого ЭлементОтбора Из ОтборыНастроек.Элементы Цикл
				Если ЭлементОтбора.Использование Тогда
					ЕстьФильтрВыгрузкиДанных = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	КоллекцияПродаж = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Продажи;
	ДанныеПоПродажам = РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж.ПолучитьИнформациюКоллекции(КоллекцияПродаж);
	
	ПоследняяВыгруженнаяПродажа = ДанныеПоПродажам.ДатаНачалаПоследнейВыгрузки;
	ДатаАктуальностиПродаж = ДанныеПоПродажам.ДатаАктуальности;
	ПоследняяПродажаВИнформационнойБазе = СервисПрогнозированияПереопределяемый.ПоследняяИзвестнаяДатаПродажи();
	
	ИзмененыФорматы = ДанныеПоПродажам.ИзмененФормат;
	ИзмененыОтборы = ДанныеПоПродажам.ИзмененыОтборы Или ИзмененыОтборыВыгрузки;
	
	ПодключениеПроизведено = ЗначениеЗаполнено(Настройки.ТокенПриложения);
	ПодключениеПроизведеноВыполненаВыгрузка = ПодключениеПроизведено
		И ЗначениеЗаполнено(ДанныеПоПродажам.ДатаНачалаПоследнейВыгрузки)
		И Не ИзменилсяИнтерфейсСервиса;
	
	// При изменении форматов или отборов требуется актуализация данных на сервере.
	// Дата актуальности продаж является курсором выгрузки информации о продажах. Сдвиг даты актуальности
	// в прошлое говорит о том, что зафиксировано проведение документов продаж прошлым периодом. В такой ситуации
	// так же требуется актуализация данных на сервере.
	ТребуетсяПолнаяВыгрузкаДанных = ИзмененыФорматы
		Или ИзмененыОтборы
		Или ПоследняяВыгруженнаяПродажа > ДатаАктуальностиПродаж;
	
	СтрокиСводки = Новый Массив();
	
	ШаблонПодключениеПроизведено = СтроковыеФункции.ФорматированнаяСтрока(
		НСтр("ru='Подключение произведено.'"));
	ШаблонПодключениеПроизведеноНеБылоВыгрузки = СтроковыеФункции.ФорматированнаяСтрока(
		НСтр("ru='Подключение произведено. <b>Выгрузка данных не производилась.</b>'"));
	ШаблонПодключениеНеПроизведено = СтроковыеФункции.ФорматированнаяСтрока(
		НСтр("ru='Подключение не произведено. <b>Выгрузка данных невозможна.</b>'"));
	
	ШаблонНастройкиИзменены = СтроковыеФункции.ФорматированнаяСтрока(
		НСтр("ru='<b>Настройки изменены.</b> Проверьте настройки:'"));
	ШаблонНастройкиНеИзменены = СтроковыеФункции.ФорматированнаяСтрока(
		НСтр("ru='<b>Настройки:</b>'"));
	
	ШаблонИсточникПродажФактические = НСтр("ru='Источник продаж: фактические продажи.'");
	ШаблонИсточникПродажПлановые = НСтр("ru='Источник продаж: планы продаж.'");
	ШаблонИсточникПродажФактическиеИПлановые = НСтр("ru='Источник продаж: фактические продажи и планы продаж.'");
	
	ШаблонПериодВыгрузкиПродаж = НСтр("ru='Период выгрузки продаж: %1 - %2'");
	ШаблонПериодВыгрузкиПродажНеЗадан = НСтр("ru='Период выгрузки продаж: не задан (выгружаются все доступные периоды).'");  
	
	ШаблонСценарийВыгрузкиКонтрольныхПланов = НСтр("ru='Контрольные планы продаж будут выгружаться по сценарию планирования:
		|%1'");
	ШаблонПериодВыгрузкиКонтрольныхПланов = НСтр("ru='Период выгрузки контрольных планов продаж: %1 - %2'");
	ШаблонПериодВыгрузкиКонтрольныхПлановНеЗадан = НСтр("ru='Период выгрузки контрольных планов продаж: не задан (выгружаются все доступные периоды).'");
	
	ШаблонКоллекцииКВыгрузке = НСтр("ru='Коллекции к выгрузке:
	|%1'");
	
	ШаблонФильтрыНастроены = НСтр("ru='Задан фильтр на выгрузку данных: Да.'");
	ШаблонФильтрыНеНастроены = НСтр("ru='Задан фильтр на выгрузку данных: Нет.'");
	
	ШаблонЗаголовокАнализДанных = НСтр("ru='<b>Анализ имеющихся и выгруженных данных:</b>'");
	
	ШаблонПоследняяВыгруженнаяПродажа = НСтр("ru='Последняя выгруженная на сервер продажа: %1'");
	ШаблонДатаАктуальностиПродаж = НСтр("ru='Дата актуальности продаж: %1'");
	ШаблонПоследняяПродажаВИнформационнойБазе = НСтр("ru='Последняя продажа в информационной базе: %1'");
	
	ШаблонОтборыИзменены = НСтр("ru='Изменены отборы: Да.'");
	ШаблонОтборыНеИзменены = НСтр("ru='Изменены отборы: Нет.'");
	
	ШаблонФорматыИзменены = НСтр("ru='Изменены форматы: Да.'");
	ШаблонФорматыНеИзменены = НСтр("ru='Изменены форматы Нет.'");
	
	ШаблонРекомендацияНичегоНеДелать = НСтр("ru='<b>Выгрузка данных не требуется.</b>'");
	ШаблонРекомендацияПолнаяВыгрузка = НСтр("ru='<b>Рекомендуется выполнить полную выгрузку данных.</b>'");
	ШаблонРекомендацияТребуетсяПервичнаяВыгрузка = НСтр("ru='<b>Требуется начать работу.</b>'");
	ШаблонРекомендацияДогрузка = НСтр("ru='<b>Рекомендуется выполнить догрузку данных.</b>'");
	
	// Статус подключения.
	СтатусПодключениеПроизведено = ?(ПодключениеПроизведеноВыполненаВыгрузка, ШаблонПодключениеПроизведено,
									?(ПодключениеПроизведено, ШаблонПодключениеПроизведеноНеБылоВыгрузки,
										ШаблонПодключениеНеПроизведено));
	ТребуетсяПервичнаяВыгрузка = Не ПодключениеПроизведеноВыполненаВыгрузка И ПодключениеПроизведено;
	
	СтрокиСводки.Добавить(СтатусПодключениеПроизведено);
	СтрокиСводки.Добавить(Символы.ПС);
	СтрокиСводки.Добавить(Символы.ПС);
	
	// Есть ли изменение настроек.
	СтатусНастройкиИзменены = ?(НастройкиИзменены, ШаблонНастройкиИзменены, ШаблонНастройкиНеИзменены);
	
	СтрокиСводки.Добавить(СтатусНастройкиИзменены);
	СтрокиСводки.Добавить(Символы.ПС);
	
	// Информация об источниках данных и периоде выгрузки продаж.
	ИсточникПродаж = ?(Настройки.ИспользоватьРеальныеОстаткиИПродажи И Настройки.ИспользоватьПлановыеОстаткиИПродажи,
		ШаблонИсточникПродажФактическиеИПлановые,
			?(Настройки.ИспользоватьРеальныеОстаткиИПродажи, ШаблонИсточникПродажФактические, ШаблонИсточникПродажПлановые));
	
	СтрокиСводки.Добавить(ИсточникПродаж);
	СтрокиСводки.Добавить(Символы.ПС);
	
	Если Настройки.ВыгружатьОстаткиЗаВсеВремя Тогда
		ЗаданОтборПериодаПродаж = Ложь;
	Иначе
		ЗаданОтборПериодаПродаж = ЗначениеЗаполнено(Настройки.ДатаНачалаВыгрузкиОстатковИПродаж)
			Или ЗначениеЗаполнено(Настройки.ДатаОкончанияВыгрузкиОстатковИПродаж);
	КонецЕсли;
	
	Если ЗаданОтборПериодаПродаж Тогда
		ПериодВыгрузкиПродаж = СтроковыеФункции.ФорматированнаяСтрока(ШаблонПериодВыгрузкиПродаж,
								Настройки.ДатаНачалаВыгрузкиОстатковИПродаж,
								КонецДня(Настройки.ДатаОкончанияВыгрузкиОстатковИПродаж));
	Иначе
		ПериодВыгрузкиПродаж = ШаблонПериодВыгрузкиПродажНеЗадан;
	КонецЕсли;
		
	СтрокиСводки.Добавить(ПериодВыгрузкиПродаж);
	СтрокиСводки.Добавить(Символы.ПС);
	
	// Информация об источнике данных и периоде выгрузки экспертных планов продаж.
	Если ЗначениеЗаполнено(Настройки.СценарийПрогнозированияКонтрольныхПланов) Тогда
		СценарийВыгрузкиКонтрольныхПланов = СтроковыеФункции.ФорматированнаяСтрока(ШаблонСценарийВыгрузкиКонтрольныхПланов,
							Настройки.СценарийПрогнозированияКонтрольныхПланов);
		СтрокиСводки.Добавить(СценарийВыгрузкиКонтрольныхПланов);
		СтрокиСводки.Добавить(Символы.ПС);
		
		Если Настройки.ВыгружатьКонтрольныеПланыЗаВсеВремя Тогда
			ЗаданОтборПериодаКонтрольныхПланов = Ложь;
		Иначе
			ЗаданОтборПериодаКонтрольныхПланов = ЗначениеЗаполнено(Настройки.ДатаНачалаВыгрузкиКонтрольныхПланов)
				Или ЗначениеЗаполнено(Настройки.ДатаОкончанияВыгрузкиКонтрольныхПланов);
		КонецЕсли;
		
		Если ЗаданОтборПериодаКонтрольныхПланов Тогда
			ПериодВыгрузкиКонтрольныхПланов = СтроковыеФункции.ФорматированнаяСтрока(ШаблонПериодВыгрузкиКонтрольныхПланов,
								Настройки.ДатаНачалаВыгрузкиКонтрольныхПланов,
								КонецДня(Настройки.ДатаОкончанияВыгрузкиКонтрольныхПланов));
		Иначе
			ПериодВыгрузкиКонтрольныхПланов = ШаблонПериодВыгрузкиКонтрольныхПлановНеЗадан;
		КонецЕсли;
		
		СтрокиСводки.Добавить(ПериодВыгрузкиКонтрольныхПланов);
		СтрокиСводки.Добавить(Символы.ПС);
	КонецЕсли;
	СтрокиСводки.Добавить(Символы.ПС);
	
	// Информация о коллекциях к выгрузке.
	ПредставлениеКоллекций = Новый Массив();
	Для Каждого КлючЗначение Из Настройки.Коллекции Цикл
		Если КлючЗначение.Значение.Выгружать Тогда
			СтрокаКоллекции = Символы.Таб + "%1 " + КлючЗначение.Значение.Представление;
			СтрокаКоллекции = Новый ФорматированнаяСтрока(СтрШаблон(СтрокаКоллекции, Символ(8226)));
			ПредставлениеКоллекций.Добавить(СтрокаКоллекции);
		КонецЕсли;
	КонецЦикла;
	КоллекцииКВыгрузке = СтроковыеФункции.ФорматированнаяСтрока(ШаблонКоллекцииКВыгрузке,
		СтрСоединить(ПредставлениеКоллекций, Символы.ПС));
	СтрокиСводки.Добавить(КоллекцииКВыгрузке);
	СтрокиСводки.Добавить(Символы.ПС);
	СтрокиСводки.Добавить(Символы.ПС);
	
	// Информация о фильтрах.
	ИнформацияОФильтрах = СтроковыеФункции.ФорматированнаяСтрока(?(ЕстьФильтрВыгрузкиДанных, ШаблонФильтрыНастроены,
		ШаблонФильтрыНеНастроены));
	СтрокиСводки.Добавить(ИнформацияОФильтрах);
	СтрокиСводки.Добавить(Символы.ПС);
	СтрокиСводки.Добавить(Символы.ПС);
	
	// Анализ данных.
	ЗаголовокАнализДанных = СтроковыеФункции.ФорматированнаяСтрока(ШаблонЗаголовокАнализДанных);
	СтрокиСводки.Добавить(ЗаголовокАнализДанных);
	СтрокиСводки.Добавить(Символы.ПС);
	
	// Сводка по продажам.
	ИнформацияПоследняяВыгруженнаяПродажа = СтроковыеФункции.ФорматированнаяСтрока(ШаблонПоследняяВыгруженнаяПродажа,
		ПоследняяВыгруженнаяПродажа);
	СтрокиСводки.Добавить(ИнформацияПоследняяВыгруженнаяПродажа);
	СтрокиСводки.Добавить(Символы.ПС);
	
	ИнформацияДатаАктуальностиПродаж = СтроковыеФункции.ФорматированнаяСтрока(ШаблонДатаАктуальностиПродаж,
		ДатаАктуальностиПродаж);
	СтрокиСводки.Добавить(ИнформацияДатаАктуальностиПродаж);
	СтрокиСводки.Добавить(Символы.ПС);
	
	ИнформацияПоследняяПродажаВИнформационнойБазе = СтроковыеФункции.ФорматированнаяСтрока(ШаблонПоследняяПродажаВИнформационнойБазе,
		ПоследняяПродажаВИнформационнойБазе);
	СтрокиСводки.Добавить(ИнформацияПоследняяПродажаВИнформационнойБазе);
	СтрокиСводки.Добавить(Символы.ПС);
	СтрокиСводки.Добавить(Символы.ПС);
	
	// Информация об отборах и форматах.
	ИнформацияОтборыИзменены = ?(ИзмененыОтборы, ШаблонОтборыИзменены, ШаблонОтборыНеИзменены);
	ИнформацияФорматыИзменены = ?(ИзмененыФорматы, ШаблонФорматыИзменены, ШаблонФорматыНеИзменены);
	СтрокиСводки.Добавить(ИнформацияОтборыИзменены);
	СтрокиСводки.Добавить(Символы.ПС);
	СтрокиСводки.Добавить(ИнформацияФорматыИзменены);
	СтрокиСводки.Добавить(Символы.ПС);
	СтрокиСводки.Добавить(Символы.ПС);
	
	Если ИзменилсяИнтерфейсСервиса Тогда
		ШаблонИзмененИнтерфейсСервиса = НСтр("ru = '<b>Изменилась версия интерфейса сервиса.</b>'");
		ИнформацияИнтерфейсСервисаИзменен = СтроковыеФункции.ФорматированнаяСтрока(ШаблонИзмененИнтерфейсСервиса);
		СтрокиСводки.Добавить(ИнформацияИнтерфейсСервисаИзменен);
		СтрокиСводки.Добавить(Символы.ПС);
	КонецЕсли;
	
	Если Не РаботаМастераЗавершена Тогда
		// Рекомендация.
		Если ТребуетсяПервичнаяВыгрузка Тогда
			Рекомендация = СтроковыеФункции.ФорматированнаяСтрока(ШаблонРекомендацияТребуетсяПервичнаяВыгрузка);
		ИначеЕсли ТребуетсяПолнаяВыгрузкаДанных Тогда
			Рекомендация = СтроковыеФункции.ФорматированнаяСтрока(ШаблонРекомендацияПолнаяВыгрузка);
		ИначеЕсли ПоследняяПродажаВИнформационнойБазе > ДатаАктуальностиПродаж Тогда
			Рекомендация = СтроковыеФункции.ФорматированнаяСтрока(ШаблонРекомендацияДогрузка);
		Иначе
			Рекомендация = СтроковыеФункции.ФорматированнаяСтрока(ШаблонРекомендацияНичегоНеДелать);
		КонецЕсли;
		СтрокиСводки.Добавить(Рекомендация);
	КонецЕсли;
	
	СводкаНастроек.УстановитьФорматированнуюСтроку(Новый ФорматированнаяСтрока(СтрокиСводки));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	МодульИнтернетПоддержкаПользователей = СервисПрогнозирования.МодульИнтернетПоддержкаПользователей();
	Если МодульИнтернетПоддержкаПользователей <> Неопределено Тогда
		ИТСПодключен = МодульИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	Иначе
		ИТСПодключен = Ложь;
	КонецЕсли;
	
	Элементы.Шапка.Видимость                  = Истина;
	Элементы.Подвал.Видимость                 = Истина;
	Элементы.КонтрольныеПланыПродаж.Видимость = Ложь;
	
	Если ИспользоватьПланированиеПродаж И ИспользоватьПланированиеПродажПоКатегориям Тогда
		Элементы.ГруппаИспользованияФОПланирования.Видимость = Ложь;
	Иначе
		Элементы.ГруппаИспользованияФОПланирования.Видимость = Истина;
		МассивСтрок = Новый Массив();
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
			НСтр("ru = 'В информационной базе не используется планирование '"),
			Новый Шрифт("Arial", 10, Истина))
			);
		Если Не ИспользоватьПланированиеПродаж Тогда
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'продаж по номенклатуре'"), Новый Шрифт("Arial", 10, Истина, Ложь, Истина)));
			Элементы.ДекорацияИнформацияИспользованияФОПланированияЗаголовок.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
			Элементы.ДекорацияИнформацияИспользованияФОПланирования.Заголовок = НСтр("ru = 'Прогнозирование будет осуществляться только по категориям товаров.
				|Для возможности прогнозирования по номенклатуре, включите использование планов продаж в разделе НСИ и администрирование -
				|Настройка НСИ и разделов - Бюджетирование и планирование - Планирование.'");
			Элементы.КонтрольныеПланыПродаж.Видимость = Ложь;
		Иначе
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'продаж по категориям товаров'"), Новый Шрифт("Arial", 10, Истина, Ложь, Истина)));
			Элементы.ДекорацияИнформацияИспользованияФОПланированияЗаголовок.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
			Элементы.ДекорацияИнформацияИспользованияФОПланирования.Заголовок = НСтр("ru = 'Прогнозирование будет осуществляться только по номенклатуре.
				|Для возможности прогнозирования по категориям, включите использование планов продаж по категориям в разделе НСИ и администрирование -
				|Настройка НСИ и разделов - Бюджетирование и планирование - Планирование.'");
		КонецЕсли;
	КонецЕсли;
	
	Если ПереключательИнформацииИзмененияИнтерфейса = 0 Тогда
		Элементы.ГруппаИнформацияИзмененияИнтерфейса.Видимость  = Ложь;
		Элементы.ГруппаДоступВосстановлен.Видимость             = Ложь;
		Элементы.ГруппаОжидаетсяВосстановлениеДоступа.Видимость = Ложь;
	ИначеЕсли ПереключательИнформацииИзмененияИнтерфейса = 1 Тогда
		Элементы.ГруппаИнформацияИзмененияИнтерфейса.Видимость  = Истина;
		Элементы.ГруппаДоступВосстановлен.Видимость             = Истина;
		Элементы.ГруппаОжидаетсяВосстановлениеДоступа.Видимость = Ложь;
	Иначе
		Элементы.ГруппаИнформацияИзмененияИнтерфейса.Видимость  = Истина;
		Элементы.ГруппаДоступВосстановлен.Видимость             = Ложь;
		Элементы.ГруппаОжидаетсяВосстановлениеДоступа.Видимость = Истина;
	КонецЕсли;
	
	Если Не ВыполненПереходКСтраницеАктивногоПодключения
		И ПереключательЗаявкаАвторизация = 0 Тогда
		Элементы.СтраницыЗаявкаНаПодключениеИАвторизация.ТекущаяСтраница = Элементы.СтраницаЗаявкаНаПодключение;
	ИначеЕсли ВыполненПереходКСтраницеАктивногоПодключения
		Или ПереключательЗаявкаАвторизация = 1 Тогда
		Элементы.СтраницыЗаявкаНаПодключениеИАвторизация.ТекущаяСтраница = Элементы.СтраницаВосстановлениеПодключения;
	КонецЕсли;
	
	Элементы.ПереключательЗаявкаАвторизация.Видимость = Не ЗначениеЗаполнено(ТокенПриложения);
	Элементы.ДекорацияСтраницаВосстановлениеПодключенияЗаголовок.Видимость = Не ЗначениеЗаполнено(ТокенПриложения);
	Элементы.ДекорацияСтраницаВосстановлениеПодключенияЗаголовокПодключено.Видимость = ЗначениеЗаполнено(ТокенПриложения);
	
	Если ЗначениеЗаполнено(ТокенПриложения) Тогда
		Элементы.ИдентификаторПриложенияВосстановлениеПодключения.Видимость = Ложь;
		Элементы.ИдентификаторПриложенияВосстановлениеПодключенияПодключено.Видимость = Истина;
	Иначе
		Элементы.ИдентификаторПриложенияВосстановлениеПодключения.Видимость = Истина;
		Элементы.ИдентификаторПриложенияВосстановлениеПодключенияПодключено.Видимость = Ложь;
	КонецЕсли;
	
	ИдетПодключение = Не ПустаяСтрока(ИдентификаторЗаданияПовторитьРегистрацию)
		Или Не ПустаяСтрока(ИдентификаторЗаданияПодключитьсяКСервису);
	
	ОжидаетсяПодключениеИлиДоступ = ИдетПодключение
		Или СтатусПодключения = СервисПрогнозирования.СтатусПодключенияВОчереди();
	ПодключеноИлиЕстьДоступ = ЗначениеЗаполнено(ТокенПриложения)
		Или СтатусПодключения = СервисПрогнозирования.СтатусПодключенияАктивен();
	ПодключеноИЕстьДоступ = ЗначениеЗаполнено(ТокенПриложения)
		И СтатусПодключения = СервисПрогнозирования.СтатусПодключенияАктивен();
	
	Если ПодключеноИЕстьДоступ Тогда
		Если ИзмененАПИСервиса Тогда
			Элементы.ДекорацияКрестикСтатус.Видимость              = Ложь;
			Элементы.ДекорацияВосклицательныйЗнакСтатус.Видимость  = Истина;
			Элементы.ДекорацияФлажокСтатус.Видимость               = Ложь;
			Элементы.ДекорацияКрестикСтатус1.Видимость             = Ложь;
			Элементы.ДекорацияВосклицательныйЗнакСтатус1.Видимость = Истина;
			Элементы.ДекорацияФлажокСтатус1.Видимость              = Ложь;
		Иначе
			Элементы.ДекорацияКрестикСтатус.Видимость              = Ложь;
			Элементы.ДекорацияВосклицательныйЗнакСтатус.Видимость  = Ложь;
			Элементы.ДекорацияФлажокСтатус.Видимость               = Истина;
			Элементы.ДекорацияКрестикСтатус1.Видимость             = Ложь;
			Элементы.ДекорацияВосклицательныйЗнакСтатус1.Видимость = Ложь;
			Элементы.ДекорацияФлажокСтатус1.Видимость              = Истина;
		КонецЕсли;
	ИначеЕсли ОжидаетсяПодключениеИлиДоступ
		Или ПодключеноИлиЕстьДоступ Тогда
		Элементы.ДекорацияКрестикСтатус.Видимость                  = Ложь;
		Элементы.ДекорацияВосклицательныйЗнакСтатус.Видимость      = Истина;
		Элементы.ДекорацияФлажокСтатус.Видимость                   = Ложь;
		Элементы.ДекорацияКрестикСтатус1.Видимость                 = Ложь;
		Элементы.ДекорацияВосклицательныйЗнакСтатус1.Видимость     = Истина;
		Элементы.ДекорацияФлажокСтатус1.Видимость                  = Ложь;
	Иначе
		// Не подключено.
		Элементы.ДекорацияКрестикСтатус.Видимость                  = Истина;
		Элементы.ДекорацияВосклицательныйЗнакСтатус.Видимость      = Ложь;
		Элементы.ДекорацияФлажокСтатус.Видимость                   = Ложь;
		Элементы.ДекорацияКрестикСтатус1.Видимость                 = Истина;
		Элементы.ДекорацияВосклицательныйЗнакСтатус1.Видимость     = Ложь;
		Элементы.ДекорацияФлажокСтатус1.Видимость                  = Ложь;
	КонецЕсли;
	
	Элементы.ДекорацияЗаявкаНаПодключениеОтправкаЗаявки.Видимость 
		= СтатусПодключения = СервисПрогнозирования.СтатусПодключенияВОчереди()
			Или СтатусПодключения = СервисПрогнозирования.СтатусПодключенияНеПодключено()
			Или ИзмененАПИСервиса;
	Элементы.ДекорацияЗаявкаНаПодключениеОтправкаЗаявки1.Видимость 
		= СтатусПодключения = СервисПрогнозирования.СтатусПодключенияВОчереди()
			Или СтатусПодключения = СервисПрогнозирования.СтатусПодключенияНеПодключено()
			Или ИзмененАПИСервиса;
	
	Элементы.ГруппаНетПодключенияЕстьОшибкиСтраницаЗаявки.Видимость = Не ИТСПодключен;
	Элементы.ГруппаНетПодключенияЕстьОшибкиСтраницаЗаявки1.Видимость = Не ИТСПодключен;
	Элементы.ОтправитьЗаявку.Доступность = ИТСПодключен;
	Элементы.ВосстановитьДоступ.Доступность = ИТСПодключен;
	Элементы.ВосстановитьДоступ.Видимость = Не ЗначениеЗаполнено(ТокенПриложения) Или ИзмененАПИСервиса;
	
	Элементы.ДатаНачалаВыгрузкиОстатковИПродаж.Доступность = (ВыгружатьОстаткиЗаВсеВремя = 1);
	Элементы.ДатаОкончанияВыгрузкиОстатковИПродаж.Доступность = (ВыгружатьОстаткиЗаВсеВремя = 1);
	
	Элементы.ДатаНачалаВыгрузкиКонтрольныхПланов.Доступность = (ВыгружатьКонтрольныеПланыЗаВсеВремя = 1);
	Элементы.ДатаОкончанияВыгрузкиКонтрольныхПланов.Доступность = (ВыгружатьКонтрольныеПланыЗаВсеВремя = 1);
	
	Элементы.ОтправитьЗаявку.КнопкаПоУмолчанию = Ложь;
	Элементы.ВосстановитьДоступ.КнопкаПоУмолчанию = Ложь;
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаАвторизация Тогда
		
		Элементы.Далее.КнопкаПоУмолчанию = Ложь;
		Если ПереключательЗаявкаАвторизация = 0 Тогда
			Элементы.ОтправитьЗаявку.КнопкаПоУмолчанию = Истина;
		ИначеЕсли ПереключательЗаявкаАвторизация = 1
			И (Не ЗначениеЗаполнено(ТокенПриложения) Или ИзмененАПИСервиса) Тогда
			Элементы.ВосстановитьДоступ.КнопкаПоУмолчанию = Истина;
		Иначе
			Элементы.Далее.КнопкаПоУмолчанию = Истина;
		КонецЕсли;
		Элементы.Назад.Видимость = Ложь;
		Элементы.Далее.Видимость = Истина;
		Элементы.Готово.КнопкаПоУмолчанию = Ложь;
		Элементы.СтраницаТестовыйПрогноз.Видимость = Ложь;
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаТестовыйПрогноз Тогда
		
		Элементы.Назад.Видимость = Истина;
		Элементы.Далее.КнопкаПоУмолчанию = Ложь;
		Элементы.Далее.Видимость = Ложь;
		Элементы.Готово.КнопкаПоУмолчанию = Истина;
		Элементы.СтраницаТестовыйПрогноз.Видимость = Истина;
		Если РаботаМастераЗавершена Тогда
			Элементы.СтраницыТестовыйПрогнозЗапуститьИлиПоказатьСтатус.ТекущаяСтраница = 
				Элементы.СтраницыТестовыйПрогнозФормуМожноЗакрыть;
			Элементы.Готово.КнопкаПоУмолчанию = Истина;
		ИначеЕсли ВыгрузкаРанееПроизводилась Тогда
			Элементы.СтраницыТестовыйПрогнозЗапуститьИлиПоказатьСтатус.ТекущаяСтраница = 
				Элементы.СтраницыТестовыйПрогнозДовыгрузка;
			Если ТребуетсяПолнаяВыгрузкаДанных Тогда
				Элементы.ПолнаяВыгрузкаДанных.КнопкаПоУмолчанию = Истина;
			Иначе
				Элементы.ДогрузитьДанные.КнопкаПоУмолчанию = Истина;
			КонецЕсли;
		Иначе
			Элементы.СтраницыТестовыйПрогнозЗапуститьИлиПоказатьСтатус.ТекущаяСтраница = 
				Элементы.СтраницыТестовыйПрогнозЗапустить;
			Элементы.НачатьПрогнозирование.КнопкаПоУмолчанию = Истина;
		КонецЕсли;
		
	Иначе
		
		Элементы.Назад.Видимость = Истина;
		Элементы.Далее.КнопкаПоУмолчанию = Истина;
		Элементы.Далее.Видимость = Истина;
		Элементы.Готово.КнопкаПоУмолчанию = Ложь;
		Элементы.СтраницаТестовыйПрогноз.Видимость = Ложь;
		
	КонецЕсли;
	
	Элементы.СценарийПрогнозированияФактИПлан.АвтоОтметкаНезаполненного = ИспользоватьПлановыеОстаткиИПродажи;
	Элементы.СценарийПрогнозированияФактИПлан.Видимость = ИспользоватьПлановыеОстаткиИПродажи;
	
	Элементы.ВыгрузкаДанныхПоРасписаниюЗапускатьОбучение.Доступность = ВыгрузкаДанныхПоРасписаниюАктивна;
	
КонецПроцедуры

&НаСервере
Процедура УказательНаСтраницыОбработкаНавигационнойСсылкиНаСервере(НавигационнаяСсылкаФорматированнойСтроки)
	
	ЕстьОшибкаЗаполнения = Ложь;
	ВыполнитьДействияПриПереключенииСтраницНаСервере(ЕстьОшибкаЗаполнения);
	
	Если ЕстьОшибкаЗаполнения Тогда
		Возврат; // Отмена переключения страницы из-за наличия проблем заполнения в настройках.
	КонецЕсли;
	
	ИмеющиесяСтраницы = ИмеющиесяСтраницы();
	ИндексСтраницы = ИмеющиесяСтраницы.Найти(НавигационнаяСсылкаФорматированнойСтроки);
	Элементы.Страницы.ТекущаяСтраница = Элементы[ИмеющиесяСтраницы[ИндексСтраницы]];
	
	ВыполнитьДействияПослеПереключенияСтраниц();
	
	СформироватьУказательСтраниц(ИндексСтраницы);
	УстановитьТексты();
	
КонецПроцедуры

&НаСервере
Процедура СуществующийСценарийПрогнозированияОбработкаВыбораНаСервере(ВыбранноеЗначение, СтандартнаяОбработка)
	
	Периодичность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение, "Периодичность");
	Если ПоддерживаемыеПериодичности.НайтиПоЗначению(Периодичность) = Неопределено Тогда
		СтандартнаяОбработка   = Ложь;
		ТекстСообщенияОбОшибке = НСтр("ru = 'Периодичность ""%1"" у сценария ""%2"" не поддерживается сервисом.'");
		ТекстСообщенияОбОшибке = СтрШаблон(ТекстСообщенияОбОшибке, Строка(Периодичность), Строка(ВыбранноеЗначение));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщенияОбОшибке, Неопределено, "СценарийПрогнозирования");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДалееНаСервере()
	
	ЕстьОшибкаЗаполнения = Ложь;
	ВыполнитьДействияПриПереключенииСтраницНаСервере(ЕстьОшибкаЗаполнения);
	
	Если ЕстьОшибкаЗаполнения Тогда
		Возврат; // Отмена переключения страницы из-за наличия проблем заполнения в настройках.
	КонецЕсли;
	
	ИмеющиесяСтраницы = ИмеющиесяСтраницы();
	ИндексСтраницы = ИмеющиесяСтраницы.Найти(Элементы.Страницы.ТекущаяСтраница.Имя);
	Если ИндексСтраницы < ИмеющиесяСтраницы.Количество() - 1 Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы[ИмеющиесяСтраницы[ИндексСтраницы + 1]];
		СформироватьУказательСтраниц(ИндексСтраницы + 1);
	КонецЕсли;
	
	ВыполнитьДействияПослеПереключенияСтраниц();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьДействияПослеПереключенияСтраниц()
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаТестовыйПрогноз Тогда
		ЗаполнитьСводкуНастроек();
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТексты()
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаТестовыйПрогнозПравоНовый Тогда
		Элементы.Далее.Заголовок = НСтр("ru = 'Начать прогнозирование'");
		Команды.Далее.Подсказка = НСтр("ru = 'Начать прогнозирование'");
	Иначе
		Элементы.Далее.Заголовок = НСтр("ru = 'Далее >>'");
		Команды.Далее.Подсказка = НСтр("ru = 'Далее >>'");
	КонецЕсли;
	
	Если ИзмененАПИСервиса Тогда
		ТекстЗаголовка = НСтр("ru = 'Необходимо восстановить доступ к сервису на новой версии для продолжения работы.
			|Восстановление выполняется без ожидания подтверждения, после которого нужно будет заново выгрузить коллекции.'");
		Элементы.ДекорацияЗаявкаНаПодключениеОтправкаЗаявки.Заголовок  = ТекстЗаголовка;
		Элементы.ДекорацияЗаявкаНаПодключениеОтправкаЗаявки1.Заголовок = ТекстЗаголовка;
	КонецЕсли;
	
	Элементы.НастроитьИнтервалВыгрузкиДанных.Заголовок = Строка(ВыгрузкаДанныхВСервисПрогнозированияПродаж);
	Элементы.НастроитьИнтервалЗагрузкиДанных.Заголовок = Строка(ЗагрузкаДанныхИзСервисаПрогнозированияПродаж);
	
КонецПроцедуры

&НаСервере
Процедура ПодключитьсяКСервису()
	
	ЕстьИзменения = ОбновитьНастройкиАвторизации();
	
	Если ТипАвторизации = 0
		И (ЕстьИзменения Или ИзмененАПИСервиса) Тогда
		
		СервисПрогнозирования.ЗарегистрироватьПриложениеВСервисе(ИзмененАПИСервиса);
		
	ИначеЕсли ТипАвторизации = 1
		И (ЕстьИзменения Или ИзмененАПИСервиса) Тогда
		
		Тикет = ПолучитьТикет();
		Если Не ПустаяСтрока(Тикет) Тогда
			// Вызвать целевой сервис, используя полученный тикет.
			СервисПрогнозирования.ЗарегистрироватьПриложениеВСервисеПоИТС(Тикет, ИзмененАПИСервиса);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьИзменения Или ИзмененАПИСервиса Тогда
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		ПараметрыВыполнения.ЗапуститьВФоне = Истина;
		ПараметрыВыполнения.ОжидатьЗавершение = 0;
		
		РезультатРасчета = Неопределено;
		Если ТипАвторизации = 0 Тогда
			РезультатРасчета = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
				"СервисПрогнозирования.ЗарегистрироватьПриложениеВСервисе",
				ИзмененАПИСервиса);
		ИначеЕсли ТипАвторизации = 1 Тогда
			Тикет = ПолучитьТикет();
			Если Не ПустаяСтрока(Тикет) Тогда
				// Вызвать целевой сервис, используя полученный тикет.
				РезультатРасчета = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
					"СервисПрогнозирования.ЗарегистрироватьПриложениеВСервисеПоИТС",
					Тикет, ИзмененАПИСервиса);
			КонецЕсли;
		КонецЕсли;
		
		Если РезультатРасчета <> Неопределено
			И РезультатРасчета.Статус = "Выполняется" Тогда
			ИдентификаторЗаданияПодключитьсяКСервису = РезультатРасчета.ИдентификаторЗадания;
			АдресХранилищаПодключитьсяКСервису = РезультатРасчета.АдресРезультата;
		ИначеЕсли РезультатРасчета <> Неопределено
			И РезультатРасчета.Статус = "Выполнено" Тогда
			АдресХранилищаПодключитьсяКСервису = РезультатРасчета.АдресРезультата;
			ПодключитьсяКСервисуНаСервере(Истина);
		КонецЕсли;
	КонецЕсли;
	
	ПолучитьНастройкиСервиса();
	РассчитатьСтатусПодключения();
	УстановитьВидимостьДоступность();
	УстановитьТексты();
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьЗаявкуВСервис()
	
	ОбновитьНастройкиЗаявкиНаПодключение();
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	РезультатРасчета = Неопределено;
	РезультатРасчета = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
		"СервисПрогнозирования.ОтправитьЗаявкуВСервис");
	
	Если РезультатРасчета <> Неопределено
		И РезультатРасчета.Статус = "Выполняется" Тогда
		ИдентификаторЗаданияОтправитьЗаявкуВСервис = РезультатРасчета.ИдентификаторЗадания;
		АдресХранилищаОтправитьЗаявкуВСервис = РезультатРасчета.АдресРезультата;
	ИначеЕсли РезультатРасчета <> Неопределено
		И РезультатРасчета.Статус = "Выполнено" Тогда
		АдресХранилищаОтправитьЗаявкуВСервис = РезультатРасчета.АдресРезультата;
		ОтправитьЗаявкуВСервисНаСервере(Истина);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусПодключенияНаСервере()
	
	Если ЗначениеЗаполнено(ТокенПриложения) Тогда
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		ПараметрыВыполнения.ЗапуститьВФоне = Истина;
		ПараметрыВыполнения.ОжидатьЗавершение = 0;
		
		РезультатРасчета = Неопределено;
		РезультатРасчета = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
			"СервисПрогнозирования.ПолучитьСтатусПодключенияКСервису");
		
		Если РезультатРасчета <> Неопределено
			И РезультатРасчета.Статус = "Выполняется" Тогда
			ИдентификаторЗаданияОбновитьСтатусПодключения = РезультатРасчета.ИдентификаторЗадания;
			АдресХранилищаОбновитьСтатусПодключения = РезультатРасчета.АдресРезультата;
		ИначеЕсли РезультатРасчета <> Неопределено
			И РезультатРасчета.Статус = "Выполнено" Тогда
			АдресХранилищаОбновитьСтатусПодключения = РезультатРасчета.АдресРезультата;
			ОбновитьСтатусПодключенияРезультатНаСервере(Истина);
		КонецЕсли;
		
	Иначе
		
		МодульИнтернетПоддержкаПользователей = СервисПрогнозирования.МодульИнтернетПоддержкаПользователей();
		Если МодульИнтернетПоддержкаПользователей <> Неопределено Тогда
			ИТСПодключен = МодульИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
		Иначе
			ИТСПодключен = Ложь;
		КонецЕсли;
		
		Элементы.ГруппаНетПодключенияЕстьОшибкиСтраницаЗаявки.Видимость  = Не ИТСПодключен;
		Элементы.ГруппаНетПодключенияЕстьОшибкиСтраницаЗаявки1.Видимость = Не ИТСПодключен;
		Элементы.ОтправитьЗаявку.Доступность                             = ИТСПодключен;
		Элементы.ВосстановитьДоступ.Доступность                          = ИТСПодключен;
		Элементы.ВосстановитьДоступ.Видимость                            = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьНастройкиАвторизации()
	
	УстановитьПривилегированныйРежим(Истина);
	Пароли = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("ПарольПользователяСервисаПрогнозирования",
		"Пароль");
	УстановитьПривилегированныйРежим(Ложь);
	
	ПарольСтарый = ?(ЗначениеЗаполнено(Пароли),
		Пароли, "");
	
	НеобходимыеНастройки = "Логин, Пароль, АдресПодключения, ТипАвторизации, ИдентификаторПриложения, ИмяБазы";
	
	Настройки = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	
	НастройкиСохраненные = Новый Структура(НеобходимыеНастройки);
	НастройкиНовые = Новый Структура(НеобходимыеНастройки);
	
	ЗаполнитьЗначенияСвойств(НастройкиСохраненные, Настройки);
	ЗаполнитьЗначенияСвойств(НастройкиНовые, ЭтотОбъект);
	
	ЕстьИзменения = Не ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(НастройкиСохраненные, НастройкиНовые);
	
	ПарольИзменен = ПарольСтарый <> Пароль И ЗначениеЗаполнено(Пароль);
	
	Если ЕстьИзменения Тогда
		ЗаполнитьЗначенияСвойств(Настройки, ЭтотОбъект, НеобходимыеНастройки);
		СервисПрогнозирования.ОбновитьНастройкиСервиса(Настройки);
		СервисПрогнозирования.УстановитьПараметрыСеансаНастроекСервисаПрогнозирования();
	КонецЕсли;
	Если ПарольИзменен Тогда
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище("ПарольПользователяСервисаПрогнозирования",
			Пароль, "Пароль");
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ЕстьИзменения;
	
КонецФункции

&НаСервере
Функция ОбновитьНастройкиЗаявкиНаПодключение()
	
	Настройки = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	
	НазваниеКомпанииИзменено = Настройки.НазваниеКомпании <> НазваниеКомпании И ЗначениеЗаполнено(НазваниеКомпании);
	ФИОКонтактногоЛицаИзменено = Настройки.ФИОКонтактногоЛица <> ФИОКонтактногоЛица И ЗначениеЗаполнено(ФИОКонтактногоЛица);
	ЭлектроннаяПочтаИзменена = Настройки.ЭлектроннаяПочта <> ЭлектроннаяПочта И ЗначениеЗаполнено(ЭлектроннаяПочта);
	НомерТелефонаИзменен = Настройки.НомерТелефона <> НомерТелефона И ЗначениеЗаполнено(НомерТелефона);
	
	ЕстьИзменения = НазваниеКомпанииИзменено
		Или ФИОКонтактногоЛицаИзменено
		Или ЭлектроннаяПочтаИзменена
		Или НомерТелефонаИзменен;
	
	Если ЕстьИзменения Тогда
		ЗаполнитьЗначенияСвойств(Настройки, ЭтотОбъект, "НазваниеКомпании, ФИОКонтактногоЛица, ЭлектроннаяПочта, НомерТелефона, НомерТелефонаЗначенияПолей, НомерТелефонаКомментарий");
		СервисПрогнозирования.ОбновитьНастройкиСервиса(Настройки);
		СервисПрогнозирования.УстановитьПараметрыСеансаНастроекСервисаПрогнозирования();
	КонецЕсли;
	
	Возврат ЕстьИзменения;
	
КонецФункции

&НаСервере
Процедура СохранитьСоставПередаваемыхДанных()
	
	Настройки        = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	Описание         = СервисПрогнозированияПереопределяемый.ПолучитьОписаниеРеквизитовВсехКоллекций();
	ОсновноеОписание = СервисПрогнозированияПереопределяемый.ОсновноеОписаниеВыгружаемогоЭлементаДанных();
	
	Для Каждого УровеньКоллекций Из НастройкиВыгрузкиМетаданных.ПолучитьЭлементы() Цикл
		
		ОписаниеКоллекции = Описание[УровеньКоллекций.ИмяВИсточнике];
		ОписаниеКоллекции.Выгружать = УровеньКоллекций.Выбрано;
		
		Для Каждого УровеньРеквизитов Из УровеньКоллекций.ПолучитьЭлементы() Цикл
			
			Если ОписаниеКоллекции.ВложенноеОписание.Свойство(УровеньРеквизитов.ИмяВИсточнике) Тогда
				ОписаниеКоллекции.ВложенноеОписание[УровеньРеквизитов.ИмяВИсточнике].Выгружать
					= УровеньРеквизитов.Выбрано;
			ИначеЕсли УровеньРеквизитов.Выбрано Тогда
				
				ОсновноеОписание.Вставить("ИмяВСервисе",   УровеньРеквизитов.ИмяВСервисе);
				ОсновноеОписание.Вставить("Обязательный",  Ложь);
				ОсновноеОписание.Вставить("Выгружать",     Истина);
				ОсновноеОписание.Вставить("ИмяВИсточнике", УровеньРеквизитов.ИмяВИсточнике);
				ОсновноеОписание.Вставить("ТипДанных",     УровеньРеквизитов.ТипДанных);
				
				ДобавляемоеОписание = СервисПрогнозированияПереопределяемыйКлиентСервер.ОписаниеВыгружаемогоЭлементаДанных(
					ОсновноеОписание, УровеньРеквизитов.Наименование);
				ДобавляемоеОписание.ЭтоПользовательскоеПоле = Истина;
				ДобавляемоеОписание.ДополнительноеСвойство = УровеньРеквизитов.Свойство;
				ОписаниеКоллекции.ВложенноеОписание.Вставить(УровеньРеквизитов.ИмяВИсточнике,
					ДобавляемоеОписание);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Настройки.Коллекции = Описание;
	
	СервисПрогнозирования.ОбновитьНастройкиСервиса(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура НачатьПрогнозированиеНаСервере(ТребуетсяПолнаяВыгрузка = Ложь, ТребуетсяРасчетПрогноза = Истина, ТребуетсяПроверкаВидаПлана = Ложь)
	
	Если ТребуетсяПроверкаВидаПлана Тогда
		НастройкиСервиса = СервисПрогнозирования.ПолучитьНастройкиСервиса();
		ТребуемыеРеквизиты = "ТипПлана, НачалоПрогнозирования, ЗаполнятьПартнераВТЧ, ЗаполнятьПоХарактеристикамНоменклатуры";
		РеквизитыВидаПлана = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидПлана, ТребуемыеРеквизиты);
		Если РеквизитыВидаПлана.ТипПлана =  Перечисления.ТипыПланов.ПланПродажПоКатегориям Тогда
			КоллекцияТовары = НастройкиСервиса.Коллекции[Перечисления.КоллекцииСервисаПрогнозированияПродаж.Товары];
			Если Не КоллекцияТовары.Выгружать
				Или Не КоллекцияТовары.ВложенноеОписание["КодКатегории"].Выгружать Тогда
					ТекстОшибки = НСтр("ru='Прогнозирование по категориям невозможно, поскольку в сервис прогнозирования не выгружена информация о категориях.
					|Требуется отметить к выгрузке коллекцию ""Товары"", и ее вложенное поле ""Код категории"", после чего произвести полную выгрузку данных.'");
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
					Возврат;
			КонецЕсли;
		Иначе
			КоллекцияПродажи = НастройкиСервиса.Коллекции[Перечисления.КоллекцииСервисаПрогнозированияПродаж.Продажи];
			ЕстьОшибка = Ложь;
			Если РеквизитыВидаПлана.ЗаполнятьПартнераВТЧ
				И Не КоллекцияПродажи.ВложенноеОписание["КодКлиента"].Выгружать Тогда
					ТекстОшибки = НСтр("ru='Прогнозирование с детализацией до клиента невозможно, поскольку в сервис прогнозирования не выгружена информация о кодах покупателей.
					|Требуется отметить к выгрузке в коллекции ""Продажи"" ее вложенное поле ""Код покупателя"", после чего произвести полную выгрузку данных.'");
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
					ЕстьОшибка = Истина;
			КонецЕсли;
			Если РеквизитыВидаПлана.ЗаполнятьПоХарактеристикамНоменклатуры
				И Не КоллекцияПродажи.ВложенноеОписание["КодХарактеристики"].Выгружать Тогда
					ТекстОшибки = НСтр("ru='Прогнозирование с детализацией до характеристик номенклатуры невозможно, поскольку в сервис прогнозирования не выгружена информация о кодах характеристик.
					|Требуется отметить к выгрузке в коллекции ""Продажи"" ее вложенное поле ""Код характеристики"", после чего произвести полную выгрузку данных.'");
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
					ЕстьОшибка = Истина;
			КонецЕсли;
			Если ЕстьОшибка Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ТребуетсяПолнаяВыгрузка Тогда
		АктуализироватьИнформациюИзмененияФорматовКоллекций();
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	ПараметрыПроцедуры = Новый Структура();
	ПараметрыПроцедуры.Вставить("ВидПлана", ВидПлана);
	ПараметрыПроцедуры.Вставить("ТребуетсяПолнаяВыгрузка", ТребуетсяПолнаяВыгрузка);
	ПараметрыПроцедуры.Вставить("ТребуетсяРасчетПрогноза", ТребуетсяРасчетПрогноза);
	
	РезультатРасчета = ДлительныеОперации.ВыполнитьВФоне("Обработки.ПанельУправленияСервисомПрогнозирования.НачатьПрогнозирование",
	                                                     ПараметрыПроцедуры,
	                                                     ПараметрыВыполнения);
	
	РаботаМастераЗавершена = Истина;
	ЗаполнитьСводкуНастроек();
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкуРасписанияОбмена(ОписаниеОповещения, Расписание)
	Если Расписание <> Неопределено Тогда
		Диалог = Новый ДиалогРасписанияРегламентногоЗадания(Расписание);
		Диалог.Показать(ОписаниеОповещения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРасписаниеВыгрузкиДанных(РасписаниеЗадания, ДополнительныеПараметры) Экспорт
	
	Если РасписаниеЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузкаДанныхВСервисПрогнозированияПродаж = РасписаниеЗадания;
	Элементы.НастроитьИнтервалВыгрузкиДанных.Заголовок = Строка(ВыгрузкаДанныхВСервисПрогнозированияПродаж);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРасписаниеЗагрузкиДанных(РасписаниеЗадания, ДополнительныеПараметры) Экспорт
	
	Если РасписаниеЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузкаДанныхИзСервисаПрогнозированияПродаж = РасписаниеЗадания;
	Элементы.НастроитьИнтервалЗагрузкиДанных.Заголовок = Строка(ЗагрузкаДанныхИзСервисаПрогнозированияПродаж);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КоллекцииЭлементовОтборовРавны(Коллекция1, Коллекция2, ПорядокИмеетЗначения = Истина)
	
	Если Не Коллекция1.Количество() = Коллекция2.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПорядокИмеетЗначения Тогда
		
		Для Индекс = 0 По Коллекция1.Количество() - 1 Цикл
			
			Если Коллекция1[Индекс].ВидСравнения <> Коллекция2[Индекс].ВидСравнения
				Или Коллекция1[Индекс].Использование <> Коллекция2[Индекс].Использование
				Или Коллекция1[Индекс].ЛевоеЗначение <> Коллекция2[Индекс].ЛевоеЗначение
				Или Коллекция1[Индекс].ПравоеЗначение <> Коллекция2[Индекс].ПравоеЗначение
				Или Коллекция1[Индекс].Представление <> Коллекция2[Индекс].Представление Тогда
				
				Возврат Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого ЭлементКоллекции1 Из Коллекция1 Цикл
			
			ЭлементОбоихКоллекций = Ложь;
			
			Для Каждого ЭлементКоллекции2 Из Коллекция2 Цикл
				
				Если ЭлементКоллекции1.ВидСравнения = ЭлементКоллекции2.ВидСравнения
					И ЭлементКоллекции1.Использование = ЭлементКоллекции2.Использование
					И ЭлементКоллекции1.ЛевоеЗначение = ЭлементКоллекции2.ЛевоеЗначение
					И ЭлементКоллекции1.ПравоеЗначение = ЭлементКоллекции2.ПравоеЗначение
					И ЭлементКоллекции1.Представление = ЭлементКоллекции2.Представление Тогда
					
					ЭлементОбоихКоллекций = Истина;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если Не ЭлементОбоихКоллекций Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗаписатьНастройки()
	
	// Расписание
	УстановитьПривилегированныйРежим(Истина);
	ДанныеЗадания = ПолучитьРегламентноеЗадание("ВыгрузкаДанныхВСервисПрогнозированияПродаж");
	Если ДанныеЗадания <> Неопределено Тогда
		ПараметрыОбновленияЗадания = Новый Структура("Расписание", ВыгрузкаДанныхВСервисПрогнозированияПродаж);
		РегламентныеЗаданияСервер.ИзменитьЗадание(ДанныеЗадания, ПараметрыОбновленияЗадания);
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеЗадания = ПолучитьРегламентноеЗадание("ЗагрузкаДанныхИзСервисаПрогнозированияПродаж");
	Если ДанныеЗадания <> Неопределено Тогда
		ПараметрыОбновленияЗадания.Расписание = ЗагрузкаДанныхИзСервисаПрогнозированияПродаж;
		РегламентныеЗаданияСервер.ИзменитьЗадание(ДанныеЗадания, ПараметрыОбновленияЗадания);
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	Настройки = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	
	НастроенаВыгрузкаОстатковИПродажЗаПериод = (ВыгружатьОстаткиЗаВсеВремя = 1);
	Если НастроенаВыгрузкаОстатковИПродажЗаПериод Тогда
		
		Если Не ЗначениеЗаполнено(ДатаОкончанияВыгрузкиОстатковИПродаж) Тогда
			ВыгружатьОстаткиЗаВсеВремя                = 0;
			НастроенаВыгрузкаОстатковИПродажЗаПериод  = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	НастроенаВыгрузкаЭкспертныхПлановЗаПериод = (ВыгружатьКонтрольныеПланыЗаВсеВремя = 1);
	Если НастроенаВыгрузкаЭкспертныхПлановЗаПериод Тогда
		
		Если Не ЗначениеЗаполнено(ДатаОкончанияВыгрузкиКонтрольныхПланов) Тогда
			ВыгружатьКонтрольныеПланыЗаВсеВремя       = 0;
			НастроенаВыгрузкаЭкспертныхПлановЗаПериод = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ИзмененыОтборы = Настройки.ВыгружатьОстаткиЗаВсеВремя <> (Не НастроенаВыгрузкаОстатковИПродажЗаПериод)
		Или Настройки.ДатаНачалаВыгрузкиОстатковИПродаж <> ДатаНачалаВыгрузкиОстатковИПродаж
		Или Настройки.ДатаОкончанияВыгрузкиОстатковИПродаж <> ДатаОкончанияВыгрузкиОстатковИПродаж
		Или Настройки.ИспользоватьРеальныеОстаткиИПродажи <> ИспользоватьРеальныеОстаткиИПродажи
		Или Настройки.ИспользоватьПлановыеОстаткиИПродажи <> ИспользоватьПлановыеОстаткиИПродажи
		Или Настройки.СценарийПрогнозированияФактИПлан <> СценарийПрогнозированияФактИПлан
		Или Настройки.УчетПотерянныхПродаж <> УчетПотерянныхПродаж
		Или Настройки.КоэффициентВосстановленияУчетаПотерянныхПродаж <> КоэффициентВосстановленияУчетаПотерянныхПродаж;
	
	НеобходимыеНастройки = "НазваниеКомпании, ФИОКонтактногоЛица, ЭлектроннаяПочта, НомерТелефона, НомерТелефонаЗначенияПолей, НомерТелефонаКомментарий,
	|ИзмененАПИСервиса,
	|ДатаНачалаВыгрузкиОстатковИПродаж, ДатаОкончанияВыгрузкиОстатковИПродаж, 
	|ИспользоватьРеальныеОстаткиИПродажи, ИспользоватьПлановыеОстаткиИПродажи,
	|СценарийПрогнозированияФактИПлан, СценарийПрогнозированияКонтрольныхПланов,
	|ДатаНачалаВыгрузкиКонтрольныхПланов, ДатаОкончанияВыгрузкиКонтрольныхПланов,
	|УчетПотерянныхПродаж, КоэффициентВосстановленияУчетаПотерянныхПродаж,
	|ВыгрузкаДанныхПоРасписаниюАктивна,
	|ВыгрузкаДанныхПоРасписаниюЗапускатьОбучение, ЗагрузкаДанныхПоРасписаниюАктивна";
	
	ЗаполнитьЗначенияСвойств(Настройки, ЭтотОбъект, НеобходимыеНастройки);
	
	// Отборы выгрузки
	СуществующийОтборВыгрузки = Константы.НастройкиОтборовНаВыгрузкуСервисаПрогнозирования.Получить();
	СуществующийОтборВыгрузкиЗначение = Неопределено;
	Если ЗначениеЗаполнено(СуществующийОтборВыгрузки) Тогда
		СуществующийОтборВыгрузкиЗначение = СуществующийОтборВыгрузки.Получить();
	КонецЕсли;
	
	НастройкиОтборов = Новый Структура();
	НастройкиОтборов.Вставить("ОбщийОтборВыгрузки", КомпоновщикНастроекОтборовНаВыгрузку.Настройки);
	
	ХранилищеПараметров = Новый ХранилищеЗначения(НастройкиОтборов);
	
	Константы.НастройкиОтборовНаВыгрузкуСервисаПрогнозирования.Установить(ХранилищеПараметров);
	
	ИзмененыОтборыВыгрузки = Ложь;
	Если СуществующийОтборВыгрузкиЗначение <> Неопределено
		И СуществующийОтборВыгрузкиЗначение.Свойство("ОбщийОтборВыгрузки") Тогда
		СуществующийОтборКомпоновкиДанных = СуществующийОтборВыгрузкиЗначение.ОбщийОтборВыгрузки.Отбор; // ОтборКомпоновкиДанных.
		ЭлементыСуществующегоОтбора = СуществующийОтборКомпоновкиДанных.Элементы;
		
		ЭлементыНовогоОтбора = КомпоновщикНастроекОтборовНаВыгрузку.Настройки.Отбор.Элементы;
		ИзмененыОтборыВыгрузки = Не КоллекцииЭлементовОтборовРавны(
			ЭлементыСуществующегоОтбора,
			ЭлементыНовогоОтбора);
	КонецЕсли;
	
	// Отборы загрузки
	НастройкиОтборов = Новый Структура();
	НастройкиОтборов.Вставить("ОбщийОтборЗагрузки", КомпоновщикНастроекОтборовНаЗагрузку.Настройки);
	
	ХранилищеПараметров = Новый ХранилищеЗначения(НастройкиОтборов);
	
	Константы.НастройкиОтборовНаЗагрузкуСервисаПрогнозирования.Установить(ХранилищеПараметров);
	
	// Общие настройки
	
	ИспользованиеОстатковИПродажПересчитать(ЭтотОбъект);
	
	КоллекцияПродажи = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Продажи;
	КоллекцияОстатки = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Остатки;
	
	ИнфоКоллекцииПродаж = РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж.ПолучитьИнформациюКоллекции(КоллекцияПродажи);
	КоллекцияПродажВыгружалась = ИнфоКоллекцииПродаж.ДатаНачалаПоследнейВыгрузки > Дата(1, 1, 1);
	
	ИнфоКоллекцииОстатки = РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж.ПолучитьИнформациюКоллекции(КоллекцияОстатки);
	КоллекцияОстатковВыгружалась = ИнфоКоллекцииОстатки.ДатаНачалаПоследнейВыгрузки > Дата(1, 1, 1);
	
	Если ИзмененыОтборы И КоллекцияПродажВыгружалась Тогда
		ИнфоКоллекцииПродаж.ИзмененыОтборы = Истина;
		РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж.ЗаписатьИнформациюКоллекции(КоллекцияПродажи, ИнфоКоллекцииПродаж);
	КонецЕсли;
	Если ИзмененыОтборы И КоллекцияОстатковВыгружалась Тогда
		ИнфоКоллекцииОстатки.ИзмененыОтборы = Истина;
		РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж.ЗаписатьИнформациюКоллекции(КоллекцияОстатки, ИнфоКоллекцииОстатки);
	КонецЕсли;
	
	Настройки.ВыгружатьОстаткиЗаВсеВремя = Не НастроенаВыгрузкаОстатковИПродажЗаПериод;
	Настройки.ВыгружатьКонтрольныеПланыЗаВсеВремя = Не НастроенаВыгрузкаЭкспертныхПлановЗаПериод;
	
	СервисПрогнозирования.ОбновитьНастройкиСервиса(Настройки);
	СервисПрогнозирования.УстановитьПараметрыСеансаНастроекСервисаПрогнозирования();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРасписаниеВыгрузкиПоУмолчаниюСервер()
	
	ДанныеЗадания = ПолучитьРегламентноеЗадание("ВыгрузкаДанныхВСервисПрогнозированияПродаж");
	
	Если ДанныеЗадания <> Неопределено Тогда
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания();
		РасписаниеРегламентногоЗадания.ВремяНачала = Дата(1, 1, 1, 22, 0, 0);
		РасписаниеРегламентногоЗадания.ПериодПовтораДней = 1;
		РасписаниеРегламентногоЗадания.ПериодНедель = 1;
		
		ПараметрыОбновленияЗадания = Новый Структура("Расписание", РасписаниеРегламентногоЗадания);
		УстановитьПривилегированныйРежим(Истина);
		РегламентныеЗаданияСервер.ИзменитьЗадание(ДанныеЗадания, ПараметрыОбновленияЗадания);
		УстановитьПривилегированныйРежим(Ложь);
		
		ВыгрузкаДанныхВСервисПрогнозированияПродаж = РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	УстановитьТексты();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРасписаниеЗагрузкиПоУмолчаниюСервер()
	
	ДанныеЗадания = ПолучитьРегламентноеЗадание("ЗагрузкаДанныхИзСервисаПрогнозированияПродаж");
	
	Если ДанныеЗадания <> Неопределено Тогда
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания();
		РасписаниеРегламентногоЗадания.ВремяНачала = Дата(1, 1, 1, 8, 0, 0);
		РасписаниеРегламентногоЗадания.ПериодПовтораДней = 1;
		РасписаниеРегламентногоЗадания.ПериодНедель = 1;
		
		ПараметрыОбновленияЗадания = Новый Структура("Расписание", РасписаниеРегламентногоЗадания);
		УстановитьПривилегированныйРежим(Истина);
		РегламентныеЗаданияСервер.ИзменитьЗадание(ДанныеЗадания, ПараметрыОбновленияЗадания);
		УстановитьПривилегированныйРежим(Ложь);
		
		ЗагрузкаДанныхИзСервисаПрогнозированияПродаж = РасписаниеРегламентногоЗадания;
	КонецЕсли;
	УстановитьТексты();
	
КонецПроцедуры

&НаСервере
Процедура НачатьПроверкуДанныхНаСервере()
	
	Элементы.ОшибкиПроверкиДанныхГруппа.ТекущаяСтраница = Элементы.ОшибкиПроверкиДанныхРезультаты;
	Элементы.ГруппаРезультатыПроверки.ТекущаяСтраница = Элементы.ГруппаПроверкаНеЗавершена;
	
	ИнформацияОВыгружаемыхОбъектах.Очистить();
	
	ЕстьПроблемы = Ложь;
	
	СвязанныеКоллекцииИРеквизиты = СвязанныеКоллекцииИРеквизиты();
	НастройкиСервиса = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	Для Каждого КлючЗначение Из НастройкиСервиса.Коллекции Цикл
		Коллекция = КлючЗначение.Ключ;
		Представление = КлючЗначение.Значение.Представление;
		
		Если Не КлючЗначение.Значение.Выгружать Тогда
			Продолжить;
		КонецЕсли;
		
		Сводка = СервисПрогнозированияПереопределяемый.ПолучитьСводкуПоКоллекции(Коллекция);
		НоваяСтрока = ИнформацияОВыгружаемыхОбъектах.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Сводка, "ДатаПервойЗаписи, ДатаПоследнейЗаписи, КатегориальнаяКоллекция");
		
		НоваяСтрока.КоличествоЗаписей = Сводка.КоличествоДанных;
		НоваяСтрока.Коллекция = Коллекция;
		НоваяСтрока.ПредставлениеКоллекции = Представление;
		
		ТекстыОшибок = Новый Массив();
		Если НоваяСтрока.КоличествоЗаписей = 0 Тогда
			ТекстыОшибок.Добавить(ТекстОшибкиНетЗаписей());
			ЕстьПроблемы = Истина;
		КонецЕсли;
		
		СвязиОбъектов = СвязанныеКоллекцииИРеквизиты[Коллекция];
		Если СвязиОбъектов <> Неопределено Тогда
			Для Каждого КлючЗначение Из СвязиОбъектов Цикл
				НайденнаяКоллекция = НастройкиСервиса.Коллекции[КлючЗначение.Ключ];
				НайденныйРеквизитКоллекции = НайденнаяКоллекция.ВложенноеОписание[КлючЗначение.Значение];
				Если НайденнаяКоллекция.Выгружать
					И Не НайденныйРеквизитКоллекции.Выгружать Тогда
					ТекстОшибки = ТекстОшибкиНеВыбранСвязанныйРеквизитКоллекции(Представление, НайденнаяКоллекция.Представление, НайденныйРеквизитКоллекции.Представление);
					ТекстыОшибок.Добавить(ТекстОшибки);
					ЕстьПроблемы = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Продажи Тогда
			Запрос = Новый Запрос();
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Источник.Количество
			|ПОМЕСТИТЬ ВТПродажи
			|ИЗ
			|	&Источник КАК Источник
			|;
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	Источник.Количество
			|ИЗ
			|	ВТПродажи КАК Источник
			|ГДЕ
			|	Источник.Количество < 0
			|;
			|УНИЧТОЖИТЬ ВТПродажи";
			
			ЕстьОтрицательныеПродажи = Ложь;
			Если Сводка.КоличествоДанных > 0 Тогда
				Запрос.УстановитьПараметр("Источник", Сводка.КоллекцияДанных);
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					ЕстьОтрицательныеПродажи = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ЕстьОтрицательныеПродажи Тогда
				ТекстыОшибок.Добавить(ТекстОшибкиЕстьОтрицательныеПродажи());
				ЕстьПроблемы = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		НоваяСтрока.ОписаниеОшибки = СтрСоединить(ТекстыОшибок, Символы.ПС);
		
	КонецЦикла;
	
	Если ЕстьПроблемы Тогда
		Элементы.ГруппаРезультатыПроверки.ТекущаяСтраница = Элементы.ГруппаПроверкаЗавершенаЕстьОшибки;
	Иначе
		Элементы.ГруппаРезультатыПроверки.ТекущаяСтраница = Элементы.ГруппаПроверкаЗавершенаУспешно;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиВыгрузкиМетаданныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = Элементы.НастройкиВыгрузкиМетаданных.ТекущиеДанные;
	Если ТекущаяСтрока.УровеньДерева <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ИзмененыНастройкиВыгрузкиМетаданных Тогда
		СохранитьСоставПередаваемыхДанных();
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ИмяВИсточнике", ТекущаяСтрока.ИмяВИсточнике);
	ПараметрыФормы.Вставить("ИмяВСервисе", ТекущаяСтрока.ИмяВСервисе);
	ПараметрыФормы.Вставить("ЗаблокироватьФлагВыбора", ТекущаяСтрока.ЗаблокироватьФлагВыбора);
	ПараметрыФормы.Вставить("Выбрано", ТекущаяСтрока.Выбрано);
	
	ОткрытьФорму("Обработка.ПанельУправленияСервисомПрогнозирования.Форма.ФормаПодбораРеквизитовКоллекций",
		ПараметрыФормы,
		ЭтотОбъект,
		,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДопРеквизитыИзСоставаПередаваемыхДанныхНаСервере()
	
	Настройки = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	Описание  = СервисПрогнозированияПереопределяемый.ПолучитьОписаниеРеквизитовВсехКоллекций();
	
	Для Каждого УровеньКоллекций Из НастройкиВыгрузкиМетаданных.ПолучитьЭлементы() Цикл
		
		ОписаниеКоллекции = Описание[УровеньКоллекций.ИмяВИсточнике];
		ОписаниеКоллекции.Выгружать = УровеньКоллекций.Выбрано;
		Для Каждого УровеньРеквизитов Из УровеньКоллекций.ПолучитьЭлементы() Цикл
			
			Если ОписаниеКоллекции.ВложенноеОписание.Свойство(УровеньРеквизитов.ИмяВИсточнике) Тогда
				ОписаниеКоллекции.ВложенноеОписание[УровеньРеквизитов.ИмяВИсточнике].Выгружать
					= УровеньРеквизитов.Выбрано;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Настройки.Коллекции = Описание;
	
	СервисПрогнозирования.ОбновитьНастройкиСервиса(Настройки);
	
	СформироватьДеревоВыгрузкиМетаданных(Ложь);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТикет()
	
	Ответ = СервисПрогнозирования.ПолучитьТикет();
	Если Не ПустаяСтрока(Ответ.ТекстОшибки) Тогда
		ОбщегоНазначения.СообщитьПользователю(Ответ.ТекстОшибки);
	КонецЕсли;
	Возврат Ответ.Тикет;
	
КонецФункции

&НаСервере
Процедура РассчитатьРеквизитыСтатусовАвторизации()
	
	ПереключательЗаявкаАвторизация = ?(ЗначениеЗаполнено(ТокенПриложения), 1, 0);
	ВыполненПереходКСтраницеАктивногоПодключения = ЗначениеЗаполнено(ТокенПриложения);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСтатусПодключения()
	
	ИдетПодключение = Не ПустаяСтрока(ИдентификаторЗаданияПовторитьРегистрацию)
		Или Не ПустаяСтрока(ИдентификаторЗаданияПодключитьсяКСервису);
	
	Если ИдетПодключение Тогда
		СтатусАвторизацииПредставление = НСтр("ru = 'Идет регистрация...'");
	ИначеЕсли ЗначениеЗаполнено(ТокенПриложения) Тогда
		СтатусАвторизацииПредставление = НСтр("ru = 'Зарегистрировано.'");
	Иначе
		СтатусАвторизацииПредставление = НСтр("ru = 'Ожидается регистрация.'");
	КонецЕсли;
	
	Если СтатусПодключения = СервисПрогнозирования.СтатусПодключенияАктивен() Тогда
		Если ИзмененАПИСервиса Тогда
			СтатусПодключенияПредставление = НСтр("ru = 'Ожидается восстановление доступа.'");
		Иначе
			СтатусПодключенияПредставление = НСтр("ru = 'Доступ предоставлен.'");
		КонецЕсли;
	ИначеЕсли СтатусПодключения = СервисПрогнозирования.СтатусПодключенияВОчереди() Тогда
		СтатусПодключенияПредставление = НСтр("ru = 'В очереди на активацию доступа.'");
	ИначеЕсли СтатусПодключения = СервисПрогнозирования.СтатусПодключенияНеПодключено() Тогда
		СтатусПодключенияПредставление = НСтр("ru = 'Доступ не предоставлен.'");
	КонецЕсли;
	
	ШаблонСтроки = "%1 %2";
	СтатусАвторизации = СтроковыеФункции.ФорматированнаяСтрока(ШаблонСтроки,
			СтатусАвторизацииПредставление,
			СтатусПодключенияПредставление);
	
	СтатусыОбменаДанными = РегистрыСведений.СтатусыОбменаДаннымиССервисомПрогнозированияПродаж.ПолучитьСтатусыОбменаДанными();
	
	ВыгрузкаРанееПроизводилась = СтатусыОбменаДанными.ДатаЗавершения > Дата(1, 1, 1);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиИПередаваемыеДанные()
	СохранитьСоставПередаваемыхДанных();
	ЗаписатьНастройки();
КонецПроцедуры

&НаСервере
Процедура АктуализироватьИнформациюИзмененияФорматовКоллекций()
	
	ТекущиеКоллекции     = НастройкиВыгрузкиМетаданных.ПолучитьЭлементы(); // ДанныеФормыКоллекцияЭлементовДерева -
	КоличествоКоллекций  = ТекущиеКоллекции.Количество();
	СохраненныеКоллекции = СохраненныеНастройкиВыгрузкиМетаданных.ПолучитьЭлементы();
	
	Для СчетчикКоллекций = 0 По КоличествоКоллекций - 1 Цикл
		
		ТекущаяКоллекция     = ТекущиеКоллекции[СчетчикКоллекций]; // ДанныеФормыЭлементДерева -
		КоллекцияВыгружалась = РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж.КоллекцияВыгружалась(
			ТекущаяКоллекция.ИмяВИсточнике);
		Если Не КоллекцияВыгружалась Тогда
			Продолжить;
		КонецЕсли;
		
		СохраненнаяКоллекция = СохраненныеКоллекции[СчетчикКоллекций];
		Если ТекущаяКоллекция.ИмяВИсточнике <> СохраненнаяКоллекция.ИмяВИсточнике Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущиеРеквизиты                = ТекущаяКоллекция.ПолучитьЭлементы(); // ДанныеФормыКоллекцияЭлементовДерева -
		КоличествоТекущихРеквизитов     = ТекущиеРеквизиты.Количество();
		
		СохраненныеРеквизиты            = СохраненнаяКоллекция.ПолучитьЭлементы();
		КоличествоСохраненныхРеквизитов = СохраненныеРеквизиты.Количество();
		
		Если КоличествоТекущихРеквизитов <> КоличествоСохраненныхРеквизитов Тогда
			СводкаПоКоллекции = РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж.ПолучитьИнформациюКоллекции(
				ТекущаяКоллекция.ИмяВИсточнике);
			СводкаПоКоллекции.ИзмененФормат = Истина;
			РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж.ЗаписатьИнформациюКоллекции(
				ТекущаяКоллекция.ИмяВИсточнике, СводкаПоКоллекции);
			Продолжить;
		КонецЕсли;
		
		ЕстьИзменениеРеквизита = Ложь;
		
		Для СчетчикРеквизита = 0 По КоличествоТекущихРеквизитов - 1 Цикл
			
			ТекущийРеквизит     = ТекущиеРеквизиты[СчетчикРеквизита]; // ДанныеФормыЭлементДерева -
			СохраненныйРеквизит = СохраненныеРеквизиты[СчетчикРеквизита];
			
			Если ТекущийРеквизит.ИмяВИсточнике <> СохраненныйРеквизит.ИмяВИсточнике
				Или ТекущийРеквизит.Выбрано <> СохраненныйРеквизит.Выбрано Тогда
				ЕстьИзменениеРеквизита = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьИзменениеРеквизита Тогда
			СводкаПоКоллекции = РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж.ПолучитьИнформациюКоллекции(
				ТекущаяКоллекция.ИмяВИсточнике);
			СводкаПоКоллекции.ИзмененФормат = Истина;
			РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж.ЗаписатьИнформациюКоллекции(
				ТекущаяКоллекция.ИмяВИсточнике, СводкаПоКоллекции);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИспользованиеОстатковИПродажПересчитать(Форма)
	Форма.ИспользоватьРеальныеОстаткиИПродажи = Форма.ИспользоватьРеальныеИлиПлановыеОстаткиИПродажиВыбор = 0 Или
		Форма.ИспользоватьРеальныеИлиПлановыеОстаткиИПродажиВыбор = 2;
	Форма.ИспользоватьПлановыеОстаткиИПродажи = Форма.ИспользоватьРеальныеИлиПлановыеОстаткиИПродажиВыбор = 1 Или
		Форма.ИспользоватьРеальныеИлиПлановыеОстаткиИПродажиВыбор = 2;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВариантДействияПриИзмененииНастроекИнтернетПоддержки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ЗакрытьПринудительно = Истина;
		Закрыть();
		Возврат;
	КонецЕсли;
	
	Если Результат.Вариант = "ПолныйСбросНастроек" Тогда
		ВыполнитьПолныйСбросНастроекСервиса();
	ИначеЕсли Результат.Вариант = "СбросНастроекАвторизации" Тогда
		ВыполнитьСбросНастроекАвторизации();
	Иначе
		ЗакрытьПринудительно = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПолныйСбросНастроекСервиса()
	
	ОсновноеОписание = СервисПрогнозированияПереопределяемый.ОсновноеОписаниеВыгружаемогоЭлементаДанных();
	
	НачатьТранзакцию();
	Попытка
		
		СервисПрогнозирования.СброситьНастройкиСервиса();
		НастройкиПоУмолчанию = СервисПрогнозирования.ПолучитьНастройкиСервиса();
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиПоУмолчанию);
		
		// Настройки источников данных по умолчанию
		ВыгружатьОстаткиЗаВсеВремя                          = ?(НастройкиПоУмолчанию.ВыгружатьОстаткиЗаВсеВремя, 0, 1);
		ВыгружатьКонтрольныеПланыЗаВсеВремя                 = ?(НастройкиПоУмолчанию.ВыгружатьКонтрольныеПланыЗаВсеВремя, 0, 1);
		ИспользоватьРеальныеИлиПлановыеОстаткиИПродажиВыбор = ?(НастройкиПоУмолчанию.ИспользоватьПлановыеОстаткиИПродажи,
			?(НастройкиПоУмолчанию.ИспользоватьРеальныеОстаткиИПродажи, 2, 1),
			0);
		
		// Отборы выгрузки по умолчанию
		СхемаКомпоновкиДанных = ПолучитьОбщийМакет("СервисПрогнозированияФильтрОтправляемыхДанных");
		КомпоновщикНастроекОтборовНаВыгрузку.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
		
		ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
		КомпоновщикНастроекОтборовНаВыгрузку.Инициализировать(ИсточникНастроек);
		КомпоновщикНастроекОтборовНаВыгрузку.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		КомпоновщикНастроекОтборовНаВыгрузку.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
		
		НастройкиОтборов = Новый Структура();
		НастройкиОтборов.Вставить("ОбщийОтборВыгрузки", КомпоновщикНастроекОтборовНаВыгрузку.Настройки);
		ХранилищеПараметров = Новый ХранилищеЗначения(НастройкиОтборов);
		
		Константы.НастройкиОтборовНаВыгрузкуСервисаПрогнозирования.Установить(ХранилищеПараметров);
		
		// Отборы загрузки по умолчанию
		СхемаКомпоновкиДанных = ПолучитьОбщийМакет("СервисПрогнозированияФильтрЗагрузкиПрогноза");
		КомпоновщикНастроекОтборовНаЗагрузку.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
		
		ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
		КомпоновщикНастроекОтборовНаЗагрузку.Инициализировать(ИсточникНастроек);
		КомпоновщикНастроекОтборовНаЗагрузку.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		КомпоновщикНастроекОтборовНаЗагрузку.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
		
		НастройкиОтборов = Новый Структура();
		НастройкиОтборов.Вставить("ОбщийОтборЗагрузки", КомпоновщикНастроекОтборовНаЗагрузку.Настройки);
		ХранилищеПараметров = Новый ХранилищеЗначения(НастройкиОтборов);
		
		Константы.НастройкиОтборовНаЗагрузкуСервисаПрогнозирования.Установить(ХранилищеПараметров);
		
		Набор = РегистрыСведений.СервисПрогнозированияИдентификаторыОбучения.СоздатьНаборЗаписей();
		Набор.Записать();
		
		// Состав передаваемых данных по умолчанию
		КоллекцииПоПорядку = СервисПрогнозированияПереопределяемый.КоллекцииПоПорядку(Истина);
		Для Каждого Коллекция Из КоллекцииПоПорядку Цикл
			НаборЗаписей = РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Коллекция.Установить(Коллекция);
			НоваяЗапись = НаборЗаписей.Добавить(); // В строке остаются значения по умолчанию.
			НоваяЗапись.Коллекция = Коллекция;
			НаборЗаписей.Записать();
		КонецЦикла;
		
		Если Не ИспользоватьПланированиеПродаж Тогда
			КоллекцииПоПорядку = СервисПрогнозированияПереопределяемый.КоллекцииПоПорядку(Ложь);
		КонецЕсли;
		
		НастройкиВыгрузкиМетаданных.ПолучитьЭлементы().Очистить();
		СохраненныеНастройкиВыгрузкиМетаданных.ПолучитьЭлементы().Очистить();
		
		Для Каждого Коллекция Из КоллекцииПоПорядку Цикл
			
			ОписаниеКоллекции = НастройкиПоУмолчанию.Коллекции[Коллекция]; // см. СервисПрогнозированияПереопределяемыйКлиентСервер.ОписаниеВыгружаемогоЭлементаДанных.
			
			Если ОписаниеКоллекции.ИмяВИсточнике = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Товары Тогда
				Если Не ИспользоватьПланированиеПродаж Тогда
					ОписаниеКоллекции.Выгружать                                   = Истина;
					ОписаниеКоллекции.Обязательный                                = Истина;
					ОписаниеКоллекции.ВложенноеОписание.КодКатегории.Выгружать    = Истина;
					ОписаниеКоллекции.ВложенноеОписание.КодКатегории.Обязательный = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Выгружать = ОписаниеКоллекции.Выгружать Или ОписаниеКоллекции.Обязательный;
			
			ТекущаяСтрокаГруппа = НастройкиВыгрузкиМетаданных.ПолучитьЭлементы().Добавить();
			ТекущаяСтрокаГруппа.Наименование = ОписаниеКоллекции.Представление;
			ТекущаяСтрокаГруппа.ЗаблокироватьФлагВыбора = ОписаниеКоллекции.Обязательный;
			ТекущаяСтрокаГруппа.Выбрано = Выгружать;
			ТекущаяСтрокаГруппа.ИмяВИсточнике = ОписаниеКоллекции.ИмяВИсточнике; // ПеречислениеСсылка.КоллекцииСервисаПрогнозированияПродаж
			ТекущаяСтрокаГруппа.ИмяВСервисе = ОписаниеКоллекции.ИмяВСервисе;
			ТекущаяСтрокаГруппа.ТипДанных = ОписаниеКоллекции.ТипДанных;
			ТекущаяСтрокаГруппа.УровеньДерева = 1;
			
			ТекущаяСтрокаСохраненнойГруппы = СохраненныеНастройкиВыгрузкиМетаданных.ПолучитьЭлементы().Добавить();
			ТекущаяСтрокаСохраненнойГруппы.Наименование = ОписаниеКоллекции.Представление;
			ТекущаяСтрокаСохраненнойГруппы.ЗаблокироватьФлагВыбора = ОписаниеКоллекции.Обязательный;
			ТекущаяСтрокаСохраненнойГруппы.Выбрано = Выгружать;
			ТекущаяСтрокаСохраненнойГруппы.ИмяВИсточнике = ОписаниеКоллекции.ИмяВИсточнике; // ПеречислениеСсылка.КоллекцииСервисаПрогнозированияПродаж
			ТекущаяСтрокаСохраненнойГруппы.ИмяВСервисе = ОписаниеКоллекции.ИмяВСервисе;
			ТекущаяСтрокаСохраненнойГруппы.ТипДанных = ОписаниеКоллекции.ТипДанных;
			ТекущаяСтрокаСохраненнойГруппы.УровеньДерева = 1;
			
			ОписаниеРеквизитов = ОписаниеКоллекции.ВложенноеОписание;
			
			Если ОписаниеКоллекции.ИмяВИсточнике = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Продажи
				Или ОписаниеКоллекции.ИмяВИсточнике = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Промо Тогда
				
				Если Не ИспользоватьПланированиеПродаж Тогда
					ОписаниеРеквизитов.Удалить("КодКлиента");
					ОписаниеРеквизитов.Удалить("КодХарактеристики");
				КонецЕсли;
				
			КонецЕсли;
			
			Если ОписаниеКоллекции.ИмяВИсточнике = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Товары Тогда
				Если Не ИспользоватьПланированиеПродаж Тогда
					ОписаниеРеквизитов.Удалить("КодВидаНоменклатуры");
				КонецЕсли;
				Если Не ИспользоватьПланированиеПродажПоКатегориям Тогда
					ОписаниеРеквизитов.Удалить("КодКатегории");
					ОписаниеРеквизитов.Удалить("НаименованиеКатегории");
				КонецЕсли;
			КонецЕсли;
			
			Если ОписаниеКоллекции.ИмяВИсточнике = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Сезонность Тогда
				Если Не ИспользоватьПланированиеПродаж Тогда
					ОписаниеРеквизитов.Удалить("КодХарактеристики");
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого КлючЗначениеРеквизита Из ОписаниеРеквизитов Цикл
				
				ОписаниеРеквизита = СервисПрогнозированияПереопределяемыйКлиентСервер.ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание);
				ЗаполнитьЗначенияСвойств(ОписаниеРеквизита, КлючЗначениеРеквизита.Значение);
				Выгружать = ОписаниеРеквизита.Выгружать Или ОписаниеРеквизита.Обязательный;
				
				ТекущаяСтрокаРеквизит = ТекущаяСтрокаГруппа.ПолучитьЭлементы().Добавить();
				ТекущаяСтрокаРеквизит.Наименование = ОписаниеРеквизита.Представление;
				ТекущаяСтрокаРеквизит.ЗаблокироватьФлагВыбора = ОписаниеРеквизита.Обязательный;
				ТекущаяСтрокаРеквизит.Выбрано = Выгружать;
				ТекущаяСтрокаРеквизит.ИмяВИсточнике = ОписаниеРеквизита.ИмяВИсточнике; // Строка
				ТекущаяСтрокаРеквизит.ИмяВСервисе = ОписаниеРеквизита.ИмяВСервисе;
				ТекущаяСтрокаРеквизит.ТипДанных = ОписаниеРеквизита.ТипДанных;
				ТекущаяСтрокаРеквизит.Свойство = ОписаниеРеквизита.ДополнительноеСвойство;
				ТекущаяСтрокаРеквизит.ЭтоПользовательскоеПоле = ОписаниеРеквизита.ЭтоПользовательскоеПоле;
				ТекущаяСтрокаРеквизит.УровеньДерева = 2;
				
				ТекущаяСтрокаСохраненногоРеквизита = ТекущаяСтрокаСохраненнойГруппы.ПолучитьЭлементы().Добавить();
				ТекущаяСтрокаСохраненногоРеквизита.Наименование = ОписаниеРеквизита.Представление;
				ТекущаяСтрокаСохраненногоРеквизита.ЗаблокироватьФлагВыбора = ОписаниеРеквизита.Обязательный;
				ТекущаяСтрокаСохраненногоРеквизита.Выбрано = Выгружать;
				ТекущаяСтрокаСохраненногоРеквизита.ИмяВИсточнике = ОписаниеРеквизита.ИмяВИсточнике; // Строка
				ТекущаяСтрокаСохраненногоРеквизита.ИмяВСервисе = ОписаниеРеквизита.ИмяВСервисе;
				ТекущаяСтрокаСохраненногоРеквизита.ТипДанных = ОписаниеРеквизита.ТипДанных;
				ТекущаяСтрокаСохраненногоРеквизита.Свойство = ОписаниеРеквизита.ДополнительноеСвойство;
				ТекущаяСтрокаСохраненногоРеквизита.ЭтоПользовательскоеПоле = ОписаниеРеквизита.ЭтоПользовательскоеПоле;
				ТекущаяСтрокаСохраненногоРеквизита.УровеньДерева = 2;
				
			КонецЦикла;
			
		КонецЦикла;
		
		// Расписание обновлений по умолчанию
		УстановитьРасписаниеВыгрузкиПоУмолчаниюСервер();
		УстановитьРасписаниеЗагрузкиПоУмолчаниюСервер();
		
		НаборЗаписей = РегистрыСведений.СтатусыОбменаДаннымиССервисомПрогнозированияПродаж.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИдентификаторЗаписи.Установить("1");
		НоваяЗапись = НаборЗаписей.Добавить(); // В строке остаются значения по умолчанию.
		НоваяЗапись.ИдентификаторЗаписи = "1";
		НаборЗаписей.Записать();
		
		ТекстСообщения = НСтр("ru = 'Выполнен полный сброс настроек.'");
		СбросНастроекВыполнен = Истина;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		СбросНастроекВыполнен = Ложь;
		ПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ШаблонСообщения     = НСтр("ru = 'Не удалось выполнить полный сброс настроек по причине: %1'");
		ТекстСообщения      = СтрШаблон(ШаблонСообщения, ПредставлениеОшибки);
		
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			Неопределено,
			Неопределено,
			ТекстСообщения);
		
	КонецПопытки;
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	
	Если СбросНастроекВыполнен Тогда
		РассчитатьРеквизитыСтатусовАвторизации();
		РассчитатьСтатусПодключения();
		УстановитьВидимостьДоступность();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьСбросНастроекАвторизации()
	
	Настройки = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	
	НачатьТранзакцию();
	Попытка
		
		СервисПрогнозирования.СброситьНастройкиАвторизацииВСервисе(Настройки);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Настройки);
		
		ТекстСообщения = НСтр("ru = 'Выполнен сброс настроек авторизации.'");
		СбросНастроекВыполнен = Истина;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		СбросНастроекВыполнен = Ложь;
		ПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ШаблонСообщения     = НСтр("ru = 'Не удалось выполнить сброс настроек авторизации по причине: %1'");
		ТекстСообщения      = СтрШаблон(ШаблонСообщения, ПредставлениеОшибки);
		
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			Неопределено,
			Неопределено,
			ТекстСообщения);
		
	КонецПопытки;
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	
	Если СбросНастроекВыполнен Тогда
		РассчитатьРеквизитыСтатусовАвторизации();
		РассчитатьСтатусПодключения();
		УстановитьВидимостьДоступность();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Подключаемые

&НаКлиенте
Процедура Подключаемый_ПовторитьРегистрациюНаКлиенте()
	ПовторитьРегистрациюНаСервере();
	Если Не ПустаяСтрока(ИдентификаторЗаданияПовторитьРегистрацию) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПовторитьРегистрациюНаКлиенте", 1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПодключитьсяКСервисуНаКлиенте()
	ПодключитьсяКСервисуНаСервере();
	Если Не ПустаяСтрока(ИдентификаторЗаданияПодключитьсяКСервису) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПодключитьсяКСервисуНаКлиенте", 1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтправитьЗаявкуВСервисНаКлиенте()
	ОтправитьЗаявкуВСервисНаСервере();
	Если Не ПустаяСтрока(ИдентификаторЗаданияОтправитьЗаявкуВСервис) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ОтправитьЗаявкуВСервисНаКлиенте", 1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьСтатусПодключенияНаКлиенте()
	ОбновитьСтатусПодключенияРезультатНаСервере();
	Если Не ПустаяСтрока(ИдентификаторЗаданияОбновитьСтатусПодключения) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьСтатусПодключенияНаКлиенте", 1, Истина);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеОбработка

&НаСервере
Процедура ОтправитьЗаявкуВСервисНаСервере(ВыполнениеПроверено = Ложь)
	Если ВыполнениеПроверено
		Или Не ПустаяСтрока(ИдентификаторЗаданияОтправитьЗаявкуВСервис)
			И ДлительныеОперации.ЗаданиеВыполнено(Новый УникальныйИдентификатор(ИдентификаторЗаданияОтправитьЗаявкуВСервис)) Тогда
		ИдентификаторЗаданияОтправитьЗаявкуВСервис = "";
		ПолучитьНастройкиСервиса();
		РассчитатьСтатусПодключения();
		УстановитьВидимостьДоступность();
		УстановитьТексты();
		Ответ = ПолучитьИзВременногоХранилища(АдресХранилищаОтправитьЗаявкуВСервис);
		Если Не ПустаяСтрока(Ответ.ТекстОшибки) Тогда
			ВызватьИсключение Ответ.ТекстОшибки;
		КонецЕсли;
		
		ОбновитьСтатусПодключенияНаСервере();
		РассчитатьРеквизитыСтатусовАвторизации();
		УстановитьВидимостьДоступность();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусПодключенияРезультатНаСервере(ВыполнениеПроверено = Ложь)
	Если ВыполнениеПроверено
		Или Не ПустаяСтрока(ИдентификаторЗаданияОбновитьСтатусПодключения)
			И ДлительныеОперации.ЗаданиеВыполнено(Новый УникальныйИдентификатор(ИдентификаторЗаданияОбновитьСтатусПодключения)) Тогда
		ИдентификаторЗаданияОбновитьСтатусПодключения = "";
		ПолучитьНастройкиСервиса();
		РассчитатьСтатусПодключения();
		УстановитьВидимостьДоступность();
		УстановитьТексты();
		Ответ = ПолучитьИзВременногоХранилища(АдресХранилищаОбновитьСтатусПодключения);
		Если Не ПустаяСтрока(Ответ.ТекстОшибки) Тогда
			ВызватьИсключение Ответ.ТекстОшибки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПодключитьсяКСервисуНаСервере(ВыполнениеПроверено = Ложь)
	Если ВыполнениеПроверено
		Или Не ПустаяСтрока(ИдентификаторЗаданияПодключитьсяКСервису)
			И ДлительныеОперации.ЗаданиеВыполнено(Новый УникальныйИдентификатор(ИдентификаторЗаданияПодключитьсяКСервису)) Тогда
		ИдентификаторЗаданияПодключитьсяКСервису = "";
		ПолучитьНастройкиСервиса();
		РассчитатьСтатусПодключения();
		УстановитьВидимостьДоступность();
		УстановитьТексты();
		Ответ = ПолучитьИзВременногоХранилища(АдресХранилищаПодключитьсяКСервису);
		Если Не ПустаяСтрока(Ответ.ТекстОшибки) Тогда
			Если ИзмененАПИСервиса Тогда
				ТекстШаблонЗаголовкаСПараметром = НСтр("ru = 'Изменилась версия интерфейса сервиса.
					|Не удалось восстановить доступ на новой версии по причине:
					|%1'");
				Элементы.ДекорацияИнформацияЗаголовокОжидаетсяВосстановлениеДоступа.Заголовок = СтрШаблон(
					ТекстШаблонЗаголовкаСПараметром,
					Ответ.ТекстОшибки);
			КонецЕсли;
			ВызватьИсключение Ответ.ТекстОшибки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПовторитьРегистрациюНаСервере(ВыполнениеПроверено = Ложь)
	Если ВыполнениеПроверено
		Или Не ПустаяСтрока(ИдентификаторЗаданияПовторитьРегистрацию)
			И ДлительныеОперации.ЗаданиеВыполнено(Новый УникальныйИдентификатор(ИдентификаторЗаданияПовторитьРегистрацию)) Тогда
		ИдентификаторЗаданияПовторитьРегистрацию = "";
		ПолучитьНастройкиСервиса();
		РассчитатьСтатусПодключения();
		УстановитьВидимостьДоступность();
		УстановитьТексты();
		Ответ = ПолучитьИзВременногоХранилища(АдресХранилищаПовторитьРегистрацию);
		Если Не ПустаяСтрока(Ответ.ТекстОшибки) Тогда
			ВызватьИсключение Ответ.ТекстОшибки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Тексты

&НаКлиентеНаСервереБезКонтекста
Функция ТекстОшибкиСценарийИспользуетсяДляПодменыПродаж()
	Возврат НСтр("ru='Сценарий планирования %1 запрещен для выбора, поскольку используется для подмены данных о продажах.'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстОшибкиСценарийИспользуетсяДляКонтрольныхПланов()
	Возврат НСтр("ru='Сценарий планирования %1 запрещен для выбора, поскольку используется для выгрузки экспертных планов продаж.'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстОшибкиСценарийНеМожетБытьРавенСценариюПодменыПродаж()
	Возврат НСтр("ru = 'Сценарий используемый для экспертных планов продаж не может быть равен сценарию подмены продаж.'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстОшибкиСценарийПодменыПродажНеМожетБытьПустым()
	Возврат НСтр("ru = 'Сценарий подмены продаж не может быть пустым.'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстОшибкиПериодНеУстановлен(ТекстТипПериода)
	
	ТекстОшибки = НСтр("ru = 'Не установлен период выгрузки для %1.'");
	ТекстОшибки = СтрШаблон(ТекстОшибки, ТекстТипПериода);
	Возврат ТекстОшибки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстОшибкиКонецПериодаБольшеНачала()
	Возврат НСтр("ru = 'Конец периода должен быть больше начала'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстОшибкиАвторизацияНеНайдена()
	Возврат НСтр("ru = 'Авторизация не найдена. Вернитесь на первый шаг.'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстОшибкиНеЗаполненВидПлана()
	Возврат НСтр("ru = 'Не заполнен реквизит Вид плана.'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстОшибкиНеЗаполненСценарийПрогнозирования()
	Возврат НСтр("ru = 'Не заполнено поле ""Сценарий планирования"".'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстОшибкиБудутУдаленыПользовательскиеРеквизиты()
	Возврат НСтр("ru = 'Будут удалены все реквизиты, кроме изначально предусмотренных сервисом. Продолжить?'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстОшибкиНетЗаписей()
	Возврат НСтр("ru = 'Не удалось найти данные. Для исправления проверьте фактическое наличие данных, настройки источников данных и настройки фильтрации.'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстОшибкиНеВыбранСвязанныйРеквизитКоллекции(ОсновнаяКоллекция, СвязаннаяКоллекция, РеквизитСвязаннойКоллекции)
	ТекстШаблона = НСтр("ru = 'При выгрузке коллекций %1 и %2 требуется связать их при помощи реквизита %3. В данный момент связь не установлена, отметьте соответствующий реквизит на закладке ""Состав передаваемых данных.""'");
	Возврат СтрШаблон(ТекстШаблона, ОсновнаяКоллекция, СвязаннаяКоллекция, РеквизитСвязаннойКоллекции);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстОшибкиЕстьОтрицательныеПродажи()
	Возврат НСтр("ru = 'Найдены отрицательные продажи. Такие продажи могут возникнуть из-за возвратов, произведенных не в день продажи.
		|Отрицательные продажи игнорируются сервисом прогнозирования продаж.'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстОшибкиНеЗаполненаЭлектроннаяПочта()
	ТекстШаблона = НСтр("ru = 'Необходимо указать адрес электронной почты контактного лица.'");
	Возврат ТекстШаблона;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстОшибкиНеЗаполненоФИО()
	ТекстШаблона = НСтр("ru = 'Необходимо указать ФИО контактного лица.'");
	Возврат ТекстШаблона;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстОшибкиНеверныйФорматАдресаЭлектроннойПочты()
	ТекстШаблона = НСтр("ru = 'Неверный формат адреса электронной почты.'");
	Возврат ТекстШаблона;
КонецФункции

#КонецОбласти

#КонецОбласти
