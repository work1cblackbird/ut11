
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ИнфоКоллекции = РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж.ПолучитьИнформациюКоллекции(
		Перечисления.КоллекцииСервисаПрогнозированияПродаж.Товары);
	ИдентификаторКоллекцииТоваров = СтрЗаменить(ИнфоКоллекции.ИдКоллекции, Символы.НПП, "");
	
	ЗаполнитьСписокВыгружаемыхКоллекций();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПодключитьОбработчикОжиданияИндикатораВыгрузки();
	ОбновитьИнформациюОВыгрузкеКоллекций();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидПланаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ВидПлана) Тогда
		ВидПланаПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПолныйСбросНастроек(Команда)
	ТекстВопроса = НСтр("ru = 'Будет выполнен полный сброс настроек. Продолжить?'");
	Оповещение = Новый ОписаниеОповещения("ПолныйСбросНастроекЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
КонецПроцедуры

&НаКлиенте
Процедура ПолнаяВыгрузкаМягкая(Команда)
	ТекстВопроса = НСтр("ru = 'Будет выполнена полная выгрузка данных. Продолжить?'");
	Оповещение = Новый ОписаниеОповещения("ПолнаяВыгрузкаМягкаяЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
КонецПроцедуры

&НаКлиенте
Процедура ПолнаяВыгрузкаЖесткая(Команда)
	ТекстВопроса = НСтр("ru = 'Будет выполнена полная выгрузка данных с предварительным удалением на сервере. Продолжить?'");
	Оповещение = Новый ОписаниеОповещения("ПолнаяВыгрузкаЖесткаяЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокВыгружаемыхКоллекций(Команда)
	ОбновитьСписокВыгружаемыхКоллекцийНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КоллекцииНаСервереСнятьВыделение(Команда)
	КоллекцииНаСервереСнятьВыделениеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КоллекцииНаСервереВыделитьВсе(Команда)
	КоллекцииНаСервереВыделитьВсеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСоставКоллекций(Команда)
	ОбновитьСоставКоллекцийНаСервере();
	Если Не ПустаяСтрока(ИдентификаторЗадания) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеФоновогоЗадания", 1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьВыбранныеКоллекции(Команда)
	ОчиститьВыбранныеКоллекцииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВыбранныеКоллекции(Команда)
	УдалитьВыбранныеКоллекцииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИсключенныеОбъекты(Команда)
	ОчиститьСообщения();
	ОбновитьИсключенныеОбъектыНаСервере();
	Если Не ПустаяСтрока(ИдентификаторЗадания) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеФоновогоЗадания", 1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСезонность(Команда)
	ОчиститьСообщения();
	ОбновитьСезонностьНаСервере();
	Если Не ПустаяСтрока(ИдентификаторЗадания) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеФоновогоЗадания", 1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСезонностьПоМесяцам(Команда)
	ОчиститьСообщения();
	ОбновитьСезонностьПоМесяцамНаСервере();
	Если Не ПустаяСтрока(ИдентификаторЗадания) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеФоновогоЗадания", 1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТочностьМодели(Команда)
	ОчиститьСообщения();
	ОбновитьТочностьМоделиНаСервере();
	Если Не ПустаяСтрока(ИдентификаторЗадания) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеФоновогоЗадания", 1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТочностьМоделиПланФактПоВсемПериодам(Команда)
	ОчиститьСообщения();
	ОбновитьТочностьМоделиПланФактПоВсемПериодамНаСервере();
	Если Не ПустаяСтрока(ИдентификаторЗадания) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеФоновогоЗадания", 1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТочностьМоделиПланФактПоПериодам(Команда)
	ОчиститьСообщения();
	ОбновитьТочностьМоделиПланФактПоПериодамНаСервере();
	Если Не ПустаяСтрока(ИдентификаторЗадания) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеФоновогоЗадания", 1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТочностьМоделиПоОбъектам(Команда)
	ОчиститьСообщения();
	ОбновитьТочностьМоделиПоОбъектамНаСервере();
	Если Не ПустаяСтрока(ИдентификаторЗадания) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеФоновогоЗадания", 1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИсториюОбучения(Команда)
	ОчиститьСообщения();
	ОбновитьИсториюОбученияНаСервере();
	Если Не ПустаяСтрока(ИдентификаторЗадания) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеФоновогоЗадания", 1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрерватьВыгрузку(Команда)
	ТекстВопроса = НСтр("ru = 'Текущая выгрузка будет прервана. Выгруженные данные останутся на сервере. Продолжить?'");
	Оповещение = Новый ОписаниеОповещения("ПрерватьВыгрузкуЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
КонецПроцедуры

&НаКлиенте
Процедура ПрерватьВыгрузкуЗавершение(Результат, ПараметрКоманды) Экспорт
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	ПрерватьВыгрузкуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СезонностьПоМесяцамПриАктивизацииЯчейки(Элемент)
	ВыделенныеСтроки = Элементы.СезонностьПоМесяцам.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() > 0 Тогда
		ВывестиСезонность(ВыделенныеСтроки);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВывестиСезонность(ВыделенныеСтроки)
	
	ГрафикСезонности.Очистить();
	
	ТаблицаВыделенныхСтрок = Новый ТаблицаЗначений();
	ТаблицаВыделенныхСтрок.Колонки.Добавить("ПоляСезонности", Новый ОписаниеТипов("Строка"));
	ТаблицаВыделенныхСтрок.Колонки.Добавить("НомерМесяца", Новый ОписаниеТипов("Число"));
	ТаблицаВыделенныхСтрок.Колонки.Добавить("Месяц", Новый ОписаниеТипов("Строка"));
	ТаблицаВыделенныхСтрок.Колонки.Добавить("Коэффициент", Новый ОписаниеТипов("Число"));
	
	Месяца = Месяца();
	ШаблонСтрокиСезонности = НСтр("ru = '%1 (%2 год)'");
	
	Для Каждого НомерСтроки Из ВыделенныеСтроки Цикл
		Строка = СезонностьПоМесяцам.НайтиПоИдентификатору(НомерСтроки);
		ПоляСезонности = СтрШаблон(ШаблонСтрокиСезонности, Строка.ПоляСезонности, Формат(Строка.Год, "ДФ=yyyy"));
		Для Индекс = 0 По 11 Цикл
			НоваяВыделеннаяСтрока = ТаблицаВыделенныхСтрок.Добавить();
			НоваяВыделеннаяСтрока.ПоляСезонности = ПоляСезонности;
			НоваяВыделеннаяСтрока.Месяц = Месяца[Индекс];
			НоваяВыделеннаяСтрока.НомерМесяца = Индекс + 1;
			НоваяВыделеннаяСтрока.Коэффициент = Строка[Месяца[Индекс] + "Коэффициент"];
		КонецЦикла;
	КонецЦикла;
	
	СхемаКомпоновкиДанных = Обработки.ПанельУправленияСервисомПрогнозирования.ПолучитьМакет("ПостроительГрафикаСезонности");
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	ВнешнийНаборДанных = Новый Структура();
	ВнешнийНаборДанных.Вставить("ВтСезонность", ТаблицаВыделенныхСтрок);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешнийНаборДанных);

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ГрафикСезонности);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьСбросНастроек(Команда)
	Элементы.ПолныйСбросНастроек.Доступность = Не Элементы.ПолныйСбросНастроек.Доступность;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	НеВыполняетсяЗапросКСервису = ПустаяСтрока(ИдентификаторЗадания);
	Элементы.КоллекцииНаСервереОбновитьСоставКоллекций.Доступность = НеВыполняетсяЗапросКСервису;
	Элементы.ОбновитьИсключенныеОбъекты.Доступность = НеВыполняетсяЗапросКСервису;
	Элементы.ОбновитьИсториюОбучения.Доступность = НеВыполняетсяЗапросКСервису;
	Элементы.ОбновитьСезонность.Доступность = НеВыполняетсяЗапросКСервису;
	Элементы.ОбновитьСезонность1.Доступность = НеВыполняетсяЗапросКСервису;
	Элементы.ОбновитьТочностьМодели.Доступность = НеВыполняетсяЗапросКСервису;
	Элементы.ОбновитьТочностьМоделиПланФактПоВсемПериодам.Доступность = НеВыполняетсяЗапросКСервису;
	Элементы.ОбновитьТочностьМоделиПланФактПоПериодам.Доступность = НеВыполняетсяЗапросКСервису;
	Элементы.ОбновитьТочностьМоделиПоОбъектам.Доступность = НеВыполняетсяЗапросКСервису;
	
	// История обучения.
	ПрогнозТолькоПоКатегориям = ПрогнозПоКатегориям И ВариантПрогнозированияПоКатегориям = 0;
	Элементы.ИсторияОбученияФильтрПоТовару.Видимость         = ?(ПрогнозТолькоПоКатегориям, Ложь, Истина);
	Элементы.ИсторияОбученияФильтрПоХарактеристике.Видимость = ?(ПрогнозПоКатегориям, Ложь, Истина);
	Элементы.ГруппаФильтрацияПоКатегории.Видимость           = ?(ПрогнозПоКатегориям, Истина, Ложь);
	Элементы.ИсторияОбученияФильтрПоПартнеру.Видимость       = ?(ПрогнозПоКатегориям, Ложь, Истина);
	
КонецПроцедуры

&НаСервере
Функция СписокКоллекций()
	
	Массив = Новый Массив();
	Массив.Добавить(Перечисления.КоллекцииСервисаПрогнозированияПродаж.Продажи);
	Массив.Добавить(Перечисления.КоллекцииСервисаПрогнозированияПродаж.Товары);
	Массив.Добавить(Перечисления.КоллекцииСервисаПрогнозированияПродаж.ХарактеристикиНоменклатуры);
	Массив.Добавить(Перечисления.КоллекцииСервисаПрогнозированияПродаж.Покупатели);
	Массив.Добавить(Перечисления.КоллекцииСервисаПрогнозированияПродаж.Склады);
	Массив.Добавить(Перечисления.КоллекцииСервисаПрогнозированияПродаж.Остатки);
	Массив.Добавить(Перечисления.КоллекцииСервисаПрогнозированияПродаж.Промо);
	Массив.Добавить(Перечисления.КоллекцииСервисаПрогнозированияПродаж.Сезонность);
	
	Возврат Массив;
	
КонецФункции

&НаСервере
Процедура ВидПланаПриИзмененииНаСервере()
	
	РеквизитыВидаПлана = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидПлана,
		"ТипПлана, ВариантПрогнозированияПоКатегориям");
	ПрогнозПоКатегориям                = РеквизитыВидаПлана.ТипПлана = Перечисления.ТипыПланов.ПланПродажПоКатегориям;
	ВариантПрогнозированияПоКатегориям = РеквизитыВидаПлана.ВариантПрогнозированияПоКатегориям;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолныйСбросНастроекЗавершение(Результат, ПараметрКоманды) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	ПолныйСбросНастроекНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПолныйСбросНастроекНаСервере()
	
	НачатьТранзакцию();
		
	Попытка
	
		СервисПрогнозирования.СброситьНастройкиСервиса();
		
		КомпоновщикВыгрузки = Новый КомпоновщикНастроекКомпоновкиДанных();
		
		НастройкиОтборов = Новый Структура();
		НастройкиОтборов.Вставить("ОбщийОтборВыгрузки", КомпоновщикВыгрузки.Настройки);
		ХранилищеПараметров = Новый ХранилищеЗначения(НастройкиОтборов);
	
		Константы.НастройкиОтборовНаВыгрузкуСервисаПрогнозирования.Установить(ХранилищеПараметров);
		
		КомпоновщикЗагрузки = Новый КомпоновщикНастроекКомпоновкиДанных();
		
		НастройкиОтборов = Новый Структура();
		НастройкиОтборов.Вставить("ОбщийОтборЗагрузки", КомпоновщикЗагрузки.Настройки);
		
		ХранилищеПараметров = Новый ХранилищеЗначения(НастройкиОтборов);
	
		Константы.НастройкиОтборовНаЗагрузкуСервисаПрогнозирования.Установить(ХранилищеПараметров);
		
		Набор = РегистрыСведений.СервисПрогнозированияИдентификаторыОбучения.СоздатьНаборЗаписей();
		Набор.Записать();
		
		Для Каждого Коллекция Из СписокКоллекций() Цикл
			НаборЗаписей = РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Коллекция.Установить(Коллекция);
			
			НоваяЗапись = НаборЗаписей.Добавить(); // В строке остаются значения по умолчанию.
			НоваяЗапись.Коллекция = Коллекция;
			НаборЗаписей.Записать();
		КонецЦикла;
		
		НаборЗаписей = РегистрыСведений.СтатусыОбменаДаннымиССервисомПрогнозированияПродаж.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИдентификаторЗаписи.Установить("1");
		НоваяЗапись = НаборЗаписей.Добавить(); // В строке остаются значения по умолчанию.
		НоваяЗапись.ИдентификаторЗаписи = "1";
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
			
		ОтменитьТранзакцию();
		
		ПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ШаблонСообщения = НСтр("ru = 'Не удалось выполнить сброс настроек по причине: %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПредставлениеОшибки);
		
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,
			Неопределено, 
			Неопределено, 
			ТекстСообщения);
		
	КонецПопытки;
		
КонецПроцедуры

&НаКлиенте
Процедура ПолнаяВыгрузкаМягкаяЗавершение(Результат, ПараметрКоманды) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	ОчиститьСообщения();
	ПолнаяВыгрузкаМягкаяНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПолнаяВыгрузкаМягкаяНаСервере()
	
	НастройкиСервиса = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	
	Если Не ЗначениеЗаполнено(НастройкиСервиса.ТокенПриложения)
		Или Не НастройкиСервиса.СтатусПодключения = СервисПрогнозирования.СтатусПодключенияАктивен() Тогда
		ТекстСообщенияОбОшибке = ТекстОшибкиАвторизацияНеНайдена();
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщенияОбОшибке);
		Возврат;
	КонецЕсли;
	
	КоллекцииКВыгрузке.Очистить();
	Для Каждого Коллекция Из ВыгружаемыеКоллекции Цикл
		Если Не Коллекция.Пометка Тогда
			Продолжить;
		КонецЕсли;
		ОписаниеКоллекции = НастройкиСервиса.Коллекции[Коллекция.Значение];
		КоллекцииКВыгрузке.Добавить(Коллекция.Значение);
		
		СводкаПоКоллекции= РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж.ПолучитьИнформациюКоллекции(ОписаниеКоллекции.ИмяВИсточнике);
		
		Если ОписаниеКоллекции.Выгружать
			И РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж.КоллекцияВыгружалась(ОписаниеКоллекции.ИмяВИсточнике)
			И Не ОписаниеКоллекции.Категориальный Тогда
			// При выгрузке будет автоматически сброшена дата актуальности.
			СводкаПоКоллекции.ИзмененыОтборы = Истина;
			РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж.ЗаписатьИнформациюКоллекции(ОписаниеКоллекции.ИмяВИсточнике, СводкаПоКоллекции);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	РезультатРасчета = ДлительныеОперации.ВыполнитьВФоне("СервисПрогнозирования.ВыгрузитьКоллекции",
	                                                     КоллекцииКВыгрузке.ВыгрузитьЗначения(),
	                                                     ПараметрыВыполнения);
	
	ОбновитьИнформациюОВыгрузкеКоллекций();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолнаяВыгрузкаЖесткаяЗавершение(Результат, ПараметрКоманды) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	ОчиститьСообщения();
	ПолнаяВыгрузкаЖесткаяНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПолнаяВыгрузкаЖесткаяНаСервере()
	
	НастройкиСервиса = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	
	Если Не ЗначениеЗаполнено(НастройкиСервиса.ТокенПриложения)
		Или Не НастройкиСервиса.СтатусПодключения = СервисПрогнозирования.СтатусПодключенияАктивен() Тогда
		ТекстСообщенияОбОшибке = ТекстОшибкиАвторизацияНеНайдена();
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщенияОбОшибке);
		Возврат;
	КонецЕсли;
	
	КоллекцииКВыгрузке.Очистить();
	Для Каждого Коллекция Из ВыгружаемыеКоллекции Цикл
		Если Не Коллекция.Пометка Тогда
			Продолжить;
		КонецЕсли;
		ОписаниеКоллекции = НастройкиСервиса.Коллекции[Коллекция.Значение];
		КоллекцииКВыгрузке.Добавить(Коллекция.Значение);
		
		Если ОписаниеКоллекции.Выгружать Тогда
			СводкаПоКоллекции= РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж.ПолучитьИнформациюКоллекции(ОписаниеКоллекции.ИмяВИсточнике);
			Если РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж.КоллекцияВыгружалась(ОписаниеКоллекции.ИмяВИсточнике)
				И Не ОписаниеКоллекции.Категориальный Тогда
				// При выгрузке будет автоматически сброшена дата актуальности.
				// Все коллекции так же будут удалены на сервере в методе СоздатьКоллекции при такой настройке.
				СводкаПоКоллекции.ИзмененыОтборы = Истина;
			КонецЕсли;
			СводкаПоКоллекции.ИзмененФормат = Истина;
			РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж.ЗаписатьИнформациюКоллекции(ОписаниеКоллекции.ИмяВИсточнике, СводкаПоКоллекции);
		КонецЕсли;
	КонецЦикла;
	
	РегистрыСведений.ЖурналСервисаПрогнозирования.ПроверитьОчиститьЖурналСервисаПрогнозирования();
	
	СервисПрогнозирования.СоздатьКоллекции(КоллекцииКВыгрузке.ВыгрузитьЗначения());
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	РезультатРасчета = ДлительныеОперации.ВыполнитьВФоне("СервисПрогнозирования.ВыгрузитьКоллекции",
	                                                     КоллекцииКВыгрузке.ВыгрузитьЗначения(),
	                                                     ПараметрыВыполнения);
	
	ОбновитьИнформациюОВыгрузкеКоллекций();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокВыгружаемыхКоллекцийНаСервере()
	ЗаполнитьСписокВыгружаемыхКоллекций();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыгружаемыхКоллекций()
	
	ВыгружаемыеКоллекции.Очистить();
	
	НастройкиСервиса = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	Для Каждого КлючЗначениеКоллекции Из НастройкиСервиса.Коллекции Цикл
		ОписаниеКоллекции = КлючЗначениеКоллекции.Значение;
		Если ОписаниеКоллекции.Выгружать Тогда
			НоваяСтрока = ВыгружаемыеКоллекции.Добавить();
			НоваяСтрока.Значение = КлючЗначениеКоллекции.Ключ;
			НоваяСтрока.Пометка = Ложь;
			Если РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж.КоллекцияВыгружалась(КлючЗначениеКоллекции.Ключ) Тогда
				СводкаПоКоллекции= РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж.ПолучитьИнформациюКоллекции(КлючЗначениеКоллекции.Ключ);
				ШаблонПредставления = НСтр("ru = '%1, выгрузка начата: %2, последняя порция выгружена: %3, выгружено: %4 записей, принято сервером: %5 записей'");
				НоваяСтрока.Представление = СтрШаблон(ШаблонПредставления, КлючЗначениеКоллекции.Значение.Представление,
					СводкаПоКоллекции.ДатаНачалаПоследнейВыгрузки,
					СводкаПоКоллекции.ДатаПоследнейВыгрузки,
					СводкаПоКоллекции.КоличествоДанныхВыгруженное,
					СводкаПоКоллекции.КоличествоДанныхНаСервере);
			Иначе
				ШаблонПредставления = НСтр("ru = '%1, выгрузка не проводилась'");
				НоваяСтрока.Представление = СтрШаблон(ШаблонПредставления, КлючЗначениеКоллекции.Значение.Представление);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура КоллекцииНаСервереВыделитьВсеНаСервере()
	Для Каждого Строка Из КоллекцииНаСервере Цикл
		Строка.Пометка = Истина;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура КоллекцииНаСервереСнятьВыделениеНаСервере()
	Для Каждого Строка Из КоллекцииНаСервере Цикл
		Строка.Пометка = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьСоставКоллекцийНаСервере()
	
	ИмяМетода = ИмяМетодаПолучитьПереченьКоллекций();
	ЗапуститьФоновоеЗаданиеПолучениеДанныхСервиса(ИмяМетода);
	
	Если ПустаяСтрока(ИдентификаторЗадания) Тогда
		ОбновитьСоставКоллекцийНаСервереФинальный();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСоставКоллекцийНаСервереФинальный()
	
	СписокКоллекций = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	КоллекцииНаСервере.Очистить();
	
	НастройкиСервиса = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	
	ОписаниеКоллекций = СервисПрогнозированияПереопределяемый.ПолучитьОписаниеРеквизитовВсехКоллекций();
	Если ТипЗнч(СписокКоллекций.ДесериализованноеЗначение) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	Для Каждого Строка Из СписокКоллекций.ДесериализованноеЗначение Цикл
		НоваяСтрока = КоллекцииНаСервере.Добавить();
		НоваяСтрока.ИмяВСервисе = Строка["name"];
		НоваяСтрока.ИдентификаторКоллекции = Строка["id"];
		
		Для Каждого ОписаниеКоллекции Из ОписаниеКоллекций Цикл
			Если ОписаниеКоллекции.Значение.ИмяВСервисе = НоваяСтрока.ИмяВСервисе Тогда
				НоваяСтрока.ПредставлениеКоллекции = ОписаниеКоллекции.Значение.Представление;
				НоваяСтрока.ИмяВИсточнике = ОписаниеКоллекции.Значение.ИмяВИсточнике;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж.КоллекцияВыгружалась(НоваяСтрока.ИмяВИсточнике) Тогда
			СводкаПоКоллекции= РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж.ПолучитьИнформациюКоллекции(НоваяСтрока.ИмяВИсточнике);
			Если СводкаПоКоллекции.ИдКоллекции = НоваяСтрока.ИдентификаторКоллекции Тогда
				НоваяСтрока.КоличествоВСервисеПриПоследнейВыгрузке = СводкаПоКоллекции.КоличествоДанныхНаСервере;
				НоваяСтрока.КоличествоВИсточникеПриПоследнейВыгрузке = СводкаПоКоллекции.КоличествоДанныхВыгруженное;
			КонецЕсли;
		КонецЕсли;
		
		ИнфоКоллекций = СервисПрогнозирования.ПолучитьИнфоКоллекцииНаСервере(НоваяСтрока.ИдентификаторКоллекции).ДесериализованноеЗначение;
		Если ТипЗнч(ИнфоКоллекций) = Тип("Соответствие") Тогда
			НоваяСтрока.КоличествоДанных = Число(ИнфоКоллекций["info"]["rowCount"]);
		КонецЕсли;
	КонецЦикла;
	
	КоллекцииНаСервере.Сортировать("ИмяВСервисе, ИдентификаторКоллекции");
	
КонецПроцедуры

&НаСервере
Процедура ЗапуститьФоновоеЗаданиеПолучениеДанныхСервиса(ИмяМетода, ПараметрыМетода = Неопределено)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	Если ПараметрыМетода = Неопределено
		Или ПараметрыМетода.Количество() = 0 Тогда
		РезультатРасчета = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
			ИмяМетода);
	ИначеЕсли ПараметрыМетода.Количество() = 1 Тогда
		РезультатРасчета = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
			ИмяМетода,
			ПараметрыМетода[0]);
	ИначеЕсли ПараметрыМетода.Количество() = 2 Тогда
		РезультатРасчета = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
			ИмяМетода,
			ПараметрыМетода[0],
			ПараметрыМетода[1]);
	ИначеЕсли ПараметрыМетода.Количество() = 3 Тогда
		РезультатРасчета = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
			ИмяМетода,
			ПараметрыМетода[0],
			ПараметрыМетода[1],
			ПараметрыМетода[2]);
	КонецЕсли;
	ИдентификаторЗадания = РезультатРасчета.ИдентификаторЗадания;
	АдресРезультата = РезультатРасчета.АдресРезультата;
	ИмяМетодаФоновогоЗадания = ИмяМетода;
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьВыбранныеКоллекцииНаСервере()
	
	Для Каждого Строка Из КоллекцииНаСервере Цикл
		Если Строка.Пометка
			И Строка.ИдентификаторКоллекции <> 0 Тогда
			ОчиститьУдалитьКоллекцию(Строка.ИдентификаторКоллекции);
		КонецЕсли;
	КонецЦикла;
	ОбновитьСоставКоллекцийНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьВыбранныеКоллекцииНаСервере()
	
	Для Каждого Строка Из КоллекцииНаСервере Цикл
		Если Строка.Пометка
			И Строка.ИдентификаторКоллекции <> 0 Тогда
			
			ОчиститьУдалитьКоллекцию(Строка.ИдентификаторКоллекции, Истина);
			
			Коллекция = СоответствиеКоллекцийСервиса(Строка.ИмяВСервисе);
			РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж.ОчиститьКоллекцию(Коллекция);
			
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьСоставКоллекцийНаСервере();
	
КонецПроцедуры

// Очистить или удалить коллекцию на сервере.
// 
// Параметры:
//  ИдКоллекции - Число - Ид коллекции
//  УдалитьКоллекцию - Булево - Удалить коллекцию
&НаСервере
Процедура ОчиститьУдалитьКоллекцию(ИдКоллекции, УдалитьКоллекцию = Ложь)
	
	СервисПрогнозирования.ОчиститьУдалитьКоллекцию(ИдКоллекции, УдалитьКоллекцию);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИсключенныеОбъектыНаСервере()
	Если ПроверитьВозможностьЗапросаКСервису() Тогда
		ИмяМетода = ИмяМетодаПолучитьИсключенныеОбъекты();
		ПараметрыМетода = Новый Массив();
		ПараметрыМетода.Добавить(ВидПлана);
		ЗапуститьФоновоеЗаданиеПолучениеДанныхСервиса(ИмяМетода, ПараметрыМетода);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьИсключенныеОбъектыНаСервереФинальный()
	
	СтруктураОтвета = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	ИсключенныеОбъекты.Очистить();
	
	НастройкиСервиса = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	НайденныеАналоги = Новый Соответствие;
	
	Если ТипЗнч(СтруктураОтвета.ДесериализованноеЗначение) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ИсключенныйОбъект Из СтруктураОтвета.ДесериализованноеЗначение Цикл
		НоваяСтрока = ИсключенныеОбъекты.Добавить();
		НоваяСтрока.Партнер = Справочники.Партнеры.ПолучитьСсылку(
			СервисПрогнозирования.ПолучитьУникальныйИдентификатор(ИсключенныйОбъект["customer_id"]));
		НоваяСтрока.Склад = Справочники.Склады.ПолучитьСсылку(
			СервисПрогнозирования.ПолучитьУникальныйИдентификатор(ИсключенныйОбъект["shop_id"]));
		НоваяСтрока.Дата = СервисПрогнозирования.ДатаСервисаВДатуПрограммы(ИсключенныйОбъект["date"]);
		НоваяСтрока.Причина = ИсключенныйОбъект["exclude_reason"];
		НоваяСтрока.Количество = Число(ИсключенныйОбъект["quantity"]);
		
		Ответ = СервисПрогнозированияПереопределяемый.ПолучитьНоменклатуруПоИдентификаторуТовараИлиАналога(
			ИсключенныйОбъект["item_id"],
			НастройкиСервиса,
			НайденныеАналоги);
		Номенклатура = Ответ.Номенклатура;
		НайденныеАналоги = Ответ.НайденныеАналоги;
		НоваяСтрока.Номенклатура = Номенклатура;
		
	КонецЦикла;
	
	ИсключенныеОбъекты.Сортировать("Номенклатура, Дата, Склад, Партнер");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСезонностьНаСервере()
	Если ПроверитьВозможностьЗапросаКСервису() Тогда
		ИмяМетода = ИмяМетодаПолучитьСезонность();
		ПараметрыМетода = Новый Массив();
		ПараметрыМетода.Добавить(ВидПлана);
		ЗапуститьФоновоеЗаданиеПолучениеДанныхСервиса(ИмяМетода, ПараметрыМетода);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьСезонностьНаСервереФинальный()
	
	НастройкиСервиса = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	Товары = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Товары;
	ПоляТоваров = НастройкиСервиса.Коллекции[Товары].ВложенноеОписание;
	
	СтруктураОтвета = ПолучитьИзВременногоХранилища(АдресРезультата);
	Сезонность.ПолучитьЭлементы().Очистить();
	
	Если ТипЗнч(СтруктураОтвета.ДесериализованноеЗначение) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СезонностьПоПолям Из СтруктураОтвета.ДесериализованноеЗначение Цикл
		
		ПоляСезонности = Новый Массив();
		СезонностьПоПолямИДатам = Новый ТаблицаЗначений();
		СезонностьПоПолямИДатам.Колонки.Добавить("ПоляСезонности", Новый ОписаниеТипов("Строка"));
		СезонностьПоПолямИДатам.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
		СезонностьПоПолямИДатам.Колонки.Добавить("Коэффициент", Новый ОписаниеТипов("Число"));
		
		Для Каждого СтрокаСезонности Из СезонностьПоПолям Цикл
			Если СтрНайти(СтрокаСезонности.Ключ, "-") > 0 Тогда
				НоваяСтрока = СезонностьПоПолямИДатам.Добавить();
				НоваяСтрока.Дата = СервисПрогнозирования.ДатаСервисаВДатуПрограммы(СтрокаСезонности.Ключ);
				НоваяСтрока.Коэффициент = Число(СтрокаСезонности.Значение);
			ИначеЕсли СтрокаСезонности.Ключ = "sescat_name" Тогда
				ПоляСезонности.Добавить(НСтр("ru='Группа по умолчанию'"));
			Иначе
				ОписаниеРеквизита = СервисПрогнозированияПереопределяемый.НайтиОписаниеРеквизитаКоллекцииПоИмениВСервисе(
					ПоляТоваров, СтрокаСезонности.Ключ);
				
				ЗначениеСвойства = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОписаниеРеквизита.ДополнительноеСвойство, "ТипЗначения");
				ЗначениеПоляСезонности = СтрокаСезонности.Значение;
				ЭтоУИД = СервисПрогнозирования.ЭтоУникальныйИдентификатор(СтрокаСезонности.Значение);
				Если ЭтоУИД Тогда
					ЗначениеПоляСезонности = СервисПрогнозированияПереопределяемый.ПолучитьСсылкуПоОписаниюТиповИдентификатору(
						ЗначениеСвойства, СтрокаСезонности.Значение);
				КонецЕсли;
				ШаблонОписанияПоляСезонности = НСтр("ru='%1: %2'");
				ПоляСезонности.Добавить(
					СтрШаблон(ШаблонОписанияПоляСезонности, ОписаниеРеквизита.Представление, ЗначениеПоляСезонности));
			КонецЕсли;
		КонецЦикла;
		
		ГруппировочнаяСтрока = Сезонность.ПолучитьЭлементы().Добавить();
		ГруппировочнаяСтрока.ПоляСезонности = СтрСоединить(ПоляСезонности, ", ");
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СезонностьПоПолямИДатам, ГруппировочнаяСтрока.ПолучитьЭлементы());
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСезонностьПоМесяцамНаСервере()
	Если ПроверитьВозможностьЗапросаКСервису() Тогда
		ИмяМетода = ИмяМетодаПолучитьСезонностьПоМесяцам();
		ПараметрыМетода = Новый Массив();
		ПараметрыМетода.Добавить(ВидПлана);
		ЗапуститьФоновоеЗаданиеПолучениеДанныхСервиса(ИмяМетода, ПараметрыМетода);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьСезонностьПоМесяцамНаСервереФинальный()
	
	Год = Дата(1, 1, 1);
	
	НастройкиСервиса = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	Товары = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Товары;
	ПоляТоваров = НастройкиСервиса.Коллекции[Товары].ВложенноеОписание;
	
	СтруктураОтвета = ПолучитьИзВременногоХранилища(АдресРезультата);
	СезонностьПоМесяцам.Очистить();
	
	Если ТипЗнч(СтруктураОтвета.ДесериализованноеЗначение) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Месяца = Месяца();
	
	Для Каждого СезонностьПоПолям Из СтруктураОтвета.ДесериализованноеЗначение Цикл
		
		ПоляСезонности = Новый Массив();
		СезонностьПоПолямИДатам = СезонностьПоМесяцам.Выгрузить(Новый Массив);
		
		Для Каждого СтрокаСезонности Из СезонностьПоПолям Цикл
			Если СтрНайти(СтрокаСезонности.Ключ, "-") > 0 Тогда
				Дата = СервисПрогнозирования.ДатаСервисаВДатуПрограммы(СтрокаСезонности.Ключ);
				Коэффициент = Число(СтрокаСезонности.Значение);
				
				НомерГода = Год(Дата);
				НомерМесяца = Месяц(Дата);
				НаименованиеМесяца = Месяца[НомерМесяца - 1];
				НаименованиеКолонки = НаименованиеМесяца + "Коэффициент";
				
				НайденнаяСтрока = СезонностьПоПолямИДатам.Найти(НачалоГода(Дата), "Год");
				Если НайденнаяСтрока <> Неопределено Тогда
					НайденнаяСтрока[НаименованиеКолонки] = НайденнаяСтрока[НаименованиеКолонки] + Коэффициент;
				Иначе
					НоваяСтрока = СезонностьПоПолямИДатам.Добавить();
					НоваяСтрока.Год = НачалоГода(Дата);
					НоваяСтрока[НаименованиеКолонки] = Коэффициент;
				КонецЕсли;
				
				Если НачалоГода(Дата) > Год Тогда
					Год = НачалоГода(Дата);
				КонецЕсли;
				
			ИначеЕсли СтрокаСезонности.Ключ = "sescat_name" Тогда
				ПоляСезонности.Добавить(НСтр("ru='Группа по умолчанию'"));
			Иначе
				ОписаниеРеквизита = СервисПрогнозированияПереопределяемый.НайтиОписаниеРеквизитаКоллекцииПоИмениВСервисе(
					ПоляТоваров, СтрокаСезонности.Ключ);
				
				ЗначениеСвойства = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОписаниеРеквизита.ДополнительноеСвойство, "ТипЗначения");
				ЗначениеПоляСезонности = СтрокаСезонности.Значение;
				ЭтоУИД = СервисПрогнозирования.ЭтоУникальныйИдентификатор(СтрокаСезонности.Значение);
				Если ЭтоУИД Тогда
					ЗначениеПоляСезонности = СервисПрогнозированияПереопределяемый.ПолучитьСсылкуПоОписаниюТиповИдентификатору(
						ЗначениеСвойства, СтрокаСезонности.Значение);
				КонецЕсли;
				ШаблонОписанияПоляСезонности = НСтр("ru='%1: %2'");
				ПоляСезонности.Добавить(
					СтрШаблон(ШаблонОписанияПоляСезонности, ОписаниеРеквизита.Представление, ЗначениеПоляСезонности));
			КонецЕсли;
		КонецЦикла;
		СезонностьПоПолямИДатам.ЗаполнитьЗначения(СтрСоединить(ПоляСезонности, ", "), "ПоляСезонности");
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СезонностьПоПолямИДатам, СезонностьПоМесяцам);
		
	КонецЦикла;
	
	СезонностьПоМесяцам.Сортировать("Год, ПоляСезонности");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТочностьМоделиНаСервере()
	Если ПроверитьВозможностьЗапросаКСервису() Тогда
		ИмяМетода = ИмяМетодаПолучитьТочностьМодели();
		ПараметрыМетода = Новый Массив();
		ПараметрыМетода.Добавить(ВидПлана);
		ЗапуститьФоновоеЗаданиеПолучениеДанныхСервиса(ИмяМетода, ПараметрыМетода);
		
		Если ПустаяСтрока(ИдентификаторЗадания) Тогда
			ОбновитьТочностьМоделиНаСервереФинальный();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьТочностьМоделиНаСервереФинальный()
	
	СтруктураОтвета = ПолучитьИзВременногоХранилища(АдресРезультата);
	Если ТипЗнч(СтруктураОтвета.ДесериализованноеЗначение) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	КачествоМоделейПрогнозирования.Очистить();
	
	Для Каждого ИсключенныйОбъект Из СтруктураОтвета.ДесериализованноеЗначение Цикл
		НоваяСтрока = КачествоМоделейПрогнозирования.Добавить();
		НоваяСтрока.ИмяМодели = ИсключенныйОбъект["model"];
		НоваяСтрока.СредняяАбсолютнаяОшибка = Число(ИсключенныйОбъект["MAE"]);
		НоваяСтрока.СредняяАбсолютнаяОшибкаФинал = Число(ИсключенныйОбъект["MAE_final"]);
		НоваяСтрока.СредняяАбсолютнаяОшибкаРяды = Число(ИсключенныйОбъект["MAE_series"]);
		НоваяСтрока.СредняяАбсолютнаяПроцентнаяОшибка = Число(ИсключенныйОбъект["MAPE"]);
		НоваяСтрока.СредняяАбсолютнаяПроцентнаяОшибкаФинал = Число(ИсключенныйОбъект["MAPE_final"]);
		НоваяСтрока.СредняяАбсолютнаяПроцентнаяОшибкаРяды = Число(ИсключенныйОбъект["MAPE_series"]);
		НоваяСтрока.СредняяНормированнаяАбсолютнаяПроцентнаяОшибка = Число(ИсключенныйОбъект["PMAPE"]);
		НоваяСтрока.СредняяНормированнаяАбсолютнаяПроцентнаяОшибкаФинал = Число(ИсключенныйОбъект["PMAPE_final"]);
		НоваяСтрока.СредняяНормированнаяАбсолютнаяПроцентнаяОшибкаРяды = Число(ИсключенныйОбъект["PMAPE_series"]);
		НоваяСтрока.СреднеквадратичноеОтклонение = Число(ИсключенныйОбъект["RMSE"]);
		НоваяСтрока.СреднеквадратичноеОтклонениеФинал = Число(ИсключенныйОбъект["RMSE_final"]);
		НоваяСтрока.СреднеквадратичноеОтклонениеРяды = Число(ИсключенныйОбъект["RMSE_series"]);
		НоваяСтрока.СредняяСимметричнаяАбсолютнаяПроцентнаяОшибка = Число(ИсключенныйОбъект["SMAPE"]);
		НоваяСтрока.СредняяСимметричнаяАбсолютнаяПроцентнаяОшибкаФинал = Число(ИсключенныйОбъект["SMAPE_final"]);
		НоваяСтрока.СредняяСимметричнаяАбсолютнаяПроцентнаяОшибкаРяды = Число(ИсключенныйОбъект["SMAPE_series"]);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТочностьМоделиПланФактПоВсемПериодамНаСервере()
	Если ПроверитьВозможностьЗапросаКСервису() Тогда
		ИмяМетода = ИмяМетодаПолучитьТочностьМоделиПланФактПоВсемПериодам();
		ПараметрыМетода = Новый Массив();
		ПараметрыМетода.Добавить(ВидПлана);
		ЗапуститьФоновоеЗаданиеПолучениеДанныхСервиса(ИмяМетода, ПараметрыМетода);
		
		Если ПустаяСтрока(ИдентификаторЗадания) Тогда
			ОбновитьТочностьМоделиПланФактПоВсемПериодамНаСервереФинальный();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьТочностьМоделиПланФактПоВсемПериодамНаСервереФинальный()
	
	СтруктураОтвета = ПолучитьИзВременногоХранилища(АдресРезультата);
	Если ТипЗнч(СтруктураОтвета.ДесериализованноеЗначение) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	КачествоМоделейПрогнозированияПоВсемПериодам.Очистить();
	
	НастройкиСервиса = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	
	Если ПрогнозПоКатегориям Тогда
		Если ВариантПрогнозированияПоКатегориям = 0 Тогда
			КлючОбъекта = "category_id_" + ИдентификаторКоллекцииТоваров; // "category_processing" = "group".
		Иначе
			КлючОбъекта = "item_id"; // "category_processing" = "reduce".
			НайденныеАналоги = Новый Соответствие;
		КонецЕсли;
	Иначе
		КлючОбъекта = "item_id";
		НайденныеАналоги = Новый Соответствие;
	КонецЕсли;
	
	Для Каждого ОбъектКачества Из СтруктураОтвета.ДесериализованноеЗначение Цикл
		НоваяСтрока = КачествоМоделейПрогнозированияПоВсемПериодам.Добавить();
		НоваяСтрока.ИмяМодели = ОбъектКачества["model"];
		НоваяСтрока.СредняяАбсолютнаяОшибка = Число(ОбъектКачества["MAE"]);
		НоваяСтрока.СредняяАбсолютнаяПроцентнаяОшибка = Число(ОбъектКачества["MAPE"]);
		НоваяСтрока.СредняяНормированнаяАбсолютнаяПроцентнаяОшибка = Число(ОбъектКачества["PMAPE"]);
		НоваяСтрока.СреднеквадратичноеОтклонение = Число(ОбъектКачества["RMSE"]);
		НоваяСтрока.СредняяСимметричнаяАбсолютнаяПроцентнаяОшибка = Число(ОбъектКачества["SMAPE"]);
		
		НоваяСтрока.Партнер = Справочники.Партнеры.ПолучитьСсылку(
			СервисПрогнозирования.ПолучитьУникальныйИдентификатор(ОбъектКачества["customer_id"]));
		НоваяСтрока.Склад = Справочники.Склады.ПолучитьСсылку(
			СервисПрогнозирования.ПолучитьУникальныйИдентификатор(ОбъектКачества["shop_id"]));
		
		ИдентификаторОбъектКачества = ОбъектКачества[КлючОбъекта];
		Если СервисПрогнозирования.ЭтоПустойИдентификатор(ИдентификаторОбъектКачества) Тогда
			НоваяСтрока.Объект = "";
			Продолжить;
		КонецЕсли;
		
		Если ПрогнозПоКатегориям И ВариантПрогнозированияПоКатегориям = 0 Тогда
			НоваяСтрока.Объект = СервисПрогнозированияПереопределяемый.ПолучитьТоварнуюКатегориюПоИдентификаторуКатегории(
				ИдентификаторОбъектКачества);
		Иначе
			Ответ = СервисПрогнозированияПереопределяемый.ПолучитьНоменклатуруПоИдентификаторуТовараИлиАналога(
				ИдентификаторОбъектКачества,
				НастройкиСервиса,
				НайденныеАналоги);
			НайденныеАналоги   = Ответ.НайденныеАналоги;
			НоваяСтрока.Объект = Ответ.Номенклатура;
		КонецЕсли;
		
	КонецЦикла;
	
	КачествоМоделейПрогнозированияПоВсемПериодам.Сортировать("Объект, Дата, Склад, Партнер");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТочностьМоделиПланФактПоПериодамНаСервере()
	Если ПроверитьВозможностьЗапросаКСервису() Тогда
		ИмяМетода = ИмяМетодаПолучитьТочностьМоделиПланФактПоПериодам();
		ПараметрыМетода = Новый Массив();
		ПараметрыМетода.Добавить(ВидПлана);
		ЗапуститьФоновоеЗаданиеПолучениеДанныхСервиса(ИмяМетода, ПараметрыМетода);
		
		Если ПустаяСтрока(ИдентификаторЗадания) Тогда
			ОбновитьТочностьМоделиПланФактПоПериодамНаСервереФинальный();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьТочностьМоделиПланФактПоПериодамНаСервереФинальный()
	
	СтруктураОтвета = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ТипЗнч(СтруктураОтвета.ДесериализованноеЗначение) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	КачествоМоделейПрогнозированияПоПериодам.Очистить();
	
	НастройкиСервиса = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	
	Если ПрогнозПоКатегориям Тогда
		Если ВариантПрогнозированияПоКатегориям = 0 Тогда
			КлючОбъекта = "category_id_" + ИдентификаторКоллекцииТоваров; // "category_processing" = "group".
		Иначе
			КлючОбъекта = "item_id"; // "category_processing" = "reduce".
			НайденныеАналоги = Новый Соответствие;
		КонецЕсли;
	Иначе
		КлючОбъекта = "item_id";
		НайденныеАналоги = Новый Соответствие;
	КонецЕсли;
	
	Для Каждого ОбъектКачества Из СтруктураОтвета.ДесериализованноеЗначение Цикл
		НоваяСтрока = КачествоМоделейПрогнозированияПоПериодам.Добавить();
		
		НоваяСтрока.Модель1с = Число(ОбъектКачества["1C_model"]);
		НоваяСтрока.СквозноеТрендовоеРазложение = Число(ОбъектКачества["STL_model"]);
		НоваяСтрока.ТрендовоеРазложение = Число(ОбъектКачества["TL_model"]);
		НоваяСтрока.ЭкспоненциальноеСглаживание = Число(ОбъектКачества["exp_smoothing"]);
		НоваяСтрока.ЛогарифмЭкспоненциальногоСглаживания = Число(ОбъектКачества["exp_smoothing_log"]);
		НоваяСтрока.Элемент = Число(ОбъектКачества["item"]);
		НоваяСтрока.НаивнаяМодель = Число(ОбъектКачества["naive"]);
		НоваяСтрока.РекуррентнаяНейроннаяСеть = Число(ОбъектКачества["rnn_model"]);
		НоваяСтрока.СкользящееСреднее = Число(ОбъектКачества["rolling_mean3"]);
		НоваяСтрока.ЛогарифмСкользящегоСреднего = Число(ОбъектКачества["rolling_mean3_log"]);
		НоваяСтрока.СредняяСезонность = Число(ОбъектКачества["season_mean"]);
		
		НоваяСтрока.Дата = СервисПрогнозирования.ДатаСервисаВДатуПрограммы(ОбъектКачества["date"]);
		
		НоваяСтрока.Партнер = Справочники.Партнеры.ПолучитьСсылку(
			СервисПрогнозирования.ПолучитьУникальныйИдентификатор(ОбъектКачества["customer_id"]));
		НоваяСтрока.Склад = Справочники.Склады.ПолучитьСсылку(
			СервисПрогнозирования.ПолучитьУникальныйИдентификатор(ОбъектКачества["shop_id"]));
		
		ИдентификаторОбъектаКачества = ОбъектКачества[КлючОбъекта];
		Если СервисПрогнозирования.ЭтоПустойИдентификатор(ИдентификаторОбъектаКачества) Тогда
			НоваяСтрока.Объект = "";
			Продолжить;
		КонецЕсли;
		
		Если ПрогнозПоКатегориям И ВариантПрогнозированияПоКатегориям = 0 Тогда
			НоваяСтрока.Объект = СервисПрогнозированияПереопределяемый.ПолучитьТоварнуюКатегориюПоИдентификаторуКатегории(
				ИдентификаторОбъектаКачества);
		Иначе
			Ответ = СервисПрогнозированияПереопределяемый.ПолучитьНоменклатуруПоИдентификаторуТовараИлиАналога(
				ИдентификаторОбъектаКачества,
				НастройкиСервиса,
				НайденныеАналоги);
			НайденныеАналоги   = Ответ.НайденныеАналоги;
			НоваяСтрока.Объект = Ответ.Номенклатура;
		КонецЕсли;
	КонецЦикла;
	
	КачествоМоделейПрогнозированияПоПериодам.Сортировать("Объект, Дата, Склад, Партнер");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТочностьМоделиПоОбъектамНаСервере()
	Если ПроверитьВозможностьЗапросаКСервису() Тогда
		ИмяМетода = ИмяМетодаПолучитьТочностьМоделиПоОбъектам();
		ПараметрыМетода = Новый Массив();
		ПараметрыМетода.Добавить(ВидПлана);
		ЗапуститьФоновоеЗаданиеПолучениеДанныхСервиса(ИмяМетода, ПараметрыМетода);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьТочностьМоделиПоОбъектамНаСервереФинальный()
	
	СтруктураОтвета = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ТипЗнч(СтруктураОтвета.ДесериализованноеЗначение) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	КачествоМоделейПрогнозированияПоОбъектам.Очистить();
	
	НастройкиСервиса = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	НайденныеАналоги = Новый Соответствие;
	
	Для Каждого ИсключенныйОбъект Из СтруктураОтвета.ДесериализованноеЗначение Цикл
		НоваяСтрока = КачествоМоделейПрогнозированияПоОбъектам.Добавить();
		
		НоваяСтрока.Модель1с = Число(ИсключенныйОбъект["1C_model"]);
		НоваяСтрока.СквозноеТрендовоеРазложение = Число(ИсключенныйОбъект["STL_model"]);
		НоваяСтрока.ТрендовоеРазложение = Число(ИсключенныйОбъект["TL_model"]);
		НоваяСтрока.ЭкспоненциальноеСглаживание = Число(ИсключенныйОбъект["exp_smoothing"]);
		НоваяСтрока.ЛогарифмЭкспоненциальногоСглаживания = Число(ИсключенныйОбъект["exp_smoothing_log"]);
		НоваяСтрока.Элемент = Число(ИсключенныйОбъект["item"]);
		НоваяСтрока.НаивнаяМодель = Число(ИсключенныйОбъект["naive"]);
		НоваяСтрока.Коррекция = Число(ИсключенныйОбъект["q_corrected"]);
		НоваяСтрока.РекуррентнаяНейроннаяСеть = Число(ИсключенныйОбъект["rnn_model"]);
		НоваяСтрока.СкользящееСреднее = Число(ИсключенныйОбъект["rolling_mean3"]);
		НоваяСтрока.ЛогарифмСкользящегоСреднего = Число(ИсключенныйОбъект["rolling_mean3_log"]);
		НоваяСтрока.СредняяСезонность = Число(ИсключенныйОбъект["season_mean"]);
		
		НоваяСтрока.Партнер = Справочники.Партнеры.ПолучитьСсылку(
			СервисПрогнозирования.ПолучитьУникальныйИдентификатор(ИсключенныйОбъект["customer_id"]));
		НоваяСтрока.Склад = Справочники.Склады.ПолучитьСсылку(
			СервисПрогнозирования.ПолучитьУникальныйИдентификатор(ИсключенныйОбъект["shop_id"]));
		
		Ответ = СервисПрогнозированияПереопределяемый.ПолучитьНоменклатуруПоИдентификаторуТовараИлиАналога(
			ИсключенныйОбъект["product_id"],
			НастройкиСервиса,
			НайденныеАналоги);
		Номенклатура = Ответ.Номенклатура;
		НайденныеАналоги = Ответ.НайденныеАналоги;
		НоваяСтрока.Номенклатура = Номенклатура;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция Месяца()
	
	Месяца = Новый Массив();
	Месяца.Добавить("Январь");
	Месяца.Добавить("Февраль");
	Месяца.Добавить("Март");
	Месяца.Добавить("Апрель");
	Месяца.Добавить("Май");
	Месяца.Добавить("Июнь");
	Месяца.Добавить("Июль");
	Месяца.Добавить("Август");
	Месяца.Добавить("Сентябрь");
	Месяца.Добавить("Октябрь");
	Месяца.Добавить("Ноябрь");
	Месяца.Добавить("Декабрь");
	
	Возврат Месяца;
	
КонецФункции

&НаСервере
Процедура ОбновитьИсториюОбученияНаСервере()
	Если ПроверитьВозможностьЗапросаКСервису() Тогда
		ИмяМетода = ИмяМетодаОбновитьИсториюОбучения();
		ПараметрыМетода = Новый Массив();
		ПараметрыМетода.Добавить(ВидПлана);
		ПараметрыМетода.Добавить(ФильтрыЗапросаИсторииОбученияПоОбъекту()); // Структура - 
		ЗапуститьФоновоеЗаданиеПолучениеДанныхСервиса(ИмяМетода, ПараметрыМетода);
		
		Если ПустаяСтрока(ИдентификаторЗадания) Тогда
			ОбновитьИсториюОбученияНаСервереФинальный();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьИсториюОбученияНаСервереФинальный()
	
	СтруктураОтвета = ПолучитьИзВременногоХранилища(АдресРезультата);
	Если ТипЗнч(СтруктураОтвета.ДесериализованноеЗначение) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	ИсторияОбучения.Очистить();
	
	НастройкиСервиса = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	
	Если ПрогнозПоКатегориям Тогда
		Если ВариантПрогнозированияПоКатегориям = 0 Тогда
			КлючОбъекта = "category_id_" + ИдентификаторКоллекцииТоваров; // "category_processing" = "group".
		Иначе
			КлючОбъекта = "item_id"; // "category_processing" = "reduce".
			НайденныеАналоги = Новый Соответствие;
		КонецЕсли;
	Иначе
		КлючОбъекта = "item_id";
		НайденныеАналоги = Новый Соответствие;
	КонецЕсли;
	
	Для Каждого ОбъектИстории Из СтруктураОтвета.ДесериализованноеЗначение Цикл
		НоваяСтрока = ИсторияОбучения.Добавить();
		НоваяСтрока.Партнер = Справочники.Партнеры.ПолучитьСсылку(
			СервисПрогнозирования.ПолучитьУникальныйИдентификатор(ОбъектИстории["customer_id"]));
		НоваяСтрока.Склад = Справочники.Склады.ПолучитьСсылку(
			СервисПрогнозирования.ПолучитьУникальныйИдентификатор(ОбъектИстории["shop_id"]));
		НоваяСтрока.Дата = СервисПрогнозирования.ДатаСервисаВДатуПрограммы(ОбъектИстории["date"]);
		НоваяСтрока.СкорректированноеЗначениеПродаж = ОбъектИстории["q_corrected"];
		НоваяСтрока.ИсходноеЗначениеПродаж = ОбъектИстории["q_init"];
		
		ИдентификаторОбъектаИстории = ОбъектИстории[КлючОбъекта];
		Если СервисПрогнозирования.ЭтоПустойИдентификатор(ИдентификаторОбъектаИстории) Тогда
			НоваяСтрока.Объект = "";
			Продолжить;
		КонецЕсли;
		
		Если ПрогнозПоКатегориям И ВариантПрогнозированияПоКатегориям = 0 Тогда
			НоваяСтрока.Объект = СервисПрогнозированияПереопределяемый.ПолучитьТоварнуюКатегориюПоИдентификаторуКатегории(
				ИдентификаторОбъектаИстории);
		Иначе
			Ответ = СервисПрогнозированияПереопределяемый.ПолучитьНоменклатуруПоИдентификаторуТовараИлиАналога(
				ИдентификаторОбъектаИстории,
				НастройкиСервиса,
				НайденныеАналоги);
			НайденныеАналоги   = Ответ.НайденныеАналоги;
			НоваяСтрока.Объект = Ответ.Номенклатура;
		КонецЕсли;
		
	КонецЦикла;
	
	ИсторияОбучения.Сортировать("Объект, Дата, Склад, Партнер");
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОбработчикОжиданияИндикатораВыгрузки()
	
	ПодключитьОбработчикОжидания("Подключаемый_ИндикаторВыгрузки", 4, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПрерватьВыгрузкуНаСервере()
	
	СводкаОбменаДанными = РегистрыСведений.СтатусыОбменаДаннымиССервисомПрогнозированияПродаж.ПолучитьСтатусыОбменаДанными();
	СводкаОбменаДанными.ОбменДаннымиАктивен = Ложь;
	РегистрыСведений.СтатусыОбменаДаннымиССервисомПрогнозированияПродаж.ЗаписатьСтатусыОбменаДанными(СводкаОбменаДанными);
	
	СобытиеЖурналаРегистрации = СервисПрогнозированияПереопределяемый.ТекстСобытиеЖурналаРегистрации();
	Комментарий = НСтр("ru = 'Выгрузка данных в сервис прогнозирования продаж прервана вручную.'", ОбщегоНазначения.КодОсновногоЯзыка());
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации,
								УровеньЖурналаРегистрации.Информация,
								,
								,
								Комментарий);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьВозможностьЗапросаКСервису()
	
	Если Не ЗначениеЗаполнено(СценарийПрогнозирования) Тогда
		ТекстОшибки = НСтр("ru = 'Не заполнено поле ""Сценарий"".'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,"СценарийПрогнозирования");
		Возврат Ложь;
	ИначеЕсли Не ЗначениеЗаполнено(ВидПлана) Тогда
		ТекстОшибки = НСтр("ru = 'Не заполнено поле ""Вид плана"".'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,"ВидПлана");
		Возврат Ложь;
	ИначеЕсли Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидПлана, "ЗаполнятьПоДаннымСервиса") Тогда
		ТекстОшибки = НСтр("ru = 'Выбранный вид плана не настроен для работы с сервисом прогнозирования.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,"ВидПлана");
		Возврат Ложь;
	КонецЕсли;
	
	ИдетОбменДанными = СервисПрогнозирования.ИдетОбменДанными();
	Если ИдетОбменДанными Тогда
		ТекстОшибки = НСтр("ru = 'Выполнить действие невозможно, поскольку идет обмен данными.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СоответствиеКоллекцийСервиса(ИмяВСервисе)
	
	Если ИмяВСервисе = "sales" Тогда
		Возврат Перечисления.КоллекцииСервисаПрогнозированияПродаж.Продажи;
	ИначеЕсли ИмяВСервисе = "products" Тогда
		Возврат Перечисления.КоллекцииСервисаПрогнозированияПродаж.Товары;
	ИначеЕсли ИмяВСервисе = "product_variants" Тогда
		Возврат Перечисления.КоллекцииСервисаПрогнозированияПродаж.ХарактеристикиНоменклатуры;
	ИначеЕсли ИмяВСервисе = "category" Тогда
		Возврат Перечисления.КоллекцииСервисаПрогнозированияПродаж.Категории;
	ИначеЕсли ИмяВСервисе = "customers" Тогда
		Возврат Перечисления.КоллекцииСервисаПрогнозированияПродаж.Покупатели;
	ИначеЕсли ИмяВСервисе = "shops" Тогда
		Возврат Перечисления.КоллекцииСервисаПрогнозированияПродаж.Склады;
	ИначеЕсли ИмяВСервисе = "stock" Тогда
		Возврат Перечисления.КоллекцииСервисаПрогнозированияПродаж.Остатки;
	ИначеЕсли ИмяВСервисе = "customer_orders" Тогда
		Возврат Перечисления.КоллекцииСервисаПрогнозированияПродаж.Заказы;
	ИначеЕсли ИмяВСервисе = "promo" Тогда
		Возврат Перечисления.КоллекцииСервисаПрогнозированияПродаж.Промо;
	ИначеЕсли ИмяВСервисе = "sales_plan" Тогда
		Возврат Перечисления.КоллекцииСервисаПрогнозированияПродаж.ПланыПродаж;
	ИначеЕсли ИмяВСервисе = "seasonality" Тогда
		Возврат Перечисления.КоллекцииСервисаПрогнозированияПродаж.Сезонность;
	ИначеЕсли ИмяВСервисе = "calendar" Тогда
		Возврат Перечисления.КоллекцииСервисаПрогнозированияПродаж.Календарь;
	Иначе
		Возврат Перечисления.КоллекцииСервисаПрогнозированияПродаж.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ФильтрыЗапросаИсторииОбученияПоОбъекту()
	
	ФильтрыИсторииОбученияПоОбъекту = Новый Структура();
	Если ЗначениеЗаполнено(ИсторияОбученияФильтрПоСкладу) Тогда
		ИдентификаторОбъектаИстории = Строка(ИсторияОбученияФильтрПоСкладу.УникальныйИдентификатор());
		ФильтрыИсторииОбученияПоОбъекту.Вставить("shop_id", ИдентификаторОбъектаИстории);
	КонецЕсли;
	Если ПрогнозПоКатегориям Тогда
		Если ЗначениеЗаполнено(ИсторияОбученияФильтрПоТоварнойКатегории) Тогда
			ИдентификаторОбъектаИстории = Строка(ИсторияОбученияФильтрПоТоварнойКатегории.УникальныйИдентификатор());
			ФильтрыИсторииОбученияПоОбъекту.Вставить("category_id_" + ИдентификаторКоллекцииТоваров,
				ИдентификаторОбъектаИстории);
		КонецЕсли;
		Если ВариантПрогнозированияПоКатегориям = 1
			И ЗначениеЗаполнено(ИсторияОбученияФильтрПоТовару) Тогда
			ИдентификаторОбъектаИстории = Строка(ИсторияОбученияФильтрПоТовару.УникальныйИдентификатор());
			ФильтрыИсторииОбученияПоОбъекту.Вставить("item_id", ИдентификаторОбъектаИстории);
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ИсторияОбученияФильтрПоТовару) Тогда
			ИдентификаторОбъектаИстории = Строка(ИсторияОбученияФильтрПоТовару.УникальныйИдентификатор());
			ФильтрыИсторииОбученияПоОбъекту.Вставить("item_id", ИдентификаторОбъектаИстории);
		КонецЕсли;
		Если ЗначениеЗаполнено(ИсторияОбученияФильтрПоПартнеру) Тогда
			ИдентификаторОбъектаИстории = Строка(ИсторияОбученияФильтрПоПартнеру.УникальныйИдентификатор());
			ФильтрыИсторииОбученияПоОбъекту.Вставить("customer_id", ИдентификаторОбъектаИстории);
		КонецЕсли;
		Если ЗначениеЗаполнено(ИсторияОбученияФильтрПоХарактеристике) Тогда
			ИдентификаторОбъектаИстории = Строка(ИсторияОбученияФильтрПоХарактеристике.УникальныйИдентификатор());
			ФильтрыИсторииОбученияПоОбъекту.Вставить("item_variant_id", ИдентификаторОбъектаИстории);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ФильтрыИсторииОбученияПоОбъекту;
	
КонецФункции

#Область ПодключаемыеМетоды

&НаКлиенте
Процедура Подключаемый_ИндикаторВыгрузки()
	
	ОбновитьИнформациюОВыгрузкеКоллекций();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеФоновогоЗадания()
	ОбработатьВыполнениеФоновогоЗаданияСервер();
	Если Не ПустаяСтрока(ИдентификаторЗадания) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеФоновогоЗадания", 1, Истина);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработкаПодключаемыхМетодов

&НаСервере
Процедура ОбработатьВыполнениеФоновогоЗаданияСервер()
	Если Не ПустаяСтрока(ИдентификаторЗадания)
		И ДлительныеОперации.ЗаданиеВыполнено(Новый УникальныйИдентификатор(ИдентификаторЗадания)) Тогда
		ИдентификаторЗадания = "";
		
		Ответ = ПолучитьИзВременногоХранилища(АдресРезультата);
		Если Не ПустаяСтрока(Ответ.ТекстОшибки) Тогда
			УстановитьВидимостьДоступность();
			ВызватьИсключение Ответ.ТекстОшибки;
		КонецЕсли;
		
		Если ИмяМетодаФоновогоЗадания = ИмяМетодаПолучитьПереченьКоллекций() Тогда
			ОбновитьСоставКоллекцийНаСервереФинальный();
		ИначеЕсли ИмяМетодаФоновогоЗадания = ИмяМетодаПолучитьИсключенныеОбъекты() Тогда
			ОбновитьИсключенныеОбъектыНаСервереФинальный();
		ИначеЕсли ИмяМетодаФоновогоЗадания = ИмяМетодаОбновитьИсториюОбучения() Тогда
			ОбновитьИсториюОбученияНаСервереФинальный();
		ИначеЕсли ИмяМетодаФоновогоЗадания = ИмяМетодаПолучитьСезонность() Тогда
			ОбновитьСезонностьНаСервереФинальный();
		ИначеЕсли ИмяМетодаФоновогоЗадания = ИмяМетодаПолучитьСезонностьПоМесяцам() Тогда
			ОбновитьСезонностьПоМесяцамНаСервереФинальный();
		ИначеЕсли ИмяМетодаФоновогоЗадания = ИмяМетодаПолучитьТочностьМодели() Тогда
			ОбновитьТочностьМоделиНаСервереФинальный();
		ИначеЕсли ИмяМетодаФоновогоЗадания = ИмяМетодаПолучитьТочностьМоделиПланФактПоВсемПериодам() Тогда
			ОбновитьТочностьМоделиПланФактПоВсемПериодамНаСервереФинальный();
		ИначеЕсли ИмяМетодаФоновогоЗадания = ИмяМетодаПолучитьТочностьМоделиПланФактПоПериодам() Тогда
			ОбновитьТочностьМоделиПланФактПоПериодамНаСервереФинальный();
		ИначеЕсли ИмяМетодаФоновогоЗадания = ИмяМетодаПолучитьТочностьМоделиПоОбъектам() Тогда
			ОбновитьТочностьМоделиПоОбъектамНаСервереФинальный();
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюОВыгрузкеКоллекций()
	
	СводкаОбменаДанными = РегистрыСведений.СтатусыОбменаДаннымиССервисомПрогнозированияПродаж.ПолучитьСтатусыОбменаДанными();
	ВыгружаемаяСейчасКоллекция = СводкаОбменаДанными.ВыгружаемаяСейчасКоллекция;
	ВыгружаемаяСейчасКоллекцияПредставление = "";
	Если ЗначениеЗаполнено(ВыгружаемаяСейчасКоллекция) Тогда
		НастройкиСервиса = СервисПрогнозирования.ПолучитьНастройкиСервиса();
		ВыгружаемаяСейчасКоллекцияПредставление = НастройкиСервиса.Коллекции[ВыгружаемаяСейчасКоллекция].Представление;
	КонецЕсли;
	
	Если СводкаОбменаДанными.ОбменДаннымиАктивен
		И СводкаОбменаДанными.ЗапланированоВыгрузитьКоллекций > 0 Тогда
		ДоляКоллекции = 1 / СводкаОбменаДанными.ЗапланированоВыгрузитьКоллекций;
		ПроцентовКоллекций = СводкаОбменаДанными.ВыгруженоКоллекций / СводкаОбменаДанными.ЗапланированоВыгрузитьКоллекций * 100;
		
		ПроцентовПоОбъектно = 0;
		Если СводкаОбменаДанными.ЗапланированоВыгрузитьОбъектовКоллекции > 0 Тогда
			ПроцентовПоОбъектно = СводкаОбменаДанными.ВыгруженоОбъектовКоллекции / СводкаОбменаДанными.ЗапланированоВыгрузитьОбъектовКоллекции * 100;
			ПроцентовПоОбъектно = ПроцентовПоОбъектно * ДоляКоллекции;
		КонецЕсли;
		
		ИндикаторВыгрузки = ПроцентовКоллекций + ПроцентовПоОбъектно;
	Иначе
		ИндикаторВыгрузки = 0;
	КонецЕсли;
	ШаблонПодсказки = НСтр("ru='Выгружается коллекция: %1, %2 из %3 записей.'");
	Элементы.ИндикаторВыгрузки.Подсказка = СтроковыеФункции.ФорматированнаяСтрока(ШаблонПодсказки,
		ВыгружаемаяСейчасКоллекцияПредставление,
		СводкаОбменаДанными.ВыгруженоОбъектовКоллекции,
		СводкаОбменаДанными.ЗапланированоВыгрузитьОбъектовКоллекции);
	
	ИдетВыгрузкаДанных = СводкаОбменаДанными.ОбменДаннымиАктивен;
	
	Если ИдетВыгрузкаДанных Тогда
		Элементы.ГруппаВариантыВыгрузкиСтраницы.ТекущаяСтраница = Элементы.ГруппаВариантыВыгрузкиСтраницаИдетВыгрузка;
		Если Элементы.ГруппаВариантыВыгрузкиСтраницы.ТекущаяСтраница <> Элементы.ГруппаВариантыВыгрузкиСтраницаИдетВыгрузка Тогда
			ЗаполнитьСписокВыгружаемыхКоллекций();
		КонецЕсли;
	Иначе
		Элементы.ГруппаВариантыВыгрузкиСтраницы.ТекущаяСтраница = Элементы.ГруппаВариантыВыгрузкиСтраницаВарианты;
		Если Элементы.ГруппаВариантыВыгрузкиСтраницы.ТекущаяСтраница <> Элементы.ГруппаВариантыВыгрузкиСтраницаВарианты Тогда
			ЗаполнитьСписокВыгружаемыхКоллекций();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИменаМетодов

&НаКлиентеНаСервереБезКонтекста
Функция ИмяМетодаПолучитьПереченьКоллекций()
	Возврат "СервисПрогнозирования.ПолучитьПереченьКоллекцийНаСервере";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяМетодаПолучитьИсключенныеОбъекты()
	Возврат "СервисПрогнозирования.ПолучитьИсключенныеОбъектыОбучения";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяМетодаОбновитьИсториюОбучения()
	Возврат "СервисПрогнозирования.ПолучитьИсториюОбучения";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяМетодаПолучитьСезонность()
	Возврат "СервисПрогнозирования.ПолучитьСезонность";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяМетодаПолучитьСезонностьПоМесяцам()
	Возврат "СервисПрогнозирования.ПолучитьСезонностьПоМесяцам";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяМетодаПолучитьТочностьМодели()
	Возврат "СервисПрогнозирования.ПолучитьКачествоМоделей";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяМетодаПолучитьТочностьМоделиПланФактПоВсемПериодам()
	Возврат "СервисПрогнозирования.ПолучитьКачествоМоделейПоОбъектам";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяМетодаПолучитьТочностьМоделиПланФактПоПериодам()
	Возврат "СервисПрогнозирования.ПолучитьФактическиеЗначенияИПредсказанияНаТестовыхПериодах";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяМетодаПолучитьТочностьМоделиПоОбъектам()
	Возврат "СервисПрогнозирования.ПолучитьСуммуПланФактМоделейЗаВсеТестовыеПериоды";
КонецФункции

#КонецОбласти

#Область Тексты

&НаКлиентеНаСервереБезКонтекста
Функция ТекстОшибкиАвторизацияНеНайдена()
	
	Возврат НСтр("ru = 'Авторизация не найдена. Перейдите в помощник подключения к сервису.'");
	
КонецФункции

#КонецОбласти

#КонецОбласти

