
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Начать прогнозирование.
// 
// Параметры:
//  ПараметрыПроцедуры - Структура - 
//  АдресХранилища- Строка - 
Процедура НачатьПрогнозирование(ПараметрыПроцедуры, АдресХранилища) Экспорт
	
	ВидПлана = ПараметрыПроцедуры.ВидПлана;
	ТребуетсяПолнаяВыгрузка = ПараметрыПроцедуры.ТребуетсяПолнаяВыгрузка;
	ТребуетсяРасчетПрогноза = ПараметрыПроцедуры.ТребуетсяРасчетПрогноза;
	
	Если ТребуетсяПолнаяВыгрузка Тогда
		НастройкиСервиса = СервисПрогнозирования.ПолучитьНастройкиСервиса();
		Для Каждого Коллекция Из НастройкиСервиса.Коллекции Цикл
			ОписаниеКоллекции = Коллекция.Значение;
			Если Не ОписаниеКоллекции.Выгружать Тогда
				Продолжить;
			КонецЕсли;
			
			Если ОписаниеКоллекции.Выгружать Тогда
				ИнфоКоллекции = РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж.ПолучитьИнформациюКоллекции(Коллекция.Ключ);
				Если Не ОписаниеКоллекции.Категориальный Тогда
					// При выгрузке будет автоматически сброшена дата актуальности.
					// Все коллекции так же будут удалены на сервере в методе СоздатьКоллекции при такой настройке.
					ИнфоКоллекции.ИзмененыОтборы = Истина;
				КонецЕсли;
				ИнфоКоллекции.ИзмененФормат = Истина;
				РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж.ЗаписатьИнформациюКоллекции(Коллекция.Ключ, ИнфоКоллекции);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	РегистрыСведений.ЖурналСервисаПрогнозирования.ПроверитьОчиститьЖурналСервисаПрогнозирования();
	
	// 1. Выгрузка данных.
	СервисПрогнозирования.СоздатьКоллекции();
	СервисПрогнозирования.ВыгрузитьКоллекции();
	
	// Индивидуальные для видов планов настройки
	
	Если ТребуетсяРасчетПрогноза Тогда
		// 2. Проверка наличия модели и ее конфигурации, создание.
		СервисПрогнозирования.ПроверитьСоздатьМодель(ВидПлана);
		СервисПрогнозирования.ПроверитьСоздатьКонфигурациюМодели(ВидПлана);
		
		// 3. Запрос прогноза.
		СервисПрогнозирования.ЗапуститьОбучение(ВидПлана);
	КонецЕсли;
	
КонецПроцедуры

// Запустить обучение прогноза в сервисе прогнозирования продаж.
// 
// Параметры:
//  ВидПлана - СправочникСсылка.ВидыПланов - 
// 
// Возвращаемое значение:
//  Строка
Функция ОбновитьПрогнозНаСервере(ВидПлана) Экспорт
	
	Ответ = СервисПрогнозирования.ПроверитьСоздатьМодель(ВидПлана);
	Если Не ПустаяСтрока(Ответ.ТекстОшибки) Тогда
		Возврат Ответ.ТекстОшибки;
	КонецЕсли;
	
	Ответ = СервисПрогнозирования.ПроверитьСоздатьКонфигурациюМодели(ВидПлана);
	Если Не ПустаяСтрока(Ответ.ТекстОшибки) Тогда
		Возврат Ответ.ТекстОшибки;
	КонецЕсли;
	
	Ответ = СервисПрогнозирования.ЗапуститьОбучение(ВидПлана);
	Если Не ПустаяСтрока(Ответ.ТекстОшибки) Тогда
		Возврат Ответ.ТекстОшибки;
	КонецЕсли;
	
	Возврат Ответ.ТекстОшибки;
	
КонецФункции

// Загрузить прогноз из сервиса прогнозирования продаж.
// 
// Параметры:
//  ВидПлана - СправочникСсылка.ВидыПланов - 
//  ГотовКПолучениюИлиЗагруженНаМоментВызова - Булево - Обучение завершено на момент вызова метода.
//  ИмяМодели - Строка - 
// 
// Возвращаемое значение:
//  Строка
Функция ЗагрузитьДанныеИзСервиса(ВидПлана, ГотовКПолучениюИлиЗагруженНаМоментВызова = Ложь, ИмяМодели = Неопределено) Экспорт
	
	СтатусОбучения = Неопределено;
	Если Не ГотовКПолучениюИлиЗагруженНаМоментВызова Тогда
		ИнфоСтатусаОбучения = СервисПрогнозирования.ПолучитьСтатусОбучения(ВидПлана);
		ТекстОшибки = ИнфоСтатусаОбучения.ТекстОшибки;
		Если ИнфоСтатусаОбучения.Свойство("Статус") Тогда
			СтатусОбучения = ИнфоСтатусаОбучения.Статус;
		КонецЕсли;
	Иначе
		ИнфоСтатусаОбученияЗагружен = РегистрыСведений.СервисПрогнозированияИдентификаторыОбучения.ИдентификаторыОбученияВидаПлана(ВидПлана, Ложь);
		ИнфоСтатусаОбученияОбучен = РегистрыСведений.СервисПрогнозированияИдентификаторыОбучения.ИдентификаторыОбученияВидаПлана(ВидПлана, Истина);
		Если ИнфоСтатусаОбученияЗагружен = Неопределено Тогда
			Если ИнфоСтатусаОбученияОбучен = Неопределено Тогда
				Возврат ТекстНеНайденаИнформацияОбученияЗагрузкиМодели();
			КонецЕсли;
			ИнфоСтатусаОбучения = ИнфоСтатусаОбученияОбучен;
		ИначеЕсли ИнфоСтатусаОбученияОбучен = Неопределено Тогда
			ИнфоСтатусаОбучения = ИнфоСтатусаОбученияЗагружен;
		ИначеЕсли ИнфоСтатусаОбученияОбучен.ВремяИзмененияСостояния > ИнфоСтатусаОбученияЗагружен.ВремяИзмененияСостояния Тогда
			ИнфоСтатусаОбучения = ИнфоСтатусаОбученияОбучен;
		Иначе
			ИнфоСтатусаОбучения = ИнфоСтатусаОбученияЗагружен;
		КонецЕсли;
		ТекстОшибки = ИнфоСтатусаОбучения.ТекстОшибки;
		Если ИнфоСтатусаОбучения.Свойство("СтатусОбучения") Тогда
			СтатусОбучения = ИнфоСтатусаОбучения.СтатусОбучения;
		КонецЕсли;
	КонецЕсли;
	
	Если ИнфоСтатусаОбучения <> Неопределено
		И (СтатусОбучения = СервисПрогнозирования.СтатусГотовКПолучению()
			Или СтатусОбучения = СервисПрогнозирования.СтатусЗагружен())
		И ПустаяСтрока(ТекстОшибки)
		И ГотовКПолучениюИлиЗагруженНаМоментВызова Тогда
		Ответ = СервисПрогнозирования.ПолучитьПрогнозСервиса(ВидПлана, ИнфоСтатусаОбучения.ИдОбучения, ИмяМодели);
		ТекстОшибки = Ответ.ТекстОшибки;
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТекстНеНайденаИнформацияОбученияЗагрузкиМодели()
	
	ТекстОшибки = НСтр("ru='По выбранному виду плана не найдена информация по обучению и загрузке модели.'");
	Возврат ТекстОшибки;
	
КонецФункции

#КонецОбласти

#КонецЕсли

