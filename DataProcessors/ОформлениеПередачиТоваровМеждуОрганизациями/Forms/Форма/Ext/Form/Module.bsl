
#Область ОписаниеПеременных

&НаКлиенте
Перем ОрганизацияТекущейСтроки;

&НаКлиенте
Перем ДокументыДляОбменаКешСтатусов;

&НаКлиенте
Перем ИмяТекущегоОбмена;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если ЗначениеЗаполнено(Параметры.Основание) Тогда
		Объект.ДокументОснование = Параметры.Основание;
		Объект.Склад = Параметры.Основание;
	КонецЕсли;
	
	ДействияТребующиеОжиданияЕГАИС = Новый СписокЗначений;
	Для Каждого Статус Из Документы.ТТНИсходящаяЕГАИС.ВсеТребующиеОжидания() Цикл
		ДействияТребующиеОжиданияЕГАИС.Добавить(Статус);
	КонецЦикла;
	Для Каждого Статус Из Документы.ТТНВходящаяЕГАИС.ВсеТребующиеОжидания() Цикл
		ДействияТребующиеОжиданияЕГАИС.Добавить(Статус);
	КонецЦикла;
	
	СтатусыОшибок = Новый СписокЗначений();
	Для Каждого Статус Из Документы.ТТНИсходящаяЕГАИС.СтатусыОшибок() Цикл
		СтатусыОшибок.Добавить(Статус);
	КонецЦикла;
	Для Каждого Статус Из Документы.ТТНВходящаяЕГАИС.СтатусыОшибок() Цикл
		СтатусыОшибок.Добавить(Статус);
	КонецЦикла;
	Для Каждого Статус Из Документы.ИсходящаяТранспортнаяОперацияВЕТИС.СтатусыОшибок() Цикл
		СтатусыОшибок.Добавить(Статус);
	КонецЦикла;
	Для Каждого Статус Из Документы.ВходящаяТранспортнаяОперацияВЕТИС.СтатусыОшибок() Цикл
		СтатусыОшибок.Добавить(Статус);
	КонецЦикла;
	Для Каждого Статус Из Документы.НакладнаяСАТУРН.СтатусыОшибок() Цикл
		СтатусыОшибок.Добавить(Статус);
	КонецЦикла;
	Для Каждого Статус Из Документы.ОформлениеСДИЗЗЕРНО.СтатусыОшибок() Цикл
		СтатусыОшибок.Добавить(Статус);
	КонецЦикла;
	Для Каждого Статус Из Документы.ПогашениеСДИЗЗЕРНО.СтатусыОшибок() Цикл
		СтатусыОшибок.Добавить(Статус);
	КонецЦикла;
	Для Каждого Статус Из Документы.ОтгрузкаТоваровИСМП.СтатусыОшибок() Цикл
		СтатусыОшибок.Добавить(Статус);
	КонецЦикла;
	Для Каждого Статус Из Документы.ПриемкаТоваровИСМП.СтатусыОшибок() Цикл
		СтатусыОшибок.Добавить(Статус);
	КонецЦикла;
	
	ТоварыКПередаче = Истина;
	ЗаполнитьПоОснованию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование)
		И Элементы.ГруппаПередачаТоваровНеТребуется.Видимость Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ТТНИсходящаяЕГАИС"
		Или ИмяСобытия = "Запись_ТТНВходящаяЕГАИС" Тогда
		РассчитатьСтатусИнтеркампаниНаСервере();
	КонецЕсли;
	
	//@skip-check dynamic-feature-access-translation-ambiguity
	Если ИмяСобытия = "ИзменениеСостоянияЕГАИС"
		И (ТипЗнч(Параметр.Ссылка) = Тип("ДокументСсылка.ТТНИсходящаяЕГАИС")
			Или ТипЗнч(Параметр.Ссылка) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС")) Тогда
		РассчитатьСтатусИнтеркампаниНаСервере();
	КонецЕсли;
	
	Если ИмяСобытия = "ВыполненОбменЕГАИС"
		И (Параметр = Неопределено
		Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусВФормахДокументов)) Тогда
		
		ПриЗавершенииОбмена(Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	ЗаполнитьПоСкладу();
КонецПроцедуры

&НаКлиенте
Процедура ПоДокументуПриИзменении(Элемент)
	
	Если ПоДокументу Тогда
		ЗаполнитьПоОснованию();
	Иначе
		ЗаполнитьПоСкладу();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКПередачеПриИзменении(Элемент)
	
	Если ТоварыКПередаче Тогда
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("ПередачаТребуется", Истина);
	Иначе
		Элементы.Товары.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("ОтобразитьСтатусСтрокиТовары", 0.6, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОрганизацияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ОрганизацияТекущейСтроки <> ТекущиеДанные.Организация Тогда
		ТекущиеДанные.Справка2 = ПредопределенноеЗначение("Справочник.Справки2ЕГАИС.ПустаяСсылка");
		ТекущиеДанные.ЗаписьСкладскогоЖурнала = ПредопределенноеЗначение("Справочник.ЗаписиСкладскогоЖурналаВЕТИС.ПустаяСсылка");
		ТекущиеДанные.ПартияЗЕРНО = ПредопределенноеЗначение("Справочник.РеестрПартийЗЕРНО.ПустаяСсылка");
		ТекущиеДанные.ПартияСАТУРН = ПредопределенноеЗначение("Справочник.ПартииСАТУРН.ПустаяСсылка");
		Если ЗначениеЗаполнено(ТекущиеДанные.Организация) Тогда
			ИдентификаторыСтрок = Новый Массив;
			ИдентификаторыСтрок.Добавить(Элементы.Товары.ТекущаяСтрока);
			ЗаполнитьПартииНаСервере(ИдентификаторыСтрок);
		Иначе
			ТекущиеДанные.ПередачаТребуется = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОрганизацияТекущейСтроки = Элементы.Товары.ТекущиеДанные.Организация;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСправка2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ОрганизацияЕГАИС = ПредопределенноеЗначение("Справочник.КлассификаторОрганизацийЕГАИС.ПустаяСсылка");
	Для Каждого СтрокаНастройки Из Объект.НастройкиЕГАИС Цикл
		Если СтрокаНастройки.Организация = ТекущиеДанные.Организация Тогда
			ОрганизацияЕГАИС = СтрокаНастройки.ОрганизацияЕГАИС;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Номенклатура",         ТекущиеДанные.Номенклатура);
	ПараметрыФормы.Вставить("Характеристика",       ТекущиеДанные.Характеристика);
	ПараметрыФормы.Вставить("Серия",                ТекущиеДанные.Серия);
	ПараметрыФормы.Вставить("АлкогольнаяПродукция", ПредопределенноеЗначение("Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка"));
	ПараметрыФормы.Вставить("ОрганизацияЕГАИС",     ОрганизацияЕГАИС);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	ОткрытьФорму("РегистрНакопления.ОстаткиАлкогольнойПродукцииЕГАИС.Форма.ФормаОстатков",
		ПараметрыФормы, Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСправка2ОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, ВыборДобавлением, СтандартнаяОбработка)
	
	ОчиститьСообщения();
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИнтеграцияЕГАИСКлиентСервер.ЭтоВыборСправки2ЕГАИС(ВыбранноеЗначение) Тогда
		
		// Запись не изменилась. Действий не требуется.
		Если ВыбранноеЗначение.Справка2 = ТекущиеДанные.Справка2 Тогда
			Возврат;
		КонецЕсли;
		
		КоэффициентПересчета = КоэффициентПересчетаЕГАИС(ТекущиеДанные.Номенклатура, ВыбранноеЗначение.АлкогольнаяПродукция);
		Количество = ВыбранноеЗначение.КоличествоЕГАИС;
		
		Для Каждого СтрокаТЧ Из Объект.Товары Цикл
			Если СтрокаТЧ.ПолучитьИдентификатор() <> ТекущиеДанные.ПолучитьИдентификатор()
				И СтрокаТЧ.Справка2 = ВыбранноеЗначение.Справка2 Тогда
				Количество = Количество - СтрокаТЧ.КоличествоЕГАИС;
			КонецЕсли;
		КонецЦикла;
		Если Количество <= 0 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Выбранная справка №2 уже полностью использована в распределении'"));
			Возврат;
		КонецЕсли;
		ВыбранноеЗначение.Вставить("Количество", Количество * КоэффициентПересчета);
		ВыбранноеЗначение.Вставить("КоличествоЕГАИС", Количество);
		Колонки = "КоличествоЕГАИС, Справка2";
		Если ТекущиеДанные.Количество > ВыбранноеЗначение.Количество Тогда
			РазбитьСтрокуПриВыбореПартии(ТекущиеДанные, ВыбранноеЗначение, Колонки);
		Иначе
			ТекущиеДанные.Справка2 = ВыбранноеЗначение.Справка2;
			ТекущиеДанные.КоличествоЕГАИС = ТекущиеДанные.Количество / КоэффициентПересчета;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЗаписьСкладскогоЖурналаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ХозяйствующийСубъект = ПредопределенноеЗначение("Справочник.ХозяйствующиеСубъектыВЕТИС.ПустаяСсылка");
	Предприятие = ПредопределенноеЗначение("Справочник.ПредприятияВЕТИС.ПустаяСсылка");
	Для Каждого СтрокаНастройки Из Объект.НастройкиВЕТИС Цикл
		Если СтрокаНастройки.Организация = ТекущиеДанные.Организация Тогда
			ХозяйствующийСубъект = СтрокаНастройки.ХозяйствующийСубъект;
			Предприятие = СтрокаНастройки.Предприятие;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеВЕТИС = Новый Структура;
	ДанныеВЕТИС.Вставить("Номенклатура",   ТекущиеДанные.Номенклатура);
	ДанныеВЕТИС.Вставить("Характеристика", ТекущиеДанные.Характеристика);
	ДанныеВЕТИС.Вставить("Серия",          ТекущиеДанные.Серия);
	ДанныеВЕТИС.Вставить("Продукция",      ПредопределенноеЗначение("Справочник.ПродукцияВЕТИС.ПустаяСсылка"));
	
	ПараметрыФормы = ИнтеграцияВЕТИСКлиент.ПараметрыФормыПодбораВыбораЗаписейЖурнала(
		ХозяйствующийСубъект, Предприятие, ДанныеВЕТИС);
	ПараметрыФормы.Вставить("ИсключитьПросроченные", Истина);
	
	ОткрытьФорму("РегистрСведений.ОстаткиПродукцииВЕТИС.ФормаСписка",
		ПараметрыФормы, Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЗаписьСкладскогоЖурналаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОчиститьСообщения();
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИнтеграцияВЕТИСКлиент.ЭтоВыборЗаписиЖурнала(ВыбранноеЗначение) Тогда
		
		// Запись не изменилась. Действий не требуется.
		Если ВыбранноеЗначение.ЗаписьСкладскогоЖурнала = ТекущиеДанные.ЗаписьСкладскогоЖурнала Тогда
			Возврат;
		КонецЕсли;
		
		КоэффициентПересчета = КоэффициентПересчетаВЕТИС(ТекущиеДанные.Номенклатура, ВыбранноеЗначение.ЕдиницаИзмеренияВЕТИС);
		Количество = ВыбранноеЗначение.КоличествоВЕТИС;
		
		Для Каждого СтрокаТЧ Из Объект.Товары Цикл
			Если СтрокаТЧ.ПолучитьИдентификатор() <> ТекущиеДанные.ПолучитьИдентификатор()
				И СтрокаТЧ.ЗаписьСкладскогоЖурнала = ВыбранноеЗначение.ЗаписьСкладскогоЖурнала Тогда
				Количество = Количество - СтрокаТЧ.КоличествоВЕТИС;
			КонецЕсли;
		КонецЦикла;
		Если Количество <= 0 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Выбранная запись журнала уже полностью использована в распределении'"));
			Возврат;
		КонецЕсли;
		ВыбранноеЗначение.Вставить("Количество", Количество * КоэффициентПересчета);
		ВыбранноеЗначение.Вставить("КоличествоВЕТИС", Количество);
		Колонки = "КоличествоВЕТИС, ЗаписьСкладскогоЖурнала";
		Если ТекущиеДанные.Количество > ВыбранноеЗначение.Количество Тогда
			РазбитьСтрокуПриВыбореПартии(ТекущиеДанные, ВыбранноеЗначение, Колонки);
		Иначе
			ТекущиеДанные.ЗаписьСкладскогоЖурнала = ВыбранноеЗначение.ЗаписьСкладскогоЖурнала;
			ТекущиеДанные.КоличествоВЕТИС = Количество / КоэффициентПересчета;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПартияЗЕРНОНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыФормы = ИнтеграцияЗЕРНОКлиент.ПараметрыФормыПодбораПартий();
	ПараметрыФормы.ЗакрыватьПриВыборе = Истина;
	
	ПараметрыФормы.ОрганизацияВладелецПартии = ТекущиеДанные.Организация;
	
	ПараметрыФормы.Номенклатура = ТекущиеДанные.Номенклатура;
	ПараметрыФормы.Характеристика = ТекущиеДанные.Характеристика;
	ПараметрыФормы.Серия = ТекущиеДанные.Серия;
	
	ОткрытьФорму("РегистрНакопления.ОстаткиПартийЗЕРНО.Форма.ФормаОстатков",
		ПараметрыФормы, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПартияЗЕРНООбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОчиститьСообщения();
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИнтеграцияЗЕРНОКлиентСервер.ЭтоВыборПартииЗЕРНО(ВыбранноеЗначение) Тогда
	
		// Запись не изменилась. Действий не требуется.
		Если ВыбранноеЗначение.Партия = ТекущиеДанные.ПартияЗЕРНО Тогда
			Возврат;
		КонецЕсли;
		ВыбранноеЗначение.Вставить("ПартияЗЕРНО", ВыбранноеЗначение.Партия);
		
		КоэффициентПересчета = КоэффициентПересчетаЗЕРНО(ТекущиеДанные.Номенклатура);
		Количество = ВыбранноеЗначение.КоличествоЗЕРНО;
		
		Для Каждого СтрокаТЧ Из Объект.Товары Цикл
			Если СтрокаТЧ.ПолучитьИдентификатор() <> ТекущиеДанные.ПолучитьИдентификатор()
				И СтрокаТЧ.ПартияЗЕРНО = ВыбранноеЗначение.ПартияЗЕРНО Тогда
				Количество = Количество - СтрокаТЧ.КоличествоЗЕРНО;
			КонецЕсли;
		КонецЦикла;
		Если Количество <= 0 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Выбранная партия ЗЕРНО уже полностью использована в распределении'"));
			Возврат;
		КонецЕсли;
		ВыбранноеЗначение.Вставить("Количество", Количество * КоэффициентПересчета);
		ВыбранноеЗначение.Вставить("КоличествоЗЕРНО", Количество);
		Колонки = "КоличествоЗЕРНО, ПартияЗЕРНО";
		Если ТекущиеДанные.Количество > ВыбранноеЗначение.Количество Тогда
			РазбитьСтрокуПриВыбореПартии(ТекущиеДанные, ВыбранноеЗначение, Колонки);
		Иначе
			ТекущиеДанные.ПартияЗЕРНО = ВыбранноеЗначение.ПартияЗЕРНО;
			ТекущиеДанные.КоличествоЗЕРНО = Количество / КоэффициентПересчета;
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПартияСАТУРННачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ПараметрыФормы = ИнтеграцияСАТУРНКлиент.ПараметрыФормыПодбораПартий();
	ПараметрыФормы.ЗакрыватьПриВыборе = Истина;
	
	Для Каждого СтрокаТЧ Из Объект.НастройкиСАТУРН Цикл
		Если СтрокаТЧ.Организация = ТекущиеДанные.Организация Тогда
			ПараметрыФормы.ОрганизацияСАТУРН = СтрокаТЧ.ОрганизацияСАТУРН;
			ПараметрыФормы.МестоХранения = СтрокаТЧ.МестоХранения;
		КонецЕсли;
	КонецЦикла;
	ПараметрыФормы.Номенклатура   = ТекущиеДанные.Номенклатура;
	ПараметрыФормы.Характеристика = ТекущиеДанные.Характеристика;
	ПараметрыФормы.Серия          = ТекущиеДанные.Серия;
	
	ОткрытьФорму("РегистрНакопления.ОстаткиПартийСАТУРН.Форма.ФормаОстатков",
		ПараметрыФормы, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПартияСАТУРНОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОчиститьСообщения();
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИнтеграцияСАТУРНКлиентСервер.ЭтоВыборПартииСАТУРН(ВыбранноеЗначение) Тогда
		
		// Запись не изменилась. Действий не требуется.
		Если ВыбранноеЗначение.ПартияСАТУРН = ТекущиеДанные.ПартияСАТУРН Тогда
			Возврат;
		КонецЕсли;
		ВыбранноеЗначение.Вставить("ПартияСАТУРН", ВыбранноеЗначение.Партия);
		
		КоэффициентПересчета = КоэффициентПересчетаСАТУРН(ТекущиеДанные.Номенклатура, ВыбранноеЗначение.ТипИзмеряемойВеличины);
		Количество = ВыбранноеЗначение.КоличествоСАТУРН;
		
		Для Каждого СтрокаТЧ Из Объект.Товары Цикл
			Если СтрокаТЧ.ПолучитьИдентификатор() <> ТекущиеДанные.ПолучитьИдентификатор()
				И СтрокаТЧ.ПартияСАТУРН = ВыбранноеЗначение.ПартияСАТУРН Тогда
				Количество = Количество - СтрокаТЧ.КоличествоСАТУРН;
			КонецЕсли;
		КонецЦикла;
		Если Количество <= 0 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Выбранная партия САТУРН уже полностью использована в распределении'"));
			Возврат;
		КонецЕсли;
		ВыбранноеЗначение.Вставить("Количество", Количество * КоэффициентПересчета);
		ВыбранноеЗначение.Вставить("КоличествоСАТУРН", Количество);
		Колонки = "КоличествоСАТУРН, ПартияСАТУРН";
		Если ТекущиеДанные.Количество > ВыбранноеЗначение.Количество Тогда
			РазбитьСтрокуПриВыбореПартии(ТекущиеДанные, ВыбранноеЗначение, Колонки);
		Иначе
			ТекущиеДанные.ПартияСАТУРН = ВыбранноеЗначение.ПартияСАТУРН;
			ТекущиеДанные.КоличествоСАТУРН = Количество / КоэффициентПересчета;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыПередачи

&НаКлиенте
Процедура ДокументыПередачиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ДокументыПередачи.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		ПоказатьЗначение(,ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьДокументыОснования(Команда)
	ЗаполнитьПоСкладу();
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСтатусИнтеркампани(Команда)
	
	РассчитатьСтатусИнтеркампаниНаСервере();
	Если ЗначениеЗаполнено(Объект.ДокументОснование)
		И Элементы.ГруппаПередачаТоваровНеТребуется.Видимость Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеПослеРазбиения = Новый ОписаниеОповещения("РазбитьСтрокуЗавершение", ЭтотОбъект, ТекущиеДанные);
	
	ПараметрыРазбиения = РаботаСТабличнымиЧастямиКлиент.ПараметрыРазбиенияСтроки();
	ПараметрыРазбиения.ИмяПоляКоличество = "Количество";
	ПараметрыРазбиения.МаксимальноДопустимоеЗначение = ТекущиеДанные.Количество;
	ПараметрыРазбиения.РазрешитьНулевоеКоличество = Ложь;
	
	РаботаСТабличнымиЧастямиКлиент.РазбитьСтроку(Объект.Товары, Элементы.Товары, ОповещениеПослеРазбиения, ПараметрыРазбиения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПартии(Команда)
	
	ИдентификаторыСтрок = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из Элементы.Товары.ВыделенныеСтроки Цикл
		ИдентификаторыСтрок.Добавить(ВыделеннаяСтрока);
	КонецЦикла;
	ЗаполнитьПартииНаСервере(ИдентификаторыСтрок);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументыПередачи(Команда)
	
	СоздатьДокументыПередачиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДокумент(Команда)
	
	ОбработатьДокументыНаКлиенте(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбработатьДокументыНаКлиенте(ВыполнятьОбменПоЭДО = Ложь, РазрешеноВыполнятьОбменЕГАИС = Истина, РазрешеноВыполнятьОбменМехИСМП = Истина)
	
	ОформитеВЕТИС = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюВЕТИС.Оформите");
	ПередайтеДанныеВЕТИС = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПередайтеДанные");
	
	ПередайтеДанныеСАТУРН = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеДанные");
	ПодтвердитеНакладнуюСАТУРН = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеНакладную");
	
	ПередайтеДанныеЕГАИС = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные");
	ПодтвердитеПолучениеЕГАИС = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеПолучение");
	
	ПередайтеДанныеМехИСМП = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные");
	ПодтвердитеПоступлениеМехИСМП = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.ПодтвердитеПоступление");
	ОжидаетсяПодтверждениеПоступленияМехИСМП = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОтгрузкиТоваровИСМП.ОжидаетсяПодтверждениеПоступления");
	
	ПередайтеДанныеЗЕРНО = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные");
	СформируйтеПартииЗЕРНО = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.СформируйтеПартии");
	
	ИмяПоляСсылка = "Ссылка";
	ИмяТекущегоОбмена = Неопределено;
	
	ПравоИзменения = Истина;
	ИменаКолонокДальнейшиеДействия = Новый Массив;
	ИменаКолонокДальнейшиеДействия.Добавить("ДальнейшееДействие1");
	ИменаКолонокДальнейшиеДействия.Добавить("ДальнейшееДействие2");
	ИменаКолонокДальнейшиеДействия.Добавить("ДальнейшееДействие3");
	
	ДокументыДляОбменаКешСтатусов = Новый Соответствие;
	
	ДокументыОформитеВЕТИС = Новый Массив;
	ДокументыПередайтеДанныеВЕТИС = Новый Массив;
	
	ДокументыПередайтеДанныеСАТУРН = Новый Массив;
	ДокументыПодтвердитеНакладнуюСАТУРН = Новый Массив;
	
	ДокументыПередайтеДанныеЕГАИС = Новый Массив;
	ДокументыПодтвердитеПолучениеЕГАИС = Новый Массив;
	
	ДокументыПередайтеДанныеМехИСМП = Новый Массив;
	ДокументыПодтвердитеПоступлениеМехИСМП = Новый Массив;
	
	ДокументыПередайтеДанныеЗЕРНО = Новый Массив;
	ДокументыСформируйтеПартииЗЕРНО = Новый Массив;
	
	ДокументыПередачаТоваровМеждуОрганизациями = Новый Массив;
	
	ВыполнитьОбменЕГАИС = Ложь;
	ВыполнитьОбменИСМП = Ложь;
	ДокументыОтгрузкаТоваровИСМП = Новый Массив;
	
	Для Каждого СтрокаТЧ Из Объект.ДокументыПередачи Цикл
		
		Если ВыполнятьОбменПоЭДО
			И ТипЗнч(СтрокаТЧ[ИмяПоляСсылка]) = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями")
			И ЗначениеЗаполнено(СтрокаТЧ.Состояние)
			И СтрокаТЧ.Состояние <> НСтр("ru = 'Действия не требуются'")
			И СтрокаТЧ.Проведен Тогда
			ДокументыПередачаТоваровМеждуОрганизациями.Добавить(СтрокаТЧ[ИмяПоляСсылка]);
		КонецЕсли;
		
		Если СтатусыОшибок.НайтиПоЗначению(СтрокаТЧ.Статус) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТЧ.ДальнейшееДействие1 = ОформитеВЕТИС Тогда
			ДокументыОформитеВЕТИС.Добавить(СтрокаТЧ.ПолучитьИдентификатор());
		ИначеЕсли СтрокаТЧ.ДальнейшееДействие1 = ПередайтеДанныеВЕТИС Тогда
			ДокументыПередайтеДанныеВЕТИС.Добавить(СтрокаТЧ.ПолучитьИдентификатор());
		КонецЕсли;
		
		Если СтрокаТЧ.ДальнейшееДействие1 = ПередайтеДанныеСАТУРН Тогда
			ДокументыПередайтеДанныеСАТУРН.Добавить(СтрокаТЧ.ПолучитьИдентификатор());
		ИначеЕсли СтрокаТЧ.ДальнейшееДействие1 = ПодтвердитеНакладнуюСАТУРН Тогда
			ДокументыПодтвердитеНакладнуюСАТУРН.Добавить(СтрокаТЧ.ПолучитьИдентификатор());
		КонецЕсли;
		
		Если СтрокаТЧ.ДальнейшееДействие1 = ПередайтеДанныеЕГАИС Тогда
			ДокументыПередайтеДанныеЕГАИС.Добавить(СтрокаТЧ.ПолучитьИдентификатор());
		ИначеЕсли СтрокаТЧ.ДальнейшееДействие1 = ПодтвердитеПолучениеЕГАИС Тогда
			ДокументыПодтвердитеПолучениеЕГАИС.Добавить(СтрокаТЧ.ПолучитьИдентификатор());
		ИначеЕсли РазрешеноВыполнятьОбменЕГАИС
			И ДействияТребующиеОжиданияЕГАИС.НайтиПоЗначению(СтрокаТЧ.ДальнейшееДействие1) <> Неопределено Тогда
			ВыполнитьОбменЕГАИС = Истина;
		КонецЕсли;
		
		Если СтрокаТЧ.ДальнейшееДействие1 = ПередайтеДанныеМехИСМП Тогда
			ДокументыПередайтеДанныеМехИСМП.Добавить(СтрокаТЧ.ПолучитьИдентификатор());
		ИначеЕсли СтрокаТЧ.ДальнейшееДействие1 = ПодтвердитеПоступлениеМехИСМП Тогда
			ДокументыПодтвердитеПоступлениеМехИСМП.Добавить(СтрокаТЧ.ПолучитьИдентификатор());
		ИначеЕсли РазрешеноВыполнятьОбменМехИСМП
			И СтрокаТЧ.Статус = ОжидаетсяПодтверждениеПоступленияМехИСМП Тогда
			ВыполнитьОбменИСМП = Истина;
			ДокументыОтгрузкаТоваровИСМП.Добавить(СтрокаТЧ.Ссылка);
		КонецЕсли;
		
		Если СтрокаТЧ.ДальнейшееДействие1 = ПередайтеДанныеЗЕРНО Тогда
			ДокументыПередайтеДанныеЗЕРНО.Добавить(СтрокаТЧ.ПолучитьИдентификатор());
		ИначеЕсли СтрокаТЧ.ДальнейшееДействие1 = СформируйтеПартииЗЕРНО Тогда
			ДокументыСформируйтеПартииЗЕРНО.Добавить(СтрокаТЧ.ПолучитьИдентификатор());
		КонецЕсли;
		
		СостояниеДокумента = Новый Структура;
		СостояниеДокумента.Вставить("Статус", СтрокаТЧ.Статус);
		СостояниеДокумента.Вставить("ДальнейшееДействие1", СтрокаТЧ.ДальнейшееДействие1);
		СостояниеДокумента.Вставить("ДальнейшееДействие2", СтрокаТЧ.ДальнейшееДействие2);
		СостояниеДокумента.Вставить("ДальнейшееДействие3", СтрокаТЧ.ДальнейшееДействие3);
		
		ДокументыДляОбменаКешСтатусов.Вставить(
			СтрокаТЧ[ИмяПоляСсылка], СостояниеДокумента);
		
	КонецЦикла;
	
	ДокументыДляОбменаВетИС = Новый Массив;
	ДальнейшееДействиеВетИС = Неопределено;
	
	ДокументыДляОбменаСАТУРН = Новый Массив;
	ДальнейшееДействиеСАТУРН = Неопределено;
	
	ДокументыДляОбменаЕГАИС = Новый Массив;
	ДальнейшееДействиеЕГАИС = Неопределено;
	
	ДокументыДляОбменаМехИСМП = Новый Массив;
	ДальнейшееДействиеМехИСМП = Неопределено;
	
	ДокументыДляОбменаЗЕРНО = Новый Массив;
	ДальнейшееДействиеЗЕРНО = Неопределено;
	
	Если ДокументыОформитеВЕТИС.Количество() Тогда
		ДокументыДляОбменаВетИС = ДокументыОформитеВЕТИС;
		ДальнейшееДействиеВетИС = ОформитеВЕТИС;
	ИначеЕсли ДокументыПередайтеДанныеВЕТИС.Количество() Тогда
		ДокументыДляОбменаВетИС = ДокументыПередайтеДанныеВЕТИС;
		ДальнейшееДействиеВетИС = ПередайтеДанныеВЕТИС;
	
	ИначеЕсли ДокументыПередайтеДанныеСАТУРН.Количество() Тогда
		ДокументыДляОбменаСАТУРН = ДокументыПередайтеДанныеСАТУРН;
		ДальнейшееДействиеСАТУРН = ПередайтеДанныеСАТУРН;
	ИначеЕсли ДокументыПодтвердитеНакладнуюСАТУРН.Количество() Тогда
		ДокументыДляОбменаСАТУРН = ДокументыПодтвердитеНакладнуюСАТУРН;
		ДальнейшееДействиеСАТУРН = ПодтвердитеНакладнуюСАТУРН;
	
	ИначеЕсли ДокументыПередайтеДанныеЕГАИС.Количество() Тогда
		ДокументыДляОбменаЕГАИС = ДокументыПередайтеДанныеЕГАИС;
		ДальнейшееДействиеЕГАИС = ПередайтеДанныеЕГАИС;
	ИначеЕсли ДокументыПодтвердитеПолучениеЕГАИС.Количество() Тогда
		ДокументыДляОбменаЕГАИС = ДокументыПодтвердитеПолучениеЕГАИС;
		ДальнейшееДействиеЕГАИС = ПодтвердитеПолучениеЕГАИС;
	
	ИначеЕсли ДокументыПередайтеДанныеМехИСМП.Количество() Тогда
		ДокументыДляОбменаМехИСМП = ДокументыПередайтеДанныеМехИСМП;
		ДальнейшееДействиеМехИСМП = ПередайтеДанныеМехИСМП;
	ИначеЕсли ДокументыПодтвердитеПоступлениеМехИСМП.Количество() Тогда
		ДокументыДляОбменаМехИСМП = ДокументыПодтвердитеПоступлениеМехИСМП;
		ДальнейшееДействиеМехИСМП = ПодтвердитеПоступлениеМехИСМП;
	
	ИначеЕсли ДокументыСформируйтеПартииЗЕРНО.Количество() Тогда
		ДокументыДляОбменаЗЕРНО = ДокументыСформируйтеПартииЗЕРНО;
		ДальнейшееДействиеЗЕРНО = СформируйтеПартииЗЕРНО;
	ИначеЕсли ДокументыПередайтеДанныеЗЕРНО.Количество() Тогда
		ДокументыДляОбменаЗЕРНО = ДокументыПередайтеДанныеЗЕРНО;
		ДальнейшееДействиеЗЕРНО = ПередайтеДанныеЗЕРНО;
	
	КонецЕсли;
	
	Если ДокументыПередачаТоваровМеждуОрганизациями.Количество() Тогда
		
		ИмяТекущегоОбмена = "ЭДО";
		
		НаборДействий = Новый Соответствие;
		ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
			"Перечисление.ДействияПоЭДО.Загрузить"));
		ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
			"Перечисление.ДействияПоЭДО.Утвердить"));
		ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
			"Перечисление.ДействияПоЭДО.СформироватьОтвет"));
		ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
			"Перечисление.ДействияПоЭДО.Подписать"));
		ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
			"Перечисление.ДействияПоЭДО.ПодготовитьКОтправке"));
		ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
			"Перечисление.ДействияПоЭДО.Отправить"));
		
		ПараметрыВыполненияДействийПоЭДО = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
		ПараметрыВыполненияДействийПоЭДО.НаборДействий = НаборДействий;
		ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ОбъектыУчета = ДокументыПередачаТоваровМеждуОрганизациями;
		
		ОповещениеУспешногоЗавершения = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект, Неопределено);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОбъектыУчета", ДокументыПередачаТоваровМеждуОрганизациями);
		ДополнительныеПараметры.Вставить("ОповещениеУспешногоЗавершения", ОповещениеУспешногоЗавершения);
		
		ОповещениеПослеВыполненияДействийПоЭДО = Новый ОписаниеОповещения(
			"ПослеВыполненияДействийПоЭДО",
			ИнтерфейсДокументовЭДОКлиент,
			ДополнительныеПараметры);
		
		ИнтерфейсДокументовЭДОКлиент.НачатьВыполнениеДействийПоЭДО(
			ОповещениеПослеВыполненияДействийПоЭДО,
			ПараметрыВыполненияДействийПоЭДО);
		
	Иначе
		
		ОповещениеПриЗавершенииОбменаИС = Новый ОписаниеОповещения("ПриЗавершенииОбмена", ЭтотОбъект);
		
		ПараметрыПередачи = ИнтеграцияИСКлиентСервер.ИнициализироватьПараметрыПередачиДанных();
		ПараметрыПередачи.ИменаКолонокДальнейшиеДействия = ИменаКолонокДальнейшиеДействия;
		ПараметрыПередачи.ИмяПоляСсылка = ИмяПоляСсылка;
		ПараметрыПередачи.ОчищатьСообщения = Ложь;
		ПараметрыПередачи.ОповещениеПриЗавершении = ОповещениеПриЗавершенииОбменаИС;
		
		Если ДокументыДляОбменаВетИС.Количество() Тогда
		
			ИмяТекущегоОбмена = "ВЕТИС";
			
			ПараметрыПередачи.ДальнейшееДействие = ДальнейшееДействиеВетИС;
			ПараметрыПередачи.ВыделенныеСтроки = ДокументыДляОбменаВетИС;
			
			ИнтеграцияВЕТИСКлиент.ПодготовитьСообщенияКПередаче(
				Элементы.ДокументыПередачи,
				ПараметрыПередачи,
				ПравоИзменения);
			
		ИначеЕсли ДокументыДляОбменаСАТУРН.Количество() Тогда
			
			ИмяТекущегоОбмена = "САТУРН";
			
			ПараметрыПередачи.ДальнейшееДействие = ДальнейшееДействиеСАТУРН;
			ПараметрыПередачи.ВыделенныеСтроки = ДокументыДляОбменаСАТУРН;
			
			ИнтеграцияСАТУРНКлиент.ПодготовитьСообщенияКПередаче(
				Элементы.ДокументыПередачи,
				ПараметрыПередачи,
				"Грузоотправитель");
			
		ИначеЕсли ВыполнитьОбменЕГАИС Тогда
			
			ОбменДаннымиЕГАИСКлиент.ВыполнитьОбмен(
				Неопределено,
				Новый ОписаниеОповещения("ПослеВыполненияОбменаЕГАИС", ЭтотОбъект));
			
		ИначеЕсли ДокументыДляОбменаЕГАИС.Количество() Тогда
			
			ИмяТекущегоОбмена = "ЕГАИС";
			
			ПараметрыПередачи.ДальнейшееДействие = ДальнейшееДействиеЕГАИС;
			ПараметрыПередачи.ВыделенныеСтроки = ДокументыДляОбменаЕГАИС;
			
			ИнтеграцияЕГАИСКлиент.ПодготовитьСообщенияКПередаче(
				Элементы.ДокументыПередачи,
				ПараметрыПередачи);
			
		ИначеЕсли ВыполнитьОбменИСМП Тогда
			
			ИмяТекущегоОбмена = "МехИСМП";
			
			РеквизитыДокумента = Новый Массив;
			РеквизитыДокумента.Добавить("Контрагент");
			РеквизитыДокумента.Добавить("Дата");
			ЗначенияРеквизитов = ИнтеграцияИСВызовСервера.ЗначенияРеквизитовОбъектов(
				ДокументыОтгрузкаТоваровИСМП, РеквизитыДокумента);
			
			НачалоПериода = НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса());
			ОрганизацииДляОбмена = Новый Массив;
			Для Каждого КлючИЗначение Из ЗначенияРеквизитов Цикл
				Если КлючИЗначение.Значение <> Неопределено Тогда
					Если КлючИЗначение.Значение.Дата < НачалоПериода Тогда
						НачалоПериода = КлючИЗначение.Значение.Дата;
					КонецЕсли;
					Если ОрганизацииДляОбмена.Найти(КлючИЗначение.Значение.Контрагент) = Неопределено Тогда
						ОрганизацииДляОбмена.Добавить(КлючИЗначение.Значение.Контрагент);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Организация",   ОрганизацииДляОбмена);
			ПараметрыОтбора.Вставить("НачалоПериода", НачалоПериода);
			ПараметрыОтбора.Вставить("КонецПериода",  Неопределено);
			
			ПослеВыполненияОбменаМехИСМП = Новый ОписаниеОповещения("ПослеВыполненияОбменаМехИСМП", ЭтотОбъект);
			
			ИнтеграцияИСМПКлиент.ЗагрузитьВходящиеДокументы(
				ЭтотОбъект,
				ПараметрыОтбора,
				ПослеВыполненияОбменаМехИСМП);
			
		ИначеЕсли ДокументыДляОбменаМехИСМП.Количество() Тогда
			
			ИмяТекущегоОбмена = "МехИСМП";
			
			ПараметрыПередачи.ДальнейшееДействие = ДальнейшееДействиеМехИСМП;
			ПараметрыПередачи.ВыделенныеСтроки = ДокументыДляОбменаМехИСМП;
			
			ИнтеграцияИСМПКлиент.ПодготовитьСообщенияКПередаче(
				Элементы.ДокументыПередачи,
				ПараметрыПередачи);
			
		ИначеЕсли ДокументыДляОбменаЗЕРНО.Количество() Тогда
			
			ИмяТекущегоОбмена = "ЗЕРНО";
			
			ПараметрыПередачи.ДальнейшееДействие = ДальнейшееДействиеЗЕРНО;
			ПараметрыПередачи.ВыделенныеСтроки = ДокументыДляОбменаЗЕРНО;
			
			ИнтеграцияЗЕРНОКлиент.ПодготовитьСообщенияКПередаче(
				Элементы.ДокументыПередачи, 
				ПараметрыПередачи);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) И Объект.ДокументыПередачи.Количество() = 0 Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыполненияДействийПоЭДО(Результат, ПараметрыОповещения) Экспорт
	
	РассчитатьСтатусИнтеркампаниНаСервере();
	
	ОбработатьДокументыНаКлиенте(Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыполненияОбменаЕГАИС(Результат, ДополнительныеПараметры) Экспорт
	
	РассчитатьСтатусИнтеркампаниНаСервере();
	
	ОбработатьДокументыНаКлиенте(Ложь, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыполненияОбменаМехИСМП(Результат, ДополнительныеПараметры) Экспорт
	
	РассчитатьСтатусИнтеркампаниНаСервере();
	
	ОбработатьДокументыНаКлиенте(Ложь, Ложь, Ложь);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьОбменОбработкаОжидания()
	
	ОповещениеПриЗавершенииОбмена = Новый ОписаниеОповещения("ПриЗавершенииОбмена", ЭтотОбъект);
	
	Если ИмяТекущегоОбмена = "ВЕТИС" Тогда
		ИнтеграцияВЕТИСКлиент.ПродолжитьВыполнениеОбмена(
			ЭтотОбъект,,
			ОповещениеПриЗавершенииОбмена);
	ИначеЕсли ИмяТекущегоОбмена = "САТУРН" Тогда
		ИнтеграцияСАТУРНСлужебныйКлиент.ПродолжитьВыполнениеОбмена(
			ЭтотОбъект,,
			ОповещениеПриЗавершенииОбмена);
	ИначеЕсли ИмяТекущегоОбмена = "МехИСМП" Тогда
		ИнтеграцияИСМПСлужебныйКлиент.ПродолжитьВыполнениеОбмена(
			ЭтотОбъект,,
			ОповещениеПриЗавершенииОбмена);
	ИначеЕсли ИмяТекущегоОбмена = "ЗЕРНО" Тогда
		ИнтеграцияЗЕРНОСлужебныйКлиент.ПродолжитьВыполнениеОбмена(
			ЭтотОбъект,,
			ОповещениеПриЗавершенииОбмена);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗавершенииОбмена(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	РассчитатьСтатусИнтеркампаниНаСервере();
	
	ИзменилосьСостояниеДокументов = Ложь;
	
	Если ДокументыДляОбменаКешСтатусов.Количество() > Объект.ДокументыПередачи.Количество() Тогда
		ИзменилосьСостояниеДокументов = Истина;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из Объект.ДокументыПередачи Цикл
		
		СтароеСостояние = ДокументыДляОбменаКешСтатусов[СтрокаТЧ.Ссылка];
		Если СтароеСостояние <> Неопределено Тогда
			Если СтрокаТЧ.Статус <> СтароеСостояние.Статус Тогда
				ИзменилосьСостояниеДокументов = Истина;
			ИначеЕсли СтрокаТЧ.ДальнейшееДействие1 <> СтароеСостояние.ДальнейшееДействие1 Тогда
				ИзменилосьСостояниеДокументов = Истина;
			ИначеЕсли СтрокаТЧ.ДальнейшееДействие2 <> СтароеСостояние.ДальнейшееДействие2 Тогда
				ИзменилосьСостояниеДокументов = Истина;
			ИначеЕсли СтрокаТЧ.ДальнейшееДействие3 <> СтароеСостояние.ДальнейшееДействие3 Тогда
				ИзменилосьСостояниеДокументов = Истина;
			КонецЕсли;
		Иначе
			ИзменилосьСостояниеДокументов = Истина;
		КонецЕсли;
		
		Если ИзменилосьСостояниеДокументов Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ИмяТекущегоОбмена = Неопределено;
	
	Если ИзменилосьСостояниеДокументов Тогда
		ОбработатьДокументыНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ЦветТекстаНеТребуетВниманияГосИС = ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС;
	ТекстНеТребуется = НСтр("ru = '<Не требуется>'");
	
	// Строки без передачи товаров
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Товары.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ПередачаТребуется");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветТекстаНеТребуетВниманияГосИС);
	
	// Справка №2
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСправка2.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЕГАИС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветТекстаНеТребуетВниманияГосИС);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", ТекстНеТребуется);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Запись складского журнала
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗаписьСкладскогоЖурнала.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВЕТИС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветТекстаНеТребуетВниманияГосИС);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", ТекстНеТребуется);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Партия ЗЕРНО
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПартияЗЕРНО.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЗЕРНО");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветТекстаНеТребуетВниманияГосИС);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", ТекстНеТребуется);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Партия САТУРН
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПартияСАТУРН.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.САТУРН");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветТекстаНеТребуетВниманияГосИС);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", ТекстНеТребуется);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Отправитель кода маркировки
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыОрганизация.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.КоличествоСИзвестнымВладельцем");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветТекстаНеТребуетВниманияГосИС);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Неоформленные входящие документы ГосИС
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДокументыПередачиСсылка.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДокументыПередачи.Ссылка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Документы.ТТНВходящаяЕГАИС.ПустаяСсылка();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Ожидается получение входящей ТТН ЕГАИС'"));
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДокументыПередачиСсылка.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДокументыПередачи.Ссылка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Документы.ВходящаяТранспортнаяОперацияВЕТИС.ПустаяСсылка();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Ожидается погашение созданных ВСД ВетИС'"));
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДокументыПередачиСсылка.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДокументыПередачи.Ссылка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Документы.ПогашениеСДИЗЗЕРНО.ПустаяСсылка();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Ожидается погашение созданных СДИЗ'"));
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДокументыПередачиСсылка.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДокументыПередачи.Ссылка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Документы.ПриемкаТоваровИСМП.ПустаяСсылка();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Ожидается приемка товаров ИС МП'"));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОснованию()
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		ОбработкаОбъект.Заполнить(Объект.ДокументОснование);
		ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
		ПоДокументу = Истина;
		ЗаполнитьСлужебныеРеквизитыТаблицыТовары();
		ЗаполнитьСлужебныеРеквизитыТаблицыДокументыПередачи();
	ИначеЕсли ЗначениеЗаполнено(Объект.Склад) Тогда
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		ОбработкаОбъект.Заполнить(Объект.Склад);
		ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
		ЗаполнитьСлужебныеРеквизитыТаблицыТовары();
		ЗаполнитьСлужебныеРеквизитыТаблицыДокументыПередачи();
	КонецЕсли;
	НастроитьТаблицуТовары();
	НастроитьРежимФормы();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоСкладу()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.Заполнить(Объект.Склад);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	ЗаполнитьСлужебныеРеквизитыТаблицыТовары();
	ЗаполнитьСлужебныеРеквизитыТаблицыДокументыПередачи();
	НастроитьТаблицуТовары();
	НастроитьРежимФормы();
	
КонецПроцедуры

#Область Команды

&НаСервере
Процедура РассчитатьСтатусИнтеркампаниНаСервере()
	
	Если ПоДокументу Тогда
		ЗаполнитьПоОснованию();
	Иначе
		ЗаполнитьПоСкладу();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПартииНаСервере(ИдентификаторыСтрок)
	
	Обработки.ОформлениеПередачиТоваровМеждуОрганизациями.РаспределитьПоПартиям(Объект, ИдентификаторыСтрок);
	ЗаполнитьСлужебныеРеквизитыТаблицыТовары(ИдентификаторыСтрок);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьДокументыПередачиНаСервере()
	
	Менеджер = Обработки.ОформлениеПередачиТоваровМеждуОрганизациями;
	СозданныеДокументы = Менеджер.СоздатьДокументыПередачи(Объект);
	Для Каждого НовыйДокумент Из СозданныеДокументы Цикл
		ЗаполнитьЗначенияСвойств(Объект.ДокументыПередачи.Добавить(), НовыйДокумент);
	КонецЦикла;
	ЗаполнитьСлужебныеРеквизитыТаблицыДокументыПередачи();
	Если Объект.ДокументыПередачи.Количество() Тогда
		Объект.РежимОжидания = Истина;
		НастроитьРежимФормы();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Интерфейс

&НаСервере
Процедура НастроитьРежимФормы()
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Элементы.Склад.Вид = ВидПоляФормы.ПолеНадписи;
		Элементы.Склад.Видимость = Не ПоДокументу;
		Элементы.ПоДокументу.Видимость = Не (Объект.РежимОжидания И ПоДокументу);
	Иначе
		Элементы.ДокументОснование.Видимость = Ложь;
		Элементы.ПоДокументу.Видимость = Ложь;
	КонецЕсли;
	
	Если ТоварыКПередаче Тогда
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("ПередачаТребуется", Истина);
	Иначе
		Элементы.Товары.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Склад)
		Или Объект.ДокументыОснования.Количество() = 0 Тогда
		РежимОтображенияОткрытаПустаяОбработка();
	ИначеЕсли Объект.РежимОжидания Тогда
		РежимОтображенияИдетПередачаТоваров();
	Иначе
		РежимОтображенияДоступнаПередачаТоваров();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РежимОтображенияОткрытаПустаяОбработка()
	
	Элементы.ГруппаТовары.Видимость = Ложь;
	Элементы.ГруппаДокументыПередачи.Видимость = Ложь;
	Элементы.ТоварыСоздатьДокументыПередачи.Видимость = Ложь;
	Элементы.ГруппаПередачаТоваровНеТребуется.Видимость = ЗначениеЗаполнено(Объект.Склад);
	
КонецПроцедуры

&НаСервере
Процедура РежимОтображенияДоступнаПередачаТоваров()
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Заголовок = НСтр("ru = 'Требуется передача товаров между организациями'");
	КонецЕсли;
	
	ТребуетсяПередачаТоваров = Ложь;
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		Если СтрокаТЧ.ПередачаТребуется Тогда
			ТребуетсяПередачаТоваров = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ГруппаДокументыПередачи.Видимость = Ложь;
	Элементы.ГруппаТовары.Видимость = Объект.Товары.Количество() > 0;
	
	Элементы.ГруппаПередачаТоваровНеТребуется.Видимость = Не ТребуетсяПередачаТоваров;
	Элементы.ТоварыСоздатьДокументыПередачи.Видимость = ТребуетсяПередачаТоваров;
	
КонецПроцедуры

&НаСервере
Процедура РежимОтображенияИдетПередачаТоваров()
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Заголовок = НСтр("ru = 'Выполняется передача товаров между организациями'");
	КонецЕсли;
	
	Элементы.ГруппаТовары.Видимость = Ложь;
	Элементы.ГруппаДокументыПередачи.Видимость = Истина;
	Элементы.ГруппаПередачаТоваровНеТребуется.Видимость = Ложь;
	Элементы.ТоварыСоздатьДокументыПередачи.Видимость = Ложь;
	Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаДокументыПередачи;
	Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыТаблицыДокументыПередачи()
	
	Для Каждого СтрокаТЧ Из Объект.ДокументыПередачи Цикл
		СтрокаТЧ.ПроведенКартинка = ?(СтрокаТЧ.Проведен, 1, 0);
	КонецЦикла;
	
КонецПроцедуры

#Область ТаблицаТовары

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыТаблицыТовары(Знач ИдентификаторыСтрок = Неопределено)
	
	Если ИдентификаторыСтрок = Неопределено Тогда
		Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
			СтрокаТаблицы.ПередачаТребуется = ЗначениеЗаполнено(СтрокаТаблицы.Организация)
				И СтрокаТаблицы.Организация <> СтрокаТаблицы.ОрганизацияПолучатель;
		КонецЦикла;
	Иначе
		Для Каждого Идентификатор Из ИдентификаторыСтрок Цикл
			СтрокаТаблицы = Объект.Товары.НайтиПоИдентификатору(Идентификатор);
			СтрокаТаблицы.ПередачаТребуется = ЗначениеЗаполнено(СтрокаТаблицы.Организация)
				И СтрокаТаблицы.Организация <> СтрокаТаблицы.ОрганизацияПолучатель;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьТаблицуТовары()
	
	Элементы.ТоварыСправка2.Видимость                = Объект.Товары.НайтиСтроки(Новый Структура("ЕГАИС", Истина)).Количество() > 0;
	Элементы.ТоварыЗаписьСкладскогоЖурнала.Видимость = Объект.Товары.НайтиСтроки(Новый Структура("ВЕТИС", Истина)).Количество() > 0;
	Элементы.ТоварыПартияЗЕРНО.Видимость             = Объект.Товары.НайтиСтроки(Новый Структура("ЗЕРНО", Истина)).Количество() > 0;
	Элементы.ТоварыПартияСАТУРН.Видимость            = Объект.Товары.НайтиСтроки(Новый Структура("САТУРН", Истина)).Количество() > 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьСтатусСтрокиТовары()
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписанияДокументовПередачи = Новый Массив; //Массив Из Строка
	
	Если ТекущиеДанные.ПередачаТребуется Тогда
		Если ТекущиеДанные.ЕГАИС Тогда
			ОписанияДокументовПередачи.Добавить(НСтр("ru = 'ЕГАИС'"));
		КонецЕсли;
		Если ТекущиеДанные.ВЕТИС Тогда
			ОписанияДокументовПередачи.Добавить(НСтр("ru = 'ВетИС'"));
		КонецЕсли;
		Если ТекущиеДанные.ИСМП Тогда
			ОписанияДокументовПередачи.Добавить(НСтр("ru = 'ГИС МТ'"));
		КонецЕсли;
		Если ТекущиеДанные.ЗЕРНО Тогда
			ОписанияДокументовПередачи.Добавить(НСтр("ru = 'ФГИС ""Зерно""'"));
		КонецЕсли;
		Если ТекущиеДанные.САТУРН Тогда
			ОписанияДокументовПередачи.Добавить(НСтр("ru = 'ФГИС ""Сатурн""'"));
		КонецЕсли;
	КонецЕсли;
	
	Если ОписанияДокументовПередачи.Количество() Тогда
		ТекстПередачи = НСтр("ru = 'Требуется оформление документов передачи товаров для:'")
			+ " "
			+ СтрСоединить(ОписанияДокументовПередачи, ", ")
			+ ".";
		ОписаниеТекущейПозиции = ТекстПередачи;
	Иначе
		ОписаниеТекущейПозиции = НСтр("ru = 'Передача товаров по текущей строке не требуется.'");
	КонецЕсли;
	
	Элементы.ТоварыСтатусТекущейСтроки.Заголовок = ОписаниеТекущейПозиции;
	
КонецПроцедуры

#Область ВыборПартииСНедостаточнымКоличеством

&НаКлиенте
Процедура РазбитьСтрокуЗавершение(НоваяСтрока, ИсходнаяСтрока) Экспорт
	
	Если НоваяСтрока <> Неопределено Тогда
		РазбитьСтрокуПриВыбореПартии(ИсходнаяСтрока, НоваяСтрока, "Количество", НоваяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуПриВыбореПартии(ИсходнаяСтрока, ВыбранноеЗначение, ЗаполняемыеКолонки, НоваяСтрока = Неопределено)
	
	КоэффициентЕГАИС = ИсходнаяСтрока.КоличествоЕГАИС / ИсходнаяСтрока.Количество;
	КоэффициентВЕТИС = ИсходнаяСтрока.КоличествоВЕТИС / ИсходнаяСтрока.Количество;
	КоэффициентЗЕРНО = ИсходнаяСтрока.КоличествоЗЕРНО / ИсходнаяСтрока.Количество;
	КоэффициентСАТУРН = ИсходнаяСтрока.КоличествоСАТУРН / ИсходнаяСтрока.Количество;
	Если НоваяСтрока = Неопределено Тогда
		НоваяСтрока = Объект.Товары.Вставить(Объект.Товары.Индекс(ИсходнаяСтрока) + 1);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока);
		НоваяСтрока.Количество = ВыбранноеЗначение.Количество;
		ИсходнаяСтрока.Количество = ИсходнаяСтрока.Количество - НоваяСтрока.Количество;
	КонецЕсли;
	НоваяСтрока.КоличествоЕГАИС  = НоваяСтрока.Количество * КоэффициентЕГАИС;
	НоваяСтрока.КоличествоВЕТИС  = НоваяСтрока.Количество * КоэффициентВЕТИС;
	НоваяСтрока.КоличествоЗЕРНО  = НоваяСтрока.Количество * КоэффициентЗЕРНО;
	НоваяСтрока.КоличествоСАТУРН = НоваяСтрока.Количество * КоэффициентСАТУРН;
	ИсходнаяСтрока.КоличествоЕГАИС  = ИсходнаяСтрока.КоличествоЕГАИС  - НоваяСтрока.КоличествоЕГАИС;
	ИсходнаяСтрока.КоличествоВЕТИС  = ИсходнаяСтрока.КоличествоВЕТИС  - НоваяСтрока.КоличествоВЕТИС;
	ИсходнаяСтрока.КоличествоЗЕРНО  = ИсходнаяСтрока.КоличествоЗЕРНО  - НоваяСтрока.КоличествоЗЕРНО;
	ИсходнаяСтрока.КоличествоСАТУРН = ИсходнаяСтрока.КоличествоСАТУРН - НоваяСтрока.КоличествоСАТУРН;
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыбранноеЗначение, ЗаполняемыеКолонки);
	НоваяСтрока.КоличествоСИзвестнымВладельцемКодов = Мин(НоваяСтрока.КоличествоСИзвестнымВладельцемКодов, НоваяСтрока.Количество);
	ИсходнаяСтрока.КоличествоСИзвестнымВладельцемКодов = ИсходнаяСтрока.КоличествоСИзвестнымВладельцемКодов
		- НоваяСтрока.КоличествоСИзвестнымВладельцемКодов;
	
КонецПроцедуры

#КонецОбласти

// Коэффициент пересчета ЕГАИС.
// 
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - Номенклатура
//  АлкогольнаяПродукция - СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС - АлкогольнаяПродукция
// 
// Возвращаемое значение:
//  Число - Коэффициент пересчета ЕГАИС
&НаСервереБезКонтекста
Функция КоэффициентПересчетаЕГАИС(Номенклатура, АлкогольнаяПродукция)
	
	Коэффициент = 0;
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(АлкогольнаяПродукция, "ТипПродукции, ОбъемДАЛ");
	Если Реквизиты.ТипПродукции = Перечисления.ТипыПродукцииЕГАИС.Неупакованная И Реквизиты.ОбъемДАЛ <> 0 Тогда
		Коэффициент = 1 / Реквизиты.ОбъемДАЛ;
	КонецЕсли;
	Если Коэффициент = 0 Тогда
		Коэффициент = ОбщегоНазначенияИС.ОписаниеНоменклатуры(Номенклатура)[Номенклатура].КоличествоВПотребительскойУпаковке;
	КонецЕсли;
	Если Коэффициент = 0 Тогда
		Коэффициент = 1;
	КонецЕсли;
	Возврат Коэффициент;
	
КонецФункции

&НаСервереБезКонтекста
Функция КоэффициентПересчетаВЕТИС(Номенклатура, ЕдиницаИзмеренияВЕТИС)
	
	Коэффициент = ИнтеграцияВЕТИСУТ.КоэффициентЕдиницыИзмеренияПоВЕТИС(ЕдиницаИзмеренияВЕТИС, Номенклатура).Коэффициент;
	Возврат ?(Коэффициент = 0, 1, Коэффициент);
	
КонецФункции

&НаСервереБезКонтекста
Функция КоэффициентПересчетаСАТУРН(Номенклатура, ТипИзмеряемойВеличины)
	
	Коэффициенты = ИнтеграцияИСВызовСервера.КоэффициентВесОбъемУпаковки(Номенклатура);
	Если ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличинСАТУРН.Вес Тогда
		Коэффициент = Коэффициенты.Вес;
	ИначеЕсли ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличинСАТУРН.Объем Тогда
		Коэффициент = Коэффициенты.Объем;
	Иначе
		Коэффициент = ?(Коэффициенты.Вес = 0, Коэффициенты.Объем, Коэффициенты.Вес);
	КонецЕсли;
	Возврат ?(Коэффициент = 0, 1, 1/Коэффициент);
	
КонецФункции

&НаСервереБезКонтекста
Функция КоэффициентПересчетаЗЕРНО(Номенклатура)
	
	Массив = Новый Массив;
	Массив.Добавить(Новый Структура("Номенклатура", Номенклатура));
	Коэффициент = ИнтеграцияЗЕРНОУТ.КоэффициентыЕдиницИзмеренияЗЕРНО(Массив)[Номенклатура].Коэффициент;
	Возврат ?(Коэффициент = 0, 1, Коэффициент);
	
КонецФункции

#КонецОбласти

#КонецОбласти