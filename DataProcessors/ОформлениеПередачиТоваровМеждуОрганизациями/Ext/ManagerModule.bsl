#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Автоматическое создание документов. Этапы:
// 1. Определяем пары "Организация - организация-получатель".
// 3. По каждой паре создаем документ передачи и связанные с ним документы ГосИС.
// 4. По возможности проводим получившиеся документы.
// 
// Параметры:
//  Объект - ОбработкаОбъект.ОформлениеПередачиТоваровМеждуОрганизациями - 
// 
// Возвращаемое значение:
//  Массив Из ДокументСсылка - созданные документы
Функция СоздатьДокументыПередачи(Объект) Экспорт
	
	Результат = Новый Массив;
	Товары = Объект.Товары.Выгрузить();
	ШтрихкодыУпаковок = Объект.ШтрихкодыУпаковок.Выгрузить();
	НаправленияПередачи = Товары.Скопировать(, "Организация,ОрганизацияПолучатель");
	НаправленияПередачи.Свернуть("Организация,ОрганизацияПолучатель");
	
	Для Каждого СтрокаТЧ Из НаправленияПередачи Цикл
		
		Если СтрокаТЧ.Организация = СтрокаТЧ.ОрганизацияПолучатель Тогда
			Продолжить;
		ИначеЕсли Не ЗначениеЗаполнено(СтрокаТЧ.Организация) Тогда
			Продолжить;
		КонецЕсли;
		
		ТоварыПередачи = Товары.Скопировать(Новый Структура("Организация,ОрганизацияПолучатель", СтрокаТЧ.Организация, СтрокаТЧ.ОрганизацияПолучатель));
		КодыПередачи = ШтрихкодыУпаковок.Скопировать(Новый Структура("Организация,ОрганизацияПолучатель", СтрокаТЧ.Организация, СтрокаТЧ.ОрганизацияПолучатель));
		
		ДокументПередачи = Документы.ПередачаТоваровМеждуОрганизациями.СоздатьДокумент();
		ЗаполнитьДокументПередачи(ДокументПередачи, Объект, ТоварыПередачи, КодыПередачи);
		
		ДобавленныйДокумент = РеквизитыСтрокиДокументыПередачи();
		ДобавленныйДокумент.Ссылка = ДокументПередачи.Ссылка;
		ДобавленныйДокумент.Проведен = ДокументПередачи.Проведен;
		Результат.Добавить(ДобавленныйДокумент);
		
		Если Объект.НастройкиЕГАИС.Количество() Тогда
			ТоварыЕГАИС = ТоварыПередачи.Скопировать(Новый Структура("ЕГАИС", Истина));
			Если ТоварыЕГАИС.Количество() > 0 Тогда
				ТТНИсходящаяЕГАИС = Документы.ТТНИсходящаяЕГАИС.СоздатьДокумент();
				ЗаполнитьТТНИсходящуюЕГАИС(ТТНИсходящаяЕГАИС, ДокументПередачи, ТоварыЕГАИС);
				ДобавленныйДокумент = РеквизитыСтрокиДокументыПередачи();
				ДобавленныйДокумент.Ссылка = ТТНИсходящаяЕГАИС.Ссылка;
				ДобавленныйДокумент.Проведен = ТТНИсходящаяЕГАИС.Проведен;
				ДобавленныйДокумент.Состояние = Документы.ТТНИсходящаяЕГАИС.СтатусПоУмолчанию();
				ДобавленныйДокумент.Статус = Документы.ТТНИсходящаяЕГАИС.СтатусПоУмолчанию();
				ДобавленныйДокумент.ДальнейшееДействие1 = Документы.ТТНИсходящаяЕГАИС.ДальнейшееДействиеПоУмолчанию();
				ДобавленныйДокумент.ДальнейшееДействие2 = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.НеТребуется;
				ДобавленныйДокумент.ДальнейшееДействие3 = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.НеТребуется;
				
				Результат.Добавить(ДобавленныйДокумент);
			КонецЕсли;
		КонецЕсли;
		
		Если Объект.НастройкиВЕТИС.Количество() Тогда
			
			ТоварыВЕТИС = ТоварыПередачи.Скопировать(Новый Структура("ВЕТИС", Истина));
			Если ТоварыВЕТИС.Количество() > 0 Тогда
				ОтправителиВЕТИС = РазбитьПоНастройкамВЕТИС(ТоварыВЕТИС);
				Для Каждого КлючИЗначение Из ОтправителиВЕТИС Цикл
					ИсходящаяТранспортнаяОперацияВЕТИС = Документы.ИсходящаяТранспортнаяОперацияВЕТИС.СоздатьДокумент();
					ЗаполнитьИсходящуюТранспортнуюОперациюВЕТИС(ИсходящаяТранспортнаяОперацияВЕТИС, ДокументПередачи, КлючИЗначение);
					ДобавленныйДокумент = РеквизитыСтрокиДокументыПередачи();
					ДобавленныйДокумент.Ссылка = ИсходящаяТранспортнаяОперацияВЕТИС.Ссылка;
					ДобавленныйДокумент.Проведен = ИсходящаяТранспортнаяОперацияВЕТИС.Проведен;
					ДобавленныйДокумент.Состояние = Документы.ИсходящаяТранспортнаяОперацияВЕТИС.СтатусПоУмолчанию();
					ДобавленныйДокумент.Статус = Документы.ИсходящаяТранспортнаяОперацияВЕТИС.СтатусПоУмолчанию();
					ДобавленныйДокумент.ДальнейшееДействие1 = Документы.ИсходящаяТранспортнаяОперацияВЕТИС.ДальнейшееДействиеПоУмолчанию();
					ДобавленныйДокумент.ДальнейшееДействие2 = Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.НеТребуется;
					ДобавленныйДокумент.ДальнейшееДействие3 = Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.НеТребуется;
					Результат.Добавить(ДобавленныйДокумент);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Объект.НастройкиЗЕРНО.Количество() Тогда
			ТоварыЗЕРНО = ТоварыПередачи.Скопировать(Новый Структура("ЗЕРНО", Истина));
			ТоварыППЗ = ВыделитьТоварыППЗ(ТоварыЗЕРНО);
			Если ТоварыЗЕРНО.Количество() > 0 Тогда
				ОформлениеСДИЗЗЕРНО = Документы.ОформлениеСДИЗЗЕРНО.СоздатьДокумент();
				ЗаполнитьОформлениеСДИЗЗЕРНО(ОформлениеСДИЗЗЕРНО, ДокументПередачи, ТоварыЗЕРНО);
				ДобавленныйДокумент = РеквизитыСтрокиДокументыПередачи();
				ДобавленныйДокумент.Ссылка = ОформлениеСДИЗЗЕРНО.Ссылка;
				ДобавленныйДокумент.Проведен = ОформлениеСДИЗЗЕРНО.Проведен;
				ДобавленныйДокумент.Состояние = Документы.ОформлениеСДИЗЗЕРНО.СтатусПоУмолчанию();
				ДобавленныйДокумент.Статус = Документы.ОформлениеСДИЗЗЕРНО.СтатусПоУмолчанию();
				ДобавленныйДокумент.ДальнейшееДействие1 = Документы.ОформлениеСДИЗЗЕРНО.ДальнейшееДействиеПоУмолчанию();
				ДобавленныйДокумент.ДальнейшееДействие2 = Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.НеТребуется;
				ДобавленныйДокумент.ДальнейшееДействие3 = Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.НеТребуется;
				Результат.Добавить(ДобавленныйДокумент);
			КонецЕсли;
			Если ТоварыППЗ.Количество() > 0 Тогда
				ОформлениеСДИЗППЗ = Документы.ОформлениеСДИЗЗЕРНО.СоздатьДокумент();
				ЗаполнитьОформлениеСДИЗЗЕРНО(ОформлениеСДИЗППЗ, ДокументПередачи, ТоварыППЗ);
				ДобавленныйДокумент = РеквизитыСтрокиДокументыПередачи();
				ДобавленныйДокумент.Ссылка = ОформлениеСДИЗППЗ.Ссылка;
				ДобавленныйДокумент.Проведен = ОформлениеСДИЗППЗ.Проведен;
				ДобавленныйДокумент.Состояние = Документы.ОформлениеСДИЗЗЕРНО.СтатусПоУмолчанию();
				ДобавленныйДокумент.Статус = Документы.ОформлениеСДИЗЗЕРНО.СтатусПоУмолчанию();
				ДобавленныйДокумент.ДальнейшееДействие1 = Документы.ОформлениеСДИЗЗЕРНО.ДальнейшееДействиеПоУмолчанию();
				ДобавленныйДокумент.ДальнейшееДействие2 = Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.НеТребуется;
				ДобавленныйДокумент.ДальнейшееДействие3 = Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.НеТребуется;
				Результат.Добавить(ДобавленныйДокумент);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Объект.НастройкиСАТУРН.Количество() Тогда
			ТоварыСАТУРН = ТоварыПередачи.Скопировать(Новый Структура("САТУРН", Истина));
			Если ТоварыСАТУРН.Количество() > 0 Тогда
				ОтправителиСАТУРН = РазбитьПоНастройкамСАТУРН(ТоварыСАТУРН);
				Для Каждого КлючИЗначение Из ОтправителиСАТУРН Цикл
					НакладнаяСАТУРН = Документы.НакладнаяСАТУРН.СоздатьДокумент();
					ЗаполнитьНакладнуюСАТУРН(НакладнаяСАТУРН, ДокументПередачи, КлючИЗначение);
					ДобавленныйДокумент = РеквизитыСтрокиДокументыПередачи();
					ДобавленныйДокумент.Ссылка = НакладнаяСАТУРН.Ссылка;
					ДобавленныйДокумент.Проведен = НакладнаяСАТУРН.Проведен;
					ДобавленныйДокумент.Состояние = Документы.НакладнаяСАТУРН.СтатусПоУмолчанию();
					ДобавленныйДокумент.Статус = Документы.НакладнаяСАТУРН.СтатусПоУмолчанию();
					ДобавленныйДокумент.ДальнейшееДействие1 = Документы.НакладнаяСАТУРН.ДальнейшееДействиеПоУмолчанию();
					ДобавленныйДокумент.ДальнейшееДействие2 = Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.НеТребуется;
					ДобавленныйДокумент.ДальнейшееДействие3 = Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.НеТребуется;
					Результат.Добавить(ДобавленныйДокумент);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		КодыМеха = ИнтеграцияИСУТ.ШтрихкодыСодержащиеВидыПродукции(
			КодыПередачи.ВыгрузитьКолонку("ШтрихкодУпаковки"), Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха);
		Если КодыМеха.Количество() Тогда
			ОтгрузкаТоваровИСМП = Документы.ОтгрузкаТоваровИСМП.СоздатьДокумент();
			ЗаполнитьОтгрузкуТоваровИСМП(ОтгрузкаТоваровИСМП, ДокументПередачи, КодыМеха);
			ДобавленныйДокумент = РеквизитыСтрокиДокументыПередачи();
			ДобавленныйДокумент.Ссылка = ОтгрузкаТоваровИСМП.Ссылка;
			ДобавленныйДокумент.Проведен = ОтгрузкаТоваровИСМП.Проведен;
			ДобавленныйДокумент.Состояние = Документы.ОтгрузкаТоваровИСМП.СтатусПоУмолчанию();
			ДобавленныйДокумент.Статус = Документы.ОтгрузкаТоваровИСМП.СтатусПоУмолчанию();
			ДобавленныйДокумент.ДальнейшееДействие1 = Документы.ОтгрузкаТоваровИСМП.ДальнейшееДействиеПоУмолчанию();
			ДобавленныйДокумент.ДальнейшееДействие2 = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.НеТребуется;
			ДобавленныйДокумент.ДальнейшееДействие3 = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.НеТребуется;
			Результат.Добавить(ДобавленныйДокумент);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Автоматическое распределение по партиям. Этапы:
//    1. По передаваемым кодам маркировки явно указываем отправителя (в этом случае МассивСтрок = Неопределено).
//    2. Строго по сериям:
//    2.1. Подбираются собственные остатки (не требующие передачи). Отмечается Организация = ОрганизацияПолучатель
//    2.2. Если их нет, подбираются остатки других организаций.
//    3. Нераспределенное по соответствию:
//    3.1. Подбираются собственные остатки (не требующие передачи). Отмечается Организация = ОрганизацияПолучатель
//    3.2. Если их нет, подбираются остатки других организаций.
// Параметры:
//  Объект - ОбработкаОбъект.ОформлениеПередачиТоваровМеждуОрганизациями - 
//  МассивСтрок - Неопределено - Массив строк для которых выполняется распределение
// 
Процедура РаспределитьПоПартиям(Объект, МассивСтрок = Неопределено) Экспорт
	
	Если МассивСтрок = Неопределено Тогда
		РаспределитьШтрихКодыУпаковок(Объект);
	КонецЕсли;
	
	ОстаткиИСоответствиеЕГАИС = ОстаткиИСоответствиеЕГАИС(Объект);
	ОстаткиИСоответствиеВЕТИС = ОстаткиИСоответствиеВЕТИС(Объект);
	ОстаткиИСоответствиеЗЕРНО = ОстаткиИСоответствиеЗЕРНО(Объект);
	ОстаткиИСоответствиеСАТУРН = ОстаткиИСоответствиеСАТУРН(Объект);
	
	ПередачаЗапрещена = ПередачаЗапрещена(Объект.НастройкиПередачиМеждуОрганизациями);
	
	РаспределитьЕГАИС(Объект, Истина, МассивСтрок,  ОстаткиИСоответствиеЕГАИС,  ПередачаЗапрещена);
	РаспределитьВЕТИС(Объект, Истина, МассивСтрок,  ОстаткиИСоответствиеВЕТИС,  ПередачаЗапрещена);
	РаспределитьЗЕРНО(Объект, Истина, МассивСтрок,  ОстаткиИСоответствиеЗЕРНО,  ПередачаЗапрещена);
	РаспределитьСАТУРН(Объект, Истина, МассивСтрок, ОстаткиИСоответствиеСАТУРН, ПередачаЗапрещена);
	
	РаспределитьЕГАИС(Объект, Ложь, МассивСтрок,  ОстаткиИСоответствиеЕГАИС,  ПередачаЗапрещена);
	РаспределитьВЕТИС(Объект, Ложь, МассивСтрок,  ОстаткиИСоответствиеВЕТИС,  ПередачаЗапрещена);
	РаспределитьЗЕРНО(Объект, Ложь, МассивСтрок,  ОстаткиИСоответствиеЗЕРНО,  ПередачаЗапрещена);
	РаспределитьСАТУРН(Объект, Ложь, МассивСтрок, ОстаткиИСоответствиеСАТУРН, ПередачаЗапрещена);
	
	РаспределитьИСМП(Объект, МассивСтрок);
	
КонецПроцедуры

// Состояние передачи между организациями.
// 
// Параметры:
//  ДокументСсылка - ОпределяемыйТип.ДокументыСПредварительнойПередачейМеждуОрганизациями - проверяемый документ
// 
// Возвращаемое значение:
//   ФорматированнаяСтрока - состояние передачи
Функция СостояниеПередачиМеждуОрганизациями(ДокументСсылка) Экспорт
	
	Результат = Новый ФорматированнаяСтрока("");
	
	СостояниеКоманды = СоответствиеТребованиямГИСМТ.СостояниеКомандыСоответствиеТребованиямГИСМТ(ДокументСсылка);
	
	Если Не ТребуетсяРасчетПередачиМеждуОрганизациями(ДокументСсылка, СостояниеКоманды.Видимость) Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Подмена гиперссылки состояния проверки кодов: выводится отдельно в группе ГосИС вместо всех прочих гиперссылок
	Если Не СостояниеКоманды.Видимость Тогда
		// ЭДО может не быть
	ИначеЕсли СостояниеКоманды.Статус = Перечисления.СтатусыОбработкиДокументовИСМП.ПустаяСсылка()
		Или СостояниеКоманды.Статус = Перечисления.СтатусыОбработкиДокументовИСМП.НеВыполнялось
	Тогда
		Возврат Новый ФорматированнаяСтрока(СостояниеКоманды.Заголовок,,,,
			"ПроверитьНаСоответствиеТребованиямГИСМТ");
	КонецЕсли;
	
	ОбработкаОбъект = Создать();
	ОбработкаОбъект.Заполнить(ДокументСсылка);
	
	Если ОбработкаОбъект.РежимОжидания Тогда
		Возврат Новый ФорматированнаяСтрока(НСтр("ru = 'Выполняется передача товаров между организациями'"),,,,
			"ОткрытьОбработкуОформлениеПередачиТоваровМеждуОрганизациями");
	ИначеЕсли ОбработкаОбъект.ТребуетсяОформлениеПередачиТоваров() Тогда
		Возврат Новый ФорматированнаяСтрока(НСтр("ru = 'Требуется передача товаров между организациями'"),,
			ЦветаСтиля.ЦветТекстаТребуетВниманияГосИС,,
			"ОткрытьОбработкуОформлениеПередачиТоваровМеждуОрганизациями");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверить статус оформления основания (Истина если проверка интеркампани недоступна или не требуется).
//   ЗЕРНО проверяется только по ФО, без настроек склада. ИСМП не проверяется (передача шуб будет в кодах к передаче).
// 
// Параметры:
//  РеквизитыСтроки - Структура - состояние конкретного документа-основания:
//   * Склад - СправочникСсылка.Склады - склад интеркампани
//   * Статус - Булево - если Истина проверка интеркампани недоступна или не требуется
//   * ДокументОснование - ОпределяемыйТип.ДокументыСПредварительнойПередачейМеждуОрганизациями - проверяемый документ
//   * КодыМаркировкиКПередаче - ПеречислениеСсылка.СтатусыПроверкиНаличияПродукцииИС - статус проверки кодов к передаче
//   * ТребуетсяОформлениеИС - ПеречислениеСсылка.СтатусыПроверкиНаличияПродукцииИС - статус оформления по основанию
//   * Описание - Строка - описание ошибки
//  НастройкиПроверки - Структура - кешированные настройки необходимости проверки интеркампани:
//   * ЕГАИС  - Булево - по складу доступна интеркампани ЕГАИС
//   * ВЕТИС  - Булево - по складу доступна интеркампани ВЕТИС
//   * САТУРН - Булево - по складу доступна интеркампани САТУРН
Процедура ПроверитьСтатусОформленияОснования(РеквизитыСтроки, НастройкиПроверки) Экспорт
	
	ДокументОснование = РеквизитыСтроки.ДокументОснование;
	
	ЗначениеВМассиве = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументОснование);
	ОтфильтроватьОбъектыПоСкладу(ЗначениеВМассиве, РеквизитыСтроки.Склад);
	Если ЗначениеВМассиве.Количество() = 0 Тогда
		РеквизитыСтроки.Статус = Истина;
		РеквизитыСтроки.Описание = НСтр("ru = 'Документ не относится к выбранному складу'");
		Возврат;
	КонецЕсли;
	
	СостояниеКоманды = СоответствиеТребованиямГИСМТ.СостояниеКомандыСоответствиеТребованиямГИСМТ(ДокументОснование);
	Если СостояниеКоманды.Видимость
		И СостояниеКоманды.Заголовок <> Перечисления.СтатусыОбработкиДокументовИСМП.Завершено Тогда
		РеквизитыСтроки.Статус = Истина;
		РеквизитыСтроки.Описание = НСтр("ru = 'Проверка кодов маркировки по документу не завершена'");
		Возврат;
	КонецЕсли;
	
	СтатусКодыКПередаче = Перечисления.СтатусыПроверкиНаличияПродукцииИС.Отсутствует;
	
	Если ИнтеграцияИС.РасчетСтатусовОформленияВыполняетсяВнеТранзакцииЗаписи() Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Основание", ДокументОснование);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	1
		|ИЗ
		|	РегистрСведений.СтатусыОформленияКРасчетуИС КАК СтатусыОформления
		|ГДЕ
		|	СтатусыОформления.Основание = &Основание";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьСтатусОформленияОснования(РеквизитыСтроки, СтатусКодыКПередаче, Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеПроверялась);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТребуетсяОформление = Перечисления.СтатусыПроверкиНаличияПродукцииИС.Отсутствует;
	ОформленыДокументыИС = Ложь;
	Если НастройкиПроверки.ЕГАИС Тогда
		
		ПроверитьСтатусыОформления(ДокументОснование, "ЕГАИС", "ЕГАИС", ТребуетсяОформление, ОформленыДокументыИС);
		
	КонецЕсли;
	
	Если НастройкиПроверки.ВЕТИС Тогда
		
		ПроверитьСтатусыОформления(ДокументОснование, "ВЕТИС", "ГосИС", ТребуетсяОформление, ОформленыДокументыИС);
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетЗернаИПродуктовПереработкиЗЕРНО") Тогда
		
		ПроверитьСтатусыОформления(ДокументОснование, "ЗЕРНО", "ГосИС", ТребуетсяОформление, ОформленыДокументыИС);
		
	КонецЕсли;
	
	Если НастройкиПроверки.САТУРН Тогда
		
		ПроверитьСтатусыОформления(ДокументОснование, "САТУРН", "ГосИС", ТребуетсяОформление, ОформленыДокументыИС);
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП") Тогда
		
		ПроверитьСтатусыОформления(ДокументОснование, "ИСМП", "ГосИС", ТребуетсяОформление, ОформленыДокументыИС);
		
	КонецЕсли;
	
	Если ОформленыДокументыИС Тогда
		
		ТребуетсяОформление = Перечисления.СтатусыПроверкиНаличияПродукцииИС.Отсутствует;
		
	КонецЕсли;
	
	ЗаполнитьСтатусОформленияОснования(РеквизитыСтроки, СтатусКодыКПередаче, ТребуетсяОформление);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция СформироватьГиперссылкуСмТакжеВРаботе(ПараметрыФормирования) Экспорт
	
	Если Не ПравоДоступа("Просмотр", Метаданные.Обработки.ОформлениеПередачиТоваровМеждуОрганизациями) Тогда
		Возврат "";
	КонецЕсли;
	
	ИспользуемыеПодсистемы = Новый Массив;
	Если ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции") Тогда
		ИспользуемыеПодсистемы.Добавить(НСтр("ru = 'ЕГАИС'"));
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПодконтрольныхТоваровВЕТИС") Тогда
		ИспользуемыеПодсистемы.Добавить(НСтр("ru = 'ВетИС'"));
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП") Тогда
		ИспользуемыеПодсистемы.Добавить(НСтр("ru = 'ИС МП'"));
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ВестиУчетЗернаИПродуктовПереработкиЗЕРНО") Тогда
		ИспользуемыеПодсистемы.Добавить(НСтр("ru = 'ФГИС ""Зерно""'"));
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПестицидовАгрохимикатовТукосмесейСАТУРН") Тогда
		ИспользуемыеПодсистемы.Добавить(НСтр("ru = 'ФГИС ""Сатурн""'"));
	КонецЕсли;
	
	Если ИспользуемыеПодсистемы.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстГиперссылки = СтрШаблон(
		НСтр("ru = 'Оформление передачи товаров между организациями (%1)'"),
		СтрСоединить(ИспользуемыеПодсистемы, ", "));
	
	Возврат Новый ФорматированнаяСтрока(
		ТекстГиперссылки,,,,
		"Обработка.ОформлениеПередачиТоваровМеждуОрганизациями.Форма.Форма");
КонецФункции

// Документы к расчету статусов оформления: возвращает все документы, по которым не рассчитан
//   статус оформления по подсистемам ГосИС или статус по кодам маркировки.
// 
// Возвращаемое значение:
//  Массив Из ОпределяемыйТип.ДокументыСПредварительнойПередачейМеждуОрганизациями
Функция ДокументыКРасчетуСтатусовОформления() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	РезультатыОбработкиДокументовИСМП.Документ КАК Документ
	|ИЗ
	|	РегистрСведений.РезультатыОбработкиДокументовИСМП КАК РезультатыОбработкиДокументовИСМП
	|ГДЕ
	|	РезультатыОбработкиДокументовИСМП.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиДокументовИСМП.НеВыполнялось)
	|	ИЛИ РезультатыОбработкиДокументовИСМП.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиДокументовИСМП.ПустаяСсылка)";
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Документ");
	ОтфильтроватьОбъектыПоТипу(Результат);
	
	Возврат Результат;
	
КонецФункции

// Документы к расчету передачи: возвращает все документы, по которым
//   статус оформления по подсистемам ГосИС "Не оформлен" (в т.ч. ИСМП, для группы "Продукция из натурального меха").
// 
// Параметры:
//  ОбработкаОбъект - ОбработкаОбъект.ОформлениеПередачиТоваровМеждуОрганизациями - источник вызова
// 
// Возвращаемое значение:
//  Массив Из ОпределяемыйТип.ДокументыСПредварительнойПередачейМеждуОрганизациями
Функция ДокументыКРасчетуПередачиМеждуОрганизациями(ОбработкаОбъект) Экспорт
	
	Результат = Новый Массив;
	
	// 1. Все неоформленные документы по складу
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетЗернаИПродуктовПереработкиЗЕРНО") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			Результат,
			ДокументыКОформлению(ОбработкаОбъект.Склад, "", "ЗЕРНО", Перечисления.СтатусыОформленияДокументовГосИС.НеОформлено),
			Истина);
	КонецЕсли;
	
	Если ОбработкаОбъект.НастройкиСАТУРН.Количество() Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			Результат,
			ДокументыКОформлению(ОбработкаОбъект.Склад, "", "САТУРН", Перечисления.СтатусыОформленияДокументовГосИС.НеОформлено),
			Истина);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			Результат,
			ДокументыКОформлению(ОбработкаОбъект.Склад, "", "ИСМП", Перечисления.СтатусыОформленияДокументовГосИС.НеОформлено),
			Истина);
	КонецЕсли;
	
	ОтфильтроватьОбъектыПоСкладу(Результат, ОбработкаОбъект.Склад);
	
	Если ОбработкаОбъект.НастройкиЕГАИС.Количество() Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			Результат,
			ДокументыКОформлению(ОбработкаОбъект.Склад, "ТорговыйОбъект", "ЕГАИС", Перечисления.СтатусыОформленияДокументовЕГАИС.НеОформлено),
			Истина);
	КонецЕсли;
	
	Если ОбработкаОбъект.НастройкиВЕТИС.Количество() Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			Результат,
			ДокументыКОформлению(ОбработкаОбъект.Склад, "ТорговыйОбъект", "ВЕТИС", Перечисления.СтатусыОформленияДокументовГосИС.НеОформлено),
			Истина);
	КонецЕсли;
	
	// 2. Вычтем документы оформленные в какой-либо подсистеме
	
	ОтфильтроватьОбъектыПоТипу(Результат);
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетЗернаИПродуктовПереработкиЗЕРНО") Тогда
		ПроверитьДокументыКОформлению(Результат, "ЗЕРНО", Перечисления.СтатусыОформленияДокументовГосИС.НеОформлено);
	КонецЕсли;
	
	Если ОбработкаОбъект.НастройкиСАТУРН.Количество() Тогда
		ПроверитьДокументыКОформлению(Результат, "САТУРН", Перечисления.СтатусыОформленияДокументовГосИС.НеОформлено);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП") Тогда
		ПроверитьДокументыКОформлению(Результат, "ИСМП", Перечисления.СтатусыОформленияДокументовГосИС.НеОформлено);
	КонецЕсли;
	
	Если ОбработкаОбъект.НастройкиЕГАИС.Количество() Тогда
		ПроверитьДокументыКОформлению(Результат, "ЕГАИС", Перечисления.СтатусыОформленияДокументовЕГАИС.НеОформлено);
	КонецЕсли;
	
	Если ОбработкаОбъект.НастройкиВЕТИС.Количество() Тогда
		ПроверитьДокументыКОформлению(Результат, "ВЕТИС", Перечисления.СтатусыОформленияДокументовГосИС.НеОформлено);
	КонецЕсли;
	
	// 3. Вычтем документы по которым коды маркировки не проверены
	
	ДокументыКРасчетуСтатусовОформления = ДокументыКРасчетуСтатусовОформления();
	Для Каждого ДокументСсылка Из ДокументыКРасчетуСтатусовОформления Цикл
		Элемент = Результат.Найти(ДокументСсылка);
		Если Элемент <> Неопределено Тогда
			Результат.Удалить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Истина если статус оформления по подсистемам ГосИС "Требуется оформление" или пустой.
// 
// Параметры:
//  ДокументСсылка - ОпределяемыйТип.ДокументыСПредварительнойПередачейМеждуОрганизациями - проверяемый документ
//  ВидимостьКомандыГИСМТ - Булево - по документу есть статус проверки ГИСМТ
// 
// Возвращаемое значение:
//  Булево - по документу нужен расчет передачи между организациями
Функция ТребуетсяРасчетПередачиМеждуОрганизациями(ДокументСсылка, ВидимостьКомандыГИСМТ) Экспорт
	
	ОформленыДокументыИС        = Ложь;
	СтатусТребуетсяОформлениеИС = Неопределено;
	ОпцияЕГАИС                  = ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции");
	ОпцияВЕТИС                  = ПолучитьФункциональнуюОпцию("ВестиУчетПодконтрольныхТоваровВЕТИС");
	ОпцияИСМП                   = ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП");
	ОпцияЗЕРНО                  = ПолучитьФункциональнуюОпцию("ВестиУчетЗернаИПродуктовПереработкиЗЕРНО");
	ОпцияСАТУРН                 = ПолучитьФункциональнуюОпцию("ВестиУчетПестицидовАгрохимикатовТукосмесейСАТУРН");
	
	Если ОпцияЕГАИС Тогда
		ПроверитьСтатусыОформления(ДокументСсылка, "ЕГАИС", "ЕГАИС", СтатусТребуетсяОформлениеИС, ОформленыДокументыИС);
	КонецЕсли;
	Если Не ОформленыДокументыИС И ОпцияВЕТИС Тогда
		ПроверитьСтатусыОформления(ДокументСсылка, "ВЕТИС", "ГосИС", СтатусТребуетсяОформлениеИС, ОформленыДокументыИС);
	КонецЕсли;
	Если Не ОформленыДокументыИС И ОпцияИСМП Тогда
		ПроверитьСтатусыОформления(ДокументСсылка, "ИСМП", "ГосИС", СтатусТребуетсяОформлениеИС, ОформленыДокументыИС);
	КонецЕсли;
	Если Не ОформленыДокументыИС И ОпцияЗЕРНО Тогда
		ПроверитьСтатусыОформления(ДокументСсылка, "ЗЕРНО", "ГосИС", СтатусТребуетсяОформлениеИС, ОформленыДокументыИС);
	КонецЕсли;
	Если Не ОформленыДокументыИС И ОпцияСАТУРН Тогда
		ПроверитьСтатусыОформления(ДокументСсылка, "САТУРН", "ГосИС", СтатусТребуетсяОформлениеИС, ОформленыДокументыИС);
	КонецЕсли;
	Если ВидимостьКомандыГИСМТ Тогда
		СтатусТребуетсяОформлениеИС = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии;
	КонецЕсли;
	
	Если ОформленыДокументыИС Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат СтатусТребуетсяОформлениеИС = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии;
	
КонецФункции

// Документы передачи: возвращает все документы передачи между организациями и их подчиненные, по которым
//   обработка документа не завершена.
// 
// Параметры:
//  ОбработкаОбъект - ОбработкаОбъект.ОформлениеПередачиТоваровМеждуОрганизациями - источник вызова
// 
// Возвращаемое значение:
//  Массив Из ДокументСсылка
Функция ДокументыВПроцессеПередачиМеждуОрганизациями(ОбработкаОбъект) Экспорт
	
	Результат = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Склад", ОбработкаОбъект.Склад);
	Запрос.УстановитьПараметр("Товары", ОбработкаОбъект.Товары.Выгрузить(,"Номенклатура,Характеристика"));
	
	// Не финальные статусы ЭДО или его отсутствие
	// Отсутствие части подчиненных документов (входящих) при наличии исходящих
	// Не финальные статусы подчиненных документов ГосИС
	ВидыПродукцииОСУ = ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииОбъемноСортовогоУчета();
	ВидыПродукцииИСМП = ОбщегоНазначенияИСМП.ВидыПродукцииОбязательнойМаркировки();
	ОСУ = Новый Массив;
	Для Каждого ВидПродукции Из ВидыПродукцииОСУ Цикл
		Если ВидыПродукцииИСМП.Найти(ВидПродукции)<>Неопределено Тогда
			ОСУ.Добавить(ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукции));
		КонецЕсли;
	КонецЦикла;
	Запрос.УстановитьПараметр("ТТНИсходящаяЕГАИС", Документы.ТТНИсходящаяЕГАИС.КонечныеСтатусы(Ложь));
	Запрос.УстановитьПараметр("ТТНВходящаяЕГАИС", Документы.ТТНВходящаяЕГАИС.КонечныеСтатусы(Ложь));
	Запрос.УстановитьПараметр("ИсходящаяТранспортнаяОперацияВЕТИС", Документы.ИсходящаяТранспортнаяОперацияВЕТИС.КонечныеСтатусы(Ложь));
	Запрос.УстановитьПараметр("ВходящаяТранспортнаяОперацияВЕТИС", Документы.ВходящаяТранспортнаяОперацияВЕТИС.КонечныеСтатусы(Ложь));
	Запрос.УстановитьПараметр("ОтгрузкаТоваровИСМП", Документы.ОтгрузкаТоваровИСМП.КонечныеСтатусы(Ложь));
	Запрос.УстановитьПараметр("ПриемкаТоваровИСМП", Документы.ПриемкаТоваровИСМП.КонечныеСтатусы(Ложь));
	Запрос.УстановитьПараметр("ОформлениеСДИЗЗЕРНО", Документы.ОформлениеСДИЗЗЕРНО.КонечныеСтатусы(Ложь));
	Запрос.УстановитьПараметр("ПогашениеСДИЗЗЕРНО", Документы.ПогашениеСДИЗЗЕРНО.КонечныеСтатусы(Ложь));
	Запрос.УстановитьПараметр("НакладнаяСАТУРН", Документы.НакладнаяСАТУРН.КонечныеСтатусы(Ложь));
	Запрос.УстановитьПараметр("ОСУ", ОСУ);
	Запрос.УстановитьПараметр("ТекстДокументНеСоздан", НСтр("ru = 'Документ не создан'"));
	Запрос.УстановитьПараметр("ТекстДокументНеПроведен", НСтр("ru = 'Документ не проведен'"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПередачаТоваровМеждуОрганизациямиТовары.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ДокументыПередачиПоТоварамОснования
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями.Товары КАК ПередачаТоваровМеждуОрганизациямиТовары
	|ГДЕ
	|	(ПередачаТоваровМеждуОрганизациямиТовары.Номенклатура,ПередачаТоваровМеждуОрганизациямиТовары.Характеристика)
	|	В (ВЫБРАТЬ Товары.Номенклатура, Товары.Характеристика ИЗ Товары КАК Товары)
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПередачаТоваровМеждуОрганизациями.Ссылка КАК Ссылка,
	|	ПередачаТоваровМеждуОрганизациями.Проведен КАК ПередачаПроведена
	|ПОМЕСТИТЬ ДокументыПередачиПоСкладу
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ПередачаТоваровМеждуОрганизациями
	|ГДЕ
	|	ПередачаТоваровМеждуОрганизациями.Склад = &Склад
	|	И НЕ ПередачаТоваровМеждуОрганизациями.ПометкаУдаления
	|	И ПередачаТоваровМеждуОрганизациями.Ссылка В (ВЫБРАТЬ Ссылка ИЗ ДокументыПередачиПоТоварамОснования)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыПередачиПоСкладу.Ссылка КАК Ссылка
	|ИЗ
	|	ДокументыПередачиПоСкладу КАК ДокументыПередачиПоСкладу
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыПередачиПоСкладу.Ссылка КАК Ссылка
	|ИЗ
	|	ДокументыПередачиПоСкладу КАК ДокументыПередачиПоСкладу
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПередачаТоваровМеждуОрганизациями.Товары КАК Товары
	|	ПО Товары.Ссылка = ДокументыПередачиПоСкладу.Ссылка
	|ГДЕ
	|	Товары.Номенклатура.ОсобенностьУчета В (&ОСУ)
	|	И ДокументыПередачиПоСкладу.ПередачаПроведена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыПередачиПоСкладу.Ссылка КАК Ссылка,
	|	ПередачаТоваровМеждуОрганизациямиШтрихкодыУпаковок.ШтрихкодУпаковки КАК Штрихкод
	|ИЗ
	|	ДокументыПередачиПоСкладу КАК ДокументыПередачиПоСкладу
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПередачаТоваровМеждуОрганизациями.ШтрихкодыУпаковок КАК
	|			ПередачаТоваровМеждуОрганизациямиШтрихкодыУпаковок
	|		ПО ДокументыПередачиПоСкладу.Ссылка = ПередачаТоваровМеждуОрганизациямиШтрихкодыУпаковок.Ссылка
	|ГДЕ
	|	ДокументыПередачиПоСкладу.ПередачаПроведена";
	
	Пакет = Запрос.ВыполнитьПакет();
	Индекс = Пакет.ВГраница();
	ДокументыПередачиПоСкладу = Пакет[Индекс - 2].Выгрузить();
	ДокументыПередачиОСУ = Пакет[Индекс - 1].Выгрузить();
	ДокументыПередачиСКодамиМаркировки = Пакет[Индекс].Выгрузить();
	Содержимое = ЭлектронноеВзаимодействиеИСМП.ЧастичноеСодержимое(ДокументыПередачиСКодамиМаркировки);
	ДокументыПередачиЭДОСоответствие = Новый Соответствие;
	ДокументыПередачиЭДО = Новый Массив;
	Для Каждого СтрокаТаблицы Из Содержимое Цикл
		Если СтрокаТаблицы.ВидПродукции <> Перечисления.ВидыПродукцииИС.Алкогольная
			И СтрокаТаблицы.ВидПродукции <> Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха Тогда
			ДокументыПередачиЭДОСоответствие.Вставить(СтрокаТаблицы.Ссылка, Истина);
		КонецЕсли;
	КонецЦикла;
	Для Каждого КлючИЗначение Из ДокументыПередачиЭДОСоответствие Цикл
		ДокументыПередачиЭДО.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	Для Каждого СтрокаТаблицы Из ДокументыПередачиОСУ Цикл
		Если ДокументыПередачиЭДО.Найти(СтрокаТаблицы.Ссылка) = Неопределено Тогда
			ДокументыПередачиЭДО.Добавить(СтрокаТаблицы.Ссылка);
		КонецЕсли;
	КонецЦикла;
	ДокументыЭДО = ИнтеграцияЭДО.АктуальныеЭлектронныеДокументы(ДокументыПередачиЭДО);
	ДокументыЭДО.Индексы.Добавить("ОбъектУчета");
	ДокументыЭДО.Индексы.Добавить("ЭлектронныйДокумент");
	НезавершенноеЭДО = ЭлектронныеДокументыЭДО.НезавершенныеДокументы(ДокументыЭДО.ВыгрузитьКолонку("ЭлектронныйДокумент"));
	ДокументыСНезавершеннымЭДО = Новый Массив;
	// Незавершенное ЭДО - любое
	Для Каждого ЭлектронныйДокумент Из НезавершенноеЭДО Цикл
		ДокументыСНезавершеннымЭДО.Добавить(ДокументыЭДО.Найти(ЭлектронныйДокумент, "ЭлектронныйДокумент").ОбъектУчета);
	КонецЦикла;
	// Неначатое ЭДО - с явно указанными КМ
	Для Каждого ДокументПередачи Из ДокументыПередачиЭДО Цикл
		Если ДокументыЭДО.Найти(ДокументПередачи, "ОбъектУчета") = Неопределено Тогда
			ДокументыСНезавершеннымЭДО.Добавить(ДокументПередачи);
		КонецЕсли;
	КонецЦикла;
	СостоянияПроверкиГИСМТ = СоответствиеТребованиямГИСМТ.РезультатПроверкиПоМассивуДокументов(ДокументыПередачиЭДО);
	Для Каждого КлючИЗначение Из СостоянияПроверкиГИСМТ Цикл
		Состояние = СоответствиеТребованиямГИСМТ.СостояниеКомандыСоответствиеТребованиямГИСМТ(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		// Любое ЭДО - с ошибками ГИСМТ
		Если Состояние.Видимость
				И Состояние.Статус <> Перечисления.СтатусыОбработкиДокументовИСМП.Завершено Тогда
			ДокументыСНезавершеннымЭДО.Добавить(КлючИЗначение.Ключ);
		// Неначатое ЭДО - со статусом проверки ГИСМТ
		ИначеЕсли ДокументыЭДО.Найти(КлючИЗначение.Ключ, "ОбъектУчета") = Неопределено Тогда
			ДокументыСНезавершеннымЭДО.Добавить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ДокументыПередачиПоСкладу", ДокументыПередачиПоСкладу);
	Запрос.УстановитьПараметр("ДокументыСНезавершеннымЭДО", ДокументыСНезавершеннымЭДО);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПередачаТоваровМеждуОрганизациями.Ссылка КАК Ссылка,
	|	ПередачаТоваровМеждуОрганизациями.Проведен КАК ПередачаПроведена
	|ПОМЕСТИТЬ ДокументыПередачиПоСкладу
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ПередачаТоваровМеждуОрганизациями
	|ГДЕ
	|	ПередачаТоваровМеждуОрганизациями.Ссылка В (&ДокументыПередачиПоСкладу)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументыПередачиПоСкладу.Ссылка КАК Ссылка,
	|	ЛОЖЬ КАК ПередачаПроведена,
	|	ДокументыПередачиПоСкладу.Ссылка КАК Документ,
	|	ЛОЖЬ КАК Проведен,
	|	&ТекстДокументНеПроведен КАК Состояние,
	|	Неопределено КАК Статус,
	|	Неопределено КАК ДальнейшееДействие1,
	|	Неопределено КАК ДальнейшееДействие2,
	|	Неопределено КАК ДальнейшееДействие3
	|ИЗ
	|	ДокументыПередачиПоСкладу КАК ДокументыПередачиПоСкладу
	|ГДЕ
	|	НЕ ДокументыПередачиПоСкладу.ПередачаПроведена
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|	// Незавершенное ЭДО
	|ВЫБРАТЬ
	|	ДокументыПередачиПоСкладу.Ссылка КАК Ссылка,
	|	ИСТИНА КАК ПередачаПроведена,
	|	ДокументыПередачиПоСкладу.Ссылка КАК Документ,
	|	ИСТИНА КАК Проведен,
	|	Неопределено КАК Состояние,
	|	Неопределено КАК Статус,
	|	Неопределено КАК ДальнейшееДействие1,
	|	Неопределено КАК ДальнейшееДействие2,
	|	Неопределено КАК ДальнейшееДействие3
	|ИЗ
	|	ДокументыПередачиПоСкладу КАК ДокументыПередачиПоСкладу
	|ГДЕ
	|	ДокументыПередачиПоСкладу.Ссылка В (&ДокументыСНезавершеннымЭДО)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|	// ЕГАИС
	|ВЫБРАТЬ
	|	ДокументыПередачиПоСкладу.Ссылка КАК Ссылка,
	|	ДокументыПередачиПоСкладу.ПередачаПроведена КАК ПередачаПроведена,
	|	ТТНИсходящаяЕГАИС.Ссылка КАК Документ,
	|	ТТНИсходящаяЕГАИС.Проведен КАК Проведен,
	|	СтатусыДокументовЕГАИС.Статус КАК Состояние,
	|	СтатусыДокументовЕГАИС.Статус КАК Статус,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие1 КАК ДальнейшееДействие1,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие2 КАК ДальнейшееДействие2,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие3 КАК ДальнейшееДействие3
	|ИЗ
	|	ДокументыПередачиПоСкладу КАК ДокументыПередачиПоСкладу
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТТНИсходящаяЕГАИС КАК ТТНИсходящаяЕГАИС
	|		ПО ТТНИсходящаяЕГАИС.ДокументОснование = ДокументыПередачиПоСкладу.Ссылка
	|		И НЕ ТТНИсходящаяЕГАИС.ПометкаУдаления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО СтатусыДокументовЕГАИС.Документ = ТТНИсходящаяЕГАИС.Ссылка
	|ГДЕ НЕ СтатусыДокументовЕГАИС.Статус В (&ТТНИсходящаяЕГАИС)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументыПередачиПоСкладу.Ссылка КАК Ссылка,
	|	ДокументыПередачиПоСкладу.ПередачаПроведена КАК ПередачаПроведена,
	|	ТТНВходящаяЕГАИС.Ссылка КАК Документ,
	|	ТТНВходящаяЕГАИС.Проведен КАК Проведен,
	|	СтатусыДокументовЕГАИС.Статус КАК Состояние,
	|	СтатусыДокументовЕГАИС.Статус КАК Статус,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие1 КАК ДальнейшееДействие1,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие2 КАК ДальнейшееДействие2,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие3 КАК ДальнейшееДействие3
	|ИЗ
	|	ДокументыПередачиПоСкладу КАК ДокументыПередачиПоСкладу
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|		ПО ТТНВходящаяЕГАИС.ДокументОснование = ДокументыПередачиПоСкладу.Ссылка
	|		И НЕ ТТНВходящаяЕГАИС.ПометкаУдаления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО СтатусыДокументовЕГАИС.Документ = ТТНВходящаяЕГАИС.Ссылка
	|ГДЕ НЕ СтатусыДокументовЕГАИС.Статус В (&ТТНВходящаяЕГАИС)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументыПередачиПоСкладу.Ссылка КАК Ссылка,
	|	ДокументыПередачиПоСкладу.ПередачаПроведена КАК ПередачаПроведена,
	|	ЗНАЧЕНИЕ(Документ.ТТНВходящаяЕГАИС.ПустаяСсылка) КАК Документ,
	|	ЛОЖЬ КАК Проведен,
	|	&ТекстДокументНеСоздан КАК Состояние,
	|	Неопределено КАК Статус,
	|	Неопределено КАК ДальнейшееДействие1,
	|	Неопределено КАК ДальнейшееДействие2,
	|	Неопределено КАК ДальнейшееДействие3
	|ИЗ
	|	ДокументыПередачиПоСкладу КАК ДокументыПередачиПоСкладу
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТТНИсходящаяЕГАИС КАК ТТНИсходящаяЕГАИС
	|		ПО ТТНИсходящаяЕГАИС.ДокументОснование = ДокументыПередачиПоСкладу.Ссылка
	|		И НЕ ТТНИсходящаяЕГАИС.ПометкаУдаления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО СтатусыДокументовЕГАИС.Документ = ТТНИсходящаяЕГАИС.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|		ПО ТТНВходящаяЕГАИС.ДокументОснование = ДокументыПередачиПоСкладу.Ссылка
	|		И НЕ ТТНВходящаяЕГАИС.ПометкаУдаления
	|ГДЕ
	|	СтатусыДокументовЕГАИС.Статус В (&ТТНИсходящаяЕГАИС)
	|	И ТТНВходящаяЕГАИС.Ссылка ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|	// ВЕТИС
	|ВЫБРАТЬ
	|	ДокументыПередачиПоСкладу.Ссылка КАК Ссылка,
	|	ДокументыПередачиПоСкладу.ПередачаПроведена КАК ПередачаПроведена,
	|	ИсходящаяТранспортнаяОперацияВЕТИС.Ссылка КАК Документ,
	|	ИсходящаяТранспортнаяОперацияВЕТИС.Проведен КАК Проведен,
	|	СтатусыДокументовВЕТИС.Статус КАК Состояние,
	|	СтатусыДокументовВЕТИС.Статус КАК Статус,
	|	СтатусыДокументовВЕТИС.ДальнейшееДействие1 КАК ДальнейшееДействие1,
	|	СтатусыДокументовВЕТИС.ДальнейшееДействие2 КАК ДальнейшееДействие2,
	|	СтатусыДокументовВЕТИС.ДальнейшееДействие3 КАК ДальнейшееДействие3
	|ИЗ
	|	ДокументыПередачиПоСкладу КАК ДокументыПередачиПоСкладу
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИсходящаяТранспортнаяОперацияВЕТИС КАК ИсходящаяТранспортнаяОперацияВЕТИС
	|		ПО ИсходящаяТранспортнаяОперацияВЕТИС.ДокументОснование = ДокументыПередачиПоСкладу.Ссылка
	|		И НЕ ИсходящаяТранспортнаяОперацияВЕТИС.ПометкаУдаления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовВЕТИС КАК СтатусыДокументовВЕТИС
	|		ПО СтатусыДокументовВЕТИС.Документ = ИсходящаяТранспортнаяОперацияВЕТИС.Ссылка
	|ГДЕ
	|	НЕ ЕСТЬNULL(СтатусыДокументовВЕТИС.Статус, ЛОЖЬ) В (&ИсходящаяТранспортнаяОперацияВЕТИС)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументыПередачиПоСкладу.Ссылка КАК Ссылка,
	|	ДокументыПередачиПоСкладу.ПередачаПроведена КАК ПередачаПроведена,
	|	ВходящаяТранспортнаяОперацияВЕТИС.Ссылка КАК Документ,
	|	ВходящаяТранспортнаяОперацияВЕТИС.Проведен КАК Проведен,
	|	СтатусыДокументовВЕТИС.Статус КАК Состояние,
	|	СтатусыДокументовВЕТИС.Статус КАК Статус,
	|	СтатусыДокументовВЕТИС.ДальнейшееДействие1 КАК ДальнейшееДействие1,
	|	СтатусыДокументовВЕТИС.ДальнейшееДействие2 КАК ДальнейшееДействие2,
	|	СтатусыДокументовВЕТИС.ДальнейшееДействие3 КАК ДальнейшееДействие3
	|ИЗ
	|	ДокументыПередачиПоСкладу КАК ДокументыПередачиПоСкладу
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВходящаяТранспортнаяОперацияВЕТИС КАК ВходящаяТранспортнаяОперацияВЕТИС
	|		ПО ВходящаяТранспортнаяОперацияВЕТИС.ДокументОснование = ДокументыПередачиПоСкладу.Ссылка
	|		И НЕ ВходящаяТранспортнаяОперацияВЕТИС.ПометкаУдаления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовВЕТИС КАК СтатусыДокументовВЕТИС
	|		ПО СтатусыДокументовВЕТИС.Документ = ВходящаяТранспортнаяОперацияВЕТИС.Ссылка
	|ГДЕ
	|	НЕ ЕСТЬNULL(СтатусыДокументовВЕТИС.Статус, ЛОЖЬ) В (&ВходящаяТранспортнаяОперацияВЕТИС)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументыПередачиПоСкладу.Ссылка КАК Ссылка,
	|	ДокументыПередачиПоСкладу.ПередачаПроведена КАК ПередачаПроведена,
	|	ЗНАЧЕНИЕ(Документ.ВходящаяТранспортнаяОперацияВЕТИС.ПустаяСсылка) КАК Документ,
	|	ЛОЖЬ КАК Проведен,
	|	&ТекстДокументНеСоздан КАК Состояние,
	|	Неопределено КАК Статус,
	|	Неопределено КАК ДальнейшееДействие1,
	|	Неопределено КАК ДальнейшееДействие2,
	|	Неопределено КАК ДальнейшееДействие3
	|ИЗ
	|	ДокументыПередачиПоСкладу КАК ДокументыПередачиПоСкладу
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИсходящаяТранспортнаяОперацияВЕТИС КАК ИсходящаяТранспортнаяОперацияВЕТИС
	|		ПО ИсходящаяТранспортнаяОперацияВЕТИС.ДокументОснование = ДокументыПередачиПоСкладу.Ссылка
	|		И НЕ ИсходящаяТранспортнаяОперацияВЕТИС.ПометкаУдаления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовВЕТИС КАК СтатусыДокументовВЕТИС
	|		ПО СтатусыДокументовВЕТИС.Документ = ИсходящаяТранспортнаяОперацияВЕТИС.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВходящаяТранспортнаяОперацияВЕТИС КАК ВходящаяТранспортнаяОперацияВЕТИС
	|		ПО ВходящаяТранспортнаяОперацияВЕТИС.ДокументОснование = ДокументыПередачиПоСкладу.Ссылка
	|		И НЕ ВходящаяТранспортнаяОперацияВЕТИС.ПометкаУдаления
	|ГДЕ
	|	ЕСТЬNULL(СтатусыДокументовВЕТИС.Статус, ЛОЖЬ) В (&ИсходящаяТранспортнаяОперацияВЕТИС)
	|	И ВходящаяТранспортнаяОперацияВЕТИС.Ссылка ЕСТЬ NULL
	|	// ИСМП
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументыПередачиПоСкладу.Ссылка КАК Ссылка,
	|	ДокументыПередачиПоСкладу.ПередачаПроведена КАК ПередачаПроведена,
	|	ОтгрузкаТоваровИСМП.Ссылка КАК Документ,
	|	ОтгрузкаТоваровИСМП.Проведен КАК Проведен,
	|	СтатусыДокументовИСМП.Статус КАК Состояние,
	|	СтатусыДокументовИСМП.Статус КАК Статус,
	|	СтатусыДокументовИСМП.ДальнейшееДействие1 КАК ДальнейшееДействие1,
	|	СтатусыДокументовИСМП.ДальнейшееДействие2 КАК ДальнейшееДействие2,
	|	СтатусыДокументовИСМП.ДальнейшееДействие3 КАК ДальнейшееДействие3
	|ИЗ
	|	ДокументыПередачиПоСкладу КАК ДокументыПередачиПоСкладу
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтгрузкаТоваровИСМП КАК ОтгрузкаТоваровИСМП
	|		ПО ОтгрузкаТоваровИСМП.ДокументОснование = ДокументыПередачиПоСкладу.Ссылка
	|		И ОтгрузкаТоваровИСМП.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха)
	|		И НЕ ОтгрузкаТоваровИСМП.ПометкаУдаления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовИСМП КАК СтатусыДокументовИСМП
	|		ПО СтатусыДокументовИСМП.Документ = ОтгрузкаТоваровИСМП.Ссылка
	|ГДЕ
	|	НЕ ЕСТЬNULL(СтатусыДокументовИСМП.Статус, ЛОЖЬ) В (&ОтгрузкаТоваровИСМП)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументыПередачиПоСкладу.Ссылка КАК Ссылка,
	|	ДокументыПередачиПоСкладу.ПередачаПроведена КАК ПередачаПроведена,
	|	ПриемкаТоваровИСМП.Ссылка КАК Документ,
	|	ПриемкаТоваровИСМП.Проведен КАК Проведен,
	|	СтатусыДокументовИСМП.Статус КАК Состояние,
	|	СтатусыДокументовИСМП.Статус КАК Статус,
	|	СтатусыДокументовИСМП.ДальнейшееДействие1 КАК ДальнейшееДействие1,
	|	СтатусыДокументовИСМП.ДальнейшееДействие2 КАК ДальнейшееДействие2,
	|	СтатусыДокументовИСМП.ДальнейшееДействие3 КАК ДальнейшееДействие3
	|ИЗ
	|	ДокументыПередачиПоСкладу КАК ДокументыПередачиПоСкладу
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемкаТоваровИСМП КАК ПриемкаТоваровИСМП
	|		ПО ПриемкаТоваровИСМП.ДокументОснование = ДокументыПередачиПоСкладу.Ссылка
	|		И ПриемкаТоваровИСМП.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха)
	|		И НЕ ПриемкаТоваровИСМП.ПометкаУдаления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовИСМП КАК СтатусыДокументовИСМП
	|		ПО СтатусыДокументовИСМП.Документ = ПриемкаТоваровИСМП.Ссылка
	|ГДЕ
	|	НЕ ЕСТЬNULL(СтатусыДокументовИСМП.Статус, ЛОЖЬ) В (&ПриемкаТоваровИСМП)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументыПередачиПоСкладу.Ссылка КАК Ссылка,
	|	ДокументыПередачиПоСкладу.ПередачаПроведена КАК ПередачаПроведена,
	|	ЗНАЧЕНИЕ(Документ.ПриемкаТоваровИСМП.ПустаяСсылка) КАК Документ,
	|	ЛОЖЬ КАК Проведен,
	|	&ТекстДокументНеСоздан КАК Состояние,
	|	Неопределено КАК Статус,
	|	Неопределено КАК ДальнейшееДействие1,
	|	Неопределено КАК ДальнейшееДействие2,
	|	Неопределено КАК ДальнейшееДействие3
	|ИЗ
	|	ДокументыПередачиПоСкладу КАК ДокументыПередачиПоСкладу
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтгрузкаТоваровИСМП КАК ОтгрузкаТоваровИСМП
	|		ПО ОтгрузкаТоваровИСМП.ДокументОснование = ОтгрузкаТоваровИСМП.Ссылка
	|		И ОтгрузкаТоваровИСМП.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха)
	|		И НЕ ОтгрузкаТоваровИСМП.ПометкаУдаления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовИСМП КАК СтатусыДокументовИСМП
	|		ПО СтатусыДокументовИСМП.Документ = ОтгрузкаТоваровИСМП.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемкаТоваровИСМП КАК ПриемкаТоваровИСМП
	|		ПО ПриемкаТоваровИСМП.ДокументОснование = ДокументыПередачиПоСкладу.Ссылка
	|		И НЕ ПриемкаТоваровИСМП.ПометкаУдаления
	|ГДЕ
	|	ЕСТЬNULL(СтатусыДокументовИСМП.Статус, ЛОЖЬ) В (&ОтгрузкаТоваровИСМП)
	|	И ПриемкаТоваровИСМП.Ссылка ЕСТЬ NULL
	|	// ЗЕРНО
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументыПередачиПоСкладу.Ссылка КАК Ссылка,
	|	ДокументыПередачиПоСкладу.ПередачаПроведена КАК ПередачаПроведена,
	|	ОформлениеСДИЗЗЕРНО.Ссылка КАК Документ,
	|	ОформлениеСДИЗЗЕРНО.Проведен КАК Проведен,
	|	СтатусыДокументовЗЕРНО.Статус КАК Состояние,
	|	СтатусыДокументовЗЕРНО.Статус КАК Статус,
	|	СтатусыДокументовЗЕРНО.ДальнейшееДействие1 КАК ДальнейшееДействие1,
	|	СтатусыДокументовЗЕРНО.ДальнейшееДействие2 КАК ДальнейшееДействие2,
	|	СтатусыДокументовЗЕРНО.ДальнейшееДействие3 КАК ДальнейшееДействие3
	|ИЗ
	|	ДокументыПередачиПоСкладу КАК ДокументыПередачиПоСкладу
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОформлениеСДИЗЗЕРНО КАК ОформлениеСДИЗЗЕРНО
	|		ПО ОформлениеСДИЗЗЕРНО.ДокументОснование = ДокументыПередачиПоСкладу.Ссылка
	|		И НЕ ОформлениеСДИЗЗЕРНО.ПометкаУдаления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОбъектовСинхронизацииЗЕРНО КАК СтатусыДокументовЗЕРНО
	|		ПО СтатусыДокументовЗЕРНО.ОбъектСинхронизации = ОформлениеСДИЗЗЕРНО.Ссылка
	|		И СтатусыДокументовЗЕРНО.ИдентификаторСтроки = """"
	|ГДЕ
	|	НЕ ЕСТЬNULL(СтатусыДокументовЗЕРНО.Статус, ЛОЖЬ) В (&ОформлениеСДИЗЗЕРНО)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументыПередачиПоСкладу.Ссылка КАК Ссылка,
	|	ДокументыПередачиПоСкладу.ПередачаПроведена КАК ПередачаПроведена,
	|	ПогашениеСДИЗЗЕРНО.Ссылка КАК Документ,
	|	ПогашениеСДИЗЗЕРНО.Проведен КАК Проведен,
	|	СтатусыДокументовЗЕРНО.Статус КАК Состояние,
	|	СтатусыДокументовЗЕРНО.Статус КАК Статус,
	|	СтатусыДокументовЗЕРНО.ДальнейшееДействие1 КАК ДальнейшееДействие1,
	|	СтатусыДокументовЗЕРНО.ДальнейшееДействие2 КАК ДальнейшееДействие2,
	|	СтатусыДокументовЗЕРНО.ДальнейшееДействие3 КАК ДальнейшееДействие3
	|ИЗ
	|	ДокументыПередачиПоСкладу КАК ДокументыПередачиПоСкладу
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПогашениеСДИЗЗЕРНО КАК ПогашениеСДИЗЗЕРНО
	|		ПО ПогашениеСДИЗЗЕРНО.ДокументОснование = ДокументыПередачиПоСкладу.Ссылка
	|		И НЕ ПогашениеСДИЗЗЕРНО.ПометкаУдаления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОбъектовСинхронизацииЗЕРНО КАК СтатусыДокументовЗЕРНО
	|		ПО СтатусыДокументовЗЕРНО.ОбъектСинхронизации = ПогашениеСДИЗЗЕРНО.Ссылка
	|		И СтатусыДокументовЗЕРНО.ИдентификаторСтроки = """"
	|ГДЕ
	|	НЕ ЕСТЬNULL(СтатусыДокументовЗЕРНО.Статус, ЛОЖЬ) В (&ПогашениеСДИЗЗЕРНО)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументыПередачиПоСкладу.Ссылка КАК Ссылка,
	|	ДокументыПередачиПоСкладу.ПередачаПроведена КАК ПередачаПроведена,
	|	ЗНАЧЕНИЕ(Документ.ПогашениеСДИЗЗЕРНО.ПустаяСсылка) КАК Документ,
	|	ЛОЖЬ КАК Проведен,
	|	&ТекстДокументНеСоздан КАК Состояние,
	|	Неопределено КАК Статус,
	|	Неопределено КАК ДальнейшееДействие1,
	|	Неопределено КАК ДальнейшееДействие2,
	|	Неопределено КАК ДальнейшееДействие3
	|ИЗ
	|	ДокументыПередачиПоСкладу КАК ДокументыПередачиПоСкладу
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОформлениеСДИЗЗЕРНО КАК ОформлениеСДИЗЗЕРНО
	|		ПО ОформлениеСДИЗЗЕРНО.ДокументОснование = ДокументыПередачиПоСкладу.Ссылка
	|		И НЕ ОформлениеСДИЗЗЕРНО.ПометкаУдаления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОбъектовСинхронизацииЗЕРНО КАК СтатусыДокументовЗЕРНО
	|		ПО СтатусыДокументовЗЕРНО.ОбъектСинхронизации = ОформлениеСДИЗЗЕРНО.Ссылка
	|		И СтатусыДокументовЗЕРНО.ИдентификаторСтроки = """"
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПогашениеСДИЗЗЕРНО КАК ПогашениеСДИЗЗЕРНО
	|		ПО ПогашениеСДИЗЗЕРНО.ДокументОснование = ДокументыПередачиПоСкладу.Ссылка
	|		И НЕ ПогашениеСДИЗЗЕРНО.ПометкаУдаления
	|ГДЕ
	|	ЕСТЬNULL(СтатусыДокументовЗЕРНО.Статус, ЛОЖЬ) В (&ОформлениеСДИЗЗЕРНО)
	|	И ПогашениеСДИЗЗЕРНО.Ссылка ЕСТЬ NULL
	|	// САТУРН - одна накладная
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументыПередачиПоСкладу.Ссылка КАК Ссылка,
	|	ДокументыПередачиПоСкладу.ПередачаПроведена КАК ПередачаПроведена,
	|	НакладнаяСАТУРН.Ссылка КАК Документ,
	|	НакладнаяСАТУРН.Проведен КАК Проведен,
	|	СтатусыДокументовСАТУРН.Статус КАК Состояние,
	|	СтатусыДокументовСАТУРН.Статус КАК Статус,
	|	СтатусыДокументовСАТУРН.ДальнейшееДействие1 КАК ДальнейшееДействие1,
	|	СтатусыДокументовСАТУРН.ДальнейшееДействие2 КАК ДальнейшееДействие2,
	|	СтатусыДокументовСАТУРН.ДальнейшееДействие3 КАК ДальнейшееДействие3
	|ИЗ
	|	ДокументыПередачиПоСкладу КАК ДокументыПередачиПоСкладу
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НакладнаяСАТУРН КАК НакладнаяСАТУРН
	|		ПО НакладнаяСАТУРН.ДокументОснование = ДокументыПередачиПоСкладу.Ссылка
	|		И НЕ НакладнаяСАТУРН.ПометкаУдаления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовСАТУРН КАК СтатусыДокументовСАТУРН
	|		ПО СтатусыДокументовСАТУРН.Документ = НакладнаяСАТУРН.Ссылка
	|		И СтатусыДокументовСАТУРН.ИдентификаторСтроки = """"
	|ГДЕ
	|	НЕ ЕСТЬNULL(СтатусыДокументовСАТУРН.Статус, ЛОЖЬ) В (&НакладнаяСАТУРН)
	|ИТОГИ
	|	МАКСИМУМ(ПередачаПроведена) КАК ПередачаПроведена
	|ПО
	|	Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		
		ОписаниеПередачи = РеквизитыСтрокиДокументыПередачи();
		ОписаниеПередачи.Ссылка = Выборка.Ссылка;
		ОписаниеПередачи.Проведен = Выборка.ПередачаПроведена;
		Результат.Добавить(ОписаниеПередачи);
		ПодчиненныеДокументы = Выборка.Выбрать();
		
		Пока ПодчиненныеДокументы.Следующий() Цикл
			Если ПодчиненныеДокументы.Документ <> ОписаниеПередачи.Ссылка Тогда
				Подчиненный = РеквизитыСтрокиДокументыПередачи();
				ЗаполнитьЗначенияСвойств(Подчиненный, ПодчиненныеДокументы);
				Подчиненный.Ссылка = ПодчиненныеДокументы.Документ;
				Результат.Добавить(Подчиненный);
			КонецЕсли;
		КонецЦикла;
		
		// Нужен электронный документооборот
		Если ДокументыПередачиЭДО.Найти(ОписаниеПередачи.Ссылка)<>Неопределено Тогда
			
			ДокументыЭДОПоДокументуУчета = ДокументыЭДО.НайтиСтроки(Новый Структура("ОбъектУчета", ОписаниеПередачи.Ссылка));
			Если ДокументыЭДОПоДокументуУчета.Количество() = 0 Тогда
				ОписаниеПередачи.Состояние = НСтр("ru = 'Не начат'");
			Иначе
				Для Каждого СтрокаТЧ Из ДокументыЭДОПоДокументуУчета Цикл
					Если НезавершенноеЭДО.Найти(СтрокаТЧ.ЭлектронныйДокумент)<>Неопределено Тогда
						ОписаниеПередачи.Состояние = НСтр("ru = 'В работе'");
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если ПустаяСтрока(ОписаниеПередачи.Состояние) Тогда
				ОписаниеПередачи.Состояние = НСтр("ru = 'Завершен'");
			КонецЕсли;
			
		КонецЕсли;
		
		СостояниеПроверки = СостоянияПроверкиГИСМТ[Выборка.Ссылка];
		СтатусГИСМТ = СоответствиеТребованиямГИСМТ.СостояниеКомандыСоответствиеТребованиямГИСМТ(
			Выборка.Ссылка, СостояниеПроверки);
		Если СтатусГИСМТ.Видимость
			И СтатусГИСМТ.Заголовок <> Перечисления.СтатусыОбработкиДокументовИСМП.Завершено Тогда
			Если ОписаниеПередачи.Состояние = Неопределено Тогда
				ОписаниеПередачи.Состояние = СтатусГИСМТ.Заголовок;
			Иначе
				ОписаниеПередачи.Состояние = ОписаниеПередачи.Состояние + ", " + СтатусГИСМТ.Заголовок;
			КонецЕсли;
		КонецЕсли;
		
		Если ПустаяСтрока(ОписаниеПередачи.Состояние) Тогда
			ОписаниеПередачи.Состояние = НСтр("ru = 'Действия не требуются'");
		КонецЕсли;
		
	КонецЦикла;
	
	Если Результат.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	//Если остались только документы передачи между организациями, проверим штрихкоды упаковок
	ОсталосьТолькоОтражениеЭДО = Истина;
	ДокументыВПроцессеПередачи = Новый Массив;
	Для Каждого СтрокаТЧ Из Результат Цикл
		Если ТипЗнч(СтрокаТЧ.Ссылка) = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями")Тогда
			ДокументыВПроцессеПередачи.Добавить(СтрокаТЧ.Ссылка);
		Иначе
			ОсталосьТолькоОтражениеЭДО = Ложь;
		КонецЕсли;
	КонецЦикла;
	Если ОсталосьТолькоОтражениеЭДО Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", ДокументыВПроцессеПередачи);
		Запрос.УстановитьПараметр("ШтрихкодУпаковки", ОбработкаОбъект.ШтрихкодыУпаковок.ВыгрузитьКолонку("ШтрихкодУпаковки"));
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ШтрихкодыУпаковок.Ссылка
		|ИЗ
		|	Документ.ПередачаТоваровМеждуОрганизациями.ШтрихкодыУпаковок КАК ШтрихкодыУпаковок
		|ГДЕ
		|	ШтрихкодыУпаковок.Ссылка В(&Ссылка)
		|	И ШтрихкодыУпаковок.ШтрихкодУпаковки В(&ШтрихкодУпаковки)";
		Если Запрос.Выполнить().Пустой() Тогда
			Результат.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Товары к расчету передачи: возвращает все товары подсистем БГосИС указанных документов.
// 
// Параметры:
//  Документы - Массив Из ОпределяемыйТип.ДокументыСПредварительнойПередачейМеждуОрганизациями - документы-основания
// 
// Возвращаемое значение:
//  ТаблицаЗначений - все товары подсистем БГосИС указанных документов:
//  * ОрганизацияПолучатель - СправочникСсылка.Организации - организация документа-основания 
//  * Номенклатура - СправочникСсылка.Номенклатура - 
//  * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - 
//  * Серия - СправочникСсылка.СерииНоменклатуры - 
//  * Количество - Число - 
//  * ЕГАИС  - Булево - флаг подсистемы для номенклатуры
//  * ВЕТИС  - Булево - флаг подсистемы для номенклатуры
//  * ИСМП   - Булево - флаг подсистемы для номенклатуры
//  * ЗЕРНО  - Булево - флаг подсистемы для номенклатуры
//  * САТУРН - Булево - флаг подсистемы для номенклатуры.

Функция ТоварыКРасчетуПередачиМеждуОрганизациями(Документы, Склад) Экспорт
	
	ИспользуемыеОУ = Новый Массив; //Массив Из ПеречислениеСсылка.ОсобенностиУчетаНоменклатуры
	ПартионныеОУ = Новый Массив; //Массив Из ПеречислениеСсылка.ОсобенностиУчетаНоменклатуры
	Запрос = Новый Запрос;
	
	ЕГАИС  = ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции");
	ВЕТИС  = ПолучитьФункциональнуюОпцию("ВестиУчетПодконтрольныхТоваровВЕТИС");
	ИСМП   = ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП");
	ЗЕРНО  = ПолучитьФункциональнуюОпцию("ВестиУчетЗернаИПродуктовПереработкиЗЕРНО");
	САТУРН = ПолучитьФункциональнуюОпцию("ВестиУчетПестицидовАгрохимикатовТукосмесейСАТУРН");
	
	Массив = Новый Массив; //Массив Из ПеречислениеСсылка.ОсобенностиУчетаНоменклатуры
	Если ЕГАИС Тогда
		ИспользуемыеОУ.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция);
		Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция);
		Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.Пиво);
		Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ПивоВПотребительскихУпаковках);
	КонецЕсли;
	Запрос.УстановитьПараметр("ЕГАИС", Массив);
	
	Массив= Новый Массив;
	Если ИСМП Тогда
		Для Каждого ВидПродукции Из ОбщегоНазначенияИСМПВызовСервера.УчитываемыеВидыМаркируемойПродукции() Цикл
			Массив.Добавить(ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукции));
			ИспользуемыеОУ.Добавить(ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукции));
		КонецЦикла;
	КонецЕсли;
	Запрос.УстановитьПараметр("ИСМП", Массив);
	
	Массив = Новый Массив;
	Если ВЕТИС Тогда
		ИспользуемыеОУ.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияВЕТИС);
		Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияВЕТИС);
		Для Каждого ВидПродукции Из ИнтеграцияИСКлиентСервер.ВидыПродукцииПодконтрольныеВЕТИС() Цикл
			Массив.Добавить(ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукции));
		КонецЦикла;
	КонецЕсли;
	Запрос.УстановитьПараметр("ВЕТИС", Массив);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПартионныеОУ, Массив);
	
	Массив = Новый Массив;
	Если ЗЕРНО Тогда
		ИспользуемыеОУ.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.Зерно);
		ИспользуемыеОУ.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ПродуктыПереработкиЗерна);
		Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.Зерно);
		Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ПродуктыПереработкиЗерна);
		Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ЗерноВЕТИС);
		Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ПродуктыПереработкиЗернаВЕТИС);
	КонецЕсли;
	Запрос.УстановитьПараметр("ЗЕРНО", Массив);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПартионныеОУ, Массив);
	
	Если ЗЕРНО И ВЕТИС Тогда
		ИспользуемыеОУ.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ЗерноВЕТИС);
		ИспользуемыеОУ.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ПродуктыПереработкиЗернаВЕТИС);
	КонецЕсли;
	
	Массив = Новый Массив;
	Если САТУРН Тогда
		ИспользуемыеОУ.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияСАТУРН);
		Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияСАТУРН);
		ПартионныеОУ.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияСАТУРН);
	КонецЕсли;
	Запрос.УстановитьПараметр("САТУРН", Массив);
	
	Запрос.УстановитьПараметр("Документ", Документы);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ОсобенностьУчета", ИспользуемыеОУ);
	Запрос.УстановитьПараметр("ОсобенностьУчетаПартионнаяПродукция", ПартионныеОУ);
	
	МассивТекстовЗапросов = Новый Массив; //Массив Из Строка - 
	
	МассивТекстовЗапросов.Добавить(ИнтеграцияИСУТ.ТекстЗапросаРеализацияТоваровУслуг());
	МассивТекстовЗапросов.Добавить(ИнтеграцияИС.РазделительЗапросовВПакете());
	МассивТекстовЗапросов.Добавить(ИнтеграцияИСУТ.ТекстЗапросаВозвратТоваровПоставщику());
	МассивТекстовЗапросов.Добавить(ИнтеграцияИС.РазделительЗапросовВПакете());
	МассивТекстовЗапросов.Добавить(ИнтеграцияИСУТ.ТекстЗапросаВнутреннееПотребление());
	МассивТекстовЗапросов.Добавить(ИнтеграцияИС.РазделительЗапросовВПакете());
	МассивТекстовЗапросов.Добавить(ИнтеграцияИСУТ.ТекстЗапросаКорректировкаРеализации());
	МассивТекстовЗапросов.Добавить(ИнтеграцияИС.РазделительЗапросовВПакете());
	МассивТекстовЗапросов.Добавить(ИнтеграцияИСУТ.ТекстЗапросаОтчетОРозничныхПродажах());
	МассивТекстовЗапросов.Добавить(ИнтеграцияИС.РазделительЗапросовВПакете());
	МассивТекстовЗапросов.Добавить(ИнтеграцияИСУТ.ТекстЗапросаПередачаТоваровХранителю());
	МассивТекстовЗапросов.Добавить(ИнтеграцияИС.РазделительЗапросовВПакете());
	МассивТекстовЗапросов.Добавить(ИнтеграцияИСУТ.ТекстЗапросаПеремещениеТоваров());
	МассивТекстовЗапросов.Добавить(ИнтеграцияИС.РазделительЗапросовВПакете());
	МассивТекстовЗапросов.Добавить(ИнтеграцияИСУТ.ТекстЗапросаСборкаТоваров());
	МассивТекстовЗапросов.Добавить(ИнтеграцияИС.РазделительЗапросовВПакете());
	
	
	МассивТекстовЗапросов.Добавить(ТекстЗапросаИтог("ТаблицаТоварыРеализацияТоваровУслуг", Истина));
	МассивТекстовЗапросов.Добавить(ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	МассивТекстовЗапросов.Добавить(ТекстЗапросаИтог("ТаблицаТоварыВозвратТоваровПоставщику"));
	МассивТекстовЗапросов.Добавить(ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	МассивТекстовЗапросов.Добавить(ТекстЗапросаИтог("ТаблицаТоварыВнутреннееПотребление"));
	МассивТекстовЗапросов.Добавить(ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	МассивТекстовЗапросов.Добавить(ТекстЗапросаИтог("ТаблицаТоварыКорректировкаРеализации"));
	МассивТекстовЗапросов.Добавить(ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	МассивТекстовЗапросов.Добавить(ТекстЗапросаИтог("ТаблицаТоварыОтчетОРозничныхПродажах"));
	МассивТекстовЗапросов.Добавить(ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	МассивТекстовЗапросов.Добавить(ТекстЗапросаИтог("ТаблицаТоварыПередачаТоваровХранителю"));
	МассивТекстовЗапросов.Добавить(ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	МассивТекстовЗапросов.Добавить(ТекстЗапросаИтог("ТаблицаТоварыПеремещениеТоваров"));
	МассивТекстовЗапросов.Добавить(ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	МассивТекстовЗапросов.Добавить(ТекстЗапросаИтог("ТаблицаТоварыСборкаТоваров"));
	
	
	МассивТекстовЗапросов.Добавить(ИнтеграцияИС.РазделительЗапросовВПакете());
	МассивТекстовЗапросов.Добавить(ТекстЗапросаСвернутыеТоварыРасход());
	
	Запрос.Текст = СтрСоединить(МассивТекстовЗапросов);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Штрихкоды упаковок к расчету передачи: возвращает все несобственные штрихкоды упаковок (расход) указанных документов.
// 
// Параметры:
//  Документы - Массив Из ОпределяемыйТип.ДокументыСПредварительнойПередачейМеждуОрганизациями - документы-основания
//  НастройкиЕГАИС - ТаблицаЗначений - настройки ЕГАИС текущего склада
// 
// Возвращаемое значение:
//  ТаблицаЗначений - штрихкоды упаковок к передаче:
//   * ШтрихкодУпаковки - СправочникСсылка.ШтрихкодыУпаковокТоваров - код маркировки (или упаковки),
//   * Организация - СправочникСсылка.Организации - текущий владелец кода маркировки,
//   * ОрганизацияПолучатель - СправочникСсылка.Организации - организация-потребитель кода маркировки.
//
Функция ШтрихкодыУпаковокКПередачеМеждуОрганизациями(Документы, НастройкиЕГАИС) Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ШтрихкодУпаковки", Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	Результат.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Результат.Колонки.Добавить("ОрганизацияПолучатель", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документы", Документы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Штрихкоды.ШтрихкодУпаковки КАК ШтрихкодУпаковки,
	|	Штрихкоды.Ссылка.Организация КАК ОрганизацияПолучатель
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ШтрихкодыУпаковок КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Ссылка В (&Документы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Штрихкоды.ШтрихкодУпаковки КАК ШтрихкодУпаковки,
	|	Штрихкоды.Ссылка.Организация КАК ОрганизацияПолучатель
	|ИЗ
	|	Документ.ВнутреннееПотребление.ШтрихкодыУпаковок КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Ссылка В (&Документы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Штрихкоды.ШтрихкодУпаковки КАК ШтрихкодУпаковки,
	|	Штрихкоды.Ссылка.Организация КАК ОрганизацияПолучатель
	|ИЗ
	|	Документ.СборкаТоваров.ШтрихкодыУпаковок КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Ссылка В (&Документы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Штрихкоды.ШтрихкодУпаковки КАК ШтрихкодУпаковки,
	|	Штрихкоды.Ссылка.Организация КАК ОрганизацияПолучатель
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.ШтрихкодыУпаковок КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Ссылка В (&Документы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Штрихкоды.ШтрихкодУпаковки КАК ШтрихкодУпаковки,
	|	Штрихкоды.Ссылка.Организация КАК ОрганизацияПолучатель
	|ИЗ
	|	Документ.ПеремещениеТоваров.ШтрихкодыУпаковок КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Ссылка В (&Документы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Штрихкоды.ШтрихкодУпаковки КАК ШтрихкодУпаковки,
	|	Штрихкоды.Ссылка.Организация КАК ОрганизацияПолучатель
	|ИЗ
	|	Документ.ПередачаТоваровХранителю.ШтрихкодыУпаковок КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Ссылка В (&Документы)
	|



	|";
	ШтрихкодыУпаковок = Запрос.Выполнить().Выгрузить();
	ШтрихкодыУпаковок.Индексы.Добавить("ШтрихкодУпаковки");
	
	МаркированныеТовары = ШтрихкодированиеИС.ВложенныеШтрихкодыИзвестныхУпаковок(ШтрихкодыУпаковок).МаркированныеТовары;
	МаркированныеТовары.Индексы.Добавить("ШтрихкодУпаковки");
	Запрос.УстановитьПараметр("ШтрихкодУпаковки", МаркированныеТовары.ВыгрузитьКолонку("ШтрихкодУпаковки"));
	Запрос.УстановитьПараметр("НастройкиЕГАИС", МаркированныеТовары.ВыгрузитьКолонку("ШтрихкодУпаковки"));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КодыМаркировкиКПередачеМеждуОрганизациями.ШтрихкодУпаковки,
	|	КодыМаркировкиКПередачеМеждуОрганизациями.Организация,
	|	КодыМаркировкиКПередачеМеждуОрганизациями.ОрганизацияПолучатель
	|ИЗ
	|	РегистрСведений.КодыМаркировкиКПередачеМеждуОрганизациями КАК КодыМаркировкиКПередачеМеждуОрганизациями
	|ГДЕ
	|	КодыМаркировкиКПередачеМеждуОрганизациями.ШтрихкодУпаковки В (&ШтрихкодУпаковки)
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АкцизныеМаркиЕГАИС.ОрганизацияЕГАИС,
	|	АкцизныеМаркиЕГАИС.АкцизнаяМарка КАК ШтрихкодУпаковки
	|ИЗ
	|	РегистрСведений.АкцизныеМаркиЕГАИС КАК АкцизныеМаркиЕГАИС
	|ГДЕ
	|	АкцизныеМаркиЕГАИС.АкцизнаяМарка В (&ШтрихкодУпаковки)
	|	И АкцизныеМаркиЕГАИС.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыАкцизныхМарок.ВНаличии)";
	
	Пакет = Запрос.ВыполнитьПакет();
	РаспределенныеКоды = Новый Соответствие;
	КодыИСМП = Пакет[0].Выбрать();
	Пока КодыИСМП.Следующий() Цикл
		СтрокаКода = МаркированныеТовары.Найти(КодыИСМП.ШтрихкодУпаковки, "ШтрихкодУпаковки");
		КодДокумента = ?(ЗначениеЗаполнено(СтрокаКода.УпаковкаВерхнегоУровня), СтрокаКода.УпаковкаВерхнегоУровня, СтрокаКода.ШтрихкодУпаковки);
		Если РаспределенныеКоды.Получить(КодДокумента) = Неопределено Тогда
			РаспределенныеКоды.Вставить(КодДокумента, Истина);
			НоваяСтрока = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, КодыИСМП);
		КонецЕсли;
	КонецЦикла;
	
	Если НастройкиЕГАИС.Количество() Тогда
		КодыЕГАИС = Пакет[1].Выбрать();
		Пока КодыЕГАИС.Следующий() Цикл
			СтрокаКода = МаркированныеТовары.Найти(КодыЕГАИС.ШтрихкодУпаковки, "ШтрихкодУпаковки");
			КодДокумента = ?(ЗначениеЗаполнено(СтрокаКода.УпаковкаВерхнегоУровня), СтрокаКода.УпаковкаВерхнегоУровня, СтрокаКода.ШтрихкодУпаковки);
			Если РаспределенныеКоды.Получить(КодДокумента) = Неопределено Тогда
				РаспределенныеКоды.Вставить(КодДокумента, Истина);
				ОрганизацияШтрихкода = ШтрихкодыУпаковок.Найти(КодДокумента.ШтрихкодУпаковки, "ШтрихкодУпаковки").ОрганизацияПолучатель;
				Настройка = НастройкиЕГАИС.Найти(КодыЕГАИС.ОрганизацияЕГАИС, "ОрганизацияЕГАИС");
				Если Настройка <> Неопределено И Настройка.Организация <> ОрганизацияШтрихкода Тогда
					НоваяСтрока = Результат.Добавить();
					НоваяСтрока.ШтрихкодУпаковки = КодДокумента.ШтрихкодУпаковки;
					НоваяСтрока.Организация = Настройка.Организация;
					НоваяСтрока.ОрганизацияПолучатель = ОрганизацияШтрихкода;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Структура поиска товары.
// 
// Возвращаемое значение:
//  Структура - Структура поиска товары:
// * Номенклатура - СправочникСсылка.Номенклатура - 
// * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - 
// * Серия - СправочникСсылка.СерииНоменклатуры - 
Функция СтруктураПоискаТовары() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Номенклатура",   Справочники.Номенклатура.ПустаяСсылка());
	Результат.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	Результат.Вставить("Серия",          Справочники.СерииНоменклатуры.ПустаяСсылка());
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДокументыПередачи

Функция РеквизитыСтрокиДокументыПередачи()
	
	Результат = Новый Структура;
	Результат.Вставить("Ссылка");
	Результат.Вставить("Проведен");
	Результат.Вставить("Состояние");
	Результат.Вставить("Статус");
	Результат.Вставить("ДальнейшееДействие1");
	Результат.Вставить("ДальнейшееДействие2");
	Результат.Вставить("ДальнейшееДействие3");
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СтатусОформленияДокументаОснования

Процедура ЗаполнитьСтатусОформленияОснования(РеквизитыСтроки, СтатусКодыКПередаче, СтатусТребуетсяОформлениеИС)
	
	РеквизитыСтроки.КодыМаркировкиКПередаче = СтатусКодыКПередаче;
	РеквизитыСтроки.ТребуетсяОформлениеИС = СтатусТребуетсяОформлениеИС;
	
	Если СтатусКодыКПередаче = Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеПроверялась
		Или СтатусТребуетсяОформлениеИС = Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеПроверялась
		Или (СтатусКодыКПередаче = Перечисления.СтатусыПроверкиНаличияПродукцииИС.Отсутствует
			И СтатусТребуетсяОформлениеИС = Перечисления.СтатусыПроверкиНаличияПродукцииИС.Отсутствует) Тогда
		РеквизитыСтроки.Статус = Истина;
	Иначе
		РеквизитыСтроки.Статус = Ложь;
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьСтатусыОформления(ДокументОснование, ПостфиксРегистра, ПостфиксПеречисления, СтатусТребуетсяОформлениеИС, ОформленыДокументыИС)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Основание", ДокументОснование);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтатусыОформления.СтатусОформления
		|ИЗ
		|	РегистрСведений.СтатусыОформленияДокументовЕГАИС КАК СтатусыОформления
		|ГДЕ
		|	СтатусыОформления.Основание = &Основание
		|	И НЕ СтатусыОформления.Архивный";
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст, "СтатусыОформленияДокументовЕГАИС", СтрШаблон("СтатусыОформленияДокументов%1", ПостфиксРегистра));
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПеречислениеМенеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("Перечисление.СтатусыОформленияДокументов" + ПостфиксПеречисления);
	Пока Выборка.Следующий() Цикл
		Если Выборка.СтатусОформления = ПеречислениеМенеджер.НеОформлено Тогда
			СтатусТребуетсяОформлениеИС = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии;
		ИначеЕсли Выборка.СтатусОформления <> ПеречислениеМенеджер.НеТребуется
			И Выборка.СтатусОформления <> ПеречислениеМенеджер.ТребуетсяСопоставлениеНоменклатуры Тогда
			ОформленыДокументыИС = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ДокументыКОформлению(Склад, РеквизитСклад, ПостфиксРегистра, СтатусТребуетсяОформление)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ТребуетсяОформление", СтатусТребуетсяОформление);
	Запрос.УстановитьПараметр("ОтборПоСкладу", Истина);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтатусыОформления.Основание КАК Основание
		|ИЗ
		|	РегистрСведений.СтатусыОформленияДокументовЕГАИС КАК СтатусыОформления
		|ГДЕ
		|	&ОтборПоСкладу
		|	И СтатусыОформления.СтатусОформления = &ТребуетсяОформление
		|	И НЕ СтатусыОформления.Архивный";
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст, "СтатусыОформленияДокументовЕГАИС", СтрШаблон("СтатусыОформленияДокументов%1", ПостфиксРегистра));
	Если ЗначениеЗаполнено(РеквизитСклад) Тогда
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст, "&ОтборПоСкладу", СтрШаблон("СтатусыОформления.%1 = &Склад", РеквизитСклад));
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Основание");
	
КонецФункции

Процедура ПроверитьДокументыКОформлению(Документы, ПостфиксРегистра, СтатусТребуетсяОформлениеИС)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Основание", Документы);
	Запрос.УстановитьПараметр("ТребуетсяОформление", СтатусТребуетсяОформлениеИС);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтатусыОформления.Основание КАК Основание
		|ИЗ
		|	РегистрСведений.СтатусыОформленияДокументовЕГАИС КАК СтатусыОформления
		|ГДЕ
		|	СтатусыОформления.Основание В(&Основание)
		|	И СтатусыОформления.СтатусОформления <> &ТребуетсяОформление
		|	И НЕ СтатусыОформления.Архивный";
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст, "СтатусыОформленияДокументовЕГАИС", СтрШаблон("СтатусыОформленияДокументов%1", ПостфиксРегистра));
	
	ЧастичноОбработанныеДокументы = Запрос.Выполнить().Выбрать();
	Пока ЧастичноОбработанныеДокументы.Следующий() Цикл
		Документы.Удалить(Документы.Найти(ЧастичноОбработанныеДокументы.Основание));
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтфильтроватьОбъектыПоСкладу(Документы, Склад)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Документы);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВнутреннееПотребление.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВнутреннееПотребление КАК ВнутреннееПотребление
	|ГДЕ
	|	ВнутреннееПотребление.Склад = &Склад
	|	И ВнутреннееПотребление.Ссылка В (&Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратТоваровПоставщику.Ссылка
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|ГДЕ
	|	ВозвратТоваровПоставщику.Склад = &Склад
	|	И ВозвратТоваровПоставщику.Ссылка В (&Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаРеализации.Ссылка
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|ГДЕ
	|	КорректировкаРеализации.Склад = &Склад
	|	И КорректировкаРеализации.Ссылка В (&Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаРеализации.Ссылка
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|ГДЕ
	|	КорректировкаРеализации.Склад = &Склад
	|	И КорректировкаРеализации.Ссылка В (&Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтчетОРозничныхПродажах.Ссылка
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|ГДЕ
	|	ОтчетОРозничныхПродажах.Склад = &Склад
	|	И ОтчетОРозничныхПродажах.Ссылка В (&Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПередачаТоваровХранителю.Ссылка
	|ИЗ
	|	Документ.ПередачаТоваровХранителю КАК ПередачаТоваровХранителю
	|ГДЕ
	|	ПередачаТоваровХранителю.Склад = &Склад
	|	И ПередачаТоваровХранителю.Ссылка В (&Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПеремещениеТоваров.Ссылка
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.СкладОтправитель = &Склад
	|	И ПеремещениеТоваров.Ссылка В (&Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Склад = &Склад
	|	И РеализацияТоваровУслуг.Ссылка В (&Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СборкаТоваров.Ссылка
	|ИЗ
	|	Документ.СборкаТоваров КАК СборкаТоваров
	|ГДЕ
	|	СборкаТоваров.Склад = &Склад
	|	И СборкаТоваров.Ссылка В (&Ссылка)
	|



	|";
	Документы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецПроцедуры

Процедура ОтфильтроватьОбъектыПоТипу(Документы)
	
	Результат = Новый Массив;
	ОписаниеТипов = Метаданные.ОпределяемыеТипы.ДокументыСПредварительнойПередачейМеждуОрганизациями.Тип;
	Для Каждого ДокументСсылка Из Документы Цикл
		Если ОписаниеТипов.СодержитТип(ТипЗнч(ДокументСсылка)) Тогда
			Результат.Добавить(ДокументСсылка);
		КонецЕсли;
	КонецЦикла;
	Документы = Результат;
	
КонецПроцедуры

#КонецОбласти

#Область ПодконтрольныеТоварыДокументовОснованийРасход

#Область СуммированиеТаблицыТовары

// Текст запроса итог.
// 
// Параметры:
//  ИмяВТ - Строка - Имя ВТ
//  Поместить - Булево - признак создания итоговой ВТ
// Возвращаемое значение:
//  Строка - текст запроса по типу документа
Функция ТекстЗапросаИтог(ИмяВТ, Поместить = Ложь)
	
	Результат = 
	"
	|ВЫБРАТЬ
	|	ТаблицаТовары.ОрганизацияПолучатель КАК ОрганизацияПолучатель,
	|	ТаблицаТовары.Номенклатура      КАК Номенклатура,
	|	ТаблицаТовары.Характеристика    КАК Характеристика,
	|	ТаблицаТовары.Серия             КАК Серия,
	|	СУММА(ТаблицаТовары.Количество) КАК Количество,
	|	СправочникНоменклатура.ОсобенностьУчета В (&ЕГАИС) КАК ЕГАИС,
	|	(СправочникНоменклатура.ОсобенностьУчета В (&ВЕТИС)
	|		ИЛИ СправочникНоменклатура.ПодконтрольнаяПродукцияВЕТИС) КАК ВЕТИС,
	|	СправочникНоменклатура.ОсобенностьУчета В (&ИСМП) КАК ИСМП,
	|	СправочникНоменклатура.ОсобенностьУчета В (&ЗЕРНО) КАК ЗЕРНО,
	|	СправочникНоменклатура.ОсобенностьУчета В (&САТУРН) КАК САТУРН
	|ПОМЕСТИТЬ ТоварыИтог
	|ИЗ
	|	ТаблицаТоварыРеализацияТоваровУслуг КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.ОрганизацияПолучатель,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Серия,
	|	СправочникНоменклатура.Ссылка
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаТовары.Количество) > 0";
	Результат = СтрЗаменить(Результат, "ТаблицаТоварыРеализацияТоваровУслуг", ИмяВТ);
	Если Не Поместить Тогда
		Результат = СтрЗаменить(Результат, "ПОМЕСТИТЬ ТоварыИтог", "");
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаСвернутыеТоварыРасход()
	
	Результат = 
	"
	|ВЫБРАТЬ
	|	ТоварыИтог.ОрганизацияПолучатель КАК ОрганизацияПолучатель,
	|	ТоварыИтог.Номенклатура          КАК Номенклатура,
	|	ТоварыИтог.Характеристика        КАК Характеристика,
	|	ТоварыИтог.Серия                 КАК Серия,
	|	ТоварыИтог.ЕГАИС                 КАК ЕГАИС,
	|	ТоварыИтог.ВЕТИС                 КАК ВЕТИС,
	|	ТоварыИтог.ИСМП                  КАК ИСМП,
	|	ТоварыИтог.ЗЕРНО                 КАК ЗЕРНО,
	|	ТоварыИтог.САТУРН                КАК САТУРН,
	|	СУММА(ТоварыИтог.Количество)     КАК Количество
	|ИЗ
	|	ТоварыИтог КАК ТоварыИтог
	|СГРУППИРОВАТЬ ПО
	|	ТоварыИтог.ОрганизацияПолучатель,
	|	ТоварыИтог.Номенклатура,
	|	ТоварыИтог.Характеристика,
	|	ТоварыИтог.Серия,
	|	ТоварыИтог.ЕГАИС,
	|	ТоварыИтог.ВЕТИС,
	|	ТоварыИтог.ИСМП,
	|	ТоварыИтог.ЗЕРНО,
	|	ТоварыИтог.САТУРН
	|";
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Распределение

// Возвращает соответствие организаций, передача партионных товаров между которыми не будет выполняться
// 
// Параметры:
//  НастройкиПередачиМеждуОрганизациями - ОбработкаТабличнаяЧасть.ОформлениеПередачиТоваровМеждуОрганизациями.НастройкиПередачиМеждуОрганизациями - Настройки передачи между организациями
// 
// Возвращаемое значение:
//  Соответствие Из СправочникСсылка.Организации - соответствие организаций между которыми передача запрещена настройками
//
Функция ПередачаЗапрещена(НастройкиПередачиМеждуОрганизациями)
	
	Результат = Новый Соответствие;
	Для Каждого СтрокаТЧ Из НастройкиПередачиМеждуОрганизациями Цикл
		Если СтрокаТЧ.Запретить Тогда
			СтрокаСоответствия = Результат.Получить(СтрокаТЧ.ОрганизацияПолучатель);
			Если СтрокаСоответствия = Неопределено Тогда
				СтрокаСоответствия = Новый Соответствие;
				Результат.Вставить(СтрокаТЧ.ОрганизацияПолучатель, СтрокаСоответствия);
			КонецЕсли;
			СтрокаСоответствия.Вставить(СтрокаТЧ.Организация);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

// Кэшированные данные по ЕГАИС:
// * Соответствие номенклатуры (номенклатура, характеристика, серия -> справка2)
// * Остатки ЕГАИС (справка2 -> Организация (из настроек), остаток в регистре 1)
// * Остаток по регистру №2 игнорируем. Сопоставление по которому нет остатков игнорируем (выбор только вручную).
// 
// Параметры:
//  Объект - ОбработкаОбъект.ОформлениеПередачиТоваровМеждуОрганизациями - Объект
// 
// Возвращаемое значение:
//  Неопределено, Структура - Остатки и соответствие ЕГАИС:
// * СоответствиеНоменклатуры - ТаблицаЗначений - соответствие номенклатуры (из имеющейся в остатках ЕГАИС):
//   ** Номенклатура   - Справочникссылка.Номенклатура - 
//   ** Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - 
//   ** Серия          - СправочникСсылка.СерииНоменклатуры - 
//   ** Справка2       - СправочникСсылка.Справки2ЕГАИС - 
// * Остатки - ТаблицаЗначений - остатки алкогольной продукции:
//   ** Справка2     - СправочникСсылка.Справки2ЕГАИС - 
//   ** Организация  - СправочникСсылка.Организации - 
//   ** Количество   - Число - Свободный остаток
//   ** Использовано - Число - Уже используется в обработке
//   ** ТипПродукции - ПеречислениеСсылка.ТипыПродукцииЕГАИС - 
//   ** ОбъемДАЛ     - Число - объем единицы для неупакованной партии
// * Коэффициенты - См. ОбщегоНазначенияИС.ОписаниеНоменклатуры
Функция ОстаткиИСоответствиеЕГАИС(Объект)
	
	Если Объект.НастройкиЕГАИС.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Товары = Объект.Товары.Выгрузить(
		Новый Структура("ЕГАИС", Истина), "Номенклатура,Характеристика,Серия,КоличествоЕГАИС,Справка2");
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Товары", Товары);
	Запрос.УстановитьПараметр("НастройкиЕГАИС", Объект.НастройкиЕГАИС.Выгрузить());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия КАК Серия,
	|	Товары.КоличествоЕГАИС КАК Количество,
	|	Товары.Справка2 КАК Справка2
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Серия
	|;
	|
	|//////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиЕГАИС.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	|	НастройкиЕГАИС.Организация КАК Организация
	|ПОМЕСТИТЬ НастройкиЕГАИС
	|ИЗ
	|	&НастройкиЕГАИС КАК НастройкиЕГАИС
	|;
	|
	|//////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеНоменклатурыЕГАИС.Номенклатура   КАК Номенклатура,
	|	СоответствиеНоменклатурыЕГАИС.Характеристика КАК Характеристика,
	|	СоответствиеНоменклатурыЕГАИС.Серия          КАК Серия,
	|	СоответствиеНоменклатурыЕГАИС.Справка2       КАК Справка2
	|ПОМЕСТИТЬ Соответствие
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Товары КАК Товары
	|		ПО СоответствиеНоменклатурыЕГАИС.Номенклатура = Товары.Номенклатура
	|		И СоответствиеНоменклатурыЕГАИС.Характеристика = Товары.Характеристика
	|		И СоответствиеНоменклатурыЕГАИС.Справка2 <> ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка)
	|;
	|
	|//////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиАлкогольнойПродукцииЕГАИСОстатки.Справка2 КАК Справка2,
	|	ОстаткиАлкогольнойПродукцииЕГАИСОстатки.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	|	СУММА(ОстаткиАлкогольнойПродукцииЕГАИСОстатки.СвободныйОстатокОстаток) КАК Количество
	|ПОМЕСТИТЬ Остатки
	|ИЗ
	|	РегистрНакопления.ОстаткиАлкогольнойПродукцииЕГАИС.Остатки(,
	|		ОрганизацияЕГАИС В (ВЫБРАТЬ ОрганизацияЕГАИС ИЗ НастройкиЕГАИС)
	|		И Справка2 В (ВЫБРАТЬ Справка2 ИЗ Соответствие)) КАК ОстаткиАлкогольнойПродукцииЕГАИСОстатки
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиАлкогольнойПродукцииЕГАИСОстатки.Справка2,
	|	ОстаткиАлкогольнойПродукцииЕГАИСОстатки.ОрганизацияЕГАИС
	|ИМЕЮЩИЕ
	|	СУММА(ОстаткиАлкогольнойПродукцииЕГАИСОстатки.СвободныйОстатокОстаток) > 0
	|;
	|
	|//////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Соответствие.Номенклатура   КАК Номенклатура,
	|	Соответствие.Характеристика КАК Характеристика,
	|	Соответствие.Серия          КАК Серия,
	|	Соответствие.Справка2       КАК Справка2
	|ИЗ
	|	Соответствие КАК Соответствие
	|ГДЕ
	|	Соответствие.Справка2 В (ВЫБРАТЬ Справка2 ИЗ Остатки)
	|;
	|
	|//////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Остатки.Справка2 КАК Справка2,
	|	Классификатор.ТипПродукции КАК ТипПродукции,
	|	Классификатор.Объем КАК ОбъемДАЛ,
	|	НастройкиЕГАИС.Организация КАК Организация,
	|	Остатки.Количество КАК КоличествоЕГАИС,
	|	СУММА(ЕСТЬNULL(Товары.Количество, 0)) КАК Использовано
	|ИЗ
	|	Остатки КАК Остатки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ НастройкиЕГАИС КАК НастройкиЕГАИС
	|	ПО НастройкиЕГАИС.ОрганизацияЕГАИС = Остатки.ОрганизацияЕГАИС
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК Классификатор
	|	ПО Остатки.Справка2.АлкогольнаяПродукция = Классификатор.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Товары КАК Товары
	|	ПО Товары.Справка2 = Остатки.Справка2
	|СГРУППИРОВАТЬ ПО
	|	Остатки.Справка2,
	|	Классификатор.ТипПродукции,
	|	Классификатор.Объем,
	|	НастройкиЕГАИС.Организация,
	|	Остатки.Количество
	|УПОРЯДОЧИТЬ ПО
	|	Остатки.Справка2.ДатаПодтвержденияЕГАИС
	|";
	
	Пакет = Запрос.ВыполнитьПакет();
	
	Результат = Новый Структура;
	Результат.Вставить("СоответствиеНоменклатуры", Пакет[4].Выгрузить());
	Результат.Вставить("Остатки", Пакет[5].Выгрузить());
	Результат.Вставить("Коэффициенты", ОбщегоНазначенияИС.ОписаниеНоменклатуры(Товары.ВыгрузитьКолонку("Номенклатура")));
	Возврат Результат;
	
КонецФункции

// Кэшированные данные по ВЕТИС:
// * Соответствие номенклатуры (номенклатура, характеристика, серия -> запись складского журнала)
// * Остатки ВЕТИС (запись складского журнала -> Организация (из настроек), остаток (пересчет в остаток номенклатуры)).
// 
// Параметры:
//  Объект - ОбработкаОбъект.ОформлениеПередачиТоваровМеждуОрганизациями - Объект
// 
// Возвращаемое значение:
//  Неопределено, Структура - Остатки и соответствие ВЕТИС:
// * СоответствиеНоменклатуры - ТаблицаЗначений - соответствие номенклатуры (из имеющейся в остатках ВЕТИС):
//   ** Номенклатура   - Справочникссылка.Номенклатура - 
//   ** Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - 
//   ** Серия          - СправочникСсылка.СерииНоменклатуры - 
//   ** ЗаписьСкладскогоЖурнала - СправочникСсылка.ЗаписиСкладскогоЖурналаВЕТИС - 
// * Остатки - ТаблицаЗначений - остатки продукции ВЕТИС:
//   ** ЗаписьСкладскогоЖурнала - СправочникСсылка.ЗаписиСкладскогоЖурналаВЕТИС - 
//   ** Организация             - СправочникСсылка.Организации - 
//   ** КоличествоВЕТИС         - Число - Свободный остаток
//   ** ЕдиницаИзмеренияВЕТИС   - СправочникСсылка.ЕдиницыИзмеренияВЕТИС - единица измерения остатка ВетИС
//   ** Продукция               - Справочникссылка.ПродукцияВЕТИС - продукция записи журнала
//   ** Использовано            - Число - Уже используется в обработке
// * Коэффициенты - См. ИнтеграцияВЕТИСУТ.КоэффициентыЕдиницИзмеренияПоВЕТИС
Функция ОстаткиИСоответствиеВЕТИС(Объект)
	
	Если Объект.НастройкиВЕТИС.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Товары = Объект.Товары.Выгрузить(
		Новый Структура("ВЕТИС", Истина), "Номенклатура,Характеристика,Серия,КоличествоВЕТИС,ЗаписьСкладскогоЖурнала");
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Товары", Товары);
	Запрос.УстановитьПараметр("НастройкиВЕТИС", Объект.НастройкиВЕТИС.Выгрузить());
	Запрос.УстановитьПараметр("СрокГодности", ТекущаяДатаСеанса());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия КАК Серия,
	|	Товары.КоличествоВЕТИС КАК Количество,
	|	Товары.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала
	|ПОМЕСТИТЬ ТоварыПредварительно
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|//////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия КАК Серия,
	|	СУММА(Товары.Количество) КАК Количество,
	|	Товары.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	ТоварыПредварительно КАК Товары
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	Товары.ЗаписьСкладскогоЖурнала
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Серия
	|;
	|
	|//////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиВЕТИС.ХозяйствующийСубъект КАК ХозяйствующийСубъект,
	|	НастройкиВЕТИС.Предприятие          КАК Предприятие,
	|	НастройкиВЕТИС.Организация          КАК Организация
	|ПОМЕСТИТЬ НастройкиВЕТИС
	|ИЗ
	|	&НастройкиВЕТИС КАК НастройкиВЕТИС
	|;
	|
	|//////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеНоменклатурыВЕТИС.Номенклатура            КАК Номенклатура,
	|	СоответствиеНоменклатурыВЕТИС.Характеристика          КАК Характеристика,
	|	СоответствиеНоменклатурыВЕТИС.Серия                   КАК Серия,
	|	СоответствиеНоменклатурыВЕТИС.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала,
	|	ИСТИНА                                                КАК СопоставленаЗапись
	|ПОМЕСТИТЬ Соответствие
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыВЕТИС КАК СоответствиеНоменклатурыВЕТИС
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Товары КАК Товары
	|		ПО СоответствиеНоменклатурыВЕТИС.Номенклатура = Товары.Номенклатура
	|		И СоответствиеНоменклатурыВЕТИС.Характеристика = Товары.Характеристика
	|		И СоответствиеНоменклатурыВЕТИС.ЗаписьСкладскогоЖурнала <> ЗНАЧЕНИЕ(Справочник.ЗаписиСкладскогоЖурналаВЕТИС.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.Номенклатура                           КАК Номенклатура,
	|	Товары.Характеристика                         КАК Характеристика,
	|	Товары.Серия                                  КАК Серия,
	|	ОстаткиПродукцииВЕТИС.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала,
	|	ЛОЖЬ                                          КАК СопоставленаЗапись
	|ИЗ
	|	РегистрСведений.ОстаткиПродукцииВЕТИС КАК ОстаткиПродукцииВЕТИС
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыВЕТИС КАК СоответствиеПродукцииВЕТИС
	|		ПО СоответствиеПродукцииВЕТИС.Продукция = ОстаткиПродукцииВЕТИС.Продукция
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Товары КАК Товары
	|		ПО Товары.Номенклатура = СоответствиеПродукцииВЕТИС.Номенклатура
	|		И Товары.Характеристика = СоответствиеПродукцииВЕТИС.Характеристика
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыВЕТИС КАК СоответствиеПартийВЕТИС
	|		ПО СоответствиеПартийВЕТИС.ЗаписьСкладскогоЖурнала = ОстаткиПродукцииВЕТИС.ЗаписьСкладскогоЖурнала
	|ГДЕ
	|	(ОстаткиПродукцииВЕТИС.ХозяйствующийСубъект, ОстаткиПродукцииВЕТИС.Предприятие)
	|		В(ВЫБРАТЬ ХозяйствующийСубъект, Предприятие ИЗ НастройкиВЕТИС)
	|	И СоответствиеПартийВЕТИС.ЗаписьСкладскогоЖурнала ЕСТЬ NULL
	|;
	|
	|//////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиВЕТИС.Организация КАК Организация,
	|	ОстаткиПродукцииВЕТИС.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала,
	|	ОстаткиПродукцииВЕТИС.Продукция КАК Продукция,
	|	ОстаткиПродукцииВЕТИС.КоличествоВЕТИС - СУММА(ЕСТЬNULL(Резервы.КоличествоВЕТИС,0)) КАК Количество,
	|	ОстаткиПродукцииВЕТИС.ЕдиницаИзмеренияВЕТИС КАК ЕдиницаИзмеренияВЕТИС
	|ПОМЕСТИТЬ Остатки
	|ИЗ
	|	РегистрСведений.ОстаткиПродукцииВЕТИС КАК ОстаткиПродукцииВЕТИС
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ НастройкиВЕТИС КАК НастройкиВЕТИС
	|		ПО НастройкиВЕТИС.ХозяйствующийСубъект = ОстаткиПродукцииВЕТИС.ХозяйствующийСубъект
	|		И НастройкиВЕТИС.Предприятие = ОстаткиПродукцииВЕТИС.Предприятие
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиСкладскогоЖурналаВРезервеВЕТИС КАК Резервы
	|		ПО Резервы.ЗаписьСкладскогоЖурнала = ОстаткиПродукцииВЕТИС.ЗаписьСкладскогоЖурнала
	|ГДЕ
	|	ОстаткиПродукцииВЕТИС.ЗаписьСкладскогоЖурнала В (ВЫБРАТЬ ЗаписьСкладскогоЖурнала ИЗ Соответствие)
	|	И ВЫБОР
	|		КОГДА ОстаткиПродукцииВЕТИС.ЗаписьСкладскогоЖурнала.СрокГодностиТочностьЗаполнения = ЗНАЧЕНИЕ(Перечисление.ТочностьЗаполненияПериодаВЕТИС.ДДММГГГГЧЧ)
	|			ТОГДА ОстаткиПродукцииВЕТИС.ЗаписьСкладскогоЖурнала.СрокГодностиНачалоПериода >= НАЧАЛОПЕРИОДА(&СрокГодности, ЧАС)
	|		КОГДА ОстаткиПродукцииВЕТИС.ЗаписьСкладскогоЖурнала.СрокГодностиТочностьЗаполнения = ЗНАЧЕНИЕ(Перечисление.ТочностьЗаполненияПериодаВЕТИС.ДДММГГГГ)
	|			ТОГДА ОстаткиПродукцииВЕТИС.ЗаписьСкладскогоЖурнала.СрокГодностиНачалоПериода >= НАЧАЛОПЕРИОДА(&СрокГодности, ДЕНЬ)
	|		КОГДА ОстаткиПродукцииВЕТИС.ЗаписьСкладскогоЖурнала.СрокГодностиТочностьЗаполнения = ЗНАЧЕНИЕ(Перечисление.ТочностьЗаполненияПериодаВЕТИС.ММГГГГ)
	|			ТОГДА ОстаткиПродукцииВЕТИС.ЗаписьСкладскогоЖурнала.СрокГодностиНачалоПериода >= НАЧАЛОПЕРИОДА(&СрокГодности, МЕСЯЦ)
	|		КОГДА ОстаткиПродукцииВЕТИС.ЗаписьСкладскогоЖурнала.СрокГодностиТочностьЗаполнения = ЗНАЧЕНИЕ(Перечисление.ТочностьЗаполненияПериодаВЕТИС.ГГГГ)
	|			ТОГДА ОстаткиПродукцииВЕТИС.ЗаписьСкладскогоЖурнала.СрокГодностиНачалоПериода >= НАЧАЛОПЕРИОДА(&СрокГодности, ГОД)
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|СГРУППИРОВАТЬ ПО
	|	НастройкиВЕТИС.Организация,
	|	ОстаткиПродукцииВЕТИС.ЗаписьСкладскогоЖурнала,
	|	ОстаткиПродукцииВЕТИС.Продукция,
	|	ОстаткиПродукцииВЕТИС.КоличествоВЕТИС,
	|	ОстаткиПродукцииВЕТИС.ЕдиницаИзмеренияВЕТИС
	|ИМЕЮЩИЕ
	|	ОстаткиПродукцииВЕТИС.КоличествоВЕТИС > СУММА(ЕСТЬNULL(Резервы.КоличествоВЕТИС,0))
	|;
	|
	|//////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Соответствие.Номенклатура            КАК Номенклатура,
	|	Соответствие.Характеристика          КАК Характеристика,
	|	Соответствие.Серия                   КАК Серия,
	|	Соответствие.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала,
	|	Соответствие.СопоставленаЗапись      КАК СопоставленаЗапись
	|ИЗ
	|	Соответствие КАК Соответствие
	|ГДЕ
	|	Соответствие.ЗаписьСкладскогоЖурнала В (ВЫБРАТЬ ЗаписьСкладскогоЖурнала ИЗ Остатки)
	|СГРУППИРОВАТЬ ПО
	|	Соответствие.Номенклатура,
	|	Соответствие.Характеристика,
	|	Соответствие.Серия,
	|	Соответствие.ЗаписьСкладскогоЖурнала,
	|	Соответствие.СопоставленаЗапись
	|УПОРЯДОЧИТЬ ПО
	|	СопоставленаЗапись УБЫВ
	|;
	|
	|//////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Остатки.ЗаписьСкладскогоЖурнала       КАК ЗаписьСкладскогоЖурнала,
	|	Остатки.Организация                   КАК Организация,
	|	Остатки.Продукция                     КАК Продукция,
	|	Остатки.Количество                    КАК КоличествоВЕТИС,
	|	Остатки.ЕдиницаИзмеренияВЕТИС         КАК ЕдиницаИзмеренияВЕТИС,
	|	СУММА(ЕСТЬNULL(Товары.Количество, 0)) КАК Использовано
	|ИЗ
	|	Остатки КАК Остатки
	|	ЛЕВОЕ СОЕДИНЕНИЕ Товары КАК Товары
	|	ПО Товары.ЗаписьСкладскогоЖурнала = Остатки.ЗаписьСкладскогоЖурнала
	|СГРУППИРОВАТЬ ПО
	|	Остатки.ЗаписьСкладскогоЖурнала,
	|	Остатки.Организация,
	|	Остатки.Продукция,
	|	Остатки.Количество,
	|	Остатки.ЕдиницаИзмеренияВЕТИС
	|УПОРЯДОЧИТЬ ПО
	|	Остатки.ЗаписьСкладскогоЖурнала.СрокГодностиНачалоПериода ВОЗР
	|";
	
	Пакет = Запрос.ВыполнитьПакет();
	
	Результат = Новый Структура;
	Результат.Вставить("СоответствиеНоменклатуры", Пакет[5].Выгрузить());
	Результат.Вставить("Остатки", Пакет[6].Выгрузить());
	Результат.Остатки.Индексы.Добавить("ЗаписьСкладскогоЖурнала");
	
	МассивПолученияКоэффициентов = Новый Массив;
	Для Каждого СтрокаСоответствия Из Результат.СоответствиеНоменклатуры Цикл
		Для Каждого СтрокаОстаток Из Результат.Остатки.НайтиСтроки(
			Новый Структура("ЗаписьСкладскогоЖурнала", СтрокаСоответствия.ЗаписьСкладскогоЖурнала)) Цикл
			МассивПолученияКоэффициентов.Добавить(Новый Структура("Номенклатура,ЕдиницаИзмеренияВЕТИС", 
				СтрокаСоответствия.Номенклатура, СтрокаОстаток.ЕдиницаИзмеренияВЕТИС));
		КонецЦикла;
	КонецЦикла;
	Результат.Вставить("Коэффициенты", ИнтеграцияВЕТИСУТ.КоэффициентыЕдиницИзмеренияПоВЕТИС(МассивПолученияКоэффициентов));
	
	Возврат Результат;
	
КонецФункции

// Кэшированные данные по ЗЕРНО:
// * Соответствие номенклатуры (номенклатура, характеристика, серия -> партия ЗЕРНО)
// если партия не сопоставлена совсем ни с чем, то она сопоставлена по ОКПД2 (характеристика и серия любая, приоритет
// использования партии минимален)
// * Остатки ЗЕРНО (партия ЗЕРНО -> Организация (по ИНН), остаток).
// 
// Параметры:
//  Объект - ОбработкаОбъект.ОформлениеПередачиТоваровМеждуОрганизациями - Объект
// 
// Возвращаемое значение:
//  Неопределено, Структура - Остатки и соответствие ЗЕРНО:
// * СоответствиеНоменклатуры - ТаблицаЗначений - соответствие номенклатуры (из имеющейся в остатках ЗЕРНО):
//   ** Номенклатура   - Справочникссылка.Номенклатура - 
//   ** Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - 
//   ** Серия          - СправочникСсылка.СерииНоменклатуры - 
//   ** ПартияЗЕРНО    - СправочникСсылка.РеестрПартийЗЕРНО - 
//   ** ПоОКПД         - Булево - 
// * Остатки - ТаблицаЗначений - остатки алкогольной продукции:
//   ** ПартияЗЕРНО     - СправочникСсылка.РеестрПартийЗЕРНО - 
//   ** Организация     - СправочникСсылка.Организации - 
//   ** КоличествоЗЕРНО - Число - Свободный остаток
//   ** Использовано    - Число - Уже используется в обработке
// * Коэффициенты - См. ИнтеграцияЗЕРНОУТ.КоэффициентыЕдиницИзмеренияЗЕРНО
Функция ОстаткиИСоответствиеЗЕРНО(Объект)
	
	Если Объект.НастройкиЗЕРНО.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Товары = Объект.Товары.Выгрузить(
		Новый Структура("ЗЕРНО", Истина), "Номенклатура,Характеристика,Серия,КоличествоЗЕРНО,ПартияЗЕРНО");
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Товары", Товары);
	Запрос.УстановитьПараметр("НастройкиЗЕРНО", Объект.НастройкиЗЕРНО.Выгрузить());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия КАК Серия,
	|	Товары.КоличествоЗЕРНО КАК Количество,
	|	Товары.ПартияЗЕРНО КАК ПартияЗЕРНО
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Серия
	|;
	|
	|//////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиЗЕРНО.КлючАдреса КАК КлючАдреса
	|ПОМЕСТИТЬ НастройкиЗЕРНО
	|ИЗ
	|	&НастройкиЗЕРНО КАК НастройкиЗЕРНО
	|;
	|
	|//////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеПартийЗЕРНО.Номенклатура   КАК Номенклатура,
	|	СоответствиеПартийЗЕРНО.Характеристика КАК Характеристика,
	|	СоответствиеПартийЗЕРНО.Серия          КАК Серия,
	|	СоответствиеПартийЗЕРНО.Партия         КАК ПартияЗЕРНО,
	|	ЛОЖЬ                                   КАК ПоОКПД
	|ПОМЕСТИТЬ Соответствие
	|ИЗ
	|	РегистрСведений.СоответствиеПартийЗЕРНО КАК СоответствиеПартийЗЕРНО
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Товары КАК Товары
	|		ПО СоответствиеПартийЗЕРНО.Номенклатура = Товары.Номенклатура
	|		И СоответствиеПартийЗЕРНО.Характеристика = Товары.Характеристика
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.Номенклатура              КАК Номенклатура,
	|	Товары.Характеристика            КАК Характеристика,
	|	Товары.Серия                     КАК Серия,
	|	ОстаткиПартийЗЕРНООстатки.Партия КАК ПартияЗЕРНО,
	|	ИСТИНА                           КАК ПоОКПД
	|ИЗ
	|	РегистрНакопления.ОстаткиПартийЗЕРНО.Остатки КАК ОстаткиПартийЗЕРНООстатки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КлючиПартийЗЕРНО КАК КлючиПартийЗЕРНО
	|		ПО КлючиПартийЗЕРНО.Партия = ОстаткиПартийЗЕРНООстатки.Партия
	|		И КлючиПартийЗЕРНО.Местоположение В (ВЫБРАТЬ КлючАдреса ИЗ НастройкиЗЕРНО)
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Товары КАК Товары
	|		ПО Товары.Номенклатура.КодОКПД2.Код = КлючиПартийЗЕРНО.ОКПД2
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеПартийЗЕРНО КАК СоответствиеПартийЗЕРНО
	|		ПО СоответствиеПартийЗЕРНО.Партия = ОстаткиПартийЗЕРНООстатки.Партия
	|ГДЕ
	|	СоответствиеПартийЗЕРНО.Партия ЕСТЬ NULL
	|;
	|
	|//////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	ОстаткиПартийЗЕРНООстатки.Партия КАК ПартияЗЕРНО,
	|	ОстаткиПартийЗЕРНООстатки.КоличествоЗЕРНООстаток - ОстаткиПартийЗЕРНООстатки.ВОбработкеЗЕРНООстаток КАК Количество
	|ПОМЕСТИТЬ Остатки
	|ИЗ
	|	РегистрНакопления.ОстаткиПартийЗЕРНО.Остатки(,
	|		Партия В (ВЫБРАТЬ ПартияЗЕРНО ИЗ Соответствие)) КАК ОстаткиПартийЗЕРНООстатки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КлючиПартийЗЕРНО КАК КлючиПартийЗЕРНО
	|		ПО КлючиПартийЗЕРНО.Партия = ОстаткиПартийЗЕРНООстатки.Партия
	|		И КлючиПартийЗЕРНО.Местоположение В (ВЫБРАТЬ КлючАдреса ИЗ НастройкиЗЕРНО)
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ВЫБОР
	|			КОГДА ВЫРАЗИТЬ (КлючиПартийЗЕРНО.ВладелецПартии.ОрганизацияКонтрагент КАК Справочник.Организации) <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Организации.Ссылка = КлючиПартийЗЕРНО.ВладелецПартии.ОрганизацияКонтрагент
	|			ИНАЧЕ Организации.ИНН = КлючиПартийЗЕРНО.ВладелецПартии.ИНН
	|		КОНЕЦ
	|ГДЕ
	|	ОстаткиПартийЗЕРНООстатки.КоличествоЗЕРНООстаток > ОстаткиПартийЗЕРНООстатки.ВОбработкеЗЕРНООстаток
	|СГРУППИРОВАТЬ ПО
	|	Организации.Ссылка,
	|	ОстаткиПартийЗЕРНООстатки.Партия,
	|	ОстаткиПартийЗЕРНООстатки.КоличествоЗЕРНООстаток - ОстаткиПартийЗЕРНООстатки.ВОбработкеЗЕРНООстаток
	|;
	|
	|//////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Соответствие.Номенклатура   КАК Номенклатура,
	|	Соответствие.Характеристика КАК Характеристика,
	|	Соответствие.Серия          КАК Серия,
	|	Соответствие.ПартияЗЕРНО    КАК ПартияЗЕРНО,
	|	Соответствие.ПоОКПД         КАК ПоОКПД
	|ИЗ
	|	Соответствие КАК Соответствие
	|ГДЕ
	|	Соответствие.ПартияЗЕРНО В (ВЫБРАТЬ ПартияЗЕРНО ИЗ Остатки)
	|УПОРЯДОЧИТЬ ПО
	|	ПоОКПД ВОЗР
	|;
	|
	|//////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Остатки.ПартияЗЕРНО                   КАК ПартияЗЕРНО,
	|	Остатки.Организация                   КАК Организация,
	|	Остатки.Количество                    КАК КоличествоЗЕРНО,
	|	СУММА(ЕСТЬNULL(Товары.Количество, 0)) КАК Использовано
	|ИЗ
	|	Остатки КАК Остатки
	|	ЛЕВОЕ СОЕДИНЕНИЕ Товары КАК Товары
	|	ПО Товары.ПартияЗЕРНО = Остатки.ПартияЗЕРНО
	|СГРУППИРОВАТЬ ПО
	|	Остатки.ПартияЗЕРНО,
	|	Остатки.Организация,
	|	Остатки.Количество
	|УПОРЯДОЧИТЬ ПО
	|	Остатки.ПартияЗЕРНО.Дата ВОЗР
	|";
	
	Пакет = Запрос.ВыполнитьПакет();
	
	Результат = Новый Структура;
	Результат.Вставить("СоответствиеНоменклатуры", Пакет[4].Выгрузить());
	Результат.Вставить("Остатки", Пакет[5].Выгрузить());
	Результат.Вставить("Коэффициенты", ИнтеграцияЗЕРНОУТ.КоэффициентыЕдиницИзмеренияЗЕРНО(Результат.СоответствиеНоменклатуры));
	Возврат Результат;
	
КонецФункции

// Кэшированные данные по САТУРН:
// * Соответствие номенклатуры (номенклатура, характеристика, серия -> партия САТУРН)
// * Остатки САТУРН (партия САТУРН -> Организация (из настроек), остаток).
// 
// Параметры:
//  Объект - ОбработкаОбъект.ОформлениеПередачиТоваровМеждуОрганизациями - Объект
// 
// Возвращаемое значение:
//  Неопределено, Структура - Остатки и соответствие ВЕТИС:
// * СоответствиеНоменклатуры - ТаблицаЗначений - соответствие номенклатуры (из имеющейся в остатках САТУРН):
//   ** Номенклатура   - Справочникссылка.Номенклатура - 
//   ** Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - 
//   ** Серия          - СправочникСсылка.СерииНоменклатуры - 
//   ** ПартияСАТУРН   - СправочникСсылка.ПартииСАТУРН - 
// * Остатки - ТаблицаЗначений - остатки продукции САТУРН:
//   ** ПартияСАТУРН                - СправочникСсылка.ПартииСАТУРН - 
//   ** Организация                 - СправочникСсылка.Организации - 
//   ** Количество                  - Число - Свободный остаток (количество САТУРН)
//   ** ТипИзмеряемойВеличиныСАТУРН - ПеречислениеСсылка.ТипыИзмеряемыхВеличинСАТУРН - единица измерения остатка САТУРН
//   ** Использовано                - Число - Уже используется в обработке (учетное количество)
// * Коэффициенты - См. ИнтеграцияИСВызовСервера.КоэффициентВесОбъемУпаковок
Функция ОстаткиИСоответствиеСАТУРН(Объект)
	
	Если Объект.НастройкиСАТУРН.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Товары = Объект.Товары.Выгрузить(
		Новый Структура("САТУРН", Истина), "Номенклатура,Характеристика,Серия,КоличествоСАТУРН,ПартияСАТУРН");
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Товары", Товары);
	Запрос.УстановитьПараметр("НастройкиСАТУРН", Объект.НастройкиСАТУРН.Выгрузить());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия КАК Серия,
	|	Товары.КоличествоСАТУРН КАК Количество,
	|	Товары.ПартияСАТУРН КАК ПартияСАТУРН
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Серия
	|;
	|
	|//////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиСАТУРН.ОрганизацияСАТУРН КАК ОрганизацияСАТУРН,
	|	НастройкиСАТУРН.МестоХранения     КАК МестоХранения,
	|	НастройкиСАТУРН.Организация       КАК Организация
	|ПОМЕСТИТЬ НастройкиСАТУРН
	|ИЗ
	|	&НастройкиСАТУРН КАК НастройкиСАТУРН
	|;
	|
	|//////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеНоменклатурыСАТУРН.Номенклатура   КАК Номенклатура,
	|	СоответствиеНоменклатурыСАТУРН.Характеристика КАК Характеристика,
	|	СоответствиеНоменклатурыСАТУРН.Серия          КАК Серия,
	|	СоответствиеНоменклатурыСАТУРН.Партия         КАК ПартияСАТУРН,
	|	ИСТИНА                                        КАК СопоставленаПартия
	|ПОМЕСТИТЬ Соответствие
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыСАТУРН КАК СоответствиеНоменклатурыСАТУРН
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Товары КАК Товары
	|		ПО СоответствиеНоменклатурыСАТУРН.Номенклатура = Товары.Номенклатура
	|		И СоответствиеНоменклатурыСАТУРН.Характеристика = Товары.Характеристика
	|		И СоответствиеНоменклатурыСАТУРН.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииСАТУРН.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.Номенклатура               КАК Номенклатура,
	|	Товары.Характеристика             КАК Характеристика,
	|	Товары.Серия                      КАК Серия,
	|	ОстаткиПартийСАТУРНОстатки.Партия КАК ПартияСАТУРН,
	|	ЛОЖЬ                              КАК СопоставленаПартия
	|ИЗ
	|	РегистрНакопления.ОстаткиПартийСАТУРН.Остатки КАК ОстаткиПартийСАТУРНОстатки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МестаХраненияПартийСАТУРН КАК МестаХраненияПартийСАТУРН
	|		ПО МестаХраненияПартийСАТУРН.Партия = ОстаткиПартийСАТУРНОстатки.Партия
	|		И (МестаХраненияПартийСАТУРН.ОрганизацияСАТУРН, МестаХраненияПартийСАТУРН.МестоХранения) 
	|			В (ВЫБРАТЬ ОрганизацияСАТУРН, МестоХранения ИЗ НастройкиСАТУРН)
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыСАТУРН КАК СоответствиеПАТСАТУРН
	|		ПО СоответствиеПАТСАТУРН.ПАТ = ОстаткиПартийСАТУРНОстатки.Партия.ПАТ
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Товары КАК Товары
	|		ПО Товары.Номенклатура = СоответствиеПАТСАТУРН.Номенклатура
	|		И Товары.Характеристика = СоответствиеПАТСАТУРН.Характеристика
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыСАТУРН КАК СоответствиеПартийСАТУРН
	|		ПО СоответствиеПартийСАТУРН.Партия = ОстаткиПартийСАТУРНОстатки.Партия
	|ГДЕ
	|	СоответствиеПартийСАТУРН.Партия ЕСТЬ NULL
	|;
	|
	|//////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиСАТУРН.Организация КАК Организация,
	|	ОстаткиПартийСАТУРНОстатки.Партия КАК ПартияСАТУРН,
	|	ОстаткиПартийСАТУРНОстатки.КоличествоСАТУРНОстаток + ОстаткиПартийСАТУРНОстатки.ВОбработкеСАТУРНОстаток КАК Количество,
	|	ОстаткиПартийСАТУРНОстатки.Партия.ТипИзмеряемойВеличиныСАТУРН КАК ТипИзмеряемойВеличиныСАТУРН
	|ПОМЕСТИТЬ Остатки
	|ИЗ
	|	РегистрНакопления.ОстаткиПартийСАТУРН.Остатки(, Партия В (ВЫБРАТЬ ПартияСАТУРН ИЗ Соответствие)) КАК ОстаткиПартийСАТУРНОстатки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МестаХраненияПартийСАТУРН.СрезПоследних(, Партия В (ВЫБРАТЬ ПартияСАТУРН ИЗ Соответствие)) КАК МестаХранения
	|		ПО МестаХранения.Партия = ОстаткиПартийСАТУРНОстатки.Партия
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ НастройкиСАТУРН КАК НастройкиСАТУРН
	|		ПО НастройкиСАТУРН.ОрганизацияСАТУРН = МестаХранения.ОрганизацияСАТУРН
	|		И НастройкиСАТУРН.МестоХранения = МестаХранения.МестоХранения
	|ГДЕ
	|	ОстаткиПартийСАТУРНОстатки.КоличествоСАТУРНОстаток + ОстаткиПартийСАТУРНОстатки.ВОбработкеСАТУРНОстаток > 0
	|СГРУППИРОВАТЬ ПО
	|	НастройкиСАТУРН.Организация,
	|	ОстаткиПартийСАТУРНОстатки.Партия,
	|	ОстаткиПартийСАТУРНОстатки.КоличествоСАТУРНОстаток + ОстаткиПартийСАТУРНОстатки.ВОбработкеСАТУРНОстаток
	|;
	|
	|//////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Соответствие.Номенклатура       КАК Номенклатура,
	|	Соответствие.Характеристика     КАК Характеристика,
	|	Соответствие.Серия              КАК Серия,
	|	Соответствие.ПартияСАТУРН       КАК ПартияСАТУРН,
	|	Соответствие.СопоставленаПартия КАК СопоставленаПартия
	|ИЗ
	|	Соответствие КАК Соответствие
	|ГДЕ
	|	Соответствие.ПартияСАТУРН В (ВЫБРАТЬ ПартияСАТУРН ИЗ Остатки)
	|УПОРЯДОЧИТЬ ПО
	|	СопоставленаПартия УБЫВ
	|;
	|
	|//////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Остатки.ПартияСАТУРН                  КАК ПартияСАТУРН,
	|	Остатки.Организация                   КАК Организация,
	|	Остатки.Количество                    КАК КоличествоСАТУРН,
	|	Остатки.ТипИзмеряемойВеличиныСАТУРН   КАК ТипИзмеряемойВеличиныСАТУРН,
	|	СУММА(ЕСТЬNULL(Товары.Количество, 0)) КАК Использовано
	|ИЗ
	|	Остатки КАК Остатки
	|	ЛЕВОЕ СОЕДИНЕНИЕ Товары КАК Товары
	|	ПО Товары.ПартияСАТУРН = Остатки.ПартияСАТУРН
	|СГРУППИРОВАТЬ ПО
	|	Остатки.ПартияСАТУРН,
	|	Остатки.Организация,
	|	Остатки.Количество,
	|	Остатки.ТипИзмеряемойВеличиныСАТУРН
	|УПОРЯДОЧИТЬ ПО
	|	Остатки.ПартияСАТУРН.ДатаСоздания ВОЗР
	|";
	
	Пакет = Запрос.ВыполнитьПакет();
	
	Результат = Новый Структура;
	Результат.Вставить("СоответствиеНоменклатуры", Пакет[4].Выгрузить());
	Результат.Вставить("Остатки", Пакет[5].Выгрузить());
	Результат.Вставить("Коэффициенты", ИнтеграцияИСВызовСервера.КоэффициентВесОбъемУпаковок(Результат.СоответствиеНоменклатуры.ВыгрузитьКолонку("Номенклатура")));
	Возврат Результат;
	
КонецФункции

Процедура РаспределитьШтрихКодыУпаковок(Объект)
	
	Таблица = Объект.ШтрихкодыУпаковок.Выгрузить(,"ШтрихкодУпаковки");
	// Распределение по номенклатуре. Считаем что количество по штрихкодам упаковок
	// не превосходит количества по табличной части товаров.
	Содержимое = ЭлектронноеВзаимодействиеИСМП.Содержимое(Таблица,,,Истина);
	Для Каждого СтрокаТЧ Из Содержимое Цикл
		ПоискОтправителя = Объект.ШтрихкодыУпаковок.НайтиСтроки(Новый Структура("ШтрихкодУпаковки", СтрокаТЧ.Штрихкод));
		Если ПоискОтправителя.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		Организация = ПоискОтправителя[0].Организация;
		Поиск = СтруктураПоискаТовары();
		ЗаполнитьЗначенияСвойств(Поиск, СтрокаТЧ);
		Поиск.Вставить("ОрганизацияПолучатель", ПоискОтправителя[0].ОрганизацияПолучатель);
		Поиск.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
		ТоварыИсточник = Объект.Товары.НайтиСтроки(Поиск);
		Если ТоварыИсточник.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		Источник = ТоварыИсточник[0];
		Количество = СтрокаТЧ.Количество;
		Поиск.Вставить("Организация", Организация);
		ТоварыПриемник = Объект.Товары.НайтиСтроки(Поиск);
		Если ТоварыПриемник.Количество() = 0 Тогда
			Приемник = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(Приемник, Источник);
			Приемник.Количество = 0;
			Приемник.Организация = Организация;
		Иначе
			Приемник = ТоварыПриемник[0];
		КонецЕсли;
		Источник.Количество = Источник.Количество - Количество;
		Приемник.Количество = Приемник.Количество + Количество;
		Приемник.КоличествоСИзвестнымВладельцемКодов = Приемник.Количество;
		Если Источник.Количество = 0 Тогда
			Объект.Товары.Удалить(Источник);
		КонецЕсли;
	КонецЦикла;
	
	// ЕГАИС, распределение по известным справкам2.
	// Считаем, что распределение по отправителю выполнено выше
	Если Объект.НастройкиЕГАИС.Количество() > 0 Тогда
		Товары = ШтрихкодированиеИС.ВложенныеШтрихкодыИзвестныхУпаковок(Таблица.ВыгрузитьКолонку(
			"ШтрихкодУпаковки")).МаркированныеТовары;
		Товары.Индексы.Добавить("ШтрихкодУпаковки");
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("АкцизнаяМарка", Товары.ВыгрузитьКолонку("ШтрихкодУпаковки"));
		Запрос.Текст =
		"ВЫБРАТЬ
		|	АкцизныеМаркиЕГАИС.Справка2,
		|	АкцизныеМаркиЕГАИС.ОрганизацияЕГАИС,
		|	АкцизныеМаркиЕГАИС.АкцизнаяМарка
		|ИЗ
		|	РегистрСведений.АкцизныеМаркиЕГАИС КАК АкцизныеМаркиЕГАИС
		|ГДЕ
		|	АкцизныеМаркиЕГАИС.АкцизнаяМарка В (&АкцизнаяМарка)
		|	И АкцизныеМаркиЕГАИС.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыАкцизныхМарок.ВНаличии)";
		Справки2 = Запрос.Выполнить().Выбрать();
		Пока Справки2.Следующий() Цикл
			Организация = Объект.НастройкиЕГАИС.Найти(Справки2.ОрганизацияЕГАИС, "ОрганизацияЕГАИС").Организация;
			Если Организация = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Товар = Товары.Найти(Справки2.АкцизнаяМарка, "ШтрихкодУпаковки");
			УпаковкаДокумента = Товар.УпаковкаВерхнегоУровня;
			Если Не ЗначениеЗаполнено(УпаковкаДокумента) Тогда
				УпаковкаДокумента = Справки2.АкцизнаяМарка;
			КонецЕсли;
			ПоискОтправителя = Объект.ШтрихкодыУпаковок.НайтиСтроки(Новый Структура("ШтрихкодУпаковки", УпаковкаДокумента));
			Если ПоискОтправителя.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			Количество = Товар.Количество;
			Поиск = СтруктураПоискаТовары();
			ЗаполнитьЗначенияСвойств(Поиск, Товар);
			Поиск.Вставить("ОрганизацияПолучатель", ПоискОтправителя[0].ОрганизацияПолучатель);
			Поиск.Вставить("Организация", Организация);
			Поиск.Вставить("Справка2", Справочники.Справки2ЕГАИС.ПустаяСсылка());
			
			ТоварыИсточник = Объект.Товары.НайтиСтроки(Поиск);
			Если ТоварыИсточник.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			Источник = ТоварыИсточник[0];
			Поиск.Вставить("Справка2", Справки2.Справка2);
			ТоварыПриемник = Объект.Товары.НайтиСтроки(Поиск);
			Если ТоварыПриемник.Количество() = 0 Тогда
				Приемник = Объект.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(Приемник, Источник);
				Приемник.Количество = 0;
				Приемник.КоличествоСИзвестнымВладельцемКодов = 0;
				Приемник.Справка2 = Справки2.Справка2;
			Иначе
				Приемник = ТоварыПриемник[0];
			КонецЕсли;
			Источник.Количество = Источник.Количество - Количество;
			Приемник.Количество = Приемник.Количество + Количество;
			Источник.КоличествоСИзвестнымВладельцемКодов = Источник.Количество;
			Приемник.КоличествоСИзвестнымВладельцемКодов = Приемник.Количество;
			Если Источник.Количество = 0 Тогда
				Объект.Товары.Удалить(Источник);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// в регистре Остатки указаны далы для неупакованной продукции
Функция КоэффициентПересчетаЕГАИС(КоэффициентНоменклатуры, ТипПродукции, ОбъемПродукции)
	
	Если ТипПродукции = Перечисления.ТипыПродукцииЕГАИС.Неупакованная И ОбъемПродукции > 0 Тогда
		Коэффициент = ОбъемПродукции;
	Иначе
		Коэффициент = 1 / КоэффициентНоменклатуры.КоличествоВПотребительскойУпаковке;
	КонецЕсли;
	Возврат Коэффициент;
	
КонецФункции

// в регистре Остатки указаны остатки в единицах измерения ВетИС
Функция КоэффициентПересчетаВЕТИС(КоэффициентыНоменклатуры, Знач ЕдиницаИзмеренияВЕТИС)
	
	Если КоэффициентыНоменклатуры = Неопределено Тогда
		Возврат 1;
	КонецЕсли;
	КоэффициентЕдиницы = КоэффициентыНоменклатуры.Получить(ЕдиницаИзмеренияВЕТИС);
	Если КоэффициентЕдиницы = Неопределено Тогда
		Возврат 1;
	КонецЕсли;
	Возврат КоэффициентЕдиницы.Коэффициент;
	
КонецФункции

// в регистре Остатки указаны килограммы
Функция КоэффициентПересчетаЗЕРНО(КоэффициентыНоменклатуры)
	
	Если КоэффициентыНоменклатуры = Неопределено Тогда
		Возврат 1;
	КонецЕсли;
	Возврат КоэффициентыНоменклатуры.Коэффициент;
	
КонецФункции

// в регистре Остатки указаны килограммолитры
Функция КоэффициентПересчетаСАТУРН(КоэффициентыНоменклатуры, ТипИзмеряемойВеличины)
	
	Если КоэффициентыНоменклатуры = Неопределено Тогда
		Возврат 1;
	КонецЕсли;
	Коэффициенты = КоэффициентыНоменклатуры.Получить(Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	Если Коэффициенты = Неопределено Тогда
		Возврат 1;
	КонецЕсли;
	Если ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличинСАТУРН.Вес Тогда
		Возврат ?(Коэффициенты.Вес = 0, 1, Коэффициенты.Вес);
	КонецЕсли;
	Если ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличинСАТУРН.Объем Тогда
		Возврат ?(Коэффициенты.Объем = 0, 1, Коэффициенты.Объем);
	КонецЕсли;
	Если Коэффициенты.Вес <> 0 Тогда
		Возврат Коэффициенты.Вес;
	КонецЕсли;
	Если Коэффициенты.Объем <> 0 Тогда
		Возврат Коэффициенты.Объем;
	КонецЕсли;
	Возврат 1;
	
КонецФункции

// Распределение по партиям ЕГАИС.
// 
// Параметры:
//  Объект - ОбработкаОбъект.ОформлениеПередачиТоваровМеждуОрганизациями - Объект
//         - ДанныеФормыСтруктураСКоллекцией - объект при вызове заполнения из формы
//  ТочноеСоответствиеСерии - Булево - Точное соответствие серии
//  МассивСтрок - Неопределено, Массив Из СтрокаТабличнойЧасти - Массив строк
//  ОстаткиИСоответствиеЕГАИС - См. ОстаткиИСоответствиеЕГАИС
//  ПередачаЗапрещена - См. ПередачаЗапрещена
Процедура РаспределитьЕГАИС(Объект, ТочноеСоответствиеСерии, МассивСтрок, ОстаткиИСоответствиеЕГАИС, ПередачаЗапрещена)
	
	Если Объект.НастройкиЕГАИС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Поиск = СтруктураПоискаТовары();
	Если Не ТочноеСоответствиеСерии Тогда
		Поиск.Удалить("Серия");
	КонецЕсли;
	
	Коэффициенты = ОстаткиИСоответствиеЕГАИС.Коэффициенты;
	
	Для Каждого СтрокаТЧ Из Объект.Товары.НайтиСтроки(
		Новый Структура("ЕГАИС, Справка2", Истина, Справочники.Справки2ЕГАИС.ПустаяСсылка())) Цикл
		
		Если МассивСтрок <> Неопределено И МассивСтрок.Найти(СтрокаТЧ.ПолучитьИдентификатор()) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ТочноеСоответствиеСерии И Не ЗначениеЗаполнено(СтрокаТЧ.Серия) Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаТЧ.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Поиск, СтрокаТЧ);
		СоответствиеКРаспределениюСтроки = ОстаткиИСоответствиеЕГАИС.СоответствиеНоменклатуры.НайтиСтроки(Поиск);
		ОсталосьЗаполнить = СтрокаТЧ.Количество;
		// Проход 1 - своя организация
		Если Не ЗначениеЗаполнено(СтрокаТЧ.Организация) Или (СтрокаТЧ.Организация = СтрокаТЧ.ОрганизацияПолучатель) Тогда
			Для Каждого СтрокаСправки2 Из СоответствиеКРаспределениюСтроки Цикл
				ОстаткиПартии = ОстаткиИСоответствиеЕГАИС.Остатки.Найти(СтрокаСправки2.Справка2, "Справка2");
				Если ОстаткиПартии = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Если ОстаткиПартии.Организация <> СтрокаТЧ.ОрганизацияПолучатель Тогда
					Продолжить;
				КонецЕсли;
				Если ОстаткиПартии.КоличествоЕГАИС = ОстаткиПартии.Использовано Тогда
					Продолжить;
				КонецЕсли;
				ЗаполнитьПартиюЕГАИСВСтроке(Объект, ОстаткиПартии, Коэффициенты, СтрокаТЧ, ОсталосьЗаполнить);
				Если ОсталосьЗаполнить = 0 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ОсталосьЗаполнить = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Проход 2 - чужая организация
		Если Не ЗначениеЗаполнено(СтрокаТЧ.Организация) Или (СтрокаТЧ.Организация <> СтрокаТЧ.ОрганизацияПолучатель) Тогда
			Для Каждого СтрокаСправки2 Из СоответствиеКРаспределениюСтроки Цикл
				ОстаткиПартии = ОстаткиИСоответствиеЕГАИС.Остатки.Найти(СтрокаСправки2.Справка2, "Справка2");
				Если ОстаткиПартии = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаТЧ.Организация) И ОстаткиПартии.Организация <> СтрокаТЧ.Организация Тогда
					Продолжить;
				КонецЕсли;
				Если ОстаткиПартии.КоличествоЕГАИС = ОстаткиПартии.Использовано Тогда
					Продолжить;
				КонецЕсли;
				Если ПередачаМеждуОрганизациямиЗапрещена(ПередачаЗапрещена, ОстаткиПартии, СтрокаТЧ) Тогда
					Продолжить;
				КонецЕсли;
				ЗаполнитьПартиюЕГАИСВСтроке(Объект, ОстаткиПартии, Коэффициенты, СтрокаТЧ, ОсталосьЗаполнить);
				Если ОсталосьЗаполнить = 0 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Распределение по партиям ВЕТИС.
// 
// Параметры:
//  Объект - ОбработкаОбъект.ОформлениеПередачиТоваровМеждуОрганизациями - Объект
//         - ДанныеФормыСтруктураСКоллекцией - объект при вызове заполнения из формы
//  ТочноеСоответствиеСерии - Булево - Точное соответствие серии
//  МассивСтрок - Неопределено, Массив Из СтрокаТабличнойЧасти - Массив строк
//  ОстаткиИСоответствиеВЕТИС - См. ОстаткиИСоответствиеВЕТИС
//  ПередачаЗапрещена - См. ПередачаЗапрещена
Процедура РаспределитьВЕТИС(Объект, ТочноеСоответствиеСерии, МассивСтрок, ОстаткиИСоответствиеВЕТИС, ПередачаЗапрещена)
	
	Если Объект.НастройкиВЕТИС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Поиск = СтруктураПоискаТовары();
	Если Не ТочноеСоответствиеСерии Тогда
		Поиск.Удалить("Серия");
	КонецЕсли;
	
	Коэффициенты = ОстаткиИСоответствиеВЕТИС.Коэффициенты;
	
	Для Каждого СтрокаТЧ Из Объект.Товары.НайтиСтроки(
		Новый Структура("ВЕТИС, ЗаписьСкладскогоЖурнала", Истина, Справочники.ЗаписиСкладскогоЖурналаВЕТИС.ПустаяСсылка())) Цикл
		
		Если МассивСтрок <> Неопределено И МассивСтрок.Найти(СтрокаТЧ.ПолучитьИдентификатор()) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ТочноеСоответствиеСерии И Не ЗначениеЗаполнено(СтрокаТЧ.Серия) Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаТЧ.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Поиск, СтрокаТЧ);
		СоответствиеКРаспределениюСтроки = ОстаткиИСоответствиеВЕТИС.СоответствиеНоменклатуры.НайтиСтроки(Поиск);
		ОсталосьЗаполнить = СтрокаТЧ.Количество;
		// Проход 1 - своя организация
		Если Не ЗначениеЗаполнено(СтрокаТЧ.Организация) Или (СтрокаТЧ.Организация = СтрокаТЧ.ОрганизацияПолучатель) Тогда
			Для Каждого СтрокаЗаписиЖурнала Из СоответствиеКРаспределениюСтроки Цикл
				ОстаткиПартии = ОстаткиИСоответствиеВЕТИС.Остатки.Найти(СтрокаЗаписиЖурнала.ЗаписьСкладскогоЖурнала, "ЗаписьСкладскогоЖурнала");
				Если ОстаткиПартии = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Если ОстаткиПартии.Организация <> СтрокаТЧ.ОрганизацияПолучатель Тогда
					Продолжить;
				КонецЕсли;
				Если ОстаткиПартии.КоличествоВЕТИС = ОстаткиПартии.Использовано Тогда
					Продолжить;
				КонецЕсли;
				ЗаполнитьПартиюВЕТИСВСтроке(Объект, ОстаткиПартии, Коэффициенты, СтрокаТЧ, ОсталосьЗаполнить);
				Если ОсталосьЗаполнить = 0 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ОсталосьЗаполнить = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Проход 2 - чужая организация
		Если Не ЗначениеЗаполнено(СтрокаТЧ.Организация) Или (СтрокаТЧ.Организация <> СтрокаТЧ.ОрганизацияПолучатель) Тогда
			Для Каждого СтрокаЗаписиЖурнала Из СоответствиеКРаспределениюСтроки Цикл
				ОстаткиПартии = ОстаткиИСоответствиеВЕТИС.Остатки.Найти(СтрокаЗаписиЖурнала.ЗаписьСкладскогоЖурнала, "ЗаписьСкладскогоЖурнала");
				Если ОстаткиПартии = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаТЧ.Организация) И ОстаткиПартии.Организация <> СтрокаТЧ.Организация Тогда
					Продолжить;
				КонецЕсли;
				Если ОстаткиПартии.КоличествоВЕТИС = ОстаткиПартии.Использовано Тогда
					Продолжить;
				КонецЕсли;
				Если ПередачаМеждуОрганизациямиЗапрещена(ПередачаЗапрещена, ОстаткиПартии, СтрокаТЧ) Тогда
					Продолжить;
				КонецЕсли;
				ЗаполнитьПартиюВЕТИСВСтроке(Объект, ОстаткиПартии, Коэффициенты, СтрокаТЧ, ОсталосьЗаполнить);
				Если ОсталосьЗаполнить = 0 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Распределение по партиям ЗЕРНО.
// 
// Параметры:
//  Объект - ОбработкаОбъект.ОформлениеПередачиТоваровМеждуОрганизациями - Объект
//         - ДанныеФормыСтруктураСКоллекцией - объект при вызове заполнения из формы
//  ТочноеСоответствиеСерии - Булево - Точное соответствие серии
//  МассивСтрок - Неопределено, Массив Из СтрокаТабличнойЧасти - Массив строк
//  ОстаткиИСоответствиеЗЕРНО - См. ОстаткиИСоответствиеЗЕРНО
//  ПередачаЗапрещена - См. ПередачаЗапрещена
Процедура РаспределитьЗЕРНО(Объект, ТочноеСоответствиеСерии, МассивСтрок, ОстаткиИСоответствиеЗЕРНО, ПередачаЗапрещена)
	
	Если Объект.НастройкиЗЕРНО.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Поиск = СтруктураПоискаТовары();
	Если Не ТочноеСоответствиеСерии Тогда
		Поиск.Удалить("Серия");
	КонецЕсли;
	
	Коэффициенты = ОстаткиИСоответствиеЗЕРНО.Коэффициенты;
	
	Для Каждого СтрокаТЧ Из Объект.Товары.НайтиСтроки(
		Новый Структура("ЗЕРНО, ПартияЗЕРНО", Истина, Справочники.РеестрПартийЗЕРНО.ПустаяСсылка())) Цикл
		
		Если МассивСтрок <> Неопределено И МассивСтрок.Найти(СтрокаТЧ.ПолучитьИдентификатор()) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ТочноеСоответствиеСерии И Не ЗначениеЗаполнено(СтрокаТЧ.Серия) Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаТЧ.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Поиск, СтрокаТЧ);
		СоответствиеКРаспределениюСтроки = ОстаткиИСоответствиеЗЕРНО.СоответствиеНоменклатуры.НайтиСтроки(Поиск);
		ОсталосьЗаполнить = СтрокаТЧ.Количество;
		// Проход 1 - своя организация
		Если Не ЗначениеЗаполнено(СтрокаТЧ.Организация) Или (СтрокаТЧ.Организация = СтрокаТЧ.ОрганизацияПолучатель) Тогда
			Для Каждого СтрокаПартииЗЕРНО Из СоответствиеКРаспределениюСтроки Цикл
				ОстаткиПартии = ОстаткиИСоответствиеЗЕРНО.Остатки.Найти(СтрокаПартииЗЕРНО.ПартияЗЕРНО, "ПартияЗЕРНО");
				Если ОстаткиПартии = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Если ОстаткиПартии.Организация <> СтрокаТЧ.ОрганизацияПолучатель Тогда
					Продолжить;
				КонецЕсли;
				Если ОстаткиПартии.КоличествоЗЕРНО = ОстаткиПартии.Использовано Тогда
					Продолжить;
				КонецЕсли;
				Если ТочноеСоответствиеСерии И СтрокаПартииЗЕРНО.ПоОКПД Тогда
					Продолжить;
				КонецЕсли;
				ЗаполнитьПартиюЗЕРНОВСтроке(Объект, ОстаткиПартии, Коэффициенты, СтрокаТЧ, ОсталосьЗаполнить);
				Если ОсталосьЗаполнить = 0 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ОсталосьЗаполнить = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Проход 2 - чужая организация
		Если Не ЗначениеЗаполнено(СтрокаТЧ.Организация) Или (СтрокаТЧ.Организация <> СтрокаТЧ.ОрганизацияПолучатель) Тогда
			Для Каждого СтрокаПартииЗЕРНО Из СоответствиеКРаспределениюСтроки Цикл
				ОстаткиПартии = ОстаткиИСоответствиеЗЕРНО.Остатки.Найти(СтрокаПартииЗЕРНО.ПартияЗЕРНО, "ПартияЗЕРНО");
				Если ОстаткиПартии = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаТЧ.Организация) И ОстаткиПартии.Организация <> СтрокаТЧ.Организация Тогда
					Продолжить;
				КонецЕсли;
				Если ОстаткиПартии.КоличествоЗЕРНО = ОстаткиПартии.Использовано Тогда
					Продолжить;
				КонецЕсли;
				Если ПередачаМеждуОрганизациямиЗапрещена(ПередачаЗапрещена, ОстаткиПартии, СтрокаТЧ) Тогда
					Продолжить;
				КонецЕсли;
				ЗаполнитьПартиюЗЕРНОВСтроке(Объект, ОстаткиПартии, Коэффициенты, СтрокаТЧ, ОсталосьЗаполнить);
				Если ОсталосьЗаполнить = 0 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Распределение по партиям САТУРН.
// 
// Параметры:
//  Объект - ОбработкаОбъект.ОформлениеПередачиТоваровМеждуОрганизациями - Объект
//         - ДанныеФормыСтруктураСКоллекцией - объект при вызове заполнения из формы
//  ТочноеСоответствиеСерии - Булево - Точное соответствие серии
//  МассивСтрок - Неопределено, Массив Из СтрокаТабличнойЧасти - Массив строк
//  ОстаткиИСоответствиеСАТУРН - См. ОстаткиИСоответствиеСАТУРН
//  ПередачаЗапрещена - См. ПередачаЗапрещена
Процедура РаспределитьСАТУРН(Объект, ТочноеСоответствиеСерии, МассивСтрок, ОстаткиИСоответствиеСАТУРН, ПередачаЗапрещена)
	
	Если Объект.НастройкиСАТУРН.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Поиск = СтруктураПоискаТовары();
	Если Не ТочноеСоответствиеСерии Тогда
		Поиск.Удалить("Серия");
	КонецЕсли;
	
	Коэффициенты = ОстаткиИСоответствиеСАТУРН.Коэффициенты;
	
	Для Каждого СтрокаТЧ Из Объект.Товары.НайтиСтроки(
		Новый Структура("САТУРН, ПартияСАТУРН", Истина, Справочники.ПартииСАТУРН.ПустаяСсылка())) Цикл
		
		Если МассивСтрок <> Неопределено И МассивСтрок.Найти(СтрокаТЧ.ПолучитьИдентификатор()) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ТочноеСоответствиеСерии И Не ЗначениеЗаполнено(СтрокаТЧ.Серия) Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаТЧ.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Поиск, СтрокаТЧ);
		СоответствиеКРаспределениюСтроки = ОстаткиИСоответствиеСАТУРН.СоответствиеНоменклатуры.НайтиСтроки(Поиск);
		ОсталосьЗаполнить = СтрокаТЧ.Количество;
		// Проход 1 - своя организация
		Если Не ЗначениеЗаполнено(СтрокаТЧ.Организация) Или (СтрокаТЧ.Организация = СтрокаТЧ.ОрганизацияПолучатель) Тогда
			Для Каждого СтрокаЗаписиЖурнала Из СоответствиеКРаспределениюСтроки Цикл
				ОстаткиПартии = ОстаткиИСоответствиеСАТУРН.Остатки.Найти(СтрокаЗаписиЖурнала.ПартияСАТУРН, "ПартияСАТУРН");
				Если ОстаткиПартии = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Если ОстаткиПартии.Организация <> СтрокаТЧ.ОрганизацияПолучатель Тогда
					Продолжить;
				КонецЕсли;
				Если ОстаткиПартии.КоличествоСАТУРН = ОстаткиПартии.Использовано Тогда
					Продолжить;
				КонецЕсли;
				ЗаполнитьПартиюСАТУРНВСтроке(Объект, ОстаткиПартии, Коэффициенты, СтрокаТЧ, ОсталосьЗаполнить);
				Если ОсталосьЗаполнить = 0 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ОсталосьЗаполнить = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Проход 2 - чужая организация
		Если Не ЗначениеЗаполнено(СтрокаТЧ.Организация) Или (СтрокаТЧ.Организация <> СтрокаТЧ.ОрганизацияПолучатель) Тогда
			Для Каждого СтрокаЗаписиЖурнала Из СоответствиеКРаспределениюСтроки Цикл
				ОстаткиПартии = ОстаткиИСоответствиеСАТУРН.Остатки.Найти(СтрокаЗаписиЖурнала.ПартияСАТУРН, "ПартияСАТУРН");
				Если ОстаткиПартии = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаТЧ.Организация) И ОстаткиПартии.Организация <> СтрокаТЧ.Организация Тогда
					Продолжить;
				КонецЕсли;
				Если ОстаткиПартии.КоличествоСАТУРН = ОстаткиПартии.Использовано Тогда
					Продолжить;
				КонецЕсли;
				Если ПередачаМеждуОрганизациямиЗапрещена(ПередачаЗапрещена, ОстаткиПартии, СтрокаТЧ) Тогда
					Продолжить;
				КонецЕсли;
				ЗаполнитьПартиюСАТУРНВСтроке(Объект, ОстаткиПартии, Коэффициенты, СтрокаТЧ, ОсталосьЗаполнить);
				Если ОсталосьЗаполнить = 0 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Распределение по партиям ИСМП. Если код не требует передачи, надо выставить "Организация = организация получатель"
//   (механика передачи при недостаче товаров организаций остается обычному механизму интеркампани).
// 
// Параметры:
//  Объект - ОбработкаОбъект.ОформлениеПередачиТоваровМеждуОрганизациями - Объект
//  МассивСтрок - Неопределено, Массив Из СтрокаТабличнойЧасти - Массив строк
Процедура РаспределитьИСМП(Объект, МассивСтрок)
	
	Поиск = Новый Структура;
	Поиск.Вставить("ИСМП", Истина);
	Поиск.Вставить("ЕГАИС", Ложь);
	Поиск.Вставить("ВЕТИС", Ложь);
	Поиск.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	Для Каждого СтрокаТЧ Из Объект.Товары.НайтиСтроки(Поиск) Цикл
		
		Если МассивСтрок <> Неопределено И МассивСтрок.Найти(СтрокаТЧ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТЧ.Организация = СтрокаТЧ.ОрганизацияПолучатель;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПередачаМеждуОрганизациямиЗапрещена(ПередачаЗапрещена, ОстаткиПартии, СтрокаТЧ)
	
	Запреты = ПередачаЗапрещена.Получить(СтрокаТЧ.Организация);
	Если Запреты = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Запреты.Получить(ОстаткиПартии.Организация)<> Неопределено;
	
КонецФункции

// Зависимые партии: нет
// Учет КМ: да.
Процедура ЗаполнитьПартиюЕГАИСВСтроке(Объект, ОстаткиПартии, Коэффициенты, СтрокаТЧ, ОсталосьЗаполнить)
	
	КоэффициентПересчета = КоэффициентПересчетаЕГАИС(
		Коэффициенты.Получить(СтрокаТЧ.Номенклатура), ОстаткиПартии.ТипПродукции, ОстаткиПартии.ОбъемДАЛ);
	ОсталосьЗаполнитьЕГАИС = ОсталосьЗаполнить / КоэффициентПересчета;
	ЗаполнитьПоСтроке = Мин(ОсталосьЗаполнитьЕГАИС, ОстаткиПартии.КоличествоЕГАИС - ОстаткиПартии.Использовано);
	ОстаткиПартии.Использовано = ОстаткиПартии.Использовано + ЗаполнитьПоСтроке;
	ОсталосьЗаполнитьЕГАИС = ОсталосьЗаполнитьЕГАИС - ЗаполнитьПоСтроке;
	ОсталосьЗаполнить = ОсталосьЗаполнитьЕГАИС * КоэффициентПересчета;
	КоличествоВВыделеннойСтроке = Окр(ЗаполнитьПоСтроке * КоэффициентПересчета, 3);
	
	Если ОсталосьЗаполнитьЕГАИС = 0 Тогда
		СтрокаТЧ.Справка2 = ОстаткиПартии.Справка2;
		СтрокаТЧ.КоличествоЕГАИС = ЗаполнитьПоСтроке;
		СтрокаТЧ.Организация = ОстаткиПартии.Организация;
	ИначеЕсли КоличествоВВыделеннойСтроке > 0 Тогда
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		
		НоваяСтрока.Справка2 = ОстаткиПартии.Справка2;
		НоваяСтрока.КоличествоЕГАИС = ЗаполнитьПоСтроке;
		НоваяСтрока.Организация = ОстаткиПартии.Организация;
		
		НоваяСтрока.Количество = КоличествоВВыделеннойСтроке;
		НоваяСтрока.КоличествоСИзвестнымВладельцемКодов = Мин(НоваяСтрока.КоличествоСИзвестнымВладельцемКодов, НоваяСтрока.Количество);
		
		СтрокаТЧ.Количество = СтрокаТЧ.Количество - КоличествоВВыделеннойСтроке;
		СтрокаТЧ.КоличествоСИзвестнымВладельцемКодов = СтрокаТЧ.КоличествоСИзвестнымВладельцемКодов - НоваяСтрока.КоличествоСИзвестнымВладельцемКодов;
	КонецЕсли;
КонецПроцедуры

// Зависимые партии: нет (заполнение ЗЕРНО идет позже)
// Учет КМ: да (молочная продукция).
Процедура ЗаполнитьПартиюВЕТИСВСтроке(Объект, ОстаткиПартии, Коэффициенты, СтрокаТЧ, ОсталосьЗаполнить)
	
	КоэффициентПересчета = КоэффициентПересчетаВЕТИС(Коэффициенты.Получить(СтрокаТЧ.Номенклатура), ОстаткиПартии.ЕдиницаИзмеренияВЕТИС);
	ОсталосьЗаполнитьВЕТИС = ОсталосьЗаполнить / КоэффициентПересчета;
	ЗаполнитьПоСтроке = Мин(ОсталосьЗаполнитьВЕТИС, ОстаткиПартии.КоличествоВЕТИС - ОстаткиПартии.Использовано);
	ОстаткиПартии.Использовано = ОстаткиПартии.Использовано + ЗаполнитьПоСтроке;
	ОсталосьЗаполнитьВЕТИС = ОсталосьЗаполнитьВЕТИС - ЗаполнитьПоСтроке;
	ОсталосьЗаполнить = ОсталосьЗаполнитьВЕТИС * КоэффициентПересчета;
	КоличествоВВыделеннойСтроке = Окр(ЗаполнитьПоСтроке * КоэффициентПересчета, 3);
	
	Если ОсталосьЗаполнитьВЕТИС = 0 Тогда
		СтрокаТЧ.ЗаписьСкладскогоЖурнала = ОстаткиПартии.ЗаписьСкладскогоЖурнала;
		СтрокаТЧ.КоличествоВЕТИС = ЗаполнитьПоСтроке;
		СтрокаТЧ.Организация = ОстаткиПартии.Организация;
	ИначеЕсли КоличествоВВыделеннойСтроке > 0 Тогда
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		
		НоваяСтрока.ЗаписьСкладскогоЖурнала = ОстаткиПартии.ЗаписьСкладскогоЖурнала;
		НоваяСтрока.КоличествоВЕТИС = ЗаполнитьПоСтроке;
		НоваяСтрока.Организация = ОстаткиПартии.Организация;
		
		НоваяСтрока.Количество = КоличествоВВыделеннойСтроке;
		НоваяСтрока.КоличествоСИзвестнымВладельцемКодов = Мин(НоваяСтрока.КоличествоСИзвестнымВладельцемКодов, НоваяСтрока.Количество);
		
		СтрокаТЧ.Количество = СтрокаТЧ.Количество - КоличествоВВыделеннойСтроке;
		СтрокаТЧ.КоличествоСИзвестнымВладельцемКодов = СтрокаТЧ.КоличествоСИзвестнымВладельцемКодов - НоваяСтрока.КоличествоСИзвестнымВладельцемКодов;
	КонецЕсли;
КонецПроцедуры

// Зависимые партии: ВЕТИС (при использовании подконтрольной двум контурам продукции)
// Учет КМ: нет.
Процедура ЗаполнитьПартиюЗЕРНОВСтроке(Объект, ОстаткиПартии, Коэффициенты, СтрокаТЧ, ОсталосьЗаполнить)
	
	КоэффициентПересчета = КоэффициентПересчетаЗЕРНО(Коэффициенты.Получить(СтрокаТЧ.Номенклатура));
	ОсталосьЗаполнитьЗЕРНО = ОсталосьЗаполнить / КоэффициентПересчета;
	ЗаполнитьПоСтроке = Мин(ОсталосьЗаполнитьЗЕРНО, ОстаткиПартии.КоличествоЗЕРНО - ОстаткиПартии.Использовано);
	ОстаткиПартии.Использовано = ОстаткиПартии.Использовано + ЗаполнитьПоСтроке;
	ОсталосьЗаполнитьЗЕРНО = ОсталосьЗаполнитьЗЕРНО - ЗаполнитьПоСтроке;
	ОсталосьЗаполнить = ОсталосьЗаполнитьЗЕРНО * КоэффициентПересчета;
	КоличествоВВыделеннойСтроке = Окр(ЗаполнитьПоСтроке * КоэффициентПересчета, 3);
	
	Если ОсталосьЗаполнитьЗЕРНО = 0 Тогда
		СтрокаТЧ.ПартияЗЕРНО = ОстаткиПартии.ПартияЗЕРНО;
		СтрокаТЧ.КоличествоЗЕРНО = ЗаполнитьПоСтроке;
		СтрокаТЧ.Организация = ОстаткиПартии.Организация;
	ИначеЕсли КоличествоВВыделеннойСтроке > 0 Тогда 
		КоэффициентВЕТИС = СтрокаТЧ.КоличествоВЕТИС / СтрокаТЧ.Количество;
		
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		
		НоваяСтрока.ПартияЗЕРНО = ОстаткиПартии.ПартияЗЕРНО;
		НоваяСтрока.КоличествоЗЕРНО = ЗаполнитьПоСтроке;
		НоваяСтрока.Организация = ОстаткиПартии.Организация;
		
		НоваяСтрока.Количество = КоличествоВВыделеннойСтроке;
		НоваяСтрока.КоличествоВЕТИС = НоваяСтрока.Количество * КоэффициентВЕТИС;
		
		СтрокаТЧ.Количество = СтрокаТЧ.Количество - НоваяСтрока.Количество;
		СтрокаТЧ.КоличествоВЕТИС = СтрокаТЧ.КоличествоВЕТИС - НоваяСтрока.КоличествоВЕТИС;
	КонецЕсли;
КонецПроцедуры

// Зависимые партии: нет
// Учет КМ: нет.
Процедура ЗаполнитьПартиюСАТУРНВСтроке(Объект, ОстаткиПартии, Коэффициенты, СтрокаТЧ, ОсталосьЗаполнить)
	
	КоэффициентПересчета = КоэффициентПересчетаСАТУРН(Коэффициенты.Получить(СтрокаТЧ.Номенклатура), ОстаткиПартии.ТипИзмеряемойВеличиныСАТУРН);
	ОсталосьЗаполнитьСАТУРН = ОсталосьЗаполнить / КоэффициентПересчета;
	ЗаполнитьПоСтроке = Мин(ОсталосьЗаполнитьСАТУРН, ОстаткиПартии.КоличествоСАТУРН - ОстаткиПартии.Использовано);
	ОстаткиПартии.Использовано = ОстаткиПартии.Использовано + ЗаполнитьПоСтроке;
	ОсталосьЗаполнитьСАТУРН = ОсталосьЗаполнитьСАТУРН - ЗаполнитьПоСтроке;
	ОсталосьЗаполнить = ОсталосьЗаполнитьСАТУРН * КоэффициентПересчета;
	КоличествоВВыделеннойСтроке = Окр(ЗаполнитьПоСтроке * КоэффициентПересчета, 3);
	
	Если ОсталосьЗаполнитьСАТУРН = 0 Тогда
		СтрокаТЧ.ПартияСАТУРН = ОстаткиПартии.ПартияСАТУРН;
		СтрокаТЧ.КоличествоСАТУРН = ЗаполнитьПоСтроке;
		СтрокаТЧ.Организация = ОстаткиПартии.Организация;
	ИначеЕсли КоличествоВВыделеннойСтроке > 0 Тогда
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		
		НоваяСтрока.ПартияСАТУРН = ОстаткиПартии.ПартияСАТУРН;
		НоваяСтрока.КоличествоСАТУРН = ЗаполнитьПоСтроке;
		НоваяСтрока.Организация = ОстаткиПартии.Организация;
		
		НоваяСтрока.Количество = КоличествоВВыделеннойСтроке;
		
		СтрокаТЧ.Количество = СтрокаТЧ.Количество - НоваяСтрока.Количество;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СозданиеИЗаполнениеДокументов

Процедура ЗаполнитьДокументПередачи(ДокументПередачи, Объект, ТоварыПередачи, КодыПередачи)
	
	ДокументПередачи.Заполнить(Неопределено);
	ДокументПередачи.Организация = ТоварыПередачи[0].Организация;
	ДокументПередачи.ОрганизацияПолучатель = ТоварыПередачи[0].ОрганизацияПолучатель;
	Если Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Склад, "ЭтоГруппа") Тогда
		ДокументПередачи.Склад = Объект.Склад;
	КонецЕсли;
	ДокументПередачи.Дата = ТекущаяДатаСеанса();
	
	СтрокиНастройкиПередачи = Объект.НастройкиПередачиМеждуОрганизациями.НайтиСтроки(
		Новый Структура("Организация,ОрганизацияПолучатель", ДокументПередачи.Организация, ДокументПередачи.ОрганизацияПолучатель));
	Если СтрокиНастройкиПередачи.Количество() Тогда
		ЗаполнитьЗначенияСвойств(ДокументПередачи, СтрокиНастройкиПередачи[0]);
	КонецЕсли;
	ДокументПередачи.ЗаполнитьНалогообложениеНДС();
	
	ДокументПередачи.Товары.Загрузить(ТоварыПередачи);
	ДокументПередачи.ШтрихкодыУпаковок.Загрузить(КодыПередачи);
	
	// Заполнение реквизитов табличной части
	Для Каждого СтрокаТЧ Из ДокументПередачи.Товары Цикл
		СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.Количество;
	КонецЦикла;
	ДокументПередачи.ЗаполнитьРеквизитыПоУмолчаниюВТабличнойЧасти();
	
	ДокументПередачи.Записать(РежимЗаписиДокумента.Запись);
	Попытка
		Если ДокументПередачи.ПроверитьЗаполнение() Тогда
			ДокументПередачи.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	Исключение
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'Созданный документ %1 не проведен'"),
				ДокументПередачи));
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьТТНИсходящуюЕГАИС(Документ, ДокументПередачи, Товары)
	
	Документ.Заполнить(
		Новый Структура("Основание, Товары", ДокументПередачи.Ссылка, Товары));
	Документ.Дата = ТекущаяДатаСеанса();
	
	Документ.Записать(РежимЗаписиДокумента.Запись);
	Попытка
		Если Документ.ПроверитьЗаполнение() Тогда
			Документ.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	Исключение
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'Созданный документ %1 не проведен'"),
				Документ));
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьИсходящуюТранспортнуюОперациюВЕТИС(Документ, ДокументПередачи, Содержание)
	
	Шапка = Содержание.Ключ;
	Товары = Содержание.Значение;
	Документ.Заполнить(
		Новый Структура("Основание, Товары", ДокументПередачи.Ссылка, Товары));
	ЗаполнитьЗначенияСвойств(Документ, Шапка);
	Документ.Дата = ТекущаяДатаСеанса();
	
	Документ.Записать(РежимЗаписиДокумента.Запись);
	Попытка
		Если Документ.ПроверитьЗаполнение() Тогда
			Документ.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	Исключение
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'Созданный документ %1 не проведен'"),
				Документ));
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьОформлениеСДИЗЗЕРНО(Документ, ДокументПередачи, Товары)
	
	Документ.Заполнить(
		Новый Структура("Основание, Товары", ДокументПередачи.Ссылка, Товары));
	Документ.Дата = ТекущаяДатаСеанса();
	
	Документ.Записать(РежимЗаписиДокумента.Запись);
	Попытка
		Если Документ.ПроверитьЗаполнение() Тогда
			Документ.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	Исключение
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'Созданный документ %1 не проведен'"),
				Документ));
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьНакладнуюСАТУРН(Документ, ДокументПередачи, Содержание)
	
	Шапка = Содержание.Ключ;
	Товары = Содержание.Значение;
	Документ.Заполнить(
		Новый Структура("Основание, Товары", ДокументПередачи.Ссылка, Товары));
	ЗаполнитьЗначенияСвойств(Документ, Шапка);
	Документ.Дата = ТекущаяДатаСеанса();
	Документ.ДатаПолучения = Документ.ДатаРегистрации + 3;
	
	Документ.Записать(РежимЗаписиДокумента.Запись);
	Попытка
		Если Документ.ПроверитьЗаполнение() Тогда
			Документ.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	Исключение
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'Созданный документ %1 не проведен'"),
				Документ));
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьОтгрузкуТоваровИСМП(Документ, ДокументПередачи, Товары)
	
	Документ.ВидПродукции = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха;
	Документ.Заполнить(ДокументПередачи.Ссылка);
	Документ.Дата = ТекущаяДатаСеанса();
	
	Документ.Записать(РежимЗаписиДокумента.Запись);
	Попытка
		Если Документ.ПроверитьЗаполнение() Тогда
			Документ.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	Исключение
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'Созданный документ %1 не проведен'"),
				Документ));
	КонецПопытки;
	
КонецПроцедуры

// Разбивка интеркампани ВетИС на документы по хозяйствующим субъектам и предприятиям отправителя
// 
Функция РазбитьПоНастройкамВЕТИС(ТоварыВЕТИС)
	
	Результат = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаписьСкладскогоЖурнала",ТоварыВЕТИС.ВыгрузитьКолонку("ЗаписьСкладскогоЖурнала"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОстаткиПродукцииВЕТИС.ХозяйствующийСубъект КАК ХозяйствующийСубъект,
	|	ОстаткиПродукцииВЕТИС.Предприятие КАК Предприятие,
	|	ОстаткиПродукцииВЕТИС.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала
	|ИЗ
	|	РегистрСведений.ОстаткиПродукцииВЕТИС КАК ОстаткиПродукцииВЕТИС
	|ГДЕ
	|	ОстаткиПродукцииВЕТИС.ЗаписьСкладскогоЖурнала В (&ЗаписьСкладскогоЖурнала)
	|ИТОГИ ПО
	|	ХозяйствующийСубъект, Предприятие";
	ВыборкаХС = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаХС.Следующий() Цикл
		ВыборкаПредприятие = ВыборкаХС.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПредприятие.Следующий() Цикл
			Отправитель = Новый Структура("ГрузоотправительХозяйствующийСубъект, ГрузоотправительПредприятие",
				ВыборкаПредприятие.ХозяйствующийСубъект, ВыборкаПредприятие.Предприятие);
			ТоварыОтправителя = ТоварыВЕТИС.СкопироватьКолонки();
			Выборка = ВыборкаПредприятие.Выбрать();
			Пока Выборка.Следующий() Цикл
				Для Каждого СтрокаТаблицы Из ТоварыВЕТИС.НайтиСтроки(Новый Структура("ЗаписьСкладскогоЖурнала", Выборка.ЗаписьСкладскогоЖурнала)) Цикл
					ЗаполнитьЗначенияСвойств(ТоварыОтправителя.Добавить(), СтрокаТаблицы);
				КонецЦикла;
			КонецЦикла;
			Результат.Вставить(Отправитель, ТоварыОтправителя);
		КонецЦикла;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

// Разбивка интеркампани ВетИС на документы по хозяйствующим субъектам и предприятиям отправителя
// 
Функция РазбитьПоНастройкамСАТУРН(ТоварыСАТУРН)
	
	Результат = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПартияСАТУРН",ТоварыСАТУРН.ВыгрузитьКолонку("ПартияСАТУРН"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МестаХраненияПартийСАТУРН.ОрганизацияСАТУРН КАК ОрганизацияСАТУРН,
	|	МестаХраненияПартийСАТУРН.МестоХранения КАК МестоХранения,
	|	МестаХраненияПартийСАТУРН.Партия КАК ПартияСАТУРН
	|ИЗ
	|	РегистрСведений.МестаХраненияПартийСАТУРН.СрезПоследних(,Партия В (&ПартияСАТУРН)) КАК МестаХраненияПартийСАТУРН
	|ИТОГИ ПО
	|	ОрганизацияСАТУРН, МестоХранения";
	ВыборкаОрганизация = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизация.Следующий() Цикл
		ВыборкаПредприятие = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПредприятие.Следующий() Цикл
			Отправитель = Новый Структура("ГрузоотправительОрганизацияСАТУРН, ГрузоотправительМестоХранения",
				ВыборкаПредприятие.ОрганизацияСАТУРН, ВыборкаПредприятие.МестоХранения);
			ТоварыОтправителя = ТоварыСАТУРН.СкопироватьКолонки();
			Выборка = ВыборкаПредприятие.Выбрать();
			Пока Выборка.Следующий() Цикл
				Для Каждого СтрокаТаблицы Из ТоварыСАТУРН.НайтиСтроки(Новый Структура("ПартияСАТУРН", Выборка.ПартияСАТУРН)) Цикл
					ЗаполнитьЗначенияСвойств(ТоварыОтправителя.Добавить(), СтрокаТаблицы);
				КонецЦикла;
			КонецЦикла;
			Результат.Вставить(Отправитель, ТоварыОтправителя);
		КонецЦикла;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

// Разбивка интеркампани ФГИС "Зерно" на документы по зерну и продуктам переработки зерна (оформляются раздельно).
// 
Функция ВыделитьТоварыППЗ(ТоварыЗЕРНО)
	
	ТоварыЗЕРНО.Колонки.Добавить("ППЗ", Новый ОписаниеТипов("Булево"));
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Товары", ТоварыЗЕРНО.Скопировать(,"Номенклатура"));
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ДанныеШтрихкодовУпаковок
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|/////////////////////////////////////////////
	|"
	+ ШтрихкодированиеОбщегоНазначенияИС.ТекстЗапросаСвойстваМаркируемойПродукции()
	+ "
	|;
	|/////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеПоВидуПродукции.Номенклатура КАК Номенклатура,
	|	ДанныеПоВидуПродукции.ВидПродукции КАК ВидПродукции
	|ИЗ
	|	СвойстваМаркируемойПродукции КАК ДанныеПоВидуПродукции
	|";
	ВидыПродукцииПоНоменклатуре = Запрос.Выполнить().Выгрузить();
	ВидыПродукцииПоНоменклатуре.Индексы.Добавить("Номенклатура");
	
	Для Каждого СтрокаТаблицы Из ТоварыЗЕРНО Цикл
		ВидПродукции = ВидыПродукцииПоНоменклатуре.Найти(СтрокаТаблицы.Номенклатура, "Номенклатура").ВидПродукции;
		СтрокаТаблицы.ППЗ = ИнтеграцияЗЕРНОКлиентСервер.ВидыПродукции(ВидПродукции)[0] = Перечисления.ВидыПродукцииИС.ПродуктыПереработкиЗерна;
	КонецЦикла;
	ТоварыППЗ = ТоварыЗЕРНО.Скопировать(Новый Структура("ППЗ", Истина));
	ТоварыЗЕРНО = ТоварыЗЕРНО.Скопировать(Новый Структура("ППЗ", Ложь));
	Возврат ТоварыППЗ;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
