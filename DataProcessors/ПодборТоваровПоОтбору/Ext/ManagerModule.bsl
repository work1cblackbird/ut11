#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция подготавливает структуру данных, необходимую для печати ценников и этикеток.
//
// Параметры:
//  СтруктураНастроек - Структура - данные, структура настроек.
//
// Возвращаемое значение:
//  Структура - данные, необходимые для печати этикеток и ценников.
//
Функция ПодготовитьСтруктуруДанных(СтруктураНастроек) Экспорт
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("ТаблицаТоваров",                             Неопределено);
	СтруктураРезультата.Вставить("СоответствиеПолейСКДКолонкамТаблицыТоваров", Новый Соответствие);

#Область ПодготовкаСхемыКомпоновкиДанныхИКомпоновщикаНастроекСкд
	
	// Схема компоновки.
	СхемаКомпоновкиДанных = Обработки.ПодборТоваровПоОтбору.ПолучитьМакет(СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных);

	//++ Локализация
	ИнтеграцияСМаркетплейсамиСерверЛокализация.ДополнитьСКДДляМаркетплейсов(СтруктураНастроек, СхемаКомпоновкиДанных);
	//-- Локализация
	
	// ЭлектронноеВзаимодействие.ИнтеграцияСЭлектроннымиТорговымиПлощадками
	ИнтеграцияСЭлектроннымиТорговымиПлощадкамиПереопределяемый.ДополнитьСКДПодбораТоваровПоОтбору(СхемаКомпоновкиДанных, СтруктураНастроек);
	// Конец ЭлектронноеВзаимодействие.ИнтеграцияСЭлектроннымиТорговымиПлощадками

	Если СтруктураНастроек.Свойство("ИспользуетсяОтборПоВнешнемуИсточникуДанных") Тогда
		
		ВнешниеНаборыДанных = Неопределено;
		
		Если СтруктураНастроек.Свойство("ТаблицаТоваров") Тогда
			КолонкиТаблицыТоваров = СтруктураНастроек.ТаблицаТоваров.Колонки;
			МассивКолонок = Новый Массив();

			Если Не КолонкиТаблицыТоваров.Найти("ВидЦены") = Неопределено Тогда
				МассивКолонок.Добавить("ВидЦены");
			КонецЕсли;
		
			Если Не КолонкиТаблицыТоваров.Найти("Цена") = Неопределено Тогда
				МассивКолонок.Добавить("Цена");
			КонецЕсли;

			НастроитьНаборыДанных(СхемаКомпоновкиДанных, КолонкиТаблицыТоваров);

			ДопИменаКолонок = СтрСоединить(МассивКолонок, ", ");
			Если ЗначениеЗаполнено(ДопИменаКолонок) Тогда
				ДопИменаКолонок = ", " + ДопИменаКолонок;
			КонецЕсли;
			
			ВнешниеНаборыДанных = Новый Структура;
			ТаблицаДляИсточника = СтруктураНастроек.ТаблицаТоваров.Скопировать(, "Номенклатура, Характеристика, Серия, Упаковка" + ДопИменаКолонок);// ТаблицаЗначений
			ТаблицаДляИсточника.Свернуть("Номенклатура, Характеристика, Серия, Упаковка" + ДопИменаКолонок);
			
			ПоСерии = Ложь;
			ПоУпаковке = Ложь;
			
			Если КолонкиТаблицыТоваров.Найти("Серия") <> Неопределено Тогда
				ПоСерии = Истина;
				ТаблицаДляИсточника.Колонки.Добавить("СерияДляСвязи", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
			КонецЕсли;

			Если КолонкиТаблицыТоваров.Найти("Упаковка") <> Неопределено Тогда
				ПоУпаковке = Истина;
				ТаблицаДляИсточника.Колонки.Добавить("УпаковкаДляСвязи", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
			КонецЕсли;
			
			ТаблицаДляОтбора = ТаблицаДляИсточника.Скопировать(, "Номенклатура");
			ТаблицаДляОтбора.Свернуть("Номенклатура");
			СписокДляОтбора = ТаблицаДляОтбора.ВыгрузитьКолонку("Номенклатура");
			
			Если ПоСерии Или ПоУпаковке Тогда
				ТаблицаНастроекЦенообразования = ПолучитьТаблицуНастроекЦенообразования(СписокДляОтбора);
				Для Каждого Настройка Из ТаблицаНастроекЦенообразования Цикл
					НайденныеСтроки = ТаблицаДляИсточника.НайтиСтроки(Новый Структура("Номенклатура", Настройка.Номенклатура));
					
					Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
						Если ПоСерии И Настройка.ПоСерии Тогда
							НайденнаяСтрока.СерияДляСвязи = НайденнаяСтрока.Серия;
						КонецЕсли;
						Если ПоУпаковке И Настройка.ПоУпаковке Тогда
							НайденнаяСтрока.УпаковкаДляСвязи = НайденнаяСтрока.Упаковка;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
			ВнешниеНаборыДанных.Вставить("ТаблицаНоменклатуры", ТаблицаДляИсточника);
			
		КонецЕсли;
	КонецЕсли;

	// Подготовка компоновщика макета компоновки данных.
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	Компоновщик.Настройки.Отбор.Элементы.Очистить();
	Компоновщик.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.Полное);
	
	// Отбор и сортировка компоновщика настроек.
	Если СтруктураНастроек.КомпоновщикНастроек <> Неопределено Тогда
		
		КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(
			Компоновщик.Настройки.Отбор,
			СтруктураНастроек.КомпоновщикНастроек.Настройки.Отбор);
			
		КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(
			Компоновщик.Настройки.Порядок,
			СтруктураНастроек.КомпоновщикНастроек.Настройки.Порядок);
			
	КонецЕсли;

	//++ Локализация
	ИнтеграцияСМаркетплейсамиСерверЛокализация.ЗаполнитьУчетнуюЗапись(СтруктураНастроек, Компоновщик);
	//-- Локализация
	
	// ЭлектронноеВзаимодействие.ИнтеграцияСЭлектроннымиТорговымиПлощадками
	ИнтеграцияСЭлектроннымиТорговымиПлощадкамиПереопределяемый.ПеренестиОтборВПараметры(Компоновщик.Настройки);
	// Конец ЭлектронноеВзаимодействие.ИнтеграцияСЭлектроннымиТорговымиПлощадками

	ИспользоватьАссортимент = ПолучитьФункциональнуюОпцию("ИспользоватьАссортимент");
	Если ИспользоватьАссортимент Тогда
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Компоновщик.Настройки, "АссортиментНаДату", ТекущаяДатаСеанса());
	КонецЕсли;
	
	Если СтруктураНастроек.Свойство("ЦеныНаДату") Тогда
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Компоновщик.Настройки, "ЦеныНаДату", СтруктураНастроек.ЦеныНаДату);
	КонецЕсли;
	
	Если СтруктураНастроек.Свойство("Поставщик") Тогда
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Компоновщик.Настройки, "Поставщик", СтруктураНастроек.Поставщик);
	КонецЕсли;
	
	Если СтруктураНастроек.Свойство("ОтборПоВариантуРасчетаЦенНаборов") Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			Компоновщик.Настройки.Отбор,
			"ВариантРасчетаЦеныНабора",
			ВидСравненияКомпоновкиДанных.ВСписке,
			СтруктураНастроек.ОтборПоВариантуРасчетаЦенНаборов,
			Неопределено,
			Истина,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	КонецЕсли;
	
	Если СтруктураНастроек.ВестиУчетСертификатовНоменклатуры Тогда
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Компоновщик.Настройки, "ВестиУчетСертификатовНоменклатуры", Истина);
	КонецЕсли;
	
	Если СтруктураНастроек.Свойство("ИспользуетсяОтборПоВнешнемуИсточникуДанных") Тогда
		
		Если СтруктураНастроек.Свойство("ТаблицаТоваров") Тогда
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				Компоновщик.Настройки.Отбор,
				"Номенклатура",
				ВидСравненияКомпоновкиДанных.ВСписке,
				СписокдляОтбора,
				Неопределено,
				Истина);
				
		КонецЕсли;
	КонецЕсли;
	
	// Выбранные поля компоновщика настроек.
	Для Каждого ОбязательноеПоле Из СтруктураНастроек.ОбязательныеПоля Цикл
		ПолеСКД = КомпоновкаДанныхСервер.НайтиПолеСКДПоПолномуИмени(Компоновщик.Настройки.Выбор.ДоступныеПоляВыбора.Элементы, ОбязательноеПоле);
		Если ПолеСКД <> Неопределено Тогда
			ВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Поле = ПолеСКД.Поле;
		КонецЕсли;
	КонецЦикла;
	
	СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(Компоновщик);

	// Компоновка макета компоновки данных.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(
		СхемаКомпоновкиДанных,
		Компоновщик.ПолучитьНастройки(),,,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

#КонецОбласти

#Область ПодготовкаВспомогательныхДанныхДляСопоставленияПолейШаблонаИСкд
	
	Для каждого Поле Из МакетКомпоновкиДанных.НаборыДанных.НаборДанных.Поля Цикл
		СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицыТоваров.Вставить(
			Справочники.ШаблоныЭтикетокИЦенников.ИмяПоляВШаблоне(Поле.ПутьКДанным), Поле.Имя);
	КонецЦикла;

#КонецОбласти

#Область ПодготовкаТаблицыТоваров
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	Если ВнешниеНаборыДанных = Неопределено Тогда
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
	Иначе
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, ВнешниеНаборыДанных);
	КонецЕсли;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаТоваров);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	СтруктураРезультата.ТаблицаТоваров = ТаблицаТоваров;
	
	Возврат СтруктураРезультата;
	
#КонецОбласти

КонецФункции

Процедура НастроитьНаборыДанных(СхемаКомпоновкиДанных, КолонкиТаблицыТоваров)

	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьСерииНоменклатуры          = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	ИспользоватьУпаковкиНоменклатуры       = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");

	РабочийНаборДанных = СхемаКомпоновкиДанных.НаборыДанных[0];

	НаборДанныхНоменклатура                = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
	НаборДанныхНоменклатура.Имя            = "ТаблицаНоменклатуры";
	НаборДанныхНоменклатура.ИмяОбъекта     = "ТаблицаНоменклатуры";
	НаборДанныхНоменклатура.ИсточникДанных = РабочийНаборДанных.ИсточникДанных;
	
	СхемаКомпоновкиДанных.СвязиНаборовДанных.Очистить();
	
	ДобавитьПолеНабораДанныхСКД(НаборДанныхНоменклатура, "Номенклатура", "СправочникСсылка.Номенклатура");
	ДобавитьСвязьНаборовДанныхСКД(СхемаКомпоновкиДанных, НаборДанныхНоменклатура, РабочийНаборДанных, "Номенклатура");
	
	Если ИспользоватьХарактеристикиНоменклатуры И КолонкиТаблицыТоваров.Найти("Характеристика") <> Неопределено Тогда
		ДобавитьПолеНабораДанныхСКД(НаборДанныхНоменклатура, "Характеристика", "СправочникСсылка.ХарактеристикиНоменклатуры");
		ДобавитьСвязьНаборовДанныхСКД(СхемаКомпоновкиДанных, НаборДанныхНоменклатура, РабочийНаборДанных, "Характеристика");
	КонецЕсли;
		
	Если ИспользоватьСерииНоменклатуры И КолонкиТаблицыТоваров.Найти("Серия") <> Неопределено Тогда
		ДобавитьПолеНабораДанныхСКД(НаборДанныхНоменклатура, "Серия", "СправочникСсылка.СерииНоменклатуры");
		ДобавитьПолеНабораДанныхСКД(НаборДанныхНоменклатура, "СерияДляСвязи", "СправочникСсылка.СерииНоменклатуры");
		ДобавитьСвязьНаборовДанныхСКД(СхемаКомпоновкиДанных, 
										НаборДанныхНоменклатура, РабочийНаборДанных, "СерияДляСвязи", "Серия");
	КонецЕсли;
	
	Если ИспользоватьУпаковкиНоменклатуры И КолонкиТаблицыТоваров.Найти("Упаковка") <> Неопределено Тогда
		ДобавитьПолеНабораДанныхСКД(НаборДанныхНоменклатура, "Упаковка", "СправочникСсылка.УпаковкиЕдиницыИзмерения");
		ДобавитьПолеНабораДанныхСКД(НаборДанныхНоменклатура, "УпаковкаДляСвязи", "СправочникСсылка.УпаковкиЕдиницыИзмерения");
		ДобавитьСвязьНаборовДанныхСКД(СхемаКомпоновкиДанных, 
										НаборДанныхНоменклатура, РабочийНаборДанных, "УпаковкаДляСвязи", "Упаковка");
	КонецЕсли;

	Если КолонкиТаблицыТоваров.Найти("ВидЦены") <> Неопределено Тогда
		ДобавитьПолеНабораДанныхСКД(НаборДанныхНоменклатура, "ВидЦены", "СправочникСсылка.ВидыЦен");
	КонецЕсли;

	Если КолонкиТаблицыТоваров.Найти("Цена") <> Неопределено Тогда
		ДобавитьПолеНабораДанныхСКД(НаборДанныхНоменклатура, "Цена", "Число");
	КонецЕсли;

КонецПроцедуры


// Параметры:
// 	СКД - СхемаКомпоновкиДанных - Изменяемая схема компоновки данных
// 	НаборДанныхНоменклатура - НаборДанныхОбъектСхемыКомпоновкиДанных - Набор данных
// 	РабочийНаборДанных - НаборДанныхОбъектСхемыКомпоновкиДанных - Набор данных
// 	Поле - Строка - Поле для выражения-источника и выражения-приемника
// 	ПолеРабочегоНабора - Строка - Поле для выражения-источника и выражения-приемника
// 
Процедура ДобавитьСвязьНаборовДанныхСКД(СКД, 
										НаборДанныхНоменклатура, 
										РабочийНаборДанных, 
										Поле, 
										ПолеРабочегоНабора = Неопределено) Экспорт
	
	Связь                     = СКД.СвязиНаборовДанных.Добавить();
	Связь.НаборДанныхИсточник = НаборДанныхНоменклатура.Имя;
	Связь.НаборДанныхПриемник = РабочийНаборДанных.Имя;
	Связь.ВыражениеИсточник   = Поле;
	Связь.ВыражениеПриемник   = ?(ПолеРабочегоНабора = Неопределено, Поле, ПолеРабочегоНабора);
	
КонецПроцедуры

// Параметры:
// 	НаборДанных - НаборДанныхОбъектСхемыКомпоновкиДанных - Набор данных
// 	ИмяПоля - Строка - Имя поля
// 	ТипЗначения - Строка - Тип значения
// 
Процедура ДобавитьПолеНабораДанныхСКД(НаборДанных, ИмяПоля, ТипЗначения) Экспорт
	
	ПолеНабораДанных             = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	ПолеНабораДанных.Поле        = ИмяПоля;
	ПолеНабораДанных.ПутьКДанным = ИмяПоля;
	ПолеНабораДанных.ТипЗначения = Новый ОписаниеТипов(ТипЗначения);
	
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получить таблицу настроек ценообразования.
// 
// Параметры:
//  СписокНоменклатуры - Массив Из СправочникСсылка.Номенклатура
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Получить таблицу настроек ценообразования
Функция ПолучитьТаблицуНастроекЦенообразования(СписокНоменклатуры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	ВидыНоменклатуры.Ссылка КАК ВидНоменклатуры,
	|	ВЫБОР
	|		КОГДА
	|			ВидыНоменклатуры.НастройкиКлючаЦенПоХарактеристике = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПоХарактеристике,
	|	ВЫБОР
	|		КОГДА ВидыНоменклатуры.НастройкиКлючаЦенПоСерии = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПоСерии,
	|	ВЫБОР
	|		КОГДА ВидыНоменклатуры.НастройкиКлючаЦенПоУпаковке = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПоУпаковке
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО Номенклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
	|ГДЕ
	|	Номенклатура.Ссылка В (&СписокНоменклатуры)";
	
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли