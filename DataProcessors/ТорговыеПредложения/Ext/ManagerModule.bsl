#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

#Область Заказы

// Формирование заказов.
//
// Параметры:
//  ПараметрыПроцедуры - Структура - параметры выполнения процедуры:
//   * Товары - ТаблицаЗначений - таблица с товарами для заказа.
//   * ДополнительныеПараметры - Структура - дополнительные параметры:
//       ** Организация       - ОпределяемыйТип.Организация - организация отправитель.
//       ** КонтекстИсточника - Структура        - данные документа основания.
//       ** ЗарегистрироватьОрганизацию - Булево - признак регистрации организации в сервисе 1С:Бизнес-сеть.
//       ** Валюта            - СправочникСсылка  - валюта создания заказов.
//  АдресРезультата - Строка - адрес временного хранилища с результатом.
//
Процедура СформироватьЗаказы(Знач ПараметрыПроцедуры, Знач АдресРезультата) Экспорт
	
	МассивЗаказов = Новый Массив;
	
	Организация       = ПараметрыПроцедуры.ДополнительныеПараметры.Организация;
	КонтекстИсточника = ПараметрыПроцедуры.ДополнительныеПараметры.КонтекстИсточника;
	ТаблицаДоставки   = ПараметрыПроцедуры.ДополнительныеПараметры.Доставка;
	ИспользоватьБизнесСеть = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(КонтекстИсточника,
		"ЗапрашиватьПредложенияПоставщиков", -1) <> 2; // 2 - Сервис Бидзаар (Бизнес-сеть не используется)
	
	Отказ = Ложь;
	
	Если ИспользоватьБизнесСеть И Не БизнесСеть.ОрганизацияПодключена(Организация) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
			ПоместитьВоВременноеХранилище(Ложь, АдресРезультата);
		КонецЕсли;
		Возврат;
	КонецЕсли;

	КолонкиКонтрагента = "Контрагент, ИдентификаторКонтрагента, НаименованиеКонтрагента, ИННКонтрагента, КППКонтрагента";
	
	Если ПараметрыПроцедуры.ДополнительныеПараметры.Свойство("ПоляГруппировкиТоваровДляЗаказа") Тогда
		ПоляГруппировкиТоваровДляЗаказа = ПараметрыПроцедуры.ДополнительныеПараметры.ПоляГруппировкиТоваровДляЗаказа;
		ПоляОтбораТоваровКонтрагента = ПараметрыПроцедуры.ДополнительныеПараметры.ПоляГруппировкиТоваровДляЗаказа;
		
		ИменаПолейГруппировки = СтрРазделить(ПараметрыПроцедуры.ДополнительныеПараметры.ПоляГруппировкиТоваровДляЗаказа, ",", Ложь);
		Для Каждого ИмяПоляГруппировки Из ИменаПолейГруппировки Цикл
			Если СтрНайти(КолонкиКонтрагента, ИмяПоляГруппировки) = 0 Тогда
				КолонкиКонтрагента = КолонкиКонтрагента + "," + ИмяПоляГруппировки;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ПоляГруппировкиТоваровДляЗаказа = "ИдентификаторКонтрагента, Идентификатор";
		ПоляОтбораТоваровКонтрагента = "ИдентификаторКонтрагента";
	КонецЕсли;
	
	Контрагенты = ПараметрыПроцедуры.Товары.Скопировать(Новый Структура("Пометка", Истина), КолонкиКонтрагента);
	Контрагенты.Свернуть(КолонкиКонтрагента);
	
	Товары = ПараметрыПроцедуры.Товары.Скопировать(Новый Структура("Пометка", Истина));
	Товары.Индексы.Добавить(ПоляГруппировкиТоваровДляЗаказа);
	
	Для каждого СтрокаКонтрагента Из Контрагенты Цикл
		
		Отказ = Ложь;
		
		// Создание/поиск контрагента.
		Контрагент = СтрокаКонтрагента.Контрагент;
		Если Не ЗначениеЗаполнено(Контрагент) Тогда
			РеквизитыКонтрагента = Новый Структура;
			РеквизитыКонтрагента.Вставить("ИНН", СтрокаКонтрагента.ИННКонтрагента);
			РеквизитыКонтрагента.Вставить("КПП", СтрокаКонтрагента.КППКонтрагента);
			Контрагент = ОбщегоНазначенияБЭД.НайтиСсылку("Контрагенты",, РеквизитыКонтрагента);
			Если Контрагент = Неопределено Тогда
				РеквизитыКонтрагента.Вставить("Наименование", СтрокаКонтрагента.НаименованиеКонтрагента);
				БизнесСетьПереопределяемый.СоздатьКонтрагентаПоРеквизитам(РеквизитыКонтрагента, Контрагент, Отказ);
				Если Отказ Тогда
					Возврат;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(Контрагент) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Отбор = Новый Структура(ПоляОтбораТоваровКонтрагента);
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаКонтрагента);
		
		ТоварыКонтрагента = Товары.Скопировать(Отбор);
		
		ПроверитьСопоставлениеНоменклатурыКонтрагентов(Контрагент, ТоварыКонтрагента);
		
		// Получение списка идентификаторов прайс-листов из товаров.
		СписокИдентификаторовПрайсЛистов = Новый Массив;
		Для Каждого СтрокаЗаказа Из ТоварыКонтрагента Цикл
			ИдентификаторПрайсЛиста = Лев(СтрокаЗаказа.ВнутреннийИдентификатор,
				СтрНайти(СтрокаЗаказа.ВнутреннийИдентификатор, "#") - 1);
			Если Не ПустаяСтрока(ИдентификаторПрайсЛиста) Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокИдентификаторовПрайсЛистов,
					ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторПрайсЛиста), Истина);
			КонецЕсли;
		КонецЦикла;
		
		// Создание документа заказ.
		Валюта = ПараметрыПроцедуры.ДополнительныеПараметры.Валюта;
		
		ДанныеЗаказа = Новый Структура;
		ДанныеЗаказа.Вставить("Организация",       Организация);
		ДанныеЗаказа.Вставить("Контрагент",        Контрагент);
		ДанныеЗаказа.Вставить("Валюта",            Валюта);
		ДанныеЗаказа.Вставить("СтрокиЗаказа",      ТоварыКонтрагента);
		ДанныеЗаказа.Вставить("КонтекстИсточника", КонтекстИсточника);
		
		// Доставка.
		ДанныеЗаказа.Вставить("СпособДоставки",             Неопределено);
		ДанныеЗаказа.Вставить("АдресДоставки",              "");
		ДанныеЗаказа.Вставить("АдресДоставкиЗначенияПолей", "");
		СтрокаДоставки = ТаблицаДоставки.Найти(СтрокаКонтрагента.ИдентификаторКонтрагента, "ИдентификаторКонтрагента");
		Если СтрокаДоставки <> Неопределено Тогда
			ДанныеЗаказа.Вставить("СпособДоставки",             СтрокаДоставки.СпособДоставки);
			ДанныеЗаказа.Вставить("АдресДоставки",              СтрокаДоставки.АдресДоставки);
			ДанныеЗаказа.Вставить("АдресДоставкиЗначенияПолей", СтрокаДоставки.АдресДоставкиЗначенияПолей);
		КонецЕсли;
		
		// Создание документа в информационной базе.
		ДокументОбъект = Неопределено;
		ТорговыеПредложенияПереопределяемый.СоздатьДокументЗаказПоставщикуНаОснованииТорговогоПредложения(ДанныеЗаказа,
			ДокументОбъект, Отказ);
			
		Если Отказ Или ДокументОбъект = Неопределено Тогда
			Заказ = СохранениеПоставщикаСОшибкойСозданияДокумента(Контрагент, Валюта, Организация, ДанныеЗаказа);
			МассивЗаказов.Добавить(Заказ);
			Продолжить;
		КонецЕсли;
		
		// Сохраним документ, так он может быть подготовлен без сохранения.
		Если Не ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				// Проведение документа.
				ТекстОшибки = НСтр("ru = 'Проведение заказа торгового предложения'",
					ОбщегоНазначения.КодОсновногоЯзыка());
				ЗаписьЖурналаРегистрации(ТекстОшибки, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(),,
					ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Попытка
					// Если не удалось проведение, документ сохраняется без проведения.
					ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				Исключение
					Текст = НСтр("ru = 'Создание заказа торгового предложения'",
					ОбщегоНазначения.КодОсновногоЯзыка());
					ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(),,
						ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					Заказ = СохранениеПоставщикаСОшибкойСозданияДокумента(Контрагент, Валюта, Организация, ДанныеЗаказа);
					МассивЗаказов.Добавить(Заказ);
					Продолжить;
				КонецПопытки;
			КонецПопытки;
		КонецЕсли;
		
		// Сохранение результата создания.
		Заказ = Новый Структура(ПоляГруппировкиТоваровДляЗаказа);
		ЗаполнитьЗначенияСвойств(Заказ, СтрокаКонтрагента);
		Заказ.Вставить("Ссылка", ДокументОбъект.Ссылка);
		Заказ.Вставить("ИдентификаторыПредложений", СписокИдентификаторовПрайсЛистов);
		Заказ.Вставить("ЗаказСоздан", Истина);
		
		МассивЗаказов.Добавить(Заказ);
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Истина, АдресРезультата);
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Пользователи.АвторизованныйПользователь(), МассивЗаказов, "ФормированиеЗаказов");
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

// Отправление заказов по торговым предложениям продавцу.
//
// Параметры:
//  ПараметрыПроцедуры - Структура - параметры выполнения процедуры:
//    * Заказы - ТаблицаЗначений - таблица заказов для отправки:
//      ** Ссылка - ДокументСсылка - ссылка на документ.
//    * ДополнительныеПараметры - Структура - дополнительные параметры
//                                см. ФормированиеЗаказов.ОписаниеСопроводительнойИнформацииЗаказа():
//        ** Организация - СправочникСсылка.Организации - организация отправитель.
//        ** СопроводительнаяИнформация - Строка - сопроводительная информация для отправки.
//        ** УведомлятьПоПочте - Булево - признак необходимости уведомления по электронной почте о загрузке документа.
//        ** КонтактноеЛицо - Строка - контактное лицо отправителя.
//        ** Телефон - Строка - телефон контактного лица отправителя.
//        ** ЭлектроннаяПочта - Строка - электронная почта контактного лица отправителя.
//        ** УникальныйИдентификатор - УникальныйИдентификатор - идентификатор для хранения электронного документа.
//  АдресРезультата - Строка - адрес временного хранилища с результатом.
//
Процедура ОтправитьЗаказы(Знач ПараметрыПроцедуры, Знач АдресРезультата) Экспорт
	
	// Подготовка электронного документа.
	УникальныйИдентификатор = ПараметрыПроцедуры.ДополнительныеПараметры.УникальныйИдентификатор;
	
	ТаблицаНеОтправленныхЗаказов = ПараметрыПроцедуры.Заказы.Скопировать(
		Новый Структура("Пометка", Истина),
		"Ссылка, ИдентификаторыПредложений");
	МассивСсылок = ТаблицаНеОтправленныхЗаказов.ВыгрузитьКолонку("Ссылка");

	СписокЗаказов = Новый ТаблицаЗначений;
	СписокЗаказов.Колонки.Добавить("Ссылка");
	СписокЗаказов.Колонки.Добавить("Поставщик");
	СписокЗаказов.Колонки.Добавить("ПоставщикИНН");
	СписокЗаказов.Колонки.Добавить("ПоставщикКПП");
	СписокЗаказов.Колонки.Добавить("НаименованиеФайла");
	СписокЗаказов.Колонки.Добавить("ВидЭД");
	СписокЗаказов.Колонки.Добавить("СуммаДокумента");
	СписокЗаказов.Колонки.Добавить("АдресХранилища");
	СписокЗаказов.Колонки.Добавить("ТипПредставления");
	СписокЗаказов.Колонки.Добавить("АдресХранилищаПредставления");
	СписокЗаказов.Колонки.Добавить("ИдентификаторыПредложений");
	
	ОписанияОбъектовУчета = ОбменСКонтрагентамиИнтеграция.ОписанияОбъектовУчета(МассивСсылок);
	
	ДанныеДляВыгрузки = ОбменСКонтрагентамиИнтеграция.СформироватьДанныеДляВыгрузки(ОписанияОбъектовУчета);

	ТипыДокументов = БизнесСеть.ВидыДокументовСервиса();
	
	Если ДанныеДляВыгрузки.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВладельцыЭД", ДанныеДляВыгрузки.ВыгрузитьКолонку("ОбъектУчета"));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВладелецЭД.Ссылка         КАК СсылкаНаВладельцаЭД,
	|	ВладелецЭД.Номер          КАК Номер,
	|	ВладелецЭД.Дата           КАК Дата,
	|	ВладелецЭД.Контрагент     КАК Поставщик,
	|	ВладелецЭД.Контрагент.ИНН КАК ПоставщикИНН,
	|	ВладелецЭД.Контрагент.КПП КАК ПоставщикКПП,
	|	ВладелецЭД.СуммаДокумента КАК СуммаДокумента
	|ИЗ
	|	&ТаблицаВладелецЭД КАК ВладелецЭД
	|ГДЕ
	|	ВладелецЭД.Ссылка В (&ВладельцыЭД)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТаблицаВладелецЭД", ДанныеДляВыгрузки[0].ОбъектУчета.Метаданные().ПолноеИмя());
	ЗначенияРеквизитовЗаказов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицы Из ДанныеДляВыгрузки Цикл
		
		Тип = ТипыДокументов.НайтиПоЗначению(СтрокаТаблицы.ТипДокумента);
		Если Тип = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'Не определен тип документа.'");
		КонецЕсли;
		
		ЗначенияРеквизитовЗаказа = ЗначенияРеквизитовЗаказов.Найти(
			СтрокаТаблицы.ОбъектУчета, "СсылкаНаВладельцаЭД");
			
		СтрокаТаблицыЗаказов = СписокЗаказов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыЗаказов, ЗначенияРеквизитовЗаказа);
		СтрокаТаблицыЗаказов.Ссылка = СтрокаТаблицы.ОбъектУчета;
		СтрокаТаблицыЗаказов.ВидЭД  = СтрокаТаблицы.ТипДокумента;
		
		СтрокаТаблицыЗаказов.НаименованиеФайла = СтрокаТаблицы.Наименование;
		
		СтрокаТаблицыЗаказов.АдресХранилища = ПоместитьВоВременноеХранилище(СтрокаТаблицы.ДвоичныеДанныеПакета, УникальныйИдентификатор);
		СтрокаТаблицыЗаказов.АдресХранилищаПредставления = ПоместитьВоВременноеХранилище(СтрокаТаблицы.ДвоичныеДанныеПредставления,
			УникальныйИдентификатор);
		СтрокаИдентификаторыПредложений = ТаблицаНеОтправленныхЗаказов.НайтиСтроки(Новый Структура("Ссылка",
			СтрокаТаблицы.ОбъектУчета));
		СтрокаТаблицыЗаказов.ИдентификаторыПредложений = СтрокаИдентификаторыПредложений[0].ИдентификаторыПредложений.ВыгрузитьЗначения();
		
	КонецЦикла;
	
	// Отправка электронного документа.
	Организация       = ПараметрыПроцедуры.ДополнительныеПараметры.Организация;
	УведомлятьПоПочте = ПараметрыПроцедуры.ДополнительныеПараметры.УведомлятьПоПочте;
	КонтактноеЛицо    = ПараметрыПроцедуры.ДополнительныеПараметры.КонтактноеЛицо;
	Телефон           = ПараметрыПроцедуры.ДополнительныеПараметры.Телефон;
	ЭлектроннаяПочта  = ПараметрыПроцедуры.ДополнительныеПараметры.ЭлектроннаяПочта;
	СопроводительнаяИнформация = ПараметрыПроцедуры.ДополнительныеПараметры.СопроводительнаяИнформация;
	
	Отказ = Ложь;
	МассивСтатусовОтправкиЗаказов = Новый Массив;
	Для Каждого СтрокаТаблицыЗаказов Из СписокЗаказов Цикл
		
		Поставщик = Новый Структура;
		Поставщик.Вставить("Наименование", СтрокаТаблицыЗаказов.Поставщик);
		Поставщик.Вставить("ИНН",          СтрокаТаблицыЗаказов.ПоставщикИНН);
		Поставщик.Вставить("КПП",          СтрокаТаблицыЗаказов.ПоставщикКПП);
		
		ПараметрыКоманды = Новый Структура;
		ПараметрыКоманды.Вставить("УникальныйИдентификатор",     Организация.УникальныйИдентификатор());
		ПараметрыКоманды.Вставить("Отправитель",                 Организация);
		ПараметрыКоманды.Вставить("Получатель",                  Поставщик);
		ПараметрыКоманды.Вставить("Заголовок",                   СтрокаТаблицыЗаказов.НаименованиеФайла);
		ПараметрыКоманды.Вставить("Ссылка",                      СтрокаТаблицыЗаказов.Ссылка);
		ПараметрыКоманды.Вставить("ВидЭД",                       СтрокаТаблицыЗаказов.ВидЭД);
		ПараметрыКоманды.Вставить("Сумма",                       СтрокаТаблицыЗаказов.СуммаДокумента);
		ПараметрыКоманды.Вставить("ТипПредставления",            "");
		ПараметрыКоманды.Вставить("СопроводительнаяИнформация",  СопроводительнаяИнформация);
		ПараметрыКоманды.Вставить("КонтактноеЛицо",              КонтактноеЛицо);
		ПараметрыКоманды.Вставить("Телефон",                     Телефон);
		ПараметрыКоманды.Вставить("ЭлектроннаяПочта",            ЭлектроннаяПочта);
		ПараметрыКоманды.Вставить("УведомлятьПоПочте",           УведомлятьПоПочте);
		ПараметрыКоманды.Вставить("ИдентификаторыПредложений",   СтрокаТаблицыЗаказов.ИдентификаторыПредложений);
		ПараметрыКоманды.Вставить("ДвоичныеДанныеПакета",        ПолучитьИзВременногоХранилища(СтрокаТаблицыЗаказов.АдресХранилища));
		ДвоичныеДанныеПредставления = БизнесСеть.ПредставлениеДокументаДляОтправки(
			ПолучитьИзВременногоХранилища(СтрокаТаблицыЗаказов.АдресХранилищаПредставления));
		ПараметрыКоманды.Вставить("ДвоичныеДанныеПредставления", ДвоичныеДанныеПредставления);
		
		ПараметрыВыполнения = БизнесСеть.ПараметрыКомандыОтправитьДокумент(ПараметрыКоманды, Отказ);
		Результат = БизнесСеть.ВыполнитьКомандуСервиса(ПараметрыВыполнения, Отказ);
		
		СтатусОтправкиЗаказа = Новый Структура;
		СтатусОтправкиЗаказа.Вставить("Ссылка", СтрокаТаблицыЗаказов.Ссылка);
		СтатусОтправкиЗаказа.Вставить("Статус",
			?(Отказ, НСтр("ru = 'Ошибка отправки'"), НСтр("ru = 'Отправлен'")));
		СтатусОтправкиЗаказа.Вставить("Пометка", Отказ);
		МассивСтатусовОтправкиЗаказов.Добавить(СтатусОтправкиЗаказа);
		
	КонецЦикла;
	
	Если СписокЗаказов.Количество() <> МассивСсылок.Количество() Тогда
		Для Каждого ЗначениеМассива Из МассивСсылок Цикл
			Если СписокЗаказов.Найти(ЗначениеМассива) = Неопределено Тогда
				СтатусОтправкиЗаказа = Новый Структура;
				СтатусОтправкиЗаказа.Вставить("Ссылка", ЗначениеМассива);
				СтатусОтправкиЗаказа.Вставить("Статус", НСтр("ru = 'Ошибка формирования'"));
				СтатусОтправкиЗаказа.Вставить("Пометка", Истина);
				МассивСтатусовОтправкиЗаказов.Добавить(СтатусОтправкиЗаказа);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	ПоместитьВоВременноеХранилище(МассивСтатусовОтправкиЗаказов, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область СтатистикаСостояний

Процедура ОбновитьСтатистикуСостояний(Знач ПараметрыПроцедуры, Знач АдресРезультата) Экспорт 
	Перем ЧастичныйПодсчетОпубликованных;

	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"Обработка.ТорговыеПредложения.ОбновитьСтатистикуСостояний");
	
	Запрос = ЗапросСтатистикаСостояний(ПараметрыПроцедуры, ЧастичныйПодсчетОпубликованных);
	
	ДанныеСтатистики = Новый Структура;
	ДанныеСтатистики.Вставить("КоличествоОпубликовано"         , 0);
	ДанныеСтатистики.Вставить("КоличествоОжидаетПубликации"    , 0);
	ДанныеСтатистики.Вставить("КоличествоОшибки"               , 0);
	ДанныеСтатистики.Вставить("ЧастичныйПодсчетОпубликованных" , ЧастичныйПодсчетОпубликованных);
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Если ВыборкаЗапроса.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеСтатистики, ВыборкаЗапроса);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ДанныеСтатистики, АдресРезультата);
	
	КоличествоОбщее = ДанныеСтатистики.КоличествоОжидаетПубликации + ДанныеСтатистики.КоличествоОшибки;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, КоличествоОбщее / 100000);
	
КонецПроцедуры

#КонецОбласти 

#Область КарточкаПубликуемогоТорговогоПредложения

Процедура СформироватьКарточкуПубликуемогоТорговогоПредложения(Знач ПараметрыПроцедуры, Знач АдресРезультата) Экспорт
	Перем ТребуетсяВыполнятьПроверку;

	Если ПараметрыПроцедуры.Свойство("ТребуетсяВыполнятьПроверку", ТребуетсяВыполнятьПроверку) И ТребуетсяВыполнятьПроверку Тогда
		ТорговыеПредложенияСлужебный.ПроверитьЗаписиТорговыеПредложенияТорговойПлощадки(
			ПараметрыПроцедуры.ПозицияТорговогоПредложения);
	КонецЕсли;
	
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"Обработка.ТорговыеПредложения.Форма.КарточкаДляРедактирования.СформироватьКарточкуПубликуемогоТорговогоПредложения");
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ДанныеИзображений = Новый Массив;
	ДанныеРасшифровки = Новый Структура;
	
	ДанныеКарточки = Новый Структура;
	ДанныеКарточки.Вставить("ТабличныйДокумент"  , ТабличныйДокумент);
	ДанныеКарточки.Вставить("ДанныеИзображений"  , ДанныеИзображений);
	ДанныеКарточки.Вставить("ДанныеРасшифровки"  , ДанныеРасшифровки);
	ДанныеКарточки.Вставить("ЕстьПредупреждения" , ЕстьПредупреждения(ПараметрыПроцедуры.ПозицияТорговогоПредложения));
	
	Макет = ПолучитьМакет("ПФ_MXL_КарточкаПубликацииТорговогоПредложения");
	
	РежимРедактирования = ПараметрыПроцедуры.РежимРедактирования;
	
	ДоступностьРеквизитов = ТорговыеПредложенияСлужебный.ПолучитьДоступностьРеквизитов();
	ТаблицаРеквизитов = СведенияОДоступностиРеквизитов(ДоступностьРеквизитов);
	
	ДанныеТорговогоПредложения = Новый Структура("ПрайсЛист, Номенклатура, Характеристика, Упаковка");
	ЗаполнитьЗначенияСвойств(ДанныеТорговогоПредложения, ПараметрыПроцедуры.ПозицияТорговогоПредложения);
	
	СведенияОТорговомПредложении = ТорговыеПредложенияСлужебный.ПолучитьДанныеПубликации(
		"ПрайсЛисты, ПрайсЛистыСлужебный, Контакты, Товары, ТоварыСлужебный, Свойства, Изображения", ДанныеТорговогоПредложения);
	
	ВыборкаЗапросаПрайсЛисты = СведенияОТорговомПредложении.ПрайсЛисты.Выбрать();
	ВыборкаЗапросаПрайсЛисты.Следующий();
	
	ВыборкаЗапросаПрайсЛистыСлужебный = СведенияОТорговомПредложении.ПрайсЛистыСлужебный.Выбрать();
	ВыборкаЗапросаПрайсЛистыСлужебный.Следующий();
	
	ВыборкаЗапросаКонтакты = СведенияОТорговомПредложении.Контакты.Выбрать();
	ВыборкаЗапросаКонтакты.Следующий();
	
	ВыборкаЗапросаТоварыСлужебный = СведенияОТорговомПредложении.ТоварыСлужебный.Выбрать();
	
	Если ВыборкаЗапросаТоварыСлужебный.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Товар был удален из торгового предложения'");
	КонецЕсли;
	
	ВыборкаЗапросаТоварыСлужебный.Следующий();
	
	ДанныеТорговогоПредложения.Вставить("ИдентификаторКатегории"           , ВыборкаЗапросаТоварыСлужебный.ИдентификаторКатегории);
	ДанныеТорговогоПредложения.Вставить("ИдентификаторНоменклатурыСервиса" , ВыборкаЗапросаТоварыСлужебный.ИдентификаторНоменклатурыСервиса);
	
	ДанныеКарточки.Вставить("Публикуется", ВыборкаЗапросаТоварыСлужебный.Публикуется);
	
	ДанныеТорговогоПредложения.Вставить("Свойства"    , СведенияОТорговомПредложении.Свойства.Выгрузить());
	ДанныеТорговогоПредложения.Вставить("Изображения" , СведенияОТорговомПредложении.Изображения.Выгрузить());
	
	ДанныеТорговогоПредложения.Вставить("ВидНоменклатуры", ВыборкаЗапросаТоварыСлужебный.ВидНоменклатуры);
	ДанныеТорговогоПредложения.Вставить("Родитель", ВыборкаЗапросаТоварыСлужебный.Родитель);
	
	ДобавитьДанныеТаблицы(ДанныеТорговогоПредложения, ТаблицаРеквизитов, "ПрайсЛисты",
		ВыборкаЗапросаПрайсЛисты, РежимРедактирования);
	
	ДобавитьДанныеТаблицы(ДанныеТорговогоПредложения, ТаблицаРеквизитов, "Контакты",
		ВыборкаЗапросаКонтакты, РежимРедактирования);
	// Подменяем адрес электронной почты выбранным в настройках торгового предложения.
	ДанныеТорговогоПредложения.Контакты_ЭлектроннаяПочта = ВыборкаЗапросаПрайсЛистыСлужебный.АдресЭлектроннойПочты;
	
	ДобавитьДанныеТаблицы(ДанныеТорговогоПредложения, ТаблицаРеквизитов, "Товары",
		ВыборкаЗапросаТоварыСлужебный, РежимРедактирования);
	
	ОпределитьНоменклатуруСервиса(ДанныеТорговогоПредложения, РежимРедактирования
		И ДоступностьРеквизитов["ТоварыСлужебный.НоменклатураСервиса"]);
	ОпределитьКатегориюНоменклатуры(ДанныеТорговогоПредложения, РежимРедактирования
		И ДоступностьРеквизитов["ТоварыСлужебный.КатегорияСервиса"]);
		
	Если ДанныеТорговогоПредложения.ВариантЗаполненияРеквизитовСервиса = "ДанныеСервиса" Тогда
		ДанныеТорговогоПредложения.Товары_Артикул = ДанныеТорговогоПредложения.ДанныеНоменклатурыСервиса.Артикул;
		УстановитьНевозможностьРедактированияРасшифровки(ДанныеТорговогоПредложения, "Расшифровка_Товары_Артикул",
			НСтр("ru = 'Для товаров, сопоставленных с 1С:Номенклатура, артикул публикуется в соответствии с данными сервиса.'"));
	ИначеЕсли ДанныеТорговогоПредложения.ВариантЗаполненияРеквизитовСервиса = "СведенияОбОграниченииДоступа" Тогда
		ДанныеТорговогоПредложения.Товары_Артикул = НСтр("ru = 'По данным 1С:Номенклатура'");
		УстановитьОграничениеПолученияДанныхКарточки(ДанныеТорговогоПредложения, "Расшифровка_Товары_Артикул");
	КонецЕсли;
	
	Если ДанныеТорговогоПредложения.СопоставленаРаботаСНоменклатурой
		И ДанныеТорговогоПредложения.Свойство("ДанныеНоменклатурыСервиса") Тогда
		КодЕдиницыИзмерения = ДанныеТорговогоПредложения.ДанныеНоменклатурыСервиса.ЕдиницаИзмерения.ОКЕИ;
		УстановитьНевозможностьРедактированияРасшифровки(ДанныеТорговогоПредложения, "Расшифровка_Товары_НаименованиеУпаковки",
			НСтр("ru = 'Для товаров, сопоставленных с 1С:Номенклатура, единица измерения публикуется в соответствии с данными сервиса.'"));
	ИначеЕсли ДанныеТорговогоПредложения.СопоставленаРаботаСНоменклатурой Тогда
	Иначе
		КодЕдиницыИзмерения = ТорговыеПредложенияПовтИсп.КодЕдиницыИзмерения(ВыборкаЗапросаТоварыСлужебный.ЕдиницаИзмерения);
	КонецЕсли;
	ПараметрыЕдиницыИзмерения = ТорговыеПредложенияПовтИсп.ПараметрыЕдиницыИзмеренияПоКоду(КодЕдиницыИзмерения);
	ПредставлениеЕдиницыИзмерения = ПараметрыЕдиницыИзмерения.Представление;
	
	Если ЗначениеЗаполнено(ВыборкаЗапросаТоварыСлужебный.НаименованиеУпаковки)
			И ВРег(ВыборкаЗапросаТоварыСлужебный.НаименованиеУпаковки) <> ВРег(ПредставлениеЕдиницыИзмерения) Тогда
		ПредставлениеЕдиницыИзмерения = ВыборкаЗапросаТоварыСлужебный.НаименованиеУпаковки
			+ " ("
			+ ?(ВыборкаЗапросаТоварыСлужебный.ЧислительУпаковки > 1 И ВыборкаЗапросаТоварыСлужебный.ЗнаменательУпаковки <= 1,
				Строка(ВыборкаЗапросаТоварыСлужебный.ЧислительУпаковки) + " ", "")
			+ ?(ВыборкаЗапросаТоварыСлужебный.ЧислительУпаковки > 1 И ВыборкаЗапросаТоварыСлужебный.ЗнаменательУпаковки > 1, 
				Строка(ВыборкаЗапросаТоварыСлужебный.ЧислительУпаковки)
				+ "/" + ВыборкаЗапросаТоварыСлужебный.ЗнаменательУпаковки, "")
			+ ПредставлениеЕдиницыИзмерения + ")";
	КонецЕсли;
	
	ДанныеТорговогоПредложения.Вставить("Товары_НаименованиеУпаковки", ПредставлениеЕдиницыИзмерения);
	
	Если ЗначениеЗаполнено(ВыборкаЗапросаПрайсЛисты.Валюта) Тогда
		НаименованиеВалюты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаЗапросаПрайсЛисты.Валюта, "Наименование");
	Иначе
		НаименованиеВалюты = "";
	КонецЕсли;
	
	Если НЕ ВыборкаЗапросаПрайсЛистыСлужебный.ПубликоватьЦены = ИСТИНА Тогда
		ЦенаСтрокой = НСтр("ru = 'по запросу'");
	ИначеЕсли ЗначениеЗаполнено(ВыборкаЗапросаТоварыСлужебный.Цена) Тогда
		ЦенаСтрокой = СтрШаблон("%1 %2", Формат(ВыборкаЗапросаТоварыСлужебный.Цена, "ЧЦ=15; ЧДЦ=2"), НаименованиеВалюты);
	Иначе
		ЦенаСтрокой = НСтр("ru = 'не задана'");
	КонецЕсли;
	
	Если ВыборкаЗапросаТоварыСлужебный.ЦенаВключаетНДС = Неопределено Тогда 
		ДанныеТорговогоПредложения.Вставить("Товары_СтавкаНДС"  , Строка(ВыборкаЗапросаТоварыСлужебный.СтавкаНДС));
	Иначе
		ДанныеТорговогоПредложения.Вставить("Товары_СтавкаНДС"  , СтрШаблон("%1, %2", Строка(ВыборкаЗапросаТоварыСлужебный.СтавкаНДС),
			?(ВыборкаЗапросаТоварыСлужебный.ЦенаВключаетНДС, НСтр("ru = 'входит в стоимость'"), НСтр("ru = 'не входит в стоимость'"))));
	КонецЕсли;
	
	ДанныеТорговогоПредложения.Вставить("Товары_Цена"           , ЦенаСтрокой);
	ДанныеТорговогоПредложения.Вставить("Товары_Наличие"        , ИнформацияНаличие(ВыборкаЗапросаТоварыСлужебный.Наличие));
	ДанныеТорговогоПредложения.Вставить("Товары_СрокПоставки"   , ИнформацияПоставка(ВыборкаЗапросаТоварыСлужебный.СрокПоставки));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Организация", ВыборкаЗапросаПрайсЛисты.Организация);
	
	УстановитьДанныеСлужебногоРеквизита(
		ДанныеТорговогоПредложения, 
		"ПрайсЛистыСлужебный.СпособДоставки", 
		ИнформацияСпособДоставки(ВыборкаЗапросаПрайсЛистыСлужебный), 
		РежимРедактирования, 
		ДоступностьРеквизитов, 
		ДополнительныеПараметры);
	
	Сведения = ОбщегоНазначенияБЭД.ДанныеЮрФизЛица(ВыборкаЗапросаПрайсЛисты.Организация);
	
	УстановитьДанныеПрикладногоРеквизита(ДанныеТорговогоПредложения, "ПрайсЛистыСлужебный.НаименованиеОрганизации", 
		Сведения.ОфициальноеНаименование, РежимРедактирования, ДоступностьРеквизитов);
	УстановитьДанныеПрикладногоРеквизита(ДанныеТорговогоПредложения, "ПрайсЛистыСлужебный.ИННОрганизации", 
		Сведения.ИНН, РежимРедактирования, ДоступностьРеквизитов);
	УстановитьДанныеПрикладногоРеквизита(ДанныеТорговогоПредложения, "ПрайсЛистыСлужебный.КППОрганизации", 
		Сведения.КПП, РежимРедактирования, ДоступностьРеквизитов);
		
	Отказ = Ложь;
	
	ПараметрыМетода = БизнесСетьКлиентСервер.ОписаниеИдентификацииОрганизацииКонтрагентов();
	ПараметрыМетода.ИНН = Сведения.ИНН;
	ПараметрыМетода.КПП = Сведения.КПП;
	
	РеквизитыКонтрагента = БизнесСеть.РеквизитыУчастника(ПараметрыМетода, Отказ);
	
	Если НЕ Отказ И Не РеквизитыКонтрагента = Неопределено Тогда
	
		Если РеквизитыКонтрагента.Свойство("Телефон") Тогда
			УстановитьДанныеПрикладногоРеквизита(ДанныеТорговогоПредложения, "ПрайсЛистыСлужебный.ТелефонОрганизации", 
				РеквизитыКонтрагента.Телефон, РежимРедактирования, ДоступностьРеквизитов);
		КонецЕсли;

		Если РеквизитыКонтрагента.Свойство("ЭлектроннаяПочта") Тогда
			УстановитьДанныеПрикладногоРеквизита(ДанныеТорговогоПредложения, "ПрайсЛистыСлужебный.ЭлектроннаяПочтаОрганизации", 
				РеквизитыКонтрагента.ЭлектроннаяПочта, РежимРедактирования, ДоступностьРеквизитов);
		КонецЕсли;
	
	КонецЕсли;
	
	Если ДанныеТорговогоПредложения.ОшибкаПолученияДанныхРаботаСНоменклатурой Тогда
		УстановитьИнформациюОбОшибкеРаботаСНоменклатурой(ДанныеТорговогоПредложения, "Товары_Артикул, Товары_НаименованиеУпаковки, ТоварыСлужебный_КатегорияСервиса");
	КонецЕсли;
	
	// Область Шапка.
	Шапка = Макет.ПолучитьОбласть("Шапка");
	ЗаполнитьЗначенияСвойств(Шапка.Параметры, ДанныеТорговогоПредложения);
	УстановитьРедактированиеОбластей(Шапка, ТаблицаРеквизитов);
	ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, Шапка, "Шапка");
	
	ЕстьПодсистемаРаботаСНоменклатурой = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой");
	
	// Область КатегорияСервиса.
	ОбластьКатегорияСервиса = Макет.ПолучитьОбласть("КатегорияСервиса");
	ЗаполнитьЗначенияСвойств(ОбластьКатегорияСервиса.Параметры, ДанныеТорговогоПредложения);
	УстановитьРедактированиеОбластей(ОбластьКатегорияСервиса, ТаблицаРеквизитов);
	ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент,
		ОбластьКатегорияСервиса, "КатегорияСервиса");
	
	Если ЕстьПодсистемаРаботаСНоменклатурой И ДанныеТорговогоПредложения.ПоказыватьНоменклатуруСервиса Тогда
		
		МодульРаботаСНоменклатурой = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатурой");
		Если МодульРаботаСНоменклатурой.ДоступнаФункциональностьПодсистемы() Тогда
			// Область НоменклатураСервиса.
			ОбластьНоменклатураСервиса = Макет.ПолучитьОбласть("НоменклатураСервиса");
			ЗаполнитьЗначенияСвойств(ОбластьНоменклатураСервиса.Параметры, ДанныеТорговогоПредложения);
			УстановитьРедактированиеОбластей(ОбластьНоменклатураСервиса, ТаблицаРеквизитов);
			ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент,
				ОбластьНоменклатураСервиса, "НоменклатураСервиса");
		КонецЕсли;
	КонецЕсли;
	
	ВысотаВставки = ТабличныйДокумент.ВысотаТаблицы;
	
	// Область Цена (левая колонка).
	ОбластьЦена = Макет.ПолучитьОбласть("Цена|Лево");
	ЗаполнитьЗначенияСвойств(ОбластьЦена.Параметры, ДанныеТорговогоПредложения);
	УстановитьРедактированиеОбластей(ОбластьЦена, ТаблицаРеквизитов);
	ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, ОбластьЦена, "Цена");
	
	// Область Условия.
	ОбластьУсловия = Макет.ПолучитьОбласть("Условия|Лево");
	ЗаполнитьЗначенияСвойств(ОбластьУсловия.Параметры, ДанныеТорговогоПредложения);
	УстановитьРедактированиеОбластей(ОбластьУсловия, ТаблицаРеквизитов);
	ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, ОбластьУсловия, "Условия");
	
	// Область Поставщик (правая колонка).
	ОбластьПраво = Макет.ПолучитьОбласть("Контрагент|Лево");
	ЗаполнитьЗначенияСвойств(ОбластьПраво.Параметры, ДанныеТорговогоПредложения);
	УстановитьРедактированиеОбластей(ОбластьПраво, ТаблицаРеквизитов);
	ОбластьВставки = ТабличныйДокумент.Область(ВысотаВставки + 1, ОбластьЦена.ШиринаТаблицы + 1,
		ВысотаВставки + ОбластьПраво.ВысотаТаблицы, ОбластьЦена.ШиринаТаблицы + ОбластьПраво.ШиринаТаблицы);
	ОбщегоНазначенияБЭД.ВставитьОбластьВТабличныйДокумент(
		ТабличныйДокумент, ОбластьПраво, "Контрагент",, ОбластьВставки);
	
	Если Не ЗначениеЗаполнено(ОбластьПраво.Параметры.ПрайсЛистыСлужебный_КППОрганизации) Тогда
		ТабличныйДокумент.УдалитьОбласть(ТабличныйДокумент.Области.ОбластьКППКонтрагента,
			ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ОбластьПраво.Параметры.ПрайсЛистыСлужебный_ТелефонОрганизации) Тогда
		ТабличныйДокумент.УдалитьОбласть(ТабличныйДокумент.Области.ОбластьТелефонКонтрагента,
			ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ОбластьПраво.Параметры.ПрайсЛистыСлужебный_ЭлектроннаяПочтаОрганизации) Тогда
		ТабличныйДокумент.УдалитьОбласть(ТабличныйДокумент.Области.ОбластьЭлектроннаяПочтаКонтрагента,
			ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ОбластьПраво.Параметры.ПрайсЛистыСлужебный_СайтОрганизации) Тогда
		ТабличныйДокумент.УдалитьОбласть(ТабличныйДокумент.Области.ОбластьСайтКонтрагента,
			ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЕсли;
	
	// Область Свойства.
	Если ДанныеТорговогоПредложения.СопоставленаРаботаСНоменклатурой Тогда
		ВывестиСвойстваСервиса(ТабличныйДокумент, Макет, ДанныеТорговогоПредложения, ТаблицаРеквизитов,
			РежимРедактирования, ДоступностьРеквизитов);
	Иначе
		ВывестиСвойства(ТабличныйДокумент, Макет, ДанныеТорговогоПредложения, ТаблицаРеквизитов,
			РежимРедактирования, ДоступностьРеквизитов);
	КонецЕсли;
	
	// Область Картинка.
	РедактированиеИзображенийРазрешено = РежимРедактирования И ДоступностьРеквизитов["Изображения.ФайлИзображения"];
	ДанныеКарточки.Вставить("РедактированиеИзображенийРазрешено", РедактированиеИзображенийРазрешено);
	ДанныеКарточки.Вставить("НоменклатураСервиса", Истина);
	Если ДанныеТорговогоПредложения.СопоставленаРаботаСНоменклатурой
		И ДанныеТорговогоПредложения.Свойство("ДанныеНоменклатурыСервиса") Тогда
		Изображения = ДанныеТорговогоПредложения.ДанныеНоменклатурыСервиса.Изображения.ВыгрузитьКолонку("ИзображениеURL");
		ОбластьКартинка = Макет.ПолучитьОбласть("Картинка");
		ВывестиИзображения(Изображения, ОбластьКартинка, ТабличныйДокумент, ДанныеКарточки.ДанныеИзображений);
	ИначеЕсли ТорговыеПредложенияСлужебный.ПубликоватьИзображенияТоваровПоставщика()
		И НЕ ДанныеТорговогоПредложения.СопоставленаРаботаСНоменклатурой Тогда
		ДанныеКарточки.Вставить("НоменклатураСервиса", Ложь);
		ОбластьКартинка = Макет.ПолучитьОбласть("Картинка");
		Изображения = ДанныеТорговогоПредложения.Изображения.ВыгрузитьКолонку("ФайлИзображения");
		ВывестиИзображенияПоставщика(Изображения, ОбластьКартинка, ТабличныйДокумент,
			ДанныеКарточки.ДанныеИзображений, РедактированиеИзображенийРазрешено);
	КонецЕсли;
	
	ТабличныйДокумент.ПоказатьУровеньГруппировокСтрок(0);
		
	ПоместитьВоВременноеХранилище(ДанныеКарточки, АдресРезультата);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, 1);

КонецПроцедуры

#КонецОбласти 

#Область ДанныеДиагностики

Процедура ПолучитьДанныеДиагностики(Знач ПараметрыПроцедуры, Знач АдресРезультата) Экспорт
	
	ПозицииТорговыхПредложений = Новый Массив;
	
	Отбор = Новый Структура;
	ПрайсЛист = Метаданные.ОпределяемыеТипы.ТорговоеПредложение.Тип.ПривестиЗначение();
	
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"Обработка.ТорговыеПредложения.ПолучитьДанныеДиагностики");
	
	ПараметрыПроцедуры.Свойство("Отбор", Отбор);
	
	ОтборДляОбновления = Новый Структура;
	СкопироватьСвойстваСтруктуры(ОтборДляОбновления, Отбор, "ТорговоеПредложение, ПрайсЛист, Номенклатура, Характеристика, Упаковка");
	
	ПараметрыОбновленияТорговыхПредложений = Новый Структура;
	ПараметрыОбновленияТорговыхПредложений.Вставить("Отбор", ОтборДляОбновления);
	
	ТорговыеПредложенияСлужебный.ОбновитьТорговыеПредложенияТорговойПлощадки(ПараметрыОбновленияТорговыхПредложений, АдресРезультата);
	
	Если ПараметрыПроцедуры.ТребуетсяВыполнитьПроверкуДанных Тогда
		ТорговыеПредложенияСлужебный.ПроверитьЗаписиТорговыеПредложенияТорговойПлощадки(Отбор);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДанных.ПрайсЛист КАК ПрайсЛист,
	|	ТаблицаДанных.Номенклатура КАК Номенклатура,
	|	ТаблицаДанных.Характеристика КАК Характеристика,
	|	ТаблицаДанных.Упаковка КАК Упаковка,
	|	ТаблицаДанных.ПричинаИсключенияИзПубликации КАК ПричинаИсключенияИзПубликации,
	|	ТаблицаДанных.КонтрольРеквизитов КАК КонтрольРеквизитов,
	|	ТаблицаДанных.РеквизитыПредупреждений КАК РеквизитыПредупреждений,
	|	ТаблицаДанных.ОписаниеОшибки КАК ОписаниеОшибки,
	|	ТаблицаДанных.СостояниеПубликацииТорговыхПредложений КАК СостояниеПубликацииТорговыхПредложений,
	|	СостоянияСинхронизацииТорговыеПредложения.Состояние КАК Состояние,
	|	СостоянияСинхронизацииТорговыеПредложения.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.СостоянияСинхронизацииТорговыеПредложения КАК СостоянияСинхронизацииТорговыеПредложения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТорговыеПредложенияТорговойПлощадки КАК ТаблицаДанных
	|		ПО СостоянияСинхронизацииТорговыеПредложения.ТорговоеПредложение = ТаблицаДанных.ПрайсЛист
	|ГДЕ
	|	НЕ ТаблицаДанных.ОтключитьПубликацию";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	
	Если ЗначениеЗаполнено(Отбор) Тогда
		
		Если Отбор.Свойство("ПрайсЛист", ПрайсЛист) Тогда
			СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор.Добавить("ТаблицаДанных.ПрайсЛист = &ПрайсЛист");
			Запрос.УстановитьПараметр("ПрайсЛист", ПрайсЛист);
		КонецЕсли;
		
		Если Отбор.Свойство("ПозицииТорговыхПредложений", ПозицииТорговыхПредложений) Тогда
			
			ТаблицаТорговыхПредложений = Новый ТаблицаЗначений;
			ТаблицаТорговыхПредложений.Колонки.Добавить("ПрайсЛист"      , Метаданные.ОпределяемыеТипы.ТорговоеПредложение.Тип);
			ТаблицаТорговыхПредложений.Колонки.Добавить("Номенклатура"   , Метаданные.ОпределяемыеТипы.НоменклатураБЭД.Тип);
			ТаблицаТорговыхПредложений.Колонки.Добавить("Характеристика" , Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатурыБЭД.Тип);
			ТаблицаТорговыхПредложений.Колонки.Добавить("Упаковка"       , Метаданные.ОпределяемыеТипы.УпаковкаНоменклатурыБЭД.Тип);
			
			Для Каждого ПозицияТорговогоПредложения Из ПозицииТорговыхПредложений Цикл
				ЗаполнитьЗначенияСвойств(ТаблицаТорговыхПредложений.Добавить(), ПозицияТорговогоПредложения);
			КонецЦикла;
			
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			ПоместитьТаблицуЗначенийВоВременнуюТаблицу(Запрос.МенеджерВременныхТаблиц, 
				"ТаблицаТорговыхПредложений", ТаблицаТорговыхПредложений);
			
			ОператорЗапроса = СхемаЗапроса.ПакетЗапросов[0].Операторы[0];
			ТорговыеПредложенияТорговойПлощадки = ОператорЗапроса.Источники[0];
			ОписаниеВременнойТаблицы = ОператорЗапроса.Источники.Добавить(Тип("ОписаниеВременнойТаблицыСхемыЗапроса"),
				"ТаблицаТорговыхПредложений", "ТаблицаТорговыхПредложений");
			
			ОписаниеВременнойТаблицы.Соединения.Очистить();
			
			ТекстыУсловий = Новый Массив;
			
			Для Каждого Колонка Из ТаблицаТорговыхПредложений.Колонки Цикл
				ОписаниеВременнойТаблицы.Источник.ДоступныеПоля.Добавить(Колонка.Имя, Колонка.ТипЗначения);
				ТекстыУсловий.Добавить(СтрШаблон("ТаблицаТорговыхПредложений.%1 = ТаблицаДанных.%1", Колонка.Имя));
			КонецЦикла;
			
			ТекстУсловия = СтрСоединить(ТекстыУсловий, " И ");
			ТорговыеПредложенияТорговойПлощадки.Соединения.Добавить(ОписаниеВременнойТаблицы, ТекстУсловия);
			ДобавленноеСоединение = ТорговыеПредложенияТорговойПлощадки.Соединения[
				ТорговыеПредложенияТорговойПлощадки.Соединения.Количество() - 1];
			ДобавленноеСоединение.ТипСоединения = ТипСоединенияСхемыЗапроса.Внутреннее;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТаблицаДиагностики = Новый ТаблицаЗначений;
	ТаблицаДиагностики.Колонки.Добавить("Ссылка"                  , Новый ОписаниеТипов);
	ТаблицаДиагностики.Колонки.Добавить("ПутьКДанным"             , Новый ОписаниеТипов("Строка"));
	ТаблицаДиагностики.Колонки.Добавить("ИмяРеквизита"            , Новый ОписаниеТипов("Строка"));
	ТаблицаДиагностики.Колонки.Добавить("ИмяРаздела"              , Новый ОписаниеТипов("Строка"));
	ТаблицаДиагностики.Колонки.Добавить("ПолноеИмяМетаданных"     , Новый ОписаниеТипов("Строка"));
	ТаблицаДиагностики.Колонки.Добавить("ТекстСообщения"          , Новый ОписаниеТипов("Строка"));
	ТаблицаДиагностики.Колонки.Добавить("ЯвляетсяОшибкой"         , Новый ОписаниеТипов("Булево"));
	ТаблицаДиагностики.Колонки.Добавить("ЯвляетсяПредупреждением" , Новый ОписаниеТипов("Булево"));
	
	ОбъектыМетаданных              = Новый Массив;
	ОбъектыВсе                     = Новый Массив;
	ОбъектыУчетныеДанные           = Новый Массив;
	ОбъектыСведенияОТоваре         = Новый Массив;
	ОбъектыКонтактнаяИнформация    = Новый Массив;
	ОбъектыОшибкиПубликацииСервиса = Новый Массив;
	Разделы                        = Новый Массив;
	
	КоличествоОбъектов = 0;
	
	СтрокаТорговогоПредложения = Новый Структура;
	СтрокаТорговогоПредложения.Вставить(
		"ПрайсЛист", Метаданные.ОпределяемыеТипы.ТорговоеПредложение.Тип.ПривестиЗначение());
	СтрокаТорговогоПредложения.Вставить(
		"Номенклатура", Метаданные.ОпределяемыеТипы.НоменклатураБЭД.Тип.ПривестиЗначение());
	СтрокаТорговогоПредложения.Вставить(
		"Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатурыБЭД.Тип.ПривестиЗначение());
	СтрокаТорговогоПредложения.Вставить(
		"Упаковка", Метаданные.ОпределяемыеТипы.УпаковкаНоменклатурыБЭД.Тип.ПривестиЗначение());
	СтрокаТорговогоПредложения.Вставить("Организация", Метаданные.ОпределяемыеТипы.Организация.Тип.ПривестиЗначение());
	СтрокаТорговогоПредложения.Вставить(
		"ПричинаИсключенияИзПубликации", 
		Метаданные.ОпределяемыеТипы.ПричинаИсключенияИзПубликацииТорговыеПредложения.Тип.ПривестиЗначение());
	СтрокаТорговогоПредложения.Вставить("ОписаниеОшибки", "");
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	ВыборкаДанных = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДанных.Следующий() Цикл
		
		ДанныеОпубликованы = ВыборкаДанных.СостояниеПубликацииТорговыхПредложений =
			Перечисления.СостоянияПубликацииПозицииТорговогоПредложения.Опубликовано
			И Не ВыборкаДанных.Состояние = Перечисления.СостоянияСинхронизацииТорговыеПредложения.ОшибкаСинхронизации;
		
		СписокРеквизитов = Новый СписокЗначений;
		Если НЕ ПустаяСтрока(ВыборкаДанных.КонтрольРеквизитов) Тогда
			ПроверяемыеРеквизиты = СтрРазделить(ВыборкаДанных.КонтрольРеквизитов, ";");
			
			Для Каждого ПроверяемыйРеквизит Из ПроверяемыеРеквизиты Цикл
				ЯвляетсяОшибкой = НЕ ДанныеОпубликованы;
				Если ПроверяемыйРеквизит = "ПрайсЛисты.ДатаОкончанияДействия" Тогда
					ЯвляетсяОшибкой = Истина;
				КонецЕсли;
				СписокРеквизитов.Добавить(ПроверяемыйРеквизит, , ЯвляетсяОшибкой);
			КонецЦикла;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ВыборкаДанных.РеквизитыПредупреждений) Тогда
			ПроверяемыеРеквизиты = СтрРазделить(ВыборкаДанных.РеквизитыПредупреждений, ";");
			ЯвляетсяОшибкой = Ложь;
			Для Каждого ПроверяемыйРеквизит Из ПроверяемыеРеквизиты Цикл
				СписокРеквизитов.Добавить(ПроверяемыйРеквизит, , ЯвляетсяОшибкой);
			КонецЦикла;
		КонецЕсли;
		
		Если СписокРеквизитов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоОбъектов = КоличествоОбъектов + 1;
		
		Для Каждого Реквизит Из СписокРеквизитов Цикл
			
			ПроверяемыйРеквизит = Реквизит.Значение;
			СсылкаНаОбъект = Неопределено;
			ПутьКДанным = "";
			ТекстСообщения = НСтр("ru = 'Значение реквизита не задано'");
			
			ЗаполнитьЗначенияСвойств(СтрокаТорговогоПредложения, ВыборкаДанных);
			
			ТорговыеПредложенияСлужебный.ОпределитьВладельцевНезаполненныхРеквизитов(
				ПроверяемыйРеквизит, СтрокаТорговогоПредложения, СсылкаНаОбъект, ПутьКДанным, ТекстСообщения);
			
			Если СсылкаНаОбъект = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаДиагностики.Добавить();
			НоваяСтрока.Ссылка                  = СсылкаНаОбъект;
			НоваяСтрока.ИмяРеквизита            = ПроверяемыйРеквизит;
			НоваяСтрока.ТекстСообщения          = ТекстСообщения;
			НоваяСтрока.ЯвляетсяОшибкой         = Реквизит.Пометка;
			НоваяСтрока.ЯвляетсяПредупреждением = НЕ Реквизит.Пометка;
			
			Если ПроверяемыйРеквизит = "ОшибкаПубликацииСервиса" Тогда
				НоваяСтрока.ПолноеИмяМетаданных     = "ОшибкиПубликацииСервиса";
			ИначеЕсли СтрНайти(ПутьКДанным, "|") > 0 Тогда
				ПутьКДанныМассив = СтрРазделить(ПутьКДанным, "|");
				НоваяСтрока.ПолноеИмяМетаданных = ПутьКДанныМассив[0];
				НоваяСтрока.ПутьКДанным = ПутьКДанныМассив[1];
			Иначе
				НоваяСтрока.ПолноеИмяМетаданных = СсылкаНаОбъект.Метаданные().ПолноеИмя();
				НоваяСтрока.ПутьКДанным             = ПутьКДанным;
			КонецЕсли;
			
			Если Не ПустаяСтрока(НоваяСтрока.ПолноеИмяМетаданных) Тогда
				ОбъектыМетаданных.Добавить(НоваяСтрока.ПолноеИмяМетаданных);
			КонецЕсли;
			
			ЧастиИмениРеквизита = СтрРазделить(НоваяСтрока.ИмяРеквизита, ".");
			
			Если ЧастиИмениРеквизита.Количество() = 1 И ЧастиИмениРеквизита[0] = "ПричинаИсключенияИзПубликации" Тогда
				НоваяСтрока.ИмяРаздела = "УчетныеДанные";
				ОбъектыУчетныеДанные.Добавить(СсылкаНаОбъект);
			ИначеЕсли ЧастиИмениРеквизита.Количество() = 1 И ЧастиИмениРеквизита[0] = "ОшибкаПубликацииСервиса" Тогда
				НоваяСтрока.ИмяРаздела = "ОшибкиПубликацииСервиса";
				ОбъектыОшибкиПубликацииСервиса.Добавить(СсылкаНаОбъект);
			ИначеЕсли ЧастиИмениРеквизита[0] = "Товары" 
				Или ЧастиИмениРеквизита[0] = "Свойства" 
				Или ЧастиИмениРеквизита[0] = "СкидкиЗаОпт" 
				Или ЧастиИмениРеквизита[0] = "Скидки" Тогда
				
				НоваяСтрока.ИмяРаздела = "СведенияОТоваре";
				ОбъектыСведенияОТоваре.Добавить(СсылкаНаОбъект);
				
			ИначеЕсли ЧастиИмениРеквизита[0] = "ПрайсЛисты" Тогда
				НоваяСтрока.ИмяРаздела = "УчетныеДанные";
				ОбъектыУчетныеДанные.Добавить(СсылкаНаОбъект);
			ИначеЕсли ЧастиИмениРеквизита[0] = "Контакты" Тогда
				НоваяСтрока.ИмяРаздела = "КонтактнаяИнформация";
				ОбъектыКонтактнаяИнформация.Добавить(СсылкаНаОбъект);
			КонецЕсли;
			
			ОбъектыВсе.Добавить(СсылкаНаОбъект);
			Разделы.Добавить(НоваяСтрока.ИмяРаздела);
		
		КонецЦикла;
	
	КонецЦикла;
	
	Если ВыборкаДанных.Количество() = 0 И Отбор.Свойство("ПрайсЛист", ПрайсЛист) Тогда
		
		НоваяСтрока = ТаблицаДиагностики.Добавить();
		НоваяСтрока.Ссылка                  = ПрайсЛист;
		НоваяСтрока.ПутьКДанным             = "";
		НоваяСтрока.ИмяРеквизита            = "ПрайсЛист.Ссылка";
		
		НоваяСтрока.ПолноеИмяМетаданных     = ПрайсЛист.Метаданные().ПолноеИмя();
		
		НоваяСтрока.ТекстСообщения          = НСтр("ru = 'Отсутствуют товары для публикации'");
		НоваяСтрока.ЯвляетсяОшибкой         = Истина;
		НоваяСтрока.ЯвляетсяПредупреждением = Ложь;
		
		ОбъектыМетаданных.Добавить(НоваяСтрока.ПолноеИмяМетаданных);
		
		НоваяСтрока.ИмяРаздела = "УчетныеДанные";
		ОбъектыУчетныеДанные.Добавить(СсылкаНаОбъект);
		
		ОбъектыВсе.Добавить(СсылкаНаОбъект);
		Разделы.Добавить(НоваяСтрока.ИмяРаздела);
		
	КонецЕсли;
	
	Если ТаблицаДиагностики.НайтиСтроки(Новый Структура("ЯвляетсяОшибкой", Истина)).Количество() = 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СостоянияСинхронизацииТорговыеПредложения.ОписаниеОшибки КАК ОписаниеОшибки,
			|	СостоянияСинхронизацииТорговыеПредложения.ТорговоеПредложение КАК ТорговоеПредложение
			|ИЗ
			|	РегистрСведений.СостоянияСинхронизацииТорговыеПредложения КАК СостоянияСинхронизацииТорговыеПредложения
			|ГДЕ
			|	(&НеИспользоватьОтборПоТорговымПредложениям
			|			ИЛИ СостоянияСинхронизацииТорговыеПредложения.ТорговоеПредложение В (&ВыбранныеТорговыеПредложения))
			|	И СостоянияСинхронизацииТорговыеПредложения.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСинхронизацииТорговыеПредложения.ОшибкаСинхронизации)
			|	И НЕ СостоянияСинхронизацииТорговыеПредложения.ОписаниеОшибки = """"";
		
		ВыбранныеТорговыеПредложения = Новый Массив;
		
		Если Не Отбор = Неопределено Тогда
			
			Если Отбор.Свойство("ТорговоеПредложение") Тогда
				ВыбранныеТорговыеПредложения.Добавить(Отбор.ТорговоеПредложение);
			КонецЕсли;
			
			Если Отбор.Свойство("ПрайсЛист") Тогда
				ВыбранныеТорговыеПредложения.Добавить(Отбор.ПрайсЛист);
			КонецЕсли;
			
			Если Отбор.Свойство("ПозицииТорговыхПредложений") Тогда
				Для каждого ПозицияТорговыхПредложений Из ПозицииТорговыхПредложений Цикл
					ВыбранныеТорговыеПредложения.Добавить(ПозицияТорговыхПредложений.ПрайсЛист);
				КонецЦикла; 
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВыбранныеТорговыеПредложения.Количество() = 0 Тогда
			Запрос.УстановитьПараметр("ВыбранныеТорговыеПредложения"           , Неопределено);
			Запрос.УстановитьПараметр("НеИспользоватьОтборПоТорговымПредложениям", Истина);
		Иначе
			ВыбранныеТорговыеПредложения = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВыбранныеТорговыеПредложения);
			Запрос.УстановитьПараметр("ВыбранныеТорговыеПредложения"           , ВыбранныеТорговыеПредложения);
			Запрос.УстановитьПараметр("НеИспользоватьОтборПоТорговымПредложениям", Ложь);
		КонецЕсли;
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ВыборкаЗапроса = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаЗапроса.Следующий() Цикл
				
				Если Не ПустаяСтрока(ВыборкаЗапроса.ОписаниеОшибки) Тогда
				
					НоваяСтрока = ТаблицаДиагностики.Добавить();
					НоваяСтрока.Ссылка                  = ВыборкаЗапроса.ТорговоеПредложение;
					НоваяСтрока.ПутьКДанным             = "";
					НоваяСтрока.ИмяРеквизита            = "ПрайсЛист.Ссылка";
					
					НоваяСтрока.ПолноеИмяМетаданных     = ВыборкаЗапроса.ТорговоеПредложение.Метаданные().ПолноеИмя();
					
					НоваяСтрока.ТекстСообщения          = ВыборкаЗапроса.ОписаниеОшибки;
					НоваяСтрока.ЯвляетсяОшибкой         = Истина;
					НоваяСтрока.ЯвляетсяПредупреждением = Ложь;
					
					ОбъектыМетаданных.Добавить(НоваяСтрока.ПолноеИмяМетаданных);
					
					НоваяСтрока.ИмяРаздела = "УчетныеДанные";
					ОбъектыУчетныеДанные.Добавить(ВыборкаЗапроса.ТорговоеПредложение);
					
					ОбъектыВсе.Добавить(ВыборкаЗапроса.ТорговоеПредложение);
					Разделы.Добавить(НоваяСтрока.ИмяРаздела);
				
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбъектыВсе                     = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОбъектыВсе);
	ОбъектыУчетныеДанные           = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОбъектыУчетныеДанные);
	ОбъектыСведенияОТоваре         = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОбъектыСведенияОТоваре);
	ОбъектыКонтактнаяИнформация    = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОбъектыКонтактнаяИнформация);
	ОбъектыМетаданных              = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОбъектыМетаданных);
	ОбъектыОшибкиПубликацииСервиса = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОбъектыОшибкиПубликацииСервиса);
	Разделы                        = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Разделы);
	
	СписокМетаданных = Новый СписокЗначений;
	СписокМетаданных.ЗагрузитьЗначения(ОбъектыМетаданных);
	
	Для Каждого ЭлементМетаданных Из СписокМетаданных Цикл
		Если ЭлементМетаданных.Значение = "ОшибкиПубликацииСервиса" Тогда
			ЭлементМетаданных.Представление = НСтр("ru = 'Ошибки публикации'");
		Иначе
			ЭлементМетаданных.Представление = Метаданные.НайтиПоПолномуИмени(ЭлементМетаданных.Значение).Синоним;
		КонецЕсли;
	КонецЦикла;
	
	СписокМетаданных.СортироватьПоПредставлению();
	
	СтатистикаДиагностики = Новый Структура;
	СтатистикаДиагностики.Вставить("КоличествоВсе"                     , ОбъектыВсе.Количество());
	СтатистикаДиагностики.Вставить("КоличествоСведенияОТоваре"         , ОбъектыСведенияОТоваре.Количество());
	СтатистикаДиагностики.Вставить("КоличествоКонтактнаяИнформация"    , ОбъектыКонтактнаяИнформация.Количество());
	СтатистикаДиагностики.Вставить("КоличествоУчетныеДанные"           , ОбъектыУчетныеДанные.Количество());
	СтатистикаДиагностики.Вставить("КоличествоОшибокПубликацииСервиса" , ОбъектыОшибкиПубликацииСервиса.Количество());
	
	Объекты = Новый Структура;
	Объекты.Вставить("ОбъектыВсе"              , ОбъектыВсе);
	Объекты.Вставить("УчетныеДанные"           , ОбъектыУчетныеДанные);
	Объекты.Вставить("СведенияОТоваре"         , ОбъектыСведенияОТоваре);
	Объекты.Вставить("КонтактнаяИнформация"    , ОбъектыКонтактнаяИнформация);
	
	Результат = Новый Структура;
	Результат.Вставить("ТаблицаДиагностики"    , ТаблицаДиагностики);
	Результат.Вставить("СтатистикаДиагностики" , СтатистикаДиагностики);
	Результат.Вставить("Объекты"               , Объекты);
	Результат.Вставить("ОбъектыМетаданных"     , СписокМетаданных);
	Результат.Вставить("Разделы"               , Разделы);
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, КоличествоОбъектов / 1000);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КарточкаПубликуемогоТорговогоПредложения

Функция ИнформацияПоставка(СрокПоставки)

	Если СрокПоставки = Неопределено Тогда
		Возврат НСтр("ru = 'По запросу'")
	ИначеЕсли ЗначениеЗаполнено(СрокПоставки) И СрокПоставки >= 1 Тогда
		Возврат СтрШаблон(НСтр("ru = '%1 дн.'"), СрокПоставки);
	Иначе
		Возврат НСтр("ru = 'В наличии'");
	КонецЕсли;

КонецФункции

Функция ИнформацияНаличие(Наличие)

	Если НЕ ЗначениеЗаполнено(Наличие) Тогда
		Возврат НСтр("ru = 'Нет на складе'");
	ИначеЕсли Наличие = 1 Тогда
		Возврат НСтр("ru = 'Мало'");
	ИначеЕсли Наличие = 2 Тогда
		Возврат НСтр("ru = 'Достаточно'");
	ИначеЕсли Наличие = 3 Тогда
		Возврат НСтр("ru = 'Много'");
	КонецЕсли;

КонецФункции

Функция ИнформацияСпособДоставки(ДанныеПоДоставке)
	
	ЕстьДоставка = ЗначениеЗаполнено(ДанныеПоДоставке.РегионыДоставки);
	ЕстьСамовывоз  = ЗначениеЗаполнено(ДанныеПоДоставке.РегионыСамовывоза);
	
	Если ЕстьДоставка И ЕстьСамовывоз Тогда
		Возврат НСтр("ru = 'Самовывоз, доставка'");
	ИначеЕсли ЕстьДоставка Тогда
		Возврат НСтр("ru = 'Доставка'");
	ИначеЕсли ЕстьСамовывоз Тогда
		Возврат НСтр("ru = 'Самовывоз'");
	Иначе
		Возврат "";
	КонецЕсли;

КонецФункции

Функция СведенияОДоступностиРеквизитов(ДоступностьРеквизитов)

	ТаблицаРеквизитов = Новый ТаблицаЗначений;
	ТаблицаРеквизитов.Колонки.Добавить("ПолноеИмя"    , Новый ОписаниеТипов("Строка"));
	ТаблицаРеквизитов.Колонки.Добавить("ИмяТаблицы"   , Новый ОписаниеТипов("Строка"));
	ТаблицаРеквизитов.Колонки.Добавить("ИмяРеквизита" , Новый ОписаниеТипов("Строка"));
	ТаблицаРеквизитов.Колонки.Добавить("Доступность"  , Новый ОписаниеТипов("Булево"));
	
	Для Каждого Реквизит Из ДоступностьРеквизитов Цикл
		
		ПолноеИмя = Реквизит.Ключ;
		ЧастиИмени = СтрРазделить(ПолноеИмя, ".");
		
		НоваяСтрока = ТаблицаРеквизитов.Добавить();
		НоваяСтрока.ПолноеИмя    = ПолноеИмя;
		НоваяСтрока.ИмяТаблицы   = ЧастиИмени[0];
		НоваяСтрока.ИмяРеквизита = ЧастиИмени[1];
		НоваяСтрока.Доступность  = Реквизит.Значение;
	
	КонецЦикла;
	
	Возврат ТаблицаРеквизитов;

КонецФункции

Процедура ДобавитьДанныеТаблицы(ДанныеТорговогоПредложения, ТаблицаРеквизитов, ИмяТаблицы, ВыборкаЗапроса, РежимРедактирования)

	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ИмяТаблицы", ИмяТаблицы);
	
	Реквизиты = ТаблицаРеквизитов.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого Реквизит Из Реквизиты Цикл
		
		ИмяРеквизита = Реквизит.ИмяРеквизита;
		ИмяПараметры = СтрШаблон("%1_%2", Реквизит.ИмяТаблицы, ИмяРеквизита);
		ЗначениеПараметра = ВыборкаЗапроса[ИмяРеквизита];
		
		ДанныеТорговогоПредложения.Вставить(ИмяПараметры, ЗначениеПараметра);
		
		Если РежимРедактирования И Реквизит.Доступность Тогда
			
			ИмяПараметры = СтрШаблон("Расшифровка_%1_%2", Реквизит.ИмяТаблицы, Реквизит.ИмяРеквизита);
			
			ЗначениеПараметра = Новый Структура;
			Если Реквизит.ПолноеИмя = "Контакты.ЭлектроннаяПочта" Тогда
				Действие = "ОбработкаЛогикойБиблиотеки";
			Иначе
				Действие = "ОбработкаПрикладнойЛогикой";
			КонецЕсли;
			ЗначениеПараметра.Вставить("Действие"               , Действие);
			ЗначениеПараметра.Вставить("ИмяРеквизита"           , Реквизит.ПолноеИмя);
			ЗначениеПараметра.Вставить("ДополнительныйРеквизит" , Неопределено);
			
			ДанныеТорговогоПредложения.Вставить(ИмяПараметры, ЗначениеПараметра);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура УстановитьРедактированиеОбластей(ОбластьМакета, ТаблицаРеквизитов)

	Для Каждого СтрокаРеквизита Из ТаблицаРеквизитов Цикл
		
		ИмяОбласти = СтрШаблон("%1_%2", СтрокаРеквизита.ИмяТаблицы, СтрокаРеквизита.ИмяРеквизита);
		Область = ОбластьМакета.Области.Найти(ИмяОбласти);
		
		Если Область = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПараметра = СтрШаблон("Расшифровка_%1_%2", СтрокаРеквизита.ИмяТаблицы, СтрокаРеквизита.ИмяРеквизита);
		
		Если НЕ ПараметрТабличногоДокументаЗаполнен(ОбластьМакета, ИмяПараметра) Тогда
			Продолжить;
		КонецЕсли;
		
		ПредупреждениеРедактирования = ОбластьМакета.Параметры[ИмяПараметра].Свойство("ПредупреждениеРедактирования");
		ЦветТекста = ?(ПредупреждениеРедактирования, ЦветаСтиля.ЦветПустойГиперссылки, ЦветаСтиля.ЦветГиперссылкиБЭД);
		
		Область.Картинка                      = ОбщегоНазначенияБЭД.КартинкаКнопкиОткрытия();
		Область.Гиперссылка                   = Истина;
		Область.ЦветТекста                    = ЦветТекста;
		Область.РазмерКартинки                = РазмерКартинки.РеальныйРазмер;
		Область.ВертикальноеПоложениеКартинки = ВертикальноеПоложение.Центр;
		
	КонецЦикла;

КонецПроцедуры

Функция ПараметрТабличногоДокументаЗаполнен(ТабличныйДокумент, ИмяПараметра)

	СтруктураПроверки = Новый Структура(ИмяПараметра);
	ЗаполнитьЗначенияСвойств(СтруктураПроверки, ТабличныйДокумент.Параметры);
	
	Возврат ЗначениеЗаполнено(СтруктураПроверки[ИмяПараметра]);

КонецФункции

Процедура ВывестиСвойстваСервиса(ТабличныйДокумент, Макет, ДанныеТорговогоПредложения, ТаблицаРеквизитов,
	РежимРедактирования, ДоступностьРеквизитов)
	Перем ДанныеНоменклатурыСервиса;

	Если НЕ ДанныеТорговогоПредложения.Свойство("ДанныеНоменклатурыСервиса", ДанныеНоменклатурыСервиса) Тогда
		Возврат;
	ИначеЕсли ДанныеНоменклатурыСервиса.ДополнительныеРеквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент,
		Макет.ПолучитьОбласть("СвойстваШапка"), "СвойстваШапка");
	ТабличныйДокумент.НачатьАвтогруппировкуСтрок();
	
	Для Каждого ДополнительныйРеквизит Из ДанныеНоменклатурыСервиса.ДополнительныеРеквизиты Цикл
	
		СвойстваСтрока = Макет.ПолучитьОбласть("СвойстваСтрока");
		
		СвойстваСтрока.Параметры.Свойства_Свойство = ДополнительныйРеквизит.Наименование;
		
		Если ДанныеТорговогоПредложения.ВариантЗаполненияРеквизитовСервиса = "СведенияОбОграниченииДоступа" Тогда
			СвойстваСтрока.Параметры.Свойства_Значение = НСтр("ru = 'По данным 1С:Номенклатура'");
		ИначеЕсли ПустаяСтрока(ДополнительныйРеквизит.СтроковоеЗначение) Тогда
			СвойстваСтрока.Параметры.Свойства_Значение = ДополнительныйРеквизит.Значение;
		Иначе
			СвойстваСтрока.Параметры.Свойства_Значение = ДополнительныйРеквизит.СтроковоеЗначение;
		КонецЕсли;
		
		Если РежимРедактирования И ДанныеТорговогоПредложения.ВариантЗаполненияРеквизитовСервиса = "СведенияОбОграниченииДоступа" Тогда
			
			ПараметрРасшифровки = Новый Структура;
			ПараметрРасшифровки.Вставить("Действие"                 , "ОбработкаПрикладнойЛогикой");
			ПараметрРасшифровки.Вставить("ИмяРеквизита"             , "Свойства.Значение");
			ПараметрРасшифровки.Вставить("ДополнительныйРеквизит"   , Неопределено);
			ПараметрРасшифровки.Вставить("ТребуетсяПокупкаКарточки" , ДанныеТорговогоПредложения.ИдентификаторНоменклатурыСервиса);
			
			СвойстваСтрока.Параметры.Расшифровка_Свойства_Значение = ПараметрРасшифровки;
			
		КонецЕсли;
		
		УстановитьРедактированиеОбластей(СвойстваСтрока, ТаблицаРеквизитов);
		
		ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, СвойстваСтрока,
			"СвойстваСтрока",, 1);
		
	КонецЦикла;
	
	ТабличныйДокумент.ЗакончитьАвтогруппировкуСтрок();
КонецПроцедуры

Процедура ВывестиСвойства(ТабличныйДокумент, Макет, ДанныеТорговогоПредложения, ТаблицаРеквизитов,
	РежимРедактирования, ДоступностьРеквизитов)

	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой") Тогда
		Возврат;
	ИначеЕсли НЕ ДанныеТорговогоПредложения.СопоставленаРаботаСНоменклатурой
			И НЕ (ДанныеТорговогоПредложения.СопоставленаБизнесСеть И ИспользоватьСервисРаботаСНоменклатурой()) Тогда
		Возврат;
	КонецЕсли;
	
	ИсходнаяТаблицаСвойств = ДанныеТорговогоПредложения.Свойства;
	
	Если ДанныеТорговогоПредложения.СопоставленаРаботаСНоменклатурой Тогда
		ВариантСопоставления = "РаботаСНоменклатурой";
	ИначеЕсли ДанныеТорговогоПредложения.СопоставленаБизнесСеть Тогда
		ВариантСопоставления = "БизнесСеть";
	Иначе
		Возврат;
	КонецЕсли;
	
	ОбщийМодульРаботаСНоменклатуройСлужебный = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатуройСлужебный");
	ТаблицаСвойств = ОбщийМодульРаботаСНоменклатуройСлужебный.ПолучитьПубликуемыеСвойства(ИсходнаяТаблицаСвойств,
		ДанныеТорговогоПредложения.Номенклатура, ДанныеТорговогоПредложения.Характеристика, 
		ДанныеТорговогоПредложения.ВидНоменклатуры, ДанныеТорговогоПредложения.Родитель, ВариантСопоставления, НЕ (РежимРедактирования И ДоступностьРеквизитов["Свойства.Свойство"]));
	
	Если ТаблицаСвойств.Количество() = 0 И НЕ РежимРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент,
		Макет.ПолучитьОбласть("СвойстваШапка"), "СвойстваШапка");
	ТабличныйДокумент.НачатьАвтогруппировкуСтрок();
	
	Для Каждого СтрокаСвойства Из ТаблицаСвойств Цикл
		
		СвойстваСтрока = Макет.ПолучитьОбласть("СвойстваСтрока");
		ЗаполнитьЗначенияСвойств(СвойстваСтрока.Параметры, СтрокаСвойства);
		
		Если РежимРедактирования И ДоступностьРеквизитов["Свойства.Свойство"] Тогда
		
			ПараметрРасшифровки = Новый Структура;
			ПараметрРасшифровки.Вставить("Действие"               , "ОбработкаПрикладнойЛогикой");
			ПараметрРасшифровки.Вставить("ИмяРеквизита"           , "Свойства.Свойство");
			ПараметрРасшифровки.Вставить("ДополнительныйРеквизит" , СтрокаСвойства.РеквизитОбъекта);
			
			СвойстваСтрока.Параметры.Расшифровка_Свойства_Свойство = ПараметрРасшифровки;
			
		КонецЕсли;
		
		Если РежимРедактирования И ДоступностьРеквизитов["Свойства.Значение"] Тогда
			
			ПараметрРасшифровки = Новый Структура;
			ПараметрРасшифровки.Вставить("Действие"               , "ОбработкаПрикладнойЛогикой");
			ПараметрРасшифровки.Вставить("ИмяРеквизита"           , "Свойства.Значение");
			ПараметрРасшифровки.Вставить("ДополнительныйРеквизит" , СтрокаСвойства.РеквизитОбъекта);
			
			СвойстваСтрока.Параметры.Расшифровка_Свойства_Значение = ПараметрРасшифровки;
		
		КонецЕсли;
		
		УстановитьРедактированиеОбластей(СвойстваСтрока, ТаблицаРеквизитов);
		ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, СвойстваСтрока,
			"СвойстваСтрока",, 1);
	КонецЦикла;
	
	ТабличныйДокумент.ЗакончитьАвтогруппировкуСтрок();
	
	Если РежимРедактирования И ДанныеТорговогоПредложения.СопоставленаБизнесСеть Тогда
	
		ПараметрРасшифровки = Новый Структура;
		ПараметрРасшифровки.Вставить("Действие"     , "ОбработкаЛогикойБиблиотеки");
		ПараметрРасшифровки.Вставить("ИмяРеквизита" , "СвойстваСлужебный.Свойство");
		
		ДанныеТорговогоПредложения.Вставить("Расшифровка_СвойстваСлужебный_Свойство", ПараметрРасшифровки);
		
		ОбластьБизнесСеть = Макет.ПолучитьОбласть("СвойстваБизнесСеть");
		ОбластьБизнесСеть.Параметры.Заполнить(ДанныеТорговогоПредложения);
		УстановитьРедактированиеОбластей(ОбластьБизнесСеть, ТаблицаРеквизитов);
		ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент,
			ОбластьБизнесСеть, "СвойстваШапка");
	
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьНевозможностьРедактированияРасшифровки(ДанныеТорговогоПредложения, КлючРасшифровки,
		ТекстПредупреждения)
	
	Если НЕ ДанныеТорговогоПредложения.Свойство(КлючРасшифровки) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеТорговогоПредложения[КлючРасшифровки].Вставить("ПредупреждениеРедактирования", ТекстПредупреждения);
	
КонецПроцедуры

Процедура УстановитьИнформациюОбОшибкеРаботаСНоменклатурой(ДанныеТорговогоПредложения, ИменаРеквизитов)
	
	Реквизиты = Новый Структура(ИменаРеквизитов);
	
	Для каждого Реквизит Из Реквизиты Цикл
		
		ДанныеТорговогоПредложения.Вставить(Реквизит.Ключ, НСтр("ru = 'Данные сервиса 1С:Номенклатура недоступны'"));
		УстановитьНевозможностьРедактированияРасшифровки(ДанныеТорговогоПредложения, "Расшифровка_" + Реквизит.Ключ,
			НСтр("ru = 'Не удалось получить сведения о номенклатуре из сервиса 1С:Номенклатура.'"))
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьОграничениеПолученияДанныхКарточки(ДанныеТорговогоПредложения, КлючРасшифровки)

	Если НЕ ДанныеТорговогоПредложения.Свойство(КлючРасшифровки) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеТорговогоПредложения[КлючРасшифровки].Вставить("ТребуетсяПокупкаКарточки", ДанныеТорговогоПредложения.ИдентификаторНоменклатурыСервиса);

КонецПроцедуры

Функция ЕстьПредупреждения(ПозицияТорговогоПредложения)

	МенеджерЗаписи = РегистрыСведений.ТорговыеПредложенияТорговойПлощадки.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ПозицияТорговогоПредложения);
	МенеджерЗаписи.Прочитать();
	
	Если НЕ МенеджерЗаписи.Выбран() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат МенеджерЗаписи.ЕстьПредупреждения 
		Или МенеджерЗаписи.СостояниеПубликацииТорговыхПредложений = Перечисления.СостоянияПубликацииПозицииТорговогоПредложения.Ошибка;

КонецФункции

Процедура УстановитьДанныеСлужебногоРеквизита(ДанныеТорговогоПредложения, ИмяРеквизита, Значение, РежимРедактирования, 
		ДоступностьРеквизитов, ДополнительныеПараметры = Неопределено)
	
	ИмяПараметра = СтрЗаменить(ИмяРеквизита, ".", "_");
	
	ДанныеТорговогоПредложения.Вставить(ИмяПараметра, Значение);
	
	Если РежимРедактирования И ДоступностьРеквизитов[ИмяРеквизита] Тогда
		
		ПараметрРасшифровки = Новый Структура;
		ПараметрРасшифровки.Вставить("Действие"     , "ОбработкаЛогикойБиблиотеки");
		ПараметрРасшифровки.Вставить("ИмяРеквизита" , ИмяРеквизита);
		
		Если НЕ ДополнительныеПараметры = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрРасшифровки, ДополнительныеПараметры);
		КонецЕсли; 
		
		ДанныеТорговогоПредложения.Вставить("Расшифровка_" + ИмяПараметра , ПараметрРасшифровки);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДанныеПрикладногоРеквизита(ДанныеТорговогоПредложения, ИмяРеквизита, Значение, РежимРедактирования, 
		ДоступностьРеквизитов, ДополнительныеПараметры = Неопределено)
	
	ИмяПараметра = СтрЗаменить(ИмяРеквизита, ".", "_");
	
	ДанныеТорговогоПредложения.Вставить(ИмяПараметра, Значение);
	
	Если РежимРедактирования И ДоступностьРеквизитов[ИмяРеквизита] Тогда
		
		ПараметрРасшифровки = Новый Структура;
		ПараметрРасшифровки.Вставить("Действие"               , "ОбработкаПрикладнойЛогикой");
		ПараметрРасшифровки.Вставить("ИмяРеквизита"           , ИмяРеквизита);
		ПараметрРасшифровки.Вставить("ДополнительныйРеквизит" , Неопределено);
		
		Если НЕ ДополнительныеПараметры = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрРасшифровки, ДополнительныеПараметры);
		КонецЕсли; 
		
		ДанныеТорговогоПредложения.Вставить("Расшифровка_" + ИмяПараметра , ПараметрРасшифровки);
		
	КонецЕсли;
	
КонецПроцедуры

// Вывод картинки в табличный документ.
//
Процедура ВывестиИзображения(ТаблицаИзображений, ОбластьКартинка, ТабличныйДокумент, ДанныеИзображений)
	
	Если НЕ ЗначениеЗаполнено(ТаблицаИзображений) Тогда
		Возврат;
	КонецЕсли;

	Для Каждого ЭлементКоллекции Из ТаблицаИзображений Цикл
		
		ДанныеИзображения = ТорговыеПредложенияСлужебный.ДанныеФайлаПоВнешнейСсылке(ЭлементКоллекции, Ложь);
		Если ДанныеИзображения.Статус 
			И ТорговыеПредложенияСлужебный.ЭтоФайлКартинки(ДанныеИзображения.Путь) Тогда
				
				ДвоичныеДанныеИзображения = ПолучитьИзВременногоХранилища(ДанныеИзображения.Путь);
				ДанныеИзображений.Добавить(ДвоичныеДанныеИзображения);
				
		КонецЕсли;
		
	КонецЦикла;
	
	ВывестиИзображенияВТабличныйДокумент(ТаблицаИзображений.Количество(), ОбластьКартинка, ТабличныйДокумент, ДанныеИзображений);
		
КонецПроцедуры

Процедура ВывестиИзображенияПоставщика(Изображения, ОбластьКартинка, ТабличныйДокумент, ДанныеИзображений,
	РедактированиеИзображенийРазрешено)
	
	Для Каждого ЭлементКоллекции Из Изображения Цикл
		
		ДвоичныеДанныеИзображения = РаботаСФайлами.ДвоичныеДанныеФайла(ЭлементКоллекции, Ложь);
		
		Если ДвоичныеДанныеИзображения <> Неопределено Тогда
			ДанныеИзображений.Добавить(ДвоичныеДанныеИзображения);
		КонецЕсли;
		
	КонецЦикла;
		
	Если РедактированиеИзображенийРазрешено Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТипДействия"       , ?(ДанныеИзображений.Количество() = 0, "Добавление", "Редактирование"));
		ДополнительныеПараметры.Вставить("Изображения"       , Изображения);
		ДополнительныеПараметры.Вставить("ИндексИзображения" , 0);

		ПараметрРасшифровки = Новый Структура;
		ПараметрРасшифровки.Вставить("Действие"               , "ОбработкаПрикладнойЛогикой");
		ПараметрРасшифровки.Вставить("ИмяРеквизита"           , "Изображения.ФайлИзображения");
		ПараметрРасшифровки.Вставить("ДополнительныйРеквизит" , ДополнительныеПараметры);
		
		ОбластьКартинка.Параметры.Расшифровка_Изображения_ФайлИзображения = ПараметрРасшифровки;
		
	КонецЕсли;
	
	КоличествоИзображений = Изображения.Количество();
	
	ВывестиИзображенияВТабличныйДокумент(КоличествоИзображений, ОбластьКартинка, ТабличныйДокумент, ДанныеИзображений, РедактированиеИзображенийРазрешено);

КонецПроцедуры

Процедура ВывестиИзображенияВТабличныйДокумент(КоличествоИзображений, ОбластьКартинка, ТабличныйДокумент, ДанныеИзображений,
	РедактированиеИзображенийРазрешено = Ложь)
	
	Если НЕ РедактированиеИзображенийРазрешено И ДанныеИзображений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Если ДанныеИзображений.Количество() Тогда
		ОбластьКартинка.Рисунки.ИзображениеПредложения.Картинка = Новый Картинка(ДанныеИзображений[0]);
	КонецЕсли;

	Если КоличествоИзображений > 1 Тогда
		
		ОбластьКартинка.Области.ЗаголовокИзображения.Текст = 
			СтрШаблон("Изображение (%1/%2)", 1, КоличествоИзображений);

	ИначеЕсли НЕ (РедактированиеИзображенийРазрешено И КоличествоИзображений = 1) Тогда
		
		ОбластьКартинка.Рисунки.ПредыдущееИзображение.Картинка    = БиблиотекаКартинок.Пустая;
		ОбластьКартинка.Рисунки.ПредыдущееИзображение.Гиперссылка = Ложь;
		
		ОбластьКартинка.Рисунки.СледующееИзображение.Картинка     = БиблиотекаКартинок.Пустая;
		ОбластьКартинка.Рисунки.СледующееИзображение.Гиперссылка  = Ложь;
		
	КонецЕсли;
		
	ТабличныйДокумент.Вывести(ОбластьКартинка);

КонецПроцедуры

#КонецОбласти

#Область ДиагностикаОшибок

Процедура ПоместитьТаблицуЗначенийВоВременнуюТаблицу(МенеджерВременныхТаблиц, ИмяТаблицы, ТаблицаЗначений)
	
	СхемаЗапроса = Новый СхемаЗапроса;
	
	ПакетЗапросов = СхемаЗапроса.ПакетЗапросов[0];
	ПакетЗапросов.ТаблицаДляПомещения = ИмяТаблицы;
	
	ОператорЗапроса = ПакетЗапросов.Операторы[0];
	ОписаниеВременнойТаблицы = ОператорЗапроса.Источники.Добавить(Тип("ОписаниеВременнойТаблицыСхемыЗапроса"), "&ТаблицаЗначений", "ТаблицаЗначений");
	
	ОписаниеВременнойТаблицы.Соединения.Очистить();
	
	Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
		ОписаниеВременнойТаблицы.Источник.ДоступныеПоля.Добавить(Колонка.Имя, Колонка.ТипЗначения);
		ОператорЗапроса.ВыбираемыеПоля.Добавить("ТаблицаЗначений." + Колонка.Имя);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаЗначений", ТаблицаЗначений);
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	Запрос.Выполнить();

КонецПроцедуры

Процедура СкопироватьСвойстваСтруктуры(Приемник, Источник, Свойства)
	Перем ЗначениеСвойства;
	
	Если НЕ ЗначениеЗаполнено(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	КопируемыеСвойства = Новый Структура(Свойства);
	
	Для каждого КопируемоеСвойство Из КопируемыеСвойства Цикл
		Если Источник.Свойство(КопируемоеСвойство.Ключ, ЗначениеСвойства) И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
			Приемник.Вставить(КопируемоеСвойство.Ключ, ЗначениеСвойства);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСНоменклатурой

Функция ПолучитьПредставлениеКатегорииСервиса(ИдентификаторКатегории)
	
	Если ПустаяСтрока(ИдентификаторКатегории) Тогда
		Возврат НСтр("ru = 'Прочее'");
	КонецЕсли;
	
	МассивИдентификаторов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторКатегории);
	Отказ = Ложь;
	
	МодульРаботаСНоменклатуройСлужебный = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатуройСлужебный");
	
	ПараметрыКоманды  = МодульРаботаСНоменклатуройСлужебный.ПараметрыЗапросаВсеРодительскиеКатегории(МассивИдентификаторов);
	КатегорииСервиса  = МодульРаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка чтения категории торгового предложения.'");
		ПодробнаяИнформация = ТекстСообщения + Символы.ПС + СтрШаблон(НСтр("ru = 'Идентификатор %1.'"), ИдентификаторКатегории)
		+ Символы.ПС + СтрШаблон(НСтр("ru = 'Идентификатор категории %1.'"), ИдентификаторКатегории);
		ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Чтение торгового предложения.'"),
		ПодробнаяИнформация, ТекстСообщения, "ТорговыеПредложения");
		Возврат "";
	КонецЕсли;
	
	ПредставлениеКатегории = НСтр("ru = 'Все категории'");
	Если ТипЗнч(КатегорииСервиса) = Тип("Массив") Тогда
		
		ПутьДоКатегорий     = КатегорииСервиса[0];
		КоличествоКатегорий = ПутьДоКатегорий.Количество();
		
		Если КоличествоКатегорий Тогда
			
			ПоследнийПутьДоКатегории = ПутьДоКатегорий[КоличествоКатегорий - 1].Наименование;
			ПредставлениеКатегории   = ПутьДоКатегорий[0].Наименование;
			ДлинаПутиКатегории       = СтрДлина(ПутьДоКатегорий[0].Наименование) + СтрДлина(ПоследнийПутьДоКатегории);
			МаксимальнаяДлина        = 100;
			
			Для Индекс = 1 По КоличествоКатегорий - 1 Цикл
				
				СледующийПутьККатегории = ПутьДоКатегорий[Индекс].Наименование;
				
				Если ДлинаПутиКатегории + СтрДлина(СледующийПутьККатегории) <= МаксимальнаяДлина Тогда
					ПредставлениеКатегории = ПредставлениеКатегории +" \ " + СледующийПутьККатегории;
				Иначе
					ПредставлениеКатегории = ПредставлениеКатегории +" \...\ " + ПоследнийПутьДоКатегории;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПредставлениеКатегории) Тогда
		Возврат ПредставлениеКатегории;
	Иначе
		Возврат НСтр("ru = 'Все категории'");
	КонецЕсли;
	
КонецФункции

Процедура ОпределитьКатегориюНоменклатуры(ДанныеТорговогоПредложения, РежимРедактирования)

	ЕстьПодсистемаРаботаСНоменклатурой = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой");
	ДанныеТорговогоПредложения.Вставить("СопоставленаБизнесСеть", Ложь);
	
	Если Не ДанныеТорговогоПредложения.СопоставленаРаботаСНоменклатурой
		И РежимРедактирования И ЕстьПодсистемаРаботаСНоменклатурой Тогда
		
		ПараметрРасшифровки = Новый Структура;
		ПараметрРасшифровки.Вставить("Действие"     , "ОбработкаЛогикойБиблиотеки");
		ПараметрРасшифровки.Вставить("ИмяРеквизита" , "ТоварыСлужебный.КатегорияСервиса");
		
		ДанныеТорговогоПредложения.Вставить("Расшифровка_ТоварыСлужебный_КатегорияСервиса", ПараметрРасшифровки);
		
	КонецЕсли;
	
	Если НЕ ЕстьПодсистемаРаботаСНоменклатурой Тогда
		ДанныеТорговогоПредложения.Вставить("ТоварыСлужебный_КатегорияСервиса", "Прочее");
		Возврат;
	КонецЕсли;
	
	Если ДанныеТорговогоПредложения.Свойство("ДанныеНоменклатурыСервиса") Тогда
		ИдентификаторКатегории = ДанныеТорговогоПредложения.ДанныеНоменклатурыСервиса.ИдентификаторКатегории;
	ИначеЕсли Не ПустаяСтрока(ДанныеТорговогоПредложения.ИдентификаторКатегории) Тогда
		ИдентификаторКатегории = ДанныеТорговогоПредложения.ИдентификаторКатегории;
	КонецЕсли;
	
	ДанныеТорговогоПредложения.Вставить("СопоставленаБизнесСеть", Не ПустаяСтрока(ИдентификаторКатегории)
		И Не ИдентификаторКатегории = РаботаСНоменклатуройСлужебныйКлиентСервер.ИдентификаторКатегорииПрочее());
	
	Если РежимРедактирования Тогда
		
		ПараметрРасшифровки = Новый Структура;
		ПараметрРасшифровки.Вставить("Действие"               , "ОбработкаЛогикойБиблиотеки");
		ПараметрРасшифровки.Вставить("ИмяРеквизита"           , "ТоварыСлужебный.КатегорияСервиса");
		ПараметрРасшифровки.Вставить("ИдентификаторКатегории" , ИдентификаторКатегории);
		
		ДанныеТорговогоПредложения.Вставить("Расшифровка_ТоварыСлужебный_КатегорияСервиса", ПараметрРасшифровки);
		
	КонецЕсли;
	
	Если ДанныеТорговогоПредложения.СопоставленаРаботаСНоменклатурой Тогда
		УстановитьНевозможностьРедактированияРасшифровки(ДанныеТорговогоПредложения, "Расшифровка_ТоварыСлужебный_КатегорияСервиса",
			НСтр("ru = 'Для товаров, сопоставленных с 1С:Номенклатура, категория публикуется в соответствии с данными сервиса.'"));
	КонецЕсли;
	
	ДанныеТорговогоПредложения.Вставить("ТоварыСлужебный_КатегорияСервиса", ПолучитьПредставлениеКатегорииСервиса(ИдентификаторКатегории));

КонецПроцедуры

Процедура ОпределитьНоменклатуруСервиса(ДанныеТорговогоПредложения, РежимРедактирования)
	
	ЕстьПодсистемаРаботаСНоменклатурой = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой");
	
	ДанныеТорговогоПредложения.Вставить("СопоставленаРаботаСНоменклатурой", Ложь);
	ДанныеТорговогоПредложения.Вставить("ОшибкаПолученияДанныхРаботаСНоменклатурой", Ложь);
	ДанныеТорговогоПредложения.Вставить("ВариантЗаполненияРеквизитовСервиса", "ИнформационнаяБаза");
	
	Если НЕ ЕстьПодсистемаРаботаСНоменклатурой Тогда
		ДанныеТорговогоПредложения.Вставить("ПоказыватьНоменклатуруСервиса", Ложь );
		Возврат;
	КонецЕсли;
	
	Если РежимРедактирования Тогда
		ПараметрРасшифровки = Новый Структура;
		ПараметрРасшифровки.Вставить("Действие"     , "ОбработкаЛогикойБиблиотеки");
		ПараметрРасшифровки.Вставить("ИмяРеквизита" , "ТоварыСлужебный.НоменклатураСервиса");
	КонецЕсли;
	
	СведенияОНоменклатуре = Новый Структура;
	СведенияОНоменклатуре.Вставить("Номенклатура", ДанныеТорговогоПредложения.Номенклатура);
	СведенияОНоменклатуре.Вставить("Характеристика", ДанныеТорговогоПредложения.Характеристика);
	
	ИдентификаторыНоменклатурыСервиса = ДанныеТорговогоПредложения.ИдентификаторНоменклатурыСервиса;
	
	Если ПустаяСтрока(ИдентификаторыНоменклатурыСервиса) Тогда
		ДанныеТорговогоПредложения.Вставить("ПоказыватьНоменклатуруСервиса", РежимРедактирования);
		ДанныеТорговогоПредложения.Вставить("ТоварыСлужебный_НоменклатураСервиса", НСтр("ru = 'Не выбрана'"));
		ДанныеТорговогоПредложения.Вставить("Расшифровка_ТоварыСлужебный_НоменклатураСервиса", ПараметрРасшифровки);
		Возврат;
	КонецЕсли;
	
	ОбщийМодульРаботаСНоменклатурой = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатурой");
	ДанныеНоменклатурыСервиса = 
		ОбщийМодульРаботаСНоменклатурой.ДанныеНоменклатурыСервиса(ИдентификаторыНоменклатурыСервиса);
	
	Если ДанныеНоменклатурыСервиса = Неопределено Тогда
		ДанныеТорговогоПредложения.Вставить("ПоказыватьНоменклатуруСервиса", Истина);
		ДанныеТорговогоПредложения.Вставить("ТоварыСлужебный_НоменклатураСервиса", НСтр("ru = 'Не удалось найти сопоставленную номенклатуру'"));
		ДанныеТорговогоПредложения.Вставить("Расшифровка_ТоварыСлужебный_НоменклатураСервиса", ПараметрРасшифровки);
		ДанныеТорговогоПредложения.Вставить("СопоставленаРаботаСНоменклатурой", Истина);
		ДанныеТорговогоПредложения.Вставить("ОшибкаПолученияДанныхРаботаСНоменклатурой", Истина);
		Возврат;
	КонецЕсли;
	
	НоменклатураСервиса = ДанныеНоменклатурыСервиса[0];
	ДанныеТорговогоПредложения.Вставить("ДанныеНоменклатурыСервиса", НоменклатураСервиса);
	ДанныеТорговогоПредложения.Вставить("КарточкаСервисаНедоступна", НоменклатураСервиса.ЗаполненныеРеквизиты.Количество() > 0);
	
	Если ДанныеТорговогоПредложения.КарточкаСервисаНедоступна Тогда
		ДанныеТорговогоПредложения.Вставить("ВариантЗаполненияРеквизитовСервиса", "СведенияОбОграниченииДоступа");
	Иначе
		ДанныеТорговогоПредложения.Вставить("ВариантЗаполненияРеквизитовСервиса", "ДанныеСервиса");
	КонецЕсли;
	
	ДанныеТорговогоПредложения.Вставить("ПоказыватьНоменклатуруСервиса", Истина);
	ДанныеТорговогоПредложения.Вставить("ТоварыСлужебный_НоменклатураСервиса", НоменклатураСервиса.Наименование);
	ДанныеТорговогоПредложения.Вставить("Расшифровка_ТоварыСлужебный_НоменклатураСервиса", ПараметрРасшифровки);
	ДанныеТорговогоПредложения.Вставить("СопоставленаРаботаСНоменклатурой", Истина);

КонецПроцедуры

Функция ИспользоватьСервисРаботаСНоменклатурой()

	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОбщийМодульРаботаСНоменклатурой = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатурой");
	
	Возврат ОбщийМодульРаботаСНоменклатурой.ДоступнаФункциональностьПодсистемы();

КонецФункции

#КонецОбласти

#Область СтатистикаСостояний

Функция ЗапросСтатистикаСостояний(ПараметрыПроцедуры, ЧастичныйПодсчетОпубликованных)
	Перем ЗначениеОтбора;

	Отбор = Новый Структура;
	
	Если ЗначениеЗаполнено(ПараметрыПроцедуры) И ПараметрыПроцедуры.Свойство("ПрайсЛист", ЗначениеОтбора)
		И ЗначениеЗаполнено(ЗначениеОтбора) Тогда
		Отбор.Вставить("ПрайсЛист", ЗначениеОтбора);
		Отбор.Вставить("ТорговоеПредложение", ЗначениеОтбора);
	КонецЕсли;

	Если ЗначениеЗаполнено(ПараметрыПроцедуры) И ПараметрыПроцедуры.Свойство("Номенклатура", ЗначениеОтбора)
		И ЗначениеЗаполнено(ЗначениеОтбора) Тогда
		Отбор.Вставить("Номенклатура", ЗначениеОтбора);
		ЧастичныйПодсчетОпубликованных = Истина;
	Иначе
		ЧастичныйПодсчетОпубликованных = Ложь;
	КонецЕсли;
	
	Если Отбор.Свойство("Номенклатура") Тогда
	
		ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1000
		               |	0 КАК КоличествоОпубликовано,
		               |	1 КАК КоличествоОжидаетПубликации,
		               |	0 КАК КоличествоОшибки
		               |ПОМЕСТИТЬ ИсходныеДанные
		               |ИЗ
		               |	РегистрСведений.ТорговыеПредложенияТорговойПлощадки КАК ТорговыеПредложенияТорговойПлощадки
		               |ГДЕ
		               |	ТорговыеПредложенияТорговойПлощадки.СостояниеПубликацииТорговыхПредложений = ЗНАЧЕНИЕ(Перечисление.СостоянияПубликацииПозицииТорговогоПредложения.ОжидаетПубликации)
		               |	И НЕ ТорговыеПредложенияТорговойПлощадки.ОтключитьПубликацию
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ ПЕРВЫЕ 1000
		               |	0,
		               |	0,
		               |	1
		               |ИЗ
		               |	РегистрСведений.ТорговыеПредложенияТорговойПлощадки КАК ТорговыеПредложенияТорговойПлощадки
		               |ГДЕ
		               |	НЕ ТорговыеПредложенияТорговойПлощадки.ОтключитьПубликацию
		               |	И ТорговыеПредложенияТорговойПлощадки.СостояниеПубликацииТорговыхПредложений = ЗНАЧЕНИЕ(Перечисление.СостоянияПубликацииПозицииТорговогоПредложения.Ошибка)
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ ПЕРВЫЕ 1000
		               |	1,
		               |	0,
		               |	0
		               |ИЗ
		               |	РегистрСведений.ТорговыеПредложенияТорговойПлощадки КАК ТорговыеПредложенияТорговойПлощадки
		               |ГДЕ
		               |	НЕ ТорговыеПредложенияТорговойПлощадки.ОтключитьПубликацию
		               |	И ТорговыеПредложенияТорговойПлощадки.СостояниеПубликацииТорговыхПредложений = ЗНАЧЕНИЕ(Перечисление.СостоянияПубликацииПозицииТорговогоПредложения.Опубликовано)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ЕСТЬNULL(СУММА(ИсходныеДанные.КоличествоОпубликовано), 0) КАК КоличествоОпубликовано,
		               |	ЕСТЬNULL(СУММА(ИсходныеДанные.КоличествоОжидаетПубликации), 0) КАК КоличествоОжидаетПубликации,
		               |	ЕСТЬNULL(СУММА(ИсходныеДанные.КоличествоОшибки), 0) КАК КоличествоОшибки
		               |ИЗ
		               |	ИсходныеДанные КАК ИсходныеДанные";
	
	Иначе
	
		ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1000
		               |	0 КАК КоличествоОпубликовано,
		               |	1 КАК КоличествоОжидаетПубликации,
		               |	0 КАК КоличествоОшибки
		               |ПОМЕСТИТЬ ИсходныеДанные
		               |ИЗ
		               |	РегистрСведений.ТорговыеПредложенияТорговойПлощадки КАК ТорговыеПредложенияТорговойПлощадки
		               |ГДЕ
		               |	ТорговыеПредложенияТорговойПлощадки.СостояниеПубликацииТорговыхПредложений = ЗНАЧЕНИЕ(Перечисление.СостоянияПубликацииПозицииТорговогоПредложения.ОжидаетПубликации)
		               |	И НЕ ТорговыеПредложенияТорговойПлощадки.ОтключитьПубликацию
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ ПЕРВЫЕ 1000
		               |	0,
		               |	0,
		               |	1
		               |ИЗ
		               |	РегистрСведений.ТорговыеПредложенияТорговойПлощадки КАК ТорговыеПредложенияТорговойПлощадки
		               |ГДЕ
		               |	НЕ ТорговыеПредложенияТорговойПлощадки.ОтключитьПубликацию
		               |	И ТорговыеПредложенияТорговойПлощадки.СостояниеПубликацииТорговыхПредложений = ЗНАЧЕНИЕ(Перечисление.СостоянияПубликацииПозицииТорговогоПредложения.Ошибка)
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	СУММА(СостоянияСинхронизацииТорговыеПредложения.КоличествоОпубликованных),
		               |	0,
		               |	0
		               |ИЗ
		               |	РегистрСведений.СостоянияСинхронизацииТорговыеПредложения КАК СостоянияСинхронизацииТорговыеПредложения
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ЕСТЬNULL(СУММА(ИсходныеДанные.КоличествоОпубликовано), 0) КАК КоличествоОпубликовано,
		               |	ЕСТЬNULL(СУММА(ИсходныеДанные.КоличествоОжидаетПубликации), 0) КАК КоличествоОжидаетПубликации,
		               |	ЕСТЬNULL(СУММА(ИсходныеДанные.КоличествоОшибки), 0) КАК КоличествоОшибки
		               |ИЗ
		               |	ИсходныеДанные КАК ИсходныеДанные";
	
	КонецЕсли;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	ЗапросПакета = СхемаЗапроса.ПакетЗапросов[0];
	
	Для Счетчик = 1 По ЗапросПакета.Операторы.Количество() Цикл
	
		ОператорЗапроса = ЗапросПакета.Операторы[Счетчик - 1];
		ИсточникЗапроса = ОператорЗапроса.Источники[0];
		
		Для Каждого ЭлементОтбора Из Отбор Цикл
		
			Если ИсточникЗапроса.Источник.ДоступныеПоля.Найти(ЭлементОтбора.Ключ) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ТекстОтбора = СтрШаблон("%1.%2 = &%2", ИсточникЗапроса.Источник.Псевдоним, ЭлементОтбора.Ключ);
			ОператорЗапроса.Отбор.Добавить(ТекстОтбора);
		
		КонецЦикла;
	
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Для Каждого ЭлементОтбора Из Отбор Цикл
		Запрос.УстановитьПараметр(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
	КонецЦикла;
	
	Возврат Запрос;
	
КонецФункции

#КонецОбласти

#Область ФормированиеЗаказов

// Проверка сопоставления номенклатуры с номенклатурой контрагента.
//
Процедура ПроверитьСопоставлениеНоменклатурыКонтрагентов(Контрагент, ТоварыКонтрагента)
	
	Для каждого СтрокаЗаказа Из ТоварыКонтрагента Цикл
		
		// Проверка данных.
		ВладелецНоменклатуры = Контрагент;
		СопоставлениеНоменклатурыКонтрагентовПереопределяемый.ПриОпределенииВладельцаНоменклатурыКонтрагента(Контрагент, ВладелецНоменклатуры);
		НоменклатураКонтрагента = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента(
			ВладелецНоменклатуры, СтрокаЗаказа.ИдентификаторНоменклатуры);
		НоменклатураКонтрагента.Артикул      = СтрокаЗаказа.Артикул;
		НоменклатураКонтрагента.Наименование = СтрокаЗаказа.НаименованиеНоменклатуры;
		НоменклатураКонтрагента.ИдентификаторНоменклатурыСервиса   = СтрокаЗаказа.ИдентификаторНоменклатурыСервиса;
		НоменклатураКонтрагента.ИдентификаторХарактеристикиСервиса = СтрокаЗаказа.ИдентификаторХарактеристикиСервиса;
		НоменклатураКонтрагента.ЕдиницаИзмерения    = СтрокаЗаказа.ПредставлениеЕдиницыИзмерения;
		НоменклатураКонтрагента.ЕдиницаИзмеренияКод = СтрокаЗаказа.КодЕдиницыИзмерения;
		НоменклатураКонтрагента.СтавкаНДС = ОбменСКонтрагентамиИнтеграция.СтавкаНДСИзСоответствия(, СтрокаЗаказа.СтавкаНДС);
		Если ЗначениеЗаполнено(СтрокаЗаказа.Штрихкоды) Тогда
			НоменклатураКонтрагента.ШтрихкодыНоменклатуры = СтрСоединить(СтрокаЗаказа.Штрихкоды, ",");
		КонецЕсли;
		
		Отбор = Новый Структура;
		Отбор.Вставить("Владелец", ВладелецНоменклатуры);
		Отбор.Вставить("НоменклатураКонтрагента", НоменклатураКонтрагента);
		
		Соответствие = СопоставлениеНоменклатурыКонтрагентов.НайтиСоответствиеНоменклатуры(Отбор);
		СоответствиеНайдено = Ложь;
		
		Если ЗначениеЗаполнено(Соответствие) Тогда 
			// Убедимся что соответствие действительно найдено.
			// Бывает, что сначала сопоставил, а потом начали использовать характеристики.
			Для Каждого ЭлементКоллекции Из Соответствие Цикл 
				Если ЭлементКоллекции.НоменклатураИБ.Номенклатура = СтрокаЗаказа.Номенклатура
					 И ЭлементКоллекции.НоменклатураИБ.Характеристика = СтрокаЗаказа.Характеристика
					 И ЭлементКоллекции.НоменклатураИБ.Упаковка = СтрокаЗаказа.ЕдиницаИзмерения Тогда 
					
					СоответствиеНайдено = Истина;
					Прервать;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если СоответствиеНайдено = Ложь
			И ПустаяСтрока(НоменклатураКонтрагента.Идентификатор) = Ложь Тогда 
			
			ПараметрыНоменклатурыИБ = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураИнформационнойБазы(
				СтрокаЗаказа.Номенклатура, СтрокаЗаказа.Характеристика, СтрокаЗаказа.ЕдиницаИзмерения);
				
			СопоставлениеНоменклатурыКонтрагентов.УстановитьСоответствиеНоменклатуры(НоменклатураКонтрагента,
																					ПараметрыНоменклатурыИБ,
																					СтрокаЗаказа.ИспользованиеХарактеристик);
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры


Функция СохранениеПоставщикаСОшибкойСозданияДокумента(Контрагент, Валюта, Организация, ДанныеЗаказа);
	
	ЗаказСОшибкой = Новый Структура;
	ЗаказСОшибкой.Вставить("ЗаказСоздан"              , Ложь);
	ЗаказСОшибкой.Вставить("Контрагент"               , Контрагент);
	ЗаказСОшибкой.Вставить("Валюта"                   , Валюта);
	ЗаказСОшибкой.Вставить("Организация"              , Организация);
	ЗаказСОшибкой.Вставить("СуммаДокумента"           , ДанныеЗаказа.СтрокиЗаказа.Итог("Сумма"));
	
	Возврат ЗаказСОшибкой;
	
КонецФункции
#КонецОбласти

#КонецОбласти

#КонецЕсли