
#Область ОписаниеПеременных

&НаКлиенте
Перем ХронологияПереключенияСтраниц;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	// Проверка прав доступа.
	Если Не ТорговыеПредложения.ПравоСозданияЗаказовПоставщику() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ЕстьРаботаСНоменклатурой = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой");
	
	Если ЕстьРаботаСНоменклатурой Тогда
		
		ИмяСправочника = ОбщегоНазначенияБЭД.ИмяПрикладногоСправочника("Номенклатура");
		
		Если Не ЗначениеЗаполнено(ИмяСправочника) Тогда
			ЕстьРаботаСНоменклатурой = Ложь;
		Иначе
			Тип = Тип("СправочникСсылка." + ИмяСправочника);
			ТипМетаданных = Метаданные.НайтиПоТипу(Тип);
			
			Если ПравоДоступа("Изменение", ТипМетаданных) Тогда
				МодульРаботаСНоменклатурой = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатурой");
				Настройки = МодульРаботаСНоменклатурой.НастройкиПодсистемы();
				ИспользоватьВидыНоменклатуры = Настройки.ИспользоватьВидыНоменклатуры;
			Иначе
				ЕстьРаботаСНоменклатурой = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьРаботаСНоменклатурой Тогда
		МодульРаботаСНоменклатурой = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатурой");
		Настройки = МодульРаботаСНоменклатурой.НастройкиПодсистемы();
		
		ДоступенПакетныйРежимСозданияНоменклатуры = Настройки.ИспользоватьПакетноеСозданиеНоменклатуры;
	КонецЕсли;
	
	Параметры.Свойство("РежимЗапросаЦен", РежимЗапросаЦен);
	ТорговыеПредложенияПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект);
	
	// Заполнить доступные способы доставки Самовывоз.
	ТорговыеПредложенияПереопределяемый.ПолучитьСпособыДоставки(СпособыДоставкиСамовывоз, "Самовывоз");
	
	СпособыДоставки = Новый СписокЗначений;
	ТорговыеПредложенияПереопределяемый.ПолучитьСпособыДоставки(СпособыДоставки,);
	Элементы.КонтрагентыСпособДоставки.СписокВыбора.ЗагрузитьЗначения(СпособыДоставки.ВыгрузитьЗначения());
	
	ПравоНастройкиОбменаДокументами = БизнесСеть.ПравоНастройкиОбменаДокументами(Ложь);
	
	Если НЕ ПравоНастройкиОбменаДокументами Тогда
		Элементы.Организация.РежимВыбораИзСписка = Истина;
	КонецЕсли;
	
	// Заполнение данных формы по параметрам.
	ЗаполнитьПоПараметрам(Отказ);
	
	УстановитьВидимостьДоступностьЭлементовФормы();
	
	// Установка типов для элементов форм.
	ИмяСправочника = ОбщегоНазначенияБЭД.ИмяПрикладногоСправочника("Номенклатура");
	ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка." + ИмяСправочника);
	Элементы.ТоварыНоменклатура.ОграничениеТипа = ОграничениеТипа;
	
	ИмяСправочника = ОбщегоНазначенияБЭД.ИмяПрикладногоСправочника("ХарактеристикиНоменклатуры");
	ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка." + ИмяСправочника);
	Элементы.ТоварыХарактеристика.ОграничениеТипа = ОграничениеТипа;
	
	ИмяСправочника = ОбщегоНазначенияБЭД.ИмяПрикладногоСправочника("УпаковкиНоменклатуры");
	ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка." + ИмяСправочника);
	Элементы.ТоварыУпаковка.ОграничениеТипа = ОграничениеТипа;
	
	ИмяСправочника = ОбщегоНазначенияБЭД.ИмяПрикладногоСправочника("ФизическиеЛица");
	Если ИмяСправочника = Неопределено Тогда
		ОграничениеТипа = Новый ОписаниеТипов("Строка");
	Иначе
		ОграничениеТипа = Новый ОписаниеТипов("Строка, СправочникСсылка." + ИмяСправочника);
	КонецЕсли;
	Элементы.КонтактноеЛицо.ОграничениеТипа = ОграничениеТипа;
	
	ИмяСправочника = ОбщегоНазначенияБЭД.ИмяПрикладногоСправочника("ЕдиницыИзмерения");
	ОграничениеТипа = Новый ОписаниеТипов("Строка, СправочникСсылка." + ИмяСправочника);
	Элементы.ТоварыЕдиницаИзмерения.ОграничениеТипа = ОграничениеТипа;
	
	Элементы.ТоварыХарактеристика.Видимость = ТорговыеПредложения.НастройкиПодсистемы().ИспользоватьХарактеристики;
	УстановитьИспользованиеХарактеристик();
	
	АдресаАбонента = ТорговыеПредложения.НовыйАдресАбонента();
	ТорговыеПредложенияПереопределяемый.ЗаполнитьАдресаАбонента(АдресаАбонента);
	Для каждого СтрокаАдреса Из АдресаАбонента Цикл
		Если СобственныеАдресаДоставки.НайтиСтроки(
				Новый Структура("Представление", СтрокаАдреса.Представление)).Количество() = 0 Тогда
			ЗаполнитьЗначенияСвойств(СобственныеАдресаДоставки.Добавить(), СтрокаАдреса);
		КонецЕсли;
	КонецЦикла;
	
	ПустойВидКонтактнойИнформации = ТорговыеПредложения.ВидКонтактнойИнформацииАдреса();
	
	Если РежимЗапросаЦен Тогда
		
		Элементы.КонтрагентыСуммаСНДС.Видимость =      Ложь;
		Элементы.КонтрагентыСпособДоставки.Видимость = Ложь;
		Элементы.КонтрагентыАдресДоставки.Видимость =  Ложь;
		Элементы.ГруппаИтоги.Видимость = Ложь;
		Элементы.ГруппаЗаказыКОформлению.РастягиватьПоВертикали = Истина;
		
		Элементы.ТоварыЦена.Видимость =     Ложь;
		Элементы.ТоварыСуммаНДС.Видимость = Ложь;
		Элементы.ТоварыСумма.Видимость =    Ложь;
		Элементы.ТоварыНоменклатура.Видимость = Ложь;
		Элементы.ТоварыСтавкаНДС.Видимость =    Ложь;
		Элементы.ТоварыХарактеристика.Видимость = Ложь;
		
		Элементы.ЗаказыСсылкаВалюта.Видимость = Ложь;
		Элементы.ЗаказыСуммаДокумента.Видимость = Ложь;
		
		Заголовок = НСтр("ru = 'Формирование запросов цен поставщикам в 1С:Бизнес-сеть'")
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ХронологияПереключенияСтраниц = Новый Массив;
	СменитьСтраницуШаги(Элементы.СтраницаПодготовкаЗаказов)
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ТорговыеПредложения_ИзменитьКоличествоВЗаказе"
		И Параметр.ИдентификаторЗаказа = ИдентификаторЗаказа
		И Источник <> ЭтотОбъект Тогда
		
		Количество = 1; ЭтоРазница = Истина;
		Если Параметр.Свойство("Количество") Тогда
			Количество = Параметр.Количество;
			ЭтоРазница = Ложь;
		КонецЕсли;
		
		ДобавитьИЗаполнитьСтрокуТоваров(Параметр.Идентификатор, Количество, ЭтоРазница);
		
	ИначеЕсли ИмяСобытия = "ТорговыеПредложения_УдалитьИзЗаказа"
		И Параметр.ИдентификаторЗаказа = ИдентификаторЗаказа
		И Источник <> ЭтотОбъект Тогда
		
		ДобавитьИЗаполнитьСтрокиТоваров(Параметр.ИдентификаторыПредложений);
		
	ИначеЕсли ИмяСобытия = "Запись_ЗаказПоставщику"
		И Элементы.Шаги.ТекущаяСтраница = Элементы.СтраницаОтправкиЗаказов Тогда
		
		Если Заказы.НайтиСтроки(Новый Структура("Ссылка", Источник)).Количество() Тогда
			ЗаполнитьРеквизитыЗаказов();
			Элементы.Заказы.Обновить();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Организация = Настройки.Получить("Организация");
		
		Если Не ЗначениеЗаполнено(Организация) Тогда
			// Автозаполнение организации, если она единственная зарегистрированная в сервисе.
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 2
			|	ОрганизацииБизнесСеть.Организация.Ссылка КАК Ссылка
			|ИЗ
			|	РегистрСведений.ОрганизацииБизнесСеть КАК ОрганизацииБизнесСеть";
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Количество() = 1 И Выборка.Следующий() Тогда
				Организация = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		ПоказатьСкрытьКомандуРегистрацииОрганизации(Элементы, Организация, ЗарегистрироватьОрганизацию);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Не ЗавершениеРаботы И Не ВыполняетсяЗакрытие
		И Не Элементы.Шаги.ТекущаяСтраница = Элементы.СтраницаФинал Тогда
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект),
						НСтр("ru = 'Формирование документов будет прервано. Продолжить?'"),
						РежимДиалогаВопрос.ДаНет);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПоказатьСкрытьКомандуРегистрацииОрганизации(Элементы, ВыбранноеЗначение, ЗарегистрироватьОрганизацию);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	СтрокаТовары = Элементы.Товары.ТекущиеДанные;
	СтрокаТовары.Пометка = СтрокаТовары.Количество;
	
	ПриИзмененииКоличестваТоваров(СтрокаТовары);
	
	ПересчитатьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если Поле.Имя = "ТоварыКоличество" Тогда
		Возврат;
	ИначеЕсли Поле.Имя = "ТоварыНоменклатура" Тогда
		Возврат;
	ИначеЕсли Поле.Имя = "ТоварыХарактеристика" Тогда
		Возврат;
	ИначеЕсли Поле.Имя = "ТоварыНаименованиеКонтрагента" Тогда
		ПараметрыОткрытия = БизнесСетьКлиентСервер.ОписаниеИдентификацииОрганизацииКонтрагентов();
		ПараметрыОткрытия.ИНН = ТекущиеДанные.ИННКонтрагента;
		ПараметрыОткрытия.КПП = ТекущиеДанные.КППКонтрагента;
		БизнесСетьСлужебныйКлиент.ОткрытьПрофильУчастника(ПараметрыОткрытия);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗапросКоммерческихПредложений) Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("ИдентификаторЗаказа", ИдентификаторЗаказа);
	ПараметрыФормы.Вставить("Идентификатор",       ТекущиеДанные.Идентификатор);
	ПараметрыФормы.Вставить("Валюта",              Валюта);
	ПараметрыФормы.Вставить("Организация",         Организация);
	
	ТорговыеПредложенияКлиент.ОткрытьТорговоеПредложение(ПараметрыФормы, ЭтотОбъект, ТекущиеДанные.Идентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПометкаПриИзменении(Элемент)
	
	СтрокаТовары = Элементы.Товары.ТекущиеДанные;
	СтрокаТовары.Количество = СтрокаТовары.Пометка;

	ПриИзмененииКоличестваТоваров(СтрокаТовары);
	
	ПересчитатьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ПересчитатьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() Тогда
		
		ИдентификаторыПредложений = Новый Массив;
		Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
			ИдентификаторыПредложений.Добавить(Товары.НайтиПоИдентификатору(ИдентификаторСтроки).Идентификатор);
		КонецЦикла;
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ИдентификаторЗаказа",       ИдентификаторЗаказа);
		ПараметрыОповещения.Вставить("ИдентификаторыПредложений", ИдентификаторыПредложений);
		Оповестить("ТорговыеПредложения_УдалитьИзЗаказа", ПараметрыОповещения);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		ЗаполнитьДанныеСтрокиПоНоменклатуре(ТекущиеДанные);
	Иначе
		ОчиститьДанныеСтрокиПоНоменклатуре(ТекущиеДанные);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеСтрокиПоНоменклатуре(ТекущиеДанные)
	
	Реквизиты = РеквизитыНоменклатуры(ТекущиеДанные.Номенклатура);
	
	ТекущиеДанные.ИспользованиеХарактеристик = Реквизиты.ИспользованиеХарактеристик;
	ТекущиеДанные.ЕдиницаИзмерения           = Реквизиты.ЕдиницаИзмерения;
	ТекущиеДанные.Упаковка                   = Неопределено;
	
	Если ЕстьРаботаСНоменклатурой Тогда 
		
		ВидНоменклатуры  = ПолучитьВидНоменклатуры(ТекущиеДанные.Номенклатура);
		
		Отбор = Новый Структура("ИдентификаторКатегории, ВидНоменклатуры", ТекущиеДанные.ИдентификаторКатегории, Неопределено);
		НайденныеСтроки = Товары.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаТЧ.ВидНоменклатуры) Тогда
				СтрокаТЧ.ВидНоменклатуры = ВидНоменклатуры;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДанныеСтрокиПоНоменклатуре(ТекущиеДанные)
	
	Если ЕстьРаботаСНоменклатурой Тогда
		
		// Очистка видов номенклатуры заполненных автоматически.
		
		Отбор = Новый Структура("ИдентификаторКатегории, ВидНоменклатуры", 
			ТекущиеДанные.ИдентификаторКатегории, ТекущиеДанные.ВидНоменклатуры);
		
		НайденныеСтроки = Товары.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
			Если Не ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
				СтрокаТЧ.ВидНоменклатуры = Неопределено;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;

	ТекущиеДанные.ИспользованиеХарактеристик = Ложь;
	ТекущиеДанные.ЕдиницаИзмерения           = Неопределено;
	ТекущиеДанные.Упаковка                   = Неопределено;
	ТекущиеДанные.ВидНоменклатуры            = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураСоздание(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено
		Или Не ЕстьРаботаСНоменклатурой Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Типы = Элементы.ТоварыНоменклатура.ОграничениеТипа.Типы();
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("КодЕдиницыИзмерения"           , ТекущиеДанные.КодЕдиницыИзмерения);
	ДанныеЗаполнения.Вставить("ПредставлениеЕдиницыИзмерения" , ТекущиеДанные.ПредставлениеЕдиницыИзмерения);
	ДанныеЗаполнения.Вставить("СтавкаНДС"                     , ТекущиеДанные.СтавкаНДС);
	ДанныеЗаполнения.Вставить("Наименование"                  , ТекущиеДанные.НаименованиеНоменклатуры);
	ДанныеЗаполнения.Вставить("ВидНоменклатуры"               , ТекущиеДанные.ВидНоменклатуры);
	ДанныеЗаполнения.Вставить("Артикул"                       , ТекущиеДанные.Артикул);
	ДанныеЗаполнения.Вставить("ЧислительУпаковки"             , ТекущиеДанные.ЧислительУпаковки);
	ДанныеЗаполнения.Вставить("ЗнаменательУпаковки"           , ТекущиеДанные.ЗнаменательУпаковки);
	ДанныеЗаполнения.Вставить("Идентификатор"                 , ТекущиеДанные.ИдентификаторНоменклатурыСервиса);
	
	Результат = ПолучитьПараметрыОткрытияФормыНоменклатуры(Типы, ДанныеЗаполнения);
	
	ОткрытьФорму(Результат.ИмяФормыСоздания, Результат.ПараметрыОткрытия, Элементы.ТоварыНоменклатура);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаказыКОформлению

&НаКлиенте
Процедура ЗаказыКОформлениюПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыКОформлениюПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыКОформлениюСпособДоставкиПриИзменении(Элемент)
	
	Элемент.Родитель.ТекущиеДанные.АдресДоставки = "";
	Элемент.Родитель.ТекущиеДанные.АдресДоставкиЗначенияПолей = "";
	ИнициализацияСпискаВыбораАдреса(Элемент.Родитель, Элементы.КонтрагентыАдресДоставки, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыКОформлениюАдресДоставкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Контрагенты.ТекущиеДанные;
	
	ТекущиеДанные.АдресДоставкиЗначенияПолей = ВыбранноеЗначение;
	ТекущиеДанные.АдресДоставки = Элемент.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение).Представление;
	
	СобственныйАдрес = СобственныеАдресаДоставки.НайтиСтроки(Новый Структура("ЗначенияПолей", ВыбранноеЗначение));
	Если СобственныйАдрес.Количество() Тогда
		ТекущиеДанные.ВидКонтактнойИнформации = СобственныйАдрес[0].Вид;
	Иначе
		ТекущиеДанные.ВидКонтактнойИнформации = ПустойВидКонтактнойИнформации;
	КонецЕсли; 
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыКОформлениюПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Элемент.ТекущийЭлемент.Имя = "КонтрагентыАдресДоставки" Тогда
		ИнициализацияСпискаВыбораАдреса(Элемент, Элементы.КонтрагентыАдресДоставки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыКОформлениюАдресДоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Контрагенты.ТекущиеДанные;
	Если СпособыДоставкиСамовывоз.НайтиПоЗначению(ТекущиеДанные.СпособДоставки) = Неопределено Тогда // Доставка.
		
		СтандартнаяОбработка = Ложь;
		
		ВидКонтактнойИнформации = ТекущиеДанные.ВидКонтактнойИнформации;
		Если Не ЗначениеЗаполнено(ВидКонтактнойИнформации) Тогда
			ВидКонтактнойИнформации = ПустойВидКонтактнойИнформации;
		КонецЕсли;
	
		ПараметрыОткрытия = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
			ВидКонтактнойИнформации, ТекущиеДанные.АдресДоставкиЗначенияПолей,
			ТекущиеДанные.АдресДоставки,,
			ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес"));
			
		ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru = 'Введите адрес склада доставки'"));
		
		Оповещение = Новый ОписаниеОповещения("ОткрытьФормуКонтактнойИнформацииЗавершение", ЭтотОбъект, ТекущиеДанные);
			
		УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия,,Оповещение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыКОформлениюАдресДоставкиОчистка(Элемент, СтандартнаяОбработка)
	
	Элемент.Родитель.ТекущиеДанные.АдресДоставкиЗначенияПолей = "";
	Элемент.Родитель.ТекущиеДанные.ВидКонтактнойИнформации = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаказы

&НаКлиенте
Процедура ЗаказыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Заказы.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.ЗаказСоздан Тогда
		ПоказатьЗначение(Неопределено, ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтраницаПодготовкаЗаказов

&НаКлиенте
Процедура Добавить(Команда)
	
	ИмяФормыПоискаПредложенияПоСтроке = "Обработка.ТорговыеПредложения.Форма.ПоискПоОтборам";
	
	Если ТипЗнч(ЭтотОбъект.ВладелецФормы) = Тип("ФормаКлиентскогоПриложения")
		И ЭтотОбъект.ВладелецФормы.ИмяФормы = ИмяФормыПоискаПредложенияПоСтроке
		И ЭтотОбъект.ВладелецФормы.Открыта() Тогда
		
		ЭтотОбъект.ВладелецФормы.Активизировать();
		
	Иначе
		
		ОчиститьСообщения();
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ИдентификаторЗаказа",    ИдентификаторЗаказа);
		ПараметрыОткрытия.Вставить("АдресТоваровВХранилище", АдресХранилищаТоваров());
		ТорговыеПредложенияКлиент.ОткрытьФормуПоискаПоОтборам(ПараметрыОткрытия);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсе(Команда)
	
	УстановитьСнятьПометкиТаблицыТовары(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметки(Команда)
	
	УстановитьСнятьПометкиТаблицыТовары(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаОтправкиЗаказов

&НаКлиенте
Процедура КонтактноеЛицоПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(КонтактноеЛицо) Тогда
		ЗаполнитьКонтактнуюИнформацию(КонтактноеЛицо, ЭлектроннаяПочта, Телефон, УведомлятьПоПочте);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаДлительнаяОперация

&НаКлиенте
Процедура ПовторитьТекущуюДлительнуюОперацию(Команда)
	
	Если Не ПустаяСтрока(ТекущийШаг) И Не ПустаяСтрока(СледующийШаг) Тогда
		ВыполнитьДлительнуюОперацию(Элементы[ТекущийШаг], Элементы[СледующийШаг]);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаФинал

&НаКлиенте
Процедура ОткрытьИсходящиеДокументы(Команда)
	
	ОчиститьСообщения();
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимИсходящихДокументов", Истина);
	ОткрытьФорму("Обработка.БизнесСеть.Форма.ДокументыОбмена", ПараметрыОткрытия);

КонецПроцедуры

#КонецОбласти

#Область КомандыНавигации

&НаКлиенте
Процедура Готово(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	
	ПерейтиНаСледующийШаг();

КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)

	ОтменитьАктивныеФоновыеОперации();
	
	Если Элементы.Шаги.ТекущаяСтраница = Элементы.СтраницаОтправкиЗаказов Тогда
		
		ПриВозвращенииСтраницаОтправкиЗаказов();
		
	Иначе
		
		ВернутьсяНаПредыдущуюСтраницу();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	ОтменитьАктивныеФоновыеОперации();
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключениеОрганизацииПродолжение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.СтатусПодключения = "Подключена" Тогда
		ПоказатьСкрытьКомандуРегистрацииОрганизации(Элементы, Организация, ЗарегистрироватьОрганизацию);
		ПерейтиНаСледующийШаг();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СтраницаПодготовкаЗаказов

&НаКлиенте
Процедура ПриОткрытииСтраницаПодготовкаЗаказов()
	
	ПоказатьСкрытьКомандуРегистрацииОрганизации(Элементы, Организация, ЗарегистрироватьОрганизацию);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаЗаполненияСтраницаПодготовкаЗаказов(Отказ)
	
	Оповещение = Новый ОписаниеОповещения("ПодключениеОрганизацииПродолжение", ЭтотОбъект);
	ИнтеграцияТорговыеПредложенияКлиент.ОткрытьФормуПодключенияОрганизацииСПроверкойПодключения(
		Организация, ЭтотОбъект, Оповещение, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Если Товары.НайтиСтроки(Новый Структура("Пометка", Истина)).Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не выбрано ни одного товара.'"),,
			"Товары",,
			Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Организация не заполнена.'"),,
			"Организация",,Отказ);
	КонецЕсли;

	Если Не РежимЗапросаЦен Тогда
		
		ПроверкаСпискаТоваров(Отказ, ЕстьРаботаСНоменклатурой);
		
		// Проверка адреса доставки.
		Для ТекИндекс = 0 По Контрагенты.Количество()-1 Цикл
			ТекущаяСтрока = Контрагенты[ТекИндекс];
			Если СпособыДоставкиСамовывоз.НайтиПоЗначению(ТекущаяСтрока.СпособДоставки) = Неопределено
				И ПустаяСтрока(ТекущаяСтрока.АдресДоставки) Тогда // Доставка.
				ТекстШаблонаОшибки = НСтр("ru='Не указан адрес доставки %1 в строке %2.'");
				ТекстОшибки = СтрШаблон(ТекстШаблонаОшибки,	Элементы.Контрагенты.Заголовок, ТекИндекс + 1);
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЗаказыКОформлению", ТекИндекс + 1, "АдресДоставки"),,
				Отказ)
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСнятьПометкиТаблицыТовары(ЗначениеПометки)
	
	Для каждого СтрокаТовары Из Товары Цикл
		СтрокаТовары.Пометка = ЗначениеПометки;
	КонецЦикла;
	
	ПересчитатьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКоличестваТоваров(СтрокаТовары)
	
	СтрокаТаблицы = ОписаниеСтрокиТаблицыТовары();
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаТовары);
	ПересчитатьСуммуПоСтроке(СтрокаТаблицы);
	ЗаполнитьЗначенияСвойств(СтрокаТовары, СтрокаТаблицы);
	
	ОповеститьОбИзмененииКоличества(СтрокаТовары);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьСкрытьКомандуРегистрацииОрганизации(Элементы, Знач Организация, ЗарегистрироватьОрганизацию)
	
	Показать = Не Организация.Пустая() 
		И Не ИнтеграцияТорговыеПредложенияВызовСервера.ОрганизацияПодключена(Организация);
	Если Не Показать Тогда
		ЗарегистрироватьОрганизацию = Ложь;
	КонецЕсли;
	Элементы.НадписьЗарегистрироватьОрганизацию.Видимость = Показать;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьИтоги(Форма)
	
	СпособДоставкиОсновной = Неопределено;
	Если Форма.СпособыДоставкиСамовывоз.Количество() Тогда
		СпособДоставкиОсновной = Форма.СпособыДоставкиСамовывоз[0].Значение;
	КонецЕсли;
	
	ТаблицаИтогов = ТаблицаИтогов(Форма.Товары);
	МассивКонтрагентов = Новый Массив;
	Для каждого СтрокаИтогов Из ТаблицаИтогов Цикл
		СтрокиПоиска = Форма.Контрагенты.НайтиСтроки(Новый Структура("ИдентификаторКонтрагента", СтрокаИтогов.ИдентификаторКонтрагента));
		Если СтрокиПоиска.Количество() Тогда
			СтрокаЗаказа = СтрокиПоиска[0];
		Иначе
			СтрокаЗаказа = Форма.Контрагенты.Добавить();
			СтрокаЗаказа.СпособДоставки = СпособДоставкиОсновной;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаЗаказа, СтрокаИтогов);
		МассивКонтрагентов.Добавить(СтрокаИтогов.ИдентификаторКонтрагента);
	КонецЦикла;
	
	// Обратный поиск для удаления неиспользуемых строк.
	ПоследняяСтрока = Форма.Контрагенты.Количество() - 1;
	Для СчетчикСтрок = 0 По ПоследняяСтрока Цикл
		НомерСтроки = ПоследняяСтрока - СчетчикСтрок;
		СтрокаЗаказа = Форма.Контрагенты.Получить(НомерСтроки);
		Если МассивКонтрагентов.Найти(СтрокаЗаказа.ИдентификаторКонтрагента) = Неопределено Тогда
			Форма.Контрагенты.Удалить(НомерСтроки);
		КонецЕсли;
	КонецЦикла;
	
	Форма.СуммаВсего = Форма.Контрагенты.Итог("СуммаСНДС");
	Форма.Элементы.Контрагенты.ВысотаВСтрокахТаблицы = Мин(Форма.Контрагенты.Количество(), 5);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТаблицаИтогов(Знач Товары)
	
	ТаблицаИтогов = Товары.Выгрузить(Новый Структура("Пометка", Истина));
	ТаблицаИтогов.Колонки.Добавить("СтрокВЗаказе");
	ТаблицаИтогов.ЗаполнитьЗначения(1, "СтрокВЗаказе");
	ТаблицаИтогов.Свернуть("ИдентификаторКонтрагента, НаименованиеКонтрагента, Контрагент", "СуммаНДС, СуммаСНДС, Количество, СтрокВЗаказе");
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаИтогов);
	
КонецФункции

&НаСервере
Процедура ИзменитьКоличествоВЗаказе(Идентификатор, Количество, ЭтоРазница = Ложь, ДополнительныеПараметры = Неопределено, Отказ = Ложь)
	
	СтрокиТоваровПоИдентификатору = Товары.НайтиСтроки(Новый Структура("Идентификатор", Идентификатор));
	
	Если СтрокиТоваровПоИдентификатору.Количество() Тогда
		СтрокаТовары = СтрокиТоваровПоИдентификатору[0];
		Если Количество <> 0 Тогда
			СтрокаТовары.Количество = ?(ЭтоРазница, СтрокаТовары.Количество + Количество, Количество);
			ТорговыеПредложенияПереопределяемый.ПересчитатьСуммуПоСтроке(СтрокаТовары);
		Иначе
			Товары.Удалить(Товары.Индекс(СтрокаТовары));
		КонецЕсли;
	Иначе
		
		ТорговоеПредложение = ТорговыеПредложенияСлужебный.ПолучитьТорговоеПредложение(Организация, Идентификатор, Валюта, Отказ);
		
		Если Отказ ИЛИ ТорговоеПредложение = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьАдресаСамовывоза(ТорговоеПредложение);
		
		ИсключаемыеПоля = "";
		Если РежимЗапросаЦен Тогда
			ИсключаемыеПоля = "Цена";
		КонецЕсли;
		
		ЗначениеТовары = РеквизитФормыВЗначение("Товары");
		
		СтрокаТовары = ЗначениеТовары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовары, ТорговоеПредложение,, ИсключаемыеПоля);
		Если ЗначениеЗаполнено(ТорговоеПредложение.ПредставлениеНоменклатурыСервиса) Тогда
			СтрокаТовары.НаименованиеНоменклатуры = ТорговоеПредложение.ПредставлениеНоменклатурыСервиса
				+ ?(ЗначениеЗаполнено(ТорговоеПредложение.ПредставлениеХарактеристикиСервиса), 
					", " + ТорговоеПредложение.ПредставлениеХарактеристикиСервиса,
					"");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТовары.КодЕдиницыИзмерения) 
			И ЗначениеЗаполнено(ТорговоеПредложение.КодЕдиницыИзмеренияСервиса) Тогда
			СтрокаТовары.КодЕдиницыИзмерения = ТорговоеПредложение.КодЕдиницыИзмеренияСервиса;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТовары.ИдентификаторКатегории) 
			И ЗначениеЗаполнено(ТорговоеПредложение.ИдентификаторКатегорииСервиса) Тогда
			СтрокаТовары.ИдентификаторКатегории = ТорговоеПредложение.ИдентификаторКатегорииСервиса;
		КонецЕсли;
				
		СтрокаТовары.НеСоздаватьАвтоматически = Истина;
		Если ЕстьРаботаСНоменклатурой Тогда
			Если ДоступенПакетныйРежимСозданияНоменклатуры Тогда
				СтрокаТовары.НеСоздаватьАвтоматически = Ложь;
			КонецЕсли;
			
			СтрокаТовары.ВидНоменклатуры = ПолучитьВидНоменклатурыИзКатегории(СтрокаТовары.ИдентификаторКатегории);
			ДополнитьУсловноеОформление(СтрокаТовары.Идентификатор, СтрокаТовары.НаименованиеНоменклатуры);
			
		КонецЕсли;
		
		СтрокаТовары.Пометка = Истина;
		
		Если ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТовары, ДополнительныеПараметры);
		КонецЕсли;
		
		КонтрагентыТоваров = Контрагенты.НайтиСтроки(Новый Структура("ИдентификаторКонтрагента", СтрокаТовары.ИдентификаторКонтрагента));
		Если КонтрагентыТоваров.Количество() = 0 Тогда
			СтрокаТовары.Контрагент = ОбщегоНазначенияБЭД.НайтиСсылку("Контрагенты",,
				Новый Структура("ИНН, КПП", СтрокаТовары.ИННКонтрагента, СтрокаТовары.КППКонтрагента));
		Иначе
			СтрокаТовары.Контрагент = КонтрагентыТоваров[0].Контрагент;
		КонецЕсли;
		
		СтрокаТовары.ИдентификаторНоменклатуры = Сред(СтрокаТовары.ВнутреннийИдентификатор,
			СтрНайти(СтрокаТовары.ВнутреннийИдентификатор, "#") + 1);
			
		Если Не ЗначениеЗаполнено(СтрокаТовары.ЕдиницаИзмерения) Тогда
			
			Если ЗначениеЗаполнено(ТорговоеПредложение.КодЕдиницыИзмеренияСервиса) Тогда 
				КодЕдиницыИзмерения = ТорговоеПредложение.КодЕдиницыИзмеренияСервиса;
			Иначе
				КодЕдиницыИзмерения = ТорговоеПредложение.КодЕдиницыИзмерения;
			КонецЕсли;	
			
			ПараметрыЕдиницыИзмерения = ТорговыеПредложенияПовтИсп.ПараметрыЕдиницыИзмеренияПоКоду(КодЕдиницыИзмерения);
			СтрокаТовары.ЕдиницаИзмерения = ПараметрыЕдиницыИзмерения.Ссылка;
			Если ЗначениеЗаполнено(ТорговоеПредложение.УпаковкаНаименование) Тогда
				СтрокаТовары.ПредставлениеЕдиницыИзмерения = ТорговоеПредложение.УпаковкаНаименование;
			Иначе
				СтрокаТовары.ПредставлениеЕдиницыИзмерения = ПараметрыЕдиницыИзмерения.Представление;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
			ЗаполнитьСтрокиПоНоменклатуреКонтрагента(СтрокаТовары);
		КонецЕсли;
		
		СтрокаТовары.Количество = Количество;
		ТорговыеПредложенияПереопределяемый.ПересчитатьСуммуПоСтроке(СтрокаТовары);
		
		ЗначениеВРеквизитФормы(ЗначениеТовары, "Товары");
		
	КонецЕсли;
	
	ПересчитатьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАдресаСамовывоза(ТорговоеПредложение)
	
	Если Не ЗначениеЗаполнено(ТорговоеПредложение.АдресаСамовывоза) Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ЭлементКоллекции Из ТорговоеПредложение.АдресаСамовывоза Цикл
	
		Если ЗначениеЗаполнено(ЭлементКоллекции.fiasCodes) Тогда
			ЗначениеXML = РаботаСАдресами.АдресПоИдентификатору(ЭлементКоллекции.fiasCodes[0]);
		Иначе
			ЗначениеXML = ЭлементКоллекции.address;
		КонецЕсли;
		
		Если АдресаСамовывоза.НайтиПоЗначению(ЗначениеXML) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		АдресаСамовывоза.Добавить(ЗначениеXML, ЭлементКоллекции.address);
		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокиПоНоменклатуреКонтрагента(СтрокаТовары = Неопределено)
	
	Если СтрокаТовары = Неопределено Тогда
		СтрокиТоваров = Товары;
	Иначе
		СтрокиТоваров = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаТовары);
	КонецЕсли;
	
	Для каждого ЭлементКоллекцииТоваров Из СтрокиТоваров Цикл
		
		Если ЗначениеЗаполнено(ЭлементКоллекцииТоваров.Номенклатура)
			ИЛИ Не ЗначениеЗаполнено(ЭлементКоллекцииТоваров.Контрагент) Тогда
			Продолжить;
		КонецЕсли;
		
		ВладелецНоменклатуры = ЭлементКоллекцииТоваров.Контрагент;
		СопоставлениеНоменклатурыКонтрагентовПереопределяемый.ПриОпределенииВладельцаНоменклатурыКонтрагента(
			ЭлементКоллекцииТоваров.Контрагент, ВладелецНоменклатуры);
		
		НоменклатураКонтрагента = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента(
			ВладелецНоменклатуры, ЭлементКоллекцииТоваров.ИдентификаторНоменклатуры);
			
		Отбор = Новый Структура();
		Отбор.Вставить("Владелец", ВладелецНоменклатуры);
		Отбор.Вставить("НоменклатураКонтрагента", НоменклатураКонтрагента);
		НайденноеЗначение = СопоставлениеНоменклатурыКонтрагентов.НайтиСоответствиеНоменклатуры(Отбор, Истина);
		
		Если Не ЗначениеЗаполнено(НайденноеЗначение) Тогда
			Продолжить;
		КонецЕсли;
		
		ПерваяСтрока = НайденноеЗначение[0];
		ЗаполнитьЗначенияСвойств(ЭлементКоллекцииТоваров, ПерваяСтрока.НоменклатураИБ);
		
		ЭлементКоллекцииТоваров.ЕдиницаИзмерения = ПерваяСтрока.НоменклатураИБ.Упаковка;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РеквизитыНоменклатуры(Знач Номенклатура)
	
	Возврат ТорговыеПредложенияСлужебный.СведенияОНоменклатуре(Номенклатура);
	
КонецФункции

&НаСервере
Функция АдресХранилищаТоваров()
	
	ТоварыОбъект = РеквизитФормыВЗначение("Товары");
	
	АдресТоваровВХранилище = ПоместитьВоВременноеХранилище(ТоварыОбъект, УникальныйИдентификатор);
	
	Возврат АдресТоваровВХранилище;
	
КонецФункции

&НаСервере
Процедура ПересчитатьСуммуПоСтроке(СтрокаТовары)

	ТорговыеПредложенияПереопределяемый.ПересчитатьСуммуПоСтроке(СтрокаТовары);
	
КонецПроцедуры

&НаКлиенте
Функция ОписаниеСтрокиТаблицыТовары()
	
	СтруктураСтроки = Новый Структура;
	СтруктураСтроки.Вставить("СтавкаНДС",		Неопределено);
	СтруктураСтроки.Вставить("Цена",			0);
	СтруктураСтроки.Вставить("ЦенаВключаетНДС",	Ложь);
	СтруктураСтроки.Вставить("Количество",		0);
	СтруктураСтроки.Вставить("Сумма",			0);
	СтруктураСтроки.Вставить("СуммаНДС",		0);
	СтруктураСтроки.Вставить("СуммаСНДС",		0);
	СтруктураСтроки.Вставить("ПроцентСкидки",	0);
	СтруктураСтроки.Вставить("СуммаСкидки",		0);
	
	Возврат СтруктураСтроки;
	
КонецФункции

&НаКлиенте
Процедура ОповеститьОбИзмененииКоличества(СтрокаТовары)
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ИдентификаторЗаказа",      ИдентификаторЗаказа);
	ПараметрыОповещения.Вставить("Идентификатор",            СтрокаТовары.Идентификатор);
	ПараметрыОповещения.Вставить("ИдентификаторКонтрагента", СтрокаТовары.ИдентификаторКонтрагента);
	ПараметрыОповещения.Вставить("Количество",               СтрокаТовары.Количество);
	ПараметрыОповещения.Вставить("Цена",                     СтрокаТовары.Цена);
	Оповестить("ТорговыеПредложения_ИзменитьКоличествоВЗаказе", ПараметрыОповещения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализацияСпискаВыбораАдреса(Элемент, ПолеАдреса, ПоказыватьПредупреждение = Истина)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	СписокВыбора = ПолеАдреса.СписокВыбора;
	СписокВыбора.Очистить();
	
	Если СпособыДоставкиСамовывоз.НайтиПоЗначению(ТекущиеДанные.СпособДоставки) <> Неопределено Тогда // Самовывоз.
		
		ПолеАдреса.КнопкаВыбора = Ложь;
		
		Для каждого ЭлементСписка Из АдресаСамовывоза Цикл
			СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЦикла;
		
		Если ПоказыватьПредупреждение И СписокВыбора.Количество() = 0 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Список адресов контрагента пустой.'"));
		КонецЕсли;
		
	Иначе
		
		ПолеАдреса.КнопкаВыбора = Истина;
		Для каждого ЭлементСписка Из СобственныеАдресаДоставки Цикл
			СписокВыбора.Добавить(ЭлементСписка.ЗначенияПолей, ЭлементСписка.Представление);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ДополнительныеПараметры.АдресДоставки = Результат.Представление;
		ДополнительныеПараметры.АдресДоставкиЗначенияПолей = Результат.КонтактнаяИнформация;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаОтправкиЗаказов

&НаКлиенте
Процедура ПриОткрытииСтраницаОтправкиЗаказов()
	
	Если ПустаяСтрока(ЭлектроннаяПочта) И ПустаяСтрока(Телефон)
		И ЗначениеЗаполнено(КонтактноеЛицо) И ТипЗнч(КонтактноеЛицо) <> Тип("Строка") Тогда
			ЗаполнитьКонтактнуюИнформацию(КонтактноеЛицо, ЭлектроннаяПочта, Телефон, УведомлятьПоПочте);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВозвращенииСтраницаОтправкиЗаказов()
	
	Если Заказы.Количество() > 0 Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Удалить сформированные документы'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ТекстВопроса = НСтр("ru = 'При переходе назад сформированные документы будут удалены.'");
		
		ВопросЗавершение = Новый ОписаниеОповещения("ПриВозвращенииСтраницаОтправкиЗаказовЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ВопросЗавершение, ТекстВопроса, Кнопки);
		
	Иначе
		
		ВернутьсяНаПредыдущуюСтраницу();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВозвращенииСтраницаОтправкиЗаказовЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Если ЗначениеЗаполнено(ЗапросКоммерческихПредложений) Тогда
			
			МассивЗаказов = Новый Массив;
			
			Для Каждого СтрокаТЧ Из Заказы Цикл 
				МассивЗаказов.Добавить(СтрокаТЧ.Ссылка);
			КонецЦикла;
			
			Если МассивЗаказов.Количество() > 0 Тогда 
				Оповестить("КоммерческиеПредложения_УдалениеЗаказовПоставщику", МассивЗаказов, ЗапросКоммерческихПредложений);
			КонецЕсли;
		КонецЕсли;
		
		ВыполнитьДлительнуюОперацию(Элементы.СтраницаОтправкиЗаказов,
			Элементы.СтраницаПодготовкаЗаказов);               // Удаление сформированных заказов
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьКонтактнуюИнформацию(КонтактноеЛицо, ЭлектроннаяПочта, Телефон, УведомлятьПоПочте)
	
	Если Не ОбщегоНазначения.ЭтоСсылка(ТипЗнч(КонтактноеЛицо)) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитов = БизнесСеть.ОписаниеКонтактнойИнформацииПользователя();
	БизнесСетьПереопределяемый.ПолучитьКонтактнуюИнформациюПользователя(КонтактноеЛицо, СтруктураРеквизитов);
	ЭлектроннаяПочта = СтруктураРеквизитов.ЭлектроннаяПочта;
	Телефон = СтруктураРеквизитов.Телефон;
	УведомлятьПоПочте = ЗначениеЗаполнено(ЭлектроннаяПочта);
	
КонецПроцедуры

#КонецОбласти

#Область Навигация

&НаКлиенте
Процедура СменитьСтраницуШаги(Знач НоваяСтраница)
	
	Элементы.КомандыНавигации.Доступность = Истина;
	
	КомандыСВозвратом = Элементы.НазадДалее;
	КомандыБезВозврата = Элементы.ДалееОтмена;
	
	Если НоваяСтраница = Элементы.СтраницаПодготовкаЗаказов Тогда
		
		ПриОткрытииСтраницаПодготовкаЗаказов();
		Элементы.НадписьШаг.Заголовок = НСтр("ru = 'Шаг 1 из 2. Подготовка документов'");

	ИначеЕсли НоваяСтраница = Элементы.СтраницаОтправкиЗаказов Тогда
		
		ПриОткрытииСтраницаОтправкиЗаказов();
		Элементы.НадписьШаг.Заголовок = НСтр("ru = 'Шаг 2 из 2. Отправка документов'");
		
	ИначеЕсли НоваяСтраница = Элементы.СтраницаФинал Тогда
		
		Если РежимЗапросаЦен Тогда
			Оповестить("ТорговыеПредложения_ОтправленыЗапросыЦен",
				Новый Структура("ИдентификаторЗаказа", ИдентификаторЗаказа));
		Иначе
			Оповестить("ТорговыеПредложения_ОтправленыЗаказыТоваров",
				Новый Структура("ИдентификаторЗаказа", ИдентификаторЗаказа));
		КонецЕсли;
		
	КонецЕсли;
	
	Если ХронологияПереключенияСтраниц.Количество() Тогда
		СменитьСтраницуКомандНавигации(КомандыСВозвратом)
	Иначе
		СменитьСтраницуКомандНавигации(КомандыБезВозврата)
	КонецЕсли;
	
	Элементы.Шаги.ТекущаяСтраница = НоваяСтраница;
	
КонецПроцедуры

&НаКлиенте
Процедура СменитьСтраницуКомандНавигации(НоваяСтраница)
	
	Если НоваяСтраница = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.КомандыНавигации.ТекущаяСтраница = НоваяСтраница;
	
	Если НоваяСтраница = Элементы.ДалееОтмена Тогда
		Элементы.ДалееПервая.КнопкаПоУмолчанию = Истина;
		Элементы.ДалееПервая.АктивизироватьПоУмолчанию = Истина;
		ТекущийЭлемент = Элементы.ДалееПервая;
	ИначеЕсли НоваяСтраница = Элементы.НазадДалееОтмена Тогда
		Элементы.ДалееВторая.КнопкаПоУмолчанию = Истина;
		Элементы.ДалееВторая.АктивизироватьПоУмолчанию = Истина;
		ТекущийЭлемент = Элементы.ДалееВторая;
	ИначеЕсли НоваяСтраница = Элементы.НазадДалее Тогда
		Элементы.ДалееТретья.КнопкаПоУмолчанию = Истина;
		Элементы.ДалееТретья.АктивизироватьПоУмолчанию = Истина;
		ТекущийЭлемент = Элементы.ДалееТретья;
	ИначеЕсли НоваяСтраница = Элементы.НазадГотово Тогда
		Элементы.ГотовоПервая.КнопкаПоУмолчанию = Истина;
	ИначеЕсли НоваяСтраница = Элементы.Готово Тогда
		Элементы.ГотовоВторая.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьсяНаПредыдущуюСтраницу()
	
	ПредыдущийШаг = ХронологияПереключенияСтраниц[ХронологияПереключенияСтраниц.ВГраница()];
	ХронологияПереключенияСтраниц.Удалить(ХронологияПереключенияСтраниц.ВГраница());
	СменитьСтраницуШаги(ПредыдущийШаг);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСледующийШаг()
	
	ОчиститьСообщения();
	
	СледующаяСтраница       = Неопределено;
	СтраницаКомандНавигации = Неопределено;
	ДлительнаяОперация      = Ложь;
	
	Отказ = Ложь;
	
	Если Элементы.Шаги.ТекущаяСтраница = Элементы.СтраницаПодготовкаЗаказов Тогда
		
		ПроверкаЗаполненияСтраницаПодготовкаЗаказов(Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Если Не РежимЗапросаЦен Тогда
			Если ЕстьРаботаСНоменклатурой Тогда
				СоздатьНовыеНоменклатуры();
				СоздатьНовыеХарактеристики();
			КонецЕсли;
			
			ПроверкаСпискаТоваров(Отказ, Ложь);
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ХронологияПереключенияСтраниц.Добавить(Элементы.СтраницаПодготовкаЗаказов);
		СледующаяСтраница  = Элементы.СтраницаОтправкиЗаказов;
		ДлительнаяОперация = Истина;
		
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.СтраницаОтправкиЗаказов Тогда
		
		Если ЕстьОшибкиСозданияЗаказа И НЕ РазрешеноЧастичноеФормированиеЗаказа Тогда
			
			Оповещение = Новый ОписаниеОповещения("ПоказатьВопросЧастичногоФормированияЗавершение", ЭтотОбъект);
			
			ТекстВопроса = НСтр("ru = 'Внимание! При формировании заказа торгового предложения произошли ошибки. Подробности см. в журнале регистрации.
			|Документы будут отправлены только по созданным заказам.'");
			
			КнопкиВыбора = Новый СписокЗначений;
			КнопкиВыбора.Добавить("Отменить"  , "Отменить");
			КнопкиВыбора.Добавить("Продолжить", "Продолжить");
			
			ПараметрыВопроса = Новый Структура;
			ПараметрыВопроса.Вставить("КнопкаПоУмолчанию", "Продолжить");
			ПараметрыВопроса.Вставить("ПредлагатьБольшеНеЗадаватьЭтотВопрос", Ложь);
			ПараметрыВопроса.Вставить("Картинка", БиблиотекаКартинок.Предупреждение32);
			ПараметрыВопроса.Вставить("Заголовок", НСтр("ru = 'Продолжить частичную отправку заказа торгового предложения?'"));
			
			СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(Оповещение, ТекстВопроса, КнопкиВыбора, ПараметрыВопроса);
			
			Возврат;
			
		КонецЕсли;
		
		// Проверка обязательного поля адреса электронной почты.
		Если Не ЗначениеЗаполнено(ЭлектроннаяПочта) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Укажите адрес электронной почты'"),,
				"ЭлектроннаяПочта",, Отказ);
		// Проверка формата электронной почты.
		ИначеЕсли Не ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(ЭлектроннаяПочта, Истина) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Адрес электронной почты введен неверно'"),,
				"ЭлектроннаяПочта",, Отказ);
		КонецЕсли;
		
		// Проверка обязательного поля контактное лицо
		Если Не ЗначениеЗаполнено(КонтактноеЛицо) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Укажите контактное лицо'"),,
				"КонтактноеЛицо",, Отказ);
		КонецЕсли;
		
		// Проверка обязательного поля телефон
		Если Не ЗначениеЗаполнено(Телефон) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Укажите телефон'"),,
				"Телефон",, Отказ);
		КонецЕсли;
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ХронологияПереключенияСтраниц.Добавить(Элементы.СтраницаОтправкиЗаказов);
		СледующаяСтраница = Элементы.СтраницаФинал;
		ДлительнаяОперация = Истина;
		
	КонецЕсли;
	
	Если СледующаяСтраница <> Неопределено Тогда
		Если ДлительнаяОперация Тогда
			ВыполнитьДлительнуюОперацию(Элементы.Шаги.ТекущаяСтраница, СледующаяСтраница);
		Иначе
			СменитьСтраницуШаги(СледующаяСтраница);
			СменитьСтраницуКомандНавигации(СтраницаКомандНавигации);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросЧастичногоФормированияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Значение = "Продолжить" Тогда
		РазрешеноЧастичноеФормированиеЗаказа = Истина;
		ПерейтиНаСледующийШаг();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСФоновымиЗаданиями

&НаКлиенте
Процедура ВыполнитьДлительнуюОперацию(Знач ТекущаяСтраница, СледующаяСтраница)
	
	ОчиститьСообщения();
	
	СменитьСтраницуШаги(Элементы.СтраницаДлительнаяОперация);
	СменитьСтраницуКомандНавигации(Элементы.Отмена);
	Элементы.СтраницыДлительнойОперации.ТекущаяСтраница = Элементы.СтраницаВПроцессе;
	
	Задание = Новый Структура("ИмяПроцедуры, Наименование, ПараметрыПроцедуры");
	Задание.ПараметрыПроцедуры = Новый Структура;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтраница", ТекущаяСтраница);
	ДополнительныеПараметры.Вставить("СледующаяСтраница", СледующаяСтраница);
	
	Если ТекущаяСтраница = Элементы.СтраницаПодготовкаЗаказов
		И СледующаяСтраница = Элементы.СтраницаОтправкиЗаказов Тогда // Создание заказов.
		
		Элементы.НазваниеТекущейДлительнойОперации.Заголовок = НСтр("ru = 'Подготовка документов'");
			
		Задание.Наименование = НСтр("ru = '1С:Бизнес-сеть. Торговые предложения. Формирование документов.'");
		Задание.ИмяПроцедуры = "Обработки.ТорговыеПредложения.СформироватьЗаказы";
		
		ДополнительныеПараметрыПроцедуры = Новый Структура;
		ДополнительныеПараметрыПроцедуры.Вставить("ЗарегистрироватьОрганизацию", ЗарегистрироватьОрганизацию);
		ДополнительныеПараметрыПроцедуры.Вставить("КонтекстИсточника", КонтекстИсточника);
		ДополнительныеПараметрыПроцедуры.Вставить("Организация",       Организация);
		ДополнительныеПараметрыПроцедуры.Вставить("Валюта",            Валюта);
		ДополнительныеПараметрыПроцедуры.Вставить("Доставка",          Контрагенты);
		
		Если ЗарегистрироватьОрганизацию Тогда
			ДополнительныеПараметры.Вставить("РегистрацияОрганизации", Истина);
		КонецЕсли;
		
		Задание.ПараметрыПроцедуры.Вставить("Товары", Товары);
		Задание.ПараметрыПроцедуры.Вставить("ДополнительныеПараметры", ДополнительныеПараметрыПроцедуры);

	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаОтправкиЗаказов
		И СледующаяСтраница = Элементы.СтраницаПодготовкаЗаказов Тогда // Удаление заказов.
		
		ЗаказыУдалены = ВыполнитьУдалениеЗаказовНаСервере();
		
		ДлительнаяОперацияЗавершение(ЗаказыУдалены, ДополнительныеПараметры);
		
		Возврат;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаОтправкиЗаказов
		И СледующаяСтраница = Элементы.СтраницаФинал Тогда // Отправка заказов.
		
		Элементы.НазваниеТекущейДлительнойОперации.Заголовок = НСтр("ru = 'Отправка документов поставщику'");
		
		Задание.Наименование = НСтр("ru = '1С:Бизнес-сеть. Торговые предложения. Отправка документов поставщику.'");
		Задание.ИмяПроцедуры = "Обработки.ТорговыеПредложения.ОтправитьЗаказы";
		
		ДополнительныеПараметрыЗаказа = ОписаниеСопроводительнойИнформацииЗаказа();
		ДополнительныеПараметрыЗаказа.СопроводительнаяИнформация = СопроводительнаяИнформация;
		ДополнительныеПараметрыЗаказа.УникальныйИдентификатор    = УникальныйИдентификатор;
		ДополнительныеПараметрыЗаказа.УведомлятьПоПочте          = УведомлятьПоПочте;
		ДополнительныеПараметрыЗаказа.КонтактноеЛицо             = Строка(КонтактноеЛицо);
		ДополнительныеПараметрыЗаказа.Организация                = Организация;
		ДополнительныеПараметрыЗаказа.Телефон                    = Телефон;
		ДополнительныеПараметрыЗаказа.ЭлектроннаяПочта           = ЭлектроннаяПочта;
		
		Задание.ПараметрыПроцедуры.Вставить("Заказы", Заказы);
		Задание.ПараметрыПроцедуры.Вставить("ДополнительныеПараметры", ДополнительныеПараметрыЗаказа);
		
	КонецЕсли;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения = Задание.Наименование;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	
	ДлительнаяОперацияЗавершение = Новый ОписаниеОповещения(
		"ДлительнаяОперацияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
	ДлительнаяОперация = ВыполнитьЗаданиеВФоне(Задание, УникальныйИдентификатор);

	ИдентификаторЗадания = ДлительнаяОперация.ИдентификаторЗадания;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация,
		ДлительнаяОперацияЗавершение,
		ПараметрыОжидания);
		
КонецПроцедуры

&НаКлиенте
Функция ОписаниеСопроводительнойИнформацииЗаказа()
	
	Результат = Новый Структура;
	Результат.Вставить("СопроводительнаяИнформация");
	Результат.Вставить("УникальныйИдентификатор");
	Результат.Вставить("УведомлятьПоПочте");
	Результат.Вставить("КонтактноеЛицо");
	Результат.Вставить("Организация");
	Результат.Вставить("Телефон");
	Результат.Вставить("ЭлектроннаяПочта");
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВыполнитьЗаданиеВФоне(Знач Задание, УникальныйИдентификатор)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = Задание.Наименование;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	Если Задание.ПараметрыПроцедуры.Свойство("Товары")
		И ТипЗнч(Задание.ПараметрыПроцедуры.Товары) = Тип("ДанныеФормыКоллекция") Тогда
		// Преобразование типа данные формы коллекции в таблицу значений.
		Задание.ПараметрыПроцедуры.Товары = Задание.ПараметрыПроцедуры.Товары.Выгрузить();
	ИначеЕсли Задание.ПараметрыПроцедуры.Свойство("Заказы")
		И ТипЗнч(Задание.ПараметрыПроцедуры.Заказы) = Тип("ДанныеФормыКоллекция") Тогда
		// Преобразование типа данные формы коллекции в таблицу значений.
		Задание.ПараметрыПроцедуры.Заказы = Задание.ПараметрыПроцедуры.Заказы.Выгрузить();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Если Задание.ПараметрыПроцедуры.Свойство("ДополнительныеПараметры")
		И Задание.ПараметрыПроцедуры.ДополнительныеПараметры.Свойство("Доставка")
		И ТипЗнч(Задание.ПараметрыПроцедуры.ДополнительныеПараметры.Доставка) = Тип("ДанныеФормыКоллекция") Тогда
			Задание.ПараметрыПроцедуры.ДополнительныеПараметры.Доставка =
				Задание.ПараметрыПроцедуры.ДополнительныеПараметры.Доставка.Выгрузить(,
					"ИдентификаторКонтрагента, Контрагент, СпособДоставки, АдресДоставки, АдресДоставкиЗначенияПолей");
	КонецЕсли;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(Задание.ИмяПроцедуры,
		Задание.ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ДлительнаяОперацияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Отказ          = Ложь;
	ТекстСообщения = "";
	
	Если Результат = Неопределено Тогда // Отменено пользователем.
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'Фоновое задание отменено пользователем'");
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.Свойство("Сообщения") И ЗначениеЗаполнено(Результат.Сообщения) Тогда
			Для каждого Сообщение Из Результат.Сообщения Цикл
				Сообщение.Сообщить();
			КонецЦикла;
		ИначеЕсли Результат.Статус = "Ошибка" Тогда
			Отказ = Истина;
			Результат.Свойство("ПодробноеПредставлениеОшибки", ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	ТекущаяСтраница   = ДополнительныеПараметры.ТекущаяСтраница;
	СледующаяСтраница = ДополнительныеПараметры.СледующаяСтраница;

	Если Не Отказ И Результат.Статус = "Выполнено" Тогда
		
		// Обработка результата выполнения.
		Если ТекущаяСтраница = Элементы.СтраницаПодготовкаЗаказов
			И СледующаяСтраница = Элементы.СтраницаОтправкиЗаказов Тогда // Создание заказов.
			
			Если ДополнительныеПараметры.Свойство("РегистрацияОрганизации") Тогда
				ТекстОповещения = НСтр("ru = 'Регистрация организации успешно выполнена.'");
				ПоказатьОповещениеПользователя(НСтр("ru = '1С:Бизнес-сеть'"),, ТекстОповещения,
					БиблиотекаКартинок.БизнесСеть);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Результат.АдресРезультата)
				И ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда
				ПрочитатьДанныеИзБезопасногоХранилища(Отказ);
			Иначе
				Отказ = Истина;
			КонецЕсли;
			
			Если Отказ Тогда
				ТекстСообщения = НСтр("ru = 'Не подготовлено ни одного документа.'");
				
				Если ЕстьОшибкиСозданияЗаказа Тогда
					ТекстСообщения = ТекстСообщения + Символы.ПС + НСтр("ru = 'Ошибка создания заказа торгового предложения. Подробности см. в журнале регистрации.'");
				КонецЕсли;
				
			ИначеЕсли ЗначениеЗаполнено(ЗапросКоммерческихПредложений) Тогда
				
				Для Каждого Заказ Из Заказы Цикл
					Оповестить("КоммерческиеПредложения_СформированЗаказПоставщику", Заказ.Ссылка, ЗапросКоммерческихПредложений);
				КонецЦикла;
			КонецЕсли;
			
		ИначеЕсли ТекущаяСтраница = Элементы.СтраницаОтправкиЗаказов
			И СледующаяСтраница = Элементы.СтраницаФинал Тогда // Отправка заказов/
			
			Если ЗначениеЗаполнено(Результат.АдресРезультата)
				И ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда
				
				МассивСтатусовОтправкиЗаказов = БизнесСетьВызовСервера.ПолучитьУдалитьИзВременногоХранилища(Результат.АдресРезультата);
				Если ТипЗнч(МассивСтатусовОтправкиЗаказов) = Тип("Массив") Тогда
					ВсеЗаказыОправлены = Истина;
					Для каждого СтатусовОтправкиЗаказа Из МассивСтатусовОтправкиЗаказов Цикл
						СтрокиТаблицыЗаказов = Заказы.НайтиСтроки(Новый Структура("Ссылка", СтатусовОтправкиЗаказа.Ссылка));
						Если СтрокиТаблицыЗаказов.Количество() Тогда
							НоваяСтрокаТаблицыЗаказов = СтрокиТаблицыЗаказов[0];
							ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицыЗаказов, СтатусовОтправкиЗаказа);
							Если НоваяСтрокаТаблицыЗаказов.Пометка Тогда
								ВсеЗаказыОправлены = Ложь;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					Если Не ВсеЗаказыОправлены Тогда
						Отказ = Истина;
					КонецЕсли;
				Иначе
					Отказ = Истина;
				КонецЕсли;
				
			Иначе
				Отказ = Истина;
			КонецЕсли;
			
			Если Отказ Тогда
				ТекстСообщения = НСтр("ru = 'Ошибка отправки документов.'");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Отказ Тогда
		
		Если ТекущаяСтраница = Элементы.СтраницаПодготовкаЗаказов
			И СледующаяСтраница = Элементы.СтраницаОтправкиЗаказов Тогда // Создание заказов.
			
			Элементы.ОписаниеОшибкиТекущейДлительнойОперации.Заголовок =
			НСтр("ru = 'При подготовке документов произошла ошибка'");
			
		ИначеЕсли ТекущаяСтраница = Элементы.СтраницаОтправкиЗаказов
			И СледующаяСтраница = Элементы.СтраницаПодготовкаЗаказов Тогда // Удаление заказов.
			
			Элементы.ОписаниеОшибкиТекущейДлительнойОперации.Заголовок =
			НСтр("ru = 'При удалении документов произошла ошибка'");
			
		ИначеЕсли ТекущаяСтраница = Элементы.СтраницаОтправкиЗаказов
			И СледующаяСтраница = Элементы.СтраницаФинал Тогда // Отправка заказов.
			
			Элементы.ОписаниеОшибкиТекущейДлительнойОперации.Заголовок =
			НСтр("ru = 'При отправке документов произошла ошибка'");
			
		КонецЕсли;
		
		ТекущийШаг   = ТекущаяСтраница.Имя;
		СледующийШаг = СледующаяСтраница.Имя;
		
		Элементы.СтраницыДлительнойОперации.ТекущаяСтраница = Элементы.СтраницаОшибка;
		СменитьСтраницуКомандНавигации(Элементы.НазадОтмена);
		
		Если Не ПустаяСтрока(ТекстСообщения) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 %2'"), ОбщегоНазначенияКлиент.ДатаСеанса(), ТекстСообщения));
		КонецЕсли;
		
	Иначе
		
		СтраницаКомандНавигации = Неопределено;
		
		Если ТекущаяСтраница = Элементы.СтраницаПодготовкаЗаказов
			И СледующаяСтраница = Элементы.СтраницаОтправкиЗаказов Тогда // Создание заказов.
		ИначеЕсли ТекущаяСтраница = Элементы.СтраницаОтправкиЗаказов
			И СледующаяСтраница = Элементы.СтраницаПодготовкаЗаказов Тогда // Удаление заказов.
			
			ХронологияПереключенияСтраниц.Удалить(ХронологияПереключенияСтраниц.ВГраница());
			
		ИначеЕсли ТекущаяСтраница = Элементы.СтраницаОтправкиЗаказов
			И СледующаяСтраница = Элементы.СтраницаФинал Тогда // Отправка заказов.
			
			СтраницаКомандНавигации = Элементы.Готово;
			
		КонецЕсли;
		
		СменитьСтраницуШаги(СледующаяСтраница);
		СменитьСтраницуКомандНавигации(СтраницаКомандНавигации);
		
	КонецЕсли;
	
	ИдентификаторЗадания = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыЗаказов(Инициализация = Ложь)
	
	ТаблицаЗаказов = РеквизитФормыВЗначение("Заказы");
	ТорговыеПредложенияПереопределяемый.ЗаполнитьРеквизитыЗаказов(ТаблицаЗаказов);
	Если Инициализация Тогда
		Для Каждого СтрокаЗаказа Из ТаблицаЗаказов Цикл
			Если СтрокаЗаказа.ЗаказСоздан Тогда
				СтрокаЗаказа.Статус  = НСтр("ru = 'Готов к отправке'");
				СтрокаЗаказа.Пометка = Истина;
			Иначе
				СтрокаЗаказа.Статус  = НСтр("ru = 'Ошибка создания'");
				СтрокаЗаказа.Пометка = Ложь;
				СтрокаЗаказа.ЗначениеКартинки = 3;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ЗначениеВРеквизитФормы(ТаблицаЗаказов, "Заказы");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьАктивныеФоновыеОперации()
	
	Если ИдентификаторЗадания <> Неопределено Тогда
		ИнтеграцияБСПБЭДВызовСервера.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
		ИдентификаторЗадания = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ВыполняетсяЗакрытие = Истина;
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ЗаполнитьПоПараметрам(Отказ)
	
	// Общие параметры.
	Параметры.Свойство("ИдентификаторЗаказа", ИдентификаторЗаказа);
	Если Не ЗначениеЗаполнено(ИдентификаторЗаказа) Тогда
		ИдентификаторЗаказа = УникальныйИдентификатор;
	КонецЕсли;
	
	Если Параметры.Свойство("КонтекстИсточника", КонтекстИсточника) Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, КонтекстИсточника);
	КонецЕсли;
	
	Если Параметры.Свойство("Организация") И ЗначениеЗаполнено(Параметры.Организация) Тогда
		Организация = Параметры.Организация;
	ИначеЕсли Параметры.Свойство("ЗначенияЗаполнения") И Параметры.ЗначенияЗаполнения.Свойство("Организация")
		И ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения.Организация) Тогда
		Организация = Параметры.ЗначенияЗаполнения.Организация;
	КонецЕсли;
	
	ИспользоватьНесколькоОрганизаций = ОбщегоНазначенияБЭД.ИспользуетсяНесколькоОрганизаций();
	Если Не ИспользоватьНесколькоОрганизаций И Не ЗначениеЗаполнено(Организация) Тогда
		Организация = ОбщегоНазначенияБЭД.ОрганизацияПоУмолчанию();
	КонецЕсли;
	
	ПоказатьСкрытьКомандуРегистрацииОрганизации(Элементы, Организация, ЗарегистрироватьОрганизацию);
	
	Параметры.Свойство("Валюта", Валюта);
	ЗаголовокСумма = СтрШаблон("Сумма %1",
		?(Валюта.Пустая(), "", "("+ Валюта +")"));
	Элементы.КонтрагентыСуммаСНДС.Заголовок = ЗаголовокСумма;
	
	АдресТаблицыТоваров = "";
	
	// Заполнение товаров.
	Если Параметры.Свойство("АдресТаблицыТоваров", АдресТаблицыТоваров) И НЕ ПустаяСтрока(АдресТаблицыТоваров) Тогда
		
		ТаблицаТоваров = БизнесСетьВызовСервера.ПолучитьУдалитьИзВременногоХранилища(АдресТаблицыТоваров);
		
		Если ТаблицаТоваров = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Для каждого СтрокаТаблицыТоваров Из ТаблицаТоваров Цикл
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Номенклатура",     СтрокаТаблицыТоваров.Номенклатура);
			ДополнительныеПараметры.Вставить("Характеристика",   СтрокаТаблицыТоваров.Характеристика);
			ДополнительныеПараметры.Вставить("ЕдиницаИзмерения", СтрокаТаблицыТоваров.ЕдиницаИзмерения);
			
			ИзменитьКоличествоВЗаказе(СтрокаТаблицыТоваров.Идентификатор, СтрокаТаблицыТоваров.Количество,,
				ДополнительныеПараметры, Отказ);
			
			Если Отказ Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		ПересчитатьИтоги(ЭтотОбъект);
		
	ИначеЕсли Параметры.Свойство("ТаблицаТоваров") Тогда
		
		Параметры.Свойство("ЗапросКоммерческихПредложений", ЗапросКоммерческихПредложений);
		
		Товары.Очистить();
		Для каждого СоставПозиции Из Параметры.ТаблицаТоваров Цикл
			
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СоставПозиции);
			
			Если Не ЗначениеЗаполнено(НоваяСтрока.Контрагент) Тогда
				КонтрагентыТоваров = Контрагенты.НайтиСтроки(Новый Структура("ИдентификаторКонтрагента", НоваяСтрока.ИдентификаторКонтрагента));
				Если КонтрагентыТоваров.Количество() = 0 Тогда
					НоваяСтрока.Контрагент = ОбщегоНазначенияБЭД.НайтиСсылку("Контрагенты",,
						Новый Структура("ИНН, КПП", НоваяСтрока.ИННКонтрагента, НоваяСтрока.КППКонтрагента));
				Иначе
					НоваяСтрока.Контрагент = КонтрагентыТоваров[0].Контрагент;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
				ЗаполнитьСтрокиПоНоменклатуреКонтрагента(НоваяСтрока);
			КонецЕсли;
			
			ТорговыеПредложенияПереопределяемый.ПересчитатьСуммуПоСтроке(НоваяСтрока);
				
			НоваяСтрока.НеСоздаватьАвтоматически = Истина;
			Если ЕстьРаботаСНоменклатурой Тогда
				Если ДоступенПакетныйРежимСозданияНоменклатуры Тогда
					НоваяСтрока.НеСоздаватьАвтоматически = Ложь;
				КонецЕсли;
				
				НоваяСтрока.ВидНоменклатуры = ПолучитьВидНоменклатурыИзКатегории(НоваяСтрока.ИдентификаторКатегории);
				ДополнитьУсловноеОформление(НоваяСтрока.Идентификатор, НоваяСтрока.НаименованиеНоменклатуры);
			
			КонецЕсли;
		
		КонецЦикла;
		ПересчитатьИтоги(ЭтотОбъект);
		
	КонецЕсли;
	
	Если ЕстьРаботаСНоменклатурой Тогда
		ЗаполнитьНоменклатуруПоИдентификаторамСервиса();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНоменклатуруПоИдентификаторамСервиса(ИдентификаторСтроки = Неопределено)
	
	Если ЗначениеЗаполнено(ИдентификаторСтроки) Тогда
		СтрокиДанных = Товары.НайтиПоИдентификатору(ИдентификаторСтроки)
	Иначе
		СтрокиДанных = Товары;
	КонецЕсли;
	
	МассивИдентификаторов = Новый Массив;

	Для каждого ЭлементКоллекции Из СтрокиДанных Цикл
		
		Если ЗначениеЗаполнено(ЭлементКоллекции.ИдентификаторНоменклатурыСервиса) И Не ЗначениеЗаполнено(ЭлементКоллекции.Номенклатура) Тогда
			МассивИдентификаторов.Добавить(Новый Структура("ИдентификаторНоменклатуры, ИдентификаторХарактеристики",
				ЭлементКоллекции.ИдентификаторНоменклатурыСервиса, ЭлементКоллекции.ИдентификаторХарактеристикиСервиса));
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(МассивИдентификаторов) Тогда
		Возврат;
	КонецЕсли;
	
	МодульРаботаСНоменклатурой = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатурой");
	НоменклатураСсылки = МодульРаботаСНоменклатурой.НоменклатураИХарактеристикиПоИдентификаторам(МассивИдентификаторов);
	
	Для каждого ЭлементКоллекции Из СтрокиДанных Цикл
		
		СтрокиДанных = НоменклатураСсылки.НайтиСтроки(Новый Структура("ИдентификаторНоменклатуры, ИдентификаторХарактеристики",
				ЭлементКоллекции.ИдентификаторНоменклатурыСервиса, ЭлементКоллекции.ИдентификаторХарактеристикиСервиса));
				
		Если СтрокиДанных.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДанных = СтрокиДанных[0];
		
		ЗаполнитьЗначенияСвойств(ЭлементКоллекции, СтрокаДанных, "Номенклатура, Характеристика");
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ДобавитьИЗаполнитьСтрокуТоваров(Идентификатор, Количество, ЭтоРазница)
	
	ИзменитьКоличествоВЗаказе(Идентификатор, Количество, ЭтоРазница);
	
	Если ЕстьРаботаСНоменклатурой Тогда
		ЗаполнитьНоменклатуруПоИдентификаторамСервиса();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьИЗаполнитьСтрокиТоваров(Идентификаторы)

	Для каждого ПредложениеИдентификатор Из Идентификаторы Цикл
		ИзменитьКоличествоВЗаказе(ПредложениеИдентификатор, 0);
	КонецЦикла;
	
	Если ЕстьРаботаСНоменклатурой Тогда
		ЗаполнитьНоменклатуруПоИдентификаторамСервиса();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементовФормы()
	
	Элементы.КомандыНавигации.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	// Видимость Организации зависимости от функциональных опций
	Элементы.Организация.Видимость = ИспользоватьНесколькоОрганизаций;
	
	// Если нет ни одной строки с заполненной суммой скидки - группу скрываем
	Элементы.ТоварыГруппаСкидки.Видимость = Товары.Итог("СуммаСкидки");
	
	// Если отсутствуют права на отправку документов, то последний шаг делаем недоступным
	ПравоВыполненияОбменаДокументами = БизнесСеть.ПравоВыполненияОбменаДокументами();
	
	Элементы.ДалееТретья.Доступность = ПравоВыполненияОбменаДокументами;
	Элементы.ДекорацияПредупреждениеПраваДоступаПервая.Видимость = Не ПравоВыполненияОбменаДокументами;
	Элементы.ДекорацияПредупреждениеПраваДоступаВторая.Видимость = Не ПравоВыполненияОбменаДокументами;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Условное оформление для характеристик номенклатуры.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыХарактеристика.Имя);
	
	ОтборГруппа = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.Характеристика");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.ИспользованиеХарактеристик");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыХарактеристика.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.ИспользованиеХарактеристик");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Условное оформление для единиц измерения номенклатуры.
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПредставлениеЕдиницыИзмерения.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЕдиницаИзмерения.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЕдиницаИзмерения.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.Упаковка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатура.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЭДЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ПодчеркнутыйШрифтДиалоговБЭД);
	
	Текст = НСтр("ru = '<Выберите или создайте номенклатуру>'");
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст"                 , Текст);
	
	// Оформление заказов с ошибкой.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Заказы.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Заказы.ЗаказСоздан");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаПоясненияОшибкиБИП);
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаказыСтатус.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Заказы.ЗаказСоздан");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветИнформацияОшибочна);
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаказыСсылкаТекст.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Заказы.ЗаказСоздан");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЭДЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт"     , ШрифтыСтиля.ПодчеркнутыйШрифтДиалоговБЭД);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст"     , НСтр("ru = '<не создан>'"));
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаказыСсылкаТекст.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Заказы.ЗаказСоздан");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость"            , Ложь);
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаказыСсылка.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Заказы.ЗаказСоздан");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость"            , Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДанныеИзБезопасногоХранилища(Отказ)
	
	Пользователь = Пользователи.АвторизованныйПользователь();
	
	УстановитьПривилегированныйРежим(Истина);
	МассивЗаказов = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Пользователь, "ФормированиеЗаказов");
	ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(Пользователь, "ФормированиеЗаказов");
	УстановитьПривилегированныйРежим(Ложь);
		
	Если ТипЗнч(МассивЗаказов) = Тип("Массив") Тогда
		
		ЕстьСозданныеЗаказы = Ложь;
		Заказы.Очистить();
		
		Для каждого ЗначениеМассива Из МассивЗаказов Цикл
			Если ЗначениеМассива.ЗаказСоздан Тогда
				НоваяСтрокаЗаказа = Заказы.Добавить();
				НоваяСтрокаЗаказа.Ссылка      = ЗначениеМассива.Ссылка;
				НоваяСтрокаЗаказа.ЗаказСоздан = Истина;
				НоваяСтрокаЗаказа.ИдентификаторыПредложений.ЗагрузитьЗначения(ЗначениеМассива.ИдентификаторыПредложений);
				ЕстьСозданныеЗаказы           = Истина;
			Иначе
				ЕстьОшибкиСозданияЗаказа = Истина;
				НоваяСтрокаЗаказа = Заказы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаЗаказа, ЗначениеМассива);
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(Заказы) Тогда
			СозданныеЗаказы.Загрузить(Заказы.Выгрузить());
			ЗаполнитьРеквизитыЗаказов(Истина);
		КонецЕсли;
		
		Если НЕ ЕстьСозданныеЗаказы Тогда
			Отказ = Истина;
		КонецЕсли;
		
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьУдалениеЗаказовНаСервере()
	
	ЗаказыУдалены = Ложь;
	Отказ = Ложь;
	
	ТаблицаДокументы = СозданныеЗаказы;
	
	Если ТаблицаДокументы.Количество() > 0 Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		ТорговыеПредложенияПереопределяемый.УдалитьДокументыЗаказПоставщику(ТаблицаДокументы, Отказ);
		УстановитьПривилегированныйРежим(Ложь);
		
		Если ТаблицаДокументы.Количество() = 0 И Не Отказ Тогда
			ЗаказыУдалены = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Ответ = Новый Структура();
	Ответ.Вставить("Статус"         ,"Выполнено");
	Ответ.Вставить("АдресРезультата", ПоместитьВоВременноеХранилище(ЗаказыУдалены));
	
	Возврат Ответ;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПараметрыОткрытияФормыНоменклатуры(Знач Типы, Знач ДанныеЗаполнения)
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяФормыСоздания", ПолучитьФормуЭлемента(Типы));
	
	МодульРаботаСНоменклатуройСлужебный = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатуройСлужебный");
	ТаблицаНоменклатуры = МодульРаботаСНоменклатуройСлужебный.ОписаниеТаблицыНоменклатуры();
	ТаблицаНоменклатуры.Колонки.Добавить("Производитель");
	ТаблицаНоменклатуры.Колонки.Добавить("Бренд");
	ТаблицаНоменклатуры.Колонки.Добавить("Категория");
	ТаблицаНоменклатуры.Колонки.Добавить("ВидНоменклатурыПоУмолчанию");
	
	НоваяСтрока = ТаблицаНоменклатуры.Добавить();
	
	// Заполнение единицы измерения
	НоваяСтрока.ЕдиницаИзмерения.Вставить("ОКЕИ"                , ДанныеЗаполнения.КодЕдиницыИзмерения);
	НоваяСтрока.ЕдиницаИзмерения.Вставить("Наименование"        , ДанныеЗаполнения.ПредставлениеЕдиницыИзмерения);
	НоваяСтрока.ЕдиницаИзмерения.Вставить("ЧислительКратности"  , ДанныеЗаполнения.ЧислительУпаковки);
	НоваяСтрока.ЕдиницаИзмерения.Вставить("ЗнаменательКратности", ДанныеЗаполнения.ЗнаменательУпаковки);
	
	// Заполнение ставки НДС
	МодульОбменСКонтрагентамиПовтИсп = ОбщегоНазначения.ОбщийМодуль("ОбменСКонтрагентамиИнтеграция");
	НоваяСтрока.СтавкаНДС = МодульОбменСКонтрагентамиПовтИсп.СтавкаНДСИзСоответствия(, ДанныеЗаполнения.СтавкаНДС);
	
	// Заполнение остальных полей
	НоваяСтрока.Наименование               = ДанныеЗаполнения.Наименование;
	НоваяСтрока.Идентификатор              = ДанныеЗаполнения.Идентификатор;
	НоваяСтрока.Артикул                    = ДанныеЗаполнения.Артикул;
	НоваяСтрока.ВидНоменклатурыПоУмолчанию = Новый Структура("ВидНоменклатуры", ДанныеЗаполнения.ВидНоменклатуры);
	
	АдресРезультата = ПоместитьВоВременноеХранилище(ТаблицаНоменклатуры);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РаботаСНоменклатурой_АдресДанныхЗаполнения", АдресРезультата);
	ПараметрыОткрытия.Вставить("РежимВыбора"                               , Истина);
	
	Результат.Вставить("ПараметрыОткрытия", ПараметрыОткрытия);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьФормуЭлемента(Знач Типы)
	
	Если Типы.Количество() <> 1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТипМетаданных = Метаданные.НайтиПоТипу(Типы[0]);
	
	Если Метаданные.Справочники.Содержит(ТипМетаданных) Тогда
		Возврат "Справочник." + ТипМетаданных.Имя + ".ФормаОбъекта";
	ИначеЕсли Метаданные.Документы.Содержит(ТипМетаданных) Тогда
		Возврат "Документ." + ТипМетаданных.Имя + ".ФормаОбъекта";
	КонецЕсли;

КонецФункции

&НаСервере
Функция ПолучитьВидНоменклатурыИзКатегории(Знач ИдентификаторКатегорий)
	
	Идентификаторы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторКатегорий);
	МодульРаботаСНоменклатуройСлужебный = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатуройСлужебный");
	ВидыНоменклатуры = МодульРаботаСНоменклатуройСлужебный.ВидыНоменклатурыПоИдентификаторам(Идентификаторы);
	
	Результат = Неопределено;
	Если ВидыНоменклатуры.Количество() > 0 Тогда
		Результат = ВидыНоменклатуры[0];
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ДополнитьУсловноеОформление(Идентификатор, НаименованиеНоменклатуры)
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатура.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.Идентификатор");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Идентификатор;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.НеСоздаватьАвтоматически");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Если ИспользоватьВидыНоменклатуры Тогда
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.ВидНоменклатуры");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	КонецЕсли;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЭДЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт"     , ШрифтыСтиля.ПодчеркнутыйШрифтДиалоговБЭД);
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного" , Ложь);
	
	Текст = СтрШаблон(НСтр("ru = '<будет создано автоматически> %1'"), НаименованиеНоменклатуры);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст"                 , Текст);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьНовыеНоменклатуры()
	
	МодульРаботаСНоменклатурой = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатурой");
	Настройки = МодульРаботаСНоменклатурой.НастройкиПодсистемы();
	Если Не Настройки.ИспользоватьПакетноеСозданиеНоменклатуры Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("Пометка", Истина);
	НайденныеСтроки = Товары.НайтиСтроки(Отбор);
	
	МодульРаботаСНоменклатуройСлужебный = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатуройСлужебный");
	ТаблицаНоменклатуры = МодульРаботаСНоменклатуройСлужебный.ОписаниеТаблицыНоменклатуры();
	ТаблицаНоменклатуры.Колонки.Добавить("Производитель");
	ТаблицаНоменклатуры.Колонки.Добавить("Бренд");
	ТаблицаНоменклатуры.Колонки.Добавить("Категория");
	ТаблицаНоменклатуры.Колонки.Добавить("ВидНоменклатурыПоУмолчанию");
	
	Для Каждого СтрокаТовар Из НайденныеСтроки Цикл
		
		Если ЗначениеЗаполнено(СтрокаТовар.Номенклатура)
				Или (Не ЗначениеЗаполнено(СтрокаТовар.ВидНоменклатуры) И ИспользоватьВидыНоменклатуры) Тогда
				
				Продолжить;
				
		КонецЕсли;
			
		НоваяСтрока = ТаблицаНоменклатуры.Добавить();
		
		// Заполнение единицы измерения
		НоваяСтрока.ЕдиницаИзмерения.Вставить("ОКЕИ"                , СтрокаТовар.КодЕдиницыИзмерения);
		НоваяСтрока.ЕдиницаИзмерения.Вставить("Наименование"        , СтрокаТовар.ПредставлениеЕдиницыИзмерения);
		НоваяСтрока.ЕдиницаИзмерения.Вставить("ЧислительКратности"  , СтрокаТовар.ЧислительУпаковки);
		НоваяСтрока.ЕдиницаИзмерения.Вставить("ЗнаменательКратности", СтрокаТовар.ЗнаменательУпаковки);
		
		// Заполнение ставки НДС
		МодульОбменСКонтрагентамиПовтИсп = ОбщегоНазначения.ОбщийМодуль("ОбменСКонтрагентамиИнтеграция");
		НоваяСтрока.СтавкаНДС = МодульОбменСКонтрагентамиПовтИсп.СтавкаНДСИзСоответствия(, СтрокаТовар.СтавкаНДС);
		
		// Заполнение остальных полей
		Результат = Неопределено;
		МодульРаботаСНоменклатуройПереопределяемый = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатуройПереопределяемый");
		МодульРаботаСНоменклатуройПереопределяемый.ПолучитьВариантИспользованияХарактеристик(СтрокаТовар.ВидНоменклатуры, Результат);
		
		Если ЗначениеЗаполнено(Результат) И Результат <> "НеВедутся"
				И ЗначениеЗаполнено(СтрокаТовар.ПредставлениеХарактеристикиСервиса) Тогда
			НоваяСтрока.Наименование           = СтрокаТовар.ПредставлениеНоменклатурыСервиса;
		Иначе
			НоваяСтрока.Наименование           = СтрокаТовар.НаименованиеНоменклатуры;
		КонецЕсли;
		
		НоваяСтрока.Идентификатор              = СтрокаТовар.ИдентификаторНоменклатурыСервиса;
		НоваяСтрока.Артикул                    = СтрокаТовар.Артикул;
		НоваяСтрока.ВидНоменклатурыПоУмолчанию = Новый Структура("ВидНоменклатуры", СтрокаТовар.ВидНоменклатуры);
		
		СсылкаНаОбъект = Неопределено;
		МодульРаботаСНоменклатуройПереопределяемый.СоздатьНоменклатуру(НоваяСтрока, СсылкаНаОбъект);
		
		Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
			Реквизиты = РеквизитыНоменклатуры(СсылкаНаОбъект);
			
			СтрокаТовар.Номенклатура               = СсылкаНаОбъект;
			СтрокаТовар.ИспользованиеХарактеристик = Реквизиты.ИспользованиеХарактеристик;
			СтрокаТовар.ЕдиницаИзмерения           = Реквизиты.ЕдиницаИзмерения;
			
		Иначе
			
			СтрокаТовар.НеСоздаватьАвтоматически = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьНовыеХарактеристики()
	
	МодульРаботаСНоменклатурой = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатурой");
	Настройки = МодульРаботаСНоменклатурой.НастройкиПодсистемы();
	Если Не Настройки.ИспользоватьПакетноеСозданиеНоменклатуры Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("Пометка", Истина);
	НайденныеСтроки = Товары.НайтиСтроки(Отбор);
	
	Для Каждого СтрокаТовар Из НайденныеСтроки Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТовар.Номенклатура)
				Или ЗначениеЗаполнено(СтрокаТовар.Характеристика)
				Или Не ЗначениеЗаполнено(СтрокаТовар.ПредставлениеХарактеристикиСервиса) Тогда
			Продолжить;
		КонецЕсли;
		
		ВидНоменклатуры            = Неопределено;
		ИспользоватьХарактеристики = Неопределено;
		МодульРаботаСНоменклатуройПереопределяемый = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатуройПереопределяемый");
		МодульРаботаСНоменклатуройПереопределяемый.ПолучитьВидНоменклатуры(СтрокаТовар.Номенклатура, ВидНоменклатуры);
		МодульРаботаСНоменклатуройПереопределяемый.ПолучитьВариантИспользованияХарактеристик(ВидНоменклатуры, ИспользоватьХарактеристики);
		
		Если ИспользоватьХарактеристики = "НеВедутся" Тогда
			Продолжить;
		КонецЕсли;
		
		ХарактеристикаСсылка = Неопределено;
		
		МодульРаботаСНоменклатуройСлужебный = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатуройСлужебный");
		ДанныеЗаполнения = МодульРаботаСНоменклатуройСлужебный.ОписаниеТаблицыНоменклатуры();
		ДанныеЗаполнения.Колонки.Добавить("Производитель");
		ДанныеЗаполнения.Колонки.Добавить("Бренд");
		ДанныеЗаполнения.Колонки.Добавить("Категория");
		ДанныеЗаполнения.Колонки.Добавить("ВидНоменклатурыПоУмолчанию");
		
		НоваяСтрока = ДанныеЗаполнения.Добавить();
		НоваяСтрока.Наименование = СтрокаТовар.ПредставлениеХарактеристикиСервиса;
		
		Если ИспользоватьХарактеристики = "Общие" Тогда
			МодульРаботаСНоменклатуройПереопределяемый.СоздатьХарактеристику(НоваяСтрока, ВидНоменклатуры, ХарактеристикаСсылка);
		Иначе
			МодульРаботаСНоменклатуройПереопределяемый.СоздатьХарактеристику(НоваяСтрока, СтрокаТовар.Номенклатура, ХарактеристикаСсылка);
		КонецЕсли;
		
		СтрокаТовар.Характеристика = ХарактеристикаСсылка;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВидНоменклатуры(Знач Номенклатура)
	
	ВидНоменклатуры = Неопределено;
	МодульРаботаСНоменклатуройПереопределяемый = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатуройПереопределяемый");
	МодульРаботаСНоменклатуройПереопределяемый.ПолучитьВидНоменклатуры(Номенклатура, ВидНоменклатуры);
	
	Возврат ВидНоменклатуры;
	
КонецФункции

&НаКлиенте
Процедура ПроверкаСпискаТоваров(Отказ, ПроверкаЕстьРаботаСНоменклатурой = Ложь)

	// Проверка товаров.
		Для ТекИндекс = 0 По Товары.Количество()-1 Цикл
			
			ТекущаяСтрока = Товары[ТекИндекс];
			
			Если ТекущаяСтрока.Пометка
				И Не ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура)
				И (НЕ ПроверкаЕстьРаботаСНоменклатурой
				   Или (Не ЗначениеЗаполнено(ТекущаяСтрока.ВидНоменклатуры) И ИспользоватьВидыНоменклатуры)) Тогда
				
				Если ПроверкаЕстьРаботаСНоменклатурой Тогда
					ТекстШаблонаОшибки = НСтр("ru = 'В строке %1 не удалось создать номенклатуру автоматически, создайте или выберите вручную.'");
					ТекстОшибки = СтрШаблон(ТекстШаблонаОшибки, ТекИндекс + 1);
				Иначе
					ТекстШаблонаОшибки = НСтр("ru='Не заполнено поле %1 в строке %2.'");
					ТекстОшибки = СтрШаблон(ТекстШаблонаОшибки,	Элементы.ТоварыНоменклатура.Заголовок, ТекИндекс + 1);
				КонецЕсли;
				
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ТекИндекс + 1, "Номенклатура"),, Отказ)
			КонецЕсли;
			
			Если ТекущаяСтрока.Пометка
				И Не ЗначениеЗаполнено(ТекущаяСтрока.Характеристика)
				И ТекущаяСтрока.ИспользованиеХарактеристик = Истина Тогда
				
				Если ЕстьРаботаСНоменклатурой Тогда
					ТекстШаблонаОшибки = НСтр("ru = 'В строке %1 не удалось создать характеристику автоматически, создайте или выберите вручную.'");
					ТекстОшибки = СтрШаблон(ТекстШаблонаОшибки, ТекИндекс + 1);
				Иначе
					ТекстШаблонаОшибки = НСтр("ru='Не заполнено поле %1 в строке %2.'");
					ТекстОшибки = СтрШаблон(ТекстШаблонаОшибки,	Элементы.ТоварыХарактеристика.Заголовок, ТекИндекс + 1);
				КонецЕсли;
				
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ТекИндекс + 1, "Характеристика"),, Отказ)
			КонецЕсли;
			
		КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьИспользованиеХарактеристик()
	
	ТорговыеПредложенияСлужебный.ЗаполнитьСведенияОНоменклатуре(Товары, "Упаковка, ЕдиницаИзмерения");
	
	Для каждого СтрокаТовара Из Товары Цикл
		Если НЕ СтрокаТовара.ИспользованиеХарактеристик Тогда
			СтрокаТовара.Характеристика = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
