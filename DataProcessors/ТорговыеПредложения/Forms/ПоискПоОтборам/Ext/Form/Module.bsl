
#Область ОписаниеПеременных

&НаКлиенте
Перем СледующееИзображение; // Булево

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ТорговыеПредложения.ПравоПоискаТорговыхПредложений(Истина) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	БизнесСеть.УсловноеОформлениеГиперссылкиПоказатьЕще(УсловноеОформление, Элементы.Список,
		Элементы.СписокГиперссылкаПоказатьЕще);
	
	АвтоНавигационнаяСсылка = Ложь;
	НавигационнаяСсылка = "e1cib/app/" + ИмяФормы;
	
	ЗаполнитьФиксированныеОтборыДерева();
	
	ОбработатьПараметрыФормы();
	
	СохраненнаяВалюта = Неопределено;
	РежимСортировки = "СортировкаРелевантность";
	
	КлючНастроекФормы = "Обработка.ТорговыеПредложения.Форма.ПоискПоОтборам/ТекущиеДанные";
	Настройки = ХранилищеСистемныхНастроек.Загрузить(КлючНастроекФормы);
	Если ТипЗнч(Настройки) = Тип("Соответствие") Тогда
		СохраненнаяВалюта     = Настройки.Получить("Валюта");
		РежимСортировки       = Настройки.Получить("РежимСортировки");
		ОтображатьЦеныБезНДС  = Настройки.Получить("ОтображатьЦеныБезНДС");
		ПоказатьИзображения   = Настройки.Получить("ПоказатьИзображения");
	КонецЕсли;
	Элементы.ОтображатьЦеныБезНДС.Пометка = ОтображатьЦеныБезНДС;
	
	УстановитьПоказИзображений(ЭтотОбъект);
	
	// Инициализация валюты по сохраненному значению.
	Если НЕ ЗначениеЗаполнено(Валюта) Тогда
		Валюта = СохраненнаяВалюта;
	ИначеЕсли Валюта <> СохраненнаяВалюта И ТипЗнч(Настройки) = Тип("Соответствие") Тогда
		Настройки.Вставить("Валюта", Валюта);
		ХранилищеСистемныхНастроек.Сохранить(КлючНастроекФормы,, Настройки);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Валюта) Тогда
		ТорговыеПредложенияПереопределяемый.ПолучитьВалютуРегламентированногоУчета(Валюта);
	КонецЕсли;
	Элементы.ИзменитьВалютуПоиска.Заголовок = СтрШаблон(НСтр("ru = 'Валюта: %1'"), Валюта);
	
	УстановитьРежимСортировки(Элементы, РежимСортировки, Валюта, ОтображатьЦеныБезНДС);
	
	Страницы = ТорговыеПредложенияСлужебный.НовыеПараметрыСтраницСервиса(100);
	
	ЗаполнитьОрганизации();
	
	БизнесСеть.ЗаполнитьРегионыПоиска(
		"ТорговыеПредложения",
		ОтборОрганизация, 
		РегионПоиска, 
		РегионЗаголовок, 
		ИдентификаторыРегионов);
	
	ЦветаСтиляПоясняющийТекст = ЦветаСтиля.ПоясняющийТекст;
	ЦветаСтиляЦветТекстаФормы = ЦветаСтиля.ЦветТекстаФормы;
	
	АдресКорзины = ТорговыеПредложенияСлужебный.АдресКорзиныИзЛокальногоХранилища();
	
	ПолучитьДеревоКатегорий = Истина;
	ПараметрыЗапроса = НовыйПараметрыЗапросаПоискаНайтиТорговыеПредложения();
	ПараметрыЗапроса.ПолучитьДеревоКатегорий = ПолучитьДеревоКатегорий;
	ПараметрыЗапроса.ПолучитьДанныеКорзины = ЗначениеЗаполнено(АдресКорзины);
	ПараметрыЗапроса.Наименование = ОтборНаименование;
	НайтиТорговыеПредложенияВФоне(ПараметрыЗапроса, Ложь);
	
	ЕстьПравоСозданияЗаказовПоставщику = ТорговыеПредложения.ПравоСозданияЗаказовПоставщику();
	УстановитьВидимостьДоступность(ЭтотОбъект, ПолучитьДеревоКатегорий);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьБыстрыеОтборы();
	
	ОбновитьКоличествоТоваровЭлементаКорзины();
	
	Если ЗначениеЗаполнено(ФоновоеЗаданиеПоиска) Тогда
		ОжидатьЗавершениеПоиска();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ТорговыеПредложения_ИзменитьКоличествоВЗаказе"
		И Параметр.ИдентификаторЗаказа = ИдентификаторЗаказа
		И Источник <> ЭтотОбъект Тогда
		
		ДобавитьПредложениеВКорзинуПослеОповещения(Параметр);
		
	ИначеЕсли ИмяСобытия = "ТорговыеПредложения_УдалитьИзЗаказа"
		И Параметр.ИдентификаторЗаказа = ИдентификаторЗаказа Тогда
		
		Для Каждого Идентификатор Из Параметр.ИдентификаторыПредложений Цикл
			
			СтрокаТовары = Товары.НайтиСтроки(Новый Структура("Идентификатор", Идентификатор));
			Если СтрокаТовары.Количество() Тогда
				Товары.Удалить(Товары.Индекс(СтрокаТовары[0]));
			КонецЕсли;
			
			СтрокаСписка = Список.НайтиСтроки(Новый Структура("Идентификатор", Идентификатор));
			Если СтрокаСписка.Количество() Тогда
				СтрокаСписка[0].ГиперссылкаДобавить = 0;
			КонецЕсли;
			
		КонецЦикла;
		ОбновитьКоличествоТоваровЭлементаКорзины();
		
	ИначеЕсли ИмяСобытия = "ТорговыеПредложения_ПоискПоОтборам_Обновить" Тогда
		
		ПолучитьДеревоКатегорий = Истина;
		
		ПараметрыИзменены = Ложь;
		Если Параметр.Свойство("ИдентификаторКатегории") Тогда
			Если ТекущаяКатегория <> Параметр.ИдентификаторКатегории Тогда
				ПараметрыИзменены = Истина;
				ИдентификаторКатегории = Параметр.ИдентификаторКатегории;
				
				ИдентификаторСтроки = ИдентификаторСтрокиПоИдентификаторуКатегории(
					Категории.ПолучитьЭлементы(), ИдентификаторКатегории);
				
				Если ИдентификаторСтроки <> 0 Тогда
					Элементы.Категории.ТекущаяСтрока = ИдентификаторСтроки;
				Иначе
					ЗагрузитьКатегорииСервиса(ИдентификаторКатегории);
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			ИдентификаторКатегории = Неопределено;
			Если ЗначениеЗаполнено(ТекущаяКатегория) Тогда
				ПараметрыИзменены = Истина;
			КонецЕсли;
		КонецЕсли;
		
		// Наименование
		Если Не ПустаяСтрока(ОтборНаименование) И Не Параметр.Свойство("ОтборНаименование") Тогда
			ОтборНаименование = "";
			СтрокаПоиска = ОтборНаименование;
			ПараметрыИзменены = Истина;
		КонецЕсли;
		
		Если Параметр.Свойство("ОтборНаименование")
			И Параметр.ОтборНаименование <> СтрокаПоиска Тогда
			ПараметрыИзменены = Истина;
			ОтборНаименование = Параметр.ОтборНаименование;
			СтрокаПоиска = ОтборНаименование;
			ПолучитьДеревоКатегорий = Ложь;
		КонецЕсли;
		
		// Артикул
		Если ОтборАртикулы.Количество() > 0 И Не Параметр.Свойство("ОтборАртикул") Тогда
			ОтборАртикулы.Очистить();
			ПараметрыИзменены = Истина;
		КонецЕсли;
		
		Если (Параметр.Свойство("ОтборАртикул") И Параметр.ОтборАртикул <> СтрокаПоиска) Тогда
			ТекущийОтборАртикул = ОтборАртикулы.НайтиПоЗначению(Параметр.ОтборАртикул);
			Если ТекущийОтборАртикул = Неопределено Тогда
				ОтборАртикулы.Добавить(Параметр.ОтборАртикул);
				ПараметрыИзменены = Истина;
				ПолучитьДеревоКатегорий = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// Штрихкоды
		Если ОтборШтрихКоды.Количество() > 0 И Не Параметр.Свойство("ОтборШтрихКоды") Тогда
			ОтборШтрихКоды.Очистить();
			ПараметрыИзменены = Истина;
		КонецЕсли;
		
		Если Параметр.Свойство("ОтборШтрихКоды") И ТипЗнч(Параметр.ОтборШтрихКоды) = Тип("Массив")
			И Параметр.ОтборШтрихКоды.Количество() Тогда
			ТекущийОтборШтрихкод = ОтборШтрихКоды.НайтиПоЗначению(Параметр.ОтборШтрихКоды);
			Если ТекущийОтборШтрихкод = Неопределено Тогда
				ОтборШтрихКоды.ЗагрузитьЗначения(Параметр.ОтборШтрихКоды);
				ПараметрыИзменены = Истина;
				ПолучитьДеревоКатегорий = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если Параметр.Свойство("Контрагент") 
			И Параметр.Контрагент <> Контрагент Тогда
			
			ПараметрыИзменены = Истина;
			ЗаполнитьДанныеПоКонтрагенту(Параметр.Контрагент, ЭтотОбъект);
			
		КонецЕсли;
		
		Если Параметр.Свойство("ОтборНоменклатураСервиса") 
			И ОтборНоменклатураСервиса <> Параметр.ОтборНоменклатураСервиса Тогда
			
			ОтборНоменклатураСервиса = Параметр.ОтборНоменклатураСервиса;
			Параметр.Свойство("ОтборНоменклатураСервисаПредставление", ОтборНоменклатураСервисаПредставление);
			Если Не ПустаяСтрока(ОтборНоменклатураСервисаПредставление) Тогда
				ПараметрыИзменены = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПараметрыИзменены Тогда
			
			НайтиТорговыеПредложения(ПолучитьДеревоКатегорий);
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ТорговыеПредложения_ОтправленыЗаказыТоваров"
		И Параметр.Свойство("ИдентификаторЗаказа")
		И Параметр.ИдентификаторЗаказа = ИдентификаторЗаказа Тогда
		
		// Очистка товаров.
		Для Каждого ПозицияТовары Из Товары Цикл
			СтрокаСписка = Список.НайтиСтроки(Новый Структура("Идентификатор", ПозицияТовары.Идентификатор));
			Если СтрокаСписка.Количество() Тогда
				СтрокаСписка[0].ГиперссылкаДобавить = 0;
			КонецЕсли;
		КонецЦикла;
		Товары.Очистить();
		ОбновитьКоличествоТоваровЭлементаКорзины();
		
	ИначеЕсли ИмяСобытия = "ТорговыеПредложения_ПеречитатьДанныеКорзины"
		И Источник <> ЭтотОбъект Тогда
		
		Если ПустаяСтрока(Параметр.АдресДанныхКорзины) Тогда
			УдалитьАдресКорзиныИзЛокальногоХранилища();
			ОчиститьТовары();
		КонецЕсли;
		
		ПрочитатьКорзинуОбновитьСписок(Параметр.АдресДанныхКорзины);
		
		ОбновитьКоличествоТоваровЭлементаКорзины();
		
	ИначеЕсли ИмяСобытия = "БизнесСеть_РегистрацияОрганизаций" Тогда
		
		ПослеПодключенияОрганизации();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РегионЗаголовокНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьВыборРегионаПоиска();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	ОтборНаименование          = "";
	НайтиТорговыеПредложения(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПоискДляОрганизацииОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораОрганизации", ЭтотОбъект);
	
	ПоказатьВыборИзМеню(Оповещение, Организации, Элементы.ПредставлениеОрганизации);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресКартинкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
#Если Не ВебКлиент Тогда
	
	Если Не ПустаяСтрока(АдресКартинки) И ЭтоАдресВременногоХранилища(АдресКартинки) Тогда
		Картинка = Новый Картинка(ПолучитьИзВременногоХранилища(АдресКартинки));
		ПоказатьЗначение( , Картинка);
	КонецЕсли;
	
#КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	Если ЗначениеЗаполнено(ИдентификаторОбрабатываемогоПредложения) Тогда
		ОтключитьОбработчикОжидания("ДобавитьТоварПослеОжидания");
		ПодключитьОбработчикОжидания("ДобавитьТоварПослеОжидания", 0.5, Истина);
	КонецЕсли;
	
	ПоказатьКартинкуПредложения();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОбработатьВыборСписка();
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииПоля(Элемент)
	
	Если Элементы.Список.ТекущийЭлемент = Неопределено
		И Не Элементы.Список.ТекущиеДанные = Неопределено
		И ЗначениеЗаполнено(Элементы.Список.ТекущиеДанные.ГиперссылкаПоказатьЕще) Тогда
		Элементы.Список.ТекущийЭлемент = Элементы.СписокГиперссылкаПоказатьЕще;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
		Или ТекущиеДанные.ОбрабатываетсяЗаданием Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоНаФорме = ТекущиеДанные.ГиперссылкаДобавить;
	
	КоличествоВЗаказе = КоличествоТовараВЗаказе(ТекущиеДанные.Идентификатор);
	
	Если КоличествоНаФорме = 0 И КоличествоВЗаказе = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтменаРедактирования Тогда
		ТекущиеДанные.ГиперссылкаДобавить = КоличествоВЗаказе;
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	ПараметрыОткрытия = ПараметрыВыбораСтроки(ТекущиеДанные);
	
	Если КоличествоНаФорме = 0 Тогда
		УдалитьПредложениеИзКорзины(ПараметрыОткрытия, ТекущиеДанные);
	Иначе
		ДобавитьПредложениеВКорзину(ПараметрыОткрытия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
		Или ТекущиеДанные.ОбрабатываетсяЗаданием 
		Или ТекущиеДанные.ГиперссылкаДобавить = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТорговыеПредложенияКлиент.КоличествоВведеноКорректно(
		ТекущиеДанные.ГиперссылкаДобавить, ТекущиеДанные.МинимальноеКоличество, ТекущиеДанные.КратностьУпаковки) Тогда
		
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокГиперссылкаДобавитьРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
		Или ТекущиеДанные.ОбрабатываетсяЗаданием Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	КоличествоНаФорме = ТекущиеДанные.ГиперссылкаДобавить;
	КратностьУпаковки = ТекущиеДанные.КратностьУпаковки;
	ОстатокОтДеления = КоличествоНаФорме % КратностьУпаковки;
	
	Если Направление = 1 Тогда
		Количество = КоличествоНаФорме + (КратностьУпаковки - ОстатокОтДеления);
		ТекущиеДанные.ГиперссылкаДобавить = Макс(ТекущиеДанные.МинимальноеКоличество, Количество);
	Иначе
		Если ТекущиеДанные.ГиперссылкаДобавить = ТекущиеДанные.МинимальноеКоличество Тогда
			ТекущиеДанные.ГиперссылкаДобавить = 0;
		Иначе
			ТекущиеДанные.ГиперссылкаДобавить = КоличествоНаФорме 
				- (?(ОстатокОтДеления = 0, КратностьУпаковки, ОстатокОтДеления));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДереваКатегории

&НаКлиенте
Процедура КатегорииПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Категории.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
		Или ТекущаяКатегория =  ТекущиеДанные.Идентификатор Тогда
		Возврат;
	КонецЕсли;
	
	ПредставлениеКатегории = ТекущиеДанные.Наименование;
	ТекущаяКатегория       = ТекущиеДанные.Идентификатор;
	
	НайтиТорговыеПредложения(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоОтборов

&НаКлиенте
Процедура ДеревоОтборовПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПараметрыОформления = ОбщегоНазначенияБЭДКлиент.НовыйПараметрыОформленияФормыУстановкаИнтервала();
	
	ТекущаяСтрока = ДеревоОтборов.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
	
	Если ТекущаяСтрока.Идентификатор <> "Поставщик" Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрокаДерева", ТекущаяСтрока);

	ЭлементПредставлениеОтбора = Элементы.ДеревоОтборовПредставлениеОтбораГиперссылка;

	Если ТекущаяСтрока.ФиксированныйОтбор Тогда
		Идентификатор = ТекущаяСтрока.Идентификатор;
		Если Идентификатор = "Поставщик" Тогда
			
			Если Элемент.ТекущийЭлемент.Имя = "ДеревоОтборовПредставление" Тогда
				Возврат;
			Иначе
				Элемент.ТекущийЭлемент.ТолькоПросмотр = НЕ РазрешитьИзменениеКонтрагента;
			КонецЕсли;
			
			Если РазрешитьИзменениеКонтрагента Тогда
				Элементы.ДеревоОтборовПредставлениеОтбора.КнопкаОчистки = 
					Не ПустаяСтрока(ТекущаяСтрока.ПредставлениеОтбора);
				Элементы.ДеревоОтборовПредставлениеОтбора.КнопкаВыбора   = Истина;
			КонецЕсли;
			
			Возврат;
			
		ИначеЕсли Идентификатор = "СпособДоставки"
			ИЛИ Идентификатор = "Доставка" ИЛИ Идентификатор = "Самовывоз" Тогда
			
			Если ПроверитьРегионПоискаПередОтборомДоставки(ТекущаяСтрока, Идентификатор) Тогда
				Возврат;
			КонецЕсли;
			
		ИначеЕсли Идентификатор = "Цена" Тогда
			
			ПараметрыОформления.ЗаголовокФормы = НСтр("ru = 'Установите желаемый интервал цен'");
			ПараметрыОформления.ТекстДекорации = 
				НСтр("ru = 'Цена в результате поиска может отличаться от выбранного интервала на ставку НДС'");
			
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеОповещенияЗавершение = 
		Новый ОписаниеОповещения("ДеревоОтборовПриИзмененииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОбщегоНазначенияБЭДКлиент.ДеревоОтборовВыбор(Элементы.ДеревоОтборов, ЭлементПредставлениеОтбора, 
		Элементы.ДеревоОтборовПредставление, ОписаниеОповещенияЗавершение, , ПараметрыОформления);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрокаДерева  = ДополнительныеПараметры.ТекущаяСтрокаДерева;
	ДанныеОтбораИзменены = Истина;
	
	Если ТекущаяСтрокаДерева.ФиксированныйОтбор Тогда
		ОбработатьРезультатИзмененияФиксированногоОтбора(
			ТекущаяСтрокаДерева, ДанныеОтбораИзменены, Результат);
	Иначе
		ДанныеОтбораИзменены = Результат;
	КонецЕсли;
	
	Если ДанныеОтбораИзменены Тогда
		НайтиТорговыеПредложения(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовПриИзменении(Элемент)
	
	ТекущаяСтрока = ДеревоОтборов.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрокаДерева", ТекущаяСтрока);
	
	ПараметрыОформленияФормы = ОбщегоНазначенияБЭДКлиент.НовыйПараметрыОформленияФормыУстановкаИнтервала();
	
	Результат = ТекущаяСтрока.Отбор;
	Если ТекущаяСтрока.ФиксированныйОтбор Тогда
		Идентификатор = ТекущаяСтрока.Идентификатор;
		Если Идентификатор = "Поставщик" Тогда
			
			Если НЕ РазрешитьИзменениеКонтрагента
				И (ЗначениеЗаполнено(Контрагент)
					ИЛИ ЗначениеЗаполнено(ИННКонтрагента)
					ИЛИ ЗначениеЗаполнено(НаименованиеКонтрагента)) Тогда
				ТекущаяСтрока.Отбор = Истина;
				Возврат;
			КонецЕсли;
			
			Если Результат
				И НЕ ЗначениеЗаполнено(ТекущаяСтрока.ПредставлениеОтбора) Тогда
				ТекущаяСтрока.Отбор = Ложь;
				ОчиститьСообщения();
				ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбран поставщик'"));
				Возврат;
			КонецЕсли;
			
		ИначеЕсли Идентификатор = "СпособДоставки"
			ИЛИ Идентификатор = "Доставка" ИЛИ Идентификатор = "Самовывоз" Тогда
			
			Если ПроверитьРегионПоискаПередОтборомДоставки(ТекущаяСтрока, Идентификатор) Тогда
				Возврат;
			КонецЕсли;
			
		ИначеЕсли Идентификатор = "Цена" Тогда 
			
			ПараметрыОформленияФормы.ЗаголовокФормы = НСтр("ru = 'Установите желаемый интервал цен'");
			ПараметрыОформленияФормы.ТекстДекорации = 
				НСтр("ru = 'Цена в результате поиска может отличаться от выбранного интервала на ставку НДС'");
				
		КонецЕсли;
	КонецЕсли;
	
	ФиксированныйОтборыБезВыбора = ТекущаяСтрока.ФиксированныйОтбор 
		И НЕ ТекущаяСтрока.ЗначениеОтбора = "Список" 
		И Не ТипЗнч(ТекущаяСтрока.ЗначениеОтбора) = Тип("Число");
	
	Если ФиксированныйОтборыБезВыбора Тогда
		ДеревоОтборовПриИзмененииЗавершение(Результат, ДополнительныеПараметры);
	Иначе
		
		ОписаниеОповещенияЗавершение = 
			Новый ОписаниеОповещения("ДеревоОтборовПриИзмененииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОбщегоНазначенияБЭДКлиент.ДеревоОтборовОтборПриИзменении(
			Элементы.ДеревоОтборов, ОписаниеОповещенияЗавершение, , ПараметрыОформленияФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовПредставлениеОтбораОкончаниеВводаТекста(
	Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.ДеревоОтборов.ТекущиеДанные;
	Если ТекущаяСтрока.Идентификатор = "Поставщик" Тогда
		ТекущаяСтрока.Отбор = Истина;
		ТекущаяСтрока.ЗначениеОтбора = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовПредставлениеОтбораНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.ДеревоОтборов.ТекущиеДанные;
	
	Если ТекущаяСтрока.Идентификатор = "Поставщик" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТекущаяСтрокаДерева", ТекущаяСтрока);
		
		ВыборКонтрагента(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовПредставлениеОтбораОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.ДеревоОтборов.ТекущиеДанные;
	
	Если ТекущаяСтрока.Идентификатор = "Поставщик" Тогда
		ТекущаяСтрока.ЗначениеОтбора = "";
		ТекущаяСтрока.ПредставлениеОтбора = "";
		ТекущаяСтрока.Отбор               = Ложь;
		ОчиститьДанныеПоКонтрагенту(ЭтотОбъект);
		НайтиТорговыеПредложения(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьРегионПоискаПередОтборомДоставки(ТекущаяСтрока, Знач Идентификатор)
	
	Если РегионПоиска.РежимОтбора = 0 Тогда
		
		Если Идентификатор = "СпособДоставки" Тогда
			
			ВозможенСамовывоз = Истина;
			ВозможнаДоставка  = Истина;
			
			ДочерниеЭлементы = ТекущаяСтрока.ПолучитьЭлементы();
			Для Каждого СтрокаЭлемента Из ДочерниеЭлементы Цикл
				СтрокаЭлемента.Отбор = Истина;
				СтрокаЭлемента.Отбор = Истина;
			КонецЦикла;
			
		ИначеЕсли Идентификатор = "Доставка" Тогда
			
			ВозможнаДоставка  = Истина;
			РодительДоставки = ТекущаяСтрока.ПолучитьРодителя();
			РодительДоставки.Отбор = Истина;
			
		ИначеЕсли Идентификатор = "Самовывоз" Тогда
			
			ВозможенСамовывоз  = Истина;
			РодительДоставки = ТекущаяСтрока.ПолучитьРодителя();
			РодительДоставки.Отбор = Истина;
			
		КонецЕсли;
		
		ОткрытьВыборРегионаПоиска(Истина);
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ДеревоОтборовНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Выполнение = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НайтиПредложения(Команда)
	
	НайтиТорговыеПредложения(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОчиститьТовары(Команда)
	
	Если Товары.Количество() = 0 Тогда
		УдалитьАдресКорзиныИзЛокальногоХранилища();
		ПоказатьПредупреждение(, НСтр("ru = 'Отсутствуют товары для заказа'"));
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("УдалитьКорзинуЗавершение", ЭтотОбъект);
	ТорговыеПредложенияКлиент.УдалитьКорзинуДиалог(ЭтотОбъект, ОтборОрганизация, АдресКорзины, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьЗаказыТоваров(Команда)
	
	Если Товары.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Отсутствуют товары для заказа.'"));
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторОбрабатываемогоПредложения) Тогда
		ОтключитьОбработчикОжидания("ДобавитьТоварПослеОжидания");
		ДобавитьТоварПослеОжидания();
	КонецЕсли;
	
	ТорговыеПредложенияКлиент.ОткрытьФормуКорзины(ОтборОрганизация);
	
	ОчиститьСообщения();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРежимСортировки(Команда)
	
	РежимСортировки = Команда.Имя;
	УстановитьРежимСортировки(Элементы, РежимСортировки, Валюта, ОтображатьЦеныБезНДС);
	НайтиТорговыеПредложения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИсходящиеДокументы(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимИсходящихДокументов", Истина);
	ОчиститьСообщения();
	ОткрытьФорму("Обработка.БизнесСеть.Форма.ДокументыОбмена", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВалютуПоиска(Команда)
	
	Если Товары.Количество() Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ИзменитьВалютуПоискаПродолжение", ЭтотОбъект),
			НСтр("ru = 'При изменении валюты, список товаров для заказа будет очищен.'"),
			РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ИзменитьВалютуПоискаПродолжение(КодВозвратаДиалога.ОК, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоПоставщику(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НаименованиеКонтрагента  = ТекущиеДанные.НаименованиеКонтрагента;
	ИННКонтрагента           = ТекущиеДанные.ИННКонтрагента;
	КППКонтрагента           = ТекущиеДанные.КППКонтрагента;
	
	ЗаполнитьЭлементОтбораПоПоставщику(ДеревоОтборов, НаименованиеКонтрагента, ИННКонтрагента);
	
	НайтиТорговыеПредложения(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтборы(Команда)
	
	ОчиститьОтборИОбновитьСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПригласитьПоставщиков(Команда)
	
	// Приглашение поставщиков в сервис.
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимПриглашения", "Поставщики");
	ОчиститьСообщения();
	ОткрытьФорму("Обработка.БизнесСеть.Форма.ОтправкаПриглашенийКонтрагентам", ПараметрыОткрытия);

КонецПроцедуры

&НаКлиенте
Процедура ОтображатьЦенуБезНДС(Команда)
	
	Элементы.ОтображатьЦеныБезНДС.Пометка = Не Элементы.ОтображатьЦеныБезНДС.Пометка;
	
	ОтображатьЦеныБезНДС = Не ОтображатьЦеныБезНДС;
	
	УстановитьЗаголовокИзменитьПредставлениеЦеныВСписке();
	
КонецПроцедуры

&НаКлиенте
Процедура СледующаяКартинка(Команда)
	СледующееИзображение = Истина;
	ПереключитьИзображение();
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущаяКартинка(Команда)
	СледующееИзображение = Ложь;
	ПереключитьИзображение();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьОтборы(Команда)
	
	УстановитьВидимостьОтборов(Элементы.ПоказатьСкрытьОтборы.Пометка, Элементы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьКатегории(Команда)
	
	ВидимостьКатегорий = Элементы.ПоказатьСкрытьКатегории.Пометка;
	
	Элементы.ПоказатьСкрытьКатегории.Пометка    = НЕ ВидимостьКатегорий;
	Элементы.ГруппаКатегорий.Видимость          = НЕ ВидимостьКатегорий;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьИзображения(Команда)
	
	ПоказатьИзображения = Не Элементы.ПоказатьИзображения.Пометка;
	УстановитьПоказИзображений(ЭтотОбъект);
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСКорзиной

&НаСервере
Процедура ПрочитатьКорзинуОбновитьСписок(Знач АдресДанныхКорзины)
	
	ТорговыеПредложенияСлужебный.ЗаполнитьТоварыПоДаннымКорзины(Товары, , АдресДанныхКорзины);
	
	ОчиститьКоличествоТорговыхПредложений();
	
	УстановитьКоличествоТорговыхПредложений();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПредложениеИзКорзины(ПараметрыОткрытия, ТекущиеДанные)
	
	Если ТекущиеДанные.ОбрабатываетсяЗаданием Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторОбрабатываемогоПредложения)
		И ИдентификаторОбрабатываемогоПредложения = ТекущиеДанные.Идентификатор Тогда
		
		ОтключитьОбработчикОжидания("ДобавитьТоварПослеОжидания");
		ИдентификаторОбрабатываемогоПредложения = "";
	КонецЕсли;
	
	КомандыТорговогоПредложения = ТорговыеПредложенияКлиент.КомандыТорговогоПредложения(
		ТекущиеДанные.Идентификатор, Товары);
	КомандаУдалить = КомандыТорговогоПредложения.Удалить;
	
	Если ЗначениеЗаполнено(КомандаУдалить) Тогда
		УдалитьТоварИзКорзины(ТекущиеДанные.Идентификатор, КомандаУдалить);
	КонецЕсли;
	
	СтрокаЗаказа = ТоварПоИдентификаторуПредложения(Товары, ТекущиеДанные.Идентификатор);
	
	Если СтрокаЗаказа <> Неопределено Тогда
		ПараметрыОткрытия.Вставить("ИдентификаторыПредложений", 
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущиеДанные.Идентификатор));
		Оповестить("ТорговыеПредложения_УдалитьИзЗаказа", ПараметрыОткрытия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьТоварИзКорзины(ИдентификаторПредложения, АдресКоманды, ИдентификаторЗадания = Неопределено)
	
	ПараметрыОповещения = Новый Структура("Идентификатор", ИдентификаторПредложения);
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыполненияДействияНадТоваром", ЭтотОбъект, ПараметрыОповещения);
	
	ПараметрыРаботыСТоваром = ТорговыеПредложенияКлиент.ОписаниеПараметровРаботыСТоваромКорзины();
	
	ПараметрыРаботыСТоваром.Организация         = ОтборОрганизация;
	ПараметрыРаботыСТоваром.АдресКомандыУдалить = АдресКоманды;
	ПараметрыРаботыСТоваром.АдресКорзины        = АдресКорзины;
	ПараметрыРаботыСТоваром.ВидОперации         = "Удаление";
	ПараметрыРаботыСТоваром.ПрочитатьКорзину    = Истина;
	
	ТорговыеПредложенияКлиент.ВыполнитьДействиеСТоваромКорзины(ПараметрыРаботыСТоваром, ЭтотОбъект, Оповещение);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьПараметрыОтборов(АдресПараметровОтбора)

	Если Не ЭтоАдресВременногоХранилища(АдресПараметровОтбора) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеНоменклатуры = БизнесСетьВызовСервера.ПолучитьУдалитьИзВременногоХранилища(АдресПараметровОтбора);
	
	Если ТипЗнч(ДанныеНоменклатуры) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;	

	Артикулы = Новый Массив;
	Штрихкоды = Новый Массив;
	
	Для каждого ЭлементКоллекции Из ДанныеНоменклатуры Цикл
		
		Если ЗначениеЗаполнено(ЭлементКоллекции.Артикул) Тогда
			Артикулы.Добавить(ЭлементКоллекции.Артикул);
		КонецЕсли;
		
		Для каждого Штрихкод Из ЭлементКоллекции.Штрихкоды Цикл
			Штрихкоды.Добавить(Штрихкод);
		КонецЦикла;
		
	КонецЦикла;
	
	Артикулы = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Артикулы);
	Штрихкоды = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Штрихкоды);
		
	Если ЗначениеЗаполнено(Штрихкоды) Тогда
		ОтборШтрихКоды.ЗагрузитьЗначения(Штрихкоды);
	ИначеЕсли ЗначениеЗаполнено(Артикулы) Тогда
		ОтборАртикулы.ЗагрузитьЗначения(Артикулы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПредложениеВКорзинуПослеОповещения(Параметр)
	
	СтрокаСписка = Неопределено;
	
	ИдентификаторОбрабатываемогоПредложения = Параметр.Идентификатор;
	
	СтрокиСписка = Список.НайтиСтроки(Новый Структура("Идентификатор", ИдентификаторОбрабатываемогоПредложения));
	Если СтрокиСписка.Количество() Тогда
		СтрокаСписка = СтрокиСписка[0];
	КонецЕсли;
	
	Если СтрокаСписка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаСписка.ГиперссылкаДобавить = 0 Тогда
		СтрокаСписка.ГиперссылкаДобавить = Макс(СтрокаСписка.МинимальноеКоличество, СтрокаСписка.КратностьУпаковки);
	КонецЕсли;
	
	ДобавитьТоварыДляЗаказа(СтрокаСписка);
	
	ОбновитьКоличествоТоваровЭлементаКорзины();
	
	ПодключитьОбработчикОжидания("ДобавитьТоварПослеОжидания", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТоварПослеОжидания()
	
	СтрокаСписка = ТорговоеПредложениеСпискаПоИдентификатору(ИдентификаторОбрабатываемогоПредложения);
	
	Если СтрокаСписка <> Неопределено Тогда
		СтрокаСписка.ОбрабатываетсяЗаданием = Истина;
	КонецЕсли;
	
	Количество = КоличествоТовараВЗаказе(ИдентификаторОбрабатываемогоПредложения);
	
	ДобавитьТоварИзменитьКоличество(ИдентификаторОбрабатываемогоПредложения, Количество);
	
	ИдентификаторОбрабатываемогоПредложения = "";
	
КонецПроцедуры

&НаКлиенте
Функция ТорговоеПредложениеСпискаПоИдентификатору(ИдентификаторПредложения)
	
	СтрокиСписка = Список.НайтиСтроки(Новый Структура("Идентификатор", ИдентификаторПредложения));
	
	Результат = Неопределено;
	
	Если ЗначениеЗаполнено(СтрокиСписка) Тогда
		Результат = СтрокиСписка[0];
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьОрганизации()
	
	Элементы.ПредставлениеОрганизации.Видимость = Ложь;
	Организации.Очистить();
	ОтборОрганизация = Метаданные.ОпределяемыеТипы.Организация.Тип.ПривестиЗначение();
	
	ПодключенныеОрганизации = ИнтеграцияТорговыеПредложения.ПодключенныеОрганизации();
	Организации.ЗагрузитьЗначения(ПодключенныеОрганизации.ВыгрузитьКолонку("Организация"));
	
	Для Каждого ПодключеннаяОрганизация Из ПодключенныеОрганизации Цикл
		Если Не ПодключеннаяОрганизация.ТребуетсяПовторноеПодключение Тогда
			ОтборОрганизация = ПодключеннаяОрганизация.Организация;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ОтборОрганизация.Пустая() Тогда
		СформироватьПредставлениеОрганизации();
		Элементы.ПредставлениеОрганизации.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПредставлениеОрганизации()
	
	ШаблонПредставления = НСтр(
		"ru = 'Поиск предложений для <a href = ""ВыборОрганизации"">%1</a>'", 
		ОбщегоНазначения.КодОсновногоЯзыка());
	ПредставлениеОрганизации = СтрШаблон(ШаблонПредставления, ОтборОрганизация);
	Элементы.ПредставлениеОрганизации.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(ПредставлениеОрганизации);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораОрганизации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтборОрганизация = Результат.Значение;
	
	ПослеВыбораОрганизацииНаСервере();
	
	НайтиТорговыеПредложения(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПослеВыбораОрганизацииНаСервере()
	
	БизнесСеть.ЗаполнитьРегионыПоиска(
		"ТорговыеПредложения",
		ОтборОрганизация, 
		РегионПоиска, 
		РегионЗаголовок, 
		ИдентификаторыРегионов);
	
	СформироватьПредставлениеОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьЗавершениеПоиска(ДополнительныеПараметры = Неопределено)
	
	// Инициализация обработчик ожидания завершения.
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения                  = НСтр("ru = 'Поиск торговых предложений.'");
	ПараметрыОжидания.ВыводитьОкноОжидания            = Ложь;
	ПараметрыОжидания.ВыводитьСообщения               = Истина;
	
	ОбработкаЗавершенияПоиска = Новый ОписаниеОповещения("НайтиТорговыеПредложенияЗавершение",
		ЭтотОбъект, ДополнительныеПараметры);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗаданиеПоиска, ОбработкаЗавершенияПоиска, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКоличествоТоваровЭлементаКорзины()
	
	КоличествоПозиций = Товары.Количество();
	Если КоличествоПозиций > 0 Тогда
		Элементы.СоздатьОтправитьЗаказы.Заголовок = КоличествоПозиций;
		Элементы.СоздатьОтправитьЗаказы.Отображение = ОтображениеКнопки.КартинкаИТекст;
	Иначе 
		Элементы.СоздатьОтправитьЗаказы.Заголовок = "";
		Элементы.СоздатьОтправитьЗаказы.Отображение = ОтображениеКнопки.Картинка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиТорговыеПредложения(ПолучитьДеревоКатегорий = Ложь, СледующаяСтраница = Ложь)
	
	ОчиститьСообщения();
	
	ЗаполнитьЗаголовокФормы();
	
	ЗаполнитьБыстрыеОтборы();
	
	// Если стоит отбор по категории то получать дерево категории не нужно.
	Если ПолучитьДеревоКатегорий Тогда
		ПолучитьДеревоКатегорий = ПустаяСтрока(ТекущаяКатегория);
	КонецЕсли;
	
	ЗаполненныеПараметрыЗапроса = ЗаполнитьПараметрыЗапроса(ПолучитьДеревоКатегорий);
	НайтиТорговыеПредложенияВФоне(ЗаполненныеПараметрыЗапроса, СледующаяСтраница);
	
	Если ЗаполненныеПараметрыЗапроса.Свойства.Количество() = 0 Тогда
		УдалитьНеФиксированныеОтборыДереваОтборов();
		Если Не ПустаяСтрока(ТекущаяКатегория) Тогда
			ЗаполнитьДополнительныеРеквизитыКатегории();
		КонецЕсли;
	КонецЕсли;
	
	Если Не СледующаяСтраница Тогда
		Список.Очистить();
	КонецЕсли;
	
	УстановитьВидимостьДоступность(ЭтотОбъект, ПолучитьДеревоКатегорий);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СледующаяСтраница", СледующаяСтраница);
	ДополнительныеПараметры.Вставить("ИдентификаторЗаданияПоиска", ФоновоеЗаданиеПоиска.ИдентификаторЗадания);
	
	ОжидатьЗавершениеПоиска(ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура НайтиТорговыеПредложенияВФоне(
			Знач ЗаполненныеПараметрыЗапроса, 
			Знач СледующаяСтраница = Ложь)
	
	ПараметрыЗапроса = ТорговыеПредложенияСлужебный.НовыеПараметрыПоискаТорговыхПредложенийСОтборами(ОтборОрганизация);
	
	Если ПараметрыЗапроса <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ЗаполненныеПараметрыЗапроса);
	КонецЕсли;
	
	ЗаполнитьПараметрыЗапросаПоискТорговыхПредложений(ПараметрыЗапроса, СледующаяСтраница);
	
	Если ФоновоеЗаданиеПоиска <> Неопределено 
		И ЗначениеЗаполнено(ФоновоеЗаданиеПоиска.ИдентификаторЗадания) Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ФоновоеЗаданиеПоиска.ИдентификаторЗадания);
		ФоновоеЗаданиеПоиска.ИдентификаторЗадания = Неопределено;
	КонецЕсли;
	
	Задание = Новый Структура("ИмяПроцедуры, Наименование, ПараметрыПроцедуры");
	Задание.Наименование = НСтр("ru = '1С:Бизнес-сеть. Поиск торговых предложений по отборам.'");
	Задание.ИмяПроцедуры = "ТорговыеПредложенияСлужебный.ПоискТорговыхПредложенийПоОтборуВФоне";
	Задание.ПараметрыПроцедуры = ПараметрыЗапроса;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = Задание.Наименование;
	ПараметрыВыполнения.ЗапуститьВФоне              = Истина;
	ПараметрыВыполнения.ОжидатьЗавершение           = 0;
	
	ФоновоеЗаданиеПоиска = ДлительныеОперации.ВыполнитьВФоне(Задание.ИмяПроцедуры,
		Задание.ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиТорговыеПредложенияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	// Инициализация.
	Отказ = Ложь;
	
	// Данное задание отменено или не является последним
	Если ФоновоеЗаданиеПоискаОтменено(ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	// Вывод сообщений из фонового задания.
	ТорговыеПредложенияКлиент.ОбработатьОшибкиФоновогоЗадания(Результат, Отказ);
	Если Результат = Неопределено Или ФоновоеЗаданиеПоиска = Неопределено Тогда
		УстановитьВидимостьДоступность(ЭтотОбъект);
		Возврат;
	КонецЕсли;
	
	// Сохранение текущей строки для позиционирования после загрузки.
	ТекущиеДанныеСписка = Неопределено;
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.СледующаяСтраница Тогда
		ТекущиеДанныеСписка = Элементы.Список.ТекущиеДанные.ПолучитьИдентификатор() - 1;
	КонецЕсли;
	
	// Проверка результата поиска.
	Если НЕ Отказ И Результат.Статус = "Выполнено" Тогда
		Если ЗначениеЗаполнено(Результат.АдресРезультата)
			И ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда
				
				ЗаполнитьТаблицуТорговыхПредложений(Результат.АдресРезультата);
				
				ФоновоеЗаданиеПоиска = Неопределено;
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимостьДоступность(ЭтотОбъект);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьКоличествоТоваровЭлементаКорзины();
	
	РазвернутьДеревоКатегорий();
	
	// Подготовка данных для элементов постраничной выдачи данных.
	КоличествоСтрок = Список.Количество();
	Если КоличествоСтрок = 0 Тогда
		СостояниеПоиска = НСтр("ru = 'Торговые предложения не найдены'");
	Иначе
		СостояниеПоиска = СтрШаблон(НСтр("ru = 'Отображается торговых предложений: %1'"), 
			Мин((Страницы.Страница + 1) * Страницы.РазмерСтраницы, Страницы.КоличествоСтрок));
	КонецЕсли;
	
	// Позиционирование на текущей строке списка.
	Если ТекущиеДанныеСписка <> Неопределено Тогда
		Элементы.Список.ТекущаяСтрока = ТекущиеДанныеСписка;
	КонецЕсли;
	
	ТекущийЭлемент = Элементы.Список;
	
	ОповещениеПослеПодключенияОрганизации = Новый ОписаниеОповещения("ПодключениеОрганизацииПродолжение", ЭтотОбъект);
	ИнтеграцияТорговыеПредложенияКлиент.ОткрытьФормуПодключенияОрганизацииСПроверкойПодключения(
		ОтборОрганизация, ЭтотОбъект, ОповещениеПослеПодключенияОрганизации);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключениеОрганизацииПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		
		ОтборОрганизация = ""; // ОпределяемыйТип.Организация
		ЗаполнитьОрганизации();
		
	КонецЕсли;
	
	НайтиТорговыеПредложения(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодключенияОрганизации()
	
	ЗаполнитьОрганизации();
	НайтиТорговыеПредложения(Истина);
	
КонецПроцедуры

&НаКлиенте
Функция ЗаполнитьПараметрыЗапроса(ПолучитьДеревоКатегорий = Ложь)
	
	ПараметрыЗапроса = НовыйПараметрыЗапросаПоискаНайтиТорговыеПредложения();
	ПараметрыЗапроса.ПолучитьДеревоКатегорий = ПолучитьДеревоКатегорий;
	ПараметрыЗапроса.ПолучитьДанныеКорзины = Истина;
	
	ПолучитьПараметрыИзДереваОтборов(ПараметрыЗапроса, ПолучитьДеревоКатегорий);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьПараметрыИзДереваОтборов(ПараметрыЗапроса, ПолучитьДеревоКатегорий = Ложь)
	
	ЭлементыОтборов = ДеревоОтборов.ПолучитьЭлементы();
	Для Каждого ЭлементОтбора Из ЭлементыОтборов Цикл
		
		Если ПолучитьДеревоКатегорий И ЭлементОтбора.Идентификатор = "Цена" Тогда
			ЭлементОтбора.МинимальноеЗначение = "";
			ЭлементОтбора.МаксимальноеЗначение = "";
		КонецЕсли;
		
		Если НЕ ЭлементОтбора.Отбор Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторОтбора = ЭлементОтбора.Идентификатор;
		
		Если ЭлементОтбора.ФиксированныйОтбор Тогда
			
			Если ПараметрыЗапроса.Свойство(ИдентификаторОтбора) Тогда
				ПараметрыЗапроса[ИдентификаторОтбора] = ЭлементОтбора.Отбор;
			КонецЕсли;
			
			Если ИдентификаторОтбора = "Цена" 
				И ЗначениеЗаполнено(ЭлементОтбора.ИнтервалОт) 
				И ЗначениеЗаполнено(ЭлементОтбора.ИнтервалДо) Тогда
				
				ПараметрыЗапроса.ЦенаОт = ЭлементОтбора.ИнтервалОт;
				ПараметрыЗапроса.ЦенаДо = ЭлементОтбора.ИнтервалДо;
				
			КонецЕсли;
			
		Иначе
			
			СтруктураАтрибутов        = Неопределено;
			ОбщегоНазначенияБЭДКлиент.ОбработатьЭлементыДереваОтборовПоДополнительнымРеквизитам(
				ЭлементОтбора, БыстрыеОтборы, СтруктураАтрибутов);
			
			ЗаполнитьМассивАтрибутов(ПараметрыЗапроса.Свойства, СтруктураАтрибутов, ЭлементОтбора);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьБыстрыеОтборы()
	
	БыстрыеОтборы.Очистить();
	
	ЭлементыОтборов = ДеревоОтборов.ПолучитьЭлементы();
	Для Каждого ЭлементОтбора Из ЭлементыОтборов Цикл
		
		Если НЕ ЭлементОтбора.Отбор Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторОтбора = ЭлементОтбора.Идентификатор;
		
		Если ЭлементОтбора.ФиксированныйОтбор Тогда
			
			ТекстОтбора = ?(ПустаяСтрока(ЭлементОтбора.ПредставлениеБыстрогоОтбора), 
				ЭлементОтбора.ПредставлениеОтбора, 
				ЭлементОтбора.ПредставлениеБыстрогоОтбора);
			
			Если ПустаяСтрока(ТекстОтбора) Тогда
				ПредставлениеОтбора = ЭлементОтбора.Представление;
			Иначе
				ПредставлениеОтбора = СтрШаблон("%1: %2", ЭлементОтбора.Представление, ТекстОтбора);
			КонецЕсли;
			
			Если ИдентификаторОтбора = "СпособДоставки" Тогда
				
				ЭлементыОтборСписок     = ЭлементОтбора.ПолучитьЭлементы();
				СтрокаЗначенийОтборов   = "";
				ВсеЗначенияВыбраны = Истина;
				
				Для Каждого ЭлементСписка Из ЭлементыОтборСписок Цикл
					Если ЭлементСписка.Отбор Тогда
						СтрокаЗначенийОтборов = СтрокаЗначенийОтборов 
							+ ?(ПустаяСтрока(СтрокаЗначенийОтборов), "", ", ") + ЭлементСписка.Представление;
					Иначе
						ВсеЗначенияВыбраны = Ложь;
					КонецЕсли;
				КонецЦикла;
				
				Если ВсеЗначенияВыбраны Тогда
					ПредставлениеОтбора = ЭлементОтбора.Представление + ": Все";
				ИначеЕсли НЕ ПустаяСтрока(СтрокаЗначенийОтборов) Тогда
					ПредставлениеОтбора = ЭлементОтбора.Представление + ": " + СтрокаЗначенийОтборов;
				КонецЕсли;
				
			КонецЕсли;
			
			БыстрыеОтборы.Добавить(ИдентификаторОтбора, ПредставлениеОтбора);
			
		Иначе
			
			СтруктураАтрибутов        = Неопределено;
			ОбщегоНазначенияБЭДКлиент.ОбработатьЭлементыДереваОтборовПоДополнительнымРеквизитам(
				ЭлементОтбора, БыстрыеОтборы, СтруктураАтрибутов);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОтборАртикулы.Количество() Тогда
		
		ПредставлениеОтбора = СтрШаблон(
			НСтр("ru = 'Артикул: %1'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка()), 
			СтрСоединить(ОтборАртикулы.ВыгрузитьЗначения(), ", "));
		БыстрыеОтборы.Добавить("Артикул", ПредставлениеОтбора);
		
	КонецЕсли;
	
	Если ОтборШтрихкоды.Количество() Тогда
		
		ПредставлениеОтбора = СтрШаблон(
			НСтр("ru = 'Штрихкод: %1'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка()), 
			СтрСоединить(ОтборШтрихкоды.ВыгрузитьЗначения(), ", "));
		БыстрыеОтборы.Добавить("Штрихкод", ПредставлениеОтбора);
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(ОтборНоменклатураСервиса) И Не ПустаяСтрока(ОтборНоменклатураСервисаПредставление) Тогда
		
		ПредставлениеОтбора = СтрШаблон(
			НСтр("ru = '1С Номенклатура: %1'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка()), 
			ОтборНоменклатураСервисаПредставление);
		БыстрыеОтборы.Добавить("1СНоменклатура", ПредставлениеОтбора);
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(ОтборХарактеристикаСервиса) Тогда
		
		// Выводим ИД характеристики 1СН т.к. не найден кейс когда сюда передается ИД.
		ПредставлениеОтбора = СтрШаблон(
			НСтр("ru = '1С ИД Характеристики: %1'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка()), 
			ОтборХарактеристикаСервиса);
		БыстрыеОтборы.Добавить("1СХарактеристика", ПредставлениеОтбора);
		
	КонецЕсли;
	
	ИзменитьЭлементыФормыБыстрыеОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМассивАтрибутов(МассивАтрибутов, СтруктураАтрибутов, ЭлементОтбора)
	
	Если СтруктураАтрибутов <> Неопределено Тогда
		Если ЭлементОтбора.ЗначениеОтбора = "Список" Тогда
			
			МассивИдентификаторовЗначений = СтруктураАтрибутов.ИдентификаторыЗначений;
			Для Каждого ЭлементМассива Из МассивИдентификаторовЗначений Цикл
				
				ПараметрыАтрибутов = ПолучитьПараметрыАтрибутов(
								СтруктураАтрибутов.Идентификатор, ЭлементМассива);
				МассивАтрибутов.Добавить(ПараметрыАтрибутов);
				
			КонецЦикла;
			
		Иначе
			
			Если ТипЗнч(ЭлементОтбора.ЗначениеОтбора) = Тип("Булево") Тогда
				Значение = СтруктураАтрибутов.Значение;
			Иначе
				
				ШаблонЗначения = "%1~%2";
				
				Если ТипЗнч(ЭлементОтбора.ЗначениеОтбора) = Тип("Дата") Тогда
					СтруктураАтрибутов.МинимальноеЗначение = Формат(СтруктураАтрибутов.МинимальноеЗначение,
						"ДФ=yyyy-MM-dd;");
					СтруктураАтрибутов.МаксимальноеЗначение = Формат(
									СтруктураАтрибутов.МаксимальноеЗначение, "ДФ=yyyy-MM-dd;");
				КонецЕсли;
				
				Значение = СтрШаблон(ШаблонЗначения, СтруктураАтрибутов.МинимальноеЗначение,
					СтруктураАтрибутов.МаксимальноеЗначение);
				
			КонецЕсли;
			
			ПараметрыАтрибутов = ПолучитьПараметрыАтрибутов(СтруктураАтрибутов.Идентификатор, Значение);
			МассивАтрибутов.Добавить(ПараметрыАтрибутов);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыАтрибутов(Идентификатор, Значение)
	
	ПараметрыАтрибутов = Новый Структура;
	ПараметрыАтрибутов.Вставить("Идентификатор", Идентификатор);
	ПараметрыАтрибутов.Вставить("Значение", Значение);
	
	Возврат ПараметрыАтрибутов;
	
КонецФункции

// Дозаполнить параметры запроса.
// 
// Параметры:
//  ПараметрыЗапроса - см. ТорговыеПредложенияСлужебный.НовыеПараметрыПоискаТорговыхПредложенийСОтборами
//  СледующаяСтраница - Булево
//
&НаСервере
Процедура ЗаполнитьПараметрыЗапросаПоискТорговыхПредложений(ПараметрыЗапроса, Знач СледующаяСтраница = Ложь)
	
	// Постраничный вывод.
	Если СледующаяСтраница Тогда
		Если Страницы.Страница < Страницы.КоличествоСтраниц - 1 Тогда
			Страницы.Страница = Страницы.Страница + 1;
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		Страницы.Страница = 0;
	КонецЕсли;
	
	ПараметрыЗапроса.Страница = Страницы.Страница;
	ПараметрыЗапроса.РазмерСтраницы = Страницы.РазмерСтраницы;
	ПараметрыЗапроса.Валюта = ТорговыеПредложенияПовтИсп.КодВалюты(Валюта);
	ПараметрыЗапроса.Сортировка = РежимСортировки;
	
	Если ПараметрыЗапроса.ПолучитьДанныеКорзины Тогда
		ПараметрыЗапроса.АдресКорзины = АдресКорзины;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяКатегория) Тогда
		ПараметрыЗапроса.ИдентификаторКатегории = ТекущаяКатегория;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборНаименование) Тогда
		ПараметрыЗапроса.Наименование = ОтборНаименование;
	ИначеЕсли ЗначениеЗаполнено(СтрокаПоиска) Тогда
		ПараметрыЗапроса.Наименование = СтрокаПоиска;
	КонецЕсли;
	
	// Сброс наименования, если размер строки менее минимального значения.
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Наименование) 
		И СтрДлина(ПараметрыЗапроса.Наименование) < 3 Тогда
		ПараметрыЗапроса.Наименование = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборАртикулы) Тогда
		ПараметрыЗапроса.Артикулы = ОтборАртикулы.ВыгрузитьЗначения();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборШтрихкоды) Тогда
		ПараметрыЗапроса.Штрихкоды = ОтборШтрихкоды.ВыгрузитьЗначения();
	КонецЕсли;
	
	// Регионы поиска.
	Если (ЗначениеЗаполнено(РегионПоиска) И РегионПоиска.РежимОтбора <> 0)
		И ИдентификаторыРегионов.Количество() Тогда
		
		ЗначениеИдентификаторыРегионов = РеквизитФормыВЗначение("ИдентификаторыРегионов", Тип("ТаблицаЗначений"));
		Для Каждого ЭлементКоллекции Из ЗначениеИдентификаторыРегионов Цикл
			НастройкиРегионов = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ЭлементКоллекции);
			Если ВозможенСамовывоз = ВозможнаДоставка Тогда 
				// Если выбраны обе опции или не выбрана ни одна - это одно и тоже, надо установить отбор по всем способам доставки.
				ПараметрыЗапроса.РегионыПоиска.Добавить(НастройкиРегионов);
			ИначеЕсли (ВозможенСамовывоз И ЭлементКоллекции.ДляСамовывоза)
				ИЛИ (ВозможнаДоставка И ЭлементКоллекции.ДляДоставки) Тогда
				// Если выбрана одна из опций - это осознанное решение и отбор делается по одному способу доставки.
				ПараметрыЗапроса.РегионыПоиска.Добавить(НастройкиРегионов);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		
		ПараметрыКонтрагента = ОбщегоНазначенияБЭД.ДанныеЮрФизЛица(Контрагент);
		
		ИННКонтрагента = ПараметрыКонтрагента.Инн;
		КППКонтрагента = ПараметрыКонтрагента.Кпп;
		НаименованиеКонтрагента = ПараметрыКонтрагента.ПолноеНаименование;
		
		СтрокаПараметрыКонтрагента = ПараметрыЗапроса.Контрагенты.Добавить();
		СтрокаПараметрыКонтрагента.ИНН = ИННКонтрагента;
		СтрокаПараметрыКонтрагента.КПП = КППКонтрагента;
		
	ИначеЕсли  ЗначениеЗаполнено(ИННКонтрагента) 
			ИЛИ ЗначениеЗаполнено(КППКонтрагента) 
			ИЛИ ЗначениеЗаполнено(НаименованиеКонтрагента) Тогда
		
		СтрокаПараметрыКонтрагента = ПараметрыЗапроса.Контрагенты.Добавить();
		СтрокаПараметрыКонтрагента.ИНН = ИННКонтрагента;
		СтрокаПараметрыКонтрагента.КПП = КППКонтрагента;
		
		ТипЧисло = Новый ОписаниеТипов("Число");
		Если ПустаяСтрока(ИННКонтрагента) И ТипЧисло.ПривестиЗначение(НаименованиеКонтрагента) <> 0 Тогда
			СтрокаПараметрыКонтрагента.ИНН = НаименованиеКонтрагента;
		Иначе
			СтрокаПараметрыКонтрагента.Наименование = НаименованиеКонтрагента;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборНоменклатураСервиса) Тогда
		НовыйОтбор = ПараметрыЗапроса.НоменклатураСервиса.Добавить();
		НовыйОтбор.ИдентификаторНоменклатуры = ОтборНоменклатураСервиса;
		НовыйОтбор.ИдентификаторХарактеристики = ОтборХарактеристикаСервиса;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция МинимальноеКоличествоДляЗаказа(Цены)
	
	Результат = 0;
	
	Если Не ЗначениеЗаполнено(Цены) Тогда
		Результат = 1;
		Возврат Результат;
	КонецЕсли;
	
	Для каждого ЭлементКоллекции Из Цены Цикл
		
		Если ЭлементКоллекции.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;	
			
		Если Результат = 0 Тогда
			Результат = ЭлементКоллекции.Количество;
			Продолжить;
		КонецЕсли;
			
		Результат = Мин(Результат, ЭлементКоллекции.Количество);
		
	КонецЦикла;
	
	Если Результат = 0 Тогда
		Результат = 1;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПерсональнуюЦену(СтруктураПредложений, ЦелевыеКонтрагенты)
	
	Если ЦелевыеКонтрагенты = Неопределено Или ЦелевыеКонтрагенты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЮрФизЛица = ОбщегоНазначенияБЭД.ДанныеЮрФизЛица(ОтборОрганизация);
	
	ПоисковыеДанные = "";
	Если ИнтеграцияТорговыеПредложения.ЭтоФизЛицо(ОтборОрганизация) Тогда
		ПоисковыеДанные = ДанныеЮрФизЛица.ИНН;
	Иначе
		ШаблонПоисковыеДанные = "%1:%2";
		ПоисковыеДанные = СтрШаблон(ШаблонПоисковыеДанные, ДанныеЮрФизЛица.ИНН, ДанныеЮрФизЛица.КПП);
	КонецЕсли;
	
	Если ПустаяСтрока(ПоисковыеДанные) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаКонтрагента = ЦелевыеКонтрагенты.Найти(ПоисковыеДанные, "ИНН_КПП");
	Если СтрокаКонтрагента <> Неопределено Тогда
		СтруктураПредложений.ПерсональнаяЦена = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАдресаКартинок(СтруктураПредложений, АдресаКартинок)
	
	Если АдресаКартинок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаАдресКартинки Из АдресаКартинок Цикл
		
		НоваяСтрокаДанныхКартинки = СтруктураПредложений.АдресаКартинок.Добавить();
		НоваяСтрокаДанныхКартинки.АдресВСервисе = СтрокаАдресКартинки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуТорговыхПредложений(Знач АдресРезультата)
	
	ДанныеПоискаИзСервиса = ОбработатьРезультатПоиска(АдресРезультата);
	
	Если ДанныеПоискаИзСервиса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПоискаИзСервиса.ДеревоКатегорий) Тогда
		НовыйДеревоКатегорийХэшСумма = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(ДанныеПоискаИзСервиса.ДеревоКатегорий);
		Если НовыйДеревоКатегорийХэшСумма <> ДеревоКатегорийХэшСумма Тогда
			ДеревоКатегорийХэшСумма = НовыйДеревоКатегорийХэшСумма;
			ЗначениеВРеквизитФормы(ДанныеПоискаИзСервиса.ДеревоКатегорий, "Категории");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПоискаИзСервиса.ДанныеКорзины) Тогда
		НовыйДанныеКорзиныХэшСумма = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(ДанныеПоискаИзСервиса.ДанныеКорзины);
		Если НовыйДанныеКорзиныХэшСумма <> ДанныеКорзиныХэшСумма Тогда
			ДанныеКорзиныХэшСумма = НовыйДанныеКорзиныХэшСумма;
			ТорговыеПредложенияСлужебный.ПеречитатьКорзину(
				АдресКорзины, АдресКомандыДобавитьТовар, ДанныеПоискаИзСервиса.ДанныеКорзины, Товары);
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеПоискаИзСервиса.Свойство("Страницы") Тогда
		ЗаполнитьЗначенияСвойств(Страницы, ДанныеПоискаИзСервиса.Страницы);
	КонецЕсли;
	
	МассивТорговыхПредложений = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ДанныеПоискаИзСервиса, "МассивПредложений", Новый Массив);
	
	КоличествоПредложений = МассивТорговыхПредложений.Количество();
	Если КоличествоПредложений = 0 Тогда
		ОчиститьСписокПредложений();
	Иначе
		// Если страница не равна 0 значит запрашивается следующая страница.
		Если Страницы.Страница = 0 Тогда
			ОчиститьСписокПредложений();
		Иначе
			// Удаление последней строки "Показать еще".
			Список.Удалить(Список.Количество() - 1);
		КонецЕсли;
		
		Для Каждого ЭлементКоллекции Из МассивТорговыхПредложений Цикл
			
			НоваяСтрока = Список.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементКоллекции, , "АдресаКартинок, ЦеныВВалютеПредложения");
			
			// Изображения.
			Для Каждого СтрокаКартинки Из ЭлементКоллекции.АдресаКартинок Цикл
				НоваяСтрокаКартинки = НоваяСтрока.АдресаКартинок.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаКартинки, СтрокаКартинки);
			КонецЦикла;
			
			// Матрица цен в валюте предложения.
			Для Каждого СтрокаЦены Из ЭлементКоллекции.ЦеныВВалютеПредложения Цикл
				НоваяСтрокаЦеныВалютаПредложения = НоваяСтрока.ЦеныВВалютеПредложения.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаЦеныВалютаПредложения, СтрокаЦены);
			КонецЦикла;
			
			УстановитьЦенуСтрокиСписка(НоваяСтрока);
			
		КонецЦикла;
		
		Если КоличествоПредложений = Страницы.РазмерСтраницы Тогда
			НоваяСтрока = Список.Добавить();
			НоваяСтрока.ГиперссылкаПоказатьЕще = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьКоличествоТорговыхПредложений();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьСписокПредложений()
	Для Каждого СтрокаСписка Из Список Цикл
		Для Каждого АдресХранилищаКартинки Из СтрокаСписка.АдресаКартинок Цикл
			Если ЭтоАдресВременногоХранилища(АдресХранилищаКартинки.АдресВХранилище) Тогда
				УдалитьИзВременногоХранилища(АдресХранилищаКартинки.АдресВХранилище);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Список.Очистить();
КонецПроцедуры

&НаСервере
Процедура ОчиститьКоличествоТорговыхПредложений()
	
	Для каждого ТекущееПредложение Из Список Цикл
		ТекущееПредложение.ГиперссылкаДобавить = 0;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКоличествоТорговыхПредложений()
	
	Для Каждого СтрокаТовары Из Товары Цикл
		СтрокиСписка = Список.НайтиСтроки(Новый Структура("Идентификатор", СтрокаТовары.Идентификатор));
		Если СтрокиСписка.Количество() Тогда
			СтрокиСписка[0].ГиперссылкаДобавить = СтрокаТовары.Количество;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСуммыСтрокиСписка(СтрокаДанных)
	
	Если Не ЗначениеЗаполнено(СтрокаДанных.Цена)Тогда
		Возврат;
	КонецЕсли;
	
	// Вычисление суммы НДС для основной цены.
	СуммыДаннымСтроки = СуммыПоЦенеКоличеству(
		СтрокаДанных.Цена, 
		1,
		СтрокаДанных.СтавкаНДС,
		СтрокаДанных.ЦенаВключаетНДС);
	
	СтрокаДанных.СуммаНДС = СуммыДаннымСтроки.СуммаНДС;
	
	// Вычисление суммы НДС для цены до скидки.
	Если СтрокаДанных.ЦенаДоСкидки > 0 Тогда
		СуммыДаннымСтроки = СуммыПоЦенеКоличеству(
			СтрокаДанных.ЦенаДоСкидки, 
			1,
			СтрокаДанных.СтавкаНДС,
			СтрокаДанных.ЦенаВключаетНДС);
			
		СтрокаДанных.СуммаНДСЦенаДоСкидки = СуммыДаннымСтроки.СуммаНДС;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СуммыПоЦенеКоличеству(Цена, Количество, СтавкаНДС, ЦенаВключаетНДС)
	
	Результат = Новый Структура;
	
	Результат.Вставить("Сумма",    0);
	Результат.Вставить("СуммаНДС", 0);
	
	РеквизитыСтроки = ОписаниеРеквизитовСтроки();
	
	РеквизитыСтроки.СтавкаНДС       = СтавкаНДС;
	РеквизитыСтроки.Цена            = Цена;
	РеквизитыСтроки.ЦенаВключаетНДС = ЦенаВключаетНДС;
	РеквизитыСтроки.Количество      = Количество;
	
	ТорговыеПредложенияПереопределяемый.ПересчитатьСуммуПоСтроке(РеквизитыСтроки);
	
	Результат.Сумма    = РеквизитыСтроки.СуммаСНДС;
	Результат.СуммаНДС = РеквизитыСтроки.СуммаНДС;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьЦенуСтрокиСписка(СтрокаДанных)
	
	// Объявление переменных.
	МассивСтрокПредставлениеЦены = Новый Массив;
	Приставка = "";
	ОписаниеПересчетаВалюты = "";
	
	ИтоговаяОсновнаяЦена = РассчитатьЦенуСУчетомСтавкиНДС(
		СтрокаДанных.ЦенаВключаетНДС, СтрокаДанных.Цена, СтрокаДанных.СуммаНДС);
	ИтоговаяЦенаДоСкидки = РассчитатьЦенуСУчетомСтавкиНДС(
		СтрокаДанных.ЦенаВключаетНДС, СтрокаДанных.ЦенаДоСкидки, СтрокаДанных.СуммаНДСЦенаДоСкидки);
	
	ПредставлениеЦены = ТорговыеПредложенияСлужебный.ПредставлениеЦены(ИтоговаяОсновнаяЦена);
	Если ИтоговаяЦенаДоСкидки > 0 Тогда
		СтрокаДанных.ПредставлениеЦеныДоСкидки = ТорговыеПредложенияСлужебный.ПредставлениеЦены(ИтоговаяЦенаДоСкидки);
	КонецЕсли;
	
	ИсточникЦен = СтрокаДанных.ЦеныВВалютеПредложения;
	Если ИсточникЦен.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИсточникЦен.Сортировать("Цена Возр");
	
	// Торговое предложение в иностранной валюте
	Если СтрокаДанных.Валюта <> СтрокаДанных.ВалютаПредложения Тогда
		
		Приставка = "~ ";
		
		Цена = ИсточникЦен[0].Цена;
		СуммыСтроки = СуммыПоЦенеКоличеству(Цена, 1, СтрокаДанных.СтавкаНДС, СтрокаДанных.ЦенаВключаетНДС);
		Цена = РассчитатьЦенуСУчетомСтавкиНДС(
			СтрокаДанных.ЦенаВключаетНДС, Цена, СуммыСтроки.СуммаНДС);
		
		ОписаниеПересчетаВалютыШаблон = НСтр("ru = 'Цена %1 %2.
		|Цена в %3 рассчитана автоматически по курсу ЦБ и может не совпадать с курсом
		|поставщика.'");
		ОписаниеПересчетаВалюты = СтрШаблон(
			ОписаниеПересчетаВалютыШаблон, 
			Цена, 
			СтрокаДанных.ВалютаПредложения, 
			СтрокаДанных.Валюта);
		
	КонецЕсли;
	
	// Торговое предложение содержит матрицу цен.
	Если ИсточникЦен.Количество() > 1 Тогда
		Приставка = Приставка + "от ";
	КонецЕсли;
	
	// Торговое предложение по персональной цене.
	Если СтрокаДанных.ПерсональнаяЦена И ИтоговаяОсновнаяЦена > 0 Тогда
		ПредставлениеЦены = ПредставлениеЦены + "*";
	КонецЕсли;
	
	Если Не ПустаяСтрока(Приставка) Тогда
		ПредставлениеЦены = Приставка + ПредставлениеЦены;
	КонецЕсли;
	
	// Сборка текста преставления цены.
	МассивСтрокПредставлениеЦены.Добавить(СокрЛП(ПредставлениеЦены));
	
	Если Не ПустаяСтрока(ОписаниеПересчетаВалюты) Тогда
		МассивСтрокПредставлениеЦены.Добавить("");
		МассивСтрокПредставлениеЦены.Добавить(ОписаниеПересчетаВалюты);
	КонецЕсли;
	
	Если ИсточникЦен.Количество() > 1 Тогда
		
		МассивСтрокПредставлениеЦены.Добавить("");
		
		ОписаниеМатрицыШаблон = НСтр("ru = 'Цена %1 %2 от %3 %4'");
		ИсточникЦен.Сортировать("Количество ВОЗР");
		Для Каждого СтрокаМатрицы Из ИсточникЦен Цикл
			
			СуммыСтроки = СуммыПоЦенеКоличеству(
				СтрокаМатрицы.Цена, 1, СтрокаДанных.СтавкаНДС, СтрокаДанных.ЦенаВключаетНДС);
			
			Цена = РассчитатьЦенуСУчетомСтавкиНДС(
				СтрокаДанных.ЦенаВключаетНДС, СтрокаМатрицы.Цена, СуммыСтроки.СуммаНДС);
			
			ОписаниеМатрицыСтрока = СтрШаблон(
				ОписаниеМатрицыШаблон, 
				Цена, 
				СтрокаДанных.ВалютаПредложения, 
				СтрокаМатрицы.Количество, 
				СтрокаДанных.ЕдиницаИзмерения);
			
			МассивСтрокПредставлениеЦены.Добавить(СокрЛ(ОписаниеМатрицыСтрока));
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если СтрокаДанных.ПерсональнаяЦена И ИтоговаяОсновнаяЦена > 0 Тогда
		МассивСтрокПредставлениеЦены.Добавить("");
		МассивСтрокПредставлениеЦены.Добавить(НСтр("ru = 'Ваша персональная цена установленная поставщиком'"));
	КонецЕсли;
	
	СтрокаДанных.ПредставлениеЦены = СтрСоединить(МассивСтрокПредставлениеЦены, Символы.ПС);
	
КонецПроцедуры

&НаСервере
Функция РассчитатьЦенуСУчетомСтавкиНДС(ЦенаВключаетНДС, Цена, СуммаНДС)
	
	// Расчет представления цены с учетом настроек НДС.
	Если ОтображатьЦеныБезНДС 
		И ЦенаВключаетНДС Тогда
		
		Результат = Цена - СуммаНДС;
		
	ИначеЕсли Не ОтображатьЦеныБезНДС 
		И НЕ ЦенаВключаетНДС Тогда
		
		Результат  = Цена + СуммаНДС;
		
	Иначе
		
		Результат = Цена;
		
	КонецЕсли;
	
	Возврат Окр(Результат, 2, РежимОкругления.Окр15как20);
	
КонецФункции

&НаСервере
Функция ОписаниеРеквизитовСтроки()
	
	Результат = Новый Структура;
	
	Результат.Вставить("СтавкаНДС",       Неопределено);
	Результат.Вставить("Цена",            0);
	Результат.Вставить("ЦенаВключаетНДС", Ложь);
	Результат.Вставить("Количество",      0);
	Результат.Вставить("Сумма",           0);
	Результат.Вставить("СуммаНДС",        0);
	Результат.Вставить("СуммаСНДС",       0);
	Результат.Вставить("ПроцентСкидки",   0);
	Результат.Вставить("СуммаСкидки",     0);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура УдалитьКорзинуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьАдресКорзиныИзЛокальногоХранилища();
	ОчиститьТовары();
	ОбновитьКоличествоТоваровЭлементаКорзины();
	
	ТорговыеПредложенияКлиент.ОповеститьОбИзмененииКорзины(Результат.АдресРезультата, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТовары()
	
	Для Каждого ПозицияТовары Из Товары Цикл
		СтрокаСписка = Список.НайтиСтроки(Новый Структура("Идентификатор", ПозицияТовары.Идентификатор));
		Если СтрокаСписка.Количество() Тогда
			СтрокаСписка[0].ГиперссылкаДобавить = 0;
		КонецЕсли;
	КонецЦикла;
	Товары.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьАдресКорзиныИзЛокальногоХранилища()
	
	ТорговыеПредложенияСлужебный.УдалитьАдресКорзиныИзЛокальногоХранилища();
	
	АдресКомандыДобавитьТовар = "";
	АдресКорзины = "";
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьРежимСортировки(Элементы, Знач НовыйРежим, Знач Валюта, Знач ОтображатьЦеныБезНДС)

	// Установка пометки.
	Для Каждого Элемент Из Элементы.ПодменюСортировка.ПодчиненныеЭлементы Цикл
		Элемент.Пометка = (Элемент.Имя = НовыйРежим);
	КонецЦикла;
	
	УстановитьЗаголовкиПодсказкиКолонокСЦенами(Элементы, Валюта, ОтображатьЦеныБезНДС);
	
	Стрелка = ?(СтрНайти(НовыйРежим, "Возрастание"), "↑", "↓");
	
	Если СтрНайти(НовыйРежим, "Цена") Тогда
		Элементы.СписокПредставлениеЦены.Заголовок = Элементы.СписокПредставлениеЦены.Заголовок + " " + Стрелка;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиПодсказкиКолонокСЦенами(Элементы, Валюта, ОтображатьЦеныБезНДС)
	
	Элементы.СписокГруппаЦены.Заголовок = СтрШаблон("Цены, %1", Валюта);
	
	Если ОтображатьЦеныБезНДС Тогда
		ПредставлениеСтатусаНДС = НСтр("ru = '(без НДС)'");
	Иначе
		ПредставлениеСтатусаНДС = НСтр("ru = '(с НДС)'");
	КонецЕсли;
	
	Элементы.СписокПредставлениеЦены.Заголовок = СтрШаблон(НСтр("ru = 'Цена %1'"), ПредставлениеСтатусаНДС);
	
	ШаблонПодсказки = 
		НСтр("ru = 'Цена %1
					|
					|~  - Цена рассчитана по курсу ЦБ
					|от - Скидки за опт
					|*  - Персональная цена'");
	
	Элементы.СписокПредставлениеЦены.Подсказка = СтрШаблон(ШаблонПодсказки, ПредставлениеСтатусаНДС);
	
	Элементы.СписокЦенаДоСкидки.Заголовок = СтрШаблон(НСтр("ru = 'Цена до скидки %1'"), ПредставлениеСтатусаНДС);
	
	Элементы.СписокЦена.Заголовок = СтрШаблон(НСтр("ru = 'Цена предложения'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТоварыДляЗаказа(СтрокаСписка)
	
	СтрокиТоваров = Товары.НайтиСтроки(Новый Структура("Идентификатор", ИдентификаторОбрабатываемогоПредложения));
	
	ТоварЕстьВКорзине = СтрокиТоваров.Количество();
	
	Если ТоварЕстьВКорзине Тогда
		
		// Корректировка существующей строки
		СтрокаТоваров = СтрокиТоваров[0];
		
	Иначе
		
		// Добавление новой строки
		СтрокаТоваров = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТоваров, СтрокаСписка);
		
	КонецЕсли;
	
	СтрокаТоваров.Количество = СтрокаСписка.ГиперссылкаДобавить;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Гиперссылка списка формы Добавить - предложение не обрабатывается.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокГиперссылкаДобавить.Имя);
	
	ОтборГруппа = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ГиперссылкаДобавить");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ОбрабатываетсяЗаданием");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'В корзину'"));
	
	// Гиперссылка списка формы Добавить - предложение обрабатывается.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокГиперссылкаДобавить.Имя);
	
	ОтборГруппа = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;	
	
	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ГиперссылкаДобавить");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ОбрабатываетсяЗаданием");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'В корзину'"));
	
	// Гиперссылка списка формы Добавить - предложение добавлено в корзину.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокГиперссылкаДобавить.Имя);
	
	ОтборГруппа = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ГиперссылкаДобавить");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ОбрабатываетсяЗаданием");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветАкцента);
	
	// Гиперссылка списка формы Добавить - предложение добавлено в корзину.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокГиперссылкаДобавить.Имя);
	
	ОтборГруппа = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ГиперссылкаДобавить");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ОбрабатываетсяЗаданием");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветАкцента);
	
	// Срок поставки "в наличии".
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСрокПоставки.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.СписокСрокПоставки.ПутьКДанным);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ОтборЭлемента.ПравоеЗначение = 1;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'в наличии'"));
	
	// Срок поставки "по запросу".
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСрокПоставки.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.СписокСрокПоставки.ПутьКДанным);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Неопределено;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'по запросу'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", 
		ГоризонтальноеПоложение.Право);
	
	// Цена в валюте публикации "по запросу".
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокПредставлениеЦены.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.СписокПредставлениеЦены.ПутьКДанным);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'по запросу'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЭДЦвет);
	
	// Цена в валюте поиска "по запросу".
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокЦена.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.СписокЦена.ПутьКДанным);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'по запросу'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЭДЦвет);
	
	// Наличие "нет на складе".
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокНаличиеТекстом.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.СписокНаличие.ПутьКДанным);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЭДЦвет);
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Оформление дерева отборов.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовПредставлениеОтбораГиперссылка.Имя);
	
	ОтборГруппа = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоОтборов.ПредставлениеОтбора");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоОтборов.ФиксированноеЗначение");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылкиБЭД);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля["ПодчеркнутыйШрифтДиалоговБЭД"]);
	
	// Оформление видимости колонок для строки Поставщик.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовПредставлениеОтбораГиперссылка.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоОтборов.ИмяРеквизита");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "Поставщик";
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовПредставлениеОтбора.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоОтборов.ИмяРеквизита");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = "Поставщик";
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Скрытие пустой колонки для списочных отборов.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовПредставлениеОтбораГиперссылка.Имя);
	
	ОтборГруппа = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоОтборов.ЗначениеОтбора");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Неопределено;
	
	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоОтборов.ФиксированноеЗначение");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоОтборов.ФиксированныйОтбор");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Оформление шрифта строки Поставщик.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовПредставлениеОтбора.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоОтборов.ИмяРеквизита");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "Поставщик";
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля["ОбычныйШрифтДиалоговБЭД"]);
	
	// Выделение установленных отборов дерева жирным шрифтом.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовПредставление.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоОтборов.Отбор");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля["ЖирныйШрифтБЭД"]);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьДоступность(Знач Форма, ПолучитьДеревоКатегорий = Ложь)
	
	Элементы = Форма.Элементы;
	ИдентификаторЗаданияОбработкиФильтровРубрикатора = Форма.ИдентификаторЗаданияОбработкиФильтровРубрикатора;
	
	ФоновоеЗаданиеПоиска = Форма["ФоновоеЗаданиеПоиска"];
	ФоновоеЗаданиеПоискаЗавершено = ФоновоеЗаданиеПоиска = Неопределено;
	
	// Установка видимости картинок длительных операций.
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"ДекорацияДлительнаяЗагрузкаКатегорий", 
		"Видимость", 
		Не ФоновоеЗаданиеПоискаЗавершено И ПолучитьДеревоКатегорий);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"ДекорацияДлительнаяЗагрузкаСвойств", 
		"Видимость", 
		Не ПустаяСтрока(ИдентификаторЗаданияОбработкиФильтровРубрикатора));
	
	Элементы.СписокНаименованиеКонтрагента.Видимость = НЕ ЗначениеЗаполнено(Форма["Контрагент"])
		И НЕ ЗначениеЗаполнено(Форма["НаименованиеКонтрагента"]);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборСписка()
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
		Или ТекущиеДанные.ОбрабатываетсяЗаданием Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ПараметрыОткрытия = ПараметрыВыбораСтроки(ТекущиеДанные);
	
	ТекущаяКолонка = Элементы.Список.ТекущийЭлемент;
	
	Если ТекущаяКолонка = Элементы.СписокГиперссылкаДобавить Тогда
		Если ТекущиеДанные.ГиперссылкаДобавить = 0 Тогда
			ТекущиеДанные.ГиперссылкаДобавить = 
				Макс(ТекущиеДанные.МинимальноеКоличество, ТекущиеДанные.КратностьУпаковки);
		КонецЕсли;
	ИначеЕсли ТекущаяКолонка = Элементы.СписокГиперссылкаПоказатьЕще Тогда
		НайтиТорговыеПредложения(Истина, Истина);
	Иначе
		ТорговыеПредложенияКлиент.ОткрытьТорговоеПредложение(ПараметрыОткрытия, ЭтотОбъект, ТекущиеДанные.Идентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыВыбораСтроки(ТекущиеДанные)
	
	Результат = Новый Структура;
	
	Результат.Вставить("Организация",              ОтборОрганизация);
	Результат.Вставить("Идентификатор",            ТекущиеДанные.Идентификатор);
	Результат.Вставить("ИдентификаторЗаказа",      ИдентификаторЗаказа);
	Результат.Вставить("ИдентификаторКонтрагента", ТекущиеДанные.ИдентификаторКонтрагента);
	Результат.Вставить("Валюта",                   Валюта);
	Результат.Вставить("Цена",                     ТекущиеДанные.Цена);
	Результат.Вставить("Наименование",             ТекущиеДанные.НаименованиеНоменклатуры);
	Результат.Вставить("СтавкаНДС",                ТекущиеДанные.СтавкаНДС);
	Результат.Вставить("ЦенаВключаетНДС",          ТекущиеДанные.ЦенаВключаетНДС);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьПредложениеВКорзину(ПараметрыОткрытия)
	Оповестить("ТорговыеПредложения_ИзменитьКоличествоВЗаказе", ПараметрыОткрытия);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СоздатьКорзину(Знач Организация, АдресКорзины, АдресКомандыДобавитьТовар)
	ТорговыеПредложенияСлужебный.СоздатьКорзинуИЗаполнитьКоманды(Организация, АдресКорзины, АдресКомандыДобавитьТовар);
КонецПроцедуры

&НаКлиенте
Функция КоличествоТовараВЗаказе(ИдентификаторПредложения)
	
	Результат = 0;
	
	СтрокаЗаказа = Товары.НайтиСтроки(Новый Структура("Идентификатор", ИдентификаторПредложения));
	Если СтрокаЗаказа.Количество() Тогда
		Результат = СтрокаЗаказа[0].Количество;
	Иначе
		Результат = 0;
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьТоварИзменитьКоличество(ИдентификаторПредложения, Количество)
	
	Если Не ЗначениеЗаполнено(АдресКорзины) Тогда
		
		СоздатьКорзину(ОтборОрганизация, АдресКорзины, АдресКомандыДобавитьТовар);
		
		Если Не ЗначениеЗаполнено(АдресКорзины) Или Не ЗначениеЗаполнено(АдресКомандыДобавитьТовар) Тогда
			Шаблон = НСтр("ru = 'Ошибка при создании корзины. Подробности в журнале регистрации.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(Шаблон);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура("Идентификатор", ИдентификаторПредложения);
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыполненияДействияНадТоваром", ЭтотОбъект, ПараметрыОповещения);
	
	ПараметрыРаботыСТоваром = ТорговыеПредложенияКлиент.ОписаниеПараметровРаботыСТоваромКорзины();
	
	КомандыТорговогоПредложения = ТорговыеПредложенияКлиент.КомандыТорговогоПредложения(
		ИдентификаторПредложения, Товары);
	
	ПараметрыРаботыСТоваром.Организация                    = ОтборОрганизация;
	ПараметрыРаботыСТоваром.АдресКомандыИзменитьКоличество = КомандыТорговогоПредложения.ИзменитьКоличество;
	ПараметрыРаботыСТоваром.Количество                     = Количество;
	ПараметрыРаботыСТоваром.АдресКорзины                   = АдресКорзины;
	ПараметрыРаботыСТоваром.ПрочитатьКорзину               = Истина;
	
	Если Не ЗначениеЗаполнено(ПараметрыРаботыСТоваром.АдресКомандыИзменитьКоличество) Тогда
		ПараметрыРаботыСТоваром.АдресКомандыДобавить              = АдресКомандыДобавитьТовар;
		ПараметрыРаботыСТоваром.ИдентификаторТорговогоПредложения = ИдентификаторПредложения;
	КонецЕсли;
	
	ТорговыеПредложенияКлиент.ВыполнитьДействиеСТоваромКорзины(ПараметрыРаботыСТоваром, ЭтотОбъект, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыполненияДействияНадТоваром(Результат, ДополнительныеПараметры) Экспорт
	
	СтрокиПредложений = Список.НайтиСтроки(ДополнительныеПараметры);
	
	Если ЗначениеЗаполнено(СтрокиПредложений) Тогда
		СтрокиПредложений[0].ИдентификаторЗадания = Неопределено;
		СтрокиПредложений[0].ОбрабатываетсяЗаданием = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ПослеВыполненияДействияНадТоваромНаСервере(ДополнительныеПараметры.Идентификатор, Результат.АдресРезультата);
	
	ТорговыеПредложенияКлиент.ОповеститьОбИзмененииКорзины(Результат.АдресРезультата, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеВыполненияДействияНадТоваромНаСервере(Знач ИдентификаторПредложения, Знач АдресРезультата)
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ЗначениеЗаполнено(Результат.ДанныеКорзины) Тогда
		ЗаполнитьСсылкиКоманд(ИдентификаторПредложения, Результат.ДанныеКорзины);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСсылкиКоманд(ИдентификаторПредложения, ДанныеКорзины)
	
	Для каждого ТекущийЗаказ Из ДанныеКорзины.Заказы Цикл
		Для каждого ТекущийТовар Из ТекущийЗаказ.Товары Цикл
			
			Если ТекущийТовар.Идентификатор <> ИдентификаторПредложения Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТовара = ТоварПоИдентификаторуПредложения(Товары, ИдентификаторПредложения);
			
			Если СтрокаТовара = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			СтрокаТовара.АдресКомандыУдалить            = ТекущийТовар.АдресаКоманд.УдалитьТовар;
			СтрокаТовара.АдресКомандыИзменитьКоличество = ТекущийТовар.АдресаКоманд.УстановитьКоличество;
			
			Возврат;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТоварПоИдентификаторуПредложения(Товары, ИдентификаторПредложения)
	
	СтрокиТоваров = Товары.НайтиСтроки(Новый Структура("Идентификатор", ИдентификаторПредложения));
	
	Результат = Неопределено;
	
	Если ЗначениеЗаполнено(СтрокиТоваров) Тогда
		Результат = СтрокиТоваров[0];
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура СнятьПометкуОтбораСпособДоставки()
	
	СтрокиДереваОтборов = ДеревоОтборов.ПолучитьЭлементы();
	Для Каждого СтрокаОтбора Из СтрокиДереваОтборов Цикл
		Если СтрокаОтбора.Идентификатор = "СпособДоставки" Тогда
			ЭлементыСпискаСпособаДоставки = СтрокаОтбора.ПолучитьЭлементы();
			Для Каждого СтрокаСпособаДоставки Из ЭлементыСпискаСпособаДоставки Цикл
				Если СтрокаСпособаДоставки.Идентификатор = "Доставка" Тогда
					ВозможнаДоставка = Ложь;
				ИначеЕсли СтрокаСпособаДоставки.Идентификатор = "Самовывоз" Тогда
					ВозможенСамовывоз = Ложь;
				КонецЕсли;
				СтрокаСпособаДоставки.Отбор = Ложь;
			КонецЦикла;
			СтрокаОтбора.Отбор = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьПрочитатьНастройкиРегионовПоиска()
	
	БизнесСеть.СохранитьНастройкиРегионовПоиска(
		РегионПоиска,
		"ТорговыеПредложения",
		ОтборОрганизация,
		РегионЗаголовок,
		ИдентификаторыРегионов);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВалютуПоискаПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Товары.Очистить();
		ОбновитьКоличествоТоваровЭлементаКорзины();
		ПоказатьВводЗначения(Новый ОписаниеОповещения("ИзменитьВалютуПоискаЗавершение", ЭтотОбъект), Валюта,
			НСтр("ru = 'Валюта поиска'"), Тип("СправочникСсылка.Валюты"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВалютуПоискаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Валюта = Результат;
		Элементы.ИзменитьВалютуПоиска.Заголовок = СтрШаблон(НСтр("ru = 'Валюта: %1'"), Валюта);
		УстановитьРежимСортировки(Элементы, РежимСортировки, Валюта, ОтображатьЦеныБезНДС);
		НайтиТорговыеПредложения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВыборРегионаПоиска(ОтборСпособДоставки = Ложь)
	
	ОчиститьСообщения();
	
	ПараметрыОткрытия = Новый Структура;
	
	ПараметрыОткрытия.Вставить("РегионРежимОтбора",   РегионПоиска.РежимОтбора);
	ПараметрыОткрытия.Вставить("РегионПредставление", РегионПоиска.Представление);
	ПараметрыОткрытия.Вставить("РегионЗначенияПолей", РегионПоиска.ЗначенияПолей);
	ПараметрыОткрытия.Вставить("Организация",         ОтборОрганизация);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборРегионаЗавершение", ЭтотОбъект, ОтборСпособДоставки);
	
	ОткрытьФорму("Обработка.ТорговыеПредложения.Форма.ВыборРегионаПоиска", ПараметрыОткрытия,
		ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборРегионаЗавершение(Результат, ОтборСпособДоставки) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("РегионРежимОтбора") Тогда
		Результат.Свойство("РегионРежимОтбора"  , РегионПоиска.РежимОтбора);
		Результат.Свойство("РегионПредставление", РегионПоиска.Представление);
		Результат.Свойство("РегионЗначенияПолей", РегионПоиска.ЗначенияПолей);
	КонецЕсли;
	
	СохранитьПрочитатьНастройкиРегионовПоиска();
	
	Если РегионПоиска.РежимОтбора = 0
		И ВозможенСамовывоз + ВозможнаДоставка > 0 Тогда
		
		СнятьПометкуОтбораСпособДоставки();
	КонецЕсли;
	
	НайтиТорговыеПредложения(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФиксированныеОтборыДерева()
	
	ЭлементыОтбора = ДеревоОтборов.ПолучитьЭлементы();
	ЭлементыОтбора.Очистить();
	
	Если Элементы.ОтборПоКонтрагенту.Видимость Тогда
		
		// Поставщик.
		НовыйОтбор = ЭлементыОтбора.Добавить();
		НовыйОтбор.ФиксированныйОтбор            = Истина;
		НовыйОтбор.ФиксированноеЗначение         = Истина;
		НовыйОтбор.Идентификатор                 = "Поставщик";
		НовыйОтбор.ИмяРеквизита                  = "Поставщик";
		НовыйОтбор.Представление                 = НСтр("ru='Поставщик'");
		НовыйОтбор.ОтборДоступен                 = Истина;
		НовыйОтбор.ЗначениеОтбора                = "";
		
	КонецЕсли;
	
	// Цена.
	НовыйОтбор = ЭлементыОтбора.Добавить();
	НовыйОтбор.ФиксированныйОтбор           = Истина;
	НовыйОтбор.Идентификатор                = "Цена";
	НовыйОтбор.ИмяРеквизита                 = "Цена";
	НовыйОтбор.Представление                = НСтр("ru='Цена предложения'");
	НовыйОтбор.ЗначениеОтбора               = 0;
	НовыйОтбор.ФиксированноеЗначение        = Истина;
	НовыйОтбор.ПредставлениеОтбора          = НСтр("ru = '<не задано>'");
	НовыйОтбор.ОтборДоступен                = Истина;
	
	// Со скидкой.
	НовыйОтбор = ЭлементыОтбора.Добавить();
	НовыйОтбор.ФиксированныйОтбор           = Истина;
	НовыйОтбор.Идентификатор                = "СоСкидкой";
	НовыйОтбор.ИмяРеквизита                 = "СоСкидкой";
	НовыйОтбор.Представление                = НСтр("ru='Со скидкой'");
	НовыйОтбор.ЗначениеОтбора               = Истина;
	НовыйОтбор.ФиксированноеЗначение        = Истина;
	
	// С изображением.
	НовыйОтбор = ЭлементыОтбора.Добавить();
	НовыйОтбор.ФиксированныйОтбор           = Истина;
	НовыйОтбор.Идентификатор                = "СИзображением";
	НовыйОтбор.ИмяРеквизита                 = "СИзображением";
	НовыйОтбор.Представление                = НСтр("ru='С изображением'");
	НовыйОтбор.ЗначениеОтбора               = Истина;
	НовыйОтбор.ФиксированноеЗначение        = Истина;
	
	// В наличии.
	НовыйОтбор = ЭлементыОтбора.Добавить();
	НовыйОтбор.ФиксированныйОтбор           = Истина;
	НовыйОтбор.Идентификатор                = "ВНаличии";
	НовыйОтбор.ИмяРеквизита                 = "ВНаличии";
	НовыйОтбор.Представление                = НСтр("ru='В наличии'");
	НовыйОтбор.ЗначениеОтбора               = Истина;
	НовыйОтбор.ФиксированноеЗначение        = Истина;
	
	// Способ доставки.
	НовыйОтбор = ЭлементыОтбора.Добавить();
	НовыйОтбор.ФиксированныйОтбор           = Истина;
	НовыйОтбор.Идентификатор                = "СпособДоставки";
	НовыйОтбор.ИмяРеквизита                 = "СпособДоставки";
	НовыйОтбор.Представление                = НСтр("ru='Способ доставки'");
	НовыйОтбор.ЗначениеОтбора               = "Список";
	
	НоваяСтрока = НовыйОтбор.ПолучитьЭлементы().Добавить();
	НоваяСтрока.ФиксированныйОтбор           = Истина;
	НоваяСтрока.Идентификатор                = "Доставка";
	НоваяСтрока.ИмяРеквизита                 = "Доставка";
	НоваяСтрока.Представление                = НСтр("ru='доставка'");
	НоваяСтрока.ЗначениеОтбора               = "Список";
	
	НоваяСтрока = НовыйОтбор.ПолучитьЭлементы().Добавить();
	НоваяСтрока.ФиксированныйОтбор           = Истина;
	НоваяСтрока.Идентификатор                = "Самовывоз";
	НоваяСтрока.ИмяРеквизита                 = "Самовывоз";
	НоваяСтрока.Представление                = НСтр("ru='самовывоз'");
	НоваяСтрока.ЗначениеОтбора               = "Список";
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтборИОбновитьСписок()
	
	СтрокиДереваОтборов = ДеревоОтборов.ПолучитьЭлементы();
	Для Каждого СтрокаОтбора Из СтрокиДереваОтборов Цикл
		Идентификатор = СтрокаОтбора.Идентификатор;
		Если СтрокаОтбора.ФиксированныйОтбор Тогда
			Если Идентификатор = "Поставщик" Тогда
				Если РазрешитьИзменениеКонтрагента Тогда
					ОчиститьДанныеПоКонтрагенту(ЭтотОбъект);
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		СтрокаОтбора.Отбор = Ложь;
		Если СтрокаОтбора.ЗначениеОтбора = "Список" Тогда
			ЭлементыСпискаОтборов = СтрокаОтбора.ПолучитьЭлементы();
			Для Каждого ЭлементОтбора Из ЭлементыСпискаОтборов Цикл
				ЭлементОтбора.Отбор = Ложь;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ВозможнаДоставка  = Ложь;
	ВозможенСамовывоз = Ложь;
	СтрокаПоиска      = "";
	
	НайтиТорговыеПредложения(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборКонтрагента(ДополнительныеПараметры)
	
	ПараметрыОткрытия   = Новый Структура("ТекущаяСтрока, РежимВыбора", Контрагент, Истина);
	
	ОбработкаОповещения = Новый ОписаниеОповещения("ДеревоОтборовПриИзмененииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ИмяФормыВыбора = БизнесСетьВызовСервера.ИмяФормыВыбораПоОпределяемомуТипу("КонтрагентБЭД");
	ОчиститьСообщения();
	ОткрытьФорму(ИмяФормыВыбора, ПараметрыОткрытия, ЭтотОбъект,,,, ОбработкаОповещения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДанныеИзображенияПоСсылке(Знач АдресВСервисе, АдресВХранилище)
	
	ОтносительныеАдресаКартинок = Истина;
	
	Если СтрНайти(АдресВСервисе, "http") Тогда
		ОтносительныеАдресаКартинок = Ложь;
	КонецЕсли;
	
	АдресВХранилище = ТорговыеПредложенияСлужебный.АдресИзображенияВХранилище(
		АдресВСервисе, ОтносительныеАдресаКартинок);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыКонтрагента(Знач Контрагент)
	Возврат ОбщегоНазначенияБЭД.ДанныеЮрФизЛица(Контрагент);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьДанныеПоКонтрагенту(Форма)
	Форма.Контрагент               = Неопределено;
	Форма.НаименованиеКонтрагента  = "";
	Форма.ИННКонтрагента           = "";
	Форма.КППКонтрагента           = "";
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПоказИзображений(Форма)
	Элементы = Форма.Элементы;
	Элементы.ПоказатьИзображения.Пометка    = Форма.ПоказатьИзображения;
	Элементы.ГруппаИзображение.Видимость    = Форма.ПоказатьИзображения;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатИзмененияФиксированногоОтбора(ТекущаяСтрокаДерева, ДанныеОтбораИзменены, Знач Результат)
	
	Идентификатор = ТекущаяСтрокаДерева.Идентификатор;
	
	Если Идентификатор = "Поставщик" Тогда
		
		ОчиститьДанныеПоКонтрагенту(ЭтотОбъект);
		
		Если ТипЗнч(Результат) = Тип("Булево") Тогда
			
			Если Результат Тогда // Поставлена галочка отбора или вручную введено наименование поставщика.
				
				НаименованиеКонтрагента = ТекущаяСтрокаДерева.ПредставлениеОтбора;
				ИННКонтрагента = ТекущаяСтрокаДерева.ЗначениеОтбора;
				
				Если Контрагент = Неопределено Тогда
					// Ввели наименование поставщика вручную.
					ЗаполнитьДанныеКонтрагентаПоВведенномуПолю(НаименованиеКонтрагента, ИННКонтрагента, Контрагент);
				КонецЕсли;
				
				ЗаполнитьЭлементОтбораПоПоставщику(ДеревоОтборов, НаименованиеКонтрагента, ИННКонтрагента)
				
			Иначе // Сняли галочку отбора
				
				// Поле выбора поставщика пустое
				Если НЕ ЗначениеЗаполнено(ТекущаяСтрокаДерева.ПредставлениеОтбора) Тогда
					
					ТекущаяСтрокаДерева.ПредставлениеБыстрогоОтбора = "";
					
					ПредставлениеОтбора = Элементы.ДеревоОтборовПредставлениеОтбора;
					ТекущаяСтрокаДерева.Отбор               = Ложь;
					ПредставлениеОтбора.ТолькоПросмотр      = Истина;
					ПредставлениеОтбора.ПодсказкаВвода      = НСтр("ru = 'ИНН, наименование - от 3 симв.'");
					Если ЗначениеЗаполнено(ТекущаяСтрокаДерева.ЗначениеОтбора) Тогда
						ТекущаяСтрокаДерева.ЗначениеОтбора      = НаименованиеКонтрагента;
					Иначе
						ДанныеОтбораИзменены = Ложь;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе // Тип ОпределяемыйТип.КонтрагентБЭД или Строка
			
			ТекущаяСтрокаДерева.ПредставлениеБыстрогоОтбора = "";
			
			Контрагент = Результат;
			ПараметрыКонтрагента = ПараметрыКонтрагента(Результат);
			НаименованиеКонтрагента = ПараметрыКонтрагента.Наименование;
			ИННКонтрагента = ПараметрыКонтрагента.Инн;
			КППКонтрагента = ПараметрыКонтрагента.КПП;
			
			ТекущаяСтрокаДерева.Отбор = Истина;
			
			ЗаполнитьЭлементОтбораПоПоставщику(ДеревоОтборов, НаименованиеКонтрагента, ИННКонтрагента)
			
		КонецЕсли;
		
	ИначеЕсли Идентификатор = "СпособДоставки" Тогда
		
		СтрокиСпособаДоставки = ТекущаяСтрокаДерева.ПолучитьЭлементы();
		Для Каждого СтрокаСпособаДоставки Из СтрокиСпособаДоставки Цикл
			Если СтрокаСпособаДоставки.Идентификатор = "Доставка" Тогда
				ВозможнаДоставка = ТекущаяСтрокаДерева.Отбор;
			ИначеЕсли СтрокаСпособаДоставки.Идентификатор = "Самовывоз" Тогда
				ВозможенСамовывоз = ТекущаяСтрокаДерева.Отбор;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Идентификатор = "Доставка" Тогда
		
		ВозможнаДоставка = ТекущаяСтрокаДерева.Отбор;
		
	ИначеЕсли Идентификатор = "Самовывоз" Тогда
		
		ВозможенСамовывоз = ТекущаяСтрокаДерева.Отбор;
		
	ИначеЕсли Идентификатор = "Цена" Тогда
		
		ДанныеОтбораИзменены = Результат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеКонтрагентаПоВведенномуПолю(НаименованиеКонтрагента, ИННКонтрагента, Контрагент)
	
	Контрагент = ТорговыеПредложенияСлужебный.НайтиКонтрагентаПоИНН(НаименованиеКонтрагента);
	Если Контрагент.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЮрФизЛица = ОбщегоНазначенияБЭД.ДанныеЮрФизЛица(Контрагент);
	ИННКонтрагента = ДанныеЮрФизЛица.ИНН;
	НаименованиеКонтрагента = ДанныеЮрФизЛица.Наименование;
	
КонецПроцедуры

#Область РаботаСКартинкойПредложения

&НаКлиенте
Процедура ПоказатьКартинкуПредложения()
	
	АдресКартинки = "";
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если Не Элементы.ПоказатьИзображения.Пометка 
		Или ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВидимостьПереключателей = ОбщегоНазначенияКлиентСервер.ЗначениеСвойстваЭлементаФормы(
		Элементы, "ГруппаУправлениеИзображениями", "Видимость");
	
	Если ВидимостьПереключателей Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "ГруппаУправлениеИзображениями", "Видимость", Не ВидимостьПереключателей);
	КонецЕсли;
	
	Если ТекущиеДанные.АдресаКартинок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ПоказатьКартинкуПредложенияПродолжение", 0.5, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКартинкуПредложенияПродолжение()
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ВзрослаяКатегория Тогда
		
		ИмяПроцедуры = "ПоказатьКартинкуПредложенияОтветНаВопрос";
		ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(ИмяПроцедуры, ЭтотОбъект);
		ТорговыеПредложенияСлужебныйКлиент.ПользователюБольше18Лет(ЭтотОбъект, ОписаниеОповещенияОЗавершении);
		
	Иначе
		
		ПоказатьКартинкуПредложенияЗавершение();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКартинкуПредложенияОтветНаВопрос(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Значение = КодВозвратаДиалога.Да Тогда
		
		ПоказатьКартинкуПредложенияЗавершение();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКартинкуПредложенияЗавершение()
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоКартинок = ТекущиеДанные.АдресаКартинок.Количество();
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ГруппаУправлениеИзображениями", "Видимость", КоличествоКартинок > 1);
	
	ПереключитьИзображение();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьИзображение()
	
	АдресаКартинок = Элементы.Список.ТекущиеДанные.АдресаКартинок;
	Если АдресаКартинок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(АдресКартинки) Тогда
		ИндексКартинки = 0;
	Иначе
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("АдресВХранилище", АдресКартинки);
		ЭлементСписка = АдресаКартинок.НайтиСтроки(ПараметрыОтбора);
		ИндексКартинки = АдресаКартинок.Индекс(ЭлементСписка[0]);
		
		Если СледующееИзображение Тогда
			Если ИндексКартинки = АдресаКартинок.Количество() - 1 Тогда
				ИндексКартинки = 0;
			Иначе
				ИндексКартинки = ИндексКартинки + 1;
			КонецЕсли;
		Иначе
			Если ИндексКартинки = 0 Тогда
				ИндексКартинки = АдресаКартинок.Количество() - 1;
			Иначе
				ИндексКартинки = ИндексКартинки - 1;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	СледующаяСтрокаКартинки = АдресаКартинок[ИндексКартинки];
	Если Не ЭтоАдресВременногоХранилища(СледующаяСтрокаКартинки.АдресВХранилище) Тогда
		ДанныеИзображенияПоСсылке(СледующаяСтрокаКартинки.АдресВСервисе, СледующаяСтрокаКартинки.АдресВХранилище);
	КонецЕсли;
	АдресКартинки = СледующаяСтрокаКартинки.АдресВХранилище;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ОбработатьПараметрыФормы()
	
	// Установка полученных параметров и отборов.
	Параметры.Свойство("ИдентификаторКатегории",          ТекущаяКатегория);
	Параметры.Свойство("ОтборНаименование",               ОтборНаименование);
	Параметры.Свойство("ОтборНоменклатураСервиса",        ОтборНоменклатураСервиса);
	Параметры.Свойство("ОтборНоменклатураСервисаПредставление", ОтборНоменклатураСервисаПредставление);
	Параметры.Свойство("ОтборХарактеристикаСервиса",      ОтборХарактеристикаСервиса);
	Параметры.Свойство("Валюта",                          Валюта);
	
	ПараметрКонтрагент = Параметры.Контрагент;
	Если ЗначениеЗаполнено(ПараметрКонтрагент) Тогда
		ЗаполнитьДанныеПоКонтрагенту(ПараметрКонтрагент, ЭтотОбъект);
	КонецЕсли;
	
	РазрешитьИзменениеКонтрагента = 
		Не Параметры.ФиксированныйОтборПоКонтрагенту Или Не ЗначениеЗаполнено(ПараметрКонтрагент);
	Элементы.ОтборПоКонтрагенту.Видимость = РазрешитьИзменениеКонтрагента;
	
	Если Параметры.Свойство("АдресПараметровОтбора") Тогда
		ЗаполнитьПараметрыОтборов(Параметры.АдресПараметровОтбора);
	КонецЕсли;
	
	Если Параметры.Свойство("ОтборШтрихКоды") И ЗначениеЗаполнено(Параметры.ОтборШтрихКоды) Тогда
		ОтборШтрихКоды.ЗагрузитьЗначения(Параметры.ОтборШтрихКоды);
	КонецЕсли;
	
	Если Параметры.Свойство("ОтборАртикулы") И ЗначениеЗаполнено(Параметры.ОтборАртикулы) Тогда
		ОтборАртикулы.ЗагрузитьЗначения(Параметры.ОтборАртикулы);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборНаименование) Тогда
		СтрокаПоиска = ОтборНаименование;
	КонецЕсли;
	
	ИдентификаторЗаказа = Параметры.ИдентификаторЗаказа;
	Если НЕ ЗначениеЗаполнено(Параметры.ИдентификаторЗаказа) Тогда
		ИдентификаторЗаказа = УникальныйИдентификатор;
	ИначеЕсли Не ПустаяСтрока(Параметры.АдресТоваровВХранилище) Тогда
		ТоварыОбъект = БизнесСеть.ПолучитьУдалитьИзВременногоХранилища(АдресТоваровВХранилище);
		Если ЗначениеЗаполнено(ТоварыОбъект) Тогда
			Товары.Загрузить(ТоварыОбъект);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ФоновоеЗаданиеПоискаОтменено(ДополнительныеПараметры)
	
	Отменено = 
		ДополнительныеПараметры <> Неопределено
		И ФоновоеЗаданиеПоиска <> Неопределено 
		И ДополнительныеПараметры.Свойство("ИдентификаторЗаданияПоиска")
		И ФоновоеЗаданиеПоиска.ИдентификаторЗадания <> ДополнительныеПараметры.ИдентификаторЗаданияПоиска;
	
	Возврат Отменено;
	
КонецФункции

&НаСервере
Процедура УстановитьЗаголовокИзменитьПредставлениеЦеныВСписке()
	
	Направление = "";
	Для Каждого Кнопка Из Элементы.ПодменюСортировка.ПодчиненныеЭлементы Цикл
		Если Кнопка.Пометка Тогда
			Направление = Кнопка.Имя;
		КонецЕсли;
	КонецЦикла;
	УстановитьРежимСортировки(Элементы, Направление, Валюта, ОтображатьЦеныБезНДС);
	
	Для Каждого ТекущаяСтрокаТоваров Из Список Цикл
		Если Не ПустаяСтрока(ТекущаяСтрокаТоваров.ГиперссылкаПоказатьЕще) Тогда
			Продолжить;
		КонецЕсли;
		УстановитьЦенуСтрокиСписка(ТекущаяСтрокаТоваров);
	КонецЦикла;
	
КонецПроцедуры

#Область Отборы

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДанныеПоКонтрагенту(ПараметрКонтрагент, Форма)
	
	ОчиститьДанныеПоКонтрагенту(Форма);
	
	Если ТипЗнч(ПараметрКонтрагент) = Тип("Структура") Тогда
		ПараметрКонтрагент.Свойство("Ссылка",        Форма.Контрагент);
		ПараметрКонтрагент.Свойство("Наименование",  Форма.НаименованиеКонтрагента);
		ПараметрКонтрагент.Свойство("ИНН",           Форма.ИННКонтрагента);
		ПараметрКонтрагент.Свойство("КПП",           Форма.КППКонтрагента);
	Иначе
		Форма.Контрагент = ПараметрКонтрагент;
		ПараметрыКонтрагента = ПараметрыКонтрагента(ПараметрКонтрагент);
		Форма.НаименованиеКонтрагента = ПараметрыКонтрагента.ПолноеНаименование;
		Форма.ИННКонтрагента = ПараметрыКонтрагента.ИНН;
		Форма.КППКонтрагента = ПараметрыКонтрагента.Кпп;
	КонецЕсли;
	
	ЗаполнитьЭлементОтбораПоПоставщику(Форма.ДеревоОтборов, Форма.НаименованиеКонтрагента, Форма.ИННКонтрагента);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьЭлементОтбораПоПоставщику(ДеревоОтборов, НаименованиеКонтрагента, ИННКонтрагента)
	
	ЭлементОтбора = ДеревоОтборов.ПолучитьЭлементы()[0];
	ЭлементОтбора.Отбор               = Истина;
	
	Если ПустаяСтрока(ИННКонтрагента) Тогда
		ЭлементОтбора.ЗначениеОтбора      = "";
		ЭлементОтбора.ПредставлениеОтбора = НаименованиеКонтрагента;
		ПредставлениеБыстрогоОтбора = НаименованиеКонтрагента;
	Иначе
		ЭлементОтбора.ЗначениеОтбора      = ИННКонтрагента;
		ЭлементОтбора.ПредставлениеОтбора = ИННКонтрагента;
		ПредставлениеБыстрогоОтбора = 
			СтрШаблон("%1 (%2)", НаименованиеКонтрагента, ИННКонтрагента);
	КонецЕсли;
	
	ЭлементОтбора.ПредставлениеБыстрогоОтбора = ПредставлениеБыстрогоОтбора;
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеБыстрымОтбором

&НаКлиенте
Процедура УдалитьНеФиксированныеОтборыДереваОтборов()
	
	МодульРаботаСНоменклатуройСлужебныйКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСНоменклатуройСлужебныйКлиент");
	МодульРаботаСНоменклатуройСлужебныйКлиент.УдалитьНеФиксированныеОтборыДереваОтборов(ДеревоОтборов);
	
КонецПроцедуры

&НаКлиенте
Процедура УбратьВидимостьБыстрыхОтборов(ВыбраноОтборов, ОбновитьОтборы = Ложь)
	
	Для Счетчик = ВыбраноОтборов По 9 Цикл
		
		ЭлементОчиститьОтбор = Элементы["ОчиститьОтбор_" + Счетчик];
		
		БыстрыйОтбор = БыстрыеОтборы.НайтиПоЗначению(ЭлементОчиститьОтбор.Заголовок);
		Если БыстрыйОтбор = Неопределено ИЛИ ОбновитьОтборы Тогда
			
			ЭлементЗаголовокОтбора = Элементы["ЗаголовокОтбора_" + Счетчик];
			ЭлементЗаголовокОтбора.Видимость = Ложь;
			ЭлементОчиститьОтбор.Видимость   = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЭлементЗаголовокОтбора = Элементы["ЗаголовокОтбора_Еще"];
	ЭлементЗаголовокОтбора.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовокОтбораОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Найти(Элемент.Имя, "ЗаголовокОтбора_") Тогда
		
		СтрокиДереваОтборов = ДеревоОтборов.ПолучитьЭлементы();
		Для Каждого СтрокаОтбора Из СтрокиДереваОтборов Цикл
			Если СтрокаОтбора.Идентификатор = НавигационнаяСсылкаФорматированнойСтроки Тогда
				Элементы.ДеревоОтборов.ТекущаяСтрока = СтрокаОтбора.ПолучитьИдентификатор();
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ Элементы.ПоказатьСкрытьОтборы.Пометка Тогда
			УстановитьВидимостьОтборов(Ложь, Элементы);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Нажатие(Элемент)
	
	// Отработка нажатия на маркеры текущего отбора.
	
	Если Найти(Элемент.Имя, "ОчиститьОтбор_") Тогда
		
		ИдентификаторОтбора = Элемент.Заголовок;
		СтрокиДереваОтборов = ДеревоОтборов.ПолучитьЭлементы();
		
		ОчиститьОтбор = Ложь;
		
		Если ИдентификаторОтбора = "Артикул" Тогда
			ОтборАртикулы.Очистить();
			ОчиститьОтбор = Истина;
		ИначеЕсли ИдентификаторОтбора = "Штрихкод" Тогда
			ОтборШтрихКоды.Очистить();
			ОчиститьОтбор = Истина;
		ИначеЕсли ИдентификаторОтбора = "1СНоменклатура" Тогда
			ОтборНоменклатураСервиса = "";
			ОтборНоменклатураСервисаПредставление = "";
			ОчиститьОтбор = Истина;
		Иначе
			
			Для Каждого СтрокаОтбора Из СтрокиДереваОтборов Цикл
				
				Если СтрокаОтбора.Идентификатор = ИдентификаторОтбора Тогда
					
					Если СтрокаОтбора.ФиксированныйОтбор Тогда
						Если ИдентификаторОтбора = "Поставщик" Тогда
							Если НЕ РазрешитьИзменениеКонтрагента Тогда
								Возврат;
							Иначе
								ОчиститьДанныеПоКонтрагенту(ЭтотОбъект);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;

					СтрокаОтбора.Отбор = Ложь;
					Если СтрокаОтбора.ЗначениеОтбора = "Список" Тогда
						СтрокиЗначенийОтбора = СтрокаОтбора.ПолучитьЭлементы();
						Для Каждого СтрокаЗначения Из СтрокиЗначенийОтбора Цикл
							СтрокаЗначения.Отбор = Ложь;
						КонецЦикла;
					КонецЕсли;
					
					ОчиститьОтбор = Истина;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ОчиститьОтбор Тогда
			НайденныйЭлемент = БыстрыеОтборы.НайтиПоЗначению(ИдентификаторОтбора);
			Если НайденныйЭлемент <> Неопределено Тогда
				БыстрыеОтборы.Удалить(НайденныйЭлемент);
			КонецЕсли;
		КонецЕсли;
		
		НайтиТорговыеПредложения(Истина);
		
	ИначеЕсли Найти(Элемент.Имя, "ЗаголовокОтбора_Еще") Тогда
		
		Если НЕ Элементы.ПоказатьСкрытьОтборы.Пометка Тогда
			УстановитьВидимостьОтборов(Ложь, Элементы);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЭлементыФормыБыстрыеОтборы()
	
	ВыбраноОтборов = 0;
	
	Для Каждого ЭлементОтбора Из БыстрыеОтборы Цикл
		
		Если ЭлементОтбора.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыбраноОтборов < 10 Тогда
			
			ЭлементЗаголовокОтбора = Элементы["ЗаголовокОтбора_" + ВыбраноОтборов];
			
			Представление = ЭлементОтбора.Представление;
			ПредставлениеОтбора = Сред(Представление, СтрНайти(Представление, ":") + 1);
			Если СтрДлина(ПредставлениеОтбора) > 85 Тогда
				ПредставлениеЗаголовка = Лев(ПредставлениеОтбора, 82) + "...";
			Иначе
				ПредставлениеЗаголовка = ПредставлениеОтбора;
			КонецЕсли;
			
			ШаблонЭлементаЗаголовкаОтбора = 
				НСтр("ru = '%3<a href=""%1""><span style=""color: ЦветСтиляТекстаФормы"">%2</span></a>'", 
					ОбщегоНазначенияКлиент.КодОсновногоЯзыка());
			
			ПоясняющийТекст = "";
			Если СтрНайти(Представление, ":") > 0 Тогда
				ПоясняющийТекстШаблон = НСтр("ru = '<span style=""color: ПоясняющийТекст"">%1</span>'", 
					ОбщегоНазначенияКлиент.КодОсновногоЯзыка());
				ПоясняющийТекст = СтрШаблон(ПоясняющийТекстШаблон, Лев(Представление, СтрНайти(Представление, ":")));
			КонецЕсли;
			
			ШаблонЭлементаЗаголовкаОтбора = СтрЗаменить(ШаблонЭлементаЗаголовкаОтбора, "%3", ПоясняющийТекст);
			
			ЭлементЗаголовокОтбора.Заголовок = СтроковыеФункцииКлиент.ФорматированнаяСтрока(
				ШаблонЭлементаЗаголовкаОтбора, 
				ЭлементОтбора.Значение, 
				ПредставлениеЗаголовка);
			
			ЭлементЗаголовокОтбора.Видимость = Истина;
			
			ЭлементОчиститьОтбор = Элементы["ОчиститьОтбор_" + ВыбраноОтборов];
			ЭлементОчиститьОтбор.Заголовок = ЭлементОтбора.Значение;
			ЭлементОчиститьОтбор.Видимость = Истина;
			
			ВыбраноОтборов = ВыбраноОтборов + 1;
			
		КонецЕсли;
		ЭлементОтбора.Пометка = Истина;
	КонецЦикла;
	
	Если ВыбраноОтборов < БыстрыеОтборы.Количество() Тогда
		ЭлементЗаголовокОтбора = Элементы["ЗаголовокОтбора_Еще"];
		ЭлементЗаголовокОтбора.Заголовок = СтрШаблон(НСтр("ru = 'И еще %1'"), БыстрыеОтборы.Количество() - ВыбраноОтборов);
		ЭлементЗаголовокОтбора.Видимость = Истина;
	Иначе
		УбратьВидимостьБыстрыхОтборов(ВыбраноОтборов, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКатегориями

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьОтборов(Знач ВидимостьОтборов, Элементы)
	
	Элементы.ПоказатьСкрытьОтборы.Пометка       = НЕ ВидимостьОтборов;
	Элементы.ГруппаОтборов.Видимость            = НЕ ВидимостьОтборов;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДополнительныеРеквизитыКатегории()
	
	ПараметрыЗапроса = ТорговыеПредложенияСлужебныйКлиент.НовыйПараметрыЗапросаХарактеристикКатегорий();
	ПараметрыЗапроса.ИдентификаторКатегории = ТекущаяКатегория;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ПараметрыЗапроса.Контрагенты.Добавить(Контрагент);
	КонецЕсли;
	
	ПолучитьПараметрыИзДереваОтборов(ПараметрыЗапроса);
	
	// Регионы поиска.
	Если ЗначениеЗаполнено(РегионПоиска) И РегионПоиска.РежимОтбора = 2 Тогда
		
		ЭлементКоллекции = ИдентификаторыРегионов[0];
		
		ДанныеРегионаПоиска = Новый Структура;
		ДанныеРегионаПоиска.Вставить("КодСтраны", ЭлементКоллекции.КодСтраны);
		ДанныеРегионаПоиска.Вставить("Идентификатор", ЭлементКоллекции.Идентификатор);
		ДанныеРегионаПоиска.Вставить("ДляСамовывоза", ЭлементКоллекции.ДляСамовывоза);
		ДанныеРегионаПоиска.Вставить("ДляДоставки", ЭлементКоллекции.ДляДоставки);
		
		ПараметрыЗапроса.РегионыПоиска.Добавить(ДанныеРегионаПоиска);
		
	КонецЕсли;
	
	ДлительнаяОперацияКатегории = ТорговыеПредложенияВызовСервера.ПолучитьХарактеристикиКатегорииВФоне(
		ПараметрыЗапроса, 
		УникальныйИдентификатор, 
		ИдентификаторЗаданияОбработкиФильтровРубрикатора);
	
	ИдентификаторЗаданияОбработкиФильтровРубрикатора = ДлительнаяОперацияКатегории.ИдентификаторЗадания;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить(
		"ИдентификаторЗаданияОбработкиФильтровРубрикатора", ИдентификаторЗаданияОбработкиФильтровРубрикатора);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПолучитьСвойстваЛистовойКатегорииЗавершение", 
		ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Ложь;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперацияКатегории, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКатегорииСервиса(ИдентификаторКатегории = Неопределено)
	
	ПараметрыОповещения = Новый Структура;
	
	ПараметрыОповещения.Вставить("ИдентификаторКатегории", ИдентификаторКатегории);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьКатегорииСервисаЗавершение", ЭтотОбъект, ПараметрыОповещения);
	
	ТорговыеПредложенияКлиент.ПолучитьКатегорииТорговыхПредложенийВФоне(ЭтотОбъект, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКатегорииСервисаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;
	
	БизнесСетьСлужебныйКлиент.ВывестиСообщенияФоновогоЗадания(Результат, Отказ);
	
	Если Отказ Или Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьКатегорииСервисаНаСервере(Результат);
	
	ИдентификаторКатегории = ДополнительныеПараметры.ИдентификаторКатегории;
	Если ЗначениеЗаполнено(ИдентификаторКатегории) Тогда
		Элементы.Категории.ТекущаяСтрока = 
			ИдентификаторСтрокиПоИдентификаторуКатегории(Категории.ПолучитьЭлементы(), ИдентификаторКатегории);
		ТекущаяКатегория = ИдентификаторКатегории;
	КонецЕсли;
	
	РазвернутьДеревоКатегорий();
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоКатегорий()
	
	Если Не Элементы.ПоказатьСкрытьКатегории.Пометка Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоКатегорий = Категории.ПолучитьЭлементы();
	
	Если ДеревоКатегорий.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Элементы.Категории.Развернут(ДеревоКатегорий[0].ПолучитьИдентификатор()) Тогда
		Элементы.Категории.Развернуть(ДеревоКатегорий[0].ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьКатегорииСервисаНаСервере(Результат)
	
	ДеревоКатегорий = БизнесСеть.ПолучитьУдалитьИзВременногоХранилища(Результат.АдресРезультата);
	
	Если ТипЗнч(ДеревоКатегорий) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ДеревоКатегорий, "Категории");
	
	Элементы.ДекорацияДлительнаяЗагрузкаКатегорий.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Функция ИдентификаторСтрокиПоИдентификаторуКатегории(КоллекцияСтрок, ИдентификаторКатегории)
	
	Результат = 0;
	
	Если КоллекцияСтрок.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для каждого ЭлементКоллекции Из КоллекцияСтрок Цикл
		
		Если ЭлементКоллекции.Идентификатор = ИдентификаторКатегории Тогда
			Результат = ЭлементКоллекции.ПолучитьИдентификатор();
			Прервать;
		Иначе
			
			Результат = ИдентификаторСтрокиПоИдентификаторуКатегории(
				ЭлементКоллекции.ПолучитьЭлементы(), ИдентификаторКатегории);
				
			Если Результат <> 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#Область ХарактеристикиКатегорий

&НаКлиенте
Процедура ПолучитьСвойстваЛистовойКатегорииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ДополнительныеПараметры = Неопределено
		И ДополнительныеПараметры.Свойство("ИдентификаторЗаданияОбработкиФильтровРубрикатора")
		И Не ИдентификаторЗаданияОбработкиФильтровРубрикатора 
			= ДополнительныеПараметры.ИдентификаторЗаданияОбработкиФильтровРубрикатора Тогда
		Возврат; // Данное задание отменено или не является последним
	КонецЕсли;
	
	УдалитьНеФиксированныеОтборыДереваОтборов();
	
	Отказ = Ложь;
	
	// Вывод сообщений из фонового задания.
	ТорговыеПредложенияКлиент.ОбработатьОшибкиФоновогоЗадания(Результат, Отказ);
	Если Отказ Или Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьСвойстваЛистовойКатегории(Результат);
	
	ИдентификаторЗаданияОбработкиФильтровРубрикатора = "";
	
	УстановитьВидимостьДоступность(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСвойстваЛистовойКатегории(Результат)
	
	Если Не ЗначениеЗаполнено(Результат.АдресРезультата)
		Или Не ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда
		Возврат;
	КонецЕсли;
	
	АдресРезультата = Результат.АдресРезультата;
	
	// Проверка результата поиска.
	Если Результат.Статус = "Выполнено" Тогда
		
		ДанныеСервиса = ПолучитьИзВременногоХранилища(АдресРезультата);
		УдалитьИзВременногоХранилища(АдресРезультата);
		
		Если ДанныеСервиса = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ХарактеристикиКатегорийИзДанныхСервиса(ДанныеСервиса);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикиКатегорийИзДанныхСервиса(ДополнительныеРеквизитыКатегорий)
	
	ЭлементыОтбора = ДеревоОтборов.ПолучитьЭлементы();
	Для Каждого РеквизитКатегорий Из ДополнительныеРеквизитыКатегорий Цикл
		
		Если РеквизитКатегорий.СписокВыбора = Неопределено Тогда
			
			Если РеквизитКатегорий.Наименование = "ДиапазонЦен" Тогда
				
				Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
					
					Если ЭлементОтбора.ИмяРеквизита = "Цена" Тогда
						
						ЭлементОтбора.МинимальноеЗначение = РеквизитКатегорий.МинимальноеЗначение;
						ЭлементОтбора.МаксимальноеЗначение = РеквизитКатегорий.МаксимальноеЗначение;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Продолжить;
				
			КонецЕсли;
			
			ДобавитьЭлементОтбораИнтервал(ЭлементыОтбора, РеквизитКатегорий);
			
		ИначеЕсли РеквизитКатегорий.СписокВыбора.Количество() > 0 Тогда
			
			ТипЗначенияВыбора = ТипЗнч(РеквизитКатегорий.СписокВыбора[0]);
			Если ТипЗначенияВыбора = Тип("Булево") Тогда
				
				ДобавитьЭлементОтбораБулево(ЭлементыОтбора, РеквизитКатегорий);
				
			ИначеЕсли ТипЗначенияВыбора = Тип("Структура") Тогда
				
				ДобавитьЭлементОтбораСписок(ЭлементыОтбора, РеквизитКатегорий);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭлементОтбораИнтервал(ЭлементыОтбора, РеквизитКатегорий)
	
	НовыйОтбор = ЭлементыОтбора.Добавить();
	НовыйОтбор.ФиксированныйОтбор           = Ложь;
	НовыйОтбор.Идентификатор                = РеквизитКатегорий.Идентификатор;
	НовыйОтбор.ИмяРеквизита                 = РеквизитКатегорий.Наименование;
	НовыйОтбор.Представление                = РеквизитКатегорий.Наименование;
	НовыйОтбор.ФиксированноеЗначение        = Истина;// Форма ввода будет содержать подсказки.
	НовыйОтбор.ИнтервалОт                   = РеквизитКатегорий.ИнтервалОт;
	НовыйОтбор.ИнтервалДо                   = РеквизитКатегорий.ИнтервалДо;
	НовыйОтбор.МинимальноеЗначение          = РеквизитКатегорий.МинимальноеЗначение;
	НовыйОтбор.МаксимальноеЗначение         = РеквизитКатегорий.МаксимальноеЗначение;
	
	Если ТипЗнч(РеквизитКатегорий.МинимальноеЗначение) = Тип("Число") Тогда
		НовыйОтбор.ЗначениеОтбора               = 0;
	Иначе
		НовыйОтбор.ЗначениеОтбора               = Дата(1, 1, 1);
	КонецЕсли;
	
	НовыйОтбор.ПредставлениеОтбора          = НСтр("ru = '<не задано>'");
	НовыйОтбор.ОтборДоступен                = Истина;
	НовыйОтбор.Отбор                        = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭлементОтбораБулево(ЭлементыОтбора, РеквизитКатегорий)
	
	НовыйОтбор = ЭлементыОтбора.Добавить();
	НовыйОтбор.ФиксированныйОтбор           = Ложь;
	НовыйОтбор.Идентификатор                = РеквизитКатегорий.Идентификатор;
	НовыйОтбор.ИмяРеквизита                 = РеквизитКатегорий.Наименование;
	НовыйОтбор.Представление                = РеквизитКатегорий.Наименование;
	НовыйОтбор.ЗначениеОтбора               = Истина;
	НовыйОтбор.ОтборДоступен                = Истина;
	НовыйОтбор.Отбор                        = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭлементОтбораСписок(ЭлементыОтбора, РеквизитКатегорий)
	
	НовыйОтбор = ЭлементыОтбора.Добавить();
	НовыйОтбор.ФиксированныйОтбор           = Ложь;
	НовыйОтбор.Идентификатор                = РеквизитКатегорий.Идентификатор;
	НовыйОтбор.ИмяРеквизита                 = РеквизитКатегорий.Наименование;
	НовыйОтбор.Представление                = РеквизитКатегорий.Наименование;
	НовыйОтбор.ЗначениеОтбора               = "Список";
	НовыйОтбор.ОтборДоступен                = Истина;
	НовыйОтбор.Отбор                        = Ложь;
	
	Для Каждого ЗначениеВыбора Из РеквизитКатегорий.СписокВыбора Цикл
		
		НоваяСтрока = НовыйОтбор.ПолучитьЭлементы().Добавить();
		НоваяСтрока.ФиксированныйОтбор           = Ложь;
		НоваяСтрока.ЗначениеОтбора               = "Список";
		
		Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
			
			НоваяСтрока.Идентификатор             = ЗначениеВыбора.Идентификатор;
			НоваяСтрока.ИмяРеквизита              = ЗначениеВыбора.Наименование;
			НоваяСтрока.Представление             = ЗначениеВыбора.Наименование;
			
		ИначеЕсли ТипЗнч(ЗначениеВыбора) = Тип("Булево") И ЗначениеВыбора Тогда
			
			НоваяСтрока.ИмяРеквизита              = "Да";
			НоваяСтрока.Представление             = "Да";
			
		ИначеЕсли ТипЗнч(ЗначениеВыбора) = Тип("Булево") И Не ЗначениеВыбора Тогда
			
			НоваяСтрока.ИмяРеквизита              = "Нет";
			НоваяСтрока.Представление             = "Нет";
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ЗаполнитьЗаголовокФормы()
	
	// Заголовок формы.
	Если ЗначениеЗаполнено(ТекущаяКатегория) Тогда
		Заголовок = СтрШаблон(НСтр("ru = 'Торговые предложения - %1'"), ПредставлениеКатегории);
	Иначе
		Заголовок = НСтр("ru = 'Торговые предложения 1С:Бизнес-сеть'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПоискТорговыхПредложений

&НаСервере
Функция ОбработатьРезультатПоиска(АдресРезультата)
	
	Результат = БизнесСеть.ПолучитьУдалитьИзВременногоХранилища(АдресРезультата);
	
	Если Результат = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеСервиса = Новый Структура;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Результат, "Список") 
		И ТипЗнч(Результат.Список) = Тип("ТаблицаЗначений") Тогда
		
		МассивПредложений  = Новый Массив;
		Для Каждого ЭлементКоллекции Из Результат.Список Цикл
			
			// Проверка единицы измерения, если есть упаковка.
			Если ЗначениеЗаполнено(ЭлементКоллекции.НаименованиеУпаковки)
				И ЭлементКоллекции.НаименованиеУпаковки <> ЭлементКоллекции.ЕдиницаИзмерения Тогда
				ЭлементКоллекции.ЕдиницаИзмерения = ЭлементКоллекции.НаименованиеУпаковки;
			КонецЕсли;
			
			// Проверка возврата описания.
			Если ЗначениеЗаполнено(ЭлементКоллекции.Заголовок) Тогда
				ЭлементКоллекции.НаименованиеНоменклатуры = ЭлементКоллекции.Заголовок;
			КонецЕсли;
			
			СтруктураПредложений = НовыйСтруктураСпискаПредложения();
			ЗаполнитьЗначенияСвойств(СтруктураПредложений, ЭлементКоллекции, , "АдресаКартинок");
			
			// Заполнение сумм НДС.
			РассчитатьСуммыСтрокиСписка(СтруктураПредложений);
			
			// Вычисление минимального количества заказа.
			СтруктураПредложений.МинимальноеКоличество = 
				МинимальноеКоличествоДляЗаказа(ЭлементКоллекции.ЦеныВВалютеПредложения);
			
			// Кратность упаковки для заказа.
			Если Не ЗначениеЗаполнено(СтруктураПредложений.КратностьУпаковки) Тогда
				СтруктураПредложений.КратностьУпаковки = 1;
			КонецЕсли;
			
			// Заполнение персональной цены.
			ЗаполнитьПерсональнуюЦену(СтруктураПредложений, ЭлементКоллекции.ЦелевыеКонтрагенты);
			
			// Заполнение адресов картинок, для отображения в списке торговых предложений.
			ЗаполнитьАдресаКартинок(СтруктураПредложений, ЭлементКоллекции.АдресаКартинок);
			
			ВзрослаяКатегория(СтруктураПредложений, ЭлементКоллекции.РодительскиеКатегории);
			
			МассивПредложений.Добавить(СтруктураПредложений);
			
		КонецЦикла;
		
		Если МассивПредложений.Количество() Тогда
			ДанныеСервиса.Вставить("МассивПредложений", МассивПредложений);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Результат, "Страницы") Тогда
		ДанныеСервиса.Вставить("Страницы", Результат.Страницы);
	КонецЕсли;
	
	ДанныеСервиса.Вставить("ДеревоКатегорий", Результат.ДеревоКатегорий);
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Результат, "ДанныеКорзины") Тогда
		ДанныеСервиса.Вставить("ДанныеКорзины",   Результат.ДанныеКорзины);
	КонецЕсли;
	
	Возврат ДанныеСервиса;
	
КонецФункции

// Взрослая категория.
// 
// Параметры:
//  СтруктураПредложений - см. НовыйСтруктураСпискаПредложения
//  РодительскиеКатегории - Массив из Строка
//
&НаСервере
Процедура ВзрослаяКатегория(СтруктураПредложений, РодительскиеКатегории)
	
	Если Не ЗначениеЗаполнено(РодительскиеКатегории) Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторВзрослойКатегории = "12207";
	Если РодительскиеКатегории.Найти(ИдентификаторВзрослойКатегории) <> Неопределено Тогда
		СтруктураПредложений.ВзрослаяКатегория = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Конструкторы

// Новый параметры запроса поиска найти торговые предложения.
// 
// Возвращаемое значение:
//  Структура:
// * ЦенаОт - Число
// * ЦенаДо - Число
// * СИзображением - Булево
// * ВНаличии - Булево
// * СоСкидкой - Булево
// * Свойства - Массив из Строка
// * ПолучитьДеревоКатегорий - Булево
// * ПолучитьДанныеКорзины - Булево
// * Наименование - Строка
//
&НаКлиентеНаСервереБезКонтекста
Функция НовыйПараметрыЗапросаПоискаНайтиТорговыеПредложения()
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ЦенаОт", 0);
	ПараметрыЗапроса.Вставить("ЦенаДо", 0);
	ПараметрыЗапроса.Вставить("СИзображением", Ложь);
	ПараметрыЗапроса.Вставить("ВНаличии", Ложь);
	ПараметрыЗапроса.Вставить("СоСкидкой", Ложь);
	ПараметрыЗапроса.Вставить("Свойства", Новый Массив);
	ПараметрыЗапроса.Вставить("ПолучитьДеревоКатегорий", Ложь);
	ПараметрыЗапроса.Вставить("ПолучитьДанныеКорзины", Ложь);
	ПараметрыЗапроса.Вставить("Наименование", "");
	
	Возврат ПараметрыЗапроса
	
КонецФункции

&НаСервере
Функция НовыйСтруктураСпискаПредложения()
	
	СтруктураПредложений = Новый Структура;
	
	СтруктураПредложений.Вставить("Идентификатор",            "");
	СтруктураПредложений.Вставить("НаименованиеНоменклатуры", "");
	СтруктураПредложений.Вставить("ИдентификаторКатегории",   "");
	СтруктураПредложений.Вставить("ПредставлениеЦены",        "");
	СтруктураПредложений.Вставить("ИдентификаторКонтрагента", "");
	СтруктураПредложений.Вставить("НаименованиеКонтрагента",  "");
	СтруктураПредложений.Вставить("АртикулПоставщика",        "");
	СтруктураПредложений.Вставить("ЕдиницаИзмерения",         "");
	СтруктураПредложений.Вставить("СрокПоставки",             0);
	СтруктураПредложений.Вставить("ИННКонтрагента",           "");
	СтруктураПредложений.Вставить("КППКонтрагента",           "");
	СтруктураПредложений.Вставить("КодЕдиницыИзмерения",      "");
	СтруктураПредложений.Вставить("Наличие",                   0);
	СтруктураПредложений.Вставить("ПредставлениеОстатков",    "");
	СтруктураПредложений.Вставить("Количество",               0);
	СтруктураПредложений.Вставить("СтавкаНДС",                "");
	СтруктураПредложений.Вставить("ЦенаВключаетНДС",          Ложь);
	СтруктураПредложений.Вставить("СуммаНДС",                 0);
	СтруктураПредложений.Вставить("СуммаНДСЦенаДоСкидки",     0);
	СтруктураПредложений.Вставить("Цена",                     0);
	СтруктураПредложений.Вставить("Валюта",                   Неопределено);
	СтруктураПредложений.Вставить("КратностьУпаковки",        0);
	СтруктураПредложений.Вставить("МинимальноеКоличество",    0);
	СтруктураПредложений.Вставить("ВалютаПредложения",        Неопределено);
	СтруктураПредложений.Вставить("ЦенаДоСкидки",             0);
	СтруктураПредложений.Вставить("ПерсональнаяЦена",         Ложь);
	СтруктураПредложений.Вставить("СнятоСПродажи",            Ложь);
	СтруктураПредложений.Вставить("ВзрослаяКатегория",        Ложь);
	
	// Изображения торгового предложения.
	АдресаКартинок = Новый ТаблицаЗначений;
	АдресаКартинок.Колонки.Добавить("АдресВСервисе", Новый ОписаниеТипов("Строка"));
	АдресаКартинок.Колонки.Добавить("АдресВХранилище", Новый ОписаниеТипов("Строка"));
	СтруктураПредложений.Вставить("АдресаКартинок", АдресаКартинок);
	
	// Матрица цен в валюте предложения.
	ЦеныВВалютеПредложения = Новый ТаблицаЗначений;
	ЦеныВВалютеПредложения.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ЦеныВВалютеПредложения.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число"));
	ЦеныВВалютеПредложения.Колонки.Добавить("ЦенаДоСкидки", Новый ОписаниеТипов("Число"));
	ЦеныВВалютеПредложения.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка"));
	СтруктураПредложений.Вставить("ЦеныВВалютеПредложения", ЦеныВВалютеПредложения);
	
	Возврат СтруктураПредложений;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Инициализация

#Если Клиент Тогда
	СледующееИзображение = Истина;
#КонецЕсли

#КонецОбласти