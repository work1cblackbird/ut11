
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НавигационнаяСсылка = СтрШаблон("e1cib/app/%1", ИмяФормы);
	
	УстановитьУсловноеОформление();
	
	Если Не ТорговыеПредложения.ПравоПоискаТорговыхПредложений(Истина) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Параметры.ПараметрыКоманды <> Неопределено Тогда
		ЗаполнитьПоКонтексту(Параметры.ПараметрыКоманды);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Валюта) Тогда
		ТорговыеПредложенияПереопределяемый.ПолучитьВалютуРегламентированногоУчета(Валюта);
	КонецЕсли;
	Элементы.ИзменитьВалютуПоиска.Заголовок = СтрШаблон(НСтр("ru = 'Валюта: %1'"), Валюта);
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Параметры.Свойство("Организация", Организация);
	КонецЕсли;
	
	// Заполнение сохраненными настройками.
	НастройкиПоискаПоТоварам = ТорговыеПредложения.СохраненныеНастройкиПоискаПоТоварам();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиПоискаПоТоварам);
	
	ИдентификаторЗаказа = УникальныйИдентификатор;
	
	ОбновитьНадписьПодобраноТоваров(ЭтотОбъект);
	
	ИмяСправочника = ОбщегоНазначенияБЭД.ИмяПрикладногоСправочника("Номенклатура");
	ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка." + ИмяСправочника);
	Элементы.СписокНоменклатура.ОграничениеТипа = ОграничениеТипа;
	
	ИмяСправочника = ОбщегоНазначенияБЭД.ИмяПрикладногоСправочника("ХарактеристикиНоменклатуры");
	ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка." + ИмяСправочника);
	Элементы.СписокХарактеристика.ОграничениеТипа = ОграничениеТипа;
	
	ИмяСправочникаЕдиницыИзмерения = ОбщегоНазначенияБЭД.ИмяПрикладногоСправочника("ЕдиницыИзмерения");
	ОграничениеТипаИмяСправочникаЕдиницыИзмерения = Новый ОписаниеТипов("Строка, СправочникСсылка." + ИмяСправочникаЕдиницыИзмерения);
	Элементы.СписокНоменклатураЕдиницаИзмерения.ОграничениеТипа = ОграничениеТипаИмяСправочникаЕдиницыИзмерения;
	Элементы.СписокУпаковка.ОграничениеТипа = ОграничениеТипаИмяСправочникаЕдиницыИзмерения;
	
	// Проверка владельца упаковки.
	Если Метаданные.Справочники[ИмяСправочникаЕдиницыИзмерения].Владельцы.Количество() Тогда
		НовыйМассив = Новый Массив;
		Для каждого ВладелецУпаковки Из Метаданные.Справочники[ИмяСправочникаЕдиницыИзмерения].Владельцы Цикл
			НовыйМассив.Добавить(Новый СвязьПараметраВыбора(ВладелецУпаковки.Имя, "Элементы.Список.ТекущиеДанные.Номенклатура"));
		КонецЦикла;
		НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.СписокУпаковка.СвязиПараметровВыбора = НовыеСвязи;
	КонецЕсли;
	
	БизнесСеть.ЗаполнитьРегионыПоиска(
		"ТорговыеПредложения",
		Организация,
		РегионПоиска, 
		Элементы.ФормаВыборРегиона.Заголовок, 
		ИдентификаторыРегионов);

	ТорговыеПредложенияПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект);
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	ДополнительныеПараметры = Новый Структура("ИмяФормы");
	ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, ИсточникВыбора);
	ОбработкаВыбораНаСервере(ВыбранноеЗначение, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ТорговыеПредложения_ИзменитьКоличествоВЗаказе"
		И Параметр.ИдентификаторЗаказа = ИдентификаторЗаказа Тогда 

		ИдентификаторКонтрагента = СтрЗаменить(Параметр.ИдентификаторКонтрагента, "/", "_");
		
		Отбор = Новый Структура("Идентификатор", ИдентификаторКонтрагента);
		Если Контрагенты.НайтиСтроки(Отбор).Количество() = 0 Тогда 
			Возврат;
		КонецЕсли;
		
		Отбор = Новый Структура;
		Отбор.Вставить("Идентификатор_" + ИдентификаторКонтрагента,
			Параметр.Идентификатор);
			
		Если Параметр.Свойство("Номенклатура") Тогда
			Отбор.Вставить("Номенклатура", Параметр.Номенклатура);
		КонецЕсли;
		Если Параметр.Свойство("Характеристика") Тогда
			Отбор.Вставить("Характеристика", Параметр.Характеристика);
		КонецЕсли;
		
		ПоискСтроки = Список.НайтиСтроки(Отбор);
		Если ПоискСтроки.Количество() Тогда
			ТекущаяСтрока = ПоискСтроки[0];
			Если ТекущаяСтрока["Пометка_" + ИдентификаторКонтрагента] = Ложь Тогда
				ТекущаяСтрока["Пометка_" + ИдентификаторКонтрагента] = Истина;
				Элемент = Новый Структура;
				Элемент.Вставить("Имя", "Пометка_" + ИдентификаторКонтрагента);
				Подключаемый_ПометкаПриИзменении(Элемент, ТекущаяСтрока);
			КонецЕсли;
		КонецЕсли;
	
	ИначеЕсли ИмяСобытия = "ТорговыеПредложения_УдалитьИзЗаказа"
		И Параметр.ИдентификаторЗаказа = ИдентификаторЗаказа Тогда
		
		Для каждого Идентификатор Из Параметр.ИдентификаторыПредложений Цикл 
			Отбор = Новый Структура;
			Отбор.Вставить("Идентификатор", Идентификатор);
			ПоискСтроки = Список.НайтиСтроки(Отбор);
			Если ПоискСтроки.Количество() Тогда
				ТекущаяСтрока = ПоискСтроки[0];
				Для каждого СтрокаТаблицы Из Контрагенты Цикл 
					ТекущаяСтрока["Пометка_" + СтрокаТаблицы.Идентификатор] = Ложь;
					Элемент = Новый Структура;
					Элемент.Вставить("Имя", "Пометка_" + СтрокаТаблицы.Идентификатор);
					Подключаемый_ПометкаПриИзменении(Элемент, ТекущаяСтрока);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ИмяСобытия = "ТорговыеПредложения_ОтправленыЗаказыТоваров"
		И Параметр.Свойство("ИдентификаторЗаказа")
		И Параметр.ИдентификаторЗаказа = ИдентификаторЗаказа Тогда
		
		// Идентификаторы контрагентов для удаления колонок.
		ИдентификаторыКонтрагентов = Новый Массив;
		
		// Очистка товаров.
		СписокУдаляемыхСтрок = Новый Массив;
		Для каждого СтрокаСписка Из Список Цикл
			Если СтрокаСписка.Пометка Тогда
				СписокУдаляемыхСтрок.Добавить(СтрокаСписка);
				Если ИдентификаторыКонтрагентов.Найти(СтрокаСписка.ИдентификаторКонтрагента) = Неопределено Тогда
					ИдентификаторыКонтрагентов.Добавить(СтрокаСписка.ИдентификаторКонтрагента);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого СтрокаСписка Из СписокУдаляемыхСтрок Цикл
			Список.Удалить(Список.Индекс(СтрокаСписка));
		КонецЦикла;
		ИнформацияПоТовару = "";
		
		ПересчитатьСводныеДанные(Ложь, ИдентификаторыКонтрагентов);
		
	ИначеЕсли ИмяСобытия = "КопированиеСтрокВБуферОбмена" ИЛИ ИмяСобытия = "ПодборПроизведен" Тогда
		
		ОбработкаОповещенияНаСервере(ИмяСобытия, Параметр);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияНаСервере(ИмяСобытия, Параметр)
	
	ТорговыеПредложенияПереопределяемый.ОбработатьОповещение(ИмяСобытия, Параметр, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Список.Количество() Тогда
		НайтиТорговыеПредложения();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КомандаПодсказкиНажатие(Элемент)
	
	// Приглашение поставщиков в сервис.
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимПриглашения", "Поставщики");
	ПараметрыОткрытия.Вставить("Организация", Организация);
	ОчиститьСообщения();
	ОткрытьФорму("Обработка.БизнесСеть.Форма.ОтправкаПриглашенийКонтрагентам", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияПоТоваруНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ЗаполненыЗначенияПоиска = Ложь;
	
	Если ПоискПоНоменклатуреСервиса И ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторНоменклатурыСервиса) Тогда
		
		ПараметрыОткрытия.Вставить("ОтборНоменклатураСервиса",   ТекущиеДанные.ИдентификаторНоменклатурыСервиса);
		ПараметрыОткрытия.Вставить("ОтборНоменклатураСервисаПредставление", ТекущиеДанные.Номенклатура);
		ПараметрыОткрытия.Вставить("ОтборХарактеристикиСервиса", ТекущиеДанные.ИдентификаторХарактеристикиСервиса);
		ЗаполненыЗначенияПоиска = Истина;
		
	Иначе
		
		Если ПоискПоНаименованию И ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
			ПараметрыОткрытия.Вставить("ОтборНаименование", Строка(ТекущиеДанные.Номенклатура));
			ЗаполненыЗначенияПоиска = Истина;
		КонецЕсли;
		
		Если ПоискПоАртикулу И ЗначениеЗаполнено(ТекущиеДанные.Артикул) Тогда
			ПараметрыОткрытия.Вставить("ОтборАртикул", ТекущиеДанные.Артикул);
			ЗаполненыЗначенияПоиска = Истина;
		КонецЕсли;
		
		Если ПоискПоШтрихКоду Тогда
			Если ЗначениеЗаполнено(ТекущиеДанные.Штрихкоды) Тогда
				ПараметрыОткрытия.Вставить("ОтборШтрихКоды", ТекущиеДанные.Штрихкоды);
				ЗаполненыЗначенияПоиска = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыОткрытия.Вставить("Валюта", Валюта);
	
	Если ЗаполненыЗначенияПоиска = Ложь Тогда
		ПоказатьДиалогОшибкиПоиска(Истина);
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();

	// Дополнительно выполняется оповещение, необходимо если форма уже открыта ранее.
	Оповестить("ТорговыеПредложения_ПоискПоОтборам_Обновить", ПараметрыОткрытия);
	
	ТорговыеПредложенияКлиент.ОткрытьФормуПоискаПоОтборам(ПараметрыОткрытия);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если СтрНайти(Поле.Имя, "_") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные = Элементы.Список.ТекущиеДанные;
		КлючКонтрагента = Сред(Поле.Имя, СтрНайти(Поле.Имя,"_") + 1);
		Идентификатор = ТекущиеДанные["Идентификатор_" + КлючКонтрагента];
		Если Не ЗначениеЗаполнено(Идентификатор) Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ИдентификаторЗаказа", ИдентификаторЗаказа);
		ПараметрыФормы.Вставить("Идентификатор",       Идентификатор);
		ПараметрыФормы.Вставить("Номенклатура",        ТекущиеДанные.Номенклатура);
		ПараметрыФормы.Вставить("Характеристика",      ТекущиеДанные.Характеристика);
		ПараметрыФормы.Вставить("Валюта",              Валюта);
		ПараметрыФормы.Вставить("Наименование",        ТекущиеДанные["НаименованиеНоменклатуры_" + КлючКонтрагента]);
		ОчиститьСообщения();
		ТорговыеПредложенияКлиент.ОткрытьТорговоеПредложение(ПараметрыФормы, ЭтотОбъект, Идентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Контрагенты.Количество() И ТекущиеДанные.КоличествоПредложений > 0 Тогда
		
		// Формирование надписи о всех торговых предложениях по строке.
		МинЦена = ?(ТекущиеДанные.МинимальнаяЦена = 0, НСтр("ru = 'по запросу'"), ТекущиеДанные.МинимальнаяЦена);
		МаксЦена = ?(ТекущиеДанные.МаксимальнаяЦена = 0, НСтр("ru = 'по запросу'"), ТекущиеДанные.МаксимальнаяЦена);
		
		Если МинЦена = МаксЦена Тогда
			Если ТипЗнч(МаксЦена) = Тип("Число") Тогда
				ДиапазонЦен = СтрШаблон(НСтр("ru = 'цена %1 %2'"), МинЦена, Валюта);
			Иначе // по запросу.
				ДиапазонЦен = СтрШаблон(НСтр("ru = 'цена %1'"), МинЦена);
			КонецЕсли;
		Иначе
			ДиапазонЦен = СтрШаблон(НСтр("ru = 'цены %1 - %2 %3'"), МинЦена,
				МаксЦена, Валюта);
		КонецЕсли;
		
		МинСрокПоставки = ?(ТекущиеДанные.МинимальныйСрокПоставки = 0, НСтр("ru = 'по запросу'"), ТекущиеДанные.МинимальныйСрокПоставки);
		МаксСрокПоставки = ?(ТекущиеДанные.МаксимальныйСрокПоставки = 0, НСтр("ru = 'по запросу'"), ТекущиеДанные.МаксимальныйСрокПоставки);
		Если МинСрокПоставки = МаксСрокПоставки Тогда
			Если МинСрокПоставки = 0 Тогда
				ДиапазонПоставки = НСтр("ru = 'товар в наличии'");
			ИначеЕсли ТипЗнч(МаксСрокПоставки) = Тип("Число") Тогда
				ДиапазонПоставки = СтрШаблон(НСтр("ru = 'поставка %1 дн.'"), МинСрокПоставки);
			Иначе // по запросу.
				ДиапазонПоставки = СтрШаблон(НСтр("ru = 'поставка %1'"), МинСрокПоставки);
			КонецЕсли;
		Иначе
			ДиапазонПоставки = СтрШаблон(НСтр("ru = 'поставка %1 - %2 дн.'"), МинСрокПоставки,
				МаксСрокПоставки);
		КонецЕсли;
		
		ИнформацияПоТовару = СтрШаблон(НСтр("ru = 'Всего предложений %1, %2, %3'"), ТекущиеДанные.КоличествоПредложений,
			ДиапазонЦен, ДиапазонПоставки);
		
	Иначе
		
		ИнформацияПоТовару = "";
		
	КонецЕсли;
	
	// Показывать подсказку, если не заполнена информация по товару.
	ВидимостьПодсказки = ПустаяСтрока(ИнформацияПоТовару);
	Элементы.КартинкаПодсказки.Видимость = ВидимостьПодсказки;
	Элементы.КомандаПодсказки.Видимость = ВидимостьПодсказки;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПослеУдаления(Элемент)
	
	ОчиститьРезультатыПошлогоПоиска();
	НайтиТорговыеПредложения();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, РеквизитыНоменклатуры(ТекущиеДанные.Номенклатура));
		ОчиститьРезультатыПошлогоПоиска();
		АвтовыборПоСценарию("СнятьПометки");
		НайтиТорговыеПредложения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторКонтрагента) Тогда
		ТекущиеДанные.Сумма = ТекущиеДанные.Количество * ТекущиеДанные["Цена_" + ТекущиеДанные.ИдентификаторКонтрагента];
		ОбновитьНадписьПодобраноТоваров(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПометкаПриИзменении(Элемент, ТекущиеДанные)
	
	Идентификатор = Сред(Элемент.Имя, 9);
	Если ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные = Элементы.Список.ТекущиеДанные;	
	КонецЕсли;
	
	Для каждого СтрокаКонтрагента Из Контрагенты Цикл
		
		Если СтрокаКонтрагента.Идентификатор = Идентификатор Тогда
			
			// Если строка не заполнена, то сбрасываем флаг выбора.
			Если ТекущиеДанные["Пометка_" + СтрокаКонтрагента.Идентификатор] = Истина
				И ПустаяСтрока(ТекущиеДанные["Идентификатор_" + СтрокаКонтрагента.Идентификатор]) Тогда
				ТекущиеДанные["Пометка_" + СтрокаКонтрагента.Идентификатор] = Ложь;
			КонецЕсли;
			
			ТекущиеДанные.Пометка = ТекущиеДанные["Пометка_" + СтрокаКонтрагента.Идентификатор];
			Если ТекущиеДанные.Пометка Тогда
				// Установка флага колонки поставщика и увеличение показателя "к заказу".
				Цена = ТекущиеДанные["Цена_" + СтрокаКонтрагента.Идентификатор];
				Если ЗначениеЗаполнено(Цена) Тогда
					ТекущиеДанные.Сумма = ТекущиеДанные.Количество * Цена;
				КонецЕсли;
				СтрокаКонтрагента.КЗаказу = СтрокаКонтрагента.КЗаказу + 1;
				ТекущиеДанные.ИдентификаторКонтрагента = СтрокаКонтрагента.Идентификатор;
				ТекущиеДанные.Идентификатор = ТекущиеДанные["Идентификатор_" + СтрокаКонтрагента.Идентификатор];
			Иначе
				// Снятие флага с колонки поставщика и уменьшение показателя "к заказу".
				Если ЗначениеЗаполнено(ТекущиеДанные.Идентификатор) Тогда
					ТекущиеДанные.Идентификатор = "";
					СтрокаКонтрагента.КЗаказу = СтрокаКонтрагента.КЗаказу - 1;
				КонецЕсли;
				ТекущиеДанные.Сумма = 0;
				ТекущиеДанные.ИдентификаторКонтрагента = Неопределено;
				ТекущиеДанные.СтавкаНДС = Неопределено;
				ТекущиеДанные.ЦенаВключаетНДС = Ложь;
			КонецЕсли;
			
		Иначе
			
			// Снятие флага с колонки поставщика и уменьшение показателя "к заказу".
			Если ТекущиеДанные["Пометка_" + СтрокаКонтрагента.Идентификатор] = Истина Тогда
				ТекущиеДанные["Пометка_" + СтрокаКонтрагента.Идентификатор] = Ложь;
				СтрокаКонтрагента.КЗаказу = СтрокаКонтрагента.КЗаказу - 1;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьНадписьПодобраноТоваров(ЭтотОбъект);
	УстановитьОтборПоНеобработанным();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПоставщики

&НаКлиенте
Процедура ПоставщикиПометкаПриИзменении(Элемент)
	
	// Снятие видимости колонок.
	Для каждого СтрокаКонтрагентов Из Контрагенты Цикл
		Видимость = СтрокаКонтрагентов.Пометка;
		Элементы["ГруппаКонтрагента_" + СтрокаКонтрагентов.Идентификатор].Видимость = Видимость;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПараметрыОткрытия = БизнесСетьКлиентСервер.ОписаниеИдентификацииОрганизацииКонтрагентов();
	ПараметрыОткрытия.ИНН = Элемент.ТекущиеДанные.ИНН;
	ПараметрыОткрытия.КПП = Элемент.ТекущиеДанные.КПП;
	БизнесСетьСлужебныйКлиент.ОткрытьПрофильУчастника(ПараметрыОткрытия);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НайтиПредложения(Команда)
	
	НайтиТорговыеПредложения();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОтправитьЗаказы(Команда)
	
	ОткрытьФормуОформленияЗаказов();
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьВыбранные(Команда)
	
	Пометка = Не Элементы.ФормаСкрытьВыбранные.Пометка;
	Элементы.ФормаСкрытьВыбранные.Пометка = Пометка;
	
	УстановитьОтборПоНеобработанным(Пометка);
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПоставщиков(Команда)
	
	Пометка = Не Элементы.ФормаСкрытьПоставщиков.Пометка;
	Элементы.ФормаСкрытьПоставщиков.Пометка = Пометка;
	Элементы.ГруппаПраво.Видимость = Не Пометка;

КонецПроцедуры

&НаКлиенте
Процедура АвтоподборПоМинимальнойЦене(Команда)
	
	АвтовыборПоСценарию("Цена");
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоподборПоСрокам(Команда)
	
	АвтовыборПоСценарию("СрокПоставки");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИсходящиеДокументы(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимИсходящихДокументов", Истина);
	ОчиститьСообщения();
	ОткрытьФорму("Обработка.БизнесСеть.Форма.ДокументыОбмена", ПараметрыОткрытия);

КонецПроцедуры

&НаКлиенте
Процедура СнятьПометки(Команда)
	
	АвтовыборПоСценарию("СнятьПометки");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборРегиона(Команда)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	
	ПараметрыОткрытия.Вставить("РегионРежимОтбора",   РегионПоиска.РежимОтбора);
	ПараметрыОткрытия.Вставить("РегионПредставление", РегионПоиска.Представление);
	ПараметрыОткрытия.Вставить("РегионЗначенияПолей", РегионПоиска.ЗначенияПолей);
	ПараметрыОткрытия.Вставить("Организация",         Организация);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборРегионаЗавершение", ЭтотОбъект);
	
	ОчиститьСообщения();
	
	ОткрытьФорму("Обработка.ТорговыеПредложения.Форма.ВыборРегионаПоиска", 
		ПараметрыОткрытия, 
		ЭтотОбъект,,,, 
		ОписаниеОповещения, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПереопределяемаяКоманда(Команда)
	
	ТорговыеПредложенияКлиентПереопределяемый.ОбработатьКомандуФормы(ЭтотОбъект, Команда);
	ОбновитьНадписьПодобраноТоваров(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПоиск(Команда)
	
	Обработчик = Новый ОписаниеОповещения("НастройкаПоискаПоТоварамЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.ТорговыеПредложения.Форма.НастройкаПоискаПоТоварам",,,,,,
		Обработчик, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВалютуПоиска(Команда)
	
	Если Список.НайтиСтроки(Новый Структура("Пометка", Истина)).Количество() Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ИзменитьВалютуПоискаПродолжение", ЭтотОбъект),
			НСтр("ru = 'При изменении валюты, будут удалены подобранные товары и выполнен новый поиск торговых предложений.'"),
			РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ИзменитьВалютуПоискаПродолжение(КодВозвратаДиалога.ОК, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура НастройкаПоискаПоТоварамЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "НастройкиИзменены", Ложь) Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат);
		
		// Сброс количество предложений, загруженных ранее
		Для каждого ЭлементКоллекции Из Список Цикл
			ЭлементКоллекции.КоличествоПредложений = 0;
		КонецЦикла;
		ИнформацияПоТовару = "";
		
		НайтиТорговыеПредложения();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиТорговыеПредложенияВФоне(Знач ИдентификаторФормы, Отказ)
	
	ОчиститьРезультатыПошлогоПоиска();
	
	ПараметрыЗапроса = ТорговыеПредложенияСлужебный.НовыеПараметрыПоискаТорговыхПредложенийПоСписку();
	ЗаполнитьПараметрыЗапроса(ПараметрыЗапроса, Отказ);
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Задание = Новый Структура("ИмяПроцедуры, Наименование, ПараметрыПроцедуры");
	Задание.Наименование = НСтр("ru = '1С:Бизнес-сеть. Поиск торговых предложений по списку.'");
	Задание.ИмяПроцедуры = "ТорговыеПредложенияСлужебный.ПоискТорговыхПредложенийПоСпискуВФоне";
	Задание.ПараметрыПроцедуры = ПараметрыЗапроса;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = Задание.Наименование;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(Задание.ИмяПроцедуры,
		Задание.ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПараметрыЗапроса(ПараметрыЗапроса, Отказ)
	
	ПараметрыЗапроса.Организация = Организация;
	ПараметрыЗапроса.КоличествоКонтрагентов = ОграничениеТорговыхПредложений;
	ПараметрыЗапроса.ОтклонениеЦены = ПревышениеМинимальнойЦены;
	ПараметрыЗапроса.СрокОтгрузки = МаксимальныйСрокПоставки;
	ПараметрыЗапроса.Валюта = Валюта;
	
	Товары = РеквизитФормыВЗначение("Список");
	Если ПоискПоНоменклатуреСервиса Тогда
		ТорговыеПредложенияСлужебный.ПолучитьИдентификаторыНоменклатурыСервиса(Товары);
	КонецЕсли;
	
	ТорговыеПредложенияПереопределяемый.ДобавитьСлужебныеКолонкиТовары(Товары, ПоискПоШтрихКоду);
	
	НомераСтрокПоиска.Очистить(); // Соответствие номеров строк поиска и номеров строк списка.
	Для каждого СтрокаСписка Из Товары Цикл
		
		ПоискЗаполнен = Ложь;
		НоваяСтрока = ПараметрыЗапроса.Товары.Добавить();
		
		Если ПоискПоНаименованию И ПоискПоХарактеристике И ЗначениеЗаполнено(СтрокаСписка.Характеристика) Тогда
			НоваяСтрока.Наименование = Строка(СтрокаСписка.Номенклатура) + ?(ПустаяСтрока(СтрокаСписка.Характеристика), "", " ")
				+ Строка(СтрокаСписка.Характеристика);
			ПоискЗаполнен = Истина;
		ИначеЕсли ПоискПоНаименованию Тогда
			
			НоваяСтрока.Наименование = Строка(СтрокаСписка.Номенклатура);
			
			Если НЕ ПустаяСтрока(НоваяСтрока.Наименование) Тогда
				ПоискЗаполнен = Истина;
			КонецЕсли; 
			
		КонецЕсли;
		
		Если ПоискПоАртикулу И ЗначениеЗаполнено(СтрокаСписка.Артикул) Тогда
			НоваяСтрока.Артикулы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаСписка.Артикул);
			ПоискЗаполнен = Истина;
		КонецЕсли;
		
		Если ПоискПоШтрихКоду Тогда
			СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, Упаковка",
				СтрокаСписка.Номенклатура, СтрокаСписка.Характеристика, СтрокаСписка.Упаковка);
			СтрокаШтрихкоды = Товары.НайтиСтроки(СтруктураПоиска);
			Если СтрокаШтрихкоды.Количество() = 1 И ЗначениеЗаполнено(СтрокаШтрихкоды[0].Штрихкоды) Тогда
				НоваяСтрока.Штрихкоды = СтрокаШтрихкоды[0].Штрихкоды;
				ПоискЗаполнен = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ПоискПоНоменклатуреСервиса И ЗначениеЗаполнено(СтрокаСписка.ИдентификаторНоменклатурыСервиса) Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСписка, "ИдентификаторНоменклатурыСервиса, ИдентификаторХарактеристикиСервиса");
			ПоискЗаполнен = Истина;
		КонецЕсли;
		
		Если ПоискЗаполнен Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСписка,	"ЕдиницаИзмерения, Количество");
			СтрокаИдентификаторовПоиска = НомераСтрокПоиска.Добавить();
			СтрокаИдентификаторовПоиска.НомерСтрокиСписка = Товары.Индекс(СтрокаСписка);
			СтрокаИдентификаторовПоиска.НомерСтрокиПоиска = ПараметрыЗапроса.Товары.Количество() - 1;
		Иначе
			ПараметрыЗапроса.Товары.Удалить(НоваяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПараметрыЗапроса.Товары.Количество() = 0 Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Регионы.
	Если (ЗначениеЗаполнено(РегионПоиска) И РегионПоиска.РежимОтбора <> 0)
		И ИдентификаторыРегионов.Количество() Тогда
		
		ЗначениеИдентификаторыРегионов =РеквизитФормыВЗначение("ИдентификаторыРегионов", Тип("ТаблицаЗначений"));
		Для каждого ЭлементКоллекции Из ЗначениеИдентификаторыРегионов Цикл
			Если ЭлементКоллекции.ДляСамовывоза	ИЛИ ЭлементКоллекции.ДляДоставки Тогда
				НастройкиРегионов = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ЭлементКоллекции);
				ПараметрыЗапроса.РегионыПоиска.Добавить(НастройкиРегионов);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(Товары, "Список");
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиТорговыеПредложенияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;
	
	ТорговыеПредложенияКлиент.ОбработатьОшибкиФоновогоЗадания(Результат, Отказ);
	
	Если Не Отказ И Результат <> Неопределено И Результат.Статус = "Выполнено" Тогда
		
		Если ЗначениеЗаполнено(Результат.АдресРезультата) 
			И ЭтоАдресВременногоХранилища(Результат.АдресРезультата)
			И ИдентификаторЗадания = ДополнительныеПараметры.ИдентификаторЗадания Тогда
			
			ЗагрузитьРезультатыПоиска(Результат.АдресРезультата);
			
			Если Контрагенты.Количество() = 0 Тогда
				
				ПоказатьДиалогОшибкиПоиска();
				
			КонецЕсли;
			
			УстановитьОтборПоНеобработанным();
			
		КонецЕсли;
		
		ИдентификаторЗадания = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатыПоиска(АдресРезультата)
	
	ОчиститьРезультатыПошлогоПоиска();
	
	ЗначениеСписок = РеквизитФормыВЗначение("Список");
	
	Результат = БизнесСеть.ПолучитьУдалитьИзВременногоХранилища(АдресРезультата);
	Если Результат <> Неопределено Тогда
		
		// Очистка заполненных значений.
		ЗначениеСписок.ЗаполнитьЗначения("",   "Идентификатор");
		ЗначениеСписок.ЗаполнитьЗначения("",   "ИдентификаторКонтрагента");
		ЗначениеСписок.ЗаполнитьЗначения(ЛОЖЬ, "Пометка");
		
		ТипСтрока = Новый ОписаниеТипов("Строка");
		ТипЧисло  = Новый ОписаниеТипов("Число, Null");
		ТипЦена   = Новый ОписаниеТипов("Число, Null", Новый КвалификаторыЧисла(15, 2));
		ТипБулево = Новый ОписаниеТипов("Булево");
		
		Для каждого СтрокаТаблицыКонтрагентов Из Результат.Контрагенты Цикл
			
			ИдентификаторКонтрагента = СтрЗаменить(СтрокаТаблицыКонтрагентов.ИдентификаторКонтрагента, "-", "");
				
			СтрокаКонтрагентов = Контрагенты.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаКонтрагентов, СтрокаТаблицыКонтрагентов);
			
			СтрокаКонтрагентов.Идентификатор = ИдентификаторКонтрагента;
			
			СтрокаКонтрагентов.ИНН = СтрокаТаблицыКонтрагентов.ИННКонтрагента;
			СтрокаКонтрагентов.КПП = СтрокаТаблицыКонтрагентов.КППКонтрагента;
			СтрокаКонтрагентов.Наименование = СтрокаТаблицыКонтрагентов.НаименованиеКонтрагента;
			СтрокаКонтрагентов.Пометка = Истина;
			
			// Создание новых реквизитов формы.
			МассивРеквизитов = Новый Массив;
			МассивРеквизитов.Добавить(Новый РеквизитФормы("Пометка_"
				+ ИдентификаторКонтрагента, ТипБулево, "Список", НСтр("ru = 'Пометка'")));
			МассивРеквизитов.Добавить(Новый РеквизитФормы("ЕдиницаИзмерения_"
				+ ИдентификаторКонтрагента, ТипСтрока, "Список", НСтр("ru = 'Ед. изм.'")));
			МассивРеквизитов.Добавить(Новый РеквизитФормы("Цена_"
				+ ИдентификаторКонтрагента, ТипЦена,   "Список", НСтр("ru = 'Цена'")));
			МассивРеквизитов.Добавить(Новый РеквизитФормы("ЛучшаяЦена_"
				+ ИдентификаторКонтрагента, ТипБулево, "Список", НСтр("ru = 'Лучшая цена'")));
			МассивРеквизитов.Добавить(Новый РеквизитФормы("СрокПоставки_"
				+ ИдентификаторКонтрагента, ТипЧисло,  "Список", НСтр("ru = 'Срок'")));
			МассивРеквизитов.Добавить(Новый РеквизитФормы("ЛучшийСрок_"
				+ ИдентификаторКонтрагента, ТипБулево, "Список", НСтр("ru = 'Лучший срок'")));
			МассивРеквизитов.Добавить(Новый РеквизитФормы("Идентификатор_"
				+ ИдентификаторКонтрагента, ТипСтрока, "Список", НСтр("ru = 'Идентификатор'")));
			МассивРеквизитов.Добавить(Новый РеквизитФормы("НаименованиеНоменклатуры_"
				+ ИдентификаторКонтрагента, ТипСтрока, "Список", НСтр("ru = 'Наименование номенклатуры'")));
			
			ДобавитьКолонкиТаблицыПоРеквизитам(ЗначениеСписок, МассивРеквизитов);
			
			ИзменитьРеквизиты(МассивРеквизитов);
			
			// Заполнение найденных значений.
			Для каждого ЭлементНайденныхСтрок Из СтрокаТаблицыКонтрагентов.НайденныеСтроки Цикл
				
				// Установка значений.
				ЭлементНомеровСтрокПоиска = НомераСтрокПоиска.НайтиСтроки(Новый Структура("НомерСтрокиПоиска",
					ЭлементНайденныхСтрок.НомерСтроки))[0];
				СтрокаСписка = ЗначениеСписок[ЭлементНомеровСтрокПоиска.НомерСтрокиСписка];
				СтрокаСтатистики = Результат.Статистика[ЭлементНайденныхСтрок.НомерСтроки];
				
				Если ЭлементНайденныхСтрок.Товары.Количество() Тогда
					
					СтрокаТоваров = ЭлементНайденныхСтрок.Товары[0];
					
					СтрокаСписка["Цена_" + ИдентификаторКонтрагента] = СтрокаТоваров.Цена;
					СтрокаСписка["СрокПоставки_" + ИдентификаторКонтрагента]  = СтрокаТоваров.СрокПоставки;
					СтрокаСписка["Идентификатор_" + ИдентификаторКонтрагента] = СтрокаТоваров.Идентификатор;
					СтрокаСписка["НаименованиеНоменклатуры_" + ИдентификаторКонтрагента] = СтрокаТоваров.НаименованиеНоменклатуры;
					СтрокаСписка["ЕдиницаИзмерения_" + ИдентификаторКонтрагента] =
						ТорговыеПредложенияПовтИсп.ПараметрыЕдиницыИзмеренияПоКоду(СтрокаТоваров.КодЕдиницыИзмерения).Ссылка;
						
					Если ЗначениеЗаполнено(СтрокаСтатистики.МинимальнаяЦена) Тогда
						СтрокаСписка.МинимальнаяЦена = СтрокаСтатистики.МинимальнаяЦена  / 100;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаСтатистики.МаксимальнаяЦена) Тогда
						СтрокаСписка.МаксимальнаяЦена = СтрокаСтатистики.МаксимальнаяЦена / 100;
					КонецЕсли;
					
					СтрокаСписка.КоличествоПредложений    = СтрокаСтатистики.КоличествоПредложений;
					СтрокаСписка.МинимальныйСрокПоставки  = СтрокаСтатистики.МинимальныйСрокПоставки;
					СтрокаСписка.МаксимальныйСрокПоставки = СтрокаСтатистики.МаксимальныйСрокПоставки;
					
					Если ЗначениеЗаполнено(СтрокаТоваров.Цена) Тогда
						СтрокаСписка["ЛучшаяЦена_" + ИдентификаторКонтрагента] =
							СтрокаТоваров.Цена < СтрокаСписка.МинимальнаяЦена * (1 + ПревышениеМинимальнойЦены/100);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаТоваров.СрокПоставки) Тогда
						СтрокаСписка["ЛучшийСрок_" + ИдентификаторКонтрагента] = 
							СтрокаТоваров.СрокПоставки <= МаксимальныйСрокПоставки;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ЗначениеСписок, "Список");
	
	// Удаление старых элементов условное оформление.
	МассивУдаления = Новый Массив;
	Для каждого ЭлементОформления Из УсловноеОформление.Элементы Цикл
		Если ЭлементОформления.Представление = "ОтметкаЛучшегоПредложения" Тогда
			МассивУдаления.Добавить(ЭлементОформления);
		КонецЕсли;
	КонецЦикла;
	Для каждого ЭлементОформления Из МассивУдаления Цикл
		УсловноеОформление.Элементы.Удалить(ЭлементОформления);
	КонецЦикла;
	
	// Создание элементов формы.
	Для каждого ЭлементСписка Из Контрагенты Цикл
		
		ИдентификаторКонтрагента = ЭлементСписка.Идентификатор;
		ЗаголовокГруппы = ЭлементСписка.Наименование;
		
		// Основная группа.
		НовыйЭлемент = Элементы.Добавить("ГруппаКонтрагента_" + ИдентификаторКонтрагента, Тип("ГруппаФормы"),
			Элементы.ГруппаПоставщиков);
		НовыйЭлемент.Заголовок = ЗаголовокГруппы;
		НовыйЭлемент.ОтображатьВШапке = Истина;
		НовыйЭлемент.Группировка = ГруппировкаКолонок.Горизонтальная;
		НовыйЭлемент.Видимость = Истина;
		НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
		НовыйЭлемент.Ширина = 7;
		
		// Группа выбора.
		НовыйЭлемент = Элементы.Добавить("ГруппаВыбора_" + ИдентификаторКонтрагента, Тип("ГруппаФормы"),
			Элементы["ГруппаКонтрагента_" + ИдентификаторКонтрагента]);
		НовыйЭлемент.Заголовок = НСтр("ru = 'Группа выбора'", ОбщегоНазначения.КодОсновногоЯзыка());
		НовыйЭлемент.ОтображатьВШапке = Ложь;
		НовыйЭлемент.Группировка = ГруппировкаКолонок.Вертикальная;
		НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
		НовыйЭлемент.Ширина = 2;
		
		НовыйЭлемент = Элементы.Добавить("Пометка_" + ИдентификаторКонтрагента, Тип("ПолеФормы"),
			Элементы["ГруппаВыбора_" + ИдентификаторКонтрагента]);
		НовыйЭлемент.Заголовок = НСтр("ru = 'Выбор'", ОбщегоНазначения.КодОсновногоЯзыка());
		НовыйЭлемент.ОтображатьВШапке = Ложь;
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
		НовыйЭлемент.ПутьКДанным = "Список.Пометка_" + ИдентификаторКонтрагента;
		НовыйЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПометкаПриИзменении");
		НовыйЭлемент.ШиринаЭлемента = 2;
		
		// Блокировка изменения пустого поставщика.
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементУсловногоОформления.Представление = НСтр("ru = 'БлокировкаБезПредложения'");
		ЭлементУсловногоОформления.Использование = Истина;
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы["Пометка_" + ИдентификаторКонтрагента].Имя);
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Идентификатор_" + ИдентификаторКонтрагента);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
		// Группа предложения.
		НовыйЭлемент = Элементы.Добавить("ГруппаПредложение_" + ИдентификаторКонтрагента, Тип("ГруппаФормы"),
			Элементы["ГруппаКонтрагента_" + ИдентификаторКонтрагента]);
		НовыйЭлемент.ОтображатьВШапке = Ложь;
		НовыйЭлемент.Группировка = ГруппировкаКолонок.Вертикальная;
		НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
		НовыйЭлемент.Ширина = 5;
		
		// -- Подгруппа Цена.
		НовыйЭлемент = Элементы.Добавить("ГруппаЦена_" + ИдентификаторКонтрагента, Тип("ГруппаФормы"),
			Элементы["ГруппаПредложение_" + ИдентификаторКонтрагента]);
		НовыйЭлемент.ОтображатьВШапке = Ложь;
		НовыйЭлемент.Группировка = ГруппировкаКолонок.ВЯчейке;
		НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
		НовыйЭлемент.Ширина = 5;
		
		НовыйЭлемент = Элементы.Добавить("ЛучшаяЦена_" + ИдентификаторКонтрагента, Тип("ПолеФормы"),
			Элементы["ГруппаЦена_" + ИдентификаторКонтрагента]);
		НовыйЭлемент.ОтображатьВШапке = Ложь;
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеКартинки;
		НовыйЭлемент.КартинкаЗначений = БиблиотекаКартинок.ЛучшиеТорговыеПредложения;
		НовыйЭлемент.ПутьКДанным = "Список.ЛучшаяЦена_" + ИдентификаторКонтрагента;
		НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
		НовыйЭлемент.Ширина = 1;
		
		НовыйЭлемент = Элементы.Добавить("Цена_" + ИдентификаторКонтрагента, Тип("ПолеФормы"),
			Элементы["ГруппаЦена_" + ИдентификаторКонтрагента]);
		НовыйЭлемент.ОтображатьВШапке = Истина;
		НовыйЭлемент.ПутьКДанным = "Список.Цена_" + ИдентификаторКонтрагента;
		НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
		НовыйЭлемент.Ширина = 5;
		
		// -- Подгруппа поставка.
		НовыйЭлемент = Элементы.Добавить("ГруппаПоставка_" + ИдентификаторКонтрагента, Тип("ГруппаФормы"),
			Элементы["ГруппаПредложение_" + ИдентификаторКонтрагента]);
		НовыйЭлемент.ОтображатьВШапке = Ложь;
		НовыйЭлемент.Группировка = ГруппировкаКолонок.ВЯчейке;
		НовыйЭлемент.Ширина = 5;
		
		НовыйЭлемент = Элементы.Добавить("ЛучшийСрок_" + ИдентификаторКонтрагента, Тип("ПолеФормы"),
		Элементы["ГруппаПоставка_" + ИдентификаторКонтрагента]);
		НовыйЭлемент.ОтображатьВШапке = Ложь;
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеКартинки;
		НовыйЭлемент.КартинкаЗначений = БиблиотекаКартинок.ЛучшиеТорговыеПредложения;
		НовыйЭлемент.ПутьКДанным = "Список.ЛучшийСрок_" + ИдентификаторКонтрагента;
		НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
		НовыйЭлемент.Ширина = 1;
		
		НовыйЭлемент = Элементы.Добавить("СрокПоставки_" + ИдентификаторКонтрагента, Тип("ПолеФормы"),
			Элементы["ГруппаПоставка_" + ИдентификаторКонтрагента]);
		НовыйЭлемент.ОтображатьВШапке = Истина;
		НовыйЭлемент.ПутьКДанным = "Список.СрокПоставки_" + ИдентификаторКонтрагента;
		НовыйЭлемент.Шрифт = ШрифтыСтиля.МелкийЗаголовокПодтвержденияШрифт;
		НовыйЭлемент.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
		НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
		НовыйЭлемент.Ширина = 5;
		НовыйЭлемент.Формат = "Ч " + НСтр("ru = 'дн.'");
		НовыйЭлемент.Заголовок = НСтр("ru = 'Срок поставки'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		// Условное оформление. Надпись "по запросу" (цена).
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы["Цена_" + ИдентификаторКонтрагента].Имя);
		ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Цена_" + ИдентификаторКонтрагента);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = 0;
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Идентификатор_" + ИдентификаторКонтрагента);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'по запросу'"));
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Право);
		
		// Условное оформление. Надпись "в наличии" (срок поставки).
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы["СрокПоставки_" + ИдентификаторКонтрагента].Имя);
		ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.СрокПоставки_" + ИдентификаторКонтрагента);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = 0;
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Идентификатор_" + ИдентификаторКонтрагента);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'в наличии'"));
		
		// Условное оформление. Надпись "по запросу" (срок поставки).
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы["СрокПоставки_" + ИдентификаторКонтрагента].Имя);
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.СрокПоставки_" + ИдентификаторКонтрагента);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Неопределено;
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Идентификатор_" + ИдентификаторКонтрагента);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'по запросу'"));
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Право);
		
	КонецЦикла;
	
	АвтовыборПоСценарию("Цена");
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьРезультатыПошлогоПоиска()
	
	Если Контрагенты.Количество() Тогда
		УдалитьКолонкиПоставщиков(Контрагенты.Выгрузить(, "Идентификатор").ВыгрузитьКолонку("Идентификатор"));
	КонецЕсли;
	Контрагенты.Очистить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьКолонкиТаблицыПоРеквизитам(ЗначениеСписок, Знач МассивРеквизитов)
	
	Для каждого ЗначениеМассива Из МассивРеквизитов Цикл
		ЗначениеСписок.Колонки.Добавить(ЗначениеМассива.Имя, ЗначениеМассива.ТипЗначения, ЗначениеМассива.Заголовок);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьНадписьПодобраноТоваров(Форма)
	
	ВыбранныеСтроки = Форма.Список.НайтиСтроки(Новый Структура("Пометка", Истина));
	КоличествоТоваров = ВыбранныеСтроки.Количество();
	Форма.СуммаВсего = Форма.Список.Итог("Сумма");
	
	Если КоличествоТоваров = 0 Тогда
		Форма.НадписьПодобраноТоваров = НСтр("ru = 'Отсутствуют товары для заказа'");
	ИначеЕсли Форма.СуммаВсего <> 0 Тогда
		Форма.НадписьПодобраноТоваров = СтрШаблон(НСтр("ru = 'Товаров %1 поз. из %2 на сумму %3 %4'"),
			КоличествоТоваров, Форма.Список.Количество(), Форма.СуммаВсего, Форма.Валюта);
	Иначе // Для суммы = 0.
		Форма.НадписьПодобраноТоваров = СтрШаблон(НСтр("ru = 'Товаров %1 поз. из %2'"),
			КоличествоТоваров, Форма.Список.Количество());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСводныеДанные(РежимСнятияПометок = Ложь, ИдентификаторыПоставщиков = Неопределено)
	
	ОбновитьПоказателиПоставщиков(РежимСнятияПометок, ИдентификаторыПоставщиков);
	ОбновитьНадписьПодобраноТоваров(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОформленияЗаказов(РежимЗапросаЦен = Ложь)
	
	ВыбранныеСтроки = Список.НайтиСтроки(Новый Структура("Пометка", Истина));
	
	Если Не ЗначениеЗаполнено(ВыбранныеСтроки) Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'Необходимо выбрать позиции'"));
		Возврат;
	КонецЕсли;
	
	ДанныеПредложений = Новый Массив;
	
	Для Каждого СтрокаСписка Из ВыбранныеСтроки Цикл
		
		Если Не СтрокаСписка.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаСписка.Количество = 0 Тогда
			ПоказатьПредупреждение( , НСтр("ru = 'Не указано количество потребности'"));
			Продолжить;
		КонецЕсли;
		
		ИдентификаторКонтрагента = СтрокаСписка.ИдентификаторКонтрагента;
		НаименованиеСвойства = "Идентификатор_" + ИдентификаторКонтрагента;
		ИдентификаторПредложения = 
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтрокаСписка, НаименованиеСвойства, "");
		Если ПустаяСтрока(ИдентификаторПредложения) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыПредложения = ТорговыеПредложенияСлужебныйКлиент.НовыйПараметрыПредложения();
		ПараметрыПредложения.ИдентификаторПредложения = ИдентификаторПредложения;
		ПараметрыПредложения.Количество = СтрокаСписка.Количество;
		ПараметрыПредложения.Наименование = Строка(СтрокаСписка.Номенклатура);
		ДанныеПредложений.Добавить(ПараметрыПредложения);
		
	КонецЦикла;
	
	СоздатьКорзинуДобавитьТовары(ДанныеПредложений);
	
КонецПроцедуры

// Создать корзину добавить товары.
// 
// Параметры:
//  ДанныеПредложений - Массив Из см. ТорговыеПредложенияСлужебныйКлиент.НовыйПараметрыПредложения
//
&НаКлиенте
Процедура СоздатьКорзинуДобавитьТовары(ДанныеПредложений)
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеВыполненияДействияНадТоваром", ЭтотОбъект);
	
	ДлительнаяОперация = ТорговыеПредложенияВызовСервера.СоздатьКорзинуДобавитьТоварВФоне(
		Организация, ДанныеПредложений, УникальныйИдентификатор);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ПараметрыОжидания.ВыводитьСообщения    = Истина;
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Формирование корзины'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка());
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыполненияДействияНадТоваром(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда 
		Возврат;
	КонецЕсли;
	
	ТорговыеПредложенияКлиент.ОповеститьОбИзмененииКорзины(Результат.АдресРезультата, ЭтотОбъект);
	
	Если Результат.Статус = "Ошибка" Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.КраткоеПредставлениеОшибки);
		Возврат;
		
	КонецЕсли;
	
	ОчиститьСообщения();
	ТорговыеПредложенияКлиент.ОткрытьФормуКорзины(Организация);
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура АвтовыборПоСценарию(Режим)
	
	ОбновитьПоказателиПоставщиков(Истина);
	
	Для каждого СтрокаСписка Из Список Цикл
		
		ВерхнийУровень = 999999999;
		МинимальнаяЦена = 0;
		НайденныйПоставщик = "";
		
		Для каждого СтрокаПоставщики Из Контрагенты Цикл
			
			ЦенаПредложения = СтрокаСписка["Цена_" + СтрокаПоставщики.Идентификатор];
			Если Не ЗначениеЗаполнено(ЦенаПредложения) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Режим = "Цена" Тогда
				Если ЗначениеЗаполнено(ЦенаПредложения) И (ЦенаПредложения < ВерхнийУровень) Тогда
					ВерхнийУровень = ЦенаПредложения;
					НайденныйПоставщик = СтрокаПоставщики.Идентификатор;
					МинимальнаяЦена = ВерхнийУровень;
				КонецЕсли;
			ИначеЕсли Режим = "СрокПоставки" Тогда
				ЗначениеПоставщика = СтрокаСписка["СрокПоставки_" + СтрокаПоставщики.Идентификатор];
				Если Не ЗначениеЗаполнено(ЗначениеПоставщика) Тогда
					ЗначениеПоставщика = 0;
				КонецЕсли;
				Если ЗначениеПоставщика < ВерхнийУровень Тогда
					ВерхнийУровень = ЗначениеПоставщика;
					НайденныйПоставщик = СтрокаПоставщики.Идентификатор;
					МинимальнаяЦена = СтрокаСписка["Цена_" + СтрокаПоставщики.Идентификатор];
					Если Не ЗначениеЗаполнено(МинимальнаяЦена) Тогда
						МинимальнаяЦена = 0;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли Режим = "СнятьПометки" Тогда
				НайденныйПоставщик = Неопределено;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЦенаПредложения) Тогда
				СтрокаПоставщики.Охват = СтрокаПоставщики.Охват + 1;
			КонецЕсли;
			
			СтрокаСписка["Пометка_" + СтрокаПоставщики.Идентификатор] = Ложь;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(НайденныйПоставщик) Тогда
			СтрокаСписка["Пометка_" + НайденныйПоставщик] = Истина;
			СтрокаСписка.Пометка = Истина;
			СтрокаСписка.ИдентификаторКонтрагента = НайденныйПоставщик;
			СтрокаСписка.Сумма = СтрокаСписка.Количество * МинимальнаяЦена;
			СтрокаСписка.Идентификатор = СтрокаСписка["Идентификатор_" + НайденныйПоставщик];
			СтрокаПоставщики = Контрагенты.НайтиСтроки(Новый Структура("Идентификатор", НайденныйПоставщик));
			СтрокаПоставщики[0].КЗаказу = СтрокаПоставщики[0].КЗаказу + 1;
			
		Иначе
			СтрокаСписка.Пометка = Ложь;
			СтрокаСписка.Идентификатор = "";
		КонецЕсли;
		
	КонецЦикла;
	
	СуммаВсего = Список.Итог("Сумма");
	
	ОбновитьНадписьПодобраноТоваров(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПоказателиПоставщиков(РежимСнятияПометок = Ложь, ИдентификаторыПоставщиков = Неопределено)
	
	Если ИдентификаторыПоставщиков = Неопределено Тогда
		ИдентификаторыПоставщиков = Новый Массив;
	КонецЕсли;
	
	Для каждого СтрокаПоставщики Из Контрагенты Цикл
		
		СтрокаПоставщики.Охват = 0;
		СтрокаПоставщики.КЗаказу = 0;
		
		Если РежимСнятияПометок Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого СтрокаСписка Из Список Цикл
			
			Если ЗначениеЗаполнено(СтрокаСписка["Идентификатор_" + СтрокаПоставщики.Идентификатор]) Тогда
				СтрокаПоставщики.Охват = СтрокаПоставщики.Охват + 1;
			КонецЕсли;
			
			Если СтрокаСписка["Пометка_" + СтрокаПоставщики.Идентификатор] = Истина Тогда
				СтрокаПоставщики.КЗаказу = СтрокаПоставщики.КЗаказу + 1;
			КонецЕсли;
			
		КонецЦикла;
		
		Если СтрокаПоставщики.Охват = 0 Тогда
			Если ИдентификаторыПоставщиков.Найти(СтрокаПоставщики.Идентификатор) = Неопределено Тогда
				ИдентификаторыПоставщиков.Добавить(СтрокаПоставщики.Идентификатор);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УдалитьКолонкиПоставщиков(ИдентификаторыПоставщиков);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьКолонкиПоставщиков(ИдентификаторыПоставщиков)
	
	УдаляемыеРеквизиты = Новый Массив;
	Для каждого Идентификатор Из ИдентификаторыПоставщиков Цикл
		
		// Удаление колонок с поставщиком.
		УдаляемыеРеквизиты.Добавить("Список.Пометка_"			+ Идентификатор);
		УдаляемыеРеквизиты.Добавить("Список.ЕдиницаИзмерения_"	+ Идентификатор);
		УдаляемыеРеквизиты.Добавить("Список.Цена_"				+ Идентификатор);
		УдаляемыеРеквизиты.Добавить("Список.ЛучшаяЦена_"		+ Идентификатор);
		УдаляемыеРеквизиты.Добавить("Список.СрокПоставки_"		+ Идентификатор);
		УдаляемыеРеквизиты.Добавить("Список.ЛучшийСрок_"		+ Идентификатор);
		УдаляемыеРеквизиты.Добавить("Список.Идентификатор_"     + Идентификатор);
		УдаляемыеРеквизиты.Добавить("Список.НаименованиеНоменклатуры_"	+ Идентификатор);
		
		// Удаление неиспользуемых элементов формы.
		Элементы.Удалить(Элементы["ГруппаКонтрагента_"			+ Идентификатор]);

		Контрагенты.Удалить(Контрагенты.НайтиСтроки(Новый Структура("Идентификатор", Идентификатор))[0]);
		
	КонецЦикла;
	
	// Удаление неиспользуемых реквизитов формы.
	ИзменитьРеквизиты(, УдаляемыеРеквизиты);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранноеЗначение, ДополнительныеПараметры = Неопределено)
	
	ТорговыеПредложенияПереопределяемый.ОбработатьВыбор(ЭтотОбъект, ВыбранноеЗначение, ДополнительныеПараметры);
	ОбновитьНадписьПодобраноТоваров(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоКонтексту(ПараметрыКоманды)
	
	ТаблицаТовары = РеквизитФормыВЗначение("Список", Тип("ТаблицаЗначений"));
	
	КонтекстИсточника = Неопределено;
	ТорговыеПредложенияПереопределяемый.СвойстваКонтекстаДокументовДляПоискаПредложений(ПараметрыКоманды, КонтекстИсточника, ТаблицаТовары);
	Если КонтекстИсточника <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, КонтекстИсточника);
	КонецЕсли;
	ТорговыеПредложенияСлужебный.ЗаполнитьСведенияОНоменклатуре(ТаблицаТовары, "ЕдиницаИзмерения, Упаковка");
	ЗначениеВРеквизитФормы(ТаблицаТовары, "Список");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РеквизитыНоменклатуры(Знач Номенклатура)
	
	Реквизиты = ТорговыеПредложенияСлужебный.СведенияОНоменклатуре(Номенклатура);
	
	// Очистка данных.
	Реквизиты.Вставить("МаксимальнаяЦена",         0);
	Реквизиты.Вставить("МинимальнаяЦена",          0);
	Реквизиты.Вставить("МаксимальныйСрокПоставки", 0);
	Реквизиты.Вставить("МинимальныйСрокПоставки",  0);
	Реквизиты.Вставить("Сумма",                    0);
	Реквизиты.Вставить("Идентификатор", "");
	Реквизиты.Вставить("ИдентификаторКонтрагента", "");
	Реквизиты.Вставить("Пометка",                  Ложь);
	Реквизиты.Вставить("КоличествоПредложений",    0);
	Реквизиты.Вставить("Количество",               1);
	
	Возврат Реквизиты;
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Переопределяемое условное оформление (например, для единиц измерения).
	ТорговыеПредложенияПереопределяемый.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтотОбъект, "СписокНоменклатураЕдиницаИзмерения", "Список.Упаковка");
	
	// Выделение текста для выбранных поставщиков.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Контрагенты.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Поставщики.КЗаказу");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЖирныйШрифт = ШрифтыСтиля.ВажнаяНадписьШрифт;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ЖирныйШрифт);
	
	// Отключение доступности выбора характеристик для номенклатуры без характеристик
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Представление = НСтр("ru = 'Отключение доступности выбора характеристик для номенклатуры без характеристик'");
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокХарактеристика.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Список.ИспользованиеХарактеристик");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<характеристики не используются>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборРегионаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("РегионРежимОтбора") Тогда
		Результат.Свойство("РегионРежимОтбора"  , РегионПоиска.РежимОтбора);
		Результат.Свойство("РегионПредставление", РегионПоиска.Представление);
		Результат.Свойство("РегионЗначенияПолей", РегионПоиска.ЗначенияПолей);
	КонецЕсли;
	
	СохранитьПрочитатьНастройкиРегионовПоиска();
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиТорговыеПредложения()
	
	ОчиститьСообщения();
	
	Если Список.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Отсутствуют товары для поиска.'"));
		Возврат;
	КонецЕсли;
	
	Если ИдентификаторЗадания <> Неопределено Тогда
		ИнтеграцияБСПБЭДВызовСервера.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
		ИдентификаторЗадания = Неопределено;
	КонецЕсли;
	
	Отказ = Ложь;
	ДлительнаяОперация = НайтиТорговыеПредложенияВФоне(УникальныйИдентификатор, Отказ);
	Если Отказ Тогда
		ПоказатьДиалогОшибкиПоиска(Истина);
		Возврат;
	КонецЕсли;
	
	ИдентификаторЗадания = ДлительнаяОперация.ИдентификаторЗадания;
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ИдентификаторЗадания", ИдентификаторЗадания);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Поиск торговых предложений.'");
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	
	ДлительнаяОперацияЗавершение = Новый ОписаниеОповещения("НайтиТорговыеПредложенияЗавершение",
		ЭтотОбъект, ПараметрыПроцедуры);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация,
		ДлительнаяОперацияЗавершение,
		ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьПрочитатьНастройкиРегионовПоиска()
	
	БизнесСеть.СохранитьНастройкиРегионовПоиска(
		РегионПоиска,
		"ТорговыеПредложения",
		Организация,
		Элементы.ФормаВыборРегиона.Заголовок,
		ИдентификаторыРегионов);
		
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	Элементы.КартинкаПодсказки.Видимость = Ложь;
	Элементы.КомандаПодсказки.Видимость = Ложь;
	
	Элементы.СоздатьОтправитьЗаказы.Доступность = ТорговыеПредложения.ПравоСозданияЗаказовПоставщику();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВалютуПоискаПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		ПоказатьВводЗначения(Новый ОписаниеОповещения("ИзменитьВалютуПоискаЗавершение", ЭтотОбъект), Валюта,
			НСтр("ru = 'Валюта поиска'"), Тип("СправочникСсылка.Валюты"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВалютуПоискаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Валюта = Результат;
		Элементы.ИзменитьВалютуПоиска.Заголовок = СтрШаблон(НСтр("ru = 'Валюта: %1'"), Валюта);
		НайтиТорговыеПредложения();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоНеобработанным(УстановитьОтбор = Неопределено)
	
	// Если неопределено, то обновляем значение отбора.
	РежимОбновления = (УстановитьОтбор = Неопределено И Элементы.Список.ОтборСтрок <> Неопределено);
	
	Если УстановитьОтбор = Истина ИЛИ РежимОбновления Тогда
		Отбор = Новый ФиксированнаяСтруктура("Пометка", Ложь);
		Элементы.Список.ОтборСтрок = Отбор;
	Иначе
		Элементы.Список.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиалогОшибкиПоиска(ОшибкиПараметров = Ложь)
	
	Оповещение = Новый ОписаниеОповещения("ПоказатьДиалогОшибкиПоискаПродолжение", ЭтотОбъект);
	
	Если ОшибкиПараметров Тогда
		СтрокиСообщения = Новый Массив;
		СтрокиСообщения.Добавить(НСтр("ru = 'Торговые предложения не найдены, причина:'"));
		Если ПоискПоНаименованию Тогда
			СтрокиСообщения.Добавить(НСтр("ru = '- Не заполнено наименование.'"));
		КонецЕсли;
		Если ПоискПоАртикулу Тогда
			СтрокиСообщения.Добавить(НСтр("ru = '- Не заполнен артикул.'"));
		КонецЕсли;
		Если ПоискПоШтрихКоду Тогда
			СтрокиСообщения.Добавить(НСтр("ru = '- Отсутствуют штрихкоды.'"));
		КонецЕсли;
		Если ПоискПоНоменклатуреСервиса Тогда
			СтрокиСообщения.Добавить(НСтр("ru = '- Нет сопоставления с 1С:Номенклатура.'"));
		КонецЕсли;
		СтрокиСообщения.Добавить(НСтр("ru = 'Изменить параметры поиска?'"));
		ТекстВопроса = СтрСоединить(СтрокиСообщения, Символы.ПС);
	Иначе
		ТекстВопроса = НСтр("ru = 'Торговые предложения не найдены.
			|Изменить параметры поиска?'");
	КонецЕсли;
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиалогОшибкиПоискаПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("НастройкаПоискаПоТоварамЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.ТорговыеПредложения.Форма.НастройкаПоискаПоТоварам",,,,,,
		Обработчик, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти
