
#Область ОписаниеПеременных

&НаКлиенте
Перем ДанныеКатегорий;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	АвтоНавигационнаяСсылка = Ложь;
	НавигационнаяСсылка = СтрШаблон("e1cib/app/%1", ИмяФормы);
	
	Если Не ТорговыеПредложения.ПравоНастройкиТорговыхПредложений(Истина) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.Отбор.Свойство("Номенклатура"  , Номенклатура);
	Параметры.Отбор.Свойство("ПрайсЛист"     , ТорговоеПредложение);
	
	СостояниеПубликации = Неопределено;
	Параметры.Свойство("СостояниеПубликации" , СостояниеПубликации);
	
	КонтекстныйПереход = Неопределено;
	КонтекстныйПереход = Параметры.Свойство("КонтекстныйПереход", КонтекстныйПереход) И КонтекстныйПереход = Истина;
	КонтекстныйПереходТорговоеПредложение = КонтекстныйПереход И ЗначениеЗаполнено(ТорговоеПредложение);
	КонтекстныйПереходНоменклатура = КонтекстныйПереход И ЗначениеЗаполнено(Номенклатура);
	
	ИнтернетПоддержкаПодключена = ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	
	// ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	ДоступнаПодсистемаРаботаСНоменклатурой = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой");
	Если ДоступнаПодсистемаРаботаСНоменклатурой Тогда
		ОбщийМодульРаботаСНоменклатурой = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатурой");
		ИспользоватьСопоставление1СНоменклатура = ОбщийМодульРаботаСНоменклатурой.ДоступнаФункциональностьПодсистемы();
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	
	ПолноеИмяМетаданныхТорговыхПредложений = Метаданные.НайтиПоТипу(Метаданные.ОпределяемыеТипы.ТорговоеПредложение.Тип.Типы()[0]).ПолноеИмя();
	
	РежимПросмотраДереваКатегорий = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ТорговыеПредложения",
		"СостояниеПубликацииТоваров\РежимПросмотраДереваКатегорий");
	
	Если ПустаяСтрока(РежимПросмотраДереваКатегорий) Тогда
		РежимПросмотраДереваКатегорий = "ДеревоИспользуемых";
	КонецЕсли;
	
	МассивСостояний = Новый Массив;
	Если НЕ ПустаяСтрока(СостояниеПубликации) Тогда
		
		КлючиСостояний = Новый Структура(СостояниеПубликации);
		
		Для каждого КлючСостояния Из КлючиСостояний Цикл
			МассивСостояний.Добавить(КлючСостояния.Ключ);
		КонецЦикла;
		
	КонецЕсли;
	
	Элементы.ПоказатьСкрытьОпубликованные.Пометка      = НЕ МассивСостояний.Найти("Опубликовано") = Неопределено;
	Элементы.ПоказатьСкрытьОжидающиеОбновления.Пометка = НЕ МассивСостояний.Найти("ОжидаетПубликации") = Неопределено;
	Элементы.ПоказатьСкрытьОшибки.Пометка              = НЕ МассивСостояний.Найти("Ошибка") = Неопределено;
	
	// Фоновые задания
	ОбновитьТорговыеПредложенияТорговойПлощадкиВФоне(ОперацияОбновлениеДанныхПозицийТорговыхПредложений, ТорговоеПредложение, Номенклатура, УникальныйИдентификатор);
	ПолучитьДанныеКатегорийВФоне(ТорговоеПредложение, Номенклатура, ДоступнаПодсистемаРаботаСНоменклатурой, ИнтернетПоддержкаПодключена, 
		ОперацияЗагрузкаКатегорий, УникальныйИдентификатор);
	
	ДанныеСписка = ПолучитьДанныеСписка(ТорговоеПредложение, Номенклатура);
	ПрисутствуютДанные = ДанныеСписка.ПрисутствуютДанные;
	
	УстановитьТекстЗапросаДинамическогоСписка();
	УстановитьНачальноеСостояниеЭлементовФормы();
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОжидатьОбновлениеТорговыхПредложенияТорговойПлощадки();
	ОжидатьПолученияСпискаКатегорий();
	
	ОбновитьОтображениеЭлементовФормы();
	ОбновитьОтборПоСостоянию();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ТорговыеПредложения_ИзменениеСинхронизации" Тогда
		
		Если Открыта() Тогда
			Элементы.Список.Обновить();
		КонецЕсли;
		ОбновитьСтатистикуСостояний();
		
	ИначеЕсли ИмяСобытия = "ИспользоватьСервисРаботаСНоменклатурой" Тогда
		
		ИспользоватьСопоставление1СНоменклатура = ИспользоватьСервисРаботаСНоменклатурой();
		
	ИначеЕсли ИмяСобытия = "ТорговыеПредложения_ПослеЗаписи" 
		Или (ИмяСобытия = "ТорговыеПредложения_ОбновлениеСостоянийТорговыхПредложений" И Источник <> ЭтотОбъект) Тогда
		
		Если Открыта() Тогда
			Элементы.Список.Обновить();
		КонецЕсли;
		ОбновитьДанныеФормы();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияНадписьИнтернетПоддержкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ИнтернетПоддержкаПользователей" Тогда
		ПолучитьДанныеПослеОткрытия = Новый ОписаниеОповещения("ПослеПодключенияИнтернетПоддержкиПользователей", ЭтотОбъект);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ПолучитьДанныеПослеОткрытия, ЭтотОбъект);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТорговоеПредложениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФиксированныеНастройки = Новый НастройкиКомпоновкиДанных;
	ЭлементОтбора = ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Ссылка");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ПравоеЗначение = ПолучитьОпубликованныеТорговыеПредложения();
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ФиксированныеНастройки", ФиксированныеНастройки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораТорговогоПредложения", ЭтотОбъект);
	
	ОткрытьФорму(ПолноеИмяМетаданныхТорговыхПредложений + ".ФормаВыбора", ПараметрыОткрытияФормы, ЭтаФорма, , , ,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ТорговоеПредложениеПриИзменении(Элемент)
	
	ТорговоеПредложениеПриИзмененииНаСервере();
	
	ОжидатьОбновлениеТорговыхПредложенияТорговойПлощадки();
	ОжидатьПолученияСпискаКатегорий();
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	
	ОбновитьДанныеФормы();
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Номенклатура", Номенклатура,
		ВидСравненияКомпоновкиДанных.Равно, , ЗначениеЗаполнено(Номенклатура),
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоПредупрежденияПриИзменении(Элемент)
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ЕстьПредупреждения", Истина,
		ВидСравненияКомпоновкиДанных.Равно, , ТолькоПредупреждения, 
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
КонецПроцедуры
 
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПозицияТорговогоПредложения = Новый Структура;
	ПозицияТорговогоПредложения.Вставить("ПрайсЛист", ТекущиеДанные.ПрайсЛист);
	ПозицияТорговогоПредложения.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
	ПозицияТорговогоПредложения.Вставить("Характеристика", ТекущиеДанные.Характеристика);
	ПозицияТорговогоПредложения.Вставить("Упаковка", ТекущиеДанные.Упаковка);
	ПозицияТорговогоПредложения.Вставить("ЕстьПредупреждения", ТекущиеДанные.ЕстьПредупреждения);
	
	ПараметрыОткрытияФормы = Новый Структура;
	
	ОписаниеОповещения = 
		Новый ОписаниеОповещения("ПослеПросмотраПозицииТорговогоПредложения", ЭтотОбъект, ПараметрыОткрытияФормы);
	
	Если Поле.Имя = "СостояниеПубликацииТорговыхПредложенийГиперссылка" 
		Или (Поле.Имя = "НомерКартинкиПредупреждения" И ТекущиеДанные.ЕстьПредупреждения) Тогда
		
		ПозицииТорговыхПредложений = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПозицияТорговогоПредложения);
		ПараметрыОткрытияФормы.Вставить("ПрайсЛист"                   , ТорговоеПредложение);
		ПараметрыОткрытияФормы.Вставить("ПозицииТорговыхПредложений"  , ПозицииТорговыхПредложений);
		
		ТорговыеПредложенияКлиент.ОткрытьФормуДиагностикиТорговыхПредложений(
			ПараметрыОткрытияФормы, ЭтотОбъект, ОписаниеОповещения);
		
	ИначеЕсли Поле.Имя = "СписокПрайсЛист" Тогда
		ПоказатьЗначение(, ТекущиеДанные.ПрайсЛист);
	Иначе
		
		ПараметрыОткрытияФормы.Вставить("ПозицияТорговогоПредложения" , ПозицияТорговогоПредложения);
		
		ТорговыеПредложенияКлиент.ОткрытьКарточкуПубликуемогоТорговогоПредложения(
			ПараметрыОткрытияФормы, ЭтотОбъект, ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКатегории

&НаКлиенте
Процедура КатегорииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаДерева = Категории.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если СтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.Категории.Развернут(ВыбраннаяСтрока) Тогда
		Элементы.Категории.Свернуть(ВыбраннаяСтрока);
	Иначе
		Элементы.Категории.Развернуть(ВыбраннаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КатегорииПриАктивизацииСтроки(Элемент)
	
	Если НЕ ДоступнаПодсистемаРаботаСНоменклатурой Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранныеКатегории = Новый СписокЗначений;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.Категории.ВыделенныеСтроки Цикл
		
		Строка = Категории.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		Если ПустаяСтрока(Строка.Идентификатор) Тогда
			ВыбранныеКатегории.Очистить(); // Все категории
			Прервать;
		КонецЕсли;
		ВыбранныеКатегории.Добавить(Строка.Идентификатор);
		ДобавитьИдентификаторыДочернихКатегорий(Строка, ВыбранныеКатегории);
	
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
		"ИдентификаторКатегории", ВыбранныеКатегории, ВидСравненияКомпоновкиДанных.ВСписке, ,
		ВыбранныеКатегории.Количество() <> 0, 
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
КонецПроцедуры

&НаКлиенте
Процедура КатегорииПередРазворачиванием(Элемент, Строка, Отказ)
	
	Если РежимПросмотраДереваКатегорий <> "ДеревоЦеликом" Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Строка", Строка);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КатегорииПередРазворачиваниемЗавершение", ЭтотОбъект,
		ДополнительныеПараметры);
	
	Элементы.ГруппаДлительнаяЗагрузкаКатегорий.ТекущаяСтраница = Элементы.ГруппаДекорацияДлительнаяЗагрузкаКатегорий;
	ОбщийМодульРаботаСНоменклатуройСлужебныйКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСНоменклатуройСлужебныйКлиент");
	ОбщийМодульРаботаСНоменклатуройСлужебныйКлиент.РазвернутьКатегорию(ЭтотОбъект, Категории, Элементы.Категории,
		Строка, РежимПросмотраДереваКатегорий, ОписаниеОповещения, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область РежимПросмотраДереваКатегорий

&НаКлиенте
Процедура РежимПросмотраДереваКатегорийДеревоИспользуемых(Команда)
	УстановитьРежимПросмотраДереваКатегорий("ДеревоИспользуемых");
КонецПроцедуры

&НаКлиенте
Процедура РежимПросмотраДереваКатегорийДеревоЦеликом(Команда)
	УстановитьРежимПросмотраДереваКатегорий("ДеревоЦеликом");
КонецПроцедуры

&НаКлиенте
Процедура РежимПросмотраДереваКатегорийСписок(Команда)
	УстановитьРежимПросмотраДереваКатегорий("Список");
КонецПроцедуры

#КонецОбласти

#Область ПоказатьСкрытьСостояния

&НаКлиенте
Процедура ПоказатьСкрытьОпубликованные(Команда)
	Элементы.ПоказатьСкрытьОпубликованные.Пометка = НЕ Элементы.ПоказатьСкрытьОпубликованные.Пометка;
	ОбновитьОтборПоСостоянию();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьОжидающиеОбновления(Команда)
	Элементы.ПоказатьСкрытьОжидающиеОбновления.Пометка = НЕ Элементы.ПоказатьСкрытьОжидающиеОбновления.Пометка;
	ОбновитьОтборПоСостоянию();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьОшибки(Команда)
	Элементы.ПоказатьСкрытьОшибки.Пометка = НЕ Элементы.ПоказатьСкрытьОшибки.Пометка;
	ОбновитьОтборПоСостоянию();
КонецПроцедуры

#КонецОбласти

#Область КонтекстныеПереходы

&НаКлиенте
Процедура СопоставитьРаботаСНоменклатурой(Команда)
	
	ВыбраннаяНоменклатура = ВыбраннаяНоменклатура();
	
	Если ВыбраннаяНоменклатура.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьСопоставление1СНоменклатура Тогда
		ОткрытьФормуСопоставленияНоменклатуры(ВыбраннаяНоменклатура);
	Иначе
	
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Раздел",    "НастройкиРаботаСНоменклатурой");
		ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru = 'Сервис 1С:Номенклатура'"));
		ПараметрыОткрытия.Вставить("ОписаниеРаздела",
			НСтр("ru = 'Для возможности сопоставления номенклатуры необходимо включить использование сервиса 1С:Номенклатура.'"));
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ВыбраннаяНоменклатура", ВыбраннаяНоменклатура);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СопоставитьРаботаСНоменклатуройЗавершение", ЭтотОбъект, 
			ДополнительныеПараметры);
			
		ОбщийМодульРаботаСНоменклатуройКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСНоменклатуройКлиент");
		
		ПараметрыОткрытия = ОбщийМодульРаботаСНоменклатуройКлиент.ПараметрыФормыПанелиАдминистрирования();
		ПараметрыОткрытия.Раздел          =    "НастройкиРаботаСНоменклатурой";
		ПараметрыОткрытия.Заголовок       = НСтр("ru = 'Сервис 1С:Номенклатура'");
		ПараметрыОткрытия.ОписаниеРаздела = 
			НСтр("ru = 'Для возможности сопоставления номенклатуры необходимо включить использование сервиса 1С:Номенклатура.'");
			
		ОбщийМодульРаботаСНоменклатуройКлиент.ОткрытьФормуПанелиАдминистрирования(ПараметрыОткрытия, ЭтотОбъект, ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьБизнесСеть(Команда)
	
	ВыбраннаяНоменклатура = ВыбраннаяНоменклатура();
	
	Если ВыбраннаяНоменклатура.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбщийМодульРаботаСНоменклатуройКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСНоменклатуройКлиент");
	
	ПараметрыФормы = ОбщийМодульРаботаСНоменклатуройКлиент.ПараметрыФормыСопоставленияНоменклатурыСРубрикатором();
	ПараметрыФормы.СценарийИспользования = "ПубликацияТорговыхПредложений";
	ПараметрыФормы.Номенклатура          = ВыбраннаяНоменклатура;
	ПараметрыФормы.РежимСопоставления    = "ПоНоменклатуре";
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеСопоставленияНоменклатуры", ЭтотОбъект);
	
	ОбщийМодульРаботаСНоменклатуройКлиент.ОткрытьФормуСопоставленияНоменклатурыСРубрикатором(ПараметрыФормы, ЭтаФорма,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОшибки(Команда)
	
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПозицииТорговыхПредложений = Новый Массив;
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
	
		ПозицияТорговогоПредложения = Новый Структура("ПрайсЛист, Номенклатура, Характеристика, Упаковка");
		ДанныеСтроки = Элементы.Список.ДанныеСтроки(ВыделеннаяСтрока);
		ЗаполнитьЗначенияСвойств(ПозицияТорговогоПредложения, ДанныеСтроки);
		ПозицииТорговыхПредложений.Добавить(ПозицияТорговогоПредложения);
	
	КонецЦикла;
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ПрайсЛист"                  , ТорговоеПредложение);
	ПараметрыОткрытияФормы.Вставить("ПозицииТорговыхПредложений" , ПозицииТорговыхПредложений);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПросмотраПозицииТорговогоПредложения", ЭтотОбъект, ПараметрыОткрытияФормы);
	
	ТорговыеПредложенияКлиент.ОткрытьФормуДиагностикиТорговыхПредложений(ПараметрыОткрытияФормы, ЭтаФорма, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетПубликуемыеТовары(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("СформироватьПриОткрытии", Истина);
	
	Если НЕ ТорговоеПредложение.Пустая() Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("ПрайсЛист", ТорговоеПредложение);
		
		ПараметрыОткрытия.Вставить("Отбор", Отбор);
	
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ОткрытьФорму("Отчет.ПубликуемыеТорговыеПредложения.Форма", ПараметрыОткрытия, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область Синхронизация

&НаКлиенте
Процедура Синхронизовать(Команда)
	
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПозицииТорговогоПредложения = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Элементы.Список.ДанныеСтроки(ВыделеннаяСтрока);
		
		ПозицияТорговогоПредложения = Новый Структура("ПрайсЛист, Номенклатура, Характеристика, Упаковка");
		ЗаполнитьЗначенияСвойств(ПозицияТорговогоПредложения, ДанныеСтроки);
		ПозицииТорговогоПредложения.Добавить(ПозицияТорговогоПредложения);
		
	КонецЦикла;
	
	Отказ = Ложь;
	ОрганизацииТорговыхПредложений = ПолучитьОрганизацииОпубликованныхТорговыхПредложений(ТорговоеПредложение);
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОрганизацииТорговыхПредложений", ОрганизацииТорговыхПредложений);
	ДополнительныеПараметры.Вставить("ПозицииТорговогоПредложения", ПозицииТорговогоПредложения);
	ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
	ТорговыеПредложенияКлиент.ПодключитьОрганизацииТорговыхПредложений(ДополнительныеПараметры, Отказ);
	
	Если Не Отказ Тогда
		
		СинхронизоватьВФоне(
			ОперацияСинхронизация, ДополнительныеПараметры.ПозицииТорговогоПредложения, УникальныйИдентификатор);
		ОжидатьЗавершенияСинхронизации();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСФормой

&НаСервере
Процедура УстановитьНачальноеСостояниеЭлементовФормы()
	
	Элементы.ТорговоеПредложение.Видимость = НЕ КонтекстныйПереходТорговоеПредложение ИЛИ НЕ ЗначениеЗаполнено(ТорговоеПредложение);
	Элементы.СписокПрайсЛист.Видимость     = НЕ ЗначениеЗаполнено(ТорговоеПредложение);
	Элементы.Номенклатура.Видимость        = НЕ КонтекстныйПереходНоменклатура ИЛИ НЕ ЗначениеЗаполнено(Номенклатура);
	
	Элементы.ГруппаСтраницКатегорий.Видимость                               = ДоступнаПодсистемаРаботаСНоменклатурой;
	Элементы.СписокКонтекстноеМенюСопоставитьБизнесСеть.Видимость           = ДоступнаПодсистемаРаботаСНоменклатурой;
	Элементы.СписокКонтекстноеМенюСопоставитьРаботаСНоменклатурой.Видимость = ДоступнаПодсистемаРаботаСНоменклатурой;
	
	Элементы.ГруппаОперацияОбновленияТорговыхПредложенийАктивна.Видимость = Истина;
		
КонецПроцедуры
 
&НаСервере
Процедура УстановитьУсловноеОформление()
	
	#Область УсловноеОформлениеСписок
	
	#Область УсловноеОформлениеСписокВидимостьКолонок
	
	// Отображение гиперссылки в строках не содержащих ошибок
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Представление = НСтр("ru = 'Отображение гиперссылки в строках не содержащих ошибок'");
	
	Поле                         = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле                    = Новый ПолеКомпоновкиДанных("СостояниеПубликацииТорговыхПредложенийГиперссылка");
	
	Поле                         = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле                    = Новый ПолеКомпоновкиДанных("НомерКартинкиСтрокиГиперссылка");
	
	ЭлементОтбора                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Список.СостояниеПубликацииТорговыхПредложений");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора.ПравоеЗначение = Перечисления.СостоянияПубликацииПозицииТорговогоПредложения.Ошибка;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Отображение гиперссылки в строках содержащих ошибки
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Представление = НСтр("ru = 'Отображение гиперссылки в строках содержащих ошибки'");
	
	Поле                         = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле                    = Новый ПолеКомпоновкиДанных("СостояниеПубликацииТорговыхПредложенийБезГиперссылки");
	
	Поле                         = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле                    = Новый ПолеКомпоновкиДанных("НомерКартинкиСтрокиБезГиперссылки");
	
	Поле                         = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле                    = Новый ПолеКомпоновкиДанных("ДатаИзмененияБезГиперссылки");
	
	ЭлементОтбора                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Список.СостояниеПубликацииТорговыхПредложений");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Перечисления.СостоянияПубликацииПозицииТорговогоПредложения.Ошибка;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Отображение даты публикации для строк с состоянием отличным от "Опубликовано"
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Представление = НСтр("ru = 'Отображение даты публикации для строк с состоянием отличным от ""Опубликовано""'");
	
	Поле                         = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле                    = Новый ПолеКомпоновкиДанных("ДатаИзмененияБезГиперссылки");
	
	ЭлементОтбора                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Список.СостояниеПубликацииТорговыхПредложений");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора.ПравоеЗначение = Перечисления.СостоянияПубликацииПозицииТорговогоПредложения.Опубликовано;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Скрытие характеристики номенклатуры
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Представление = НСтр("ru = 'Скрытие характеристики номенклатуры'");
	
	Поле                         = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле                    = Новый ПолеКомпоновкиДанных("СписокХарактеристика");
	
	ЭлементОтбора                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Список.Характеристика");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	#КонецОбласти 
	
	#КонецОбласти 
	
	#Область УсловноеОформлениеКатегории
	
	Если ДоступнаПодсистемаРаботаСНоменклатурой Тогда
		
		ОбщийМодульРаботаСНоменклатуройСлужебныйКлиентСервер = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатуройСлужебныйКлиентСервер");
	
		// Оформление не используемых строк дерева категорий
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементУсловногоОформления.Представление = НСтр("ru = 'Оформление не используемых строк дерева категорий'");
		
		Поле                         = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		Поле.Поле                    = Новый ПолеКомпоновкиДанных("Категории");
		
		ЭлементОтбора                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Категории.КоличествоОбъектов");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = 0;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеСопоставленногоОбъектаБЭД);
		
		// Оформление строки категории "Автоматически из 1С:Номенклатура"
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементУсловногоОформления.Представление = НСтр("ru = 'Оформление строки категории ""Автоматически из 1С:Номенклатура""'");
		
		Поле                         = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		Поле.Поле                    = Новый ПолеКомпоновкиДанных("Категории");
		
		ЭлементОтбора                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Категории.Идентификатор");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ОбщийМодульРаботаСНоменклатуройСлужебныйКлиентСервер.ИдентификаторКатегорииРаботаСНоменклатурой();
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаАвтоматическиИзСервисаБЭД);
	
	КонецЕсли;
	
	#КонецОбласти 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеЭлементовФормы()

	Элементы.РежимПросмотраДереваКатегорийСписок.Пометка = 
			РежимПросмотраДереваКатегорий = "Список";
	Элементы.РежимПросмотраДереваКатегорийДеревоИспользуемых.Пометка = 
			РежимПросмотраДереваКатегорий = "ДеревоИспользуемых";
	Элементы.РежимПросмотраДереваКатегорийДеревоЦеликом.Пометка = 
			РежимПросмотраДереваКатегорий = "ДеревоЦеликом";

	Элементы.КатегорииКонтекстноеМенюРежимПросмотраДереваКатегорийСписок.Пометка = 
			РежимПросмотраДереваКатегорий = "Список";
	Элементы.КатегорииКонтекстноеМенюРежимПросмотраДереваКатегорийДеревоИспользуемых.Пометка = 
			РежимПросмотраДереваКатегорий = "ДеревоИспользуемых";
	Элементы.КатегорииКонтекстноеМенюРежимПросмотраДереваКатегорийДеревоЦеликом.Пометка = 
			РежимПросмотраДереваКатегорий = "ДеревоЦеликом";
	
КонецПроцедуры
 
#КонецОбласти

#Область РаботаСКатегориями

&НаКлиенте
Процедура ПослеПодключенияИнтернетПоддержкиПользователей(РезультатПодключения, ДополнительныеПараметры) Экспорт 
	
	Если РезультатПодключения = Неопределено Тогда
		Элементы.ГруппаСтраницКатегорий.ТекущаяСтраница = Элементы.ГруппаПодключениеИнтернетПоддержки;
	ИначеЕсли ТипЗнч(РезультатПодключения) = Тип("Структура")
		И РезультатПодключения.Свойство("Логин") Тогда
		ИнтернетПоддержкаПодключена = Истина;
		ОбновитьДеревоКатегорий();
	КонецЕсли;
	
КонецПроцедуры
 
&НаКлиенте
Процедура ОбновитьДеревоКатегорий()
	
	ПолучитьДанныеКатегорийВФоне(ТорговоеПредложение, Номенклатура, ДоступнаПодсистемаРаботаСНоменклатурой, ИнтернетПоддержкаПодключена,
		ОперацияЗагрузкаКатегорий, УникальныйИдентификатор);
	ОжидатьПолученияСпискаКатегорий();
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьПолученияСпискаКатегорий()

	Если НЕ ДоступнаПодсистемаРаботаСНоменклатурой Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ИнтернетПоддержкаПодключена Тогда
		Элементы.ГруппаСтраницКатегорий.ТекущаяСтраница = Элементы.ГруппаПодключениеИнтернетПоддержки;
		Оповещение = Новый ОписаниеОповещения("ПослеПодключенияИнтернетПоддержкиПользователей", ЭтотОбъект);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(Оповещение, ЭтотОбъект);
	ИначеЕсли ОперацияЗагрузкаКатегорий.Статус = "Выполнено" Тогда
		ПослеПолученияСпискаКатегорий(ОперацияЗагрузкаКатегорий, Неопределено);
	Иначе
		
		Элементы.ГруппаДлительнаяЗагрузкаКатегорий.ТекущаяСтраница = Элементы.ГруппаДекорацияДлительнаяЗагрузкаКатегорий;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПолученияСпискаКатегорий", ЭтотОбъект);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьПрогрессВыполнения      = Ложь;
		ПараметрыОжидания.ВыводитьОкноОжидания            = Ложь;
		ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
		ПараметрыОжидания.ВыводитьСообщения               = Ложь;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ОперацияЗагрузкаКатегорий, 
			ОписаниеОповещения, ПараметрыОжидания);
		
	КонецЕсли;

КонецПроцедуры
 
&НаСервереБезКонтекста
Процедура ПолучитьДанныеКатегорийВФоне(ТорговоеПредложение, Номенклатура, ДоступнаПодсистемаРаботаСНоменклатурой,
		ИнтернетПоддержкаПодключена, ДлительнаяОперация, УникальныйИдентификаторФормы)
	
	Если НЕ ДоступнаПодсистемаРаботаСНоменклатурой ИЛИ НЕ ИнтернетПоддержкаПодключена Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ДлительнаяОперация = Неопределено Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ДлительнаяОперация.ИдентификаторЗадания);
	КонецЕсли;
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ТорговоеПредложение", ТорговоеПредложение);
	ПараметрыВыполнения.Вставить("Номенклатура"       , Номенклатура);
	
	ОбщегоНазначенияРаботаСНоменклатуройСлужебный = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатуройСлужебный");
	ОбщегоНазначенияРаботаСНоменклатуройСлужебный.ПолучитьДанныеКатегорийВФоне(ПараметрыВыполнения, ДлительнаяОперация, УникальныйИдентификаторФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияСпискаКатегорий(РезультатВыполнения, ДополнительныеПараметры) Экспорт 

	Если РезультатВыполнения = Неопределено Тогда
		Возврат;
	ИначеЕсли РезультатВыполнения.Статус <> "Выполнено" Тогда
		Элементы.ГруппаДлительнаяЗагрузкаКатегорий.ТекущаяСтраница = Элементы.ГруппаДекорацияДлительнаяЗагрузкаКатегорийНеАктивна;
		Элементы.ГруппаСтраницКатегорий.ТекущаяСтраница = Элементы.ГруппаСтраницаПустыхКатегорий;
		Возврат;
	ИначеЕсли НЕ ПрисутствуютДанные Тогда
		Элементы.ГруппаДлительнаяЗагрузкаКатегорий.ТекущаяСтраница = Элементы.ГруппаДекорацияДлительнаяЗагрузкаКатегорийНеАктивна;
		Элементы.ГруппаСтраницКатегорий.ТекущаяСтраница = Элементы.ГруппаСтраницаПустыхКатегорий;
		Возврат;
	КонецЕсли;
	
	ДанныеКатегорий = БизнесСетьВызовСервера.ПолучитьУдалитьИзВременногоХранилища(РезультатВыполнения.АдресРезультата);
	
	ОбновитьОтображениеДереваКатегорий();
	
	ОперацияЗагрузкаКатегорий = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеДереваКатегорий()

	Если ДанныеКатегорий = Неопределено ИЛИ ДанныеКатегорий.Количество() = 0 Тогда
		Элементы.ГруппаСтраницКатегорий.ТекущаяСтраница = Элементы.ГруппаСтраницаПустыхКатегорий;
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаСтраницКатегорий.ТекущаяСтраница = Элементы.ГруппаСтраницаКатегорий;
	
	ОбщийМодульРаботаСНоменклатуройСлужебныйКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСНоменклатуройСлужебныйКлиентСервер");
	ИдентификаторКатегорииРаботаСНоменклатурой = ОбщийМодульРаботаСНоменклатуройСлужебныйКлиентСервер.ИдентификаторКатегорииРаботаСНоменклатурой();
	
	ИспользуемыеКатегории = Новый Массив;
	
	Для Каждого ДанныеКатегории Из ДанныеКатегорий Цикл
		ИспользуемыеКатегории.Добавить(ДанныеКатегории.Ключ);
	КонецЦикла;
	
	Если Не Открыта() Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОбновленияДереваКатегорий", ЭтотОбъект);
	
	ОбщийМодульРаботаСНоменклатуройСлужебныйКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСНоменклатуройСлужебныйКлиент");
	ОбщийМодульРаботаСНоменклатуройСлужебныйКлиент.ЗаполнитьДеревоПоВыбраннымКатегориям(ЭтотОбъект, Категории, ИспользуемыеКатегории, РежимПросмотраДереваКатегорий, ИдентификаторЗаданияПолучениеДанныхКатегории, Элементы.Категории, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ПослеОбновленияДереваКатегорий(РезультатВыполнения, ДополнительныеПараметры) Экспорт 
	
	Если Категории.ПолучитьЭлементы().Количество() = 0 Тогда
		Элементы.ГруппаСтраницКатегорий.ТекущаяСтраница = Элементы.ГруппаСтраницаПустыхКатегорий;
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаСтраницКатегорий.ТекущаяСтраница = Элементы.ГруппаСтраницаКатегорий;
	
	СтрокиДерева = Категории.ПолучитьЭлементы();

	УстановитьКоличествоОбъектовКатегорий(СтрокиДерева);
	УстановитьПредставлениеКатегорий(СтрокиДерева);

	Элементы.ГруппаДлительнаяЗагрузкаКатегорий.ТекущаяСтраница = Элементы.ГруппаДекорацияДлительнаяЗагрузкаКатегорийНеАктивна;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКоличествоОбъектовКатегорий(СтрокиДерева, Знач РодительскиеСтроки = Неопределено)

	Если РодительскиеСтроки = Неопределено Тогда
		РодительскиеСтроки = Новый Массив;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		КоличествоОбъектов = ДанныеКатегорий[СтрокаДерева.Идентификатор];
	
		Если КоличествоОбъектов <> Неопределено Тогда
			СтрокаДерева.КоличествоОбъектов = КоличествоОбъектов;
			Для Каждого РодительскаяСтрока Из РодительскиеСтроки Цикл
				РодительскаяСтрока.КоличествоОбъектов = РодительскаяСтрока.КоличествоОбъектов + КоличествоОбъектов;
			КонецЦикла;
		Иначе
			СтрокаДерева.КоличествоОбъектов = 0;
		КонецЕсли;
		
		РодительскиеСтроки.Добавить(СтрокаДерева);
		УстановитьКоличествоОбъектовКатегорий(СтрокаДерева.ПолучитьЭлементы(), РодительскиеСтроки);
		РодительскиеСтроки.Удалить(РодительскиеСтроки.ВГраница());
	
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОбязательныеКатегории()

	Если ДанныеКатегорий = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщийМодульРаботаСНоменклатуройСлужебныйКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСНоменклатуройСлужебныйКлиент");
	СтрокиСуществующихКатегорий = ОбщийМодульРаботаСНоменклатуройСлужебныйКлиент.СтрокиСуществующихКатегорий(Категории);
	КэшКатегорий = ОбщийМодульРаботаСНоменклатуройСлужебныйКлиент.ПолучитьКэшКатегорий();
	
	Для Каждого ДанныеКатегории Из ДанныеКатегорий Цикл
		ОбщийМодульРаботаСНоменклатуройСлужебныйКлиент.ДобавитьКатегориюВДерево(Категории, ДанныеКатегории.Ключ,
			РежимПросмотраДереваКатегорий, КэшКатегорий, СтрокиСуществующихКатегорий, Ложь);
	КонецЦикла;

КонецПроцедуры
 
&НаКлиенте
Процедура УстановитьПредставлениеКатегорий(СтрокиДерева)

	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		СтрокаДерева.Представление = СтрШаблон("%1 (%2)", СтрокаДерева.Наименование, СтрокаДерева.КоличествоОбъектов);
		УстановитьПредставлениеКатегорий(СтрокаДерева.ПолучитьЭлементы());
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура КатегорииПередРазворачиваниемЗавершение(ДлительнаяОперация, ДополнительныеПараметры) Экспорт 
	
	СтрокаДерева = Категории.НайтиПоИдентификатору(ДополнительныеПараметры.Строка);
	
	Если СтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиДерева = СтрокаДерева.ПолучитьЭлементы();
	
	ДобавитьОбязательныеКатегории();
	УстановитьКоличествоОбъектовКатегорий(СтрокиДерева);
	УстановитьПредставлениеКатегорий(СтрокиДерева);

	Элементы.ГруппаДлительнаяЗагрузкаКатегорий.ТекущаяСтраница = Элементы.ГруппаДекорацияДлительнаяЗагрузкаКатегорийНеАктивна;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИдентификаторыДочернихКатегорий(Строка, ВыбранныеКатегории)

	ПодчиненныеСтроки = Строка.ПолучитьЭлементы();
	
	Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
	
		ВыбранныеКатегории.Добавить(ПодчиненнаяСтрока.Идентификатор);
		ДобавитьИдентификаторыДочернихКатегорий(ПодчиненнаяСтрока, ВыбранныеКатегории)
	
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимПросмотраДереваКатегорий(УстанавливаемыйРежимПросмотра)

	Если РежимПросмотраДереваКатегорий = УстанавливаемыйРежимПросмотра Тогда
		Возврат;
	КонецЕсли;
	
	РежимПросмотраДереваКатегорий = УстанавливаемыйРежимПросмотра;
	ОбновитьОтображениеЭлементовФормы();
	ОбновитьОтображениеДереваКатегорий();
	СохранитьРежимПросмотраДереваКатегорий(РежимПросмотраДереваКатегорий);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьРежимПросмотраДереваКатегорий(РежимПросмотраДереваКатегорий)
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ТорговыеПредложения",
		"СостояниеПубликацииТоваров\РежимПросмотраДереваКатегорий", РежимПросмотраДереваКатегорий);
КонецПроцедуры
 
#КонецОбласти

#Область РаботаСДинамическимСписком

&НаСервере
Процедура УстановитьТекстЗапросаДинамическогоСписка()

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ОтключитьПубликацию",
		Ложь, ВидСравненияКомпоновкиДанных.Равно, , Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
	Если ДоступнаПодсистемаРаботаСНоменклатурой Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = Список.ТекстЗапроса;
		
		ОбщийМодульРаботаСНоменклатуройСлужебный = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатуройСлужебный");
		ОбщийМодульРаботаСНоменклатуройСлужебный.ДополнитьСписокПозицийТорговыхПредложенийРаботаСНоменклатурой(Список.ТекстЗапроса);
		
		ОбщийМодульРаботаСНоменклатуройСлужебныйКлиентСервер = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатуройСлужебныйКлиентСервер");
		Список.Параметры.УстановитьЗначениеПараметра("КатегорияРаботаСНоменклатурой", 
			ОбщийМодульРаботаСНоменклатуройСлужебныйКлиентСервер.ИдентификаторКатегорииРаботаСНоменклатурой());
		Список.Параметры.УстановитьЗначениеПараметра("КатегорияПрочее", 
			ОбщийМодульРаботаСНоменклатуройСлужебныйКлиентСервер.ИдентификаторКатегорииПрочее());
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтборПоСостоянию()
	
	ВыбранныеСостояния = Новый Массив;
	
	Если Элементы.ПоказатьСкрытьОпубликованные.Пометка Тогда
		ВыбранныеСостояния.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияПубликацииПозицииТорговогоПредложения.Опубликовано"));
	КонецЕсли;

	Если Элементы.ПоказатьСкрытьОжидающиеОбновления.Пометка Тогда
		ВыбранныеСостояния.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияПубликацииПозицииТорговогоПредложения.ОжидаетПубликации"));
	КонецЕсли;

	Если Элементы.ПоказатьСкрытьОшибки.Пометка Тогда
		ВыбранныеСостояния.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияПубликацииПозицииТорговогоПредложения.Ошибка"));
	КонецЕсли;

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "СостояниеПубликацииТорговыхПредложений",
		ВыбранныеСостояния, ВидСравненияКомпоновкиДанных.ВСписке, , ВыбранныеСостояния.Количество() <> 0,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);

КонецПроцедуры

&НаКлиенте
Процедура ПослеСопоставленияНоменклатуры(Результат, ДополнительныеПараметры) Экспорт 
	ОбновитьДанныеФормы();
КонецПроцедуры

#КонецОбласти

#Область КонтекстныеПереходы

&НаКлиенте
Функция ВыбраннаяНоменклатура()

	ВыбраннаяНоменклатура = Новый Массив;
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы.Список.ДанныеСтроки(ВыделеннаяСтрока);
		ВыбраннаяНоменклатура.Добавить(ДанныеСтроки.Номенклатура);
	КонецЦикла;
	
	Возврат ВыбраннаяНоменклатура;

КонецФункции

&НаКлиенте
Процедура ПослеПросмотраПозицииТорговогоПредложения(Результат, ДополнительныеПараметры) Экспорт 
	Перем ПозицияТорговогоПредложения;
	
	ОбновитьДанныеФормы();
	
	Если ДополнительныеПараметры.Свойство("ПозицияТорговогоПредложения", ПозицияТорговогоПредложения) Тогда
		ПроверитьЗаписиТорговыеПредложенияТорговойПлощадки(ПозицияТорговогоПредложения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьРаботаСНоменклатуройЗавершение(Результат, ДополнительныеПараметры) Экспорт 

	Если Результат = Неопределено ИЛИ НЕ Результат.ИспользоватьСервисРаботаСНоменклатурой Тогда
		Возврат;
	КонецЕсли;

	ИспользоватьСопоставление1СНоменклатура = Истина;
	ОткрытьФормуСопоставленияНоменклатуры(ДополнительныеПараметры.ВыбраннаяНоменклатура);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСопоставленияНоменклатуры(ВыбраннаяНоменклатура)

	ОбщийМодульРаботаСНоменклатуройКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСНоменклатуройКлиент");
	
	ПараметрыФормы = ОбщийМодульРаботаСНоменклатуройКлиент.ПараметрыФормыСопоставленийНоменклатуры();
	ПараметрыФормы.Номенклатура = ВыбраннаяНоменклатура;
	ПараметрыФормы.ОтображатьСопоставленные = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеСопоставленияНоменклатуры", ЭтотОбъект);
	
	ОбщийМодульРаботаСНоменклатуройКлиент.ОткрытьФормуСопоставленияНоменклатуры(ПараметрыФормы, ЭтотОбъект, 
		ОписаниеОповещения);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ИспользоватьСервисРаботаСНоменклатурой()
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьСервисРаботаСНоменклатурой");
КонецФункции
 
#КонецОбласти

#Область ТорговыеПредложенияТорговойПлощадки
 
&НаСервереБезКонтекста
Процедура ОбновитьТорговыеПредложенияТорговойПлощадкиВФоне(ДлительнаяОперация, ТорговоеПредложение, Номенклатура, УникальныйИдентификаторФормы)
	
	Если НЕ ДлительнаяОперация = Неопределено Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ДлительнаяОперация.ИдентификаторЗадания);
	КонецЕсли;
	
	НаименованиеЗадания	 = НСтр(
						"ru = 'Обновление позиций торговых предложений для синхронизации с сервисом 1С:Бизнес-сеть.'");
	ИмяПроцедуры		 = "ТорговыеПредложенияСлужебный.ОбновитьТорговыеПредложенияТорговойПлощадки";
	
	ПараметрыОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(ТорговоеПредложение) Тогда
		ПараметрыОтбора.Вставить("ПрайсЛист"             , ТорговоеПредложение);
	КонецЕсли;

	Если ЗначениеЗаполнено(Номенклатура) Тогда
		ПараметрыОтбора.Вставить("Номенклатура"          , Номенклатура);
	КонецЕсли;
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Отбор"                  , ПараметрыОтбора);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификаторФормы);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ЗапуститьВФоне              = Истина;
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры,
		ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьОбновлениеТорговыхПредложенияТорговойПлощадки()

	Если ОперацияОбновлениеДанныхПозицийТорговыхПредложений.Статус = "Выполнено" Тогда
		ПослеОбновленияТорговыхПредложенияТорговойПлощадки(ОперацияОбновлениеДанныхПозицийТорговыхПредложений, Неопределено);
	Иначе
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОбновленияТорговыхПредложенияТорговойПлощадки", ЭтотОбъект);
		ОповещениеОПрогрессеВыполнения = Новый ОписаниеОповещения("ОтобразитьСтатусОбновленияТорговыхПредложений", ЭтотОбъект);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьПрогрессВыполнения      = Ложь;
		ПараметрыОжидания.ВыводитьОкноОжидания            = Ложь;
		ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
		ПараметрыОжидания.ВыводитьСообщения               = Ложь;
		ПараметрыОжидания.ОповещениеОПрогрессеВыполнения  = ОповещениеОПрогрессеВыполнения;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ОперацияОбновлениеДанныхПозицийТорговыхПредложений, 
			ОписаниеОповещения, ПараметрыОжидания);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеОбновленияТорговыхПредложенияТорговойПлощадки(РезультатВыполнения, ДополнительныеПараметры) Экспорт 
	
	Элементы.ГруппаОперацияОбновленияТорговыхПредложенийАктивна.Видимость = Ложь;
	
	Если Открыта() Тогда
		Элементы.Список.Обновить();
	КонецЕсли;
	
	ПроверитьНаличиеДанныхСписка();
	
	ПроверитьЗаписиТорговыеПредложенияТорговойПлощадки();
	
	ОперацияОбновлениеДанныхПозицийТорговыхПредложений = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьСтатусОбновленияТорговыхПредложений(Прогресс, ДополнительныеПараметры) Экспорт 

	Если НЕ Прогресс.Статус = "Выполняется" Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтатистики = БизнесСетьВызовСервера.ПолучитьУдалитьИзВременногоХранилища(
		ОперацияОбновлениеДанныхПозицийТорговыхПредложений.АдресРезультата);
	
	Если ДанныеСтатистики = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьЗаголовкиКнопокСостояния(ДанныеСтатистики);
	
КонецПроцедуры

#КонецОбласти

#Область ПроверитьЗаписиТорговыеПредложенияТорговойПлощадки

&НаСервереБезКонтекста 
Процедура ПроверитьЗаписиТорговыеПредложенияТорговойПлощадкиНаСервере(
	ДлительнаяОперация, Знач Отбор, Знач УникальныйИдентификаторФормы)
	
	ТорговыеПредложенияСлужебный.ПроверитьЗаписиТорговыеПредложенияТорговойПлощадкиВФоне(
		ДлительнаяОперация, Отбор, УникальныйИдентификаторФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаписиТорговыеПредложенияТорговойПлощадки(Отбор = Неопределено)
	
	Если Отбор = Неопределено Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("ПрайсЛист", ТорговоеПредложение);
	КонецЕсли;
	
	ПроверитьЗаписиТорговыеПредложенияТорговойПлощадкиНаСервере(ОперацияПроверкаТорговыхПредложений, Отбор, УникальныйИдентификатор);
	ОжидатьПроверкуТорговыхПредложений();
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьПроверкуТорговыхПредложений()

	Если ОперацияПроверкаТорговыхПредложений.Статус = "Выполнено" Тогда
		ПослеПроверкиТорговыхПредложений(ОперацияПроверкаТорговыхПредложений, Неопределено);
	Иначе
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПроверкиТорговыхПредложений", ЭтотОбъект);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьПрогрессВыполнения      = Ложь;
		ПараметрыОжидания.ВыводитьОкноОжидания            = Ложь;
		ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
		ПараметрыОжидания.ВыводитьСообщения               = Ложь;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ОперацияПроверкаТорговыхПредложений, 
			ОписаниеОповещения, ПараметрыОжидания);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиТорговыхПредложений(РезультатВыполнения, ДополнительныеПараметры) Экспорт 
	
	Если РезультатВыполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	БизнесСетьСлужебныйКлиент.ВывестиСообщенияФоновогоЗадания(РезультатВыполнения);
	
	Если НЕ РезультатВыполнения.Статус = "Выполнено" Тогда
		Возврат;
	КонецЕсли;
	
	Если Открыта() Тогда
		Элементы.Список.Обновить();
	КонецЕсли;
	
	ОбновитьСтатистикуСостояний();
	
	ОперацияПроверкаТорговыхПредложений = Неопределено;
	
	Оповестить("ТорговыеПредложения_ОбновлениеСостоянийТорговыхПредложений", , ЭтотОбъект);
	
КонецПроцедуры
 
#КонецОбласти

#Область СтатистикаСостояний

&НаКлиенте
Процедура ОбновитьСтатистикуСостояний()

	ОбновитьСтатистикуСостоянийВФоне(ОперацияОбновлениеСтатистикиСостояний, ТорговоеПредложение, 
		Номенклатура, УникальныйИдентификатор);
	ОжидатьОбновлениеСтатистикиСостояний()

КонецПроцедуры
 
&НаСервереБезКонтекста
Процедура ОбновитьСтатистикуСостоянийВФоне(
	ДлительнаяОперация, Знач ТорговоеПредложение, Знач Номенклатура, Знач УникальныйИдентификаторФормы)

	Если НЕ ДлительнаяОперация = Неопределено Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ДлительнаяОперация.ИдентификаторЗадания);
	КонецЕсли;
	
	НаименованиеЗадания	 = НСтр(
		"ru = 'Обновление статистики состояний публикации позиций торговых предложений.'");
	ИмяПроцедуры		 = "Обработки.ТорговыеПредложения.ОбновитьСтатистикуСостояний";
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ПрайсЛист"    , ТорговоеПредложение);
	ПараметрыПроцедуры.Вставить("Номенклатура" , Номенклатура);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификаторФормы);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ЗапуститьВФоне              = Истина;
	ПараметрыВыполнения.КлючФоновогоЗадания         = "ОбновитьСтатистикуСостоянийВФоне";
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры,
		ПараметрыПроцедуры, ПараметрыВыполнения);

КонецПроцедуры

&НаКлиенте
Процедура ОжидатьОбновлениеСтатистикиСостояний()

	Если ОперацияОбновлениеСтатистикиСостояний.Статус = "Выполнено" Тогда
		ОтобразитьСтатистикуСостояний(ОперацияОбновлениеСтатистикиСостояний, Неопределено);
	Иначе
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтобразитьСтатистикуСостояний", ЭтотОбъект);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьПрогрессВыполнения      = Ложь;
		ПараметрыОжидания.ВыводитьОкноОжидания            = Ложь;
		ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
		ПараметрыОжидания.ВыводитьСообщения               = Ложь;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ОперацияОбновлениеСтатистикиСостояний, 
			ОписаниеОповещения, ПараметрыОжидания);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьСтатистикуСостояний(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено ИЛИ НЕ ДлительнаяОперация.Статус = "Выполнено" Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтатистики = БизнесСетьВызовСервера.ПолучитьУдалитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
	ОбновитьЗаголовкиКнопокСостояния(ДанныеСтатистики);
	ОперацияОбновлениеСтатистикиСостояний = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовкиКнопокСостояния(ДанныеСтатистики)

	Если ДанныеСтатистики.ЧастичныйПодсчетОпубликованных Тогда
		Элементы.ПоказатьСкрытьОпубликованные.Заголовок =
			СтрШаблон("%1 (%2)", НСтр("ru = 'Опубликовано'"),
			?(ДанныеСтатистики.КоличествоОпубликовано = 1000, "999+", Формат(ДанныеСтатистики.КоличествоОпубликовано, "ЧН=0")));
	Иначе
		Элементы.ПоказатьСкрытьОпубликованные.Заголовок =
			СтрШаблон("%1 (%2)", НСтр("ru = 'Опубликовано'"), Формат(ДанныеСтатистики.КоличествоОпубликовано, "ЧН=0"));
	КонецЕсли;
	Элементы.ПоказатьСкрытьОжидающиеОбновления.Заголовок =
		СтрШаблон("%1 (%2)", НСтр("ru = 'Ожидает публикации'"),
		?(ДанныеСтатистики.КоличествоОжидаетПубликации = 1000, "999+", Формат(ДанныеСтатистики.КоличествоОжидаетПубликации, "ЧН=0")));
	Элементы.ПоказатьСкрытьОшибки.Заголовок =
		СтрШаблон("%1 (%2)", НСтр("ru = 'Ошибки'"), 
		?(ДанныеСтатистики.КоличествоОшибки = 1000, "999+", Формат(ДанныеСтатистики.КоличествоОшибки, "ЧН=0")));

КонецПроцедуры
 
#КонецОбласти

#Область Фильтры

&НаСервереБезКонтекста
Функция ПолучитьОпубликованныеТорговыеПредложения()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СостоянияСинхронизацииТорговыеПредложения.ТорговоеПредложение КАК ТорговоеПредложение
	|ИЗ
	|	РегистрСведений.СостоянияСинхронизацииТорговыеПредложения КАК СостоянияСинхронизацииТорговыеПредложения";
	
	СписокТорговыхПредложений = Новый СписокЗначений;
	СписокТорговыхПредложений.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ТорговоеПредложение"));
	
	Возврат СписокТорговыхПредложений;

КонецФункции

&НаКлиенте
Процедура ПослеВыбораТорговогоПредложения(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт 

	Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	ТорговоеПредложение = ВыбранноеЗначение;

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ПрайсЛист", ТорговоеПредложение,
		ВидСравненияКомпоновкиДанных.Равно, , ЗначениеЗаполнено(ТорговоеПредложение),
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
	ОбновитьДанныеФормы();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокПрайсЛист", "Видимость", 
		НЕ ЗначениеЗаполнено(ТорговоеПредложение));
		
КонецПроцедуры

#КонецОбласти

#Область ДанныеСписка

&НаСервереБезКонтекста
Функция ПолучитьДанныеСписка(ТорговоеПредложение, Номенклатура)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Существует
	|ИЗ
	|	РегистрСведений.ТорговыеПредложенияТорговойПлощадки КАК ТорговыеПредложенияТорговойПлощадки
	|ГДЕ
	|	(НЕ &ЗаполненоТорговоеПредложение
	|			ИЛИ ТорговыеПредложенияТорговойПлощадки.ПрайсЛист = &ТорговоеПредложение)
	|	И (НЕ &ЗаполненаНоменклатура
	|			ИЛИ ТорговыеПредложенияТорговойПлощадки.Номенклатура = &Номенклатура)
	|	И НЕ ТорговыеПредложенияТорговойПлощадки.ОтключитьПубликацию";
	
	Запрос.УстановитьПараметр("ТорговоеПредложение"          , ТорговоеПредложение);
	Запрос.УстановитьПараметр("ЗаполненоТорговоеПредложение" , ЗначениеЗаполнено(ТорговоеПредложение));
	Запрос.УстановитьПараметр("Номенклатура"                 , Номенклатура);
	Запрос.УстановитьПараметр("ЗаполненаНоменклатура"        , ЗначениеЗаполнено(Номенклатура));
	
	ПрисутствуютДанные = НЕ Запрос.Выполнить().Пустой();
	
	Если ПрисутствуютДанные Тогда
		ИнформацияОбОтсутствииДанных = "";
	ИначеЕсли ЗначениеЗаполнено(ТорговоеПредложение) И ЗначениеЗаполнено(Номенклатура) Тогда
		ИнформацияОбОтсутствииДанных = СтрШаблон(
			НСтр("ru = 'Номенклатура <a href=""%1"">%2</a> не участвует в торговом предложении <a href=""%3"">%4</a>.'"), 
			ПолучитьНавигационнуюСсылку(Номенклатура), Номенклатура, ПолучитьНавигационнуюСсылку(ТорговоеПредложение), 
			ТорговоеПредложение);
	ИначеЕсли ЗначениеЗаполнено(ТорговоеПредложение) Тогда
		ИнформацияОбОтсутствииДанных = СтрШаблон(
			НСтр("ru = 'В торговом предложении <a href=""%1"">%2</a> отсутствуют публикуемые товары.'"), 
			ПолучитьНавигационнуюСсылку(ТорговоеПредложение), ТорговоеПредложение);
	ИначеЕсли ЗначениеЗаполнено(Номенклатура) Тогда
		ИнформацияОбОтсутствииДанных = СтрШаблон(
			НСтр("ru = 'Номенклатура <a href=""%1"">%2</a> не публикуется ни в одном торговом предложении.'"), 
			ПолучитьНавигационнуюСсылку(ТорговоеПредложение), ТорговоеПредложение);
	Иначе
		ИнформацияОбОтсутствииДанных = НСтр("ru = 'Отсутствуют опубликованные торговые предложения'");
	КонецЕсли;
	
	ФорматированныйДокумент = Новый ФорматированныйДокумент;
	ФорматированныйДокумент.УстановитьHTML(ИнформацияОбОтсутствииДанных, Новый Структура);
	
	ДанныеСписка = Новый Структура;
	ДанныеСписка.Вставить("ПрисутствуютДанные"           , ПрисутствуютДанные);
	ДанныеСписка.Вставить("ИнформацияОбОтсутствииДанных" , ФорматированныйДокумент.ПолучитьФорматированнуюСтроку());
	
	Возврат ДанныеСписка;

КонецФункции
 
&НаКлиенте
Процедура ПроверитьНаличиеДанныхСписка()

	ДанныеСписка = ПолучитьДанныеСписка(ТорговоеПредложение, Номенклатура);
	
	ПрисутствуютДанные = ДанныеСписка.ПрисутствуютДанные;
	
	Если ПрисутствуютДанные Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСписок;
	Иначе
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаДанныеОтсутствуют;
		Элементы.ДекорацияНадписьДанныеОтсутствуют.Заголовок = ДанныеСписка.ИнформацияОбОтсутствииДанных;
		Элементы.ГруппаСтраницКатегорий.ТекущаяСтраница = Элементы.ГруппаСтраницаПустыхКатегорий;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СерверныеОбработчикиЭлементовФормы

&НаСервере
Процедура ТорговоеПредложениеПриИзмененииНаСервере()

	Если ИнтернетПоддержкаПодключена
			И ДоступнаПодсистемаРаботаСНоменклатурой Тогда
		
		ПараметрыВыполнения = Новый Структура;
		ПараметрыВыполнения.Вставить("ТорговоеПредложение" , ТорговоеПредложение);
		ПараметрыВыполнения.Вставить("Номенклатура"        , Номенклатура);
		
		ПолучитьДанныеКатегорийВФоне(ТорговоеПредложение, Номенклатура, ДоступнаПодсистемаРаботаСНоменклатурой, ИнтернетПоддержкаПодключена,
			ОперацияЗагрузкаКатегорий, УникальныйИдентификатор);
		
	КонецЕсли;
	
	ОбновитьТорговыеПредложенияТорговойПлощадкиВФоне(ОперацияОбновлениеДанныхПозицийТорговыхПредложений, ТорговоеПредложение, Номенклатура, УникальныйИдентификатор);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ПрайсЛист", ТорговоеПредложение,
		ВидСравненияКомпоновкиДанных.Равно, , ЗначениеЗаполнено(ТорговоеПредложение),
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокПрайсЛист", "Видимость", 
		НЕ ЗначениеЗаполнено(ТорговоеПредложение));
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеФормыНаСервере()

	// Фоновые задания
	ОбновитьТорговыеПредложенияТорговойПлощадкиВФоне(ОперацияОбновлениеДанныхПозицийТорговыхПредложений, ТорговоеПредложение, Номенклатура, УникальныйИдентификатор);
	ПолучитьДанныеКатегорийВФоне(ТорговоеПредложение, Номенклатура, ДоступнаПодсистемаРаботаСНоменклатурой, ИнтернетПоддержкаПодключена, 
		ОперацияЗагрузкаКатегорий, УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеФормы()
	
	ОбновитьДанныеФормыНаСервере();
	
	ОжидатьПолученияСпискаКатегорий();
	ОжидатьОбновлениеТорговыхПредложенияТорговойПлощадки();
	
КонецПроцедуры

#КонецОбласти

#Область Синхронизация

&НаСервереБезКонтекста
Процедура СинхронизоватьВФоне(ДлительнаяОперация, ПозицииТорговогоПредложения, УникальныйИдентификатор)
	
	Если НЕ ДлительнаяОперация = Неопределено Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ДлительнаяОперация.ИдентификаторЗадания);
	КонецЕсли;
	
	НаименованиеЗадания	 = НСтр(
	"ru = 'Частичная синхронизация позиций торгового предложения.'");
	ИмяПроцедуры		 = "ТорговыеПредложенияСлужебный.СинхронизацияТорговыхПредложений";
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ПозицииТорговогоПредложения", ПозицииТорговогоПредложения);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ЗапуститьВФоне              = Истина;
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры,
		ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьЗавершенияСинхронизации()

	Если ОперацияСинхронизация.Статус = "Выполнено" Тогда
		ПослеСинхронизацииТорговыхПредложений(ОперацияСинхронизация, Неопределено);
	Иначе
		
		Элементы.ГруппаОперацияСинхронизация.Видимость = Истина;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеСинхронизацииТорговыхПредложений", ЭтотОбъект);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьПрогрессВыполнения      = Ложь;
		ПараметрыОжидания.ВыводитьОкноОжидания            = Ложь;
		ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
		ПараметрыОжидания.ВыводитьСообщения               = Истина;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ОперацияСинхронизация, ОписаниеОповещения, ПараметрыОжидания);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеСинхронизацииТорговыхПредложений(ОперацияСинхронизация, ДополнительныеПараметры) Экспорт
	
	Если ОперацияСинхронизация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаОперацияСинхронизация.Видимость = Ложь;
	
	Если ОперацияСинхронизация.Свойство("Сообщения") Тогда
		Для каждого Сообщение Из ОперацияСинхронизация.Сообщения Цикл 
			Сообщение.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
	Если Открыта() Тогда
		Элементы.Список.Обновить();
	КонецЕсли;
	
	Оповестить("ТорговыеПредложения_ОбновлениеСостоянийТорговыхПредложений", , ЭтотОбъект);
	
	ОбновитьСтатистикуСостояний();
	
	ОперацияСинхронизация = Неопределено;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОрганизацииОпубликованныхТорговыхПредложений(ТорговоеПредложение)
	
	Если ТорговоеПредложение.Пустая() Тогда
		
		Организации = ТорговыеПредложенияСлужебный.ПолучитьОрганизацииОпубликованныхТорговыхПредложений();
		
	Иначе
		
		Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТорговоеПредложение, "Организация");
		Организации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организация);
		
	КонецЕсли;
	
	Возврат Организации;
	
КонецФункции

&НаКлиенте
Процедура ПослеПодключенияОрганизации(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Организации = ДополнительныеПараметры.ОрганизацииТорговыхПредложений;
	ПодключаемаяОрганизация = ДополнительныеПараметры.ПодключаемаяОрганизация;
	
	Организации.Удалить(Организации.Найти(ПодключаемаяОрганизация));
	
	Отказ = Ложь;
	Если Организации.Количество() > 0 Тогда
		ТорговыеПредложенияКлиент.ПодключитьОрганизацииТорговыхПредложений(ДополнительныеПараметры, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если РезультатЗакрытия <> Неопределено 
		Или Не Отказ Тогда
		
		СинхронизоватьВФоне(
			ОперацияСинхронизация, ДополнительныеПараметры.ПозицииТорговогоПредложения, УникальныйИдентификатор);
		ОжидатьЗавершенияСинхронизации();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти