
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НавигационнаяСсылка = СтрШаблон("e1cib/app/%1", ИмяФормы);
	
	Если Не ТорговыеПредложения.ПравоНастройкиТорговыхПредложений(Истина) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	ИспользоватьВидыНоменклатуры = Ложь;
	ТорговыеПредложенияПереопределяемый.ФункциональнаяОпцияИспользуется(ИмяФормы, ИспользоватьВидыНоменклатуры);
	Если Не ИспользоватьВидыНоменклатуры Тогда
		ТорговыеПредложенияПереопределяемый.СообщитьОНеобходимостиИспользованияФункциональнойОпции(
			ИмяФормы, ИспользоватьВидыНоменклатуры, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаТорговыхПредложений = Метаданные.НайтиПоТипу(Метаданные.ОпределяемыеТипы.ТорговоеПредложение.Тип.Типы()[0]);
	ЕстьПравоПросмотраТаблицыТорговыхПредложений = ПравоДоступа("Просмотр", ТаблицаТорговыхПредложений);
	Элементы.Добавить.Доступность = ЕстьПравоПросмотраТаблицыТорговыхПредложений;
	УстановитьЗапросДинамическогоСписка(ТаблицаТорговыхПредложений);
	
	Элементы.СписокОрганизация.Видимость = ОбщегоНазначенияБЭД.ИспользуетсяНесколькоОрганизаций();
	
	Элементы.СписокПубликоватьОстатки.Видимость = ТорговыеПредложения.НастройкиПодсистемы().ИспользоватьПубликациюОстатков;
	
	УсловноеОформлениеГруппыСинхронизации();
	
	Элементы.ГруппаДлительнаяОперация.Видимость = Ложь;
	Элементы.ДекорацияДлительнаяОперацияНадписьРасширеннаяПодсказка.Заголовок = НСтр("ru = 'Подготовка данных...'");
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Элементы.НастроитьРасписание.Видимость = Ложь;
		Элементы.Расписание.Видимость = Ложь;
	КонецЕсли;
	
	ИмяОбъектаСоглашения = "Справочник." + Метаданные.НайтиПоТипу(Метаданные.РегистрыСведений.
		СостоянияСинхронизацииТорговыеПредложения.Измерения.ТорговоеПредложение.Тип.Типы()[0]).Имя;
		
	Элементы.СписокТорговоеПредложение.Заголовок = Метаданные.НайтиПоТипу(
		Метаданные.ОпределяемыеТипы.ТорговоеПредложение.Тип.Типы()[0]).ПредставлениеОбъекта;
	
	Элементы.ГруппаВнешниеПубликации.Видимость = Ложь;
	ПолучитьВнешниеПубликацииВФоне(ДлительнаяОперацияПолучитьВнешниеПрайсЛисты, УникальныйИдентификатор);
	
	ПроверитьИзменениеПрайсЛистовВФоне(ДлительнаяОперацияПроверкаИзменений, УникальныйИдентификатор);
	
	ТорговыеПредложенияСлужебный.НайтиДлительнуюОперациюСинхронизацииТорговыхПредложений(ДлительнаяОперацияСинхронизацияТорговыхПредложений);
			
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ОбработкаВыбораНаСервере(ВыбранноеЗначение);
	Элементы.Список.Обновить();
	
	Оповестить("ТорговыеПредложения_ИзменениеСинхронизации", ВыбранноеЗначение, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ТорговыеПредложения_ПослеЗаписи" 
		Или (ИмяСобытия = "БизнесСеть_РегистрацияОрганизаций" И Источник <> ЭтотОбъект) 
		Или (ИмяСобытия = "ТорговыеПредложения_ОбновлениеСостоянийТорговыхПредложений" И Источник <> ЭтотОбъект) Тогда
		
		ПроверитьИзменениеПрайсЛистов();
		
	ИначеЕсли ИмяСобытия = "СинхронизацияТорговыхПредложений_ПриИзменении" Тогда
		
		УсловноеОформлениеГруппыСинхронизации(Параметр);
		
	ИначеЕсли ИмяСобытия = "ТорговыеПредложения_ОбновлениеПубликаций" Тогда
		
		ПолучитьВнешниеПубликации();
		
	КонецЕсли;
	
	ТорговыеПредложенияКлиент.ОбработкаОповещенияСинхронизацииТорговыхПредложений(ИмяСобытия, Источник, Параметр,
		ДлительнаяОперацияСинхронизацияТорговыхПредложений, ПараметрыСинхронизации());
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОжидатьЗавершенияПолученияВнешнихПубликаций();
	
	Если ЗначениеЗаполнено(ДлительнаяОперацияПроверкаИзменений) Тогда
		ОжидатьПроверкиПрайсЛистов();
	КонецЕсли;
	
	ТорговыеПредложенияКлиент.ОтобразитьСостояниеСинхронизацииТорговыхПредложений(ПараметрыСинхронизации(), 
		ДлительнаяОперацияСинхронизацияТорговыхПредложений);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияДлительнаяОперацияНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьФоновоеЗадание" Тогда
		СтандартнаяОбработка = Ложь;
		ДлительнаяОперацияСинхронизацияТорговыхПредложений = 
			ТорговыеПредложенияВызовСервера.ОтменитьФоновоеЗадание(ДлительнаяОперацияСинхронизацияТорговыхПредложений);
		Элементы.ГруппаДлительнаяОперация.Видимость = Ложь;
		УстановитьТорговоеПредложениеСинхронизации(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическиСинхронизироватьПриИзменении(Элемент)
	
	ИзменитьРегламентноеЗаданиеСинхронизацияТорговыхПредложений("Использование", АвтоматическиСинхронизировать);
	Оповестить("СинхронизацияТорговыхПредложений_ПриИзменении", АвтоматическиСинхронизировать);
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешниеПубликацииНажатие(Элемент)
	
	ОткрытьФорму("Обработка.ТорговыеПредложения.Форма.ВнешниеПубликации");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОчиститьСообщения();
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ПоляДополнительныхНастроек           = "СписокАдресЭлектроннойПочты, СписокДополнительноеОписание";
	ПоляДополнительныхНастроекПубликации = "СписокПубликоватьЦены, СписокПубликоватьСрокиПоставки, 
										   |СписокПубликоватьОстатки, СписокПубликоватьРегионыДоступностиТоваров";
	
	ОткрытьФормуДиагностики = Ложь;
	Если Поле = Элементы.СписокОписаниеОшибки 
		И ТекущиеДанные.Состояние = 
			ПредопределенноеЗначение(
				"Перечисление.СостоянияСинхронизацииТорговыеПредложения.ОшибкаСинхронизации") Тогда
		ОткрытьФормуДиагностики = Истина;
	КонецЕсли;
	Если Поле = Элементы.НомерКартинкиПредупреждения И ТекущиеДанные.НомерКартинкиПредупреждения = 0 Тогда
		ОткрытьФормуДиагностики = Истина;
	КонецЕсли;
	
	Если СтрНайти(ПоляДополнительныхНастроек, Поле.Имя) Тогда
		ТорговыеПредложенияКлиент.ОткрытьФормуНастроекПубликации(ТекущиеДанные.ТорговоеПредложение, ЭтотОбъект);
	ИначеЕсли СтрНайти(ПоляДополнительныхНастроекПубликации, Поле.Имя) Тогда
		ТекущийЭлементИмя = Поле.Имя;
		ИмяРеквизита = СтрЗаменить(ТекущийЭлементИмя, "Список", "");
		ИзменитьЗаписьРегистра(ТекущиеДанные.ТорговоеПредложение, ИмяРеквизита, Не ТекущиеДанные[ИмяРеквизита]);
		Элементы.Список.Обновить();
		Оповестить("ТорговыеПредложения_ПослеЗаписи");
	ИначеЕсли ОткрытьФормуДиагностики Тогда
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("ПрайсЛист", ТекущиеДанные.ТорговоеПредложение);
		ПараметрыОткрытияФормы.Вставить("ТребуетсяВыполнитьПроверкуДанных", Истина);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеИсправленияОшибокТорговыхПредложений", ЭтотОбъект);
		
		ТорговыеПредложенияКлиент.ОткрытьФормуДиагностикиТорговыхПредложений(
			ПараметрыОткрытияФормы, ЭтотОбъект, ОписаниеОповещения);
		
	ИначеЕсли Поле = Элементы.СписокОписаниеОшибки И Не ТекущиеДанные.Отключено И ТекущиеДанные.Состояние
		= ПредопределенноеЗначение(
				"Перечисление.СостоянияСинхронизацииТорговыеПредложения.СинхронизированоЧастично") Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("ПрайсЛист", ТекущиеДанные.ТорговоеПредложение);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Отбор);
		ПараметрыФормы.Вставить("СостояниеПубликации", "Ошибка, ОжидаетПубликации");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеИсправленияОшибокТорговыхПредложений", ЭтотОбъект);
		
		ПараметрыОткрытияФормы = ТорговыеПредложенияКлиент.ПараметрыОткрытияФормы();
		
		ПараметрыОткрытияФормы.ПараметрыФормы     = ПараметрыФормы;
		ПараметрыОткрытияФормы.ВладелецФормы      = ЭтотОбъект;
		ПараметрыОткрытияФормы.ОписаниеОповещения = ОписаниеОповещения;
		
		ТорговыеПредложенияКлиент.ОткрытьФормуСостоянияПубликацииТоваров(ПараметрыОткрытияФормы);
		
	Иначе
		ОчиститьСообщения();
		ФормаОбъектаСоглашения = ИмяОбъектаСоглашения + ".ФормаОбъекта";
		ПараметрыОткрытия = Новый Структура("Ключ", ТекущиеДанные.ТорговоеПредложение);
		ОткрытьФорму(ФормаОбъектаСоглашения, ПараметрыОткрытия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередУдалением(Элемент, Отказ)
	
	УдалитьВосстановитьПубликациюОбработчик(Элемент, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Добавить(Команда)
	
	ОчиститьСообщения();
	ИмяОткрываемойФормы = СтрШаблон("%1.ФормаВыбора", ИмяОбъектаСоглашения);
	ОповещениеКомандаДобавить = Новый ОписаниеОповещения("КомандаДобавитьЗавершение", ЭтотОбъект);
	ОткрытьФорму(ИмяОткрываемойФормы, , ЭтотОбъект, УникальныйИдентификатор, , , ОповещениеКомандаДобавить);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВосстановитьПубликацию(Элемент, Отказ = Неопределено)
	
	УдалитьВосстановитьПубликациюОбработчик(Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьВключитьПубликацию(Элемент, Отказ = Неопределено)
	
	Отказ = Истина;
	
	Если Элементы.Список.ТекущиеДанные <> Неопределено Тогда
		
		ПараметрыМетода = 
			ТорговыеПредложенияСлужебныйКлиентСервер.НовыйПараметрыИзмененияСостоянияТорговыхПредложений();
		ПараметрыМетода.ТорговыеПредложения = Элементы.Список.ВыделенныеСтроки;
		
		Если Элементы.Список.ТекущиеДанные.Отключено = Истина Тогда
			Действие = НСтр("ru = 'Включить'");
			ПараметрыМетода.ЭтоВключениеПубликации = Истина;
		Иначе
			Действие = НСтр("ru = 'Отключить'");
			ПараметрыМетода.ЭтоОтключениеПубликации = Истина;
		КонецЕсли;
			
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтключитьВключитьПубликациюПродолжение",
			ЭтотОбъект, ПараметрыМетода);
			
		ТекстВопроса = СтрШаблон(НСтр("ru = '%1 публикацию торгового предложения?'"), Действие);
		
		ПоказатьВопрос(ОписаниеОповещения,
			ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да, НСтр("ru = 'Отключение (включение) публикации.'")); 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьТорговыеПредложения(Команда)
	
	Отказ = Ложь;
	ОрганизацииТорговыхПредложений = ПолучитьОрганизацииОпубликованныхТорговыхПредложений();
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОрганизацииТорговыхПредложений", ОрганизацииТорговыхПредложений);
	ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
	ТорговыеПредложенияКлиент.ПодключитьОрганизацииТорговыхПредложений(ДополнительныеПараметры, Отказ);
	
	Если Не Отказ Тогда
		
		ПараметрыСинхронизации = ПараметрыСинхронизации();
		ТорговыеПредложенияКлиент.ВыполнитьСинхронизациюТорговыхПредложений(
			ПараметрыСинхронизации,
			ДлительнаяОперацияСинхронизацияТорговыхПредложений);
		
		ПолучитьВнешниеПубликации();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписание(Команда)
	
	ИмяЗадания = ТорговыеПредложенияСлужебныйКлиент.ИмяЗаданияСинхронизацияТорговыхПредложений();
	Оповещение = Новый ОписаниеОповещения("НастроитьРасписаниеЗавершение", 	ЭтотОбъект, ИмяЗадания);
	ОбщегоНазначенияБЭДКлиент.НастроитьРасписаниеРегламентногоЗадания(ИмяЗадания, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПригласитьПокупателей(Команда)
	
	ОчиститьСообщения();
	
	// Приглашение покупателей в сервис.
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимПриглашения", "Покупатели");
	ОткрытьФорму("Обработка.БизнесСеть.Форма.ОтправкаПриглашенийКонтрагентам", ПараметрыОткрытия);

КонецПроцедуры

&НаКлиенте
Процедура СостояниеПубликации(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Обработка.ТорговыеПредложения.Форма.СостояниеПубликацииТоваров.ОткрытиеФормы");
	
	Отбор = Новый Структура("ПрайсЛист", ТекущиеДанные.ТорговоеПредложение);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
	ПараметрыОткрытияФормы = ТорговыеПредложенияКлиент.ПараметрыОткрытияФормы();
	
	ПараметрыОткрытияФормы.ПараметрыФормы = ПараметрыФормы;
	ПараметрыОткрытияФормы.ВладелецФормы  = ЭтотОбъект;
	
	ТорговыеПредложенияКлиент.ОткрытьФормуСостоянияПубликацииТоваров(ПараметрыОткрытияФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура Синхронизировать(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПрайсЛист = ТекущиеДанные.ТорговоеПредложение;
	ОрганизацииТорговыхПредложений = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущиеДанные.Организация);
	
	Отказ = Ложь;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОрганизацииТорговыхПредложений", ОрганизацииТорговыхПредложений);
	ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
	ДополнительныеПараметры.Вставить("ПрайсЛист", ПрайсЛист);
	ТорговыеПредложенияКлиент.ПодключитьОрганизацииТорговыхПредложений(ДополнительныеПараметры, Отказ);
	
	Если Не Отказ Тогда
		
		ПараметрыСинхронизации = ПараметрыСинхронизации();
		ПараметрыСинхронизации.ПрайсЛист = ПрайсЛист;
		
		ТорговыеПредложенияКлиент.ВыполнитьСинхронизациюТорговыхПредложений(
			ПараметрыСинхронизации,
			ДлительнаяОперацияСинхронизацияТорговыхПредложений);
		
		ПолучитьВнешниеПубликации();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешняяСсылка(Команда)
	
	ПараметрыОткрытияФормы = ТорговыеПредложенияКлиент.ПараметрыОткрытияФормы();
	ПараметрыОткрытияФормы.ПараметрыФормы = Новый Структура("ПрайсЛист", Элементы.Список.ТекущиеДанные.ТорговоеПредложение);
	ПараметрыОткрытияФормы.ВладелецФормы = ЭтотОбъект;
	ПараметрыОткрытияФормы.Уникальность = Истина;
	ПараметрыОткрытияФормы.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ТорговыеПредложенияКлиент.ОткрытьФормуВнешнейСсылкиПрайсЛиста(ПараметрыОткрытияФормы);

КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура КомандаДобавитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Оповестить("ТорговыеПредложения_ОбновлениеСостоянийТорговыхПредложений", , ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВосстановитьПубликациюПродолжение(РезультатВопроса, ПараметрыМетода) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ИзменитьСостояниеПубликацииПрайсЛистов(ПараметрыМетода);
		Элементы.Список.Обновить();
		Оповестить("ТорговыеПредложения_ИзменениеСинхронизации", , ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьВключитьПубликациюПродолжение(РезультатВопроса, ПараметрыМетода) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ИзменитьСостояниеПубликацииПрайсЛистов(ПараметрыМетода);
		Элементы.Список.Обновить();
		
		Оповестить("ТорговыеПредложения_ИзменениеСинхронизации",, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбработкаВыбораНаСервере(ТорговоеПредложение, ДополнительныеПараметры = Неопределено)
	
	Отбор = Новый Структура("ТорговоеПредложение", ТорговоеПредложение);
	Выборка = РегистрыСведений.СостоянияСинхронизацииТорговыеПредложения.Выбрать(Отбор);
	
	Если Не Выборка.Следующий() Тогда
		РегистрыСведений.СостоянияСинхронизацииТорговыеПредложения.СоздатьИзменитьЗаписьРегистра(
			ТорговоеПредложение, "ПубликоватьЦены", Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзменитьСостояниеПубликацииПрайсЛистов(ПараметрыМетода)
	
	ТорговыеПредложенияСлужебный.ИзменитьСостояниеПубликацииПрайсЛистов(ПараметрыМетода);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Оформление.
	УсловноеОформление.Элементы.Очистить();
	
	// Отображение информации об ошибке.
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Отображение информации об ошибке'");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокОписаниеОшибки.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Состояние");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СостоянияСинхронизацииТорговыеПредложения.ОшибкаСинхронизации;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Состояние");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СостоянияСинхронизацииТорговыеПредложения.СинхронизированоЧастично;
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Отображение гиперссылки перехода к списку проблемных позиций
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Отображение информации об ошибке'");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокОписаниеОшибки.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Состояние");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СостоянияСинхронизацииТорговыеПредложения.СинхронизированоЧастично;
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Перейти к неопубликованным товарам'"));
	
	// Представление состояния при статусе к удалению.
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Представление состояния при удалении'");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСостояние.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ДействиеСинхронизации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ДействияСинхронизацииТорговыеПредложения.Удаление;
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Удаление публикации. Требуется синхронизация'"));
	
	// Представление состояния при отключении публикации (до синхронизации).
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Представление состояния при отключении публикации'");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСостояние.Имя);
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ОтборЭлементаСостояние = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлементаСостояние.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Состояние");
	ОтборЭлементаСостояние.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлементаСостояние.ПравоеЗначение = Перечисления.СостоянияСинхронизацииТорговыеПредложения.ТребуетсяСинхронизация;
	ОтборЭлементаОтключено = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлементаОтключено.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Отключено");
	ОтборЭлементаОтключено.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлементаОтключено.ПравоеЗначение = Истина;
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Отключение публикации. Требуется синхронизация'"));
	
	// Представление состояния при отключении публикации (после синхронизации).
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Представление состояния при отключении публикации'");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСостояние.Имя);
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ОтборЭлементаСостояние = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлементаСостояние.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Состояние");
	ОтборЭлементаСостояние.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлементаСостояние.ПравоеЗначение = Перечисления.СостоянияСинхронизацииТорговыеПредложения.Синхронизировано;
	ОтборЭлементаОтключено = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлементаОтключено.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Отключено");
	ОтборЭлементаОтключено.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлементаОтключено.ПравоеЗначение = Истина;
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Отключено'"));
	
	// Цвет текста при статусе к удалению.
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Цвет текста при статусе к удалению'");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Список.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ДействиеСинхронизации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ДействияСинхронизацииТорговыеПредложения.Удаление;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЭДЦвет);
	
	// Представление пустого значения почты для уведомления.
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Представление пустого значения электронной почты для уведомления'");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокАдресЭлектроннойПочты.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.АдресЭлектроннойПочты");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "";
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<заполнить>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЭДЦвет);
	
	// Представление пустого значения описания для описания.
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Представление пустого дополнительного описания'");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокДополнительноеОписание.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ДополнительноеОписание");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Укажите описание>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЭДЦвет);
	
	// Представление состояния торгового предложения в момент синхронизации
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Представление торгового предложения в момент синхронизации'");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСостояние.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ТорговоеПредложение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ТорговоеПредложениеСинхронизации");
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Выполняется синхронизация'"));
	
	// Представление даты синхронизации в момент синхронизации
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Представление даты синхронизации в момент синхронизации'");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокДатаСинхронизации.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокОписаниеОшибки.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ТорговоеПредложение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ТорговоеПредложениеСинхронизации");
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеЗавершение(Расписание, ИмяЗадания) Экспорт
	
	Если Расписание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Расписание.Заголовок = Расписание;
	
	Оповестить(
		"СинхронизацияТорговыхПредложений_ПриИзменении", АвтоматическиСинхронизировать);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗапросДинамическогоСписка(ТаблицаТорговыхПредложений)
	
	ОсновнаяТаблица = ТаблицаТорговыхПредложений.ПолноеИмя();
	ТекстЗапросаСписка =
	"ВЫБРАТЬ
	|	ТорговыеПредложенияТорговойПлощадки.ПрайсЛист КАК ПрайсЛист,
	|	МИНИМУМ(ВЫБОР
	|		КОГДА ТорговыеПредложенияТорговойПлощадки.ЕстьПредупреждения
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ) КАК НомерКартинкиПредупреждения
	|ПОМЕСТИТЬ НомераКартинокПредупреждений
	|ИЗ
	|	РегистрСведений.ТорговыеПредложенияТорговойПлощадки КАК ТорговыеПредложенияТорговойПлощадки
	|ГДЕ
	|	ТорговыеПредложенияТорговойПлощадки.Публикуется
	|СГРУППИРОВАТЬ ПО
	|	ТорговыеПредложенияТорговойПлощадки.ПрайсЛист
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПрайсЛист
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостояниеСинхронизации.ТорговоеПредложение КАК ТорговоеПредложение,
	|	СостояниеСинхронизации.ДатаСинхронизации КАК ДатаСинхронизации,
	|	СостояниеСинхронизации.Состояние КАК Состояние,
	|	СостояниеСинхронизации.ДействиеСинхронизации КАК ДействиеСинхронизации,
	|	СостояниеСинхронизации.ОписаниеОшибки КАК ОписаниеОшибки,
	|	ВЫБОР
	|		КОГДА СостояниеСинхронизации.АдресЭлектроннойПочты = """"
	|			ТОГДА СостояниеСинхронизации.АдресЭлектроннойПочты
	|		ИНАЧЕ СостояниеСинхронизации.АдресЭлектроннойПочты + &АдресЭлектроннойПочтыИзменить
	|	КОНЕЦ КАК АдресЭлектроннойПочты,
	|	СостояниеСинхронизации.ДополнительноеОписание КАК ДополнительноеОписание,
	|	СостояниеСинхронизации.Организация КАК Организация,
	|	ПРЕДСТАВЛЕНИЕ(СостояниеСинхронизации.ТорговоеПредложение) КАК Наименование,
	|	ВЫБОР
	|		КОГДА СостояниеСинхронизации.ТорговоеПредложение = &ТорговоеПредложениеСинхронизации
	|			ТОГДА 5
	|		КОГДА
	|			СостояниеСинхронизации.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСинхронизацииТорговыеПредложения.Синхронизировано)
	|		И НЕ СостояниеСинхронизации.Отключено
	|			ТОГДА 0
	|		КОГДА
	|			СостояниеСинхронизации.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСинхронизацииТорговыеПредложения.СинхронизированоЧастично)
	|		И НЕ СостояниеСинхронизации.Отключено
	|			ТОГДА 4
	|		КОГДА
	|			СостояниеСинхронизации.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСинхронизацииТорговыеПредложения.Синхронизировано)
	|		И СостояниеСинхронизации.Отключено
	|			ТОГДА 3
	|		КОГДА
	|			СостояниеСинхронизации.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСинхронизацииТорговыеПредложения.ТребуетсяСинхронизация)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК НомерКартинкиСтроки,
	|	СостояниеСинхронизации.ПубликоватьЦены КАК ПубликоватьЦены,
	|	СостояниеСинхронизации.ПубликоватьСрокиПоставки КАК ПубликоватьСрокиПоставки,
	|	СостояниеСинхронизации.ПубликоватьОстатки КАК ПубликоватьОстатки,
	|	СостояниеСинхронизации.ПубликоватьРегионыДоступностиТоваров КАК ПубликоватьРегионыДоступностиТоваров,
	|	СостояниеСинхронизации.Отключено КАК Отключено,
	|	ВЫБОР
	|		КОГДА СостояниеСинхронизации.Отключено
	|			ТОГДА 1
	|		ИНАЧЕ ЕСТЬNULL(НомераКартинокПредупреждений.НомерКартинкиПредупреждения, 1)
	|	КОНЕЦ КАК НомерКартинкиПредупреждения
	|ИЗ
	|	РегистрСведений.СостоянияСинхронизацииТорговыеПредложения КАК СостояниеСинхронизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТорговыхПредложений КАК ТорговыеПредложения
	|		ПО СостояниеСинхронизации.ТорговоеПредложение = ТорговыеПредложения.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ НомераКартинокПредупреждений КАК НомераКартинокПредупреждений
	|		ПО СостояниеСинхронизации.ТорговоеПредложение = НомераКартинокПредупреждений.ПрайсЛист";
	ТекстЗапросаСписка = СтрЗаменить(ТекстЗапросаСписка, "ТаблицаТорговыхПредложений", ОсновнаяТаблица);
	
	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	СвойстваСписка.ОсновнаяТаблица              = ОсновнаяТаблица;
	СвойстваСписка.ТекстЗапроса                 = ТекстЗапросаСписка;
	СвойстваСписка.ДинамическоеСчитываниеДанных = Истина;
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.Список, СвойстваСписка);
	
	Список.Параметры.УстановитьЗначениеПараметра("ТорговоеПредложениеСинхронизации", Неопределено);
	
	ЗначениеПараметра = СтрШаблон(" %1", НСтр("ru='<изменить>'"));
	Список.Параметры.УстановитьЗначениеПараметра("АдресЭлектроннойПочтыИзменить", ЗначениеПараметра);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьВнешниеПубликацииВФоне(ДлительнаяОперацияПолучитьВнешниеПрайсЛисты, УникальныйИдентификатор)
	
	Если НЕ ДлительнаяОперацияПолучитьВнешниеПрайсЛисты = Неопределено Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ДлительнаяОперацияПолучитьВнешниеПрайсЛисты.ИдентификаторЗадания);
	КонецЕсли;
	
	ЗарегистрированныеОрганизации = Новый Массив;
	ЗаполнитьЗарегистрированныеОрганизации(ЗарегистрированныеОрганизации);
	
	Если ЗарегистрированныеОрганизации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Задание = Новый Структура("ИмяПроцедуры, Наименование, ПараметрыПроцедуры");
	Задание.Наименование = НСтр("ru = '1С:Торговая площадка. Получение внешних публикаций.'");
	Задание.ИмяПроцедуры = "ТорговыеПредложенияСлужебный.ПолучитьВнешниеПрайсЛисты";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = Задание.Наименование;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.ОжидатьЗавершение = 0.2;
	
	ДлительнаяОперацияПолучитьВнешниеПрайсЛисты = ДлительныеОперации.ВыполнитьВФоне(Задание.ИмяПроцедуры,
		Задание.ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьЗавершенияПолученияВнешнихПубликаций()
	
	Если ДлительнаяОперацияПолучитьВнешниеПрайсЛисты <> Неопределено 
		И ДлительнаяОперацияПолучитьВнешниеПрайсЛисты.Статус = "Выполняется" Тогда
	
		// Инициализация обработчика ожидания завершения длительной операции.
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Получение внешних публикаций.'");
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
		ПараметрыОжидания.ВыводитьСообщения = Истина;
		ПараметрыОжидания.Вставить("ИдентификаторЗадания", ДлительнаяОперацияПолучитьВнешниеПрайсЛисты.ИдентификаторЗадания);
		ПараметрыОжидания.Интервал = 1;
		ОбработкаЗавершенияПоиска = Новый ОписаниеОповещения("ПолучитьВнешниеПрайсЛистыЗавершение",
			ЭтотОбъект, ДлительнаяОперацияПолучитьВнешниеПрайсЛисты);
			
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			ДлительнаяОперацияПолучитьВнешниеПрайсЛисты, ОбработкаЗавершенияПоиска, ПараметрыОжидания);
		
	Иначе
		
		ПолучитьВнешниеПрайсЛистыЗавершение(
			ДлительнаяОперацияПолучитьВнешниеПрайсЛисты, ДлительнаяОперацияПолучитьВнешниеПрайсЛисты);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВнешниеПрайсЛистыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	// Вывод сообщений из фонового задания.
	Отказ = Ложь;
	ТорговыеПредложенияКлиент.ОбработатьОшибкиФоновогоЗадания(Результат, Отказ);
	
	Если Результат <> Неопределено И Результат.Статус = "Выполнено" Тогда
		ПолучитьВнешниеПрайсЛистыОбработка(Результат.АдресРезультата);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодключенияОрганизации(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Организации = ДополнительныеПараметры.ОрганизацииТорговыхПредложений;
	ПодключаемаяОрганизация = ДополнительныеПараметры.ПодключаемаяОрганизация;
	
	ПрайсЛист = Неопределено;
	ДополнительныеПараметры.Свойство("ПрайсЛист", ПрайсЛист);
	
	Организации.Удалить(Организации.Найти(ПодключаемаяОрганизация));
	
	Отказ = Ложь;
	Если Организации.Количество() > 0 Тогда
		ТорговыеПредложенияКлиент.ПодключитьОрганизацииТорговыхПредложений(ДополнительныеПараметры, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если РезультатЗакрытия <> Неопределено 
		Или Не Отказ Тогда
		
		ПараметрыСинхронизации = ПараметрыСинхронизации();
		ПараметрыСинхронизации.ПрайсЛист = ПрайсЛист;
		ТорговыеПредложенияКлиент.ВыполнитьСинхронизациюТорговыхПредложений(
			ПараметрыСинхронизации,
			ДлительнаяОперацияСинхронизацияТорговыхПредложений);
		
		ПолучитьВнешниеПубликации();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьВнешниеПрайсЛистыОбработка(АдресРезультата)
	
	ДлительнаяОперацияПолучитьВнешниеПрайсЛисты = Неопределено;
	Результат = Неопределено;
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		РезультатЗапроса = БизнесСеть.ПолучитьУдалитьИзВременногоХранилища(АдресРезультата);
		Если РезультатЗапроса <> Неопределено И РезультатЗапроса.Количество() > 0 Тогда
			Элементы.ВнешниеПубликации.Заголовок = НСтр("ru = 'Внешние публикации'")
				+ " (" + РезультатЗапроса.Количество() + ")";
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ГруппаВнешниеПубликации.Видимость = Результат <> Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьИзменениеПрайсЛистов()
	
	ПроверитьИзменениеПрайсЛистовВФоне(ДлительнаяОперацияПроверкаИзменений, УникальныйИдентификатор);
	ОжидатьПроверкиПрайсЛистов();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроверитьИзменениеПрайсЛистовВФоне(ДлительнаяОперацияПроверкаИзменений, УникальныйИдентификатор)

	Если НЕ ДлительнаяОперацияПроверкаИзменений = Неопределено Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ДлительнаяОперацияПроверкаИзменений.ИдентификаторЗадания);
	КонецЕсли;
	
	НаименованиеЗадания	 = НСтр(
		"ru = 'Обновление статистики состояний публикации позиций торговых предложений.'");
	ИмяПроцедуры		 = "ТорговыеПредложенияСлужебный.ПроверитьИзменениеПрайсЛистовВФоне";
	
	ПараметрыПроцедуры = Новый Структура;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ОжидатьЗавершение           = 0;
	ПараметрыВыполнения.ЗапуститьВФоне              = Истина;
	ПараметрыВыполнения.КлючФоновогоЗадания         = "ПроверитьИзменениеПрайсЛистовВФоне";
	
	ДлительнаяОперацияПроверкаИзменений = ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры,
		ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьПроверкиПрайсЛистов()

	Если ДлительнаяОперацияПроверкаИзменений.Статус = "Выполнено" Тогда
		ПослеПроверкиПрайсЛистов(ДлительнаяОперацияПроверкаИзменений, Неопределено);
	Иначе
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПроверкиПрайсЛистов", ЭтотОбъект);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьПрогрессВыполнения      = Ложь;
		ПараметрыОжидания.ВыводитьОкноОжидания            = Ложь;
		ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
		ПараметрыОжидания.ВыводитьСообщения               = Ложь;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперацияПроверкаИзменений, 
			ОписаниеОповещения, ПараметрыОжидания);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиПрайсЛистов(РезультатВыполнения, ДополнительныеПараметры) Экспорт 
	
	Если Открыта() Тогда
		Элементы.Список.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеИсправленияОшибокТорговыхПредложений(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	Если Открыта() Тогда
		Элементы.Список.Обновить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТорговоеПредложениеСинхронизации(ТорговоеПредложение)

	ТорговоеПредложениеСинхронизации = ТорговоеПредложение;
	Список.Параметры.УстановитьЗначениеПараметра("ТорговоеПредложениеСинхронизации", ТорговоеПредложениеСинхронизации);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзменитьЗаписьРегистра(ТорговоеПредложение, ИмяРеквизита, Значение)
	
	РегистрыСведений.СостоянияСинхронизацииТорговыеПредложения.СоздатьИзменитьЗаписьРегистра(
		ТорговоеПредложение, ИмяРеквизита, Значение);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзменитьРегламентноеЗаданиеСинхронизацияТорговыхПредложений(Знач ИмяПараметра, Знач ЗначениеПараметра)
	
	УстановитьПривилегированныйРежим(Истина);
	
	БизнесСеть.ИзменитьРегламентноеЗадание(
		Метаданные.РегламентныеЗадания.СинхронизацияТорговыхПредложений.Имя, 
		ИмяПараметра, 
		ЗначениеПараметра);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УсловноеОформлениеГруппыСинхронизации(РегламентноеЗаданиеВключено = Неопределено)
	
	ТорговыеПредложенияСлужебный.УсловноеОформлениеГруппыСинхронизации(ЭтотОбъект, РегламентноеЗаданиеВключено);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьЗарегистрированныеОрганизации(ЗарегистрированныеОрганизации)
	
	ПодключенныеОрганизации = ИнтеграцияТорговыеПредложения.ПодключенныеОрганизации();
	
	ЗарегистрированныеОрганизации = Новый Массив;
	Для Каждого СтрокаОрганизации Из ПодключенныеОрганизации Цикл
		Если Не СтрокаОрганизации.ТребуетсяПовторноеПодключение Тогда
			ЗарегистрированныеОрганизации.Добавить(СтрокаОрганизации.Организация);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВнешниеПубликации()
	
	Элементы.ГруппаВнешниеПубликации.Видимость = Ложь;
	ПолучитьВнешниеПубликацииВФоне(ДлительнаяОперацияПолучитьВнешниеПрайсЛисты, УникальныйИдентификатор);
	ОжидатьЗавершенияПолученияВнешнихПубликаций();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВосстановитьПубликациюОбработчик(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыМетода = 
		ТорговыеПредложенияСлужебныйКлиентСервер.НовыйПараметрыИзмененияСостоянияТорговыхПредложений();
	ПараметрыМетода.ТорговыеПредложения = 
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущиеДанные.ТорговоеПредложение);
	
	Если ТекущиеДанные.ДействиеСинхронизации = 
		ПредопределенноеЗначение("Перечисление.ДействияСинхронизацииТорговыеПредложения.Удаление") Тогда
		Действие = НСтр("ru = 'Восстановить'");
		ПараметрыМетода.ЭтоОтменаУдаления = Истина;
	Иначе
		Действие = НСтр("ru = 'Удалить'");
		ПараметрыМетода.ЭтоУдаление = Истина;
	КонецЕсли;
	
	УдалитьВосстановитьПубликациюПродолжение = Новый ОписаниеОповещения(
		"УдалитьВосстановитьПубликациюПродолжение", ЭтотОбъект, ПараметрыМетода);
	
	ТекстВопроса = СтрШаблон(НСтр("ru = '%1 публикацию торгового предложения?'"), Действие);
	
	ЗаголовокВопроса = НСтр("ru = 'Удаление (восстановление) публикации.'");
	ПоказатьВопрос(УдалитьВосстановитьПубликациюПродолжение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, 
		КодВозвратаДиалога.Да, ЗаголовокВопроса);
	
КонецПроцедуры

#Область СинхронизацияТорговыхПредложений

&НаКлиенте
Функция ПараметрыСинхронизации()
	
	ПараметрыСинхронизации = ТорговыеПредложенияКлиент.ПараметрыСинхронизацииТорговыхПредложений(ЭтотОбъект);
	ПараметрыСинхронизации.ВыводитьПрогрессВыполнения     = Истина;
	ПараметрыСинхронизации.ГруппаДлительнойОперации       = Элементы.ГруппаДлительнаяОперация;
	ПараметрыСинхронизации.ОповещениеОПрогрессеВыполнения = 
		Новый ОписаниеОповещения("ОповещениеСинхронизации", ЭтотОбъект);
	ПараметрыСинхронизации.ОповещениеОЗавершении          = 
		Новый ОписаниеОповещения("СинхронизироватьТорговыеПредложенияЗавершение", ЭтотОбъект);
	ПараметрыСинхронизации.НадписьПрогресса               = Элементы.ДекорацияДлительнаяОперацияНадпись;
	
	Возврат ПараметрыСинхронизации;
	
КонецФункции

&НаКлиенте
Процедура ОповещениеСинхронизации(РезультатВыполнения, ДополнительныеПараметры) Экспорт 
	
	Если РезультатВыполнения.Прогресс = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВыполнения.Прогресс.Свойство("ДополнительныеПараметры")
		И ЗначениеЗаполнено(РезультатВыполнения.Прогресс.ДополнительныеПараметры) Тогда
		УстановитьТорговоеПредложениеСинхронизации(РезультатВыполнения.Прогресс.ДополнительныеПараметры.ТорговоеПредложениеСинхронизации);
	Иначе
		УстановитьТорговоеПредложениеСинхронизации(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьТорговыеПредложенияЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат = Неопределено Или Результат.Статус <> "Выполнено" Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьТорговоеПредложениеСинхронизации(Неопределено);
	
	Если Открыта() Тогда
		Элементы.Список.Обновить();
	КонецЕсли;
	
	ДлительнаяОперацияСинхронизацияТорговыхПредложений = Неопределено;
	
	ПроверитьЗаписиТорговыеПредложенияТорговойПлощадки();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОрганизацииОпубликованныхТорговыхПредложений()
	Возврат ТорговыеПредложенияСлужебный.ПолучитьОрганизацииОпубликованныхТорговыхПредложений();
КонецФункции

#КонецОбласти

#Область ПроверитьЗаписиТорговыеПредложенияТорговойПлощадки

&НаКлиенте
Процедура ПроверитьЗаписиТорговыеПредложенияТорговойПлощадки()
	
	ПроверитьЗаписиТорговыеПредложенияТорговойПлощадкиНаСервере(
		ДлительнаяОперацияПроверкаТорговыхПредложений, УникальныйИдентификатор);
	ОжидатьПроверкуТорговыхПредложений();
	
КонецПроцедуры

&НаСервереБезКонтекста 
Процедура ПроверитьЗаписиТорговыеПредложенияТорговойПлощадкиНаСервере(
	ДлительнаяОперацияПроверкаТорговыхПредложений, Знач УникальныйИдентификаторФормы)
	
	Отбор = Новый Структура;
	
	ТорговыеПредложенияСлужебный.ПроверитьЗаписиТорговыеПредложенияТорговойПлощадкиВФоне(
		ДлительнаяОперацияПроверкаТорговыхПредложений, Отбор, УникальныйИдентификаторФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьПроверкуТорговыхПредложений()

	Если ДлительнаяОперацияПроверкаТорговыхПредложений.Статус = "Выполнено" Тогда
		ПослеПроверкиТорговыхПредложений(ДлительнаяОперацияПроверкаТорговыхПредложений, Неопределено);
	Иначе
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПроверкиТорговыхПредложений", ЭтотОбъект);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьПрогрессВыполнения      = Ложь;
		ПараметрыОжидания.ВыводитьОкноОжидания            = Ложь;
		ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
		ПараметрыОжидания.ВыводитьСообщения               = Истина;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперацияПроверкаТорговыхПредложений, 
			ОписаниеОповещения, ПараметрыОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиТорговыхПредложений(РезультатВыполнения, ДополнительныеПараметры) Экспорт 
	
	Если РезультатВыполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	БизнесСетьСлужебныйКлиент.ВывестиСообщенияФоновогоЗадания(РезультатВыполнения);
	
	Если НЕ РезультатВыполнения.Статус = "Выполнено" Тогда
		Возврат;
	КонецЕсли;
	
	ДлительнаяОперацияПроверкаТорговыхПредложений = Неопределено;
	
	Элементы.Список.Обновить();
	
	Оповестить("ТорговыеПредложения_ОбновлениеСостоянийТорговыхПредложений", , ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти