
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("ДатаОкончанияПериода") И ЗначениеЗаполнено(Параметры.ДатаОкончанияПериода) Тогда
		Период.ДатаОкончания = КонецМесяца(Параметры.ДатаОкончанияПериода);
	ИначеЕсли Параметры.Свойство("ПериодРегистрации") И ЗначениеЗаполнено(Параметры.ПериодРегистрации) Тогда
		Период.ДатаОкончания = КонецМесяца(Параметры.ПериодРегистрации);
	КонецЕсли;
	
	Если Параметры.Свойство("Организация") И ЗначениеЗаполнено(Параметры.Организация) Тогда
		Получатель  = Параметры.Организация;
		Отправитель = Параметры.Организация;
	КонецЕсли;
	
	КОформлениюЗаПериод.Параметры.УстановитьЗначениеПараметра("Получатель",  Получатель);
	КОформлениюЗаПериод.Параметры.УстановитьЗначениеПараметра("Отправитель", Отправитель);
	
	УстановитьПараметрыДинамическихСписков();
	УправлениеЭлементамиФормы();
	
	Элементы.КОформлениюЗаПериодСклад.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если (ИмяСобытия = "Запись_ПередачаТоваровМеждуОрганизациями"
		Или ИмяСобытия = "Запись_ВозвратТоваровМеждуОрганизациями") Тогда
		
		УправлениеЭлементамиФормы();
		Элементы.КОформлению.Обновить();
		Элементы.КОформлениюЗаПериод.Обновить();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	УстановитьПараметрыДинамическихСписков();
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОформленияПриИзменении(Элемент)
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЗапуститьОбработкуНажатие(Элемент)
	
	ОчиститьСообщения();
	
	ФоновоеЗаданиеЗапустить();
	ИзмененияВИнтерфейсеПриЗапускеФоновогоЗадания();
	
	ПараметрыОбработчика = Новый Структура("Интервал", 1);
	ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", ПараметрыОбработчика.Интервал, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьЗадание(Команда)
	
	ОтключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте");
	ИзмененияВИнтерфейсеПриЗапускеФоновогоЗадания(Истина);
	ОтменитьФоновоеЗадание();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьДокумент(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработки.ЖурналДокументовИнтеркампани.РабочееМестоПередачиТоваров21.Команда.СоздатьДокумент");
	
	Строка = Элементы.КОформлению.ТекущиеДанные;
	
	Если Строка <> Неопределено Тогда
		
		СтруктураОснование = Новый Структура;
		СтруктураОснование.Вставить("Организация",				Строка.Отправитель);
		СтруктураОснование.Вставить("ОрганизацияПолучатель",	Строка.Получатель);
		СтруктураОснование.Вставить("Склад",					Строка.Склад);
		СтруктураОснование.Вставить("ПередачаПодДеятельность",	Строка.ПередачаПодДеятельность);
		СтруктураОснование.Вставить("ТипЗапасов",				Строка.ТипЗапасов);
		СтруктураОснование.Вставить("НачалоПериода",			Строка.ДатаОформления);
		СтруктураОснование.Вставить("КонецПериода",				Строка.ДатаПоследнейПродажи);
		СтруктураОснование.Вставить("ХозяйственнаяОперация",	Строка.ХозяйственнаяОперация);
		СтруктураОснование.Вставить("ДатаОформления",			Строка.ДатаОформления);
		СтруктураОснование.Вставить("Договор",					Строка.Договор);
		СтруктураОснование.Вставить("ВидЦены",					Строка.ВидЦены);
		СтруктураОснование.Вставить("ВалютаВзаиморасчетов",		Строка.ВалютаВзаиморасчетов);
		СтруктураОснование.Вставить("ЭтоПередачаВозврат21",			Истина);
		
		ПараметрыОткрытия = Новый Структура("Основание", СтруктураОснование);
		
		Если Строка.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссиюВДругуюОрганизацию")
			ИЛИ Строка.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию") Тогда
			ОткрытьФорму("Документ.ПередачаТоваровМеждуОрганизациями.ФормаОбъекта", ПараметрыОткрытия, Элементы.КОформлениюЗаПериод);
		Иначе
			ОткрытьФорму("Документ.ВозвратТоваровМеждуОрганизациями.ФормаОбъекта", ПараметрыОткрытия, Элементы.КОформлениюЗаПериод);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументЗаПериод(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработки.ЖурналДокументовИнтеркампани.РабочееМестоПередачиТоваров21.Команда.СоздатьДокументЗаПериод");
	
	Строка = Элементы.КОформлениюЗаПериод.ТекущиеДанные;
	
	Если Строка <> Неопределено Тогда
		
		СтруктураОснование = Новый Структура;
		СтруктураОснование.Вставить("Организация",				Строка.Отправитель);
		СтруктураОснование.Вставить("ОрганизацияПолучатель",	Строка.Получатель);
		СтруктураОснование.Вставить("Склад",					Строка.Склад);
		СтруктураОснование.Вставить("ПередачаПодДеятельность",	Строка.ПередачаПодДеятельность);
		СтруктураОснование.Вставить("ТипЗапасов",				Строка.ТипЗапасов);
		СтруктураОснование.Вставить("НачалоПериода",			?(ЗначениеЗаполнено(Строка.Месяц), НачалоМесяца(Строка.Месяц), Период.ДатаНачала));
		СтруктураОснование.Вставить("КонецПериода",				?(ЗначениеЗаполнено(Строка.Месяц), КонецМесяца(Строка.Месяц), Период.ДатаОкончания));
		СтруктураОснование.Вставить("ХозяйственнаяОперация",	Строка.ХозяйственнаяОперация);
		СтруктураОснование.Вставить("ДатаОформления",			Неопределено);
		СтруктураОснование.Вставить("Договор",					Строка.Договор);
		СтруктураОснование.Вставить("ВидЦены",					Строка.ВидЦены);
		СтруктураОснование.Вставить("ВалютаВзаиморасчетов",		Строка.ВалютаВзаиморасчетов);
		СтруктураОснование.Вставить("ЭтоПередачаВозврат21",		Истина);
		
		СтруктураПараметры = Новый Структура("Основание", СтруктураОснование);
		
		Если Строка.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссиюВДругуюОрганизацию")
			ИЛИ Строка.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию") Тогда
			ОткрытьФорму("Документ.ПередачаТоваровМеждуОрганизациями.ФормаОбъекта", СтруктураПараметры, Элементы.КОформлениюЗаПериод);
		Иначе
			ОткрытьФорму("Документ.ВозвратТоваровМеждуОрганизациями.ФормаОбъекта", СтруктураПараметры, Элементы.КОформлениюЗаПериод);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКОформлению(Команда)
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсправитьОстаткиВЭтомСеансе(Команда)
	
	ИсправитьОстаткиВЭтомСеансеНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКОформлению

&НаКлиенте
Процедура КОформлениюПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКОформлениюЗаПериод

&НаКлиенте
Процедура КОформлениюЗаПериодПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	Если ВариантОформления = 1 Тогда
		ЗаполнитьКОформлению();
		Элементы.ГруппаКОформлению.ТекущаяСтраница = Элементы.СтраницаПоДням;
	Иначе
		УстановитьПараметрыДинамическихСписков();
		Элементы.ГруппаКОформлению.ТекущаяСтраница = Элементы.СтраницаЗаПериод;
	КонецЕсли;
	
	Если ЕстьОтрицательныеОстаткиНаКонецПериода() Тогда
		Элементы.ГруппаИсправлениеОтрицательныхОстатков.Видимость = Истина;
		Элементы.ИсправитьОстаткиВЭтомСеансе.Видимость = ОбщегоНазначенияКлиентСервер.РежимОтладки();
		Элементы.ГруппаИсправлениеОтрицательныхОстатков.ТекущаяСтраница = Элементы.ГруппаОтрицательныеОстатки;
		Элементы.КОформлениюСоздатьДокумент.Доступность = Ложь;
		Элементы.КОформлениюСоздатьДокументЗаПериод.Доступность = Ложь;
	Иначе
		Элементы.ГруппаИсправлениеОтрицательныхОстатков.Видимость = Ложь;
		Элементы.КОформлениюСоздатьДокумент.Доступность = Истина;
		Элементы.КОформлениюСоздатьДокументЗаПериод.Доступность = Истина;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыДинамическихСписков()
	
	НачалоПериода	= НачалоДня(?(ЗначениеЗаполнено(Период.ДатаНачала), Период.ДатаНачала, '00010101'));
	КонецПериода	= КонецДня(?(ЗначениеЗаполнено(Период.ДатаОкончания), Период.ДатаОкончания, '39991231'));
	
	Если НачалоПериода > КонецПериода Тогда
		ВызватьИсключение НСтр("ru = 'Дата начала периода не может быть больше даты окончания периода'");
	КонецЕсли;
	
	КОформлениюЗаПериод.Параметры.УстановитьЗначениеПараметра("НачалоПериода", НачалоПериода);
	КОформлениюЗаПериод.Параметры.УстановитьЗначениеПараметра("КонецПериода", КонецПериода);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКОформлению()
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Потребления.ДатаОформления,
		|	Потребления.Отправитель,
		|	Потребления.Получатель,
		|	Потребления.АналитикаУчетаНоменклатуры, 
		|	Потребления.Склад,
		|	Потребления.Период,
		|	Потребления.ВидЗапасов,
		|	Потребления.ВидЗапасовПолучателя,
		|	Потребления.ТипЗапасов,
		|	Потребления.НалогообложениеНДС,
		|	Потребления.НомерГТД,
		|	Потребления.Потреблено
		|ПОМЕСТИТЬ Потребления
		|ИЗ &ТоварыКПередаче КАК Потребления
		|;
		|
		|ВЫБРАТЬ
		|	(ВЫБОР Потребления.ТипЗапасов
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссиюВДругуюОрганизацию)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию) КОНЕЦ) КАК ХозяйственнаяОперация,
		|	Потребления.ДатаОформления,
		|	Потребления.Отправитель,
		|	Потребления.Получатель,
		|	Потребления.Склад,
		|	Потребления.ТипЗапасов,
		|	Потребления.НалогообложениеНДС КАК ПередачаПодДеятельность,
		|	МАКСИМУМ(Потребления.Период) КАК ДатаПоследнейПродажи,
		|	КОЛИЧЕСТВО(1) КАК СтрокТоваров,
		|	1 КАК Порядок,
		|	ЗначенияПоУмолчанию.Договор КАК Договор,
		|	ЗначенияПоУмолчанию.ВидЦены КАК ВидЦены,
		|	ЗначенияПоУмолчанию.Валюта КАК ВалютаВзаиморасчетов
		|ИЗ
		|	Потребления КАК Потребления
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыЗапасов КАК ВидыЗапасов
		|		ПО ВидыЗапасов.Ссылка = Потребления.ВидЗапасов
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		РегистрСведений.НастройкаПередачиТоваровМеждуОрганизациями КАК ЗначенияПоУмолчанию
		|	ПО
		|		Потребления.Отправитель = ЗначенияПоУмолчанию.ОрганизацияВладелец
		|		И ВидыЗапасов.ТипЗапасов = ЗначенияПоУмолчанию.ТипЗапасов
		|		И Потребления.Получатель = ЗначенияПоУмолчанию.ОрганизацияПродавец
		|ГДЕ
		|	&Отправитель В (ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка), Потребления.Отправитель)
		|	ИЛИ &Получатель В (ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка), Потребления.Получатель)
		|
		|СГРУППИРОВАТЬ ПО
		|	Потребления.ДатаОформления, 
		|	Потребления.Отправитель, 
		|	Потребления.Получатель,
		|	Потребления.Склад,
		|	Потребления.ТипЗапасов, 
		|	Потребления.НалогообложениеНДС,
		|	ЗначенияПоУмолчанию.Договор,
		|	ЗначенияПоУмолчанию.ВидЦены,
		|	ЗначенияПоУмолчанию.Валюта
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	(ВЫБОР ВидыЗапасов.ТипЗапасов
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратПоКомиссииМеждуОрганизациями)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями) КОНЕЦ) КАК ХозяйственнаяОперация,
		|	ДАТАВРЕМЯ(1,1,1) КАК ДатаОформления,
		|	ВидыЗапасов.Организация КАК Отправитель,
		|	НаДату.ОрганизацияВладелец КАК Получатель,
		|	НаДату.АналитикаУчетаНоменклатуры.МестоХранения КАК Склад,
		|	ВидыЗапасов.ТипЗапасов КАК ТипЗапасов,
		|	ВидыЗапасов.НалогообложениеНДС КАК ПередачаПодДеятельность,
		|	ДАТАВРЕМЯ(1,1,1) КАК ДатаПоследнейПродажи,
		|	0 КАК СтрокТоваров,
		|	2 КАК Порядок,
		|	ЗначенияПоУмолчанию.Договор КАК Договор,
		|	ЗначенияПоУмолчанию.ВидЦены КАК ВидЦены,
		|	ЗначенияПоУмолчанию.Валюта КАК ВалютаВзаиморасчетов
		|ИЗ
		|	РегистрНакопления.ТоварыОрганизацийКПередаче.Остатки(&ГраницаПериода) КАК НаДату
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыЗапасов КАК ВидыЗапасов
		|		ПО ВидыЗапасов.Ссылка = НаДату.ВидЗапасовПродавца
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыОрганизацийКПередаче.Остатки() КАК НаСейчас
		|		ПО НаДату.АналитикаУчетаНоменклатуры = НаСейчас.АналитикаУчетаНоменклатуры
		|		И НаДату.НомерГТД = НаСейчас.НомерГТД
		|		И НаДату.ВидЗапасовПродавца = НаСейчас.ВидЗапасовПродавца
		|		И НаДату.ОрганизацияВладелец = НаСейчас.ОрганизацияВладелец
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		РегистрСведений.НастройкаПередачиТоваровМеждуОрганизациями КАК ЗначенияПоУмолчанию
		|	ПО
		|		НаДату.ОрганизацияВладелец = ЗначенияПоУмолчанию.ОрганизацияВладелец
		|		И ВидыЗапасов.ВидЗапасовВладельца.ТипЗапасов = ЗначенияПоУмолчанию.ТипЗапасов
		|		И ВидыЗапасов.Организация = ЗначенияПоУмолчанию.ОрганизацияПродавец
		|ГДЕ
		|	ЕСТЬNULL(НаСейчас.ВозвращеноОстаток, 0) <> 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок, ДатаОформления
		|");
		
	Отборы = РегистрыНакопления.ТоварыОрганизацийКПередаче.ОтборыТоваровКПередаче();
	Отборы.НачалоПериода = НачалоДня(Период.ДатаНачала);
	Отборы.КонецПериода = КонецДня(?(ЗначениеЗаполнено(Период.ДатаОкончания), Период.ДатаОкончания, '39991231'));
	
	Если Отборы.НачалоПериода > Отборы.КонецПериода Тогда
		ВызватьИсключение НСтр("ru = 'Дата начала периода должна быть меньше даты окончания периода'");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Получатель", Получатель);
	Запрос.УстановитьПараметр("Отправитель", Отправитель);
	Запрос.УстановитьПараметр("НачалоПериода", Отборы.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", Отборы.КонецПериода);
	Запрос.УстановитьПараметр("ГраницаПериода", Новый Граница(Отборы.КонецПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ТоварыКПередаче", РегистрыНакопления.ТоварыОрганизацийКПередаче.ТоварыКПередаче(Отборы));
	
	Результат = Запрос.Выполнить();
	КОформлению.Загрузить(Результат.Выгрузить());
КонецПроцедуры

&НаСервере
Функция ЕстьОтрицательныеОстаткиНаКонецПериода()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОстаткиНаКонецПериода.ОрганизацияВладелец КАК ОрганизацияВладелец,
	|	ОстаткиНаКонецПериода.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ОстаткиНаКонецПериода.ВидЗапасовПродавца КАК ВидЗапасовПродавца,
	|	ОстаткиНаКонецПериода.НомерГТД КАК НомерГТД
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизацийКПередаче.Остатки(&НаКонецПериода, ) КАК ОстаткиНаКонецПериода
	|ГДЕ
	|	ОстаткиНаКонецПериода.КоличествоОстаток < 0
	|	ИЛИ ОстаткиНаКонецПериода.ВозвращеноОстаток < 0
	|");
	
	КонецПериода = КонецДня(?(ЗначениеЗаполнено(Период.ДатаОкончания), Период.ДатаОкончания, '39991231'));
	Запрос.УстановитьПараметр("НаКонецПериода", Новый Граница(КонецПериода, ВидГраницы.Включая));
	Результат = Запрос.Выполнить();
	
	ЕстьОтрицательныеОстаткиНаКонецПериода = Не Результат.Пустой();
	Возврат ЕстьОтрицательныеОстаткиНаКонецПериода;
	
КонецФункции

&НаСервере
Функция ФоновоеЗаданиеЗапустить()
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	Если ЗначениеЗаполнено(Отправитель) Тогда
		Организации = Новый Массив;
		Организации.Добавить(Отправитель);
	Иначе
		Организации = Неопределено;
	КонецЕсли;
	
	НачалоПериода = НачалоДня(?(ЗначениеЗаполнено(Период.ДатаНачала), Период.ДатаНачала, '00010101'));
	КонецПериода  = КонецДня(?(ЗначениеЗаполнено(Период.ДатаОкончания), Период.ДатаОкончания, '39991231'));
	
	ПараметрыЗадания = Новый Структура();
	ПараметрыЗадания.Вставить("НачалоПериода",  НачалоПериода);
	ПараметрыЗадания.Вставить("КонецПериода",   КонецПериода);
	ПараметрыЗадания.Вставить("Организации",    Организации);
	ПараметрыЗадания.Вставить("АдресХранилища", АдресХранилища);
	
	ИдентификаторЗадания = ЗапасыСервер.ИсправитьОстаткиПоТоварамКПередачеВФоновомЗадании(ПараметрыЗадания);
	
КонецФункции

&НаКлиенте
Процедура ФоновоеЗаданиеПроверитьНаКлиенте()
	Если НЕ ФоновоеЗаданиеВыполнено() Тогда
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("Интервал", 1);
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", ПараметрыОбработчика.Интервал, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ФоновоеЗаданиеВыполнено()
	ЗаданиеВыполнено = Ложь;

	Результат = ОбщегоНазначенияУТВызовСервера.ПроверитьФоновоеЗадание(ИдентификаторЗадания);
	Если Результат.УспешноВыполнено Тогда
		ЗаданиеВыполнено = Истина;
		РезультатИсправления = ПолучитьИзВременногоХранилища(АдресХранилища);
		Если ЗначениеЗаполнено(РезультатИсправления) Тогда
			Для Каждого СтрокаРезультата Из РезультатИсправления Цикл
				ТекстСообщения = "Документ "+ СтрокаРезультата.Ключ + " : " + СтрокаРезультата.Значение;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, СтрокаРезультата.Ключ);
			КонецЦикла;
		КонецЕсли;
		ИзмененияВИнтерфейсеПриЗапускеФоновогоЗадания(ЗаданиеВыполнено);
		УправлениеЭлементамиФормы();
	ИначеЕсли Результат.ЕщеВыполняется Тогда
		ПараметрыОбработчика = Новый Структура("Интервал", 1);
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", ПараметрыОбработчика.Интервал, Истина);
	ИначеЕсли Результат.ВыполненоСОшибками Тогда
		ОтключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте");
		ЗаданиеВыполнено = Истина;
		ИзмененияВИнтерфейсеПриЗапускеФоновогоЗадания(ЗаданиеВыполнено);
		УправлениеЭлементамиФормы();
		
		ТекстСообщения = НСтр("ru = 'Возникла ошибка при работе фонового задания. Подробности см. в журнале регистрации.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Возврат ЗаданиеВыполнено;
КонецФункции

&НаКлиенте
Процедура ИзмененияВИнтерфейсеПриЗапускеФоновогоЗадания(ЗаданиеВыполнено = Ложь)
	
	Элементы.ГруппаКОформлению.Доступность = ЗаданиеВыполнено;
	Элементы.ГруппаПользовательскихНастроек.Доступность = ЗаданиеВыполнено;
	Элементы.ГруппаПериод.Доступность = ЗаданиеВыполнено;
	
	Если ЗаданиеВыполнено Тогда
		Элементы.ГруппаИсправлениеОтрицательныхОстатков.ТекущаяСтраница = Элементы.ГруппаОтрицательныеОстатки;
	Иначе
		Элементы.ГруппаИсправлениеОтрицательныхОстатков.ТекущаяСтраница = Элементы.ГруппаДлительныеОперации;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьФоновоеЗадание()
	
	ОбщегоНазначенияУТВызовСервера.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
КонецПроцедуры

&НаСервере
Процедура ИсправитьОстаткиВЭтомСеансеНаСервере()
	
	Если ЗначениеЗаполнено(Отправитель) Тогда
		Организации = Новый Массив;
		Организации.Добавить(Отправитель);
	Иначе
		Организации = Неопределено;
	КонецЕсли;
	
	НачалоПериода = НачалоДня(?(ЗначениеЗаполнено(Период.ДатаНачала), Период.ДатаНачала, '00010101'));
	КонецПериода  = КонецДня(?(ЗначениеЗаполнено(Период.ДатаОкончания), Период.ДатаОкончания, '39991231'));
	
	ПараметрыВызова = Новый Структура();
	ПараметрыВызова.Вставить("НачалоПериода",  НачалоПериода);
	ПараметрыВызова.Вставить("КонецПериода",   КонецПериода);
	ПараметрыВызова.Вставить("Организации",    Организации);
	
	ЗапасыСервер.ИсправитьОстаткиПоТоварамКПередаче(ПараметрыВызова);
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

#КонецОбласти
