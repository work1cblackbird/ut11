#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Перечисления

// Виды форм документа
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура:
//   * Бумажная    - Строка
//   * Электронная - Строка
//
Функция ВидыФормДокумента() Экспорт

	Данные = Новый Структура;
	Данные.Вставить("Бумажная", "Бумажная");
	Данные.Вставить("Электронная", "Электронная");
	
	Возврат Новый ФиксированнаяСтруктура(Данные);
	
КонецФункции

// Возвращаемое значение:
//  ФиксированнаяСтруктура:
//   * ИностранноеЛицо - ОбработкаТабличнаяЧастьСтрока.ФорматДокументПредприятия.ИдентификационныеСведенияИностранногоЛица
//   * Организация     - ОбработкаТабличнаяЧастьСтрока.ФорматДокументПредприятия.ИдентификационныеСведенияЮрЛица
//   * Предприниматель - ОбработкаТабличнаяЧастьСтрока.ФорматДокументПредприятия.ИдентификационныеСведенияИП
//   * ФизическоеЛицо  - ОбработкаТабличнаяЧастьСтрока.ФорматДокументПредприятия.ИдентификационныеСведенияФизЛица
//
Функция ТипыСторонДоговора() Экспорт
	
	Типы = Новый Структура;
	
	Шаблон = "ОбработкаТабличнаяЧастьСтрока.ФорматДокументПредприятия.%1";
	ИностранноеЛицо = СтрШаблон(Шаблон, "ИдентификационныеСведенияИностранногоЛица");
	Типы.Вставить("ИностранноеЛицо", Тип(ИностранноеЛицо));
	Организация = СтрШаблон(Шаблон, "ИдентификационныеСведенияЮрЛица");
	Типы.Вставить("Организация", Тип(Организация));
	Предприниматель = СтрШаблон(Шаблон, "ИдентификационныеСведенияИП");
	Типы.Вставить("Предприниматель", Тип(Предприниматель));
	ФизическоеЛицо = СтрШаблон(Шаблон, "ИдентификационныеСведенияФизЛица");
	Типы.Вставить("ФизическоеЛицо", Тип(ФизическоеЛицо));
	
	Возврат Новый ФиксированнаяСтруктура(Типы);
	
КонецФункции

// Возвращаемое значение:
//  ФиксированнаяСтруктура:
//   * КЛАДР         - ОбработкаТабличнаяЧастьСтрока.ФорматДокументПредприятия.АдресКЛАДР
//   * ЗаПределамиРФ - ОбработкаТабличнаяЧастьСтрока.ФорматДокументПредприятия.ЗаПределамиРФ
//
Функция ТипыАдресов() Экспорт
	
	Типы = Новый Структура;
	Шаблон = "ОбработкаТабличнаяЧастьСтрока.ФорматДокументПредприятия.%1";
	АдресКЛАДР = СтрШаблон(Шаблон, "АдресКЛАДР");
	Типы.Вставить("КЛАДР", Тип(АдресКЛАДР));
	АдресЗаПределамиРФ = СтрШаблон(Шаблон, "АдресЗаПределамиРФ");
	Типы.Вставить("ЗаПределамиРФ", Тип(АдресЗаПределамиРФ));
	
	Возврат Новый ФиксированнаяСтруктура(Типы);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Служебное имя формата.
// 
// Возвращаемое значение:
//  Строка
Функция ИмяФормата() Экспорт
	Возврат ПространствоИмен();
КонецФункции

// Параметры:
//  ИмяФайла - Строка
// 
// Возвращаемое значение:
//  Булево
//
Функция ЭтоФайлФормата(ИмяФайла) Экспорт
	
	СтруктураИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ИмяФайла);
	
	ИмяСоответствуетФормату = СтрНачинаетсяС(СтруктураИмениФайла.Имя, ПрефиксФормата());
	
	Если ИмяСоответствуетФормату Тогда
		Если ЗначениеЗаполнено(СтруктураИмениФайла.Расширение) Тогда
			
			РасширениеФайла = НРег(СтруктураИмениФайла.Расширение);
			Если РасширениеФайла = ".xml" Тогда
				Возврат Истина;
			КонецЕсли;
			
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Код классификатора налоговой документации.
//
// Возвращаемое значение:
//  Строка
//
Функция КНД() Экспорт
	
	Возврат "";
	
КонецФункции

// Возвращаемое значение:
//  Строка
//
Функция ПрефиксФормата() Экспорт
	
	Возврат "DocumentEnterprise";
	
КонецФункции

// Параметры:
//  ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  Параметры   - см. ИнтеграцияЭДО.НовыеПараметрыФормированияДанныхОбъектаУчета
// 
// Возвращаемое значение:
//  см. ИнтеграцияЭДО.НовыйРезультатФормированияДанныхОбъектаУчета
//
Функция ОписаниеДанныхОбъектаУчета(ОбъектУчета, Параметры) Экспорт
	
	КонструкторЭД = Создать();
	Отказ = Ложь;
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоДокументуПредприятия(ОбъектУчета, КонструкторЭД, Отказ);
	Если Отказ Тогда
		Возврат ИнтеграцияЭДО.НовыйРезультатФормированияДанныхОбъектаУчета();
	КонецЕсли;

	Результат = ИнтеграцияЭДО.НовыйРезультатФормированияДанныхОбъектаУчета();
	Результат.Данные = КонструкторЭД;
	Результат.Основания.Добавить(ОбъектУчета);
	
	Возврат Результат;
	
КонецФункции

// Сформировать документ.
// 
// Параметры:
//  КонструкторЭД - ОбработкаОбъект.ФорматДокументПредприятия
// 
// Возвращаемое значение:
//  см. ФорматыЭДО_ФНС.НовыйРезультатЗаполненияДокумента
//
Функция СформироватьДокумент(КонструкторЭД) Экспорт
	
	ДанныеДокумента = ФорматыЭДО_ФНС.НовыйРезультатЗаполненияДокумента();
	ТипыОбъектов    = КонструкторЭД.ТипыОбъектов();
	
	Файл = КонструкторЭД.ПолучитьXDTOОбъект(КонструкторЭД.ТипыОбъектов().Файл);
	ЗаполнитьФайлИнформации(Файл, ДанныеДокумента.Ошибки, КонструкторЭД, ТипыОбъектов);
	
	Если Не ЗначениеЗаполнено(ДанныеДокумента.Ошибки) Тогда
		ДвоичныеДанные = РаботаСФайламиБЭД.XDTOВДвоичныеДанные(Файл, Ложь, ,"Файл");
		ДанныеДокумента.ДанныеОсновногоФайла.ДвоичныеДанные = ОбщегоНазначенияБЭД.УдалитьПространствоИмен(ДвоичныеДанные, КонструкторЭД.ПространствоИмен());
		Расширение = "xml";
		ДанныеДокумента.ДанныеОсновногоФайла.ИмяФайла = СтрШаблон("%1.%2", КонструкторЭД.ИдентификаторФайла(), Расширение);
	КонецЕсли;
	
	Возврат ДанныеДокумента;
	
КонецФункции

// Параметры:
//  ДанныеФайлаЭД - ОбъектXDTO
//  ДеревоРазбора - см. ДеревоЭлектронногоДокументаБЭД.ИнициализироватьДеревоРазбора
//  НовыйЭД       - СтрокаДереваЗначений: см. ДеревоЭлектронногоДокументаБЭД.ИнициализироватьДеревоРазбора
//  ОшибкаРазбора - Булево
//
Процедура ПрочитатьФайлОбмена(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора) Экспорт
	
	КонструкторЭД = Создать();
	ПрочитатьФайлИнформации(КонструкторЭД, ДанныеФайлаЭД);
	
	НовыйЭД.ВерсияФормата     = КонструкторЭД.ПространствоИмен();
	НовыйЭД.ЗначениеРеквизита = КонструкторЭД;
	НовыйЭД.ВидЭД             = Перечисления.ТипыДокументовЭДО.ДокументПредприятия;
	
КонецПроцедуры

// Параметры:
//  РазделыДополнительныхПолей - см. ФорматыЭДО.РазделыДополнительныхПолейФорматаЭлектронногоДокумента
//
Процедура ЗаполнитьРазделыДополнительныхПолей(РазделыДополнительныхПолей) Экспорт
	
КонецПроцедуры

// Параметры:
//  ДанныеФайлаЭД - ОбъектXDTO:
// 
// Возвращаемое значение:
//  Неопределено
// 
Функция ИнформацияОТоваре(ДанныеФайлаЭД) Экспорт

	Возврат Неопределено;
	
КонецФункции

// При определении соответствия титулов для двутитульного формата.
// 
// Параметры:
//  СоответствиеОсновногоТитулаОтветному - Соответствие Из КлючИЗначение:
//  * Ключ - Строка - пространство имен основного титула
//  * Значение - Строка - пространство имен ответного титула
//
Процедура ЗаполнитьСоответствиеТитулов(СоответствиеОсновногоТитулаОтветному) Экспорт

КонецПроцедуры

// Возвращаемое значение:
//  Строка
//
Функция ПространствоИмен() Экспорт
	Возврат Метаданные.ПакетыXDTO.DocumentEnterprise_01_01_01.ПространствоИмен;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЧтениеЭлектронногоДокумента

// BSLLS:Typo-off

Процедура ПрочитатьФайлИнформации(КонструкторЭД, Знач Объект)
	
	Документ = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Документ");
	ПрочитатьДокументИнформации(КонструкторЭД, Документ);
	
КонецПроцедуры

Процедура ПрочитатьДокументИнформации(КонструкторЭД, Знач Объект)
	
	ИнформацияДокумента = КонструкторЭД.ИнформацияДокумента();
	
	ИнформацияДокумента.ВнешнийИдентификатор = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ВнешнийИдентификатор");
	ИнформацияДокумента.Дата = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Дата", , "Дата");
	ИнформацияДокумента.Номер = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Номер");
	ИнформацияДокумента.Сумма = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Сумма", , "Число");
	ИнформацияДокумента.СуммаНДС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СуммаНДС", , "Число");
	ИнформацияДокумента.Содержание = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Содержание");
	ИнформацияДокумента.ДатаНачалаДействия = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ДатаНачалаДействия", , "Дата");
	ИнформацияДокумента.ДатаОкончанияДействия = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ДатаОкончанияДействия", , "Дата");
	ИнформацияДокумента.ЯвляетсяБессрочным = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ЯвляетсяБессрочным", , "Булево");
	ИнформацияДокумента.ФормаДокумента = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ФормаДокумента");
	ИнформацияДокумента.Наименование = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Наименование");
	
	ВалютаXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Валюта");
	ПрочитатьВалюту(ИнформацияДокумента.Валюта, ВалютаXDTO, КонструкторЭД);

	СвойстваВидаДокументаXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СвойстваВидаДокумента");
	ПрочитатьСвойстваВидаДокумента(ИнформацияДокумента.СвойстваВидаДокумента, СвойстваВидаДокументаXDTO, КонструкторЭД);
	
	ПорядокПродленияXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ПорядокПродления");
	ПрочитатьПорядокПродления(ИнформацияДокумента.ПорядокПродления, ПорядокПродленияXDTO, КонструкторЭД);
	
	СоставXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СоставДокумента");
	ПрочитатьСоставБумажногоДокумента(ИнформацияДокумента.СоставДокумента, СоставXDTO, КонструкторЭД);
	
	СтороныДокументаXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СтороныДокумента");
	ПрочитатьСтороныДокумента(ИнформацияДокумента, СтороныДокументаXDTO, КонструкторЭД);
	
	СвойстваФайловXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СвойстваФайлов", , , Истина);
	ПрочитатьСвойстваФайлов(ИнформацияДокумента.СвойстваФайлов, СвойстваФайловXDTO, КонструкторЭД);

КонецПроцедуры

Процедура ПрочитатьВалюту(Валюта, Знач Объект, Знач КонструкторЭД)
	
	Если ТипЗнч(Объект) <> Тип("ОбъектXDTO") Тогда
		Возврат;
	КонецЕсли;
	
	Валюта = КонструкторЭД.НоваяВалюта();
	Валюта.Код = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Код");
	Валюта.Наименование = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Наименование");
	
КонецПроцедуры

Процедура ПрочитатьСвойстваВидаДокумента(СвойстваВидаДокумента, Знач Объект, Знач КонструкторЭД)
	
	Если ТипЗнч(Объект) <> Тип("ОбъектXDTO") Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваВидаДокумента = КонструкторЭД.НовыеСвойстваВидаДокумента();
	СвойстваВидаДокумента.Наименование = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Наименование");
	СвойстваВидаДокумента.ЯвляетсяДоговором = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ЯвляетсяДоговором", ,
		"Булево");
	СвойстваВидаДокумента.ЯвляетсяИсходящейКорреспонденцией = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(
		Объект, "ЯвляетсяИсходящейКорреспонденцией", , "Булево");

КонецПроцедуры

Процедура ПрочитатьПорядокПродления(ПорядокПродления, Знач Объект, Знач КонструкторЭД)
	
	Если ТипЗнч(Объект) <> Тип("ОбъектXDTO") Тогда
		Возврат;
	КонецЕсли;
	
	ПорядокПродления = КонструкторЭД.НовыйПорядокПродления();
	ПорядокПродления.Идентификатор = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Идентификатор");
	ПорядокПродления.Наименование = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Наименование");
	
КонецПроцедуры

Процедура ПрочитатьСоставБумажногоДокумента(Состав, Знач Объект, Знач КонструкторЭД)
	
	Если ТипЗнч(Объект) <> Тип("ОбъектXDTO") Тогда
		Возврат;
	КонецЕсли;
	
	Состав = КонструкторЭД.НовыйСоставБумажногоДокумента();
	Состав.КоличествоЛистов = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "КоличествоЛистов", , "Число");
	Состав.КоличествоПриложений = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "КоличествоПриложений", , "Число");
	Состав.ЛистовВПриложениях = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(
		Объект, "ЛистовВПриложениях", , "Число");
	Состав.КоличествоЭкземпляров = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(
		Объект, "КоличествоЭкземпляров", , "Число");
	
КонецПроцедуры

Процедура ПрочитатьСтороныДокумента(ИнформацияДокумента, Знач Объект, Знач КонструкторЭД)
	
	СторонаДокументаXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Организация");
	ПрочитатьСторонуДокумента(ИнформацияДокумента.Организация, СторонаДокументаXDTO, КонструкторЭД);
	
	СторонаДокументаXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Контрагент", , , Истина);
	Для Каждого СтрокаОбъекта Из СторонаДокументаXDTO Цикл
		Контрагент = Неопределено;
		ПрочитатьСторонуДокумента(Контрагент, СтрокаОбъекта, КонструкторЭД);
		ИнформацияДокумента.Контрагент.Добавить(Контрагент);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьСторонуДокумента(СторонаДокумента, Знач Объект, Знач КонструкторЭД)
	
	Если ТипЗнч(Объект) <> Тип("ОбъектXDTO") Тогда
		Возврат;
	КонецЕсли;
	
	СторонаДокумента = КонструкторЭД.НовыеСведенияОСторонахДокумента();
	
	ИдентификационныеСведенияXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИдентификационныеСведения");
	ПрочитатьИдентификационныеСведения(СторонаДокумента.ИдентификационныеСведения, ИдентификационныеСведенияXDTO, КонструкторЭД);
	
	АдресXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Адрес");
	ПрочитатьАдрес(СторонаДокумента.Адрес, АдресXDTO, КонструкторЭД);
	
	КонтактныеДанныеXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "КонтактныеДанные");
	ПрочитатьКонтактныеДанные(СторонаДокумента.КонтактныеДанные, КонтактныеДанныеXDTO, КонструкторЭД);
	
	БанковскиеРеквизитыXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "БанковскиеРеквизиты");
	ПрочитатьБанковскиеРеквизиты(СторонаДокумента.БанковскиеРеквизиты, БанковскиеРеквизитыXDTO, КонструкторЭД);
	
	СведенияОПодписантеXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СведенияОПодписанте");
	ПрочитатьСведенияОПодписанте(СторонаДокумента.СведенияОПодписанте, СведенияОПодписантеXDTO, КонструкторЭД);
	
	СторонаДокумента.ДатаПодписания = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ДатаПодписания", , "Дата");

КонецПроцедуры

Процедура ПрочитатьСвойстваФайлов(СвойстваФайлов, Знач Объект, Знач КонструкторЭД)
	
	Если ТипЗнч(Объект) <> Тип("ОбъектXDTO") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаОбъекта Из Объект.СвойстваФайла Цикл
		СвойстваФайла = КонструкторЭД.НовыеСвойстваФайла();
		СвойстваФайла.Наименование = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаОбъекта, "Наименование");
		СвойстваФайла.ДатаСоздания = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаОбъекта, "ДатаСоздания", , "Дата");
		СвойстваФайла.ДатаМодификации = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаОбъекта, "ДатаМодификации", , "Дата");
		СвойстваФайла.Описание = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаОбъекта, "Описание");
		СвойстваФайла.ЯвляетсяОригиналом = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаОбъекта, "ЯвляетсяОригиналом", ,
			"Булево");
			
		СвойстваФайлов.Добавить(СвойстваФайла);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьАдрес(Адрес, Знач Объект, Знач КонструкторЭД)
	
	Если ТипЗнч(Объект) <> Тип("ОбъектXDTO") Тогда
		Возврат;
	КонецЕсли;

	АдресXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "АдресКЛАДР");
	Если ТипЗнч(АдресXDTO) = Тип("ОбъектXDTO") Тогда
		Адрес = КонструкторЭД.НовыйАдресКЛАДР();
		ПрочитатьАдресКЛАДР(Адрес, АдресXDTO);
		Возврат;
	КонецЕсли;
	
	АдресXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "АдресЗаПределамиРФ");
	Если ТипЗнч(АдресXDTO) = Тип("ОбъектXDTO") Тогда
		Адрес = КонструкторЭД.НовыйАдресЗаПределамиРФ();
		ПрочитатьАдресЗаПределамиРФ(Адрес, АдресXDTO);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьАдресКЛАДР(Адрес, Знач Объект)
	
	Адрес.Индекс          = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Индекс");
	Адрес.КодРегиона      = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "КодРегион");
	Адрес.Район           = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Район");
	Адрес.Город           = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Город");
	Адрес.НаселенныйПункт = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "НаселПункт");
	Адрес.Улица           = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Улица");
	Адрес.Дом             = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Дом");
	Адрес.Корпус          = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Корпус");
	Адрес.Квартира        = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Квартира");

КонецПроцедуры

Процедура ПрочитатьАдресЗаПределамиРФ(Сведения, Знач Объект)
	
	Сведения.КодСтраны = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "КодСтраны");
	Сведения.Адрес     = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "АдресТекст");

КонецПроцедуры

Процедура ПрочитатьИдентификационныеСведения(ИдентификационныеСведения, Знач Объект, Знач КонструкторЭД)
	
	Если ТипЗнч(Объект) <> Тип("ОбъектXDTO") Тогда
		Возврат;
	КонецЕсли;

	ИдентификационныеСведенияXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИП");
	Если ТипЗнч(ИдентификационныеСведенияXDTO) = Тип("ОбъектXDTO") Тогда
		ИдентификационныеСведения = КонструкторЭД.НовыеИдентификационныеСведенияИП();
		ПрочитатьИдентификационныеСведенияИП(ИдентификационныеСведения, ИдентификационныеСведенияXDTO);
		Возврат;
	КонецЕсли;
	
	ИдентификационныеСведенияXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ЮрЛицо");
	Если ТипЗнч(ИдентификационныеСведенияXDTO) = Тип("ОбъектXDTO") Тогда
		ИдентификационныеСведения = КонструкторЭД.НовыеИдентификационныеСведенияЮрЛица();
		ПрочитатьИдентификационныеСведенияЮрЛица(ИдентификационныеСведения, ИдентификационныеСведенияXDTO);
		Возврат;
	КонецЕсли;
	
	ИдентификационныеСведенияXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИностранногоЛица");
	Если ТипЗнч(ИдентификационныеСведенияXDTO) = Тип("ОбъектXDTO") Тогда
		ИдентификационныеСведения = КонструкторЭД.НовыеИдентификационныеСведенияИностранногоЛица();
		ПрочитатьИдентификационныеСведенияИностранногоЛица(ИдентификационныеСведения, ИдентификационныеСведенияXDTO);
		Возврат;
	КонецЕсли;
	
	ИдентификационныеСведенияXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ФизЛица");
	Если ТипЗнч(ИдентификационныеСведенияXDTO) = Тип("ОбъектXDTO") Тогда
		ИдентификационныеСведения = КонструкторЭД.НовыеИдентификационныеСведенияФизЛица();
		ПрочитатьИдентификационныеСведенияФизЛица(ИдентификационныеСведения, ИдентификационныеСведенияXDTO);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьИдентификационныеСведенияИП(ИдентификационныеСведения, Знач Объект)
	
	ИдентификационныеСведения.ИНН = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИНН");
	ИдентификационныеСведения.Наименование = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Наименование");
	
КонецПроцедуры

Процедура ПрочитатьИдентификационныеСведенияЮрЛица(ИдентификационныеСведения, Знач Объект)
	
	ИдентификационныеСведения.Наименование = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Наименование");
	ИдентификационныеСведения.ИНН = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИНН");
	ИдентификационныеСведения.КПП = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "КПП");
	
КонецПроцедуры

Процедура ПрочитатьИдентификационныеСведенияИностранногоЛица(ИдентификационныеСведения, Знач Объект)
	
	ИдентификационныеСведения.Наименование = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Наименование");
	ИдентификационныеСведения.TIN = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "TIN");
	ИдентификационныеСведения.КПП = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "КПП");
	ИдентификационныеСведения.КодСтраны = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "КодСтраны");
	
КонецПроцедуры

Процедура ПрочитатьИдентификационныеСведенияФизЛица(ИдентификационныеСведения, Знач Объект)
	
	ИдентификационныеСведения.Фамилия = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Фамилия");
	ИдентификационныеСведения.Имя = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Имя");
	ИдентификационныеСведения.Отчество = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Отчество");
	ИдентификационныеСведения.ИНН = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИНН");
	ИдентификационныеСведения.СНИЛС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "СНИЛС");
	ИдентификационныеСведения.Телефон = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Телефон");
	ИдентификационныеСведения.АдресЭлектроннойПочты = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "АдресЭлектроннойПочты");
	
КонецПроцедуры

Процедура ПрочитатьБанковскиеРеквизиты(БанковскиеРеквизиты, Знач Объект, Знач КонструкторЭД)
	
	Если ТипЗнч(Объект) <> Тип("ОбъектXDTO") Тогда
		Возврат;
	КонецЕсли;
	
	БанковскиеРеквизиты = КонструкторЭД.НовыеБанковскиеРеквизиты();
	БанковскиеРеквизиты.ИНН = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "ИНН");
	БанковскиеРеквизиты.КПП = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "КПП");
	БанковскиеРеквизиты.НомерСчета = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "НомерСчета");
	БанковскиеРеквизиты.Наименование = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Наименование");
	БанковскиеРеквизиты.БИК = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "БИК");
	БанковскиеРеквизиты.КорреспондентскийСчет = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "КорреспондентскийСчет");
	БанковскиеРеквизиты.КодSWIFT = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "КодSWIFT");
	
КонецПроцедуры

Процедура ПрочитатьКонтактныеДанные(КонтактныеДанные, Знач Объект, Знач КонструкторЭД)
	
	Если ТипЗнч(Объект) <> Тип("ОбъектXDTO") Тогда
		Возврат;
	КонецЕсли;
	
	КонтактныеДанные = КонструкторЭД.НовыеКонтактныеДанные();
	КонтактныеДанные.Наименование = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Наименование");
	КонтактныеДанные.НомерТелефона = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "НомерТелефона");
	КонтактныеДанные.АдресЭлектроннойПочты = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "АдресЭлектроннойПочты");
	КонтактныеДанные.Должность = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Должность");
	
КонецПроцедуры

Процедура ПрочитатьСведенияОПодписанте(СведенияОПодписанте, Знач Объект, Знач КонструкторЭД)
	
	Если ТипЗнч(Объект) <> Тип("ОбъектXDTO") Тогда
		Возврат;
	КонецЕсли;
	
	СведенияОПодписанте = КонструкторЭД.НовыеСведенияОПодписанте();
	СведенияОПодписанте.Наименование = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Наименование");
	СведенияОПодписанте.НомерТелефона = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "НомерТелефона");
	СведенияОПодписанте.АдресЭлектроннойПочты = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "АдресЭлектроннойПочты");
	СведенияОПодписанте.Должность = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, "Должность");
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеЭлектронногоДокумента

// BSLLS:Typo-off

Процедура ЗаполнитьФайлИнформации(Объект, Ошибки, КонструкторЭД, ТипыОбъектов)
	
	ДополнительныеДанные = КонструкторЭД.ПолучитьДополнительныеДанныеДляФормирования();
	Идентификатор        = КонструкторЭД.ИдентификаторФайла();
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИдФайл", Идентификатор, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ВерсПрог", ДополнительныеДанные.ВерсияПрограммы, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ВерсФорм", "1.01", Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "УИД", ДополнительныеДанные.УникальныйИдентификатор, Истина, Ошибки);
	
	ДокументXDTO = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.Документ);
	ЗаполнитьДокументИнформации(ДокументXDTO, Ошибки, КонструкторЭД, ТипыОбъектов);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Документ", ДокументXDTO, Истина, Ошибки);
	
КонецПроцедуры

// Параметры:
//  ДокументXDTO  - ОбъектXDTO
//  Ошибки        - Неопределено
//                - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
//  КонструкторЭД - ОбработкаОбъект.ФорматДокументПредприятия
//  ТипыОбъектов  - см. ОбработкаОбъект.ФорматДокументПредприятия.ТипыОбъектов
//
Процедура ЗаполнитьДокументИнформации(ДокументXDTO, Ошибки, КонструкторЭД, ТипыОбъектов)
	
	ИнформацияДокумента = КонструкторЭД.ИнформацияДокумента();
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументXDTO, "ВнешнийИдентификатор",
		ИнформацияДокумента.ВнешнийИдентификатор, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументXDTO, "Дата", ИнформацияДокумента.Дата, , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументXDTO, "Номер", ИнформацияДокумента.Номер, , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументXDTO, "Сумма", ИнформацияДокумента.Сумма, , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументXDTO, "СуммаНДС", ИнформацияДокумента.СуммаНДС, , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументXDTO, "Содержание", ИнформацияДокумента.Содержание, , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументXDTO, "ДатаНачалаДействия", ИнформацияДокумента.ДатаНачалаДействия,
		, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументXDTO, "ДатаОкончанияДействия",
		ИнформацияДокумента.ДатаОкончанияДействия, , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументXDTO, "ЯвляетсяБессрочным", ИнформацияДокумента.ЯвляетсяБессрочным,
		, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументXDTO, "ФормаДокумента", ИнформацияДокумента.ФормаДокумента, Истина,
		Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументXDTO, "Наименование", ИнформацияДокумента.Наименование, Истина,
		Ошибки);

	Если ЗначениеЗаполнено(ИнформацияДокумента.Валюта) Тогда
		ВалютаXDTO = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.Валюта);
		ЗаполнитьВалюту(ВалютаXDTO, ИнформацияДокумента.Валюта, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументXDTO, "Валюта", ВалютаXDTO, , Ошибки);
	КонецЕсли;

	Если ЗначениеЗаполнено(ИнформацияДокумента.ПорядокПродления) Тогда
		ПорядокПродленияXDTO = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ПорядокПродления);
		ЗаполнитьПорядокПродления(ПорядокПродленияXDTO, ИнформацияДокумента.ПорядокПродления, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументXDTO, "ПорядокПродления", ПорядокПродленияXDTO, , Ошибки);
	КонецЕсли;
	
	СоставБумажногоДокумента = ИнформацияДокумента.СоставДокумента;
	Если ЗначениеЗаполнено(СоставБумажногоДокумента) Тогда
		СоставБумажногоДокументаXDTO = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.СоставБумажногоДокумента);
		ЗаполнитьСоставБумажногоДокумента(СоставБумажногоДокументаXDTO, СоставБумажногоДокумента, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументXDTO, "СоставДокумента", СоставБумажногоДокументаXDTO, , Ошибки);
	КонецЕсли;
	
	СвойстваВидаДокумента = ИнформацияДокумента.СвойстваВидаДокумента;
	Если ЗначениеЗаполнено(СвойстваВидаДокумента) Тогда
		СвойстваВидаДокументаXDTO = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.СвойстваВидаДокумента);
		ЗаполнитьСвойстваВидаДокумента(СвойстваВидаДокументаXDTO, СвойстваВидаДокумента, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументXDTO, "СвойстваВидаДокумента", СвойстваВидаДокументаXDTO, , Ошибки);
	КонецЕсли;
	
	СтороныДокументаXDTO = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.СтороныДокумента);
	
	ОрганизацияXDTO = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.Организация);
	ЗаполнитьСторонуДокумента(ОрганизацияXDTO, Ошибки, ИнформацияДокумента.Организация, КонструкторЭД, ТипыОбъектов);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СтороныДокументаXDTO, "Организация", ОрганизацияXDTO, Истина, Ошибки);
	
	Для Каждого СтрокаКонтрагента Из ИнформацияДокумента.Контрагент Цикл
		КонтрагентXDTO = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.Контрагент);
		ЗаполнитьСторонуДокумента(КонтрагентXDTO, Ошибки, СтрокаКонтрагента, КонструкторЭД, ТипыОбъектов);
		СтороныДокументаXDTO.Контрагент.Добавить(КонтрагентXDTO);
	КонецЦикла;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументXDTO, "СтороныДокумента", СтороныДокументаXDTO, Истина, Ошибки);
	
	Для Каждого СвойстваФайла Из ИнформацияДокумента.СвойстваФайлов Цикл
		СвойстваФайловXDTO = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.СвойстваФайлов);
		ЗаполнитьСвойстваФайла(СвойстваФайловXDTO, СвойстваФайла, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументXDTO, "СтороныДокумента", СвойстваФайловXDTO, , Ошибки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьВалюту(Объект, Валюта, Ошибки)

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Код", Валюта.Код, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Наименование", Валюта.Наименование, Истина, Ошибки);

КонецПроцедуры

Процедура ЗаполнитьПорядокПродления(Объект, ПорядокПродления, Ошибки)

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Идентификатор", ПорядокПродления.Идентификатор, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Наименование", ПорядокПродления.Наименование, , Ошибки);

КонецПроцедуры

Процедура ЗаполнитьСоставБумажногоДокумента(Объект, СоставБумажногоДокумента, Ошибки)
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "КоличествоЛистов", СоставБумажногоДокумента.КоличествоЛистов, ,
		Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "КоличествоПриложений",
		СоставБумажногоДокумента.КоличествоПриложений, , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ЛистовВПриложениях", СоставБумажногоДокумента.ЛистовВПриложениях,
		, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "КоличествоЭкземпляров",
		СоставБумажногоДокумента.КоличествоЭкземпляров, , Ошибки);
		
КонецПроцедуры

Процедура ЗаполнитьСвойстваВидаДокумента(Объект, СвойстваВидаДокумента, Ошибки)
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Наименование", СвойстваВидаДокумента.Наименование, , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ЯвляетсяДоговором", СвойстваВидаДокумента.ЯвляетсяДоговором, ,
		Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ЯвляетсяИсходящейКорреспонденцией",
		СвойстваВидаДокумента.ЯвляетсяИсходящейКорреспонденцией, , Ошибки);
		
КонецПроцедуры

Процедура ЗаполнитьСторонуДокумента(СторонаДокументаXDTO, Ошибки, Знач ДанныеСтороныДокумента, Знач КонструкторЭД, Знач ТипыОбъектов);

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СторонаДокументаXDTO, "ДатаПодписания",
		ДанныеСтороныДокумента.ДатаПодписания, , Ошибки);

	БанковскиеРеквизиты = ДанныеСтороныДокумента.БанковскиеРеквизиты;
	Если ЗначениеЗаполнено(БанковскиеРеквизиты) Тогда
		БанковскиеРеквизитыXDTO = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.БанковскиеРеквизитыТип);
		ЗаполнитьБанковскиеРеквизиты(БанковскиеРеквизитыXDTO, БанковскиеРеквизиты, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СторонаДокументаXDTO, "БанковскиеРеквизиты", БанковскиеРеквизитыXDTO, ,
			Ошибки);
	КонецЕсли;
	
	СведенияОПодписанте = ДанныеСтороныДокумента.СведенияОПодписанте;
	Если ЗначениеЗаполнено(СведенияОПодписанте) Тогда
		СведенияОПодписантеXDTO = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.СведенияОПодписантеТип);
		ЗаполнитьСведенияОПодписанте(СведенияОПодписантеXDTO, СведенияОПодписанте, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СторонаДокументаXDTO, "СведенияОПодписанте", СведенияОПодписантеXDTO, ,
			Ошибки);
	КонецЕсли;
	
	КонтактныеДанные = ДанныеСтороныДокумента.КонтактныеДанные;
	Если ЗначениеЗаполнено(КонтактныеДанные) Тогда
		КонтактныеДанныеXDTO = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.КонтактТип);
		ЗаполнитьКонтактныеДанные(КонтактныеДанныеXDTO, КонтактныеДанные, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СторонаДокументаXDTO, "КонтактныеДанные", КонтактныеДанные, , Ошибки);
	КонецЕсли;
	
	Адрес = ДанныеСтороныДокумента.Адрес;
	Если ЗначениеЗаполнено(Адрес) Тогда
		АдресXDTO = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.АдресТип);
		ЗаполнитьАдрес(АдресXDTO, Ошибки, Адрес, КонструкторЭД, ТипыОбъектов);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СторонаДокументаXDTO, "Адрес", АдресXDTO, , Ошибки);
	КонецЕсли;
	
	ИдентификационныеСведения = ДанныеСтороныДокумента.ИдентификационныеСведения;
	Если ЗначениеЗаполнено(ИдентификационныеСведения) Тогда
		ИдентификационныеСведенияXDTO = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ИдентификационныеСведенияТип);
		ЗаполнитьИдентификационныеСведения(ИдентификационныеСведенияXDTO, Ошибки, ИдентификационныеСведения,
			КонструкторЭД, ТипыОбъектов);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СторонаДокументаXDTO, "ИдентификационныеСведения",
			ИдентификационныеСведенияXDTO, , Ошибки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИдентификационныеСведения(Объект, Ошибки, СведенияОЛице, КонструкторЭД, ТипыОбъектов)
	
	ТипыСторон = ТипыСторонДоговора();
	
	Если ТипЗнч(СведенияОЛице) = ТипыСторон.Предприниматель Тогда
		Предприниматель = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ИПТип);
		ЗаполнитьИдентификационныеСведенияИП(Предприниматель, СведенияОЛице, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИП", Предприниматель, Истина, Ошибки);
		
	ИначеЕсли ТипЗнч(СведенияОЛице) = ТипыСторон.ИностранноеЛицо Тогда
		ИностранноеЛицо = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ИностранноеЛицоТип);
		ЗаполнитьИдентификационныеСведенияИностранногоЛица(ИностранноеЛицо, СведенияОЛице, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИностранноеЛицо", ИностранноеЛицо, Истина, Ошибки);
		
	ИначеЕсли ТипЗнч(СведенияОЛице) = ТипыСторон.Организация Тогда
		Организация = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ЮРЛицоТип);
		ЗаполнитьИдентификационныеСведенияЮрЛица(Организация, СведенияОЛице, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ЮРЛицо", Организация, Истина, Ошибки);
		
	Иначе
		ФизЛицо = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.ФизЛицоТип);
		ЗаполнитьИдентификационныеСведенияФизЛица(ФизЛицо, СведенияОЛице, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ФизЛицо", ФизЛицо, Истина, Ошибки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьБанковскиеРеквизиты(Объект, БанковскиеРеквизиты, Ошибки)

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Наименование", БанковскиеРеквизиты.Наименование, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИНН", БанковскиеРеквизиты.ИНН, , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "КПП", БанковскиеРеквизиты.КПП, , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "НомерСчета", БанковскиеРеквизиты.НомерСчета, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "БИК", БанковскиеРеквизиты.БИК, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "КорреспондентскийСчет", БанковскиеРеквизиты.КорреспондентскийСчет,
		Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "КодSWIFT", БанковскиеРеквизиты.КодSWIFT, , Ошибки);

КонецПроцедуры

Процедура ЗаполнитьКонтактныеДанные(Объект, КонтактныеДанные, Ошибки)

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Наименование", КонтактныеДанные.Наименование, , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "НомерТелефона", КонтактныеДанные.НомерТелефона, , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "АдресЭлектроннойПочты", КонтактныеДанные.АдресЭлектроннойПочты, ,
		Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Должность", КонтактныеДанные.Должность, , Ошибки);

КонецПроцедуры

Процедура ЗаполнитьСведенияОПодписанте(Объект, СведенияОПодписанте, Ошибки)

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Наименование", СведенияОПодписанте.Наименование, , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "НомерТелефона", СведенияОПодписанте.НомерТелефона, , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "АдресЭлектроннойПочты", СведенияОПодписанте.АдресЭлектроннойПочты,
		, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Должность", СведенияОПодписанте.Должность, , Ошибки);

КонецПроцедуры

Процедура ЗаполнитьСвойстваФайла(Объект, СвойстваФайла, Ошибки)

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Наименование", СвойстваФайла.Наименование, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ДатаСоздания", СвойстваФайла.ДатаСоздания, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ДатаМодификации", СвойстваФайла.ДатаМодификации, , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Описание", СвойстваФайла.Описание, , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ЯвляетсяОригиналом", СвойстваФайла.ЯвляетсяОригиналом, , Ошибки);

КонецПроцедуры

Процедура ЗаполнитьАдрес(Объект, Ошибки, Адрес, КонструкторЭД, ТипыОбъектов)
	
	ТипыАдресов = ТипыАдресов();
	
	Если ТипЗнч(Адрес) = ТипыАдресов.КЛАДР Тогда
		АдресКЛАДР = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.АдресКЛАДРТип);
		ЗаполнитьАдресКЛАДР(АдресКЛАДР, Адрес, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "АдресКЛАДР", АдресКЛАДР, , Ошибки);
	ИначеЕсли ТипЗнч(Адрес) = ТипыАдресов.ЗаПределамиРФ Тогда
		АдресЗаПределамиРФ = КонструкторЭД.ПолучитьXDTOОбъект(ТипыОбъектов.АдресЗаПределамиРФТип);
		ЗаполнитьАдресЗаПределамиРФ(АдресЗаПределамиРФ, Адрес, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "АдресЗаПределамиРФ", АдресЗаПределамиРФ, , Ошибки);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьАдресКЛАДР(Объект, Адрес, Ошибки)
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Индекс", Адрес.Индекс, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "КодРегион", Адрес.КодРегиона, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Район", Адрес.Район, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Город", Адрес.Город, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "НаселПункт", Адрес.НаселенныйПункт, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Улица", Адрес.Улица, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Дом", Адрес.Дом, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Корпус", Адрес.Корпус, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Квартира", Адрес.Квартира, Ложь, Ошибки);

КонецПроцедуры

Процедура ЗаполнитьАдресЗаПределамиРФ(Объект, Сведения, Ошибки)
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "КодСтраны", Сведения.КодСтраны, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "АдресТекст", Сведения.Адрес, Истина, Ошибки);
	
КонецПроцедуры

Процедура ЗаполнитьИдентификационныеСведенияИП(Объект, СведенияОЛице, Ошибки)
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИНН", СведенияОЛице.ИНН, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Наименование", СведенияОЛице.Наименование, Ложь, Ошибки);
	
КонецПроцедуры

Процедура ЗаполнитьИдентификационныеСведенияЮрЛица(Объект, СведенияОЛице, Ошибки)
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Наименование", СведенияОЛице.Наименование, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИНН", СведенияОЛице.ИНН, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "КПП", СведенияОЛице.КПП, Истина, Ошибки);

КонецПроцедуры

Процедура ЗаполнитьИдентификационныеСведенияИностранногоЛица(Объект, СведенияОЛице, Ошибки)
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Наименование", СведенияОЛице.Наименование, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "КодСтраны", СведенияОЛице.КодСтраны, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "TIN", СведенияОЛице.TIN, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "КПП", СведенияОЛице.КПП, , Ошибки);
	
КонецПроцедуры

Процедура ЗаполнитьИдентификационныеСведенияФизЛица(Объект, СведенияОЛице, Ошибки)
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "ИНН", СведенияОЛице.ИНН, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Фамилия", СведенияОЛице.Фамилия, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Имя", СведенияОЛице.Имя, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Отчество", СведенияОЛице.Отчество, , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "СНИЛС", СведенияОЛице.СНИЛС, , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "Телефон", СведенияОЛице.Телефон, , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Объект, "АдресЭлектроннойПочты", СведенияОЛице.АдресЭлектроннойПочты, ,
		Ошибки);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
