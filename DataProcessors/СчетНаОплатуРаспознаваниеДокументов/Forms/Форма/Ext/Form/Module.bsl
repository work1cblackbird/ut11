#Область ОписаниеПеременных

&НаКлиенте
Перем ИдетИзменениеТекстаПоля;

&НаКлиенте
Перем СвойстваЯчеекТаблицы Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРаспознаваниеДокументов") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Документы.РаспознанныйДокумент.ВосстановлениеТаблицыРеквизитовДоПолнойТаблицы(Объект);
	
	ПолеПросмотра = РаспознаваниеДокументовСлужебный.МакетОтображенияКартинкиДокументаHTML();
	
	ИсходноеИзображение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "ИсходноеИзображение");
	АдресКартинки = ПоместитьВоВременноеХранилище(ИсходноеИзображение.Получить(), УникальныйИдентификатор);
	
	ЮрФизЛицоПоОрганизационнойФорме = РаспознаваниеДокументовСлужебный.ЮрФизЛицоПоОрганизационнойФорме();
	
	Заголовок = Объект.Наименование;
	
	ЗаполнитьЭлементыИтогов();
	НастроитьЭлементыПоРеквизитам();
	
	НастроитьКолонкиТаблицы();
	ЗаполнитьТаблицуДокумента();

	Если Не УправлениеДоступом.ЧтениеРазрешено(Объект.РеквизитыДокумента[9].Значение) Тогда
		// Организация покупатель
		Объект.РеквизитыДокумента[9].Значение = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	Если Не УправлениеДоступом.ЧтениеРазрешено(Объект.РеквизитыДокумента[8].Значение) Тогда
		// Организация продавец
		Объект.РеквизитыДокумента[8].Значение = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	Если Не УправлениеДоступом.ЧтениеРазрешено(Объект.РеквизитыДокумента[17].Значение) Тогда
		// Исполнитель
		Объект.РеквизитыДокумента[17].Значение = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	Если Не УправлениеДоступом.ЧтениеРазрешено(Объект.РеквизитыДокумента[6].Значение) Тогда
		// Договор
		Объект.РеквизитыДокумента[6].Значение = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	Если Не УправлениеДоступом.ЧтениеРазрешено(Объект.РеквизитыДокумента[29].Значение) Тогда
		// Соглашение
		Объект.РеквизитыДокумента[29].Значение = Справочники.СоглашенияСКлиентами.ПустаяСсылка()
	КонецЕсли;	
	Если Не УправлениеДоступом.ЧтениеРазрешено(Объект.РеквизитыДокумента[30].Значение) Тогда
		// Соглашение
		Объект.РеквизитыДокумента[30].Значение = Справочники.СоглашенияСПоставщиками.ПустаяСсылка()
	КонецЕсли;
	Если Не УправлениеДоступом.ЧтениеРазрешено(Объект.РеквизитыДокумента[28].Значение) Тогда
		// Партнер
		Объект.РеквизитыДокумента[28].Значение = Справочники.Партнеры.ПустаяСсылка()
	КонецЕсли; 
	Если Не УправлениеДоступом.ЧтениеРазрешено(Объект.РеквизитыДокумента[2].Значение) Тогда
		// КонтрагентКлиент
		Объект.РеквизитыДокумента[2].Значение = Справочники.Контрагенты.ПустаяСсылка()
	КонецЕсли;
	Если Не УправлениеДоступом.ЧтениеРазрешено(Объект.РеквизитыДокумента[3].Значение) Тогда
		// КонтрагентПокупатель
		Объект.РеквизитыДокумента[3].Значение = Справочники.Контрагенты.ПустаяСсылка()
	КонецЕсли;
	Если Не УправлениеДоступом.ЧтениеРазрешено(Объект.РеквизитыДокумента[31].Значение) Тогда
		// Склад
		Объект.РеквизитыДокумента[31].Значение = Справочники.Склады.ПустаяСсылка();
	КонецЕсли; 
	Если Не УправлениеДоступом.ЧтениеРазрешено(Объект.РеквизитыДокумента[21].Значение) Тогда
		// БанкСчет контр
		Объект.РеквизитыДокумента[21].Значение = Справочники.Контрагенты.ПустаяСсылка()
	КонецЕсли;
	Если Не УправлениеДоступом.ЧтениеРазрешено(Объект.РеквизитыДокумента[22].Значение) Тогда
		// БанкСчет орг
		Объект.РеквизитыДокумента[22].Значение = Справочники.Склады.ПустаяСсылка();
	КонецЕсли;

	ИнициализироватьСтруктуруСозданныеДокументы();
	
	ЕстьТоварыТаблицаДокумента();
	СкладЗаполнен = ЗначениеЗаполнено(Объект.РеквизитыДокумента[31].Значение);
	
	СкладЗаполнен = ЗначениеЗаполнено(Объект.РеквизитыДокумента[31].Значение);
	
	Настройки = РегистрыСведений.ОбщиеНастройкиРаспознаваниеДокументов.ТекущиеНастройки();
	Если Настройки.ФормаОбработчикаПоказыватьИзображенияВШапке Тогда
		ДобавитьИзображенияРеквизитов(Настройки);
	КонецЕсли;
	ВариантСохраненияСоответствий = Настройки.ВариантСохраненияСоответствий;
	
	НастроитьВидимостьПоФункциональнымОпциям();
	
	ИзменитьИсточникиДляВыбораПартнера();
	ИзменитьИсточникиДляВыбораСоглашения();
	ИзменитьИсточникиДляВыбораДоговора(); 
	
	ОбновитьСписокВыбораБанковскихСчетов();
	ИзменитьИсточникиДляВыбораБанковскихСчетов(Ложь);
	
	УстановитьОтображениеСкидок(ЭтотОбъект);

	РаспознаваниеДокументовСлужебный.ПересчитатьПроблемныеЭлементы(ЭтотОбъект);
	
	СвойстваОбработки = Новый Структура();
	СвойстваОбработки.Вставить("ИмяЭлементаТаблицы", "СписокНераспознаннойНоменклатуры");
	СвойстваОбработки.Вставить("ИмяЭлементаРеквизитовОбъекта", "ГруппаРеквизитыОбъекта");
	СвойстваОбработки.Вставить("ИмяПроцедурыПриИзменении", "Подключаемый_УстановитьЗначениеТаблицыСозданияНоменклатуры");
	СвойстваОбработки.Вставить("ИмяПроцедурыИзменениеФлажка", "Подключаемый_ПриИзмененииВыбораПоляНераспознаннойНоменклатуры");
	РаспознаваниеДокументовСлужебный.ДобавитьРеквизитыДляСозданияНоменклатуры(ЭтотОбъект, СвойстваОбработки);
	
	Для Каждого Колонка Из СписокНераспознаннойНоменклатуры.Выгрузить().Колонки Цикл
		ИменаКолонокНераспознаннойНоменклатуры.Добавить(Колонка.Имя);
	КонецЦикла;
	
	НайтиИЗаполнитьСозданныеДокументы();
	
	Если Параметры.Свойство("ЧастьКомплекта") И Параметры.ЧастьКомплекта Тогда
		ЧастьКомплекта = Истина;
	КонецЕсли;

	ВсеСвойстваЯчеекТаблицы = РаспознаваниеДокументовСлужебный.СвойстваЯчеекТаблицы(Объект);
	АдресСвойствЯчеекТаблицы = ПоместитьВоВременноеХранилище(ВсеСвойстваЯчеекТаблицы, УникальныйИдентификатор);
	
	ВсеПечати = Объект.ПометкиНаДокументе.НайтиСтроки(Новый Структура("ТипПометки", Перечисления.ТипыПометокРаспознанногоДокумента.Печать));
	Элементы.НайденоПечатей.Заголовок = Элементы.НайденоПечатей.Заголовок + ": " + ВсеПечати.Количество();
		
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(Объект.РеквизитыДокумента[7].Значение);	

	УправлениеФормой();
	
	УстановитьУсловноеОформление();
    УстановитьПараметрыВыбораНоменклатуры(); 
	УстановитьПараметрыВыбораТоварыСклад();
    УстановитьПараметрыВыбораПартнера();
	
	РаспознаваниеДокументовПереопределяемый.ПриСозданииФормыРаспознаванияНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	Модифицированность = Ложь;
	ТолькоПросмотр = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("ЗагрузитьСвойстваЯчеекТаблицы", 0.1, Истина);
	ИдетИзменениеТекстаПоля = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)  

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом 
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ПослеПодтвержденияЗакрытия", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Документ.РаспознанныйДокумент.Форма.ФормаОбратнойСвязи" Тогда
		РаспознаваниеДокументовСлужебныйКлиент.ОбработкаВыбораОбратнойСвязи(ЭтотОбъект, ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ВыбранРеквизитФормыСоздания" Тогда
		ПриблизитьПоКоординатам(Параметр.Координаты, Параметр.ВысотаКартинки);
	ИначеЕсли ИмяСобытия = "ПрикрепленСканДокумента" Тогда
		НайтиИЗаполнитьСозданныеДокументы();
		ОбновитьОтображениеДанных();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ПодключитьОбработчикОжидания("Подключаемый_ПослеЗаписи", 0.1, Истина)
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	СохранитьЗначенияПередЗаписью();
	РаспознаваниеДокументовСлужебный.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	РаспознаваниеДокументовПереопределяемый.ПослеЗаписиФормыРаспознаванияНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПослеЗаписи() Экспорт
	Оповестить("РаспознанныйДокумент_ОбновитьОтборФормыСписка", Объект.Ссылка);
	Заголовок = Объект.Наименование;
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначенияПередЗаписью()
	
	СохранитьИтоговыеЗначения();
	СохранитьЗначенияИзТаблицыДокумента();
	РаспознаваниеДокументовПереопределяемый.ПередЗаписьюРаспознанногоДокумента(Объект);
	ЗаписатьСоответствияРаспознанныхСтрок();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСоответствияРаспознанныхСтрок()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СоответствияСтрок", НаборСоответствийРаспознанныхСтрок.Выгрузить(,"ТипЗначения,РаспознаннаяСтрока,СоответствующееЗначение,КоличествоПовторений"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоответствияСтрок.ТипЗначения КАК ТипЗначения,
	|	СоответствияСтрок.РаспознаннаяСтрока КАК РаспознаннаяСтрока,
	|	СоответствияСтрок.СоответствующееЗначение КАК СоответствующееЗначение,
	|	СоответствияСтрок.КоличествоПовторений КАК КоличествоПовторений
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	&СоответствияСтрок КАК СоответствияСтрок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.ТипЗначения КАК ТипЗначения,
	|	ДанныеДокумента.РаспознаннаяСтрока КАК РаспознаннаяСтрока,
	|	ДанныеДокумента.СоответствующееЗначение КАК СоответствующееЗначение,
	|	ДанныеДокумента.КоличествоПовторений + ЕСТЬNULL(ДанныеРегистра.КоличествоПовторений, 0) КАК КоличествоПовторений
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеРаспознанныхСтрокРаспознаваниеДокументов КАК ДанныеРегистра
	|		ПО ДанныеДокумента.ТипЗначения = ДанныеРегистра.ТипЗначения
	|			И ДанныеДокумента.РаспознаннаяСтрока = ДанныеРегистра.РаспознаннаяСтрока
	|			И ДанныеДокумента.СоответствующееЗначение = ДанныеРегистра.СоответствующееЗначение
	|ГДЕ
	|	НЕ ЕСТЬNULL(ДанныеРегистра.ИзмененоВручную, ЛОЖЬ)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	АвторЗаписи = Пользователи.ТекущийПользователь();
	ДатаЗаписи = ТекущаяДатаСеанса();
	Пока Выборка.Следующий() Цикл
		Запись = РегистрыСведений.СоответствиеРаспознанныхСтрокРаспознаваниеДокументов.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.Автор = АвторЗаписи;
		Запись.ДатаСоздания = ДатаЗаписи;
		Запись.Записать();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТипДокументаПриИзменении(Элемент)
	
	Обработчик = Новый ОписаниеОповещения("ПослеПроверкиИзменения", ЭтотОбъект);
	РаспознаваниеДокументовСлужебныйКлиент.ИзменитьТипДокумента(ЭтотОбъект, Обработчик, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОбработкиПриИзменении(Элемент)
	
	Обработчик = Новый ОписаниеОповещения("ПослеПроверкиИзменения", ЭтотОбъект);
	РаспознаваниеДокументовСлужебныйКлиент.ИзменитьВариантОбработки(ЭтотОбъект, Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипДокументаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ВариантОбработкиОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПолеПросмотраДокументСформирован(Элемент)
	
	Если Элемент.Документ.getElementById("image_setter") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РаспознаваниеДокументовСлужебныйКлиент.ЗагрузитьКартинкуПоАдресу(Элементы.ПолеПросмотра, АдресКартинки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеПросмотраПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	Если ДанныеСобытия.Element.id = "image_load_button" Тогда
		HTMLДокументСформирован = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеПриИзменении(Элемент)
	
	Объект.ВариантОбработки = РаспознаваниеДокументовСлужебныйКлиентСервер.ВариантОбработкиПоТипуИНаправлению(
		Объект.ТипДокумента,
		Объект.Направление
	);
	НаправлениеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидСкидкиПриИзменении(Элемент)
	
	УстановитьОтображениеСкидок(ЭтотОбъект);
	ПриИзмененииПоляНаКлиенте(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачалоВыбораПоля(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИмяРеквизита = Элемент.Имя;
	Отбор = Новый Структура("ИмяРеквизита", ИмяРеквизита);
	НайденныеСтроки = Объект.РеквизитыДокумента.НайтиСтроки(Отбор);
	
	Если НЕ НайденныеСтроки.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	КоординатыКартинки = РаспознаваниеДокументовСлужебныйКлиентСервер.ПолучитьНаборКоординат(НайденныеСтроки[0]);
	ПриблизитьПоКоординатам(КоординатыКартинки, НайденныеСтроки[0].СтрокВИзображении);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорСоздание(Элемент, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ИсточникПоляДоговорКонтрагент) ИЛИ
		НЕ ЗначениеЗаполнено(ИсточникПоляДоговорОрганизация) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Перед созданием договора необходимо заполнить поля ""Контрагент"" и ""Организация""'");
		Сообщение.Сообщить();
		СтандартнаяОбработка = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииПоля(Элемент)
	
	ПриИзмененииПоляНаКлиенте(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПоляНаКлиенте(Элемент)
	
	ПриИзмененииПоляНаСервере(Элемент.Имя);
	РаспознаваниеДокументовСлужебныйКлиент.ДобавитьСоответствиеРаспознаваемыхСтрок(
		Объект,
		ВариантСохраненияСоответствий,
		НаборСоответствийРаспознанныхСтрок,
		Элемент.Имя
	);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПоляНаСервере(ИмяПоля)
	
	Отбор = Новый Структура("ИмяРеквизита", ИмяПоля);
	НайденныеСтроки = Объект.РеквизитыДокумента.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() <> 0 Тогда
		Если НЕ НайденныеСтроки[0].ЗаполненоВручную Тогда
			НайденныеСтроки[0].ЗаполненоВручную = Истина;
		КонецЕсли;
		НайденныеСтроки[0].ЭлементСоздан = НовыйЭлементСозданВФормеБРД;
		НовыйЭлементСозданВФормеБРД = Ложь;
	КонецЕсли;
	
	Если ИмяПоля = "Договор" Тогда
		// Поменяли договор, а значит возможно Валюту в договоре, которая должна совпадать с валютой Банковского счета
		Если (Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий И НЕ ЗначениеЗаполнено(Объект.РеквизитыДокумента[21].Значение)) // БанковскийСчетКонтрагента
			ИЛИ (Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий И НЕ ЗначениеЗаполнено(Объект.РеквизитыДокумента[22].Значение)) // БанковскийСчетОрганизации
			Тогда
			
			ИзменитьИсточникиДляВыбораБанковскихСчетов();
		КонецЕсли;
	ИначеЕсли ИмяПоля = "СуммаВключаетНДС" Тогда
		СуммаВключаетНДС = Объект.РеквизитыДокумента[26].Значение;
		Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл
			РаспознаваниеДокументовСлужебныйКлиентСервер.ПриИзмененииСтавкаНДС(СтрокаТаблицы, СуммаВключаетНДС);
		КонецЦикла;
	ИначеЕсли ИмяПоля = "Продавец" Или ИмяПоля = "ПокупательОрганизация" Тогда
		// Поступление
 		СопоставитьПартнераКонтрагентуПослеИзменения();
		ИзменитьИсточникиДляВыбораПартнера(ИмяПоля);
		ИзменитьИсточникиДляВыбораСоглашения(ИмяПоля);
		ИзменитьИсточникиДляВыбораДоговора(ИмяПоля);
		Если ИмяПоля = "ПокупательОрганизация" Тогда
			ИзменитьИсточникиДляВыбораБанковскихСчетов();   
			ОбновитьСписокВыбораБанковскихСчетов();
		КонецЕсли;
	ИначеЕсли ИмяПоля = "Покупатель" Или ИмяПоля = "ПродавецОрганизация" Тогда
		// Реализация
		СопоставитьПартнераКонтрагентуПослеИзменения();
		ИзменитьИсточникиДляВыбораПартнера(ИмяПоля);
		ИзменитьИсточникиДляВыбораСоглашения(ИмяПоля);
		ИзменитьИсточникиДляВыбораДоговора(ИмяПоля);  
		Если ИмяПоля = "ПродавецОрганизация" Тогда
			ИзменитьИсточникиДляВыбораБанковскихСчетов();   
			ОбновитьСписокВыбораБанковскихСчетов();
		КонецЕсли;  
	ИначеЕсли ИмяПоля = "Партнер" Тогда	 
		СопоставитьКонтрагентаПартнераПослеИзменения();
		ИзменитьИсточникиДляВыбораСоглашения(ИмяПоля);
		ИзменитьИсточникиДляВыбораДоговора(ИмяПоля);     
	ИначеЕсли ИмяПоля = "Исполнитель" Тогда	
		ИзменитьИсточникиДляВыбораСоглашения(ИмяПоля);
		ИзменитьИсточникиДляВыбораДоговора(ИмяПоля);
	ИначеЕсли ИмяПоля = "СоглашениеСПоставщиком" Или ИмяПоля = "СоглашениеСКлиентом" Тогда	
		ИзменитьУсловияЗакупокПродаж(ИмяПоля); 
		ИзменитьИсточникиДляВыбораДоговора(ИмяПоля);    
	ИначеЕсли ИмяПоля = "Склад" Тогда	
		ЗаполнитьПроверитьПоляСклада();  
		//ЗаполнитьУстановитьВидимостьСерийДоступностьПерезаполнитьПоОтгрузке();
		УстановитьПараметрыВыбораТоварыСклад();
  	ИначеЕсли ИмяПоля = "Подразделение" Тогда  
		//ЗаполнитьУстановитьВидимостьСерийДоступностьПерезаполнитьПоОтгрузке();
  	КонецЕсли;
	
	СохранитьИтоговыеЗначения();
	РаспознаваниеДокументовСлужебный.ПересчитатьПроблемныеЭлементы(ЭтотОбъект);
	
	НайтиИЗаполнитьСозданныеДокументы();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АвтоПодборПоля(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если СтрЗаканчиваетсяНа(Элемент.Имя, "Белый") Тогда
		ИмяРеквизита = СтрЗаменить(Элемент.Имя, "Белый", "");
	ИначеЕсли СтрЗаканчиваетсяНа(Элемент.Имя, "Красный") Тогда
		ИмяРеквизита = СтрЗаменить(Элемент.Имя, "Красный", "");
	Иначе
		ИмяРеквизита = Элемент.Имя;
	КонецЕсли;

	Реквизит = РаспознаваниеДокументовСлужебныйКлиентСервер.РеквизитДокумента(Объект, ИмяРеквизита, Ложь);
	Если Реквизит = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КоординатыКартинки = РаспознаваниеДокументовСлужебныйКлиентСервер.ПолучитьНаборКоординат(Реквизит);
	ПриблизитьПоКоординатам(КоординатыКартинки, Реквизит.СтрокВИзображении);
	
	Если Элемент.Имя = "Договор" Тогда
		Если ИдетИзменениеТекстаПоля Тогда
			ИдетИзменениеТекстаПоля = Ложь;
		Иначе
			СтандартнаяОбработка = Ложь;
			Тип = Новый(ТипЗнч(Реквизит.Значение));
			ЗаполнитьСписокВыбораПоляНаСервере(Реквизит.РаспознанныйТекст, Тип, ДанныеВыбора);
			Если Не ПроверитьВозможностьСозданияДоговора() И ДанныеВыбора.Количество() Тогда
				ДанныеВыбора.Удалить(0);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	// При изменении реквизита формы произойдет серверный вызов и изменение текста будет потеряно,
	// поэтому тут используется клиентская переменная формы
	ИдетИзменениеТекстаПоля = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораПоляНаСервере(РаспознанныйТекст, Тип, ДанныеВыбора)
	РаспознаваниеДокументовСлужебный.ЗаполнитьСписокВыбораПоля(ЭтотОбъект, РаспознанныйТекст, Тип, ДанныеВыбора);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаВыбораПоля(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОчиститьСообщения();
	
	ИмяРеквизита = Элемент.Имя;
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Строка") Тогда
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")
			И ВыбранноеЗначение.Свойство("СозданВФормеБРД") Тогда
			
			ВыбранноеЗначение = ВыбранноеЗначение.Ссылка;
			СозданНовыйЭлемент = Истина;
		Иначе
			// Выбрали значение из выпадающего списка
			СозданНовыйЭлемент = Ложь;
		КонецЕсли;
		
		Если ТекущийЭлемент = Элементы.ТаблицаДокумента Тогда
			ТекущиеДанные = Элементы["ТаблицаДокумента"].ТекущиеДанные;
			
			// В редких случаях в веб клиенте ТекущийЭлемент будет таблицей, хотя редактировалась шапка,
			// поэтому сделаем дополнительную проверку
			Если ТекущиеДанные.Свойство(ИмяРеквизита + "ЭлементСоздан") Тогда
				ТекущиеДанные[ИмяРеквизита + "ЭлементСоздан"] = СозданНовыйЭлемент;
			Иначе
				НовыйЭлементСозданВФормеБРД = СозданНовыйЭлемент;
			КонецЕсли;
		Иначе
			НовыйЭлементСозданВФормеБРД = СозданНовыйЭлемент;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если ИмяРеквизита = "ПродавецОрганизация" ИЛИ ИмяРеквизита = "ПокупательОрганизация" Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;

	Если ТекущийЭлемент = Элементы.ТаблицаДокумента Тогда
		
		НомерСтрокиТЧ = Элементы.ТаблицаДокумента.ТекущиеДанные.НомерСтроки;
		Ключ = РаспознаваниеДокументовСлужебныйКлиентСервер.КлючСвойстваЯчеекТаблицы(ИмяРеквизита, НомерСтрокиТЧ);
		Свойства = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СвойстваЯчеекТаблицы, Ключ);		
		Значение = Свойства.Значение;
		НаборДанных = РаспознаваниеДокументовСлужебныйКлиентСервер.НаборДанныхСтрокиТаблицы(СвойстваЯчеекТаблицы, НомерСтрокиТЧ);
		ИмяТаблицы = "РеквизитыТабличныхЧастей";
		
	Иначе
		
		НаборДанных = Объект.РеквизитыДокумента;
		Отбор = Новый Структура("ИмяРеквизита", ИмяРеквизита);
		ПодходящиеСтроки = Объект.РеквизитыДокумента.НайтиСтроки(Отбор);
		Если ПодходящиеСтроки.Количество() > 0 Тогда
			Значение = ПодходящиеСтроки[0].Значение;
		Иначе
			Значение = Неопределено;
		КонецЕсли;
		ИмяТаблицы = "РеквизитыДокумента";
		
	КонецЕсли;
	
	ТипРеквизита = ТипЗнч(Значение);
	Если РаспознаваниеДокументовКлиентСервер.ЭтоПримитивныйТип(ТипРеквизита) Тогда
		Если ТипРеквизита = Тип("Строка") Тогда
			ВыбранноеЗначение = СокрЛП(ВыбранноеЗначение);
		Иначе
			ВыбранноеЗначение = РаспознаваниеДокументовСериализацияСлужебныйКлиентСервер.ПривестиТип(ВыбранноеЗначение, ТипРеквизита);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;

	НаборДанных = РаспознаваниеДокументовСлужебныйКлиент.НаборДанныхСозданияЭлемента(НаборДанных);
	
	ДополнительныеДанные = Новый Структура;
	ДополнительныеДанные.Вставить("РаспознанныйДокумент", Объект.Ссылка);
	ДополнительныеДанные.Вставить("ЮрФизЛицоПоОрганизационнойФорме", ЮрФизЛицоПоОрганизационнойФорме);
	ДополнительныеДанные.Вставить("ТипДоговора", ИсточникПоляДоговорВидДоговора);
	ДополнительныеДанные.Вставить("ИспользоватьПартнеровИКонтрагентов", Элементы.ГруппаПартнер.Видимость);
	
	Если Не ТекущийЭлемент = Элементы.ТаблицаДокумента Тогда
		Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияРаспознанногоДокумента.Исходящий") Тогда
			Если Объект.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовРаспознаваниеДокументов.УПД") 
				Или Объект.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовРаспознаваниеДокументов.СчетФактура") Тогда 
				ИННКПП = НаборДанных.Получить("ИННКПППокупателя").Значение;
			КонецЕсли;		
		Иначе
			Если Объект.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовРаспознаваниеДокументов.УПД") 
				Или Объект.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовРаспознаваниеДокументов.СчетФактура") Тогда 
				ИННКПП = НаборДанных.Получить("ИННКПППродавца").Значение;
			КонецЕсли;	
		КонецЕсли;
		ИННКонтрагента = "";
		КППКонтрагента = "";
		ИзвлечьИННКППИзСтроки(ИННКПП,"ИНН",ИННКонтрагента);
		ИзвлечьИННКППИзСтроки(ИННКПП,"КПП",КППКонтрагента);
		ДополнительныеДанные.Вставить("ИННКонтрагента", ИННКонтрагента);
		ДополнительныеДанные.Вставить("КППКонтрагента", КППКонтрагента);
	КонецЕсли;

	ДополнительныеДанные.Вставить("ПараметрыВыбораНоменклатуры", ПараметрыВыбораНоменклатуры());

	РаспознаваниеДокументовСлужебныйКлиент.ОткрытьФормуСозданияЭлемента(
		ИмяРеквизита,
		НаборДанных,
		ДополнительныеДанные,
		Объект,
		Элемент,
		Значение
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьЗначениеТаблицыСозданияНоменклатуры(Элемент) Экспорт
	
	ИмяРеквизита = СтрЗаменить(Элемент.Имя, "ПолеСписокНераспознаннойНоменклатуры" , "");
	
	РедактируемаяСтрока = СтрокаПолейНераспознаннойНоменклатурыПоИмениРеквизита(ИмяРеквизита);
	Если РедактируемаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РедактируемаяСтрока.Выбран = Истина;
	ИзменитьДоступностьКнопкиУстановкиРеквизитов();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииВыбораПоляНераспознаннойНоменклатуры(Элемент) Экспорт
	
	ИзменитьДоступностьКнопкиУстановкиРеквизитов();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница.Имя = "СтраницаГрупповоеСоздание" Тогда
		ОбновитьСтрокиНераспознаннойНоменклатуры();
	КонецЕсли;
	
	// Выделяем все строки
	Для Каждого СтрокаДобавления Из СписокНераспознаннойНоменклатуры Цикл
		Элементы.СписокНераспознаннойНоменклатуры.ВыделенныеСтроки.Добавить(СтрокаДобавления.ПолучитьИдентификатор());
	КонецЦикла;
	
	// Фокусируемся на первой строке
	Если СписокНераспознаннойНоменклатуры.Количество() Тогда
		ИдентификаторПервойСтроки = СписокНераспознаннойНоменклатуры[0].ПолучитьИдентификатор();
		Элементы.СписокНераспознаннойНоменклатуры.ТекущаяСтрока = ИдентификаторПервойСтроки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаДокумента

&НаКлиенте
Процедура ТаблицаДокументаПриИзменении(Элемент)
	
	ПорядокСтроки = 0;
	Для Каждого Строка Из ТаблицаДокумента Цикл
		ПорядокСтроки = ПорядокСтроки + 1;
		Если Строка.ПорядокСтроки <> ПорядокСтроки Тогда
			Строка.ПорядокСтроки = ПорядокСтроки;
		КонецЕсли;
	КонецЦикла;
	
	Если Элемент.ТекущийЭлемент.Имя = "Номенклатура" И Не Элемент.ТекущиеДанные = Неопределено Тогда  
		
		ТекущаяСтрока = Элемент.ТекущиеДанные;
		
		ТекущаяСтрока.Характеристика = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"); 
		ТекущаяСтрока.ТПодразделение = РаспознаваниеДокументовСлужебныйКлиентСервер.ЗначениеРеквизитаДокумента(Объект, "Подразделение",
			ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка"));  
		
		Если ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар") Или
			ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара") Или
			ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Набор") Тогда
				
			ТекущаяСтрока.СписатьНаРасходы = Ложь;
			
		ИначеЕсли ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга") Тогда
			ТекущаяСтрока.СписатьНаРасходы = Истина;
		КонецЕсли;
		
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "СтатьяРасходов" Тогда 
		ТекущаяСтрока = Элемент.ТекущиеДанные;
		ТекущаяСтрока.СтатьяРасходов = ?(ТекущаяСтрока.СписатьНаРасходы, ТекущаяСтрока.СтатьяРасходов, Неопределено); 				
	КонецЕсли;
		
	ЕстьТоварыТаблицаДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументаПриАктивизацииЯчейки(Элемент)
	
	ПриАктивизацииЯчейкиТаблицы(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриАктивизацииЯчейкиТаблицы(Элемент)
	
	Если ТипЗнч(ТекущийЭлемент) <> Тип("ТаблицаФормы") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийВыбранныйЭлемент = Элемент.ТекущийЭлемент;
	Если ТекущийВыбранныйЭлемент = Неопределено Или Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = ТекущийВыбранныйЭлемент.Имя;
	НомерСтрокиТЧ = Элемент.ТекущиеДанные.НомерСтроки;
	
	ЭлементКолонка = Элементы[ИмяРеквизита];
	ЭлементКолонка.СписокВыбора.Очистить();
	
	Ключ = РаспознаваниеДокументовСлужебныйКлиентСервер.КлючСвойстваЯчеекТаблицы(ИмяРеквизита, НомерСтрокиТЧ);
	
	Свойства = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СвойстваЯчеекТаблицы, Ключ);
	Если Свойства = Неопределено Тогда
		
		ДанныеПриближения = Новый Структура("Координаты, СтрокВИзображении", Неопределено, 0);
		ПодключитьОбработчикОжидания("Подключаемый_ПриблизитьПоКоординатам", 0.2, Истина);
		
		Возврат;
	КонецЕсли;
	
	ДанныеПриближения = Новый Структура("Координаты, СтрокВИзображении", Свойства.Координаты, Свойства.СтрокВИзображении);
	ПодключитьОбработчикОжидания("Подключаемый_ПриблизитьПоКоординатам", 0.2, Истина);
	
	Если Не ИмяРеквизита = "ТПодразделение" И Не ИмяРеквизита = "ТСклад" И Не ИмяРеквизита = "СтатьяДоходов"
		И Не ИмяРеквизита = "СтатьяРасходов" И Не ИмяРеквизита = "Статья" И Не ИмяРеквизита = "Характеристика" Тогда
			
		НадписьОшибкаТЧ = Элемент.ТекущиеДанные[ИмяРеквизита + "ТекстОшибки"];
		
		Элементы.НадписьОшибкаТЧ.Видимость = Не ПустаяСтрока(НадписьОшибкаТЧ);
		
		СписокДляВыбора = РаспознаваниеДокументовСлужебныйКлиент.ПолучитьЗначенияСпискаВыбора(
			Свойства.РаспознанныйТекст, Свойства.ТипЗначения, Свойства.ЗначенияВыбора);
		
		Для Каждого ДанныеВыбора Из СписокДляВыбора Цикл
			ЭлементКолонка.СписокВыбора.Добавить(ДанныеВыбора.Значение, ДанныеВыбора.Представление, , ДанныеВыбора.Картинка);
		КонецЦикла;
		Если ИмяРеквизита = "Номенклатура" И Не ПроверитьВозможностьСозданияНоменклатуры() Тогда
			ЭлементКолонка.СписокВыбора.Удалить(0); 
		КонецЕсли;
		Если ИмяРеквизита = "ЕдиницаИзмерения" Тогда
			ЭлементКолонка.СписокВыбора.Удалить(0); 
		КонецЕсли;
		Если ИмяРеквизита = "СтавкаНДС" Тогда
			ЭлементКолонка.СписокВыбора.Удалить(0); 
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриблизитьПоКоординатам()
	ПриблизитьПоКоординатам(ДанныеПриближения.Координаты, ДанныеПриближения.СтрокВИзображении);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииКолонки(Элемент)
	
	ИдентификаторСтроки = Элементы["ТаблицаДокумента"].ТекущаяСтрока;
	
	ИмяРеквизита = Элемент.Имя;
	ТекущиеДанные = Элементы["ТаблицаДокумента"].ТекущиеДанные;
	НомерСтрокиТЧ = ТекущиеДанные.НомерСтроки;
	ВыбранноеЗначение = ТекущиеДанные[ИмяРеквизита];
	
	ТекущиеДанные[ИмяРеквизита + "ЗаполненоВручную"] = Истина;
	
	РаспознаваниеДокументовСлужебныйКлиентСервер.ПриИзмененииКолонки(
		Объект,
		ТекущиеДанные,
		ИмяРеквизита,
		ВыбранноеЗначение
	);
	
	РаспознаваниеДокументовСлужебныйКлиентСервер.ПересчитатьПроблемныеРеквизитыТаблицыДокумента(
		ЭтотОбъект,
		ТекущиеДанные
	);
	
	Отбор = Новый Структура("ИмяРеквизита, НомерСтроки", ИмяРеквизита, НомерСтрокиТЧ);
	НайденныеСтроки = ПроблемныеЭлементы.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() Тогда
		НадписьОшибкаТЧ = ТекущиеДанные[ИмяРеквизита + "ТекстОшибки"];
	Иначе
		НадписьОшибкаТЧ = "";
	КонецЕсли;
	
	Элементы.НадписьОшибкаТЧ.Видимость = НЕ ПустаяСтрока(НадписьОшибкаТЧ);

	Ключ = РаспознаваниеДокументовСлужебныйКлиентСервер.КлючСвойстваЯчеекТаблицы(ИмяРеквизита, НомерСтрокиТЧ);
	Свойства = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СвойстваЯчеекТаблицы, Ключ);
	Если Свойства = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Свойства.Значение = ТекущиеДанные[ИмяРеквизита];
	Свойства.ЗаполненоВручную = Истина;
	
	РаспознаваниеДокументовСлужебныйКлиент.ДобавитьСоответствиеРаспознаваемыхСтрок(
		Объект,
		ВариантСохраненияСоответствий,
		НаборСоответствийРаспознанныхСтрок,
		ИмяРеквизита,
		ТекущиеДанные.НомерСтроки,
		ТекущиеДанные[ИмяРеквизита],
		Свойства
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументаПередУдалением(Элемент, Отказ)
	
	ТекущийНомерСтроки = Элемент.ТекущиеДанные.НомерСтроки;
	Отбор = Новый Структура("НомерСтроки", ТекущийНомерСтроки);
	НайденныеСтроки = ПроблемныеЭлементы.НайтиСтроки(Отбор);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		ПроблемныеЭлементы.Удалить(НайденнаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументаПослеУдаления(Элемент)
	ТаблицаДокументаПослеУдаленияНаСервере();
КонецПроцедуры

&НаСервере
Процедура ТаблицаДокументаПослеУдаленияНаСервере()
	
	СохранитьИтоговыеЗначения();
	СохранитьЗначенияИзТаблицыДокумента();
	РаспознаваниеДокументовСлужебный.ПересчитатьПроблемныеЭлементы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Копирование Тогда
		СтрокаТаблицы = Элемент.ТекущиеДанные;
		СтрокаТаблицы.НомерСтроки = 0;
		// СтрокаТаблицы.ПорядокСтроки - уже заполнен в процедуре ТаблицаДокументаПриИзменении
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокНераспознаннойНоменклатуры

&НаКлиенте
Процедура СписокНераспознаннойНоменклатурыПриАктивизацииЯчейки(Элемент)
	
	Если Элементы.СписокНераспознаннойНоменклатуры.ТекущиеДанные = Неопределено
		Или Элемент.ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторИсходнойСтроки = Элемент.ТекущиеДанные.ИдентификаторИсходнойСтроки;
	СтрокаТаблицыДокумента = ТаблицаДокумента.НайтиПоИдентификатору(ИдентификаторИсходнойСтроки);
	Если СтрокаТаблицыДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЭлемента = СтрЗаменить(Элемент.ТекущийЭлемент.Имя, "СписокНераспознаннойНоменклатуры", "");
	НомерСтроки = СтрокаТаблицыДокумента.НомерСтроки;
	
	ОбновлениеВыделенияРамкойПоляДокумента(ИмяЭлемента, НомерСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНераспознаннойНоменклатурыПриАктивизацииСтроки(Элемент)
	
	Для Каждого Реквизит Из ИменаКолонокНераспознаннойНоменклатуры Цикл
		Если Элементы.СписокНераспознаннойНоменклатуры.ТекущиеДанные = Неопределено Тогда
			УстановитьЗначениеДляРеквизитовБыстрогоРедактирования(Реквизит.Значение);
		Иначе
			ЗначениеЯчейки = Элементы.СписокНераспознаннойНоменклатуры.ТекущиеДанные[Реквизит.Значение];
			УстановитьЗначениеДляРеквизитовБыстрогоРедактирования(Реквизит.Значение, ЗначениеЯчейки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьРаспознанныйДокумент(Команда)
	
	Ид = Число(СтрРазделить(Команда.Имя, "_")[1]);
	ОткрытьДокументПоСсылке(ДокументыКомплектные[Ид].Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДубльДокумента(Команда)
	
	Ид = Число(СтрРазделить(Команда.Имя, "_")[1]);
	ОткрытьДокументПоСсылке(ДокументыДубли[Ид].ДубльДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСозданныйДокумент(Команда)
	
	Ид = Число(СтрРазделить(Команда.Имя, "_")[1]);
	ОткрытьДокументПоСсылке(ДокументыСозданные[Ид].СозданныйДокумент);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКомплект(Команда)
	ПоказатьСозданиеКомплекта();
КонецПроцедуры

&НаКлиенте
Процедура ПожаловатьсяНаКачество(Команда)
	
	РаспознаваниеДокументовСлужебныйКлиент.ОткрытьФормуОбратнойСвязи(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСоздатьДокумент(Команда)
	
	ПараметрыОперации = РаспознаваниеДокументовКомплектыКлиентСервер.НовыеПараметрыОперации();
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияРаспознанногоДокумента.Исходящий") Тогда
		ПараметрыОперации.ТипДокумента = "ЗаказКлиента";
		ПараметрыОперации.ВидОперации = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияКлиенту");
	Иначе
		ПараметрыОперации.ТипДокумента = "ЗаказПоставщику";
		ПараметрыОперации.ВидОперации = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика")
	КонецЕсли;
	
	РаспознаваниеДокументовСлужебныйКлиент.ПоказатьСозданиеДокумента(ЭтотОбъект, ПараметрыОперации);
		
КонецПроцедуры

&НаКлиенте
Процедура Перепроверить(Команда)
	
	КлючеваяОперация = "РаспознаваниеДокументов.Перепроверить";
	Замер = ОценкаПроизводительностиКлиент.ЗамерВремени(КлючеваяОперация);
	
	Комментарий = Новый Структура;
	Комментарий.Вставить("ИдентификаторРезультата", Объект.ИдентификаторРезультата);
	
	ОценкаПроизводительностиКлиент.УстановитьКомментарийЗамера(Замер, Комментарий);
	
	ПерепроверитьНаСервере();
	СвойстваЯчеекТаблицы = ПолучитьИзВременногоХранилища(АдресСвойствЯчеекТаблицы);
	
	ОбновитьСтрокиНераспознаннойНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНоменклатуру(Команда)
	
	ПараметрыСоздаваемойНоменклатуры = Новый Массив;
	
	Для Каждого ВыбраннаяСтрока Из Элементы.СписокНераспознаннойНоменклатуры.ВыделенныеСтроки Цикл
		
		Данные = СписокНераспознаннойНоменклатуры.НайтиПоИдентификатору(ВыбраннаяСтрока);
		
		ПараметрыСоздания = Новый Структура();
		
		Для Каждого Колонка Из ИменаКолонокНераспознаннойНоменклатуры Цикл
			ИмяКолонки = Колонка.Значение;
			ПараметрыСоздания.Вставить(ИмяКолонки, Данные[ИмяКолонки]);
		КонецЦикла;
		
		ПараметрыСоздания.Вставить("Ссылка");
		
		ПараметрыСоздаваемойНоменклатуры.Добавить(ПараметрыСоздания);
		
	КонецЦикла;
	
	ВыполнитьСозданиеНоменклатуры(ПараметрыСоздаваемойНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗначенияСтрокНераспознаннойНоменклатуры(Команда)
	
	Для Каждого РеквизитТекущихСтрок Из ПоляНераспознаннойНоменклатуры Цикл
		Если РеквизитТекущихСтрок.Выбран = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		УстановитьЗначениеДляВыделенныхСтрок(РеквизитТекущихСтрок.Значение, РеквизитТекущихСтрок.ИмяРеквизита);
	КонецЦикла;
	
	ИзменитьДоступностьКнопкиУстановкиРеквизитов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепитьСкан(Команда) 
	
	Если Модифицированность = Истина Тогда
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПрикрепитьСканЗавершение", ЭтотОбъект); 
		ТекстВопроса = НСтр("ru = 'Для прикрепления скана к документу требуется его записать.
			           |Записать?'");
		ПоказатьВопрос(ОповещениеОЗакрытии, ТекстВопроса, РежимДиалогаВопрос.ДаНет); 
	Иначе
		ПрикрепитьСканЗавершение(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепитьСканЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Записать();
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("РаспознанныйДокумент", Объект.Ссылка);
		Обработчик = Новый ОписаниеОповещения("ПослеОткрытияФормыПрикрепитьСкан", ЭтотОбъект);
			
		ОткрытьФорму(
			"Документ.РаспознанныйДокумент.Форма.ПрикрепитьИзображениеКНайденомуДокументу",
			ПараметрыОткрытия,
			ЭтотОбъект,,,,Обработчик);
			
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытияФормыПрикрепитьСкан(Результат, ДопПараметры) Экспорт
	
	Прочитать();

КонецПроцедуры

&НаКлиенте
Процедура НайденоПечатей(Команда)
	// Используется как статическая декорация 
	Печати=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИдентификаторДокумента(Команда)
	
	ПараметрыСообщения = Новый Структура;
	ПараметрыСообщения.Вставить("Заголовок", НСтр("ru = 'Идентификатор документа'"));
	ПараметрыСообщения.Вставить("Сообщение", Объект.ИдентификаторРезультата);
	ПараметрыСообщения.Вставить("МногострочныйРежим", Ложь);
	
	ОткрытьФорму("ОбщаяФорма.ФормаСообщениеБРД", ПараметрыСообщения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПослеПроверкиИзменения(ТребуетсяИзменениеФормы, Контекст) Экспорт
	
	Если Не ТребуетсяИзменениеФормы Тогда
		УправлениеФормой();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	ТребуетсяУказатьВариантОбработки =
		(Объект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.НеопознанныйДокумент);
	
	Элементы.ВариантОбработки.Видимость = ТребуетсяУказатьВариантОбработки;
	Элементы.Направление.Видимость = Не ТребуетсяУказатьВариантОбработки;
	
КонецПроцедуры

////////////////////////////////////////

&НаКлиенте
Процедура Подключаемый_СозданиеТипового(ПараметрыОперации) Экспорт
	
	ОчиститьСообщения();
	Результат = СозданиеТипового(ПараметрыОперации);
	СозданныйДокумент = Результат.СоздаваемыйДокумент;
	
	Если СозданныйДокумент <> Неопределено Тогда
		ОповеститьОбИзменении(Объект.Ссылка);
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(СозданныйДокумент);
		ПоказатьОповещениеПользователя(НСтр("ru = 'Создан документ'"), НавигационнаяСсылка, Строка(СозданныйДокумент));
		Оповестить("РаспознанныйДокумент_СтатусОбработан", , СозданныйДокумент);
		
		Если Результат.УдалосьПровести Тогда
			СледующийДокумент();
		Иначе
			ПоказатьЗначение(, СозданныйДокумент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СозданиеТипового(ПараметрыОперации)
	
	ПараметрыЗаполнения = ПолучитьПараметрыОткрытияФормы(ПараметрыОперации.ВидОперации, ПараметрыОперации.ТипДокумента);
	Возврат СоздатьДокумент(ПараметрыОперации.ТипДокумента, ПараметрыЗаполнения);
	
КонецФункции

//////////////////////////////////////////////

&НаКлиенте
Процедура ЗагрузитьСвойстваЯчеекТаблицы() Экспорт
	
	СвойстваЯчеекТаблицы = ПолучитьИзВременногоХранилища(АдресСвойствЯчеекТаблицы);
	
	ТолькоПросмотр = Ложь;
	Элементы.СтраницыЗагрузки.ТекущаяСтраница = Элементы.ГруппаТипИНаправлениеДокумента;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСозданиеКомплекта() Экспорт
	
	Если ЧастьКомплекта Тогда
		Возврат;
	КонецЕсли;
	ДанныеКомплекта.ДанныеОбработки = РаспознаваниеДокументовКомплектыКлиентСервер.НовыеДанныеОбработкиКомплектов();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолученВариантСозданияКомплекта", ЭтотОбъект);
	ПараметрыФормы = Новый Структура("ПараметрыСоздания", ДанныеКомплекта);
	ОткрытьФорму("Обработка.РаспознаваниеДокументов.Форма.СозданиеКомплекта",
		ПараметрыФормы, ЭтотОбъект,,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученВариантСозданияКомплекта(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Записать();
		Подключаемый_ПослеЗаписи();
	КонецЕсли;
	
	РаспознаваниеДокументовКомплектыКлиентСервер.ОбработатьДокументыКомплекта(ЭтотОбъект, Результат);
	Если Результат.Свойство("УдалосьОбработать") И Результат.УдалосьОбработать Тогда
		СледующийДокумент();
	ИначеЕсли Результат.ДанныеОбработки <> Неопределено И Результат.ДанныеОбработки.КомплектовНеУдалосьОбработать <> 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Не удалось обработать комплект. Повторите операцию после исправления ошибок:'");
		ПараметрыФормы = Новый Структура(
			"ОшибкиПроведения, ТекстПредупреждения, ОткрытыйДокумент",
			Результат.ДанныеОбработки.ОшибкиПроведения,
			ТекстПредупреждения,
			Объект.Ссылка
		);
		ОткрытьФорму("Обработка.РаспознаваниеДокументов.Форма.ОтчетПоОшибкам",
			ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НаправлениеПриИзмененииНаСервере()
	
	Если Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий 
		И ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСПоставщиками") Тогда
		Элементы.ГруппаДоговор.Видимость = Истина;
	ИначеЕсли Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий
		И ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами") Тогда
		Элементы.ГруппаДоговор.Видимость = Истина;
	КонецЕсли;
	
	Если Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий 
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам") Тогда
		Элементы.ГруппаКнопкиСчетНаОплату.Видимость = Ложь;
	ИначеЕсли Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов") Тогда
		Элементы.ГруппаКнопкиСчетНаОплату.Видимость = Ложь;   
	Иначе
		Элементы.ГруппаКнопкиСчетНаОплату.Видимость = Истина;
	КонецЕсли;
	
	Если Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий 
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах") Тогда    
			Элементы.ГруппаСкидка.Видимость = Ложь;  
			Элементы.ПроцентСкидки.Видимость = Ложь;  
			Элементы.СуммаСкидки.Видимость = Ложь;  
			Элементы.ГруппаИтогСуммаСкидки.Видимость = Ложь;
	ИначеЕсли Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий 
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВЗакупках") Тогда
			Элементы.ГруппаСкидка.Видимость = Ложь;  
			Элементы.ПроцентСкидки.Видимость = Ложь;  
			Элементы.СуммаСкидки.Видимость = Ложь;  
			Элементы.ГруппаИтогСуммаСкидки.Видимость = Ложь;   
		Иначе
			Элементы.ГруппаСкидка.Видимость = Истина;  
			Элементы.ПроцентСкидки.Видимость = Истина;  
			Элементы.СуммаСкидки.Видимость = Истина;  
			Элементы.ГруппаИтогСуммаСкидки.Видимость = Истина;  
	КонецЕсли;
		
	Поставщик = (Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий);
	Клиент = (Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий);	
	
	Если Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий Тогда;		
		Операция = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;   
		Элементы.ГруппаОтправитель.Заголовок = НСтр("ru = 'Отправитель'"); 
	Иначе  
		Операция = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика; 
		Элементы.ГруппаОтправитель.Заголовок = НСтр("ru = 'Получатель'");  		
		//Проверка на использование статьи
		Для Каждого ТекущаяСтрока Из ТаблицаДокумента Цикл
			Если ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар") Или
				ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара") Или
				ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Набор") Тогда
					
				ТекущаяСтрока.СписатьНаРасходы = Ложь;
				
			ИначеЕсли ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга") Тогда
				ТекущаяСтрока.СписатьНаРасходы = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	ИзменитьИсточникиДляВыбораПартнера();
	//Необходимо изменить подсказку создания партнера
	Если Элементы.ГруппаПартнер.Видимость Тогда
		Если Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий Тогда
			РаспознанныйТекст = Объект.РеквизитыДокумента[3].РаспознанныйТекст;
		Иначе
		    РаспознанныйТекст = Объект.РеквизитыДокумента[2].РаспознанныйТекст;
		КонецЕсли;
		СписокДляВыбора = РаспознаваниеДокументовСлужебныйКлиентСервер.ПолучитьСписокДляВыбораПользователем(РаспознанныйТекст);
		Элементы.Партнер.СписокВыбора.Очистить();
		Для Каждого ДанныеВыбора Из СписокДляВыбора Цикл
			Элементы.Партнер.СписокВыбора.Добавить(ДанныеВыбора.Значение, ДанныеВыбора.Представление, , ДанныеВыбора.Картинка);
		КонецЦикла;
		
		Если Не УправлениеДоступом.ИзменениеРазрешено(Объект.РеквизитыДокумента[28].Значение) Тогда
			Элементы.Партнер.СписокВыбора.Удалить(0);
		КонецЕсли;
	КонецЕсли;
	
	ИзменитьИсточникиДляВыбораСоглашения();
	ИзменитьИсточникиДляВыбораДоговора();  
	УстановитьПараметрыВыбораПартнера();
	СохранитьИтоговыеЗначения(); 	
	СохранитьЗначенияИзТаблицыДокумента();   
	ИзменитьИсточникиДляВыбораБанковскихСчетов();
	ОбновитьСписокВыбораБанковскихСчетов();
	//ЗаполнитьУстановитьВидимостьСерийДоступностьПерезаполнитьПоОтгрузке();
	РаспознаваниеДокументовСлужебный.ПересчитатьПроблемныеЭлементы(ЭтотОбъект);
	НайтиИЗаполнитьСозданныеДокументы();
	УправлениеФормой();

КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьПоФункциональнымОпциям()
	
	Если Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий 
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСПоставщиками") Тогда
		Элементы.ГруппаДоговор.Видимость = Ложь;
	ИначеЕсли Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами") Тогда
		Элементы.ГруппаДоговор.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий 
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам") Тогда
		Элементы.ГруппаКнопкиСчетНаОплату.Видимость = Ложь;
	ИначеЕсли Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов") Тогда
		Элементы.ГруппаКнопкиСчетНаОплату.Видимость = Ложь;   
	Иначе
		Элементы.ГруппаКнопкиСчетНаОплату.Видимость = Истина;
	КонецЕсли;

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов") Тогда ; 
		СкладПоУмолчанию = РаспознаваниеДокументовПереопределяемый.ПолучитьПервыйСкладПоУмолчанию();
			Если ЗначениеЗаполнено(СкладПоУмолчанию) Тогда
				Объект.РеквизитыДокумента[7].Значение = СкладПоУмолчанию;
			КонецЕсли;
		Элементы.ГруппаСклад.Видимость = Ложь;
		Элементы.ТСклад.Видимость = Ложь;
	КонецЕсли;

	Если (Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий 
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах")) Или     
		(Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий 
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВЗакупках")) Тогда
			Элементы.ГруппаСкидка.Видимость = Ложь;  
			Элементы.ПроцентСкидки.Видимость = Ложь;  
			Элементы.СуммаСкидки.Видимость = Ложь;  
			Элементы.ГруппаИтогСуммаСкидки.Видимость = Ложь;
	КонецЕсли;	
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов") Тогда
		Элементы.ГруппаПартнер.Видимость = Ложь;
	КонецЕсли;

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		Элементы.Характеристика.Видимость = Ложь;
	КонецЕсли; 
		
	Если  Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов") Тогда
		Элементы.ГруппаСписаниеНаРасходы.Видимость = Ложь;
	КонецЕсли;

	Если Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий 
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСПоставщиками") Тогда
		Элементы.ГруппаСоглашениеСПоставщиком.Видимость = Ложь;
	ИначеЕсли Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами") Тогда
		Элементы.ГруппаСоглашениеСКлиентом.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СледующийДокумент()
	
	Результат = НайтиДокумент(Истина);
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Результат = НайтиДокумент(Ложь);
	КонецЕсли;
	
	ПерейтиНаДокумент(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаДокумент(Результат)
	
	Если ЗначениеЗаполнено(Результат) Тогда
		ИмяФормыОбработчика = РаспознаваниеДокументовСлужебныйКлиентПовтИсп
			.ПолучитьИмяОткрываемойФормыПоТипу(Результат.ТипДокумента, Результат.ВариантОбработки);
		Если Не ПустаяСтрока(ИмяФормыОбработчика) Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Ключ", Результат.Ссылка);
			ПараметрыФормы.Вставить("ОтборИзСписка", Параметры.ОтборИзСписка);
			ОткрытьФорму(ИмяФормыОбработчика, ПараметрыФормы);
		КонецЕсли;
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Функция НайтиДокумент(Следующий)
	
	ОтборДата = Ложь;
	ОтборОрганизация = Ложь;
	ОтборКонтрагент = Ложь;
	
	Если ЗначениеЗаполнено(Параметры.ОтборИзСписка) Тогда 
		
		Если ЗначениеЗаполнено(Параметры.ОтборИзСписка.ТекущаяДата) Тогда 
			
			ОтборДата = Истина;
			
			Если Параметры.ОтборИзСписка.ТекущаяДатаПериод = "День" Тогда
				НачалоПериода = НачалоДня(Параметры.ОтборИзСписка.ТекущаяДата);
				КонецПериода = КонецДня(Параметры.ОтборИзСписка.ТекущаяДата);
			ИначеЕсли Параметры.ОтборИзСписка.ТекущаяДатаПериод = "Месяц" Тогда
				НачалоПериода = НачалоМесяца(Параметры.ОтборИзСписка.ТекущаяДата);
				КонецПериода = КонецМесяца(Параметры.ОтборИзСписка.ТекущаяДата);
			КонецЕсли;
			
		КонецЕсли;
		
		ОтборОрганизация = ЗначениеЗаполнено(Параметры.ОтборИзСписка.ТекущаяОрганизация);
		ОтборКонтрагент = ЗначениеЗаполнено(Параметры.ОтборИзСписка.ТекущийКонтрагент);
		
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	РаспознанныйДокумент.Ссылка КАК Ссылка,
		|	РаспознанныйДокумент.ТипДокумента КАК ТипДокумента,
		|	РаспознанныйДокумент.ВариантОбработки КАК ВариантОбработки
		|ИЗ
		|	Документ.РаспознанныйДокумент КАК РаспознанныйДокумент
		|ГДЕ
		|	(РаспознанныйДокумент.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСозданныхДокументовРаспознаваниеДокументов.Новый)
		|			ИЛИ РаспознанныйДокумент.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСозданныхДокументовРаспознаваниеДокументов.Изменен))
		|	И НЕ РаспознанныйДокумент.ПометкаУдаления
		|	И РаспознанныйДокумент.Дата < &Дата
		|	И РаспознанныйДокумент.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И РаспознанныйДокумент.Контрагент = &Контрагент
		|	И РаспознанныйДокумент.Организация = &Организация
		|
		|УПОРЯДОЧИТЬ ПО
		|	РаспознанныйДокумент.Дата УБЫВ";
	
	Если Следующий Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " УБЫВ", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "<", ">=");
	КонецЕсли;
	
	Если ОтборДата Тогда
		Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
		Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И РаспознанныйДокумент.Дата МЕЖДУ &НачалоПериода И &КонецПериода", "");
	КонецЕсли;
	
	Если ОтборОрганизация Тогда
		Запрос.УстановитьПараметр("Организация", Параметры.ОтборИзСписка.ТекущаяОрганизация);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И РаспознанныйДокумент.Организация = &Организация", "");
	КонецЕсли;
	
	Если ОтборКонтрагент Тогда
		Запрос.УстановитьПараметр("Контрагент", Параметры.ОтборИзСписка.ТекущийКонтрагент);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И РаспознанныйДокумент.Контрагент = &Контрагент", "");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Новый Структура("Ссылка, ТипДокумента, ВариантОбработки");
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
		Возврат Результат;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПриблизитьПоКоординатам(Координаты, СтрокВИзображении)
	
	Если HTMLДокументСформирован Тогда
		Если РаспознаваниеДокументовКлиентСервер.ВсеКоординатыНулевые(Координаты) Тогда
			Элементы.ПолеПросмотра.Документ.defaultView.clean_bbox();
		Иначе
			Элементы.ПолеПросмотра.Документ.defaultView.zoom_to_bbox(Координаты[0], Координаты[1], Координаты[2], Координаты[3], СтрокВИзображении);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьИзображенияРеквизитов(Настройки, Родитель = Неопределено, ГруппаРеквизита = Неопределено)
	
	Если Родитель = Неопределено Тогда
		Родитель = Элементы.ГруппаРеквизиты;
	КонецЕсли;
	
	СоответствиеПолейИГрупп = Новый Соответствие;
	
	Для Каждого Поле Из Родитель.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Поле) = Тип("ГруппаФормы") Тогда
			ДобавитьИзображенияРеквизитов(Поле, ГруппаРеквизита);
			Продолжить;
		ИначеЕсли НЕ ТипЗнч(Поле) = Тип("ПолеФормы") Тогда
			Продолжить;
		КонецЕсли;
		
		ГруппаРеквизита = Элементы.Добавить("Группа" + Поле.Имя, Тип("ГруппаФормы"), Поле.Родитель);
		ГруппаРеквизита.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаРеквизита.ОтображатьЗаголовок = Ложь;
		СоответствиеПолейИГрупп.Вставить(Поле, ГруппаРеквизита);
		
	КонецЦикла;
	
	Для Каждого ДанныеСоответствия Из СоответствиеПолейИГрупп Цикл
		Элементы.Переместить(ДанныеСоответствия.Ключ, ДанныеСоответствия.Значение);
		ОтобразитьСвязаннуюКартинку(ДанныеСоответствия);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьСвязаннуюКартинку(ДанныеСоответствия)
	
	Путь = ДанныеСоответствия.Ключ.ПутьКДанным;
	НачалоИдентификатора = СтрНайти(Путь, "[") ;
	Если НЕ НачалоИдентификатора Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторРеквизита = Сред(Путь, НачалоИдентификатора + 1, СтрНайти(Путь, "]") - НачалоИдентификатора + 1);
	ОписаниеЧисла = Новый ОписаниеТипов("Число");
	ИдентификаторРеквизита = ОписаниеЧисла.ПривестиЗначение(ИдентификаторРеквизита);
	
	ПолеКартинки = Элементы.Добавить("КартинкаРеквизита" + ИдентификаторРеквизита, Тип("ПолеФормы"), ДанныеСоответствия.Значение);
	ПолеКартинки.Вид = ВидПоляФормы.ПолеКартинки;
	ПолеКартинки.Высота = Объект.РеквизитыДокумента[ИдентификаторРеквизита].СтрокВИзображении;
	ПолеКартинки.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеКартинки.РазмерКартинки = РазмерКартинки.Пропорционально;
	ПолеКартинки.РастягиватьПоВертикали = Ложь;
	ПолеКартинки.АвтоМаксимальнаяВысота = Ложь;
	ПолеКартинки.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Центр;
	ПолеКартинки.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
	ПолеКартинки.ПутьКДанным = "Объект.РеквизитыДокумента[" + ИдентификаторРеквизита + "].АдресКартинки";
	
КонецПроцедуры

&НаСервере
Процедура НастроитьКолонкиТаблицы()
	
	ДобавляемыеРеквизиты = Новый Массив;
	НастроитьКолонкиРекурсивно(ДобавляемыеРеквизиты, Элементы.ТаблицаДокумента);
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	СоздатьЭлементыДобавленныхРеквизитов(ДобавляемыеРеквизиты, Элементы.ТаблицаДокумента);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьКолонкиРекурсивно(ДобавляемыеРеквизиты, ЭлементыОбхода)
	
	Для Каждого ЭлементКолонка Из ЭлементыОбхода.ПодчиненныеЭлементы Цикл
		Если ЭлементКолонка.Вид = ВидГруппыФормы.ГруппаКолонок Тогда
			НастроитьКолонкиРекурсивно(ДобавляемыеРеквизиты, ЭлементКолонка);
		ИначеЕсли ЭлементКолонка.Вид = ВидПоляФормы.ПолеВвода Тогда
			ЭлементКолонка.ВыбиратьТип = Ложь;
			ЭлементКолонка.БыстрыйВыбор = Ложь;
			ЭлементКолонка.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
			ЭлементКолонка.УстановитьДействие("ОбработкаВыбора", "Подключаемый_ОбработкаВыбораПоля");
			ЭлементКолонка.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииКолонки");
			
			Если ЭлементКолонка.Имя <> "ТаблицаДокументаПорядокСтроки"
				И Не СтрЗаканчиваетсяНа(ЭлементКолонка.Имя, "ТекстОшибки")
				И Не СтрЗаканчиваетсяНа(ЭлементКолонка.Имя, "ЗаполненоВручную")
				И Не СтрЗаканчиваетсяНа(ЭлементКолонка.Имя, "ЭлементСоздан") Тогда
				
				НовыйРеквизит = Новый РеквизитФормы(ЭлементКолонка.Имя + "ТекстОшибки", Новый ОписаниеТипов("Строка"));
				НовыйРеквизит.Путь = "ТаблицаДокумента";
				ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
				
				НовыйРеквизит = Новый РеквизитФормы(ЭлементКолонка.Имя + "ЗаполненоВручную", Новый ОписаниеТипов("Булево"));
				НовыйРеквизит.Путь = "ТаблицаДокумента";
				ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
				
				НовыйРеквизит = Новый РеквизитФормы(ЭлементКолонка.Имя + "ЭлементСоздан", Новый ОписаниеТипов("Булево"));
				НовыйРеквизит.Путь = "ТаблицаДокумента";
				ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементыДобавленныхРеквизитов(ДобавляемыеРеквизиты, ЭлементРодитель)
	
	Для Каждого Реквизит Из ДобавляемыеРеквизиты Цикл 
		НовыйЭлемент = Элементы.Добавить(Реквизит.Имя, Тип("ПолеФормы"), ЭлементРодитель);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным = "ТаблицаДокумента." + Реквизит.Имя;
		НовыйЭлемент.Видимость = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуДокумента()
	
	ТаблицаДокументаТЗ = РаспознаваниеДокументовСлужебный.ЗаполненнаяТаблицаДокумента(Объект);
	ТаблицаДокумента.Загрузить(ТаблицаДокументаТЗ);
	Если Объект.РеквизитыТабличныхЧастей.Количество() = 0 Тогда
		// РеквизитыТабличныхЧастей.Количество() = 0 - значит таблицы никогда не было, в ней нет колонок и
		// РаспознаваниеДокументовСлужебный.ЗаполненнаяТаблицаДокумента не сможет создать колонки
		НоваяСтрока = ТаблицаДокумента.Добавить();
		НоваяСтрока.ПорядокСтроки = 1;
		
		РаспознаваниеДокументовСлужебный.СохранитьТаблицуДокумента(Объект, ТаблицаДокумента.Выгрузить());
		ТаблицаДокумента.Загрузить(РаспознаваниеДокументовСлужебный.ЗаполненнаяТаблицаДокумента(Объект));
	КонецЕсли;
	
	Если ТаблицаДокумента.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Объект.РеквизитыТабличныхЧастей.Сортировать("НомерСтрокиТЧ");
	ИзменяемаяСтрока = ТаблицаДокумента[0];
	
	Для Каждого Запись Из Объект.РеквизитыТабличныхЧастей Цикл
		Если Запись.СтрокаУдалена Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИзменяемаяСтрока.НомерСтроки <> Запись.НомерСтрокиТЧ Тогда
			Отбор = Новый Структура("НомерСтроки", Запись.НомерСтрокиТЧ);
			ИзменяемыеСтроки = ТаблицаДокумента.НайтиСтроки(Отбор);
			ИзменяемаяСтрока = ИзменяемыеСтроки[0];
		КонецЕсли;
		
		Если ИзменяемаяСтрока.Свойство(Запись.ИмяРеквизита + "ЗаполненоВручную") Тогда
			ИзменяемаяСтрока[Запись.ИмяРеквизита + "ЗаполненоВручную"] = Запись.ЗаполненоВручную;
		КонецЕсли;
		Если ИзменяемаяСтрока.Свойство(Запись.ИмяРеквизита + "ЭлементСоздан") Тогда
			ИзменяемаяСтрока[Запись.ИмяРеквизита + "ЭлементСоздан"] = Запись.ЭлементСоздан;
		КонецЕсли;
		
		Если Запись.ИмяРеквизита = "Номенклатура" Тогда
			НомерСтрокиТаблицы = Запись.НомерСтрокиТЧ;
			ВыбранноеЗначение = ИзменяемаяСтрока[Запись.ИмяРеквизита];
			
			РаспознаваниеДокументовПереопределяемый.ПриИзмененииКолонкиНаСервере(
				Объект,
				ИзменяемаяСтрока,
				Запись.ИмяРеквизита,
				НомерСтрокиТаблицы,
				ВыбранноеЗначение);
			
			Элемент = УсловноеОформление.Элементы.Добавить();
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Номенклатура");
			
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДокумента.НомерСтроки");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = ИзменяемаяСтрока.НомерСтроки;
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДокумента.Номенклатура");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
			
			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(255, 0, 0));
			Элемент.Оформление.УстановитьЗначениеПараметра("Текст", СтрШаблон(НСтр("ru = 'Не сопоставлена: %1'"), Запись.РаспознанныйТекст));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыПоРеквизитам()
	
	ДанныеДляВыбораРеквизитов = РаспознаваниеДокументовСлужебный.ПолучитьДанныеДляСпискаВыбора(Объект.Ссылка);
	АдресЗначенияВыбораДляШапки = ПоместитьВоВременноеХранилище(ДанныеДляВыбораРеквизитов, УникальныйИдентификатор);
	
	Для Каждого РеквизитШапки Из Объект.РеквизитыДокумента Цикл
		
		Если РеквизитШапки.ИмяРеквизита = "ИтогоСуммаСкидки"
			Или РеквизитШапки.ИмяРеквизита = "ИтогоСумма"
			Или РеквизитШапки.ИмяРеквизита = "ИтогоСуммаНДС"
			Или РеквизитШапки.ИмяРеквизита = "ИтогоВсего" Тогда
			
			ИзменяемыйЭлемент = Элементы[РеквизитШапки.ИмяРеквизита + "Белый"];
			НастроитьСвойстваЭлементаРеквизита(ИзменяемыйЭлемент);
			НастроитьИзменяемыйЭлемент(РеквизитШапки, ИзменяемыйЭлемент, ДанныеДляВыбораРеквизитов);
			
			ИзменяемыйЭлемент = Элементы[РеквизитШапки.ИмяРеквизита + "Красный"];
			НастроитьСвойстваЭлементаРеквизита(ИзменяемыйЭлемент);
			НастроитьИзменяемыйЭлемент(РеквизитШапки, ИзменяемыйЭлемент, ДанныеДляВыбораРеквизитов);
			
		ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элементы, РеквизитШапки.ИмяРеквизита)
			И РеквизитШапки.ИмяРеквизита <> "ВидСкидки" Тогда 
			
			ИзменяемыйЭлемент = Элементы[РеквизитШапки.ИмяРеквизита];
			НастроитьСвойстваЭлементаРеквизита(ИзменяемыйЭлемент);
			НастроитьИзменяемыйЭлемент(РеквизитШапки, ИзменяемыйЭлемент, ДанныеДляВыбораРеквизитов);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьИзменяемыйЭлемент(РеквизитШапки, ИзменяемыйЭлемент, ДанныеДляВыбораРеквизитов)
	
	ИзменяемыйЭлемент.Подсказка = Неопределено;
	РаспознанныйТекст = РеквизитШапки.РаспознанныйТекст;
	
	Если РеквизитШапки.ИмяРеквизита = "СуммаВключаетНДС" Тогда
		Возврат;
	КонецЕсли;
	
	Если РеквизитШапки.ИмяРеквизита = "Партнер" Тогда
		Если Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий Тогда
			РаспознанныйТекст = Объект.РеквизитыДокумента[3].РаспознанныйТекст;
		Иначе
			РаспознанныйТекст = Объект.РеквизитыДокумента[2].РаспознанныйТекст;
		КонецЕсли;
	КонецЕсли;

	Если РеквизитШапки.ИмяРеквизита = "СоглашениеСКлиентом" Тогда
		Если Не ПравоДоступа("Добавление", Метаданные.Справочники.СоглашенияСКлиентами) Тогда
			ИзменяемыйЭлемент.КнопкаСоздания = Ложь;
		КонецЕсли;
	КонецЕсли;  
	Если РеквизитШапки.ИмяРеквизита = "СоглашениеСПоставщиком" Тогда
		Если Не ПравоДоступа("Добавление", Метаданные.Справочники.СоглашенияСПоставщиками) Тогда
			ИзменяемыйЭлемент.КнопкаСоздания = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ЭтоПримитивныйТип = РаспознаваниеДокументовКлиентСервер.ЭтоПримитивныйТип(ТипЗнч(РеквизитШапки.Значение));
	Если НЕ РеквизитШапки.ИмяРеквизита = "Склад" И НЕ РеквизитШапки.ИмяРеквизита = "Договор" 
		И НЕ (РеквизитШапки.ИмяРеквизита = "СоглашениеСКлиентом" Или РеквизитШапки.ИмяРеквизита = "СоглашениеСПоставщиком") Тогда	
		Отбор = Новый Структура("ИмяРеквизита", РеквизитШапки.ИмяРеквизита);
		ПодходящиеЗначения = ДанныеДляВыбораРеквизитов.НайтиСтроки(Отбор);
		
		Если РеквизитШапки.ИмяРеквизита = "ПродавецОрганизация"
			Или РеквизитШапки.ИмяРеквизита = "ПокупательОрганизация"
			Или РеквизитШапки.ИмяРеквизита = "Исполнитель"
			Или ЭтоПримитивныйТип Тогда
			
			КартинкаСоздание = 2;
		Иначе
			КартинкаСоздание = 1;
		КонецЕсли;
		
		Если РеквизитШапки.ИмяРеквизита = "БанковскийСчетОрганизации" Тогда
			// Нечеткий поиск не отбирает банковские счета по владельцу, поэтому ПодходящиеЗначения
			// у БанковскийСчетОрганизации и БанковскийСчетКонтрагента одинаковые. Он будет храниться в ОбъединенныеСпискиВыбора
			Если ОбъединенныеСпискиВыбора = Неопределено Тогда
				ОбъединенныеСпискиВыбора = Новый Структура;
			КонецЕсли;
			
			// Преобразуем ПодходящиеЗначения в массив структур, чтобы была возможность сериализации
			МассивПодходящих = Новый Массив;
			Для Каждого ЭлементМассива Из ПодходящиеЗначения Цикл
				МассивПодходящих.Добавить(Новый Структура("Значение, Уверенность", ЭлементМассива.Значение, ЭлементМассива.Уверенность));
			КонецЦикла;
			
			ДанныеСписка = Новый Структура("РаспознанныйТекст, ПодходящиеЗначения, КартинкаСоздание", РаспознанныйТекст, МассивПодходящих, КартинкаСоздание);
			ОбъединенныеСпискиВыбора.Вставить(РеквизитШапки.ИмяРеквизита, ДанныеСписка);
		КонецЕсли;
		
		СписокДляВыбора = РаспознаваниеДокументовСлужебныйКлиентСервер.ПолучитьСписокДляВыбораПользователем(РаспознанныйТекст, ПодходящиеЗначения, КартинкаСоздание);
		ИзменяемыйЭлемент.СписокВыбора.Очистить();
		Для Каждого ДанныеВыбора Из СписокДляВыбора Цикл
			Если ТипЗнч(ДанныеВыбора.Значение) = Тип("Структура") Тогда
				ИзменяемыйЭлемент.СписокВыбора.Добавить(ДанныеВыбора.Значение.Значение, ДанныеВыбора.Представление, , ДанныеВыбора.Картинка);
			Иначе
				Если ЭтоПримитивныйТип Тогда
					ИзменяемыйЭлемент.СписокВыбора.Добавить(ДанныеВыбора.Значение, ДанныеВыбора.Представление);
				Иначе
					ИзменяемыйЭлемент.СписокВыбора.Добавить(ДанныеВыбора.Значение, ДанныеВыбора.Представление, , ДанныеВыбора.Картинка);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		//Убираем доступность создания если нет прав
		Если РеквизитШапки.ИмяРеквизита = "Партнер" Тогда
			Если Не ПравоДоступа("Добавление", Метаданные.Справочники.Партнеры) Тогда
				ИзменяемыйЭлемент.СписокВыбора.Удалить(0);
			КонецЕсли;
		КонецЕсли;	
		Если РеквизитШапки.ИмяРеквизита = "Продавец" Или РеквизитШапки.ИмяРеквизита = "Покупатель" Тогда
			Если Не ПравоДоступа("Добавление", Метаданные.Справочники.Контрагенты) Тогда
				ИзменяемыйЭлемент.СписокВыбора.Удалить(0);
			КонецЕсли;
		КонецЕсли; 
		Если РеквизитШапки.ИмяРеквизита = "БанковскийСчетОрганизации" Тогда
			Если Не ПравоДоступа("Добавление", Метаданные.Справочники.БанковскиеСчетаОрганизаций) Тогда
				ИзменяемыйЭлемент.СписокВыбора.Удалить(0);
			КонецЕсли;
		КонецЕсли;   
		Если РеквизитШапки.ИмяРеквизита = "БанковскийСчетКонтрагента" Тогда
			Если Не ПравоДоступа("Добавление", Метаданные.Справочники.БанковскиеСчетаКонтрагентов) Тогда
				ИзменяемыйЭлемент.СписокВыбора.Удалить(0);
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РеквизитШапки.Значение) И РеквизитШапки.ИмяРеквизита <> "СрокОплаты" И РеквизитШапки.ИмяРеквизита <> "ИтогоСуммаСкидки"
		И РеквизитШапки.ИмяРеквизита <> "ИтогоСумма" И РеквизитШапки.ИмяРеквизита <> "ИтогоСуммаНДС" И РеквизитШапки.ИмяРеквизита <> "ИтогоВсего"
		И Элементы[РеквизитШапки.ИмяРеквизита].Родитель.Видимость  И РеквизитШапки.ИмяРеквизита <> "Склад" 
			И РеквизитШапки.ИмяРеквизита  <> "СоглашениеСКлиентом" И РеквизитШапки.ИмяРеквизита  <> "СоглашениеСПоставщиком" Тогда
		
		Если РеквизитШапки.ИмяРеквизита = "ПродавецОрганизация"
			Или РеквизитШапки.ИмяРеквизита = "ПокупательОрганизация" Тогда
			ИзменяемыйЭлемент.ПодсказкаВвода = СтрШаблон(НСтр("ru = 'Не сопоставлена: %1'"), РаспознанныйТекст);
		 Иначе
			ИзменяемыйЭлемент.ПодсказкаВвода = СтрШаблон(НСтр("ru = 'Не сопоставлен: %1'"), РаспознанныйТекст); 
		КонецЕсли;

	КонецЕсли;
	
	Если РеквизитШапки.ИмяРеквизита = "Склад" Тогда
			СкладПоУмолчанию = РаспознаваниеДокументовПереопределяемый.ПолучитьСкладПоУмолчанию();
			Если ЗначениеЗаполнено(СкладПоУмолчанию) Тогда
				РеквизитШапки.Значение = СкладПоУмолчанию;
			КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура НастроитьСвойстваЭлементаРеквизита(ИзменяемыйЭлемент, РазрешитьБыстрыйВыбор = Ложь)
	
	ИзменяемыйЭлемент.БыстрыйВыбор = РазрешитьБыстрыйВыбор;
	ИзменяемыйЭлемент.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	ИзменяемыйЭлемент.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
	ИзменяемыйЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииПоля");
	ИзменяемыйЭлемент.УстановитьДействие("АвтоПодбор", "Подключаемый_АвтоПодборПоля");
	ИзменяемыйЭлемент.УстановитьДействие("ОбработкаВыбора", "Подключаемый_ОбработкаВыбораПоля");
	Если РазрешитьБыстрыйВыбор Тогда
		ИзменяемыйЭлемент.УстановитьДействие("НачалоВыбора", "Подключаемый_НачалоВыбораПоля");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОтображениеПоТипуДокумента()
	
	Элементы.Продавец.Видимость = (Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий);
	Элементы.Покупатель.Видимость = (Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий);
	
	Элементы.ПродавецОрганизация.Видимость = (Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий);
	Элементы.ПокупательОрганизация.Видимость = (Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий);
	Элементы.БанковскийСчетКонтрагента.Видимость = (Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий);
	Элементы.БанковскийСчетОрганизации.Видимость = (Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий);
	
	Элементы.СоглашениеСКлиентом.Видимость = (Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий)
		И ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	Элементы.СоглашениеСКлиентом.АвтоОтметкаНезаполненного = (Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий);
	
	Элементы.СоглашениеСПоставщиком.Видимость = (Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий)
		И ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСПоставщиками");
	Если Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий 
				И ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСПоставщиками") Тогда 
		Если ЗначениеЗаполнено(ИсточникПоляДоговорПартнер) Тогда	
			КоличествоСоглашенийСПоставшиком = ЗакупкиВызовСервера.ПолучитьКоличествоСоглашенийСПоставщиком(ИсточникПоляДоговорПартнер);
			Элементы.СоглашениеСПоставщиком.Видимость = КоличествоСоглашенийСПоставшиком > 0;
		Иначе
			Элементы.СоглашениеСПоставщиком.Видимость = Ложь;
		КонецЕсли;		
	КонецЕсли;
	
	Поставщик = (Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий);
	Клиент = (Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий);	

	Если Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий Тогда;
		Операция = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;  
		Элементы.ГруппаПодменюСозданиеДокумента.Видимость = Истина;
		Элементы.СтатьяРасходов.Видимость = Ложь;
		Элементы.СписатьНаРасходы.Видимость = Ложь;
		Элементы.КомандаСоздатьДокумент.Заголовок = НСтр("ru = 'Заказ клиента'"); 
		Если Не ПравоДоступа("Добавление", Метаданные.Документы.ЗаказКлиента) Тогда
			Элементы.ГруппаПодменюСозданиеДокумента.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Операция = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика; 
		Элементы.ГруппаПодменюСозданиеДокумента.Видимость = Истина;
		Элементы.СтатьяРасходов.Видимость = Истина;
		Элементы.СписатьНаРасходы.Видимость = Истина;      
		Элементы.КомандаСоздатьДокумент.Заголовок = НСтр("ru = 'Заказ поставщику'");
		Если Не ПравоДоступа("Добавление", Метаданные.Документы.ЗаказПоставщику) Тогда
			Элементы.ГруппаПодменюСозданиеДокумента.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ИзменитьИсточникиДляВыбораДоговора(ИмяПоля = "")
	
	Договор = РаспознаваниеДокументовСлужебныйКлиентСервер.ЗначениеРеквизитаДокумента(Объект, "Договор",
		Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		
	Если Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий Тогда 
		Соглашение = РаспознаваниеДокументовСлужебныйКлиентСервер.ЗначениеРеквизитаДокумента(Объект, "СоглашениеСКлиентом",
			Справочники.СоглашенияСКлиентами.ПустаяСсылка());
		ИспользуютсяДоговорыКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами");
		ТипДоговора = Перечисления.ТипыДоговоров.СПокупателем;
	Иначе
		Соглашение = РаспознаваниеДокументовСлужебныйКлиентСервер.ЗначениеРеквизитаДокумента(Объект, "СоглашениеСПоставщиком",
			Справочники.СоглашенияСПоставщиками.ПустаяСсылка());
		ИспользуютсяДоговорыКонтрагентов =  ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСПоставщиками");
		ТипДоговора = Перечисления.ТипыДоговоров.СПоставщиком;
	КонецЕсли;

	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, "Контрагент, Организация, Партнер, ТипДоговора");
	
	ЗаполнитьИсточникиДляВыбораДоговора();
		
	ИспользоватьПартнеровКакКонтрагентов = Элементы.ГруппаПартнер.Видимость;
	
	ЗаполненыВлияющиеПоля = 
		ЗначениеЗаполнено(ИсточникПоляДоговорПартнер)
		И (ЗначениеЗаполнено(ИсточникПоляДоговорКонтрагент) Или ИспользоватьПартнеровКакКонтрагентов)
		И ЗначениеЗаполнено(ИсточникПоляДоговорОрганизация);
		
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСПоставщиками")  
		Или ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами")  Тогда
				
		Если ЗначениеЗаполнено(Соглашение) Тогда
			ИспользуютсяДоговорыКонтрагентов =
			ИспользуютсяДоговорыКонтрагентов
				И Соглашение.ИспользуютсяДоговорыКонтрагентов;
			Элементы.Договор.АвтоОтметкаНезаполненного = ИспользуютсяДоговорыКонтрагентов;	
		КонецЕсли;
	КонецЕсли;
						
	Элементы.Договор.Доступность = ЗаполненыВлияющиеПоля И ИспользуютсяДоговорыКонтрагентов;
	
	Элементы.Договор.Видимость = ИспользуютсяДоговорыКонтрагентов;
	
	ПерезаполнитьДоговор = 
		    (ЗначениеЗаполнено(ИмяПоля)
		Или Не ЗначениеЗаполнено(Договор)
		Или РеквизитыДоговора.Контрагент  <> ИсточникПоляДоговорКонтрагент
		Или РеквизитыДоговора.ТипДоговора <> ТипДоговора
		Или РеквизитыДоговора.Партнер <> ИсточникПоляДоговорПартнер
		Или РеквизитыДоговора.Организация <> ИсточникПоляДоговорОрганизация);

	Если ПерезаполнитьДоговор Тогда
		РаспознаваниеДокументовСлужебный.ЗаполнитьДоговорКонтрагента(Объект);
	КонецЕсли;
	
	//Отключаем проверку реквизита если не использ.
	Отбор = Новый Структура("ИмяРеквизита", "Договор");
	НайденныеСтроки = Объект.РеквизитыДокумента.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() И Не ИспользуютсяДоговорыКонтрагентов Тогда
		НайденныеСтроки[0].ЗаполненоВручную = Истина;
	ИначеЕсли НайденныеСтроки.Количество() И ИспользуютсяДоговорыКонтрагентов Тогда 
		Если НайденныеСтроки[0].ЗаполненоВручную И Не ЗначениеЗаполнено(НайденныеСтроки[0].Значение) Тогда
			НайденныеСтроки[0].ЗаполненоВручную = Ложь;
		КонецЕсли;
	КонецЕсли;

	ИзменитьОтображениеПоТипуДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИсточникиДляВыбораДоговора()
	
	ПараметрыВыбораДоговора = РаспознаваниеДокументовСлужебный.ПараметрыВыбораДоговора(Объект);
	
	ВидыДоговоров = Новый СписокЗначений;
	ВидыДоговоров.ЗагрузитьЗначения(ПараметрыВыбораДоговора.ВидыДоговоров);
	
	ИсточникПоляДоговорВидДоговора = ВидыДоговоров;
	ИсточникПоляДоговорКонтрагент = ПараметрыВыбораДоговора.Контрагент;
	ИсточникПоляДоговорОрганизация = ПараметрыВыбораДоговора.Организация;
	ИсточникПоляДоговорПартнер = ПараметрыВыбораДоговора.Партнер;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьИсточникиДляВыбораПартнера(ИмяПоля = "")
	
	Партнер = РаспознаваниеДокументовСлужебныйКлиентСервер.ЗначениеРеквизитаДокумента(Объект, "Партнер",
		Справочники.Партнеры.ПустаяСсылка());
		
	ЗаполнитьИсточникиДляВыбораДоговора();	
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов") Тогда
		РеквизитыПартнера = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИсточникПоляДоговорКонтрагент, "Партнер");
	Иначе
		РеквизитыПартнера = Новый Структура("Партнер", ИсточникПоляДоговорПартнер);
	КонецЕсли;
	
	ПерезаполнитьПартнера = 
		    ЗначениеЗаполнено(ИмяПоля)
		Или Не ЗначениеЗаполнено(Партнер)
		Или РеквизитыПартнера.Партнер  <> Партнер;
		
	Если ПерезаполнитьПартнера Тогда
		РаспознаваниеДокументовСлужебный.ЗаполнитьПартнераКонтрагента(Объект);
	КонецЕсли;
		
	ИзменитьОтображениеПоТипуДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьИсточникиДляВыбораСоглашения(ИмяПоля = "")
	
	Если Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий Тогда 
		Соглашение = РаспознаваниеДокументовСлужебныйКлиентСервер.ЗначениеРеквизитаДокумента(Объект, "СоглашениеСКлиентом",
			Справочники.СоглашенияСКлиентами.ПустаяСсылка());
		Отбор = Новый Структура("ИмяРеквизита", "СоглашениеСКлиентом");	
	Иначе
		Соглашение = РаспознаваниеДокументовСлужебныйКлиентСервер.ЗначениеРеквизитаДокумента(Объект, "СоглашениеСПоставщиком",
			Справочники.СоглашенияСПоставщиками.ПустаяСсылка());
		Отбор = Новый Структура("ИмяРеквизита", "СоглашениеСПоставщиком");		
	КонецЕсли;
		
	ЗаполнитьИсточникиДляВыбораДоговора();	
	
	Если УправлениеДоступом.ЧтениеРазрешено(Справочники.СоглашенияСКлиентами.ПустаяСсылка()) Тогда
		РеквизитыСоглашения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Соглашение, "Партнер, Организация");
	КонецЕсли;          
	
	Если УправлениеДоступом.ЧтениеРазрешено(Справочники.СоглашенияСПоставщиками.ПустаяСсылка()) Тогда
		РеквизитыСоглашения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Соглашение, "Партнер, Организация");
	КонецЕсли;
	
	Если (ИмяПоля = "ПродавецОрганизация" Или ИмяПоля = "ПокупательОрганизация") 
		И ЗначениеЗаполнено(РеквизитыСоглашения) Тогда
		Если РеквизитыСоглашения.Организация <> ИсточникПоляДоговорОрганизация Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ПерезаполнитьСоглашение = 
	    ЗначениеЗаполнено(ИмяПоля)
		Или Не ЗначениеЗаполнено(Соглашение);		
	
	Если Элементы.ГруппаПартнер.Видимость = Ложь Тогда
		Элементы.СоглашениеСКлиентом.Доступность = ЗначениеЗаполнено(ИсточникПоляДоговорКонтрагент);
		Элементы.СоглашениеСПоставщиком.Доступность = ЗначениеЗаполнено(ИсточникПоляДоговорКонтрагент);
	Иначе	
		Элементы.СоглашениеСКлиентом.Доступность = ЗначениеЗаполнено(ИсточникПоляДоговорПартнер);
		Элементы.СоглашениеСПоставщиком.Доступность = ЗначениеЗаполнено(ИсточникПоляДоговорПартнер);
	КонецЕсли;
	
	Если ПерезаполнитьСоглашение Тогда
		Если УправлениеДоступом.ЧтениеРазрешено(Справочники.СоглашенияСКлиентами.ПустаяСсылка()) Тогда
			РаспознаваниеДокументовСлужебный.ЗаполнитьСоглашениеКонтрагента(Объект);
		КонецЕсли;
	
		Если УправлениеДоступом.ЧтениеРазрешено(Справочники.СоглашенияСПоставщиками.ПустаяСсылка()) Тогда
			РаспознаваниеДокументовСлужебный.ЗаполнитьСоглашениеКонтрагента(Объект);
		КонецЕсли;
	КонецЕсли;
	
	//Включаем проверку реквизита если не заполнено в результ.
	НайденныеСтроки = Объект.РеквизитыДокумента.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() Тогда
		Если НайденныеСтроки[0].ЗаполненоВручную И Не ЗначениеЗаполнено(НайденныеСтроки[0].Значение) Тогда
			НайденныеСтроки[0].ЗаполненоВручную = Ложь;
		КонецЕсли;
	КонецЕсли;

	ИзменитьОтображениеПоТипуДокумента();
	ИзменитьУсловияЗакупокПродаж(); 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПроверитьПоляСклада() 
	
	Склад = РаспознаваниеДокументовСлужебныйКлиентСервер.ЗначениеРеквизитаДокумента(Объект, "Склад",
			Справочники.Склады.ПустаяСсылка());
			
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(Склад);  
	
	СкладЗаполнен = ЗначениеЗаполнено(Склад); 
		
	Если Не СкладГруппа Тогда
		ТаблицаЗначений = РеквизитФормыВЗначение("ТаблицаДокумента",Тип("ТаблицаЗначений"));
		ТаблицаЗначений.ЗаполнитьЗначения(Склад,"ТСклад");
		ТаблицаДокумента.Очистить();
		ТаблицаДокумента.Загрузить(ТаблицаЗначений);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьУсловияЗакупокПродаж(ИмяПоля = "");  

	Если Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий Тогда 
		Соглашение = РаспознаваниеДокументовСлужебныйКлиентСервер.ЗначениеРеквизитаДокумента(Объект, "СоглашениеСКлиентом",
			Справочники.СоглашенияСКлиентами.ПустаяСсылка());
		ОтборОрганизация = Новый Структура("ИмяРеквизита", "ПродавецОрганизация");	
	Иначе
		Соглашение = РаспознаваниеДокументовСлужебныйКлиентСервер.ЗначениеРеквизитаДокумента(Объект, "СоглашениеСПоставщиком",
			Справочники.СоглашенияСПоставщиками.ПустаяСсылка());
		ОтборОрганизация = Новый Структура("ИмяРеквизита", "ПокупательОрганизация");
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Соглашение) Тогда 
		Если Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий Тогда 
			Условия = ПродажиСервер.ПолучитьУсловияПродаж(Соглашение, Истина, Истина);
		Иначе
			Условия = ЗакупкиСервер.ПолучитьУсловияЗакупок(Соглашение, Истина, Истина);
		КонецЕсли;	
		Если Условия <> Неопределено Тогда     
			ИзмененСклад = ЗначениеЗаполнено(Условия.Склад) И Не Объект.РеквизитыДокумента[7].ЗаполненоВручную;
			Если ИзмененСклад Тогда
				ИсточникСклада = Условия.Склад; 
				Отбор = Новый Структура("ИмяРеквизита", "Склад");
				СтрокиПоиска = Объект.РеквизитыДокумента.НайтиСтроки(Отбор);
				Если СтрокиПоиска.Количество() <> 0 Тогда
					СтрокиПоиска[0].Значение = ИсточникСклада;
				КонецЕсли;
				ЗаполнитьПроверитьПоляСклада() 
			КонецЕсли;
			ИзмененаОрганизация = ЗначениеЗаполнено(Условия.Организация) И Условия.Организация <> ИсточникПоляДоговорОрганизация;
			Если ИзмененаОрганизация Тогда
				Организация = Условия.Организация;   
				СтрокиПоиска = Объект.РеквизитыДокумента.НайтиСтроки(ОтборОрганизация);
				Если СтрокиПоиска.Количество() <> 0 И Не СтрокиПоиска[0].ЗаполненоВручную Тогда
					СтрокиПоиска[0].Значение = Организация;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе 
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СопоставитьПартнераКонтрагентуПослеИзменения()
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов") Тогда
		Возврат;
	КонецЕсли; 
		
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияРаспознанногоДокумента.Исходящий") Тогда
		Отбор = Новый Структура("ИмяРеквизита", "Покупатель");
		НайденныеСтроки = Объект.РеквизитыДокумента.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() <> 0 Тогда
			Контрагент = НайденныеСтроки[0].Значение;
		КонецЕсли;
	Иначе 
		Отбор = Новый Структура("ИмяРеквизита", "Продавец");
		НайденныеСтроки = Объект.РеквизитыДокумента.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() <> 0 Тогда
			Контрагент = НайденныеСтроки[0].Значение;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент) И ТипЗнч(Контрагент) = Тип("СправочникСсылка.Партнеры") Тогда
		Отбор = Новый Структура("ИмяРеквизита", "Партнер");
		НайденныеСтроки = Объект.РеквизитыДокумента.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() <> 0 Тогда
			 НайденныеСтроки[0].Значение = Контрагент;
			 Контрагент = ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию(НайденныеСтроки[0].Значение);  	
		 КонецЕсли;
		 
		 Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияРаспознанногоДокумента.Исходящий") Тогда
			Отбор = Новый Структура("ИмяРеквизита", "Покупатель");
			НайденныеСтроки = Объект.РеквизитыДокумента.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() <> 0 Тогда
				НайденныеСтроки[0].Значение = Контрагент;
			КонецЕсли;
		Иначе 
			Отбор = Новый Структура("ИмяРеквизита", "Продавец");
			НайденныеСтроки = Объект.РеквизитыДокумента.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() <> 0 Тогда
				НайденныеСтроки[0].Значение = Контрагент;
			КонецЕсли;
		КонецЕсли;
  	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура СопоставитьКонтрагентаПартнераПослеИзменения()
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов") Тогда
		Возврат;
	КонецЕсли; 
	
	Отбор = Новый Структура("ИмяРеквизита", "Партнер");
	НайденныеСтроки = Объект.РеквизитыДокумента.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() <> 0 Тогда
		 Контрагент = ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию(НайденныеСтроки[0].Значение);  	
	КонецЕсли;
		 
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияРаспознанногоДокумента.Исходящий") Тогда
		Отбор = Новый Структура("ИмяРеквизита", "Покупатель");
		НайденныеСтроки = Объект.РеквизитыДокумента.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() <> 0 Тогда
			Если НайденныеСтроки[0].ЗаполненоВручную Тогда
				Возврат 
			Иначе
				НайденныеСтроки[0].Значение = Контрагент;
			КонецЕсли;
		Иначе
			НайденныеСтроки[0].Значение = Контрагент;
		КонецЕсли;
	Иначе 
		Отбор = Новый Структура("ИмяРеквизита", "Продавец");
		НайденныеСтроки = Объект.РеквизитыДокумента.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() <> 0 Тогда
			Если НайденныеСтроки[0].ЗаполненоВручную Тогда
				Возврат 
			Иначе
				НайденныеСтроки[0].Значение = Контрагент;
			КонецЕсли;
		Иначе
			НайденныеСтроки[0].Значение = Контрагент;
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокВыбораБанковскихСчетов()
	
	Если ОбъединенныеСпискиВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСписка = ОбъединенныеСпискиВыбора["БанковскийСчетОрганизации"];
	Если ДанныеСписка.ПодходящиеЗначения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияСОтбором = ОставитьПодходящиеСчета(ДанныеСписка.ПодходящиеЗначения, Объект.РеквизитыДокумента[2].Значение, Объект.РеквизитыДокумента[8].Значение);
	
	ИменаЭлементов = Новый Массив;
	ИменаЭлементов.Добавить("БанковскийСчетКонтрагента");
	ИменаЭлементов.Добавить("БанковскийСчетОрганизации");
	
	Для Каждого ИмяЭлемента Из ИменаЭлементов Цикл
		СписокВыбораСчетов = Элементы[ИмяЭлемента].СписокВыбора;
		СписокВыбораСчетов.Очистить();
		
		СписокДляЗагрузки = РаспознаваниеДокументовСлужебныйКлиентСервер.ПолучитьСписокДляВыбораПользователем(ДанныеСписка.РаспознанныйТекст, ЗначенияСОтбором[ИмяЭлемента], ДанныеСписка.КартинкаСоздание);
		Для Каждого ДанныеВыбора Из СписокДляЗагрузки Цикл
			Если ТипЗнч(ДанныеВыбора.Значение) = Тип("Структура") Тогда
				СписокВыбораСчетов.Добавить(ДанныеВыбора.Значение.Значение, ДанныеВыбора.Представление, , ДанныеВыбора.Картинка);
			Иначе
				СписокВыбораСчетов.Добавить(ДанныеВыбора.Значение, ДанныеВыбора.Представление, , ДанныеВыбора.Картинка);
			КонецЕсли;
		КонецЦикла;
		Если ИмяЭлемента = "БанковскийСчетКонтрагента" Тогда
			Если Не УправлениеДоступом.ИзменениеРазрешено(Справочники.БанковскиеСчетаКонтрагентов.ПустаяСсылка()) Тогда
				СписокВыбораСчетов.Удалить(0);
			КонецЕсли;
		КонецЕсли; 
		Если ИмяЭлемента = "БанковскийСчетОрганизации" Тогда
			Если Не УправлениеДоступом.ИзменениеРазрешено(Справочники.БанковскиеСчетаОрганизаций.ПустаяСсылка()) Тогда
				СписокВыбораСчетов.Удалить(0);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОставитьПодходящиеСчета(ПодходящиеЗначения, КонтрагентВладелец, ОрганизацияВладелец)
	
// Отбор по владельцу. Владельцем может быть Контрагент или Организация
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Позиция", Новый ОписаниеТипов("Число"));  
	Если Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий Тогда
		ТЗ.Колонки.Добавить("Значение", Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчетаКонтрагентов"));
	Иначе
		ТЗ.Колонки.Добавить("Значение", Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчетаОрганизаций"));
	КонецЕсли;
	ТЗ.Колонки.Добавить("Уверенность", Новый ОписаниеТипов("Число"));
	
	Ид = 0;
	Для Каждого ЭлементМассива Из ПодходящиеЗначения Цикл
		СтрТЗ = ТЗ.Добавить();
		СтрТЗ.Позиция = Ид;
		СтрТЗ.Значение = ЭлементМассива.Значение;
		СтрТЗ.Уверенность = ЭлементМассива.Уверенность;
		Ид = Ид + 1;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТЗ", ТЗ);
	Запрос.УстановитьПараметр("КонтрагентВладелец", КонтрагентВладелец);
	Запрос.УстановитьПараметр("ОрганизацияВладелец", ОрганизацияВладелец);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЗ.Позиция КАК Позиция,
	|	ТЗ.Значение КАК Значение,
	|	ТЗ.Уверенность КАК Уверенность
	|ПОМЕСТИТЬ втТЗ
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТЗ.Значение КАК Значение,
	|	втТЗ.Уверенность КАК Уверенность
	|ИЗ
	|	втТЗ КАК втТЗ
	|ГДЕ
	|	втТЗ.Значение.Владелец = &КонтрагентВладелец
	|
	|УПОРЯДОЧИТЬ ПО
	|	втТЗ.Позиция
	|;
	|ВЫБРАТЬ
	|	втТЗ.Значение КАК Значение,
	|	втТЗ.Уверенность КАК Уверенность
	|ИЗ
	|	втТЗ КАК втТЗ
	|ГДЕ
	|	втТЗ.Значение.Владелец = &ОрганизацияВладелец
	|
	|УПОРЯДОЧИТЬ ПО
	|	втТЗ.Позиция
	|";
	
	Результаты = Запрос.ВыполнитьПакет();
	ПодходящиеСчета = Новый Структура;
	ПодходящиеСчета.Вставить("БанковскийСчетКонтрагента", Результаты[1].Выгрузить());
	ПодходящиеСчета.Вставить("БанковскийСчетОрганизации", Результаты[2].Выгрузить());
	
	Возврат ПодходящиеСчета;
	
КонецФункции

&НаСервере
Процедура ИзменитьИсточникиДляВыбораБанковскихСчетов(ОбновитьСчета = Истина)
	
	ИсточникПоляСчетКонтрагентаВладелец = Объект.РеквизитыДокумента[2].Значение;
	Если Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий Тогда
		ИсточникПоляСчетОрганизацииВладелец = Объект.РеквизитыДокумента[9].Значение; 
	Иначе
		ИсточникПоляСчетОрганизацииВладелец = Объект.РеквизитыДокумента[8].Значение;    
	КонецЕсли;

	Если ОбновитьСчета Тогда
		Объект.РеквизитыДокумента[21].Значение = Справочники.БанковскиеСчетаКонтрагентов.ПустаяСсылка();
		Объект.РеквизитыДокумента[22].Значение = Справочники.БанковскиеСчетаОрганизаций.ПустаяСсылка();
		РаспознаваниеДокументовСлужебный.ЗаполнитьБанковскийСчет(Объект);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыОткрытияФормы(Знач ВидОперации, Знач ТипДокументаСтрокой)
	
	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("ОснованиеСчет", Объект.Ссылка);
	ПараметрыЗаполнения.Вставить("Дата", Объект.РеквизитыДокумента[1].Значение);
	ПараметрыЗаполнения.Вставить("ХозяйственнаяОперация", ВидОперации);
	ПараметрыЗаполнения.Вставить("Договор", Объект.РеквизитыДокумента[6].Значение);
	ПараметрыЗаполнения.Вставить("СрокОплаты", Объект.РеквизитыДокумента[7].Значение);
	
	Для Каждого ДанныеРеквизита Из Объект.РеквизитыДокумента Цикл
		ПараметрыЗаполнения.Вставить(ДанныеРеквизита.ИмяРеквизита, ДанныеРеквизита.Значение);
	КонецЦикла;
	
	Если ТипДокументаСтрокой = "ЗаказПоставщику" Тогда 
		Если Не ЗначениеЗаполнено(Объект.РеквизитыДокумента[6].Значение) Или ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСПоставщиками") Тогда
			ПараметрыЗаполнения.Вставить("ПорядокРасчетов", Перечисления.ПорядокРасчетов.ПоЗаказам);
		КонецЕсли;
		ПараметрыЗаполнения.Вставить("Организация", ПараметрыЗаполнения.ПокупательОрганизация);
		ПараметрыЗаполнения.Вставить("Контрагент", ПараметрыЗаполнения.Продавец); 
		ПараметрыЗаполнения.Вставить("Соглашение", ПараметрыЗаполнения.СоглашениеСПоставщиком);
		
		ПараметрыЗаполнения.Вставить("НомерПоДаннымПоставщика", Объект.РеквизитыДокумента[0].Значение);
		ПараметрыЗаполнения.Вставить("ДатаПоДаннымПоставщика", Объект.РеквизитыДокумента[1].Значение);
		
		Если ЗначениеЗаполнено(ПараметрыЗаполнения.СоглашениеСПоставщиком) Тогда
			ВидЦены = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЗаполнения.СоглашениеСПоставщиком, "ВидЦеныПоставщика");
		КонецЕсли;	
	Иначе 
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами") Тогда
			ПараметрыЗаполнения.Вставить("ПорядокРасчетов", Перечисления.ПорядокРасчетов.ПоЗаказам);
		КонецЕсли;
		ПараметрыЗаполнения.Вставить("Организация", ПараметрыЗаполнения.ПродавецОрганизация);
		ПараметрыЗаполнения.Вставить("Контрагент", ПараметрыЗаполнения.Покупатель);
		ПараметрыЗаполнения.Вставить("Соглашение", ПараметрыЗаполнения.СоглашениеСКлиентом);
		
		ПараметрыЗаполнения.Вставить("НомерПоДаннымКлиента", Объект.РеквизитыДокумента[0].Значение);
		ПараметрыЗаполнения.Вставить("ДатаПоДаннымКлиента", Объект.РеквизитыДокумента[1].Значение);

		ПараметрыЗаполнения.Вставить("СтруктурнаяЕдиница", ПараметрыЗаполнения.БанковскийСчетОрганизации);
		ПараметрыЗаполнения.Вставить("Номер", Объект.РеквизитыДокумента[0].Значение);
		
		Если ЗначениеЗаполнено(ПараметрыЗаполнения.СоглашениеСКлиентом) Тогда
			ВидЦены = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЗаполнения.СоглашениеСКлиентом, "ВидЦен");
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыЗаполнения.Вставить("СуммаВключаетНДС", Объект.РеквизитыДокумента[26].Значение);
	
	ТаблицаТовары = РаспознаваниеДокументовСлужебный.ЗаполненнаяТаблицаДокумента(Объект);
	
	ВидСкидки = РаспознаваниеДокументовСлужебныйКлиентСервер.ЗначениеРеквизитаДокумента(
		Объект, "ВидСкидки", РаспознаваниеДокументовСлужебныйКлиентСервер.ВидыСкидок().НеПредоставлена);
	Если ВидСкидки = РаспознаваниеДокументовСлужебныйКлиентСервер.ВидыСкидок().НаОтдельныеПозиции Тогда
			Для Каждого Строка Из ТаблицаТовары Цикл
				Если Строка.СуммаСкидки < 0 Тогда
					Строка.Цена = Строка.Сумма / ?(Строка.Количество = 0, 1, Строка.Количество);
				Иначе
					Строка.Сумма = Строка.Сумма;
					Строка.Всего = Строка.Всего;
					Строка.ПроцентСкидки = ?(Строка.Сумма = 0, 0, Строка.СуммаСкидки / Строка.Сумма * 100);
				КонецЕсли;
			КонецЦикла;
			
	ИначеЕсли ВидСкидки = РаспознаваниеДокументовСлужебныйКлиентСервер.ВидыСкидок().ПоДокументуВЦелом Тогда
		
		Если ТипДокументаСтрокой = "ЗаказПоставщику" Тогда
			
			ИтогоСуммаСкидки = РаспознаваниеДокументовСлужебныйКлиентСервер.ЗначениеРеквизитаДокумента(Объект, "ИтогоСуммаСкидки", 0);
			ДанныеОбъекта = Новый Структура;
			ДанныеОбъекта.Вставить("СуммаСкидки", ИтогоСуммаСкидки);
			ДанныеОбъекта.Вставить("СуммаВключаетНДС", ПараметрыЗаполнения.СуммаВключаетНДС);
			
		Иначе
			
			ПараметрыЗаполнения.Вставить("СуммаСкидки", ПараметрыЗаполнения.ИтогоСуммаСкидки);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыЗаполнения.Вставить("СуммаДокумента", ИтогоВсего);   
	ПараметрыЗаполнения.Вставить("СкидкиРассчитаны", Истина);
	ПараметрыЗаполнения.Вставить("БанковскийСчет", ПараметрыЗаполнения.БанковскийСчетОрганизации);

	СтрокиТаблицыТовары = Новый Массив;
	
	КолонкиТаблицы = ТаблицаТовары.Колонки;
	Если Не КолонкиТаблицы.Найти("ИтогоСумма") = Неопределено Тогда
		КолонкиТаблицы.Удалить("ИтогоСумма");    
	КонецЕсли;
	Если Не КолонкиТаблицы.Найти("ИтогоСуммаНДС") = Неопределено Тогда
		КолонкиТаблицы.Удалить("ИтогоСуммаНДС");
	КонецЕсли;		
	
	Для Каждого СтрокаТаблицыДокумента Из ТаблицаДокумента Цикл
		ДанныеСтрокиТаблицы = Новый Структура();
	Для Каждого Колонка Из КолонкиТаблицы Цикл
			Если Колонка.Имя = "ЕдиницаИзмерения" Тогда
				ЕдиницаИзмерения = Неопределено;
				Если ЗначениеЗаполнено(СтрокаТаблицыДокумента.ЕдиницаИзмерения) Тогда
					 ЕдиницаИзмерения = СтрокаТаблицыДокумента.ЕдиницаИзмерения;
				ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицыДокумента.КодЕдиницыИзмерения) Тогда
					 ЕдиницаИзмерения = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду(СтрокаТаблицыДокумента.КодЕдиницыИзмерения);
				ИначеЕсли ЕдиницаИзмерения = Неопределено Тогда  
					 ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицыДокумента.Номенклатура, "ЕдиницаИзмерения");
				КонецЕсли;
				ДанныеСтрокиТаблицы.Вставить("Упаковка", ЕдиницаИзмерения);
			ИначеЕсли Колонка.Имя = "ТПодразделение" Тогда  
				ДанныеСтрокиТаблицы.Вставить("Подразделение", СтрокаТаблицыДокумента[Колонка.Имя]);
			ИначеЕсли Колонка.Имя = "ТСклад" Тогда
				ДанныеСтрокиТаблицы.Вставить("Склад", 
				?(ЗначениеЗаполнено(СтрокаТаблицыДокумента[Колонка.Имя]), СтрокаТаблицыДокумента[Колонка.Имя],
				Объект.РеквизитыДокумента[31].Значение));  
			ИначеЕсли Колонка.Имя = "СуммаСкидки" Тогда
				ДанныеСтрокиТаблицы.Вставить("СуммаРучнойСкидки", СтрокаТаблицыДокумента[Колонка.Имя]);
			ИначеЕсли Колонка.Имя = "ПроцентСкидки" Тогда
				ДанныеСтрокиТаблицы.Вставить("ПроцентРучнойСкидки", СтрокаТаблицыДокумента[Колонка.Имя]);
			Иначе
				ДанныеСтрокиТаблицы.Вставить(Колонка.Имя, СтрокаТаблицыДокумента[Колонка.Имя]);
			КонецЕсли; 
		КонецЦикла;
		ДанныеСтрокиТаблицы.Вставить("КоличествоУпаковок", СтрокаТаблицыДокумента.Количество); 
		ДанныеСтрокиТаблицы.Вставить("СуммаСНДС", СтрокаТаблицыДокумента.Всего);
		ДанныеСтрокиТаблицы.Вставить("СуммаСНДСБезВозвратнойТары", СтрокаТаблицыДокумента.Всего);    
		ДанныеСтрокиТаблицы.Вставить("ВариантОбеспечения", Перечисления.ВариантыОбеспечения.НеТребуется);
		ДанныеСтрокиТаблицы.Вставить("Коэффициент", 1);
		Если ТипДокументаСтрокой = "ЗаказПоставщику" И ЗначениеЗаполнено(ВидЦены) Тогда
			ДанныеСтрокиТаблицы.Вставить("ВидЦеныПоставщика", ВидЦены);	
		ИначеЕсли ТипДокументаСтрокой = "ЗаказКлиента" И ЗначениеЗаполнено(ВидЦены) Тогда
			ДанныеСтрокиТаблицы.Вставить("ВидЦены", ВидЦены);	
		КонецЕсли;
		СтрокиТаблицыТовары.Добавить(ДанныеСтрокиТаблицы);
	КонецЦикла;
		
	ПараметрыЗаполнения.Вставить("ТоварыТЧ", СтрокиТаблицыТовары);
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

&НаСервере
Функция СоздатьДокумент(ТипДокументаСтрокой, ПараметрыЗаполнения)
	
	КлючеваяОперация = "РаспознаваниеДокументов.СоздатьДокумент";
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	
	УдалосьПровести = Ложь;
	
	СохранитьЗначенияПередЗаписью();
	ОбъектИзФормы = РеквизитФормыВЗначение("Объект");
	
	НачатьТранзакцию();
	Попытка
		
		// Изменения в документе "Распознанный документ"
		Модифицированность = Ложь;
		ОбъектИзФормы.Статус = Перечисления.СтатусыСозданныхДокументовРаспознаваниеДокументов.Обработан;
		ОбъектИзФормы.Записать();
		
		СоздаваемыйДокумент = РаспознаваниеДокументовСлужебный.СоздатьДокументНаОснованииРаспознанного(Объект.Ссылка, ТипДокументаСтрокой, ПараметрыЗаполнения, РежимЗаписиДокумента.Проведение);
		
		УдалосьПровести = Истина;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		УдалосьПровести = Ложь;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Ошибка проведения основного документа:'") + Символы.ПС
			+ КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Сообщение.Сообщить();
	КонецПопытки;
	
	Если Не УдалосьПровести Тогда
		НачатьТранзакцию();
		Попытка
			ОбъектИзФормы.Статус = Перечисления.СтатусыСозданныхДокументовРаспознаваниеДокументов.Обработан;
			ОбъектИзФормы.Записать();
			
			СоздаваемыйДокумент = РаспознаваниеДокументовСлужебный.СоздатьДокументНаОснованииРаспознанного(Объект.Ссылка, ТипДокументаСтрокой, ПараметрыЗаполнения, РежимЗаписиДокумента.Запись);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ПолучитьСообщенияПользователю(Истина); // Если не удалось записать, то не нужно писать ошибки проведения
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Ошибка создания документа:'") + Символы.ПС
				+ КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Сообщение.Сообщить();
			
			Результат = Новый Структура;
			Результат.Вставить("СоздаваемыйДокумент", СоздаваемыйДокумент);
			Результат.Вставить("УдалосьПровести", УдалосьПровести);
			
			Возврат Результат;
		КонецПопытки;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ОбъектИзФормы, "Объект");
	
	РаспознаваниеДокументовСлужебный.ДобавитьПрисоединенныйФайл(Объект, СоздаваемыйДокумент, АдресКартинки);
	
	НайтиИЗаполнитьСозданныеДокументы();
	
	ДанныеСозданногоДокумента = ПолучитьОбратнуюСвязьДляСозданногоДокумента(СоздаваемыйДокумент);
	
	Пакет = Новый Структура;
	Пакет.Вставить("created", ДанныеСозданногоДокумента);
	
	РаспознаваниеДокументовКоннекторСлужебный.ПередатьОбратнуюСвязь(Объект.ИдентификаторРезультата, Пакет);
	
	Пакет = Новый Структура;
	Если ТипЗнч(РезультатОбратнойСвязи) <> Тип("Структура") Тогда
		Пакет.Вставить("diff", Новый Структура);
	Иначе
		Пакет.Вставить("diff", РезультатОбратнойСвязи);
	КонецЕсли;
	
	РаспознаваниеДокументовКоннекторСлужебный.ПередатьОбратнуюСвязь(Объект.ИдентификаторРезультата, Пакет);
	
	РезультатОбратнойСвязи = Новый Структура;
	
	Комментарий = Новый Структура;
	Комментарий.Вставить("ИдентификаторРезультата", Объект.ИдентификаторРезультата);
	Комментарий.Вставить("УдалосьПровести", УдалосьПровести);
	Комментарий.Вставить("ТипДокумента", ТипДокументаСтрокой);
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала, , Комментарий);
	
	Результат = Новый Структура;
	Результат.Вставить("СоздаваемыйДокумент", СоздаваемыйДокумент);
	Результат.Вставить("УдалосьПровести", УдалосьПровести);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьОбратнуюСвязьДляСозданногоДокумента(СоздаваемыйДокумент)
	
	Результат = РаспознаваниеДокументов.ОписаниеОбратнойСвязи("Проведен");
	Результат.IdСозданногоДокумента = Строка(СоздаваемыйДокумент.УникальныйИдентификатор());
	Результат.НомерРаспознанногоДокумента = Объект.Номер;
	Результат.ЭтоВходящийДокумент = (Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий);
	Результат.НомерДокумента = Объект.РеквизитыДокумента[0].Значение;
	Результат.ДатаДокумента = Объект.РеквизитыДокумента[1].Значение;
	Результат.СуммаДокумента = ИтогоВсего;
	Результат.Контрагент = РаспознаваниеДокументов.УбратьОрганизационнуюФорму(ИсточникПоляДоговорКонтрагент);
	Результат.Организация = РаспознаваниеДокументов.УбратьОрганизационнуюФорму(ИсточникПоляДоговорОрганизация);
	Результат.ТипРаспознанногоДокумента = Строка(Объект.ТипДокумента);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ИнициализироватьСтруктуруСозданныеДокументы()
	
	СозданныеДокументы = Новый Структура;
	СозданныеДокументы.Вставить("ДокументВходящий", Новый Структура("Ссылка", Неопределено));
	СозданныеДокументы.Вставить("ДокументИсходящий", Новый Структура("Ссылка", Неопределено));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСозданиеНоменклатуры(ПараметрыСоздаваемойНоменклатуры)
	
	ФоновоеЗадание = ЗапуститьФоновоеСозданиеНоменклатуры(ПараметрыСоздаваемойНоменклатуры, УникальныйИдентификатор);
	
	НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	НастройкиОжидания.ВыводитьОкноОжидания = Истина;
	НастройкиОжидания.ВыводитьПрогрессВыполнения = Истина;
	НастройкиОжидания.ВыводитьСообщения = Истина;
	НастройкиОжидания.ТекстСообщения = НСтр("ru = 'Создание номенклатуры для заполнения...'");
	
	Обработчик = Новый ОписаниеОповещения("ЗаполнитьТаблицуСозданнойНоменклатурой", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, Обработчик, НастройкиОжидания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапуститьФоновоеСозданиеНоменклатуры(ПараметрыСоздаваемойНоменклатуры, УникальныйИдентификатор)
	
	ПараметрыВызоваСервера = Новый Массив;
	ПараметрыВызоваСервера.Добавить(ПараметрыСоздаваемойНоменклатуры);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Фоновое создание номенклатуры'");
	
	Обработчик = "РаспознаваниеДокументовСлужебный.ФоновоеСозданиеНоменклатуры";
	ФоновоеЗадание = ДлительныеОперации.ВыполнитьВФоне(Обработчик, ПараметрыВызоваСервера, ПараметрыВыполнения);
	
	Возврат ФоновоеЗадание;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьТаблицуСозданнойНоменклатурой(Результат, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьТаблицуСозданнойНоменклатуройНаСервере(Результат, ДополнительныеПараметры);
	
	КнопкаСозданияНоменклатуры = Элементы.СписокНераспознаннойНоменклатурыСоздатьНоменклатуру;
	КнопкаСозданияНоменклатуры.Доступность = СписокНераспознаннойНоменклатуры.Количество();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуСозданнойНоменклатуройНаСервере(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ПустаяСтрока(Результат.КраткоеПредставлениеОшибки) Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	ИнформацияОНоменклатуре = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	ПолучитьСообщенияПользователю(Истина);
	Для Каждого Сообщение Из Результат.Сообщения Цикл
		Сообщение.Сообщить();
	КонецЦикла;
	
	Для Каждого Данные Из ИнформацияОНоменклатуре Цикл
		СтрокаЗаполнения = ТаблицаДокумента.НайтиПоИдентификатору(Данные.ИдентификаторИсходнойСтроки);
		СтрокаЗаполнения.Номенклатура = Данные.Номенклатура;
		СтрокаЗаполнения.НоменклатураЗаполненоВручную = Истина; // Тут важно, что заполнено не автоматически при нечетком поиске
		СтрокаЗаполнения.НоменклатураЭлементСоздан = Истина;
		
		РаспознаваниеДокументовПереопределяемый.ПриИзмененииКолонкиНаСервере(
			Объект,
			СтрокаЗаполнения,
			"Номенклатура",
			СтрокаЗаполнения.НомерСтроки,
			Данные.Номенклатура);
		
		Отбор = Новый Структура("ИдентификаторИсходнойСтроки", Данные.ИдентификаторИсходнойСтроки);
		НайденныеСтроки = СписокНераспознаннойНоменклатуры.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() Тогда
			УдаляемаяСтрока = НайденныеСтроки[0];
			СписокНераспознаннойНоменклатуры.Удалить(УдаляемаяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	СохранитьЗначенияИзТаблицыДокумента();
	РаспознаваниеДокументовСлужебный.ПересчитатьПроблемныеЭлементы(ЭтотОбъект);
	
	Если Не СписокНераспознаннойНоменклатуры.Количество() Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаТабличнаяЧасть;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура НайтиИЗаполнитьСозданныеДокументы()
	
	Если Элементы.ГруппаСвязанныйДокумент.Видимость Тогда
		Элементы.ГруппаСвязанныйДокумент.Видимость = Ложь;
	КонецЕсли;
	
	// Поиск комплектов
	ДанныеДокумента = Новый Структура(
		"Ссылка, ПометкаУдаления, Статус, ТипДокумента, Направление, Организация, Контрагент, СуммаДокумента, НомерДокумента, ДатаДокумента",
		Объект.Ссылка,
		Объект.ПометкаУдаления,
		Объект.Статус,
		Объект.ТипДокумента,
		Объект.Направление,
		ИсточникПоляДоговорОрганизация,
		ИсточникПоляДоговорКонтрагент,
		ИтогоВсего,
		Объект.РеквизитыДокумента[0].Значение,
		Объект.РеквизитыДокумента[1].Значение
	);
	ВсеКомплектныеДокументы = РаспознаваниеДокументовКомплекты.НайтиКомплектныеДокументы(ДанныеДокумента);
	
	// Удалим все предыдущие данные о комплектах, дублях, созданных документах, а также программно добавленные Элементы формы
	ДокументыКомплектные.Очистить();
	ДокументыДубли.Очистить();
	ДокументыСозданные.Очистить();
	СозданныеДокументы.ДокументВходящий.Ссылка = Неопределено;
	СозданныеДокументы.ДокументИсходящий.Ссылка = Неопределено;
	
	ИдПодчиненного = Элементы.ГруппаВсплывающаяСвязанныеДокументы.ПодчиненныеЭлементы.Количество();
	Пока ИдПодчиненного > 0 Цикл
		ИдПодчиненного = ИдПодчиненного - 1;
		ДляПроверки = Элементы.ГруппаВсплывающаяСвязанныеДокументы.ПодчиненныеЭлементы[ИдПодчиненного];
		Если ДляПроверки.Видимость Тогда
			Элементы.Удалить(ДляПроверки);
		КонецЕсли;
	КонецЦикла;
	
	
	ДокументыПоТипам = Новый Соответствие;
	Для Каждого ЭтотКомплектныйДокумент Из ВсеКомплектныеДокументы Цикл
		ДанныеКомплектного = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ЭтотКомплектныйДокумент,
			"ПометкаУдаления, ТипДокумента, Статус, НомерДокумента, ДатаДокумента"
		);
		
		СтрокаТаблицы = ДокументыКомплектные.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеКомплектного);
		СтрокаТаблицы.Ссылка = ЭтотКомплектныйДокумент;
		СтрокаТаблицы.СтатусРаспознавания = РаспознаваниеДокументовКомплекты.СтатусДокументаЧислом(СтрокаТаблицы);
		
		ДокументыПоТипам.Вставить(ДанныеКомплектного.ТипДокумента, ЭтотКомплектныйДокумент);
	КонецЦикла;
	
	Если ВсеКомплектныеДокументы.Количество() = 1 Тогда
		ДанныеКомплекта = Неопределено;
		
		РаспознаваниеДокументовСлужебный.АктуализироватьОбъектыСвязанныеСРаспознаннымДокументом(Объект);
		Связанные = РегистрыСведений.СвязанныеОбъектыРаспознаниеДокументов.ВсеСвязанныеДокументы(Объект.Ссылка);
		
		ВсеСвязанные = Новый Массив;
		Для Каждого Связанный Из Связанные Цикл
			Если ВсеСвязанные.Найти(Связанный.Ссылка) = Неопределено Тогда
				ВсеСвязанные.Вставить(0, Связанный.Ссылка);
			КонецЕсли;
		КонецЦикла;
	Иначе
		
		// Подготовим структуру для создания документов из комплекта
		ДанныеКомплекта = РаспознаваниеДокументовКомплектыКлиентСервер.НовыеПараметрыСозданияКомплекта();
		ДанныеКомплекта.НаправлениеДокумента = Объект.Направление;
		ДанныеКомплекта.ТипКомплекта         = РаспознаваниеДокументовКомплекты.СформироватьТипКомплекта(ДокументыКомплектные, "ПоТаблице");
		ДанныеКомплекта.ПараметрыОперации    = РаспознаваниеДокументовКомплектыКлиентСервер.ТипДокументаИВидОперацииПоУмолчанию(
			Объект.Направление, ДанныеКомплекта.ТипКомплекта);
		ДанныеКомплекта.РаспознанныеДокументыПоТипам = ДокументыПоТипам;
		
		РаспознаваниеДокументовКомплекты.ОбновитьИЗаполнитьСвязанныеИСозданныеДокументы(ДанныеКомплекта);
		
		// Отсортировать таблицу ДокументыКомплектные
		ТипыРаспознанных = РаспознаваниеДокументовКомплектыКлиентСервер.ПорядокОтображенияСвязанныхДокументовПоТипам();
		ИдДокументаИзКомплекта = 0;
		ОтсутствующиеТипы = 0;
		Пока ИдДокументаИзКомплекта < ДокументыКомплектные.Количество() - 1 Цикл
			Если ТипыРаспознанных[ИдДокументаИзКомплекта + ОтсутствующиеТипы] <> ДокументыКомплектные[ИдДокументаИзКомплекта].ТипДокумента Тогда
				НайденныеСтроки = ДокументыКомплектные.НайтиСтроки(Новый Структура(
					"ТипДокумента",
					ТипыРаспознанных[ИдДокументаИзКомплекта + ОтсутствующиеТипы]
				));
				Если НайденныеСтроки.Количество() = 0 Тогда
					ОтсутствующиеТипы = ОтсутствующиеТипы + 1;
					Продолжить;
				Иначе
					НужнаяСтрока = НайденныеСтроки[0];
					ИдНужнойСтроки = ДокументыКомплектные.Индекс(НужнаяСтрока);
					ДокументыКомплектные.Сдвинуть(ИдНужнойСтроки, ИдДокументаИзКомплекта - ИдНужнойСтроки);
				КонецЕсли;
			КонецЕсли;
			ИдДокументаИзКомплекта = ИдДокументаИзКомплекта + 1;
		КонецЦикла;
		
		ВсеСвязанные = ДанныеКомплекта.СвязанныеДокументы;
	КонецЕсли;
	
	Для Каждого ЭтотСвязанный Из ВсеСвязанные Цикл
		ТипСвязанного = ТипЗнч(ЭтотСвязанный);
		ПодходящиеТипы = РаспознаваниеДокументовКомплектыКлиентСервер.ПодходящиеТипыРаспознанногоДокумента(ТипСвязанного);
		
		Для Каждого ЭтотТип Из ПодходящиеТипы Цикл
			КомплектныеСтроки = ДокументыКомплектные.НайтиСтроки(Новый Структура("ТипДокумента", ЭтотТип));
			Если КомплектныеСтроки.Количество() <> 0 Тогда

				СтрокаТаблицы = ДокументыСозданные.Добавить();
				СтрокаТаблицы.РаспознанныйДокумент = КомплектныеСтроки[0].Ссылка;
				СтрокаТаблицы.СозданныйДокумент = ЭтотСвязанный;
				СтрокаТаблицы.ТипДокумента = ТипСвязанного;
			
				Если ТипСвязанного = Тип("ДокументСсылка.СчетНаОплатуКлиенту") Тогда
					СозданныеДокументы.ДокументИсходящий.Ссылка = ЭтотСвязанный;
				ИначеЕсли ТипСвязанного = Тип("ДокументСсылка.ЗаказКлиента") Тогда
					СозданныеДокументы.ДокументИсходящий.Ссылка = ЭтотСвязанный;
				ИначеЕсли ТипСвязанного = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
					СозданныеДокументы.ДокументВходящий.Ссылка = ЭтотСвязанный;
				КонецЕсли;
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
// ДокументыКомплектные
	
	// Отображение комплектов, дублей и созданных документов
	ИдЧисломДокументаИзКомплекта = -1;
	Соль = "_" + СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");
	ИдЧисломДубляДокумента = -1; // Тут сквозная нумерация
	Для Каждого СтрокаТаблицы Из ДокументыКомплектные Цикл
		ИдЧисломДокументаИзКомплекта = ИдЧисломДокументаИзКомплекта + 1;
		ИдДокументаИзКомплекта = XMLСтрока(ИдЧисломДокументаИзКомплекта) + Соль;
		
		// Добавление элементов на форму
		РаспознаваниеДокументовКомплекты.СкопироватьЭлементыФормыРекурсивно(
			ЭтотОбъект,
			Элементы.ГруппаСвязанныйДокумент,
			Элементы.ГруппаВсплывающаяСвязанныеДокументы,
			ИдДокументаИзКомплекта,
			"ГруппаДубльСтатусСсылка, ОткрытьСозданныйДокумент");
		
		Если СтрокаТаблицы.Ссылка = Объект.Ссылка Тогда
			ВидимыйЭлемент = Элементы["ДекорацияЭтотДокумент_"+ИдДокументаИзКомплекта];
			Элементы["ДекорацияЭтотДокумент_"+ИдДокументаИзКомплекта].Видимость = Истина;
			Элементы["ОткрытьРаспознанныйДокумент_"+ИдДокументаИзКомплекта].Видимость = Ложь;
		Иначе
			ВидимыйЭлемент = Элементы["ОткрытьРаспознанныйДокумент_"+ИдДокументаИзКомплекта];
		КонецЕсли;
		
		ВидимыйЭлемент.Заголовок = СтрШаблон(НСтр("ru = '%1 № %2 от %3'"),
			СтрокаТаблицы.ТипДокумента, СокрЛП(СтрокаТаблицы.НомерДокумента), Формат(СтрокаТаблицы.ДатаДокумента, "ДФ=dd.MM.yyyy"));
		
// ДокументыДубли
		
		Если СтрокаТаблицы.Ссылка = Объект.Ссылка Тогда
			НовыеДубли = РаспознаваниеДокументовКомплекты.ДублиРаспознанногоДокумента(ДанныеДокумента);
		Иначе
			НовыеДубли = РаспознаваниеДокументовКомплекты.ДублиРаспознанногоДокумента(СтрокаТаблицы.Ссылка);
		КонецЕсли;
		
		Если НовыеДубли.Количество() = 0 Тогда
			Элементы["ГруппаДублейГоризонтальная_"+ИдДокументаИзКомплекта].Видимость = Ложь;
		Иначе
			
			Для Каждого СтрокаДубля Из НовыеДубли Цикл
				СтрокаДубляНаФорме = ДокументыДубли.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДубляНаФорме, СтрокаДубля);
				СтрокаДубляНаФорме.СтатусРаспознавания = РаспознаваниеДокументовКомплекты.СтатусДокументаЧислом(СтрокаДубля);
				
				ИдЧисломДубляДокумента = ИдЧисломДубляДокумента + 1;
				ИдДубляДокумента = XMLСтрока(ИдЧисломДубляДокумента) + Соль;
				РаспознаваниеДокументовКомплекты.СкопироватьЭлементыФормыРекурсивно(
					ЭтотОбъект,
					Элементы.ГруппаДубльСтатусСсылка,
					Элементы["ГруппаДублей_"+ИдДокументаИзКомплекта],
					ИдДубляДокумента
				);
				
				Элементы["ОткрытьДубльДокумента_" + ИдДубляДокумента].Заголовок = СтрШаблон(НСтр("ru = '%1 № %2 от %3'"),
					СтрокаДубля.ТипДокумента, СокрЛП(СтрокаДубля.НомерДокумента), Формат(СтрокаДубля.ДатаДокумента, "ДФ=dd.MM.yyyy"));
			КонецЦикла;
		КонецЕсли;
		
// ДокументыСозданные
		
		ЧастьСозданных = ДокументыСозданные.НайтиСтроки(Новый Структура("РаспознанныйДокумент", СтрокаТаблицы.Ссылка));
		Если ЧастьСозданных.Количество() = 0 Тогда
			Элементы["ГруппаСозданныхГоризонтальная_"+ИдДокументаИзКомплекта].Видимость = Ложь;
		Иначе
			
			Для Каждого СтрокаСозданного Из ЧастьСозданных Цикл
				ИдСозданногоДокумента = ДокументыСозданные.Индекс(СтрокаСозданного);
				ИдСозданногоДокумента = XMLСтрока(ИдСозданногоДокумента) + Соль;
				РаспознаваниеДокументовКомплекты.СкопироватьКнопкуФормы(
					ЭтотОбъект,
					Элементы.ОткрытьСозданныйДокумент,
					Элементы["ГруппаСозданных_"+ИдДокументаИзКомплекта],
					ИдСозданногоДокумента
				);
				
				Элементы["ОткрытьСозданныйДокумент_" + ИдСозданногоДокумента].Заголовок =
					РаспознаваниеДокументовКомплектыКлиентСервер.ОтрезатьВремяУДаты(Строка(СтрокаСозданного.СозданныйДокумент));
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы["РазделениеДокументов_" + ИдДокументаИзКомплекта].Видимость = Ложь;
	Элементы.ГруппаКнопкиПрикрепитьСкан.Видимость = Ложь;
	Если ДанныеКомплекта = Неопределено Тогда
		Если Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий Тогда
			Кандидат = СозданныеДокументы.ДокументВходящий.Ссылка;
		Иначе 
			Кандидат = СозданныеДокументы.ДокументИсходящий.Ссылка;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Кандидат)
			И Не РаспознаваниеДокументовСлужебный.СканУжеЕстьУВладельца(Объект, Кандидат, АдресКартинки) Тогда
			
			Элементы.ГруппаКнопкиПрикрепитьСкан.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;
	
	КоличествоСвязанных = ДокументыКомплектные.Количество() - 1 + ДокументыДубли.Количество() + ДокументыСозданные.Количество();
	Если КоличествоСвязанных = 0 Тогда
		Элементы.ГруппаВсплывающаяСвязанныеДокументы.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветТекстаФормы;
		Элементы.ГруппаВсплывающаяСвязанныеДокументы.Доступность = Ложь;
		Элементы.ГруппаВсплывающаяСвязанныеДокументы.Заголовок = НСтр("ru = 'Нет связанных документов'");
	Иначе
		Элементы.ГруппаВсплывающаяСвязанныеДокументы.ЦветТекстаЗаголовка = ЦветаСтиля.ГиперссылкаЦвет;
		Элементы.ГруппаВсплывающаяСвязанныеДокументы.Доступность = Истина;
		Элементы.ГруппаВсплывающаяСвязанныеДокументы.Заголовок =
			СтрШаблон(НСтр("ru = 'Связанные документы (%1)'"), КоличествоСвязанных);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерепроверитьНаСервере()
	
	СохранитьЗначенияПередЗаписью();
	
	ТаблицаДокумента.Очистить();
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	РаспознаваниеДокументов.ЗаполнитьСпискиВыбораНаСервере(ДокументОбъект, Объект.Ссылка, Истина);
	Документы.РаспознанныйДокумент.ЗаполнитьЗначенияРаспознанногоДокумента(ДокументОбъект, ДокументОбъект.Ссылка);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	НастроитьЭлементыПоРеквизитам();
	ЗаполнитьТаблицуДокумента();
	ЗаполнитьЭлементыИтогов();
	УстановитьОтображениеСкидок(ЭтотОбъект);
	
	Если Не УправлениеДоступом.ЧтениеРазрешено(Объект.РеквизитыДокумента[9].Значение) Тогда
		// Организация покупатель
		Объект.РеквизитыДокумента[9].Значение = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	Если Не УправлениеДоступом.ЧтениеРазрешено(Объект.РеквизитыДокумента[8].Значение) Тогда
		// Организация продавец
		Объект.РеквизитыДокумента[8].Значение = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	Если Не УправлениеДоступом.ЧтениеРазрешено(Объект.РеквизитыДокумента[17].Значение) Тогда
		// Исполнитель
		Объект.РеквизитыДокумента[17].Значение = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	Если Не УправлениеДоступом.ЧтениеРазрешено(Объект.РеквизитыДокумента[6].Значение) Тогда
		// Договор
		Объект.РеквизитыДокумента[6].Значение = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	Если Не УправлениеДоступом.ЧтениеРазрешено(Объект.РеквизитыДокумента[29].Значение) Тогда
		// Соглашение
		Объект.РеквизитыДокумента[29].Значение = Справочники.СоглашенияСКлиентами.ПустаяСсылка()
	КонецЕсли;	
	Если Не УправлениеДоступом.ЧтениеРазрешено(Объект.РеквизитыДокумента[30].Значение) Тогда
		// Соглашение
		Объект.РеквизитыДокумента[30].Значение = Справочники.СоглашенияСПоставщиками.ПустаяСсылка()
	КонецЕсли;
	Если Не УправлениеДоступом.ЧтениеРазрешено(Объект.РеквизитыДокумента[28].Значение) Тогда
		// Партнер
		Объект.РеквизитыДокумента[28].Значение = Справочники.Партнеры.ПустаяСсылка()
	КонецЕсли; 
	Если Не УправлениеДоступом.ЧтениеРазрешено(Объект.РеквизитыДокумента[2].Значение) Тогда
		// КонтрагентКлиент
		Объект.РеквизитыДокумента[2].Значение = Справочники.Контрагенты.ПустаяСсылка()
	КонецЕсли;
	Если Не УправлениеДоступом.ЧтениеРазрешено(Объект.РеквизитыДокумента[3].Значение) Тогда
		// КонтрагентПокупатель
		Объект.РеквизитыДокумента[3].Значение = Справочники.Контрагенты.ПустаяСсылка()
	КонецЕсли;     
	Если Не УправлениеДоступом.ЧтениеРазрешено(Объект.РеквизитыДокумента[31].Значение) Тогда
		// Склад
		Объект.РеквизитыДокумента[31].Значение = Справочники.Склады.ПустаяСсылка();
	КонецЕсли;	
	
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(Объект.РеквизитыДокумента[7].Значение);
	
	ИзменитьИсточникиДляВыбораПартнера();
	ИзменитьИсточникиДляВыбораСоглашения();
	ИзменитьИсточникиДляВыбораДоговора(); 
	ОбновитьСписокВыбораБанковскихСчетов();
	ИзменитьИсточникиДляВыбораБанковскихСчетов(Ложь);
	РаспознаваниеДокументовСлужебный.ПересчитатьПроблемныеЭлементы(ЭтотОбъект);
	РаспознаваниеДокументовСлужебный.ВосстановитьТекстыОшибок(ЭтотОбъект);
	
	НайтиИЗаполнитьСозданныеДокументы();
	
	ВсеСвойстваЯчеекТаблицы = РаспознаваниеДокументовСлужебный.СвойстваЯчеекТаблицы(Объект);
	АдресСвойствЯчеекТаблицы = ПоместитьВоВременноеХранилище(ВсеСвойстваЯчеекТаблицы, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументПоСсылке(ДокументСсылка)
	ПерейтиПоНавигационнойСсылке(ПолучитьНавигационнуюСсылку(ДокументСсылка));
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначенияИзТаблицыДокумента()
	
	ТаблицаДокументаТЗ = РеквизитФормыВЗначение("ТаблицаДокумента");
	
	// Удаляем колонки, которые не нужно сохранять
	ТаблицаДокументаТЗ.Колонки.Удалить("Отступ");
	ТаблицаДокументаТЗ.Колонки.Удалить("Услуга");
	ТаблицаДокументаТЗ.Колонки.Удалить("Работа");
	ИдКолонки = ТаблицаДокументаТЗ.Колонки.Количество();
	Пока ИдКолонки > 0 Цикл
		ИдКолонки = ИдКолонки - 1;
		Если Прав(ТаблицаДокументаТЗ.Колонки[ИдКолонки].Имя, 11) = "ТекстОшибки" Тогда
			ТаблицаДокументаТЗ.Колонки.Удалить(ИдКолонки);
		КонецЕсли;
	КонецЦикла;
	
	РаспознаваниеДокументовСлужебный.СохранитьТаблицуДокумента(Объект, ТаблицаДокументаТЗ);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьИтоговыеЗначения()
	
	РаспознаваниеДокументовСлужебныйКлиентСервер.УстановитьЗначениеРеквизитаДокумента(Объект, "ВидСкидки", ВидСкидки);
	РаспознаваниеДокументовСлужебныйКлиентСервер.УстановитьЗначениеРеквизитаДокумента(Объект, "ИтогоСуммаСкидки", ИтогоСуммаСкидки);
	РаспознаваниеДокументовСлужебныйКлиентСервер.УстановитьЗначениеРеквизитаДокумента(Объект, "ИтогоСумма", ИтогоСумма);
	РаспознаваниеДокументовСлужебныйКлиентСервер.УстановитьЗначениеРеквизитаДокумента(Объект, "ИтогоСуммаНДС", ИтогоСуммаНДС);
	РаспознаваниеДокументовСлужебныйКлиентСервер.УстановитьЗначениеРеквизитаДокумента(Объект, "ИтогоВсего", ИтогоВсего);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭлементыИтогов()
	
	ВидСкидки = РаспознаваниеДокументовСлужебныйКлиентСервер.ЗначениеРеквизитаДокумента(
		Объект, "ВидСкидки", РаспознаваниеДокументовСлужебныйКлиентСервер.ВидыСкидок().НеПредоставлена);
	
	ИтогоСуммаСкидки   = РаспознаваниеДокументовСлужебныйКлиентСервер.ЗначениеРеквизитаДокумента(Объект, "ИтогоСуммаСкидки", 0);
	ИтогоСумма    = РаспознаваниеДокументовСлужебныйКлиентСервер.ЗначениеРеквизитаДокумента(Объект, "ИтогоСумма", 0);
	ИтогоСуммаНДС = РаспознаваниеДокументовСлужебныйКлиентСервер.ЗначениеРеквизитаДокумента(Объект, "ИтогоСуммаНДС", 0);
	ИтогоВсего    = РаспознаваниеДокументовСлужебныйКлиентСервер.ЗначениеРеквизитаДокумента(Объект, "ИтогоВсего", 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеВыделенияРамкойПоляДокумента(ИмяРеквизита, НомерСтроки)
	
	ДанныеТаблицы = СтрокаТаблицыДокументаПоПараметрам(НомерСтроки, ИмяРеквизита);
	Если ДанныеТаблицы = Неопределено Тогда
		ДанныеТаблицы = СтрокаТаблицыДокументаПоПараметрам(НомерСтроки, "Номенклатура");
		Если ДанныеТаблицы = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеПриближения = Новый Структура("Координаты, СтрокВИзображении", ДанныеТаблицы.Координаты, ДанныеТаблицы.СтрокВИзображении);
	ПодключитьОбработчикОжидания("Подключаемый_ПриблизитьПоКоординатам", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеДляВыделенныхСтрок(Значение, ИмяКолонки)
	
	ИдентификаторыВыделенныхСтрок = Элементы.СписокНераспознаннойНоменклатуры.ВыделенныеСтроки;
	Для Каждого ИдентификаторСтроки Из ИдентификаторыВыделенныхСтрок Цикл
		ИзменяемаяСтрока = СписокНераспознаннойНоменклатуры.НайтиПоИдентификатору(ИдентификаторСтроки);
		ИзменяемаяСтрока[ИмяКолонки] = Значение;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтрокиНераспознаннойНоменклатуры()
	
	СтрокиПустойНоменклатуры = Новый Массив;
	
	ПорогДобавления = 0;
	Для Каждого СтрокаНоменклатуры Из ТаблицаДокумента Цикл
		Если СтрокаНоменклатуры.Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка") Тогда
			СтрокиПустойНоменклатуры.Добавить(СтрокаНоменклатуры);
			Продолжить;
		КонецЕсли;
		
		ИмеющиесяДанные = СтрокаТаблицыДокументаПоПараметрам(СтрокаНоменклатуры.НомерСтроки, "Номенклатура");
		Если ИмеющиесяДанные = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ИмеющиесяДанные.ЗаполненоВручную
			И СтрокаНоменклатуры.Номенклатура = ИмеющиесяДанные.НайденноеЗначение
			И ИмеющиесяДанные.УверенностьНайденногоЗначения <= ПорогДобавления Тогда
			
			СтрокиПустойНоменклатуры.Добавить(СтрокаНоменклатуры);
		КонецЕсли;
	КонецЦикла;
	
	ИдентификаторыИсходныхСтрок = Новый Соответствие();
	Для Каждого СтрокаПустойНоменклатуры Из СтрокиПустойНоменклатуры Цикл
		ИдентификаторыИсходныхСтрок.Вставить(СтрокаПустойНоменклатуры.ПолучитьИдентификатор(), СтрокаПустойНоменклатуры);
	КонецЦикла;
	
	// Удаление исправленных значений
	Индекс = СписокНераспознаннойНоменклатуры.Количество();
	Пока Индекс > 0 Цикл
		Индекс = Индекс - 1;
		ИдентификаторТекущейСтроки = СписокНераспознаннойНоменклатуры[Индекс].ИдентификаторИсходнойСтроки;
		НайденноеЗначение = ИдентификаторыИсходныхСтрок.Получить(ИдентификаторТекущейСтроки);
		Если НайденноеЗначение = Неопределено Тогда
			СписокНераспознаннойНоменклатуры.Удалить(Индекс);
		Иначе // Отключение ранее добавленных строк
			ИндексУдаляемойСтроки = СтрокиПустойНоменклатуры.Найти(НайденноеЗначение);
			Если Не ИндексУдаляемойСтроки = Неопределено Тогда
				СтрокиПустойНоменклатуры.Удалить(ИндексУдаляемойСтроки);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
	// Добавление новых
	Для Каждого СтрокаПустойНоменклатуры Из СтрокиПустойНоменклатуры Цикл
		СвойстваНераспознаннойНоменклатуры = СписокНераспознаннойНоменклатуры.Добавить();
		СвойстваНераспознаннойНоменклатуры.ИдентификаторИсходнойСтроки = СтрокаПустойНоменклатуры.ПолучитьИдентификатор();
		
		ЗаполнитьЗначенияСвойств(СвойстваНераспознаннойНоменклатуры, СтрокаПустойНоменклатуры);
		
		Ключ = РаспознаваниеДокументовСлужебныйКлиентСервер.КлючСвойстваЯчеекТаблицы("Номенклатура", СтрокаПустойНоменклатуры.НомерСтроки);
		Свойства = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СвойстваЯчеекТаблицы, Ключ);
		
		СвойстваНераспознаннойНоменклатуры.Наименование = Свойства.РаспознанныйТекст;
		
	КонецЦикла;
	
	КнопкаСозданияНоменклатуры = Элементы.СписокНераспознаннойНоменклатурыСоздатьНоменклатуру;
	КнопкаСозданияНоменклатуры.Доступность = СписокНераспознаннойНоменклатуры.Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеДляРеквизитовБыстрогоРедактирования(ИмяРеквизита, Значение = Неопределено)
	
	РедактируемаяСтрока = СтрокаПолейНераспознаннойНоменклатурыПоИмениРеквизита(ИмяРеквизита);
	Если РедактируемаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РедактируемаяСтрока.Выбран Тогда
		Возврат;
	КонецЕсли;
	
	Если Значение = Неопределено Тогда
		Тип = ТипЗнч(РедактируемаяСтрока.Значение);
		МассивТипов = Новый Массив();
		МассивТипов.Добавить(Тип);
		ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
		Значение = ОписаниеТипа.ПривестиЗначение();
	КонецЕсли;
	
	РедактируемаяСтрока.Значение = Значение;
	
КонецПроцедуры

&НаКлиенте
Функция СтрокаПолейНераспознаннойНоменклатурыПоИмениРеквизита(ИмяРеквизита)
	
	Отбор = Новый Структура("ИмяРеквизита", ИмяРеквизита);
	НайденныеСтроки = ПоляНераспознаннойНоменклатуры.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() Тогда
		Возврат НайденныеСтроки[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция СтрокаТаблицыДокументаПоПараметрам(НомерСтроки, ИмяРеквизита)
	
	Ключ = РаспознаваниеДокументовСлужебныйКлиентСервер.КлючСвойстваЯчеекТаблицы(ИмяРеквизита, НомерСтроки);
	Свойства = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СвойстваЯчеекТаблицы, Ключ);
	
	Возврат Свойства;
	
КонецФункции

&НаКлиенте
Процедура ИзменитьДоступностьКнопкиУстановкиРеквизитов()
	
	Отбор = Новый Структура("Выбран", Истина);
	ВыбранныеЭлементы = ПоляНераспознаннойНоменклатуры.НайтиСтроки(Отбор);
	
	Элементы.ИзменитьЗначенияСтрокНераспознаннойНоменклатуры.Доступность = ВыбранныеЭлементы.Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодтвержденияЗакрытия(Результат, Контекст) Экспорт
	
	ЭтотОбъект.Записать();
	Подключаемый_ПослеЗаписи();
	
	КлючеваяОперация = "РаспознаваниеДокументов.ЗакрытиеФормы." + ИмяФормы;
	Замер = ОценкаПроизводительностиКлиент.ЗамерВремени(КлючеваяОперация);
	
	Комментарий = Новый Структура;
	Комментарий.Вставить("ИдентификаторРезультата", Объект.ИдентификаторРезультата);
	
	ОценкаПроизводительностиКлиент.УстановитьКомментарийЗамера(Замер, Комментарий);
	
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтображениеСкидок(Форма)
	
	Форма.Элементы.ГруппаИтогСуммаСкидки.Видимость =
		    (Форма.ВидСкидки = РаспознаваниеДокументовСлужебныйКлиентСервер.ВидыСкидок().НаОтдельныеПозиции)
		Или (Форма.ВидСкидки = РаспознаваниеДокументовСлужебныйКлиентСервер.ВидыСкидок().ПоДокументуВЦелом);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Оформление ячеек с ошибками
	
	ТаблицаДокументаТЗ = РеквизитФормыВЗначение("ТаблицаДокумента");
	КолонкиТаблицыДокумента = ТаблицаДокументаТЗ.Колонки;
	
	Для Каждого Колонка Из КолонкиТаблицыДокумента Цикл
		
		Если СтрЗаканчиваетсяНа(Колонка.Имя, "ТекстОшибки") И Колонка.Имя <> "ОтступТекстОшибки" Тогда
			
			ИмяКолонкиОригинал = СтрЗаменить(Колонка.Имя, "ТекстОшибки", "");
			
			ЭлементОформления = УсловноеОформление.Элементы.Добавить();
			
			ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДокумента." + Колонка.Имя);
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
			
			ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяКолонкиОригинал);
			
			ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(251, 212, 212));
			
		КонецЕсли;
	КонецЦикла;
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма,"Характеристика","ТаблицаДокумента.ХарактеристикаИспользуется");
	УстановитьУсловноеОформлениеДляСтатейИАналитик();

	Если Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий Тогда 
		Элементы.ГруппаОтправитель.Заголовок = НСтр("ru = 'Отправитель'");
	Иначе
		Элементы.ГруппаОтправитель.Заголовок = НСтр("ru = 'Получатель'"); 
	КонецЕсли;

	//Склад для входящих/исходящих с услугами/товарами
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Склад.Имя);
	
		ГруппаОтбораИ1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбораИ1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
		ОтборЭлемента =  ГруппаОтбораИ1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЕстьТовары");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		ОтборЭлемента =  ГруппаОтбораИ1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СкладЗаполнен");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь; 
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина); 

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Склад.Имя);
		
		ГруппаОтбораИ1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбораИ1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
		ОтборЭлемента =  ГруппаОтбораИ1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЕстьТовары");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		
		ОтборЭлемента =  ГруппаОтбораИ1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СкладЗаполнен");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина; 
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь); 
		
	//Усл. офор. склада в тч
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТСклад.Имя);

	ОтборЭлемента =  ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СкладГруппа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
    Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТСклад.Имя);
	
	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли; 
	
		ГруппаОтбораИ1 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбораИ1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
			ОтборЭлемента = ГруппаОтбораИ1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДокумента.ТипНоменклатуры");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			СписокЗначений = Новый СписокЗначений;
			СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Товар);
			СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
				
			ОтборЭлемента.ПравоеЗначение = СписокЗначений;
					
			ОтборЭлемента = ГруппаОтбораИ1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
            ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Направление");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;			
			ОтборЭлемента.ПравоеЗначение = Перечисления.НаправленияРаспознанногоДокумента.Входящий;
					
			ОтборЭлемента = ГруппаОтбораИ1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДокумента.ТСклад");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;	   
			
		ГруппаОтбораИ = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
			ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДокумента.ТипНоменклатуры");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			СписокЗначений = Новый СписокЗначений;
			СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Товар);
			СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
			
			ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
            ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Направление");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;			
			ОтборЭлемента.ПравоеЗначение = Перечисления.НаправленияРаспознанногоДокумента.Исходящий;  
			
			ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДокумента.ТСклад");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;	   
			
			ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СкладГруппа");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = Истина;
			
			Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
			
				
	// Оформление склада и подразделения
	// отключение видимости склада, если работа - для исх. , если работа или услуга - для вх.

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТСклад.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;    

		ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

		ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДокумента.ТипНоменклатуры");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Работа);
		ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	    ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));	
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Направление");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;			
		ОтборЭлемента.ПравоеЗначение = Перечисления.НаправленияРаспознанногоДокумента.Исходящий;
		
		ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

		ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДокумента.ТипНоменклатуры");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Работа); 
		СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
		ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	    ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));	
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Направление");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;			
		ОтборЭлемента.ПравоеЗначение = Перечисления.НаправленияРаспознанногоДокумента.Входящий;

		Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	// Снятие отметки незаполненного подразделения, если Товар и не списание на расходы
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТПодразделение.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;    
	
		ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
		ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДокумента.ТПодразделение");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		
		ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДокумента.ТипНоменклатуры");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Товар);
		СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара); 
		СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
		ОтборЭлемента.ПравоеЗначение = СписокЗначений;
		
		ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));	
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Направление");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;			
		ОтборЭлемента.ПравоеЗначение = Перечисления.НаправленияРаспознанногоДокумента.Исходящий;
		
		ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
			
		ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДокумента.ТипНоменклатуры");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Товар);
		СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара); 
		ОтборЭлемента.ПравоеЗначение = СписокЗначений;
		
		ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));	
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Направление");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;			
		ОтборЭлемента.ПравоеЗначение = Перечисления.НаправленияРаспознанногоДокумента.Входящий;
			
		Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
		
	// установка отметки незаполненного подразделения, если Товар
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТПодразделение.Имя);

	ГруппаОтбора0 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора0.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе;
	
		ГруппаОтбора1 = ГруппаОтбора0.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;    
	
		ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
		ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДокумента.ТПодразделение");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		
		ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДокумента.ТипНоменклатуры");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Товар);
		СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара); 
		СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
		ОтборЭлемента.ПравоеЗначение = СписокЗначений;
		
		ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));	
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Направление");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;			
		ОтборЭлемента.ПравоеЗначение = Перечисления.НаправленияРаспознанногоДокумента.Исходящий;
		
		ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
			
		ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДокумента.ТипНоменклатуры");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Товар);
		СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара); 
		ОтборЭлемента.ПравоеЗначение = СписокЗначений;
		
		ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));	
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Направление");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;			
		ОтборЭлемента.ПравоеЗначение = Перечисления.НаправленияРаспознанногоДокумента.Входящий;

		Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);   
	
	// если списать на расходы истина - отметка незаполненного
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТПодразделение.Имя); 
	    	
	ГруппаОтбора2 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
		ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДокумента.ТПодразделение");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		
		ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));	
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Направление");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;			
		ОтборЭлемента.ПравоеЗначение = Перечисления.НаправленияРаспознанногоДокумента.Входящий;

		ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));	
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДокумента.СписатьНаРасходы");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;			
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
		
		// поясняющая надпись если не работа и не складгруппа - для исх. 
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТПодразделение.Имя);
	
	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДокумента.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Товар);
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);  
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СкладГруппа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));	
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Направление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;			
	ОтборЭлемента.ПравоеЗначение = Перечисления.НаправленияРаспознанногоДокумента.Исходящий;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<для работ>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	// поясняющая надпись если не работа и не складгруппа - для вх. 
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТПодразделение.Имя);
	
	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДокумента.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Товар);
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);  
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СкладГруппа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));	
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Направление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;			
	ОтборЭлемента.ПравоеЗначение = Перечисления.НаправленияРаспознанногоДокумента.Входящий;    
		
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));	
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДокумента.СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;			
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<при списании на расходы>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
		// отключение видимости подразделения, если товар или тара или услуга - для исх., если товар или тара - для вх.	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТПодразделение.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

		ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

		ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДокумента.ТипНоменклатуры");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Товар);
		СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);  
		СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
		ОтборЭлемента.ПравоеЗначение = СписокЗначений;

		ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СкладГруппа");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));	
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Направление");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;			
		ОтборЭлемента.ПравоеЗначение = Перечисления.НаправленияРаспознанногоДокумента.Исходящий;
		
		ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

		ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДокумента.ТипНоменклатуры");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Товар);
		СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);  
		ОтборЭлемента.ПравоеЗначение = СписокЗначений;

		ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СкладГруппа");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));	
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Направление");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;			
		ОтборЭлемента.ПравоеЗначение = Перечисления.НаправленияРаспознанногоДокумента.Входящий;
		
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

// УП
&НаСервере
Процедура УстановитьУсловноеОформлениеДляСтатейИАналитик()
	
// только просмотр, если товар или тара или услуга или работа и заполнено назначение
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписатьНаРасходы.Имя);

	ГруппаОтбораИЛИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
		ГруппаОтбораИ1 = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбораИ1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
			ОтборЭлемента = ГруппаОтбораИ1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДокумента.ТипНоменклатуры");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;			
			ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Услуга; 
			
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// поясняющая надпись, если товар или тара или работа и заполнено назначение

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтатьяРасходов.Имя);

	ГруппаОтбораИЛИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
		ГруппаОтбораИ1 = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбораИ1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
			ОтборЭлемента = ГруппаОтбораИ1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДокумента.ТипНоменклатуры");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			СписокЗначений = Новый СписокЗначений;
			СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Товар);
			СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
			СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Работа);	
			ОтборЭлемента.ПравоеЗначение = СписокЗначений; 
			
			ОтборЭлемента = ГруппаОтбораИ1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));	
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Направление");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;			
			ОтборЭлемента.ПравоеЗначение = Перечисления.НаправленияРаспознанногоДокумента.Входящий; 		
						
			ОтборЭлемента = ГруппаОтбораИ1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));	
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДокумента.СписатьНаРасходы");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;			
			ОтборЭлемента.ПравоеЗначение = Ложь;
	  	
			Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);  

КонецПроцедуры  

&НаСервере
Процедура УстановитьПараметрыВыбораНоменклатуры()  
	
	Элементы.Номенклатура.ПараметрыВыбора = ПараметрыВыбораНоменклатуры();

КонецПроцедуры  

&НаСервере
Функция ПараметрыВыбораНоменклатуры()  
	
	МассивПараметров = Новый Массив();
	НовыйМассив = Новый Массив(); 
	
	НовыйМассив.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
	НовыйМассив.Добавить(Перечисления.ТипыНоменклатуры.Работа);
	НовыйМассив.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	НовыйМассив.Добавить(Перечисления.ТипыНоменклатуры.Товар); 
	
	НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипНоменклатуры", НовыйМассив);
	МассивПараметров.Добавить(НовыйПараметр); 
		
	Возврат Новый ФиксированныйМассив(МассивПараметров);

КонецФункции

&НаСервере
Процедура УстановитьПараметрыВыбораПартнера()  
	
	МассивПараметров = Новый Массив();	
	НовыйМассив = Новый Массив();	 
		
	Если Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий Тогда

		НовыйМассив.Добавить(Клиент);
	    НовыйПараметр = Новый ПараметрВыбора("Отбор.Клиент", НовыйМассив);
   	Иначе 
		
		НовыйМассив.Добавить(Поставщик);
	    НовыйПараметр = Новый ПараметрВыбора("Отбор.Поставщик", НовыйМассив); 
		
	КонецЕсли;
	
	МассивПараметров.Добавить(НовыйПараметр); 
		
	Элементы.Партнер.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);

КонецПроцедуры 
&НаСервере
Процедура УстановитьПараметрыВыбораТоварыСклад()
	
	Склад = РаспознаваниеДокументовСлужебныйКлиентСервер.ЗначениеРеквизитаДокумента(Объект, "Склад",
			Справочники.Склады.ПустаяСсылка());  
			
	Элементы.ТСклад.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
	ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрВыбора(Элементы.ТСклад, "Ссылка", ДанныеВыбораСкладов(Склад));

КонецПроцедуры  

&НаСервереБезКонтекста
Функция ДанныеВыбораСкладов(Склад)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Склады.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.Ссылка В ИЕРАРХИИ(&ГруппаСкладов)
	|	И Склады.ЭтоГруппа = ЛОЖЬ
	|	И Склады.ВыборГруппы <> ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.Запретить)");

	Запрос.УстановитьПараметр("ГруппаСкладов", Склад);
	МассивСкладов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Возврат МассивСкладов;

КонецФункции

&НаСервере
Процедура ИзвлечьИННКППИзСтроки(ИННКПП, Реквизит, ЗначениеИННКПП)
	
	 ЗначениеИННКПП = РаспознаваниеДокументовСлужебный.ИзвлечьИННКППИзСтроки(ИННКПП, Реквизит);
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеСКлиентомНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораСоглашения = ПродажиКлиент.ПараметрыНачалаВыбораСоглашенияСКлиентом();
	
	ПараметрыВыбораСоглашения.Элемент = Элемент;
	ПараметрыВыбораСоглашения.Партнер  = ИсточникПоляДоговорПартнер;   
	ПараметрыВыбораСоглашения.ДанныеФормыСтруктура = Объект; 
	ПараметрыВыбораСоглашения.Документ = Объект.РеквизитыДокумента[16].Значение;
	ПараметрыВыбораСоглашения.ХозяйственнаяОперация = Операция;
	
	ПродажиКлиент.НачалоВыбораСоглашенияСКлиентом(ПараметрыВыбораСоглашения, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура СоглашениеСПоставщикомНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	ЗакупкиКлиент.НачалоВыбораСоглашенияСПоставщиком(
		Элемент,
		СтандартнаяОбработка,
		ИсточникПоляДоговорПартнер,
		Объект.РеквизитыДокумента[17].Значение);

КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка) 
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Статья",         Элементы.ТаблицаДокумента.ТекущиеДанные.СтатьяРасходов);
	ПараметрыФормы.Вставить("ПараметрыВыбора", Элемент.ПараметрыВыбора);
	ПараметрыФормы.Вставить("ОграничениеТипа", Элемент.ОграничениеТипа);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораСтатьи", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаСервере
Процедура ЕстьТоварыТаблицаДокумента()
	
	Для Каждого Строка Из ТаблицаДокумента Цикл
		Если Строка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар
		Или Строка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара Тогда
			ЕстьТовары = Истина;
			Возврат;
		КонецЕсли;	
		ЕстьТовары = Ложь;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьВозможностьСозданияНоменклатуры()
	
	Если Не ПравоДоступа("Добавление", Метаданные.Справочники.Номенклатура) Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;

КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьВозможностьСозданияДоговора()
	
	Если Не ПравоДоступа("Добавление", Метаданные.Справочники.ДоговорыКонтрагентов) Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;

КонецФункции

#КонецОбласти