
#Область ОписаниеПеременных

&НаКлиенте
Перем ОбновитьИнтерфейс;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// создание элемента Распределенная фискализация
	Элемент = Элементы.Добавить(
		"ИспользоватьРаспределеннуюФискализацию", 
		Тип("ПолеФормы"), 
		Элементы.ГруппаУправлениеПодключаемымОборудованиемПерваяСтрока);
	Элемент.Вид                  = ВидПоляФормы.ПолеФлажка;
	Элемент.Заголовок            = НСтр("ru = 'Использовать распределенную фискализацию'");
	Элемент.ПоложениеЗаголовка   = ПоложениеЗаголовкаЭлементаФормы.Право;
	Элемент.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ИспользоватьРаспределеннуюФискализациюПриИзменении");
	Подсказка = Новый ФорматированнаяСтрока(
		НСтр("ru = 'Распределенная фискализация доступна при использовании подсистемы'")+" ",
		Новый ФорматированнаяСтрока(НСтр("ru = '""Обсуждения""'"),,,,"Обсуждения"),
		".",
		Символы.ПС,
		НСтр("ru = 'В настройках экземпляра подключаемого оборудования с типом ""ККТ с передачей данных"" должен быть установлен флаг ""Автоматическая фискализация чеков из очереди чеков"".'"));
	Элемент.РасширеннаяПодсказка.Заголовок = Подсказка;
	
	Если ОбщегоНазначенияБПО.ИспользуетсяСертификатыНУЦМинцифры() Тогда
		Если ОбщегоНазначенияБПО.ИспользуетсяБСП() И Не ОбщегоНазначенияБПО.ЭтоВебКлиент() Тогда
			МодульСертификатыНУЦМинцифры  = ОбщегоНазначенияБПО.ОбщийМодуль("СертификатыНУЦМинцифры");
			ДоверенныеСертификаты = Новый Структура();
			ДоверенныеСертификаты.Вставить("Список", МодульСертификатыНУЦМинцифры.СписокДоверенныхСертификатов());
		КонецЕсли;
	КонецЕсли;

	// Вызов БИП
	Если ОбщегоНазначенияБПО.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеВнешнихКомпонент") Тогда
		МодульПолучениеВнешнихКомпонент = ОбщегоНазначенияБПО.ОбщийМодуль("ПолучениеВнешнихКомпонент");
		Настройки  = МодульПолучениеВнешнихКомпонент.НастройкиОбновленияВнешнихКомпонент();
		ВариантОбновленияВнешнихКомпонент = Настройки.ВариантОбновления;
	КонецЕсли;
	// Конец Вызов БИП
	
	УстановитьВидимостьРазделов();
	УстановитьЗначенияРеквизитов();
	
	НастройкиПрограммыБПОПереопределяемый.ПанельАдминистрированияПриСозданииНаСервере(ЭтаФорма, Отказ, Параметры, СтандартнаяОбработка);
	НастройкиПрограммыБПО.ПанельАдминистрированияПриСозданииНаСервере(ЭтаФорма);
	
	
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(ДоверенныеСертификаты) Тогда
		Оповещение = Новый ОписаниеОповещения("УстановитьСертификатыНУЦМинцифры_Завершение", ЭтотОбъект);
		МодульСертификатыНУЦМинцифрыКлиент = ОбщегоНазначенияБПОКлиент.ОбщийМодуль("СертификатыНУЦМинцифрыКлиент");
		МодульСертификатыНУЦМинцифрыКлиент.НачатьПроверкуДоверенныхСертификатов(Оповещение, ДоверенныеСертификаты.Список);
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьДоступностьКнопокОчистка", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьИнтерфейсПрограммы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ОбработчикОповещений(ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "Обсуждения" Тогда
		СтандартнаяОбработка = Ложь;
		Если СуществуетПанельАдминистрированияБСП() Тогда
			ИмяФормыОткрытия = "Обработка.ПанельАдминистрированияБСП.Форма.ИнтернетПоддержкаИСервисы";
			ОткрытьФорму(
				ИмяФормыОткрытия,
				Новый Структура("Обсуждения", Истина),
				ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СрокХраненияОперацийПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	Если Элемент = Элементы.СрокХраненияОперацийОчередьЧеков Тогда
		ИзменитьИспользованиеОчисткиОпераций("ОчисткаИсторииОперацийОчередиЧеков");
	ИначеЕсли Элемент = Элементы.СрокХраненияФискальныхОпераций Тогда
		ИзменитьИспользованиеОчисткиОпераций("ОчисткаИсторииФискальныхОпераций");
	ИначеЕсли Элемент = Элементы.СрокХраненияПлатежныхОперации Тогда
		ИзменитьИспользованиеОчисткиОпераций("ОчисткаИсторииПлатежныхОпераций");
	ИначеЕсли Элемент = Элементы.СрокХраненияОперацииПроверкиКМ Тогда
		ИзменитьИспользованиеОчисткиОпераций("ОчисткаИсторииОперацийПроверкиКМ");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ХранитьУспешныеОперацииРазрешенияПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры


&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, ОбновлятьИнтерфейс = Истина)
	
	Результат = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	
	Если ОбновлятьИнтерфейс Тогда
		#Если НЕ ВебКлиент Тогда
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 1, Истина);
		ОбновитьИнтерфейс = Истина;
		#КонецЕсли
	КонецЕсли;
	
	Если Результат <> "" Тогда
		Оповестить("Запись_НаборКонстант", Новый Структура, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИспользоватьРаспределеннуюФискализациюПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
	Если ОбщегоНазначенияБПОКлиент.ИспользуетсяРаспределеннаяФискализация() Тогда
		ИдентификаторОбсуждения = ПодключениеСистемыВзаимодействия();
		Если ИдентификаторОбсуждения <> Неопределено Тогда
			МодульРаспределеннаяФискализацияКлиент = ОбщегоНазначенияБПОКлиент.ОбщийМодуль("РаспределеннаяФискализацияКлиент");
			МодульРаспределеннаяФискализацияКлиент.ПодключениеСистемыВзаимодействия(ИдентификаторОбсуждения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ИспользуетсяПротоколRDPвБПОПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

#Область ПолучениеВнешнихКомпонент

&НаКлиенте
Процедура ФайлВнешнихКомпонентПриИзменении(Элемент)
	
	// Вызов БИП
	Если Не ОбщегоНазначенияБПОКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеВнешнихКомпонент") Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиОбновления = Новый Структура;
	НастройкиОбновления.Вставить(
		"ФайлВнешнихКомпонент",
		ФайлВнешнихКомпонент);
	МодульПолучениеВнешнихКомпонентКлиент =
		ОбщегоНазначенияБПОКлиент.ОбщийМодуль("ПолучениеВнешнихКомпонентКлиент");
	МодульПолучениеВнешнихКомпонентКлиент.ИзменитьНастройкиОбновленияВнешнихКомпонент(
		НастройкиОбновления);
	// Конец Вызов БИП
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлВнешнихКомпонентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ОбщегоНазначенияБПОКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеВнешнихКомпонент") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок = НСтр("ru = 'Выберите файл с внешними компонентами'");
	ДиалогВыбораФайла.Фильтр    = НСтр("ru = 'Файл внешних компонент (*.zip)|*.zip'");
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ФайлВнешнихКомпонентПослеВыбораФайла",
		ЭтотОбъект);
		
	// Вызов БСП
	МодульФайловаяСистемаКлиент = ОбщегоНазначенияБПОКлиент.ОбщийМодуль("ФайловаяСистемаКлиент");
	МодульФайловаяСистемаКлиент.ПоказатьДиалогВыбора(
		ОписаниеОповещения,
		ДиалогВыбораФайла);
	// Конец Вызов БСП
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОбновленияВнешнихКомпонентПриИзменении(Элемент)
	
	Если Не ОбщегоНазначенияБПОКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеВнешнихКомпонент") Тогда
		Возврат
	КонецЕсли;
	
	Если ВариантОбновленияВнешнихКомпонент = 1 Тогда
		
		// Вызов БИП
		МодульИнтернетПоддержкаПользователейКлиент = ОбщегоНазначенияБПОКлиент.ОбщийМодуль("ИнтернетПоддержкаПользователейКлиент");
		Если Не МодульИнтернетПоддержкаПользователейКлиент.ДоступноПодключениеИнтернетПоддержки() Тогда
			ПоказатьПредупреждение(,
				НСтр("ru = 'Для автоматического обновления внешних компонент необходимо
					|подключить Интернет-поддержку пользователей.'"));
			Возврат;
		КонецЕсли;
		// Конец Вызов БИП
		
	КонецЕсли;
	
	ПриИзмененииРеквизитаСервер(Элементы.ВариантОбновленияВнешнихКомпонент.Имя);
	ВариантОбновленияВнешнихКомпонентПредыдущееЗначение = ВариантОбновленияВнешнихКомпонент;

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРасписаниеОбновленияВнешнихКомпонентНажатие(Элемент)
	
	Если Не ОбщегоНазначенияБПОКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеВнешнихКомпонент") Тогда
		Возврат;
	КонецЕсли;
	
	// Вызов БИП
	МодульПолучениеВнешнихКомпонентКлиент = ОбщегоНазначенияБПОКлиент.ОбщийМодуль(
		"ПолучениеВнешнихКомпонентКлиент");
	Результат = МодульПолучениеВнешнихКомпонентКлиент.НастройкиОбновленияВнешнихКомпонент();
	Если Результат.Расписание <> Неопределено Тогда
		ДиалогРасписание = Новый ДиалогРасписанияРегламентногоЗадания(Результат.Расписание);
	Иначе
		#Если Не МобильноеПриложениеКлиент Тогда
		ДиалогРасписание = Новый ДиалогРасписанияРегламентногоЗадания(Новый РасписаниеРегламентногоЗадания);
		#КонецЕсли
	КонецЕсли;
	// Конец Вызов БИП
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПриИзмененииРасписанияОбновленияВнешнихКомпонент",
		ЭтотОбъект);
	
	ДиалогРасписание.Показать(ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОбновлениеВнешнихКомпонентНеВыполняетсяОбработкаНавигационнойСсылки(
	Элемент,
	НавигационнаяСсылкаФорматированнойСтроки,
	СтандартнаяОбработка)
	
	// Вызов БИП
	Если Не ОбщегоНазначенияБПОКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеВнешнихКомпонент") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	МодульИнтернетПоддержкаПользователейКлиент = ОбщегоНазначенияБПОКлиент.ОбщийМодуль("ИнтернетПоддержкаПользователейКлиент");
	Если Не МодульИнтернетПоддержкаПользователейКлиент.ДоступноПодключениеИнтернетПоддержки() Тогда
		ПоказатьПредупреждение(,
			НСтр("ru = 'Для автоматического обновления внешних компонент необходимо
				|подключить Интернет-поддержку пользователей.'"));
		Возврат;
	КонецЕсли;
	
	МодульИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(
		Неопределено,
		ЭтотОбъект);
	// Конец Вызов БИП
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьКоманду(Команда)
	
	ПараметрыВыполненияКоманды = Новый Структура;
	ПараметрыВыполненияКоманды.Вставить("Источник", ЭтаФорма);
	ПараметрыВыполненияКоманды.Вставить("Уникальность", УникальныйИдентификатор);
	ПараметрыВыполненияКоманды.Вставить("Окно",);
	ПараметрыФормы = Новый Структура();
	
	Если Команда = Команды.ОткрытьРабочиеМеста Тогда
		МенеджерОборудованияКлиент.ОткрытьРабочиеМеста(Неопределено, ПараметрыВыполненияКоманды);
	ИначеЕсли Команда = Команды.ВыбратьРМТекущегоСеанса Тогда
		МенеджерОборудованияКлиент.ВыбратьРМТекущегоСеанса(Неопределено, Неопределено);
	ИначеЕсли Команда = Команды.ОткрытьПодключаемоеОборудование Тогда
		МенеджерОборудованияКлиент.ОткрытьПодключаемоеОборудование(Неопределено, ПараметрыВыполненияКоманды);
	ИначеЕсли Команда = Команды.ОткрытьДрайверыОборудования Тогда
		МенеджерОборудованияКлиент.ОткрытьДрайверыОборудования(Неопределено, ПараметрыВыполненияКоманды);
	ИначеЕсли Команда = Команды.ОткрытьОфлайнОборудование Тогда
		МодульМенеджерОфлайнОборудованияКлиент = ОбщегоНазначенияБПОКлиент.ОбщийМодуль("МенеджерОфлайнОборудованияКлиент");
		МодульМенеджерОфлайнОборудованияКлиент.ОткрытьПодключаемоеОборудование(Неопределено, ПараметрыВыполненияКоманды);
	ИначеЕсли Команда = Команды.ОткрытьПлатежныеОперации Тогда
		МенеджерОборудованияКлиент.ОткрытьПлатежныеОперации(Неопределено, ПараметрыВыполненияКоманды);
	ИначеЕсли Команда = Команды.ОткрытьОчередьЧеков Тогда
		МенеджерОборудованияКлиент.ОткрытьОчередьЧеков(Неопределено, ПараметрыВыполненияКоманды);
	ИначеЕсли Команда = Команды.ОткрытьФискальныеОперации Тогда
		МенеджерОборудованияКлиент.ОткрытьФискальныеОперации(Неопределено, ПараметрыВыполненияКоманды);
	ИначеЕсли Команда = Команды.ОткрытьОперацииПроверкиКМ Тогда
		МодульМенеджерОборудованияМаркировкаКлиент = ОбщегоНазначенияБПОКлиент.ОбщийМодуль("МенеджерОборудованияМаркировкаКлиент");
		МодульМенеджерОборудованияМаркировкаКлиент.ОткрытьОперацииПроверкиКМ(Неопределено, ПараметрыВыполненияКоманды);
	ИначеЕсли Команда = Команды.ОткрытьПечатьЭтикетокИЦенников Тогда
		ИмяФормыДляОткрытия = "Обработка.ПечатьЭтикетокИЦенниковБПО.Форма.Форма";
		ОткрытьФорму(ИмяФормыДляОткрытия, ПараметрыФормы, ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно);
	ИначеЕсли Команда = Команды.ОткрытьШаблоныЭтикетокИЦенников Тогда
		ИмяФормыДляОткрытия = "Справочник.ШаблоныЭтикетокИЦенниковБПО.ФормаСписка";
		ОткрытьФорму(ИмяФормыДляОткрытия, ПараметрыФормы, ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеОчисткиОпераций(Команда)
	
	Контекст = Новый Структура();
	Контекст.Вставить("ИмяЗадания", "");
	Контекст.Вставить("ИмяРеквизита", "");
	Если Команда = Команды.НастроитьРасписаниеОчисткиОперацийОчередиЧеков Тогда
		Контекст.ИмяЗадания   = "ОчисткаИсторииОперацийОчередиЧеков";
		Контекст.ИмяРеквизита = "РасписаниеОчисткиОперацийОчередиЧеков";
	ИначеЕсли Команда = Команды.НастроитьРасписаниеОчисткиПлатежныхОпераций Тогда
		Контекст.ИмяЗадания   = "ОчисткаИсторииПлатежныхОпераций";
		Контекст.ИмяРеквизита = "РасписаниеОчисткиПлатежныхОпераций";
	ИначеЕсли Команда = Команды.НастроитьРасписаниеОчисткиФискальныхОпераций Тогда
		Контекст.ИмяЗадания   = "ОчисткаИсторииФискальныхОпераций";
		Контекст.ИмяРеквизита = "РасписаниеОчисткиФискальныхОпераций";
	ИначеЕсли Команда = Команды.НастроитьРасписаниеОчисткиОперацийПроверкиКМ Тогда
		Контекст.ИмяЗадания   = "ОчисткаИсторииОперацийПроверкиКМ";
		Контекст.ИмяРеквизита = "РасписаниеОчисткиОперацийПроверкиКМ";
	КонецЕсли;
	
	РасписаниеРегламентногоЗадания = ЭтаФорма[Контекст.ИмяРеквизита];
	Если РасписаниеРегламентногоЗадания = Неопределено Тогда
		#Если Не МобильноеПриложениеКлиент Тогда
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
		#КонецЕсли
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьРасписаниеОчисткиОпераций", ЭтотОбъект, Контекст);
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗадания);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	
	Если ЭтаФорма.ТекущийЭлемент = Элементы.ОчиститьОчередь Тогда
		ИмяФоновогоЗадания = "ОчисткаИсторииОперацийОчередиЧеков";
	ИначеЕсли ЭтаФорма.ТекущийЭлемент = Элементы.ОчиститьПлатежныеОперации Тогда
		ИмяФоновогоЗадания = "ОчисткаИсторииПлатежныхОпераций";
	ИначеЕсли ЭтаФорма.ТекущийЭлемент = Элементы.ОчиститьФискальныеОперации Тогда
		ИмяФоновогоЗадания = "ОчисткаИсторииФискальныхОпераций";
	ИначеЕсли ЭтаФорма.ТекущийЭлемент = Элементы.ОчиститьОперацииПроверкиКМ Тогда
		ИмяФоновогоЗадания = "ОчисткаИсторииОперацийПроверкиКМ";
	КонецЕсли;
	
	Результат = ОчиститьИсториюОперацийНаСервере(ИмяФоновогоЗадания);
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		// Вызов БСП
		МодульДлительныеОперацииКлиент = ОбщегоНазначенияБПОКлиент.ОбщийМодуль("ДлительныеОперацииКлиент");
		МодульДлительныеОперацииКлиент.ОжидатьЗавершение(Результат);
		// Конец Вызов БСП
	Иначе
		Если Результат Тогда
			ПодключитьОбработчикОжидания("Подключаемый_УстановитьДоступностьКнопокОчистка", 0.2, Истина);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСертификатыНУЦМинцифры(Команда)
	Если ЗначениеЗаполнено(ДоверенныеСертификаты) Тогда
		Оповещение = Новый ОписаниеОповещения("УстановитьСертификатыНУЦМинцифры_Завершение", ЭтотОбъект);
		МодульСертификатыНУЦМинцифрыКлиент = ОбщегоНазначенияБПОКлиент.ОбщийМодуль("СертификатыНУЦМинцифрыКлиент");
		МодульСертификатыНУЦМинцифрыКлиент.НачатьУстановкуДоверенныхСертификатов(Оповещение, ДоверенныеСертификаты.Список);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСертификатыНУЦМинцифры_Завершение(РезультатОперации, ДополнительныеПараметры) Экспорт
	
	ОбновитьСостояниеСертификатов(РезультатОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	НастройкиПрограммыБПОКлиент.НачатьВыполнениеКомандыПанелиАдминистрирования(ЭтотОбъект, Команда, Неопределено);
КонецПроцедуры

#Область ПолучениеВнешнихКомпонент

&НаКлиенте
Процедура ОбновлениеВнешнихКомпонент(Команда)
	
	// Вызов БИП
	Если ОбщегоНазначенияБПОКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеВнешнихКомпонент") Тогда
		МодульПолучениеВнешнихКомпонентКлиент = ОбщегоНазначенияБПОКлиент.ОбщийМодуль("ПолучениеВнешнихКомпонентКлиент");
		МодульПолучениеВнешнихКомпонентКлиент.ОбновитьВнешниеКомпоненты();
	КонецЕсли;
	// Конец Вызов БИП
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОткрытьВнешниеКомпоненты(Команда)
	
	// Вызов БСП
	Если ОбщегоНазначенияБПОКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.НастройкиПрограммы") Тогда
		МодульНастройкиПрограммыКлиент = ОбщегоНазначенияБПОКлиент.ОбщийМодуль("НастройкиПрограммыКлиент");
		МодульНастройкиПрограммыКлиент.ИнтернетПоддержкаИСервисыОткрытьВнешниеКомпоненты(
			ЭтотОбъект,
			Команда);
	КонецЕсли;
	// Конец Вызов БСП
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	#Если НЕ ВебКлиент Тогда
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбновитьИнтерфейс();
	КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещений(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_НаборКонстант" Тогда
		УстановитьДоступность();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРасписаниеОчисткиОпераций(РасписаниеЗадания, Контекст) Экспорт
	
	Если РасписаниеЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтаФорма[Контекст.ИмяРеквизита] = РасписаниеЗадания;
	ИзменитьРасписаниеЗадания(Контекст.ИмяЗадания, РасписаниеЗадания);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеСертификатов(РезультатОперации)
	
	Если РезультатОперации.Результат И ОбщегоНазначенияБПОКлиент.ИспользуетсяСертификатыНУЦМинцифры() Тогда
		Текст = "";
		СписокСертификатов = ДоверенныеСертификаты.Список; // см. СертификатыНУЦМинцифры.СписокДоверенныхСертификатов
		Для Каждого Сертификат Из СписокСертификатов Цикл
			Текст = Текст
				+ СтрШаблон(НСтр("ru = '%1 установлен, действителен до %2'") + Символы.ПС,
				Сертификат.Наименование,
				Формат(Сертификат.ДействителенДо, НСтр("ru = 'ДЛФ=DD'")));
		КонецЦикла;
		Элементы.ГруппаСертификатыНУЦМинцифрыНеУстановлены.Видимость = Ложь;
		Элементы.ГруппаСертификатыНУЦМинцифрыУстановлены.Видимость   = Истина;
		
		ТекстСообщения = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Установка корневых сертификатов Национального удостоверяющего центра Министерства цифрового развития, связи и массовых коммуникаций Российской Федерации.'"),
			Символы.ПС,
			НСтр("ru = 'Также корневые сертификаты можно скачать с сайта'")+" ",
			Новый ФорматированнаяСтрока(НСтр("ru = '""Госуслуги"".'"),,,,"https://www.gosuslugi.ru/crt"),
			Символы.ПС,
			Символы.ПС,
			Текст);
		Элементы.ДекорацияСертификатыНУЦМинцифрыУстановленыРасширеннаяПодсказка.Заголовок = ТекстСообщения;
		
	Иначе
		Элементы.ГруппаСертификатыНУЦМинцифрыНеУстановлены.Видимость = Истина;
		Элементы.ГруппаСертификатыНУЦМинцифрыУстановлены.Видимость   = Ложь;
		ТекстСообщения = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Установка корневых сертификатов Национального удостоверяющего центра Министерства цифрового развития, связи и массовых коммуникаций Российской Федерации.'"),
			Символы.ПС,
			НСтр("ru = 'Также корневые сертификаты можно скачать с сайта'")+" ",
			Новый ФорматированнаяСтрока(НСтр("ru = '""Госуслуги"".'"),,,,"https://www.gosuslugi.ru/crt"),
			Символы.ПС,
			Символы.ПС,
			РезультатОперации.ОписаниеОшибки);
		Элементы.УстановитьСертификатыНУЦМинцифрыРасширеннаяПодсказка.Заголовок = ТекстСообщения;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	Результат = СохранитьЗначениеРеквизита(РеквизитПутьКДанным);
	
	УстановитьДоступность(РеквизитПутьКДанным);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция СуществуетПанельАдминистрированияБСП()
	Возврат Метаданные.Обработки.Найти("ПанельАдминистрированияБСП")<>Неопределено;
КонецФункции

&НаСервере
Функция СохранитьЗначениеРеквизита(РеквизитПутьКДанным)
	
	// Определение имени константы.
	КонстантаИмя = "";
	
	// Сохранение значений реквизитов, не связанных с константами напрямую (в отношении один-к-одному).
	Если РеквизитПутьКДанным = "" Тогда
		Возврат КонстантаИмя;
	КонецЕсли;
	
	Если НРег(Лев(РеквизитПутьКДанным, 14)) = НРег("НаборКонстант.") Тогда
		// Если путь к данным реквизита указан через "НаборКонстант".
		КонстантаИмя = Сред(РеквизитПутьКДанным, 15);
		
		// Сохранения значения константы.
		Если КонстантаИмя <> "" Тогда
			
			КонстантаМенеджер = Константы[КонстантаИмя];
			КонстантаЗначение = НаборКонстант[КонстантаИмя];
			
		КонецЕсли;
	Иначе
		// Определение имени и запись значения реквизита в соответствующей константе из "НаборКонстант".
		// Используется для тех реквизитов формы, которые связаны с константами напрямую (в отношении один-к-одному).
		Если Метаданные.Константы.Найти(РеквизитПутьКДанным)<>Неопределено Тогда
			КонстантаМенеджер = Константы[РеквизитПутьКДанным];
			КонстантаЗначение = ЭтаФорма[РеквизитПутьКДанным];
		КонецЕсли;
	КонецЕсли;
	
	Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
		КонстантаМенеджер.Установить(КонстантаЗначение);
	КонецЕсли;
	
	Возврат КонстантаИмя;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступность(РеквизитПутьКДанным = "")
	
	#Если Не МобильноеПриложениеСервер Тогда
	Если РеквизитПутьКДанным = "ИспользоватьРаспределеннуюФискализацию"
		ИЛИ РеквизитПутьКДанным = "" Тогда
		Если Элементы.Найти("ИспользоватьРаспределеннуюФискализацию") <> Неопределено Тогда
			Элементы.ИспользоватьРаспределеннуюФискализацию.Доступность = СистемаВзаимодействия.ИспользованиеДоступно();
		КонецЕсли;
	КонецЕсли;
	#КонецЕсли
	
	НастройкиПрограммыБПОПереопределяемый.ПанельАдминистрированияУстановкаДоступности(ЭтаФорма, РеквизитПутьКДанным);
		
	УстановитьНастройкиЗаданий();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьРазделов()
	
	Если Не ОбщегоНазначенияБПО.ИспользуетсяЧекопечатающиеУстройства() Тогда
		Элементы.ГруппаФискальныеОперации.Видимость = Ложь;
	КонецЕсли;

	Если Не ОбщегоНазначенияБПО.ИспользуетсяРаспределеннаяФискализация() Тогда
		Элементы.ГруппаОперацииОчередьЧеков.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияБПО.ИспользуетсяПлатежныеСистемы() Тогда
		Элементы.ГруппаПлатежныеОперации.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияБПО.ИспользуетсяМаркировка() Тогда
		Элементы.ГруппаОперацииПроверкиКМ.Видимость = Ложь;
	КонецЕсли;
	
	// Вызов БИП
	Если ОбщегоНазначенияБПО.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеВнешнихКомпонент") Тогда
		МодульПолучениеВнешнихКомпонент = ОбщегоНазначенияБПО.ОбщийМодуль("ПолучениеВнешнихКомпонент");
		Элементы.ГруппаВнешниеКомпоненты.Видимость = МодульПолучениеВнешнихКомпонент.ДоступнаЗагрузкаВнешнихКомпонент();
	Иначе
		Элементы.ГруппаВнешниеКомпоненты.Видимость = Ложь;
	КонецЕсли;
	// Конец Вызов БИП
	
	Если ОбщегоНазначенияБПО.ИспользуетсяОфлайнОборудование() Тогда
		Элементы.ГруппаУправлениеОфлайнОборудование.Видимость = Истина;
	Иначе
		Элементы.ГруппаУправлениеОфлайнОборудование.Видимость = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначенияБПО.ИспользуетсяПечатьЭтикетокИЦенников() Тогда
		Элементы.ГруппаПечатьЭтикетокИЦенников.Видимость = Истина;
	Иначе
		Элементы.ГруппаПечатьЭтикетокИЦенников.Видимость = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначенияБПО.ИспользуетсяСертификатыНУЦМинцифры()
		И ОбщегоНазначенияБПО.ИспользуетсяБСП() 
		И Не ОбщегоНазначенияБПО.ЭтоВебКлиент() Тогда
		МодульСертификатыНУЦМинцифры  = ОбщегоНазначенияБПО.ОбщийМодуль("СертификатыНУЦМинцифры");
		Элементы.ГруппаСертификатыНУЦМинцифры.Видимость = МодульСертификатыНУЦМинцифры.ВерсияБСПДопустимаДляУстановкиКорневыхСертификатов();
	Иначе
		Элементы.ГруппаСертификатыНУЦМинцифры.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьРасписаниеЗадания(ИмяЗадания, РасписаниеРегламентногоЗадания)
	
	// Вызов БСП
	Если ОбщегоНазначенияБПО.ПодсистемаСуществует("СтандартныеПодсистемы.РегламентныеЗадания") Тогда
		
		МодульРегламентныеЗаданияСервер = ОбщегоНазначенияБПО.ОбщийМодуль("РегламентныеЗаданияСервер");
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Метаданные", ИмяЗадания);
		РегЗадание = МодульРегламентныеЗаданияСервер.НайтиЗадания(ПараметрыОтбора)[0];

		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("Расписание", РасписаниеРегламентногоЗадания);
		МодульРегламентныеЗаданияСервер.ИзменитьЗадание(РегЗадание.УникальныйИдентификатор, ПараметрыЗадания);
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Метаданные", ИмяЗадания);
		РегЗадание = МодульРегламентныеЗаданияСервер.НайтиЗадания(ПараметрыОтбора)[0];
		
	Иначе
		#Если Не МобильноеПриложениеСервер Тогда
		РегЗаданиеМетаданные = Метаданные.РегламентныеЗадания.Найти(ИмяЗадания);
		РегЗадание = РегламентныеЗадания.НайтиПредопределенное(РегЗаданиеМетаданные);
		РегЗадание.Расписание = РасписаниеРегламентногоЗадания;
		РегЗадание.Записать();
		#КонецЕсли
	КонецЕсли;
	Элемент = Элементы[ИмяЗадания];
	УстановитьТекстНадписиРегламентнойНастройки(РегЗадание, Элемент);
	// Конец Вызов БСП
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОчиститьИсториюОперацийНаСервере(ИмяФоновогоЗадания)
	
	ИмяПроцедуры = СтрШаблон("ЛогированиеОперацийБПО.%1", ИмяФоновогоЗадания);
	
	Если ОбщегоНазначенияБПО.ИспользуетсяБСП() Тогда
		// Вызов БСП
		МодульДлительныеОперации     = ОбщегоНазначенияБПО.ОбщийМодуль("ДлительныеОперации");
		ПараметрыВыполненияПроцедуры = МодульДлительныеОперации.ПараметрыВыполненияПроцедуры();
		Возврат МодульДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполненияПроцедуры, ИмяПроцедуры);
		// Конец Вызов БСП
	Иначе
		Задание = ФоновыеЗадания.Выполнить(ИмяПроцедуры,,,ИмяФоновогоЗадания);
		Задание = Задание.ОжидатьЗавершенияВыполнения(2);
		Возврат Задание.Состояние = СостояниеФоновогоЗадания.Активно ;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьТекстНадписиРегламентнойНастройки(Задание, Элемент)
	
	Если Задание = Неопределено Тогда
		ТекстРасписания = НСтр("ru = '<Расписание очистки не задано>'");
	Иначе
		ТекстЗадания = НСтр("ru = 'Расписание'");
		
		Если Задание.Использование Тогда
			ТекстРасписания = СтрШаблон(НСтр("ru = '%1: %2'"), ТекстЗадания, Строка(Задание.Расписание));
		Иначе
			ТекстРасписания = СтрШаблон(НСтр("ru = '%1 (НЕ АКТИВНО)'"), ТекстЗадания);
		КонецЕсли;
	КонецЕсли;
	Элемент.Заголовок = ТекстРасписания;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьИспользованиеОчисткиОпераций(ИмяЗадания)
	
	СрокХранения = Неопределено;
	Если ИмяЗадания = "ОчисткаИсторииПлатежныхОпераций" Тогда
		СрокХранения = СрокХраненияПлатежныхОпераций;
	ИначеЕсли ИмяЗадания = "ОчисткаИсторииОперацийОчередиЧеков" Тогда
		СрокХранения = СрокХраненияОперацийОчередиЧеков;
	ИначеЕсли ИмяЗадания = "ОчисткаИсторииФискальныхОпераций" Тогда
		СрокХранения = СрокХраненияФискальныхОпераций
	ИначеЕсли ИмяЗадания = "ОчисткаИсторииОперацийПроверкиКМ" Тогда
		СрокХранения = СрокХраненияОперацийПроверкиКМ
	КонецЕсли;
	
	Если СрокХранения = Перечисления.ПериодХраненияИсторииПлатежныхОпераций.ВсеВремя 
		Или Не ЗначениеЗаполнено(СрокХранения) Тогда
		Использование = Ложь;
	Иначе
		Использование = Истина;
	КонецЕсли;
	
	ИзменитьИспользованиеЗадания(ИмяЗадания, Использование);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьИспользованиеЗадания(ИмяЗадания, Использование)
	
	// Вызов БСП
	Если ОбщегоНазначенияБПО.ПодсистемаСуществует("СтандартныеПодсистемы.РегламентныеЗадания") Тогда
		
		МодульРегламентныеЗаданияСервер = ОбщегоНазначенияБПО.ОбщийМодуль("РегламентныеЗаданияСервер");
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Метаданные", ИмяЗадания);
		РегЗадание = МодульРегламентныеЗаданияСервер.НайтиЗадания(ПараметрыОтбора)[0];

		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("Использование", Истина И Использование);
		МодульРегламентныеЗаданияСервер.ИзменитьЗадание(РегЗадание.УникальныйИдентификатор, ПараметрыЗадания);
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Метаданные", ИмяЗадания);
		РегЗадание = МодульРегламентныеЗаданияСервер.НайтиЗадания(ПараметрыОтбора)[0];
		
	Иначе
		#Если Не МобильноеПриложениеСервер Тогда
		РегЗаданиеМетаданные = Метаданные.РегламентныеЗадания.Найти(ИмяЗадания);
		РегЗадание = РегламентныеЗадания.НайтиПредопределенное(РегЗаданиеМетаданные);
		РегЗадание.Использование = Использование;
		РегЗадание.Записать();
		#КонецЕсли
	КонецЕсли;
	// Конец Вызов БСП
	
	Элемент = Элементы[ИмяЗадания];
	Элемент.Доступность = РегЗадание.Использование;
	УстановитьТекстНадписиРегламентнойНастройки(РегЗадание, Элемент);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияРеквизитов()
	
	УстановитьПривилегированныйРежим(Истина);
	Если ОбщегоНазначенияБПО.ИспользуетсяРаспределеннаяФискализация() Тогда
		МодульРаспределеннаяФискализация = ОбщегоНазначенияБПО.ОбщийМодуль("РаспределеннаяФискализация");
		СрокХраненияОперацийОчередиЧеков = МодульРаспределеннаяФискализация.ПериодХраненияИсторииОперацийОчередиЧеков();
		Если Не ЗначениеЗаполнено(СрокХраненияОперацийОчередиЧеков) Тогда
			СрокХраненияОперацийОчередиЧеков = Перечисления.ПериодХраненияИсторииПлатежныхОпераций.ВсеВремя;
			МодульРаспределеннаяФискализация.УстановитьСрокХраненияОперацийОчередиЧеков();
		КонецЕсли; 
	КонецЕсли;
	Если ОбщегоНазначенияБПО.ИспользуетсяМаркировка() Тогда
		МодульМенеджерОборудованияМаркировка = ОбщегоНазначенияБПО.ОбщийМодуль("МенеджерОборудованияМаркировка");
		СрокХраненияОперацийПроверкиКМ = МодульМенеджерОборудованияМаркировка.ПериодХраненияИсторииОперацийПроверкиКМ();
		Если Не ЗначениеЗаполнено(СрокХраненияОперацийПроверкиКМ) Тогда
			СрокХраненияОперацийПроверкиКМ = Перечисления.ПериодХраненияИсторииПлатежныхОпераций.ВсеВремя;
			МодульМенеджерОборудованияМаркировка.УстановитьСрокХраненияОперацийПроверкиКМ();
		КонецЕсли; 
		ХранитьУспешныеОперацииРазрешения = МодульМенеджерОборудованияМаркировка.ХранитьУспешныеОперацииРазрешения(); 
	КонецЕсли;
	Если ОбщегоНазначенияБПО.ИспользуетсяПлатежныеСистемы() Тогда
		МодульОборудованиеПлатежныеСистемы = ОбщегоНазначенияБПО.ОбщийМодуль("ОборудованиеПлатежныеСистемы");
		СрокХраненияПлатежныхОпераций = МодульОборудованиеПлатежныеСистемы.ПериодХраненияИсторииПлатежныхОпераций();
		Если Не ЗначениеЗаполнено(СрокХраненияПлатежныхОпераций) Тогда
			СрокХраненияПлатежныхОпераций = Перечисления.ПериодХраненияИсторииПлатежныхОпераций.ВсеВремя;
			МодульОборудованиеПлатежныеСистемы.УстановитьСрокХраненияОпераций();
		КонецЕсли; 
	КонецЕсли;
	Если ОбщегоНазначенияБПО.ИспользуетсяЧекопечатающиеУстройства() Тогда
		МодульОборудованиеЧекопечатающиеУстройства = ОбщегоНазначенияБПО.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройства");
		СрокХраненияФискальныхОпераций = МодульОборудованиеЧекопечатающиеУстройства.ПериодХраненияИсторииФискальныхОпераций();
		Если Не ЗначениеЗаполнено(СрокХраненияФискальныхОпераций) Тогда
			СрокХраненияФискальныхОпераций = Перечисления.ПериодХраненияИсторииПлатежныхОпераций.ВсеВремя;
			МодульОборудованиеЧекопечатающиеУстройства.УстановитьСрокХраненияФискальныхОпераций();
		КонецЕсли; 
	КонецЕсли;
	ИспользуетсяПротоколRDPвБПО = МенеджерОборудования.ИспользуетсяПротоколRDP();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры


&НаСервере
Процедура УстановитьНастройкиЗаданий()
	
	УстановитьПривилегированныйРежим(Истина);
	Если ОбщегоНазначенияБПО.ИспользуетсяПлатежныеСистемы() Тогда
		УстановитьНастройкуЗадания("ОчисткаИсторииПлатежныхОпераций", РасписаниеОчисткиПлатежныхОпераций);
	КонецЕсли;
	Если ОбщегоНазначенияБПО.ИспользуетсяЧекопечатающиеУстройства() Тогда
		УстановитьНастройкуЗадания("ОчисткаИсторииФискальныхОпераций", РасписаниеОчисткиФискальныхОпераций);
		Если ОбщегоНазначенияБПО.ИспользуетсяРаспределеннаяФискализация() Тогда
			УстановитьНастройкуЗадания("ОчисткаИсторииОперацийОчередиЧеков", РасписаниеОчисткиОперацийОчередиЧеков);
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияБПО.ИспользуетсяМаркировка() Тогда
		УстановитьНастройкуЗадания("ОчисткаИсторииОперацийПроверкиКМ", РасписаниеОчисткиОперацийПроверкиКМ);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкуЗадания(ИмяЗадания, РеквизитФормыРасписание)
	
	// Вызов БСП
	Если ОбщегоНазначенияБПО.ПодсистемаСуществует("СтандартныеПодсистемы.РегламентныеЗадания") Тогда
		
		МодульРегламентныеЗаданияСервер = ОбщегоНазначенияБПО.ОбщийМодуль("РегламентныеЗаданияСервер");
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Метаданные", ИмяЗадания);
		РегЗадание = МодульРегламентныеЗаданияСервер.НайтиЗадания(ПараметрыОтбора)[0];
		
	Иначе
		#Если Не МобильноеПриложениеСервер Тогда
		РегЗаданиеМетаданные = Метаданные.РегламентныеЗадания.Найти(ИмяЗадания);
		РегЗадание = РегламентныеЗадания.НайтиПредопределенное(РегЗаданиеМетаданные);
		#КонецЕсли
	КонецЕсли;
	
	РеквизитФормыРасписание = РегЗадание.Расписание;
	
	Элемент = Элементы[ИмяЗадания];
	Элемент.Доступность = РегЗадание.Использование;
	УстановитьТекстНадписиРегламентнойНастройки(
		РегЗадание,
		Элемент);
	// Конец Вызов БСП
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция АктивностьФоновыхЗаданийНаСервере()
	Результат = Новый Структура();
	
	Отбор = Новый Структура();

	Отбор.Вставить("ИмяМетода", "МенеджерОборудования.ОчисткаИсторииПлатежныхОпераций");
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	Массив = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Результат.Вставить("ОчиститьПлатежныеОперации", Массив.Количество()>0);
	
	Отбор.Вставить("ИмяМетода", "МенеджерОборудования.ОчисткаИсторииФискальныхОпераций");
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	Массив = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Результат.Вставить("ОчиститьФискальныеОперации", Массив.Количество()>0);

	Отбор.Вставить("ИмяМетода", "МенеджерОборудования.ОчисткаИсторииОперацийОчередиЧеков");
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	Массив = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Результат.Вставить("ОчиститьОчередь", Массив.Количество()>0);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_УстановитьДоступностьКнопокОчистка()
	
	АктивностьФоновыхЗаданий = АктивностьФоновыхЗаданийНаСервере();
	Если АктивностьФоновыхЗаданий.ОчиститьОчередь Тогда
		Элементы.ОчиститьОчередь.Доступность = Ложь;
		Элементы.ОчиститьОчередь.Заголовок = НСтр("ru = 'Очищается...'");
	Иначе
		Элементы.ОчиститьОчередь.Доступность = Истина;
		Элементы.ОчиститьОчередь.Заголовок = НСтр("ru = 'Очистить'");
	КонецЕсли;
	Если АктивностьФоновыхЗаданий.ОчиститьПлатежныеОперации Тогда
		Элементы.ОчиститьПлатежныеОперации.Доступность = Ложь;
		Элементы.ОчиститьПлатежныеОперации.Заголовок = НСтр("ru = 'Очищается...'");
	Иначе
		Элементы.ОчиститьПлатежныеОперации.Доступность = Истина;
		Элементы.ОчиститьПлатежныеОперации.Заголовок = НСтр("ru = 'Очистить'");
	КонецЕсли;
	Если АктивностьФоновыхЗаданий.ОчиститьФискальныеОперации Тогда
		Элементы.ОчиститьФискальныеОперации.Доступность = Ложь;
		Элементы.ОчиститьФискальныеОперации.Заголовок = НСтр("ru = 'Очищается...'");
	Иначе
		Элементы.ОчиститьФискальныеОперации.Доступность = Истина;
		Элементы.ОчиститьФискальныеОперации.Заголовок = НСтр("ru = 'Очистить'");
	КонецЕсли;
	
	
	Если АктивностьФоновыхЗаданий.ОчиститьОчередь
		Или АктивностьФоновыхЗаданий.ОчиститьПлатежныеОперации
		Или АктивностьФоновыхЗаданий.ОчиститьФискальныеОперации Тогда
		ПодключитьОбработчикОжидания("Подключаемый_УстановитьДоступностьКнопокОчистка", 2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииРасписанияОбновленияВнешнихКомпонент(Расписание, ДополнительныеПараметры) Экспорт
	
	Если Расписание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПериодПовтораВТечениеДня = Расписание.ПериодПовтораВТечениеДня;
	Если ПериодПовтораВТечениеДня > 0
		И ПериодПовтораВТечениеДня < 300 Тогда
		ПоказатьПредупреждение(,
			НСтр("ru = 'Интервал обновления не может быть задан чаще, чем один раз 5 минут.'"));
		Возврат;
	КонецЕсли;
	
	// Вызов БИП
	МодульИнтернетПоддержкаПользователейКлиентСервер = ОбщегоНазначенияБПОКлиент.ОбщийМодуль("ИнтернетПоддержкаПользователейКлиентСервер");
	Элементы.ДекорацияРасписаниеОбновленияВнешнихКомпонент.Заголовок =
		МодульИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеРасписания(Расписание);
		
	Если Не ОбщегоНазначенияБПОКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеВнешнихКомпонент") Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиОбновления = Новый Структура;
	НастройкиОбновления.Вставить(
		"Расписание",
		Расписание);
	МодульПолучениеВнешнихКомпонентКлиент = ОбщегоНазначенияБПОКлиент.ОбщийМодуль(
		"ПолучениеВнешнихКомпонентКлиент");
	МодульПолучениеВнешнихКомпонентКлиент.ИзменитьНастройкиОбновленияВнешнихКомпонент(
		НастройкиОбновления);
	// Конец Вызов БСП
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлВнешнихКомпонентПослеВыбораФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ФайлВнешнихКомпонент = ВыбранныеФайлы[0];
	ПриИзмененииРеквизитаСервер(Элементы.ФайлВнешнихКомпонент.Имя);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодключениеСистемыВзаимодействия()
	Если ОбщегоНазначенияБПО.ИспользуетсяРаспределеннаяФискализация() Тогда
		МодульРаспределеннаяФискализация = ОбщегоНазначенияБПО.ОбщийМодуль("РаспределеннаяФискализация");
		Возврат МодульРаспределеннаяФискализация.ПодключениеСистемыВзаимодействия();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

#КонецОбласти
