
#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьСчетчики();	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка) 

	Параметры.Свойство("УчетнаяЗаписьМаркетплейса", УчетнаяЗапись);
	 
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	ЗаполнитьДанныеПоТорговойПлощадке();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ЯндексМаркет_НастройкиОбменаДанными" И Параметр = УчетнаяЗапись Тогда
		ЗаполнитьДанныеПоТорговойПлощадке();
	ИначеЕсли ИмяСобытия = "Запись_НаборКонстант"
				И (Источник = "ИспользованиеСоглашенийСКлиентами"
					Или Источник = "ИспользоватьКомиссиюПриПродажах"
					Или Источник = "ИспользоватьЗаказыКлиентов"    
					Или Источник = "ИспользоватьНесколькоСкладов"
					Или Источник = "ИспользоватьЗаказыНаПеремещение"
					Или Источник = "ИспользоватьОтгрузкуБезПереходаПраваСобственности"
					Или Источник = "ИспользоватьАктыРасхожденийПослеОтгрузки"
					Или Источник = "ИспользоватьАктыРасхожденийПослеПеремещения"
					Или Источник = "ИспользоватьПеремещениеТоваров"
					Или Источник = "ИспользоватьЗаявкиНаВозвратТоваровОтКлиентов") Тогда
		ОчиститьСообщения();
		ЗаполнитьДанныеПоТорговойПлощадке();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура УчетнаяЗаписьПриИзменении(Элемент)

	ОчиститьСообщения();

	ЗаполнитьДанныеПоТорговойПлощадке();

	ОбновитьСчетчики();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область УправлениеОсновнымиНастройками

&НаКлиенте
Процедура ОткрытьНастройкиОбменаДанными(Команда)

	ОчиститьСообщения();
	
	ПараметрыФормы = Новый Структура("УчетнаяЗаписьМаркетплейса", УчетнаяЗапись);
	ОткрытьФорму("Обработка.ПанельАдминистрированияПродажиЯндексМаркет.Форма.НастройкиОбменаДанными", 
		ПараметрыФормы,
		,
		ИдентификаторУчетнойЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПубликациюТоваровНаТорговойПлощадке(Команда)

	ОчиститьСообщения();		

	ПараметрыФормы = Новый Структура("УчетнаяЗаписьМаркетплейса", УчетнаяЗапись);
	ОткрытьФорму("Обработка.УправлениеПродажамиНаЯндексМаркет.Форма.ВыгрузкаТоварногоКаталога", 
		ПараметрыФормы,
		,
		ИдентификаторУчетнойЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПрайсЛист(Команда)

	ОчиститьСообщения();

	ВидыЦенУчетныхЗаписейЯндексМаркет = ВидыЦенУчетныхЗаписейЯндексМаркет();
	Если ВидыЦенУчетныхЗаписейЯндексМаркет.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'В настройках синхронизации с Яндекс Маркет не указаны выгружаемые виды цен, а также не созданы виды цен для загрузки данных из Яндекс Маркет.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	ПараметрыФормы = Новый Структура("ВидыЦен", ВидыЦенУчетныхЗаписейЯндексМаркет);
	ОткрытьФорму("Обработка.ПрайсЛист.Форма.Форма", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКомандыФормы(Команда)

	ОчиститьСообщения();

	ЗаполнитьДанныеПоТорговойПлощадке();

	ОбновитьСчетчики();

КонецПроцедуры

#КонецОбласти

#Область РазделПоставки

&НаКлиенте
Процедура ОткрытьДокументыПоставок(Команда)
	
	КонстантыСервиса                 = ИнтеграцияСЯндексМаркетКлиентСервер.КонстантыСервиса();
	СпособОтраженияПродаж_Реализация = КонстантыСервиса.СпособОтраженияПродажРеализация;
	СпособОтраженияПродаж_Комиссия   = КонстантыСервиса.СпособОтраженияПродажКомиссия;
	
	ОчиститьСообщения();
	
	Если ДанныеТорговойПлощадки.СхемаРаботы = ПредопределенноеЗначение("Перечисление.СхемыРаботыТорговыхПлощадок.FBO") Тогда
		Если ДанныеТорговойПлощадки.СпособОтраженияПродаж = СпособОтраженияПродаж_Реализация Тогда
			ИмяОткрываемойФормы = "Обработка.ЖурналДокументовВнутреннегоТовародвижения.Форма.СписокДокументов";
		ИначеЕсли ДанныеТорговойПлощадки.СпособОтраженияПродаж = СпособОтраженияПродаж_Комиссия Тогда
			ИмяОткрываемойФормы = "Обработка.ЖурналДокументовПродажи.Форма.СписокДокументов";
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуСДополнениемПараметров(ИмяОткрываемойФормы, "РаботаСПоставкамиМП");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументыПоставокЗаявкиНаПоставку(Команда)

	ОчиститьСообщения();

	ИмяОткрываемойФормы = "Документ.ЗаказКлиента.Форма.ФормаСпискаДокументов";
	ОткрытьФормуСДополнениемПараметров(ИмяОткрываемойФормы, "РаботаСПоставкамиМП",
		"РаботаСПоставкамиМП" + ДанныеТорговойПлощадки.ИдентификаторКлиента);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументыПоставокЗаявкиНаПоставкуКОформлению(Команда)

	ОчиститьСообщения();

	ИмяОткрываемойФормы = "Обработка.ЖурналДокументовПродажи.Форма.КОформлениюНакладных";
	ОткрытьФормуСДополнениемПараметров(ИмяОткрываемойФормы, "РаботаСПоставкамиМП",
		"РаботаСПоставкамиМП" + ДанныеТорговойПлощадки.ИдентификаторКлиента);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументыПоставокАктыРасхождений(Команда)

	ОчиститьСообщения();

	ИмяОткрываемойФормы = "Документ.АктОРасхожденияхПослеОтгрузки.Форма.ФормаСписка";
	ОткрытьФормуСДополнениемПараметров(ИмяОткрываемойФормы, "РаботаСПоставкамиМП",
		"РаботаСПоставкамиМП" + ДанныеТорговойПлощадки.ИдентификаторКлиента);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументыПоставокАктыРасхожденийРеализацияFBY(Команда)

	ОчиститьСообщения();

	ИмяОткрываемойФормы = "Документ.АктОРасхожденияхПослеПеремещения.Форма.ФормаСписка";
	ОткрытьФормуСДополнениемПараметров(ИмяОткрываемойФормы, "РаботаСПоставкамиМП",
		"РаботаСПоставкамиМП" + ДанныеТорговойПлощадки.ИдентификаторКлиента);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументыПоставокЗаявкиНаВозврат(Команда)

	ОчиститьСообщения();

	ИмяОткрываемойФормы = "Документ.ЗаявкаНаВозвратТоваровОтКлиента.Форма.ФормаСпискаДокументов";
	ОткрытьФормуСДополнениемПараметров(ИмяОткрываемойФормы, "РаботаСПоставкамиМП",
		"РаботаСПоставкамиМП" + ДанныеТорговойПлощадки.ИдентификаторКлиента);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументыПоставокЗаявкиНаВозвратКОформлению(Команда)

	ОчиститьСообщения();

	ИмяОткрываемойФормы = "Обработка.ЖурналДокументовПродажи.Форма.КОформлениюНакладныхВозвратов";
	ОткрытьФормуСДополнениемПараметров(ИмяОткрываемойФормы, "РаботаСПоставкамиМП",
		"РаботаСПоставкамиМП" + ДанныеТорговойПлощадки.ИдентификаторКлиента);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументыПоставокЗаказыНаПеремещение(Команда)

	ОчиститьСообщения();

	ИмяОткрываемойФормы = "Документ.ЗаказНаПеремещение.Форма.ФормаСписка";
	ОткрытьФормуСДополнениемПараметров(ИмяОткрываемойФормы, "РаботаСПоставкамиМП",
		"РаботаСПоставкамиМП" + ДанныеТорговойПлощадки.ИдентификаторКлиента);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументыПоставокЗаявкиНаПеремещениеКОформлению(Команда)

	ОчиститьСообщения();
	
	ИмяОткрываемойФормы = "Обработка.ЖурналДокументовВнутреннегоТовародвижения.Форма.СписокДокументовКОформлению";
	ОткрытьФормуСДополнениемПараметров(ИмяОткрываемойФормы, "РаботаСПоставкамиМП",
		"РаботаСПоставкамиМП" + ДанныеТорговойПлощадки.ИдентификаторКлиента);

КонецПроцедуры

#КонецОбласти

#Область РазделПродажи

&НаКлиенте
Процедура ОткрытьДокументыПродаж(Команда)

	ОчиститьСообщения();

	ИмяОткрываемойФормы = "Обработка.ЖурналДокументовПродажи.Форма.СписокДокументов";
	ОткрытьФормуСДополнениемПараметров(ИмяОткрываемойФормы, "РаботаСПродажамиМП");

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументыПродажСоСкладовТорговойПлощадкиЗаказы(Команда)

	ОчиститьСообщения();

	ИмяОткрываемойФормы = "Документ.ЗаказКлиента.Форма.ФормаСпискаДокументов";
	ОткрытьФормуСДополнениемПараметров(ИмяОткрываемойФормы, "РаботаСПродажамиМП",
		"РаботаСПродажамиМП" + ДанныеТорговойПлощадки.ИдентификаторКлиента);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументыПродажССобственныхСкладовКОформлению(Команда)

	ОчиститьСообщения();

	ИмяОткрываемойФормы = "Обработка.ЖурналДокументовПродажи.Форма.КОформлениюНакладных";
	ОткрытьФормуСДополнениемПараметров(ИмяОткрываемойФормы, "РаботаСПродажамиМП",
		"РаботаСПродажамиМП" + ДанныеТорговойПлощадки.ИдентификаторКлиента);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументыПродажЗаявкиНаВозврат(Команда)

	ОчиститьСообщения();

	ИмяОткрываемойФормы = "Документ.ЗаявкаНаВозвратТоваровОтКлиента.Форма.ФормаСпискаДокументов";
	ОткрытьФормуСДополнениемПараметров(ИмяОткрываемойФормы, "РаботаСПродажамиМП",
		"РаботаСПродажамиМП" + ДанныеТорговойПлощадки.ИдентификаторКлиента);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументыПродажЗаявкиНаВозвратКОформлению(Команда)

	ОчиститьСообщения();

	ИмяОткрываемойФормы = "Обработка.ЖурналДокументовПродажи.Форма.КОформлениюНакладныхВозвратов";
	ОткрытьФормуСДополнениемПараметров(ИмяОткрываемойФормы, "РаботаСПродажамиМП",
		"РаботаСПродажамиМП" + ДанныеТорговойПлощадки.ИдентификаторКлиента);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументыПродажКОформлениюОтчетов(Команда)

	ОчиститьСообщения();

	ИмяОткрываемойФормы = "Обработка.ЖурналДокументовОтчетыКомиссионеров.Форма.КОформлениюОтчетовКомиссионеров";
	ОткрытьФормуСДополнениемПараметров(ИмяОткрываемойФормы, "РаботаСПродажамиМП",
		"РаботаСПродажамиМП" + ДанныеТорговойПлощадки.ИдентификаторКлиента);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОтчетыОРеализациях(Команда)

	ОчиститьСообщения();
	
	ПараметрыФормы = ИнтеграцияСМаркетплейсамиКлиент.ПараметрыФормыВыгрузкиЗагрузки(УчетнаяЗапись);
	
	ПараметрыФормы.ЗаголовокФормы       = НСтр("ru = 'Загрузка отчета о реализованных товарах'");
	ПараметрыФормы.ИмяОбъектаМетаданных = "Обработка.УправлениеПродажамиНаЯндексМаркет";
	ПараметрыФормы.ИмяТабличнойЧасти    = "ДанныеОРеализованныхТоварах";
	ПараметрыФормы.ИмяМакетаСШаблоном   = "";
	
	ЛистыШаблона = Новый Структура;
	ЛистыШаблона.Вставить("Товары__переданные_в_доставку", Новый Структура("ИмяЛиста, ИмяМакетаСШаблоном, Служебный", 
																"Товары, переданные в доставку", "ПФ_MXL_ТоварыПереданныеВДоставку", 1));
	ЛистыШаблона.Вставить("Доставленные_товары",           Новый Структура("ИмяЛиста, ИмяМакетаСШаблоном, Служебный", 
																"Доставленные товары", "ПФ_MXL_ДоставленныеТовары", 2));
	ЛистыШаблона.Вставить("Невыкупленные_товары",          Новый Структура("ИмяЛиста, ИмяМакетаСШаблоном, Служебный", 
																"Невыкупленные товары", "ПФ_MXL_НевыкупленныеТовары", 3));
	ЛистыШаблона.Вставить("Возвращенные_товары",           Новый Структура("ИмяЛиста, ИмяМакетаСШаблоном, Служебный", 
																"Возвращенные товары", "ПФ_MXL_ВозвращенныеТовары", 4));
	ПараметрыФормы.ЛистыШаблона = ЛистыШаблона;
	
	ПараметрыФормы.ЭтоЗагрузкаДанных            = Истина;
	ПараметрыФормы.ВариантВыгрузкиЗагрузки      = "ВнешнийФайл";
	ПараметрыФормы.ДоступныИнтеграционныеМетоды = Истина;
	ПараметрыФормы.ЗагружатьНезаполненныеСтроки = Истина;

	Подсказка = Символ(-1) + НСтр("ru = '1. В <a href=""https://partner.market.yandex.ru/"">личном кабинете Яндекс Маркет</a> перейдите в раздел ""Бухгалтерия"" (""Финансы""), подраздел ""Финансовые отчеты"".
							|	2. Активизируйте страницу ""По реализации"".
							|	3. Укажите название магазина и период, за который необходимо загрузить отчет.
							|	4. Сохраните полученный файл.'");
	ПараметрыФормы.ПодсказкаВариантаЗагрузкиИзМакета          = Подсказка;
	ПараметрыФормы.ПодсказкаВариантаВыгрузкиЗагрузкиЧерезФайл = Подсказка;
	
	ПараметрыФормы.ПояснениеВариантаВыгрузкиЗагрузкиЧерезAPI = НСтр("ru = 'Данные для загрузки могут отсутствовать, если выбран период, за который еще не сформирован отчетный документ, или торговая площадка не возвращает данные из-за изменений в интеграционных методах.'");
	
	ПараметрыФормы.ВидПериода   = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц"); 
	ПараметрыФормы.ДатаВПериоде = ДобавитьМесяц(ОбщегоНазначенияКлиент.ДатаСеанса(), -1);
	
	ПараметрыФормы.ИмяФормыДополнительныхНастроек = "Обработка.УправлениеПродажамиНаЯндексМаркет.Форма.ДополнительныеНастройкиВыгрузкиЗагрузкиДанных";
	ПараметрыФормы.ПараметрыФормыДополнительныхНастроек.УчетнаяЗапись   = УчетнаяЗапись;
	ПараметрыФормы.ПараметрыФормыДополнительныхНастроек.ЗаголовокФормы  = НСтр("ru = 'Отражение данных о реализованных товарах'");
	ПараметрыФормы.ПараметрыФормыДополнительныхНастроек.ВариантНастроек = "ДанныеОРеализованныхТоварах";
	
	ПараметрыФормы.ИмяФормыПослеЗагрузкиДанных               = "Обработка.УправлениеПродажамиНаЯндексМаркет.Форма.СводныйОтчетОЗагруженныхДанных";
	ПараметрыФормы.ПодсказкаОткрытияФормыПослеЗагрузкиДанных = НСтр("ru = 'Отчет о загрузке данных'");

	ПараметрыФормы.ДополнительныеПараметрыФормы = Новый Структура;
	ПараметрыФормы.ДополнительныеПараметрыФормы.Вставить("ЗначенияПараметровСсылкиНаОбъект", ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ДанныеТорговойПлощадки));
	
	ИнтеграцияСМаркетплейсамиКлиент.ОткрытьФормуВыгрузкиЗагрузкиДанных(ПараметрыФормы, Строка(ДанныеТорговойПлощадки.УникальныйИдентификатор) + "_ДанныеОРеализованныхТоварах");

КонецПроцедуры

#КонецОбласти

#Область РазделВзаиморасчеты

&НаКлиенте
Процедура ОткрытьДокументыПриобретенияУслуг(Команда)

	ОчиститьСообщения();

	ИмяОткрываемойФормы = "Документ.ПриобретениеУслугПрочихАктивов.ФормаСписка";
	ОткрытьФормуСДополнениемПараметров(ИмяОткрываемойФормы, "ВзаиморасчетыМП",
		"ВзаиморасчетыМП" + ДанныеТорговойПлощадки.ИдентификаторКлиента);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументыВзаимозачетаЗадолженности(Команда)

	ОчиститьСообщения();

	ИмяОткрываемойФормы = "Документ.ВзаимозачетЗадолженности.ФормаСписка";
	ОткрытьФормуСДополнениемПараметров(ИмяОткрываемойФормы, "ВзаиморасчетыМП",
		"ВзаиморасчетыМП" + ДанныеТорговойПлощадки.ИдентификаторКлиента);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументыПлатежей(Команда)

	ОчиститьСообщения();

	ИмяОткрываемойФормы = "Обработка.ЖурналДокументовБезналичныеПлатежи.Форма.ФормаСписка";
	ОткрытьФормуСДополнениемПараметров(ИмяОткрываемойФормы, "ВзаиморасчетыМП",
		"ВзаиморасчетыМП" + ДанныеТорговойПлощадки.ИдентификаторКлиента);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументыСверкиВзаиморасчетов(Команда)

	ОчиститьСообщения();
	ИмяОткрываемойФормы = "Документ.СверкаВзаиморасчетов2_5_11.ФормаСписка";
	ОткрытьФормуСДополнениемПараметров(ИмяОткрываемойФормы, "ВзаиморасчетыЯндексМаркет",
		"ВзаиморасчетыЯндексМаркет" + ДанныеТорговойПлощадки.ИдентификаторКлиента);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПолучитьЗначенияФункциональныхОпций()

	ЗначенияФункциональныхОпций = Новый Структура;
	ЗначенияФункциональныхОпций.Вставить("ИспользоватьЗаказыКлиентов",
		ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов"));
	ЗначенияФункциональныхОпций.Вставить("ИспользоватьЗаявкиНаВозвратТоваровОтКлиентов",
		ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаВозвратТоваровОтКлиентов"));
	ЗначенияФункциональныхОпций.Вставить("ИспользоватьКомиссиюПриПродажах",
		ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриПродажах"));
	ЗначенияФункциональныхОпций.Вставить("ИспользоватьСоглашенияСКлиентами",
		ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами"));
	ЗначенияФункциональныхОпций.Вставить("ИспользоватьНесколькоСкладов",
		ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов"));   
	ЗначенияФункциональныхОпций.Вставить("ИспользоватьЗаказыНаПеремещение",
		ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыНаПеремещение"));
	ЗначенияФункциональныхОпций.Вставить("ИспользоватьОтгрузкуБезПереходаПраваСобственности",
		ПолучитьФункциональнуюОпцию("ИспользоватьОтгрузкуБезПереходаПраваСобственности"));
	ЗначенияФункциональныхОпций.Вставить("ИспользоватьАктыРасхожденийПослеОтгрузки",
		ПолучитьФункциональнуюОпцию("ИспользоватьАктыРасхожденийПослеОтгрузки"));
	ЗначенияФункциональныхОпций.Вставить("ИспользоватьАктыРасхожденийПослеПеремещения",
		ПолучитьФункциональнуюОпцию("ИспользоватьАктыРасхожденийПослеПеремещения"));
	ЗначенияФункциональныхОпций.Вставить("ИспользоватьПеремещениеТоваров",
		ПолучитьФункциональнуюОпцию("ИспользоватьПеремещениеТоваров"));
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоТорговойПлощадке()

	ИдентификаторУчетнойЗаписи = СтрЗаменить(УчетнаяЗапись.УникальныйИдентификатор(), "-", "_");

	ПолучитьЗначенияФункциональныхОпций();
 
	УстановитьПривилегированныйРежим(Истина);
	РеквизитыУчетнойЗаписи = ИнтеграцияСЯндексМаркетСервер.ДанныеУчетнойЗаписиЯндексМаркет(УчетнаяЗапись);
	УстановитьПривилегированныйРежим(Ложь);

	ДанныеТорговойПлощадки = НовыйДанныеТорговойПлощадки();
	ЗаполнитьЗначенияСвойств(ДанныеТорговойПлощадки, РеквизитыУчетнойЗаписи);
	ДанныеТорговойПлощадки.СпособОтраженияПродаж    = РеквизитыУчетнойЗаписи.СпособОтраженияПродаж;
	ДанныеТорговойПлощадки.СкладОтгрузки            = РеквизитыУчетнойЗаписи.СкладОтгрузки;
	ДанныеТорговойПлощадки.ДоговорВзаимозачеты      = РеквизитыУчетнойЗаписи.ДоговорВзаимозачеты;
	ДанныеТорговойПлощадки.РозничныйПартнер         = РеквизитыУчетнойЗаписи.РозничныйПартнер;
	ДанныеТорговойПлощадки.РозничныйКонтрагент      = РеквизитыУчетнойЗаписи.РозничныйКонтрагент;
	ДанныеТорговойПлощадки.СоглашениеРеализация     = РеквизитыУчетнойЗаписи.СоглашениеРеализация;
	ДанныеТорговойПлощадки.ДоговорРеализация        = РеквизитыУчетнойЗаписи.ДоговорРеализация;
	ДанныеТорговойПлощадки.ПостфиксЗаголовкаФормы   = Строка(РеквизитыУчетнойЗаписи.ИдентификаторКлиента);
	ДанныеТорговойПлощадки.УникальныйИдентификатор  = УчетнаяЗапись.УникальныйИдентификатор();

	Заголовок = НСтр("ru = 'Управление продажами на Яндекс Маркет'");
	Если Не УчетнаяЗапись.Пустая() Тогда
		Заголовок = Заголовок + " - " + УчетнаяЗапись;
	КонецЕсли;

	УстановитьВидимостьДоступностьЭлементов();
	УстановитьУсловноеОформление();

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НовыйДанныеТорговойПлощадки()

	ДанныеТорговойПлощадки = Новый Структура;
	ДанныеТорговойПлощадки.Вставить("ВидМаркетплейса",                           ПредопределенноеЗначение("Перечисление.ВидыМаркетплейсов.МаркетплейсЯндексМаркет"));
	ДанныеТорговойПлощадки.Вставить("ИдентификаторКлиента",                      "");
	ДанныеТорговойПлощадки.Вставить("Организация",                               ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
	ДанныеТорговойПлощадки.Вставить("СхемаРаботы",                               ПредопределенноеЗначение("Перечисление.СхемыРаботыТорговыхПлощадок.ПустаяСсылка"));
	ДанныеТорговойПлощадки.Вставить("Партнер",                                   ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка"));
	ДанныеТорговойПлощадки.Вставить("Контрагент",                                ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"));
	ДанныеТорговойПлощадки.Вставить("Соглашение",                                ПредопределенноеЗначение("Справочник.СоглашенияСКлиентами.ПустаяСсылка"));  // СоглашениеКомиссия
	ДанныеТорговойПлощадки.Вставить("ДоговорПродажиЧерезСкладыТорговойПлощадки", ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка"));  // ДоговорКомиссия
	ДанныеТорговойПлощадки.Вставить("ДоговорПродажиЧерезСкладыСобственные",      ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка"));
	ДанныеТорговойПлощадки.Вставить("СоглашениеКомиссия",                        ПредопределенноеЗначение("Справочник.СоглашенияСКлиентами.ПустаяСсылка"));
	ДанныеТорговойПлощадки.Вставить("ДоговорКомиссия",                           ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка"));
	ДанныеТорговойПлощадки.Вставить("ПостфиксЗаголовкаФормы",                    "");
	ДанныеТорговойПлощадки.Вставить("УникальныйИдентификатор",                   Неопределено);
	ДанныеТорговойПлощадки.Вставить("Представление",                             "");
	ДанныеТорговойПлощадки.Вставить("СпособОтраженияПродаж",                     0);
	ДанныеТорговойПлощадки.Вставить("СкладОтгрузки",                             ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка"));
	ДанныеТорговойПлощадки.Вставить("ДоговорВзаимозачеты",                       ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка"));
	ДанныеТорговойПлощадки.Вставить("РозничныйПартнер",                          ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка"));
	ДанныеТорговойПлощадки.Вставить("РозничныйКонтрагент",                       ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"));
	ДанныеТорговойПлощадки.Вставить("СоглашениеРеализация",                      ПредопределенноеЗначение("Справочник.СоглашенияСКлиентами.ПустаяСсылка")); 
	ДанныеТорговойПлощадки.Вставить("ДоговорРеализация",                         ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка"));
	ДанныеТорговойПлощадки.Вставить("ДополнительныеНастройки",                   Новый Структура);
	
	Возврат ДанныеТорговойПлощадки;

КонецФункции

&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементов()

	ДоступноИспользованиеПрайсЛиста                    = ПравоДоступа("Использование", Метаданные.Обработки.ПрайсЛист);
	ДоступноИспользованиеЖурналаВнутрТовародвижения    = ПравоДоступа("Использование", Метаданные.Обработки.ЖурналДокументовВнутреннегоТовародвижения);
	ДоступноИспользованиеЖурналаПродаж                 = ПравоДоступа("Использование", Метаданные.Обработки.ЖурналДокументовПродажи);
	ДоступноИспользованиеОтчетовКомиссионера           = ПравоДоступа("Использование", Метаданные.Обработки.ЖурналДокументовОтчетыКомиссионеров);
	ДоступенПросмотрАктовОРасхожденияхПослеОтгрузки    = ПравоДоступа("Просмотр", Метаданные.Документы.АктОРасхожденияхПослеОтгрузки);  
	ДоступенПросмотрАктовОРасхожденияхПослеПеремещения = ПравоДоступа("Просмотр", Метаданные.Документы.АктОРасхожденияхПослеПеремещения);
	ДоступенПросмотрЗаказовКлиента                     = ПравоДоступа("Просмотр", Метаданные.Документы.ЗаказКлиента);
	ДоступенПросмотрЗаказовНаПеремещение               = ПравоДоступа("Просмотр", Метаданные.Документы.ЗаказНаПеремещение);   
	ДоступенПросмотрЗаявокНаВозврат                    = ПравоДоступа("Просмотр", Метаданные.Документы.ЗаявкаНаВозвратТоваровОтКлиента);

	ДоступноИспользованиеБезналичныхПлатежей           = ПравоДоступа("Использование", Метаданные.Обработки.ЖурналДокументовБезналичныеПлатежи);
	ДоступенПросмотрПриобретенияУслуг                  = ПравоДоступа("Просмотр", Метаданные.Документы.ПриобретениеУслугПрочихАктивов);
	ДоступенПросмотрВзаимозачета                       = ПравоДоступа("Просмотр", Метаданные.Документы.ВзаимозачетЗадолженности);
	ДоступенПросмотрСверокВзаиморасчетов              = ПравоДоступа("Просмотр", Метаданные.Документы.СверкаВзаиморасчетов2_5_11);

	ДоступноОформлениеЗаказовКлиентов                       = ЗначенияФункциональныхОпций.ИспользоватьЗаказыКлиентов;
	ДоступноОформлениеЗаявокНаВозврат                       = ЗначенияФункциональныхОпций.ИспользоватьЗаявкиНаВозвратТоваровОтКлиентов;  
	ДоступноОформлениеЗаказовНаПеремещение                  = ЗначенияФункциональныхОпций.ИспользоватьЗаказыНаПеремещение;
	ДоступноОформлениеОтгрузкиБезПереходаПраваСобственности = ЗначенияФункциональныхОпций.ИспользоватьОтгрузкуБезПереходаПраваСобственности;
	ДоступноОформлениеАктовРасхожденийПослеОтгрузки         = ЗначенияФункциональныхОпций.ИспользоватьАктыРасхожденийПослеОтгрузки;
	ДоступноОформлениеАктовРасхожденийПослеПеремещения      = ЗначенияФункциональныхОпций.ИспользоватьАктыРасхожденийПослеПеремещения;
	ДоступноОформлениеДокументовКомиссии                    = ЗначенияФункциональныхОпций.ИспользоватьКомиссиюПриПродажах;

	Элементы.ОткрытьПрайсЛист.Доступность = ДоступноИспользованиеПрайсЛиста;  
	
	СхемаРаботы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗапись,"СхемаРаботы");
	
	Если СхемаРаботы = Перечисления.СхемыРаботыТорговыхПлощадок.FBS
			Или СхемаРаботы = Перечисления.СхемыРаботыТорговыхПлощадок.Express
			Или СхемаРаботы = Перечисления.СхемыРаботыТорговыхПлощадок.DBS Тогда 
		Элементы.ГруппаПоставки.Видимость             = Ложь;   
		Элементы.ГруппаПродажи.Видимость              = Истина;
		Элементы.ГруппаПродажиFBS.Видимость           = Истина; 
		Элементы.ГруппаПродажиРеализацияFBY.Видимость = Ложь;
		Элементы.ГруппаПродажиКомиссияFBY.Видимость   = Ложь;
		Элементы.ГруппаВзаиморасчеты.Видимость        = Истина;
		
		Элементы.ОткрытьДокументыПродаж.Доступность                                 = ДоступноИспользованиеЖурналаПродаж;
		Элементы.ОткрытьДокументыПродажСоСкладовТорговойПлощадкиЗаказы1.Доступность = ДоступенПросмотрЗаказовКлиента 
																						И ДоступноОформлениеЗаказовКлиентов;
		Элементы.ОткрытьДокументыПродажССобственныхСкладовКОформлению2.Доступность  = ДоступенПросмотрЗаказовКлиента 
																						И ДоступноИспользованиеЖурналаПродаж;
		Элементы.ОткрытьДокументыПродажЗаявкиНаВозврат2.Доступность                 = ДоступенПросмотрЗаявокНаВозврат 
																						И ДоступноОформлениеЗаявокНаВозврат;
		Элементы.ОткрытьДокументыПродажЗаявкиНаВозвратКОформлению2.Доступность      = ДоступенПросмотрЗаявокНаВозврат 
																						И ДоступноИспользованиеЖурналаПродаж;
		
	ИначеЕсли СхемаРаботы = Перечисления.СхемыРаботыТорговыхПлощадок.FBO Тогда  
		СпособыОтраженияПродаж           = ИнтеграцияСЯндексМаркетКлиентСервер.КонстантыСервиса();
		СпособОтраженияПродаж_Реализация = СпособыОтраженияПродаж["СпособОтраженияПродажРеализация"];
		СпособОтраженияПродаж_Комиссия   = СпособыОтраженияПродаж["СпособОтраженияПродажКомиссия"];
		
		Элементы.ГруппаПоставки.Видимость      = Истина;   
		Элементы.ГруппаПродажи.Видимость       = Истина;
		Элементы.ГруппаПродажиFBS.Видимость    = Ложь; 
		Элементы.ГруппаВзаиморасчеты.Видимость = Истина;
		
		Если ДанныеТорговойПлощадки.СпособОтраженияПродаж = СпособОтраженияПродаж_Реализация Тогда
			Элементы.ГруппаПоставкиРеализацияFBY.Видимость = Истина; 
			Элементы.ГруппаПоставкиКомиссияFBY.Видимость   = Ложь;
			Элементы.ГруппаПродажиРеализацияFBY.Видимость  = Истина;
			Элементы.ГруппаПродажиКомиссияFBY.Видимость    = Ложь;
			
			Элементы.ОткрытьДокументыПоставок.Доступность                               = ДоступноИспользованиеЖурналаВнутрТовародвижения;
			Элементы.ОткрытьДокументыПоставокЗаказыНаПеремещение.Доступность            = ДоступенПросмотрЗаказовНаПеремещение 
																							И ДоступноОформлениеЗаказовНаПеремещение;
			Элементы.ОткрытьДокументыПоставокЗаявкиНаПеремещениеКОформлению.Доступность = ДоступенПросмотрЗаказовНаПеремещение 
																							И ДоступноИспользованиеЖурналаВнутрТовародвижения;
			Элементы.ОткрытьДокументыПоставокАктыРасхожденийРеализацияFBY.Доступность   = ДоступенПросмотрАктовОРасхожденияхПослеПеремещения
																							И ДоступноОформлениеАктовРасхожденийПослеПеремещения;
			
			Элементы.ГруппаПродажи.Доступность                                          = ДоступноОформлениеОтгрузкиБезПереходаПраваСобственности;
			Элементы.ОткрытьДокументыПродаж.Доступность                                 = ДоступноИспользованиеЖурналаПродаж;
			
		ИначеЕсли ДанныеТорговойПлощадки.СпособОтраженияПродаж = СпособОтраженияПродаж_Комиссия Тогда  
			Элементы.ГруппаПоставкиРеализацияFBY.Видимость = Ложь; 
			Элементы.ГруппаПоставкиКомиссияFBY.Видимость   = Истина;
			Элементы.ГруппаПродажиРеализацияFBY.Видимость  = Ложь;
			Элементы.ГруппаПродажиКомиссияFBY.Видимость    = Истина;
			
			Элементы.ОткрытьДокументыПоставок.Доступность                            = ДоступноИспользованиеЖурналаПродаж;
			Элементы.ОткрытьДокументыПоставокЗаявкиНаПоставку.Доступность            = ДоступенПросмотрЗаказовКлиента 
																							И ДоступноОформлениеЗаказовКлиентов;
			Элементы.ОткрытьДокументыПоставокЗаявкиНаПоставкуКОформлению.Доступность = ДоступенПросмотрЗаказовКлиента 
																							И ДоступноИспользованиеЖурналаПродаж;
			Элементы.ОткрытьДокументыПоставокАктыРасхождений.Доступность             = ДоступенПросмотрАктовОРасхожденияхПослеОтгрузки
																							И ДоступноОформлениеАктовРасхожденийПослеОтгрузки;
			Элементы.ОткрытьДокументыПоставокЗаявкиНаВозврат.Доступность             = ДоступенПросмотрЗаявокНаВозврат 
																							И ДоступноОформлениеЗаявокНаВозврат;
			Элементы.ОткрытьДокументыПоставокЗаявкиНаВозвратКОформлению.Доступность  = ДоступенПросмотрЗаявокНаВозврат 
																							И ДоступноИспользованиеЖурналаПродаж;
			
			Элементы.ГруппаПродажи.Доступность                                       = ДоступноОформлениеДокументовКомиссии;
			Элементы.ОткрытьДокументыПродаж.Доступность                              = ДоступноИспользованиеЖурналаПродаж;
			Элементы.ОткрытьДокументыПродажКОформлениюОтчетов.Доступность            = ДоступноИспользованиеОтчетовКомиссионера;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ГруппаВзаиморасчеты.Доступность                       = Не УчетнаяЗапись.Пустая();
	Элементы.ОткрытьДокументыПриобретенияУслуг.Доступность         = ДоступенПросмотрПриобретенияУслуг;
	Элементы.ОткрытьДокументыВзаимозачетаЗадолженности.Доступность = ДоступенПросмотрВзаимозачета;
	Элементы.ОткрытьДокументыОплаты.Доступность                    = ДоступноИспользованиеБезналичныхПлатежей;
	Элементы.ОткрытьДокументыСверкиВзаиморасчетов.Доступность      = ДоступенПросмотрСверокВзаиморасчетов;   

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	МассивЭлементовНеактивных = Новый Массив;
	МассивЭлементовПроверкиДоступности = Новый Массив;

	МассивЭлементовПроверкиДоступности.Добавить(Элементы.ОткрытьДокументыПоставокЗаявкиНаПоставкуКОформлению);
	МассивЭлементовПроверкиДоступности.Добавить(Элементы.ОткрытьДокументыПоставокЗаявкиНаВозвратКОформлению);
	МассивЭлементовПроверкиДоступности.Добавить(Элементы.ОткрытьДокументыПоставокЗаявкиНаПеремещениеКОформлению);
	МассивЭлементовПроверкиДоступности.Добавить(Элементы.ОткрытьДокументыПродажКОформлениюОтчетов);
	МассивЭлементовПроверкиДоступности.Добавить(Элементы.ЗагрузитьОтчетОРеализацияхРеализацияFBY);

	Для Каждого Элемент Из МассивЭлементовНеактивных Цикл
		Элемент.ЦветТекста = ЦветаСтиля.НезаполненноеПолеТаблицы;
	КонецЦикла;

	Для Каждого Элемент Из МассивЭлементовПроверкиДоступности Цикл
		Элемент.ЦветТекста = ?(Элемент.Доступность, ЦветаСтиля.ГиперссылкаЦвет, ЦветаСтиля.НезаполненноеПолеТаблицы);
	КонецЦикла;

	МассивЭлементовПодсказки = Новый Массив;
	МассивЭлементовПодсказки.Добавить(Элементы.ОткрытьДокументыПоставокЗаказыНаПеремещение);
	МассивЭлементовПодсказки.Добавить(Элементы.ОткрытьДокументыПоставокЗаявкиНаВозврат);

	Для Каждого Элемент Из МассивЭлементовПодсказки Цикл
		Команда = Команды.Найти(Элемент.ИмяКоманды);
		Если Команда = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если Элемент.ЦветТекста = ЦветаСтиля.НезаполненноеПолеТаблицы Тогда
			Команда.Подсказка = НСтр("ru = 'Использование документов этого вида отключено'");
		Иначе
			ЭлементПодсказки = ПодсказкиЭлементовПоУмолчанию.НайтиПоЗначению(Элемент.ИмяКоманды);
			Если ЭлементПодсказки <> Неопределено Тогда
				Команда.Подсказка = ЭлементПодсказки.Представление;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСчетчики()

	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;

	ДанныеСчетчиков = Новый Структура;

	Если Элементы.ОткрытьДокументыПоставокЗаявкиНаПоставкуКОформлению.Доступность Тогда 
		ДанныеСчетчиков.Вставить("ОтгрузитьПоставки", 0);
	Иначе
		ДанныеСчетчиков.Вставить("ОтгрузитьПоставки", -1);
	КонецЕсли;

	Если Элементы.ОткрытьДокументыПоставокЗаявкиНаПеремещениеКОформлению.Доступность Тогда
		ДанныеСчетчиков.Вставить("ОформитьРаспоряжения", 0);
	Иначе
		ДанныеСчетчиков.Вставить("ОформитьРаспоряжения", -1);
	КонецЕсли;

	Если Элементы.ОткрытьДокументыПоставокЗаявкиНаВозвратКОформлению.Доступность Тогда
		ДанныеСчетчиков.Вставить("ПринятьВозвратыПоставок", 0);
	Иначе
		ДанныеСчетчиков.Вставить("ПринятьВозвратыПоставок", -1);
	КонецЕсли;

	ДанныеСчетчиков.Вставить("ИдентификаторЗадания", Новый УникальныйИдентификатор());

	ОбновитьЗаголовкиГиперссылок(ДанныеСчетчиков, Истина);

	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбновитьСчетчикиЗавершение", ЭтотОбъект,
		Новый Структура("ИдентификаторЗадания", ДанныеСчетчиков.ИдентификаторЗадания));
	ДлительнаяОперация = ПолучитьСчетчики(ДанныеСчетчиков, ДанныеТорговойПлощадки);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСчетчики(ДанныеСчетчиков, ДанныеТорговойПлощадки)

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(
		ДанныеТорговойПлощадки.УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания =
		НСтр("ru = 'Яндекс Маркет. Пересчет счетчиков рабочего места управления продажами'");
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;

	ИмяМетода = "Обработки.ПанельАдминистрированияПродажиЯндексМаркет.ПолучитьСчетчики";
        Результат = ДлительныеОперации.ВыполнитьФункцию(
		ПараметрыВыполнения,
		ИмяМетода,
		ДанныеСчетчиков,
		ДанныеТорговойПлощадки);

	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ОбновитьСчетчикиЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт

	Если Результат <> Неопределено
	  И Результат.Статус = "Выполнено"
	  И Результат.Свойство("АдресРезультата") Тогда

		РезультатОперации = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Если РезультатОперации.ИдентификаторЗадания <> ДополнительныеПараметры.ИдентификаторЗадания Тогда
			Возврат;
		КонецЕсли;

		ОбновитьЗаголовкиГиперссылок(РезультатОперации);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовкиГиперссылок(ДанныеСчетчиков, ЭтоЗапускОбновления = Ложь)

	Если ДанныеСчетчиков.Свойство("ОтгрузитьПоставки") Тогда
		ШаблонЗаголовка = НСтр("ru = 'Отгрузить (%1)'");
		ЦветТекста = ЦветаСтиля.ГиперссылкаЦвет;

		Если ЭтоЗапускОбновления Тогда
			ПредставлениеСчетчика = "...";
		Иначе
			ПредставлениеСчетчика = ?(ДанныеСчетчиков.ОтгрузитьПоставки > 1000,
									  Строка(1000) + "+",
									  ДанныеСчетчиков.ОтгрузитьПоставки);

			Если ДанныеСчетчиков.ОтгрузитьПоставки = 0 Тогда
				ЦветТекста = ЦветаСтиля.НезаполненноеПолеТаблицы;
			КонецЕсли;
		КонецЕсли;

		Элемент = Элементы.ОткрытьДокументыПоставокЗаявкиНаПоставкуКОформлению;
		Элемент.Заголовок =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка, ПредставлениеСчетчика);
		Элемент.ЦветТекста = ЦветТекста;
	КонецЕсли;

	Если ДанныеСчетчиков.Свойство("ОформитьРаспоряжения") Тогда
		ШаблонЗаголовка = НСтр("ru = 'Отгрузить (%1)'");
		ЦветТекста = ЦветаСтиля.ГиперссылкаЦвет;

		Если ЭтоЗапускОбновления Тогда
			ПредставлениеСчетчика = "...";
		Иначе
			ПредставлениеСчетчика = ?(ДанныеСчетчиков.ОформитьРаспоряжения > 1000,
									  Строка(1000) + "+",
									  ДанныеСчетчиков.ОформитьРаспоряжения);

			Если ДанныеСчетчиков.ОформитьРаспоряжения = 0 Тогда
				ЦветТекста = ЦветаСтиля.НезаполненноеПолеТаблицы;
			КонецЕсли;
		КонецЕсли;

		Элемент = Элементы.ОткрытьДокументыПоставокЗаявкиНаПеремещениеКОформлению;
		Элемент.Заголовок =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка, ПредставлениеСчетчика);
		Элемент.ЦветТекста = ЦветТекста;
	КонецЕсли;

	Если ДанныеСчетчиков.Свойство("ПринятьВозвратыПоставок") Тогда
		ШаблонЗаголовка = НСтр("ru = 'Принять (%1)'");
		ЦветТекста = ЦветаСтиля.ГиперссылкаЦвет;

		Если ЭтоЗапускОбновления Тогда
			ПредставлениеСчетчика = "...";
		Иначе
			ПредставлениеСчетчика = ?(ДанныеСчетчиков.ПринятьВозвратыПоставок > 1000,
									  Строка(1000) + "+",
									  ДанныеСчетчиков.ПринятьВозвратыПоставок);

			Если ДанныеСчетчиков.ПринятьВозвратыПоставок = 0 Тогда
				ЦветТекста = ЦветаСтиля.НезаполненноеПолеТаблицы;
			КонецЕсли;
		КонецЕсли;

		Элемент = Элементы.ОткрытьДокументыПоставокЗаявкиНаВозвратКОформлению;
		Элемент.Заголовок =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка, ПредставлениеСчетчика);
		Элемент.ЦветТекста = ЦветТекста;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСДополнениемПараметров(ИмяОткрываемойФормы, КлючНазначенияФормы, КлючНазначенияИспользования = "")

	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("ДанныеТорговойПлощадки", ДанныеТорговойПлощадки);
	ДополнительныеСвойства.Вставить("КлючНазначенияФормы",    КлючНазначенияФормы);

	ПараметрыФормы = Новый Структура;
	Если Не ПустаяСтрока(КлючНазначенияИспользования) Тогда
		ПараметрыФормы.Вставить("КлючНазначенияИспользования", КлючНазначенияИспользования);
	КонецЕсли;

	//++ Локализация
	ИнтеграцияСМаркетплейсамиКлиент.ДополнитьПараметрыФормы(
		ПараметрыФормы,
		ДополнительныеСвойства,
		ИмяОткрываемойФормы);
	//-- Локализация

	ОткрытьФорму(ИмяОткрываемойФормы, ПараметрыФормы,, ПараметрыФормы.УникальныйИдентификаторФормы);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ВидыЦенУчетныхЗаписейЯндексМаркет()
	
	Возврат Справочники.УчетныеЗаписиМаркетплейсов.ВидыЦенУчетныхЗаписейМаркетплейса(Перечисления.ВидыМаркетплейсов.МаркетплейсЯндексМаркет);

КонецФункции

#КонецОбласти
