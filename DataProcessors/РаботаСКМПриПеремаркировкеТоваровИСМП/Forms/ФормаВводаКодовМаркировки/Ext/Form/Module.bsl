#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(Объект, Параметры);
	Объект.ВыбранныйКодМаркировки      = Параметры.КодМаркировки;
	Объект.ВыбранныйНовыйКодМаркировки = Параметры.НовыйКодМаркировки;
	
	Если Параметры.Свойство("АдресДанныеШтрихкода") Тогда
		АдресДанныеШтрихкода = Параметры.АдресДанныеШтрихкода;
	КонецЕсли;
	
	Если Не ПравоДоступа("Редактирование", Метаданные.Документы.ПеремаркировкаТоваровИСМП) Тогда
		Объект.БлокировкаРедактированияСтарогоКода = Истина;
		Объект.БлокировкаРедактированияНовогоКода  = Истина;
	КонецЕсли;
	
	Если Параметры.ДанныеВыбораПоМаркируемойПродукции <> Неопределено Тогда
		ДанныеВыбора              = Параметры.ДанныеВыбораПоМаркируемойПродукции;
		Объект.ШаблонЭтикетки     = ДанныеВыбора.ШаблонЭтикетки;
		Объект.Шаблон             = ДанныеВыбора.ШаблонМаркировки;
		Объект.СразуНаПринтер     = ДанныеВыбора.СразуНаПринтер;
	КонецЕсли;
	
	СтруктураПолей = СтруктураПолейПоРежиму();
	УстановитьПараметрыВыбораШтрихкодыУпаковок(СтруктураПолей);
	СтруктураПолей = СтруктураПолейПоРежиму(Истина);
	УстановитьПараметрыВыбораШтрихкодыУпаковок(СтруктураПолей);
	
	ПараметрыВыбора = Новый Массив;
	ПараметрыВыбора.Добавить(
		Новый ПараметрВыбора("Отбор.ТипУпаковки",
		ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар")));
	ПараметрыВыбора.Добавить(
		Новый ПараметрВыбора("Отбор.ТипШтрихкода",
		ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_DataMatrix")));
	ПараметрыВыбораКодаМаркировки = Новый ФиксированныйМассив(ПараметрыВыбора);
	
	Элементы.КодМаркировки.ПараметрыВыбора      = ПараметрыВыбораКодаМаркировки;
	Элементы.НовыйКодМаркировки.ПараметрыВыбора = ПараметрыВыбораКодаМаркировки;
	
	ОпределитьТекущийШаг(ЭтотОбъект);
	
	УстановитьДоступностьЭлементовФормы();
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	
	ИнтеграцияИСМПКлиентСервер.УстановитьКартинкуСканированияКодаПоВидуПродукции(Элементы.ДекорацияКартинка, Объект.ВидПродукции);
	ИнтеграцияИСМПКлиентСервер.УстановитьКартинкуСканированияКодаПоВидуПродукции(Элементы.ДекорацияНоваяКартинка, Объект.ВидПродукции);
	
	ПоддерживаемыеТипыПодключаемогоОборудования = "СканерШтрихкода";
	ИнтеграцияИС.НастроитьПодключаемоеОборудование(ЭтотОбъект, ПоддерживаемыеТипыПодключаемогоОборудования);
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ВладелецФормы = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Непосредственное открытие этой формы не предусмотрено.
			                      |Открытие формы производится из документа Перемаркировка товаров ИС МП.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, ПоддерживаемыеТипыПодключаемогоОборудования);
	// Конец ПодключаемоеОборудование
	
	СобытияФормИСМПКлиент.ОпределитьИспользованиеХарактеристик(
		ЭтотОбъект,
		Объект,
		"Номенклатура", "ХарактеристикиИспользуются");
	СобытияФормИСМПКлиент.ОпределитьИспользованиеХарактеристик(
		ЭтотОбъект,
		Объект,
		"НоваяНоменклатура", "НоваяХарактеристикаИспользуется");
	
	ЗаполнитьТоварыИсточник();
	
	ПроверкаПричиныПеремаркировки();
	
	ЗагрузитьКэшСертификации();
	ЗагрузитьКэшПервичныхДокументов();
	
	КэшМаркируемойПродукции = ВладелецФормы.КэшМаркируемойПродукции;
	
	Если ЗначениеЗаполнено(АдресДанныеШтрихкода) Тогда
		
		ДанныеШтрихкода = ПолучитьИзВременногоХранилища(АдресДанныеШтрихкода);
		ДанныеШтрихкода.Вставить("ЭтоОткрытиеФормы");
		
		ПоискПоШтрихкодуЗавершение(ДанныеШтрихкода, Неопределено);
		
		Если ДанныеШтрихкода.ОбработанСОшибками Тогда
			Отказ = Истина;
			ПоместитьВоВременноеХранилище(ДанныеШтрихкода, АдресДанныеШтрихкода);
		Иначе
			УдалитьИзВременногоХранилища(АдресДанныеШтрихкода);
			АдресДанныеШтрихкода = "";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ЭтоОшибкиОписанияТовара = Объект.ПричинаПеремаркировки = Перечисления.ПричиныПеремаркировкиТоваровИСМП.ОшибкиОписанияТовара;
	ЭтоМех = Объект.ВидПродукции = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха;
	
	Если ЭтоОшибкиОписанияТовара Тогда
		
		Если Не ЗначениеЗаполнено(Объект.Номенклатура) Тогда
			ТекстСообщения = НСтр("ru = 'Поле ""Номенклатура (старая)"" не заполнено'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Представление", , Отказ);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.КодМаркировки) Тогда
			ТекстСообщения = НСтр("ru = 'Поле ""Код маркировки (старый)"" не заполнено'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "КодМаркировки", , Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.ХарактеристикиИспользуются И Не ЗначениеЗаполнено(Объект.Характеристика) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Характеристика (старая)"" не заполнено'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Представление", , Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.НоваяНоменклатура) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Номенклатура (новая)"" не заполнено'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "НовоеПредставление", , Отказ);
	КонецЕсли;
	Если Объект.НоваяХарактеристикаИспользуется И Не ЗначениеЗаполнено(Объект.НоваяХарактеристика) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Характеристика (новая)"" не заполнено'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "НовоеПредставление", , Отказ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.НовыйКодМаркировки)
		И Не ЗначениеЗаполнено(Объект.КодТНВЭД) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Код ТНВЭД"" не заполнено'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "КодТНВЭД", , Отказ);
	КонецЕсли;
	
	Если Не Объект.РезультатВзятьИзПула
		И ЗначениеЗаполнено(Объект.КодМаркировки)
		И Объект.КодМаркировки = Объект.НовыйКодМаркировки Тогда
		ТекстСообщения = НСтр("ru = 'Новый код маркировки должен отличаться от старого'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	ИначеЕсли Не ЭтоМех
		И Не Объект.РезультатВзятьИзПула
		И ЗначениеЗаполнено(Объект.КодМаркировки)
		И ЗначениеЗаполнено(Объект.НовыйКодМаркировки) Тогда
		
		ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(ЭтотОбъект);
		ДанныеКодаМаркировки = ДанныеКодаМаркировки(ЭтотОбъект, Объект.КодМаркировки, ПараметрыСканирования);
		ДанныеНовогоКодаМаркировки = ДанныеКодаМаркировки(ЭтотОбъект, Объект.НовыйКодМаркировки, ПараметрыСканирования);
		
		Если ДанныеКодаМаркировки.ВидУпаковки <> ДанныеНовогоКодаМаркировки.ВидУпаковки Тогда
			
			ТекстСообщения = СтрШаблон(НСтр(
				"ru = 'Вид упаковки %1 старого кода маркировки не соответствует виду упаковки %2 нового кода маркировки'"),
				ДанныеКодаМаркировки.ВидУпаковки,
				ДанныеНовогоКодаМаркировки.ВидУпаковки);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
			
		ИначеЕсли Не ЭтоОшибкиОписанияТовара
			И (ДанныеКодаМаркировки.ШтрихкодЯвляетсяЧастьюАгрегата
				Или ДанныеКодаМаркировки.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Потребительская) Тогда
			
			GTIN      = Неопределено;
			GTINНовый = Неопределено;
			
			Если ЗначениеЗаполнено(ДанныеКодаМаркировки.GTIN) Тогда
				GTIN = ДанныеКодаМаркировки.GTIN;
			Иначе
				ТекстСообщения = НСтр("ru = 'Не удалось идентифицировать GTIN старого кода маркировки'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеНовогоКодаМаркировки.GTIN) Тогда
				GTINНовый = ДанныеНовогоКодаМаркировки.GTIN;
			Иначе
				ТекстСообщения = НСтр("ru = 'Не удалось идентифицировать GTIN нового кода маркировки'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
			КонецЕсли;
			
			Если GTIN <> Неопределено
				И GTINНовый <> Неопределено
				И GTIN <> GTINНовый Тогда
				ТекстСообщения = СтрШаблон(
					НСтр("ru = '%1, только для причины перемаркировки ""%2""'"),
					НСтр("ru = 'GTIN старого кода маркировки может отличаться от GTIN нового кода маркировки'"),
					Перечисления.ПричиныПеремаркировкиТоваровИСМП.ОшибкиОписанияТовара);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	МассивСтруктурПоиска = Новый Массив();
	
	Если Объект.КодМаркировки <> Объект.ВыбранныйКодМаркировки Тогда
		МассивСтруктурПоиска.Добавить(Новый Структура("КодМаркировки",      Объект.КодМаркировки));
		МассивСтруктурПоиска.Добавить(Новый Структура("НовыйКодМаркировки", Объект.КодМаркировки));
	КонецЕсли;
	
	Если Объект.НовыйКодМаркировки <> Объект.ВыбранныйНовыйКодМаркировки Тогда
		МассивСтруктурПоиска.Добавить(Новый Структура("КодМаркировки",      Объект.НовыйКодМаркировки));
		МассивСтруктурПоиска.Добавить(Новый Структура("НовыйКодМаркировки", Объект.НовыйКодМаркировки));
	КонецЕсли;
	
	ТекстСообщения = "";
	
	Для Каждого СтруктураПоиска Из МассивСтруктурПоиска Цикл
		ПоискСтрок = Объект.ТоварыИсточник.НайтиСтроки(СтруктураПоиска);
		Если ПоискСтрок.Количество() <> 0 Тогда
			Отказ = Истина;
			
			Для Каждого КлючИЗначение Из СтруктураПоиска Цикл
				ТекстСообщения = ТекстСообщения + Символы.ПС + СтрШаблон(
					НСтр("ru = 'Код маркировки %1 уже добавлен в документ'"), КлючИЗначение.Значение);
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	ВывестиСообщениеНаСтраницеВводаКодаМаркировки(ЭтотОбъект, СокрЛП(ТекстСообщения));
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ТекущаяСтраница", Элементы.СтраницыДанных.ТекущаяСтраница);
	
	ПараметрыСканирования = ПараметрыСканированияШтрихкода(Элементы.СтраницыДанных.ТекущаяСтраница);
	СобытияФормИСКлиент.ВнешнееСобытиеПолученыШтрихкоды(
		"ПоискПоШтрихкодуЗавершение", ЭтотОбъект, Источник, Событие, Данные, ПараметрыСканирования);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КодМаркировкиПриИзменении(Элемент)
	
	КодМаркировкиПриИзмененииЗначения()
	
КонецПроцедуры
	
&НаКлиенте
Процедура НовоеПредставлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если Объект.БлокировкаРедактированияНовогоКода Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПолей = СтруктураПолейПоРежиму(Истина);
	
	ОбработкаНавигационнойСсылкиНоменклатуры(
		НавигационнаяСсылкаФорматированнойСтроки, СтруктураПолей, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если Объект.БлокировкаРедактированияСтарогоКода Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПолей = СтруктураПолейПоРежиму();
	
	ОбработкаНавигационнойСсылкиНоменклатуры(НавигационнаяСсылкаФорматированнойСтроки, СтруктураПолей, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура НовыйКодМаркировкиПриИзменении(Элемент)
	
	КодМаркировкиПриИзмененииЗначения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПричинаПеремаркировкиПриИзменении(Элемент)
	
	ПроверкаПричиныПеремаркировки();
	
КонецПроцедуры

&НаКлиенте
Процедура КодТНВЭДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("ТекущаяСтрока",                           Объект.КодТНВЭД);
	ПараметрыФормы.Вставить("ВидПродукции",                            Объект.ВидПродукции);
	ПараметрыФормы.Вставить("Организация",                             Объект.Организация);
	ПараметрыФормы.Вставить("РежимВыбора",                             Истина);
	ПараметрыФормы.Вставить("ВозвращатьСсылкуНаЭлементКлассификатора", Ложь);
	
	ОткрытьФорму("РегистрСведений.КодыТНВЭДИСМП.Форма.ФормаСписка", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СертификацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ОткрытьФормуРедактированияСертификации();
	
КонецПроцедуры

&НаКлиенте
Процедура СертификацияПриИзменении(Элемент)
	
	Если ПустаяСтрока(Объект.Сертификация) Тогда

		Объект.ВидДокументаСертификации   = ПредопределенноеЗначение(
			"Перечисление.ВидыДокументовОбязательнойСертификацииИС.ПустаяСсылка");
		Объект.НомерДокументаСертификации = "";
		Объект.ДатаДокументаСертификации  = '00010101';

		Возврат;
	КонецЕсли;

	ПараметрыПоиска = Новый Структура("Представление", Объект.Сертификация);
	НайденныеСтроки = КэшСертификации.НайтиСтроки(ПараметрыПоиска);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		Объект.ВидДокументаСертификации   = НайденныеСтроки[0].ВидСертификации;
		Объект.НомерДокументаСертификации = НайденныеСтроки[0].НомерСертификации;
		Объект.ДатаДокументаСертификации  = НайденныеСтроки[0].ДатаСертификации;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПервичногоДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуРедактированияДанныхПервичногоДокумента();

КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПервичногоДокументаПриИзменении(Элемент)
	
	Если ПустаяСтрока(Объект.ПредставлениеПервичногоДокумента) Тогда
	
		Объект.ВидПервичногоДокумента          = ПредопределенноеЗначение("Перечисление.ВидыПервичныхДокументовИСМП.ПустаяСсылка");
		Объект.НомерПервичногоДокумента        = "";
		Объект.НаименованиеПервичногоДокумента = "";
		Объект.ДатаПервичногоДокумента         = Дата(1,1,1);
		Объект.ПервичныйДокумент               = Неопределено;
		Возврат;
	КонецЕсли;

	СтрокаКэша = КэшПервичныхДокументов[Число(Объект.ПредставлениеПервичногоДокумента)];
	ЗаполнитьЗначенияСвойств(Объект, СтрокаКэша);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Далее(Команда)
	
	КомандаДалее();
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	КомандаНазад();
	
КонецПроцедуры

&НаКлиенте
Процедура РаспечататьНовыйКодМаркировки(Команда)
	
	Объект.РезультатВзятьИзПула = Истина;
	Отказ = Ложь;
	ЗавершитьВвод(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ОчиститьСообщения();
	
	ШтрихкодированиеИСКлиент.ПоказатьВводШтрихкода(
		ОписаниеОповещенияОбработкиКодаМаркировки());
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьКэшМаркируемойПродукции()
	Оповестить(
		ИнтеграцияИСКлиентСервер.ИмяСобытияОбновитьКэшМаркируемойПродукции(ИнтеграцияИСМПКлиентСервер.ИмяПодсистемы()),
		ВладелецФормы);
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВвод(Отказ=Ложь, ЗакрытьФорму=Ложь)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	Если Объект.РезультатВзятьИзПула Тогда
		
		СтруктураПечатиЭтикетки                    = ПечатьЭтикетокИСМПКлиентСервер.СтруктураПечатиЭтикетки();
		СтруктураПечатиЭтикетки.Организация        = Объект.Организация;
		СтруктураПечатиЭтикетки.ВидПродукции       = Объект.ВидПродукции;
		СтруктураПечатиЭтикетки.Номенклатура       = Объект.НоваяНоменклатура;
		СтруктураПечатиЭтикетки.Характеристика     = Объект.НоваяХарактеристика;
		СтруктураПечатиЭтикетки.СпособВводаВОборот = ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.Перемаркировка");
		СтруктураПечатиЭтикетки.Шаблон             = Объект.Шаблон;
		СтруктураПечатиЭтикетки.Серия              = Объект.Серия;
		СтруктураПечатиЭтикетки.Количество         = 1;
		СтруктураПечатиЭтикетки.МаркировкаОстатков = Ложь;
		Если ЗначениеЗаполнено(Объект.КодМаркировки) Тогда
			СтруктураПечатиЭтикетки.ШтрихкодУпаковки = Объект.КодМаркировки;
		КонецЕсли;
		
		ОписаниеОповещенияРаспечататьНовыйКодЗавершение = Новый ОписаниеОповещения(
			"РаспечататьНовыйКодЗавершение", ЭтотОбъект);
		
		СтруктураПараметров = ПечатьЭтикетокИСМПКлиент.СтруктураПараметровПечатиНовогоКодаМаркировки(
			СтруктураПечатиЭтикетки, ЭтотОбъект, ОписаниеОповещенияРаспечататьНовыйКодЗавершение);
		
		СтруктураПараметров.Шаблон                = Объект.Шаблон;
		СтруктураПараметров.СразуНаПринтер        = Объект.СразуНаПринтер;
		СтруктураПараметров.ШаблонЭтикетки        = Объект.ШаблонЭтикетки;
		СтруктураПараметров.ВидПродукции          = Объект.ВидПродукции;
		СтруктураПараметров.Номенклатура          = Объект.НоваяНоменклатура;
		СтруктураПараметров.Характеристика        = Объект.НоваяХарактеристика;
		СтруктураПараметров.Серия                 = Объект.Серия;
		СтруктураПараметров.Организация           = Объект.Организация;
		СтруктураПараметров.Документ              = ВладелецФормы.Объект.Ссылка;
		СтруктураПараметров.ПараметрыСканирования = ПараметрыСканированияШтрихкода(Элементы.СтраницаНовыйКодМаркировки);
		
		РежимВключенияУпаковокИНаборов = 3;
		Если ЗначениеЗаполнено(Объект.КодМаркировки) Тогда
			ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования(ЭтотОбъект);
			ДанныеКодаМаркировки = ДанныеКодаМаркировки(ЭтотОбъект, Объект.КодМаркировки, ПараметрыСканирования);
			Если ДанныеКодаМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская") Тогда
				РежимВключенияУпаковокИНаборов = 0;
			ИначеЕсли ДанныеКодаМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая") Тогда
				РежимВключенияУпаковокИНаборов = 4;
			ИначеЕсли ДанныеКодаМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Набор") Тогда
				РежимВключенияУпаковокИНаборов = 5;
			КонецЕсли;
		КонецЕсли;
		СтруктураПараметров.Шаблоны = ИнтеграцияИСМПКлиентСервер.ШаблоныКодовПоНоменклатуре(
			СтруктураПараметров.Номенклатура, РежимВключенияУпаковокИНаборов).ВыгрузитьЗначения();
		
		Объект.РезультатВзятьИзПула = Ложь;
		
		ДанныеСохраненногоВыбора = Истина;
		Если ВладелецФормы.СохраненВыборПоМаркируемойПродукции Тогда
			ДанныеВыбора = ВладелецФормы.ДанныеВыбораПоМаркируемойПродукции;
			Если СтруктураПараметров.Номенклатура = ДанныеВыбора.Номенклатура
				И СтруктураПараметров.Характеристика = ДанныеВыбора.Характеристика
				И Объект.ПричинаПеремаркировки = ДанныеВыбора.ПричинаПеремаркировки Тогда
				ДанныеСохраненногоВыбора = ШтрихкодированиеИСКлиент.ИнициализацияСтруктурыДанныхСохраненногоВыбора();
				ЗаполнитьЗначенияСвойств(ДанныеСохраненногоВыбора.ДанныеВыбора, ДанныеВыбора);
				СтруктураПараметров.Действие = "УстановитьЭтикеткуИПечать";
			КонецЕсли;
		КонецЕсли;
		
		ПечатьЭтикетокИСМПКлиент.РаспечататьНовыйКодМаркировки(ДанныеСохраненногоВыбора, СтруктураПараметров);
		
		Возврат;
		
	Иначе
		
		Если ЗначениеЗаполнено(Объект.КодМаркировки)
			И ЗначениеЗаполнено(Объект.НовыйКодМаркировки) Тогда
			УстановитьЗначенияНовогоКодаМаркировки(Объект.КодМаркировки, Объект.НовыйКодМаркировки);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Номенклатура",                     Объект.Номенклатура);
	ВозвращаемоеЗначение.Вставить("Характеристика",                   Объект.Характеристика);
	ВозвращаемоеЗначение.Вставить("НоваяНоменклатура",                Объект.НоваяНоменклатура);
	ВозвращаемоеЗначение.Вставить("НоваяХарактеристика",              Объект.НоваяХарактеристика);
	ВозвращаемоеЗначение.Вставить("КодМаркировки",                    Объект.КодМаркировки);
	ВозвращаемоеЗначение.Вставить("НовыйКодМаркировки",               Объект.НовыйКодМаркировки);
	ВозвращаемоеЗначение.Вставить("ПричинаПеремаркировки",            Объект.ПричинаПеремаркировки);
	ВозвращаемоеЗначение.Вставить("ХарактеристикиИспользуются",       Объект.ХарактеристикиИспользуются);
	ВозвращаемоеЗначение.Вставить("НоваяХарактеристикаИспользуется",  Объект.НоваяХарактеристикаИспользуется);
	ВозвращаемоеЗначение.Вставить("СпособВводаВОборот",               Объект.СпособВводаВОборот);
	ВозвращаемоеЗначение.Вставить("НовыйСпособВводаВОборот",          Объект.НовыйСпособВводаВОборот);
	ВозвращаемоеЗначение.Вставить("Серия",                            Объект.Серия);
	ВозвращаемоеЗначение.Вставить("НоваяСерия",                       Объект.НоваяСерия);
	ВозвращаемоеЗначение.Вставить("ВидДокументаСертификации",         Объект.ВидДокументаСертификации);
	ВозвращаемоеЗначение.Вставить("НомерДокументаСертификации",       Объект.НомерДокументаСертификации);
	ВозвращаемоеЗначение.Вставить("ДатаДокументаСертификации",        Объект.ДатаДокументаСертификации);
	ВозвращаемоеЗначение.Вставить("Сертификация",                     Объект.Сертификация);
	ВозвращаемоеЗначение.Вставить("ВидПервичногоДокумента",           Объект.ВидПервичногоДокумента);
	ВозвращаемоеЗначение.Вставить("НаименованиеПервичногоДокумента",  Объект.НаименованиеПервичногоДокумента);
	ВозвращаемоеЗначение.Вставить("НомерПервичногоДокумента",         Объект.НомерПервичногоДокумента);
	ВозвращаемоеЗначение.Вставить("ДатаПервичногоДокумента",          Объект.ДатаПервичногоДокумента);
	ВозвращаемоеЗначение.Вставить("ПервичныйДокумент",                Объект.ПервичныйДокумент);
	ВозвращаемоеЗначение.Вставить("ПредставлениеПервичногоДокумента", Объект.ПредставлениеПервичногоДокумента);
	ВозвращаемоеЗначение.Вставить("КодТНВЭД",                         Объект.КодТНВЭД);
	ВозвращаемоеЗначение.Вставить("СтранаПроизводства",               Объект.СтранаПроизводства);
	ВозвращаемоеЗначение.Вставить("Цвет",                             Объект.Цвет);
	ВозвращаемоеЗначение.Вставить("Размер",                           Объект.Размер);
	
	АдресРезультатаПриЗакрытии = ПоместитьВоВременноеХранилище(ВозвращаемоеЗначение, УникальныйИдентификатор);
	
	ПодключитьОбработчикОжидания("ЗакрытьФормуПриСканировании", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФормуПриСканировании()
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультатаПриЗакрытии);
	
	Закрыть(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспечататьНовыйКодЗавершение(ДанныеОтветаРезервированияИПечати, ДополнительныеПараметры) Экспорт
	
	Если ДанныеОтветаРезервированияИПечати = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеОтветаРезервированияИПечати.РезультатРезервирования.Количество() Тогда
		
		СтрокаРезультата = ДанныеОтветаРезервированияИПечати.РезультатРезервирования.Получить(0);
		
		Если ДанныеОтветаРезервированияИПечати.СохраняемыеНастройки.ЗапомнитьВыбор Тогда
			
			СохраняемыеДанные = ШтрихкодированиеИСКлиент.ИнициализацияСтруктурыДанныхСохраненногоВыбора();
			ДанныеВыбора = ДанныеОтветаРезервированияИПечати.СохраняемыеНастройки.ДанныеВыбора;
			ЗаполнитьЗначенияСвойств(СохраняемыеДанные.ДанныеВыбора, ДанныеВыбора);
			ЗаполнитьЗначенияСвойств(СохраняемыеДанные.ДанныеВыбора, Объект,, "ШаблонЭтикетки,СразуНаПринтер,Серия");
			
			ШтрихкодированиеИСКлиентСервер.ОбработатьСохраненныйВыборДанныхПоМаркируемойПродукции(
				ВладелецФормы, СохраняемыеДанные.ДанныеВыбора, Истина);
				
		КонецЕсли;
		
		ДанныеШтрихкода = Новый Структура("Штрихкод, Количество", СтрокаРезультата.КодМаркировки, 1);
		РучнойВводШтрихкодаЗавершение(ДанныеШтрихкода, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШагДалееПроверитьИПереключитьСтраницу(НоваяСтраница, Отказ)
	
	Если Элементы.СтраницыДанных.ТекущаяСтраница = Элементы.СтраницаКодМаркировки Тогда
		
		ОчиститьСообщения();
		
		Если Объект.ПричинаПеремаркировки = ПредопределенноеЗначение(
			"Перечисление.ПричиныПеремаркировкиТоваровИСМП.ОшибкиОписанияТовара") Тогда
		
			Если Не ЗначениеЗаполнено(Объект.Номенклатура) Тогда
				ТекстСообщения = НСтр("ru = 'Необходимо заполнить поле ""Номенклатура""'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"Представление",, Отказ);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Объект.КодМаркировки) Тогда
				ТекстСообщения = НСтр("ru = 'Необходимо заполнить поле ""Код маркировки""'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,, "Объект.КодМаркировки", Отказ);
			КонецЕсли;
			
		КонецЕсли;
			
		Если Объект.ХарактеристикиИспользуются И Не ЗначениеЗаполнено(Объект.Характеристика) Тогда
			ТекстСообщения = НСтр("ru = 'Необходимо заполнить поле ""Характеристика""'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"Представление", Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Отказ Тогда
		
		Если Элементы.СтраницыДанных.ТекущаяСтраница = НоваяСтраница Тогда
			ЗавершитьВвод();
		Иначе
			УстановитьТекущуюСтраницу(ЭтотОбъект, НоваяСтраница);
			УстановитьДоступностьЭлементовФормы();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов = "")
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	ЭтоОбувь = Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувь");
	ЭтоШины  = Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Шины");
	
	Элементы.СтранаПроизводства.Видимость = Не ЭтоШины;
	Элементы.Цвет.Видимость               = ЭтоОбувь;
	Элементы.Размер.Видимость             = ЭтоОбувь;
	
	Если Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Антисептики")
		Или Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БАДы")
		Или Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КреслаКоляски")
		Или Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТехническиеСредстваРеабилитации")
		Или Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МедицинскиеИзделия") Тогда
		
		Элементы.ПричинаПеремаркировкиИспорченоУтрачено.СписокВыбора.Очистить();
		Элементы.ПричинаПеремаркировкиИспорченоУтрачено.СписокВыбора.Добавить(
			ПредопределенноеЗначение("Перечисление.ПричиныПеремаркировкиТоваровИСМП.ИспорченоУтрачено"),
			НСтр("ru = 'продаже или на складе'"));
		
		Элементы.ПричинаПеремаркировкиРеализацияТоваров.Видимость = Ложь;
		
		Если Объект.ПричинаПеремаркировки = ПредопределенноеЗначение("Перечисление.ПричиныПеремаркировкиТоваровИСМП.РеализацияТоваровПриобретенныхНеДляПродажи") Тогда
			
			Элементы.ПричинаПеремаркировкиРеализацияТоваров.Видимость = Истина;
			
		ИначеЕсли Объект.ПричинаПеремаркировки = ПредопределенноеЗначение("Перечисление.ПричиныПеремаркировкиТоваровИСМП.ВозвратВСлучаеДистанционнойПродажи") Тогда
			
			Элементы.ПричинаПеремаркировкиИспорченоУтрачено.СписокВыбора.Добавить(
				ПредопределенноеЗначение("Перечисление.ПричиныПеремаркировкиТоваровИСМП.ВозвратВСлучаеДистанционнойПродажи"),
				НСтр("ru = 'возврате в случае дистанционной продажи'"));
			
		ИначеЕсли Объект.ПричинаПеремаркировки = ПредопределенноеЗначение("Перечисление.ПричиныПеремаркировкиТоваровИСМП.ВозвратИзЕАЭС") Тогда
			
			Элементы.ПричинаПеремаркировкиИспорченоУтрачено.СписокВыбора.Добавить(
				ПредопределенноеЗначение("Перечисление.ПричиныПеремаркировкиТоваровИСМП.ВозвратИзЕАЭС"),
				НСтр("ru = 'возврате из ЕАЭС'"));
			
		ИначеЕсли Объект.ПричинаПеремаркировки = ПредопределенноеЗначение("Перечисление.ПричиныПеремаркировкиТоваровИСМП.ВозвратОтРозничногоПокупателя") Тогда
			
			Элементы.ПричинаПеремаркировкиИспорченоУтрачено.СписокВыбора.Добавить(
				ПредопределенноеЗначение("Перечисление.ПричиныПеремаркировкиТоваровИСМП.ВозвратОтРозничногоПокупателя"),
				НСтр("ru = 'возврате от розничного покупателя'"));
			
		ИначеЕсли Объект.ПричинаПеремаркировки = ПредопределенноеЗначение("Перечисление.ПричиныПеремаркировкиТоваровИСМП.ВозвратОтЮридическогоЛица") Тогда
			
			Элементы.ПричинаПеремаркировкиИспорченоУтрачено.СписокВыбора.Добавить(
				ПредопределенноеЗначение("Перечисление.ПричиныПеремаркировкиТоваровИСМП.ВозвратОтЮридическогоЛица"),
				НСтр("ru = 'возврате от юридического лица или ИП'"));
				
		КонецЕсли;
		
		Элементы.НоваяПричинаПеремаркировкиИспорченоУтрачено.СписокВыбора.Очистить();
		Для Каждого ЭлементСписка Из Элементы.ПричинаПеремаркировкиИспорченоУтрачено.СписокВыбора Цикл
			Элементы.НоваяПричинаПеремаркировкиИспорченоУтрачено.СписокВыбора.Добавить(
				ЭлементСписка.Значение,
				ЭлементСписка.Представление);
		КонецЦикла;
		
		Элементы.НоваяПричинаПеремаркировкиРеализацияТоваров.Видимость = Элементы.ПричинаПеремаркировкиРеализацияТоваров.Видимость;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовФормы()
	
	Элементы.СтраницыДанных.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	Для Каждого Страница Из Элементы.СтраницыДанных.ПодчиненныеЭлементы Цикл
		ОтображатьСтраницу = Элементы.СтраницыДанных.ТекущаяСтраница = Страница;
		Страница.Видимость = ОтображатьСтраницу;
	КонецЦикла;
	
	ТекущаяСтраница                                  = Элементы.СтраницыДанных.ТекущаяСтраница;
	Заголовок                                        = ТекущаяСтраница.Заголовок;
	Элементы.Назад.Видимость                         = Истина;
	Элементы.РаспечататьНовыйКодМаркировки.Видимость = Ложь;
	Элементы.Готово.Заголовок                        = "Новый код";
	
	Если ТекущаяСтраница = Элементы.СтраницаНовыйКодМаркировки Тогда
		Элементы.РаспечататьНовыйКодМаркировки.Видимость = Истина;
		Элементы.Готово.Заголовок = "Готово";
		Элементы.Готово.Доступность = НЕ Объект.БлокировкаРедактированияНовогоКода;
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаКодМаркировки Тогда
		Элементы.Назад.Видимость = Ложь;
		Элементы.Готово.Доступность = Истина;
	КонецЕсли;
	
	Элементы.РаспечататьНовыйКодМаркировки.Доступность = Не Объект.БлокировкаРедактированияНовогоКода;
	Элементы.ПоискПоШтрихкоду.Доступность              = НЕ Объект.БлокировкаРедактированияСтарогоКода;
	Элементы.НовыйПоискПоШтрихкоду.Доступность         = НЕ Объект.БлокировкаРедактированияНовогоКода;
	Элементы.СтраницаКодМаркировки.ТолькоПросмотр      = Объект.БлокировкаРедактированияСтарогоКода;
	Элементы.СтраницаНовыйКодМаркировки.ТолькоПросмотр = Объект.БлокировкаРедактированияНовогоКода;
	
	Элементы.НоваяПричинаПеремаркировкиОшибкиОписанияТовара.Доступность = ЗначениеЗаполнено(Объект.КодМаркировки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОпределитьТекущийШаг(Форма)
	
	Объект = Форма.Объект;
	
	Если ЗначениеЗаполнено(Объект.КодМаркировки)
		Или ЗначениеЗаполнено(Объект.НовыйКодМаркировки)
		Или ЗначениеЗаполнено(Объект.НоваяНоменклатура) Тогда
		ТекущаяСтраница = Форма.Элементы.СтраницаНовыйКодМаркировки;
	Иначе
		ТекущаяСтраница = Форма.Элементы.СтраницаКодМаркировки;
	КонецЕсли;
	
	УстановитьТекущуюСтраницу(Форма, ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылкиНоменклатуры(НавигационнаяСсылка, СтруктураПолей, СтандартнаяОбработка)
		
	ДополнительныеПараметрыОповещения = Новый Структура();
	ДополнительныеПараметрыОповещения.Вставить("НавигационнаяСсылка", НавигационнаяСсылка);
	ДополнительныеПараметрыОповещения.Вставить("СтруктураПолей",      СтруктураПолей);
	ДополнительныеПараметрыОповещения.Вставить("Контекст",            Объект);
	
	ОписаниеВыборЗначения = Новый ОписаниеОповещения(
		"ОповещениеВыборПоНавигационнойСсылкеВФормеВводаКодаМаркировки", ЭтотОбъект, ДополнительныеПараметрыОповещения);
	
	Если НавигационнаяСсылка = "ВыбратьНоменклатуру" Тогда
		
		СобытияФормИСКлиентПереопределяемый.ПриНачалеВыбораНоменклатуры(
			ЭтотОбъект, Объект.ВидПродукции, СтандартнаяОбработка, ОписаниеВыборЗначения);
		
	ИначеЕсли НавигационнаяСсылка = "ВыбратьХарактеристику" Тогда
		
		СобытияФормИСМПКлиентПереопределяемый.ПриНачалеВыбораХарактеристики(
			ЭтотОбъект, Объект, СтандартнаяОбработка, СтруктураПолей.Номенклатура, ОписаниеВыборЗначения);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВыборПоНавигационнойСсылкеВФормеВводаКодаМаркировки(Значение, ДополнительныеПараметры) Экспорт
	
	Если Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВывестиСообщениеНаСтраницеВводаКодаМаркировки(ЭтотОбъект);
	
	ФлагИзмененияНоменклатуры = 0;
	
	Если ДополнительныеПараметры.НавигационнаяСсылка = "ВыбратьНоменклатуру" Тогда
		
		Если Объект[ДополнительныеПараметры.СтруктураПолей.Номенклатура] <> Значение Тогда
			ФлагИзмененияНоменклатуры = 1;
		КонецЕсли;
		
		Объект[ДополнительныеПараметры.СтруктураПолей.Номенклатура]   = Значение;
		Объект[ДополнительныеПараметры.СтруктураПолей.Характеристика] = Неопределено;
		
		СобытияФормИСМПКлиент.ОпределитьИспользованиеХарактеристик(
			ЭтотОбъект,
			Объект,
			ДополнительныеПараметры.СтруктураПолей.Номенклатура,
			ДополнительныеПараметры.СтруктураПолей.ХарактеристикаИспользуется);
		
	ИначеЕсли ДополнительныеПараметры.НавигационнаяСсылка = "ВыбратьХарактеристику" Тогда
		
		Если Объект[ДополнительныеПараметры.СтруктураПолей.Характеристика] <> Значение Тогда
			ФлагИзмененияНоменклатуры = 2;
		КонецЕсли;
			
		Объект[ДополнительныеПараметры.СтруктураПолей.Характеристика] = Значение;
		
	Иначе
		Возврат;
	КонецЕсли;
	
	ОбработатьИзменениеНоменклатуры(ДополнительныеПараметры.СтруктураПолей.ЭтоНовыйКод, ФлагИзмененияНоменклатуры);
	
	УстановитьПараметрыВыбораШтрихкодыУпаковок(ДополнительныеПараметры.СтруктураПолей);
	
	ОбновитьПредставленияНоменклатуры();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораШтрихкодыУпаковок(СтруктураПолей)
	
	СвязиВыбора = Новый Массив();
	
	Если ЗначениеЗаполнено(Объект[СтруктураПолей.Номенклатура]) Тогда
		СвязиВыбора.Добавить(
			Новый СвязьПараметраВыбора("Отбор.Номенклатура", СтрШаблон("Объект.%1", СтруктураПолей.Номенклатура)));
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект[СтруктураПолей.Характеристика]) Тогда
		СвязиВыбора.Добавить(
			Новый СвязьПараметраВыбора("Отбор.Характеристика", СтрШаблон("Объект.%1", СтруктураПолей.Характеристика)));
	КонецЕсли;
	
	Элементы[СтруктураПолей.КодМаркировки].СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПричиныПеремаркировки()
	
	ОбработатьИзменениеНоменклатуры(Элементы.СтраницыДанных.ТекущаяСтраница = Элементы.СтраницаНовыйКодМаркировки);
	ОбновитьОтображениеДанныхПриИзмененииПричиныПеремаркировки(ЭтотОбъект);
	ОбновитьСписокВыбораПервичногоДокумента(ЭтотОбъект);
	ОбновитьПредставленияНоменклатуры();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураПолейПоРежиму(НовыйКод=Ложь)
	
	СтруктураПолей = Новый Структура();
	
	Если НовыйКод Тогда
		СтруктураПолей.Вставить("Номенклатура",               "НоваяНоменклатура");
		СтруктураПолей.Вставить("Характеристика",             "НоваяХарактеристика");
		СтруктураПолей.Вставить("ХарактеристикаИспользуется", "НоваяХарактеристикаИспользуется");
		СтруктураПолей.Вставить("Представление",              "НовоеПредставление");
		СтруктураПолей.Вставить("КодМаркировки",              "НовыйКодМаркировки");
		СтруктураПолей.Вставить("СпособВводаВОборот",         "НовыйСпособВводаВОборот");
	Иначе
		СтруктураПолей.Вставить("Номенклатура",               "Номенклатура");
		СтруктураПолей.Вставить("Характеристика",             "Характеристика");
		СтруктураПолей.Вставить("ХарактеристикаИспользуется", "ХарактеристикиИспользуются");
		СтруктураПолей.Вставить("Представление",              "Представление");
		СтруктураПолей.Вставить("КодМаркировки",              "КодМаркировки");
		СтруктураПолей.Вставить("СпособВводаВОборот",         "СпособВводаВОборот");
	КонецЕсли;
	
	СтруктураПолей.Вставить("ЭтоНовыйКод", НовыйКод);
	
	Возврат СтруктураПолей;
	
КонецФункции

#Область ШтрихкодыИТорговоеОборудование

&НаСервереБезКонтекста
Процедура УстановитьЗначенияНовогоКодаМаркировки(КодМаркировки, НовыйКодМаркировки)
	
	Обработки.РаботаСКМПриПеремаркировкеТоваровИСМП.УстановитьЗначенияНовогоКодаМаркировки(
		КодМаркировки, НовыйКодМаркировки);
	
КонецПроцедуры

&НаКлиенте
Процедура РучнойВводШтрихкодаЗавершение(ДанныеШтрихкода, ДополнительныеПараметры) Экспорт
	
	Если ДанныеШтрихкода = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ДекодироватьШтрихкодДанныхBase64(ДанныеШтрихкода);
	
	ДанныеРазбора = РазборКодаМаркировкиИССлужебныйКлиент.РазобратьКодМаркировки(ДанныеШтрихкода.Штрихкод, Объект.ВидПродукции);
	
	Если ДанныеРазбора <> Неопределено
		И ДанныеРазбора.ВидыУпаковокПоВидамПродукции[Объект.ВидПродукции].Найти(
			ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская")) = Неопределено
		И ДанныеРазбора.ВидыУпаковокПоВидамПродукции[Объект.ВидПродукции].Найти(
			ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая")) = Неопределено
		И ДанныеРазбора.ВидыУпаковокПоВидамПродукции[Объект.ВидПродукции].Найти(
			ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Набор")) = Неопределено Тогда
		ДанныеШтрихкода.Штрихкод = ДанныеРазбора.НормализованныйКодМаркировки;
		ДанныеШтрихкода.Вставить("ТекстОшибки", НСтр(
			"ru = 'Штрихкод не является штрихкодом набора, групповой или потребительской упаковки'"));
		ПоказатьОшибкуВводаШтрихкода(ДанныеШтрихкода);
		Возврат;
	КонецЕсли;
	
	ПараметрыСканирования = ПараметрыСканированияШтрихкода(Элементы.СтраницыДанных.ТекущаяСтраница);
	
	ШтрихкодированиеОбщегоНазначенияИСКлиент.ОбработатьДанныеШтрихкода(
		"ПоискПоШтрихкодуЗавершение", ЭтотОбъект, ДанныеШтрихкода, ПараметрыСканирования);
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыСканированияШтрихкода(ТекущаяСтраница)

	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования(ВладелецФормы);
	
	Если ТекущаяСтраница = Элементы.СтраницаНовыйКодМаркировки Тогда
		
		ПараметрыСканирования.ДопустимыеСтатусыИСМП.Очистить();
		ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(
			ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.Нанесен"));
		
		ПараметрыСканирования.ДопустимыйСпособВводаВОборот = ПредопределенноеЗначение(
			"Перечисление.СпособыВводаВОборотСУЗ.Перемаркировка");
		
	КонецЕсли;
	
	Возврат ПараметрыСканирования;
	
КонецФункции

&НаКлиенте
Функция ОписаниеОповещенияОбработкиКодаМаркировки()
	
	Возврат Новый ОписаниеОповещения("РучнойВводШтрихкодаЗавершение", ЭтотОбъект);
	
КонецФункции

//@skip-warning
&НаСервере
Функция Подключаемый_ОбработатьВводШтрихкода(ДанныеШтрихкода, КэшированныеЗначения, ПараметрыСканирования = Неопределено)
	
	РезультатОбработкиШтрихкода = ШтрихкодированиеОбщегоНазначенияИС.ОбработатьВводШтрихкода(
		ЭтотОбъект, ДанныеШтрихкода, КэшированныеЗначения, ПараметрыСканирования);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Новый Массив;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Новый Массив;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОткрытьФормуУточненияДанных()
	
	ШтрихкодированиеИСКлиент.Подключаемый_ОткрытьФормуУточненияДанных(ЭтотОбъект,
		ОписаниеОповещенияОбработкиКодаМаркировки());
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныеШтрихкода, ДополнительныеПараметры) Экспорт
	
	Если ДанныеШтрихкода = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.БлокировкаРедактированияСтарогоКода И Объект.БлокировкаРедактированияНовогоКода Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	Если ДанныеШтрихкода.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская")
		Или ДанныеШтрихкода.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая")
		Или ДанныеШтрихкода.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Набор") Тогда
		
		Отказ = Не ОбработатьШтрихкодКодаМаркировки(ДанныеШтрихкода);
	
	ИначеЕсли Не ЗначениеЗаполнено(ДанныеШтрихкода.ТипУпаковки) Тогда
		
		Отказ = Не ОбработатьШтрихкодТовара(ДанныеШтрихкода);
		
	Иначе
		ТекстОшибки = НСтр("ru = 'Недопустимый формат штрихкода'");
		Отказ = Истина;
		ДанныеШтрихкода.ОбработанСОшибками = Истина;
		ДанныеШтрихкода.ТекстОшибки = ТекстОшибки;
		ВывестиСообщениеНаСтраницеВводаКодаМаркировки(ЭтотОбъект,
			ТекстОшибки);
	КонецЕсли;
	
	ОбновитьКэшМаркируемойПродукции();
	
	Если Отказ Тогда
		Возврат;
	Иначе
		ВывестиСообщениеНаСтраницеВводаКодаМаркировки(ЭтотОбъект);
	КонецЕсли;
	
	ОбновитьПредставленияНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Функция ОбработатьШтрихкодКодаМаркировки(ДанныеШтрихкода)
	
	Если Элементы.СтраницыДанных.ТекущаяСтраница = Элементы.СтраницаКодМаркировки Тогда
		
		СледующийШаг = Истина;
		Если ДанныеШтрихкода.Статус = ПредопределенноеЗначение(
			"Перечисление.СтатусыКодовМаркировкиИСМП.Нанесен") Тогда
				
			Если ДанныеШтрихкода.СпособВводаВОборот = ПредопределенноеЗначение(
				"Перечисление.СпособыВводаВОборотСУЗ.Перемаркировка") Тогда
				
				// это новый код для перемаркировки
				Если Не ЗначениеЗаполнено(Объект.КодМаркировки)
					И Объект.ПричинаПеремаркировки = ПредопределенноеЗначение(
					"Перечисление.ПричиныПеремаркировкиТоваровИСМП.ОшибкиОписанияТовара") Тогда
					
					ДанныеШтрихкода.ОбработанСОшибками = Истина;
					ДанныеШтрихкода.ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Введенный код является новым кодом маркировки.
							       |Для выбранной причины ""%1"", необходимо ввести старый код маркировки.
							       |Измените причину или введите старый код маркировки.'"),
							Объект.ПричинаПеремаркировки);
					
					Если Не ДанныеШтрихкода.Свойство("ЭтоОткрытиеФормы") Тогда
						ПоказатьОшибкуВводаШтрихкода(ДанныеШтрихкода);
					КонецЕсли;
					
					Возврат Ложь;
					
				КонецЕсли;
				
				Отказ = Ложь;
				КомандаДалее(Отказ);
				
				Если Отказ Тогда
					Возврат Ложь;
				КонецЕсли;
				
				СледующийШаг = Ложь;
				
			Иначе
				
				ДанныеШтрихкода.ОбработанСОшибками = Истина;
				ДанныеШтрихкода.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Статус: %1
						       |Способ ввода в оборот: %2
						       |Код маркировки с данными параметрами нельзя использовать для перемаркировки.'"),
						ДанныеШтрихкода.ПредставлениеСтатуса,
						ДанныеШтрихкода.СпособВводаВОборот);
				
				Если Не ДанныеШтрихкода.Свойство("ЭтоОткрытиеФормы") Тогда
					ПоказатьОшибкуВводаШтрихкода(ДанныеШтрихкода);
				КонецЕсли;
				
				Возврат Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		СледующийШаг = Ложь;
	КонецЕсли;
	
	СтруктураПолей = СтруктураПолейПоРежиму(
		Элементы.СтраницыДанных.ТекущаяСтраница = Элементы.СтраницаНовыйКодМаркировки);
	
	Если Не СтруктураПолей.ЭтоНовыйКод
		И Объект.БлокировкаРедактированияСтарогоКода Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ФлагИзмененияНоменклатуры = 0;
	Если Объект[СтруктураПолей.Номенклатура] <> ДанныеШтрихкода.Номенклатура Тогда
		ФлагИзмененияНоменклатуры = 1;
	ИначеЕсли Объект[СтруктураПолей.Характеристика] <> ДанныеШтрихкода.Характеристика Тогда
		ФлагИзмененияНоменклатуры = 2;
	КонецЕсли;
	
	ПоместитьДанныеШтрихкодаВКэшКодовМаркировки(ЭтотОбъект, ДанныеШтрихкода);
	
	Номенклатура = Объект[СтруктураПолей.Номенклатура];
	Если СтруктураПолей.ЭтоНовыйКод
		И ЗначениеЗаполнено(Объект.КодМаркировки) Тогда
		
		ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования(ЭтотОбъект);
		ДанныеКодаМаркировки = ДанныеКодаМаркировки(ЭтотОбъект, Объект.КодМаркировки, ПараметрыСканирования);
		ДанныеНовогоКодаМаркировки = ДанныеКодаМаркировки(ЭтотОбъект, ДанныеШтрихкода.ШтрихкодУпаковки, ПараметрыСканирования);
		Если ДанныеКодаМаркировки.ВидУпаковки <> ДанныеНовогоКодаМаркировки.ВидУпаковки Тогда
			
			ВывестиСообщениеНаСтраницеВводаКодаМаркировки(ЭтотОбъект,
				СтрШаблон(НСтр(
				"ru = 'Вид упаковки %1 старого кода маркировки не соответствует виду упаковки %2 нового кода маркировки'"),
				ДанныеКодаМаркировки.ВидУпаковки,
				ДанныеНовогоКодаМаркировки.ВидУпаковки));
			Возврат Ложь;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ПричинаПеремаркировки)
			И Объект.ПричинаПеремаркировки <> ПредопределенноеЗначение(
				"Перечисление.ПричиныПеремаркировкиТоваровИСМП.ОшибкиОписанияТовара")
			И (ДанныеКодаМаркировки.ШтрихкодЯвляетсяЧастьюАгрегата
				Или ДанныеКодаМаркировки.ВидУпаковки <> ПредопределенноеЗначение(
					"Перечисление.ВидыУпаковокИС.Потребительская")) Тогда
			
			Если ДанныеШтрихкода.Номенклатура <> Номенклатура Тогда
				ВывестиСообщениеНаСтраницеВводаКодаМаркировки(ЭтотОбъект,
					СтрШаблон(НСтр(
						"ru = 'Номенклатура отсканированного кода не соответствует: %1'"),
						ДанныеШтрихкода.Номенклатура));
				Возврат Ложь;
			КонецЕсли;
			
			Характеристика = Объект[СтруктураПолей.Характеристика];
			ХарактеристикаИспользуется = Объект[СтруктураПолей.ХарактеристикаИспользуется];
			
			Если ХарактеристикаИспользуется И ДанныеШтрихкода.Характеристика <> Характеристика Тогда
				ВывестиСообщениеНаСтраницеВводаКодаМаркировки(ЭтотОбъект,
					СтрШаблон(НСтр(
						"ru = 'Характеристика отсканированного кода не соответствует: %1'"),
						ДанныеШтрихкода.Характеристика));
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Объект[СтруктураПолей.Номенклатура]   = ДанныеШтрихкода.Номенклатура;
	Объект[СтруктураПолей.Характеристика] = ДанныеШтрихкода.Характеристика;
	СобытияФормИСМПКлиент.ОпределитьИспользованиеХарактеристик(
			ЭтотОбъект,
			Объект,
			СтруктураПолей.Номенклатура,
			СтруктураПолей.ХарактеристикаИспользуется);
	
	Объект[СтруктураПолей.КодМаркировки]      = ДанныеШтрихкода.ШтрихкодУпаковки;
	Объект[СтруктураПолей.СпособВводаВОборот] = ДанныеШтрихкода.СпособВводаВОборот;
	
	УстановитьПричинуПеремаркировки();
	
	ОбработатьИзменениеНоменклатуры(СтруктураПолей.ЭтоНовыйКод, ФлагИзмененияНоменклатуры, Ложь);
	
	Если ЗначениеЗаполнено(Объект[СтруктураПолей.КодМаркировки])
		И ЗначениеЗаполнено(Объект.ПричинаПеремаркировки) Тогда
		СледующийШаг = Истина;
	КонецЕсли;
	
	Если СледующийШаг
		И Элементы.СтраницыДанных.ТекущаяСтраница = Элементы.СтраницаНовыйКодМаркировки
		И Не ЗначениеЗаполнено(Объект.КодТНВЭД) Тогда
		СледующийШаг = Ложь;
	КонецЕсли;
	
	Если СледующийШаг Тогда
		КомандаДалее();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ОбработатьШтрихкодТовара(ДанныеШтрихкода)
	
	СтруктураПолей = СтруктураПолейПоРежиму(
		Элементы.СтраницыДанных.ТекущаяСтраница = Элементы.СтраницаНовыйКодМаркировки);
	
	Если Не СтруктураПолей.ЭтоНовыйКод
		И Объект.БлокировкаРедактированияСтарогоКода Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВывестиСообщениеНаСтраницеВводаКодаМаркировки(ЭтотОбъект);
	
	ФлагИзмененияНоменклатуры = 0;
	Если Объект[СтруктураПолей.Номенклатура] <> ДанныеШтрихкода.Номенклатура Тогда
		ФлагИзмененияНоменклатуры = 1;
	ИначеЕсли Объект[СтруктураПолей.Характеристика] <> ДанныеШтрихкода.Характеристика Тогда
		ФлагИзмененияНоменклатуры = 2;
	КонецЕсли;
	
	Объект[СтруктураПолей.Номенклатура]   = ДанныеШтрихкода.Номенклатура;
	Объект[СтруктураПолей.Характеристика] = ДанныеШтрихкода.Характеристика;
	СобытияФормИСМПКлиент.ОпределитьИспользованиеХарактеристик(
				ЭтотОбъект,
				Объект,
				СтруктураПолей.Номенклатура,
				СтруктураПолей.ХарактеристикаИспользуется);
	
	УстановитьПричинуПеремаркировки();
	
	ОбработатьИзменениеНоменклатуры(СтруктураПолей.ЭтоНовыйКод, ФлагИзмененияНоменклатуры);
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьОшибкуВводаШтрихкода(ДанныеШтрихкода)
	
	ПараметрыОткрытия = ШтрихкодированиеИСКлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного();
	ЗаполнитьЗначенияСвойств(ПараметрыОткрытия, ДанныеШтрихкода);
	
	ОткрытьФорму("ОбщаяФорма.ИнформацияОНевозможностиДобавленияОтсканированного", ПараметрыОткрытия, ЭтотОбъект);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПоместитьДанныеШтрихкодаВКэшКодовМаркировки(Форма, ДанныеШтрихкода)
	
	Если Форма.КэшКодовМаркировки = Неопределено Тогда
		Форма.КэшКодовМаркировки = Новый Структура;
		Форма.КэшКодовМаркировки.Вставить("ДанныеКодовМаркировки", Новый Соответствие);
	КонецЕсли;
	
	Если Форма.КэшКодовМаркировки.ДанныеКодовМаркировки[ДанныеШтрихкода.ШтрихкодУпаковки] = Неопределено Тогда
		Если ЗначениеЗаполнено(ДанныеШтрихкода.ВидУпаковки) Тогда
			ВидУпаковки = ДанныеШтрихкода.ВидУпаковки;
		Иначе
			ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская");
		КонецЕсли;
		ДанныеКодаМаркировки = Новый Структура;
		ДанныеКодаМаркировки.Вставить("GTIN",        ДанныеШтрихкода.GTIN);
		ДанныеКодаМаркировки.Вставить("ВидУпаковки", ВидУпаковки);
		ДанныеКодаМаркировки.Вставить("ШтрихкодЯвляетсяЧастьюАгрегата",
			ШтрихкодЯвляетсяЧастьюАгрегата(ДанныеШтрихкода.ШтрихкодУпаковки));
		Форма.КэшКодовМаркировки.ДанныеКодовМаркировки.Вставить(ДанныеШтрихкода.ШтрихкодУпаковки, ДанныеКодаМаркировки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДанныеКодаМаркировки(Форма, ШтрихкодУпаковки, ПараметрыСканирования)
	
	Если Форма.КэшКодовМаркировки = Неопределено Тогда
		Форма.КэшКодовМаркировки = Новый Структура;
		Форма.КэшКодовМаркировки.Вставить("ДанныеКодовМаркировки", Новый Соответствие);
	КонецЕсли;
	
	Если Форма.КэшКодовМаркировки.ДанныеКодовМаркировки[ШтрихкодУпаковки] = Неопределено Тогда
		ДанныеШтрихкода = Новый Структура;
		ДанныеШтрихкода.Вставить("Штрихкод",     ЗначениеШтрихкода(ШтрихкодУпаковки));
		ДанныеШтрихкода.Вставить("ФорматBase64", Ложь);
		ДанныеШтрихкода.Вставить("Количество",   1);
		ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ДанныеШтрихкода);
		
		РезультатОбработкиШтрихкода = ШтрихкодированиеОбщегоНазначенияИСВызовСервера.ОбработатьШтрихкод(
			ДанныеШтрихкода, ПараметрыСканирования, Неопределено, Форма.УникальныйИдентификатор);
		Если РезультатОбработкиШтрихкода = Неопределено Тогда
			ДанныеКодаМаркировки = Новый Структура;
			ДанныеКодаМаркировки.Вставить("GTIN",        "");
			ДанныеКодаМаркировки.Вставить("ВидУпаковки", Неопределено);
			ДанныеКодаМаркировки.Вставить("ШтрихкодЯвляетсяЧастьюАгрегата", Ложь);
			Возврат ДанныеКодаМаркировки;
		Иначе
			Если РезультатОбработкиШтрихкода.ДанныеШтрихкода.ШтрихкодУпаковки <> ШтрихкодУпаковки Тогда
				РезультатОбработкиШтрихкода.ДанныеШтрихкода.ШтрихкодУпаковки = ШтрихкодУпаковки;
			КонецЕсли;
			ПоместитьДанныеШтрихкодаВКэшКодовМаркировки(Форма, РезультатОбработкиШтрихкода.ДанныеШтрихкода);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Форма.КэшКодовМаркировки.ДанныеКодовМаркировки[ШтрихкодУпаковки];
	
КонецФункции

&НаСервереБезКонтекста
Функция ШтрихкодЯвляетсяЧастьюАгрегата(ШтрихкодУпаковки)
	
	Если Не ЗначениеЗаполнено(ШтрихкодУпаковки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Штрихкод", ШтрихкодУпаковки);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|ГДЕ
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод = &Штрихкод
	|	И
	|		ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка.ТипШтрихкода = ЗНАЧЕНИЕ(Перечисление.ТипыШтрихкодов.GS1_DataMatrix)";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеШтрихкода(ШтрихкодУпаковки)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ШтрихкодУпаковки, "ЗначениеШтрихкода");
	
КонецФункции
#КонецОбласти

#Область Сертификация

&НаКлиенте
Процедура ЗагрузитьКэшСертификации()
	
	КэшСертификации.Очистить();
	Элементы.Сертификация.СписокВыбора.Очистить();
	
	Для Каждого СтрокаКэшаВладельца Из ВладелецФормы.КэшСертификации Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаКэшаВладельца.Номенклатура)
			Или СтрокаКэшаВладельца.Номенклатура = Объект.Номенклатура Тогда
			
			СтрокаКэша = КэшСертификации.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаКэша, СтрокаКэшаВладельца);
			
			Элементы.Сертификация.СписокВыбора.Добавить(СтрокаКэша.Представление);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияСертификации()
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидСертификации",   Объект.ВидДокументаСертификации);
	ПараметрыОткрытия.Вставить("ДатаСертификации",  Объект.ДатаДокументаСертификации);
	ПараметрыОткрытия.Вставить("НомерСертификации", Объект.НомерДокументаСертификации);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнениеСертификацииЗавершение", ЭтотОбъект);
	
	ОткрытьФорму(
		"ОбщаяФорма.УточнениеСертификацииИС",
		ПараметрыОткрытия, ЭтотОбъект,,,,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеСертификацииЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт

	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ВидДокументаСертификации   = РезультатВыбора.ВидСертификации;
	Объект.НомерДокументаСертификации = РезультатВыбора.НомерСертификации;
	Объект.ДатаДокументаСертификации  = РезультатВыбора.ДатаСертификации;
	
	Объект.Сертификация = ПредставлениеСертификации(Объект.ВидДокументаСертификации,
		Объект.НомерДокументаСертификации, Объект.ДатаДокументаСертификации);
		
	ОбновитьКэшСертификацииКлиентСервер(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьКэшСертификацииКлиентСервер(Форма)
	
	Объект = Форма.Объект;
	
	Если Не ЗначениеЗаполнено(Объект.ВидДокументаСертификации)
		И Не ЗначениеЗаполнено(Объект.НомерДокументаСертификации)
		И Не ЗначениеЗаполнено(Объект.ДатаДокументаСертификации) Тогда
		
		Возврат;
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура("ВидСертификации, НомерСертификации, ДатаСертификации",
		Объект.ВидДокументаСертификации, Объект.НомерДокументаСертификации, Объект.ДатаДокументаСертификации);
		
	НайденныеСтроки = Форма.КэшСертификации.НайтиСтроки(ПараметрыПоиска);
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		СтрокаКэша = Форма.КэшСертификации.Добавить();
		СтрокаКэша.ВидСертификации   = Объект.ВидДокументаСертификации;
		СтрокаКэша.НомерСертификации = Объект.НомерДокументаСертификации;
		СтрокаКэша.ДатаСертификации  = Объект.ДатаДокументаСертификации;
		СтрокаКэша.Представление     = Объект.Сертификация;
		
		Форма.Элементы.Сертификация.СписокВыбора.Добавить(СтрокаКэша.Представление);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеСертификации(ВидСертификации, НомерСертификации, ДатаСертификации)
	
	ШаблонПредставлениеСертификата = "%1 №%2 от %3";
	
	Если ЗначениеЗаполнено(ВидСертификации)
		И ЗначениеЗаполнено(НомерСертификации)
		И ЗначениеЗаполнено(ДатаСертификации) Тогда
		
		ПредставлениеСертификата = СтрШаблон(ШаблонПредставлениеСертификата,
			ВидСертификации, НомерСертификации, Формат(ДатаСертификации, "ДФ=dd.MM.yyyy"));
		
	КонецЕсли;
	
	Возврат ПредставлениеСертификата;
	
КонецФункции

#КонецОбласти

#Область ПервичныйДокумент

&НаКлиенте
Процедура ЗагрузитьКэшПервичныхДокументов()
	
	Для Каждого СтрокаКэшаВладельца Из ВладелецФормы.КэшПервичныхДокументов Цикл
		
		СтрокаКэша = КэшПервичныхДокументов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаКэша, СтрокаКэшаВладельца);
		
	КонецЦикла;
		
	ОбновитьСписокВыбораПервичногоДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияДанныхПервичногоДокумента()
	
	ДоступныеВидыПервичныхДокументов = ИнтеграцияИСМПКлиентСервер.
		ПолучитьДоступныеВидыПервичныхДокументовДляПричиныПеремаркировки(Объект.ПричинаПеремаркировки);
	Если ДоступныеВидыПервичныхДокументов.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(
		НСтр("ru = 'Для причины перемаркировки %1 указание документа продажи не требуется.'"),
		Объект.ПричинаПеремаркировки));
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Организация");
	ПараметрыОткрытия.Вставить("ВидПервичногоДокумента");
	ПараметрыОткрытия.Вставить("НаименованиеПервичногоДокумента");
	ПараметрыОткрытия.Вставить("НомерПервичногоДокумента");
	ПараметрыОткрытия.Вставить("ДатаПервичногоДокумента");
	ПараметрыОткрытия.Вставить("ПервичныйДокумент");
	
	ЗаполнитьЗначенияСвойств(ПараметрыОткрытия, Объект);

	ПараметрыОткрытия.Вставить("ДоступныеВидыПервичныхДокументов", ДоступныеВидыПервичныхДокументов);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗаполнениеПервичногоДокументаЗавершение", ЭтотОбъект);
	
	ОткрытьФорму(
		"ОбщаяФорма.ИнформацияОДокументеПродажи",
		ПараметрыОткрытия, ЭтотОбъект,,,,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеПервичногоДокументаЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, РезультатВыбора);
	
	ОбновитьКэшПервичныхДокументов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьКэшПервичныхДокументов(Форма)
	
	Объект = Форма.Объект;
	
	Если ПустаяСтрока(Объект.ПредставлениеПервичногоДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура("ПредставлениеПервичногоДокумента", Объект.ПредставлениеПервичногоДокумента);
	НайденныеСтроки = Форма.КэшПервичныхДокументов.НайтиСтроки(ПараметрыПоиска);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		ЗаполнитьЗначенияСвойств(Форма.КэшПервичныхДокументов.Добавить(), Объект);
		
		ОбновитьСписокВыбораПервичногоДокумента(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСписокВыбораПервичногоДокумента(Форма)
	
	Объект = Форма.Объект;
	
	Форма.Элементы.ПредставлениеПервичногоДокумента.СписокВыбора.Очистить();
	
	Для Каждого СтрокаКэша Из Форма.КэшПервичныхДокументов Цикл
		
		Если ИнтеграцияИСМПКлиентСервер.СоответствиеПричинПеремаркировкиПервичногоДокумента(
			СтрокаКэша.ПричинаПеремаркировки,
			Объект.ПричинаПеремаркировки) Тогда
				
			Форма.Элементы.ПредставлениеПервичногоДокумента.СписокВыбора.Добавить(
				Формат(Форма.КэшПервичныхДокументов.Индекс(СтрокаКэша), "ЧРД=; ЧН=0; ЧГ=0;"), СтрокаКэша.ПредставлениеПервичногоДокумента);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекущуюСтраницу(Форма, НоваяСтраница)
	
	Если Форма.Элементы.СтраницыДанных.ТекущаяСтраница = НоваяСтраница Тогда
		Возврат;
	КонецЕсли;
	
	Если Не НоваяСтраница.Видимость Тогда
		НоваяСтраница.Видимость = Истина;
	КонецЕсли;
	
	Форма.Элементы.СтраницыДанных.ТекущаяСтраница = НоваяСтраница;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПричинуПеремаркировки()
	
	Если Не ЗначениеЗаполнено(Объект.Номенклатура)
		Или Не ЗначениеЗаполнено(Объект.НоваяНоменклатура) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполненаХарактеристика = ЗначениеЗаполнено(Объект.Характеристика)
		И Объект.ХарактеристикиИспользуются Или Не Объект.ХарактеристикиИспользуются;
	ЗаполненаНоваяХарактеристика = ЗначениеЗаполнено(Объект.НоваяХарактеристика)
		И Объект.НоваяХарактеристикаИспользуется Или Не Объект.НоваяХарактеристикаИспользуется;
		
	Если Не ЗаполненаХарактеристика
		Или Не ЗаполненаНоваяХарактеристика Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеХарактеристики = ?(Объект.ХарактеристикиИспользуются, Объект.Характеристика, Неопределено);
	ЗначениеНовойХарактеристики = ?(Объект.НоваяХарактеристикаИспользуется,
		Объект.НоваяХарактеристика, Неопределено);
	
	Если Не ЗначениеЗаполнено(Объект.ПричинаПеремаркировки)
		И ЗначениеЗаполнено(Объект.КодМаркировки)
		И ЗначениеЗаполнено(Объект.НовыйКодМаркировки)
		И (Объект.Номенклатура <> Объект.НоваяНоменклатура
		Или ЗначениеХарактеристики <> ЗначениеНовойХарактеристики) Тогда
		Объект.ПричинаПеремаркировки = ПредопределенноеЗначение(
			"Перечисление.ПричиныПеремаркировкиТоваровИСМП.ОшибкиОписанияТовара");
		ОбновитьОтображениеДанныхПриИзмененииПричиныПеремаркировки(ЭтотОбъект);
		ОбновитьСписокВыбораПервичногоДокумента(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КодМаркировкиПриИзмененииЗначения()
	
	ВывестиСообщениеНаСтраницеВводаКодаМаркировки(ЭтотОбъект);
	
	ЭтоНовыйКод = Элементы.СтраницыДанных.ТекущаяСтраница = Элементы.СтраницаНовыйКодМаркировки;
	СтруктураПолей = СтруктураПолейПоРежиму(ЭтоНовыйКод);
	
	ВыбранноеЗначение = Объект[СтруктураПолей.КодМаркировки];
	
	ФлагИзмененияНоменклатуры = 0;
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		ЗначенияРеквизитов = ПолучитьЗначенияРеквизитовКодаМаркировки(ВыбранноеЗначение);
		
		Если ЗначенияРеквизитов.ВидПродукции <> Неопределено
			И ЗначенияРеквизитов.ВидПродукции <> Объект.ВидПродукции Тогда
			Объект[СтруктураПолей.КодМаркировки] = Неопределено;
			ВывестиСообщениеНаСтраницеВводаКодаМаркировки(ЭтотОбъект,
			    СтрШаблон(НСтр(
					"ru = 'Вид продукции ""%1"" выбранного кода маркировки не соответствует виду продукции перемаркировки ""%2""'"),
					ЗначенияРеквизитов.ВидПродукции,
					Объект.ВидПродукции));
			Возврат;
		КонецЕсли;
		
		Если Объект[СтруктураПолей.Номенклатура] <> ЗначенияРеквизитов.Номенклатура Тогда
			ФлагИзмененияНоменклатуры = 1;
		ИначеЕсли Объект[СтруктураПолей.Характеристика] <> ЗначенияРеквизитов.Характеристика Тогда
			ФлагИзмененияНоменклатуры = 2;
		КонецЕсли;
		
		Объект[СтруктураПолей.Номенклатура]   = ЗначенияРеквизитов.Номенклатура;
		Объект[СтруктураПолей.Характеристика] = ЗначенияРеквизитов.Характеристика;
	
	КонецЕсли;
		
	УстановитьПараметрыВыбораШтрихкодыУпаковок(СтруктураПолей);
	
	УстановитьПричинуПеремаркировки();
	ОбработатьИзменениеНоменклатуры(СтруктураПолей.ЭтоНовыйКод, ФлагИзмененияНоменклатуры, Ложь);
	
	ОбновитьПараметрыПослеИзмененияКодаМаркировки(СтруктураПолей);
	ОбновитьКэшМаркируемойПродукции();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПараметрыПослеИзмененияКодаМаркировки(СтруктураПолей)
		
	СобытияФормИСМПКлиент.ОпределитьИспользованиеХарактеристик(
		ЭтотОбъект,
		Объект,
		СтруктураПолей.Номенклатура,
		СтруктураПолей.ХарактеристикаИспользуется);
		
	ОбновитьПредставленияНоменклатуры();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначенияРеквизитовКодаМаркировки(КодМаркировки)
	
	Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(КодМаркировки, "Номенклатура, Характеристика");
	Результат.Вставить("ВидПродукции", ПолучитьВидПродукцииНоменклатуры(Результат.Номенклатура));
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьВидПродукцииНоменклатуры(Номенклатура)
	
	Возврат ИнтеграцияИС.ВидПродукцииПоНоменклатуре(Номенклатура);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьОтображениеДанныхПриИзмененииПричиныПеремаркировки(Форма)
	
	Объект = Форма.Объект;
	
	ЭтоОшибкиОписанияТовара = Объект.ПричинаПеремаркировки = ПредопределенноеЗначение("Перечисление.ПричиныПеремаркировкиТоваровИСМП.ОшибкиОписанияТовара");
	
	Если Форма.Элементы.ПричинаПеремаркировкиИспорченоУтрачено.СписокВыбора.НайтиПоЗначению(Объект.ПричинаПеремаркировки) = Неопределено Тогда
		Форма.ПричинаПеремаркировкиИспорченоУтраченоГруппа = 0;
	Иначе
		Форма.ПричинаПеремаркировкиИспорченоУтраченоГруппа = 1;
	КонецЕсли;
	
	Форма.Элементы.КодМаркировки.АвтоОтметкаНезаполненного = ЭтоОшибкиОписанияТовара;
	Форма.Элементы.КодМаркировки.ОтметкаНезаполненного = ЭтоОшибкиОписанияТовара;
	Форма.Элементы.КодМаркировки.ОбновитьТекстРедактирования();
	
	ПервичныйДокументДоступен = ИнтеграцияИСМПКлиентСервер.ПричинаПеремаркировкиДоступнаДляПервичногоДокумента(Объект.ПричинаПеремаркировки);
	
	Если Не ПервичныйДокументДоступен И Не ПустаяСтрока(Объект.ПредставлениеПервичногоДокумента) Тогда
		Объект.ВидПервичногоДокумента = Неопределено;
		Объект.ДатаПервичногоДокумента = Дата(1, 1, 1);
		Объект.НомерПервичногоДокумента = "";
		Объект.НаименованиеПервичногоДокумента = "";
		Объект.ПервичныйДокумент = Неопределено;
		Объект.ПредставлениеПервичногоДокумента = "";
	КонецЕсли;
	
	Если Не ПервичныйДокументДоступен
		И Форма.Элементы.ПредставлениеПервичногоДокумента.ПодсказкаВвода = "" Тогда
		Форма.Элементы.ПредставлениеПервичногоДокумента.ПодсказкаВвода = "<не требуется>";
	ИначеЕсли ПервичныйДокументДоступен
		И Форма.Элементы.ПредставлениеПервичногоДокумента.ПодсказкаВвода <> "" Тогда
		Форма.Элементы.ПредставлениеПервичногоДокумента.ПодсказкаВвода = "";
	КонецЕсли;
	
	Форма.Элементы.ПредставлениеПервичногоДокумента.Доступность = ПервичныйДокументДоступен;
	Форма.Элементы.НоваяПричинаПеремаркировкиОшибкиОписанияТовара.Доступность = ЗначениеЗаполнено(Объект.КодМаркировки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредставленияНоменклатуры()
	
	ПараметрыПредставленияНоменклатуры = ИнтеграцияИСКлиентСервер.ПараметрыПредставленияНоменклатуры();
	ПараметрыПредставленияНоменклатуры.Номенклатура               = Объект.Номенклатура;
	ПараметрыПредставленияНоменклатуры.Характеристика             = Объект.Характеристика;
	ПараметрыПредставленияНоменклатуры.ХарактеристикиИспользуются = Объект.ХарактеристикиИспользуются;
	ПараметрыПредставленияНоменклатуры.ТолькоПросмотр             = Объект.БлокировкаРедактированияСтарогоКода;
	
	Представление = ИнтеграцияИСКлиентСервер.ПредставлениеНоменклатурыФорматированнойСтрокой(
		ПараметрыПредставленияНоменклатуры);
	
	Если Объект.БлокировкаРедактированияНовогоКода Тогда
		ТолькоПросмотрНовойНоменклатуры = Истина;
	ИначеЕсли ЗначениеЗаполнено(Объект.КодМаркировки)
		И Объект.ПричинаПеремаркировки <> ПредопределенноеЗначение(
				"Перечисление.ПричиныПеремаркировкиТоваровИСМП.ОшибкиОписанияТовара") Тогда
		ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования(ЭтотОбъект);
		ДанныеКодаМаркировки = ДанныеКодаМаркировки(ЭтотОбъект, Объект.КодМаркировки, ПараметрыСканирования);
		ТолькоПросмотрНовойНоменклатуры = ДанныеКодаМаркировки.ШтрихкодЯвляетсяЧастьюАгрегата
			Или ДанныеКодаМаркировки.ВидУпаковки <> ПредопределенноеЗначение(
				"Перечисление.ВидыУпаковокИС.Потребительская");
	Иначе
		ТолькоПросмотрНовойНоменклатуры = Ложь;
	КонецЕсли;
	
	ПараметрыПредставленияНоменклатуры = ИнтеграцияИСКлиентСервер.ПараметрыПредставленияНоменклатуры();
	ПараметрыПредставленияНоменклатуры.Номенклатура               = Объект.НоваяНоменклатура;
	ПараметрыПредставленияНоменклатуры.Характеристика             = Объект.НоваяХарактеристика;
	ПараметрыПредставленияНоменклатуры.ХарактеристикиИспользуются = Объект.НоваяХарактеристикаИспользуется;
	ПараметрыПредставленияНоменклатуры.ТолькоПросмотр             = ТолькоПросмотрНовойНоменклатуры;
	
	НовоеПредставление = ИнтеграцияИСКлиентСервер.ПредставлениеНоменклатурыФорматированнойСтрокой(
		ПараметрыПредставленияНоменклатуры);
	
КонецПроцедуры

// ФлагИзмененияНоменклатуры - число
//	* 0 - Номенклатура И Характеристика не изменились
//	* 1 - Номенклатура изменилась
//	* 2 - Характеристика изменилась.
&НаКлиенте
Процедура ОбработатьИзменениеНоменклатуры(ЭтоНовыйКод, Знач ФлагИзмененияНоменклатуры = 0, ПроверитьКод = Истина)
	
	ЭтоОшибкиОписанияТовара = Объект.ПричинаПеремаркировки = ПредопределенноеЗначение(
		"Перечисление.ПричиныПеремаркировкиТоваровИСМП.ОшибкиОписанияТовара");
	
	Если ПроверитьКод И ФлагИзмененияНоменклатуры > 0 Тогда
		Если ЭтоНовыйКод И ЗначениеЗаполнено(Объект.НовыйКодМаркировки) Тогда
			Объект.НовыйКодМаркировки = Неопределено;
		ИначеЕсли Не ЭтоНовыйКод И ЗначениеЗаполнено(Объект.КодМаркировки) Тогда
			Объект.КодМаркировки = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЭтоОшибкиОписанияТовара
		И ЗначениеЗаполнено(Объект.КодМаркировки)
		И (Объект.Номенклатура <> Объект.НоваяНоменклатура
		Или Объект.Характеристика <> Объект.НоваяХарактеристика) Тогда
		
		ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования(ЭтотОбъект);
		ДанныеКодаМаркировки = ДанныеКодаМаркировки(ЭтотОбъект, Объект.КодМаркировки, ПараметрыСканирования);
		Если Не ЗначениеЗаполнено(Объект.НоваяНоменклатура)
			Или ДанныеКодаМаркировки.ШтрихкодЯвляетсяЧастьюАгрегата
			Или ДанныеКодаМаркировки.ВидУпаковки <> ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская") Тогда
			
			Если ЭтоНовыйКод Тогда
				
				Объект.Номенклатура               = Объект.НоваяНоменклатура;
				Объект.Характеристика             = Объект.НоваяХарактеристика;
				Объект.ХарактеристикиИспользуются = Объект.НоваяХарактеристикаИспользуется;
				Если ЗначениеЗаполнено(Объект.КодМаркировки) Тогда
					Объект.КодМаркировки = Неопределено;
				КонецЕсли;
				
			Иначе
				
				Если ФлагИзмененияНоменклатуры <> 1
					И Объект.НоваяНоменклатура <> Объект.Номенклатура Тогда
					ФлагИзмененияНоменклатуры = 1;
				КонецЕсли;
				
				Объект.НоваяНоменклатура               = Объект.Номенклатура;
				Объект.НоваяХарактеристика             = Объект.Характеристика;
				Объект.НоваяХарактеристикаИспользуется = Объект.ХарактеристикиИспользуются;
				Если ЗначениеЗаполнено(Объект.НовыйКодМаркировки) Тогда
					Объект.НовыйКодМаркировки = Неопределено;
				КонецЕсли;
				
			КонецЕсли;
				
			УстановитьПараметрыВыбораШтрихкодыУпаковок(СтруктураПолейПоРежиму(Не ЭтоНовыйКод));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ФлагИзмененияНоменклатуры = 1
		И ЗначениеЗаполнено(Объект.НоваяНоменклатура) Тогда
		
		ДанныеСтроки = Новый Структура;
		ДанныеСтроки.Вставить("Номенклатура", Объект.НоваяНоменклатура);
		ДанныеСтроки.Вставить("Характеристика", Неопределено);
		ДанныеСтроки.Вставить("КодТНВЭД",     Объект.КодТНВЭД);
			
		СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииНоменклатуры(ЭтотОбъект, ДанныеСтроки, Новый Структура());
		
		Объект.КодТНВЭД = ДанныеСтроки.КодТНВЭД;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТоварыИсточник()
	
	Если ВладелецФормы <> Неопределено Тогда
		Для Каждого СтрокаТовары Из ВладелецФормы.Объект.Товары Цикл
			НоваяСтрока = Объект.ТоварыИсточник.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДалее(Отказ = Ложь)
	
	ТекущаяСтраница = Элементы.СтраницыДанных.ТекущаяСтраница;
	Страницы        = Элементы.СтраницыДанных.ПодчиненныеЭлементы;
	
	НоваяСтраница = Неопределено;
	
	Для Каждого Страница Из Страницы Цикл
		Если Страница = ТекущаяСтраница Тогда
			НоваяСтраница = Страница; // Определяем флаг текущей страницы
		ИначеЕсли НоваяСтраница <> Неопределено Тогда
			НоваяСтраница = Страница;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НоваяСтраница = Неопределено Тогда
		НоваяСтраница = Элементы.СтраницыДанных.ТекущаяСтраница;
	КонецЕсли;
	
	ШагДалееПроверитьИПереключитьСтраницу(НоваяСтраница, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад()
	
	ТекущаяСтраница = Элементы.СтраницыДанных.ТекущаяСтраница;
	
	НоваяСтраница = ТекущаяСтраница;
	Для Каждого Страница Из Элементы.СтраницыДанных.ПодчиненныеЭлементы Цикл
		Если Страница = ТекущаяСтраница Тогда // Это первая страница - ничего не делаем
			Прервать;
		Иначе
			НоваяСтраница = Страница;
		КонецЕсли;
	КонецЦикла;
	
	Если Элементы.СтраницыДанных.ТекущаяСтраница <> НоваяСтраница Тогда
		УстановитьТекущуюСтраницу(ЭтотОбъект, НоваяСтраница);
		УстановитьДоступностьЭлементовФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиСообщениеНаСтраницеВводаКодаМаркировки(Форма, Знач ТекстСообщения = "")
	
	ТекстСообщения = СокрЛП(ТекстСообщения);
	
	Форма.Элементы.ИнформацияВводаКодаМаркировки.Заголовок = ТекстСообщения;
	Форма.Элементы.ИнформацияВводаКодаМаркировки.Видимость = ЗначениеЗаполнено(ТекстСообщения);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти