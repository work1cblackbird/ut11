#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.Заголовок) Тогда
		ВызватьИсключение НСтр("ru='Предусмотрено открытие обработки только из форм объектов.'");
	КонецЕсли;
	
	Заголовок = Параметры.Заголовок;
	
	Планирование.СоздатьТаблицуПериодов(ЭтаФорма, "Периоды");
	
	ТаблицаПериоды = ПолучитьИзВременногоХранилища(Параметры.АдресТаблицыПериодов); // см. Планирование.ТаблицаПериоды
	ЭтаФорма.Периоды.Загрузить(ТаблицаПериоды);
	
	КроссТаблица       = Параметры.КроссТаблица;
	ПланироватьПоСумме = Параметры.ПланироватьПоСумме;
	ВидПлана           = Параметры.ВидПлана;
	Объект.Партнер     = Параметры.Партнер;
	Подразделение      = Параметры.Подразделение;
	
	МассивПараметров = Новый Массив;
	ОтборПоНоменклатуре = Параметры.ПараметрыОтбора;
	Для Каждого Отбор Из Параметры.ПараметрыОтбора Цикл
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор." + Отбор.Ключ, Отбор.Значение));
	КонецЦикла;
	Элементы.ТоварыНоменклатура.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	Если Параметры.ПараметрыОтбора.Свойство("ТипНоменклатуры") Тогда
		ТекстОтбора = НСтр("ru='Для выбора доступна номенклатура с типом: %1.'");
		Типы = Новый Массив;
		Для каждого ТипОтбора Из Параметры.ПараметрыОтбора.ТипНоменклатуры Цикл
			Если Не ПолучитьФункциональнуюОпцию("ИспользоватьМногооборотнуюТару")
				И ТипОтбора = Перечисления.ТипыНоменклатуры.МногооборотнаяТара Тогда
				Продолжить;
			КонецЕсли;
			Типы.Добавить(ТипОтбора);
		КонецЦикла;
		Элементы.ОтборНадпись.Заголовок = СтрШаблон(ТекстОтбора, СтрСоединить(Типы, ", "));
	КонецЕсли;
	
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	
	ПараметрыВидаПлана = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидПлана, "ТипПлана, Владелец, ЗаполнятьПартнераВТЧ, ЗаполнятьСоглашениеВТЧ, ЗаполнятьСкладВТЧ");
	ЗаполнитьЗначенияСвойств(ЭтаФорма, ПараметрыВидаПлана);
	
	ПараметрыСценария = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыВидаПлана.Владелец, "ИспользоватьРасчетПоСкоростиПродаж, ИспользоватьДляПланированияМатериалов");
	ЗаполнитьЗначенияСвойств(ЭтаФорма, ПараметрыСценария);
	
	АктивныеПериоды = ТаблицаПериоды.НайтиСтроки(Новый Структура("Активная", Истина));
	КоличествоПериодов = АктивныеПериоды.Количество();
	Для каждого Период Из АктивныеПериоды Цикл
		
		Если НЕ ЗначениеЗаполнено(НачалоПериода) Тогда
			НачалоПериода = Период.ДатаНачала;
		КонецЕсли;
		
		Если НачалоПериода > Период.ДатаНачала И ЗначениеЗаполнено(Период.ДатаНачала) Тогда
			НачалоПериода = Период.ДатаНачала;
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.ТоварыКоличествоУпаковок.Видимость = КоличествоПериодов > 1 ИЛИ НЕ КроссТаблица;
	
	ЭтоПланПродажПоКатегориям = ТипПлана = Перечисления.ТипыПланов.ПланПродажПоКатегориям;
	ЭтоПланСборкиРазборки = ТипПлана = Перечисления.ТипыПланов.ПланСборкиРазборки;
	
	
	Если КроссТаблица Тогда
		
		ПараметрыВывода = Новый Структура;
		ПараметрыВывода.Вставить("ИмяРеквизитаКроссТаблицы", "Объект.Товары");
		ПараметрыВывода.Вставить("ЭлементФормыКроссТаблицы", "Товары");
		ПараметрыВывода.Вставить("ТаблицаПериодов", ТаблицаПериоды);
		Периодичность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыВидаПлана.Владелец, "Периодичность");
		ПараметрыВывода.Вставить("Периодичность", Периодичность);
		
		ПараметрыВывода.Вставить("ГруппироватьПоля", Истина);
		ПараметрыВывода.Вставить("ЗаголовокПоляГруппировки", НСтр("ru = 'Периоды планирования'"));
		
		ПараметрыВывода.Вставить("Поля", Новый Массив());
		
		СтруктураПоля = Новый Структура;
		СтруктураПоля.Вставить("ПрефиксРеквизитаКолонки", "Цена_");
		СтруктураПоля.Вставить("УдалятьРеквизитыТаблицы", Ложь);
		Если ПланироватьПоСумме Тогда
			СтруктураПоля.Вставить("СоздаватьЭлемент", Истина);
		Иначе
			СтруктураПоля.Вставить("СоздаватьЭлемент", Ложь);
		КонецЕсли;
		СтруктураПоля.Вставить("ТипЭлемента", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
		СтруктураПоля.Вставить("Заголовок", "Цена");
		СтруктураПоля.Вставить("СоздаватьИтоговыеРеквизиты", Ложь);
		СтруктураПоля.Вставить("ШиринаЭлемента", 6);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПриИзменении", "Подключаемый_ПриИзмененииЦены");
		СтруктураПоля.Вставить("СтруктураДействий", СтруктураДействий);
		
		ПараметрыВывода.Поля.Добавить(СтруктураПоля);
		
		СтруктураПоля = Новый Структура;
		СтруктураПоля.Вставить("ПрефиксРеквизитаКолонки", "Сумма_");
		СтруктураПоля.Вставить("УдалятьРеквизитыТаблицы", Ложь);
		СтруктураПоля.Вставить("СоздаватьЭлемент", Ложь);
		СтруктураПоля.Вставить("ТипЭлемента", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
		СтруктураПоля.Вставить("Заголовок", "Сумма");
		СтруктураПоля.Вставить("СоздаватьИтоговыеРеквизиты", Истина);
		СтруктураПоля.Вставить("ШиринаЭлемента", 6);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПриИзменении", "Подключаемый_ПриИзмененииСуммы");
		СтруктураПоля.Вставить("СтруктураДействий", СтруктураДействий);
		
		ПараметрыВывода.Поля.Добавить(СтруктураПоля);
		
		СтруктураПоля = Новый Структура;
		СтруктураПоля.Вставить("ПрефиксРеквизитаКолонки", "Количество_");
		СтруктураПоля.Вставить("УдалятьРеквизитыТаблицы", Ложь);
		СтруктураПоля.Вставить("СоздаватьЭлемент", Истина);
		СтруктураПоля.Вставить("ТипЭлемента", "Число");
		Если ПланироватьПоСумме ИЛИ КоличествоПериодов = 1 Тогда
			СтруктураПоля.Вставить("Заголовок", "Количество");
		КонецЕсли;
		СтруктураПоля.Вставить("СоздаватьИтоговыеРеквизиты", Истина);
		СтруктураПоля.Вставить("ШиринаЭлемента", 6);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПриИзменении", "Подключаемый_ПриИзмененииКоличества");
		СтруктураПоля.Вставить("СтруктураДействий", СтруктураДействий);
		
		ПараметрыВывода.Поля.Добавить(СтруктураПоля);
		
		Планирование.ОбновитьСтруктуруВыводаКроссТаблицы(ЭтаФорма, ПараметрыВывода);
	
	КонецЕсли; 
	
	ИнициализироватьСтруктуруПоиска();
	
	ИнициализироватьТабличныйДокумент();
	УстановитьДоступностьКомандБуфераОбмена();
	УстановитьДоступностьКолонок();
	
	Если ЭтоПланПродажПоКатегориям Тогда
	
		Элементы.Шаг1Надпись1.Заголовок = НСтр("ru = 'Необходимо скопировать колонки в таблицу из внешнего файла (Excel. Word и пр.) через буфер обмена. Обязательно должна быть заполнена колонка: ""Товарная категория"".'");
	
	Иначе
	
		Элементы.Шаг1Надпись1.Заголовок = НСтр("ru = 'Необходимо скопировать колонки в таблицу из внешнего файла (Excel. Word и пр.) через буфер обмена. Обязательно должна быть заполнена одна из колонок: ""Штрихкод"", ""Код"", ""Артикул"" или ""Номенклатура"".'");
	
	КонецЕсли; 
	Элементы.ТоварыСоглашениеСКлиентом.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.СоглашенияСКлиентами"); 
	Элементы.ТоварыСоглашениеСПоставщиком.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.СоглашенияСПоставщиками"); 
	
	Элементы.ФормаДалее.КнопкаПоУмолчанию = Истина;
	
	// Если передали уже загруженные данные - переход к 2 Шагу
	Если ЭтоАдресВременногоХранилища(Параметры.АдресТаблицыТоваров) Тогда
	
		МассивСтруктурТоваров = ПолучитьИзВременногоХранилища(Параметры.АдресТаблицыТоваров);
		Для каждого СтруктураТовар Из МассивСтруктурТоваров Цикл
			
			Если СтруктураТовар.Свойство("ИдентификаторНоменклатура") 
				И ЗначениеЗаполнено(СтруктураТовар.ИдентификаторНоменклатура) Тогда
				СтруктураТовар.Вставить("Номенклатура",   Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураТовар.ИдентификаторНоменклатура)));
			КонецЕсли; 
			Если СтруктураТовар.Свойство("ИдентификаторХарактеристика") 
				И ЗначениеЗаполнено(СтруктураТовар.ИдентификаторХарактеристика) Тогда
				СтруктураТовар.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураТовар.ИдентификаторХарактеристика)));
			КонецЕсли; 
			Если СтруктураТовар.Свойство("ИдентификаторУпаковка") 
				И ЗначениеЗаполнено(СтруктураТовар.ИдентификаторУпаковка) Тогда
				Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураТовар.ИдентификаторУпаковка));
				СтруктураТовар.Вставить("Упаковка",       ?(Найти(Строка(Упаковка), НСтр("ru='<Объект не найден>'"))> 0, Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка(), Упаковка));
			КонецЕсли; 
			Если СтруктураТовар.Свойство("ИдентификаторПартнер") 
				И ЗначениеЗаполнено(СтруктураТовар.ИдентификаторПартнер) Тогда
				СтруктураТовар.Вставить("Партнер",        Справочники.Партнеры.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураТовар.ИдентификаторПартнер)));
			КонецЕсли; 
			Если СтруктураТовар.Свойство("ИдентификаторСоглашение") 
				И ЗначениеЗаполнено(СтруктураТовар.ИдентификаторСоглашение) Тогда
				СтруктураТовар.Вставить("Соглашение",     Справочники.СоглашенияСПоставщиками.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураТовар.ИдентификаторСоглашение)));
			КонецЕсли; 
			Если СтруктураТовар.Свойство("ИдентификаторСклад") 
				И ЗначениеЗаполнено(СтруктураТовар.ИдентификаторСклад) Тогда
				СтруктураТовар.Вставить("Склад",          Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураТовар.ИдентификаторСклад)));
			КонецЕсли; 
			Если СтруктураТовар.Свойство("ИдентификаторВариантКомплектации") 
				И ЗначениеЗаполнено(СтруктураТовар.ИдентификаторВариантКомплектации) Тогда
				СтруктураТовар.Вставить("ВариантКомплектации", Справочники.ВариантыКомплектацииНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураТовар.ИдентификаторВариантКомплектации)));
			КонецЕсли; 
			Если СтруктураТовар.Свойство("ИдентификаторТоварнаяКатегория") 
				И ЗначениеЗаполнено(СтруктураТовар.ИдентификаторТоварнаяКатегория) Тогда
				СтруктураТовар.Вставить("ТоварнаяКатегория", Справочники.ТоварныеКатегории.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураТовар.ИдентификаторТоварнаяКатегория)));
			КонецЕсли; 
			Если СтруктураТовар.Свойство("ИдентификаторРейтингПродаж") 
				И ЗначениеЗаполнено(СтруктураТовар.ИдентификаторРейтингПродаж) Тогда
				СтруктураТовар.Вставить("РейтингПродаж",  Справочники.РейтингиПродажНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураТовар.ИдентификаторРейтингПродаж)));
			КонецЕсли; 
			
			Если ЭтоПланПродажПоКатегориям Тогда
			
				Если НЕ СтруктураТовар.Свойство("ИдентификаторТоварнаяКатегория") 
					ИЛИ НЕ ЗначениеЗаполнено(СтруктураТовар.ИдентификаторТоварнаяКатегория) Тогда
					СтруктураТовар.Вставить("ЕстьНесопоставленныеДанные", Истина);
				КонецЕсли; 
			
			Иначе
				
				Если НЕ СтруктураТовар.Свойство("ИдентификаторНоменклатура") 
					ИЛИ НЕ ЗначениеЗаполнено(СтруктураТовар.ИдентификаторНоменклатура) Тогда
					СтруктураТовар.Вставить("ЕстьНесопоставленныеДанные", Истина);
				КонецЕсли; 
			
			КонецЕсли; 
			
			ТекущаяСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтруктураТовар);
		
		КонецЦикла; 
		
		// Сопоставляем данные
		СопоставитьЗагружаемыеДанныеСДаннымиИБ();
		
		Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг2;
		Элементы.ПеренестиТовары.КнопкаПоУмолчанию = Истина;
		Элементы.ФормаНазад.Видимость = Ложь;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
		УстановитьДоступностьКомандБуфераОбменаНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

&НаКлиенте
Процедура ВариантОтображенияСтрокПриИзменении(Элемент)
	
	Элементы.Товары.ОтборСтрок = Неопределено;
	
	Если ВариантОтображенияСтрок = 1 Тогда
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("ЕстьНесопоставленныеДанные", Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Далее(Команда)
	
	ЗаполненыОбязательныеПоля = Ложь;
	
	Если КроссТаблица Тогда
		СтрокаНчалаДанных = 3;
	Иначе
		СтрокаНчалаДанных = 2;
	КонецЕсли; 
	
	Для каждого ОбязательноеПоле Из ОбязательныеПоля Цикл
		Область = "R"+ СтрокаНчалаДанных + "C" + Формат(ОбязательноеПоле.Значение, "ЧН=0; ЧГ=0");
		ЗаполненыОбязательныеПоля = ЗаполненыОбязательныеПоля ИЛИ ЗначениеЗаполнено(ТабличныйДокумент.Область(Область).Текст);
		Если ЗаполненыОбязательныеПоля Тогда
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	Если Не ЗаполненыОбязательныеПоля Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Необходимо скопировать колонки в таблицу из внешнего файла.'"));
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	Состояние(НСтр("ru = 'Осуществляется сопоставление введенных данных с данными информационной базы. Пожалуйста подождите...'"),,,БиблиотекаКартинок.Информация32);
	СопоставитьДанныеТабличногоДокументаСДаннымиИБ();

	Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг2;
	Элементы.ПеренестиТовары.КнопкаПоУмолчанию = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг1;
	Элементы.ФормаДалее.КнопкаПоУмолчанию = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиТовары(Команда)
	
	ОчиститьСообщения();
	
	Если ЭтоПланПродажПоКатегориям Или ПроверитьЗаполнение() Тогда
		АдресТоваровВХранилище = ПоместитьТоварыВХранилище();
		Закрыть(АдресТоваровВХранилище);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = Объект.Товары.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена();
	
	КоличествоВставленных = Объект.Товары.Количество()-КоличествоТоваровДоВставки;
	РаботаСТабличнымиЧастямиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	Если РаботаСТабличнымиЧастямиКлиент.ВыбранаСтрокаДляВыполненияКоманды(Элементы.Товары) Тогда
		СкопироватьСтрокиНаСервере();
		РаботаСТабличнымиЧастямиКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.Товары.ВыделенныеСтроки.Количество());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элементы.Товары.ТекущиеДанные.КодСтроки = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	НастроитьВариантыОтображенияСтрок(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("Код", Новый Структура("Номенклатура", "Код"));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ПроверитьСопоставлениеДанныхСтрокиЗагрузки(ТекущаяСтрока, ЭтаФорма);
	НастроитьВариантыОтображенияСтрок(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ПроверитьСопоставлениеДанныхСтрокиЗагрузки(ТекущаяСтрока, ЭтаФорма);
	НастроитьВариантыОтображенияСтрок(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПартнерПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ПроверитьСопоставлениеДанныхСтрокиЗагрузки(ТекущаяСтрока, ЭтаФорма);
	НастроитьВариантыОтображенияСтрок(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСоглашениеПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ПроверитьСопоставлениеДанныхСтрокиЗагрузки(ТекущаяСтрока, ЭтаФорма);
	НастроитьВариантыОтображенияСтрок(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСкладПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ПроверитьСопоставлениеДанныхСтрокиЗагрузки(ТекущаяСтрока, ЭтаФорма);
	НастроитьВариантыОтображенияСтрок(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСпецификацияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ПроверитьСопоставлениеДанныхСтрокиЗагрузки(ТекущаяСтрока, ЭтаФорма);
	НастроитьВариантыОтображенияСтрок(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВариантКомплектацииПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ПроверитьСопоставлениеДанныхСтрокиЗагрузки(ТекущаяСтрока, ЭтаФорма);
	НастроитьВариантыОтображенияСтрок(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыТоварнаяКатегорияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ПроверитьСопоставлениеДанныхСтрокиЗагрузки(ТекущаяСтрока, ЭтаФорма);
	НастроитьВариантыОтображенияСтрок(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыРейтингПродажПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ПроверитьСопоставлениеДанныхСтрокиЗагрузки(ТекущаяСтрока, ЭтаФорма);
	НастроитьВариантыОтображенияСтрок(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ПроверитьСопоставлениеДанныхСтрокиЗагрузки(ТекущаяСтрока, ЭтаФорма);
	НастроитьВариантыОтображенияСтрок(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если КроссТаблица Тогда
		
		Для каждого СтрокаПериода Из ЭтаФорма.Периоды Цикл
			Если НЕ СтрокаПериода.Активная Тогда
				Продолжить;
			КонецЕсли;
			ТекущаяСтрока["Цена_" + СтрокаПериода.ИмяКолонки] = ТекущаяСтрока["Цена"];
		КонецЦикла;
		
		ПриИзмененииКоличестваСуммыСтроки(Объект, ЭтаФорма, ТекущаяСтрока)
	
	Иначе
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСумме");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущаяСтрока <> Неопределено И Элемент.ТекущийЭлемент.Имя = "ТоварыНоменклатура" Тогда
		ЗаполнитьСписокВыбораНоменклатурыХарактеристик(ТекущаяСтрока.КодСтроки);
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ТоварыХарактеристика" Тогда
		ЗаполнитьСписокВыбораНоменклатурыХарактеристик(ТекущаяСтрока.КодСтроки, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииКоличества(Элемент)
	
	СтрокаТоваров = Элементы.Товары.ТекущиеДанные;
	
	ПриИзмененииКоличестваСуммыСтроки(Объект, ЭтаФорма, СтрокаТоваров)
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииЦены(Элемент)
	
	СтрокаТоваров = Элементы.Товары.ТекущиеДанные;
	
	Цена = Неопределено;
	Для каждого СтрокаПериода Из ЭтаФорма.Периоды Цикл
		Если НЕ СтрокаПериода.Активная Тогда
			Продолжить;
		КонецЕсли;
		Если Цена = Неопределено Тогда
			Цена = СтрокаТоваров["Цена_" + СтрокаПериода.ИмяКолонки];
		ИначеЕсли Цена <> СтрокаТоваров["Цена_" + СтрокаПериода.ИмяКолонки] Тогда
			Цена = 0;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	СтрокаТоваров["Цена"] = Цена;
	
	ПриИзмененииКоличестваСуммыСтроки(Объект, ЭтаФорма, СтрокаТоваров);
	
КонецПроцедуры

// Параметры:
//   Элемент - ПолеФормы - 
&НаКлиенте
Процедура Подключаемый_ПриИзмененииСуммы(Элемент)
		
	СтрокаТоваров = Элементы.Товары.ТекущиеДанные;
	
	ИмяКолонки = СтрЗаменить(Элемент.Имя, "Товары" + "Сумма_", "");
	Если СтрокаТоваров["Количество_" + ИмяКолонки] > 0 Тогда
		СтрокаТоваров["Цена"] =  СтрокаТоваров["Сумма_" + ИмяКолонки] / СтрокаТоваров["Количество_" + ИмяКолонки];
	КонецЕсли; 
	
	ПриИзмененииКоличестваСуммыСтроки(Объект, ЭтаФорма, СтрокаТоваров);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыХарактеристика.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗагружаемаяХарактеристика.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьХарактеристикиНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЦена.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПланироватьПоСумме");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСумма.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПланироватьПоСумме");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииКоличестваСуммыСтроки(Объект, Форма, СтрокаТоваров)

	Количество = 0;
	Сумма = 0;
	Для каждого СтрокаПериода Из Форма.Периоды Цикл
		Если НЕ СтрокаПериода.Активная Тогда
			Продолжить;
		КонецЕсли;
		
		Количество = Количество + СтрокаТоваров["Количество_" + СтрокаПериода.ИмяКолонки];
		Если Форма.ПланироватьПоСумме Тогда
			СтрокаТоваров["Сумма_" + СтрокаПериода.ИмяКолонки] = СтрокаТоваров["Количество_" + СтрокаПериода.ИмяКолонки] * СтрокаТоваров["Цена_" + СтрокаПериода.ИмяКолонки];
		Иначе
			СтрокаТоваров["Сумма_" + СтрокаПериода.ИмяКолонки] = 0;
		КонецЕсли; 
		
		Сумма = Сумма + СтрокаТоваров["Сумма_" + СтрокаПериода.ИмяКолонки];
		
	КонецЦикла;
	
	СтрокаТоваров.КоличествоУпаковок 	= Количество;
	СтрокаТоваров.Сумма 				= Сумма;

	РассчитатьИтоговыеПоказатели(Форма, Ложь);

КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтоговыеПоказатели(Форма, РассчитыватьСтроки = Истина)

	Объект = Форма.Объект;
	
	Если НЕ Форма.КроссТаблица Тогда
	 
		Возврат;
	
	КонецЕсли; 
	
	Товары = Объект.Товары;
	
	Для каждого СтрокаПериода Из Форма.Периоды Цикл
		Если НЕ СтрокаПериода.Активная Тогда
			Продолжить;
		КонецЕсли;
		
		Форма["Объект_" + "Товары" + "Количество_" + СтрокаПериода.ИмяКолонки] = 0;
		Форма["Объект_" + "Товары" + "Сумма_" + СтрокаПериода.ИмяКолонки] = 0;
		
	КонецЦикла;
	
	Для каждого СтрокаТЧ Из Товары Цикл
		Если РассчитыватьСтроки Тогда
			СтрокаТЧ.КоличествоУпаковок = 0;
			СтрокаТЧ.Сумма = 0;
			Цена = Неопределено;
		КонецЕсли;
		
		КолонкиЦенДляОбновления = Новый Массив;
		
		Для каждого СтрокаПериода Из Форма.Периоды Цикл
			Если НЕ СтрокаПериода.Активная Тогда
				Продолжить;
			КонецЕсли;
			
			Если РассчитыватьСтроки Тогда
				Если Цена = Неопределено Тогда
					Цена = СтрокаТЧ["Цена_" + СтрокаПериода.ИмяКолонки];
				ИначеЕсли Цена <> СтрокаТЧ["Цена_" + СтрокаПериода.ИмяКолонки] И СтрокаТЧ["Цена_" + СтрокаПериода.ИмяКолонки] <> 0 Тогда
					Цена = 0;
				ИначеЕсли Цена <> СтрокаТЧ["Цена_" + СтрокаПериода.ИмяКолонки] 
					И СтрокаТЧ["Цена_" + СтрокаПериода.ИмяКолонки] = 0 
					И СтрокаТЧ["Количество_" + СтрокаПериода.ИмяКолонки] = 0 Тогда
					КолонкиЦенДляОбновления.Добавить(СтрокаПериода.ИмяКолонки);
				КонецЕсли;
				
				СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.КоличествоУпаковок + СтрокаТЧ["Количество_" + СтрокаПериода.ИмяКолонки];
				СтрокаТЧ["Сумма_" + СтрокаПериода.ИмяКолонки] = СтрокаТЧ["Количество_" + СтрокаПериода.ИмяКолонки] * 
					СтрокаТЧ["Цена_" + СтрокаПериода.ИмяКолонки];
				СтрокаТЧ.Сумма = СтрокаТЧ.Сумма + СтрокаТЧ["Сумма_" + СтрокаПериода.ИмяКолонки];
			КонецЕсли;
			
			Форма["Объект_" + "Товары" + "Количество_" + СтрокаПериода.ИмяКолонки] = Форма["Объект_" + "Товары" + "Количество_" + СтрокаПериода.ИмяКолонки] + СтрокаТЧ["Количество_" + СтрокаПериода.ИмяКолонки];
			Форма["Объект_" + "Товары" + "Сумма_" + СтрокаПериода.ИмяКолонки] = Форма["Объект_" + "Товары" + "Сумма_" + СтрокаПериода.ИмяКолонки] + СтрокаТЧ["Сумма_" + СтрокаПериода.ИмяКолонки];
			
		КонецЦикла;
		
		Если РассчитыватьСтроки Тогда
			СтрокаТЧ["Цена"] = Цена;
			Если Цена > 0 Тогда
				Для каждого КолонкаЦеныДляОбновления Из КолонкиЦенДляОбновления Цикл
					СтрокаТЧ["Цена_" + КолонкаЦеныДляОбновления] = Цена; 
				КонецЦикла;
			КонецЕсли; 
		КонецЕсли;
		
	КонецЦикла; 

КонецПроцедуры

#Область РаботаСБуферомОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	
	РаботаСТабличнымиЧастями.СкопироватьСтрокиВБуферОбмена(Объект.Товары, Элементы.Товары.ВыделенныеСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена()
	
	Если ЭтоПланПродажПоКатегориям Тогда
		ТаблицаТоваров = РаботаСТабличнымиЧастями.СтрокиИзБуфераОбмена(, "ТоварнаяКатегория,РейтингПродаж,Количество");
	Иначе
		ПараметрыОтбора = Новый Соответствие;
		Для Каждого УсловиеОтбора Из ОтборПоНоменклатуре Цикл
			ПараметрыОтбора.Вставить("Номенклатура." + УсловиеОтбора.Ключ, УсловиеОтбора.Значение);
		КонецЦикла;
		
		Колонки = "Номенклатура,Характеристика,НоменклатураНабора,ХарактеристикаНабора,Упаковка,КоличествоУпаковок,Цена,"
			+ ?(ЗаполнятьПартнераВТЧ, "Партнер,", "")
			+ ?(ЗаполнятьСоглашениеВТЧ, "Соглашение,", "")
			+ ?(ЗаполнятьСкладВТЧ, "Склад,", "")
			+ ?(ЭтоПланСборкиРазборки, "ВариантКомплектации,", "");
		
		ТаблицаТоваров = РаботаСТабличнымиЧастями.СтрокиИзБуфераОбмена(ПараметрыОтбора, Колонки);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТаблицаТоваров) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность",
		РаботаСТабличнымиЧастями.ЕстьСтрокиВБуфереОбмена());
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандБуфераОбменаНаКлиенте()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ПоискИСопоставлениеНоменклатуры

&НаСервере
Процедура СопоставитьДанныеТабличногоДокументаСДаннымиИБ()
	
	ПодобраннаяНоменклатура.Очистить();
	Объект.Товары.Очистить();
	
	Если КроссТаблица Тогда
		НомерСтроки = 3;
	Иначе
		НомерСтроки = 2;
	КонецЕсли; 
	
	СтроковыйНомер = Формат(НомерСтроки, "ЧН=0; ЧГ=0");
	ЗаполненыОбязательноеПоле = Ложь;
	Для каждого ОбязательноеПоле Из ОбязательныеПоля Цикл
		
		ЗаполненыОбязательноеПоле = ЗаполненыОбязательноеПоле 
			ИЛИ ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + "C" + Формат(ОбязательноеПоле.Значение, "ЧН=0; ЧГ=0")).Текст);
			
		Если ЗаполненыОбязательноеПоле Тогда
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	КэшированныеЗначения = Неопределено;
	
	Пока ЗаполненыОбязательноеПоле Цикл
		
		НоваяСтрока = Новый Структура("КодСтроки", НомерСтроки);
		
		Для каждого КлючЗначение Из СтруктураПоиска Цикл
			
			Значение = Неопределено;
			Если КлючЗначение.Значение > 0 Тогда
				
				СтроковыйНомер = Формат(НомерСтроки, "ЧН=0; ЧГ=0");
				Значение = ТабличныйДокумент.Область("R" + СтроковыйНомер + "C" + Формат(КлючЗначение.Значение, "ЧН=0; ЧГ=0")).Текст;
				Если ТипЗнч(Значение) = Тип("Строка") 
					И (Найти(КлючЗначение.Ключ,"Количество") > 0
					ИЛИ СтрНайти(КлючЗначение.Ключ,"Цена") > 0
					ИЛИ СтрНайти(КлючЗначение.Ключ,"Сумма") > 0) Тогда
					
					Попытка
						Значение = Число(Значение);
					Исключение
						Значение = Неопределено;
					КонецПопытки;
				ИначеЕсли ТипЗнч(Значение) = Тип("Строка") 
					И СтрНайти(КлючЗначение.Ключ,"Дата") > 0 Тогда
					
					Попытка
						Значение = Дата(Прав(Значение,4) + Сред(Значение,4,2) + Лев(Значение,2)); // Преобразование к дате для строки формата "dd.MM.yyyy"
					Исключение
						Значение = Неопределено;
					КонецПопытки;
					
				КонецЕсли; 
				
			КонецЕсли; 
			
			НоваяСтрока.Вставить(КлючЗначение.Ключ, Значение);
			
		КонецЦикла;
		
		НоваяСтрока.Вставить("ЕстьНесопоставленныеДанные", Истина);
		
		НоваяСтрокаТовары = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, НоваяСтрока);
		
		Если ЗаполнятьПартнера Тогда
			НоваяСтрокаТовары.Партнер = Объект.Партнер;
		КонецЕсли; 
		
		СтруктураДействий = Новый Структура;
		Если НоваяСтрокаТовары.Количество > 0 Тогда
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		КонецЕсли;
		
		Если НЕ КроссТаблица И ПланироватьПоСумме И НЕ ЗначениеЗаполнено(НоваяСтрока.Сумма) Тогда
			СтруктураДействий.Вставить("ПересчитатьСумму");
		КонецЕсли;
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрокаТовары, СтруктураДействий, КэшированныеЗначения);
		НоваяСтрокаТовары.ЗагружаемыйШтрихкод = СтрЗаменить(НоваяСтрокаТовары.ЗагружаемыйШтрихкод, " ", "");
		
		НомерСтроки = НомерСтроки + 1;
		
		СтроковыйНомер = Формат(НомерСтроки, "ЧН=0; ЧГ=0");
		ЗаполненыОбязательноеПоле = Ложь;
		Для каждого ОбязательноеПоле Из ОбязательныеПоля Цикл
			
			ЗаполненыОбязательноеПоле = ЗаполненыОбязательноеПоле 
			ИЛИ ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + "C" + Формат(ОбязательноеПоле.Значение, "ЧН=0; ЧГ=0")).Текст);
			
			Если ЗаполненыОбязательноеПоле Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	СопоставитьЗагружаемыеДанныеСДаннымиИБ();
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСтруктуруПоиска()
	
	СтруктураПоиска = Новый Структура;
	ОбязательныеПоля = Новый Структура;
	
	НомерКолонки = 1;
	Если ЭтоПланПродажПоКатегориям Тогда
		СтруктураПоиска.Вставить("ЗагружаемаяТоварнаяКатегория", НомерКолонки);
		ОбязательныеПоля.Вставить("ЗагружаемаяТоварнаяКатегория", НомерКолонки);
		НомерКолонки = НомерКолонки +1;
	Иначе
		СтруктураПоиска.Вставить("ЗагружаемыйШтрихкод", НомерКолонки);
		ОбязательныеПоля.Вставить("ЗагружаемыйШтрихкод", НомерКолонки);
		НомерКолонки = НомерКолонки +1;
		СтруктураПоиска.Вставить("ЗагружаемыйКод", НомерКолонки);
		ОбязательныеПоля.Вставить("ЗагружаемыйКод", НомерКолонки);
		НомерКолонки = НомерКолонки +1;
		СтруктураПоиска.Вставить("ЗагружаемыйАртикул", НомерКолонки);
		ОбязательныеПоля.Вставить("ЗагружаемыйАртикул", НомерКолонки);
		НомерКолонки = НомерКолонки +1;
		СтруктураПоиска.Вставить("ЗагружаемаяНоменклатура", НомерКолонки);
		ОбязательныеПоля.Вставить("ЗагружаемаяНоменклатура", НомерКолонки);
		НомерКолонки = НомерКолонки +1;
		Если ИспользоватьХарактеристикиНоменклатуры Тогда
			СтруктураПоиска.Вставить("ЗагружаемаяХарактеристика", НомерКолонки);
			НомерКолонки = НомерКолонки +1;
		КонецЕсли;
	КонецЕсли;
	Если ЗаполнятьПартнераВТЧ Тогда
		СтруктураПоиска.Вставить("ЗагружаемыйПартнер", НомерКолонки);
		НомерКолонки = НомерКолонки +1;
	КонецЕсли; 
	Если ЗаполнятьСоглашениеВТЧ Тогда
		СтруктураПоиска.Вставить("ЗагружаемоеСоглашение", НомерКолонки);
		НомерКолонки = НомерКолонки +1;
	КонецЕсли;
	Если ЗаполнятьСкладВТЧ Тогда
		СтруктураПоиска.Вставить("ЗагружаемыйСклад", НомерКолонки);
		НомерКолонки = НомерКолонки +1;
	КонецЕсли;
	Если ЭтоПланСборкиРазборки Тогда
		СтруктураПоиска.Вставить("ЗагружаемыйВариантКомплектации", НомерКолонки);
		НомерКолонки = НомерКолонки +1;
	КонецЕсли;
	Если ЭтоПланПродажПоКатегориям И ИспользоватьРасчетПоСкоростиПродаж Тогда
		СтруктураПоиска.Вставить("ЗагружаемыйРейтингПродаж", НомерКолонки);
		НомерКолонки = НомерКолонки +1;
	КонецЕсли;
	
	Если КроссТаблица Тогда
		
		Если НЕ ЭтоПланПродажПоКатегориям 
			И ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
			СтруктураПоиска.Вставить("ЗагружаемаяУпаковка", НомерКолонки);
			НомерКолонки = НомерКолонки +1;
		КонецЕсли; 
		
		Для каждого Период Из ЭтаФорма.Периоды Цикл
			
			Если НЕ Период.Активная ИЛИ Период.НомерКолонки <=0 Тогда
				Продолжить;
			КонецЕсли; 
			СтруктураПоиска.Вставить("Количество_"+ Период.ИмяКолонки, НомерКолонки);
			НомерКолонки = НомерКолонки +1;
			Если ПланироватьПоСумме Тогда
				СтруктураПоиска.Вставить("Цена_"+ Период.ИмяКолонки, НомерКолонки);
				НомерКолонки = НомерКолонки +1;
				СтруктураПоиска.Вставить("Сумма_"+ Период.ИмяКолонки, НомерКолонки);
				НомерКолонки = НомерКолонки +1;
			КонецЕсли; 
		КонецЦикла;
		 
	Иначе
		
		Если ТипПлана = Перечисления.ТипыПланов.ПланПродаж Тогда
			СтруктураПоиска.Вставить("ДатаОтгрузки", НомерКолонки);
			НомерКолонки = НомерКолонки +1;
		ИначеЕсли ЭтоПланСборкиРазборки Тогда
			СтруктураПоиска.Вставить("ДатаПоступления", НомерКолонки);
			НомерКолонки = НомерКолонки +1;
		ИначеЕсли ТипПлана = Перечисления.ТипыПланов.ПланЗакупок Тогда
			СтруктураПоиска.Вставить("ДатаПоступления", НомерКолонки);
			НомерКолонки = НомерКолонки +1;
		КонецЕсли;
		
		СтруктураПоиска.Вставить("КоличествоУпаковок", НомерКолонки);
		НомерКолонки = НомерКолонки +1;
		Если НЕ ЭтоПланПродажПоКатегориям 
			И ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
			СтруктураПоиска.Вставить("ЗагружаемаяУпаковка", НомерКолонки);
			НомерКолонки = НомерКолонки +1;
		КонецЕсли; 
		
		Если ПланироватьПоСумме Тогда
			СтруктураПоиска.Вставить("Цена", НомерКолонки);
			НомерКолонки = НомерКолонки +1;
			СтруктураПоиска.Вставить("Сумма", НомерКолонки);
			НомерКолонки = НомерКолонки +1;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СопоставитьЗагружаемыеДанныеСДаннымиИБ()
	
	Если ЭтоПланПродажПоКатегориям Тогда
		
		СопоставитьТоварныеКатегорииРейтинги();
		
	Иначе
	
		ЗаполнитьТаблицуНоменклатуры();
		
		ПроизводитьПовторныйПоискПоШтрихкодам = Истина;
		Если ТаблицаШтрихкодов.Количество() = 0 Тогда
			
			ВыполнитьПоискПоШтрихКодам(); // Если первый раз загружаем данные - выполняем поиск всех строк
			ПроизводитьПовторныйПоискПоШтрихкодам = Ложь;
			
		КонецЕсли;
		
	КонецЕсли; 
	
	КэшированныеЗначения = Неопределено;
	
	Для каждого СтрокаТЧ Из Объект.Товары Цикл
		
		Если НЕ СтрокаТЧ.ЕстьНесопоставленныеДанные Тогда
			Продолжить;
		КонецЕсли; 
		
		
		Если НЕ ЭтоПланПродажПоКатегориям Тогда
			НайтиНоменклатуруПоЗагружаемымДанным(СтрокаТЧ);
		КонецЕсли;
		
		СтруктураДействий = Новый Структура;
		Если СтрокаТЧ.Количество > 0 Тогда
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		КонецЕсли;
		
		Если НЕ ЭтоПланПродажПоКатегориям И НЕ КроссТаблица И ПланироватьПоСумме И НЕ ЗначениеЗаполнено(СтрокаТЧ.Сумма) Тогда
			СтруктураДействий.Вставить("ПересчитатьСумму");
		КонецЕсли;
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
		
		ПроверитьСопоставлениеДанныхСтрокиЗагрузки(СтрокаТЧ, ЭтаФорма);
		
	КонецЦикла;
	
	Если НЕ ЭтоПланПродажПоКатегориям И ПроизводитьПовторныйПоискПоШтрихкодам Тогда
	
		ВыполнитьПоискПоШтрихКодам(); 
	
	КонецЕсли;
	
	Если НЕ ЭтоПланПродажПоКатегориям Тогда
		
		СопоставитьУпаковки();
		
		СопоставитьПартнераИСоглашение();
		
		СопоставитьСклады();
		
		СопоставитьВариантыКомплектаций();
		
		
		ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
		
	КонецЕсли;
	
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	
	НастроитьВариантыОтображенияСтрок(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура НайтиНоменклатуруПоЗагружаемымДанным(СтрокаТЧ)
	
	НомерСтроки = СтрокаТЧ.НомерСтроки;
	СтрокаПоискаКод            = ВРег(СтрЗаменить(СтрокаТЧ.ЗагружаемыйКод, " ", "")); 
	СтрокаПоискаАртикул        = ВРег(СтрЗаменить(СтрокаТЧ.ЗагружаемыйАртикул, " ", "")); 
	СтрокаПоискаНоменклатура   = ВРег(СтрЗаменить(СтрокаТЧ.ЗагружаемаяНоменклатура, " ", ""));
	СтрокаПоискаХарактеристика = ВРег(СтрЗаменить(СтрокаТЧ.ЗагружаемаяХарактеристика, " ", ""));
	
	Если ЗначениеЗаполнено(СтрокаТЧ.ЗагружаемыйШтрихкод) Тогда
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
			
			НайденныеСтроки = ТаблицаШтрихкодов.НайтиСтроки(Новый Структура("Штрихкод", СтрокаТЧ.ЗагружаемыйШтрихкод));
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(СтрокаТЧ, НайденныеСтроки[0]);
			КонецЕсли;
			
		КонецЕсли; 
	ИначеЕсли ЗначениеЗаполнено(СтрокаТЧ.ЗагружаемыйКод) И ЗначениеЗаполнено(СтрокаТЧ.ЗагружаемаяХарактеристика) Тогда
		
		НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("Код, НаименованиеХарактеристикиПоиск", 
			СтрокаПоискаКод, 
			СтрокаПоискаХарактеристика));
		Если НайденныеСтроки.Количество() = 0 Тогда
			НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("Код, НаименованиеХарактеристикиПолноеПоиск", 
				СтрокаПоискаКод, 
				СтрокаПоискаХарактеристика));
			Если НайденныеСтроки.Количество() = 0 Тогда
				НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("Код", 
					СтрокаПоискаКод));
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ПодобраннаяСтрока = ПодобраннаяНоменклатура.Добавить();
			ПодобраннаяСтрока.КодСтроки = НомерСтроки;
			ЗаполнитьЗначенияСвойств(ПодобраннаяСтрока, НайденнаяСтрока);
		КонецЦикла;
		
	ИначеЕсли ЗначениеЗаполнено(СтрокаТЧ.ЗагружаемыйАртикул) И ЗначениеЗаполнено(СтрокаТЧ.ЗагружаемаяНоменклатура) И ЗначениеЗаполнено(СтрокаТЧ.ЗагружаемаяХарактеристика) Тогда
		
		НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоиск, НаименованиеПоиск, НаименованиеХарактеристикиПоиск", 
			СтрокаПоискаАртикул, 
			СтрокаПоискаНоменклатура,
			СтрокаПоискаХарактеристика));
		Если НайденныеСтроки.Количество() = 0 Тогда
			НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоиск, НаименованиеПолноеПоиск, НаименованиеХарактеристикиПоиск", 
				СтрокаПоискаАртикул, 
				СтрокаПоискаНоменклатура,
				СтрокаПоискаХарактеристика));
			Если НайденныеСтроки.Количество() = 0 Тогда
				НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоиск, НаименованиеПоиск, НаименованиеХарактеристикиПолноеПоиск", 
					СтрокаПоискаАртикул, 
					СтрокаПоискаНоменклатура,
					СтрокаПоискаХарактеристика));
				Если НайденныеСтроки.Количество() = 0 Тогда
					НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоиск, НаименованиеПолноеПоиск, НаименованиеХарактеристикиПолноеПоиск", 
						СтрокаПоискаАртикул, 
						СтрокаПоискаНоменклатура,
						СтрокаПоискаХарактеристика));
					Если НайденныеСтроки.Количество() = 0 Тогда
						НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоиск, НаименованиеПоиск", 
							СтрокаПоискаАртикул, 
							СтрокаПоискаНоменклатура));
						Если НайденныеСтроки.Количество() = 0 Тогда
							НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоиск, НаименованиеПолноеПоиск", 
								СтрокаПоискаАртикул, 
								СтрокаПоискаНоменклатура));
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ПодобранныеРанееТовары = ПодобраннаяНоменклатура.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, КодСтроки",НайденнаяСтрока.Номенклатура, НайденнаяСтрока.Характеристика, НомерСтроки));
			Если ПодобранныеРанееТовары.Количество() = 0 Тогда
				ПодобраннаяСтрока = ПодобраннаяНоменклатура.Добавить();
				ПодобраннаяСтрока.КодСтроки = НомерСтроки;
				ЗаполнитьЗначенияСвойств(ПодобраннаяСтрока, НайденнаяСтрока);
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ЗначениеЗаполнено(СтрокаТЧ.ЗагружаемыйКод) И НЕ ЗначениеЗаполнено(СтрокаТЧ.ЗагружаемаяХарактеристика) Тогда
		
		НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("Код, НаименованиеПоиск",
			СтрокаПоискаКод,
			СтрокаПоискаНоменклатура));
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("Код, НаименованиеПолноеПоиск",
				СтрокаПоискаКод,
				СтрокаПоискаНоменклатура));
			Если НайденныеСтроки.Количество() = 0 Тогда
				НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("Код", 
					СтрокаПоискаКод));
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ПодобранныеРанееТовары = ПодобраннаяНоменклатура.НайтиСтроки(Новый Структура("Номенклатура, КодСтроки",НайденнаяСтрока.Номенклатура, НомерСтроки));
			Если ПодобранныеРанееТовары.Количество() = 0 Тогда
				ПодобраннаяСтрока = ПодобраннаяНоменклатура.Добавить();
				ПодобраннаяСтрока.КодСтроки = НомерСтроки;
				ЗаполнитьЗначенияСвойств(ПодобраннаяСтрока, НайденнаяСтрока,,"Характеристика");
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ЗначениеЗаполнено(СтрокаТЧ.ЗагружаемыйАртикул) И ЗначениеЗаполнено(СтрокаТЧ.ЗагружаемаяНоменклатура) И НЕ ЗначениеЗаполнено(СтрокаТЧ.ЗагружаемаяХарактеристика) Тогда
		
		НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоиск, НаименованиеПоиск",
			СтрокаПоискаАртикул,
			СтрокаПоискаНоменклатура));
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоиск, НаименованиеПолноеПоиск",
				СтрокаПоискаАртикул,
				СтрокаПоискаНоменклатура));
			Если НайденныеСтроки.Количество() = 0 Тогда
				НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоиск", 
					СтрокаПоискаАртикул));
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ПодобранныеРанееТовары = ПодобраннаяНоменклатура.НайтиСтроки(Новый Структура("Номенклатура, КодСтроки",НайденнаяСтрока.Номенклатура, НомерСтроки));
			Если ПодобранныеРанееТовары.Количество() = 0 Тогда
				ПодобраннаяСтрока = ПодобраннаяНоменклатура.Добавить();
				ПодобраннаяСтрока.КодСтроки = НомерСтроки;
				ЗаполнитьЗначенияСвойств(ПодобраннаяСтрока, НайденнаяСтрока,,"Характеристика");
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТЧ.ЗагружаемыйАртикул) И ЗначениеЗаполнено(СтрокаТЧ.ЗагружаемаяНоменклатура) И ЗначениеЗаполнено(СтрокаТЧ.ЗагружаемаяХарактеристика) Тогда
		
		НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("НаименованиеХарактеристикиПоиск, НаименованиеПоиск",
			СтрокаПоискаХарактеристика,
			СтрокаПоискаНоменклатура));
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("НаименованиеХарактеристикиПоиск, НаименованиеПолноеПоиск",
				СтрокаПоискаХарактеристика,
				СтрокаПоискаНоменклатура));
			Если НайденныеСтроки.Количество() = 0 Тогда
				НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("НаименованиеХарактеристикиПолноеПоиск, НаименованиеПоиск",
					СтрокаПоискаХарактеристика,
					СтрокаПоискаНоменклатура));
				Если НайденныеСтроки.Количество() = 0 Тогда
					НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("НаименованиеХарактеристикиПолноеПоиск, НаименованиеПолноеПоиск",
						СтрокаПоискаХарактеристика,
						СтрокаПоискаНоменклатура));
					Если НайденныеСтроки.Количество() = 0 Тогда
						НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("НаименованиеПоиск", 
							СтрокаПоискаНоменклатура));
						Если НайденныеСтроки.Количество() = 0 Тогда
							НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("НаименованиеПолноеПоиск", 
								СтрокаПоискаНоменклатура));
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ПодобранныеРанееТовары = ПодобраннаяНоменклатура.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, КодСтроки", НайденнаяСтрока.Номенклатура, НайденнаяСтрока.Характеристика, НомерСтроки));
			Если ПодобранныеРанееТовары.Количество() = 0 Тогда
				ПодобраннаяСтрока = ПодобраннаяНоменклатура.Добавить();
				ПодобраннаяСтрока.КодСтроки = НомерСтроки;
				ЗаполнитьЗначенияСвойств(ПодобраннаяСтрока, НайденнаяСтрока);
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ЗначениеЗаполнено(СтрокаТЧ.ЗагружаемыйАртикул) И НЕ ЗначениеЗаполнено(СтрокаТЧ.ЗагружаемаяНоменклатура) И НЕ ЗначениеЗаполнено(СтрокаТЧ.ЗагружаемаяХарактеристика) Тогда
		
		НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоиск",
			СтрокаПоискаАртикул));
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ПодобранныеРанееТовары = ПодобраннаяНоменклатура.НайтиСтроки(Новый Структура("Номенклатура, КодСтроки",НайденнаяСтрока.Номенклатура, НомерСтроки));
			Если ПодобранныеРанееТовары.Количество() = 0 Тогда
				ПодобраннаяСтрока = ПодобраннаяНоменклатура.Добавить();
				ПодобраннаяСтрока.КодСтроки = НомерСтроки;
				ЗаполнитьЗначенияСвойств(ПодобраннаяСтрока, НайденнаяСтрока,,"Характеристика");
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ЗначениеЗаполнено(СтрокаТЧ.ЗагружаемыйАртикул) И НЕ ЗначениеЗаполнено(СтрокаТЧ.ЗагружаемаяНоменклатура) И ЗначениеЗаполнено(СтрокаТЧ.ЗагружаемаяХарактеристика) Тогда
			
		НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоиск, НаименованиеХарактеристикиПоиск",
			СтрокаПоискаАртикул,
			СтрокаПоискаХарактеристика));
		Если НайденныеСтроки.Количество() = 0 Тогда
			НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоиск, НаименованиеХарактеристикиПолноеПоиск",
				СтрокаПоискаАртикул,
				СтрокаПоискаХарактеристика));
		КонецЕсли;
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ПодобранныеРанееТовары = ПодобраннаяНоменклатура.НайтиСтроки(Новый Структура("Номенклатура, КодСтроки",НайденнаяСтрока.Номенклатура, НомерСтроки));
			Если ПодобранныеРанееТовары.Количество() = 0 Тогда
				ПодобраннаяСтрока = ПодобраннаяНоменклатура.Добавить();
				ПодобраннаяСтрока.КодСтроки = НомерСтроки;
				ЗаполнитьЗначенияСвойств(ПодобраннаяСтрока, НайденнаяСтрока);
			КонецЕсли;
		КонецЦикла;
			
	ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТЧ.ЗагружаемыйАртикул) И ЗначениеЗаполнено(СтрокаТЧ.ЗагружаемаяНоменклатура) И НЕ ЗначениеЗаполнено(СтрокаТЧ.ЗагружаемаяХарактеристика) Тогда
		
		НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("НаименованиеПоиск",
		СтрокаПоискаНоменклатура));
		Если НайденныеСтроки.Количество() = 0 Тогда
			НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("НаименованиеПолноеПоиск", 
				СтрокаПоискаНоменклатура));
		КонецЕсли;
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ПодобранныеРанееТовары = ПодобраннаяНоменклатура.НайтиСтроки(Новый Структура("Номенклатура, КодСтроки",НайденнаяСтрока.Номенклатура, НомерСтроки));
			Если ПодобранныеРанееТовары.Количество() = 0 Тогда
				ПодобраннаяСтрока = ПодобраннаяНоменклатура.Добавить();
				ПодобраннаяСтрока.КодСтроки = НомерСтроки;
				ЗаполнитьЗначенияСвойств(ПодобраннаяСтрока, НайденнаяСтрока,,"Характеристика");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	МассивПодобраннойНоменклатуры = ПодобраннаяНоменклатура.НайтиСтроки(Новый Структура("КодСтроки", НомерСтроки));
	
	Если МассивПодобраннойНоменклатуры.Количество() = 1 Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, МассивПодобраннойНоменклатуры.Получить(0));
	Иначе
		СтрокаТЧ.КодСтроки = СтрокаТЧ.НомерСтроки;
	КонецЕсли;
	
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьПоискПоШтрихКодам()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.ЗагружаемыйШтрихкод,
	|	Товары.КодСтроки
	|ПОМЕСТИТЬ ШтрихКоды
	|ИЗ
	|	&Товары КАК Товары
	|ГДЕ
	|	Товары.ЗагружаемыйШтрихКод <> """"
	|	И Товары.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ШтрихКоды.КодСтроки,
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
	|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
	|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
	|	ШтрихкодыНоменклатуры.Упаковка КАК Упаковка
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ШтрихКоды КАК ШтрихКоды
	|		ПО ШтрихкодыНоменклатуры.Штрихкод = ШтрихКоды.ЗагружаемыйШтрихкод
	|ГДЕ
	|	&ТекстУсловияОтбораПоНоменклатуре
	|";
	
	ТекстУсловияОтбораПоНоменклатуре = "ИСТИНА";
	Если ЗначениеЗаполнено(ОтборПоНоменклатуре) Тогда
		
		Условия = Новый Массив;
		Для Каждого Отбор Из ОтборПоНоменклатуре Цикл
			Условия.Добавить(СтрШаблон("ШтрихкодыНоменклатуры.Номенклатура.%1 В (&%2)", Отбор.Ключ, Отбор.Ключ));
			Запрос.УстановитьПараметр(Отбор.Ключ, Отбор.Значение);
		КонецЦикла;
		
		ТекстУсловияОтбораПоНоменклатуре = СтрСоединить(Условия, Символы.ПС + Символы.Таб + "И ");
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ТекстУсловияОтбораПоНоменклатуре", ТекстУсловияОтбораПоНоменклатуре);
	
	Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить());
	
	Результат = Запрос.Выполнить();
	
	НайденныеШтрихКоды = Результат.Выгрузить();
	Для каждого НайденныйШтрихКод Из НайденныеШтрихКоды Цикл
	
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("КодСтроки", НайденныйШтрихКод.КодСтроки));
		Если НайденныеСтроки.Количество() > 0 Тогда
		
			ЗаполнитьЗначенияСвойств(НайденныеСтроки[0], НайденныйШтрихКод);
			
			ПроверитьСопоставлениеДанныхСтрокиЗагрузки(НайденныеСтроки[0], ЭтаФорма);
		
		КонецЕсли;
	КонецЦикла; 
	
	НайденныеШтрихКоды.Свернуть("Штрихкод, Номенклатура, Характеристика, Упаковка","");
	
	Если ТаблицаШтрихкодов.Количество() = 0 Тогда
		
		ТаблицаШтрихкодов.Загрузить(НайденныеШтрихКоды);
		
	Иначе
		
		Для каждого НайденныйШтрихКод Из НайденныеШтрихКоды Цикл
			НайденныеСтроки = ТаблицаШтрихкодов.НайтиСтроки(Новый Структура("Штрихкод", НайденныйШтрихКод.Штрихкод));
			Если НайденныеСтроки.Количество() = 0 Тогда
				НоваяСтрока = ТаблицаШтрихкодов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденныйШтрихКод);
			КонецЕсли;
		КонецЦикла; 
	
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуНоменклатуры()
	
	ТаблицаНоменклатуры.Очистить();
	
	// Подготовка списка загружаемой номенклатуры для установления отбора
	ТаблицаЗагружаемойНоменклатуры = Объект.Товары.Выгрузить();
	
	СписокЗагружаемойНоменклатуры = Новый Массив;
	
	Если ТаблицаЗагружаемойНоменклатуры.Количество() <> 0 Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
			|	ЗагружаемыеДанные.НомерСтроки                                       КАК Идентификатор,
			|	ВЫРАЗИТЬ(ЗагружаемыеДанные.ЗагружаемаяНоменклатура КАК СТРОКА(200)) КАК Номенклатура,
			|	ВЫРАЗИТЬ(ЗагружаемыеДанные.ЗагружаемыйАртикул КАК СТРОКА(50))       КАК Артикул,
			|	ВЫРАЗИТЬ(ЗагружаемыеДанные.ЗагружаемыйШтрихКод КАК СТРОКА(200))     КАК Штрихкод,
			|	ВЫРАЗИТЬ(ЗагружаемыеДанные.ЗагружаемыйКод КАК СТРОКА(11))           КАК КодНоменклатуры
			|ПОМЕСТИТЬ ВтЗагружаемыеДанные
			|ИЗ
			|	&ЗагружаемыеДанные КАК ЗагружаемыеДанные
			|
			|;
			|
			|ВЫБРАТЬ
			|	ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
			|	Штрихкоды.Номенклатура          КАК Номенклатура,
			|	Штрихкоды.Характеристика        КАК Характеристика,
			|	Штрихкоды.Упаковка              КАК Упаковка
			|ПОМЕСТИТЬ ВтДанныеШтрихкодов
			|ИЗ
			|	ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
			|	
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
			|	ПО Штрихкоды.Штрихкод = ЗагружаемыеДанные.Штрихкод
			|
			|ГДЕ
			|	НЕ ЗагружаемыеДанные.Штрихкод = """"
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Идентификатор
			|
			|;
			|
			|ВЫБРАТЬ
			|	СпрНоменклатура.Идентификатор                      КАК Идентификатор,
			|	МАКСИМУМ(СпрНоменклатура.Номенклатура)             КАК Номенклатура,
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СпрНоменклатура.Номенклатура) КАК КоличествоНоменклатуры
			|ИЗ
			|	(ВЫБРАТЬ
			|		ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
			|		СпрНоменклатура.Ссылка          КАК Номенклатура
			|	ИЗ
			|		ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
			|		
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеШтрихкодов КАК ДанныеШтрихкодов
			|		ПО ДанныеШтрихкодов.Идентификатор = ЗагружаемыеДанные.Идентификатор
			|		
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
			|		ПО СпрНоменклатура.Артикул = ЗагружаемыеДанные.Артикул
			|
			|	ГДЕ
			|		ДанныеШтрихкодов.Идентификатор ЕСТЬ NULL
			|		И НЕ ЗагружаемыеДанные.Артикул = """"
			|		И НЕ СпрНоменклатура.ПометкаУдаления
			|
			|	ОБЪЕДИНИТЬ ВСЕ
			|
			|	ВЫБРАТЬ
			|		ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
			|		СпрНоменклатура.Ссылка          КАК Номенклатура
			|	ИЗ
			|		ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
			|		
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеШтрихкодов КАК ДанныеШтрихкодов
			|		ПО ДанныеШтрихкодов.Идентификатор = ЗагружаемыеДанные.Идентификатор
			|		
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
			|		ПО СпрНоменклатура.Код = ЗагружаемыеДанные.КодНоменклатуры
			|
			|	ГДЕ
			|		ДанныеШтрихкодов.Идентификатор ЕСТЬ NULL
			|		И НЕ ЗагружаемыеДанные.КодНоменклатуры = """"
			|		И НЕ СпрНоменклатура.ПометкаУдаления
			|
			|	ОБЪЕДИНИТЬ ВСЕ
			|
			|	ВЫБРАТЬ
			|		ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
			|		СпрНоменклатура.Ссылка          КАК Номенклатура
			|	ИЗ
			|		ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
			|		
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеШтрихкодов КАК ДанныеШтрихкодов
			|		ПО ДанныеШтрихкодов.Идентификатор = ЗагружаемыеДанные.Идентификатор
			|		
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
			|		ПО СпрНоменклатура.Наименование = ЗагружаемыеДанные.Номенклатура
			|
			|	ГДЕ
			|		ДанныеШтрихкодов.Идентификатор ЕСТЬ NULL
			|		И НЕ ЗагружаемыеДанные.Номенклатура = """"
			|		И НЕ СпрНоменклатура.ПометкаУдаления
			|
			|	ОБЪЕДИНИТЬ ВСЕ
			|
			|	ВЫБРАТЬ
			|		ДанныеШтрихкодов.Идентификатор КАК Идентификатор,
			|		ДанныеШтрихкодов.Номенклатура  КАК Номенклатура
			|	ИЗ
			|		ВтДанныеШтрихкодов КАК ДанныеШтрихкодов
			|	) КАК СпрНоменклатура
			|
			|СГРУППИРОВАТЬ ПО
			|	СпрНоменклатура.Идентификатор
			|
			|ИМЕЮЩИЕ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СпрНоменклатура.Номенклатура) < 2");
		
		Запрос.УстановитьПараметр("ЗагружаемыеДанные", ТаблицаЗагружаемойНоменклатуры);
		
		СписокЗагружаемойНоменклатуры = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
	|	Номенклатура.Код КАК Код,
	|	Номенклатура.Артикул КАК Артикул
	|ПОМЕСТИТЬ НомХар
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.ЭтоГруппа
	|	И НЕ Номенклатура.ПометкаУдаления
	|	И Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
	|	И Номенклатура.Ссылка В (&ОтборПоЗагружаемойНоменклатуре)
	|	И &ТекстУсловияОтбор
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка,
	|	ХарактеристикиНоменклатуры.Ссылка,
	|	Номенклатура.Код,
	|	Номенклатура.Артикул
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО (ВЫБОР
	|				КОГДА Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|					ТОГДА Номенклатура.Ссылка
	|				КОГДА Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|					ТОГДА Номенклатура.ВладелецХарактеристик
	|				КОГДА Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|					ТОГДА Номенклатура.ВидНоменклатуры
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ = ХарактеристикиНоменклатуры.Владелец)
	|ГДЕ
	|	Номенклатура.ИспользованиеХарактеристик <> ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
	|	И НЕ Номенклатура.ПометкаУдаления
	|	И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
	|	И Номенклатура.Ссылка В (&ОтборПоЗагружаемойНоменклатуре)
	|	И &ТекстУсловияОтбор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НомХар.Код КАК Код,
	|	НомХар.Артикул КАК Артикул,
	|	"""" КАК АртикулПоиск,
	|	НомХар.Номенклатура.Наименование КАК Наименование,
	|	"""" КАК НаименованиеПоиск,
	|	НомХар.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
	|	"""" КАК НаименованиеПолноеПоиск,
	|	НомХар.Номенклатура КАК Номенклатура,
	|	НомХар.Характеристика.Наименование КАК НаименованиеХарактеристики,
	|	"""" КАК НаименованиеХарактеристикиПоиск,
	|	НомХар.Характеристика.НаименованиеПолное КАК НаименованиеХарактеристикиПолное,
	|	"""" КАК НаименованиеХарактеристикиПолноеПоиск,
	|	НомХар.Характеристика КАК Характеристика
	|ИЗ
	|	НомХар КАК НомХар";
	
	ТекстУсловияОтбор = "ИСТИНА";
	Если ЗначениеЗаполнено(ОтборПоНоменклатуре) Тогда
		
		Условия = Новый Массив;
		Для Каждого Отбор Из ОтборПоНоменклатуре Цикл
			Условия.Добавить(СтрШаблон("Номенклатура.%1 В (&%2)", Отбор.Ключ, Отбор.Ключ));
			Запрос.УстановитьПараметр(Отбор.Ключ, Отбор.Значение);
		КонецЦикла;
		
		ТекстУсловияОтбор = СтрСоединить(Условия, Символы.ПС + Символы.Таб + "И ");;
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ТекстУсловияОтбор", ТекстУсловияОтбор);
	
	Запрос.УстановитьПараметр("ОтборПоЗагружаемойНоменклатуре", СписокЗагружаемойНоменклатуры);
	Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить());
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ТаблицаНоменклатуры.Загрузить(Результаты[1].Выгрузить());
	
	Для Каждого ТекСтрока Из ТаблицаНоменклатуры Цикл
		ТекСтрока.Код = ВРег(СтрЗаменить(ТекСтрока.Код, " ", ""));
		ТекСтрока.АртикулПоиск = ВРег(СтрЗаменить(ТекСтрока.Артикул, " ", ""));
		ТекСтрока.НаименованиеПоиск = ВРег(СтрЗаменить(ТекСтрока.Наименование, " ", ""));
		ТекСтрока.НаименованиеПолноеПоиск = ВРег(СтрЗаменить(ТекСтрока.НаименованиеПолное, " ", ""));
		ТекСтрока.НаименованиеХарактеристикиПоиск = ВРег(СтрЗаменить(ТекСтрока.НаименованиеХарактеристики, " ", ""));
		ТекСтрока.НаименованиеХарактеристикиПолноеПоиск = ВРег(СтрЗаменить(ТекСтрока.НаименованиеХарактеристикиПолное, " ", ""));
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СопоставитьТоварныеКатегорииРейтинги()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДляСопоставления.ЗагружаемаяТоварнаяКатегория,
	|	ДанныеДляСопоставления.ЗагружаемыйРейтингПродаж,
	|	ДанныеДляСопоставления.КодСтроки
	|ПОМЕСТИТЬ ДанныеДляСопоставления
	|ИЗ
	|	&ДанныеДляСопоставления КАК ДанныеДляСопоставления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ТоварныеКатегории.Ссылка) КАК ТоварнаяКатегорияСсылка,
	|	ДанныеДляСопоставления.КодСтроки,
	|	КОЛИЧЕСТВО(ДанныеДляСопоставления.КодСтроки) КАК Количество
	|ИЗ
	|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТоварныеКатегории КАК ТоварныеКатегории
	|		ПО (ТоварныеКатегории.Наименование ПОДОБНО ДанныеДляСопоставления.ЗагружаемаяТоварнаяКатегория)
	|			И НЕ ТоварныеКатегории.ЭтоГруппа
	|ГДЕ
	|	НЕ ТоварныеКатегории.Ссылка ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДляСопоставления.КодСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(РейтингиПродажНоменклатуры.Ссылка) КАК РейтингПродажСсылка,
	|	ДанныеДляСопоставления.КодСтроки,
	|	КОЛИЧЕСТВО(ДанныеДляСопоставления.КодСтроки) КАК Количество
	|ИЗ
	|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РейтингиПродажНоменклатуры КАК РейтингиПродажНоменклатуры
	|		ПО (РейтингиПродажНоменклатуры.Наименование ПОДОБНО ДанныеДляСопоставления.ЗагружаемыйРейтингПродаж)
	|ГДЕ
	|	НЕ РейтингиПродажНоменклатуры.Ссылка ЕСТЬ NULL 
	|	И &ИспользоватьРасчетПоСкоростиПродаж
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДляСопоставления.КодСтроки";
	
	Запрос.УстановитьПараметр("ДанныеДляСопоставления", Объект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("ИспользоватьРасчетПоСкоростиПродаж", ИспользоватьРасчетПоСкоростиПродаж);
	
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	
	ТаблицаТоварныеКатегории = РезультатыЗапросов[1].Выгрузить();
	
	Если ИспользоватьРасчетПоСкоростиПродаж Тогда
		ТаблицаРейтингиПродаж = РезультатыЗапросов[2].Выгрузить();
	КонецЕсли; 
	
	Для каждого СтрокаТаблицы Из Объект.Товары Цикл 
		
		СтрокаТоварнаяКатегория = ТаблицаТоварныеКатегории.Найти(СтрокаТаблицы.КодСтроки, "КодСтроки");
		Если СтрокаТоварнаяКатегория <> Неопределено Тогда 
			Если СтрокаТоварнаяКатегория.Количество = 1 Тогда 
				СтрокаТаблицы.ТоварнаяКатегория  = СтрокаТоварнаяКатегория.ТоварнаяКатегорияСсылка;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаРейтингПродаж = Неопределено;
		Если ИспользоватьРасчетПоСкоростиПродаж Тогда
			СтрокаРейтингПродаж = ТаблицаРейтингиПродаж.Найти(СтрокаТаблицы.КодСтроки, "КодСтроки");
			Если СтрокаРейтингПродаж <> Неопределено Тогда 
				Если СтрокаРейтингПродаж.Количество = 1 Тогда 
					СтрокаТаблицы.РейтингПродаж  = СтрокаРейтингПродаж.РейтингПродажСсылка;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаТоварнаяКатегория <> Неопределено ИЛИ СтрокаРейтингПродаж <> Неопределено Тогда
			ПроверитьСопоставлениеДанныхСтрокиЗагрузки(СтрокаТаблицы, ЭтаФорма);
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СопоставитьПартнераИСоглашение()
	
	Если НЕ (ЗаполнятьПартнераВТЧ ИЛИ ЗаполнятьСоглашениеВТЧ) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДляСопоставления.ЗагружаемыйПартнер,
	|	ДанныеДляСопоставления.Партнер,
	|	ДанныеДляСопоставления.ЗагружаемоеСоглашение,
	|	ВЫРАЗИТЬ(ДанныеДляСопоставления.КодСтроки КАК ЧИСЛО(15,0)) КАК КодСтроки
	|ПОМЕСТИТЬ ДанныеДляСопоставления
	|ИЗ
	|	&ДанныеДляСопоставления КАК ДанныеДляСопоставления
	|ГДЕ
	|	ДанныеДляСопоставления.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|	ИЛИ ДанныеДляСопоставления.Соглашение = ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка)
	|	ИЛИ ДанныеДляСопоставления.Соглашение = НЕОПРЕДЕЛЕНО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(Партнеры.Ссылка) КАК Партнер,
	|	ДанныеДляСопоставления.КодСтроки,
	|	КОЛИЧЕСТВО(ДанныеДляСопоставления.КодСтроки) КАК Количество
	|ПОМЕСТИТЬ ДанныеДляСопоставленияПоПортнеру
	|ИЗ
	|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
	|		ПО (Партнеры.Наименование ПОДОБНО ДанныеДляСопоставления.ЗагружаемыйПартнер)
	|ГДЕ
	|	НЕ Партнеры.Ссылка ЕСТЬ NULL 
	|	И ДанныеДляСопоставления.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДляСопоставления.КодСтроки
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ДанныеДляСопоставления.КодСтроки) = 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДляСопоставленияПоПортнеру.Партнер,
	|	ДанныеДляСопоставленияПоПортнеру.КодСтроки,
	|	ДанныеДляСопоставленияПоПортнеру.Количество
	|ИЗ
	|	ДанныеДляСопоставленияПоПортнеру КАК ДанныеДляСопоставленияПоПортнеру
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(Соглашения.Ссылка) КАК Соглашение,
	|	ДанныеДляСопоставления.КодСтроки,
	|	КОЛИЧЕСТВО(ДанныеДляСопоставления.КодСтроки) КАК Количество
	|ИЗ
	|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДляСопоставленияПоПортнеру КАК ДанныеДляСопоставленияПоПортнеру
	|		ПО ДанныеДляСопоставления.КодСтроки = ДанныеДляСопоставленияПоПортнеру.КодСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСПоставщиками КАК Соглашения
	|		ПО ДанныеДляСопоставленияПоПортнеру.Партнер = Соглашения.Партнер
	|			И (Соглашения.Наименование ПОДОБНО ДанныеДляСопоставления.ЗагружаемоеСоглашение)
	|ГДЕ
	|	НЕ Соглашения.Ссылка ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДляСопоставления.КодСтроки
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ДанныеДляСопоставления.КодСтроки) = 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(Соглашения.Ссылка) КАК Соглашение,
	|	ДанныеДляСопоставления.КодСтроки,
	|	КОЛИЧЕСТВО(ДанныеДляСопоставления.КодСтроки) КАК Количество
	|ИЗ
	|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСПоставщиками КАК Соглашения
	|		ПО ДанныеДляСопоставления.Партнер = Соглашения.Партнер
	|			И (Соглашения.Наименование ПОДОБНО ДанныеДляСопоставления.ЗагружаемоеСоглашение)
	|ГДЕ
	|	НЕ Соглашения.Ссылка ЕСТЬ NULL 
	|	И ДанныеДляСопоставления.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДляСопоставления.КодСтроки
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ДанныеДляСопоставления.КодСтроки) = 1";
	
	Запрос.УстановитьПараметр("ДанныеДляСопоставления", Объект.Товары.Выгрузить());
	
	Если ТипПлана = Перечисления.ТипыПланов.ПланПродаж Тогда
	
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.СоглашенияСПоставщиками", "Справочник.СоглашенияСКлиентами");
	
	КонецЕсли; 
	
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	
	ТаблицаПартнеры = РезультатыЗапросов[2].Выгрузить();
	
	Если ЗаполнятьСоглашениеВТЧ Тогда
		ТаблицаСоглашения = РезультатыЗапросов[3].Выгрузить();
	КонецЕсли; 
	
	Для каждого СтрокаТаблицы Из Объект.Товары Цикл 
		
		СтрокаПартнер = Неопределено;
		Если ЗаполнятьПартнераВТЧ Тогда
			СтрокаПартнер = ТаблицаПартнеры.Найти(СтрокаТаблицы.КодСтроки, "КодСтроки");
			Если СтрокаПартнер <> Неопределено Тогда 
				СтрокаТаблицы.Партнер  = СтрокаПартнер.Партнер;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаСоглашение = Неопределено;
		Если ЗаполнятьСоглашениеВТЧ Тогда
			СтрокаСоглашение = ТаблицаСоглашения.Найти(СтрокаТаблицы.КодСтроки, "КодСтроки");
			Если СтрокаСоглашение <> Неопределено Тогда 
				СтрокаТаблицы.Соглашение  = СтрокаСоглашение.Соглашение;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаПартнер <> Неопределено ИЛИ СтрокаСоглашение <> Неопределено Тогда
			ПроверитьСопоставлениеДанныхСтрокиЗагрузки(СтрокаТаблицы, ЭтаФорма);
		КонецЕсли; 
		
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура СопоставитьУпаковки()
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДляСопоставления.ЗагружаемаяУпаковка,
	|	ВЫРАЗИТЬ(ДанныеДляСопоставления.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(ДанныеДляСопоставления.КодСтроки КАК ЧИСЛО(15,0)) КАК КодСтроки
	|ПОМЕСТИТЬ ДанныеДляСопоставления
	|ИЗ
	|	&ДанныеДляСопоставления КАК ДанныеДляСопоставления
	|ГДЕ
	|	ДанныеДляСопоставления.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И ДанныеДляСопоставления.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(УпаковкиНоменклатуры.Ссылка) КАК Упаковка,
	|	ДанныеДляСопоставления.КодСтроки,
	|	КОЛИЧЕСТВО(ДанныеДляСопоставления.КодСтроки) КАК Количество
	|ИЗ
	|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
	|		ПО (ДанныеДляСопоставления.Номенклатура = УпаковкиНоменклатуры.Владелец
	|			ИЛИ ДанныеДляСопоставления.Номенклатура.НаборУпаковок = УпаковкиНоменклатуры.Владелец)
	|			И (УпаковкиНоменклатуры.Наименование ПОДОБНО ДанныеДляСопоставления.ЗагружаемаяУпаковка)
	|ГДЕ
	|	НЕ УпаковкиНоменклатуры.Ссылка ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДляСопоставления.КодСтроки
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ДанныеДляСопоставления.КодСтроки) = 1";
	
	Запрос.УстановитьПараметр("ДанныеДляСопоставления", Объект.Товары.Выгрузить());
	
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	
	ТаблицаУпаковки = РезультатыЗапросов[1].Выгрузить();
	
	Для каждого СтрокаТаблицы Из Объект.Товары Цикл 
		
		СтрокаУпаковка = ТаблицаУпаковки.Найти(СтрокаТаблицы.КодСтроки, "КодСтроки");
		Если СтрокаУпаковка <> Неопределено Тогда 
			СтрокаТаблицы.Упаковка  = СтрокаУпаковка.Упаковка;
			ПроверитьСопоставлениеДанныхСтрокиЗагрузки(СтрокаТаблицы, ЭтаФорма);
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура СопоставитьСклады()
	
	Если НЕ ЗаполнятьСкладВТЧ Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДляСопоставления.ЗагружаемыйСклад,
	|	ВЫРАЗИТЬ(ДанныеДляСопоставления.КодСтроки КАК ЧИСЛО(15, 0)) КАК КодСтроки
	|ПОМЕСТИТЬ ДанныеДляСопоставления
	|ИЗ
	|	&ДанныеДляСопоставления КАК ДанныеДляСопоставления
	|ГДЕ
	|	ДанныеДляСопоставления.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(Склады.Ссылка) КАК Склад,
	|	ДанныеДляСопоставления.КодСтроки,
	|	КОЛИЧЕСТВО(ДанныеДляСопоставления.КодСтроки) КАК Количество
	|ИЗ
	|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|		ПО (Склады.Наименование ПОДОБНО ДанныеДляСопоставления.ЗагружаемыйСклад)
	|			И (НЕ Склады.ЭтоГруппа)
	|ГДЕ
	|	НЕ Склады.Ссылка ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДляСопоставления.КодСтроки
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ДанныеДляСопоставления.КодСтроки) = 1";
	
	Запрос.УстановитьПараметр("ДанныеДляСопоставления", Объект.Товары.Выгрузить());
	
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	
	ТаблицаСклады = РезультатыЗапросов[1].Выгрузить();
	
	Для каждого СтрокаТаблицы Из Объект.Товары Цикл 
		
		СтрокаСклад = ТаблицаСклады.Найти(СтрокаТаблицы.КодСтроки, "КодСтроки");
		Если СтрокаСклад <> Неопределено Тогда 
			СтрокаТаблицы.Склад  = СтрокаСклад.Склад;
			ПроверитьСопоставлениеДанныхСтрокиЗагрузки(СтрокаТаблицы, ЭтаФорма);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СопоставитьВариантыКомплектаций()
	
	Если НЕ ЭтоПланСборкиРазборки Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДляСопоставления.ЗагружаемыйВариантКомплектации,
	|	ВЫРАЗИТЬ(ДанныеДляСопоставления.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(ДанныеДляСопоставления.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	ВЫРАЗИТЬ(ДанныеДляСопоставления.КодСтроки КАК ЧИСЛО(15, 0)) КАК КодСтроки
	|ПОМЕСТИТЬ ДанныеДляСопоставления
	|ИЗ
	|	&ДанныеДляСопоставления КАК ДанныеДляСопоставления
	|ГДЕ
	|	ДанныеДляСопоставления.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВариантыКомплектацииНоменклатуры.Ссылка) КАК ВариантКомплектации,
	|	ДанныеДляСопоставления.КодСтроки,
	|	КОЛИЧЕСТВО(ДанныеДляСопоставления.КодСтроки) КАК Количество
	|ИЗ
	|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
	|		ПО (ВариантыКомплектацииНоменклатуры.Владелец = ДанныеДляСопоставления.Номенклатура)
	|			И (ВариантыКомплектацииНоменклатуры.Характеристика = ДанныеДляСопоставления.Характеристика)
	|			И (ВариантыКомплектацииНоменклатуры.Наименование ПОДОБНО ДанныеДляСопоставления.ЗагружаемыйВариантКомплектации)
	|ГДЕ
	|	НЕ ВариантыКомплектацииНоменклатуры.Ссылка ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДляСопоставления.КодСтроки
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ДанныеДляСопоставления.КодСтроки) = 1";
	
	Запрос.УстановитьПараметр("ДанныеДляСопоставления", Объект.Товары.Выгрузить());
	
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	
	ТаблицаВариантыКомплектации = РезультатыЗапросов[1].Выгрузить();
	
	Для каждого СтрокаТаблицы Из Объект.Товары Цикл 
		
		СтрокаВариантКомплектации = ТаблицаВариантыКомплектации.Найти(СтрокаТаблицы.КодСтроки, "КодСтроки");
		Если СтрокаВариантКомплектации <> Неопределено Тогда 
			СтрокаТаблицы.ВариантКомплектации  = СтрокаВариантКомплектации.ВариантКомплектации;
			ПроверитьСопоставлениеДанныхСтрокиЗагрузки(СтрокаТаблицы, ЭтаФорма);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти

#Область Прочее

&НаСервере
Процедура ИнициализироватьТабличныйДокумент()
	
	СуфиксМакета = ?(КроссТаблица, "Кросс", "");
	
	Если КроссТаблица Тогда
		ИмяМакета = "МакетЗагрузкиДанныхДляПлановКросс"; 
	Иначе
		ИмяМакета = "МакетЗагрузкиДанныхДляПланов"; 
	КонецЕсли;
	
	МакетЗаполненияПоВнешнемуИсточнику = Обработки.ЗагрузкаТоваровИзВнешнихФайлов.ПолучитьМакет(ИмяМакета);
	ТабличныйДокумент.Очистить();
	
	Если ЭтоПланПродажПоКатегориям Тогда
		ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("ТоварнаяКатегория");
		ТабличныйДокумент.Присоединить(ОбластьТовары);
	Иначе
		ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Штрихкод");
		ТабличныйДокумент.Присоединить(ОбластьТовары);
		ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Код");
		ТабличныйДокумент.Присоединить(ОбластьТовары);
		ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Артикул");
		ТабличныйДокумент.Присоединить(ОбластьТовары);
		ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Номенклатура");
		ТабличныйДокумент.Присоединить(ОбластьТовары);
		Если ИспользоватьХарактеристикиНоменклатуры Тогда
			ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Характеристика");
			ТабличныйДокумент.Присоединить(ОбластьТовары);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗаполнятьПартнераВТЧ Тогда
		ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Партнер");
		ТабличныйДокумент.Присоединить(ОбластьТовары);
	КонецЕсли; 
	Если ЗаполнятьСоглашениеВТЧ Тогда
		ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Соглашение");
		ТабличныйДокумент.Присоединить(ОбластьТовары);
	КонецЕсли;
	Если ЗаполнятьСкладВТЧ Тогда
		ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Склад");
		ТабличныйДокумент.Присоединить(ОбластьТовары);
	КонецЕсли;
	Если ЭтоПланСборкиРазборки Тогда
		ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("ВариантКомплектации");
		ТабличныйДокумент.Присоединить(ОбластьТовары);
	КонецЕсли;
	Если ЭтоПланПродажПоКатегориям И ИспользоватьРасчетПоСкоростиПродаж Тогда
		ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("РейтингПродаж");
		ТабличныйДокумент.Присоединить(ОбластьТовары);
	КонецЕсли;
	
	Если КроссТаблица Тогда
		
		Если НЕ ЭтоПланПродажПоКатегориям 
			И ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
			ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Упаковка");
			ТабличныйДокумент.Присоединить(ОбластьТовары);
		КонецЕсли; 
		
		Если ПланироватьПоСумме Тогда
			ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("КоличествоЦенаСумма");
		Иначе
			ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Количество");
		КонецЕсли;
		
		ЭтаФормаПериоды = ЭтаФорма.Периоды; // см. Планирование.ТаблицаПериоды
		Для каждого Период Из ЭтаФормаПериоды Цикл
		
			Если НЕ Период.Активная ИЛИ Период.НомерКолонки <= 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			ОбластьТовары.Параметры.ЗаголовокПериода = Период.Заголовок;
			ТабличныйДокумент.Присоединить(ОбластьТовары);
		
		КонецЦикла; 
		ТабличныйДокумент.ФиксацияСверху = 2;
	
	Иначе
		
		Если ТипПлана = Перечисления.ТипыПланов.ПланПродаж ИЛИ ЭтоПланПродажПоКатегориям Тогда
			ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("ДатаОтгрузки");
			ТабличныйДокумент.Присоединить(ОбластьТовары);
		ИначеЕсли ЭтоПланСборкиРазборки Тогда
			ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("ДатаПоступления");
			ТабличныйДокумент.Присоединить(ОбластьТовары);
		ИначеЕсли ТипПлана = Перечисления.ТипыПланов.ПланЗакупок Тогда
			ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("ДатаПоступления");
			ТабличныйДокумент.Присоединить(ОбластьТовары);
		КонецЕсли;
		
		ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Количество");
		ТабличныйДокумент.Присоединить(ОбластьТовары);
		Если НЕ ЭтоПланПродажПоКатегориям 
			И ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
			ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Упаковка");
			ТабличныйДокумент.Присоединить(ОбластьТовары);
		КонецЕсли; 
		Если ПланироватьПоСумме Тогда
			ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Цена");
			ТабличныйДокумент.Присоединить(ОбластьТовары);
			ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Сумма");
			ТабличныйДокумент.Присоединить(ОбластьТовары);
		КонецЕсли;
		
		ТабличныйДокумент.ФиксацияСверху = 1;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьСопоставлениеДанныхСтрокиЗагрузки(СтрокаЗагрузки, Форма)
	
	Если СтрокаЗагрузки = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	СтрокаЗагрузки.ЕстьНесопоставленныеДанные = Ложь;
	
	Если Форма.СтруктураПоиска.Свойство("ЗагружаемаяНоменклатура") 
		И ЗначениеЗаполнено(СтрокаЗагрузки.ЗагружаемаяНоменклатура) 
		И НЕ ЗначениеЗаполнено(СтрокаЗагрузки.Номенклатура) Тогда
		СтрокаЗагрузки.ЕстьНесопоставленныеДанные = Истина;
		Возврат;
	КонецЕсли;
	
	Если Форма.СтруктураПоиска.Свойство("ЗагружаемаяХарактеристика") 
		И ЗначениеЗаполнено(СтрокаЗагрузки.ЗагружаемаяХарактеристика) 
		И НЕ ЗначениеЗаполнено(СтрокаЗагрузки.Характеристика) Тогда
		СтрокаЗагрузки.ЕстьНесопоставленныеДанные = Истина;
		Возврат;
	КонецЕсли; 
	
	Если Форма.СтруктураПоиска.Свойство("ЗагружаемаяУпаковка") 
		И ЗначениеЗаполнено(СтрокаЗагрузки.ЗагружаемаяУпаковка) 
		И НЕ ЗначениеЗаполнено(СтрокаЗагрузки.Упаковка) Тогда
		СтрокаЗагрузки.ЕстьНесопоставленныеДанные = Истина;
		Возврат;
	КонецЕсли; 
	
	Если Форма.ЗаполнятьПартнераВТЧ 
		И Форма.СтруктураПоиска.Свойство("ЗагружаемыйПартнер") 
		И ЗначениеЗаполнено(СтрокаЗагрузки.ЗагружаемыйПартнер) 
		И НЕ ЗначениеЗаполнено(СтрокаЗагрузки.Партнер) Тогда
		СтрокаЗагрузки.ЕстьНесопоставленныеДанные = Истина;
		Возврат;
	КонецЕсли; 
	
	Если Форма.ЗаполнятьСоглашениеВТЧ
		И Форма.СтруктураПоиска.Свойство("ЗагружаемоеСоглашение") 
		И ЗначениеЗаполнено(СтрокаЗагрузки.ЗагружаемоеСоглашение) 
		И НЕ ЗначениеЗаполнено(СтрокаЗагрузки.Соглашение) Тогда
		СтрокаЗагрузки.ЕстьНесопоставленныеДанные = Истина;
		Возврат;
	КонецЕсли;
	
	Если Форма.ЗаполнятьСкладВТЧ
		И Форма.СтруктураПоиска.Свойство("ЗагружаемыйСклад") 
		И ЗначениеЗаполнено(СтрокаЗагрузки.ЗагружаемыйСклад) 
		И НЕ ЗначениеЗаполнено(СтрокаЗагрузки.Склад) Тогда
		СтрокаЗагрузки.ЕстьНесопоставленныеДанные = Истина;
		Возврат;
	КонецЕсли;
	
	
	Если Форма.ЭтоПланСборкиРазборки
		И Форма.СтруктураПоиска.Свойство("ЗагружаемыйВариантКомплектации") 
		И ЗначениеЗаполнено(СтрокаЗагрузки.ЗагружаемыйВариантКомплектации) 
		И НЕ ЗначениеЗаполнено(СтрокаЗагрузки.ВариантКомплектации) Тогда
		СтрокаЗагрузки.ЕстьНесопоставленныеДанные = Истина;
		Возврат;
	КонецЕсли;
	
	Если Форма.ЭтоПланПродажПоКатегориям
		И Форма.СтруктураПоиска.Свойство("ЗагружаемаяТоварнаяКатегория") 
		И ЗначениеЗаполнено(СтрокаЗагрузки.ЗагружаемаяТоварнаяКатегория) 
		И НЕ ЗначениеЗаполнено(СтрокаЗагрузки.ТоварнаяКатегория) Тогда
		СтрокаЗагрузки.ЕстьНесопоставленныеДанные = Истина;
		Возврат;
	КонецЕсли;
	
	Если Форма.ЭтоПланПродажПоКатегориям
		И Форма.СтруктураПоиска.Свойство("ЗагружаемыйРейтингПродаж") 
		И ЗначениеЗаполнено(СтрокаЗагрузки.ЗагружаемыйРейтингПродаж) 
		И НЕ ЗначениеЗаполнено(СтрокаЗагрузки.РейтингПродаж) Тогда
		СтрокаЗагрузки.ЕстьНесопоставленныеДанные = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий)
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуре()
	
	ПараметрыЗаполненияРеквизитов = Новый Структура;
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
											Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакТипНоменклатуры",
											Новый Структура("Номенклатура", "ТипНоменклатуры"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакАртикул",
											Новый Структура("Номенклатура", "Артикул"));
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары,ПараметрыЗаполненияРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораНоменклатурыХарактеристик(КодТекущейСтроки, СписокХарактеристик = Ложь)
	
	Если СписокХарактеристик Тогда
		СписокВыбораХарактеристка = Элементы.ТоварыХарактеристика.СписокВыбора;
		СписокВыбораХарактеристка.Очистить();
	Иначе
		СписокВыбораНоменклатура  = Элементы.ТоварыНоменклатура.СписокВыбора;
		СписокВыбораНоменклатура.Очистить();
	КонецЕсли;
	
	МассивПодобраннойНоменклатуры = ПодобраннаяНоменклатура.НайтиСтроки(Новый Структура("КодСтроки", КодТекущейСтроки));
	Для каждого ЭлементМассива Из МассивПодобраннойНоменклатуры Цикл
		Если СписокХарактеристик Тогда
			Если СписокВыбораХарактеристка.НайтиПоЗначению(ЭлементМассива.Характеристика) = Неопределено Тогда
				СписокВыбораХарактеристка.Добавить(ЭлементМассива.Характеристика);
			КонецЕсли;
		Иначе
			Если СписокВыбораНоменклатура.НайтиПоЗначению(ЭлементМассива.Номенклатура) = Неопределено Тогда
				СписокВыбораНоменклатура.Добавить(ЭлементМассива.Номенклатура);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
КонецПроцедуры

&НаСервере
Функция ПоместитьТоварыВХранилище()

	Возврат ПоместитьВоВременноеХранилище(Объект.Товары.Выгрузить());

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьВариантыОтображенияСтрок(Форма)
	
	СписокВыбора = Форма.Элементы.ВариантОтображенияСтрок.СписокВыбора;
	СписокВыбора.Очистить();
	
	Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Все (%1)'"), 
		Форма.Объект.Товары.Количество());
		
	СписокВыбора.Добавить(0, Представление); 
	
	СтрокиЕстьНесопоставленныеДанные = Форма.Объект.Товары.НайтиСтроки(Новый Структура("ЕстьНесопоставленныеДанные", Истина));
	Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Несопоставленные (%1)'"), 
		СтрокиЕстьНесопоставленныеДанные.Количество());
		
	СписокВыбора.Добавить(1, Представление);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКолонок()
	
	Элементы.ГруппаЗагружаемыеДанные.Видимость = НЕ ЭтоПланПродажПоКатегориям;
	Элементы.ТоварыНоменклатураКод.Видимость = НЕ ЭтоПланПродажПоКатегориям;
	Элементы.ТоварыАртикул.Видимость = НЕ ЭтоПланПродажПоКатегориям;
	Элементы.ТоварыНоменклатура.Видимость = НЕ ЭтоПланПродажПоКатегориям;
	Элементы.ТоварыГруппаХарактеристика.Видимость = НЕ ЭтоПланПродажПоКатегориям;
	Элементы.ГруппаЗагружаемыеДанные.Видимость = НЕ ЭтоПланПродажПоКатегориям;
	
	Элементы.ТоварыГруппаПартнер.Видимость = ЗаполнятьПартнераВТЧ;
	Элементы.ТоварыГруппаСоглашение.Видимость = ЗаполнятьСоглашениеВТЧ;
	Элементы.ТоварыСоглашениеСПоставщиком.Видимость = ТипПлана = Перечисления.ТипыПланов.ПланЗакупок И ЗаполнятьСоглашениеВТЧ;
	Элементы.ТоварыСоглашениеСКлиентом.Видимость = ТипПлана = Перечисления.ТипыПланов.ПланПродаж И ЗаполнятьСоглашениеВТЧ;
	
	Элементы.ТоварыГруппаСклад.Видимость = ЗаполнятьСкладВТЧ;
	Элементы.ТоварыГруппаВариантКомплектации.Видимость = ЭтоПланСборкиРазборки;
	
	Элементы.ТоварыГруппаТоварнаяКатегория.Видимость = ЭтоПланПродажПоКатегориям;
	Элементы.ТоварыГруппаРейтингПродаж.Видимость = ЭтоПланПродажПоКатегориям И ИспользоватьРасчетПоСкоростиПродаж;
	
	Элементы.ТоварыГруппаУпаковка.Видимость = НЕ ЭтоПланПродажПоКатегориям;
	
	Элементы.ТоварыЦена.Видимость = ПланироватьПоСумме;
	Элементы.ТоварыСумма.Видимость = ПланироватьПоСумме;
	
	Элементы.ТоварыСумма.Доступность = НЕ КроссТаблица;
	Элементы.ТоварыКоличествоУпаковок.Доступность = НЕ КроссТаблица;
	
	Элементы.ТоварыДатаПоступления.Видимость = НЕ КроссТаблица И ТипПлана = Перечисления.ТипыПланов.ПланЗакупок;
	Элементы.ТоварыДатаПоступления.Видимость = НЕ КроссТаблица И ЭтоПланСборкиРазборки;
	
	Элементы.ТоварыДатаОтгрузки.Видимость = НЕ КроссТаблица И ТипПлана = Перечисления.ТипыПланов.ПланПродаж;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
