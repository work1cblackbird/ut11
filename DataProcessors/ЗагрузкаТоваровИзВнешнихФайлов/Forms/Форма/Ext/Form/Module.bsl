#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.Заголовок) Тогда
		ВызватьИсключение НСтр("ru='Предусмотрено открытие обработки только из форм объектов.'");
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	Заголовок = Параметры.Заголовок;
	Если ЗначениеЗаполнено(Параметры.ДопПояснениеПриЗагрузке) Тогда
		Элементы.Шаг1Надпись1.Заголовок = Элементы.Шаг1Надпись1.Заголовок + " " + Параметры.ДопПояснениеПриЗагрузке;
	КонецЕсли;
	
	ПроверятьЗаполнениеХарактеристик = Параметры.ПроверятьЗаполнениеХарактеристик;
	СопоставлятьПоНоменклатуреПоставщиков = ЗначениеЗаполнено(Параметры.ЗаполнятьНоменклатуруПартнера)
		И ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПартнеров")
		И ПравоДоступа("Чтение", Метаданные.Справочники.НоменклатураКонтрагентов);
	Если СопоставлятьПоНоменклатуреПоставщиков Тогда
		Объект.Партнер = Параметры.ЗаполнятьНоменклатуруПартнера;
	КонецЕсли;
	
	ЭтоВозвратнаяТара = Параметры.ЭтоВозвратнаяТара;
	
	ЗагружатьКоличество = Параметры.ЗагружатьКоличество;
	ЗагружатьЦены       = Параметры.ЗагружатьЦены;
	ЗагружатьСуммы      = Параметры.ЗагружатьСуммы;
	ЗагружатьГТД        = Параметры.ЗагружатьГТД;
	
	ЗагружатьЗапасы           = Параметры.ЗагружатьЗапасы;
	ЗагружатьСкидки           = Параметры.ЗагружатьСкидки;
	Объект.ЗагружатьУпаковочныеЛисты = Параметры.ЗагружатьУпаковочныеЛисты;
	
	ПересчитыватьСуммы = Параметры.ПересчитыватьСуммы;
	ЦенаВключаетНДС    = Параметры.ЦенаВключаетНДС;
	НалогообложениеНДС = Параметры.НалогообложениеНДС;
	ДатаЗаполнения     = Параметры.ДатаЗаполнения;
	Организация        = Параметры.Организация;
	
	ПараметрыЦенКомплектующих = Параметры.ПараметрыЦенКомплектующих;
	
	МассивПараметров = Новый Массив;
	ОтборПоНоменклатуре = Новый Структура;
	Для Каждого Отбор Из Параметры.ПараметрыОтбора Цикл
		Если Отбор.Ключ = "СегментНоменклатуры" Тогда
			МассивПараметров.Добавить(Новый ПараметрВыбора("СегментНоменклатуры", Отбор.Значение));
			Если ОбщегоНазначенияУТКлиентСервер.АвторизованВнешнийПользователь() Тогда
				МассивПараметров.Добавить(Новый ПараметрВыбора("ЗапретРедактированияСегментаНоменклатуры", Истина));
			КонецЕсли;
		Иначе
			ОтборПоНоменклатуре.Вставить(Отбор.Ключ, Отбор.Значение);
			МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор." + Отбор.Ключ, Отбор.Значение));
		КонецЕсли;
	КонецЦикла;
	Элементы.ТоварыНоменклатура.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	Если Параметры.ПараметрыОтбора.Свойство("ТипНоменклатуры") Тогда
		ТекстОтбора = НСтр("ru='Для выбора доступна номенклатура с типом: %1.'");
		Типы = Новый Массив;
		Для каждого ТипОтбора Из Параметры.ПараметрыОтбора.ТипНоменклатуры Цикл
			Если Не ПолучитьФункциональнуюОпцию("ИспользоватьМногооборотнуюТару")
				И ТипОтбора = Перечисления.ТипыНоменклатуры.МногооборотнаяТара Тогда
				Продолжить;
			КонецЕсли;
			Типы.Добавить(ТипОтбора);
		КонецЦикла;
		Элементы.ОтборНадпись.Заголовок = СтрШаблон(ТекстОтбора, СтрСоединить(Типы, ", "));
	КонецЕсли;
	
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьРучныеСкидкиВЗакупках      = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВЗакупках");
	
	ИнициализироватьТабличныйДокумент();
	УстановитьДоступностьКомандБуфераОбмена();
	УстановитьДоступностьКолонок();
	УчетПрослеживаемыхТоваровЛокализация.УстановитьЗаголовокНомерГТД(Элементы, "ТоварыНомерГТД");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
		УстановитьДоступностьКомандБуфераОбменаНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Объект.ЗагружатьУпаковочныеЛисты Тогда
		УпаковочныеЛистыПоНомерамСтрок = Новый Соответствие;
		Для ТекИндекс = 0 По Объект.Товары.Количество()-1 Цикл
			
			ТекущаяСтрока = Объект.Товары[ТекИндекс]; // СтрокаТабличнойЧасти
			Если Не ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура)
				И Не ЗначениеЗаполнено(ТекущаяСтрока.УпаковочныйЛист) Тогда
				
				ТекстОшибки = НСтр("ru='Не заполнены данные по товару или упаковочному листу в строке %НомерСтроки%.'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ТекущаяСтрока.НомерСтроки);
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", ТекущаяСтрока.НомерСтроки, "Номенклатура");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , Поле, , Отказ);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекущаяСтрока.УпаковочныйЛист) Тогда
				Если УпаковочныеЛистыПоНомерамСтрок[ТекущаяСтрока.УпаковочныйЛист] = Неопределено Тогда
					УпаковочныеЛистыПоНомерамСтрок.Вставить(ТекущаяСтрока.УпаковочныйЛист, ТекущаяСтрока.НомерСтроки);
				Иначе
					ТекстОшибки = НСтр("ru='В строке %НомерСтроки% повторяется %УпаковочныйЛист% из строки %НомерПовторяемойСтроки%.
						|Измените или удалите одну из строк.'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ТекущаяСтрока.НомерСтроки);
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%УпаковочныйЛист%", ТекущаяСтрока.УпаковочныйЛист);
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерПовторяемойСтроки%",
						УпаковочныеЛистыПоНомерамСтрок[ТекущаяСтрока.УпаковочныйЛист]);
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", ТекущаяСтрока.НомерСтроки, "УпаковочныйЛист");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , Поле, , Отказ);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	Если СоздатьНомераГТД Или ПроверятьЗаполнениеХарактеристик Тогда
		Для ТекИндекс = 0 По Объект.Товары.Количество()-1 Цикл
			
			ТекущаяСтрока = Объект.Товары[ТекИндекс]; // СтрокаТабличнойЧасти
			
			АдресОшибки = НСтр("ru='в строке %НомерСтроки% списка ""Товары""'");
			АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", ТекущаяСтрока.НомерСтроки);
			
			Если ТекущаяСтрока.СоздатьНомерГТД И ТекущаяСтрока.ВедетсяУчетПоГТД И Не ЗначениеЗаполнено(ТекущаяСтрока.СтранаПроисхождения) Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru='Не заполнена колонка ""Страна происхождения""'") + АдресОшибки,
					,
					"Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ТекущаяСтрока.НомерСтроки, "СтранаПроисхождения"),
					,
					Отказ);
				
			КонецЕсли;
			
			// Проверка заполнения характеристик.
			Если ТекущаяСтрока.ХарактеристикиИспользуются И Не ЗначениеЗаполнено(ТекущаяСтрока.Характеристика) Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru='Не заполнена колонка ""Характеристика""'") + " " + АдресОшибки,
					,
					"Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ТекущаяСтрока.НомерСтроки, "Характеристика"),
					,
					Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элементы.Товары.ТекущиеДанные.КодСтроки = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	
	СтруктураПараметровСопоставленнияНоменклатуры = Новый Структура;
	СтруктураПараметровСопоставленнияНоменклатуры.Вставить("Ссылка",                             Объект);
	СтруктураПараметровСопоставленнияНоменклатуры.Вставить("Партнер",                            Объект.Партнер);
	СтруктураПараметровСопоставленнияНоменклатуры.Вставить("НеВыполнятьПроверкуДляПользователя", Ложь);
	
	ПараметрыЗаполнитьСтавкуНДС = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС();
	ПараметрыЗаполнитьСтавкуНДС.Организация = Организация;
	ПараметрыЗаполнитьСтавкуНДС.НалогообложениеНДС = НалогообложениеНДС;
	ПараметрыЗаполнитьСтавкуНДС.Дата = ДатаЗаполнения;	
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	
	Если СопоставлятьПоНоменклатуреПоставщиков Тогда
		СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПартнераПоНоменклатуре", Объект.Партнер);
		СтруктураДействий.Вставить(
			"ПроверитьСопоставленнуюНоменклатуруПартнера",
			СтруктураПараметровСопоставленнияНоменклатуры);
	КонецЕсли;
		
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД", Новый Структура("Номенклатура", "ВедетсяУчетПоГТД"));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ПараметрыЗаполнитьСтавкуНДС);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", ЭтоВозвратнаяТара);
	Если ПересчитыватьСуммы Тогда
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	КонецЕсли;
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		ТекущаяСтрока.УпаковочныйЛист = ПредопределенноеЗначение("Документ.УпаковочныйЛист.ПустаяСсылка");
	КонецЕсли;
	
	Если Не ТекущаяСтрока.ВедетсяУчетПоГТД
		И (ЗначениеЗаполнено(ТекущаяСтрока.НомерГТД)
		ИЛИ ЗначениеЗаполнено(ТекущаяСтрока.ЗагружаемыйНомерГТД)) Тогда
		ТекущаяСтрока.НомерГТД = Неопределено;
		ТекущаяСтрока.ЗагружаемыйНомерГТД = "";
		ТекущаяСтрока.СоздатьНомерГТД = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПараметровСопоставленнияНоменклатуры = Новый Структура;
	СтруктураПараметровСопоставленнияНоменклатуры.Вставить("Ссылка",                             Объект);
	СтруктураПараметровСопоставленнияНоменклатуры.Вставить("Партнер",                            Объект.Партнер);
	СтруктураПараметровСопоставленнияНоменклатуры.Вставить("НеВыполнятьПроверкуДляПользователя", Ложь);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	
	Если СопоставлятьПоНоменклатуреПоставщиков Тогда
		СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПартнераПоНоменклатуре", Объект.Партнер);
		СтруктураДействий.Вставить(
			"ПроверитьСопоставленнуюНоменклатуруПартнера",
			СтруктураПараметровСопоставленнияНоменклатуры);
	КонецЕсли;		
		
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПартнераПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	НоменклатураПартнеровКлиент.УстановитьПараметрыВыбораУпаковки(Элемент.ПараметрыВыбора, ТекущаяСтрока);
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	
	СтруктураПараметровСопоставленнияНоменклатуры = Новый Структура;
	СтруктураПараметровСопоставленнияНоменклатуры.Вставить("Ссылка",                             Объект);
	СтруктураПараметровСопоставленнияНоменклатуры.Вставить("Партнер",                            Объект.Партнер);
	СтруктураПараметровСопоставленнияНоменклатуры.Вставить("НеВыполнятьПроверкуДляПользователя", Ложь);
	
	ПараметрыЗаполнитьСтавкуНДС = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС();
	ПараметрыЗаполнитьСтавкуНДС.Организация = Организация;
	ПараметрыЗаполнитьСтавкуНДС.НалогообложениеНДС = НалогообложениеНДС;
	ПараметрыЗаполнитьСтавкуНДС.Дата = ДатаЗаполнения;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоНоменклатуреПартнера");
	СтруктураДействий.Вставить(
		"ПроверитьСопоставленнуюНоменклатуруПартнера",
		СтруктураПараметровСопоставленнияНоменклатуры);
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД", Новый Структура("Номенклатура", "ВедетсяУчетПоГТД"));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ПараметрыЗаполнитьСтавкуНДС);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", ЭтоВозвратнаяТара);
	Если ПересчитыватьСуммы Тогда
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	КонецЕсли;
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		ТекущаяСтрока.УпаковочныйЛист = ПредопределенноеЗначение("Документ.УпаковочныйЛист.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковочныйЛистПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущаяСтрока.УпаковочныйЛист) Тогда
		ТекущаяСтрока.Номенклатура       = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
		ТекущаяСтрока.Характеристика     = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
		ТекущаяСтрока.Упаковка           = ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка");
		ТекущаяСтрока.КоличествоУпаковок = 1;
		ТекущаяСтрока.Количество         = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ЦенаВключаетНДС, ПересчитыватьСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	Если Не ПересчитыватьСуммы Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ЦенаВключаетНДС, Истина);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентРучнойСкидкиПриИзменении(Элемент)
	
	Если Не ПересчитыватьСуммы Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("ПересчитыватьСуммуРучнойСкидки", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаРучнойСкидкиПриИзменении(Элемент)
	
	Если Не ПересчитыватьСуммы Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("ПересчитыватьСуммуРучнойСкидки", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	Если Не ПересчитыватьСуммы Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВЗакупках", 
		ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаЦеныСкидкиВЗакупкахВТЧ(
			Объект, 
			Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	Если Не ПересчитыватьСуммы Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	Если Не ПересчитыватьСуммы Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущаяСтрока <> Неопределено И Элемент.ТекущийЭлемент.Имя = "ТоварыНоменклатура" Тогда
		ЗаполнитьСписокВыбораНоменклатурыХарактеристик(ТекущаяСтрока.КодСтроки);
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ТоварыХарактеристика" Тогда
		ЗаполнитьСписокВыбораНоменклатурыХарактеристик(ТекущаяСтрока.КодСтроки, Истина);
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ТоварыУпаковочныйЛист" Тогда
		ЗаполнитьСписокВыбораУпаковочныхЛистов(ТекущаяСтрока.КодСтроки);
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ТоварыНоменклатураПартнера" Тогда
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		
		НоменклатураПартнеровКлиент.ЗаполнитьСписокВыбораНоменклатурыПартнера(
			Партнер, ТекущиеДанные, Элементы.ТоварыНоменклатураПартнера.СписокВыбора);
			
		НоменклатураПартнеровКлиент.УстановитьПараметрыВыбораУпаковки(
			Элементы.ТоварыНоменклатураПартнера.ПараметрыВыбора, ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНомерГТДПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ТекущаяСтрока.СоздатьНомерГТД = НЕ ЗначениеЗаполнено(ТекущаяСтрока.НомерГТД);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтранаПроисхожденияОчистка(Элемент, СтандартнаяОбработка)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ТекущаяСтрока.ЗагружаемаяСтранаПроисхождения = "";
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПартнераНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЭлементФормы" , Элемент);
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	
	ОповещениеОЗакрытие = Новый ОписаниеОповещения("ОбработатьРезультатВыбораНоменклатурыПартнера", ЭтотОбъект, ДополнительныеПараметры);

	НоменклатураПартнеровКлиент.ОткрытьФормуВыбораНоменклатурыПартнера(ЭтотОбъект, Объект.Партнер, ТекущаяСтрока, Элемент.Заголовок, ОповещениеОЗакрытие);

КонецПроцедуры

#Область РаботаСБуферомОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	
	РаботаСТабличнымиЧастями.СкопироватьСтрокиВБуферОбмена(Объект.Товары, Элементы.Товары.ВыделенныеСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена()
	
	ПараметрыОтбора = Новый Соответствие;
	Для Каждого УсловиеОтбора Из ОтборПоНоменклатуре Цикл
		ПараметрыОтбора.Вставить("Номенклатура." + УсловиеОтбора.Ключ, УсловиеОтбора.Значение);
	КонецЦикла;
	
	Колонки = "Номенклатура,Характеристика,НоменклатураНабора,ХарактеристикаНабора,"
		+ ?(ЗагружатьКоличество, "Упаковка,КоличествоУпаковок,", "")
		+ ?(ЗагружатьЦены, "Цена,", "")
		+ ?(ЗагружатьГТД, "НомерГТД,", "")
		+ ?(ЗагружатьЗапасы, "МинимальныйОстаток,МаксимальныйОстаток", "")
		+ ?(ЗагружатьСкидки, "ПроцентРучнойСкидки,", "")
		+ ?(Объект.ЗагружатьУпаковочныеЛисты, "УпаковочныйЛист,", "");
	
	ТаблицаТоваров = РаботаСТабличнымиЧастями.СтрокиИзБуфераОбмена(ПараметрыОтбора, Колонки);
	
	Если Не ЗначениеЗаполнено(ТаблицаТоваров) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнитьСтавкуНДС = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС();
	ПараметрыЗаполнитьСтавкуНДС.Организация = Организация;
	ПараметрыЗаполнитьСтавкуНДС.НалогообложениеНДС = НалогообложениеНДС;
	ПараметрыЗаполнитьСтавкуНДС.Дата = ДатаЗаполнения;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ПараметрыЗаполнитьСтавкуНДС);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", ЭтоВозвратнаяТара);
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ЦенаВключаетНДС, ПересчитыватьСуммы);
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		Если НЕ ИспользоватьРучныеСкидкиВЗакупках Тогда
			ТекущаяСтрока.ПроцентРучнойСкидки = 0;
			ТекущаяСтрока.СуммаРучнойСкидки = 0;
		КонецЕсли;
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность",
		РаботаСТабличнымиЧастями.ЕстьСтрокиВБуфереОбмена());
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандБуфераОбменаНаКлиенте()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ПоискИСопоставлениеНоменклатуры

&НаСервере
Процедура ДобавитьПодобраннуюНоменклатуру(КодСтроки, НайденнаяНоменклатура, НайденнаяХарактеристика = Неопределено, НайденнаяНоменклатураПартнера = Неопределено)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Номенклатура", НайденнаяНоменклатура);
	Если Не НайденнаяХарактеристика = Неопределено Тогда
		СтруктураОтбора.Вставить("Характеристика", НайденнаяХарактеристика);
	КонецЕсли;	
	СтруктураОтбора.Вставить("КодСтроки", КодСтроки);
	
	ПодобранныеРанееТовары = ПодобраннаяНоменклатура.НайтиСтроки(СтруктураОтбора);
	Если ПодобранныеРанееТовары.Количество() = 0 Тогда
		ПодобраннаяСтрока = ПодобраннаяНоменклатура.Добавить();
		ПодобраннаяСтрока.КодСтроки = КодСтроки;
		ПодобраннаяСтрока.Номенклатура = НайденнаяНоменклатура;
		Если Не НайденнаяНоменклатураПартнера = Неопределено Тогда
			ПодобраннаяСтрока.НоменклатураПартнера = НайденнаяНоменклатураПартнера;
		КонецЕсли;	
		Если Не НайденнаяХарактеристика = Неопределено Тогда
			ПодобраннаяСтрока.Характеристика = НайденнаяХарактеристика;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоискПоСвязаннойТаблице(МассивНайденныхРанее, СвязаннаяТаблица, Связи, ОтборПоСвязаннойТаблице, ПоляНайденныхРанееДляРезультата, ПоляСвязаннойТаблицыДляРезультата)
	
	Результат = Новый ТаблицаЗначений;
	Для каждого ПолеДляРезультата из ПоляНайденныхРанееДляРезультата Цикл
		Результат.Колонки.Добавить(ПолеДляРезультата.Значение);
	КонецЦикла;	
	Для каждого ПолеДляРезультата из ПоляСвязаннойТаблицыДляРезультата Цикл
		Результат.Колонки.Добавить(ПолеДляРезультата.Значение);
	КонецЦикла;	
	
	Если МассивНайденныхРанее.Количество() > 0 Тогда
		Для каждого СтрокаПоКлючу из МассивНайденныхРанее Цикл
			ОтборДляПоиска = Новый Структура;
			Для каждого Связь из Связи Цикл
				ОтборДляПоиска.Вставить(Связь.Значение, СтрокаПоКлючу[Связь.Ключ]);
			КонецЦикла;
			Для каждого ЭлементОтбора из ОтборПоСвязаннойТаблице Цикл
				ОтборДляПоиска.Вставить(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
			КонецЦикла;
			НайденныеПоОтбору = СвязаннаяТаблица.НайтиСтроки(ОтборДляПоиска);
			Для каждого СтрокаНайденнаяПоОтбору из НайденныеПоОтбору Цикл
				НоваяСтрокаРезультата = Результат.Добавить();
				Для каждого ПолеДляРезультата из ПоляНайденныхРанееДляРезультата Цикл
					НоваяСтрокаРезультата[ПолеДляРезультата.Значение] = СтрокаПоКлючу[ПолеДляРезультата.Ключ];
				КонецЦикла;	
				Для каждого ПолеДляРезультата из ПоляСвязаннойТаблицыДляРезультата Цикл
					НоваяСтрокаРезультата[ПолеДляРезультата.Значение] = СтрокаНайденнаяПоОтбору[ПолеДляРезультата.Ключ];
				КонецЦикла;	
			КонецЦикла;	
		КонецЦикла;	
	КонецЕсли;
	
	Возврат Результат;
КонецФункции	

&НаСервере
Процедура СопоставитьДанныеТабличногоДокументаСДаннымиИБ()
	
	УточнениеНоменклатуры.Очистить();
	ПодобраннаяНоменклатура.Очистить();
	НайденныеСтроки = ПодобраннаяНоменклатура.Выгрузить();

	Объект.Товары.Очистить();
	
	ДанныеИБ = ПолучитьДанныеИБпоНоменклатуреИхарактеристикам();
	ТаблицаНоменклатуры = ДанныеИБ.ТаблицаНоменклатуры;
	ТаблицаХарактеристик = ДанныеИБ.ТаблицаХарактеристик;
	ТаблицаНоменклатурыПоставщиков = ДанныеИБ.ТаблицаНоменклатурыПоставщиков;
	
	НомераКолонок = Новый Соответствие;
	НомерКолонки = 1;
	
	НомераКолонок.Вставить("КолонкаШтрихкод", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
	НомерКолонки = НомерКолонки +1;
	НомераКолонок.Вставить("КолонкаКод", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
	НомерКолонки = НомерКолонки +1;
	НомераКолонок.Вставить("КолонкаАртикул", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
	НомерКолонки = НомерКолонки +1;
	НомераКолонок.Вставить("КолонкаНоменклатура", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
	НомерКолонки = НомерКолонки +1;
	Если ИспользоватьХарактеристикиНоменклатуры Тогда
		НомераКолонок.Вставить("КолонкаХарактеристика", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
		НомерКолонки = НомерКолонки +1;
	КонецЕсли;
	Если ЗагружатьКоличество Тогда
		НомераКолонок.Вставить("КолонкаКоличество", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
		НомерКолонки = НомерКолонки +1;
	КонецЕсли;
	Если ЗагружатьЗапасы Тогда
		НомераКолонок.Вставить("КолонкаМинимальныйОстаток", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
		НомерКолонки = НомерКолонки +1;
		НомераКолонок.Вставить("КолонкаМаксимальныйОстаток", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
		НомерКолонки = НомерКолонки +1;
	КонецЕсли;
	Если ЗагружатьЦены Тогда
		НомераКолонок.Вставить("КолонкаЦена", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
		НомерКолонки = НомерКолонки +1;
	КонецЕсли;
	Если ЗагружатьСуммы Тогда
		Если ИспользоватьРучныеСкидкиВЗакупках И ЗагружатьСкидки Тогда
			НомераКолонок.Вставить("КолонкаПроцентРучнойСкидки", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
			НомерКолонки = НомерКолонки +1;
			НомераКолонок.Вставить("КолонкаСуммаРучнойСкидки", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
			НомерКолонки = НомерКолонки +1;
		КонецЕсли;
		НомераКолонок.Вставить("КолонкаСумма", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
		НомерКолонки = НомерКолонки +1;
		Если НалогообложениеНДС <> Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС Тогда
			НомераКолонок.Вставить("КолонкаСуммаНДС", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
			НомерКолонки = НомерКолонки +1;
			Если НЕ ЦенаВключаетНДС Тогда
				НомераКолонок.Вставить("КолонкаСуммаСНДС", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
				НомерКолонки = НомерКолонки +1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ЗагружатьГТД Тогда
		НомераКолонок.Вставить("КолонкаНомерГТД", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
		НомерКолонки = НомерКолонки +1;
		НомераКолонок.Вставить("КолонкаСтранаПроисхождения", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
		НомерКолонки = НомерКолонки +1;
	КонецЕсли;
	
	ВысотаШапки = 1;
	НомерСтроки = ВысотаШапки + 1 ;
	
	СтроковыйНомер = Формат(НомерСтроки, "ЧН=0; ЧГ=0");
	ЗаполненыНоменклатураКодАртикулШтрихкод = ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаАртикул")).Текст)
		Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаНоменклатура")).Текст)
		Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаШтрихкод")).Текст)
		Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаКод")).Текст);
	
	УпаковочныйЛистСинонимВРег   = СтрЗаменить(ВРег(Метаданные.Документы.УпаковочныйЛист.Синоним), " ", "");
	ДлинаСинонимаУпаковочныйЛист = СтрДлина(УпаковочныйЛистСинонимВРег);
	КодыУпаковочныхЛистовНаПроверку.Очистить();
	
	Пока ЗаполненыНоменклатураКодАртикулШтрихкод Цикл
		
		НоваяСтрока = УточнениеНоменклатуры.Добавить();
		Количество = 0;
		НоваяСтрока.КодСтроки = НомерСтроки;
		
		Попытка
			НоваяСтрока.Штрихкод = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаШтрихкод")).Текст;
			НоваяСтрока.Код = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаКод")).Текст;
			НоваяСтрока.Артикул = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаАртикул")).Текст;
			НоваяСтрока.НоменклатураНаименование = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаНоменклатура")).Текст;
			Если ИспользоватьХарактеристикиНоменклатуры Тогда
				НоваяСтрока.ХарактеристикаНаименование = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаХарактеристика")).Текст;
			КонецЕсли;
			Если ЗагружатьКоличество Тогда
				Количество = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаКоличество")).Текст;
			КонецЕсли;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		Если ЗагружатьКоличество Тогда
			ПрисвоитьЧисловоеЗначениеПриЗаполненииТЧ(НоваяСтрока.Количество, Количество, НомерСтроки, "Количество", ВысотаШапки);
		КонецЕсли;
		
		Если ЗагружатьЗапасы Тогда

			МинимальныйОстаток = 0;
			Попытка
				МинимальныйОстаток = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаМинимальныйОстаток")).Текст;
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;

			ПрисвоитьЧисловоеЗначениеПриЗаполненииТЧ(НоваяСтрока.МинимальныйОстаток, МинимальныйОстаток, НомерСтроки, "МинимальныйОстаток", ВысотаШапки);

			МаксимальныйОстаток = 0;
			Попытка
				МаксимальныйОстаток = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаМаксимальныйОстаток")).Текст;
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;

			ПрисвоитьЧисловоеЗначениеПриЗаполненииТЧ(НоваяСтрока.МаксимальныйОстаток, МаксимальныйОстаток, НомерСтроки, "МаксимальныйОстаток", ВысотаШапки);

		КонецЕсли;

		Если ЗагружатьЦены Тогда
			Цена = 0;
			Попытка
				Цена = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаЦена")).Текст;
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
			ПрисвоитьЧисловоеЗначениеПриЗаполненииТЧ(НоваяСтрока.Цена, Цена, НомерСтроки, "Цена", ВысотаШапки);
			
		КонецЕсли;
		
		Если ЗагружатьСуммы Тогда
			ПроцентРучнойСкидки = 0;
			СуммаРучнойСкидки   = 0;
			Сумма               = 0;
			СуммаНДС            = 0;
			СуммаСНДС           = 0;
			
			Попытка
				Если ИспользоватьРучныеСкидкиВЗакупках И ЗагружатьСкидки Тогда
					ПроцентРучнойСкидки = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаПроцентРучнойСкидки")).Текст;
					СуммаРучнойСкидки = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаСуммаРучнойСкидки")).Текст;
					ПроцентРучнойСкидки = СтрЗаменить(ПроцентРучнойСкидки, "%", "");
				КонецЕсли;
				Если НомераКолонок.Получить("КолонкаСумма") <>  Неопределено Тогда
					Сумма     = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаСумма")).Текст;
				КонецЕсли;
				Если НомераКолонок.Получить("КолонкаСуммаНДС") <>  Неопределено Тогда
					СуммаНДС  = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаСуммаНДС")).Текст;
				КонецЕсли;
				Если НомераКолонок.Получить("КолонкаСуммаСНДС") <>  Неопределено Тогда
					СуммаСНДС = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаСуммаСНДС")).Текст;
				КонецЕсли;
				
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
			ПрисвоитьЧисловоеЗначениеПриЗаполненииТЧ(НоваяСтрока.ПроцентРучнойСкидки, ПроцентРучнойСкидки, НомерСтроки, "ПроцентРучнойСкидки", ВысотаШапки);
			ПрисвоитьЧисловоеЗначениеПриЗаполненииТЧ(НоваяСтрока.СуммаРучнойСкидки, СуммаРучнойСкидки, НомерСтроки, "СуммаРучнойСкидки", ВысотаШапки);
			ПрисвоитьЧисловоеЗначениеПриЗаполненииТЧ(НоваяСтрока.Сумма, Сумма, НомерСтроки, "Сумма", ВысотаШапки);
			ПрисвоитьЧисловоеЗначениеПриЗаполненииТЧ(НоваяСтрока.СуммаНДС, СуммаНДС, НомерСтроки, "СуммаНДС", ВысотаШапки);
			ПрисвоитьЧисловоеЗначениеПриЗаполненииТЧ(НоваяСтрока.СуммаСНДС, СуммаСНДС, НомерСтроки, "СуммаСНДС", ВысотаШапки);
			
		КонецЕсли;
		
		Если ЗагружатьГТД Тогда
			Попытка
				НомерГТД            = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаНомерГТД")).Текст;
				СтранаПроисхождения = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаСтранаПроисхождения")).Текст;
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
			Если ЗначениеЗаполнено(НомерГТД) Тогда
				НоваяСтрока.НомерГТД             = СокрЛП(НомерГТД);
				Если ЗначениеЗаполнено(СтранаПроисхождения) Тогда
					НоваяСтрока.СтранаПроисхождения  = ВРег(СокрЛП(СтранаПроисхождения));
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаПоискаКод            = ВРег(СтрЗаменить(НоваяСтрока.Код, " ", "")); 
		СтрокаПоискаАртикул        = ВРег(СтрЗаменить(НоваяСтрока.Артикул, " ", "")); 
		СтрокаПоискаНоменклатура   = ВРег(СтрЗаменить(НоваяСтрока.НоменклатураНаименование, " ", ""));
		СтрокаПоискаХарактеристика = ВРег(СтрЗаменить(НоваяСтрока.ХарактеристикаНаименование, " ", ""));
		
		Если ЗначениеЗаполнено(НоваяСтрока.Штрихкод) Тогда
			ШтрихКодБезПробелов = СтрЗаменить(НоваяСтрока.Штрихкод, " ", "");
			ВыборкаНайденныхНоменклатур = ПодобратьНоменклатуруПоШтрихкоду(ШтрихКодБезПробелов);
			Если ВыборкаНайденныхНоменклатур.Количество() > 0 Тогда
				Пока ВыборкаНайденныхНоменклатур.Следующий() Цикл
					ПодобраннаяСтрока = ПодобраннаяНоменклатура.Добавить();
					ПодобраннаяСтрока.КодСтроки = НомерСтроки;
					ЗаполнитьЗначенияСвойств(ПодобраннаяСтрока, ВыборкаНайденныхНоменклатур);
				КонецЦикла;
			ИначеЕсли Объект.ЗагружатьУпаковочныеЛисты Тогда
				СтрокаСНовымКодом = КодыУпаковочныхЛистовНаПроверку.Добавить();
				СтрокаСНовымКодом.Код = ШтрихКодБезПробелов;
				СтрокаСНовымКодом.КодСтроки = НомерСтроки;
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.Код) И ЗначениеЗаполнено(НоваяСтрока.ХарактеристикаНаименование) Тогда
			
			Связи = Новый Структура("ЗначениеДляОтбораХарактеристик", "ЗначениеДляОтбораХарактеристик");
			ПоляНайденныхРанееДляРезультата = Новый Структура("Номенклатура", "Номенклатура");
			ПоляСвязаннойТаблицыДляРезультата = Новый Структура("Характеристика", "Характеристика");
			
			НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("Код", СтрокаПоискаКод));
			ОтборПоСвязаннойТаблице = Новый Структура("НаименованиеХарактеристикиПоиск", СтрокаПоискаХарактеристика);
			НайденныеСтроки = ПоискПоСвязаннойТаблице(НайденнаяНоменклатураПоКлючу, ТаблицаХарактеристик, Связи, ОтборПоСвязаннойТаблице, ПоляНайденныхРанееДляРезультата, ПоляСвязаннойТаблицыДляРезультата);
			Если НайденныеСтроки.Количество() = 0 Тогда
				ОтборПоСвязаннойТаблице = Новый Структура("НаименованиеХарактеристикиПолноеПоиск", СтрокаПоискаХарактеристика);
				НайденныеСтроки = ПоискПоСвязаннойТаблице(НайденнаяНоменклатураПоКлючу, ТаблицаХарактеристик, Связи, ОтборПоСвязаннойТаблице, ПоляНайденныхРанееДляРезультата, ПоляСвязаннойТаблицыДляРезультата);
				Если НайденныеСтроки.Количество() = 0 Тогда
					НайденныеСтроки = ПоискПоСвязаннойТаблице(НайденнаяНоменклатураПоКлючу, ТаблицаХарактеристик, Связи, Новый Структура, ПоляНайденныхРанееДляРезультата, ПоляСвязаннойТаблицыДляРезультата);
				КонецЕсли;
			КонецЕсли;
			Для каждого НайденнаяСтрока из НайденныеСтроки Цикл
				ДобавитьПодобраннуюНоменклатуру(НомерСтроки, НайденнаяСтрока.Номенклатура, НайденнаяСтрока.Характеристика);
			КонецЦикла;	
			
		ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.Артикул) И ЗначениеЗаполнено(НоваяСтрока.НоменклатураНаименование) И ЗначениеЗаполнено(НоваяСтрока.ХарактеристикаНаименование) Тогда
			
			Связи = Новый Структура("ЗначениеДляОтбораХарактеристик", "ЗначениеДляОтбораХарактеристик");
			ПоляНайденныхРанееДляРезультата = Новый Структура("Номенклатура", "Номенклатура");
			ПоляСвязаннойТаблицыДляРезультата = Новый Структура("Характеристика", "Характеристика");
			НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоиск, НаименованиеПоиск", СтрокаПоискаАртикул, СтрокаПоискаНоменклатура));
			ОтборПоСвязаннойТаблице = Новый Структура("НаименованиеХарактеристикиПоиск", СтрокаПоискаХарактеристика);
			НайденныеСтроки = ПоискПоСвязаннойТаблице(НайденнаяНоменклатураПоКлючу, ТаблицаХарактеристик, Связи, ОтборПоСвязаннойТаблице, ПоляНайденныхРанееДляРезультата, ПоляСвязаннойТаблицыДляРезультата);
			Если НайденныеСтроки.Количество() = 0 Тогда
				ОтборПоСвязаннойТаблице = Новый Структура("НаименованиеХарактеристикиПолноеПоиск", СтрокаПоискаХарактеристика);
				НайденныеСтроки = ПоискПоСвязаннойТаблице(НайденнаяНоменклатураПоКлючу, ТаблицаХарактеристик, Связи, ОтборПоСвязаннойТаблице, ПоляНайденныхРанееДляРезультата, ПоляСвязаннойТаблицыДляРезультата);
			КонецЕсли;
			Если НайденныеСтроки.Количество() = 0 Тогда
				НайденнаяНоменклатураПоАртикулНаименованиеПолное = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоиск, НаименованиеПолноеПоиск", СтрокаПоискаАртикул, СтрокаПоискаНоменклатура));
				ОтборПоСвязаннойТаблице = Новый Структура("НаименованиеХарактеристикиПоиск", СтрокаПоискаХарактеристика);
				НайденныеСтроки = ПоискПоСвязаннойТаблице(НайденнаяНоменклатураПоАртикулНаименованиеПолное, ТаблицаХарактеристик, Связи, ОтборПоСвязаннойТаблице, ПоляНайденныхРанееДляРезультата, ПоляСвязаннойТаблицыДляРезультата);
				Если НайденныеСтроки.Количество() = 0 Тогда
					ОтборПоСвязаннойТаблице = Новый Структура("НаименованиеХарактеристикиПолноеПоиск", СтрокаПоискаХарактеристика);
					НайденныеСтроки = ПоискПоСвязаннойТаблице(НайденнаяНоменклатураПоАртикулНаименованиеПолное, ТаблицаХарактеристик, Связи, ОтборПоСвязаннойТаблице, ПоляНайденныхРанееДляРезультата, ПоляСвязаннойТаблицыДляРезультата);
				КонецЕсли;
			КонецЕсли;
			НашлиНоменклатуруПоставщиков = Ложь;
			Если НайденныеСтроки.Количество() = 0 Тогда
				НайденныеСтроки = ПоискПоСвязаннойТаблице(НайденнаяНоменклатураПоКлючу, ТаблицаХарактеристик, Связи, Новый Структура, ПоляНайденныхРанееДляРезультата, ПоляСвязаннойТаблицыДляРезультата);
				Если НайденныеСтроки.Количество() = 0 Тогда
					НайденныеСтроки = ПоискПоСвязаннойТаблице(НайденнаяНоменклатураПоАртикулНаименованиеПолное, ТаблицаХарактеристик, Связи, Новый Структура, ПоляНайденныхРанееДляРезультата, ПоляСвязаннойТаблицыДляРезультата);
					Если НайденныеСтроки.Количество() = 0 Тогда
						НайденныеСтроки = ТаблицаНоменклатурыПоставщиков.НайтиСтроки(Новый Структура("АртикулПоставщикаПоиск, НоменклатураПартнераПоиск", СтрокаПоискаАртикул, СтрокаПоискаНоменклатура));
						НашлиНоменклатуруПоставщиков = (НайденныеСтроки.Количество()>0);
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;
			
			Для каждого НайденнаяСтрока из НайденныеСтроки Цикл
				ДобавитьПодобраннуюНоменклатуру(НомерСтроки, НайденнаяСтрока.Номенклатура, НайденнаяСтрока.Характеристика, ?(НашлиНоменклатуруПоставщиков, НайденнаяСтрока.НоменклатураПартнера, Неопределено));
			КонецЦикла;	
			
		ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.Код) И НЕ ЗначениеЗаполнено(НоваяСтрока.ХарактеристикаНаименование) Тогда
			
			НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("Код, НаименованиеПоиск", СтрокаПоискаКод, СтрокаПоискаНоменклатура));
			Если НайденнаяНоменклатураПоКлючу.Количество() = 0 Тогда
				НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("Код, НаименованиеПолноеПоиск", СтрокаПоискаКод, СтрокаПоискаНоменклатура));
				Если НайденнаяНоменклатураПоКлючу.Количество() = 0 Тогда
					НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("Код", СтрокаПоискаКод));
				КонецЕсли;
			КонецЕсли;
			Для каждого НоменклатураПоКлючу из НайденнаяНоменклатураПоКлючу Цикл
				ДобавитьПодобраннуюНоменклатуру(НомерСтроки, НоменклатураПоКлючу.Номенклатура);
			КонецЦикла;			
			
		ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.Артикул) И ЗначениеЗаполнено(НоваяСтрока.НоменклатураНаименование) И НЕ ЗначениеЗаполнено(НоваяСтрока.ХарактеристикаНаименование) Тогда
			НашлиНоменклатуруПоставщиков = Ложь;
			НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоиск, НаименованиеПоиск", СтрокаПоискаАртикул,	СтрокаПоискаНоменклатура));
			Если НайденнаяНоменклатураПоКлючу.Количество() = 0 Тогда
				НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоиск, НаименованиеПолноеПоиск",	СтрокаПоискаАртикул, СтрокаПоискаНоменклатура));
				Если НайденнаяНоменклатураПоКлючу.Количество() = 0 Тогда
					НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоиск", СтрокаПоискаАртикул));
					Если НайденнаяНоменклатураПоКлючу.Количество() = 0 Тогда
						НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатурыПоставщиков.НайтиСтроки(Новый Структура("АртикулПоставщикаПоиск, НоменклатураПартнераПоиск", СтрокаПоискаАртикул, СтрокаПоискаНоменклатура));
						НашлиНоменклатуруПоставщиков = (НайденнаяНоменклатураПоКлючу.Количество()>0);
						Если НайденнаяНоменклатураПоКлючу.Количество() = 0 Тогда
							НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатурыПоставщиков.НайтиСтроки(Новый Структура("АртикулПоставщикаПоиск", СтрокаПоискаАртикул));
							НашлиНоменклатуруПоставщиков = (НайденнаяНоменклатураПоКлючу.Количество()>0);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Для каждого НоменклатураПоКлючу из НайденнаяНоменклатураПоКлючу Цикл
				Если НашлиНоменклатуруПоставщиков Тогда
					ДобавитьПодобраннуюНоменклатуру(НомерСтроки, НоменклатураПоКлючу.Номенклатура, НоменклатураПоКлючу.Характеристика, НоменклатураПоКлючу.НоменклатураПартнера);
				Иначе
					ДобавитьПодобраннуюНоменклатуру(НомерСтроки, НоменклатураПоКлючу.Номенклатура);
				КонецЕсли;	
			КонецЦикла;
			
		ИначеЕсли НЕ ЗначениеЗаполнено(НоваяСтрока.Артикул) И ЗначениеЗаполнено(НоваяСтрока.НоменклатураНаименование) И ЗначениеЗаполнено(НоваяСтрока.ХарактеристикаНаименование) Тогда
			
			Связи = Новый Структура("ЗначениеДляОтбораХарактеристик", "ЗначениеДляОтбораХарактеристик");
			ПоляНайденныхРанееДляРезультата = Новый Структура("Характеристика", "Характеристика");
			ПоляСвязаннойТаблицыДляРезультата = Новый Структура("Номенклатура", "Номенклатура");
			
			НайденныеХарактеристикиПоКлючу = ТаблицаХарактеристик.НайтиСтроки(Новый Структура("НаименованиеХарактеристикиПоиск", СтрокаПоискаХарактеристика));
			ОтборПоСвязаннойТаблице = Новый Структура("НаименованиеПоиск", СтрокаПоискаНоменклатура);
			НайденныеСтроки = ПоискПоСвязаннойТаблице(НайденныеХарактеристикиПоКлючу, ТаблицаНоменклатуры, Связи, ОтборПоСвязаннойТаблице, ПоляНайденныхРанееДляРезультата, ПоляСвязаннойТаблицыДляРезультата);
			Если НайденныеСтроки.Количество() = 0 Тогда
				ОтборПоСвязаннойТаблице = Новый Структура("НаименованиеПолноеПоиск", СтрокаПоискаНоменклатура);
				НайденныеСтроки = ПоискПоСвязаннойТаблице(НайденныеХарактеристикиПоКлючу, ТаблицаНоменклатуры, Связи, ОтборПоСвязаннойТаблице, ПоляНайденныхРанееДляРезультата, ПоляСвязаннойТаблицыДляРезультата);
				Если НайденныеСтроки.Количество() = 0 Тогда
					НайденныеХарактеристикиПоКлючу = ТаблицаХарактеристик.НайтиСтроки(Новый Структура("НаименованиеХарактеристикиПолноеПоиск", СтрокаПоискаХарактеристика));
					ОтборПоСвязаннойТаблице = Новый Структура("НаименованиеПоиск", СтрокаПоискаНоменклатура);
					НайденныеСтроки = ПоискПоСвязаннойТаблице(НайденныеХарактеристикиПоКлючу, ТаблицаНоменклатуры, Связи, ОтборПоСвязаннойТаблице, ПоляНайденныхРанееДляРезультата, ПоляСвязаннойТаблицыДляРезультата);
					Если НайденныеСтроки.Количество() = 0 Тогда
						ОтборПоСвязаннойТаблице = Новый Структура("НаименованиеПолноеПоиск", СтрокаПоискаНоменклатура);
						НайденныеСтроки = ПоискПоСвязаннойТаблице(НайденныеХарактеристикиПоКлючу, ТаблицаНоменклатуры, Связи, ОтборПоСвязаннойТаблице, ПоляНайденныхРанееДляРезультата, ПоляСвязаннойТаблицыДляРезультата);
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;	
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				НашлиНоменклатуруПоставщиков = Ложь;
				НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("НаименованиеПоиск",	СтрокаПоискаНоменклатура));
				Если НайденнаяНоменклатураПоКлючу.Количество() = 0 Тогда
					НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("НаименованиеПолноеПоиск", СтрокаПоискаНоменклатура));
					Если НайденнаяНоменклатураПоКлючу.Количество() = 0 Тогда
						НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатурыПоставщиков.НайтиСтроки(Новый Структура("НоменклатураПартнераПоиск", СтрокаПоискаНоменклатура));
						НашлиНоменклатуруПоставщиков = (НайденнаяНоменклатураПоКлючу.Количество()>0);
					КонецЕсли;
				КонецЕсли;
				Для каждого НоменклатураПоКлючу из НайденнаяНоменклатураПоКлючу Цикл
					Если НашлиНоменклатуруПоставщиков Тогда
						ДобавитьПодобраннуюНоменклатуру(НомерСтроки, НоменклатураПоКлючу.Номенклатура, НоменклатураПоКлючу.Характеристика, НоменклатураПоКлючу.НоменклатураПартнера);
					Иначе
						НайденныеХарактеристикиПоКлючу = ТаблицаХарактеристик.НайтиСтроки(Новый Структура("ЗначениеДляОтбораХарактеристик", НоменклатураПоКлючу.ЗначениеДляОтбораХарактеристик));
						Для каждого ХарактеристикаПоКлючу из НайденныеХарактеристикиПоКлючу Цикл
							ДобавитьПодобраннуюНоменклатуру(НомерСтроки, НоменклатураПоКлючу.Номенклатура, ХарактеристикаПоКлючу.Характеристика);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			Иначе
				Для каждого НайденнаяСтрока из НайденныеСтроки Цикл
					ДобавитьПодобраннуюНоменклатуру(НомерСтроки, НайденнаяСтрока.Номенклатура, НайденнаяСтрока.Характеристика);
				КонецЦикла;
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.Артикул) И НЕ ЗначениеЗаполнено(НоваяСтрока.НоменклатураНаименование) И НЕ ЗначениеЗаполнено(НоваяСтрока.ХарактеристикаНаименование) Тогда
			
			НашлиНоменклатуруПоставщиков = Ложь;
			НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоиск",	СтрокаПоискаАртикул));
			Если НайденнаяНоменклатураПоКлючу.Количество() = 0 Тогда
				НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатурыПоставщиков.НайтиСтроки(Новый Структура("АртикулПоставщикаПоиск", СтрокаПоискаАртикул));
				НашлиНоменклатуруПоставщиков = (НайденнаяНоменклатураПоКлючу.Количество()>0);
			КонецЕсли;
			Для каждого НоменклатураПоКлючу из НайденнаяНоменклатураПоКлючу Цикл
				Если НашлиНоменклатуруПоставщиков Тогда
					ДобавитьПодобраннуюНоменклатуру(НомерСтроки, НоменклатураПоКлючу.Номенклатура, НоменклатураПоКлючу.Характеристика, НоменклатураПоКлючу.НоменклатураПартнера);
				Иначе
					ДобавитьПодобраннуюНоменклатуру(НомерСтроки, НоменклатураПоКлючу.Номенклатура);
				КонецЕсли;	
			КонецЦикла;
			
		ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.Артикул) И НЕ ЗначениеЗаполнено(НоваяСтрока.НоменклатураНаименование) И ЗначениеЗаполнено(НоваяСтрока.ХарактеристикаНаименование) Тогда
			
			Связи = Новый Структура("ЗначениеДляОтбораХарактеристик", "ЗначениеДляОтбораХарактеристик");
			ПоляНайденныхРанееДляРезультата = Новый Структура("Номенклатура", "Номенклатура");
			ПоляСвязаннойТаблицыДляРезультата = Новый Структура("Характеристика", "Характеристика");
			НашлиНоменклатуруПоставщиков = Ложь;
			НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоиск", СтрокаПоискаАртикул));
			ОтборПоСвязаннойТаблице = Новый Структура("НаименованиеХарактеристикиПоиск", СтрокаПоискаХарактеристика);
			НайденныеСтроки = ПоискПоСвязаннойТаблице(НайденнаяНоменклатураПоКлючу, ТаблицаХарактеристик, Связи, ОтборПоСвязаннойТаблице, ПоляНайденныхРанееДляРезультата, ПоляСвязаннойТаблицыДляРезультата);
			Если НайденныеСтроки.Количество() = 0 Тогда
				ОтборПоСвязаннойТаблице = Новый Структура("НаименованиеХарактеристикиПолноеПоиск", СтрокаПоискаХарактеристика);
				НайденныеСтроки = ПоискПоСвязаннойТаблице(НайденнаяНоменклатураПоКлючу, ТаблицаХарактеристик, Связи, ОтборПоСвязаннойТаблице, ПоляНайденныхРанееДляРезультата, ПоляСвязаннойТаблицыДляРезультата);
				Если НайденныеСтроки.Количество() = 0 Тогда
					НайденныеСтроки = ТаблицаНоменклатурыПоставщиков.НайтиСтроки(Новый Структура("АртикулПоставщикаПоиск", СтрокаПоискаАртикул));
					НашлиНоменклатуруПоставщиков = (НайденныеСтроки.Количество()>0);
				КонецЕсли;
			КонецЕсли;
			
			Для каждого НайденнаяСтрока из НайденныеСтроки Цикл
				ДобавитьПодобраннуюНоменклатуру(НомерСтроки, НайденнаяСтрока.Номенклатура, НайденнаяСтрока.Характеристика, ?(НашлиНоменклатуруПоставщиков, НайденнаяСтрока.НоменклатураПартнера, Неопределено) );
			КонецЦикла;
			
		ИначеЕсли НЕ ЗначениеЗаполнено(НоваяСтрока.Артикул) И ЗначениеЗаполнено(НоваяСтрока.НоменклатураНаименование) И НЕ ЗначениеЗаполнено(НоваяСтрока.ХарактеристикаНаименование) Тогда
			
			Если Объект.ЗагружатьУпаковочныеЛисты
				И СтрНайти(СтрокаПоискаНоменклатура, УпаковочныйЛистСинонимВРег) = 1 Тогда
				ПозицияОкончанияКода = СтрНайти(ВРег(НоваяСтрока.НоменклатураНаименование), " " + НСтр("ru='ОТ'") + " ") - 1;
				
				Если ПозицияОкончанияКода > 0 Тогда
					СтрокаПоискаКодаУпЛиста = СтрЗаменить(Лев(НоваяСтрока.НоменклатураНаименование, ПозицияОкончанияКода), " ", "");
				Иначе
					СтрокаПоискаКодаУпЛиста = СтрЗаменить(НоваяСтрока.НоменклатураНаименование, " ", "");
				КонецЕсли;
				СтрокаПоискаКодаУпЛиста = Сред(СтрокаПоискаКодаУпЛиста, ДлинаСинонимаУпаковочныйЛист + 1);
				СтрокаСНовымКодом = КодыУпаковочныхЛистовНаПроверку.Добавить();
				СтрокаСНовымКодом.Код = СтрокаПоискаКодаУпЛиста;
				СтрокаСНовымКодом.КодСтроки = НомерСтроки;
			Иначе
				
				НашлиНоменклатуруПоставщиков = Ложь;
				НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("НаименованиеПоиск",	СтрокаПоискаНоменклатура));
				Если НайденнаяНоменклатураПоКлючу.Количество() = 0 Тогда
					НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("НаименованиеПолноеПоиск", СтрокаПоискаНоменклатура));
					Если НайденнаяНоменклатураПоКлючу.Количество() = 0 Тогда
						НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатурыПоставщиков.НайтиСтроки(Новый Структура("НоменклатураПартнераПоиск", СтрокаПоискаНоменклатура));
						НашлиНоменклатуруПоставщиков = (НайденнаяНоменклатураПоКлючу.Количество()>0);
					КонецЕсли;
				КонецЕсли;
				Для каждого НоменклатураПоКлючу из НайденнаяНоменклатураПоКлючу Цикл
					Если НашлиНоменклатуруПоставщиков Тогда
						ДобавитьПодобраннуюНоменклатуру(НомерСтроки, НоменклатураПоКлючу.Номенклатура, НоменклатураПоКлючу.Характеристика, НоменклатураПоКлючу.НоменклатураПартнера);
					Иначе
						ДобавитьПодобраннуюНоменклатуру(НомерСтроки, НоменклатураПоКлючу.Номенклатура);
					КонецЕсли;	
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Заполнение тч Товары.
		НоваяСтрокаТовары = Объект.Товары.Добавить();
		НоваяСтрокаТовары.ЗагружаемаяНоменклатура    = НоваяСтрока.НоменклатураНаименование;
		НоваяСтрокаТовары.ЗагружаемаяХарактеристика  = НоваяСтрока.ХарактеристикаНаименование;
		НоваяСтрокаТовары.ЗагружаемыйАртикул         = НоваяСтрока.Артикул;
		НоваяСтрокаТовары.ЗагружаемыйШтрихкод        = НоваяСтрока.Штрихкод;
		НоваяСтрокаТовары.ЗагружаемыйКод             = НоваяСтрока.Код;
		НоваяСтрокаТовары.ЗагружаемыйНомерГТД        = НоваяСтрока.НомерГТД;
		НоваяСтрокаТовары.ЗагружаемаяСтранаПроисхождения = НоваяСтрока.СтранаПроисхождения;
		Если ЗагружатьКоличество Тогда
			НоваяСтрокаТовары.КоличествоУпаковок        = НоваяСтрока.Количество;
		КонецЕсли;
		НоваяСтрокаТовары.КодСтроки                  = НомерСтроки;
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, НоваяСтрока,,"Артикул");
		
		МассивПодобраннойНоменклатуры = ПодобраннаяНоменклатура.НайтиСтроки(Новый Структура("КодСтроки", НомерСтроки));
		
		Если МассивПодобраннойНоменклатуры.Количество() = 1 Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, МассивПодобраннойНоменклатуры.Получить(0));
		ИначеЕсли МассивПодобраннойНоменклатуры.Количество() = 0 Тогда
			ТекстОшибки = НСтр("ru='По данным для поиска в строке %НомерСтроки% совпадений не найдено.'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", НомерСтроки-ВысотаШапки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Иначе
			ТекстОшибки = НСтр("ru='По данным для поиска в строке %НомерСтроки% найдено несколько совпадений.'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", НомерСтроки-ВысотаШапки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
		
		ПараметрыЗаполнитьСтавкуНДС = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС();
		ПараметрыЗаполнитьСтавкуНДС.Организация = Организация;
		ПараметрыЗаполнитьСтавкуНДС.НалогообложениеНДС = НалогообложениеНДС;
		ПараметрыЗаполнитьСтавкуНДС.Дата = ДатаЗаполнения;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ПараметрыЗаполнитьСтавкуНДС);
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", ЭтоВозвратнаяТара);
		Если ЗагружатьКоличество Тогда
			
			Если НоваяСтрокаТовары.Количество > 0 Тогда
				СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПересчитыватьСуммы Тогда
			СтруктураПересчетаСуммы = Новый Структура;
			СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
			
			ЕстьСкидки = ЗначениеЗаполнено(НоваяСтрока.СуммаРучнойСкидки) ИЛИ ЗначениеЗаполнено(НоваяСтрока.ПроцентРучнойСкидки);
			
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СуммаНДС) ИЛИ ЕстьСкидки Тогда
				СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СуммаСНДС)  ИЛИ ЕстьСкидки Тогда
				СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.Сумма) ИЛИ ЕстьСкидки Тогда
				СтруктураДействий.Вставить("ПересчитатьСумму");
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СуммаРучнойСкидки) И ЗначениеЗаполнено(НоваяСтрока.ПроцентРучнойСкидки) Тогда
				СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
			КонецЕсли;
			Если ЗначениеЗаполнено(НоваяСтрока.СуммаРучнойСкидки) И НЕ ЗначениеЗаполнено(НоваяСтрока.ПроцентРучнойСкидки) Тогда
				СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НоваяСтрока.СуммаРучнойСкидки) ИЛИ ЗначениеЗаполнено(НоваяСтрока.ПроцентРучнойСкидки) Тогда
				СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
			КонецЕсли;
			
		КонецЕсли;
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрокаТовары, СтруктураДействий, Неопределено);
		
		НомерСтроки = НомерСтроки + 1;
		СтроковыйНомер = Формат(НомерСтроки, "ЧН=0; ЧГ=0");
		
		Попытка
			ЗаполненыНоменклатураКодАртикулШтрихкод = ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаАртикул")).Текст)
				Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаНоменклатура")).Текст)
				Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаШтрихкод")).Текст)
				Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаКод")).Текст);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	
	Если ЗагружатьГТД Тогда
		ДополнитьТоварыНомерамиГТД();
	КонецЕсли;
	
	Если Объект.ЗагружатьУпаковочныеЛисты Тогда
		ЗаполнитьУпаковочныеЛисты();
	КонецЕсли;
	
	УточнениеНоменклатуры.Очистить();
	
КонецПроцедуры

&НаСервере
Функция ПодобратьНоменклатуруПоШтрихкоду(Штрихкод)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
		|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
		|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
		|	ШтрихкодыНоменклатуры.Упаковка КАК Упаковка
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
		|		ПО (ВариантыКомплектацииНоменклатуры.Владелец = ШтрихкодыНоменклатуры.Номенклатура)
		|			И (ВариантыКомплектацииНоменклатуры.Владелец.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Набор))
		|			И (ВариантыКомплектацииНоменклатуры.Характеристика = ШтрихкодыНоменклатуры.Характеристика)
		|			И (ВариантыКомплектацииНоменклатуры.Основной)
		|ГДЕ
		|	ИСТИНА
		|	И ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод
		|	И &ТекстУсловияОтбораПоНоменклатуре
		|";
	
	ТекстУсловияОтбораПоНоменклатуре = "ИСТИНА";
	Если ЗначениеЗаполнено(ОтборПоНоменклатуре) Тогда
		
		Условия = Новый Массив;
		Для Каждого Отбор Из ОтборПоНоменклатуре Цикл
			Условия.Добавить(СтрШаблон("ШтрихкодыНоменклатуры.Номенклатура.%1 В (&%2)", Отбор.Ключ, Отбор.Ключ));
			Запрос.УстановитьПараметр(Отбор.Ключ, Отбор.Значение);
		КонецЦикла;
		
		ТекстУсловияОтбораПоНоменклатуре = СтрСоединить(Условия, Символы.ПС + Символы.Таб + "И ");
		
		Если ОтборПоНоменклатуре.Свойство("ТипНоменклатуры")
			И ОтборПоНоменклатуре.ТипНоменклатуры.Найти(Перечисления.ТипыНоменклатуры.Набор) <> Неопределено Тогда
			
			ОграничиватьНаборыПоУслугам = ОтборПоНоменклатуре.ТипНоменклатуры.Найти(Перечисления.ТипыНоменклатуры.Услуга) <> Неопределено
				Или ОтборПоНоменклатуре.ТипНоменклатуры.Найти(Перечисления.ТипыНоменклатуры.Работа) <> Неопределено;
			ОграничиватьНаборыПоТоварам = ОтборПоНоменклатуре.ТипНоменклатуры.Найти(Перечисления.ТипыНоменклатуры.МногооборотнаяТара) <> Неопределено
				Или ОтборПоНоменклатуре.ТипНоменклатуры.Найти(Перечисления.ТипыНоменклатуры.Товар) <> Неопределено;
			
			Если Не ОграничиватьНаборыПоУслугам И ОграничиватьНаборыПоТоварам Тогда
				ТекстУсловияОтбораПоНоменклатуре = ТекстУсловияОтбораПоНоменклатуре + "
					|	И Не ЕСТЬNULL(ВариантыКомплектацииНоменклатуры.СодержитУслуги, Ложь)";
			КонецЕсли;
			Если ОграничиватьНаборыПоУслугам И Не ОграничиватьНаборыПоТоварам Тогда
				ТекстУсловияОтбораПоНоменклатуре = ТекстУсловияОтбораПоНоменклатуре + "
					|	И Не ЕСТЬNULL(ВариантыКомплектацииНоменклатуры.СодержитТовары, Ложь)";
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ТекстУсловияОтбораПоНоменклатуре", ТекстУсловияОтбораПоНоменклатуре);
	Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

&НаСервере
Функция ПолучитьДанныеИБпоНоменклатуреИхарактеристикам()
	
	Результат = Новый Структура;
	Результат.Вставить("ТаблицаНоменклатуры", Новый ТаблицаЗначений);
	Результат.Вставить("ТаблицаХарактеристик", Новый ТаблицаЗначений);
	Результат.Вставить("ТаблицаНоменклатурыПоставщиков", Новый ТаблицаЗначений);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Номенклатура.Ссылка КАК Номенклатура,
		|	Номенклатура.Код КАК Код,
		|	Номенклатура.Артикул КАК Артикул,
		|	Номенклатура.Наименование КАК Наименование,
		|	Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
		|	Номенклатура.ИспользованиеХарактеристик КАК ИспользованиеХарактеристик,
		|	НЕОПРЕДЕЛЕНО КАК ЗначениеДляОтбораХарактеристик
		|ПОМЕСТИТЬ ТаблицаНоменклатуры
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
		|		ПО (ВариантыКомплектацииНоменклатуры.Владелец = Номенклатура.Ссылка)
		|			И (ВариантыКомплектацииНоменклатуры.Владелец.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Набор))
		|			И (ВариантыКомплектацииНоменклатуры.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|			И (ВариантыКомплектацииНоменклатуры.Основной)
		|ГДЕ
		|	НЕ Номенклатура.ЭтоГруппа
		|	И НЕ Номенклатура.ПометкаУдаления
		|	И Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
		|	И &ТекстУсловияОтбор
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Номенклатура.Ссылка,
		|	Номенклатура.Код,
		|	Номенклатура.Артикул,
		|	Номенклатура.Наименование,
		|	Номенклатура.НаименованиеПолное,
		|	Номенклатура.ИспользованиеХарактеристик,
		|	ВЫБОР
		|		КОГДА Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
		|			ТОГДА Номенклатура.Ссылка
		|		КОГДА Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
		|			ТОГДА Номенклатура.ВладелецХарактеристик
		|		КОГДА Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
		|			ТОГДА Номенклатура.ВидНоменклатуры
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ПО (ВЫБОР
		|				КОГДА Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
		|					ТОГДА Номенклатура.Ссылка
		|				КОГДА Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
		|					ТОГДА Номенклатура.ВладелецХарактеристик
		|				КОГДА Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
		|					ТОГДА Номенклатура.ВидНоменклатуры
		|				ИНАЧЕ НЕОПРЕДЕЛЕНО
		|			КОНЕЦ = ХарактеристикиНоменклатуры.Владелец)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
		|		ПО (ВариантыКомплектацииНоменклатуры.Владелец = Номенклатура.Ссылка)
		|			И (ВариантыКомплектацииНоменклатуры.Владелец.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Набор))
		|			И (ВариантыКомплектацииНоменклатуры.Характеристика = ХарактеристикиНоменклатуры.Ссылка)
		|			И (ВариантыКомплектацииНоменклатуры.Основной)
		|ГДЕ
		|	Номенклатура.ИспользованиеХарактеристик <> ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
		|	И НЕ Номенклатура.ПометкаУдаления
		|	И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
		|	И &ТекстУсловияОтбор
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаНоменклатуры.ИспользованиеХарактеристик КАК ИспользованиеХарактеристик,
		|	ТаблицаНоменклатуры.ЗначениеДляОтбораХарактеристик КАК ЗначениеДляОтбораХарактеристик
		|ПОМЕСТИТЬ ПараметрыОтбораХарактеристик
		|ИЗ
		|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПараметрыОтбора.ЗначениеДляОтбораХарактеристик КАК ЗначениеДляОтбораХарактеристик,
		|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
		|	ХарактеристикиНоменклатуры.Наименование КАК Наименование,
		|	ХарактеристикиНоменклатуры.НаименованиеПолное КАК НаименованиеПолное
		|ПОМЕСТИТЬ ТаблицаХарактеристик
		|ИЗ
		|	ПараметрыОтбораХарактеристик КАК ПараметрыОтбора
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ПО ПараметрыОтбора.ЗначениеДляОтбораХарактеристик = ХарактеристикиНоменклатуры.Владелец
		|ГДЕ
		|	НЕ ПараметрыОтбора.ЗначениеДляОтбораХарактеристик = НЕОПРЕДЕЛЕНО
		|	И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗначениеДляОтбораХарактеристик,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Хар.Характеристика.Наименование КАК НаименованиеХарактеристики,
		|	Хар.Характеристика.НаименованиеПолное КАК НаименованиеХарактеристикиПолное,
		|	Хар.Характеристика КАК Характеристика,
		|	Хар.ЗначениеДляОтбораХарактеристик КАК ЗначениеДляОтбораХарактеристик
		|ИЗ
		|	ТаблицаХарактеристик КАК Хар
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Ном.Код КАК Код,
		|	Ном.Артикул КАК Артикул,
		|	Ном.Наименование КАК Наименование,
		|	Ном.НаименованиеПолное КАК НаименованиеПолное,
		|	Ном.Номенклатура КАК Номенклатура,
		|	Ном.ИспользованиеХарактеристик КАК ИспользованиеХарактеристик,
		|	Ном.ЗначениеДляОтбораХарактеристик КАК ЗначениеДляОтбораХарактеристик
		|ИЗ
		|	ТаблицаНоменклатуры КАК Ном";
		
	Если СопоставлятьПоНоменклатуреПоставщиков Тогда
		Запрос.Текст = Запрос.Текст + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Ном.Номенклатура КАК Номенклатура,
		|	НоменклатураКонтрагентов.Ссылка КАК НоменклатураПартнера,
		|	НоменклатураКонтрагентов.Артикул КАК АртикулПоставщика,
		|	НоменклатураКонтрагентов.Характеристика КАК Характеристика
		|ИЗ
		|	Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаНоменклатуры КАК Ном
		|		ПО (Ном.Номенклатура = НоменклатураКонтрагентов.Номенклатура)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаХарактеристик КАК Хар
		|		ПО (Хар.ЗначениеДляОтбораХарактеристик = Ном.ЗначениеДляОтбораХарактеристик)
		|			И (Хар.Характеристика = НоменклатураКонтрагентов.Характеристика)
		|ГДЕ
		|	НЕ НоменклатураКонтрагентов.ПометкаУдаления
		|	И НоменклатураКонтрагентов.Владелец = &Партнер";
		
		Запрос.УстановитьПараметр("Партнер", Объект.Партнер);
	КонецЕсли;
	
	ТекстУсловияОтбораПоНоменклатуре = "ИСТИНА";
	Если ЗначениеЗаполнено(ОтборПоНоменклатуре) Тогда
		
		Условия = Новый Массив;
		Для Каждого Отбор Из ОтборПоНоменклатуре Цикл
			Условия.Добавить(СтрШаблон("Номенклатура.%1 В (&%2)", Отбор.Ключ, Отбор.Ключ));
			Запрос.УстановитьПараметр(Отбор.Ключ, Отбор.Значение);
		КонецЦикла;
		
		ТекстУсловияОтбораПоНоменклатуре = СтрСоединить(Условия, Символы.ПС + Символы.Таб + "И ");
		
		Если ОтборПоНоменклатуре.Свойство("ТипНоменклатуры")
			И ОтборПоНоменклатуре.ТипНоменклатуры.Найти(Перечисления.ТипыНоменклатуры.Набор) <> Неопределено Тогда
			
			ОграничиватьНаборыПоУслугам = ОтборПоНоменклатуре.ТипНоменклатуры.Найти(Перечисления.ТипыНоменклатуры.Услуга) <> Неопределено
				Или ОтборПоНоменклатуре.ТипНоменклатуры.Найти(Перечисления.ТипыНоменклатуры.Работа) <> Неопределено;
			ОграничиватьНаборыПоТоварам = ОтборПоНоменклатуре.ТипНоменклатуры.Найти(Перечисления.ТипыНоменклатуры.МногооборотнаяТара) <> Неопределено
				Или ОтборПоНоменклатуре.ТипНоменклатуры.Найти(Перечисления.ТипыНоменклатуры.Товар) <> Неопределено;
			
			Если Не ОграничиватьНаборыПоУслугам И ОграничиватьНаборыПоТоварам Тогда
				ТекстУсловияОтбораПоНоменклатуре = ТекстУсловияОтбораПоНоменклатуре + "
					|	И Не ЕСТЬNULL(ВариантыКомплектацииНоменклатуры.СодержитУслуги, Ложь)";
			КонецЕсли;
			Если ОграничиватьНаборыПоУслугам И Не ОграничиватьНаборыПоТоварам Тогда
				ТекстУсловияОтбораПоНоменклатуре = ТекстУсловияОтбораПоНоменклатуре + "
					|	И Не ЕСТЬNULL(ВариантыКомплектацииНоменклатуры.СодержитТовары, Ложь)";
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ТекстУсловияОтбор", ТекстУсловияОтбораПоНоменклатуре);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	РезультатЗапроса = МассивРезультатов[3]; // РезультатЗапроса
	
	Для Каждого КолонкаРезультата Из РезультатЗапроса.Колонки Цикл
		Результат.ТаблицаХарактеристик.Колонки.Добавить(КолонкаРезультата.Имя);
	КонецЦикла;
	Результат.ТаблицаХарактеристик.Колонки.Добавить("НаименованиеХарактеристикиПоиск");
	Результат.ТаблицаХарактеристик.Колонки.Добавить("НаименованиеХарактеристикиПолноеПоиск");
	ВыборкаТаблицыХарактеристик = РезультатЗапроса.Выбрать();
	Пока ВыборкаТаблицыХарактеристик.Следующий() Цикл
		НоваяСтрокаТаблицыХарактеристик = Результат.ТаблицаХарактеристик.Добавить();
		ЗаполнитьЗначенияСвойств( НоваяСтрокаТаблицыХарактеристик, ВыборкаТаблицыХарактеристик);
		
		НоваяСтрокаТаблицыХарактеристик.НаименованиеХарактеристикиПоиск = ВРег(СтрЗаменить(НоваяСтрокаТаблицыХарактеристик.НаименованиеХарактеристики, " ", ""));
		НоваяСтрокаТаблицыХарактеристик.НаименованиеХарактеристикиПолноеПоиск = ВРег(СтрЗаменить(НоваяСтрокаТаблицыХарактеристик.НаименованиеХарактеристикиПолное, " ", ""));
	КонецЦикла;
	
	РезультатЗапроса = МассивРезультатов[4]; // РезультатЗапроса

	Для Каждого КолонкаРезультата Из РезультатЗапроса.Колонки Цикл
		Результат.ТаблицаНоменклатуры.Колонки.Добавить(КолонкаРезультата.Имя);
	КонецЦикла;
	Результат.ТаблицаНоменклатуры.Колонки.Добавить("АртикулПоиск");
	Результат.ТаблицаНоменклатуры.Колонки.Добавить("НаименованиеПоиск");
	Результат.ТаблицаНоменклатуры.Колонки.Добавить("НаименованиеПолноеПоиск");
	ВыборкаТаблицыНоменклатуры = РезультатЗапроса.Выбрать();
	Пока ВыборкаТаблицыНоменклатуры.Следующий() Цикл
		НоваяСтрокаТаблицыНоменклатуры = Результат.ТаблицаНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств( НоваяСтрокаТаблицыНоменклатуры, ВыборкаТаблицыНоменклатуры);
		
		НоваяСтрокаТаблицыНоменклатуры.Код = ВРег(СтрЗаменить(НоваяСтрокаТаблицыНоменклатуры.Код, " ", ""));
		НоваяСтрокаТаблицыНоменклатуры.АртикулПоиск = ВРег(СтрЗаменить(НоваяСтрокаТаблицыНоменклатуры.Артикул, " ", ""));
		НоваяСтрокаТаблицыНоменклатуры.НаименованиеПоиск = ВРег(СтрЗаменить(НоваяСтрокаТаблицыНоменклатуры.Наименование, " ", ""));
		НоваяСтрокаТаблицыНоменклатуры.НаименованиеПолноеПоиск = ВРег(СтрЗаменить(НоваяСтрокаТаблицыНоменклатуры.НаименованиеПолное, " ", ""));
	КонецЦикла;
	
	Результат.ТаблицаНоменклатурыПоставщиков.Колонки.Добавить("Номенклатура");
	Результат.ТаблицаНоменклатурыПоставщиков.Колонки.Добавить("НоменклатураПартнера");
	Результат.ТаблицаНоменклатурыПоставщиков.Колонки.Добавить("АртикулПоставщика");
	Результат.ТаблицаНоменклатурыПоставщиков.Колонки.Добавить("Характеристика");
	Результат.ТаблицаНоменклатурыПоставщиков.Колонки.Добавить("НоменклатураПартнераПоиск");
	Результат.ТаблицаНоменклатурыПоставщиков.Колонки.Добавить("АртикулПоставщикаПоиск");
	Если СопоставлятьПоНоменклатуреПоставщиков Тогда
		РезультатЗапроса = МассивРезультатов[5]; // РезультатЗапроса
		ВыборкаТаблицыНоменклатурыПоставщиков = РезультатЗапроса.Выбрать();
		Пока ВыборкаТаблицыНоменклатурыПоставщиков.Следующий() Цикл
			НоваяСтрокаТаблицыНоменклатурыПоставщиков = Результат.ТаблицаНоменклатурыПоставщиков.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицыНоменклатурыПоставщиков, ВыборкаТаблицыНоменклатурыПоставщиков);
			
			НоваяСтрокаТаблицыНоменклатурыПоставщиков.НоменклатураПартнераПоиск = ВРег(СтрЗаменить(НоваяСтрокаТаблицыНоменклатурыПоставщиков.НоменклатураПартнера, " ", ""));
			НоваяСтрокаТаблицыНоменклатурыПоставщиков.АртикулПоставщикаПоиск = ВРег(СтрЗаменить(НоваяСтрокаТаблицыНоменклатурыПоставщиков.АртикулПоставщика, " ", ""));
		КонецЦикла;
	КонецЕсли;	
	
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ДополнитьТоварыНомерамиГТД()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаГТД.КодСтроки КАК КодСтроки,
	|	ТаблицаГТД.НомерГТД КАК НомерГТД,
	|	ТаблицаГТД.СтранаПроисхождения КАК СтранаПроисхождения
	|ПОМЕСТИТЬ ТаблицаНомеровГТД
	|ИЗ
	|	&ТаблицаГТД КАК ТаблицаГТД
	|ГДЕ
	|	ТаблицаГТД.НомерГТД <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеСправочника.Ссылка КАК НомерГТДСсылка,
	|	ДанныеСправочника.СтранаПроисхождения.Наименование КАК СтранаПроисхождения,
	|	ТаблицаНомеровГТД.НомерГТД КАК НомерГТД,
	|	ТаблицаНомеровГТД.КодСтроки КАК КодСтроки
	|ИЗ
	|	ТаблицаНомеровГТД КАК ТаблицаНомеровГТД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НомераГТД КАК ДанныеСправочника
	|		ПО ТаблицаНомеровГТД.НомерГТД = ДанныеСправочника.Код 
	|			И ТаблицаНомеровГТД.СтранаПроисхождения = ДанныеСправочника.СтранаПроисхождения.Наименование
	|ГДЕ
	|	НЕ ДанныеСправочника.ПометкаУдаления
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНомеровГТД.КодСтроки КАК КодСтроки,
	|	ДанныеСправочника.Ссылка КАК СтранаПроисхождения
	|ИЗ
	|	ТаблицаНомеровГТД КАК ТаблицаНомеровГТД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтраныМира КАК ДанныеСправочника
	|		ПО ТаблицаНомеровГТД.СтранаПроисхождения = ДанныеСправочника.Наименование
	|ГДЕ
	|	НЕ ДанныеСправочника.ПометкаУдаления");
	ТаблицаГТД = УточнениеНоменклатуры.Выгрузить(,"КодСтроки, НомерГТД, СтранаПроисхождения");
	Запрос.УстановитьПараметр("ТаблицаГТД", ТаблицаГТД);
	Результат = Запрос.ВыполнитьПакет();

	ВыборкаГТД = Результат[1].Выгрузить();
	ВыборкаСтран = Результат[2].Выгрузить();
	
	Для каждого УточняемаяСтрока Из ТаблицаГТД Цикл
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("КодСтроки", УточняемаяСтрока.КодСтроки); 
		Если ЗначениеЗаполнено(УточняемаяСтрока.НомерГТД) Тогда
			НайденныеСтроки = ВыборкаГТД.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() = 1 Тогда
				ЗаполняемыеСтрокиТаблицыТовары = Объект.Товары.НайтиСтроки(Новый Структура("КодСтроки", УточняемаяСтрока.КодСтроки));
				Если ЗаполняемыеСтрокиТаблицыТовары.Количество() = 1 Тогда
					ЗаполняемыеСтрока = ЗаполняемыеСтрокиТаблицыТовары.Получить(0);
					ЗаполняемыеСтрока.НомерГТД = НайденныеСтроки.Получить(0).НомерГТДСсылка;
				КонецЕсли; 
			ИначеЕсли НайденныеСтроки.Количество() = 0 Тогда
				ЗаполняемыеСтрокиТаблицыТовары = Объект.Товары.НайтиСтроки(Новый Структура("КодСтроки", УточняемаяСтрока.КодСтроки));
				Если ЗаполняемыеСтрокиТаблицыТовары.Количество() = 1 Тогда
					ЗаполняемыеСтрока = ЗаполняемыеСтрокиТаблицыТовары.Получить(0);
					ЗаполняемыеСтрока.СоздатьНомерГТД = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		Если ЗначениеЗаполнено(УточняемаяСтрока.СтранаПроисхождения) Тогда
			НайденныеСтраны = ВыборкаСтран.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтраны.Количество() = 1 Тогда
				ЗаполняемыеСтрока.СтранаПроисхождения = НайденныеСтраны.Получить(0).СтранаПроисхождения;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ИнициализироватьТабличныйДокумент()
	
	МакетЗаполненияПоВнешнемуИсточнику = Обработки.ЗагрузкаТоваровИзВнешнихФайлов.ПолучитьМакет("МакетЗагрузкиДанных");
	ТабличныйДокумент.Очистить();
	
	ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Штрихкод");
	ТабличныйДокумент.Присоединить(ОбластьТовары);
	ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Код");
	ТабличныйДокумент.Присоединить(ОбластьТовары);
	ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Артикул");
	ТабличныйДокумент.Присоединить(ОбластьТовары);
	ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Номенклатура");
	Если Объект.ЗагружатьУпаковочныеЛисты Тогда
		ОбластьТовары.Параметры.ЗаголовокТоварноеМесто = НСтр("ru='Номенклатура / Упаковочный лист'");
	Иначе
		ОбластьТовары.Параметры.ЗаголовокТоварноеМесто = НСтр("ru='Номенклатура'");
	КонецЕсли;
	ТабличныйДокумент.Присоединить(ОбластьТовары);
	Если ИспользоватьХарактеристикиНоменклатуры Тогда
		ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Характеристика");
		ТабличныйДокумент.Присоединить(ОбластьТовары);
	КонецЕсли;
	Если ЗагружатьКоличество Тогда
		ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Количество");
		ТабличныйДокумент.Присоединить(ОбластьТовары);
	КонецЕсли;
	Если ЗагружатьЗапасы Тогда
		ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("МинимальныйОстаток");
		ТабличныйДокумент.Присоединить(ОбластьТовары);
		ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("МаксимальныйОстаток");
		ТабличныйДокумент.Присоединить(ОбластьТовары);
	КонецЕсли;
	Если ЗагружатьЦены Тогда
		ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Цена");
		ТабличныйДокумент.Присоединить(ОбластьТовары);
	КонецЕсли;
	Если ЗагружатьСуммы Тогда
		Если ИспользоватьРучныеСкидкиВЗакупках И ЗагружатьСкидки Тогда
			ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("ПроцентРучнойСкидки");
			ТабличныйДокумент.Присоединить(ОбластьТовары);
			ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("СуммаРучнойСкидки");
			ТабличныйДокумент.Присоединить(ОбластьТовары);
		КонецЕсли;
		ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Сумма");
		ТабличныйДокумент.Присоединить(ОбластьТовары);
		
		Если НалогообложениеНДС <> Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС Тогда
			ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("СуммаНДС");
			ТабличныйДокумент.Присоединить(ОбластьТовары);
			Если НЕ ЦенаВключаетНДС Тогда
				ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("СуммаСНДС");
				ТабличныйДокумент.Присоединить(ОбластьТовары);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ЗагружатьГТД Тогда
		ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("НомерГТД");
		ТабличныйДокумент.Присоединить(ОбластьТовары);
		ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("СтранаПроисхождения");
		ТабличныйДокумент.Присоединить(ОбластьТовары);
	КонецЕсли;
	
	ТабличныйДокумент.ФиксацияСверху = 1;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ЦенаВключаетНДС, ПересчитыватьСуммы)
	
	СтруктураПересчетаСуммы = Новый Структура;
		
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если Не ПересчитыватьСуммы Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуре()
	ПараметрыЗаполненияРеквизитов = Новый Структура;
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
											Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакТипНоменклатуры",
											Новый Структура("Номенклатура", "ТипНоменклатуры"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакАртикул",
											Новый Структура("Номенклатура", "Артикул"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД",
											Новый Структура("Номенклатура", "ВедетсяУчетПоГТД"));
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары,ПараметрыЗаполненияРеквизитов);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораНоменклатурыХарактеристик(КодТекущейСтроки, СписокХарактеристик = Ложь)
	
	Если СписокХарактеристик Тогда
		СписокВыбораХарактеристка = Элементы.ТоварыХарактеристика.СписокВыбора;
		СписокВыбораХарактеристка.Очистить();
	Иначе
		СписокВыбораНоменклатура  = Элементы.ТоварыНоменклатура.СписокВыбора;
		СписокВыбораНоменклатура.Очистить();
	КонецЕсли;
	
	МассивПодобраннойНоменклатуры = ПодобраннаяНоменклатура.НайтиСтроки(Новый Структура("КодСтроки", КодТекущейСтроки));
	Для каждого ЭлементМассива Из МассивПодобраннойНоменклатуры Цикл
		Если СписокХарактеристик Тогда
			Если СписокВыбораХарактеристка.НайтиПоЗначению(ЭлементМассива.Характеристика) = Неопределено Тогда
				СписокВыбораХарактеристка.Добавить(ЭлементМассива.Характеристика);
			КонецЕсли;
		Иначе
			Если СписокВыбораНоменклатура.НайтиПоЗначению(ЭлементМассива.Номенклатура) = Неопределено Тогда
				СписокВыбораНоменклатура.Добавить(ЭлементМассива.Номенклатура);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораУпаковочныхЛистов(КодТекущейСтроки)
	
	МассивПодобранныхУпЛистов = ПодобранныеУпаковочныеЛисты.НайтиСтроки(Новый Структура("КодСтроки", КодТекущейСтроки));
	СписокВыбора = Элементы.ТоварыУпаковочныйЛист.СписокВыбора;
	СписокВыбора.Очистить();
	Для Каждого Стр Из МассивПодобранныхУпЛистов Цикл
		ПредставлениеУпаковочногоЛиста =
			Стр.Код + " " + НСтр("ru='от'") + " " + Стр.Дата;
		СписокВыбора.Добавить(Стр.УпаковочныйЛист, ПредставлениеУпаковочногоЛиста);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ПоместитьТоварыВХранилище()

	Товары = Объект.Товары.Выгрузить();
	
	ТоварыДляПереноса = Товары.СкопироватьКолонки();
	ТоварыДляПереноса.Колонки.Добавить("НоменклатураНабора", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТоварыДляПереноса.Колонки.Добавить("ХарактеристикаНабора", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТоварыДляПереноса.Колонки.Добавить("ИндексНабора", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(10,0));
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	
	ПараметрыЗаполнитьСтавкуНДС = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС();
	ПараметрыЗаполнитьСтавкуНДС.Организация = Организация;
	ПараметрыЗаполнитьСтавкуНДС.НалогообложениеНДС = НалогообложениеНДС;
	ПараметрыЗаполнитьСтавкуНДС.Дата = ДатаЗаполнения;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ПараметрыЗаполнитьСтавкуНДС);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", ЭтоВозвратнаяТара);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ЗаполнитьСтрануПроисхожденияДляНомераГТД");
	
	КэшированныеЗначения = Неопределено;
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		
		Если СтрокаТЧ.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Набор Тогда
			НоваяСтрока = ТоварыДляПереноса.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			
			Если ЗначениеЗаполнено(НоваяСтрока.НомерГТД)
				И Не ЗначениеЗаполнено(НоваяСтрока.СтранаПроисхождения) Тогда
				
				ПараметрыЗаполненияСтраныПроисхождения = Новый Структура("НомерГТД", НоваяСтрока.НомерГТД);
				Действия = Новый Структура("ЗаполнитьСтрануПроисхожденияДляНомераГТД", ПараметрыЗаполненияСтраныПроисхождения);
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, Действия, КэшированныеЗначения);
				
			КонецЕсли;
		Иначе
			
			ПараметрыКомплектующих = ПодборТоваровКлиентСервер.ПараметрыТовара();
			ЗаполнитьЗначенияСвойств(ПараметрыКомплектующих, СтрокаТЧ);
			ПараметрыКомплектующих.НоменклатураНабора   = СтрокаТЧ.Номенклатура;
			ПараметрыКомплектующих.ХарактеристикаНабора = СтрокаТЧ.Характеристика;
			ПараметрыКомплектующих.Вставить("ВариантКомплектацииНоменклатуры", Неопределено);
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Дата",       ПараметрыЦенКомплектующих.Дата);
			ДополнительныеПараметры.Вставить("Валюта",     ПараметрыЦенКомплектующих.Валюта);
			ДополнительныеПараметры.Вставить("Соглашение", ПараметрыЦенКомплектующих.Соглашение);
			ДополнительныеПараметры.Вставить("ВидЦены",    ПараметрыЦенКомплектующих.ВидЦены);
			ДополнительныеПараметры.Вставить("Цена",       СтрокаТЧ.Цена);
			ДополнительныеПараметры.Вставить("Организация", Организация);
			ПодобранныеТовары = НаборыВызовСервера.Комплектующие(ПараметрыКомплектующих, ДополнительныеПараметры);
			
			Для Каждого ПодобранныйТовар Из ПодобранныеТовары Цикл
				
				НоваяСтрока = ТоварыДляПереноса.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ПодобранныйТовар);
				НоваяСтрока.ИндексНабора = 1;
				
				ПараметрыЗаполненияСтраныПроисхождения = Новый Структура("НомерГТД", НоваяСтрока.НомерГТД);
				СтруктураДействий.ЗаполнитьСтрануПроисхожденияДляНомераГТД = ПараметрыЗаполненияСтраныПроисхождения;
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(ТоварыДляПереноса);
	
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьНомерГТД(НомерГТД, СтранаПроисхождения)
	
	НовыйНомерГТД = Справочники.НомераГТД.СоздатьЭлемент();
	ПараметрыДляЗаполнения = Справочники.НомераГТД.ПараметрыДляЗаполненияЭлемента(НомерГТД, СтранаПроисхождения);
	ПараметрыДляЗаполнения.ЗаполнитьПорядковыйНомерТовараАвтоматически = Истина;
	НовыйНомерГТД.Заполнить(ПараметрыДляЗаполнения);
	НовыйНомерГТД.ОбменДанными.Загрузка = Истина;
	Попытка 
		НовыйНомерГТД.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат НовыйНомерГТД.Ссылка;
	
КонецФункции

&НаСервере
Процедура СоздатьНомераГТД()
	
	ТаблицаСоздаваемыхНомеровГТД = Объект.Товары.Выгрузить(Новый Структура("СоздатьНомерГТД, ВедетсяУчетПоГТД", Истина, Истина),"ЗагружаемыйНомерГТД, СтранаПроисхождения");
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаГТД.ЗагружаемыйНомерГТД КАК ЗагружаемыйНомерГТД,
	|	ТаблицаГТД.СтранаПроисхождения КАК СтранаПроисхождения
	|ПОМЕСТИТЬ ТаблицаНомеровГТД
	|ИЗ
	|	&ТаблицаГТД КАК ТаблицаГТД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеСправочника.Ссылка КАК НомерГТД,
	|	ТаблицаНомеровГТД.ЗагружаемыйНомерГТД КАК ЗагружаемыйНомерГТД,
	|	ТаблицаНомеровГТД.СтранаПроисхождения КАК СтранаПроисхождения
	|ИЗ
	|	ТаблицаНомеровГТД КАК ТаблицаНомеровГТД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НомераГТД КАК ДанныеСправочника
	|		ПО ТаблицаНомеровГТД.ЗагружаемыйНомерГТД = ДанныеСправочника.Код
	|			И ТаблицаНомеровГТД.СтранаПроисхождения = ДанныеСправочника.СтранаПроисхождения
	|			И НЕ ДанныеСправочника.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеСправочника.Ссылка,
	|	ТаблицаНомеровГТД.ЗагружаемыйНомерГТД,
	|	ТаблицаНомеровГТД.СтранаПроисхождения");
	Запрос.УстановитьПараметр("ТаблицаГТД", ТаблицаСоздаваемыхНомеровГТД);
	ВыборкаГТД = Запрос.Выполнить().Выгрузить();

	Для Каждого СоздаваемаяСтрока Из ВыборкаГТД Цикл
		Если ЗначениеЗаполнено(СоздаваемаяСтрока.НомерГТД) Тогда
			ЗаполняемыйНомерГТД = СоздаваемаяСтрока.НомерГТД;
		Иначе 
			ЗаполняемыйНомерГТД = СоздатьНомерГТД(СоздаваемаяСтрока.ЗагружаемыйНомерГТД, СоздаваемаяСтрока.СтранаПроисхождения);
		КонецЕсли; 
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ЗагружаемыйНомерГТД", СоздаваемаяСтрока.ЗагружаемыйНомерГТД);
		СтруктураПоиска.Вставить("СтранаПроисхождения", СоздаваемаяСтрока.СтранаПроисхождения);
		СтруктураПоиска.Вставить("СоздатьНомерГТД", Истина);
		СтруктураПоиска.Вставить("ВедетсяУчетПоГТД", Истина);
		НайденныеСтроки = Объект.Товары.НайтиСтроки(СтруктураПоиска);
			
		Для каждого ЗаполняемаяСтрока Из НайденныеСтроки Цикл
			ЗаполняемаяСтрока.НомерГТД = ЗаполняемыйНомерГТД;
		КонецЦикла; 
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКолонок()
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ТоварыЗагружаемаяХарактеристика",
		"Видимость",
		ИспользоватьХарактеристикиНоменклатуры);
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ТоварыГруппаСтранаПроисхождения");
	МассивЭлементов.Добавить("ТоварыГруппаНомерГТД");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы,
		МассивЭлементов,
		"Видимость",
		ЗагружатьГТД,
		Истина);
	
	МассивЭлементов.Очистить();
	МассивЭлементов.Добавить("ТоварыПроцентРучнойСкидки");
	МассивЭлементов.Добавить("ТоварыСуммаРучнойСкидки");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы,
		МассивЭлементов,
		"Видимость",
		ЗагружатьСкидки И ИспользоватьРучныеСкидкиВЗакупках,
		Истина);
	
	МассивЭлементов.Очистить();
	МассивЭлементов.Добавить("ТоварыУпаковочныйЛист");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы,
		МассивЭлементов,
		"Видимость",
		Объект.ЗагружатьУпаковочныеЛисты,
		Истина);
	
	МассивЭлементов.Очистить();
	МассивЭлементов.Добавить("ТоварыАртикулПартнера");
	МассивЭлементов.Добавить("ТоварыНоменклатураПартнера");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы,
		МассивЭлементов,
		"Видимость",
		СопоставлятьПоНоменклатуреПоставщиков);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	ЗаполненыНоменклатураКодАртикулШтрихкод = ЗначениеЗаполнено(ТабличныйДокумент.Область("R2C1").Текст)
			Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R2C2").Текст)
			Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R2C3").Текст)
			Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R2C4").Текст);
			
	Если Не ЗаполненыНоменклатураКодАртикулШтрихкод Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Необходимо скопировать колонки в таблицу из внешнего файла.'"));
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	Состояние(НСтр("ru = 'Осуществляется сопоставление введенных данных с данными информационной базы. Пожалуйста подождите...'"),,,БиблиотекаКартинок.Информация32);
	СопоставитьДанныеТабличногоДокументаСДаннымиИБ();

	Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг2;
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг1;
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиТовары(Команда)
	
	ОчиститьСообщения();
	СоздатьНомераГТД = Ложь;
	Если Объект.Товары.НайтиСтроки(Новый Структура("СоздатьНомерГТД, ВедетсяУчетПоГТД", Истина, Истина)).Количество()>0 Тогда
		СписокКнопок = Новый СписокЗначений();
		СписокКнопок.Добавить("Создать", НСтр("ru = 'Создать'"));
		СписокКнопок.Добавить("БезСоздания", НСтр("ru = 'Не создавать'"));
		СписокКнопок.Добавить("Отмена", НСтр("ru = 'Отмена'"));
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПеренестиТоварыЗавершение", ЭтотОбъект), 
			НСтр("ru = 'Некоторые загружаемые номера ГТД не найдены в информационной базе. Создать номера ГТД?'"), 
			СписокКнопок);
		Возврат;
	КонецЕсли;
	
	ПеренестиТоварыФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиТоварыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = "Отмена" Тогда
		Возврат;
	ИначеЕсли РезультатВопроса = "Создать" Тогда
		СоздатьНомераГТД = Истина;
	КонецЕсли;
	ПеренестиТоварыФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиТоварыФрагмент()
	
	Если ПроверитьЗаполнение() Тогда
		Если СоздатьНомераГТД Тогда
			СоздатьНомераГТД();
		КонецЕсли;
		АдресТоваровВХранилище = ПоместитьТоварыВХранилище();
		Закрыть(АдресТоваровВХранилище);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = Объект.Товары.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена();
	
	КоличествоВставленных = Объект.Товары.Количество()-КоличествоТоваровДоВставки;
	РаботаСТабличнымиЧастямиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	Если РаботаСТабличнымиЧастямиКлиент.ВыбранаСтрокаДляВыполненияКоманды(Элементы.Товары) Тогда
		СкопироватьСтрокиНаСервере();
		РаботаСТабличнымиЧастямиКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.Товары.ВыделенныеСтроки.Количество());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// Отметка незаполненной характеристики, если форма открыта с параметром ПроверятьЗаполнениеХарактеристик = Истина.
	Если Параметры.ПроверятьЗаполнениеХарактеристик Тогда

		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыХарактеристика.Имя);

		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ХарактеристикиИспользуются");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	КонецЕсли;

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСуммаСНДС.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЦенаВключаетНДС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСтавкаНДС.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСуммаНДС.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСуммаСНДС.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НалогообложениеНДС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗагружатьСуммы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	// Скрытие количества упаковок

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоУпаковок.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыУпаковка.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатураЕдиницаИзмерения.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗагружатьКоличество");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	// Скрытие запасов

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыМинимальныйОстаток.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыМаксимальныйОстаток.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗагружатьЗапасы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНомерГТД.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНомерГТДСтранаПроисхождения.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Товар);
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<для товаров>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНомерГТД.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВедетсяУчетПоГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<ГТД не используются>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНомерГТДСтранаПроисхождения.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.НомерГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыХарактеристика.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗагружаемаяХарактеристика.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьХарактеристикиНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНомерГТД.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНомерГТДСтранаПроисхождения.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗагружаемыйНомерГТД.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗагружатьГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЦена.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗагружатьЦены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗагружаемыйНомерГТД.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗагружаемыйНомерГТДИнфо.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗагружаемаяСтранаПроисхождения.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСтранаПроисхождения.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.НомерГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВедетсяУчетПоГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗагружаемыйНомерГТД.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗагружаемыйНомерГТДИнфо.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.НомерГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЗагружаемыйНомерГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.FireBrick);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗагружаемыйНомерГТДИнфо.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.НомерГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЗагружаемыйНомерГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВедетсяУчетПоГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.FireBrick);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<будет создан>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗагружаемыйНомерГТДИнфо.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.NotGroup;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ГруппаОтбора3 = ГруппаОтбора2.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора3.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора3.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = ГруппаОтбора3.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВедетсяУчетПоГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.НомерГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЗагружаемыйНомерГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗагружаемаяСтранаПроисхождения.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.НомерГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЗагружаемаяСтранаПроисхождения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.СтранаПроисхождения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВедетсяУчетПоГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.FireBrick);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНомерГТДСтранаПроисхождения.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.НомерГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.СтранаПроисхождения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.СоздатьНомерГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВедетсяУчетПоГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗагружаемаяСтранаПроисхождения.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.СтранаПроисхождения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНомерГТДСтранаПроисхождения.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.НомерГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЗагружаемаяСтранаПроисхождения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.СтранаПроисхождения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВедетсяУчетПоГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не найдена>'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСумма.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗагружатьСуммы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатура.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.УпаковочныйЛист");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<для товаров>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыХарактеристика.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.УпаковочныйЛист");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<характеристики не используются>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыУпаковка.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.УпаковочныйЛист");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'место'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоУпаковок.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.УпаковочныйЛист");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыУпаковочныйЛист.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется для товаров>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУпаковочныеЛисты()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВТКоды.Код,
	|	ВТКоды.КодСтроки
	|ПОМЕСТИТЬ ВТКоды
	|ИЗ
	|	&КодыУпаковочныхЛистовНаПроверку КАК ВТКоды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УпаковочныйЛист.Ссылка КАК УпаковочныйЛист,
	|	УпаковочныйЛист.Код КАК Код,
	|	УпаковочныйЛист.Дата КАК Дата,
	|	ВТКоды.КодСтроки
	|ПОМЕСТИТЬ ВТПодобранныеУпаковочныеЛисты
	|ИЗ
	|	Документ.УпаковочныйЛист КАК УпаковочныйЛист
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКоды КАК ВТКоды
	|		ПО УпаковочныйЛист.Код = ВТКоды.Код
	|		И УпаковочныйЛист.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПодобранныеУпаковочныеЛисты.УпаковочныйЛист,
	|	ВТПодобранныеУпаковочныеЛисты.Код,
	|	ВТПодобранныеУпаковочныеЛисты.Дата,
	|	ВТПодобранныеУпаковочныеЛисты.КодСтроки
	|ИЗ
	|	ВТПодобранныеУпаковочныеЛисты КАК ВТПодобранныеУпаковочныеЛисты
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТПодобранныеУпаковочныеЛисты.УпаковочныйЛист.Код,
	|	ВТПодобранныеУпаковочныеЛисты.УпаковочныйЛист.Дата УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПодобранныеУпаковочныеЛисты.КодСтроки,
	|	МАКСИМУМ(ВТПодобранныеУпаковочныеЛисты.УпаковочныйЛист) КАК УпаковочныйЛист
	|ИЗ
	|	ВТПодобранныеУпаковочныеЛисты КАК ВТПодобранныеУпаковочныеЛисты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТПодобранныеУпаковочныеЛисты.КодСтроки
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ВТПодобранныеУпаковочныеЛисты.УпаковочныйЛист) = 1";
	Запрос.УстановитьПараметр("КодыУпаковочныхЛистовНаПроверку", КодыУпаковочныхЛистовНаПроверку.Выгрузить());
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ПодобранныеУпаковочныеЛисты.Загрузить(РезультатЗапроса[2].Выгрузить());
	Для Каждого Стр Из РезультатЗапроса[3].Выгрузить() Цикл
		Объект.Товары[Стр.КодСтроки - 2].УпаковочныйЛист = Стр.УпаковочныйЛист;
		Объект.Товары[Стр.КодСтроки - 2].Количество = 1;
		Объект.Товары[Стр.КодСтроки - 2].КоличествоУпаковок = 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПрисвоитьЧисловоеЗначениеПриЗаполненииТЧ(Приемник, СтрокаИсточникЧисловогоЗначения, АбсолютныйНомерСтроки, НазваниеКолонки, ВысотаШапки = 0)
	Успех = Истина;
	
	ЗначениеДляПриведения = СтрЗаменить(СтрокаИсточникЧисловогоЗначения, " ", "");
	Если ЗначениеЗаполнено(ЗначениеДляПриведения) Тогда
		мТипов = Новый Массив;
		мТипов.Добавить(Тип("Число"));
		мТипов.Добавить(Тип("ОписаниеТипов"));
		ОписаниеТиповЧ = Новый ОписаниеТипов(мТипов);
		ПриведенноеЗначение = ОписаниеТиповЧ.ПривестиЗначение(ЗначениеДляПриведения);
		Если Не ПриведенноеЗначение = Неопределено Тогда
			Приемник = ПриведенноеЗначение;			
		Иначе
			Успех = Ложь;
			ТекстОшибки = НСтр("ru='В строке %НомерСтроки%, колонке ""%Колонка%"" введено значение ""%Значение%"", не являющееся числом.'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", АбсолютныйНомерСтроки-ВысотаШапки);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Колонка%", НазваниеКолонки);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Значение%", СтрокаИсточникЧисловогоЗначения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;	
	Иначе
		Приемник = 0;
	КонецЕсли;
	
	Возврат Успех;
КонецФункции

// Параметры:
// ВыбранноеЗначение - СправочникСсылка.НоменклатураКонтрагентов
// ДополнительныеПараметры - Структура
// 
&НаКлиенте
Процедура ОбработатьРезультатВыбораНоменклатурыПартнера(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.ТекущаяСтрока.НоменклатураПартнера = ВыбранноеЗначение;
	
	ТоварыНоменклатураПартнераПриИзменении(ДополнительныеПараметры.ЭлементФормы);
	
КонецПроцедуры

#КонецОбласти
