
&НаКлиенте
Перем ФормаДлительнойОперации;

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИспользоватьДоговорыМеждуОрганизациями = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыМеждуОрганизациями");
	
	УстановитьУсловноеОформление();		
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	
	ЗначенияПоКлючу = Обработки.ФормированиеПередачТоваровМеждуОрганизациямиИВыкупов.ЗаголовокИФормируемыеДокументыПоКлючуНазначенияИспользования(
		Параметры.КлючНазначенияИспользования);
		
	Заголовок 			 = ЗначенияПоКлючу.Заголовок;
	ФормируемыеДокументы = ЗначенияПоКлючу.ФормируемыеДокументы;
		
	Если Не ЗначениеЗаполнено(ФормируемыеДокументы) Тогда
		ТекстИсключения = НСтр("ru = 'Использовать обработку с такими настройками функциональных опций не требуется.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	ВидимостьФормируемыеДокументы = ПолучитьФункциональнуюОпцию("ИспользоватьОтветственноеХранениеВПроцессеЗакупки");
	
	Элементы.ФормируемыеДокументы.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьПередачиТоваровМеждуОрганизациями")
		И ВидимостьФормируемыеДокументы;
	
	КомпоновкаДанныхСервер.ИнициализироватьКомпоновщикНастроек(ОтборНоменклатуры, 
		ИмяМакетаОтбора(),
		"ПроблемныеОрганизации"); 
	
	Элементы.УстановитьЦены.Видимость = ПравоДоступа("Добавление", Метаданные.Документы.УстановкаЦенНоменклатуры);
	
	ВариантВыбораОтправителей = "ПоНастройкамПередачи";
	
	ЗначенияВыбораТипаЗапасов = Новый Массив;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПередачиТоваровМеждуОрганизациями") Тогда
		ЗначенияВыбораТипаЗапасов.Добавить(Перечисления.ТипыЗапасов.Товар);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриЗакупках")
		И ПолучитьФункциональнуюОпцию("ИспользоватьПередачиТоваровМеждуОрганизациями") Тогда
		ЗначенияВыбораТипаЗапасов.Добавить(Перечисления.ТипыЗапасов.КомиссионныйТовар);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОтветственноеХранениеВПроцессеЗакупки") Тогда
		ЗначенияВыбораТипаЗапасов.Добавить(Перечисления.ТипыЗапасов.ТоварНаХраненииСПравомПродажи);
	КонецЕсли;
	
	
	Элементы.ВыбранныеОтправителиТипЗапасов.СписокВыбора.ЗагрузитьЗначения(ЗначенияВыбораТипаЗапасов);
	Элементы.ВыбранныеОтправителиТипЗапасов.Видимость = Элементы.ВыбранныеОтправителиТипЗапасов.СписокВыбора.Количество() > 1;
	
	МассивПараметров = Новый Массив;
	
	ПараметрВыбораДоговора = Новый ПараметрВыбора("Отбор.ТипДоговора", ПредопределенноеЗначение("Перечисление.ТипыДоговоровМеждуОрганизациями.КупляПродажа"));
	МассивПараметров.Добавить(ПараметрВыбораДоговора);
	
	ПараметрВыбораДоговора = Новый ПараметрВыбора("Отбор.ПометкаУдаления", Ложь);
	МассивПараметров.Добавить(ПараметрВыбораДоговора);
	
	ПараметрВыбораДоговора = Новый ПараметрВыбора("Отбор.Статус", ПредопределенноеЗначение("Перечисление.СтатусыДоговоровКонтрагентов.Действует"));
	МассивПараметров.Добавить(ПараметрВыбораДоговора);
	
	Элементы.ВыбранныеОтправителиДоговор.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров); 
	
	ПериодичностьФормированияДокументов = "ПоМесяцам";
	
	Если ЗначениеЗаполнено(Параметры.ДатаНачалаАнализа) Тогда
		ПериодАнализа.ДатаНачала = Параметры.ДатаНачалаАнализа;
	Иначе
		ПериодАнализа.ДатаНачала = НачалоМесяца(ЗапасыСервер.ДатаПервогоРезерва(ДобавитьМесяц(ТекущаяДатаСеанса(),-1)));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ДатаОкончанияАнализа) Тогда
		ПериодАнализа.ДатаОкончания = Параметры.ДатаОкончанияАнализа;
	Иначе
		ПериодАнализа.ДатаОкончания = КонецМесяца(ТекущаяДатаСеанса());
	КонецЕсли;	
	
	Если ПериодАнализа.ДатаНачала > ПериодАнализа.ДатаОкончания Тогда
		ПериодАнализа.ДатаНачала = НачалоМесяца(ПериодАнализа.ДатаОкончания);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.Склад) Тогда
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ОтборНоменклатуры, "Склад", Параметры.Склад);
	КонецЕсли;
	
	Если Параметры.РежимЗапуска = "ИсправлениеОтрицательныхОстатков" Тогда
		ИнициализироватьРежимИсправленияОстатков();
	КонецЕсли;
	
	СформироватьПредставлениеОтбораНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если РежимЗапуска <> "ИсправлениеОтрицательныхОстатков" Тогда
		ЗаполнитьПроблемныеОрганизации();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "Запись_ВыкупПринятыхНаХранениеТоваров"
		Или ИмяСобытия = "Запись_ПередачаТоваровМеждуОрганизациями" Тогда
		ОбновитьСозданныеДокументы();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияОтборНоменклатурыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ДекорацияОтборНоменклатурыОбработкаНавигационнойСсылкиЗавершение", ЭтаФорма);
		
	ПараметрыФормыРедактирования = Новый Структура("АдресНастроек,ИмяАдресМакета",
			ОтборНоменклатурыНастройки(),
			ИмяМакетаОтбора());
	
	ОткрытьФорму("ОбщаяФорма.РедактированиеНастроекКомпоновкиДанных",
		ПараметрыФормыРедактирования,
		ЭтаФорма,
		,
		,
		,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаСервере
Функция ОтборНоменклатурыНастройки()
	Возврат ОтборНоменклатуры.ПолучитьНастройки();	
КонецФункции

&НаКлиенте
Процедура ПериодАнализаПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(ПериодАнализа.ДатаНачала)
		Или Не ЗначениеЗаполнено(ПериодАнализа.ДатаОкончания) Тогда
		
		ТекстСообщения = НСтр("ru = 'Даты начала и окончания периода анализа должны быть заполнены.'");
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ПериодАнализа");
		
		Если Не ЗначениеЗаполнено(ПериодАнализа.ДатаНачала) Тогда
			Если ЗначениеЗаполнено(ПериодАнализа.ДатаОкончания) Тогда
				ПериодАнализа.ДатаНачала = НачалоМесяца(ДобавитьМесяц(ПериодАнализа.ДатаОкончания,-1));
			Иначе
				ПериодАнализа.ДатаНачала = НачалоМесяца(ДобавитьМесяц(ОбщегоНазначенияКлиент.ДатаСеанса(),-1));
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПериодАнализа.ДатаОкончания) Тогда
			ПериодАнализа.ДатаОкончания = КонецМесяца(ПериодАнализа.ДатаНачала);
		КонецЕсли;
		
	ИначеЕсли ПериодАнализа.ДатаНачала > ПериодАнализа.ДатаОкончания
		И ЗначениеЗаполнено(ПериодАнализа.ДатаОкончания) Тогда
		
		ТекстСообщения = НСтр("ru = 'Дата начала периода не может быть больше даты окончания периода.'");
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ПериодАнализа");
		
		ПериодАнализа.ДатаОкончания = КонецМесяца(ПериодАнализа.ДатаНачала);
	КонецЕсли;
	
	ЗаполнитьПроблемныеОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроблемыИнформацияЕстьОтрицательныеОстаткиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	СформироватьОтчетПоОтрицательнымОстаткам(Ложь)
КонецПроцедуры

&НаКлиенте
Процедура РезультатыИнформацияЕстьОтрицательныеОстаткиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	СформироватьОтчетПоОтрицательнымОстаткам(Истина)
КонецПроцедуры

&НаКлиенте
Процедура ВариантВыбораОтправителейПриИзменении(Элемент)
	
	НастроитьСтраницуНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьФормированияДокументовПриИзменении(Элемент)
	
	ЗаполнитьПроблемныеОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура ФормируемыеДокументыПриИзменении(Элемент)
	
	ФоновоеЗадание = ФормируемыеДокументыПриИзмененииСервер();
	Если ФоновоеЗадание <> Неопределено Тогда
		ЗаполнитьОтправителей(,ФоновоеЗадание);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправителиПоКомиссииРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормыНастроек = Новый Структура("ОрганизацияПродавец", Организация);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзменениеНастроекПередачи", ЭтотОбъект);
	
	ОткрытьФорму("РегистрСведений.НастройкаПередачиТоваровМеждуОрганизациями.ФормаСписка",
		ПараметрыФормыНастроек,
		ЭтотОбъект,
		,
		,
		,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеНастроекПередачи(Результат, ДополнительныеПарамент) Экспорт
	
	ЗаполнитьКомитентов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПроблемныеОрганизации(Команда)
	ЗаполнитьПроблемныеОрганизации();	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСозданныеДокументы

&НаКлиенте
Процедура СозданныеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Ссылка = СозданныеДокументы.НайтиПоИдентификатору(ВыбраннаяСтрока).Ссылка;
	
	ПоказатьЗначение(,Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыВыбранныеОтправители

&НаКлиенте
Процедура ВыбранныеОтправителиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока
		И Не Копирование Тогда
		Элементы.ВыбранныеОтправители.ТекущиеДанные.Отправитель = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
		Элементы.ВыбранныеОтправители.ТекущиеДанные.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию");
		Элементы.ВыбранныеОтправители.ТекущиеДанные.ВидЦен  = ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка");
		Элементы.ВыбранныеОтправители.ТекущиеДанные.Договор = ПредопределенноеЗначение("Справочник.ДоговорыМеждуОрганизациями.ПустаяСсылка");
		
		Если Элементы.ВыбранныеОтправителиТипЗапасов.СписокВыбора.Количество() = 1 Тогда
			Элементы.ВыбранныеОтправители.ТекущиеДанные.ТипЗапасов = Элементы.ВыбранныеОтправителиТипЗапасов.СписокВыбора[0].Значение;
		КонецЕсли;                                        
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеОтправителиОтправительПриИзменении(Элемент)
	Элементы.ВыбранныеОтправители.ТекущиеДанные.Договор = ПредопределенноеЗначение("Справочник.ДоговорыМеждуОрганизациями.ПустаяСсылка");
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеОтправителиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Не ОформлятьПередачи(ФормируемыеДокументы) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Копирование
		И ТипЗнч(Элементы.ВыбранныеОтправители.ТекущиеДанные.Отправитель) = Тип("СправочникСсылка.Партнеры") Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыОтправителиПоКомиссии

&НаКлиенте
Процедура ОтправителиПоКомиссииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Создать(Команда)
	
	ОчиститьСообщения();
	
	Если Не ПроверитьОтправителей() Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьДокументыПередачи("Проверить", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьФормированиеДокументов(Команда)
	
	Если ФормированиеДокументовПрервано Тогда
		СоздатьДокументыПередачи("НеПроверять", Ложь);
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжитьФормированиеДокументовЗавершение", ЭтотОбъект);
		ОткрытьФорму("Обработка.ФормированиеПередачТоваровМеждуОрганизациямиИВыкупов.Форма.ВыборВариантаПродолженияФормирования",
			,
			ЭтотОбъект,
			,
			,
			,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьФормированиеДокументовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		СоздатьДокументыПередачи(Результат, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоНастройкамПередачи(Команда)
	
	ЗаполнитьОтправителей("ВыбранныеОтправители");
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьСНовымиОтборами(Команда)
	
	СозданныеДокументы.Очистить();
	
	Элементы.Основная.ТекущаяСтраница = Элементы.Проблемы;
	Элементы.ПерейтиКНастройкамФормирования.КнопкаПоУмолчанию = Истина;
	
	ЗаполнитьПроблемныеОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦены(Команда)
	
	НеустановленныеЦеныАдрес = ПоместитьВоВременноеХранилищеНеУстановленныеЦены();
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Дата", НачалоДня(ПериодАнализа.ДатаНачала));
	ЗначенияЗаполнения.Вставить("ТаблицаНоменклатуры", НеустановленныеЦеныАдрес);
	
	ПараметрыФормыУстановкиЦен = Новый Структура;
	ПараметрыФормыУстановкиЦен.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьЦеныЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.УстановкаЦенНоменклатуры.ФормаОбъекта",
		ПараметрыФормыУстановкиЦен,
		ЭтотОбъект,
		,
		,
		,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);		
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКНастройкамФормирования(Команда)
	
	Если ПроблемныеОрганизации.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Нет организаций, по которым требуется оформлять документы с указанными настройками анализа.'");
		ПоказатьПредупреждение(, ТекстСообщения);
	ИначеЕсли Элементы.ПроблемныеОрганизации.ТекущиеДанные = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Выберите организацию, по которой нужно оформлять документы.'");
		ПоказатьПредупреждение(, ТекстСообщения);
	Иначе
		Организация = Элементы.ПроблемныеОрганизации.ТекущиеДанные.Организация;
		ТипЗапасов  = Элементы.ПроблемныеОрганизации.ТекущиеДанные.ТипЗапасов;
		
		ФоновоеЗадание = ЗаполнитьДанныеИНастроитьСтраницуНастройки();
		
		Если ФоновоеЗадание <> Неопределено Тогда
			Если ТипЗапасов = ПредопределенноеЗначение("Перечисление.ТипыЗапасов.Товар") Тогда
				ЗаполнитьОтправителей(,ФоновоеЗадание);
			Иначе
				ЗаполнитьКомитентов(ФоновоеЗадание);
			КонецЕсли;
			
		КонецЕсли;
		
		Элементы.Основная.ТекущаяСтраница  = Элементы.Настройки;
		Элементы.Создать.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьсяКНастройкамФормирования(Команда)
	Элементы.Основная.ТекущаяСтраница  = Элементы.Настройки;
	Элементы.Создать.КнопкаПоУмолчанию = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КВыборуОрганизацииПолучателя(Команда)
	
	СохранитьВыбранныхОтправителей();
	
	Элементы.Основная.ТекущаяСтраница = Элементы.Проблемы;
	Элементы.ПерейтиКНастройкамФормирования.КнопкаПоУмолчанию = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоклажедателя(Команда)
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("Организация", Организация);
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("АдресТаблицы", ПоместитьПоклажедателейСТоварамиВоВременноеХранилище());
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьПоклажедателяЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.ФормированиеПередачТоваровМеждуОрганизациямиИВыкупов.Форма.ВыборПоклажедателя",
		ПараметрыФормыВыбора,
		ЭтотОбъект,
		,
		,
		,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоклажедателяЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат)
		И ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(Объект.ВыбранныеОтправители.Добавить(), Результат);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдалениеДокументы(Команда)
	ТекстВопроса = НСтр("ru = 'При возврате к настройкам созданные документы будут помечены на удаление. Продолжить?'");
	ОписаниеОповещения = Новый ОписаниеОповещения("ПометитьНаУдалениеДокументыЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена,, КодВозвратаДиалога.Отмена);
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдалениеДокументыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		ПометитьНаУдалениеСозданныеДокументы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКомитентовКоманда(Команда)		
	ЗаполнитьКомитентов();	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформлениеНедоступно = Не ПолучитьФункциональнуюОпцию("ИспользоватьОтветственноеХранениеВПроцессеЗакупки");
	
	Если УсловноеОформлениеНедоступно Тогда
		Возврат;
	КонецЕсли;
	
	ХозяйственныеОперацииВыкупа = Новый СписокЗначений;
	ХозяйственныеОперацииВыкупа.ЗагрузитьЗначения(Обработки.ФормированиеПередачТоваровМеждуОрганизациямиИВыкупов.ХозяйственныеОперацииВыкупа());
	
	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыбранныеОтправителиОтправитель.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыбранныеОтправителиВидЦен.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыбранныеОтправителиТипЗапасов.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыбранныеОтправителиДоговор.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыбранныеОтправители.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = ХозяйственныеОперацииВыкупа;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыбранныеОтправителиДоговор.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыбранныеОтправители.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = ХозяйственныеОперацииВыкупа;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Не ИспользоватьДоговорыМеждуОрганизациями);
	Если Не ИспользоватьДоговорыМеждуОрганизациями Тогда
		Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<для выкупов>'"));
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	КонецЕсли;	
	
	
КонецПроцедуры

#Область СоздатьДокументыПередачи

&НаКлиенте
Процедура СоздатьДокументыПередачи(ДействиеСЦенамиПередачи, СохранятьОтправителей)
	
	ФормированиеДокументовПрервано = Ложь;
	ФоновоеЗадание = СоздатьДокументыПередачиСервер(ДействиеСЦенамиПередачи, СохранятьОтправителей);
	НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	НастройкиОжидания.ВыводитьОкноОжидания = Истина;
	Обработчик = Новый ОписаниеОповещения("ПослеСозданияДокументовПередачи", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, Обработчик, НастройкиОжидания);
	
КонецПроцедуры

&НаСервере
Функция СоздатьДокументыПередачиСервер(ДействиеСЦенамиПередачи, СохранятьОтправителей)
	
	ПараметрыСоздания = Новый Структура;
	ПараметрыСоздания.Вставить("Организация", Организация);
	ПараметрыСоздания.Вставить("Период", ПериодАнализа);
	ПараметрыСоздания.Вставить("ТипЗапасов", ТипЗапасов);
	
	Если ТипЗапасов = Перечисления.ТипыЗапасов.Товар Тогда
		
		ПараметрыСоздания.Вставить("ВыбранныеОтправители", Объект.ВыбранныеОтправители.Выгрузить());
		ПараметрыСоздания.Вставить("ВариантВыбораОтправителей", ВариантВыбораОтправителей);
		ПараметрыСоздания.Вставить("ОформлятьПередачи", ОформлятьПередачи(ФормируемыеДокументы));
		ПараметрыСоздания.Вставить("ОформлятьВыкупы", ОформлятьВыкупы(ФормируемыеДокументы));
		
	Иначе	
		
		ПараметрыСоздания.Вставить("ВыбранныеОтправители", ОтправителиПоКомиссии.Выгрузить());
		ПараметрыСоздания.Вставить("ВариантВыбораОтправителей", "ПоУказаннымПриоритетам");
		ПараметрыСоздания.Вставить("ОформлятьПередачи", Истина);
		ПараметрыСоздания.Вставить("ОформлятьВыкупы", Ложь);
		
	КонецЕсли;
	
	
	ПараметрыСоздания.Вставить("СозданныеДокументы", СозданныеДокументы.Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	ПараметрыСоздания.Вставить("ПериодичностьФормированияДокументов", ПериодичностьФормированияДокументов);
	
	НастройкиКомпоновкиДляФоновыхЗаданий = НастройкиКомпоновкиПоИмени("НоменклатураКПередаче", Истина);
	
	ПараметрыСоздания.Вставить("НастройкиКомпоновки", НастройкиКомпоновкиДляФоновыхЗаданий);
	ПараметрыСоздания.Вставить("ИмяМакета", ИмяМакетаОтбора());
	ПараметрыСоздания.Вставить("ДействиеСЦенамиПередачи", ДействиеСЦенамиПередачи);
	
	Если СохранятьОтправителей Тогда
		СохранитьВыбранныхОтправителей();
	КонецЕсли;
	                       
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(ЭтотОбъект.УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.НаименованиеФоновогоЗадания = НСтр("ru = 'Формирование документов передачи товаров между организациями и выкупов'");
	ПараметрыВыполненияВФоне.ЗапуститьВФоне = Истина;
	
	ФоновоеЗадание = ДлительныеОперации.ВыполнитьВФоне("Обработки.ФормированиеПередачТоваровМеждуОрганизациямиИВыкупов.СоздатьДокументыПередачи",
		ПараметрыСоздания, ПараметрыВыполненияВФоне);
	
	Возврат ФоновоеЗадание;
	
КонецФункции

&НаКлиенте
Процедура ПослеСозданияДокументовПередачи(ФоновоеЗадание, ДополнительныеПараметры) Экспорт
	
	Если ФоновоеЗадание <> Неопределено 
		И ФоновоеЗадание.Статус = "Выполнено" Тогда
		СозданныеДокументы.Очистить();
		НеустановленныеЦены.Очистить();
		ЗагрузитьРезультатыВыполненияФоновыхЗаданий(ФоновоеЗадание.АдресРезультата);		
		
		Если НеустановленныеЦены.Количество() > 0 Тогда
			Элементы.Основная.ТекущаяСтраница = Элементы.УстановкаЦен;
			Элементы.УстановитьЦены.КнопкаПоУмолчанию = Истина;
		ИначеЕсли СозданныеДокументы.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось создать документы с указанными настройками формирования.'");
			ПоказатьПредупреждение(,ТекстСообщения);
			
			Элементы.Основная.ТекущаяСтраница = Элементы.Настройки;
			Элементы.Создать.КнопкаПоУмолчанию = Истина;
			
		Иначе
			Элементы.Основная.ТекущаяСтраница = Элементы.Результаты;
			Элементы.ПродолжитьСНовымиОтборами.КнопкаПоУмолчанию = РежимЗапуска <> "ИсправлениеОтрицательныхОстатков";
			Элементы.Готово.КнопкаПоУмолчанию = РежимЗапуска = "ИсправлениеОтрицательныхОстатков";
			
			ФормированиеДокументовПрервано = Не ВсеДокументыПроведены;
			УстановитьВидимостьИнформацииНаСтраницеСозданныхДокументов(Истина);
			
		КонецЕсли;
		
		Если ОформлятьПередачи(ФормируемыеДокументы) Тогда
			Оповестить("Запись_ПередачаТоваровМеждуОрганизациями");
		КонецЕсли;
		
		Если ОформлятьВыкупы(ФормируемыеДокументы) Тогда
			Оповестить("Запись_ВыкупПринятыхНаХранениеТоваров");
		КонецЕсли;
		
	Иначе
		Если ФоновоеЗадание <> Неопределено Тогда
			ОписаниеОшибки = НСтр("ru = 'Не удалось закончить формирование документов по причине: %Причина%'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Причина%",  ФоновоеЗадание.ПодробноеПредставлениеОшибки);
			ПоказатьПредупреждение(, ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнитьПроблемныеОрганизации

&НаКлиенте
Процедура ЗаполнитьПроблемныеОрганизации()
	Элементы.ПроблемыИнформацияФормируется.Видимость = Истина;
	Элементы.ПроблемыИнформацияЕстьОтрицательныеОстатки.Видимость = Ложь;
	Элементы.ПроблемыИнформацияНетОтрицательныхОстатков.Видимость = Ложь;
	
	ПроблемныеОрганизации.Очистить();
	Элементы.ПерейтиКНастройкамФормирования.Доступность = Ложь;
	Элементы.ПроблемныеОрганизации.Доступность          = Ложь;
		
	ФоновоеЗадание = ЗаполнитьПроблемныеОрганизацииСервер();
	НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
	Обработчик = Новый ОписаниеОповещения("ПослеЗаполненияПроблемныхОрганизации", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, Обработчик, НастройкиОжидания);
КонецПроцедуры

&НаСервере
Функция ЗаполнитьПроблемныеОрганизацииСервер()
	
	ПараметрыСоздания = Новый Структура;                    
	ПараметрыСоздания.Вставить("Период", ПериодАнализа);
	ПараметрыСоздания.Вставить("ПериодичностьФормированияДокументов", ПериодичностьФормированияДокументов);
	
	НастройкиКомпоновкиДляФоновыхЗаданий = НастройкиКомпоновкиПоИмени("ПроблемныеОрганизации", Ложь);
	
	ПараметрыСоздания.Вставить("НастройкиКомпоновки", НастройкиКомпоновкиДляФоновыхЗаданий);
	ПараметрыСоздания.Вставить("ИмяМакета", ИмяМакетаОтбора());
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(ЭтотОбъект.УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.НаименованиеФоновогоЗадания = НСтр("ru = 'Заполнение списка проблемных организаций'");
	
	ФоновоеЗадание = ДлительныеОперации.ВыполнитьВФоне("Обработки.ФормированиеПередачТоваровМеждуОрганизациямиИВыкупов.ЗаполнитьСписокПроблемныхОрганизаций",
		ПараметрыСоздания, ПараметрыВыполненияВФоне);
	
	Возврат ФоновоеЗадание;
	
КонецФункции

&НаКлиенте
Процедура ПослеЗаполненияПроблемныхОрганизации(ФоновоеЗадание, ДополнительныеПараметры) Экспорт
	
	Если ФоновоеЗадание <> Неопределено 
		И ФоновоеЗадание.Статус = "Выполнено" Тогда
		ЗагрузитьРезультатыВыполненияФоновыхЗаданий(ФоновоеЗадание.АдресРезультата);		
		ЕстьПроблема = ПроблемныеОрганизации.Количество() > 0;
		
		Элементы.ПроблемыИнформацияФормируется.Видимость              = Ложь;
		Элементы.ПроблемыИнформацияЕстьОтрицательныеОстатки.Видимость = ЕстьПроблема;
		Элементы.ПроблемыИнформацияНетОтрицательныхОстатков.Видимость = Не ЕстьПроблема;
		
		Элементы.Основная.ТекущаяСтраница = Элементы.Проблемы;
		Элементы.ПерейтиКНастройкамФормирования.КнопкаПоУмолчанию = Истина;
		
		Элементы.ПерейтиКНастройкамФормирования.Доступность = ЕстьПроблема;
		Элементы.ПроблемныеОрганизации.Доступность        = ЕстьПроблема;
	Иначе
		Элементы.ПроблемыИнформацияФормируется.Видимость              = Истина;
		Элементы.ПроблемыИнформацияЕстьОтрицательныеОстатки.Видимость = Ложь;
		Элементы.ПроблемыИнформацияНетОтрицательныхОстатков.Видимость = Ложь;
		Элементы.ПерейтиКНастройкамФормирования.Доступность           = Ложь;
		Элементы.ПроблемныеОрганизации.Доступность                    = Ложь;
		Если ФоновоеЗадание <> Неопределено Тогда
			ОписаниеОшибки = НСтр("ru = 'Не удалось закончить заполнения списка организаций с отрицательными остатками по причине: %Причина%'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Причина%",  ФоновоеЗадание.ПодробноеПредставлениеОшибки);
			ПоказатьПредупреждение(, ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПометитьНаУдалениеСозданныеДокументы

&НаКлиенте
Процедура ПометитьНаУдалениеСозданныеДокументы()		
	ФоновоеЗадание = ПометитьНаУдалениеСозданныеДокументыСервер();
	НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	НастройкиОжидания.ВыводитьОкноОжидания = Истина;
	Обработчик = Новый ОписаниеОповещения("ПослеПометкиНаУдалениеСозданныхДокументов", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, Обработчик, НастройкиОжидания);
КонецПроцедуры

&НаСервере
Функция ПометитьНаУдалениеСозданныеДокументыСервер()
	
	ПараметрыСоздания = Новый Структура;                    
	ПараметрыСоздания.Вставить("ОформлятьПередачи", ОформлятьПередачи(ФормируемыеДокументы));
	ПараметрыСоздания.Вставить("ОформлятьВыкупы", ОформлятьВыкупы(ФормируемыеДокументы));
	ПараметрыСоздания.Вставить("СозданныеДокументы", СозданныеДокументы.Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	ПараметрыСоздания.Вставить("Период", ПериодАнализа);
	ПараметрыСоздания.Вставить("ПериодичностьФормированияДокументов", ПериодичностьФормированияДокументов);
	
	НастройкиКомпоновкиДляФоновыхЗаданий = НастройкиКомпоновкиПоИмени("ПроблемныеОрганизации", Ложь);
	
	ПараметрыСоздания.Вставить("НастройкиКомпоновки", НастройкиКомпоновкиДляФоновыхЗаданий);
	ПараметрыСоздания.Вставить("ИмяМакета", ИмяМакетаОтбора());
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(ЭтотОбъект.УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.НаименованиеФоновогоЗадания = НСтр("ru = 'Пометка на удаление созданных документов'");
	ПараметрыВыполненияВФоне.ЗапуститьВФоне = Истина;
	
	ФоновоеЗадание = ДлительныеОперации.ВыполнитьВФоне("Обработки.ФормированиеПередачТоваровМеждуОрганизациямиИВыкупов.ПометитьНаУдалениеСозданныеДокументы",
		ПараметрыСоздания, ПараметрыВыполненияВФоне);
	
	Возврат ФоновоеЗадание;
	
КонецФункции

&НаКлиенте
Процедура ПослеПометкиНаУдалениеСозданныхДокументов(ФоновоеЗадание, ДополнительныеПараметры) Экспорт
	
	Если ФоновоеЗадание <> Неопределено 
		И ФоновоеЗадание.Статус = "Выполнено" Тогда
		СозданныеДокументы.Очистить();
		ЗагрузитьРезультатыВыполненияФоновыхЗаданий(ФоновоеЗадание.АдресРезультата);		
		
		Если СозданныеДокументы.Количество() > 0 Тогда
			ОписаниеОшибки = НСтр("ru = 'Показанные в таблице документы не удалось пометить на удаление.'");
			ПоказатьПредупреждение(, ОписаниеОшибки);
			Элементы.РезультатыИнформацияЕстьОтрицательныеОстатки.Видимость = Ложь;
			Элементы.РезультатыИнформацияНетОтрицательныхОстатков.Видимость = Ложь;
		Иначе
			Элементы.Основная.ТекущаяСтраница = Элементы.Настройки;
			Элементы.Создать.КнопкаПоУмолчанию = Истина;
		КонецЕсли;
		
		Если ОформлятьПередачи(ФормируемыеДокументы) Тогда
			Оповестить("Запись_ПередачаТоваровМеждуОрганизациями");
		КонецЕсли;
		
		Если ОформлятьВыкупы(ФормируемыеДокументы) Тогда
			Оповестить("Запись_ВыкупПринятыхНаХранениеТоваров");
		КонецЕсли;
		
	Иначе
		Элементы.РезультатыИнформацияЕстьОтрицательныеОстатки.Видимость = Ложь;
		Элементы.РезультатыИнформацияНетОтрицательныхОстатков.Видимость = Ложь;
		Если ФоновоеЗадание <> Неопределено Тогда
			ОписаниеОшибки = НСтр("ru = 'Не удалось закончить заполнения списка организаций с отрицательными остатками по причине: %Причина%'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Причина%",  ФоновоеЗадание.ПодробноеПредставлениеОшибки);
			ПоказатьПредупреждение(, ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновитьСозданныеДокументы

&НаКлиенте
Процедура ОбновитьСозданныеДокументы()		
	УстановитьВидимостьИнформацииНаСтраницеСозданныхДокументов(Ложь);
	
	ФоновоеЗадание = ОбновитьСозданныеДокументыСервер();
	НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
	Обработчик = Новый ОписаниеОповещения("ПослеОбновленияСозданныхДокументов", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, Обработчик, НастройкиОжидания);
КонецПроцедуры

&НаСервере
Функция ОбновитьСозданныеДокументыСервер()
	
	ПараметрыСоздания = Новый Структура;                    
	ПараметрыСоздания.Вставить("ОформлятьПередачи", ОформлятьПередачи(ФормируемыеДокументы));
	ПараметрыСоздания.Вставить("ОформлятьВыкупы", ОформлятьВыкупы(ФормируемыеДокументы));
	ПараметрыСоздания.Вставить("СозданныеДокументы", СозданныеДокументы.Выгрузить().ВыгрузитьКолонку("Ссылка"));
	ПараметрыСоздания.Вставить("Период", ПериодАнализа);
	ПараметрыСоздания.Вставить("ПериодичностьФормированияДокументов", ПериодичностьФормированияДокументов);
	
	НастройкиКомпоновкиДляФоновыхЗаданий = НастройкиКомпоновкиПоИмени("ПроблемныеОрганизации", Ложь);
	
	ПараметрыСоздания.Вставить("НастройкиКомпоновки", НастройкиКомпоновкиДляФоновыхЗаданий);
	ПараметрыСоздания.Вставить("ИмяМакета", ИмяМакетаОтбора());
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(ЭтотОбъект.УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.НаименованиеФоновогоЗадания = НСтр("ru = 'Обновление списка созданных документов'");
	
	ФоновоеЗадание = ДлительныеОперации.ВыполнитьВФоне("Обработки.ФормированиеПередачТоваровМеждуОрганизациямиИВыкупов.ОбновитьСозданныеДокументы",
		ПараметрыСоздания, ПараметрыВыполненияВФоне);
	
	Возврат ФоновоеЗадание;
	
КонецФункции

&НаКлиенте
Процедура ПослеОбновленияСозданныхДокументов(ФоновоеЗадание, ДополнительныеПараметры) Экспорт
	
	Если ФоновоеЗадание <> Неопределено 
		И ФоновоеЗадание.Статус = "Выполнено" Тогда
		
		ЗагрузитьРезультатыВыполненияФоновыхЗаданий(ФоновоеЗадание.АдресРезультата);		
		УстановитьВидимостьИнформацииНаСтраницеСозданныхДокументов(Истина);
		
	Иначе
		Если ФоновоеЗадание <> Неопределено Тогда
			ОписаниеОшибки = НСтр("ru = 'Не удалось закончить обновление списка созданных документов по причине: %Причина%'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Причина%",  ФоновоеЗадание.ПодробноеПредставлениеОшибки);
			ПоказатьПредупреждение(, ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнитьКомитентов
	
&НаКлиенте
Процедура ЗаполнитьКомитентов(ФоновоеЗадание = Неопределено)		
	Если ФоновоеЗадание = Неопределено Тогда
		ФоновоеЗадание = ЗаполнитьКомитентовСервер();
	КонецЕсли;
	НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
	Обработчик = Новый ОписаниеОповещения("ПослеЗаполниенияКомитентов", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, Обработчик, НастройкиОжидания);
КонецПроцедуры

&НаСервере
Функция ЗаполнитьКомитентовСервер()
	
	ПараметрыСоздания = Новый Структура;                    
	ПараметрыСоздания.Вставить("ОформлятьПередачи", ОформлятьПередачи(ФормируемыеДокументы));
	ПараметрыСоздания.Вставить("ОформлятьВыкупы", ОформлятьВыкупы(ФормируемыеДокументы));
	ПараметрыСоздания.Вставить("СозданныеДокументы", СозданныеДокументы.Выгрузить().ВыгрузитьКолонку("Ссылка"));
	ПараметрыСоздания.Вставить("Период", ПериодАнализа);
	ПараметрыСоздания.Вставить("ПериодичностьФормированияДокументов", ПериодичностьФормированияДокументов);
	ПараметрыСоздания.Вставить("Организация", Организация);
	ПараметрыСоздания.Вставить("ТипЗапасов", ТипЗапасов);
	
	НастройкиКомпоновкиДляФоновыхЗаданий = НастройкиКомпоновкиПоИмени("ОрганизацииКомитенты", Истина);
	
	ПараметрыСоздания.Вставить("НастройкиКомпоновки", НастройкиКомпоновкиДляФоновыхЗаданий);
	ПараметрыСоздания.Вставить("ИмяМакета", ИмяМакетаОтбора());
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(ЭтотОбъект.УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.НаименованиеФоновогоЗадания = НСтр("ru = 'Обновление списка организаций-коминетов'");
	
	ФоновоеЗадание = ДлительныеОперации.ВыполнитьВФоне("Обработки.ФормированиеПередачТоваровМеждуОрганизациямиИВыкупов.ЗаполнитьКомитентов",
		ПараметрыСоздания, ПараметрыВыполненияВФоне);
	
	Возврат ФоновоеЗадание;
	
КонецФункции

&НаКлиенте
Процедура ПослеЗаполниенияКомитентов(ФоновоеЗадание, ДополнительныеПараметры) Экспорт
	
	Если ФоновоеЗадание <> Неопределено 
		И ФоновоеЗадание.Статус = "Выполнено" Тогда
		ЗагрузитьРезультатыВыполненияФоновыхЗаданий(ФоновоеЗадание.АдресРезультата);		
	Иначе
		Если ФоновоеЗадание <> Неопределено Тогда
			ОписаниеОшибки = НСтр("ru = 'Не удалось закончить заполнения списка организаций-кометентов по причине: %Причина%'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Причина%",  ФоновоеЗадание.ПодробноеПредставлениеОшибки);
			ПоказатьПредупреждение(, ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнитьОтправителей

&НаКлиенте
Процедура ЗаполнитьОтправителей(ИмяТаблицы = "", ФоновоеЗадание = Неопределено)		
	Если ФоновоеЗадание = Неопределено Тогда
		ФоновоеЗадание = ЗаполнитьОтправителейСервер(ИмяТаблицы);
	КонецЕсли;
	НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
	Обработчик = Новый ОписаниеОповещения("ПослеЗаполненияОтправителей", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, Обработчик, НастройкиОжидания);
КонецПроцедуры

&НаСервере
Функция ЗаполнитьОтправителейСервер(ИмяТаблицы)
	
	ТолькоПоклажедатели = ИмяТаблицы = "ПоклажедателиСТоварами";
	
	ПараметрыСоздания = Новый Структура;                    
	ПараметрыСоздания.Вставить("ОформлятьПередачи", ОформлятьПередачи(ФормируемыеДокументы) И Не ТолькоПоклажедатели);
	ПараметрыСоздания.Вставить("ОформлятьВыкупы", ОформлятьВыкупы(ФормируемыеДокументы));
	ПараметрыСоздания.Вставить("Организация", Организация);
	ПараметрыСоздания.Вставить("ИмяТаблицы", ИмяТаблицы);
	ПараметрыСоздания.Вставить("ТипЗапасов", ТипЗапасов);
	
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(ЭтотОбъект.УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.НаименованиеФоновогоЗадания = НСтр("ru = 'Обновление отправителей товаров'");
	
	ФоновоеЗадание = ДлительныеОперации.ВыполнитьВФоне("Обработки.ФормированиеПередачТоваровМеждуОрганизациямиИВыкупов.ЗаполнитьОтправителей",
		ПараметрыСоздания, ПараметрыВыполненияВФоне);
	
	Возврат ФоновоеЗадание;
	
КонецФункции

&НаКлиенте
Процедура ПослеЗаполненияОтправителей(ФоновоеЗадание, ДополнительныеПараметры) Экспорт
	
	Если ФоновоеЗадание <> Неопределено 
		И ФоновоеЗадание.Статус = "Выполнено" Тогда
		ЗагрузитьРезультатыВыполненияФоновыхЗаданий(ФоновоеЗадание.АдресРезультата);		
	Иначе
		Если ФоновоеЗадание <> Неопределено Тогда
			ОписаниеОшибки = НСтр("ru = 'Не удалось закончить заполнения списка отправителей по причине: %Причина%'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Причина%",  ФоновоеЗадание.ПодробноеПредставлениеОшибки);
			ПоказатьПредупреждение(, ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура СохранитьВыбранныхОтправителей()
	Если ТипЗапасов = Перечисления.ТипыЗапасов.Товар Тогда
		КлючОбъекта = "Обработка.ФормированиеПередачТоваровМеждуОрганизациямиИВыкупов";
		
		Если ЗначениеЗаполнено(Организация)
			И Объект.ВыбранныеОтправители.Количество() > 0 Тогда
			
			КлючНастроек = Строка(Организация.УникальныйИдентификатор()) + "ВыбранныеОтправители";
			
			ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючОбъекта,
				КлючНастроек,
				Объект.ВыбранныеОтправители.Выгрузить());
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьВыбранныхОтправителей()
	
	Если ВариантВыбораОтправителей = "ПоУказаннымПриоритетам" Тогда
		Если ЗначениеЗаполнено(Организация) Тогда
			КлючОбъекта = "Обработка.ФормированиеПередачТоваровМеждуОрганизациямиИВыкупов";
			КлючНастроек = Строка(Организация.УникальныйИдентификатор()) + "ВыбранныеОтправители";
			ВыбранныеОтправителиНастройка = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючОбъекта, КлючНастроек);
			Если ВыбранныеОтправителиНастройка <> Неопределено
				И ТипЗнч(ВыбранныеОтправителиНастройка) = Тип("ТаблицаЗначений") Тогда
				Объект.ВыбранныеОтправители.Загрузить(ВыбранныеОтправителиНастройка);
				
				УдалитьСтрокиВыбранныхОтправителейПоФормируемымДокументам();
			Иначе
				Объект.ВыбранныеОтправители.Очистить();
			КонецЕсли;
		Иначе
			Объект.ВыбранныеОтправители.Очистить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокиВыбранныхОтправителейПоФормируемымДокументам()
	
	Индекс = Объект.ВыбранныеОтправители.Количество();
	
	Пока Индекс > 0 Цикл
		Индекс = Индекс - 1;
		
		СтрокаТаблицы = Объект.ВыбранныеОтправители[Индекс];
		
		ОтправительОрганизация = ТипЗнч(СтрокаТаблицы.Отправитель) = Тип("СправочникСсылка.Организации");
		ОтправительПартнер = ТипЗнч(СтрокаТаблицы.Отправитель) = Тип("СправочникСсылка.Партнеры");
		
		Если (ОтправительПартнер
			И Не ОформлятьВыкупы(ФормируемыеДокументы))
			
			Или (ОтправительОрганизация
			И Не ОформлятьПередачи(ФормируемыеДокументы))
			
			Или Не ЗначениеЗаполнено(СтрокаТаблицы.Отправитель)
			
			Или Не ЗначениеЗаполнено(СтрокаТаблицы.ВидЦен)
			
			Или Не ЗначениеЗаполнено(СтрокаТаблицы.ХозяйственнаяОперация)
			
			Или Не ЗначениеЗаполнено(СтрокаТаблицы.ТипЗапасов)
			
			Или Не ЗначениеЗаполнено(СтрокаТаблицы.Договор)
				И (ИспользоватьДоговорыМеждуОрганизациями
			    	И ОтправительОрганизация
					Или ОтправительПартнер) Тогда
			
			Объект.ВыбранныеОтправители.Удалить(СтрокаТаблицы);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ФормируемыеДокументыПриИзмененииСервер()
	
	ФоновоеЗадание = ЗаполнитьДанныеИНастроитьСтраницуНастройки();
	УдалитьСтрокиВыбранныхОтправителейПоФормируемымДокументам();

	Возврат ФоновоеЗадание;
	
КонецФункции

&НаКлиенте
Процедура СформироватьОтчетПоОтрицательнымОстаткам(СОтборомПоТекущемуПолучателю)
	ПараметрыФормы = Новый Структура;
	
	ОтборОтчета = Новый Структура;
	ОтборОтчета.Вставить("ПериодичностьФормированияДокументов", ПериодичностьФормированияДокументов);
	
	ПараметрыФормы.Вставить("Отбор", ОтборОтчета);													
	ПараметрыФормы.Вставить("ФиксированныеНастройки", НастройкиКомпоновкиПоИмени("Отчет", СОтборомПоТекущемуПолучателю));
	ПараметрыФормы.Вставить("КлючНазначенияИспользования");
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
	ПараметрыФормы.Вставить("КлючВарианта", "Отчет");
	
	ОткрытьФорму("Отчет.ОтрицательныеОстаткиТоваровОрганизаций.Форма", ПараметрыФормы, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦеныЗавершение(Результат, ОписаниеОповещения) Экспорт
	
	ВернутьсяКНастройкамФормирования(Неопределено);	
	
КонецПроцедуры

&НаСервере
Функция НастройкиКомпоновкиПоИмени(ИмяНастройки, СОтборомПоТекущемуПолучателю)
	
	Возврат Обработки.ФормированиеПередачТоваровМеждуОрганизациямиИВыкупов.НастройкиКомпоновкиПоИмени(
		 ОтборНоменклатуры.ПолучитьНастройки(),
		 ИмяНастройки,
		 ИмяМакетаОтбора(),
		 ПериодАнализа,
		 ПериодичностьФормированияДокументов,
		 ?(СОтборомПоТекущемуПолучателю, Организация, Неопределено),
		 ?(СОтборомПоТекущемуПолучателю, ТипЗапасов, Неопределено));
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяМакетаОтбора()
	
	Возврат "Отчет.ОтрицательныеОстаткиТоваровОрганизаций.ОтборТоваров";
	
КонецФункции

&НаКлиенте
Процедура ДекорацияОтборНоменклатурыОбработкаНавигационнойСсылкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено 
		Или Не ЭтоАдресВременногоХранилища(Результат) Тогда
		Возврат;
	КонецЕсли;
	ОбработатьИзменениеОтбораНоменклатуры(Результат);
	ЗаполнитьПроблемныеОрганизации();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеОтбораНоменклатуры(АдресОтбора)
	
	ОтборНоменклатурыНастройка = ПолучитьИзВременногоХранилища(АдресОтбора);
	УдалитьИзВременногоХранилища(АдресОтбора);
	
	ОтборНоменклатуры.ЗагрузитьНастройки(ОтборНоменклатурыНастройка);
	СформироватьПредставлениеОтбораНоменклатуры();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПредставлениеОтбораНоменклатуры()
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(НСтр("ru='Отбор номенклатуры:'") + " ");
	ПредставлениеОтбора = Строка(ОтборНоменклатуры.Настройки.Отбор);
	Если ЗначениеЗаполнено(ПредставлениеОтбора) Тогда
		МассивСтрок.Добавить(ПредставлениеОтбора+". ");
	Иначе
		МассивСтрок.Добавить(НСтр("ru='<не установлен>.'")+ " ");
	КонецЕсли;
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Установить отбор'"),,,,"Фильтр"));
	Элементы.ДекорацияОтборНоменклатуры.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатыВыполненияФоновыхЗаданий(АдресХранилища)
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	РеквизитыФормы = ЭтотОбъект.ПолучитьРеквизиты();
	
	Для Каждого СтрТабл Из Результат Цикл
		
		НайденРеквизитФормы = Ложь;
		Для Каждого СтрМас из РеквизитыФормы Цикл
			Если СтрМас.Имя = СтрТабл.ИмяТаблицы Тогда 
				ЭтотОбъект[СтрТабл.ИмяТаблицы].Загрузить(СтрТабл.Таблица);
				НайденРеквизитФормы = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не НайденРеквизитФормы Тогда
			Если Объект.Свойство(СтрТабл.ИмяТаблицы) Тогда
				Объект[СтрТабл.ИмяТаблицы].Загрузить(СтрТабл.Таблица);
			Иначе
				ТекстИсключения = НСтр("ru = 'Неизвестное имя таблицы %ИмяТаблицы%'");
				ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяТаблицы%", СтрТабл.ИмяТаблицы);
				ВызватьИсключение ТекстИсключения;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ВсеДокументыПроведены = СозданныеДокументы.НайтиСтроки(Новый Структура("Проведен", Ложь)).Количество() = 0;	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОформлятьПередачи(ФормируемыеДокументы)
	
	Возврат ФормируемыеДокументы = "ПередачиМеждуОрганизациямиИВыкупыТоваровНаХранении"
			Или ФормируемыеДокументы = "ТолькоПередачиМеждуОрганизациями";
	
КонецФункции
		
&НаКлиентеНаСервереБезКонтекста
Функция ОформлятьВыкупы(ФормируемыеДокументы)
	
	Возврат ФормируемыеДокументы = "ПередачиМеждуОрганизациямиИВыкупыТоваровНаХранении"
			Или ФормируемыеДокументы = "ТолькоВыкупыТоваров"
			Или ФормируемыеДокументы = "ТолькоВыкупыТоваровНаХранении";
	
КонецФункции

&НаСервере
Функция ПоместитьВоВременноеХранилищеНеУстановленныеЦены()
	
	Возврат ПоместитьВоВременноеХранилище(НеустановленныеЦены.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция НастроитьСтраницуНастройки()
	
	Если ТипЗапасов = Перечисления.ТипыЗапасов.Товар Тогда
		
		Элементы.НастройкиТипыЗапасов.ТекущаяСтраница = Элементы.НастройкиТипыЗапасовСобственныйТовар;
		
		Если ВариантВыбораОтправителей = "ПоНастройкамПередачи" Тогда
			Элементы.СтранницыОтправителей.ТекущаяСтраница = Элементы.СтраницаОтправителиПоНастройкамПередачи;
			Элементы.НастройкиПередачи.Видимость = ОформлятьПередачи(ФормируемыеДокументы);
			Элементы.ПоклажедателиСТоварами.Видимость = ОформлятьВыкупы(ФормируемыеДокументы);
		Иначе
			Элементы.СтранницыОтправителей.ТекущаяСтраница = Элементы.СтраницаОтправителиПоУказаннымПриоритетам;
		КонецЕсли;
		
		Если ВариантВыбораОтправителей = "ПоНастройкамПередачи" Тогда
			ТекстПояснения =
			НСтр("ru = 'По организации-получателю будут найдены отрицательные остатки на конец каждого %ПредставлениеПереодичностиФормирования% из указанного периода. Затем будут проанализированы остатки владельцев товаров и %ПредставлениеФормируемыхДокументов%. Сначала будут списываться товары, по которым сформированы резервы товаров организаций.'");
		Иначе
			ТекстПояснения =
			НСтр("ru = 'По организации-владельцу будут найдены отрицательные остатки на конец каждого %ПредставлениеПереодичностиФормирования% из указанного периода. Затем будут проанализированы остатки владельцев товаров в порядке их приоритета и %ПредставлениеФормируемыхДокументов%.'");
		КонецЕсли;
		
		Если ПериодичностьФормированияДокументов = "ПоДням" Тогда
			ПредставлениеПереодичностиФормирования = НСтр("ru = 'дня'");
		Иначе
			ПредставлениеПереодичностиФормирования = НСтр("ru = 'месяца'");
		КонецЕсли;
		
		ПроблемыСПравами = Новый Массив;
		
		Если ОформлятьВыкупы(ФормируемыеДокументы) 
			И Не ПравоДоступа("Добавление", Метаданные.Документы.ВыкупПринятыхНаХранениеТоваров) Тогда
			ТекстПроблемы = НСтр("ru = 'Недостаточно прав для формирования выкупов товаров на хранении.'");	
			ПроблемыСПравами.Добавить(ТекстПроблемы);
		КонецЕсли;
		
		Если ОформлятьПередачи(ФормируемыеДокументы)
			И Не ПравоДоступа("Добавление", Метаданные.Документы.ПередачаТоваровМеждуОрганизациями) Тогда
			ТекстПроблемы = НСтр("ru = 'Недостаточно прав для формирования передач товаров между организациями.'");	
			ПроблемыСПравами.Добавить(ТекстПроблемы);
		КонецЕсли;
		
		Если ОформлятьВыкупы(ФормируемыеДокументы)
			И ОформлятьПередачи(ФормируемыеДокументы) Тогда
			
			ПредставлениеФормируемыхДокументов = НСтр("ru = 'сформированы передачи товаров между организациями и выкупы товаров на хранении'");
			ТекстКнопкиЗаполнения = НСтр("ru = 'Заполнить поклажедателями и организациями'");
			ПодсказкаКнопкиЗаполнения = НСтр("ru = 'Заполнить поклажедателями, по которым есть остатки невыкупленных товаров, и организациями по настройкам передачи'");
			
		ИначеЕсли ОформлятьПередачи(ФормируемыеДокументы) Тогда
			
			ПредставлениеФормируемыхДокументов = НСтр("ru = 'сформированы передачи товаров между организациями'");
			ТекстКнопкиЗаполнения = НСтр("ru = 'Заполнить организациями'");
			ПодсказкаКнопкиЗаполнения = НСтр("ru = 'Заполнить организациями по настройкам передачи'");
			
		Иначе
			
			ПредставлениеФормируемыхДокументов = НСтр("ru = 'сформированы выкупы товаров на хранении'");
			ТекстКнопкиЗаполнения = НСтр("ru = 'Заполнить поклажедателями'");
			ПодсказкаКнопкиЗаполнения = НСтр("ru = 'Заполнить поклажедателями, по которым есть остатки невыкупленных товаров'");
			
		КонецЕсли;
		
		Если ОформлятьВыкупы(ФормируемыеДокументы) Тогда
			Элементы.ВыбранныеОтправителиДобавить.Заголовок = НСтр("ru = 'Добавить организацию'");
		Иначе
			Элементы.ВыбранныеОтправителиДобавить.Заголовок = НСтр("ru = 'Добавить'");
		КонецЕсли;
		
		Если ОформлятьПередачи(ФормируемыеДокументы) Тогда
			Элементы.ВыбранныеОтправителиДобавитьПоклажедателя.Заголовок = НСтр("ru = 'Добавить поклажедателя'");
		Иначе
			Элементы.ВыбранныеОтправителиДобавитьПоклажедателя.Заголовок = НСтр("ru = 'Добавить'");
		КонецЕсли;
		
		Элементы.ВыбранныеОтправителиДобавить.Видимость = ОформлятьПередачи(ФормируемыеДокументы);
		Элементы.ВыбранныеОтправителиДобавитьПоклажедателя.Видимость = ОформлятьВыкупы(ФормируемыеДокументы);
		
		Элементы.ВыбранныеОтправителиДоговор.Видимость = ИспользоватьДоговорыМеждуОрганизациями
														Или ОформлятьВыкупы(ФормируемыеДокументы);
														
		Элементы.НастройкиПередачи.Видимость = ОформлятьПередачи(ФормируемыеДокументы);
		Элементы.ПоклажедателиСТоварами.Видимость = ОформлятьВыкупы(ФормируемыеДокументы);
		
		ТекстПояснения = СтрЗаменить(ТекстПояснения, "%ПредставлениеПереодичностиФормирования%", ПредставлениеПереодичностиФормирования);
		ТекстПояснения = СтрЗаменить(ТекстПояснения, "%ПредставлениеФормируемыхДокументов%", ПредставлениеФормируемыхДокументов);
		
		Элементы.НастройкиИнформацияСобственныйТоварПояснениеАлгоритма.Заголовок = ТекстПояснения; 
		
		Команды.ЗаполнитьПоНастройкамПередачи.Заголовок = ТекстКнопкиЗаполнения;
		Команды.ЗаполнитьПоНастройкамПередачи.Подсказка = ПодсказкаКнопкиЗаполнения;
		
		ЕстьПроблемаСПравами = ПроблемыСПравами.Количество() > 0;
		
		Если ЕстьПроблемаСПравами Тогда
			ТекстПроблемы = НСтр("ru = 'Обратитесь к администратору для назначения необходимых прав. Продолжить формирование документов с такой настройкой невозможно.'");	
			ПроблемыСПравами.Добавить(ТекстПроблемы);
			ТекстПроблемыСПравами = СтрСоединить(ПроблемыСПравами, " ");
			Элементы.НастройкиИнформацияСобственныйТоварПроблемаСПравами.Заголовок = ТекстПроблемыСПравами;
		КонецЕсли;
		
		Элементы.НастройкиИнформацияСобственныйТоварПроблемаСПравами.Видимость = ЕстьПроблемаСПравами;
		
	Иначе
		Элементы.НастройкиТипыЗапасов.ТекущаяСтраница = Элементы.НастройкиТипыЗапасовКомиссионныйТовар;
		ЕстьПроблемаСПравами = Не ПравоДоступа("Добавление", Метаданные.Документы.ПередачаТоваровМеждуОрганизациями);
		Элементы.НастройкиИнформацияКомиссионныйТоварПроблемаСПравами.Видимость = ЕстьПроблемаСПравами;
	КонецЕсли;	
	
	Элементы.Создать.Доступность = Не ЕстьПроблемаСПравами;
КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьИнформацииНаСтраницеСозданныхДокументов(РасчетВыполнен)
	
	Если РасчетВыполнен Тогда
			
		ПроблемаОсталась = ПроблемныеОрганизации.НайтиСтроки(Новый Структура("Организация,ТипЗапасов", Организация, ТипЗапасов)).Количество() > 0;
		
		Элементы.РезультатыИнформацияЕстьНепроведенныеДокументы.Видимость = ФормированиеДокументовПрервано 
																				И Не ВсеДокументыПроведены
																				И ПроблемаОсталась;
																				
		Элементы.РезультатыИнформацияПродолжитьФормирование.Видимость = ФормированиеДокументовПрервано
																				И ВсеДокументыПроведены
																				И ПроблемаОсталась;
																				
		Элементы.ПродолжитьФормирование.Видимость = ФормированиеДокументовПрервано
													И ПроблемаОсталась;
													
		Элементы.ПродолжитьФормирование.Доступность = ВсеДокументыПроведены;
		
		Элементы.РезультатыИнформацияЕстьОтрицательныеОстатки.Видимость = Не ФормированиеДокументовПрервано 
																			И ПроблемаОсталась;
																			
		Элементы.РезультатыИнформацияНетОтрицательныхОстатков.Видимость = Не ПроблемаОсталась;
		
		Элементы.Готово.Видимость = Не ПроблемаОсталась;
		
		Элементы.ПродолжитьСНовымиОтборами.Видимость = Не (ФормированиеДокументовПрервано И ПроблемаОсталась)
													   И РежимЗапуска <> "ИсправлениеОтрицательныхОстатков";
	
	Иначе
		
		Элементы.РезультатыИнформацияЕстьНепроведенныеДокументы.Видимость = Ложь;
		Элементы.РезультатыИнформацияПродолжитьФормирование.Видимость     = Ложь;
		Элементы.РезультатыИнформацияЕстьОтрицательныеОстатки.Видимость   = Ложь;
		Элементы.РезультатыИнформацияНетОтрицательныхОстатков.Видимость   = Ложь;
		
	КонецЕсли;
	
	Элементы.СозданныеДокументы.Доступность             = РасчетВыполнен;
	Элементы.РезультатыИнформацияФормируется.Видимость  = Не РасчетВыполнен;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьДанныеИНастроитьСтраницуНастройки()
	
	НастроитьСтраницуНастройки();
	
	ФоновоеЗадание = Неопределено;
	
	Если ТипЗапасов = Перечисления.ТипыЗапасов.Товар Тогда 
		
		Если ОформлятьПередачи(ФормируемыеДокументы) Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(НастройкиПередачи,
				"ОрганизацияПродавец",
				Организация,
				ВидСравненияКомпоновкиДанных.Равно);
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(НастройкиПередачи,
				"СпособПередачиТоваров",
				Перечисления.СпособыПередачиТоваров.Продажа,
				ВидСравненияКомпоновкиДанных.Равно);
			
		КонецЕсли;
		
		Если ОформлятьВыкупы(ФормируемыеДокументы) Тогда																		
			ФоновоеЗадание = ЗаполнитьОтправителейСервер("ПоклажедателиСТоварами");
		КонецЕсли;
		
		ЗагрузитьВыбранныхОтправителей();
		
	Иначе
		ФоновоеЗадание = ЗаполнитьКомитентовСервер()
	КонецЕсли;
	
	Возврат ФоновоеЗадание;
	
КонецФункции

&НаСервере
Функция ПроверитьОтправителей()
	
	Результат = Истина;
	
	Если ТипЗапасов = Перечисления.ТипыЗапасов.Товар Тогда
		
		Если ВариантВыбораОтправителей = "ПоУказаннымПриоритетам" Тогда
			Если Объект.ВыбранныеОтправители.Количество() = 0 Тогда
				ТекстСообщения = НСтр("ru = 'Выберите отправителей.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"ВыбранныеОтправители","Объект");
				Возврат Ложь;
			КонецЕсли;
			
			ХозяйственныеОперацииВыкупа = Обработки.ФормированиеПередачТоваровМеждуОрганизациямиИВыкупов.ХозяйственныеОперацииВыкупа();
			
			Отказ = Ложь;
			ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
			
			ОбщегоНазначенияУТ.ПроверитьНаличиеДублейСтрокТЧ(ОбработкаОбъект,
				"ВыбранныеОтправители","Отправитель,ВидЦен,Договор,ТипЗапасов", Отказ);
				
			Если Отказ Тогда
				Возврат Ложь;
			КонецЕсли;
			
			Для Каждого СтрТабл Из Объект.ВыбранныеОтправители Цикл
				Если Не ОформлятьВыкупы(ФормируемыеДокументы) 
					Или ХозяйственныеОперацииВыкупа.Найти(СтрТабл.ХозяйственнаяОперация) = Неопределено Тогда
					
					Если Не ЗначениеЗаполнено(СтрТабл.Отправитель) Тогда
						ТекстСообщения = НСтр("ru = 'Укажите отправителя'");
						
						Результат = Ложь;
						Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ВыбранныеОтправители", СтрТабл.НомерСтроки, "Отправитель");
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле,"Объект");
						
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(СтрТабл.ВидЦен) Тогда
						ТекстСообщения = НСтр("ru = 'Укажите вид цен передачи'");	
						Результат = Ложь;
						Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ВыбранныеОтправители", СтрТабл.НомерСтроки, "ВидЦен");
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле,"Объект");
					КонецЕсли;
					
					Если ИспользоватьДоговорыМеждуОрганизациями
						И Не ЗначениеЗаполнено(СтрТабл.Договор) Тогда
						ТекстСообщения = НСтр("ru = 'Укажите договор'");	
						Результат = Ложь;
						Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ВыбранныеОтправители", СтрТабл.НомерСтроки, "Договор");
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле,"Объект");
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(СтрТабл.ТипЗапасов) Тогда
						ТекстСообщения = НСтр("ru = 'Укажите передаваемый тип запасов'");	
						Результат = Ложь;
						Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ВыбранныеОтправители", СтрТабл.НомерСтроки, "ТипЗапасов");
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле,"Объект");
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ОформлятьПередачи(ФормируемыеДокументы) Тогда
			
			ПараметрыЗапроса = Новый Структура();
			ПараметрыЗапроса.Вставить("Организация", Организация);
			ПараметрыЗапроса.Вставить("ОформлятьПередачи", ОформлятьПередачи(ФормируемыеДокументы));
			ПараметрыЗапроса.Вставить("ОформлятьВыкупы", Ложь);
			ПараметрыЗапроса.Вставить("ТипЗапасов",  ТипЗапасов);
			
			
			ТаблицаНастроекПередачи = 
				Обработки.ФормированиеПередачТоваровМеждуОрганизациямиИВыкупов.ПолучитьТаблицуПоНастройкамПередачи(ПараметрыЗапроса);
			
			Для Каждого СтрТабл из ТаблицаНастроекПередачи Цикл
				
				Если Не ЗначениеЗаполнено(СтрТабл.ВидЦен) Тогда
					ТекстСообщения = НСтр("ru = 'Укажите вид цен в настройках передачи от организации %Отправитель%'");	
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Отправитель%", СтрТабл.Отправитель);
					Результат = Ложь;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
				
				Если ИспользоватьДоговорыМеждуОрганизациями
					И Не ЗначениеЗаполнено(СтрТабл.Договор) Тогда
					ТекстСообщения = НСтр("ru = 'Укажите договор в настройках передачи от организации %Отправитель%'");	
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Отправитель%", СтрТабл.Отправитель);
					Результат = Ложь;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе	
		
		Для Каждого СтрТабл Из ОтправителиПоКомиссии Цикл
			
			Если Не ЗначениеЗаполнено(СтрТабл.ВидЦен) Тогда
				ТекстСообщения = НСтр("ru = 'Укажите вид цен в настройках передачи'");	
				Результат = Ложь;
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ОтправителиПоКомиссии",
																	ОтправителиПоКомиссии.Индекс(СтрТабл) + 1,
																	"ВидЦен");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле);
			КонецЕсли;
			
			Если ИспользоватьДоговорыМеждуОрганизациями
				И Не ЗначениеЗаполнено(СтрТабл.Договор) Тогда
				ТекстСообщения = НСтр("ru = 'Укажите договор в настройках передачи'");	
				Результат = Ложь;
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ОтправителиПоКомиссии",
																	ОтправителиПоКомиссии.Индекс(СтрТабл) + 1,
																	"Договор");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ПоместитьПоклажедателейСТоварамиВоВременноеХранилище() 
	
	Возврат ПоместитьВоВременноеХранилище(ПоклажедателиСТоварами.Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаСервере
Процедура ИнициализироватьРежимИсправленияОстатков()
	
	РежимЗапуска = "ИсправлениеОтрицательныхОстатков";
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
		ОтборНоменклатуры, 
		"Склад", 
		Параметры.ОтборСклады, 
		ВидСравненияКомпоновкиДанных.ВСписке);
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
		ОтборНоменклатуры, 
		"Номенклатура", 
		Параметры.ОтборНоменклатура, 
		ВидСравненияКомпоновкиДанных.ВСписке);
	СтрокаПроблемныеОрганизации = ПроблемныеОрганизации.Добавить();
	СтрокаПроблемныеОрганизации.Организация = Параметры.Организация;
	СтрокаПроблемныеОрганизации.ТипЗапасов = Параметры.ТипЗапасов;
	Организация = Параметры.Организация;
	ТипЗапасов = Параметры.ТипЗапасов;
	Для Каждого Источник Из ПараметрыИсточники() Цикл
		СтрОтправитель = Объект.ВыбранныеОтправители.Добавить();
		СтрОтправитель.Отправитель = Источник.Отправитель;
		СтрОтправитель.ТипЗапасов = Источник.ТипЗапасов;
		СтрОтправитель.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию");
		СтрОтправитель.ВидЦен  = ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка");
		СтрОтправитель.Договор = ПредопределенноеЗначение("Справочник.ДоговорыМеждуОрганизациями.ПустаяСсылка");
	КонецЦикла;
	Элементы.НастройкиЗаголовок.Заголовок = НСтр("ru = 'Настройка пакетного формирования документов'");
	Элементы.РезультатыЗаголовок.Заголовок = НСтр("ru = 'Созданные документы'");
	Элементы.ПроблемыИнформацияФормируется.Видимость = Ложь;
	Элементы.ПроблемыИнформацияЕстьОтрицательныеОстатки.Видимость = Истина;
	Элементы.ПроблемыИнформацияНетОтрицательныхОстатков.Видимость = Ложь;
	Элементы.КВыборуОрганизацииПолучателя.Видимость = Ложь;
	Элементы.ПерейтиКНастройкамФормирования.Доступность = Истина;
	Элементы.ПроблемныеОрганизации.Доступность = Истина;
	Элементы.Основная.ТекущаяСтраница = Элементы.Настройки;
	Элементы.Создать.КнопкаПоУмолчанию = Истина;
	ВариантВыбораОтправителей = "ПоУказаннымПриоритетам";
	НастроитьСтраницуНастройки();

КонецПроцедуры

// Возвращаемое значение:
// 	Массив из Структура:
// 		* Отправитель - СправочникСсылка.Организации
// 		* ТипЗапасов - ПеречислениеСсылка.ТипыЗапасов
//
&НаСервере
Функция ПараметрыИсточники()
	
	Возврат Параметры.Источники;
	
КонецФункции

#КонецОбласти
