
#Область ОписаниеПеременных

&НаКлиенте
Перем КоординатыВыделения;

&НаКлиенте
Перем СтрокВИзображенииВыделения;

&НаКлиенте
Перем ДанныеДублей;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьВидимостьПодсказок();
	
	СтруктураКнопок = Новый Структура;
	СтруктураКнопок.Вставить("duplicate", НСтр("ru = 'Дубль'"));
	СтруктураКнопок.Вставить("notDuplicate", НСтр("ru = 'Другой документ'"));
	СтруктураКнопок.Вставить("main", НСтр("ru = 'Основной экземпляр'"));
	СтруктураКнопок.Вставить("removeDuplicate", НСтр("ru = 'Убрать из дублей'"));
	СтруктураКнопок.Вставить("returnDuplicate", НСтр("ru = 'Вернуть в дубли'"));
	СтрокаКнопокДляДублей = РаспознаваниеДокументовСериализацияСлужебный.JsonDump(СтруктураКнопок);
	
	ДанныеФоновыхОпераций = Новый Структура;
	ДанныеФоновыхОпераций.Вставить("ИзмененияРеквизитовШапки", Новый Массив);
	ДанныеФоновыхОпераций.Вставить("ИзмененияСписковВыбораШапки", Новый Массив);
	ДанныеФоновыхОпераций.Вставить("ИзмененияНоменклатуры", Новый Массив);
	ДанныеФоновыхОпераций.Вставить("ИзмененияТаблицыСумм", Новый Массив);
	
	НастроитьКолонкиТаблицы();
	
	Если Параметры.Свойство("ОтборИзСписка") Тогда
		ЗаполнитьДокументыПоОтбору(Параметры.ОтборИзСписка);
	Иначе
		ОтборИзСписка = Новый Структура("РаспознанныеДокументы, ТекущаяДата, ТекущаяОрганизация, ТекущийКонтрагент", Новый Массив);
		ЗаполнитьДокументыПоОтбору(ОтборИзСписка);
	КонецЕсли;
	
	// Нажатые кнопки
	СкрытьЗаполненныеСтрокиШапки = Истина;
	Элементы.РеквизитыШапки.ОтборСтрок = Новый ФиксированнаяСтруктура("ДанныеЗаполнены", Ложь);
	СкрытьЗаполненныеСтрокиДопРеквизитов = Истина;
	Элементы.ТаблицаДопРеквизитов.ОтборСтрок = Новый ФиксированнаяСтруктура("ДанныеЗаполнены", Ложь);
	СкрытьЗаполненнуюНоменклатуру = Истина;
	СкрытьЗаполненныеСтрокиСумм = Истина;
	Элементы.ТаблицаСумм.ОтборСтрок = Новый ФиксированнаяСтруктура("ЕстьОшибка", Истина);
	
	ПолеПросмотра = РаспознаваниеДокументовСлужебный.МакетОтображенияКартинкиДокументаHTML();
	
	ТекущийШаг = "Шапка";
	ВыделитьШагТекущейСтраницы();
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("Подключаемый_АктивироватьПервуюСтроку", 0.3, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АктивироватьПервуюСтроку() Экспорт
	
	ТекущийЭлемент = Элементы.РеквизитыШапки;
	ТекущийЭлемент.ТекущийЭлемент = Элементы.ШапкаНомерДокумента;
	Подключаемый_ПриАктивизацииЯчейкиШапки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ГрупповаяОбработкаРаспознанныхДокументов.Форма.СозданиеКонтрагентов" Тогда
		СозданиеКонтрагентов(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ВыбранРеквизитФормыСоздания" Тогда
		ПриблизитьПоКоординатам(Параметр.Координаты, Параметр.ВысотаКартинки);
	ИначеЕсли ИмяСобытия = "РаспознанныйДокумент_ОбновитьОтборФормыСписка"
		Или ИмяСобытия = "РаспознанныйДокумент_СтатусОбработан" Тогда
		ОбновитьДанныеДокументаВКомплекте(Параметр);
		Если Элементы.СтраницыШаги.ТекущаяСтраница = Элементы.СтраницаИтого Тогда
			ЗаполнитьТаблицыИтого();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПолеПросмотраДокументСформирован(Элемент)
	
	Если Элемент.Имя = "ПолеПросмотра" Тогда
		HTMLДокументСформирован = Истина;
	Иначе
		НомерПоля = СтрЗаменить(Элемент.Имя, "ПолеПросмотра", "");
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(НомерПоля) Тогда
			НомерПоля = Число(НомерПоля);
			Пока HTMLДублейСформирован.Количество() - 1 < НомерПоля Цикл
				HTMLДублейСформирован.Добавить(Ложь);
			КонецЦикла;
			HTMLДублейСформирован[НомерПоля].Значение = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеПросмотраПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	Если ДанныеСобытия.Element.id = "image_load_button" Тогда
		HTMLДокументСформирован = Истина;
	ИначеЕсли ДанныеСобытия.Element.id = "setMain" ИЛИ ДанныеСобытия.Element.id = "" Тогда
		
		Если ТекущаяСтрокаДублей <> Элементы.ТаблицаДублей.ТекущаяСтрока Тогда
			Возврат;
		КонецЕсли;
		
		НомерПоля = СтрЗаменить(Элемент.Имя, "ПолеПросмотра", "");
		Если НомерПоля <> "" И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(НомерПоля) Тогда
			НомерПоля = Число(НомерПоля);
			
			Если Элементы.ТаблицаДублей.ТекущиеДанные.РаспознанныеДокументы[НомерПоля].УбратьИзДублей = Ложь Тогда
				
				Элементы.ТаблицаДублей.ТекущиеДанные.ЕстьОсновной = Истина;
				Для Каждого СтрокаСписка Из Элементы.ТаблицаДублей.ТекущиеДанные.РаспознанныеДокументы Цикл
					
					ИндексСтроки = Элементы.ТаблицаДублей.ТекущиеДанные.РаспознанныеДокументы.Индекс(СтрокаСписка);
					Если СтрокаСписка.УбратьИзДублей Тогда
						Продолжить;
					КонецЕсли;
					
					ДокументHTML = ДокументHTML(Элементы["ПолеПросмотра" + ИндексСтроки]);
					Если ДокументHTML = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					СтрокаСписка.Основной = (НомерПоля = ИндексСтроки);
					ДокументHTML.setMain(СтрокаСписка.Основной);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ДанныеСобытия.Element.id = "setDuplicate" Тогда
		
		Если ТекущаяСтрокаДублей <> Элементы.ТаблицаДублей.ТекущаяСтрока Тогда
			Возврат;
		КонецЕсли;
		
		НомерПоля = СтрЗаменить(Элемент.Имя, "ПолеПросмотра", "");
		Если НомерПоля <> "" И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(НомерПоля) Тогда
			
			НомерПоля = Число(НомерПоля);
			ТекущееПоле = Элементы.ТаблицаДублей.ТекущиеДанные.РаспознанныеДокументы[НомерПоля];
			ТекущееПоле.Основной = Ложь;
			ТекущееПоле.УбратьИзДублей = Не ТекущееПоле.УбратьИзДублей;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДокументНажатие(Элемент)
	
	ПолнаяКартинкаВидна = Не ПолнаяКартинкаВидна;
	СменитьВидимостьПолнойКартинки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолнаяКартинкаВиднаПриИзменении(Элемент)
	СменитьВидимостьПолнойКартинки();
КонецПроцедуры

&НаКлиенте
Процедура СменитьВидимостьПолнойКартинки()
	
	Если ПолнаяКартинкаВидна Тогда
		Элементы.ГруппаСтраницыПолнойКартинки.ТекущаяСтраница = Элементы.СтраницаПолнойКартинки;
	Иначе
		Элементы.ГруппаСтраницыПолнойКартинки.ТекущаяСтраница = Элементы.СтраницаБезКартинки;
	КонецЕсли;
	
	Подключаемый_СменитьВидимостьПолнойКартинки();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СменитьВидимостьПолнойКартинки() Экспорт
	
	Если ПолнаяКартинкаВидна И Не HTMLДокументСформирован Тогда
		ПодключитьОбработчикОжидания("Подключаемый_СменитьВидимостьПолнойКартинки", 0.3, Истина);
		Возврат;
	КонецЕсли;
	
	ЗагрузитьПолнуюКартинку();
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьЗаполненныеСтрокиШапкиПриИзменении(Элемент)
	
	Если СкрытьЗаполненныеСтрокиШапки Тогда
		Элементы.РеквизитыШапки.ОтборСтрок = Новый ФиксированнаяСтруктура("ДанныеЗаполнены", Ложь);
	Иначе
		Элементы.РеквизитыШапки.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьЗаполненнуюНоменклатуруПриИзменении(Элемент)
	СкрытьЗаполненнуюНоменклатуруНаСервере(СкрытьЗаполненнуюНоменклатуру);
КонецПроцедуры

&НаКлиенте
Процедура СкрытьЗаполненныеСтрокиСуммПриИзменении(Элемент)
	
	Если СкрытьЗаполненныеСтрокиСумм Тогда
		Элементы.ТаблицаСумм.ОтборСтрок = Новый ФиксированнаяСтруктура("ЕстьОшибка", Истина);
	Иначе
		Элементы.ТаблицаСумм.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовКомплектов

&НаКлиенте
Процедура ПредложениеПеретащитьНажатие(Элемент)
	
	СтрокиДляКомплекта = Элементы.ДанныеДокументов.ВыделенныеСтроки;
	КоличествоКомплектов = КоличествоКомплектов + 1;
	
	РезультатОбратнойСвязи.Комплекты.Вставить(КоличествоКомплектов, Новый Соответствие);
	НовыйКомплектНаСервере(Истина, КоличествоКомплектов);
	
	Если СтрокиДляКомплекта.Количество() > 1 Тогда
		Для Каждого ИдСтроки Из СтрокиДляКомплекта Цикл
			СтрокаТаблицы = ДанныеДокументов.НайтиПоИдентификатору(ИдСтроки);
			СтрокаТаблицы.НомерКомплекта = КоличествоКомплектов;
		КонецЦикла;
		НастроитьПанельИОшибкиКомплекта(КоличествоКомплектов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложениеПеретащитьПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложениеПеретащитьПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоКомплектов = КоличествоКомплектов + 1;
	РезультатОбратнойСвязи.Комплекты.Вставить(КоличествоКомплектов, Новый Соответствие);
	ТекущиеДействия = РезультатОбратнойСвязи.Комплекты.Получить(КоличествоКомплектов);
	
	Для Каждого СтрокаТаблицы Из ПараметрыПеретаскивания.Значение Цикл
		ТекущиеДействия.Вставить(СтрокаТаблицы.Ссылка, "ДобавленВручную");
		СтрокаТаблицы.НомерКомплекта = КоличествоКомплектов;
	КонецЦикла;
	
	#Если ВебКлиент Тогда
		ИзменяемыеКомплекты = Новый Массив;
		ИзменяемыеКомплекты.Добавить(КоличествоКомплектов);
		ДокументыДляПересчетаОшибок.ЗагрузитьЗначения(ИзменяемыеКомплекты);
		ПодключитьОбработчикОжидания("Подключаемый_НовыйКомплектНаСервере", 0.1, Истина);
		ПодключитьОбработчикОжидания("Подключаемый_НастроитьПанельИОшибкиКомплекта", 0.1, Истина);
	#Иначе
		НовыйКомплектНаСервере(Истина, КоличествоКомплектов);
		НастроитьПанельИОшибкиКомплекта(КоличествоКомплектов);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НастроитьПанельИОшибкиКомплекта()
	
	НастроитьПанельИОшибкиКомплектаНесколько();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПанельИОшибкиКомплектаНесколько()
	
	ВсеНомераКомплектов = ДокументыДляПересчетаОшибок.ВыгрузитьЗначения();
	Для Каждого НомерКомплекта Из ВсеНомераКомплектов Цикл
		НастроитьПанельИОшибкиКомплекта(НомерКомплекта);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НовыйКомплектНаСервере()
	
	ВсеНомераКомплектов = ДокументыДляПересчетаОшибок.ВыгрузитьЗначения();
	Для Каждого НомерКомплекта Из ВсеНомераКомплектов Цикл
		НовыйКомплектНаСервере(Истина, НомерКомплекта);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиДопРеквизитов

&НаКлиенте
Процедура СкрытьЗаполненныеСтрокиДопРеквизитовПриИзменении(Элемент)
	
	Если СкрытьЗаполненныеСтрокиДопРеквизитов Тогда
		Элементы.ТаблицаДопРеквизитов.ОтборСтрок = Новый ФиксированнаяСтруктура("ДанныеЗаполнены", Ложь);
	Иначе
		Элементы.ТаблицаДопРеквизитов.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРеквизитыШапки

&НаКлиенте
Процедура РеквизитыШапкиПриИзменении(Элемент)
	
	ДанныеЭтойСтроки = ТекущийЭлемент.ТекущиеДанные;
	ИмяРеквизитаШапки = СтрЗаменить(ТекущийЭлемент.ТекущийЭлемент.Имя, "Шапка", "");
	
	ДанныеЭтойСтроки.ДанныеЗаполнены = ПроверкаДанныеЗаполненыШапка(ДанныеЭтойСтроки);
	
	СтрокиТаблицы = Новый Массив;
	СтрокиТаблицы.Добавить(ТекущийЭлемент.ТекущаяСтрока);
	
	ПараметрыЗаписиРеквизитов = Новый Структура;
	ПараметрыЗаписиРеквизитов.Вставить("ТаблицаФормы", Элементы.РеквизитыШапки);
	ПараметрыЗаписиРеквизитов.Вставить("СтрокиТаблицы", СтрокиТаблицы);
	ПараметрыЗаписиРеквизитов.Вставить("ИмяРеквизитаШапки", ИмяРеквизитаШапки);
	ПараметрыЗаписиРеквизитов.Вставить("ЗначениеЗаполнения", ДанныеЭтойСтроки[ИмяРеквизитаШапки]);
	ПараметрыЗаписиРеквизитов.Вставить("ОбновитьЗначениеВЯчейке", Ложь);
	
	ЗаписатьНовоеЗначениеРеквизита(ПараметрыЗаписиРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыШапкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ШапкаНаправлениеДокумента" Тогда
		СтандартнаяОбработка = Ложь;
		
		ТекущиеДанные = Элемент.ТекущиеДанные;
		НовыеЗначения = ИзменитьНаправлениеНаСервере(ТекущиеДанные.Ссылка);
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, НовыеЗначения);
	ИначеЕсли Поле.Имя = "ШапкаКартинкаОткрытия" Тогда
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыШапкиПриАктивизацииЯчейки(Элемент)
	ПодключитьОбработчикОжидания("Подключаемый_ПриАктивизацииЯчейкиШапки", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыШапкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыШапкиПередНачаломИзменения(Элемент, Отказ)
	
	Если ТекущаяСтрокаШапки <> Элементы.РеквизитыШапки.ТекущаяСтрока
		Или ТекущееИмяРеквизита <> СтрЗаменить(Элементы.РеквизитыШапки.ТекущийЭлемент.Имя, "Шапка", "") Тогда
		
		ОтключитьОбработчикОжидания("Подключаемый_ПриАктивизацииЯчейкиШапки");
		Подключаемый_ПриАктивизацииЯчейкиШапки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыШапкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	СкрытьЗаполненныеСтрокиШапкиПриИзменении(Элемент);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаДублей

&НаКлиенте
Процедура ТаблицаДублейПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("Подключаемый_ПриАктивизацииСтрокиДублей", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДублейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДанныеДокументовКомплектов

&НаКлиенте
Процедура ВсеТаблицыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыделеннойСтроки();
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеТаблицыПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ОткрытьФормуВыделеннойСтроки();
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеТаблицыПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВсеТаблицыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПеретаскивания.Значение.Количество() <> 0
		И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Число") Тогда
		
		// При перетаскивании строк внутри одной таблицы на форме
		Возврат;
	КонецЕсли;
	
	ИзменяемыеКомплекты = Новый Массив;
	Если Элемент.Имя = "ДанныеДокументов" Тогда
		Для Каждого СтрокаТаблицы Из ПараметрыПеретаскивания.Значение Цикл
			Если СтрокаТаблицы = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИзменяемыеКомплекты.Найти(СтрокаТаблицы.НомерКомплекта) = Неопределено Тогда
				ИзменяемыеКомплекты.Добавить(СтрокаТаблицы.НомерКомплекта);
			КонецЕсли;
			
			ТекущиеДействия = РезультатОбратнойСвязи.Комплекты.Получить(СтрокаТаблицы.НомерКомплекта);
			ДействиеДокумента = ТекущиеДействия.Получить(СтрокаТаблицы.Ссылка);
			Если ДействиеДокумента = "ДобавленАвтоматически" Тогда
				ТекущиеДействия.Вставить(СтрокаТаблицы.Ссылка, "Удален");
			Иначе
				ТекущиеДействия.Удалить(СтрокаТаблицы.Ссылка);
			КонецЕсли;
			
			НоваяСтрока = ДанныеДокументов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.НомерКомплекта = 0;
			НоваяСтрока.ТипКомплекта = "";
			ДанныеДокументов.Удалить(СтрокаТаблицы);
		КонецЦикла;
		
	Иначе
		
		НомерКомплекта = Число(СтрЗаменить(Элемент.Имя, "Комплект", ""));
		ИзменяемыеКомплекты.Добавить(НомерКомплекта);
		Для Каждого СтрокаТаблицы Из ПараметрыПеретаскивания.Значение Цикл
			Если ИзменяемыеКомплекты.Найти(СтрокаТаблицы.НомерКомплекта) = Неопределено Тогда
				ИзменяемыеКомплекты.Добавить(СтрокаТаблицы.НомерКомплекта);
			КонецЕсли;
			
			ТекущиеДействия = РезультатОбратнойСвязи.Комплекты.Получить(НомерКомплекта);
			ДействиеПрошлогоДобавления = ТекущиеДействия.Получить(СтрокаТаблицы.Ссылка);
			Если ДействиеПрошлогоДобавления <> Неопределено И ДействиеПрошлогоДобавления = "Удален" Тогда
				// Действие "Удален" может быть только у автоматически добавленных документов
				ТекущиеДействия.Вставить(СтрокаТаблицы.Ссылка, "ДобавленАвтоматически");
			Иначе
				ТекущиеДействия.Вставить(СтрокаТаблицы.Ссылка, "ДобавленВручную");
			КонецЕсли;
			
			НоваяСтрока = ДанныеДокументов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.НомерКомплекта = НомерКомплекта;
			ДанныеДокументов.Удалить(СтрокаТаблицы);
		КонецЦикла;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		ДокументыДляПересчетаОшибок.ЗагрузитьЗначения(ИзменяемыеКомплекты);
		ПодключитьОбработчикОжидания("Подключаемый_НастроитьПанельИОшибкиКомплекта", 0.1, Истина);
	#Иначе
		Для Каждого НомерКомплекта Из ИзменяемыеКомплекты Цикл
			НастроитьПанельИОшибкиКомплекта(НомерКомплекта);
		КонецЦикла;
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаДопРеквизитов

&НаКлиенте
Процедура ТаблицаДопРеквизитовПриИзменении(Элемент)
	
	ДанныеЭтойСтроки = ТекущийЭлемент.ТекущиеДанные;
	ИмяРеквизитаШапки = СтрЗаменить(ТекущийЭлемент.ТекущийЭлемент.Имя, "ТаблицаДопРеквизитов", "");
	
	ДанныеЭтойСтроки.ДанныеЗаполнены = ПроверкаДанныеЗаполненыДопРеквизиты(ДанныеЭтойСтроки);
	
	ИмяРеквизита = ИмяРеквизитаДокументаПоИмениВШапке(ДанныеЭтойСтроки, ИмяРеквизитаШапки);
	СтрокаИзменений = Новый Структура("Ссылка, ИмяРеквизита, Значение",
		ДанныеЭтойСтроки.Ссылка,
		ИмяРеквизита,
		ДанныеЭтойСтроки[ИмяРеквизитаШапки]
	);
	ДанныеФоновыхОпераций.ИзмененияРеквизитовШапки.Добавить(СтрокаИзменений);
	
	Если ИмяРеквизитаШапки = "ПродавецОрганизация" Тогда
		ДанныеЭтойСтроки["БанковскийСчет"] = ПредопределенноеЗначение("Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка");
		ИмяРеквизитаСчет = ИмяРеквизитаДокументаПоИмениВШапке(ДанныеЭтойСтроки, "БанковскийСчет");
		СтрокаИзменений = Новый Структура("Ссылка, ИмяРеквизита, Значение",
			ДанныеЭтойСтроки.Ссылка,
			ИмяРеквизитаСчет,
			ПредопределенноеЗначение("Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка")
		);
		ДанныеФоновыхОпераций.ИзмененияРеквизитовШапки.Добавить(СтрокаИзменений);
	КонецЕсли;
	
	ЗапуститьФоновоеЗаданиеЗаписиРеквизитовШапки();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопРеквизитовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ТаблицаДопРеквизитовКартинкаОткрытия" Тогда
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопРеквизитовПриАктивизацииЯчейки(Элемент)
	ПодключитьОбработчикОжидания("Подключаемый_ПриАктивизацииЯчейкиДопРеквизитов", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопРеквизитовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопРеквизитовПередНачаломИзменения(Элемент, Отказ)
	
	Если ТекущаяСтрокаШапки <> Элементы.ТаблицаДопРеквизитов.ТекущаяСтрока
		Или ТекущееИмяРеквизита <> СтрЗаменить(Элементы.ТаблицаДопРеквизитов.ТекущийЭлемент.Имя, "ТаблицаДопРеквизитов", "") Тогда
		
		ОтключитьОбработчикОжидания("Подключаемый_ПриАктивизацииЯчейкиДопРеквизитов");
		Подключаемый_ПриАктивизацииЯчейкиДопРеквизитов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопРеквизитовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	СкрытьЗаполненныеСтрокиДопРеквизитовПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопРеквизитовДоговорОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОбработкаВыбораПоляТаблицаДопРеквизитов(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопРеквизитовБанковскийСчетОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОбработкаВыбораПоляТаблицаДопРеквизитов(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПоляТаблицаДопРеквизитов(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИмяРеквизита = СтрЗаменить(Элемент.Имя, "ТаблицаДопРеквизитов", "");
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Строка") Тогда
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")
			И ВыбранноеЗначение.Свойство("СозданВФормеБРД") Тогда
			
			ВыбранноеЗначение = ВыбранноеЗначение.Ссылка;
			СозданНовыйЭлемент = Истина;
		Иначе
			// Выбрали значение из выпадающего списка
			СозданНовыйЭлемент = Ложь;
		КонецЕсли;
		
		Если СозданНовыйЭлемент Тогда
			Если ДанныеФоновыхОпераций.ИзмененияСписковВыбораШапки.Найти(ИмяРеквизита) = Неопределено Тогда
				ДанныеФоновыхОпераций.ИзмененияСписковВыбораШапки.Добавить(ИмяРеквизита);
			КонецЕсли;
			ЗаполнениеСписковВыбораШапки();
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеЭтойСтроки = ТекущийЭлемент.ТекущиеДанные;
	ЗначениеПодходящейСтроки = ДанныеЭтойСтроки[ИмяРеквизита];
	
	ДополнительныеДанные = Новый Структура;
	ДополнительныеДанные.Вставить("РаспознанныйДокумент", ДанныеЭтойСтроки.Ссылка);
	ДополнительныеДанные.Вставить("ИмяТаблицы", "РеквизитыДокумента");
	ДополнительныеДанные.Вставить("ВидДоговора", ИсточникПоляДоговорВидДоговора);
	
	ИменаРеквизитов = ИмяРеквизитаБанковскийСчет(ДанныеЭтойСтроки);
	Если ИменаРеквизитов.Свойство(ИмяРеквизита) Тогда
		ИмяРеквизита = ИменаРеквизитов[ИмяРеквизита];
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("ИмяЭлемента", ИмяРеквизита);
	ПараметрыОткрытия.Вставить("ДополнительныеДанные", ДополнительныеДанные);
	ПараметрыОткрытия.Вставить("СоздаваемыйОбъект", ЗначениеПодходящейСтроки);
	
	ОткрытьФорму("Документ.РаспознанныйДокумент.Форма.СозданиеЭлементаСОтображениемКартинки", ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаНоменклатуры

&НаКлиенте
Процедура ТаблицаНоменклатурыПриИзменении(Элемент)
	
	Если ТекущийЭлемент.ТекущийЭлемент.Имя <> "ТаблицаНоменклатурыНоменклатура" Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЭтойСтроки = ТекущийЭлемент.ТекущиеДанные;
	ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.ТекущийЭлемент.Имя, "ТаблицаНоменклатуры", "");
	
	СтрокиТаблицы = Новый Массив;
	СтрокиТаблицы.Добавить(ТекущийЭлемент.ТекущаяСтрока);
	
	ПараметрыЗаписиРеквизитов = Новый Структура;
	ПараметрыЗаписиРеквизитов.Вставить("ТаблицаФормы", Элементы.ТаблицаНоменклатуры);
	ПараметрыЗаписиРеквизитов.Вставить("ДанныеИзменений", ДанныеФоновыхОпераций.ИзмененияНоменклатуры);
	ПараметрыЗаписиРеквизитов.Вставить("СтрокиТаблицы", СтрокиТаблицы);
	ПараметрыЗаписиРеквизитов.Вставить("ИмяРеквизита", ИмяРеквизита);
	ПараметрыЗаписиРеквизитов.Вставить("ЗначениеЗаполнения", ДанныеЭтойСтроки[ИмяРеквизита]);
	ПараметрыЗаписиРеквизитов.Вставить("ОбновитьЗначениеВЯчейке", Ложь);
	
	ЗаписатьНовоеЗначениеРеквизитаТаблицы(ПараметрыЗаписиРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ТаблицаНоменклатурыКартинкаОткрытия" Тогда
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНоменклатурыПриАктивизацииЯчейки(Элемент)
	ПодключитьОбработчикОжидания("Подключаемый_ПриАктивизацииЯчейкиНоменклатуры", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНоменклатурыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОбработкаВыбораПоляТаблицаНоменклатуры(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПоляТаблицаНоменклатуры(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИмяРеквизита = СтрЗаменить(Элемент.Имя, "ТаблицаНоменклатуры", "");
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Строка") Тогда
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")
			И ВыбранноеЗначение.Свойство("СозданВФормеБРД") Тогда
			
			ВыбранноеЗначение = ВыбранноеЗначение.Ссылка;
			СозданНовыйЭлемент = Истина;
		Иначе
			// Выбрали значение из выпадающего списка
			СозданНовыйЭлемент = Ложь;
		КонецЕсли;
		
		Если СозданНовыйЭлемент Тогда
			Если ДанныеФоновыхОпераций.ИзмененияСписковВыбораШапки.Найти(ИмяРеквизита) = Неопределено Тогда
				ДанныеФоновыхОпераций.ИзмененияСписковВыбораШапки.Добавить(ИмяРеквизита);
			КонецЕсли;
			ЗаполнениеСписковВыбораШапки();
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеЭтойСтроки = ТекущийЭлемент.ТекущиеДанные;
	ЗначениеПодходящейСтроки = ДанныеЭтойСтроки[ИмяРеквизита];
	
	ДополнительныеДанные = Новый Структура;
	ДополнительныеДанные.Вставить("РаспознанныйДокумент", ДанныеЭтойСтроки.Ссылка);
	ДополнительныеДанные.Вставить("ИмяТаблицы", "РеквизитыТабличныхЧастей");
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("ИмяЭлемента", ИмяРеквизита);
	ПараметрыОткрытия.Вставить("ДополнительныеДанные", ДополнительныеДанные);
	ПараметрыОткрытия.Вставить("СоздаваемыйОбъект", ЗначениеПодходящейСтроки);
	
	ОткрытьФорму("Документ.РаспознанныйДокумент.Форма.СозданиеЭлементаСОтображениемКартинки", ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаСумм

&НаКлиенте
Процедура ТаблицаСуммПриИзменении(Элемент)
	
	ДанныеЭтойСтроки = ТекущийЭлемент.ТекущиеДанные;
	ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.ТекущийЭлемент.Имя, "ТаблицаСумм", "");
	
	ЗаполнитьОшибкиСуммВСтроке(ДанныеЭтойСтроки);
	
	СтрокиТаблицы = Новый Массив;
	СтрокиТаблицы.Добавить(ТекущийЭлемент.ТекущаяСтрока);
	
	ПараметрыЗаписиРеквизитов = Новый Структура;
	ПараметрыЗаписиРеквизитов.Вставить("ТаблицаФормы", Элементы.ТаблицаСумм);
	ПараметрыЗаписиРеквизитов.Вставить("ДанныеИзменений", ДанныеФоновыхОпераций.ИзмененияТаблицыСумм);
	ПараметрыЗаписиРеквизитов.Вставить("СтрокиТаблицы", СтрокиТаблицы);
	ПараметрыЗаписиРеквизитов.Вставить("ИмяРеквизита", ИмяРеквизита);
	ПараметрыЗаписиРеквизитов.Вставить("ЗначениеЗаполнения", ДанныеЭтойСтроки[ИмяРеквизита]);
	ПараметрыЗаписиРеквизитов.Вставить("ОбновитьЗначениеВЯчейке", Ложь);
	
	ЗаписатьНовоеЗначениеРеквизитаТаблицы(ПараметрыЗаписиРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСуммВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ТаблицаСуммКартинкаОткрытия" Тогда
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСуммПриАктивизацииЯчейки(Элемент)
	ПодключитьОбработчикОжидания("Подключаемый_ПриАктивизацииЯчейкиСумм", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСуммПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	СкрытьЗаполненныеСтрокиСуммПриИзменении(Элемент);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИтого

&НаКлиенте
Процедура ТаблицаИтогоОдиночныеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОткрытьДокументИзСтроки(Элемент.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаИтогоКомплектыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОткрытьДокументИзСтроки(Элемент.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаИтогоПрикрепитьСканыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОткрытьДокументИзСтроки(Элемент.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаИтогоБезОбработкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОткрытьДокументИзСтроки(Элемент.ТекущиеДанные);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоказатьПодсказку(Команда)
	
	Элементы.ГруппаПодсказки.Видимость = Не Элементы.ГруппаПодсказки.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПодсказкуНажатие(Элемент)
	
	ЗакрытьПодсказкуНажатиеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗакрытьПодсказкуНажатиеНаСервере()
	
	Элементы.ГруппаПодсказки.Видимость = Ложь;
	ВидимостьПодсказок.Вставить(ТекущийШаг, Ложь);
	СохранитьВидимостьПодсказок();
	
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	ПерейтиНаШаг(Истина);
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	ПерейтиНаШаг(Ложь);
КонецПроцедуры

#Область ОбработчикиКомандФормыШапки

&НаКлиенте
Процедура СоздатьКонтрагентов(Команда)
	
	ИмяРеквизита = "Контрагент";
	
	ПараметрыСоздания = Новый Структура("ИдСтрокДокументов, РаспознанныеДокументы, ДополнительныеДанные, ИмяРеквизитаШапки",
		Новый Массив, Новый Массив, Новый Массив, ИмяРеквизита);
	
	Для Каждого ВыделеннаяСтрока Из Элементы.РеквизитыШапки.ВыделенныеСтроки Цикл
		ДанныеВыделеннойСтроки = Элементы.РеквизитыШапки.ДанныеСтроки(ВыделеннаяСтрока);
		Если Не ЗначениеЗаполнено(ДанныеВыделеннойСтроки[ИмяРеквизита]) Тогда
			ДанныеСтроки = Новый Структура("ТипДокумента, Направление", ДанныеВыделеннойСтроки.ТипДокумента, ДанныеВыделеннойСтроки.Направление);
			
			// Добавляем одновременно, поэтому индексы массивов будут совпадать
			ПараметрыСоздания.ИдСтрокДокументов.Добавить(ВыделеннаяСтрока);
			ПараметрыСоздания.РаспознанныеДокументы.Добавить(ДанныеВыделеннойСтроки.Ссылка);
			ПараметрыСоздания.ДополнительныеДанные.Добавить(ДанныеСтроки);
		КонецЕсли;
	КонецЦикла;
	
	СоздатьИЗаполнитьРеквизитыПоПараметрам(ПараметрыСоздания);
	
КонецПроцедуры

&НаСервере
Процедура СкрытьЗаполненнуюНоменклатуруНаСервере(Скрыть)
	
	Для Каждого ЭлементОформления Из УсловноеОформление.Элементы Цикл
		Если ЭлементОформления.Представление = "ВидимостьЗаполненнойНоменклатуры" Тогда
			ЭлементОформления.Использование = Скрыть;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ШапкаУстановитьВВыделенные(Команда)
	
	Для Каждого ВыделеннаяСтрока Из Элементы.РеквизитыШапки.ВыделенныеСтроки Цикл
		ДанныеЭтойСтроки = Элементы.РеквизитыШапки.ДанныеСтроки(ВыделеннаяСтрока);
		
		Если ОтметкаВШапкеДатаДокумента Тогда
			ДанныеЭтойСтроки.ДатаДокумента = ВШапкеДатаДокумента;
			СтрокаИзменений = Новый Структура("Ссылка, ИмяРеквизита, Значение",
				ДанныеЭтойСтроки.Ссылка,
				"ДатаДокумента",
				ВШапкеДатаДокумента
			);
			ДанныеФоновыхОпераций.ИзмененияРеквизитовШапки.Добавить(СтрокаИзменений);
		КонецЕсли;
		Если ОтметкаВШапкеКонтрагент Тогда
			ДанныеЭтойСтроки.Контрагент = ВШапкеКонтрагент;
			ИмяРеквизита = ИмяРеквизитаДокументаПоИмениВШапке(ДанныеЭтойСтроки, "Контрагент");
			СтрокаИзменений = Новый Структура("Ссылка, ИмяРеквизита, Значение",
				ДанныеЭтойСтроки.Ссылка,
				ИмяРеквизита,
				ВШапкеКонтрагент
			);
			ДанныеФоновыхОпераций.ИзмененияРеквизитовШапки.Добавить(СтрокаИзменений);
		КонецЕсли;
		Если ОтметкаВШапкеОрганизация Тогда
			ДанныеЭтойСтроки.Организация = ВШапкеОрганизация;
			ИмяРеквизита = ИмяРеквизитаДокументаПоИмениВШапке(ДанныеЭтойСтроки, "Организация");
			СтрокаИзменений = Новый Структура("Ссылка, ИмяРеквизита, Значение",
				ДанныеЭтойСтроки.Ссылка,
				ИмяРеквизита,
				ВШапкеОрганизация
			);
			ДанныеФоновыхОпераций.ИзмененияРеквизитовШапки.Добавить(СтрокаИзменений);
		КонецЕсли;
	КонецЦикла;
	
	ЗапуститьФоновоеЗаданиеЗаписиРеквизитовШапки();
	
	ОтметкаВШапкеДатаДокумента = Ложь;
	ОтметкаВШапкеКонтрагент = Ложь;
	ОтметкаВШапкеОрганизация = Ложь;
	Элементы.ГруппаЗаполнениеШапки.Скрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЗаполнениеШапки(Команда)
	
	Элементы.ГруппаЗаполнениеШапки.Показать();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормыКомплекты

&НаКлиенте
Процедура ПерепроверитьКомплекты(Команда)
	ПерепроверитьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура УдалитьКомплект(Команда)
	
	ИмяТаблицы = СтрЗаменить(Команда.Имя, "УдалитьКомплект", "");
	НомерКомплекта = Число(СтрЗаменить(ИмяТаблицы, "Комплект", ""));
	
	СтрокиКомплекта = ДанныеДокументов.НайтиСтроки(Новый Структура("НомерКомплекта", НомерКомплекта));
	Если СтрокиКомплекта.Количество() = 0 Тогда
		УдалитьКомплектНаСервере(НомерКомплекта, Ложь, Истина);
	Иначе
		ДополнительныеПараметры = Новый Структура("НомерКомплекта", НомерКомплекта);
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеВопросаУдаленияКомплекта", ЭтотОбъект, ДополнительныеПараметры);
		
		ТекстВопроса = НСтр("ru = 'Удалить комплект?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВопросаУдаленияКомплекта(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		УдалитьКомплектНаСервере(ДополнительныеПараметры.НомерКомплекта, Ложь, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументыКомплекта(Команда)
	
	Позиция_ = СтрНайти(Команда.Имя, "_", НаправлениеПоиска.СКонца);
	ИмяТаблицы = Сред(Команда.Имя, Позиция_ + 1);
	
	СтрокаПоступленияРеализации = Сред(Команда.Имя, 1, Позиция_ - 1);
	СтрокаПоступленияРеализации = СтрЗаменить(СтрокаПоступленияРеализации, "СчетНаОплату", "");
	СтрокаПоступленияРеализации = СтрЗаменить(СтрокаПоступленияРеализации, "СчетФактура", "");
	
	ПараметрыОперации = РаспознаваниеДокументовКомплектыКлиентСервер.ТипДокументаИВидОперации(СтрокаПоступленияРеализации);
	ДанныеОбработки = РаспознаваниеДокументовКомплектыКлиентСервер.НовыеДанныеОбработкиКомплектов();
	ДанныеОбработки.РезультатОбратнойСвязи = РезультатОбратнойСвязи;
	ОткрытиеФормыДокумента(ЭтотОбъект, ПараметрыОперации, ИмяТаблицы, ДанныеОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура УбратьЛишниеИзКомплекта(Команда)
	ИмяТаблицы = СтрЗаменить(Команда.Имя, "УбратьЛишниеИзКомплекта", "");
	УбратьЛишниеИзКомплектаНаСервере(ИмяТаблицы);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормыДопРеквизитов

&НаКлиенте
Процедура ПоказатьЗаполнениеДопРеквизитов(Команда)
	
	Элементы.ГруппаЗаполнениеДопРеквизитов.Показать();
	
КонецПроцедуры

&НаКлиенте
Процедура ДопРеквизитыУстановитьВВыделенные(Команда)
	
	Для Каждого ВыделеннаяСтрока Из Элементы.ТаблицаДопРеквизитов.ВыделенныеСтроки Цикл
		ДанныеЭтойСтроки = Элементы.ТаблицаДопРеквизитов.ДанныеСтроки(ВыделеннаяСтрока);
		
		Если ОтметкаДопРеквизитыСклад
			И ДанныеЭтойСтроки.ТипДокумента <> ПредопределенноеЗначение("Перечисление.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг")
			И ДанныеЭтойСтроки.ТипДокумента <> ПредопределенноеЗначение("Перечисление.ТипыДокументовРаспознаваниеДокументов.СчетНаОплату")
			Тогда
			ДанныеЭтойСтроки.Склад = ДопРеквизитыСклад;
			СтрокаИзменений = Новый Структура("Ссылка, ИмяРеквизита, Значение",
				ДанныеЭтойСтроки.Ссылка,
				"Склад",
				ДопРеквизитыСклад
			);
			ДанныеФоновыхОпераций.ИзмененияРеквизитовШапки.Добавить(СтрокаИзменений);
		КонецЕсли;
		Если ОтметкаДопРеквизитыСуммаВключаетНДС
			И ДанныеЭтойСтроки.ТипДокумента <> ПредопределенноеЗначение("Перечисление.ТипыДокументовРаспознаваниеДокументов.УПД")
			И ДанныеЭтойСтроки.ТипДокумента <> ПредопределенноеЗначение("Перечисление.ТипыДокументовРаспознаваниеДокументов.ТОРГ12")
			И ДанныеЭтойСтроки.ТипДокумента <> ПредопределенноеЗначение("Перечисление.ТипыДокументовРаспознаваниеДокументов.СчетФактура")
			Тогда
			ДанныеЭтойСтроки.СуммаВключаетНДС = ДопРеквизитыСуммаВключаетНДС;
			СтрокаИзменений = Новый Структура("Ссылка, ИмяРеквизита, Значение",
				ДанныеЭтойСтроки.Ссылка,
				"СуммаВключаетНДС",
				ДопРеквизитыСуммаВключаетНДС
			);
			ДанныеФоновыхОпераций.ИзмененияРеквизитовШапки.Добавить(СтрокаИзменений);
		КонецЕсли;
		Если ОтметкаДопРеквизитыСрокОплаты
			И ДанныеЭтойСтроки.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовРаспознаваниеДокументов.СчетНаОплату")
			Тогда
			ДанныеЭтойСтроки.СрокОплаты = ДопРеквизитыСрокОплаты;
			СтрокаИзменений = Новый Структура("Ссылка, ИмяРеквизита, Значение",
				ДанныеЭтойСтроки.Ссылка,
				"СрокОплаты",
				ДопРеквизитыСрокОплаты
			);
			ДанныеФоновыхОпераций.ИзмененияРеквизитовШапки.Добавить(СтрокаИзменений);
		КонецЕсли;
		Если ОтметкаДопРеквизитыПродавецОрганизация
			И ДанныеЭтойСтроки.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовРаспознаваниеДокументов.СчетНаОплату")
			И ДанныеЭтойСтроки.Направление = ПредопределенноеЗначение("Перечисление.НаправленияРаспознанногоДокумента.Исходящий")
			Тогда
			ДанныеЭтойСтроки.ПродавецОрганизация = ДопРеквизитыПродавецОрганизация;
			СтрокаИзменений = Новый Структура("Ссылка, ИмяРеквизита, Значение",
				ДанныеЭтойСтроки.Ссылка,
				"ПродавецОрганизация",
				ДопРеквизитыПродавецОрганизация
			);
			ДанныеФоновыхОпераций.ИзмененияРеквизитовШапки.Добавить(СтрокаИзменений);
		КонецЕсли;
		Если ОтметкаДопРеквизитыВидСкидки
			И ДанныеЭтойСтроки.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовРаспознаваниеДокументов.СчетНаОплату")
			Тогда
			ДанныеЭтойСтроки.ВидСкидки = ДопРеквизитыВидСкидки;
			СтрокаИзменений = Новый Структура("Ссылка, ИмяРеквизита, Значение",
				ДанныеЭтойСтроки.Ссылка,
				"ВидСкидки",
				ДопРеквизитыВидСкидки
			);
			ДанныеФоновыхОпераций.ИзмененияРеквизитовШапки.Добавить(СтрокаИзменений);
		КонецЕсли;
	КонецЦикла;
	
	ЗапуститьФоновоеЗаданиеЗаписиРеквизитовШапки();
	
	ОтметкаДопРеквизитыСклад = Ложь;
	ОтметкаДопРеквизитыСуммаВключаетНДС = Ложь;
	ОтметкаДопРеквизитыСрокОплаты = Ложь;
	ОтметкаДопРеквизитыПродавецОрганизация = Ложь;
	ОтметкаДопРеквизитыВидСкидки = Ложь;
	Элементы.ГруппаЗаполнениеДопРеквизитов.Скрыть();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормыНоменклатура

&НаКлиенте
Процедура ПоказатьЗаполнениеРеквизитовНоменклатуры(Команда)
	
	Элементы.ГруппаЗаполнениеРеквизитовНоменклатуры.Показать();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВыделеннуюНоменклатуру(Команда)
	
	КлючСоздания = "ИдентификаторИсходнойСтроки, Наименование, Артикул, Родитель, ВидНоменклатуры, СтавкаНДС, ЕдиницаИзмерения, НоменклатурнаяГруппа";
	
	ПараметрыСоздаваемойНоменклатуры = Новый Массив;
	
	Для Каждого ВыбраннаяСтрока Из Элементы.ТаблицаНоменклатуры.ВыделенныеСтроки Цикл
		
		Данные = ТаблицаНоменклатуры.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если ЗначениеЗаполнено(Данные.Номенклатура)
			Или Не ЗначениеЗаполнено(Данные.Ссылка) Тогда
			
			Продолжить;
		КонецЕсли;
		
		ПараметрыСоздания = Новый Структура(КлючСоздания);
		ЗаполнитьЗначенияСвойств(ПараметрыСоздания, Данные);
		ПараметрыСоздания.ИдентификаторИсходнойСтроки = ВыбраннаяСтрока;
		ПараметрыСоздания.Вставить("Ссылка");
		
		ПараметрыСоздаваемойНоменклатуры.Добавить(ПараметрыСоздания);
		
	КонецЦикла;
	
	ВыполнитьСозданиеНоменклатуры(ПараметрыСоздаваемойНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураУстановитьВВыделенные(Команда)
	
	Для Каждого ВыделеннаяСтрока Из Элементы.ТаблицаНоменклатуры.ВыделенныеСтроки Цикл
		ДанныеВыделеннойСтроки = Элементы.ТаблицаНоменклатуры.ДанныеСтроки(ВыделеннаяСтрока);
		Если ЗначениеЗаполнено(ДанныеВыделеннойСтроки.Номенклатура)
			Или Не ЗначениеЗаполнено(ДанныеВыделеннойСтроки.Ссылка) Тогда
			
			Продолжить;
		КонецЕсли;
		
		Если ОтметкаНоменклатураРодитель Тогда
			ДанныеВыделеннойСтроки.Родитель = НоменклатураРодитель;
		КонецЕсли;
		Если ОтметкаНоменклатураВидНоменклатуры Тогда
			ДанныеВыделеннойСтроки.ВидНоменклатуры = НоменклатураВидНоменклатуры;
		КонецЕсли;
		Если ОтметкаНоменклатураСтавкаНДС Тогда
			ДанныеВыделеннойСтроки.СтавкаНДС = НоменклатураСтавкаНДС;
		КонецЕсли;
		Если ОтметкаНоменклатураЕдиницаИзмерения Тогда
			ДанныеВыделеннойСтроки.ЕдиницаИзмерения = НоменклатураЕдиницаИзмерения;
		КонецЕсли;
		Если ОтметкаНоменклатураНоменклатурнаяГруппа Тогда
			ДанныеВыделеннойСтроки.НоменклатурнаяГруппа = НоменклатураНоменклатурнаяГруппа;
		КонецЕсли;
	КонецЦикла;
	
	ОтметкаНоменклатураРодитель = Ложь;
	ОтметкаНоменклатураВидНоменклатуры = Ложь;
	ОтметкаНоменклатураСтавкаНДС = Ложь;
	ОтметкаНоменклатураЕдиницаИзмерения = Ложь;
	ОтметкаНоменклатураНоменклатурнаяГруппа = Ложь;
	Элементы.ГруппаЗаполнениеРеквизитовНоменклатуры.Скрыть();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормыТаблицыСумм

#КонецОбласти

#Область ОбработчикиКомандФормыИтого

&НаКлиенте
Процедура СоздатьДокументыИКомплекты(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеВопросаСозданияДокументов", ЭтотОбъект);
	
	ТекстВопроса = НСтр("ru = 'Создать документы и комплекты?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ДокументHTML(ЭлементФормы)
	
	ПолеHTML = ЭлементФормы.Документ;
	Если ПолеHTML = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДокументСкан = Неопределено;
	#Если ВебКлиент Тогда
		ДокументСкан = ПолеHTML.defaultView.app;
	#Иначе
		ДокументСкан = ПолеHTML.app;
	#КонецЕсли
	
	Возврат ДокументСкан;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьВидимостьПодсказок()
	
	СохраненныеНастройки = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(
		"Обработка.ГрупповаяОбработкаРаспознанныхДокументов.Форма.ГрупповаяОбработка", "ВидимостьПодсказок");
	
	Если ТипЗнч(СохраненныеНастройки) = Тип("Структура") Тогда
		ВидимостьПодсказок = СохраненныеНастройки;
	Иначе
		ВидимостьПодсказок = Новый Структура;
		ИменаШагов = ПолучитьИменаШагов();
		Для Каждого Имя Из ИменаШагов Цикл
			ВидимостьПодсказок.Вставить(Имя, Истина);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьВидимостьПодсказок()
	
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(
		"Обработка.ГрупповаяОбработкаРаспознанныхДокументов.Форма.ГрупповаяОбработка", "ВидимостьПодсказок", ВидимостьПодсказок);
	
КонецПроцедуры

&НаСервере
Процедура ВыделитьШагТекущейСтраницы()
	
	ПараметрыПодсказки = ПараметрыПодсказкиШага(ТекущийШаг, ВидимостьПодсказок);
	ТекстПодсказкиШага = ПараметрыПодсказки.Текст;
	Элементы.ГруппаПодсказки.Видимость = ПараметрыПодсказки.Видимость;
	Элементы.ТекстПодсказкиШага.Высота = ПараметрыПодсказки.Высота;
	
	Для Каждого ДекорацияФормы Из Элементы.ГруппаШаги.ПодчиненныеЭлементы Цикл
		ИмяШага = СтрЗаменить(ДекорацияФормы.Имя, "КартинкаШаг", "");
		ДекорацияФормы.Видимость = (ИмяШага = ТекущийШаг);
	КонецЦикла;
	
	Элементы.НадписьОшибкаТЧ.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыПодсказкиШага(ИмяШага, ВидимостьПодсказок)
	
	Результат = Новый Структура("Видимость, Текст, Высота", Истина, "", 2);
	
	Если ВидимостьПодсказок.Свойство(ИмяШага) Тогда
		Результат.Видимость = ВидимостьПодсказок[ИмяШага];
	КонецЕсли;
	
	ШрифтПодсказок = Новый Шрифт(, 11);
	Если ИмяШага = "Шапка" Тогда
		Результат.Высота = 3;
		Результат.Текст = Новый ФорматированнаяСтрока(НСтр("ru = 'Проверьте и заполните основные реквизиты документов: Номер, Дата, Контрагент, Организация и Сумма. В первую очередь обращайте внимание на те реквизиты, которые отмечены красным. Если выделить несколько распознанных документов в таблице, то для них всех можно создать новых контрагентов, а также заполнить совпадающие реквизиты.'"), ШрифтПодсказок);
	ИначеЕсли ИмяШага = "Дубли" Тогда
		Результат.Высота = 3;
		Результат.Текст = Новый ФорматированнаяСтрока(НСтр("ru = 'Были обнаружены несколько дублей среди распознанных документов. Просмотрите их и выберите основной экземпляр с наилучшим качеством. Остальные дубли будут удалены. Уберите из дублей экземпляры, относящиеся к другим документам. Удалите всю группу дублей, если не требуется ее обрабатывать.'"), ШрифтПодсказок);
	ИначеЕсли ИмяШага = "Комплекты" Тогда
		Результат.Высота = 3;
		Результат.Текст = Новый ФорматированнаяСтрока(НСтр("ru = 'Комплект документов – это группа документов, отражающих одну хозяйственную операцию. Объедините в комплект документы, которые относятся к одной операции, тем самым вы сможете сократить число правок номенклатуры и других реквизитов на следующих шагах группового ввода документов. Учетные документы могут быть созданы для каждого отдельного комплекта, либо для всех сразу на последнем шаге обработки.'"), ШрифтПодсказок);
	ИначеЕсли ИмяШага = "ДопРеквизиты" Тогда
		Результат.Высота = 3;
		Результат.Текст = Новый ФорматированнаяСтрока(НСтр("ru = 'Проверьте и заполните реквизиты: Договор, Склад, Банковский счет, Вид скидки и прочие.  В первую очередь обращайте внимание на реквизиты, выделенные красным. Используйте заполнение одинаковых реквизитов сразу для нескольких выделенных строк. Серые поля в таблице недоступны для редактирования.'"), ШрифтПодсказок);
	ИначеЕсли ИмяШага = "Номенклатура" Тогда
		Результат.Высота = 3;
		Результат.Текст = Новый ФорматированнаяСтрока(НСтр("ru = 'Проверьте и заполните номенклатуру и связанные с ней реквизиты. Заполняйте одинаковые значения реквизитов сразу для нескольких выделенных строк. По кнопке «Создать выделенные» можно быстро добавить новую номенклатуру для строк, где нет сопоставления с номенклатурой из базы.'"), ШрифтПодсказок);
	ИначеЕсли ИмяШага = "Суммы" Тогда
		Результат.Текст = Новый ФорматированнаяСтрока(НСтр("ru = 'Проверьте и заполните суммы из таблиц документов. Красным выделены значения, которые не стыкуются для одной строки. Также здесь могут быть заполнены Страна происхождения и ГТД.'"), ШрифтПодсказок);
	ИначеЕсли ИмяШага = "Итого" Тогда
		Результат.Текст = Новый ФорматированнаяСтрока(НСтр("ru = 'Проверьте изменения, которые будут внесены в базу данных. При необходимости вы можете вернуться на предыдущие шаги обработки.'"), ШрифтПодсказок);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИменаШагов()
	
	ИменаШагов = Новый Массив;
	ИменаШагов.Добавить("Шапка");
	ИменаШагов.Добавить("Дубли");
	ИменаШагов.Добавить("Комплекты");
	ИменаШагов.Добавить("ДопРеквизиты");
	ИменаШагов.Добавить("Номенклатура");
	ИменаШагов.Добавить("Суммы");
	ИменаШагов.Добавить("Итого");
	
	Возврат ИменаШагов;
	
КонецФункции

&НаКлиенте
Процедура ПерейтиНаШаг(Вперед)
	
	ИменаШагов = ПолучитьИменаШагов();
	ИдШага = ИменаШагов.Найти(ТекущийШаг);
	Если Вперед Тогда
		ИдШага = ИдШага + 1;
	Иначе
		ИдШага = ИдШага - 1;
	КонецЕсли;
	
	ПерейтиНаСтраницу(ИменаШагов[ИдШага], Вперед);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницу(ИмяШага, Вперед)
	
	Если Вперед Тогда
		Если ИмяШага = "Шапка" Тогда
			
			ТекущийШаг = ИмяШага;
			Элементы.СтраницыШаги.ТекущаяСтраница = Элементы.СтраницаДляТаблиц;
			Элементы.СтраницыТаблиц.ТекущаяСтраница = Элементы.СтраницаШапка;
			ВыделитьШагТекущейСтраницы();
			
		ИначеЕсли ИмяШага = "Дубли" Тогда
			
			КоличествоНеЗаполнено = ПодсчетНезаполненныхСтрокШапки();
			ПараметрыОповещения = Новый Структура("ИмяШага", ИмяШага);
			Оповещение = Новый ОписаниеОповещения("ПерейтиНаСтраницуДублиЗавершение", ЭтотОбъект, ПараметрыОповещения);
			Если КоличествоНеЗаполнено > 0 Тогда
				
				ЖирныйШрифт = Новый Шрифт(, , Истина);
				
				Если КоличествоНеЗаполнено = 1 Тогда
					ТекстДокумент = НСтр("ru = ' распознанном документе '");
				Иначе
					ТекстДокумент = НСтр("ru = ' распознанных документах '");
				КонецЕсли;
				
				ТекстВопроса = Новый ФорматированнаяСтрока(НСтр("ru = 'В '"),
					Новый ФорматированнаяСтрока(Строка(КоличествоНеЗаполнено), ЖирныйШрифт),
					ТекстДокумент + НСтр("ru = 'есть незаполненные поля, поэтому они не будут обработаны. Продолжить?'")
				);
				
				ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			Иначе
				ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.Да);
			КонецЕсли;
			
		ИначеЕсли ИмяШага = "Комплекты" Тогда
			
			КоличествоНеЗаполнено = ПодсчетНезаполненныхСтрокДублей();
			ПараметрыОповещения = Новый Структура("ИмяШага", ИмяШага);
			Оповещение = Новый ОписаниеОповещения("ПерейтиНаСтраницуКомплектыЗавершение", ЭтотОбъект, ПараметрыОповещения);
			Если КоличествоНеЗаполнено > 0 Тогда
				
				ЖирныйШрифт = Новый Шрифт(, , Истина);
				
				Если КоличествоНеЗаполнено = 1 Тогда
					ТекстДубль = НСтр("ru = ' дубля '");
				Иначе
					ТекстДубль = НСтр("ru = ' дублей '");
				КонецЕсли;
				
				ТекстВопроса = Новый ФорматированнаяСтрока(НСтр("ru = 'Для '"),
					Новый ФорматированнаяСтрока(Строка(КоличествоНеЗаполнено), ЖирныйШрифт),
					ТекстДубль + НСтр("ru = 'не выбран основной документ. Их можно выбрать автоматически. Продолжить?'")
				);
				
				ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			Иначе
				ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.Да);
			КонецЕсли;
			
		ИначеЕсли ИмяШага = "ДопРеквизиты" Тогда
			Элементы.СтраницыШаги.ТекущаяСтраница = Элементы.СтраницаДляТаблиц;
			Элементы.СтраницыТаблиц.ТекущаяСтраница = Элементы.СтраницаДопРеквизиты;
			
			ПерейтиНаСтраницуДопРеквизитыНаСервере(ИмяШага);
		ИначеЕсли ИмяШага = "Номенклатура" Тогда
			Элементы.СтраницыШаги.ТекущаяСтраница = Элементы.СтраницаДляТаблиц;
			Элементы.СтраницыТаблиц.ТекущаяСтраница = Элементы.СтраницаНоменклатура;
			
			ПерейтиНаСтраницуНоменклатураНаСервере(ИмяШага);
		ИначеЕсли ИмяШага = "Суммы" Тогда
			Элементы.СтраницыШаги.ТекущаяСтраница = Элементы.СтраницаДляТаблиц;
			Элементы.СтраницыТаблиц.ТекущаяСтраница = Элементы.СтраницаПроверкиСуммы;
			
			ПерейтиНаСтраницуСуммНаСервере(ИмяШага);
		ИначеЕсли ИмяШага = "Итого" Тогда
			Элементы.СтраницыШаги.ТекущаяСтраница = Элементы.СтраницаИтого;
			
			ПерейтиНаСтраницуИтогоНаСервере(ИмяШага);
		КонецЕсли;
			
	Иначе
		
		// при шаге назад с последней страницы сделать видимость у кнопки Далее
		ТекущийШаг = ИмяШага;
		Если ИмяШага = "Шапка" Тогда
			Элементы.СтраницыШаги.ТекущаяСтраница = Элементы.СтраницаДляТаблиц;
			Элементы.СтраницыТаблиц.ТекущаяСтраница = Элементы.СтраницаШапка;
			Элементы.КнопкаНазад.Видимость = Ложь;
		ИначеЕсли ИмяШага = "Дубли" Тогда
			Элементы.СтраницаДубли.Видимость = Истина; // чтобы обновить видимость
			Элементы.СтраницыШаги.ТекущаяСтраница = Элементы.СтраницаДубли;
		ИначеЕсли ИмяШага = "Комплекты" Тогда
			Элементы.СтраницыШаги.ТекущаяСтраница = Элементы.СтраницаКомплекты;
		ИначеЕсли ИмяШага = "ДопРеквизиты" Тогда
			Элементы.СтраницыШаги.ТекущаяСтраница = Элементы.СтраницаДляТаблиц;
			Элементы.СтраницыТаблиц.ТекущаяСтраница = Элементы.СтраницаДопРеквизиты;
			
			ПерейтиНаСтраницуДопРеквизитыНаСервере(ИмяШага);
		ИначеЕсли ИмяШага = "Номенклатура" Тогда
			Элементы.СтраницыШаги.ТекущаяСтраница = Элементы.СтраницаДляТаблиц;
			Элементы.СтраницыТаблиц.ТекущаяСтраница = Элементы.СтраницаНоменклатура;
			
			ПерейтиНаСтраницуНоменклатураНаСервере(ИмяШага);
		ИначеЕсли ИмяШага = "Суммы" Тогда
			Элементы.СтраницыШаги.ТекущаяСтраница = Элементы.СтраницаДляТаблиц;
			Элементы.СтраницыТаблиц.ТекущаяСтраница = Элементы.СтраницаПроверкиСуммы;
			
			ПерейтиНаСтраницуСуммНаСервере(ИмяШага);
		КонецЕсли;
		
		ВыделитьШагТекущейСтраницы();
	КонецЕсли;
	
КонецПроцедуры

#Область СлужебныеПроцедурыШапки

#Область МассовоеСозданиеДляШапки

&НаКлиенте
Процедура СоздатьИЗаполнитьРеквизитыПоПараметрам(ПараметрыСоздания)
	
	ДанныеСоздания = ДанныеДляСозданияРеквизитовПоПараметрам(ПараметрыСоздания);
	
	ПараметрыСоздания = Новый Структура;
	ПараметрыСоздания.Вставить("ДанныеСоздания", ДанныеСоздания);
	ОткрытьФорму("Обработка.ГрупповаяОбработкаРаспознанныхДокументов.Форма.СозданиеКонтрагентов", ПараметрыСоздания, ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СозданиеКонтрагентов(ПараметрыСоздания)
	
	ТекущийИдСоздания = 0;
	ПараметрыСоздания.Вставить("ИдСтрокиСоздания", ТекущийИдСоздания);
	КоличествоСозданий = ПараметрыСоздания.ДанныеСоздания.Количество();
	
	НовыеКонтрагенты = СоздатьОставшихсяКонтрагентовНаСервере(ПараметрыСоздания);
	
	Пока КоличествоСозданий > ТекущийИдСоздания Цикл
		
		ДанныеКонтрагента = ПараметрыСоздания.ДанныеСоздания[ТекущийИдСоздания];
		КонтрагентСсылка = НовыеКонтрагенты[ТекущийИдСоздания];
		
		Для Каждого ИдСтроки Из ДанныеКонтрагента.ИдСтрокДокументов Цикл
			СтрокаТаблицы = РеквизитыШапки.НайтиПоИдентификатору(ИдСтроки);
			СтрокаТаблицы.Контрагент = КонтрагентСсылка;
			СтрокаТаблицы.ДанныеЗаполнены = ПроверкаДанныеЗаполненыШапка(СтрокаТаблицы);
			
			ИменаРеквизитов = РаспознаваниеДокументовСлужебныйКлиентСервер.ИменаРеквизитовКонтрагентИОрганизация(СтрокаТаблицы);
			СтрокаИзменений = Новый Структура("Ссылка, ИмяРеквизита, Значение",
				СтрокаТаблицы.Ссылка,
				ИменаРеквизитов.Контрагент,
				КонтрагентСсылка
			);
			ДанныеФоновыхОпераций.ИзмененияРеквизитовШапки.Добавить(СтрокаИзменений);
		КонецЦикла;
		
		ТекущийИдСоздания = ТекущийИдСоздания + 1;
	КонецЦикла;
	
	ЗапуститьФоновоеЗаданиеЗаписиРеквизитовШапки();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеДляСозданияРеквизитовПоПараметрам(ПараметрыСоздания)
	
	ТаблицаОбхода = Новый ТаблицаЗначений;
	ТаблицаОбхода.Колонки.Добавить("Ссылка");
	ТаблицаОбхода.Колонки.Добавить("Реквизит", Новый ОписаниеТипов("Строка"));
	ТаблицаОбхода.Колонки.Добавить("ИмяРеквизита", Новый ОписаниеТипов("Строка"));
	
	МаксИдДокумента = ПараметрыСоздания.РаспознанныеДокументы.Количество() - 1;
	Ид = -1;
	Пока Ид < МаксИдДокумента Цикл
		Ид = Ид + 1;
		
		ДанныеДокумента = ПараметрыСоздания.ДополнительныеДанные[Ид];
		
		ИменаРеквизитов = РаспознаваниеДокументовСлужебныйКлиентСервер.ИменаРеквизитовКонтрагентИОрганизация(ДанныеДокумента);
		ИмяОсновногоРеквизита = ИменаРеквизитов[ПараметрыСоздания.ИмяРеквизитаШапки];
		
		СвязанныеКолонки = РаспознаваниеДокументовСлужебный.ПараметрыСозданияНовогоЭлемента(
			ИмяОсновногоРеквизита,
			ДанныеДокумента.ТипДокумента,
			ДанныеДокумента.Направление
		);
		
		Для Каждого ПараметрыКолонки Из СвязанныеКолонки Цикл
			Если ПараметрыКолонки.Реквизит = "ЮридическоеФизическоеЛицо" Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаОбхода = ТаблицаОбхода.Добавить();
			СтрокаОбхода.Ссылка = ПараметрыСоздания.РаспознанныеДокументы[Ид];
			СтрокаОбхода.Реквизит = ПараметрыКолонки.Реквизит;
			СтрокаОбхода.ИмяРеквизита = ПараметрыКолонки.ИмяРеквизита;
		КонецЦикла;
	КонецЦикла;
	
	Если ТаблицаОбхода.Количество() = 0 Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ТаблицаОбхода.Сортировать("Реквизит, ИмяРеквизита");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РаспознанныеДокументы", ПараметрыСоздания.РаспознанныеДокументы);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаспознанныйДокумент.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ТолькоСсылки
	|ИЗ
	|	Документ.РаспознанныйДокумент КАК РаспознанныйДокумент
	|ГДЕ
	|	РаспознанныйДокумент.Ссылка В(&РаспознанныеДокументы)
	|
	|";
	
	ИтоговаяЧастьЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТолькоСсылки.Ссылка КАК Ссылка,
	|	&РаспознанныйТекстШаблон
	|ИЗ
	|	ТолькоСсылки КАК ТолькоСсылки";
	
	ЭтотРеквизит = "";
	ЭтоИмяРеквизита = "";
	Ид = 0;
	
	ОбъединитьЗапросы = Ложь;
	
	ПоследняяСтрокаПройдена = Ложь;
	КоличествоСтрок = ТаблицаОбхода.Количество();
	ИдСтроки = -1;
	Пока ИдСтроки < КоличествоСтрок Цикл
		ИдСтроки = ИдСтроки + 1;
		Если ИдСтроки = КоличествоСтрок Тогда
			ПоследняяСтрокаПройдена = Истина;
		Иначе
			СтрокаОбхода = ТаблицаОбхода[ИдСтроки];
		КонецЕсли;
		
		Если ПоследняяСтрокаПройдена
			Или ЭтотРеквизит <> СтрокаОбхода.Реквизит
			Или ЭтоИмяРеквизита <> СтрокаОбхода.ИмяРеквизита Тогда
			
			Если ЭтотРеквизит = "" Тогда
				ПодходящиеСсылки = Новый Массив;
			Иначе
				
				ШаблонЗапроса = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	РаспознанныйДокументРеквизитыДокумента.Ссылка КАК Ссылка,
				|	РаспознанныйДокументРеквизитыДокумента.ИмяРеквизита КАК ИмяРеквизита,
				|	РаспознанныйДокументРеквизитыДокумента.РаспознанныйТекст КАК РаспознанныйТекст
				|ПОМЕСТИТЬ ДанныеШаблон
				|ИЗ
				|	Документ.РаспознанныйДокумент.РеквизитыДокумента КАК РаспознанныйДокументРеквизитыДокумента
				|ГДЕ
				|	РаспознанныйДокументРеквизитыДокумента.Ссылка В (&СсылкиШаблон)
				|	И РаспознанныйДокументРеквизитыДокумента.ИмяРеквизита = &ИмяРеквизитаШаблон
				|
				|";
				
				СсылкиШаблон = "Ссылки" + XMLСтрока(Ид);
				ДанныеШаблон = "Данные" + ЭтотРеквизит;
				Запрос.УстановитьПараметр(СсылкиШаблон, ПодходящиеСсылки);
				
				ЧастьЗапроса = СтрЗаменить(ШаблонЗапроса, "СсылкиШаблон", СсылкиШаблон);
				ЧастьЗапроса = СтрЗаменить(ЧастьЗапроса, "&ИмяРеквизитаШаблон", """"+ЭтоИмяРеквизита+"""");
				
				Если ОбъединитьЗапросы Тогда
					ЧастьЗапроса = "ОБЪЕДИНИТЬ ВСЕ
					|
					|" + ЧастьЗапроса;
					ЧастьЗапроса = СтрЗаменить(ЧастьЗапроса, " РАЗРЕШЕННЫЕ", "");
					ЧастьЗапроса = СтрЗаменить(ЧастьЗапроса, "ПОМЕСТИТЬ ДанныеШаблон", "");
				Иначе
					ЧастьЗапроса = ";
					|"
					+ СтрЗаменить(ЧастьЗапроса, "ДанныеШаблон", ДанныеШаблон);
					
					ИтоговаяЧастьЗапроса = СтрЗаменить(ИтоговаяЧастьЗапроса, "&РаспознанныйТекстШаблон",
					ДанныеШаблон+".РаспознанныйТекст КАК "+ЭтотРеквизит+",
					|	&РаспознанныйТекстШаблон")
					+
					"
					|		ЛЕВОЕ СОЕДИНЕНИЕ "+ДанныеШаблон+" КАК "+ДанныеШаблон+"
					|		ПО ТолькоСсылки.Ссылка = "+ДанныеШаблон+".Ссылка";
				КонецЕсли;
				
				Запрос.Текст = Запрос.Текст + ЧастьЗапроса;
				Если ПоследняяСтрокаПройдена Тогда
					Прервать;
				КонецЕсли;
				
				ОбъединитьЗапросы = (ЭтотРеквизит = СтрокаОбхода.Реквизит); // Следующий Запрос по такому же реквизиту (Название, ИНН, КПП)
				
				Ид = Ид + 1;
				ПодходящиеСсылки = Новый Массив;
			КонецЕсли;
			
			ЭтотРеквизит = СтрокаОбхода.Реквизит;
			ЭтоИмяРеквизита = СтрокаОбхода.ИмяРеквизита;
		КонецЕсли;
		
		ПодходящиеСсылки.Добавить(СтрокаОбхода.Ссылка);
		
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + ";
	|"
	+ СтрЗаменить(
		ИтоговаяЧастьЗапроса,
		",
		|	&РаспознанныйТекстШаблон",
		""
	);
	
	// Пример результирующего текста:
	//
	//	ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//		РаспознанныйДокумент.Ссылка КАК Ссылка
	//	ПОМЕСТИТЬ ТолькоСсылки
	//	ИЗ
	//		Документ.РаспознанныйДокумент КАК РаспознанныйДокумент
	//	ГДЕ
	//		РаспознанныйДокумент.Ссылка В(&РаспознанныеДокументы)
	//	
	//	;
	//	ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//		РаспознанныйДокументРеквизитыДокумента.Ссылка КАК Ссылка,
	//		РаспознанныйДокументРеквизитыДокумента.ИмяРеквизита КАК ИмяРеквизита,
	//		РаспознанныйДокументРеквизитыДокумента.РаспознанныйТекст КАК РаспознанныйТекст
	//	ПОМЕСТИТЬ ДанныеНаименование
	//	ИЗ
	//		Документ.РаспознанныйДокумент.РеквизитыДокумента КАК РаспознанныйДокументРеквизитыДокумента
	//	ГДЕ
	//		РаспознанныйДокументРеквизитыДокумента.Ссылка В (&Ссылки0)
	//		И РаспознанныйДокументРеквизитыДокумента.ИмяРеквизита = "Покупатель"
	//	
	//	ОБЪЕДИНИТЬ ВСЕ
	//	
	//	ВЫБРАТЬ
	//		РаспознанныйДокументРеквизитыДокумента.Ссылка КАК Ссылка,
	//		РаспознанныйДокументРеквизитыДокумента.ИмяРеквизита КАК ИмяРеквизита,
	//		РаспознанныйДокументРеквизитыДокумента.РаспознанныйТекст КАК РаспознанныйТекст
	//	
	//	ИЗ
	//		Документ.РаспознанныйДокумент.РеквизитыДокумента КАК РаспознанныйДокументРеквизитыДокумента
	//	ГДЕ
	//		РаспознанныйДокументРеквизитыДокумента.Ссылка В (&Ссылки1)
	//		И РаспознанныйДокументРеквизитыДокумента.ИмяРеквизита = "Продавец"
	//	
	//	;
	//	ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//		ТолькоСсылки.Ссылка КАК Ссылка,
	//		ДанныеНаименование.РаспознанныйТекст КАК Наименование
	//	ИЗ
	//		ТолькоСсылки КАК ТолькоСсылки
	//			ЛЕВОЕ СОЕДИНЕНИЕ ДанныеНаименование КАК ДанныеНаименование
	//			ПО ТолькоСсылки.Ссылка = ДанныеНаименование.Ссылка
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ИтоговаяТаблица = Новый ТаблицаЗначений;
	ИтоговаяТаблица.Колонки.Добавить("Наименование");
	ИтоговаяТаблица.Колонки.Добавить("ИНН");
	ИтоговаяТаблица.Колонки.Добавить("КПП");
	ИтоговаяТаблица.Колонки.Добавить("ЮридическоеФизическоеЛицо");
	ИтоговаяТаблица.Колонки.Добавить("РаспознанныеДокументы");
	ИтоговаяТаблица.Колонки.Добавить("ИдСтрокДокументов");
	
	// Соответствие ддя избавления от дублей
	// Ключ - Наименование или ИНН+КПП, значение - Ид строки из ИтоговаяТаблица
	КлючиНазваний = Новый Соответствие;
	КлючиИННКПП = Новый Соответствие;
	
	ИдСтроки = 0;
	Пока Выборка.Следующий() Цикл
		ХэшНаименования = РаспознаваниеДокументовНечеткийПоискСлужебный.ОчиститьСтроку(Выборка.Наименование);
		ХэшНаименования = РаспознаваниеДокументовНечеткийПоискСлужебный.ОптическийХэш(ХэшНаименования);
		
		ИдНайденнойСтроки = КлючиНазваний.Получить(ХэшНаименования);
		Если ИдНайденнойСтроки = Неопределено Тогда
			Если СтрНайти(Выборка.ИНН, "/") <> 0 Тогда
				ЭтотИНН = РаспознаваниеДокументовСлужебный.ИзвлечьИННКППИзСтроки(Выборка.ИНН, "ИНН");
			Иначе
				ЭтотИНН = Выборка.ИНН;
			КонецЕсли;
			Если СтрНайти(Выборка.КПП, "/") <> 0 Тогда
				ЭтотКПП = РаспознаваниеДокументовСлужебный.ИзвлечьИННКППИзСтроки(Выборка.КПП, "КПП");
			Иначе
				ЭтотКПП = Выборка.КПП;
			КонецЕсли;
			
			ИдНайденнойСтроки = КлючиНазваний.Получить(ЭтотИНН + "+" + ЭтотКПП);
			Если ИдНайденнойСтроки = Неопределено Тогда
				КлючиНазваний.Вставить(ХэшНаименования, ИдСтроки);
				КлючиИННКПП.Вставить(ЭтотИНН + "+" + ЭтотКПП, ИдСтроки);
				
				ИдНайденнойСтроки = ИдСтроки;
				ИдСтроки = ИдСтроки + 1;
				
				СтрокаИтога = ИтоговаяТаблица.Добавить();
				СтрокаИтога.Наименование = Выборка.Наименование;
				СтрокаИтога.ИНН = ЭтотИНН;
				СтрокаИтога.КПП = ЭтотКПП;
				СтрокаИтога.ЮридическоеФизическоеЛицо =
					РаспознаваниеДокументовСлужебныйКлиентСервер.ОпределитьЮридическоеФизическоеЛицо(ЭтотИНН);
				
				СтрокаИтога.РаспознанныеДокументы = Новый Массив;
				СтрокаИтога.ИдСтрокДокументов = Новый Массив;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаИтога = ИтоговаяТаблица[ИдНайденнойСтроки];
		СтрокаИтога.РаспознанныеДокументы.Добавить(Выборка.Ссылка);
		
		// Индексы массивов ИдСтрокДокументов и РаспознанныеДокументы совпадают
		ИдВМассиве = ПараметрыСоздания.РаспознанныеДокументы.Найти(Выборка.Ссылка);
		СтрокаИтога.ИдСтрокДокументов.Добавить(ПараметрыСоздания.ИдСтрокДокументов[ИдВМассиве]);
	КонецЦикла;
	
	Результат = ОбщегоНазначения.ТаблицаЗначенийВМассив(ИтоговаяТаблица);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьКонтрагентаНаСервере(ДанныеКонтрагента, Использовать1СКонтрагент)
	
	Если Использовать1СКонтрагент Тогда
		НовыйКонтрагент = Неопределено;
		РаспознаваниеДокументовПереопределяемый.СоздатьКонтрагентаПоРеквизитам(ДанныеКонтрагента, НовыйКонтрагент);
	Иначе
		
		МенеджерСправочника = Справочники["Контрагенты"];
		СохраняемыйОбъект = МенеджерСправочника.СоздатьЭлемент();
		
		ДанныеДляЗаполнения = Новый Структура;
		Для Каждого СохраняемыйРеквизит Из ДанныеКонтрагента Цикл
			Если СохраняемыйРеквизит.Ключ = "РаспознанныеДокументы"
				Или СохраняемыйРеквизит.Ключ = "ИдСтрокДокументов" Тогда
				
				Продолжить;
			КонецЕсли;
			
			СохраняемыйОбъект[СохраняемыйРеквизит.Ключ] = СохраняемыйРеквизит.Значение;
			ДанныеДляЗаполнения.Вставить(СохраняемыйРеквизит.Ключ, СохраняемыйОбъект[СохраняемыйРеквизит.Ключ]);
			Если СохраняемыйРеквизит.Ключ = "Наименование" Тогда
				ТекущееИмя = "НаименованиеПолное";
				СохраняемыйОбъект[ТекущееИмя] = СохраняемыйРеквизит.Значение;
				ДанныеДляЗаполнения.Вставить(ТекущееИмя, СохраняемыйОбъект[ТекущееИмя]);
			КонецЕсли;
		КонецЦикла;
		
		Попытка
			РаспознаваниеДокументовПереопределяемый.ПриЗаполненииНовогоЭлементаСправочника(СохраняемыйОбъект, ДанныеДляЗаполнения);
			СохраняемыйОбъект.Записать();
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Описание ошибки:'") + Символы.ПС
			+ КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Сообщение.Сообщить();
			Возврат Неопределено;
		КонецПопытки;
		
		НовыйКонтрагент = СохраняемыйОбъект.Ссылка;
		
	КонецЕсли;
	
	Возврат НовыйКонтрагент;
	
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьОставшихсяКонтрагентовНаСервере(ПараметрыСоздания)
	
	ТекущийИдСоздания = ПараметрыСоздания.ИдСтрокиСоздания;
	КоличествоСозданий = ПараметрыСоздания.ДанныеСоздания.Количество();
	
	Результат = Новый Массив(КоличествоСозданий);
	Пока КоличествоСозданий > ТекущийИдСоздания Цикл
		ДанныеКонтрагента = ПараметрыСоздания.ДанныеСоздания[ТекущийИдСоздания];
		Результат[ТекущийИдСоздания] = СоздатьКонтрагентаНаСервере(ДанныеКонтрагента, ПараметрыСоздания.Использовать1СКонтрагент);
		
		ТекущийИдСоздания = ТекущийИдСоздания + 1;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Функция ПодсчетНезаполненныхСтрокШапки()
	
	КоличествоНеЗаполнено = 0;
	Для Каждого СтрокаТаблицы Из РеквизитыШапки Цикл
		Если Не СтрокаТаблицы.ДанныеЗаполнены Тогда
			КоличествоНеЗаполнено = КоличествоНеЗаполнено + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат КоличествоНеЗаполнено;
	
КонецФункции

&НаКлиенте
Функция ПроверкаДанныеЗаполненыШапка(СтрокаТаблицы)
	
	Возврат ЗначениеЗаполнено(СтрокаТаблицы.ДатаДокумента)
		И ЗначениеЗаполнено(СтрокаТаблицы.НомерДокумента)
		И ЗначениеЗаполнено(СтрокаТаблицы.Контрагент)
		И ЗначениеЗаполнено(СтрокаТаблицы.Организация)
		И ЗначениеЗаполнено(СтрокаТаблицы.ИтогоВсего);
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьПолнуюКартинку()
	
	Если Не ПолнаяКартинкаВидна Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.СтраницыТаблиц.ТекущаяСтраница = Элементы.СтраницаШапка Тогда
		ТекущиеДанные = Элементы.РеквизитыШапки.ТекущиеДанные;
	ИначеЕсли Элементы.СтраницыТаблиц.ТекущаяСтраница = Элементы.СтраницаДопРеквизиты Тогда
		ТекущиеДанные = Элементы.ТаблицаДопРеквизитов.ТекущиеДанные;
	ИначеЕсли Элементы.СтраницыТаблиц.ТекущаяСтраница = Элементы.СтраницаНоменклатура Тогда
		ТекущиеДанные = Элементы.ТаблицаНоменклатуры.ТекущиеДанные;
	ИначеЕсли Элементы.СтраницыТаблиц.ТекущаяСтраница = Элементы.СтраницаПроверкиСуммы Тогда
		ТекущиеДанные = Элементы.ТаблицаСумм.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПолучения = Новый Структура;
	ПараметрыПолучения.Вставить("Ссылка", ТекущиеДанные.Ссылка);
	ПараметрыПолучения.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ПараметрыПолучения.Вставить("ОбновитьПолнуюКартинку", Истина);
	ПараметрыПолучения.Вставить("ИмяРеквизита", ТекущееИмяРеквизита);
	
	Если Элементы.СтраницыТаблиц.ТекущаяСтраница = Элементы.СтраницаШапка
		Или Элементы.СтраницыТаблиц.ТекущаяСтраница = Элементы.СтраницаДопРеквизиты Тогда
		ПараметрыПолучения.Вставить("Направление", ТекущиеДанные.Направление);
		ПараметрыПолучения.Вставить("ТипДокумента", ТекущиеДанные.ТипДокумента);
		ПараметрыПолучения.Вставить("ИсточникПоляБанковскийСчетВладелец", ИсточникПоляБанковскийСчетВладелец);
		ПараметрыПолучения.Вставить("ИсточникПоляДоговорВидДоговора", ИсточникПоляДоговорВидДоговора.ВыгрузитьЗначения());
		ПараметрыПолучения.Вставить("ИсточникПоляДоговорКонтрагент", ИсточникПоляДоговорКонтрагент);
		ПараметрыПолучения.Вставить("ИсточникПоляДоговорОрганизация", ИсточникПоляДоговорОрганизация);
		ДанныеЯчейки = ДанныеЯчейкиШапкиНаСервере(ПараметрыПолучения);
	Иначе
		ПараметрыПолучения.Вставить("НомерСтрокиТЧ", ТекущиеДанные.НомерСтрокиТЧ);
		ДанныеЯчейки = ДанныеЯчейкиТаблицыНаСервере(ПараметрыПолучения);
	КонецЕсли;
	
	Если ДанныеЯчейки.Свойство("АдресПолнойКартинки") Тогда
		АдресПолнойКартинки = ДанныеЯчейки.АдресПолнойКартинки;
		Если HTMLДокументСформирован Тогда
			РаспознаваниеДокументовСлужебныйКлиент.ЗагрузитьКартинкуПоАдресу(Элементы.ПолеПросмотра, АдресПолнойКартинки);
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеЯчейки.Свойство("КоординатыКартинки") Тогда
		КоординатыВыделения = ДанныеЯчейки.КоординатыКартинки;
		СтрокВИзображенииВыделения = ДанныеЯчейки.СтрокВИзображении;
		ПодключитьОбработчикОжидания("Подключаемый_ПриблизитьПоКоординатам", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИзменитьНаправлениеНаСервере(ДокументСсылка)
	
	Результат = Новый Структура("Направление, НаправлениеДокумента, Контрагент, Организация");
	
	ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	
	Если ДокументОбъект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий Тогда
		ДокументОбъект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий;
		Результат.НаправлениеДокумента = 1;
	Иначе
		ДокументОбъект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий;
		Результат.НаправлениеДокумента = 2;
	КонецЕсли;
	ДокументОбъект.ВариантОбработки = РаспознаваниеДокументовСлужебныйКлиентСервер.ВариантОбработкиПоТипуИНаправлению(ДокументОбъект.ТипДокумента, ДокументОбъект.Направление);
	
	РаспознаваниеДокументовПереопределяемый.ПередЗаписьюРаспознанногоДокумента(ДокументОбъект);
	ДокументОбъект.Записать();
	
	ЗаполнитьЗначенияСвойств(Результат, ДокументОбъект, "Направление, Контрагент, Организация");
	
	ИменаРеквизитов = РаспознаваниеДокументовСлужебныйКлиентСервер.ИменаРеквизитовКонтрагентИОрганизация(ДокументОбъект);
	
	Для Каждого КлючЗначение Из ИменаРеквизитов Цикл
		ДанныеРеквизита = РаспознаваниеДокументовСлужебныйКлиентСервер.РеквизитДокумента(ДокументОбъект, КлючЗначение.Значение);
		Результат.Вставить(КлючЗначение.Ключ + "Распознано", НСтр("ru = 'Не сопоставлен: '") + ДанныеРеквизита.РаспознанныйТекст);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДокументыПоОтбору(ОтборИзСписка)
	
	ОтборПоДокументам = ЗначениеЗаполнено(ОтборИзСписка.РаспознанныеДокументы);
	Если ОтборПоДокументам Тогда
		ОтборДата = Ложь;
		ОтборОрганизация = Ложь;
		ОтборКонтрагент = Ложь;
	Иначе
		Если ЗначениеЗаполнено(ОтборИзСписка.ТекущаяДата) Тогда 
			
			ОтборДата = Истина;
			
			Если Параметры.ОтборИзСписка.ТекущаяДатаПериод = "День" Тогда
				НачалоПериода = НачалоДня(Параметры.ОтборИзСписка.ТекущаяДата);
				КонецПериода = КонецДня(Параметры.ОтборИзСписка.ТекущаяДата);
			ИначеЕсли Параметры.ОтборИзСписка.ТекущаяДатаПериод = "Месяц" Тогда
				НачалоПериода = НачалоМесяца(Параметры.ОтборИзСписка.ТекущаяДата);
				КонецПериода = КонецМесяца(Параметры.ОтборИзСписка.ТекущаяДата);
			КонецЕсли;
		Иначе
			ОтборДата = Ложь;
		КонецЕсли;
		
		ОтборОрганизация = ЗначениеЗаполнено(ОтборИзСписка.ТекущаяОрганизация);
		ОтборКонтрагент = ЗначениеЗаполнено(ОтборИзСписка.ТекущийКонтрагент);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаспознанныйДокумент.Ссылка КАК Ссылка,
	|	РаспознанныйДокумент.Дата КАК Дата,
	|	РаспознанныйДокумент.Статус КАК Статус,
	|	РаспознанныйДокумент.Направление КАК Направление,
	|	ВЫБОР
	|		КОГДА РаспознанныйДокумент.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияРаспознанногоДокумента.Входящий)
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК НаправлениеДокумента,
	|	ВЫБОР
	|		КОГДА РаспознанныйДокумент.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияРаспознанногоДокумента.Входящий)
	|			ТОГДА ""Продавец""
	|		ИНАЧЕ ""Покупатель""
	|	КОНЕЦ КАК ИмяРеквизитаКонтрагент,
	|	ВЫБОР
	|		КОГДА РаспознанныйДокумент.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияРаспознанногоДокумента.Входящий)
	|			ТОГДА ""ПокупательОрганизация""
	|		ИНАЧЕ ВЫБОР
	|				КОГДА РаспознанныйДокумент.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыДокументовРаспознаваниеДокументов.СчетНаОплату)
	|					ТОГДА ""Исполнитель""
	|				ИНАЧЕ ""ПродавецОрганизация""
	|			КОНЕЦ
	|	КОНЕЦ КАК ИмяРеквизитаОрганизация,
	|	РаспознанныйДокумент.ТипДокумента КАК ТипДокумента,
	|	РаспознанныйДокумент.НомерДокумента КАК НомерДокумента,
	|	РаспознанныйДокумент.ДатаДокумента КАК ДатаДокумента,
	|	РаспознанныйДокумент.СуммаДокумента КАК ИтогоВсего,
	|	РаспознанныйДокумент.Контрагент КАК Контрагент,
	|	РаспознанныйДокумент.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА РаспознанныйДокумент.НомерДокумента <> """"
	|				И РаспознанныйДокумент.ДатаДокумента <> ДАТАВРЕМЯ(1, 1, 1)
	|				И РаспознанныйДокумент.СуммаДокумента <> 0
	|				И РаспознанныйДокумент.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				И РаспознанныйДокумент.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДанныеЗаполнены,
	|	РаспознанныйДокумент.Наименование КАК Наименование
	|ПОМЕСТИТЬ ОсновнаяТаблица
	|ИЗ
	|	Документ.РаспознанныйДокумент КАК РаспознанныйДокумент
	|ГДЕ
	|	НЕ РаспознанныйДокумент.ПометкаУдаления
	|	И РаспознанныйДокумент.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСозданныхДокументовРаспознаваниеДокументов.Новый)
	|	И РаспознанныйДокумент.ТипДокумента <> ЗНАЧЕНИЕ(Перечисление.ТипыДокументовРаспознаваниеДокументов.НеопознанныйДокумент)
	|	И РаспознанныйДокумент.ТипДокумента <> ЗНАЧЕНИЕ(Перечисление.ТипыДокументовРаспознаваниеДокументов.ПустаяСсылка)
	|	И РаспознанныйДокумент.Ссылка В(&РаспознанныеДокументы)
	|	И РаспознанныйДокумент.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РаспознанныйДокумент.Контрагент = &Контрагент
	|	И РаспознанныйДокумент.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОсновнаяТаблица.Ссылка КАК Ссылка,
	|	ИСТИНА КАК КартинкаОткрытия,
	|	ОсновнаяТаблица.Дата КАК Дата,
	|	ОсновнаяТаблица.Статус КАК Статус,
	|	ОсновнаяТаблица.Направление КАК Направление,
	|	ОсновнаяТаблица.НаправлениеДокумента КАК НаправлениеДокумента,
	|	ОсновнаяТаблица.ТипДокумента КАК ТипДокумента,
	|	ОсновнаяТаблица.НомерДокумента КАК НомерДокумента,
	|	""Не сопоставлен: "" + (ВЫРАЗИТЬ(СтрокаНомерДокумента.РаспознанныйТекст КАК СТРОКА(1024))) КАК НомерДокументаРаспознано,
	|	ОсновнаяТаблица.ДатаДокумента КАК ДатаДокумента,
	|	""Не сопоставлен: "" + (ВЫРАЗИТЬ(СтрокаДатаДокумента.РаспознанныйТекст КАК СТРОКА(1024))) КАК ДатаДокументаРаспознано,
	|	ОсновнаяТаблица.Контрагент КАК Контрагент,
	|	""Не сопоставлен: "" + (ВЫРАЗИТЬ(СтрокаКонтрагент.РаспознанныйТекст КАК СТРОКА(1024))) КАК КонтрагентРаспознано,
	|	ОсновнаяТаблица.Организация КАК Организация,
	|	""Не сопоставлен: "" + (ВЫРАЗИТЬ(СтрокаОрганизация.РаспознанныйТекст КАК СТРОКА(1024))) КАК ОрганизацияРаспознано,
	|	ОсновнаяТаблица.ИтогоВсего КАК ИтогоВсего,
	|	""Не сопоставлен: "" + (ВЫРАЗИТЬ(СтрокаИтогоВсего.РаспознанныйТекст КАК СТРОКА(1024))) КАК ИтогоВсегоРаспознано,
	|	ОсновнаяТаблица.ДанныеЗаполнены КАК ДанныеЗаполнены,
	|	ОсновнаяТаблица.Наименование КАК Наименование
	|ИЗ
	|	ОсновнаяТаблица КАК ОсновнаяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РаспознанныйДокумент.РеквизитыДокумента КАК СтрокаНомерДокумента
	|		ПО ОсновнаяТаблица.Ссылка = СтрокаНомерДокумента.Ссылка
	|			И (СтрокаНомерДокумента.ИмяРеквизита = ""НомерДокумента"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РаспознанныйДокумент.РеквизитыДокумента КАК СтрокаДатаДокумента
	|		ПО ОсновнаяТаблица.Ссылка = СтрокаДатаДокумента.Ссылка
	|			И (СтрокаДатаДокумента.ИмяРеквизита = ""ДатаДокумента"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РаспознанныйДокумент.РеквизитыДокумента КАК СтрокаКонтрагент
	|		ПО ОсновнаяТаблица.Ссылка = СтрокаКонтрагент.Ссылка
	|			И ОсновнаяТаблица.ИмяРеквизитаКонтрагент = СтрокаКонтрагент.ИмяРеквизита
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РаспознанныйДокумент.РеквизитыДокумента КАК СтрокаОрганизация
	|		ПО ОсновнаяТаблица.Ссылка = СтрокаОрганизация.Ссылка
	|			И ОсновнаяТаблица.ИмяРеквизитаОрганизация = СтрокаОрганизация.ИмяРеквизита
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РаспознанныйДокумент.РеквизитыДокумента КАК СтрокаИтогоВсего
	|		ПО ОсновнаяТаблица.Ссылка = СтрокаИтогоВсего.Ссылка
	|			И (СтрокаИтогоВсего.ИмяРеквизита = ""ИтогоВсего"")
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОсновнаяТаблица.Дата";
	
	Если ОтборПоДокументам Тогда
		Запрос.УстановитьПараметр("РаспознанныеДокументы", ОтборИзСписка.РаспознанныеДокументы);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И РаспознанныйДокумент.Ссылка В(&РаспознанныеДокументы)", "");
	КонецЕсли;
	
	Если ОтборДата Тогда
		Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
		Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И РаспознанныйДокумент.Дата МЕЖДУ &НачалоПериода И &КонецПериода", "");
	КонецЕсли;
	
	Если ОтборОрганизация Тогда
		Запрос.УстановитьПараметр("Организация", ОтборИзСписка.ТекущаяОрганизация);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И РаспознанныйДокумент.Организация = &Организация", "");
	КонецЕсли;
	
	Если ОтборКонтрагент Тогда
		Запрос.УстановитьПараметр("Контрагент", ОтборИзСписка.ТекущийКонтрагент);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И РаспознанныйДокумент.Контрагент = &Контрагент", "");
	КонецЕсли;
	
	Таблица = Запрос.Выполнить().Выгрузить();
	РеквизитыШапки.Загрузить(Таблица);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьКолонкиТаблицы()
	
	ДобавляемыеРеквизиты = Новый Массив;
	Для Каждого ЭлементКолонка Из Элементы.РеквизитыШапки.ПодчиненныеЭлементы Цикл
		Если ЭлементКолонка.Имя <> "ШапкаНаправлениеДокумента"
			И ЭлементКолонка.Имя <> "ШапкаКартинкаОткрытия" Тогда
			
			ЭлементКолонка.УстановитьДействие("ОбработкаВыбора", "Подключаемый_ОбработкаВыбораПоля");
			
			НовыйРеквизит = Новый РеквизитФормы(СтрЗаменить(ЭлементКолонка.Имя, "Шапка", "") + "Распознано", Новый ОписаниеТипов("Строка"));
			НовыйРеквизит.Путь = "РеквизитыШапки";
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		КонецЕсли;
	КонецЦикла;
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	СоздатьЭлементыДобавленныхРеквизитов(ДобавляемыеРеквизиты, Элементы.РеквизитыШапки);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементыДобавленныхРеквизитов(ДобавляемыеРеквизиты, ЭлементРодитель)
	
	Для Каждого Реквизит Из ДобавляемыеРеквизиты Цикл 
		НовыйЭлемент = Элементы.Добавить("Шапка" + Реквизит.Имя, Тип("ПолеФормы"), ЭлементРодитель);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным = "РеквизитыШапки." + Реквизит.Имя;
		НовыйЭлемент.Видимость = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеЗаполненияВыделенныхСтрок(ЗначениеЗаполнения, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписиРеквизитов = Новый Структура;
	ПараметрыЗаписиРеквизитов.Вставить("ТаблицаФормы", ДополнительныеПараметры.ТаблицаФормы);
	ПараметрыЗаписиРеквизитов.Вставить("СтрокиТаблицы", Элементы.РеквизитыШапки.ВыделенныеСтроки);
	ПараметрыЗаписиРеквизитов.Вставить("ИмяРеквизитаШапки", ДополнительныеПараметры.ИмяРеквизитаШапки);
	ПараметрыЗаписиРеквизитов.Вставить("ЗначениеЗаполнения", ЗначениеЗаполнения);
	ПараметрыЗаписиРеквизитов.Вставить("ОбновитьЗначениеВЯчейке", Истина);
	
	ЗаписатьНовоеЗначениеРеквизита(ПараметрыЗаписиРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНовоеЗначениеРеквизита(Параметры)
	
	Для Каждого СтрокаДляЗаполнения Из Параметры.СтрокиТаблицы Цикл
		ДанныеЭтойСтроки = Параметры.ТаблицаФормы.ДанныеСтроки(СтрокаДляЗаполнения);
		
		Если Параметры.ОбновитьЗначениеВЯчейке
			И ДанныеЭтойСтроки[Параметры.ИмяРеквизитаШапки] = Параметры.ЗначениеЗаполнения Тогда
			
			// Выделили строку, в которой уже стоит правильное значение
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизита =  ИмяРеквизитаДокументаПоИмениВШапке(ДанныеЭтойСтроки, Параметры.ИмяРеквизитаШапки);
		СтрокаИзменений = Новый Структура("Ссылка, ИмяРеквизита, Значение",
			ДанныеЭтойСтроки.Ссылка,
			ИмяРеквизита,
			Параметры.ЗначениеЗаполнения
		);
		ДанныеФоновыхОпераций.ИзмененияРеквизитовШапки.Добавить(СтрокаИзменений);
	КонецЦикла;
	
	ЗапуститьФоновоеЗаданиеЗаписиРеквизитовШапки();
	
КонецПроцедуры

&НаКлиенте
Функция ИмяРеквизитаДокументаПоИмениВШапке(ДанныеЭтойСтроки, ИмяРеквизитаШапки)
	
	ИменаРеквизитов = РаспознаваниеДокументовСлужебныйКлиентСервер.ИменаРеквизитовКонтрагентИОрганизация(ДанныеЭтойСтроки);
	Если ИменаРеквизитов.Свойство(ИмяРеквизитаШапки) Тогда
		ИмяРеквизита = ИменаРеквизитов[ИмяРеквизитаШапки];
	Иначе
		ИмяРеквизита = ИмяРеквизитаШапки;
	КонецЕсли;
	
	ИменаРеквизитов = ИмяРеквизитаБанковскийСчет(ДанныеЭтойСтроки);
	Если ИменаРеквизитов.Свойство(ИмяРеквизитаШапки) Тогда
		ИмяРеквизита = ИменаРеквизитов[ИмяРеквизитаШапки];
	КонецЕсли;
	
	Возврат ИмяРеквизита;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяРеквизитаБанковскийСчет(ДанныеДокумента) Экспорт
	
	// Ключ - БанковскийСчет
	// Значение - имя реквизита в документе
	Результат = Новый Структура;
	
	Если ДанныеДокумента.Направление = ПредопределенноеЗначение("Перечисление.НаправленияРаспознанногоДокумента.Входящий") Тогда
		Результат.Вставить("БанковскийСчет", "БанковскийСчетКонтрагента");
	Иначе
		Результат.Вставить("БанковскийСчет", "БанковскийСчетОрганизации");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	НаборЦветов = Новый Структура;
	НаборЦветов.Вставить("КрасныйЦвет", Новый Цвет(255, 0, 0));
	НаборЦветов.Вставить("РозовыйЦвет", Новый Цвет(251, 212, 212));
	НаборЦветов.Вставить("СалатовыйЦвет", Новый Цвет(240, 255, 240));
	НаборЦветов.Вставить("СерыйЦвет", Новый Цвет(220, 220, 220));
	
	УстановитьУсловноеОформлениеШагШапка(НаборЦветов);
	УстановитьУсловноеОформлениеШагДубли(НаборЦветов);
	УстановитьУсловноеОформлениеШагДопРеквизиты(НаборЦветов);
	УстановитьУсловноеОформлениеШагНоменклатура(НаборЦветов);
	УстановитьУсловноеОформлениеШагСуммы(НаборЦветов);
	УстановитьУсловноеОформлениеШагИтого(НаборЦветов);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеШагШапка(НаборЦветов)
	
	ВсеКолонки = Новый Массив;
	ВсеКолонки.Добавить("НомерДокумента");
	ВсеКолонки.Добавить("ДатаДокумента");
	ВсеКолонки.Добавить("Контрагент");
	ВсеКолонки.Добавить("Организация");
	ВсеКолонки.Добавить("ИтогоВсего");
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Истина;
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Для Каждого Колонка Из ВсеКолонки Цикл
		ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Шапка" + Колонка + "Распознано");
	КонецЦикла;
	
	Для Каждого Колонка Из ВсеКолонки Цикл
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", НаборЦветов.РозовыйЦвет);
		Если Колонка = "Контрагент" Или Колонка = "Организация" Тогда
			ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", НаборЦветов.КрасныйЦвет);
			ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("РеквизитыШапки." + Колонка + "Распознано"));
		КонецЕсли;
		
		ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыШапки." + Колонка);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		
		ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Шапка" + Колонка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеШагДубли(НаборЦветов)
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", НаборЦветов.СалатовыйЦвет);
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДублей.ЕстьОсновной");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаДублейИменаРеквизитов");
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаДублейЗначенияРеквизитов");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеШагДопРеквизиты(НаборЦветов)
	
	// оформление по спискам выбора
	Для Каждого ЗначениеСписка Из Элементы.ТаблицаДопРеквизитовСуммаВключаетНДС.СписокВыбора Цикл
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", ЗначениеСписка.Представление);
		ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДопРеквизитов.СуммаВключаетНДС");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = ЗначениеСписка.Значение;
		
		ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаДопРеквизитовСуммаВключаетНДС.Имя);
	КонецЦикла;
	
	Для Каждого ЗначениеСписка Из Элементы.ТаблицаДопРеквизитовВидСкидки.СписокВыбора Цикл
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", ЗначениеСписка.Представление);
		ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДопРеквизитов.ТипДокумента");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетНаОплату;
		ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДопРеквизитов.ВидСкидки");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = ЗначениеСписка.Значение;
		
		ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаДопРеквизитовВидСкидки.Имя);
	КонецЦикла;
	// оформление по спискам выбора
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", НаборЦветов.СерыйЦвет);
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаДопРеквизитовКонтрагент");
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаДопРеквизитовТипДокумента");
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", НаборЦветов.СерыйЦвет);
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДопРеквизитов.ТипДокумента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокОтбора = Новый СписокЗначений;
	СписокОтбора.Добавить(Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД);
	СписокОтбора.Добавить(Перечисления.ТипыДокументовРаспознаваниеДокументов.ТОРГ12);
	СписокОтбора.Добавить(Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура);
	ОтборЭлемента.ПравоеЗначение = СписокОтбора;
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаДопРеквизитовСуммаВключаетНДС");
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаДопРеквизитовСрокОплаты");
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаДопРеквизитовПродавецОрганизация");
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаДопРеквизитовБанковскийСчет");
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаДопРеквизитовВидСкидки");
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", НаборЦветов.СерыйЦвет);
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДопРеквизитов.ТипДокумента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг;
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаДопРеквизитовСклад");
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаДопРеквизитовСрокОплаты");
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаДопРеквизитовПродавецОрганизация");
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаДопРеквизитовБанковскийСчет");
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаДопРеквизитовВидСкидки");
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", НаборЦветов.СерыйЦвет);
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДопРеквизитов.ТипДокумента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетНаОплату;
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаДопРеквизитовСклад");
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", НаборЦветов.СерыйЦвет);
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДопРеквизитов.ТипДокумента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетНаОплату;
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДопРеквизитов.Направление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.НаправленияРаспознанногоДокумента.Входящий;
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаДопРеквизитовПродавецОрганизация");
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", НаборЦветов.РозовыйЦвет);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", НаборЦветов.КрасныйЦвет);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("ТаблицаДопРеквизитов.ДоговорРаспознано"));
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДопРеквизитов.Договор");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаДопРеквизитовДоговор");
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", НаборЦветов.РозовыйЦвет);
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДопРеквизитов.Склад");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДопРеквизитов.ТипДокумента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокОтбора = Новый СписокЗначений;
	СписокОтбора.Добавить(Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД);
	СписокОтбора.Добавить(Перечисления.ТипыДокументовРаспознаваниеДокументов.ТОРГ12);
	СписокОтбора.Добавить(Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура);
	ОтборЭлемента.ПравоеЗначение = СписокОтбора;
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаДопРеквизитовСклад");
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", НаборЦветов.РозовыйЦвет);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", НаборЦветов.КрасныйЦвет);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("ТаблицаДопРеквизитов.ПродавецОрганизацияРаспознано"));
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДопРеквизитов.ПродавецОрганизация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДопРеквизитов.ТипДокумента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетНаОплату;
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДопРеквизитов.Направление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.НаправленияРаспознанногоДокумента.Исходящий;
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаДопРеквизитовПродавецОрганизация");
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", НаборЦветов.РозовыйЦвет);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", НаборЦветов.КрасныйЦвет);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("ТаблицаДопРеквизитов.БанковскийСчетРаспознано"));
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДопРеквизитов.БанковскийСчет");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДопРеквизитов.ТипДокумента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетНаОплату;
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаДопРеквизитовБанковскийСчет");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеШагНоменклатура(НаборЦветов)
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Представление = "ВидимостьЗаполненнойНоменклатуры";
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатуры.ЕстьНоменклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатурыКонтрагент");
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатурыНоменклатура");
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатурыНаименование");
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатурыАртикул");
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатурыРодитель");
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатурыВидНоменклатуры");
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатурыСтавкаНДС");
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатурыЕдиницаИзмерения");
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатурыНоменклатурнаяГруппа");
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатурыКартинкаОткрытия");
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатурыНоменклатураРодитель");
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатурыНоменклатураВидНоменклатуры");
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатурыНоменклатураНоменклатурнаяГруппа");
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", НаборЦветов.РозовыйЦвет);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", НаборЦветов.КрасныйЦвет);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("ТаблицаНоменклатуры.НоменклатураРаспознано"));
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатуры.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатуры.Ссылка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатурыНоменклатура");
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", НаборЦветов.РозовыйЦвет);
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатуры.Наименование");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатуры.Ссылка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатурыНаименование");
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", НаборЦветов.РозовыйЦвет);
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатуры.ВидНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатуры.Ссылка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатурыВидНоменклатуры");
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", НаборЦветов.РозовыйЦвет);
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатуры.ЕдиницаИзмерения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатуры.Ссылка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатурыЕдиницаИзмерения");
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", НаборЦветов.СалатовыйЦвет);
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатуры.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатурыКонтрагент");
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатурыНоменклатура");
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатурыНаименование");
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатурыАртикул");
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатурыРодитель");
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатурыВидНоменклатуры");
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатурыСтавкаНДС");
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатурыЕдиницаИзмерения");
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатурыНоменклатурнаяГруппа");
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатурыКартинкаОткрытия");
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатурыНоменклатураРодитель");
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатурыНоменклатураВидНоменклатуры");
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатурыНоменклатураНоменклатурнаяГруппа");
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ГруппаИли = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ЭлементОформления.Отбор.Элементы,
		"", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИли,
		"ТаблицаНоменклатуры.Номенклатура", ВидСравненияКомпоновкиДанных.Заполнено);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИли,
		"ТаблицаНоменклатуры.Ссылка", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатурыКонтрагент");
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатурыНаименование");
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатурыАртикул");
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатурыРодитель");
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатурыВидНоменклатуры");
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатурыСтавкаНДС");
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатурыЕдиницаИзмерения");
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатурыНоменклатурнаяГруппа");
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатурыКартинкаОткрытия");
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатурыНоменклатураРодитель");
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатурыНоменклатураВидНоменклатуры");
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатурыНоменклатураНоменклатурнаяГруппа");
	
	// номенклатура - видимость колонок
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатуры.Ссылка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатурыНоменклатура");
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатуры.Ссылка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатурыКонтрагент");
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатуры.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатурыРодитель");
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатурыВидНоменклатуры");
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатурыНоменклатурнаяГруппа");
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатуры.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатурыНоменклатураРодитель");
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатурыНоменклатураВидНоменклатуры");
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатурыНоменклатураНоменклатурнаяГруппа");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеШагСуммы(НаборЦветов)
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", НаборЦветов.РозовыйЦвет);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", НаборЦветов.КрасныйЦвет);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("ТаблицаСумм.НоменклатураРаспознано"));
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаСумм.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаСуммНоменклатура");
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", НаборЦветов.РозовыйЦвет);
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаСумм.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаСуммНоменклатура");
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", НаборЦветов.РозовыйЦвет);
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаСумм.СтавкаНДС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаСуммСтавкаНДС");
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", НаборЦветов.РозовыйЦвет);
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаСумм.ОшибкаЦены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаСуммКоличество");
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаСуммЦена");
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаСуммСумма");
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", НаборЦветов.РозовыйЦвет);
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаСумм.ОшибкаВсего");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаСуммСумма");
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаСуммСуммаНДС");
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаСуммВсего");
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", НаборЦветов.РозовыйЦвет);
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаСумм.ОшибкаЦены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаСумм.ВидСкидки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = РаспознаваниеДокументовСлужебныйКлиентСервер.ВидыСкидок().НаОтдельныеПозиции;
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаСуммСуммаСкидки");
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", НаборЦветов.СерыйЦвет);
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаСумм.ВидСкидки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = РаспознаваниеДокументовСлужебныйКлиентСервер.ВидыСкидок().НаОтдельныеПозиции;
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаСуммСуммаСкидки");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеШагИтого(НаборЦветов)
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаИтогоКомплекты.Ссылка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаИтогоКомплектыНаправлениеДокумента");
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаИтогоКомплектыДата");
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаИтогоКомплектыТипДокумента");
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаИтогоКомплекты.Ссылка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаИтогоКомплектыНазваниеКомплекта");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриАктивизацииЯчейкиШапки() Экспорт
	
	Если ТекущийЭлемент.Имя <> "РеквизитыШапки"
		Или ТекущийЭлемент.ТекущиеДанные = Неопределено Тогда
		
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.ТекущийЭлемент.Имя, "Шапка", "");
	
	ОбновитьПолнуюКартинку = (ПолнаяКартинкаВидна И ТекущаяСтрокаШапки <> ТекущийЭлемент.ТекущаяСтрока);
	ТекущаяСтрокаШапки = ТекущийЭлемент.ТекущаяСтрока;
	ТекущееИмяРеквизита = ИмяРеквизита;
	
	ПриАктивизацииЯчейкиШапки(ИмяРеквизита, ОбновитьПолнуюКартинку);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриАктивизацииЯчейкиДопРеквизитов() Экспорт
	
	Если ТекущийЭлемент.Имя <> "ТаблицаДопРеквизитов"
		Или ТекущийЭлемент.ТекущиеДанные = Неопределено Тогда
		
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.ТекущийЭлемент.Имя, "ТаблицаДопРеквизитов", "");
	
	ОбновитьПолнуюКартинку = (ПолнаяКартинкаВидна И ТекущаяСтрокаШапки <> ТекущийЭлемент.ТекущаяСтрока);
	ТекущаяСтрокаШапки = ТекущийЭлемент.ТекущаяСтрока;
	ТекущееИмяРеквизита = ИмяРеквизита;
	
	ИсточникПоляДоговорКонтрагент = ТекущийЭлемент.ТекущиеДанные.Контрагент;
	ИсточникПоляДоговорОрганизация = ТекущийЭлемент.ТекущиеДанные.Организация;
	ПараметрыВыбораДоговора = Новый Структура;
	ПриЗаполненииПараметровВыбораДоговора(ТекущийЭлемент.ТекущиеДанные, ПараметрыВыбораДоговора);
	ИсточникПоляДоговорВидДоговора.ЗагрузитьЗначения(ПараметрыВыбораДоговора.ВидыДоговоров);
	
	Если ТекущийЭлемент.ТекущиеДанные.Направление = ПредопределенноеЗначение("Перечисление.НаправленияРаспознанногоДокумента.Исходящий") Тогда
		ИсточникПоляБанковскийСчетВладелец = ТекущийЭлемент.ТекущиеДанные.ПродавецОрганизация;
	Иначе
		ИсточникПоляБанковскийСчетВладелец = ТекущийЭлемент.ТекущиеДанные.Контрагент;
	КонецЕсли;
	
	ПриАктивизацииЯчейкиШапки(ИмяРеквизита, ОбновитьПолнуюКартинку);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриЗаполненииПараметровВыбораДоговора(ДокументОбъект, ПараметрыВыбораДоговора)
	
	ВидыДоговоров = Новый Массив;
	Если ДокументОбъект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияРаспознанногоДокумента.Исходящий") Тогда
		ВидыДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПокупателем"));
	Иначе
			ВидыДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПоставщиком"));
	КонецЕсли;
	
	ПараметрыВыбораДоговора.Вставить("ВидыДоговоров", ВидыДоговоров);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриАктивизацииЯчейкиШапки(ИмяРеквизита, ОбновитьПолнуюКартинку)
	
	ИмяКолонки = ТекущийЭлемент.ТекущийЭлемент.Имя;
	ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
	
	Если ИмяРеквизита = "НаправлениеДокумента"
		Или ИмяРеквизита = "КартинкаОткрытия"
		Или ИмяРеквизита = "ТипДокумента"
		Или ИмяРеквизита = "СуммаВключаетНДС"
		Или ИмяРеквизита = "ВидСкидки"
		Или ИмяРеквизита = "Склад" Тогда
		
		Если ОбновитьПолнуюКартинку И HTMLДокументСформирован Тогда
			АдресПолнойКартинки = ПолучитьАдресПолнойКартинки(ТекущиеДанные.Ссылка, УникальныйИдентификатор);
			РаспознаваниеДокументовСлужебныйКлиент.ЗагрузитьКартинкуПоАдресу(Элементы.ПолеПросмотра, АдресПолнойКартинки);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	ПараметрыПолучения = Новый Структура;
	ПараметрыПолучения.Вставить("Ссылка", ТекущиеДанные.Ссылка);
	ПараметрыПолучения.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ПараметрыПолучения.Вставить("ОбновитьПолнуюКартинку", ОбновитьПолнуюКартинку);
	ПараметрыПолучения.Вставить("Направление", ТекущиеДанные.Направление);
	ПараметрыПолучения.Вставить("ТипДокумента", ТекущиеДанные.ТипДокумента);
	ПараметрыПолучения.Вставить("ИмяРеквизита", ИмяРеквизита);
	ПараметрыПолучения.Вставить("ИсточникПоляБанковскийСчетВладелец", ИсточникПоляБанковскийСчетВладелец);
	ПараметрыПолучения.Вставить("ИсточникПоляДоговорВидДоговора", ИсточникПоляДоговорВидДоговора.ВыгрузитьЗначения());
	ПараметрыПолучения.Вставить("ИсточникПоляДоговорКонтрагент", ИсточникПоляДоговорКонтрагент);
	ПараметрыПолучения.Вставить("ИсточникПоляДоговорОрганизация", ИсточникПоляДоговорОрганизация);
	ДанныеЯчейки = ДанныеЯчейкиШапкиНаСервере(ПараметрыПолучения);
	
	Если ОбновитьПолнуюКартинку И ДанныеЯчейки.Свойство("АдресПолнойКартинки") Тогда
		АдресПолнойКартинки = ДанныеЯчейки.АдресПолнойКартинки;
		Если HTMLДокументСформирован Тогда
			РаспознаваниеДокументовСлужебныйКлиент.ЗагрузитьКартинкуПоАдресу(Элементы.ПолеПросмотра, АдресПолнойКартинки);
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеЯчейки.Свойство("КартинкаВнутриHTML") Тогда
		КартинкаРеквизита = ДанныеЯчейки.КартинкаВнутриHTML;
	КонецЕсли;
	
	ЭлементКолонка = Элементы[ИмяКолонки];
	ЭлементКолонка.СписокВыбора.Очистить();
	ТипЗначения = ТипЗнч(ТекущиеДанные[ТекущееИмяРеквизита]);
	
	Если ИмяРеквизита = "Организация" Тогда
		КартинкаСоздание = 2;
	Иначе
		КартинкаСоздание = Неопределено;
	КонецЕсли;
	
	Если ДанныеЯчейки.ЗначенияВыбора.Количество() Тогда
		Если КартинкаСоздание = Неопределено Тогда
			СписокДляВыбора = РаспознаваниеДокументовСлужебныйКлиент.ПолучитьЗначенияСпискаВыбора(
				ДанныеЯчейки.РаспознанныйТекст, ТипЗначения, ДанныеЯчейки.ЗначенияВыбора);
		Иначе
			СписокДляВыбора = РаспознаваниеДокументовСлужебныйКлиентСервер.ПолучитьСписокДляВыбораПользователем(
				ДанныеЯчейки.РаспознанныйТекст, ДанныеЯчейки.ЗначенияВыбора, КартинкаСоздание);
		КонецЕсли;
	Иначе
		Если КартинкаСоздание = Неопределено Тогда
			СписокДляВыбора = РаспознаваниеДокументовСлужебныйКлиент.ПолучитьЗначенияСпискаВыбора(
				ДанныеЯчейки.РаспознанныйТекст, ТипЗначения, Неопределено);
		Иначе
			СписокДляВыбора = РаспознаваниеДокументовСлужебныйКлиентСервер.ПолучитьСписокДляВыбораПользователем(
				ДанныеЯчейки.РаспознанныйТекст, Неопределено, КартинкаСоздание);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ДанныеВыбора Из СписокДляВыбора Цикл
		ЭлементКолонка.СписокВыбора.Добавить(ДанныеВыбора.Значение, ДанныеВыбора.Представление, , ДанныеВыбора.Картинка);
	КонецЦикла;
	
	Если ПолнаяКартинкаВидна Тогда
		КоординатыВыделения = ДанныеЯчейки.КоординатыКартинки;
		СтрокВИзображенииВыделения = ДанныеЯчейки.СтрокВИзображении;
		ПодключитьОбработчикОжидания("Подключаемый_ПриблизитьПоКоординатам", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриблизитьПоКоординатам() Экспорт
	
	ПриблизитьПоКоординатам(КоординатыВыделения, СтрокВИзображенииВыделения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаВыбораПоля(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИмяРеквизита = СтрЗаменить(Элемент.Имя, "Шапка", "");
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Строка") Тогда
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")
			И ВыбранноеЗначение.Свойство("СозданВФормеБРД") Тогда
			
			ВыбранноеЗначение = ВыбранноеЗначение.Ссылка;
			СозданНовыйЭлемент = Истина;
		Иначе
			// Выбрали значение из выпадающего списка
			СозданНовыйЭлемент = Ложь;
		КонецЕсли;
		
		Если СозданНовыйЭлемент Тогда
			Если ДанныеФоновыхОпераций.ИзмененияСписковВыбораШапки.Найти(ИмяРеквизита) = Неопределено Тогда
				ДанныеФоновыхОпераций.ИзмененияСписковВыбораШапки.Добавить(ИмяРеквизита);
			КонецЕсли;
			ЗаполнениеСписковВыбораШапки();
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если ИмяРеквизита = "Организация" Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЭтойСтроки = ТекущийЭлемент.ТекущиеДанные;
	ЗначениеПодходящейСтроки = ДанныеЭтойСтроки[ИмяРеквизита];
	
	ДополнительныеДанные = Новый Структура;
	ДополнительныеДанные.Вставить("РаспознанныйДокумент", ДанныеЭтойСтроки.Ссылка);
	ДополнительныеДанные.Вставить("ИмяТаблицы", "РеквизитыДокумента");
	
	ИменаРеквизитов = РаспознаваниеДокументовСлужебныйКлиентСервер.ИменаРеквизитовКонтрагентИОрганизация(ДанныеЭтойСтроки);
	Если ИменаРеквизитов.Свойство(ИмяРеквизита) Тогда
		ИмяРеквизита = ИменаРеквизитов[ИмяРеквизита];
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("ИмяЭлемента", ИмяРеквизита);
	ПараметрыОткрытия.Вставить("ДополнительныеДанные", ДополнительныеДанные);
	ПараметрыОткрытия.Вставить("СоздаваемыйОбъект", ЗначениеПодходящейСтроки);
	
	ОткрытьФорму("Документ.РаспознанныйДокумент.Форма.СозданиеЭлементаСОтображениемКартинки", ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриблизитьПоКоординатам(Координаты, СтрокВИзображении)
	
	Если HTMLДокументСформирован Тогда
		Если РаспознаваниеДокументовКлиентСервер.ВсеКоординатыНулевые(Координаты) Тогда
			Элементы.ПолеПросмотра.Документ.defaultView.clean_bbox();
		Иначе
			Элементы.ПолеПросмотра.Документ.defaultView.zoom_to_bbox(Координаты[0], Координаты[1], Координаты[2], Координаты[3], СтрокВИзображении);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеЯчейкиШапкиНаСервере(ПараметрыПолучения)
	
	Если ПараметрыПолучения.ИмяРеквизита = "Контрагент" Или ПараметрыПолучения.ИмяРеквизита = "Организация" Тогда
		ИменаРеквизитов = РаспознаваниеДокументовСлужебныйКлиентСервер.ИменаРеквизитовКонтрагентИОрганизация(ПараметрыПолучения);
		Если ИменаРеквизитов.Свойство(ПараметрыПолучения.ИмяРеквизита) Тогда
			ИмяРеквизита = ИменаРеквизитов[ПараметрыПолучения.ИмяРеквизита];
		Иначе
			ИмяРеквизита = ПараметрыПолучения.ИмяРеквизита;
		КонецЕсли;
	ИначеЕсли ПараметрыПолучения.ИмяРеквизита = "БанковскийСчет" Тогда
		ИменаРеквизитов = ИмяРеквизитаБанковскийСчет(ПараметрыПолучения);
		Если ИменаРеквизитов.Свойство(ПараметрыПолучения.ИмяРеквизита) Тогда
			ИмяРеквизита = ИменаРеквизитов[ПараметрыПолучения.ИмяРеквизита];
		Иначе
			ИмяРеквизита = ПараметрыПолучения.ИмяРеквизита;
		КонецЕсли;
	Иначе
		ИмяРеквизита = ПараметрыПолучения.ИмяРеквизита;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ПараметрыПолучения.Ссылка);
	Запрос.УстановитьПараметр("ИмяРеквизита", ИмяРеквизита);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаспознанныйДокументРеквизитыДокумента.РаспознанныйТекст КАК РаспознанныйТекст,
	|	РаспознанныйДокументРеквизитыДокумента.ОбластьИзображения КАК ОбластьИзображения,
	|	РаспознанныйДокументРеквизитыДокумента.КоординатаX0 КАК КоординатаX0,
	|	РаспознанныйДокументРеквизитыДокумента.КоординатаY0 КАК КоординатаY0,
	|	РаспознанныйДокументРеквизитыДокумента.КоординатаX1 КАК КоординатаX1,
	|	РаспознанныйДокументРеквизитыДокумента.КоординатаY1 КАК КоординатаY1,
	|	РаспознанныйДокументРеквизитыДокумента.СтрокВИзображении КАК СтрокВИзображении
	|ИЗ
	|	Документ.РаспознанныйДокумент.РеквизитыДокумента КАК РаспознанныйДокументРеквизитыДокумента
	|ГДЕ
	|	РаспознанныйДокументРеквизитыДокумента.Ссылка = &Ссылка
	|	И РаспознанныйДокументРеквизитыДокумента.ИмяРеквизита = &ИмяРеквизита
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СписокВыбораРеквизитовРаспознаваниеДокументов.Значение КАК Значение,
	|	СписокВыбораРеквизитовРаспознаваниеДокументов.ДополнительноеЗначение КАК ДополнительноеЗначение,
	|	СписокВыбораРеквизитовРаспознаваниеДокументов.Уверенность КАК Уверенность,
	|	СписокВыбораРеквизитовРаспознаваниеДокументов.НайденВТаблицеСоответствий КАК НайденВТаблицеСоответствий
	|ИЗ
	|	РегистрСведений.СписокВыбораРеквизитовРаспознаваниеДокументов КАК СписокВыбораРеквизитовРаспознаваниеДокументов
	|ГДЕ
	|	СписокВыбораРеквизитовРаспознаваниеДокументов.РаспознанныйДокумент = &Ссылка
	|	И СписокВыбораРеквизитовРаспознаваниеДокументов.ИмяРеквизита = &ИмяРеквизита
	|	И &ДополнительныйОтбор
	|
	|УПОРЯДОЧИТЬ ПО
	|	НайденВТаблицеСоответствий УБЫВ,
	|	Уверенность УБЫВ";
	
	Если ПараметрыПолучения.ИмяРеквизита = "БанковскийСчет" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительныйОтбор",
			"ВЫРАЗИТЬ(СписокВыбораРеквизитовРаспознаваниеДокументов.Значение КАК Справочник.БанковскиеСчета).Владелец = &Владелец");
		Запрос.УстановитьПараметр("Владелец", ПараметрыПолучения.ИсточникПоляБанковскийСчетВладелец);
	ИначеЕсли ПараметрыПолучения.ИмяРеквизита = "Договор" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительныйОтбор",
			"ВЫРАЗИТЬ(СписокВыбораРеквизитовРаспознаваниеДокументов.Значение КАК Справочник.ДоговорыКонтрагентов).Владелец = &Контрагент
			|	И ВЫРАЗИТЬ(СписокВыбораРеквизитовРаспознаваниеДокументов.Значение КАК Справочник.ДоговорыКонтрагентов).ВидДоговора В(&ВидыДоговора)
			|	И ВЫРАЗИТЬ(СписокВыбораРеквизитовРаспознаваниеДокументов.Значение КАК Справочник.ДоговорыКонтрагентов).Организация = &Организация");
		Запрос.УстановитьПараметр("Контрагент", ПараметрыПолучения.ИсточникПоляДоговорКонтрагент);
		Запрос.УстановитьПараметр("ВидыДоговора", ПараметрыПолучения.ИсточникПоляДоговорВидДоговора);
		Запрос.УстановитьПараметр("Организация", ПараметрыПолучения.ИсточникПоляДоговорОрганизация);
	Иначе
		Запрос.УстановитьПараметр("ДополнительныйОтбор", Истина);
	КонецЕсли;
	
	Результат = Новый Структура;
	Если ПараметрыПолучения.ОбновитьПолнуюКартинку Тогда
		Результат.Вставить("АдресПолнойКартинки", ПолучитьАдресПолнойКартинки(ПараметрыПолучения.Ссылка, ПараметрыПолучения.УникальныйИдентификатор));
	КонецЕсли;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Выборка = МассивРезультатов[0].Выбрать();
	Если Выборка.Следующий() Тогда
		КоординатыКартинки = Новый Массив(4);
		КоординатыКартинки[0] = Выборка.КоординатаX0;
		КоординатыКартинки[1] = Выборка.КоординатаY0;
		КоординатыКартинки[2] = Выборка.КоординатаX1;
		КоординатыКартинки[3] = Выборка.КоординатаY1;
		
		РаспознанныйТекст = Выборка.РаспознанныйТекст;
		СтрокВИзображении = Выборка.СтрокВИзображении;
		
		ДвоичныеДанные = Выборка.ОбластьИзображения.Получить();
		КартинкаВнутриHTML = КартинкаКакТекстHTML(ДвоичныеДанные);
		Результат.Вставить("КартинкаВнутриHTML", КартинкаВнутриHTML);
	Иначе
		КоординатыКартинки = Неопределено;
		РаспознанныйТекст = "";
		СтрокВИзображении = 0;
	КонецЕсли;
	
	ЗначенияВыбора = Новый Массив;
	Выборка = МассивРезультатов[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		ВариантВыбора = Новый Структура("Значение, ДополнительноеЗначение, Уверенность, НайденВТаблицеСоответствий");
		ЗаполнитьЗначенияСвойств(ВариантВыбора, Выборка);
		ЗначенияВыбора.Добавить(ВариантВыбора);
	КонецЦикла;
	
	Результат.Вставить("РаспознанныйТекст", РаспознанныйТекст);
	Результат.Вставить("КоординатыКартинки", КоординатыКартинки);
	Результат.Вставить("СтрокВИзображении", СтрокВИзображении);
	Результат.Вставить("ЗначенияВыбора", ЗначенияВыбора);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьАдресПолнойКартинки(Ссылка, ИдентификаторФормы)
	
	ИсходноеИзображение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ИсходноеИзображение");
	АдресПолнойКартинки = ПоместитьВоВременноеХранилище(ИсходноеИзображение.Получить(), ИдентификаторФормы);
	
	Возврат АдресПолнойКартинки;
	
КонецФункции

&НаСервереБезКонтекста
Функция КартинкаКакТекстHTML(ДвоичныеДанные, Позиция = "Сбоку")
	
	DataImage = Base64Строка(ДвоичныеДанные);
	DataImage = СтрЗаменить(DataImage, Символы.ВК, "");
	DataImage = СтрЗаменить(DataImage, Символы.ПС, "");
	DataImage = "data:image/jpg;base64," + DataImage;
	
	ШаблонHTML = 
		"<html>
		|<head>
		|  <style type=""text/css"">
		|    html, body { width: 100%; height:100%; margin: 0; padding: 0; }
		|    body {
		|      background-image: url('{{ DataImage }}');
		|      background-size: contain;
		|      background-repeat: no-repeat;
		|      background-position: left {{ Position }};
		|      scrollbar-width: none;
		|    }
		|    ::-webkit-scrollbar { display: none; }
		|  </style>
		|</head>
		|<body>
		|</body>
		|<html>";
	
	Результат = СтрЗаменить(ШаблонHTML, "{{ DataImage }}", DataImage);
	Результат = СтрЗаменить(Результат, "{{ Position }}", ?(Позиция = "Сбоку", "center", "bottom"));
	
	Возврат Результат;
	
КонецФункции

#Область ЗаписьШапкиВФоне

&НаКлиенте
Процедура ЗаполнениеСписковВыбораШапки()
	
	Результат = ЗаполнениеСписковВыбораШапкиНаСервере(ДанныеФоновыхОпераций.ИзмененияСписковВыбораШапки, УникальныйИдентификатор);
	Если Результат.ОперацияЗапущена Тогда
		
		ДанныеФоновыхОпераций.ИзмененияСписковВыбораШапки.Очистить();
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗаполнениеСписковВыбораШапкиЗавершение", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат.ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
		
	Иначе
		ПовторноЗапуститьЗаполнениеСписковВыбораШапки = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнениеСписковВыбораШапкиНаСервере(ИменаРеквизитов, ИдентификаторФормы)
	
	Результат = Новый Структура("ОперацияЗапущена, ДлительнаяОперация", Ложь);
	
	КлючЗадания = "ГрупповаяОбработкаРаспознанныхДокументовСпискиВыбораШапки";
	
	ОтборЗаданий = Новый Структура;
	ОтборЗаданий.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	ОтборЗаданий.Вставить("Ключ", КлючЗадания);
	
	УстановитьПривилегированныйРежим(Истина);
	Отказ = (ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборЗаданий).Количество() > 0);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не Отказ Тогда
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
		ПараметрыВыполнения.КлючФоновогоЗадания = КлючЗадания;
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Групповой ввод: обновление списков выбора шапки'");
		
		ИмяМетода = "РаспознаваниеДокументовСлужебный.ЗаполнитьСпискиВыбораРеквизитаШапкиДокументов";
		
		РаспознанныеДокументы = Новый Массив;
		ТаблицаСортировки = РеквизитыШапки.Выгрузить(, "Ссылка, Контрагент");
		ТаблицаСортировки.Сортировать("Контрагент"); // В начале будут строки с незаполненным Контрагентом
		Для Каждого СтрокаТаблицы Из ТаблицаСортировки Цикл
			РаспознанныеДокументы.Добавить(СтрокаТаблицы.Ссылка);
		КонецЦикла;
		
		ПараметрыОперации = Новый Структура;
		ПараметрыОперации.Вставить("ИменаРеквизитов", ИменаРеквизитов);
		ПараметрыОперации.Вставить("РаспознанныеДокументы", РаспознанныеДокументы);
		
		Результат.ОперацияЗапущена = Истина;
		Результат.ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(ИмяМетода, ПараметрыОперации, ПараметрыВыполнения);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнениеСписковВыбораШапкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда // отменено пользователем
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Результат.ПодробноеПредставлениеОшибки;
		Сообщение.Сообщить();
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		Если ПовторноЗапуститьЗаполнениеСписковВыбораШапки Тогда
			ПовторноЗапуститьЗаполнениеСписковВыбораШапки = Ложь;
			ЗаполнениеСписковВыбораШапки();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьФоновоеЗаданиеЗаписиРеквизитовШапки()
	
	Результат = ЗапуститьФоновоеЗаданиеЗаписиРеквизитовШапкиНаСервере(ДанныеФоновыхОпераций.ИзмененияРеквизитовШапки, УникальныйИдентификатор);
	Если Результат.ОперацияЗапущена Тогда
		
		ДанныеФоновыхОпераций.ИзмененияРеквизитовШапки.Очистить();
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗапуститьФоновоеЗаданиеЗаписиРеквизитовШапкиЗавершение", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат.ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
		
	Иначе
		ПовторноЗапуститьЗаполнениеРеквизитовШапки = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапуститьФоновоеЗаданиеЗаписиРеквизитовШапкиНаСервере(ПараметрыОперации, ИдентификаторФормы)
	
	Результат = Новый Структура("ОперацияЗапущена, ДлительнаяОперация", Ложь);
	
	КлючЗадания = "ГрупповаяОбработкаРаспознанныхДокументовРеквизитовШапки";
	
	ОтборЗаданий = Новый Структура;
	ОтборЗаданий.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	ОтборЗаданий.Вставить("Ключ", КлючЗадания);
	
	УстановитьПривилегированныйРежим(Истина);
	Отказ = (ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборЗаданий).Количество() > 0);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не Отказ Тогда
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
		ПараметрыВыполнения.КлючФоновогоЗадания = КлючЗадания;
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Групповой ввод реквизитов шапки'");
		
		ИмяМетода = "Документы.РаспознанныйДокумент.ЗаписатьИзмененияРеквизитов";
		
		Результат.ОперацияЗапущена = Истина;
		Результат.ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(ИмяМетода, ПараметрыОперации, ПараметрыВыполнения);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗапуститьФоновоеЗаданиеЗаписиРеквизитовШапкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда // отменено пользователем
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Результат.ПодробноеПредставлениеОшибки;
		Сообщение.Сообщить();
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		Если ПовторноЗапуститьЗаполнениеРеквизитовШапки Тогда
			ПовторноЗапуститьЗаполнениеРеквизитовШапки = Ложь;
			ЗапуститьФоновоеЗаданиеЗаписиРеквизитовШапки();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыДублей

&НаКлиенте
Функция ПодсчетНезаполненныхСтрокДублей()
	
	КоличествоНеЗаполнено = 0;
	Для Каждого СтрокаТаблицы Из ТаблицаДублей Цикл
		Если Не СтрокаТаблицы.ЕстьОсновной Тогда
			КоличествоНеЗаполнено = КоличествоНеЗаполнено + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат КоличествоНеЗаполнено;
	
КонецФункции

&НаКлиенте
Процедура ПерейтиНаСтраницуДублиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ТекущийШаг = ДополнительныеПараметры.ИмяШага;
		ПерейтиНаСтраницуДублиНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерейтиНаСтраницуДублиНаСервере()
	
	ТекущаяСтрокаДублей = -1;
	Элементы.СтраницаДубли.Видимость = Истина; // чтобы обновить видимость
	Элементы.СтраницыШаги.ТекущаяСтраница = Элементы.СтраницаДубли;
	ВыделитьШагТекущейСтраницы();
	Элементы.КнопкаНазад.Видимость = Истина;
	
	Если Не ДублиНайдены Тогда
		ЗаполнитьТаблицуДублей();
		СтрокаТаблицы = ПоляПросмотраДублей.Добавить();
		СтрокаТаблицы.ПолеПросмотра = РаспознаваниеДокументовСлужебный.МакетОтображенияКартинкиДокументаHTML();
		СтрокаТаблицы = ПоляПросмотраДублей.Добавить();
		СтрокаТаблицы.ПолеПросмотра = РаспознаваниеДокументовСлужебный.МакетОтображенияКартинкиДокументаHTML();
		
		ДублиНайдены = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуДублей()
	
	// Первым должен стать наилучший из дублей. А лучшим является дубль:
	//	1. С бОльшим количеством печатей
	//	2. С бОльшим количество строк в табличной части
	//	3. С меньшим количеством ошибок в табличной части
	//	4. С меньшим количеством ошибок по документу в целом
	
	РаспознанныеДокументы = РеквизитыШапки.Выгрузить(, "Ссылка").ВыгрузитьКолонку("Ссылка");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РаспознанныеДокументы", РаспознанныеДокументы);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаспознанныйДокументПометкиНаДокументе.Ссылка КАК Ссылка,
	|	КОЛИЧЕСТВО(РаспознанныйДокументПометкиНаДокументе.ТипПометки) КАК Печатей
	|ПОМЕСТИТЬ КоличествоПечатей
	|ИЗ
	|	Документ.РаспознанныйДокумент.ПометкиНаДокументе КАК РаспознанныйДокументПометкиНаДокументе
	|ГДЕ
	|	РаспознанныйДокументПометкиНаДокументе.Ссылка В(&РаспознанныеДокументы)
	|	И РаспознанныйДокументПометкиНаДокументе.ТипПометки = ЗНАЧЕНИЕ(Перечисление.ТипыПометокРаспознанногоДокумента.Печать)
	|
	|СГРУППИРОВАТЬ ПО
	|	РаспознанныйДокументПометкиНаДокументе.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаспознанныйДокументРеквизитыТабличныхЧастей.Ссылка КАК Ссылка,
	|	МАКСИМУМ(РаспознанныйДокументРеквизитыТабличныхЧастей.НомерСтрокиТЧ) КАК СтрокТЧ
	|ПОМЕСТИТЬ КоличествоСтрокТЧ
	|ИЗ
	|	Документ.РаспознанныйДокумент.РеквизитыТабличныхЧастей КАК РаспознанныйДокументРеквизитыТабличныхЧастей
	|ГДЕ
	|	РаспознанныйДокументРеквизитыТабличныхЧастей.Ссылка В(&РаспознанныеДокументы)
	|	И НЕ РаспознанныйДокументРеквизитыТабличныхЧастей.СтрокаУдалена
	|
	|СГРУППИРОВАТЬ ПО
	|	РаспознанныйДокументРеквизитыТабличныхЧастей.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаспознанныйДокумент.Ссылка КАК Ссылка,
	|	РаспознанныйДокумент.Статус КАК Статус,
	|	РаспознанныйДокумент.Направление КАК Направление,
	|	ВЫБОР
	|		КОГДА РаспознанныйДокумент.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияРаспознанногоДокумента.Входящий)
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК НаправлениеДокумента,
	|	РаспознанныйДокумент.ТипДокумента КАК ТипДокумента,
	|	РаспознанныйДокумент.НомерДокумента КАК НомерДокумента,
	|	РаспознанныйДокумент.ДатаДокумента КАК ДатаДокумента,
	|	РаспознанныйДокумент.СуммаДокумента КАК ИтогоВсего,
	|	РаспознанныйДокумент.Контрагент КАК Контрагент,
	|	РаспознанныйДокумент.Организация КАК Организация,
	|	РаспознанныйДокумент.Наименование КАК Наименование,
	|	РаспознанныйДокумент.КоличествоОшибокВТаблицах КАК КоличествоОшибокВТаблицах,
	|	РаспознанныйДокумент.КоличествоОшибок КАК КоличествоОшибок
	|ПОМЕСТИТЬ ОбщийСписок
	|ИЗ
	|	Документ.РаспознанныйДокумент КАК РаспознанныйДокумент
	|ГДЕ
	|	РаспознанныйДокумент.Ссылка В(&РаспознанныеДокументы)
	|	И РаспознанныйДокумент.НомерДокумента <> """"
	|	И РаспознанныйДокумент.ДатаДокумента <> ДАТАВРЕМЯ(1, 1, 1)
	|	И РаспознанныйДокумент.СуммаДокумента <> 0
	|	И РаспознанныйДокумент.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	И РаспознанныйДокумент.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбщийСписок.Ссылка КАК Ссылка,
	|	ОбщийСписок.Статус КАК Статус,
	|	ОбщийСписок.Направление КАК Направление,
	|	ОбщийСписок.НаправлениеДокумента КАК НаправлениеДокумента,
	|	ОбщийСписок.ТипДокумента КАК ТипДокумента,
	|	ОбщийСписок.НомерДокумента КАК НомерДокумента,
	|	ОбщийСписок.ДатаДокумента КАК ДатаДокумента,
	|	ОбщийСписок.ИтогоВсего КАК ИтогоВсего,
	|	ОбщийСписок.Контрагент КАК Контрагент,
	|	ОбщийСписок.Организация КАК Организация,
	|	ОбщийСписок.Наименование КАК Наименование,
	|	ЕСТЬNULL(КоличествоПечатей.Печатей, 0) КАК Печатей,
	|	ЕСТЬNULL(КоличествоСтрокТЧ.СтрокТЧ, 0) КАК СтрокТЧ,
	|	ОбщийСписок.КоличествоОшибокВТаблицах КАК ОшибокТЧ,
	|	ОбщийСписок.КоличествоОшибок КАК ОшибокВсего
	|ИЗ
	|	ОбщийСписок КАК ОбщийСписок
	|		ЛЕВОЕ СОЕДИНЕНИЕ КоличествоПечатей КАК КоличествоПечатей
	|		ПО ОбщийСписок.Ссылка = КоличествоПечатей.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ КоличествоСтрокТЧ КАК КоличествоСтрокТЧ
	|		ПО ОбщийСписок.Ссылка = КоличествоСтрокТЧ.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбщийСписок КАК ОбщийСписокДубли
	|		ПО ОбщийСписок.НомерДокумента = ОбщийСписокДубли.НомерДокумента
	|			И ОбщийСписок.ДатаДокумента = ОбщийСписокДубли.ДатаДокумента
	|			И ОбщийСписок.ИтогоВсего = ОбщийСписокДубли.ИтогоВсего
	|			И ОбщийСписок.Контрагент = ОбщийСписокДубли.Контрагент
	|			И ОбщийСписок.Организация = ОбщийСписокДубли.Организация
	|			И ОбщийСписок.Направление = ОбщийСписокДубли.Направление
	|			И ОбщийСписок.ТипДокумента = ОбщийСписокДубли.ТипДокумента
	|			И ОбщийСписок.Ссылка <> ОбщийСписокДубли.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	Контрагент,
	|	Организация,
	|	ИтогоВсего,
	|	НомерДокумента,
	|	Печатей УБЫВ,
	|	СтрокТЧ УБЫВ,
	|	ОшибокТЧ,
	|	ОшибокВсего";
	
	ПараметрыСравнения = "НомерДокумента, ДатаДокумента, ИтогоВсего, Контрагент, Организация, Направление, ТипДокумента";
	ТекущаяГруппа = Новый Структура(ПараметрыСравнения);
	
	ТаблицаДублей.Очистить();
	
	СтрокаТаблицы = Неопределено;
	КоличествоДублей = 0;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		Элементы.СтраницыЕстьНетДублей.ТекущаяСтраница = Элементы.СтраницаНетДублей;
		Возврат;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		Если ЭтоНоваяГруппаДублей(ТекущаяГруппа, Выборка) Тогда
			ЗаполнитьЗначенияСвойств(ТекущаяГруппа, Выборка);
			
			Если СтрокаТаблицы <> Неопределено Тогда
				СтрокаТаблицы.ЗначенияРеквизитов = СтрокаТаблицы.ЗначенияРеквизитов + Символы.ПС + КоличествоДублей;
			КонецЕсли;
			КоличествоДублей = 1;
			
			СтрокаТаблицы = ТаблицаДублей.Добавить();
			СтрокаТаблицы.ИменаРеквизитов = НСтр("ru = 'Тип док-та:
				|Номер:
				|Дата:
				|Контрагент:
				|Организация:
				|Сумма:
				|Дублей:'");
			СтрокаТаблицы.ЗначенияРеквизитов =
				СтрШаблон(НСтр("ru = '%1
				|%2
				|%3
				|%4
				|%5
				|%6'"),
				Выборка.ТипДокумента,
				Выборка.НомерДокумента,
				Формат(Выборка.ДатаДокумента, "ДФ=dd.MM.yyyy"),
				Выборка.Контрагент,
				Выборка.Организация,
				Выборка.ИтогоВсего
			);
			
		Иначе
			КоличествоДублей = КоличествоДублей + 1;
		КонецЕсли;
		
		НоваяСтрока = СтрокаТаблицы.РаспознанныеДокументы.Добавить();
		НоваяСтрока.Ссылка = Выборка.Ссылка;
	КонецЦикла;
	
	Если СтрокаТаблицы <> Неопределено Тогда
		СтрокаТаблицы.ЗначенияРеквизитов = СтрокаТаблицы.ЗначенияРеквизитов + Символы.ПС + КоличествоДублей;
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоНоваяГруппаДублей(ТекущаяГруппа, НоваяГруппа)
	
	Для Каждого КлючЗначение Из ТекущаяГруппа Цикл
		Если КлючЗначение.Значение <> НоваяГруппа[КлючЗначение.Ключ] Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПриАктивизацииСтрокиДублей() Экспорт
	
	Если ТекущаяСтрокаДублей = Элементы.ТаблицаДублей.ТекущаяСтрока Тогда
		Возврат;
	КонецЕсли;
	ТекущаяСтрокаДублей = Элементы.ТаблицаДублей.ТекущаяСтрока;
	ТекущиеДанные = Элементы.ТаблицаДублей.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		// Дублей нет
		Возврат;
	КонецЕсли;
	
	ДанныеДублей = ДанныеДублейНаСервере(ТаблицаДублей.Индекс(ТекущиеДанные));
	
	ПодключитьОбработчикОжидания("Подключаемый_ЗагрузитьКартинкиДублей", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗагрузитьКартинкиДублей() Экспорт
	
	СколькоHTMLДолжноБытьВидно = Элементы.ТаблицаДублей.ТекущиеДанные.РаспознанныеДокументы.Количество();
	СколькоHTMLСформировано = 0;
	Для Каждого СтрокаHTMLСформирован Из HTMLДублейСформирован Цикл
		Если СтрокаHTMLСформирован.Значение Тогда
			СколькоHTMLСформировано = СколькоHTMLСформировано + 1;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если СколькоHTMLДолжноБытьВидно > СколькоHTMLСформировано Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ЗагрузитьКартинкиДублей", 0.3, Истина);
		Возврат;
	КонецЕсли;
	
	Если ПолученыДанныеСтрокиДублей <> Элементы.ТаблицаДублей.ТекущаяСтрока Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ЗагрузитьКартинкиДублей", 0.3, Истина);
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДублей Из Элементы.ТаблицаДублей.ТекущиеДанные.РаспознанныеДокументы Цикл
		Ид = Элементы.ТаблицаДублей.ТекущиеДанные.РаспознанныеДокументы.Индекс(СтрокаДублей);
		Если Элементы["ПолеПросмотра" + Ид].Документ = Неопределено Тогда
			ПодключитьОбработчикОжидания("Подключаемый_ЗагрузитьКартинкиДублей", 0.3, Истина);
			Возврат;
		КонецЕсли;
		ДвоичныеДанные = ДанныеДублей.Получить(СтрокаДублей.Ссылка);
		ЗагрузитьКартинкуПоАдресу(Элементы["ПолеПросмотра" + Ид], ДвоичныеДанные);
		
		ДокументHTML = ДокументHTML(Элементы["ПолеПросмотра" + Ид]);
		Если ДокументHTML = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументHTML.showStatusStrip(СтрокаКнопокДляДублей);
		ДокументHTML.setMain(СтрокаДублей.Основной);
		ДокументHTML.setDuplicate(Не СтрокаДублей.УбратьИзДублей)
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКартинкуПоАдресу(ЭлементФормы, ДвоичныеДанные)
	
	Если ДвоичныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	DataImage = Base64Строка(ДвоичныеДанные);
	DataImage = СтрЗаменить(DataImage, Символы.ВК, "");
	DataImage = СтрЗаменить(DataImage, Символы.ПС, "");
	
	Если ЭлементФормы.Документ <> Неопределено Тогда
		ЭлементКартинкиПоляHTML = ЭлементФормы.Документ.getElementById("image_setter");
		Если ЭлементКартинкиПоляHTML <> Неопределено Тогда
			ЭлементКартинкиПоляHTML.setAttribute("data-img", DataImage);
			ЭлементКартинкиПоляHTML.click();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеДублейНаСервере(ИндексСтроки)
	
	ПараметрыПолучения = Новый Структура;
	ПараметрыПолучения.Вставить("РаспознанныеДокументы", ТаблицаДублей[ИндексСтроки].РаспознанныеДокументы.Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	ПолейПросмотра = 2 * Элементы.ГруппаКратинкиДублей.ПодчиненныеЭлементы.Количество();
	КоличествоДокументов = ПараметрыПолучения.РаспознанныеДокументы.Количество();
	Если ПолейПросмотра < КоличествоДокументов Тогда
		
		Пока ПолейПросмотра < КоличествоДокументов Цикл
			ПолейПросмотра = ПолейПросмотра + 2;
			
			СтрокаТаблицы = ПоляПросмотраДублей.Добавить();
			СтрокаТаблицы.ПолеПросмотра = РаспознаваниеДокументовСлужебный.МакетОтображенияКартинкиДокументаHTML();
			СтрокаТаблицы = ПоляПросмотраДублей.Добавить();
			СтрокаТаблицы.ПолеПросмотра = РаспознаваниеДокументовСлужебный.МакетОтображенияКартинкиДокументаHTML();
			
			НоваяГруппа = Элементы.Добавить("ГруппаКратинкиДублей" + ПолейПросмотра, Тип("ГруппаФормы"), Элементы.ГруппаКратинкиДублей);
			НоваяГруппа.Вид = Элементы.ГруппаКратинкиДублей2.Вид;
			ЗаполнитьЗначенияСвойств(НоваяГруппа, Элементы.ГруппаКратинкиДублей2, "Отображение, Группировка, ОтображатьЗаголовок");
			
			Для НомерПоля = ПолейПросмотра - 2 По ПолейПросмотра - 1 Цикл
				ГруппаСтраницы = Элементы.Добавить("СтраницыПолеПросмотра" + НомерПоля, Тип("ГруппаФормы"), НоваяГруппа);
				ГруппаСтраницы.Вид = Элементы.СтраницыПолеПросмотра1.Вид;
				ЗаполнитьЗначенияСвойств(ГруппаСтраницы, Элементы.СтраницыПолеПросмотра1, "ОтображениеСтраниц, Подсказка");
				
				ГруппаПоля = Элементы.Добавить("ГруппаПолеПросмотра" + НомерПоля, Тип("ГруппаФормы"), ГруппаСтраницы);
				ГруппаПоля.Вид = Элементы.ГруппаПолеПросмотра1.Вид;
				ЗаполнитьЗначенияСвойств(ГруппаПоля, Элементы.ГруппаПолеПросмотра1, "Группировка, ОтображатьЗаголовок, ЦветФона");
				
				НовыйЭлемент = Элементы.Добавить("ПолеПросмотра" + НомерПоля, Тип("ПолеФормы"), ГруппаПоля);
				НовыйЭлемент.Вид = Элементы.ПолеПросмотра1.Вид;
				НовыйЭлемент.ПутьКДанным = СтрЗаменить(Элементы.ПолеПросмотра1.ПутьКДанным, "1", НомерПоля);
				НовыйЭлемент.УстановитьДействие("ДокументСформирован", "ПолеПросмотраДокументСформирован");
				НовыйЭлемент.УстановитьДействие("ПриНажатии", "ПолеПросмотраПриНажатии");
				
				ЗаполнитьЗначенияСвойств(
					НовыйЭлемент,
					Элементы.ПолеПросмотра1,
					"АвтоМаксимальнаяВысота,
					|АвтоМаксимальнаяШирина,
					|Высота,
					|МаксимальнаяВысота,
					|МаксимальнаяШирина,
					|РастягиватьПоВертикали,
					|РастягиватьПоГоризонтали,
					|Ширина,
					|ВажностьПриОтображении,
					|ВертикальноеПоложение,
					|ВертикальноеПоложениеВГруппе,
					|Видимость,
					|ВысотаЗаголовка,
					|ГоризонтальноеПоложение,
					|ГоризонтальноеПоложениеВГруппе,
					|Доступность,
					|Заголовок,
					|ОтображениеПодсказки,
					|Подсказка,
					|ПоложениеЗаголовка,
					|ПропускатьПриВводе,
					|ТолькоПросмотр,
					|ЦветРамки,
					|ЦветТекстаЗаголовка,
					|ШрифтЗаголовка"
				);
				
				ГруппаПоля = Элементы.Добавить("ГруппаДекорацияПустаяДубль" + НомерПоля, Тип("ГруппаФормы"), ГруппаСтраницы);
				ГруппаПоля.Вид = Элементы.ГруппаДекорацияПустаяДубль1.Вид;
				ЗаполнитьЗначенияСвойств(ГруппаПоля, Элементы.ГруппаДекорацияПустаяДубль1, "Группировка, ОтображатьЗаголовок");
				
				НовыйЭлемент = Элементы.Добавить("ДекорацияПустаяДубль" + НомерПоля, Тип("ДекорацияФормы"), ГруппаПоля);
				НовыйЭлемент.Вид = Элементы.ДекорацияПустаяДубль1.Вид;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Для Ид = 0 По ПолейПросмотра - 1 Цикл
		ГруппаСтраницы = Элементы["СтраницыПолеПросмотра" + Ид];
		Если Ид < КоличествоДокументов Тогда
			ГруппаСтраницы.ТекущаяСтраница = Элементы["ГруппаПолеПросмотра" + Ид];
		Иначе
			ГруппаСтраницы.ТекущаяСтраница = Элементы["ГруппаДекорацияПустаяДубль" + Ид];
		КонецЕсли;
	КонецЦикла;
	
	ИдВидимойСдвоеннойГруппы = 2 * Окр(КоличествоДокументов / 2);
	Ид = ПолейПросмотра;
	Пока Ид > 2 Цикл
		СдвоеннаяГруппа = Элементы["ГруппаКратинкиДублей" + Ид];
		Если Не СдвоеннаяГруппа.Видимость И Ид <= ИдВидимойСдвоеннойГруппы Тогда
			Пока HTMLДублейСформирован.Количество() < Ид Цикл
				HTMLДублейСформирован.Добавить(Ложь);
			КонецЦикла;
			HTMLДублейСформирован[Ид - 1].Значение = Ложь;
			HTMLДублейСформирован[Ид - 2].Значение = Ложь;
			ПоляПросмотраДублей[Ид - 1].ПолеПросмотра = РаспознаваниеДокументовСлужебный.МакетОтображенияКартинкиДокументаHTML();
			ПоляПросмотраДублей[Ид - 2].ПолеПросмотра = РаспознаваниеДокументовСлужебный.МакетОтображенияКартинкиДокументаHTML();
		КонецЕсли;
		Элементы["ГруппаКратинкиДублей" + Ид].Видимость = (Ид <= ИдВидимойСдвоеннойГруппы);
		Ид = Ид - 2;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РаспознанныеДокументы", ПараметрыПолучения.РаспознанныеДокументы);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаспознанныйДокументРеквизитыДокумента.Ссылка КАК Ссылка,
	|	РаспознанныйДокументРеквизитыДокумента.ИсходноеИзображение КАК ИсходноеИзображение
	|ИЗ
	|	Документ.РаспознанныйДокумент КАК РаспознанныйДокументРеквизитыДокумента
	|ГДЕ
	|	РаспознанныйДокументРеквизитыДокумента.Ссылка В(&РаспознанныеДокументы)";
	
	Результат = Новый Соответствие;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.Ссылка, Выборка.ИсходноеИзображение.Получить());
	КонецЦикла;
	
	ПолученыДанныеСтрокиДублей = Элементы.ТаблицаДублей.ТекущаяСтрока;
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыКомплектов

&НаКлиенте
Процедура ПерейтиНаСтраницуКомплектыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ТекущийШаг = ДополнительныеПараметры.ИмяШага;
		ПерейтиНаСтраницуКомплектыНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтметитьДублиОбработанными()
	
	Для Каждого СтрокаДублей Из ТаблицаДублей Цикл
		ОсновнойДокумент = Неопределено;
		ДокументыДубли = Новый Массив;
		ДокументыНеДубли = Новый Массив;
		Для Каждого СтрокаСписка Из СтрокаДублей.РаспознанныеДокументы Цикл
			Если СтрокаСписка.УбратьИзДублей Тогда
				ДокументыНеДубли.Добавить(СтрокаСписка.Ссылка);
				Продолжить;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ОсновнойДокумент) И СтрокаСписка.Основной Тогда
				ДокументыНеДубли.Добавить(СтрокаСписка.Ссылка);
				ОсновнойДокумент = СтрокаСписка.Ссылка;
				Продолжить;
			КонецЕсли;
			
			ДокументыДубли.Добавить(СтрокаСписка.Ссылка);
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(ОсновнойДокумент) И ДокументыДубли.Количество() > 0 Тогда
			// Основным считаем первый документ, т.к. они расположены, чтобы первым был наилучший из дублей
			ДокументыНеДубли.Добавить(ДокументыДубли[0]);
			ОсновнойДокумент = ДокументыДубли[0];
			ДокументыДубли.Удалить(0);
		КонецЕсли;
		
		Для Каждого ДокументНеДубль Из ДокументыНеДубли Цикл
			ДокументОбъект = ДокументНеДубль.ПолучитьОбъект();
			ДокументОбъект.Статус = Перечисления.СтатусыСозданныхДокументовРаспознаваниеДокументов.Новый;
			ДокументОбъект.Записать();
		КонецЦикла;
		
		Для Каждого ДокументДубль Из ДокументыДубли Цикл
			ДокументОбъект = ДокументДубль.ПолучитьОбъект();
			ДокументОбъект.Статус = Перечисления.СтатусыСозданныхДокументовРаспознаваниеДокументов.Обработан;
			ДокументОбъект.Записать();
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПерейтиНаСтраницуКомплектыНаСервере()
	
	// Нужно проверить и отметить обработанными дубли. Это сделано тут для единого серверного вызова
	ОтметитьДублиОбработанными();
	
	Элементы.СтраницыШаги.ТекущаяСтраница = Элементы.СтраницаКомплекты;
	Элементы.СтраницаДубли.Видимость = Ложь; // чтобы обновить видимость
	ВыделитьШагТекущейСтраницы();
	
	Если Не КомплектыНайдены Тогда
		КомплектыНайдены = Истина;
	
		Элементы.ГруппаКнопкиТаблицы.Видимость = Ложь;
		Элементы.ДанныеДокументов.ОтборСтрок = Новый ФиксированнаяСтруктура("НомерКомплекта, Статус",
			0, Перечисления.СтатусыСозданныхДокументовРаспознаваниеДокументов.Новый);
		
		ВыбранныеДокументы = ВсеДокументыКомплектов();
		ВсеДанныеДокументов = РаспознаваниеДокументовКомплекты.ДополнитьДанныеДокументов(ВыбранныеДокументы);
		ДанныеКомплектов = РаспознаваниеДокументовКомплекты.НайтиКомплекты(ВсеДанныеДокументов);
		
		КоличествоКомплектов = ДанныеКомплектов.КоличествоКомплектов;
		
		ВсеДанныеДокументов.ОбщаяТаблицаДокументов.Сортировать("Контрагент Убыв, Организация Убыв, ДатаДокумента Убыв");
		ДанныеДокументов.Загрузить(ВсеДанныеДокументов.ОбщаяТаблицаДокументов);
		
		Для Каждого СтрокаТаблицы Из ДанныеДокументов Цикл
			СтрокаТаблицы.ОшибокДляКомплекта = РаспознаваниеДокументовСлужебный.ПроблемныеРеквизиты(
					СтрокаТаблицы.Ссылка.ПолучитьОбъект(), "ДляКомплекта"
				).Количество();
			Если СтрокаТаблицы.НомерКомплекта = 0 Тогда
				// На форме в списке "не комплектов" отображается количество ошибок, где значение совсем не заполнено
				// (заполненные поля, подсвеченные красным не считаются). Ошибки в комплектах заполняются процедурой ОбновитьОшибкиКомплекта
				СтрокаТаблицы.Ошибок = СтрокаТаблицы.ОшибокДляКомплекта;
			КонецЕсли;
		КонецЦикла;
		
		РезультатОбратнойСвязи = Новый Структура("Комплекты, Отправить", Новый Соответствие, Новый Структура);
		Для НомерКомплекта = 1 По КоличествоКомплектов Цикл
			РезультатОбратнойСвязи.Комплекты.Вставить(НомерКомплекта, Новый Соответствие);
			НовыйКомплектНаСервере(Ложь, НомерКомплекта);
		КонецЦикла;
		НастроитьПанельИОшибкиКомплекта();
		
		ОбратнаяСвязьКомплектов = РезультатОбратнойСвязи.Комплекты;
		Для Каждого СтрокаКомплекта Из ДанныеКомплектов.ТаблицаКомплектов Цикл
			ОбратнаяСвязьКомплектов[СтрокаКомплекта.НомерКомплекта].Вставить(СтрокаКомплекта.Ссылка, "ДобавленАвтоматически");
		КонецЦикла;
		
		ОбновитьКоличествоДокументов();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОшибкиКомплекта(НомерКомплекта)
	
	СтрокиКомплекта = ДанныеДокументов.НайтиСтроки(Новый Структура("НомерКомплекта", НомерКомплекта));
	Если СтрокиКомплекта.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТаблицы = "Комплект" + Формат(НомерКомплекта, "ЧГ=");
	
	ТипКомплекта = СтрокиКомплекта[0].ТипКомплекта;
	Если РаспознаваниеДокументовКомплектыКлиентСервер.ЭтоТипКомплектаМожноОбработать(ТипКомплекта) Тогда
		
		// Определяем основной документ
		ПараметрыДляТипов = Новый Структура("ТипКомплекта, НаправлениеДокумента", ТипКомплекта, СтрокиКомплекта[0].Направление);
		ТипыДокументов1С = РаспознаваниеДокументовКомплектыКлиентСервер.СоздаваемыеДокументыКомплекта(ПараметрыДляТипов);
		
		СтрокаОсновногоДокумента = Неопределено;
		ТипыРаспознанныхДокументов = РаспознаваниеДокументовКомплектыКлиентСервер.ПодходящиеТипыРаспознанногоДокумента(ТипыДокументов1С[0]);
		Для Каждого ТипРаспознанного Из ТипыРаспознанныхДокументов Цикл
			Для Каждого СтрокаКомплекта Из СтрокиКомплекта Цикл
				Если ТипРаспознанного = СтрокаКомплекта.ТипДокумента Тогда
					СтрокаОсновногоДокумента = СтрокаКомплекта;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если СтрокаОсновногоДокумента <> Неопределено Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		СтрокаОсновногоДокумента.Ошибок = РаспознаваниеДокументовСлужебный.ПроблемныеРеквизиты(
				СтрокаОсновногоДокумента.Ссылка.ПолучитьОбъект(), "ДляКомплекта"
			).Количество();
		
		Для Каждого СтрокаТаблицы Из СтрокиКомплекта Цикл
			Если СтрокаТаблицы = СтрокаОсновногоДокумента Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТаблицы.Ошибок = 0;
			
			// Заполнение ошибок для подчиненных документов
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.НомерДокумента) Тогда
				СтрокаТаблицы.Ошибок = СтрокаТаблицы.Ошибок + 1;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.ДатаДокумента) Тогда
				СтрокаТаблицы.Ошибок = СтрокаТаблицы.Ошибок + 1;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Для Каждого СтрокаТаблицы Из СтрокиКомплекта Цикл
			СтрокаТаблицы.Ошибок = РаспознаваниеДокументовСлужебный.ПроблемныеРеквизиты(
					СтрокаТаблицы.Ссылка.ПолучитьОбъект(), "ДляКомплекта"
				).Количество();
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВсеДокументыКомплектов()
	
	РаспознанныеДокументы = РеквизитыШапки.Выгрузить(, "Ссылка").ВыгрузитьКолонку("Ссылка");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РаспознанныеДокументы", РаспознанныеДокументы);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаспознанныйДокумент.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РаспознанныйДокумент КАК РаспознанныйДокумент
	|ГДЕ
	|	РаспознанныйДокумент.Ссылка В(&РаспознанныеДокументы)
	|	И РаспознанныйДокумент.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСозданныхДокументовРаспознаваниеДокументов.Новый)
	|	И РаспознанныйДокумент.ТипДокумента <> ЗНАЧЕНИЕ(Перечисление.ТипыДокументовРаспознаваниеДокументов.НеопознанныйДокумент)
	|	И РаспознанныйДокумент.ТипДокумента <> ЗНАЧЕНИЕ(Перечисление.ТипыДокументовРаспознаваниеДокументов.ПустаяСсылка)";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаСервере
Процедура НовыйКомплектНаСервере(ОбновитьТекущийЭлемент, НомерКомплекта)
	
	Если НомерКомплекта = 0 Тогда
		КоличествоКомплектов = КоличествоКомплектов + 1;
		НомерКомплекта = КоличествоКомплектов;
	КонецЕсли;
	ИмяТаблицы = "Комплект" + Формат(НомерКомплекта, "ЧГ=");
	
	// Просто убрать Автозаполнение у КоманднаяПанель нельзя, нужно полностью скрыть
	// КоманднаяПанель и сделать её аналог
	КнопкиТаблицы = Элементы.Добавить("ГруппаКнопкиТаблицы" + ИмяТаблицы, Тип("ГруппаФормы"), Элементы.ГруппаКомплекты);
	КнопкиТаблицы.Вид = Элементы.ГруппаКнопкиТаблицы.Вид;
	ЗаполнитьЗначенияСвойств(КнопкиТаблицы, Элементы.ГруппаКнопкиТаблицы, "Отображение, Группировка, ОтображатьЗаголовок");
	
	// Заполнение КнопкиТаблицы
	ПанельКомплекта = Элементы.Добавить("ГруппаКоманднаяПанель" + ИмяТаблицы, Тип("ГруппаФормы"), КнопкиТаблицы);
	ПанельКомплекта.Вид = Элементы.ГруппаКоманднаяПанель.Вид;
	ЗаполнитьЗначенияСвойств(ПанельКомплекта, Элементы.ГруппаКоманднаяПанель, "РастягиватьПоГоризонтали");
	
	ДекорацияКомплекта = Элементы.Добавить("ДекорацияТекст" + ИмяТаблицы, Тип("ДекорацияФормы"), КнопкиТаблицы);
	ДекорацияКомплекта.Вид = Элементы.ДекорацияТекст.Вид;
	ЗаполнитьЗначенияСвойств(
		ДекорацияКомплекта,
		Элементы.ДекорацияТекст,
		"АвтоМаксимальнаяШирина,
		|ВертикальноеПоложениеВГруппе,
		|ГоризонтальноеПоложение,
		|Заголовок,
		|РастягиватьПоГоризонтали,
		|Шрифт"
	);
	
	ДекорацияРаздвижная = Элементы.Добавить("ДекорацияРаздвижная" + ИмяТаблицы, Тип("ДекорацияФормы"), КнопкиТаблицы);
	ДекорацияРаздвижная.Вид = Элементы.ДекорацияРаздвижная.Вид;
	ЗаполнитьЗначенияСвойств(
		ДекорацияРаздвижная,
		Элементы.ДекорацияРаздвижная,
		"АвтоМаксимальнаяШирина,
		|ГоризонтальноеПоложение,
		|Заголовок,
		|РастягиватьПоГоризонтали"
	);
	
	НовоеИмяКоманды = Элементы.УдалитьКомплект.Имя + ИмяТаблицы;
	НоваяКоманда = Команды.Добавить(НовоеИмяКоманды);
	ЗаполнитьЗначенияСвойств(НоваяКоманда, Команды.УдалитьКомплект, "Заголовок, Действие, Картинка, Подсказка, Отображение");
	
	КнопкаУдалить = Элементы.Добавить("УдалитьКомплект" + ИмяТаблицы, Тип("КнопкаФормы"), КнопкиТаблицы);
	КнопкаУдалить.ИмяКоманды = НовоеИмяКоманды;
	КнопкаУдалить.Заголовок = Элементы.УдалитьКомплект.Заголовок;
	
	// Заполнение ПанельКомплекта
	ПодменюКомплекта = Элементы.Добавить("ПодменюСозданиеДокумента" + ИмяТаблицы, Тип("ГруппаФормы"), ПанельКомплекта);
	ПодменюКомплекта.Вид = Элементы.ПодменюСозданиеДокумента.Вид;
	ЗаполнитьЗначенияСвойств(
		ПодменюКомплекта,
		Элементы.ПодменюСозданиеДокумента,
		"Видимость, Доступность, Заголовок, Картинка, Отображение, ЦветФона"
	);
	
	Для Каждого ЭлементПодменю Из Элементы.ПодменюСозданиеДокумента.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ЭлементПодменю) = Тип("ГруппаФормы") Тогда
			ГруппаКнопок = Элементы.Добавить(ЭлементПодменю.Имя + ИмяТаблицы, Тип("ГруппаФормы"), ПодменюКомплекта);
			ГруппаКнопок.Вид = ВидГруппыФормы.ГруппаКнопок;
			ГруппаКнопок.Видимость = Ложь;
			Для Каждого КнопкаИзГруппы Из ЭлементПодменю.ПодчиненныеЭлементы Цикл
				НовоеИмяКоманды = КнопкаИзГруппы.Имя + "_" + ИмяТаблицы;
				НоваяКоманда = Команды.Добавить(НовоеИмяКоманды);
				// У копируемой кнопки ИмяКоманды должно совпадать с действием
				НоваяКоманда.Действие = КнопкаИзГруппы.ИмяКоманды;
				
				НоваяКнопка = Элементы.Добавить(КнопкаИзГруппы.Имя + "_" + ИмяТаблицы, Тип("КнопкаФормы"), ГруппаКнопок);
				НоваяКнопка.ИмяКоманды = НовоеИмяКоманды;
				НоваяКнопка.Заголовок = КнопкаИзГруппы.Заголовок;
			КонецЦикла;
		Иначе
			НовоеИмяКоманды = ЭлементПодменю.Имя + "_" + ИмяТаблицы;
			НоваяКоманда = Команды.Добавить(НовоеИмяКоманды);
			// У копируемой кнопки ИмяКоманды должно совпадать с действием
			НоваяКоманда.Действие = ЭлементПодменю.ИмяКоманды;
			
			НоваяКнопка = Элементы.Добавить(ЭлементПодменю.Имя + "_" + ИмяТаблицы, Тип("КнопкаФормы"), ПодменюКомплекта);
			НоваяКнопка.ИмяКоманды = НовоеИмяКоманды;
			НоваяКнопка.Заголовок = ЭлементПодменю.Заголовок;

		КонецЕсли;
	КонецЦикла;
	
	НовоеИмяКоманды = Элементы.НедоступнаяКнопкаСоздать.Имя + ИмяТаблицы;
	НоваяКоманда = Команды.Добавить(НовоеИмяКоманды);
	НоваяКоманда.Действие = "СоздатьДокументыКомплекта";
	
	НоваяКнопка = Элементы.Добавить(Элементы.НедоступнаяКнопкаСоздать.Имя + ИмяТаблицы, Тип("КнопкаФормы"), ПанельКомплекта);
	НоваяКнопка.ИмяКоманды = НовоеИмяКоманды;
	ЗаполнитьЗначенияСвойств(
		НоваяКнопка,
		Элементы.НедоступнаяКнопкаСоздать,
		"Видимость, Доступность, Заголовок, Картинка, Отображение, ЦветФона"
	);
	
	НовоеИмяКоманды = "УбратьЛишниеИзКомплекта" + ИмяТаблицы;
	НоваяКоманда = Команды.Добавить(НовоеИмяКоманды);
	НоваяКоманда.Действие = "УбратьЛишниеИзКомплекта";
	НоваяКоманда.Подсказка = Команды.УбратьЛишниеИзКомплекта.Подсказка;
	
	НоваяКнопка = Элементы.Добавить("УбратьЛишниеИзКомплекта" + ИмяТаблицы, Тип("КнопкаФормы"), ПанельКомплекта);
	НоваяКнопка.ИмяКоманды = НовоеИмяКоманды;
	НоваяКнопка.Заголовок = Элементы.УбратьЛишниеИзКомплекта.Заголовок;
	НоваяКнопка.Доступность = Ложь;
	
	ТаблицаНаФорме = Элементы.Добавить(ИмяТаблицы, Тип("ТаблицаФормы"), Элементы.ГруппаКомплекты);
	ТаблицаНаФорме.ПутьКДанным = "ДанныеДокументов";
	ТаблицаНаФорме.Отображение = ОтображениеТаблицы.Список;
	ТаблицаНаФорме.ОтборСтрок = Новый ФиксированнаяСтруктура("НомерКомплекта", НомерКомплекта);
	ТаблицаНаФорме.ИзменятьСоставСтрок = Ложь;
	ТаблицаНаФорме.РазрешитьНачалоПеретаскивания = Истина;
	ТаблицаНаФорме.РазрешитьПеретаскивание = Истина;
	
	ТаблицаНаФорме.УстановитьДействие("Выбор", "ВсеТаблицыВыбор");
	ТаблицаНаФорме.УстановитьДействие("ПередНачаломИзменения", "ВсеТаблицыПередНачаломИзменения");
	ТаблицаНаФорме.УстановитьДействие("ПередУдалением", "ВсеТаблицыПередУдалением");
	ТаблицаНаФорме.УстановитьДействие("Перетаскивание", "ВсеТаблицыПеретаскивание");
	ТаблицаНаФорме.ВариантУправленияВысотой = ВариантУправленияВысотойТаблицы.ПоСодержимому;
	ТаблицаНаФорме.КоманднаяПанель.Видимость = Ложь;
	
	ЗаполнитьКолонкиРекурсивно(ИмяТаблицы, Элементы.ДанныеДокументов.ПодчиненныеЭлементы, ТаблицаНаФорме);
	
	Если ОбновитьТекущийЭлемент И Не ОбщегоНазначения.ЭтоВебКлиент() Тогда
		ТекущийЭлемент = ТаблицаНаФорме;
	КонецЕсли;
	ОбновитьКоличествоДокументов();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКолонкиРекурсивно(ИмяТаблицы, ЭлементыПеребора, РодительЭлемента)
	
	Для Каждого КолонкаИлиГруппа Из ЭлементыПеребора Цикл
		Если ТипЗнч(КолонкаИлиГруппа) = Тип("ГруппаФормы") Тогда
			НовыйЭлемент = Элементы.Добавить(ИмяТаблицы + КолонкаИлиГруппа.Имя, Тип("ГруппаФормы"), РодительЭлемента);
			НовыйЭлемент.Вид = ВидГруппыФормы.ГруппаКолонок;
			ЗаполнитьКолонкиРекурсивно(ИмяТаблицы, КолонкаИлиГруппа.ПодчиненныеЭлементы, НовыйЭлемент);
		Иначе
			НовыйЭлемент = Элементы.Добавить(ИмяТаблицы + КолонкаИлиГруппа.Имя, Тип("ПолеФормы"), РодительЭлемента);
			НовыйЭлемент.Заголовок = КолонкаИлиГруппа.Заголовок;
			НовыйЭлемент.Вид = КолонкаИлиГруппа.Вид;
			НовыйЭлемент.ПутьКДанным = "ДанныеДокументов." + КолонкаИлиГруппа.Имя;
			НовыйЭлемент.ПоложениеЗаголовка = КолонкаИлиГруппа.ПоложениеЗаголовка;
			Если КолонкаИлиГруппа.Имя = "Ошибок" Тогда
				НовыйЭлемент.Формат = КолонкаИлиГруппа.Формат;
			КонецЕсли;
			НовыйЭлемент.Подсказка = КолонкаИлиГруппа.Подсказка;
			НовыйЭлемент.КартинкаШапки = КолонкаИлиГруппа.КартинкаШапки;
			НовыйЭлемент.Ширина = КолонкаИлиГруппа.Ширина;
			
			Если КолонкаИлиГруппа.Имя = "СтатусРаспознавания" Тогда
				НовыйЭлемент.КартинкаЗначений = БиблиотекаКартинок.КоллекцияСтатусыРаспознаванияДокумента;
			ИначеЕсли КолонкаИлиГруппа.Имя = "НаправлениеДокумента" Тогда
				НовыйЭлемент.КартинкаЗначений = БиблиотекаКартинок.НаправлениеРаспознанногоДокумента;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКоличествоДокументов()
	
	БезКомплектовКоличество = ДанныеДокументов.Выгрузить(Новый Структура("НомерКомплекта", 0), "Ссылка").Количество();
	Элементы.ДекорацияДокументыБезКомплектов.Заголовок = Элементы.ДекорацияДокументыБезКомплектов.Подсказка
		+ СтрШаблон(" (%1)", БезКомплектовКоличество);
	СобранноКомплектов = Элементы.ГруппаКомплекты.ПодчиненныеЭлементы.Количество() / 2;
	// по 2 элемента на комплект: командная панель + таблица
	Элементы.ДекорацияСобранныеКомплекты.Заголовок = Элементы.ДекорацияСобранныеКомплекты.Подсказка
		+ СтрШаблон(" (%1)", СобранноКомплектов);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеДокументаВКомплекте(РаспознанныйДокумент)
	
	СтрокиТаблицы = ДанныеДокументов.НайтиСтроки(Новый Структура("Ссылка", РаспознанныйДокумент));
	КоличествоСтрок = СтрокиТаблицы.Количество();
	Если КоличествоСтрок = 0 Тогда
		Возврат;
	ИначеЕсли СтрокиТаблицы.Количество() > 1 Тогда
		// Сюда не должны попадать. Дополнительная проверка
		ВызватьИсключение НСтр("ru = 'В основной таблице появились дубли документов.'");
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
		ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			РаспознанныйДокумент,
			"ПометкаУдаления, Статус, Направление, ТипДокумента, Наименование, Организация, Контрагент, СуммаДокумента, НомерДокумента, ДатаДокумента",
			Истина);
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеДокумента);
		РаспознаваниеДокументовКомплекты.ДополнитьДанныеДокументовПоСтроке(СтрокаТаблицы);
		СтрокаТаблицы.Ошибок = РаспознаваниеДокументовСлужебный.ПроблемныеРеквизиты(
				РаспознанныйДокумент.ПолучитьОбъект(), "ДляКомплекта"
			).Количество();
		НастроитьПанельИОшибкиКомплекта(СтрокаТаблицы.НомерКомплекта);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПанельИОшибкиКомплекта(НастраиваемыйКомплект = Неопределено)
	
	Если НастраиваемыйКомплект = Неопределено Тогда
		СтрокиДляОбхода = ДанныеДокументов;
	Иначе
		Если НастраиваемыйКомплект = 0 Тогда
			// Т.к. комплекты нумеруются с 1
			Возврат;
		КонецЕсли;
		СтрокиДляОбхода = ДанныеДокументов.НайтиСтроки(Новый Структура("НомерКомплекта", НастраиваемыйКомплект));
		
		// Обновим ТипКомплекта для всех строк этого комплекта
		ТипКомплекта = РаспознаваниеДокументовКомплекты.СформироватьТипКомплекта(СтрокиДляОбхода, "ПоТаблице");
		Для Каждого СтрокаДанных Из СтрокиДляОбхода Цикл
			СтрокаДанных.ТипКомплекта = ТипКомплекта;
		КонецЦикла;
		
		
		ИмяТаблицы = "Комплект" + Формат(НастраиваемыйКомплект, "ЧГ=");
		Если СтрокиДляОбхода.Количество() = 0 Тогда
			Элементы["УбратьЛишниеИзКомплекта" + ИмяТаблицы].Доступность = Ложь;
		Иначе
			
			// Кнопка УбратьЛишние появляется, если:
			// 1 - это комплект неизвестного типа
			// 2 - есть документы разного направления
			
			Если Не Элементы["УбратьЛишниеИзКомплекта" + ИмяТаблицы].Доступность Тогда
				Если Не РаспознаваниеДокументовКомплектыКлиентСервер.ЭтоТипКомплектаМожноОбработать(СтрокиДляОбхода[0].ТипКомплекта) Тогда
					Элементы["УбратьЛишниеИзКомплекта" + ИмяТаблицы].Доступность = Истина;
				Иначе
					Для Каждого СтрокаДанных Из СтрокиДляОбхода Цикл
						Если СтрокаДанных.НаправлениеДокумента <> СтрокиДляОбхода[0].НаправлениеДокумента Тогда // НаправлениеДокумента - это число
							Элементы["УбратьЛишниеИзКомплекта" + ИмяТаблицы].Доступность = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ПройденныеКомплекты = Новый Массив;
	
	Для Каждого СтрокаДанных Из СтрокиДляОбхода Цикл
		Если СтрокаДанных.НомерКомплекта = 0 Тогда
			// Т.к. комплекты нумеруются с 1
			Продолжить;
		КонецЕсли;
		
		Если НастраиваемыйКомплект <> Неопределено И СтрокаДанных.НомерКомплекта <> НастраиваемыйКомплект Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяТаблицы = "Комплект" + Формат(СтрокаДанных.НомерКомплекта, "ЧГ=");
		Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элементы, ИмяТаблицы) Тогда
			// Для удаленных комплектов
			Продолжить;
		КонецЕсли;
		
		Если ПройденныеКомплекты.Найти(СтрокаДанных.НомерКомплекта) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОбновитьОшибкиКомплекта(СтрокаДанных.НомерКомплекта);
		
		Если СтрокаДанных.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий Тогда
			
			Элементы[Элементы.КнопкиРеализация.Имя + ИмяТаблицы].Видимость = Ложь;
			Элементы[Элементы.КнопкиПоступление.Имя + ИмяТаблицы].Видимость = Истина;
			ДоступныеКоманды = РаспознаваниеДокументовКомплектыКлиентСервер.ДоступныеКомандыПоТипуКомплекта(
				СтрокаДанных.Направление, СтрокаДанных.ТипКомплекта);
			Если ДоступныеКоманды[0] = "СоздатьНевозможно" Тогда
				Элементы[Элементы.ПодменюСозданиеДокумента.Имя + ИмяТаблицы].Видимость = Ложь;
				Элементы[Элементы.НедоступнаяКнопкаСоздать.Имя + ИмяТаблицы].Видимость = Истина;
			Иначе
				Элементы[Элементы.ПодменюСозданиеДокумента.Имя + ИмяТаблицы].Видимость = Истина;
				Элементы[Элементы.НедоступнаяКнопкаСоздать.Имя + ИмяТаблицы].Видимость = Ложь;
				Для Каждого КомандаГруппы Из Элементы[Элементы.КнопкиПоступление.Имя + ИмяТаблицы].ПодчиненныеЭлементы Цикл
					ИмяКомандыБезТаблицы = СтрЗаменить(КомандаГруппы.Имя, "_" + ИмяТаблицы, "");
					КомандаГруппы.Видимость = (ДоступныеКоманды.Найти(ИмяКомандыБезТаблицы) <> Неопределено);
				КонецЦикла;
			КонецЕсли;
			
		ИначеЕсли СтрокаДанных.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий Тогда
			
			Элементы[Элементы.КнопкиПоступление.Имя + ИмяТаблицы].Видимость = Ложь;
			Элементы[Элементы.КнопкиРеализация.Имя + ИмяТаблицы].Видимость = Истина;
			ДоступныеКоманды = РаспознаваниеДокументовКомплектыКлиентСервер.ДоступныеКомандыПоТипуКомплекта(
				СтрокаДанных.Направление, СтрокаДанных.ТипКомплекта);
			Если ДоступныеКоманды[0] = "СоздатьНевозможно" Тогда
				Элементы[Элементы.ПодменюСозданиеДокумента.Имя + ИмяТаблицы].Видимость = Ложь;
				Элементы[Элементы.НедоступнаяКнопкаСоздать.Имя + ИмяТаблицы].Видимость = Истина;
			Иначе
				Элементы[Элементы.ПодменюСозданиеДокумента.Имя + ИмяТаблицы].Видимость = Истина;
				Элементы[Элементы.НедоступнаяКнопкаСоздать.Имя + ИмяТаблицы].Видимость = Ложь;
				Для Каждого КомандаГруппы Из Элементы[Элементы.КнопкиРеализация.Имя + ИмяТаблицы].ПодчиненныеЭлементы Цикл
					ИмяКомандыБезТаблицы = СтрЗаменить(КомандаГруппы.Имя, "_" + ИмяТаблицы, "");
					КомандаГруппы.Видимость = (ДоступныеКоманды.Найти(ИмяКомандыБезТаблицы) <> Неопределено);
				КонецЦикла;
			КонецЕсли;
			
		Иначе
			
			Элементы[Элементы.КнопкиРеализация.Имя + ИмяТаблицы].Видимость = Ложь;
			Элементы[Элементы.КнопкиПоступление.Имя + ИмяТаблицы].Видимость = Ложь;
			Элементы[Элементы.КнопкиОтказ.Имя + ИмяТаблицы].Видимость = Истина;
			
		КонецЕсли;
		
		Элементы["ДекорацияТекст" + ИмяТаблицы].Заголовок = НазваниеКомплекта(СтрокаДанных);
		ПройденныеКомплекты.Добавить(СтрокаДанных.НомерКомплекта);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НазваниеКомплекта(СтрокаДанных)
	
	Если СтрокаДанных.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий Тогда
		СтрокаТипДокумента = НСтр("ru = 'Поступление'");
		Если ЗначениеЗаполнено(СтрокаДанных.Контрагент) Тогда
			ВОтКонтрагента = СтрШаблон(НСтр("ru = ' от ""%1""'"), СокрЛП(СтрокаДанных.Контрагент));
		Иначе
			ВОтКонтрагента = "";
		КонецЕсли;
	ИначеЕсли СтрокаДанных.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий Тогда
		СтрокаТипДокумента = НСтр("ru = 'Реализация'");
		Если ЗначениеЗаполнено(СтрокаДанных.Контрагент) Тогда
			ВОтКонтрагента = СтрШаблон(НСтр("ru = ' в ""%1""'"), СокрЛП(СтрокаДанных.Контрагент));
		Иначе
			ВОтКонтрагента = "";
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДанных.ДатаДокумента) Тогда
		ДатаВДекорации = НСтр("ru = ' от '") + Формат(СтрокаДанных.ДатаДокумента, "ДФ=dd.MM.yyyy");
	Иначе
		ДатаВДекорации = "";
	КонецЕсли;
	Результат = СтрШаблон(НСтр("ru = '%1%2%3'"), СтрокаТипДокумента, ДатаВДекорации, ВОтКонтрагента);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УдалитьКомплектНаСервере(НомерКомплекта, УдалятьСтроки, ОтправитьОбратнуюСвязь = Ложь)
	
	СтрокиКомплекта = ДанныеДокументов.НайтиСтроки(Новый Структура("НомерКомплекта", НомерКомплекта));
	Для Каждого СтрокаТаблицы Из СтрокиКомплекта Цикл
		Если Не УдалятьСтроки Тогда
			НоваяСтрока = ДанныеДокументов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.НомерКомплекта = 0;
			НоваяСтрока.ТипКомплекта = "";
			НоваяСтрока.Ошибок = РаспознаваниеДокументовСлужебный.ПроблемныеРеквизиты(
					СтрокаТаблицы.Ссылка.ПолучитьОбъект(), "ДляКомплекта"
				).Количество();
		КонецЕсли;
		ДанныеДокументов.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
	ИмяТаблицы = "Комплект" + Формат(НомерКомплекта, "ЧГ=");
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элементы, ИмяТаблицы) Тогда
		Элементы.Удалить(Элементы[ИмяТаблицы]);
		Элементы.Удалить(Элементы["ГруппаКнопкиТаблицы" + ИмяТаблицы]);
	КонецЕсли;
	
	ТекущиеДействия = РезультатОбратнойСвязи.Комплекты.Получить(НомерКомплекта);
	НовыеДействия = Новый Соответствие;
	Для Каждого КлючЗначение Из ТекущиеДействия Цикл
		Если КлючЗначение.Значение = "ДобавленАвтоматически"
			Или КлючЗначение.Значение = "Удален"
			Или КлючЗначение.Значение = "ОтказОтСоздания" Тогда
			// Действие "Удален" может быть только у автоматически добавленных документов
			
			НовыеДействия.Вставить(КлючЗначение.Ключ, "ОтказОтСоздания");
		КонецЕсли;
	КонецЦикла;
	
	Если ОтправитьОбратнуюСвязь И НовыеДействия.Количество() <> 0 Тогда
		ДанныеПакета = Новый Массив;
		
		ВсеРаспознанные = Новый Массив;
		Для Каждого КлючЗначение Из НовыеДействия Цикл
			ВсеРаспознанные.Добавить(КлючЗначение.Ключ);
		КонецЦикла;
		
		ТипыДокументовВСервисе = РаспознаваниеДокументовСлужебныйКлиентСервер.ПолучитьОбратноеСоответствие(
			Документы.РаспознанныйДокумент.СоответствиеТиповДокументовВСервисеИБРД());
		
		set_id = Строка(Новый УникальныйИдентификатор);
		РаспознанныеДанные = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ВсеРаспознанные,
			"Номер, Направление, ТипДокумента, НомерДокумента, ДатаДокумента, СуммаДокумента, Контрагент, Организация, ИдентификаторРезультата");
		
		Для Каждого КлючЗначение Из РаспознанныеДанные Цикл
			ДанныеДокумента = КлючЗначение.Значение;
			ДопДанныеПакета = РаспознаваниеДокументовКомплектыВызовСервера.ПолучитьОбратнуюСвязьДляСозданногоДокумента(ДанныеДокумента);
			ДопДанныеПакета.Удалить("Статус");
			ДопДанныеПакета.Вставить("set_id", set_id);
			ДопДанныеПакета.Вставить("doc_uuid", ДанныеДокумента.ИдентификаторРезультата);
			ДопДанныеПакета.Вставить("ТипДокумента", ТипыДокументовВСервисе.Получить(ДанныеДокумента.ТипДокумента));
			ДопДанныеПакета.Вставить("ОсновнойДокумент", Ложь);
			ДопДанныеПакета.Вставить("Действие", "ОтказОтСоздания");
			
			ДанныеПакета.Добавить(ДопДанныеПакета);
		КонецЦикла;
		
		Пакет = Новый Структура;
		Пакет.Вставить("set_creation", Новый Структура("set_data", ДанныеПакета));
		РаспознаваниеДокументовКоннекторСлужебный.ПередатьОбратнуюСвязь(КлючЗначение.Значение.ИдентификаторРезультата, Пакет);
	КонецЕсли;
	ОбновитьКоличествоДокументов();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьИСоздатьДокументыПоКомплекту(Форма, ПараметрыСоздания)
	
	#Если Сервер Тогда
		ЗаполнитьПараметрыСозданияНаСервере(ПараметрыСоздания);
		ПолученВариантСозданияКомплекта(ПараметрыСоздания, Форма);
	#Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("ПолученВариантСозданияКомплектаНаКлиенте", Форма);
		ПараметрыФормы = Новый Структура("ПараметрыСоздания", ПараметрыСоздания);
		ОткрытьФорму("Обработка.РаспознаваниеДокументов.Форма.СозданиеКомплекта", ПараметрыФормы, Форма,,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	#КонецЕсли
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПараметрыСозданияНаСервере(ПараметрыСоздания)
	
	РаспознаваниеДокументовКомплекты.ОбновитьИЗаполнитьСвязанныеИСозданныеДокументы(ПараметрыСоздания);
	Для Каждого ЭтотПараметр Из ПараметрыСоздания.СозданныеДокументы Цикл
		Если ЭтотПараметр.Значение.СканУжеПрикреплен Тогда
			ЭтотПараметр.Значение.ПрикрепитьСкан = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#Область СлужебныеИзФормыТорг12

&НаКлиентеНаСервереБезКонтекста
Процедура ОткрытиеФормыДокумента(Форма, ПараметрыОперации, ИмяТаблицы, ДанныеОбработки = Неопределено)
	
	НомерКомплекта = Число(СтрЗаменить(ИмяТаблицы, "Комплект", ""));
	РезультатПроверки = ПроверитьПравилаКомплекта(Форма.ДанныеДокументов, НомерКомплекта);
	
	Если Не РезультатПроверки.ПроверкиПройдены Тогда
		Если ДанныеОбработки <> Неопределено Тогда
			ДанныеОбработки.КомплектовНеУдалосьОбработать = ДанныеОбработки.КомплектовНеУдалосьОбработать + 1;
		КонецЕсли;
		
		#Если Не Сервер Тогда
			ПоказатьПредупреждение(, РезультатПроверки.ТекстСообщения);
		#КонецЕсли
		
		Возврат;
	КонецЕсли;
	
	ДокументыПоТипам = Новый Соответствие;
	СтрокиКомплекта = Форма.ДанныеДокументов.НайтиСтроки(Новый Структура("НомерКомплекта", НомерКомплекта));
	Для Каждого СтрокаТаблицы Из СтрокиКомплекта Цикл
		ДокументыПоТипам.Вставить(СтрокаТаблицы.ТипДокумента, СтрокаТаблицы.Ссылка);
	КонецЦикла;
	
	ПараметрыСоздания = РаспознаваниеДокументовКомплектыКлиентСервер.НовыеПараметрыСозданияКомплекта();
	ПараметрыСоздания.ПараметрыОперации    = ПараметрыОперации;
	ПараметрыСоздания.НаправлениеДокумента = СтрокаТаблицы.Направление;
	ПараметрыСоздания.ТипКомплекта         = РезультатПроверки.ТипКомплекта;
	ПараметрыСоздания.РаспознанныеДокументыПоТипам = ДокументыПоТипам;
	ПараметрыСоздания.ДанныеОбработки      = ДанныеОбработки;
	
	ПараметрыСоздания.Вставить("НомерКомплекта", НомерКомплекта); // Необязательный параметр
	ПроверитьИСоздатьДокументыПоКомплекту(Форма, ПараметрыСоздания);
	
	Если ДанныеОбработки <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ДанныеОбработки, ПараметрыСоздания.ДанныеОбработки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученВариантСозданияКомплектаНаКлиенте(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеНаКлиенте = Новый ОписаниеОповещения("ПолученРезультатСозданияКомплекта", ЭтотОбъект);
	ПолученВариантСозданияКомплекта(Результат, ЭтотОбъект, ОповещениеНаКлиенте);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученРезультатСозданияКомплекта(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.ДанныеОбработки <> Неопределено Тогда
		Для Каждого НомерКомплекта Из Результат.ДанныеОбработки.НомераСозданныхКомплектов Цикл
			УдалитьКомплектНаСервере(НомерКомплекта, Истина);
		КонецЦикла;
		
		Если Результат.ДанныеОбработки.КомплектовНеУдалосьОбработать <> 0 Тогда
			ТекстПредупреждения = НСтр("ru = 'Не удалось обработать комплект. Повторите операцию после исправления ошибок:'");
			ПараметрыФормы = Новый Структура(
				"ОшибкиПроведения, ТекстПредупреждения",
				Результат.ДанныеОбработки.ОшибкиПроведения,
				ТекстПредупреждения
			);
			ОткрытьФорму("Обработка.РаспознаваниеДокументов.Форма.ОтчетПоОшибкам",
				ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПолученВариантСозданияКомплекта(Результат, Форма, ОповещениеНаКлиенте = Неопределено) Экспорт
	
	РаспознаваниеДокументовКомплектыКлиентСервер.ОбработатьДокументыКомплекта(Форма, Результат, ОповещениеНаКлиенте);
	
КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Функция ПроверитьПравилаКомплекта(ДанныеДокументов, НомерКомплекта)
	
	РезультатПроверки = Новый Структура("ПроверкиПройдены, ТипКомплекта, ТекстСообщения",
		Ложь, "", НСтр("ru = 'Выбранные типы документов не могут входить в один комплект. Уберите лишние документы из комплекта.'"));
	СтрокиКомплекта = ДанныеДокументов.НайтиСтроки(Новый Структура("НомерКомплекта", НомерКомплекта));
	
	Если СтрокиКомплекта.Количество() = 0 Тогда
		РезультатПроверки.ПроверкиПройдены = Ложь;
		РезультатПроверки.ТекстСообщения = НСтр("ru = 'Нельзя создать комплект без документов'");
		Возврат РезультатПроверки;
	КонецЕсли;
	
	ТипКомплекта = СтрокиКомплекта[0].ТипКомплекта;
	РезультатПроверки.ТипКомплекта = ТипКомплекта;
	Если РаспознаваниеДокументовКомплектыКлиентСервер.ЭтоТипКомплектаМожноОбработать(ТипКомплекта) Тогда
		ПроверитьКомплектАктОбОказанииУслугСчетНаОплатуСчетФактураТОРГ12(СтрокиКомплекта, ТипКомплекта, РезультатПроверки);
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьКомплектАктОбОказанииУслугСчетНаОплатуСчетФактураТОРГ12(СтрокиКомплекта, ТипКомплекта, РезультатПроверки)
	
	РезультатПроверки.ПроверкиПройдены = Истина;
	ПервыйДокументКомплекта = СтрокиКомплекта[0];
	
	Для Каждого ЭтотДокументКомплекта Из СтрокиКомплекта Цикл
		Если ПервыйДокументКомплекта = ЭтотДокументКомплекта Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПервыйДокументКомплекта.Направление <> ЭтотДокументКомплекта.Направление Тогда
			РезультатПроверки.ПроверкиПройдены = Ложь;
			РезультатПроверки.ТекстСообщения = НСтр("ru = 'Комплект не может одновременно содержать документы поступления и списания. Убедитесь, что либо все документы комплекта относятся к списанию, либо все – к поступлению.'");
			Возврат;
		КонецЕсли;
		
		Если ПервыйДокументКомплекта.Организация <> ЭтотДокументКомплекта.Организация Тогда
			РезультатПроверки.ПроверкиПройдены = Ложь;
			РезультатПроверки.ТекстСообщения = НСтр("ru = 'Данные документы принадлежат разным организациям и не могут быть обработаны в комплекте. Проверьте корректность заполнения данных документов или обработайте их по отдельности.'");
			Возврат;
		КонецЕсли;
		
		Если ПервыйДокументКомплекта.Контрагент <> ЭтотДокументКомплекта.Контрагент Тогда
			РезультатПроверки.ПроверкиПройдены = Ложь;
			РезультатПроверки.ТекстСообщения = НСтр("ru = 'Данные документы принадлежат разным контрагентам и не могут быть обработаны в комплекте. Проверьте корректность заполнения данных документов или обработайте их по отдельности.'");
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПерепроверитьНаСервере()
	
	Для НомерКомплекта = 1 По КоличествоКомплектов Цикл
		ИмяТаблицы = "Комплект" + Формат(НомерКомплекта, "ЧГ=");
		УбратьЛишниеИзКомплектаНаСервере(ИмяТаблицы);
	КонецЦикла;
	
	ТаблицаДокументов = ДанныеДокументов.Выгрузить(Новый Структура("НомерКомплекта", 0));
	ВсеДанныеДокументов = РаспознаваниеДокументовКомплекты.ДополнитьДанныеДокументов(ТаблицаДокументов.ВыгрузитьКолонку("Ссылка"));
	
	ДанныеКомплектов = РаспознаваниеДокументовКомплекты.НайтиКомплекты(ВсеДанныеДокументов);
	УдалитьДублиКомплектов(ДанныеКомплектов);
	
	БылоКомплектов = КоличествоКомплектов;
	КоличествоКомплектов = КоличествоКомплектов + ДанныеКомплектов.КоличествоКомплектов;
	
	Для Каждого СтрокаКомплекта Из ДанныеКомплектов.ТаблицаКомплектов Цикл
		СтрокиТаблицы = ДанныеДокументов.НайтиСтроки(Новый Структура("Ссылка", СтрокаКомплекта.Ссылка));
		Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
			СтрокаТаблицы.НомерКомплекта = СтрокаКомплекта.НомерКомплекта + БылоКомплектов;
			СтрокаТаблицы.ТипКомплекта = СтрокаКомплекта.ТипКомплекта;
		КонецЦикла;
	КонецЦикла;
	
	Для НомерКомплекта = БылоКомплектов + 1 По КоличествоКомплектов Цикл
		РезультатОбратнойСвязи.Комплекты.Вставить(НомерКомплекта, Новый Соответствие);
		НовыйКомплектНаСервере(Ложь, НомерКомплекта);
	КонецЦикла;
	НастроитьПанельИОшибкиКомплекта();
	
	ОбратнаяСвязьКомплектов = РезультатОбратнойСвязи.Комплекты;
	Для Каждого СтрокаКомплекта Из ДанныеКомплектов.ТаблицаКомплектов Цикл
		ОбратнаяСвязьКомплектов[СтрокаКомплекта.НомерКомплекта + БылоКомплектов].Вставить(СтрокаКомплекта.Ссылка, "ДобавленАвтоматически");
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДублиКомплектов(ДанныеКомплектов)
	
	ДублиКомплектов = Новый Массив;
	
	ТаблицаПоискаДублей = ДанныеДокументов.Выгрузить();
	ИдПоиска = ТаблицаПоискаДублей.Количество();
	Пока ИдПоиска > 0 Цикл
		ИдПоиска = ИдПоиска - 1;
		Если ТаблицаПоискаДублей[ИдПоиска].НомерКомплекта = 0 Тогда
			ТаблицаПоискаДублей.Удалить(ИдПоиска);
		КонецЕсли;
	КонецЦикла;
	
	Для НомерКомплекта = 1 По ДанныеКомплектов.КоличествоКомплектов Цикл
		СтрокиКомплекта = ДанныеКомплектов.ТаблицаКомплектов.НайтиСтроки(Новый Структура("НомерКомплекта", НомерКомплекта));
		Если СтрокиКомплекта.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаКомплекта Из СтрокиКомплекта Цикл
			ЭтоДубль = РаспознаваниеДокументовКомплекты.ЕстьДубльДокументаИзКомплекта(СтрокаКомплекта, ТаблицаПоискаДублей);
			Если ЭтоДубль Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЭтоДубль Тогда
			ДублиКомплектов.Добавить(НомерКомплекта);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДублиКомплектов.Количество() <> 0 Тогда
		
		ИдСтрокиКомплектов = ДанныеКомплектов.ТаблицаКомплектов.Количество();
		Пока ИдСтрокиКомплектов > 0 Цикл
			ИдСтрокиКомплектов = ИдСтрокиКомплектов - 1;
			Если ДублиКомплектов.Найти(ДанныеКомплектов.ТаблицаКомплектов[ИдСтрокиКомплектов].НомерКомплекта)
				<> Неопределено Тогда
				
				ДанныеКомплектов.ТаблицаКомплектов.Удалить(ИдСтрокиКомплектов);
			КонецЕсли;
		КонецЦикла;
		
		// Исправление нумерации
		МассивНомеров = Новый Массив;
		МассивНомеров.Добавить(0); // для выравнивания
		Для НомерКомплекта = 1 По ДанныеКомплектов.КоличествоКомплектов Цикл
			МассивНомеров.Добавить(НомерКомплекта);
		КонецЦикла;
		
		Для Каждого НомерДубля Из ДублиКомплектов Цикл
			Для ПозицияУменьшения = НомерДубля + 1 По ДанныеКомплектов.КоличествоКомплектов Цикл
				МассивНомеров[ПозицияУменьшения] = МассивНомеров[ПозицияУменьшения] - 1;
			КонецЦикла;
		КонецЦикла;
		
		Для Каждого СтрокаКомплекта Из ДанныеКомплектов.ТаблицаКомплектов Цикл
			СтрокаКомплекта.НомерКомплекта = МассивНомеров[СтрокаКомплекта.НомерКомплекта];
		КонецЦикла;
		
		ДанныеКомплектов.КоличествоКомплектов = ДанныеКомплектов.КоличествоКомплектов - ДублиКомплектов.Количество();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКомплектыНаСервере(ДанныеОбработки)
	
	Для НомерКомплекта = 1 По КоличествоКомплектов Цикл
		ИмяТаблицы = "Комплект" + Формат(НомерКомплекта, "ЧГ=");
		ПодменюКнопок = "ПодменюСозданиеДокумента" + ИмяТаблицы;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элементы, ПодменюКнопок) Тогда
			
			// Удаление пустых комплектов
			СтрокиКомплекта = ДанныеДокументов.НайтиСтроки(Новый Структура("НомерКомплекта", НомерКомплекта));
			Если СтрокиКомплекта.Количество() = 0 Тогда
				УдалитьКомплектНаСервере(НомерКомплекта, Ложь);
				Продолжить;
			КонецЕсли;
			
			ДанныеОбработки.КомплектовВсего = ДанныеОбработки.КомплектовВсего + 1;
			// На случай, если в подменю нет команды
			ДанныеОбработки.КомплектовНеУдалосьОбработать = ДанныеОбработки.КомплектовНеУдалосьОбработать + 1;
			
			Для Каждого ЭлементПодменю Из Элементы[ПодменюКнопок].ПодчиненныеЭлементы Цикл
				Если ТипЗнч(ЭлементПодменю) = Тип("ГруппаФормы") И ЭлементПодменю.Видимость Тогда
					Для Каждого КнопкаГруппы Из ЭлементПодменю.ПодчиненныеЭлементы Цикл
						Если КнопкаГруппы.Видимость Тогда
							ДанныеОбработки.КомплектовНеУдалосьОбработать = ДанныеОбработки.КомплектовНеУдалосьОбработать - 1;
							
							Позиция_ = СтрНайти(КнопкаГруппы.Имя, "_", НаправлениеПоиска.СКонца);
							ИмяТаблицы = Сред(КнопкаГруппы.Имя, Позиция_ + 1);
							
							СтрокаПоступленияРеализации = Сред(КнопкаГруппы.Имя, 1, Позиция_ - 1);
							СтрокаПоступленияРеализации = СтрЗаменить(СтрокаПоступленияРеализации, "СчетНаОплату", "");
							СтрокаПоступленияРеализации = СтрЗаменить(СтрокаПоступленияРеализации, "СчетФактура", "");
							
							ПараметрыОперации = РаспознаваниеДокументовКомплектыКлиентСервер.ТипДокументаИВидОперации(СтрокаПоступленияРеализации);
							ОткрытиеФормыДокумента(ЭтотОбъект, ПараметрыОперации, ИмяТаблицы, ДанныеОбработки);
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			// Тут можно Прервать; при необходимости
		КонецЕсли;
	КонецЦикла;
	
	ОбратнаяСвязь = ДанныеОбработки.РезультатОбратнойСвязи.Отправить;
	Если ЗначениеЗаполнено(ОбратнаяСвязь) Тогда
		Пакет = Новый Структура;
		Пакет.Вставить("set_creation", Новый Структура("set_data", ОбратнаяСвязь.ДанныеПакета));
		РаспознаваниеДокументовКоннекторСлужебный.ПередатьОбратнуюСвязь(ОбратнаяСвязь.ИдентификаторРезультата, Пакет);
	КонецЕсли;
	
	Для Каждого НомерКомплекта Из ДанныеОбработки.НомераСозданныхКомплектов Цикл
		УдалитьКомплектНаСервере(НомерКомплекта, Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыделеннойСтроки()
	
	ЧастьКомплекта = (ТекущийЭлемент.ТекущиеДанные.НомерКомплекта <> 0);
	ПараметрыФормы = Новый Структура("Ключ, ЧастьКомплекта", ТекущийЭлемент.ТекущиеДанные.Ссылка, ЧастьКомплекта);
	
	ИмяФормыОбработчика = РаспознаваниеДокументовСлужебныйКлиентПовтИсп.ПолучитьИмяОткрываемойФормыПоТипу(ТекущийЭлемент.ТекущиеДанные.ТипДокумента, ТекущийЭлемент.ТекущиеДанные.ВариантОбработки);
	ОткрытьФорму(ИмяФормыОбработчика, ПараметрыФормы);
	
КонецПроцедуры

&НаСервере
Процедура УбратьЛишниеИзКомплектаНаСервере(ИмяТаблицы)
	
	НомерКомплекта = Число(СтрЗаменить(ИмяТаблицы, "Комплект", ""));
	СтрокиКомплекта = ДанныеДокументов.НайтиСтроки(Новый Структура("НомерКомплекта", НомерКомплекта));
	
	Если СтрокиКомплекта.Количество() < 2 Тогда
		УдалитьКомплектНаСервере(НомерКомплекта, Ложь);
		Возврат;
	КонецЕсли;
	
	Элементы["УбратьЛишниеИзКомплекта" + ИмяТаблицы].Доступность = Ложь;
	ТаблицаПоиска = ДанныеДокументов.Выгрузить(Новый Структура("НомерКомплекта", НомерКомплекта));
	
	ДанныеКомплекта = РаспознаваниеДокументовКомплекты.ПоследнийПеренесенныйКомплект(ТаблицаПоиска);
	Если ДанныеКомплекта.ДокументыКомплекта.Количество() = 0 Тогда
		УдалитьКомплектНаСервере(НомерКомплекта, Ложь);
	Иначе
		Для Каждого СтрокаТаблицы Из СтрокиКомплекта Цикл
			Если ДанныеКомплекта.ДокументыКомплекта.Найти(СтрокаТаблицы.Ссылка) = Неопределено Тогда
				ТекущиеДействия = РезультатОбратнойСвязи.Комплекты.Получить(СтрокаТаблицы.НомерКомплекта);
				ДействиеДокумента = ТекущиеДействия.Получить(СтрокаТаблицы.Ссылка);
				Если ДействиеДокумента = "ДобавленАвтоматически" Тогда
					ТекущиеДействия.Вставить(СтрокаТаблицы.Ссылка, "Удален");
				Иначе
					ТекущиеДействия.Удалить(СтрокаТаблицы.Ссылка);
				КонецЕсли;
				
				СтрокаТаблицы.НомерКомплекта = 0;
				СтрокаТаблицы.ТипКомплекта = "";
			Иначе
				СтрокаТаблицы.ТипКомплекта = ДанныеКомплекта.ТипКомплекта;
			КонецЕсли;
		КонецЦикла;
		
		НастроитьПанельИОшибкиКомплекта(НомерКомплекта);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыДопРеквизиты

&НаСервере
Процедура ПерейтиНаСтраницуДопРеквизитыНаСервере(ИмяШага)
	
	ТекущийШаг = ИмяШага;
	ВыделитьШагТекущейСтраницы();
	
	ЗаполнитьТаблицуДопРеквизиты();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуДопРеквизиты()
	
	РаспознанныеДокументы = РеквизитыШапки.Выгрузить(, "Ссылка").ВыгрузитьКолонку("Ссылка");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РаспознанныеДокументы", РаспознанныеДокументы);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаспознанныйДокумент.Ссылка КАК Ссылка,
	|	РаспознанныйДокумент.Дата КАК Дата,
	|	РаспознанныйДокумент.Направление КАК Направление,
	|	РаспознанныйДокумент.ТипДокумента КАК ТипДокумента,
	|	ВЫБОР
	|		КОГДА РаспознанныйДокумент.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияРаспознанногоДокумента.Входящий)
	|			ТОГДА ""БанковскийСчетКонтрагента""
	|		ИНАЧЕ ""БанковскийСчетОрганизации""
	|	КОНЕЦ КАК ИмяРеквизитаБанковскийСчет,
	|	РаспознанныйДокумент.Контрагент КАК Контрагент,
	|	РаспознанныйДокумент.Организация КАК Организация
	|ПОМЕСТИТЬ ОсновнаяТаблица
	|ИЗ
	|	Документ.РаспознанныйДокумент КАК РаспознанныйДокумент
	|ГДЕ
	|	РаспознанныйДокумент.Ссылка В(&РаспознанныеДокументы)
	|	И РаспознанныйДокумент.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСозданныхДокументовРаспознаваниеДокументов.Новый)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОсновнаяТаблица.Ссылка КАК Ссылка,
	|	ИСТИНА КАК КартинкаОткрытия,
	|	ЛОЖЬ КАК ДанныеЗаполнены,
	|	ОсновнаяТаблица.Направление КАК Направление,
	|	ОсновнаяТаблица.ТипДокумента КАК ТипДокумента,
	|	ОсновнаяТаблица.Контрагент КАК Контрагент,
	|	ОсновнаяТаблица.Организация КАК Организация,
	|	СтрокаДоговор.Значение КАК Договор,
	|	""Не сопоставлен: "" + (ВЫРАЗИТЬ(СтрокаДоговор.РаспознанныйТекст КАК СТРОКА(1024))) КАК ДоговорРаспознано,
	|	СтрокаСклад.Значение КАК Склад,
	|	СтрокаСуммаВключаетНДС.Значение КАК СуммаВключаетНДС,
	|	СтрокаСрокОплаты.Значение КАК СрокОплаты,
	|	""Не сопоставлен: "" + (ВЫРАЗИТЬ(СтрокаСрокОплаты.РаспознанныйТекст КАК СТРОКА(1024))) КАК СрокОплатыРаспознано,
	|	СтрокаПолучательОплаты.Значение КАК ПродавецОрганизация,
	|	""Не сопоставлен: "" + (ВЫРАЗИТЬ(СтрокаПолучательОплаты.РаспознанныйТекст КАК СТРОКА(1024))) КАК ПродавецОрганизацияРаспознано,
	|	СтрокаБанковскийСчет.Значение КАК БанковскийСчет,
	|	""Не сопоставлен: "" + (ВЫРАЗИТЬ(СтрокаБанковскийСчет.РаспознанныйТекст КАК СТРОКА(1024))) КАК БанковскийСчетРаспознано,
	|	СтрокаВидСкидки.Значение КАК ВидСкидки
	|ИЗ
	|	ОсновнаяТаблица КАК ОсновнаяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РаспознанныйДокумент.РеквизитыДокумента КАК СтрокаДоговор
	|		ПО ОсновнаяТаблица.Ссылка = СтрокаДоговор.Ссылка
	|			И (СтрокаДоговор.ИмяРеквизита = ""Договор"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РаспознанныйДокумент.РеквизитыДокумента КАК СтрокаСклад
	|		ПО ОсновнаяТаблица.Ссылка = СтрокаСклад.Ссылка
	|			И (СтрокаСклад.ИмяРеквизита = ""Склад"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РаспознанныйДокумент.РеквизитыДокумента КАК СтрокаСуммаВключаетНДС
	|		ПО ОсновнаяТаблица.Ссылка = СтрокаСуммаВключаетНДС.Ссылка
	|			И (СтрокаСуммаВключаетНДС.ИмяРеквизита = ""СуммаВключаетНДС"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РаспознанныйДокумент.РеквизитыДокумента КАК СтрокаСрокОплаты
	|		ПО ОсновнаяТаблица.Ссылка = СтрокаСрокОплаты.Ссылка
	|			И (СтрокаСрокОплаты.ИмяРеквизита = ""СрокОплаты"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РаспознанныйДокумент.РеквизитыДокумента КАК СтрокаПолучательОплаты
	|		ПО ОсновнаяТаблица.Ссылка = СтрокаПолучательОплаты.Ссылка
	|			И (ОсновнаяТаблица.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыДокументовРаспознаваниеДокументов.СчетНаОплату))
	|			И (ОсновнаяТаблица.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияРаспознанногоДокумента.Исходящий))
	|			И (СтрокаПолучательОплаты.ИмяРеквизита = ""ПродавецОрганизация"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РаспознанныйДокумент.РеквизитыДокумента КАК СтрокаБанковскийСчет
	|		ПО ОсновнаяТаблица.Ссылка = СтрокаБанковскийСчет.Ссылка
	|			И ОсновнаяТаблица.ИмяРеквизитаБанковскийСчет = СтрокаБанковскийСчет.ИмяРеквизита
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РаспознанныйДокумент.РеквизитыДокумента КАК СтрокаВидСкидки
	|		ПО ОсновнаяТаблица.Ссылка = СтрокаВидСкидки.Ссылка
	|			И (СтрокаВидСкидки.ИмяРеквизита = ""ВидСкидки"")
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОсновнаяТаблица.Контрагент.Наименование,
	|	ОсновнаяТаблица.ТипДокумента.Порядок,
	|	ОсновнаяТаблица.Дата";
	
	ТаблицаДопРеквизитов.Очистить();
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = ТаблицаДопРеквизитов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
		СтрокаТаблицы.ДанныеЗаполнены = ПроверкаДанныеЗаполненыДопРеквизиты(СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПроверкаДанныеЗаполненыДопРеквизиты(СтрокаТаблицы)
	
	Если СтрокаТаблицы.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовРаспознаваниеДокументов.УПД")
		Или СтрокаТаблицы.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовРаспознаваниеДокументов.ТОРГ12")
		Или СтрокаТаблицы.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовРаспознаваниеДокументов.СчетФактура") Тогда
		
		Результат = ЗначениеЗаполнено(СтрокаТаблицы.Договор) И ЗначениеЗаполнено(СтрокаТаблицы.Склад);
	ИначеЕсли СтрокаТаблицы.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг") Тогда
		Результат = ЗначениеЗаполнено(СтрокаТаблицы.Договор);
	ИначеЕсли СтрокаТаблицы.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовРаспознаваниеДокументов.СчетНаОплату") Тогда
		
		Результат = ЗначениеЗаполнено(СтрокаТаблицы.Договор)
			И ЗначениеЗаполнено(СтрокаТаблицы.БанковскийСчет);
		Если СтрокаТаблицы.Направление = ПредопределенноеЗначение("Перечисление.НаправленияРаспознанногоДокумента.Исходящий") Тогда
			Результат = Результат И ЗначениеЗаполнено(СтрокаТаблицы.ПродавецОрганизация);
		КонецЕсли;
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыНоменклатуры

&НаСервере
Процедура ПерейтиНаСтраницуНоменклатураНаСервере(ИмяШага)
	
	ТекущийШаг = ИмяШага;
	ВыделитьШагТекущейСтраницы();
	
	ЗаполнитьТаблицуНоменклатуры();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуНоменклатуры()
	
	РаспознанныеДокументы = РеквизитыШапки.Выгрузить(, "Ссылка").ВыгрузитьКолонку("Ссылка");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РаспознанныеДокументы", РаспознанныеДокументы);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаспознанныйДокументРеквизитыТабличныхЧастей.Ссылка КАК Ссылка,
	|	РаспознанныйДокументРеквизитыТабличныхЧастей.Ссылка.Контрагент КАК Контрагент,
	|	РаспознанныйДокументРеквизитыТабличныхЧастей.Ссылка.ДатаДокумента КАК ДатаДокумента,
	|	РаспознанныйДокументРеквизитыТабличныхЧастей.Ссылка.Дата КАК Дата,
	|	РаспознанныйДокументРеквизитыТабличныхЧастей.НомерСтрокиТЧ КАК НомерСтрокиТЧ,
	|	ВЫРАЗИТЬ(РаспознанныйДокументРеквизитыТабличныхЧастей.Значение КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(РаспознанныйДокументРеквизитыТабличныхЧастей.РаспознанныйТекст КАК СТРОКА(1024)) КАК Наименование
	|ПОМЕСТИТЬ ОсновнаяТаблица
	|ИЗ
	|	Документ.РаспознанныйДокумент.РеквизитыТабличныхЧастей КАК РаспознанныйДокументРеквизитыТабличныхЧастей
	|ГДЕ
	|	РаспознанныйДокументРеквизитыТабличныхЧастей.Ссылка В(&РаспознанныеДокументы)
	|	И РаспознанныйДокументРеквизитыТабличныхЧастей.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСозданныхДокументовРаспознаваниеДокументов.Новый)
	|	И РаспознанныйДокументРеквизитыТабличныхЧастей.ИмяРеквизита = ""Номенклатура""
	|	И НЕ РаспознанныйДокументРеквизитыТабличныхЧастей.СтрокаУдалена
	|	И РаспознанныйДокументРеквизитыТабличныхЧастей.Ссылка.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОсновнаяТаблица.Ссылка КАК Ссылка,
	|	ОсновнаяТаблица.Контрагент КАК Контрагент,
	|	NULL КАК ВидНоменклатуры,
	|	NULL КАК Родитель,
	|	NULL КАК НоменклатурнаяГруппа,
	|	ИСТИНА КАК КартинкаОткрытия,
	|	ВЫБОР
	|		КОГДА ОсновнаяТаблица.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьНоменклатура,
	|	ОсновнаяТаблица.НомерСтрокиТЧ КАК НомерСтрокиТЧ,
	|	ОсновнаяТаблица.Номенклатура КАК Номенклатура,
	|	""Не сопоставлен: "" + ОсновнаяТаблица.Наименование КАК НоменклатураРаспознано,
	|	ОсновнаяТаблица.Наименование КАК Наименование,
	|	СтрокаАртикул.РаспознанныйТекст КАК Артикул,
	|	СтрокаЕдиницаИзмерения.Значение КАК ЕдиницаИзмерения,
	|	СтрокаСтавкаНДС.Значение КАК СтавкаНДС
	|ИЗ
	|	ОсновнаяТаблица КАК ОсновнаяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РаспознанныйДокумент.РеквизитыТабличныхЧастей КАК СтрокаАртикул
	|		ПО ОсновнаяТаблица.Ссылка = СтрокаАртикул.Ссылка
	|			И ОсновнаяТаблица.НомерСтрокиТЧ = СтрокаАртикул.НомерСтрокиТЧ
	|			И (СтрокаАртикул.ИмяРеквизита = ""Артикул"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РаспознанныйДокумент.РеквизитыТабличныхЧастей КАК СтрокаЕдиницаИзмерения
	|		ПО ОсновнаяТаблица.Ссылка = СтрокаЕдиницаИзмерения.Ссылка
	|			И ОсновнаяТаблица.НомерСтрокиТЧ = СтрокаЕдиницаИзмерения.НомерСтрокиТЧ
	|			И (СтрокаЕдиницаИзмерения.ИмяРеквизита = ""ЕдиницаИзмерения"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РаспознанныйДокумент.РеквизитыТабличныхЧастей КАК СтрокаСтавкаНДС
	|		ПО ОсновнаяТаблица.Ссылка = СтрокаСтавкаНДС.Ссылка
	|			И ОсновнаяТаблица.НомерСтрокиТЧ = СтрокаСтавкаНДС.НомерСтрокиТЧ
	|			И (СтрокаСтавкаНДС.ИмяРеквизита = ""СтавкаНДС"")
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОсновнаяТаблица.Контрагент.Наименование,
	|	ОсновнаяТаблица.Номенклатура.Наименование,
	|	Наименование,
	|	ОсновнаяТаблица.Дата,
	|	НомерСтрокиТЧ
	|ИТОГИ
	|	МИНИМУМ(Контрагент),
	|	МИНИМУМ(ЕстьНоменклатура)
	|ПО
	|	Контрагент";
	
	ДеревоНоменклатуры = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ЗначениеВРеквизитФормы(ДеревоНоменклатуры, "ТаблицаНоменклатуры");
	
КонецПроцедуры

&НаСервере
Процедура ПерейтиНаСтраницуСуммНаСервере(ИмяШага)
	
	ТекущийШаг = ИмяШага;
	Элементы.СоздатьДокументыИКомплекты.Видимость = Ложь;
	Элементы.КнопкаДалее.Видимость = Истина;
	ВыделитьШагТекущейСтраницы();
	
	ЗаполнитьТаблицуСумм();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуСумм()
	
	РаспознанныеДокументы = РеквизитыШапки.Выгрузить(, "Ссылка").ВыгрузитьКолонку("Ссылка");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РаспознанныеДокументы", РаспознанныеДокументы);
	Запрос.УстановитьПараметр("НаОтдельныеПозиции", РаспознаваниеДокументовСлужебныйКлиентСервер.ВидыСкидок().НаОтдельныеПозиции);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаспознанныйДокументРеквизитыТабличныхЧастей.Ссылка КАК Ссылка,
	|	РаспознанныйДокументРеквизитыТабличныхЧастей.Ссылка.Дата КАК Дата,
	|	РаспознанныйДокументРеквизитыТабличныхЧастей.НомерСтрокиТЧ КАК НомерСтрокиТЧ,
	|	РаспознанныйДокументРеквизитыТабличныхЧастей.Ссылка.ТипДокумента КАК ТипДокумента,
	|	""Не сопоставлен: "" + (ВЫРАЗИТЬ(РаспознанныйДокументРеквизитыТабличныхЧастей.РаспознанныйТекст КАК СТРОКА(1024))) КАК НоменклатураРаспознано,
	|	РаспознанныйДокументРеквизитыТабличныхЧастей.Значение КАК Номенклатура
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	Документ.РаспознанныйДокумент.РеквизитыТабличныхЧастей КАК РаспознанныйДокументРеквизитыТабличныхЧастей
	|ГДЕ
	|	РаспознанныйДокументРеквизитыТабличныхЧастей.Ссылка В(&РаспознанныеДокументы)
	|	И РаспознанныйДокументРеквизитыТабличныхЧастей.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСозданныхДокументовРаспознаваниеДокументов.Новый)
	|	И РаспознанныйДокументРеквизитыТабличныхЧастей.ИмяРеквизита = ""Номенклатура""
	|	И НЕ РаспознанныйДокументРеквизитыТабличныхЧастей.СтрокаУдалена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОсновнаяТаблица.Ссылка КАК Ссылка,
	|	ОсновнаяТаблица.Дата КАК Дата,
	|	ОсновнаяТаблица.НомерСтрокиТЧ КАК НомерСтрокиТЧ,
	|	ОсновнаяТаблица.ТипДокумента КАК ТипДокумента,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(СтрокаСуммаВключаетНДС.Значение, ЛОЖЬ) КАК БУЛЕВО)
	|		И (ОсновнаяТаблица.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг)
	|			ИЛИ ОсновнаяТаблица.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыДокументовРаспознаваниеДокументов.СчетНаОплату)) КАК СуммаВключаетНДС,
	|	ОсновнаяТаблица.НоменклатураРаспознано КАК НоменклатураРаспознано,
	|	ОсновнаяТаблица.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ОсновнаяТаблица
	|ИЗ
	|	ТаблицаНоменклатуры КАК ОсновнаяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РаспознанныйДокумент.РеквизитыДокумента КАК СтрокаСуммаВключаетНДС
	|		ПО ОсновнаяТаблица.Ссылка = СтрокаСуммаВключаетНДС.Ссылка
	|			И (СтрокаСуммаВключаетНДС.ИмяРеквизита = ""СуммаВключаетНДС"")
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОсновнаяТаблица.Ссылка КАК Ссылка,
	|	ОсновнаяТаблица.Дата КАК Дата,
	|	ОсновнаяТаблица.НомерСтрокиТЧ КАК НомерСтрокиТЧ,
	|	ОсновнаяТаблица.ТипДокумента КАК ТипДокумента,
	|	ОсновнаяТаблица.Номенклатура КАК Номенклатура,
	|	ОсновнаяТаблица.НоменклатураРаспознано КАК НоменклатураРаспознано,
	|	СтрокаКоличество.Значение КАК Количество,
	|	СтрокаЦена.Значение КАК Цена,
	|	СтрокаСумма.Значение КАК Сумма,
	|	ЕСТЬNULL(СтрокаСуммаСкидки.Значение, 0) КАК СуммаСкидки,
	|	ЕСТЬNULL(СтрокаВидСкидки.Значение, 0) КАК ВидСкидки,
	|	ОсновнаяТаблица.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СтрокаВидСкидки.Значение, 0) = &НаОтдельныеПозиции
	|			ТОГДА ВЫБОР
	|					КОГДА (ВЫРАЗИТЬ(СтрокаКоличество.Значение КАК ЧИСЛО)) = 0
	|							ИЛИ (ВЫРАЗИТЬ((ВЫРАЗИТЬ(СтрокаКоличество.Значение КАК ЧИСЛО)) * (ВЫРАЗИТЬ(СтрокаЦена.Значение КАК ЧИСЛО)) КАК ЧИСЛО(31,2))) <> (ВЫРАЗИТЬ(СтрокаСумма.Значение КАК ЧИСЛО)) + (ВЫРАЗИТЬ(СтрокаСуммаСкидки.Значение КАК ЧИСЛО))
	|								И (ВЫРАЗИТЬ(((ВЫРАЗИТЬ(СтрокаСумма.Значение КАК ЧИСЛО)) + (ВЫРАЗИТЬ(СтрокаСуммаСкидки.Значение КАК ЧИСЛО))) / (ВЫРАЗИТЬ(СтрокаКоличество.Значение КАК ЧИСЛО)) КАК ЧИСЛО(31, 2))) <> (ВЫРАЗИТЬ(СтрокаЦена.Значение КАК ЧИСЛО))
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА (ВЫРАЗИТЬ(СтрокаКоличество.Значение КАК ЧИСЛО)) = 0
	|						ИЛИ (ВЫРАЗИТЬ((ВЫРАЗИТЬ(СтрокаКоличество.Значение КАК ЧИСЛО)) * (ВЫРАЗИТЬ(СтрокаЦена.Значение КАК ЧИСЛО)) КАК ЧИСЛО(31,2))) <> (ВЫРАЗИТЬ(СтрокаСумма.Значение КАК ЧИСЛО))
	|							И (ВЫРАЗИТЬ((ВЫРАЗИТЬ(СтрокаСумма.Значение КАК ЧИСЛО)) / (ВЫРАЗИТЬ(СтрокаКоличество.Значение КАК ЧИСЛО)) КАК ЧИСЛО(31,2))) <> (ВЫРАЗИТЬ(СтрокаЦена.Значение КАК ЧИСЛО))
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|	КОНЕЦ КАК ОшибкаЦены,
	|	ВЫБОР
	|		КОГДА ОсновнаяТаблица.СуммаВключаетНДС = ИСТИНА
	|					И (ВЫРАЗИТЬ(СтрокаСумма.Значение КАК ЧИСЛО)) = (ВЫРАЗИТЬ(СтрокаВсего.Значение КАК ЧИСЛО))
	|				ИЛИ ОсновнаяТаблица.СуммаВключаетНДС = ЛОЖЬ
	|					И (ВЫРАЗИТЬ(СтрокаСумма.Значение КАК ЧИСЛО)) + (ВЫРАЗИТЬ(СтрокаСуммаНДС.Значение КАК ЧИСЛО)) = (ВЫРАЗИТЬ(СтрокаВсего.Значение КАК ЧИСЛО))
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаВсего,
	|	СтрокаСтавкаНДС.Значение КАК СтавкаНДС,
	|	СтрокаСуммаНДС.Значение КАК СуммаНДС,
	|	СтрокаВсего.Значение КАК Всего,
	|	СтрокаСтранаПроисхождения.Значение КАК СтранаПроисхождения,
	|	СтрокаНомерГТД.Значение КАК НомерГТД
	|ПОМЕСТИТЬ ВсеСоединения
	|ИЗ
	|	ОсновнаяТаблица КАК ОсновнаяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РаспознанныйДокумент.РеквизитыТабличныхЧастей КАК СтрокаКоличество
	|		ПО ОсновнаяТаблица.Ссылка = СтрокаКоличество.Ссылка
	|			И ОсновнаяТаблица.НомерСтрокиТЧ = СтрокаКоличество.НомерСтрокиТЧ
	|			И (СтрокаКоличество.ИмяРеквизита = ""Количество"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РаспознанныйДокумент.РеквизитыТабличныхЧастей КАК СтрокаЦена
	|		ПО ОсновнаяТаблица.Ссылка = СтрокаЦена.Ссылка
	|			И ОсновнаяТаблица.НомерСтрокиТЧ = СтрокаЦена.НомерСтрокиТЧ
	|			И (СтрокаЦена.ИмяРеквизита = ""Цена"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РаспознанныйДокумент.РеквизитыТабличныхЧастей КАК СтрокаСумма
	|		ПО ОсновнаяТаблица.Ссылка = СтрокаСумма.Ссылка
	|			И ОсновнаяТаблица.НомерСтрокиТЧ = СтрокаСумма.НомерСтрокиТЧ
	|			И (СтрокаСумма.ИмяРеквизита = ""Сумма"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РаспознанныйДокумент.РеквизитыТабличныхЧастей КАК СтрокаСтавкаНДС
	|		ПО ОсновнаяТаблица.Ссылка = СтрокаСтавкаНДС.Ссылка
	|			И ОсновнаяТаблица.НомерСтрокиТЧ = СтрокаСтавкаНДС.НомерСтрокиТЧ
	|			И (СтрокаСтавкаНДС.ИмяРеквизита = ""СтавкаНДС"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РаспознанныйДокумент.РеквизитыТабличныхЧастей КАК СтрокаСуммаНДС
	|		ПО ОсновнаяТаблица.Ссылка = СтрокаСуммаНДС.Ссылка
	|			И ОсновнаяТаблица.НомерСтрокиТЧ = СтрокаСуммаНДС.НомерСтрокиТЧ
	|			И (СтрокаСуммаНДС.ИмяРеквизита = ""СуммаНДС"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РаспознанныйДокумент.РеквизитыТабличныхЧастей КАК СтрокаВсего
	|		ПО ОсновнаяТаблица.Ссылка = СтрокаВсего.Ссылка
	|			И ОсновнаяТаблица.НомерСтрокиТЧ = СтрокаВсего.НомерСтрокиТЧ
	|			И (СтрокаВсего.ИмяРеквизита = ""Всего"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РаспознанныйДокумент.РеквизитыТабличныхЧастей КАК СтрокаСтранаПроисхождения
	|		ПО ОсновнаяТаблица.Ссылка = СтрокаСтранаПроисхождения.Ссылка
	|			И ОсновнаяТаблица.НомерСтрокиТЧ = СтрокаСтранаПроисхождения.НомерСтрокиТЧ
	|			И (СтрокаСтранаПроисхождения.ИмяРеквизита = ""СтранаПроисхождения"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РаспознанныйДокумент.РеквизитыТабличныхЧастей КАК СтрокаНомерГТД
	|		ПО ОсновнаяТаблица.Ссылка = СтрокаНомерГТД.Ссылка
	|			И ОсновнаяТаблица.НомерСтрокиТЧ = СтрокаНомерГТД.НомерСтрокиТЧ
	|			И (СтрокаНомерГТД.ИмяРеквизита = ""НомерГТД"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РаспознанныйДокумент.РеквизитыТабличныхЧастей КАК СтрокаСуммаСкидки
	|		ПО ОсновнаяТаблица.Ссылка = СтрокаСуммаСкидки.Ссылка
	|			И ОсновнаяТаблица.НомерСтрокиТЧ = СтрокаСуммаСкидки.НомерСтрокиТЧ
	|			И (СтрокаСуммаСкидки.ИмяРеквизита = ""СуммаСкидки"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РаспознанныйДокумент.РеквизитыДокумента КАК СтрокаВидСкидки
	|		ПО ОсновнаяТаблица.Ссылка = СтрокаВидСкидки.Ссылка
	|			И (СтрокаВидСкидки.ИмяРеквизита = ""ВидСкидки"")
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеСоединения.Ссылка КАК Ссылка,
	|	ИСТИНА КАК КартинкаОткрытия,
	|	ВсеСоединения.Дата КАК Дата,
	|	ВсеСоединения.НомерСтрокиТЧ КАК НомерСтрокиТЧ,
	|	ВсеСоединения.ТипДокумента КАК ТипДокумента,
	|	ВсеСоединения.Номенклатура КАК Номенклатура,
	|	ВсеСоединения.НоменклатураРаспознано КАК НоменклатураРаспознано,
	|	ВсеСоединения.Количество КАК Количество,
	|	ВсеСоединения.Цена КАК Цена,
	|	ВсеСоединения.Сумма КАК Сумма,
	|	ВсеСоединения.СуммаСкидки КАК СуммаСкидки,
	|	ВсеСоединения.ВидСкидки КАК ВидСкидки,
	|	ВсеСоединения.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ВсеСоединения.ОшибкаЦены КАК ОшибкаЦены,
	|	ВсеСоединения.ОшибкаВсего КАК ОшибкаВсего,
	|	ВсеСоединения.ОшибкаЦены
	|		ИЛИ ВсеСоединения.ОшибкаВсего КАК ЕстьОшибка,
	|	ВсеСоединения.СтавкаНДС КАК СтавкаНДС,
	|	ВсеСоединения.СуммаНДС КАК СуммаНДС,
	|	ВсеСоединения.Всего КАК Всего,
	|	ВсеСоединения.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ВсеСоединения.НомерГТД КАК НомерГТД
	|ИЗ
	|	ВсеСоединения КАК ВсеСоединения
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВсеСоединения.Дата,
	|	ВсеСоединения.НомерСтрокиТЧ";
	
	ТаблицаСумм.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриАктивизацииЯчейкиСумм() Экспорт
	
	Если ТекущийЭлемент.Имя <> "ТаблицаСумм"
		Или ТекущийЭлемент.ТекущиеДанные = Неопределено Тогда
		
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.ТекущийЭлемент.Имя, "ТаблицаСумм", "");
	ТекущееИмяРеквизита = ИмяРеквизита;
	
	ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
	Если ТекущиеДанные.ОшибкаЦены И (ИмяРеквизита = "Количество"
		Или ИмяРеквизита = "Цена"
		Или ИмяРеквизита = "СуммаСкидки"
		Или ИмяРеквизита = "Сумма")
		Тогда
		
		Элементы.НадписьОшибкаТЧ.Видимость = Истина;
		Если ТекущиеДанные.ВидСкидки = РаспознаваниеДокументовСлужебныйКлиентСервер.ВидыСкидок().НаОтдельныеПозиции Тогда
			НадписьОшибкаТЧ = НСтр("ru = 'Количество * Цена - Скидка не совпадает с Сумма'");
		Иначе
			НадписьОшибкаТЧ = НСтр("ru = 'Количество * Цена не совпадает с Сумма'");
		КонецЕсли;
	ИначеЕсли ТекущиеДанные.ОшибкаВсего И (ИмяРеквизита = "Сумма"
		Или ИмяРеквизита = "СуммаНДС"
		Или ИмяРеквизита = "Всего")
		Тогда
		
		Элементы.НадписьОшибкаТЧ.Видимость = Истина;
		НадписьОшибкаТЧ = НСтр("ru = 'Сумма + Сумма НДС не совпадает с Всего'")
		
	Иначе
		Элементы.НадписьОшибкаТЧ.Видимость = Ложь;
		НадписьОшибкаТЧ = "";
	КонецЕсли;
	
	ОбновитьПолнуюКартинку = (ПолнаяКартинкаВидна И ТекущаяСтрокаНоменклатуры <> ТекущийЭлемент.ТекущаяСтрока);
	ТекущаяСтрокаНоменклатуры = ТекущийЭлемент.ТекущаяСтрока;
	
	ПриАктивизацииЯчейкиТаблицы(ИмяРеквизита, ОбновитьПолнуюКартинку);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриАктивизацииЯчейкиНоменклатуры() Экспорт
	
	Если ТекущийЭлемент.Имя <> "ТаблицаНоменклатуры"
		Или ТекущийЭлемент.ТекущиеДанные = Неопределено
		Или Не ЗначениеЗаполнено(ТекущийЭлемент.ТекущиеДанные.Ссылка) Тогда
		
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.ТекущийЭлемент.Имя, "ТаблицаНоменклатуры", "");
	ТекущееИмяРеквизита = ИмяРеквизита;
	
	Если ИмяРеквизита = "Контрагент" Тогда
		Возврат;
	ИначеЕсли ИмяРеквизита = "Наименование" Тогда
		ИмяРеквизита = "Номенклатура";
	КонецЕсли;
	
	ОбновитьПолнуюКартинку = (ПолнаяКартинкаВидна И ТекущаяСтрокаНоменклатуры <> ТекущийЭлемент.ТекущаяСтрока);
	ТекущаяСтрокаНоменклатуры = ТекущийЭлемент.ТекущаяСтрока;
	
	ПриАктивизацииЯчейкиТаблицы(ИмяРеквизита, ОбновитьПолнуюКартинку);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриАктивизацииЯчейкиТаблицы(ИмяРеквизита, ОбновитьПолнуюКартинку)
	
	ИмяКолонки = ТекущийЭлемент.ТекущийЭлемент.Имя;
	ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
	
	Если ИмяРеквизита = "КартинкаОткрытия"
		Или ИмяРеквизита = "НоменклатураРодитель"
		Или ИмяРеквизита = "НоменклатураВидНоменклатуры"
		Или ИмяРеквизита = "НоменклатураНоменклатурнаяГруппа"
		Или ИмяРеквизита = "Родитель"
		Или ИмяРеквизита = "ВидНоменклатуры"
		Или ИмяРеквизита = "НоменклатурнаяГруппа" Тогда
		
		Если ОбновитьПолнуюКартинку И HTMLДокументСформирован Тогда
			АдресПолнойКартинки = ПолучитьАдресПолнойКартинки(ТекущиеДанные.Ссылка, УникальныйИдентификатор);
			РаспознаваниеДокументовСлужебныйКлиент.ЗагрузитьКартинкуПоАдресу(Элементы.ПолеПросмотра, АдресПолнойКартинки);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	ПараметрыПолучения = Новый Структура;
	ПараметрыПолучения.Вставить("Ссылка", ТекущиеДанные.Ссылка);
	ПараметрыПолучения.Вставить("НомерСтрокиТЧ", ТекущиеДанные.НомерСтрокиТЧ);
	ПараметрыПолучения.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ПараметрыПолучения.Вставить("ОбновитьПолнуюКартинку", ОбновитьПолнуюКартинку);
	ПараметрыПолучения.Вставить("ИмяРеквизита", ИмяРеквизита);
	ДанныеЯчейки = ДанныеЯчейкиТаблицыНаСервере(ПараметрыПолучения);
	
	Если ОбновитьПолнуюКартинку И ДанныеЯчейки.Свойство("АдресПолнойКартинки") Тогда
		АдресПолнойКартинки = ДанныеЯчейки.АдресПолнойКартинки;
		Если HTMLДокументСформирован Тогда
			РаспознаваниеДокументовСлужебныйКлиент.ЗагрузитьКартинкуПоАдресу(Элементы.ПолеПросмотра, АдресПолнойКартинки);
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеЯчейки.Свойство("КартинкаВнутриHTML") Тогда
		КартинкаРеквизита = ДанныеЯчейки.КартинкаВнутриHTML;
	КонецЕсли;
	
	ЭлементКолонка = Элементы[ИмяКолонки];
	ЭлементКолонка.СписокВыбора.Очистить();
	ТипЗначения = ТипЗнч(ТекущиеДанные[ТекущееИмяРеквизита]);
	
	Если ДанныеЯчейки.ЗначенияВыбора.Количество() И ТекущееИмяРеквизита <> "Наименование" Тогда
		СписокДляВыбора = РаспознаваниеДокументовСлужебныйКлиент.ПолучитьЗначенияСпискаВыбора(
		ДанныеЯчейки.РаспознанныйТекст, ТипЗначения, ДанныеЯчейки.ЗначенияВыбора);
	Иначе
		СписокДляВыбора = РаспознаваниеДокументовСлужебныйКлиент.ПолучитьЗначенияСпискаВыбора(
		ДанныеЯчейки.РаспознанныйТекст, ТипЗначения, Неопределено);
	КонецЕсли;
	
	Для Каждого ДанныеВыбора Из СписокДляВыбора Цикл
		ЭлементКолонка.СписокВыбора.Добавить(ДанныеВыбора.Значение, ДанныеВыбора.Представление, , ДанныеВыбора.Картинка);
	КонецЦикла;
	
	Если ПолнаяКартинкаВидна Тогда
		КоординатыВыделения = ДанныеЯчейки.КоординатыКартинки;
		СтрокВИзображенииВыделения = ДанныеЯчейки.СтрокВИзображении;
		ПодключитьОбработчикОжидания("Подключаемый_ПриблизитьПоКоординатам", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеЯчейкиТаблицыНаСервере(ПараметрыПолучения)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ПараметрыПолучения.Ссылка);
	Запрос.УстановитьПараметр("НомерСтрокиТЧ", ПараметрыПолучения.НомерСтрокиТЧ);
	Запрос.УстановитьПараметр("ИмяРеквизита", ПараметрыПолучения.ИмяРеквизита);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаспознанныйДокументРеквизитыТабличныхЧастей.РаспознанныйТекст КАК РаспознанныйТекст,
	|	РаспознанныйДокументРеквизитыТабличныхЧастей.ОбластьИзображения КАК ОбластьИзображения,
	|	РаспознанныйДокументРеквизитыТабличныхЧастей.КоординатаX0 КАК КоординатаX0,
	|	РаспознанныйДокументРеквизитыТабличныхЧастей.КоординатаY0 КАК КоординатаY0,
	|	РаспознанныйДокументРеквизитыТабличныхЧастей.КоординатаX1 КАК КоординатаX1,
	|	РаспознанныйДокументРеквизитыТабличныхЧастей.КоординатаY1 КАК КоординатаY1,
	|	РаспознанныйДокументРеквизитыТабличныхЧастей.СтрокВИзображении КАК СтрокВИзображении
	|ИЗ
	|	Документ.РаспознанныйДокумент.РеквизитыТабличныхЧастей КАК РаспознанныйДокументРеквизитыТабличныхЧастей
	|ГДЕ
	|	РаспознанныйДокументРеквизитыТабличныхЧастей.Ссылка = &Ссылка
	|	И РаспознанныйДокументРеквизитыТабличныхЧастей.НомерСтрокиТЧ = &НомерСтрокиТЧ
	|	И РаспознанныйДокументРеквизитыТабличныхЧастей.ИмяРеквизита = &ИмяРеквизита
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СписокВыбораТабличныхЧастейРаспознаваниеДокументов.Значение КАК Значение,
	|	СписокВыбораТабличныхЧастейРаспознаваниеДокументов.ДополнительноеЗначение КАК ДополнительноеЗначение,
	|	СписокВыбораТабличныхЧастейРаспознаваниеДокументов.Уверенность КАК Уверенность,
	|	СписокВыбораТабличныхЧастейРаспознаваниеДокументов.НайденВТаблицеСоответствий КАК НайденВТаблицеСоответствий
	|ИЗ
	|	РегистрСведений.СписокВыбораТабличныхЧастейРаспознаваниеДокументов КАК СписокВыбораТабличныхЧастейРаспознаваниеДокументов
	|ГДЕ
	|	СписокВыбораТабличныхЧастейРаспознаваниеДокументов.РаспознанныйДокумент = &Ссылка
	|	И СписокВыбораТабличныхЧастейРаспознаваниеДокументов.НомерСтрокиТЧ = &НомерСтрокиТЧ
	|	И СписокВыбораТабличныхЧастейРаспознаваниеДокументов.ИмяРеквизита = &ИмяРеквизита
	|
	|УПОРЯДОЧИТЬ ПО
	|	НайденВТаблицеСоответствий УБЫВ,
	|	Уверенность УБЫВ";
	
	Результат = Новый Структура;
	Если ПараметрыПолучения.ОбновитьПолнуюКартинку Тогда
		Результат.Вставить("АдресПолнойКартинки", ПолучитьАдресПолнойКартинки(ПараметрыПолучения.Ссылка, ПараметрыПолучения.УникальныйИдентификатор));
	КонецЕсли;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Выборка = МассивРезультатов[0].Выбрать();
	Если Выборка.Следующий() Тогда
		КоординатыКартинки = Новый Массив(4);
		КоординатыКартинки[0] = Выборка.КоординатаX0;
		КоординатыКартинки[1] = Выборка.КоординатаY0;
		КоординатыКартинки[2] = Выборка.КоординатаX1;
		КоординатыКартинки[3] = Выборка.КоординатаY1;
		
		РаспознанныйТекст = Выборка.РаспознанныйТекст;
		СтрокВИзображении = Выборка.СтрокВИзображении;
		
		ДвоичныеДанные = Выборка.ОбластьИзображения.Получить();
		КартинкаВнутриHTML = КартинкаКакТекстHTML(ДвоичныеДанные);
		Результат.Вставить("КартинкаВнутриHTML", КартинкаВнутриHTML);
	Иначе
		КоординатыКартинки = Неопределено;
		РаспознанныйТекст = "";
		СтрокВИзображении = 0;
	КонецЕсли;
	
	ЗначенияВыбора = Новый Массив;
	Выборка = МассивРезультатов[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		ВариантВыбора = Новый Структура("Значение, ДополнительноеЗначение, Уверенность, НайденВТаблицеСоответствий");
		ЗаполнитьЗначенияСвойств(ВариантВыбора, Выборка);
		ЗначенияВыбора.Добавить(ВариантВыбора);
	КонецЦикла;
	
	Результат.Вставить("РаспознанныйТекст", РаспознанныйТекст);
	Результат.Вставить("КоординатыКартинки", КоординатыКартинки);
	Результат.Вставить("СтрокВИзображении", СтрокВИзображении);
	Результат.Вставить("ЗначенияВыбора", ЗначенияВыбора);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура НоменклатураВидНоменклатурыПриИзменении(Элемент)
	УстановитьОтметкуДляЗаполнения(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураСтавкаНДСПриИзменении(Элемент)
	УстановитьОтметкуДляЗаполнения(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураЕдиницаИзмеренияПриИзменении(Элемент)
	УстановитьОтметкуДляЗаполнения(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураНоменклатурнаяГруппаПриИзменении(Элемент)
	УстановитьОтметкуДляЗаполнения(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураВходитВГруппуПриИзменении(Элемент)
	УстановитьОтметкуДляЗаполнения(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтметкуДляЗаполнения(Элемент)
	
	ИмяРеквизитаФормы = "Отметка" + Элемент.Имя;
	ЭтотОбъект[ИмяРеквизитаФормы] = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСозданиеНоменклатуры(ПараметрыСоздаваемойНоменклатуры)
	
	ФоновоеЗадание = ЗапуститьФоновоеСозданиеНоменклатуры(ПараметрыСоздаваемойНоменклатуры, УникальныйИдентификатор);
	
	НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	НастройкиОжидания.ВыводитьОкноОжидания = Истина;
	НастройкиОжидания.ВыводитьПрогрессВыполнения = Истина;
	НастройкиОжидания.ВыводитьСообщения = Истина;
	НастройкиОжидания.ТекстСообщения = НСтр("ru = 'Создание номенклатуры для заполнения...'");
	
	Обработчик = Новый ОписаниеОповещения("ЗаполнитьТаблицуСозданнойНоменклатурой", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, Обработчик, НастройкиОжидания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапуститьФоновоеСозданиеНоменклатуры(ПараметрыСоздаваемойНоменклатуры, УникальныйИдентификатор)
	
	ПараметрыВызоваСервера = Новый Массив;
	ПараметрыВызоваСервера.Добавить(ПараметрыСоздаваемойНоменклатуры);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Фоновое создание номенклатуры'");
	
	Обработчик = "РаспознаваниеДокументовСлужебный.ФоновоеСозданиеНоменклатуры";
	ФоновоеЗадание = ДлительныеОперации.ВыполнитьВФоне(Обработчик, ПараметрыВызоваСервера, ПараметрыВыполнения);
	
	Возврат ФоновоеЗадание;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьТаблицуСозданнойНоменклатурой(Результат, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьТаблицуСозданнойНоменклатуройНаСервере(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуСозданнойНоменклатуройНаСервере(Результат, ДополнительныеПараметры) Экспорт
	
	ИнформацияОНоменклатуре = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	ПолучитьСообщенияПользователю(Истина);
	Для Каждого Сообщение Из Результат.Сообщения Цикл
		Сообщение.Сообщить();
	КонецЦикла;
	
	Для Каждого Данные Из ИнформацияОНоменклатуре Цикл
		СтрокаЗаполнения = ТаблицаНоменклатуры.НайтиПоИдентификатору(Данные.ИдентификаторИсходнойСтроки);
		СтрокаЗаполнения.Номенклатура = Данные.Номенклатура;
		
		СтрокаИзменений = Новый Структура("Ссылка, НомерСтрокиТЧ, ИмяРеквизита, Значение",
			СтрокаЗаполнения.Ссылка,
			СтрокаЗаполнения.НомерСтрокиТЧ,
			"Номенклатура",
			Данные.Номенклатура
		);
		ДанныеФоновыхОпераций.ИзмененияНоменклатуры.Добавить(СтрокаИзменений);
	КонецЦикла;
	
	Документы.РаспознанныйДокумент.ЗаписатьИзмененияРеквизитовТаблицы(ДанныеФоновыхОпераций.ИзмененияНоменклатуры);
	ДанныеФоновыхОпераций.ИзмененияНоменклатуры.Очистить();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыТаблицыСумм

&НаКлиенте
Процедура ЗаполнитьОшибкиСуммВСтроке(СтрокаТаблицы)
	
	// Объединить проверки с РаспознаваниеДокументовСлужебный.ДобавитьОшибкиКоличествоЦенаСумма
	Если Окр(СтрокаТаблицы.Количество * СтрокаТаблицы.Цена, 2) <> СтрокаТаблицы.Сумма + СтрокаТаблицы.СуммаСкидки
		И (СтрокаТаблицы.Количество = 0
		Или Окр((СтрокаТаблицы.Сумма + СтрокаТаблицы.СуммаСкидки) / СтрокаТаблицы.Количество, 2) <> СтрокаТаблицы.Цена) Тогда
			
		СтрокаТаблицы.ОшибкаЦены = Истина;
	Иначе
		СтрокаТаблицы.ОшибкаЦены = Ложь;
	КонецЕсли;
	
	СтрокаТаблицы.ОшибкаВсего = НЕ ЗначенияСуммаСуммаНДСВсегоСовпадают(СтрокаТаблицы, СтрокаТаблицы.СуммаВключаетНДС);
	
	СтрокаТаблицы.ЕстьОшибка = СтрокаТаблицы.ОшибкаЦены Или СтрокаТаблицы.ОшибкаВсего;
	
КонецПроцедуры

&НаКлиенте
Функция ЗначенияСуммаСуммаНДСВсегоСовпадают(ПроверяемаяЗапись, СуммаВключаетНДС)
	
	// Объединить проверки с РаспознаваниеДокументовСлужебный.ЗначенияСуммаСуммаНДСВсегоСовпадают
	Если СуммаВключаетНДС Тогда
		СтавкаНДС = РаспознаваниеДокументовСлужебныйВызовСервераПовтИсп.ПолучитьСтавкуНДС(ПроверяемаяЗапись.СтавкаНДС);
		СуммаНДС = РаспознаваниеДокументовСлужебныйКлиентСервер.РассчитатьСуммуНДС(ПроверяемаяЗапись.Сумма, Истина, СтавкаНДС);
		НДСОкругленный = Окр(СуммаНДС, 2);
		
		Возврат ПроверяемаяЗапись.Сумма = ПроверяемаяЗапись.Всего И ПроверяемаяЗапись.СуммаНДС = НДСОкругленный;
	Иначе
		Возврат ПроверяемаяЗапись.Сумма + ПроверяемаяЗапись.СуммаНДС = ПроверяемаяЗапись.Всего;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьНовоеЗначениеРеквизитаТаблицы(Параметры)
	
	Для Каждого СтрокаДляЗаполнения Из Параметры.СтрокиТаблицы Цикл
		ДанныеЭтойСтроки = Параметры.ТаблицаФормы.ДанныеСтроки(СтрокаДляЗаполнения);
		
		СтрокаИзменений = Новый Структура("Ссылка, НомерСтрокиТЧ, ИмяРеквизита, Значение",
			ДанныеЭтойСтроки.Ссылка,
			ДанныеЭтойСтроки.НомерСтрокиТЧ,
			Параметры.ИмяРеквизита,
			Параметры.ЗначениеЗаполнения
		);
		Параметры.ДанныеИзменений.Добавить(СтрокаИзменений);
	КонецЦикла;
	
	ЗапуститьФоновоеЗаданиеЗаписиРеквизитовТаблицы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьФоновоеЗаданиеЗаписиРеквизитовТаблицы()
	
	Если Элементы.СтраницыТаблиц.ТекущаяСтраница = Элементы.СтраницаНоменклатура Тогда
		ПараметрыОперации = ДанныеФоновыхОпераций.ИзмененияНоменклатуры;
	ИначеЕсли Элементы.СтраницыТаблиц.ТекущаяСтраница = Элементы.СтраницаПроверкиСуммы Тогда
		ПараметрыОперации = ДанныеФоновыхОпераций.ИзмененияТаблицыСумм;
	Иначе
		Возврат;
	КонецЕсли;
	
	Результат = ЗапуститьФоновоеЗаданиеЗаписиРеквизитовТаблицыНаСервере(ПараметрыОперации, УникальныйИдентификатор);
	Если Результат.ОперацияЗапущена Тогда
		
		ПараметрыОперации.Очистить();
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗапуститьФоновоеЗаданиеЗаписиРеквизитовТаблицыЗавершение", ЭтотОбъект, ПараметрыОперации);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат.ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
		
	Иначе
		ПовторноЗапуститьЗаполнениеРеквизитовТаблицы = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапуститьФоновоеЗаданиеЗаписиРеквизитовТаблицыНаСервере(ПараметрыОперации, ИдентификаторФормы)
	
	Результат = Новый Структура("ОперацияЗапущена, ДлительнаяОперация", Ложь);
	
	КлючЗадания = "ГрупповаяОбработкаРаспознанныхДокументовРеквизитовТаблицы";
	
	ОтборЗаданий = Новый Структура;
	ОтборЗаданий.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	ОтборЗаданий.Вставить("Ключ", КлючЗадания);
	
	УстановитьПривилегированныйРежим(Истина);
	Отказ = (ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборЗаданий).Количество() > 0);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не Отказ Тогда
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
		ПараметрыВыполнения.КлючФоновогоЗадания = КлючЗадания;
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Групповой ввод реквизитов таблицы'");
		
		ИмяМетода = "Документы.РаспознанныйДокумент.ЗаписатьИзмененияРеквизитовТаблицы";
		
		Результат.ОперацияЗапущена = Истина;
		Результат.ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(ИмяМетода, ПараметрыОперации, ПараметрыВыполнения);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗапуститьФоновоеЗаданиеЗаписиРеквизитовТаблицыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда // отменено пользователем
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Результат.ПодробноеПредставлениеОшибки;
		Сообщение.Сообщить();
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		Если ПовторноЗапуститьЗаполнениеРеквизитовТаблицы Тогда
			ПовторноЗапуститьЗаполнениеРеквизитовТаблицы = Ложь;
			ЗапуститьФоновоеЗаданиеЗаписиРеквизитовТаблицы();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДопРеквизитыСкладПриИзменении(Элемент)
	УстановитьОтметкуДляЗаполнения(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ДопРеквизитыСуммаВключаетНДСПриИзменении(Элемент)
	УстановитьОтметкуДляЗаполнения(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ДопРеквизитыСрокОплатыПриИзменении(Элемент)
	УстановитьОтметкуДляЗаполнения(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ДопРеквизитыПродавецОрганизацияПриИзменении(Элемент)
	УстановитьОтметкуДляЗаполнения(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ДопРеквизитыВидСкидкиПриИзменении(Элемент)
	УстановитьОтметкуДляЗаполнения(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ВШапкеДатаПриИзменении(Элемент)
	УстановитьОтметкуДляЗаполнения(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ВШапкеКонтрагентПриИзменении(Элемент)
	УстановитьОтметкуДляЗаполнения(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ВШапкеОрганизацияПриИзменении(Элемент)
	УстановитьОтметкуДляЗаполнения(Элемент);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыКомплектов


#КонецОбласти

#Область СлужебныеПроцедурыИтого

&НаСервере
Процедура ПерейтиНаСтраницуИтогоНаСервере(ИмяШага)
	
	ТекущийШаг = ИмяШага;
	
	ВыделитьШагТекущейСтраницы();
	Элементы.СоздатьДокументыИКомплекты.Видимость = Истина;
	Элементы.КнопкаДалее.Видимость = Ложь;
	ЗаполнитьТаблицыИтого();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицыИтого()
	
	Запрос = Новый Запрос;
	ДокументыВсе = РеквизитыШапки.Выгрузить(, "Ссылка").ВыгрузитьКолонку("Ссылка");
	Запрос.УстановитьПараметр("ДокументыВсе", ДокументыВсе);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ДокументРаспознанныйДокумент.Ссылка КАК Ссылка,
	|	СвязанныеОбъектыРаспознаниеДокументов.ПотенциальныйКандидат КАК ПотенциальныйКандидат
	|ИЗ
	|	Документ.РаспознанныйДокумент КАК ДокументРаспознанныйДокумент
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвязанныеОбъектыРаспознаниеДокументов КАК СвязанныеОбъектыРаспознаниеДокументов
	|		ПО (ДокументРаспознанныйДокумент.Ссылка В (&ДокументыВсе))
	|			И (ДокументРаспознанныйДокумент.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСозданныхДокументовРаспознаваниеДокументов.Новый))
	|			И ДокументРаспознанныйДокумент.Ссылка = СвязанныеОбъектыРаспознаниеДокументов.РаспознанныйДокумент
	|			И (СвязанныеОбъектыРаспознаниеДокументов.ПотенциальныйКандидат = ИСТИНА)
	|			И (НЕ СвязанныеОбъектыРаспознаниеДокументов.СсылкаНаОбъект.ПометкаУдаления)";
	
	ДокументыБезСканов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Запрос.УстановитьПараметр("ДокументыБезСканов", ДокументыБезСканов);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаспознанныйДокумент.Ссылка КАК Ссылка,
	|	РаспознанныйДокумент.Направление КАК Направление,
	|	ВЫБОР
	|		КОГДА РаспознанныйДокумент.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияРаспознанногоДокумента.Входящий)
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК НаправлениеДокумента,
	|	РаспознанныйДокумент.Дата КАК Дата,
	|	РаспознанныйДокумент.ТипДокумента КАК ТипДокумента,
	|	РаспознанныйДокумент.Наименование КАК Наименование,
	|	РаспознанныйДокумент.Контрагент КАК Контрагент,
	|	РаспознанныйДокумент.Организация КАК Организация
	|ИЗ
	|	Документ.РаспознанныйДокумент КАК РаспознанныйДокумент
	|ГДЕ
	|	&УсловиеТаблицы
	|	И РаспознанныйДокумент.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСозданныхДокументовРаспознаваниеДокументов.Новый)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&УсловиеТаблицы",
		"НЕ РаспознанныйДокумент.Ссылка В(&ДокументыБезСканов)
		| 	И РаспознанныйДокумент.КоличествоОшибок = 0"
	);
	ТаблицаИтогоОдиночныеДокументы.Загрузить(Запрос.Выполнить().Выгрузить());
	Элементы.ГруппаИтогоОдиночныеДокументы.Заголовок = Элементы.ГруппаИтогоОдиночныеДокументы.Подсказка
	+ СтрШаблон(" (%1)", ТаблицаИтогоОдиночныеДокументы.Количество());
	
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&УсловиеТаблицы",
		"РаспознанныйДокумент.Ссылка В(&ДокументыБезСканов)
		| 	И РаспознанныйДокумент.КоличествоОшибок = 0"
	);
	ТаблицаИтогоПрикрепитьСканы.Загрузить(Запрос.Выполнить().Выгрузить());
	Элементы.ГруппаТаблицаИтогоПрикрепитьСканы.Заголовок = Элементы.ГруппаТаблицаИтогоПрикрепитьСканы.Подсказка
	+ СтрШаблон(" (%1)", ТаблицаИтогоПрикрепитьСканы.Количество());
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументИзСтроки(ДанныеСтроки)
	ПоказатьЗначение(, ДанныеСтроки.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВопросаСозданияДокументов(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ДанныеОбработки = РаспознаваниеДокументовКомплектыКлиентСервер.НовыеДанныеОбработкиКомплектов();
		ДанныеОбработки.Вставить("ДокументовВсего", 0);
		ДанныеОбработки.Вставить("ДокументовНеУдалосьОбработать", 0);
		
		ДанныеОбработки.ГрупповаяОбработка = Истина;
		ДанныеОбработки.РезультатОбратнойСвязи = РезультатОбратнойСвязи;
		
		СоздатьДокументыИКомплектыНаСервере(ДанныеОбработки);
		
		Для Каждого СтрокаДерева Из ТаблицаИтогоКомплекты.ПолучитьЭлементы() Цикл
			Элементы.ТаблицаИтогоКомплекты.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Истина);
		КонецЦикла;
		
		Если ДанныеОбработки.КомплектовНеУдалосьОбработать + ДанныеОбработки.ДокументовНеУдалосьОбработать <> 0 Тогда
			ТекстПредупреждения = СтрШаблон(НСтр("ru = 'Некоторые документы содержат ошибки и не могут быть обработаны.
			|Не удалось обработать: %1
			|
			|Повторите операцию после исправления ошибок:
			| - документы комплекта должны быть заполнены корректно,
			| - документы должны принадлежать одному комплекту.'"),
			// Обработано: %1; = ДанныеОбработки.КомплектовВсего - ДанныеОбработки.КомплектовНеУдалосьОбработать + ДанныеОбработки.ДокументовВсего - ДанныеОбработки.ДокументовНеУдалосьОбработать,
			ДанныеОбработки.КомплектовНеУдалосьОбработать + ДанныеОбработки.ДокументовНеУдалосьОбработать);
			
			ПараметрыФормы = Новый Структура("ОшибкиПроведения, ТекстПредупреждения", ДанныеОбработки.ОшибкиПроведения, ТекстПредупреждения);
			ОткрытьФорму("Обработка.РаспознаваниеДокументов.Форма.ОтчетПоОшибкам",
				ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьДокументыИКомплектыНаСервере(ДанныеОбработки)
	
	ДокументыКомплектные = Новый Массив;
	Для Каждого СтрокаКомплекта Из ДанныеДокументов Цикл
		Если СтрокаКомплекта.НомерКомплекта = 0 Тогда
			Продолжить;
		КонецЕсли;
		ДокументыКомплектные.Добавить(СтрокаКомплекта.Ссылка);
	КонецЦикла;
	
	СоздатьКомплектыНаСервере(ДанныеОбработки);
	СоздатьОдиночныеДокументыНаСервере(ДанныеОбработки, ДокументыКомплектные);
	ПрикрепитьСканыНаСервере(ДанныеОбработки, ДокументыКомплектные);
	
	ЗаполнитьТаблицыИтого();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьОдиночныеДокументыНаСервере(ДанныеОбработки, ДокументыКомплектные)
	
	Для Каждого СтрокаТаблицы Из ТаблицаИтогоОдиночныеДокументы Цикл
		Если ДокументыКомплектные.Найти(СтрокаТаблицы.Ссылка) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		РаспознанныйОбъект = СтрокаТаблицы.Ссылка.ПолучитьОбъект();
		Если РаспознанныйОбъект.Статус <> Перечисления.СтатусыСозданныхДокументовРаспознаваниеДокументов.Новый Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеОбработки.ДокументовВсего = ДанныеОбработки.ДокументовВсего + 1;
		ПараметрыОперации = РаспознаваниеДокументовКомплектыКлиентСервер.ТипДокументаИВидОперацииДляДокументаПоУмолчанию(
			СтрокаТаблицы.Направление, СтрокаТаблицы.ТипДокумента);
			
		Если СтрокаТаблицы.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.ТОРГ12
			Или СтрокаТаблицы.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг
			Или СтрокаТаблицы.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД
			Или СтрокаТаблицы.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура Тогда
			
			Если СтрокаТаблицы.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий Тогда
				ТипСоздаваемого = Тип("ДокументСсылка.ПриобретениеТоваровУслуг");
			Иначе
				ТипСоздаваемого = Тип("ДокументСсылка.РеализацияТоваровУслуг");
			КонецЕсли;
		
		ИначеЕсли СтрокаТаблицы.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетНаОплату Тогда
			Если СтрокаТаблицы.ТипДокумента = Перечисления.НаправленияРаспознанногоДокумента.Входящий Тогда
				ТипСоздаваемого = Тип("ДокументСсылка.ЗаказПоставщику");
			Иначе
				ТипСоздаваемого = Тип("ДокументСсылка.ЗаказКлиента");
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыЗаполнения = РаспознаваниеДокументовКомплектыВызовСервера.ПараметрыЗаполненияДляСозданияДокумента(
			СтрокаТаблицы.Ссылка, СтрокаТаблицы.ТипДокумента, ТипСоздаваемого, ПараметрыОперации);
		
		Если ПараметрыЗаполнения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			// Изменения в документе "Распознанный документ"
			РаспознанныйОбъект.Статус = Перечисления.СтатусыСозданныхДокументовРаспознаваниеДокументов.Обработан;
			РаспознанныйОбъект.Записать();
			
			СоздаваемыйДокумент = РаспознаваниеДокументовСлужебный.СоздатьДокументНаОснованииРаспознанного(
				СтрокаТаблицы.Ссылка, ПараметрыЗаполнения.ТипДокументаСтрокой, ПараметрыЗаполнения, РежимЗаписиДокумента.Проведение);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ДанныеОбработки.ДокументовНеУдалосьОбработать = ДанныеОбработки.ДокументовНеУдалосьОбработать + 1;
			СообщенияОбОшибках = Новый Массив(ПолучитьСообщенияПользователю(Истина));
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			СообщенияОбОшибках.Вставить(0, Сообщение);
			ДанныеОбработки.ОшибкиПроведения.Вставить(РаспознанныйОбъект.Ссылка, СообщенияОбОшибках);
			
		КонецПопытки;
		// Тут можно Прервать; при необходимости
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПрикрепитьСканыНаСервере(ДанныеОбработки, ДокументыКомплектные)
	
	Для Каждого СтрокаТаблицы Из ТаблицаИтогоПрикрепитьСканы Цикл
		Если ДокументыКомплектные.Найти(СтрокаТаблицы.Ссылка) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		РаспознанныйОбъект = СтрокаТаблицы.Ссылка.ПолучитьОбъект();
		Если РаспознанныйОбъект.Статус <> Перечисления.СтатусыСозданныхДокументовРаспознаваниеДокументов.Новый Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеОбработки.ДокументовВсего = ДанныеОбработки.ДокументовВсего + 1;
		
		СвязанныеДокументы = РегистрыСведений.СвязанныеОбъектыРаспознаниеДокументов.ВсеСвязанныеДокументы(СтрокаТаблицы.Ссылка);
		Для Каждого Документ Из СвязанныеДокументы Цикл
			АдресКартинки = ПоместитьВоВременноеХранилище(РаспознанныйОбъект.ИсходноеИзображение.Получить(), УникальныйИдентификатор);
			Если Документ.ПотенциальныйКандидат Тогда
				
				Если Не РаспознаваниеДокументовСлужебный.СканУжеЕстьУВладельца(СтрокаТаблицы.Ссылка, Документ.Ссылка, АдресКартинки) Тогда
					РаспознаваниеДокументовСлужебный.ДобавитьПрисоединенныйФайл(РаспознанныйОбъект, Документ.Ссылка, АдресКартинки);
					УдалитьИзВременногоХранилища(АдресКартинки);
					
					РегистрыСведений.СвязанныеОбъектыРаспознаниеДокументов.ЗаписатьЗначения(Документ.Ссылка, РаспознанныйОбъект.Ссылка, Ложь);
					
					РезультатОбратнойСвязи = РаспознаваниеДокументов.ОписаниеОбратнойСвязи("ПрикрепилСкан");
					Пакет = Новый Структура("created", РезультатОбратнойСвязи);
					РаспознаваниеДокументовКоннекторСлужебный.ПередатьОбратнуюСвязь(РаспознанныйОбъект.ИдентификаторРезультата, Пакет);
				КонецЕсли;
				
				Если РаспознанныйОбъект.Статус <> Перечисления.СтатусыСозданныхДокументовРаспознаваниеДокументов.Обработан Тогда
					РаспознанныйОбъект.Статус = Перечисления.СтатусыСозданныхДокументовРаспознаваниеДокументов.Обработан;
					РаспознанныйОбъект.Записать();
					
					РезультатОбратнойСвязи = РаспознаваниеДокументов.ОписаниеОбратнойСвязи("Проведен");
					Пакет = Новый Структура("created", РезультатОбратнойСвязи);
					РаспознаваниеДокументовКоннекторСлужебный.ПередатьОбратнуюСвязь(РаспознанныйОбъект.ИдентификаторРезультата, Пакет);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		// Тут можно Прервать; при необходимости
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

