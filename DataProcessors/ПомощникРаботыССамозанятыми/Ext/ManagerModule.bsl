#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Создает документы "Приобретение товаров и услуг" и "Приобретение услуг и прочих активов".
// 
// Параметры:
//  ПараметрыПроцедуры - Структура:
//  	* ДанныеЗаполненияПоНоменклатуре - Структура - коллекция реквизитов в табличной части "ИмяТабличнойЧасти"
//                                         документа приобретения.
//      * Подразделение - СправочникСсылка.СтруктураПредприятия - подразделение-получатель.
//      * НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - направление деятельности расчетов с партнерами.
//      * ГруппаФинансовогоУчета - СправочникСсылка.ГруппыФинансовогоУчетаРасчетов - группа финансового учета расчетов с партнерами.
//  	* ИмяДокумента - Строка - имя документа приобретения.
//  	* ИмяТабличнойЧасти - Строка - имя табличной части документа приобретения, содержащее колонку по вводу услуги.
//  	* Организация - СправочникСсылка.Организации - организация, по которой создаются документы приобретения.
//  	* Валюта - СправочникСсылка.Валюты - валюта создаваемых документов приобретения.
//  	* ЗамерПроизводительности - Соответствие из КлючИЗначение - замер времени длительной операции.
//  АдресХранилищаРезультата - Строка - адрес результата.
//
Процедура СоздатьДокументыПриобретения(ПараметрыПроцедуры, АдресХранилищаРезультата) Экспорт

	СозданныеДокументы = Новый Соответствие;
	
	ДанныеСамозанятых = ПараметрыПроцедуры.ТаблицаДанных.Скопировать(, "Партнер, Контрагент");
	ДанныеСамозанятых.Свернуть("Партнер, Контрагент");
	СоглашенияПартнеров = СоглашенияСПоставщиками(ПараметрыПроцедуры.Организация, ДанныеСамозанятых);
	
	ОбъектыРасчетов = ПараметрыПроцедуры.ТаблицаДанных.Скопировать(, "ОбъектРасчетов");
	ОбъектыРасчетов.Свернуть("ОбъектРасчетов");
	ОстаткиПоЗаказам = ОстаткиОформленияПоЗаказам(ОбъектыРасчетов);
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ДанныеЗаполненияНоменклатуры", ПараметрыПроцедуры.ДанныеЗаполненияПоНоменклатуре);
	ДанныеЗаполнения.Вставить("Валюта", ПараметрыПроцедуры.Валюта);
	ДанныеЗаполнения.Вставить("Организация", ПараметрыПроцедуры.Организация);
	ДанныеЗаполнения.Вставить("Подразделение", ПараметрыПроцедуры.Подразделение);
	ДанныеЗаполнения.Вставить("НаправлениеДеятельности", ПараметрыПроцедуры.НаправлениеДеятельности);
	ДанныеЗаполнения.Вставить("ГруппаФинансовогоУчета", ПараметрыПроцедуры.ГруппаФинансовогоУчета);
	ДанныеЗаполнения.Вставить("ОперацияССамозанятым", Истина);
	ДанныеЗаполнения.Вставить("НалогообложениеНДС", Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС);
	
	ИсходныеДанные = Новый Структура;
	ИсходныеДанные.Вставить("ТаблицаДанных", ПараметрыПроцедуры.ТаблицаДанных);
	ИсходныеДанные.Вставить("СоглашенияПартнеров", СоглашенияПартнеров);
	ИсходныеДанные.Вставить("ОстаткиПоЗаказам", ОстаткиПоЗаказам);
	ИсходныеДанные.Вставить("ИмяДокумента", ПараметрыПроцедуры.ИмяДокумента);
	ИсходныеДанные.Вставить("ИмяТабличнойЧасти", ПараметрыПроцедуры.ИмяТабличнойЧасти);
	ИсходныеДанные.Вставить("ЗамерПроизводительности", ПараметрыПроцедуры.ЗамерПроизводительности);
	
	СозданныеДокументы = ДокументыПриобретения(ИсходныеДанные, ДанныеЗаполнения);
	
	Результат = Новый Структура;
	Результат.Вставить("СозданныеДокументы", СозданныеДокументы);
	Результат.Вставить("ЗамерПроизводительности", ПараметрыПроцедуры.ЗамерПроизводительности);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилищаРезультата);
	
КонецПроцедуры

// Создает документ оплаты "Заявка на расходование ДС", если используются заявки, или "Списание безналичных ДС", если 
// заявки не используются.
// 
// Параметры:
//  ПараметрыПроцедуры - Структура:
//   * Контрагент - СправочникСсылка.Контрагенты - банк-получатель.
//   * БанковскийСчетКонтрагента - СправочникСсылка.БанковскиеСчетаКонтрагентов - счет-получатель.
//   * ИмяДокумента - Строка - имя документа приобретения.
//   * Организация - СправочникСсылка.Организации - организация, по которой создаются документы приобретения.
//   * Валюта - СправочникСсылка.Валюты - валюта создаваемых документов приобретения.
//   * СписокКонтрагентов - Булево - признак использования реестра на перечисление денежных средств.
//   * ЗамерПроизводительности - Соответствие из КлючИЗначение - замер времени длительной операции.
//  АдресХранилищаРезультата - Строка - адрес результата.
//
Процедура СоздатьДокументыОплаты(ПараметрыПроцедуры, АдресХранилищаРезультата) Экспорт

	СозданныеДокументы = Новый Соответствие;
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Организация", ПараметрыПроцедуры.Организация);
	ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
	ДанныеЗаполнения.Вставить("СписокКонтрагентов", ПараметрыПроцедуры.СписокКонтрагентов);
	ДанныеЗаполнения.Вставить("Валюта", ПараметрыПроцедуры.Валюта);
	ДанныеЗаполнения.Вставить("ОперацияССамозанятым", Истина);
	
	Если ПараметрыПроцедуры.СписокКонтрагентов Тогда
		СозданныеДокументы = ДокументыОплатыСоСпискомКонтрагентов(
			ДанныеЗаполнения, ПараметрыПроцедуры, ПараметрыПроцедуры.ТаблицаДанных);
	Иначе
		СозданныеДокументы = ДокументыОплатыБезСпискаКонтрагентов(
			ДанныеЗаполнения, ПараметрыПроцедуры, ПараметрыПроцедуры.ТаблицаДанных);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("СозданныеДокументы", СозданныеДокументы);
	Результат.Вставить("ЗамерПроизводительности", ПараметрыПроцедуры.ЗамерПроизводительности);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилищаРезультата);

КонецПроцедуры

#Область ЗагрузкаКонтрагентовИзФайла

// Переопределяет параметры загрузки данных из файла.
//
// Параметры:
//  Параметры - Структура:
//   * ИмяМакетаСШаблоном - Строка - наименование макета. Например, "ЗагрузкаИзФайла".
//   * ИмяТабличнойЧасти - Строка - полное имя табличной части. Например, "Документ._ДемоСчетНаОплатуПокупателю.ТабличнаяЧасть.Товары"
//   * ОбязательныеКолонки - Массив из Строка - наименования обязательных для заполнения колонок.
//   * ТипДанныхКолонки - Соответствие из КлючИЗначение:
//      * Ключ - Строка - имя колонки;
//      * Значение - ОписаниеТипов - тип колонки загружаемых данных.
//   * ДополнительныеПараметры - Структура
//
Процедура УстановитьПараметрыЗагрузкиИзФайлаВТЧ(Параметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Производит сопоставление данных, загружаемых в табличную часть ПолноеИмяТабличнойЧасти,
// с данными в ИБ, и заполняет параметры АдресТаблицыСопоставления и СписокНеоднозначностей.
//
// Параметры:
//   АдресЗагружаемыхДанных - Строка - адрес временного хранилища с таблицей значений, в которой находятся загруженные 
//                         данные из файла. Состав колонок: Идентификатор (Число) - порядковый номер строки; остальные 
//                         колонки соответствуют колонкам макета ЗагрузкаИзФайла.
//   АдресТаблицыСопоставления - Строка - адрес временного хранилища с пустой таблицей значений, являющейся копией 
//                         табличной части документа, которую необходимо заполнить из таблицы АдресЗагружаемыхДанных.
//   СписокНеоднозначностей - ТаблицаЗначений:
//       * Колонка - Строка - имя колонки, в которой была обнаружена неоднозначность.
//       * Идентификатор - Число  - идентификатор строки, в которой была обнаружена неоднозначность.
//   ПолноеИмяТабличнойЧасти - Строка - полное имя табличной части, в которую загружаются данные.
//   ДополнительныеПараметры - Произвольный - Любые дополнительные сведения.
//
Процедура СопоставитьЗагружаемыеДанные(
	АдресЗагружаемыхДанных,
	АдресТаблицыСопоставления,
	СписокНеоднозначностей,
	ПолноеИмяТабличнойЧасти,
	ДополнительныеПараметры) Экспорт

	Если ДополнительныеПараметры.РежимЗагрузки = 0 Тогда
		СопоставитьЗагружаемыеДанныеНаОплату(
			АдресЗагружаемыхДанных,
			АдресТаблицыСопоставления,
			СписокНеоднозначностей,
			ПолноеИмяТабличнойЧасти,
			ДополнительныеПараметры);
	Иначе
		СопоставитьЗагружаемыеДанныеЧеков(
			АдресЗагружаемыхДанных,
			АдресТаблицыСопоставления,
			СписокНеоднозначностей,
			ПолноеИмяТабличнойЧасти,
			ДополнительныеПараметры);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДокументыПриобретения(ИсходныеДанные, ДанныеЗаполнения)

	СозданныеДокументы = Новый Соответствие;
	
	Для Каждого СтрокаДанных Из ИсходныеДанные.ТаблицаДанных Цикл
		
		ДанныеЗаполнения.Вставить("Сумма", СтрокаДанных.Сумма);
		ДанныеЗаполнения.Вставить("ОбъектРасчетов", СтрокаДанных.ОбъектРасчетов);
		
		ДанныеЗаполнения.Вставить("Партнер", СтрокаДанных.Партнер);
		ДанныеЗаполнения.Вставить("Контрагент", СтрокаДанных.Контрагент);
		ДанныеЗаполнения.Вставить("Договор", СтрокаДанных.Договор);
		
		Соглашение = СоглашениеСПоставщиком(ИсходныеДанные.СоглашенияПартнеров, ДанныеЗаполнения);
		ДанныеЗаполнения.Вставить("Соглашение", Соглашение);
		
		ДокументОбъект = НовыйДокументПриобретения(ИсходныеДанные, ДанныеЗаполнения, СтрокаДанных);
		
		ЗаполнитьТабличнуюЧастьТовары(
			ДокументОбъект, ИсходныеДанные.ИмяТабличнойЧасти, ДанныеЗаполнения, ИсходныеДанные.ОстаткиПоЗаказам);
		ЗаписатьДокумент(ДокументОбъект, ИсходныеДанные);
		
		Если ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
			
			ДенежныеСредстваСерверЛокализация.СохранитьЧекСамозанятого(ДокументОбъект.Ссылка, СтрокаДанных);
			
			СозданныеДокументы.Вставить(СтрокаДанных.ИдентификаторСтроки, ДокументОбъект.Ссылка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СозданныеДокументы;

КонецФункции

Функция НовыйДокументПриобретения(ИсходныеДанные, ДанныеЗаполнения, СтрокаДанных)

	ДокументОбъект = Документы[ИсходныеДанные.ИмяДокумента].СоздатьДокумент();
	ДокументОбъект.Дата = ТекущаяДатаСеанса();
	ЗаполнитьЗначенияСвойств(ДокументОбъект, ДанныеЗаполнения);
	
	ДанныеЗаполнения.Вставить("Объект");
	ДанныеЗаполнения.Вставить("ВалютаВзаиморасчетов");
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ДанныеЗаполнения.ОбъектРасчетов, "Объект, ВалютаВзаиморасчетов");
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПриобретениеТоваровУслуг")
		И ЗначениеЗаполнено(ДанныеЗаполнения.ОбъектРасчетов) Тогда
		
		Если ТипЗнч(ДанныеЗаполнения.Объект) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			
			ДокументОбъект.ПоступлениеПоЗаказам = Истина;
			ДокументОбъект.ЗаказПоставщику = ДанныеЗаполнения.Объект;
		
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.Соглашение) Тогда
		
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПриобретениеТоваровУслуг") Тогда
			ДокументОбъект.ЗаполнитьУсловияЗакупокПоСоглашению();
		Иначе
			УсловияЗакупок = ЗакупкиСервер.ПолучитьУсловияЗакупок(ДанныеЗаполнения.Соглашение, Истина, Истина);
			ДокументОбъект.ЗаполнитьУсловияЗакупок(УсловияЗакупок);
		КонецЕсли;
		
		ДокументОбъект.Заполнить(Неопределено);
		
	Иначе
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
	КонецЕсли;
	
	ЗаполнитьРасшифровкуПлатежаДокументаПриобретения(ДокументОбъект, ДанныеЗаполнения, СтрокаДанных);
	
	Возврат ДокументОбъект;

КонецФункции

Процедура ЗаполнитьРасшифровкуПлатежаДокументаПриобретения(ДокументОбъект, ДанныеЗаполнения, ИсходныеДанные)

	Если ЗначениеЗаполнено(ДанныеЗаполнения.ОбъектРасчетов) Тогда
				
		СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, ИсходныеДанные);
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаРасшифровки, "ВалютаВзаиморасчетов") Тогда
			СтрокаРасшифровки.ВалютаВзаиморасчетов = ДанныеЗаполнения.ВалютаВзаиморасчетов;
			ВалютаВзаиморасчетов = СтрокаРасшифровки.ВалютаВзаиморасчетов;
		Иначе
			ВалютаВзаиморасчетов = ДокументОбъект.ВалютаВзаиморасчетов;
		КонецЕсли;
		
		Если ДокументОбъект.КурсЧислитель = 0
			ИЛИ ДокументОбъект.КурсЗнаменатель = 0 Тогда
			СтрокаРасшифровки.СуммаВзаиморасчетов = 0;
		ИначеЕсли ДокументОбъект.Валюта = ВалютаВзаиморасчетов Тогда
			СтрокаРасшифровки.СуммаВзаиморасчетов = СтрокаРасшифровки.Сумма;
		ИначеЕсли НЕ ВалютаВзаиморасчетов = ДанныеЗаполнения.Валюта
			И ДокументОбъект.Валюта = ДанныеЗаполнения.Валюта Тогда
			СтрокаРасшифровки.СуммаВзаиморасчетов = 
				СтрокаРасшифровки.Сумма * ДокументОбъект.КурсЗнаменатель / ДокументОбъект.КурсЧислитель;
		Иначе
			СтрокаРасшифровки.СуммаВзаиморасчетов = 
				СтрокаРасшифровки.Сумма * ДокументОбъект.КурсЧислитель / ДокументОбъект.КурсЗнаменатель;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Функция ДокументыОплатыСоСпискомКонтрагентов(ДанныеЗаполнения, Параметры, ТаблицаДанных)

	СозданныеДокументы = Новый Соответствие;
	
	БанковскиеСчета = ТаблицаДанных.Скопировать(, "БанковскийСчетОрганизации, Сумма");
	БанковскиеСчета.Свернуть("БанковскийСчетОрганизации", "Сумма");
	
	ДанныеЗаполнения.Вставить("Контрагент", Параметры.Контрагент);
	ДанныеЗаполнения.Вставить("БанковскийСчетКонтрагента", Параметры.БанковскийСчетКонтрагента);
	
	Если Параметры.ИмяДокумента = "ЗаявкаНаРасходованиеДенежныхСредств" Тогда
		
		ДокументОбъект = ОбъектДокументаОплаты(Параметры.ИмяДокумента);
		
		ДатаПлатежа = Дата('00010101');
		ДатыПлатежа = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаДанных, "ДатаПлатежа", Истина);
		
		Для Каждого ЗначениеСписка Из ДатыПлатежа Цикл
			ДатаПлатежа = ?(ДатаПлатежа = Дата('00010101'), ЗначениеСписка, Мин(ДатаПлатежа, ЗначениеСписка));
		КонецЦикла;
		
		ДанныеЗаполнения.Вставить("ЖелательнаяДатаПлатежа", ДатаПлатежа);
		
		ЗаполнитьДокументОплаты(ДокументОбъект, ТаблицаДанных, ДанныеЗаполнения);

		Для Каждого СтрокаСчета Из БанковскиеСчета Цикл
			НоваяСтрока = ДокументОбъект.РаспределениеПоСчетам.Добавить();
			НоваяСтрока.БанковскийСчетКасса = СтрокаСчета.БанковскийСчетОрганизации;
			НоваяСтрока.Сумма = СтрокаСчета.Сумма;
			НоваяСтрока.ДатаПлатежа = ДатаПлатежа;
		КонецЦикла;
		
		ЗаписатьДокумент(ДокументОбъект, Параметры);
		
		Если ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
			
			Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
				СозданныеДокументы.Вставить(СтрокаДанных.ИдентификаторСтроки, ДокументОбъект.Ссылка);
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		Для Каждого Счет Из БанковскиеСчета Цикл
			
			ДокументОбъект = ОбъектДокументаОплаты(Параметры.ИмяДокумента);
			
			ДанныеЗаполнения.Вставить("БанковскийСчет", Счет.БанковскийСчетОрганизации);
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("БанковскийСчетОрганизации", Счет.БанковскийСчетОрганизации);
			ТаблицаДанныхПоБанковскомуСчету = ТаблицаДанных.Скопировать(ПараметрыОтбора);
			
			ЗаполнитьДокументОплаты(ДокументОбъект, ТаблицаДанныхПоБанковскомуСчету, ДанныеЗаполнения);
			ЗаписатьДокумент(ДокументОбъект, Параметры);
			
			Если ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
				
				Для Каждого СтрокаДанных Из ТаблицаДанныхПоБанковскомуСчету Цикл
					СозданныеДокументы.Вставить(СтрокаДанных.ИдентификаторСтроки, ДокументОбъект.Ссылка);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СозданныеДокументы;

КонецФункции

Функция ДокументыОплатыБезСпискаКонтрагентов(ДанныеЗаполнения, Параметры, ТаблицаДанных)

	СозданныеДокументы = Новый Соответствие;
	
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
				
		ДанныеЗаполнения.Вставить("Контрагент", СтрокаДанных.Контрагент);
		ДанныеЗаполнения.Вставить("Партнер", СтрокаДанных.Партнер);
		ДанныеЗаполнения.Вставить("БанковскийСчетКонтрагента", СтрокаДанных.БанковскийСчетКонтрагента);
		ДанныеЗаполнения.Вставить("Договор", СтрокаДанных.Договор);
		ДанныеЗаполнения.Вставить("ОбъектРасчетов", СтрокаДанных.ОбъектРасчетов);
		ДанныеЗаполнения.Вставить("Сумма", СтрокаДанных.Сумма);
		ДанныеЗаполнения.Вставить("СуммаДокумента", СтрокаДанных.Сумма);
		ДанныеЗаполнения.Вставить("ЖелательнаяДатаПлатежа", СтрокаДанных.ДатаПлатежа);
		ДанныеЗаполнения.Вставить("БанковскийСчет", СтрокаДанных.БанковскийСчетОрганизации);
		ДанныеЗаполнения.Вставить("СтатьяДвиженияДенежныхСредств", СтрокаДанных.СтатьяДвиженияДенежныхСредств);
		
		ДокументОбъект = ОбъектДокументаОплаты(Параметры.ИмяДокумента);
		
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		ДенежныеСредстваСерверЛокализация.УстановитьКодВидаДоходаСамозанятого(ДокументОбъект);
		
		ЗаполнитьРасшифровкуПлатежа(ДокументОбъект, ДанныеЗаполнения, ДанныеЗаполнения);
		
		Если Параметры.ИмяДокумента = "ЗаявкаНаРасходованиеДенежныхСредств" Тогда
			
			Если ЗначениеЗаполнено(СтрокаДанных.БанковскийСчетОрганизации) Тогда 
				СтрокаСчета = ДокументОбъект.РаспределениеПоСчетам.Добавить();
				СтрокаСчета.БанковскийСчетКасса = СтрокаДанных.БанковскийСчетОрганизации;
				СтрокаСчета.Сумма = СтрокаДанных.Сумма;
				СтрокаСчета.ДатаПлатежа = СтрокаДанных.ДатаПлатежа;
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаписатьДокумент(ДокументОбъект, Параметры);
		
		Если ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
			СозданныеДокументы.Вставить(СтрокаДанных.ИдентификаторСтроки, ДокументОбъект.Ссылка);
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат СозданныеДокументы;

КонецФункции

// Возвращает значение типа ДокументОбъект по ссылке или имени документа оплаты.
// 
// Параметры:
//  ИмяДокумента - Строка - Имя документа оплаты.
// 
// Возвращаемое значение:
//  - ДокументОбъект.ЗаявкаНаРасходованиеДенежныхСредств
//  - ДокументОбъект.СписаниеБезналичныхДенежныхСредств
//
Функция ОбъектДокументаОплаты(ИмяДокумента)

	ДокументОбъект = Документы[ИмяДокумента].СоздатьДокумент();
	ДокументОбъект.Дата = ТекущаяДатаСеанса();
	
	Возврат ДокументОбъект;

КонецФункции

Процедура ЗаполнитьДокументОплаты(ДокументОбъект, ДанныеПлатежа, ДанныеЗаполнения)

	Для Каждого СтрокаДанных Из ДанныеПлатежа Цикл
		ЗаполнитьРасшифровкуПлатежа(ДокументОбъект, СтрокаДанных, ДанныеЗаполнения);
	КонецЦикла;
	
	ДанныеЗаполнения.Вставить("СуммаДокумента", ДокументОбъект.РасшифровкаПлатежа.Итог("Сумма"));
	
	СчетаКонтрагентов = ДанныеПлатежа.Скопировать(, "Контрагент, БанковскийСчетКонтрагента");
	СчетаКонтрагентов.Свернуть("Контрагент, БанковскийСчетКонтрагента");
	ДокументОбъект.БанковскиеСчетаСпискаКонтрагентов.Загрузить(СчетаКонтрагентов);
	
	ДокументОбъект.Заполнить(ДанныеЗаполнения);

КонецПроцедуры

Процедура ЗаполнитьРасшифровкуПлатежа(ДокументОбъект, ДанныеЗаполненияРасшифровки, ДанныеЗаполнения)

	СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, ДанныеЗаполненияРасшифровки);
	СтрокаРасшифровки.ВалютаВзаиморасчетов = ДанныеЗаполнения.Валюта;
	СтрокаРасшифровки.Организация = ДокументОбъект.Организация;
	
	Если ЗначениеЗаполнено(СтрокаРасшифровки.СтатьяДвиженияДенежныхСредств)
		И Не Справочники.СтатьиДвиженияДенежныхСредств.СтатьяСоответствуетХозяйственнойОперации(
		СтрокаРасшифровки.СтатьяДвиженияДенежныхСредств, ДанныеЗаполнения.ХозяйственнаяОперация) Тогда
		СтрокаРасшифровки.СтатьяДвиженияДенежныхСредств = Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаРасшифровки.СтатьяДвиженияДенежныхСредств) Тогда
		СтрокаРасшифровки.СтатьяДвиженияДенежныхСредств =
			Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(
				ДанныеЗаполнения.ХозяйственнаяОперация);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьДокумент(ДокументОбъект, Параметры)
	
	ТекстСообщения = "";
	Записан = Ложь;
	
	ОшибокНет = ДокументОбъект.ПроверитьЗаполнение();
	
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		Записан = Истина;
	Исключение
		
		Если Не ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось создать документ ""%1""'"), ДокументОбъект.Метаданные().Синоним);
		Иначе
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось записать документ %1'"), ДокументОбъект);
		КонецЕсли;
		
		Комментарий = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			ТекстСообщения,
			УровеньЖурналаРегистрации.Ошибка, , ,
			Комментарий);
		
	КонецПопытки;
	
	Если Не ОшибокНет Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось провести документ %1'"), ДокументОбъект);
	КонецЕсли;
	
	Если Записан Тогда
		ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
				Параметры.ЗамерПроизводительности, 1, "СозданиеДокумента");
	КонецЕсли;
	
	Если ОшибокНет
		И Записан Тогда
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось провести документ %1'"), ДокументОбъект);
			Комментарий = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(
				ТекстСообщения,
				УровеньЖурналаРегистрации.Ошибка, , ,
				Комментарий);
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстСообщения) Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

Функция СоглашенияСПоставщиками(Организация, ИсходныеДанные)

	Результат = НоваяТаблицаСоглашенийСПоставщиками();
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСПоставщиками") Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсходныеДанные.Партнер КАК Партнер,
		|	ИсходныеДанные.Контрагент КАК Контрагент
		|ПОМЕСТИТЬ ТаблицаДанных
		|ИЗ
		|	&ИсходныеДанные КАК ИсходныеДанные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДанных.Партнер КАК Партнер,
		|	СоглашенияСПоставщиками.Ссылка КАК Соглашение,
		|	ВЫБОР
		|		КОГДА СоглашенияСПоставщиками.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА ТаблицаДанных.Контрагент
		|		ИНАЧЕ СоглашенияСПоставщиками.Контрагент
		|	КОНЕЦ КАК Контрагент,
		|	ВЫБОР
		|		КОГДА СоглашенияСПоставщиками.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ТОГДА &Организация
		|		ИНАЧЕ СоглашенияСПоставщиками.Организация
		|	КОНЕЦ КАК Организация,
		|	ВЫБОР
		|		КОГДА СоглашенияСПоставщиками.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|				И СоглашенияСПоставщиками.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА 0
		|		КОГДА СоглашенияСПоставщиками.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|				И СоглашенияСПоставщиками.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА 1
		|		КОГДА СоглашенияСПоставщиками.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|				И СоглашенияСПоставщиками.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК Приоритет,
		|	СоглашенияСПоставщиками.ИспользуютсяДоговорыКонтрагентов КАК ИспользуютсяДоговорыКонтрагентов,
		|	ТаблицаДанных.Контрагент КАК ИсходныеДанныеКонтрагент
		|ПОМЕСТИТЬ СоглашенияПартнеров
		|ИЗ
		|	ТаблицаДанных КАК ТаблицаДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияСПоставщиками КАК СоглашенияСПоставщиками
		|		ПО ТаблицаДанных.Партнер = СоглашенияСПоставщиками.Партнер
		|ГДЕ
		|	НЕ СоглашенияСПоставщиками.ПометкаУдаления
		|	И СоглашенияСПоставщиками.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика)
		|	И СоглашенияСПоставщиками.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСПоставщиками.Действует)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СоглашенияПартнеров.Партнер КАК Партнер,
		|	СоглашенияПартнеров.Контрагент КАК Контрагент,
		|	СоглашенияПартнеров.ИспользуютсяДоговорыКонтрагентов КАК ИспользуютсяДоговоры,
		|	СоглашенияПартнеров.Соглашение КАК Соглашение,
		|	МИНИМУМ(СоглашенияПартнеров.Приоритет) КАК Приоритет
		|ИЗ
		|	СоглашенияПартнеров КАК СоглашенияПартнеров
		|ГДЕ
		|	СоглашенияПартнеров.Организация = &Организация
		|	И СоглашенияПартнеров.Контрагент = СоглашенияПартнеров.ИсходныеДанныеКонтрагент
		|
		|СГРУППИРОВАТЬ ПО
		|	СоглашенияПартнеров.Партнер,
		|	СоглашенияПартнеров.Контрагент,
		|	СоглашенияПартнеров.ИспользуютсяДоговорыКонтрагентов,
		|	СоглашенияПартнеров.Соглашение
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
	
	Запрос.УстановитьПараметр("ИсходныеДанные", ИсходныеДанные);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;

КонецФункции

Функция НоваяТаблицаСоглашенийСПоставщиками()

	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Партнер", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	Таблица.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	Таблица.Колонки.Добавить("ИспользуютсяДоговоры", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("Соглашение", Новый ОписаниеТипов("СправочникСсылка.СоглашенияСПоставщиками"));
	
	Возврат Таблица;

КонецФункции

Функция ОстаткиОформленияПоЗаказам(ТаблицаОбъектов)

	Результат = НоваяТаблицаОстатковОформленияПоЗаказам();
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам") Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсходныеДанные.ОбъектРасчетов КАК ОбъектРасчетов
		|ПОМЕСТИТЬ ТаблицаДанных
		|ИЗ
		|	&ИсходныеДанные КАК ИсходныеДанные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДанных.ОбъектРасчетов КАК ОбъектРасчетов,
		|	ОбъектыРасчетов.Объект КАК ЗаказПоставщику
		|ПОМЕСТИТЬ ЗаказыПоставщику
		|ИЗ
		|	ТаблицаДанных КАК ТаблицаДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|		ПО ТаблицаДанных.ОбъектРасчетов = ОбъектыРасчетов.Ссылка
		|ГДЕ
		|	ОбъектыРасчетов.Объект ССЫЛКА Документ.ЗаказПоставщику
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаказыПоставщикам.ЗаказПоставщику КАК ЗаказПоставщику,
		|	ЗаказыПоставщикам.Номенклатура КАК Номенклатура,
		|	ЗаказыПоставщикам.Характеристика КАК Характеристика,
		|	ЗаказыПоставщикам.КодСтроки КАК КодСтроки,
		|	СУММА(ЗаказыПоставщикам.КОформлению) КАК Приход
		|ПОМЕСТИТЬ КОформлениюПриход
		|ИЗ
		|	ЗаказыПоставщику КАК ЗаказыПоставщику
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам КАК ЗаказыПоставщикам
		|		ПО ЗаказыПоставщику.ЗаказПоставщику = ЗаказыПоставщикам.ЗаказПоставщику
		|ГДЕ
		|	ЗаказыПоставщикам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказыПоставщикам.ЗаказПоставщику,
		|	ЗаказыПоставщикам.Номенклатура,
		|	ЗаказыПоставщикам.Характеристика,
		|	ЗаказыПоставщикам.КодСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаказыПоставщикам.ЗаказПоставщику КАК ЗаказПоставщику,
		|	ЗаказыПоставщикам.Номенклатура КАК Номенклатура,
		|	ЗаказыПоставщикам.Характеристика КАК Характеристика,
		|	ЗаказыПоставщикам.КодСтроки КАК КодСтроки,
		|	СУММА(ЗаказыПоставщикам.КОформлению) КАК Расход
		|ПОМЕСТИТЬ КОформлениюРасход
		|ИЗ
		|	ЗаказыПоставщику КАК ЗаказыПоставщику
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам КАК ЗаказыПоставщикам
		|		ПО ЗаказыПоставщику.ЗаказПоставщику = ЗаказыПоставщикам.ЗаказПоставщику
		|ГДЕ
		|	ЗаказыПоставщикам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказыПоставщикам.ЗаказПоставщику,
		|	ЗаказыПоставщикам.Номенклатура,
		|	ЗаказыПоставщикам.Характеристика,
		|	ЗаказыПоставщикам.КодСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОформлениюПриход.ЗаказПоставщику КАК ЗаказПоставщику,
		|	КОформлениюПриход.Номенклатура КАК Номенклатура,
		|	КОформлениюПриход.Характеристика КАК Характеристика,
		|	КОформлениюПриход.КодСтроки КАК КодСтроки,
		|	КОформлениюПриход.Приход - ЕСТЬNULL(КОформлениюРасход.Расход, 0) КАК Остаток
		|ПОМЕСТИТЬ КОформлениюОстатки
		|ИЗ
		|	КОформлениюПриход КАК КОформлениюПриход
		|		ЛЕВОЕ СОЕДИНЕНИЕ КОформлениюРасход КАК КОформлениюРасход
		|		ПО КОформлениюПриход.ЗаказПоставщику = КОформлениюРасход.ЗаказПоставщику
		|			И КОформлениюПриход.Номенклатура = КОформлениюРасход.Номенклатура
		|			И КОформлениюПриход.Характеристика = КОформлениюРасход.Характеристика
		|			И КОформлениюПриход.КодСтроки = КОформлениюРасход.КодСтроки
		|ГДЕ
		|	КОформлениюПриход.Приход - ЕСТЬNULL(КОформлениюРасход.Расход, 0) > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОформлениюПриход.ЗаказПоставщику КАК ЗаказПоставщику,
		|	КОформлениюПриход.Номенклатура КАК Номенклатура,
		|	КОформлениюПриход.Характеристика КАК Характеристика,
		|	КОформлениюПриход.КодСтроки КАК КодСтроки,
		|	ЕСТЬNULL(КОформлениюОстатки.Остаток, 0) КАК Остаток
		|ИЗ
		|	КОформлениюПриход КАК КОформлениюПриход
		|		ЛЕВОЕ СОЕДИНЕНИЕ КОформлениюОстатки КАК КОформлениюОстатки
		|		ПО КОформлениюПриход.ЗаказПоставщику = КОформлениюОстатки.ЗаказПоставщику
		|			И КОформлениюПриход.Номенклатура = КОформлениюОстатки.Номенклатура
		|			И КОформлениюПриход.Характеристика = КОформлениюОстатки.Характеристика
		|			И КОформлениюПриход.КодСтроки = КОформлениюОстатки.КодСтроки
		|ГДЕ
		|	КОформлениюПриход.Приход > 0";
	
	Запрос.УстановитьПараметр("ИсходныеДанные", ТаблицаОбъектов);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;

КонецФункции

Функция НоваяТаблицаОстатковОформленияПоЗаказам()

	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ЗаказПоставщику", Новый ОписаниеТипов("ДокументСсылка.ЗаказПоставщику"));
	Таблица.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Таблица.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Таблица.Колонки.Добавить("КодСтроки", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("КОформлениюОстаток", Новый ОписаниеТипов("Число"));
	
	Возврат Таблица;

КонецФункции

Функция СоглашениеСПоставщиком(ТаблицаСоглашений, ПараметрыОтбора)

	Результат = Справочники.СоглашенияСПоставщиками.ПустаяСсылка();
	
	Отбор = Новый Структура;
	Отбор.Вставить("Партнер", ПараметрыОтбора.Партнер);
	Отбор.Вставить("Контрагент", ПараметрыОтбора.Контрагент);
	Отбор.Вставить("ИспользуютсяДоговоры", ЗначениеЗаполнено(ПараметрыОтбора.Договор));
	
	НайденныеСтроки = ТаблицаСоглашений.НайтиСтроки(Отбор);
		
	Если НайденныеСтроки.Количество() <> 0 Тогда
		Результат = НайденныеСтроки[0].Соглашение;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Процедура ЗаполнитьТабличнуюЧастьТовары(ДокументОбъект, ИмяТабличнойЧасти, ДанныеЗаполнения, ОстаткиПоЗаказам)

	СтрокаТовары = ОбщегоНазначения.СкопироватьРекурсивно(ДанныеЗаполнения.ДанныеЗаполненияНоменклатуры, Ложь);
	
	СтруктураДействий = Новый Структура;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТовары, "НоменклатураПартнера") Тогда
		СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПартнераПоНоменклатуре", ДокументОбъект.Партнер);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТовары, "ВидЦеныПоставщика") Тогда
		
		СтруктураЗаполнения = 
			ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(ДокументОбъект);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСПоставщиками")
			И ЗначениеЗаполнено(ДокументОбъект.Соглашение) Тогда
			СтруктураДействий.Вставить("ЗаполнитьУсловияЗакупок", СтруктураЗаполнения);
		Иначе
			СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", СтруктураЗаполнения);
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыЗаполненияСтавкиНДС = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(ДокументОбъект);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ПараметрыЗаполненияСтавкиНДС);
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТовары, СтруктураДействий, Неопределено);
	
	Если СтрокаТовары.Цена = 0 Тогда
		ПроцентНДС = УчетНДСУПКлиентСервер.ЗначениеСтавкиНДС(СтрокаТовары.СтавкаНДС);
		СтрокаТовары.Сумма = ДанныеЗаполнения.Сумма / (1 + ПроцентНДС / 100);
		СтрокаТовары.Цена = СтрокаТовары.Сумма / СтрокаТовары.Количество;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ДокументОбъект);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТовары, "КоличествоУпаковок") Тогда
		СтруктураДействий.Вставить("ПересчитатьСумму");
	Иначе
		СтруктураДействий.Вставить("ПересчитатьСумму", "Количество");
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТовары, "СуммаРучнойСкидки") Тогда
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	КонецЕсли;
	
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументОбъект, "ПоступлениеПоЗаказам") Тогда
		
		ПривязатьСтрокиКЗаказу(ДокументОбъект, СтрокаТовары, ОстаткиПоЗаказам);
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТовары, СтруктураДействий, Неопределено);
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТовары, "ОбъектРасчетов") Тогда
		СтрокаТовары.ОбъектРасчетов = ДанныеЗаполнения.ОбъектРасчетов;
	КонецЕсли;
	
	ДокументОбъект[ИмяТабличнойЧасти].Очистить();
	НоваяСтрока = ДокументОбъект[ИмяТабличнойЧасти].Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДокументОбъект.Ссылка);
	ПараметрыМеханизма = МенеджерОбъекта.ПараметрыВзаиморасчеты(ДокументОбъект);
	
	Если ТипЗнч(ПараметрыМеханизма) = Тип("Массив") Тогда
		СтруктураПараметров = ПараметрыМеханизма[0];
	Иначе
		СтруктураПараметров = ПараметрыМеханизма;
	КонецЕсли;
	
	ВзаиморасчетыСервер.ПроверитьЗаполнитьСуммыВзаиморасчетовВТабличнойЧасти(ДокументОбъект, СтруктураПараметров);

КонецПроцедуры

Процедура ПривязатьСтрокиКЗаказу(Объект, СтрокаТовары, ОстаткиПоЗаказам)

	Если Не ЗначениеЗаполнено(Объект.ЗаказПоставщику) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТовары.ЗаказПоставщику = Объект.ЗаказПоставщику;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ЗаказПоставщику", СтрокаТовары.ЗаказПоставщику);
	Отбор.Вставить("Номенклатура", СтрокаТовары.Номенклатура);
	Отбор.Вставить("Характеристика", СтрокаТовары.Характеристика);
	
	КодыСтроки = ОстаткиПоЗаказам.НайтиСтроки(Отбор);
	
	Если КодыСтроки.Количество() > 1 Тогда
		
		Для Каждого ТекущийКод Из КодыСтроки Цикл
			
			Если ТекущийКод.Остаток > 0 Тогда
				СтрокаТовары.КодСтроки = ТекущийКод.КодСтроки;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если СтрокаТовары.КодСтроки = 0 Тогда
			СтрокаТовары.КодСтроки = КодыСтроки[0].КодСтроки;
		КонецЕсли;
		
	ИначеЕсли КодыСтроки.Количество() = 1 Тогда
		СтрокаТовары.КодСтроки = КодыСтроки[0].КодСтроки;
	КонецЕсли;

КонецПроцедуры

Процедура СопоставитьЗагружаемыеДанныеНаОплату(
	АдресЗагружаемыхДанных,
	АдресТаблицыСопоставления,
	СписокНеоднозначностей,
	ПолноеИмяТабличнойЧасти,
	ДополнительныеПараметры)

	ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных);
	Таблица = ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления); //ТаблицаЗначений
	
	ЗамерПроизводительности = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"Обработка.ПомощникРаботыССамозанятыми.Форма.ЗагрузитьКонтрагентовИзФайла");
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДанныхПоЗагружаемомуФайлуНаОплату();
	
	Запрос.УстановитьПараметр("ЗагруженныеДокументы", ЗагружаемыеДанные);
	Запрос.УстановитьПараметр("Валюта", ДополнительныеПараметры.Валюта);
	Запрос.УстановитьПараметр("Организация", ДополнительныеПараметры.Организация);
	
	УстановитьПривилегированныйРежим(Истина);
	ПакетыЗапросов = Запрос.ВыполнитьПакет();
	ВыборкаИзФайла = ПакетыЗапросов[ПакетыЗапросов.ВГраница()].Выбрать();
	БанковскиеСчета = ПакетыЗапросов[ПакетыЗапросов.ВГраница() - 1].Выгрузить();
	ДоговорыКонтрагентов = ПакетыЗапросов[ПакетыЗапросов.ВГраница() - 2].Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	КоличествоДанных = 0;
	
	Пока ВыборкаИзФайла.Следующий() Цикл
		
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаИзФайла);
		
		Если Не ЗначениеЗаполнено(НоваяСтрока.Контрагент) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НоваяСтрока.ДатаПлатежа = Дата('00010101') Тогда
			НоваяСтрока.ДатаПлатежа = ТекущаяДатаСеанса();
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(НоваяСтрока.БанковскийСчетКонтрагента)
			И ВыборкаИзФайла.НомерСчета = "" Тогда
			
			ОтборСчетаПоКонтрагенту = Новый Структура;
			ОтборСчетаПоКонтрагенту.Вставить("Контрагент", НоваяСтрока.Контрагент);
			
			СписокБанковскихСчетов = БанковскиеСчета.НайтиСтроки(ОтборСчетаПоКонтрагенту);
			
			Если СписокБанковскихСчетов.Количество() = 1 Тогда
				НоваяСтрока.БанковскийСчетКонтрагента = СписокБанковскихСчетов[0].БанковскийСчет;
			КонецЕсли;
			
		КонецЕсли;
		
		ОтборДоговоровПоКонтрагенту = Новый Структура;
		ОтборДоговоровПоКонтрагенту.Вставить("Контрагент", НоваяСтрока.Контрагент);
		ОтборДоговоровПоКонтрагенту.Вставить("БанковскийСчет", ВыборкаИзФайла.БанковскийСчетКонтрагента);
		
		ДоговорыКонтрагента = ДоговорыКонтрагентов.Скопировать(ОтборДоговоровПоКонтрагенту);
		
		Если ДоговорыКонтрагента.Количество() <> 0 Тогда
			
			Если ВыборкаИзФайла.Договор <> ""
				ИЛИ ВыборкаИзФайла.НомерДоговора <> "" Тогда
				
				ОтборДоговора = Новый Структура;
				
				Если ВыборкаИзФайла.Договор <> "" Тогда
					ОтборДоговора.Вставить("Договор", ВыборкаИзФайла.Договор);
				КонецЕсли;
				
				Если ВыборкаИзФайла.НомерДоговора <> "" Тогда
					ОтборДоговора.Вставить("НомерДоговора", ВыборкаИзФайла.НомерДоговора);
				КонецЕсли;
				
				Если ВыборкаИзФайла.ДатаДоговора <> '00010101' Тогда
					ОтборДоговора.Вставить("ДатаДоговора", ВыборкаИзФайла.ДатаДоговора);
				КонецЕсли;
				
				СписокДоговоров = ДоговорыКонтрагента.НайтиСтроки(ОтборДоговора);
				
				Если СписокДоговоров.Количество() = 1 Тогда
					НоваяСтрока.Договор = СписокДоговоров[0].ДоговорКонтрагента;
					НоваяСтрока.ОбъектРасчетов = СписокДоговоров[0].ОбъектРасчетов;
					НоваяСтрока.СтатьяДвиженияДенежныхСредств = СписокДоговоров[0].СтатьяДвиженияДенежныхСредств;
					НоваяСтрока.БанковскийСчетОрганизации = СписокДоговоров[0].БанковскийСчетОрганизации;
				КонецЕсли;
				
			ИначеЕсли ДоговорыКонтрагента.Количество() = 1 Тогда
				НоваяСтрока.Договор = ДоговорыКонтрагента[0].ДоговорКонтрагента;
				НоваяСтрока.ОбъектРасчетов = ДоговорыКонтрагента[0].ОбъектРасчетов;
				НоваяСтрока.СтатьяДвиженияДенежныхСредств = ДоговорыКонтрагента[0].СтатьяДвиженияДенежныхСредств;
				НоваяСтрока.БанковскийСчетОрганизации = ДоговорыКонтрагента[0].БанковскийСчетОрганизации;
			КонецЕсли;
			
		КонецЕсли;
		
		КоличествоДанных = КоличествоДанных + 1;
		
		ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(ЗамерПроизводительности, 1, "ЗагрузкаИзФайла");
		
	КонецЦикла;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ЗамерПроизводительности, КоличествоДанных);
	
	ПоместитьВоВременноеХранилище(Таблица, АдресТаблицыСопоставления);

КонецПроцедуры

Функция ТекстЗапросаДанныхПоЗагружаемомуФайлуНаОплату()

	Возврат
		"ВЫБРАТЬ
		|	ЗагруженныеДокументы.ФИО КАК ФИО,
		|	ЗагруженныеДокументы.ИНН КАК ИНН,
		|	ЗагруженныеДокументы.НомерСчета КАК НомерСчета,
		|	ЗагруженныеДокументы.БИК КАК БИК,
		|	ЗагруженныеДокументы.Договор КАК Договор,
		|	ЗагруженныеДокументы.НомерДоговора КАК НомерДоговора,
		|	ЗагруженныеДокументы.ДатаДоговора КАК ДатаДоговора,
		|	ЗагруженныеДокументы.Сумма КАК Сумма,
		|	ЗагруженныеДокументы.Фамилия КАК Фамилия,
		|	ЗагруженныеДокументы.Имя КАК Имя,
		|	ЗагруженныеДокументы.Отчество КАК Отчество,
		|	ЗагруженныеДокументы.ДатаПлатежа КАК ДатаПлатежа
		|ПОМЕСТИТЬ ИсходныеДанные
		|ИЗ
		|	&ЗагруженныеДокументы КАК ЗагруженныеДокументы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсходныеДанные.ФИО КАК ФИО,
		|	ИсходныеДанные.Фамилия КАК Фамилия,
		|	ИсходныеДанные.Имя КАК Имя,
		|	ИсходныеДанные.Отчество КАК Отчество,
		|	ИсходныеДанные.ИНН КАК ИНН,
		|	ИсходныеДанные.Фамилия + ВЫБОР
		|		КОГДА ИсходныеДанные.Фамилия <> """"
		|				И ИсходныеДанные.Имя <> """"
		|			ТОГДА "" "" + ИсходныеДанные.Имя
		|		ИНАЧЕ """"
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ИсходныеДанные.Отчество <> """"
		|			ТОГДА "" "" + ИсходныеДанные.Отчество
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ФамилияИмяОтчество,
		|	ИсходныеДанные.НомерСчета КАК НомерСчета,
		|	ИсходныеДанные.БИК КАК БИК,
		|	ИсходныеДанные.Договор КАК Договор,
		|	ИсходныеДанные.НомерДоговора КАК НомерДоговора,
		|	ИсходныеДанные.ДатаДоговора КАК ДатаДоговора,
		|	ИсходныеДанные.Сумма КАК Сумма,
		|	ИсходныеДанные.ДатаПлатежа КАК ДатаПлатежа
		|ПОМЕСТИТЬ СписокСамозанятых
		|ИЗ
		|	ИсходныеДанные КАК ИсходныеДанные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СписокСамозанятых.ФИО КАК ФИО,
		|	СписокСамозанятых.ИНН КАК ИНН,
		|	СписокСамозанятых.ФамилияИмяОтчество КАК ФамилияИмяОтчество
		|ПОМЕСТИТЬ СписокПоискаКонтрагентов
		|ИЗ
		|	СписокСамозанятых КАК СписокСамозанятых
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СписокПоискаКонтрагентов.ФИО КАК ФИО,
		|	СписокПоискаКонтрагентов.ФамилияИмяОтчество КАК ФамилияИмяОтчество,
		|	СписокПоискаКонтрагентов.ИНН КАК ИНН,
		|	Контрагенты.Ссылка КАК Контрагент
		|ПОМЕСТИТЬ НайденныеКонтрагентыПоИНН
		|ИЗ
		|	СписокПоискаКонтрагентов КАК СписокПоискаКонтрагентов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО СписокПоискаКонтрагентов.ИНН = Контрагенты.ИНН
		|ГДЕ
		|	СписокПоискаКонтрагентов.ИНН <> """"
		|	И Контрагенты.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписокПоискаКонтрагентов.ФИО КАК ФИО,
		|	СписокПоискаКонтрагентов.ФамилияИмяОтчество КАК ФамилияИмяОтчество,
		|	СписокПоискаКонтрагентов.ИНН КАК ИНН
		|ПОМЕСТИТЬ НеНайденныеКонтрагентыПоИНН
		|ИЗ
		|	СписокПоискаКонтрагентов КАК СписокПоискаКонтрагентов
		|ГДЕ
		|	НЕ (СписокПоискаКонтрагентов.ФИО, СписокПоискаКонтрагентов.ФамилияИмяОтчество, СписокПоискаКонтрагентов.ИНН) В
		|				(ВЫБРАТЬ
		|					НайденныеКонтрагентыПоИНН.ФИО КАК ФИО,
		|					НайденныеКонтрагентыПоИНН.ФамилияИмяОтчество КАК ФамилияИмяОтчество,
		|					НайденныеКонтрагентыПоИНН.ИНН КАК ИНН
		|				ИЗ
		|					НайденныеКонтрагентыПоИНН КАК НайденныеКонтрагентыПоИНН)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НеНайденныеКонтрагентыПоИНН.ФИО КАК ФИО,
		|	НеНайденныеКонтрагентыПоИНН.ФамилияИмяОтчество КАК ФамилияИмяОтчество,
		|	НеНайденныеКонтрагентыПоИНН.ИНН КАК ИНН,
		|	Контрагенты.Ссылка КАК Контрагент,
		|	Контрагенты.ИНН КАК ИННКонтрагента
		|ПОМЕСТИТЬ КонтрагентыПоФИО
		|ИЗ
		|	НеНайденныеКонтрагентыПоИНН КАК НеНайденныеКонтрагентыПоИНН
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО НеНайденныеКонтрагентыПоИНН.ФИО = Контрагенты.Наименование
		|ГДЕ
		|	НеНайденныеКонтрагентыПоИНН.ФИО <> """"
		|	И Контрагенты.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НеНайденныеКонтрагентыПоИНН.ФИО,
		|	НеНайденныеКонтрагентыПоИНН.ФамилияИмяОтчество,
		|	НеНайденныеКонтрагентыПоИНН.ИНН,
		|	Контрагенты.Ссылка,
		|	Контрагенты.ИНН
		|ИЗ
		|	НеНайденныеКонтрагентыПоИНН КАК НеНайденныеКонтрагентыПоИНН
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО НеНайденныеКонтрагентыПоИНН.ФИО = Контрагенты.НаименованиеПолное
		|ГДЕ
		|	НеНайденныеКонтрагентыПоИНН.ФИО <> """"
		|	И Контрагенты.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НеНайденныеКонтрагентыПоИНН.ФИО,
		|	НеНайденныеКонтрагентыПоИНН.ФамилияИмяОтчество,
		|	НеНайденныеКонтрагентыПоИНН.ИНН,
		|	Контрагенты.Ссылка,
		|	Контрагенты.ИНН
		|ИЗ
		|	НеНайденныеКонтрагентыПоИНН КАК НеНайденныеКонтрагентыПоИНН
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО НеНайденныеКонтрагентыПоИНН.ФамилияИмяОтчество = Контрагенты.Наименование
		|ГДЕ
		|	НеНайденныеКонтрагентыПоИНН.ФамилияИмяОтчество <> """"
		|	И Контрагенты.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НеНайденныеКонтрагентыПоИНН.ФИО,
		|	НеНайденныеКонтрагентыПоИНН.ФамилияИмяОтчество,
		|	НеНайденныеКонтрагентыПоИНН.ИНН,
		|	Контрагенты.Ссылка,
		|	Контрагенты.ИНН
		|ИЗ
		|	НеНайденныеКонтрагентыПоИНН КАК НеНайденныеКонтрагентыПоИНН
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО НеНайденныеКонтрагентыПоИНН.ФамилияИмяОтчество = Контрагенты.НаименованиеПолное
		|ГДЕ
		|	НеНайденныеКонтрагентыПоИНН.ФамилияИмяОтчество <> """"
		|	И Контрагенты.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВложенныйЗапрос.ФИО КАК ФИО,
		|	ВложенныйЗапрос.ФамилияИмяОтчество КАК ФамилияИмяОтчество,
		|	ВложенныйЗапрос.ИНН КАК ИНН,
		|	ВложенныйЗапрос.Контрагент КАК Контрагент,
		|	ВложенныйЗапрос.ИННКонтрагента КАК ИННКонтрагента
		|ПОМЕСТИТЬ НайденныеКонтрагентыПоФИО
		|ИЗ
		|	КонтрагентыПоФИО КАК ВложенныйЗапрос
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НайденныеКонтрагентыПоИНН.ФИО КАК ФИО,
		|	НайденныеКонтрагентыПоИНН.ИНН КАК ИНН,
		|	НайденныеКонтрагентыПоИНН.ФамилияИмяОтчество КАК ФамилияИмяОтчество,
		|	НайденныеКонтрагентыПоИНН.Контрагент КАК Контрагент,
		|	НайденныеКонтрагентыПоИНН.ИНН КАК ИННКонтрагента
		|ПОМЕСТИТЬ НайденныеКонтрагентыПоИННИФИО
		|ИЗ
		|	НайденныеКонтрагентыПоИНН КАК НайденныеКонтрагентыПоИНН
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НайденныеКонтрагентыПоФИО.ФИО,
		|	НайденныеКонтрагентыПоФИО.ИНН,
		|	НайденныеКонтрагентыПоФИО.ФамилияИмяОтчество,
		|	НайденныеКонтрагентыПоФИО.Контрагент,
		|	НайденныеКонтрагентыПоФИО.ИННКонтрагента
		|ИЗ
		|	НайденныеКонтрагентыПоФИО КАК НайденныеКонтрагентыПоФИО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НеНайденныеКонтрагентыПоИНН.ФИО КАК ФИО,
		|	НеНайденныеКонтрагентыПоИНН.ФамилияИмяОтчество КАК ФамилияИмяОтчество,
		|	НеНайденныеКонтрагентыПоИНН.ИНН КАК ИНН
		|ПОМЕСТИТЬ НеНайденныеКонтрагентыПоИННИФИО
		|ИЗ
		|	НеНайденныеКонтрагентыПоИНН КАК НеНайденныеКонтрагентыПоИНН
		|ГДЕ
		|	НЕ (НеНайденныеКонтрагентыПоИНН.ФИО, НеНайденныеКонтрагентыПоИНН.ФамилияИмяОтчество, НеНайденныеКонтрагентыПоИНН.ИНН) В
		|				(ВЫБРАТЬ
		|					НайденныеКонтрагентыПоИННИФИО.ФИО КАК ФИО,
		|					НайденныеКонтрагентыПоИННИФИО.ФамилияИмяОтчество КАК ФамилияИмяОтчество,
		|					НайденныеКонтрагентыПоИННИФИО.ИНН КАК ИНН
		|				ИЗ
		|					НайденныеКонтрагентыПоИННИФИО КАК НайденныеКонтрагентыПоИННИФИО)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НеНайденныеКонтрагентыПоИННИФИО.ФИО КАК ФИО,
		|	НеНайденныеКонтрагентыПоИННИФИО.ФамилияИмяОтчество КАК ФамилияИмяОтчество,
		|	НеНайденныеКонтрагентыПоИННИФИО.ИНН КАК ИНН,
		|	НайденныеКонтрагентыПоИННИФИО.Контрагент КАК Контрагент,
		|	НайденныеКонтрагентыПоИННИФИО.ИННКонтрагента КАК ИННКонтрагента
		|ПОМЕСТИТЬ НайденныеКонтрагенты
		|ИЗ
		|	НеНайденныеКонтрагентыПоИННИФИО КАК НеНайденныеКонтрагентыПоИННИФИО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НайденныеКонтрагентыПоИННИФИО КАК НайденныеКонтрагентыПоИННИФИО
		|		ПО НеНайденныеКонтрагентыПоИННИФИО.ФИО = НайденныеКонтрагентыПоИННИФИО.ФИО
		|ГДЕ
		|	НеНайденныеКонтрагентыПоИННИФИО.ФИО <> """"
		|	И НеНайденныеКонтрагентыПоИННИФИО.ФамилияИмяОтчество = """"
		|	И НеНайденныеКонтрагентыПоИННИФИО.ИНН = """"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НеНайденныеКонтрагентыПоИННИФИО.ФИО,
		|	НеНайденныеКонтрагентыПоИННИФИО.ФамилияИмяОтчество,
		|	НеНайденныеКонтрагентыПоИННИФИО.ИНН,
		|	НайденныеКонтрагентыПоИННИФИО.Контрагент,
		|	НайденныеКонтрагентыПоИННИФИО.ИННКонтрагента
		|ИЗ
		|	НеНайденныеКонтрагентыПоИННИФИО КАК НеНайденныеКонтрагентыПоИННИФИО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НайденныеКонтрагентыПоИННИФИО КАК НайденныеКонтрагентыПоИННИФИО
		|		ПО НеНайденныеКонтрагентыПоИННИФИО.ФамилияИмяОтчество = НайденныеКонтрагентыПоИННИФИО.ФамилияИмяОтчество
		|ГДЕ
		|	НеНайденныеКонтрагентыПоИННИФИО.ФИО = """"
		|	И НеНайденныеКонтрагентыПоИННИФИО.ФамилияИмяОтчество <> """"
		|	И НеНайденныеКонтрагентыПоИННИФИО.ИНН = """"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НайденныеКонтрагентыПоИННИФИО.ФИО,
		|	НайденныеКонтрагентыПоИННИФИО.ФамилияИмяОтчество,
		|	НайденныеКонтрагентыПоИННИФИО.ИНН,
		|	НайденныеКонтрагентыПоИННИФИО.Контрагент,
		|	НайденныеКонтрагентыПоИННИФИО.ИННКонтрагента
		|ИЗ
		|	НайденныеКонтрагентыПоИННИФИО КАК НайденныеКонтрагентыПоИННИФИО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписокСамозанятых.ФИО КАК ФИО,
		|	СписокСамозанятых.Фамилия КАК Фамилия,
		|	СписокСамозанятых.Имя КАК Имя,
		|	СписокСамозанятых.Отчество КАК Отчество,
		|	СписокСамозанятых.ФамилияИмяОтчество КАК ФамилияИмяОтчество,
		|	СписокСамозанятых.НомерСчета КАК НомерСчета,
		|	СписокСамозанятых.БИК КАК БИК,
		|	ЕСТЬNULL(НайденныеКонтрагенты.Контрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Контрагент,
		|	СписокСамозанятых.Договор КАК Договор,
		|	СписокСамозанятых.НомерДоговора КАК НомерДоговора,
		|	СписокСамозанятых.ДатаДоговора КАК ДатаДоговора,
		|	СписокСамозанятых.Сумма КАК Сумма,
		|	СписокСамозанятых.ДатаПлатежа КАК ДатаПлатежа
		|ПОМЕСТИТЬ Самозанятые
		|ИЗ
		|	СписокСамозанятых КАК СписокСамозанятых
		|		ЛЕВОЕ СОЕДИНЕНИЕ НайденныеКонтрагенты КАК НайденныеКонтрагенты
		|		ПО СписокСамозанятых.ФИО = НайденныеКонтрагенты.ФИО
		|			И СписокСамозанятых.ФамилияИмяОтчество = НайденныеКонтрагенты.ФамилияИмяОтчество
		|			И СписокСамозанятых.ИНН = НайденныеКонтрагенты.ИНН
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Самозанятые.НомерСчета КАК НомерСчета,
		|	Самозанятые.БИК КАК БИК,
		|	Самозанятые.Контрагент КАК Контрагент
		|ПОМЕСТИТЬ СписокПоискаСчетов
		|ИЗ
		|	Самозанятые КАК Самозанятые
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВложенныйЗапрос.НомерСчета КАК НомерСчета,
		|	ВложенныйЗапрос.БИК КАК БИК,
		|	ВложенныйЗапрос.Контрагент КАК Контрагент,
		|	ВложенныйЗапрос.БанковскийСчет КАК БанковскийСчет,
		|	ВложенныйЗапрос.БИКБанка КАК БИКБанка,
		|	ВложенныйЗапрос.Владелец КАК ВладелецБанковскогоСчета,
		|	ВложенныйЗапрос.Закрыт КАК Закрыт
		|ПОМЕСТИТЬ НайденныеСчета
		|ИЗ
		|	(ВЫБРАТЬ
		|		СписокПоискаСчетов.НомерСчета КАК НомерСчета,
		|		СписокПоискаСчетов.БИК КАК БИК,
		|		СписокПоискаСчетов.Контрагент КАК Контрагент,
		|		БанковскиеСчетаКонтрагентов.Ссылка КАК БанковскийСчет,
		|		БанковскиеСчетаКонтрагентов.БИКБанка КАК БИКБанка,
		|		БанковскиеСчетаКонтрагентов.Владелец КАК Владелец,
		|		БанковскиеСчетаКонтрагентов.Закрыт КАК Закрыт
		|	ИЗ
		|		СписокПоискаСчетов КАК СписокПоискаСчетов
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
		|			ПО СписокПоискаСчетов.НомерСчета = БанковскиеСчетаКонтрагентов.НомерСчета
		|				И СписокПоискаСчетов.БИК = БанковскиеСчетаКонтрагентов.БИКБанка
		|				И СписокПоискаСчетов.Контрагент = БанковскиеСчетаКонтрагентов.Владелец
		|	ГДЕ
		|		СписокПоискаСчетов.НомерСчета <> """"
		|		И НЕ БанковскиеСчетаКонтрагентов.ПометкаУдаления
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		СписокПоискаСчетов.НомерСчета,
		|		СписокПоискаСчетов.БИК,
		|		СписокПоискаСчетов.Контрагент,
		|		БанковскиеСчетаКонтрагентов.Ссылка,
		|		БанковскиеСчетаКонтрагентов.БИКБанка,
		|		БанковскиеСчетаКонтрагентов.Владелец,
		|		БанковскиеСчетаКонтрагентов.Закрыт
		|	ИЗ
		|		СписокПоискаСчетов КАК СписокПоискаСчетов
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
		|			ПО СписокПоискаСчетов.НомерСчета = БанковскиеСчетаКонтрагентов.НомерСчета
		|				И СписокПоискаСчетов.Контрагент = БанковскиеСчетаКонтрагентов.Владелец
		|	ГДЕ
		|		СписокПоискаСчетов.НомерСчета <> """"
		|		И СписокПоискаСчетов.БИК = """"
		|		И НЕ БанковскиеСчетаКонтрагентов.ПометкаУдаления
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		СписокПоискаСчетов.НомерСчета,
		|		СписокПоискаСчетов.БИК,
		|		СписокПоискаСчетов.Контрагент,
		|		БанковскиеСчетаКонтрагентов.Ссылка,
		|		БанковскиеСчетаКонтрагентов.БИКБанка,
		|		БанковскиеСчетаКонтрагентов.Владелец,
		|		БанковскиеСчетаКонтрагентов.Закрыт
		|	ИЗ
		|		СписокПоискаСчетов КАК СписокПоискаСчетов
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
		|			ПО СписокПоискаСчетов.НомерСчета = БанковскиеСчетаКонтрагентов.НомерСчета
		|				И СписокПоискаСчетов.БИК = БанковскиеСчетаКонтрагентов.БИКБанка
		|	ГДЕ
		|		СписокПоискаСчетов.НомерСчета <> """"
		|		И СписокПоискаСчетов.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|		И СписокПоискаСчетов.БИК <> """"
		|		И НЕ БанковскиеСчетаКонтрагентов.ПометкаУдаления
		|		И БанковскиеСчетаКонтрагентов.Владелец ССЫЛКА Справочник.Контрагенты
		|		И ВЫРАЗИТЬ(БанковскиеСчетаКонтрагентов.Владелец КАК Справочник.Контрагенты).ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)) КАК ВложенныйЗапрос
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.Контрагент КАК Контрагент,
		|	БанковскиеСчетаКонтрагентов.Ссылка КАК БанковскийСчет
		|ПОМЕСТИТЬ БанковскиеСчетаСамозанятых
		|ИЗ
		|	(ВЫБРАТЬ
		|		СписокПоискаСчетов.НомерСчета КАК НомерСчета,
		|		СписокПоискаСчетов.БИК КАК БИК,
		|		СписокПоискаСчетов.Контрагент КАК Контрагент
		|	ИЗ
		|		СписокПоискаСчетов КАК СписокПоискаСчетов
		|	ГДЕ
		|		НЕ (СписокПоискаСчетов.НомерСчета, СписокПоискаСчетов.БИК, СписокПоискаСчетов.Контрагент) В
		|					(ВЫБРАТЬ
		|						НайденныеСчета.НомерСчета КАК НомерСчета,
		|						НайденныеСчета.БИК КАК БИК,
		|						НайденныеСчета.Контрагент КАК Контрагент
		|					ИЗ
		|						НайденныеСчета КАК НайденныеСчета)
		|		И СписокПоискаСчетов.НомерСчета = """"
		|		И СписокПоискаСчетов.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК ВложенныйЗапрос
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
		|		ПО ВложенныйЗапрос.Контрагент = БанковскиеСчетаКонтрагентов.Владелец
		|ГДЕ
		|	НЕ БанковскиеСчетаКонтрагентов.ПометкаУдаления
		|	И НЕ БанковскиеСчетаКонтрагентов.Закрыт
		|	И БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств = &Валюта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Самозанятые.ФИО КАК ФИО,
		|	Самозанятые.Фамилия КАК Фамилия,
		|	Самозанятые.Имя КАК Имя,
		|	Самозанятые.Отчество КАК Отчество,
		|	Самозанятые.ФамилияИмяОтчество КАК ФамилияИмяОтчество,
		|	Самозанятые.НомерСчета КАК НомерСчета,
		|	Самозанятые.БИК КАК БИК,
		|	ВЫБОР
		|		КОГДА Самозанятые.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|				И НЕ НайденныеСчета.ВладелецБанковскогоСчета ЕСТЬ NULL
		|			ТОГДА НайденныеСчета.ВладелецБанковскогоСчета
		|		ИНАЧЕ Самозанятые.Контрагент
		|	КОНЕЦ КАК Контрагент,
		|	ЕСТЬNULL(НайденныеСчета.БанковскийСчет, ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)) КАК БанковскийСчет,
		|	ЕСТЬNULL(НайденныеСчета.БИКБанка, """") КАК БИКБанка,
		|	ЕСТЬNULL(НайденныеСчета.Закрыт, ЛОЖЬ) КАК Закрыт,
		|	Самозанятые.Договор КАК Договор,
		|	Самозанятые.НомерДоговора КАК НомерДоговора,
		|	Самозанятые.ДатаДоговора КАК ДатаДоговора,
		|	Самозанятые.Сумма КАК Сумма,
		|	Самозанятые.ДатаПлатежа КАК ДатаПлатежа
		|ПОМЕСТИТЬ СамозанятыеССчетами
		|ИЗ
		|	Самозанятые КАК Самозанятые
		|		ЛЕВОЕ СОЕДИНЕНИЕ НайденныеСчета КАК НайденныеСчета
		|		ПО Самозанятые.НомерСчета = НайденныеСчета.НомерСчета
		|			И Самозанятые.БИК = НайденныеСчета.БИК
		|			И Самозанятые.Контрагент = НайденныеСчета.Контрагент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СамозанятыеССчетами.Контрагент КАК Контрагент,
		|	СамозанятыеССчетами.БанковскийСчет КАК БанковскийСчет,
		|	СамозанятыеССчетами.Договор КАК Договор,
		|	СамозанятыеССчетами.НомерДоговора КАК НомерДоговора,
		|	СамозанятыеССчетами.ДатаДоговора КАК ДатаДоговора
		|ПОМЕСТИТЬ СписокПоискаДоговоров
		|ИЗ
		|	СамозанятыеССчетами КАК СамозанятыеССчетами
		|ГДЕ
		|	СамозанятыеССчетами.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СписокПоискаДоговоров.Контрагент КАК Контрагент,
		|	СписокПоискаДоговоров.БанковскийСчет КАК БанковскийСчет,
		|	СписокПоискаДоговоров.Договор КАК Договор,
		|	СписокПоискаДоговоров.НомерДоговора КАК НомерДоговора,
		|	СписокПоискаДоговоров.ДатаДоговора КАК ДатаДоговора,
		|	ДоговорыКонтрагентов.Ссылка КАК ДоговорКонтрагента,
		|	ДоговорыКонтрагентов.Наименование КАК Наименование,
		|	ДоговорыКонтрагентов.Номер КАК Номер,
		|	ДоговорыКонтрагентов.Дата КАК Дата,
		|	ДоговорыКонтрагентов.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	ДоговорыКонтрагентов.БанковскийСчет КАК БанковскийСчетОрганизации
		|ПОМЕСТИТЬ ДоговорыСамозанятых
		|ИЗ
		|	СписокПоискаДоговоров КАК СписокПоискаДоговоров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ПО СписокПоискаДоговоров.Контрагент = ДоговорыКонтрагентов.Контрагент
		|			И СписокПоискаДоговоров.БанковскийСчет = ДоговорыКонтрагентов.БанковскийСчетКонтрагента
		|			И (ДоговорыКонтрагентов.Организация = &Организация)
		|ГДЕ
		|	НЕ ДоговорыКонтрагентов.ПометкаУдаления
		|	И СписокПоискаДоговоров.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
		|	И ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
		|	И ДоговорыКонтрагентов.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПоставщиком)
		|	И ДоговорыКонтрагентов.ДоговорССамозанятым
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СписокПоискаДоговоров.Контрагент,
		|	СписокПоискаДоговоров.БанковскийСчет,
		|	СписокПоискаДоговоров.Договор,
		|	СписокПоискаДоговоров.НомерДоговора,
		|	СписокПоискаДоговоров.ДатаДоговора,
		|	ДоговорыКонтрагентов.Ссылка,
		|	ДоговорыКонтрагентов.Наименование,
		|	ДоговорыКонтрагентов.Номер,
		|	ДоговорыКонтрагентов.Дата,
		|	ДоговорыКонтрагентов.СтатьяДвиженияДенежныхСредств,
		|	ДоговорыКонтрагентов.БанковскийСчет
		|ИЗ
		|	СписокПоискаДоговоров КАК СписокПоискаДоговоров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ПО СписокПоискаДоговоров.Контрагент = ДоговорыКонтрагентов.Контрагент
		|			И (ДоговорыКонтрагентов.Организация = &Организация)
		|ГДЕ
		|	НЕ ДоговорыКонтрагентов.ПометкаУдаления
		|	И СписокПоискаДоговоров.БанковскийСчет = ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
		|	И ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
		|	И ДоговорыКонтрагентов.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПоставщиком)
		|	И ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &Валюта
		|	И ДоговорыКонтрагентов.ДоговорССамозанятым
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоговорыСамозанятых.Контрагент КАК Контрагент,
		|	ДоговорыСамозанятых.БанковскийСчет КАК БанковскийСчет,
		|	ДоговорыСамозанятых.Договор КАК Договор,
		|	ДоговорыСамозанятых.НомерДоговора КАК НомерДоговора,
		|	ДоговорыСамозанятых.ДатаДоговора КАК ДатаДоговора,
		|	ДоговорыСамозанятых.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ДоговорыСамозанятых.Наименование КАК Наименование,
		|	ДоговорыСамозанятых.Номер КАК Номер,
		|	ДоговорыСамозанятых.Дата КАК Дата,
		|	ДоговорыСамозанятых.СтатьяДвиженияДенежныхСредств,
		|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетов,
		|	ДоговорыСамозанятых.БанковскийСчетОрганизации КАК БанковскийСчетОрганизации
		|ИЗ
		|	ДоговорыСамозанятых КАК ДоговорыСамозанятых
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|		ПО ДоговорыСамозанятых.ДоговорКонтрагента = ОбъектыРасчетов.Объект
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ДоговорыСамозанятых.Договор <> """"
		|				ТОГДА ДоговорыСамозанятых.Договор = ДоговорыСамозанятых.Наименование
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА ДоговорыСамозанятых.НомерДоговора <> """"
		|				ТОГДА ДоговорыСамозанятых.НомерДоговора = ДоговорыСамозанятых.Номер
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА ДоговорыСамозанятых.ДатаДоговора <> ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА ДоговорыСамозанятых.ДатаДоговора = ДоговорыСамозанятых.Дата
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	БанковскиеСчетаСамозанятых.Контрагент КАК Контрагент,
		|	БанковскиеСчетаСамозанятых.БанковскийСчет КАК БанковскийСчет
		|ИЗ
		|	БанковскиеСчетаСамозанятых КАК БанковскиеСчетаСамозанятых
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА СамозанятыеССчетами.ФИО <> """"
		|			ТОГДА СамозанятыеССчетами.ФИО
		|		ИНАЧЕ СамозанятыеССчетами.ФамилияИмяОтчество
		|	КОНЕЦ КАК Наименование,
		|	СамозанятыеССчетами.НомерСчета КАК НомерСчета,
		|	СамозанятыеССчетами.БИК КАК БИК,
		|	СамозанятыеССчетами.Контрагент КАК Контрагент,
		|	СамозанятыеССчетами.Контрагент.Партнер КАК Партнер,
		|	СамозанятыеССчетами.БанковскийСчет КАК БанковскийСчетКонтрагента,
		|	СамозанятыеССчетами.БИКБанка КАК БИКБанка,
		|	СамозанятыеССчетами.Закрыт КАК Закрыт,
		|	СамозанятыеССчетами.Договор КАК Договор,
		|	СамозанятыеССчетами.НомерДоговора КАК НомерДоговора,
		|	СамозанятыеССчетами.ДатаДоговора КАК ДатаДоговора,
		|	СамозанятыеССчетами.Сумма КАК Сумма,
		|	СамозанятыеССчетами.ДатаПлатежа КАК ДатаПлатежа
		|ИЗ
		|	СамозанятыеССчетами КАК СамозанятыеССчетами";

КонецФункции

Процедура СопоставитьЗагружаемыеДанныеЧеков(
	АдресЗагружаемыхДанных,
	АдресТаблицыСопоставления,
	СписокНеоднозначностей,
	ПолноеИмяТабличнойЧасти,
	ДополнительныеПараметры)

	ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных);
	Таблица = ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления); //ТаблицаЗначений
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДанныхЧековПоЗагружаемомуФайлу();
	
	Запрос.УстановитьПараметр("ЗагружаемыеДанные", ЗагружаемыеДанные);
	Запрос.УстановитьПараметр("Валюта", ДополнительныеПараметры.Валюта);
	Запрос.УстановитьПараметр("Организация", ДополнительныеПараметры.Организация);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		
		КонтрагентНайден = ?(ЗначениеЗаполнено(Выборка.Контрагент), Истина, Ложь);
		 
		Если КонтрагентНайден Тогда
			
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
		Иначе
			
			ФИО = ?(Не ПустаяСтрока(Выборка.ФИО), 
					Выборка.ФИО, 
					?(Не ПустаяСтрока(Выборка.ФамилияИмяОтчество), Выборка.ФамилияИмяОтчество, НСтр("ru = '<не указано>'")));
			ИНН = ?(Не ПустаяСтрока(Выборка.ИНН), Выборка.ИНН, НСтр("ru = '<не указано>'"));
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Контрагент не найден:
											|   ФИО: %1
											|   ИНН: %2'"), ФИО, ИНН);
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЦикла;

	ПоместитьВоВременноеХранилище(Таблица, АдресТаблицыСопоставления);

КонецПроцедуры

Функция ТекстЗапросаДанныхЧековПоЗагружаемомуФайлу()

	Возврат "ВЫБРАТЬ
		|	ЗагружаемыеДанные.Фамилия КАК Фамилия,
		|	ЗагружаемыеДанные.Имя КАК Имя,
		|	ЗагружаемыеДанные.Отчество КАК Отчество,
		|	ЗагружаемыеДанные.ФИО КАК ФИО,
		|	ЗагружаемыеДанные.ИНН КАК ИНН,
		|	ЗагружаемыеДанные.Сумма КАК Сумма,
		|	ЗагружаемыеДанные.СсылкаНаЧек КАК СсылкаНаЧек,
		|	ЗагружаемыеДанные.НомерСчета КАК НомерСчета,
		|	ЗагружаемыеДанные.Идентификатор КАК Идентификатор
		|ПОМЕСТИТЬ ИсходнаяТаблица
		|ИЗ
		|	&ЗагружаемыеДанные КАК ЗагружаемыеДанные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсходнаяТаблица.Фамилия КАК Фамилия,
		|	ИсходнаяТаблица.Имя КАК Имя,
		|	ИсходнаяТаблица.Отчество КАК Отчество,
		|	ИсходнаяТаблица.Фамилия + ВЫБОР
		|		КОГДА ИсходнаяТаблица.Фамилия <> """"
		|				И ИсходнаяТаблица.Имя <> """"
		|			ТОГДА "" "" + ИсходнаяТаблица.Имя
		|		ИНАЧЕ """"
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ИсходнаяТаблица.Отчество <> """"
		|			ТОГДА "" "" + ИсходнаяТаблица.Отчество
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ФамилияИмяОтчество,
		|	ИсходнаяТаблица.ФИО КАК ФИО,
		|	ИсходнаяТаблица.ИНН КАК ИНН,
		|	ИсходнаяТаблица.Сумма КАК Сумма,
		|	ИсходнаяТаблица.СсылкаНаЧек КАК СсылкаНаЧек,
		|	ИсходнаяТаблица.НомерСчета КАК НомерСчета,
		|	ИсходнаяТаблица.Идентификатор КАК Идентификатор
		|ПОМЕСТИТЬ СписокДанных
		|ИЗ
		|	ИсходнаяТаблица КАК ИсходнаяТаблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СписокДанных.ФамилияИмяОтчество КАК ФамилияИмяОтчество,
		|	СписокДанных.ФИО КАК ФИО,
		|	СписокДанных.ИНН КАК ИНН
		|ПОМЕСТИТЬ СписокДляПоискаКонтрагентов
		|ИЗ
		|	СписокДанных КАК СписокДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СписокДляПоискаКонтрагентов.ФамилияИмяОтчество КАК ФамилияИмяОтчество,
		|	СписокДляПоискаКонтрагентов.ФИО КАК ФИО,
		|	СписокДляПоискаКонтрагентов.ИНН КАК ИНН,
		|	Контрагенты.Ссылка КАК Контрагент,
		|	0 КАК Приоритет
		|ПОМЕСТИТЬ НайденныеКонтрагенты
		|ИЗ
		|	СписокДляПоискаКонтрагентов КАК СписокДляПоискаКонтрагентов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО СписокДляПоискаКонтрагентов.ИНН = Контрагенты.ИНН
		|ГДЕ
		|	СписокДляПоискаКонтрагентов.ИНН <> """"
		|	И Контрагенты.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СписокДляПоискаКонтрагентов.ФамилияИмяОтчество,
		|	СписокДляПоискаКонтрагентов.ФИО,
		|	СписокДляПоискаКонтрагентов.ИНН,
		|	Контрагенты.Ссылка,
		|	1
		|ИЗ
		|	СписокДляПоискаКонтрагентов КАК СписокДляПоискаКонтрагентов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО СписокДляПоискаКонтрагентов.ФамилияИмяОтчество = Контрагенты.Наименование
		|ГДЕ
		|	Контрагенты.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
		|	И СписокДляПоискаКонтрагентов.ФамилияИмяОтчество <> """"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СписокДляПоискаКонтрагентов.ФамилияИмяОтчество,
		|	СписокДляПоискаКонтрагентов.ФИО,
		|	СписокДляПоискаКонтрагентов.ИНН,
		|	Контрагенты.Ссылка,
		|	2
		|ИЗ
		|	СписокДляПоискаКонтрагентов КАК СписокДляПоискаКонтрагентов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО СписокДляПоискаКонтрагентов.ФИО = Контрагенты.Наименование
		|ГДЕ
		|	Контрагенты.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
		|	И СписокДляПоискаКонтрагентов.ФИО <> """"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СписокДляПоискаКонтрагентов.ФамилияИмяОтчество,
		|	СписокДляПоискаКонтрагентов.ФИО,
		|	СписокДляПоискаКонтрагентов.ИНН,
		|	Контрагенты.Ссылка,
		|	3
		|ИЗ
		|	СписокДляПоискаКонтрагентов КАК СписокДляПоискаКонтрагентов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО СписокДляПоискаКонтрагентов.ФамилияИмяОтчество = Контрагенты.НаименованиеПолное
		|ГДЕ
		|	Контрагенты.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
		|	И СписокДляПоискаКонтрагентов.ФамилияИмяОтчество <> """"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СписокДляПоискаКонтрагентов.ФамилияИмяОтчество,
		|	СписокДляПоискаКонтрагентов.ФИО,
		|	СписокДляПоискаКонтрагентов.ИНН,
		|	Контрагенты.Ссылка,
		|	4
		|ИЗ
		|	СписокДляПоискаКонтрагентов КАК СписокДляПоискаКонтрагентов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО СписокДляПоискаКонтрагентов.ФИО = Контрагенты.НаименованиеПолное
		|ГДЕ
		|	Контрагенты.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
		|	И СписокДляПоискаКонтрагентов.ФИО <> """"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НайденныеКонтрагенты.ФамилияИмяОтчество КАК ФамилияИмяОтчество,
		|	НайденныеКонтрагенты.ФИО КАК ФИО,
		|	НайденныеКонтрагенты.ИНН КАК ИНН,
		|	МИНИМУМ(НайденныеКонтрагенты.Приоритет) КАК Приоритет
		|ПОМЕСТИТЬ ПриоритетыВыборкиКонтрагентов
		|ИЗ
		|	НайденныеКонтрагенты КАК НайденныеКонтрагенты
		|
		|СГРУППИРОВАТЬ ПО
		|	НайденныеКонтрагенты.ФамилияИмяОтчество,
		|	НайденныеКонтрагенты.ФИО,
		|	НайденныеКонтрагенты.ИНН
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НайденныеКонтрагенты.ФамилияИмяОтчество КАК ФамилияИмяОтчество,
		|	НайденныеКонтрагенты.ФИО КАК ФИО,
		|	НайденныеКонтрагенты.ИНН КАК ИНН,
		|	НайденныеКонтрагенты.Контрагент КАК Контрагент
		|ПОМЕСТИТЬ СсылкиКонтрагентов
		|ИЗ
		|	ПриоритетыВыборкиКонтрагентов КАК ПриоритетыВыборкиКонтрагентов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НайденныеКонтрагенты КАК НайденныеКонтрагенты
		|		ПО ПриоритетыВыборкиКонтрагентов.ФамилияИмяОтчество = НайденныеКонтрагенты.ФамилияИмяОтчество
		|			И ПриоритетыВыборкиКонтрагентов.ФИО = НайденныеКонтрагенты.ФИО
		|			И ПриоритетыВыборкиКонтрагентов.ИНН = НайденныеКонтрагенты.ИНН
		|			И ПриоритетыВыборкиКонтрагентов.Приоритет = НайденныеКонтрагенты.Приоритет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписокДанных.ФамилияИмяОтчество КАК ФамилияИмяОтчество,
		|	СписокДанных.ФИО КАК ФИО,
		|	СписокДанных.ИНН КАК ИНН,
		|	СписокДанных.Сумма КАК Сумма,
		|	СписокДанных.СсылкаНаЧек КАК СсылкаНаЧек,
		|	СписокДанных.НомерСчета КАК НомерСчета,
		|	СписокДанных.Идентификатор КАК Идентификатор,
		|	СсылкиКонтрагентов.Контрагент КАК Контрагент
		|ПОМЕСТИТЬ СписокДанныхСКонтрагентами
		|ИЗ
		|	СписокДанных КАК СписокДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ СсылкиКонтрагентов КАК СсылкиКонтрагентов
		|		ПО СписокДанных.ФамилияИмяОтчество = СсылкиКонтрагентов.ФамилияИмяОтчество
		|			И СписокДанных.ФИО = СсылкиКонтрагентов.ФИО
		|			И СписокДанных.ИНН = СсылкиКонтрагентов.ИНН
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписокДанныхСКонтрагентами.Контрагент КАК Контрагент,
		|	СписокДанныхСКонтрагентами.НомерСчета КАК НомерСчета
		|ПОМЕСТИТЬ СписокДляПоискаСчета
		|ИЗ
		|	СписокДанныхСКонтрагентами КАК СписокДанныхСКонтрагентами
		|ГДЕ
		|	НЕ СписокДанныхСКонтрагентами.Контрагент ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СписокДляПоискаСчета.Контрагент КАК Контрагент,
		|	СписокДляПоискаСчета.НомерСчета КАК НомерСчета,
		|	БанковскиеСчетаКонтрагентов.Ссылка КАК БанковскийСчет
		|ПОМЕСТИТЬ СсылкиБанковскихСчетов
		|ИЗ
		|	СписокДляПоискаСчета КАК СписокДляПоискаСчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
		|		ПО СписокДляПоискаСчета.Контрагент = БанковскиеСчетаКонтрагентов.Владелец
		|			И СписокДляПоискаСчета.НомерСчета = БанковскиеСчетаКонтрагентов.НомерСчета
		|ГДЕ
		|	СписокДляПоискаСчета.НомерСчета <> """"
		|	И БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств = &Валюта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписокДанныхСКонтрагентами.ФамилияИмяОтчество КАК ФамилияИмяОтчество,
		|	СписокДанныхСКонтрагентами.ФИО КАК ФИО,
		|	СписокДанныхСКонтрагентами.ИНН КАК ИНН,
		|	СписокДанныхСКонтрагентами.Сумма КАК Сумма,
		|	СписокДанныхСКонтрагентами.СсылкаНаЧек КАК СсылкаНаЧек,
		|	СписокДанныхСКонтрагентами.НомерСчета КАК НомерСчета,
		|	СписокДанныхСКонтрагентами.Идентификатор КАК Идентификатор,
		|	СписокДанныхСКонтрагентами.Контрагент КАК Контрагент,
		|	СписокДанныхСКонтрагентами.Контрагент.Партнер КАК Партнер,
		|	ЕСТЬNULL(СсылкиБанковскихСчетов.БанковскийСчет, ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)) КАК БанковскийСчетКонтрагента
		|ПОМЕСТИТЬ СамозанятыеССчетами
		|ИЗ
		|	СписокДанныхСКонтрагентами КАК СписокДанныхСКонтрагентами
		|		ЛЕВОЕ СОЕДИНЕНИЕ СсылкиБанковскихСчетов КАК СсылкиБанковскихСчетов
		|		ПО СписокДанныхСКонтрагентами.Контрагент = СсылкиБанковскихСчетов.Контрагент
		|			И СписокДанныхСКонтрагентами.НомерСчета = СсылкиБанковскихСчетов.НомерСчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СамозанятыеССчетами.Контрагент КАК Контрагент,
		|	СамозанятыеССчетами.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента
		|ПОМЕСТИТЬ СписокПоискаДоговоров
		|ИЗ
		|	СамозанятыеССчетами КАК СамозанятыеССчетами
		|ГДЕ
		|	СамозанятыеССчетами.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СписокПоискаДоговоров.Контрагент КАК Контрагент,
		|	СписокПоискаДоговоров.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
		|	ДоговорыКонтрагентов.Ссылка КАК ДоговорКонтрагента
		|ПОМЕСТИТЬ ДоговорыСамозанятых
		|ИЗ
		|	СписокПоискаДоговоров КАК СписокПоискаДоговоров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ПО СписокПоискаДоговоров.Контрагент = ДоговорыКонтрагентов.Контрагент
		|			И СписокПоискаДоговоров.БанковскийСчетКонтрагента = ДоговорыКонтрагентов.БанковскийСчетКонтрагента
		|			И (ДоговорыКонтрагентов.Организация = &Организация)
		|ГДЕ
		|	НЕ ДоговорыКонтрагентов.ПометкаУдаления
		|	И СписокПоискаДоговоров.БанковскийСчетКонтрагента <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
		|	И ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
		|	И ДоговорыКонтрагентов.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПоставщиком)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СписокПоискаДоговоров.Контрагент,
		|	СписокПоискаДоговоров.БанковскийСчетКонтрагента,
		|	ДоговорыКонтрагентов.Ссылка
		|ИЗ
		|	СписокПоискаДоговоров КАК СписокПоискаДоговоров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ПО СписокПоискаДоговоров.Контрагент = ДоговорыКонтрагентов.Контрагент
		|			И (ДоговорыКонтрагентов.Организация = &Организация)
		|ГДЕ
		|	НЕ ДоговорыКонтрагентов.ПометкаУдаления
		|	И СписокПоискаДоговоров.БанковскийСчетКонтрагента = ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
		|	И ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
		|	И ДоговорыКонтрагентов.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПоставщиком)
		|	И ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &Валюта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоговорыСамозанятых.Контрагент КАК Контрагент,
		|	ДоговорыСамозанятых.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента
		|ПОМЕСТИТЬ ЕдинственныеДоговорыСамозанятых
		|ИЗ
		|	ДоговорыСамозанятых КАК ДоговорыСамозанятых
		|
		|СГРУППИРОВАТЬ ПО
		|	ДоговорыСамозанятых.Контрагент,
		|	ДоговорыСамозанятых.БанковскийСчетКонтрагента
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(ДоговорыСамозанятых.ДоговорКонтрагента) = 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоговорыСамозанятых.Контрагент КАК Контрагент,
		|	ДоговорыСамозанятых.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
		|	ДоговорыСамозанятых.ДоговорКонтрагента КАК ДоговорКонтрагента
		|ПОМЕСТИТЬ ДоговорыСамозанятыхПоУмолчанию
		|ИЗ
		|	ДоговорыСамозанятых КАК ДоговорыСамозанятых
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЕдинственныеДоговорыСамозанятых КАК ЕдинственныеДоговорыСамозанятых
		|		ПО ДоговорыСамозанятых.Контрагент = ЕдинственныеДоговорыСамозанятых.Контрагент
		|			И ДоговорыСамозанятых.БанковскийСчетКонтрагента = ЕдинственныеДоговорыСамозанятых.БанковскийСчетКонтрагента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СамозанятыеССчетами.ФамилияИмяОтчество КАК ФамилияИмяОтчество,
		|	СамозанятыеССчетами.ФИО КАК ФИО,
		|	СамозанятыеССчетами.ИНН КАК ИНН,
		|	СамозанятыеССчетами.Сумма КАК Сумма,
		|	СамозанятыеССчетами.СсылкаНаЧек КАК СсылкаНаЧек,
		|	СамозанятыеССчетами.НомерСчета КАК НомерСчета,
		|	СамозанятыеССчетами.Идентификатор КАК Идентификатор,
		|	СамозанятыеССчетами.Контрагент КАК Контрагент,
		|	СамозанятыеССчетами.Партнер КАК Партнер,
		|	СамозанятыеССчетами.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
		|	ДоговорыСамозанятыхПоУмолчанию.ДоговорКонтрагента КАК Договор
		|ИЗ
		|	СамозанятыеССчетами КАК СамозанятыеССчетами
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДоговорыСамозанятыхПоУмолчанию КАК ДоговорыСамозанятыхПоУмолчанию
		|		ПО СамозанятыеССчетами.Контрагент = ДоговорыСамозанятыхПоУмолчанию.Контрагент
		|			И СамозанятыеССчетами.БанковскийСчетКонтрагента = ДоговорыСамозанятыхПоУмолчанию.БанковскийСчетКонтрагента";

КонецФункции

#КонецОбласти

#КонецЕсли