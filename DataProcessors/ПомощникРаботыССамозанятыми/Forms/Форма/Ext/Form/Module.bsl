
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ИспользуютсяЗаявкиНаРасходованиеДенежныхСредств = 
		ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаРасходованиеДенежныхСредств");
	ИспользованиеПартнеровКакКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
	
	ТипДенежнаяСуммаНеотрицательная = Метаданные.ОпределяемыеТипы.ДенежнаяСуммаНеотрицательная.Тип;
	
	Объект.Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
	
	УправлениеЭлементамиФормы();
	
	УстановитьУсловноеОформление();
	ИзменитьЦветКоманды();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ЗаполнитьДанныеПоУмолчанию();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	ОчиститьСообщения();
	ОрганизацияПриИзмененииНаСервере();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыОплаты

&НаКлиенте
Процедура ДокументыОплатыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		
		НоваяСтрока = Объект.ДокументыОплаты.Добавить();
		НоваяСтрока.Контрагент = ВыбранноеЗначение;
		НоваяСтрока.БанковскийСчетОрганизации = БанковскийСчет;
		СписокПодобранныхСтрок.Добавить(НоваяСтрока.ПолучитьИдентификатор());
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОплатыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	СтрокаТаблицы = Элементы.ДокументыОплаты.ТекущиеДанные;
	
	Если (НоваяСтрока
		И СтрокаТаблицы.ИдентификаторСтроки = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"))
		Или Копирование Тогда
		СтрокаТаблицы.ИдентификаторСтроки = Новый УникальныйИдентификатор;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДокументыОплатыОтметкаПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.ДокументыОплаты.ТекущиеДанные;
	
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТаблицы.Отметка Тогда
		ОчиститьДокументОплаты(СтрокаТаблицы);
	КонецЕсли;
	
	Если СтрокаТаблицы.Отметка
		И СтрокаТаблицы.Сумма = 0 Тогда
		СтрокаТаблицы.Отметка = Ложь;
		ТекстСообщения = НСтр("ru = 'Не заполнена сумма платежа.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДокументыОплатыКонтрагентПриИзменении(Элемент)

	ИдентификаторСтроки = Элементы.ДокументыОплаты.ТекущаяСтрока;
	ДанныеКонтрагентовКонтрагентПриИзмененииНаСервере(ИдентификаторСтроки);
	
	УстановитьСнятьОтметку();
	ОчиститьДокументОплаты();

КонецПроцедуры

&НаКлиенте
Процедура ДокументыОплатыПартнерПриИзменении(Элемент)

	ИдентификаторСтроки = Элементы.ДокументыОплаты.ТекущаяСтрока;
	ДанныеКонтрагентовПартнерПриИзмененииНаСервере(ИдентификаторСтроки);
	
	УстановитьСнятьОтметку();
	ОчиститьДокументОплаты();

КонецПроцедуры

&НаКлиенте
Процедура ДокументыОплатыБанковскийСчетКонтрагентаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ДокументыОплаты.ТекущиеДанные;

	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторСтроки = СтрокаТаблицы.ПолучитьИдентификатор();
	ДокументыОплатыБанковскийСчетКонтрагентаПриИзмененииНаСервере(ИдентификаторСтроки);
	
	УстановитьСнятьОтметку(СтрокаТаблицы);
	ОчиститьДокументОплаты(СтрокаТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОплатыБанковскийСчетОрганизацииПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ДокументыОплаты.ТекущиеДанные;

	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторСтроки = СтрокаТаблицы.ПолучитьИдентификатор();
	ДокументыОплатыБанковскийСчетОрганизацииПриИзмененииНаСервере(ИдентификаторСтроки);
	
	УстановитьСнятьОтметку(СтрокаТаблицы);
	ОчиститьДокументОплаты(СтрокаТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОплатыОбъектРасчетовПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.ДокументыОплаты.ТекущиеДанные;
	
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТаблицы.ОбъектРасчетов) Тогда
		ИдентификаторСтроки = СтрокаТаблицы.ПолучитьИдентификатор();
		ДокументыОплатыОбъектРасчетовПриИзмененииНаСервере(ИдентификаторСтроки);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДокументыОплатыДатаПлатежаПриИзменении(Элемент)
	
	УстановитьСнятьОтметку();
	ОчиститьДокументОплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОплатыСуммаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ДокументыОплаты.ТекущиеДанные;
	
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТаблицы.Сумма <> 0 Тогда
		ОчиститьДокументОплаты(СтрокаТаблицы);
	КонецЕсли;
	
	УстановитьСнятьОтметку();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОплатыДокументОплатыПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.ДокументыОплаты.ТекущиеДанные;
	
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаТаблицы.ДокументОплаты) Тогда
		СтрокаТаблицы.Состояние = 4;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДокументыОплатыДоговорПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.ДокументыОплаты.ТекущиеДанные;
	
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторСтроки = СтрокаТаблицы.ПолучитьИдентификатор();
	ДокументыОплатыДоговорПриИзмененииНаСервере(ИдентификаторСтроки);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыПриобретения

&НаКлиенте
Процедура ДокументыПриобретенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Если Поле.Имя = "ДокументыПриобретенияНомерЧека"
		Или Поле.Имя = "ДокументыПриобретенияЗагрузитьЧекСамозанятого" Тогда
		
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные = Элементы.ДокументыПриобретения.ТекущиеДанные;
		ОткрытьФормуЧекаСамозанятого(ТекущиеДанные);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОформитьОплату(Команда)

	ОчиститьСообщения();
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОформитьОплатуПослеПроверки", ЭтотОбъект);
	ПроверитьЗаполнениеОрганизации(ОповещениеОЗавершении);

КонецПроцедуры

&НаКлиенте
Процедура ОформитьПоступления(Команда)

	ОчиститьСообщения();
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОформитьПоступленияПослеПроверки", ЭтотОбъект);
	ПроверитьЗаполнениеОрганизации(ОповещениеОЗавершении);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСамозанятыхИзФайла(Команда)

	ЗагрузитьИзФайла("ЗагрузитьСамозанятыхИзФайлаПослеПроверки");

КонецПроцедуры

&НаКлиенте
Процедура ПодобратьСамозанятыхИзСправочника(Команда)

	ОчиститьСообщения();
	
	Отбор = Новый Структура;
	ВидКонтрагента = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо");
	Отбор.Вставить("ЮридическоеФизическоеЛицо", ВидКонтрагента);
	
	Если ИспользованиеПартнеровКакКонтрагентов Тогда
		Отбор.Вставить("Поставщик", Истина);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПодобратьСамозанятыхИзСправочникаЗавершение", ЭтотОбъект);
	ОткрытьФорму(
		"Справочник.Контрагенты.ФормаВыбора",
		ПараметрыФормы,
		Элементы.ДокументыОплаты, , , ,
		ОповещениеОЗакрытии);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокНаОплатуПоПрошломуМесяцу(Команда)

	ОчиститьСообщения();
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗаполнитьСписокПоПрошломуМесяцуПослеПроверки", ЭтотОбъект);
	ПроверитьЗаполнениеОрганизации(ОповещениеОЗавершении);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокНаОплатуПоОстаткамРасчетов(Команда)

	ОчиститьСообщения();
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗаполнитьСписокПоОстаткамРасчетовПослеПроверки", ЭтотОбъект);
	ПроверитьЗаполнениеОрганизации(ОповещениеОЗавершении);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовогоСамозанятого(Команда)

	ОчиститьСообщения();
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("Поставщик", Истина);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПараметрыВыбора", ПараметрыВыбора);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("СоздатьНовогоСамозанятогоЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.Партнеры.Форма.ПомощникНового", ПараметрыФормы, ЭтотОбъект, , , , ОповещениеОЗакрытии);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьПриобретениеТоваровУслуг(Команда)

	Оповещение = Новый ОписаниеОповещения("СоздатьПриобретениеТоваровУслугПослеПроверки", ЭтотОбъект);
	ПроверитьСтрокиПередСозданиемДокументов(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьПриобретениеУслугПрочихАктивов(Команда)

	Оповещение = Новый ОписаниеОповещения("СоздатьПриобретениеУслугПрочихАктивовПослеПроверки", ЭтотОбъект);
	ПроверитьСтрокиПередСозданиемДокументов(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ОплатитьИндивидуально(Команда)

	Оплатить(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ОплатитьРеестром(Команда)

	Оплатить(Истина);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЧекиСамозанятыхИзФайла(Команда)

	ЗагрузитьИзФайла("ЗагрузитьЧекиСамозанятыхИзФайлаПослеПроверки");

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокПриобретенийПоОстаткамРасчетов(Команда)
	
	ОчиститьСообщения();
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения(
		"ЗаполнитьСписокПриобретенийПоОстаткамРасчетовПослеПроверки", ЭтотОбъект);
	ПроверитьЗаполнениеОрганизации(ОповещениеОЗавершении);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокПриобретенийПоПрошломуМесяцу(Команда)

	ОчиститьСообщения();
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения(
		"ЗаполнитьСписокПриобретенийПоПрошломуМесяцуПослеПроверки", ЭтотОбъект);
	ПроверитьЗаполнениеОрганизации(ОповещениеОЗавершении);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Оформление

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	Настройка = УсловноеОформление.Элементы;
	ТипОтбораГруппа = Тип("ГруппаЭлементовОтбораКомпоновкиДанных");
	
	#Область ДокументыОплаты
	
	// ДатаПлатежа
	ЭлементНастройки = Настройка.Добавить();
	НовоеПоле = ЭлементНастройки.Поля.Элементы.Добавить();
	НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДокументыОплатыДатаПлатежа");
	ФинансоваяОтчетностьСервер.НовыйОтбор(
		ЭлементНастройки.Отбор, "ИспользуютсяЗаявкиНаРасходованиеДенежныхСредств", Истина);
	ФинансоваяОтчетностьСервер.НовыйОтбор(
		ЭлементНастройки.Отбор, "Объект.ДокументыОплаты.ДатаПлатежа", , , ВидСравненияКомпоновкиДанных.НеЗаполнено);
	ЭлементНастройки.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// БанковскийСчетОрганизации
	ЭлементНастройки = Настройка.Добавить();
	НовоеПоле = ЭлементНастройки.Поля.Элементы.Добавить();
	НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДокументыОплатыБанковскийСчетОрганизации");
	ФинансоваяОтчетностьСервер.НовыйОтбор(ЭлементНастройки.Отбор, "ИспользуютсяЗаявкиНаРасходованиеДенежныхСредств", Ложь);
	ФинансоваяОтчетностьСервер.НовыйОтбор(
		ЭлементНастройки.Отбор, "Объект.ДокументыОплаты.БанковскийСчетОрганизации", , , ВидСравненияКомпоновкиДанных.НеЗаполнено);
	ЭлементНастройки.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// Партнер
	ЭлементНастройки = Настройка.Добавить();
	НовоеПоле = ЭлементНастройки.Поля.Элементы.Добавить();
	НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДокументыОплатыПартнер");
	ФинансоваяОтчетностьСервер.НовыйОтбор(
		ЭлементНастройки.Отбор, "Объект.ДокументыОплаты.Партнер", , , ВидСравненияКомпоновкиДанных.НеЗаполнено);
	ЭлементНастройки.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// БанковскийСчетКонтрагента
	ЭлементНастройки = Настройка.Добавить();
	НовоеПоле = ЭлементНастройки.Поля.Элементы.Добавить();
	НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДокументыОплатыБанковскийСчетКонтрагента");
	ФинансоваяОтчетностьСервер.НовыйОтбор(
		ЭлементНастройки.Отбор, "Объект.ДокументыОплаты.БанковскийСчетКонтрагента", , , ВидСравненияКомпоновкиДанных.НеЗаполнено);
	ЭлементНастройки.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// Отметка
	ЭлементНастройки = Настройка.Добавить();
	НовоеПоле = ЭлементНастройки.Поля.Элементы.Добавить();
	НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДокументыОплатыОтметка");
	ГруппаНЕ = ФинансоваяОтчетностьСервер.НовыйОтбор(ЭлементНастройки.Отбор, Неопределено, , ТипОтбораГруппа);
	ГруппаНЕ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе;
	ГруппаИ = ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппаНЕ, Неопределено, , ТипОтбораГруппа);
	ГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ФинансоваяОтчетностьСервер.НовыйОтбор(
		ГруппаИ, "Объект.ДокументыОплаты.Контрагент", , , ВидСравненияКомпоновкиДанных.Заполнено);
	ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппаИ, "Объект.ДокументыОплаты.Партнер", , , ВидСравненияКомпоновкиДанных.Заполнено);
	ГруппаИПодгруппаИЛИ = ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппаИ, Неопределено, , ТипОтбораГруппа);
	ГруппаИПодгруппаИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ГруппаИПодгруппаИЛИПодгруппаИ = ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппаИПодгруппаИЛИ, Неопределено, , ТипОтбораГруппа);
	ГруппаИПодгруппаИЛИПодгруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ФинансоваяОтчетностьСервер.НовыйОтбор(
		ГруппаИПодгруппаИЛИПодгруппаИ, "Объект.ДокументыОплаты.БанковскийСчетКонтрагента", , , ВидСравненияКомпоновкиДанных.Заполнено);
	ФинансоваяОтчетностьСервер.НовыйОтбор(
		ГруппаИПодгруппаИЛИПодгруппаИ, "Объект.ДокументыОплаты.ДатаПлатежа", , , ВидСравненияКомпоновкиДанных.Заполнено);
	ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппаИПодгруппаИЛИПодгруппаИ, "ИспользуютсяЗаявкиНаРасходованиеДенежныхСредств", Истина);
	ГруппаИПодгруппаИЛИПодгруппаИ2 = ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппаИПодгруппаИЛИ, Неопределено, , ТипОтбораГруппа);
	ГруппаИПодгруппаИЛИПодгруппаИ2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ФинансоваяОтчетностьСервер.НовыйОтбор(
		ГруппаИПодгруппаИЛИПодгруппаИ2, "Объект.ДокументыОплаты.БанковскийСчетОрганизации", , , ВидСравненияКомпоновкиДанных.Заполнено);
	ФинансоваяОтчетностьСервер.НовыйОтбор(
		ГруппаИПодгруппаИЛИПодгруппаИ2, "Объект.ДокументыОплаты.БанковскийСчетКонтрагента", , , ВидСравненияКомпоновкиДанных.Заполнено);
	ФинансоваяОтчетностьСервер.НовыйОтбор(
		ГруппаИПодгруппаИЛИПодгруппаИ2, "ИспользуютсяЗаявкиНаРасходованиеДенежныхСредств", Ложь);
	ЭлементНастройки.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Сумма
	ЭлементНастройки = Настройка.Добавить();
	НовоеПоле = ЭлементНастройки.Поля.Элементы.Добавить();
	НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДокументыОплатыСумма");
	ФинансоваяОтчетностьСервер.НовыйОтбор(
		ЭлементНастройки.Отбор, "Объект.ДокументыОплаты.ДокументОплаты", , , ВидСравненияКомпоновкиДанных.Заполнено);
	ЭлементНастройки.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	#КонецОбласти
	
	#Область ДокументыПриобретения
	
	// ЗагрузитьЧекСамозанятого
	ЭлементНастройки = Настройка.Добавить();
	НовоеПоле = ЭлементНастройки.Поля.Элементы.Добавить();
	НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДокументыПриобретенияЗагрузитьЧекСамозанятого");
	ГруппаИЛИ = ФинансоваяОтчетностьСервер.НовыйОтбор(ЭлементНастройки.Отбор, Неопределено, , ТипОтбораГруппа);
	ГруппаИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ФинансоваяОтчетностьСервер.НовыйОтбор(
		ГруппаИЛИ, "Объект.ДокументыПриобретения.ЧекСамозанятого", , , ВидСравненияКомпоновкиДанных.Заполнено);
	ФинансоваяОтчетностьСервер.НовыйОтбор(
		ГруппаИЛИ, "Объект.ДокументыПриобретения.СсылкаНаЧек", , , ВидСравненияКомпоновкиДанных.Заполнено);
	ЭлементНастройки.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ЭлементНастройки = Настройка.Добавить();
	НовоеПоле = ЭлементНастройки.Поля.Элементы.Добавить();
	НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДокументыПриобретенияЗагрузитьЧекСамозанятого");
	ГруппаИЛИ = ФинансоваяОтчетностьСервер.НовыйОтбор(ЭлементНастройки.Отбор, Неопределено, , ТипОтбораГруппа);
	ГруппаИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ФинансоваяОтчетностьСервер.НовыйОтбор(
		ГруппаИЛИ, "Объект.ДокументыПриобретения.ЧекСамозанятого", , , ВидСравненияКомпоновкиДанных.НеЗаполнено);
	ФинансоваяОтчетностьСервер.НовыйОтбор(
		ГруппаИЛИ, "Объект.ДокументыПриобретения.СсылкаНаЧек", , , ВидСравненияКомпоновкиДанных.НеЗаполнено);
	ЭлементНастройки.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Загрузить'"));
	
	// НомерЧека
	ЭлементНастройки = Настройка.Добавить();
	НовоеПоле = ЭлементНастройки.Поля.Элементы.Добавить();
	НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДокументыПриобретенияНомерЧека");
	ГруппаИ = ФинансоваяОтчетностьСервер.НовыйОтбор(ЭлементНастройки.Отбор, Неопределено, , ТипОтбораГруппа);
	ГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ФинансоваяОтчетностьСервер.НовыйОтбор(
		ГруппаИ, "Объект.ДокументыПриобретения.ЧекСамозанятого", , , ВидСравненияКомпоновкиДанных.НеЗаполнено);
	ФинансоваяОтчетностьСервер.НовыйОтбор(
		ГруппаИ, "Объект.ДокументыПриобретения.СсылкаНаЧек", , , ВидСравненияКомпоновкиДанных.НеЗаполнено);
	ЭлементНастройки.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Сумма
	ЭлементНастройки = Настройка.Добавить();
	НовоеПоле = ЭлементНастройки.Поля.Элементы.Добавить();
	НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДокументыПриобретенияСумма");
	ФинансоваяОтчетностьСервер.НовыйОтбор(
		ЭлементНастройки.Отбор, "Объект.ДокументыПриобретения.ДокументПриобретения", , , ВидСравненияКомпоновкиДанных.Заполнено);
	ЭлементНастройки.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьЦветКоманды()

	ВкладкиИКоманды = СвязьСтраницСКомандами();
	ВыбраннаяСтраница = Элементы.ГруппаСтраниц.ТекущаяСтраница;
	ВыбраннаяКоманда = ВкладкиИКоманды.Получить(ВыбраннаяСтраница);
	
	ВыбраннаяКоманда.ЦветТекста = ЦветаСтиля.ЦветАкцента;
	
	Для Каждого КнопкаФормы Из Элементы.ГруппаКоманд.ПодчиненныеЭлементы Цикл
		
		Если КнопкаФормы <> ВыбраннаяКоманда Тогда
			КнопкаФормы.ЦветТекста = ЦветаСтиля.ЦветТекстаКнопки;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормы()

	Элементы.ДокументыОплатыЗагрузитьСамозанятыхИзФайла.ЦветФона = ЦветаСтиля.ЦветВажного;
	Элементы.ДокументыОплатыЗагрузитьСамозанятыхИзФайла.Шрифт = ШрифтыСтиля.ВажнаяНадписьШрифт;
	
	Элементы.ДокументыПриобретенияЗагрузитьЧекиСамозанятыхИзФайла.ЦветФона = ЦветаСтиля.ЦветВажного;
	Элементы.ДокументыПриобретенияЗагрузитьЧекиСамозанятыхИзФайла.Шрифт = ШрифтыСтиля.ВажнаяНадписьШрифт;
	
	Элементы.ДокументыОплатыСумма.Шрифт = ШрифтыСтиля.ВажнаяНадписьШрифт;
	Элементы.ДокументыОплатыСумма.ШрифтЗаголовка = ШрифтыСтиля.ВажнаяНадписьШрифт;
	
	Элементы.ДокументыПриобретенияЗагрузитьЧекСамозанятого.ЦветТекста = ЦветаСтиля.ЦветТекстаПроблема;
	Элементы.ДокументыПриобретенияНомерЧека.ЦветТекста = ЦветаСтиля.ГиперссылкаЦвет;
	
	Элементы.ДокументыОплатыДатаПлатежа.Видимость = ИспользуютсяЗаявкиНаРасходованиеДенежныхСредств;
	
	Если ИспользуютсяЗаявкиНаРасходованиеДенежныхСредств Тогда
		
		Элементы.ОформитьОплату.Заголовок = НСтр("ru = 'Оформление заявок на оплату'");
		Элементы.ДокументыОплатыГруппаДокументОплаты.Заголовок = НСтр("ru = 'Заявка'");
		Элементы.ДокументыОплатыДокументОплаты.ОграничениеТипа = 
			Новый ОписаниеТипов("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств");
		
	Иначе
		Элементы.ДокументыОплатыДокументОплаты.ОграничениеТипа = 
			Новый ОписаниеТипов("ДокументСсылка.СписаниеБезналичныхДенежныхСредств");
	КонецЕсли;
	
	Если ИспользуютсяЗаявкиНаРасходованиеДенежныхСредств Тогда
		ВидимостьОплаты = ПравоДоступа("Добавление", Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств);
	Иначе
		ВидимостьОплаты = ПравоДоступа("Добавление", Метаданные.Документы.СписаниеБезналичныхДенежныхСредств);
	КонецЕсли;
	
	ВидимостьПриобретенияТоваровУслуг = ПравоДоступа("Добавление", Метаданные.Документы.ПриобретениеТоваровУслуг);
	ВидимостьПриобретениеУслугПрочихАктивов = ПравоДоступа("Добавление", Метаданные.Документы.ПриобретениеУслугПрочихАктивов);
	ЕстьПравоПросмотраПриобретенияТоваровУслуг = ПравоДоступа("Просмотр", Метаданные.Документы.ПриобретениеТоваровУслуг);
	ЕстьПравоПросмотраПриобретенияУслугПрочихАктивов = ПравоДоступа("Просмотр", Метаданные.Документы.ПриобретениеУслугПрочихАктивов);
	
	Элементы.ДокументыОплатыОплатитьИндивидуально.Видимость = ВидимостьОплаты;
	Элементы.ДокументыОплатыОплатитьРеестром.Видимость = ВидимостьОплаты;
	Элементы.ДокументыПриобретенияСоздатьПриобретениеТоваровУслуг.Видимость = ВидимостьПриобретенияТоваровУслуг;
	Элементы.ДокументыПриобретенияСоздатьПриобретениеУслугПрочихАктивов.Видимость = ВидимостьПриобретениеУслугПрочихАктивов;
	
	Элементы.ДокументыОплатыЗаполнитьСписокПоПрошломуМесяцу.Видимость = 
		ПравоДоступа("Просмотр", Метаданные.Документы.СписаниеБезналичныхДенежныхСредств);
	Элементы.ДокументыПриобретенияЗаполнитьСписокПриобретенийПоПрошломуМесяцу.Видимость = 
		(ЕстьПравоПросмотраПриобретенияТоваровУслуг
		ИЛИ ЕстьПравоПросмотраПриобретенияУслугПрочихАктивов);
	
	// ДокументыОплатыКонтрагент
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо));
	
	Если ИспользованиеПартнеровКакКонтрагентов Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Поставщик", Истина));
	КонецЕсли;
	
	Элементы.ДокументыОплатыКонтрагент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);

КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораБанковскийСчетКонтрагента()

	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ПометкаУдаления", Ложь));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Закрыт", Ложь));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВалютаДенежныхСредств", Валюта));
	
	Элементы.ДокументыОплатыБанковскийСчетКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);

КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораОбъектаРасчетов()

	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ПометкаУдаления", Ложь));
	МассивПараметров.Добавить(Новый ПараметрВыбора("ПодборДебиторскойЗадолженности", Ложь));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВалютаВзаиморасчетов", Валюта));
	
	УсловиеДоговора = Новый Массив;
	УсловиеДоговора.Добавить(Неопределено);
	УсловиеДоговора.Добавить(Истина);
	
	Отбор = Новый Соответствие;
	Отбор.Вставить("Договор.ДоговорССамозанятым", УсловиеДоговора);
	Отбор.Вставить("НалогообложениеНДС", ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС"));
	
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ДополнительныеОтборы", Отбор));
	
	Элементы.ДокументыОплатыОбъектРасчетов.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);

КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьДанныеПоУмолчанию()

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		
		Валюта = ЗначениеНастроекКлиентСерверПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
		БанковскийСчет = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(
			Объект.Организация, Валюта);
		
		Если Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.СтраницаОформленияОплаты Тогда
			ЗаполнитьТаблицуНаОплату();
		Иначе
			ЗаполнитьТаблицуОформленияПоступлений();
		КонецЕсли;
			
	КонецЕсли;
	
	УстановитьПараметрыВыбораБанковскийСчетКонтрагента();
	УстановитьПараметрыВыбораОбъектаРасчетов();

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	Валюта = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
	
	БанковскийСчет = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(
		Объект.Организация, Валюта);
	
	Для Каждого СтрокаТаблицы Из Объект.ДокументыОплаты Цикл
		СписокПодобранныхСтрок.Добавить(СтрокаТаблицы.ПолучитьИдентификатор());
	КонецЦикла;
	
	Если СписокПодобранныхСтрок.Количество() <> 0 Тогда
		ЗаполнитьСведенияСамозанятыхПоСписку();
		СписокПодобранныхСтрок.Очистить();
	КонецЕсли;
	
	Если Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.СтраницаОформленияПоступлений Тогда
		
		Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.ДокументыПриобретения.Очистить();
		Иначе
			ЗаполнитьТаблицуОформленияПоступлений();
		КонецЕсли;
		
	КонецЕсли;
	
	Если Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.СтраницаОформленияОплаты Тогда
		
		Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.ДокументыОплаты.Очистить();
		Иначе
			
			Если Объект.ДокументыОплаты.Количество() = 0 Тогда
				ЗаполнитьТаблицуНаОплату();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПараметрыВыбораБанковскийСчетКонтрагента();
	УстановитьПараметрыВыбораОбъектаРасчетов();

КонецПроцедуры

#Область ОформлениеПлатежей

&НаКлиенте
Процедура ОформитьОплатуПослеПроверки(Результат, ДополнительныеПараметры) Экспорт

	ОформитьОплатуНаСервере();

КонецПроцедуры

&НаСервере
Процедура ОформитьОплатуНаСервере()

	Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.СтраницаОформленияОплаты;
	ИзменитьЦветКоманды();
	
	ЗаполнитьТаблицуНаОплату();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуНаОплату()

	Объект.ДокументыОплаты.Очистить();
	
	ЗадолженностьПоОплате = ОстаткиПоОбъектамРасчетов(Ложь);
	ДополнитьОстаткиЗадолженностиДаннымиНаОплату(ЗадолженностьПоОплате);
	
	ИсходныеДанные = Новый Структура;
	ИсходныеДанные.Вставить("ОстаткиОплаты", ЗадолженностьПоОплате);
	
	ДобавитьСтрокиВДокументыОплаты(ИсходныеДанные);

КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокиВДокументыОплаты(Данные)

	ОстаткиОплатыПоСамозанятому = Данные.ОстаткиОплаты.Скопировать();
	
	Для Каждого ОстатокОплаты Из ОстаткиОплатыПоСамозанятому Цикл
	
		Если ОстатокОплаты.Сумма > 0 Тогда
			
			НоваяСтрока = СтрокаТаблицыОплаты(ОстатокОплаты);
			
			НоваяСтрока.Сумма = ОстатокОплаты.Сумма;
			
			Если ЗначениеЗаполнено(НоваяСтрока.Партнер) Тогда
			
				ЗаявкиЗаполнены = ПоляЗаявкиЗаполнены(НоваяСтрока, ИспользуютсяЗаявкиНаРасходованиеДенежныхСредств);
				СписанияЗаполнены = ПоляСписанияЗаполнены(НоваяСтрока, ИспользуютсяЗаявкиНаРасходованиеДенежныхСредств);
				
				Если (ЗаявкиЗаполнены
					ИЛИ СписанияЗаполнены)
					И НоваяСтрока.Сумма <> 0 Тогда
					НоваяСтрока.Отметка = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция СтрокаТаблицыОплаты(СтрокаДанных)

	НоваяСтрока = Объект.ДокументыОплаты.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
	
	НоваяСтрока.Состояние = 4;
	
	Если Не ИспользуютсяЗаявкиНаРасходованиеДенежныхСредств
		И Не ЗначениеЗаполнено(НоваяСтрока.БанковскийСчетОрганизации) Тогда
		НоваяСтрока.БанковскийСчетОрганизации = БанковскийСчет;
	КонецЕсли;
	
	Если ИспользуютсяЗаявкиНаРасходованиеДенежныхСредств
		И Не ЗначениеЗаполнено(НоваяСтрока.ДатаПлатежа) Тогда
		НоваяСтрока.ДатаПлатежа = ТекущаяДатаСеанса();
	КонецЕсли;
	
	НоваяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор;
	
	Возврат НоваяСтрока;

КонецФункции

&НаСервере
Процедура ДанныеКонтрагентовПартнерПриИзмененииНаСервере(ИдентификаторСтроки)

	СтрокаТабличнойЧасти = Объект.ДокументыОплаты.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Партнер) Тогда
		ПартнерПриИзменении(СтрокаТабличнойЧасти);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДанныеКонтрагентовКонтрагентПриИзмененииНаСервере(ИдентификаторСтроки)

	СтрокаТабличнойЧасти = Объект.ДокументыОплаты.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Контрагент) Тогда
		СтрокаТабличнойЧасти.Партнер = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(
			СтрокаТабличнойЧасти.Контрагент, Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
	КонецЕсли;
	
	КонтрагентПриИзменении(СтрокаТабличнойЧасти);

КонецПроцедуры

&НаСервере
Процедура ДокументыОплатыОбъектРасчетовПриИзмененииНаСервере(ИдентификаторСтроки)

	СтрокаТаблицы = Объект.ДокументыОплаты.НайтиПоИдентификатору(ИдентификаторСтроки);
	СтрокаТаблицы.Договор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.ОбъектРасчетов, "Договор");
		
	Если ЗначениеЗаполнено(СтрокаТаблицы.Договор) Тогда
		СтрокаТаблицы.СтатьяДвиженияДенежныхСредств =
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Договор, "СтатьяДвиженияДенежныхСредств");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДокументыОплатыБанковскийСчетКонтрагентаПриИзмененииНаСервере(ИдентификаторСтроки)

	СтрокаТаблицы = Объект.ДокументыОплаты.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если Не ЗначениеЗаполнено(СтрокаТаблицы.Договор) Тогда
		
		ПараметрыОтбора = НовыйПараметрыОтбораДоговора();
		ПараметрыОтбора.Организация = Объект.Организация;
		ПараметрыОтбора.Валюта = Валюта;
		ПараметрыОтбора.Контрагент = СтрокаТаблицы.Контрагент;
		ПараметрыОтбора.Партнер = СтрокаТаблицы.Партнер;
		ПараметрыОтбора.БанковскийСчетКонтрагента = СтрокаТаблицы.БанковскийСчетКонтрагента;
		ПараметрыОтбора.БанковскийСчетОрганизации = 
			?(ЗначениеЗаполнено(СтрокаТаблицы.БанковскийСчетОрганизации), СтрокаТаблицы.БанковскийСчетОрганизации, Неопределено);
		
		СтрокаТаблицы.Договор = ДоговорПоУмолчанию(ПараметрыОтбора);
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Договор) Тогда
			ДоговорПриИзменении(СтрокаТаблицы);
		КонецЕсли;
	
	КонецЕсли;
	
	ОчиститьСвязанныеРеквизиты(СтрокаТаблицы, "БанковскийСчетКонтрагента", "БанковскийСчетКонтрагента");

КонецПроцедуры

&НаСервере
Процедура ДокументыОплатыДоговорПриИзмененииНаСервере(ИдентификаторСтроки)

	СтрокаТаблицы = Объект.ДокументыОплаты.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ЗначениеЗаполнено(СтрокаТаблицы.Договор) Тогда
		ДоговорПриИзменении(СтрокаТаблицы);
	КонецЕсли;
	
	ОчиститьСвязанныеРеквизиты(СтрокаТаблицы, "Договор", "Договор");

КонецПроцедуры

&НаСервере
Процедура ДокументыОплатыБанковскийСчетОрганизацииПриИзмененииНаСервере(ИдентификаторСтроки)

	СтрокаТаблицы = Объект.ДокументыОплаты.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если Не ЗначениеЗаполнено(СтрокаТаблицы.Договор) Тогда
		
		ПараметрыОтбора = НовыйПараметрыОтбораДоговора();
		ПараметрыОтбора.Организация = Объект.Организация;
		ПараметрыОтбора.Валюта = Валюта;
		ПараметрыОтбора.Контрагент = СтрокаТаблицы.Контрагент;
		ПараметрыОтбора.Партнер = СтрокаТаблицы.Партнер;
		ПараметрыОтбора.БанковскийСчетКонтрагента = 
			?(ЗначениеЗаполнено(СтрокаТаблицы.БанковскийСчетКонтрагента), СтрокаТаблицы.БанковскийСчетКонтрагента, Неопределено);
		ПараметрыОтбора.БанковскийСчетОрганизации = СтрокаТаблицы.БанковскийСчетОрганизации;
		
		СтрокаТаблицы.Договор = ДоговорПоУмолчанию(ПараметрыОтбора);
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Договор) Тогда
			ДоговорПриИзменении(СтрокаТаблицы);
		КонецЕсли;
	
	КонецЕсли;
	
	ОчиститьСвязанныеРеквизиты(СтрокаТаблицы, "БанковскийСчетОрганизации", "БанковскийСчет");

КонецПроцедуры

#Область ЗагрузкаСпискаНаОплатуИзФайла 

&НаКлиенте
Процедура ЗагрузитьСамозанятыхИзФайлаПослеПроверки(Результат, ДополнительныеПараметры) Экспорт

	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗагрузитьСамозанятыхИзФайлаЗагрузка", ЭтотОбъект);
	СообщитьОНаличииЗаписейВСпискеСамозанятых(ОповещениеОЗавершении, "ДокументыОплаты");

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСамозанятыхИзФайлаЗагрузка(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ДокументыОплаты.Очистить();
	
	ПараметрыЗагрузки = ЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
	ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "Обработка.ПомощникРаботыССамозанятыми.ДокументыОплаты";
	ПараметрыЗагрузки.Заголовок = НСтр("ru = 'Загрузка оплаты'");
	ПараметрыЗагрузки.КолонкиМакета = ОписаниеКолонокМакетаДляЗагрузкиОплаты();
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Организация", Объект.Организация);
	ДополнительныеПараметры.Вставить("БанковскийСчет", БанковскийСчет);
	ДополнительныеПараметры.Вставить("Валюта", Валюта);
	ДополнительныеПараметры.Вставить("РежимЗагрузки", 0);
	ПараметрыЗагрузки.ДополнительныеПараметры = ДополнительныеПараметры;
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузкаОплатыИзФайлаЗавершение", ЭтотОбъект);
	ЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки, Оповещение);

КонецПроцедуры

&НаКлиенте
Функция ОписаниеКолонокМакетаДляЗагрузкиОплаты()

	СписокКолонок = Новый Массив;
	
	НоваяКолонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета(
		"ФИО",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)),
		НСтр("ru = 'Фамилия, имя и отчество'"),
		25);
	НоваяКолонка.Позиция = 1;
	НоваяКолонка.Родитель = "Контрагент";
	СписокКолонок.Добавить(НоваяКолонка);
	
	НоваяКолонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета(
		"Фамилия",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(50)),
		НСтр("ru = 'Фамилия'"),
		15);
	НоваяКолонка.Позиция = 2;
	НоваяКолонка.Родитель = "Контрагент";
	СписокКолонок.Добавить(НоваяКолонка);
	
	НоваяКолонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета(
		"Имя",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(50)),
		НСтр("ru = 'Имя'"),
		15);
	НоваяКолонка.Позиция = 3;
	НоваяКолонка.Родитель = "Контрагент";
	СписокКолонок.Добавить(НоваяКолонка);
	
	НоваяКолонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета(
		"Отчество",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(50)),
		НСтр("ru = 'Отчество'"),
		15);
	НоваяКолонка.Позиция = 4;
	НоваяКолонка.Родитель = "Контрагент";
	СписокКолонок.Добавить(НоваяКолонка);
	
	НоваяКолонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета(
		"ИНН",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(12)),
		НСтр("ru = 'ИНН'"),
		15,
		НСтр("ru='Идентификационный номер налогоплательщика.'"));
	НоваяКолонка.Позиция = 5;
	НоваяКолонка.Родитель = "Контрагент";
	НоваяКолонка.ОбязательнаДляЗаполнения = Истина;
	СписокКолонок.Добавить(НоваяКолонка);
	
	НоваяКолонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета(
		"НомерСчета",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(34)),
		НСтр("ru = 'Номер счета'"),
		20);
	НоваяКолонка.Позиция = 6;
	НоваяКолонка.Родитель = "БанковскийСчетКонтрагента";
	СписокКолонок.Добавить(НоваяКолонка);
	
	НоваяКолонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета(
		"БИК",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(9)),
		НСтр("ru = 'БИК банка'"),
		9);
	НоваяКолонка.Позиция = 7;
	НоваяКолонка.Родитель = "БанковскийСчетКонтрагента";
	СписокКолонок.Добавить(НоваяКолонка);
	
	НоваяКолонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета(
		"Договор",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(150)),
		НСтр("ru = 'Договор'"),
		10);
	НоваяКолонка.Позиция = 8;
	НоваяКолонка.Родитель = "Договор";
	СписокКолонок.Добавить(НоваяКолонка);
	
	НоваяКолонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета(
		"НомерДоговора",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(128)),
		НСтр("ru = 'Номер договора'"),
		15);
	НоваяКолонка.Позиция = 9;
	НоваяКолонка.Родитель = "Договор";
	СписокКолонок.Добавить(НоваяКолонка);
	
	НоваяКолонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета(
		"ДатаДоговора",
		Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)),
		НСтр("ru = 'Дата договора'"),
		15);
	НоваяКолонка.Позиция = 10;
	НоваяКолонка.Родитель = "Договор";
	СписокКолонок.Добавить(НоваяКолонка);
	
	НоваяКолонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета(
		"Сумма",
		ТипДенежнаяСуммаНеотрицательная,
		НСтр("ru = 'Сумма'"),
		15);
	НоваяКолонка.Позиция = 11;
	СписокКолонок.Добавить(НоваяКолонка);
	
	НоваяКолонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета(
		"ДатаПлатежа",
		Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)),
		НСтр("ru = 'Дата платежа'"),
		15);
	НоваяКолонка.Позиция = 10;
	СписокКолонок.Добавить(НоваяКолонка);
	
	Возврат СписокКолонок;

КонецФункции

&НаКлиенте
Процедура ЗагрузкаОплатыИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт

	Если АдресЗагруженныхДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьКонтрагентовИзФайла(АдресЗагруженныхДанных);
	
	Для Каждого СтрокаТаблицы Из Объект.ДокументыОплаты Цикл
		
		СтрокаТаблицы.ИдентификаторСтроки = Новый УникальныйИдентификатор;
		УстановитьСнятьОтметку(СтрокаТаблицы);
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКонтрагентовИзФайла(АдресЗагруженныхДанных)
	
	СопоставленныеДанныеКонтрагентов = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных); // ТаблицаЗначений
	
	Если СопоставленныеДанныеКонтрагентов.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Нет данных для загрузки'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	СопоставленныеДанныеКонтрагентов.Колонки.Добавить("Состояние");
	СопоставленныеДанныеКонтрагентов.ЗаполнитьЗначения(4, "Состояние");
	
	Объект.ДокументыОплаты.Загрузить(СопоставленныеДанныеКонтрагентов);
	
КонецПроцедуры

#КонецОбласти

#Область ПодборСамозанятого

&НаКлиенте
Процедура ПодобратьСамозанятыхИзСправочникаЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если СписокПодобранныхСтрок.Количество() <> 0 Тогда
		
		ЗаполнитьСведенияСамозанятыхПоСписку();
		
		Для Каждого СтрокаСписка Из СписокПодобранныхСтрок Цикл
		
			СтрокаТаблицы = Объект.ДокументыОплаты.НайтиПоИдентификатору(СтрокаСписка.Значение);
			
			Если СтрокаТаблицы <> Неопределено Тогда
				УстановитьСнятьОтметку(СтрокаТаблицы);
			КонецЕсли;
			
		КонецЦикла;
		
		СписокПодобранныхСтрок.Очистить();
	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияСамозанятыхПоСписку()

	ПодобранныеСтроки = Новый Массив;
	Контрагенты = Новый Массив;
	
	Для Каждого СтрокаСписка Из СписокПодобранныхСтрок Цикл
		
		СтрокаТаблицы = Объект.ДокументыОплаты.НайтиПоИдентификатору(СтрокаСписка.Значение);
		
		Если СтрокаТаблицы <> Неопределено Тогда
			
			ПодобранныеСтроки.Добавить(СтрокаТаблицы);
			
			Если Контрагенты.Найти(СтрокаТаблицы.Контрагент) = Неопределено Тогда
				Контрагенты.Добавить(СтрокаТаблицы.Контрагент);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Контрагенты.Партнер КАК Партнер,
		|	Контрагенты.Ссылка КАК Контрагент
		|ПОМЕСТИТЬ СведенияОКонтрагентах
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Ссылка В(&Список)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоговорыКонтрагентов.Ссылка КАК Договор,
		|	ДоговорыКонтрагентов.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
		|	СведенияОКонтрагентах.Контрагент КАК Контрагент,
		|	ДоговорыКонтрагентов.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	ДоговорыКонтрагентов.БанковскийСчет КАК БанковскийСчетОрганизации
		|ПОМЕСТИТЬ СведенияПоДоговору
		|ИЗ
		|	СведенияОКонтрагентах КАК СведенияОКонтрагентах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ПО СведенияОКонтрагентах.Контрагент = ДоговорыКонтрагентов.Контрагент
		|			И СведенияОКонтрагентах.Партнер = ДоговорыКонтрагентов.Партнер
		|ГДЕ
		|	НЕ ДоговорыКонтрагентов.ПометкаУдаления
		|	И (&ВалютаВзаиморасчетов = НЕОПРЕДЕЛЕНО
		|			ИЛИ ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов)
		|	И ДоговорыКонтрагентов.Организация = &Организация
		|	И ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
		|	И ДоговорыКонтрагентов.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика)
		|	И ДоговорыКонтрагентов.ДоговорССамозанятым
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СведенияПоДоговору.Договор КАК Договор,
		|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетов
		|ПОМЕСТИТЬ ОбъектыРасчетовПоДоговору
		|ИЗ
		|	СведенияПоДоговору КАК СведенияПоДоговору
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|		ПО СведенияПоДоговору.Договор = ОбъектыРасчетов.Объект
		|			И НЕ ОбъектыРасчетов.ПометкаУдаления
		|ГДЕ
		|	НЕ ОбъектыРасчетов.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СведенияПоДоговору.Договор КАК Договор,
		|	СведенияПоДоговору.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
		|	СведенияПоДоговору.Контрагент КАК Контрагент,
		|	СведенияПоДоговору.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	СведенияПоДоговору.БанковскийСчетОрганизации КАК БанковскийСчетОрганизации,
		|	ОбъектыРасчетовПоДоговору.ОбъектРасчетов КАК ОбъектРасчетов
		|ИЗ
		|	СведенияПоДоговору КАК СведенияПоДоговору
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОбъектыРасчетовПоДоговору КАК ОбъектыРасчетовПоДоговору
		|		ПО СведенияПоДоговору.Договор = ОбъектыРасчетовПоДоговору.Договор
		|ИТОГИ ПО
		|	Контрагент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СведенияОКонтрагентах.Контрагент КАК Контрагент,
		|	БанковскиеСчетаКонтрагентов.Ссылка КАК БанковскийСчетКонтрагента
		|ИЗ
		|	СведенияОКонтрагентах КАК СведенияОКонтрагентах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
		|		ПО СведенияОКонтрагентах.Контрагент = БанковскиеСчетаКонтрагентов.Владелец
		|ГДЕ
		|	НЕ БанковскиеСчетаКонтрагентов.ПометкаУдаления
		|	И НЕ БанковскиеСчетаКонтрагентов.Закрыт
		|	И (&ВалютаВзаиморасчетов = НЕОПРЕДЕЛЕНО
		|			ИЛИ БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств = &ВалютаВзаиморасчетов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СведенияОКонтрагентах.Партнер КАК Партнер,
		|	СведенияОКонтрагентах.Контрагент КАК Контрагент
		|ИЗ
		|	СведенияОКонтрагентах КАК СведенияОКонтрагентах
		|ГДЕ
		|	СведенияОКонтрагентах.Партнер.Поставщик";
	
	Запрос.УстановитьПараметр("Список", Контрагенты);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ?(ЗначениеЗаполнено(Валюта), Валюта, Неопределено));
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	ВыборкаСведений = РезультатыЗапросов[РезультатыЗапросов.ВГраница()].Выбрать();
	ВыборкаСчетаПоКонтрагенту = РезультатыЗапросов[РезультатыЗапросов.ВГраница() - 1].Выбрать();
	ВыборкаДоговораПоКонтрагенту = 
		РезультатыЗапросов[РезультатыЗапросов.ВГраница() - 2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	УстановитьПривилегированныйРежим(Ложь);
	
	СписокСчетовКонтрагентов = Объект.ДокументыОплаты.Выгрузить(, "БанковскийСчетКонтрагента");
	СписокСчетовКонтрагентов.Свернуть("БанковскийСчетКонтрагента");
	
	СписокСчетовКонтрагентов = Объект.ДокументыОплаты.Выгрузить(, "БанковскийСчетКонтрагента");
	СписокСчетовКонтрагентов.Свернуть("БанковскийСчетКонтрагента");
	
	СписокСчетовОрганизаций = Объект.ДокументыОплаты.Выгрузить(, "БанковскийСчетОрганизации");
	СписокСчетовОрганизаций.Свернуть("БанковскийСчетОрганизации");
	
	СписокСчетов = СписокСчетовКонтрагентов.ВыгрузитьКолонку("БанковскийСчетКонтрагента");
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокСчетов, СписокСчетовОрганизаций.ВыгрузитьКолонку("БанковскийСчетОрганизации"), Истина);
	ВладельцыСчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(СписокСчетов, "Владелец");
	
	Для Каждого СтрокаТаблицы Из ПодобранныеСтроки Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("Контрагент", СтрокаТаблицы.Контрагент);
		
		ВыборкаСведений.Сбросить();
		ВыборкаДоговораПоКонтрагенту.Сбросить();
		ВыборкаСчетаПоКонтрагенту.Сбросить();
		
		Если ВыборкаСведений.НайтиСледующий(Отбор) Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыборкаСведений);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.БанковскийСчетКонтрагента)
			И ВладельцыСчетов[СтрокаТаблицы.БанковскийСчетКонтрагента] <> СтрокаТаблицы.Контрагент Тогда
			СтрокаТаблицы.БанковскийСчетКонтрагента = Неопределено;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.БанковскийСчетОрганизации)
			И ВладельцыСчетов[СтрокаТаблицы.БанковскийСчетОрганизации] <> Объект.Организация Тогда
			СтрокаТаблицы.БанковскийСчетОрганизации = Неопределено;
		КонецЕсли;
		
		Если ВыборкаДоговораПоКонтрагенту.НайтиСледующий(Отбор) Тогда
			
			ВыборкаДоговора = ВыборкаДоговораПоКонтрагенту.Выбрать();
			
			Если ВыборкаДоговора.Следующий() Тогда
				
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыборкаДоговора, "Договор, ОбъектРасчетов");
				ЗаполнитьСчетаПоДоговору(СтрокаТаблицы, ВыборкаДоговора);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.БанковскийСчетКонтрагента) Тогда
			Отбор.Вставить("БанковскийСчетКонтрагента", СтрокаТаблицы.БанковскийСчетКонтрагента);
		КонецЕсли;
		
		Если ВыборкаСчетаПоКонтрагенту.НайтиСледующий(Отбор) Тогда
			СтрокаТаблицы.БанковскийСчетКонтрагента = ВыборкаСчетаПоКонтрагенту.БанковскийСчетКонтрагента;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.БанковскийСчетОрганизации) Тогда
			СтрокаТаблицы.БанковскийСчетОрганизации = БанковскийСчет;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ДатаПлатежа) Тогда
			СтрокаТаблицы.ДатаПлатежа = ТекущаяДатаСеанса();
		КонецЕсли;
		
		СтрокаТаблицы.Состояние = 4;
		СтрокаТаблицы.ИдентификаторСтроки = Новый УникальныйИдентификатор;
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ЗаполнитьСписокНаОплатуПоОстаткамРасчетов

&НаКлиенте
Процедура ЗаполнитьСписокПоОстаткамРасчетовПослеПроверки(Результат, ДополнительныеПараметры) Экспорт

	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗаполнитьСписокПоОстаткамРасчетовЗавершение", ЭтотОбъект);
	СообщитьОНаличииЗаписейВСпискеСамозанятых(ОповещениеОЗавершении, "ДокументыОплаты");

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокПоОстаткамРасчетовЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТаблицуНаОплату();

КонецПроцедуры

#КонецОбласти

#Область НовыйСамозанятый

&НаКлиенте
Процедура СоздатьНовогоСамозанятогоЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия <> Неопределено Тогда
		СоздатьНовогоСамозанятогоЗавершениеСервер(РезультатЗакрытия);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СоздатьНовогоСамозанятогоЗавершениеСервер(Партнер)

	НоваяСтрока = Объект.ДокументыОплаты.Добавить();
	
	НоваяСтрока.Партнер = Партнер;
	ПартнерПриИзменении(НоваяСтрока);
	НоваяСтрока.БанковскийСчетОрганизации = БанковскийСчет;

КонецПроцедуры

#КонецОбласти

#Область ЗаполнитьСписокНаОплатуПоПрошломуМесяцу

&НаКлиенте
Процедура ЗаполнитьСписокПоПрошломуМесяцуПослеПроверки(Результат, ДополнительныеПараметры) Экспорт

	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗаполнитьСписокПоПрошломуМесяцуЗавершение", ЭтотОбъект);
	СообщитьОНаличииЗаписейВСпискеСамозанятых(ОповещениеОЗавершении, "ДокументыОплаты");

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокПоПрошломуМесяцуЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ДокументыОплаты.Очистить();
	
	ЗаполнитьСписокПоПрошломуМесяцуНаСервере();
	
	Если СписокДокументовПрошлогоПериода.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Документов оплаты самозанятым за прошлый месяц не обнаружено.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	Иначе
	
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств"));
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Представление", НСтр("ru = 'Документы прошлого месяца'"));
		ПараметрыФормы.Вставить("ОграничиватьВыборУказаннымиЗначениями", Истина);
		ПараметрыФормы.Вставить("ЗначенияДляВыбора", СписокДокументовПрошлогоПериода);
		ПараметрыФормы.Вставить("ОписаниеТипов", Новый ОписаниеТипов(МассивТипов));
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПослеВыбораДокументовПрошлогоПериода", ЭтотОбъект);
		
		ОткрытьФорму(
			"ОбщаяФорма.ВводЗначенийСпискомСФлажками",
			ПараметрыФормы,
			ЭтотОбъект, , , ,
			ОповещениеОЗакрытии,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокПоПрошломуМесяцуНаСервере()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДокументСписания.Ссылка КАК Документ,
		|	ТаблицаРасшифровкаПлатежа.Партнер КАК Партнер,
		|	ВЫБОР
		|		КОГДА ДокументСписания.СписокКонтрагентов
		|			ТОГДА ТаблицаРасшифровкаПлатежа.Контрагент
		|		ИНАЧЕ ДокументСписания.Контрагент
		|	КОНЕЦ КАК Контрагент,
		|	ВЫБОР
		|		КОГДА ДокументСписания.СписокКонтрагентов
		|			ТОГДА ТаблицаБанковскиеСчетаСпискаКонтрагентов.БанковскийСчетКонтрагента
		|		ИНАЧЕ ДокументСписания.БанковскийСчетКонтрагента
		|	КОНЕЦ КАК БанковскийСчетКонтрагента,
		|	ТаблицаРасшифровкаПлатежа.ОбъектРасчетов.Договор КАК Договор,
		|	СУММА(ТаблицаРасшифровкаПлатежа.Сумма) КАК Сумма,
		|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетов,
		|	ДокументСписания.БанковскийСчет КАК БанковскийСчетОрганизации,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	ДОБАВИТЬКДАТЕ(ДокументСписания.Дата, МЕСЯЦ, 1) КАК ДатаПлатежа,
		|	4 КАК Состояние
		|ИЗ
		|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДокументСписания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств.БанковскиеСчетаСпискаКонтрагентов КАК ТаблицаБанковскиеСчетаСпискаКонтрагентов
		|			ПО ТаблицаРасшифровкаПлатежа.Контрагент = ТаблицаБанковскиеСчетаСпискаКонтрагентов.Контрагент
		|				И ТаблицаРасшифровкаПлатежа.Ссылка = ТаблицаБанковскиеСчетаСпискаКонтрагентов.Ссылка
		|		ПО ДокументСписания.Ссылка = ТаблицаРасшифровкаПлатежа.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|		ПО (ТаблицаРасшифровкаПлатежа.ОбъектРасчетов.Договор = ОбъектыРасчетов.Объект)
		|			И НЕ ОбъектыРасчетов.ПометкаУдаления
		|ГДЕ
		|	ДокументСписания.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику)
		|	И ДокументСписания.Проведен
		|	И ДокументСписания.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И ДокументСписания.Организация = &Организация
		|	И ДокументСписания.ОперацияССамозанятым
		|
		|СГРУППИРОВАТЬ ПО
		|	ДокументСписания.Ссылка,
		|	ТаблицаРасшифровкаПлатежа.ОбъектРасчетов.Договор,
		|	ВЫБОР
		|		КОГДА ДокументСписания.СписокКонтрагентов
		|			ТОГДА ТаблицаРасшифровкаПлатежа.Контрагент
		|		ИНАЧЕ ДокументСписания.Контрагент
		|	КОНЕЦ,
		|	ТаблицаРасшифровкаПлатежа.Партнер,
		|	ВЫБОР
		|		КОГДА ДокументСписания.СписокКонтрагентов
		|			ТОГДА ТаблицаБанковскиеСчетаСпискаКонтрагентов.БанковскийСчетКонтрагента
		|		ИНАЧЕ ДокументСписания.БанковскийСчетКонтрагента
		|	КОНЕЦ,
		|	ОбъектыРасчетов.Ссылка,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств,
		|	ДОБАВИТЬКДАТЕ(ДокументСписания.Дата, МЕСЯЦ, 1),
		|	ДокументСписания.БанковскийСчет";
	
	ДеньПрошлогоМесяца = ДобавитьМесяц(ТекущаяДатаСеанса(), -1);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(ДеньПрошлогоМесяца));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(ДеньПрошлогоМесяца));
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	Результат = Запрос.Выполнить().Выгрузить();
	ДанныеКонтрагентовПоДокументамПрошлогоПериода.Загрузить(Результат);
	
	СписокДокументовПрошлогоПериода.ЗагрузитьЗначения(Результат.ВыгрузитьКолонку("Документ"));

КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораДокументовПрошлогоПериода(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> Неопределено Тогда
		ЗаполнитьСписокПоВыбраннымДокументамПрошлогоМесяца(Результат, "ДокументыОплаты");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СозданиеДокументовОплаты

&НаКлиенте
Процедура Оплатить(ОплатаПоРеестру)

	ОчиститьСообщения();
	
	Если Объект.ДокументыОплаты.Количество() = 0 Тогда
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Список на создание документов пуст.'"));
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("Отметка", Истина);
	
	СписокВыбранныхСтрок = Объект.ДокументыОплаты.НайтиСтроки(ПараметрыОтбора);
	
	Если СписокВыбранныхСтрок.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Не отмечено ни одной строки для оплаты.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	Если ОплатаПоРеестру Тогда
		ОформитьОплатуРеестром();
	Иначе
		ОформитьОплатуИндивидуально();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОформитьОплатуИндивидуально()

	Если ИспользуютсяЗаявкиНаРасходованиеДенежныхСредств Тогда
		ИмяДокумента = "ЗаявкаНаРасходованиеДенежныхСредств";
	Иначе
		ИмяДокумента = "СписаниеБезналичныхДенежныхСредств";
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить(
		"КлючеваяОперация",
		"Обработка.ПомощникРаботыССамозанятыми.Форма.СоздатьДокументОплатыИндивидуально");
	ДополнительныеПараметры.Вставить("ИмяДокумента", ИмяДокумента);
	ДополнительныеПараметры.Вставить("СписокКонтрагентов", Ложь);
	
	Оповещение = Новый ОписаниеОповещения(
		"СоздатьДокументыОплатыПослеПолученияПараметров", ЭтотОбъект, ДополнительныеПараметры);
	ВыполнитьОбработкуОповещения(Оповещение, Новый Структура);

КонецПроцедуры

&НаКлиенте
Процедура ОформитьОплатуРеестром()

	ПараметрыФормы = Новый Структура;
	
	Если ИспользуютсяЗаявкиНаРасходованиеДенежныхСредств Тогда
		ПараметрыФормы.Вставить("ТипДокумента", 2);
		ИмяДокумента = "ЗаявкаНаРасходованиеДенежныхСредств";
	Иначе
		ПараметрыФормы.Вставить("ТипДокумента", 3);
		ИмяДокумента = "СписаниеБезналичныхДенежныхСредств";
	КонецЕсли;
	
	ПараметрыФормы.Вставить("Валюта", Валюта);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить(
		"КлючеваяОперация",
		"Обработка.ПомощникРаботыССамозанятыми.Форма.СоздатьДокументОплатыРеестром");
	ДополнительныеПараметры.Вставить("ИмяДокумента", ИмяДокумента);
	ДополнительныеПараметры.Вставить("СписокКонтрагентов", Истина);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения(
		"СоздатьДокументыОплатыПослеПолученияПараметров",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	ОткрытьФорму(
		"Обработка.ПомощникРаботыССамозанятыми.Форма.ФормаПараметры",
		ПараметрыФормы,
		ЭтотОбъект, , , ,
		ОповещениеОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументыОплатыПослеПолученияПараметров(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия <> Неопределено
		И РезультатЗакрытия <> КодВозвратаДиалога.Отмена Тогда
		
		ЗамерПроизводительности = ОценкаПроизводительностиКлиент.НачатьЗамерДлительнойОперации(
			ДополнительныеПараметры.КлючеваяОперация);
		
		ПараметрыПроцедуры = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(РезультатЗакрытия, Ложь); // Структура
		ПараметрыПроцедуры.Вставить("ИмяДокумента", ДополнительныеПараметры.ИмяДокумента);
		ПараметрыПроцедуры.Вставить("СписокКонтрагентов", ДополнительныеПараметры.СписокКонтрагентов);
		ПараметрыПроцедуры.Вставить("Организация", Объект.Организация);
		ПараметрыПроцедуры.Вставить("Валюта", Валюта);
		ПараметрыПроцедуры.Вставить("ЗамерПроизводительности", ЗамерПроизводительности);
		
		ФоновоеЗадание = ЗаданиеСозданияДокументовОплаты(
			"Обработки.ПомощникРаботыССамозанятыми.СоздатьДокументыОплаты",
			ПараметрыПроцедуры);
		
		ОжидатьЗавершенияФоновогоЗадания(ФоновоеЗадание, ЗамерПроизводительности, Ложь);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЗаданиеСозданияДокументовОплаты(ИмяПроцедуры, Знач ПараметрыПроцедуры)

	Отбор = Новый Структура;
	Отбор.Вставить("Отметка", Истина);
	ТаблицаВыбранныхСтрок = Объект.ДокументыОплаты.Выгрузить(Отбор);
	
	ПараметрыПроцедуры.Вставить("ТаблицаДанных", ТаблицаВыбранныхСтрок);
	
	ФоновоеЗадание = ЗаданиеСозданияДокументов(ИмяПроцедуры, ПараметрыПроцедуры);
	
	Возврат ФоновоеЗадание;

КонецФункции

&НаСервере
Процедура ЗаполнитьДокументыОплаты(СписокДокументов)

	Если СписокДокументов.Количество() <> 0 Тогда
		
		Для Каждого КлючИЗначение Из СписокДокументов Цикл
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ИдентификаторСтроки", КлючИЗначение.Ключ);
			
			СтрокиТаблицы = Объект.ДокументыОплаты.НайтиСтроки(ПараметрыОтбора);
			
			Если СтрокиТаблицы.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТаблицы = СтрокиТаблицы[0];
			СтрокаТаблицы.ДокументОплаты = КлючИЗначение.Значение;
			СведенияПоДокументу = Новый Структура("СписокКонтрагентов, Проведен, РасшифровкаПлатежа");
			
			ЗаполнитьЗначенияСвойств(СведенияПоДокументу, СтрокаТаблицы.ДокументОплаты);
			СтрокаТаблицы.Состояние = ?(СведенияПоДокументу.Проведен, 1, 0);
			СтрокаТаблицы.Отметка = Ложь;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОформлениеПриобретений

&НаКлиенте
Процедура ОформитьПоступленияПослеПроверки(Результат, ДополнительныеПараметры) Экспорт

	ОформитьПоступленияНаСервере();

КонецПроцедуры

&НаСервере
Процедура ОформитьПоступленияНаСервере()

	Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.СтраницаОформленияПоступлений;
	ИзменитьЦветКоманды();
	
	ЗаполнитьТаблицуОформленияПоступлений();

КонецПроцедуры

&НаКлиенте
Процедура СоздатьПриобретениеТоваровУслугПослеПроверки(Результат, ДополнительныеПараметры) Экспорт

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипДокумента", 0);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить(
		"КлючеваяОперация",
		"Обработка.ПомощникРаботыССамозанятыми.Форма.СоздатьПриобретениеТоваровУслуг");
	ДополнительныеПараметры.Вставить("ИмяДокумента", "ПриобретениеТоваровУслуг");
	ДополнительныеПараметры.Вставить("ИмяТабличнойЧасти", "Товары");
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения(
		"СоздатьДокументыПриобретенияПослеПолученияПараметров",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	ОткрытьФорму(
		"Обработка.ПомощникРаботыССамозанятыми.Форма.ФормаПараметры",
		ПараметрыФормы,
		ЭтотОбъект, , , ,
		ОповещениеОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьПриобретениеУслугПрочихАктивовПослеПроверки(Результат, ДополнительныеПараметры) Экспорт

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипДокумента", 1);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить(
		"КлючеваяОперация",
		"Обработка.ПомощникРаботыССамозанятыми.Форма.СоздатьПриобретениеУслугПрочихАктивов");
	ДополнительныеПараметры.Вставить("ИмяДокумента", "ПриобретениеУслугПрочихАктивов");
	ДополнительныеПараметры.Вставить("ИмяТабличнойЧасти", "Расходы");
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения(
		"СоздатьДокументыПриобретенияПослеПолученияПараметров",
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	ОткрытьФорму(
		"Обработка.ПомощникРаботыССамозанятыми.Форма.ФормаПараметры",
		ПараметрыФормы,
		ЭтотОбъект, , , ,
		ОповещениеОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументыПриобретенияПослеПолученияПараметров(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия <> Неопределено
		И РезультатЗакрытия <> КодВозвратаДиалога.Отмена Тогда
		
		ЗамерПроизводительности = ОценкаПроизводительностиКлиент.НачатьЗамерДлительнойОперации(
			ДополнительныеПараметры.КлючеваяОперация);
		
		ПараметрыПроцедуры = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(РезультатЗакрытия, Ложь); // Структура
		ПараметрыПроцедуры.Вставить("ИмяДокумента", ДополнительныеПараметры.ИмяДокумента);
		ПараметрыПроцедуры.Вставить("ИмяТабличнойЧасти", ДополнительныеПараметры.ИмяТабличнойЧасти);
		ПараметрыПроцедуры.Вставить("Организация", Объект.Организация);
		ПараметрыПроцедуры.Вставить("Валюта", Валюта);
		ПараметрыПроцедуры.Вставить("ЗамерПроизводительности", ЗамерПроизводительности);
		
		ФоновоеЗадание = ЗаданиеСозданияДокументовПриобретения(
			"Обработки.ПомощникРаботыССамозанятыми.СоздатьДокументыПриобретения",
			ПараметрыПроцедуры);
		
		ОжидатьЗавершенияФоновогоЗадания(ФоновоеЗадание, ЗамерПроизводительности, Истина);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуОформленияПоступлений()

	Объект.ДокументыПриобретения.Очистить();
	
	ЗадолженностьПоставщика = ОстаткиПоОбъектамРасчетов(Истина);
	ОграничитьОстаткиЗадолженностиПоставщика(ЗадолженностьПоставщика);
	
	ИсходныеДанные = Новый Структура;
	ИсходныеДанные.Вставить("ТаблицаОстатков", ЗадолженностьПоставщика);
	
	ДобавитьСтрокиВДокументыПриобретения(ИсходныеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуЧекаСамозанятого(Источник)

	Чек = Новый Структура;
	Чек.Вставить("СсылкаНаЧек", Источник.СсылкаНаЧек);
	Чек.Вставить("НомерЧека", Источник.НомерЧека);
	Чек.Вставить("ЧекСамозанятого", Источник.ЧекСамозанятого);
	Чек.Вставить("ФайлЧека", Неопределено);
	Чек.Вставить("ДокументВладелец", Неопределено);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущиеДанные", Источник);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытиеФормыЧекаСамозанятогоЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(Чек, Ложь);
	
	ОткрытьФорму("ОбщаяФорма.ФормаЧекаСамозанятого", 
		ПараметрыФормы, , , , ,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытиеФормыЧекаСамозанятогоЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Или Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, Результат);
	
КонецПроцедуры

#Область ЗагрузитьЧекиИзФайла

&НаКлиенте
Процедура ЗагрузитьЧекиСамозанятыхИзФайлаПослеПроверки(Результат, ДополнительныеПараметры) Экспорт

	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗагрузитьЧекиСамозанятыхИзФайлаЗагрузка", ЭтотОбъект);
	СообщитьОНаличииЗаписейВСпискеСамозанятых(ОповещениеОЗавершении, "ДокументыПриобретения");

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЧекиСамозанятыхИзФайлаЗагрузка(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ДокументыПриобретения.Очистить();
	
	ПараметрыЗагрузки = ЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
	ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "Обработка.ПомощникРаботыССамозанятыми.ДокументыПриобретения";
	ПараметрыЗагрузки.Заголовок = НСтр("ru = 'Загрузка чеков самозанятых'");
	ПараметрыЗагрузки.КолонкиМакета = ОписаниеКолонокМакетаДляЗагрузкиЧеков();
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Организация", Объект.Организация);
	ДополнительныеПараметры.Вставить("Валюта", Валюта);
	ДополнительныеПараметры.Вставить("РежимЗагрузки", 1);
	ПараметрыЗагрузки.ДополнительныеПараметры = ДополнительныеПараметры;
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузкаЧековИзФайлаЗавершение", ЭтотОбъект);
	ЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки, Оповещение);

КонецПроцедуры

&НаКлиенте
Функция ОписаниеКолонокМакетаДляЗагрузкиЧеков()

	СписокКолонок = Новый Массив;
	
	НоваяКолонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета(
		"Фамилия",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(50)),
		НСтр("ru = 'Фамилия'"),
		15);
	НоваяКолонка.Позиция = 1;
	СписокКолонок.Добавить(НоваяКолонка);
	
	НоваяКолонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета(
		"Имя",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(50)),
		НСтр("ru = 'Имя'"),
		15);
	НоваяКолонка.Позиция = 2;
	СписокКолонок.Добавить(НоваяКолонка);
	
	НоваяКолонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета(
		"Отчество",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(50)),
		НСтр("ru = 'Отчество'"),
		15);
	НоваяКолонка.Позиция = 3;
	СписокКолонок.Добавить(НоваяКолонка);
	
	НоваяКолонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета(
		"ИНН",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(12)),
		НСтр("ru = 'ИНН'"),
		15,
		НСтр("ru='Идентификационный номер налогоплательщика.'"));
	НоваяКолонка.Позиция = 4;
	НоваяКолонка.ОбязательнаДляЗаполнения = Истина;
	СписокКолонок.Добавить(НоваяКолонка);
	
	НоваяКолонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета(
		"Сумма",
		ТипДенежнаяСуммаНеотрицательная,
		НСтр("ru = 'Сумма'"),
		15);
	НоваяКолонка.Позиция = 5;
	СписокКолонок.Добавить(НоваяКолонка);
	
	НоваяКолонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета(
		"СсылкаНаЧек",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)),
		НСтр("ru = 'Ссылка на чек'"),
		25,
		НСтр("ru='Ссылка на чек на сайте ФНС.'"));
	НоваяКолонка.Позиция = 6;
	СписокКолонок.Добавить(НоваяКолонка);
	
	НоваяКолонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета(
		"БанковскийСчет",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)),
		НСтр("ru = 'Банковский счет'"),
		20);
	НоваяКолонка.Позиция = 7;
	СписокКолонок.Добавить(НоваяКолонка);
	
	НоваяКолонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета(
		"ФИО",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)),
		НСтр("ru = 'Фамилия, имя и отчество владельца счета-получателя денежных средств'"),
		50);
	НоваяКолонка.Позиция = 8;
	НоваяКолонка.Родитель = "Контрагент";
	СписокКолонок.Добавить(НоваяКолонка);
	
	НоваяКолонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета(
		"Статус",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(25)),
		НСтр("ru = 'Статус регистрации дохода в ФНС'"),
		20);
	НоваяКолонка.Позиция = 9;
	СписокКолонок.Добавить(НоваяКолонка);
	
	НоваяКолонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета(
		"НомерСчета",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(20)),
		НСтр("ru = 'Номер счета физического лица'"),
		20);
	НоваяКолонка.Позиция = 10;
	СписокКолонок.Добавить(НоваяКолонка);
	
	Возврат СписокКолонок;

КонецФункции

&НаКлиенте
Процедура ЗагрузкаЧековИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт

	Если АдресЗагруженныхДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЧекамиСамозанятыхИзФайла(АдресЗагруженныхДанных);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЧекамиСамозанятыхИзФайла(АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	Если ЗагруженныеДанные.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Нет данных для загрузки'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	ЗадолженностьПоставщика = ОстаткиПоОбъектамРасчетов(Истина);
	ОграничитьОстаткиЗадолженностиПоставщика(ЗадолженностьПоставщика);
	
	Для Каждого СтрокаДанных Из ЗагруженныеДанные Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Контрагент", СтрокаДанных.Контрагент);
		
		НайденныеСтроки = ЗадолженностьПоставщика.НайтиСтроки(ПараметрыОтбора);
		
		Для Каждого СтрокаТаблицыОстатков Из НайденныеСтроки Цикл
			
			Если СтрокаТаблицыОстатков.Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Объект.ДокументыПриобретения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
			НоваяСтрока.Состояние = 4;
			НоваяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор;
			
			Если СтрокаДанных.Сумма > СтрокаТаблицыОстатков.Сумма Тогда
				
				НоваяСтрока.ОбъектРасчетов = СтрокаТаблицыОстатков.ОбъектРасчетов;
				НоваяСтрока.Договор = СтрокаТаблицыОстатков.Договор;
				НоваяСтрока.Сумма = СтрокаТаблицыОстатков.Сумма;
				СтрокаДанных.Сумма = СтрокаДанных.Сумма - СтрокаТаблицыОстатков.Сумма;
				СтрокаТаблицыОстатков.Сумма = 0;
				
			Иначе
				
				НоваяСтрока.ОбъектРасчетов = СтрокаТаблицыОстатков.Объект;
				НоваяСтрока.Сумма = СтрокаДанных.Сумма;
				НоваяСтрока.Договор = СтрокаТаблицыОстатков.Договор;
				СтрокаТаблицыОстатков.Сумма = СтрокаТаблицыОстатков.Сумма - СтрокаДанных.Сумма;
				СтрокаДанных.Сумма = 0;
				
			КонецЕсли;
			
			ЗаполнитьСведенияОЧеке(СтрокаДанных, НоваяСтрока);
			
			Если СтрокаДанных.Сумма = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если СтрокаДанных.Сумма > 0 Тогда
			
			НоваяСтрока = Объект.ДокументыПриобретения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
			НоваяСтрока.Состояние = 4;
			НоваяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор;
			ЗаполнитьСведенияОЧеке(СтрокаДанных, НоваяСтрока);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОЧеке(ДанныеЧека, СтрокаТаблицы)

	НомерЧека = ДенежныеСредстваСерверЛокализация.НомерЧекаИзСсылки(ДанныеЧека.СсылкаНаЧек);
	
	Если НомерЧека = "" Тогда
		
		СтрокаТаблицы.ЗагрузитьЧекСамозанятого = НСтр("ru='Загрузить'");
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Не корректная ссылка на чек самозанятого: %1.'"), ДанныеЧека.СсылкаНаЧек);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Загрузка чеков самозанятых из файла'"), УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		Возврат;
		
	КонецЕсли;
	
	СтрокаТаблицы.НомерЧека = НомерЧека;
	СтрокаТаблицы.СсылкаНаЧек = ДанныеЧека.СсылкаНаЧек;

КонецПроцедуры

#КонецОбласти

#Область ЗаполнитьСписокПриобретенийПоОстаткамРасчетов

&НаКлиенте
Процедура ЗаполнитьСписокПриобретенийПоОстаткамРасчетовПослеПроверки(Результат, ДополнительныеПараметры) Экспорт

	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗаполнитьСписокПриобретенийПоОстаткамРасчетовЗавершение", ЭтотОбъект);
	СообщитьОНаличииЗаписейВСпискеСамозанятых(ОповещениеОЗавершении, "ДокументыПриобретения");

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокПриобретенийПоОстаткамРасчетовЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТаблицуОформленияПоступлений();

КонецПроцедуры

#КонецОбласти

#Область ЗаполнитьСписокПриобретенийПоПрошломуМесяцу

&НаКлиенте
Процедура ЗаполнитьСписокПриобретенийПоПрошломуМесяцуПослеПроверки(Результат, ДополнительныеПараметры) Экспорт

	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗаполнитьСписокПриобретенийПоПрошломуМесяцуЗавершение", ЭтотОбъект);
	СообщитьОНаличииЗаписейВСпискеСамозанятых(ОповещениеОЗавершении, "ДокументыПриобретения");

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокПриобретенийПоПрошломуМесяцуЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ДокументыПриобретения.Очистить();
	
	ЗаполнитьСписокПриобретенийПоПрошломуМесяцуНаСервере();
	
	Если СписокДокументовПрошлогоПериода.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Документов приобретений по самозанятым за прошлый месяц не обнаружено.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	Иначе
	
		МассивТипов = Новый Массив;
		
		Если ЕстьПравоПросмотраПриобретенияТоваровУслуг Тогда
			МассивТипов.Добавить(Тип("ДокументСсылка.ПриобретениеТоваровУслуг"));
		КонецЕсли;
		
		Если ЕстьПравоПросмотраПриобретенияУслугПрочихАктивов Тогда
			МассивТипов.Добавить(Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов"));
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Представление", НСтр("ru = 'Документы прошлого месяца'"));
		ПараметрыФормы.Вставить("ОграничиватьВыборУказаннымиЗначениями", Истина);
		ПараметрыФормы.Вставить("ЗначенияДляВыбора", СписокДокументовПрошлогоПериода);
		ПараметрыФормы.Вставить("ОписаниеТипов", Новый ОписаниеТипов(МассивТипов));
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПослеВыбораДокументовПриобретенийПрошлогоПериода", ЭтотОбъект);
		
		ОткрытьФорму(
			"ОбщаяФорма.ВводЗначенийСпискомСФлажками",
			ПараметрыФормы,
			ЭтотОбъект, , , ,
			ОповещениеОЗакрытии,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокПриобретенийПоПрошломуМесяцуНаСервере()

	ТекстыЗапросов = Новый Массив;
	
	Если ЕстьПравоПросмотраПриобретенияТоваровУслуг Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПриобретениеТоваровУслуг.Ссылка КАК Документ,
		|	ПриобретениеТоваровУслуг.Контрагент КАК Контрагент,
		|	ПриобретениеТоваровУслуг.Партнер КАК Партнер,
		|	ПриобретениеТоваровУслуг.Договор КАК Договор,
		|	ПриобретениеТоваровУслуг.СуммаДокумента КАК Сумма,
		|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетов,
		|	4 КАК Состояние
		|ИЗ
		|	Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|		ПО ПриобретениеТоваровУслуг.Договор = ОбъектыРасчетов.Объект
		|			И НЕ ОбъектыРасчетов.ПометкаУдаления
		|ГДЕ
		|	ПриобретениеТоваровУслуг.ХозяйственнаяОперация В(&ХозяйственнаяОперация)
		|	И ПриобретениеТоваровУслуг.Проведен
		|	И ПриобретениеТоваровУслуг.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И ПриобретениеТоваровУслуг.Организация = &Организация
		|	И ПриобретениеТоваровУслуг.ОперацияССамозанятым";
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
	КонецЕсли;
	
	Если ЕстьПравоПросмотраПриобретенияУслугПрочихАктивов Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПриобретениеУслугПрочихАктивов.Ссылка КАК Документ,
		|	ПриобретениеУслугПрочихАктивов.Контрагент КАК Контрагент,
		|	ПриобретениеУслугПрочихАктивов.Партнер КАК Партнер,
		|	ПриобретениеУслугПрочихАктивов.Договор КАК Договор,
		|	ПриобретениеУслугПрочихАктивов.СуммаДокумента КАК Сумма,
		|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетов,
		|	4 КАК Состояние
		|ИЗ
		|	Документ.ПриобретениеУслугПрочихАктивов КАК ПриобретениеУслугПрочихАктивов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|		ПО ПриобретениеУслугПрочихАктивов.Договор = ОбъектыРасчетов.Объект
		|			И НЕ ОбъектыРасчетов.ПометкаУдаления
		|ГДЕ
		|	ПриобретениеУслугПрочихАктивов.ХозяйственнаяОперация В(&ХозяйственнаяОперация)
		|	И ПриобретениеУслугПрочихАктивов.Проведен
		|	И ПриобретениеУслугПрочихАктивов.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И ПриобретениеУслугПрочихАктивов.Организация = &Организация
		|	И ПриобретениеУслугПрочихАктивов.ОперацияССамозанятым";
		
		Если ТекстыЗапросов.Количество() > 0 Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РАЗРЕШЕННЫЕ", "");
		КонецЕсли;
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
	КонецЕсли;
	
	ОбъединенныйТекстЗапроса = СтрСоединить(ТекстыЗапросов, Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ОбъединенныйТекстЗапроса;
	
	ДеньПрошлогоМесяца = ДобавитьМесяц(ТекущаяДатаСеанса(), -1);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(ДеньПрошлогоМесяца));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(ДеньПрошлогоМесяца));
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	СписокХозяйственныхОпераций = ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", СписокХозяйственныхОпераций);
	
	Результат = Запрос.Выполнить().Выгрузить();
	ДанныеКонтрагентовПоДокументамПрошлогоПериода.Загрузить(Результат);
	
	СписокДокументовПрошлогоПериода.ЗагрузитьЗначения(Результат.ВыгрузитьКолонку("Документ"));

КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораДокументовПриобретенийПрошлогоПериода(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> Неопределено Тогда
		ЗаполнитьСписокПоВыбраннымДокументамПрошлогоМесяца(Результат, "ДокументыПриобретения");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Прочее

&НаСервере
Функция СвязьСтраницСКомандами()

	Связь = Новый Соответствие;
	Связь.Вставить(Элементы.СтраницаОформленияПоступлений, Элементы.ОформитьПоступления);
	Связь.Вставить(Элементы.СтраницаОформленияОплаты, Элементы.ОформитьОплату);
	
	Возврат Связь;

КонецФункции

&НаСервере
Процедура ПартнерПриИзменении(ТекущаяСтрокаТаблицы)

	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(
		ТекущаяСтрокаТаблицы.Партнер, ТекущаяСтрокаТаблицы.Контрагент);
	
	Если ЗначениеЗаполнено(ТекущаяСтрокаТаблицы.Контрагент) Тогда
		
		ВидКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ТекущаяСтрокаТаблицы.Контрагент, "ЮридическоеФизическоеЛицо");
		
		Если ВидКонтрагента <> Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			ТекущаяСтрокаТаблицы.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	
	КонтрагентПриИзменении(ТекущаяСтрокаТаблицы);

КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзменении(ТекущаяСтрокаТаблицы)

	ПараметрыОтбора = НовыйПараметрыОтбораДоговора();
	ПараметрыОтбора.Организация = Объект.Организация;
	ПараметрыОтбора.Валюта = Валюта;
	ПараметрыОтбора.Контрагент = ТекущаяСтрокаТаблицы.Контрагент;
	ПараметрыОтбора.Партнер = ТекущаяСтрокаТаблицы.Партнер;
	ПараметрыОтбора.БанковскийСчетКонтрагента = Неопределено;
	ПараметрыОтбора.БанковскийСчетОрганизации = Неопределено;
	
	ТекущаяСтрокаТаблицы.Договор = ДоговорПоУмолчанию(ПараметрыОтбора);
	
	ЗаполнитьБанковскийСчет(
		ТекущаяСтрокаТаблицы.БанковскийСчетКонтрагента,
		ТекущаяСтрокаТаблицы.БанковскийСчетОрганизации,
		ТекущаяСтрокаТаблицы.Договор,
		ТекущаяСтрокаТаблицы.Контрагент);
	
	Если ЗначениеЗаполнено(ТекущаяСтрокаТаблицы.Договор) Тогда
		
		ТекущаяСтрокаТаблицы.ОбъектРасчетов = ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(
			ТекущаяСтрокаТаблицы.Договор);
		ТекущаяСтрокаТаблицы.СтатьяДвиженияДенежныхСредств = 
			ДенежныеСредстваСервер.СтатьяДвиженияДенежныхСредствОбъектаРасчетов(
				ТекущаяСтрокаТаблицы.ОбъектРасчетов, Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущаяСтрокаТаблицы.ДатаПлатежа) Тогда
		ТекущаяСтрокаТаблицы.ДатаПлатежа = ТекущаяДатаСеанса();
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ДоговорПоУмолчанию(Отбор)

	СписокПартнеров = Новый СписокЗначений;
	ПартнерыИКонтрагенты.ЗаполнитьСписокПартнераСРодителями(Отбор.Партнер, СписокПартнеров);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	НЕ ДоговорыКонтрагентов.ПометкаУдаления
		|	И ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
		|	И ДоговорыКонтрагентов.Партнер В(&СписокПартнеров)
		|	И ДоговорыКонтрагентов.Контрагент = &Контрагент
		|	И ДоговорыКонтрагентов.Организация = &Организация
		|	И ДоговорыКонтрагентов.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика)
		|	И (&ВалютаВзаиморасчетов = НЕОПРЕДЕЛЕНО
		|			ИЛИ ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов)
		|	И НЕ ДоговорыКонтрагентов.УчетАгентскогоНДС
		|	И ДоговорыКонтрагентов.ДоговорССамозанятым
		|	И &ОтборБанковскийСчетКонтрагента
		|	И &ОтборБанковскийСчетОрганизации
		|";
	
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ?(ЗначениеЗаполнено(Отбор.Валюта), Отбор.Валюта, Неопределено));
	Запрос.УстановитьПараметр("Контрагент", Отбор.Контрагент);
	Запрос.УстановитьПараметр("Организация", Отбор.Организация);
	Запрос.УстановитьПараметр("СписокПартнеров", СписокПартнеров);
	
	Если Отбор.БанковскийСчетОрганизации = Неопределено Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборБанковскийСчетОрганизации", "&БанковскийСчетОрганизации = НЕОПРЕДЕЛЕНО");
		Запрос.УстановитьПараметр("БанковскийСчетОрганизации", Отбор.БанковскийСчетОрганизации);
		
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборБанковскийСчетОрганизации", "ДоговорыКонтрагентов.БанковскийСчет В (&БанковскийСчетОрганизации)");
		ПустаяСсылка = Справочники.БанковскиеСчетаОрганизаций.ПустаяСсылка();
		СчетаОрганизации = СписокСчетовДляОтбора(ПустаяСсылка, Отбор.БанковскийСчетОрганизации);
		Запрос.УстановитьПараметр("БанковскийСчетОрганизации", СчетаОрганизации);
		
	КонецЕсли;
	
	Если Отбор.БанковскийСчетКонтрагента = Неопределено Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборБанковскийСчетКонтрагента", "&БанковскийСчетКонтрагента = НЕОПРЕДЕЛЕНО");
		Запрос.УстановитьПараметр("БанковскийСчетКонтрагента", Отбор.БанковскийСчетКонтрагента);
		
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборБанковскийСчетКонтрагента", "ДоговорыКонтрагентов.БанковскийСчетКонтрагента В (&БанковскийСчетКонтрагента)");
		ПустаяСсылка = Справочники.БанковскиеСчетаКонтрагентов.ПустаяСсылка();
		СчетаКонтрагента = СписокСчетовДляОтбора(ПустаяСсылка, Отбор.БанковскийСчетКонтрагента);
		Запрос.УстановитьПараметр("БанковскийСчетКонтрагента", СчетаКонтрагента);
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;

КонецФункции

&НаСервере
Процедура ЗаполнитьБанковскийСчет(БанковскийСчетКонтрагента, БанковскийСчетОрганизации, Договор, Контрагент)

	Если ЗначениеЗаполнено(Договор) Тогда
		Справочники.ДоговорыКонтрагентов.ЗаполнитьБанковскиеСчетаПоДоговору(
			Договор, БанковскийСчетОрганизации, БанковскийСчетКонтрагента);
	Иначе
		БанковскийСчетКонтрагента = 
			Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(Контрагент, Валюта);
		
		Если Не ЗначениеЗаполнено(БанковскийСчетОрганизации) Тогда
			БанковскийСчетОрганизации = БанковскийСчет;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(БанковскийСчетКонтрагента) Тогда
		
		Владелец = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчетКонтрагента, "Владелец");
		
		Если Владелец <> Контрагент Тогда
			БанковскийСчетКонтрагента = Неопределено;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ОстаткиПоОбъектамРасчетов(ДебиторскаяЗадолженность)

	Реквизиты = Новый Структура;
	Реквизиты.Вставить("Дата", ТекущаяДатаСеанса());
	Реквизиты.Вставить("Организация", Объект.Организация);
	Реквизиты.Вставить("Валюта", Валюта);
	Реквизиты.Вставить("Партнер", Неопределено);
	Реквизиты.Вставить("Контрагент", Неопределено);
	Реквизиты.Вставить("ТипРасчетов", Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком);
	Реквизиты.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
	Реквизиты.Вставить("ПартнерПрочиеОтношения", Ложь);
	Реквизиты.Вставить("ПодборДебиторскойЗадолженности", ДебиторскаяЗадолженность);
	Реквизиты.Вставить("ПодборТолькоБезусловнойЗадолженности", Ложь);
	Реквизиты.Вставить("СуммаДокумента", 0);
	
	Отбор = Новый Соответствие;
	Отбор.Вставить("Контрагент.ЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	Отбор.Вставить("ОперацияССамозанятым", Истина);
	Отбор.Вставить("НалогообложениеНДС", Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС);
	
	АдресПлатежейВХранилище = "";
	ТаблицаОстатковРасчетов = Неопределено;
	
	ВзаиморасчетыСервер.ЗаполнитьТаблицуОстатковРасчетов(
		Реквизиты, АдресПлатежейВХранилище, ТаблицаОстатковРасчетов, Отбор);
	
	Возврат ТаблицаОстатковРасчетов;

КонецФункции

&НаКлиенте
Процедура СообщитьОНаличииЗаписейВСпискеСамозанятых(ОповещениеОЗавершении, ИмяТаблицы)

	Если Объект[ИмяТаблицы].Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru = 'Текущий список будет очищен, продолжить?'");
		ПоказатьВопрос(ОповещениеОЗавершении,
						ТекстВопроса,
						РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, КодВозвратаДиалога.Да);

КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокиВДокументыПриобретения(Данные)

	ОстаткиПоСамозанятому = Данные.ТаблицаОстатков.Скопировать();
	
	Для Каждого ТекущийОстаток Из ОстаткиПоСамозанятому Цикл
		
		Если ТекущийОстаток.ДолгПартнера > 0 Тогда
			
			НоваяСтрока = Объект.ДокументыПриобретения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущийОстаток);
			НоваяСтрока.Состояние = 4;
			НоваяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор;
			НоваяСтрока.ОбъектРасчетов = ТекущийОстаток.ОбъектРасчетов;
			НоваяСтрока.Сумма = ТекущийОстаток.ДолгПартнера;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеОрганизации(Оповещение)

	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ТекстСообщения = НСтр("ru = 'Поле ""Организация"" не заполнено.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.Организация");
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Оповещение);

КонецПроцедуры

&НаСервере
Функция ЗаданиеСозданияДокументовПриобретения(ИмяПроцедуры, Знач ПараметрыПроцедуры)

	ПараметрыПроцедуры.Вставить("ТаблицаДанных", Объект.ДокументыПриобретения.Выгрузить());
	
	ФоновоеЗадание = ЗаданиеСозданияДокументов(ИмяПроцедуры, ПараметрыПроцедуры);
	
	Возврат ФоновоеЗадание;

КонецФункции

&НаСервереБезКонтекста
Функция ЗаданиеСозданияДокументов(ИмяПроцедуры, ПараметрыПроцедуры)

	ПараметрыЗадания = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ФоновоеЗадание = ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыПроцедуры, ПараметрыЗадания);
	
	Возврат ФоновоеЗадание;

КонецФункции

&НаКлиенте
Процедура ОжидатьЗавершенияФоновогоЗадания(ФоновоеЗадание, ЗамерПроизводительности, ЗаполнитьТаблицуПриобретений)

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЗамерПроизводительности", ЗамерПроизводительности);
	ДополнительныеПараметры.Вставить("ЗаполнитьТаблицуПриобретений", ЗаполнитьТаблицуПриобретений);
	ОповещениеОЗавершении = Новый ОписаниеОповещения("СоздатьДокументыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, ОповещениеОЗавершении, ПараметрыОжидания);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументыЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат.Статус = "Выполнено" Тогда
		
		РезультатВыполнения = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		СписокДокументов = РезультатВыполнения.СозданныеДокументы;
		
		Если ДополнительныеПараметры.ЗаполнитьТаблицуПриобретений Тогда
			ВсегоСтрок = Объект.ДокументыПриобретения.Количество();
		Иначе
			
			СписокДокументовБезДублей = Новый Массив;
			
			Для Каждого КлючИЗначение Из СписокДокументов Цикл
				Если СписокДокументовБезДублей.Найти(КлючИЗначение.Значение) = Неопределено Тогда
					СписокДокументовБезДублей.Добавить(КлючИЗначение.Значение);
				КонецЕсли;
			КонецЦикла;
			
			ВсегоСтрок = СписокДокументовБезДублей.Количество();
			
		КонецЕсли;
		
		ОценкаПроизводительностиКлиент.ЗакончитьЗамерДлительнойОперации(
			РезультатВыполнения.ЗамерПроизводительности, ВсегоСтрок);
			
		Для Каждого СтрокаСообщения Из Результат.Сообщения Цикл
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения.Текст);
		КонецЦикла;
		
		Если ДополнительныеПараметры.ЗаполнитьТаблицуПриобретений Тогда
			ЗаполнитьДокументыПриобретения(СписокДокументов);
		Иначе
			ЗаполнитьДокументыОплаты(СписокДокументов);
		КонецЕсли;
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		
		ОценкаПроизводительностиКлиент.УстановитьПризнакОшибкиЗамера(
			ДополнительныеПараметры.ЗамерПроизводительности["УИДЗамера"], Ложь);
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.КраткоеПредставлениеОшибки);
		
	КонецЕсли;
	
	ТекстОповещения = НСтр("ru = 'Создание документов завершено.'");
	ПоказатьОповещениеПользователя(НСтр("ru = 'Операция завершена.'"), , ТекстОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСтрокиПередСозданиемДокументов(Оповещение)

	ОчиститьСообщения();
	
	Ошибка = Ложь;
	
	Если Объект.ДокументыПриобретения.Количество() = 0 Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Список на создание документов пуст.'"));
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , , , Ошибка);
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ДокументПриобретения", Неопределено);
	
	СтрокиДляОбработки = Объект.ДокументыПриобретения.НайтиСтроки(Отбор);
	
	Если СтрокиДляОбработки.Количество() = 0 Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'В списке уже имеются созданные документы.'"));
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , , , Ошибка);
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из Объект.ДокументыПриобретения Цикл
		
		Если СтрокаТаблицы.Сумма = 0 Тогда
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Поле ""Сумма"" не заполнено.'"));
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , , , Ошибка);
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не Ошибка Тогда
		ВыполнитьОбработкуОповещения(Оповещение);
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПоляЗаявкиЗаполнены(СтрокаДерева, ИспользуютсяЗаявки)

	Если ИспользуютсяЗаявки Тогда
		Заполнено = ЗначениеЗаполнено(СтрокаДерева.ДатаПлатежа)
					И ЗначениеЗаполнено(СтрокаДерева.БанковскийСчетКонтрагента);
	Иначе
		Заполнено = Ложь;
	КонецЕсли;
	
	Возврат Заполнено;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПоляСписанияЗаполнены(СтрокаДерева, ИспользуютсяЗаявки)

	Если ИспользуютсяЗаявки Тогда
		Заполнено = Ложь;
	Иначе
		Заполнено = ЗначениеЗаполнено(СтрокаДерева.БанковскийСчетОрганизации)
					И ЗначениеЗаполнено(СтрокаДерева.БанковскийСчетКонтрагента);
	КонецЕсли;
	
	Возврат Заполнено;

КонецФункции

&НаСервере
Процедура ЗаполнитьДокументыПриобретения(СписокДокументов)

	Если СписокДокументов.Количество() <> 0 Тогда
		
		Для Каждого КлючИЗначение Из СписокДокументов Цикл
		
			Отбор = Новый Структура("ИдентификаторСтроки", КлючИЗначение.Ключ);
			МассивСтрок = Объект.ДокументыПриобретения.НайтиСтроки(Отбор);
			
			Для Каждого СтрокаМассива Из МассивСтрок Цикл
				
				СтрокаМассива.ДокументПриобретения = КлючИЗначение.Значение;
				
				СведенияПоДокументу = Новый Структура("Проведен, СуммаДокумента");
				ЗаполнитьЗначенияСвойств(СведенияПоДокументу, СтрокаМассива.ДокументПриобретения);
				СтрокаМассива.Состояние = ?(СведенияПоДокументу.Проведен, 1, 0);
			
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОграничитьОстаткиЗадолженностиПоставщика(ОстаткиВзаиморасчетов)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	*
		|ПОМЕСТИТЬ ОстаткиЗадолженности
		|ИЗ
		|	&ОстаткиВзаиморасчетов КАК ОстаткиВзаиморасчетов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиЗадолженности.*,
		|	ОбъектыРасчетов.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	ОбъектыРасчетов.Объект КАК Объект
		|ПОМЕСТИТЬ ОстаткиПоОбъектамРасчетов
		|ИЗ
		|	ОстаткиЗадолженности КАК ОстаткиЗадолженности
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|		ПО ОстаткиЗадолженности.ОбъектРасчетов = ОбъектыРасчетов.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОстаткиПоОбъектамРасчетов.*
		|ИЗ
		|	ОстаткиПоОбъектамРасчетов КАК ОстаткиПоОбъектамРасчетов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеБезналичныхДенежныхСредств
		|		ПО ОстаткиПоОбъектамРасчетов.Объект = СписаниеБезналичныхДенежныхСредств.Ссылка
		|ГДЕ
		|	СписаниеБезналичныхДенежныхСредств.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику)
		|	И СписаниеБезналичныхДенежныхСредств.ОперацияССамозанятым
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОстаткиПоОбъектамРасчетов.*
		|ИЗ
		|	ОстаткиПоОбъектамРасчетов КАК ОстаткиПоОбъектамРасчетов
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(ОстаткиПоОбъектамРасчетов.Объект) <> ТИП(Документ.СписаниеБезналичныхДенежныхСредств)";
	
	Запрос.УстановитьПараметр("ОстаткиВзаиморасчетов", ОстаткиВзаиморасчетов);
	УстановитьПривилегированныйРежим(Истина);
	ОстаткиВзаиморасчетов = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Запрос.МенеджерВременныхТаблиц <> Неопределено Тогда
		ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(Запрос.МенеджерВременныхТаблиц);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДополнитьОстаткиЗадолженностиДаннымиНаОплату(ИсходнаяТаблица)

	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ВзаиморасчетыСервер.РассчитатьОперативныеДатыПлатежаПоставщика(МенеджерВременныхТаблиц, ТекущаяДатаСеанса());
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ОстаткиВзаиморасчетов", ИсходнаяТаблица);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОстаткиОплаты.Сумма КАК Сумма,
		|	ОстаткиОплаты.ВалютаДокумента КАК ВалютаДокумента,
		|	ОстаткиОплаты.ОбъектРасчетов КАК ОбъектРасчетов,
		|	ОстаткиОплаты.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ОстаткиОплаты.ВариантКурсаДоговора КАК ВариантКурсаДоговора,
		|	ОстаткиОплаты.Организация КАК Организация,
		|	ОстаткиОплаты.Партнер КАК Партнер,
		|	ОстаткиОплаты.Контрагент КАК Контрагент,
		|	ОстаткиОплаты.Договор КАК Договор,
		|	ОстаткиОплаты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	ОстаткиОплаты.КОплате КАК КОплате
		|ПОМЕСТИТЬ ОстаткиОплаты
		|ИЗ
		|	&ОстаткиВзаиморасчетов КАК ОстаткиОплаты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОстаткиОплаты.Организация КАК Организация,
		|	ОстаткиОплаты.Партнер КАК Партнер,
		|	ОстаткиОплаты.Контрагент КАК Контрагент,
		|	ОстаткиОплаты.Договор КАК Договор,
		|	ОстаткиОплаты.Сумма КАК Сумма,
		|	ОстаткиОплаты.ВалютаДокумента КАК ВалютаДокумента,
		|	ОстаткиОплаты.ОбъектРасчетов КАК ОбъектРасчетов,
		|	ОстаткиОплаты.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ОстаткиОплаты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	ОстаткиОплаты.ВариантКурсаДоговора КАК ВариантКурсаДоговора,
		|	ОстаткиОплаты.КОплате КАК КОплате,
		|	ОбъектыРасчетов.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	ВЫБОР
		|		КОГДА ОбъектыРасчетов.БанковскийСчетОрганизации = ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)
		|			ТОГДА ДоговорыКонтрагентов.БанковскийСчет
		|		ИНАЧЕ ОбъектыРасчетов.БанковскийСчетОрганизации
		|	КОНЕЦ КАК БанковскийСчетОрганизации,
		|	ВЫБОР
		|		КОГДА ОбъектыРасчетов.БанковскийСчетКонтрагента = ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
		|			ТОГДА ЕСТЬNULL(ДоговорыКонтрагентов.БанковскийСчетКонтрагента, ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка))
		|		ИНАЧЕ ОбъектыРасчетов.БанковскийСчетКонтрагента
		|	КОНЕЦ КАК БанковскийСчетКонтрагента
		|ПОМЕСТИТЬ ОстаткиОплатыСДаннымиОбъектаРасчетов
		|ИЗ
		|	ОстаткиОплаты КАК ОстаткиОплаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|			ПО ОбъектыРасчетов.Договор = ДоговорыКонтрагентов.Ссылка
		|		ПО ОстаткиОплаты.ОбъектРасчетов = ОбъектыРасчетов.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОстаткиОплатыСДаннымиОбъектаРасчетов.Контрагент КАК Контрагент,
		|	ОстаткиОплатыСДаннымиОбъектаРасчетов.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
		|ПОМЕСТИТЬ ОтсутствуетБанковскийСчетКонтрагента
		|ИЗ
		|	ОстаткиОплатыСДаннымиОбъектаРасчетов КАК ОстаткиОплатыСДаннымиОбъектаРасчетов
		|ГДЕ
		|	ОстаткиОплатыСДаннымиОбъектаРасчетов.БанковскийСчетКонтрагента = ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	БанковскиеСчетаКонтрагентов.Ссылка КАК БанковскийСчетКонтрагента,
		|	ОтсутствуетБанковскийСчетКонтрагента.Контрагент КАК Контрагент,
		|	БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств
		|ПОМЕСТИТЬ БанковскиеСчетаКонтрагентов
		|ИЗ
		|	ОтсутствуетБанковскийСчетКонтрагента КАК ОтсутствуетБанковскийСчетКонтрагента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
		|		ПО (БанковскиеСчетаКонтрагентов.Владелец = ОтсутствуетБанковскийСчетКонтрагента.Контрагент)
		|			И (БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств = ОтсутствуетБанковскийСчетКонтрагента.ВалютаВзаиморасчетов)
		|ГДЕ
		|	НЕ БанковскиеСчетаКонтрагентов.ПометкаУдаления
		|	И НЕ БанковскиеСчетаКонтрагентов.Закрыт
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	БанковскиеСчетаКонтрагентов.Контрагент КАК Контрагент,
		|	БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств,
		|	КОЛИЧЕСТВО(БанковскиеСчетаКонтрагентов.БанковскийСчетКонтрагента) КАК КоличествоСчетов
		|ПОМЕСТИТЬ ЕдинственныеБанковскиеСчетаКонтрагентов
		|ИЗ
		|	БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
		|
		|СГРУППИРОВАТЬ ПО
		|	БанковскиеСчетаКонтрагентов.Контрагент,
		|	БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(БанковскиеСчетаКонтрагентов.БанковскийСчетКонтрагента) = 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	БанковскиеСчетаКонтрагентов.Контрагент КАК Контрагент,
		|	БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств,
		|	БанковскиеСчетаКонтрагентов.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента
		|ПОМЕСТИТЬ БанковскиеСчетаКонтрагентовПоУмолчанию
		|ИЗ
		|	ЕдинственныеБанковскиеСчетаКонтрагентов КАК ЕдинственныеБанковскиеСчетаКонтрагентов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
		|		ПО (ЕдинственныеБанковскиеСчетаКонтрагентов.Контрагент = БанковскиеСчетаКонтрагентов.Контрагент
		|				И ЕдинственныеБанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств = БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АналитикиУчетаПоПартнерам.Партнер КАК Партнер,
		|	АналитикиУчетаПоПартнерам.Организация КАК Организация,
		|	АналитикиУчетаПоПартнерам.Контрагент КАК Контрагент,
		|	АналитикиУчетаПоПартнерам.Договор КАК Договор,
		|	ТаблицаОстатковПоставщиков.ЗаказПоставщику КАК ЗаказПоставщику,
		|	ТаблицаОстатковПоставщиков.Объект КАК Объект,
		|	ТаблицаОстатковПоставщиков.Валюта КАК Валюта,
		|	ТаблицаОстатковПоставщиков.ДатаПлатежа КАК ДатаПлатежа,
		|	АналитикиУчетаПоПартнерам.НаправлениеДеятельности КАК НаправлениеДеятельности
		|ПОМЕСТИТЬ ДатыПлатежаПоставщиков
		|ИЗ
		|	ТаблицаОстатковПоставщиковКОплате КАК ТаблицаОстатковПоставщиков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикиУчетаПоПартнерам
		|		ПО ТаблицаОстатковПоставщиков.АналитикаУчетаПоПартнерам = АналитикиУчетаПоПартнерам.КлючАналитики
		|ГДЕ
		|	ТаблицаОстатковПоставщиков.КОплатеОстатокНаКонецПериода < 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиОплаты.Организация КАК Организация,
		|	ОстаткиОплаты.БанковскийСчетОрганизации КАК БанковскийСчетОрганизации,
		|	ОстаткиОплаты.Партнер КАК Партнер,
		|	ОстаткиОплаты.Контрагент КАК Контрагент,
		|	ОстаткиОплаты.Договор КАК Договор,
		|	ВЫБОР
		|		КОГДА ОстаткиОплаты.БанковскийСчетКонтрагента = ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
		|			ТОГДА БанковскиеСчетаКонтрагентовПоУмолчанию.БанковскийСчетКонтрагента
		|		ИНАЧЕ ОстаткиОплаты.БанковскийСчетКонтрагента
		|	КОНЕЦ КАК БанковскийСчетКонтрагента,
		|	ОстаткиОплаты.ОбъектРасчетов КАК ОбъектРасчетов,
		|	ОстаткиОплаты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	ОстаткиОплаты.ВалютаДокумента КАК ВалютаДокумента,
		|	ОстаткиОплаты.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ОстаткиОплаты.ВариантКурсаДоговора КАК ВариантКурсаДоговора,
		|	ОстаткиОплаты.Сумма КАК Сумма,
		|	ОстаткиОплаты.КОплате КАК КОплате,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ДатыПлатежаПоставщиков.ДатаПлатежа < &ТекущаяДата
		|				ТОГДА &ТекущаяДата
		|			ИНАЧЕ ДатыПлатежаПоставщиков.ДатаПлатежа
		|		КОНЕЦ, &ТекущаяДата) КАК ДатаПлатежа
		|ИЗ
		|	ОстаткиОплатыСДаннымиОбъектаРасчетов КАК ОстаткиОплаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДатыПлатежаПоставщиков КАК ДатыПлатежаПоставщиков
		|		ПО ОстаткиОплаты.Партнер = ДатыПлатежаПоставщиков.Партнер
		|			И ОстаткиОплаты.Организация = ДатыПлатежаПоставщиков.Организация
		|			И ОстаткиОплаты.Контрагент = ДатыПлатежаПоставщиков.Контрагент
		|			И ОстаткиОплаты.ОбъектРасчетов = ДатыПлатежаПоставщиков.ЗаказПоставщику
		|			И ОстаткиОплаты.Договор = ДатыПлатежаПоставщиков.Договор
		|			И ОстаткиОплаты.ВалютаВзаиморасчетов = ДатыПлатежаПоставщиков.Валюта
		|			И ОстаткиОплаты.НаправлениеДеятельности = ДатыПлатежаПоставщиков.НаправлениеДеятельности
		|		ЛЕВОЕ СОЕДИНЕНИЕ БанковскиеСчетаКонтрагентовПоУмолчанию КАК БанковскиеСчетаКонтрагентовПоУмолчанию
		|		ПО ОстаткиОплаты.Контрагент = БанковскиеСчетаКонтрагентовПоУмолчанию.Контрагент
		|			И ОстаткиОплаты.ВалютаВзаиморасчетов = БанковскиеСчетаКонтрагентовПоУмолчанию.ВалютаДенежныхСредств";
	
	Запрос.УстановитьПараметр("ОстаткиВзаиморасчетов", ИсходнаяТаблица);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	ИсходнаяТаблица = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Запрос.МенеджерВременныхТаблиц <> Неопределено Тогда
		ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(Запрос.МенеджерВременныхТаблиц);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(ИмяПроцедуры)

	ОчиститьСообщения();
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения(ИмяПроцедуры, ЭтотОбъект);
	ПроверитьЗаполнениеОрганизации(ОповещениеОЗавершении);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокПоВыбраннымДокументамПрошлогоМесяца(СписокДокументов, ИмяТаблицы)

	МассивДокументов = ОбщегоНазначенияКлиентСервер.ОтмеченныеЭлементы(СписокДокументов);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	*
		|ПОМЕСТИТЬ ТаблицаДанных
		|ИЗ
		|	&ДанныеПрошлогоМесяца КАК ДанныеПрошлогоМесяца
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	*
		|ИЗ
		|	ТаблицаДанных КАК ТаблицаДанных
		|ГДЕ
		|	ТаблицаДанных.Документ В(&Документ)";
	
	Запрос.УстановитьПараметр("ДанныеПрошлогоМесяца", ДанныеКонтрагентовПоДокументамПрошлогоПериода.Выгрузить());
	Запрос.УстановитьПараметр("Документ", МассивДокументов);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	СписокКолонок = Новый Массив;
	
	Для Каждого Колонка Из Результат.Колонки Цикл
		Если Колонка.Имя <> "Сумма" Тогда
			СписокКолонок.Добавить(Колонка.Имя);
		КонецЕсли;
	КонецЦикла;
	
	СтрокаКолонок = СтрСоединить(СписокКолонок, ",");
	Результат.Свернуть(СтрокаКолонок, "Сумма");

	Объект[ИмяТаблицы].Загрузить(Результат);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСнятьОтметку(СтрокаТаблицы = Неопределено)

	Если СтрокаТаблицы = Неопределено Тогда
		СтрокаТаблицы = Элементы.ДокументыОплаты.ТекущиеДанные;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТаблицы.Контрагент)
		И ЗначениеЗаполнено(СтрокаТаблицы.Партнер)
		И (ПоляЗаявкиЗаполнены(СтрокаТаблицы, ИспользуютсяЗаявкиНаРасходованиеДенежныхСредств)
		ИЛИ ПоляСписанияЗаполнены(СтрокаТаблицы, ИспользуютсяЗаявкиНаРасходованиеДенежныхСредств))
		И СтрокаТаблицы.Сумма <> 0 Тогда
		СтрокаТаблицы.Отметка = Истина;
	Иначе
		СтрокаТаблицы.Отметка = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДокументОплаты(СтрокаТаблицы = Неопределено)

	Если СтрокаТаблицы = Неопределено Тогда
		СтрокаТаблицы = Элементы.ДокументыОплаты.ТекущиеДанные;
	КонецЕсли;
	
	СтрокаТаблицы.Состояние = 4;
	СтрокаТаблицы.ДокументОплаты = Неопределено;

КонецПроцедуры

&НаСервере
Процедура ОчиститьСвязанныеРеквизиты(СтрокаТаблицы, ИмяКолонки, ИмяРеквизита)

	Если ЗначениеЗаполнено(СтрокаТаблицы.ОбъектРасчетов) Тогда
		
		ЗначениеРеквизита = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.ОбъектРасчетов, ИмяКолонки);
		
		Если ЗначениеЗаполнено(ЗначениеРеквизита)
			И ЗначениеРеквизита <> СтрокаТаблицы[ИмяКолонки] Тогда
			СтрокаТаблицы.ОбъектРасчетов = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяКолонки <> "Договор"
		И ЗначениеЗаполнено(СтрокаТаблицы.Договор) Тогда
		
		ЗначениеРеквизита = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Договор, ИмяРеквизита);
		
		Если ЗначениеЗаполнено(ЗначениеРеквизита)
			И ЗначениеРеквизита <> СтрокаТаблицы[ИмяКолонки] Тогда
			СтрокаТаблицы.Договор = Неопределено;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаПоДоговору(СтрокаТаблицы, ДанныеДоговора)

	Если ЗначениеЗаполнено(ДанныеДоговора.БанковскийСчетКонтрагента) Тогда
		СтрокаТаблицы.БанковскийСчетКонтрагента = ДанныеДоговора.БанковскийСчетКонтрагента;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеДоговора.БанковскийСчетОрганизации) Тогда
		СтрокаТаблицы.БанковскийСчетОрганизации = ДанныеДоговора.БанковскийСчетОрганизации;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДоговорПриИзменении(СтрокаТаблицы)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоговорыКонтрагентов.БанковскийСчет КАК БанковскийСчетОрганизации,
		|	ДоговорыКонтрагентов.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
		|	ДоговорыКонтрагентов.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетов
		|ИЗ
		|	Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|ГДЕ
		|	ОбъектыРасчетов.Договор = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", СтрокаТаблицы.Договор);
	
	МассивЗапросов = Запрос.ВыполнитьПакет();
	
	ДанныеДоговора = МассивЗапросов[МассивЗапросов.ВГраница() - 1].Выбрать();
	ОбъектыРасчетов = МассивЗапросов[МассивЗапросов.ВГраница()].Выгрузить();

	Если ДанныеДоговора.Следующий() Тогда
		
		ЗаполнитьСчетаПоДоговору(СтрокаТаблицы, ДанныеДоговора);
		СтрокаТаблицы.СтатьяДвиженияДенежныхСредств = ДанныеДоговора.СтатьяДвиженияДенежныхСредств;
		
	КонецЕсли;
	
	Если ОбъектыРасчетов.Количество() = 1 Тогда
		
		СтрокаТаблицы.ОбъектРасчетов = ОбъектыРасчетов[0].ОбъектРасчетов;
		СтрокаТаблицы.СтатьяДвиженияДенежныхСредств = 
			ДенежныеСредстваСервер.СтатьяДвиженияДенежныхСредствОбъектаРасчетов(
				СтрокаТаблицы.ОбъектРасчетов, Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
		
	Конецесли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция НовыйПараметрыОтбораДоговора()

	Отбор = Новый Структура;
	Отбор.Вставить("Организация");
	Отбор.Вставить("Валюта");
	Отбор.Вставить("Контрагент");
	Отбор.Вставить("Партнер");
	Отбор.Вставить("БанковскийСчетКонтрагента");
	Отбор.Вставить("БанковскийСчетОрганизации");
	
	Возврат Отбор;

КонецФункции

&НаСервереБезКонтекста
Функция СписокСчетовДляОтбора(ПустоеЗначение, ОтбираемыйСчет)

	СписокСчетов = Новый Массив;
	СписокСчетов.Добавить(ПустоеЗначение);

	Если СписокСчетов.Найти(ОтбираемыйСчет) = Неопределено Тогда
		СписокСчетов.Добавить(ОтбираемыйСчет);
	КонецЕсли;
	
	Возврат СписокСчетов;

КонецФункции

#КонецОбласти

#КонецОбласти