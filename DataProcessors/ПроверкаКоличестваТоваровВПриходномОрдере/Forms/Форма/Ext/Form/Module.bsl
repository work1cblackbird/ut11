#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

&НаКлиенте
Перем ЗакрытьБезВопроса; //используется для отработки закрытия формы

&НаКлиенте
Перем ТекущиеДанныеИдентификатор; //используется для передачи текущей строки в обработчик ожидания

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Действия и состояния проверки используются в том числе и в условном оформлении
	Действия = Новый Структура;
	Действия.Вставить("НеПринимать",        НСтр("ru='Не принимать'"));
	Действия.Вставить("ПринятьБезПроверки", НСтр("ru='Принять без проверки'"));
	Действия.Вставить("ДобавитьВДокумент",     НСтр("ru='Добавить в документ'"));
	Действия.Вставить("УдалитьИзДокумента",    НСтр("ru='Удалить из документа'"));
	
	СостоянияПроверки = Новый Структура;
	СостоянияПроверки.Вставить("НеПроверен",        НСтр("ru='<не проверен>'"));
	СостоянияПроверки.Вставить("ПринятБезПроверки", НСтр("ru='<принят без проверки>'"));
	СостоянияПроверки.Вставить("Проверен",          НСтр("ru='<проверен>'"));
	
	УстановитьУсловноеОформление();
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Параметры.Свойство("АдресВоВременномХранилище") Или (Параметры.Свойство("СкладскаяОперация")
		И Не ЗначениеЗаполнено(Параметры.СкладскаяОперация)) Тогда
		
		ТекстИсключения = НСтр("ru='Не предусмотрено непосредственное открытие формы обработки.'");
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	АдресВоВременномХранилище = Параметры.АдресВоВременномХранилище;
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры,,
		"ЗакрыватьПриВыборе,ЗакрыватьПриЗакрытииВладельца,КлючНазначенияИспользования,ТолькоПросмотр");
	
	ЗаполнитьЗначенияСвойств(Объект, Параметры);
	УпаковочныйЛистРодитель = Параметры.УпаковочныйЛистРодитель;
	
	ИспользоватьАдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(Объект.Склад, Объект.Помещение, Объект.Дата);
	
	ТоварыИзХранилища = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	ТоварыИсходные.Загрузить(ТоварыИзХранилища);
	
	Если ЗначениеЗаполнено(УпаковочныйЛистРодитель) Тогда
		Объект.Ссылка = УпаковочныйЛистРодитель;
		УпаковочныеЛисты.Загрузить(
			ТоварыИсходные.Выгрузить(
				Новый Структура("ЭтоУпаковочныйЛист", Истина),
				"УпаковочныйЛистКод,УпаковочныйЛистДата,УпаковочныйЛист,УпаковочныйЛистРодитель"));
	Иначе
		Объект.Ссылка = Параметры.Ордер;
	КонецЕсли;
	
	ЗаголовокНачальногоУровня = Метаданные.Документы.ПриходныйОрдерНаТовары.ПредставлениеОбъекта;
	
	ЕстьМаркируемаяПродукция = Параметры.ЕстьМаркируемаяПродукция;
	УпаковочныеЛистыСервер.ПриЧтенииСозданииФормыСУпаковочнымиЛистами(ЭтаФорма, Объект.Товары, ЗаголовокНачальногоУровня, Ложь, УпаковочныйЛистРодитель);
	
	Если Не ИспользоватьУпаковочныеЛисты Тогда
		
		Элементы.ТоварыГруппаКоличествоСостояние.Заголовок            = НСтр("ru='Количество'");
		Элементы.ИзлишкиГруппаНоменклатураУпаковочныйЛист.Заголовок   = НСтр("ru='Товар'");
		Элементы.НедостачиГруппаНоменклатураУпаковочныйЛист.Заголовок = НСтр("ru='Товар'");
		Элементы.ГруппаВыделениеРасхождений.Отображение = ОтображениеОбычнойГруппы.Нет;
		
	КонецЕсли;
	
	Если Не Объект.СкладскаяОперация = Перечисления.СкладскиеОперации.ВозвратНепринятыхТоваров Тогда
		Элементы.ТоварыДокументОтгрузки.Видимость    = Ложь;
		Элементы.ИзлишкиДокументОтгрузки.Видимость   = Ложь;
		Элементы.НедостачиДокументОтгрузки.Видимость = Ложь;
	КонецЕсли;
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(Объект, Обработки.ПроверкаКоличестваТоваровВПриходномОрдере);
	Элементы.ТоварыСерия.Видимость =
		ЗначениеЗаполнено(ПараметрыУказанияСерий) И ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	
	СписокВыбора = Элементы.НепроверенныеУпаковочныеЛистыДействие.СписокВыбора;
	СписокВыбора.Очистить();
	// Значение действия по умолчанию не заполнено: если выбрано пустое значение (представление не пустое),
	//	то для отображения пустого значения используется условное оформление.
	СписокВыбора.Добавить("", Действия.ПринятьБезПроверки);
	СписокВыбора.Добавить(Действия.НеПринимать, Действия.НеПринимать);
	
	СписокВыбора = Элементы.ИзлишкиДействие.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("", Действия.НеПринимать);
	СписокВыбора.Добавить(Действия.ДобавитьВДокумент, Действия.ДобавитьВДокумент);
	
	СписокВыбора = Элементы.НедостачиДействие.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("", Действия.УдалитьИзДокумента);
	СписокВыбора.Добавить(Действия.ПринятьБезПроверки, Действия.ПринятьБезПроверки);
	
	Если ПраваПользователяПовтИсп.ЭтоПартнер() Тогда
		Элементы.ТоварыЗагрузитьДанныеИзТСД.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтаФорма, "СканерШтрихкода");
	
	ЗакрытьБезВопроса = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Не ЗакрытьБезВопроса
		И ЕстьРасхождения Тогда
		
		Отказ = Истина;
		
		Если ЗавершениеРаботы Тогда
			ТекстПредупреждения = НСтр("ru = 'Данные были изменены. Все изменения будут потеряны.'");
			Возврат;
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВопросаПередЗакрытием", ЭтаФорма);
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить(КодВозвратаДиалога.Да,НСтр("ru = 'Завершить'"));
		КнопкиВопроса.Добавить(КодВозвратаДиалога.Нет,НСтр("ru = 'Продолжить проверку'"));
		ПоказатьВопрос(ОписаниеОповещения,
			НСтр("ru = 'Завершить проверку без переноса расхождений в документ?'"), КнопкиВопроса);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		
		НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение);
		// Предварительный статус 11 может превратиться в статус 12, что для ордера некорректно, пересчитаем статус серии.
		Если ТекущиеДанные.СтатусУказанияСерий = 12 Тогда
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус",
				Новый Структура("Склад, ПараметрыУказанияСерий", Объект.Склад, ПараметрыУказанияСерий));
			ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
		КонецЕсли;
	
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.Номенклатура.Форма.ФормаВыбора" Тогда
		
		ТекущиеДанные.Номенклатура = ВыбранноеЗначение;
		НоменклатураУпаковочныйЛистПриИзменении("ТоварыНоменклатура", КэшированныеЗначения);
		Элементы.Товары.ТекущийЭлемент = Элементы.ТоварыКоличествоУпаковок;
		Элементы.Товары.ТекущийЭлемент = Элементы.ТоварыНоменклатура;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.УпаковочныйЛист.Форма.ФормаВыбора" Тогда
		
		ТекущиеДанные.УпаковочныйЛист = ВыбранноеЗначение;
		НоменклатураУпаковочныйЛистПриИзменении("ТоварыУпаковочныйЛист", КэшированныеЗначения);
		Элементы.Товары.ЗакончитьРедактированиеСтроки(Ложь);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ПриходныйОрдерНаТовары.Форма.ФормаВыбораДокументаОтгрузки" Тогда
		
		Модифицированность = Истина;
		ТекущиеДанные.ДокументОтгрузки = ВыбранноеЗначение;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.Назначения.Форма.ФормаВыбора" Тогда
		
		Элементы.Товары.ТекущиеДанные.Назначение = ВыбранноеЗначение;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияУТКлиент.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияУТКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	УпаковочныеЛистыКлиент.ПередНачаломДобавленияВТЧСУпаковочнымиЛистами(Элементы.Товары, Отказ, Копирование, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	УпаковочныеЛистыКлиент.ПриНачалеРедактированияТЧСУпаковочнымиЛистами(ЭтаФорма, КэшированныеЗначения, НоваяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	УпаковочныеЛистыКлиент.ПриОкончанииРедактированияТЧСУпаковочнымиЛистами(ЭтаФорма, НоваяСтрока, ОтменаРедактирования);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	УпаковочныеЛистыКлиент.ПередУдалениемСтрокТЧСУпаковочнымиЛистами(Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	ТоварыПослеУдаленияСервер(КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	УпаковочныеЛистыКлиент.НачалоВыбораТоварногоМеста(ЭтаФорма, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураУпаковочныйЛистПриИзменении(Элемент)
	
	НоменклатураУпаковочныйЛистПриИзменении(Элемент.Имя, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьВесУпаковки",Новый Структура("Номенклатура, Упаковка", "ВесУпаковки"));
	СтруктураДействий.Вставить("ЗаполнитьОбъемУпаковки",Новый Структура("Номенклатура, Упаковка", "ОбъемУпаковки"));
	СтруктураДействий.Вставить("ЗаполнитьЕдиницуИзмеренияВеса",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияВеса"));
	СтруктураДействий.Вставить("ЗаполнитьЕдиницуИзмеренияОбъема",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияОбъема"));
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействий.Вставить("ПересчитатьВесОбъем");
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьВесОбъем");
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДокументОтгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Склад", Объект.Склад);
	ПараметрыФормы.Вставить("Номенклатура", ТекущаяСтрока.Номенклатура);
	ПараметрыФормы.Вставить("Характеристика", ТекущаяСтрока.Характеристика);
	ПараметрыФормы.Вставить("ОтбиратьПоТовару", Истина);
	ОткрытьФорму("Документ.ПриходныйОрдерНаТовары.Форма.ФормаВыбораДокументаОтгрузки",
		ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий(Элемент.ТекстРедактирования);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияПриИзменении(Элемент)
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение            		 = Элементы.Товары.ТекущиеДанные.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗавершитьПроверку(Команда)
	
	Результат = ЗавершитьПроверкуСервер();
	
	Если Результат = "ЕстьОшибкиЗаполнения" Тогда
		Возврат;
	ИначеЕсли Результат = "ЕстьРасхождения" Тогда
		
		Элементы.СтраницыШагиПроверки.ТекущаяСтраница = Элементы.СтраницаОтработкаРасхождений;
		Элементы.СтраницыКнопкаНазад.ТекущаяСтраница  = Элементы.СтраницаКнопкаНазадОтображена;
		
	ИначеЕсли Результат = "РасхожденийНетИлиОтработаны" Тогда
		
		Элементы.СтраницыШагиПроверки.ТекущаяСтраница = Элементы.СтраницаВводДанных;
		Элементы.СтраницыКнопкаНазад.ТекущаяСтраница  = Элементы.СтраницаКнопкаНазадПусто;
		
	ИначеЕсли Результат = "ПроверкаЗаконченаЕстьРасхождения" Тогда
		
		ЗакрытьБезВопроса = Истина;
		Закрыть(АдресВоВременномХранилище);
		
	ИначеЕсли Результат = "ПроверкаЗаконченаРасхожденийНет" Тогда

		ЗакрытьБезВопроса = Истина;
		Закрыть(Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)
	
	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныхШтрихкода, ДополнительныеПараметры) Экспорт
	
	ОбработатьШтрихкоды(ДанныхШтрихкода);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ОчиститьСообщения();
	
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(
		Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(Результат, Параметры) Экспорт
	
	Если Результат.Результат Тогда
		ОбработатьШтрихкоды(Результат.ТаблицаТоваров);
	Иначе
		МенеджерОборудованияУТКлиент.СообщитьОбОшибке(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ТекущаяСтрока = МенеджерОборудованияУТКлиент.ТекущаяСтрока(ЭтаФорма);
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерОборудованияКлиент.НачатьПолученияВесаСЭлектронныхВесов(
		Новый ОписаниеОповещения("ПолучитьВесЗавершение", ЭтотОбъект, ТекущаяСтрока),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВесЗавершение(РезультатВыполнения, ТекущаяСтрока) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ТекущаяСтрока.КоличествоУпаковокФакт = РезультатВыполнения.Вес;
	Иначе
		МенеджерОборудованияУТКлиент.СообщитьОбОшибке(РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКачествоНоменклатуры(Команда)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ОчиститьСообщения();
	
	Если ТекущаяСтрока = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Выберите строку табличной части'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьНазначение");
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипИзмеряемойВеличины", Новый Структура("Номенклатура", "ТипИзмеряемойВеличины"));
	СтруктураДействий.Вставить("ЗаполнитьВесУпаковки",Новый Структура("Номенклатура, Упаковка", "ВесУпаковки"));
	СтруктураДействий.Вставить("ЗаполнитьОбъемУпаковки",Новый Структура("Номенклатура, Упаковка", "ОбъемУпаковки"));
	СтруктураДействий.Вставить("ЗаполнитьЕдиницуИзмеренияВеса",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияВеса"));
	СтруктураДействий.Вставить("ЗаполнитьЕдиницуИзмеренияОбъема",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияОбъема"));
	СтруктураДействий.Вставить("ПересчитатьВесОбъем");
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Характеристика) Тогда
		СтруктураДействий.Вставить("ЗаполнитьХарактеристикуНекачественногоТовара", ТекущаяСтрока.Характеристика);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Упаковка) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУпаковкуНекачественногоТовара", ТекущаяСтрока.Упаковка);
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус",
			Новый Структура("Склад, ПараметрыУказанияСерий", Объект.Склад, ПараметрыУказанияСерий));
	
	СкладыКлиент.ИзменитьКачество(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТаблицаФормы  = Элементы.Товары;
	ДанныеТаблицы = Объект.Товары;
	
	Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуЗавершение", ЭтотОбъект);
	УпаковочныеЛистыКлиент.РазбитьСтрокуТЧСУпаковочнымиЛистами(ДанныеТаблицы, ТаблицаФормы, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт 
	 	
	ИдентификаторТекущейСтроки = Элементы.Товары.ТекущаяСтрока;	
	
	Если НоваяСтрока <> Неопределено Тогда
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ПересчитатьВесОбъем");
		
		ИдентификаторНовойСтроки = НоваяСтрока.ПолучитьИдентификатор();
				
		ОбработатьИПеренумероватьСтрокиТЧ(ИдентификаторНовойСтроки, ИдентификаторТекущейСтроки, СтруктураДействий, КэшированныеЗначения);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВсеИзлишкиВОрдер(Команда)
	Для Каждого Стр Из Излишки Цикл
		Стр.Действие = Действия.ДобавитьВДокумент; 
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура НеПриниматьВсе(Команда)
	Для Каждого Стр Из Излишки Цикл
		Стр.Действие = ""; 
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПринятьВсеБезПроверки(Команда)
	Для Каждого Стр Из Недостачи Цикл
		Стр.Действие = Действия.ПринятьБезПроверки;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВсеИзОрдера(Команда)
	Для Каждого Стр Из Недостачи Цикл
		Стр.Действие = ""; 
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура НеПриниматьВсеНепроверенные(Команда)
	Для Каждого Стр Из НепроверенныеУпаковочныеЛисты Цикл
		Стр.Действие = Действия.НеПринимать;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПринятьВсеУпаковочныеЛистыБезПроверки(Команда)
	Для Каждого Стр Из НепроверенныеУпаковочныеЛисты Цикл
		Стр.Действие = ""; 
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбработатьИПеренумероватьСтрокиТЧ(ИдентификаторНовойСтроки, ИдентификаторТекущейСтроки, СтруктураДействий, КэшированныеЗначения)
	
	НоваяСтрока = Объект.Товары.НайтиПоИдентификатору(ИдентификаторНовойСтроки);
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	УпаковочныеЛистыСервер.ПеренумероватьСтроки(ЭтаФорма, Объект.Товары);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыУпаковка.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьАдресноеХранение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Товар;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипИзмеряемойВеличины");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыИзмеряемыхВеличин.КоличествоШтук;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыУпаковка.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьАдресноеХранение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Товар;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокОтбора = Новый СписокЗначений;
	СписокОтбора.Добавить(Перечисления.СтатусыПриходныхОрдеров.КПоступлению);
	СписокОтбора.Добавить(Перечисления.СтатусыПриходныхОрдеров.ТребуетсяОбработка);
	ОтборЭлемента.ПравоеЗначение = СписокОтбора;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//

	ПараметрыУсловногоОформления = НоменклатураСервер.НовыеПараметрыУсловногоОформленияЕдиницИзмерения(Истина);
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтотОбъект, ПараметрыУсловногоОформления);
	
	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСерия.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.СтатусУказанияСерий");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<серия не указывается>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоУпаковок.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЭтоУпаковочныйЛист");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСостояниеПроверки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЭтоУпаковочныйЛист");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИзлишкиУпаковочныйЛист.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИзлишкиСостояниеПроверки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Излишки.ЭтоУпаковочныйЛист");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИзлишкиНоменклатура.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИзлишкиХарактеристика.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИзлишкиСерия.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИзлишкиУпаковка.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИзлишкиНоменклатураЕдиницаИзмерения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Излишки.ЭтоУпаковочныйЛист");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НедостачиУпаковочныйЛист.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НедостачиСостояниеПроверки.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Недостачи.ЭтоУпаковочныйЛист");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НедостачиНоменклатура.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НедостачиХарактеристика.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НедостачиСерия.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НедостачиУпаковка.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НедостачиНоменклатураЕдиницаИзмерения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Недостачи.ЭтоУпаковочныйЛист");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИзлишкиДействие.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Излишки.Действие");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Действия.НеПринимать);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НедостачиДействие.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Недостачи.Действие");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Действия.УдалитьИзДокумента);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НепроверенныеУпаковочныеЛистыДействие.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НепроверенныеУпаковочныеЛисты.Действие");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Действия.ПринятьБезПроверки);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыДокументОтгрузки.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЭтоУпаковочныйЛист");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыВес.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВесУпаковки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыОбъем.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ОбъемУпаковки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЕдиницаИзмеренияВеса.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВесУпаковки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЕдиницаИзмеренияОбъема.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ОбъемУпаковки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	//

	НоменклатураСервер.УстановитьУсловноеОформлениеНазначенияНоменклатуры(ЭтаФорма);
	
	//
	
	УпаковочныеЛистыСервер.УстановитьУсловноеОформлениеСУчетомУпаковочныхЛистов(ЭтаФорма);
	
КонецПроцедуры

#Область Серии

&НаКлиенте
Процедура ОткрытьПодборСерий(Текст = "", ТекущиеДанные = Неопределено)

	Если ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			ТекстСообщения = НСтр("ru='Выберите строку товаров, для которой необходимо указать серии.'");
			ПоказатьПредупреждение(Неопределено, ТекстСообщения);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	ТекущиеДанныеИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
	
	ЗначениеВозврата = Неопределено;

	
	ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы,ПараметрыФормыУказанияСерий,ЭтаФорма,,,, Новый ОписаниеОповещения("ОткрытьПодборСерийЗавершение", ЭтотОбъект, Новый Структура("ПараметрыФормыУказанияСерий", ПараметрыФормыУказанияСерий)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ПараметрыФормыУказанияСерий = ДополнительныеПараметры.ПараметрыФормыУказанияСерий;
    
    
    ЗначениеВозврата = Результат;
    
    Если ЗначениеВозврата <> Неопределено Тогда
        ОбработатьУказаниеСерийНаСервере(ПараметрыФормыУказанияСерий, ТекущиеДанныеИдентификатор, КэшированныеЗначения);
    КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ОбработатьУказаниеСерийНаСервере(ПараметрыФормыУказанияСерий, ТекущаяСтрокаТовары, КэшированныеЗначения)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипИзмеряемойВеличины", Новый Структура("Номенклатура", "ТипИзмеряемойВеличины"));
	СтруктураДействий.Вставить("ЗаполнитьВесУпаковки",Новый Структура("Номенклатура, Упаковка", "ВесУпаковки"));
	СтруктураДействий.Вставить("ЗаполнитьОбъемУпаковки",Новый Структура("Номенклатура, Упаковка", "ОбъемУпаковки"));
	СтруктураДействий.Вставить("ЗаполнитьЕдиницуИзмеренияВеса",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияВеса"));
	СтруктураДействий.Вставить("ЗаполнитьЕдиницуИзмеренияОбъема",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияОбъема"));
	СтруктураДействий.Вставить("ПересчитатьВесОбъем");
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус",
			Новый Структура("Склад, ПараметрыУказанияСерий", Объект.Склад, ПараметрыУказанияСерий));
	НоменклатураСервер.ОбработатьУказаниеСерий(Объект,ПараметрыУказанияСерий,ПараметрыФормыУказанияСерий,СтруктураДействий, КэшированныеЗначения);
	
	УпаковочныеЛистыСервер.ПеренумероватьСтроки(ЭтаФорма, Объект.Товары);
	
КонецФункции

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор)
	
	Возврат НоменклатураСервер.ПараметрыФормыУказанияСерий(Объект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор, ЭтаФорма);
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", Объект.Склад, ПараметрыУказанияСерий));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПересчитатьВесОбъем");
	
	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	СтруктураДействийСИзмененнымиСтроками.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействийСИзмененнымиСтроками.Вставить("ПересчитатьВесОбъем");
	
	СтруктураДействийСоСтрокамиИзУпаковочныхЛистов = Новый Структура;
	СтруктураДействийСоСтрокамиИзУпаковочныхЛистов.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
		Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействийСоСтрокамиИзУпаковочныхЛистов.Вставить("ЗаполнитьПризнакТипНоменклатуры",
		Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействийСоСтрокамиИзУпаковочныхЛистов.Вставить("ЗаполнитьПризнакАртикул",
		Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействийСоСтрокамиИзУпаковочныхЛистов.Вставить("ЗаполнитьПризнакТипИзмеряемойВеличины", Новый Структура("Номенклатура", "ТипИзмеряемойВеличины"));
	СтруктураДействийСоСтрокамиИзУпаковочныхЛистов.Вставить("ЗаполнитьВесУпаковки",Новый Структура("Номенклатура, Упаковка", "ВесУпаковки"));
	СтруктураДействийСоСтрокамиИзУпаковочныхЛистов.Вставить("ЗаполнитьОбъемУпаковки",Новый Структура("Номенклатура, Упаковка", "ОбъемУпаковки"));
	СтруктураДействийСоСтрокамиИзУпаковочныхЛистов.Вставить("ЗаполнитьЕдиницуИзмеренияВеса",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияВеса"));
	СтруктураДействийСоСтрокамиИзУпаковочныхЛистов.Вставить("ЗаполнитьЕдиницуИзмеренияОбъема",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияОбъема"));
	СтруктураДействийСоСтрокамиИзУпаковочныхЛистов.Вставить("ПересчитатьВесОбъем");
	
	СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();

	СтруктураДействий.Штрихкоды                              = ДанныеШтрихкодов;
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействий.СтруктураДействийСоСтрокамиИзУпаковочныхЛистов  = СтруктураДействийСоСтрокамиИзУпаковочныхЛистов;
	СтруктураДействий.ПараметрыУказанияСерий                 = ПараметрыУказанияСерий;
	СтруктураДействий.ТолькоТовары                           = Истина;
	СтруктураДействий.БлокироватьДанныеФормы                 = Ложь;
	СтруктураДействий.ДействияСНеизвестнымиШтрихкодами       = "НетДействий";
	СтруктураДействий.УчитыватьУпаковочныеЛисты              = ИспользоватьУпаковочныеЛисты;
	СтруктураДействий.ОтработатьИзменениеУпаковочныхЛистов   = Ложь;
	СтруктураДействий.ТекущийУпаковочныйЛист                 = УпаковочныйЛистРодитель;
	СтруктураДействий.УвеличиватьКоличествоВСтрокахССериями  = Ложь;
	
	ОбработатьШтрихкодыСервер(СтруктураДействий,КэшированныеЗначения);
	
	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураДействий,КэшированныеЗначения,ЭтаФорма);
	
	Если ШтрихкодированиеНоменклатурыКлиент.НужноОткрытьФормуУказанияСерийПослеОбработкиШтрихкодов(СтруктураДействий) Тогда
		
		ТекущиеДанныеИдентификатор = СтруктураДействий.МассивСтрокССериями[0];
		
		ПодключитьОбработчикОжидания("ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатуры",0.1,Истина);
		
	КонецЕсли;
	
	Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
		Элементы.Товары.ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураПараметровДействия,КэшированныеЗначения)
	
	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(ЭтаФорма, Объект, СтруктураПараметровДействия, КэшированныеЗначения);
	Для Каждого Стр Из Объект.Товары.НайтиСтроки(Новый Структура("ЭтоУпаковочныйЛист, СостояниеПроверки", Истина, "")) Цикл
		Стр.СостояниеПроверки = СостоянияПроверки.НеПроверен;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВопросаПередЗакрытием(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗакрытьБезВопроса = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПослеУдаленияСервер(КэшированныеЗначения)
	
	УпаковочныеЛистыСервер.ПослеУдаленияВТЧСУпаковочнымиЛистами(ЭтаФорма, Объект.Товары, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если УпаковочныеЛистыКлиент.ПроверитьПодготовитьПереходВУпаковочныйЛистПриВыборе(Элементы.Товары, Поле.Имя) Тогда
		ПриПереходеНаДругойУровеньСервер(Элементы.Товары.ТекущиеДанные.УпаковочныйЛист);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриПереходеНаДругойУровеньСервер(НавигационнаяСсылка)
	УпаковочныеЛистыСервер.ПриПереходеНаДругойУровень(ЭтаФорма,
			Объект.Товары, НавигационнаяСсылка, ЗаголовокНачальногоУровня, Ложь);
	Если НавигационнаяСсылка = Объект.Ссылка
		Или Не ЗначениеЗаполнено(НавигационнаяСсылка) Тогда
		Элементы.ЗавершитьПроверку.Заголовок = НСтр("ru='Завершить проверку'");
		Элементы.ЗавершитьПроверку.Картинка = Новый Картинка;
	Иначе
		Элементы.ЗавершитьПроверку.Заголовок = НСтр("ru='Завершить проверку упаковочного листа'");
		Элементы.ЗавершитьПроверку.Картинка = БиблиотекаКартинок.ИзУпаковочногоЛиста;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыТЧТовары()
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
		Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры",
		Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул",
		Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипИзмеряемойВеличины", Новый Структура("Номенклатура", "ТипИзмеряемойВеличины"));
	СтруктураДействий.Вставить("ЗаполнитьВесУпаковки",Новый Структура("Номенклатура, Упаковка", "ВесУпаковки"));
	СтруктураДействий.Вставить("ЗаполнитьОбъемУпаковки",Новый Структура("Номенклатура, Упаковка", "ОбъемУпаковки"));
	СтруктураДействий.Вставить("ЗаполнитьЕдиницуИзмеренияВеса",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияВеса"));
	СтруктураДействий.Вставить("ЗаполнитьЕдиницуИзмеренияОбъема",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияОбъема"));
	
	УпаковочныеЛистыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтаФорма, Объект.Товары, СтруктураДействий);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьВесОбъем");
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, Неопределено);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НоменклатураУпаковочныйЛистПриИзменении(ИмяПоля, КэшированныеЗначения)
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	
	СтруктураДействийСТекущейСтрокой = Новый Структура;
	СтруктураДействийСТекущейСтрокой.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействийСТекущейСтрокой.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействийСТекущейСтрокой.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействийСТекущейСтрокой.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействийСТекущейСтрокой.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", Объект.Склад, ПараметрыУказанияСерий));
	СтруктураДействийСТекущейСтрокой.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействийСТекущейСтрокой.Вставить("ПроверитьЗаполнитьНазначение");
	СтруктураДействийСТекущейСтрокой.Вставить("ЗаполнитьПризнакТипИзмеряемойВеличины", Новый Структура("Номенклатура", "ТипИзмеряемойВеличины"));
	СтруктураДействийСТекущейСтрокой.Вставить("ЗаполнитьВесУпаковки",Новый Структура("Номенклатура, Упаковка", "ВесУпаковки"));
	СтруктураДействийСТекущейСтрокой.Вставить("ЗаполнитьОбъемУпаковки",Новый Структура("Номенклатура, Упаковка", "ОбъемУпаковки"));
	СтруктураДействийСТекущейСтрокой.Вставить("ЗаполнитьЕдиницуИзмеренияВеса",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияВеса"));
	СтруктураДействийСТекущейСтрокой.Вставить("ЗаполнитьЕдиницуИзмеренияОбъема",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияОбъема"));
	СтруктураДействийСТекущейСтрокой.Вставить("ПересчитатьВесОбъем");
	
	УпаковочныеЛистыСервер.НоменклатураУпаковочныйЛистПриИзменении(ЭтаФорма, Объект.Товары,
		ИмяПоля, КэшированныеЗначения, СтруктураДействийСТекущейСтрокой, , Ложь);
	Если Не ЗначениеЗаполнено(ТекущаяСтрока.УпаковочныйЛист) Тогда
		ТекущаяСтрока.СостояниеПроверки = "";
	ИначеЕсли ТекущаяСтрока.УпаковочныйЛист <> КэшированныеЗначения.УпаковочныйЛист Тогда
		ТекущаяСтрока.СостояниеПроверки = СостоянияПроверки.НеПроверен;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьсяКПроверке(Команда)
	Элементы.СтраницыШагиПроверки.ТекущаяСтраница = Элементы.СтраницаВводДанных;
	Элементы.СтраницыКнопкаНазад.ТекущаяСтраница = Элементы.СтраницаКнопкаНазадПусто;
КонецПроцедуры

&НаКлиенте
Процедура ВыйтиБезПроверки(Команда)
	Если УпаковочныйЛистРодитель = Объект.Ссылка
		Или Не ЗначениеЗаполнено(УпаковочныйЛистРодитель) Тогда
		Закрыть();
	Иначе
		ВыйтиБезПроверкиСервер();
		
		Элементы.СтраницыШагиПроверки.ТекущаяСтраница = Элементы.СтраницаВводДанных;
		Элементы.СтраницыКнопкаНазад.ТекущаяСтраница  = Элементы.СтраницаКнопкаНазадПусто;
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВыйтиБезПроверкиСервер()
	
	УпаковочныеЛистыСервер.РекурсивноОбойтиПодчиненныеСтроки(Объект.Товары, УпаковочныйЛистРодитель,,, "Удалить");
	НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("УпаковочныйЛист", УпаковочныйЛистРодитель));
	НайденныеСтроки[0].СостояниеПроверки = СостоянияПроверки.НеПроверен;
	ПриПереходеНаДругойУровеньСервер(НайденныеСтроки[0].УпаковочныйЛистРодитель);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатуры()
	Если ТекущиеДанныеИдентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ТекущиеДанныеИдентификатор);
	ОткрытьПодборСерий(,ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОрдеру(Команда)
	Если Объект.Товары.Количество() > 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоОрдеруНаСервере", ЭтаФорма);
		ТекстВопроса = НСтр("ru = 'Список принятых товаров будет перезаполнен по документу.
			|Заполненные данные будут очищены, продолжить?'");
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(Истина, НСтр("ru = 'Продолжить'"));
		Кнопки.Добавить(Ложь, НСтр("ru = 'Отмена'"));
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);
	Иначе
		ЗаполнитьПоОрдеруНаСервере(Истина, Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОрдеруНаСервере(Результат, Параметры) Экспорт
	
	Если Результат = Истина Тогда
		УпаковочныеЛистыСервер.РекурсивноОбойтиПодчиненныеСтроки(Объект.Товары, УпаковочныйЛистРодитель,,,"Удалить");
		
		Если ЗначениеЗаполнено(УпаковочныйЛистРодитель)
			И ТоварыИсходные.НайтиСтроки(
				Новый Структура("УпаковочныйЛист", УпаковочныйЛистРодитель)).Количество() = 0 Тогда
				СтрокиОбъединяемые = Объект.Товары.НайтиСтроки(Новый Структура("УпаковочныйЛист", УпаковочныйЛистРодитель));
				УпаковочныеЛистыСервер.ДополнитьСтрокамиПоУпаковочнымЛистам(ЭтаФорма, Объект.Товары, СтрокиОбъединяемые);
				Для Каждого Стр Из СтрокиОбъединяемые Цикл
					// Все подчиненные упаковочные листы также принимаются без проверки
					Если Стр.УпаковочныйЛист <> УпаковочныйЛистРодитель Тогда
						Стр.СостояниеПроверки = СостоянияПроверки.ПринятБезПроверки;
					КонецЕсли;
				КонецЦикла;
		Иначе
			СтрокиДляЗаполнения = Новый Массив;
			УпаковочныеЛистыСервер.РекурсивноОбойтиПодчиненныеСтроки(ТоварыИсходные, УпаковочныйЛистРодитель,, СтрокиДляЗаполнения);
			
			ТаблицаДополнение = ТоварыИсходные.Выгрузить(СтрокиДляЗаполнения);
			НайденныеСтроки = ТаблицаДополнение.НайтиСтроки(Новый Структура("ЭтоУпаковочныйЛист", Истина));
			Для Каждого Стр Из НайденныеСтроки Цикл
				// Все подчиненные упаковочные листы также принимаются без проверки
				Стр.СостояниеПроверки = СостоянияПроверки.ПринятБезПроверки;
			КонецЦикла;
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаДополнение, Объект.Товары);
		КонецЕсли;
		ЗаполнитьСлужебныеРеквизитыТЧТовары();
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗавершитьПроверкуСервер()
	
	Результат = "";
	
	Если Элементы.СтраницыШагиПроверки.ТекущаяСтраница = Элементы.СтраницаВводДанных Тогда
		
		Если Не ПроверитьЗаполнение() Тогда
			Возврат "ЕстьОшибкиЗаполнения";
		КонецЕсли;
		
		Результат = ПроверитьЗаполнитьРасхождения();
		
		Если Результат = "ЕстьРасхождения" Тогда
		
			Возврат "ЕстьРасхождения";
			
		КонецЕсли;
		
	Иначе
		
		ОтработатьДействияПоРасхождениям();
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УпаковочныйЛистРодитель)
		И УпаковочныйЛистРодитель <> Объект.Ссылка Тогда
		
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("УпаковочныйЛист", УпаковочныйЛистРодитель));
		НайденныеСтроки[0].СостояниеПроверки = СостоянияПроверки.Проверен;
		ПриПереходеНаДругойУровеньСервер(НайденныеСтроки[0].УпаковочныйЛистРодитель);
		
		Возврат "РасхожденийНетИлиОтработаны";
		
	ИначеЕсли Не ЕстьРасхождения Тогда
		
		Возврат "ПроверкаЗаконченаРасхожденийНет"
		
	Иначе
		// Завершение проверки на верхнем уровне (есть расхождения)
		
		РеквизитыТоваров = "Номенклатура, Характеристика, Назначение, Упаковка, Серия, ДокументОтгрузки, ЭтоУпаковочныйЛист, УпаковочныйЛист, УпаковочныйЛистРодитель";
		Товары = Объект.Товары.Выгрузить();
		
		Товары.Свернуть(РеквизитыТоваров, "Количество, КоличествоУпаковок");
		
		ПроверенныеИсходныеСтроки = Новый Соответствие;
		
		ПараметрыОтбора = Новый Структура(РеквизитыТоваров);
		Для Каждого ПровереннаяСтрока Из Товары Цикл
			ЗаполнитьЗначенияСвойств(ПараметрыОтбора, ПровереннаяСтрока);
			СтрокиИсходные = ТоварыИсходные.НайтиСтроки(ПараметрыОтбора);
			Остаток = ПровереннаяСтрока.Количество;
			ОстатокУпаковок = ПровереннаяСтрока.КоличествоУпаковок;
			Для Каждого СтрокаИсходная Из СтрокиИсходные Цикл
				ПроверенныеИсходныеСтроки.Вставить(СтрокаИсходная, Истина);
				Если Остаток > СтрокаИсходная.Количество Тогда
					Остаток = Остаток - СтрокаИсходная.Количество;
					ОстатокУпаковок = ОстатокУпаковок - СтрокаИсходная.КоличествоУпаковок;
				ИначеЕсли Остаток > 0 Тогда
					СтрокаИсходная.Количество = Остаток;
					СтрокаИсходная.КоличествоУпаковок = ОстатокУпаковок;
					Остаток = 0;
				Иначе
					ТоварыИсходные.Удалить(СтрокаИсходная);
				КонецЕсли;
			КонецЦикла;
			Если Остаток > 0 Тогда
				НоваяСтрока = ТоварыИсходные.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ПровереннаяСтрока);
				НоваяСтрока.Количество = Остаток;
				НоваяСтрока.КоличествоУпаковок = ОстатокУпаковок;
				НоваяСтрока.Комментарий = НСтр("ru='Строка добавлена по результатам проверки'");
				ПроверенныеИсходныеСтроки.Вставить(НоваяСтрока, Истина);
			КонецЕсли;
		КонецЦикла;
		
		// Непроверенные строки исходной таблицы нужно удалить
		Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.УпаковочныйЛист") Тогда
			СтрокиИсходныеДляПроверки = Новый Массив;
			УпаковочныеЛистыСервер.РекурсивноОбойтиПодчиненныеСтроки(ТоварыИсходные, Объект.Ссылка,, СтрокиИсходныеДляПроверки);
			Для Каждого Стр Из СтрокиИсходныеДляПроверки Цикл
				Если ПроверенныеИсходныеСтроки.Получить(Стр) = Неопределено Тогда
					ТоварыИсходные.Удалить(Стр);
				КонецЕсли;
			КонецЦикла;
		Иначе
			ВГраница = ТоварыИсходные.Количество() - 1;
			Для Счет = 0 По ВГраница Цикл
				Стр = ТоварыИсходные[ВГраница - Счет];
				Если ПроверенныеИсходныеСтроки.Получить(Стр) = Неопределено Тогда
					ТоварыИсходные.Удалить(Стр);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ТоварыИсходные.Выгрузить());
		Возврат "ПроверкаЗаконченаЕстьРасхождения";
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПроверитьЗаполнитьРасхождения()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварыИсходные.Номенклатура,
	|	ТоварыИсходные.Характеристика,
	|	ТоварыИсходные.Назначение КАК Назначение,
	|	ТоварыИсходные.Серия,
	|	ВЫБОР
	|		КОГДА &ИспользоватьАдресноеХранение
	|			ТОГДА ТоварыИсходные.Упаковка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|	КОНЕЦ КАК Упаковка,
	|	ТоварыИсходные.УпаковочныйЛист,
	|	ТоварыИсходные.ЭтоУпаковочныйЛист,
	|	&УпаковочныйЛистРодитель,
	|	ТоварыИсходные.ДокументОтгрузки КАК ДокументОтгрузки,
	|	ТоварыИсходные.Количество,
	|	ТоварыИсходные.КоличествоУпаковок
	|ПОМЕСТИТЬ ТоварыИсходные
	|ИЗ
	|	&ТоварыИсходные КАК ТоварыИсходные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Назначение,
	|	Товары.Серия,
	|	ВЫБОР
	|		КОГДА &ИспользоватьАдресноеХранение
	|			ТОГДА Товары.Упаковка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|	КОНЕЦ КАК Упаковка,
	|	Товары.УпаковочныйЛист,
	|	Товары.ЭтоУпаковочныйЛист,
	|	Товары.УпаковочныйЛистРодитель,
	|	Товары.ДокументОтгрузки,
	|	Товары.Количество,
	|	Товары.КоличествоУпаковок,
	|	Товары.СостояниеПроверки
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Назначение,
	|	Товары.Серия,
	|	Товары.Упаковка,
	|	Товары.УпаковочныйЛист,
	|	Товары.УпаковочныйЛистРодитель,
	|	Товары.Действие,
	|	Товары.ДокументОтгрузки,
	|	Товары.Количество,
	|	Товары.КоличествоУпаковок
	|ПОМЕСТИТЬ Излишки
	|ИЗ
	|	&Излишки КАК Товары
	|ГДЕ
	|	Товары.Действие <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Назначение,
	|	Товары.Серия,
	|	Товары.Упаковка,
	|	Товары.УпаковочныйЛист,
	|	Товары.УпаковочныйЛистРодитель,
	|	Товары.Действие,
	|	Товары.ДокументОтгрузки,
	|	Товары.Количество,
	|	Товары.КоличествоУпаковок
	|ПОМЕСТИТЬ Недостачи
	|ИЗ
	|	&Недостачи КАК Товары
	|ГДЕ
	|	Товары.Действие <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.УпаковочныйЛист,
	|	Товары.УпаковочныйЛистРодитель,
	|	Товары.Действие,
	|	Товары.Количество,
	|	Товары.КоличествоУпаковок
	|ПОМЕСТИТЬ НепроверенныеУпаковочныеЛисты
	|ИЗ
	|	&НепроверенныеУпаковочныеЛисты КАК Товары
	|ГДЕ
	|	Товары.Действие <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расхождения.Номенклатура,
	|	Расхождения.Характеристика,
	|	Расхождения.Назначение,
	|	Расхождения.Серия,
	|	Расхождения.Упаковка,
	|	Расхождения.ЭтоУпаковочныйЛист,
	|	Расхождения.УпаковочныйЛист,
	|	Расхождения.УпаковочныйЛистРодитель,
	|	Расхождения.ДокументОтгрузки,
	|	СУММА(Расхождения.Количество) КАК Количество,
	|	ВЫБОР
	|		КОГДА НЕ &ИспользоватьАдресноеХранение
	|			ТОГДА СУММА(Расхождения.Количество)
	|		ИНАЧЕ СУММА(Расхождения.КоличествоУпаковок)
	|	КОНЕЦ КАК КоличествоУпаковок
	|ПОМЕСТИТЬ Расхождения
	|ИЗ
	|	(ВЫБРАТЬ
	|		Товары.Номенклатура КАК Номенклатура,
	|		Товары.Характеристика КАК Характеристика,
	|		Товары.Назначение КАК Назначение,
	|		Товары.Серия КАК Серия,
	|		Товары.Упаковка КАК Упаковка,
	|		Товары.ЭтоУпаковочныйЛист КАК ЭтоУпаковочныйЛист,
	|		Товары.УпаковочныйЛист КАК УпаковочныйЛист,
	|		Товары.УпаковочныйЛистРодитель КАК УпаковочныйЛистРодитель,
	|		Товары.ДокументОтгрузки КАК ДокументОтгрузки,
	|		Товары.Количество КАК Количество,
	|		Товары.КоличествоУпаковок КАК КоличествоУпаковок
	|	ИЗ
	|		Товары КАК Товары
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыИсходные.Номенклатура,
	|		ТоварыИсходные.Характеристика,
	|		ТоварыИсходные.Назначение,
	|		ТоварыИсходные.Серия,
	|		ТоварыИсходные.Упаковка,
	|		ТоварыИсходные.ЭтоУпаковочныйЛист,
	|		ТоварыИсходные.УпаковочныйЛист,
	|		ТоварыИсходные.УпаковочныйЛистРодитель,
	|		ТоварыИсходные.ДокументОтгрузки,
	|		-ТоварыИсходные.Количество,
	|		-ТоварыИсходные.КоличествоУпаковок
	|	ИЗ
	|		ТоварыИсходные КАК ТоварыИсходные) КАК Расхождения
	|
	|СГРУППИРОВАТЬ ПО
	|	Расхождения.Номенклатура,
	|	Расхождения.Характеристика,
	|	Расхождения.Назначение,
	|	Расхождения.Серия,
	|	Расхождения.Упаковка,
	|	Расхождения.ЭтоУпаковочныйЛист,
	|	Расхождения.УпаковочныйЛист,
	|	Расхождения.УпаковочныйЛистРодитель,
	|	Расхождения.ДокументОтгрузки
	|;
	|
	|//[6]//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Излишки.Номенклатура,
	|	Излишки.Характеристика,
	|	Излишки.Назначение,
	|	Излишки.Серия,
	|	Излишки.Упаковка,
	|	Излишки.ЭтоУпаковочныйЛист,
	|	Излишки.УпаковочныйЛист,
	|	Излишки.УпаковочныйЛистРодитель,
	|	ЕСТЬNULL(Товары.СостояниеПроверки, """") КАК СостояниеПроверки,
	|	Излишки.ДокументОтгрузки,
	|	Излишки.Количество,
	|	Излишки.КоличествоУпаковок,
	|	ЕСТЬNULL(ИзлишкиДо.Действие, """") КАК Действие
	|ИЗ
	|	Расхождения КАК Излишки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Товары КАК Товары
	|		ПО (Товары.УпаковочныйЛист = Излишки.УпаковочныйЛист
	|			И Товары.ЭтоУпаковочныйЛист)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Излишки КАК ИзлишкиДо
	|		ПО (ИзлишкиДо.Номенклатура = Излишки.Номенклатура)
	|			И (ИзлишкиДо.Характеристика = Излишки.Характеристика)
	|			И (ИзлишкиДо.Назначение = Излишки.Назначение)
	|			И (ИзлишкиДо.Серия = Излишки.Серия)
	|			И (ИзлишкиДо.Упаковка = Излишки.Упаковка)
	|			И (ИзлишкиДо.Количество = Излишки.Количество)
	|			И (ИзлишкиДо.ДокументОтгрузки = Излишки.ДокументОтгрузки)
	|ГДЕ
	|	Излишки.Количество > 0
	|;
	|
	|//[7]//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Недостачи.Номенклатура,
	|	Недостачи.Характеристика,
	|	Недостачи.Назначение,
	|	Недостачи.Серия,
	|	Недостачи.Упаковка,
	|	Недостачи.ЭтоУпаковочныйЛист,
	|	Недостачи.УпаковочныйЛист,
	|	Недостачи.УпаковочныйЛистРодитель,
	|	ЕСТЬNULL(Товары.СостояниеПроверки, """") КАК СостояниеПроверки,
	|	Недостачи.ДокументОтгрузки,
	|	-Недостачи.Количество КАК Количество,
	|	-Недостачи.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ЕСТЬNULL(НедостачиДо.Действие, """") КАК Действие
	|ИЗ
	|	Расхождения КАК Недостачи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Товары КАК Товары
	|		ПО (Товары.УпаковочныйЛист = Недостачи.УпаковочныйЛист
	|			И Товары.ЭтоУпаковочныйЛист)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Недостачи КАК НедостачиДо
	|		ПО (НедостачиДо.Номенклатура = Недостачи.Номенклатура)
	|			И (НедостачиДо.Характеристика = Недостачи.Характеристика)
	|			И (НедостачиДо.Назначение = Недостачи.Назначение)
	|			И (НедостачиДо.Серия = Недостачи.Серия)
	|			И (НедостачиДо.Упаковка = Недостачи.Упаковка)
	|			И (НедостачиДо.ДокументОтгрузки = Недостачи.ДокументОтгрузки)
	|			И (НедостачиДо.Количество = -Недостачи.Количество)
	|ГДЕ
	|	Недостачи.Количество < 0
	|;
	|
	|//[8]//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НепроверенныеУпаковочныеЛисты.УпаковочныйЛист,
	|	НепроверенныеУпаковочныеЛисты.УпаковочныйЛистРодитель,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НепроверенныеУпаковочныеЛистыДо.Количество, 0) > 0
	|			ТОГДА НепроверенныеУпаковочныеЛистыДо.Действие
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Действие
	|ИЗ
	|	Товары КАК НепроверенныеУпаковочныеЛисты
	|		ЛЕВОЕ СОЕДИНЕНИЕ НепроверенныеУпаковочныеЛисты КАК НепроверенныеУпаковочныеЛистыДо
	|		ПО (НепроверенныеУпаковочныеЛистыДо.УпаковочныйЛист = НепроверенныеУпаковочныеЛисты.УпаковочныйЛист)
	|ГДЕ
	|	НепроверенныеУпаковочныеЛисты.ЭтоУпаковочныйЛист
	|	И НепроверенныеУпаковочныеЛисты.СостояниеПроверки = &СостояниеНеПроверен
	|	И НЕ НепроверенныеУпаковочныеЛисты.УпаковочныйЛист В
	|				(ВЫБРАТЬ
	|					Расхождения.УпаковочныйЛист
	|				ИЗ
	|					Расхождения
	|				ГДЕ
	|					Расхождения.Количество > 0)";
	
	Запрос.УстановитьПараметр("Товары",
		Объект.Товары.Выгрузить(Новый Структура("УпаковочныйЛистРодитель", УпаковочныйЛистРодитель)));
		
	НаходимсяВнутриУпЛистаНеИзОрдера = ЗначениеЗаполнено(УпаковочныйЛистРодитель)
		И (ТоварыИсходные.НайтиСтроки(Новый Структура("УпаковочныйЛист", УпаковочныйЛистРодитель)).Количество() = 0);
	Запрос.УстановитьПараметр("УпаковочныйЛистРодитель", УпаковочныйЛистРодитель);
	
	Если НаходимсяВнутриУпЛистаНеИзОрдера Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"&ТоварыИсходные КАК ТоварыИсходные",
			"Документ.УпаковочныйЛист.Товары КАК ТоварыИсходные
			|ГДЕ Ссылка = &УпаковочныйЛистРодитель
			|	И УпаковочныйЛистРодитель = ЗНАЧЕНИЕ(Документ.УпаковочныйЛист.ПустаяСсылка)");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, 
				"ТоварыИсходные.Назначение", "ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, 
				"ТоварыИсходные.ДокументОтгрузки", "НЕОПРЕДЕЛЕНО");
	Иначе
		Запрос.УстановитьПараметр("ТоварыИсходные",
			ТоварыИсходные.Выгрузить(Новый Структура("УпаковочныйЛистРодитель", УпаковочныйЛистРодитель)));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Излишки",Излишки.Выгрузить());
	Запрос.УстановитьПараметр("Недостачи",Недостачи.Выгрузить());
	Запрос.УстановитьПараметр("НепроверенныеУпаковочныеЛисты",НепроверенныеУпаковочныеЛисты.Выгрузить());
	Запрос.УстановитьПараметр("СостояниеНеПроверен", СостоянияПроверки.НеПроверен);
	Запрос.УстановитьПараметр("ИспользоватьАдресноеХранение", ИспользоватьАдресноеХранение);
	Результат = Запрос.ВыполнитьПакет();
	
	ЕстьИзлишки                       = Не Результат[6].Пустой();
	ЕстьНедостачи                     = Не Результат[7].Пустой();
	ЕстьНепроверенныеУпаковочныеЛисты = Не Результат[8].Пустой();
	
	Если Не ЕстьИзлишки
		И Не ЕстьНедостачи
		И Не ЕстьНепроверенныеУпаковочныеЛисты Тогда
		
		Возврат "РасхожденийНет";
		
	КонецЕсли;
	
	Элементы.ГруппаИзлишки.Видимость                       = ЕстьИзлишки;
	Элементы.ГруппаНедостачи.Видимость                     = ЕстьНедостачи;
	Элементы.ГруппаНепроверенныеУпаковочныеЛисты.Видимость = ЕстьНепроверенныеУпаковочныеЛисты;
	
	Излишки.Загрузить(Результат[6].Выгрузить());
	Недостачи.Загрузить(Результат[7].Выгрузить());
	НепроверенныеУпаковочныеЛисты.Загрузить(Результат[8].Выгрузить());
	
	Возврат "ЕстьРасхождения";
	
КонецФункции

&НаСервере
Процедура ОтработатьДействияПоРасхождениям()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Назначение,
	|	Товары.Упаковка,
	|	Товары.Серия,
	|	Товары.ДокументОтгрузки,
	|	Товары.КоличествоУпаковок,
	|	Товары.Количество,
	|	Товары.УпаковочныйЛист,
	|	Товары.УпаковочныйЛистРодитель,
	|	Товары.ЭтоУпаковочныйЛист,
	|	Товары.СостояниеПроверки
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|ГДЕ
	|	(НЕ Товары.ЭтоУпаковочныйЛист
	|			ИЛИ НЕ Товары.УпаковочныйЛист В (&НепроверенныеУпЛистыНеПринимать))
	|	И Товары.УпаковочныйЛистРодитель = &УпаковочныйЛистРодитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Назначение,
	|	Товары.Упаковка,
	|	Товары.Серия,
	|	Товары.ДокументОтгрузки,
	|	Товары.КоличествоУпаковок,
	|	Товары.Количество,
	|	Товары.УпаковочныйЛист,
	|	Товары.УпаковочныйЛистРодитель,
	|	Товары.ЭтоУпаковочныйЛист,
	|	Товары.СостояниеПроверки,
	|	Товары.Действие
	|ПОМЕСТИТЬ Излишки
	|ИЗ
	|	&Излишки КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Назначение,
	|	Товары.Упаковка,
	|	Товары.Серия,
	|	Товары.ДокументОтгрузки,
	|	Товары.КоличествоУпаковок,
	|	Товары.Количество,
	|	Товары.УпаковочныйЛист,
	|	Товары.УпаковочныйЛистРодитель,
	|	Товары.ЭтоУпаковочныйЛист,
	|	Товары.СостояниеПроверки,
	|	Товары.Действие
	|ПОМЕСТИТЬ Недостачи
	|ИЗ
	|	&Недостачи КАК Товары
	|;";
	
	Если ИспользоватьАдресноеХранение Тогда
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	Товары.Назначение,
		|	Товары.Упаковка,
		|	Товары.Серия,
		|	Товары.ДокументОтгрузки,
		|	Товары.КоличествоУпаковок,
		|	Товары.Количество,
		|	Товары.УпаковочныйЛист,
		|	Товары.УпаковочныйЛистРодитель,
		|	Товары.ЭтоУпаковочныйЛист,
		|	Товары.СостояниеПроверки
		|ПОМЕСТИТЬ ТоварыДляЗапроса
		|ИЗ
		|	Товары КАК Товары
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИзлишкиНеПринимать.Номенклатура,
		|	ИзлишкиНеПринимать.Характеристика,
		|	ИзлишкиНеПринимать.Назначение,
		|	ИзлишкиНеПринимать.Упаковка,
		|	ИзлишкиНеПринимать.Серия,
		|	ИзлишкиНеПринимать.ДокументОтгрузки,
		|	-ИзлишкиНеПринимать.КоличествоУпаковок,
		|	-ИзлишкиНеПринимать.Количество,
		|	ИзлишкиНеПринимать.УпаковочныйЛист,
		|	ИзлишкиНеПринимать.УпаковочныйЛистРодитель,
		|	ИзлишкиНеПринимать.ЭтоУпаковочныйЛист,
		|	ИзлишкиНеПринимать.СостояниеПроверки
		|ИЗ
		|	Излишки КАК ИзлишкиНеПринимать
		|ГДЕ ИзлишкиНеПринимать.Действие = """" // Не принимать
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НедостачиПринятьБезПроверки.Номенклатура,
		|	НедостачиПринятьБезПроверки.Характеристика,
		|	НедостачиПринятьБезПроверки.Назначение,
		|	НедостачиПринятьБезПроверки.Упаковка,
		|	НедостачиПринятьБезПроверки.Серия,
		|	НедостачиПринятьБезПроверки.ДокументОтгрузки,
		|	НедостачиПринятьБезПроверки.КоличествоУпаковок,
		|	НедостачиПринятьБезПроверки.Количество,
		|	НедостачиПринятьБезПроверки.УпаковочныйЛист,
		|	НедостачиПринятьБезПроверки.УпаковочныйЛистРодитель,
		|	НедостачиПринятьБезПроверки.ЭтоУпаковочныйЛист,
		|	НедостачиПринятьБезПроверки.СостояниеПроверки
		|ИЗ
		|	Недостачи КАК НедостачиПринятьБезПроверки
		|ГДЕ
		|	НедостачиПринятьБезПроверки.Действие <> """" // Принять без проверки
		|;";
	Иначе
		// В случае неадресного хранения излишки считаются без упаковок
		//	и упаковки ордера могут отличаться от проверенных упаковок,
		//	поэтому товары, по которым выявлены непринимаемые излишки (без упаковок),
		//	придется перевести в базовые единицы измерения, чтобы уменьшить проверенные товары.
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	Товары.Назначение,
		|	Товары.Упаковка,
		|	Товары.Серия,
		|	Товары.ДокументОтгрузки,
		|	Товары.КоличествоУпаковок,
		|	Товары.Количество,
		|	Товары.УпаковочныйЛист,
		|	Товары.УпаковочныйЛистРодитель,
		|	Товары.ЭтоУпаковочныйЛист,
		|	Товары.СостояниеПроверки
		|ПОМЕСТИТЬ ТоварыДляЗапроса
		|ИЗ
		|	Товары КАК Товары
		|ГДЕ
		|	НЕ (Товары.Номенклатура, Товары.Характеристика, Товары.Назначение, Товары.Серия, Товары.ДокументОтгрузки) В
		|				(ВЫБРАТЬ
		|					ИзлишкиНеПринимать.Номенклатура,
		|					ИзлишкиНеПринимать.Характеристика,
		|					ИзлишкиНеПринимать.Назначение,
		|					ИзлишкиНеПринимать.Серия,
		|					ИзлишкиНеПринимать.ДокументОтгрузки
		|				ИЗ
		|					Излишки КАК ИзлишкиНеПринимать
		|				ГДЕ ИзлишкиНеПринимать.Действие = """")
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	Товары.Назначение,
		|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка),
		|	Товары.Серия,
		|	Товары.ДокументОтгрузки,
		|	Товары.Количество,
		|	Товары.Количество,
		|	Товары.УпаковочныйЛист,
		|	Товары.УпаковочныйЛистРодитель,
		|	Товары.ЭтоУпаковочныйЛист,
		|	Товары.СостояниеПроверки
		|ИЗ
		|	Товары КАК Товары
		|ГДЕ
		|	НЕ Товары.ЭтоУпаковочныйЛист
		|	И (Товары.Номенклатура, Товары.Характеристика, Товары.Серия, Товары.ДокументОтгрузки) В
		|			(ВЫБРАТЬ
		|				ИзлишкиНеПринимать.Номенклатура,
		|				ИзлишкиНеПринимать.Характеристика,
		|				ИзлишкиНеПринимать.Серия,
		|				ИзлишкиНеПринимать.ДокументОтгрузки
		|			ИЗ
		|				Излишки КАК ИзлишкиНеПринимать
		|			ГДЕ ИзлишкиНеПринимать.Действие = """")
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИзлишкиНеПринимать.Номенклатура,
		|	ИзлишкиНеПринимать.Характеристика,
		|	ИзлишкиНеПринимать.Назначение,
		|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка),
		|	ИзлишкиНеПринимать.Серия,
		|	ИзлишкиНеПринимать.ДокументОтгрузки,
		|	-ИзлишкиНеПринимать.Количество,
		|	-ИзлишкиНеПринимать.Количество,
		|	ИзлишкиНеПринимать.УпаковочныйЛист,
		|	ИзлишкиНеПринимать.УпаковочныйЛистРодитель,
		|	ИзлишкиНеПринимать.ЭтоУпаковочныйЛист,
		|	ИзлишкиНеПринимать.СостояниеПроверки
		|ИЗ
		|	Излишки КАК ИзлишкиНеПринимать
		|ГДЕ ИзлишкиНеПринимать.Действие = """" // Не принимать
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НедостачиПринятьБезПроверки.Номенклатура,
		|	НедостачиПринятьБезПроверки.Характеристика,
		|	НедостачиПринятьБезПроверки.Назначение,
		|	НедостачиПринятьБезПроверки.Упаковка,
		|	НедостачиПринятьБезПроверки.Серия,
		|	НедостачиПринятьБезПроверки.ДокументОтгрузки,
		|	НедостачиПринятьБезПроверки.КоличествоУпаковок,
		|	НедостачиПринятьБезПроверки.Количество,
		|	НедостачиПринятьБезПроверки.УпаковочныйЛист,
		|	НедостачиПринятьБезПроверки.УпаковочныйЛистРодитель,
		|	НедостачиПринятьБезПроверки.ЭтоУпаковочныйЛист,
		|	НедостачиПринятьБезПроверки.СостояниеПроверки
		|ИЗ
		|	Недостачи КАК НедостачиПринятьБезПроверки
		|ГДЕ
		|	НедостачиПринятьБезПроверки.Действие <> """" // Принять без проверки
		|;";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса +
	"//[4]//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Назначение КАК Назначение,
	|	Товары.Упаковка КАК Упаковка,
	|	Товары.Серия,
	|	СУММА(Товары.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	СУММА(Товары.Количество) КАК Количество,
	|	Товары.УпаковочныйЛист КАК УпаковочныйЛист,
	|	Товары.УпаковочныйЛистРодитель КАК УпаковочныйЛистРодитель,
	|	Товары.ЭтоУпаковочныйЛист КАК ЭтоУпаковочныйЛист,
	|	Товары.ДокументОтгрузки,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА Товары.ЭтоУпаковочныйЛист
	|				ТОГДА ВЫБОР
	|						КОГДА Товары.УпаковочныйЛист В (&НепроверенныеУпЛистыПринятьБезПроверки)
	|								ИЛИ Товары.УпаковочныйЛист В (&ИзлишкиУпЛистыДобавитьВОрдер)
	|									И Товары.СостояниеПроверки <> &СостояниеПроверен
	|								ИЛИ Товары.УпаковочныйЛист В (&НедостачиУпЛистыПринятьБезПроверки)
	|							ТОГДА &СостояниеПринятБезПроверки
	|						ИНАЧЕ &СостояниеПроверен
	|					КОНЕЦ
	|			ИНАЧЕ """"
	|		КОНЕЦ) КАК СостояниеПроверки
	|ИЗ
	|	ТоварыДляЗапроса КАК Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Назначение,
	|	Товары.Упаковка,
	|	Товары.Серия,
	|	Товары.УпаковочныйЛист,
	|	Товары.ЭтоУпаковочныйЛист,
	|	Товары.УпаковочныйЛистРодитель,
	|	Товары.ДокументОтгрузки
	|;
	|
	|//[5]//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1
	|ИЗ
	|	Излишки КАК ИзлишкиДобавить
	|ГДЕ
	|	ИзлишкиДобавить.Действие <> """"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1
	|ИЗ
	|	Недостачи КАК НедостачиУдалить
	|ГДЕ
	|	НедостачиУдалить.Действие = """"";
	
	НепроверенныеУпЛистыНеПринимать =
		НепроверенныеУпаковочныеЛисты.Выгрузить(
			Новый Структура("Действие", Действия.НеПринимать),           "УпаковочныйЛист")
		.ВыгрузитьКолонку("УпаковочныйЛист");
	НепроверенныеУпЛистыПринятьБезПроверки =
		НепроверенныеУпаковочныеЛисты.Выгрузить(
			Новый Структура("Действие", ""),                             "УпаковочныйЛист")
		.ВыгрузитьКолонку("УпаковочныйЛист");
	ИзлишкиУпЛистыНеПринимать =
		Излишки.Выгрузить(
			Новый Структура("ЭтоУпаковочныйЛист, Действие", Истина, ""), "УпаковочныйЛист")
		.ВыгрузитьКолонку("УпаковочныйЛист");
	ИзлишкиУпЛистыДобавитьВОрдер =
		Излишки.Выгрузить(
			Новый Структура("ЭтоУпаковочныйЛист, Действие", Истина, Действия.ДобавитьВДокумент), "УпаковочныйЛист")
		.ВыгрузитьКолонку("УпаковочныйЛист");
	
	ИзлишкиУпЛистыДобавитьВОрдерНепроверенные =
		Излишки.Выгрузить(
			Новый Структура("ЭтоУпаковочныйЛист, Действие, СостояниеПроверки",
				Истина, Действия.ДобавитьВДокумент, СостоянияПроверки.НеПроверен), "УпаковочныйЛист")
		.ВыгрузитьКолонку("УпаковочныйЛист");
	
	НедостачиУпЛистыПринятьБезПроверки =
		Недостачи.Выгрузить(
			Новый Структура("ЭтоУпаковочныйЛист, Действие",
				Истина, Действия.ПринятьБезПроверки, СостоянияПроверки.НеПроверен), "УпаковочныйЛист")
		.ВыгрузитьКолонку("УпаковочныйЛист");
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Товары",                                 Объект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("Излишки",                                Излишки.Выгрузить());
	Запрос.УстановитьПараметр("Недостачи",                              Недостачи.Выгрузить());
	Запрос.УстановитьПараметр("СостояниеПроверен",                      СостоянияПроверки.Проверен);
	Запрос.УстановитьПараметр("СостояниеПринятБезПроверки",             СостоянияПроверки.ПринятБезПроверки);
	Запрос.УстановитьПараметр("НепроверенныеУпЛистыНеПринимать",        НепроверенныеУпЛистыНеПринимать);
	Запрос.УстановитьПараметр("НепроверенныеУпЛистыПринятьБезПроверки", НепроверенныеУпЛистыПринятьБезПроверки);
	Запрос.УстановитьПараметр("ИзлишкиУпЛистыДобавитьВОрдер",           ИзлишкиУпЛистыДобавитьВОрдер);
	Запрос.УстановитьПараметр("УпаковочныйЛистРодитель",                УпаковочныйЛистРодитель);
	Запрос.УстановитьПараметр("НедостачиУпЛистыПринятьБезПроверки",     НедостачиУпЛистыПринятьБезПроверки);
	
	// Перезаполним таблицу Товары по результатам принятых решений
	//	для этого сначала удалим строки текущего уровня вложенности.
	НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("УпаковочныйЛистРодитель",УпаковочныйЛистРодитель));
	Для Каждого Стр Из НайденныеСтроки Цикл
		// Нужно удалить подчиненные строки уп. листов из излишков, которые ранее были добавлены и которые решили не принимать.
		Если ЗначениеЗаполнено(Стр.УпаковочныйЛист)
			И Стр.СостояниеПроверки <> СостоянияПроверки.НеПроверен
			И ИзлишкиУпЛистыНеПринимать.Найти(Стр.УпаковочныйЛист)  <> Неопределено Тогда
			УпаковочныеЛистыСервер.РекурсивноОбойтиПодчиненныеСтроки(Объект.Товары, Стр.УпаковочныйЛист,,, "Удалить");
		КонецЕсли;
		Объект.Товары.Удалить(Стр);
	КонецЦикла;
	
	Результат = Запрос.ВыполнитьПакет();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат[4].Выгрузить(), Объект.Товары);
	
	// Дополним строками упаковочных листов не из ордера
	Для Каждого УпЛистСсылка Из ИзлишкиУпЛистыДобавитьВОрдерНепроверенные Цикл
		СтрокиОбъединяемые = Объект.Товары.НайтиСтроки(Новый Структура("УпаковочныйЛист",УпЛистСсылка));
		УпаковочныеЛистыСервер.ДополнитьСтрокамиПоУпаковочнымЛистам(ЭтаФорма, Объект.Товары, СтрокиОбъединяемые);
	КонецЦикла;
	
	// Добавим строки принятых без проверки упаковочных листов с учетом вложенности
	СтрокиОбъединяемые = Новый Массив;
	Для Каждого УпЛистСсылка Из НепроверенныеУпЛистыПринятьБезПроверки Цикл
		УпаковочныеЛистыСервер.РекурсивноОбойтиПодчиненныеСтроки(ТоварыИсходные, УпЛистСсылка,, СтрокиОбъединяемые);
	КонецЦикла;
	ТаблицаДополнение = ТоварыИсходные.Выгрузить(СтрокиОбъединяемые);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаДополнение, Объект.Товары);
	
	// Добавим строки неотсканированных и принятых без проверки упаковочных листов с учетом вложенности.
	СтрокиОбъединяемые = Новый Массив;
	Для Каждого УпЛистСсылка Из НедостачиУпЛистыПринятьБезПроверки Цикл
		УпаковочныеЛистыСервер.РекурсивноОбойтиПодчиненныеСтроки(ТоварыИсходные, УпЛистСсылка,, СтрокиОбъединяемые);
	КонецЦикла;
	ТаблицаДополнение = ТоварыИсходные.Выгрузить(СтрокиОбъединяемые);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаДополнение, Объект.Товары);
	
	ЗаполнитьСлужебныеРеквизитыТЧТовары();
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	ЕстьРасхождения = ЕстьРасхождения Или Не Результат[5].Пустой() Или (НепроверенныеУпЛистыНеПринимать.Количество() > 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВесПриИзменении(Элемент)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковокПоВесу");
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыОбъемПриИзменении(Элемент)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковокПоОбъему");
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

#КонецОбласти

#КонецОбласти
