#Область ОписаниеПеременных

&НаКлиенте
Перем СуммыПлатежейКВыгрузке;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	БанковскийСчет = Параметры.БанковскийСчет;
	ПлатежныйДокумент = Параметры.ПлатежныйДокумент;
	
	ЗаполнитьНачальныеЗначения(БанковскийСчет, ПлатежныйДокумент);
	
	ЗаполнитьСписокВыбораПериодов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьФормуСпискаВыгрузкаПлатежныхДокументовBankFeeds" Тогда
		
		ОбновитьСписокСчетовНаСервере(Ложь);
		ОбновитьПодвал();
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыБанковскиеСчета

&НаКлиенте
Процедура БанковскиеСчетаПометкаПриИзменении(Элемент)
	
	Объект.СписокСчетов.Очистить();
	Для Каждого ТекущаяСтрокаБанковскиеСчета Из Объект.БанковскиеСчета Цикл   
		
		Если ТекущаяСтрокаБанковскиеСчета.Пометка Тогда
			Объект.СписокСчетов.Добавить(ТекущаяСтрокаБанковскиеСчета.Ссылка);
		КонецЕсли;	
		
	КонецЦикла;	
	
	ОбновитьСписокПлатежей();
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскиеСчетаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияУТКлиент.ИзменитьЭлемент(Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыКВыгрузке

&НаКлиенте
Процедура ДокументыКВыгрузкеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Не Поле.Имя = "ДокументыКВыгрузкеВыгружать"
		И НЕ Поле.Имя = "ДокументыКВыгрузкеФорматВыгрузки" Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтметитьСчета(Команда)
	
	Объект.СписокСчетов.Очистить();
	Для каждого Счет Из Объект.БанковскиеСчета Цикл
		Если Не Счет.Загружается Тогда
			Счет.Пометка = Истина;
			Объект.СписокСчетов.Добавить(Счет.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьСписокПлатежей();
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкиСчетов(Команда)
	
	Объект.СписокСчетов.Очистить();
	Для каждого Счет Из Объект.БанковскиеСчета Цикл
		Если Не Счет.Загружается Тогда
			Счет.Пометка = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьСписокПлатежей();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокСчетов(Команда)

	ОбновитьСписокСчетовНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)                              
	
	ИнформацияПоДокументамВыгрузки = ДокументыКВыгрузкеДляВыгрузки();

	ПараметрыВыгрузки = Новый Структура();
	ПараметрыВыгрузки.Вставить("АдресДокументыКВыгрузке", ИнформацияПоДокументамВыгрузки.АдресТаблицыОтмеченныхПлатежей);
	ПараметрыВыгрузки.Вставить("АдресБанковскиеСчета", БанковскиеСчетаДляЗагрузки());
	ПараметрыВыгрузки.Вставить("ВыгрузкаВыполняетсяПриСинхронизации", Ложь);

	Если ИнформацияПоДокументамВыгрузки.СписокРанееОтправленныхПлатежей.Количество() > 0 Тогда
		
		СообщитьПользователюОРанееОтправленныхДокументах(
			ИнформацияПоДокументамВыгрузки.СписокРанееОтправленныхПлатежей);
		
	КонецЕсли;	

		Если ИнформацияПоДокументамВыгрузки.СписокОтмеченныхПлатежейБезФорматов.Количество() > 0 Тогда
		
		СообщитьПользователюОПлатежахБезФорматов(
			ИнформацияПоДокументамВыгрузки.СписокОтмеченныхПлатежейБезФорматов);
		
	КонецЕсли;	
	
	ОбменССервисомBankFeedsКлиент.ВыгрузитьПлатежныеДокументы(ПараметрыВыгрузки, ЭтотОбъект);	                      

КонецПроцедуры

&НаКлиенте
Процедура Отметить(Команда)
	
	Для каждого СтрокаДокумента Из Объект.ДокументыКВыгрузке Цикл
		СтрокаДокумента.Выгружать = Истина;
	КонецЦикла;
	
	ОбновитьПодвал();
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметки(Команда)
	
	Для каждого СтрокаДокумента Из Объект.ДокументыКВыгрузке Цикл
		СтрокаДокумента.Выгружать = Ложь;
	КонецЦикла;
	
	ОбновитьПодвал();
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьСписокПлатежей();
	ОбновитьПодвал();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция БанковскиеСчетаДляЗагрузки()
	
	ТаблицаОтмеченныхБанковскихСчетов = Объект.БанковскиеСчета.Выгрузить(Новый Структура("Пометка", Истина));	
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаОтмеченныхБанковскихСчетов, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура СообщитьПользователюОРанееОтправленныхДокументах(СписокРанееОтправленныхПлатежей)
	
	Для Каждого ТекущееЗначение Из СписокРанееОтправленныхПлатежей Цикл
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Документ %1, ранее уже выгружался в сервис. Поэтому выгружаться не будет'"),
			ТекущееЗначение.Значение);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	
	КонецЦикла;
	
КонецПроцедуры 			

&НаКлиенте
Процедура СообщитьПользователюОПлатежахБезФорматов(СписокОтмеченныхПлатежейБезФорматов)
	
	Для Каждого ТекущееЗначение Из СписокОтмеченныхПлатежейБезФорматов Цикл
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'У документа %1, не указан шаблон платежа. Документ выгружен не будет'"),
			ТекущееЗначение.Значение);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Функция ДокументыКВыгрузкеДляВыгрузки()
	
	ИнформацияПоДокументамВыгрузки = Новый Структура("АдресТаблицыОтмеченныхПлатежей,СписокРанееОтправленныхПлатежей,СписокОтмеченныхПлатежейБезФорматов");
	
	ТаблицаОтмеченныхПлатежныхПоручений = Объект.ДокументыКВыгрузке.Выгрузить(Новый Структура("Выгружать,ФорматВыгрузки",
												Истина, Перечисления.ФорматыПлатежейBankFeeds.SEPA));	
												
	ТаблицаОтмеченныхПлатежейБезФорматов = Объект.ДокументыКВыгрузке.Выгрузить(Новый Структура("Выгружать,ФорматВыгрузки",
												Истина, Перечисления.ФорматыПлатежейBankFeeds.ПустаяСсылка()));	
												
	СписокРанееОтправленныхДокументов = ПроверитьТаблицуНаРанееОтправленныеДокументы(ТаблицаОтмеченныхПлатежныхПоручений);
	
	Для Каждого ТекущееЗначение Из СписокРанееОтправленныхДокументов Цикл
		
	   ТаблицаОтмеченныхПлатежныхПоручений.Удалить(
	   	ТаблицаОтмеченныхПлатежныхПоручений.Найти(ТекущееЗначение.Значение, "Ссылка"));
		
	КонецЦикла;
	
	ИнформацияПоДокументамВыгрузки.АдресТаблицыОтмеченныхПлатежей = 
		ПоместитьВоВременноеХранилище(ТаблицаОтмеченныхПлатежныхПоручений, ЭтотОбъект.УникальныйИдентификатор);
		
	ИнформацияПоДокументамВыгрузки.СписокРанееОтправленныхПлатежей = СписокРанееОтправленныхДокументов;	
	
	СписокОтмеченныхПлатежейБезФорматов = Новый СписокЗначений(); 
	Для Каждого ТекущееЗначение Из ТаблицаОтмеченныхПлатежейБезФорматов Цикл
		
		СписокОтмеченныхПлатежейБезФорматов.Добавить(ТекущееЗначение.Ссылка);
		
	КонецЦикла;	
	
	ИнформацияПоДокументамВыгрузки.СписокОтмеченныхПлатежейБезФорматов = СписокОтмеченныхПлатежейБезФорматов;	
	
	Возврат ИнформацияПоДокументамВыгрузки;
	
КонецФункции

&НаСервере
Функция ПроверитьТаблицуНаРанееОтправленныеДокументы(ТаблицаОтмеченныхПлатежныхПоручений)
	
	МассивДокументов = Новый Массив();
	Для Каждого СтрокаТаблицы Из ТаблицаОтмеченныхПлатежныхПоручений Цикл
		МассивДокументов.Добавить(СтрокаТаблицы.Ссылка);
	КонецЦикла;	
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатусыТранзакцийBankFeeds.Объект КАК Объект
	|ИЗ
	|	РегистрСведений.СтатусыТранзакцийBankFeeds КАК СтатусыТранзакцийBankFeeds
	|ГДЕ
	|	СтатусыТранзакцийBankFeeds.Объект В(&МассивДокументов)
	|	И (СтатусыТранзакцийBankFeeds.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПлатежныхДокументовBankFeeds.accepted)
	|			ИЛИ СтатусыТранзакцийBankFeeds.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПлатежныхДокументовBankFeeds.processing)
	|			ИЛИ СтатусыТранзакцийBankFeeds.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПлатежныхДокументовBankFeeds.unknown)
	|			ИЛИ СтатусыТранзакцийBankFeeds.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПлатежныхДокументовBankFeeds.deleted))";
	
	СписокДокументов = Новый СписокЗначений();
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		СписокДокументов.Добавить(Результат.Объект);
		
	КонецЦикла;	
	
	Возврат СписокДокументов;
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокВыбораПериодов()
	
	СписокВыбораПериода = Элементы.Период.СписокВыбора;
	
	СписокВыбораПериода.Добавить(НСтр("ru = 'Все время'"),     НСтр("ru = 'Все время'"));
	СписокВыбораПериода.Добавить("Дату",                     НСтр("ru = 'Дату...'"));
	СписокВыбораПериода.Добавить(НСтр("ru = 'Сегодня'"),       НСтр("ru = 'Сегодня'"));
	СписокВыбораПериода.Добавить(НСтр("ru = 'Три дня'"),       НСтр("ru = 'Три дня'"));
	СписокВыбораПериода.Добавить(НСтр("ru = 'Неделю'"),        НСтр("ru = 'Неделю'"));
	
	// Начальные установки
	Период = НСтр("ru = 'Все время'");
	Объект.ДатаНачала = '00010101';
	Объект.ДатаОкончания = '00010101';
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокСчетовНаСервере(ЗаполнитьБанковскиеСчета = Истина)
	
	Если ЗаполнитьБанковскиеСчета Тогда
		ЗаполнитьБанковскиеСчета();	
	КонецЕсли;	
	
	Объект.СписокСчетов.Очистить();
	Для Каждого ТекущаяСтрокаБанковскиеСчета Из Объект.БанковскиеСчета Цикл   
		
		Если ТекущаяСтрокаБанковскиеСчета.Пометка Тогда
			Объект.СписокСчетов.Добавить(ТекущаяСтрокаБанковскиеСчета.Ссылка);
		КонецЕсли;	
		
	КонецЦикла;	
	
	ОбновитьСписокПлатежей();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокПлатежей()
	
	ЗаполнитьТаблицуПлатежей(ДокументыОтбор);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеЗначения(БанковскийСчет = Неопределено, ПлатежныйДокумент = Неопределено)
	
	ЗаполнитьБанковскиеСчета();	
	
	Если ЗначениеЗаполнено(БанковскийСчет) Тогда
		Объект.СписокСчетов.Очистить();
		
		Для Каждого ТекущаяСтрокаБанковскиеСчета Из Объект.БанковскиеСчета Цикл
			
			Если ТекущаяСтрокаБанковскиеСчета.Ссылка = БанковскийСчет Тогда  
				ТекущаяСтрокаБанковскиеСчета.Пометка = Истина;
				Объект.СписокСчетов.Добавить(ТекущаяСтрокаБанковскиеСчета.Ссылка);
				Прервать;
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецЕсли;	

	ОбновитьСписокПлатежей();
	
	Если ЗначениеЗаполнено(ПлатежныйДокумент) Тогда
		
		Для Каждого ТекущаяСтрокаДокументыКВыгрузке Из Объект.ДокументыКВыгрузке Цикл
			
			Если ТекущаяСтрокаДокументыКВыгрузке.Ссылка = ПлатежныйДокумент Тогда  
				ТекущаяСтрокаДокументыКВыгрузке.Выгружать = Истина;
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПлатежей(ДокументыОтбор = Неопределено)
	
	ТаблицаДокументов = Обработки.КлиентБанкBankFeeds.ТаблицаДокументовКВыгрузке(Объект.СписокСчетов,
																		Объект.ДатаНачала,
																		Объект.ДатаОкончания,
																		Объект.ТолькоНеВыгруженные);
																		
	ЗаполнитьИнформациюОКонтрагентах(ТаблицаДокументов);
	
	Объект.ДокументыКВыгрузке.Загрузить(ТаблицаДокументов);
	Объект.ДокументыКВыгрузке.Сортировать("Дата");

	ТаблицаФорматаSepa = Объект.БанковскиеСчета.Выгрузить(Новый Структура("ФорматПлатежаПоIBAN", 
															Перечисления.ФорматыПлатежейBankFeeds.SEPA));	
	СписокБанковскихСчетов = Новый СписокЗначений();
	Для Каждого ТекСтрокаТаблицаФорматаSepa Из ТаблицаФорматаSepa Цикл
		
		СписокБанковскихСчетов.Добавить(ТекСтрокаТаблицаФорматаSepa.Ссылка);	
		
	КонецЦикла;
	
	Если ДокументыОтбор <> Неопределено Тогда
		Для Каждого ДокументКВыгрузке Из Объект.ДокументыКВыгрузке Цикл
		
			Отбор = Новый Структура("Ссылка", ДокументКВыгрузке.Ссылка);
			НайденныеСтроки = ДокументыОтбор.НайтиСтроки(Отбор);
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				ДокументКВыгрузке.Выгружать = Ложь;
			КонецЕсли;

			Если СписокБанковскихСчетов.НайтиПоЗначению(ДокументКВыгрузке.БанковскийСчет) <> Неопределено Тогда	
				 ДокументКВыгрузке.ФорматВыгрузки = Перечисления.ФорматыПлатежейBankFeeds.SEPA;
			КонецЕсли;	 
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформациюОКонтрагентах(ТаблицаПлатежей)

	МассивДокументов = ТаблицаПлатежей.ВыгрузитьКолонку("Ссылка");
	ДанныеКонтрагентов = ДенежныеСредстваСервер.СведенияОПолучателеПлательщикеПоДокументам(МассивДокументов);
	
	Для Каждого СтрокаТаблицы Из ТаблицаПлатежей Цикл
		
		Обработки.КлиентБанкBankFeeds.ЗаполнитьДанныеКонтрагента(ДанныеКонтрагентов,
														СтрокаТаблицы.КонтрагентНаим,
														СтрокаТаблицы.Ссылка,
														0);
		Обработки.КлиентБанкBankFeeds.ЗаполнитьДанныеКонтрагента(ДанныеКонтрагентов,
														СтрокаТаблицы.КПППолучателя,
														СтрокаТаблицы.Ссылка,
														1);
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьБанковскиеСчета()

	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодключенияКБанкамBankFeeds.Организация КАК Организация,
	|	ПодключенияКБанкамBankFeeds.Банк КАК Банк,
	|	ПодключенияКБанкамBankFeeds.НастройкиСервиса КАК НастройкиСервиса,
	|	БанковскиеСчетаОрганизаций.Ссылка КАК Ссылка,
	|	БанковскиеСчетаОрганизаций.НомерСчета КАК НомерСчета,
	|	БанковскиеСчетаОрганизаций.Ссылка КАК БанковскийСчет,
	|	ПодключенияКБанкамBankFeeds.ФорматПлатежаПоIBAN КАК ФорматПлатежаПоIBAN,
	|	ПодключенияКБанкамBankFeeds.ФорматПлатежаПоBBAN КАК ФорматПлатежаПоBBAN
	|ИЗ
	|	РегистрСведений.ПодключенияКБанкамBankFeeds КАК ПодключенияКБанкамBankFeeds
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	|		ПО ПодключенияКБанкамBankFeeds.Банк = БанковскиеСчетаОрганизаций.Банк
	|		И ПодключенияКБанкамBankFeeds.Организация = БанковскиеСчетаОрганизаций.Владелец
	|ГДЕ
	|	БанковскиеСчетаОрганизаций.ИдентификаторСчетаBankFeeds <> """"
	|	И НЕ БанковскиеСчетаОрганизаций.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПодключенияКБанкамBankFeeds.Организация,
	|	ПодключенияКБанкамBankFeeds.Банк,
	|	ПодключенияКБанкамBankFeeds.НастройкиСервиса,
	|	БанковскиеСчетаОрганизаций.Ссылка,
	|	БанковскиеСчетаОрганизаций.НомерСчета,
	|	БанковскиеСчетаОрганизаций.Ссылка,
	|	ПодключенияКБанкамBankFeeds.ФорматПлатежаПоIBAN,
	|	ПодключенияКБанкамBankFeeds.ФорматПлатежаПоBBAN
	|ИЗ
	|	РегистрСведений.ПодключенияКБанкамBankFeeds КАК ПодключенияКБанкамBankFeeds
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	|		ПО ПодключенияКБанкамBankFeeds.Банк = БанковскиеСчетаОрганизаций.Ссылка
	|		И ПодключенияКБанкамBankFeeds.Организация = БанковскиеСчетаОрганизаций.Владелец
	|ГДЕ
	|	БанковскиеСчетаОрганизаций.ИдентификаторСчетаBankFeeds <> """"";
	
	ПодключенныеБанковскиеСчета = Запрос.Выполнить().Выгрузить();
	
	Объект.БанковскиеСчета.Загрузить(ПодключенныеБанковскиеСчета);
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбновитьПодвал()
	
	СуммыПлатежейКВыгрузке.Очистить();
	
	ОтборСтрокКВыгрузке = Новый Структура("Выгружать", Истина);
	СтрокиКВыгрузке = Объект.ДокументыКВыгрузке.НайтиСтроки(ОтборСтрокКВыгрузке);
	
	КоличествоКВыгрузке = СтрокиКВыгрузке.Количество();
	
	Для каждого Строка Из СтрокиКВыгрузке Цикл
		СуммаПлатежей = СуммыПлатежейКВыгрузке.Получить(Строка.Валюта);
		Если СуммаПлатежей = Неопределено Тогда
			СуммыПлатежейКВыгрузке.Вставить(Строка.Валюта, Строка.Сумма);
		Иначе
			СуммыПлатежейКВыгрузке.Вставить(Строка.Валюта, СуммаПлатежей + Строка.Сумма);
		КонецЕсли;
	КонецЦикла;
	СформироватьСтрокуСуммыКВыгрузке();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьСтрокуСуммыКВыгрузке()
	
	СуммаКВыгрузке = "";
	Если СуммыПлатежейКВыгрузке.Количество() Тогда
		Для каждого СуммаПлатежей Из СуммыПлатежейКВыгрузке Цикл
			Если ЗначениеЗаполнено(СуммаПлатежей.Значение) Тогда
				СуммаКВыгрузке = СуммаКВыгрузке + Формат(СуммаПлатежей.Значение, "ЧДЦ=2") + " " 
																			+ Строка(СуммаПлатежей.Ключ) + ", ";
			КонецЕсли;
		КонецЦикла;
		СуммаКВыгрузке = Лев(СуммаКВыгрузке, СтрДлина(СуммаКВыгрузке) - 2);
		СуммаКВыгрузке = НСтр("ru = 'На сумму:'") + " " + ?(СуммаКВыгрузке = "", "-", СуммаКВыгрузке);
	Иначе
		СуммаКВыгрузке = НСтр("ru = 'На сумму: -'")
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	ЛокальнаяТекущаяДата = ОбменССервисомBankFeedsВызовСервера.ЛокальнаяТекущаяДата();
	
	Если Период = НСтр("ru = 'Все время'") Тогда
		
		Объект.ДатаНачала  = '00010101';
		Объект.ДатаОкончания   = '00010101';
		
	ИначеЕсли Период = "ЗаДату" Тогда
		
		Оповещение = Новый ОписаниеОповещения("ВыполнитьПослеВыбораДаты", ЭтаФорма, );
		ПоказатьВводДаты(Оповещение, ЛокальнаяТекущаяДата, НСтр("ru = 'Дата отбора платежей'"), ЧастиДаты.Дата);
		Возврат;
		
	ИначеЕсли ТипЗнч(Период) = Тип("Дата") Тогда
		
		Объект.ДатаНачала  = Период;
		Если ЗначениеЗаполнено(Период) Тогда
			Объект.ДатаОкончания   = КонецДня(Период);
		Иначе
			Объект.ДатаОкончания   = Период;
		КонецЕсли;
		
	ИначеЕсли Период = НСтр("ru = 'Сегодня'") Тогда
		
		Объект.ДатаНачала  = ЛокальнаяТекущаяДата;
		Объект.ДатаОкончания   = КонецДня(ЛокальнаяТекущаяДата);
		
	ИначеЕсли Период = НСтр("ru = 'Три дня'") Тогда
		
		Объект.ДатаНачала  = ЛокальнаяТекущаяДата - 3 * 24 * 3600;
		Объект.ДатаОкончания   = КонецДня(ЛокальнаяТекущаяДата);
		
	ИначеЕсли Период = НСтр("ru = 'Неделю'") Тогда
		
		Объект.ДатаНачала  = ЛокальнаяТекущаяДата - 7 * 24 * 3600;
		Объект.ДатаОкончания   = КонецДня(ЛокальнаяТекущаяДата);
		
	КонецЕсли;
	
	ПериодПриИзмененииНаСервере();
	
	ОбновитьПодвал();
	
КонецПроцедуры

&НаСервере
Процедура ПериодПриИзмененииНаСервере()
	
	ОбновитьСписокПлатежей();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = "Дату" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Оповещение = Новый ОписаниеОповещения("ВыполнитьПослеВыбораДаты", ЭтотОбъект);
		
		ПоясняющийТекст = НСтр("ru = 'Выберите дату выгружаемых документов'") + " ";
		ОткрытьФорму(
			"ОбщаяФорма.ВыборДаты",
			Новый Структура("ПоясняющийТекст, НачальноеЗначение", ПоясняющийТекст),
			,,,,
			Оповещение,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) <> Тип("Дата") Тогда
		
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ОписаниеТиповДата = Новый ОписаниеТипов(Массив, , );
		
		Элемент.ОграничениеТипа = ОписаниеТиповДата;
		
		Элемент.КнопкаВыбора = Ложь;
		Элемент.РедактированиеТекста = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоНеВыгруженныеПриИзменении(Элемент)
	
	Объект.ТолькоНевыгруженные = (ТолькоНевыгруженные = 1);
	
	ОбновитьСписокПлатежей();
	
	ОбновитьПодвал();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКВыгрузкеВыгружатьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДокументыКВыгрузке.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Знак = ?(ТекущиеДанные.Выгружать, 1, -1);
	
	КоличествоКВыгрузке = КоличествоКВыгрузке + 1 * Знак;
	
	СуммаПлатежей = СуммыПлатежейКВыгрузке.Получить(ТекущиеДанные.Валюта);
	Если СуммаПлатежей = Неопределено Тогда
		СуммыПлатежейКВыгрузке.Вставить(ТекущиеДанные.Валюта, ТекущиеДанные.Сумма);
	Иначе
		СуммыПлатежейКВыгрузке.Вставить(ТекущиеДанные.Валюта, СуммаПлатежей + ТекущиеДанные.Сумма * Знак);
	КонецЕсли;
	СформироватьСтрокуСуммыКВыгрузке();
	
	Отбор = Новый Структура("Ссылка", ТекущиеДанные.Ссылка);
	НайденныеСтроки = ДокументыОтбор.НайтиСтроки(Отбор);
	
	Если ТекущиеДанные.Выгружать И НайденныеСтроки.Количество() = 0 Тогда
		НоваяСтрокаДокумента = ДокументыОтбор.Добавить();
		НоваяСтрокаДокумента.Ссылка = ТекущиеДанные.Ссылка;
	ИначеЕсли Не ТекущиеДанные.Выгружать И Не НайденныеСтроки.Количество() = 0 Тогда
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
			ДокументыОтбор.Удалить(НайденнаяСтрока);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеФормыПодтверждениеПлатежаВSaltEdge(Результат, ДополнительныеПараметры) Экспорт
	
	ОбменССервисомBankFeedsКлиент.ПроверитьСтатусПлатежейПослеОтправки(ЭтотОбъект);	
	
КонецПроцедуры	

&НаКлиенте
Процедура ВыполнитьПослеВыбораДаты(ВыбраннаяДата, Параметры) Экспорт
	
	ЛокальнаяТекущаяДата = ОбменССервисомBankFeedsВызовСервера.ЛокальнаяТекущаяДата();
	
	Если ЗначениеЗаполнено(ВыбраннаяДата) Тогда
		
		Объект.ДатаНачала  = НачалоДня(ВыбраннаяДата);
		Объект.ДатаОкончания   = КонецДня(ВыбраннаяДата);
		Период = ВыбраннаяДата;
		
		Массив = Новый Массив;
		Массив.Добавить(Тип("Дата"));
		ОписаниеТиповДата = Новый ОписаниеТипов(Массив, , );
		
		Элементы.Период.ОграничениеТипа = ОписаниеТиповДата;
		
		Элементы.Период.КнопкаВыбора = Истина;
		Элементы.Период.РедактированиеТекста = Истина;
	Иначе
		
		Если ТипЗнч(Период) = Тип("Дата") Тогда
			Возврат;
		КонецЕсли;
		
		Если Объект.ДатаНачала  = '00010101' И Объект.ДатаОкончания = '00010101' Тогда
			Период = НСтр("ru = 'Все время'");
		ИначеЕсли Объект.ДатаНачала = НачалоДня(ЛокальнаяТекущаяДата)
			И Объект.ДатаОкончания = КонецДня(ЛокальнаяТекущаяДата) Тогда
			Период = НСтр("ru = 'Сегодня'");
		ИначеЕсли Объект.ДатаНачала = НачалоДня(ЛокальнаяТекущаяДата) - 3 * 24 * 3600
			И Объект.ДатаДатаОкончания = КонецДня(ЛокальнаяТекущаяДата) Тогда
			Период = НСтр("ru = 'Три дня'");
		ИначеЕсли Объект.ДатаНачала = НачалоДня(ЛокальнаяТекущаяДата) - 7 * 24 * 3600
			И Объект.ДатаДатаОкончания = КонецДня(ЛокальнаяТекущаяДата) Тогда
			Период = НСтр("ru = 'Неделю'");
		КонецЕсли;
	КонецЕсли;
	
	ПериодПриИзмененииНаСервере();
	
	ОбновитьПодвал();
	
КонецПроцедуры


СуммыПлатежейКВыгрузке = Новый Соответствие;

#КонецОбласти
