#Область ОписаниеПеременных

&НаКлиенте
Перем ВыполняетсяЗакрытие;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("БазоваяВерсия") Тогда
		Отказ = Истина;
	КонецЕсли;

	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	ТекущаяОрганизация = Справочники.Организации.ПолучитьОрганизациюПоУмолчанию();
	
	Элементы.СтраницыДекорацийНавигации.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Элементы.СтраницыШагов.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Элементы.СтраницыКомандныхПанелей.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Элементы.СтраницыСовпадениеПаролей.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Элементы.СтраницыОшибкаЭлектронногоАдреса.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Элементы.СтраницыЗаголовокНаименования.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Элементы.ГруппаДобавитьОрганизацию.Видимость = Ложь;
	
	ИнициализироватьНачальныеНастройки();
	ИнициализироватьИнформациюОВалютах();
	ИнициализироватьКонтактнуюИнформацию();
	
	ПрочитатьДанныеОрганизации();
	
	РеквизитыОрганизации = Новый Структура("
		|ИндивидуальныйПредприниматель, 
		|ИНН, 
		|КодНалоговогоОргана, 
		|КодПоОКПО, 
		|КПП, 
		|ОГРН, 
		|Префикс");
	ЗаполнитьЗначенияСвойств(РеквизитыОрганизации, ЭтаФорма);

	ОтветственныеЛица = Новый Структура("
		|РуководительФИО, 
		|ТекущаяДолжностьРуководителя, 
		|БухгалтерФИО");
	ЗаполнитьЗначенияСвойств(ОтветственныеЛица, ЭтаФорма);
	
	Если ЗначениеЗаполнено(Справочники.Организации.ОрганизацияПоУмолчанию()) Тогда
		ОбновитьСтрокуРеквизитовОрганизации(ЭтаФорма,РеквизитыОрганизации);
		ОбновитьСтрокуОтветственныхЛиц(ЭтаФорма, ОтветственныеЛица);
	КонецЕсли;
	
	РеквизитыБанка = Новый Структура("
			|Банк, 
			|БИКБанка, 
			|ВалютаРасчетногоСчета, 
			|ГородБанка, 
			|КоррСчетБанка, 
			|НаименованиеБанка, 
			|РучноеИзменениеРеквизитовБанка");
	
	ЗаполнитьЗначенияСвойств(РеквизитыБанка, ЭтаФорма);

	ОбновитьСтрокуРеквизитовБанка(ЭтаФорма, РеквизитыБанка);
	
	РеквизитыБанка = Новый Структура("
		|БанкДляРасчетов, 
		|БИКБанкаДляРасчетов, 
		|ГородБанкаДляРасчетов, 
		|КоррСчетБанкаДляРасчетов, 
		|НаименованиеБанкаДляРасчетов, 
		|РучноеИзменениеРеквизитовБанкаДляРасчетов");
	ЗаполнитьЗначенияСвойств(РеквизитыБанка, ЭтаФорма);
	
	ОбновитьСтрокуРеквизитовБанка(ЭтаФорма, РеквизитыБанка, Истина);
	
	УстановитьНазваниеКомандыРеквизитовОрганизации(ЭтаФорма);
	УстановитьНазваниеКомандыОтветственныхЛиц(ЭтаФорма);
	
	ДобавитьСтраницуПерехода(СтраницыПереходов, Элементы.СтраницаОбщаяИнформация, Ложь,,, "НаименованиеПользователя");
	ДобавитьСтраницуПерехода(СтраницыПереходов, Элементы.СтраницаВариантНастройки, Истина, Ложь,, "ПервоеИспользованиеУТ");
	ДобавитьСтраницуПерехода(СтраницыПереходов, Элементы.СтраницаСведенияОрганизации, Истина,,, "ИндивидуальныйПредприниматель");
	ДобавитьСтраницуПерехода(СтраницыПереходов, Элементы.СтраницаКонтакты,Истина,,, "");
	ДобавитьСтраницуПерехода(СтраницыПереходов, Элементы.СтраницаСчет,Истина,,, "НомерСчета");
	ДобавитьСтраницуПерехода(СтраницыПереходов, Элементы.СтраницаЦены,Истина,,,"Декорация8");
	ДобавитьСтраницуПерехода(СтраницыПереходов, Элементы.СтраницаЗавершение, Ложь,,, "НадписьЗавершение");
	
	УстановитьЦветЗаголовкаПоляОшибки();
	УстановитьНазваниеКомандыРеквизитовОрганизации(ЭтаФорма);
	УстановитьНазваниеКомандыОтветственныхЛиц(ЭтаФорма);
	
	ДоступностьБанковОстатковБезналичных(ЭтаФорма,НомерСчета);
	
	Элементы.ЦенаВключаетНДС.Видимость = СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.Общая");
	
	ДоступностьСозданияДокументовВводаНачальныхОстатков();
	
	УстановитьДоступностьЭлементов();
	
	ЭтоЗапускИзКомандногоИнтерфейса = Ложь;
	Если Параметры.Свойство("ЭтоЗапускИзКомандногоИнтерфейса") Тогда
		ЭтоЗапускИзКомандногоИнтерфейса = Параметры.ЭтоЗапускИзКомандногоИнтерфейса;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СтруктураПараметров = СтроковыеФункцииКлиентСервер.ПараметрыИзСтроки(ПараметрЗапуска);
	Если НЕ ЭтоЗапускИзКомандногоИнтерфейса И СтруктураПараметров.Свойство("Trade103Data") Тогда
		ПутьКФайлуЗагрузки = СтруктураПараметров.Trade103Data;
				
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("КонфигурацияИсточник", "УТ");
		ПараметрыОткрытия.Вставить("ПутьКФайлуЗагрузки", ПутьКФайлуЗагрузки);
		
		ОткрытьФорму("Обработка.ПомощникПереходаСДругихКонфигураций.Форма.Форма", ПараметрыОткрытия);
				
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ВыполняетсяЗакрытие Тогда
		
		Если Не ДанныеЗаписаны Тогда 
			Отказ = Истина;
			ОткрытьФорму("Обработка.ПомощникНастройкиПараметровБазовойВерсии.Форма.ДиалогОтмены", , ЭтаФорма,,,, 
				Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		ЗаписатьВалютыСервер();
		ВыполняетсяЗакрытие = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(РезультатВыбора, ИсточникВыбора)
	Если Не (ИсточникВыбора.ИмяФормы = "Справочник.БанковскиеСчетаОрганизаций.Форма.РеквизитыБанка"
		Или ИсточникВыбора.ИмяФормы = "Справочник.КлассификаторБанков.Форма.ФормаВыбора") Тогда
		Возврат;
	КонецЕсли;
	
	Если (ИсточникВыбора.ИмяФормы = "Справочник.БанковскиеСчетаОрганизаций.Форма.РеквизитыБанка") Тогда
		Если Не ПустаяСтрока(РезультатВыбора) Тогда
			Если РезультатВыбора.Реквизит = "БИКБанка" Тогда
				РучноеИзменениеРеквизитовБанка	= РезультатВыбора.РучноеИзменение;
				БИКБанка						= РезультатВыбора.ЗначенияПолей.БИК;
				НаименованиеБанка				= РезультатВыбора.ЗначенияПолей.Наименование;
				КоррСчетБанка					= РезультатВыбора.ЗначенияПолей.КоррСчет;
				ГородБанка						= РезультатВыбора.ЗначенияПолей.Город;
				Если РезультатВыбора.РучноеИзменение Тогда
					Банк				 = "";
				Иначе
					Банк				 = РезультатВыбора.Банк;
				КонецЕсли;
			ИначеЕсли РезультатВыбора.Реквизит = "БИКБанкаДляРасчетов" Тогда
				РучноеИзменениеРеквизитовБанкаДляРасчетов	= РезультатВыбора.РучноеИзменение;
				БИКБанкаДляРасчетов							= РезультатВыбора.ЗначенияПолей.БИК;
				НаименованиеБанкаДляРасчетов				= РезультатВыбора.ЗначенияПолей.Наименование;
				КоррСчетБанкаДляРасчетов					= РезультатВыбора.ЗначенияПолей.КоррСчет;
				ГородБанкаДляРасчетов						= РезультатВыбора.ЗначенияПолей.Город;
				Если РезультатВыбора.РучноеИзменение Тогда
					БанкДляРасчетов = "";
				Иначе
					БанкДляРасчетов = РезультатВыбора.Банк;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли (ИсточникВыбора.ИмяФормы = "Справочник.КлассификаторБанков.Форма.ФормаВыбора") Тогда	
		Если ТипЗнч(РезультатВыбора) = Тип("СправочникСсылка.КлассификаторБанков") Тогда
			Если ИмяРедактируемогоРеквизита = "БИКБанка" Тогда
				Банк = РезультатВыбора;
				ЗаполнитьРеквизитыБанкаПоБанку(РезультатВыбора, "Банк", Ложь);
			ИначеЕсли ИмяРедактируемогоРеквизита = "БИКБанкаДляРасчетов" Тогда
				БанкДляРасчетов = РезультатВыбора;
				ЗаполнитьРеквизитыБанкаПоБанку(РезультатВыбора, "БанкДляРасчетов", Ложь);
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	
	Если ИмяРедактируемогоРеквизита = "БИКБанка" Тогда
		РеквизитыБанка = Новый Структура("
			|Банк, 
			|БИКБанка, 
			|ВалютаРасчетногоСчета, 
			|ГородБанка, 
			|КоррСчетБанка, 
			|НаименованиеБанка, 
			|РучноеИзменениеРеквизитовБанка");
			
		ЗаполнитьЗначенияСвойств(РеквизитыБанка, ЭтаФорма);
		ОбновитьСтрокуРеквизитовБанка(ЭтаФорма, РеквизитыБанка);
	ИначеЕсли ИмяРедактируемогоРеквизита = "БИКБанкаДляРасчетов" Тогда
		РеквизитыБанка = Новый Структура("
			|БанкДляРасчетов, 
			|БИКБанкаДляРасчетов, 
			|ГородБанкаДляРасчетов, 
			|КоррСчетБанкаДляРасчетов, 
			|НаименованиеБанкаДляРасчетов, 
			|РучноеИзменениеРеквизитовБанкаДляРасчетов");
			
		ЗаполнитьЗначенияСвойств(РеквизитыБанка, ЭтаФорма);
		ОбновитьСтрокуРеквизитовБанка(ЭтаФорма, РеквизитыБанка, Истина);
	КонецЕсли;	
	ДоступностьРеквизитовИКомандБанкаРасчетов();
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте 
Процедура Подключаемый_ВалютаПриИзменении(Элемент)
	ИдентификаторВалюты = СтрЗаменить(Элемент.Имя, "Валюта__", "");

	ИскомаяВалюта = МониторингЦелевыхПоказателейВызовСервера.ПолучитьСсылкуСправочникаПоИдентификатору("Валюты", ИдентификаторВалюты);
	
	ИскомаяВалютаВСписке = ВалютыРасчетов.НайтиПоЗначению(ИскомаяВалюта);
	ИскомаяВалютаВСписке.Пометка = НЕ ИскомаяВалютаВСписке.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПользователяПриИзменении(Элемент)
	ПользовательИнфБазыИмя =
		ПользователиСлужебныйКлиентСервер.ПолучитьКраткоеИмяПользователяИБ(НаименованиеПользователя);
		
	// Заполним реквизиты организации
	Наименование = НаименованиеПользователя;
	НаименованиеПолное = НаименованиеПользователя;
	НаименованиеСокращенное = СокращенноеФИО(НаименованиеПолное);
	
	Если Не ПустаяСтрока(НаименованиеПользователя) Тогда
		Элементы.НадписьФИО.ЦветТекста = ЦветЗаголовкаАвто;
	КонецЕсли;
	Если Не ПустаяСтрока(ПользовательИнфБазыИмя) Тогда
		Элементы.ПользовательИнфБазыИмя.ЦветТекстаЗаголовка = ЦветЗаголовкаАвто;
	КонецЕсли;
	
	ПроверитьЗаполнениеКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИнфБазыИмяПриИзменении(Элемент)
	ПроверитьЗаполнениеКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеПароляПриИзменении(Элемент)
	ПриИзмененииПароля();
КонецПроцедуры

&НаКлиенте
Процедура ИндивидуальныйПредпринимательПриИзменении(Элемент)
	Если ИндивидуальныйПредприниматель = 1 Тогда
		Элементы.СтраницыЗаголовокНаименования.ТекущаяСтраница = Элементы.СтраницаЗаголовокИП;
		ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель");
	Иначе
		Элементы.СтраницыЗаголовокНаименования.ТекущаяСтраница = Элементы.СтраницаЗаголовокЮЛ;
		ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)
	Наименование = НаименованиеПолное;
	
	Если ИндивидуальныйПредприниматель = 1 Тогда
		НаименованиеСокращенное = СокращенноеФИО(НаименованиеПолное);
	Иначе
		НаименованиеСокращенное = Наименование;
	КонецЕсли;
		
	Если Не ПустаяСтрока(НаименованиеПолное) Тогда
		Элементы.ЗаголовокНаименованиеИП.ЦветТекста = ЦветЗаголовкаАвто;
		Элементы.ЗаголовокНаименованиеЮЛ.ЦветТекста = ЦветЗаголовкаАвто;
		СведенияОрганизацииЗаполняются = Истина;
	КонецЕсли;
	
	ПроверитьЗаполнениеКлиент();
КонецПроцедуры

&НаКлиенте
Процедура СистемаНалогообложенияПриИзменении(Элемент)
	
	Если Не СистемаНалогообложения.Пустая() Тогда
		Элементы.СистемаНалогообложения.ЦветТекстаЗаголовка = ЦветЗаголовкаАвто;
		СведенияОрганизацииЗаполняются = Истина;
		Элементы.ЦенаВключаетНДС.Видимость = СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.Общая");
	КонецЕсли;
	
	ПроверитьЗаполнениеКлиент();
	УстановитьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ПрименяетсяПСНПриИзменении(Элемент)
	УстановитьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ПрименяетсяАУСНПриИзменении(Элемент)
	УстановитьДоступностьЭлементов();
КонецПроцедуры



&НаКлиенте
Процедура ИспользоватьРозничныеПродажиПриИзменении(Элемент)
	Элементы.РозничнаяТорговляОблагаетсяЕНВД.Доступность = ИспользоватьРозничныеПродажи;
	Если Не ИспользоватьРозничныеПродажи Тогда
		РозничнаяТорговляОблагаетсяЕНВД = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НомерСчетаПриИзменении(Элемент)
	НомерСчетаПриИзмененииСервер();
	
	ДоступностьБанковОстатковБезналичных(ЭтаФорма,НомерСчета);
КонецПроцедуры

&НаКлиенте
Процедура БИКБанкаПриИзменении(Элемент)
	ИмяРедактируемогоРеквизита = Элемент.Имя;
	РеквизитБанкаПриИзменении(Новый ОписаниеОповещения("БИКБанкаПриИзмененииЗавершение", ЭтотОбъект), Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура БИКБанкаПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    РеквизитыБанка = Новый Структура("
    |Банк, 
    |БИКБанка, 
    |ВалютаРасчетногоСчета, 
    |ГородБанка, 
    |КоррСчетБанка, 
    |НаименованиеБанка, 
    |РучноеИзменениеРеквизитовБанка");
    ЗаполнитьЗначенияСвойств(РеквизитыБанка, ЭтаФорма);
    
    ОбновитьСтрокуРеквизитовБанка(ЭтаФорма, РеквизитыБанка);
    ДоступностьРеквизитовИКомандБанкаРасчетов();

КонецПроцедуры

&НаКлиенте
Процедура БИКБанкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ИмяРедактируемогоРеквизита = Элемент.Имя;
	РеквизитБанкаПриВыборе(Элемент.Имя, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура БИКБанкаОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ИмяРедактируемогоРеквизита = Элемент.Имя;
	РеквизитБанкаОткрытие(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура БИКБанкаДляРасчетовПриИзменении(Элемент)
	ИмяРедактируемогоРеквизита = Элемент.Имя;
	РеквизитБанкаПриИзменении(Новый ОписаниеОповещения("БИКБанкаДляРасчетовПриИзмененииЗавершение", ЭтотОбъект), Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура БИКБанкаДляРасчетовПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    РеквизитыБанка = Новый Структура("
    |БанкДляРасчетов, 
    |БИКБанкаДляРасчетов, 
    |ГородБанкаДляРасчетов, 
    |КоррСчетБанкаДляРасчетов, 
    |НаименованиеБанкаДляРасчетов, 
    |РучноеИзменениеРеквизитовБанкаДляРасчетов");
    ЗаполнитьЗначенияСвойств(РеквизитыБанка, ЭтаФорма);
    
    ОбновитьСтрокуРеквизитовБанка(ЭтаФорма, РеквизитыБанка, Истина);
    ДоступностьРеквизитовИКомандБанкаРасчетов();

КонецПроцедуры

&НаКлиенте
Процедура БИКБанкаДляРасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ИмяРедактируемогоРеквизита = Элемент.Имя;
	РеквизитБанкаПриВыборе(Элемент.Имя, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура БИКБанкаДляРасчетовОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ИмяРедактируемогоРеквизита = Элемент.Имя;
	РеквизитБанкаОткрытие(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ИспользуетсяБанкДляРасчетовПриИзменении(Элемент)
	ДоступностьРеквизитовИКомандБанкаРасчетов();
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТекущийОстатокБезналичныхДенежныхСредствПриИзменении(Элемент)
	УстановитьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТекущийОстатокНаличныхДенежныхСредствПриИзменении(Элемент)
	УстановитьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура СпособЗаданияЦеныВручнуюПриИзменении(Элемент)
	ДоступностьНаценки();
КонецПроцедуры

&НаКлиенте
Процедура СпособЗаданияЦеныНаценкаПриИзменении(Элемент)
	ДоступностьНаценки();
КонецПроцедуры

&НаКлиенте
Процедура НомерСчетаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ОчиститьСообщения();
	
	ТекстОшибки = "";
	Валютный = Ложь;
	
	Если НЕ ПустаяСтрока(Текст) 
		И НЕ ДенежныеСредстваКлиентСерверЛокализация.ПроверитьКорректностьНомераСчета(Текст, Валютный, ТекстОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "НомерСчета");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Далее(Команда)
	ОсуществитьПереходВперед();
КонецПроцедуры
 
&НаКлиенте
Процедура Назад(Команда)
	ОсуществитьПереходНазад();
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьНастройку(Команда)
	ЗавершениеНастройки = Истина;
	
	ЗаписатьИзмененияВИБ();
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Настройка программы завершена'"), , НСтр("ru = 'Минимально необходимая настройка завершена.'"), БиблиотекаКартинок.Информация32);
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДругиеВалюты(Команда)
	
	ДобавлениеДополнительныхВалют = Истина;
	ОткрытьФорму("Обработка.ЗагрузкаКурсовВалют.Форма.ПодборВалютИзКлассификатора",,ЭтаФорма,,,, Новый ОписаниеОповещения("ДобавитьДругиеВалютыЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДругиеВалютыЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ИнициализироватьИнформациюОВалютах();

КонецПроцедуры

&НаКлиенте
Процедура ПервоеИспользованиеУТ(Команда)
	
	ОсуществитьПереходВперед();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПомощникПереходаСТорговляИСклад77(Команда)
	
	ОткрытьФорму("Обработка.ПомощникПереходаСТорговляИСклад77.Форма");
	
	ЗаписатьПользователяСервер();
	
	ДанныеЗаписаны = Истина;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПомощникПереходаСУправлениеТорговлей103(Команда)
	
	ПараметрыОткрытия = Новый Структура("КонфигурацияИсточник", "УТ");
	ОткрытьФорму("Обработка.ПомощникПереходаСДругихКонфигураций.Форма.Форма", ПараметрыОткрытия);
	
	ЗаписатьПользователяСервер();
	ДанныеЗаписаны = Истина;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОрганизацию(Команда)
	ДобавитьОрганизациюСервер();
	
	СведенияОрганизацииЗаполняются = Ложь;
	ОсуществитьПереходКСтранице("СтраницаСведенияОрганизации");
	
	ДоступностьБанковОстатковБезналичных(ЭтаФорма,НомерСчета);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРеквизитыБанка(Команда)
	РеквизитыБанка = Новый Структура("
		|Банк, 
		|БИКБанка, 
		|ВалютаРасчетногоСчета, 
		|ГородБанка, 
		|КоррСчетБанка, 
		|НаименованиеБанка, 
		|РучноеИзменениеРеквизитовБанка");
	ЗаполнитьЗначенияСвойств(РеквизитыБанка, ЭтаФорма);
	
	ИзмененныеРеквизиты = Неопределено;

	
	ОткрытьФорму("Обработка.ПомощникНастройкиПараметровБазовойВерсии.Форма.РеквизитыБанка", РеквизитыБанка, ЭтаФорма,,,, Новый ОписаниеОповещения("ИзменитьРеквизитыБанкаЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРеквизитыБанкаЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ИзмененныеРеквизиты = Результат;
    Если Не ИзмененныеРеквизиты = Неопределено Тогда
        // Заполним значения реквизитов
        Для Каждого ИзмененныйРеквизит Из ИзмененныеРеквизиты Цикл 
            ЭтаФорма[ИзмененныйРеквизит.Ключ] = ИзмененныйРеквизит.Значение;
        КонецЦикла;
        ОбновитьСтрокуРеквизитовБанка(ЭтаФорма, ИзмененныеРеквизиты);
        ДоступностьРеквизитовИКомандБанкаРасчетов();
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРеквизитыБанкаДляРасчетов(Команда)
	РеквизитыБанка = Новый Структура("
		|БанкДляРасчетов, 
		|БИКБанкаДляРасчетов, 
		|ГородБанкаДляРасчетов, 
		|КоррСчетБанкаДляРасчетов, 
		|НаименованиеБанкаДляРасчетов, 
		|РучноеИзменениеРеквизитовБанкаДляРасчетов");
	ЗаполнитьЗначенияСвойств(РеквизитыБанка, ЭтаФорма);
	
	РеквизитыБанкаДляРасчетов = Новый Структура; 
	
	Для Каждого РеквизитБанка Из РеквизитыБанка Цикл 
		НовыйКлюч = СтрЗаменить(РеквизитБанка.Ключ, "ДляРасчетов", "");
		РеквизитыБанкаДляРасчетов.Вставить(НовыйКлюч, РеквизитБанка.Значение);
	КонецЦикла;
	РеквизитыБанкаДляРасчетов.Вставить("РеквизитыБанкаДляРасчетов", Истина);
	
	ИзмененныеРеквизиты = Неопределено;

	
	ОткрытьФорму("Обработка.ПомощникНастройкиПараметровБазовойВерсии.Форма.РеквизитыБанка", РеквизитыБанкаДляРасчетов, ЭтаФорма,,,, Новый ОписаниеОповещения("ИзменитьРеквизитыБанкаДляРасчетовЗавершение", ЭтотОбъект, Новый Структура("РеквизитыБанкаДляРасчетов", РеквизитыБанкаДляРасчетов)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРеквизитыБанкаДляРасчетовЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    РеквизитыБанкаДляРасчетов = ДополнительныеПараметры.РеквизитыБанкаДляРасчетов;
    
    
    ИзмененныеРеквизиты = Результат;
    Если Не ИзмененныеРеквизиты = Неопределено Тогда
        РеквизитыБанкаДляРасчетов.Очистить();
        
        // Заполним значения реквизитов
        Для Каждого ИзмененныйРеквизит Из ИзмененныеРеквизиты Цикл 
            ИмяЭлемента = ИзмененныйРеквизит.Ключ + "ДляРасчетов";
            
            ЭтаФорма[ИмяЭлемента] = ИзмененныйРеквизит.Значение;
            
            РеквизитыБанкаДляРасчетов.Вставить(ИмяЭлемента, ИзмененныйРеквизит.Значение);
        КонецЦикла;
        ОбновитьСтрокуРеквизитовБанка(ЭтаФорма, РеквизитыБанкаДляРасчетов, Истина);
        ДоступностьРеквизитовИКомандБанкаРасчетов();
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРеквизитыОрганизации(Команда)
	РеквизитыОрганизации = Новый Структура("
		|ИндивидуальныйПредприниматель, 
		|ИНН, 
		|КодНалоговогоОргана, 
		|КодПоОКПО, 
		|КПП, 
		|ОГРН, 
		|Префикс");
	ЗаполнитьЗначенияСвойств(РеквизитыОрганизации, ЭтаФорма);
	
	ИзмененныеРеквизиты = Неопределено;

	
	ОткрытьФорму("Обработка.ПомощникНастройкиПараметровБазовойВерсии.Форма.РеквизитыОрганизации", РеквизитыОрганизации, ЭтаФорма,,,, Новый ОписаниеОповещения("ИзменитьРеквизитыОрганизацииЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРеквизитыОрганизацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ИзмененныеРеквизиты = Результат;
    Если Не ИзмененныеРеквизиты = Неопределено Тогда
        // Заполним значения реквизитов
        Для Каждого ИзмененныйРеквизит Из ИзмененныеРеквизиты Цикл 
            ЭтаФорма[ИзмененныйРеквизит.Ключ] = ИзмененныйРеквизит.Значение;
        КонецЦикла;
        ОбновитьСтрокуРеквизитовОрганизации(ЭтаФорма, ИзмененныеРеквизиты);
    КонецЕсли;
    
    УстановитьНазваниеКомандыРеквизитовОрганизации(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОтветственныеЛица(Команда)
	ОтветственныеЛица = Новый Структура("
		|РуководительФИО, 
		|ТекущаяДолжностьРуководителя, 
		|БухгалтерФИО");
	ЗаполнитьЗначенияСвойств(ОтветственныеЛица, ЭтаФорма);
	
	ИзмененныеРеквизиты = Неопределено;

	
	ОткрытьФорму("Обработка.ПомощникНастройкиПараметровБазовойВерсии.Форма.ОтветственныеЛица", ОтветственныеЛица, ЭтаФорма,,,, Новый ОписаниеОповещения("ИзменитьОтветственныеЛицаЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОтветственныеЛицаЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ИзмененныеРеквизиты = Результат;
    Если Не ИзмененныеРеквизиты = Неопределено Тогда
        // Заполним значения реквизитов
        Для Каждого ИзмененныйРеквизит Из ИзмененныеРеквизиты Цикл 
            ЭтаФорма[ИзмененныйРеквизит.Ключ] = ИзмененныйРеквизит.Значение;
        КонецЦикла;
        ОбновитьСтрокуОтветственныхЛиц(ЭтаФорма, ИзмененныеРеквизиты);
    КонецЕсли;
    
    УстановитьНазваниеКомандыОтветственныхЛиц(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ВводОстатков(Команда)
	
	ЗаписатьИзмененияВИБ();
	
	ДанныеЗаписаны = Истина;
	
	ОткрытьФорму("Обработка.ЖурналДокументовВводаНачальныхОстатков.Форма.ФормаСписка");
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПриИзмененииРеквизитов

&НаКлиенте 
Процедура ПриИзмененииПароля()
	Если Пароль <> ПодтверждениеПароля Тогда
		Элементы.СтраницыСовпадениеПаролей.ТекущаяСтраница = Элементы.СтраницаПаролиНеСовпадают;
	ИначеЕсли ПустаяСтрока(Пароль) Тогда
		Элементы.СтраницыСовпадениеПаролей.ТекущаяСтраница = Элементы.СтраницаПаролиНеВведены;
	Иначе
		Элементы.СтраницыСовпадениеПаролей.ТекущаяСтраница = Элементы.СтраницаПаролиСовпадают;
	КонецЕсли;
	
	ПроверитьЗаполнениеКлиент();
КонецПроцедуры

&НаКлиенте 
Процедура ДоступностьНаценки()
	Если СпособЗаданияЦены = ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.Вручную") Тогда
		Элементы.Наценка.Доступность = Ложь;
	Иначе
		Элементы.Наценка.Доступность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДоступностьБанковОстатковБезналичных(Форма, НомерСчета)
	НомерСчетаЗаполнен = Не ПустаяСтрока(НомерСчета);
	
	Форма.Элементы.ГруппаТекущийОстатокБезналичныхДенежныхСредств.ТолькоПросмотр = Не НомерСчетаЗаполнен;
	
	Если Не НомерСчетаЗаполнен Тогда
		ИспользуетсяБанкДляРасчетов = Ложь;
		Форма.Элементы.БИКБанкаДляРасчетов.ТолькоПросмотр = Не ИспользуетсяБанкДляРасчетов;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте 
Процедура ДоступностьРеквизитовИКомандБанкаРасчетов()
	ДоступностьБанкаДляРасчетов = Не РучноеИзменениеРеквизитовБанка И Не Банк.Пустая()
		ИЛИ РучноеИзменениеРеквизитовБанка И Не ПустаяСтрока(БИКБанка);
		
	Элементы.ГруппаИспользуетсяБанкДляРасчетов.ТолькоПросмотр = Не ДоступностьБанкаДляРасчетов;
	
	Элементы.ГруппаРеквизитыБанкаДляРасчетовИКоманды.ТолькоПросмотр = Не ИспользуетсяБанкДляРасчетов;
	Элементы.ИзменитьРеквизитыБанкаДляРасчетов.Доступность = ИспользуетсяБанкДляРасчетов;
КонецПроцедуры

&НаСервере 
Процедура ДобавитьОрганизациюСервер()
	// Сохраним данные организации во временное хранилище
	СохранитьДанныеОрганизации();
	
	// Подготовим элементы формы к вводу новой организации
	ОчиститьРеквизитыОрганизации();
	
	РеквизитыБанка = Новый Структура("
		|Банк, 
		|БИКБанка, 
		|ВалютаРасчетногоСчета, 
		|ГородБанка, 
		|КоррСчетБанка, 
		|НаименованиеБанка, 
		|РучноеИзменениеРеквизитовБанка");
	ЗаполнитьЗначенияСвойств(РеквизитыБанка, ЭтаФорма);
	ОбновитьСтрокуРеквизитовБанка(ЭтаФорма, РеквизитыБанка);
	
	РеквизитыБанка = Новый Структура("
		|БанкДляРасчетов, 
		|БИКБанкаДляРасчетов, 
		|ГородБанкаДляРасчетов, 
		|КоррСчетБанкаДляРасчетов, 
		|НаименованиеБанкаДляРасчетов, 
		|РучноеИзменениеРеквизитовБанкаДляРасчетов");
	ЗаполнитьЗначенияСвойств(РеквизитыБанка, ЭтаФорма);
	ОбновитьСтрокуРеквизитовБанка(ЭтаФорма, РеквизитыБанка, Истина);
	
	// Дополним карту переходов
	Если Не ЗавершениеНастройки Тогда
		ДобавитьПереходыОрганизации();
	КонецЕсли;
КонецПроцедуры

&НаСервере 
Процедура ДобавитьПереходыОрганизации()
	ИндексПервогоПерехода = 3 * (НомерТекущейОрганизации + 1) - 1;
	
	ДобавитьСтраницуПерехода(СтраницыПереходов, Элементы.СтраницаСведенияОрганизации, Истина, , ИндексПервогоПерехода);
	ДобавитьСтраницуПерехода(СтраницыПереходов, Элементы.СтраницаКонтакты, Истина, , ИндексПервогоПерехода + 1);
	ДобавитьСтраницуПерехода(СтраницыПереходов, Элементы.СтраницаСчет, Истина, , ИндексПервогоПерехода + 2);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура ОбновитьСтрокуРеквизитовОрганизации(Форма, РеквизитыОрганизации = Неопределено)
	СтрокаРеквизитовОрганизации = "";
	
	Если Не РеквизитыОрганизации = Неопределено
		И ПустаяСтрока(РеквизитыОрганизации.ИНН + 
			?(РеквизитыОрганизации.ИндивидуальныйПредприниматель = 0, РеквизитыОрганизации.КПП, "") +
			РеквизитыОрганизации.КодПоОКПО + 
			РеквизитыОрганизации.ОГРН +
			РеквизитыОрганизации.Префикс) Тогда
		
		РеквизитыОрганизации = Неопределено;
	КонецЕсли;
	
	Если Не РеквизитыОрганизации = Неопределено Тогда
		СтрокаРеквизитовОрганизации = СтрокаРеквизитовОрганизации + 
			?(ПустаяСтрока(РеквизитыОрганизации.ИНН), "", НСтр("ru= 'ИНН:'") + Символы.НПП + РеквизитыОрганизации.ИНН); 
		Если РеквизитыОрганизации.ИндивидуальныйПредприниматель = 0 Тогда
			СтрокаРеквизитовОрганизации = СтрокаРеквизитовОрганизации + 
				?(ПустаяСтрока(РеквизитыОрганизации.КПП), "", 
					?(ПустаяСтрока(СтрокаРеквизитовОрганизации), "", ";" + Символы.НПП) + 
					НСтр("ru= 'КПП:'") + Символы.НПП + РеквизитыОрганизации.КПП); 
		КонецЕсли;
	 
		СтрокаРеквизитовОрганизации = СтрокаРеквизитовОрганизации + 
			?(ПустаяСтрока(РеквизитыОрганизации.КодПоОКПО), "", 
				?(ПустаяСтрока(СтрокаРеквизитовОрганизации), "", ";" + Символы.НПП) + 
				НСтр("ru= 'Код по ОКПО:'") + Символы.НПП + РеквизитыОрганизации.КодПоОКПО); 
		СтрокаРеквизитовОрганизации = СтрокаРеквизитовОрганизации + 
			?(ПустаяСтрока(РеквизитыОрганизации.ОГРН), "", 
				?(ПустаяСтрока(СтрокаРеквизитовОрганизации), "", ";" + Символы.НПП) + 
				НСтр("ru= 'ОГРН:'") + Символы.НПП + РеквизитыОрганизации.ОГРН); 
		СтрокаРеквизитовОрганизации = СтрокаРеквизитовОрганизации + 
			?(ПустаяСтрока(РеквизитыОрганизации.Префикс), "", 
				?(ПустаяСтрока(СтрокаРеквизитовОрганизации), "", ";" + Символы.НПП) + 
				НСтр("ru= 'Префикс:'") + Символы.НПП + РеквизитыОрганизации.Префикс); 
	КонецЕсли;
	
	Форма.СтрокаРеквизитовОрганизации = СтрокаРеквизитовОрганизации;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура ОбновитьСтрокуОтветственныхЛиц(Форма, ОтветственныеЛица = Неопределено)
	СтрокаОтветственныхЛиц = "";
	
	Если Не ОтветственныеЛица = Неопределено
		И ПустаяСтрока(ОтветственныеЛица.РуководительФИО + 
			ОтветственныеЛица.ТекущаяДолжностьРуководителя + 
			ОтветственныеЛица.БухгалтерФИО) Тогда
		
		ОтветственныеЛица = Неопределено;
	КонецЕсли;
	
	Если Не ОтветственныеЛица = Неопределено Тогда
		СтрокаОтветственныхЛиц = СтрокаОтветственныхЛиц + НСтр("ru= 'Руководитель:'") + Символы.НПП + 
									?(ПустаяСтрока(ОтветственныеЛица.РуководительФИО), "", ОтветственныеЛица.РуководительФИО); 
		СтрокаОтветственныхЛиц = СтрокаОтветственныхЛиц + ";" + Символы.НПП + НСтр("ru= 'Должность:'") + Символы.НПП + 
									?(ПустаяСтрока(ОтветственныеЛица.РуководительФИО), НСтр("ru= '<Не указана>'"), ОтветственныеЛица.ТекущаяДолжностьРуководителя); 
		СтрокаОтветственныхЛиц = СтрокаОтветственныхЛиц + ";" + Символы.НПП + НСтр("ru= 'Бухгалтер:'") + Символы.НПП + 
									?(ПустаяСтрока(ОтветственныеЛица.РуководительФИО), "", ОтветственныеЛица.БухгалтерФИО); 
	КонецЕсли;
	
	Форма.СтрокаОтветственныхЛиц = СтрокаОтветственныхЛиц;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура ОбновитьСтрокуРеквизитовБанка(Форма, РеквизитыБанка = Неопределено, БанкДляРасчетов = Ложь)
	СтрокаРеквизитовБанка = "";
	
	Суффикс = ?(БанкДляРасчетов, "ДляРасчетов", "");
	
	Если Не РеквизитыБанка = Неопределено
		И ПустаяСтрока(РеквизитыБанка["БИКБанка" + Суффикс] + 
			РеквизитыБанка["ГородБанка" + Суффикс] + 
			РеквизитыБанка["КоррСчетБанка" + Суффикс] + 
			РеквизитыБанка["НаименованиеБанка" + Суффикс]) Тогда
		
		РеквизитыБанка = Неопределено;
	КонецЕсли;
	
	Если Не РеквизитыБанка = Неопределено Тогда
		СтрокаРеквизитовБанка = СтрокаРеквизитовБанка + 
			?(ПустаяСтрока(РеквизитыБанка["ГородБанка" + Суффикс]), "", 
			РеквизитыБанка["ГородБанка" + Суффикс]); 
		СтрокаРеквизитовБанка = СтрокаРеквизитовБанка + 
			?(ПустаяСтрока(РеквизитыБанка["НаименованиеБанка" + Суффикс]), "", 
				?(ПустаяСтрока(СтрокаРеквизитовБанка), "", "," + Символы.НПП) + 
				РеквизитыБанка["НаименованиеБанка" + Суффикс]); 
		СтрокаРеквизитовБанка = СтрокаРеквизитовБанка + 
			?(ПустаяСтрока(РеквизитыБанка["БИКБанка" + Суффикс]), "", 
				?(ПустаяСтрока(СтрокаРеквизитовБанка), "", "," + Символы.НПП) + 
				НСтр("ru= 'БИК'") + Символы.НПП + РеквизитыБанка["БИКБанка" + Суффикс]); 
		СтрокаРеквизитовБанка = СтрокаРеквизитовБанка + 
			?(ПустаяСтрока(РеквизитыБанка["КоррСчетБанка" + Суффикс]), "", 
				?(ПустаяСтрока(СтрокаРеквизитовБанка), "", "," + Символы.НПП) + 
				НСтр("ru= 'к/с'") + Символы.НПП + РеквизитыБанка["КоррСчетБанка" + Суффикс]); 
	КонецЕсли;
	
	Если Не БанкДляРасчетов Тогда
		Форма.СтрокаРеквизитовБанка = СтрокаРеквизитовБанка;
	Иначе 
		Форма.СтрокаРеквизитовБанкаДляРасчетов = СтрокаРеквизитовБанка;
	КонецЕсли;
КонецПроцедуры

&НаСервере 
Процедура НомерСчетаПриИзмененииСервер()
	Если Не ПустаяСтрока(НомерСчета) Тогда
		Валюта = ДенежныеСредстваСерверЛокализация.ПолучитьВалютуПоНомеруСчета(НомерСчета);
		Если ЗначениеЗаполнено(Валюта) Тогда
			ВалютаРасчетногоСчета = Валюта;
			Элементы.НадписьВалютаОстаткаБезналичных.Заголовок = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Валюта, "Наименование");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РеквизитБанкаПриИзменении(Знач Оповещение, ИмяЭлемента)
	СписокВариантовОтветовНаВопрос = Новый СписокЗначений;
	СписокВариантовОтветовНаВопрос.Добавить("ВыбратьИзСписка", НСтр("ru='Выбрать из списка'"));
	СписокВариантовОтветовНаВопрос.Добавить("ПродолжитьВвод",  НСтр("ru='Продолжить ввод'"));
	СписокВариантовОтветовНаВопрос.Добавить("ОтменитьВвод",	   НСтр("ru='Отменить ввод'"));
	
	Если (ИмяЭлемента = "БИКБанка") Тогда
		Если Не РучноеИзменениеРеквизитовБанка Тогда
			Если Не ЗаполнитьРеквизитыБанкаПоБИК("Банк", БИКБанка, Истина) Тогда
				ТекстВопроса = НСтр("ru = 'Банк с БИК  %Значение% не найден в классификаторе банков.'");
				ТекстВопроса = СтрЗаменить(ТекстВопроса,"%Значение%",БИКБанка);
				
				Ответ = Неопределено;

				ПараметрыОповещения = Новый Структура();
				ПараметрыОповещения.Вставить("ИмяЭлемента", ИмяЭлемента);
				ПараметрыОповещения.Вставить("Оповещение", Оповещение);
				ПараметрыОповещения.Вставить("СписокВариантовОтветовНаВопрос", СписокВариантовОтветовНаВопрос);
				ПараметрыОповещения.Вставить("ТекстВопроса", ТекстВопроса);
				ОповещениеДляВопроса = Новый ОписаниеОповещения("РеквизитБанкаПриИзмененииЗавершение", ЭтотОбъект, ПараметрыОповещения);
				ПоказатьВопрос(ОповещениеДляВопроса, ТекстВопроса, СписокВариантовОтветовНаВопрос, 0,,НСтр("ru = 'Выбор банка из классификатора'"));
                Возврат;
            КонецЕсли;
		КонецЕсли;
	ИначеЕсли (ИмяЭлемента = "БИКБанкаДляРасчетов") Тогда		
		Если Не РучноеИзменениеРеквизитовБанкаДляРасчетов Тогда
			Если Не ЗаполнитьРеквизитыБанкаПоБИК("БанкДляРасчетов", БИКБанкаДляРасчетов, Истина) Тогда
				ТекстВопроса = НСтр("ru = 'Банк с БИК  %Значение% не найден в классификаторе банков.'");
				ТекстВопроса = СтрЗаменить(ТекстВопроса,"%Значение%",БИКБанкаДляРасчетов);
				
				ПоказатьВопрос(Новый ОписаниеОповещения("РеквизитБанкаПриИзмененииПослеВопроса", ЭтотОбъект, Новый Структура("Оповещение", Оповещение)), 
											ТекстВопроса, СписокВариантовОтветовНаВопрос, 0,,НСтр("ru = 'Выбор банка-корреспондента из классификатора'"));
                Возврат;
 			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	РеквизитБанкаПриИзмененииФрагмент(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура РеквизитБанкаПриИзмененииПослеВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Оповещение = ДополнительныеПараметры.Оповещение;
    
    
    Ответ = РезультатВопроса;
    
    Если Ответ = "ОтменитьВвод" Тогда
        БИКБанкаДляРасчетов = "";
    ИначеЕсли Ответ = "ПродолжитьВвод" Тогда
        РучноеИзменениеРеквизитовБанкаДляРасчетов = Истина;
        БИКБанкаДляРасчетов = БИКБанкаДляРасчетов;
    ИначеЕсли Ответ = "ВыбратьИзСписка" Тогда
        СтруктураПараметров = Новый Структура;
        СтруктураПараметров.Вставить("Реквизит", "БИКБанкаДляРасчетов");
        ОткрытьФорму("Справочник.КлассификаторБанков.Форма.ФормаВыбора", СтруктураПараметров, ЭтаФорма);
    КонецЕсли;
    
    РеквизитБанкаПриИзмененииФрагмент(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура РеквизитБанкаПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ИмяЭлемента = ДополнительныеПараметры.ИмяЭлемента;
    Оповещение = ДополнительныеПараметры.Оповещение;
    СписокВариантовОтветовНаВопрос = ДополнительныеПараметры.СписокВариантовОтветовНаВопрос;
    ТекстВопроса = ДополнительныеПараметры.ТекстВопроса;
    
    
    Ответ = РезультатВопроса;
    
    Если Ответ = "ОтменитьВвод" Тогда
        БИКБанка = "";
    ИначеЕсли Ответ = "ПродолжитьВвод" Тогда
        РучноеИзменениеРеквизитовБанка = Истина;
        БИКБанка = БИКБанка;
    ИначеЕсли Ответ = "ВыбратьИзСписка" Тогда
        СтруктураПараметров = Новый Структура;
        СтруктураПараметров.Вставить("Реквизит", "БИКБанка");
        ОткрытьФорму("Справочник.КлассификаторБанков.Форма.ФормаВыбора", СтруктураПараметров, ЭтаФорма);
    КонецЕсли;
    
    РеквизитБанкаПриИзмененииФрагмент(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура РеквизитБанкаПриИзмененииФрагмент(Знач Оповещение)
    
    ВыполнитьОбработкуОповещения(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура РеквизитБанкаПриВыборе(ИмяЭлемента, Форма)
	Если ИмяЭлемента = "БИКБанка" Тогда
		Если Не РучноеИзменениеРеквизитовБанка Тогда
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("Реквизит", ИмяЭлемента);
       		ОткрытьФорму("Справочник.КлассификаторБанков.Форма.ФормаВыбора", СтруктураПараметров, Форма);
		КонецЕсли;
	ИначеЕсли ИмяЭлемента = "БИКБанкаДляРасчетов" Тогда
		Если Не РучноеИзменениеРеквизитовБанкаДляРасчетов Тогда
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("Реквизит", ИмяЭлемента);
       		ОткрытьФорму("Справочник.КлассификаторБанков.Форма.ФормаВыбора", СтруктураПараметров, Форма);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитБанкаОткрытие(ИмяЭлемента)
	
	СтруктураПараметров = Новый Структура;
    СтруктураПараметров.Вставить("Реквизит", ИмяЭлемента);
    ЗначенияПараметров = Новый Структура;
	
	Если ИмяЭлемента = "БИКБанка" Тогда
		
		СтруктураПараметров.Вставить("РучноеИзменение", РучноеИзменениеРеквизитовБанка);
		
		Если РучноеИзменениеРеквизитовБанка Тогда
			ЗначенияПараметров.Вставить("БИК", БИКБанка);
			ЗначенияПараметров.Вставить("Наименование", НаименованиеБанка);
			ЗначенияПараметров.Вставить("КоррСчет", КоррСчетБанка);
			ЗначенияПараметров.Вставить("Город", ГородБанка);
		Иначе
		    СтруктураПараметров.Вставить("Банк", Банк);
		КонецЕсли;
						
	ИначеЕсли ИмяЭлемента = "БИКБанкаДляРасчетов" Тогда
		
		СтруктураПараметров.Вставить("РучноеИзменение", РучноеИзменениеРеквизитовБанкаДляРасчетов);
				
		Если РучноеИзменениеРеквизитовБанкаДляРасчетов Тогда
        	ЗначенияПараметров.Вставить("БИК", БИКБанкаДляРасчетов);
			ЗначенияПараметров.Вставить("Наименование", НаименованиеБанкаДляРасчетов);
			ЗначенияПараметров.Вставить("КоррСчет", КоррСчетБанкаДляРасчетов);
			ЗначенияПараметров.Вставить("Город", ГородБанкаДляРасчетов);
		Иначе
			СтруктураПараметров.Вставить("Банк", БанкДляРасчетов);
		КонецЕсли;	
		
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ЗначенияПолей", ЗначенияПараметров);
	ОткрытьФорму("Справочник.БанковскиеСчетаОрганизаций.Форма.РеквизитыБанка",СтруктураПараметров, ЭтаФорма);
			    	
КонецПроцедуры

#КонецОбласти

#Область ИнициализацияДанных

&НаСервере 
Процедура ИнициализироватьНачальныеНастройки()
	ИндивидуальныйПредприниматель = 1;
	НомерТекущейОрганизации = 1;
	ТекущийИндексПерехода = 0;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ОписаниеПользователя = Неопределено;
	Если Не ТекущийПользователь = Пользователи.СсылкаНеуказанногоПользователя() Тогда
		ИдентификаторПользователяИБ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийПользователь, "ИдентификаторПользователяИБ");
		ОписаниеПользователя = Пользователи.СвойстваПользователяИБ(ИдентификаторПользователяИБ);
		НаименованиеПользователя = ОписаниеПользователя.ПолноеИмя;
		ПользовательИнфБазыИмя = ОписаниеПользователя.Имя;
		
		// Перенос Ф.И.О. в реквизит организации
		Наименование = НаименованиеПользователя;
		НаименованиеПолное = НаименованиеПользователя;
		НаименованиеСокращенное = СокращенноеФИО(НаименованиеПолное);
	КонецЕсли;
	
	ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель;
	СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.Вручную;
КонецПроцедуры

&НаСервере 
Процедура ИнициализироватьИнформациюОВалютах()
	
	ПрефиксЭлементаФормы = "Валюта__";
	ОбработчикСобытияЭлементаФормы = "Подключаемый_ВалютаПриИзменении";
	
	ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
	
	// Получим созданные в системе валюты
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПоВалютам();
	Запрос.УстановитьПараметр("ВалютыРасчетов", ВалютыРасчетов);
	РезультатЗапроса = Запрос.Выполнить();
	
	// Обновим список элементов
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТаблицаЭлементов = РезультатЗапроса.Выгрузить();
		
		ОбязательнаяВалюта = Ложь;
		
		// Сформируем массив создаваемых реквизитов формы
		МассивРеквизитов = Новый Массив;
		Для Каждого СтрокаЭлементов Из ТаблицаЭлементов Цикл
			УникальныйИдентификаторЭлемента = УникальныйИдентификаторНормализованный(СтрокаЭлементов.Ссылка);
			ИмяРеквизита = ПрефиксЭлементаФормы + УникальныйИдентификаторЭлемента;
			ЗаголовокЭлементаФормы = СтрокаЭлементов.НаименованиеПолное + Символы.НПП + "(" + СтрокаЭлементов.Наименование + ")";
			
			Если ВалютыРасчетов.НайтиПоЗначению(СтрокаЭлементов.Ссылка) = Неопределено Тогда
				МассивРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита, ОписаниеТипаБулево, , ЗаголовокЭлементаФормы));
			КонецЕсли;
		КонецЦикла;
		
		ИзменитьРеквизиты(МассивРеквизитов);
		
		// Установим значения созданных реквизитов формы 
		Для Каждого СтрокаЭлементов Из ТаблицаЭлементов Цикл
			ПометкаВалюты = СтрокаЭлементов.ДобавлятьВФорму;
			УникальныйИдентификаторЭлемента = УникальныйИдентификаторНормализованный(СтрокаЭлементов.Ссылка);
			ИмяРеквизита = ПрефиксЭлементаФормы + УникальныйИдентификаторЭлемента;
			ЗаголовокЭлементаФормы = СтрокаЭлементов.НаименованиеПолное + Символы.НПП + "(" + СтрокаЭлементов.Наименование + ")";
			
			Если СтрокаЭлементов.Код = "643" Тогда
				ОбязательнаяВалюта = Истина;
			Иначе
				ОбязательнаяВалюта = Ложь;
			КонецЕсли;
		
			Если ПометкаВалюты Тогда
				ПометкаВалюты = ОбязательнаяВалюта Или ДобавлениеДополнительныхВалют;
				
				// Определим позицию по порядку
				ИндексСтроки = ТаблицаЭлементов.Индекс(СтрокаЭлементов);
				
				Если (ИндексСтроки + 1) < ТаблицаЭлементов.Количество() Тогда
					СледующаяВалюта = ТаблицаЭлементов.Получить(ИндексСтроки + 1);
					Если Не СледующаяВалюта.ДобавлятьВФорму Тогда
						УникальныйИдентификаторСледующегоЭлемента = УникальныйИдентификаторНормализованный(СледующаяВалюта.Ссылка);
						ИмяСледующегоРеквизита = ПрефиксЭлементаФормы + УникальныйИдентификаторСледующегоЭлемента;
					Иначе
						ИмяСледующегоРеквизита = "";
					КонецЕсли;
				КонецЕсли;
				
				ЭтаФорма[ИмяРеквизита] = ПометкаВалюты;
				
				// Создадим элемент формы
				Если ПустаяСтрока(ИмяСледующегоРеквизита) Тогда
					НадписьЭлементаВалюты = Элементы.Вставить(ИмяРеквизита, Тип("ПолеФормы"), Элементы.ГруппаВалютыРасчетовДинамическая);
				Иначе
					НадписьЭлементаВалюты = Элементы.Вставить(ИмяРеквизита, Тип("ПолеФормы"), Элементы.ГруппаВалютыРасчетовДинамическая, Элементы[ИмяСледующегоРеквизита]);
				КонецЕсли;
				
				НадписьЭлементаВалюты.ПутьКДанным = ИмяРеквизита;
				НадписьЭлементаВалюты.Вид = ВидПоляФормы.ПолеФлажка;
				НадписьЭлементаВалюты.Заголовок = ЗаголовокЭлементаФормы;
				НадписьЭлементаВалюты.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
				НадписьЭлементаВалюты.ШрифтЗаголовка = Новый Шрифт(ШрифтыСтиля.ШрифтТекста, , 18);
                НадписьЭлементаВалюты.ТолькоПросмотр = ОбязательнаяВалюта;
				
				НадписьЭлементаВалюты.УстановитьДействие("ПриИзменении", ОбработчикСобытияЭлементаФормы);
			КонецЕсли;
			
			ИскомыйЭлемент = ВалютыРасчетов.НайтиПоЗначению(СтрокаЭлементов.Ссылка);
			Если ИскомыйЭлемент = Неопределено Тогда
				ВалютыРасчетов.Добавить(СтрокаЭлементов.Ссылка, , ПометкаВалюты);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Навигация

&НаКлиенте 
Функция ПроверитьЗаполнениеКлиент()
	
	РезультатПроверки = Новый Структура("ЕстьОшибки, ОписаниеОшибки");
	
	ЕстьОшибки = Ложь;
	ОписаниеОшибки = "";
	
	ИмяСтраницыПерехода = СтраницыПереходов.Получить(ТекущийИндексПерехода).СтраницаПерехода;
	Если ИмяСтраницыПерехода = "СтраницаОбщаяИнформация" Тогда
		Если ПустаяСтрока(НаименованиеПользователя) Тогда
			ЕстьОшибки = Истина;
			ОписаниеОшибки = НСтр("ru= 'Не заполнен пользователь.'"); 
			Элементы.НадписьФИО.ЦветТекста = ЦветЗаголовкаПоляОшибки;
		Иначе
			Элементы.НадписьФИО.ЦветТекста = ЦветЗаголовкаАвто;
		КонецЕсли;
		Если ПустаяСтрока(ПользовательИнфБазыИмя) Тогда
			ЕстьОшибки = Истина;
			ОписаниеОшибки = ОписаниеОшибки + 
				?(ПустаяСтрока(ОписаниеОшибки),"", Символы.ПС) + 
				НСтр("ru= 'Не заполнено имя для входа.'"); 
			Элементы.ПользовательИнфБазыИмя.ЦветТекстаЗаголовка = ЦветЗаголовкаПоляОшибки;
		Иначе
			Элементы.ПользовательИнфБазыИмя.ЦветТекстаЗаголовка = ЦветЗаголовкаАвто;
		КонецЕсли;
		Если Не Пароль = ПодтверждениеПароля Тогда
			ЕстьОшибки = Истина;
			ОписаниеОшибки = ОписаниеОшибки + 
				?(ПустаяСтрока(ОписаниеОшибки),"", Символы.ПС) + 
				НСтр("ru= 'Введенные пароли не совпадают.'"); 
			Элементы.Пароль.ЦветТекстаЗаголовка = ЦветЗаголовкаПоляОшибки;
			Элементы.ПодтверждениеПароля.ЦветТекстаЗаголовка = ЦветЗаголовкаПоляОшибки;
		Иначе
			Элементы.Пароль.ЦветТекстаЗаголовка = ЦветЗаголовкаАвто;
			Элементы.ПодтверждениеПароля.ЦветТекстаЗаголовка = ЦветЗаголовкаАвто;
		КонецЕсли;
	ИначеЕсли ИмяСтраницыПерехода = "СтраницаСведенияОрганизации" Тогда
		Если ПустаяСтрока(НаименованиеПолное) Тогда
			ЕстьОшибки = Истина;
			ОписаниеОшибки = НСтр("ru= 'Не заполнено наименование организации.'"); 
			Элементы.ЗаголовокНаименованиеИП.ЦветТекста = ЦветЗаголовкаПоляОшибки;
			Элементы.ЗаголовокНаименованиеЮЛ.ЦветТекста = ЦветЗаголовкаПоляОшибки;
		Иначе
			Элементы.ЗаголовокНаименованиеИП.ЦветТекста = ЦветЗаголовкаАвто;
			Элементы.ЗаголовокНаименованиеЮЛ.ЦветТекста = ЦветЗаголовкаАвто;
		КонецЕсли;
		Если СистемаНалогообложения.Пустая() Тогда
			ЕстьОшибки = Истина;
			ОписаниеОшибки = ОписаниеОшибки + 
				?(ПустаяСтрока(ОписаниеОшибки),"", Символы.ПС) + 
				НСтр("ru= 'Не указана система налогообложения.'"); 
			Элементы.СистемаНалогообложения.ЦветТекстаЗаголовка = ЦветЗаголовкаПоляОшибки;
		Иначе
			Элементы.СистемаНалогообложения.ЦветТекстаЗаголовка = ЦветЗаголовкаАвто;
		КонецЕсли;
	КонецЕсли;
	
	РезультатПроверки.Вставить("ЕстьОшибки", ЕстьОшибки);
	РезультатПроверки.Вставить("ОписаниеОшибки", ОписаниеОшибки);
	
	Возврат РезультатПроверки;
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Процедура ДобавитьСтраницуПерехода(Переходы, Страница, ПромежуточныйПереход, ОтображатьКомандыПереходов = Истина, ИндексПерехода = Неопределено, ИмяЭлементаПоУмолчанию = "")
	Если ИндексПерехода = Неопределено Тогда
		НовыйПереход = Переходы.Добавить();
	Иначе
		НовыйПереход = Переходы.Вставить(ИндексПерехода);
	КонецЕсли;
	НовыйПереход.ПромежуточныйПереход = ПромежуточныйПереход;
	НовыйПереход.ОтображатьКомандыПереходов = ОтображатьКомандыПереходов;
	НовыйПереход.СтраницаПерехода = Страница.Имя;
	НовыйПереход.ИмяЭлементаПоУмолчанию = ИмяЭлементаПоУмолчанию;
КонецПроцедуры

&НаКлиенте 
Процедура ОсуществитьПереходВперед()
	РезультатПроверки = ПроверитьЗаполнениеКлиент();
	
	Если РезультатПроверки.ЕстьОшибки Тогда
		ПараметрыФормы = Новый Структура("ОписаниеОшибки", РезультатПроверки.ОписаниеОшибки);
		ОткрытьФорму("Обработка.ПомощникНастройкиПараметровБазовойВерсии.Форма.ДиалогОшибки", ПараметрыФормы, ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Возврат;
	КонецЕсли;
	
	ТекущаяСтраница = Элементы.СтраницыШагов.ТекущаяСтраница;
	
	ИндексТекущейСтраницы = ТекущийИндексПерехода;
	
	Если ИндексТекущейСтраницы < СтраницыПереходов.Количество() - 1 Тогда
		Переход = СтраницыПереходов.Получить(ИндексТекущейСтраницы + 1);
		
		ИмяСтраницыПерехода = Переход.СтраницаПерехода;
		
		Элементы.СтраницыШагов.ТекущаяСтраница = Элементы[ИмяСтраницыПерехода];
		
		Элементы.СтраницыДекорацийНавигации.ТекущаяСтраница = Элементы[СтрЗаменить(ИмяСтраницыПерехода, "Страница","СтраницаДекорация")];
		
		Если Переход.ПромежуточныйПереход Тогда
			Если Переход.ОтображатьКомандыПереходов Тогда
				СтраницаКоманднойПанели = Элементы.СтраницаПромежуточныхШагов;
			Иначе
				СтраницаКоманднойПанели = Элементы.СтраницаПромежуточныхШаговБезКомандПереходов;
			КонецЕсли;
		ИначеЕсли ИндексТекущейСтраницы + 1 = СтраницыПереходов.Количество() - 1 Тогда
			СтраницаКоманднойПанели = Элементы.СтраницаПоследнегоШага;
		КонецЕсли;
		Элементы.СтраницыКомандныхПанелей.ТекущаяСтраница = СтраницаКоманднойПанели;
		УстановитьКнопкуПоУмолчанию(СтраницаКоманднойПанели);
		
		ТекущийИндексПерехода = ТекущийИндексПерехода + 1;
	КонецЕсли;
	
	Если Не ПустаяСтрока(Переход.ИмяЭлементаПоУмолчанию) Тогда
		ТекущийЭлемент = Элементы[Переход.ИмяЭлементаПоУмолчанию];
	КонецЕсли;
КонецПроцедуры

&НаКлиенте 
Процедура ОсуществитьПереходНазад()
	ТекущаяСтраница = Элементы.СтраницыШагов.ТекущаяСтраница;
	
	ИндексТекущейСтраницы = ТекущийИндексПерехода;
	
	Если ИндексТекущейСтраницы > 0 Тогда
		Переход = СтраницыПереходов.Получить(ИндексТекущейСтраницы - 1);
		
		ИмяСтраницыПерехода = Переход.СтраницаПерехода;
		
		Если Элементы.СтраницыШагов.ТекущаяСтраница = Элементы.СтраницаСведенияОрганизации
			И Элементы[ИмяСтраницыПерехода] = Элементы.СтраницаСчет Тогда
			Если СведенияОрганизацииЗаполняются Тогда
				ОткрытьФорму("Обработка.ПомощникНастройкиПараметровБазовойВерсии.Форма.ДиалогВозврата", , ЭтаФорма,,,, Новый ОписаниеОповещения("ОсуществитьПереходНазадЗавершение", ЭтотОбъект, Новый Структура("ИмяСтраницыПерехода, ИндексТекущейСтраницы, Переход", ИмяСтраницыПерехода, ИндексТекущейСтраницы, Переход)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
                Возврат;
			Иначе
				УдалитьПереходыОрганизации(НомерТекущейОрганизации);
				УдалитьДанныеОрганизации(НомерТекущейОрганизации);
				НомерТекущейОрганизации = НомерТекущейОрганизации - 1;
				ВосстановитьДанныеОрганизации(НомерТекущейОрганизации);
			КонецЕсли;
			
		КонецЕсли;
		
		ОсуществитьПереходНазадФрагмент(ИмяСтраницыПерехода, ИндексТекущейСтраницы, Переход);

	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОсуществитьПереходНазадЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ИмяСтраницыПерехода = ДополнительныеПараметры.ИмяСтраницыПерехода;
    ИндексТекущейСтраницы = ДополнительныеПараметры.ИндексТекущейСтраницы;
    Переход = ДополнительныеПараметры.Переход;
    
    
    Отказ = Не Результат;
    Если Отказ Тогда
        Возврат;
    КонецЕсли;
    
    ОсуществитьПереходНазадФрагмент(ИмяСтраницыПерехода, ИндексТекущейСтраницы, Переход);

КонецПроцедуры

&НаКлиенте
Процедура ОсуществитьПереходНазадФрагмент(Знач ИмяСтраницыПерехода, Знач ИндексТекущейСтраницы, Знач Переход)
    
    Перем СтраницаКоманднойПанели;
    
    Элементы.СтраницыШагов.ТекущаяСтраница = Элементы[ИмяСтраницыПерехода];
    Элементы.СтраницыДекорацийНавигации.ТекущаяСтраница = Элементы[СтрЗаменить(ИмяСтраницыПерехода, "Страница","СтраницаДекорация")];
    
    Если Переход.ПромежуточныйПереход Тогда 
        Если Переход.ОтображатьКомандыПереходов Тогда
            СтраницаКоманднойПанели = Элементы.СтраницаПромежуточныхШагов;
        Иначе
            СтраницаКоманднойПанели = Элементы.СтраницаПромежуточныхШаговБезКомандПереходов;
        КонецЕсли;
    ИначеЕсли ИндексТекущейСтраницы - 1 = 0 Тогда
        СтраницаКоманднойПанели = Элементы.СтраницаПервогоШага;
    КонецЕсли;
    Элементы.СтраницыКомандныхПанелей.ТекущаяСтраница = СтраницаКоманднойПанели;
    УстановитьКнопкуПоУмолчанию(СтраницаКоманднойПанели);
    
    ТекущийИндексПерехода = ТекущийИндексПерехода - 1;

КонецПроцедуры

&НаКлиенте 
Процедура УстановитьКнопкуПоУмолчанию(СтраницаКоманднойПанели)
	Если Не Элементы.СтраницыКомандныхПанелей.ТекущаяСтраница = СтраницаКоманднойПанели Тогда
		Если СтраницаКоманднойПанели = Элементы.СтраницаПромежуточныхШагов Тогда
			Элементы.Далее1.КнопкаПоУмолчанию = Истина;
		ИначеЕсли СтраницаКоманднойПанели = Элементы.СтраницаПервогоШага Тогда
			Элементы.Далее.КнопкаПоУмолчанию = Истина;
		ИначеЕсли СтраницаКоманднойПанели = Элементы.СтраницаПоследнегоШага Тогда
			Элементы.ЗавершитьНастройку.КнопкаПоУмолчанию = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте 
Процедура ОсуществитьПереходКСтранице(ИмяСтраницы)
	НомерТекущейОрганизации = НомерТекущейОрганизации + 1;
	ТекущийИндексПерехода = ТекущийИндексПерехода + 1;
	
	Элементы.СтраницыШагов.ТекущаяСтраница = Элементы[ИмяСтраницы];
	Элементы.СтраницыДекорацийНавигации.ТекущаяСтраница = Элементы[СтрЗаменить(ИмяСтраницы, "Страница","СтраницаДекорация")];
КонецПроцедуры

&НаСервере 
Процедура УдалитьПереходыОрганизации(НомерОрганизации)
	ИндексПервогоПерехода = 3 * НомерОрганизации - 1;
	
	Для Счетчик = 1 По 3 Цикл 
		СтраницыПереходов.Удалить(ИндексПервогоПерехода);
	КонецЦикла;
КонецПроцедуры

&НаСервере 
Процедура УдалитьДанныеОрганизации(НомерОрганизации)
	Если АдресаДанныхОрганизаций.Количество() > 1 Тогда
		АдресаДанныхОрганизаций.Удалить(НомерОрганизации - 1);
	КонецЕсли;
КонецПроцедуры

&НаСервере 
Процедура ВосстановитьДанныеОрганизации(НомерОрганизации)
	АдресДанныхОрганизации = АдресаДанныхОрганизаций.Получить(НомерОрганизации - 1);
	ДанныеОрганизации = ПолучитьИзВременногоХранилища(АдресДанныхОрганизации);
	ЗаполнитьЗначенияСвойств(ЭтаФорма, ДанныеОрганизации.Организация);
КонецПроцедуры

#КонецОбласти

#Область РаботыСРеквизитамиОрганизацииРасчетногоСчетаИКассы

&НаСервере 
Функция РеквизитыОрганизации()
	РеквизитыОрганизации = Новый Массив;
	
	// Организация
	РеквизитыОрганизации.Добавить("БухгалтерФИО");
	РеквизитыОрганизации.Добавить("ИНН");
	РеквизитыОрганизации.Добавить("ИндивидуальныйПредприниматель");
	РеквизитыОрганизации.Добавить("ИспользоватьРозничныеПродажи");
	РеквизитыОрганизации.Добавить("КодНалоговогоОргана");
	РеквизитыОрганизации.Добавить("КодПоОКПО");
	РеквизитыОрганизации.Добавить("КПП");
	РеквизитыОрганизации.Добавить("ОГРН");
	РеквизитыОрганизации.Добавить("Наименование");
	РеквизитыОрганизации.Добавить("НаименованиеПолное");
	РеквизитыОрганизации.Добавить("НаименованиеСокращенное");
	РеквизитыОрганизации.Добавить("Префикс");
	РеквизитыОрганизации.Добавить("РозничнаяТорговляОблагаетсяЕНВД");
	РеквизитыОрганизации.Добавить("ПрименяетсяПСН");
	РеквизитыОрганизации.Добавить("ПрименяетсяАУСН");
	РеквизитыОрганизации.Добавить("РуководительФИО");
	РеквизитыОрганизации.Добавить("СистемаНалогообложения");
	РеквизитыОрганизации.Добавить("ТекущаяДолжностьРуководителя");
	РеквизитыОрганизации.Добавить("ЮрФизЛицо");
	
	// Расчетный счет
	РеквизитыОрганизации.Добавить("Банк");
	РеквизитыОрганизации.Добавить("БанкДляРасчетов");
	РеквизитыОрганизации.Добавить("БИКБанка");
	РеквизитыОрганизации.Добавить("БИКБанкаДляРасчетов");
	РеквизитыОрганизации.Добавить("ГородБанка");
	РеквизитыОрганизации.Добавить("ГородБанкаДляРасчетов");
	РеквизитыОрганизации.Добавить("ИспользуетсяБанкДляРасчетов");
	РеквизитыОрганизации.Добавить("КоррСчетБанка");
	РеквизитыОрганизации.Добавить("КоррСчетБанкаДляРасчетов");
	РеквизитыОрганизации.Добавить("НаименованиеБанка");
	РеквизитыОрганизации.Добавить("НаименованиеБанкаДляРасчетов");
	РеквизитыОрганизации.Добавить("НомерСчета");
	РеквизитыОрганизации.Добавить("РучноеИзменениеРеквизитовБанка");
	РеквизитыОрганизации.Добавить("РучноеИзменениеРеквизитовБанкаДляРасчетов");
	
	// Остатки денежных средств
	РеквизитыОрганизации.Добавить("ТекущийОстатокБезналичныхДенежныхСредств");
	РеквизитыОрганизации.Добавить("ТекущийОстатокНаличныхДенежныхСредств");
	
	// Прочие
	РеквизитыОрганизации.Добавить("СтрокаРеквизитовОрганизации");
	РеквизитыОрганизации.Добавить("СтрокаОтветственныхЛиц");
	РеквизитыОрганизации.Добавить("СтрокаРеквизитовБанка");
	РеквизитыОрганизации.Добавить("СтрокаРеквизитовБанкаДляРасчетов");
	
	Возврат РеквизитыОрганизации;
КонецФункции

&НаСервере 
Процедура СохранитьДанныеОрганизации()
	СохраняемыеРеквизиты = РеквизитыОрганизации();
	
	СтруктураРеквизитов = Новый Структура("
		|Организация, 
		|КонтактнаяИнформация, 
		|ОстаткиДенежныхСредств");
	
	ОписаниеОрганизации = Новый Структура;
	Для Каждого СохраняемыйРеквизит Из СохраняемыеРеквизиты Цикл
		ОписаниеОрганизации.Вставить(СохраняемыйРеквизит, ЭтаФорма[СохраняемыйРеквизит]);
	КонецЦикла;
	
	СтруктураРеквизитов.Вставить("Организация", ОписаниеОрганизации);
	
	ОрганизацияОбъект = Справочники.Организации.СоздатьЭлемент();
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтаФорма, ОрганизацияОбъект);
	СтруктураРеквизитов.Вставить("КонтактнаяИнформация", ОрганизацияОбъект.КонтактнаяИнформация.Выгрузить());
	
	СтруктураРеквизитов.Вставить("ОстаткиДенежныхСредств", 
		Новый Структура("Безналичные, Наличные", 
		ТекущийОстатокБезналичныхДенежныхСредств, ТекущийОстатокНаличныхДенежныхСредств));
		
	Адрес = ПоместитьВоВременноеХранилище(СтруктураРеквизитов, Новый УникальныйИдентификатор);
	АдресаДанныхОрганизаций.Добавить(Адрес);
КонецПроцедуры

&НаСервере 
Процедура ОчиститьРеквизитыОрганизации()
	ОчищаемыеРеквизиты = РеквизитыОрганизации();
	
	Для Каждого ОчищаемыйРеквизит Из ОчищаемыеРеквизиты Цикл 
		Если ОчищаемыйРеквизит = "ИндивидуальныйПредприниматель"
			ИЛИ ОчищаемыйРеквизит = "ЮрФизЛицо" Тогда
			Продолжить;
		КонецЕсли;
		ЭтаФорма[ОчищаемыйРеквизит] = Неопределено;
	КонецЦикла;
	
	Объект.КонтактнаяИнформация.Очистить();
	КИОписаниеДополнительныхРеквизитов = ЭтаФорма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
	Для Каждого ОписаниеКИ Из КИОписаниеДополнительныхРеквизитов Цикл 
		ЭтаФорма[ОписаниеКИ.ИмяРеквизита] = Неопределено;
	КонецЦикла;	
КонецПроцедуры

&НаСервере 
Функция СокращенноеФИО(Знач ФИО)
	МассивФИО = ПолучитьФИО(ФИО);
	
	СокращенноеФИО = МассивФИО[0] + Символы.НПП + Лев(МассивФИО[1], 1) + "." + Лев(МассивФИО[2], 1) + ".";
	
	Возврат СокращенноеФИО;
КонецФункции

&НаСервере 
Функция ПолучитьФИО(Знач ФИО)

	МассивФИО = Новый Массив;
	МассивФИО.Добавить("");
	МассивФИО.Добавить("");
	МассивФИО.Добавить("");
	
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ФИО, " ");
	Для Индекс = 0 По МассивПодстрок.ВГраница() Цикл
		Если Индекс < 3 Тогда
			МассивФИО[Индекс] = МассивПодстрок[Индекс];
		Иначе
			МассивФИО[2] = МассивФИО[2] + " " + МассивПодстрок[Индекс];
		КонецЕсли;
	КонецЦикла;

	Возврат МассивФИО;
	
КонецФункции

&НаСервере 
Функция СформироватьАвтоНаименованиеРасчетногоСчета(РасчетныйСчет)
	
	Если РасчетныйСчет.РучноеИзменениеРеквизитовБанка Тогда
		СтрокаНаименования = Прав(СокрЛП(РасчетныйСчет.НомерСчета), 4) 
		+ ?(ЗначениеЗаполнено(РасчетныйСчет.НаименованиеБанка), " в " + Строка(РасчетныйСчет.НаименованиеБанка), "")
		+ ", " + СокрЛП(РасчетныйСчет.Владелец);
		СтрокаНаименования = Лев(СтрокаНаименования, 150);
		
	Иначе	
		
		СтрокаНаименования = Прав(СокрЛП(РасчетныйСчет.НомерСчета), 4) 
		+ ?(ЗначениеЗаполнено(РасчетныйСчет.Банк), " в " + Строка(РасчетныйСчет.Банк), "")
		+ ", " + СокрЛП(РасчетныйСчет.Владелец);
		СтрокаНаименования = Лев(СтрокаНаименования, 150);
		
	КонецЕсли;
	
	Возврат СтрокаНаименования;

КонецФункции

&НаСервере
Функция ЗаполнитьРеквизитыБанкаПоБИК(ТипБанка, БИК = "", ПеренестиЗначенияРеквизитов = Ложь)
	
	НашлиПоБИК	 = Ложь;
	ЗаписьОБанке = "";
	
	Если ТипБанка = "Банк" Тогда
		БИКБанка		  = "";
		КоррСчетБанка	  = "";
		НаименованиеБанка = "";
		ГородБанка		  = "";
		РаботаСБанками.ПолучитьДанныеКлассификатора(БИК,,ЗаписьОБанке);
		Если НЕ ПустаяСтрока(ЗаписьОБанке) Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаписьОБанке, "Код,КоррСчет,Наименование,Город");
			БИКБанка		  = ЗначенияРеквизитов.Код;
			КоррСчетБанка	  = ЗначенияРеквизитов.КоррСчет;
			НаименованиеБанка = ЗначенияРеквизитов.Наименование;
			ГородБанка		  = ЗначенияРеквизитов.Город;
			НашлиПоБИК		  = Истина;
			Банк				 = ЗаписьОБанке;
		КонецЕсли;		
	КонецЕсли;
	Возврат НашлиПоБИК;
КонецФункции

&НаСервере
Функция ЗаполнитьРеквизитыБанкаПоБанку(Банк, ТипБанка, ПеренестиЗначенияРеквизитов)
	Если ТипЗнч(Банк) = Тип("СправочникСсылка.КлассификаторБанков") Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Банк, "Код,КоррСчет,Наименование,Город");
		Если ТипБанка = "Банк" Тогда
			БИКБанка		  = ЗначенияРеквизитов.Код;
			КоррСчетБанка	  = ЗначенияРеквизитов.КоррСчет;
			НаименованиеБанка = ЗначенияРеквизитов.Наименование;
			ГородБанка		  = ЗначенияРеквизитов.Город;
		ИначеЕсли ТипБанка = "БанкДляРасчетов" Тогда
			БИКБанкаДляРасчетов				= ЗначенияРеквизитов.Код;
			КоррСчетБанкаДляРасчетов		= ЗначенияРеквизитов.КоррСчет;
			НаименованиеБанкаДляРасчетов	= ЗначенияРеквизитов.Наименование;
			ГородБанкаДляРасчетов			= ЗначенияРеквизитов.Город;
		КонецЕсли;
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область КонтактнаяИнформация

// СтандартныеПодсистемы.КонтактнаяИнформация

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	УправлениеКонтактнойИнформациейКлиент.НачатьИзменение(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент,, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачатьОчистку(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	УправлениеКонтактнойИнформациейКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.АвтоПодборАдреса(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент.Имя, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачатьОбработкуНавигационнойСсылки(ЭтотОбъект, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат) Экспорт
	УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтактнаяИнформация

&НаСервере 
Процедура ИнициализироватьКонтактнуюИнформацию()
	// Обработчик механизма "Контактная информация"
	
	КонтактнаяИнформация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяОрганизация, "КонтактнаяИнформация");
	КонтактнаяИнформация = ?(ТипЗнч(КонтактнаяИнформация) = Тип("РезультатЗапроса"), КонтактнаяИнформация.Выгрузить(), КонтактнаяИнформация);
	
	Если ЗначениеЗаполнено(КонтактнаяИнформация) Тогда
		ЗаполнитьЗначенияСвойств(Объект.КонтактнаяИнформация, КонтактнаяИнформация);
	КонецЕсли;
	
	СтруктураКонтактнаяИнформация = Новый Структура("
		|Ссылка, КонтактнаяИнформация", 
		ТекущаяОрганизация, Объект.КонтактнаяИнформация);
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	ДополнительныеПараметрыКИ = УправлениеКонтактнойИнформацией.ПараметрыКонтактнойИнформации();
	ДополнительныеПараметрыКИ.Вставить("ИмяЭлементаДляРазмещения", "ГруппаВводДанных4");
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтаФорма, СтруктураКонтактнаяИнформация, ДополнительныеПараметрыКИ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	ВидимостьДоступностьСтильКонтактнойИнформации("ГруппаВводДанных4");
	
	ПереместитьЭлементыПроверкиЭлектроннойПочты();
	
	// Отключение отображения какого-то вида КИ пока в БСП не поддерживается, поэтому пока реализуем это самостоятельно.
	НаименованиеВида = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Справочники.ВидыКонтактнойИнформации.МеждународныйАдресОрганизации, "Наименование");
		
	Для Каждого ГруппаЭлементаКонтактнойИнформации Из ЭтотОбъект.Элементы Цикл
		Если СтрСравнить(ГруппаЭлементаКонтактнойИнформации.Заголовок, НаименованиеВида) = 0 Тогда
			ГруппаЭлементаКонтактнойИнформации.Видимость = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере 
Процедура ВидимостьДоступностьСтильКонтактнойИнформации(ИмяГруппыКонтактнойИнформации)
	ЭлементыКонтактнойИнформации = Элементы[ИмяГруппыКонтактнойИнформации].ПодчиненныеЭлементы;
	КонтактнаяИнформацияОписание = ЭтаФорма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
	
	ШрифтПоляВвода = Новый Шрифт(, 18);
	ШрифтЗаголовка = Новый Шрифт(, 10);
	
	Для Каждого Элемент Из ЭлементыКонтактнойИнформации Цикл 
		Если Не Элемент.Родитель = Элементы[ИмяГруппыКонтактнойИнформации] 
			ИЛИ ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяЭлемента = Элемент.Имя;
		ОписаниеЭлемента = ОписаниеЭлементаКонтактнойИнформации(ИмяЭлемента, КонтактнаяИнформацияОписание);
		
		Если ОписаниеЭлемента.ТипЭлемента = Перечисления.ТипыКонтактнойИнформации.Другое
			ИЛИ СтрНайти(ОписаниеЭлемента.Представление, НСтр("ru= 'Другая информация'")) > 0 
			ИЛИ СтрНайти(ОписаниеЭлемента.Представление, НСтр("ru= 'Почтовый адрес'")) > 0 Тогда
			Элемент.Видимость = Ложь;
		Иначе
			Элемент.ШрифтЗаголовка	= ШрифтЗаголовка;
			Элемент.Шрифт			= ШрифтПоляВвода;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере 
Функция ОписаниеЭлементаКонтактнойИнформации(ИмяЭлемента, КонтактнаяИнформацияОписание)
	Описание = Новый Структура("
		|ТипЭлемента, Представление", 
		Перечисления.ТипыКонтактнойИнформации.ПустаяСсылка(), "");
	
	Отбор = Новый Структура("ИмяРеквизита", ИмяЭлемента);
	ИскомыеЭлементы = КонтактнаяИнформацияОписание.НайтиСтроки(Отбор);
	Если ИскомыеЭлементы.Количество() > 0 Тогда
		ИскомыйЭлемент = ИскомыеЭлементы[0];
		
		Описание.ТипЭлемента = ИскомыйЭлемент.Тип;
		Описание.Представление = ИскомыйЭлемент.Вид.Наименование;
	КонецЕсли;
	
	Возврат Описание;
КонецФункции

&НаСервере 
Процедура ПереместитьЭлементыПроверкиЭлектроннойПочты()
	ОтборПоТипуКИ = Новый Структура("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ПоляЭлектроннойПочты = ЭтаФорма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(ОтборПоТипуКИ);
	
	Для Каждого ПолеЭлектроннойПочты Из ПоляЭлектроннойПочты Цикл 
		ПолеВводаЭлектроннойПочты = Элементы[ПолеЭлектроннойПочты.ИмяРеквизита];
		
		Элементы.Переместить(Элементы.СтраницыОшибкаЭлектронногоАдреса, ПолеВводаЭлектроннойПочты.Родитель);
	КонецЦикла;	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере 
Функция УникальныйИдентификаторНормализованный(Ссылка)
	
	УникальныйИдентификаторПоСсылке = Строка(Ссылка.УникальныйИдентификатор());
	УникальныйИдентификаторНормализованный = СтрЗаменить(УникальныйИдентификаторПоСсылке, "-", "_");
	
	Возврат УникальныйИдентификаторНормализованный;
	
КонецФункции

&НаСервере 
Процедура ЗаписатьИзмененияВИБ()
	ЗаписатьПользователяСервер();
	ЗаписатьВалютыСервер();
	ЗаписатьДанныеОрганизацииСервер();
	ДанныеЗаписаны = Истина;
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПользователяСервер()
	
	ОписаниеПользователяИБ = Новый Структура;
	
	Если Не ТекущийПользователь.Пустая() 
			И Справочники.Пользователи.НайтиПоНаименованию("<Не указан>") <> Неопределено
			И Справочники.Пользователи.НайтиПоНаименованию("<Не указан>") <> ТекущийПользователь Тогда
		Пользователь = ТекущийПользователь.ПолучитьОбъект();
	Иначе
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(НаименованиеПользователя);
		
		Если ПользовательИБ = Неопределено Тогда
			
			ПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
			ПользовательИБ.Имя       = ПользовательИнфБазыИмя;
			ПользовательИБ.ПолноеИмя = НаименованиеПользователя;
			ПользовательИБ.Пароль = Пароль;
			ПользовательИБ.Роли.Очистить();
			ПользовательИБ.Роли.Добавить(Метаданные.Роли.ПолныеПрава);
			РольАдминистратораСистемы = Метаданные.Роли.АдминистраторСистемы;
			Если НЕ ПользовательИБ.Роли.Содержит(РольАдминистратораСистемы) Тогда
				ПользовательИБ.Роли.Добавить(РольАдминистратораСистемы);
			КонецЕсли;
			ПользовательИБ.Записать();
			
		КонецЕсли;
		
		ОписаниеПользователяИБ.Вставить("Действие", "Записать");
		ОписаниеПользователяИБ.Вставить(
			"УникальныйИдентификатор", ПользовательИБ.УникальныйИдентификатор);
		
		Пользователь = Пользователи.СоздатьАдминистратора(ПользовательИБ);
		
	КонецЕсли;
	
	Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Установить(ПрефиксУзлаРаспределеннойИнформационнойБазы);
	
	ТекущийПользователь = Пользователь.Ссылка;
	
КонецПроцедуры	

&НаСервере 
Функция ТекстЗапросаПоВалютам()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Валюты.Ссылка,
	|	Валюты.ДобавлятьВФорму,
	|	Валюты.Порядок КАК Порядок,
	|	Валюты.Ссылка.Наименование КАК Наименование,
	|	Валюты.Ссылка.НаименованиеПолное КАК НаименованиеПолное,
	|	Валюты.Ссылка.Код КАК Код
	|ИЗ
	|	(ВЫБРАТЬ
	|		Валюты.Ссылка КАК Ссылка,
	|		1 КАК Порядок,
	|		ИСТИНА КАК ДобавлятьВФорму
	|	ИЗ
	|		Справочник.Валюты КАК Валюты
	|	ГДЕ
	|		Валюты.Код = ""643""
	|		И НЕ Валюты.Ссылка В (&ВалютыРасчетов)
	|		И НЕ Валюты.ПометкаУдаления
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Валюты.Ссылка,
	|		2,
	|		ИСТИНА
	|	ИЗ
	|		Справочник.Валюты КАК Валюты
	|	ГДЕ
	|		Валюты.Код <> ""643""
	|		И НЕ Валюты.Ссылка В (&ВалютыРасчетов)
	|		И НЕ Валюты.ПометкаУдаления
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Валюты.Ссылка,
	|		ВЫБОР
	|			КОГДА Валюты.Код = ""643""
	|				ТОГДА 1
	|			ИНАЧЕ 2
	|		КОНЕЦ,
	|		ЛОЖЬ
	|	ИЗ
	|		Справочник.Валюты КАК Валюты
	|	ГДЕ
	|		Валюты.Ссылка В(&ВалютыРасчетов)
	|		И НЕ Валюты.ПометкаУдаления) КАК Валюты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	Валюты.Ссылка.НаименованиеПолное";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере 
Процедура ЗаписатьВалютыСервер()
	КоличествоВалют = ВалютыРасчетов.Количество();
	
	Пока Не КоличествоВалют = 0 Цикл 
		Валюта = ВалютыРасчетов[КоличествоВалют - 1];
		
		Если Не Валюта.Пометка Тогда
			ВалютаОбъект = Валюта.Значение.ПолучитьОбъект();
			
			Попытка
				ВалютаОбъект.УстановитьПометкуУдаления(Истина);
			Исключение
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Выполнение операции'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
											УровеньЖурналаРегистрации.Ошибка,,,
											ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
			ВалютыРасчетов.Удалить(Валюта);
		КонецЕсли;
		КоличествоВалют = КоличествоВалют - 1;
	КонецЦикла;
	
	Константы.ВалютаУправленческогоУчета.Установить(ВалютыРасчетов[0].Значение);
	Константы.ВалютаРегламентированногоУчета.Установить(ВалютыРасчетов[0].Значение);
	Константы.БазоваяВалютаПоУмолчанию.Установить(ВалютыРасчетов[0].Значение);
	
	Если ВалютыРасчетов.Количество() > 1 Тогда
		Константы.ИспользоватьНесколькоВалют.Установить(Истина);
	Иначе
		Константы.ИспользоватьНесколькоВалют.Установить(Ложь);
	КонецЕсли;
КонецПроцедуры

&НаСервере 
Процедура ЗаписатьДанныеОрганизацииСервер()
	Если НомерТекущейОрганизации > АдресаДанныхОрганизаций.Количество() Тогда
		СохранитьДанныеОрганизации();
	КонецЕсли;
	
	// Создадим вид цены
	ВидЦены = Ценообразование.ВидЦеныПрайсЛист().ПолучитьОбъект();
	ВидЦены.ЦенаВключаетНДС = ЦенаВключаетНДС;
	ВидЦены.СпособЗаданияЦены = СпособЗаданияЦены;
	Если СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.НаценкаНаЦенуПоступления Тогда
		ВидЦены.Наценка = Наценка;
		ВидЦены.СхемаКомпоновкиДанных = "ЦеныПоступленияПредопределенный";
	КонецЕсли;
	ВидЦены.Записать();
	
	ОчиститьДокументыВводаОстатокв();
	
	ТекОптовыйСклад = Справочники.Склады.СкладПоУмолчанию();
	ОптовыйСклад = ТекОптовыйСклад;
	ТекОптовоРозничныйСклад = Справочники.Склады.РозничныйСкладПоУмолчанию();
	ОптовоРозничныйСклад = ТекОптовоРозничныйСклад;
	АдресДанныхОрганизации = АдресаДанныхОрганизаций[0];
	ДанныеОрганизации = ПолучитьИзВременногоХранилища(АдресДанныхОрганизации);
	
	Если Не ЗначениеЗаполнено(ТекущаяОрганизация) Тогда
		Организация = Справочники.Организации.СоздатьЭлемент();
	Иначе
		Организация = ТекущаяОрганизация.ПолучитьОбъект();
	КонецЕсли; 
	
	Организация.Заполнить(Неопределено);
	ЗаполнитьЗначенияСвойств(Организация, ДанныеОрганизации.Организация);
	Организация.КонтактнаяИнформация.Загрузить(ДанныеОрганизации.КонтактнаяИнформация);
	
	Организация.Записать();
	
	
	// Создадим физические лица
	Если Не ПустаяСтрока(ДанныеОрганизации.Организация.РуководительФИО) Тогда
		
		ТекущийРуководитель = Справочники.ФизическиеЛица.НайтиПоНаименованию(ДанныеОрганизации.Организация.РуководительФИО);
		
		Если Не ЗначениеЗаполнено(ТекущийРуководитель) Тогда
			Руководитель = Справочники.ФизическиеЛица.СоздатьЭлемент();
		Иначе
			Руководитель = ТекущийРуководитель.ПолучитьОбъект();
		КонецЕсли;
		
		Руководитель.Наименование = ДанныеОрганизации.Организация.РуководительФИО;
		Руководитель.Записать();
		
		ТекущийОтвРуководитель = Справочники.ОтветственныеЛицаОрганизаций.НайтиПоНаименованию(ДанныеОрганизации.Организация.РуководительФИО);
		
		Если Не ЗначениеЗаполнено(ТекущийОтвРуководитель) Тогда
			НовыйОтветственный = Справочники.ОтветственныеЛицаОрганизаций.СоздатьЭлемент();
			НовыйОтветственный.Владелец = Организация.Ссылка;
		Иначе
			НовыйОтветственный = ТекущийОтвРуководитель.ПолучитьОбъект();
		КонецЕсли;
		
		НовыйОтветственный.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель;
		НовыйОтветственный.ФизическоеЛицо = Руководитель.Ссылка;
		НовыйОтветственный.Должность = ДанныеОрганизации.Организация.ТекущаяДолжностьРуководителя;
		НовыйОтветственный.ДатаНачала = Дата(1980, 1, 1);
		НовыйОтветственный.Наименование = ДанныеОрганизации.Организация.РуководительФИО;
		НовыйОтветственный.Записать();
	КонецЕсли;
	Если Не ПустаяСтрока(ДанныеОрганизации.Организация.БухгалтерФИО) Тогда
		
		Если СокрЛП(ДанныеОрганизации.Организация.БухгалтерФИО) = СокрЛП(ДанныеОрганизации.Организация.РуководительФИО) Тогда
			Бухгалтер = Руководитель;
		Иначе
			Бухгалтер = Справочники.ФизическиеЛица.НайтиПоНаименованию(ДанныеОрганизации.Организация.БухгалтерФИО);
			Если Не ЗначениеЗаполнено(Бухгалтер) Тогда
				Бухгалтер = Справочники.ФизическиеЛица.СоздатьЭлемент();
			Иначе
				Бухгалтер = Бухгалтер.ПолучитьОбъект();
			КонецЕсли;
			Бухгалтер.Наименование = ДанныеОрганизации.Организация.БухгалтерФИО;
			Бухгалтер.Записать();
		КонецЕсли;
		
		ТекущийОтвРуководитель = Справочники.ОтветственныеЛицаОрганизаций.НайтиПоНаименованию(ДанныеОрганизации.Организация.БухгалтерФИО);
		
		Если Не ЗначениеЗаполнено(ТекущийОтвРуководитель) Тогда
			НовыйОтветственный = Справочники.ОтветственныеЛицаОрганизаций.СоздатьЭлемент();
			НовыйОтветственный.Владелец = Организация.Ссылка;
		Иначе
			НовыйОтветственный = ТекущийОтвРуководитель.ПолучитьОбъект();
		КонецЕсли;
		
		НовыйОтветственный.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер;
		НовыйОтветственный.ФизическоеЛицо = Бухгалтер.Ссылка;
		НовыйОтветственный.ДатаНачала = Дата(1980, 1, 1);
		НовыйОтветственный.Наименование = ДанныеОрганизации.Организация.БухгалтерФИО;
		НовыйОтветственный.Записать();
	КонецЕсли;
	
	// Создадим оптово-розничный/оптовый склад и кассу ККМ
	Если ДанныеОрганизации.Организация.ИспользоватьРозничныеПродажи Тогда
		
		Если Не ЗначениеЗаполнено(ТекОптовоРозничныйСклад) Тогда
			ОптовоРозничныйСклад = Справочники.Склады.СоздатьЭлемент();
			ОптовоРозничныйСклад.Наименование = НСтр("ru='Розничный склад'");
			ОптовоРозничныйСклад.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин;
			ОптовоРозничныйСклад.РозничныйВидЦены = ВидЦены.Ссылка;
			ОптовоРозничныйСклад.КонтролироватьСвободныеОстатки = Истина;
			ОптовоРозничныйСклад.ДополнительныеСвойства.Вставить("ПропуститьОбновлениеФлагаКонтроляОперативныхОстатков");
			ОптовоРозничныйСклад.Записать();
		Иначе 
			ОптовоРозничныйСклад = ТекОптовоРозничныйСклад;
		КонецЕсли;
		
		ТекКассаККМ = Справочники.КассыККМ.АвтономнаяКассаККМПоУмолчанию();
		
		Если Не ЗначениеЗаполнено(ТекКассаККМ) Тогда
			КассаККМ = Справочники.КассыККМ.СоздатьЭлемент();
		Иначе
			КассаККМ = ТекКассаККМ.ПолучитьОбъект();
		КонецЕсли;
		
		КассаККМ.Владелец = Организация.Ссылка;
		КассаККМ.ТипКассы = Перечисления.ТипыКассККМ.АвтономнаяККМ;
		КассаККМ.Склад = ОптовоРозничныйСклад.Ссылка;
		КассаККМ.Наименование = Строка(КассаККМ.ТипКассы) + "(" + КассаККМ.Склад + ")";
		КассаККМ.ВалютаДенежныхСредств = ВалютыРасчетов[0].Значение;
		КассаККМ.Записать();
		
		ТекКассаККМ = Справочники.КассыККМ.КассаККМФискальныйРегистраторПоУмолчанию();
		
		Если Не ЗначениеЗаполнено(ТекКассаККМ) Тогда
			КассаККМ = Справочники.КассыККМ.СоздатьЭлемент();
		Иначе
			КассаККМ = ТекКассаККМ.ПолучитьОбъект();
		КонецЕсли;
		
		КассаККМ.Владелец = Организация.Ссылка;
		КассаККМ.ТипКассы = Перечисления.ТипыКассККМ.ФискальныйРегистратор;
		КассаККМ.Склад = ОптовоРозничныйСклад.Ссылка;
		КассаККМ.Наименование = Строка(КассаККМ.ТипКассы) + "(" + КассаККМ.Склад + ")";
		КассаККМ.ВалютаДенежныхСредств = ВалютыРасчетов[0].Значение;
		КассаККМ.Записать();
		
		Константы.ИспользоватьРозничныеПродажи.Установить(Истина);
	Иначе
		
		Если Не ЗначениеЗаполнено(ТекОптовыйСклад) Тогда
			ОптовыйСклад = Справочники.Склады.СоздатьЭлемент();
			ОптовыйСклад.Наименование = НСтр("ru='Оптовый склад'");
			ОптовыйСклад.ТипСклада = Перечисления.ТипыСкладов.ОптовыйСклад;
			ОптовыйСклад.КонтролироватьСвободныеОстатки = Истина;
			ОптовыйСклад.ДополнительныеСвойства.Вставить("ПропуститьОбновлениеФлагаКонтроляОперативныхОстатков");
			ОптовыйСклад.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяКасса = Справочники.Кассы.ПолучитьКассуПоУмолчанию(Организация.Ссылка);
	Если Не ЗначениеЗаполнено(ТекущаяКасса) Тогда
		Касса = Справочники.Кассы.СоздатьЭлемент();
	Иначе
		Касса = ТекущаяКасса.ПолучитьОбъект();
	КонецЕсли;
	
	Касса.Владелец = Организация.Ссылка;
	Касса.ВалютаДенежныхСредств = ВалютыРасчетов[0].Значение;
	Касса.Наименование = Лев(СокрЛП(Касса.Владелец) + " (" + Строка(Касса.ВалютаДенежныхСредств) + ")", 100);
	Касса.Записать();
	
	// Добавим режим ЕНВД для организации
	Если ДанныеОрганизации.Организация.РозничнаяТорговляОблагаетсяЕНВД Тогда
		Режимы = РегистрыСведений.ПримененияЕНВД.СоздатьНаборЗаписей();
		Режимы.Отбор.Организация.Использование = Истина;
		Режимы.Отбор.Организация.Значение = Организация.Ссылка;
		
		Режим = Режимы.Добавить();
		Режим.Период = НачалоМесяца(ТекущаяДатаСеанса);
		Режим.Организация = Организация.Ссылка;
		Режим.Склад = ОптовоРозничныйСклад.Ссылка;
		Режим.РозничнаяТорговляОблагаетсяЕНВД = Истина;
		
		Режимы.Записать();
	КонецЕсли;
	
	// добавим учетную политику для организации
	КлючЗаписи = Новый Структура("Организация, Период", Организация.Ссылка, НачалоМесяца(ТекущаяДатаСеанса));
	
	МенеджерЗаписи = НастройкиНалоговУчетныхПолитик.МенеджерЗаписиПериодическогоРегистра(
		"НастройкиСистемыНалогообложения",
		КлючЗаписи);
	МенеджерЗаписи.СистемаНалогообложения 	= ДанныеОрганизации.Организация.СистемаНалогообложения;
	МенеджерЗаписи.ПрименяетсяЕНВД 			= ДанныеОрганизации.Организация.РозничнаяТорговляОблагаетсяЕНВД;
	МенеджерЗаписи.ПрименяетсяПСН 			= ДанныеОрганизации.Организация.ПрименяетсяПСН;
	МенеджерЗаписи.ПрименяетсяАУСН 			= ДанныеОрганизации.Организация.ПрименяетсяАУСН;
	МенеджерЗаписи.Записать(Истина);

	МенеджерЗаписи = НастройкиНалоговУчетныхПолитик.МенеджерЗаписиПериодическогоРегистра(
		"УчетнаяПолитикаФинансовогоУчета",
		КлючЗаписи);
	МенеджерЗаписи.МетодОценкиСтоимостиТоваров = Перечисления.МетодыОценкиСтоимостиТоваров.СредняяЗаМесяц;
	МенеджерЗаписи.Записать(Истина);
	
	// Запишем расчетный счет
	Если Не ПустаяСтрока(ДанныеОрганизации.Организация.НомерСчета) Тогда
		
		ТекущийСчет = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(ТекущаяОрганизация);
		
		Если ЗначениеЗаполнено(ТекущийСчет) Тогда
			РасчетныйСчет = ТекущийСчет.ПолучитьОбъект();
		Иначе
			РасчетныйСчет = Справочники.БанковскиеСчетаОрганизаций.СоздатьЭлемент();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(РасчетныйСчет, ДанныеОрганизации.Организация);
		РасчетныйСчет.Владелец = Организация.Ссылка;
		Если ВалютаРасчетногоСчета.Пустая() Тогда
			РасчетныйСчет.ВалютаДенежныхСредств = ВалютыРасчетов[0].Значение;
		Иначе
			РасчетныйСчет.ВалютаДенежныхСредств = ВалютаРасчетногоСчета;
		КонецЕсли;
		РасчетныйСчет.Наименование = СформироватьАвтоНаименованиеРасчетногоСчета(РасчетныйСчет);
		РасчетныйСчет.ВариантВыводаМесяца = Перечисления.ВариантыВыводаМесяцаВДатеДокумента.Числом;
		РасчетныйСчет.Записать();
	КонецЕсли;
	
	// Запишем документы ввода начальных остатков по банковским счетам
	Если ИзменитьТекущийОстатокБезналичныхДенежныхСредств И ДанныеОрганизации.Организация.ТекущийОстатокБезналичныхДенежныхСредств > 0 Тогда
		ДокументВводаОстатков = Документы.ВводОстатковДенежныхСредств.СоздатьДокумент();
		ДокументВводаОстатков.Дата = ТекущаяДатаСеанса;
		ДокументВводаОстатков.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковНаБанковскихСчетах;
		ДокументВводаОстатков.Организация = Организация.Ссылка;
		Если ВалютаРасчетногоСчета.Пустая() Тогда
			ДокументВводаОстатков.Валюта = ВалютыРасчетов[0].Значение;
		Иначе
			ДокументВводаОстатков.Валюта = ВалютаРасчетногоСчета;
		КонецЕсли;
		ДокументВводаОстатков.Ответственный = ТекущийПользователь;
		ДокументВводаОстатков.Комментарий = НСтр("ru= 'Введен автоматически при настройке системы.'");
		СтрокаБанковскогоСчета = ДокументВводаОстатков.БанковскиеСчета.Добавить();
		СтрокаБанковскогоСчета.БанковскийСчет = РасчетныйСчет.Ссылка;
		СтрокаБанковскогоСчета.Сумма = ДанныеОрганизации.Организация.ТекущийОстатокБезналичныхДенежныхСредств;
		СтрокаБанковскогоСчета.СуммаРегл = СтрокаБанковскогоСчета.Сумма;
		ДокументВводаОстатков.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;
	
	// Запишем документы ввода начальных остатков по кассам
	Если ИзменитьТекущийОстатокНаличныхДенежныхСредств И ДанныеОрганизации.Организация.ТекущийОстатокНаличныхДенежныхСредств > 0 Тогда
		ДокументВводаОстатков = Документы.ВводОстатковДенежныхСредств.СоздатьДокумент();
		ДокументВводаОстатков.Дата = ТекущаяДатаСеанса;
		ДокументВводаОстатков.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковВКассах;
		ДокументВводаОстатков.Организация = Организация.Ссылка;
		ДокументВводаОстатков.Валюта = ВалютыРасчетов[0].Значение;
		ДокументВводаОстатков.Ответственный = ТекущийПользователь;
		ДокументВводаОстатков.Комментарий = НСтр("ru= 'Введен автоматически при настройке системы.'");
		СтрокаКассы = ДокументВводаОстатков.Кассы.Добавить();
		СтрокаКассы.Касса= Касса.Ссылка;
		СтрокаКассы.Сумма = ДанныеОрганизации.Организация.ТекущийОстатокНаличныхДенежныхСредств;
		СтрокаКассы.СуммаРегл = СтрокаКассы.Сумма;
		ДокументВводаОстатков.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;
	
	Если АдресаДанныхОрганизаций.Количество() > 1 Тогда
		Константы.ИспользоватьНесколькоОрганизаций.Установить(Истина);
		Константы.ИспользоватьНесколькоКасс.Установить(Истина);
		Константы.ИспользоватьНесколькоРасчетныхСчетов.Установить(Истина);
	КонецЕсли;
КонецПроцедуры

&НаСервере 
Процедура УстановитьЦветЗаголовкаПоляОшибки()
	ЦветЗаголовкаПоляОшибки = ЦветаСтиля.ПоясняющийОшибкуТекст;
	ЦветЗаголовкаАвто = ЦветаСтиля.ЦветТекстаФормы;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура УстановитьНазваниеКомандыРеквизитовОрганизации(ЭтаФорма)
	Если ПустаяСтрока(ЭтаФорма.СтрокаРеквизитовОрганизации) Тогда
		ЭтаФорма.Элементы.ИзменитьРеквизитыОрганизации.Заголовок = НСтр("ru = 'Указать'");
	Иначе
		ЭтаФорма.Элементы.ИзменитьРеквизитыОрганизации.Заголовок = НСтр("ru = 'Изменить'");
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура УстановитьНазваниеКомандыОтветственныхЛиц(ЭтаФорма)
	Если ПустаяСтрока(ЭтаФорма.СтрокаОтветственныхЛиц) Тогда
		ЭтаФорма.Элементы.ИзменитьОтветственныеЛица.Заголовок = НСтр("ru = 'Указать'");
	Иначе
		ЭтаФорма.Элементы.ИзменитьОтветственныеЛица.Заголовок = НСтр("ru = 'Изменить'");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ПрочитатьДанныеОрганизации()

	ЗаполнитьЗначенияСвойств(ЭтотОбъект,ТекущаяОрганизация);
	
	Ответственные = ОтветственныеЛицаСервер.ПолучитьОтветственныеЛицаОрганизации(ТекущаяОрганизация);
	РуководительФИО = Ответственные.Руководитель;
	ТекущаяДолжностьРуководителя = Ответственные.РуководительДолжность;
	БухгалтерФИО = Ответственные.ГлавныйБухгалтер;
	
	ПараметрыУчетнойПолитики = НастройкиНалоговУчетныхПолитик.ДействующиеПараметрыНалоговУчетныхПолитикНаДату(
		"НастройкиСистемыНалогообложения",
		ТекущаяОрганизация);
	Если ЗначениеЗаполнено(ПараметрыУчетнойПолитики) Тогда
		СистемаНалогообложения 	= ПараметрыУчетнойПолитики.СистемаНалогообложения;
		ПрименяетсяПСН 			= ПараметрыУчетнойПолитики.ПрименяетсяПСН;
		ПрименяетсяАУСН 		= ПараметрыУчетнойПолитики.ПрименяетсяАУСН;
	КонецЕсли;
	ИспользоватьРозничныеПродажи = Константы.ИспользоватьРозничныеПродажи.Получить();
	Элементы.РозничнаяТорговляОблагаетсяЕНВД.Доступность = ИспользоватьРозничныеПродажи;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПримененияЕНВДСрезПоследних.РозничнаяТорговляОблагаетсяЕНВД
		|ИЗ
		|	РегистрСведений.ПримененияЕНВД.СрезПоследних КАК ПримененияЕНВДСрезПоследних";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		РозничнаяТорговляОблагаетсяЕНВД = ВыборкаДетальныеЗаписи.РозничнаяТорговляОблагаетсяЕНВД;
	КонецЦикла;
	
	ЮрФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяОрганизация, "ЮрФизЛицо");
	Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
		ИндивидуальныйПредприниматель = 1;
		Элементы.СтраницыЗаголовокНаименования.ТекущаяСтраница = Элементы.СтраницаЗаголовокИП;
		ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель;
	Иначе
		ИндивидуальныйПредприниматель = 0;
		Элементы.СтраницыЗаголовокНаименования.ТекущаяСтраница = Элементы.СтраницаЗаголовокЮЛ;
		ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
	КонецЕсли;
	
	ТекущийСчет = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(ТекущаяОрганизация);
	
	Если ЗначениеЗаполнено(ТекущийСчет) Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма,ТекущийСчет,,"Наименование");
	КонецЕсли;
	
	ВидЦены = Ценообразование.ВидЦеныПрайсЛист();
	
	Если ЗначениеЗаполнено(ВидЦены) Тогда
		
		ПараметрыВидаЦены = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидЦены, "ЦенаВключаетНДС, СпособЗаданияЦены, Наценка");
		ЦенаВключаетНДС = ПараметрыВидаЦены.ЦенаВключаетНДС;
		СпособЗаданияЦены = ПараметрыВидаЦены.СпособЗаданияЦены;
		
		Если СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.НаценкаНаЦенуПоступления Тогда
			Наценка= ПараметрыВидаЦены.Наценка;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДенежныеСредстваБезналичныеОстатки.СуммаОстаток
		|ИЗ
		|	РегистрНакопления.ДенежныеСредстваБезналичные.Остатки(, БанковскийСчет = &БанковскийСчет) КАК ДенежныеСредстваБезналичныеОстатки";
	
	Запрос.УстановитьПараметр("БанковскийСчет", ТекущийСчет);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТекущийОстатокБезналичныхДенежныхСредств = ВыборкаДетальныеЗаписи.СуммаОстаток;
	КонецЦикла;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДенежныеСредстваНаличныеОстатки.СуммаОстаток
		|ИЗ
		|	РегистрНакопления.ДенежныеСредстваНаличные.Остатки(, ) КАК ДенежныеСредстваНаличныеОстатки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТекущийОстатокНаличныхДенежныхСредств = ВыборкаДетальныеЗаписи.СуммаОстаток;
	КонецЦикла;
	
	ПрефиксУзлаРаспределеннойИнформационнойБазы = Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Получить();
	
КонецФункции

&НаСервере
Процедура ОчиститьДокументыВводаОстатокв()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВводОстатков.Ссылка
		|ИЗ
		|	Документ.ВводОстатков КАК ВводОстатков
		|ГДЕ
		|	ВводОстатков.Комментарий ПОДОБНО &Комментарий
		|	И ВЫБОР
		|			КОГДА &ИзменитьТекущийОстатокБезналичныхДенежныхСредств
		|					И &ИзменитьТекущийОстатокНаличныхДенежныхСредств
		|				ТОГДА ИСТИНА
		|			КОГДА &ИзменитьТекущийОстатокБезналичныхДенежныхСредств
		|				ТОГДА ВводОстатков.ХозяйственнаяОперация = &НаБанковскихСчетах
		|			КОГДА &ИзменитьТекущийОстатокНаличныхДенежныхСредств
		|				ТОГДА ВводОстатков.ХозяйственнаяОперация = &ВКассе
		|		КОНЕЦ
		|		
		|ОБЪЕДИНИТЬ ВСЕ
		|		
		|ВЫБРАТЬ
		|	ВводОстатков.Ссылка
		|ИЗ
		|	Документ.ВводОстатковДенежныхСредств КАК ВводОстатков
		|ГДЕ
		|	ВводОстатков.Комментарий ПОДОБНО &Комментарий
		|	И ВЫБОР
		|			КОГДА &ИзменитьТекущийОстатокБезналичныхДенежныхСредств
		|					И &ИзменитьТекущийОстатокНаличныхДенежныхСредств
		|				ТОГДА ИСТИНА
		|			КОГДА &ИзменитьТекущийОстатокБезналичныхДенежныхСредств
		|				ТОГДА ВводОстатков.ХозяйственнаяОперация = &НаБанковскихСчетах
		|			КОГДА &ИзменитьТекущийОстатокНаличныхДенежныхСредств
		|				ТОГДА ВводОстатков.ХозяйственнаяОперация = &ВКассе
		|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("ИзменитьТекущийОстатокБезналичныхДенежныхСредств",ИзменитьТекущийОстатокБезналичныхДенежныхСредств);
	Запрос.УстановитьПараметр("ИзменитьТекущийОстатокНаличныхДенежныхСредств",ИзменитьТекущийОстатокНаличныхДенежныхСредств);
	Запрос.УстановитьПараметр("НаБанковскихСчетах",Перечисления.ХозяйственныеОперации.ВводОстатковНаБанковскихСчетах);
	Запрос.УстановитьПараметр("ВКассе", Перечисления.ХозяйственныеОперации.ВводОстатковВКассах);
	Запрос.УстановитьПараметр("Комментарий", НСтр("ru='Введен автоматически при настройке системы.'"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДокОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ДокОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ДоступностьСозданияДокументовВводаНачальныхОстатков()

	ТекущийСчет = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(ТекущаяОрганизация);
	
	ИзменитьТекущийОстатокБезналичныхДенежныхСредств = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДенежныеСредстваБезналичныеОстатки.СуммаОстаток
		|ИЗ
		|	РегистрНакопления.ДенежныеСредстваБезналичные.Остатки(, БанковскийСчет = &БанковскийСчет) КАК ДенежныеСредстваБезналичныеОстатки";
	
	Запрос.УстановитьПараметр("БанковскийСчет", ТекущийСчет);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ИзменитьТекущийОстатокБезналичныхДенежныхСредств = Не ВыборкаДетальныеЗаписи.СуммаОстаток > 0;
	КонецЦикла;
	
	
	ИзменитьТекущийОстатокНаличныхДенежныхСредств = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДенежныеСредстваНаличныеОстатки.СуммаОстаток
		|ИЗ
		|	РегистрНакопления.ДенежныеСредстваНаличные.Остатки(, ) КАК ДенежныеСредстваНаличныеОстатки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ИзменитьТекущийОстатокНаличныхДенежныхСредств = Не ВыборкаДетальныеЗаписи.СуммаОстаток > 0;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементов()

	Элементы.ТекущийОстатокБезналичныхДенежныхСредств.ТолькоПросмотр = Не ИзменитьТекущийОстатокБезналичныхДенежныхСредств;
	Элементы.ТекущийОстатокНаличныхДенежныхСредств.ТолькоПросмотр = Не ИзменитьТекущийОстатокНаличныхДенежныхСредств;
	
	Элементы.ТекущийОстатокБезналичныхДенежныхСредств.ОтметкаНезаполненного = ИзменитьТекущийОстатокБезналичныхДенежныхСредств;
	Элементы.ТекущийОстатокНаличныхДенежныхСредств.ОтметкаНезаполненного = ИзменитьТекущийОстатокНаличныхДенежныхСредств;

	Элементы.ПрименяетсяАУСН.Видимость =
		СистемаНалогообложения =ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.Упрощенная");
	Элементы.ПрименяетсяПСН.Видимость =
		СистемаНалогообложения =ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.Упрощенная");
	
	Элементы.ПрименяетсяАУСН.Доступность 	= Не ПрименяетсяПСН;
	Элементы.ПрименяетсяПСН.Доступность 	= Не ПрименяетсяАУСН;

КонецПроцедуры

#КонецОбласти

#Область Инициализация

ВыполняетсяЗакрытие = Ложь;

#КонецОбласти
