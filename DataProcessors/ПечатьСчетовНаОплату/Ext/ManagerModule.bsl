#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область Печать

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов - см. УправлениеПечатьюПереопределяемый.ПриПечати.МассивОбъектов
//  ПараметрыПечати - см. УправлениеПечатьюПереопределяемый.ПриПечати.ПараметрыПечати
//  КоллекцияПечатныхФорм - см. УправлениеПечатьюПереопределяемый.ПриПечати.КоллекцияПечатныхФорм
//  ОбъектыПечати - см. УправлениеПечатьюПереопределяемый.ПриПечати.ОбъектыПечати
//  ПараметрыВывода - см. УправлениеПечатьюПереопределяемый.ПриПечати.ПараметрыВывода
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетНаОплату") Тогда
		СтруктураТипов = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(МассивОбъектов);
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"СчетНаОплату",
			НСтр("ru='Счет на оплату'"),
			СформироватьПечатнуюФормуСчетНаОплату(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПредварительныйПросмотрПечатнойФормыСчетНаОплату") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПредварительныйПросмотрПечатнойФормыСчетНаОплату",
			НСтр("ru='Счет на оплату'"),
			ПечатьПредварительныйПросмотрСчетаНаОплату(МассивОбъектов[0], ОбъектыПечати, "СчетНаОплату"));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "InvoiceInt") Тогда
		СтруктураТипов = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(МассивОбъектов);
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"InvoiceInt",
			НСтр("ru='Invoice'"),
			СформироватьПечатнуюФормуInvoice(СтруктураТипов, ОбъектыПечати, ПараметрыПечати, ПараметрыВывода.КодЯзыка),,
			"Обработка.ПечатьСчетовНаОплату.ПФ_MXL_Invoice");
		
		ОписаниеПечатнойФормы = КоллекцияПечатныхФорм.Найти(ВРег("InvoiceInt"), "ИмяВРЕГ");
		Если ОписаниеПечатнойФормы <> Неопределено Тогда
			ОписаниеПечатнойФормы.ДоступенВыводНаДругихЯзыках = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ProformaInvoice") Тогда
		СтруктураТипов = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(МассивОбъектов);
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ProformaInvoice",
			НСтр("ru='Proforma invoice'"),
			СформироватьПечатнуюФормуProformaInvoice(СтруктураТипов, ОбъектыПечати, ПараметрыПечати, ПараметрыВывода.КодЯзыка),,
			"Обработка.ПечатьСчетовНаОплату.ПФ_MXL_Invoice");
		
		ОписаниеПечатнойФормы = КоллекцияПечатныхФорм.Найти(ВРег("ProformaInvoice"), "ИмяВРЕГ");
		Если ОписаниеПечатнойФормы <> Неопределено Тогда
			ОписаниеПечатнойФормы.ДоступенВыводНаДругихЯзыках = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "CreditNote") Тогда
		
		СтруктураТипов = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(МассивОбъектов);
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"CreditNote",
			НСтр("ru = 'Credit Note'"),
			СформироватьПечатнуюФормуКредитНота(СтруктураТипов, ОбъектыПечати, ПараметрыПечати, ПараметрыВывода.КодЯзыка),,
			"Обработка.ПечатьСчетовНаОплату.ПФ_MXL_DebitCreditNote");
		
		ОписаниеПечатнойФормы = КоллекцияПечатныхФорм.Найти(ВРег("CreditNote"), "ИмяВРЕГ");
		Если ОписаниеПечатнойФормы <> Неопределено Тогда
			ОписаниеПечатнойФормы.ДоступенВыводНаДругихЯзыках = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "DebitNote") Тогда
		
		СтруктураТипов = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(МассивОбъектов);
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"DebitNote",
			НСтр("ru = 'Debit Note'"),
			СформироватьПечатнуюФормуДебетНота(СтруктураТипов, ОбъектыПечати, ПараметрыПечати, ПараметрыВывода.КодЯзыка),,
			"Обработка.ПечатьСчетовНаОплату.ПФ_MXL_DebitCreditNote");
		
		ОписаниеПечатнойФормы = КоллекцияПечатныхФорм.Найти(ВРег("DebitNote"), "ИмяВРЕГ");
		Если ОписаниеПечатнойФормы <> Неопределено Тогда
			ОписаниеПечатнойФормы.ДоступенВыводНаДругихЯзыках = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

#КонецОбласти

#Область СчетНаОплату

Функция СформироватьПечатнуюФормуСчетНаОплату(СтруктураТипов, ОбъектыПечати, ПараметрыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СЧЕТНАОПЛАТУ";
	
	НомерТипаДокумента = 0;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
		
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтруктураОбъектов.Ключ);
		ДанныеДляПечати = МенеджерОбъекта.ПолучитьДанныеДляПечатнойФормыСчетаНаОплату(ПараметрыПечати, СтруктураОбъектов.Значение);
		
		ЗаполнитьТабличныйДокументСчетаНаОплату(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, ПараметрыПечати);
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура ЗаполнитьРеквизитыШапкиСчетаНаОплату(ДанныеПечати, Макет, ТабличныйДокумент, ТаблицаЭтапыОплаты, ТаблицаТовары)
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьСчетовНаОплату.ПФ_MXL_СчетНаОплату");
	
	СведенияОПоставщике = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокСчета");
	ФормированиеПечатныхФорм.ВывестиЛоготипВТабличныйДокумент(Макет, ОбластьМакета, "ЗаголовокСчетаЛоготип", ДанныеПечати.Организация);
	ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, ДанныеПечати.Ссылка);
	
	Если ТаблицаЭтапыОплаты.Количество() = 0 Тогда
		ДатаПлатежа = '00010101';
	ИначеЕсли ТаблицаЭтапыОплаты.Количество() = 1 Тогда
		ДатаПлатежа = ТаблицаЭтапыОплаты[0].ДатаПлатежа;
	Иначе
		ДатаПлатежа = ТаблицаЭтапыОплаты[ТаблицаЭтапыОплаты.Количество()-1].ДатаПлатежа;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаПлатежа) Тогда
		СтруктураДанныхЗаголовок = Новый Структура;
		НадписьСрокДействия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Счет действителен до %1.'", ОбщегоНазначения.КодОсновногоЯзыка()), Формат(ДатаПлатежа, "ДЛФ=D")) + " ";
		СтруктураДанныхЗаголовок.Вставить("СрокДействия", НадписьСрокДействия);
		ОбластьМакета.Параметры.Заполнить(СтруктураДанныхЗаголовок);
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	Если ДанныеПечати.ПлатежЗаРубеж Тогда
		
		ОбластьМакета = Макет.ПолучитьОбласть("ОбразецЗаполненияРеквизитыБанка");
		СтруктураДанныхШапки = Новый Структура;
		ПредставлениеПоставщикаДляПлатПоручения = "";
		
		Если ЗначениеЗаполнено(ДанныеПечати.БанковскийСчет) Тогда
			СтруктураДанныхШапки.Вставить("СчетБанкаПолучателяПредставление", ДанныеПечати.НомерБанковскогоСчета);
			СтруктураДанныхШапки.Вставить("БанкПолучателяПредставление", ДанныеПечати.НаименованиеБанкаМеждународное);
			Если ПустаяСтрока(СтруктураДанныхШапки.БанкПолучателяПредставление) Тогда
				СтруктураДанныхШапки.Вставить("БанкПолучателяПредставление", ДанныеПечати.НаименованиеБанка);
			КонецЕсли; 
			СтруктураДанныхШапки.Вставить("АдресБанкаПолучателяПредставление", ДанныеПечати.АдресБанка);
			СтруктураДанныхШапки.Вставить("СВИФТБанка", ДанныеПечати.СВИФТБанка);
			ПредставлениеПоставщикаДляПлатПоручения = ДанныеПечати.БанковскийСчетТекстКорреспондента;
		КонецЕсли;
		
		Если ПустаяСтрока(ПредставлениеПоставщикаДляПлатПоручения) Тогда
			ПредставлениеПоставщикаДляПлатПоручения = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
		КонецЕсли;
		СтруктураДанныхШапки.Вставить("ПредставлениеПоставщикаДляПлатПоручения", ПредставлениеПоставщикаДляПлатПоручения);
		ОбластьМакета.Параметры.Заполнить(СтруктураДанныхШапки);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если Не ПустаяСтрока(ДанныеПечати.НаименованиеБанкаДляРасчетовМеждународное) Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ОбразецЗаполненияРеквизитыБанкаКорреспондента");
			
			СтруктураДанныхШапки.Очистить();
			СтруктураДанныхШапки.Вставить("БанкКорреспондентПолучателяПредставление",
				ДанныеПечати.НаименованиеБанкаДляРасчетовМеждународное + " " + ДанныеПечати.АдресБанкаДляРасчетов);
			СтруктураДанныхШапки.Вставить("СВИФТБанкаДляРасчетов", ДанныеПечати.СВИФТБанкаДляРасчетов);
			СтруктураДанныхШапки.Вставить("СчетБанкаДляРасчетовПредставление", ДанныеПечати.СчетВБанкеДляРасчетов);
			
			ОбластьМакета.Параметры.Заполнить(СтруктураДанныхШапки);
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("ОбразецЗаполненияНазначениеПлатежа");
		СтруктураДанныхШапки.Очистить();
		Если Не ЗначениеЗаполнено(ДанныеПечати.НазначениеПлатежа)
			И ТипЗнч(ДанныеПечати.Ссылка) <> Тип("ДокументСсылка.СчетНаОплатуКлиенту") Тогда
			СтруктураДанныхШапки.Вставить("НазначениеПлатежа", Документы.СчетНаОплатуКлиенту.СформироватьНазначениеПлатежа(
				ДанныеПечати.Номер, ДанныеПечати.Ссылка));
		Иначе
			СтруктураДанныхШапки.Вставить("НазначениеПлатежа", ДанныеПечати.НазначениеПлатежа);
		КонецЕсли;
		ОбластьМакета.Параметры.Заполнить(СтруктураДанныхШапки);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
	Иначе
	
		Если ДанныеПечати.КонтрагентЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо
			И ЗначениеЗаполнено(ДанныеПечати.БанковскийСчет) Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ОбразецЗаполненияППСКодом");
		Иначе
			ОбластьМакета = Макет.ПолучитьОбласть("ОбразецЗаполненияПП");
		КонецЕсли;
		
		СтруктураДанныхШапки = Новый Структура;
		СтруктураДанныхШапки.Вставить("ИНН", СведенияОПоставщике.ИНН);
		СтруктураДанныхШапки.Вставить("КПП",СведенияОПоставщике.КПП);
		ПредставлениеПоставщикаДляПлатПоручения = "";
		
		СтруктураДанныхШапки.Вставить("ИдентификаторПлатежа", ДанныеПечати.ИдентификаторПлатежа);
		
		Если ЗначениеЗаполнено(ДанныеПечати.БанковскийСчет) Тогда
			
			Если ЗначениеЗаполнено(ДанныеПечати.БИКБанкаДляРасчетов) Тогда
				Банк        = ?(ЗначениеЗаполнено(ДанныеПечати.НаименованиеРКЦБанкаДляРасчетов),
								ДанныеПечати.НаименованиеРКЦБанкаДляРасчетов + "//" + ДанныеПечати.НаименованиеБанкаДляРасчетов,
								ДанныеПечати.НаименованиеБанкаДляРасчетов);
				БИК         = ДанныеПечати.БИКБанкаДляРасчетов;
				КоррСчет    = ДанныеПечати.КоррСчетБанкаДляРасчетов;
				ГородБанка  = ДанныеПечати.ГородБанкаДляРасчетов;
				НомерСчета  = ДанныеПечати.КоррСчетБанка;
			Иначе
				Банк        = ?(ЗначениеЗаполнено(ДанныеПечати.НаименованиеРКЦБанка),
								ДанныеПечати.НаименованиеРКЦБанка + "//" + ДанныеПечати.НаименованиеБанка,
								ДанныеПечати.НаименованиеБанка);
				БИК         = ДанныеПечати.БИКБанк;
				КоррСчет    = ДанныеПечати.КоррСчетБанка;
				ГородБанка  = ДанныеПечати.ГородБанка;
				НомерСчета  = ДанныеПечати.НомерБанковскогоСчета;
			КонецЕсли;
			
			СтруктураДанныхШапки.Вставить("БИКБанкаПолучателя", БИК);
			СтруктураДанныхШапки.Вставить("БанкПолучателя", Банк);
			СтруктураДанныхШапки.Вставить("БанкПолучателяПредставление", СокрЛП(Банк) + " " + ГородБанка);
			СтруктураДанныхШапки.Вставить("СчетБанкаПолучателя", КоррСчет);
			СтруктураДанныхШапки.Вставить("СчетБанкаПолучателяПредставление", КоррСчет);
			СтруктураДанныхШапки.Вставить("СчетПолучателяПредставление", НомерСчета);
			СтруктураДанныхШапки.Вставить("СчетПолучателя", НомерСчета);
			ПредставлениеПоставщикаДляПлатПоручения = ДанныеПечати.БанковскийСчетТекстКорреспондента;
			
		КонецЕсли;
	
		Если ПустаяСтрока(ПредставлениеПоставщикаДляПлатПоручения) Тогда
			ПредставлениеПоставщикаДляПлатПоручения = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеПечати.НазначениеПлатежа)
			И ТипЗнч(ДанныеПечати.Ссылка) <> Тип("ДокументСсылка.СчетНаОплатуКлиенту") Тогда
			
			СтруктураДанныхШапки.Вставить("НазначениеПлатежа", Документы.СчетНаОплатуКлиенту.СформироватьНазначениеПлатежа(
				ДанныеПечати.Номер, ДанныеПечати.Ссылка));
			
		Иначе
			
			СтруктураДанныхШапки.Вставить("НазначениеПлатежа", ДанныеПечати.НазначениеПлатежа);
			
		КонецЕсли;
		
		СтруктураДанныхШапки.Вставить("ПредставлениеПоставщикаДляПлатПоручения", ПредставлениеПоставщикаДляПлатПоручения);
		ОбластьМакета.Параметры.Заполнить(СтруктураДанныхШапки);
		
		Если ДанныеПечати.КонтрагентЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо
			И ЗначениеЗаполнено(ДанныеПечати.БанковскийСчет) Тогда
			
			РеквизитыПлатежа = РеквизитыПлатежаQRКод(СтруктураДанныхШапки);
			РеквизитыПлатежа.СуммаЧислом = СуммаКОплатеПоСчету(ДанныеПечати, ТаблицаТовары);
			РеквизитыПлатежа.Ссылка = ДанныеПечати.Ссылка;
			
			ВывестиQRКод(РеквизитыПлатежа, ДанныеПечати, ОбластьМакета);
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	КолонкаКодов = ФормированиеПечатныхФорм.ДополнительнаяКолонкаПечатныхФормДокументов().ИмяКолонки;
	ВыводитьКоды = ЗначениеЗаполнено(КолонкаКодов);
	
	Смещать = ТипСмещенияТабличногоДокумента.ПоВертикали;
	ОбластьПервойКолонкиТоваров = Макет.Область("ПерваяКолонкаТовара");
	Если НЕ ВыводитьКоды Тогда
		ОбластьПервойКолонкиТоваров.ШиринаКолонки = ОбластьПервойКолонкиТоваров.ШиринаКолонки + Макет.Область("КолонкаКодов").ШиринаКолонки;
		Макет.УдалитьОбласть(Макет.Область("КолонкаКодов"), Смещать);
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	
	ТекстЗаголовка = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(ДанныеПечати, НСтр("ru='Счет на оплату'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СтруктураДанныхШапки = Новый Структура;
	СтруктураДанныхШапки.Вставить("ТекстЗаголовка", ТекстЗаголовка);
	ОбластьМакета.Параметры.Заполнить(СтруктураДанныхШапки);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	
	СтруктураДанныхПоставщик = Новый Структура;
	СтруктураДанныхПоставщик.Вставить("ПредставлениеПоставщика", 
		ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.ОрганизацияПоставщик, ДанныеПечати.Дата),
			"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,"));
	ОбластьМакета.Параметры.Заполнить(СтруктураДанныхПоставщик);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	СтруктураДанныхПокупатель = Новый Структура;
	СтруктураДанныхПокупатель.Вставить("ПредставлениеПолучателя", 
		ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата),
			"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,"));
	ОбластьМакета.Параметры.Заполнить(СтруктураДанныхПокупатель);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	Если ЗначениеЗаполнено(ДанныеПечати.Грузоотправитель) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("Грузоотправитель");
		СтруктураДанныхГрузоотправитель = Новый Структура;
		СтруктураДанныхГрузоотправитель.Вставить("ПредставлениеГрузоотправителя", ОписаниеОрганизации(ДанныеПечати, "Грузоотправитель"));
		ОбластьМакета.Параметры.Заполнить(СтруктураДанныхГрузоотправитель);
		ТабличныйДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПечати.Грузополучатель) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("Грузополучатель");
		СтруктураДанныхГрузополучатель = Новый Структура;
		СтруктураДанныхГрузополучатель.Вставить("ПредставлениеГрузополучателя", ОписаниеОрганизации(ДанныеПечати, "Грузополучатель"));
		ОбластьМакета.Параметры.Заполнить(СтруктураДанныхГрузополучатель);
		ТабличныйДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПодвалаСчетаНаОплату(ДанныеПечати, Макет, ТабличныйДокумент, ТаблицаЭтапыОплаты, СоответствиеСтавокНДС, ПараметрыПечати)
	
	МассивПроверкиВывода = Новый Массив;
	
	// Вывести этапы графика оплаты
	Если ТаблицаЭтапыОплаты.Количество() > 1 Тогда
		
		ИмяКолонкиДатыОплаты = ?(ДанныеПечати.СчетКВозврату,
			НСтр("ru='Дата оплаты или возврата'", ОбщегоНазначения.КодОсновногоЯзыка()),
			НСтр("ru='Дата оплаты'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
		ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицыЭтапыОплаты");
		ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ИтогоЭтапыОплаты");
		СтруктураДанныхШапки = Новый Структура("ИмяКолонкиДатыОплаты",ИмяКолонкиДатыОплаты);
		ОбластьШапкаТаблицы.Параметры.Заполнить(СтруктураДанныхШапки);
		МассивПроверкиВывода.Добавить(ОбластьШапкаТаблицы);
		МассивПроверкиВывода.Добавить(ОбластьПодвалТаблицы);
		
		ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицыЭтапыОплаты");
		
		НомерЭтапа = 1;
		Для Каждого ТекЭтап Из ТаблицаЭтапыОплаты Цикл
			
			ПараметрыСтроки = НовыеПараметрыСтрокиЭтапа();
			ЗаполнитьЗначенияСвойств(ПараметрыСтроки, ТекЭтап);
			ПараметрыСтроки.НомерСтроки = НомерЭтапа;
			Если Не ПараметрыСтроки.ЭтоЗалогЗаТару Тогда
				ПараметрыСтроки.ТекстНДС = ФормированиеПечатныхФорм.СформироватьТекстНДСЭтапаОплаты(
					СоответствиеСтавокНДС,
					ТекЭтап.ПроцентПлатежа);
			Иначе
				ПараметрыСтроки.ПроцентПлатежа = "-";
				ПараметрыСтроки.ТекстНДС = НСтр("ru='Залог за тару. Без налога (НДС).'", ОбщегоНазначения.КодОсновногоЯзыка());
			КонецЕсли;
			
			ОбластьСтрокаТаблицы.Параметры.Заполнить(ПараметрыСтроки);
			
			МассивПроверкиВывода.Добавить(ОбластьСтрокаТаблицы);
			
			Если ТабличныйДокумент.ПроверитьВывод(МассивПроверкиВывода) Тогда
				Если НомерЭтапа = 1 Тогда
					ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
					МассивПроверкиВывода.Удалить(0);
				КонецЕсли;
			Иначе
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
			МассивПроверкиВывода.Удалить(МассивПроверкиВывода.ВГраница());
			
			НомерЭтапа = НомерЭтапа + 1;
			
		КонецЦикла;
		ТабличныйДокумент.Вывести(ОбластьПодвалТаблицы);
		
	КонецЕсли;
	
	// Вывести дополнительную информацию
	Если ЗначениеЗаполнено(ДанныеПечати.ДополнительнаяИнформация) Тогда
		
		Область = Макет.ПолучитьОбласть("ДополнительнаяИнформация");
		Область.Параметры.Заполнить(ДанныеПечати);
		ТабличныйДокумент.Вывести(Область);
		
	КонецЕсли;
	
	ДолжностьРуководителя = ?(ДанныеПечати.ДолжностьРуководителя = "", 
								Нстр("ru = 'Генеральный директор'"), 
								ДанныеПечати.ДолжностьРуководителя);
	
	// Вывести подписи
	Область = Макет.ПолучитьОбласть("ПодвалСчета");
	СтруктураДанныхПодвал = Новый Структура;
	СтруктураДанныхПодвал.Вставить("ФИОРуководителя", ДанныеПечати.Руководитель);
	СтруктураДанныхПодвал.Вставить("ДолжностьРуководителя", ДолжностьРуководителя);
	СтруктураДанныхПодвал.Вставить("ФИОБухгалтера", ДанныеПечати.ГлавныйБухгалтер);
	СтруктураДанныхПодвал.Вставить("ФИОМенеджер", ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.Менеджер, ДанныеПечати.Дата));
	Область.Параметры.Заполнить(СтруктураДанныхПодвал);
	
	ФормированиеПечатныхФорм.ВывестиФаксимилеВТабличныйДокумент(Макет, Область, ДанныеПечати.Организация, ПараметрыПечати);
	МассивПроверкиВывода.Очистить();
	МассивПроверкиВывода.Добавить(Область);
	Если НЕ ТабличныйДокумент.ПроверитьВывод(МассивПроверкиВывода) Тогда
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	ТабличныйДокумент.Вывести(Область);
	
КонецПроцедуры

// Параметры:
//	ТабличныйДокумент           - ТабличныйДокумент -
//	ДанныеДляПечати             - Структура - Содержит в себе данные по шапке документа, этапам оплаты, табличной части:
//		* РезультатПоШапке          - РезультатЗапроса -
//		* РезультатПоЭтапамОплаты   - РезультатЗапроса -
//		* РезультатПоТабличнойЧасти - РезультатЗапроса -
//	ОбъектыПечати               - см. УправлениеПечатьюПереопределяемый.ПриПечати.ОбъектыПечати
//	ПараметрыПечати             - см. УправлениеПечатьюПереопределяемый.ПриПечати.ПараметрыПечати
//
Процедура ЗаполнитьТабличныйДокументСчетаНаОплату(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, ПараметрыПечати)
	
	ШаблоныОшибок = Новый Структура;
	ШаблоныОшибок.Вставить("Товары", НСтр("ru = 'В документе %1 отсутствуют товары. Печать счета на оплату не требуется'"));
	ШаблоныОшибок.Вставить("ЗаменяющиеТовары", НСтр("ru = 'В документе %1 отсутствуют заменяющие товары. Печать счета на оплату не требуется'"));
	ШаблоныОшибок.Вставить("Этапы", НСтр("ru = 'В документе %1 отсутствуют этапы оплаты. Печать счета на оплату не требуется'"));
	
	ИспользуетсяУчетНДС = ПолучитьФункциональнуюОпцию("ИспользоватьУчетНДС");
	ИспользоватьРучныеСкидки         = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
	ИспользоватьАвтоматическиеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
	
	КолонкаКодов = ФормированиеПечатныхФорм.ДополнительнаяКолонкаПечатныхФормДокументов();
	ИмяКолонкиКодов = КолонкаКодов.ИмяКолонки;
	ПредставлениеКолонкиКодов = КолонкаКодов.ПредставлениеКолонки;
	
	СтруктураИмяДопКолонки = Новый Структура("ИмяКолонкиКодов, ПредставлениеКолонкиКодов", ИмяКолонкиКодов, ПредставлениеКолонкиКодов);
	
	ДанныеПечати = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	ЭтапыОплаты = ДанныеДляПечати.РезультатПоЭтапамОплаты.Выгрузить();
	Товары = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выгрузить();
	
	ЭтапыЗалоговойТары = ЭтапыОплаты.НайтиСтроки(Новый Структура("ЭтоЗалогЗаТару", Истина));
	ТолькоЗалогЗаТару = ЭтапыЗалоговойТары.Количество() = ЭтапыОплаты.Количество() И ЭтапыЗалоговойТары.Количество() > 0;
	
	Если Товары.Колонки.Найти("Содержание")=Неопределено Тогда
		ЕстьСодержание = Ложь;
	Иначе
		ЕстьСодержание = Истина;
	КонецЕсли;
	
	ПоказыватьНДС = Константы.ВыводитьДопКолонкиНДС.Получить();
	ПервыйДокумент = Истина;
	
	Пока ДанныеПечати.Следующий() Цикл
		
		Отказ = Ложь;
		
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		
		ИспользоватьНаборы = Ложь;
		Если Товары.Колонки.Найти("ЭтоНабор") <> Неопределено Тогда
			ИспользоватьНаборы = Истина;
		КонецЕсли;
		
		ТаблицаТовары = Товары.НайтиСтроки(СтруктураПоиска);
		ТаблицаЭтапыОплаты = ЭтапыОплаты.НайтиСтроки(СтруктураПоиска);
		
		ПроверкаЗаполненияДокумента(ДанныеПечати, ТаблицаТовары, ТаблицаЭтапыОплаты, ШаблоныОшибок, Отказ, Истина);
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ЗаголовокСкидки = ФормированиеПечатныхФорм.НужноВыводитьСкидки(ТаблицаТовары, ИспользоватьРучныеСкидки Или ИспользоватьАвтоматическиеСкидки);
		ЕстьСкидки = ЗаголовокСкидки.ЕстьСкидки;
		
		НазванияОбластей = НазванияОбластей(ДанныеПечати.УчитыватьНДС И НЕ ТолькоЗалогЗаТару И ПоказыватьНДС, ЕстьСкидки);
		
		Макет = Новый ТабличныйДокумент;
		ЗаполнитьРеквизитыШапкиСчетаНаОплату(ДанныеПечати, Макет, ТабличныйДокумент, ТаблицаЭтапыОплаты, ТаблицаТовары);
		
		Если ДанныеПечати.ЧастичнаяОплата ИЛИ ТипЗнч(ДанныеПечати.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитенту") Тогда
			
			ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицыЧастичнаяОплата");
			ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
			
			ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицыЧастичнаяОплата");
			ОбластьСтрокаТаблицы.Параметры.Заполнить(ДанныеПечати);
			ОбластьСтрокаТаблицы.Параметры.НомерСтроки = 1;
			ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
			
			ОбластьИтого = Макет.ПолучитьОбласть("ПодвалТаблицыЧастичнаяОплата");
			СтруктураДанныхИтого = Новый Структура;
			СтруктураДанныхИтого.Вставить("Всего", ДанныеПечати.СуммаДокумента);
			ОбластьИтого.Параметры.Заполнить(СтруктураДанныхИтого);
			ОбластьИтого.Параметры.Заполнить(ДанныеПечати);
			ТабличныйДокумент.Присоединить(ОбластьИтого);
			
			// Вывести ИтогоНДС
			СоответствиеСтавокНДС = Новый Соответствие;
			Если ДанныеПечати.УчитыватьНДС И НЕ ТолькоЗалогЗаТару 
				И НЕ ДанныеПечати.ОперацияОблагаетсяНДСУПокупателя Тогда
				ОбластьИтогоНДС = Макет.ПолучитьОбласть("ПодвалТаблицыНДС");
				
				Если ТаблицаТовары.Количество() = 0 Тогда
					Если ЗначениеЗаполнено(ДанныеПечати.СтавкаНДС) Тогда
						СуммаНДС = ДанныеПечати.СуммаНДС;
						СоответствиеСтавокНДС.Вставить(ДанныеПечати.СтавкаНДС, СуммаНДС);
					КонецЕсли;
				Иначе
					Для Каждого СтрокаТовара Из ТаблицаТовары Цикл
						Если ИспользоватьНаборы И СтрокаТовара.ЭтоНабор
							И Не (СтрокаТовара.ВариантПредставленияНабораВПечатныхФормах = 
								Перечисления.ВариантыПредставленияНаборовВПечатныхФормах.ТолькоНабор) Тогда
							// Исключаем суммы НДС по набору в целом, когда комплектующие выводятся в печатных формах.
							Продолжить;
						КонецЕсли;
						СуммаНДС = СоответствиеСтавокНДС[СтрокаТовара.СтавкаНДС];
						Если СуммаНДС = Неопределено Тогда
							СуммаНДС = СтрокаТовара.СуммаНДС;
						Иначе
							СуммаНДС = СуммаНДС + СтрокаТовара.СуммаНДС;
						КонецЕсли;
						СоответствиеСтавокНДС.Вставить(СтрокаТовара.СтавкаНДС, СуммаНДС);
					КонецЦикла;
				КонецЕсли;
				Если СоответствиеСтавокНДС.Количество() > 0 Тогда
					Для Каждого ТекСтавкаНДС Из СоответствиеСтавокНДС Цикл
						СтруктураДанныхИтогоНДС = Новый Структура;
						СтруктураДанныхИтогоНДС.Вставить("НДС", ФормированиеПечатныхФорм.ТекстНДСПоСтавке(ТекСтавкаНДС.Ключ, ДанныеПечати.ЦенаВключаетНДС));
						Если ЗначениеЗаполнено(ТекСтавкаНДС.Значение) Тогда
							СтруктураДанныхИтогоНДС.Вставить("ВсегоНДС", ФормированиеПечатныхФорм.ФорматСумм(ТекСтавкаНДС.Значение /100 * ДанныеПечати.ПроцентОплаты));
						Иначе
							СтруктураДанныхИтогоНДС.Вставить("ВсегоНДС","-");
						КонецЕсли;
						ОбластьИтогоНДС.Параметры.Заполнить(СтруктураДанныхИтогоНДС);
						ТабличныйДокумент.Вывести(ОбластьИтогоНДС);
					КонецЦикла;
					ОбластьПодвалСНДС = Макет.ПолучитьОбласть("ПодвалТаблицыВсего");
					СтруктураДанныхПодвалСНДС = Новый Структура("ВсегоСНДС", ФормированиеПечатныхФорм.ФорматСумм(ДанныеПечати.СуммаДокумента));
					ОбластьПодвалСНДС.Параметры.Заполнить(СтруктураДанныхПодвалСНДС);
					ТабличныйДокумент.Вывести(ОбластьПодвалСНДС);
				КонецЕсли;
			ИначеЕсли ИспользуетсяУчетНДС Тогда
				СтруктураДанныхПодвалНДС = Новый Структура;
				Если ДанныеПечати.ОперацияОблагаетсяНДСУПокупателя Тогда
					СтруктураДанныхПодвалНДС.Вставить("НДС", НСтр("ru='НДС исчисляется налоговым агентом'", ОбщегоНазначения.КодОсновногоЯзыка()));
				Иначе
					СтруктураДанныхПодвалНДС.Вставить("НДС", НСтр("ru='Без налога (НДС)'", ОбщегоНазначения.КодОсновногоЯзыка()));
				КонецЕсли;
				ОбластьПодвалНДС             = Макет.ПолучитьОбласть("ПодвалТаблицыНДС");
				СтруктураДанныхПодвалНДС.Вставить("ВсегоНДС", "-");
				ОбластьПодвалНДС.Параметры.Заполнить(СтруктураДанныхПодвалНДС);
				ТабличныйДокумент.Вывести(ОбластьПодвалНДС);
			КонецЕсли;
			
			// Вывести Сумму прописью
			ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописьюЧастичныйСчет");
			СуммаПрописью = НСтр("ru='Всего на сумму %СуммаПрописью%'", ОбщегоНазначения.КодОсновногоЯзыка());
			СуммаПрописью = СтрЗаменить(СуммаПрописью, "%СуммаПрописью%", РаботаСКурсамиВалютУТ.СформироватьСуммуПрописью(ДанныеПечати.СуммаДокумента, ДанныеПечати.Валюта));
			СтруктураДанныхСуммаПрописью = Новый Структура("СуммаПрописью", СуммаПрописью);
			ОбластьМакета.Параметры.Заполнить(СтруктураДанныхСуммаПрописью);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		Иначе
		
			// Таблица "Товары"
			ОбластьШапкаТаблицы          = Макет.ПолучитьОбласть(НазванияОбластей.ШапкаТаблицы);
			ОбластьСтрокаТаблицыСтандарт = Макет.ПолучитьОбласть(НазванияОбластей.СтрокаТаблицы);
			ОбластьПодвалТаблицы         = Макет.ПолучитьОбласть(НазванияОбластей.ПодвалТаблицы);
			ОбластьПодвалНДС             = Макет.ПолучитьОбласть("ПодвалТаблицыНДС");
			
			Если ИспользоватьНаборы Тогда
				ОбластьСтрокаТаблицыНабор         = Макет.ПолучитьОбласть(НазванияОбластей.СтрокаТаблицыНабор);
				ОбластьСтрокаТаблицыКомплектующие = Макет.ПолучитьОбласть(НазванияОбластей.СтрокаТаблицыКомплектующие);
			КонецЕсли;
			
			ПустыеДанные = НаборыСервер.ПустыеДанные();
			ВыводШапки = 0;
			
			Если ДанныеПечати.УчитыватьНДС И НЕ ТолькоЗалогЗаТару Тогда
				Если ЕстьСкидки Тогда
					ОбластьПодвалСНДС = Макет.ПолучитьОбласть("ПодвалТаблицыВсегоСНДССоСкидкой");
				Иначе
					ОбластьПодвалСНДС = Макет.ПолучитьОбласть("ПодвалТаблицыВсегоСНДС");
				КонецЕсли
			КонецЕсли;
			
			Если ЕстьСкидки Тогда
				СтруктураЗаголовокСкидки = Новый Структура("Скидка, СуммаБезСкидки", 
					ЗаголовокСкидки.Скидка,
					ЗаголовокСкидки.СуммаСкидки);
				ОбластьШапкаТаблицы.Параметры.Заполнить(СтруктураЗаголовокСкидки);
			КонецЕсли; 
			ОбластьШапкаТаблицы.Параметры.Заполнить(СтруктураИмяДопКолонки);
			ОбластьСуммаПрописью = Макет.ПолучитьОбласть(?(ДанныеПечати.СчетКВозврату, "СуммаПрописьюКВозврату", "СуммаПрописью"));
			
			МассивПроверкиВывода = Новый Массив;
			
			Сумма = 0;
			СуммаНДС = 0;
			ВсегоСкидок = 0;
			ВсегоБезСкидок = 0;
			НомерСтроки = 0;
			СоответствиеСтавокНДС = Новый Соответствие;
			Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
				
				Если НаборыСервер.ИспользоватьОбластьНабор(СтрокаТовары, ИспользоватьНаборы) Тогда
					ОбластьСтрокаТаблицы = ОбластьСтрокаТаблицыНабор;
				ИначеЕсли НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) Тогда
					ОбластьСтрокаТаблицы = ОбластьСтрокаТаблицыКомплектующие;
				Иначе
					ОбластьСтрокаТаблицы = ОбластьСтрокаТаблицыСтандарт;
				КонецЕсли;
				
				Если НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
					НомерСтрокиПечать = "";
				Иначе
					НомерСтроки = НомерСтроки + 1;
					НомерСтрокиПечать = НомерСтроки;
				КонецЕсли;
				
				Если НомерСтроки = 0 И ВыводШапки <> 2 Тогда
					ВыводШапки = 1;
				КонецЕсли;
				
				ПрефиксИПостфикс = НаборыСервер.ПолучитьПрефиксИПостфикс(СтрокаТовары, ИспользоватьНаборы);
				
				ДополнительныеПараметрыПолученияНаименованияДляПечати = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
				ДополнительныеПараметрыПолученияНаименованияДляПечати.ВозвратнаяТара = СтрокаТовары.ЭтоВозвратнаяТара;
				ДополнительныеПараметрыПолученияНаименованияДляПечати.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
				Если ЕстьСодержание Тогда
					ДополнительныеПараметрыПолученияНаименованияДляПечати.Содержание = СтрокаТовары.Содержание;
				КонецЕсли;
				
				Товар = ПрефиксИПостфикс.Префикс
						+ НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
															СтрокаТовары.НаименованиеПолное,
															СтрокаТовары.Характеристика,
															,
															, // Серия
															ДополнительныеПараметрыПолученияНаименованияДляПечати)
						+ ПрефиксИПостфикс.Постфикс;
						
				СтруктураДанныхСтроки = Новый Структура;
				СтруктураДанныхСтроки.Вставить("Товар", Товар);
				СтруктураДанныхСтроки.Вставить("НомерСтроки", НомерСтрокиПечать);
				ОбластьСтрокаТаблицы.Параметры.Заполнить(СтрокаТовары);
				Если ЗаголовокСкидки.ЕстьСкидки Тогда
					СтруктураДанныхСтроки.Вставить("СуммаСкидки",
						?(ЗаголовокСкидки.ТолькоНаценка,- СтрокаТовары.СуммаСкидки,СтрокаТовары.СуммаСкидки));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтруктураИмяДопКолонки.ИмяКолонкиКодов) Тогда
					СтруктураДанныхСтроки.Вставить("Артикул", СтрокаТовары[СтруктураИмяДопКолонки.ИмяКолонкиКодов]);
				КонецЕсли;
				
				Если ДанныеПечати.ОперацияОблагаетсяНДСУПокупателя Тогда
					СтруктураДанныхСтроки.Вставить("СтавкаНДС", НСтр("ru='НДС исчисляется налоговым агентом'", ОбщегоНазначения.КодОсновногоЯзыка()));
				КонецЕсли;
				
				ОбластьСтрокаТаблицы.Параметры.Заполнить(СтруктураДанныхСтроки);
				
				Если НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
					ОбластьСтрокаТаблицы.Параметры.Заполнить(ПустыеДанные);
				КонецЕсли;
				
				МассивПроверкиВывода.Очистить();
				МассивПроверкиВывода.Добавить(ОбластьСтрокаТаблицы);
				Если НомерСтроки = ТаблицаТовары.Количество() Тогда
					МассивПроверкиВывода.Добавить(ОбластьПодвалТаблицы);
					МассивПроверкиВывода.Добавить(ОбластьПодвалНДС);
					МассивПроверкиВывода.Добавить(ОбластьСуммаПрописью);
				КонецЕсли;
				
				Если ТабличныйДокумент.ПроверитьВывод(МассивПроверкиВывода) Тогда
					Если (НомерСтроки = 1 И ВыводШапки = 0) ИЛИ (НомерСтроки = 0 И ВыводШапки = 1) Тогда
						ВыводШапки = 2;
						ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
					КонецЕсли;
				Иначе
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
				
				Если Не НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) Тогда
					
					Сумма = Сумма + СтрокаТовары.Сумма;
					СуммаНДС = СуммаНДС + СтрокаТовары.СуммаНДС;
					
					Если ЕстьСкидки Тогда
						ВсегоСкидок = ВсегоСкидок + СтрокаТовары.СуммаСкидки;
						ВсегоБезСкидок = ВсегоБезСкидок + СтрокаТовары.СуммаБезСкидки;
					КонецЕсли;
				
					Если ДанныеПечати.УчитыватьНДС И НЕ ТолькоЗалогЗаТару Тогда
						СуммаНДСПоСтавке = СоответствиеСтавокНДС[СтрокаТовары.СтавкаНДС];
						Если СуммаНДСПоСтавке = Неопределено Тогда
							СуммаНДСПоСтавке = 0;
						КонецЕсли;
						СоответствиеСтавокНДС.Вставить(СтрокаТовары.СтавкаНДС, СуммаНДСПоСтавке + СтрокаТовары.СуммаНДС);
					КонецЕсли;
				
				КонецЕсли;
				
			КонецЦикла;
			
			СтруктураДанныхВсегоСкидки = Новый Структура;
			
			// Подвал таблицы "Товары"
			Если ЕстьСкидки Тогда
				СтруктураДанныхВсегоСкидки.Вставить("ВсегоСкидок", ?(ЗаголовокСкидки.ТолькоНаценка,-ВсегоСкидок, ВсегоСкидок));
				СтруктураДанныхВсегоСкидки.Вставить("ВсегоБезСкидок", ВсегоБезСкидок);
				Если ДанныеПечати.УчитыватьНДС И НЕ ТолькоЗалогЗаТару Тогда
					СтруктураДанныхВсегоСкидки.Вставить("ВсегоСуммаНДС", СуммаНДС);
				КонецЕсли;
			КонецЕсли;
			СтруктураДанныхВсегоСкидки.Вставить("Всего", ФормированиеПечатныхФорм.ФорматСумм(Сумма));
			ОбластьПодвалТаблицы.Параметры.Заполнить(СтруктураДанныхВсегоСкидки);
			ТабличныйДокумент.Вывести(ОбластьПодвалТаблицы);
			
			// Область "ПодвалТаблицыНДС"
			Если ДанныеПечати.УчитыватьНДС И НЕ ТолькоЗалогЗаТару И НЕ ДанныеПечати.ОперацияОблагаетсяНДСУПокупателя Тогда
				
				Для Каждого ТекСтавкаНДС Из СоответствиеСтавокНДС Цикл
					
					СтруктураДанныхПодвалНДС = Новый Структура;
					СтруктураДанныхПодвалНДС.Вставить("НДС", ФормированиеПечатныхФорм.ТекстНДСПоСтавке(ТекСтавкаНДС.Ключ, ДанныеПечати.ЦенаВключаетНДС));
					СтруктураДанныхПодвалНДС.Вставить("ВсегоНДС", ФормированиеПечатныхФорм.ФорматСумм(ТекСтавкаНДС.Значение, ,"-"));
					ОбластьПодвалНДС.Параметры.Заполнить(СтруктураДанныхПодвалНДС);
					ТабличныйДокумент.Вывести(ОбластьПодвалНДС);
					
				КонецЦикла;
				
				СтруктураДанныхПодвалНДС = Новый Структура;
				СтруктураДанныхПодвалНДС.Вставить("ВсегоСНДС", ФормированиеПечатныхФорм.ФорматСумм(Сумма + ?(ДанныеПечати.ЦенаВключаетНДС, 0, СуммаНДС)));
				ОбластьПодвалСНДС.Параметры.Заполнить(СтруктураДанныхПодвалНДС);
				ТабличныйДокумент.Вывести(ОбластьПодвалСНДС);
				
			ИначеЕсли ИспользуетсяУчетНДС Тогда
				СтруктураДанныхПодвалНДС = Новый Структура;
				Если ДанныеПечати.ОперацияОблагаетсяНДСУПокупателя Тогда
					СтруктураДанныхПодвалНДС.Вставить("НДС", НСтр("ru='НДС исчисляется налоговым агентом'", ОбщегоНазначения.КодОсновногоЯзыка()));
				Иначе
					СтруктураДанныхПодвалНДС.Вставить("НДС", НСтр("ru='Без налога (НДС)'", ОбщегоНазначения.КодОсновногоЯзыка()));
				КонецЕсли;
				СтруктураДанныхПодвалНДС.Вставить("ВсегоНДС", "-");
				ОбластьПодвалНДС.Параметры.Заполнить(СтруктураДанныхПодвалНДС);
				ТабличныйДокумент.Вывести(ОбластьПодвалНДС);
			КонецЕсли;
			
			// Вывести Сумму прописью
			СуммаКПрописи = Сумма + ?(ДанныеПечати.ЦенаВключаетНДС, 0, СуммаНДС);
			ИтоговаяСтрока = НСтр("ru='Всего наименований %Количество%, на сумму %Сумма%'", ОбщегоНазначения.КодОсновногоЯзыка());
			ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Количество%", НомерСтроки);
			ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Сумма%",      ФормированиеПечатныхФорм.ФорматСумм(СуммаКПрописи, ДанныеПечати.Валюта));
			
			СтруктураДанныхСуммаПрописью = Новый Структура;
			Если ДанныеПечати.СчетКВозврату Тогда
				
				СуммаКВозврату = ДанныеПечати.СуммаКВозврату;
				СуммаИтого = СуммаКПрописи-СуммаКВозврату;
				Если СуммаИтого < 0 Тогда
					СуммаИтого = 0;
				КонецЕсли;
				СтруктураДанныхСуммаПрописью.Вставить("СуммаВозврата", ФормированиеПечатныхФорм.ФорматСумм(СуммаКВозврату, ДанныеПечати.Валюта));
				СтруктураДанныхСуммаПрописью.Вставить("СуммаИтогоКОплате", ФормированиеПечатныхФорм.ФорматСумм(СуммаИтого, ДанныеПечати.Валюта, "0"));
				СтруктураДанныхСуммаПрописью.Вставить("СуммаПрописью", РаботаСКурсамиВалютУТ.СформироватьСуммуПрописью(СуммаИтого, ДанныеПечати.Валюта));
			Иначе
				
				СтруктураДанныхСуммаПрописью.Вставить("СуммаПрописью", РаботаСКурсамиВалютУТ.СформироватьСуммуПрописью(СуммаКПрописи, ДанныеПечати.Валюта));
			КонецЕсли;
			
			СтруктураДанныхСуммаПрописью.Вставить("ИтоговаяСтрока", ИтоговаяСтрока);
			ОбластьСуммаПрописью.Параметры.Заполнить(СтруктураДанныхСуммаПрописью);
			ТабличныйДокумент.Вывести(ОбластьСуммаПрописью);
		КонецЕсли;
		ЗаполнитьРеквизитыПодвалаСчетаНаОплату(ДанныеПечати, Макет, ТабличныйДокумент, ТаблицаЭтапыОплаты, СоответствиеСтавокНДС, ПараметрыПечати);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

Функция НазванияОбластей(СНДС, СоСкидкой)
	
	СтруктураВозврата = Новый Структура(
		"ПодвалТаблицы, СтрокаТаблицы, ШапкаТаблицы, СтрокаТаблицыКомплектующие, СтрокаТаблицыНабор");
	
	Если СНДС И СоСкидкой Тогда
		СтруктураВозврата.ПодвалТаблицы = "ПодвалТаблицыСНДССоСкидкой";
		СтруктураВозврата.СтрокаТаблицы = "СтрокаТаблицыСНДССоСкидкой";
		СтруктураВозврата.ШапкаТаблицы = "ШапкаТаблицыСНДССоСкидкой";
		СтруктураВозврата.СтрокаТаблицыКомплектующие = "СтрокаТаблицыСНДССоСкидкойКомплектующие";
		СтруктураВозврата.СтрокаТаблицыНабор = "СтрокаТаблицыСНДССоСкидкойНабор";
	ИначеЕсли Не СНДС И СоСкидкой Тогда
		СтруктураВозврата.ПодвалТаблицы = "ПодвалТаблицыСоСкидкой";
		СтруктураВозврата.СтрокаТаблицы = "СтрокаТаблицыСоСкидкой";
		СтруктураВозврата.ШапкаТаблицы = "ШапкаТаблицыСоСкидкой";
		СтруктураВозврата.СтрокаТаблицыКомплектующие = "СтрокаТаблицыСоСкидкойКомплектующие";
		СтруктураВозврата.СтрокаТаблицыНабор = "СтрокаТаблицыСоСкидкойНабор";
	ИначеЕсли СНДС И Не СоСкидкой Тогда
		СтруктураВозврата.ПодвалТаблицы = "ПодвалТаблицыСНДС";
		СтруктураВозврата.СтрокаТаблицы = "СтрокаТаблицыСНДС";
		СтруктураВозврата.ШапкаТаблицы = "ШапкаТаблицыСНДС";
		СтруктураВозврата.СтрокаТаблицыКомплектующие = "СтрокаТаблицыСНДСКомплектующие";
		СтруктураВозврата.СтрокаТаблицыНабор = "СтрокаТаблицыСНДСНабор";
	ИначеЕсли Не СНДС И Не СоСкидкой Тогда
		СтруктураВозврата.ПодвалТаблицы = "ПодвалТаблицы";
		СтруктураВозврата.СтрокаТаблицы = "СтрокаТаблицы";
		СтруктураВозврата.ШапкаТаблицы = "ШапкаТаблицы";
		СтруктураВозврата.СтрокаТаблицыКомплектующие = "СтрокаТаблицыКомплектующие";
		СтруктураВозврата.СтрокаТаблицыНабор = "СтрокаТаблицыНабор";
	КонецЕсли;
	
	Возврат СтруктураВозврата
	
КонецФункции

Функция ПечатьПредварительныйПросмотрСчетаНаОплату(Организация, ОбъектыПечати, ИмяМакета)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СЧЕТНАОПЛАТУ";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьСчетовНаОплату.ПФ_MXL_СчетНаОплату");
	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокСчета");
	ФормированиеПечатныхФорм.ВывестиЛоготипВТабличныйДокумент(Макет, ОбластьМакета, "ЗаголовокСчетаЛоготип", Организация);
	
	СсылкаНового = Документы.СчетНаОплатуКлиенту.ПолучитьСсылку(Новый УникальныйИдентификатор);
	ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, СсылкаНового);
	
	КолонкаКодов = ФормированиеПечатныхФорм.ДополнительнаяКолонкаПечатныхФормДокументов();
	ИмяКолонкиКодов = КолонкаКодов.ИмяКолонки;
	ПредставлениеКолонкиКодов = КолонкаКодов.ПредставлениеКолонки;
	
	ВыводитьКоды = ЗначениеЗаполнено(КолонкаКодов);
	СтруктураИмяДопКолонки = Новый Структура("ИмяКолонкиКодов, ПредставлениеКолонкиКодов", ИмяКолонкиКодов, ПредставлениеКолонкиКодов);
	ВыводитьНДС = Константы.ВыводитьДопКолонкиНДС.Получить();
	
	Смещать = ТипСмещенияТабличногоДокумента.ПоВертикали;
	ОбластьПервойКолонкиТоваров = Макет.Область("ПерваяКолонкаТовара");
	Если НЕ ВыводитьКоды Тогда
		ОбластьПервойКолонкиТоваров.ШиринаКолонки = ОбластьПервойКолонкиТоваров.ШиринаКолонки + Макет.Область("КолонкаКодов").ШиринаКолонки;
		Макет.УдалитьОбласть(Макет.Область("КолонкаКодов"), Смещать);
	КонецЕсли;
	
	СведенияОПоставщике = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Организация, ТекущаяДатаСеанса());
	ДатаПлатежа = ТекущаяДатаСеанса();
	
	СтруктураДанныхШапки = Новый Структура;
	Если ЗначениеЗаполнено(ДатаПлатежа) Тогда
		НадписьСрокДействия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Счет действителен до %1.'", ОбщегоНазначения.КодОсновногоЯзыка()), Формат(ДатаПлатежа, "ДЛФ=D")) + " ";
		СтруктураДанныхШапки.Вставить("СрокДействия", НадписьСрокДействия);
	КонецЕсли;
	
	СтруктураДанныхШапки.Вставить("ИНН", СведенияОПоставщике.ИНН);
	СтруктураДанныхШапки.Вставить("КПП",СведенияОПоставщике.КПП);
	ПредставлениеПоставщикаДляПлатПоручения = "";
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация = Организация;
	БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	Если ЗначениеЗаполнено(БанковскийСчет) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	БанковскиеСчета.НомерСчета КАК НомерСчета,
			|	ВЫБОР
			|		КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка
			|			ТОГДА БанковскиеСчета.НаименованиеБанка
			|		ИНАЧЕ БанковскиеСчета.Банк.Наименование
			|	КОНЕЦ КАК НаименованиеБанка,
			|	ВЫБОР
			|		КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка
			|			ТОГДА БанковскиеСчета.БИКБанка
			|		ИНАЧЕ БанковскиеСчета.Банк.Код
			|	КОНЕЦ КАК БИКБанкаДляРасчетов,
			|	ВЫБОР
			|		КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка
			|			ТОГДА БанковскиеСчета.КоррСчетБанка
			|		ИНАЧЕ БанковскиеСчета.Банк.КоррСчет
			|	КОНЕЦ КАК КоррСчетБанка,
			|	ВЫБОР
			|		КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка
			|			ТОГДА БанковскиеСчета.ГородБанка
			|		ИНАЧЕ БанковскиеСчета.Банк.Город
			|	КОНЕЦ КАК ГородБанкаДляРасчетов,
			|	БанковскиеСчета.ТекстКорреспондента КАК ТекстКорреспондента
			|ИЗ
			|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчета
			|ГДЕ
			|	БанковскиеСчета.БанкДляРасчетов = ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка)
			|	И БанковскиеСчета.Ссылка = &БанковскийСчет
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	БанковскиеСчета.Банк.КоррСчет,
			|	ВЫБОР
			|		КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанкаДляРасчетов
			|			ТОГДА БанковскиеСчета.НаименованиеБанкаДляРасчетов
			|		ИНАЧЕ БанковскиеСчета.БанкДляРасчетов.Наименование
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанкаДляРасчетов
			|			ТОГДА БанковскиеСчета.БИКБанкаДляРасчетов
			|		ИНАЧЕ БанковскиеСчета.БанкДляРасчетов.Код
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанкаДляРасчетов
			|			ТОГДА БанковскиеСчета.КоррСчетБанкаДляРасчетов
			|		ИНАЧЕ БанковскиеСчета.БанкДляРасчетов.КоррСчет
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанкаДляРасчетов
			|			ТОГДА БанковскиеСчета.ГородБанкаДляРасчетов
			|		ИНАЧЕ БанковскиеСчета.БанкДляРасчетов.Город
			|	КОНЕЦ,
			|	БанковскиеСчета.ТекстКорреспондента
			|ИЗ
			|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчета
			|ГДЕ
			|	БанковскиеСчета.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка)
			|	И БанковскиеСчета.Ссылка = &БанковскийСчет";
			
		Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
		РеквизитыСчета = Запрос.Выполнить().Выбрать();
		
		Если РеквизитыСчета.Следующий() Тогда
			СтруктураДанныхШапки.Вставить("БИКБанкаПолучателя", РеквизитыСчета.БИКБанкаДляРасчетов);
			СтруктураДанныхШапки.Вставить("БанкПолучателя", РеквизитыСчета.НаименованиеБанка);
			СтруктураДанныхШапки.Вставить("БанкПолучателяПредставление", СокрЛП(РеквизитыСчета.НаименованиеБанка) + " " + РеквизитыСчета.ГородБанкаДляРасчетов);
			СтруктураДанныхШапки.Вставить("СчетБанкаПолучателя", РеквизитыСчета.КоррСчетБанка);
			СтруктураДанныхШапки.Вставить("СчетБанкаПолучателяПредставление", РеквизитыСчета.КоррСчетБанка);
			СтруктураДанныхШапки.Вставить("СчетПолучателяПредставление", РеквизитыСчета.НомерСчета);
			СтруктураДанныхШапки.Вставить("СчетПолучателя", РеквизитыСчета.НомерСчета);
			ПредставлениеПоставщикаДляПлатПоручения = РеквизитыСчета.ТекстКорреспондента;
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ПредставлениеПоставщикаДляПлатПоручения) Тогда
		ПредставлениеПоставщикаДляПлатПоручения = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
	КонецЕсли;
	
	СтруктураДанныхШапки.Вставить("ПредставлениеПоставщикаДляПлатПоручения", ПредставлениеПоставщикаДляПлатПоручения);
	СтруктураДанныхШапки.Вставить("НазначениеПлатежа", НСтр("ru='Предварительный просмотр печати счета на оплату.'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	ОбластьМакета.Параметры.Заполнить(СтруктураДанныхШапки);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	
	ДанныеЗаголовка = Новый Структура;
	ДанныеЗаголовка.Вставить("Номер", "00000000001");
	ДанныеЗаголовка.Вставить("Дата", ДатаПлатежа);
	ДанныеЗаголовка.Вставить("Представление", НСтр("ru = 'Счет на оплату'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	ТекстЗаголовка = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(ДанныеЗаголовка,
		НСтр("ru='Счет на оплату'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СтруктураДанныхШапки = Новый Структура;
	СтруктураДанныхШапки.Вставить("ТекстЗаголовка", ТекстЗаголовка);
	ОбластьМакета.Параметры.Заполнить(СтруктураДанныхШапки);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	
	СтруктураДанныхПоставщик = Новый Структура;
	СтруктураДанныхПоставщик.Вставить("ПредставлениеПоставщика", 
		ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Организация, ДатаПлатежа),
			"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,"));
	ОбластьМакета.Параметры.Заполнить(СтруктураДанныхПоставщик);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	СтруктураДанныхПокупатель = Новый Структура;
	СтруктураДанныхПокупатель.Вставить("ПредставлениеПолучателя", 
		НСтр("ru = 'Поле содержит информацию покупателя: полное наименование, ИНН, КПП, юридический адрес, телефоны.'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ОбластьМакета.Параметры.Заполнить(СтруктураДанныхПокупатель);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	Если ВыводитьНДС Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыСНДС");
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	КонецЕсли;
	ОбластьМакета.Параметры.Заполнить(СтруктураИмяДопКолонки);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	Если ВыводитьНДС Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицыСНДС");
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицы");
	КонецЕсли;
	Товары = Новый Структура;
	Товары.Вставить("НомерСтроки",      1);
	Товары.Вставить("Артикул",          "АРТ-000001");
	Товары.Вставить("Код",              "000001");
	Товары.Вставить("Товар",            НСтр("ru='Товар (предварительный просмотр)'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Товары.Вставить("Количество",       1);
	Товары.Вставить("ЕдиницаИзмерения", НСтр("ru='шт'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Товары.Вставить("Цена",             120.00);
	Товары.Вставить("СтавкаНДС",        "20%");
	Товары.Вставить("СуммаНДС",         20.00);
	Товары.Вставить("Сумма",            120.00);
	
	ОбластьМакета.Параметры.Заполнить(Товары);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалТаблицыЧастичнаяОплата");
	ОбластьМакета.Параметры.Заполнить(Новый Структура("Всего", Товары.Сумма));
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалТаблицыНДС");
	ОбластьМакета.Параметры.Заполнить(Новый Структура("НДС, ВсегоНДС", НСтр("ru = 'В т.ч. НДС (20%)'", ОбщегоНазначения.КодОсновногоЯзыка()), Товары.СуммаНДС));
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалТаблицыВсего");
	ОбластьМакета.Параметры.Заполнить(Новый Структура("ВсегоСНДС", Товары.Сумма));
	ТабличныйДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	Валюта = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Организация);
	
	СуммаКПрописи = 120;
	ИтоговаяСтрока = НСтр("ru='Всего наименований %Количество%, на сумму %Сумма%'", ОбщегоНазначения.КодОсновногоЯзыка());
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Количество%", Товары.Количество);
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Сумма%",      ФормированиеПечатныхФорм.ФорматСумм(СуммаКПрописи, Валюта));
	
	СуммаПрописью = РаботаСКурсамиВалютУТ.СформироватьСуммуПрописью(Товары.Сумма, Валюта);
	
	СтруктураДанныхСуммаПрописью = Новый Структура("СуммаПрописью, ИтоговаяСтрока", СуммаПрописью, ИтоговаяСтрока);
	ОбластьМакета.Параметры.Заполнить(СтруктураДанныхСуммаПрописью);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчета");
	ФормированиеПечатныхФорм.ВывестиФаксимилеВТабличныйДокумент(Макет, ОбластьМакета, Организация, Новый Структура("ОтображатьФаксимиле", Истина));
	
	// Вывести подписи
	ОтветственныеЛица = ОтветственныеЛицаСервер.ПолучитьОтветственныеЛицаОрганизации(Организация);
	СтруктураДанныхПодвал = Новый Структура;
	СтруктураДанныхПодвал.Вставить("ФИОРуководителя", ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ОтветственныеЛица.Руководитель));
	СтруктураДанныхПодвал.Вставить("ФИОБухгалтера", ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ОтветственныеЛица.ГлавныйБухгалтер));
	ОбластьМакета.Параметры.Заполнить(СтруктураДанныхПодвал);
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#Область Invoice

Функция СформироватьПечатнуюФормуInvoice(СтруктураТипов, ОбъектыПечати, ПараметрыПечати, КодЯзыка = Неопределено) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_INVOICE";
	
	НомерТипаДокумента = 0;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
		
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтруктураОбъектов.Ключ);
		ДанныеДляПечати = МенеджерОбъекта.ПолучитьДанныеДляПечатнойФормыСчетаНаОплату(ПараметрыПечати, СтруктураОбъектов.Значение, КодЯзыка);
		
		ЗаполнитьТабличныйДокументInvoice(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, ПараметрыПечати,, КодЯзыка);
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Параметры:
//	ТабличныйДокумент           - ТабличныйДокумент -
//	ДанныеДляПечати             - Структура - Содержит в себе данные по шапке документа, этапам оплаты, табличной части:
//		* РезультатПоШапке          - РезультатЗапроса -
//		* РезультатПоЭтапамОплаты   - РезультатЗапроса -
//		* РезультатПоТабличнойЧасти - РезультатЗапроса -
//	ОбъектыПечати               - см. УправлениеПечатьюПереопределяемый.ПриПечати.ОбъектыПечати
//	ПараметрыПечати             - см. УправлениеПечатьюПереопределяемый.ПриПечати.ПараметрыПечати
//	Предварительный             - Булево -
//	КодЯзыка                    - Строка, Неопределено -
//
Процедура ЗаполнитьТабличныйДокументInvoice(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, ПараметрыПечати, Предварительный = Ложь, КодЯзыка = Неопределено)
	
	ШаблоныОшибок = Новый Структура;
	ШаблоныОшибок.Вставить("Товары", НСтр("ru = 'В документе %1 отсутствуют товары. Печать Proforma invoice не требуется'"));
	ШаблоныОшибок.Вставить("ЗаменяющиеТовары", НСтр("ru = 'В документе %1 отсутствуют заменяющие товары. Печать Proforma invoice не требуется'"));
	ШаблоныОшибок.Вставить("Этапы", НСтр("ru = 'В документе %1 отсутствуют этапы оплаты. Печать Proforma invoice не требуется'"));
	
	ДанныеПечати = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	ЭтапыОплаты = ДанныеДляПечати.РезультатПоЭтапамОплаты.Выгрузить();
	Товары = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выгрузить();
		
	ЭтапыЗалоговойТары = ЭтапыОплаты.НайтиСтроки(Новый Структура("ЭтоЗалогЗаТару", Истина));
	ТолькоЗалогЗаТару = ЭтапыЗалоговойТары.Количество() = ЭтапыОплаты.Количество() И ЭтапыЗалоговойТары.Количество() > 0;
	
	ЕстьСодержание = Ложь;
	Если Товары.Колонки.Найти("Содержание") <> Неопределено Тогда
		ЕстьСодержание = Истина;
	КонецЕсли;
	
	ИспользоватьНаборы = Ложь;
	Если Товары.Колонки.Найти("ЭтоНабор") <> Неопределено Тогда
		ИспользоватьНаборы = Истина;
	КонецЕсли;
	
	ПервыйДокумент = Истина;
	
	Пока ДанныеПечати.Следующий() Цикл
		
		Отказ = Ложь;
		
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		
		ТаблицаТовары = Товары.НайтиСтроки(СтруктураПоиска);
		ТаблицаЭтапыОплаты = ЭтапыОплаты.НайтиСтроки(СтруктураПоиска);
		
		ПроверкаЗаполненияДокумента(ДанныеПечати, ТаблицаТовары, ТаблицаЭтапыОплаты, ШаблоныОшибок, Отказ, Предварительный);
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = Новый ТабличныйДокумент;
		ЗаполнитьРеквизитыШапкиInvoice(ДанныеПечати, Макет, ТабличныйДокумент, ТаблицаЭтапыОплаты, ТаблицаТовары, Предварительный, КодЯзыка);
				
		Если ДанныеПечати.ЧастичнаяОплата ИЛИ ТипЗнч(ДанныеПечати.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитенту") Тогда
			
			ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицыЧастичнаяОплата");
			ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
			
			ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицыЧастичнаяОплата");
			ОбластьСтрокаТаблицы.Параметры.Заполнить(ДанныеПечати);
			ОбластьСтрокаТаблицы.Параметры.НомерСтроки = 1;
			ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
			
			ОбластьИтого = Макет.ПолучитьОбласть("ПодвалТаблицыЧастичнаяОплата");
			СтруктураДанныхИтого = Новый Структура;
			СтруктураДанныхИтого.Вставить("ВалютаДокумента",ДанныеПечати.Валюта);
			СтруктураДанныхИтого.Вставить("Всего", ДанныеПечати.СуммаДокумента);
			ОбластьИтого.Параметры.Заполнить(СтруктураДанныхИтого);
			ОбластьИтого.Параметры.Заполнить(ДанныеПечати);
			ТабличныйДокумент.Присоединить(ОбластьИтого);
			
			// Вывести ИтогоНДС
			СоответствиеСтавокНДС = Новый Соответствие;
			Если ДанныеПечати.УчитыватьНДС И НЕ ТолькоЗалогЗаТару 
				И НЕ ДанныеПечати.ОперацияОблагаетсяНДСУПокупателя Тогда
				
				ОбластьИтогоНДС = Макет.ПолучитьОбласть(?(ДанныеПечати.ЦенаВключаетНДС, "ПодвалТаблицыВТЧНДС", "ПодвалТаблицыНДС"));
				Если ТаблицаТовары.Количество() = 0 Тогда
					Если ЗначениеЗаполнено(ДанныеПечати.СтавкаНДС) Тогда
						СуммаНДС = ДанныеПечати.СуммаНДС;
						СоответствиеСтавокНДС.Вставить(ДанныеПечати.СтавкаНДС, СуммаНДС);
					КонецЕсли;
				Иначе
					Для Каждого СтрокаТовара Из ТаблицаТовары Цикл
						Если ИспользоватьНаборы И СтрокаТовара.ЭтоНабор Тогда 
							Продолжить; // Исключаем суммы НДС по набору в целом.
						КонецЕсли;	
						СуммаНДС = СоответствиеСтавокНДС[СтрокаТовара.СтавкаНДС];
						Если СуммаНДС = Неопределено Тогда
							СуммаНДС = СтрокаТовара.СуммаНДС;
						Иначе
							СуммаНДС = СуммаНДС + СтрокаТовара.СуммаНДС;
						КонецЕсли;
						СоответствиеСтавокНДС.Вставить(СтрокаТовара.СтавкаНДС, СуммаНДС);
					КонецЦикла;
				КонецЕсли;
				Если СоответствиеСтавокНДС.Количество() > 0 Тогда
					СуммаНДС = 0;
					Для Каждого ТекСтавкаНДС Из СоответствиеСтавокНДС Цикл
						СтруктураДанныхИтогоНДС = Новый Структура;
						СтруктураДанныхИтогоНДС.Вставить("ВалютаДокумента",ДанныеПечати.Валюта);
						Если ЗначениеЗаполнено(ТекСтавкаНДС.Значение) Тогда
							ТекущаяСуммаНДС = ТекСтавкаНДС.Значение /100 * ДанныеПечати.ПроцентОплаты;
							СуммаНДС = СуммаНДС + ТекущаяСуммаНДС;
							СтруктураДанныхИтогоНДС.Вставить("ВсегоНДС", ФормированиеПечатныхФорм.ФорматСумм(ТекущаяСуммаНДС));
						Иначе
							СтруктураДанныхИтогоНДС.Вставить("ВсегоНДС","--");
						КонецЕсли;
						ОбластьИтогоНДС.Параметры.Заполнить(СтруктураДанныхИтогоНДС);
						ТабличныйДокумент.Вывести(ОбластьИтогоНДС);
					КонецЦикла;
					ОбластьПодвалСНДС = Макет.ПолучитьОбласть("ПодвалТаблицыВсего");
					СтруктураДанныхПодвалСНДС = Новый Структура;
					СтруктураДанныхПодвалСНДС.Вставить("ВалютаДокумента",ДанныеПечати.Валюта);
					СтруктураДанныхПодвалСНДС.Вставить("ВсегоСНДС", ФормированиеПечатныхФорм.ФорматСумм(ДанныеПечати.СуммаДокумента));
					СтруктураДанныхПодвалСНДС.Вставить("ВсегоБезНДС", ФормированиеПечатныхФорм.ФорматСумм(ДанныеПечати.СуммаДокумента - СуммаНДС));
					ОбластьПодвалСНДС.Параметры.Заполнить(СтруктураДанныхПодвалСНДС);
					ТабличныйДокумент.Вывести(ОбластьПодвалСНДС);
				КонецЕсли;
			Иначе
				ОбластьПодвалТаблицыВсегоБезНДС = Макет.ПолучитьОбласть("ПодвалТаблицыВсегоБезНДС");
				СтруктураДанныхИтого = Новый Структура;
				СтруктураДанныхИтого.Вставить("Всего", ДанныеПечати.СуммаДокумента);
				ОбластьПодвалТаблицыВсегоБезНДС.Параметры.Заполнить(СтруктураДанныхИтого);
				ОбластьПодвалТаблицыВсегоБезНДС.Параметры.Заполнить(ДанныеПечати);
				ТабличныйДокумент.Вывести(ОбластьПодвалТаблицыВсегоБезНДС);
			КонецЕсли;
		Иначе
			// Таблица "Товары"
			ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
			ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
			ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы");
			ОбластьПодытог = Макет.ПолучитьОбласть("ПодвалТаблицыПодытог");
			
			ОбластьПодвалНДС = Макет.ПолучитьОбласть(?(ДанныеПечати.ЦенаВключаетНДС, "ПодвалТаблицыВТЧНДС", "ПодвалТаблицыНДС"));
			
			ОбластьПодвалВсего = Макет.ПолучитьОбласть("ПодвалТаблицыВсего");
			ОбластьПодвалВсегоБезНДС = Макет.ПолучитьОбласть("ПодвалТаблицыВсегоБезНДС");
			ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
			
			ПустыеДанные = НаборыСервер.ПустыеДанные();
			ВыводШапки = 0;
			
			МассивПроверкиВывода = Новый Массив;
			
			Сумма = 0;
			СуммаНДС = 0;
			ВсегоСкидок = 0;
			ВсегоБезСкидок = 0;
			НомерСтроки = 0;
			СоответствиеСтавокНДС = Новый Соответствие;
			Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
				Если НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
					НомерСтрокиПечать = "";
				Иначе
					НомерСтроки = НомерСтроки + 1;
					НомерСтрокиПечать = НомерСтроки;
				КонецЕсли;
				
				Если НомерСтроки = 0 И ВыводШапки <> 2 Тогда
					ВыводШапки = 1;
				КонецЕсли;
				
				ПрефиксИПостфикс = НаборыСервер.ПолучитьПрефиксИПостфикс(СтрокаТовары, ИспользоватьНаборы);
				
				ДополнительныеПараметрыПолученияНаименованияДляПечати = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
				ДополнительныеПараметрыПолученияНаименованияДляПечати.ВозвратнаяТара = СтрокаТовары.ЭтоВозвратнаяТара;
				ДополнительныеПараметрыПолученияНаименованияДляПечати.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
				Если ЕстьСодержание Тогда
					ДополнительныеПараметрыПолученияНаименованияДляПечати.Содержание = СтрокаТовары.Содержание;
				КонецЕсли;
				ДопКолонка = ФормированиеПечатныхФорм.ДополнительнаяКолонкаПечатныхФормДокументов().ИмяКолонки;
				Если ЗначениеЗаполнено(ДопКолонка) Тогда
					ДополнительныеПараметрыПолученияНаименованияДляПечати.Префикс = СтрокаТовары[ДопКолонка];
				КонецЕсли;
				Товар = ПрефиксИПостфикс.Префикс
						+ НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
															СтрокаТовары.НаименованиеПолное,
															СтрокаТовары.Характеристика,
															,
															, // Серия
															ДополнительныеПараметрыПолученияНаименованияДляПечати)
						+ ПрефиксИПостфикс.Постфикс;
						
				СтруктураДанныхСтроки = Новый Структура;
				СтруктураДанныхСтроки.Вставить("Товар", Товар);
				СтруктураДанныхСтроки.Вставить("НомерСтроки", НомерСтрокиПечать);
				СтруктураДанныхСтроки.Вставить("СуммаСкидки",
						?(СтрокаТовары.СуммаСкидки = 0,"--",СтрокаТовары.СуммаСкидки));
				
				ОбластьСтрокаТаблицы.Параметры.Заполнить(СтрокаТовары);
				ОбластьСтрокаТаблицы.Параметры.Заполнить(СтруктураДанныхСтроки);
				Если НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
					ОбластьСтрокаТаблицы.Параметры.Заполнить(ПустыеДанные);
				КонецЕсли;
				
				МассивПроверкиВывода.Очистить();
				МассивПроверкиВывода.Добавить(ОбластьСтрокаТаблицы);
				МассивПроверкиВывода.Добавить(ОбластьПодвалТаблицы);
				Если НомерСтроки = ТаблицаТовары.Количество() Тогда
					МассивПроверкиВывода.Добавить(ОбластьПодытог);
					Для СчетчикОбластей = 0 По СоответствиеСтавокНДС.Количество()-1 Цикл
						МассивПроверкиВывода.Добавить(ОбластьПодвалНДС);
					КонецЦикла;
					МассивПроверкиВывода.Добавить(ОбластьПодвалВсего);
				КонецЕсли;
				
				Если НЕ ТабличныйДокумент.ПроверитьВывод(МассивПроверкиВывода) Тогда
					ТабличныйДокумент.Вывести(ОбластьПодвалТаблицы);
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ВывестиЗаголовокInvoice(Макет, ТабличныйДокумент, ДанныеПечати, Предварительный, КодЯзыка);
					ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
				Если Не НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) Тогда
					Сумма = Сумма + СтрокаТовары.Сумма;
					СуммаНДС = СуммаНДС + СтрокаТовары.СуммаНДС;
					ВсегоСкидок = ВсегоСкидок + СтрокаТовары.СуммаСкидки;
					ВсегоБезСкидок = ВсегоБезСкидок + СтрокаТовары.СуммаБезСкидки;
					Если ДанныеПечати.УчитыватьНДС И НЕ ТолькоЗалогЗаТару Тогда
						СуммаНДСПоСтавке = СоответствиеСтавокНДС[СтрокаТовары.СтавкаНДС];
						Если СуммаНДСПоСтавке = Неопределено Тогда
							СуммаНДСПоСтавке = 0;
						КонецЕсли;
						СоответствиеСтавокНДС.Вставить(СтрокаТовары.СтавкаНДС, СуммаНДСПоСтавке + СтрокаТовары.СуммаНДС);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			ТабличныйДокумент.Вывести(ОбластьПодвалТаблицы);
			СтруктураИтоги = Новый Структура();
			СтруктураИтоги.Вставить("ВалютаДокумента",ДанныеПечати.Валюта);
			СтруктураИтоги.Вставить("Всего", ФормированиеПечатныхФорм.ФорматСумм(Сумма));
			СтруктураИтоги.Вставить("ВсегоБезСкидок", ФормированиеПечатныхФорм.ФорматСумм(ВсегоБезСкидок));
			СтруктураИтоги.Вставить("ВсегоСкидок", ?(ВсегоСкидок<>0, 
				ФормированиеПечатныхФорм.ФорматСумм(ВсегоСкидок),
				"--"));
			СтруктураИтоги.Вставить("ВсегоСНДС", ФормированиеПечатныхФорм.ФорматСумм(Сумма + ?(ДанныеПечати.ЦенаВключаетНДС, 0, СуммаНДС)));
			СтруктураИтоги.Вставить("ВсегоБезНДС", ФормированиеПечатныхФорм.ФорматСумм(Сумма - ?(ДанныеПечати.ЦенаВключаетНДС, СуммаНДС, 0)));
			СтруктураИтоги.Вставить("ВсегоСтрок",НомерСтроки);
			ОбластьПодытог.Параметры.Заполнить(СтруктураИтоги);
			ТабличныйДокумент.Вывести(ОбластьПодытог);
			Если ДанныеПечати.УчитыватьНДС Тогда
				Для Каждого ТекСтавкаНДС Из СоответствиеСтавокНДС Цикл
					
					СтруктураДанныхПодвалНДС = Новый Структура;
					СтруктураДанныхПодвалНДС.Вставить("СтавкаНДС", ТекСтавкаНДС.Ключ);
					СтруктураДанныхПодвалНДС.Вставить("ВсегоНДС", ФормированиеПечатныхФорм.ФорматСумм(ТекСтавкаНДС.Значение, ,"-"));
					ОбластьПодвалНДС.Параметры.Заполнить(СтруктураДанныхПодвалНДС);
					ТабличныйДокумент.Вывести(ОбластьПодвалНДС);
					
				КонецЦикла;
				ОбластьПодвалВсего.Параметры.Заполнить(СтруктураИтоги);
				ТабличныйДокумент.Вывести(ОбластьПодвалВсего);
			Иначе
				СтруктураИтоги.Вставить("НДС", НСтр("ru='Without tax'", ОбщегоНазначения.КодОсновногоЯзыка()));
				ОбластьПодвалВсегоБезНДС.Параметры.Заполнить(СтруктураИтоги);
				ТабличныйДокумент.Вывести(ОбластьПодвалВсегоБезНДС);
			КонецЕсли;
		КонецЕсли;
		Если Предварительный Тогда
			ЗаполнитьТаблицаЭтапыОплаты(ДанныеПечати, Макет, ТабличныйДокумент, ТаблицаЭтапыОплаты, ПараметрыПечати, КодЯзыка);
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеПечати.ДополнительнаяИнформация) Тогда
		
			Область = Макет.ПолучитьОбласть("ДополнительнаяИнформация");
			Область.Параметры.Заполнить(ДанныеПечати);
			ТабличныйДокумент.Вывести(Область);
		
		КонецЕсли;
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыШапкиInvoice(ДанныеПечати, Макет, ТабличныйДокумент, ТаблицаЭтапыОплаты, ТаблицаТовары, Предварительный, КодЯзыка)
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьСчетовНаОплату.ПФ_MXL_Invoice", КодЯзыка);
	
	СведенияОПоставщике = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
	ВывестиЗаголовокInvoice(Макет, ТабличныйДокумент, ДанныеПечати, Предварительный, КодЯзыка);
	
	ИспользоватьМеждународныеАдресНаименование = ЗначениеЗаполнено(КодЯзыка)
												И НЕ КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Если Предварительный Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("УсловияОплаты");
		Если ТаблицаЭтапыОплаты.Количество() = 0 Тогда
			ДатаПлатежа = '00010101';
		ИначеЕсли ТаблицаЭтапыОплаты.Количество() = 1 Тогда
			ДатаПлатежа = ТаблицаЭтапыОплаты[0].ДатаПлатежа;
		Иначе
			ДатаПлатежа = ТаблицаЭтапыОплаты[ТаблицаЭтапыОплаты.Количество()-1].ДатаПлатежа;
		КонецЕсли;
	
		Если ЗначениеЗаполнено(ДатаПлатежа) Тогда
			СтруктураДанныхЗаголовок = Новый Структура;
			СтруктураДанныхЗаголовок.Вставить("СрокДействия", Формат(ДатаПлатежа, СтрШаблон("Л=%1; ДЛФ=D", КодЯзыка)));
			ОбластьМакета.Параметры.Заполнить(СтруктураДанныхЗаголовок);
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	ОбластьМакета = Макет.ПолучитьОбласть("РеквизитыОрганизации");
	
	СтруктураДанныхПоставщик = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.ОрганизацияПоставщик,
		ДанныеПечати.Дата);
	
	СтруктураДанныхПоставщик.ПолноеНаименование = ВыбратьРеквизит(ИспользоватьМеждународныеАдресНаименование, СтруктураДанныхПоставщик.ПолноеНаименование, СтруктураДанныхПоставщик.НаименованиеМеждународное);
	СтруктураДанныхПоставщик.ЮридическийАдрес = ВыбратьРеквизит(ИспользоватьМеждународныеАдресНаименование, СтруктураДанныхПоставщик.ЮридическийАдрес, СтруктураДанныхПоставщик.МеждународныйАдрес);
	
	ОбластьМакета.Параметры.Заполнить(СтруктураДанныхПоставщик);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	Если ЗначениеЗаполнено(ДанныеПечати.Грузоотправитель) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("РеквизитыГрузоотправителя");
		
		СтруктураДанныхПоставщик = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Грузоотправитель,
			ДанныеПечати.Дата);
		
		СтруктураДанныхПоставщик.ПолноеНаименование = ВыбратьРеквизит(ИспользоватьМеждународныеАдресНаименование, СтруктураДанныхПоставщик.ПолноеНаименование, СтруктураДанныхПоставщик.НаименованиеМеждународное);
		СтруктураДанныхПоставщик.ЮридическийАдрес = ВыбратьРеквизит(ИспользоватьМеждународныеАдресНаименование, СтруктураДанныхПоставщик.ЮридическийАдрес, СтруктураДанныхПоставщик.МеждународныйАдрес);
		
		ОбластьМакета.Параметры.Заполнить(СтруктураДанныхПоставщик);
		ТабличныйДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("РеквизитыБанка");
	Если ДанныеПечати.ПлатежЗаРубеж Тогда
		
		СтруктураДанныхШапки = Новый Структура;
		ПредставлениеПоставщикаДляПлатПоручения = "";
		
		Если ЗначениеЗаполнено(ДанныеПечати.БанковскийСчет) Тогда
			
			НаименованиеБанка = ВыбратьРеквизит(ИспользоватьМеждународныеАдресНаименование, ДанныеПечати.НаименованиеБанка, ДанныеПечати.НаименованиеБанкаМеждународное);
			
			СтруктураДанныхШапки.Вставить("СчетБанкаПолучателяПредставление", ДанныеПечати.НомерБанковскогоСчета);
			СтруктураДанныхШапки.Вставить("БанкПолучателяПредставление", НаименованиеБанка);
			СтруктураДанныхШапки.Вставить("АдресБанкаПолучателяПредставление", ДанныеПечати.АдресБанка);
			СтруктураДанныхШапки.Вставить("СВИФТБанка", ДанныеПечати.СВИФТБанка);
			ПредставлениеПоставщикаДляПлатПоручения = ДанныеПечати.БанковскийСчетТекстКорреспондента;
			
		КонецЕсли;
		
		Если ПустаяСтрока(ПредставлениеПоставщикаДляПлатПоручения) Тогда
			
			СтрокаРеквизитов = "ПолноеНаименование,";
			Если ИспользоватьМеждународныеАдресНаименование
				И ЗначениеЗаполнено(СведенияОПоставщике.НаименованиеМеждународное) Тогда
				
				СтрокаРеквизитов = "НаименованиеМеждународное,";
				
			КонецЕсли;
			
			ПредставлениеПоставщикаДляПлатПоручения = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, СтрокаРеквизитов);
			
		КонецЕсли;
		СтруктураДанныхШапки.Вставить("ПредставлениеПоставщикаДляПлатПоручения", ПредставлениеПоставщикаДляПлатПоручения);
		ОбластьМакета.Параметры.Заполнить(СтруктураДанныхШапки);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если Не ПустаяСтрока(ДанныеПечати.НаименованиеБанкаДляРасчетов) Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("РеквизитыБанкаКорреспондента");
			
			СтруктураДанныхШапки.Очистить();
			СтруктураДанныхШапки.Вставить("БанкКорреспондентПолучателяПредставление",
				ДанныеПечати.НаименованиеБанкаДляРасчетов + " " + ДанныеПечати.АдресБанкаДляРасчетов);
			СтруктураДанныхШапки.Вставить("СВИФТБанкаДляРасчетов", ДанныеПечати.СВИФТБанкаДляРасчетов);
			СтруктураДанныхШапки.Вставить("СчетБанкаДляРасчетовПредставление", ДанныеПечати.СчетВБанкеДляРасчетов);
			
			ОбластьМакета.Параметры.Заполнить(СтруктураДанныхШапки);
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("НазначениеПлатежа");
		СтруктураДанныхШапки.Очистить();
		Если Не ЗначениеЗаполнено(ДанныеПечати.НазначениеПлатежа)
			И ТипЗнч(ДанныеПечати.Ссылка) <> Тип("ДокументСсылка.СчетНаОплатуКлиенту") Тогда
			СтруктураДанныхШапки.Вставить("НазначениеПлатежа", Документы.СчетНаОплатуКлиенту.СформироватьНазначениеПлатежа(
				ДанныеПечати.Номер, ДанныеПечати.Ссылка));
		Иначе
			СтруктураДанныхШапки.Вставить("НазначениеПлатежа", ДанныеПечати.НазначениеПлатежа);
		КонецЕсли;
		ОбластьМакета.Параметры.Заполнить(СтруктураДанныхШапки);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
	Иначе
		
		СтруктураДанныхШапки = Новый Структура;
		ПредставлениеПоставщикаДляПлатПоручения = "";
		
		Если ЗначениеЗаполнено(ДанныеПечати.БанковскийСчет) Тогда
			
			Если ЗначениеЗаполнено(ДанныеПечати.БИКБанкаДляРасчетов) Тогда
				Банк = ВыбратьРеквизит(ИспользоватьМеждународныеАдресНаименование, ДанныеПечати.НаименованиеБанкаДляРасчетов, ДанныеПечати.НаименованиеБанкаДляРасчетовМеждународное);
				БИК = ВыбратьРеквизит(ИспользоватьМеждународныеАдресНаименование, ДанныеПечати.БИКБанкаДляРасчетов, ДанныеПечати.СВИФТБанкаДляРасчетов);
				КоррСчет = ДанныеПечати.КоррСчетБанкаДляРасчетов;
				ГородБанка = ВыбратьРеквизит(ИспользоватьМеждународныеАдресНаименование, ДанныеПечати.ГородБанкаДляРасчетов, ДанныеПечати.ГородБанкаДляРасчетовМеждународный);
				НомерСчета = ДанныеПечати.КоррСчетБанка;
			Иначе
				Банк = ВыбратьРеквизит(ИспользоватьМеждународныеАдресНаименование, ДанныеПечати.НаименованиеБанка, ДанныеПечати.НаименованиеБанкаМеждународное);
				БИК = ВыбратьРеквизит(ИспользоватьМеждународныеАдресНаименование, ДанныеПечати.БИКБанк, ДанныеПечати.СВИФТБанка);
				КоррСчет = ДанныеПечати.КоррСчетБанка;
				ГородБанка = ВыбратьРеквизит(ИспользоватьМеждународныеАдресНаименование, ДанныеПечати.ГородБанка, ДанныеПечати.ГородБанкаМеждународный);
				НомерСчета = ДанныеПечати.НомерБанковскогоСчета;
			КонецЕсли;
			
			СтруктураДанныхШапки.Вставить("СВИФТБанка", БИК);
			СтруктураДанныхШапки.Вставить("БанкПолучателяПредставление", СокрЛП(Банк) + " " + ГородБанка);
			СтруктураДанныхШапки.Вставить("СчетБанкаПолучателяПредставление", КоррСчет);
			СтруктураДанныхШапки.Вставить("СчетПолучателяПредставление", НомерСчета);
			ПредставлениеПоставщикаДляПлатПоручения = ДанныеПечати.БанковскийСчетТекстКорреспондента;
			
		КонецЕсли;
	
		Если ПустаяСтрока(ПредставлениеПоставщикаДляПлатПоручения) Тогда
			
			СтрокаРеквизитов = "ПолноеНаименование,";
			Если ИспользоватьМеждународныеАдресНаименование
				И ЗначениеЗаполнено(СведенияОПоставщике.НаименованиеМеждународное) Тогда
				
				СтрокаРеквизитов = "НаименованиеМеждународное,";
				
			КонецЕсли;
			
			ПредставлениеПоставщикаДляПлатПоручения = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, СтрокаРеквизитов);
			
		КонецЕсли;
		
		СтруктураДанныхШапки.Вставить("ПредставлениеПоставщикаДляПлатПоручения", ПредставлениеПоставщикаДляПлатПоручения);
		ОбластьМакета.Параметры.Заполнить(СтруктураДанныхШапки);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("НазначениеПлатежа");
		СтруктураДанныхШапки.Очистить();
		Если Не ЗначениеЗаполнено(ДанныеПечати.НазначениеПлатежа)
			И ТипЗнч(ДанныеПечати.Ссылка) <> Тип("ДокументСсылка.СчетНаОплатуКлиенту") Тогда
			
			СтруктураДанныхШапки.Вставить("НазначениеПлатежа", Документы.СчетНаОплатуКлиенту.СформироватьНазначениеПлатежа(
				ДанныеПечати.Номер, ДанныеПечати.Ссылка));
			
		Иначе
			
			СтруктураДанныхШапки.Вставить("НазначениеПлатежа", ДанныеПечати.НазначениеПлатежа);
			
		КонецЕсли;
		ОбластьМакета.Параметры.Заполнить(СтруктураДанныхШапки);
		ТабличныйДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("РеквизитыКонтрагента");
	
	СтруктураДанныхПокупатель = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент,
		ДанныеПечати.Дата);
	СтруктураДанныхПокупатель.Вставить("Грузополучатель", СтруктураДанныхПокупатель.ПолноеНаименование);
	СтруктураДанныхПокупатель.Грузополучатель = ВыбратьРеквизит(ИспользоватьМеждународныеАдресНаименование, СтруктураДанныхПокупатель.ПолноеНаименование, СтруктураДанныхПокупатель.НаименованиеМеждународное);
	СтруктураДанныхПокупатель.ПолноеНаименование = ВыбратьРеквизит(ИспользоватьМеждународныеАдресНаименование, СтруктураДанныхПокупатель.ПолноеНаименование, СтруктураДанныхПокупатель.НаименованиеМеждународное);
	СтруктураДанныхПокупатель.ЮридическийАдрес = ВыбратьРеквизит(ИспользоватьМеждународныеАдресНаименование, СтруктураДанныхПокупатель.ЮридическийАдрес, СтруктураДанныхПокупатель.МеждународныйАдрес);
	СтруктураДанныхПокупатель.ФактическийАдрес = ВыбратьРеквизит(ИспользоватьМеждународныеАдресНаименование, СтруктураДанныхПокупатель.ФактическийАдрес, СтруктураДанныхПокупатель.МеждународныйАдрес);
	Если ЗначениеЗаполнено(ДанныеПечати.Грузополучатель) Тогда
		СтруктураДанныхГрузополучатель = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент,
			ДанныеПечати.Дата);
			
		СтруктураДанныхПокупатель.Грузополучатель = ВыбратьРеквизит(ИспользоватьМеждународныеАдресНаименование, СтруктураДанныхГрузополучатель.ПолноеНаименование, СтруктураДанныхГрузополучатель.НаименованиеМеждународное);
		СтруктураДанныхПокупатель.ФактическийАдрес = ВыбратьРеквизит(ИспользоватьМеждународныеАдресНаименование, СтруктураДанныхГрузополучатель.ФактическийАдрес, СтруктураДанныхГрузополучатель.МеждународныйАдрес);
		СтруктураДанныхПокупатель.Телефоны = СтруктураДанныхГрузополучатель.Телефоны;
		
	КонецЕсли;
	ОбластьМакета.Параметры.Заполнить(СтруктураДанныхПокупатель);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

Процедура ВывестиЗаголовокInvoice(Макет, ТабличныйДокумент, ДанныеПечати, Предварительный, КодЯзыка)
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	
	ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, ДанныеПечати.Ссылка);
	ФормированиеПечатныхФорм.ВывестиЛоготипВТабличныйДокумент(Макет, ОбластьМакета, "ЗаголовокЛоготип", ДанныеПечати.Организация);
	Если НЕ ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ОбластьМакета.Рисунки, "Логотип") Тогда 
		ОбластьМакета.УдалитьОбласть(ОбластьМакета.Область("ОбластьЛоготип"), ТипСмещенияТабличногоДокумента.ПоГоризонтали);
		ОбластьМакета.УдалитьОбласть(ОбластьМакета.Область("ЗаголовокОтступ"), ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЕсли;
	
	Если Предварительный Тогда
		ОбластьМакета.УдалитьОбласть(ОбластьМакета.Область("ЗаголовокCommercial"), ТипСмещенияТабличногоДокумента.ПоВертикали);
	Иначе
		ОбластьМакета.УдалитьОбласть(ОбластьМакета.Область("ЗаголовокProforma"), ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЕсли;
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("НомерДокумента", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеПечати.Номер));
	СтруктураПараметров.Вставить("ДатаДокумента", Формат(ДанныеПечати.Дата, СтрШаблон("Л=%1; ДЛФ=D", КодЯзыка)));
	ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

Процедура ЗаполнитьТаблицаЭтапыОплаты(ДанныеПечати, Макет, ТабличныйДокумент, ТаблицаЭтапыОплаты, ПараметрыПечати, КодЯзыка)
	
	МассивПроверкиВывода = Новый Массив;
	
	// Вывести этапы графика оплаты
	Если ТаблицаЭтапыОплаты.Количество() > 1 Тогда
		ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицыЭтапыОплаты");
		ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ИтогоЭтапыОплаты");
		МассивПроверкиВывода.Добавить(ОбластьШапкаТаблицы);
		МассивПроверкиВывода.Добавить(ОбластьПодвалТаблицы);
		
		ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицыЭтапыОплаты");
		
		НомерЭтапа = 1;
		Для Каждого ТекЭтап Из ТаблицаЭтапыОплаты Цикл
			
			ПараметрыСтроки = НовыеПараметрыСтрокиЭтапа();
			ЗаполнитьЗначенияСвойств(ПараметрыСтроки, ТекЭтап);
			
			ПараметрыСтроки.ДатаПлатежа = Формат(ТекЭтап.ДатаПлатежа, СтрШаблон("Л=%1; ДЛФ=D", КодЯзыка));
			
			ПараметрыСтроки.НомерСтроки = НомерЭтапа;
			Если ПараметрыСтроки.ЭтоЗалогЗаТару Тогда
				ПараметрыСтроки.ПроцентПлатежа = "-";
			КонецЕсли;
			
			ОбластьСтрокаТаблицы.Параметры.Заполнить(ПараметрыСтроки);
			
			МассивПроверкиВывода.Добавить(ОбластьСтрокаТаблицы);
			
			Если ТабличныйДокумент.ПроверитьВывод(МассивПроверкиВывода) Тогда
				Если НомерЭтапа = 1 Тогда
					ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
					МассивПроверкиВывода.Удалить(0);
				КонецЕсли;
			Иначе
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ВывестиЗаголовокInvoice(Макет, ТабличныйДокумент, ДанныеПечати, Истина, КодЯзыка);
				ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
			МассивПроверкиВывода.Удалить(МассивПроверкиВывода.ВГраница());
			
			НомерЭтапа = НомерЭтапа + 1;
			
		КонецЦикла;
		ТабличныйДокумент.Вывести(ОбластьПодвалТаблицы);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ProformaInvoice

Функция СформироватьПечатнуюФормуProformaInvoice(СтруктураТипов, ОбъектыПечати, ПараметрыПечати, КодЯзыка = Неопределено) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_PROFORMAINVOICE";
	
	НомерТипаДокумента = 0;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
		
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтруктураОбъектов.Ключ);
		ДанныеДляПечати = МенеджерОбъекта.ПолучитьДанныеДляПечатнойФормыСчетаНаОплату(ПараметрыПечати, СтруктураОбъектов.Значение, КодЯзыка);
		
		ЗаполнитьТабличныйДокументInvoice(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, ПараметрыПечати, Истина, КодЯзыка);
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#Область DebitCreditNote

Функция СформироватьПечатнуюФормуДебетНота(СтруктураТипов, ОбъектыПечати, ПараметрыПечати, КодЯзыка) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_DebitNote";
	
	НомерТипаДокумента = 0;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
		
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ДанныеДляПечати = Документы.КорректировкаРеализации.ДанныеДляПечатиДебетКредитНота(ПараметрыПечати, СтруктураОбъектов.Значение, "ДебетНота", КодЯзыка);
		
		ЗаполнитьТабличныйДокументДебетКредитНота(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, ПараметрыПечати, "ДебетНота", КодЯзыка);
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция СформироватьПечатнуюФормуКредитНота(СтруктураТипов, ОбъектыПечати, ПараметрыПечати, КодЯзыка) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_CreditNote";
	
	НомерТипаДокумента = 0;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
		
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		Если СтруктураОбъектов.Ключ = "Документ.КорректировкаРеализации" Тогда
			
			ДанныеДляПечати = Документы.КорректировкаРеализации.ДанныеДляПечатиДебетКредитНота(ПараметрыПечати, СтруктураОбъектов.Значение, "КредитНота", КодЯзыка);
			
		ИначеЕсли СтруктураОбъектов.Ключ = "Документ.ВозвратТоваровОтКлиента" Тогда
			
			ДанныеДляПечати = Документы.ВозвратТоваровОтКлиента.ДанныеДляПечатиДебетКредитНота(ПараметрыПечати, СтруктураОбъектов.Значение, "КредитНота", КодЯзыка);
			
		КонецЕсли;
		
		ЗаполнитьТабличныйДокументДебетКредитНота(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, ПараметрыПечати, "КредитНота", КодЯзыка);
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Параметры:
//	ТабличныйДокумент           - ТабличныйДокумент -
//	ДанныеДляПечати             - Структура - Содержит в себе данные по шапке документа, табличной части:
//		* РезультатПоШапке          - РезультатЗапроса -
//		* РезультатПоТабличнойЧасти - РезультатЗапроса -
//	ОбъектыПечати               - см. УправлениеПечатьюПереопределяемый.ПриПечати.ОбъектыПечати
//	ПараметрыПечати             - см. УправлениеПечатьюПереопределяемый.ПриПечати.ПараметрыПечати
//	ДебетКредитНота             - Строка -
//	КодЯзыка                    - Строка -
//
Процедура ЗаполнитьТабличныйДокументДебетКредитНота(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, ПараметрыПечати, ДебетКредитНота, КодЯзыка)
	
	ДанныеПечати = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	Товары = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выгрузить();
	
	ПервыйДокумент = Истина;
	
	Пока ДанныеПечати.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		
		ТаблицаТовары = Товары.НайтиСтроки(СтруктураПоиска);
		
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = Новый ТабличныйДокумент;
		ЗаполнитьРеквизитыШапкиДебетКредитНота(ДанныеПечати, Макет, ТабличныйДокумент, ТаблицаТовары, ДебетКредитНота, КодЯзыка);
				
		// Таблица "Товары"
		ОбластьШапкаТаблицы  = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
		ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы");
		ОбластьПодытог       = Макет.ПолучитьОбласть("ПодвалТаблицыПодытог");
		ОбластьПодвалНДС = Макет.ПолучитьОбласть(?(ДанныеПечати.ЦенаВключаетНДС, "ПодвалТаблицыВТЧНДС", "ПодвалТаблицыНДС"));
		ОбластьПодвалВсего   = Макет.ПолучитьОбласть("ПодвалТаблицыВсего");
		ОбластьПодвалВсегоБезНДС = Макет.ПолучитьОбласть("ПодвалТаблицыВсегоБезНДС");
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		ПустыеДанные = НаборыСервер.ПустыеДанные();
		ВыводШапки = 0;
		
		МассивПроверкиВывода = Новый Массив;
		
		Сумма = 0;
		СуммаНДС = 0;
		НомерСтроки = 0;
		СоответствиеСтавокНДС = Новый Соответствие;
		Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
			
			Если НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, Истина) Тогда
				НомерСтрокиПечать = "";
			Иначе
				НомерСтроки = НомерСтроки + 1;
				НомерСтрокиПечать = НомерСтроки;
			КонецЕсли;
			
			Если НомерСтроки = 0 И ВыводШапки <> 2 Тогда
				ВыводШапки = 1;
			КонецЕсли;
			
			ПрефиксИПостфикс = НаборыСервер.ПолучитьПрефиксИПостфикс(СтрокаТовары, Истина);
			
			ДополнительныеПараметрыПолученияНаименованияДляПечати = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
			ДополнительныеПараметрыПолученияНаименованияДляПечати.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
			ДополнительныеПараметрыПолученияНаименованияДляПечати.Содержание = СтрокаТовары.Содержание;
			ДопКолонка = ФормированиеПечатныхФорм.ДополнительнаяКолонкаПечатныхФормДокументов().ИмяКолонки;
			Если ЗначениеЗаполнено(ДопКолонка) Тогда
				ДополнительныеПараметрыПолученияНаименованияДляПечати.Префикс = СтрокаТовары[ДопКолонка];
			КонецЕсли;
			Товар = ПрефиксИПостфикс.Префикс
					+ НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
														СтрокаТовары.НаименованиеПолное,
														СтрокаТовары.Характеристика,
														,
														, // Серия
														ДополнительныеПараметрыПолученияНаименованияДляПечати)
					+ ПрефиксИПостфикс.Постфикс;
					
			СтруктураДанныхСтроки = Новый Структура;
			СтруктураДанныхСтроки.Вставить("Товар", Товар);
			СтруктураДанныхСтроки.Вставить("НомерСтроки", НомерСтрокиПечать);
			СтруктураДанныхСтроки.Вставить("Количество", ?(СтрокаТовары.Количество = 0, "--", СтрокаТовары.Количество));
			СтруктураДанныхСтроки.Вставить("Цена", ?(СтрокаТовары.Цена = 0, "--", СтрокаТовары.Цена));
			СтруктураДанныхСтроки.Вставить("СуммаНДС", ?(СтрокаТовары.СуммаНДС = 0, "--", СтрокаТовары.СуммаНДС));
			СтруктураДанныхСтроки.Вставить("Сумма", ?(СтрокаТовары.Сумма = 0, "--", СтрокаТовары.Сумма));
			
			ОбластьСтрокаТаблицы.Параметры.Заполнить(СтрокаТовары);
			ОбластьСтрокаТаблицы.Параметры.Заполнить(СтруктураДанныхСтроки);
			Если НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, Истина) Тогда
				ОбластьСтрокаТаблицы.Параметры.Заполнить(ПустыеДанные);
			КонецЕсли;
			
			МассивПроверкиВывода.Очистить();
			МассивПроверкиВывода.Добавить(ОбластьСтрокаТаблицы);
			МассивПроверкиВывода.Добавить(ОбластьПодвалТаблицы);
			Если НомерСтроки = ТаблицаТовары.Количество() Тогда
				МассивПроверкиВывода.Добавить(ОбластьПодытог);
				Для СчетчикОбластей = 0 По СоответствиеСтавокНДС.Количество()-1 Цикл
					МассивПроверкиВывода.Добавить(ОбластьПодвалНДС);
				КонецЦикла;
				МассивПроверкиВывода.Добавить(ОбластьПодвалВсего);
			КонецЕсли;
			
			Если НЕ ТабличныйДокумент.ПроверитьВывод(МассивПроверкиВывода) Тогда
				ТабличныйДокумент.Вывести(ОбластьПодвалТаблицы);
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ВывестиЗаголовокДебетКредитНота(Макет, ТабличныйДокумент, ДанныеПечати, ДебетКредитНота, КодЯзыка);
				ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
			Если Не НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, Истина) Тогда
				Сумма = Сумма + СтрокаТовары.Сумма;
				СуммаНДС = СуммаНДС + СтрокаТовары.СуммаНДС;
				Если ДанныеПечати.УчитыватьНДС Тогда
					СуммаНДСПоСтавке = СоответствиеСтавокНДС[СтрокаТовары.СтавкаНДС];
					Если СуммаНДСПоСтавке = Неопределено Тогда
						СуммаНДСПоСтавке = 0;
					КонецЕсли;
					СоответствиеСтавокНДС.Вставить(СтрокаТовары.СтавкаНДС, СуммаНДСПоСтавке + СтрокаТовары.СуммаНДС);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ТабличныйДокумент.Вывести(ОбластьПодвалТаблицы);
		СтруктураИтоги = Новый Структура();
		СтруктураИтоги.Вставить("ВалютаДокумента",ДанныеПечати.Валюта);
		СтруктураИтоги.Вставить("Всего", ФормированиеПечатныхФорм.ФорматСумм(Сумма));
		СтруктураИтоги.Вставить("ВсегоСНДС", ФормированиеПечатныхФорм.ФорматСумм(Сумма + ?(ДанныеПечати.ЦенаВключаетНДС, 0, СуммаНДС)));
		СтруктураИтоги.Вставить("ВсегоБезНДС", ФормированиеПечатныхФорм.ФорматСумм(Сумма - ?(ДанныеПечати.ЦенаВключаетНДС, СуммаНДС, 0)));
		СтруктураИтоги.Вставить("ВсегоСтрок",НомерСтроки);
		ОбластьПодытог.Параметры.Заполнить(СтруктураИтоги);
		ТабличныйДокумент.Вывести(ОбластьПодытог);
		Если ДанныеПечати.УчитыватьНДС Тогда
			Для Каждого ТекСтавкаНДС Из СоответствиеСтавокНДС Цикл
				СтруктураДанныхПодвалНДС = Новый Структура;
				СтруктураДанныхПодвалНДС.Вставить("СтавкаНДС", ТекСтавкаНДС.Ключ);
				СтруктураДанныхПодвалНДС.Вставить("ВсегоНДС", ФормированиеПечатныхФорм.ФорматСумм(ТекСтавкаНДС.Значение, ,"-"));
				ОбластьПодвалНДС.Параметры.Заполнить(СтруктураДанныхПодвалНДС);
				ТабличныйДокумент.Вывести(ОбластьПодвалНДС);
			КонецЦикла;
			ОбластьПодвалВсего.Параметры.Заполнить(СтруктураИтоги);
			ТабличныйДокумент.Вывести(ОбластьПодвалВсего);
		Иначе
			ОбластьПодвалВсегоБезНДС.Параметры.Заполнить(СтруктураИтоги);
			ТабличныйДокумент.Вывести(ОбластьПодвалВсегоБезНДС);
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыШапкиДебетКредитНота(ДанныеПечати, Макет, ТабличныйДокумент, ТаблицаТовары, Предварительный, КодЯзыка)
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьСчетовНаОплату.ПФ_MXL_DebitCreditNote", КодЯзыка);
	
	СведенияОПоставщике = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
	ВывестиЗаголовокДебетКредитНота(Макет, ТабличныйДокумент, ДанныеПечати, Предварительный, КодЯзыка);
	
	ИспользоватьМеждународныеАдресНаименование = ЗначениеЗаполнено(КодЯзыка)
												И НЕ КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	ОбластьМакета = Макет.ПолучитьОбласть("РеквизитыОрганизации");
	
	СтруктураДанныхПоставщик = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.ОрганизацияПоставщик,
		ДанныеПечати.Дата);
	
	СтруктураДанныхПоставщик.ПолноеНаименование = ВыбратьРеквизит(ИспользоватьМеждународныеАдресНаименование, СтруктураДанныхПоставщик.ПолноеНаименование, СтруктураДанныхПоставщик.НаименованиеМеждународное);
	СтруктураДанныхПоставщик.ЮридическийАдрес = ВыбратьРеквизит(ИспользоватьМеждународныеАдресНаименование, СтруктураДанныхПоставщик.ЮридическийАдрес, СтруктураДанныхПоставщик.МеждународныйАдрес);
	
	ОбластьМакета.Параметры.Заполнить(СтруктураДанныхПоставщик);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("РеквизитыБанка");
	Если ДанныеПечати.ПлатежЗаРубеж Тогда
		
		СтруктураДанныхШапки = Новый Структура;
		ПредставлениеПоставщикаДляПлатПоручения = "";
		
		Если ЗначениеЗаполнено(ДанныеПечати.БанковскийСчет) Тогда
			
			НаименованиеБанка = ВыбратьРеквизит(ИспользоватьМеждународныеАдресНаименование, ДанныеПечати.НаименованиеБанка, ДанныеПечати.НаименованиеБанкаМеждународное);
			
			СтруктураДанныхШапки.Вставить("СчетБанкаПолучателяПредставление", ДанныеПечати.НомерБанковскогоСчета);
			СтруктураДанныхШапки.Вставить("БанкПолучателяПредставление", НаименованиеБанка);
			СтруктураДанныхШапки.Вставить("АдресБанкаПолучателяПредставление", ДанныеПечати.АдресБанка);
			СтруктураДанныхШапки.Вставить("СВИФТБанка", ДанныеПечати.СВИФТБанка);
			ПредставлениеПоставщикаДляПлатПоручения = ДанныеПечати.БанковскийСчетТекстКорреспондента;
			
		КонецЕсли;
		
		Если ПустаяСтрока(ПредставлениеПоставщикаДляПлатПоручения) Тогда
			ПредставлениеПоставщикаДляПлатПоручения = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
		КонецЕсли;
		СтруктураДанныхШапки.Вставить("ПредставлениеПоставщикаДляПлатПоручения", ПредставлениеПоставщикаДляПлатПоручения);
		ОбластьМакета.Параметры.Заполнить(СтруктураДанныхШапки);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если Не ПустаяСтрока(ДанныеПечати.НаименованиеБанкаДляРасчетов) Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("РеквизитыБанкаКорреспондента");
			
			СтруктураДанныхШапки.Очистить();
			СтруктураДанныхШапки.Вставить("БанкКорреспондентПолучателяПредставление",
				ДанныеПечати.НаименованиеБанкаДляРасчетов + " " + ДанныеПечати.АдресБанкаДляРасчетов);
			СтруктураДанныхШапки.Вставить("СВИФТБанкаДляРасчетов", ДанныеПечати.СВИФТБанкаДляРасчетов);
			СтруктураДанныхШапки.Вставить("СчетБанкаДляРасчетовПредставление", ДанныеПечати.СчетВБанкеДляРасчетов);
			
			ОбластьМакета.Параметры.Заполнить(СтруктураДанныхШапки);
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
	Иначе
		
		СтруктураДанныхШапки = Новый Структура;
		ПредставлениеПоставщикаДляПлатПоручения = "";
		
		Если ЗначениеЗаполнено(ДанныеПечати.БанковскийСчет) Тогда
			
			Если ЗначениеЗаполнено(ДанныеПечати.БИКБанкаДляРасчетов) Тогда
				Банк = ВыбратьРеквизит(ИспользоватьМеждународныеАдресНаименование, ДанныеПечати.НаименованиеБанкаДляРасчетов, ДанныеПечати.НаименованиеБанкаДляРасчетовМеждународное);
				БИК = ВыбратьРеквизит(ИспользоватьМеждународныеАдресНаименование, ДанныеПечати.БИКБанкаДляРасчетов, ДанныеПечати.СВИФТБанкаДляРасчетов);
				КоррСчет = ДанныеПечати.КоррСчетБанкаДляРасчетов;
				ГородБанка = ВыбратьРеквизит(ИспользоватьМеждународныеАдресНаименование, ДанныеПечати.ГородБанкаДляРасчетов, ДанныеПечати.ГородБанкаДляРасчетовМеждународный);
				НомерСчета = ДанныеПечати.КоррСчетБанка;
			Иначе
				Банк = ВыбратьРеквизит(ИспользоватьМеждународныеАдресНаименование, ДанныеПечати.НаименованиеБанка, ДанныеПечати.НаименованиеБанкаМеждународное);
				БИК = ВыбратьРеквизит(ИспользоватьМеждународныеАдресНаименование, ДанныеПечати.БИКБанк, ДанныеПечати.СВИФТБанка);
				КоррСчет = ДанныеПечати.КоррСчетБанка;
				ГородБанка = ВыбратьРеквизит(ИспользоватьМеждународныеАдресНаименование, ДанныеПечати.ГородБанка, ДанныеПечати.ГородБанкаМеждународный);
				НомерСчета = ДанныеПечати.НомерБанковскогоСчета;
			КонецЕсли;
			
			СтруктураДанныхШапки.Вставить("СВИФТБанка", БИК);
			СтруктураДанныхШапки.Вставить("БанкПолучателяПредставление", СокрЛП(Банк) + " " + ГородБанка);
			СтруктураДанныхШапки.Вставить("СчетБанкаПолучателяПредставление", КоррСчет);
			СтруктураДанныхШапки.Вставить("СчетПолучателяПредставление", НомерСчета);
			ПредставлениеПоставщикаДляПлатПоручения = ДанныеПечати.БанковскийСчетТекстКорреспондента;
			
		КонецЕсли;
	
		Если ПустаяСтрока(ПредставлениеПоставщикаДляПлатПоручения) Тогда
			
			СтрокаРеквизитов = "ПолноеНаименование,";
			Если ИспользоватьМеждународныеАдресНаименование
				И ЗначениеЗаполнено(СведенияОПоставщике.НаименованиеМеждународное) Тогда
				
				СтрокаРеквизитов = "НаименованиеМеждународное,";
				
			КонецЕсли;
			
			ПредставлениеПоставщикаДляПлатПоручения = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, СтрокаРеквизитов);
			
		КонецЕсли;
		
		СтруктураДанныхШапки.Вставить("ПредставлениеПоставщикаДляПлатПоручения", ПредставлениеПоставщикаДляПлатПоручения);
		ОбластьМакета.Параметры.Заполнить(СтруктураДанныхШапки);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("РеквизитыКонтрагента");
	
	СтруктураДанныхПокупатель = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата);
	
	СтруктураДанныхПокупатель.ПолноеНаименование = ВыбратьРеквизит(ИспользоватьМеждународныеАдресНаименование, СтруктураДанныхПокупатель.ПолноеНаименование, СтруктураДанныхПокупатель.НаименованиеМеждународное);
	СтруктураДанныхПокупатель.ЮридическийАдрес = ВыбратьРеквизит(ИспользоватьМеждународныеАдресНаименование, СтруктураДанныхПокупатель.ЮридическийАдрес, СтруктураДанныхПокупатель.МеждународныйАдрес);
	СтруктураДанныхПокупатель.ФактическийАдрес = ВыбратьРеквизит(ИспользоватьМеждународныеАдресНаименование, СтруктураДанныхПокупатель.ФактическийАдрес, СтруктураДанныхПокупатель.МеждународныйАдрес);
	
	ОбластьМакета.Параметры.Заполнить(СтруктураДанныхПокупатель);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

Процедура ВывестиЗаголовокДебетКредитНота(Макет, ТабличныйДокумент, ДанныеПечати, ДебетКредитНота, КодЯзыка)
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, ДанныеПечати.Ссылка);
	ФормированиеПечатныхФорм.ВывестиЛоготипВТабличныйДокумент(Макет, ОбластьМакета, "ЗаголовокЛоготип", ДанныеПечати.Организация);
	Если НЕ ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ОбластьМакета.Рисунки, "Логотип") Тогда 
		ОбластьМакета.УдалитьОбласть(ОбластьМакета.Область("ОбластьЛоготип"), ТипСмещенияТабличногоДокумента.ПоГоризонтали);
		ОбластьМакета.УдалитьОбласть(ОбластьМакета.Область("ЗаголовокОтступ"), ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура();
	Если ДебетКредитНота = "КредитНота" Тогда
		ОбластьМакета.УдалитьОбласть(ОбластьМакета.Область("ЗаголовокDebit"), ТипСмещенияТабличногоДокумента.ПоВертикали);
	Иначе
		ОбластьМакета.УдалитьОбласть(ОбластьМакета.Область("ЗаголовокCredit"), ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЕсли;
	СтруктураПараметров.Вставить("НомерДокумента", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеПечати.Номер));
	СтруктураПараметров.Вставить("ДатаДокумента", Формат(ДанныеПечати.Дата, СтрШаблон("Л=%1; ДЛФ=D", КодЯзыка)));
	ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
	ТабличныйДокумент.Вывести(ОбластьМакета);
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура ПроверкаЗаполненияДокумента(ДанныеПечати, ТаблицаТовары, ТаблицаЭтапыОплаты, ШаблоныОшибок, Отказ, Предварительный);
	
	Если НЕ (ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.СчетНаОплатуКлиенту")
	 И ТипЗнч(ДанныеПечати.ДокументОснование) = Тип("СправочникСсылка.ДоговорыКонтрагентов")) 
	 И ТаблицаТовары <> Неопределено И ТаблицаТовары.Количество() = 0 Тогда
		Если ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблоныОшибок.ЗаменяющиеТовары, ДанныеПечати.Ссылка), ДанныеПечати.Ссылка);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблоныОшибок.Товары, ДанныеПечати.Ссылка), ДанныеПечати.Ссылка);
		КонецЕсли;
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Если Предварительный И ТаблицаЭтапыОплаты <> Неопределено И ТаблицаЭтапыОплаты.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблоныОшибок.Этапы, ДанныеПечати.Ссылка), ДанныеПечати.Ссылка);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция СуммаКОплатеПоСчету(ДанныеПечати, ТаблицаТовары)
	
	Если ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.АвансовыйОтчет")
		ИЛИ ТипЗнч(ДанныеПечати.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитенту")
		ИЛИ ДанныеПечати.ЧастичнаяОплата Тогда
		
		СуммаКОплатеПоСчету = ДанныеПечати.СуммаДокумента;
		
	Иначе
		
		СуммаКОплатеПоСчету = 0;
		
		ИспользоватьНаборы = Ложь;
		Если ТаблицаТовары.Количество()>0 И ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ТаблицаТовары[0], "ЭтоНабор") Тогда
			ИспользоватьНаборы = Истина;
		КонецЕсли;
		
		Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
			Если Не НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) Тогда 
				СуммаКОплатеПоСчету = СуммаКОплатеПоСчету
					+ СтрокаТовары.Сумма + ?(ДанныеПечати.ЦенаВключаетНДС, 0, СтрокаТовары.СуммаНДС);
			КонецЕсли;
		КонецЦикла;
		
		Если ДанныеПечати.СчетКВозврату Тогда
			СуммаКОплатеПоСчету = СуммаКОплатеПоСчету - ДанныеПечати.СуммаКВозврату;
			Если СуммаКОплатеПоСчету < 0 Тогда
				СуммаКОплатеПоСчету = 0;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СуммаКОплатеПоСчету;
	
КонецФункции

Функция НовыеПараметрыСтрокиЭтапа()
	
	СтруктураСтрокиЭтапа = Новый Структура;
	СтруктураСтрокиЭтапа.Вставить("НомерСтроки", 0);
	СтруктураСтрокиЭтапа.Вставить("ДатаПлатежа", '00010101');
	СтруктураСтрокиЭтапа.Вставить("ПроцентПлатежа", 0);
	СтруктураСтрокиЭтапа.Вставить("СуммаПлатежа", 0);
	СтруктураСтрокиЭтапа.Вставить("ТекстНДС", "");
	СтруктураСтрокиЭтапа.Вставить("ЭтоЗалогЗаТару", Ложь);
	
	Возврат СтруктураСтрокиЭтапа;
	
КонецФункции

Процедура ВывестиQRКод(РеквизитыПлатежа, ДанныеПечати, ОбластьМакета)
	
	РазмерКода = 190;
	
	Если Не РозничныеПродажиЛокализация.ВывестиQRКод(ДанныеПечати, ОбластьМакета.Рисунки.QRКод.Картинка, РазмерКода) Тогда
		
		QRСтрока = "";
		УправлениеПечатьюЛокализация.СформироватьСтрокуВФорматеЭлектронныхБанковскихСообщений(QRСтрока, РеквизитыПлатежа);
		Если Не ПустаяСтрока(QRСтрока) Тогда
			
			ДанныеQRКода = ГенерацияШтрихкода.ДанныеQRКода(QRСтрока, 0, РазмерКода);
			
			Если ТипЗнч(ДанныеQRКода) = Тип("ДвоичныеДанные") Тогда
				КартинкаQRКода = Новый Картинка(ДанныеQRКода);
				ОбластьМакета.Рисунки.QRКод.Картинка = КартинкаQRКода;
			Иначе
				Шаблон = Нстр("ru = 'Не удалось сформировать QR-код для документа %1.
					|Технические подробности см. в журнале регистрации.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ДанныеПечати.Ссылка);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОписаниеОрганизации(ДанныеПечати, ИмяОрганизации)
	
	Сведения = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати[ИмяОрганизации], ДанныеПечати.Дата);
	РеквизитыОрганизации = "ПолноеНаименование,ИНН,КПП,ФактическийАдрес,Телефоны,";
	
	Возврат ФормированиеПечатныхФорм.ОписаниеОрганизации(Сведения, РеквизитыОрганизации);
	
КонецФункции

Функция РеквизитыПлатежаQRКод(СтруктураДанныхШапки)
	
	РеквизитыПлатежа = Новый Структура;
	РеквизитыПлатежа.Вставить("ТекстПолучателя", СтруктураДанныхШапки.ПредставлениеПоставщикаДляПлатПоручения);
	РеквизитыПлатежа.Вставить("НомерСчетаПолучателя", СтруктураДанныхШапки.СчетПолучателяПредставление);
	РеквизитыПлатежа.Вставить("НаименованиеБанкаПолучателя", СтруктураДанныхШапки.БанкПолучателяПредставление);
	РеквизитыПлатежа.Вставить("БИКБанкаПолучателя", СтруктураДанныхШапки.БИКБанкаПолучателя);
	РеквизитыПлатежа.Вставить("СчетБанкаПолучателя", СтруктураДанныхШапки.СчетБанкаПолучателяПредставление);
	РеквизитыПлатежа.Вставить("СуммаЧислом");
	РеквизитыПлатежа.Вставить("НазначениеПлатежа", СтруктураДанныхШапки.НазначениеПлатежа);
	РеквизитыПлатежа.Вставить("ИННПолучателя", СтруктураДанныхШапки.ИНН);
	РеквизитыПлатежа.Вставить("КПППолучателя", СтруктураДанныхШапки.КПП);
	РеквизитыПлатежа.Вставить("Ссылка");
	
	Возврат РеквизитыПлатежа
	
КонецФункции

Функция ВыбратьРеквизит(ИспользоватьМеждународный, ЛокальныйРеквизит, МеждународныйРеквизит)
	
	Если ИспользоватьМеждународный Тогда
		
		ВозвращаемоеЗначение = ?(ЗначениеЗаполнено(МеждународныйРеквизит), МеждународныйРеквизит, ЛокальныйРеквизит);
		
	Иначе
		
		ВозвращаемоеЗначение = ЛокальныйРеквизит;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
