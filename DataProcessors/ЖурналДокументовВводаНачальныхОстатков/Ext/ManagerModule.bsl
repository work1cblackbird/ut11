#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает дерево разделов операций ввода остатков
// 
// Параметры:
// 	ПараметрыОтбора - см. описание ИнициализироватьПараметрыОтбораДокументовВводаНачальныхОстатков
// Возвращаемое значение:
// 	 ДеревоЗначений - Дерево значений операций ввода остатков.
//
Функция ИнициализироватьДеревоХозяйственныхОперацийВводаНачальныхОстатков(ПараметрыОтбора = Неопределено) Экспорт
	
	БезОтбораПоОрганизации = Истина;
	ПоВсемВидамУчета              = Истина;
	
	Если ПараметрыОтбора = Неопределено Тогда
		ПараметрыОтбора = ИнициализироватьПараметрыОтбораДокументовВводаНачальныхОстатков();
	Иначе
		
		Если ПараметрыОтбора.Свойство("Организация")
			И ЗначениеЗаполнено(ПараметрыОтбора.Организация) Тогда
			БезОтбораПоОрганизации = Ложь;
		КонецЕсли;
		
		Если БезОтбораПоОрганизации Тогда
			ПараметрыОтбора.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
		КонецЕсли;
		
		Если ПараметрыОтбора.Свойство("ОтборПоВидуУчета")
			И ЗначениеЗаполнено(ПараметрыОтбора.ОтборПоВидуУчета)
			И ПараметрыОтбора.ОтборПоВидуУчета <> "БезОтбора" Тогда
			
			ПоВсемВидамУчета = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ОписаниеРазеделовВводаОстатков = ВводОстатковСерверПовтИсп.ОписаниеРазделовВводаОстатков();
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	СоответствиеРазделаХозОперации.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	СоответствиеРазделаХозОперации.РазделУчета КАК РазделУчета,
		|	СоответствиеРазделаХозОперации.ПояснениеРазделаУчета КАК ПояснениеРазделаУчета,
		|	СоответствиеРазделаХозОперации.ПорядокВДереве КАК ПорядокВДереве,
		|	СоответствиеРазделаХозОперации.ДокументВводаОстатков КАК ДокументВводаОстатков,
		|	СоответствиеРазделаХозОперации.ПорядокВДеревеХозОперации КАК ПорядокВДеревеХозОперации
		|ПОМЕСТИТЬ втСоответствияРазделаХозОперации
		|ИЗ
		|	&ОписаниеРазеделовВводаОстатков КАК СоответствиеРазделаХозОперации
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ХозяйственнаяОперация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РеестрДокументов.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РеестрДокументов.Ссылка) КАК КоличествоДокументов
		|ПОМЕСТИТЬ КоличестваДокументовВводаОстатков
		|ИЗ
		|	РегистрСведений.РеестрДокументов КАК РеестрДокументов
		|ГДЕ
		|	РеестрДокументов.ТипСсылки В(&ОтборПоТипамДокументов)
		|	И РеестрДокументов.ХозяйственнаяОперация В(&ОтборПоТипамОпераций)
		|	И (&ПоВсемОрг
		|			ИЛИ РеестрДокументов.Организация = &Организация)
		|	И (&ПоВсемВидамУчета 
		|			ИЛИ &ОтборПоВидуУчета)
		|
		|СГРУППИРОВАТЬ ПО
		|	РеестрДокументов.ХозяйственнаяОперация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтруктураРазделов.РазделУчета КАК РазделУчета,
		|	СтруктураРазделов.ХозяйственнаяОперация КАК ХозяйственнаяОперацияДокумента,
		|	СтруктураРазделов.ПояснениеРазделаУчета КАК ПояснениеРазделаУчета,
		|	СУММА(КоличестваДокументовВводаОстатков.КоличествоДокументов) КАК КоличествоДокументов,
		|	СтруктураРазделов.ПорядокВДереве КАК ПорядокВДереве,
		|	СтруктураРазделов.ДокументВводаОстатков КАК ДокументВводаОстатков,
		|	СтруктураРазделов.ПорядокВДеревеХозОперации КАК ПорядокВДеревеХозОперации
		|ИЗ
		|	втСоответствияРазделаХозОперации КАК СтруктураРазделов
		|		ЛЕВОЕ СОЕДИНЕНИЕ КоличестваДокументовВводаОстатков КАК КоличестваДокументовВводаОстатков
		|		ПО (КоличестваДокументовВводаОстатков.ХозяйственнаяОперация = СтруктураРазделов.ХозяйственнаяОперация)
		|
		|СГРУППИРОВАТЬ ПО
		|	СтруктураРазделов.РазделУчета,
		|	СтруктураРазделов.ХозяйственнаяОперация,
		|	СтруктураРазделов.ПояснениеРазделаУчета,
		|	СтруктураРазделов.ПорядокВДереве,
		|	СтруктураРазделов.ДокументВводаОстатков,
		|	СтруктураРазделов.ПорядокВДеревеХозОперации
		|	
		|УПОРЯДОЧИТЬ ПО
		|	ПорядокВДереве,
		|	ПорядокВДеревеХозОперации
		|ИТОГИ
		|	СУММА(КоличествоДокументов)
		|ПО
		|	РазделУчета");
	
	ТекстОтборПоВидуУчета = "ВЫБОР";  //@Query-part
	
	СписокВидовОтбораПоРазделамУчета = Обработки.ЖурналДокументовВводаНачальныхОстатков.ИнициализироватьСписокВидовОтбораПоРазделамУчета();
	ДоступныеТипыДокументов          = ОписаниеРазеделовВводаОстатков.ВыгрузитьКолонку("ДокументВводаОстатков");
	
	//Совместимость с предыдущем вводом остатков
	ДоступныеТипыДокументов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Документы.ВводОстатков));
	
	Для Каждого ЭлементОтбора Из СписокВидовОтбораПоРазделамУчета Цикл
		
		ЗначениеЭлементаОтбора = ЭлементОтбора.Значение;
		
		Если ЗначениеЭлементаОтбора = "БезОтбора" Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстОтборПоВидуУчета = ТекстОтборПоВидуУчета + "
			|		КОГДА &ОтборПоВидуУчета = """ + ЗначениеЭлементаОтбора + """
			|			ТОГДА ВЫБОР ";
		
		ПорядковыйНомерПараметра = 0;
		Для Каждого ДоступныйТипДокумента Из ДоступныеТипыДокументов Цикл
			
			ПорядковыйНомерПараметра = ПорядковыйНомерПараметра + 1;
			ДокументВводаОстатков    = ДоступныйТипДокумента;
			ТипДокументаСтрокой      = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументВводаОстатков, "ПолноеИмя");
			МетаданныеДокумента      = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(ДокументВводаОстатков);
			ПараметрСтрокой          = "&ТипСсылки" + ПорядковыйНомерПараметра;
			
			Если ОбщегоНазначения.ЕстьРеквизитОбъекта(ЗначениеЭлементаОтбора, МетаданныеДокумента) Тогда
				ТекстОтборПоВидуУчета = ТекстОтборПоВидуУчета + "
					|				КОГДА РеестрДокументов.ТипСсылки = " + ПараметрСтрокой + "
					|					ТОГДА ВЫРАЗИТЬ(РеестрДокументов.Ссылка КАК " + ТипДокументаСтрокой + ")." + ЗначениеЭлементаОтбора;
			КонецЕсли;
		КонецЦикла;
		
		ТекстОтборПоВидуУчета = ТекстОтборПоВидуУчета + "
			|				ИНАЧЕ ЛОЖЬ
			|			КОНЕЦ";
	КонецЦикла;
	
	ТекстОтборПоВидуУчета = ТекстОтборПоВидуУчета + "
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоВидуУчета", ТекстОтборПоВидуУчета);
	
	ПорядковыйНомерПараметра  = 0;
	Для Каждого ДоступныйТипДокумента Из ДоступныеТипыДокументов Цикл 
		
		ПорядковыйНомерПараметра = ПорядковыйНомерПараметра + 1;
		ДокументВводаОстатков            = ДоступныйТипДокумента;
		ПараметрСтрокой                       = "ТипСсылки" + ПорядковыйНомерПараметра;
		
		Запрос.УстановитьПараметр(ПараметрСтрокой, ДокументВводаОстатков);
		
	КонецЦикла;
	
	ДоступныеХозяйственныеОперации = ОписаниеРазеделовВводаОстатков.ВыгрузитьКолонку("ХозяйственнаяОперация");
	
	Запрос.УстановитьПараметр("ОтборПоТипамДокументов",         ДоступныеТипыДокументов);
	Запрос.УстановитьПараметр("ОтборПоТипамОпераций",           ДоступныеХозяйственныеОперации);
	Запрос.УстановитьПараметр("ОписаниеРазеделовВводаОстатков", ОписаниеРазеделовВводаОстатков);
	Запрос.УстановитьПараметр("ПоВсемОрг",                      БезОтбораПоОрганизации);
	Запрос.УстановитьПараметр("ПоВсемВидамУчета",               ПоВсемВидамУчета);
	Запрос.УстановитьПараметр("Организация",                    ПараметрыОтбора.Организация);
	Запрос.УстановитьПараметр("ОтборПоВидуУчета",               ПараметрыОтбора.ОтборПоВидуУчета);
	Запрос.УстановитьПараметр("БезРаздела",                     НСтр("ru = 'Все документы'"));
	
	ИерархияОперацийВводаОстатков = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Возврат ИерархияОперацийВводаОстатков;
	
КонецФункции

// Параметры отбора документов ввода начальных остатков в дереве документов.
// 
// Возвращаемое значение:
// 	Структура - Описание:
//        * РазделУчета - Строка - Раздел учета ввода остатков
//        * ОтборПоВидуУчета - Строка - Отбор по виду учета (оперативный, управленческий или регламентированный)
//        * Организация - СправочникСсылка.Организации - организация, по которой осуществляется отбор.
//
Функция ИнициализироватьПараметрыОтбораДокументовВводаНачальныхОстатков() Экспорт
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("Организация",      Справочники.Организации.ПустаяСсылка());
	ПараметрыОтбора.Вставить("ОтборПоВидуУчета", "");
	ПараметрыОтбора.Вставить("РазделУчета",      "");
	
	Возврат ПараметрыОтбора;
	
КонецФункции

// Возвращает значения списка видов учета для отбора
// 
// Возвращаемое значение:
// 	СписокЗначений - Значения отборов по виду учета 
Функция ИнициализироватьСписокВидовОтбораПоРазделамУчета() Экспорт
	
	ОтражатьВУУ = Ложь;
	//++ Локализация

	//-- Локализация
	
	СписокВидовОтбора = Новый СписокЗначений();
	СписокВидовОтбора.Добавить("БезОтбора",                 НСтр("ru='Всем видам учета'"));
	СписокВидовОтбора.Добавить("ОтражатьВОперативномУчете", НСтр("ru='Оперативному учету'"));
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет") Тогда
		СписокВидовОтбора.Добавить("ОтражатьВБУиНУ", НСтр("ru='Бухгалтерскому и налоговому учету'"));
	КонецЕсли;
	
	Если ОтражатьВУУ Тогда
		СписокВидовОтбора.Добавить("ОтражатьВУУ", НСтр("ru='Управленческому учету (на едином плане счетов)'"));
	КонецЕсли;
	
	Возврат СписокВидовОтбора;
	
КонецФункции

#КонецОбласти

#КонецЕсли