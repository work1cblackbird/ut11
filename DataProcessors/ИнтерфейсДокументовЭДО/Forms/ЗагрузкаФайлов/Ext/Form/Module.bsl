
#Область ОписаниеПеременных

&НаКлиенте
Перем ДанныеФайла;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СценарийОдинФайл = Параметры.ОписаниеПомещенныхФайлов.Количество() = 1;
	ЗапретитьФормированиеФормализованныхЭДИзФайлов = ПолучитьФункциональнуюОпцию("ЗапретитьФормированиеФормализованныхЭДИзФайлов");
	ИспользуетсяПросмотрPDFДокументов = НастройкиЭДО.ИспользуетсяПросмотрPDFДокументов();
	ДобавитьФайлы(Параметры.ОписаниеПомещенныхФайлов);
	УстановитьВидимостьИДоступность(ЭтотОбъект);
	ЗаполнитьСписокВыборкаОтправителя();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СохранитьДанныеФайла();
	
	Если СценарийОдинФайл Тогда
		Файлы.Очистить();
		Если ДанныеФайла.ЕстьОшибкиВФайле Тогда
			ПоказатьПредупреждение(,
				ИнтерфейсДокументовЭДОКлиентСервер.ТекстСообщенияОбОтсутствииВозможностиЗагрузитьФайлXML());
			Закрыть();
		ИначеЕсли ДанныеФайла.ЕстьНекорректныеСимволы Тогда
			ПроверитьКорректностьИмениФайла();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтправительАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	НайтиИВыделитьОформлением(СведенияОтправителей, Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборОтправителяЗавершить", ЭтотОбъект);
	ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДО.Форма.ВыборОтправителя",,,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца)
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьОшибкаФормированияПредставленияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
		
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьЖурналРегистрации" Тогда
		СтандартнаяОбработка = Ложь;
		ОтборЖурналаРегистрации = Новый Структура;
		ОтборЖурналаРегистрации.Вставить("Событие", ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);
		ЖурналРегистрацииКлиент.ОткрытьЖурналРегистрации(ОтборЖурналаРегистрации, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительОчистка(Элемент, СтандартнаяОбработка)
	
	Организация = Неопределено;
	ИдентификаторОтправителя = Неопределено;
	
	Если СценарийОдинФайл Тогда
		Файлы.Очистить();
	Иначе
		Для Каждого Строка Из Файлы Цикл
			Строка.Получатель = Неопределено;
			Строка.ПредставлениеПолучателя = Неопределено;
			Строка.ИдентификаторПолучателя = Неопределено;
		КонецЦикла;
	КонецЕсли;
	
	УстановитьВидимостьИДоступность(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьИмяФайлаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
		И СценарийОдинФайл Тогда
		ТекущиеДанные = ДанныеФайла;
	ИначеЕсли ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФайловаяСистемаКлиент.ОткрытьФайл(ТекущиеДанные.Хранение,, ТекущиеДанные.ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, ВыборДобавлением, СтандартнаяОбработка)
	ОтправительПриИзмененииСервер(ВыбранноеЗначение);
	УстановитьЗаголовкиФормы(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФайлы

&НаКлиенте
Процедура ФайлыПредставлениеПолучателяАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	НайтиИВыделитьОформлением(СведенияПолучателей, Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = Элементы.ФайлыИмяФайла.Имя Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаменитьФайлЗавершить", ЭтотОбъект);
		ФайловаяСистемаКлиент.ЗагрузитьФайл(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	
	Отказ = Истина;
	
	Если СценарийОдинФайл Тогда
		ОткрытьФормуВыбораПолучателя();
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьФайлЗавершить", ЭтотОбъект);
		ФайловаяСистемаКлиент.ЗагрузитьФайлы(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПриАктивизацииСтроки(Элемент)
	
	Если СценарийОдинФайл
		И СформированоПредставлениеФайла Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
		И СценарийОдинФайл Тогда
		ТекущиеДанные = ДанныеФайла;
	ИначеЕсли ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИдентификаторСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	СформированоПредставлениеФайла = СформированоПредставлениеФайла
		И ТекущийСформированныйФайл = ИдентификаторСтроки;
	ОшибкаПредставленияPDF = Ложь;
	ПодключитьОбработчикОжидания("ОбновитьПредставлениеФайла", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПослеУдаления(Элемент)
	
	ЗаполнитьСписокВыборкаПолучетелей();
	УстановитьВидимостьИДоступность(ЭтотОбъект);
	
	Если Файлы.Количество() = 0
		И Не СценарийОдинФайл Тогда
		ОчиститьПредставлениеФайла(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ФайлыПредставлениеПолучателяПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПредставлениеПолучателя = ПредставлениеПолучателя(
		ТекущиеДанные.Получатель, ТекущиеДанные.ИдентификаторПолучателя, ТекущиеДанные.Договор);
	
	ПредставлениеПолучателяПриИзменении = ТекущиеДанные.ПредставлениеПолучателя;
	ТекущиеДанные.ПредставлениеПолучателя = ПредставлениеПолучателя;
	
	Если СценарийОдинФайл
		И ПредставлениеПолучателяПриИзменении <> ПредставлениеПолучателя
		И ПолучательПрисутствуетВФайлах(ПредставлениеПолучателяПриИзменении, Истина) Тогда
		ТекущиеДанные.ПредставлениеПолучателя = ПредставлениеПолучателя;
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ПредставлениеПолучателя = ПредставлениеПолучателяПриИзменении;
	
	НайденныеСтроки = СведенияПолучателей.НайтиСтроки(
		Новый Структура("Представление", ТекущиеДанные.ПредставлениеПолучателя));
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		Для Каждого Строка Из СведенияПолучателей Цикл
			Если СтрНайти(НРег(Строка.Представление), НРег(ТекущиеДанные.ПредставлениеПолучателя)) > 0 Тогда
				НайденныеСтроки.Добавить(Строка);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если НайденныеСтроки.Количество() = 0 Тогда
		ТекущиеДанные.ПредставлениеПолучателя = Неопределено;
		ТекущиеДанные.ИдентификаторПолучателя = Неопределено;
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ИдентификаторПолучателя = НайденныеСтроки[0].ИдентификаторПолучателя;
	ТекущиеДанные.ПредставлениеПолучателя = НайденныеСтроки[0].Представление;
	ТекущиеДанные.Получатель = НайденныеСтроки[0].Получатель;
	ТекущиеДанные.Договор = НайденныеСтроки[0].Договор;
	
	Если Не ПолучательСоответствуетКонтрагентуВФормализованномДокументе(ТекущиеДанные, ТекущиеДанные.Получатель) Тогда
		ТекущиеДанные.Договор = Неопределено;
		ТекущиеДанные.Получатель = Неопределено;
		ТекущиеДанные.ПредставлениеПолучателя = Неопределено;
		ТекущиеДанные.ИдентификаторПолучателя = Неопределено;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПолучателяВПустыхСтроках();
	УстановитьЗаголовкиФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПредставлениеПолучателяОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	ТекущиеДанные.Получатель = Неопределено;
	ТекущиеДанные.Договор = Неопределено;
	ТекущиеДанные.ПредставлениеПолучателя = Неопределено;
	ТекущиеДанные.ИдентификаторПолучателя = Неопределено;
	
	УстановитьЗаголовкиФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПредставлениеПолучателяНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбораПолучателя(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьФайл(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьФайлЗавершить", ЭтотОбъект);
	ФайловаяСистемаКлиент.ЗагрузитьФайлы(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПолучателя(Команда)
	
	ОткрытьФормуВыбораПолучателя();
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлы(Команда)
	
	Если Не КлючевыеПоляНастройкиЗаполнены() Тогда
		Возврат;
	КонецЕсли;
	
	ТекстОповещения = НСтр("ru='Загрузка файлов'");
	ТекстПояснения = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
		НСтр("ru=';
		|Идет загрузка %1 файла, пожалуйста подождите;
		|;
		|Идет загрузка %1 файлов, пожалуйста подождите;
		|Идет загрузка %1 файлов, пожалуйста подождите;
		|Идет загрузка %1 файлов, пожалуйста подождите'"),
		Файлы.Количество());
	ОповеститьПользователя(ТекстОповещения, ТекстПояснения);
	
	РезультатЗагрузки = ЗагрузитьФайлыСервер();
	Если РезультатЗагрузки.Количество() > 0 Тогда
		Оповестить(ИнтерфейсДокументовЭДОКлиент.ИмяСобытияОбновленияТекущихДелЭДО());
		Закрыть(РезультатЗагрузки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьФайл(Команда)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Файлы.Удалить(ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОтправительПриИзмененииСервер(ВыбранноеЗначение)
	
	НайденныеСтроки = СведенияОтправителей.НайтиСтроки(Новый Структура("Представление", ВыбранноеЗначение));
	Если НайденныеСтроки.Количество() = 0 Тогда
		Для Каждого Строка Из СведенияОтправителей Цикл
			Если СтрНайти(НРег(Строка.Представление), НРег(ВыбранноеЗначение)) > 0 Тогда
				НайденныеСтроки.Добавить(Строка);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		ВыборОтправителяЗавершитьСервер(НайденныеСтроки[0]);
	Иначе
		Отправитель = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВидыДокументовДляОтправки()
	
	ВидыДокументов = Новый Массив();
	Для Каждого СведенияФайла Из Файлы Цикл
		ВидыДокументов.Добавить(СведенияФайла.ВидДокумента);
	КонецЦикла;
	
	Если СценарийОдинФайл Тогда
		ВидыДокументов.Добавить(ВидДокументаДляСценарияОдинФайл);
	КонецЕсли;
	
	Возврат ВидыДокументов;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ШаблонПредставленияБезДоговора()
	
	Возврат "%1 (%2)";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ШаблонПредставленияСДоговором()
	
	Возврат НСтр("ru='%1, Договор: %2 (%3)'");
	
КонецФункции

&НаКлиенте
Процедура СохранитьДанныеФайла()
	
	Если Не СценарийОдинФайл Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = Файлы[0];
	ВидДокументаДляСценарияОдинФайл = ДанныеФайла.ВидДокумента;
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьФормированияПредставленияДокумента()
	
	Если ФормированиеПредставления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПоказатьПредставлениеДанныхДокументаПослеФормирования", ЭтотОбъект);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФормированиеПредставления, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПредставлениеДанныхДокументаПослеФормирования(Результат, Контекст) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФормированиеПредставления = Результат;
	СтрокаФайла = Файлы.НайтиПоИдентификатору(ТекущийСформированныйФайл);
	Если СтрокаФайла = Неопределено
		И СценарийОдинФайл Тогда
		СтрокаФайла = ДанныеФайла;
	КонецЕсли;
	
	ОбновитьПредставлениеДокумента(ЭтотОбъект, СтрокаФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредставлениеФайла()
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
		И СценарийОдинФайл
		И Не СформированоПредставлениеФайла Тогда
		ТекущиеДанные = ДанныеФайла;
	ИначеЕсли ТекущиеДанные = Неопределено
		Или СформированоПредставлениеФайла Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЕстьНекорректныеСимволы
		И Не ИдетКорректировкаИмениФайла Тогда
		ПроверитьКорректностьИмениФайла();
	КонецЕсли;
	
	ИдентификаторСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	ПодготовитьПредставлениеФайла(ИдентификаторСтроки);
	
	Если ФормированиеПредставления <> Неопределено Тогда
		ОжидатьФормированияПредставленияДокумента();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьПредставлениеФайла(Форма)
	
	Форма.ИмяФайла = НСтр("ru = '<отсутствует>'");
	Форма.КартинкаФайла = 0;
	Форма.Элементы.НадписьИмяФайла.Гиперссылка = Ложь;
	Форма.Элементы.НадписьИмяФайла.ЦветТекста = WebЦвета.Кирпичный;
	
	Форма.Элементы.ГруппаОшибка.Видимость = Ложь;
	Форма.Элементы.ГруппаОжидание.Видимость = Ложь;
	Форма.Элементы.ГруппаПредставлениеДокумента.Видимость = Ложь;
	Форма.Элементы.ГруппаПредставлениеPDF.Видимость = Ложь;
	Форма.СформированоПредставлениеФайла = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьПредставлениеФайла(ИдентификаторСтроки)
	
	СтрокаФайла = Файлы.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если СтрокаФайла = Неопределено
		И СценарийОдинФайл Тогда
		СтрокаФайла = ДанныеФайла;
	КонецЕсли;
	
	ОписаниеФайла = Новый Структура;
	Если ЗначениеЗаполнено(СтрокаФайла.Хранение) Тогда
		ОписаниеФайла.Вставить("ИмяФайла", СтрокаФайла.ИмяФайла);
		ОписаниеФайла.Вставить("Расширение", СтрокаФайла.РасширениеФайла);
	Иначе
		ОчиститьПредставлениеФайла(ЭтотОбъект);
		Возврат;
	КонецЕсли;
	
	ИмяФайла = ОписаниеФайла.ИмяФайла;
	КартинкаФайла = РаботаСФайламиБЭДКлиентСервер.ИндексКартинкиПоРасширениюФайла(ОписаниеФайла.Расширение);
	
	Элементы.НадписьИмяФайла.Гиперссылка = Истина;
	Элементы.НадписьИмяФайла.ЦветТекста = ОбщегоНазначенияКлиент.ЦветСтиля("ЦветГиперссылкиБЭД");
	
	Если РаботаСФайламиБЭДКлиентСервер.ЭтоРасширениеФайлаPDF(СтрокаФайла.РасширениеФайла) Тогда
		ПодключитьОбработчикОжидания("СформироватьПредставлениеPDFФайла", 0.1, Истина);
	ИначеЕсли СтрокаФайла.Распознан Тогда
		СформироватьПредставлениеФормализованныхФайлов(
			ИдентификаторСтроки, СтрокаФайла.Хранение, СтрокаФайла.ИмяФайла, СтрокаФайла.РасширениеФайла, СтрокаФайла.ВидДокумента);
	Иначе
		ФормированиеПредставления = Неопределено;
	КонецЕсли;
	
	ОбновитьПредставлениеДокумента(ЭтотОбъект, СтрокаФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПредставлениеPDFФайла()
	
	Если СформированоПредставлениеФайла Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаФайла = Элементы.Файлы.ТекущиеДанные;
	
	Если СтрокаФайла = Неопределено
		И СценарийОдинФайл Тогда
		СтрокаФайла = ДанныеФайла;
	КонецЕсли;
	
	ИдентификаторСтроки = СтрокаФайла.ПолучитьИдентификатор();
	ТекущийСформированныйФайл = ИдентификаторСтроки;
	
	СформироватьПредставлениеPDFФайлаНаСервере(СтрокаФайла.Хранение);
	ОбновитьПредставлениеДокумента(ЭтотОбъект, СтрокаФайла);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПредставлениеPDFФайлаНаСервере(Хранение)
	
	Если Не ИспользуетсяПросмотрPDFДокументов Тогда
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанныеPDF = ПолучитьИзВременногоХранилища(Хранение);
	Попытка
		ТекущийДокументPDF.Прочитать(ДвоичныеДанныеPDF.ОткрытьПотокДляЧтения());
	Исключение
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписатьВЖурналРегистрации(ПодробноеПредставлениеОшибки);
		ОшибкаПредставленияPDF = Истина;
	КонецПопытки;
	
	СформированоПредставлениеФайла = Не ОшибкаПредставленияPDF;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьВЖурналРегистрации(Знач Комментарий, Уровень = Неопределено)
	
	ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(Комментарий, 
		ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами, Уровень);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПредставлениеФормализованныхФайлов(ИдентификаторСтроки, АдресФайла, ИмяФайла, РасширениеФайла, ВидДокумента)
	
	Если СформированоПредставлениеФайла Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийСформированныйФайл = ИдентификаторСтроки;
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайла);
	
	ОписаниеФайла = РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла();
	ОписаниеФайла.ИмяФайла = ИмяФайла;
	ОписаниеФайла.ДвоичныеДанные = ДвоичныеДанныеФайла;
	
	Если НРег(РасширениеФайла) = ".zip" Тогда
		ДанныеМЧД = МашиночитаемыеДоверенности.ДанныеДоверенностиИзФайлаОбмена(ОписаниеФайла);
		Если ФорматыЭДО.ЭтоМЧД(ДанныеМЧД) Тогда
			ДвоичныеДанныеФайла = ДанныеМЧД.ДвоичныеДанные;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	
	ФормированиеПредставления = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
		"ЭлектронныеДокументыЭДО.ПредставлениеДанныхСообщения", 
		ВидДокумента, ДвоичныеДанныеФайла);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредставлениеДокумента(Форма, СтрокаФайла)
	
	Если РаботаСФайламиБЭДКлиентСервер.ЭтоРасширениеФайлаPDF(СтрокаФайла.РасширениеФайла) Тогда
		
		Форма.Элементы.ГруппаПредставлениеДокумента.Видимость = Ложь;
		Если Форма.ИспользуетсяПросмотрPDFДокументов Тогда
			Форма.Элементы.ГруппаОшибка.Видимость = Форма.ОшибкаПредставленияPDF;
			Форма.Элементы.ГруппаОжидание.Видимость = Не Форма.СформированоПредставлениеФайла;
			Форма.Элементы.ГруппаПредставлениеPDF.Видимость = Форма.СформированоПредставлениеФайла;
		Иначе
			Форма.Элементы.ГруппаОшибка.Видимость = Ложь;
			Форма.Элементы.ГруппаОжидание.Видимость = Ложь;
			Форма.Элементы.ГруппаПредставлениеPDF.Видимость = Ложь;
		КонецЕсли;
		
	ИначеЕсли Не СтрокаФайла.Распознан Тогда
		
		Форма.Элементы.ГруппаОшибка.Видимость = Ложь;
		Форма.Элементы.ГруппаОжидание.Видимость = Ложь;
		Форма.Элементы.ГруппаПредставлениеДокумента.Видимость = Ложь;
		Форма.Элементы.ГруппаПредставлениеPDF.Видимость = Ложь;
		Форма.СформированоПредставлениеФайла = Ложь;
		
	ИначеЕсли Форма.ФормированиеПредставления = Неопределено
		ИЛИ Форма.ФормированиеПредставления.Статус = "Ошибка" Тогда
		
		Форма.Элементы.ГруппаОшибка.Видимость = Истина;
		Форма.Элементы.ГруппаОжидание.Видимость = Ложь;
		Форма.Элементы.ГруппаПредставлениеДокумента.Видимость = Ложь;
		Форма.Элементы.ГруппаПредставлениеPDF.Видимость = Ложь;
		Форма.СформированоПредставлениеФайла = Ложь;
		
	ИначеЕсли Форма.ФормированиеПредставления.Статус = "Выполнено" Тогда
		
		РезультатФормирования = ПолучитьИзВременногоХранилища(Форма.ФормированиеПредставления.АдресРезультата);
		Если РезультатФормирования = Неопределено
			ИЛИ РезультатФормирования.ПредставлениеДокумента = Неопределено Тогда
			Форма.Элементы.ГруппаОжидание.Видимость = Ложь;
			Форма.Элементы.ГруппаОшибка.Видимость = Истина;
			Форма.Элементы.ГруппаПредставлениеДокумента.Видимость = Ложь;
			Форма.Элементы.ГруппаПредставлениеPDF.Видимость = Ложь;
			Форма.ФормированиеПредставления = Неопределено;
			Форма.СформированоПредставлениеФайла = Ложь;
			Возврат;
		КонецЕсли;
		
		Форма.ПредставлениеДокумента = РезультатФормирования.ПредставлениеДокумента;
		Форма.ФормированиеПредставления = Неопределено;
		
		Форма.Элементы.ГруппаОшибка.Видимость = Ложь;
		Форма.Элементы.ГруппаОжидание.Видимость = Ложь;
		Форма.Элементы.ГруппаПредставлениеДокумента.Видимость = Истина;
		Форма.Элементы.ГруппаПредставлениеPDF.Видимость = Ложь;
		Форма.СформированоПредставлениеФайла = Истина;
		
	ИначеЕсли Форма.ФормированиеПредставления.Статус = "Выполняется" Тогда
		
		Форма.Элементы.ГруппаОшибка.Видимость = Ложь;
		Форма.Элементы.ГруппаОжидание.Видимость = Истина;
		Форма.Элементы.ГруппаПредставлениеДокумента.Видимость = Ложь;
		Форма.Элементы.ГруппаПредставлениеPDF.Видимость = Ложь;
		Форма.СформированоПредставлениеФайла = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораПолучателя(МножественныйВыбор = Истина)
	
	ВидыДокументов = ВидыДокументовДляОтправки();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МножественныйВыбор", МножественныйВыбор);
	ПараметрыФормы.Вставить("ИдентификаторОтправителя", ИдентификаторОтправителя);
	ПараметрыФормы.Вставить("Отправитель", Организация);
	ПараметрыФормы.Вставить("ВидыДокументов", ВидыДокументов);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьПолучателяЗавершить", ЭтотОбъект, МножественныйВыбор);
	ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДО.Форма.ВыборПолучателя", ПараметрыФормы,,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборОтправителяЗавершить(ДанныеОтправителя, ДополнительныеПараметры) Экспорт
	
	Если ДанныеОтправителя = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыборОтправителяЗавершитьСервер(ДанныеОтправителя);
	УстановитьЗаголовкиФормы(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ВыборОтправителяЗавершитьСервер(ДанныеОтправителя)
	
	Если Организация <> ДанныеОтправителя.Отправитель Тогда
		Если СценарийОдинФайл Тогда
			Файлы.Очистить();
		Иначе
			Для Каждого Строка Из Файлы Цикл
				Строка.Получатель = Неопределено;
				Строка.ПредставлениеПолучателя = Неопределено;
				Строка.ИдентификаторПолучателя = Неопределено;
				Если Не Строка.ЕстьКонтрагентВФормализованномДокументе Тогда
					Строка.Договор = Неопределено;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Организация = ДанныеОтправителя.Отправитель;
	ИдентификаторОтправителя = ДанныеОтправителя.ИдентификаторОтправителя;
	
	ШаблонТекста = "%1
	|(%2)";
	Отправитель = СтрШаблон(ШаблонТекста, Организация, ИдентификаторОтправителя);
	
	Для Каждого Строка Из Файлы Цикл
		Строка.Получатель = Неопределено;
		Строка.ПредставлениеПолучателя = Неопределено;
		Строка.ИдентификаторПолучателя = Неопределено;
	КонецЦикла;
	
	УстановитьВидимостьИДоступность(ЭтотОбъект);
	ЗаполнитьСписокВыборкаПолучетелей();
	ЗаполнитьПолучателяПоФормализованномуДокументу();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыборкаОтправителя()
	
	Элементы.Отправитель.СписокВыбора.Очистить();
	
	РезультатЗапроса = НастройкиОтправкиЭДО.ИдентификаторыОтправителей();
	СведенияОтправителей.Загрузить(РезультатЗапроса.Выгрузить());
	
	Для Каждого СтрокаСведений Из СведенияОтправителей Цикл
		ШаблонТекста = "%1 (%2)";
		Представление = СтрШаблон(ШаблонТекста, СтрокаСведений.Отправитель, СтрокаСведений.ИдентификаторОтправителя);
		
		СтрокаСведений.Представление = Представление;
		Элементы.Отправитель.СписокВыбора.Добавить(Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыборкаПолучетелей()
	
	Элементы.ФайлыПредставлениеПолучателя.СписокВыбора.Очистить();
	
	ВидыДокументов = ВидыДокументовДляОтправки();
	РезультатЗапроса = НастройкиОтправкиЭДО.ИдентификаторыПолучателейОтправителя(
		ИдентификаторОтправителя, Организация, ВидыДокументов);
	СведенияПолучателей.Загрузить(РезультатЗапроса.Выгрузить());
	
	Для Каждого СтрокаСведений Из СведенияПолучателей Цикл
		Представление = ПредставлениеПолучателя(
				СтрокаСведений.Представление,
				СтрокаСведений.ИдентификаторПолучателя,
				СтрокаСведений.ПредставлениеДоговор);
		
		СтрокаСведений.Представление = Представление;
		Элементы.ФайлыПредставлениеПолучателя.СписокВыбора.Добавить(Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПолучателяПоФормализованномуДокументу()
	
	Для Каждого СтрокаФайла Из Файлы Цикл
		
		Если Не СтрокаФайла.ЕстьКонтрагентВФормализованномДокументе Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеФайла = РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла();
		ОписаниеФайла.ДвоичныеДанные = ПолучитьИзВременногоХранилища(СтрокаФайла.Хранение);
		ОписаниеФайла.ИмяФайла = СтрокаФайла.ИмяФайла;
		
		Содержание = ФорматыЭДО.ПрочитатьСодержаниеДокумента(ОписаниеФайла);
		Получатель = ОбщегоНазначенияБЭД.НайтиСсылку("Контрагенты",,
			Новый Структура("ИНН, КПП", Содержание.Получатель.ИНН, Содержание.Получатель.КПП));
		
		НайденныеСтроки = СведенияПолучателей.НайтиСтроки(Новый Структура("Получатель", Получатель));
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаФайла.Получатель = Получатель;
			Представление = ПредставлениеПолучателя(
				Получатель,
				НайденныеСтроки[0].ИдентификаторПолучателя,
				НайденныеСтроки[0].Договор);
			СтрокаФайла.Представление = Представление;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция КлючевыеПоляНастройкиЗаполнены()
	
	ЗаполненаОрганизация = ЗначениеЗаполнено(Организация);
	ЕстьОшибкиВНастройкахОтправки = Ложь;
	ЕстьНезаполненныеПолучатели = Ложь;
	ЕстьСуществующиеДокументы = Ложь;
	ЕстьНекорректныеСимволы = Ложь;
	ЕстьОшибкиВФайлах = Ложь;
	ЕстьФайлыДляОтправки = Истина;
	
	Если Не ЗаполненаОрганизация Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Поле ""Отправитель"" не заполнено'"),, "Отправитель");
	КонецЕсли;
	
	Если Файлы.Количество() = 0 Тогда
		ЕстьФайлыДляОтправки = Ложь;
		ШаблонСообщенияПоФайлам = НСтр("ru='Нет файлов для отправки'");
		ШаблонСообщенияПоПолучателям = НСтр("ru='Нет получателей для отправки'");
		ОбщегоНазначения.СообщитьПользователю(
			?(СценарийОдинФайл, ШаблонСообщенияПоПолучателям, ШаблонСообщенияПоФайлам),,, "Файлы");
	КонецЕсли;
	
	Для Счетчик = 0 По Файлы.Количество() - 1 Цикл
		
		Если Не ЗначениеЗаполнено(Файлы[Счетчик].Получатель) Тогда
			ЕстьНезаполненныеПолучатели = Истина;
			ШаблонПути = "Файлы[%1].ПредставлениеПолучателя";
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru='Поле ""Получатель"" не заполнено'"),, СтрШаблон(ШаблонПути, Счетчик));
		КонецЕсли;
		
		Если Файлы[Счетчик].ЕстьНекорректныеСимволы Тогда
			ЕстьНекорректныеСимволы = Истина;
			ШаблонПути = "Файлы[%1].ИмяФайла";
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru='Поле ""Имя файла"" имеет некорректные символы'"),, СтрШаблон(ШаблонПути, Счетчик));
		КонецЕсли;
		
		СуществующийДокумент =
		ЭлектронныеДокументыЭДО.ИсходящийДокументПоИдентификаторуФайла(
			Новый Структура("Хранение, Имя", Файлы[Счетчик].Хранение, Файлы[Счетчик].ПолноеИмя));
			
		Если ЗначениеЗаполнено(СуществующийДокумент) Тогда
			ЕстьСуществующиеДокументы = Истина;
			ШаблонПути = "Файлы[%1].ИмяФайла";
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru='Файл уже имеет существующий формализованный документ'"),, СтрШаблон(ШаблонПути, Счетчик));
		КонецЕсли;
		
		Если Файлы[Счетчик].ЕстьОшибкиВФайле Тогда
			ЕстьОшибкиВФайлах = Истина;
			ШаблонПути = "Файлы[%1].ИмяФайла";
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru='Файл содержит ошибки. Выберите другой файл.'"),, СтрШаблон(ШаблонПути, Счетчик));
		КонецЕсли;
		
		КлючНастройкиОтправки = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки();
		КлючНастройкиОтправки.Отправитель = Организация;
		КлючНастройкиОтправки.Получатель = Файлы[Счетчик].Получатель;
		КлючНастройкиОтправки.Договор = Файлы[Счетчик].Договор;
		КлючНастройкиОтправки.ВидДокумента = Файлы[Счетчик].ВидДокумента;
		
		НастройкиОтправки = НастройкиОтправкиЭДОСлужебныйПовтИспНаВызов.НастройкиОтправки(КлючНастройкиОтправки);
		
		ТекстОшибки = "";
		Если Не ЗначениеЗаполнено(НастройкиОтправки) Тогда
			ТекстОшибки = НСтр("ru='Отсутствуют настройки обмена'");
		ИначеЕсли Не НастройкиОтправки.Формировать Тогда
			ТекстОшибки = НСтр("ru='Формирование вида документа %1 отключено в настройках отправки'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, КлючНастройкиОтправки.ВидДокумента)
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ЕстьОшибкиВНастройкахОтправки = Истина;
			ШаблонПути = "Файлы[%1].ПредставлениеПолучателя";
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,, СтрШаблон(ШаблонПути, Счетчик));
		КонецЕсли;
		
	КонецЦикла;

	Возврат ЗаполненаОрганизация
		И ЕстьФайлыДляОтправки
		И Не ЕстьНезаполненныеПолучатели
		И Не ЕстьНекорректныеСимволы
		И Не ЕстьОшибкиВНастройкахОтправки
		И Не ЕстьСуществующиеДокументы
		И Не ЕстьОшибкиВФайлах;
	
КонецФункции

&НаСервере
Функция ЗагрузитьФайлыСервер()
	
	РезультатЗагрузки = Новый Массив();
	
	КоличествоСтрок = Файлы.Количество() - 1;
	Для Счетчик = 0 По КоличествоСтрок Цикл
		
		СвойствоФайла = Файлы[КоличествоСтрок - Счетчик];
		
		ОписаниеФайла = РаботаСФайламиБЭД.НовоеОписаниеФайла();
		ОписаниеФайла.ДвоичныеДанные = ПолучитьИзВременногоХранилища(СвойствоФайла.Хранение);
		ОписаниеФайла.ИмяФайла = СвойствоФайла.ИмяФайла;
		
		ПараметрыСоздания = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыСозданияДокументаПоФайлу();
		ПараметрыСоздания.Контрагент = СвойствоФайла.Получатель;
		ПараметрыСоздания.Организация = Организация;
		ПараметрыСоздания.ВидДокумента = СвойствоФайла.ВидДокумента;
		ПараметрыСоздания.СуммаДокумента = СвойствоФайла.СуммаДокумента;
		ПараметрыСоздания.Договор = СвойствоФайла.Договор;
		ПараметрыСоздания.ДатаДокумента = СвойствоФайла.ДатаФормализованногоДокумента;
		ПараметрыСоздания.НомерДокумента = СвойствоФайла.НомерФормализованногоДокумента;
		ПараметрыСоздания.СоздатьНомерАвтоматически = Не ЗначениеЗаполнено(ПараметрыСоздания.НомерДокумента);
		
		Если Не ЗначениеЗаполнено(ПараметрыСоздания.ДатаДокумента) Тогда
			ПараметрыСоздания.ДатаДокумента = ТекущаяДатаСеанса();
		КонецЕсли;
		
		Результат = Новый Структура();
		Результат.Вставить("Успех", Ложь);
		Результат.Вставить("ТекстОшибки", "");
		Результат.Вставить("Отправитель", Организация);
		Результат.Вставить("ИдентификаторОтправителя", ИдентификаторОтправителя);
		Результат.Вставить("Получатель", СвойствоФайла.ПредставлениеПолучателя);
		Результат.Вставить("ИдентификаторПолучателя", СвойствоФайла.ИдентификаторПолучателя);
		Результат.Вставить("ИмяФайла", СвойствоФайла.ИмяФайла);
		
		ШаблонОшибки = НСтр("ru='Не удалось создать документ отправителя %1 для получателя %2 по причине: %3'");
		
		РезультатФормирования = Неопределено;
		Попытка
			РезультатФормирования = ЭлектронныеДокументыЭДО.СоздатьДокументПоФайлу(ПараметрыСоздания, ОписаниеФайла);
		Исключение
			ПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(
				СтрШаблон(ШаблонОшибки,ИдентификаторОтправителя, СвойствоФайла.ИдентификаторПолучателя, ПредставлениеОшибки),
				ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);
			Результат.ТекстОшибки = ПредставлениеОшибки;
		КонецПопытки;
		
		Если РезультатФормирования <> Неопределено
			И Не РезультатФормирования.Успех Тогда
			
			ОтсутствуютНастройки = Ложь;
			ОтсутствуютПодписанты = Ложь;
			ФормированиеЗапрещено = Ложь;
			ПревышаемыеОграниченияОбъемаПакетаДокументов = Неопределено;
			Для Каждого СтрокаОшибка Из РезультатФормирования.Ошибки Цикл
				ОтсутствуютНастройки = СтрокаОшибка.ОтсутствуютНастройки;
				ОтсутствуютПодписанты = СтрокаОшибка.ОтсутствуютПодписанты;
				ФормированиеЗапрещено = СтрокаОшибка.ФормированиеЗапрещено;
				ПревышаемыеОграниченияОбъемаПакетаДокументов = СтрокаОшибка.ПревышаемыеОграниченияОбъемаПакетаДокументов;
			КонецЦикла;
			
			ТекстОшибки = "";
			Если ОтсутствуютНастройки Тогда
				ТекстОшибки = НСтр("ru='Отсутствуют настройки обмена'");
			ИначеЕсли ОтсутствуютПодписанты Тогда
				ТекстОшибки = НСтр("ru='Отсутствуют подписанты'");
				Если Не ЗначениеЗаполнено(ПараметрыСоздания.МаршрутПодписания) Тогда 
					ТекстОшибки = НСтр("ru='Не удалось создать документ с видом %1. 
						|В настройках отправки, для документов с видом %1 не указан маршрут подписания, укажите маршрут и повторите попытку.'");
					ТекстОшибки = СтрШаблон(ТекстОшибки, СвойствоФайла.ВидДокумента);
				КонецЕсли;
			ИначеЕсли ФормированиеЗапрещено Тогда
				ТекстОшибки = НСтр("ru='Формирование вида документа %1 отключено в настройках отправки'");
				ТекстОшибки = СтрШаблон(ТекстОшибки, СвойствоФайла.ВидДокумента)
			ИначеЕсли ПревышаемыеОграниченияОбъемаПакетаДокументов <> Неопределено Тогда
				ТекстОшибки =
					ПакетыДокументовЭДО.ТекстОПревышенииМаксимальногоРазмераПакетаПриСозданииДокумента(
						ПревышаемыеОграниченияОбъемаПакетаДокументов);
			КонецЕсли;
			ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(
				СтрШаблон(ШаблонОшибки, ИдентификаторОтправителя, СвойствоФайла.ИдентификаторПолучателя, ТекстОшибки),
				ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);
			
			Результат.ТекстОшибки = ТекстОшибки;
			
		Иначе
			Результат.Успех = Истина
		КонецЕсли;
		
		РезультатЗагрузки.Добавить(Результат);
		
	КонецЦикла;
	
	Возврат РезультатЗагрузки;
	
КонецФункции

&НаКлиенте
Процедура ОповеститьПользователя(ТекстОповещения, ТекстПояснения)
	
	ПоказатьОповещениеПользователя(ТекстОповещения,, ТекстПояснения,
		БиблиотекаКартинок.Информация32, СтатусОповещенияПользователя.Важное);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПолучателяЗавершить(Получатели, МножественныйВыбор) Экспорт
	
	Если Получатели = Неопределено
		Или Получатели.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если МножественныйВыбор Тогда
		ДобавитьПолучателейВСписокФайлов(Получатели);
	Иначе
		Если ПолучательСоответствуетКонтрагентуВФормализованномДокументе(ТекущиеДанные, Получатели[0].Получатель) Тогда
			ЗаполнитьПолучателяВТекущейСтроке(Получатели[0]);
			ЗаполнитьПолучателяВПустыхСтроках();
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимостьИДоступность(ЭтотОбъект);
	
КонецПроцедуры



&НаКлиенте
Функция ПолучательСоответствуетКонтрагентуВФормализованномДокументе(ПроверяемаяСтрока, Получатель)
	
	Если ПроверяемаяСтрока.ЕстьКонтрагентВФормализованномДокументе
		И ПроверяемаяСтрока.КонтрагентВФормализованномДокументе <> Получатель Тогда
		ШаблонСообщения = НСтр("ru = 'Получатель %1 не соответствует контрагенту в формализованном документе'");
		ПоказатьПредупреждение(, СтрШаблон(ШаблонСообщения, Получатель));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ПолучательПрисутствуетВФайлах(ПредставлениеПолучателя, Оповещать = Ложь)
	
	НайденныйПолучатель = Файлы.НайтиСтроки(
		Новый Структура("ПредставлениеПолучателя", ПредставлениеПолучателя));
	
	Если Оповещать И НайденныйПолучатель.Количество() > 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Получатель уже присутствует в списке'"));
	КонецЕсли;
	
	Возврат НайденныйПолучатель.Количество() > 0;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСтрокуПолучателем(ТекущаяСтрока, ДанныеПолучателя)
	
	ТекущаяСтрока.Договор = ДанныеПолучателя.Договор;
	ТекущаяСтрока.Получатель = ДанныеПолучателя.Получатель;
	ТекущаяСтрока.ИдентификаторПолучателя = ДанныеПолучателя.ИдентификаторПолучателя;
	
	ПредставлениеПолучателя = ПредставлениеПолучателя(
		ТекущаяСтрока.Получатель,
		ТекущаяСтрока.ИдентификаторПолучателя,
		ТекущаяСтрока.Договор);
	
	ТекущаяСтрока.ПредставлениеПолучателя = ПредставлениеПолучателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеПолучателя(Получатель, ИдентификаторПолучателя, Договор)
	
	Если ЗначениеЗаполнено(Договор) Тогда
		ШаблонПредставления = ШаблонПредставленияСДоговором();
		ПредставлениеПолучателя = СтрШаблон(ШаблонПредставления, Получатель, Договор, ИдентификаторПолучателя);
	Иначе
		ШаблонПредставления = ШаблонПредставленияБезДоговора();
		ПредставлениеПолучателя = СтрШаблон(ШаблонПредставления, Получатель, ИдентификаторПолучателя);
	КонецЕсли;
	
	Возврат ПредставлениеПолучателя;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПолучателяВТекущейСтроке(ДанныеПолучателя)
	
	ПредставлениеПолучателя = ПредставлениеПолучателя(
		ДанныеПолучателя.Получатель,
		ДанныеПолучателя.ИдентификаторПолучателя,
		ДанныеПолучателя.Договор);
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	
	Если СценарийОдинФайл
		И ТекущиеДанные.ПредставлениеПолучателя <> ПредставлениеПолучателя
		И ПолучательПрисутствуетВФайлах(ПредставлениеПолучателя, Истина) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	ЗаполнитьСтрокуПолучателем(ТекущиеДанные, ДанныеПолучателя);
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗаполнитьПолучателяВПустыхСтроках()

	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки = Файлы.НайтиСтроки(Новый Структура("Получатель", ПустойПолучатель));
	Если НайденныеСтроки.Количество() = 0 Тогда
		УстановитьЗаголовкиФормы(ЭтотОбъект);
		Возврат;
	КонецЕсли;
	
	Если СценарийОдинФайл Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Ждать ВопросАсинх(НСтр("ru = 'Заполнить данным получателем остальные пустые строки?'"),
		РежимДиалогаВопрос.ДаНет);
	Если Результат = Неопределено Или Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из Файлы Цикл
		Если ЗначениеЗаполнено(Строка.Получатель)
			Или Строка.ЕстьКонтрагентВФормализованномДокументе
			И ТекущиеДанные.Получатель <> Строка.КонтрагентВФормализованномДокументе Тогда
			Продолжить;
		КонецЕсли;
		Строка.Договор = ТекущиеДанные.Договор;
		Строка.Получатель = ТекущиеДанные.Получатель;
		Строка.ИдентификаторПолучателя = ТекущиеДанные.ИдентификаторПолучателя;
		Строка.ПредставлениеПолучателя = ТекущиеДанные.ПредставлениеПолучателя;
	КонецЦикла;
	УстановитьЗаголовкиФормы(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПолучателейВСписокФайлов(Получатели)
	
	Для Каждого ДанныеПолучателя Из Получатели Цикл
		
		Представление = ПредставлениеПолучателя(
			ДанныеПолучателя.Получатель,
			ДанныеПолучателя.ИдентификаторПолучателя,
			ДанныеПолучателя.Договор);
		
		Если ПолучательПрисутствуетВФайлах(Представление)
			Или Не ПолучательСоответствуетКонтрагентуВФормализованномДокументе(ДанныеФайла, ДанныеПолучателя.Получатель) Тогда
			Продолжить;
		КонецЕсли;
		
		НезаполненныеСтроки = Файлы.НайтиСтроки(Новый Структура("ИдентификаторПолучателя", ""));
		Если НезаполненныеСтроки.Количество() > 0 Тогда
			Строка = НезаполненныеСтроки[0];
		Иначе
			Строка = Файлы.Добавить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Строка, ДанныеФайла);
		ЗаполнитьСтрокуПолучателем(Строка, ДанныеПолучателя);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДанныеФайлаПоФормализованномуДокументу(ИдентификаторСтроки)
	
	СтрокаФайла = Файлы.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ОписаниеФайла = РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла();
	ОписаниеФайла.ДвоичныеДанные = ПолучитьИзВременногоХранилища(СтрокаФайла.Хранение);
	ОписаниеФайла.ИмяФайла = СтрокаФайла.ИмяФайла;
	
	СтрокаФайла.ТипДокумента = Перечисления.ТипыДокументовЭДО.Прочее;
	СтрокаФайла.ВидДокумента = ИнтерфейсДокументовЭДО.ВидДокументаПоТипу(СтрокаФайла.ТипДокумента);
	
	Содержание = ФорматыЭДО.ПрочитатьСодержаниеДокумента(ОписаниеФайла);
	Если Содержание = Неопределено
		Или Содержание.ТипДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗапретитьФормированиеФормализованныхЭДИзФайлов
		И Не Содержание.ТипДокумента = Перечисления.ТипыДокументовЭДО.МашиночитаемаяДоверенность Тогда
		Возврат;
	КонецЕсли;
	
	Если ФорматыЭДО_ФНС.ЭтоПространствоИменМЧД(Содержание.Формат) Тогда
		СтрокаФайла.ТипДокумента = Перечисления.ТипыДокументовЭДО.МашиночитаемаяДоверенность;
		СтрокаФайла.ВидДокумента = ИнтерфейсДокументовЭДО.ВидДокументаПоТипу(СтрокаФайла.ТипДокумента);
		СтрокаФайла.Распознан = Истина;
	КонецЕсли;
	
	Если Не ЭлектронныеДокументыЭДО.ТипДокументаПоддерживаетЗагрузкуИзФайлаВФормализованномВиде(Содержание.ТипДокумента) Тогда
		Возврат;
	КонецЕсли;
	ОписаниеОшибки = "";
	НастройкаОтправки = Неопределено;
	Если Содержание.ТипРегламента <> Перечисления.ТипыРегламентовЭДО.Неформализованный 
		Или Содержание.ТипДокумента = Перечисления.ТипыДокументовЭДО.АктОРасхождениях Тогда
		
		НастройкаОтправки = ФорматыЭДО.ИдентификаторыДатаНомерДокументаПоДаннымФайла(ОписаниеФайла, ОписаниеОшибки);
		Если НастройкаОтправки = Неопределено Тогда
			СтрокаФайла.ЕстьОшибкиВФайле = ЗначениеЗаполнено(ОписаниеОшибки);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Если НастройкаОтправки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаФайла.ВидДокумента = ИнтерфейсДокументовЭДО.ВидДокументаПоТипу(Содержание.ТипДокумента);
	
	НастройкиОбмена = НастройкиОтправкиЭДО.НастройкиОбменаПоИдентификаторам(СтрокаФайла.ВидДокумента,
			НастройкаОтправки.ИдентификаторОрганизации, НастройкаОтправки.ИдентификаторКонтрагента);
	
	Если НастройкиОбмена = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Организация = НастройкиОбмена.Организация;
	ИдентификаторОтправителя = НастройкиОбмена.ИдентификаторОрганизации;
	ВидДокументаДляСценарияОдинФайл = СтрокаФайла.ВидДокумента;
	ШаблонТекста = "%1
					|(%2)";
	Отправитель = СтрШаблон(ШаблонТекста, Организация, ИдентификаторОтправителя);
	Если СведенияПолучателей.Количество() = 0 Тогда
		ЗаполнитьСписокВыборкаПолучетелей();
	КонецЕсли;
	Получатель = НастройкиОбмена.Контрагент;
	
	НайденныеСтроки = СведенияПолучателей.НайтиСтроки(Новый Структура("Получатель", Получатель));
	Если НайденныеСтроки.Количество() > 0 Тогда
		СтрокаФайла.Получатель = Получатель;
		ПредставлениеПолучателя = ПредставлениеПолучателя(
			Получатель,
			НайденныеСтроки[0].ИдентификаторПолучателя,
			НайденныеСтроки[0].Договор);
		СтрокаФайла.ПредставлениеПолучателя = ПредставлениеПолучателя;
	КонецЕсли;
	
	Подписант = ФорматыЭДО.СведенияОПодписанте(ОписаниеФайла, ОписаниеОшибки);
	Если Не ФорматыЭДО.ПодписантЗаполнен(Подписант, Организация, ОписаниеОшибки)
		Или Не ФорматыЭДО.ВУчетнойЗаписиЕстьСертификатПодписанта(Подписант, ОписаниеОшибки) Тогда
		ФорматыЭДО.СброситьСведенияОПодписанте(ОписаниеФайла);
		ПоместитьВоВременноеХранилище(ОписаниеФайла.ДвоичныеДанные, СтрокаФайла.Хранение); 
	КонецЕсли;
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ШаблонОписанияОшибки = СтрШаблон(
		НСтр("ru = '%1 Файл %2'"), ОписаниеОшибки, ОписаниеФайла.ИмяФайла);
		ОбщегоНазначения.СообщитьПользователю(ШаблонОписанияОшибки);
	КонецЕсли;
	
	СтрокаФайла.ТипДокумента = Содержание.ТипДокумента;
	СтрокаФайла.КонтрагентВФормализованномДокументе = Получатель;
	СтрокаФайла.НомерФормализованногоДокумента = Содержание.НомерДокумента;
	СтрокаФайла.ДатаФормализованногоДокумента = Содержание.ДатаДокумента;
	СтрокаФайла.СуммаДокумента = Содержание.СуммаДокумента;
	СтрокаФайла.ЕстьКонтрагентВФормализованномДокументе = ЗначениеЗаполнено(Содержание.Получатель.ИНН);
	СтрокаФайла.Распознан = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьФайл(ИдентификаторСтроки)
	
	УстановитьЗаголовкиФормы(ЭтотОбъект);
	ДанныеФайлаПоФормализованномуДокументу(ИдентификаторСтроки);
	ПодготовитьПредставлениеФайла(ИдентификаторСтроки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьИДоступность(Форма)
	
	Форма.Элементы.ДобавитьПолучателя.Видимость = Форма.СценарийОдинФайл;
	Форма.Элементы.ФайлыИмяФайла.Видимость = Не Форма.СценарийОдинФайл;
	Форма.Элементы.ДобавитьФайл.Видимость = Не Форма.СценарийОдинФайл;
	Форма.Элементы.Файлы.Шапка = Не Форма.СценарийОдинФайл;
	
	Форма.Элементы.ДобавитьПолучателя.Доступность = ЗначениеЗаполнено(Форма.Организация);
	Форма.Элементы.ФайлыПредставлениеПолучателя.Доступность = ЗначениеЗаполнено(Форма.Организация);
	
	УстановитьЗаголовкиФормы(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиФормы(Форма)
	
	Если Форма.СценарийОдинФайл Тогда
		Форма.Элементы.ДекорацияЗаголовок.Заголовок = НСтр("ru = 'Получатели:'");
	Иначе
		Форма.Элементы.ДекорацияЗаголовок.Заголовок = НСтр("ru = 'Файлы:'");
	КонецЕсли;
	
	ШаблонЗаголовкаФайл = НСтр("ru = 'Файлы (%1)'");
	ШаблонЗаголовкаФайл = СтрШаблон(ШаблонЗаголовкаФайл, Форма.Файлы.Количество());
	
	Форма.Элементы.ФайлыИмяФайла.Заголовок = ШаблонЗаголовкаФайл;
	
	НайденныеСтроки = Форма.Файлы.НайтиСтроки(Новый Структура("Получатель", Форма.ПустойПолучатель));
	
	ШаблонЗаголовкаПолучатель = НСтр("ru = 'Получатели (%1 из %2)'");
	ШаблонЗаголовкаПолучатель = СтрШаблон(ШаблонЗаголовкаПолучатель,
		Форма.Файлы.Количество() - НайденныеСтроки.Количество(),
		Форма.Файлы.Количество());
	
	Форма.Элементы.ФайлыПредставлениеПолучателя.Заголовок = ШаблонЗаголовкаПолучатель;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьФайлы(ОписаниеПомещенныхФайлов)
	
	Для Каждого Строка Из ОписаниеПомещенныхФайлов Цикл
		
		НоваяСтрока = Файлы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		СтруктураИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(Строка.ИмяФайла);
		НоваяСтрока.РасширениеФайла = СтруктураИмениФайла.Расширение;
		
		ДанныеФайлаПоФормализованномуДокументу(НоваяСтрока.ПолучитьИдентификатор());
		
		РезультатПроверки = РаботаСФайламиБЭДКлиентСервер.ПроверитьИмяФайлаСУчетомКодировки(Строка.ИмяФайла);
		НоваяСтрока.ЕстьНекорректныеСимволы = РезультатПроверки.ИмеютсяНекорректныеСимволы;
		НоваяСтрока.ИмяФайла = НоваяСтрока.ИмяФайла;
		Если Не НоваяСтрока.ЕстьНекорректныеСимволы Тогда
			НоваяСтрока.ИмяФайла = 
				ПреобразоватьИмяФайлаСУчетомТранслитерации(РезультатПроверки.ИмяФайлаПослеКорректировки);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьФайлЗавершить(ОписаниеПомещенныхФайлов, ДополнительныеПараметры) Экспорт
	
	Если ОписаниеПомещенныхФайлов = Неопределено
		И СценарийОдинФайл Тогда
		Закрыть();
		Возврат;
	ИначеЕсли ОписаниеПомещенныхФайлов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
		И СценарийОдинФайл Тогда
		ТекущиеДанные = Файлы.Добавить();
	ИначеЕсли ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Распознан = Неопределено;
	ТекущиеДанные.ВидДокумента = Неопределено;
	ТекущиеДанные.ТипДокумента = Неопределено;
	ТекущиеДанные.СуммаДокумента = Неопределено;
	ТекущиеДанные.ЕстьОшибкиВФайле = Неопределено;
	ТекущиеДанные.ЕстьНекорректныеСимволы = Неопределено;
	ТекущиеДанные.ДатаФормализованногоДокумента = Неопределено;
	ТекущиеДанные.НомерФормализованногоДокумента = Неопределено;
	ТекущиеДанные.КонтрагентВФормализованномДокументе = Неопределено;
	ТекущиеДанные.ЕстьКонтрагентВФормализованномДокументе = Неопределено;
	ТекущиеДанные.Хранение = ОписаниеПомещенныхФайлов.Хранение;
	
	ИдентификаторСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	
	СтруктураИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ОписаниеПомещенныхФайлов.Имя);
	ТекущиеДанные.РасширениеФайла = СтруктураИмениФайла.Расширение;
	ТекущиеДанные.ИмяФайла = СтруктураИмениФайла.Имя;
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураИмениФайла);
	
	Если СценарийОдинФайл Тогда
		ЗаполнитьЗначенияСвойств(ДанныеФайла, ТекущиеДанные);
	КонецЕсли;
	
	ПроверитьКорректностьИмениФайла();
	ОбработатьФайл(ИдентификаторСтроки);
	ЗаполнитьСписокВыборкаПолучетелей();
	
	Если СценарийОдинФайл Тогда
		СохранитьДанныеФайла();
		Файлы.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлЗавершить(ОписаниеПомещенныхФайлов, ДополнительныеПараметры) Экспорт
	
	Если ОписаниеПомещенныхФайлов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьФайлы(ОписаниеПомещенныхФайлов);
	ПроверитьКорректностьИмениФайла();
	ЗаполнитьСписокВыборкаПолучетелей();
	УстановитьВидимостьИДоступность(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКорректностьИмениФайла()
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
		И СценарийОдинФайл Тогда
		ТекущиеДанные = ДанныеФайла;
	ИначеЕсли ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдетКорректировкаИмениФайла = Истина;
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПроверитьКорректностьИмениФайлаЗавершение", ЭтотОбъект);
	РаботаСФайламиБЭДКлиент.СкорректироватьИмяФайлаСУчетомКодировки(ОповещениеОЗавершении, ТекущиеДанные.ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКорректностьИмениФайлаЗавершение(ИмяФайла, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	
	Если ИмяФайла = Неопределено
		И СценарийОдинФайл Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаменитьФайлЗавершить", ЭтотОбъект);
		ФайловаяСистемаКлиент.ЗагрузитьФайл(ОписаниеОповещения);
		Возврат;
	ИначеЕсли ИмяФайла = Неопределено Тогда
		ИдетКорректировкаИмениФайла = Ложь;
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущиеДанные.ЕстьНекорректныеСимволы = Истина;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено
		И СценарийОдинФайл Тогда
		ТекущиеДанные = ДанныеФайла;
	ИначеЕсли ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки = Файлы.НайтиСтроки(Новый Структура("ИмяФайла", ТекущиеДанные.ИмяФайла));
	ИмяФайла = ПреобразоватьИмяФайлаСУчетомТранслитерации(ИмяФайла);
	Для Каждого Строка Из НайденныеСтроки Цикл
		Если Строка.ИмяФайла = ИмяФайла Тогда
			Продолжить;
		КонецЕсли;
		Строка.ИмяФайла = ИмяФайла;
		Строка.ЕстьНекорректныеСимволы = Ложь;
	КонецЦикла;
	
	Если СценарийОдинФайл Тогда
		ДанныеФайла.ИмяФайла = ИмяФайла;
		ДанныеФайла.ЕстьНекорректныеСимволы = Ложь;
	КонецЕсли;
	
	ИдетКорректировкаИмениФайла = Ложь;
	ТекущийСформированныйФайл = Неопределено;
	СформированоПредставлениеФайла = Ложь;
	ОбновитьПредставлениеФайла();
	
КонецПроцедуры

&НаСервере
Функция ПреобразоватьИмяФайлаСУчетомТранслитерации(ИмяФайла)
	
	Возврат РаботаСФайламиБЭД.ПреобразоватьИмяФайлаСУчетомТранслитерации(ИмяФайла, Ложь);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура НайтиИВыделитьОформлением(Сведения, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = Новый СписокЗначений();
	Для Каждого СтрокаСписка Из Сведения Цикл
		ВыделениеСФорматированием =  СтрНайтиИВыделитьОформлением(СтрокаСписка.Представление, Текст);
		Если ВыделениеСФорматированием <> Неопределено Тогда
			ДанныеВыбора.Добавить(СтрокаСписка.Представление, ВыделениеСФорматированием);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
