
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
				
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(
		"РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам", ЭтотОбъект);
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(
		"РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами", ЭтотОбъект);
	
	НавигационнаяСсылка = "e1cib/app/" + ИмяФормы;
	
	ТекущийРаздел = "ВходящиеЭлектронныеДокументы";
		
	ЕстьОтборПоНепрочитанным = Ложь;
	
	ПакетноеОтображение = Истина;
	
	ПустойКонтрагент = Метаданные.ОпределяемыеТипы.КонтрагентБЭД.Тип.ПривестиЗначение();
	ТипыДоговорСКонтрагентомЭДО.ЗагрузитьЗначения(Метаданные.ОпределяемыеТипы.ДоговорСКонтрагентомЭДО.Тип.Типы());
	
	ОтображатьУдаленные = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ИнтерфейсЭДО", 
		"ОтображатьУдаленные", Ложь);
	Элементы.ОтображатьУдаленныеВходящие.Пометка = ОтображатьУдаленные; 
	Элементы.ОтображатьУдаленныеИсходящие.Пометка = ОтображатьУдаленные;
	
	ОтображатьОбластьПредпросмотра = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ИнтерфейсЭДО", 
		"ОтображатьОбластьПредпросмотра", Истина);
	ВключенОбменЭлектроннымиДокументами = НастройкиЭДО.ИспользуетсяОбменЭлектроннымиДокументами();
	Элементы.ГруппаОбластьПросмотра.Видимость = ВключенОбменЭлектроннымиДокументами И ОтображатьОбластьПредпросмотра;
	
	Элементы.Состояние.СписокВыбора.Вставить(0, 
		"ТребуетВнимания", "Требует внимания", , БиблиотекаКартинок.ТребуетВниманияЖелтыйШарБЭД);
	Элементы.СтатусПриглашения.СписокВыбора.Вставить(0, 
		"ТребуетВнимания", "Требует внимания", , БиблиотекаКартинок.ТребуетВниманияЖелтыйШарБЭД);
	
	Если Не НастройкиЭДО.ОтправлятьВходящиеДокументыНаУтверждение() Тогда
		ЗначениеУтвердить = Элементы.Состояние.СписокВыбора.НайтиПоЗначению("Утвердить");	
		Элементы.Состояние.СписокВыбора.Удалить(ЗначениеУтвердить);
	КонецЕсли;
		
	ОтображениеОрганизации();
	
	УстановитьПараметрыСписков();

	КоличествоДокументов();
	
	УстановитьВидимостьКомандФормыПоПравам();
	
	ЗаполнитьКэшФильтровВСписках();
	ЗаполнитьКоличествоДополнительныхФильтров();
	УстановитьФильтрыСписков();
	
	ЗаполнитьДанныеПоИспользованиюЛегкихКарточекДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОтображениеОбластиПросмотра" Тогда			
		
		ОтображатьОбластьПредпросмотра = Параметр;
		Элементы.ГруппаОбластьПросмотра.Видимость = ОтображатьОбластьПредпросмотра;
		
	ИначеЕсли СобытиеОбновитьСписки(ИмяСобытия) Тогда
		
		ОбновитьДинамическийСписокТекущегоРаздела();
	
	ИначеЕсли ИмяСобытия = "ВыполнитьСинхронизацию" Тогда
		
		Активизировать();
		ПолучитьОтправитьОбновить();
	
	ИначеЕсли ИмяСобытия = ЛегкийИнтерфейсДокументовЭДОКлиент.ИмяСобытияИзмененияОбъектовУчетаДокумента()
		И Параметр = ТекущийЭлектронныйДокумент Тогда

		ОбновитьДанныеПослеИзмененияОбъектовУчета();
		
	ИначеЕсли ИмяСобытия = "УстановитьОтправкуПолучениеСОтборомПоОрганизации" Тогда
		
		Элементы.ВыборочныйОбменПоОрганизациямВходящие.Пометка = Параметр;
		Элементы.ВыборочныйОбменПоОрганизациямИсходящие.Пометка = Параметр;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
			
	ТекущиеДанные = Элементы.ВходящиеЭлектронныеДокументы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		ТекущийЭлектронныйДокумент = Элементы.ВходящиеЭлектронныеДокументы.ТекущиеДанные.ЭлектронныйДокумент;
	Иначе
		ТекущийЭлектронныйДокумент = Неопределено;	
	КонецЕсли;
	
	Элементы.ГруппаБыстрыеОтборы.Видимость = Ложь;			
	Элементы.ГруппаОчиститьБыстрыеОтборы.Видимость = Ложь;
	Элементы.КомандаПодписатьОтправить.Видимость = Ложь; 
	
	Если Не ДанныеВосстановленыИзНастроек Тогда
		ЗаполнитьКоличествоДополнительныхФильтров();
	КонецЕсли;
	
	ОбновитьФильтры();
	ВидимостьЭлементовИКоманд();

КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяФормы, "Отборы", КэшФильтровВСписках);
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	ДанныеВосстановленыИзНастроек = Истина;
	ЗаполнитьКоличествоДополнительныхФильтров();
	УстановитьЗаголовокИВидимостьДополнительныхФильтров(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура БоковоеМенюПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПредыдущийРаздел = ТекущийРаздел; 
	
	Если ДанныеСобытия.Element.id = "inbox-button" Тогда
		
		ТекущийЭлемент = Элементы.ВходящиеЭлектронныеДокументы;
		
		Заголовок = НСтр("ru = 'ЭДО: Входящие документы'");
		ТекущийРаздел = "ВходящиеЭлектронныеДокументы";
					
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВходящиеИсходящие; 
		Элементы.СтраницыВходящиеИсходящие.ТекущаяСтраница = Элементы.СтраницаВходящиеЭлектронныеДокументы;
			 
	ИначеЕсли ДанныеСобытия.Element.id = "sent-button" Тогда 
		
		ТекущийЭлемент = Элементы.ИсходящиеЭлектронныеДокументы;
		
		Заголовок = НСтр("ru = 'ЭДО: Исходящие документы'");
		ТекущийРаздел = "ИсходящиеЭлектронныеДокументы";		 
			
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВходящиеИсходящие; 
		Элементы.СтраницыВходящиеИсходящие.ТекущаяСтраница = Элементы.СтраницаИсходящиеЭлектронныеДокументы;
						
	ИначеЕсли ДанныеСобытия.Element.id = "create-button" Тогда
		
		ТекущийЭлемент = Элементы.Сформировать;
		
		Заголовок = НСтр("ru = 'ЭДО: Отправить'");
		ТекущийРаздел = "Сформировать";
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСформировать;
				
	ИначеЕсли ДанныеСобытия.Element.id = "invitation-button" Тогда
		
		ТекущийЭлемент = Элементы.Приглашения;
		
		Заголовок = НСтр("ru = 'ЭДО: Приглашения'");
		ТекущийРаздел = "Приглашения";
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПриглашения;
		
	ИначеЕсли ДанныеСобытия.Element.id = "error-button" Тогда
		
		Заголовок = НСтр("ru = 'ЭДО: Ошибки'");
		ТекущийРаздел = "Ошибки";
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОшибки;
	
	КонецЕсли; 
	
	УстановитьСтраницуОжиданияПредпросмотра(ПредыдущийРаздел);
	УстановитьПараметрыПредпросмотра();
	ОбновитьФильтры();
	ВидимостьЭлементовИКоманд();
	ПодключитьОбработчикОжидания("ОбновитьОбластьПросмотра", 0.1, Истина);

КонецПроцедуры 

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииОтборов();
	ОбновитьОтображениеФильтров();

КонецПроцедуры 

&НаКлиенте
Процедура ТипДокументаПриИзменении(Элемент)
	
	ПриИзмененииОтборов();
	ОбновитьОтображениеФильтров();

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОтборПриИзменении(Элемент)
	
	ПриИзмененииОтборов();
	ОбновитьОтображениеФильтров();

КонецПроцедуры

&НаКлиенте
Процедура СостояниеОтборПриИзменении(Элемент)
		
	ПриИзмененииОтборов();
	ОбновитьОтображениеФильтров();

КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	ПриИзмененииОтборов();
	ОбновитьОтображениеФильтров();

КонецПроцедуры 

&НаКлиенте
Процедура ТекущийДокументТабличныйДокументПередПечатью(Элемент, ДиалогПечати, Отказ)
	
	ВывестиНаПечать();
	Отказ = Истина;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументИнформацияОтправителяВыбор(Элемент, Область, СтандартнаяОбработка)
		
	Если Область.Имя = "ДокументУчета" Тогда
		
		ДанныеСтроки = Элементы[ТекущийРаздел].ТекущиеДанные;
		
		Если ТекущийРаздел = "ИсходящиеЭлектронныеДокументы" Тогда
			
			ПоказатьУчетныйДокумент(ТекущийРаздел);
			Возврат;	
			
		КонецЕсли;
		
		Если ДанныеСтроки.КонтрольОтраженияВУчете = 0 Тогда
			
			ПоказатьСопоставлениеНоменклатуры();
			
		ИначеЕсли ДанныеСтроки.КонтрольОтраженияВУчете = 1 Тогда
			
			ПоказатьРасширенныйПодборДокументовУчета();
			
		Иначе
			
			ПоказатьУчетныйДокумент(ТекущийРаздел);
			
		КонецЕсли;		
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВходящиеЭлектронныеДокументы

&НаКлиенте
Процедура ВходящиеЭлектронныеДокументыПриАктивизацииСтроки(Элемент)
	
	ТекущийРаздел = "ВходящиеЭлектронныеДокументы";
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено
		Или ВключенаГруппировкаСтрок(ТекущиеДанные) Тогда 
		ТекущийИдентификаторПакета = "";
		ТекущийЭлектронныйДокумент = Неопределено;
	ИначеЕсли ТекущиеДанные.ЭлектронныйДокумент = ТекущийЭлектронныйДокумент Тогда
		Возврат;
	Иначе
		ТекущийИдентификаторПакета = ТекущиеДанные.КлючСортировкиПакета;
		ТекущийЭлектронныйДокумент = ТекущиеДанные.ЭлектронныйДокумент;  
	КонецЕсли;
		
	ПодключитьОбработчикОжидания("ОбновитьОбластьПросмотра", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеЭлектронныеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено
		Или ВключенаГруппировкаСтрок(ТекущиеДанные) Тогда 
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.ВходящиеЭлектронныеДокументыОтражениеВУчете Тогда
		
		ДанныеСтроки = Элементы.ВходящиеЭлектронныеДокументы.ТекущиеДанные;
				
		Если ДанныеСтроки.КонтрольОтраженияВУчете = 0 Тогда
			
			ПоказатьСопоставлениеНоменклатуры();
			
		ИначеЕсли ДанныеСтроки.КонтрольОтраженияВУчете = 1 Тогда
			
			ПоказатьРасширенныйПодборДокументовУчета();
			
		Иначе
			
			ПоказатьУчетныйДокумент(ТекущийРаздел);
			
		КонецЕсли;			
		
	Иначе
		
		ОткрытьЭлектронныйДокументДляПросмотра(ТекущиеДанные.ЭлектронныйДокумент);
		
	КонецЕсли;	
 	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВходящиеЭлектронныеДокументыПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	ПриПолученииДанныхСписков(ИмяЭлемента, Настройки, Строки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеЭлектронныеДокументыПриИзменении(Элемент)
	
	КоличествоДокументов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИсходящиеЭлектронныеДокументы

&НаКлиенте
Процедура ИсходящиеЭлектронныеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
		Или ВключенаГруппировкаСтрок(ТекущиеДанные) Тогда 
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.ИсходящиеЭлектронныеДокументыОтражениеВУчете Тогда		
		ПоказатьУчетныйДокумент(ТекущийРаздел);
	Иначе	
		ОткрытьЭлектронныйДокументДляПросмотра(ТекущиеДанные.ЭлектронныйДокумент);	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИсходящиеЭлектронныеДокументыПриАктивизацииСтроки(Элемент)
	
	ТекущийРаздел = "ИсходящиеЭлектронныеДокументы";
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено
		Или ВключенаГруппировкаСтрок(ТекущиеДанные) Тогда 
		ТекущийИдентификаторПакета = "";
		ТекущийЭлектронныйДокумент = Неопределено;
	ИначеЕсли ТекущиеДанные.ЭлектронныйДокумент = ТекущийЭлектронныйДокумент Тогда
		Возврат;
	Иначе
		ТекущийИдентификаторПакета = ТекущиеДанные.КлючСортировкиПакета;
		ТекущийЭлектронныйДокумент = ТекущиеДанные.ЭлектронныйДокумент;  
	КонецЕсли;
		
	ПодключитьОбработчикОжидания("ОбновитьОбластьПросмотра", 0.2, Истина);  
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИсходящиеЭлектронныеДокументыПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
		
	ПриПолученииДанныхСписков(ИмяЭлемента, Настройки, Строки);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходящиеЭлектронныеДокументыПриИзменении(Элемент)
	
	КоличествоДокументов();

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыСформировать

&НаКлиенте
Процедура СформироватьВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьЗначение(, Элемент.ТекущиеДанные.Документ);
	
КонецПроцедуры

#КонецОбласти
 
#Область ОбработчикиСобытийЭлементовТаблицыФормыПриглашения

&НаКлиенте
Процедура ПриглашенияПриАктивизацииСтроки(Элемент)
	УстановитьСтраницуДействийСПриглашением();
КонецПроцедуры 

&НаСервереБезКонтекста
Процедура ПриглашенияПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	КартинкиСостояний = СоответствиеИндексовКартинокСостоянийЭДО();
	
	Для Каждого ТекущаяСтрока Из Строки Цикл
		
		ДанныеСтроки = ТекущаяСтрока.Значение.Данные;
		Если ДанныеСтроки.СтатусПодключения = Перечисления.СтатусыПриглашений.ТребуетсяСогласие
			ИЛИ ДанныеСтроки.СтатусПодключения = Перечисления.СтатусыПриглашений.ТребуетсяОтправить Тогда
			ДанныеСтроки.ИндексКартинкиСостояния = КартинкиСостояний.Получить("ТребуетВнимания");
		Иначе
			ДанныеСтроки.ИндексКартинкиСостояния = КартинкиСостояний.Получить("НеТребуетВнимания");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ВыполнениеДействийПоЭДО

&НаКлиенте
Асинх Процедура Аннулировать(Команда)
	
	ДанныеВыделенныхСтрокРаздела = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, 
		"ЭлектронныйДокумент, ИдентификаторПакета");
		
	Если Не ЗначениеЗаполнено(ДанныеВыделенныхСтрокРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектыДействий = ОбъектыДействий(ДанныеВыделенныхСтрокРаздела);

	ЭтоПакетнаяОбработка = ЗначениеЗаполнено(ОбъектыДействий.ПакетыДокументов);
	Если ЭтоПакетнаяОбработка И Не ВыполнениеДействийПоЭДОДоступноДляПакетов(ОбъектыДействий.ПакетыДокументов) Тогда
		ВидДействия = ЛегкийИнтерфейсДокументовЭДОКлиент.ВидыВыполняемыхДействийСДокументом().Аннулировать;
		ТекстВопроса = ЛегкийИнтерфейсДокументовЭДОКлиент.ТекстВопросаОВыполненииДействияДляДокументаПакета(ВидДействия);
		Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ОставитьДляОбработкиТолькоТекущийДокумент(ОбъектыДействий);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	
	ДополнительныеПараметры.Вставить("ЭлектронныеДокументы", ОбъектыДействий.ЭлектронныеДокументы);
	ДополнительныеПараметры.Вставить("ПакетыДокументов", ОбъектыДействий.ПакетыДокументов);
	
	НаборДействий = Новый Соответствие;	
	ДействияПоЭДОАннулировать = ПредопределенноеЗначение(
			"Перечисление.ДействияПоЭДО.Аннулировать");
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ДействияПоЭДОАннулировать);
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Подписать"));
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ПодготовитьКОтправке"));
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Отправить"));
		
	ДополнительныеПараметры.Вставить("ОповещениеУспешногоЗавершения",
		Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект, НаборДействий));	
		
	ДополнительныеПараметры.Вставить("НаборДействий", НаборДействий);
	ДополнительныеПараметры.Вставить("ОсновноеДействие", ДействияПоЭДОАннулировать);
				
	Обработчик = Новый ОписаниеОповещения("ВыполнитьДействияПоЭДОПослеВводаСтроки", ИнтерфейсДокументовЭДОКлиент, 
		ДополнительныеПараметры);
	
	ДополнительныеПараметры = ОбщегоНазначенияБЭДКлиент.ПараметрыВводаСтроки();
	ДополнительныеПараметры.ЗаголовокФормы = НСтр("ru = 'Укажите причины аннулирования документа'");
	ДополнительныеПараметры.НазваниеКнопкиПоУмолчанию = НСтр("ru = 'Аннулировать'");
	ДополнительныеПараметры.Многострочность = Истина;
	ДополнительныеПараметры.Обязательность = Истина;
	ДополнительныеПараметры.КомментарийОбязательностиВвода =
		НСтр("ru = 'Для аннулирования документа необходимо указать причину.'");
	ОбщегоНазначенияБЭДКлиент.ПоказатьВводСтрокиБЭД(Обработчик, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура Утвердить(Команда)  
	
	ДанныеВыделенныхСтрокРаздела = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, 
		"ЭлектронныйДокумент, ИдентификаторПакета");
	
	Если Не ЗначениеЗаполнено(ДанныеВыделенныхСтрокРаздела) Тогда		
		Возврат;
	КонецЕсли;
	
	ОбъектыДействий = ОбъектыДействий(ДанныеВыделенныхСтрокРаздела);
	
	ЭтоПакетнаяОбработка = ЗначениеЗаполнено(ОбъектыДействий.ПакетыДокументов);
	Если ЭтоПакетнаяОбработка И Не ВыполнениеДействийПоЭДОДоступноДляПакетов(ОбъектыДействий.ПакетыДокументов) Тогда
		ВидДействия = ЛегкийИнтерфейсДокументовЭДОКлиент.ВидыВыполняемыхДействийСДокументом().Утвердить;
		ТекстВопроса = ЛегкийИнтерфейсДокументовЭДОКлиент.ТекстВопросаОВыполненииДействияДляДокументаПакета(ВидДействия);
		Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ОставитьДляОбработкиТолькоТекущийДокумент(ОбъектыДействий);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НаборДействий = Новый Соответствие;	
	ДействияПоЭДОУтвердить = ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Утвердить");
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ДействияПоЭДОУтвердить);
	ДействияПоЭДОСформироватьОтвет = ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.СформироватьОтвет");
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ДействияПоЭДОСформироватьОтвет);
	ДействияПоЭДОПодготовитьКОтправке = ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ПодготовитьКОтправке");
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ДействияПоЭДОПодготовитьКОтправке);
	ДействияПоЭДООтправить = ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Отправить");
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ДействияПоЭДООтправить);
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект);
	
	ПараметрыВыполненияДействийПоЭДО = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	ПараметрыВыполненияДействийПоЭДО.НаборДействий = НаборДействий;
	ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ЭлектронныеДокументы = ОбъектыДействий.ЭлектронныеДокументы;
	ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ПакетыДокументов = ОбъектыДействий.ПакетыДокументов;
	
	ИнтерфейсДокументовЭДОКлиент.НачатьВыполнениеДействийПоЭДО(Оповещение, ПараметрыВыполненияДействийПоЭДО);
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗакрытьПринудительно(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	
	Если ТекущийРаздел = "Сформировать" Тогда
		
		Обработчик = Новый ОписаниеОповещения("ВыполнитьОтменуФормированияДокументовПослеВводаСтроки", 
			ЭтотОбъект, ДополнительныеПараметры);
		
		ОбъектыУчета = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, "Документ");
		ДополнительныеПараметры.Вставить("ОбъектыУчета", ОбъектыУчета);
		
	Иначе
		
		Обработчик = Новый ОписаниеОповещения("ВыполнитьДействияПоЭДОПослеВводаСтроки", 
			ИнтерфейсДокументовЭДОКлиент, ДополнительныеПараметры);
		
		ДанныеВыделенныхСтрокРаздела = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, 
			"ЭлектронныйДокумент, ИдентификаторПакета");
		ОбъектыДействий = ОбъектыДействий(ДанныеВыделенныхСтрокРаздела);
		
		ЭтоПакетнаяОбработка = ЗначениеЗаполнено(ОбъектыДействий.ПакетыДокументов);
		Если ЭтоПакетнаяОбработка И Не ВыполнениеДействийПоЭДОДоступноДляПакетов(ОбъектыДействий.ПакетыДокументов) Тогда
			ВидДействия = ЛегкийИнтерфейсДокументовЭДОКлиент.ВидыВыполняемыхДействийСДокументом().ЗакрытьПринудительно;
			ТекстВопроса = ЛегкийИнтерфейсДокументовЭДОКлиент.ТекстВопросаОВыполненииДействияДляДокументаПакета(ВидДействия);
			Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				ОставитьДляОбработкиТолькоТекущийДокумент(ОбъектыДействий);
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ДополнительныеПараметры.Вставить("ЭлектронныеДокументы", ОбъектыДействий.ЭлектронныеДокументы);
		ДополнительныеПараметры.Вставить("ПакетыДокументов", ОбъектыДействий.ПакетыДокументов);
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект);
	ДополнительныеПараметры.Вставить("ОповещениеУспешногоЗавершения", ОписаниеОповещения);
	
	НаборДействий = Новый Соответствие;	
	ДействияПоЭДОЗакрытьПринудительно = ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.ЗакрытьПринудительно");
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ДействияПоЭДОЗакрытьПринудительно);
	
	ДополнительныеПараметры.Вставить("НаборДействий", НаборДействий);	
	ДополнительныеПараметры.Вставить("ОсновноеДействие", ДействияПоЭДОЗакрытьПринудительно);
	
	ДополнительныеПараметры = ОбщегоНазначенияБЭДКлиент.ПараметрыВводаСтроки();
	ДополнительныеПараметры.ЗаголовокФормы = НСтр("ru = 'Укажите причину закрытия документооборота'");
	ДополнительныеПараметры.НазваниеКнопкиПоУмолчанию = НСтр("ru = 'Закрыть электронный документ'");
	ДополнительныеПараметры.Многострочность = Истина;
	ДополнительныеПараметры.Обязательность = Истина;
	ДополнительныеПараметры.КомментарийОбязательностиВвода =
		НСтр("ru = 'Для закрытия документооборота по выбранным ЭД необходимо указать причину закрытия.'");
	ОбщегоНазначенияБЭДКлиент.ПоказатьВводСтрокиБЭД(Обработчик, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ОтказатьсяОтПодписания(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект);
	
	ДанныеВыделенныхСтрокРаздела = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, 
		"ЭлектронныйДокумент, ИдентификаторПакета");
		
	Если Не ЗначениеЗаполнено(ДанныеВыделенныхСтрокРаздела) Тогда
		Возврат;
	КонецЕсли;
		
	ОбъектыДействий = ОбъектыДействий(ДанныеВыделенныхСтрокРаздела);	
	
	ЭтоПакетнаяОбработка = ЗначениеЗаполнено(ОбъектыДействий.ПакетыДокументов);
	Если ЭтоПакетнаяОбработка И Не ВыполнениеДействийПоЭДОДоступноДляПакетов(ОбъектыДействий.ПакетыДокументов) Тогда
		ВидДействия = ЛегкийИнтерфейсДокументовЭДОКлиент.ВидыВыполняемыхДействийСДокументом().Отклонить;
		ТекстВопроса = ЛегкийИнтерфейсДокументовЭДОКлиент.ТекстВопросаОВыполненииДействияДляДокументаПакета(ВидДействия);
		Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ОставитьДляОбработкиТолькоТекущийДокумент(ОбъектыДействий);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.СтраницыВходящиеИсходящие.ТекущаяСтраница = Элементы.СтраницаВходящиеЭлектронныеДокументы Тогда
		
		ИнтерфейсДокументовЭДОКлиент.ОтклонитьОбъекты(ОбъектыДействий, ОписаниеОповещения);
		
	Иначе
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ЭлектронныеДокументы", ОбъектыДействий.ЭлектронныеДокументы);
		ДополнительныеПараметры.Вставить("ПакетыДокументов", ОбъектыДействий.ПакетыДокументов);
		ДополнительныеПараметры.Вставить("ОповещениеУспешногоЗавершения", 
			ОписаниеОповещения);
		
		НаборДействий = Новый Соответствие;	
		
		ДействияПоЭДООтклонитьПодписание = ПредопределенноеЗначение(
			"Перечисление.ДействияПоЭДО.ОтклонитьПодписание");
		ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ДействияПоЭДООтклонитьПодписание);
		
		ДополнительныеПараметры.Вставить("НаборДействий", НаборДействий);	
		ДополнительныеПараметры.Вставить("ОсновноеДействие", ДействияПоЭДООтклонитьПодписание);
		
		Обработчик = Новый ОписаниеОповещения("ВыполнитьДействияПоЭДОПослеВводаСтроки", 
			ИнтерфейсДокументовЭДОКлиент, ДополнительныеПараметры);
		
		ДополнительныеПараметры = ОбщегоНазначенияБЭДКлиент.ПараметрыВводаСтроки();
		ДополнительныеПараметры.ЗаголовокФормы = НСтр("ru = 'Укажите причину отклонения документа'");
		ДополнительныеПараметры.НазваниеКнопкиПоУмолчанию = НСтр("ru = 'Отклонить'");
		ДополнительныеПараметры.Многострочность = Истина;
		ДополнительныеПараметры.Обязательность = Истина;
		ДополнительныеПараметры.КомментарийОбязательностиВвода =
		НСтр("ru = 'Для отказа от подписания по выбранным ЭД необходимо указать причину.'");
		ОбщегоНазначенияБЭДКлиент.ПоказатьВводСтрокиБЭД(Обработчик, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подписать(Команда)
	
	Если Элементы.СтраницыВходящиеИсходящие.ТекущаяСтраница = Элементы.СтраницаВходящиеЭлектронныеДокументы Тогда
		
		Если Элементы.ВходящиеЭлектронныеДокументы.ВыделенныеСтроки.Количество() Тогда
			ПодключитьОбработчикОжидания("ВыполнитьКомандаПодписать", 0.1, Истина);
		КонецЕсли;	
		
	Иначе
		
		Если Элементы.ИсходящиеЭлектронныеДокументы.ВыделенныеСтроки.Количество() Тогда
			
			ПодключитьОбработчикОжидания("ВыполнитьКомандаПодписать", 0.1, Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ПринятьАннулирование(Команда)

	ДанныеВыделенныхСтрокРаздела = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, 
		"ЭлектронныйДокумент, ИдентификаторПакета");
		
	Если Не ЗначениеЗаполнено(ДанныеВыделенныхСтрокРаздела) Тогда		
		Возврат;
	КонецЕсли;
	
	ОбъектыДействий = ОбъектыДействий(ДанныеВыделенныхСтрокРаздела);
	
	ЭтоПакетнаяОбработка = ЗначениеЗаполнено(ОбъектыДействий.ПакетыДокументов);
	Если ЭтоПакетнаяОбработка И Не ВыполнениеДействийПоЭДОДоступноДляПакетов(ОбъектыДействий.ПакетыДокументов) Тогда
		ВидДействия = ЛегкийИнтерфейсДокументовЭДОКлиент.ВидыВыполняемыхДействийСДокументом().ПринятьАннулирование;
		ТекстВопроса = ЛегкийИнтерфейсДокументовЭДОКлиент.ТекстВопросаОВыполненииДействияДляДокументаПакета(ВидДействия);
		Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ОставитьДляОбработкиТолькоТекущийДокумент(ОбъектыДействий);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НаборДействий = Новый Соответствие;	
	
	ДействияПоЭДОПринятьАннулирование = ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ПринятьАннулирование");
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ДействияПоЭДОПринятьАннулирование);
	
	ДействияПоЭДОПодписать = ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Подписать");
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ДействияПоЭДОПодписать);
	
	ДействияПоЭДОПодготовитьКОтправке = ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ПодготовитьКОтправке");
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ДействияПоЭДОПодготовитьКОтправке);
	
	ДействияПоЭДООтправить = ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Отправить");
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ДействияПоЭДООтправить);
				
	ПараметрыВыполненияДействийПоЭДО = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	ПараметрыВыполненияДействийПоЭДО.НаборДействий = НаборДействий;
	ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ЭлектронныеДокументы = ОбъектыДействий.ЭлектронныеДокументы;
	ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ПакетыДокументов = ОбъектыДействий.ПакетыДокументов;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеУспешногоЗавершения", 
		Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект, НаборДействий));
	ДополнительныеПараметры.Вставить("ПараметрыВыполненияДействийПоЭДО", ПараметрыВыполненияДействийПоЭДО);
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект, ДополнительныеПараметры);

	ИнтерфейсДокументовЭДОКлиент.НачатьВыполнениеДействийПоЭДО(Оповещение, ПараметрыВыполненияДействийПоЭДО);

КонецПроцедуры

&НаКлиенте
Асинх Процедура ОтклонитьАннулирование(Команда)

	ДанныеВыделенныхСтрокРаздела = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, 
		"ЭлектронныйДокумент, ИдентификаторПакета");
		
	Если Не ЗначениеЗаполнено(ДанныеВыделенныхСтрокРаздела) Тогда		
		Возврат;
	КонецЕсли;
	
	ОбъектыДействий = ОбъектыДействий(ДанныеВыделенныхСтрокРаздела);

	ЭтоПакетнаяОбработка = ЗначениеЗаполнено(ОбъектыДействий.ПакетыДокументов);
	Если ЭтоПакетнаяОбработка И Не ВыполнениеДействийПоЭДОДоступноДляПакетов(ОбъектыДействий.ПакетыДокументов) Тогда
		ВидДействия = ЛегкийИнтерфейсДокументовЭДОКлиент.ВидыВыполняемыхДействийСДокументом().ОтклонитьАннулирование;
		ТекстВопроса = ЛегкийИнтерфейсДокументовЭДОКлиент.ТекстВопросаОВыполненииДействияДляДокументаПакета(ВидДействия);
		Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ОставитьДляОбработкиТолькоТекущийДокумент(ОбъектыДействий);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ДополнительныеПараметры = Новый Структура;
	
	ДополнительныеПараметры.Вставить("ЭлектронныеДокументы", ОбъектыДействий.ЭлектронныеДокументы);
	ДополнительныеПараметры.Вставить("ПакетыДокументов", ОбъектыДействий.ПакетыДокументов);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект);
	ДополнительныеПараметры.Вставить("ОповещениеУспешногоЗавершения", 
		ОписаниеОповещения);
	
	НаборДействий = Новый Соответствие;
		
	ДействияПоЭДООтклонитьАннулирование = ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ОтклонитьАннулирование");
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ДействияПоЭДООтклонитьАннулирование);
	
	ДействияПоЭДОПодписать = ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Подписать");
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ДействияПоЭДОПодписать);
	
	ДействияПоЭДОПодготовитьКОтправке = ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ПодготовитьКОтправке");
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ДействияПоЭДОПодготовитьКОтправке);
	
	ДействияПоЭДООтправить = ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Отправить");
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ДействияПоЭДООтправить);
		
	ДополнительныеПараметры.Вставить("НаборДействий", НаборДействий);	
	ДополнительныеПараметры.Вставить("ОсновноеДействие", ДействияПоЭДООтклонитьАннулирование);
					
	Обработчик = Новый ОписаниеОповещения("ВыполнитьДействияПоЭДОПослеВводаСтроки", 
		ИнтерфейсДокументовЭДОКлиент, ДополнительныеПараметры);
	
	ДополнительныеПараметры = ОбщегоНазначенияБЭДКлиент.ПараметрыВводаСтроки();
	ДополнительныеПараметры.ЗаголовокФормы = НСтр("ru = 'Укажите причины отклонения аннулирования документа'");
	ДополнительныеПараметры.НазваниеКнопкиПоУмолчанию = НСтр("ru = 'Отклонить аннулирование'");
	ДополнительныеПараметры.Многострочность = Истина;
	ДополнительныеПараметры.Обязательность = Истина;
	ДополнительныеПараметры.КомментарийОбязательностиВвода =
		НСтр("ru = 'Для отклонения аннулирования документа необходимо указать причину.'");
	ОбщегоНазначенияБЭДКлиент.ПоказатьВводСтрокиБЭД(Обработчик, ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Асинх Процедура Отправить(Команда)
	
	ДанныеВыделенныхСтрокРаздела = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, 
		"ЭлектронныйДокумент, ИдентификаторПакета");
		
	Если Не ЗначениеЗаполнено(ДанныеВыделенныхСтрокРаздела) Тогда		
		Возврат;
	КонецЕсли;
		
	ОбъектыДействий = ОбъектыДействий(ДанныеВыделенныхСтрокРаздела);
	
	ЭтоПакетнаяОбработка = ЗначениеЗаполнено(ОбъектыДействий.ПакетыДокументов);
	Если ЭтоПакетнаяОбработка И Не ВыполнениеДействийПоЭДОДоступноДляПакетов(ОбъектыДействий.ПакетыДокументов) Тогда
		ВидДействия = ЛегкийИнтерфейсДокументовЭДОКлиент.ВидыВыполняемыхДействийСДокументом().Отправить;
		ТекстВопроса = ЛегкийИнтерфейсДокументовЭДОКлиент.ТекстВопросаОВыполненииДействияДляДокументаПакета(ВидДействия);
		Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ОставитьДляОбработкиТолькоТекущийДокумент(ОбъектыДействий);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;

	НаборДействий = Новый Соответствие;	
	ДействияПоЭДОПодготовитьКОтправке = ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.ПодготовитьКОтправке");
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ДействияПоЭДОПодготовитьКОтправке);
	ДействияПоЭДООтправить = ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Отправить");
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ДействияПоЭДООтправить);
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект);
	
	ПараметрыВыполненияДействийПоЭДО = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	ПараметрыВыполненияДействийПоЭДО.НаборДействий = НаборДействий;
	ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ЭлектронныеДокументы = ОбъектыДействий.ЭлектронныеДокументы;
	ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ПакетыДокументов = ОбъектыДействий.ПакетыДокументов;

	ИнтерфейсДокументовЭДОКлиент.НачатьВыполнениеДействийПоЭДО(Оповещение, ПараметрыВыполненияДействийПоЭДО);
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ВернутьНаПодготовкуКОтправке(Команда)
	
	ДанныеВыделенныхСтрокРаздела = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, 
		"ЭлектронныйДокумент, ИдентификаторПакета");
		
	Если Не ЗначениеЗаполнено(ДанныеВыделенныхСтрокРаздела) Тогда		
		Возврат;
	КонецЕсли;
	
	ОбъектыДействий = ОбъектыДействий(ДанныеВыделенныхСтрокРаздела);
	
	ЭтоПакетнаяОбработка = ЗначениеЗаполнено(ОбъектыДействий.ПакетыДокументов);
	Если ЭтоПакетнаяОбработка И Не ВыполнениеДействийПоЭДОДоступноДляПакетов(ОбъектыДействий.ПакетыДокументов) Тогда
		ВидДействия = ЛегкийИнтерфейсДокументовЭДОКлиент.ВидыВыполняемыхДействийСДокументом().ВернутьНаПодготовкуКОтправке;
		ТекстВопроса = ЛегкийИнтерфейсДокументовЭДОКлиент.ТекстВопросаОВыполненииДействияДляДокументаПакета(ВидДействия);
		Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ОставитьДляОбработкиТолькоТекущийДокумент(ОбъектыДействий);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НаборДействий = Новый Соответствие;	
	ДействияПоЭДООтменитьОтправку = ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ОтменитьОтправку");
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ДействияПоЭДООтменитьОтправку);
		
	Оповещение = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект);
	
	ПараметрыВыполненияДействийПоЭДО = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	ПараметрыВыполненияДействийПоЭДО.НаборДействий = НаборДействий;
	ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ЭлектронныеДокументы = ОбъектыДействий.ЭлектронныеДокументы;
	ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ПакетыДокументов = ОбъектыДействий.ПакетыДокументов;

	ИнтерфейсДокументовЭДОКлиент.НачатьВыполнениеДействийПоЭДО(Оповещение, ПараметрыВыполненияДействийПоЭДО);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ПолучитьОтправитьОбновить();
	
КонецПроцедуры

#КонецОбласти // ВыполнениеДействийПоЭДО

#Область ОтражениеВУчете

&НаКлиенте
Процедура СоздатьДокументУчета(Команда)
	ЛегкийИнтерфейсДокументовЭДОКлиент.ПоказатьВыборСпособаОбработкиСозданияОбъектовУчетаИзСпискаТекущихДел(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьДокументУчета1(Команда)
	ЛегкийИнтерфейсДокументовЭДОКлиент.ПоказатьВыборСпособаОбработкиПодбораОбъектаУчетаИзСпискаТекущихДел(ЭтотОбъект, 1);
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьДокументУчета2(Команда)
	ЛегкийИнтерфейсДокументовЭДОКлиент.ПоказатьВыборСпособаОбработкиПодбораОбъектаУчетаИзСпискаТекущихДел(ЭтотОбъект, 2);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументУчета1(Команда)
	ОткрытьДокументУчетаПоНомеру(1);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументУчета2(Команда)
	ОткрытьДокументУчетаПоНомеру(2);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсеДокументыУчета(Команда)
	ПоказатьРасширенныйПодборОбъектовУчета();
КонецПроцедуры

#КонецОбласти // ОтражениеВУчете

&НаКлиенте
Процедура ЗагрузитьНовыйДокументСДиска(Команда)
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьИзФайлаНаДискеЗавершить", ЭтотОбъект);
	НачатьПомещениеФайла(ОписаниеОповещения, , , , УникальныйИдентификатор);
					
КонецПроцедуры

&НаКлиенте
Процедура РасширенныйПоиск(Команда)
	
	РасширенныйПоискРаскрыт = Не РасширенныйПоискРаскрыт;
	Элементы.ГруппаБыстрыеОтборы.Видимость = Не Элементы.ГруппаБыстрыеОтборы.Видимость;
	ОбновитьОтображениеФильтров();
	
КонецПроцедуры 

&НаКлиенте
Процедура ОчиститьБыстрыеОтборы(Команда)
	
	ОчиститьПользовательскиеОтборы();
	ОбновитьОтображениеФильтров();
	
КонецПроцедуры

&НаКлиенте
Процедура Создать(Команда)
	
	Если Элементы.Сформировать.ВыделенныеСтроки.Количество() Тогда
		ПодключитьОбработчикОжидания("ВыполнитьСформироватьПодписатьИОтправить", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура РаспаковатьКонтейнеры(Команда)

	СинхронизацияЭДОКлиент.РаспаковатьТранспортныеКонтейнеры(Элементы.Ошибки.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусОтмененКонтейнера(Команда)
	
	УстановитьСтатусОтменен(Элементы.Ошибки.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПриглашение(Команда)
	
	ОчиститьСообщения();
	ДанныеПриглашений = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, 
		"КлючПриглашения, ИдентификаторОрганизации, ИдентификаторКонтрагента, Контрагент, Организация");

	ИсходящиеПриглашения = Новый Массив;

	Для Каждого ДанныеПриглашения Из ДанныеПриглашений Цикл	
		ИсходящееПриглашение = СинхронизацияЭДОКлиент.НовоеПриглашениеНаИдентификатор();
		ЗаполнитьЗначенияСвойств(ИсходящееПриглашение, ДанныеПриглашения);	
		ИсходящиеПриглашения.Добавить(ИсходящееПриглашение);
	КонецЦикла;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОтправкаПриглашенийОповещениеОЗавершении", ЭтотОбъект);
		
	СинхронизацияЭДОКлиент.ОтправитьПриглашения(ИсходящиеПриглашения, ЭтотОбъект, ОбработчикОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ПринятьПриглашения(Команда)
	
	Если Элементы.Приглашения.ВыделенныеСтроки.Количество() Тогда
		БлокируемыеЭлементы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Элементы.КомандаПринятьПриглашения.Имя);
		УстановитьБлокировкуЭлементов(БлокируемыеЭлементы);
		ПодключитьОбработчикОжидания("НачатьПринятиеПриглашений", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОтклонитьПриглашения(Команда)
	
	Если Элементы.Приглашения.ВыделенныеСтроки.Количество() Тогда
		БлокируемыеЭлементы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Элементы.КомандаОтклонитьПриглашения.Имя);
		УстановитьБлокировкуЭлементов(БлокируемыеЭлементы);
		ПодключитьОбработчикОжидания("НачатьОтклонениеПриглашений", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПометитьКакПрочитанное(Команда)
	
	ТекущийСписок = Элементы[ТекущийРаздел];
	
	Если ТекущийСписок <> Неопределено Тогда
		
		ИнтерфейсДокументовЭДОКлиент.ПометитьКакПрочтенные(ТекущийСписок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЭДО(Команда)
	
	НастройкиЭДОКлиент.ОткрытьФормуНастроекЭДО();
	
КонецПроцедуры

&НаКлиенте
Процедура ЕстьИдея(Команда)
	
	ИнтерфейсДокументовЭДОКлиент.ОткрытьСтраницуОпроса();

КонецПроцедуры

&НаКлиенте
Процедура Техподдержка(Команда)
	
	ИнтерфейсДокументовЭДОКлиент.ОткрытьОбращениеВСлужбуТехническойПоддержки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОМодулеЭДО(Команда)
			
	ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДО.Форма.ОМодулеЭДО", , , , , , ОписаниеОповещенияОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьУдаленные(Команда)
	
	ОтображатьУдаленные = Не ОтображатьУдаленные;
	
	ОтображатьУдаленныеСервер();
	ОбновитьДинамическиеСпискиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьЭлектронныеДокументы(Команда)
		
	ВывестиНаПечать();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДокументооборотЦеликом(Команда)
	
	Если Не ЗначениеЗаполнено(ТекущийЭлектронныйДокумент) Тогда
		ТекстСообщения = НСтр("ru = 'Для выгрузки необходимо выбрать электронный документ'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ЭлектронныеДокументы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущийЭлектронныйДокумент);
	ИнтерфейсДокументовЭДОКлиент.ВыгрузитьДокументооборотЦеликом(ЭлектронныеДокументы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЭлектронныеДокументыВФорматеПДФ(Команда)
	
	Если Не ЗначениеЗаполнено(ТекущийЭлектронныйДокумент) Тогда
		ТекстСообщения = НСтр("ru = 'Для выгрузки необходимо выбрать электронный документ'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ЭлектронныеДокументы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущийЭлектронныйДокумент);
	ИнтерфейсДокументовЭДОКлиент.ВыгрузитьЭлектронныеДокументыВФорматеPDF(ЭлектронныеДокументы, 
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЭлектронныеДокументыДляФНС(Команда)
	
	Если Не ЗначениеЗаполнено(ТекущийЭлектронныйДокумент) Тогда
		ТекстСообщения = НСтр("ru = 'Для выгрузки необходимо выбрать электронный документ'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ЭлектронныеДокументы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущийЭлектронныйДокумент);
	ИнтерфейсДокументовЭДОКлиент.ВыгрузитьЭлектронныеДокументыДляФНС(ЭлектронныеДокументы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьМашиночитаемыеДоверенности(Команда)

	МашиночитаемыеДоверенностиКлиент.ОткрытьОбщуюФормуСписковМЧД();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаРасширенныйИнтерфейс(Команда)
	
	ИнтерфейсДокументовЭДОКлиент.ИзменитьВариантИнтерфейсаПользователя(Ложь, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НовоеПриглашение(Команда)
	
	ПараметрыПриглашения = СинхронизацияЭДОКлиент.НовыеПараметрыОткрытияПомощникаОтправкиПриглашения();
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ПараметрыПриглашения.Контрагент = Контрагент;
	КонецЕсли;
	Если ЗначениеЗаполнено(Организация) Тогда
		ПараметрыПриглашения.Организация = Организация;
	КонецЕсли;
	
	СинхронизацияЭДОКлиент.ОткрытьПомощникОтправкиПриглашения(ПараметрыПриглашения);

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодписи(Команда)
	ОбщегоНазначенияБЭДКлиент.ОткрытьФормуБЭД(
		"Обработка.ИнтерфейсДокументовЭДО.Форма.ПроверкаПодписей");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПользовательскиеОтборы(Команда)
	
	ТекущийСписок = ЭтотОбъект[ТекущийРаздел];
	ОповещениеОЗавершении = Новый ОписаниеОповещения("НастройкаОтборовСпискаЗавершение", ЭтотОбъект);
	ИнтерфейсДокументовЭДОКлиент.ОткрытьНастройкиОтборовСписка(ОповещениеОЗавершении, ЭтотОбъект, 
		ТекущийСписок.КомпоновщикНастроек);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлы(Команда)
	
	ИнтерфейсДокументовЭДОКлиент.ОткрытьФормуМассовойЗагрузкиФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	
	ЛегкийИнтерфейсДокументовЭДОКлиент.ОткрытьФайлИнформацииОтправителяДокумента(ТекущийЭлектронныйДокумент,
		ТекущийДокументОблачногоЭДО, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаЛегкийИнтерфейсКарточекДокументов(Команда)
	
	ИспользуютсяЛегкиеКарточкиДокументов = Не ИспользуютсяЛегкиеКарточкиДокументов;
	ИнтерфейсДокументовЭДОВызовСервера.СохранитьИспользованиеЛегкихКарточекЭлектронныхДокументовПоУмолчанию(
		ИспользуютсяЛегкиеКарточкиДокументов);
	НастроитьПометкуЭлементовПереходаНаЛегкийИнтерфейсКарточекДокументов(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура СменитьОтветственного(Команда)
	
	ЭлектронныеДокументы = Элементы[ТекущийРаздел].ВыделенныеСтроки;
	ДополнитьДокументамиПакетов(ЭлектронныеДокументы);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеСменыОтветственного", ЭтотОбъект);

	ИнтерфейсДокументовЭДОКлиент.ПеренаправитьЭлектронныеДокументы(ЭлектронныеДокументы, ОповещениеОЗавершении);

КонецПроцедуры

&НаКлиенте
Процедура ВыборочныйОбменПоОрганизациям(Команда)
	ИнтерфейсДокументовЭДОВызовСервера.УстановитьОтправкуПолучениеСОтборомПоОрганизации(
		Не Элементы.ВыборочныйОбменПоОрганизациямВходящие.Пометка);
	Оповестить("УстановитьОтправкуПолучениеСОтборомПоОрганизации", Не Элементы.ВыборочныйОбменПоОрганизациямВходящие.Пометка);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСоСписками

&НаСервере
Процедура ОтображениеОрганизации()

	НесколькоОрганизаций = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
		|	УчетныеЗаписиЭДО.Организация КАК Организация
		|ИЗ
		|	РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выгрузить();
	
	Если ВыборкаДетальныеЗаписи.Количество() > 1 Тогда
		
		НесколькоОрганизаций = Истина;	
	
	КонецЕсли;
	
	Элементы.ВходящиеЭлектронныеДокументыОрганизация.Видимость = НесколькоОрганизаций;
	Элементы.ИсходящиеЭлектронныеДокументыОрганизация.Видимость = НесколькоОрганизаций;
	Элементы.СформироватьОрганизация.Видимость = НесколькоОрганизаций;
	Элементы.ПриглашенияОрганизация.Видимость = НесколькоОрганизаций;	
	
КонецПроцедуры

 &НаСервере
Процедура УстановитьПараметрыСписков()
		
	РежимОтображения = "ВсеДокументы";
	
	СписокПользователей = Новый Массив;
	СписокПользователей.Добавить(Пользователи.АвторизованныйПользователь());
	Если РежимОтображения <> "МоиДокументы" Тогда
		СписокПользователей.Добавить(ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));
	КонецЕсли;
	
	НастройкиОтображения = Новый Структура;
	НастройкиОтображения.Вставить("РежимОтображения", РежимОтображения);
	НастройкиОтображения.Вставить("СписокПользователей", СписокПользователей);
	НастройкиОтображения.Вставить("ОтправлятьВходящиеДокументыНаУтверждение", Истина);
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	ДатаПереходаНаВерсиюСПрочтенностью = РаботаСПрочтениямиВызовСервера.ПолучитьДатуПереходаНаВерсиюСПрочтенностью();
	
	СостоянияЭДОЗакрыт = Новый Массив;
	СостоянияЭДОЗакрыт.Добавить(Перечисления.СостоянияДокументовЭДО.ЗакрытПринудительно);	
	СостоянияЭДОЗакрыт.Добавить(Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонением);	
	СостоянияЭДОЗакрыт.Добавить(Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонениемПриглашения);	
	СостоянияЭДОЗакрыт.Добавить(Перечисления.СостоянияДокументовЭДО.ЗакрытСОшибкойПередачи);
	
	СостоянияЭДООжидается = Новый Массив;
	СостоянияЭДООжидается.Добавить(Перечисления.СостоянияДокументовЭДО.ОжидаетсяИзвещениеОПолучении);	
	СостоянияЭДООжидается.Добавить(Перечисления.СостоянияДокументовЭДО.ОжидаетсяИзвещениеПоОтклонению);	
	СостоянияЭДООжидается.Добавить(Перечисления.СостоянияДокументовЭДО.ОжидаетсяИсправление);	
	СостоянияЭДООжидается.Добавить(Перечисления.СостоянияДокументовЭДО.ОжидаетсяОтветНаПриглашение);
	СостоянияЭДООжидается.Добавить(Перечисления.СостоянияДокументовЭДО.ОжидаетсяПередачаОператору);	
	СостоянияЭДООжидается.Добавить(Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждение);
	СостоянияЭДООжидается.Добавить(Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеАннулирования);	
	СостоянияЭДООжидается.Добавить(Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеОператора);
	
	СостоянияЭДОТребуетсяДействие = Новый Массив;
	СостоянияЭДОТребуетсяДействие.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание);	
	СостоянияЭДОТребуетсяДействие.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяУтверждение);	
	СостоянияЭДОТребуетсяДействие.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодтверждениеАннулирования);	
	СостоянияЭДОТребуетсяДействие.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяУточнение);
	
	Для каждого ИмяСписка Из ИменаСписковФормы() Цикл
		
		Если ИмяСписка = "Сформировать" Тогда
			
			УстановитьУсловноеОформлениеСписков(ИмяСписка, "Дата");	
			Продолжить;
			
		ИначеЕсли ИмяСписка = "Приглашения" Тогда
			
			УстановитьУсловноеОформлениеСписков(ИмяСписка, "ДатаИзмененияСтатуса");	
			Продолжить;	
			
		Иначе
			
			УстановитьУсловноеОформлениеСписков(ИмяСписка, "ДатаПолучения");	
			
		КонецЕсли;
		
		Список = ЭтотОбъект[ИмяСписка];
		
		Список.Параметры.УстановитьЗначениеПараметра("ОтображатьУдаленные", ОтображатьУдаленные);
		Список.Параметры.УстановитьЗначениеПараметра("РежимОтображения", НастройкиОтображения.РежимОтображения);
		Список.Параметры.УстановитьЗначениеПараметра("СписокПользователей", НастройкиОтображения.СписокПользователей);
		Список.Параметры.УстановитьЗначениеПараметра("Пользователь", ТекущийПользователь);
		Список.Параметры.УстановитьЗначениеПараметра("ДатаПереходаНаВерсиюСПрочтенностью",
			ДатаПереходаНаВерсиюСПрочтенностью); 
		
		УстановитьВариантОтображенияДокументовСписка(ИмяСписка);
	
	КонецЦикла;
	
	Сформировать.Параметры.УстановитьЗначениеПараметра("ПустойКонтрагент", 
		ПустойКонтрагент);
	Сформировать.Параметры.УстановитьЗначениеПараметра("ТипыДоговорСКонтрагентомЭДО", 
		ТипыДоговорСКонтрагентомЭДО);
	
	Приглашения.Параметры.УстановитьЗначениеПараметра("ПустойКонтрагент", 
		ПустойКонтрагент);
	Приглашения.Параметры.УстановитьЗначениеПараметра("ИНН", 
		НСтр("ru = 'ИНН'"));
	
	СтатусыНеРаспакованныхТранспортныхСообщенийБЭД = СтатусыНеРаспакованныхТранспортныхСообщенийБЭД();
	Контейнеры.Параметры.УстановитьЗначениеПараметра("СтатусыНеРаспакованныхТранспортныхСообщенийБЭД",
		СтатусыНеРаспакованныхТранспортныхСообщенийБЭД);
	
	НаправлениеВходящий = ПредопределенноеЗначение("Перечисление.НаправленияЭДО.Входящий");
	Контейнеры.Параметры.УстановитьЗначениеПараметра("Направление",
		НаправлениеВходящий);
		
КонецПроцедуры

&НаСервере
Процедура УстановитьВариантОтображенияДокументовСписка(ИмяСписка, НаправлениеСортировки = Неопределено)
		
	ПоляОграничения = Новый Массив;
	
	БазовыеНастройкиКомпоновки = Новый КомпоновщикНастроекКомпоновкиДанных;
	БазовыеНастройкиКомпоновки.ЗагрузитьНастройки(ЭтотОбъект[ИмяСписка].КомпоновщикНастроек.Настройки);
	БазовыеНастройкиКомпоновки.Настройки.Порядок.Элементы.Очистить();
	
	ЭтотОбъект[ИмяСписка].КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(
		БазовыеНастройкиКомпоновки.ПользовательскиеНастройки);
	ЭтотОбъект[ИмяСписка].КомпоновщикНастроек.Настройки.Порядок.Элементы.Очистить();
	
	ЭлементПорядка = ЭтотОбъект[ИмяСписка].КомпоновщикНастроек.Настройки.Порядок.Элементы.Добавить(
		Тип("ЭлементПорядкаКомпоновкиДанных"));
	ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("ДатаПолучения");
	ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
	ЭлементПорядка.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементПорядка.Использование = Истина;
	
	ЭлементПорядка = ЭтотОбъект[ИмяСписка].КомпоновщикНастроек.Настройки.Порядок.Элементы.Добавить(
		Тип("ЭлементПорядкаКомпоновкиДанных"));
	ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("КлючСортировкиПакета");
	ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
	ЭлементПорядка.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементПорядка.Использование = Истина;
	
	ЭлементПорядка = ЭтотОбъект[ИмяСписка].КомпоновщикНастроек.Настройки.Порядок.Элементы.Добавить(
		Тип("ЭлементПорядкаКомпоновкиДанных"));
	ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("ПорядокСортировкиВПакете");
	ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
	ЭлементПорядка.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементПорядка.Использование = Истина;
	
	ЭлементПорядка = ЭтотОбъект[ИмяСписка].КомпоновщикНастроек.Настройки.Порядок.Элементы.Добавить(
		Тип("ЭлементПорядкаКомпоновкиДанных"));
	ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("НомерСлужебный");
	ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
	ЭлементПорядка.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементПорядка.Использование = Истина; 
		
	СлужебныеПоляПорядка = Новый Массив;
	СлужебныеПоляПорядка.Добавить("ДатаПолучения");
	СлужебныеПоляПорядка.Добавить("КлючСортировкиПакета");
	СлужебныеПоляПорядка.Добавить("ПорядокСортировкиВПакете");
	СлужебныеПоляПорядка.Добавить("НомерСлужебный");
	
	Для Каждого ПолеПорядка Из 
		ЭтотОбъект[ИмяСписка].КомпоновщикНастроек.Настройки.Порядок.ДоступныеПоляПорядка.Элементы Цикл
		ИмяПоля = Строка(ПолеПорядка.Поле);
		Если СлужебныеПоляПорядка.Найти(ИмяПоля) <> Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		ПоляОграничения.Добавить(ИмяПоля);
	КонецЦикла;	
	
	Если ПоляОграничения.Количество() > 0 Тогда
		ЭтотОбъект[ИмяСписка].УстановитьОграниченияИспользованияВПорядке(ПоляОграничения);
	КонецЕсли;
		
	СлужебныеПоляОтбора = Новый Массив;
	СлужебныеПоляОтбора.Добавить("Контрагент"); 
	СлужебныеПоляОтбора.Добавить("Организация"); 
	СлужебныеПоляОтбора.Добавить("ДатаПолучения");
	СлужебныеПоляОтбора.Добавить("СуммаДокумента");
	СлужебныеПоляОтбора.Добавить("СостояниеЭДО");
	СлужебныеПоляОтбора.Добавить("ТипДокумента");
	СлужебныеПоляОтбора.Добавить("Ответственный");
	СлужебныеПоляОтбора.Добавить("ВидДокумента");
	СлужебныеПоляОтбора.Добавить("ИдентификаторПакета");
	СлужебныеПоляОтбора.Добавить("ТипРегламента");
	СлужебныеПоляОтбора.Добавить("ЭлектронныйДокумент");
		
	ПоляОграничения = Новый Массив;
	
	Для Каждого ПолеПорядка Из 
		ЭтотОбъект[ИмяСписка].КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора.Элементы Цикл
		ИмяПоля = Строка(ПолеПорядка.Поле);
		Если СлужебныеПоляОтбора.Найти(ИмяПоля) <> Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		ПоляОграничения.Добавить(ИмяПоля);
	КонецЦикла;	
	
	Если ПоляОграничения.Количество() > 0 Тогда
		ЭтотОбъект[ИмяСписка].УстановитьОграниченияИспользованияВОтборе(ПоляОграничения);
	КонецЕсли;
			
	Элементы[ИмяСписка].Обновить();
		
КонецПроцедуры 

&НаСервере
Процедура УстановитьУсловноеОформлениеСписков(ИмяСписка, ИмяПоляДаты)
	
	Если ИмяСписка <> "Сформировать" И ИмяСписка <> "Приглашения" Тогда
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПрочтениеДокументовЭДО") Тогда
			
			Элемент = УсловноеОформление.Элементы.Добавить();
			
			Элемент.Представление = НСтр("ru = 'Отображение непрочитанных документов'");
			
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяСписка + "Контрагент"].Имя);
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяСписка + "СуммаДокумента"].Имя);
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяСписка + "Вложение"].Имя);
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяСписка + "ЭлектронныйДокумент"].Имя);
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяСписка + "ДатаПолучения"].Имя);
			
			Если НесколькоОрганизаций Тогда
				ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
				ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяСписка + "Организация"].Имя);
			КонецЕсли;
			
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяСписка + ".Прочтен");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = Ложь;
			
			Шрифт = Метаданные.ЭлементыСтиля.ЖирныйШрифтБЭД.Значение;
			Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Шрифт);
			
			Если ЕстьДублирующийсяЭлемент(УсловноеОформление.Элементы, Элемент) Тогда
				УсловноеОформление.Элементы.Удалить(Элемент);
			КонецЕсли;
			
		КонецЕсли;
		
		Элемент = УсловноеОформление.Элементы.Добавить();				
		Элемент.Представление = НСтр("ru = 'Отображение помеченных на удаление электронных документов'");
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяСписка + "Контрагент"].Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяСписка + "СуммаДокумента"].Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяСписка + "Вложение"].Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяСписка + "ЭлектронныйДокумент"].Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяСписка + "ДатаПолучения"].Имя); 
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяСписка + "Состояние"].Имя);
		
		Если НесколькоОрганизаций Тогда
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяСписка + "Организация"].Имя);
		КонецЕсли;
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяСписка + ".ПометкаУдаления");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		Шрифт = Метаданные.ЭлементыСтиля.ЗачеркнутыйШрифтБЭД.Значение;
		Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Шрифт);
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", 
			Метаданные.ЭлементыСтиля.ЦветРамкиПредпросмотраЭлектронногоДокумента.Значение);
			
	КонецЕсли;
	
	Если ИмяСписка <> "Приглашения" Тогда
			
		Элемент = УсловноеОформление.Элементы.Добавить();
	
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяСписка + ИмяПоляДаты].Имя);

		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяСписка + "." + ИмяПоляДаты);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		ОтборЭлемента.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоДня);
		ОтборЭлемента.Использование = Истина;
	
		Элемент.Оформление.УстановитьЗначениеПараметра("Формат", "ДФ=ЧЧ:мм");
			
		Элемент.Представление = 
			НСтр("ru = 'Отображать дату сегодняшних писем только в виде времени ""09:46"" (стандартная настройка)'");

		Если ЕстьДублирующийсяЭлемент(УсловноеОформление.Элементы, Элемент) Тогда
			УсловноеОформление.Элементы.Удалить(Элемент);
		КонецЕсли;
	
	КонецЕсли;
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяСписка + ИмяПоляДаты].Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяСписка + "." + ИмяПоляДаты);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоДня);
	ОтборЭлемента.Использование = Истина;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяСписка + "." + ИмяПоляДаты);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ОтборЭлемента.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоМесяца);
	ОтборЭлемента.Использование = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Формат", "ДФ='dd MMMM'");
			
	Элемент.Представление = 
		НСтр("ru = 'Отображать дату писем за эту неделю в виде ""Вт 10.06"" (стандартная настройка)'");
	
	Если ЕстьДублирующийсяЭлемент(УсловноеОформление.Элементы, Элемент) Тогда
		УсловноеОформление.Элементы.Удалить(Элемент);
	КонецЕсли;

	Элемент = УсловноеОформление.Элементы.Добавить(); 
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяСписка + ИмяПоляДаты].Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяСписка + "." + ИмяПоляДаты);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоМесяца);
	ОтборЭлемента.Использование = Истина;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяСписка + "." + ИмяПоляДаты);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ОтборЭлемента.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоГода);
	ОтборЭлемента.Использование = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Формат", "ДФ='dd.MM'");
	
	Элемент.Представление = НСтр("ru = 'Отображать дату писем за этот год в виде ""10.06"" (стандартная настройка)'");
	
	Если ЕстьДублирующийсяЭлемент(УсловноеОформление.Элементы, Элемент) Тогда
		УсловноеОформление.Элементы.Удалить(Элемент);
	КонецЕсли;
		
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяСписка + ИмяПоляДаты].Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяСписка + "." + ИмяПоляДаты);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоГода);
	ОтборЭлемента.Использование = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Формат", "ДФ='dd.MM.yy'");
			
	Элемент.Представление = НСтр("ru = 'Отображать дату писем за период более ранний, чем этот год в виде ""10.06.2022"" 
		|(стандартная настройка)'");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИменаСписковФормы()
	
	ИменаСписковФормы = Новый Массив;
	
	ИменаСписковФормы.Добавить("ВходящиеЭлектронныеДокументы");
	ИменаСписковФормы.Добавить("ИсходящиеЭлектронныеДокументы");
	ИменаСписковФормы.Добавить("Сформировать");
	ИменаСписковФормы.Добавить("Приглашения");
	
	Возврат ИменаСписковФормы; 
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПоляФильтров()
	
	ПоляФильтров = Новый Массив;
	ПоляФильтров.Добавить("Организация");
	ПоляФильтров.Добавить("Контрагент"); 
	ПоляФильтров.Добавить("Состояние");
	ПоляФильтров.Добавить("Период");
	ПоляФильтров.Добавить("ТипДокумента");
	ПоляФильтров.Добавить("Ответственный");
	ПоляФильтров.Добавить("ТипРегламента");
	ПоляФильтров.Добавить("СтатусПриглашения");
	
	Возврат ПоляФильтров; 
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииОтборов()
	УстановитьОтборыНаСервере();
	УстановитьПараметрыПредпросмотра();
	ПодключитьОбработчикОжидания("ОбновитьОбластьПросмотра", 0.1, Истина);
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыНаСервере(Раздел = Неопределено, ПолеОтбора = Неопределено, ПроверятьПересечениеОтборов = Истина)
	
	СохраняемыеВНастройкахДанныеМодифицированы = Истина;
	
	Если Раздел = Неопределено Тогда
		Раздел = ТекущийРаздел;
	КонецЕсли;
	Если ПолеОтбора = Неопределено Тогда
		ПолеОтбора = ТекущийЭлемент.Имя;
	КонецЕсли;
	Значение = ЭтотОбъект[ПолеОтбора];
	КэшФильтровВСписках[Раздел].Вставить(ПолеОтбора, Значение);
	
	Отбор = ЭтотОбъект[Раздел].Отбор;
	
	ИмяГруппыОтбора = ИмяГруппыФильтров();
	ГруппаБыстрыйОтбор = ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(Отбор.Элементы, ИмяГруппыОтбора);
	Если ГруппаБыстрыйОтбор = Неопределено Тогда
		ГруппаБыстрыйОтбор = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			Отбор.Элементы, ИмяГруппыОтбора, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	КонецЕсли;
	
	Режим = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ГруппаБыстрыйОтбор.РежимОтображения = Режим;
	
	Если ПолеОтбора = "Организация" 
		Или ПолеОтбора = "Контрагент" 
		Или (ПолеОтбора = "Ответственный" 
			И ЭтоВходящиеИсходящие(Раздел)) Тогда
		
		Использование = ЗначениеЗаполнено(Значение);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаБыстрыйОтбор, ПолеОтбора, Значение,
			ВидСравненияКомпоновкиДанных.Равно, ПолеОтбора, Использование, Режим);
				
	ИначеЕсли ПолеОтбора = "Состояние" 
		И ЭтоВходящиеИсходящие(Раздел) Тогда
			
		Если Значение = "Все" Тогда
			
			Значение = "";
			ЭтотОбъект[ПолеОтбора] = Значение;
					
		КонецЕсли;
		
		УстановитьОтборПоСостоянию(Значение, ГруппаБыстрыйОтбор, Режим);
		
	ИначеЕсли ПолеОтбора = "Период" Тогда
		
		Использование = ЗначениеЗаполнено(Значение);
		ДатаНачала = НачалоДня(Период.ДатаНачала);
		ДатаОкончания = КонецДня(Период.ДатаОкончания);
		
		Если Раздел <> "Сформировать" Тогда
			Поле = "ДатаПолучения";
		Иначе
			Поле = "Дата";
		КонецЕсли;
		
		ЭлементыУжеДобавлены = 
			ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(ГруппаБыстрыйОтбор, Поле).Количество() <> 0;
		Если Не ЭлементыУжеДобавлены Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаБыстрыйОтбор, Поле,
				ВидСравненияКомпоновкиДанных.БольшеИлиРавно, ДатаНачала, "ОтборПериодДатаНачала");
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаБыстрыйОтбор, Поле,
				ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, ДатаОкончания, "ОтборПериодДатаОкончания");
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаБыстрыйОтбор, Неопределено, ДатаНачала,
			ВидСравненияКомпоновкиДанных.БольшеИлиРавно, "ОтборПериодДатаНачала", Использование, Режим);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаБыстрыйОтбор, Неопределено, ДатаОкончания,
			ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, "ОтборПериодДатаОкончания", Использование, Режим);
		
	ИначеЕсли ПолеОтбора = "ТипДокумента" 
		И Раздел <> "Сформировать"
		И Раздел <> "Приглашения" Тогда
		
		Использование = ЗначениеЗаполнено(Значение);
		
		Если Раздел = "Сформировать" Тогда
			Использование = Ложь;
		КонецЕсли;
		
		Поле = "ВидДокумента";
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаБыстрыйОтбор, Поле, Значение,
			ВидСравненияКомпоновкиДанных.Равно, ПолеОтбора, Использование, Режим);
		
	ИначеЕсли ПолеОтбора = "ВидДокумента" И Раздел = "Сформировать" Тогда
		
		Использование = ЗначениеЗаполнено(Значение);
		Поле = "Документ.ВидДокумента";
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаБыстрыйОтбор, Поле, Значение,
			ВидСравненияКомпоновкиДанных.Равно, ПолеОтбора, Использование, Режим);
			
	ИначеЕсли ПолеОтбора = "СтатусПриглашения" И Раздел = "Приглашения" Тогда
		
		ЗначенияОтбора = Новый СписокЗначений;
		
		Если Значение = "Все" Тогда
			
			Значение = "";
			ЭтотОбъект[ПолеОтбора] = Значение;
		
		ИначеЕсли Значение = "ТребуетсяОтправить" Тогда
			ЗначенияОтбора.Добавить(Перечисления.СтатусыПриглашений.ТребуетсяОтправить);
		ИначеЕсли Значение = "Принято" Тогда
			ЗначенияОтбора.Добавить(Перечисления.СтатусыПриглашений.Принято);
		ИначеЕсли Значение = "Отклонено" Тогда
			ЗначенияОтбора.Добавить(Перечисления.СтатусыПриглашений.Отклонено);
		ИначеЕсли Значение = "ОжидаемСогласия" Тогда
			ЗначенияОтбора.Добавить(Перечисления.СтатусыПриглашений.ОжидаемСогласия);
		ИначеЕсли Значение = "ТребуетсяСогласие" Тогда
			ЗначенияОтбора.Добавить(Перечисления.СтатусыПриглашений.ТребуетсяСогласие);
		ИначеЕсли Значение = "НастройкаРоуминга" Тогда
			ЗначенияОтбора.Добавить(Перечисления.СтатусыПриглашений.НастройкаРоуминга);
		ИначеЕсли Значение = "Ошибка" Тогда
			ЗначенияОтбора.Добавить(Перечисления.СтатусыПриглашений.Ошибка);
		ИначеЕсли Значение = "НеТребуется" Тогда
			ЗначенияОтбора.Добавить(Перечисления.СтатусыПриглашений.НеТребуется);
		ИначеЕсли Значение = "ТребуетВнимания" Тогда
			ЗначенияОтбора.Добавить(Перечисления.СтатусыПриглашений.ТребуетсяОтправить);
			ЗначенияОтбора.Добавить(Перечисления.СтатусыПриглашений.ТребуетсяСогласие);
		КонецЕсли;

		Поле = "СтатусПодключения";
		Использование = ЗначенияОтбора.Количество() > 0;
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаБыстрыйОтбор, Поле, ЗначенияОтбора,
			ВидСравненияКомпоновкиДанных.ВСписке, ПолеОтбора, Использование, Режим);
	
	ИначеЕсли ПолеОтбора = "ТипРегламента" И ЭтоВходящиеИсходящие(Раздел) Тогда
		
		Если Значение = "Все" Тогда
			
			Значение = "";
			ЭтотОбъект[ПолеОтбора] = Значение;
			
		КонецЕсли; 
		
		Использование = ЗначениеЗаполнено(Значение); 
		
		Если Значение = "Только произвольные документы" Тогда // АПК:1297 Не проверять на локализацию
			ЗначениеОтбора = Перечисления.ТипыРегламентовЭДО.Неформализованный;	
		КонецЕсли;
						
		Поле = "ТипРегламента";
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаБыстрыйОтбор, Поле, ЗначениеОтбора,
			ВидСравненияКомпоновкиДанных.Равно, ПолеОтбора, Использование, Режим);
								
		СписокВидовДокументов = Новый СписокЗначений;
		Виды = ЭлектронныеДокументыЭДО.ВидыДокументовДляПроизвольногоФормата();
		
		Для каждого Вид Из Виды Цикл
			СписокВидовДокументов.Добавить(Вид);
		КонецЦикла;

		Поле = "ВидДокумента";
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаБыстрыйОтбор, Поле, СписокВидовДокументов,
			ВидСравненияКомпоновкиДанных.ВСписке, ПолеОтбора, Использование, Режим);

	КонецЕсли;
	
	Если ПроверятьПересечениеОтборов Тогда
		ОбработатьПересечениеОтборов(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоСостоянию(Знач Значение, ГруппаБыстрыйОтбор, Знач Режим)

	СписокСостояний = Новый СписокЗначений;
	
	Поле = "СостояниеЭДО";
	Если Значение = "Утвердить" Тогда
		
		СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяУтверждение);
		
	ИначеЕсли Значение = "Подписать" Тогда
		
		СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание);
		СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеАннулирования);
		СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеОтклонения);
		СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещения);
		СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещенияПоОтклонению);
		
	ИначеЕсли Значение = "Аннулировать" Тогда
		
		СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодтверждениеАннулирования);
		
	ИначеЕсли Значение = "Исправить" Тогда
		
		СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяУточнение);
		СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодтверждениеАннулирования);
		
	ИначеЕсли Значение = "Завершен" Тогда
		
		СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ЗакрытПринудительно);
		СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонением); 
		СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонениемПриглашения);
		СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ЗакрытСОшибкойПередачи);
		СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ОбменЗавершен);
		СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ОбменЗавершенСИсправлением);
		
	ИначеЕсли Значение = "Отправлен" Тогда
		
		СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ОжидаетсяИзвещениеОПолучении);
		СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ОжидаетсяИзвещениеПоОтклонению); 
		СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ОжидаетсяИсправление);
		СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ОжидаетсяОтветНаПриглашение);
		СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ОжидаетсяПередачаОператору);
		СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждение);
		СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеАннулирования);
		СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеОператора); 
		
	ИначеЕсли Значение = "Отправить" Тогда
		
		СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправке);
		
	ИначеЕсли Значение = "ТребуетВнимания" Тогда
		
		СписокСостояний = СостоянияДокументовТребующиеВнимания();
		
	КонецЕсли;
	
	Использование = СписокСостояний.Количество();
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаБыстрыйОтбор, Поле, СписокСостояний,
		ВидСравненияКомпоновкиДанных.ВСписке, "Состояние", Использование, Режим);
		
КонецПроцедуры

&НаСервере
Функция ЭтоВходящиеИсходящие(Знач Список)
	
	Возврат Список <> "Сформировать" И Список <> "Приглашения" И Список <> "Ошибки";
				
КонецФункции

&НаСервереБезКонтекста
Процедура ПредставлениеСостояния(ДанныеСтроки)
	
	Если ДанныеСтроки.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяУтверждение 
		И ЗначениеЗаполнено(ДанныеСтроки.КлючСортировкиПакета) 
		Тогда
			
		ДанныеСтроки.Состояние = НСтр("ru = 'Утвердить пакет'");
		
	ИначеЕсли ДанныеСтроки.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяУтверждение Тогда
		
		ДанныеСтроки.Состояние = НСтр("ru = 'Утвердить'");
		
	ИначеЕсли ДанныеСтроки.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеАннулирования Тогда
		
		ДанныеСтроки.Состояние = НСтр("ru = 'Подписать аннулирование'");
		
	ИначеЕсли ДанныеСтроки.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеОтклонения
		Или ДанныеСтроки.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещенияПоОтклонению Тогда
		
		ДанныеСтроки.Состояние = НСтр("ru = 'Подписать отклонение'");
		
	ИначеЕсли ДанныеСтроки.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяУточнение Тогда
		
		ДанныеСтроки.Состояние = НСтр("ru = 'Исправить'");
				
	ИначеЕсли ДанныеСтроки.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодтверждениеАннулирования Тогда
		
		ДанныеСтроки.Состояние = НСтр("ru = 'Аннулировать'");
		
	ИначеЕсли ДанныеСтроки.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправке
		Или ДанныеСтроки.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправка Тогда
		
		ДанныеСтроки.Состояние = НСтр("ru = 'Отправить'");
		
	ИначеЕсли ДанныеСтроки.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание
		Или ДанныеСтроки.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещения Тогда
		
		ДанныеСтроки.Состояние = НСтр("ru = 'Подписать'");
		
	ИначеЕсли ДанныеСтроки.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеАннулирования Тогда
		
		ДанныеСтроки.Состояние = НСтр("ru = 'Отправлен на аннулирование'");
		
	ИначеЕсли СтрНайти(ДанныеСтроки.СостояниеЭДО, "Ожидается") <> 0 Тогда
		
		ДанныеСтроки.Состояние = НСтр("ru = 'Отправлен'");
		
	ИначеЕсли ДанныеСтроки.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.НеСформирован Тогда
		
		ДанныеСтроки.Состояние = НСтр("ru = 'Не сформирован'");
		
	ИначеЕсли ДокументВСостоянииЗавершен(ДанныеСтроки) Тогда
		
		ДанныеСтроки.Состояние = НСтр("ru = 'Завершен'");
		
	ИначеЕсли ДанныеСтроки.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.Аннулирован Тогда
		
		ДанныеСтроки.Состояние = НСтр("ru = 'Аннулирован'");
			
	ИначеЕсли ДанныеСтроки.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонением Тогда
		
		ДанныеСтроки.Состояние = НСтр("ru = 'Завершен с отклонением'");
	 				
	Иначе
		
		ДанныеСтроки.Состояние = НСтр("ru = 'Завершен'");
		
	КонецЕсли;
		
	КартинкиСостояний = СоответствиеИндексовКартинокСостоянийЭДО();
	
	Если ДанныеСтроки.Свойство("КартинкаСтатуса") Тогда 
		
		ДанныеСтроки.КартинкаСтатуса = 0;
		
		Если ДанныеСтроки.Свойство("Контрагент") И ЗначениеЗаполнено(ДанныеСтроки.Контрагент) Тогда
			
			Если ДокументТребуетВнимания(ДанныеСтроки) Тогда
				
				ДанныеСтроки.КартинкаСтатуса = КартинкиСостояний.Получить("ТребуетВнимания");
							
			Иначе
				
				ДанныеСтроки.КартинкаСтатуса = КартинкиСостояний.Получить("НеТребуетВнимания");
			
			КонецЕсли;			
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоответствиеИндексовКартинокСостоянийЭДО()
	
	КартинкиСостояний = Новый Соответствие;
	КартинкиСостояний.Вставить("ТребуетВнимания", 1);
	КартинкиСостояний.Вставить("НеТребуетВнимания", 0);
	
	Возврат КартинкиСостояний
	
КонецФункции

&НаСервереБезКонтекста
Функция ДокументТребуетВнимания(Знач ДанныеСтроки)
	
	Возврат ДанныеСтроки.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяУтверждение 
		Или ДанныеСтроки.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание
		Или ДанныеСтроки.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодтверждениеАннулирования
		Или ДанныеСтроки.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяУточнение 
		Или ДанныеСтроки.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеАннулирования
		Или ДанныеСтроки.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеОтклонения
		Или ДанныеСтроки.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправке
		Или ДанныеСтроки.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещения
		Или ДанныеСтроки.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещенияПоОтклонению;
		
КонецФункции

&НаСервереБезКонтекста
Функция ДокументВСостоянииЗавершен(Знач ДанныеСтроки)
	
	Возврат ДанныеСтроки.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ЗакрытПринудительно 
		ИЛИ ДанныеСтроки.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонением
		ИЛИ ДанныеСтроки.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонениемПриглашения
		ИЛИ ДанныеСтроки.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ЗакрытСОшибкойПередачи;
		
КонецФункции

&НаСервере
Процедура ОбновитьДинамическийСписокТекущегоРаздела(ПеречитыватьДанные = Истина)
		
	Если ПеречитыватьДанные Тогда
		Элементы[ТекущийРаздел].Обновить();
	КонецЕсли;
	
	КоличествоДокументов();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриПолученииДанныхСписков(ИмяЭлемента, Настройки, Строки)
			
	ИдентификаторыДокументовПакетов = Новый Соответствие;
		
	Для Каждого ТекущаяСтрока Из Строки Цикл
		
		ДанныеСтроки = ТекущаяСтрока.Значение.Данные; 
				
		СписокДокументов = ИдентификаторыДокументовПакетов[ДанныеСтроки.КлючСортировкиПакета];
		
		Если СписокДокументов = Неопределено Тогда
			
			СписокДокументов = Новый ТаблицаЗначений;
			СписокДокументов.Колонки.Добавить("ПорядокСортировкиВПакете");
			СписокДокументов.Колонки.Добавить("НомерСлужебный");
			
		КонецЕсли;		
		
		Документ = СписокДокументов.Добавить();
		Документ.ПорядокСортировкиВПакете = ДанныеСтроки.ПорядокСортировкиВПакете;
		Документ.НомерСлужебный = ДанныеСтроки.НомерСлужебный;
		
		ИдентификаторыДокументовПакетов.Вставить(ДанныеСтроки.КлючСортировкиПакета, СписокДокументов);	
		
	КонецЦикла;	
		
	Для Каждого ТекущаяСтрока Из Строки Цикл
		
		ДанныеСтроки = ТекущаяСтрока.Значение.Данные;
		
		Основания = ИнтеграцияЭДО.ОбъектыУчетаЭлектронныхДокументов(ДанныеСтроки.ЭлектронныйДокумент);  
		
		Если ЗначениеЗаполнено(Основания) Тогда
		
			КоличествоОснований = Основания.Количество();

			ШаблонСтроки = НСтр("ru = 'Учтен (%1)'");
			ДанныеСтроки.ОтражениеВУчете = СтрШаблон(ШаблонСтроки, КоличествоОснований);		
			
		Иначе
			
			ДанныеСтроки.ОтражениеВУчете = "";	
		
		КонецЕсли;
					
		ПредставлениеСостояния(ДанныеСтроки);
							
		ДанныеСтроки.КлючДокумента = Строка(ДанныеСтроки.ЭлектронныйДокумент.УникальныйИдентификатор());
		Если ЗначениеЗаполнено(ДанныеСтроки.ИдентификаторПакета) Тогда
			ДанныеСтроки.КлючПакета = Строка(ДанныеСтроки.ИдентификаторПакета);
		Иначе
			ДанныеСтроки.КлючПакета = "";
		КонецЕсли;
		
		ТекущиеИдентификаторы = ИдентификаторыДокументовПакетов[ДанныеСтроки.КлючСортировкиПакета]; 
		
		Если ТекущиеИдентификаторы <> Неопределено И ДанныеСтроки.КлючСортировкиПакета <> "" Тогда
			
			Если ИмяЭлемента = "ИсходящиеЭлектронныеДокументы" Тогда
				НачалоДня = НачалоДня(ДанныеСтроки.ВремяПолучения);
				ДатаПолученияСоВременем = ДанныеСтроки.ДатаПолучения + (ДанныеСтроки.ВремяПолучения - НачалоДня); 
				ДанныеСтроки.ДатаПолучения = ДатаПолученияСоВременем;
			КонецЕсли;
									
			ТекущиеИдентификаторыСвернута = Новый ТаблицаЗначений;
			ТекущиеИдентификаторыСвернута.Колонки.Добавить("ПорядокСортировкиВПакете");
			
			Для Индекс = 0 По ТекущиеИдентификаторы.Количество() - 1 Цикл 
				ТекущиеИдентификаторыСвернута.Добавить();	
			КонецЦикла;
			
			ЗначениеКолонки = ТекущиеИдентификаторы.ВыгрузитьКолонку("ПорядокСортировкиВПакете");
			ТекущиеИдентификаторыСвернута.ЗагрузитьКолонку(ЗначениеКолонки, "ПорядокСортировкиВПакете");
			
			ТекущиеИдентификаторыСвернута.Свернуть("ПорядокСортировкиВПакете");
			
			Если ТекущиеИдентификаторыСвернута.Количество() = 1 Тогда 
				ТекущиеИдентификаторы.Сортировать("НомерСлужебный Убыв");
			Иначе
				ТекущиеИдентификаторы.Сортировать("ПорядокСортировкиВПакете Возр");
			КонецЕсли;
			
			ДанныеСтроки.ПервыйДокументПакета = ДанныеСтроки.НомерСлужебный = ТекущиеИдентификаторы[0].НомерСлужебный;
			 						
			ДанныеСтроки.ИндексКартинкиПакета = 0;			
			
			Если ДанныеСтроки.ПервыйДокументПакета И ЗначениеЗаполнено(ДанныеСтроки.КлючСортировкиПакета) Тогда
				
				ДанныеСтроки.ИндексКартинкиПакета = 1;
				
			ИначеЕсли Не ДанныеСтроки.ПервыйДокументПакета И ЗначениеЗаполнено(ДанныеСтроки.КлючСортировкиПакета) Тогда
				
				Если ДанныеСтроки.Свойство("ДатаПолучения") Тогда
					ДанныеСтроки.ДатаПолучения = "";	
				КонецЕсли;
				Если ДанныеСтроки.Свойство("КартинкаСтатуса") Тогда
					ДанныеСтроки.КартинкаСтатуса = 0;	
				КонецЕсли;
				Если ДанныеСтроки.Свойство("Контрагент") Тогда
					ДанныеСтроки.Контрагент = ""; 
				КонецЕсли;
				Если ДанныеСтроки.Свойство("Организация") Тогда
					ДанныеСтроки.Организация = ""; 
				КонецЕсли;
				Если ДанныеСтроки.Свойство("Состояние") Тогда
					ДанныеСтроки.Состояние = "";
					ДанныеСтроки.КартинкаСтатуса = 0;
				КонецЕсли;
				Если ДанныеСтроки.Свойство("Вложение") Тогда
					ДанныеСтроки.Вложение = "";
				КонецЕсли;
			
			КонецЕсли; 
				
		Иначе
			
			ДанныеСтроки.ПервыйДокументПакета = Истина;
			ДанныеСтроки.ИндексКартинкиПакета = 0;
			
		КонецЕсли;  
					
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтображатьУдаленныеСервер()

	Элементы.ОтображатьУдаленныеВходящие.Пометка = ОтображатьУдаленные;
	Элементы.ОтображатьУдаленныеИсходящие.Пометка = ОтображатьУдаленные;
	
	Для каждого ИмяСписка Из ИменаСписковФормы() Цикл
		Если ИмяСписка = "Сформировать" ИЛИ ИмяСписка = "Приглашения" Тогда
			Продолжить;
		КонецЕсли;
		ЭтотОбъект[ИмяСписка].Параметры.УстановитьЗначениеПараметра("ОтображатьУдаленные", ОтображатьУдаленные);
	КонецЦикла;
			
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"ИнтерфейсЭДО", "ОтображатьУдаленные", ОтображатьУдаленные);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДинамическиеСпискиФормы()
	
	Если Не НастройкиЭДО.ИспользуетсяОбменЭлектроннымиДокументами() Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ИмяСписка Из ИменаСписковФормы() Цикл

		Элементы[ИмяСписка].Обновить();

	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеФильтров()
	
	Если ИменаСписковФормы().Найти(ТекущийРаздел) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоФильтров = 0;
	КоличествоДополнительныхОтборов = КоличествоДополнительныхОтборовСписков[ТекущийРаздел];

	Если Элементы.ГруппаБыстрыеОтборы.Видимость Тогда
		
		ЗаголовокКоманды = "Фильтры ▲";
		
	Иначе
		
		ЗаголовокКоманды = "Фильтры ("; 
		СокращенныйЗаголовок = Ложь;
		ЕстьДокументыКОбработкеСкрытьПанель = Ложь;
		
		Для Каждого Отбор Из ПоляФильтров() Цикл
			
			Если ЗначениеЗаполнено(ЭтотОбъект[Отбор]) И Отбор <> "Новые" Тогда
				
				КоличествоФильтров = КоличествоФильтров + 1;
				
				Если КоличествоФильтров = 1 Тогда
					
					ЗначениеОтбора = "";
					ЭлементОтбора = Элементы[Отбор];
					Если ЭлементОтбора.СписокВыбора.Количество() Тогда
						ВыбранныйЭлемент = ЭлементОтбора.СписокВыбора.НайтиПоЗначению(ЭтотОбъект[Отбор]);
						Если ВыбранныйЭлемент <> Неопределено Тогда
							ЗначениеОтбора = ВыбранныйЭлемент.Представление;
						КонецЕсли;
					Иначе
						ЗначениеОтбора = Строка(ЭтотОбъект[Отбор]);
					КонецЕсли;
					
					ПредставлениеОтбора = СтрШаблон("%1: %2", ЭлементОтбора.Заголовок, ЗначениеОтбора);
					ЕстьДокументыКОбработкеСкрытьПанель = Истина;
				Иначе
					
					СокращенныйЗаголовок = Истина;
					Продолжить;
					
				КонецЕсли;
				
				ЗаголовокКоманды = ЗаголовокКоманды + ПредставлениеОтбора;

			КонецЕсли;
			
		КонецЦикла;
		
		Если СокращенныйЗаголовок Тогда
			
			ЗаголовокКоманды = СтрШаблон("%1 %2 %3", ЗаголовокКоманды, НСтр("ru='и еще'"), КоличествоФильтров - 1);
			
		КонецЕсли;
		
		Если КоличествоДополнительныхОтборов > 0 И КоличествоФильтров > 0 Тогда
			ШаблонЗаголовка = НСтр("ru='%1) + дополнительные фильтры (%2) ▼'");
			ЗаголовокКоманды = СтрШаблон(ШаблонЗаголовка, ЗаголовокКоманды, КоличествоДополнительныхОтборов);
		ИначеЕсли КоличествоДополнительныхОтборов > 0 И КоличествоФильтров = 0 Тогда
			ШаблонЗаголовка = НСтр("ru='Дополнительные фильтры (%2) ▼'");
			ЗаголовокКоманды = СтрШаблон(ШаблонЗаголовка, ЗаголовокКоманды, КоличествоДополнительныхОтборов);
		Иначе
			ЗаголовокКоманды = СтрШаблон("%1) %2", ЗаголовокКоманды, "▼");
		КонецЕсли;
		
	КонецЕсли;
	
	Если КоличествоФильтров > 0 Или КоличествоДополнительныхОтборов > 0 Тогда
		Элементы.ГруппаОчиститьБыстрыеОтборы.Видимость = Истина;
	Иначе
		Элементы.ГруппаОчиститьБыстрыеОтборы.Видимость = Ложь;
	КонецЕсли;
	
	Если КоличествоФильтров = 0 И КоличествоДополнительныхОтборов = 0 
		И Не Элементы.ГруппаБыстрыеОтборы.Видимость Тогда
		ЗаголовокКоманды = НСтр("ru='Фильтры ▼'");
	КонецЕсли;
	
	Элементы.РаскрытьФильтры.Заголовок = ЗаголовокКоманды;
	УстановитьЗаголовокИВидимостьДополнительныхФильтров(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФильтры()
	
	Для Каждого Фильтр Из ПоляФильтров() Цикл
		ЭтотОбъект[Фильтр] = Неопределено;
	КонецЦикла;
	
	СпискиСФильтрами = ИменаСписковФормы();
	Если СпискиСФильтрами.Найти(ТекущийРаздел) = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ФильтрыСписка = КэшФильтровВСписках[ТекущийРаздел];
	Для Каждого Фильтр Из ФильтрыСписка Цикл
		ЭтотОбъект[Фильтр.Ключ] = Фильтр.Значение;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПользовательскиеОтборы()
	
	ФильтрыСписка = КэшФильтровВСписках[ТекущийРаздел];
	Для Каждого Фильтр Из ФильтрыСписка Цикл
		ЭтотОбъект[Фильтр.Ключ] = Неопределено;
		УстановитьОтборыНаСервере(, Фильтр.Ключ);
	КонецЦикла;
	
	Для Каждого Список Из ИменаСписковФормы() Цикл
		Отбор = ИнтерфейсДокументовЭДО.ПользовательскийОтборСписка(ЭтотОбъект[Список]);
		Отбор.Элементы.Очистить();
	КонецЦикла;
	
	ЗаполнитьКоличествоДополнительныхФильтров();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФильтрыСписков()
	
	Для Каждого Раздел Из ИменаСписковФормы() Цикл
		Фильтры = КэшФильтровВСписках[Раздел];
		Для Каждого Фильтр Из Фильтры Цикл
			ЭтотОбъект[Фильтр.Ключ] = Фильтр.Значение;
			УстановитьОтборыНаСервере(Раздел, Фильтр.Ключ);
		КонецЦикла;
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКэшФильтровВСписках()
	
	КэшФильтров = Новый Соответствие;
	Для Каждого ИмяСписка Из ИменаСписковФормы() Цикл
		КэшФильтров.Вставить(ИмяСписка, Новый Соответствие);
	КонецЦикла;
	КэшФильтровВСписках = Новый ФиксированноеСоответствие(КэшФильтров);
	КэшФильтровВСписках = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяФормы, "Отборы", КэшФильтровВСписках);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПересечениеОтборов(ЭтоУстановкаФильтров = Ложь)
	
	ТекущийСписок = ЭтотОбъект[ТекущийРаздел];
	
	ГруппаБыстрыхФильтров = ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(ТекущийСписок.Отбор.Элементы,
		ИмяГруппыФильтров());
	Если ГруппаБыстрыхФильтров = Неопределено Тогда
		ЗаполнитьКоличествоДополнительныхФильтров();
		Возврат;
	КонецЕсли;
	ЭлементыБыстрыхФильтров = ИнтерфейсДокументовЭДО.ЭлементыОтбора(ГруппаБыстрыхФильтров);
		
	ПользовательскийОтбор = ИнтерфейсДокументовЭДО.ПользовательскийОтборСписка(ТекущийСписок);
	ЭлементыПользовательскогоОтбора = ИнтерфейсДокументовЭДО.ЭлементыОтбора(ПользовательскийОтбор);
	
	Для Каждого ЭлементПользовательскогоОтбора Из ЭлементыПользовательскогоОтбора Цикл
	
		Если Не ЭлементПользовательскогоОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ЭлементБыстрогоФильтра Из ЭлементыБыстрыхФильтров Цикл
			
			Если ЭлементПользовательскогоОтбора.ЛевоеЗначение <> ЭлементБыстрогоФильтра.ЛевоеЗначение 
				Или Не ЭлементБыстрогоФильтра.Использование Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЭтоУстановкаФильтров Тогда
				ЭлементПользовательскогоОтбора.Использование = Ложь;
			Иначе
				
				ЭлементБыстрогоФильтра.Использование = Ложь;
				РеквизитФормы = РеквизитФормыПоПредставлениюФильтра(ЭлементБыстрогоФильтра.Представление);
				Если ЗначениеЗаполнено(РеквизитФормы) Тогда
					ЭтотОбъект[РеквизитФормы] = Неопределено;
					УстановитьОтборыНаСервере(ТекущийРаздел, РеквизитФормы, Ложь);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЗаполнитьКоличествоДополнительныхФильтров();
	УстановитьЗаголовокИВидимостьДополнительныхФильтров(ЭтотОбъект);
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяГруппыФильтров()
	Возврат "БыстрыйОтбор";
КонецФункции 
	
&НаКлиенте
Процедура НастройкаОтборовСпискаЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(Результат) <> Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
		
	ТекущийСписок = ЭтотОбъект[ТекущийРаздел];
	ТекущийСписок.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(Результат);
	
	ОбработатьПересечениеОтборов();
	ОбновитьОтображениеФильтров();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РеквизитФормыПоПредставлениюФильтра(ПредставлениеФильтра)

	РеквизитыФормыПоПредставлениямФильтров = Новый Соответствие();
	РеквизитыФормыПоПредставлениямФильтров.Вставить("Организация", "Организация");
	РеквизитыФормыПоПредставлениямФильтров.Вставить("Контрагент", "Контрагент");
	РеквизитыФормыПоПредставлениямФильтров.Вставить("ОтборПериодДатаНачала", "Период");
	РеквизитыФормыПоПредставлениямФильтров.Вставить("ОтборПериодДатаОкончания", "Период");
	РеквизитыФормыПоПредставлениямФильтров.Вставить("Ответственный", "Ответственный");
	РеквизитыФормыПоПредставлениямФильтров.Вставить("Состояние", "Состояние");
	РеквизитыФормыПоПредставлениямФильтров.Вставить("ВидДокумента", "ТипДокумента");
	РеквизитыФормыПоПредставлениямФильтров.Вставить("ТипДокумента", "ТипДокумента");
	РеквизитыФормыПоПредставлениямФильтров.Вставить("ТипРегламента", "ТипРегламента");
	РеквизитыФормыПоПредставлениямФильтров.Вставить("СтатусПриглашения", "СтатусПриглашения");
	
	Возврат РеквизитыФормыПоПредставлениямФильтров[ПредставлениеФильтра];

КонецФункции

&НаСервереБезКонтекста
Функция СостоянияДокументовТребующиеВнимания()
	
	СписокСостояний = Новый СписокЗначений;
	
	СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправке);
	СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяУтверждение);
	СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание);
	СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеАннулирования);
	СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеОтклонения);
	СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправка);
	СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодтверждениеАннулирования);
	СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяУточнение);
	СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещения);
	СписокСостояний.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещенияПоОтклонению);
	
	Возврат СписокСостояний;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокИВидимостьДополнительныхФильтров(Форма)
	
	Если ИменаСписковФормы().Найти(Форма.ТекущийРаздел) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоДополнительныхОтборов = Форма.КоличествоДополнительныхОтборовСписков[Форма.ТекущийРаздел];
	ШаблонЗаголовка = НСтр("ru='Дополнительные фильтры (%1)'");
	Форма.Элементы.КомандаДополнительныеФильтры.Заголовок = СтрШаблон(ШаблонЗаголовка, КоличествоДополнительныхОтборов);
	Форма.Элементы.КомандаДополнительныеФильтры.Видимость = КоличествоДополнительныхОтборов <> 0;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКоличествоДополнительныхФильтров()
	
	КоличествоДополнительныхОтборов = Новый Соответствие;
	
	Для Каждого ИмяСписка Из ИменаСписковФормы() Цикл
	
		ТекущийСписок = ЭтотОбъект[ИмяСписка];
		ПользовательскийОтбор = ИнтерфейсДокументовЭДО.ПользовательскийОтборСписка(ТекущийСписок);
		ЭлементыПользовательскогоОтбора = ИнтерфейсДокументовЭДО.ЭлементыОтбора(ПользовательскийОтбор);
		
		КоличествоЭлементов = 0;
	
		Для Каждого ЭлементПользовательскогоОтбора Из ЭлементыПользовательскогоОтбора Цикл
	
			Если ЭлементПользовательскогоОтбора.Использование Тогда
				КоличествоЭлементов = КоличествоЭлементов + 1;
			КонецЕсли;
		
		КонецЦикла;
		
		КоличествоДополнительныхОтборов.Вставить(ИмяСписка, КоличествоЭлементов);
		
	КонецЦикла;
		
	КоличествоДополнительныхОтборовСписков = Новый ФиксированноеСоответствие(КоличествоДополнительныхОтборов);
	
КонецПроцедуры

&НаКлиенте
Функция ТекущиеДанныеТаблицыЭлектронныхДокументов()

	Если Элементы.Страницы.ТекущаяСтраница <> Элементы.СтраницаВходящиеИсходящие Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Неопределено;
	Если Элементы.СтраницыВходящиеИсходящие.ТекущаяСтраница = Элементы.СтраницаВходящиеЭлектронныеДокументы Тогда
		Результат = Элементы.ВходящиеЭлектронныеДокументы.ТекущиеДанные;
		
	ИначеЕсли Элементы.СтраницыВходящиеИсходящие.ТекущаяСтраница = Элементы.СтраницаИсходящиеЭлектронныеДокументы Тогда
		Результат = Элементы.ИсходящиеЭлектронныеДокументы.ТекущиеДанные;
		
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область РаботаСПриглашениями

&НаКлиенте
Процедура ОтправкаПриглашенийОповещениеОЗавершении(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	КонтекстДиагностики = Результат.КонтекстДиагностики;

	Если Результат.Успех Тогда
	
		ТекстЗаголовка = НСтр("ru = 'Отправка приглашений получателям'");
		
		ОтправленоПриглашений = Результат.КоличествоОтправленных;
		ШаблонСообщения = НСтр("ru = 'Отправлено приглашений: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, ОтправленоПриглашений);

		ПоказатьОповещениеПользователя(ТекстЗаголовка, , ТекстСообщения);

		ОбновитьДинамическийСписокТекущегоРаздела();
		
	КонецЕсли;

	Если ОбработкаНеисправностейБЭДКлиентСервер.ЕстьОшибки(КонтекстДиагностики) Тогда
			ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(КонтекстДиагностики);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПринятиеПриглашений()

	ОтправитьОтветНаПриглашения(ОтветНаПриглашение_Принять());

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьОтветНаПриглашения(Действие)

	ОчиститьСообщения();
	ДанныеПриглашений = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, 
	"КлючПриглашения, ИдентификаторОрганизации, Организация, ИдентификаторКонтрагента, СпособОбменаЭД, Контрагент, НовыйКонтрагент");
	
	ВходящиеПриглашения = Новый Массив;

	Для Каждого ДанныеПриглашения Из ДанныеПриглашений Цикл
		ВходящееПриглашение = СинхронизацияЭДОКлиент.НовоеВходящееПриглашение();
		ЗаполнитьЗначенияСвойств(ВходящееПриглашение, ДанныеПриглашения, , "Контрагент");
		Если ТипЗнч(ДанныеПриглашения.Контрагент) = ТипЗнч(ПустойКонтрагент) Тогда
			ВходящееПриглашение.Контрагент = ДанныеПриглашения.Контрагент;
		Иначе
			ВходящееПриглашение.Контрагент = ПустойКонтрагент;
		КонецЕсли;
		ВходящееПриглашение.СпособОбмена = ДанныеПриглашения.СпособОбменаЭД;
		ВходящиеПриглашения.Добавить(ВходящееПриглашение);
	КонецЦикла;
	
	ДополнительныеПараметрыОповещения = Новый Структура("ОтветНаПриглашение", Действие);
	Оповещение = Новый ОписаниеОповещения("ПослеОтправкиОтветовНаПриглашения", ЭтотОбъект, 
		ДополнительныеПараметрыОповещения);

	Если Действие = ОтветНаПриглашение_Принять() Тогда
		СинхронизацияЭДОКлиент.ПринятьПриглашения(ВходящиеПриглашения, ЭтотОбъект, Оповещение);
	ИначеЕсли Действие = ОтветНаПриглашение_Отклонить() Тогда
		СинхронизацияЭДОКлиент.ОтклонитьПриглашения(ВходящиеПриглашения, ЭтотОбъект, Оповещение);
	ИначеЕсли Действие = ОтветНаПриглашение_Отозвать() Тогда
		СинхронизацияЭДОКлиент.ОтозватьПриглашения(ВходящиеПриглашения, ЭтотОбъект, Оповещение);
	Иначе
		Возврат;
	КонецЕсли; 

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОтветНаПриглашение_Принять()
	Возврат "Принять";
КонецФункции  

&НаКлиентеНаСервереБезКонтекста
Функция ОтветНаПриглашение_Отклонить()
	Возврат "Отклонить";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОтветНаПриглашение_Отозвать()
	Возврат "Отозвать";
КонецФункции

&НаКлиенте
Процедура ПослеОтправкиОтветовНаПриглашения(Результат, Контекст) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	КонтекстДиагностики = Результат.КонтекстДиагностики;

	Если Результат.Успех Тогда
		
		КоличествоОбработанныхПриглашений = Результат.КоличествоОбработанных;
		
		Если Контекст.ОтветНаПриглашение = ОтветНаПриглашение_Принять() Тогда
			ТекстЗаголовка = НСтр("ru = 'Принимаются приглашения'");
			ШаблонСообщения = НСтр("ru = 'Принято приглашений: %1'");
			СнятьБлокировкуЭлементов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Элементы.КомандаПринятьПриглашения.Имя));
		ИначеЕсли Контекст.ОтветНаПриглашение = ОтветНаПриглашение_Отклонить() Тогда
			ТекстЗаголовка = НСтр("ru = 'Отклоняются приглашения'");
			ШаблонСообщения = НСтр("ru = 'Отклонено приглашений: %1'");
			СнятьБлокировкуЭлементов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Элементы.КомандаОтклонитьПриглашения.Имя));
		ИначеЕсли Контекст.ОтветНаПриглашение = ОтветНаПриглашение_Отозвать() Тогда
			ТекстЗаголовка = НСтр("ru = 'Отзываются приглашения'");
			ШаблонСообщения = НСтр("ru = 'Отозвано приглашений: %1'");
		Иначе
			Возврат;
		КонецЕсли;

		ТекстСообщения = СтрШаблон(ШаблонСообщения, КоличествоОбработанныхПриглашений);

		ПоказатьОповещениеПользователя(ТекстЗаголовка, , ТекстСообщения);

		ОбновитьДинамическийСписокТекущегоРаздела();
	    УстановитьСтраницуДействийСПриглашением();
	КонецЕсли;

	Если ОбработкаНеисправностейБЭДКлиентСервер.ЕстьОшибки(КонтекстДиагностики) Тогда
		ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(КонтекстДиагностики);			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтраницуДействийСПриглашением()
	
	Если ТекущийРаздел <> "Приглашения" Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийСписок = Элементы[ТекущийРаздел];
	ТекущиеДанные = ТекущийСписок.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаКнопокПринятьПриглашения.Видимость = Ложь;
	Элементы.ГруппаКнопокОтправитьПриглашения.Видимость = Ложь;
	Элементы.ГруппаКнопокПринятьПриглашенияКонтекстноеМеню.Видимость = Ложь;
	Элементы.ГруппаКнопокОтправитьПриглашенияКонтекстноеМеню.Видимость = Ложь;
		
	Если ТекущиеДанные.СтатусПодключения =
		ПредопределенноеЗначение("Перечисление.СтатусыПриглашений.ТребуетсяСогласие") Тогда
		
		Элементы.СтраницыКомандыСпискаПриглашения.ТекущаяСтраница = Элементы.СтраницаПринятьПриглашение;
		Элементы.ГруппаКнопокПринятьПриглашения.Видимость = Истина;
		Элементы.ГруппаКнопокПринятьПриглашенияКонтекстноеМеню.Видимость = Истина;
			
	ИначеЕсли ТекущиеДанные.СтатусПодключения = 
		ПредопределенноеЗначение("Перечисление.СтатусыПриглашений.ТребуетсяОтправить") Тогда
		
		Элементы.СтраницыКомандыСпискаПриглашения.ТекущаяСтраница = Элементы.СтраницаОтправить;
		Элементы.ГруппаКнопокОтправитьПриглашения.Видимость = Истина;
		Элементы.ГруппаКнопокОтправитьПриглашенияКонтекстноеМеню.Видимость = Истина;
		
	Иначе
		
		Элементы.СтраницыКомандыСпискаПриглашения.ТекущаяСтраница = Элементы.СтраницаНетДействийСПриглашением;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОтклонениеПриглашений()

	ОтправитьОтветНаПриглашения(ОтветНаПриглашение_Отклонить());

КонецПроцедуры

#КонецОбласти

#Область ПредпросмотрЭлектронногоДокумента

&НаКлиенте
Процедура ОбновитьОбластьПросмотра()
	
	ТекущиеДанные = ТекущиеДанныеТаблицыЭлектронныхДокументов();
	
	ОчиститьКэшРеквизитовТекущегоФайла();
	
	Если ТекущиеДанные = Неопределено Или Не ОтображатьОбластьПредпросмотра
		Или ВключенаГруппировкаСтрок(ТекущиеДанные) Тогда
		НастроитьВидимостьГруппыРеквизитовИОтраженияВУчете(ЭтотОбъект);
		УстановитьСтраницуПредпросмотраДокументНеВыбран(ЭтотОбъект);
		Возврат;
	КонецЕсли;
	 
	НастроитьВидимостьКомандТекущейСтроки(ТекущиеДанные);
	
	ОбновитьОбластьПросмотраНаСервере(ТекущиеДанные);
	
	НастроитьПанелиПросмотра();

	ОжидатьПолученияАсинхронныхДанных();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РаспознатьДокумент(ЭлектронныйДокумент)
		
	Результат = Ложь;
	СообщениеОтправителя = ЭлектронныеДокументыЭДО.СообщениеОтправителя(ЭлектронныйДокумент);
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС")
		И ЭлектронныйДокумент.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСерверЕИС Тогда
		МодульЭлектронноеАктированиеЕИС = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИС");
		РезультатРаспознавания =
		МодульЭлектронноеАктированиеЕИС.РаспознатьСообщение(СообщениеОтправителя);
		Результат = ЗначениеЗаполнено(РезультатРаспознавания);
	Иначе 
		Попытка
			Результат = ЗначениеЗаполнено(ЭлектронныеДокументыЭДО.РаспознатьСообщение(СообщениеОтправителя));
		Исключение
			Результат = Ложь;	
		КонецПопытки;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура УстановитьПараметрыПредпросмотра()
	
	ТекущиеДанные = ТекущиеДанныеТаблицыЭлектронныхДокументов();
	
	Если ТекущиеДанные <> Неопределено И Не ВключенаГруппировкаСтрок(ТекущиеДанные) Тогда
		ТекущийЭлектронныйДокумент = ТекущиеДанные.ЭлектронныйДокумент;
	Иначе
		ТекущийЭлектронныйДокумент = Неопределено;
		Предпросмотр = Неопределено; 
		ТекущийДокументУчетаПредставление = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтраницуОжиданияПредпросмотра(ПредыдущийРаздел)
	
	ТекущиеДанные = ТекущиеДанныеТаблицыЭлектронныхДокументов();
	
	Если ТекущиеДанные <> Неопределено И Не ВключенаГруппировкаСтрок(ТекущиеДанные) Тогда
		Если ТекущийЭлектронныйДокумент <> ТекущиеДанные.ЭлектронныйДокумент 
			И (ПредыдущийРаздел = "Сформировать" Или ПредыдущийРаздел = "Приглашения") Тогда
			Элементы.СтраницыПредпросмотр.ТекущаяСтраница = Элементы.СтраницаОжидание;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСтраницуПредпросмотраДокументНеВыбран(Форма)
	Форма.Элементы.СтраницыПредпросмотр.ТекущаяСтраница = Форма.Элементы.СтраницаНеВыбранДокумент;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьВидимостьГруппыРеквизитовИОтраженияВУчете(Форма, ТекущийДокумент = Неопределено)
	Форма.Элементы.ГруппаРеквизитыИОтражениеВУчете.Видимость = ЗначениеЗаполнено(ТекущийДокумент);
КонецПроцедуры

#Область ОбновлениеДанных

&НаСервере
Процедура ОбновитьОбластьПросмотраНаСервере(ТекущиеДанные)
	
	ЛегкийИнтерфейсДокументовЭДО.ПрекратитьОжиданиеПолученияДанныхКомпонентовПросмотраДокумента(ОперацияПолученияДанных);
	
	ЗаполнитьРеквизитыФормыНаОснованииТекущихДанных(ТекущиеДанные);
	
	ДанныеКомпонентов = ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеКомпонентовПросмотраДокумента(
		"ПанельИтогов, ПанельОтветственного, ПанельОтраженияВУчете, ПанельВизуализацииТекущихДел, 
		|ПанельПредставленияФайла");
	
	ОбновитьДанныеКомпонентов(ДанныеКомпонентов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПослеСменыОтветственного(ТекущиеДанные)

	ОбновитьДанныеПослеСменыОтветственногоНаСервере(ТекущиеДанные);
	
	НастроитьПанелиПросмотра();
	
	ОжидатьПолученияАсинхронныхДанных();

КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПослеСменыОтветственногоНаСервере(ТекущиеДанные)
	
	ЗаполнитьРеквизитыФормыНаОснованииТекущихДанных(ТекущиеДанные);
	
	ДанныеКомпонентов = ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеКомпонентовПросмотраДокумента("ПанельОтветственного");
	
	ОбновитьДанныеКомпонентов(ДанныеКомпонентов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПослеИзмененияОбъектовУчета()
	
	ОбновитьДанныеПослеИзмененияОбъектовУчетаНаСервере();
	
	НастроитьПанелиПросмотра();
	
	ОжидатьПолученияАсинхронныхДанных();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПослеИзмененияОбъектовУчетаНаСервере()

	ДанныеКомпонентов = ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеКомпонентовПросмотраДокумента("ПанельОтраженияВУчете");
	
	ОбновитьДанныеКомпонентов(ДанныеКомпонентов);

КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеКомпонентов(ДанныеКомпонентов)
	
	ПараметрыЗаполнения = ПараметрыЗаполненияДанныхКомпонентовПросмотра();
	
	ОперацияПолученияДанных = ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентовПросмотраДокумента(
		ДанныеКомпонентов, ПараметрыЗаполнения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыФормыНаОснованииТекущихДанных(ТекущиеДанные)
	
	СостояниеЭДОТекущегоДокумента = ТекущиеДанные.СостояниеЭДО;
	ТипТекущегоДокумента = ТекущиеДанные.ТипДокумента;
	ВидТекущегоДокумента = ТекущиеДанные.ВидДокумента;
	ТекущийДокументОблачногоЭДО = ТекущиеДанные.ЭтоОблачныйЭДО;
	ОтветственныйТекущегоДокумента = ТекущиеДанные.Ответственный;
	ОрганизацияТекущегоДокумента = ТекущиеДанные.Организация;
	КонтрагентТекущегоДокумента = ТекущиеДанные.Контрагент;
	СуммаТекущегоДокумента = ТекущиеДанные.СуммаДокумента;
	ТекущийДокументПомеченНаУдаление = ТекущиеДанные.ПометкаУдаления;
	ФорматОсновногоТитулаТекущегоДокумента = ТекущиеДанные.ФорматОсновногоТитула;
	
	НаКонтроле = ИнтеграцияЭДО.НоменклатураКонтрагентовНаКонтроле(
		Новый Структура("ЭлектронныйДокумент", ТекущийЭлектронныйДокумент));
	ЕстьНоменклатураНаКонтролеТекущегоДокумента = ЗначениеЗаполнено(НаКонтроле);
	
	ЭлектронныеДокументыПакета = Новый Массив;
	ЭлектронныеДокументыПакета.Добавить(ТекущийЭлектронныйДокумент);
	ПакетыДокументовЭДО.ДополнитьДокументамиПакетов(ЭлектронныеДокументыПакета);
	СоставПакетаТекущегоДокумента.Очистить();
	Для Каждого ЭлектронныйДокумент Из ЭлектронныеДокументыПакета Цикл
		НовыйДокументПакета = СоставПакетаТекущегоДокумента.Добавить();
		НовыйДокументПакета.ЭлектронныйДокумент = ЭлектронныйДокумент;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКэшРеквизитовТекущегоФайла()
	
	ТекущийФайлАдресВХранилище = Неопределено;
	ТекущийФайлНомерИконки = Неопределено;
	ТекущийФайлПредставление = Неопределено;
	
КонецПроцедуры

#Область АсинхронноеОбновлениеДанных

&НаКлиенте
Процедура ОжидатьПолученияАсинхронныхДанных()

	ДлительнаяОперация = ОперацияПолученияДанных; // См. ДлительныеОперации.ВыполнитьФункцию

	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗаполнитьАсинхронныеДанныеПослеОжидания", ЭтотОбъект);

	Оповещение = Новый ОписаниеОповещения(
		"ОжидатьПолученияДанныхКомпонентовПросмотраПослеДлительнойОперации",
		ЛегкийИнтерфейсДокументовЭДОКлиент, ОповещениеОЗавершении);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАсинхронныеДанныеПослеОжидания(Результат, ДополнительныеПараметры) Экспорт

	Если ОперацияПолученияДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Результат.Успех Тогда
		// Для случаев, когда отмена предыдущей операции получения пройти не успела, но результат уже неактуален.
		Если Результат.ОперацияПолученияДанных.Свойство("ИдентификаторЗадания")
			И Не Результат.ОперацияПолученияДанных.ИдентификаторЗадания = ОперацияПолученияДанных.ИдентификаторЗадания Тогда
			Возврат;
		КонецЕсли;
		ОперацияПолученияДанных = Результат.ОперацияПолученияДанных;
		ОбновитьДанныеПослеЗаполненияАсинхронныхДанных();
		НастроитьПанелиПросмотра();
	Иначе
		Элементы.СтраницыПредпросмотр.ТекущаяСтраница = Элементы.СтраницаОшибка;
		ОперацияПолученияДанных = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПослеЗаполненияАсинхронныхДанных()

	ДанныеКомпонентов = ЛегкийИнтерфейсДокументовЭДО.РезультатЗаполненияДанныхКомпонентовПросмотраДокументаАсинхронноВФоне(
		ОперацияПолученияДанных);
		
	ОперацияПолученияДанных = Неопределено;
	
	Если ДанныеКомпонентов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельПредставленияФайла) Тогда
		ВывестиPDFДокумент(ДанныеКомпонентов.ПанельПредставленияФайла.Данные);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти // АсинхронноеОбновлениеДанных

#КонецОбласти // ОбновлениеДанных

#Область ПолучениеДанных

&НаСервере
Функция ПараметрыЗаполненияДанныхКомпонентовПросмотра()

	ПараметрыЗаполнения = ЛегкийИнтерфейсДокументовЭДО.НовыеПараметрыПолученияДанныхКомпонентов();

	ПараметрыЗаполнения.ИдентификаторФормы = УникальныйИдентификатор;
	ПараметрыЗаполнения.СвойстваДокумента = СвойстваТекущегоДокументаДляПолученияДанныхКомпонентовПросмотра();
	
	Возврат ПараметрыЗаполнения;

КонецФункции

&НаСервере
Функция СвойстваТекущегоДокументаДляПолученияДанныхКомпонентовПросмотра()
	
	СвойстваДокумента = ЛегкийИнтерфейсДокументовЭДО.НовыеСвойстваДокументаДляПолученияДанныхКомпонентовПросмотра();
	СвойстваДокумента.Ссылка = ТекущийЭлектронныйДокумент;
	СвойстваДокумента.ВидДокумента = ВидТекущегоДокумента;
	СвойстваДокумента.ТипДокумента = ТипТекущегоДокумента;
	СвойстваДокумента.СуммаДокумента = СуммаТекущегоДокумента;
	СвойстваДокумента.Организация = ОрганизацияТекущегоДокумента;
	СвойстваДокумента.Контрагент = КонтрагентТекущегоДокумента;
	СвойстваДокумента.Ответственный = ОтветственныйТекущегоДокумента;
	СвойстваДокумента.ЭтоОблачныйЭДО = ТекущийДокументОблачногоЭДО;
	СвойстваДокумента.ПометкаУдаления = ТекущийДокументПомеченНаУдаление;
	СвойстваДокумента.ФорматОсновногоТитула = ФорматОсновногоТитулаТекущегоДокумента;
	Возврат СвойстваДокумента;
	
КонецФункции

#КонецОбласти // ПолучениеДанных

#Область ПредставлениеДанных

&НаКлиенте
Процедура НастроитьПанелиПросмотра()
	
	НастроитьВидимостьГруппыРеквизитовИОтраженияВУчете(ЭтотОбъект, ТекущийЭлектронныйДокумент);
	
	Если ДанныеКомпонентов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельИтогов) Тогда
		НастроитьПанельИтогов(ДанныеКомпонентов.ПанельИтогов);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельОтветственного) Тогда
		НастроитьПанельОтветственного(ДанныеКомпонентов.ПанельОтветственного);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельОтраженияВУчете) Тогда
		НастроитьПанельОтраженияВУчете(ДанныеКомпонентов.ПанельОтраженияВУчете);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельВизуализацииТекущихДел) Тогда
		НастроитьПанельВизуализации(ДанныеКомпонентов.ПанельВизуализацииТекущихДел);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельПредставленияФайла) Тогда
		НастроитьПанельПредставленияФайла(ДанныеКомпонентов.ПанельПредставленияФайла);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ДанныеКомпонента - См. ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеКомпонентаПанельИтогов
&НаКлиенте
Процедура НастроитьПанельИтогов(ДанныеКомпонента)

	Если ДанныеКомпонента.АсинхронноеПолучение Тогда
		Элементы.ГруппаРеквизитыСуммаНДС.Видимость = Ложь;
		Элементы.КартинкаЗагрузкаИтоговДокумента.Видимость = Истина;
		Возврат;
	КонецЕсли;
	
	ПредставлениеДанныхКомпонента = 
		ЛегкийИнтерфейсДокументовЭДОКлиентСервер.ПредставлениеДанныхПоДаннымКомпонентаПанельИтогов(ДанныеКомпонента);
	
	Элементы.ГруппаРеквизитыСуммаНДС.Видимость = Истина;
	Элементы.КартинкаЗагрузкаИтоговДокумента.Видимость = Ложь;

	Элементы.ГруппаПанельИтогов.Видимость = ЗначениеЗаполнено(ПредставлениеДанныхКомпонента.СуммаДокументаСтрокой);
	Элементы.НадписьСуммаЗначение.Заголовок = ПредставлениеДанныхКомпонента.СуммаДокументаСтрокой;
	
	Элементы.НадписьНДСЗначение.Видимость = ЗначениеЗаполнено(ПредставлениеДанныхКомпонента.НДСДокументаСтрокой);
	Элементы.НадписьНДСЗначение.Заголовок = ПредставлениеДанныхКомпонента.НДСДокументаСтрокой;
	
КонецПроцедуры

// Параметры:
//  ДанныеКомпонента - См. ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеКомпонентаПанельОтветственного
&НаКлиенте
Процедура НастроитьПанельОтветственного(ДанныеКомпонента)

	Элементы.КнопкаСменитьОтветственного.Заголовок = ?(ЗначениеЗаполнено(ДанныеКомпонента.ОтветственныйПоДокументу),
		Строка(ДанныеКомпонента.ОтветственныйПоДокументу), НСтр("ru='Не указан'"));

КонецПроцедуры

// Параметры:
//  ДанныеКомпонента - См. ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеКомпонентаПанельОтраженияВУчете
&НаКлиенте
Процедура НастроитьПанельОтраженияВУчете(ДанныеКомпонента)

	ОбъектыУчетаТекущегоДокумента.Очистить();
	Для Каждого ОбъектУчета Из ДанныеКомпонента.ОбъектыУчетаДокумента Цикл
		НоваяСтрока = ОбъектыУчетаТекущегоДокумента.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОбъектУчета);
	КонецЦикла;
	ЕстьВозможностьОтраженияВУчетеТекущегоДокумента = ДанныеКомпонента.ЕстьВозможностьОтраженияВУчете;
	ЕстьНоменклатураНаКонтролеТекущегоДокумента = ДанныеКомпонента.ЕстьНоменклатураНаКонтроле;
	ЕстьПравоОбработкиДокументов = ДанныеКомпонента.ЕстьПравоОбработкиДокументов;
	
	ПредставлениеДанныхКомпонента = 
		ЛегкийИнтерфейсДокументовЭДОКлиентСервер.ПредставлениеДанныхПоДаннымКомпонентаПанельОтраженияВУчете(
			ДанныеКомпонента);
	
	СпособыОбработкиОсновные = ПредставлениеДанныхКомпонента.СпособыОбработкиОсновные;
	СпособыОбработкиДополнительные = ПредставлениеДанныхКомпонента.СпособыОбработкиДополнительные;
	СписокСоздания = ПредставлениеДанныхКомпонента.СписокСоздания;
	СписокПодбора = ПредставлениеДанныхКомпонента.СписокПодбора;
	
	Элементы.ГруппаПанельОтраженияВУчете.Видимость = Истина;
	Элементы.КартинкаПанельОтветственногоРазделитель1.Видимость = Истина;
		
	ЭтоВходящийЭДО = (ТипЗнч(ТекущийЭлектронныйДокумент) = Тип("ДокументСсылка.ЭлектронныйДокументВходящийЭДО"));
	
	КоличествоОбъектовУчета = ОбъектыУчетаТекущегоДокумента.Количество();
	ИспользуетсяДополнительныйДокумент = СпособыОбработкиДополнительные.Количество() > 0;

	НетОбъектовУчета = (КоличествоОбъектовУчета = 0);
	ОдинОбъектУчета = (КоличествоОбъектовУчета = 1);
	ДваОбъектаУчета = (КоличествоОбъектовУчета = 2);
	МногоОбъектовУчета = (КоличествоОбъектовУчета > 2);

	Если НетОбъектовУчета И Не ЭтоВходящийЭДО Тогда
		Элементы.ГруппаПанельОтраженияВУчете.Видимость = Ложь;
		Элементы.КартинкаПанельОтветственногоРазделитель1.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаСоздатьДокументУчета.Видимость = НетОбъектовУчета И ЕстьВозможностьОтраженияВУчетеТекущегоДокумента
		 И ЕстьПравоОбработкиДокументов;

	Элементы.ГруппаДокументУчета1.Видимость = ЕстьВозможностьОтраженияВУчетеТекущегоДокумента Или Не НетОбъектовУчета;
	Элементы.КнопкаПодобратьДокументУчета1.Видимость = НетОбъектовУчета
		И ЕстьВозможностьОтраженияВУчетеТекущегоДокумента И ЕстьПравоОбработкиДокументов;
	Элементы.КнопкаОткрытьДокументУчета1.Видимость = ОдинОбъектУчета Или ДваОбъектаУчета;

	Элементы.ГруппаДокументУчета2.Видимость = Не НетОбъектовУчета И ЕстьВозможностьОтраженияВУчетеТекущегоДокумента 
		Или ДваОбъектаУчета;
	Элементы.КнопкаПодобратьДокументУчета2.Видимость = ОдинОбъектУчета И ИспользуетсяДополнительныйДокумент
		 И ЕстьПравоОбработкиДокументов;
	Элементы.КнопкаОткрытьДокументУчета2.Видимость = ДваОбъектаУчета;

	Если Не ЕстьПравоОбработкиДокументов И НетОбъектовУчета Тогда
		Элементы.ГруппаПанельОтраженияВУчете.Видимость = Ложь;
		Элементы.КартинкаПанельОтветственногоРазделитель1.Видимость = Ложь;
	ИначеЕсли Не ЕстьПравоОбработкиДокументов И ОдинОбъектУчета Тогда
		Элементы.КнопкаОткрытьДокументУчета2.Видимость = Ложь;
	КонецЕсли;

	Если ОдинОбъектУчета Тогда
		Элементы.КнопкаОткрытьДокументУчета1.Заголовок = Строка(ОбъектыУчетаТекущегоДокумента[0].ОбъектУчета);
	КонецЕсли;

	Если ДваОбъектаУчета Тогда
		Элементы.КнопкаОткрытьДокументУчета1.Заголовок = Строка(ОбъектыУчетаТекущегоДокумента[0].ОбъектУчета);
		Элементы.КнопкаОткрытьДокументУчета2.Заголовок = Строка(ОбъектыУчетаТекущегоДокумента[1].ОбъектУчета);
	КонецЕсли;

	Если ИспользуетсяДополнительныйДокумент Тогда

		ЕстьОсновнойДокумент = ЛегкийИнтерфейсДокументовЭДОКлиентСервер.ЕстьОтражениеВОбъектУчетаКарточкиДокумента(
			ОбъектыУчетаТекущегоДокумента, СпособыОбработкиОсновные);

		ТекстВторогоДокумента =  НСтр("ru = 'Подобрать'");

		Если ОдинОбъектУчета Тогда

			Если ЕстьОсновнойДокумент И СпособыОбработкиДополнительные.Количество() = 1 Тогда

				ТекстВторогоДокумента = СтрШаблон(НСтр("ru = 'Подобрать ""%1""'"),
					СпособыОбработкиДополнительные[0].Представление);

			ИначеЕсли Не ЕстьОсновнойДокумент И СпособыОбработкиОсновные.Количество() = 1 Тогда

				ТекстВторогоДокумента = СтрШаблон(НСтр("ru = 'Подобрать ""%1""'"),
					СпособыОбработкиОсновные[0].Представление);

			КонецЕсли;

		КонецЕсли;

		Элементы.КнопкаПодобратьДокументУчета2.Заголовок = ТекстВторогоДокумента;

	КонецЕсли;

	Если Не ЕстьВозможностьОтраженияВУчетеТекущегоДокумента И Не МногоОбъектовУчета
		Или (ОдинОбъектУчета И Не ИспользуетсяДополнительныйДокумент) Или ДваОбъектаУчета Тогда
		Элементы.КнопкаПоказатьВсеДокументыУчета.Заголовок = НСтр("ru = 'Подобрать'");
	ИначеЕсли МногоОбъектовУчета Тогда
		Элементы.КнопкаПоказатьВсеДокументыУчета.Заголовок =
			СтрШаблон(НСтр("ru = 'Список документов (%1)'"), КоличествоОбъектовУчета);
	Иначе
		Элементы.КнопкаПоказатьВсеДокументыУчета.Заголовок = НСтр("ru = 'Все документы'");
	КонецЕсли;

	Элементы.НадписьДокументыУчета.Заголовок = ?(ДваОбъектаУчета Или МногоОбъектовУчета,
		НСтр("ru = 'Документы учета:'"),
		НСтр("ru = 'Документ учета:'"));

	Элементы.ГруппаВсеДокументыУчета.Видимость = МногоОбъектовУчета
		Или Не ЕстьВозможностьОтраженияВУчетеТекущегоДокумента И НетОбъектовУчета
		Или ДанныеКомпонента.ЭтоПрикладнойВидДокумента;
	
	Элементы.ДекорацияОтступОтражениеВУчете.Видимость = Не НетОбъектовУчета И Не МногоОбъектовУчета;
	
	Если ДанныеКомпонента.ЭтоВнутреннийВидДокумента И Не МногоОбъектовУчета Тогда
		Элементы.КнопкаПоказатьВсеДокументыУчета.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

// Параметры:
//  ДанныеКомпонента - См. ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеКомпонентаПанельВизуализацииТекущихДел
&НаКлиенте
Процедура НастроитьПанельВизуализации(ДанныеКомпонента)
	
	Если ДанныеКомпонента.АсинхронноеПолучение Тогда
		Элементы.СтраницыПредпросмотр.ТекущаяСтраница = Элементы.СтраницаОжидание;
		Возврат;
	КонецЕсли;
	
	Если ДанныеКомпонента.ФайлПомеченНаУдаление Тогда
		Элементы.СтраницыПредпросмотр.ТекущаяСтраница = Элементы.СтраницаПредставлениеПомеченногоНаУдаление;
		Возврат;
	КонецЕсли;
	
	Если ДанныеКомпонента.ЕстьОшибка Тогда
		Элементы.СтраницыПредпросмотр.ТекущаяСтраница = Элементы.СтраницаОшибка;
		Возврат;
	КонецЕсли;
	
	Если ДанныеКомпонента.ТипДанных = 
		ПредопределенноеЗначение("Перечисление.ТипыДанныхВизуализацииДокументаЭДО.ИмяФайла") Тогда
		
		ТекущийФайлПредставление = ДанныеКомпонента.НаименованиеФайла;
		ТекущийФайлНомерИконки = РаботаСФайламиБЭДКлиентСервер.ИндексКартинкиПоРасширениюФайла(
			ДанныеКомпонента.РасширениеФайла);
		
		Элементы.СтраницыПредпросмотр.ТекущаяСтраница = Элементы.СтраницаФайл;
		
		Если ДанныеКомпонента.ФайлМожноПроштамповать Тогда
			Элементы.СтраницыПредпросмотраФайла.ТекущаяСтраница = Элементы.СтраницаФайлСВизуализацией;
			Элементы.КнопкаОткрытьФайлСВизуализацией.Заголовок = ТекущийФайлПредставление;
			Элементы.СтраницыПредставленияФайла.ТекущаяСтраница = Элементы.СтраницаПредставлениеФайлаОжидание;
		Иначе
			Элементы.СтраницыПредпросмотраФайла.ТекущаяСтраница = Элементы.СтраницаФайлБезВизуализации;
			Элементы.КнопкаОткрытьФайлБезВизуализации.Заголовок = ТекущийФайлПредставление;
		КонецЕсли;
	
	ИначеЕсли ДанныеКомпонента.ТипДанных = 
		ПредопределенноеЗначение("Перечисление.ТипыДанныхВизуализацииДокументаЭДО.HTMLДокумент") Тогда
		
		ПредпросмотрHTML = ДанныеКомпонента.Данные;
		
		Элементы.СтраницыПредпросмотр.ТекущаяСтраница = Элементы.СтраницаHTMLДокумент;
	
	ИначеЕсли ДанныеКомпонента.ТипДанных = 
		ПредопределенноеЗначение("Перечисление.ТипыДанныхВизуализацииДокументаЭДО.ТабличныйДокумент") Тогда
		
		Предпросмотр = ДанныеКомпонента.Данные;
		
		Элементы.СтраницыПредпросмотр.ТекущаяСтраница = Элементы.СтраницаТабличныйДокументИнформацияОтправителя; 
	
	Иначе
		
		УстановитьСтраницуПредпросмотраДокументНеВыбран(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ДанныеКомпонента - См. ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеКомпонентаПанельПредставленияФайла
&НаКлиенте
Процедура НастроитьПанельПредставленияФайла(ДанныеКомпонента)
		
	Если ДанныеКомпонента.АсинхронноеПолучение Тогда
		Элементы.СтраницыПредставленияФайла.ТекущаяСтраница = Элементы.СтраницаПредставлениеФайлаОжидание;
		Возврат;
	КонецЕсли;
	
	Если ДанныеКомпонента.ЕстьОшибка Или ДанныеКомпонента.Данные = Неопределено Тогда
		Элементы.СтраницыПредставленияФайла.ТекущаяСтраница = Элементы.СтраницаПредставлениеФайлаОшибка;
		Возврат;
	КонецЕсли;
	
	Элементы.СтраницыПредставленияФайла.ТекущаяСтраница = Элементы.СтраницаПредставлениеФайлаЗагружено;
	ТекущийФайлАдресВХранилище = ПоместитьВоВременноеХранилище(ДанныеКомпонента.Данные, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиPDFДокумент(ДанныеФайла) 
	
	Если Не ЗначениеЗаполнено(ДанныеФайла) Тогда
		Возврат;
	КонецЕсли;
	
	ПотокДанныхФайла = Новый ПотокВПамяти;
	ЗаписьДанных = Новый ЗаписьДанных(ПотокДанныхФайла);
	ЗаписьДанных.Записать(ДанныеФайла);
	ЗаписьДанных.Закрыть();

	ТекущийДокументPDF = Новый ДокументPDF;
	ТекущийДокументPDF.Прочитать(ПотокДанныхФайла);
	
КонецПроцедуры
	
#КонецОбласти // ПредставлениеДанных

#КонецОбласти 

 #Область ВидимостьЭлементовФормы
 
 &НаСервере
Процедура КоличествоДокументов()
	
	КоличествоНовыхВходящие 	= 0;			
	КоличествоНовыхИсходящие 	= 0;
	КоличествоПриглашений		= 0;	
	КоличествоСоздать 			= 0;
	
	СостоянияЭДО = СостоянияДокументовТребующиеВнимания();
		
	Запрос = Новый Запрос;
	ТекстЗапросаВходящиеТребуютВнимания(Запрос);
	Запрос.УстановитьПараметр("Состояние", СостоянияЭДО);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	КоличествоНовыхВходящие = ВыборкаДетальныеЗаписи.Количество();
	
	Запрос = Новый Запрос;
	ТекстЗапросаИсходящиеТребуютВнимания(Запрос);
	Запрос.УстановитьПараметр("Состояние", СостоянияЭДО);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	КоличествоНовыхИсходящие = ВыборкаДетальныеЗаписи.Количество();
		
	Запрос = Новый Запрос;
	ТекстЗапросаСоздатьНовый(Запрос);
	
	Запрос.УстановитьПараметр("ТипыДоговорСКонтрагентомЭДО", ТипыДоговорСКонтрагентомЭДО);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	КоличествоСоздать = ВыборкаДетальныеЗаписи.Количество();
	
	Если КоличествоСоздать = 0 Тогда
		Элементы.КомандаПодписатьОтправить.Видимость = Ложь;
	Иначе
		Элементы.КомандаПодписатьОтправить.Видимость = Истина;
	КонецЕсли;
	
	СтатусыПриглашений = Новый СписокЗначений; 
	СтатусыПриглашений.Добавить(Перечисления.СтатусыПриглашений.ТребуетсяСогласие);
	СтатусыПриглашений.Добавить(Перечисления.СтатусыПриглашений.ТребуетсяОтправить);
	ПустойКонтрагент = Метаданные.ОпределяемыеТипы.КонтрагентБЭД.Тип.ПривестиЗначение();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОсновнаяТаблица.Ключ КАК КлючПриглашения,
		|	ОсновнаяТаблица.Статус КАК СтатусПодключения,
		|	ВЫБОР
		|		КОГДА ОсновнаяТаблица.Контрагент = &ПустойКонтрагент
		|				ИЛИ ОсновнаяТаблица.Контрагент = НЕОПРЕДЕЛЕНО
		|			ТОГДА ОсновнаяТаблица.Наименование + "" ("" + &ИНН + "": "" + ОсновнаяТаблица.ИНН + "")""
		|		ИНАЧЕ ОсновнаяТаблица.Контрагент
		|	КОНЕЦ КАК Контрагент,
		|	УчетныеЗаписиЭДО.Организация КАК Организация,
		|	ОсновнаяТаблица.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
		|	ОсновнаяТаблица.Ознакомиться КАК Ознакомиться,
		|	ОсновнаяТаблица.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	ВЫБОР
		|		КОГДА ОсновнаяТаблица.Контрагент = &ПустойКонтрагент
		|				ИЛИ ОсновнаяТаблица.Контрагент = НЕОПРЕДЕЛЕНО
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НовыйКонтрагент
		|ИЗ
		|	РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ОсновнаяТаблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
		|		ПО ОсновнаяТаблица.ИдентификаторОрганизации = УчетныеЗаписиЭДО.ИдентификаторЭДО
		|ГДЕ
		|	ОсновнаяТаблица.Контрагент <> &ПустойКонтрагент
		|	И ОсновнаяТаблица.ДатаИзмененияСтатуса <> ДАТАВРЕМЯ(1, 1, 1)
		|	И ОсновнаяТаблица.Статус В (&СтатусыПриглашений)";
	
	Запрос.УстановитьПараметр("ПустойКонтрагент", ПустойКонтрагент); 
	Запрос.УстановитьПараметр("СтатусыПриглашений", СтатусыПриглашений);
	Запрос.УстановитьПараметр("ИНН", НСтр("ru = 'ИНН'"));
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	КоличествоПриглашений = ВыборкаДетальныеЗаписи.Количество();
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТранспортныйКонтейнерЭДО.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ТранспортныйКонтейнерЭДО КАК ТранспортныйКонтейнерЭДО
		|ГДЕ
		|	НЕ ТранспортныйКонтейнерЭДО.ПометкаУдаления
		|	И НЕ ТранспортныйКонтейнерЭДО.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.УдалитьЧерезВебРесурсБанка)
		|	И ТранспортныйКонтейнерЭДО.Статус В(&СтатусыНеРаспакованныхТранспортныхСообщенийБЭД)
		|	И ТранспортныйКонтейнерЭДО.Направление = &Направление
		|{ГДЕ
		|	ТранспортныйКонтейнерЭДО.Направление}";
	
	СтатусыНеРаспакованныхТранспортныхСообщений = СтатусыНеРаспакованныхТранспортныхСообщенийБЭД();
	Запрос.УстановитьПараметр("СтатусыНеРаспакованныхТранспортныхСообщенийБЭД",
		СтатусыНеРаспакованныхТранспортныхСообщений); 
	
	ВходящееНаправление = ПредопределенноеЗначение("Перечисление.НаправленияЭДО.Входящий");
	Запрос.УстановитьПараметр("Направление",  
		ВходящееНаправление);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(); 
	
	КоличествоНераспакованныхКонтейнеров = ВыборкаДетальныеЗаписи.Количество();
	
	ПанельНавигации = Обработки.ИнтерфейсДокументовЭДО.ПолучитьМакет("ПанельНавигации_ru").ПолучитьТекст();
	
	Если ТекущийРаздел = "ВходящиеЭлектронныеДокументы" Тогда
		ПанельНавигации = СтрЗаменить(ПанельНавигации, "checkedbutton", "inbox");		
	ИначеЕсли ТекущийРаздел = "ИсходящиеЭлектронныеДокументы" Тогда 
		ПанельНавигации = СтрЗаменить(ПанельНавигации, "checkedbutton", "sent");
	ИначеЕсли ТекущийРаздел = "Сформировать" Тогда 
		ПанельНавигации = СтрЗаменить(ПанельНавигации, "checkedbutton", "create");
	ИначеЕсли ТекущийРаздел = "Приглашения" Тогда 
		ПанельНавигации = СтрЗаменить(ПанельНавигации, "checkedbutton", "invitation");
	ИначеЕсли ТекущийРаздел = "Ошибки" Тогда 
		ПанельНавигации = СтрЗаменить(ПанельНавигации, "checkedbutton", "error");
	КонецЕсли;
			
	Если КоличествоСоздать = 0 Тогда
		ПанельНавигации = СтрЗаменить(ПанельНавигации, "КоличествоСоздать", "");
	Иначе
		ПанельНавигации = СтрЗаменить(ПанельНавигации, "КоличествоСоздать", КоличествоСоздать);	
	КонецЕсли;
	
	Если КоличествоПриглашений = 0 Тогда
		ПанельНавигации = СтрЗаменить(ПанельНавигации, "КоличествоПриглашений", "");
	Иначе
		ПанельНавигации = СтрЗаменить(ПанельНавигации, "КоличествоПриглашений", КоличествоПриглашений);	
	КонецЕсли;
	
	Если КоличествоНовыхВходящие = 0 Тогда
		ПанельНавигации = СтрЗаменить(ПанельНавигации, "КоличествоВходящих", "");
	Иначе
		ПанельНавигации = СтрЗаменить(ПанельНавигации, "КоличествоВходящих", КоличествоНовыхВходящие);	
	КонецЕсли;
	
	Если КоличествоНовыхИсходящие = 0 Тогда
		ПанельНавигации = СтрЗаменить(ПанельНавигации, "КоличествоИсходящих", "");
	Иначе
		ПанельНавигации = СтрЗаменить(ПанельНавигации, "КоличествоИсходящих", КоличествоНовыхИсходящие);	
	КонецЕсли;

	Если КоличествоНераспакованныхКонтейнеров = 0 Тогда
		ПанельНавигации = СтрЗаменить(ПанельНавигации, "скрыть", "hidden");
		ПанельНавигации = СтрЗаменить(ПанельНавигации, "КоличествоНераспакованныхКонтейнеров", "");
	Иначе
		ПанельНавигации = СтрЗаменить(ПанельНавигации, "КоличествоНераспакованныхКонтейнеров", 
			КоличествоНераспакованныхКонтейнеров);	
	КонецЕсли;
				
КонецПроцедуры

&НаСервере
Процедура ТекстЗапросаСоздатьНовый(Запрос)
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СостоянияЭД.СсылкаНаОбъект КАК Документ
		|ИЗ
		|	РегистрСведений.СостоянияПоОбъектамУчетаЭДО КАК СостоянияЭД
		|ГДЕ
		|	СостоянияЭД.СостояниеЭДО = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.НеСформирован)
		|	И НЕ СостоянияЭД.СсылкаНаОбъект ССЫЛКА Документ.УдалитьПроизвольныйЭД
		|	И НЕ СостоянияЭД.СсылкаНаОбъект ССЫЛКА Документ.ТранспортныйКонтейнерЭДО
		|	И НЕ СостоянияЭД.СсылкаНаОбъект ССЫЛКА Справочник.НастройкиЭДО
		|	И НЕ СостоянияЭД.СсылкаНаОбъект ССЫЛКА Справочник.УдалитьСоглашенияОбИспользованииЭД
		|	И НЕ ТИПЗНАЧЕНИЯ(СостоянияЭД.СсылкаНаОбъект) В (&ТипыДоговорСКонтрагентомЭДО)
		|	И СостоянияЭД.Вид <> """"";
		
КонецПроцедуры

&НаСервере
Процедура ТекстЗапросаИсходящиеТребуютВнимания(Запрос)
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭлектронныеДокументыПереопределяемый.Ссылка КАК ЭлектронныйДокумент,
		|	ЭлектронныеДокументыПереопределяемый.Ответственный КАК Ответственный,
		|	СостоянияЭДОПереопределяемый.Состояние КАК СостояниеЭДО
		|ИЗ
		|	Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныеДокументыПереопределяемый
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияЭДОПереопределяемый
		|		ПО (СостоянияЭДОПереопределяемый.ЭлектронныйДокумент = ЭлектронныеДокументыПереопределяемый.Ссылка)
		|ГДЕ
		|	НЕ ЭлектронныеДокументыПереопределяемый.ПометкаУдаления
		|	И СостоянияЭДОПереопределяемый.Состояние В(&Состояние)";
		
КонецПроцедуры

&НаСервере
Процедура ТекстЗапросаВходящиеТребуютВнимания(Запрос)
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭлектронныеДокументыПереопределяемый.Ссылка КАК ЭлектронныйДокумент,
		|	ЭлектронныеДокументыПереопределяемый.Ответственный КАК Ответственный,
		|	СостоянияЭДОПереопределяемый.Состояние КАК СостояниеЭДО
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныеДокументыПереопределяемый
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияЭДОПереопределяемый
		|		ПО (СостоянияЭДОПереопределяемый.ЭлектронныйДокумент = ЭлектронныеДокументыПереопределяемый.Ссылка)
		|ГДЕ
		|	НЕ ЭлектронныеДокументыПереопределяемый.ПометкаУдаления
		|	И СостоянияЭДОПереопределяемый.Состояние В(&Состояние)";

КонецПроцедуры

&НаКлиенте
Процедура НастроитьВидимостьКомандТекущейСтроки(ТекущиеДанные)
		
	Элементы.ПометитьКакПрочитанноеВходящие.Видимость = Ложь;
	Элементы.ПометитьКакПрочитанноеИсходящие.Видимость = Ложь;
	Элементы.ВходящиеЭлектронныеДокументыКонтекстноеМенюПометитьКакПрочтенные.Видимость = Ложь;
	Элементы.ИсходящиеЭлектронныеДокументыКонтекстноеМенюПометитьКакПрочтенные.Видимость = Ложь;
	
	Элементы.ГруппаРаспечататьВыгрузитьВходящие.Видимость = Ложь;
	Элементы.ВходящиеЭлектронныеДокументыКонтекстноеМенюГруппаРаспечататьВыгрузить.Видимость = Ложь;
	Элементы.ГруппаРаспечататьВыгрузитьИсходящие.Видимость = Ложь;
	Элементы.ИсходящиеЭлектронныеДокументыКонтекстноеМенюГруппаРаспечататьВыгрузить.Видимость = Ложь;
		
	Элементы.ГруппаКнопокУтвердитьВходящие.Видимость = Ложь;
	Элементы.ГруппаКнопокПодписатьВходящие.Видимость = Ложь;
	Элементы.ГруппаКнопокАннулироватьВходящие.Видимость = Ложь;
	Элементы.ГруппаКнопокПодготовитьКОтправкеВходящие.Видимость = Ложь;
	Элементы.ГруппаКнопокПодписатьСлужебныеСообщенияВходящие.Видимость = Ложь;

	Элементы.ГруппаКнопокУтвердитьВходящиеКонтекстноеМеню.Видимость = Ложь;
	Элементы.ГруппаКнопокПодписатьВходящиеКонтекстноеМеню.Видимость = Ложь;
	Элементы.ГруппаКнопокАннулироватьВходящиеКонтекстноеМеню.Видимость = Ложь;
	Элементы.ГруппаКнопокПодготовитьКОтправкеВходящиеКонтекстноеМеню.Видимость = Ложь;
	Элементы.ГруппаКнопокПодписатьСлужебныеСообщенияВходящиеКонтекстноеМеню.Видимость = Ложь;

	Элементы.ГруппаКнопокУтвердитьИсходящие.Видимость = Ложь;
	Элементы.ГруппаКнопокПодписатьИсходящие.Видимость = Ложь;
	Элементы.ГруппаКнопокАннулироватьИсходящие.Видимость = Ложь;
	Элементы.ГруппаКнопокПодготовитьКОтправкеИсходящие.Видимость = Ложь;
	Элементы.ГруппаКнопокПодписатьСлужебныеСообщенияИсходящие.Видимость = Ложь;
	
	Элементы.ГруппаКнопокУтвердитьИсходящиеКонтекстноеМеню.Видимость = Ложь;
	Элементы.ГруппаКнопокПодписатьИсходящиеКонтекстноеМеню.Видимость = Ложь;
	Элементы.ГруппаКнопокАннулироватьИсходящиеКонтекстноеМеню.Видимость = Ложь;
	Элементы.ГруппаКнопокПодготовитьКОтправкеИсходящиеКонтекстноеМеню.Видимость = Ложь;
	Элементы.ГруппаКнопокПодписатьСлужебныеСообщенияИсходящиеКонтекстноеМеню.Видимость = Ложь;

	Элементы.АннулироватьВходящие.Видимость = Ложь;
	Элементы.АннулироватьИсходящие.Видимость = Ложь;
	Элементы.Аннулировать.Видимость = Ложь;
	Элементы.ИсходящиеЭлектронныеДокументыКонтекстноеМенюАннулировать.Видимость = Ложь;
	Элементы.ЗакрытьПринудительноВходящие.Видимость = Ложь;
	Элементы.ЗакрытьПринудительноИсходящие.Видимость = Ложь;
	Элементы.ВходящиеЭлектронныеДокументыЗакрытьПринудительно.Видимость = Ложь;
	Элементы.ИсходящиеЭлектронныеДокументыКонтекстноеМенюЗакрытьПринудительно.Видимость = Ложь;

	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.Свойство("СостояниеЭДО") Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ПометитьКакПрочитанноеВходящие.Видимость = Истина;
	Элементы.ПометитьКакПрочитанноеИсходящие.Видимость = Истина;
	Элементы.ВходящиеЭлектронныеДокументыКонтекстноеМенюПометитьКакПрочтенные.Видимость = Истина;
	Элементы.ИсходящиеЭлектронныеДокументыКонтекстноеМенюПометитьКакПрочтенные.Видимость = Истина;
	
	Элементы.ГруппаРаспечататьВыгрузитьВходящие.Видимость = Истина;
	Элементы.ВходящиеЭлектронныеДокументыКонтекстноеМенюГруппаРаспечататьВыгрузить.Видимость = Истина;
	Элементы.ГруппаРаспечататьВыгрузитьИсходящие.Видимость = Истина;
	Элементы.ИсходящиеЭлектронныеДокументыКонтекстноеМенюГруппаРаспечататьВыгрузить.Видимость = Истина;

	СостояниеЭДО = ТекущиеДанные.СостояниеЭДО;
	СпособОбмена = ТекущиеДанные.СпособОбмена;
	ТипТекущегоДокумента = ТекущиеДанные.ТипДокумента;

	Если СпособОбмена <> ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.Внутренний") Тогда
		Элементы.ЗакрытьПринудительноВходящие.Видимость = Истина;
		Элементы.ЗакрытьПринудительноИсходящие.Видимость = Истина;
		Элементы.ВходящиеЭлектронныеДокументыЗакрытьПринудительно.Видимость = Истина;
		Элементы.ИсходящиеЭлектронныеДокументыКонтекстноеМенюЗакрытьПринудительно.Видимость = Истина;
	КонецЕсли;

	Если СостояниеЭДО = ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ТребуетсяПодписание") 
		И ТипТекущегоДокумента <> 
		ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.МашиночитаемаяДоверенность")
		Тогда
			
		Элементы.АннулироватьВходящие.Видимость = Истина;
		Элементы.Аннулировать.Видимость = Истина;
		
	ИначеЕсли ТипТекущегоДокумента <> 
		ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.МашиночитаемаяДоверенность")
		И СостояниеЭДО = 
		ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ТребуетсяУтверждение")
		Или СостояниеЭДО = 
		ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ТребуетсяИзвещениеОПолучении")
		Или СостояниеЭДО = 
		ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещения")
		Или СостояниеЭДО = 
		ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеИзвещения")
		Или СостояниеЭДО = 
		ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ТребуетсяОтправкаИзвещения")
		Или СостояниеЭДО = 
		ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеОператора")
		Или СостояниеЭДО = 
		ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ОжидаетсяИзвещениеОПолучении")
		Или СостояниеЭДО = 
		ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ОжидаетсяПодтверждение")
		Или СостояниеЭДО = 
		ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ОбменЗавершен")
		Тогда
			
		Элементы.АннулироватьВходящие.Видимость = Истина;
		Элементы.Аннулировать.Видимость = Истина;
		Элементы.АннулироватьИсходящие.Видимость = Истина;
		Элементы.ИсходящиеЭлектронныеДокументыКонтекстноеМенюАннулировать.Видимость = Истина;
		
	КонецЕсли;

	Если СостояниеЭДО = 
		ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ТребуетсяУтверждение") Тогда
		
		Элементы.СтраницыКомандыСписков.ТекущаяСтраница = Элементы.СтраницаУтвердить;
		Элементы.ГруппаКнопокУтвердитьВходящие.Видимость = Истина;
		Элементы.ГруппаКнопокУтвердитьИсходящие.Видимость = Истина;
		Элементы.ГруппаКнопокУтвердитьВходящиеКонтекстноеМеню.Видимость = Истина;
		Элементы.ГруппаКнопокУтвердитьИсходящиеКонтекстноеМеню.Видимость = Истина;
		
	ИначеЕсли СостояниеЭДО = 
			ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ТребуетсяПодписание") 
		Или СостояниеЭДО = 
			ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ТребуетсяПодписаниеАннулирования")
		Или СостояниеЭДО = 
			ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ТребуетсяПодписаниеОтклонения") Тогда
		
		Элементы.СтраницыКомандыСписков.ТекущаяСтраница = Элементы.СтраницаПодписать;
		Элементы.ГруппаКнопокПодписатьВходящие.Видимость = Истина;
		Элементы.ГруппаКнопокПодписатьИсходящие.Видимость = Истина;
		Элементы.ГруппаКнопокПодписатьВходящиеКонтекстноеМеню.Видимость = Истина;
		Элементы.ГруппаКнопокПодписатьИсходящиеКонтекстноеМеню.Видимость = Истина;
			
	ИначеЕсли СостояниеЭДО = 
		ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ТребуетсяПодтверждениеАннулирования") Тогда
		
		Элементы.СтраницыКомандыСписков.ТекущаяСтраница = Элементы.СтраницаАннулировать;
		Элементы.ГруппаКнопокАннулироватьВходящие.Видимость = Истина;
		Элементы.ГруппаКнопокАннулироватьИсходящие.Видимость = Истина;
		Элементы.ГруппаКнопокАннулироватьВходящиеКонтекстноеМеню.Видимость = Истина;
		Элементы.ГруппаКнопокАннулироватьИсходящиеКонтекстноеМеню.Видимость = Истина;
		
	ИначеЕсли СостояниеЭДО = 
		ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправке")
		Или СостояниеЭДО = 
		ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ТребуетсяОтправка") Тогда
		
		Элементы.СтраницыКомандыСписков.ТекущаяСтраница = Элементы.СтраницаПодготовитьКОтправке;
		Элементы.ГруппаКнопокПодготовитьКОтправкеВходящие.Видимость = Истина;
		Элементы.ГруппаКнопокПодготовитьКОтправкеИсходящие.Видимость = Истина;
		Элементы.ГруппаКнопокПодготовитьКОтправкеВходящиеКонтекстноеМеню.Видимость = Истина;
		Элементы.ГруппаКнопокПодготовитьКОтправкеИсходящиеКонтекстноеМеню.Видимость = Истина;
		
	ИначеЕсли СостояниеЭДО = 
			ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещения") 
		Или СостояниеЭДО = 
			ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещенияПоОтклонению")
			Тогда
		
		Элементы.СтраницыКомандыСписков.ТекущаяСтраница = Элементы.СтраницаПодписатьСлужебныеСообщения;
		Элементы.ГруппаКнопокПодписатьСлужебныеСообщенияВходящие.Видимость = Истина;
		Элементы.ГруппаКнопокПодписатьСлужебныеСообщенияИсходящие.Видимость = Истина;
		Элементы.ГруппаКнопокПодписатьСлужебныеСообщенияВходящиеКонтекстноеМеню.Видимость = Истина;
		Элементы.ГруппаКнопокПодписатьСлужебныеСообщенияИсходящиеКонтекстноеМеню.Видимость = Истина;
		
	Иначе
		
		Элементы.СтраницыКомандыСписков.ТекущаяСтраница = Элементы.СтраницаНедоступныеКоманды;
			
	КонецЕсли;
	
	ЭтоПакетДокументов = ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторПакета);
	
	ТекстЗаголовкаУтвердить = 
		ЛегкийИнтерфейсДокументовЭДОКлиентСервер.ПредставлениеКомандыУтвердить(ЭтоПакетДокументов);
	ТекстЗаголовкаПодписать = 
		ЛегкийИнтерфейсДокументовЭДОКлиентСервер.ПредставлениеКомандыПодписать(ЭтоПакетДокументов);
	ТекстЗаголовкаОтклонить = 
		ЛегкийИнтерфейсДокументовЭДОКлиентСервер.ПредставлениеКомандыОтклонить(ЭтоПакетДокументов);
	ТекстЗаголовкаПринятьАннулирование = 
		ЛегкийИнтерфейсДокументовЭДОКлиентСервер.ПредставлениеКомандыПринятьАннулирование(ЭтоПакетДокументов);
	ТекстЗаголовкаОтклонитьАннулирование = 
		ЛегкийИнтерфейсДокументовЭДОКлиентСервер.ПредставлениеКомандыОтклонитьАннулирование(ЭтоПакетДокументов);
	ТекстЗаголовкаОтправить =
		ЛегкийИнтерфейсДокументовЭДОКлиентСервер.ПредставлениеКомандыОтправить(ЭтоПакетДокументов);
	ТекстЗаголовкаАннулировать = 
		ЛегкийИнтерфейсДокументовЭДОКлиентСервер.ПредставлениеКомандыАннулировать(ЭтоПакетДокументов,
			ТипТекущегоДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.Внутренний"));
	ТекстЗаголовкаЗакрытьПринудительно = 
		ЛегкийИнтерфейсДокументовЭДОКлиентСервер.ПредставлениеКомандыЗакрытьПринудительно(ЭтоПакетДокументов);
	
	Элементы.КомандаУтвердить.Заголовок = ТекстЗаголовкаУтвердить;
	Элементы.КомандаУтвердитьВходящие.Заголовок = ТекстЗаголовкаУтвердить;
	Элементы.КомандаУтвердитьИсходящие.Заголовок = ТекстЗаголовкаУтвердить;
	Элементы.КомандаУтвердитьВходящиеКонтекстноеМеню.Заголовок = ТекстЗаголовкаУтвердить;
	Элементы.КомандаУтвердитьИсходящиеКонтекстноеМеню.Заголовок = ТекстЗаголовкаУтвердить;
		
	Элементы.КомандаПодписать.Заголовок = ТекстЗаголовкаПодписать;
	Элементы.КомандаПодписатьНедоступная.Заголовок = ТекстЗаголовкаПодписать;
	Элементы.КомандаПодписатьВходящие.Заголовок = ТекстЗаголовкаПодписать;
	Элементы.КомандаПодписатьИсходящие.Заголовок = ТекстЗаголовкаПодписать;
	Элементы.КомандаПодписатьВходящиеКонтекстноеМеню.Заголовок = ТекстЗаголовкаПодписать;
	Элементы.КомандаПодписатьИсходящиеКонтекстноеМеню.Заголовок = ТекстЗаголовкаПодписать;
		
	Элементы.КомандаОтказатьсяОтПодписанияУтвердить.Заголовок = ТекстЗаголовкаОтклонить;
	Элементы.КомандаОтказатьсяОтПодписанияПодписать.Заголовок = ТекстЗаголовкаОтклонить;
	Элементы.КомандаОтказатьсяОтПодписанияНедоступная.Заголовок = ТекстЗаголовкаОтклонить;
	Элементы.КомандаОтказатьсяОтПодписанияУтвердитьВходящие.Заголовок = ТекстЗаголовкаОтклонить;
	Элементы.КомандаОтказатьсяОтПодписанияПодписатьВходящие.Заголовок = ТекстЗаголовкаОтклонить;
	Элементы.КомандаОтказатьсяОтПодписанияУтвердитьИсходящие.Заголовок = ТекстЗаголовкаОтклонить;
	Элементы.КомандаОтказатьсяОтПодписанияПодписатьИсходящие.Заголовок = ТекстЗаголовкаОтклонить;
	Элементы.КомандаОтказатьсяОтПодписанияУтвердитьВходящиеКонтекстноеМеню.Заголовок = ТекстЗаголовкаОтклонить;
	Элементы.КомандаОтказатьсяОтПодписанияПодписатьВходящиеКонтекстноеМеню.Заголовок = ТекстЗаголовкаОтклонить;
	Элементы.КомандаОтказатьсяОтПодписанияУтвердитьИсходящиеКонтекстноеМеню.Заголовок = ТекстЗаголовкаОтклонить;
	Элементы.КомандаОтказатьсяОтПодписанияПодписатьИсходящиеКонтекстноеМеню.Заголовок = ТекстЗаголовкаОтклонить;
		
	Элементы.ПринятьАннулирование.Заголовок = ТекстЗаголовкаПринятьАннулирование;
	Элементы.КомандаАннулироватьВходящие.Заголовок = ТекстЗаголовкаПринятьАннулирование;
	Элементы.КомандаАннулироватьИсходящие.Заголовок = ТекстЗаголовкаПринятьАннулирование;
	Элементы.КомандаАннулироватьВходящиеКонтекстноеМеню.Заголовок = ТекстЗаголовкаПринятьАннулирование;
	Элементы.КомандаАннулироватьИсходящиеКонтекстноеМеню.Заголовок = ТекстЗаголовкаПринятьАннулирование;
		
	Элементы.ОтклонитьАннулирование.Заголовок = ТекстЗаголовкаОтклонитьАннулирование;
	Элементы.ОтклонитьАннулированиеВходящие.Заголовок = ТекстЗаголовкаОтклонитьАннулирование;
	Элементы.ОтклонитьАннулированиеИсходящие.Заголовок = ТекстЗаголовкаОтклонитьАннулирование;
	Элементы.ОтклонитьАннулированиеВходящиеКонтекстноеМеню.Заголовок = ТекстЗаголовкаОтклонитьАннулирование;
	Элементы.ОтклонитьАннулированиеИсходящиеКонтекстноеМеню.Заголовок = ТекстЗаголовкаОтклонитьАннулирование;
	
	Элементы.Отправить.Заголовок = ТекстЗаголовкаОтправить;
	Элементы.ОтправитьВходящие.Заголовок = ТекстЗаголовкаОтправить;
	Элементы.ОтправитьИсходящие.Заголовок = ТекстЗаголовкаОтправить;
	Элементы.ОтправитьВходящиеКонтекстноеМеню.Заголовок = ТекстЗаголовкаОтправить;
	Элементы.ОтправитьИсходящиеКонтекстноеМеню.Заголовок = ТекстЗаголовкаОтправить;
	
	Элементы.АннулироватьВходящие.Заголовок = ТекстЗаголовкаАннулировать;
	Элементы.АннулироватьИсходящие.Заголовок = ТекстЗаголовкаАннулировать;
	Элементы.Аннулировать.Заголовок = ТекстЗаголовкаАннулировать;
	Элементы.ИсходящиеЭлектронныеДокументыКонтекстноеМенюАннулировать.Заголовок = ТекстЗаголовкаАннулировать;
	
	Элементы.ЗакрытьПринудительноВходящие.Заголовок = ТекстЗаголовкаЗакрытьПринудительно;
	Элементы.ЗакрытьПринудительноИсходящие.Заголовок = ТекстЗаголовкаЗакрытьПринудительно;
	Элементы.ВходящиеЭлектронныеДокументыЗакрытьПринудительно.Заголовок = ТекстЗаголовкаЗакрытьПринудительно;
	Элементы.ИсходящиеЭлектронныеДокументыКонтекстноеМенюЗакрытьПринудительно.Заголовок = 
		ТекстЗаголовкаЗакрытьПринудительно;

КонецПроцедуры

&НаКлиенте
Процедура ВидимостьЭлементовИКоманд()
	
	ТекущиеДанные = Неопределено;
			
	Элементы.ГруппаКомандыРасширенныйПоиск.Видимость = Ложь;
	
	Элементы.Ответственный.Видимость = Истина;
	Элементы.Состояние.Видимость = Истина;
	Элементы.ТипДокумента.Видимость = Истина;
	Элементы.ТипРегламента.Видимость = Истина;
	Элементы.СтатусПриглашения.Видимость = Ложь;
	НастроитьВидимостьГруппыРеквизитовИОтраженияВУчете(ЭтотОбъект);

	Если ИнтерфейсДокументовЭДОВызовСервера.ИспользуетсяОтправкаПолучениеСОтборомПоОрганизации() = Истина Тогда
		Элементы.ВыборочныйОбменПоОрганизациямВходящие.Пометка = Истина;
	Иначе
		Элементы.ВыборочныйОбменПоОрганизациямВходящие.Пометка = Ложь;
	КонецЕсли;
		
	Элементы.ВыборочныйОбменПоОрганизациямИсходящие.Пометка = Элементы.ВыборочныйОбменПоОрганизациямВходящие.Пометка;
	Если ТекущийРаздел = "ВходящиеЭлектронныеДокументы" Тогда
		
		ТекущиеДанные = Элементы.ВходящиеЭлектронныеДокументы.ТекущиеДанные;
		
		Элементы.СтраницыКомандыТекущегоСписка.ТекущаяСтраница = Элементы.СтраницаКомандыВходящиеИсходящие;
		
		Элементы.СтраницыДополнениеСтрокаПоиска.ТекущаяСтраница = Элементы.СтраницаДополнениеСтрокаПоискаВходящие;
				
		Элементы.ТипДокумента.Видимость = Истина;

		Элементы.ГруппаКомандыСписков.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
	
		Элементы.ГруппаКомандыРасширенныйПоиск.Видимость = Истина;
		
		Элементы.ГруппаБыстрыеОтборы.Видимость = РасширенныйПоискРаскрыт;
			
	
	ИначеЕсли ТекущийРаздел = "ИсходящиеЭлектронныеДокументы" Тогда
		
		ТекущиеДанные = Элементы.ИсходящиеЭлектронныеДокументы.ТекущиеДанные;
		
		Элементы.СтраницыКомандыТекущегоСписка.ТекущаяСтраница = Элементы.СтраницаКомандыВходящиеИсходящие;
		
		Элементы.СтраницыДополнениеСтрокаПоиска.ТекущаяСтраница = Элементы.СтраницаДополнениеСтрокаПоискаИсходящие;
						
		Элементы.ТипДокумента.Видимость = Истина;

		Элементы.ГруппаКомандыСписков.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
	
		Элементы.ГруппаКомандыРасширенныйПоиск.Видимость = Истина;
		
		Элементы.ГруппаБыстрыеОтборы.Видимость = РасширенныйПоискРаскрыт;
				
	ИначеЕсли ТекущийРаздел = "Сформировать" Тогда
		
		ТекущиеДанные = Неопределено;
		
		Элементы.СтраницыКомандыТекущегоСписка.ТекущаяСтраница = Элементы.СтраницаКомандыСформировать;
		
		Элементы.СтраницыДополнениеСтрокаПоиска.ТекущаяСтраница = Элементы.СтраницаДополнениеСтрокаПоискаСоздатьНовый; 
		
		Элементы.ГруппаКомандыСписков.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
	
		Элементы.ГруппаКомандыРасширенныйПоиск.Видимость = Истина;
		
		Элементы.ГруппаБыстрыеОтборы.Видимость = РасширенныйПоискРаскрыт;
		
		Если КоличествоСоздать = 0 Тогда
			Элементы.КомандаПодписатьОтправить.Видимость = Ложь;
		Иначе
			Элементы.КомандаПодписатьОтправить.Видимость = Истина;
		КонецЕсли;
		
		Элементы.Ответственный.Видимость = Ложь;
		Элементы.Состояние.Видимость = Ложь;
		Элементы.ТипДокумента.Видимость = Ложь;
		Элементы.ТипРегламента.Видимость = Ложь;
					
	ИначеЕсли ТекущийРаздел = "Приглашения" Тогда
		
		ТекущиеДанные = Неопределено;
		
		Элементы.СтраницыКомандыТекущегоСписка.ТекущаяСтраница = Элементы.СтраницаКомандыПриглашения;
		
		Элементы.СтраницыДополнениеСтрокаПоиска.ТекущаяСтраница = Элементы.СтраницаДополнениеСтрокаПоискаПриглашения; 
		
		Элементы.ГруппаКомандыСписков.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
			
		Элементы.ГруппаКомандыРасширенныйПоиск.Видимость = Истина;
		
		Элементы.ГруппаБыстрыеОтборы.Видимость = РасширенныйПоискРаскрыт;
		
		Элементы.Ответственный.Видимость = Ложь;
		Элементы.Состояние.Видимость = Ложь;
		Элементы.ТипДокумента.Видимость = Ложь;
		Элементы.ТипРегламента.Видимость = Ложь;
		Элементы.СтатусПриглашения.Видимость = Истина;
		
		Элементы.ОткрытьПользовательскиеОтборыСпискаПриглашения.Видимость = Истина;
			
	ИначеЕсли ТекущийРаздел = "Ошибки" Тогда
		
		ТекущиеДанные = Неопределено;
		
		Элементы.СтраницыКомандыТекущегоСписка.ТекущаяСтраница = Элементы.СтраницаКомандыОшибки;
		
		Элементы.СтраницыДополнениеСтрокаПоиска.ТекущаяСтраница = Элементы.СтраницаДополнениеСтрокаПоискаОшибки;
				 
		Элементы.ГруппаКомандыСписков.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
	
		Элементы.ГруппаКомандыРасширенныйПоиск.Видимость = Ложь;
		
		Элементы.ГруппаБыстрыеОтборы.Видимость = Ложь;
		
		Элементы.ОткрытьПользовательскиеОтборыСпискаПриглашения.Видимость = Ложь;
	
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	НастроитьВидимостьКомандТекущейСтроки(ТекущиеДанные);
	ОбновитьОтображениеФильтров();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКомандФормыПоПравам()
	
	ЕстьПравоОбработкиДокументов = ЭлектронныеДокументыЭДО.ЕстьПравоОбработкиДокументов();
	ЕстьПравоНастройкиОбмена = НастройкиЭДО.ЕстьПравоНастройкиОбмена();
	ЕстьПравоАдминистрирования = ОбщегоНазначенияБЭД.ЕстьПравоАдминистрирования();
	ЕстьПравоВыполненияОбмена = СинхронизацияЭДО.ЕстьПравоВыполненияОбмена();
	
	Элементы.ГруппаДействияПоЭДОВходящие.Видимость = ЕстьПравоОбработкиДокументов;
	Элементы.ВходящиеЭлектронныеДокументыКонтекстноеМенюГруппаОсновныеКоманды.Видимость = ЕстьПравоОбработкиДокументов;
	
	Элементы.ГруппаДействияПоЭДОИсходящие.Видимость = ЕстьПравоОбработкиДокументов;
	Элементы.ИсходящиеЭлектронныеДокументыКонтекстноеМенюГруппаОсновныеКоманды.Видимость = ЕстьПравоОбработкиДокументов;
	
	Элементы.ГруппаДействияПоЭДОСформировать.Видимость = ЕстьПравоОбработкиДокументов;
	Элементы.СформироватьКонтекстноеМенюГруппаДействияСДокументом.Видимость = ЕстьПравоОбработкиДокументов;
	
	Элементы.НовоеПриглашениеПриглашения.Видимость = ЕстьПравоОбработкиДокументов;
	Элементы.ГруппаКнопокПринятьПриглашения.Видимость = ЕстьПравоОбработкиДокументов;
	Элементы.ГруппаКнопокОтправитьПриглашения.Видимость = ЕстьПравоОбработкиДокументов;
	Элементы.ГруппаКнопокПринятьПриглашенияКонтекстноеМеню.Видимость = ЕстьПравоОбработкиДокументов;
	Элементы.ГруппаКнопокОтправитьПриглашенияКонтекстноеМеню.Видимость = ЕстьПравоОбработкиДокументов;
	
	Элементы.ГруппаКнопкиДействийСОшибками.Видимость = ЕстьПравоОбработкиДокументов;
	Элементы.ГруппаКнопкиДействийСОшибкамиКонтекстноеМеню.Видимость = ЕстьПравоОбработкиДокументов;
	
	Элементы.СтраницаКомандыВходящиеИсходящие.Видимость = ЕстьПравоОбработкиДокументов;
	Элементы.СтраницаКомандыСформировать.Видимость = ЕстьПравоОбработкиДокументов;
	Элементы.СтраницаКомандыПриглашения.Видимость = ЕстьПравоОбработкиДокументов;
	Элементы.СтраницаКомандыОшибки.Видимость = ЕстьПравоОбработкиДокументов;
	
	Элементы.СформироватьКонтекстноеМенюПодписатьОтправить.Видимость = ЕстьПравоОбработкиДокументов;
	Элементы.Обновить.Видимость = ЕстьПравоВыполненияОбмена;
	Элементы.ВыборочныйОбменПоОрганизациямВходящие.Видимость = ЕстьПравоВыполненияОбмена;
	Элементы.ВыборочныйОбменПоОрганизациямИсходящие.Видимость = ЕстьПравоВыполненияОбмена;
	Элементы.ГруппаКнопокПринять.Видимость = ЕстьПравоНастройкиОбмена;
	Элементы.НовоеПриглашение.Видимость = ЕстьПравоНастройкиОбмена;
	Элементы.КомандаОтправитьПриглашение.Видимость = ЕстьПравоНастройкиОбмена;
	
	Элементы.ЗагрузитьФайлыВходящие.Видимость = ЕстьПравоОбработкиДокументов;
	Элементы.ЗагрузитьФайлыИсходящие.Видимость = ЕстьПравоОбработкиДокументов;
	Элементы.ЗагрузитьФайлыСформировать.Видимость = ЕстьПравоОбработкиДокументов;
	
	Элементы.ПроверитьПодписиВходящие.Видимость = ЕстьПравоАдминистрирования;
	Элементы.ПроверитьПодписиИсходящие.Видимость = ЕстьПравоАдминистрирования;
	Элементы.ПроверитьПодписиСформировать.Видимость = ЕстьПравоАдминистрирования;
	
КонецПроцедуры

#КонецОбласти

#Область ОтражениеВУчете

&НаКлиенте
Процедура ОткрытьДокументУчетаПоНомеру(НомерОбъектаУчета)

	Если ОбъектыУчетаТекущегоДокумента.Количество() >= НомерОбъектаУчета Тогда
		ПоказатьЗначение(, ОбъектыУчетаТекущегоДокумента[НомерОбъектаУчета - 1].ОбъектУчета);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРасширенныйПодборОбъектовУчета()

	ДополнительныеПараметры = Новый Структура("ЭлектронныйДокумент", ТекущийЭлектронныйДокумент);
	ОбработкаРасширенногоПодбора = Новый ОписаниеОповещения(
		"ОбработатьРасширенныйПодборОбъектовУчета",
		ЛегкийИнтерфейсДокументовЭДОКлиент, ДополнительныеПараметры);

	ПараметрыФормы = Новый Структура("ЭлектронныйДокумент, ВидДокумента, ДокументРаспознан",
		ТекущийЭлектронныйДокумент, 
		ВидТекущегоДокумента, 
		ЕстьВозможностьОтраженияВУчетеТекущегоДокумента);
		
	ИнтерфейсДокументовЭДОКлиент.ОткрытьПодборОбъектовУчетаЭлектронногоДокумента(ПараметрыФормы,
		ОбработкаРасширенногоПодбора);

КонецПроцедуры

#КонецОбласти // ОтражениеВУчете

#Область СопоставлениеНоменклатуры

&НаКлиенте
Процедура ПоказатьСопоставлениеНоменклатуры()

	НоменклатураДляСопоставления = Новый Массив;

	Если ТекущийРаздел = "НоменклатураКонтрагентов" Тогда

		Владельцы = Новый Массив;
		Для Каждого СтрокаСписка Из Элементы.НоменклатураКонтрагентов.ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.НоменклатураКонтрагентов.ДанныеСтроки(СтрокаСписка);
			Владельцы.Добавить(ДанныеСтроки.Владелец);
		КонецЦикла;
		НоменклатураДляСопоставления = НоменклатураПоВладельцам(Владельцы);

	Иначе

		ЭлектронныеДокументы = Новый Массив;
		Для Каждого СтрокаСписка Из Элементы.ВходящиеЭлектронныеДокументы.ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.ВходящиеЭлектронныеДокументы.ДанныеСтроки(СтрокаСписка);
			ЭлектронныеДокументы.Добавить(ДанныеСтроки.ЭлектронныйДокумент);
		КонецЦикла;
		НоменклатураДляСопоставления = НоменклатураПоЭД(ЭлектронныеДокументы);

	КонецЕсли;

	Если Не ЗначениеЗаполнено(НоменклатураДляСопоставления) Тогда
		ТекстСообщения = НСтр("ru = 'Сопоставление номенклатуры не требуется.'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;

	ДополнительныеПараметры = Новый Структура("НоменклатураДляСопоставления", 
		НоменклатураДляСопоставления);
	ОбработкаЗавершения = Новый ОписаниеОповещения("ОбработатьСопоставлениеНоменклатуры", 
		ЭтотОбъект, ДополнительныеПараметры);
	
	СопоставлениеНоменклатурыКонтрагентовКлиент.ОткрытьСопоставлениеНоменклатуры(НоменклатураДляСопоставления, , 
		ОбработкаЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСопоставлениеНоменклатуры(Результат,
		ДополнительныеПараметры) Экспорт

	ОбновитьДинамическийСписокТекущегоРаздела();

КонецПроцедуры

&НаСервереБезКонтекста
Функция НоменклатураПоЭД(Знач ЭлектронныеДокументы)

	Отбор = ИнтеграцияЭДО.ОтборНоменклатурыКонтрагентовНаКонтроле(ЭлектронныеДокументы);
	Возврат ИнтеграцияЭДО.НоменклатураКонтрагентовНаКонтроле(Отбор);

КонецФункции

&НаСервереБезКонтекста
Функция НоменклатураПоВладельцам(Знач Владельцы)

	Отбор = ИнтеграцияЭДО.ОтборНоменклатурыКонтрагентовНаКонтроле(, Владельцы);
	Возврат ИнтеграцияЭДО.НоменклатураКонтрагентовНаКонтроле(Отбор);

КонецФункции

#КонецОбласти

#Область ДействияСДокументами

 &НаКлиенте
Процедура ОткрытьЭлектронныйДокументДляПросмотра(ДанныеСтроки)
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИнтерфейсДокументовЭДОКлиент.ОткрытьЭлектронныйДокумент(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправкаПолучениеЭДЗавершение(Результат, Контекст) Экспорт
	
	ОбновитьДинамическиеСпискиФормы();
	
	Элементы.Обновить.Доступность = Истина;
	
	КоличествоДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСформироватьПодписатьИОтправить()
	
	ВыделенныеСтроки = Элементы.Сформировать.ВыделенныеСтроки;
	НаборОбъектовУчета = Новый Массив(ВыделенныеСтроки.Количество());
	
	Для Индекс = 0 По НаборОбъектовУчета.ВГраница() Цикл
		НаборОбъектовУчета[Индекс] = Элементы.Сформировать.ДанныеСтроки(ВыделенныеСтроки[Индекс]).Документ;
	КонецЦикла;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Источник", ЭтотОбъект);
	ДополнительныеПараметры.Вставить("ОбъектыУчета", НаборОбъектовУчета);
	ДополнительныеПараметры.Вставить("РежимПодписатьОтправить", Истина);
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект, ДополнительныеПараметры);
	ДополнительныеПараметры.Вставить("Оповещение", Оповещение);
	
	ИнтерфейсДокументовЭДОКлиент.СформироватьПодписатьОтправитьЭД(НаборОбъектовУчета, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ВыполнитьКомандаПодписать()	
	
	ДанныеВыделенныхСтрокРаздела = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, 
		"ЭлектронныйДокумент, ИдентификаторПакета");
	
	Если Не ЗначениеЗаполнено(ДанныеВыделенныхСтрокРаздела) Тогда		
		Возврат;
	КонецЕсли;
	
	ОбъектыДействий = ОбъектыДействий(ДанныеВыделенныхСтрокРаздела);
	
	ЭтоПакетнаяОбработка = ЗначениеЗаполнено(ОбъектыДействий.ПакетыДокументов);
	Если ЭтоПакетнаяОбработка И Не ВыполнениеДействийПоЭДОДоступноДляПакетов(ОбъектыДействий.ПакетыДокументов) Тогда
		ВидДействия = ЛегкийИнтерфейсДокументовЭДОКлиент.ВидыВыполняемыхДействийСДокументом().Подписать;
		ТекстВопроса = ЛегкийИнтерфейсДокументовЭДОКлиент.ТекстВопросаОВыполненииДействияДляДокументаПакета(ВидДействия);
		Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ОставитьДляОбработкиТолькоТекущийДокумент(ОбъектыДействий);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НаборДействий = Новый Соответствие;	
	Если ТекущийРаздел <> "ИсходящиеЭлектронныеДокументы" Тогда
		ДействияПоЭДОУтвердить = ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Утвердить");
		ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, 
			ДействияПоЭДОУтвердить);
		ДействияПоЭДОСформироватьОтвет = ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.СформироватьОтвет");
		ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, 
			ДействияПоЭДОСформироватьОтвет);
	КонецЕсли;
	ДействияПоЭДОПодписать = ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Подписать");
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, 
		ДействияПоЭДОПодписать);
	ДействияПоЭДОПодготовитьКОтправке = ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.ПодготовитьКОтправке");
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, 
		ДействияПоЭДОПодготовитьКОтправке);
	Если Не ИнтерфейсДокументовЭДОВызовСервера.ОтложеннаяОтправкаЭлектронныхДокументов()
		Или ТекущийРаздел = "ВходящиеЭлектронныеДокументы" Тогда
		ДействияПоЭДООтправить = ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Отправить");
		ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, 
			ДействияПоЭДООтправить);
	КонецЕсли;
	ПараметрыВыполненияДействийПоЭДО = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	ПараметрыВыполненияДействийПоЭДО.НаборДействий = НаборДействий;
	ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ЭлектронныеДокументы = ОбъектыДействий.ЭлектронныеДокументы;
	ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ПакетыДокументов = ОбъектыДействий.ПакетыДокументов;

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеУспешногоЗавершения", 
		Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект, НаборДействий));
	ДополнительныеПараметры.Вставить("ПараметрыВыполненияДействийПоЭДО", ПараметрыВыполненияДействийПоЭДО);
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект, ДополнительныеПараметры);
	
	ИнтерфейсДокументовЭДОКлиент.НачатьВыполнениеДействийПоЭДО(Оповещение, ПараметрыВыполненияДействийПоЭДО);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыполненияДействийПоЭДО(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда

		Если Результат.Свойство("КонтекстДиагностики")
			И ОбработкаНеисправностейБЭДКлиентСервер.ЕстьОшибки(Результат.КонтекстДиагностики) Тогда

			ПрочиеОшибки = Результат.КонтекстДиагностики.Диагностика.Ошибки;
			Если ПрочиеОшибки.Количество() = 1
				И ОбработкаНеисправностейБЭДКлиентСервер.ЭтоОшибкаДанногоВида(ПрочиеОшибки[0],
					МашиночитаемыеДоверенностиКлиентСервер.ВидОшибкиЕстьПодписиСМЧДДоверенностьНеНайдена()) Тогда
						МашиночитаемыеДоверенностиКлиент.ОткрытьДиалогРучногоПодтвержденияПроверкиПодписиПоМЧД(
							Результат.КонтекстДиагностики, ДополнительныеПараметры);
			Иначе
				ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(Результат.КонтекстДиагностики);
			КонецЕсли;

		ИначеЕсли Результат.Свойство("ОшибкиФормирования") И Результат.ОшибкиФормирования.Количество() Тогда

			ПараметрыОбработки = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыПроблемПриОбработкеДокументов();
			ПараметрыОбработки.АдресСведенийОбОшибках = ПоместитьВоВременноеХранилище(Результат.ОшибкиФормирования);
			Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
				И ДополнительныеПараметры.Свойство("ОбъектыУчета") Тогда
				ПараметрыОбработки.СписокДокументовКОтправке = ДополнительныеПараметры.ОбъектыУчета;
			КонецЕсли;
			Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
				И ДополнительныеПараметры.Свойство("РежимПодписатьОтправить") Тогда
				ПараметрыОбработки.РежимПодписатьОтправить = ДополнительныеПараметры.РежимПодписатьОтправить;				
			КонецЕсли;
			Оповещение = Новый ОписаниеОповещения("ПослеЗавершенияРаботыПомощникаФормирования", 
				ЭтотОбъект, ДополнительныеПараметры);
			ИнтерфейсДокументовЭДОКлиент.ПоказатьПроблемыПриОбработкеДокументов(Оповещение, ПараметрыОбработки);
	
		КонецЕсли;

	КонецЕсли; 
	
	ОбновитьДинамическийСписокТекущегоРаздела();
	
	НастроитьВидимостьКомандТекущейСтроки(Элементы[ТекущийРаздел].ТекущиеДанные);
	
	ПодключитьОбработчикОжидания("ОбновитьОбластьПросмотра", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗавершенияРаботыПомощникаФормирования(Результат, ДополнительныеПараметры) Экспорт	
	
	Если Результат <> Неопределено Тогда
		ОповещениеЗавершения = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект, 
			ДополнительныеПараметры);
		ИнтерфейсДокументовЭДОКлиент.НачатьВыполнениеДействийПоЭДО(ОповещениеЗавершения, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОтменуФормированияДокументовПослеВводаСтроки(Комментарий, ДополнительныеПараметры) Экспорт
	
	Если Комментарий = Неопределено Тогда
		Возврат; 
	КонецЕсли;
	
	ИнтерфейсДокументовЭДОВызовСервера.ОтменитьФормированиеДокументовПоОбъектамУчета(
		ДополнительныеПараметры.ОбъектыУчета, Комментарий);	
	
	Оповестить(ИнтерфейсДокументовЭДОКлиент.ИмяСобытияОбновленияТекущихДелЭДО());
			
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДополнитьДокументамиПакетов(ЭлектронныеДокументы)
	ПакетыДокументовЭДО.ДополнитьДокументамиПакетов(ЭлектронныеДокументы);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСменыОтветственного(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Или Не Результат.Успех Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ТекущиеДанныеТаблицыЭлектронныхДокументов();
	
	ОбновитьДанныеПослеСменыОтветственного(ТекущиеДанные);

КонецПроцедуры

#КонецОбласти

#Область РаботаСНераспакованнымиКонтейнерами

&НаКлиенте
Процедура УстановитьСтатусОтменен(МассивЭД)

	КонтекстДиагностики = ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики();
	Количество = 0;
	СтатусыТранспортныхСообщенийБЭДОтменен = 
		ПредопределенноеЗначение("Перечисление.СтатусыТранспортныхСообщенийБЭД.Отменен");
	УстановитьСтатусТранспортныхКонтейнеров(МассивЭД, СтатусыТранспортныхСообщенийБЭДОтменен, Количество, 
		КонтекстДиагностики);
	ТекстОповещения = НСтр("ru = 'Изменен статус транспортного контейнера на ""Отменен"": (%1)'");
	ТекстОповещения = СтрЗаменить(ТекстОповещения, "%1", Количество);
	Текст = НСтр("ru = 'Обмен электронными документами'");
	ПоказатьОповещениеПользователя(Текст, , ТекстОповещения);
	ОбновитьДинамическийСписокТекущегоРаздела();
	ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(КонтекстДиагностики);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьСтатусТранспортныхКонтейнеров(Знач МассивКонтейнеров, Знач СтатусКонтейнера,
		КоличествоИзмененных, КонтекстДиагностики)

	КоличествоИзмененных = 0;
	Для Каждого СтрокаТаблицы Из МассивКонтейнеров Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Если СинхронизацияЭДО.ИзменитьСтатусТранспортногоКонтейнера(СтрокаТаблицы.Ссылка, СтатусКонтейнера) Тогда
				КоличествоИзмененных = КоличествоИзмененных + 1;
			КонецЕсли;
			КоличествоИзмененных = КоличествоИзмененных + 1;
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ТекстОперации = НСтр("ru = 'Изменение статуса транспортных контейнеров ЭД'");
			ДополнительныеПараметрыОшибки = Новый Структура;
			ДополнительныеПараметрыОшибки.Вставить("СсылкаНаОбъект", СтрокаТаблицы.Ссылка);
			ВидОшибкиНеизвестнаяОшибка = ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка();
			ИнформацияОшибки = ИнформацияОбОшибке();
			ПодробноеОписаниеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(
				ИнформацияОшибки);
			КраткоеПредставлениеОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОшибки);
			Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ТекстОперации, ВидОшибкиНеизвестнаяОшибка, 
				ПодробноеОписаниеОшибки, КраткоеПредставлениеОшибки, ДополнительныеПараметрыОшибки);
			ПодсистемаБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
			ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
				ПодсистемаБЭД.ОбменСКонтрагентами);
				
		КонецПопытки;
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиАсинхронныхДиалогов

&НаКлиенте
Процедура ДобавитьИзФайлаНаДискеЗавершить(ФайлПомещен, АдресВХранилище, ВыбранныйФайл, ДополнительныеПараметры) Экспорт
	
 	Если ФайлПомещен Тогда
	
		СтруктураИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ВыбранныйФайл);

		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ВыбранныйФайл", СтруктураИмениФайла.Имя);
		ПараметрыОповещения.Вставить("АдресВХранилище", АдресВХранилище);

		ОповещениеОЗавершении = 
			Новый ОписаниеОповещения("ДобавитьИзФайлаНаДискеПослеВыбораФайла", 
				ЭтотОбъект, ПараметрыОповещения);
				
		РаботаСФайламиБЭДКлиент.СкорректироватьИмяФайлаСУчетомКодировки(ОповещениеОЗавершении, СтруктураИмениФайла.Имя);		

	КонецЕсли;
	
КонецПроцедуры 

// Параметры:
//  ИмяФайла - Строка
//  Параметры - Структура:
//  * ВыбранныйФайл - Строка
//  * АдресВХранилище - Строка
&НаКлиенте
Процедура ДобавитьИзФайлаНаДискеПослеВыбораФайла(ИмяФайла, Параметры) Экспорт
	
	Если ИмяФайла = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИнтерфейсДокументовЭДОКлиент.ОткрытьНовыйЭлектронныйДокументПоФайлу(ИмяФайла, Параметры.АдресВХранилище);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Функция ДанныеВыделенныхСтрокРаздела(Знач Раздел, Знач ПутьКДанным, ПолучатьКлючСтроки = Ложь)
	
	МассивДанных = Новый Массив;
	ИспользоватьМассивРеквизитов = Ложь;
	
	Таблица = Элементы[Раздел];
	
	Реквизиты = СтрЗаменить(ПутьКДанным, " ", "");
	МассивРеквизитов = СтрРазделить(Реквизиты, ",", Ложь);
	
	Если МассивРеквизитов.Количество() > 1 Или ПолучатьКлючСтроки Тогда
		ИспользоватьМассивРеквизитов = Истина;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из Таблица.ВыделенныеСтроки Цикл
		
		Данные = Таблица.ДанныеСтроки(СтрокаТаблицы);
		Если Данные = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИспользоватьМассивРеквизитов Тогда
			
			Результат = Новый Структура;
			
			Для Каждого Реквизит Из МассивРеквизитов Цикл
				Результат.Вставить(Реквизит, Данные[Реквизит]);
			КонецЦикла;
			Результат.Вставить("КлючСтроки", СтрокаТаблицы);
			МассивДанных.Добавить(Результат);
			
		Иначе
			МассивДанных.Добавить(Данные[ПутьКДанным]);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивДанных;
	
КонецФункции
 
&НаКлиенте
Функция ОбъектыДействий(СтрокиРаздела)
	
	Результат = ИнтерфейсДокументовЭДОКлиентСервер.НовыеОбъектыДействийПоЭДО();
	
	Для Каждого СтрокаРаздела Из СтрокиРаздела Цикл
		
		ИдентификаторПакета = СтрокаРаздела.ИдентификаторПакета;
		
		Если ЗначениеЗаполнено(ИдентификаторПакета) И ПакетноеОтображение
			И Результат.ПакетыДокументов.Найти(ИдентификаторПакета) = Неопределено Тогда
			
			Результат.ПакетыДокументов.Добавить(ИдентификаторПакета);
			
		Иначе
			Результат.ЭлектронныеДокументы.Добавить(СтрокаРаздела.ЭлектронныйДокумент);	
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЕстьДублирующийсяЭлемент(Элементы, ЭлементПоиска)
	
	Для Каждого Элемент Из Элементы Цикл
		Если Элемент <> ЭлементПоиска Тогда
			
			Если Элемент.Оформление.Элементы.Количество() <> ЭлементПоиска.Оформление.Элементы.Количество() Тогда
				Продолжить;
			КонецЕсли;
			
			НайденОтличающийсяЭлемент = Ложь;
			
			ЧислоЭлементов = Элемент.Оформление.Элементы.Количество();
			Для Индекс = 0 По ЧислоЭлементов - 1 Цикл
				Элемент1 = Элемент.Оформление.Элементы[Индекс];
				Элемент2 = ЭлементПоиска.Оформление.Элементы[Индекс];
				
				Если Элемент1.Использование И Элемент2.Использование Тогда
					Если Элемент1.Параметр <> Элемент2.Параметр ИЛИ Элемент1.Значение <> Элемент2.Значение Тогда
						НайденОтличающийсяЭлемент = Истина;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если НайденОтличающийсяЭлемент Тогда
				Продолжить;
			КонецЕсли;
			
			Если Элемент.Отбор.Элементы.Количество() <> ЭлементПоиска.Отбор.Элементы.Количество() Тогда
				Продолжить;
			КонецЕсли;
			
			ЧислоЭлементов = Элемент.Отбор.Элементы.Количество();
			Для Индекс = 0 По ЧислоЭлементов - 1 Цикл
				Элемент1 = Элемент.Отбор.Элементы[Индекс];
				Элемент2 = ЭлементПоиска.Отбор.Элементы[Индекс];
				
				ЭлементыРавны = СравнитьЭлементыОтбора(Элемент1, Элемент2);
				Если Не ЭлементыРавны Тогда
					НайденОтличающийсяЭлемент = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если НайденОтличающийсяЭлемент Тогда
				Продолжить;
			КонецЕсли;
			
			Возврат Истина;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция СравнитьЭлементыОтбора(Элемент1, Элемент2)
	
	Если Элемент1.Использование = Элемент2.Использование
		И ТипЗнч(Элемент1) = ТипЗнч(Элемент2) Тогда
		
		Если ТипЗнч(Элемент1) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если Элемент1.ВидСравнения <> Элемент2.ВидСравнения
				ИЛИ Элемент1.ЛевоеЗначение <> Элемент2.ЛевоеЗначение
				ИЛИ Элемент1.ПравоеЗначение <> Элемент2.ПравоеЗначение Тогда
				Возврат Ложь;
			КонецЕсли;
		Иначе
			
			ЧислоЭлементов = Элемент1.Элементы.Количество();
			Если Элемент1.ТипГруппы <> Элемент2.ТипГруппы
				ИЛИ ЧислоЭлементов <> Элемент2.Элементы.Количество() Тогда
				Возврат Ложь;
			КонецЕсли;
			
			Для Индекс = 0 По ЧислоЭлементов - 1 Цикл
				ПодчиненныйЭлемент1 = Элемент1.Элементы[Индекс];
				ПодчиненныйЭлемент2 = Элемент2.Элементы[Индекс];
				ЭлементыРавны = СравнитьЭлементыОтбора(ПодчиненныйЭлемент1, ПодчиненныйЭлемент2);
				
				Если Не ЭлементыРавны Тогда
					Возврат ЭлементыРавны;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьРасширенныйПодборДокументовУчета()

	ТекущиеДанные = Элементы[ТекущийРаздел].ТекущиеДанные;
		
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЭлектронныйДокумент", ТекущиеДанные.ЭлектронныйДокумент);
	ПараметрыФормы.Вставить("ВидДокумента", ТекущиеДанные.ВидДокумента);
	
	ДокументРаспознан = РаспознатьДокумент(ТекущиеДанные.ЭлектронныйДокумент);
	ПараметрыФормы.Вставить("ДокументРаспознан", ДокументРаспознан);
	
	ИнтерфейсДокументовЭДОКлиент.ОткрытьПодборОбъектовУчетаЭлектронногоДокумента(ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьУчетныйДокумент(Знач ИмяТаблицы = "ВходящиеЭлектронныеДокументы")

	ТекущиеДанные = Элементы[ИмяТаблицы].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	НаборУчетныхДокументов = ОбъектыУчетаЭлектронногоДокумента(ТекущиеДанные.ЭлектронныйДокумент);

	Если Не ЗначениеЗаполнено(НаборУчетныхДокументов) Тогда
		ПоказатьРасширенныйПодборДокументовУчета();
		Возврат;
	КонецЕсли;

	Если НаборУчетныхДокументов.Количество() = 1 Тогда

		ПоказатьЗначение(, НаборУчетныхДокументов[0]);

	Иначе

		СписокУчетныхДокументов = Новый СписокЗначений;
		СписокУчетныхДокументов.ЗагрузитьЗначения(НаборУчетныхДокументов);
		Обработка = Новый ОписаниеОповещения("ОбработатьВыборУчетногоДокументаДляПоказа", ЭтотОбъект);
		СписокУчетныхДокументов.ПоказатьВыборЭлемента(Обработка);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборУчетногоДокументаДляПоказа(Знач ВыбранныйЭлемент,
		Знач ДополнительныеПараметры) Экспорт

	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПоказатьЗначение(, ВыбранныйЭлемент.Значение);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбъектыУчетаЭлектронногоДокумента(Знач ЭлектронныйДокумент)

	Запрос = Новый Запрос;
	Запрос.Текст = ИнтеграцияЭДО.ТекстЗапросаОбъектовУчетаЭлектронныхДокументов();
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);

	УстановитьПривилегированныйРежим(Истина);
	Основания = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОбъектУчета");
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Основания;

КонецФункции  

&НаСервере
Функция СтатусыНеРаспакованныхТранспортныхСообщенийБЭД()
	
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыТранспортныхСообщенийБЭД.Неизвестный"));
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыТранспортныхСообщенийБЭД.КРаспаковке"));
	
	Возврат МассивСтатусов;
		
КонецФункции

&НаКлиенте
Процедура ПолучитьОтправитьОбновить()
	Перем Оповещение;
	Элементы.Обновить.Доступность = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ОтправкаПолучениеЭДЗавершение", ЭтотОбъект);
	ИнтерфейсДокументовЭДОКлиент.ОтправитьПолучитьДокументыЭДО(ЭтотОбъект, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ВывестиНаПечать()
	
	Если Не ЗначениеЗаполнено(ТекущийЭлектронныйДокумент) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Для печати необходимо выбрать электронный документ'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыВизуализации = ИнтерфейсДокументовЭДОВызовСервера.НовыеПараметрыВизуализацииДокумента();
	ПараметрыВизуализации.ВыводитьБанковскиеРеквизиты = Ложь;
	ПараметрыВизуализации.ВыводитьДопДанные = Ложь;
	ПараметрыВизуализации.ВыводитьКопияВерна = Ложь;
	
	ИнтерфейсДокументовЭДОКлиент.ОткрытьФормуПечатиЭлектронныхДокументов(ТекущийЭлектронныйДокумент, 
		ПараметрыВизуализации);
	
КонецПроцедуры

&НаКлиенте
Функция СобытиеОбновитьСписки(Знач ИмяСобытия)
	
	Возврат ИмяСобытия = ИнтерфейсДокументовЭДОКлиент.ИмяСобытияОбновленияСостоянияЭДО()
		Или ИмяСобытия = "ОбновитьСостояниеПриглашений"
		Или ИмяСобытия = ИнтерфейсДокументовЭДОКлиент.ИмяСобытияОбновленияТекущихДелЭДО()
		Или ИмяСобытия = "ПрочтениеОбновитьСписок";
		
КонецФункции

&НаКлиенте
Процедура УстановитьБлокировкуЭлементов(СписокНаименованийЭлементов)
	Для Каждого НаименованиеЭлемента Из СписокНаименованийЭлементов Цикл
		Элементы[НаименованиеЭлемента].Доступность = Ложь;
		ЗаблокированныеЭлементыФормы.Добавить(НаименованиеЭлемента);	
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СнятьБлокировкуЭлементов(СписокНаименованийЭлементов)
	Для Каждого НаименованиеЭлемента Из СписокНаименованийЭлементов Цикл
		Элементы[НаименованиеЭлемента].Доступность = Истина;
		ЗаблокированныйЭлемент = ЗаблокированныеЭлементыФормы.НайтиПоЗначению(НаименованиеЭлемента);
		Если ЗаблокированныйЭлемент <> Неопределено Тогда
			ЗаблокированныеЭлементыФормы.Удалить(ЗаблокированныйЭлемент);	
		КонецЕсли;			
	КонецЦикла;
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьДанныеПоИспользованиюЛегкихКарточекДокументов()
	
	ИспользуютсяЛегкиеКарточкиДокументов = ИнтерфейсДокументовЭДО.ИспользуютсяЛегкиеКарточкиЭлектронныхДокументов();
	НастроитьПометкуЭлементовПереходаНаЛегкийИнтерфейсКарточекДокументов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьПометкуЭлементовПереходаНаЛегкийИнтерфейсКарточекДокументов(Форма)

	Пометка = Форма.ИспользуютсяЛегкиеКарточкиДокументов;
	Форма.Элементы.ПерейтиНаЛегкийИнтерфейсКарточекДокументовВходящие.Пометка = Пометка;
	Форма.Элементы.ПерейтиНаЛегкийИнтерфейсКарточекДокументовИсходящие.Пометка = Пометка;
	Форма.Элементы.ПерейтиНаЛегкийИнтерфейсКарточекДокументовСформировать.Пометка = Пометка;
	Форма.Элементы.ПерейтиНаЛегкийИнтерфейсКарточекДокументовПриглашения.Пометка = Пометка;
	Форма.Элементы.ПерейтиНаЛегкийИнтерфейсКарточекДокументовОшибки.Пометка = Пометка; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыполнениеДействийПоЭДОДоступноДляПакетов(ПакетыДокументов)

	Результат = Истина;
	
	Для Каждого ИдентификаторПакета Из ПакетыДокументов Цикл
		СостоянияДокументовПакета = ПакетыДокументовЭДО.СостоянияДокументовПакета(ИдентификаторПакета);
		СостояниеПакета = ПакетыДокументовЭДО.СостояниеПакета(СостоянияДокументовПакета);
		Если Не ЗначениеЗаполнено(СостояниеПакета) Тогда
			Результат = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОставитьДляОбработкиТолькоТекущийДокумент(ОбъектыДействий)
	
	ОбъектыДействий.ПакетыДокументов.Очистить();
	ОбъектыДействий.ЭлектронныеДокументы.Добавить(ТекущийЭлектронныйДокумент);
	
КонецПроцедуры

&НаКлиенте
Функция ВключенаГруппировкаСтрок(ТекущиеДанные)
	Возврат ТекущиеДанные.Свойство("ГруппировкаСтроки") 
		И ЗначениеЗаполнено(ТекущиеДанные.ГруппировкаСтроки);
КонецФункции

#КонецОбласти

#КонецОбласти