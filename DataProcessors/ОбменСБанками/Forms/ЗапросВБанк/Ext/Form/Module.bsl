
#Область ОписаниеПеременных

&НаКлиенте
Перем МассивТикетовСбербанк; // хранит массив тикетов отправленных запросов
&НаКлиенте
Перем ТикетСбербанк; // тикет на запрос статусов запросов выписки
&НаКлиенте
Перем ТикетПолученияСертификатовСбербанк; // тикет на запрос сертификатов
&НаКлиенте
Перем ОповещениеПослеПолученияОтветаПоТикетуСбербанк; // хранит оповещение, которое должно быть вызвано после получения ответа по тикету
&НаКлиенте
Перем СертификатПодписиСбербанк; // сертификат, с использованием которого подписываются запросы новых документов
&НаКлиенте
Перем ПараметрыОжиданияКонечногоСтатусаЗапросовВыпискиСбербанк; // параметры подключаемой процедуры при ожидании конечного статуса запросов выписки
&НаКлиенте
Перем ПараметрыОбработчикаОжидания; // Параметры обработчика ожидания для длительных операций
&НаКлиенте
Перем ПараметрыОжиданияПолученияВыписки; // Параметры обработчика ожидания при получении выписки
&НаКлиенте
Перем КоличествоОтправленных; // Количество отправленных документов
&НаКлиенте
Перем КоличествоПолученных; // Количество полученных документов
&НаКлиенте
Перем КоличествоПодписанных; // Количество подписанных документов
&НаКлиенте
Перем КоличествоПодтвержденных; // Количество подтвержденных документов
&НаКлиенте
Перем ТекущийШагСбербанк; // текущий шаг длительной операции Сбербанка
&НаКлиенте
Перем МассивШаговСбербанк; // массив выполняемых операций Сбербанка
&НаКлиенте
Перем МассивСообщенийПользователю; // массив сообщений из длительных операций, для вывода форме конфигурации-потребителя

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры, ,
		"ЗакрыватьПриВыборе, ЗакрыватьПриЗакрытииВладельца, ТолькоПросмотр, ИдентификаторСессии");
		
	ИдентификаторСессии = ОбменСБанкамиСлужебныйВызовСервера.СтрокаИзДвоичныхДанных(
		Параметры.ИдентификаторСессии);
	
	УстановитьПривилегированныйРежим(Истина);
	РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НастройкаОбмена, "Организация, Банк,
		|ПрограммаБанка, ИдентификаторОрганизации, ИмяВнешнегоМодуля, ИспользуетсяКриптография, ДополнительнаяОбработка,
		|АдресСервера, ЛогинДляПолученияВыписки, ВерсияФормата");

	БИК = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыНастройкиОбмена.Банк, "Код");
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыНастройкиОбмена, "ПрограммаБанка, ИмяВнешнегоМодуля,
		|ИдентификаторОрганизации, ИспользуетсяКриптография, ДополнительнаяОбработка");

	Если ИспользуетсяКриптография И ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда
		ЗаканчиваетсяСрокДействияСертификатаБанка = ЗаканчиваетсяСрокДействияСертификатаБанка();
	КонецЕсли;

	Элементы.Операции.Видимость = Ложь;

	Если Параметры.ВидОперации = "ПолучениеВыписки" Тогда
		Заголовок = НСтр("ru = 'Получение выписки'");
		ПриПолученииВыписки(РеквизитыНастройкиОбмена);
	ИначеЕсли Параметры.ВидОперации = "ВыполнениеСинхронизации" Тогда
		Заголовок = НСтр("ru = 'Выполнение синхронизации'");
	ИначеЕсли Параметры.ВидОперации = "ПолучениеСостоянияДокумента" Тогда
		Заголовок = НСтр("ru = 'Получение состояния электронного документа'");
	ИначеЕсли Параметры.ВидОперации = "Тестирование" Тогда
		Заголовок = НСтр("ru = 'Тестирование обмена данными'")
	ИначеЕсли Параметры.ВидОперации = "ИнициализацияПодтвержденияДокументаСбербанк" Тогда
		Заголовок = НСтр("ru = 'Получение SMS сообщения'")
	ИначеЕсли Параметры.ВидОперации = "ПолучениеРезультатаПодтверждения" Тогда
		Заголовок = НСтр("ru = 'Проверка SMS пароля в банке'")
	ИначеЕсли Параметры.ВидОперации = "ПробноеПолучениеВыписки" Тогда
		Заголовок = НСтр("ru = 'Проверка получения выписки'");
	ИначеЕсли Параметры.ВидОперации = "ПодписаниеСбербанк" Тогда
		Заголовок = НСтр("ru = 'Подписание'");
		СписокСообщенийОбмена.ЗагрузитьЗначения(Параметры.МассивСообщенийОбмена);
	ИначеЕсли Параметры.ВидОперации = "ОтправкаДокументовСбербанк" Тогда
		Заголовок = НСтр("ru = 'Отправка документов'");
		СписокСообщенийОбмена.ЗагрузитьЗначения(Параметры.МассивСообщенийОбмена);
	КонецЕсли;

	Элементы.Операции.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Если ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АсинхронныйОбмен") Тогда
		Если ВидОперации = "ПолучениеВыписки" Тогда
			ПодключитьОбработчикОжидания("НачатьОтправкуЗапросаВыпискиВБанк", 0.1, Истина);
		ИначеЕсли ВидОперации = "ПолучениеСостоянияДокумента" Тогда
			ПодключитьОбработчикОжидания("НачатьОтправкуЗапросаСтатусаЭД", 0.1, Истина);
		ИначеЕсли ВидОперации = "ПробноеПолучениеВыписки" Тогда
			ПодключитьОбработчикОжидания("НачатьПробноеПолучениеВыпискиИзБанка", 0.1, Истина);
		Иначе
			ПодключитьОбработчикОжидания("НачатьОтправкуЗапросаЗонда", 0.1, Истина);
		КонецЕсли
	ИначеЕсли ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн") Тогда
		ЗапуститьОперациюСбербанк(Отказ);
	ИначеЕсли ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезВК") Тогда
		ОбменСБанкамиСлужебныйКлиент.ПроцессПрерван(НастройкаОбмена);
		Если ВидОперации = "ПолучениеСостоянияДокумента" Тогда
			ПолучитьСостояниеЭДЧерезВК();
		Иначе
			ПолучитьВыпискуЧерезВК();
		КонецЕсли;
	ИначеЕсли ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку") Тогда
		ПолучитьВыпискуЧерезДополнительнуюОбработку();
	ИначеЕсли ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АльфаБанкОнлайн") Тогда
		ПодключитьОбработчикОжидания("НачатьОтправкуЗапросаВыпискиВБанк", 0.1, Истина);
	КонецЕсли;

	Если ЗакрытьФорму Тогда
		Отказ = Истина;
	Иначе
		ФормаОткрыта = Истина;
		ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения,
		СтандартнаяОбработка)

	Если ПроизошлаОшибка Тогда
		Отказ = Истина;
		ПроизошлаОшибка = Ложь;
		Элементы.Страницы.ТекущаяСтраница = Элементы.Ошибка;
		Элементы.ФормаОтмена.Заголовок = НСтр("ru = 'Закрыть'");
	Иначе
		ФормаОткрыта = Ложь;
	КонецЕсли;

	ОбменСБанкамиСлужебныйКлиент.ПрерватьПроцессыНаКлиенте(НастройкаОбмена);

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)

	Если Не ЗавершениеРаботы Тогда
		ПриЗакрытииНаСервере(ИдентификаторЗадания);
	КонецЕсли;

	ФормаОткрыта = Ложь;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Отмена(Команда)

	Если ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн")  Тогда
		СтруктураВозврата = Неопределено;
		
		ПолученыВсеВыписки = ВыпискиПолученыСбербанк(НастройкаОбмена, СписокСообщенийОбмена.ВыгрузитьЗначения(),
			ДатаНачала, ДатаОкончания, МассивБанковскихСчетовСсылка, ДатаНачалаОперацииСбербанк, СтруктураВозврата);
			
		Если (СтруктураВозврата.ВыпискиБанка.Количество() <> 0) И НЕ ПолученыВсеВыписки Тогда
			
			КоличествоВыписок = 1 + (НачалоДня(ДатаОкончания) - НачалоДня(ДатаНачала)) / (60 * 60 * 24);
			КоличествоПолученныхВыписок = СтруктураВозврата.ВыпискиБанка.Количество();
			КоличествоНеПолученныхВыписок = КоличествоВыписок - КоличествоПолученныхВыписок;
			Если КоличествоВыписок > 1 И КоличествоВыписок <> 11 Тогда
				КоличествоВыписокДней = ?(
					Прав(СтрЗаменить(Строка(КоличествоВыписок), Символы.НПП, ""),1) = "1",
					"дня",
					"дней");
			Иначе
				КоличествоВыписокДней = ?(КоличествоВыписок = 1, "дня", "");
				КоличествоВыписокДней = ?(КоличествоВыписок = 0 ИЛИ КоличествоВыписок = 11, "дней", "");
			КонецЕсли;
			КоличествоНеПолученныхВыписокДней = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
				НСтр("ru='; день; ; дня; дней; дня'"),
				КоличествоНеПолученныхВыписок);
				
			ТекстОставшиеся = ?(
					Прав(СтрЗаменить(Строка(КоличествоНеПолученныхВыписок), Символы.НПП, ""),1) = "1"
					 И КоличествоНеПолученныхВыписок <> 11,
					"оставшийся",
					"оставшиеся");
			
			ТекстОповещения = НСтр("ru = 'Будут загружены выписки за %1 из %2 %3.'")
				 			+ Символы.ПС
							+ НСтр("ru = 'Рекомендуется сверить данные за %4 %5 %6'");
			
			ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстОповещения,
				КоличествоПолученныхВыписок,
				КоличествоВыписок,
				КоличествоВыписокДней,
				ТекстОставшиеся,
				КоличествоНеПолученныхВыписок,
				КоличествоНеПолученныхВыписокДней);
				
			ПослеПоказаПредупреждения = Новый ОписаниеОповещения(
				"ПослеПоказаПредупреждения",
				ЭтотОбъект,
				РезультатПолученияВыписки(СтруктураВозврата.ВыпискиБанка));
			
			ПоказатьПредупреждение(ПослеПоказаПредупреждения, ТекстОповещения, , Нстр("ru = 'Загрузка выписки из Сбербанка'"));
			
		Иначе
			ЗакрытьФормуНаКлиенте();
		КонецЕсли;
	Иначе
		ЗакрытьФормуНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПослеПоказаПредупреждения(ДополнительныеПараметры) Экспорт

	ЗакрытиеОкнаСПолученнымиВыпискамиСбербанк = Истина;
	ЗакрытьФормуНаКлиенте( , ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания)

	ОжиданиеОперацийБЭДКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);

КонецПроцедуры

// Проверяет срок действия банковского сертификата
// 
// Возвращаемое значение:
//  Булево - Если Истина, то осталось менее 30 дней до окончания сертификата банка.
&НаСервере
Функция ЗаканчиваетсяСрокДействияСертификатаБанка()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	МАКСИМУМ(НастройкиОбменСБанкамиСертификатыБанка.ДатаОкончания) КАК ДатаОкончания
		|ИЗ
		|	Справочник.НастройкиОбменСБанками.СертификатыБанка КАК НастройкиОбменСБанкамиСертификатыБанка
		|ГДЕ
		|	НастройкиОбменСБанкамиСертификатыБанка.Ссылка = &НастройкаОбмена";
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат ОсталосьМеньше30Дней(Выборка.ДатаОкончания);
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ОсталосьМеньше30Дней(БудущаяДата)
	
	Если ТипЗнч(БудущаяДата) <> Тип("Дата") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат БудущаяДата - ТекущаяДатаСеанса() < 30 * 24 * 60 * 60;
	
КонецФункции

&НаКлиенте
Процедура ЗапуститьОперациюСбербанк(Отказ)

	Если НЕ ЗапускалосьОбновлениеСертификатовБанка
			И ЗаканчиваетсяСрокДействияСертификатаБанка
			И Не ВидОперации = "ПодписаниеСбербанк"
			И ОбменСБанкамиСлужебныйКлиент.ЗначениеИзКешаСбербанк("ПолученКриптопрофильВСессии") <> Истина Тогда
		ПолучитьСертификатыССервераСбербанка();
		Возврат
	КонецЕсли;

	Если ВидОперации = "ПолучениеСостоянияДокумента" Тогда
		ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("ПолучитьИзвещениеОСостоянииДокументаСбербанк", 0.1, Истина);
	ИначеЕсли ВидОперации = "ВыполнениеСинхронизации" Тогда
		Если ИспользуетсяКриптография Тогда
			ПодключитьОбработчикОжидания("ОтправитьАвтоматическиеЗапросыВыписокСбербанк", 0.1, Истина);
		Иначе
			ПодключитьОбработчикОжидания("ПолучитьНовыеДокументыСбербанк", 0.1, Истина);
		КонецЕсли;
	ИначеЕсли ВидОперации = "ИнициализацияПодтвержденияДокументаСбербанк" Тогда
		ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПолучитьИдентификаторКриптопрофиляСбербанк", 0.1, Истина);
	ИначеЕсли ВидОперации = "ПолучениеРезультатаПодтверждения" Тогда
		ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПолучитьРезультатПроверкиSMSСбербанк", 0.1, Истина);
	ИначеЕсли ВидОперации = "ПодписаниеСбербанк" Тогда
		ИнициализироватьПрогрессПодписанияСбербанк();
		ПодключитьОбработчикОжидания("ПодписатьДокументыСбербанк", 0.1, Истина);
	ИначеЕсли ВидОперации = "ОтправкаДокументовСбербанк" Тогда
		ИнициализироватьПрогрессОтправкиДокументовСбербанк();
		ПодключитьОбработчикОжидания("ОтправитьДокументыСбербанк", 0.1, Истина);
	Иначе // получение выписки
		ИнициализироватьПрогрессОперацийПолученияВыпискиСбербанк();
		ПодключитьОбработчикОжидания("НачатьФормированиеЗапросовВыписокСбербанк", 0.1, Истина);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриПолученииВыписки(РеквизитыНастройкиОбмена)

	Если Параметры.МассивСообщенийОбмена <> Неопределено Тогда
		СписокСообщенийОбмена.ЗагрузитьЗначения(Параметры.МассивСообщенийОбмена);
	КонецЕсли;
	Если ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн
			ИЛИ ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку Тогда
		Если ЗначениеЗаполнено(Параметры.НомерСчета) Тогда
			МассивБанковскихСчетов = Новый Массив;
			МассивБанковскихСчетов.Добавить(Параметры.НомерСчета);
		Иначе
			МассивБанковскихСчетов = ОбменСБанкамиСлужебный.НомераБанковскихСчетов(
				РеквизитыНастройкиОбмена.Организация, РеквизитыНастройкиОбмена.Банк);
		КонецЕсли;
		МассивБанковскихСчетовСсылка = ПоместитьВоВременноеХранилище(МассивБанковскихСчетов, УникальныйИдентификатор);
	КонецЕсли;
	Если ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда
		ДатаНачалаОперацииСбербанк = ТекущаяДатаСеанса();
		Элементы.Операции.Видимость = Истина;
		Элементы.ДекорацияДлительнаяОперация.Видимость = Ложь;
	ИначеЕсли ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку Тогда
		ДанныеСертификатаСсылка = ПоместитьВоВременноеХранилище(Параметры.ДанныеСертификата, УникальныйИдентификатор);
	КонецЕсли;
	ПериодЗапросаВыписки.ДатаНачала = ДатаНачала;
	ПериодЗапросаВыписки.ДатаОкончания = ДатаОкончания;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьДатуСинхронизации(Знач НастройкаОбмена)

	ОбменСБанкамиСлужебный.СохранитьДатуСинхронизации(НастройкаОбмена);

КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура НачатьОтправкуЗапросаВыпискиВБанк()

	Если Не ФормаОткрыта Тогда
		Возврат;
	КонецЕсли;

	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ИдентификаторСессии", ИдентификаторСессии);
	ПараметрыЗапроса.Вставить("НастройкаОбмена", НастройкаОбмена);
	ПараметрыЗапроса.Вставить("ВидОперации", ВидОперации);
	ПараметрыЗапроса.Вставить("ПрограммаБанка", ПрограммаБанка);

	РезультатЗадания = ЗапускЗаданияОтправкиЗапросовВыпискиВБанк(ПараметрыЗапроса, УникальныйИдентификатор, СписокСообщенийОбмена);

	Если РезультатЗадания.Статус = "Выполняется" Тогда
		ИдентификаторЗадания = РезультатЗадания.ИдентификаторЗадания;
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатЗапросаВыписки", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатЗадания, Оповещение, ПараметрыОжидания);
	Иначе
		ОбработатьРезультатЗапросаВыписки(РезультатЗадания);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НачатьОтправкуЗапросаСтатусаЭД()

	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ИдентификаторСессии", ИдентификаторСессии);
	ПараметрыЗапроса.Вставить("СообщениеОбмена", СообщениеОбмена);
	ПараметрыЗапроса.Вставить("НастройкаОбмена", НастройкаОбмена);

	Результат = ОтправитьЗапросСостоянияЭДНаСервере(ПараметрыЗапроса, УникальныйИдентификатор);
	
	ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатЗапросаСостоянияЭД", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, Оповещение, ПараметрыОжидания);

КонецПроцедуры

&НаКлиенте
Процедура НачатьОтправкуЗапросаЗонда()

	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ИдентификаторСессии", ИдентификаторСессии);
	ПараметрыЗапроса.Вставить("СообщениеОбмена", СообщениеОбмена);
	ПараметрыЗапроса.Вставить("НастройкаОбмена", НастройкаОбмена);
	ДополнительныеПараметры = Новый Структура("ПараметрыЗапроса", ПараметрыЗапроса);

	Результат = ОбменСБанкамиСлужебныйВызовСервера.ЗапускЗаданияОтправкиЗапросЗондаНаСервере(ПараметрыЗапроса, УникальныйИдентификатор);

	Если Результат.Статус = "Выполняется" Тогда
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		Оповещение = Новый ОписаниеОповещения("ПослеОтправкиЗапросЗонда", ЭтотОбъект, ДополнительныеПараметры);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, Оповещение, ПараметрыОжидания);
	Иначе
		ПослеОтправкиЗапросЗонда(Результат, ДополнительныеПараметры);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапускЗаданияОтправкиЗапросовВыпискиВБанк(
	Знач ПараметрыЗапроса,
	Знач УникальныйИдентификатор,
	Знач СписокСообщенийОбмена)

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыЗапроса.Вставить("МассивСообщенийОбмена", СписокСообщенийОбмена.ВыгрузитьЗначения());

	Если ПараметрыЗапроса.ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен Тогда
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Отправка запроса выписки в банк.'");
		Результат = ДлительныеОперации.ВыполнитьВФоне(
			"ОбменСБанкамиСлужебный.ОтправитьЗапросВыпискиАсинхронныйОбмен", ПараметрыЗапроса, ПараметрыВыполнения);
	Иначе
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение выписки из банка.'");
		Результат = ДлительныеОперации.ВыполнитьВФоне(
			"ОбменСБанкамиСлужебный.ПолучитьВыпискуСинхронныйОбмен", ПараметрыЗапроса, ПараметрыВыполнения);
	КонецЕсли;

	Возврат Результат
	
КонецФункции

&НаСервереБезКонтекста
Функция ОтправитьЗапросСостоянияЭДНаСервере(Знач ПараметрыЗапроса, Знач УникальныйИдентификатор)

	НаименованиеЗадания = НСтр("ru = 'Отправка запроса состояния электронного документа в банк'");
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;

	Результат = ДлительныеОперации.ВыполнитьВФоне(
		"ОбменСБанкамиСлужебный.ОтправитьЗапросСостоянияЭДВБанк", ПараметрыЗапроса, ПараметрыВыполнения);

	Возврат Результат
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПриЗакрытииНаСервере(Знач ИдентификаторЗадания)

	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатЗапросаВыписки(РезультатЗадания,
		ДополнительныеПараметры = Неопределено) Экспорт

	Если РезультатЗадания = Неопределено Тогда // задание было отменено
		ЗакрытьФормуНаКлиенте();
		Возврат;
	КонецЕсли;

	Если РезультатЗадания.Статус = "Ошибка" Тогда
		ВидОперации = НСтр("ru = 'Отправка запроса выписки в банк.'");
		
		ОбработкаНеисправностейБЭДВызовСервера.ОбработатьОшибку(ВидОперации, ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСБанками,
			РезультатЗадания.ПодробноеПредставлениеОшибки, РезультатЗадания.КраткоеПредставлениеОшибки, НастройкаОбмена);
		
		ЗакрытьФормуНаКлиенте(Истина);
	Иначе // выполнено
		Если ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АльфаБанкОнлайн") Тогда
			ОбработатьРезультатПолученияВыпискиСинхронныйОбмен(РезультатЗадания);
		Иначе
			ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОжиданияПолученияВыписки);
			ПодключитьОбработчикОжидания("Подключаемый_ПолучитьВыпискуАсинхронныйОбмен", ПараметрыОжиданияПолученияВыписки.ТекущийИнтервал, Истина);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатПолученияВыпискиСинхронныйОбмен(РезультатЗадания)

	СтруктураВозврата = ПолучитьИзВременногоХранилища(РезультатЗадания.АдресРезультата);

	ДополнительныеПараметры = Новый Структура("ВыпискаБанка", СтруктураВозврата.ВыпискаБанка);

	Если СтруктураВозврата.Свойство("ДанныеЭП")
			И СтруктураВозврата.ДанныеЭП.Количество() Тогда

		Оповещение = Новый ОписаниеОповещения("ПослеСохраненияПолученныхПодписейВыпискиСинхронныйОбмен", ЭтотОбъект, СтруктураВозврата);
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ДанныеЭП", СтруктураВозврата.ДанныеЭП);
		ДополнительныеПараметры.Вставить("ЕстьОшибка", Ложь);
		ДополнительныеПараметры.Вставить("ОповещениеПослеСохраненияПодписей", Оповещение);

		СохранитьОчереднуюПодпись(ДополнительныеПараметры);

		Возврат;

	КонецЕсли;

	ПослеСохраненияПолученныхПодписейВыпискиСинхронныйОбмен(Ложь, СтруктураВозврата);

КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияПолученныхПодписейВыпискиСинхронныйОбмен(ЕстьОшибка, ДополнительныеПараметры) Экспорт

	Если ЕстьОшибка ИЛИ ДополнительныеПараметры.ВыпискаБанка = Неопределено Тогда
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	КонецЕсли;

	ЗаголовокОповещения = НСтр("ru = '1С:ДиректБанк'");
	ТекстОповещения = НСтр("ru = 'Получено документов: (1).'");
	Оповестить("ОбновитьСостояниеОбменСБанками");
	ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
	ЗакрытьФормуНаКлиенте( , РезультатПолученияВыписки(ДополнительныеПараметры.ВыпискаБанка));

КонецПроцедуры

&НаКлиенте
Функция РезультатПолученияВыписки(ВыпискиБанка)
	
	Результат = Новый Структура("СообщенияПользователю, ВыпискиБанка");
	Результат.СообщенияПользователю = МассивСообщенийПользователю;
	Если ТипЗнч(ВыпискиБанка) = Тип("Массив") Тогда
		Результат.ВыпискиБанка = ВыпискиБанка;
	Иначе
		Результат.ВыпискиБанка = Новый Массив;
		Результат.ВыпискиБанка.Добавить(ВыпискиБанка);
	КонецЕсли;
	
	Возврат Результат
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПолучитьВыпискуАсинхронныйОбмен()

	Если Не ФормаОткрыта Тогда
		Возврат;
	КонецЕсли;

	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("НастройкаОбмена", НастройкаОбмена);
	ПараметрыЗапроса.Вставить("ИдентификаторСессии", ИдентификаторСессии);
	ПараметрыЗапроса.Вставить("ВидОперации", ВидОперации);

	РезультатЗадания = ЗапускЗаданияПолученияВыпискиАсинхронныйОбмен(ПараметрыЗапроса, УникальныйИдентификатор);

	ИдентификаторЗадания = РезультатЗадания.ИдентификаторЗадания;
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	Оповещение = Новый ОписаниеОповещения("ПослеПолученияВыпискиАсинхронныйОбмен", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатЗадания, Оповещение, ПараметрыОжидания);

КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияВыпискиАсинхронныйОбмен(РезультатЗадания,
		ДополнительныеПараметры = Неопределено) Экспорт

	Если РезультатЗадания = Неопределено Тогда // задание было отменено
		ЗакрытьФормуНаКлиенте();
		Возврат;
	КонецЕсли;

	Если РезультатЗадания.Статус = "Ошибка" Тогда
		ВидОперации = НСтр("ru = 'Получение выписки банка.'");
		
		ОбработкаНеисправностейБЭДВызовСервера.ОбработатьОшибку(ВидОперации, ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСБанками,
			РезультатЗадания.ПодробноеПредставлениеОшибки, РезультатЗадания.КраткоеПредставлениеОшибки, НастройкаОбмена);
		ЗакрытьФормуНаКлиенте(Истина);
	Иначе // выполнено
		Результат = ПолучитьИзВременногоХранилища(РезультатЗадания.АдресРезультата);
		Если Результат = Неопределено Тогда
			ЗакрытьФормуНаКлиенте();
		Иначе
			ОбменСБанкамиСлужебныйКлиент.ВызватьОповещения(Результат);
			Оповестить("ОбновитьСостояниеОбменСБанками", Результат.ПараметрОповещения);
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Результат", Результат);

			Если Результат.Свойство("ДанныеЭП") И Результат.ДанныеЭП.Количество() Тогда
				ДополнительныеПараметры.Вставить("ДанныеЭП", Результат.ДанныеЭП);
				ДополнительныеПараметры.Вставить("ЕстьОшибка", Ложь);
				Оповещение = Новый ОписаниеОповещения("ПослеСохраненияПолученныхПодписейВыписки", ЭтотОбъект, ДополнительныеПараметры);
				ДополнительныеПараметры.Вставить("ОповещениеПослеСохраненияПодписей", Оповещение);
				СохранитьОчереднуюПодпись(ДополнительныеПараметры);

			Иначе
				ПослеСохраненияПолученныхПодписейВыписки(Ложь, ДополнительныеПараметры);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатЗапросаСостоянияЭД(РезультатЗадания, ДополнительныеПараметры = Неопределено) Экспорт

	Если РезультатЗадания = Неопределено Тогда // задание было отменено
		ЗакрытьФормуНаКлиенте();
		Возврат;
	КонецЕсли;

	Если РезультатЗадания.Статус = "Ошибка" Тогда
		ВидОперации = НСтр("ru = 'Получение состояния электронного документа.'");
		
		ОбработкаНеисправностейБЭДВызовСервера.ОбработатьОшибку(ВидОперации, ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСБанками,
			РезультатЗадания.ПодробноеПредставлениеОшибки, РезультатЗадания.КраткоеПредставлениеОшибки, НастройкаОбмена);
	
		ЗакрытьФормуНаКлиенте(Истина);
	Иначе // выполнено
		Результат = ПолучитьИзВременногоХранилища(РезультатЗадания.АдресРезультата);
		Оповестить("ОбновитьСостояниеОбменСБанками");

		ПараметрыЗапроса = Новый Структура;
		ПараметрыЗапроса.Вставить("ИдентификаторСессии", ИдентификаторСессии);
		ПараметрыЗапроса.Вставить("НастройкаОбмена", НастройкаОбмена);
		ПараметрыЗапроса.Вставить("СообщениеОбмена", Результат.СообщениеОбменаЗапросСостояния);

		Результат = ОбменСБанкамиСлужебныйВызовСервера.ЗапускЗаданияПолученияИзвещенияОСостоянииЭД(
			ПараметрыЗапроса, УникальныйИдентификатор);

		ИдентификаторЗадания = Результат.ИдентификаторЗадания;

		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		Оповещение = Новый ОписаниеОповещения("ПолучитьИзвещениеОСостоянииЭД", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, Оповещение, ПараметрыОжидания);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеОтправкиЗапросЗонда(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		ЗакрытьФормуНаКлиенте();
		Возврат;
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ВидОперации = НСтр("ru = 'Отправка тестового запроса в банк'");
		
		ОбработкаНеисправностейБЭДВызовСервера.ОбработатьОшибку(ВидОперации, ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСБанками,
			Результат.ПодробноеПредставлениеОшибки, Результат.КраткоеПредставлениеОшибки, НастройкаОбмена);
		
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	КонецЕсли;

	Оповестить("ОбновитьСостояниеОбменСБанками");

	Результат = ОбменСБанкамиСлужебныйВызовСервера.ЗапускЗаданияПолученияИзвещенияОСостоянииЭД(
		ДополнительныеПараметры.ПараметрыЗапроса, УникальныйИдентификатор);

	ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	Оповещение = Новый ОписаниеОповещения("ПолучитьИзвещениеОСостоянииЭД", ЭтотОбъект, ДополнительныеПараметры);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, Оповещение, ПараметрыОжидания);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапускЗаданияПолученияВыпискиАсинхронныйОбмен(Знач ПараметрыЗапроса, Знач УникальныйИдентификатор)

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение выписки из банка'");

	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ОбменСБанкамиСлужебный.ПолучитьНовыеДокументыИзБанка", ПараметрыЗапроса, ПараметрыВыполнения);

КонецФункции

&НаКлиенте
Процедура СохранитьОчереднуюПодпись(ДополнительныеПараметры)

	Если ДополнительныеПараметры.ДанныеЭП.Количество() = 0 Тогда
		ВыполнитьОбработкуОповещения(
			ДополнительныеПараметры.ОповещениеПослеСохраненияПодписей, ДополнительныеПараметры.ЕстьОшибка);
		Возврат;
	КонецЕсли;

	Для Каждого КлючЗначение Из ДополнительныеПараметры.ДанныеЭП Цикл
		Прервать;
	КонецЦикла;

	ДополнительныеПараметры.ДанныеЭП.Удалить(КлючЗначение.Ключ);

	Оповещение = Новый ОписаниеОповещения(
		"ПослеСохраненияПодписейСообщенияОбмена", ЭтотОбъект, ДополнительныеПараметры);
	ОбменСБанкамиСлужебныйКлиент.ДобавитьПодписиИОпределитьСтатусы(
		Оповещение, КлючЗначение.Ключ, КлючЗначение.Значение);

КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияПодписейСообщенияОбмена(Результат,
		ДополнительныеПараметры) Экспорт

	Если Не Результат Тогда
		ДополнительныеПараметры.Вставить("ЕстьОшибка", Истина);
	КонецЕсли;

	СохранитьОчереднуюПодпись(ДополнительныеПараметры)
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияПолученныхПодписейВыписки(ЕстьОшибка, ДополнительныеПараметры) Экспорт
	
	Если ЕстьОшибка Тогда
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	КонецЕсли;
	
	СтруктураВозврата = ДополнительныеПараметры.Результат;
	
	Если СтруктураВозврата.ТребуетсяПовторнаяАутентификация Тогда
		ПроизошлаОшибка = Ложь;
		ПараметрыОбработки = Новый Структура;
		ПараметрыОбработки.Вставить("НастройкаОбмена", НастройкаОбмена);
		ПараметрыОбработки.Вставить("ПроцедураОбработчик", "ПродолжитьПолучениеВыпискиПослеПолученияМаркераБанка");
		ПараметрыАвторизации = Новый Структура;
		Если ОбменСБанкамиСлужебныйКлиент.ПолученыДанныеАвторизации(НастройкаОбмена, ПараметрыАвторизации) Тогда
			ОбработатьПолучениеДанныхАутентификации(ПараметрыАвторизации, ПараметрыОбработки);
		Иначе
			Оповещение = Новый ОписаниеОповещения(
				"ОбработатьПолучениеДанныхАутентификации", ЭтотОбъект, ПараметрыОбработки);
			ОбменСБанкамиСлужебныйКлиент.ПолучитьДанныеАутентификации(Оповещение, НастройкаОбмена);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ВыпискиБанка = ВыпискиПоЗапросам(НастройкаОбмена, СписокСообщенийОбмена, МассивСообщенийПользователю);
	
	Если ВыпискиБанка = Неопределено Тогда // Произошла ошибка
		ЗакрытьФормуНаКлиенте(Истина);
	ИначеЕсли ВыпискиБанка.Количество() Тогда
		ЗаголовокОповещения = НСтр("ru = '1С:ДиректБанк'");
		ТекстОповещения = НСтр("ru = 'Получено документов: (%1).'");
		ТекстОповещения = СтрШаблон(ТекстОповещения, ВыпискиБанка.Количество());
		Оповестить("ОбновитьСостояниеОбменСБанками");
		ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
		Если ВидОперации = "ПробноеПолучениеВыписки" Тогда
			Закрыть(Истина);
		Иначе
			ЗакрытьФормуНаКлиенте( , РезультатПолученияВыписки(ВыпискиБанка));
		КонецЕсли;
	Иначе
		ОжиданиеОперацийБЭДКлиент.ОбновитьПараметрыОбработчикаОжидания(
			ПараметрыОжиданияПолученияВыписки);
		ПодключитьОбработчикОжидания(
			"Подключаемый_ПолучитьВыпискуАсинхронныйОбмен", ПараметрыОжиданияПолученияВыписки.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыпискиПоЗапросам(Знач НастройкаОбмена, Знач СписокЗапросов, МассивСообщенийПользователю)
	
	МассивЗапросов = СписокЗапросов.ВыгрузитьЗначения();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СообщениеОбменСБанками.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
	|ГДЕ
	|	СообщениеОбменСБанками.НастройкаОбмена = &НастройкаОбмена
	|	И СообщениеОбменСБанками.СообщениеРодитель В(&МассивЗапросов)
	|	И СообщениеОбменСБанками.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭДОбменСБанками.ВыпискаБанка)";
	Запрос.УстановитьПараметр("МассивЗапросов",  МассивЗапросов);
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	
	МассивВозврата = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивВозврата.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	ЕстьОшибкиПоЗапросам = Ложь;
	КоличествоВыписок = МассивВозврата.Количество();
	Если КоличествоВыписок < МассивЗапросов.Количество() Тогда
		СообщениеОЗапросеПоНевалидномуСчету = НСтр("ru = 'В запросе указан неверный номер счета'");
		СообщениеКодОшибки1013 = НСтр("ru = 'Код ошибки 1013'");
		ШаблонСообщения = НСтр("ru = 'Выписка по счету %1 не получена по причине: %2'");
		ЗапросОшибки = Новый Запрос;
		ЗапросОшибки.Текст =
		"ВЫБРАТЬ
		|	СообщениеОбменСБанками.Ссылка КАК Ссылка,
		|	СообщениеОбменСБанками.НомерСчета КАК НомерСчета,
		|	СообщениеОбменСБанками.ПричинаОтклонения КАК ПричинаОтклонения
		|ИЗ
		|	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
		|ГДЕ
		|	СообщениеОбменСБанками.НастройкаОбмена = &НастройкаОбмена
		|	И СообщениеОбменСБанками.Ссылка В(&МассивЗапросов)
		|	И СообщениеОбменСБанками.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбменСБанками.ОтклоненБанком)";
		ЗапросОшибки.УстановитьПараметр("МассивЗапросов",  МассивЗапросов);
		ЗапросОшибки.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
		Выборка = ЗапросОшибки.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ЕстьОшибкиПоЗапросам = Истина;
			ПричинаОтклонения = Выборка.ПричинаОтклонения;
			Если ПричинаОтклонения = СообщениеОЗапросеПоНевалидномуСчету
				Или СтрНайти(ПричинаОтклонения, СообщениеКодОшибки1013) > 0 Тогда
				КраткийШаблон = НСтр("ru = 'Выписка по счету %1 не получена. Если он закрыт, то укажите в счете дату закрытия.'");
				ТекстСообщения = СтрШаблон(КраткийШаблон, Выборка.НомерСчета);
			Иначе
				ТекстСообщения = СтрШаблон(ШаблонСообщения, Выборка.НомерСчета, ПричинаОтклонения);
			КонецЕсли;
			
			Если КоличествоВыписок = 0 Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Иначе
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ТекстСообщения;
				МассивСообщенийПользователю.Добавить(Сообщение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если КоличествоВыписок = 0 И ЕстьОшибкиПоЗапросам Тогда
		МассивВозврата = Неопределено;
	КонецЕсли;
	
	Возврат МассивВозврата;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьИзвещениеОСостоянииЭД(Результат,
		ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		ЗакрытьФормуНаКлиенте();
		Возврат;
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ВидОперации = НСтр("ru = 'Получение извещения о состоянии документа из банка'");
		
		ОбработкаНеисправностейБЭДВызовСервера.ОбработатьОшибку(ВидОперации, ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСБанками,
			Результат.ПодробноеПредставлениеОшибки, Результат.КраткоеПредставлениеОшибки, НастройкаОбмена);

		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	КонецЕсли;

	СтруктураВозврата = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);

	ОбменСБанкамиСлужебныйКлиент.ВызватьОповещения(СтруктураВозврата);

	Если СтруктураВозврата.Свойство("ДанныеЭП")
			И СтруктураВозврата.ДанныеЭП.Количество() Тогда

		Оповещение = Новый ОписаниеОповещения("ПослеСохраненияПолученныхПодписейИзвещения", ЭтотОбъект, СтруктураВозврата);
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ДанныеЭП", СтруктураВозврата.ДанныеЭП);
		ДополнительныеПараметры.Вставить("ЕстьОшибка", Ложь);
		ДополнительныеПараметры.Вставить("ОповещениеПослеСохраненияПодписей", Оповещение);

		СохранитьОчереднуюПодпись(ДополнительныеПараметры);

		Возврат;

	КонецЕсли;

	ПослеСохраненияПолученныхПодписейИзвещения(Ложь, СтруктураВозврата)
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияПолученныхПодписейИзвещения(ЕстьОшибка,
		ДополнительныеПараметры) Экспорт

	Если ЕстьОшибка Тогда
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	КонецЕсли;

	ЗаголовокОповещения = НСтр("ru = '1С:ДиректБанк'");
	ТекстОповещения = НСтр("ru = 'Отправлено документов: (1).
		|Получено документов: (%1).'");
	ТекстОповещения = СтрШаблон(ТекстОповещения, ДополнительныеПараметры.КоличествоПолученныхПакетов);
	ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);

	Если ДополнительныеПараметры.ТребуетсяПовторнаяАутентификация Тогда
		ПроизошлаОшибка = Ложь;
		ПараметрыОбработки = Новый Структура;
		ПараметрыОбработки.Вставить("НастройкаОбмена", НастройкаОбмена);
		ПараметрыОбработки.Вставить("ПроцедураОбработчик", "ПродолжитьПолучениеИзвещенияПослеПолученияМаркераБанка");
		ПараметрыАвторизации = Новый Структура;
		Если ОбменСБанкамиСлужебныйКлиент.ПолученыДанныеАвторизации(НастройкаОбмена, ПараметрыАвторизации) Тогда
			ОбработатьПолучениеДанныхАутентификации(ПараметрыАвторизации, ПараметрыОбработки);
		Иначе
			Оповещение = Новый ОписаниеОповещения("ОбработатьПолучениеДанныхАутентификации", ЭтотОбъект, ПараметрыОбработки);
			ОбменСБанкамиСлужебныйКлиент.ПолучитьДанныеАутентификации(Оповещение, НастройкаОбмена);
		КонецЕсли;
		Возврат;
	КонецЕсли;

	Оповестить("ОбновитьСостояниеОбменСБанками");

	ПараметрыВозврата = Новый Структура("Успех", Истина);

	Если НЕ ФормаОткрыта Тогда
		Если НЕ ОписаниеОповещенияОЗакрытии = Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗакрытии, ПараметрыВозврата);
		КонецЕсли;
		ЗакрытьФорму = Истина;
	Иначе
		Закрыть(ПараметрыВозврата);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВыпискуЧерезДополнительнуюОбработку()

	ВнешнийПодключаемыйМодуль = ОбменСБанкамиСлужебныйКлиент.ВнешнийПодключаемыйМодульЧерезДополнительнуюОбработку(ДополнительнаяОбработка);

	ДанныеСертификата = ПолучитьИзВременногоХранилища(ДанныеСертификатаСсылка);

	ПараметрыВыписки = Новый Структура;

	КолПолученных = 0;

	МассивНомеровБанковскихСчетов = ПолучитьИзВременногоХранилища(МассивБанковскихСчетовСсылка);
	СообщенияОбменаДляПроверки = Новый Массив;

	Для Каждого НомерСчета Из МассивНомеровБанковскихСчетов Цикл
		ПараметрыВыписки.Вставить("НомерСчета", НомерСчета);
		ПараметрыВыписки.Вставить("БИК", БИК);
		ПараметрыВыписки.Вставить("ДатаНачала", Формат(ДатаНачала, "ДЛФ=D"));
		ПараметрыВыписки.Вставить("ДатаОкончания", Формат(ДатаОкончания, "ДЛФ=D"));
		ПараметрыВыписки.Вставить("ВерсияСхемыДанных", ОбменСБанкамиКлиентСервер.ВерсияФорматаСинхронногоОбмена());
		ДанныеВыписки = ОбменСБанкамиСлужебныйКлиент.ОтправитьЗапросЧерезДополнительнуюОбработку(ВнешнийПодключаемыйМодуль, ДанныеСертификата.ДвоичныеДанныеСертификата, 2, ПараметрыВыписки);
		Если ДанныеВыписки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого Подпись Из ДанныеВыписки.Подписи Цикл

			ДанныеСертификатаПодписи = ОбменСБанкамиСлужебныйКлиент.ДанныеСертификатаЧерезДополнительнуюОбработку(ВнешнийПодключаемыйМодуль, Подпись.Сертификат);
			Если ДанныеСертификатаПодписи = Неопределено Тогда
				ПроизошлаОшибка = Истина;
				Возврат;
			КонецЕсли;
			Подпись.Вставить("ДанныеСертификата", ДанныеСертификатаПодписи);

		КонецЦикла;

		СообщениеОбменаВыписка = СохранитьВыписку(ДанныеВыписки, НастройкаОбмена, ДатаНачала, ДатаОкончания);
		СообщенияОбменаДляПроверки.Добавить(СообщениеОбменаВыписка);
		КолПолученных = КолПолученных + 1;
	КонецЦикла;

	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("МассивСообщенийОбменаДляПроверкиЧерезДополнительнуюОбработку", СообщенияОбменаДляПроверки);
	ПараметрыПроверки.Вставить("ВнешнийПодключаемыйМодуль", ВнешнийПодключаемыйМодуль);
	ПараметрыПроверки.Вставить("ТекущийИндексПроверкиПодписейЧерезДополнительнуюОбработку", 0);
	ПараметрыПроверки.Вставить("НастройкаОбмена", НастройкаОбмена);
	ОбменСБанкамиСлужебныйКлиент.НачатьПроверкуСтатусовПодписейЧерезДополнительнуюОбработку(ВнешнийПодключаемыйМодуль, ПараметрыПроверки);

	ЗаголовокОповещения = НСтр("ru = '1С:ДиректБанк'");

	Если КолПолученных = 0 Тогда
		ТекстОповещения = НСтр("ru = 'Полученных документов нет.'");
	Иначе
		ТекстОповещения = НСтр("ru = 'Получено документов: (%1).'");
		ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОповещения, КолПолученных);
	КонецЕсли;

	Оповестить("ОбновитьСостояниеОбменСБанками");

	ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);

	ЗакрытьФормуНаКлиенте(, РезультатПолученияВыписки(СообщениеОбменаВыписка));

КонецПроцедуры

&НаСервереБезКонтекста
Функция СохранитьВыписку(Знач ДанныеВыписки, Знач НастройкаОбмена, Знач ДатаНачала, Знач ДатаОкончания)

	АдресФайла = ПоместитьВоВременноеХранилище(ДанныеВыписки.Выписка);

	ПараметрыСообщения = Новый Структура;
	ПараметрыСообщения.Вставить("АдресФайлаВоВременномХранилище", АдресФайла);
	ПараметрыСообщения.Вставить("НастройкаОбмена", НастройкаОбмена);
	ПараметрыСообщения.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.ВыпискаБанка);
	ПараметрыСообщения.Вставить("Направление", Перечисления.НаправленияЭДО.Входящий);
	ПараметрыСообщения.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Получен);
	ПараметрыСообщения.Вставить("СсылкаНаОбъект", НастройкаОбмена);
	ПараметрыСообщения.Вставить("ДатаНачала", ДатаНачала);
	ПараметрыСообщения.Вставить("ДатаОкончания", ДатаОкончания);
	ПараметрыСообщения.Вставить("ФорматФайла", "xml");

	НовоеСообщение = Неопределено;
	ОбменСБанкамиСлужебный.СохранитьСообщениеОбмена(ПараметрыСообщения, НовоеСообщение);

	Для Каждого Подпись Из ДанныеВыписки.Подписи Цикл
		СтруктураСертификата = Новый Структура;
		СтруктураСертификата.Вставить("Отпечаток", Подпись.ДанныеСертификата.Отпечаток);
		СтруктураСертификата.Вставить("КомуВыдан", Подпись.ДанныеСертификата.ВладелецФИО);
		СтруктураСертификата.Вставить("ДвоичныеДанные", Подпись.Сертификат);
		ОбменСБанкамиСлужебныйВызовСервера.ДобавитьПодпись(НовоеСообщение, Подпись.Подпись, СтруктураСертификата);
	КонецЦикла;

	ДанныеВыписок = ОбменСБанками.ДанныеВыпискиБанкаТаблицаЗначений(НовоеСообщение);
	ДанныеВыписки = ДанныеВыписок.Получить(0);
	ОбменСБанкамиСлужебный.ОпределитьИсполненныеПлатежныеПоручения(НастройкаОбмена, ДанныеВыписки);
	ОбменСБанкамиСлужебный.СохранитьДатуПоследнейОперации(НастройкаОбмена, ДатаОкончания);

	Возврат НовоеСообщение;

КонецФункции

&НаКлиенте
Процедура ОбработатьПолучениеДанныхАутентификации(ДанныеАутентификации, ПараметрыОбработки) Экспорт

	Если ДанныеАутентификации = Неопределено Тогда
		ЗакрытьФормуНаКлиенте();
		Возврат;
	КонецЕсли;

	РеквизитыНастройкиОбмена = Новый Структура("АдресСервера, ИдентификаторОрганизации, ВерсияФормата");
	ОбменСБанкамиСлужебныйВызовСервера.ПолучитьЗначенияРеквизитовНастройкиОбмена(
		НастройкаОбмена, РеквизитыНастройкиОбмена);

	Обработчик = Новый ОписаниеОповещения(ПараметрыОбработки.ПроцедураОбработчик, ЭтотОбъект, ПараметрыОбработки);

	ОбменСБанкамиСлужебныйКлиент.ПолучитьМаркерБанкаПоЛогинуИПаролю(Обработчик, РеквизитыНастройкиОбмена.АдресСервера,
		РеквизитыНастройкиОбмена.ИдентификаторОрганизации, ДанныеАутентификации, РеквизитыНастройкиОбмена.ВерсияФормата,
		НастройкаОбмена);

КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьПолучениеВыпискиПослеПолученияМаркераБанка(Маркер, ПараметрыОбработки) Экспорт

	Если НЕ ЗначениеЗаполнено(Маркер) Тогда
		ЗакрытьФормуНаКлиенте();
		Возврат;
	КонецЕсли;

	ИдентификаторСессии = Маркер;

	ОжиданиеОперацийБЭДКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОжиданияПолученияВыписки);

	ПодключитьОбработчикОжидания(
		"Подключаемый_ПолучитьВыпискуАсинхронныйОбмен", ПараметрыОжиданияПолученияВыписки.ТекущийИнтервал, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьПолучениеИзвещенияПослеПолученияМаркераБанка(Маркер, ДополнительныеПараметры) Экспорт

	Если НЕ ЗначениеЗаполнено(Маркер) Тогда
		ЗакрытьФормуНаКлиенте();
		Возврат;
	КонецЕсли;

	ИдентификаторСессии = Маркер;

	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("НастройкаОбмена", НастройкаОбмена);
	ПараметрыЗапроса.Вставить("СообщениеОбмена", СообщениеОбмена);
	ПараметрыЗапроса.Вставить("ИдентификаторСессии", ИдентификаторСессии);
	ПараметрыЗапроса.Вставить("ВидОперации", ВидОперации);

	Результат = ОбменСБанкамиСлужебныйВызовСервера.ЗапускЗаданияПолученияИзвещенияОСостоянииЭД(
		ПараметрыЗапроса, УникальныйИдентификатор);

	ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	Оповещение = Новый ОписаниеОповещения("ПолучитьИзвещениеОСостоянииЭД", ЭтотОбъект, ДополнительныеПараметры);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, Оповещение, ПараметрыОжидания);

КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФормуНаКлиенте(ЕстьОшибка = Ложь, ПараметрЗакрытия = Неопределено)

	ПроизошлаОшибка = ЕстьОшибка;

	Если НЕ ФормаОткрыта Тогда
		Если ОписаниеОповещенияОЗакрытии <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗакрытии, ПараметрЗакрытия);
		КонецЕсли;
		ЗакрытьФорму = Истина;
	Иначе
		Закрыть(ПараметрЗакрытия);
	КонецЕсли;

КонецПроцедуры

#Область ОбменЧерезВК

&НаКлиенте
Процедура ПолучитьВыпискуЧерезВК()

	ДополнительныеПараметры = Новый Структура;
	Оповещение = Новый ОписаниеОповещения("ПолучитьНовыеДокументыПослеПодключенияВК", ЭтотОбъект, ДополнительныеПараметры);
	ОбменСБанкамиСлужебныйКлиент.ПодключитьИИнициализироватьВК(Оповещение, НастройкаОбмена);

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьНовыеДокументыПослеПодключенияВК(Результат,
		ДополнительныеПараметры) Экспорт

	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат);
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	ИначеЕсли Результат = Неопределено Тогда
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	КонецЕсли;

	ДополнительныеПараметры.Вставить("ПодключаемыйМодуль", Результат);
	Оповещение = Новый ОписаниеОповещения("ПослеПолученияНовыхДокументовЧерезВК", ЭтотОбъект, ДополнительныеПараметры);
	ОбменСБанкамиСлужебныйКлиент.ПолучитьНовыеДокументыВК(Оповещение, Результат, НастройкаОбмена, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСостояниеЭДЧерезВК()

	ДополнительныеПараметры = Новый Структура;
	Оповещение = Новый ОписаниеОповещения("ПолучитьНовыеДокументыПослеПодключенияВК", ЭтотОбъект, ДополнительныеПараметры);
	ОбменСБанкамиСлужебныйКлиент.ПодключитьИИнициализироватьВК(Оповещение, НастройкаОбмена);

КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияНовыхДокументовЧерезВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат.Результат) = Тип("Строка") Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.Результат);
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	КонецЕсли;
	
	Если Результат.Результат = Неопределено ИЛИ Результат.Результат = Ложь Тогда
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	КонецЕсли;
	
	Если ОбменСБанкамиСлужебныйКлиент.ПроцессПрерван(НастройкаОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СообщениеОбмена) Тогда
		ИзвещениеПолучено = ОбменСБанкамиСлужебныйВызовСервера.ПолученоИзвещениеПоЗапросу(
			СообщениеОбмена, ПроизошлаОшибка);
		
		Если ПроизошлаОшибка ИЛИ ИзвещениеПолучено Тогда
			ЗакрытьФормуНаКлиенте(ПроизошлаОшибка);
			Возврат;
		КонецЕсли;
		
		ПолучитьНовыеДокументыПослеПодключенияВК(ДополнительныеПараметры.ПодключаемыйМодуль, ДополнительныеПараметры);
		
	Иначе
		
		ВыпискиБанка = ВыпискиПоЗапросам(НастройкаОбмена, СписокСообщенийОбмена, МассивСообщенийПользователю);
		
		Если ВыпискиБанка = Неопределено Тогда // Произошла ошибка
			ЗакрытьФормуНаКлиенте(Истина);
		ИначеЕсли ВыпискиБанка.Количество() Тогда
			ЗаголовокОповещения = НСтр("ru = '1С:ДиректБанк'");
			ТекстОповещения = НСтр("ru = 'Получено документов: (%1).'");
			ТекстОповещения = СтрШаблон(ТекстОповещения, ВыпискиБанка.Количество());
			Оповестить("ОбновитьСостояниеОбменСБанками");
			ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
			ЗакрытьФормуНаКлиенте( , РезультатПолученияВыписки(ВыпискиБанка));
		Иначе
			ПолучитьНовыеДокументыПослеПодключенияВК(
				ДополнительныеПараметры.ПодключаемыйМодуль, ДополнительныеПараметры);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Сбербанк

&НаСервереБезКонтекста
Функция ДанныеЗапросовВыписокСбербанк(Знач НастройкаОбмена,
		Знач МассивСообщенийОбмена)

	МассивВозврата = Новый Массив;

	Для Каждого СообщениеОбмена Из МассивСообщенийОбмена Цикл
		ПакетXML = ОбменСБанкамиСлужебныйВызовСервера.ПакетXMLСбербанка(СообщениеОбмена, НастройкаОбмена);
		МассивВозврата.Добавить(ПакетXML);
	КонецЦикла;

	Возврат МассивВозврата;

КонецФункции

&НаКлиенте
Процедура ОтправитьАвтоматическиеЗапросыВыписокСбербанк()

	Оповещение = Новый ОписаниеОповещения("НачатьФормированиеЗапросовВыпискиПослеОпределенияСертификатаСбербанк", ЭтотОбъект);

	ОбменСБанкамиСлужебныйКлиент.ОпределитьСертификатПодписиСбербанк(Оповещение, ИмяВнешнегоМодуля, НастройкаОбмена);

КонецПроцедуры

&НаКлиенте
Процедура НачатьФормированиеЗапросовВыпискиПослеОпределенияСертификатаСбербанк(Результат,
		ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		ПриОшибкеТекущейОперацииСбербанк();
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Отмена Тогда
		ЗакрытьФормуНаКлиенте();
		Возврат;
	КонецЕсли;

	СертификатПодписиСбербанк = Результат.СертификатСсылка;
	ИдентификаторСертификатаСбербанк = Результат.ИдентификаторСертификата;

	МассивЗапросов = ЗапросыВыписокСбербанк(НастройкаОбмена);
	ДополнительныеПараметры = Новый Структура("МассивЗапросов", МассивЗапросов);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЗапросыВыписокПослеПодписиСбербанк", ЭтотОбъект, ДополнительныеПараметры);
	ОбменСБанкамиСлужебныйКлиент.ПодписатьЭДСбербанк(ОписаниеОповещения, НастройкаОбмена, МассивЗапросов);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапросыВыписокСбербанк(Знач НастройкаОбмена)

	Возврат ОбменСБанкамиСлужебный.ЗапросыВыписокСбербанк(НастройкаОбмена);

КонецФункции

&НаКлиенте
Процедура ОтправитьЗапросыВыписокПослеПодписиСбербанк(Результат,
		ДополнительныеПараметры) Экспорт

	Если НЕ Результат.Успех Тогда
		ЗакрытьФормуНаКлиенте();
		Возврат;
	КонецЕсли;

	Оповещение = Новый ОписаниеОповещения("ПолучитьДокументыПоТикетамПослеОтправкиСбербанк", ЭтотОбъект);
	ОтправитьСообщенияОбменаВСбербанк(Оповещение);

КонецПроцедуры

// Процедура - Получить документы по тикетам сбербанк
//
// Параметры:
//  Оповещение - ОписаниеОповещения - Оповещение, вызываемое после выполнения процедуры:
//      * Успех - Булево - если Истина, то все документы были получены;
//      * ДополнительныеПараметры - Структура - контекст выполнения процедуры;
//
&НаКлиенте
Процедура ПолучитьДокументыПоТикетамСбербанк(Оповещение)

	МассивТикетов = ТикетыЗапросовСтатусовСбербанк(НастройкаОбмена);

	МассивСообщенийОбменаДляПроверки = Новый Массив;

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("МассивСообщенийОбменаДляПроверки", МассивСообщенийОбменаДляПроверки);
	ДополнительныеПараметры.Вставить("ОповещениеПослеПолученияДокументов", Оповещение);
	ДополнительныеПараметры.Вставить("МассивТикетов", МассивТикетов);
	ДополнительныеПараметры.Вставить("ВсегоТикетов", МассивТикетов.Количество());

	ПолучитьОчереднойДокументИзСбербанка(ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗапросНовыхДокументовСбербанк(Результат, ДополнительныеПараметры) Экспорт

	Если Не Результат Тогда
		ЗакрытьФормуНаКлиенте();
		Возврат;
	КонецЕсли;

	Оповещение = Новый ОписаниеОповещения("ПослеОтправкиЗапросаНовыхДокументовВСбербанк", ЭтотОбъект);

	Сертификат = ОбменСБанкамиСлужебныйКлиент.ЗначениеИзКешаСбербанк("СертификатПодписи");

	ОбменСБанкамиСлужебныйКлиент.ОтправитьЗапросНовыхДокументовСбербанк(
		Оповещение, НастройкаОбмена, Сертификат, ИдентификаторСертификатаСбербанк);

КонецПроцедуры

&НаКлиенте
Процедура ПослеОтправкиЗапросаНовыхДокументовВСбербанк(Результат,
		ДополнительныеПараметры) Экспорт

	Если НЕ Результат.Успех Тогда
		ЗакрытьФормуНаКлиенте();
		Возврат;
	КонецЕсли;

	ТикетСбербанк = Результат.Тикет;

	ОповещениеПослеПолученияОтветаПоТикетуСбербанк = Новый ОписаниеОповещения("ПослеПолученияОтветаПоТикетуЗапросаНовыхДокументовСбербанк", ЭтотОбъект);
	ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	ПодключитьОбработчикОжидания("ПолучитьОтветПоТикетуСбербанк", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПослеОтправкиОчередногоЗапросаВыпискиСбербанк(Результат,
		ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		ПриОшибкеТекущейОперацииСбербанк();
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	КонецЕсли;

	МассивТикетовСбербанк.Добавить(Результат);

	Прогресс = "" + МассивТикетовСбербанк.Количество() + "/"
		+ СписокСообщенийОбмена.Количество();
	ВывестиПрогрессТекущейОперацииСбербанк(Прогресс);

	ОтправитьЗапросыВыписокРекурсивноСбербанк(ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура ПослеОтправкиЗапросаСтатусаЗапросаСостоянияСбербанк(Ответ,
		ДополнительныеПараметры) Экспорт

	Если Ответ = Неопределено Тогда
		ПриОшибкеТекущейОперацииСбербанк();
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	КонецЕсли;

	Если Ответ = "<!--NOT PROCESSED YET-->"
			ИЛИ Ответ = "<!--NOT_PROCESSED_YET-->" Тогда
		ОжиданиеОперацийБЭДКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("ПолучитьИзвещениеОСостоянииДокументаСбербанк", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	ИначеЕсли Ответ = "<!--REQUEST NOT FOUND-->"
			ИЛИ Ответ = "<!--REQUEST_NOT_FOUND-->" Тогда
		ТекстОшибки = НСтр("ru = 'На сервере банка произошла ошибка: запрос не найден.
			|Повторите операцию позже.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		ПриОшибкеТекущейОперацииСбербанк();
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	ИначеЕсли Ответ = "<!--REQUESTID DUBLIC-->"
			ИЛИ Ответ = "<!--REQUESTID_DUBLIC-->" Тогда
		ТекстОшибки = НСтр("ru = 'На сервере банка произошла ошибка: запрос с таким идентификатором уже существует.
			|Повторите операцию позже.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		ПриОшибкеТекущейОперацииСбербанк();
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	Иначе
		МассивНовыхСообщенийОбмена = Новый Массив;
		Попытка
			ОбменСБанкамиСлужебныйВызовСервера.ОбработатьОтветСбербанка(Ответ, НастройкаОбмена, МассивНовыхСообщенийОбмена, ИсходныйТикетСбербанк);
		Исключение
			ВидОперации = НСтр("ru = 'Чтение ответа Сбербанка.'");
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ОбработкаНеисправностейБЭДВызовСервера.ОбработатьОшибку(ВидОперации, ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСБанками,
				ТекстОшибки, ТекстСообщения, НастройкаОбмена);
			
			ПриОшибкеТекущейОперацииСбербанк();
			ЗакрытьФормуНаКлиенте(Истина);
			Возврат;
		КонецПопытки;

		Оповещение = Новый ОписаниеОповещения("ЗакрытьФормуПослеПроверкиПодписейСбербанк", ЭтотОбъект);
		ОбменСБанкамиСлужебныйКлиент.ОпределитьСтатусыПодписейСбербанк(Оповещение, НастройкаОбмена, МассивНовыхСообщенийОбмена);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапускЗаданияЧтенияОтветаБанка(Знач НастройкаОбмена, Знач Данные, Знач Тикет, Знач УникальныйИдентификатор)

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Чтение данных из ответа Сбербанка.'");

	ПараметрыСинхронизации = Новый Структура;
	ПараметрыСинхронизации.Вставить("НастройкаОбмена", НастройкаОбмена);
	ПараметрыСинхронизации.Вставить("Данные", Данные);
	ПараметрыСинхронизации.Вставить("Тикет", Тикет);

	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ОбменСБанкамиСлужебный.ПрочитатьОтветСбербанка", ПараметрыСинхронизации, ПараметрыВыполнения);

КонецФункции

&НаКлиенте
Процедура ЗакрытьФормуПослеПроверкиПодписейСбербанк(Результат,
		ДополнительныеПараметры) Экспорт

	Оповестить("ОбновитьСостояниеОбменСБанками");
	ЗакрытьФормуНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияОтветаПоТикетуЗапросаНовыхДокументовСбербанк(Результат,
		ДополнительныеПараметры) Экспорт

	МассивНовыхСообщенийОбмена = Новый Массив;
	Попытка
		КоличествоТомов = 0;
		ОбменСБанкамиСлужебныйВызовСервера.ОбработатьОтветСбербанка(Результат, НастройкаОбмена, МассивНовыхСообщенийОбмена, ТикетСбербанк, КоличествоТомов);
		Если КоличествоТомов > 0 Тогда
			Оповещение = Новый ОписаниеОповещения("ОтправитьЗапросСостоянияПлатежныхДокументовПослеПолученияБольшогоПакетаСбербанк", ЭтотОбъект, ДополнительныеПараметры);
			ПолучитьМноготомныйДокументЧерезТокенСбербанк(Оповещение, НастройкаОбмена, ИдентификаторОрганизации, ТикетСбербанк, КоличествоТомов);
			Возврат;
		КонецЕсли;
	Исключение
		ВидОперации = НСтр("ru = 'Чтение ответа Сбербанка.'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ОбработкаНеисправностейБЭДВызовСервера.ОбработатьОшибку(ВидОперации, ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСБанками,
			ТекстОшибки, ТекстСообщения, НастройкаОбмена);
		
		ЗакрытьФормуНаКлиенте(Истина, Ложь);
		Возврат;
	КонецПопытки;

	Если МассивНовыхСообщенийОбмена.Количество() Тогда
		Оповещение = Новый ОписаниеОповещения("ОтправитьЗапросСостоянияПлатежныхДокументовЧерезТокенСбербанк", ЭтотОбъект);
		ОбменСБанкамиСлужебныйКлиент.ОпределитьСтатусыПодписейСбербанк(Оповещение, НастройкаОбмена, МассивНовыхСообщенийОбмена);
		КоличествоПолученных = КоличествоПолученных
			+ МассивНовыхСообщенийОбмена.Количество();
		Оповестить("ОбновитьСостояниеОбменСБанками");
	Иначе
		ОтправитьЗапросСостоянияПлатежныхДокументовЧерезТокенСбербанк()
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗапросСостоянияПлатежныхДокументовЧерезТокенСбербанк(Результат = Неопределено,
		ДополнительныеПараметры = Неопределено) Экспорт

	МассивТикетовСбербанк = Новый Массив;
	ТекстЗапросаСостоянияПлатежныхДокументов = ОбменСБанкамиСлужебныйВызовСервера.ТекстЗапросаСостоянияОбработкиДокументовСбербанк(НастройкаОбмена, МассивТикетовСбербанк);

	Если ЗначениеЗаполнено(ТекстЗапросаСостоянияПлатежныхДокументов) Тогда
		ТикетСбербанк = Неопределено;

		Оповещение = Новый ОписаниеОповещения("ПослеОтправкиЗапросаСостоянияПлатежныхДокументов", ЭтотОбъект);

		ОбменСБанкамиСлужебныйКлиент.ВыполнитьОтправкуДанныхЧерезТокенСбербанк(Оповещение, ТекстЗапросаСостоянияПлатежныхДокументов, НастройкаОбмена);
		Возврат;
	КонецЕсли;

	Если МассивТикетовСбербанк.Количество() = 0 Тогда
		ОбменСБанкамиСлужебныйКлиент.ПоказатьРезультатСинхронизации(КоличествоОтправленных, КоличествоПолученных);
		ЗакрытьФормуНаКлиенте(, Истина);
	Иначе
		НачатьПолучениеДокументовПоТикетамСбербанк();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗапросСостоянияПлатежныхДокументовПослеПолученияБольшогоПакетаСбербанк(Результат,
		ДополнительныеПараметры) Экспорт

	Если Не Результат.Успех Тогда
		ЗакрытьФормуНаКлиенте(Истина, Ложь);
		Возврат;
	КонецЕсли;

	МассивНовыхСообщенийОбмена = Новый Массив;

	ОбменСБанкамиСлужебныйВызовСервера.СохранитьБольшойПакетСбербанк(НастройкаОбмена, ТикетСбербанк, Результат.МассивТомов, МассивНовыхСообщенийОбмена);

	Если МассивНовыхСообщенийОбмена.Количество() Тогда
		Оповещение = Новый ОписаниеОповещения("ОтправитьЗапросСостоянияПлатежныхДокументовЧерезТокенСбербанк", ЭтотОбъект);
		ОбменСБанкамиСлужебныйКлиент.ОпределитьСтатусыПодписейСбербанк(Оповещение, НастройкаОбмена, МассивНовыхСообщенийОбмена);
		КоличествоПолученных = КоличествоПолученных
			+ МассивНовыхСообщенийОбмена.Количество();
		Оповестить("ОбновитьСостояниеОбменСБанками");
	Иначе
		ОтправитьЗапросСостоянияПлатежныхДокументовЧерезТокенСбербанк()
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияОтветаПоТикетуЗапросовВыпискиСбербанк(Результат,
		ДополнительныеПараметры) Экспорт

	Если Не ЗначениеЗаполнено(Результат) Тогда
		ПриОшибкеТекущейОперацииСбербанк();
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	КонецЕсли;

	МассивНовыхСообщенийОбмена = Новый Массив;
	Попытка
		ОбменСБанкамиСлужебныйВызовСервера.ОбработатьОтветСбербанка(Результат, НастройкаОбмена, МассивНовыхСообщенийОбмена);
	Исключение
		ВидОперации = НСтр("ru = 'Чтение ответа Сбербанка.'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ОбработкаНеисправностейБЭДВызовСервера.ОбработатьОшибку(ВидОперации, ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСБанками,
			ТекстОшибки, ТекстСообщения, НастройкаОбмена);
			
		ПриОшибкеТекущейОперацииСбербанк();
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	КонецПопытки;

	Если МассивНовыхСообщенийОбмена.Количество() Тогда
		Оповещение = Новый ОписаниеОповещения("ПолучитьКонечныеСтатусыЗапросовВыпискиПослеПроверкиПодписиСбербанк", ЭтотОбъект);
		ОбменСБанкамиСлужебныйКлиент.ОпределитьСтатусыПодписейСбербанк(Оповещение, НастройкаОбмена, МассивНовыхСообщенийОбмена);
		Оповестить("ОбновитьСостояниеОбменСБанками");
	Иначе
		ПолучитьКонечныеСтатусыЗапросовВыпискиПослеПроверкиПодписиСбербанк(Неопределено, Неопределено)
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКонечныеСтатусыЗапросовВыпискиПослеПроверкиПодписиСбербанк(
	Результат,
	ДополнительныеПараметры) Экспорт

	ОжиданиеОперацийБЭДКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОжиданияКонечногоСтатусаЗапросовВыпискиСбербанк);
	ПодключитьОбработчикОжидания("ПолучитьКонечныеСтатусыЗапросовВыпискиСбербанк", ПараметрыОжиданияКонечногоСтатусаЗапросовВыпискиСбербанк.ТекущийИнтервал, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияОтветаПоТикетуСбербанк(Результат, ДополнительныеПараметры) Экспорт

	МассивНовыхСообщенийОбмена = Новый Массив;

	Попытка
		КоличествоТомов = 0;
		ОбменСБанкамиСлужебныйВызовСервера.ОбработатьОтветСбербанка(
			Результат, НастройкаОбмена, МассивНовыхСообщенийОбмена, ТикетСбербанк, КоличествоТомов);
		Если КоличествоТомов > 0 Тогда
			Оповещение = Новый ОписаниеОповещения(
				"ПродолжитьПолучениеДокументовПоТикетамПослеОбработкиБольшогоПакетаСбербанк",
				 ЭтотОбъект, ДополнительныеПараметры);
			ПолучитьМноготомныйДокументЧерезТокенСбербанк(
				Оповещение, НастройкаОбмена, ИдентификаторОрганизации, ТикетСбербанк, КоличествоТомов);
			Возврат;
		КонецЕсли;
	Исключение
		ВидОперации = НСтр("ru = 'Чтение ответа Сбербанка.'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			
		ОбработкаНеисправностейБЭДВызовСервера.ОбработатьОшибку(ВидОперации, ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСБанками,
			ТекстОшибки, ТекстСообщения, НастройкаОбмена);
			
		ПриОшибкеТекущейОперацииСбербанк();
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	КонецПопытки;

	Если МассивНовыхСообщенийОбмена.Количество() Тогда
		Оповестить("ОбновитьСостояниеОбменСБанками");
		Оповещение = Новый ОписаниеОповещения("НачатьПолучениеДокументовПоТикетамСбербанк", ЭтотОбъект);
		ОбменСБанкамиСлужебныйКлиент.ОпределитьСтатусыПодписейСбербанк(
			Оповещение, НастройкаОбмена, МассивНовыхСообщенийОбмена);
	Иначе
		НачатьПолучениеДокументовПоТикетамСбербанк();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьПолучениеДокументовПоТикетамПослеОбработкиБольшогоПакетаСбербанк(Результат,
		ДополнительныеПараметры) Экспорт

	Если Не Результат.Успех Тогда
		ПриОшибкеТекущейОперацииСбербанк();
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	КонецЕсли;

	МассивНовыхСообщенийОбмена = Новый Массив;

	ОбменСБанкамиСлужебныйВызовСервера.СохранитьБольшойПакетСбербанк(НастройкаОбмена, ТикетСбербанк, Результат.МассивТомов, МассивНовыхСообщенийОбмена);

	Если МассивНовыхСообщенийОбмена.Количество() Тогда
		Оповестить("ОбновитьСостояниеОбменСБанками");
		Оповещение = Новый ОписаниеОповещения("НачатьПолучениеДокументовПоТикетамСбербанк", ЭтотОбъект);
		ОбменСБанкамиСлужебныйКлиент.ОпределитьСтатусыПодписейСбербанк(Оповещение, НастройкаОбмена, МассивНовыхСообщенийОбмена);
	Иначе
		НачатьПолучениеДокументовПоТикетамСбербанк()
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияОчередногоСтатусаЗапросаСбербанк(Ответ,
		ДополнительныеПараметры) Экспорт

	Если Ответ = Неопределено Тогда
		ПриОшибкеТекущейОперацииСбербанк();
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	КонецЕсли;

	Если Ответ = "<!--NOT PROCESSED YET-->"
			ИЛИ Ответ = "<!--NOT_PROCESSED_YET-->" Тогда
		ДополнительныеПараметры.МассивТикетовСбербанкКопия.Добавить(ДополнительныеПараметры.Тикет);
		ПолучитьСтатусыЗапросовРекурсивноСбербанк(ДополнительныеПараметры)
	ИначеЕсли Ответ = "<!--REQUEST NOT FOUND-->"
			ИЛИ Ответ = "<!--REQUEST_NOT_FOUND-->" Тогда
		ТекстОшибки = НСтр("ru = 'На сервере банка произошла ошибка: запрос не найден.
			|Повторите операцию позже.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		ПриОшибкеТекущейОперацииСбербанк();
		ЗакрытьФормуНаКлиенте(Истина);
	ИначеЕсли Ответ = "<!--REQUESTID DUBLIC-->"
			ИЛИ Ответ = "<!--REQUESTID_DUBLIC-->" Тогда
		ТекстОшибки = НСтр("ru = 'На сервере банка произошла ошибка: запрос с таким идентификатором уже существует.
			|Повторите операцию позже.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		ПриОшибкеТекущейОперацииСбербанк();
		ЗакрытьФормуНаКлиенте(Истина);
	Иначе
		Прогресс = "" + (СписокСообщенийОбмена.Количество()
			- МассивТикетовСбербанк.Количество()) + "/"
			+ СписокСообщенийОбмена.Количество();
		ВывестиПрогрессТекущейОперацииСбербанк(Прогресс);

		МассивНовыхСообщенийОбмена = Новый Массив;

		Попытка
			ОбменСБанкамиСлужебныйВызовСервера.ОбработатьОтветСбербанка(Ответ, НастройкаОбмена, МассивНовыхСообщенийОбмена);
		Исключение
			ВидОперации = НСтр("ru = 'Чтение ответа Сбербанка.'");
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ОбработкаНеисправностейБЭДВызовСервера.ОбработатьОшибку(ВидОперации, ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСБанками,
				ТекстОшибки, ТекстСообщения, НастройкаОбмена);
		
			ПриОшибкеТекущейОперацииСбербанк();
			ЗакрытьФормуНаКлиенте(Истина);
			Возврат;
		КонецПопытки;

		Если МассивНовыхСообщенийОбмена.Количество() Тогда
			Оповещение = Новый ОписаниеОповещения("ПолучитьСтатусыЗапросовПослеПроверкиПодписейСбербанк", ЭтотОбъект, ДополнительныеПараметры);
			ОбменСБанкамиСлужебныйКлиент.ОпределитьСтатусыПодписейСбербанк(Оповещение, НастройкаОбмена, МассивНовыхСообщенийОбмена);
			Оповестить("ОбновитьСостояниеОбменСБанками");
		Иначе
			ПолучитьСтатусыЗапросовРекурсивноСбербанк(ДополнительныеПараметры)
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСтатусыЗапросовПослеПроверкиПодписейСбербанк(Результат,
		ДополнительныеПараметры) Экспорт

	ПолучитьСтатусыЗапросовРекурсивноСбербанк(ДополнительныеПараметры)
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияСтатусаЗапросаСбербанк(Ответ,
		ДополнительныеПараметры) Экспорт

	Если Не ЗначениеЗаполнено(Ответ) Тогда
		ПриОшибкеТекущейОперацииСбербанк();
		ЗакрытьФормуНаКлиенте(Истина, Ложь);
		Возврат;
	КонецЕсли;

	Если Ответ = "<!--NOT PROCESSED YET-->"
			ИЛИ Ответ = "<!--NOT_PROCESSED_YET-->" Тогда
		ОжиданиеОперацийБЭДКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("ПолучитьОтветПоТикетуСбербанк", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	ИначеЕсли Ответ = "<!--REQUEST NOT FOUND-->"
			ИЛИ Ответ = "<!--REQUEST_NOT_FOUND-->" Тогда
		ТекстОшибки = НСтр("ru = 'На сервере банка произошла ошибка: запрос не найден.
			|Повторите операцию позже.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		ПриОшибкеТекущейОперацииСбербанк();
		ЗакрытьФормуНаКлиенте(Истина, Ложь);
		Возврат;
	ИначеЕсли Ответ = "<!--REQUESTID DUBLIC-->"
			ИЛИ Ответ = "<!--REQUESTID_DUBLIC-->" Тогда
		ТекстОшибки = НСтр("ru = 'На сервере банка произошла ошибка: запрос с таким идентификатором уже существует.
			|Повторите операцию позже.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		ПриОшибкеТекущейОперацииСбербанк();
		ЗакрытьФормуНаКлиенте(Истина, Ложь);
		Возврат;
	Иначе // Ответ получен
		СохранитьДатуСинхронизации(НастройкаОбмена);
		ВыполнитьОбработкуОповещения(ОповещениеПослеПолученияОтветаПоТикетуСбербанк, Ответ);
	КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтправкиЗапросаСтатусаЗапросаВыпискиСбербанк(Ответ,
		ДополнительныеПараметры) Экспорт

	Если Ответ = Неопределено Тогда
		ПриОшибкеТекущейОперацииСбербанк();
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	КонецЕсли;

	ТикетСбербанк = Ответ;

	ОповещениеПослеПолученияОтветаПоТикетуСбербанк = Новый ОписаниеОповещения("ПослеПолученияОтветаПоТикетуЗапросовВыпискиСбербанк", ЭтотОбъект);
	ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	ПодключитьОбработчикОжидания("ПолучитьОтветПоТикетуСбербанк", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПослеОтправкиЗапросаСостоянияПлатежныхДокументов(Результат,
		ДополнительныеПараметры) Экспорт

	Если Не ЗначениеЗаполнено(Результат) Тогда
		ПриОшибкеТекущейОперацииСбербанк();
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	КонецЕсли;

	МассивТикетовСбербанк.Добавить(Результат);
	НачатьПолучениеДокументовПоТикетамСбербанк();

КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыпискиПолученыСбербанк(Знач НастройкаОбмена, Знач МассивЗапросов,
		Знач ДатаНачала, Знач ДатаОкончания, Знач БанковскиеСчетаСсылка,
		Знач ДатаНачалаОперации, СтруктураВозврата)
	
	СтатусыЗапросов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивЗапросов, "Статус, ПричинаОтклонения, НомерСчета");
	
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("КоличествоВыписок", 0);
	СтруктураВозврата.Вставить("ВыпискиБанка", Новый Массив);
	СтруктураВозврата.Вставить("МассивСообщений", Новый Массив);
	СтруктураВозврата.Вставить("ЕстьОшибка", Ложь);
	
	СообщениеОЗапросеПоНевалидномуСчету = НСтр("ru = 'Нет открытых валидных счетов'");
	КоличествоОтклоненныхЗапросовВыписки = 0;
	КоличествоНеотклоненныхЗапросовВыписки = 0;
	ПоВсемЗапросамПолученаВыписка = Ложь;
	Для каждого ЭлементКоллекции Из СтатусыЗапросов Цикл
		Если ЭлементКоллекции.Значение.Статус = Перечисления.СтатусыОбменСБанками.Обработан Тогда
			СтруктураВозврата.КоличествоВыписок = СтруктураВозврата.КоличествоВыписок + 1;
		КонецЕсли;
		
		Если ЭлементКоллекции.Значение.Статус = Перечисления.СтатусыОбменСБанками.ОтклоненБанком Тогда
			КоличествоОтклоненныхЗапросовВыписки = КоличествоОтклоненныхЗапросовВыписки + 1;
			ШаблонОшибки = НСтр("ru = 'Выписка по счету %1 не получена по причине: %2'");
			Если ЭлементКоллекции.Значение.ПричинаОтклонения = СообщениеОЗапросеПоНевалидномуСчету Тогда
				КраткийШаблон  = НСтр("ru = 'Выписка по счету %1 не получена. Если он закрыт, то укажите в счете дату закрытия.'");
				ТекстСообщения = СтрШаблон(КраткийШаблон, ЭлементКоллекции.Значение.НомерСчета);
			Иначе
				ТекстСообщения = СтрШаблон(ШаблонОшибки, ЭлементКоллекции.Значение.НомерСчета, ЭлементКоллекции.Значение.Статус);
			КонецЕсли;
			
			СтруктураВозврата.МассивСообщений.Добавить(ТекстСообщения);
		Иначе
			КоличествоНеотклоненныхЗапросовВыписки = КоличествоНеотклоненныхЗапросовВыписки + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СтруктураВозврата.МассивСообщений) Тогда
		СтруктураВозврата.МассивСообщений = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СтруктураВозврата.МассивСообщений);
	КонецЕсли;
	
	ВсегоЗапросов = СтатусыЗапросов.Количество();
	Если ВсегоЗапросов > 0 И КоличествоОтклоненныхЗапросовВыписки = ВсегоЗапросов Тогда
		// Из банка уже ничего не получим, нужно прервать бесконечное ожидаение и вывести ошибку.
		СтруктураВозврата.ЕстьОшибка  = Истина;
		
		Возврат ПоВсемЗапросамПолученаВыписка;
	КонецЕсли;
	
	Если Не ЭтоАдресВременногоХранилища(БанковскиеСчетаСсылка) Тогда
		ВидОперации = НСтр("ru = 'Получение выписки из Сбербанка'");
		
		ОбработкаНеисправностейБЭД.ОбработатьОшибку(ВидОперации, ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСБанками,
			НСтр("ru = 'Невалидное временное хранилище БанковскиеСчетаСсылка'"), , НастройкаОбмена);
		СтруктураВозврата.ЕстьОшибка = Истина;
		
		Возврат ПоВсемЗапросамПолученаВыписка;
	КонецЕсли;
	
	МассивБанковскихСчетов = ПолучитьИзВременногоХранилища(БанковскиеСчетаСсылка);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СообщениеОбменСБанками.Ссылка КАК Ссылка,
	|	СообщениеОбменСБанками.ДатаНачала КАК ДатаНачала,
	|	СообщениеОбменСБанками.НомерСчета КАК НомерСчета,
	|	СообщениеОбменСБанками.Дата КАК Дата
	|ИЗ
	|	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
	|ГДЕ
	|	СообщениеОбменСБанками.НастройкаОбмена = &НастройкаОбмена
	|	И СообщениеОбменСБанками.ДатаНачала >= &ДатаНачала
	|	И СообщениеОбменСБанками.ДатаНачала <= &ДатаОкончания
	|	И СообщениеОбменСБанками.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭДОбменСБанками.ВыпискаБанка)
	|	И СообщениеОбменСБанками.НомерСчета В(&МассивСчетов)
	|	И СообщениеОбменСБанками.Дата >= &ДатаНачалаОперации
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаНачала УБЫВ,
	|	НомерСчета";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	Запрос.УстановитьПараметр("МассивСчетов", МассивБанковскихСчетов);
	Запрос.УстановитьПараметр("ДатаНачалаОперации", ДатаНачалаОперации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	ТекСчет = Неопределено;
	ТекДата = Неопределено;
	Пока Выборка.Следующий() Цикл
		Если Выборка.ДатаНачала <> ТекДата ИЛИ Выборка.НомерСчета <> ТекСчет Тогда
			ТекДата = Выборка.ДатаНачала;
			ТекСчет = Выборка.НомерСчета;
			СтруктураВозврата.ВыпискиБанка.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Если ВсегоЗапросов > 0
		И СтруктураВозврата.ВыпискиБанка.Количество() = КоличествоНеотклоненныхЗапросовВыписки
		И КоличествоНеотклоненныхЗапросовВыписки > 0 Тогда
		ПоВсемЗапросамПолученаВыписка = Истина;
	КонецЕсли;
	
	Возврат ПоВсемЗапросамПолученаВыписка;
	
КонецФункции

&НаКлиенте
Процедура НачатьПолучениеДокументовПоТикетамСбербанк(Результат = Неопределено,
		ДополнительныеПараметры = Неопределено) Экспорт

	Если МассивТикетовСбербанк.Количество() = 0 Тогда // все ответы получены
		ОбменСБанкамиСлужебныйКлиент.ПоказатьРезультатСинхронизации(КоличествоОтправленных, КоличествоПолученных);
		ЗакрытьФормуНаКлиенте(, Истина);
		Возврат;
	КонецЕсли;

	ТикетСбербанк = МассивТикетовСбербанк[0];
	МассивТикетовСбербанк.Удалить(0);

	ОповещениеПослеПолученияОтветаПоТикетуСбербанк = Новый ОписаниеОповещения("ПослеПолученияОтветаПоТикетуСбербанк", ЭтотОбъект);
	ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	ПодключитьОбработчикОжидания("ПолучитьОтветПоТикетуСбербанк", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ОжидатьВыпискуСбербанк()

	Если Не ФормаОткрыта Тогда
		Возврат;
	КонецЕсли;

	Оповещение = Новый ОписаниеОповещения("ПолучитьОтветПоТикетуПослеОтправкиЗапросаНовыхДокументовСбербанк", ЭтотОбъект);

	Сертификат = ОбменСБанкамиСлужебныйКлиент.ЗначениеИзКешаСбербанк("СертификатПодписи");

	ОбменСБанкамиСлужебныйКлиент.ОтправитьЗапросНовыхДокументовСбербанк(Оповещение, НастройкаОбмена, Сертификат, ИдентификаторСертификатаСбербанк);

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗапросыВыписокРекурсивноСбербанк(ДополнительныеПараметры)

	Если НЕ ДополнительныеПараметры.МассивТекстовЗапросов.Количество() Тогда // все запросы отправлены
		ПерейтиНаСледующийШагСбербанк();
		ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("ПолучитьВнешниеИдентификаторыЗапросовВыпискиСбербанк", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
		Возврат;
	КонецЕсли;

	ТекущийТекстЗапроса = ДополнительныеПараметры.МассивТекстовЗапросов.Получить(0);
	ДополнительныеПараметры.МассивТекстовЗапросов.Удалить(0);

	Оповещение = Новый ОписаниеОповещения("ПослеОтправкиОчередногоЗапросаВыпискиСбербанк", ЭтотОбъект, ДополнительныеПараметры);

	ОбменСБанкамиСлужебныйКлиент.ВыполнитьОтправкуДанныхЧерезТокенСбербанк(Оповещение, ТекущийТекстЗапроса, НастройкаОбмена);

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВнешниеИдентификаторыЗапросовВыпискиСбербанк()

	Если Не ФормаОткрыта Тогда
		Возврат;
	КонецЕсли;

	ДополнительныеПараметры = Новый Структура("МассивТикетовСбербанкКопия", Новый Массив);

	ПолучитьСтатусыЗапросовРекурсивноСбербанк(ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВыпискуПослеПолученияОтветаПоТикетуЗапросаНовыхДокументовСбербанк(Результат,
		ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		ПриОшибкеТекущейОперацииСбербанк();
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	КонецЕсли;
	
	РезультатЗадания = ЗапускЗаданияЧтенияОтветаБанка(НастройкаОбмена, Результат, ТикетСбербанк, УникальныйИдентификатор);
	
	ИдентификаторЗадания = РезультатЗадания.ИдентификаторЗадания;
	ПараметрыОбработчикаОжиданияНов = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОбработчикаОжиданияНов.ВыводитьСообщения = Истина;
	ПараметрыОбработчикаОжиданияНов.ВыводитьОкноОжидания = Ложь;
	Оповещение = Новый ОписаниеОповещения("ПослеЧтенияОтветаСбербанка", ЭтотОбъект, ДополнительныеПараметры);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатЗадания, Оповещение, ПараметрыОбработчикаОжиданияНов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЧтенияОтветаСбербанка(РезультатЗадания,
		ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(РезультатЗадания) Тогда
		ЗакрытьФормуНаКлиенте();
		Возврат;
	КонецЕсли;
	
	Если РезультатЗадания.Статус = "Ошибка" Тогда
		ПриОшибкеТекущейОперацииСбербанк();
		ЗакрытьФормуНаКлиенте(Истина);
		ВидОперации = НСтр("ru = 'Чтение данных, полученных из Сбербанка'");
		
		ОбработкаНеисправностейБЭДВызовСервера.ОбработатьОшибку(ВидОперации, ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСБанками,
			РезультатЗадания.ПодробноеПредставлениеОшибки, РезультатЗадания.КраткоеПредставлениеОшибки, НастройкаОбмена);
	Иначе // выполнено
		Если РезультатЗадания.Сообщения <> Неопределено Тогда
			ДобавитьСообщенияПользователю(РезультатЗадания.Сообщения);
		КонецЕсли;
		
		РезультатОперации = ПолучитьИзВременногоХранилища(РезультатЗадания.АдресРезультата);
		
		Если РезультатОперации.КоличествоТомов > 0 Тогда
			Оповещение = Новый ОписаниеОповещения("ПроверитьНаличиеВыписокПослеПолученияБольшогоПакетаСбербанк", ЭтотОбъект, ДополнительныеПараметры);
			ПолучитьМноготомныйДокументЧерезТокенСбербанк(Оповещение, НастройкаОбмена, ИдентификаторОрганизации, ТикетСбербанк, РезультатОперации.КоличествоТомов);
			Возврат;
		КонецЕсли;
		
		Если РезультатОперации.МассивНовыхСообщенийОбмена.Количество() Тогда
			Оповещение = Новый ОписаниеОповещения("ПроверитьНаличиеВыписокПослеПроверкиПодписейСбербанк", ЭтотОбъект);
			ОбменСБанкамиСлужебныйКлиент.ОпределитьСтатусыПодписейСбербанк(Оповещение, НастройкаОбмена, РезультатОперации.МассивНовыхСообщенийОбмена);
		Иначе
			ПроверитьНаличиеВыписокСбербанк();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСообщенияПользователю(Сообщения)

	Для Каждого Сообщение Из Сообщения Цикл
		МассивСообщенийПользователю.Добавить(Сообщение);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеВыписокПослеПроверкиПодписейСбербанк(Результат,
		ДополнительныеПараметры) Экспорт

	Оповестить("ОбновитьСостояниеОбменСБанками");
	ПроверитьНаличиеВыписокСбербанк();

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеВыписокПослеПолученияБольшогоПакетаСбербанк(Результат,
		ДополнительныеПараметры) Экспорт

	Если Не Результат.Успех Тогда
		ПриОшибкеТекущейОперацииСбербанк();
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	КонецЕсли;

	МассивНовыхСообщенийОбмена = Новый Массив;

	ОбменСБанкамиСлужебныйВызовСервера.СохранитьБольшойПакетСбербанк(НастройкаОбмена, ТикетСбербанк, Результат.МассивТомов, МассивНовыхСообщенийОбмена);

	Если МассивНовыхСообщенийОбмена.Количество() Тогда
		Оповещение = Новый ОписаниеОповещения("ПроверитьНаличиеВыписокСбербанк", ЭтотОбъект);
		ОбменСБанкамиСлужебныйКлиент.ОпределитьСтатусыПодписейСбербанк(Оповещение, НастройкаОбмена, МассивНовыхСообщенийОбмена);
		КоличествоПолученных = КоличествоПолученных
			+ МассивНовыхСообщенийОбмена.Количество();
		Оповестить("ОбновитьСостояниеОбменСБанками");
	Иначе
		ПроверитьНаличиеВыписокСбербанк();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМассивСообщенийПользователю(МассивСообщений)
	
	Для Каждого ТекстСообщения Из МассивСообщений Цикл
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		МассивСообщенийПользователю.Добавить(Сообщение);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеВыписокСбербанк(Результат = Неопределено,
		ДополнительныеПараметры = Неопределено) Экспорт
	
	СтруктураВозврата = Неопределено;
	ПолученыВсеВыписки = ВыпискиПолученыСбербанк(
		НастройкаОбмена, СписокСообщенийОбмена.ВыгрузитьЗначения(), ДатаНачала, ДатаОкончания, МассивБанковскихСчетовСсылка,
		ДатаНачалаОперацииСбербанк, СтруктураВозврата);
	
	Если ПолученыВсеВыписки Тогда
		ЗаполнитьМассивСообщенийПользователю(СтруктураВозврата.МассивСообщений);
		ЗакрытьФормуНаКлиенте( , РезультатПолученияВыписки(СтруктураВозврата.ВыпискиБанка));
	Иначе
		Прогресс = "" + СтруктураВозврата.КоличествоВыписок + "/"
			+ СписокСообщенийОбмена.Количество();
		ВывестиПрогрессТекущейОперацииСбербанк(Прогресс);
		ОжиданиеОперацийБЭДКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("ОжидатьВыпискуСбербанк", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИзвещениеОСостоянииДокументаСбербанк()

	Если ИспользуетсяКриптография Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеОтправкиЗапросаСтатусаЗапросаСостоянияСбербанк", ЭтотОбъект);
		ОбменСБанкамиСлужебныйКлиент.ПолучитьСтатусЗапросаСбербанк(Оповещение, ИдентификаторОрганизации, ИсходныйТикетСбербанк, НастройкаОбмена);
	Иначе
		ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПолучитьИзвещениеОСостоянииПлатежногоДокумента", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКонечныеСтатусыЗапросовВыпискиСбербанк()

	Если Не ФормаОткрыта Тогда
		Возврат;
	КонецЕсли;

	ЕстьОшибка = Ложь;
	КоличествоИдентификаторов = 0;
	ТекстЗапроса = ТекстЗапросаСостоянияЗапросовВыписокСбербанк(НастройкаОбмена, СписокСообщенийОбмена.ВыгрузитьЗначения(), КоличествоИдентификаторов, ЕстьОшибка);

	Если ЕстьОшибка Тогда
		ПриОшибкеТекущейОперацииСбербанк();
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	КонецЕсли;

	ВсегоЗапросов = СписокСообщенийОбмена.Количество();
	ВывестиПрогрессТекущейОперацииСбербанк("" + (ВсегоЗапросов
		- КоличествоИдентификаторов) + "/" + ВсегоЗапросов);

	Если ЗначениеЗаполнено(ТекстЗапроса) Тогда // есть запросы в не конечном статусе
		ТикетСбербанк = Неопределено;
		Оповещение = Новый ОписаниеОповещения("ПослеОтправкиЗапросаСтатусаЗапросаВыпискиСбербанк", ЭтотОбъект);
		ОбменСБанкамиСлужебныйКлиент.ВыполнитьОтправкуДанныхЧерезТокенСбербанк(Оповещение, ТекстЗапроса, НастройкаОбмена);
	Иначе // все запросы выписок имеют конечный статус
		ПерейтиНаСледующийШагСбербанк();
		ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("ОжидатьВыпискуСбербанк", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьНовыеДокументыСбербанк()

	ТикетСбербанк = ИсходныйТикетСбербанк;
	ОповещениеПослеПолученияОтветаПоТикетуСбербанк = Новый ОписаниеОповещения("ПослеПолученияОтветаПоТикетуЗапросаНовыхДокументовСбербанк", ЭтотОбъект);
	ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	ПодключитьОбработчикОжидания("ПолучитьОтветПоТикетуСбербанк", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьОтветПоТикетуПослеОтправкиЗапросаНовыхДокументовСбербанк(Результат,
		ДополнительныеПараметры) Экспорт

	Если Не Результат.Успех Тогда
		ПриОшибкеТекущейОперацииСбербанк();
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	КонецЕсли;

	ТикетСбербанк = Результат.Тикет;

	ОповещениеПослеПолученияОтветаПоТикетуСбербанк = Новый ОписаниеОповещения("ПолучитьВыпискуПослеПолученияОтветаПоТикетуЗапросаНовыхДокументовСбербанк", ЭтотОбъект);
	ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	ПодключитьОбработчикОжидания("ПолучитьОтветПоТикетуСбербанк", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьОтветПоТикетуСбербанк()

	Если Не ФормаОткрыта Тогда
		Возврат;
	КонецЕсли;

	Оповещение = Новый ОписаниеОповещения("ПослеПолученияСтатусаЗапросаСбербанк", ЭтотОбъект);

	ОбменСБанкамиСлужебныйКлиент.ПолучитьСтатусЗапросаСбербанк(Оповещение, ИдентификаторОрганизации, ТикетСбербанк, НастройкаОбмена);

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСтатусыЗапросовРекурсивноСбербанк(ДополнительныеПараметры)

	Если НЕ МассивТикетовСбербанк.Количество() Тогда

		Если ДополнительныеПараметры.МассивТикетовСбербанкКопия.Количество() Тогда
			МассивТикетовСбербанк = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ДополнительныеПараметры.МассивТикетовСбербанкКопия);
			ОжиданиеОперацийБЭДКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("ПолучитьВнешниеИдентификаторыЗапросовВыпискиСбербанк", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
		Иначе
			ПерейтиНаСледующийШагСбербанк();
			ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОжиданияКонечногоСтатусаЗапросовВыпискиСбербанк);
			ПодключитьОбработчикОжидания("ПолучитьКонечныеСтатусыЗапросовВыпискиСбербанк", ПараметрыОжиданияКонечногоСтатусаЗапросовВыпискиСбербанк.ТекущийИнтервал, Истина);
		КонецЕсли;
		Возврат;
	КонецЕсли;

	Тикет = МассивТикетовСбербанк.Получить(0);
	МассивТикетовСбербанк.Удалить(0);
	ДополнительныеПараметры.Вставить("Тикет", Тикет);

	Оповещение = Новый ОписаниеОповещения("ПослеПолученияОчередногоСтатусаЗапросаСбербанк", ЭтотОбъект, ДополнительныеПараметры);

	ОбменСБанкамиСлужебныйКлиент.ПолучитьСтатусЗапросаСбербанк(Оповещение, ИдентификаторОрганизации, Тикет, НастройкаОбмена);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстЗапросаСостоянияЗапросовВыписокСбербанк(Знач НастройкаОбмена,
		Знач МассивСообщенийОбмена, КоличествоИдентификаторов, ЕстьОшибка)

	Попытка
		ТекстЗапроса = ОбменСБанкамиСлужебный.ТекстЗапросаСостоянияЗапросовВыписокСбербанк(НастройкаОбмена, МассивСообщенийОбмена, КоличествоИдентификаторов);
	Исключение
		ВидОперации = НСтр("ru = 'Формирование запроса состояния запроса выписки'");
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ТекстОшибки, ТекстСообщения, "ОбменСБанками", НастройкаОбмена);
		ЕстьОшибка = Истина;
	КонецПопытки;

	Возврат ТекстЗапроса;

КонецФункции

&НаКлиенте
Процедура Подключаемый_ПолучитьРезультатПроверкиSMSСбербанк()

	Если Не ФормаОткрыта Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗакрытии);
		Возврат;
	КонецЕсли;

	Результат = ЗапускЗаданияПолученияРезультатовПроверкиСбербанк(
		НастройкаОбмена, СообщениеОбмена, ИсходныйТикетСбербанк, УникальныйИдентификатор);

	ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	Оповещение = Новый ОписаниеОповещения("ПослеПолученияРезультатовПроверкиSMSСбербанк", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, Оповещение, ПараметрыОжидания);

КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияРезультатовПроверкиSMSСбербанк(Результат,
		ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		ЗакрытьФормуНаКлиенте();
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ЗакрытьФормуНаКлиенте(Истина);
		ВидОперации = НСтр("ru = 'Проверка SMS в Сбербанке'");
		
		ОбработкаНеисправностейБЭДВызовСервера.ОбработатьОшибку(ВидОперации, ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСБанками,
			Результат.ПодробноеПредставлениеОшибки, Результат.КраткоеПредставлениеОшибки, НастройкаОбмена);
	Иначе // выполнено
		Результат = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Если Результат = Неопределено Тогда // банк еще не обработал запрос
			ОжиданиеОперацийБЭДКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПолучитьРезультатПроверкиSMSСбербанк", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
			Возврат;
		ИначеЕсли Результат Тогда
		// Необходимо получить статус документа, т.к. возможно требуется установки второй подписи.
			Результат = ЗапускЗаданияОтправкиЗапросаСтатусаПлатежаСбербанк(
				НастройкаОбмена, СообщениеОбмена, УникальныйИдентификатор);
			ДополнительныеПараметры = Новый Структура("АутентификацияПроизводилась", Ложь);
			ИдентификаторЗадания = Результат.ИдентификаторЗадания;
			ПараметрыОбработчикаОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
			ПараметрыОбработчикаОжидания.ВыводитьОкноОжидания = Ложь;
			Оповещение = Новый ОписаниеОповещения(
				"ПослеОтправкиЗапросаСтатусаПлатежаСбербанк", ЭтотОбъект, ДополнительныеПараметры);
			ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, Оповещение, ПараметрыОбработчикаОжидания);
			КоличествоПодтвержденных = КоличествоПодтвержденных + 1;
		Иначе
			ПоказатьОповещениеПользователя(НСтр("ru = 'Платеж не подтвержден'"), , , БиблиотекаКартинок.Ошибка32);
			Оповестить("ОбновитьСостояниеОбменСБанками");
			ЗакрытьФормуНаКлиенте();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеОтправкиЗапросаСтатусаПлатежаСбербанк(РезультатЗадания, ДополнительныеПараметры) Экспорт

	Если РезультатЗадания = Неопределено Тогда // задание было отменено
		Возврат;
	КонецЕсли;

	Если РезультатЗадания.Статус = "Ошибка" Тогда
		ЗакрытьФормуНаКлиенте(Истина);
		ВидОперации = НСтр("ru = 'Отправка запроса статуса платежа в Сбербанк'");
		
		ОбработкаНеисправностейБЭДВызовСервера.ОбработатьОшибку(ВидОперации, ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСБанками,
			РезультатЗадания.ПодробноеПредставлениеОшибки, РезультатЗадания.КраткоеПредставлениеОшибки, НастройкаОбмена);
	Иначе // выполнено
		РезультатОперации = ПолучитьИзВременногоХранилища(РезультатЗадания.АдресРезультата);
		УдалитьИзВременногоХранилища(РезультатЗадания.АдресРезультата);
		Если РезультатОперации.ТребуетсяАутентификация Тогда
			Если ДополнительныеПараметры.АутентификацияПроизводилась Тогда
				ТекстОшибки = НСтр("ru = 'Ошибка аутентификации на сервере банка'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
				ЗакрытьФормуНаКлиенте(Истина);
				Возврат;
			Иначе
				Обработчик = Новый ОписаниеОповещения(
					"ОтправитьЗапросСтатусаПлатежаПослеБазовойАутентификацииСбербанк", ЭтотОбъект, ДополнительныеПараметры);
				ОбменСБанкамиСлужебныйКлиент.ВыполнитьАутентификациюПоЛогинуСбербанк(
					Обработчик, ИмяВнешнегоМодуля, НастройкаОбмена, НастройкаОбмена);
			КонецЕсли
		Иначе // запрос был отправлен
			ИсходныйТикетСбербанк = РезультатОперации.Тикет;
			ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("ПолучитьИзвещениеОСостоянииДокументаСбербанк", 0.1, Истина);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗапросСтатусаПлатежаПослеБазовойАутентификацииСбербанк(Результат,
		ДополнительныеПараметры) Экспорт

	Если Результат.Успех Тогда
		Результат = ЗапускЗаданияОтправкиЗапросаСтатусаПлатежаСбербанк(НастройкаОбмена, СообщениеОбмена, УникальныйИдентификатор);

		Если Результат.Статус = "Выполняется" Тогда
			ИдентификаторЗадания = Результат.ИдентификаторЗадания;
			ПараметрыОбработчикаОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
			ПараметрыОбработчикаОжидания.ВыводитьОкноОжидания = Ложь;
			ДополнительныеПараметры = Новый Структура("АутентификацияПроизводилась", Истина);
			Оповещение = Новый ОписаниеОповещения("ПослеОтправкиЗапросаСтатусаПлатежаСбербанк", ЭтотОбъект, ДополнительныеПараметры);
			ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, Оповещение, ПараметрыОбработчикаОжидания);
		Иначе
			ПослеОтправкиЗапросаСтатусаПлатежаСбербанк(Результат, ДополнительныеПараметры)
		КонецЕсли;
	ИначеЕсли Результат.ТребуетсяТокен Тогда
		ВидОперации = НСтр("ru = 'Аутентификация на сервере Сбербанка'");
		ОбменСБанкамиКлиентСервер.СообщитьОбОшибкеСбербанк(ВидОперации, "GA==", НастройкаОбмена);
		ЗакрытьФормуНаКлиенте(Истина);
	Иначе
		ЗакрытьФормуНаКлиенте(Истина);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапускЗаданияОтправкиЗапросаСтатусаПлатежаСбербанк(
	Знач НастройкаОбмена,
	Знач СообщениеОбмена,
	Знач УникальныйИдентификатор)

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение статуса платежа Сбербанка.'");

	ПараметрыСинхронизации = Новый Структура;
	ТекущаяСессия = ОбменСБанкамиСлужебный.ПараметрыУстановленнойСессииСбербанк(НастройкаОбмена);
	ПараметрыСинхронизации.Вставить("ТекущаяСессия", ТекущаяСессия);
	ПараметрыСинхронизации.Вставить("НастройкаОбмена", НастройкаОбмена);
	ПараметрыСинхронизации.Вставить("СообщениеОбмена", СообщениеОбмена);

	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ОбменСБанкамиСлужебный.ОтправитьЗапросСтатусаПлатежногоДокумента", ПараметрыСинхронизации, ПараметрыВыполнения);

КонецФункции

&НаСервереБезКонтекста
Функция ЗапускЗаданияПолученияРезультатовПроверкиСбербанк(
	Знач НастройкаОбмена,
	Знач СообщениеОбмена,
	Знач Тикет,
	Знач УникальныйИдентификатор)

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение результатов проверки SMS из Сбербанка.'");

	ПараметрыОтправки = Новый Структура;
	ТекущаяСессия = ОбменСБанкамиСлужебный.ПараметрыУстановленнойСессииСбербанк(НастройкаОбмена);
	ПараметрыОтправки.Вставить("ТекущаяСессия", ТекущаяСессия);
	ПараметрыОтправки.Вставить("НастройкаОбмена", НастройкаОбмена);
	ПараметрыОтправки.Вставить("Тикет", Тикет);
	ПараметрыОтправки.Вставить("СообщениеОбмена", СообщениеОбмена);

	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ОбменСБанкамиСлужебный.ПолучитьРезультатПроверкиSMSСбербанк", ПараметрыОтправки, ПараметрыВыполнения);

КонецФункции

&НаКлиенте
Процедура Подключаемый_ПолучитьИдентификаторКриптопрофиляСбербанк()

	Если Не ФормаОткрыта Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗакрытии);
		Возврат;
	КонецЕсли;

	Результат = ЗапускЗаданияПолученияИдентификатораКриптопрофиляСбербанк(
		НастройкаОбмена, ИсходныйТикетСбербанк, УникальныйИдентификатор);

	ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	Оповещение = Новый ОписаниеОповещения("ПослеПолученияИдентификатораКриптопрофиляСбербанк", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапускЗаданияПолученияИдентификатораКриптопрофиляСбербанк(
	Знач НастройкаОбмена,
	Знач Тикет,
	Знач УникальныйИдентификатор)

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение идентификатора криптопрофиля из Сбербанка.'");

	ПараметрыОтправки = Новый Структура;
	ТекущаяСессия = ОбменСБанкамиСлужебный.ПараметрыУстановленнойСессииСбербанк(НастройкаОбмена);
	ПараметрыОтправки.Вставить("ТекущаяСессия", ТекущаяСессия);
	ПараметрыОтправки.Вставить("НастройкаОбмена", НастройкаОбмена);
	ПараметрыОтправки.Вставить("Тикет", Тикет);

	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ОбменСБанкамиСлужебный.ПолучитьИдентификаторКриптопрофиляСбербанк", ПараметрыОтправки, ПараметрыВыполнения);

КонецФункции

&НаКлиенте
Процедура ПослеПолученияИдентификатораКриптопрофиляСбербанк(Результат,
		ДополнительныеПараметры) Экспорт

	Если Не ФормаОткрыта Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗакрытии);
		Возврат;
	КонецЕсли;

	Если Результат = Неопределено Тогда
		ЗакрытьФормуНаКлиенте();
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		Закрыть();
		ТекстСообщения = НСтр("ru = 'При подтверждении документа %1 произошла ошибка:
			|%2'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, СообщениеОбмена, Результат.КраткоеПредставлениеОшибки);

		ВидОперации = НСтр("ru = 'Подтверждение документа в Сбербанке'");
		
		ОбработкаНеисправностейБЭДВызовСервера.ОбработатьОшибку(ВидОперации, ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСБанками,
			Результат.ПодробноеПредставлениеОшибки, ТекстСообщения, НастройкаОбмена);
	Иначе // выполнено
		ИдентификаторКриптопрофиля = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);

		Если ИдентификаторКриптопрофиля = Неопределено Тогда // банк еще не успел подготовить ответ
			ОжиданиеОперацийБЭДКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПолучитьИдентификаторКриптопрофиляСбербанк", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
		Иначе
			ЗакрытьФормуНаКлиенте(, ИдентификаторКриптопрофиля);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияСтатусовЗапросовСбербанк(Результат,
		ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда // задание было отменено
		ЗакрытьФормуНаКлиенте();
		Возврат;
	КонецЕсли;

	Если Результат.Статус = "Ошибка" Тогда
		ПриОшибкеТекущейОперацииСбербанк();
		ВидОперации = НСтр("ru = 'Получение статуса запроса в Сбербанке'");
		
		ОбработкаНеисправностейБЭДВызовСервера.ОбработатьОшибку(ВидОперации, ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСБанками,
			Результат.ПодробноеПредставлениеОшибки, Результат.КраткоеПредставлениеОшибки, НастройкаОбмена);
		ЗакрытьФормуНаКлиенте(Истина);
	Иначе // выполнено
		РезультатОтправки = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Если РезультатОтправки.ТребуетсяАутентификация Тогда
			Обработчик = Новый ОписаниеОповещения("ПолучитьВнешниеИдентификаторыЗапросовВыпискиПослеПовторнойАутентификацииПоЛогинуСбербанк", ЭтотОбъект, ДополнительныеПараметры);
			ОбменСБанкамиСлужебныйКлиент.ВыполнитьАутентификациюПоЛогинуСбербанк(Обработчик, ИмяВнешнегоМодуля, НастройкаОбмена, НастройкаОбмена);
		ИначеЕсли РезультатОтправки.МассивНеобработанныхТикетов.Количество() Тогда
			МассивТикетовСсылкаСбербанк = ПоместитьВоВременноеХранилище(РезультатОтправки.МассивНеобработанныхТикетов, УникальныйИдентификатор);
			ОжиданиеОперацийБЭДКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПолучитьВнешниеИдентификаторыЗапросовВыпискиПоЛогинуСбербанк", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
		Иначе
			КоличествоЗапросов = СписокСообщенийОбмена.Количество();
			ВывестиПрогрессТекущейОперацииСбербанк("" + КоличествоЗапросов + "/"
				+ КоличествоЗапросов);
			ПерейтиНаСледующийШагСбербанк();
			ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОжиданияКонечногоСтатусаЗапросовВыпискиСбербанк);
			ПодключитьОбработчикОжидания("Подключаемый_ПолучитьКонечныеСтатусыЗапросовВыпискиПоЛогинуСбербанк", ПараметрыОжиданияКонечногоСтатусаЗапросовВыпискиСбербанк.ТекущийИнтервал, Истина);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВнешниеИдентификаторыЗапросовВыпискиПослеПовторнойАутентификацииПоЛогинуСбербанк(Результат,
		ДополнительныеПараметры) Экспорт

	Если Результат.Успех Тогда
		ПодключитьОбработчикОжидания(
			"Подключаемый_ПолучитьВнешниеИдентификаторыЗапросовВыпискиПоЛогинуСбербанк",
			ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	ИначеЕсли Результат.ТребуетсяТокен Тогда
		ВидОперации = НСтр("ru = 'Аутентификация на сервере Сбербанка'");
		ОбменСБанкамиКлиентСервер.СообщитьОбОшибкеСбербанк(ВидОперации, "GA==", НастройкаОбмена);
		ПриОшибкеТекущейОперацииСбербанк();
		ЗакрытьФормуНаКлиенте(Истина);
	Иначе
		ПриОшибкеТекущейОперацииСбербанк();
		ЗакрытьФормуНаКлиенте(Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеОтправкиЗапросовСтатусовЗапросовВыписокСбербанк(Результат,
		ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда // задание было отменено
		ЗакрытьФормуНаКлиенте();
		Возврат;
	КонецЕсли;

	Если Результат.Статус = "Ошибка" Тогда
		ПриОшибкеТекущейОперацииСбербанк();
		ВидОперации = НСтр("ru = 'Отправка запроса статуса документа в Сбербанк'");
		
		ОбработкаНеисправностейБЭДВызовСервера.ОбработатьОшибку(ВидОперации, ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСБанками,
			Результат.ПодробноеПредставлениеОшибки, Результат.КраткоеПредставлениеОшибки, НастройкаОбмена);
		
		ЗакрытьФормуНаКлиенте(Истина);
	Иначе // выполнено
		РезультатОтправки = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Если РезультатОтправки = Неопределено Тогда // все запросы имеют конечные статусы
			КоличествоЗапросов = СписокСообщенийОбмена.Количество();
			ВывестиПрогрессТекущейОперацииСбербанк("" + КоличествоЗапросов + "/"
				+ КоличествоЗапросов);
			ПерейтиНаСледующийШагСбербанк();
			ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОжиданияПолученияВыписки);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ОжидатьВыпискуСбербанк", ПараметрыОжиданияПолученияВыписки.ТекущийИнтервал, Истина);
		Иначе
			МассивТикетовСсылкаСбербанк = Результат.АдресРезультата;
			ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПолучитьИзвещенияНаЗапросыВыписокСбербанк", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОжидатьВыпискуСбербанк()

	Результат = ЗапускЗаданияОтправкиЗапросаНовыхДокументовСбербанк(НастройкаОбмена, УникальныйИдентификатор);

	ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	Оповещение = Новый ОписаниеОповещения("ПослеПолученияТикетаНаЗапросНовыхДокументовСбербанк", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, Оповещение, ПараметрыОжидания);

КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияТикетаНаЗапросНовыхДокументовСбербанк(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда // задание было отменено
		ЗакрытьФормуНаКлиенте();
		Возврат;
	КонецЕсли;

	Если Результат.Статус = "Ошибка" Тогда
		ПроизошлаОшибка = Истина;
		ВидОперации = НСтр("ru = 'Отправка запроса новых документов в Сбербанк'");
		
		ОбработкаНеисправностейБЭДВызовСервера.ОбработатьОшибку(ВидОперации, ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСБанками,
			Результат.ПодробноеПредставлениеОшибки,
			Результат.КраткоеПредставлениеОшибки, НастройкаОбмена);
		
		ПриОшибкеТекущейОперацииСбербанк();
		ЗакрытьФормуНаКлиенте(Истина);
	Иначе // выполнено
		МассивТикетовСсылкаСбербанк = Результат.АдресРезультата;
		ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания(
			"Подключаемый_ПолучитьНовыеДокументыПоТикетуСбербанк", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолучитьНовыеДокументыПоТикетуСбербанк()

	Если Не ФормаОткрыта Тогда
		Возврат;
	КонецЕсли;

	Результат = ЗапускЗаданияПолученияСтатусовЗапросовПоЛогинуСбербанк(
		НастройкаОбмена, МассивТикетовСсылкаСбербанк, СписокСообщенийОбмена.Количество(), УникальныйИдентификатор);

	ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	Оповещение = Новый ОписаниеОповещения("ПослеПолученияНовыхДокументовСбербанк", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, Оповещение, ПараметрыОжидания);

КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияНовыхДокументовСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда // задание было отменено
		Если ЗакрытиеОкнаСПолученнымиВыпискамиСбербанк Тогда
			РезультатДляЗакрытия = Новый Структура("Успех, ВыпискиБанка, СообщенияПользователю", Истина, Новый Массив, Новый Массив);
			ЗакрытьФормуНаКлиенте(Ложь, РезультатДляЗакрытия);
		Иначе
			ЗакрытьФормуНаКлиенте();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ПроизошлаОшибка = Истина;
		ВидОперации = НСтр("ru = 'Получение новых документов из Сбербанка'");
		
		ОбработкаНеисправностейБЭДВызовСервера.ОбработатьОшибку(ВидОперации, ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСБанками,
			Результат.ПодробноеПредставлениеОшибки, Результат.КраткоеПредставлениеОшибки, НастройкаОбмена);
		
		ПриОшибкеТекущейОперацииСбербанк();
		ЗакрытьФормуНаКлиенте(Истина);
	Иначе // выполнено
		РезультатОтправки = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Если РезультатОтправки.ТребуетсяАутентификация Тогда
			Обработчик = Новый ОписаниеОповещения("ПолучитьНовыеДокументыПослеПовторнойАутентификацииПоЛогинуСбербанк",
				ЭтотОбъект, ДополнительныеПараметры);
			ОбменСБанкамиСлужебныйКлиент.ВыполнитьАутентификациюПоЛогинуСбербанк(
				Обработчик, ИмяВнешнегоМодуля, НастройкаОбмена, НастройкаОбмена);
		ИначеЕсли РезультатОтправки.МассивНеобработанныхТикетов.Количество() Тогда
			МассивТикетовСсылкаСбербанк = ПоместитьВоВременноеХранилище(
				РезультатОтправки.МассивНеобработанныхТикетов, УникальныйИдентификатор);
			ОжиданиеОперацийБЭДКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПолучитьНовыеДокументыПоТикетуСбербанк", ПараметрыОбработчикаОжидания.ТекущийИнтервал,
				Истина);
		Иначе
			СтруктураВозврата = Неопределено;
			ПолученыВсеВыписки = ВыпискиПолученыСбербанк(НастройкаОбмена, СписокСообщенийОбмена.ВыгрузитьЗначения(),
				ДатаНачала, ДатаОкончания, МассивБанковскихСчетовСсылка, ДатаНачалаОперацииСбербанк, СтруктураВозврата);
			
			ЕстьОшибка = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураВозврата, "ЕстьОшибка", Ложь);
			Если ЕстьОшибка Тогда
				ПриОшибкеТекущейОперацииСбербанк();
				ЗакрытьФормуНаКлиенте(Истина);
			ИначеЕсли ПолученыВсеВыписки Тогда
				ЗаполнитьМассивСообщенийПользователю(СтруктураВозврата.МассивСообщений);
				ЗакрытьФормуНаКлиенте( , РезультатПолученияВыписки(СтруктураВозврата.ВыпискиБанка));
			Иначе
				ОжиданиеОперацийБЭДКлиент.ОбновитьПараметрыОбработчикаОжидания(
					ПараметрыОжиданияПолученияВыписки);
				ПодключитьОбработчикОжидания(
					"Подключаемый_ОжидатьВыпискуСбербанк", ПараметрыОжиданияПолученияВыписки.ТекущийИнтервал, Истина);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьНовыеДокументыПослеПовторнойАутентификацииПоЛогинуСбербанк(Результат,
		ДополнительныеПараметры) Экспорт

	Если Результат.Успех Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПолучитьНовыеДокументыПоТикетуСбербанк", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	ИначеЕсли Результат.ТребуетсяТокен Тогда
		ВидОперации = НСтр("ru = 'Аутентификация на сервере Сбербанка'");
		ОбменСБанкамиКлиентСервер.СообщитьОбОшибкеСбербанк(ВидОперации, "GA==", НастройкаОбмена);
		ПриОшибкеТекущейОперацииСбербанк();
		ЗакрытьФормуНаКлиенте(Истина);
	Иначе
		ПриОшибкеТекущейОперацииСбербанк();
		ЗакрытьФормуНаКлиенте(Истина);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапускЗаданияОтправкиЗапросаНовыхДокументовСбербанк(Знач НастройкаОбмена, Знач УникальныйИдентификатор)

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Отправка запроса новых документов в Сбербанк.'");

	ПараметрыОтправки = Новый Структура;
	ТекущаяСессия = ОбменСБанкамиСлужебный.ПараметрыУстановленнойСессииСбербанк(НастройкаОбмена);
	ПараметрыОтправки.Вставить("ТекущаяСессия", ТекущаяСессия);
	ПараметрыОтправки.Вставить("НастройкаОбмена", НастройкаОбмена);

	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ОбменСБанкамиСлужебный.ОтправитьЗапросНовыхДокументовСбербанк", ПараметрыОтправки, ПараметрыВыполнения);

КонецФункции

&НаКлиенте
Процедура Подключаемый_ПолучитьИзвещенияНаЗапросыВыписокСбербанк()

	Если Не ФормаОткрыта Тогда
		Возврат;
	КонецЕсли;

	Результат = ЗапускЗаданияПолученияСтатусовЗапросовПоЛогинуСбербанк(НастройкаОбмена, МассивТикетовСсылкаСбербанк, СписокСообщенийОбмена.Количество(), УникальныйИдентификатор);

	Если Результат.Статус = "Выполняется" Тогда
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		Оповещение = Новый ОписаниеОповещения("ПослеПолученияПромежуточныхСтатусовЗапросовСбербанк", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, Оповещение, ПараметрыОжидания);
	Иначе
		ПослеПолученияПромежуточныхСтатусовЗапросовСбербанк(Результат, Неопределено);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияПромежуточныхСтатусовЗапросовСбербанк(Результат,
		ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда // задание было отменено
		ЗакрытьФормуНаКлиенте();
		Возврат;
	КонецЕсли;

	Если Результат.Статус = "Ошибка" Тогда
		ПроизошлаОшибка = Истина;
		ВидОперации = НСтр("ru = 'Получение статусов документов из Сбербанка'");
		
		ОбработкаНеисправностейБЭДВызовСервера.ОбработатьОшибку(ВидОперации, ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСБанками,
			Результат.ПодробноеПредставлениеОшибки, Результат.КраткоеПредставлениеОшибки, НастройкаОбмена);
			
		ЗакрытьФормуНаКлиенте(Истина);
		ПриОшибкеТекущейОперацииСбербанк();
	Иначе // выполнено
		РезультатОтправки = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Если РезультатОтправки.ТребуетсяАутентификация Тогда
			Обработчик = Новый ОписаниеОповещения("ПолучитьИзвещенияНаЗапросыВыписокПослеПовторнойАутентификацииПоЛогинуСбербанк", ЭтотОбъект, ДополнительныеПараметры);
			ОбменСБанкамиСлужебныйКлиент.ВыполнитьАутентификациюПоЛогинуСбербанк(Обработчик, ИмяВнешнегоМодуля, НастройкаОбмена, НастройкаОбмена);
		ИначеЕсли РезультатОтправки.МассивНеобработанныхТикетов.Количество() Тогда
			МассивТикетовСсылкаСбербанк = ПоместитьВоВременноеХранилище(РезультатОтправки.МассивНеобработанныхТикетов, УникальныйИдентификатор);
			ОжиданиеОперацийБЭДКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПолучитьИзвещенияНаЗапросыВыписокСбербанк", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);

		Иначе
			ОжиданиеОперацийБЭДКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОжиданияКонечногоСтатусаЗапросовВыпискиСбербанк);
			ПодключитьОбработчикОжидания("Подключаемый_ПолучитьКонечныеСтатусыЗапросовВыпискиПоЛогинуСбербанк", ПараметрыОжиданияКонечногоСтатусаЗапросовВыпискиСбербанк.ТекущийИнтервал, Истина);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИзвещенияНаЗапросыВыписокПослеПовторнойАутентификацииПоЛогинуСбербанк(Результат,
		ДополнительныеПараметры) Экспорт

	Если Результат.Успех Тогда
		ПодключитьОбработчикОжидания(
			"Подключаемый_ПолучитьВнешниеИдентификаторыЗапросовВыпискиПоЛогинуСбербанк",
			ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	ИначеЕсли Результат.ТребуетсяТокен Тогда
		ВидОперации = НСтр("ru = 'Аутентификация на сервере Сбербанка'");
		ОбменСБанкамиКлиентСервер.СообщитьОбОшибкеСбербанк(ВидОперации, "GA==", НастройкаОбмена);
		ПриОшибкеТекущейОперацииСбербанк();
		ЗакрытьФормуНаКлиенте(Истина);
	Иначе
		ПриОшибкеТекущейОперацииСбербанк();
		ЗакрытьФормуНаКлиенте(Истина);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапускЗаданияЗапросаСтатусаЗапросовСбербанк(
	Знач НастройкаОбмена,
	Знач МассивСообщенийОбмена,
	Знач УникальныйИдентификатор)

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Отправка запроса статуса запросов выписки Сбербанка.'");

	ПараметрыОтправки = Новый Структура;
	ТекущаяСессия = ОбменСБанкамиСлужебный.ПараметрыУстановленнойСессииСбербанк(НастройкаОбмена);
	ПараметрыОтправки.Вставить("ТекущаяСессия", ТекущаяСессия);
	ПараметрыОтправки.Вставить("НастройкаОбмена", НастройкаОбмена);
	ПараметрыОтправки.Вставить("МассивСообщенийОбмена", МассивСообщенийОбмена);

	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ОбменСБанкамиСлужебный.ОтправитьЗапросыСтатусовЗапросовПоЛогинуСбербанк", ПараметрыОтправки, ПараметрыВыполнения);

КонецФункции

&НаКлиенте
Процедура Подключаемый_ПолучитьИзвещениеОСостоянииПлатежногоДокумента()

	Если Не ФормаОткрыта Тогда
		Возврат;
	КонецЕсли;

	Результат = ЗапускЗаданияПолученияСтатусаПлатежногоДокументаСбербанк(
		НастройкаОбмена, ИсходныйТикетСбербанк, УникальныйИдентификатор);
	
	ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	Оповещение = Новый ОписаниеОповещения("ПослеПолученияСтатусаПлатежаСбербанк", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, Оповещение, ПараметрыОжидания);

КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияСтатусаПлатежаСбербанк(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда // задание было отменено
		ЗакрытьФормуНаКлиенте();
		Возврат;
	КонецЕсли;

	Если Результат.Статус = "Ошибка" Тогда
		ПроизошлаОшибка = Истина;
		ВидОперации = НСтр("ru = 'Получение статуса платежа из Сбербанка'");
		
		ОбработкаНеисправностейБЭДВызовСервера.ОбработатьОшибку(ВидОперации, ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСБанками,
			Результат.ПодробноеПредставлениеОшибки, Результат.КраткоеПредставлениеОшибки, НастройкаОбмена);
		
		ЗакрытьФормуНаКлиенте(Истина);
	Иначе // выполнено
		РезультатОтправки = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Если РезультатОтправки.ТребуетсяАутентификация Тогда
			Обработчик = Новый ОписаниеОповещения(
				"ПолучитьСтатусПлатежаПослеАутентификацииПоЛогинуСбербанк", ЭтотОбъект, ДополнительныеПараметры);
			ОбменСБанкамиСлужебныйКлиент.ВыполнитьАутентификациюПоЛогинуСбербанк(
				Обработчик, ИмяВнешнегоМодуля, НастройкаОбмена, НастройкаОбмена);
		ИначеЕсли РезультатОтправки.МассивНеобработанныхТикетов.Количество() Тогда
			ОжиданиеОперацийБЭДКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПолучитьИзвещениеОСостоянииПлатежногоДокумента",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
		Иначе
			Оповестить("ОбновитьСостояниеОбменСБанками");
			Если КоличествоПодтвержденных > 0 Тогда
				ПоказатьОповещениеПользователя(НСтр("ru = 'Платеж подтвержден'"), , , БиблиотекаКартинок.Успешно32);
				ЗакрытьФормуНаКлиенте(, Истина);
			Иначе
				ЗакрытьФормуНаКлиенте();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСтатусПлатежаПослеАутентификацииПоЛогинуСбербанк(Результат,
		ДополнительныеПараметры) Экспорт

	Если Результат.Успех Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПолучитьИзвещениеОСостоянииПлатежногоДокумента", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	ИначеЕсли Результат.ТребуетсяТокен Тогда
		ВидОперации = НСтр("ru = 'Аутентификация на сервере Сбербанка'");
		ОбменСБанкамиКлиентСервер.СообщитьОбОшибкеСбербанк(ВидОперации, "GA==", НастройкаОбмена);
		ЗакрытьФормуНаКлиенте(Истина);
	Иначе
		ЗакрытьФормуНаКлиенте(Истина);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапускЗаданияПолученияСтатусаПлатежногоДокументаСбербанк(
	Знач НастройкаОбмена,
	Знач Тикет,
	Знач УникальныйИдентификатор)

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение статуса платежного документа из Сбербанка.'");

	МассивТикетов = Новый Массив;
	МассивТикетов.Добавить(Тикет);

	ПараметрыОтправки = Новый Структура;
	ТекущаяСессия = ОбменСБанкамиСлужебный.ПараметрыУстановленнойСессииСбербанк(НастройкаОбмена);
	ПараметрыОтправки.Вставить("ТекущаяСессия", ТекущаяСессия);
	ПараметрыОтправки.Вставить("НастройкаОбмена", НастройкаОбмена);
	ПараметрыОтправки.Вставить("МассивТикетов", МассивТикетов);
	ПараметрыОтправки.Вставить("СоздаватьОперацииВыписки", Истина);
	ПараметрыОтправки.Вставить("КоличествоЗапросов", 1);

	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ОбменСБанкамиСлужебный.ПолучитьСтатусыЗапросовПоЛогинуСбербанк", ПараметрыОтправки, ПараметрыВыполнения);

КонецФункции

&НаКлиенте
Процедура НачатьФормированиеЗапросовВыписокСбербанк()

	РезультатОтправки = ЗапускЗаданияФормированияЗапросовВыпискиСбербанк(
		НастройкаОбмена, ДатаНачала, ДатаОкончания, МассивБанковскихСчетовСсылка, УникальныйИдентификатор);

	ИдентификаторЗадания = РезультатОтправки.ИдентификаторЗадания;
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОжидания.ОповещениеОПрогрессеВыполнения = Новый ОписаниеОповещения(
		"ВывестиПрогрессТекущейДлительнойОперацииСбербанк", ЭтотОбъект);
	Оповещение = Новый ОписаниеОповещения("ПослеФормированияЗапросовВыпискиСбербанк", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатОтправки, Оповещение, ПараметрыОжидания);

КонецПроцедуры

&НаКлиенте
Процедура ВывестиПрогрессТекущейДлительнойОперацииСбербанк(Результат,
		ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено ИЛИ Результат.Прогресс = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Элементы["Прогресс"
		+ ТекущийШагСбербанк].Заголовок = Результат.Прогресс.Текст;

КонецПроцедуры

&НаКлиенте
Процедура ПослеФормированияЗапросовВыпискиСбербанк(Результат,
		ДополнительныеПараметры = Неопределено) Экспорт

	Если Результат = Неопределено Тогда // задание было отменено
		ЗакрытьФормуНаКлиенте();
		Возврат;
	КонецЕсли;

	Если Результат.Статус = "Ошибка" Тогда
		ПриОшибкеТекущейОперацииСбербанк();
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.КраткоеПредставлениеОшибки, НастройкаОбмена);
		ЗакрытьФормуНаКлиенте(Истина);
	Иначе // выполнено
		СообщенияОбменаСбербанк = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		СписокСообщенийОбмена.ЗагрузитьЗначения(СообщенияОбменаСбербанк);
		КоличествоЗапросов = СообщенияОбменаСбербанк.Количество();
		ВывестиПрогрессТекущейОперацииСбербанк("" + КоличествоЗапросов + "/"
			+ КоличествоЗапросов);
		ПерейтиНаСледующийШагСбербанк();

		Если ИспользуетсяКриптография Тогда
			ОбработчикПослеПодписания = Новый ОписаниеОповещения("ОтправитьЗапросВыпискиПослеПодписанияСбербанк", ЭтотОбъект);
			СообщенияОбмена = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(СообщенияОбменаСбербанк);
			ПодписатьСообщенияОбменаРекурсивноСбербанк(ОбработчикПослеПодписания, СообщенияОбмена);
		Иначе
			ПодключитьОбработчикОжидания("НачатьОтправкуЗапросовВыписокПоЛогинуСбербанк", 0.1, Истина);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСледующийШагСбербанк()

	Элементы["Картинка"
		+ ТекущийШагСбербанк].Картинка = БиблиотекаКартинок.ВнешняяКомпонентаДоступна;
	Индекс = МассивШаговСбербанк.Найти(ТекущийШагСбербанк);
	Если МассивШаговСбербанк.Количество() > Индекс + 1 Тогда
		ТекущийШагСбербанк = МассивШаговСбербанк.Получить(Индекс + 1);
		Элементы["Картинка"
			+ ТекущийШагСбербанк].Картинка = БиблиотекаКартинок.ДлительнаяОперация16;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОшибкеТекущейОперацииСбербанк()

	Если ЗначениеЗаполнено(ТекущийШагСбербанк) Тогда
		Элементы["Картинка"
			+ ТекущийШагСбербанк].Картинка = БиблиотекаКартинок.ОформлениеКрест;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВывестиПрогрессТекущейОперацииСбербанк(Прогресс)

	Если ЗначениеЗаполнено(ТекущийШагСбербанк) Тогда
		Элементы["Прогресс" + ТекущийШагСбербанк].Заголовок = Прогресс;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НачатьОтправкуЗапросовВыписокПоЛогинуСбербанк()

	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("НастройкаОбмена", НастройкаОбмена);
	ПараметрыОтправки.Вставить("МассивСообщенийОбмена", СписокСообщенийОбмена.ВыгрузитьЗначения());
	ПараметрыОтправки.Вставить("ВидЭД", ПредопределенноеЗначение("Перечисление.ВидыЭДОбменСБанками.ЗапросВыписки"));
	ПараметрыОтправки.Вставить("ПолучитьСтатусыДокументов", Ложь);
	ПараметрыОтправки.Вставить("АдресРезультата");
	ПараметрыОтправки.Вставить("ВыводитьПрогрессВыполнения", Истина);

	РезультатОтправки = ОбменСБанкамиСлужебныйВызовСервера.ЗапускЗаданияПоОтправкеДокументовПоЛогинуВСбербанк(
		ПараметрыОтправки);
	ИдентификаторЗадания = РезультатОтправки.ИдентификаторЗадания;
	ПараметрыОбработчикаОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОбработчикаОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОбработчикаОжидания.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОбработчикаОжидания.ОповещениеОПрогрессеВыполнения = Новый ОписаниеОповещения(
		"ВывестиПрогрессТекущейДлительнойОперацииСбербанк", ЭтотОбъект);
	Оповещение = Новый ОписаниеОповещения("ПослеОтправкиЗапросовВыписокПоЛогинуСбербанк", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатОтправки, Оповещение, ПараметрыОбработчикаОжидания);

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗапросВыпискиПослеПодписанияСбербанк(Результат,
		ДополнительныеПараметры = Неопределено) Экспорт

	Если Не Результат.Успех Тогда
		ПриОшибкеТекущейОперацииСбербанк();
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	КонецЕсли;

	ПерейтиНаСледующийШагСбербанк();

	Оповещение = Новый ОписаниеОповещения("ОтправитьЗапросыВыпискиПослеАутентификацииНаСервереЧерезТокенСбербанк", ЭтотОбъект);
	ОбменСБанкамиСлужебныйКлиент.УстановитьСоединениеИАутентифицироватьсяНаСервереЧерезТокенСбербанк(Оповещение, НастройкаОбмена);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапускЗаданияФормированияЗапросовВыпискиСбербанк(
	Знач НастройкаОбмена,
	Знач ДатаНачала,
	Знач ДатаОкончания,
	Знач МассивБанковскихСчетовСсылка,
	Знач УникальныйИдентификатор)

	МассивБанковскихСчетов = ПолучитьИзВременногоХранилища(МассивБанковскихСчетовСсылка);

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Формирование запросов выписки в Сбербанк.'");

	ПараметрыОтправки = Новый Структура;
	ТекущаяСессия = ОбменСБанкамиСлужебный.ПараметрыУстановленнойСессииСбербанк(НастройкаОбмена);
	ПараметрыОтправки.Вставить("ТекущаяСессия", ТекущаяСессия);
	ПараметрыОтправки.Вставить("НастройкаОбмена", НастройкаОбмена);
	ПараметрыОтправки.Вставить("ДатаНачала", ДатаНачала);
	ПараметрыОтправки.Вставить("ДатаОкончания", ДатаОкончания);
	ПараметрыОтправки.Вставить("МассивБанковскихСчетов", МассивБанковскихСчетов);

	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ОбменСБанкамиСлужебный.СформироватьЗапросыВыписокСбербанк", ПараметрыОтправки, ПараметрыВыполнения);

КонецФункции

&НаКлиенте
Процедура ОтправитьДокументыСбербанк()

	Оповещение = Новый ОписаниеОповещения("ПослеОтправкиСообщенийОбменаСбербанк", ЭтотОбъект);
	ОтправитьСообщенияОбменаВСбербанк(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСообщенияОбменаВСбербанк(Оповещение)

	МассивОтправки = СписокСообщенийОбмена.ВыгрузитьЗначения();
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПослеОтправкиСообщений", Оповещение);
	ДополнительныеПараметры.Вставить("МассивСообщенийОбмена", МассивОтправки);
	ДополнительныеПараметры.Вставить("ОтправленныеСообщенияОбмена", Новый Массив);
	ОтправитьОчередноеСообщениеОбменаВСбербанк(ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьОчередноеСообщениеОбменаВСбербанк(ДополнительныеПараметры)

	Если ДополнительныеПараметры.МассивСообщенийОбмена.Количество() = 0 Тогда // Все сообщения обмена были отправлены
		Результат = Новый Структура;
		Результат.Вставить("Успех", Истина);
		Результат.Вставить("ОтправленныеСообщенияОбмена", ДополнительныеПараметры.ОтправленныеСообщенияОбмена);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеОтправкиСообщений, Результат);
		Возврат;
	КонецЕсли;

	СообщениеОбмена = ДополнительныеПараметры.МассивСообщенийОбмена.Получить(0);
	ДополнительныеПараметры.МассивСообщенийОбмена.Удалить(0);

	ФродПараметры = ОбменСБанкамиСлужебныйКлиент.ЗначениеИзКешаСбербанк("ФродПараметры");

	ПакетXML = ОбменСБанкамиСлужебныйВызовСервера.ПакетXMLСбербанка(СообщениеОбмена, НастройкаОбмена, ФродПараметры);

	ДополнительныеПараметры.Вставить("СообщениеОбмена", СообщениеОбмена);

	Если ПакетXML = Неопределено Тогда
		ПослеОтправкиСообщенияОбменаВСбербанк(Неопределено, ДополнительныеПараметры)
	Иначе
		Оповещение = Новый ОписаниеОповещения("ПослеОтправкиСообщенияОбменаВСбербанк", ЭтотОбъект, ДополнительныеПараметры);
		ОбменСБанкамиСлужебныйКлиент.ВыполнитьОтправкуДанныхЧерезТокенСбербанк(Оповещение, ПакетXML, НастройкаОбмена);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеОтправкиСообщенияОбменаВСбербанк(Тикет,
		ДополнительныеПараметры) Экспорт

	Если НЕ ЗначениеЗаполнено(Тикет) Тогда
		Результат = Новый Структура;
		Результат.Вставить("Успех", Ложь);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеОтправкиСообщений, Результат);
		Возврат;
	КонецЕсли;

	ОбменСБанкамиСлужебныйВызовСервера.ПослеОтправкиСообщенияОбменаВСбербанк(НастройкаОбмена, ДополнительныеПараметры.СообщениеОбмена, Тикет);

	ДополнительныеПараметры.ОтправленныеСообщенияОбмена.Добавить(ДополнительныеПараметры.СообщениеОбмена);

	ОсталосьОтправить = ДополнительныеПараметры.МассивСообщенийОбмена.Количество();
	ВсегоДокументов = СписокСообщенийОбмена.Количество();

	Прогресс = "" + (ВсегоДокументов - ОсталосьОтправить) + "/"
		+ ВсегоДокументов;

	ВывестиПрогрессТекущейОперацииСбербанк(Прогресс);

	ОтправитьОчередноеСообщениеОбменаВСбербанк(ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура ПослеОтправкиСообщенийОбменаСбербанк(Результат, ДополнительныеПараметры) Экспорт

	Если Не Результат.Успех Тогда
		ПриОшибкеТекущейОперацииСбербанк();
		ЗакрытьФормуНаКлиенте(, Результат);
		Возврат;
	КонецЕсли;

	ПерейтиНаСледующийШагСбербанк();

	КоличествоОтправленных = Результат.ОтправленныеСообщенияОбмена.Количество();
	Если КоличествоОтправленных Тогда
		ОтправленныеДокументы = ОбменСБанкамиСлужебныйВызовСервера.ВладельцыСообщенийОбмена(
			Результат.ОтправленныеСообщенияОбмена);
		Оповестить("ОтправленоDirectBank", ОтправленныеДокументы);
	КонецЕсли;

	Оповещение = Новый ОписаниеОповещения("ЗакрытьФормуПослеПолученияСтатусовЗапросовСбербанк", ЭтотОбъект);

	ПолучитьДокументыПоТикетамСбербанк(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФормуПослеПолученияСтатусовЗапросовСбербанк(Результат,
		ДополнительныеПараметры) Экспорт

	ЗакрытьФормуНаКлиенте(НЕ Результат, КоличествоОтправленных);

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьОчереднойДокументИзСбербанка(ДополнительныеПараметры)

	Если ДополнительныеПараметры.МассивТикетов.Количество() = 0 Тогда // Все документы получены
		Оповестить("ОбновитьСостояниеОбменСБанками");
		Оповещение = Новый ОписаниеОповещения("ЗавершитьПолучениеДокументовПослеПроверкиПодписейСбербанк", ЭтотОбъект, ДополнительныеПараметры);
		ОбменСБанкамиСлужебныйКлиент.ОпределитьСтатусыПодписейСбербанк(Оповещение, НастройкаОбмена, ДополнительныеПараметры.МассивСообщенийОбменаДляПроверки);
		Возврат;
	КонецЕсли;

	Тикет = ДополнительныеПараметры.МассивТикетов.Получить(0);
	ДополнительныеПараметры.МассивТикетов.Удалить(0);

	ОсталосьПолучить = ДополнительныеПараметры.МассивТикетов.Количество();
	Прогресс = "" + (ДополнительныеПараметры.ВсегоТикетов - ОсталосьПолучить)
		+ "/" + ДополнительныеПараметры.ВсегоТикетов;

	ВывестиПрогрессТекущейОперацииСбербанк(Прогресс);

	ДополнительныеПараметры.Вставить("Тикет", Тикет);

	Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатПолученияДокументаСбербанк", ЭтотОбъект, ДополнительныеПараметры);

	ОбменСБанкамиСлужебныйКлиент.ПолучитьСтатусЗапросаСбербанк(Оповещение, ИдентификаторОрганизации, Тикет, НастройкаОбмена);

КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПолучениеДокументовПослеПроверкиПодписейСбербанк(Результат,
		ДополнительныеПараметры) Экспорт

	Успех = Не ДополнительныеПараметры.Свойство("ЕстьОшибка");
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияДокументов, Успех);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатПолученияДокументаСбербанк(Результат,
		ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		ДополнительныеПараметры.Вставить("ЕстьОшибка", Истина);
		ОбменСБанкамиСлужебныйВызовСервера.УдалитьИдентификаторЗапроса(НастройкаОбмена, ДополнительныеПараметры.Тикет);
		ДополнительныеПараметры.МассивТикетов.Очистить();
		ПолучитьОчереднойДокументИзСбербанка(ДополнительныеПараметры);
		Возврат;
	КонецЕсли;

	Если Результат = "<!--NOT PROCESSED YET-->"
			ИЛИ Результат = "<!--NOT_PROCESSED_YET-->" Тогда // Запрос еще не был обработан
		ПолучитьОчереднойДокументИзСбербанка(ДополнительныеПараметры);
		Возврат
	ИначеЕсли Результат = "<!--REQUEST NOT FOUND-->"
			ИЛИ Результат = "<!--REQUEST_NOT_FOUND-->"
			ИЛИ Результат = "<!--REQUESTID DUBLIC-->"
			ИЛИ Результат = "<!--REQUESTID_DUBLIC-->" Тогда // Идентификатор не найден в базе банка или не может быть обработан
		ОбменСБанкамиСлужебныйВызовСервера.УдалитьИдентификаторЗапроса(НастройкаОбмена, ДополнительныеПараметры.Тикет);
		ПолучитьОчереднойДокументИзСбербанка(ДополнительныеПараметры);
		Возврат
	КонецЕсли;

	ЕстьОшибка = Ложь;
	МассивНовыхСообщенийОбмена = Новый Массив;
	Попытка
		КоличествоТомов = 0;
		ОбменСБанкамиСлужебныйВызовСервера.ОбработатьОтветСбербанка(Результат, НастройкаОбмена, МассивНовыхСообщенийОбмена, ДополнительныеПараметры.Тикет, КоличествоТомов);
		Если КоличествоТомов > 0 Тогда
			Оповещение = Новый ОписаниеОповещения("СохранитьБольшойПакетПослеПолученияТомовЧерезТокенСбербанк", ЭтотОбъект, ДополнительныеПараметры);
			ПолучитьМноготомныйДокументЧерезТокенСбербанк(Оповещение, НастройкаОбмена, ИдентификаторОрганизации, ДополнительныеПараметры.Тикет, КоличествоТомов);
			Возврат;
		КонецЕсли;
	Исключение
		ЕстьОшибка = Истина;
		ВидОперации = НСтр("ru = 'Чтение ответа Сбербанка.'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ОбработкаНеисправностейБЭДВызовСервера.ОбработатьОшибку(ВидОперации, ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСБанками,
			ТекстОшибки, ТекстСообщения, НастройкаОбмена);
	КонецПопытки;

	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДополнительныеПараметры.МассивСообщенийОбменаДляПроверки, МассивНовыхСообщенийОбмена);

	Если ЕстьОшибка Тогда
		ДополнительныеПараметры.Вставить("ЕстьОшибка", Истина);
		ДополнительныеПараметры.МассивТикетов.Очистить();
	КонецЕсли;

	ПолучитьОчереднойДокументИзСбербанка(ДополнительныеПараметры);

КонецПроцедуры

// Получает большой пакет из банка.
//
// Параметры:
//  Оповещение - ОписаниеОповещения - Содержит описание процедуры, которая будет вызвана после завершения вызова метода со следующими параметрами: 
//          * Результат - Структура - результат выполнения процедуры, содержит поля:
//                ** Успех - Булево - если Истина, то операция выполнена успешно, иначе Ложь.
//                ** МассивТомов - Массив - полученные данные в виде томов
//                        *** Строка - данные единичного тома.
//          * ДополнительныеПараметры - значение, которое было указано при создании объекта ОписаниеОповещения.
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком.
//  ИдентификаторОрганизации - Строка - идентификатор организации в системе банка.
//  ИдентификаторЗапроса - Строка - идентификатор запроса, по которому нужно получить большой пакет.
//  КоличествоТомов - Число - количество томов, которые нужно получить из банка.
//
&НаКлиенте
Процедура ПолучитьМноготомныйДокументЧерезТокенСбербанк(Оповещение,
		НастройкаОбмена, ИдентификаторОрганизации, ИдентификаторЗапроса,
		КоличествоТомов)

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПослеПолученияБольшогоДокумента", Оповещение);
	ДополнительныеПараметры.Вставить("НастройкаОбмена", НастройкаОбмена);
	ДополнительныеПараметры.Вставить("ИдентификаторОрганизации", ИдентификаторОрганизации);
	ДополнительныеПараметры.Вставить("ИдентификаторЗапроса", ИдентификаторЗапроса);
	ДополнительныеПараметры.Вставить("КоличествоТомов", КоличествоТомов);
	ДополнительныеПараметры.Вставить("ТекущийТом", 0);
	ДополнительныеПараметры.Вставить("МассивТомов", Новый Массив);

	ОповещениеПослеПодключенияВК1С = Новый ОписаниеОповещения("ПолучитьТомаПослеПодключенияВК1ССбербанк", ЭтотОбъект, ДополнительныеПараметры);

	ОбменСБанкамиСлужебныйКлиент.ПодключитьВнешнююКомпоненту1СДляСбербанка(ОповещениеПослеПодключенияВК1С);

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьТомаПослеПодключенияВК1ССбербанк(ПодключаемыйМодуль,
		ДополнительныеПараметры) Экспорт

	Если ПодключаемыйМодуль = Неопределено Тогда
		Результат = Новый Структура;
		Результат.Вставить("Успех", Ложь);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияБольшогоДокумента, Результат);
		Возврат;
	КонецЕсли;

	ДополнительныеПараметры.Вставить("ПодключаемыйМодуль1С", ПодключаемыйМодуль);

	ПолучитьОчереднойТомДокументаЧерезТокенСбербанк(ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьОчереднойТомДокументаЧерезТокенСбербанк(ДополнительныеПараметры)

	Если ДополнительныеПараметры.ТекущийТом >= ДополнительныеПараметры.КоличествоТомов Тогда
		Результат = Новый Структура;
		Результат.Вставить("Успех", Истина);
		Результат.Вставить("МассивТомов", ДополнительныеПараметры.МассивТомов);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияБольшогоДокумента, Результат);
		Возврат;
	КонецЕсли;

	ДополнительныеПараметры.ТекущийТом = ДополнительныеПараметры.ТекущийТом + 1;

	Оповещение = Новый ОписаниеОповещения("ПослеПолученияТомаДокументаЧерезТокенСбербанк", ЭтотОбъект, ДополнительныеПараметры, "ОбработатьОшибкуПолученияТомаДокументаЧерезТокенСбербанк", ЭтотОбъект);

	ИдентификаторСессии = ОбменСБанкамиСлужебныйКлиент.ЗначениеИзКешаСбербанк("ИдентификаторСессии");
	Ответ = "";

	ДополнительныеПараметры.ПодключаемыйМодуль1С.НачатьВызовПолучитьЧастьЗапросаSRP(Оповещение, ДополнительныеПараметры.ИдентификаторЗапроса, Строка(ДополнительныеПараметры.ТекущийТом), ДополнительныеПараметры.ИдентификаторОрганизации, ИдентификаторСессии, Ответ);

КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияТомаДокументаЧерезТокенСбербанк(РезультатВызова,
		ПараметрыВызова, ДополнительныеПараметры) Экспорт

	Если РезультатВызова <> 0 Тогда
		ВидОперации = НСтр("ru = 'Получение части большого документа из банка'");
		ШаблонСообщения = НСтр("ru = 'При получении большого документа с сервера банка произошла ошибка.'");
		ОбменСБанкамиСлужебныйКлиент.ВывестиИнформацияОбОшибкеСбербанк(РезультатВызова, ВидОперации, ШаблонСообщения, ДополнительныеПараметры.НастройкаОбмена);
		Результат = Новый Структура;
		Результат.Вставить("Успех", Ложь);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияБольшогоДокумента, Результат);
		Возврат;
	КонецЕсли;

	ДополнительныеПараметры.МассивТомов.Добавить(ПараметрыВызова[4]);

	ПолучитьОчереднойТомДокументаЧерезТокенСбербанк(ДополнительныеПараметры)
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОшибкуПолученияТомаДокументаЧерезТокенСбербанк(ИнформацияОбОшибке,
		СтандартнаяОбработка, ДополнительныеПараметры) Экспорт

	СтандартнаяОбработка = Ложь;

	ПодробнаяИнформация = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	КраткаяИнформация = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);

	ВидОперации = НСтр("ru = 'Получение части большого документа'");
	ШаблонОшибки = НСтр("ru = 'При получении части документа с сервера банка произошла ошибка.
		|%1'");

	ТекстСообщения = СтрШаблон(ШаблонОшибки, КраткаяИнформация);
	
	ОбработкаНеисправностейБЭДВызовСервера.ОбработатьОшибку(ВидОперации, ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСБанками,
		ПодробнаяИнформация, ТекстСообщения, ДополнительныеПараметры.НастройкаОбмена);

	Результат = Новый Структура;
	Результат.Вставить("Успех", Ложь);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияБольшогоДокумента, Результат);

КонецПроцедуры

&НаКлиенте
Процедура СохранитьБольшойПакетПослеПолученияТомовЧерезТокенСбербанк(Результат,
		ДополнительныеПараметры) Экспорт

	Если Результат.Успех Тогда
		МассивНовыхСообщенийОбмена = Новый Массив;
		ОбменСБанкамиСлужебныйВызовСервера.СохранитьБольшойПакетСбербанк(НастройкаОбмена, ДополнительныеПараметры.Тикет, Результат.МассивТомов, МассивНовыхСообщенийОбмена);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДополнительныеПараметры.МассивСообщенийОбменаДляПроверки, МассивНовыхСообщенийОбмена);
		ПолучитьОчереднойДокументИзСбербанка(ДополнительныеПараметры);
	Иначе
		ДополнительныеПараметры.Вставить("ЕстьОшибка", Истина);
		ДополнительныеПараметры.МассивТикетов.Очистить();
		ПолучитьОчереднойДокументИзСбербанка(ДополнительныеПараметры);
	КонецЕсли;

КонецПроцедуры

// Получает массив идентификаторов для дальнейшего формирования запроса в банк.
//
// Параметры:
//  НастройкаОбмена   СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком;
//  ИдентификаторОрганизации - Строка - уникальный идентификатор организации в системе банка.
//
&НаСервереБезКонтекста
Функция ТикетыЗапросовСтатусовСбербанк(Знач НастройкаОбмена)

	МассивИдентификаторов = Новый Массив;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТикетыОбменСБанками.Идентификатор КАК Идентификатор
		|ИЗ
		|	РегистрСведений.ТикетыОбменСБанками КАК ТикетыОбменСБанками
		|ГДЕ
		|	ТикетыОбменСБанками.НастройкаОбмена = &НастройкаОбмена";

	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	Результат = Запрос.Выполнить().Выгрузить();

	МассивИдентификаторов = Результат.ВыгрузитьКолонку("Идентификатор");

	Возврат МассивИдентификаторов;

КонецФункции

&НаКлиенте
Процедура ПодписатьДокументыСбербанк()

	Оповещение = Новый ОписаниеОповещения("ЗакрытьФормуПослеПодписания", ЭтотОбъект);
	СообщенияОбмена = СписокСообщенийОбмена.ВыгрузитьЗначения();
	ПодписатьСообщенияОбменаРекурсивноСбербанк(Оповещение, СообщенияОбмена, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФормуПослеПодписания(Результат,
		ДополнительныеПараметры) Экспорт

	ЗакрытьФормуНаКлиенте(, Результат);

КонецПроцедуры

&НаКлиенте
Процедура ПодписатьСообщенияОбменаРекурсивноСбербанк(Оповещение, СообщенияОбмена, ПроверятьНаличиеПодписей = Ложь)

	Если НЕ ФормаОткрыта Тогда
		Возврат;
	КонецЕсли;

	КоличествоОсталось = СообщенияОбмена.Количество();
	Прогресс = "" + КоличествоПодписанных + "/" + (КоличествоПодписанных
		+ КоличествоОсталось);
	ВывестиПрогрессТекущейОперацииСбербанк(Прогресс);

	Если КоличествоОсталось = 0 Тогда // все ЭД подписаны
		Результат = Новый Структура;
		Результат.Вставить("Успех", Истина);
		Результат.Вставить("Количество", КоличествоПодписанных);
		ВыполнитьОбработкуОповещения(Оповещение, Результат);
		Возврат;
	КонецЕсли;

	СообщениеОбмена = СообщенияОбмена[0];
	СообщенияОбмена.Удалить(0);

	Сертификат = ОбменСБанкамиСлужебныйКлиент.ЗначениеИзКешаСбербанк("СертификатПодписи");

	Если ПроверятьНаличиеПодписей Тогда
		УжеПодписано = ОбменСБанкамиСлужебныйВызовСервера.СообщениеСодержитПодписьПоСертификату(СообщениеОбмена, Сертификат);
		Если УжеПодписано Тогда
			ПодписатьСообщенияОбменаРекурсивноСбербанк(Оповещение, СообщенияОбмена, ПроверятьНаличиеПодписей);
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПослеПодписания", Оповещение);
	ДополнительныеПараметры.Вставить("ПроверятьНаличиеПодписей", ПроверятьНаличиеПодписей);
	ДополнительныеПараметры.Вставить("СообщенияОбмена", СообщенияОбмена);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПодписанияЭДСбербанк", ЭтотОбъект, ДополнительныеПараметры);

	СтрокаПодписиBase64 = ОбменСБанкамиСлужебныйВызовСервера.ПодписанныеДанныеBase64(СообщениеОбмена);

	РеквизитыСертификата = Новый Структура("ДанныеСертификата");
	ОбменСБанкамиСлужебныйВызовСервера.ПолучитьЗначенияРеквизитовСертификата(Сертификат, РеквизитыСертификата);

	ОбменСБанкамиСлужебныйКлиент.ПодписатьДанныеСбербанк(ОписаниеОповещения, ИмяВнешнегоМодуля, СтрокаПодписиBase64, ИдентификаторСертификатаСбербанк, СообщениеОбмена, РеквизитыСертификата.ДанныеСертификата);

КонецПроцедуры

&НаКлиенте
Процедура ПослеПодписанияЭДСбербанк(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда // возврат из формы сенсорного токена
		ВозвращаемоеЗначение = Новый Структура("Успех, Количество", Ложь, КоличествоПодписанных);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПодписания, ВозвращаемоеЗначение);
		Возврат;
	КонецЕсли;

	Если Результат.Успех Тогда

		ДвоичныеДанныеЭП = Base64Значение(Результат.ЭП);

		ДанныеПроверкиПодписи = Новый Структура;
		ДанныеПроверкиПодписи.Вставить("ДатаПроверкиПодписи", ОбщегоНазначенияКлиент.ДатаСеанса());
		ДанныеПроверкиПодписи.Вставить("ПодписьВерна", Истина);

		Сертификат = ОбменСБанкамиСлужебныйКлиент.ЗначениеИзКешаСбербанк("СертификатПодписи");

		ОбменСБанкамиСлужебныйВызовСервера.ДобавитьПодпись(
			СообщениеОбмена, ДвоичныеДанныеЭП, Сертификат, ДанныеПроверкиПодписи);

		КоличествоПодписанных = КоличествоПодписанных + 1;
		ПодписатьСообщенияОбменаРекурсивноСбербанк(ДополнительныеПараметры.ОповещениеПослеПодписания,
			ДополнительныеПараметры.СообщенияОбмена, ДополнительныеПараметры.ПроверятьНаличиеПодписей);
	Иначе
		Если Не ПустаяСтрока(Результат.ТекстОшибки) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ТекстОшибки);
			ПриОшибкеТекущейОперацииСбербанк();
			ЗакрытьФормуНаКлиенте(Истина);
			Возврат;
		КонецЕсли;
		ВозвращаемоеЗначение = Новый Структура("Успех, Количество", Ложь, КоличествоПодписанных);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПодписания, ВозвращаемоеЗначение);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДокументыПоТикетамПослеОтправкиСбербанк(Результат,
		ДополнительныеПараметры) Экспорт

	Если НЕ Результат.Успех Тогда
		ЗакрытьФормуНаКлиенте();
		Возврат;
	КонецЕсли;

	Оповещение = Новый ОписаниеОповещения("ОтправитьЗапросНовыхДокументовСбербанк", ЭтотОбъект);

	ПолучитьДокументыПоТикетамСбербанк(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗапросыВыпискиПослеАутентификацииНаСервереЧерезТокенСбербанк(Результат,
		ДополнительныеПараметры) Экспорт

	Если Не Результат Тогда
		ПриОшибкеТекущейОперацииСбербанк();
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	КонецЕсли;

	МассивТекстовЗапросов = ДанныеЗапросовВыписокСбербанк(НастройкаОбмена, СписокСообщенийОбмена.ВыгрузитьЗначения());

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("МассивТекстовЗапросов", МассивТекстовЗапросов);

	МассивТикетовСбербанк = Новый Массив;

	ОтправитьЗапросыВыписокРекурсивноСбербанк(ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура ПослеОтправкиЗапросовВыписокПоЛогинуСбербанк(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда // задание было отменено
		ЗакрытьФормуНаКлиенте();
		Возврат;
	КонецЕсли;

	Если Результат.Статус = "Ошибка" Тогда
		ПриОшибкеТекущейОперацииСбербанк();
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.КраткоеПредставлениеОшибки, НастройкаОбмена);
		ЗакрытьФормуНаКлиенте(Истина);
	Иначе // выполнено
		РезультатОтправки = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		УдалитьИзВременногоХранилища(Результат.АдресРезультата);
		Если РезультатОтправки.ТребуетсяАутентификация Тогда // неверный идентификатор сессии.
			ВидОперации = НСтр("ru = 'Отправка запроса выписки в Сбербанк.'");
			ТекстСообщения = НСтр("ru = 'Неверный идентификатор сессии.
				|Обратитесь в техническую поддержку.'");
			
			ОбработкаНеисправностейБЭДВызовСервера.ОбработатьОшибку(ВидОперации, ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСБанками,
				ТекстСообщения, ТекстСообщения, НастройкаОбмена);
		
			ПриОшибкеТекущейОперацииСбербанк();
			ЗакрытьФормуНаКлиенте(Истина)
		Иначе
			КоличествоЗапросов = СписокСообщенийОбмена.Количество();
			ВывестиПрогрессТекущейОперацииСбербанк("" + КоличествоЗапросов + "/"
				+ КоличествоЗапросов);
			ПерейтиНаСледующийШагСбербанк();
			МассивТикетовСсылкаСбербанк = ПоместитьВоВременноеХранилище(
				РезультатОтправки.МассивТикетов, УникальныйИдентификатор);
			ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПолучитьВнешниеИдентификаторыЗапросовВыпискиПоЛогинуСбербанк",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолучитьВнешниеИдентификаторыЗапросовВыпискиПоЛогинуСбербанк()

	Если Не ФормаОткрыта Тогда
		Возврат;
	КонецЕсли;

	Результат = ЗапускЗаданияПолученияСтатусовЗапросовПоЛогинуСбербанк(НастройкаОбмена, МассивТикетовСсылкаСбербанк, СписокСообщенийОбмена.Количество(), УникальныйИдентификатор);

	Если Результат.Статус = "Выполняется" Тогда
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
		ПараметрыОжидания.ОповещениеОПрогрессеВыполнения = Новый ОписаниеОповещения("ВывестиПрогрессТекущейДлительнойОперацииСбербанк", ЭтотОбъект);
		Оповещение = Новый ОписаниеОповещения("ПослеПолученияСтатусовЗапросовСбербанк", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, Оповещение, ПараметрыОжидания);
	Иначе
		ПослеПолученияСтатусовЗапросовСбербанк(Результат, Неопределено);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолучитьКонечныеСтатусыЗапросовВыпискиПоЛогинуСбербанк()
	
	Если Не ФормаОткрыта Тогда
		Возврат;
	КонецЕсли;
	
	РезультатОтправки = ЗапускЗаданияЗапросаСтатусаЗапросовСбербанк(
		НастройкаОбмена, СписокСообщенийОбмена.ВыгрузитьЗначения(), УникальныйИдентификатор);
	
	ИдентификаторЗадания = РезультатОтправки.ИдентификаторЗадания;
	ПараметрыОбработчикаОжиданияНов = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОбработчикаОжиданияНов.ВыводитьОкноОжидания = Ложь;
	ПараметрыОбработчикаОжиданияНов.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОбработчикаОжиданияНов.ВыводитьСообщения = Ложь;
	ПараметрыОбработчикаОжиданияНов.ОповещениеОПрогрессеВыполнения = Новый ОписаниеОповещения(
		"ВывестиПрогрессТекущейДлительнойОперацииСбербанк", ЭтотОбъект);
	Оповещение = Новый ОписаниеОповещения("ПослеОтправкиЗапросовСтатусовЗапросовВыписокСбербанк", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатОтправки, Оповещение, ПараметрыОбработчикаОжиданияНов);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапускЗаданияПолученияСтатусовЗапросовПоЛогинуСбербанк(
	Знач НастройкаОбмена,
	Знач МассивТикетовСсылка, Знач КоличествоЗапросов,
	Знач УникальныйИдентификатор)

	МассивТикетов = ПолучитьИзВременногоХранилища(МассивТикетовСсылка);

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение статусов запросов выписки Сбербанк.'");

	ТекущаяСессия = ОбменСБанкамиСлужебный.ПараметрыУстановленнойСессииСбербанк(НастройкаОбмена);
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("ТекущаяСессия", ТекущаяСессия);
	ПараметрыОтправки.Вставить("НастройкаОбмена", НастройкаОбмена);
	ПараметрыОтправки.Вставить("МассивТикетов", МассивТикетов);
	ПараметрыОтправки.Вставить("СоздаватьОперацииВыписки", Ложь);
	ПараметрыОтправки.Вставить("КоличествоЗапросов", КоличествоЗапросов);

	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ОбменСБанкамиСлужебный.ПолучитьСтатусыЗапросовПоЛогинуСбербанк", ПараметрыОтправки, ПараметрыВыполнения);

КонецФункции

&НаКлиенте
Процедура ПолучитьСертификатыССервераСбербанка()

	Оповещение = Новый ОписаниеОповещения(
		"ПолучитьСертификатыСервераПослеАутентификацииНаСервереЧерезТокенСбербанк", ЭтотОбъект);
	ОбменСБанкамиСлужебныйКлиент.УстановитьСоединениеИАутентифицироватьсяНаСервереЧерезТокенСбербанк(
		Оповещение, НастройкаОбмена);
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСертификатыСервераПослеАутентификацииНаСервереЧерезТокенСбербанк(
	Результат,
	ДополнительныеПараметры) Экспорт

	Если Не Результат Тогда
		ПриОшибкеТекущейОперацииСбербанк();
		ЗакрытьФормуНаКлиенте(Истина);
		Возврат;
	КонецЕсли;

	ЗапросСертификатов = ОбменСБанкамиСлужебныйВызовСервера.ТекстЗапросаСертификатовСбербанк();

	Если Не ЗначениеЗаполнено(ЗапросСертификатов) Тогда
		ЗапускалосьОбновлениеСертификатовБанка = Истина;
		ЗапуститьОперациюСбербанк(Неопределено);
		Возврат;
	КонецЕсли;

	ОповещениеПослеОтправкиЗапросаСертификатовСбербанк = Новый ОписаниеОповещения(
		"ПослеОтправкиЗапросаСертификатовСбербанк", ЭтотОбъект);
	ОбменСБанкамиСлужебныйКлиент.ВыполнитьОтправкуДанныхЧерезТокенСбербанк(
		ОповещениеПослеОтправкиЗапросаСертификатовСбербанк, ЗапросСертификатов);

КонецПроцедуры

&НаКлиенте
Процедура ПослеОтправкиЗапросаСертификатовСбербанк(Ответ,
		ДополнительныеПараметры) Экспорт

	Если Не ЗначениеЗаполнено(Ответ) Тогда
		ЗапускалосьОбновлениеСертификатовБанка = Истина;
		ЗапуститьОперациюСбербанк(Неопределено);
		Возврат;
	КонецЕсли;

	ТикетПолученияСертификатовСбербанк = Ответ;

	ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);

	ПодключитьОбработчикОжидания("Подключаемый_ПолучитьСертификатыССервераСбербанк", 1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолучитьСертификатыССервераСбербанк()

	Оповещение = Новый ОписаниеОповещения("ПослеПолученияОтветаНаЗапросСертификатовСбербанк", ЭтотОбъект);

	ОбменСБанкамиСлужебныйКлиент.ПолучитьСтатусЗапросаСбербанк(
		Оповещение, ИдентификаторОрганизации, ТикетПолученияСертификатовСбербанк);

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПослеПолученияОтветаНаЗапросСертификатовСбербанк(Ответ, ДополнительныеПараметры) Экспорт

	ОбменСБанкамиСлужебныйКлиент.ЗакешироватьПараметрСбербанка("ПолученКриптопрофильВСессии", Истина);

	Если Ответ = Неопределено Тогда
		ЗапускалосьОбновлениеСертификатовБанка = Истина;
		ЗапуститьОперациюСбербанк(Неопределено);
		Возврат;
	КонецЕсли;

	Если Ответ = "<!--NOT PROCESSED YET-->"
			ИЛИ Ответ = "<!--NOT_PROCESSED_YET-->" Тогда
		ОжиданиеОперацийБЭДКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания(
			"Подключаемый_ПолучитьСертификатыССервераСбербанк", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	ИначеЕсли Ответ = "<!--REQUEST NOT FOUND-->"
			ИЛИ Ответ = "<!--REQUEST_NOT_FOUND-->" Тогда
		ТекстОшибки = НСтр("ru = 'На сервере банка произошла ошибка: запрос не найден.
			|Повторите операцию позже.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		ЗапускалосьОбновлениеСертификатовБанка = Истина;
		ЗапуститьОперациюСбербанк(Неопределено);
	ИначеЕсли Ответ = "<!--REQUESTID DUBLIC-->"
			ИЛИ Ответ = "<!--REQUESTID_DUBLIC-->" Тогда
		ТекстОшибки = НСтр("ru = 'На сервере банка произошла ошибка: запрос с таким идентификатором уже существует.
			|Повторите операцию позже.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		ЗапускалосьОбновлениеСертификатовБанка = Истина;
		ЗапуститьОперациюСбербанк(Неопределено);
	Иначе
		ОбменСБанкамиСлужебныйВызовСервера.СохранитьСертификатыСбербанка(НастройкаОбмена, Ответ);
		ЗапускалосьОбновлениеСертификатовБанка = Истина;
		ЗапуститьОперациюСбербанк(Неопределено);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьПрогрессОперацийПолученияВыпискиСбербанк()

	Элементы.Операции.ТекущаяСтраница = Элементы.ПолучениеВыпискиСбербанк;
	Элементы.Операции.Видимость = Истина;
	Элементы.ДекорацияДлительнаяОперация.Видимость = Ложь;
	Элементы.ГруппаПодписаниеДокументовСбербанк.Видимость = ИспользуетсяКриптография;

	МассивШаговСбербанк = Новый Массив;
	МассивШаговСбербанк.Добавить("ФормированиеЗапросовВыписокСбербанк");
	Если ИспользуетсяКриптография Тогда
		МассивШаговСбербанк.Добавить("ПодписаниеЗапросовВыписокСбербанк");
	Иначе
		Элементы.ГруппаПодписаниеЗапросовВыписокСбербанк.Видимость = Ложь;
	КонецЕсли;
	МассивШаговСбербанк.Добавить("ОтправкаЗапросовВыписокСбербанк");
	МассивШаговСбербанк.Добавить("ПолучениеСтатусовЗапросовВыписокСбербанк");
	МассивШаговСбербанк.Добавить("ВыполнениеЗапросовВыписокСбербанк");
	МассивШаговСбербанк.Добавить("ОжиданиеВыписокСбербанк");

	ВсегоДней = (НачалоДня(ДатаОкончания) - НачалоДня(ДатаНачала)) / 60 / 60 / 24
		+ 1;

	Для каждого ЭлементКоллекции Из МассивШаговСбербанк Цикл
		Элементы["Прогресс" + ЭлементКоллекции].Заголовок = "0/" + ВсегоДней;
	КонецЦикла;

	ТекущийШагСбербанк = "ФормированиеЗапросовВыписокСбербанк";
	Элементы.КартинкаФормированиеЗапросовВыписокСбербанк.Картинка = БиблиотекаКартинок.ДлительнаяОперация16;

КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьПрогрессОтправкиДокументовСбербанк()

	Элементы.Операции.ТекущаяСтраница = Элементы.ОтправкаДокументовСбербанк;
	Элементы.Операции.Видимость = Истина;
	Элементы.ДекорацияДлительнаяОперация.Видимость = Ложь;

	МассивШаговСбербанк = Новый Массив;
	МассивШаговСбербанк.Добавить("ОтправкаДокументовСбербанк");
	МассивШаговСбербанк.Добавить("ПолучениеСтатусовСбербанк");

	Для каждого ЭлементКоллекции Из МассивШаговСбербанк Цикл
		Элементы["Прогресс" + ЭлементКоллекции].Заголовок = "0/"
			+ СписокСообщенийОбмена.Количество();
	КонецЦикла;

	ТекущийШагСбербанк = "ОтправкаДокументовСбербанк";
	Элементы.КартинкаОтправкаДокументовСбербанк.Картинка = БиблиотекаКартинок.ДлительнаяОперация16;

КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьПрогрессПодписанияСбербанк()

	Элементы.Операции.ТекущаяСтраница = Элементы.ПодписаниеДокументовСбербанк;
	Элементы.Операции.Видимость = Истина;
	Элементы.ДекорацияДлительнаяОперация.Видимость = Ложь;

	МассивШаговСбербанк = Новый Массив;
	МассивШаговСбербанк.Добавить("ПодписаниеДокументовСбербанк");

	Для каждого ЭлементКоллекции Из МассивШаговСбербанк Цикл
		Элементы["Прогресс" + ЭлементКоллекции].Заголовок = "0/"
			+ СписокСообщенийОбмена.Количество();
	КонецЦикла;

	ТекущийШагСбербанк = "ПодписаниеДокументовСбербанк";
	Элементы.КартинкаПодписаниеДокументовСбербанк.Картинка = БиблиотекаКартинок.ДлительнаяОперация16;

КонецПроцедуры

&НаКлиенте
Процедура НачатьПробноеПолучениеВыпискиИзБанка()

	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("НастройкаОбмена", НастройкаОбмена);

	РезультатЗадания = ЗапускЗаданияПробнойОтправкиЗапросаВыпискиВБанк(ПараметрыЗапроса, УникальныйИдентификатор);

	ИдентификаторЗадания = РезультатЗадания.ИдентификаторЗадания;
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатПробнойОтправкиЗапросаВыпискиВБанк", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатЗадания, Оповещение, ПараметрыОжидания);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатПробнойОтправкиЗапросаВыпискиВБанк(РезультатЗадания,
		ДополнительныеПараметры = Неопределено) Экспорт

	Если РезультатЗадания = Неопределено Тогда // задание было отменено
		ЗакрытьФормуНаКлиенте();
		Возврат;
	КонецЕсли;

	Если РезультатЗадания.Статус = "Ошибка" Тогда
		ВидОперации = НСтр("ru = 'Проверка получения выписки из банка.'");
		
		ОбработкаНеисправностейБЭДВызовСервера.ОбработатьОшибку(ВидОперации, ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСБанками,
			РезультатЗадания.ПодробноеПредставлениеОшибки, РезультатЗадания.КраткоеПредставлениеОшибки);
		
		ЗакрытьФормуНаКлиенте(Истина);
	Иначе // выполнено
		Результат = ПолучитьИзВременногоХранилища(РезультатЗадания.АдресРезультата);
		СписокСообщенийОбмена.ЗагрузитьЗначения(Результат.МассивСообщенийОбмена);
		ИдентификаторСессии = Результат.ИдентификаторСессии;
		ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОжиданияПолученияВыписки);
		ПодключитьОбработчикОжидания("Подключаемый_ПолучитьВыпискуАсинхронныйОбмен", ПараметрыОжиданияПолученияВыписки.ТекущийИнтервал, Истина);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапускЗаданияПробнойОтправкиЗапросаВыпискиВБанк(Знач ПараметрыЗапроса, Знач УникальныйИдентификатор)

	Если ПравоДоступа("Редактирование", Метаданные.Справочники.НастройкиОбменСБанками) Тогда
		УстановитьПривилегированныйРежим(Истина);
		Пароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ПараметрыЗапроса.НастройкаОбмена);
		УстановитьПривилегированныйРежим(Ложь);
	Иначе
		ВызватьИсключение НСтр("ru = 'Недостаточно прав для выполнения операции.'");
	КонецЕсли;
	ПараметрыЗапроса.Вставить("Пароль", Пароль);
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Тестовая отправка запросов выписок в банк.'");
	Результат = ДлительныеОперации.ВыполнитьВФоне(
		"ОбменСБанкамиСлужебный.ОтправитьТестовыйЗапросВыпискиАсинхронныйОбмен", ПараметрыЗапроса, ПараметрыВыполнения);
	Возврат Результат
КонецФункции

#КонецОбласти

#Область Инициализация

КоличествоОтправленных = 0;
КоличествоПолученных = 0;
КоличествоПодписанных = 0;
КоличествоПодтвержденных = 0;

МассивСообщенийПользователю = Новый Массив;

#КонецОбласти
