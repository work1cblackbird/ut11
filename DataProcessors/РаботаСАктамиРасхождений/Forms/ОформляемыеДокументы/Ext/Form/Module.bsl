
#Область ОписаниеПеременных

&НаСервере
Перем ВыведенныеДокументы;

&НаСервере
Перем ОформляемыеДокументыПоАкту; // см. НовыйОформляемыеДокументыПоАкту

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ИспользоватьЗаявкиНаВозврат = ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаВозвратТоваровОтКлиентов");
	ВыводитьЛегенду = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Обработка.РаботаСАктамиРасхождений", "ВыводитьЛегенду", Ложь);
	
	АктОРасхождениях = Параметры.АктОРасхождениях;
	РасхожденияСерверЛокализация.РаботаСАктамиОРасхождениях_ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	СформироватьОтчет();
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Активизировать();
	УправлениеДоступностью();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	
	СформироватьОтчет();
	Активизировать();
	УправлениеДоступностью();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ВозвратТоваровОтКлиента"
		Или ИмяСобытия = "Запись_ВозвратТоваровПоставщику"
		Или ИмяСобытия = "Запись_ПередачаТоваровХранителю"
		Или ИмяСобытия = "Запись_ПоступлениеТоваровОтХранителя"
		Или ИмяСобытия = "Запись_ПриемкаТоваровНаХранение"
		Или ИмяСобытия = "Запись_ОтгрузкаТоваровСХранения"
		Или ИмяСобытия = "Запись_ЗаказКлиента"
		Или ИмяСобытия = "Запись_ЗаказНаПеремещение"
		Или ИмяСобытия = "Запись_КорректировкаЗадолженности"
		Или ИмяСобытия = "Запись_ЗаявкаНаВозвратТоваровОтКлиента"
		Или ИмяСобытия = "Запись_КорректировкаПриобретения"
		Или ИмяСобытия = "Запись_КорректировкаРеализации"
		Или ИмяСобытия = "Запись_ОприходованиеИзлишковТоваров"
		Или ИмяСобытия = "Запись_ПеремещениеТоваров"
		Или ИмяСобытия = "Запись_ПриобретениеТоваровУслуг"
		Или ИмяСобытия = "Запись_РеализацияТоваровУслуг"
		Или ИмяСобытия = "Запись_СписаниеЗадолженности"
		Или ИмяСобытия = "Запись_СписаниеНедостачТоваров"
		Или ИмяСобытия = "Запись_СписаниеРасхождений"
		Или ИмяСобытия = "Запись_Претензия"
		Или ИмяСобытия = "Запись_КорректировкаЗадолженности" 
		Или ИмяСобытия = "Запись_ПоступлениеТоваров" Тогда
		
		СформироватьОтчет();
		
	ИначеЕсли ИмяСобытия = "ЭлектронныйДокумент_Подтверждение"
		Или ИмяСобытия = "ЭлектронныйДокумент_Отклонение" Тогда
			
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("Основание", Параметр);
			
			НайденныеСтроки = Действия.НайтиСтроки(ПараметрыПоиска);
			Если НайденныеСтроки.Количество() > 0 Тогда
				СформироватьОтчет();
			КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ВыводитьЛегендуПриИзменении(Элемент)
	
	ВыводитьЛегендуПриИзмененииНаСервере();
	
КонецПроцедуры



// Описание
// 
// Параметры:
// 	Элемент - ПолеФормы - табличный документы, в котором происходит выбор.
// 	Область - ОбластьЯчеекТабличногоДокумента - Содержит:
//  * Расшифровка - Структура - содержит:
//    ** ИмяКоманды - Строка - имя выполняемой команды.
//    ** Данные     - ДокументОбъект - создаваемый или изменяемый документ.
//    ** Описание - Структура - содержит:
//       *** АктОРасхождениях - ДокументСсылка.АктОРасхожденияхПослеОтгрузки - 
//                            - ДокументСсылка.АктОРасхожденияхПослеПеремещения - 
//                            - ДокументСсылка.АктОРасхожденияхПослеПриемки - документ акт о расхождениях
//       *** ОснованиеАкта    - ДокументСсылка - основание акта.
// 	СтандартнаяОбработка - Булево - признак выполнения стандартной платформенной обработки.
//
&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Область.Расшифровка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Область.Расшифровка) <> Тип("Структура") Тогда
		ПоказатьЗначение(, Область.Расшифровка);
	Иначе
		
		РасхожденияКлиент.ОбработкаКомандыОтчетаОформлениеДокументов(
			ЭтаФорма,
			Область.Расшифровка.ИмяКоманды,
			Область.Расшифровка.Описание.АктОРасхождениях,
			Область.Расшифровка.Описание.ОснованиеАкта,
			Область.Расшифровка.Данные);
		
		Если Область.Расшифровка.ИмяКоманды = "Изменить" Тогда
			Обновить(Неопределено);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	СформироватьОтчет();
	УправлениеДоступностью();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеОтчета

&НаСервере
Процедура СформироватьОтчет()
	
	ЕстьОшибки = Ложь;
	
	ТабличныйДокумент.Очистить();
	Макет = Обработки.РаботаСАктамиРасхождений.ПолучитьМакет("ОформляемыеДокументы");
	
	ВыборкаШапка = ТекстЗапросаШапкаАктаОРасхождениях();
	
	Если Не ЗначениеЗаполнено(ВыборкаШапка) Тогда
		ВывестиОшибку(НСтр("ru = 'Данные документа недоступны'"), Макет);
		Возврат;
	КонецЕсли;
	
	Если ВыборкаШапка.ЕстьОшибкиПроведение Тогда
		ВывестиОшибку(НСтр("ru = 'Документ не проведен. Оформление документов по результатам приемки невозможно.'"), Макет);
		Возврат;
	КонецЕсли;
	
	Если ВыборкаШапка.ЕстьОшибкиСтатус Тогда
		ВывестиОшибку(НСтр("ru = 'Для оформления документов по результатам расхождений необходимо перевести документ в статус ""Отрабатывается"" или ""Отработано"".'"), Макет);
		Возврат;
	КонецЕсли;
	
	ВыведенныеДокументы = Новый ТаблицаЗначений;
	ВыведенныеДокументы.Колонки.Добавить("Имя");
	ВыведенныеДокументы.Колонки.Добавить("Ссылка");
	ВыведенныеДокументы.Колонки.Добавить("ДополнительныйПараметр");
	
	СпособОтраженияРасхождений   = ВыборкаШапка.СпособОтраженияРасхождений;
	ХозяйственнаяОперацияАкта    = ВыборкаШапка.ХозяйственнаяОперация;
	ТипОснованияАктаОРасхождении = ВыборкаШапка.ТипОснованияАктаОРасхождении;
	
	ПраваДоступаНаТаблицы        = Новый Структура;
	СоответствиеНаборовДанных    = Новый Соответствие;
	
	Если Не ЗначениеЗаполнено(СпособОтраженияРасхождений) Тогда 
		
		ВывестиОшибку(НСтр("ru = 'В акте приемки не задан способ отражения расхождений'"), Макет);
		Возврат;
		
	КонецЕсли;
	
	Если ТипЗнч(АктОРасхождениях) = Тип("ДокументСсылка.АктОРасхожденияхПослеОтгрузки") Тогда
		
		Если РасхожденияКлиентСервер.ТипОснованияРеализацияТоваровУслуг(ТипОснованияАктаОРасхождении) Тогда
			
			ТекстЗапроса = ТекстЗапросаАктОРасхожденияхПослеРеализации();
			
		ИначеЕсли РасхожденияКлиентСервер.ТипОснованияВозвратПоставщику(ТипОснованияАктаОРасхождении) Тогда
			
			ТекстЗапроса = ТекстЗапросаАктОРасхожденияхПослеВозвратаПоставщику();
			
		ИначеЕсли РасхожденияКлиентСервер.ТипОснованияПередачаТоваровХранителю(ТипОснованияАктаОРасхождении)
			ИЛИ РасхожденияКлиентСервер.ТипОснованияПередачаНаКомиссию(ТипОснованияАктаОРасхождении) Тогда
			
			ТекстЗапроса = ТекстЗапросаАктОРасхожденияхПослеПередачиТоваровХранителю();
			
		Иначе
			
			ТекстЗапроса = ТекстЗапросаАктОРасхожденияхПослеОтгрузкиТоваровСХранения();
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(АктОРасхождениях) = Тип("ДокументСсылка.АктОРасхожденияхПослеПриемки") Тогда
		
		ПраваДоступаНаТаблицы.Вставить("ЧтениеОприходованиеИзлишковТоваров", ПравоДоступа("Чтение", Метаданные.Документы.ОприходованиеИзлишковТоваров));
		ПраваДоступаНаТаблицы.Вставить("ДобавлениеСписаниеЗадолженности", ПравоДоступа("Добавление", Метаданные.Документы.КорректировкаЗадолженности));
		ПраваДоступаНаТаблицы.Вставить("ЧтениеСписаниеНедостачТоваров", ПравоДоступа("Чтение", Метаданные.Документы.СписаниеНедостачТоваров));
		
		Если ТипОснованияАктаОРасхождении = Перечисления.ТипыОснованияАктаОРасхождении.ПриобретениеТоваровУслуг Тогда
			
			ПраваДоступаНаТаблицы.Вставить("ЧтениеЗаказПоставщику", ПравоДоступа("Чтение", Метаданные.Документы.ЗаказПоставщику));
			ПраваДоступаНаТаблицы.Вставить("ЧтениеСписаниеЗадолженности", ПравоДоступа("Чтение", Метаданные.Документы.КорректировкаЗадолженности));
			ПраваДоступаНаТаблицы.Вставить("ЧтениеПриобретениеТоваровУслуг", ПравоДоступа("Чтение", Метаданные.Документы.ПриобретениеТоваровУслуг));
			ПраваДоступаНаТаблицы.Вставить("ЧтениеКорректировкаПриобретения", ПравоДоступа("Чтение", Метаданные.Документы.КорректировкаПриобретения));
			ПраваДоступаНаТаблицы.Вставить("ЧтениеВозвратТоваровПоставщику", ПравоДоступа("Чтение", Метаданные.Документы.ВозвратТоваровПоставщику));
			ПраваДоступаНаТаблицы.Вставить("ЧтениеСписаниеРасхожденийПоступлениеПриобретение", ПравоДоступа("Чтение", Метаданные.Документы.СписаниеРасхожденийПоступлениеПриобретение));
			ПраваДоступаНаТаблицы.Вставить("ЧтениеПретензий", ПравоДоступа("Чтение", Метаданные.Справочники.Претензии));
			ПраваДоступаНаТаблицы.Вставить("ЧтениеКорректировкаЗадолженности", ПравоДоступа("Чтение", Метаданные.Документы.КорректировкаЗадолженности));
			
			Если ЗакупкиСервер.ЭтоХозяйственнаяОперацияРаздельнойЗакупки(ХозяйственнаяОперацияАкта) Тогда
				ПраваДоступаНаТаблицы.Вставить("ЧтениеПоступленияТоваровНаСклад", ПравоДоступа("Чтение", Метаданные.Документы.ПоступлениеТоваровНаСклад));
			Иначе
				ПраваДоступаНаТаблицы.Вставить("ЧтениеПоступленияТоваровНаСклад", Ложь);
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапросаАктОРасхожденияхПослеПоступленияТоваров(ПраваДоступаНаТаблицы, СоответствиеНаборовДанных);
			
		ИначеЕсли ТипОснованияАктаОРасхождении = Перечисления.ТипыОснованияАктаОРасхождении.ПриемкаТоваровНаХранение
			Тогда
			
			ЧтениеЗаказПоставщику = ПравоДоступа("Чтение", Метаданные.Документы.ЗаказПоставщику);
			
			ПраваДоступаНаТаблицы.Вставить("ЧтениеЗаказПоставщику", ЧтениеЗаказПоставщику);
			ПраваДоступаНаТаблицы.Вставить("ЧтениеОтгрузкаТоваровСХранения",
							ПравоДоступа("Чтение", Метаданные.Документы.ОтгрузкаТоваровСХранения));
			ПраваДоступаНаТаблицы.Вставить("ЧтениеПриемкаТоваровНаХранение",
							ПравоДоступа("Чтение", Метаданные.Документы.ПриемкаТоваровНаХранение));
			ПраваДоступаНаТаблицы.Вставить("ЧтениеСписаниеЗадолженности", Ложь);
			
			ТекстЗапроса = ТекстЗапросаАктОРасхожденияхПослеПриемкиТоваровНаХранение(ПраваДоступаНаТаблицы,
												СоответствиеНаборовДанных);
			
		ИначеЕсли РасхожденияКлиентСервер.ТипОснованияПоступлениеТоваровОтХранителя(ТипОснованияАктаОРасхождении)
			Или ТипОснованияАктаОРасхождении = Перечисления.ТипыОснованияАктаОРасхождении.ВозвратОтКомиссионера Тогда
			
			ПраваДоступаНаТаблицы.Вставить("ЧтениеПередач",
							ПравоДоступа("Чтение", Метаданные.Документы.ПередачаТоваровХранителю));
			ПраваДоступаНаТаблицы.Вставить("ЧтениеПоступлениеТоваровОтХранителя",
							ПравоДоступа("Чтение", Метаданные.Документы.ПоступлениеТоваровОтХранителя));
			ПраваДоступаНаТаблицы.Вставить("ЧтениеСписаниеЗадолженности", Ложь);
			
			ТекстЗапроса = ТекстЗапросаАктОРасхожденияхПослеВозвратаОтХранителя(ПраваДоступаНаТаблицы, СоответствиеНаборовДанных);
			
		Иначе
			
			ПраваДоступаНаТаблицы.Вставить("ЧтениеРеализаций", ПравоДоступа("Чтение", Метаданные.Документы.РеализацияТоваровУслуг));
			ПраваДоступаНаТаблицы.Вставить("ЧтениеСписаниеЗадолженности", ПравоДоступа("Чтение", Метаданные.Документы.КорректировкаЗадолженности));
			ПраваДоступаНаТаблицы.Вставить("ЧтениеВозвратТоваровОтКлиента", ПравоДоступа("Чтение", Метаданные.Документы.ВозвратТоваровОтКлиента));
			
			ТекстЗапроса = ТекстЗапросаАктОРасхожденияхПослеВозвратаОтКлиента(ПраваДоступаНаТаблицы, СоответствиеНаборовДанных);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(АктОРасхождениях) = Тип("ДокументСсылка.АктОРасхожденияхПослеПеремещения") Тогда
		
		ПраваДоступаНаТаблицы.Вставить("ЧтениеОприходованиеИзлишковТоваров", ПравоДоступа("Чтение", Метаданные.Документы.ОприходованиеИзлишковТоваров));
		ПраваДоступаНаТаблицы.Вставить("ЧтениеСписаниеНедостачТоваров", ПравоДоступа("Чтение", Метаданные.Документы.СписаниеНедостачТоваров));
		
		ТекстЗапроса = ТекстЗапросаАктОРасхожденияхПослеПеремещения(ПраваДоступаНаТаблицы, СоответствиеНаборовДанных);
		
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("АктОРасхождениях",            АктОРасхождениях);
	Запрос.УстановитьПараметр("СпособОтраженияРасхождений",  СпособОтраженияРасхождений);
	Если ТипЗнч(АктОРасхождениях) = Тип("ДокументСсылка.АктОРасхожденияхПослеПриемки") 
		И ТипОснованияАктаОРасхождении = Перечисления.ТипыОснованияАктаОРасхождении.ПриобретениеТоваровУслуг Тогда
		ЗапросИзлишки = Новый Запрос;
		ЗапросИзлишки.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТоварыКОформлениюИзлишковНедостач.Регистратор
		|ИЗ
		|	РегистрНакопления.ТоварыКОформлениюИзлишковНедостач КАК ТоварыКОформлениюИзлишковНедостач
		|ГДЕ
		|	ТоварыКОформлениюИзлишковНедостач.Регистратор = &Ссылка";
		ЗапросИзлишки.УстановитьПараметр("Ссылка", АктОРасхождениях);
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = ЗапросИзлишки.Выполнить();
		ЭтоАктОРасхождениях2_5_12 = Не РезультатЗапроса.Пустой();
		УстановитьПривилегированныйРежим(Ложь);
	Иначе
		ЭтоАктОРасхождениях2_5_12 = Ложь;
	КонецЕсли;
	Запрос.УстановитьПараметр("ЭтоАктОРасхождениях2_5_12", ЭтоАктОРасхождениях2_5_12);
	Запрос.УстановитьПараметр("ИспользоватьЗаявкиНаВозврат", ИспользоватьЗаявкиНаВозврат);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если РезультатЗапроса[1].Пустой() Тогда
		ВывестиОшибку(НСтр("ru = 'По результатам приемки не выявлено расхождений, требующих оформления документов'"), Макет);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТаблицуДействий(АктОРасхождениях, РезультатЗапроса);
	ЗаполнитьТаблицыСозданныхДокументов(РезультатЗапроса, ТипОснованияАктаОРасхождении, СоответствиеНаборовДанных);
	
	МассивОформленныхДокументов = Новый Массив;
	ОФормляемыеДокументыПоАкту  = НовыйОформляемыеДокументыПоАкту();
	
	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ПустаяСтрока"));
	Область = Макет.ПолучитьОбласть("АктОРасхождениях");
	Область.Параметры.АктОРасхождениях = АктОРасхождениях;
	ТабличныйДокумент.Вывести(Область);
	
	// тут либо реализация либо возврат товаров поставщику
	ВыводитьГруппуОснование = (Действия.Количество() > 1 
	                           И ХозяйственнаяОперацияАкта <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
	
	Для Каждого СтрокаДействия Из Действия Цикл
		
		Если ВыводитьГруппуОснование Тогда
			
			ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ПустаяСтрока"));
			
			Область = Макет.ПолучитьОбласть("Основание");
			Область.Параметры.Основание = СтрокаДействия.Основание;
			ТабличныйДокумент.Вывести(Область);
			
			ТабличныйДокумент.НачатьГруппуСтрок("Основание");
			
		КонецЕсли;
		
		ХозяйственнаяОперация = Неопределено;
		
		Если ТипЗнч(АктОРасхождениях) = Тип("ДокументСсылка.АктОРасхожденияхПослеОтгрузки") Тогда
			
			ВывестиСтрокиДействийПоАктуПослеОтгрузки(СтрокаДействия, Макет, ТипОснованияАктаОРасхождении);
			
		ИначеЕсли ТипЗнч(АктОРасхождениях) = Тип("ДокументСсылка.АктОРасхожденияхПослеПриемки") Тогда
			
			ВывестиСтрокиДействийПоАктуПослеПриемки(СтрокаДействия, Макет, ТипОснованияАктаОРасхождении, ПраваДоступаНаТаблицы);
			
			
		ИначеЕсли ТипЗнч(АктОРасхождениях) = Тип("ДокументСсылка.АктОРасхожденияхПослеПеремещения") Тогда
			
			ВывестиСтрокиДействийПоАктуПослеПеремещения(СтрокаДействия, Макет, ТипОснованияАктаОРасхождении, ПраваДоступаНаТаблицы);
			
		КонецЕсли;
		
		Если ВыводитьГруппуОснование Тогда
			
			ТабличныйДокумент.ЗакончитьГруппуСтрок();
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Вывод оформляемых документов вне групп документов оснований (основанием является акт о расхождении).
	ОФормляемыеДокументыПоАкту.Сортировать("ВидДокумента");
	
	Для Каждого ОформляемыйВид Из ОФормляемыеДокументыПоАкту Цикл
		ВывестиДокументКОформлению(ОформляемыйВид.ВидДокумента, 1, Макет, ОформляемыйВид.ОформляемыеДокументы,
			ХозяйственнаяОперация, Истина,
			ОформляемыйВид.Описание);
	КонецЦикла;
	
	Если ТабличныйДокумент.ВысотаТаблицы <= 2 Тогда
		ТекстОшибки = НСтр("ru = 'Вам недоступно для оформления ни одного документа.'");
		Если Не Пользователи.ЭтоПолноправныйПользователь() Тогда
			ТекстОшибки = ТекстОшибки + " " + НСтр("ru = 'Возможно нет необходимых прав.'");
		КонецЕсли;
		ОбластьОшибка = Макет.ПолучитьОбласть("СтрокаОшибка");
		ОбластьОшибка.Параметры.ТекстОшибки = ТекстОшибки;
		ТабличныйДокумент.Вывести(ОбластьОшибка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуДействий(АктОРасхождениях, РезультатЗапроса);
	
	Действия.Очистить();
	
	РезультатЗапросаОснования = РезультатЗапроса[1]; // РезультатЗапроса - 
	ВыборкаОснования = РезультатЗапросаОснования.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОснования.Следующий() Цикл
		
		НоваяСтрока = Действия.Добавить();
		НоваяСтрока.Основание               = ВыборкаОснования.Основание;
		НоваяСтрока.ПоЗаказам               = ВыборкаОснования.ПоЗаказам;
		НоваяСтрока.Заказ                   = ВыборкаОснования.Заказ;
		
		РасхожденияСерверЛокализация.ДополнитьСтрокуТаблицыДействий(НоваяСтрока, ВыборкаОснования);
		ВыборкаДействия = ВыборкаОснования.Выбрать();
		Пока ВыборкаДействия.Следующий() Цикл

			НоваяСтрока.ВариантыДействий.Добавить(ВыборкаДействия.Действие);
			Если ТипЗнч(АктОРасхождениях) = Тип("ДокументСсылка.АктОРасхожденияхПослеПриемки") 
				И ТипЗнч(ВыборкаДействия.Основание) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
				НоваяСтрока.ЭтоАктОРасхождениях2_5_12 = ВыборкаДействия.ЭтоАктОРасхождениях2_5_12;
			Иначе 
				НоваяСтрока.ЭтоАктОРасхождениях2_5_12 = Ложь;
			КонецЕсли;
			
			Если ВыборкаДействия.Действие = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОтнестиНедостачуНаПрочиеРасходы
				И ВыборкаДействия.ПоВинеСтороннейКомпании Тогда
				НоваяСтрока.ПоВинеСтороннейКомпании = Истина;
			КонецЕсли;
			
			Если ВыборкаДействия.Действие = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ВозвратПерепоставленного
				Или ВыборкаДействия.Действие = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПокупкаПерепоставленного
				Или ВыборкаДействия.Действие = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОтнестиПерепоставленноеНаПрочиеДоходы
				Или ВыборкаДействия.Действие = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленноеИВернуть
				Или ВыборкаДействия.Действие = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленное Тогда
				
				НоваяСтрока.ЕстьОтражениеИзлишков = Истина;
				
			КонецЕсли;
			
			Если ВыборкаДействия.Действие = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ДопоставкаНеТребуется
				Или ВыборкаДействия.Действие = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ТребуетсяДопоставка
				Или ВыборкаДействия.Действие = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьНедостачу
				Или ВыборкаДействия.Действие = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьНедостачуИОжидатьДопоставку
				Или ВыборкаДействия.Действие = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОтнестиНедостачуНаПрочиеРасходы Тогда
				
				НоваяСтрока.ЕстьОтражениеНедостач = Истина;
				
			КонецЕсли;
			
			Если ВыборкаДействия.Действие = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОтнестиНедостачуНаПрочиеРасходы
				Или ВыборкаДействия.Действие = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОтнестиПерепоставленноеНаПрочиеДоходы
				Или ВыборкаДействия.Действие = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленноеИВернуть
				Или ВыборкаДействия.Действие = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОжидатьДопоставкуБезОформления
				Или ВыборкаДействия.Действие = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьНедостачуИОжидатьДопоставку Тогда
				
				НоваяСтрокаВариантыДействийСклады = НоваяСтрока.ДействияСклады.Добавить();
				НоваяСтрокаВариантыДействийСклады.ВариантДействия = ВыборкаДействия.Действие;
				НоваяСтрокаВариантыДействийСклады.Склад           = ВыборкаДействия.Склад;
				НоваяСтрокаВариантыДействийСклады.Заказ           = ВыборкаДействия.Заказ;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицыСозданныхДокументов(РезультатЗапроса, ТипОснованияАктаОРасхождении, СоответствиеНаборовДанных)
	
	Если ТипЗнч(АктОРасхождениях) = Тип("ДокументСсылка.АктОРасхожденияхПослеОтгрузки") Тогда
		
		Если РасхожденияКлиентСервер.ТипОснованияРеализацияТоваровУслуг(ТипОснованияАктаОРасхождении) Тогда
			РеализацииКорректировки.Загрузить(РезультатЗапроса[2].Выгрузить());
			РеализацииВозвраты.Загрузить(РезультатЗапроса[3].Выгрузить());
			РеализацииЗаказы.Загрузить(РезультатЗапроса[4].Выгрузить());
			Допоставки.Загрузить(РезультатЗапроса[5].Выгрузить());
		ИначеЕсли РасхожденияКлиентСервер.ТипОснованияВозвратПоставщику(ТипОснованияАктаОРасхождении) Тогда
			ДопоступленияПоВозвратамПоставщику.Загрузить(РезультатЗапроса[2].Выгрузить());
			ВозвратыПоВозвратамПоставщику.Загрузить(РезультатЗапроса[3].Выгрузить());
		ИначеЕсли РасхожденияКлиентСервер.ТипОснованияПередачаТоваровХранителю(ТипОснованияАктаОРасхождении) Тогда
			ПередачиВозвраты.Загрузить(РезультатЗапроса[2].Выгрузить());
			ПередачиЗаказы.Загрузить(РезультатЗапроса[3].Выгрузить());
			ДопоставкиПоПередачеХранителю.Загрузить(РезультатЗапроса[4].Выгрузить());
		ИначеЕсли РасхожденияКлиентСервер.ТипОснованияПередачаНаКомиссию(ТипОснованияАктаОРасхождении) Тогда
			ПередачиВозвраты.Загрузить(РезультатЗапроса[2].Выгрузить());
			ПередачиЗаказы.Загрузить(РезультатЗапроса[3].Выгрузить());
			ДопоставкиПоПередачеХранителю.Загрузить(РезультатЗапроса[4].Выгрузить());
		Иначе
			ДопоступленияПоОтгрузкамТоваровСХранения.Загрузить(РезультатЗапроса[2].Выгрузить());
			ВозвратыПоОтгрузкамТоваровСХранения.Загрузить(РезультатЗапроса[3].Выгрузить());
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(АктОРасхождениях) = Тип("ДокументСсылка.АктОРасхожденияхПослеПриемки") Тогда
		
		Для Каждого ЭлементСоответствия Из СоответствиеНаборовДанных Цикл
			ЭтотОбъект[ЭлементСоответствия.Ключ].Загрузить(РезультатЗапроса[ЭлементСоответствия.Значение].Выгрузить())
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(АктОРасхождениях) = Тип("ДокументСсылка.АктОРасхожденияхПослеПеремещения") Тогда
		
		ПеремещенияПоПеремещениям.Загрузить(РезультатЗапроса[2].Выгрузить());
		ПеремещенияПоПеремещениямНаВозврат.Загрузить(РезультатЗапроса[3].Выгрузить());
		ПеремещенияТоваровЗаказыНаПеремещения.Загрузить(РезультатЗапроса[4].Выгрузить());
		
		Для Каждого ЭлементСоответствия Из СоответствиеНаборовДанных Цикл
			ЭтотОбъект[ЭлементСоответствия.Ключ].Загрузить(РезультатЗапроса[ЭлементСоответствия.Значение].Выгрузить())
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ТекстыЗапросов

&НаСервере
Функция ТекстЗапросаШапкаАктаОРасхождениях()
	
	Запрос = Новый Запрос;
	Если ТипЗнч(АктОРасхождениях) = Тип("ДокументСсылка.АктОРасхожденияхПослеОтгрузки") Тогда
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	АктОРасхожденияхПослеОтгрузки.Ссылка,
		|	АктОРасхожденияхПослеОтгрузки.Статус,
		|	АктОРасхожденияхПослеОтгрузки.СпособОтраженияРасхождений,
		|	АктОРасхожденияхПослеОтгрузки.ТипОснованияАктаОРасхождении,
		|	ВЫБОР
		|		КОГДА АктОРасхожденияхПослеОтгрузки.Проведен
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьОшибкиПроведение,
		|	ВЫБОР
		|		КОГДА АктОРасхожденияхПослеОтгрузки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыАктаОРасхождениях.КВыполнению)
		|			ИЛИ АктОРасхожденияхПослеОтгрузки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыАктаОРасхождениях.Отработано)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьОшибкиСтатус,
		|	АктОРасхожденияхПослеОтгрузки.ХозяйственнаяОперация
		|ИЗ
		|	Документ.АктОРасхожденияхПослеОтгрузки КАК АктОРасхожденияхПослеОтгрузки
		|ГДЕ
		|	АктОРасхожденияхПослеОтгрузки.Ссылка = &АктОРасхождениях";
		
	ИначеЕсли ТипЗнч(АктОРасхождениях) = Тип("ДокументСсылка.АктОРасхожденияхПослеПеремещения") Тогда
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	АктОРасхожденияхПослеПеремещения.Ссылка,
		|	АктОРасхожденияхПослеПеремещения.Статус,
		|	ЗНАЧЕНИЕ(Перечисление.СпособыОтраженияРасхожденийАктПриемкиКлиента.ИсправлениеПервичныхДокументов) КАК СпособОтраженияРасхождений,
		|	Неопределено КАК ТипОснованияАктаОРасхождении,
		|	ВЫБОР
		|		КОГДА АктОРасхожденияхПослеПеремещения.Проведен
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьОшибкиПроведение,
		|	ВЫБОР
		|		КОГДА АктОРасхожденияхПослеПеремещения.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыАктаОРасхождениях.КВыполнению)
		|			ИЛИ АктОРасхожденияхПослеПеремещения.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыАктаОРасхождениях.Отработано)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьОшибкиСтатус,
		|	АктОРасхожденияхПослеПеремещения.ХозяйственнаяОперация
		|ИЗ
		|	Документ.АктОРасхожденияхПослеПеремещения КАК АктОРасхожденияхПослеПеремещения
		|ГДЕ
		|	АктОРасхожденияхПослеПеремещения.Ссылка = &АктОРасхождениях";
		
	ИначеЕсли  ТипЗнч(АктОРасхождениях) = Тип("ДокументСсылка.АктОРасхожденияхПослеПриемки") Тогда
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	АктОРасхожденияхПослеПриемки.Ссылка,
		|	АктОРасхожденияхПослеПриемки.Статус,
		|	АктОРасхожденияхПослеПриемки.СпособОтраженияРасхождений,
		|	АктОРасхожденияхПослеПриемки.ТипОснованияАктаОРасхождении,
		|	ВЫБОР
		|		КОГДА АктОРасхожденияхПослеПриемки.Проведен
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьОшибкиПроведение,
		|	ВЫБОР
		|		КОГДА АктОРасхожденияхПослеПриемки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыАктаОРасхождениях.КВыполнению)
		|			ИЛИ АктОРасхожденияхПослеПриемки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыАктаОРасхождениях.Отработано)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьОшибкиСтатус,
		|	АктОРасхожденияхПослеПриемки.ХозяйственнаяОперация
		|ИЗ
		|	Документ.АктОРасхожденияхПослеПриемки КАК АктОРасхожденияхПослеПриемки
		|ГДЕ
		|	АктОРасхожденияхПослеПриемки.Ссылка = &АктОРасхождениях";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("АктОРасхождениях", АктОРасхождениях);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыборкаШапка = РезультатЗапроса.Выбрать();
	ВыборкаШапка.Следующий();
	
	Возврат ВыборкаШапка;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаАктОРасхожденияхПослеРеализации()
	
	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	АктОРасхожденияхПослеОтгрузкиТовары.Действие,
	|	АктОРасхожденияхПослеОтгрузкиТовары.Реализация КАК Реализация
	|ПОМЕСТИТЬ Действия
	|ИЗ
	|	Документ.АктОРасхожденияхПослеОтгрузки.Товары КАК АктОРасхожденияхПослеОтгрузкиТовары
	|ГДЕ
	|	АктОРасхожденияхПослеОтгрузкиТовары.Ссылка = &АктОРасхождениях
	|	И АктОРасхожденияхПослеОтгрузкиТовары.КоличествоПоДокументу - АктОРасхожденияхПослеОтгрузкиТовары.Количество <> 0
	|	И АктОРасхожденияхПослеОтгрузкиТовары.Действие <> ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПерепоставленноеДарится)
	|	И АктОРасхожденияхПослеОтгрузкиТовары.Действие <> ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.НедостачаНеПризнана)
	|	И АктОРасхожденияхПослеОтгрузкиТовары.Действие <> ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////1
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Действия.Действие                       КАК Действие,
	|	Действия.Реализация                     КАК Основание,
	|	ЛОЖЬ                                    КАК ПоВинеСтороннейКомпании,
	|	Действия.Реализация.РеализацияПоЗаказам КАК ПоЗаказам,
	|	НЕОПРЕДЕЛЕНО                            КАК Заказ
	|ИЗ
	|	Действия КАК Действия
	|ИТОГИ ПО
	|	Реализация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////2
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КорректировкаРеализации.ДокументОснование КАК Реализация,
	|	КорректировкаРеализации.Ссылка            КАК Корректировка,
	|	КорректировкаРеализации.ВидКорректировки  КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|ГДЕ
	|	КорректировкаРеализации.АктОРасхожденияхПослеОтгрузкиОснование = &АктОРасхождениях
	|	И КорректировкаРеализации.Проведен
	|	И ВЫБОР
	|			КОГДА &СпособОтраженияРасхождений = ЗНАЧЕНИЕ(Перечисление.СпособыОтраженияРасхожденийАктПриемкиКлиента.ОформлениеКорректировкиКакИсправлениеПервичныхДокументов)
	|				ТОГДА КорректировкаРеализации.ВидКорректировки = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ИсправлениеОшибок)
	|			КОГДА &СпособОтраженияРасхождений = ЗНАЧЕНИЕ(Перечисление.СпособыОтраженияРасхожденийАктПриемкиКлиента.ОформлениеКорректировкиПоСогласованию)
	|				ТОГДА КорректировкаРеализации.ВидКорректировки = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон)
	|			ИНАЧЕ КорректировкаРеализации.ВидКорректировки В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияПерепоставленногоТовара),
	|			                                                       ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратНедопоставленногоТовара))
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////3
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЗаявкаНаВозвратТоваровОтКлиентаВозвращаемыеТовары.ДокументРеализации КАК Реализация,
	|	ЗаявкаНаВозвратТоваровОтКлиентаВозвращаемыеТовары.Ссылка КАК ДокументВозврата
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК ЗаявкаНаВозвратТоваровОтКлиентаВозвращаемыеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Действия КАК Действия
	|		ПО ЗаявкаНаВозвратТоваровОтКлиентаВозвращаемыеТовары.ДокументРеализации = Действия.Реализация
	|ГДЕ
	|	&ИспользоватьЗаявкиНаВозврат
	|	И ЗаявкаНаВозвратТоваровОтКлиентаВозвращаемыеТовары.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВозвратТоваровОтКлиентаТовары.ДокументРеализации,
	|	ВозвратТоваровОтКлиентаТовары.Ссылка
	|ИЗ
	|	Документ.ВозвратТоваровОтКлиента.Товары КАК ВозвратТоваровОтКлиентаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Действия КАК Действия
	|		ПО ВозвратТоваровОтКлиентаТовары.ДокументРеализации = Действия.Реализация
	|ГДЕ
	|	НЕ &ИспользоватьЗаявкиНаВозврат
	|	И ВозвратТоваровОтКлиентаТовары.Ссылка.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////4
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	АктОРасхожденияхПослеОтгрузкиТовары.ЗаказКлиента КАК ЗаказКлиента,
	|	АктОРасхожденияхПослеОтгрузкиТовары.Реализация
	|ИЗ
	|	Документ.АктОРасхожденияхПослеОтгрузки.Товары КАК АктОРасхожденияхПослеОтгрузкиТовары
	|ГДЕ
	|	АктОРасхожденияхПослеОтгрузкиТовары.КоличествоУпаковокПоДокументу <> АктОРасхожденияхПослеОтгрузкиТовары.КоличествоУпаковок
	|	И АктОРасхожденияхПослеОтгрузкиТовары.Действие = ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ДопоставкаНеТребуется)
	|	И АктОРасхожденияхПослеОтгрузкиТовары.Ссылка = &АктОРасхождениях
	|	И АктОРасхожденияхПослеОтгрузкиТовары.ЗаказКлиента <> НЕОПРЕДЕЛЕНО
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказКлиента УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////5
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РеализацияТоваровУслуг.Ссылка КАК ОформленнаяРеализация,
	|	РеализацияТоваровУслуг.ДопоставкаПоРеализации КАК ДопоставкаПоРеализации
	|ИЗ
	|	Действия КАК Действия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО (РеализацияТоваровУслуг.Проведен)
	|			И Действия.Реализация = РеализацияТоваровУслуг.ДопоставкаПоРеализации";
	
КонецФункции

&НаСервере
Функция ТекстЗапросаАктОРасхожденияхПослеВозвратаОтКлиента(ПраваДоступаНаТаблицы, СоответствиеНаборовДанных)

	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	АктОРасхожденияхПослеПриемкиТовары.Действие,
	|	АктОРасхожденияхПослеПриемкиТовары.ДокументОснование КАК Основание,
	|	АктОРасхожденияхПослеПриемкиТовары.Склад КАК Склад,
	|	АктОРасхожденияхПослеПриемкиТовары.ПоВинеСтороннейКомпании КАК ПоВинеСтороннейКомпании
	|ПОМЕСТИТЬ Действия
	|ИЗ
	|	Документ.АктОРасхожденияхПослеПриемки.Товары КАК АктОРасхожденияхПослеПриемкиТовары
	|ГДЕ
	|	АктОРасхожденияхПослеПриемкиТовары.Ссылка = &АктОРасхождениях
	|	И АктОРасхожденияхПослеПриемкиТовары.КоличествоПоДокументу - АктОРасхожденияхПослеПриемкиТовары.Количество <> 0
	|	И АктОРасхожденияхПослеПриемкиТовары.Действие <> ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ВернутьПерепоставленноеБезОформления)
	|	И АктОРасхожденияхПослеПриемкиТовары.Действие <> ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОжидатьДопоставкуБезОформления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////1
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Действия.Действие КАК Действие,
	|	Действия.Основание КАК Основание,
	|	Действия.ПоВинеСтороннейКомпании КАК ПоВинеСтороннейКомпании,
	|	ВЫБОР
	|		КОГДА Действия.Основание.ЗаявкаНаВозвратТоваровОтКлиента = ЗНАЧЕНИЕ(Документ.ЗаявкаНаВозвратТоваровОтКлиента.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПоЗаказам,
	|	Действия.Склад КАК Склад,
	|	Действия.Основание.ЗаявкаНаВозвратТоваровОтКлиента КАК Заказ
	|ИЗ
	|	Действия КАК Действия
	|ИТОГИ ПО
	|	Основание
	|";
	
	ТекущийНомер = 1;
	
	Если ПраваДоступаНаТаблицы.ЧтениеРеализаций Тогда
	
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	РеализацияТоваровУслуг.ДопоставкаПоРеализации КАК Основание,
		|	РеализацияТоваровУслуг.Ссылка КАК Реализация
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Действия КАК Действия
		|		ПО РеализацияТоваровУслуг.ДопоставкаПоРеализации = Действия.Основание
		|ГДЕ
		|	РеализацияТоваровУслуг.Проведен
		|";
		
		ТекущийНомер = ТекущийНомер + 1;
		СоответствиеНаборовДанных.Вставить("ВозвратыОтКлиентовРеализации", ТекущийНомер);
	
	КонецЕсли;
	
	Если ПраваДоступаНаТаблицы.ЧтениеВозвратТоваровОтКлиента Тогда
	
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Документ.Ссылка КАК Возврат,
		|	Документ.ДовозвратПоВозврату КАК Основание
		|ИЗ
		|	Действия КАК Действия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента КАК Документ
		|		ПО (Документ.Проведен)
		|			И Действия.Основание = Документ.ДовозвратПоВозврату
		|";
		
		ТекущийНомер = ТекущийНомер + 1;
		СоответствиеНаборовДанных.Вставить("ВозвратыОтКлиентовВозвраты", ТекущийНомер);
	
	КонецЕсли;
	
	Если ПраваДоступаНаТаблицы.ЧтениеСписаниеНедостачТоваров Тогда
	
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СписаниеНедостачТоваров.Ссылка КАК Списание,
		|	СписаниеНедостачТоваров.Склад КАК Склад,
		|	СписаниеНедостачТоваров.Основание КАК Основание
		|ИЗ
		|	Действия КАК Действия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеНедостачТоваров КАК СписаниеНедостачТоваров
		|		ПО (СписаниеНедостачТоваров.Проведен)
		|			И Действия.Основание = СписаниеНедостачТоваров.Основание
		|			И Действия.Склад     = СписаниеНедостачТоваров.Склад
		|";
		
		ТекущийНомер = ТекущийНомер + 1;
		СоответствиеНаборовДанных.Вставить("ОснованияСписанияНедостач", ТекущийНомер);
	
	КонецЕсли;
	
	Если ПраваДоступаНаТаблицы.ЧтениеСписаниеЗадолженности Тогда
	
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	КорректировкаЗадолженности.Ссылка КАК Списание,
		|	КорректировкаЗадолженности.Основание КАК Основание
		|ИЗ
		|	Действия КАК Действия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаЗадолженности КАК КорректировкаЗадолженности
		|		ПО (КорректировкаЗадолженности.Проведен)
		|			И Действия.Основание = КорректировкаЗадолженности.Основание
		|";
		
		ТекущийНомер = ТекущийНомер + 1;
		СоответствиеНаборовДанных.Вставить("ОснованияСписанияЗадолженностей", ТекущийНомер);
	
	КонецЕсли;
	
	Если ПраваДоступаНаТаблицы.ЧтениеОприходованиеИзлишковТоваров Тогда
		
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ОприходованиеИзлишковТоваров.Ссылка КАК Оприходование,
		|	ОприходованиеИзлишковТоваров.Склад КАК Склад,
		|	ОприходованиеИзлишковТоваров.Основание КАК Основание
		|ИЗ
		|	Действия КАК Действия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОприходованиеИзлишковТоваров КАК ОприходованиеИзлишковТоваров
		|		ПО (ОприходованиеИзлишковТоваров.Проведен)
		|			И Действия.Основание = ОприходованиеИзлишковТоваров.Основание
		|			И Действия.Склад     = ОприходованиеИзлишковТоваров.Склад
		|";
		
		ТекущийНомер = ТекущийНомер + 1;
		СоответствиеНаборовДанных.Вставить("ОснованияОприходования", ТекущийНомер);
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаАктОРасхожденияхПослеВозвратаПоставщику()

	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	АктОРасхожденияхПослеОтгрузкиТовары.Действие,
	|	АктОРасхожденияхПослеОтгрузкиТовары.Реализация КАК ВозвратТоваровПоставщику
	|ПОМЕСТИТЬ Действия
	|ИЗ
	|	Документ.АктОРасхожденияхПослеОтгрузки.Товары КАК АктОРасхожденияхПослеОтгрузкиТовары
	|ГДЕ
	|	АктОРасхожденияхПослеОтгрузкиТовары.Ссылка = &АктОРасхождениях
	|	И АктОРасхожденияхПослеОтгрузкиТовары.КоличествоПоДокументу - АктОРасхожденияхПослеОтгрузкиТовары.Количество <> 0
	|	И АктОРасхожденияхПослеОтгрузкиТовары.Действие <> ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПерепоставленноеДарится)
	|	И АктОРасхожденияхПослеОтгрузкиТовары.Действие <> ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.НедостачаНеПризнана)
	|	И АктОРасхожденияхПослеОтгрузкиТовары.Действие <> ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////1
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Действия.Действие                 КАК Действие,
	|	Действия.ВозвратТоваровПоставщику КАК Основание,
	|	ЛОЖЬ                              КАК ПоВинеСтороннейКомпании,
	|	ЛОЖЬ                              КАК ПоЗаказам,
	|	НЕОПРЕДЕЛЕНО                      КАК Заказ
	|ИЗ
	|	Действия КАК Действия
	|ИТОГИ ПО
	|	ВозвратТоваровПоставщику
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////2
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПриобретениеТоваровУслуг.ДопоступлениеПоДокументу КАК Основание,
	|	ПриобретениеТоваровУслуг.Ссылка КАК ПриобретениеТоваровУслуг
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Действия КАК Действия
	|		ПО ПриобретениеТоваровУслуг.ДопоступлениеПоДокументу = Действия.ВозвратТоваровПоставщику
	|ГДЕ
	|	ПриобретениеТоваровУслуг.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////3
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Документ.Ссылка КАК ВозвратТоваровПоставщику,
	|	Документ.ДовозвратПоВозврату КАК Основание
	|ИЗ
	|	Действия КАК Действия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику КАК Документ
	|		ПО (Документ.Проведен)
	|			И Действия.ВозвратТоваровПоставщику = Документ.ДовозвратПоВозврату";

КонецФункции

&НаСервере
Функция ТекстЗапросаАктОРасхожденияхПослеПоступленияТоваров(ПраваДоступаНаТаблицы, СоответствиеНаборовДанных)

	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	АктОРасхожденияхПослеПриемкиТовары.Действие,
	|	АктОРасхожденияхПослеПриемкиТовары.ДокументОснование КАК Основание,
	|	АктОРасхожденияхПослеПриемкиТовары.Склад КАК Склад,
	|	АктОРасхожденияхПослеПриемкиТовары.ЗаказПоставщику КАК Заказ,
	|	АктОРасхожденияхПослеПриемкиТовары.Номенклатура КАК Номенклатура,
	|	АктОРасхожденияхПослеПриемкиТовары.ПоВинеСтороннейКомпании КАК ПоВинеСтороннейКомпании,
	|	ВЫБОР
	|		КОГДА АктОРасхожденияхПослеПриемкиТовары.СуммаПоДокументу > АктОРасхожденияхПослеПриемкиТовары.Сумма
	|			ТОГДА АктОРасхожденияхПослеПриемкиТовары.СуммаПоДокументу - АктОРасхожденияхПослеПриемкиТовары.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаНедопоставки,
	|	ВЫБОР
	|		КОГДА АктОРасхожденияхПослеПриемкиТовары.СуммаПоДокументу < АктОРасхожденияхПослеПриемкиТовары.Сумма
	|			ТОГДА АктОРасхожденияхПослеПриемкиТовары.Сумма - АктОРасхожденияхПослеПриемкиТовары.СуммаПоДокументу
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаПерепоставки
	|ПОМЕСТИТЬ Действия
	|ИЗ
	|	Документ.АктОРасхожденияхПослеПриемки.Товары КАК АктОРасхожденияхПослеПриемкиТовары
	|ГДЕ
	|	АктОРасхожденияхПослеПриемкиТовары.Ссылка = &АктОРасхождениях
	|	И АктОРасхожденияхПослеПриемкиТовары.КоличествоПоДокументу - АктОРасхожденияхПослеПриемкиТовары.Количество <> 0
	|	И
	|		(
	|		(АктОРасхожденияхПослеПриемкиТовары.Действие <> ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ВернутьПерепоставленноеБезОформления)
	|			И АктОРасхожденияхПослеПриемкиТовары.Действие <> ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОжидатьДопоставкуБезОформления))
	|		
	|		ИЛИ
	|		(АктОРасхожденияхПослеПриемкиТовары.Ссылка.ХозяйственнаяОперация В
	|			(ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаПоступлениеИзТоваровВПути),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаТоварыВПути),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаНеотфактурованнаяПоставка),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаФактуровкаПоставки),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСПоступлениеИзТоваровВПути),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСТоварыВПути),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСНеотфактурованнаяПоставка),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСФактуровкаПоставки),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпортуПоступлениеИзТоваровВПути),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути)))
	|		)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////1
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Действия.Действие                       КАК Действие,
	|	Действия.Основание                      КАК Основание,
	|	Действия.ПоВинеСтороннейКомпании        КАК ПоВинеСтороннейКомпании,
	|	Действия.Основание.ПоступлениеПоЗаказам КАК ПоЗаказам,
	|	Действия.Склад КАК Склад,
	|	Действия.Заказ КАК Заказ,
	|	СУММА(Действия.СуммаНедопоставки) КАК СуммаНедопоставки,
	|	СУММА(Действия.СуммаПерепоставки) КАК СуммаПерепоставки,
	|	&ЭтоАктОРасхождениях2_5_12 КАК ЭтоАктОРасхождениях2_5_12
	|ИЗ
	|	Действия КАК Действия
	|
	|СГРУППИРОВАТЬ ПО
	|	Действия.Действие,
	|	Действия.Основание,
	|	Действия.ПоВинеСтороннейКомпании,
	|	Действия.Основание.ПоступлениеПоЗаказам,
	|	Действия.Склад,
	|	Действия.Заказ
	|
	|ИТОГИ
	|	СУММА(СуммаНедопоставки),
	|	СУММА(СуммаПерепоставки)
	|ПО
	|	Основание";
	
	ТекущийНомер = 1;
	
	Если ПраваДоступаНаТаблицы.ЧтениеКорректировкаПриобретения Тогда
	
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КорректировкаПриобретения.ДокументОснование     КАК Основание,
		|	КорректировкаПриобретения.Ссылка                КАК Корректировка,
		|	КорректировкаПриобретения.ВидКорректировки      КАК ХозяйственнаяОперация
		|ИЗ
		|	Документ.КорректировкаПриобретения КАК КорректировкаПриобретения
		|ГДЕ
		|	КорректировкаПриобретения.АктОРасхожденияхПослеПриемкиОснование = &АктОРасхождениях
		|	И КорректировкаПриобретения.Проведен
		|	И &СпособОтраженияРасхождений = ЗНАЧЕНИЕ(Перечисление.СпособыОтраженияАктовОРасхожденияПослеПоступления.ОформлениеКорректировокПоступления)
		|";
		
		ТекущийНомер = ТекущийНомер + 1;
		СоответствиеНаборовДанных.Вставить("ПоступленияКорректировки", ТекущийНомер);
	
	КонецЕсли;
	
	Если ПраваДоступаНаТаблицы.ЧтениеВозвратТоваровПоставщику Тогда
	
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();

		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВозвратТоваровПоставщикуТовары.ДокументПоступления КАК ДокументПоступления,
		|	ВозвратТоваровПоставщикуТовары.Ссылка КАК ВозвратПоставщику, 
		|	ВозвратТоваровПоставщикуТовары.Ссылка.Склад КАК Склад
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Действия КАК Действия
		|		ПО ВозвратТоваровПоставщикуТовары.ДокументПоступления = Действия.Основание
		|		И ВозвратТоваровПоставщикуТовары.Ссылка.Склад = Действия.Склад
		|ГДЕ
		|	ВозвратТоваровПоставщикуТовары.Ссылка.Проведен
		|";
		
		ТекущийНомер = ТекущийНомер + 1;
		СоответствиеНаборовДанных.Вставить("ПоступленияВозвраты", ТекущийНомер);
	
	КонецЕсли;	
	
	Если ПраваДоступаНаТаблицы.ЧтениеЗаказПоставщику Тогда
	
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();

		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	АктОРасхожденияхПослеПриемкиТовары.ЗаказПоставщику КАК ЗаказПоставщику,
		|	АктОРасхожденияхПослеПриемкиТовары.ДокументОснование КАК ДокументПоступления
		|ИЗ
		|	Документ.АктОРасхожденияхПослеПриемки.Товары КАК АктОРасхожденияхПослеПриемкиТовары
		|ГДЕ
		|	АктОРасхожденияхПослеПриемкиТовары.КоличествоУпаковокПоДокументу <> АктОРасхожденияхПослеПриемкиТовары.КоличествоУпаковок
		|	И АктОРасхожденияхПослеПриемкиТовары.Действие = ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьНедостачу)
		|	И АктОРасхожденияхПослеПриемкиТовары.Ссылка = &АктОРасхождениях
		|	И АктОРасхожденияхПослеПриемкиТовары.ЗаказПоставщику <> ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаказПоставщику УБЫВ
		|";
		
		ТекущийНомер = ТекущийНомер + 1;
		СоответствиеНаборовДанных.Вставить("ПоступленияЗаказы", ТекущийНомер);
	
	КонецЕсли;
	
	
	Если ПраваДоступаНаТаблицы.ЧтениеПриобретениеТоваровУслуг Тогда
	
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();

		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПриобретениеТоваровУслуг.Ссылка КАК ОформленноеПоступление,
		|	ПриобретениеТоваровУслуг.ДопоступлениеПоДокументу КАК ДопоставкаПоПоступлению
		|ИЗ
		|	Действия КАК Действия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
		|		ПО (ПриобретениеТоваровУслуг.Проведен)
		|			И Действия.Основание = ПриобретениеТоваровУслуг.ДопоступлениеПоДокументу
		|";
		
		ТекущийНомер = ТекущийНомер + 1;
		СоответствиеНаборовДанных.Вставить("ПоступленияПоступления", ТекущийНомер);
	
	КонецЕсли;
	
	Если ПраваДоступаНаТаблицы.ЧтениеПоступленияТоваровНаСклад Тогда
	
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();

		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Действия.Основание КАК Основание,
		|	ПоступлениеТоваровНаСклад.Ссылка КАК ОформленноеПоступление,
		|	ПоступлениеТоваровНаСклад.Допоступление КАК ДопоставкаПоПоступлению,
		|	ПоступлениеТоваровНаСклад.Склад КАК Склад,
		|	ПоступлениеТоваровНаСклад.Исправление КАК Исправление
		|ИЗ
		|	Действия КАК Действия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваров
		|		ПО ПриобретениеТоваров.Ссылка = Действия.Основание
		|		
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровНаСклад КАК ПоступлениеТоваровНаСклад
		|		ПО ПоступлениеТоваровНаСклад.Проведен 
		|		И Действия.Склад  = ПоступлениеТоваровНаСклад.Склад
		|		И ПоступлениеТоваровНаСклад.Распоряжение = 
		|			(
		|			ВЫБОР
		|				КОГДА ПриобретениеТоваров.ВариантПриемкиТоваров В (
		|														ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПоДоговорамБезЗаказовИНакладных),
		|														ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПоДоговорамПослеЗаказовИлиНакладных),
		|														ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПоДоговорамПослеНакладных))
		|				ТОГДА
		|					ПриобретениеТоваров.Договор
		|				КОГДА ПриобретениеТоваров.ВариантПриемкиТоваров В (
		|														ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.МожетПроисходитьБезЗаказовИНакладных),
		|														ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.НеРазделенаПоЗаказамИНакладным),
		|														ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.НеРазделенаПоНакладным))
		|				ТОГДА
		|					ПриобретениеТоваров.Соглашение
		// Если РазделенаПоЗаказамИНакладным И ЭтоНакладная И НеПоЗаказу - значит накладная:
		|				КОГДА НЕ ПриобретениеТоваров.ПоступлениеПоЗаказам
		|					И ПриобретениеТоваров.ВариантПриемкиТоваров = 
		|						ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным)
		|				ТОГДА
		|					ПриобретениеТоваров.Ссылка
		|
		// Если РазделенаТолькоПоНакладным И ЭтоНакладная - значит накладная:
		|				КОГДА ПриобретениеТоваров.ВариантПриемкиТоваров = 
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным)
		|				ТОГДА
		|					ПриобретениеТоваров.Ссылка
		|				ИНАЧЕ
		|					ПриобретениеТоваров.ЗаказПоставщику
		|			КОНЕЦ
		|			)
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровНаСклад.Товары КАК ПоступлениеТоваровНаСкладТовары
		|		ПО ПоступлениеТоваровНаСкладТовары.Ссылка = ПоступлениеТоваровНаСклад.Ссылка
		|			И ПоступлениеТоваровНаСкладТовары.Номенклатура = Действия.Номенклатура
		|";
		
		ТекущийНомер = ТекущийНомер + 1;
		СоответствиеНаборовДанных.Вставить("ПоступленияПоступленияНаСклад", ТекущийНомер);
	
	КонецЕсли;
	
	Если ПраваДоступаНаТаблицы.ЧтениеСписаниеНедостачТоваров Тогда
	
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();

		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СписаниеНедостачТоваров.Ссылка КАК Списание,
		|	СписаниеНедостачТоваров.Склад КАК Склад,
		|	СписаниеНедостачТоваров.Основание КАК Основание
		|ИЗ
		|	Действия КАК Действия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеНедостачТоваров КАК СписаниеНедостачТоваров
		|		ПО (СписаниеНедостачТоваров.Проведен)
		|			И Действия.Основание = СписаниеНедостачТоваров.Основание
		|			И Действия.Склад     = СписаниеНедостачТоваров.Склад
		|";
		
		ТекущийНомер = ТекущийНомер + 1;
		СоответствиеНаборовДанных.Вставить("ОснованияСписанияНедостач", ТекущийНомер);
	
	КонецЕсли;
	
	Если ПраваДоступаНаТаблицы.ЧтениеСписаниеЗадолженности Тогда
	
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();

		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	КорректировкаЗадолженности.Ссылка КАК Списание,
		|	КорректировкаЗадолженности.Основание КАК Основание
		|ИЗ
		|	Действия КАК Действия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаЗадолженности КАК КорректировкаЗадолженности
		|		ПО (КорректировкаЗадолженности.Проведен)
		|			И Действия.Основание = КорректировкаЗадолженности.Основание
		|";
		
		ТекущийНомер = ТекущийНомер + 1;
		СоответствиеНаборовДанных.Вставить("ОснованияСписанияЗадолженностей", ТекущийНомер);
	
	КонецЕсли;
	
	Если ПраваДоступаНаТаблицы.ЧтениеОприходованиеИзлишковТоваров Тогда
	
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();

		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ОприходованиеИзлишковТоваров.Ссылка КАК Оприходование,
		|	ОприходованиеИзлишковТоваров.Склад КАК Склад,
		|	ОприходованиеИзлишковТоваров.Основание КАК Основание
		|ИЗ
		|	Действия КАК Действия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОприходованиеИзлишковТоваров КАК ОприходованиеИзлишковТоваров
		|		ПО (ОприходованиеИзлишковТоваров.Проведен)
		|			И Действия.Основание = ОприходованиеИзлишковТоваров.Основание
		|			И Действия.Склад     = ОприходованиеИзлишковТоваров.Склад
		|";
		
		ТекущийНомер = ТекущийНомер + 1;
		СоответствиеНаборовДанных.Вставить("ОснованияОприходования", ТекущийНомер);
	
	КонецЕсли;
	
	Если ПраваДоступаНаТаблицы.ЧтениеСписаниеРасхожденийПоступлениеПриобретение Тогда
	
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();

		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СписаниеРасхожденийПоступлениеПриобретение.Ссылка КАК Списание,
		|	СписаниеРасхожденийПоступлениеПриобретение.Основание КАК Приобретение,
		|	СписаниеРасхожденийПоступлениеПриобретение.Склад КАК Склад,
		|	СписаниеРасхожденийПоступлениеПриобретение.ЗаказПоставщику КАК Заказ
		|ИЗ
		|	Действия КАК Действия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеРасхожденийПоступлениеПриобретение КАК СписаниеРасхожденийПоступлениеПриобретение
		|		ПО (СписаниеРасхожденийПоступлениеПриобретение.Проведен)
		|			И (Действия.Основание = СписаниеРасхожденийПоступлениеПриобретение.Основание
		|				ИЛИ Действия.Заказ = СписаниеРасхожденийПоступлениеПриобретение.ЗаказПоставщику)
		|			И Действия.Склад = СписаниеРасхожденийПоступлениеПриобретение.Склад
		|";
		
		ТекущийНомер = ТекущийНомер + 1;
		СоответствиеНаборовДанных.Вставить("СписанияРасхожденийПоступлениеПриобретение", ТекущийНомер);
	
	КонецЕсли;

	Если ПраваДоступаНаТаблицы.ЧтениеПретензий Тогда
	
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();

		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Претензии.Ссылка КАК Претензия,
		|	Претензии.Основание КАК Основание
		|ИЗ
		|	Действия КАК Действия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Претензии КАК Претензии
		|		ПО НЕ (Претензии.ПометкаУдаления)
		|			И Действия.Основание = ВЫРАЗИТЬ(Претензии.Основание КАК Документ.ПриобретениеТоваровУслуг)
		|";
		
		ТекущийНомер = ТекущийНомер + 1;
		СоответствиеНаборовДанных.Вставить("Претензии", ТекущийНомер);
	
	КонецЕсли;
	
	Если ПраваДоступаНаТаблицы.ЧтениеКорректировкаЗадолженности Тогда
	
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();

		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
        |	КорректировкаЗадолженности.Ссылка КАК Корректировка,
		|	Претензии.Ссылка КАК Претензия,
		|	Претензии.Основание КАК Приобретение
        |ИЗ
        |	Действия КАК Действия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Претензии КАК Претензии
		|		ПО НЕ (Претензии.ПометкаУдаления)
		|			И Действия.Основание = ВЫРАЗИТЬ(Претензии.Основание КАК Документ.ПриобретениеТоваровУслуг)
        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаЗадолженности.Задолженность КАК КорректировкаЗадолженности
        |		ПО (КорректировкаЗадолженности.Ссылка.Проведен)
        |			И (Претензии.ОбъектРасчетов = ВЫРАЗИТЬ(КорректировкаЗадолженности.ОбъектРасчетов КАК Справочник.ОбъектыРасчетов))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	КорректировкаЗадолженности.Ссылка КАК Корректировка,
		|	НЕОПРЕДЕЛЕНО КАК Претензия,
		|	Действия.Основание КАК Приобретение
		|ИЗ
		|	Действия КАК Действия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаЗадолженности.Задолженность КАК КорректировкаЗадолженности
		|		ПО (КорректировкаЗадолженности.Ссылка.Проведен)
		|			И (Действия.Основание = КорректировкаЗадолженности.ОбъектРасчетов.Объект)"; 
		
		ТекущийНомер = ТекущийНомер + 1;
		СоответствиеНаборовДанных.Вставить("КорректировкиЗадолженности", ТекущийНомер);
	
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции 

&НаСервере
Функция ТекстЗапросаАктОРасхожденияхПослеПеремещения(ПраваДоступаНаТаблицы, СоответствиеНаборовДанных)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	АктОРасхожденияхПослеПеремещения.Действие                КАК Действие,
	|	АктОРасхожденияхПослеПеремещения.Ссылка.СкладОтправитель КАК СкладОтправитель,
	|	АктОРасхожденияхПослеПеремещения.Ссылка.СкладПолучатель  КАК СкладПолучатель,
	|	АктОРасхожденияхПослеПеремещения.ДокументОснование       КАК Основание
	|ПОМЕСТИТЬ Действия
	|ИЗ
	|	Документ.АктОРасхожденияхПослеПеремещения.Товары КАК АктОРасхожденияхПослеПеремещения
	|ГДЕ
	|	АктОРасхожденияхПослеПеремещения.Ссылка = &АктОРасхождениях
	|	И АктОРасхожденияхПослеПеремещения.КоличествоУпаковокПоДокументу - АктОРасхожденияхПослеПеремещения.Количество <> 0
	|	И АктОРасхожденияхПослеПеремещения.Действие <> ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////1
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Действия.Действие                       КАК Действие,
	|	Действия.Основание                      КАК Основание,
	|	Действия.Основание.ПеремещениеПоЗаказам КАК ПоЗаказам,
	|	ЛОЖЬ                                    КАК ПоВинеСтороннейКомпании,
	|	Действия.Основание.ЗаказНаПеремещение   КАК Заказ
	|ИЗ
	|	Действия КАК Действия
	|ИТОГИ ПО
	|	Основание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////2
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Документ.Ссылка КАК ПеремещениеТоваров,
	|	Документ.ПеремещениеАктаОРасхождениях КАК Основание,
	|	Документ.Ссылка.Исправление КАК Исправление
	|ИЗ
	|	Действия КАК Действия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК Документ
	|		ПО (Документ.Проведен)
	|			И Действия.Основание = Документ.ПеремещениеАктаОРасхождениях
	|			И Действия.СкладОтправитель = Документ.СкладОтправитель
	|			И Действия.СкладПолучатель = Документ.СкладПолучатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////3
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПеремещениеТоваров.Ссылка КАК ПеремещениеТоваров,
	|	ПеремещениеТоваров.ПеремещениеАктаОРасхождениях КАК Основание
	|ИЗ
	|	Действия КАК Действия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|		ПО (ПеремещениеТоваров.Проведен)
	|			И Действия.Основание = ПеремещениеТоваров.ПеремещениеАктаОРасхождениях
	|			И Действия.СкладПолучатель = ПеремещениеТоваров.СкладОтправитель
	|			И Действия.СкладОтправитель = ПеремещениеТоваров.СкладПолучатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////4
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	АктОРасхожденияхПослеПеремещенияТовары.ДокументОснование КАК ПеремещениеТоваров,
	|	АктОРасхожденияхПослеПеремещенияТовары.Заказ             КАК ЗаказНаПеремещение
	|ИЗ
	|	Документ.АктОРасхожденияхПослеПеремещения.Товары КАК АктОРасхожденияхПослеПеремещенияТовары
	|ГДЕ
	|	АктОРасхожденияхПослеПеремещенияТовары.КоличествоУпаковокПоДокументу <> АктОРасхожденияхПослеПеремещенияТовары.КоличествоУпаковок
	|	И АктОРасхожденияхПослеПеремещенияТовары.Действие = ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ДопоставкаНеТребуется)
	|	И АктОРасхожденияхПослеПеремещенияТовары.Ссылка = &АктОРасхождениях
	|	И АктОРасхожденияхПослеПеремещенияТовары.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказНаПеремещение.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказНаПеремещение УБЫВ
	|";
	
	ТекущийНомер = 4;
	
	Если ПраваДоступаНаТаблицы.ЧтениеСписаниеНедостачТоваров Тогда
	
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();

		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СписаниеНедостачТоваров.Ссылка КАК Списание,
		|	СписаниеНедостачТоваров.Склад КАК Склад,
		|	СписаниеНедостачТоваров.Основание КАК Основание
		|ИЗ
		|	Действия КАК Действия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеНедостачТоваров КАК СписаниеНедостачТоваров
		|		ПО (СписаниеНедостачТоваров.Проведен)
		|			И Действия.Основание = СписаниеНедостачТоваров.Основание
		|			И Действия.СкладПолучатель = СписаниеНедостачТоваров.Склад
		|";
		
		ТекущийНомер = ТекущийНомер + 1;
		СоответствиеНаборовДанных.Вставить("ОснованияСписанияНедостачПоПеремещениюТоваров", ТекущийНомер);
	
	КонецЕсли;
	
	Если ПраваДоступаНаТаблицы.ЧтениеОприходованиеИзлишковТоваров Тогда
	
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();

		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ОприходованиеИзлишковТоваров.Ссылка КАК Оприходование,
		|	ОприходованиеИзлишковТоваров.Склад КАК Склад,
		|	ОприходованиеИзлишковТоваров.Основание КАК Основание
		|ИЗ
		|	Действия КАК Действия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОприходованиеИзлишковТоваров КАК ОприходованиеИзлишковТоваров
		|		ПО (ОприходованиеИзлишковТоваров.Проведен)
		|			И Действия.Основание = ОприходованиеИзлишковТоваров.Основание
		|			И Действия.СкладПолучатель = ОприходованиеИзлишковТоваров.Склад
		|";
		
		ТекущийНомер = ТекущийНомер + 1;
		СоответствиеНаборовДанных.Вставить("ОснованияОприходованияПоПеремещениюТоваров", ТекущийНомер);
	
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ВыводИнформацииВОтчет

&НаСервере
Процедура ВывестиСтрокиДействийПоАктуПослеОтгрузки(СтрокаДействия, Макет, ТипОснованияАктаОРасхождении)

	Если СпособОтраженияРасхождений = Перечисления.СпособыОтраженияРасхожденийАктПриемкиКлиента.ИсправлениеПервичныхДокументов Тогда
			
		Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ТребуетсяДопоставка) <> Неопределено Тогда
			
			Если РасхожденияКлиентСервер.ТипОснованияРеализацияТоваровУслуг(ТипОснованияАктаОРасхождении) Тогда
				
				// Если есть заказы:
				// +Выводим накладную, которую надо уменьшить. (КнопкаИзменений)
				// +Выводить команду на создание новой накладной на реализацию недопоставленного. (КомандаГиперссылка).
				
				Описание = Новый Структура;
				Описание.Вставить("ОснованиеАкта", СтрокаДействия.Основание);
				Описание.Вставить("АктОРасхождениях", АктОРасхождениях);
				Описание.Вставить("ИмяКоманды", "Изменить");
				Описание.Вставить("ВариантДействия", Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ТребуетсяДопоставка);
				Описание.Вставить("СпособОтражения", СпособОтраженияРасхождений);
				
				ВывестиИсправлениеРеализацииТоваровУслуг(СтрокаДействия, Макет, Описание);
				
				ТабличныйДокумент.НачатьГруппуСтрок();
				
				Описание = Новый Структура;
				Описание.Вставить("ОснованиеАкта", СтрокаДействия.Основание);
				Описание.Вставить("АктОРасхождениях", АктОРасхождениях);
				Описание.Вставить("ИмяКоманды", "Оформить");
				Описание.Вставить("ВариантДействия", Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ТребуетсяДопоставка);
				Описание.Вставить("СпособОтражения", СпособОтраженияРасхождений);

				ВывестиДокументРеализацияНаДопоставкуНедопоставленногоТовара(СтрокаДействия, Макет, Описание);
				ТабличныйДокумент.ЗакончитьГруппуСтрок();
			
			ИначеЕсли РасхожденияКлиентСервер.ТипОснованияВозвратПоставщику(ТипОснованияАктаОРасхождении) Тогда
				
				Описание = Новый Структура;
				Описание.Вставить("ОснованиеАкта", СтрокаДействия.Основание);
				Описание.Вставить("АктОРасхождениях", АктОРасхождениях);
				Описание.Вставить("ИмяКоманды", "Изменить");
				Описание.Вставить("ВариантДействия", Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ТребуетсяДопоставка);
				Описание.Вставить("СпособОтражения", СпособОтраженияРасхождений);
				
				ВывестиИсправлениеВозвратаТоваровПоставщику(
					СтрокаДействия,
					Макет,
					Описание);
				
				ТабличныйДокумент.НачатьГруппуСтрок();
				
				Описание = Новый Структура;
				Описание.Вставить("ОснованиеАкта", СтрокаДействия.Основание);
				Описание.Вставить("АктОРасхождениях", АктОРасхождениях);
				Описание.Вставить("ИмяКоманды", "Оформить");
				Описание.Вставить("ВариантДействия", Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ТребуетсяДопоставка);
				Описание.Вставить("СпособОтражения", СпособОтраженияРасхождений);

				ВывестиДокументВозвратТоваровПоставщикуДляВозвратаНедопоставленногоТовара(СтрокаДействия, Макет, Описание);
				ТабличныйДокумент.ЗакончитьГруппуСтрок();
				
			ИначеЕсли РасхожденияКлиентСервер.ТипОснованияПередачаТоваровХранителю(ТипОснованияАктаОРасхождении) Тогда
				
				//Если есть заказы:
				//+Выводим накладную, которую надо уменьшить. (КнопкаИзменений)
				//+Выводить команду на создание новой накладной на передачу недопоставленного. (КомандаГиперссылка)
				
				Описание = Новый Структура;
				Описание.Вставить("ОснованиеАкта",    СтрокаДействия.Основание);
				Описание.Вставить("АктОРасхождениях", АктОРасхождениях);
				Описание.Вставить("ИмяКоманды",       "Изменить");
				Описание.Вставить("СпособОтражения",  СпособОтраженияРасхождений);
				Описание.Вставить("ВариантДействия",
							Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ТребуетсяДопоставка);
				
				ВывестиИсправлениеПередачиТоваровХранителю(СтрокаДействия, Макет, Описание);
				
				Описание = Новый Структура;
				Описание.Вставить("ОснованиеАкта",    СтрокаДействия.Основание);
				Описание.Вставить("АктОРасхождениях", АктОРасхождениях);
				Описание.Вставить("ИмяКоманды",       "Оформить");
				Описание.Вставить("СпособОтражения",  СпособОтраженияРасхождений);
				Описание.Вставить("ВариантДействия",
							Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ТребуетсяДопоставка);
				
				ТабличныйДокумент.НачатьГруппуСтрок();
				ВывестиДокументПередачиНаДопоставкуНедопоставленногоТовара(СтрокаДействия, Макет, Описание);
				ТабличныйДокумент.ЗакончитьГруппуСтрок();
				
			ИначеЕсли РасхожденияКлиентСервер.ТипОснованияПередачаНаКомиссию(ТипОснованияАктаОРасхождении) Тогда
				
				//Если есть заказы:
				//+Выводим накладную, которую надо уменьшить. (КнопкаИзменений)
				//+Выводить команду на создание новой накладной на передачу недопоставленного. (КомандаГиперссылка)
				
				Описание = Новый Структура;
				Описание.Вставить("ОснованиеАкта",    СтрокаДействия.Основание);
				Описание.Вставить("АктОРасхождениях", АктОРасхождениях);
				Описание.Вставить("ИмяКоманды",       "Изменить");
				Описание.Вставить("СпособОтражения",  СпособОтраженияРасхождений);
				Описание.Вставить("ВариантДействия",
							Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ТребуетсяДопоставка);
				
				ВывестиИсправлениеПередачиТоваровНаКомиссию(СтрокаДействия, Макет, Описание);
				
				Описание = Новый Структура;
				Описание.Вставить("ОснованиеАкта",    СтрокаДействия.Основание);
				Описание.Вставить("АктОРасхождениях", АктОРасхождениях);
				Описание.Вставить("ИмяКоманды",       "Оформить");
				Описание.Вставить("СпособОтражения",  СпособОтраженияРасхождений);
				Описание.Вставить("ВариантДействия",
							Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ТребуетсяДопоставка);
				
				ТабличныйДокумент.НачатьГруппуСтрок();
				ВывестиДокументПередачиНаДопоставкуПоКомиссииНедопоставленногоТовара(СтрокаДействия, Макет, Описание);
				ТабличныйДокумент.ЗакончитьГруппуСтрок();
				
			Иначе
				
				Описание = Новый Структура;
				Описание.Вставить("ОснованиеАкта",    СтрокаДействия.Основание);
				Описание.Вставить("АктОРасхождениях", АктОРасхождениях);
				Описание.Вставить("ИмяКоманды",       "Изменить");
				Описание.Вставить("СпособОтражения",  СпособОтраженияРасхождений);
				Описание.Вставить("ВариантДействия",
					Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ТребуетсяДопоставка);
				
				ВывестиИсправлениеОтгрузкаТоваровСХранения(СтрокаДействия, Макет, Описание);
				
				Описание = Новый Структура;
				Описание.Вставить("ОснованиеАкта",    СтрокаДействия.Основание);
				Описание.Вставить("АктОРасхождениях", АктОРасхождениях);
				Описание.Вставить("ИмяКоманды",       "Оформить");
				Описание.Вставить("СпособОтражения",  СпособОтраженияРасхождений);
				Описание.Вставить("ВариантДействия",
					Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ТребуетсяДопоставка);
				
				ТабличныйДокумент.НачатьГруппуСтрок();
				ВывестиДокументОтгрузкаТоваровСХраненияДляВозвратаНедопоставленногоТовара(СтрокаДействия, Макет, Описание);
				ТабличныйДокумент.ЗакончитьГруппуСтрок();
				
			КонецЕсли;
			
		КонецЕсли;
			
		Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ДопоставкаНеТребуется) <> Неопределено Тогда
			
			Если РасхожденияКлиентСервер.ТипОснованияРеализацияТоваровУслуг(ТипОснованияАктаОРасхождении) Тогда
			
				// Если есть заказы:
				// +Выводим накладную, которую надо уменьшить (КнопкаИзменений).
				// +Выводим заказ, в котором строки подлежат отмене. (КнопкаИзменений).
				// Если нет заказов:
				// +Выводим накладную, которую надо уменьшить. (КнопкаИзменений).
				
				Описание = Новый Структура;
				Описание.Вставить("ОснованиеАкта", СтрокаДействия.Основание);
				Описание.Вставить("АктОРасхождениях", АктОРасхождениях);
				Описание.Вставить("ИмяКоманды", "Изменить");
				Описание.Вставить("ВариантДействия", Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ДопоставкаНеТребуется);
				Описание.Вставить("СпособОтражения", СпособОтраженияРасхождений);
				
				ВывестиИсправлениеРеализацииТоваровУслуг(СтрокаДействия, Макет, Описание);
				
				Если СтрокаДействия.ПоЗаказам Тогда
					ТабличныйДокумент.НачатьГруппуСтрок();
					
					Описание = Новый Структура;
					Описание.Вставить("ОснованиеАкта", СтрокаДействия.Основание);
					Описание.Вставить("АктОРасхождениях", АктОРасхождениях);
					Описание.Вставить("ИмяКоманды", "Оформить");
					Описание.Вставить("ВариантДействия", Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ДопоставкаНеТребуется);
					Описание.Вставить("СпособОтражения", СпособОтраженияРасхождений);
					
					ВывестиИсправлениеДокументаЗаказ(СтрокаДействия, Макет, Описание);
					ТабличныйДокумент.ЗакончитьГруппуСтрок();
				КонецЕсли;
			
			ИначеЕсли РасхожденияКлиентСервер.ТипОснованияВозвратПоставщику(ТипОснованияАктаОРасхождении) Тогда
				
				Описание = Новый Структура;
				Описание.Вставить("ОснованиеАкта", СтрокаДействия.Основание);
				Описание.Вставить("АктОРасхождениях", АктОРасхождениях);
				Описание.Вставить("ИмяКоманды", "Изменить");
				Описание.Вставить("ВариантДействия", Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ДопоставкаНеТребуется);
				Описание.Вставить("СпособОтражения", СпособОтраженияРасхождений);
				
				ВывестиИсправлениеВозвратаТоваровПоставщику(СтрокаДействия, Макет, Описание);
				
			ИначеЕсли РасхожденияКлиентСервер.ТипОснованияПередачаТоваровХранителю(ТипОснованияАктаОРасхождении) Тогда
			
				// Если есть заказы:
				// +Выводим накладную, которую надо уменьшить (КнопкаИзменений).
				// +Выводим заказ, в котором строки подлежат отмене. (КнопкаИзменений).
				// Если нет заказов:
				// +Выводим накладную, которую надо уменьшить. (КнопкаИзменений).
				
				Описание = Новый Структура;
				Описание.Вставить("ОснованиеАкта",    СтрокаДействия.Основание);
				Описание.Вставить("АктОРасхождениях", АктОРасхождениях);
				Описание.Вставить("ИмяКоманды",       "Изменить");
				Описание.Вставить("СпособОтражения",  СпособОтраженияРасхождений);
				Описание.Вставить("ВариантДействия",
							Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ДопоставкаНеТребуется);
				
				ВывестиИсправлениеПередачиТоваровХранителю(СтрокаДействия, Макет, Описание);
				
				Если СтрокаДействия.ПоЗаказам Тогда
					
					Описание = Новый Структура;
					Описание.Вставить("ОснованиеАкта",    СтрокаДействия.Основание);
					Описание.Вставить("АктОРасхождениях", АктОРасхождениях);
					Описание.Вставить("ИмяКоманды",       "Оформить");
					Описание.Вставить("СпособОтражения",  СпособОтраженияРасхождений);
					Описание.Вставить("ВариантДействия",
								Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ДопоставкаНеТребуется);
					
					ТабличныйДокумент.НачатьГруппуСтрок();
					ВывестиИсправлениеДокументаЗаказПоПередаче(СтрокаДействия, Макет, Описание);
					ТабличныйДокумент.ЗакончитьГруппуСтрок();
					
				КонецЕсли;
				
			ИначеЕсли РасхожденияКлиентСервер.ТипОснованияПередачаНаКомиссию(ТипОснованияАктаОРасхождении) Тогда
			
				// Если есть заказы:
				// +Выводим накладную, которую надо уменьшить (КнопкаИзменений).
				// +Выводим заказ, в котором строки подлежат отмене. (КнопкаИзменений).
				// Если нет заказов:
				// +Выводим накладную, которую надо уменьшить. (КнопкаИзменений).
				
				Описание = Новый Структура;
				Описание.Вставить("ОснованиеАкта",    СтрокаДействия.Основание);
				Описание.Вставить("АктОРасхождениях", АктОРасхождениях);
				Описание.Вставить("ИмяКоманды",       "Изменить");
				Описание.Вставить("СпособОтражения",  СпособОтраженияРасхождений);
				Описание.Вставить("ВариантДействия",
							Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ДопоставкаНеТребуется);
				
				ВывестиИсправлениеПередачиТоваровНаКомиссию(СтрокаДействия, Макет, Описание);
				
				Если СтрокаДействия.ПоЗаказам Тогда
					
					Описание = Новый Структура;
					Описание.Вставить("ОснованиеАкта",    СтрокаДействия.Основание);
					Описание.Вставить("АктОРасхождениях", АктОРасхождениях);
					Описание.Вставить("ИмяКоманды",       "Оформить");
					Описание.Вставить("СпособОтражения",  СпособОтраженияРасхождений);
					Описание.Вставить("ВариантДействия",
								Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ДопоставкаНеТребуется);
					
					ТабличныйДокумент.НачатьГруппуСтрок();
					ВывестиИсправлениеДокументаЗаказПоПередаче(СтрокаДействия, Макет, Описание);
					ТабличныйДокумент.ЗакончитьГруппуСтрок();
					
				КонецЕсли;
				
			Иначе
				
				Описание = Новый Структура;
				Описание.Вставить("ОснованиеАкта",    СтрокаДействия.Основание);
				Описание.Вставить("АктОРасхождениях", АктОРасхождениях);
				Описание.Вставить("ИмяКоманды",       "Изменить");
				Описание.Вставить("СпособОтражения",  СпособОтраженияРасхождений);
				Описание.Вставить("ВариантДействия",
					Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ДопоставкаНеТребуется);
				
				ВывестиИсправлениеОтгрузкаТоваровСХранения(СтрокаДействия, Макет, Описание);
				
			КонецЕсли;
		
		КонецЕсли;
			
		Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ВозвратПерепоставленного) <> Неопределено Тогда
				
			Если РасхожденияКлиентСервер.ТипОснованияРеализацияТоваровУслуг(ТипОснованияАктаОРасхождении) Тогда
				
				// +Увеличение накладной сверх заказа (КнопкаИзменений)
				// +Если есть заявки на возврат, то оформление заявки  на возврат перепоставленного (КомандаГиперссылка  )
				// +Если нет заявок на возврат , то оформление возврата перепоставленного. (КомандаГиперссылка  ).
				
				Описание = Новый Структура;
				Описание.Вставить("ОснованиеАкта", СтрокаДействия.Основание);
				Описание.Вставить("АктОРасхождениях", АктОРасхождениях);
				Описание.Вставить("ИмяКоманды", "Изменить");
				Описание.Вставить("ВариантДействия", Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ВозвратПерепоставленного);
				Описание.Вставить("СпособОтражения", СпособОтраженияРасхождений);
				
				ВывестиИсправлениеРеализацииТоваровУслуг(СтрокаДействия, Макет, Описание);
				
				ТабличныйДокумент.НачатьГруппуСтрок();
				
				Описание = Новый Структура;
				Описание.Вставить("ОснованиеАкта", СтрокаДействия.Основание);
				Описание.Вставить("АктОРасхождениях", АктОРасхождениях);
				Описание.Вставить("ИмяКоманды", "Оформить");
				Описание.Вставить("ВариантДействия", Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ВозвратПерепоставленного);
				Описание.Вставить("СпособОтражения", СпособОтраженияРасхождений);
				
				ВывестиДокументВозврата(СтрокаДействия, Макет, Описание);
				ТабличныйДокумент.ЗакончитьГруппуСтрок();
			
			ИначеЕсли РасхожденияКлиентСервер.ТипОснованияВозвратПоставщику(ТипОснованияАктаОРасхождении) Тогда
				
				// Увеличение возврата (КнопкаИзменений)
				// Оформление поступления перепоставленного. (КомандаГиперссылка  ).
				
				Описание = Новый Структура;
				Описание.Вставить("ОснованиеАкта",    СтрокаДействия.Основание);
				Описание.Вставить("АктОРасхождениях", АктОРасхождениях);
				Описание.Вставить("ИмяКоманды",       "Изменить");
				Описание.Вставить("СпособОтражения",  СпособОтраженияРасхождений);
				Описание.Вставить("ВариантДействия",
					Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ВозвратПерепоставленного);
				
				ВывестиИсправлениеВозвратаТоваровПоставщику(СтрокаДействия, Макет, Описание);
				
				ТабличныйДокумент.НачатьГруппуСтрок();
				Описание.Вставить("ОснованиеАкта",    СтрокаДействия.Основание);
				Описание.Вставить("АктОРасхождениях", АктОРасхождениях);
				Описание.Вставить("ИмяКоманды",       "Оформить");
				Описание.Вставить("СпособОтражения",  СпособОтраженияРасхождений);
				Описание.Вставить("ВариантДействия",
					Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ВозвратПерепоставленного);

				ВывестиДокументПриобретениеТоваровУслуг(СтрокаДействия, Макет, Описание);
				ТабличныйДокумент.ЗакончитьГруппуСтрок();
				
			ИначеЕсли РасхожденияКлиентСервер.ТипОснованияПередачаТоваровХранителю(ТипОснованияАктаОРасхождении) Тогда
				
				// +Увеличение накладной сверх заказа (КнопкаИзменений).
				// +Если есть заявки на возврат, то оформление заявки  на возврат перепоставленного (КомандаГиперссылка).
				// +Если нет заявок на возврат , то оформление возврата перепоставленного. (КомандаГиперссылка).
				
				Описание = Новый Структура;
				Описание.Вставить("ОснованиеАкта",    СтрокаДействия.Основание);
				Описание.Вставить("АктОРасхождениях", АктОРасхождениях);
				Описание.Вставить("ИмяКоманды",       "Изменить");
				Описание.Вставить("СпособОтражения",  СпособОтраженияРасхождений);
				Описание.Вставить("ВариантДействия",
							Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ВозвратПерепоставленного);
				
				ВывестиИсправлениеПередачиТоваровХранителю(СтрокаДействия, Макет, Описание);
				
				Описание = Новый Структура;
				Описание.Вставить("ОснованиеАкта",    СтрокаДействия.Основание);
				Описание.Вставить("АктОРасхождениях", АктОРасхождениях);
				Описание.Вставить("ИмяКоманды",       "Оформить");
				Описание.Вставить("СпособОтражения",  СпособОтраженияРасхождений);
				Описание.Вставить("ВариантДействия",
							Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ВозвратПерепоставленного);
				
				ТабличныйДокумент.НачатьГруппуСтрок();
				ВывестиДокументВозвратаПоПередаче(СтрокаДействия, Макет, Описание);
				ТабличныйДокумент.ЗакончитьГруппуСтрок();
			
			ИначеЕсли РасхожденияКлиентСервер.ТипОснованияПередачаНаКомиссию(ТипОснованияАктаОРасхождении) Тогда
				
				// +Увеличение накладной сверх заказа (КнопкаИзменений).
				// +Если есть заявки на возврат, то оформление заявки  на возврат перепоставленного (КомандаГиперссылка).
				// +Если нет заявок на возврат , то оформление возврата перепоставленного. (КомандаГиперссылка).
				
				Описание = Новый Структура;
				Описание.Вставить("ОснованиеАкта",    СтрокаДействия.Основание);
				Описание.Вставить("АктОРасхождениях", АктОРасхождениях);
				Описание.Вставить("ИмяКоманды",       "Изменить");
				Описание.Вставить("СпособОтражения",  СпособОтраженияРасхождений);
				Описание.Вставить("ВариантДействия",
							Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ВозвратПерепоставленного);
				
				ВывестиИсправлениеПередачиТоваровНаКомиссию(СтрокаДействия, Макет, Описание);
				
				Описание = Новый Структура;
				Описание.Вставить("ОснованиеАкта",    СтрокаДействия.Основание);
				Описание.Вставить("АктОРасхождениях", АктОРасхождениях);
				Описание.Вставить("ИмяКоманды",       "Оформить");
				Описание.Вставить("СпособОтражения",  СпособОтраженияРасхождений);
				Описание.Вставить("ВариантДействия",
							Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ВозвратПерепоставленного);
				
				ТабличныйДокумент.НачатьГруппуСтрок();
				ВывестиДокументВозвратаПоПередачеНаКомиссию(СтрокаДействия, Макет, Описание);
				ТабличныйДокумент.ЗакончитьГруппуСтрок();
				
			Иначе
				
				// Увеличение возврата (КнопкаИзменений)
				// Оформление поступления перепоставленного. (КомандаГиперссылка  ).
				
				Описание = Новый Структура;
				Описание.Вставить("ОснованиеАкта",    СтрокаДействия.Основание);
				Описание.Вставить("АктОРасхождениях", АктОРасхождениях);
				Описание.Вставить("ИмяКоманды",       "Изменить");
				Описание.Вставить("СпособОтражения",  СпособОтраженияРасхождений);
				Описание.Вставить("ВариантДействия",
					Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ВозвратПерепоставленного);
				
				ВывестиИсправлениеОтгрузкаТоваровСХранения(СтрокаДействия, Макет, Описание);
				
				Описание = Новый Структура;
				Описание.Вставить("ОснованиеАкта",    СтрокаДействия.Основание);
				Описание.Вставить("АктОРасхождениях", АктОРасхождениях);
				Описание.Вставить("ИмяКоманды",       "Оформить");
				Описание.Вставить("СпособОтражения",  СпособОтраженияРасхождений);
				Описание.Вставить("ВариантДействия",
					Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ВозвратПерепоставленного);
				
				ТабличныйДокумент.НачатьГруппуСтрок();
				ВывестиДокументПриемкаТоваровНаХранение(СтрокаДействия, Макет, Описание);
				ТабличныйДокумент.ЗакончитьГруппуСтрок();
				
			КонецЕсли;
			
		КонецЕсли;
			
		Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПокупкаПерепоставленного) <> Неопределено Тогда
				
			Если РасхожденияКлиентСервер.ТипОснованияРеализацияТоваровУслуг(ТипОснованияАктаОРасхождении) Тогда
			
				// +Увеличение накладной сверх заказа. (КнопкаИзменений)
				Описание = Новый Структура;
				Описание.Вставить("ОснованиеАкта",    СтрокаДействия.Основание);
				Описание.Вставить("АктОРасхождениях", АктОРасхождениях);
				Описание.Вставить("ИмяКоманды",       "Изменить");
				Описание.Вставить("СпособОтражения",  СпособОтраженияРасхождений);
				Описание.Вставить("ВариантДействия",
					Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПокупкаПерепоставленного);
				
				ВывестиИсправлениеРеализацииТоваровУслуг(СтрокаДействия, Макет, Описание);
				
			ИначеЕсли РасхожденияКлиентСервер.ТипОснованияВозвратПоставщику(ТипОснованияАктаОРасхождении) Тогда
				
				// Увеличение возврата. (КнопкаИзменений)
				
				Описание = Новый Структура;
				Описание.Вставить("ОснованиеАкта",    СтрокаДействия.Основание);
				Описание.Вставить("АктОРасхождениях", АктОРасхождениях);
				Описание.Вставить("ИмяКоманды",       "Изменить");
				Описание.Вставить("СпособОтражения",  СпособОтраженияРасхождений);
				Описание.Вставить("ВариантДействия",
					Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПокупкаПерепоставленного);
				
				ВывестиИсправлениеВозвратаТоваровПоставщику(СтрокаДействия, Макет, Описание);
				
			ИначеЕсли РасхожденияКлиентСервер.ТипОснованияПередачаТоваровХранителю(ТипОснованияАктаОРасхождении) Тогда
				
				//+Увеличение накладной сверх заказа. (КнопкаИзменений)
				
				Описание = Новый Структура;
				Описание.Вставить("ОснованиеАкта",    СтрокаДействия.Основание);
				Описание.Вставить("АктОРасхождениях", АктОРасхождениях);
				Описание.Вставить("ИмяКоманды",       "Изменить");
				Описание.Вставить("СпособОтражения",  СпособОтраженияРасхождений);
				Описание.Вставить("ВариантДействия",
					Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПокупкаПерепоставленного);
				
				ВывестиИсправлениеПередачиТоваровХранителю(СтрокаДействия, Макет, Описание);
				
			ИначеЕсли РасхожденияКлиентСервер.ТипОснованияПередачаНаКомиссию(ТипОснованияАктаОРасхождении) Тогда
				
				//+Увеличение накладной сверх заказа. (КнопкаИзменений)
				
				Описание = Новый Структура;
				Описание.Вставить("ОснованиеАкта",    СтрокаДействия.Основание);
				Описание.Вставить("АктОРасхождениях", АктОРасхождениях);
				Описание.Вставить("ИмяКоманды",       "Изменить");
				Описание.Вставить("СпособОтражения",  СпособОтраженияРасхождений);
				Описание.Вставить("ВариантДействия",
					Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПокупкаПерепоставленного);
				
				ВывестиИсправлениеПередачиТоваровНаКомиссию(СтрокаДействия, Макет, Описание);
				
			Иначе
				
				// Увеличение возврата. (КнопкаИзменений)
				
				Описание = Новый Структура;
				Описание.Вставить("ОснованиеАкта",    СтрокаДействия.Основание);
				Описание.Вставить("АктОРасхождениях", АктОРасхождениях);
				Описание.Вставить("ИмяКоманды",       "Изменить");
				Описание.Вставить("СпособОтражения",  СпособОтраженияРасхождений);
				Описание.Вставить("ВариантДействия",
					Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПокупкаПерепоставленного);
				
				ВывестиИсправлениеОтгрузкаТоваровСХранения(СтрокаДействия, Макет, Описание);
				
			КонецЕсли;
			
		КонецЕсли;
			
	ИначеЕсли СпособОтраженияРасхождений = Перечисления.СпособыОтраженияРасхожденийАктПриемкиКлиента.ОформлениеКорректировкиКакИсправлениеПервичныхДокументов
		Или СпособОтраженияРасхождений = Перечисления.СпособыОтраженияРасхожденийАктПриемкиКлиента.ОформлениеКорректировкиПоСогласованию Тогда

		Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ВозвратПерепоставленного) <> Неопределено Тогда
			
			Если РасхожденияКлиентСервер.ТипОснованияРеализацияТоваровУслуг(ТипОснованияАктаОРасхождении) Тогда
			
				// +Документ "Корректировка реализации" по выявленным расхождениям  (КомандаГиперссылка)
				// +Если есть заявки на возврат, то оформление заявки на возврат перепоставленного (КомандаГиперссылка  )
				// +Если нет заявок на возврат , то оформление возврата перепоставленного. (КомандаГиперссылка  ).
				
				Описание = Новый Структура;
				Описание.Вставить("ОснованиеАкта", СтрокаДействия.Основание);
				Описание.Вставить("АктОРасхождениях", АктОРасхождениях);
				Описание.Вставить("ИмяКоманды", "Оформить");
				Описание.Вставить("ВариантДействия", Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ВозвратПерепоставленного);
				Описание.Вставить("СпособОтражения", СпособОтраженияРасхождений);
				
				Если СпособОтраженияРасхождений = Перечисления.СпособыОтраженияРасхожденийАктПриемкиКлиента.ОформлениеКорректировкиКакИсправлениеПервичныхДокументов Тогда
					ВывестиДокументКорректировкаРеализации(СтрокаДействия, Перечисления.ХозяйственныеОперации.ИсправлениеОшибок, Макет, Описание);
				Иначе
					ВывестиДокументКорректировкаРеализации(СтрокаДействия, Перечисления.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон, Макет, Описание);
				КонецЕсли;
				
				ТабличныйДокумент.НачатьГруппуСтрок();
				
				Описание = Новый Структура;
				Описание.Вставить("ОснованиеАкта", СтрокаДействия.Основание);
				Описание.Вставить("АктОРасхождениях", АктОРасхождениях);
				Описание.Вставить("ИмяКоманды", "Оформить");
				Описание.Вставить("ВариантДействия", Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ДопоставкаНеТребуется);
				Описание.Вставить("СпособОтражения", СпособОтраженияРасхождений);
				
				ВывестиДокументВозврата(СтрокаДействия, Макет, Описание);
				ТабличныйДокумент.ЗакончитьГруппуСтрок();
			
			КонецЕсли;
		
		КонецЕсли;
		
		Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ДопоставкаНеТребуется) <> Неопределено Тогда
			
			Если РасхожденияКлиентСервер.ТипОснованияРеализацияТоваровУслуг(ТипОснованияАктаОРасхождении) Тогда
			
				// +Документ "Корректировка реализации" по выявленным расхождениям (КомандаГиперссылка).
				
				Описание = Новый Структура;
				Описание.Вставить("ОснованиеАкта", СтрокаДействия.Основание);
				Описание.Вставить("АктОРасхождениях", АктОРасхождениях);
				Описание.Вставить("ИмяКоманды", "Оформить");
				Описание.Вставить("ВариантДействия", Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ДопоставкаНеТребуется);
				Описание.Вставить("СпособОтражения", СпособОтраженияРасхождений);
				
				Если СпособОтраженияРасхождений = Перечисления.СпособыОтраженияРасхожденийАктПриемкиКлиента.ОформлениеКорректировкиКакИсправлениеПервичныхДокументов Тогда
					ВывестиДокументКорректировкаРеализации(СтрокаДействия, Перечисления.ХозяйственныеОперации.ИсправлениеОшибок, Макет, Описание);
				Иначе
					ВывестиДокументКорректировкаРеализации(СтрокаДействия, Перечисления.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон, Макет, Описание);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПокупкаПерепоставленного) <> Неопределено Тогда
			
			Если РасхожденияКлиентСервер.ТипОснованияРеализацияТоваровУслуг(ТипОснованияАктаОРасхождении) Тогда
			
				// +Документ "Корректировка реализации" по выявленным расхождениям (КомандаГиперссылка).
				
				Описание = Новый Структура;
				Описание.Вставить("ОснованиеАкта", СтрокаДействия.Основание);
				Описание.Вставить("АктОРасхождениях", АктОРасхождениях);
				Описание.Вставить("ИмяКоманды", "Оформить");
				Описание.Вставить("ВариантДействия", Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПокупкаПерепоставленного);
				Описание.Вставить("СпособОтражения", СпособОтраженияРасхождений);
				
				Если СпособОтраженияРасхождений = Перечисления.СпособыОтраженияРасхожденийАктПриемкиКлиента.ОформлениеКорректировкиКакИсправлениеПервичныхДокументов Тогда
					ВывестиДокументКорректировкаРеализации(СтрокаДействия, Перечисления.ХозяйственныеОперации.ИсправлениеОшибок, Макет, Описание);
				Иначе
					ВывестиДокументКорректировкаРеализации(СтрокаДействия, Перечисления.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон, Макет, Описание);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ТребуетсяДопоставка) <> Неопределено Тогда
			
			Если РасхожденияКлиентСервер.ТипОснованияРеализацияТоваровУслуг(ТипОснованияАктаОРасхождении) Тогда
			
				// +Документ "Корректировка реализации" по выявленным расхождениям (КомандаГиперссылка)
				// +Оформление реализации на допоставку недопоставленного товара (КомандаГиперссылка).
				
				Описание = Новый Структура;
				Описание.Вставить("ОснованиеАкта", СтрокаДействия.Основание);
				Описание.Вставить("АктОРасхождениях", АктОРасхождениях);
				Описание.Вставить("ИмяКоманды", "Оформить");
				Описание.Вставить("ВариантДействия", Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ТребуетсяДопоставка);
				Описание.Вставить("СпособОтражения", СпособОтраженияРасхождений);
				
				Если СпособОтраженияРасхождений = Перечисления.СпособыОтраженияРасхожденийАктПриемкиКлиента.ОформлениеКорректировкиКакИсправлениеПервичныхДокументов Тогда
					ВывестиДокументКорректировкаРеализации(СтрокаДействия, Перечисления.ХозяйственныеОперации.ИсправлениеОшибок, Макет, Описание);
				Иначе
					ВывестиДокументКорректировкаРеализации(СтрокаДействия, Перечисления.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон, Макет, Описание);
				КонецЕсли;
				
				ТабличныйДокумент.НачатьГруппуСтрок();
				
				Описание = Новый Структура;
				Описание.Вставить("ОснованиеАкта", СтрокаДействия.Основание);
				Описание.Вставить("АктОРасхождениях", АктОРасхождениях);
				Описание.Вставить("ИмяКоманды", "Оформить");
				Описание.Вставить("ВариантДействия", Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ТребуетсяДопоставка);
				Описание.Вставить("СпособОтражения", СпособОтраженияРасхождений);
				
				ВывестиДокументРеализацияНаДопоставкуНедопоставленногоТовара(СтрокаДействия, Макет, Описание);
				ТабличныйДокумент.ЗакончитьГруппуСтрок();
			
			КонецЕсли;
			
		КонецЕсли;
			
	ИначеЕсли СпособОтраженияРасхождений = Перечисления.СпособыОтраженияРасхожденийАктПриемкиКлиента.ОформлениеКорректировокКакНовыеПервичныеДокументы Тогда
		
		Если СтрокаДействия.ЕстьОтражениеИзлишков Тогда
			
			Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ВозвратПерепоставленного) <> Неопределено Тогда
				
				Если РасхожденияКлиентСервер.ТипОснованияРеализацияТоваровУслуг(ТипОснованияАктаОРасхождении) Тогда
				
					// +Документ "Корректировка реализации" по реализации перепоставленных товаров (КомандаГиперссылка)
					// +Если есть заявки на возврат, то оформление заявки  на возврат перепоставленного (КомандаГиперссылка  )
					// +Если нет заявок на возврат , то оформление возврата перепоставленного. (КомандаГиперссылка  ).
					
					Описание = Новый Структура;
					Описание.Вставить("ОснованиеАкта", СтрокаДействия.Основание);
					Описание.Вставить("АктОРасхождениях", АктОРасхождениях);
					Описание.Вставить("ИмяКоманды", "Оформить");
					Описание.Вставить("ВариантДействия", Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ВозвратПерепоставленного);
					Описание.Вставить("СпособОтражения", СпособОтраженияРасхождений);
					
					ВывестиДокументКорректировкаРеализации(СтрокаДействия, Перечисления.ХозяйственныеОперации.РеализацияПерепоставленногоТовара, Макет, Описание);
					
					ТабличныйДокумент.НачатьГруппуСтрок();
					
					Описание = Новый Структура;
					Описание.Вставить("ОснованиеАкта", СтрокаДействия.Основание);
					Описание.Вставить("АктОРасхождениях", АктОРасхождениях);
					Описание.Вставить("ИмяКоманды", "Оформить");
					Описание.Вставить("ВариантДействия", Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ВозвратПерепоставленного);
					Описание.Вставить("СпособОтражения", СпособОтраженияРасхождений);
					
					ВывестиДокументВозврата(СтрокаДействия, Макет, Описание);
					ТабличныйДокумент.ЗакончитьГруппуСтрок();
				
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПокупкаПерепоставленного) <> Неопределено Тогда
				
				Если РасхожденияКлиентСервер.ТипОснованияРеализацияТоваровУслуг(ТипОснованияАктаОРасхождении) Тогда
				
					// +Документ "Корректировка реализации" по реализации перепоставленных товаров (КомандаГиперссылка).
					
					Описание = Новый Структура;
					Описание.Вставить("ОснованиеАкта", СтрокаДействия.Основание);
					Описание.Вставить("АктОРасхождениях", АктОРасхождениях);
					Описание.Вставить("ИмяКоманды", "Оформить");
					Описание.Вставить("ВариантДействия", Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПокупкаПерепоставленного);
					Описание.Вставить("СпособОтражения", СпособОтраженияРасхождений);
					
					ВывестиДокументКорректировкаРеализации(СтрокаДействия, Перечисления.ХозяйственныеОперации.РеализацияПерепоставленногоТовара, Макет, Описание);
				
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЕсли;
		
		Если СтрокаДействия.ЕстьОтражениеНедостач Тогда
			
			Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ДопоставкаНеТребуется) <> Неопределено Тогда
				
				Если ТипЗнч(АктОРасхождениях) = Тип("ДокументСсылка.АктОРасхожденияхПослеОтгрузки")
					И РасхожденияКлиентСервер.ТипОснованияРеализацияТоваровУслуг(ТипОснованияАктаОРасхождении) Тогда
					
					// +Оформление корректировки на возврат недопоставленного (КомандаГиперссылка)
					
					Описание = Новый Структура;
					Описание.Вставить("ОснованиеАкта", СтрокаДействия.Основание);
					Описание.Вставить("АктОРасхождениях", АктОРасхождениях);
					Описание.Вставить("ИмяКоманды", "Оформить");
					Описание.Вставить("ВариантДействия", Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ДопоставкаНеТребуется);
					Описание.Вставить("СпособОтражения", СпособОтраженияРасхождений);
					
					ВывестиДокументКорректировкаРеализации(СтрокаДействия, Перечисления.ХозяйственныеОперации.ВозвратНедопоставленногоТовара, Макет, Описание);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ТребуетсяДопоставка) <> Неопределено Тогда
				
				Если РасхожденияКлиентСервер.ТипОснованияРеализацияТоваровУслуг(ТипОснованияАктаОРасхождении) Тогда
				
					// +Оформление корректировки на возврат недопоставленного (КомандаГиперссылка)
					// +Оформление реализации на допоставку недопоставленного товара (КомандаГиперссылка).
					
					Описание = Новый Структура;
					Описание.Вставить("ОснованиеАкта", СтрокаДействия.Основание);
					Описание.Вставить("АктОРасхождениях", АктОРасхождениях);
					Описание.Вставить("ИмяКоманды", "Оформить");
					Описание.Вставить("ВариантДействия", Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ТребуетсяДопоставка);
					Описание.Вставить("СпособОтражения", СпособОтраженияРасхождений);
					
					ВывестиДокументКорректировкаРеализации(СтрокаДействия, Перечисления.ХозяйственныеОперации.ВозвратНедопоставленногоТовара, Макет, Описание);
					
					ТабличныйДокумент.НачатьГруппуСтрок();
					
					Описание = Новый Структура;
					Описание.Вставить("ОснованиеАкта", СтрокаДействия.Основание);
					Описание.Вставить("АктОРасхождениях", АктОРасхождениях);
					Описание.Вставить("ИмяКоманды", "Оформить");
					Описание.Вставить("ВариантДействия", Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ТребуетсяДопоставка);
					Описание.Вставить("СпособОтражения", СпособОтраженияРасхождений);
					
					ВывестиДокументРеализацияНаДопоставкуНедопоставленногоТовара(СтрокаДействия, Макет, Описание);
					ТабличныйДокумент.ЗакончитьГруппуСтрок();
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВывестиСтрокиДействийПоАктуПослеПеремещения(СтрокаДействия, Макет, ТипОснованияАктаОРасхождении, ПраваДоступаНаТаблицы)

	ИспользоватьИсправлениеДокументов = ПолучитьФункциональнуюОпцию("ИспользоватьИсправлениеДокументов");

	Если Не ИспользоватьИсправлениеДокументов
		И СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ТребуетсяДопоставка) <> Неопределено Тогда
			
			// Выводим перемещение, которое надо уменьшить.  (КнопкаИзменений)
			// Выводить команду на создание нового перемещения на доперемещение недоперемещенного. (КомандаГиперссылка  ).
			
			Описание = Новый Структура;
			Описание.Вставить("ОснованиеАкта", СтрокаДействия.Основание);
			Описание.Вставить("АктОРасхождениях", АктОРасхождениях);
			Описание.Вставить("ИмяКоманды", "Изменить");
			Описание.Вставить("ВариантДействия", Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ТребуетсяДопоставка);
			Описание.Вставить("СпособОтражения", СпособОтраженияРасхождений);
			
			ВывестиИсправлениеПеремещенияТоваров(
				СтрокаДействия,
				Макет,
				Описание);
				
				
			Описание = Новый Структура;
			Описание.Вставить("ОснованиеАкта", СтрокаДействия.Основание);
			Описание.Вставить("АктОРасхождениях", АктОРасхождениях);
			Описание.Вставить("ИмяКоманды", "Оформить");
			Описание.Вставить("ВариантДействия", Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ТребуетсяДопоставка);
			Описание.Вставить("СпособОтражения", СпособОтраженияРасхождений);
				
			ВывестиДокументПеремещениеТоваров(
				СтрокаДействия,
				Макет,
				Описание);
			
	КонецЕсли;
	
	Если ИспользоватьИсправлениеДокументов
		И СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ТребуетсяДопоставка) <> Неопределено Тогда
			
			// Выводим команду на создание корректировки перемещения, которое надо уменьшить.  (КнопкаИзменений)
			// Выводить команду на создание нового перемещения на доперемещение недоперемещенного. (КомандаГиперссылка  ).
			
			Описание = Новый Структура;
			Описание.Вставить("ОснованиеАкта", СтрокаДействия.Основание);
			Описание.Вставить("АктОРасхождениях", АктОРасхождениях);
			Описание.Вставить("ИмяКоманды", "Оформить");
			Описание.Вставить("ВариантДействия", Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ТребуетсяДопоставка);
			Описание.Вставить("СпособОтражения", СпособОтраженияРасхождений);
			
			ВывестиКорректировкуПеремещенияТоваров(
				СтрокаДействия,
				Макет,
				Описание);
				
				
			Описание = Новый Структура;
			Описание.Вставить("ОснованиеАкта", СтрокаДействия.Основание);
			Описание.Вставить("АктОРасхождениях", АктОРасхождениях);
			Описание.Вставить("ИмяКоманды", "Оформить");
			Описание.Вставить("ВариантДействия", Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ТребуетсяДопоставка);
			Описание.Вставить("СпособОтражения", СпособОтраженияРасхождений);
				
			ВывестиДокументПеремещениеТоваров(
				СтрокаДействия,
				Макет,
				Описание,
				Ложь,
				ИспользоватьИсправлениеДокументов);
			
	КонецЕсли;

	Если Не ИспользоватьИсправлениеДокументов
		И СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ДопоставкаНеТребуется) <> Неопределено Тогда
		
		// Если есть заказы:
		//  Выводим перемещение, которое надо уменьшить (КнопкаИзменений).
		//  Выводим заказ на перемещение, в котором строки подлежат отмене. (КомандаГиперссылка ).
		// Если нет заказов:
		//  Выводим перемещение, которое надо уменьшить (КнопкаИзменений).
		
		Описание = Новый Структура;
		Описание.Вставить("ОснованиеАкта", СтрокаДействия.Основание);
		Описание.Вставить("АктОРасхождениях", АктОРасхождениях);
		Описание.Вставить("ИмяКоманды", "Изменить");
		Описание.Вставить("ВариантДействия", Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ДопоставкаНеТребуется);
		Описание.Вставить("СпособОтражения", СпособОтраженияРасхождений);
		
		ВывестиИсправлениеПеремещенияТоваров(
			СтрокаДействия,
			Макет,
			Описание);
			
		Если СтрокаДействия.ПоЗаказам Тогда
			ТабличныйДокумент.НачатьГруппуСтрок();
			
			Описание = Новый Структура;
			Описание.Вставить("ОснованиеАкта", СтрокаДействия.Основание);
			Описание.Вставить("АктОРасхождениях", АктОРасхождениях);
			Описание.Вставить("ИмяКоманды", "Оформить");
			Описание.Вставить("ВариантДействия", Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ДопоставкаНеТребуется);
			Описание.Вставить("СпособОтражения", СпособОтраженияРасхождений);
			
			ВывестиДокументЗаказНаПеремещение(СтрокаДействия, Макет, Описание);
			ТабличныйДокумент.ЗакончитьГруппуСтрок();
		КонецЕсли;
			
	КонецЕсли;
	
	Если ИспользоватьИсправлениеДокументов
		И СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ДопоставкаНеТребуется) <> Неопределено Тогда
		
		// Если есть заказы:
		//  Выводим команду на создание корректировки перемещения, которое надо уменьшить. (КнопкаИзменений).
		//  Выводим заказ на перемещение, в котором строки подлежат отмене. (КомандаГиперссылка ).
		// Если нет заказов:
		//  Выводим команду на создание корректировки перемещения, которое надо уменьшить. (КнопкаИзменений).
		
		Описание = Новый Структура;
		Описание.Вставить("ОснованиеАкта", СтрокаДействия.Основание);
		Описание.Вставить("АктОРасхождениях", АктОРасхождениях);
		Описание.Вставить("ИмяКоманды", "Оформить");
		Описание.Вставить("ВариантДействия", Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ДопоставкаНеТребуется);
		Описание.Вставить("СпособОтражения", СпособОтраженияРасхождений);
		
		ВывестиКорректировкуПеремещенияТоваров(
			СтрокаДействия,
			Макет,
			Описание);
			
		Если СтрокаДействия.ПоЗаказам Тогда
			ТабличныйДокумент.НачатьГруппуСтрок();
			
			Описание = Новый Структура;
			Описание.Вставить("ОснованиеАкта", СтрокаДействия.Основание);
			Описание.Вставить("АктОРасхождениях", АктОРасхождениях);
			Описание.Вставить("ИмяКоманды", "Оформить");
			Описание.Вставить("ВариантДействия", Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ДопоставкаНеТребуется);
			Описание.Вставить("СпособОтражения", СпособОтраженияРасхождений);
			
			ВывестиДокументЗаказНаПеремещение(СтрокаДействия, Макет, Описание);
			ТабличныйДокумент.ЗакончитьГруппуСтрок();
		КонецЕсли;
			
	КонецЕсли;
		
	Если Не ИспользоватьИсправлениеДокументов
		И СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ВозвратПерепоставленного) <> Неопределено Тогда
		
		// Создание нового перемещения на товары сверх заказа (КомандаГиперссылка)
		// Оформление перемещения на возврат переперемещенного. (КомандаГиперссылка).
		
		Описание = Новый Структура;
		Описание.Вставить("ОснованиеАкта",    СтрокаДействия.Основание);
		Описание.Вставить("АктОРасхождениях", АктОРасхождениях);
		Описание.Вставить("ИмяКоманды",       "Изменить");
		Описание.Вставить("ВариантДействия",  Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ВозвратПерепоставленного);
		Описание.Вставить("СпособОтражения",  СпособОтраженияРасхождений);
		
		ВывестиИсправлениеПеремещенияТоваров(
			СтрокаДействия,
			Макет,
			Описание);
			
		Описание = Новый Структура;
		Описание.Вставить("ОснованиеАкта",        СтрокаДействия.Основание);
		Описание.Вставить("АктОРасхождениях",     АктОРасхождениях);
		Описание.Вставить("ИмяКоманды",           "Оформить");
		Описание.Вставить("ВариантДействия",      Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ВозвратПерепоставленного);
		Описание.Вставить("СпособОтражения",      СпособОтраженияРасхождений);
		Описание.Вставить("ПеремещениеНаВозврат", Истина);
			
		ВывестиДокументПеремещениеТоваров(СтрокаДействия, Макет, Описание, Истина);
		
	КонецЕсли;
	
	Если ИспользоватьИсправлениеДокументов
		И СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ВозвратПерепоставленного) <> Неопределено Тогда
		
		// Выводим команду на создание корректировки перемещения, которое надо увеличить (КнопкаИзменений).
		// Оформление перемещения на возврат переперемещенного. (КомандаГиперссылка).
		
		Описание = Новый Структура;
		Описание.Вставить("ОснованиеАкта",    СтрокаДействия.Основание);
		Описание.Вставить("АктОРасхождениях", АктОРасхождениях);
		Описание.Вставить("ИмяКоманды",       "Оформить");
		Описание.Вставить("ВариантДействия",  Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ВозвратПерепоставленного);
		Описание.Вставить("СпособОтражения",  СпособОтраженияРасхождений);
		
		ВывестиКорректировкуПеремещенияТоваров(
			СтрокаДействия,
			Макет,
			Описание);
			
		Описание = Новый Структура;
		Описание.Вставить("ОснованиеАкта",        СтрокаДействия.Основание);
		Описание.Вставить("АктОРасхождениях",     АктОРасхождениях);
		Описание.Вставить("ИмяКоманды",           "Оформить");
		Описание.Вставить("ВариантДействия",      Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ВозвратПерепоставленного);
		Описание.Вставить("СпособОтражения",      СпособОтраженияРасхождений);
		Описание.Вставить("ПеремещениеНаВозврат", Истина);
			
		ВывестиДокументПеремещениеТоваров(СтрокаДействия, Макет, Описание, Истина, ИспользоватьИсправлениеДокументов);
		
	КонецЕсли;

	Если Не ИспользоватьИсправлениеДокументов
		И СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПокупкаПерепоставленного) <> Неопределено Тогда
		
		//  Выводим перемещение, которое надо увеличить (КнопкаИзменений).
		
		Описание = Новый Структура;
		Описание.Вставить("ОснованиеАкта",        СтрокаДействия.Основание);
		Описание.Вставить("АктОРасхождениях",     АктОРасхождениях);
		Описание.Вставить("ИмяКоманды",           "Изменить");
		Описание.Вставить("ВариантДействия",      Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПокупкаПерепоставленного);
		Описание.Вставить("СпособОтражения",      СпособОтраженияРасхождений);
		
		ВывестиИсправлениеПеремещенияТоваров(СтрокаДействия, Макет, Описание);
		
	КонецЕсли;
	
	Если ИспользоватьИсправлениеДокументов
		И СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПокупкаПерепоставленного) <> Неопределено Тогда
		
		//  Выводим перемещение, которое надо увеличить (КнопкаИзменений).
		
		Описание = Новый Структура;
		Описание.Вставить("ОснованиеАкта",        СтрокаДействия.Основание);
		Описание.Вставить("АктОРасхождениях",     АктОРасхождениях);
		Описание.Вставить("ИмяКоманды",           "Оформить");
		Описание.Вставить("ВариантДействия",      Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПокупкаПерепоставленного);
		Описание.Вставить("СпособОтражения",      СпособОтраженияРасхождений);
		
		ВывестиКорректировкуПеремещенияТоваров(СтрокаДействия, Макет, Описание);
		
	КонецЕсли;
	
	Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.НедостачаНеПризнана) <> Неопределено Тогда
		
		Если ПраваДоступаНаТаблицы.ЧтениеСписаниеНедостачТоваров Тогда
			
			Описание = СтруктурыОписанияВыводимогоВОтчетДействия();
			
			Описание.ОснованиеАкта    = СтрокаДействия.Основание;
			Описание.АктОРасхождениях = АктОРасхождениях;
			Описание.ИмяКоманды       = "Оформить";
			Описание.ВариантДействия  = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.НедостачаНеПризнана;
			Описание.СпособОтражения  = СпособОтраженияРасхождений;
			
			ВывестиДокументСписаниеНедостачТоваровПеремещениеТоваров(СтрокаДействия, Макет, Описание);
			
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПерепоставленноеДарится) <> Неопределено Тогда
		
		Если ПраваДоступаНаТаблицы.ЧтениеОприходованиеИзлишковТоваров Тогда
			
			Описание = СтруктурыОписанияВыводимогоВОтчетДействия();
			
			Описание.ОснованиеАкта    = СтрокаДействия.Основание;
			Описание.АктОРасхождениях = АктОРасхождениях;
			Описание.ИмяКоманды       = "Оформить";
			Описание.ВариантДействия  = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПерепоставленноеДарится;
			Описание.СпособОтражения  = СпособОтраженияРасхождений;
			
			ВывестиДокументОприходованиеИзлишковПеремещениеТоваров(СтрокаДействия, Макет, Описание);
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВывестиСтрокиДействийПоАктуПослеПриемки(СтрокаДействия, Макет, ТипОснованияАктаОРасхождении, ПраваДоступаНаТаблицы)
	
	ЭтоАктОРасхождениях2_5_12 = СтрокаДействия.ЭтоАктОРасхождениях2_5_12;
	ИспользуетсяДокументПоступлениеТоваров = ПоступленияПоступленияНаСклад.Количество() > 0;
	ИспользоватьИсправлениеДокументов = ПолучитьФункциональнуюОпцию("ИспользоватьИсправлениеДокументов");
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ХозяйственнаяОперация", СтрокаДействия.Основание.Метаданные()) Тогда
		ОперацииРаздельнойЗакупки = ЗакупкиСервер.ХозяйственныеОперацииРаздельнойЗакупкиБезОтборов();
		ХозяйственнаяОперация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаДействия.Основание, "ХозяйственнаяОперация");
		ИспользуетсяРаздельнаяЗакупка = ОперацииРаздельнойЗакупки.Найти(ХозяйственнаяОперация) <> Неопределено;
	Иначе
		ИспользуетсяРаздельнаяЗакупка = Ложь;
	КонецЕсли;
	ВариантПриемкиТоваров = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаДействия.Основание, "ВариантПриемкиТоваров");
	ВариантПриемкиПоНакладным = (ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным);
	
	Если ТипОснованияАктаОРасхождении = Перечисления.ТипыОснованияАктаОРасхождении.ПриобретениеТоваровУслуг Тогда
	
		Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленное) <> Неопределено
			Или СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленноеИВернуть) <> Неопределено
			Или СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьНедостачу) <> Неопределено
			Или СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьНедостачуИОжидатьДопоставку) <> Неопределено Тогда
			
			Описание = СтруктурыОписанияВыводимогоВОтчетДействия();
			
			Описание.ОснованиеАкта    = СтрокаДействия.Основание;
			Описание.АктОРасхождениях = АктОРасхождениях;
			Описание.ВариантДействия  = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОтнестиПерепоставленноеНаПрочиеДоходы;
			Описание.СпособОтражения  = СпособОтраженияРасхождений;
			Описание.СтатусЭДО        = СтрокаДействия.СтатусЭДО;
			Описание.ДокументЭДО      = СтрокаДействия.ЭлектронныйДокумент;
			
			ВывестиЭлектронныйДокументПриобретениеТоваровУслуг(СтрокаДействия, Макет, Описание);
			
			Если СпособОтраженияРасхождений = Перечисления.СпособыОтраженияАктовОРасхожденияПослеПоступления.ИсправлениеПервичныхДокументов Тогда
				
				Описание.ИмяКоманды       = "Изменить";
				ВывестиИсправлениеПриобретениеТоваровУслуг(СтрокаДействия, Макет, Описание);
			
				Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленное) <> Неопределено
					Или СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленноеИВернуть) <> Неопределено Тогда
					ТабличныйДокумент.НачатьГруппуСтрок();
					
					Описание = СтруктурыОписанияВыводимогоВОтчетДействия();
				
					Описание.ОснованиеАкта    = СтрокаДействия.Основание;
					Описание.АктОРасхождениях = АктОРасхождениях;
					Описание.ИмяКоманды       = "Оформить";
					Описание.СпособОтражения  = СпособОтраженияРасхождений;
					Описание.СуммаНедопоставки = СтрокаДействия.СуммаНедопоставки;
				
					ВывестиДокументПоступленияНаСкладДляПерепроведения(СтрокаДействия, Макет, Описание);
				КонецЕсли;
				
			ИначеЕсли СпособОтраженияРасхождений = Перечисления.СпособыОтраженияАктовОРасхожденияПослеПоступления.ОформлениеКорректировокПоступления
				И ПраваДоступаНаТаблицы.ЧтениеКорректировкаПриобретения Тогда
				
				Описание.ИмяКоманды       = "Оформить";
				ВывестиДокументКорректировкаПриобретения(СтрокаДействия, Макет, Описание);
				
				Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленное) <> Неопределено
					Или СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленноеИВернуть) <> Неопределено Тогда
					ТабличныйДокумент.НачатьГруппуСтрок();
			
					Описание = СтруктурыОписанияВыводимогоВОтчетДействия();
				
					Описание.ОснованиеАкта    = СтрокаДействия.Основание;
					Описание.АктОРасхождениях = АктОРасхождениях;
					Описание.ИмяКоманды       = "Оформить";
					Описание.СпособОтражения  = СпособОтраженияРасхождений;
					Описание.СуммаНедопоставки = СтрокаДействия.СуммаНедопоставки;
				
					ВывестиДокументПоступленияНаСкладДляПерепроведения(СтрокаДействия, Макет, Описание, Истина);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленноеИВернуть) <> Неопределено
			И ПраваДоступаНаТаблицы.ЧтениеВозвратТоваровПоставщику Тогда
			
			Описание = СтруктурыОписанияВыводимогоВОтчетДействия();
			
			Описание.ОснованиеАкта    = СтрокаДействия.Основание;
			Описание.АктОРасхождениях = АктОРасхождениях;
			Описание.ИмяКоманды       = "Оформить";
			Описание.ВариантДействия  = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленноеИВернуть;
			Описание.СпособОтражения  = СпособОтраженияРасхождений;
			
			ВывестиДокументВозвратТоваровПоставщику(СтрокаДействия, Макет, Описание);
			
		КонецЕсли;
		
		Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьНедостачу) <> Неопределено Тогда
			
			Если СтрокаДействия.ПоЗаказам 
				И СпособОтраженияРасхождений = Перечисления.СпособыОтраженияАктовОРасхожденияПослеПоступления.ИсправлениеПервичныхДокументов
				И ПраваДоступаНаТаблицы.ЧтениеЗаказПоставщику Тогда
				
				ТабличныйДокумент.НачатьГруппуСтрок();
				
				Описание = СтруктурыОписанияВыводимогоВОтчетДействия();
				
				Описание.ОснованиеАкта    = СтрокаДействия.Основание;
				Описание.АктОРасхождениях = АктОРасхождениях;
				Описание.ИмяКоманды       = "Оформить";
				Описание.ВариантДействия  = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленное;
				Описание.СпособОтражения  = СпособОтраженияРасхождений;
				
				ВывестиИсправлениеДокументаЗаказПоставщику(СтрокаДействия, Макет, Описание);
				
				ТабличныйДокумент.ЗакончитьГруппуСтрок();
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьНедостачуИОжидатьДопоставку) <> Неопределено
			И ПраваДоступаНаТаблицы.ЧтениеПриобретениеТоваровУслуг Тогда
			
			Описание = СтруктурыОписанияВыводимогоВОтчетДействия();
			
			Описание.ОснованиеАкта    = СтрокаДействия.Основание;
			Описание.АктОРасхождениях = АктОРасхождениях;
			Описание.ИмяКоманды       = "Оформить";
			Описание.ВариантДействия  = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленное;
			Описание.СпособОтражения  = СпособОтраженияРасхождений;
			
			ВывестиДокументДопоставкиПоПоступлению(СтрокаДействия, Макет, Описание);
			
		КонецЕсли;
		
		Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьНедостачуИОжидатьДопоставку) <> Неопределено
			И ПраваДоступаНаТаблицы.ЧтениеПоступленияТоваровНаСклад
			И ИспользуетсяРаздельнаяЗакупка
			И Не ВариантПриемкиПоНакладным Тогда
			
			Описание = СтруктурыОписанияВыводимогоВОтчетДействия();
			
			Описание.ОснованиеАкта    = СтрокаДействия.Основание;
			Описание.АктОРасхождениях = АктОРасхождениях;
			Описание.ИмяКоманды       = "Оформить";
			Описание.ВариантДействия  = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленное;
			Описание.СпособОтражения  = СпособОтраженияРасхождений;
			
			ВывестиДокументДопоставкиПоПоступлениюНаСклад(СтрокаДействия, Макет, Описание);
			
		КонецЕсли;
		
		Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОжидатьДопоставкуБезОформления) <> Неопределено
			И ПраваДоступаНаТаблицы.ЧтениеПоступленияТоваровНаСклад
			И ИспользуетсяРаздельнаяЗакупка
			И Не ВариантПриемкиПоНакладным Тогда
			
			Описание = СтруктурыОписанияВыводимогоВОтчетДействия();
			
			Описание.ОснованиеАкта    = СтрокаДействия.Основание;
			Описание.АктОРасхождениях = АктОРасхождениях;
			Описание.ИмяКоманды       = "Оформить";
			Описание.ВариантДействия  = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленное;
			Описание.СпособОтражения  = СпособОтраженияРасхождений;
			
			ВывестиДокументДопоставкиПоПоступлениюНаСклад(СтрокаДействия, Макет, Описание);
			
		КонецЕсли;
		
		Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ВернутьПерепоставленноеБезОформления) <> Неопределено
			И ПраваДоступаНаТаблицы.ЧтениеПоступленияТоваровНаСклад
			И ИспользуетсяДокументПоступлениеТоваров
			И СпособОтраженияРасхождений = Перечисления.СпособыОтраженияАктовОРасхожденияПослеПоступления.ИсправлениеПервичныхДокументов 
			И Не ИспользуетсяРаздельнаяЗакупка Тогда
				
			ТабличныйДокумент.НачатьГруппуСтрок();
			
			Описание = СтруктурыОписанияВыводимогоВОтчетДействия();
			
			Описание.ОснованиеАкта    = СтрокаДействия.Основание;
			Описание.АктОРасхождениях = АктОРасхождениях;
			Описание.ИмяКоманды       = "Изменить";
			Описание.ВариантДействия  = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ВернутьПерепоставленноеБезОформления;
			Описание.СпособОтражения  = СпособОтраженияРасхождений;
			
			ВывестиИзменениеДокументаПоступлениеТоваров(СтрокаДействия, Макет, Описание);
				
		КонецЕсли;
		
		Если (СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ВернутьПерепоставленноеБезОформления) <> Неопределено
				Или СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОтнестиПерепоставленноеНаПрочиеДоходы) <> Неопределено)
			И ПраваДоступаНаТаблицы.ЧтениеПоступленияТоваровНаСклад
			И ИспользуетсяДокументПоступлениеТоваров
			И СпособОтраженияРасхождений = Перечисления.СпособыОтраженияАктовОРасхожденияПослеПоступления.ОформлениеКорректировокПоступления
			И ИспользоватьИсправлениеДокументов 
			И (Не ИспользуетсяРаздельнаяЗакупка 
				Или ЭтоАктОРасхождениях2_5_12) Тогда
				
			ТабличныйДокумент.НачатьГруппуСтрок();
			
			Описание = СтруктурыОписанияВыводимогоВОтчетДействия();
			
			Описание.ОснованиеАкта    = СтрокаДействия.Основание;
			Описание.АктОРасхождениях = АктОРасхождениях;
			Описание.ИмяКоманды       = "Оформить";
			Описание.ВариантДействия  = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ВернутьПерепоставленноеБезОформления;
			Описание.СпособОтражения  = СпособОтраженияРасхождений;
			
			ВывестиКорректировкуДокументаПоступлениеТоваров(СтрокаДействия, Макет, Описание);
				
		КонецЕсли;
		
		Если (СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОтнестиНедостачуНаПрочиеРасходы) <> Неопределено
				Или СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОтнестиПерепоставленноеНаПрочиеДоходы) <> Неопределено)
			И ПраваДоступаНаТаблицы.ЧтениеСписаниеРасхожденийПоступлениеПриобретение
			И ИспользуетсяРаздельнаяЗакупка 
			И Не ЭтоАктОРасхождениях2_5_12 Тогда
				
			ТабличныйДокумент.НачатьГруппуСтрок();
			
			Описание = СтруктурыОписанияВыводимогоВОтчетДействия();
			
			Описание.ОснованиеАкта    = СтрокаДействия.Основание;
			Описание.АктОРасхождениях = АктОРасхождениях;
			Описание.ИмяКоманды       = "Оформить";
			Описание.СпособОтражения  = СпособОтраженияРасхождений;
			Описание.СуммаНедопоставки = СтрокаДействия.СуммаНедопоставки;
			
			ВывестиСписаниеРасхожденийПоступлениеПриобретениеТоваров(СтрокаДействия, Макет, Описание);
				
		КонецЕсли;          
		
		Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОтнестиНедостачуНаПрочиеРасходы) <> Неопределено
			И ПраваДоступаНаТаблицы.ЧтениеПретензий
			И ПраваДоступаНаТаблицы.ЧтениеКорректировкаЗадолженности
			И ИспользуетсяРаздельнаяЗакупка
			И СпособОтраженияРасхождений = Перечисления.СпособыОтраженияАктовОРасхожденияПослеПоступления.ОформлениеКорректировокПоступления 
			И СтрокаДействия.ПоВинеСтороннейКомпании Тогда
			
			Описание = СтруктурыОписанияВыводимогоВОтчетДействия();
			
			Описание.ОснованиеАкта    = СтрокаДействия.Основание;
			Описание.АктОРасхождениях = АктОРасхождениях;
			Описание.ИмяКоманды       = "Создать";
			Описание.СпособОтражения  = СпособОтраженияРасхождений;
			Описание.СуммаНедопоставки = СтрокаДействия.СуммаНедопоставки;

			ВывестиПретензию(СтрокаДействия, Макет, Описание);  
			
			Если ПраваДоступаНаТаблицы.ДобавлениеСписаниеЗадолженности Тогда
				Описание.ОснованиеАкта    = СтрокаДействия.Основание;
				Описание.АктОРасхождениях = АктОРасхождениях;
				Описание.ИмяКоманды       = "Оформить";
				Описание.СпособОтражения  = СпособОтраженияРасхождений;

				ВывестиКорректировкуЗадолженности(СтрокаДействия, Макет, Описание);
			Иначе
				ОбластьПустаяСтрока = Макет.ПолучитьОбласть("ПустаяСтрока");
				ТабличныйДокумент.Вывести(ОбластьПустаяСтрока);
				
				ВывестиОшибку(НСтр("ru = 'Документ ""Корректировка задолженности"" недоступен для оформления. Возможно нет необходимых прав.'"), Макет);
			КонецЕсли;
			
		КонецЕсли;
	ИначеЕсли ТипОснованияАктаОРасхождении = Перечисления.ТипыОснованияАктаОРасхождении.ПриемкаТоваровНаХранение
		Тогда
		
		Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленное) <> Неопределено
			Или СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленноеИВернуть) <> Неопределено
			Или СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьНедостачу) <> Неопределено
			Или СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьНедостачуИОжидатьДопоставку) <> Неопределено Тогда
			
			Описание = СтруктурыОписанияВыводимогоВОтчетДействия();
			
			Описание.ОснованиеАкта    = СтрокаДействия.Основание;
			Описание.АктОРасхождениях = АктОРасхождениях;
			Описание.ВариантДействия  = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОтнестиПерепоставленноеНаПрочиеДоходы;
			Описание.СпособОтражения  = СпособОтраженияРасхождений;
			Описание.ИмяКоманды       = "Изменить";
			
			ВывестиИсправлениеПриемкаТоваровНахранение(СтрокаДействия, Макет, Описание);
			
		КонецЕсли;
		
		Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленноеИВернуть) <> Неопределено
			И ПраваДоступаНаТаблицы.ЧтениеОтгрузкаТоваровСХранения Тогда
			
			Описание = СтруктурыОписанияВыводимогоВОтчетДействия();
			
			Описание.ОснованиеАкта    = СтрокаДействия.Основание;
			Описание.АктОРасхождениях = АктОРасхождениях;
			Описание.ИмяКоманды       = "Оформить";
			Описание.ВариантДействия  = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленноеИВернуть;
			Описание.СпособОтражения  = СпособОтраженияРасхождений;
			
			СформироватьДокументыОтгрузкиТоваровСХранения(СтрокаДействия, Макет, ОформляемыеДокументыПоАкту, Описание);
			
		КонецЕсли;
		
		Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьНедостачу) <> Неопределено Тогда
			
			Если СтрокаДействия.ПоЗаказам
				И СпособОтраженияРасхождений = Перечисления.СпособыОтраженияАктовОРасхожденияПослеПоступления.ИсправлениеПервичныхДокументов
				И (ПраваДоступаНаТаблицы.ЧтениеЗаказПоставщику
					Или Ложь) Тогда
				
				ТабличныйДокумент.НачатьГруппуСтрок();
				
				Описание = СтруктурыОписанияВыводимогоВОтчетДействия();
				
				Описание.ОснованиеАкта    = СтрокаДействия.Основание;
				Описание.АктОРасхождениях = АктОРасхождениях;
				Описание.ИмяКоманды       = "Оформить";
				Описание.ВариантДействия  = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленное;
				Описание.СпособОтражения  = СпособОтраженияРасхождений;
				
				ВывестиИсправлениеДокументаЗаказПоставщику(СтрокаДействия, Макет, Описание);
				
				ТабличныйДокумент.ЗакончитьГруппуСтрок();
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьНедостачуИОжидатьДопоставку) <> Неопределено
			И ПраваДоступаНаТаблицы.ЧтениеПриемкаТоваровНаХранение Тогда
			
			Описание = СтруктурыОписанияВыводимогоВОтчетДействия();
			
			Описание.ОснованиеАкта    = СтрокаДействия.Основание;
			Описание.АктОРасхождениях = АктОРасхождениях;
			Описание.ИмяКоманды       = "Оформить";
			Описание.ВариантДействия  = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленное;
			Описание.СпособОтражения  = СпособОтраженияРасхождений;
			
			ВывестиДокументДопоставкиПоПриемкеТоваровНахранение(СтрокаДействия, Макет, Описание);
			
		КонецЕсли;
		
	ИначеЕсли РасхожденияКлиентСервер.ТипОснованияПоступлениеТоваровОтХранителя(ТипОснованияАктаОРасхождении) Тогда
		
		Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленное) <> Неопределено
			Или СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленноеИВернуть) <> Неопределено
			Или СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьНедостачу) <> Неопределено
			Или СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьНедостачуИОжидатьДопоставку) <> Неопределено Тогда
			
			Описание = СтруктурыОписанияВыводимогоВОтчетДействия();
			
			Описание.ОснованиеАкта    = СтрокаДействия.Основание;
			Описание.АктОРасхождениях = АктОРасхождениях;
			Описание.ВариантДействия  = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОтнестиПерепоставленноеНаПрочиеДоходы;
			Описание.СпособОтражения  = СпособОтраженияРасхождений;
			Описание.ИмяКоманды       = "Изменить";
			ВывестиИсправлениеВозвратТоваровОтХранителя(СтрокаДействия, Макет, Описание);
			
		КонецЕсли;
		Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленноеИВернуть) <> Неопределено Тогда
			
			Описание = СтруктурыОписанияВыводимогоВОтчетДействия();
			
			Описание.ОснованиеАкта    = СтрокаДействия.Основание;
			Описание.АктОРасхождениях = АктОРасхождениях;
			Описание.ВариантДействия  = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленноеИВернуть;
			Описание.СпособОтражения  = СпособОтраженияРасхождений;
			Описание.ИмяКоманды       = "Оформить";
			ВывестиДокументПередачаТоваровХранителю(СтрокаДействия, Макет, Описание);
			
		КонецЕсли;
		
		Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьНедостачу) <> Неопределено Тогда
			
			Если СтрокаДействия.ПоЗаказам Тогда
				
				Описание = СтруктурыОписанияВыводимогоВОтчетДействия();
				
				Описание.ОснованиеАкта    = СтрокаДействия.Основание;
				Описание.АктОРасхождениях = АктОРасхождениях;
				Описание.ИмяКоманды       = "Оформить";
				Описание.ВариантДействия  = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленноеИВернуть;
				Описание.СпособОтражения  = СпособОтраженияРасхождений;
				
				ВывестиИсправлениеЗаявкаНаВозвратТоваров(СтрокаДействия, Макет, Описание, ТипОснованияАктаОРасхождении);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьНедостачуИОжидатьДопоставку) <> Неопределено Тогда
			
			Описание = СтруктурыОписанияВыводимогоВОтчетДействия();
			
			Описание.ОснованиеАкта    = СтрокаДействия.Основание;
			Описание.АктОРасхождениях = АктОРасхождениях;
			Описание.ИмяКоманды       = "Оформить";
			Описание.ВариантДействия  = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьНедостачуИОжидатьДопоставку;
			Описание.СпособОтражения  = СпособОтраженияРасхождений;
			
			ВывестиДокументДоВозвратаПоПоступлениюОтХранителя(СтрокаДействия, Макет, Описание);
			
		КонецЕсли;
		
	ИначеЕсли ТипОснованияАктаОРасхождении = Перечисления.ТипыОснованияАктаОРасхождении.ВозвратОтКомиссионера Тогда
		
		Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленное) <> Неопределено
			Или СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленноеИВернуть) <> Неопределено
			Или СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьНедостачу) <> Неопределено
			Или СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьНедостачуИОжидатьДопоставку) <> Неопределено Тогда
			
			Описание = СтруктурыОписанияВыводимогоВОтчетДействия();
			
			Описание.ОснованиеАкта    = СтрокаДействия.Основание;
			Описание.АктОРасхождениях = АктОРасхождениях;
			Описание.ВариантДействия  = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОтнестиПерепоставленноеНаПрочиеДоходы;
			Описание.СпособОтражения  = СпособОтраженияРасхождений;
			Описание.ИмяКоманды       = "Изменить";
			ВывестиИсправлениеВозвратОтКомиссионера(СтрокаДействия, Макет, Описание);
			
			Описание = СтруктурыОписанияВыводимогоВОтчетДействия();
			
			Описание.ОснованиеАкта    = СтрокаДействия.Основание;
			Описание.АктОРасхождениях = АктОРасхождениях;
			Описание.ВариантДействия  = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленноеИВернуть;
			Описание.СпособОтражения  = СпособОтраженияРасхождений;
			Описание.ИмяКоманды       = "Оформить";
			ВывестиДокументПередачаТоваровКомиссионеру(СтрокаДействия, Макет, Описание);
			
		КонецЕсли;
		
		Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьНедостачу) <> Неопределено Тогда
			
			Если СтрокаДействия.ПоЗаказам Тогда
				
				Описание = СтруктурыОписанияВыводимогоВОтчетДействия();
				
				Описание.ОснованиеАкта    = СтрокаДействия.Основание;
				Описание.АктОРасхождениях = АктОРасхождениях;
				Описание.ИмяКоманды       = "Оформить";
				Описание.ВариантДействия  = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленноеИВернуть;
				Описание.СпособОтражения  = СпособОтраженияРасхождений;
				
				ВывестиИсправлениеЗаявкаНаВозвратОтКомиссионера(СтрокаДействия, Макет, Описание);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьНедостачуИОжидатьДопоставку) <> Неопределено Тогда
			
			Описание = СтруктурыОписанияВыводимогоВОтчетДействия();
			
			Описание.ОснованиеАкта    = СтрокаДействия.Основание;
			Описание.АктОРасхождениях = АктОРасхождениях;
			Описание.ИмяКоманды       = "Оформить";
			Описание.ВариантДействия  = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьНедостачуИОжидатьДопоставку;
			Описание.СпособОтражения  = СпособОтраженияРасхождений;
			
			ВывестиДокументДоВозвратаПоПоступлениюОтКомиссионера(СтрокаДействия, Макет, Описание);
			
		КонецЕсли;
		
	Иначе
		
		Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленное) <> Неопределено
			Или СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленноеИВернуть) <> Неопределено
			Или СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьНедостачу) <> Неопределено
			Или СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьНедостачуИОжидатьДопоставку) <> Неопределено Тогда
			
			Описание = СтруктурыОписанияВыводимогоВОтчетДействия();
			
			Описание.ОснованиеАкта    = СтрокаДействия.Основание;
			Описание.АктОРасхождениях = АктОРасхождениях;
			Описание.ВариантДействия  = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОтнестиПерепоставленноеНаПрочиеДоходы;
			Описание.СпособОтражения  = СпособОтраженияРасхождений;
			Описание.СтатусЭДО        = СтрокаДействия.СтатусЭДО;
			Описание.ДокументЭДО      = СтрокаДействия.ЭлектронныйДокумент;
			
			ВывестиЭлектронныйДокументВозвратТоваровОтКлиента(СтрокаДействия, Макет, Описание);
			
			ВывестиИсправлениеВозвратТоваровОтКлиента(СтрокаДействия, Макет, Описание);
			
		КонецЕсли;
		
		Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленноеИВернуть) <> Неопределено Тогда
			
			Описание = СтруктурыОписанияВыводимогоВОтчетДействия();
			
			Описание.ОснованиеАкта    = СтрокаДействия.Основание;
			Описание.АктОРасхождениях = АктОРасхождениях;
			Описание.ИмяКоманды       = "Оформить";
			Описание.ВариантДействия  = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленноеИВернуть;
			Описание.СпособОтражения  = СпособОтраженияРасхождений;
			
			ВывестиДокументРеализацииПоВозвратуОтКлиента(СтрокаДействия, Макет, Описание);
			
		КонецЕсли;
		
		Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьНедостачу) <> Неопределено Тогда
			
			Если СтрокаДействия.ПоЗаказам Тогда
				
				Описание = СтруктурыОписанияВыводимогоВОтчетДействия();
				
				Описание.ОснованиеАкта    = СтрокаДействия.Основание;
				Описание.АктОРасхождениях = АктОРасхождениях;
				Описание.ИмяКоманды       = "Оформить";
				Описание.ВариантДействия  = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленноеИВернуть;
				Описание.СпособОтражения  = СпособОтраженияРасхождений;
				
				ВывестиИсправлениеЗаявкаНаВозвратТоваров(СтрокаДействия, Макет, Описание);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьНедостачуИОжидатьДопоставку) <> Неопределено Тогда
			
			Описание = СтруктурыОписанияВыводимогоВОтчетДействия();
			
			Описание.ОснованиеАкта    = СтрокаДействия.Основание;
			Описание.АктОРасхождениях = АктОРасхождениях;
			Описание.ИмяКоманды       = "Оформить";
			Описание.ВариантДействия  = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьНедостачуИОжидатьДопоставку;
			Описание.СпособОтражения  = СпособОтраженияРасхождений;
			
			ВывестиДокументДоВозвратаПоВозвратуОтКлиента(СтрокаДействия, Макет, Описание);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОтнестиНедостачуНаПрочиеРасходы) <> Неопределено
		И (НЕ ИспользуетсяРаздельнаяЗакупка 
			Или ЭтоАктОРасхождениях2_5_12) Тогда
		
		Если ПраваДоступаНаТаблицы.ЧтениеСписаниеНедостачТоваров Тогда
			
			Описание = СтруктурыОписанияВыводимогоВОтчетДействия();
			
			Описание.ОснованиеАкта    = СтрокаДействия.Основание;
			Описание.АктОРасхождениях = АктОРасхождениях;
			Описание.ИмяКоманды       = "Оформить";
			Описание.ВариантДействия  = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОтнестиНедостачуНаПрочиеРасходы;
			Описание.СпособОтражения  = СпособОтраженияРасхождений;
			
			ВывестиДокументСписаниеНедостачТоваров(СтрокаДействия, Макет, Описание);
			
		КонецЕсли;
		
		Если СтрокаДействия.ПоВинеСтороннейКомпании
			И ПраваДоступаНаТаблицы.ЧтениеСписаниеЗадолженности Тогда
			
			Описание = СтруктурыОписанияВыводимогоВОтчетДействия();
			
			Описание.ОснованиеАкта    = СтрокаДействия.Основание;
			Описание.АктОРасхождениях = АктОРасхождениях;
			Описание.ИмяКоманды       = "Оформить";
			Описание.ВариантДействия  = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОтнестиНедостачуНаПрочиеРасходы;
			Описание.СпособОтражения  = СпособОтраженияРасхождений;
			
			ВывестиДокументСписаниеЗадолженности(СтрокаДействия, Макет, Описание, ПраваДоступаНаТаблицы);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОтнестиПерепоставленноеНаПрочиеДоходы) <> Неопределено 
		И ПраваДоступаНаТаблицы.ЧтениеОприходованиеИзлишковТоваров
		И Не (ТипОснованияАктаОРасхождении = Перечисления.ТипыОснованияАктаОРасхождении.ПриобретениеТоваровУслуг
				И ИспользуетсяРаздельнаяЗакупка
				И Не ЭтоАктОРасхождениях2_5_12) Тогда
		
		Описание = СтруктурыОписанияВыводимогоВОтчетДействия();
		
		Описание.ОснованиеАкта    = СтрокаДействия.Основание;
		Описание.АктОРасхождениях = АктОРасхождениях;
		Описание.ИмяКоманды       = "Оформить";
		Описание.ВариантДействия  = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОтнестиПерепоставленноеНаПрочиеДоходы;
		Описание.СпособОтражения  = СпособОтраженияРасхождений;
		
		ВывестиДокументОприходованиеИзлишков =
			ТипОснованияАктаОРасхождении <> Перечисления.ТипыОснованияАктаОРасхождении.ПриемкаТоваровНаХранение;
		
		Если ВывестиДокументОприходованиеИзлишков Тогда
			ВывестиДокументОприходованиеИзлишков(СтрокаДействия, Макет, Описание);
		Иначе
			СформироватьДокументыОприходованияИзлишков(СтрокаДействия, Макет, Описание);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДокументКорректировкаРеализации(СтрокаДействия, ХозяйственнаяОперация, Макет, Описание)
	
	Если НеВыводитьВОтчет("ВывестиДокументКорректировкаРеализации", СтрокаДействия.Основание, ХозяйственнаяОперация) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Реализация", СтрокаДействия.Основание);
	СтруктураПоиска.Вставить("ХозяйственнаяОперация",ХозяйственнаяОперация);
	
	ОформленныеДокументы = РеализацииКорректировки.НайтиСтроки(СтруктураПоиска);
	
	Если ОформленныеДокументы.Количество() = 0 Тогда
		
		СтруктураКОформлению = Новый Структура(
			"Реализация, ХозяйственнаяОперация",
			Документы.КорректировкаРеализации.ПустаяСсылка(),
			ХозяйственнаяОперация);
		
		МассивОформленныхДокументов.Добавить(СтруктураКОформлению);
		
	Иначе
		
		Для Каждого ОформленныйДокумент Из ОформленныеДокументы Цикл
			
			МассивОформленныхДокументов.Добавить(ОформленныйДокумент.Корректировка);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВывестиДокументКОформлению(
		"КорректировкаРеализации",
		1,
		Макет,
		МассивОформленныхДокументов,
		ХозяйственнаяОперация,,
		Описание);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиЭлектронныйДокументПриобретениеТоваровУслуг(СтрокаДействия, Макет, Описание)
	
	Если НеВыводитьВОтчет("ВВывестиЭлектронныйДокументПриобретениеТоваровУслуг", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаДействия.ЭлектронныйДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;
	МассивОформленныхДокументов.Добавить(Описание.ДокументЭДО);
	
	ТипДокумента = "";
	
	Если Описание.СтатусЭДО = "ЭДОНеНастроен"
		Или Описание.СтатусЭДО = "НеНачат"
		Или Описание.СтатусЭДО = "Ошибка" Тогда
			
		Возврат;	
		
	Иначе
		
		Если Описание.СпособОтражения =	Перечисления.СпособыОтраженияАктовОРасхожденияПослеПоступления.ОформлениеКорректировокПоступления Тогда
			
			ТипДокумента        = "ЭлектронныйДокументПодтверждение";
			Описание.ИмяКоманды = "Подтвердить";
			
		Иначе
		
			ТипДокумента        = "ЭлектронныйДокументОтклонение";
			Описание.ИмяКоманды = "Отклонить";
		
		КонецЕсли;
		
	КонецЕсли;
	
	ВывестиДокументКОформлению(
		ТипДокумента,
		1,
		Макет,
		МассивОформленныхДокументов,,Ложь,
		Описание);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиЭлектронныйДокументВозвратТоваровОтКлиента(СтрокаДействия, Макет, Описание)
	
	Если НеВыводитьВОтчет("ВывестиЭлектронныйДокументВозвратТоваровОтКлиента", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаДействия.ЭлектронныйДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;
	МассивОформленныхДокументов.Добавить(Описание.ДокументЭДО);
	
	ТипДокумента = "";
	
	Если Описание.СтатусЭДО = "ЭДОНеНастроен"
		Или Описание.СтатусЭДО = "НеНачат"
		Или Описание.СтатусЭДО = "Ошибка" Тогда
			
		Возврат;

	КонецЕсли;
	
	ТипДокумента        = "ЭлектронныйДокументОтклонение";
	Описание.ИмяКоманды = "Отклонить";
	
	ВывестиДокументКОформлению(
		ТипДокумента,
		1,
		Макет,
		МассивОформленныхДокументов,,Ложь,
		Описание);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДокументКорректировкаПриобретения(СтрокаДействия, Макет, Описание)

	Если НеВыводитьВОтчет("ВывестиДокументКорректировкаПриобретения", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;

	ОформленныеДокументы = ПоступленияКорректировки.НайтиСтроки(Новый Структура("Основание", СтрокаДействия.Основание));
	
	Если ОформленныеДокументы.Количество() = 0 Тогда
		
		МассивОформленныхДокументов.Добавить(Документы.КорректировкаПриобретения.ПустаяСсылка());
		
	Иначе
		
		Для Каждого ОформленныйДокумент Из ОформленныеДокументы Цикл
			
			МассивОформленныхДокументов.Добавить(ОформленныйДокумент.Корректировка);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВывестиДокументКОформлению(
		"КорректировкаПриобретения",
		1,
		Макет,
		МассивОформленныхДокументов,,,
		Описание);


КонецПроцедуры

&НаСервере
Процедура ВывестиИсправлениеРеализацииТоваровУслуг(СтрокаДействия, Макет, Описание)
	
	Если НеВыводитьВОтчет("ВывестиИсправлениеРеализацииТоваровУслуг", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;
	МассивОформленныхДокументов.Добавить(СтрокаДействия.Основание);
	
	ВывестиДокументКОформлению("ИсправлениеРеализации", 1, Макет, МассивОформленныхДокументов, , Ложь, Описание);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиИсправлениеПриобретениеТоваровУслуг(СтрокаДействия, Макет, Описание)
	
	Если НеВыводитьВОтчет("ВывестиИсправлениеПриобретениеТоваровУслуг", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;
	МассивОформленныхДокументов.Добавить(СтрокаДействия.Основание);
	
	ВывестиДокументКОформлению("ИсправлениеПоступления", 1, Макет, МассивОформленныхДокументов, , Ложь, Описание);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиИсправлениеВозвратаТоваровПоставщику(СтрокаДействия, Макет, Описание)
	
	Если НеВыводитьВОтчет("ВывестиИсправлениеВозвратаТоваровПоставщику", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;
	МассивОформленныхДокументов.Добавить(СтрокаДействия.Основание);
	
	ВывестиДокументКОформлению("ИсправлениеВозвратаТоваровПоставщику", 1, Макет, МассивОформленныхДокументов, , Ложь, Описание);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиИсправлениеВозвратТоваровОтКлиента(СтрокаДействия, Макет, Описание)

	Если НеВыводитьВОтчет("ВывестиИсправлениеВозвратаТоваровОтКлиента", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;
	МассивОформленныхДокументов.Добавить(СтрокаДействия.Основание);
	
	Описание.ИмяКоманды = "Изменить";
	ВывестиДокументКОформлению("ИсправлениеВозвратаТоваровОтКлиента", 1, Макет, МассивОформленныхДокументов, , Ложь, Описание);

КонецПроцедуры

&НаСервере
Процедура ВывестиИсправлениеПеремещенияТоваров(СтрокаДействия, Макет, Описание)
	
	Если НеВыводитьВОтчет("ВывестиИсправлениеПеремещенияТоваров", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;
	МассивОформленныхДокументов.Добавить(СтрокаДействия.Основание);
	
	ВывестиДокументКОформлению("ИсправлениеПеремещенияТоваров", 1, Макет, МассивОформленныхДокументов, , Ложь, Описание);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиКорректировкуПеремещенияТоваров(СтрокаДействия, Макет, Описание)
	
	Если НеВыводитьВОтчет("ВывестиДокументПеремещениеТоваров", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;
	МассивОформленныхДокументов.Добавить(Документы.ПеремещениеТоваров.ПустаяСсылка());
	
	ПараметрыПоиска = Новый Структура("Основание, Исправление", СтрокаДействия.Основание, Истина);
	ОформленныеДокументы = ПеремещенияПоПеремещениям.НайтиСтроки(ПараметрыПоиска);
	
	Если ОформленныеДокументы.Количество() = 0 Тогда
		
		ПараметрыОформленияДокументов = Новый Структура();
		ПараметрыОформленияДокументов.Вставить("ПеремещениеТоваров", Документы.ПеремещениеТоваров.ПустаяСсылка());
		ПараметрыОформленияДокументов.Вставить("ЭтоПереперемещение", Ложь);
		ПараметрыОформленияДокументов.Вставить("Исправление", Истина);
		ПараметрыОформленияДокументов.Вставить("ИсправляемыйДокумент", СтрокаДействия.Основание);
		
		МассивОформленныхДокументов.Добавить(ПараметрыОформленияДокументов);
		
	Иначе
		
		Для Каждого ОформленныйДокумент Из ОформленныеДокументы Цикл
			
			МассивОформленныхДокументов.Добавить(ОформленныйДокумент.ПеремещениеТоваров);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВывестиДокументКОформлению(
		"КорректировкаПеремещенияТоваров",
		1,
		Макет,
		МассивОформленныхДокументов,,
		,
		Описание);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДокументВозврата(СтрокаДействия, Макет, Описание)
	
	Если НеВыводитьВОтчет("ВывестиДокументВозврата", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;

	ОформленныеДокументы = РеализацииВозвраты.НайтиСтроки(Новый Структура("Реализация", СтрокаДействия.Основание));
	
	Если ОформленныеДокументы.Количество() = 0 Тогда
		
		МассивОформленныхДокументов.Добавить(
			?(ИспользоватьЗаявкиНаВозврат,
				Документы.ЗаявкаНаВозвратТоваровОтКлиента.ПустаяСсылка(),
				Документы.ВозвратТоваровОтКлиента.ПустаяСсылка()));
		
	Иначе
		
		Для Каждого ОформленныйДокумент Из ОформленныеДокументы Цикл
			
			МассивОформленныхДокументов.Добавить(ОформленныйДокумент.ДокументВозврата);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВывестиДокументКОформлению(
		"ДокументВозврата",
		2,
		Макет,
		МассивОформленныхДокументов,,,
		Описание);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДокументПриобретениеТоваровУслуг(СтрокаДействия, Макет, Описание)
	
	Если НеВыводитьВОтчет("ВывестиДокументПриобретениеТоваровУслуг", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;

	ОформленныеДокументы = ДопоступленияПоВозвратамПоставщику.НайтиСтроки(Новый Структура("Основание", СтрокаДействия.Основание));
	
	Если ОформленныеДокументы.Количество() = 0 Тогда
		
		МассивОформленныхДокументов.Добавить(Документы.ПриобретениеТоваровУслуг.ПустаяСсылка());
		
	Иначе
		
		Для Каждого ОформленныйДокумент Из ОформленныеДокументы Цикл
			
			МассивОформленныхДокументов.Добавить(ОформленныйДокумент.ПриобретениеТоваровУслуг);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВывестиДокументКОформлению(
		"ПриобретениеТоваровУслуг",
		2,
		Макет,
		МассивОформленныхДокументов,,,
		Описание);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДокументПоступленияНаСкладДляПерепроведения(СтрокаДействия, Макет, Описание, ПослеКорректировки = Ложь)
	
	ИмяКоманды = ?(ПослеКорректировки, "ПоступлениеТоваровПерепроведениеПослеКорректировки",
		"ПоступлениеТоваровПерепроведениеПослеПриобретения");
	
	Если НеВыводитьВОтчет(ИмяКоманды, СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;

	Если ПоступленияПоступленияНаСклад.Количество() <> 0 Тогда
		
		Для Каждого ОформленныйДокумент Из ПоступленияПоступленияНаСклад Цикл
			
			МассивОформленныхДокументов = Новый Массив;
			МассивОформленныхДокументов.Добавить(ОформленныйДокумент.ОформленноеПоступление);
			
			ВывестиДокументКОформлению(
				ИмяКоманды,
				2,
				Макет,
				МассивОформленныхДокументов,,,
				Описание);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДокументДопоставкиПоПоступлениюНаСклад(СтрокаДействия, Макет, Описание)
	
	Если НеВыводитьВОтчет("ПоступлениеТоваровДопоставкаПоПоступлению", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПоискаСкладовОжидать = Новый Структура("ВариантДействия", Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОжидатьДопоставкуБезОформления);
	НайденныеСтроки = СтрокаДействия.ДействияСклады.НайтиСтроки(ПараметрыПоискаСкладовОжидать);
	
	ПараметрыПоискаСкладовОформить = Новый Структура("ВариантДействия", Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьНедостачуИОжидатьДопоставку);
	НайденныеСтрокиОформить = СтрокаДействия.ДействияСклады.НайтиСтроки(ПараметрыПоискаСкладовОформить);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НайденныеСтроки,НайденныеСтрокиОформить);
				
	МассивСкладовПоступления = Новый Массив;
	Для Каждого СтрокаСПоступлением Из НайденныеСтроки Цикл
	
		Если МассивСкладовПоступления.Найти(СтрокаСПоступлением.Склад) = Неопределено Тогда
			МассивСкладовПоступления.Добавить(СтрокаСПоступлением.Склад);
		КонецЕсли;
	
	КонецЦикла;
	
	Для Каждого СкладПоступления Из МассивСкладовПоступления Цикл
		
		Описание.Склад = СкладПоступления;
		Описание.ВыводитьСклад = (МассивСкладовПоступления.Количество() > 1);
		
		МассивОформленныхДокументов = Новый Массив;
	
		ОформленныеДокументы = ПоступленияПоступленияНаСклад.НайтиСтроки(Новый Структура("ДопоставкаПоПоступлению, Склад",
																						Истина,
																						СкладПоступления));
		
		Если ОформленныеДокументы.Количество() = 0 Тогда
			
			МассивОформленныхДокументов.Добавить(Новый Структура("ОформляемыйДокумент, Склад",
																Документы.ПоступлениеТоваровНаСклад.ПустаяСсылка(),
																СкладПоступления));
			
		 Иначе
			
			Для Каждого ОформленныйДокумент Из ОформленныеДокументы Цикл
				
				МассивОформленныхДокументов.Добавить(ОформленныйДокумент.ОформленноеПоступление);
				
			КонецЦикла;
			
		КонецЕсли;
		
		ВывестиДокументКОформлению(
			"ПоступлениеТоваровДопоставкаПоПоступлению",
			1,
			Макет,
			МассивОформленныхДокументов,,,
			Описание);
		
	КонецЦикла;

	
КонецПроцедуры

&НаСервере
Процедура ВывестиДокументДопоставкиПоПоступлению(СтрокаДействия, Макет, Описание)
	
	Если НеВыводитьВОтчет("ВывестиДокументДопоставкиПоПоступлению", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;

	ОформленныеДокументы = ПоступленияПоступления.НайтиСтроки(Новый Структура("ДопоставкаПоПоступлению", СтрокаДействия.Основание));
	
	Если ОформленныеДокументы.Количество() = 0 Тогда
		
		МассивОформленныхДокументов.Добавить(Документы.ПриобретениеТоваровУслуг.ПустаяСсылка());
		
	Иначе
		
		Для Каждого ОформленныйДокумент Из ОформленныеДокументы Цикл
			
			МассивОформленныхДокументов.Добавить(ОформленныйДокумент.ОформленноеПоступление);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВывестиДокументКОформлению(
		"ПриобретениеТоваровУслугДопоставкаПоПоступлению",
		2,
		Макет,
		МассивОформленныхДокументов,,,
		Описание);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДокументПеремещениеТоваров(СтрокаДействия, Макет, Описание, НаВозврат = Ложь, ИспользоватьИсправлениеДокументов = Ложь)
	
	Если НеВыводитьВОтчет("ВывестиДокументПеремещениеТоваров", СтрокаДействия.Основание, НаВозврат) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;

	Если Не НаВозврат Тогда
		ПараметрыПоиска = Новый Структура("Основание, Исправление", СтрокаДействия.Основание, Ложь);
		ОформленныеДокументы = ПеремещенияПоПеремещениям.НайтиСтроки(ПараметрыПоиска);
		
		Если ИспользоватьИсправлениеДокументов Тогда
			ПараметрыПоиска = Новый Структура("Основание", СтрокаДействия.Основание);
			НайденныеСтроки = ПеремещенияПоПеремещениям.НайтиСтроки(ПараметрыПоиска);
			Если НайденныеСтроки.Количество() > 0 Тогда
				// При использовании функциональности исправлений, введен корректирующий документ перемещения.
				// Т.о. требуется выполнить ввод доперемещения по актуальному, последнему в цепочке документу перемещения.
				НайденнаяСтрока = НайденныеСтроки[0];
				Описание.ОснованиеАкта = НайденнаяСтрока.ПеремещениеТоваров;
			Иначе
				Возврат; // Пока не введена корректировка, отображать пункт ввода перемещения излишне.
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		ПараметрыПоиска = Новый Структура("Основание", СтрокаДействия.Основание);
		ОформленныеДокументы = ПеремещенияПоПеремещениямНаВозврат.НайтиСтроки(ПараметрыПоиска);
	КонецЕсли;
	
	Если ОформленныеДокументы.Количество() = 0 Тогда
		
		МассивОформленныхДокументов.Добавить(Новый Структура("ПеремещениеТоваров, ЭтоПереперемещение", Документы.ПеремещениеТоваров.ПустаяСсылка(), НаВозврат));
		
	Иначе
		
		Для Каждого ОформленныйДокумент Из ОформленныеДокументы Цикл
			
			МассивОформленныхДокументов.Добавить(ОформленныйДокумент.ПеремещениеТоваров);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НаВозврат Тогда
		ВывестиДокументКОформлению(
			"ПеремещениеТоваровВозврат",
			2,
			Макет,
			МассивОформленныхДокументов,,,
			Описание);
	Иначе
		ВывестиДокументКОформлению(
			"ПеремещениеТоваров",
			2,
			Макет,
			МассивОформленныхДокументов,,,
			Описание);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДокументРеализацияНаДопоставкуНедопоставленногоТовара(СтрокаДействия, Макет, Описание)
	
	Если НеВыводитьВОтчет("ВывестиДокументРеализацияНаДопоставкуНедопоставленногоТовара", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;

	ОформленныеДокументы = Допоставки.НайтиСтроки(Новый Структура("ДопоставкаПоРеализации", СтрокаДействия.Основание));
	
	Если ОформленныеДокументы.Количество() = 0 Тогда
		
		МассивОформленныхДокументов.Добавить(Документы.РеализацияТоваровУслуг.ПустаяСсылка());
		
	Иначе
		
		Для Каждого ОформленныйДокумент Из ОформленныеДокументы Цикл
			
			МассивОформленныхДокументов.Добавить(ОформленныйДокумент.ОформленнаяРеализация);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВывестиДокументКОформлению(
		"РеализацияТоваровИУслуг",
		2,
		Макет,
		МассивОформленныхДокументов,,,
		Описание);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДокументРеализацииПоВозвратуОтКлиента(СтрокаДействия, Макет, Описание);

	Если НеВыводитьВОтчет("ВывестиДокументРеализацииПоВозвратуОтКлиента", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;

	ОформленныеДокументы = ВозвратыОтКлиентовРеализации.НайтиСтроки(Новый Структура("Основание", СтрокаДействия.Основание));
	
	Если ОформленныеДокументы.Количество() = 0 Тогда
		
		МассивОформленныхДокументов.Добавить(Документы.РеализацияТоваровУслуг.ПустаяСсылка());
		
	Иначе
		
		Для Каждого ОформленныйДокумент Из ОформленныеДокументы Цикл
			
			МассивОформленныхДокументов.Добавить(ОформленныйДокумент.Реализация);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВывестиДокументКОформлению(
		"РеализацияТоваровИУслугПоВозвратуОтКлиента",
		2,
		Макет,
		МассивОформленныхДокументов,,,
		Описание);

КонецПроцедуры

&НаСервере
Процедура ВывестиИсправлениеЗаявкаНаВозвратТоваров(СтрокаДействия, Макет, Описание, ТипОснованияАкта = Неопределено)

	Если НеВыводитьВОтчет("ВывестиИсправлениеЗаявкаНаВозвратТоваров", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;
	МассивОформленныхДокументов.Добавить(СтрокаДействия.Заказ);
	
	ВидДокумента = "ИсправлениеЗаявкаНаВозвратТоваров";
	Если ТипОснованияАкта <> Неопределено Тогда
		Если РасхожденияКлиентСервер.ТипОснованияПоступлениеТоваровОтХранителя(ТипОснованияАкта) Тогда
			ВидДокумента = "ИсправлениеЗаявкаНаВозвратТоваровПередачи";
		КонецЕсли;
	КонецЕсли;
	
	ВывестиДокументКОформлению(ВидДокумента, 2, Макет, МассивОформленныхДокументов, , Ложь, Описание);

КонецПроцедуры

&НаСервере
Процедура ВывестиИсправлениеЗаявкаНаВозвратОтКомиссионера(СтрокаДействия, Макет, Описание)

	Если НеВыводитьВОтчет("ВывестиИсправлениеЗаявкаНаВозвратТоваров", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;
	МассивОформленныхДокументов.Добавить(СтрокаДействия.Заказ);
	
	ВывестиДокументКОформлению("ИсправлениеЗаявкаНаВозвратОтКомиссионера", 2, Макет, МассивОформленныхДокументов, , Ложь, Описание);

КонецПроцедуры

&НаСервере
Процедура ВывестиДокументДовозвратаПоВозвратуОтКлиента(СтрокаДействия, Макет, Описание)

	Если НеВыводитьВОтчет("ВывестиДокументДовозвратаПоВозвратуОтКлиента", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;

	ОформленныеДокументы = ВозвратыОтКлиентовВозвраты.НайтиСтроки(Новый Структура("Основание", СтрокаДействия.Основание));
	
	Если ОформленныеДокументы.Количество() = 0 Тогда
		
		МассивОформленныхДокументов.Добавить(Документы.ВозвратТоваровОтКлиента.ПустаяСсылка());
		
	Иначе
		
		Для Каждого ОформленныйДокумент Из ОформленныеДокументы Цикл
			
			МассивОформленныхДокументов.Добавить(ОформленныйДокумент.Возврат);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВывестиДокументКОформлению(
		"ВозвратТоваровОтКлиентаДовозврат",
		2,
		Макет,
		МассивОформленныхДокументов,,,
		Описание);


КонецПроцедуры

&НаСервере
Процедура ВывестиИзменениеДокументаПоступлениеТоваров(СтрокаДействия, Макет, Описание)
	
	Если НеВыводитьВОтчет("ВывестиИзменениеПоступлениеТоваров", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;
	
	ОтборСтрок = Новый Структура();
	ОтборСтрок.Вставить("ДопоставкаПоПоступлению", Ложь);
	ОтборСтрок.Вставить("Основание", СтрокаДействия.Основание);
	
	ОформленныеДокументы = ПоступленияПоступленияНаСклад.НайтиСтроки(ОтборСтрок);
	
	Если ОформленныеДокументы.Количество() = 0 Тогда
		
		МассивОформленныхДокументов.Добавить(Документы.ПоступлениеТоваровНаСклад.ПустаяСсылка());
		
	Иначе
		
		Для Каждого ОформленныйДокумент Из ОформленныеДокументы Цикл
			
			Если ЗначениеЗаполнено(ОформленныйДокумент.ОформленноеПоступление) Тогда
				МассивОформленныхДокументов = Новый Массив;
				МассивОформленныхДокументов.Добавить(ОформленныйДокумент.ОформленноеПоступление);
				
				Описание.ОснованиеАкта = ОформленныйДокумент.ОформленноеПоступление;
				
				ВывестиДокументКОформлению("ИзменениеПоступленияТоваров", 1, Макет, МассивОформленныхДокументов, , Ложь, Описание);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиКорректировкуДокументаПоступлениеТоваров(СтрокаДействия, Макет, Описание)
	
	Если НеВыводитьВОтчет("ВывестиКорректировкуПоступленияТоваров", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;
	МассивОформленныхДокументов.Добавить(Документы.ПоступлениеТоваровНаСклад.ПустаяСсылка());
	
	ОтборСтрок = Новый Структура();
	ОтборСтрок.Вставить("ДопоставкаПоПоступлению", Ложь);
	ОтборСтрок.Вставить("Основание", СтрокаДействия.Основание);
	ОтборСтрок.Вставить("Исправление", Истина);
	
	ОформленныеИсправления = ПоступленияПоступленияНаСклад.НайтиСтроки(ОтборСтрок);
	
	ОтборСтрок = Новый Структура();
	ОтборСтрок.Вставить("ДопоставкаПоПоступлению", Ложь);
	ОтборСтрок.Вставить("Основание", СтрокаДействия.Основание);
	ОтборСтрок.Вставить("Исправление", Ложь);
	
	МассивИзначальныхДокументов = Новый Массив;
	ОформленныеИзначальныеПоступления = ПоступленияПоступленияНаСклад.НайтиСтроки(ОтборСтрок);
	Для Каждого ИзначальныйДокумент Из ОформленныеИзначальныеПоступления Цикл
		МассивИзначальныхДокументов.Добавить(ИзначальныйДокумент.ОформленноеПоступление);
	КонецЦикла;
	
	Если ОформленныеИсправления.Количество() = 0
		И МассивИзначальныхДокументов.Количество() > 0 Тогда
		
		ПараметрыОформленияДокументов = Новый Структура();
		ПараметрыОформленияДокументов.Вставить("ПоступлениеТоваровНаСклад", Документы.ПоступлениеТоваровНаСклад.ПустаяСсылка());
		ПараметрыОформленияДокументов.Вставить("Исправление", Истина);
		ПараметрыОформленияДокументов.Вставить("ИсправляемыйДокумент", МассивИзначальныхДокументов[0]);
		
		МассивОформленныхДокументов.Добавить(ПараметрыОформленияДокументов);
		
	Иначе
		
		Для Каждого ОформленныйДокумент Из ОформленныеИсправления Цикл
			
			Если ЗначениеЗаполнено(ОформленныйДокумент.ОформленноеПоступление) Тогда
				МассивОформленныхДокументов.Добавить(ОформленныйДокумент.ОформленноеПоступление);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВывестиДокументКОформлению(
		"КорректировкаПоступленияТоваров",
		1,
		Макет,
		МассивИзначальныхДокументов,,Истина,
		Неопределено);
	
	ВывестиДокументКОформлению(
		"КорректировкаПоступленияТоваровИсправления",
		2,
		Макет,
		МассивОформленныхДокументов,,,
		Описание);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиСписаниеРасхожденийПоступлениеПриобретениеТоваров(СтрокаДействия, Макет, Описание)
	
	Если НеВыводитьВОтчет("ВывестиСписаниеРасхожденийПоступлениеПриобретение", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеСтрокиСкладыЗаказы = Новый Массив;
	
	Для Каждого СтрокаСПоступлением Из СтрокаДействия.ДействияСклады Цикл
		ЕстьСтрока = Ложь;
		Для Каждого НайденнаяСтрока ИЗ НайденныеСтрокиСкладыЗаказы Цикл
			Если НайденнаяСтрока.Склад = СтрокаСПоступлением.Склад Тогда 
				ЕстьСтрока = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не ЕстьСтрока Тогда 
			НайденныеСтрокиСкладыЗаказы.Добавить(СтрокаСПоступлением);
		КонецЕсли;
	КонецЦикла;
	
	Если НайденныеСтрокиСкладыЗаказы.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;

	Для Каждого СтрокаСкладыЗаказы Из НайденныеСтрокиСкладыЗаказы Цикл
		
		МассивОформленныхДокументов = Новый Массив;
		
		МассивОформленныхДокументов.Добавить(Новый Структура("ОформляемыйДокумент, Склад, Заказ",
															Документы.СписаниеРасхожденийПоступлениеПриобретение.ПустаяСсылка(),
															СтрокаСкладыЗаказы.Склад,
															СтрокаСкладыЗаказы.Заказ));
		
		ОтборСтрок = Новый Структура();
		ОтборСтрок.Вставить("Приобретение", СтрокаДействия.Основание);
		ОтборСтрок.Вставить("Склад", СтрокаСкладыЗаказы.Склад);
		
		Описание.Заказ = СтрокаСкладыЗаказы.Заказ;
		Описание.ВыводитьСклад = НайденныеСтрокиСкладыЗаказы.Количество() > 1;
		Описание.Склад = СтрокаСкладыЗаказы.Склад;
		
		ОформленныеСписания = СписанияРасхожденийПоступлениеПриобретение.НайтиСтроки(ОтборСтрок);
		
		Для Каждого ОформленныйДокумент Из ОформленныеСписания Цикл
			Если ЗначениеЗаполнено(ОформленныйДокумент.Списание) Тогда
				МассивОформленныхДокументов.Добавить(ОформленныйДокумент.Списание);
			КонецЕсли;
 			
 		КонецЦикла;
 		
		ВывестиДокументКОформлению(
			"СписаниеРасхожденийПоступлениеПриобретение",
			1,
			Макет,
			МассивОформленныхДокументов,,,
			Описание);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиПретензию(СтрокаДействия, Макет, Описание)
	
	Если НеВыводитьВОтчет("ВывестиПретензию", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеСтрокиСкладыЗаказы = Новый Массив;
	
	МассивСкладовСписания  = Новый Массив;
	Если СтрокаДействия.ДействияСклады.Количество() > 0 Тогда   
		НайденныеСтрокиСкладыЗаказы.Добавить(СтрокаДействия.ДействияСклады[0]);
	Иначе
		Возврат;
	КонецЕсли;

	Для Каждого СтрокаСкладыЗаказы Из НайденныеСтрокиСкладыЗаказы Цикл
		
		МассивОформленныхДокументов = Новый Массив;
		
		ПараметрыПретензии = Новый Структура;
		ПараметрыПретензии.Вставить("ОформляемыйДокумент", Справочники.Претензии.ПустаяСсылка());
		ПараметрыПретензии.Вставить("Склад", СтрокаСкладыЗаказы.Склад);
		ПараметрыПретензии.Вставить("Заказ", СтрокаСкладыЗаказы.Заказ);
		ПараметрыПретензии.Вставить("СуммаНедопоставки", Описание.СуммаНедопоставки);

		МассивОформленныхДокументов.Добавить(ПараметрыПретензии);
		
		ОтборСтрок = Новый Структура();
		ОтборСтрок.Вставить("Основание", СтрокаДействия.Основание);
		
		ОформленныеПретензии = Претензии.НайтиСтроки(ОтборСтрок);
		
		Для Каждого ОформленныйЭлемент Из ОформленныеПретензии Цикл
			
			Если ЗначениеЗаполнено(ОформленныйЭлемент.Претензия) Тогда
				МассивОформленныхДокументов.Добавить(ОформленныйЭлемент.Претензия);
			КонецЕсли;
			
		КонецЦикла;
		
		ВывестиДокументКОформлению(
			"Претензия",
			1,
			Макет,
			МассивОформленныхДокументов,,Ложь,
			Описание);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиКорректировкуЗадолженности(СтрокаДействия, Макет, Описание)
	
	Если НеВыводитьВОтчет("ВывестиКорректировкуЗадолженности", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеСтрокиСкладыЗаказы = Новый Массив;

	МассивСкладовСписания  = Новый Массив;
	Если СтрокаДействия.ДействияСклады.Количество() > 0 Тогда   
		НайденныеСтрокиСкладыЗаказы.Добавить(СтрокаДействия.ДействияСклады[0]);
	Иначе
		Возврат;
	КонецЕсли;

	Для Каждого СтрокаСкладыЗаказы Из НайденныеСтрокиСкладыЗаказы Цикл
		
		МассивОформленныхДокументов = Новый Массив;
		
		МассивОформленныхДокументов.Добавить(Новый Структура("ОформляемыйДокумент, Основание, Претензия",
															Документы.КорректировкаЗадолженности.ПустаяСсылка(),
															СтрокаСкладыЗаказы.Склад,
															СтрокаСкладыЗаказы.Заказ));
		
		ОтборСтрок = Новый Структура();
		ОтборСтрок.Вставить("Приобретение", СтрокаДействия.Основание);
		
		
		ОформленныеКорректировки = КорректировкиЗадолженности.НайтиСтроки(ОтборСтрок);
		
		Для Каждого ОформленныйДокумент Из ОформленныеКорректировки Цикл
			
			Если ЗначениеЗаполнено(ОформленныйДокумент.Корректировка) Тогда
				МассивОформленныхДокументов.Добавить(ОформленныйДокумент.Корректировка);
			КонецЕсли;
			
		КонецЦикла;
		
		ВывестиДокументКОформлению(
			"КорректировкаЗадолженности",
			1,
			Макет,
			МассивОформленныхДокументов,,Истина,
			Описание);
	КонецЦикла;
	
КонецПроцедуры


&НаСервере
Процедура ВывестиДокументДоВозвратаПоПоступлениюОтХранителя(СтрокаДействия, Макет, Описание)

	Если НеВыводитьВОтчет("ВывестиДокументДоВозвратаПоПоступлениюОтХранителя", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;

	ОформленныеДокументы = ВозвратыОтХранителейПоступления.НайтиСтроки(Новый Структура("Основание", СтрокаДействия.Основание));
	
	Если ОформленныеДокументы.Количество() = 0 Тогда
		
		МассивОформленныхДокументов.Добавить(Документы.ПоступлениеТоваровОтХранителя.ПустаяСсылка());
		
	Иначе
		
		Для Каждого ОформленныйДокумент Из ОформленныеДокументы Цикл
			
			МассивОформленныхДокументов.Добавить(ОформленныйДокумент.Поступление);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВывестиДокументКОформлению(
		"ВозвратТоваровОтХранителяДовозврат",
		2,
		Макет,
		МассивОформленныхДокументов,,,
		Описание);

КонецПроцедуры

&НаСервере
Процедура ВывестиДокументДоВозвратаПоПоступлениюОтКомиссионера(СтрокаДействия, Макет, Описание)

	Если НеВыводитьВОтчет("ВывестиДокументДоВозвратаПоПоступлениюОтКомиссионера", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;

	ОформленныеДокументы = ВозвратыОтХранителейПоступления.НайтиСтроки(Новый Структура("Основание", СтрокаДействия.Основание));
	
	Если ОформленныеДокументы.Количество() = 0 Тогда
		
		МассивОформленныхДокументов.Добавить(Документы.ПоступлениеТоваровОтХранителя.ПустаяСсылка());
		
	Иначе
		
		Для Каждого ОформленныйДокумент Из ОформленныеДокументы Цикл
			
			МассивОформленныхДокументов.Добавить(ОформленныйДокумент.Поступление);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВывестиДокументКОформлению(
		"ВозвратТоваровОтКомиссионераДовозврат",
		2,
		Макет,
		МассивОформленныхДокументов,,,
		Описание);

КонецПроцедуры

&НаСервере
Процедура ВывестиДокументВозвратТоваровПоставщикуДляВозвратаНедопоставленногоТовара(СтрокаДействия, Макет, Описание)
	
	Если НеВыводитьВОтчет("ВывестиДокументВозвратТоваровПоставщикуДляВозвратаНедопоставленногоТовара", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;

	ОформленныеДокументы = ВозвратыПоВозвратамПоставщику.НайтиСтроки(Новый Структура("Основание", СтрокаДействия.Основание));
	
	Если ОформленныеДокументы.Количество() = 0 Тогда
		
		МассивОформленныхДокументов.Добавить(Документы.ВозвратТоваровПоставщику.ПустаяСсылка());
		
	Иначе
		
		Для Каждого ОформленныйДокумент Из ОформленныеДокументы Цикл
			
			МассивОформленныхДокументов.Добавить(ОформленныйДокумент.ВозвратТоваровПоставщику);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВывестиДокументКОформлению(
		"ВозвратТоваровПоставщику",
		2,
		Макет,
		МассивОформленныхДокументов,,,
		Описание);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиИсправлениеДокументаЗаказ(СтрокаДействия, Макет, Описание)
	
	Если НеВыводитьВОтчет("ВывестиИсправлениеДокументаЗаказ", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;
	
	ОформленныеДокументы = РеализацииЗаказы.НайтиСтроки(Новый Структура("Реализация", СтрокаДействия.Основание));
	
	Если ОформленныеДокументы.Количество() = 0 Тогда
		
		Возврат;
		
	Иначе
		
		Для Каждого ОформленныйДокумент Из ОформленныеДокументы Цикл
			
			МассивОформленныхДокументов.Добавить(ОформленныйДокумент.ЗаказКлиента);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВывестиДокументКОформлению(
		"ЗаказКлиента",
		2,
		Макет,
		МассивОформленныхДокументов,,Ложь,
		Описание);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиИсправлениеДокументаЗаказПоставщику(СтрокаДействия, Макет, Описание)

	Если НеВыводитьВОтчет("ВывестиИсправлениеДокументаЗаказ", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;
	
	ОформленныеДокументы = ПоступленияЗаказы.НайтиСтроки(Новый Структура("ДокументПоступления", СтрокаДействия.Основание));
	
	Если ОформленныеДокументы.Количество() = 0 Тогда
		
		Возврат;
		
	Иначе
		
		Для Каждого ОформленныйДокумент Из ОформленныеДокументы Цикл
			
			МассивОформленныхДокументов.Добавить(ОформленныйДокумент.ЗаказПоставщику);
			
		КонецЦикла;
		
	КонецЕсли;
	
		ВидДокумента = "ЗаказПоставщику";
	
	ВывестиДокументКОформлению(ВидДокумента, 2, Макет, МассивОформленныхДокументов,, Ложь, Описание);

КонецПроцедуры

&НаСервере
Процедура ВывестиДокументЗаказНаПеремещение(СтрокаДействия, Макет, Описание)
	
	Если НеВыводитьВОтчет("ВывестиДокументЗаказНаПеремещение", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;
	НайденныеСтроки = ПеремещенияТоваровЗаказыНаПеремещения.НайтиСтроки(Новый Структура("ПеремещениеТоваров", СтрокаДействия.Основание));
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		МассивОформленныхДокументов.Добавить(НайденнаяСтрока.ЗаказНаПеремещение);
	КонецЦикла;
	
	ВывестиДокументКОформлению(
		"ЗаказНаПеремещение",
		2,
		Макет,
		МассивОформленныхДокументов,,,
		Описание);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДокументСписаниеНедостачТоваров(СтрокаДействия, Макет, Описание)
	
	Если НеВыводитьВОтчет("ВывестиДокументСписаниеНедостачТоваров", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	ХозяйственнаяОперация = ?(ТипЗнч(СтрокаДействия.Основание) = Тип("ДокументСсылка.ПриемкаТоваровНаХранение"),
					Перечисления.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи,
					Неопределено);
	
	ПараметрыПоискаСкладов = Новый Структура("ВариантДействия", Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОтнестиНедостачуНаПрочиеРасходы);
	НайденныеСтроки = СтрокаДействия.ДействияСклады.НайтиСтроки(ПараметрыПоискаСкладов);
	МассивСкладовСписания = Новый Массив;
	Для Каждого СтрокаСоСписанием Из НайденныеСтроки Цикл
	
		Если МассивСкладовСписания.Найти(СтрокаСоСписанием.Склад) = Неопределено Тогда
			МассивСкладовСписания.Добавить(СтрокаСоСписанием.Склад);
		КонецЕсли;
	
	КонецЦикла;
	
	Для Каждого СкладСписания Из МассивСкладовСписания Цикл
		
		Описание.Склад = СкладСписания;
		Описание.ВыводитьСклад = (МассивСкладовСписания.Количество() > 1);
		
		МассивОформленныхДокументов = Новый Массив;
	
		ОформленныеДокументы = ОснованияСписанияНедостач.НайтиСтроки(Новый Структура("Основание, Склад",
		                                                                               СтрокаДействия.Основание,
		                                                                               СкладСписания));
		
		Если ОформленныеДокументы.Количество() = 0 Тогда
			
			МассивОформленныхДокументов.Добавить(Новый Структура("ОформляемыйДокумент, Склад",
			                                                     Документы.СписаниеНедостачТоваров.ПустаяСсылка(),
			                                                     СкладСписания));
			
		 Иначе
			
			Для Каждого ОформленныйДокумент Из ОформленныеДокументы Цикл
				
				МассивОформленныхДокументов.Добавить(ОформленныйДокумент.Списание);
				
			КонецЦикла;
			
		КонецЕсли;
		
		ВывестиДокументКОформлению(
			"СписаниеНедостачТоваров",
			1,
			Макет,
			МассивОформленныхДокументов,
			ХозяйственнаяОперация,,
			Описание);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДокументСписаниеНедостачТоваровПеремещениеТоваров(СтрокаДействия, Макет, Описание)
	
	Если НеВыводитьВОтчет("ВывестиДокументСписаниеНедостачТоваровПеремещениеТоваров", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;

	ОформленныеДокументы = ОснованияСписанияНедостачПоПеремещениюТоваров.НайтиСтроки(Новый Структура("Основание",
	                                                                               СтрокаДействия.Основание));
	
	СкладПолучатель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаДействия.Основание, "СкладПолучатель");
	Если ОформленныеДокументы.Количество() = 0 Тогда
		
		МассивОформленныхДокументов.Добавить(Новый Структура("ОформляемыйДокумент, Склад",
		                                                     Документы.СписаниеНедостачТоваров.ПустаяСсылка(),
		                                                     СкладПолучатель));
		
	Иначе
		
		Для Каждого ОформленныйДокумент Из ОформленныеДокументы Цикл
			
			МассивОформленныхДокументов.Добавить(ОформленныйДокумент.Списание);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Описание.Склад = СкладПолучатель;
	
	ВывестиДокументКОформлению(
		"СписаниеНедостачТоваров",
		1,
		Макет,
		МассивОформленныхДокументов,
		,,
		Описание);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДокументСписаниеЗадолженности(СтрокаДействия, Макет, Описание, ПраваДоступаНаТаблицы)
	
	Если НеВыводитьВОтчет("ВывестиДокументСписаниеЗадолженности", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;
	
	ОформленныеДокументы = ОснованияСписанияЗадолженностей.НайтиСтроки(Новый Структура("Основание", СтрокаДействия.Основание));
	
	Если ОформленныеДокументы.Количество() = 0 Тогда
		
		Если Не ПраваДоступаНаТаблицы.ДобавлениеСписаниеЗадолженности Тогда
			Возврат;
		КонецЕсли;
		
		МассивОформленныхДокументов.Добавить(Документы.КорректировкаЗадолженности.ПустаяСсылка());
		
	Иначе
		
		Для Каждого ОформленныйДокумент Из ОформленныеДокументы Цикл
			
			МассивОформленныхДокументов.Добавить(ОформленныйДокумент.Списание);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВывестиДокументКОформлению(
		"КорректировкаЗадолженности",
		1,
		Макет,
		МассивОформленныхДокументов,,,
		Описание);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДокументОприходованиеИзлишков(СтрокаДействия, Макет, Описание)

	Если НеВыводитьВОтчет("ВывестиДокументОприходованиеИзлишков", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПоискаСкладов = Новый Структура("ВариантДействия", Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОтнестиПерепоставленноеНаПрочиеДоходы);
	НайденныеСтроки        = СтрокаДействия.ДействияСклады.НайтиСтроки(ПараметрыПоискаСкладов);
	МассивСкладовСписания  = Новый Массив;
	Для Каждого СтрокаСоСписанием Из НайденныеСтроки Цикл
	
		Если МассивСкладовСписания.Найти(СтрокаСоСписанием.Склад) = Неопределено Тогда
			МассивСкладовСписания.Добавить(СтрокаСоСписанием.Склад);
		КонецЕсли;
	
	КонецЦикла;
	
	Для Каждого СкладСписания Из МассивСкладовСписания Цикл
		
		Описание.Склад = СкладСписания;
		Описание.ВыводитьСклад = (МассивСкладовСписания.Количество() > 1);
		
		МассивОформленныхДокументов = Новый Массив;
	
		ОформленныеДокументы = ОснованияОприходования.НайтиСтроки(Новый Структура("Основание, Склад",
		                                                                               СтрокаДействия.Основание,
		                                                                               СкладСписания));
		
		Если ОформленныеДокументы.Количество() = 0 Тогда
			
			МассивОформленныхДокументов.Добавить(Новый Структура("ОформляемыйДокумент, Склад",
			                                                     Документы.ОприходованиеИзлишковТоваров.ПустаяСсылка(),
			                                                     СкладСписания));
			
		 Иначе
			
			Для Каждого ОформленныйДокумент Из ОформленныеДокументы Цикл
				
				МассивОформленныхДокументов.Добавить(ОформленныйДокумент.Оприходование);
				
			КонецЦикла;
			
		КонецЕсли;
		
		 ВывестиДокументКОформлению("ОприходованиеИзлишковТоваров",
		                            1,
		                            Макет,
		                            МассивОформленныхДокументов,,,
		                            Описание);
		
	КонецЦикла;
	
	МассивОформленныхДокументов = Новый Массив;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДокументОприходованиеИзлишковПеремещениеТоваров(СтрокаДействия, Макет, Описание)

	Если НеВыводитьВОтчет("ВывестиДокументОприходованиеИзлишковПеремещениеТоваров", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;

	ОформленныеДокументы = ОснованияОприходованияПоПеремещениюТоваров.НайтиСтроки(Новый Структура("Основание",
	                                                                               СтрокаДействия.Основание));
	
	СкладПолучатель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаДействия.Основание, "СкладПолучатель");
	Если ОформленныеДокументы.Количество() = 0 Тогда
		
		МассивОформленныхДокументов.Добавить(Новый Структура("ОформляемыйДокумент, Склад",
		                                                     Документы.ОприходованиеИзлишковТоваров.ПустаяСсылка(),
		                                                     СкладПолучатель));
		
	Иначе
		
		Для Каждого ОформленныйДокумент Из ОформленныеДокументы Цикл
			
			МассивОформленныхДокументов.Добавить(ОформленныйДокумент.Оприходование);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Описание.Склад = СкладПолучатель;
	ВывестиДокументКОформлению("ОприходованиеИзлишковТоваров",
		1,
		Макет,
		МассивОформленныхДокументов,,,
		Описание);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДокументВозвратТоваровПоставщику(СтрокаДействия, Макет, Описание)

	Если НеВыводитьВОтчет("ВывестиДокументВозвратТоваровПоставщику", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;
	
	ПараметрыПоискаСкладов = Новый Структура("ВариантДействия", Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленноеИВернуть);
	НайденныеСтроки = СтрокаДействия.ДействияСклады.НайтиСтроки(ПараметрыПоискаСкладов);
	МассивСкладовВозврата = Новый Массив;
	Для Каждого СтрокаСВозвратом Из НайденныеСтроки Цикл
		
		Если МассивСкладовВозврата.Найти(СтрокаСВозвратом.Склад) = Неопределено Тогда
			МассивСкладовВозврата.Добавить(СтрокаСВозвратом.Склад);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СкладВозврата Из МассивСкладовВозврата Цикл
		
		Описание.Склад = СкладВозврата;
		Описание.ВыводитьСклад = (МассивСкладовВозврата.Количество() > 1);
		
		МассивОформленныхДокументов = Новый Массив;
	
		ОформленныеДокументы = ПоступленияВозвраты.НайтиСтроки(Новый Структура("ДокументПоступления, Склад",
		                                                                       СтрокаДействия.Основание,
		                                                                       СкладВозврата));
		
		Если ОформленныеДокументы.Количество() = 0 Тогда
			
			МассивОформленныхДокументов.Добавить(Новый Структура("ОформляемыйДокумент, Склад",
			                                                     Документы.ВозвратТоваровПоставщику.ПустаяСсылка(),
			                                                     СкладВозврата));
			
		 Иначе
			
			Для Каждого ОформленныйДокумент Из ОформленныеДокументы Цикл
				
				МассивОформленныхДокументов.Добавить(ОформленныйДокумент.ВозвратПоставщику);
				
			КонецЦикла;
			
		КонецЕсли;
		
		ВывестиДокументКОформлению(
		"ВозвратТоваровПоставщикуПоПоступлению",
		2,
		Макет,
		МассивОформленныхДокументов,,,
		Описание);
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ВывестиОшибку(ТекстСообщения, Макет)
	
	ОбластьОшибка = Макет.ПолучитьОбласть("СтрокаОшибка");
	ОбластьОшибка.Параметры.ТекстОшибки = ТекстСообщения;
	ТабличныйДокумент.Вывести(ОбластьОшибка);
	
	ЕстьОшибка = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДокументКОформлению(ВидДокумента, Уровень, Макет,
	                                 МассивОформленныхДокументов,
	                                 ХозяйственнаяОперация = Неопределено,
	                                 ВыводитьШапкуОформленныеДокументы = Истина,
	                                 Описание = Неопределено)
	
	ОбластьПустаяСтрока       = Макет.ПолучитьОбласть("ПустаяСтрока");
	ОбластьТонкаяПустаяСтрока = Макет.ПолучитьОбласть("ТонкаяПустаяСтрока");
	ОбластьШапкаДокумента     = Макет.ПолучитьОбласть("ШапкаУровень"   + Строка(Уровень));
	ОбластьЛегендаДокумента   = Макет.ПолучитьОбласть("ЛегендаУровень" + Строка(Уровень));
	ОбластьСтрокаДокумента    = Макет.ПолучитьОбласть("СтрокаУровень"  + Строка(Уровень));
	
	ЖирныйШрифтTahoma9                 = Новый Шрифт("Tahoma", 9, Истина, Ложь,   Истина);
	ОбычныйШрифтTahoma9                = Новый Шрифт("Tahoma", 9, Ложь,   Ложь,   Истина);
	ЖирныйШрифтTahoma8                 = Новый Шрифт("Tahoma", 8, Ложь,   Истина, Ложь);
	
	ТабличныйДокумент.Вывести(ОбластьПустаяСтрока);
	ОбластьШапкаДокумента.Параметры.Текст = ТекстШапки(ВидДокумента, Описание, ХозяйственнаяОперация);
	ТабличныйДокумент.Вывести(ОбластьШапкаДокумента);
	
	Если ВыводитьЛегенду Тогда
		ТабличныйДокумент.Вывести(ОбластьТонкаяПустаяСтрока);
		ОбластьЛегендаДокумента.Параметры.Текст = ТекстЛегенды(ВидДокумента, ХозяйственнаяОперация);
		ТабличныйДокумент.Вывести(ОбластьЛегендаДокумента);
		ТабличныйДокумент.Вывести(ОбластьТонкаяПустаяСтрока);
	КонецЕсли;
	
	//строки
	
	ВыведеныОформленныеДокументы = Ложь;
	
	Для Каждого ЭлементМассива Из МассивОформленныхДокументов Цикл
		
		Если ТипЗнч(ЭлементМассива) <> Тип("Структура") И ЗначениеЗаполнено(ЭлементМассива) Тогда
			
			Если Не ВыведеныОформленныеДокументы И ВыводитьШапкуОформленныеДокументы Тогда
				ОбластьСтрокаДокумента.Параметры.Текст = Строка(НСтр("ru = 'Оформленные документы:'"));
				ОбластьСтрокаДокумента.Области["СтрокаУровень" + Строка(Уровень)].ЦветТекста = Новый Цвет(0, 0, 0);
				ОбластьСтрокаДокумента.Области["СтрокаУровень" + Строка(Уровень)].Шрифт = ЖирныйШрифтTahoma8;
				ТабличныйДокумент.Вывести(ОбластьСтрокаДокумента);
				ТабличныйДокумент.Вывести(ОбластьТонкаяПустаяСтрока);
			КонецЕсли;
			
			ОбластьСтрокаДокумента.Параметры.Текст = Строка(ЭлементМассива);
			ОбластьСтрокаДокумента.Области["СтрокаУровень" + Строка(Уровень)].ЦветТекста = Новый Цвет(0, 0, 0);
			ОбластьСтрокаДокумента.Области["СтрокаУровень" + Строка(Уровень)].Шрифт = ОбычныйШрифтTahoma9;
			
			ВыведеныОформленныеДокументы = Истина;
			
			ОбластьСтрокаДокумента.Параметры.Данные = ЭлементМассива;
			ТабличныйДокумент.Вывести(ОбластьСтрокаДокумента);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Описание <> Неопределено Тогда
		
		ИспользоватьГиперссылку = Ложь;
		Если Описание.ИмяКоманды = "Изменить" Тогда
			
			Результат = РасхожденияСервер.ДокументОснованиеСоответствуетАкту(Описание.АктОРасхождениях, Описание.ОснованиеАкта);
			Если Результат.СостояниеДокумента = "ТребуютсяИзменения" Тогда
				ЦветНадписи = ЦветаСтиля.ГиперссылкаЦвет;
				ТекстГиперссылки = НСтр("ru = 'Изменить'");
				ИспользоватьГиперссылку = Истина;
			ИначеЕсли Результат.СостояниеДокумента = "ИзмененияНеТребуются" Тогда
				ЦветНадписи = ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет;
				ТекстГиперссылки = НСтр("ru = 'Изменения не требуются'");
			ИначеЕсли Результат.СостояниеДокумента = "ИзмененияВыполнены" Тогда
				ЦветНадписи = ЦветаСтиля.РезультатУспехЦвет;
				ТекстГиперссылки = НСтр("ru = 'Изменения выполнены'");
			ИначеЕсли Результат.СостояниеДокумента = "ОснованиеНеСоответствуетАкту" Тогда
				ЦветНадписи = ЦветаСтиля.ПоясняющийОшибкуТекст;
				ТекстГиперссылки = НСтр("ru = 'Основание не соответствует акту'");
			КонецЕсли;
			
		ИначеЕсли Описание.ИмяКоманды = "Оформить" Тогда
			
			ЦветНадписи = ЦветаСтиля.ГиперссылкаЦвет;
			ТекстГиперссылки = НСтр("ru = 'Оформить'");
			ИспользоватьГиперссылку = Истина;
			
		ИначеЕсли Описание.ИмяКоманды = "Создать" Тогда
			
			ЦветНадписи = ЦветаСтиля.ГиперссылкаЦвет;
			ТекстГиперссылки = НСтр("ru = 'Создать'");
			ИспользоватьГиперссылку = Истина;

		ИначеЕсли Описание.ИмяКоманды = "Подтвердить" Тогда	
			
			Если Описание.СтатусЭДО = "Получен" Тогда
				
				Если ЕстьПравоОбменаЭДО Тогда
				
					ЦветНадписи = ЦветаСтиля.ГиперссылкаЦвет;
					ТекстГиперссылки = НСтр("ru = 'Подтвердить'");
					ИспользоватьГиперссылку = Истина;
				
				Иначе
					
					ЦветНадписи = ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет;
					ТекстГиперссылки = НСтр("ru = 'Вам недоступно подтверждение электронного документа.'");
					
				КонецЕсли;
				
			ИначеЕсли Описание.СтатусЭДО = "УтверждениеВОбработке" Тогда
				
				ЦветНадписи = ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет;
				ТекстГиперссылки = НСтр("ru = 'Подтверждение инициировано.'");
				
			ИначеЕсли Описание.СтатусЭДО = "Утвержден" Тогда
				
				ЦветНадписи = ЦветаСтиля.РезультатУспехЦвет;
				ТекстГиперссылки = НСтр("ru = 'Электронный документ подтвержден.'");
				
			ИначеЕсли Описание.СтатусЭДО = "ОтклонениеВОбработке" Тогда
				
				ЦветНадписи = ЦветаСтиля.ПоясняющийОшибкуТекст;
				ТекстГиперссылки = НСтр("ru = 'Инициировано отклонение электронного документа, что не соответствует выбранному способу отработки расхождений'");
				
			ИначеЕсли Описание.СтатусЭДО = "Отклонен" Тогда
				
				ЦветНадписи = ЦветаСтиля.ПоясняющийОшибкуТекст;
				ТекстГиперссылки = НСтр("ru = 'Электронный документ отклонен, что не соответствует выбранному способу отработки расхождений'");
				
			КонецЕсли;
			
		ИначеЕсли Описание.ИмяКоманды = "Отклонить" Тогда
			
			Если Описание.СтатусЭДО = "Получен" Тогда
				
				Если ЕстьПравоОбменаЭДО Тогда
				
					ЦветНадписи = ЦветаСтиля.ГиперссылкаЦвет;
					ТекстГиперссылки = НСтр("ru = 'Отклонить'");
					ИспользоватьГиперссылку = Истина;
				
				Иначе
					
					ЦветНадписи = ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет;
					ТекстГиперссылки = НСтр("ru = 'Вам недоступно отклонение электронного документа.'");
					
				КонецЕсли;
				
			ИначеЕсли Описание.СтатусЭДО = "УтверждениеВОбработке" Тогда
				
				ЦветНадписи = ЦветаСтиля.ПоясняющийОшибкуТекст;
				ТекстГиперссылки = НСтр("ru = 'Инициировано подтверждение электронного документа, что не соответствует выбранному способу отработки расхождений.'");
				
			ИначеЕсли Описание.СтатусЭДО = "Утвержден" Тогда
				
				ЦветНадписи = ЦветаСтиля.ПоясняющийОшибкуТекст;
				ТекстГиперссылки = НСтр("ru = 'Электронный документ подтвержден, что не соответствует выбранному способу отработки расхождений'");
				
			ИначеЕсли Описание.СтатусЭДО = "ОтклонениеВОбработке" Тогда
				
				ЦветНадписи = ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет;
				ТекстГиперссылки = НСтр("ru = 'Инициировано отклонение электронного документа.'");
				
			ИначеЕсли Описание.СтатусЭДО = "Отклонен" Тогда
				
				ЦветНадписи = ЦветаСтиля.РезультатУспехЦвет;
				ТекстГиперссылки = НСтр("ru = 'Электронный документ отклонен.'");
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если (ВыведеныОформленныеДокументы И Описание.ИмяКоманды = "Изменить")
			Или (Описание.ИмяКоманды = "Оформить" И Не ВыведеныОформленныеДокументы) 
			Или (Описание.ИмяКоманды = "Создать" И Не ВыведеныОформленныеДокументы) 
			Или Описание.ИмяКоманды = "Отклонить"
			Или Описание.ИмяКоманды = "Подтвердить" Тогда
		
			Если ИспользоватьГиперссылку Тогда
				Если Уровень = 1 Тогда
					ИмяОбласти = "СтрокаУровень1";
				Иначе
					ИмяОбласти = "СтрокаУровень2";
				КонецЕсли;
			Иначе
				Если Уровень = 1 Тогда
					ИмяОбласти = "СтрокаУровень1БезГиперссылки";
				Иначе
					ИмяОбласти = "СтрокаУровень2БезГиперссылки";
				КонецЕсли;
			КонецЕсли;
		
		
			ОбластьСтрокаДокумента = Макет.ПолучитьОбласть(ИмяОбласти);
			ОбластьСтрокаДокумента.Параметры.Текст = ТекстГиперссылки;
			
			Если ИспользоватьГиперссылку Тогда
				
				ОбластьСтрокаДокумента.Параметры.Данные = Новый Структура(
					"Описание, Данные, ИмяКоманды", Описание, ЭлементМассива, Описание.ИмяКоманды);
				
				ОбластьСтрокаДокумента.Области[ИмяОбласти].Шрифт = ЖирныйШрифтTahoma9;
				ОбластьСтрокаДокумента.Области[ИмяОбласти].ЦветТекста = ЦветНадписи;
				
			Иначе
				
				ОбластьСтрокаДокумента.Области[ИмяОбласти].ЦветТекста = ЦветНадписи;
				
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьСтрокаДокумента);
		
		КонецЕсли;
		
	КонецЕсли;
	
	МассивОформленныхДокументов.Очистить();

КонецПроцедуры

#КонецОбласти

#Область ИнформационныеНадписи

&НаСервере
Функция ТекстШапки(ТипДокумента, Описание , ХозяйственнаяОперация = Неопределено)
	
	Если ТипДокумента = "КорректировкаРеализации" Тогда
		Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИсправлениеОшибок Тогда
			ТекстШапки = НСтр("ru = 'Документ ""Корректировка реализации (исправление ошибок)""'");
		ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон Тогда
			ТекстШапки = НСтр("ru = 'Документ ""Корректировка реализации (по согласованию сторон)""'");
		ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияПерепоставленногоТовара Тогда
			ТекстШапки = НСтр("ru = 'Документ ""Корректировка реализации (реализация перепоставленного товара)""'");
		ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратНедопоставленногоТовара Тогда
			ТекстШапки = НСтр("ru = 'Документ ""Корректировка реализации (возврат недопоставленного товара)""'");
		КонецЕсли;
	ИначеЕсли ТипДокумента = "КорректировкаПриобретения" Тогда
		ТекстШапки = НСтр("ru = 'Документ ""Корректировка приобретения""'");
	ИначеЕсли ТипДокумента = "ИсправлениеРеализации" Тогда
		ТекстШапки = НСтр("ru = 'Отразить расхождения в документе ""Реализация товаров и услуг""'");
	ИначеЕсли ТипДокумента = "ИсправлениеВозвратаТоваровПоставщику" Тогда
		ТекстШапки = НСтр("ru = 'Отразить расхождения в документе ""Возврат товаров поставщику""'");
	ИначеЕсли ТипДокумента = "ОтгрузкаТоваровСХранения" Тогда
			ПредставлениеОбъекта = НСтр("ru = 'Отгрузка товаров с хранения'");
		ТекстШапки = СтрШаблон(НСтр("ru = 'Документ ""%1"" для довозврата недовозращенного товара'"), ПредставлениеОбъекта);
	ИначеЕсли ТипДокумента = "ОтгрузкаТоваровСХраненияПоПриемке" Тогда
			ПредставлениеОбъекта = НСтр("ru = 'Отгрузка товаров с хранения'");
		ТекстШапки = СтрШаблон(НСтр("ru = 'Документ ""%1"" для возврата перепоставленного товара'"), ПредставлениеОбъекта);
	ИначеЕсли ТипДокумента = "ИсправлениеОтгрузкаТоваровСХранения" Тогда
			ПредставлениеОбъекта = НСтр("ru = 'Отгрузка товаров с хранения'");
		ТекстШапки = СтрШаблон(НСтр("ru = 'Отразить расхождения в документе ""%1""'"), ПредставлениеОбъекта);
	ИначеЕсли ТипДокумента = "ИсправлениеПередачи" Тогда
		Обработчик = Документы.ПередачаТоваровХранителю.ОбработчикДействий(ХозяйственнаяОперацияАкта);
		ТекстШапки = СтрШаблон(НСтр("ru = 'Отразить расхождения в документе ""%1""'"), Обработчик.ПредставлениеОбъекта());
	ИначеЕсли ТипДокумента = "ИсправлениеПередачиНаКомиссию" Тогда
		ТекстШапки = НСтр("ru = 'Отразить расхождения в документе ""Передача на комиссию""'");
	ИначеЕсли ТипДокумента = "ПередачаТоваровХранителю" Тогда
		Обработчик = Документы.ПередачаТоваровХранителю.ОбработчикДействий(ХозяйственнаяОперацияАкта);
		ТекстШапки = СтрШаблон(НСтр("ru = 'Документ ""%1"" для передачи недопоставленного товара'"), Обработчик.ПредставлениеОбъекта());
	ИначеЕсли ТипДокумента = "ПередачаТоваровНаКомиссию" Тогда
		ТекстШапки = НСтр("ru = 'Документ ""Передача товаров на комиссию"" для передачи недопоставленного товара'");
	ИначеЕсли ТипДокумента = "ПриемкаТоваровНаХранениеДопоставкаПоПриемке" Тогда
			ПредставлениеОбъекта = НСтр("ru = 'Приемка товаров на хранение'");
		ТекстШапки = СтрШаблон(НСтр("ru = 'Документ ""%1"" для поступления недопоставленного товара'"), ПредставлениеОбъекта);
	ИначеЕсли ТипДокумента = "ПриемкаТоваровНаХранение" Тогда
			ПредставлениеОбъекта = НСтр("ru = 'Приемка товаров на хранение'");
		ТекстШапки = СтрШаблон(НСтр("ru = 'Документ ""%1"" для поступления перепоставленного товара'"), ПредставлениеОбъекта);
	ИначеЕсли ТипДокумента = "ИсправлениеВозвратаТоваровОтХранителя" Тогда
		Обработчик = Документы.ПоступлениеТоваровОтХранителя.ОбработчикДействий(ХозяйственнаяОперацияАкта);
		ТекстШапки = СтрШаблон(НСтр("ru = 'Отразить расхождения в документе ""%1""'"), Обработчик.ПредставлениеОбъекта());
	ИначеЕсли ТипДокумента = "ИсправлениеВозвратаОтКомиссионера" Тогда
		ТекстШапки = НСтр("ru = 'Отразить расхождения в документе ""Поступление товаров от комиссионера""'");
	ИначеЕсли ТипДокумента = "ВозвратТоваровОтХранителяДовозврат" Тогда
		Обработчик = Документы.ПоступлениеТоваровОтХранителя.ОбработчикДействий(ХозяйственнаяОперацияАкта);
		ТекстШапки = СтрШаблон(НСтр("ru = 'Документ ""%1"" по недовозвращенным товарам'"), Обработчик.ПредставлениеОбъекта());
	ИначеЕсли ТипДокумента = "ВозвратТоваровОтКомиссионераДовозврат" Тогда
		ТекстШапки = НСтр("ru = 'Документ ""Поступление товаров от комиссионера"" по недовозвращенным товарам'");
	ИначеЕсли ТипДокумента = "ВозвратТоваровОтХранителяВозвратХранителю" Тогда
		ПредставлениеДокумента = НСтр("ru = 'Передача товаров хранителю'");
		Если ХозяйственнаяОперацияАкта = Перечисления.ХозяйственныеОперации.ПоступлениеОтПереработчика2_5 Тогда
			ПредставлениеДокумента = НСтр("ru = 'Передача сырья переработчику'");
		КонецЕсли;
		ТекстШапки = СтрШаблон(НСтр("ru = 'Документ ""%1"" по излишне возвращенным товарам'"), ПредставлениеДокумента);
	ИначеЕсли ТипДокумента = "ВозвратТоваровОтКомиссионераВозвратКомиссионеру" Тогда
		ТекстШапки = НСтр("ru = 'Документ ""Передача товаров комиссионеру"" по излишне возвращенным товарам'");
	ИначеЕсли ТипДокумента = "ИсправлениеВозвратаТоваровОтКлиента" Тогда
		ТекстШапки = НСтр("ru = 'Отразить расхождения в документе ""Возврат товаров от клиента""'");
	ИначеЕсли ТипДокумента = "ИсправлениеПеремещенияТоваров" Тогда
		ТекстШапки = НСтр("ru = 'Отразить расхождения в документе ""Перемещение товаров""'");
	ИначеЕсли ТипДокумента = "КорректировкаПеремещенияТоваров" Тогда
		ТекстШапки = НСтр("ru = 'Ввести корректировку документа ""Перемещение товаров""'");
	ИначеЕсли ТипДокумента = "ДокументВозврата" Тогда
		Если ИспользоватьЗаявкиНаВозврат Тогда
			ТекстШапки = НСтр("ru = 'Документ ""Заявка на возврат товаров от клиента"" по перепоставленным товарам к возврату'");
		Иначе
			ТекстШапки = НСтр("ru = 'Документ ""Возврат товаров от клиента"" по перепоставленным товарам к возврату'");
		КонецЕсли;
	ИначеЕсли ТипДокумента = "ДокументВозвратаПередачи" Тогда
		Если ИспользоватьЗаявкиНаВозврат
		   Тогда
			ТекстШапки = НСтр("ru = 'Документ ""Заявка на возврат товаров от клиента"" по перепоставленным товарам к возврату'");
		Иначе
			ТекстШапки = НСтр("ru = 'Документ ""Поступление товаров от хранителя"" по перепоставленным товарам к возврату'");
		КонецЕсли;
	ИначеЕсли ТипДокумента = "ДокументВозвратаКомиссионера" Тогда
		Если ИспользоватьЗаявкиНаВозврат Тогда
			ТекстШапки = НСтр("ru = 'Документ ""Заявка на возврат товаров от комиссионера"" по перепоставленным товарам к возврату'");
		Иначе
			ТекстШапки = НСтр("ru = 'Документ ""Поступление товаров от комиссионера"" по перепоставленным товарам к возврату'");
		КонецЕсли;
	ИначеЕсли ТипДокумента = "ВозвратТоваровОтКлиентаДовозврат" Тогда
		ТекстШапки = НСтр("ru = 'Документ ""Возврат товаров от клиента"" по недовозвращенным товарам'");
	ИначеЕсли ТипДокумента = "ЗаказКлиента" Тогда
		ТекстШапки = НСтр("ru = 'Отменить строки документов ""Заказ клиента"" по недопоставленным товарам'");
	ИначеЕсли ТипДокумента = "ЗаказПоставщику" Тогда
		ТекстШапки = НСтр("ru = 'Отменить строки документов ""Заказ поставщику"" по недопоставленным товарам'");
	ИначеЕсли ТипДокумента = "ЗаказНаПеремещение" Тогда
		ТекстШапки = НСтр("ru = 'Отменить строки документов ""Заказ на перемещение"" по недопоставленным товарам'");
	ИначеЕсли ТипДокумента = "ЗаказПередачи" Тогда
		Обработчик = Документы.ПередачаТоваровХранителю.ОбработчикДействий(ХозяйственнаяОперацияАкта);	
		ТекстШапки = СтрШаблон(НСтр("ru = 'Отменить строки документов ""%1"" по недопоставленным товарам'"), Обработчик.СинонимЗаказа());
	ИначеЕсли ТипДокумента = "ИсправлениеЗаявкаНаВозвратТоваров" Тогда
		ТекстШапки = НСтр("ru = 'Отменить строки документов ""Заявка на возврат товаров от клиента"" по недостачам при возврате'");
	ИначеЕсли ТипДокумента = "ИсправлениеЗаявкаНаВозвратТоваровПередачи" Тогда
		Обработчик = Документы.ПоступлениеТоваровОтХранителя.ОбработчикДействий(ХозяйственнаяОперацияАкта);
		ТекстШапки = СтрШаблон(НСтр("ru = 'Отменить строки документов ""%1"" по недостачам при возврате'"), Обработчик.СинонимЗаказа());
	ИначеЕсли ТипДокумента = "ИсправлениеЗаявкаНаВозвратОтКомиссионера" Тогда
		ТекстШапки = НСтр("ru = 'Отменить строки документов ""Заявка на возврат товаров от комиссионера"" по недостачам при возврате'");
	ИначеЕсли ТипДокумента = "РеализацияТоваровИУслуг" Тогда
		ТекстШапки = НСтр("ru = 'Документ ""Реализация товаров и услуг"" для реализации недопоставленного товара'");
	ИначеЕсли ТипДокумента = "РеализацияТоваровИУслугПоВозвратуОтКлиента" Тогда 
		ТекстШапки = НСтр("ru = 'Документ ""Реализация товаров и услуг"" для реализации излишков возврата от клиента'");
	ИначеЕсли ТипДокумента = "ВозвратТоваровПоставщику" Тогда
		ТекстШапки = НСтр("ru = 'Документ ""Возврат товаров поставщику"" для довозврата недовозращенного товара'");
	ИначеЕсли ТипДокумента = "ПриобретениеТоваровУслуг" Тогда 
		ТекстШапки = НСтр("ru = 'Документ ""Приобретение товаров и услуг"" для поступления перепоставленного товара'");
	ИначеЕсли ТипДокумента = "ПриобретениеТоваровУслугДопоставкаПоПоступлению" Тогда
		ТекстШапки = НСтр("ru = 'Документ ""Приобретение товаров и услуг"" для поступления недопоставленного товара'");
	ИначеЕсли ТипДокумента = "ПоступлениеТоваровДопоставкаПоПоступлению" Тогда
		ТекстШапки = НСтр("ru = 'Документ ""Поступление товаров"" для поступления недопоставленного товара'");
	ИначеЕсли ТипДокумента = "ПеремещениеТоваров" Тогда
		ТекстШапки = НСтр("ru = 'Документ ""Перемещение товаров"" на допоставку недопоставленного товара'");
	ИначеЕсли ТипДокумента = "ПеремещениеТоваровВозврат" Тогда
		ТекстШапки = НСтр("ru = 'Документ ""Перемещение товаров"" на возврат перепоставленного товара'");
	ИначеЕсли ТипДокумента = "ПоступлениеТоваровПерепроведениеПослеКорректировки" Тогда
		ТекстШапки = НСтр("ru = 'Требуется перепровести документ ""Поступление товаров"" для отражения изменений имеющихся после оформления документа ""Корректировка приобретения""'");
	ИначеЕсли ТипДокумента = "ПоступлениеТоваровПерепроведениеПослеПриобретения" Тогда
		ТекстШапки = НСтр("ru = 'Требуется перепровести документ ""Поступление товаров"" для отражения изменений внесенных в документ ""Приобретение товаров""'");
	ИначеЕсли ТипДокумента = "СписаниеНедостачТоваров" Тогда
		ТекстШапки = НСтр("ru = 'Документ ""Списание недостач товаров"" для списания непризнанных недостач'");
	ИначеЕсли ТипДокумента = "КорректировкаЗадолженности" Тогда
		ТекстШапки = НСтр("ru = 'Документ ""Корректировка задолженности"" для отражения задолженности сторонней компании'");
	ИначеЕсли ТипДокумента = "ОприходованиеИзлишковТоваров" Тогда
		ТекстШапки = НСтр("ru = 'Документ ""Оприходование излишков товаров"" для оприходования излишков поставленных товаров'");
	ИначеЕсли ТипДокумента = "ИсправлениеПоступления" Тогда
		ТекстШапки = НСтр("ru = 'Отразить расхождения в документе ""Приобретение товаров и услуг""'");
	ИначеЕсли ТипДокумента = "ИзменениеПоступленияТоваров" Тогда
		ТекстШапки = НСтр("ru = 'Отразить расхождения в документе ""Поступление товаров на склад""'");
	ИначеЕсли ТипДокумента = "КорректировкаПоступленияТоваров" Тогда
		ТекстШапки = НСтр("ru = 'Документ ""Поступление товаров на склад""'");
	ИначеЕсли ТипДокумента = "КорректировкаПоступленияТоваровИсправления" Тогда
		ТекстШапки = НСтр("ru = 'Ввести корректировку документа ""Поступление товаров на склад""'");
	ИначеЕсли ТипДокумента = "СписаниеРасхожденийПоступлениеПриобретение" Тогда
		ТекстШапки = НСтр("ru = 'Документ ""Списание расхождений между поступлением и приобретением""'");
	ИначеЕсли ТипДокумента = "ИсправлениеПриемкиТоваровНаХранение" Тогда
			ПредставлениеОбъекта = НСтр("ru = 'Приемка товаров на хранение'");
		ТекстШапки = СтрШаблон(НСтр("ru = 'Отразить расхождения в документе ""%1""'"), ПредставлениеОбъекта);
	ИначеЕсли ТипДокумента = "ВозвратТоваровПоставщикуПоПоступлению" Тогда
		ТекстШапки = НСтр("ru = 'Документ ""Возврат товаров поставщику"" для возврата перепоставленного товара'");
	ИначеЕсли ТипДокумента = "Претензия" Тогда
		ТекстШапки = НСтр("ru = 'Претензия поставщику'");
	КонецЕсли;
	
	Если ТипДокумента = "СписаниеНедостачТоваров"
		Или ТипДокумента = "ОприходованиеИзлишковТоваров"   
		Или ТипДокумента = "ПоступлениеТоваровДопоставкаПоПоступлению"
		Или ТипДокумента = "ОтгрузкаТоваровСХраненияПоПриемке"
		Или ТипДокумента = "ВозвратТоваровПоставщикуПоПоступлению"
		Или ТипДокумента = "СписаниеРасхожденийПоступлениеПриобретение" Тогда
		
		Если Описание.ВыводитьСклад Тогда
			
			СтрокаСклад = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'для склада ""%1"".'"), Описание.Склад);
			ТекстШапки = ТекстШапки + " " + СтрокаСклад;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипДокумента = "ЭлектронныйДокументПодтверждение" Тогда
		ТекстШапки = НСтр("ru = 'Подтвердить полученный электронный документ'");
	ИначеЕсли ТипДокумента = "ЭлектронныйДокументОтклонение" Тогда
		ТекстШапки = НСтр("ru = 'Отклонить полученный электронный документ'");	
	КонецЕсли;
	
	Возврат ТекстШапки;
	
КонецФункции

&НаСервере
Функция ТекстЛегенды(ТипДокумента, ХозяйственнаяОперация = Неопределено)
	
	Если ТипДокумента = "КорректировкаРеализации" Тогда
		Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИсправлениеОшибок Тогда
			Возврат НСтр("ru = 'Необходимо оформить документ ""Корректировка реализации (исправление ошибок)"" для отражения излишков и недостач. Документ является основанием для выставления исправленных первичных документов и исправительного счета-фактуры.'");
		ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон Тогда
			Возврат НСтр("ru = 'Необходимо оформить документ ""Корректировка реализации (по согласованию сторон)"" для отражения излишков и недостач. Документ является основанием для выставления исправленных первичных документов и корректировочного счета-фактуры.'");
		ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияПерепоставленногоТовара Тогда
			Возврат НСтр("ru = 'Необходимо оформить документ ""Корректировка реализации (реализация перепоставленного товара)"" для отражения в учете факта продажи излишне доставленных товаров. Документ является основанием для выставления первичных документов и счета-фактуры. Оформляется на строки акта приемки с вариантами отработки: ""Оформить"" и ""Оформить и вернуть"".'");
		ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратНедопоставленногоТовара Тогда
			Возврат НСтр("ru = 'Необходимо зарегистрировать документ ""Корректировка реализации (возврат недопоставленного товара)"". Выполняется сторнирование в учете факта продажи товаров, которые были отражены при реализации, но не были доставлены. Документ регистрируется на основании первичных документов и счета-фактуры, полученных от клиента. Оформляется на строки акта о расхождениях с вариантами отработки: ""Оформить"" и ""Оформить и допоставить"".'");
		КонецЕсли;
	ИначеЕсли ТипДокумента = "КорректировкаПриобретения" Тогда
		Возврат НСтр("ru = 'Необходимо оформить документ ""Корректировка приобретения"" для отражения излишков и недостач. Документ является основанием для регистрации исправленных первичных документов и исправительного счета-фактуры.'");
	ИначеЕсли ТипДокумента = "ИсправлениеРеализации" Тогда
		Возврат НСтр("ru = 'Необходимо скорректировать документ ""Реализация товаров и услуг"", отразив в нем количество по факту. Следует выполнить для строк акта о расхождениях с вариантами отработки: ""Оформить и вернуть"", ""Оформить"", ""Оформить и допоставить"".'");
	ИначеЕсли ТипДокумента = "ИсправлениеВозвратаТоваровПоставщику" Тогда
		Возврат НСтр("ru = 'Необходимо скорректировать документ ""Возврат товаров поставщику"", отразив в нем количество по факту. Следует выполнить для строк акта о расхождениях с вариантами отработки: ""Оформить и вернуть"", ""Оформить"", ""Оформить и допоставить"".'");
	ИначеЕсли ТипДокумента = "ИсправлениеВозвратаТоваровОтКлиента" Тогда
		Возврат НСтр("ru = 'Необходимо скорректировать документ ""Возврат товаров поставщику"", отразив в нем количество по факту. Следует выполнить для строк акта о расхождениях с вариантами отработки: ""Оформить и вернуть"", ""Оформить"", ""Оформить и допоставить"".'");
	ИначеЕсли ТипДокумента = "ИсправлениеПеремещенияТоваров" Тогда
		Возврат НСтр("ru = 'Необходимо скорректировать документ ""Перемещение товаров"", отразив в нем количество по факту. Следует выполнить для строк акта о расхождениях с вариантами отработки: ""Оформить и вернуть"", ""Оформить"", ""Оформить и допоставить"".'");
	ИначеЕсли ТипДокумента = "КорректировкаПеремещенияТоваров" Тогда
		Возврат НСтр("ru = 'Необходимо ввести корректировочный документ ""Перемещение товаров"", отразив в нем количество по факту. Следует выполнить для строк акта о расхождениях с вариантами отработки: ""Оформить и вернуть"", ""Оформить"", ""Оформить и допоставить"".'");
	ИначеЕсли ТипДокумента = "ДокументВозврата" Тогда
		Если ИспользоватьЗаявкиНаВозврат Тогда
			Возврат НСтр("ru = 'Необходимо оформить документ ""Заявка на возврат товаров от клиента"" по излишкам, отмеченным к возврату клиентом. Оформляется на строки акта о расхождениях с вариантом отработки ""Оформить и вернуть"".'");
		Иначе
			Возврат НСтр("ru = 'Необходимо оформить документ ""Возврат товаров от клиента"" по излишкам, отмеченным к возврату клиентом. Оформляется на строки акта о расхождениях с вариантом отработки ""Оформить и вернуть"".'");
		КонецЕсли;
	ИначеЕсли ТипДокумента = "ДокументВозвратаПередачи" Тогда
		Если ИспользоватьЗаявкиНаВозврат
		   Тогда
			Возврат НСтр("ru = 'Документ ""Заявка на возврат товаров от клиента"" по перепоставленным товарам к возврату'");
		Иначе
			Возврат НСтр("ru = 'Необходимо оформить документ ""Поступление товаров от хранителя"" по излишкам, отмеченным к возврату клиентом. Оформляется на строки акта о расхождениях с вариантом отработки ""Оформить и вернуть"".'");
		КонецЕсли;
	ИначеЕсли ТипДокумента = "ДокументВозвратаКомиссионера" Тогда
		Если ИспользоватьЗаявкиНаВозврат Тогда
			Возврат НСтр("ru = 'Необходимо оформить документ ""Заявка на возврат товаров от комиссионера"" по излишкам, отмеченным к возврату клиентом. Оформляется на строки акта о расхождениях с вариантом отработки ""Оформить и вернуть"".'");
		Иначе
			Возврат НСтр("ru = 'Необходимо оформить документ ""Поступление товаров от комиссионера"" по излишкам, отмеченным к возврату клиентом. Оформляется на строки акта о расхождениях с вариантом отработки ""Оформить и вернуть"".'");
		КонецЕсли;
	ИначеЕсли ТипДокумента = "ВозвратТоваровОтКлиентаДовозврат" Тогда
			Возврат НСтр("ru = 'Необходимо оформить документ ""Возврат товаров от клиента"" по недостачам, отмеченным к довозврату клиентом. Оформляется на строки акта о расхождениях с вариантом отработки ""Оформить и ожидать допоставку"".'");
	ИначеЕсли ТипДокумента = "ЗаказКлиента" Тогда
		Возврат НСтр("ru = 'Необходимо скорректировать документы ""Заказ клиента"", отменив строки с товарами, которые были отражены при реализации, но не были доставлены. Следует выполнить для строк акта о расхождениях с вариантом отработки ""Оформить"".'");
	ИначеЕсли ТипДокумента = "ЗаказПоставщику" Тогда
		Возврат НСтр("ru = 'Необходимо скорректировать документы ""Заказ поставщику"", отменив строки с товарами, которые были отражены при поступлении, но не были доставлены. Следует выполнить для строк акта о расхождениях с вариантом отработки ""Оформить"".'");
	ИначеЕсли ТипДокумента = "ЗаказНаПеремещение" Тогда
		Возврат НСтр("ru = 'Необходимо скорректировать документы ""Заказ на перемещение"", отменив строки с товарами, которые были отражены при перемещении, но не были перемещены. Следует выполнить для строк акта о расхождениях с вариантом отработки ""Оформить"".'");
	ИначеЕсли ТипДокумента = "ЗаказПередачи" Тогда
		Обработчик = Документы.ПередачаТоваровХранителю.ОбработчикДействий(ХозяйственнаяОперацияАкта);
		Возврат СтрШаблон(НСтр("ru = 'Необходимо скорректировать документы ""%1"", отменив строки с товарами, которые были отражены при передачи, но не были доставлены. Следует выполнить для строк акта о расхождениях с вариантом отработки ""Оформить"".'"), Обработчик.СинонимЗаказа());
	ИначеЕсли ТипДокумента = "ИсправлениеЗаявкаНаВозвратТоваров" Тогда
		Возврат НСтр("ru = 'Необходимо скорректировать документы ""Заявка на возврат товаров от клиента"", отменив строки с товарами, по которым были выявлены недостачи при возврате. Следует выполнить для строк акта о расхождениях с вариантом отработки ""Оформить"".'");
	ИначеЕсли ТипДокумента = "ИсправлениеЗаявкаНаВозвратТоваровПередачи" Тогда
		Обработчик = Документы.ПоступлениеТоваровОтХранителя.ОбработчикДействий(ХозяйственнаяОперацияАкта);
		Возврат СтрШаблон(НСтр("ru = 'Необходимо скорректировать документы ""%1"", отменив строки с товарами, по которым были выявлены недостачи при возврате. Следует выполнить для строк акта о расхождениях с вариантом отработки ""Оформить"".'"), Обработчик.СинонимЗаказа());
	ИначеЕсли ТипДокумента = "ИсправлениеЗаявкаНаВозвратОтКомиссионера" Тогда
		Возврат НСтр("ru = 'Необходимо скорректировать документы ""Заявка на возврат товаров от комиссионера"", отменив строки с товарами, по которым были выявлены недостачи при возврате. Следует выполнить для строк акта о расхождениях с вариантом отработки ""Оформить"".'");
	ИначеЕсли ТипДокумента = "РеализацияТоваровИУслуг" Тогда
		Возврат НСтр("ru = 'Необходимо оформить документ ""Реализация товаров и услуг"" по недостачам, отмеченным к допоставке клиенту. Оформляется на строки акта о расхождениях с вариантом отработки ""Оформить и допоставить"".'");
	ИначеЕсли ТипДокумента = "РеализацияТоваровИУслугПоВозвратуОтКлиента" Тогда
		Возврат НСтр("ru = 'Необходимо оформить документ ""Реализация товаров и услуг"" по излишкам, отмеченным к возврату клиенту. Оформляется на строки акта о расхождениях с вариантом отработки ""Оформить и вернуть"".'");
	ИначеЕсли ТипДокумента = "ВозвратТоваровПоставщику" Тогда
		Возврат НСтр("ru = 'Необходимо оформить документ ""Возврат товаров поставщику"" по недостачам, отмеченным к допоставке поставщику. Оформляется на строки акта о расхождениях с вариантом отработки ""Оформить и допоставить"".'");
	ИначеЕсли ТипДокумента = "ПриобретениеТоваровУслуг" Тогда
		Возврат НСтр("ru = 'Необходимо оформить документ ""Приобретение товаров и услуг"" по излишкам, отмеченным к возврату поставщиком. Оформляется на строки акта о расхождениях с вариантом отработки ""Оформить и вернуть"".'");
	ИначеЕсли ТипДокумента = "ОтгрузкаТоваровСХранения" Тогда
			ПредставлениеОбъекта    = НСтр("ru = 'Отгрузка товаров с хранения'");
			ПредставлениеПоставщика = НСтр("ru = 'поставщику'");
		Возврат СтрШаблон(НСтр("ru = 'Необходимо оформить документ ""%1"" по недостачам, отмеченным к допоставке %2. Оформляется на строки акта о расхождениях с вариантом отработки ""Оформить и допоставить"".'"), ПредставлениеОбъекта, ПредставлениеПоставщика);
	ИначеЕсли ТипДокумента = "ИсправлениеОтгрузкаТоваровСХранения" Тогда
			ПредставлениеОбъекта = НСтр("ru = 'Отгрузка товаров с хранения'");
		Возврат СтрШаблон(НСтр("ru = 'Необходимо скорректировать документ ""%1"", отразив в нем количество по факту. Следует выполнить для строк акта о расхождениях с вариантами отработки: ""Оформить и вернуть"", ""Оформить"", ""Оформить и допоставить"".'"), ПредставлениеОбъекта);
	ИначеЕсли ТипДокумента = "ОтгрузкаТоваровСХраненияПоПриемке" Тогда
			ПредставлениеОбъекта    = НСтр("ru = 'Отгрузка товаров с хранения'");
			ПредставлениеПоставщика = НСтр("ru = 'поставщику'");
		Возврат СтрШаблон(НСтр("ru = 'Необходимо оформить документ ""%1"" по перепоставленному товару, отмеченному к возврату %2. Оформляется на строки акта о расхождениях с вариантом отработки ""Оформить и вернуть"".'"), ПредставлениеОбъекта, ПредставлениеПоставщика);
	ИначеЕсли ТипДокумента = "ИсправлениеПередачи" Тогда
		Обработчик = Документы.ПередачаТоваровХранителю.ОбработчикДействий(ХозяйственнаяОперацияАкта);
		Возврат СтрШаблон(НСтр("ru = 'Необходимо скорректировать документ ""%1"", отразив в нем количество по факту. Следует выполнить для строк акта о расхождениях с вариантами отработки: ""Оформить и вернуть"", ""Оформить"", ""Оформить и допоставить"".'"), Обработчик.ПредставлениеОбъекта());
	ИначеЕсли ТипДокумента = "ПередачаТоваровХранителю" Тогда
		Обработчик = Документы.ПередачаТоваровХранителю.ОбработчикДействий(ХозяйственнаяОперацияАкта);
		Возврат СтрШаблон(НСтр("ru = 'Необходимо оформить документ ""%1"" по недостачам, отмеченным к допоставке клиенту. Оформляется на строки акта о расхождениях с вариантом отработки ""Оформить и допоставить"".'"), Обработчик.ПредставлениеОбъекта());
	ИначеЕсли ТипДокумента = "ПриемкаТоваровНаХранение" Тогда
			ПредставлениеОбъекта    = НСтр("ru = 'Приемка товаров на хранение'");
			ПредставлениеПоставщика = НСтр("ru = 'поставщиком'");
		Возврат СтрШаблон(НСтр("ru = 'Необходимо оформить документ ""%1"" по излишкам, отмеченным к возврату %2. Оформляется на строки акта о расхождениях с вариантом отработки ""Оформить и вернуть"".'"), ПредставлениеОбъекта, ПредставлениеПоставщика);
	ИначеЕсли ТипДокумента = "ПриемкаТоваровНаХранениеДопоставкаПоПриемке" Тогда
			ПредставлениеОбъекта = НСтр("ru = 'Приемка товаров на хранение'");
		Возврат СтрШаблон(НСтр("ru = 'Необходимо оформить документ ""%1"" по недостачам, для которых требуется допоставка. Оформляется на строки акта о расхождениях с вариантом отработки ""Оформить и ожидать допоставку"".'"), ПредставлениеОбъекта);
	ИначеЕсли ТипДокумента = "ИсправлениеВозвратаТоваровОтХранителя" Тогда
		Обработчик = Документы.ПоступлениеТоваровОтХранителя.ОбработчикДействий(ХозяйственнаяОперацияАкта);
		Возврат СтрШаблон(НСтр("ru = 'Необходимо скорректировать документ ""%1"", отразив в нем количество по факту. Следует выполнить для строк акта о расхождениях с вариантами отработки: ""Оформить и вернуть"", ""Оформить"", ""Оформить и допоставить"".'"), Обработчик.ПредставлениеОбъекта());
	ИначеЕсли ТипДокумента = "ВозвратТоваровОтХранителяДовозврат" Тогда
		Обработчик = Документы.ПоступлениеТоваровОтХранителя.ОбработчикДействий(ХозяйственнаяОперацияАкта);
		Возврат СтрШаблон(НСтр("ru = 'Необходимо оформить документ ""%1"" по недостачам, отмеченным к довозврату клиентом. Оформляется на строки акта о расхождениях с вариантом отработки ""Оформить и ожидать допоставку"".'"), Обработчик.ПредставлениеОбъекта());
	ИначеЕсли ТипДокумента = "ВозвратТоваровОтХранителяВозвратХранителю" Тогда
		ПредставлениеДокумента = НСтр("ru = 'Передача товаров хранителю'");
		Если ХозяйственнаяОперацияАкта = Перечисления.ХозяйственныеОперации.ПоступлениеОтПереработчика2_5 Тогда
			ПредставлениеДокумента = НСтр("ru = 'Передача сырья переработчику'");
		КонецЕсли;
		Возврат СтрШаблон(НСтр("ru = 'Необходимо оформить документ ""%1"" по излишкам, отмеченным к возврату. Оформляется на строки акта о расхождениях с вариантом отработки ""Оформить и вернуть"".'"), ПредставлениеДокумента);
	ИначеЕсли ТипДокумента = "ПриобретениеТоваровУслугДопоставкаПоПоступлению" Тогда
		Возврат НСтр("ru = 'Необходимо оформить документ ""Приобретение товаров и услуг"" по недостачам, для которых требуется допоставка. Оформляется на строки акта о расхождениях с вариантом отработки ""Оформить и ожидать допоставку"".'");
	ИначеЕсли ТипДокумента = "ПоступлениеТоваровДопоставкаПоПоступлению" Тогда
		Возврат НСтр("ru = 'Необходимо оформить документ ""Поступление товаров"" по недостачам, для которых требуется допоставка. Оформляется на строки акта о расхождениях с вариантами отработки ""Оформить и ожидать допоставку"", ""Ожидать допоставку без оформления"".'");
	ИначеЕсли ТипДокумента = "ПеремещениеТоваров" Тогда
		Возврат НСтр("ru = 'Необходимо оформить документ ""Перемещение товаров"" на допоставку недопоставленного товара на склад-получатель. Оформляется на строки акта о расхождениях с вариантом отработки ""Оформить и вернуть"", ""Оформить"".'");
	ИначеЕсли ТипДокумента = "ПеремещениеТоваровВозврат" Тогда
		Возврат НСтр("ru = 'Необходимо оформить документ ""Перемещение товаров"" на возврат излишков со склада-получателя на склад-отправитель. Оформляется на строки акта о расхождениях с вариантом отработки ""Оформить и вернуть"".'");
	ИначеЕсли ТипДокумента = "СписаниеНедостачТоваров" Тогда
		Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи Тогда
			Возврат НСтр("ru = 'Необходимо оформить документ ""Списание недостач товаров"" для списания  непризнанных недостач. Оформляется на строки акта о расхождениях с вариантом отработки ""Списать недостачи"".'");
		Иначе
			Возврат НСтр("ru = 'Необходимо оформить документ ""Списание недостач товаров"" для списания на прочие расходы непризнанных недостач. Оформляется на строки акта о расхождениях с вариантом отработки ""По вине сторонней компании"" или ""За наш счет"".'");
		КонецЕсли;
	ИначеЕсли ТипДокумента = "ПоступлениеТоваровПерепроведениеПослеКорректировки" Тогда
		Возврат НСтр("ru = 'Требуется перепровести документ ""Поступление товаров"" для отражения изменений имеющихся после оформления документа ""Корректировка приобретения""'");
	ИначеЕсли ТипДокумента = "ПоступлениеТоваровПерепроведениеПослеПриобретения" Тогда
		Возврат НСтр("ru = 'Требуется перепровести документ ""Поступление товаров"" для отражения изменений внесенных в документ ""Приобретение товаров""'");
	ИначеЕсли ТипДокумента = "КорректировкаЗадолженности" Тогда
		Возврат НСтр("ru = 'Необходимо оформить документ ""Корректировка задолженности"" для отражения задолженности поставщика по недостачам, произошедшим по его вине. Оформляется на строки акта о расхождениях с вариантом отработки ""Списать за счет поставщика"".'");
	ИначеЕсли ТипДокумента = "ОприходованиеИзлишковТоваров" Тогда
		Возврат НСтр("ru = 'Необходимо оформить документ ""Оприходование излишков товаров"" для оприходования излишков товаров. Оформляется на строки акта о расхождениях с вариантом отработки ""На прочие доходы"".'");
	ИначеЕсли ТипДокумента = "ИсправлениеПоступления" Тогда
		Возврат НСтр("ru = 'Необходимо скорректировать документ ""Приобретение товаров и услуг"", отразив в нем количество по факту. Следует выполнить для строк акта о расхождениях с вариантами отработки: ""Оформить и вернуть"", ""Оформить"", ""Оформить и ожидать допоставку"".'");
	ИначеЕсли ТипДокумента = "ИзменениеПоступленияТоваров" Тогда
		Возврат НСтр("ru = 'Необходимо скорректировать документ ""Поступление товаров на склад"", отразив в нем количество по факту. Следует выполнить для строк акта о расхождениях с вариантами отработки: ""Вернуть без оформления"", ""На прочие доходы"", ""Списать за наш счет"", ""Списать за счет сторонней компании"".'");
	ИначеЕсли ТипДокумента = "КорректировкаПоступленияТоваров" Тогда
		Возврат НСтр("ru = 'Необходимо ввести корректировочный документ ""Поступление товаров на склад"", отразив в нем количество по факту. Следует выполнить для строк акта о расхождениях с вариантами отработки: ""Вернуть без оформления"", ""На прочие доходы"", ""Списать за наш счет"", ""Списать за счет сторонней компании"".'");
	ИначеЕсли ТипДокумента = "КорректировкаПоступленияТоваровИсправления" Тогда
		Возврат НСтр("ru = 'Необходимо ввести корректировочный документ ""Поступление товаров на склад"", отразив в нем количество по факту. Следует выполнить для строк акта о расхождениях с вариантами отработки: ""Вернуть без оформления"", ""На прочие доходы"", ""Списать за наш счет"", ""Списать за счет сторонней компании"".'");
	ИначеЕсли ТипДокумента = "СписаниеРасхожденийПоступлениеПриобретение" Тогда
		Возврат НСтр("ru = 'Необходимо оформить документ ""Списание расхождений между поступлением и приобретением"", отразив в нем расхождения. Следует выполнить для строк акта о расхождениях с вариантами отработки: ""На прочие доходы"", ""Списать за наш счет"", ""Списать за счет сторонней компании"".'");
	ИначеЕсли ТипДокумента = "ИсправлениеПриемкиТоваровНаХранение" Тогда
			ПредставлениеОбъекта = НСтр("ru = 'Приемка товаров на хранение'");
		Возврат СтрШаблон(НСтр("ru = 'Необходимо скорректировать документ ""%1"", отразив в нем количество по факту. Следует выполнить для строк акта о расхождениях с вариантами отработки: ""Оформить и вернуть"", ""Оформить"", ""Оформить и ожидать допоставку"".'"), ПредставлениеОбъекта);
	ИначеЕсли ТипДокумента = "ВозвратТоваровПоставщикуПоПоступлению" Тогда
		Возврат НСтр("ru = 'Необходимо оформить документ ""Возврат товаров поставщику"" по перепоставленному товару, отмеченному к возврату поставщику. Оформляется на строки акта о расхождениях с вариантом отработки ""Оформить и вернуть"".'");
	ИначеЕсли ТипДокумента = "ЭлектронныйДокументПодтверждение" Тогда
		Возврат НСтр("ru = 'Необходимо подтвердить полученный электронный документ, так как для отражения расхождения оформляется документ ""Корректировка приобретения"".'");
	ИначеЕсли ТипДокумента = "ЭлектронныйДокументОтклонение" Тогда
		Возврат НСтр("ru = 'Необходимо отклонить полученный электронный документ, так как для отражения расхождения изменяется исходный документ поступления.'");
	ИначеЕсли ТипДокумента = "Претензия" Тогда
		Возврат НСтр("ru = 'Необходимо создать элемент справочника ""Претензии"" для отражения расчетов с поставщиком по расхождениям.'");
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ВыводитьЛегендуПриИзмененииНаСервере()
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Обработка.РаботаСАктамиРасхождений", "ВыводитьЛегенду", ВыводитьЛегенду);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеДоступностью()

	Элементы.ТабличныйДокумент.ТолькоПросмотр = ЕстьОшибка;

КонецПроцедуры 

&НаСервере
Функция НеВыводитьВОтчет(Имя, Ссылка, ДополнительныйПараметр = Неопределено)
	
	Отбор = Новый Структура(
		"Имя, Ссылка, ДополнительныйПараметр", Имя, Ссылка, ДополнительныйПараметр);
	
	НайденныеСтроки = ВыведенныеДокументы.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ВыведенныеДокументы.Добавить(), Отбор);
	
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Функция СтруктурыОписанияВыводимогоВОтчетДействия()
	
	СтруктураОписания = Новый Структура(
	                 "ОснованиеАкта, АктОРасхождениях, ИмяКоманды, ВариантДействия,
	                 |СпособОтражения, Склад, ВыводитьСклад, ДокументЭДО, СтатусЭДО, Заказ, СуммаНедопоставки, СуммаПерепоставки");
	
	СтруктураОписания.ВыводитьСклад = Ложь;
	
	Возврат СтруктураОписания;
	
КонецФункции

// Конструктор таблицы оформляемых документов.
// 
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * ВидДокумента           - Строка - вид оформляемого документа.
// * Склад                  - СправочникСсылка.Склады - склад оформляемого документа.
// * ОформляемыеДокументы   - Массив - оформляемые документы. 
// * Описание               - Строка - описание действия по оформлению. 
//
&НаСервере
Функция НовыйОформляемыеДокументыПоАкту()
	
	ТипМассив    = Новый ОписаниеТипов("Массив");
	ТипСтруктура = Новый ОписаниеТипов("Структура");
	ТипСклад     = Новый ОписаниеТипов("СправочникСсылка.Склады");
	ТипСтрока    = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100));
	
	ОформляемыеДокументыПоАкту = Новый ТаблицаЗначений;
	ОформляемыеДокументыПоАкту.Колонки.Добавить("ВидДокумента",         ТипСтрока);
	ОформляемыеДокументыПоАкту.Колонки.Добавить("Склад",                ТипСклад);
	ОформляемыеДокументыПоАкту.Колонки.Добавить("ОформляемыеДокументы", ТипМассив);
	ОформляемыеДокументыПоАкту.Колонки.Добавить("Описание",             ТипСтруктура);
	
	Возврат ОформляемыеДокументыПоАкту;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаАктОРасхожденияхПослеОтгрузкиТоваровСХранения()

	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	АктОРасхожденияхПослеОтгрузкиТовары.Действие   КАК Действие,
	|	АктОРасхожденияхПослеОтгрузкиТовары.Реализация КАК ОтгрузкаТоваровСХранения
	|
	|ПОМЕСТИТЬ Действия
	|ИЗ
	|	Документ.АктОРасхожденияхПослеОтгрузки.Товары КАК АктОРасхожденияхПослеОтгрузкиТовары
	|ГДЕ
	|	АктОРасхожденияхПослеОтгрузкиТовары.Ссылка = &АктОРасхождениях
	|	И АктОРасхожденияхПослеОтгрузкиТовары.КоличествоПоДокументу - АктОРасхожденияхПослеОтгрузкиТовары.Количество <> 0
	|	И АктОРасхожденияхПослеОтгрузкиТовары.Действие <> ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПерепоставленноеДарится)
	|	И АктОРасхожденияхПослеОтгрузкиТовары.Действие <> ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.НедостачаНеПризнана)
	|	И АктОРасхожденияхПослеОтгрузкиТовары.Действие <> ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////1
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Действия.Действие                          КАК Действие,
	|	Действия.ОтгрузкаТоваровСХранения          КАК Основание,
	|	ЛОЖЬ                                       КАК ПоВинеСтороннейКомпании,
	|	Действия.ОтгрузкаТоваровСХранения.ПоЗаказу КАК ПоЗаказам,
	|	НЕОПРЕДЕЛЕНО                               КАК Заказ
	|ИЗ
	|	Действия КАК Действия
	|ИТОГИ ПО
	|	ОтгрузкаТоваровСХранения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////2
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПриемкаТоваровНаХранение.ДопоступлениеПоДокументу КАК Основание,
	|	ПриемкаТоваровНаХранение.Ссылка                   КАК ПриемкаТоваровНаХранение
	|ИЗ
	|	Документ.ПриемкаТоваровНаХранение КАК ПриемкаТоваровНаХранение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Действия КАК Действия
	|		ПО ПриемкаТоваровНаХранение.ДопоступлениеПоДокументу = Действия.ОтгрузкаТоваровСХранения
	|ГДЕ
	|	ПриемкаТоваровНаХранение.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////3
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Документ.Ссылка КАК ОтгрузкаТоваровСХранения,
	|	Документ.ДовозвратПоВозврату КАК Основание
	|ИЗ
	|	Действия КАК Действия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтгрузкаТоваровСХранения КАК Документ
	|		ПО (Документ.Проведен)
	|			И Действия.ОтгрузкаТоваровСХранения = Документ.ДовозвратПоВозврату";
	
КонецФункции

&НаСервере
Функция ТекстЗапросаАктОРасхожденияхПослеПриемкиТоваровНаХранение(ПраваДоступаНаТаблицы, СоответствиеНаборовДанных)
	
	ТекущийНомер = 1;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	АктОРасхожденияхПослеПриемкиТовары.Действие                КАК Действие,
	|	АктОРасхожденияхПослеПриемкиТовары.ДокументОснование       КАК Основание,
	|	АктОРасхожденияхПослеПриемкиТовары.Склад                   КАК Склад,
	|	АктОРасхожденияхПослеПриемкиТовары.ПоВинеСтороннейКомпании КАК ПоВинеСтороннейКомпании
	|
	|ПОМЕСТИТЬ Действия
	|ИЗ
	|	Документ.АктОРасхожденияхПослеПриемки.Товары КАК АктОРасхожденияхПослеПриемкиТовары
	|ГДЕ
	|	АктОРасхожденияхПослеПриемкиТовары.Ссылка = &АктОРасхождениях
	|	И АктОРасхожденияхПослеПриемкиТовары.КоличествоПоДокументу - АктОРасхожденияхПослеПриемкиТовары.Количество <> 0
	|	И АктОРасхожденияхПослеПриемкиТовары.Действие <> ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ВернутьПерепоставленноеБезОформления)
	|	И АктОРасхожденияхПослеПриемкиТовары.Действие <> ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОжидатьДопоставкуБезОформления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////1
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Действия.Действие                       КАК Действие,
	|	Действия.Основание                      КАК Основание,
	|	Действия.ПоВинеСтороннейКомпании        КАК ПоВинеСтороннейКомпании,
	|	Действия.Основание.ПоступлениеПоЗаказам КАК ПоЗаказам,
	|	Действия.Склад                          КАК Склад,
	|	НЕОПРЕДЕЛЕНО                            КАК Заказ
	|ИЗ
	|	Действия КАК Действия
	|
	|ИТОГИ ПО
	|	Основание
	|";
	
	Если ПраваДоступаНаТаблицы.ЧтениеОтгрузкаТоваровСХранения Тогда
		
		ТекущийНомер = ТекущийНомер + 1;
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ОтгрузкаТоваровСХранения.Основание КАК Основание,
		|	ОтгрузкаТоваровСХранения.Ссылка    КАК ОтгрузкаСХранения,
		|	ОтгрузкаТоваровСХранения.Склад     КАК Склад
		|ИЗ
		|	Документ.ОтгрузкаТоваровСХранения КАК ОтгрузкаТоваровСХранения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Действия КАК Действия
		|		ПО ОтгрузкаТоваровСХранения.Проведен
		|			И ОтгрузкаТоваровСХранения.Основание = &АктОРасхождениях
		|			И ОтгрузкаТоваровСХранения.Склад = Действия.Склад";
		
		СоответствиеНаборовДанных.Вставить("ОснованияОтгрузки", ТекущийНомер);
		
	КонецЕсли;
	
	Если ПраваДоступаНаТаблицы.ЧтениеЗаказПоставщику
	Тогда
		
		ТекущийНомер = ТекущийНомер + 1;
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	АктОРасхожденияхПослеПриемкиТовары.ЗаказПоставщику   КАК ЗаказПоставщику,
		|	АктОРасхожденияхПослеПриемкиТовары.ДокументОснование КАК ДокументПоступления
		|ИЗ
		|	Документ.АктОРасхожденияхПослеПриемки.Товары КАК АктОРасхожденияхПослеПриемкиТовары
		|ГДЕ
		|	АктОРасхожденияхПослеПриемкиТовары.КоличествоУпаковокПоДокументу <> АктОРасхожденияхПослеПриемкиТовары.КоличествоУпаковок
		|	И АктОРасхожденияхПослеПриемкиТовары.Действие = ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьНедостачу)
		|	И АктОРасхожденияхПослеПриемкиТовары.Ссылка = &АктОРасхождениях
		|	И &ОтборЗаказы
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаказПоставщику УБЫВ
		|";
		
			
			ТекстОтборЗаказы =
			"АктОРасхожденияхПослеПриемкиТовары.ЗаказПоставщику <> ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
			|	И ТИПЗНАЧЕНИЯ(АктОРасхожденияхПослеПриемкиТовары.ЗаказПоставщику) = ТИП(Документ.ЗаказПоставщику)";
			
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборЗаказы", ТекстОтборЗаказы);
		
		СоответствиеНаборовДанных.Вставить("ПоступленияЗаказы", ТекущийНомер);
		
	КонецЕсли;
	
	Если ПраваДоступаНаТаблицы.ЧтениеПриемкаТоваровНаХранение Тогда
		
		ТекущийНомер = ТекущийНомер + 1;
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПриемкаТоваровНахранение.Ссылка                   КАК ОформленноеПоступление,
		|	ПриемкаТоваровНахранение.ДопоступлениеПоДокументу КАК ДопоставкаПоПоступлению
		|ИЗ
		|	Действия КАК Действия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемкаТоваровНахранение КАК ПриемкаТоваровНахранение
		|		ПО ПриемкаТоваровНахранение.Проведен
		|			И Действия.Основание = ПриемкаТоваровНахранение.ДопоступлениеПоДокументу
		|";
		
		СоответствиеНаборовДанных.Вставить("ПоступленияПоступления", ТекущийНомер);
		
	КонецЕсли;
	
	Если ПраваДоступаНаТаблицы.ЧтениеСписаниеНедостачТоваров Тогда
		
		ТекущийНомер = ТекущийНомер + 1;
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СписаниеНедостачТоваров.Ссылка    КАК Списание,
		|	СписаниеНедостачТоваров.Склад     КАК Склад,
		|	СписаниеНедостачТоваров.Основание КАК Основание
		|ИЗ
		|	Действия КАК Действия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеНедостачТоваров КАК СписаниеНедостачТоваров
		|		ПО СписаниеНедостачТоваров.Проведен
		|			И Действия.Основание = СписаниеНедостачТоваров.Основание
		|			И Действия.Склад = СписаниеНедостачТоваров.Склад
		|";
		
		СоответствиеНаборовДанных.Вставить("ОснованияСписанияНедостач", ТекущийНомер);
		
	КонецЕсли;
	
	Если ПраваДоступаНаТаблицы.ЧтениеОприходованиеИзлишковТоваров Тогда
		
		ТекущийНомер = ТекущийНомер + 1;
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ОприходованиеИзлишковТоваров.Основание КАК Основание,
		|	ОприходованиеИзлишковТоваров.Ссылка    КАК Оприходование,
		|	ОприходованиеИзлишковТоваров.Склад     КАК Склад
		|ИЗ
		|	Действия КАК Действия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОприходованиеИзлишковТоваров КАК ОприходованиеИзлишковТоваров
		|		ПО ОприходованиеИзлишковТоваров.Проведен
		|			И ОприходованиеИзлишковТоваров.Основание = Действия.Основание
		|			И ОприходованиеИзлишковТоваров.Склад = Действия.Склад
		|";
		
		СоответствиеНаборовДанных.Вставить("ОснованияОприходования", ТекущийНомер);
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаАктОРасхожденияхПослеВозвратаОтХранителя(ПраваДоступаНаТаблицы, СоответствиеНаборовДанных)

	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	АктОРасхожденияхПослеПриемкиТовары.Действие,
	|	ВЫРАЗИТЬ(АктОРасхожденияхПослеПриемкиТовары.ДокументОснование КАК Документ.ПоступлениеТоваровОтХранителя) КАК Основание,
	|	АктОРасхожденияхПослеПриемкиТовары.Склад КАК Склад,
	|	АктОРасхожденияхПослеПриемкиТовары.ПоВинеСтороннейКомпании КАК ПоВинеСтороннейКомпании
	|ПОМЕСТИТЬ Действия
	|ИЗ
	|	Документ.АктОРасхожденияхПослеПриемки.Товары КАК АктОРасхожденияхПослеПриемкиТовары
	|ГДЕ
	|	АктОРасхожденияхПослеПриемкиТовары.Ссылка = &АктОРасхождениях
	|	И АктОРасхожденияхПослеПриемкиТовары.КоличествоПоДокументу - АктОРасхожденияхПослеПриемкиТовары.Количество <> 0
	|	И АктОРасхожденияхПослеПриемкиТовары.Действие <> ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ВернутьПерепоставленноеБезОформления)
	|	И АктОРасхожденияхПослеПриемкиТовары.Действие <> ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОжидатьДопоставкуБезОформления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////1
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Действия.Действие КАК Действие,
	|	Действия.Основание КАК Основание,
	|	Действия.ПоВинеСтороннейКомпании КАК ПоВинеСтороннейКомпании,
	|	НЕ Действия.Основание.Распоряжение В (
	|					ЗНАЧЕНИЕ(Документ.ЗаявкаНаВозвратТоваровОтКлиента.ПустаяСсылка),
	|					НЕОПРЕДЕЛЕНО) КАК ПоЗаказам,
	|	Действия.Склад КАК Склад,
	|	Действия.Основание.Распоряжение КАК Заказ
	|ИЗ
	|	Действия КАК Действия
	|ИТОГИ ПО
	|	Основание
	|";
	
	ТекущийНомер = 1;
	
	Если ПраваДоступаНаТаблицы.ЧтениеПередач Тогда
		
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПередачаТоваровХранителю.ДопоставкаПоПередаче КАК Основание,
		|	ПередачаТоваровХранителю.Ссылка КАК Передача
		|ИЗ
		|	Документ.ПередачаТоваровХранителю КАК ПередачаТоваровХранителю
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Действия КАК Действия
		|		ПО ПередачаТоваровХранителю.ДопоставкаПоПередаче = Действия.Основание
		|ГДЕ
		|	ПередачаТоваровХранителю.Проведен
		|";
		
		ТекущийНомер = ТекущийНомер + 1;
		СоответствиеНаборовДанных.Вставить("ВозвратыОтХранителейПередачи", ТекущийНомер);
		
	КонецЕсли;
	
	Если ПраваДоступаНаТаблицы.ЧтениеПоступлениеТоваровОтХранителя Тогда
		
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПоступлениеОтХранителя.Ссылка КАК Поступление,
		|	ПоступлениеОтХранителя.ДовозвратПоПоступлению КАК Основание
		|ИЗ
		|	Действия КАК Действия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровОтХранителя КАК ПоступлениеОтХранителя
		|		ПО Действия.Основание = ПоступлениеОтХранителя.ДовозвратПоПоступлению
		|ГДЕ
		|	ПоступлениеОтХранителя.Проведен
		|";
		
		ТекущийНомер = ТекущийНомер + 1;
		СоответствиеНаборовДанных.Вставить("ВозвратыОтХранителейПоступления", ТекущийНомер);
		
	КонецЕсли;
	
	Если ПраваДоступаНаТаблицы.ЧтениеОприходованиеИзлишковТоваров Тогда
	
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();

		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ОприходованиеИзлишковТоваров.Ссылка КАК Оприходование,
		|	ОприходованиеИзлишковТоваров.Склад КАК Склад,
		|	ОприходованиеИзлишковТоваров.Основание КАК Основание
		|ИЗ
		|	Действия КАК Действия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОприходованиеИзлишковТоваров КАК ОприходованиеИзлишковТоваров
		|		ПО (ОприходованиеИзлишковТоваров.Проведен)
		|			И Действия.Основание = ОприходованиеИзлишковТоваров.Основание
		|			И Действия.Склад     = ОприходованиеИзлишковТоваров.Склад
		|";
		
		ТекущийНомер = ТекущийНомер + 1;
		СоответствиеНаборовДанных.Вставить("ОснованияОприходования", ТекущийНомер);
	
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Процедура ВывестиИсправлениеПриемкаТоваровНахранение(СтрокаДействия, Макет, Описание)
	
	Если НеВыводитьВОтчет("ВывестиИсправлениеПриемкаТоваровНахранение", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;
	МассивОформленныхДокументов.Добавить(СтрокаДействия.Основание);
	
	ВывестиДокументКОформлению(
		"ИсправлениеПриемкиТоваровНаХранение",
		1,
		Макет,
		МассивОформленныхДокументов,
		ХозяйственнаяОперацияАкта,
		Ложь,
		Описание);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиИсправлениеОтгрузкаТоваровСХранения(СтрокаДействия, Макет, Описание)
	
	Если НеВыводитьВОтчет("ВывестиИсправлениеОтгрузкаТоваровСХранения", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;
	МассивОформленныхДокументов.Добавить(СтрокаДействия.Основание);
	
	ВывестиДокументКОформлению(
		"ИсправлениеОтгрузкаТоваровСХранения",
		1,
		Макет,
		МассивОформленныхДокументов,
		ХозяйственнаяОперацияАкта,
		Ложь,
		Описание);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДокументПриемкаТоваровНаХранение(СтрокаДействия, Макет, Описание)
	
	Если НеВыводитьВОтчет("ВывестиДокументПриемкаТоваровНаХранение", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;
	
	Отбор                = Новый Структура("Основание", СтрокаДействия.Основание);
	ОформленныеДокументы = ДопоступленияПоОтгрузкамТоваровСХранения.НайтиСтроки(Отбор);
	
	Если ОформленныеДокументы.Количество() = 0 Тогда
		МассивОформленныхДокументов.Добавить(Документы.ПриемкаТоваровНаХранение.ПустаяСсылка());
	Иначе
		Для Каждого ОформленныйДокумент Из ОформленныеДокументы Цикл
			МассивОформленныхДокументов.Добавить(ОформленныйДокумент.ПриемкаТоваровНаХранение);
		КонецЦикла;
	КонецЕсли;
	
	ХозяйственнаяОперация = Неопределено;
	
	ВывестиДокументКОформлению(
		"ПриемкаТоваровНаХранение",
		2,
		Макет,
		МассивОформленныхДокументов,
		ХозяйственнаяОперация,
		Истина,
		Описание);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДокументДопоставкиПоПриемкеТоваровНахранение(СтрокаДействия, Макет, Описание)
	
	Если НеВыводитьВОтчет("ВывестиДокументДопоставкиПоПриемкеТоваровНахранение", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;
	
	ОтборПоПоступлениям  = Новый Структура("ДопоставкаПоПоступлению", СтрокаДействия.Основание);
	ОформленныеДокументы = ПоступленияПоступления.НайтиСтроки(ОтборПоПоступлениям);
	
	Если ОформленныеДокументы.Количество() = 0 Тогда
		МассивОформленныхДокументов.Добавить(Документы.ПриемкаТоваровНаХранение.ПустаяСсылка());
	Иначе
		Для Каждого ОформленныйДокумент Из ОформленныеДокументы Цикл
			МассивОформленныхДокументов.Добавить(ОформленныйДокумент.ОформленноеПоступление);
		КонецЦикла;
	КонецЕсли;
	
	ВывестиДокументКОформлению(
		"ПриемкаТоваровНаХранениеДопоставкаПоПриемке",
		2,
		Макет,
		МассивОформленныхДокументов,
		ХозяйственнаяОперацияАкта,
		Истина,
		Описание);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДокументОтгрузкаТоваровСХраненияДляВозвратаНедопоставленногоТовара(СтрокаДействия, Макет, Описание)
	
	Если НеВыводитьВОтчет("ВывестиДокументОтгрузкаТоваровСХраненияДляВозвратаНедопоставленногоТовара", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;
	
	Отбор                = Новый Структура("Основание", СтрокаДействия.Основание);
	ОформленныеДокументы = ВозвратыПоОтгрузкамТоваровСХранения.НайтиСтроки(Отбор);
	
	Если ОформленныеДокументы.Количество() = 0 Тогда
		МассивОформленныхДокументов.Добавить(Документы.ОтгрузкаТоваровСХранения.ПустаяСсылка());
	Иначе
		Для Каждого ОформленныйДокумент Из ОформленныеДокументы Цикл
			МассивОформленныхДокументов.Добавить(ОформленныйДокумент.ОтгрузкаТоваровСХранения);
		КонецЦикла;
	КонецЕсли;
	
	ВывестиДокументКОформлению(
		"ОтгрузкаТоваровСХранения",
		2,
		Макет,
		МассивОформленныхДокументов,
		ХозяйственнаяОперацияАкта,
		Истина,
		Описание);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДокументыОприходованияИзлишков(СтрокаДействия, Макет, Описание)
	
	Если НеВыводитьВОтчет("ВывестиДокументОприходованиеИзлишков", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивСкладовСписания  = Новый Массив;
	ПараметрыПоискаСкладов = Новый Структура("ВариантДействия",
		Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОтнестиПерепоставленноеНаПрочиеДоходы);
	НайденныеСтроки        = СтрокаДействия.ДействияСклады.НайтиСтроки(ПараметрыПоискаСкладов);
	
	Для Каждого СтрокаСоСписанием Из НайденныеСтроки Цикл
		Если МассивСкладовСписания.Найти(СтрокаСоСписанием.Склад) = Неопределено Тогда
			МассивСкладовСписания.Добавить(СтрокаСоСписанием.Склад);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СкладСписания Из МассивСкладовСписания Цикл
		
		МассивОформленныхДокументов = Новый Массив;
		
		Описание.Склад         = СкладСписания;
		Описание.ВыводитьСклад = Истина;
		
		ОтборПоСкладу = Новый Структура("Склад", СкладСписания);
		ОформленныеДокументы = ОснованияОприходования.НайтиСтроки(ОтборПоСкладу); 
		
		Если ОформленныеДокументы.Количество() = 0 Тогда
			ОформленныйДокумент= Новый Структура("ОформляемыйДокумент, Склад",
				Документы.ОприходованиеИзлишковТоваров.ПустаяСсылка(), СкладСписания);
			
			МассивОформленныхДокументов.Добавить(ОформленныйДокумент);
		Иначе
			Для Каждого ОформленныйДокумент Из ОформленныеДокументы Цикл
				МассивОформленныхДокументов.Добавить(ОформленныйДокумент.Оприходование);
			КонецЦикла;
		КонецЕсли;
		
		Отбор = Новый Структура("ВидДокумента, Склад", "ОприходованиеИзлишковТоваров", СкладСписания);
		ДокументыПоАкту = ОформляемыеДокументыПоАкту.НайтиСтроки(Отбор);
		
		Если ДокументыПоАкту.Количество() = 0 Тогда
	
			ОписаниеДействия = СтруктурыОписанияВыводимогоВОтчетДействия();
			ЗаполнитьЗначенияСвойств(ОписаниеДействия, Описание);
			
			НоваяСтрока = ОформляемыеДокументыПоАкту.Добавить();
			НоваяСтрока.ВидДокумента         = "ОприходованиеИзлишковТоваров";
			НоваяСтрока.Склад                = СкладСписания;
			НоваяСтрока.ОформляемыеДокументы = МассивОформленныхДокументов;
			НоваяСтрока["Описание"]          = ОписаниеДействия;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДокументПередачиНаДопоставкуНедопоставленногоТовара(СтрокаДействия, Макет, Описание)
	
	Если НеВыводитьВОтчет("ВывестиДокументПередачиНаДопоставкуНедопоставленногоТовара", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;
	
	Отбор = Новый Структура("ДопоставкаПоПередаче", СтрокаДействия.Основание);
	ОформленныеДокументы = ДопоставкиПоПередачеХранителю.НайтиСтроки(Отбор);
	
	Если ОформленныеДокументы.Количество() = 0 Тогда
		МассивОформленныхДокументов.Добавить(Документы.ПередачаТоваровХранителю.ПустаяСсылка());
	Иначе
		Для Каждого ОформленныйДокумент Из ОформленныеДокументы Цикл
			МассивОформленныхДокументов.Добавить(ОформленныйДокумент.ОформленнаяПередача);
		КонецЦикла;
	КонецЕсли;
	
	ВывестиДокументКОформлению("ПередачаТоваровХранителю", 2, Макет, МассивОформленныхДокументов, Неопределено, Истина,
		Описание);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДокументПередачиНаДопоставкуПоКомиссииНедопоставленногоТовара(СтрокаДействия, Макет, Описание)
	
	Если НеВыводитьВОтчет("ВывестиДокументПередачиНаДопоставкуПоКомиссииНедопоставленногоТовара", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;
	
	Отбор = Новый Структура("ДопоставкаПоПередаче", СтрокаДействия.Основание);
	ОформленныеДокументы = ДопоставкиПоПередачеХранителю.НайтиСтроки(Отбор);
	
	Если ОформленныеДокументы.Количество() = 0 Тогда
		МассивОформленныхДокументов.Добавить(Документы.ПередачаТоваровХранителю.ПустаяСсылка());
	Иначе
		Для Каждого ОформленныйДокумент Из ОформленныеДокументы Цикл
			МассивОформленныхДокументов.Добавить(ОформленныйДокумент.ОформленнаяПередача);
		КонецЦикла;
	КонецЕсли;
	
	ВывестиДокументКОформлению("ПередачаТоваровНаКомиссию", 2, Макет, МассивОформленныхДокументов, Неопределено, Истина,
		Описание);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДокументыОтгрузкиТоваровСХранения(СтрокаДействия, Макет, ОформляемыеДокументыПоАкту, Описание)
	
	Если НеВыводитьВОтчет("ВывестиДокументОтгрузкаТоваровСХранения", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивСкладовВозврата  = Новый Массив;
	ПараметрыПоискаСкладов = Новый Структура("ВариантДействия",
		Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленноеИВернуть);
	НайденныеСтроки        = СтрокаДействия.ДействияСклады.НайтиСтроки(ПараметрыПоискаСкладов);
	
	Для Каждого СтрокаСОтгрузкой Из НайденныеСтроки Цикл
		Если МассивСкладовВозврата.Найти(СтрокаСОтгрузкой.Склад) = Неопределено Тогда
			МассивСкладовВозврата.Добавить(СтрокаСОтгрузкой.Склад);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СкладОтгрузки Из МассивСкладовВозврата Цикл
		
		МассивОформленныхДокументов = Новый Массив;
		
		Описание.Склад         = СкладОтгрузки;
		Описание.ВыводитьСклад = Истина;
		
		ОтборПоСкладу = Новый Структура("Склад", СкладОтгрузки);
		ОформленныеДокументы = ОснованияОтгрузки.НайтиСтроки(ОтборПоСкладу);
		
		Если ОформленныеДокументы.Количество() = 0 Тогда
			ОформленныйДокумент= Новый Структура("ОформляемыйДокумент, Склад",
				Документы.ОтгрузкаТоваровСХранения.ПустаяСсылка(), СкладОтгрузки);
			
			МассивОформленныхДокументов.Добавить(ОформленныйДокумент);
		Иначе
			Для Каждого ОформленныйДокумент Из ОформленныеДокументы Цикл
				МассивОформленныхДокументов.Добавить(ОформленныйДокумент.ОтгрузкаСХранения);
			КонецЦикла;
		КонецЕсли;
		
		Отбор = Новый Структура("ВидДокумента, Склад", "ОтгрузкаТоваровСХраненияПоПриемке", СкладОтгрузки);
		ДокументыПоАкту = ОформляемыеДокументыПоАкту.НайтиСтроки(Отбор);
		
		Если ДокументыПоАкту.Количество() = 0 Тогда
			
			ОписаниеДействия = СтруктурыОписанияВыводимогоВОтчетДействия();
			ЗаполнитьЗначенияСвойств(ОписаниеДействия, Описание);
			
			НоваяСтрока = ОформляемыеДокументыПоАкту.Добавить();
			НоваяСтрока.ВидДокумента         = "ОтгрузкаТоваровСХраненияПоПриемке";
			НоваяСтрока.Склад                = СкладОтгрузки;
			НоваяСтрока.ОформляемыеДокументы = МассивОформленныхДокументов;
			НоваяСтрока["Описание"]          = ОписаниеДействия;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ТекстЗапросаАктОРасхожденияхПослеПередачиТоваровХранителю()

	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	АктОРасхожденияхПослеОтгрузкиТовары.Действие   КАК Действие,
	|	АктОРасхожденияхПослеОтгрузкиТовары.Реализация КАК Передача
	|ПОМЕСТИТЬ Действия
	|ИЗ
	|	Документ.АктОРасхожденияхПослеОтгрузки.Товары КАК АктОРасхожденияхПослеОтгрузкиТовары
	|ГДЕ
	|	АктОРасхожденияхПослеОтгрузкиТовары.Ссылка = &АктОРасхождениях
	|	И АктОРасхожденияхПослеОтгрузкиТовары.КоличествоПоДокументу - АктОРасхожденияхПослеОтгрузкиТовары.Количество <> 0
	|	И АктОРасхожденияхПослеОтгрузкиТовары.Действие <> ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПерепоставленноеДарится)
	|	И АктОРасхожденияхПослеОтгрузкиТовары.Действие <> ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.НедостачаНеПризнана)
	|	И АктОРасхожденияхПослеОтгрузкиТовары.Действие <> ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПустаяСсылка)
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 1
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Действия.Действие КАК Действие,
	|	Действия.Передача КАК Основание,
	|	ЛОЖЬ              КАК ПоВинеСтороннейКомпании,
	|	Действия.Передача.ПередачаПоЗаказам КАК ПоЗаказам,
	|	НЕОПРЕДЕЛЕНО      КАК Заказ
	|ИЗ
	|	Действия КАК Действия
	|
	|ИТОГИ ПО
	|	Передача
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 2
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВозвращаемыеТовары.ДокументРеализации КАК Передача,
	|	ВозвращаемыеТовары.Ссылка             КАК ДокументВозврата
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК ВозвращаемыеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Действия КАК Действия
	|		ПО ВозвращаемыеТовары.ДокументРеализации = Действия.Передача
	|ГДЕ
	|	&ИспользоватьЗаявкиНаВозврат
	|	И ВозвращаемыеТовары.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Поступление.ДокументПередачи КАК Передача,
	|	Поступление.Ссылка           КАК ДокументВозврата
	|ИЗ
	|	Документ.ПоступлениеТоваровОтХранителя КАК Поступление
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Действия КАК Действия
	|		ПО Поступление.ДокументПередачи = Действия.Передача
	|ГДЕ
	|	НЕ &ИспользоватьЗаявкиНаВозврат
	|	И Поступление.Проведен
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 3
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	АктОРасхождениях.ЗаказКлиента КАК ЗаказКлиента,
	|	АктОРасхождениях.Реализация   КАК Передача
	|ИЗ
	|	Документ.АктОРасхожденияхПослеОтгрузки.Товары КАК АктОРасхождениях
	|ГДЕ
	|	АктОРасхождениях.КоличествоУпаковокПоДокументу <> АктОРасхождениях.КоличествоУпаковок
	|	И АктОРасхождениях.Действие = ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ДопоставкаНеТребуется)
	|	И АктОРасхождениях.Ссылка = &АктОРасхождениях
	|	И АктОРасхождениях.ЗаказКлиента <> НЕОПРЕДЕЛЕНО
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказКлиента УБЫВ
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 4
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПередачаТоваров.Ссылка               КАК ОформленнаяПередача,
	|	ПередачаТоваров.ДопоставкаПоПередаче КАК ДопоставкаПоПередаче
	|ИЗ
	|	Действия КАК Действия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПередачаТоваровХранителю КАК ПередачаТоваров
	|		ПО ПередачаТоваров.Проведен
	|			И Действия.Передача = ПередачаТоваров.ДопоставкаПоПередаче";
	
КонецФункции

&НаСервере
Процедура ВывестиИсправлениеПередачиТоваровХранителю(СтрокаДействия, Макет, Описание)
	
	Если НеВыводитьВОтчет("ВывестиИсправлениеПередачиТоваровХранителю", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;
	МассивОформленныхДокументов.Добавить(СтрокаДействия.Основание);
	
	ВывестиДокументКОформлению("ИсправлениеПередачи", 1, Макет, МассивОформленныхДокументов, Неопределено, Ложь, Описание);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиИсправлениеПередачиТоваровНаКомиссию(СтрокаДействия, Макет, Описание)
	
	Если НеВыводитьВОтчет("ВывестиИсправлениеПередачиНаКомиссию", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;
	МассивОформленныхДокументов.Добавить(СтрокаДействия.Основание);
	
	ВывестиДокументКОформлению("ИсправлениеПередачиНаКомиссию", 1, Макет, МассивОформленныхДокументов, Неопределено, Ложь, Описание);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиИсправлениеДокументаЗаказПоПередаче(СтрокаДействия, Макет, Описание)
	
	Если НеВыводитьВОтчет("ВывестиИсправлениеДокументаЗаказПоПередаче", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;
	
	Отбор = Новый Структура("Передача", СтрокаДействия.Основание);
	ОформленныеДокументы = ПередачиЗаказы.НайтиСтроки(Отбор);
	
	Если ОформленныеДокументы.Количество() = 0 Тогда
		Возврат;
	Иначе
		Для Каждого ОформленныйДокумент Из ОформленныеДокументы Цикл
			МассивОформленныхДокументов.Добавить(ОформленныйДокумент.ЗаказКлиента);
		КонецЦикла;
	КонецЕсли;
	
	ВывестиДокументКОформлению("ЗаказПередачи", 2, Макет, МассивОформленныхДокументов, Неопределено, Ложь, Описание);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДокументВозвратаПоПередаче(СтрокаДействия, Макет, Описание)
	
	Если НеВыводитьВОтчет("ВывестиДокументВозвратаПоПередаче", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;
	
	Отбор = Новый Структура("Передача", СтрокаДействия.Основание);
	ОформленныеДокументы = ПередачиВозвраты.НайтиСтроки(Отбор);
	
	Если ОформленныеДокументы.Количество() = 0 Тогда
		
		ДобавитьЗаявкиНаВозврат = ИспользоватьЗаявкиНаВозврат;
		
		МассивОформленныхДокументов.Добавить(?(ДобавитьЗаявкиНаВозврат,
												Документы.ЗаявкаНаВозвратТоваровОтКлиента.ПустаяСсылка(),
												Документы.ПоступлениеТоваровОтХранителя.ПустаяСсылка()));
		
	Иначе
		Для Каждого ОформленныйДокумент Из ОформленныеДокументы Цикл
			МассивОформленныхДокументов.Добавить(ОформленныйДокумент.ДокументВозврата);
		КонецЦикла;
	КонецЕсли;
	
	ВывестиДокументКОформлению("ДокументВозвратаПередачи", 2, Макет, МассивОформленныхДокументов, Неопределено, Истина,Описание);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДокументВозвратаПоПередачеНаКомиссию(СтрокаДействия, Макет, Описание)
	
	Если НеВыводитьВОтчет("ВывестиДокументВозвратаПоПередачеНаКомиссию", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;
	
	Отбор = Новый Структура("Передача", СтрокаДействия.Основание);
	ОформленныеДокументы = ПередачиВозвраты.НайтиСтроки(Отбор);
	
	Если ОформленныеДокументы.Количество() = 0 Тогда
		
		МассивОформленныхДокументов.Добавить(?(ИспользоватьЗаявкиНаВозврат,
												Документы.ЗаявкаНаВозвратТоваровОтКлиента.ПустаяСсылка(),
												Документы.ПоступлениеТоваровОтХранителя.ПустаяСсылка()));
		
	Иначе
		Для Каждого ОформленныйДокумент Из ОформленныеДокументы Цикл
			МассивОформленныхДокументов.Добавить(ОформленныйДокумент.ДокументВозврата);
		КонецЦикла;
	КонецЕсли;
	
	ВывестиДокументКОформлению("ДокументВозвратаКомиссионера", 2, Макет, МассивОформленныхДокументов, Неопределено, Истина,Описание);
	
КонецПроцедуры


&НаСервере
Процедура ВывестиИсправлениеВозвратТоваровОтХранителя(СтрокаДействия, Макет, Описание)

	Если НеВыводитьВОтчет("ВывестиИсправлениеВозвратТоваровОтХранителя", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;
	МассивОформленныхДокументов.Добавить(СтрокаДействия.Основание);
	
	ВывестиДокументКОформлению("ИсправлениеВозвратаТоваровОтХранителя", 1, Макет, МассивОформленныхДокументов, , Ложь, Описание);

КонецПроцедуры

&НаСервере
Процедура ВывестиДокументПередачаТоваровХранителю(СтрокаДействия, Макет, Описание)

	Если НеВыводитьВОтчет("ВывестиДокументПередачаТоваровХранителю", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;

	ОформленныеДокументы = ВозвратыОтХранителейПередачи.НайтиСтроки(Новый Структура("Основание", СтрокаДействия.Основание));
	
	Если ОформленныеДокументы.Количество() = 0 Тогда
		
		Если ХозяйственнаяОперацияАкта = Перечисления.ХозяйственныеОперации.ПоступлениеОтПереработчика2_5 Тогда
			ОперацияДокумента = Перечисления.ХозяйственныеОперации.ПередачаПереработчику2_5;
		Иначе
			ОперацияДокумента = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию;
		КонецЕсли;
		
		ОписаниеОформляемогоДокумента = Новый Структура("ОформляемыйДокумент, ХозяйственнаяОперация",
			Документы.ПередачаТоваровХранителю.ПустаяСсылка(),
			ОперацияДокумента);
		МассивОформленныхДокументов.Добавить(ОписаниеОформляемогоДокумента);
		
	Иначе
		
		Для Каждого ОформленныйДокумент Из ОформленныеДокументы Цикл
			
			МассивОформленныхДокументов.Добавить(ОформленныйДокумент.Передача);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВывестиДокументКОформлению(
		"ВозвратТоваровОтХранителяВозвратХранителю",
		1,
		Макет,
		МассивОформленныхДокументов,,,
		Описание);

КонецПроцедуры

&НаСервере
Процедура ВывестиДокументПередачаТоваровКомиссионеру(СтрокаДействия, Макет, Описание)

	Если НеВыводитьВОтчет("ВывестиДокументПередачаТоваровКомиссионеру", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;

	ОформленныеДокументы = ВозвратыОтХранителейПередачи.НайтиСтроки(Новый Структура("Основание", СтрокаДействия.Основание));
	
	Если ОформленныеДокументы.Количество() = 0 Тогда
		
		МассивОформленныхДокументов.Добавить(Документы.ПередачаТоваровХранителю.ПустаяСсылка());
		
	Иначе
		
		Для Каждого ОформленныйДокумент Из ОформленныеДокументы Цикл
			
			МассивОформленныхДокументов.Добавить(ОформленныйДокумент.Передача);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВывестиДокументКОформлению(
		"ВозвратТоваровОтКомиссионераВозвратКомиссионеру",
		1,
		Макет,
		МассивОформленныхДокументов,
		Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию,,
		Описание);

КонецПроцедуры

&НаСервере
Процедура ВывестиИсправлениеВозвратОтКомиссионера(СтрокаДействия, Макет, Описание)

	Если НеВыводитьВОтчет("ВывестиИсправлениеВозвратОтКомиссионера", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;
	МассивОформленныхДокументов.Добавить(СтрокаДействия.Основание);
	
	ВывестиДокументКОформлению("ИсправлениеВозвратаОтКомиссионера", 1, Макет, МассивОформленныхДокументов, , Ложь, Описание);

КонецПроцедуры

#КонецОбласти

#КонецОбласти
