#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс
// Выполняет тестирование операций закрытия месяца.
// 
// Параметры:
// 	ВходныеПараметры - Структура - 
// Возвращаемое значение:
// 	Структура - Описание:
// * Отказ - Булево - успех/не успех тестирования
// * ОписаниеОшибки - Строка - подробное представление ошибки
// * ИмяЭтапаТестирования - Соответствие - данные тестирования этапа
Функция Тестирование(ВходныеПараметры) Экспорт
	
	Если ВходныеПараметры.Свойство("ПараметрыЗапуска") Тогда // программный запуск, есть параметры запуска
		ПараметрыТестирования = ПараметрыЗапускаТестирования(ВходныеПараметры.ПараметрыЗапуска);
		
		Лог = Неопределено;
		Если ВходныеПараметры.Свойство("Лог", Лог) Тогда
			ПараметрыТестирования.Вставить("Лог", Лог);
		КонецЕсли;
		
		Если ВходныеПараметры.Свойство("ЭталонныеДанные") Тогда
			ПараметрыТестирования.Вставить("ЭталонныеДанные", ВходныеПараметры.ЭталонныеДанные);
		КонецЕсли;
		
	Иначе
		ПараметрыТестирования = ВходныеПараметры;
	КонецЕсли;
	
	НачалоЗамера = НачатьЗамерВремени(ПараметрыТестирования, "Тестирование");
	
	Попытка
		Если ПараметрыТестирования.Свойство("ДеревоПланаТестирования") Тогда
			ДеревоПланаТестирования = ЗначениеИзФайла(ПараметрыТестирования.ДеревоПланаТестирования);
			РезультатТестирования = ТестироватьПоПлануТестирования(ДеревоПланаТестирования, ПараметрыТестирования);
			ЗначениеВФайл(ПараметрыТестирования.ДеревоПланаТестирования, ДеревоПланаТестирования);
			РезультатТестирования.Вставить("ДеревоРезультата", ДеревоПланаТестирования);
		Иначе
			РезультатТестирования = ТестироватьЗаПериод(ПараметрыТестирования);
		КонецЕсли;
	Исключение
		РезультатТестирования = Новый Структура;
		РезультатТестирования.Вставить("Отказ", Истина);
		СообщитьОбОшибке();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		РезультатТестирования.Вставить("ИсходнаяИнформация", ИнформацияОбОшибке.Описание);
		РезультатТестирования.Вставить("ОбъектМетаданных", ИнформацияОбОшибке.ИмяМодуля);
		РезультатТестирования.Вставить("УточнениеРасположения", ИнформацияОбОшибке.ИсходнаяСтрока);
		//РезультатТестирования.Вставить("ОписаниеОшибки", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	ЗавершитьЗамерВремени(ПараметрыТестирования, "Тестирование", НачалоЗамера);
	Если ПараметрыТестирования.Свойство("Лог") Тогда
		ВходныеПараметры.Лог = ПараметрыТестирования.Лог;
	КонецЕсли;
	
	Если ПараметрыТестирования.Свойство("ДеревоПланаТестирования") Тогда
		ПоместитьВоВременноеХранилище(РезультатТестирования, ПараметрыТестирования.АдресХранилища);
	КонецЕсли;
	
	Возврат РезультатТестирования;
	
КонецФункции

// Запускает тестирование регламентных заданий по закрытию месяца в фоновом задании.
//
// Параметры:
//	ПараметрыТестирования - Структура - Параметры закрытия месяца: период, организация к закрытию.
//
// Возвращаемое значение:
//  УникальныйИдентификатор - идентификатор запущенного задания
//	Строка - описание причины, по которой задание не может быть запущено.
//
Функция ЗапуститьТестированиеВФоне(ПараметрыТестирования) Экспорт
	
	// Проверим возможность запуска расчета.
	ИдентификаторРасчета = Новый УникальныйИдентификатор; // пишется в ключ фонового задания
	
	АктивныеРасчеты = РегистрыСведений.ВыполнениеОперацийЗакрытияМесяца.ПроверитьНаличиеАктивныхРасчетов();
	
	Если АктивныеРасчеты.ЕстьАктивныеРасчеты Тогда
		Возврат АктивныеРасчеты.ТекстОшибки;
	КонецЕсли;
	
	// Запустим расчет.
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(ПараметрыТестирования);
	
	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить("Обработки.ТестированиеОперацийЗакрытийМесяца.Тестирование");
	ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Задание = ФоновыеЗадания.Выполнить(
		"ОбщегоНазначения.ВыполнитьМетодКонфигурации",
		ПараметрыЗадания,
		ЗакрытиеМесяцаСервер.ИмяФоновогоЗадания(ИдентификаторРасчета),
		НСтр("ru = 'Тестирование операций закрытие месяца'"));
	
	Возврат Задание.УникальныйИдентификатор;
	
КонецФункции

Функция ПараметрыЗапускаТестирования(ВходныеПараметры = Неопределено) Экспорт
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("СписокОрганизаций", Новый СписокЗначений);
	ПараметрыЗадания.Вставить("НачалоРасчета", СебестоимостьМинПериод());
	ПараметрыЗадания.Вставить("КонецРасчета", ТекущаяДатаСеанса());
	ПараметрыЗадания.Вставить("ПериодРегистрации", ТекущаяДатаСеанса());
	ПараметрыЗадания.Вставить("Период", ТекущаяДатаСеанса());
	ПараметрыЗадания.Вставить("КонтрольныеРегистры", Неопределено);
	ПараметрыЗадания.Вставить("АдресХранилища", Неопределено);
	ПараметрыЗадания.Вставить("ЭтапыТестирования", ЭтапыТестирования());
	ПараметрыЗадания.Вставить("Разделы", РазделыТестирования().ВыгрузитьЗначения());
	ПараметрыЗадания.Вставить("ДействиеПриРасхождении", "Остановить");
	ПараметрыЗадания.Вставить("ЛимитРасхождений", 5000);
	ПараметрыЗадания.Вставить("ДопустимоеОтклонение", "0.5");
	ПараметрыЗадания.Вставить("АвтоматическоеТестирование", Ложь);
	
	Если ЗначениеЗаполнено(ВходныеПараметры) Тогда
		
		ЗначениеПараметра = Неопределено;
		СтруктураПараметров = СтроковыеФункцииКлиентСервер.ПараметрыИзСтроки(ВходныеПараметры);
		
		Если СтруктураПараметров.Свойство("НачалоРасчета", ЗначениеПараметра) И ЗначениеЗаполнено(ЗначениеПараметра) Тогда
			ПараметрыЗадания.НачалоРасчета = Дата(СтрЗаменить(ЗначениеПараметра, """", ""));
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("КонецРасчета", ЗначениеПараметра) И ЗначениеЗаполнено(ЗначениеПараметра) Тогда
			ПараметрыЗадания.КонецРасчета = Дата(СтрЗаменить(ЗначениеПараметра, """", ""));
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("Разделы", ЗначениеПараметра) И ЗначениеЗаполнено(ЗначениеПараметра) Тогда
			ПараметрыЗадания.Разделы = СтрРазделить(ЗначениеПараметра, ",");
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("ЭтапыТестирования", ЗначениеПараметра) И ЗначениеЗаполнено(ЗначениеПараметра) Тогда
			ЭтапыТестирования = СтрРазделить(ЗначениеПараметра, ",");
			Для каждого ЭтапТестирования Из ПараметрыЗадания.ЭтапыТестирования Цикл
				ЭтапТестирования.Пометка = ЭтапыТестирования.Найти(ЭтапТестирования.Значение) <> Неопределено;
			КонецЦикла;
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("ДействиеПриРасхождении", ЗначениеПараметра) И ЗначениеЗаполнено(ЗначениеПараметра) Тогда
			ПараметрыЗадания.ДействиеПриРасхождении = ЗначениеПараметра;
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("ЛимитРасхождений", ЗначениеПараметра) И ЗначениеЗаполнено(ЗначениеПараметра) Тогда
			ПараметрыЗадания.ЛимитРасхождений = Число(СтрЗаменить(ЗначениеПараметра, """", ""));
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("ДопустимоеОтклонение", ЗначениеПараметра) И ЗначениеЗаполнено(ЗначениеПараметра) Тогда
			ПараметрыЗадания.ДопустимоеОтклонение = ЗначениеПараметра;
		КонецЕсли;
		
		ПараметрыЗадания.АвтоматическоеТестирование = Истина;
	
	КонецЕсли;
	
	ПараметрыЗадания.КонтрольныеРегистры = КонтрольныеРегистры(ПараметрыЗадания.Разделы);
	
	Возврат ПараметрыЗадания;
	
КонецФункции

#Область НастройкиТестирования

// Список этапов тестирования, которые могут использоваться при тестировании.
// Для них будут скинуты границы перед началом обработки тестирования и выполнены соответствующие задания из закрытия
// месяца в процессе обработки.
//
// Возвращаемое значение:
// СписокЗначений - список этапов, для которых может проводиться тестирование.
//
Функция РазделыТестирования() Экспорт
	
	РазделыТестирования = Новый СписокЗначений;
	РазделыТестирования.Добавить("ВзаиморасчетыСПартнерами", " " + НСтр("ru = 'Взаиморасчеты с партнерами'"), Истина);
	РазделыТестирования.Добавить("Себестоимость", " " + НСтр("ru = 'Себестоимость'"), Истина);
	//++ Локализация
	РазделыТестирования.Добавить("НДС", " " + НСтр("ru = 'Распределение НДС'"), Истина);

	//-- Локализация
	
	
	Возврат РазделыТестирования;
	
КонецФункции

Функция ЭтапыТестирования(ТестироватьНовыеМеханизмы = Ложь) Экспорт
	
	ЭтапыТестирования = Новый СписокЗначений;
	// По умолчанию всегда закрываем месяц:
	ЭтапыТестирования.Добавить("ПерезакрытьМесяц", " " + НСтр("ru = 'Перезакрытие месяца'"), Истина);
	Если ТестироватьНовыеМеханизмы Тогда
		//++ Локализация
		// Если отключена опция новых взаиморасчетов, по умолчанию будет еще сравнивать данные контрольных регистров и после включения опции новых взаиморасчетов:
		ЭтапыТестирования.Добавить("ПереходНаНовыеВзаиморасчеты",
			" " + НСтр("ru = 'Переход на новые взаиморасчеты и перезакрытие месяца'"),
			Не ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов"));
		// Если включена опция новых взаиморасчетов, по умолчанию будет еще сравнивать данные контрольных регистров после перезаполнения новых взаиморасчетов:
		ЭтапыТестирования.Добавить("ПерезаполнитьНовыеВзаиморасчеты",
			" " + НСтр("ru = 'Перезаполнение новых взаиморасчетов и перезакрытие месяца'"),
			ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов"));
		//-- Локализация
	КонецЕсли;
	//ЭтапыТестирования.Добавить("СохранитьЭталонныеДанные", " Сохранить эталонные данные");
	//ЭтапыТестирования.Добавить("СравнитьСЭталоннымиДанными", " Сравнить с эталонными данными");
		
	Возврат ЭтапыТестирования;
	
КонецФункции

// Соотвествие регистров, по которым контролируется движения до выполнения закрытия месяца и после.
// В случае обнаружения различий, они фиксируются и выводятся в отчет "Результаты тестирования".
//
// Возвращаемое значение:
//	Соответствие - соответствие имен метаданных и разделов.
Функция СоответствиеКонтрольныхРегистров(ВыбранныеРазделы = Неопределено) Экспорт
	
	Если ВыбранныеРазделы = Неопределено Тогда
		ВыбранныеРазделы = РазделыТестирования().ВыгрузитьЗначения();
	КонецЕсли;
	
	РегистрыКонтроля = Новый Соответствие;
	
	Если ВыбранныеРазделы.Найти("ВзаиморасчетыСПартнерами") <> Неопределено Тогда // Взаиморасчеты
		Если НЕ ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
			РегистрыКонтроля.Вставить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоДокументам.ПолноеИмя(), "ВзаиморасчетыСПартнерами");
			РегистрыКонтроля.Вставить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоДокументам.ПолноеИмя(), "ВзаиморасчетыСПартнерами");
		КонецЕсли;
		РегистрыКонтроля.Вставить(Метаданные.РегистрыНакопления.ДвиженияДенежныеСредстваКонтрагент.ПолноеИмя(), "ВзаиморасчетыСПартнерами");
		РегистрыКонтроля.Вставить(Метаданные.РегистрыНакопления.ДвиженияКонтрагентКонтрагент.ПолноеИмя(), "ВзаиморасчетыСПартнерами");
		РегистрыКонтроля.Вставить(Метаданные.РегистрыНакопления.ДвиженияКонтрагентДоходыРасходы.ПолноеИмя(), "ВзаиморасчетыСПартнерами");
	КонецЕсли;
	
	Если ВыбранныеРазделы.Найти("Себестоимость") <> Неопределено Тогда // Себестоимость
		РегистрыКонтроля.Вставить(Метаданные.РегистрыНакопления.СебестоимостьТоваров.ПолноеИмя(), "Себестоимость");
		РегистрыКонтроля.Вставить(Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж.ПолноеИмя(), "Себестоимость");
		РегистрыКонтроля.Вставить(Метаданные.РегистрыНакопления.Закупки.ПолноеИмя(), "Себестоимость");
		РегистрыКонтроля.Вставить(Метаданные.РегистрыНакопления.ДвиженияНоменклатураНоменклатура.ПолноеИмя(), "Себестоимость");
		РегистрыКонтроля.Вставить(Метаданные.РегистрыНакопления.ПрочиеДоходы.ПолноеИмя(), "Себестоимость");
		РегистрыКонтроля.Вставить(Метаданные.РегистрыНакопления.ПрочиеАктивыПассивы.ПолноеИмя(), "Себестоимость");
		РегистрыКонтроля.Вставить(Метаданные.РегистрыНакопления.ФинансовыеРезультаты.ПолноеИмя(), "Себестоимость");
		РегистрыКонтроля.Вставить(Метаданные.РегистрыНакопления.ПрочаяВыручка.ПолноеИмя(), "Себестоимость");
		
		// ПартионныйУчет
		//++ Локализация
		РегистрыКонтроля.Вставить(Метаданные.РегистрыНакопления.ПартииТоваровОрганизаций.ПолноеИмя(), "Себестоимость");
		РегистрыКонтроля.Вставить(Метаданные.РегистрыНакопления.ПартииТоваровПереданныеНаКомиссию.ПолноеИмя(), "Себестоимость");
		РегистрыКонтроля.Вставить(Метаданные.РегистрыНакопления.ПартииРасходовНаСебестоимостьТоваров.ПолноеИмя(), "Себестоимость");
		РегистрыКонтроля.Вставить(Метаданные.РегистрыНакопления.ПартииПроизводственныхЗатрат.ПолноеИмя(), "Себестоимость");
		РегистрыКонтроля.Вставить(Метаданные.РегистрыНакопления.ПартииПрочихРасходов.ПолноеИмя(), "Себестоимость");
		РегистрыКонтроля.Вставить(Метаданные.РегистрыНакопления.ПартииЗатратНаВыпуск.ПолноеИмя(), "Себестоимость");
		РегистрыКонтроля.Вставить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН.ПолноеИмя(), "Себестоимость");
		РегистрыКонтроля.Вставить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН2_4.ПолноеИмя(), "Себестоимость");
		РегистрыКонтроля.Вставить(Метаданные.РегистрыСведений.ДетализацияСебестоимостиТоваров.ПолноеИмя(), "Себестоимость");
		РегистрыКонтроля.Вставить(Метаданные.РегистрыСведений.ДетализацияСебестоимостиТоваровПостатейныеЗатратыНЗП.ПолноеИмя(), "Себестоимость");
		//-- Локализация
		РегистрыКонтроля.Вставить(Метаданные.РегистрыСведений.ДетализацияСебестоимостиПартииТоваров.ПолноеИмя(), "Себестоимость");
		РегистрыКонтроля.Вставить(Метаданные.РегистрыСведений.ДетализацияСебестоимостиПартииТоваровПостатейныеЗатраты.ПолноеИмя(), "Себестоимость");
		РегистрыКонтроля.Вставить(Метаданные.РегистрыСведений.ДетализацияСебестоимостиТоваровПостатейныеЗатраты.ПолноеИмя(), "Себестоимость");
		РегистрыКонтроля.Вставить(Метаданные.РегистрыНакопления.ПрочиеРасходы.ПолноеИмя(), "Себестоимость");
		РегистрыКонтроля.Вставить(Метаданные.РегистрыНакопления.ДвиженияНоменклатураДоходыРасходы.ПолноеИмя(), "Себестоимость");
	КонецЕсли;
	
	//++ Локализация

	
	Если ВыбранныеРазделы.Найти("НДС") <> Неопределено Тогда //НДС
		РегистрыКонтроля.Вставить(Метаданные.РегистрыНакопления.НДСЗаписиКнигиПокупок.ПолноеИмя(), "НДС");
		РегистрыКонтроля.Вставить(Метаданные.РегистрыНакопления.НДСЗаписиКнигиПродаж.ПолноеИмя(), "НДС");
		РегистрыКонтроля.Вставить(Метаданные.РегистрыНакопления.НДСПредъявленный.ПолноеИмя(), "НДС");
		РегистрыКонтроля.Вставить(Метаданные.РегистрыНакопления.ПартииНДСКРаспределению.ПолноеИмя(), "НДС");
		РегистрыКонтроля.Вставить(Метаданные.РегистрыСведений.ЖурналУчетаСчетовФактур.ПолноеИмя(), "НДС");
		РегистрыКонтроля.Вставить(Метаданные.РегистрыСведений.ПодтверждениеОплатыНДСВБюджет.ПолноеИмя(), "НДС");
		РегистрыКонтроля.Вставить(Метаданные.РегистрыСведений.ДанныеОснованийСчетовФактур.ПолноеИмя(), "НДС");
	КонецЕсли;
	

	//-- Локализация
	
	
	Возврат РегистрыКонтроля;
	
КонецФункции

// Список регистров, по которым контролируется движения до выполнения закрытия месяца и после.
// В случае обнаружения различий, они фиксируются и выводятся в отчет "Результаты тестирования".
//
// Возвращаемое значение:
//	Массив - массив имен метаданных.
Функция КонтрольныеРегистры(ВыбранныеРазделы = Неопределено) Экспорт
	
	РегистрыКонтроля = Новый Массив;
	Для Каждого Строка Из СоответствиеКонтрольныхРегистров(ВыбранныеРазделы) Цикл
		РегистрыКонтроля.Добавить(Строка.Ключ);
	КонецЦикла; 
	
	Возврат РегистрыКонтроля;
	
КонецФункции

Функция СоответствиеРегистровРазделам()
	
	СоответствиеРазделовРегистрам = Новый Соответствие;
	Для каждого Раздел Из РазделыТестирования().ВыгрузитьЗначения() Цикл
		РегистрыРаздела = КонтрольныеРегистры(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Раздел));
		Для Каждого Регистр Из РегистрыРаздела Цикл
			СоответствиеРазделовРегистрам.Вставить(Регистр, Раздел);
		КонецЦикла;
	КонецЦикла;
	
	Возврат СоответствиеРазделовРегистрам;
	
КонецФункции

Функция ДействияПриРасхождениях() Экспорт
	
	СписокВозврата = Новый СписокЗначений;
	СписокВозврата.Добавить("Продолжить", НСтр("ru = 'Продолжить тестирование'"));
	СписокВозврата.Добавить("Остановить", НСтр("ru = 'Остановить тестирование'"));
	СписокВозврата.Добавить("ОстановитьУсловие", НСтр("ru = 'Остановить тестирование при достижении лимита расхождений'"));
	СписокВозврата.Добавить("РазбитьФайл", НСтр("ru = 'При достижении лимита расхождений разбивать файл расхождений'"));
	
	Возврат СписокВозврата;
	
КонецФункции

// Возвращает период самого первого движения по регистру "Себестоимость товаров".
// 
// Возвращаемое значение:
//	Дата - 
Функция СебестоимостьМинПериод() Экспорт
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	МИНИМУМ(ДД.Период) КАК Период
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК ДД
	|ИМЕЮЩИЕ
	|	НЕ (МИНИМУМ(ДД.Период) ЕСТЬ NULL)
	|");
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Период = НачалоМесяца(ТекущаяДатаСеанса());
	Иначе
		Период = НачалоМесяца(Результат.Выгрузить()[0].Период);
	КонецЕсли;
	
	Возврат Период;
КонецФункции

#КонецОбласти // НастройкиТестирования

Функция НачатьЗамерВремени(Параметры, ТекстВывода) Экспорт
	
	НачалоЗамера = Неопределено;
	Если Параметры.Свойство("Лог") Тогда
		НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
		Параметры.Лог = Параметры.Лог + Символы.ПС + "Начало" + " """ + ТекстВывода + """";
	КонецЕсли;
	ЗаписьЖурналаРегистрации("Начало" + " """ + ТекстВывода + """", УровеньЖурналаРегистрации.Информация);
	
	Возврат НачалоЗамера;
	
КонецФункции

Процедура ЗавершитьЗамерВремени(Параметры, ТекстВывода, НачалоЗамера) Экспорт
	
	Если Параметры.Свойство("Лог") Тогда
		Длительность = ВремяВыполнения(НачалоЗамера, ТекущаяУниверсальнаяДатаВМиллисекундах());
		Параметры.Лог = Параметры.Лог + Символы.ПС + "Конец" + " """ + ТекстВывода + """, " + "длительность:" + " " + Длительность;
	КонецЕсли;
	ЗаписьЖурналаРегистрации("Конец" + " """ + ТекстВывода + """, " + "длительность:" + " " + Длительность, УровеньЖурналаРегистрации.Информация);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыФункции

Функция ТестироватьЗаПериод(ПараметрыОбработки)
	
	РезультатТестирования = Новый Структура("Отказ", Ложь);
	
	ЗначенияПараметров = РасчетСебестоимостиПовтИсп.ЗначенияТехнологическихПараметров();
	
	НачалоЗамера = НачатьЗамерВремени(ПараметрыОбработки, "ТестироватьЗаПериод");
	
	ПериодДвиженийСебестоимости = ПартионныйУчетСервер.ПериодПервыхДвиженийРегистраСебестоимость();
	Если ЗначениеЗаполнено(ЗначенияПараметров.ПериодНачалаТестирования)
	 И НачалоДня(ЗначенияПараметров.ПериодНачалаТестирования) <> ПериодДвиженийСебестоимости Тогда
		ПараметрыОбработки.НачалоРасчета = Макс(НачалоДня(ЗначенияПараметров.ПериодНачалаТестирования), ПериодДвиженийСебестоимости);
	ИначеЕсли ЗначениеЗаполнено(ПериодДвиженийСебестоимости) 
	 И ПараметрыОбработки.НачалоРасчета < ПериодДвиженийСебестоимости Тогда
		ПараметрыОбработки.НачалоРасчета = ПериодДвиженийСебестоимости;
	КонецЕсли;
	 
	ПериодПоследнихДвижений = ПартионныйУчетСервер.ПериодПоследнихДвиженийРегистраСебестоимость();
	Если ЗначениеЗаполнено(ЗначенияПараметров.ПериодОкончанияТестирования)
	 И НачалоМесяца(ЗначенияПараметров.ПериодОкончанияТестирования) <> ПериодПоследнихДвижений Тогда
		ПараметрыОбработки.КонецРасчета = Мин(НачалоМесяца(ЗначенияПараметров.ПериодОкончанияТестирования), ПериодПоследнихДвижений);
	ИначеЕсли ЗначениеЗаполнено(ПериодПоследнихДвижений) 
	 И ПараметрыОбработки.КонецРасчета > ПериодПоследнихДвижений Тогда
		ПараметрыОбработки.КонецРасчета = ПериодПоследнихДвижений;
	КонецЕсли;
	
	ПараметрыОбработки.КонецРасчета = КонецМесяца(ПараметрыОбработки.КонецРасчета);
	
	Для каждого ЭтапТестирования Из ПараметрыОбработки.ЭтапыТестирования Цикл
		
		Если Не ЭтапТестирования.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыСравненияДанных = Тестирование.ПараметрыЗапроса(ПараметрыОбработки.НачалоРасчета);
		ПараметрыСравненияДанных.КонецПериода = ПараметрыОбработки.КонецРасчета;
		Если ПараметрыОбработки.Свойство("ДопустимоеОтклонение") Тогда
			ПараметрыСравненияДанных.Вставить("ДопустимоеОтклонение", ПараметрыОбработки.ДопустимоеОтклонение);
			ПараметрыСравненияДанных.Вставить("ОпределятьОбщееРасхождение", ИСТИНА);
		КонецЕсли;
		ПараметрыСравненияДанных.Вставить("ИсключаемыеПоля", Новый Структура("ИдентификаторФинЗаписи, Содержание"));
		
		НачалоЗамера1 = НачатьЗамерВремени(ПараметрыОбработки, "СохранитьЭталонныеДанные");
		
		ВременныеТаблицыЭталонныхДанных = Неопределено;
		ВыполнитьСравнениеЭталонныхДанных = НЕ ПараметрыОбработки.Свойство("ПропуститьСравнениеЭталонныхДанных");
		Если ВыполнитьСравнениеЭталонныхДанных Тогда
			Если ПараметрыОбработки.Свойство("ЭталонныеДанные") Тогда
				ВременныеТаблицыЭталонныхДанных = Тестирование.СохранитьЭталонныеДанные(ПараметрыОбработки.КонтрольныеРегистры, ПараметрыСравненияДанных, ,ПараметрыОбработки.ЭталонныеДанные);
			Иначе 
				ВременныеТаблицыЭталонныхДанных = Тестирование.СохранитьЭталонныеДанные(ПараметрыОбработки.КонтрольныеРегистры, ПараметрыСравненияДанных);
			КонецЕсли; 
		КонецЕсли;

		ЗавершитьЗамерВремени(ПараметрыОбработки, "СохранитьЭталонныеДанные", НачалоЗамера1);
		
		//++ Локализация
		Если ЭтапТестирования.Значение = "ПереходНаНовыеВзаиморасчеты" Тогда
			
			НачалоЗамера2 = НачатьЗамерВремени(ПараметрыОбработки, "ЗаполнитьРегистрыПриВключенииНовойАрхитектуры");
			
			ПараметрыЗадания = Новый Структура("Дата", ПараметрыОбработки.НачалоРасчета);
			ОперативныеВзаиморасчетыСервер.ЗаполнитьРегистрыПриВключенииНовойАрхитектуры(ПараметрыЗадания, Неопределено);
			ЗакрытиеМесяцаСДаты(ПараметрыОбработки, ПараметрыОбработки.Разделы);
		
			ЗавершитьЗамерВремени(ПараметрыОбработки, "ЗаполнитьРегистрыПриВключенииНовойАрхитектуры", НачалоЗамера2);
			
		КонецЕсли;
		
		Если ЭтапТестирования.Значение = "ПерезаполнитьНовыеВзаиморасчеты" Тогда
			
			НачалоЗамера3 = НачатьЗамерВремени(ПараметрыОбработки, "ЗаполнитьПоВсемРасчетам");
			
			ОперативныеВзаиморасчетыСервер.ЗаполнитьПоВсемРасчетам();
		
			ЗавершитьЗамерВремени(ПараметрыОбработки, "ЗаполнитьПоВсемРасчетам", НачалоЗамера3);
			
			ЗакрытиеМесяцаСДаты(ПараметрыОбработки, ПараметрыОбработки.Разделы);
			
		КонецЕсли;
		//-- Локализация
		
		Если ЭтапТестирования.Значение = "ПерезакрытьМесяц" Тогда
			
			ЗакрытиеМесяцаСДаты(ПараметрыОбработки, ПараметрыОбработки.Разделы);
			
		КонецЕсли;

		Расхождения = Новый Соответствие;
		НачалоЗамера4 = НачатьЗамерВремени(ПараметрыОбработки, "СравнитьСЭталоннымиДанными");

		Если ВыполнитьСравнениеЭталонныхДанных И ВременныеТаблицыЭталонныхДанных <> Неопределено Тогда
			Если ПараметрыОбработки.Свойство("ЭталонныеДанные") Тогда
				Расхождения = Тестирование.СравнитьСЭталоннымиДанными(ВременныеТаблицыЭталонныхДанных, ПараметрыОбработки.КонтрольныеРегистры, ПараметрыСравненияДанных,, ПараметрыОбработки.ЭталонныеДанные);
			Иначе
				Расхождения = Тестирование.СравнитьСЭталоннымиДанными(ВременныеТаблицыЭталонныхДанных, ПараметрыОбработки.КонтрольныеРегистры, ПараметрыСравненияДанных);
			КонецЕсли;
		КонецЕсли;
	
		ЗавершитьЗамерВремени(ПараметрыОбработки, "СравнитьСЭталоннымиДанными", НачалоЗамера4);

		ДанныеРасхожденийПоРазделам = ДанныеРасхожденийПоРазделам(ЭтапТестирования.Значение, Расхождения);
		
		КлючЭтапа = "ДанныеРасхождений";
		Если Не ЭтапТестирования.Значение = "ПерезакрытьМесяц" Тогда
			КлючЭтапа = КлючЭтапа + "_" + ЭтапТестирования.Значение;
		КонецЕсли;
		РезультатТестирования.Вставить(КлючЭтапа, ДанныеРасхожденийПоРазделам);
		
		Если Расхождения.Получить("КоличествоРасхождений") > 0 И ПараметрыОбработки.ДействиеПриРасхождении = "Остановить" Тогда
			Прервать;
		КонецЕсли;
		
		Если Расхождения.Получить("КоличествоРасхождений") > ПараметрыОбработки.ЛимитРасхождений И ПараметрыОбработки.ДействиеПриРасхождении = "ОстановитьУсловие" Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	КоличествоРасхождений = 0;
	//++ Локализация
	Если РезультатТестирования.Свойство("ДанныеРасхождений_ПереходНаНовыеВзаиморасчеты", КоличествоРасхождений) И КоличествоРасхождений = 0
		И (Не РезультатТестирования.Свойство("ДанныеРасхождений_ПерезаполнитьНовыеВзаиморасчеты", КоличествоРасхождений) Или КоличествоРасхождений = 0) Тогда
		Константы.НоваяАрхитектураВзаиморасчетов.Установить(Ложь);
	КонецЕсли;
	//-- Локализация
	
	ЗавершитьЗамерВремени(ПараметрыОбработки, "ТестироватьЗаПериод", НачалоЗамера);
	
	Возврат РезультатТестирования;
	
КонецФункции

Функция ТестироватьПоПлануТестирования(ПланТестирования, ПараметрыОбработки)
	
	РезультатТестирования = Новый Структура("Отказ", Ложь);
	ВозвратНаСтаруюАрхитектуруВзаиморасчетов = Ложь;
	
	Для каждого СтрокаЭтапа Из ПланТестирования.Строки Цикл
		
		Если Не СтрокаЭтапа.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		ДлительныеОперации.СообщитьПрогресс(15, СтрокаЭтапа.ИмяУзла);
		
		ПараметрыСравненияДанных = Тестирование.ПараметрыЗапроса(ПараметрыОбработки.НачалоРасчета);
		ПараметрыСравненияДанных.КонецПериода = ПараметрыОбработки.КонецРасчета;
		
		ДлительныеОперации.СообщитьПрогресс(15, НСтр("ru = 'Сохранение эталонных данных'"));
		
		КонтрольныеРегистры = Новый Массив;
		РазделыТестирования = Новый Массив;
		Для каждого СтрокаРаздела Из СтрокаЭтапа.Строки Цикл
			Если Не СтрокаРаздела.Использование Тогда
				Продолжить;
			КонецЕсли;
			РазделыТестирования.Добавить(СтрокаРаздела.ИмяУзла);
			Для каждого СтрокаРегистра Из СтрокаРаздела.Строки Цикл
				Если СтрокаРегистра.Использование Тогда
					КонтрольныеРегистры.Добавить(СтрокаРегистра.ИмяУзла);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		ВременныеТаблицыЭталонныхДанных = Тестирование.СохранитьЭталонныеДанные(КонтрольныеРегистры, ПараметрыСравненияДанных);
		
		Если СтрокаЭтапа.ИмяУзла = "ПереходНаНовыеВзаиморасчеты" Тогда
			
			ДлительныеОперации.СообщитьПрогресс(15, НСтр("ru = 'Заполнение регистров по расчетным документам'"));
		
			ПараметрыЗадания = Новый Структура("Дата", ПараметрыОбработки.НачалоРасчета);
			ОперативныеВзаиморасчетыСервер.ЗаполнитьРегистрыПриВключенииНовойАрхитектуры(ПараметрыЗадания, Неопределено);
		
			ЗакрытиеМесяцаСДаты(ПараметрыОбработки, РазделыТестирования);
			
		КонецЕсли;
		
		Если СтрокаЭтапа.ИмяУзла = "ПерезаполнитьНовыеВзаиморасчеты" Тогда
			
			ДлительныеОперации.СообщитьПрогресс(15, НСтр("ru = 'Перезаполнение взаиморасчетов'"));
		
			ОперативныеВзаиморасчетыСервер.ЗаполнитьПоВсемРасчетам();
		
			ЗакрытиеМесяцаСДаты(ПараметрыОбработки, РазделыТестирования);
			
		КонецЕсли;
		
		Если СтрокаЭтапа.ИмяУзла = "ПерезакрытьМесяц" Тогда
			
			ЗакрытиеМесяцаСДаты(ПараметрыОбработки, РазделыТестирования);
			
		КонецЕсли;
		
		ДлительныеОперации.СообщитьПрогресс(15, НСтр("ru = 'Сравнение эталонных данных'"));
		
		Расхождения = Тестирование.СравнитьСЭталоннымиДанными(ВременныеТаблицыЭталонныхДанных, КонтрольныеРегистры, ПараметрыСравненияДанных);
		СтрокаЭтапа.КоличествоРасхождений = Расхождения.Получить("КоличествоРасхождений");
		
		ДлительныеОперации.СообщитьПрогресс(15, НСтр("ru = 'Заполнение данных расхождений'"));
		
		ЗаполнитьРезультатамиТестирования(СтрокаЭтапа, Расхождения);
		
		Если СтрокаЭтапа.КоличествоРасхождений > 0 И ПараметрыОбработки.ДействиеПриРасхождении = "Остановить" Тогда
			Прервать;
		КонецЕсли;
		
		Если СтрокаЭтапа.КоличествоРасхождений > ПараметрыОбработки.ЛимитРасхождений И ПараметрыОбработки.ДействиеПриРасхождении = "ОстановитьУсловие" Тогда
			Прервать;
		КонецЕсли;
		
		Если СтрокаЭтапа.ИмяУзла = "ПереходНаНовыеВзаиморасчеты" И СтрокаЭтапа.КоличествоРасхождений = 0 Тогда
			ВозвратНаСтаруюАрхитектуруВзаиморасчетов = Истина;
		КонецЕсли;
		
		Если СтрокаЭтапа.ИмяУзла = "ПерезаполнитьНовыеВзаиморасчеты" И СтрокаЭтапа.КоличествоРасхождений <> 0 И ВозвратНаСтаруюАрхитектуруВзаиморасчетов Тогда
			ВозвратНаСтаруюАрхитектуруВзаиморасчетов = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВозвратНаСтаруюАрхитектуруВзаиморасчетов Тогда
		Константы.НоваяАрхитектураВзаиморасчетов.Установить(Ложь);
	КонецЕсли;
	
	Возврат РезультатТестирования;
	
КонецФункции

Процедура СообщитьОбОшибке()
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Тестирование'", ОбщегоНазначения.КодОсновногоЯзыка())
		 	+ "." + НСтр("ru = 'Ошибка тестирования'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
КонецПроцедуры

Функция ДанныеРасхожденийПоРазделам(ЭтапТестирования, Расхождения)
	
	ДанныеРасхождений = Новый Соответствие;
	
	Если ЗначениеЗаполнено(Расхождения) И Расхождения.Получить("КоличествоРасхождений") <> 0 Тогда
		
		СоответствиеРегистровРазделам = СоответствиеРегистровРазделам();
		
		ДанныеРасхожденийРазделов = Новый Соответствие;
		ВсеДокументыРасхождений = Новый Массив;
		// собираем документы с расхождениями по разделам и отдельно общий массив
		Для Каждого Строка Из Расхождения Цикл
			РазделТекущегоРасхождения = СоответствиеРегистровРазделам[Строка.Ключ];
			Если РазделТекущегоРасхождения <> Неопределено Тогда
				Если ДанныеРасхожденийРазделов.Получить(РазделТекущегоРасхождения) = Неопределено Тогда
					ДанныеРасхожденийРазделов.Вставить(РазделТекущегоРасхождения, Новый Массив);
				КонецЕсли;
				
				Если Строка.Значение.Свойство("Документы") Тогда
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
						ДанныеРасхожденийРазделов[РазделТекущегоРасхождения],
						Строка.Значение.Документы,
						Истина);
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
						ВсеДокументыРасхождений,
						Строка.Значение.Документы,
						Истина);
				Иначе
					ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Неопределено);
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
						ДанныеРасхожденийРазделов[РазделТекущегоРасхождения],
						ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Неопределено),
						Истина);
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
						ВсеДокументыРасхождений,
						ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Неопределено),
						Истина);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого РасхожденияРаздела Из ДанныеРасхожденийРазделов Цикл
			Раздел = РасхожденияРаздела.Ключ;
			ДанныеРасхожденийДокументов = Новый Соответствие;
			Для Каждого ДокументРасхождений Из РасхожденияРаздела.Значение Цикл
				СтруктураРасхождений = СтруктураРасхожденийРаздела(Раздел);
				ДанныеРасхожденийДокументов.Вставить(ДокументРасхождений, СтруктураРасхождений);
				Для Каждого Строка Из Расхождения Цикл
					Если СоответствиеРегистровРазделам[Строка.Ключ] = Раздел Тогда
						
						СтруктураРасхождений.Файл.ЗаписатьНачалоЭлемента("ОбъектМетаданных");
						СтрокаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(Строка.Ключ); // имя регистра
						СтруктураРасхождений.Файл.ЗаписатьТекст(СтрокаXML);
						ИмяРегистратора = Тестирование.ИмяПоляРегистратораРегистра(Строка.Ключ);
							
						Если Строка.Значение.Свойство("Таблица") Тогда
							
							ТаблицаРасхождений = Строка.Значение.Таблица;
							СтрокиПоДокументу = ТаблицаРасхождений.НайтиСтроки(Новый Структура(ИмяРегистратора, ДокументРасхождений));
							ТаблицаРасхожденийДокумента = ТаблицаРасхождений.Скопировать(СтрокиПоДокументу);
							
							СтруктураРасхождений.Файл.ЗаписатьНачалоЭлемента("Записи");
							СтруктураРасхождений.Файл.ЗаписатьТекст(ОбщегоНазначения.ЗначениеВСтрокуXML(ТаблицаРасхожденийДокумента));
							СтруктураРасхождений.Файл.ЗаписатьКонецЭлемента(); // записи
							
						Иначе
							
							СтруктураРасхождений.Файл.ЗаписатьНачалоЭлемента("Записи");
							СтруктураРасхождений.Файл.ЗаписатьТекст(Строка.Значение.Записи);
							СтруктураРасхождений.Файл.ЗаписатьКонецЭлемента(); // записи
							
						КонецЕсли;
						
						СтруктураРасхождений.Файл.ЗаписатьКонецЭлемента(); // имя регистра
							
						СтруктураРасхождений.Количество = Строка.Значение.Количество; // максимум по регистру
						
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			СтруктураРасхождений = СтруктураРасхожденийРаздела(Раздел);
			ДанныеРасхожденийДокументов.Вставить("ОбщиеРасхожденияПоРазделу", СтруктураРасхождений);
			
			Для Каждого Строка Из Расхождения Цикл
				Если СоответствиеРегистровРазделам[Строка.Ключ] = Раздел Тогда
					
					СтруктураРасхождений.Файл.ЗаписатьНачалоЭлемента("ОбъектМетаданных");
					СтрокаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(Строка.Ключ); // имя регистра
					СтруктураРасхождений.Файл.ЗаписатьТекст(СтрокаXML);
					ИмяРегистратора = Тестирование.ИмяПоляРегистратораРегистра(Строка.Ключ);
					
					Если Строка.Значение.Свойство("Таблица") Тогда
						
						ТаблицаРасхождений = Строка.Значение.Таблица;
						СтрокиПоДокументам = Новый Массив;
						Для Каждого ДокументРасхождений Из ВсеДокументыРасхождений Цикл
							ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
								СтрокиПоДокументам,
								ТаблицаРасхождений.НайтиСтроки(Новый Структура(ИмяРегистратора, ДокументРасхождений)));
						КонецЦикла;
					
						СтруктураРасхождений.Файл.ЗаписатьНачалоЭлемента("Записи");
						СтруктураРасхождений.Файл.ЗаписатьТекст(ОбщегоНазначения.ЗначениеВСтрокуXML(ТаблицаРасхождений.Скопировать(СтрокиПоДокументам)));
						СтруктураРасхождений.Файл.ЗаписатьКонецЭлемента(); // записи
						
					Иначе
						
						СтруктураРасхождений.Файл.ЗаписатьНачалоЭлемента("Записи");
						СтруктураРасхождений.Файл.ЗаписатьТекст(Строка.Значение.Записи);
						СтруктураРасхождений.Файл.ЗаписатьКонецЭлемента(); // записи
						
					КонецЕсли;
					
					СтруктураРасхождений.Файл.ЗаписатьКонецЭлемента(); // имя регистра
					
					СтруктураРасхождений.Количество = Строка.Значение.Количество; // максимум по регистру
					
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ДанныеРасхожденийДокумента Из ДанныеРасхожденийДокументов Цикл
				
				ЗаписатьФайлОтчета(ДанныеРасхожденийДокумента.Значение.Файл);
				ДанныеТестирования = Новый ДвоичныеДанные(ДанныеРасхожденийДокумента.Значение.ПутьКФайлу);
				АдресХранилища = ПоместитьВоВременноеХранилище(ДанныеТестирования, Новый УникальныйИдентификатор);
				ДанныеРасхожденийДокумента.Значение.Вставить("АдресХранилища", АдресХранилища);
				УдалитьФайлы(ДанныеРасхожденийДокумента.Значение.ПутьКФайлу);
				ДанныеРасхожденийДокумента.Значение.Удалить("Файл");
				
			КонецЦикла;
			
			ДанныеРасхождений.Вставить(Раздел, ДанныеРасхожденийДокументов);
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеРасхождений;
	
КонецФункции

Процедура ЗаполнитьРезультатамиТестирования(СтрокаЭтапа, Расхождения)
	
	Если Не ЗначениеЗаполнено(Расхождения) Или Расхождения.Получить("КоличествоРасхождений") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ФайлРасхожденийЭтапа = СоздатьФайлОтчетаИСохранитьПутьКФайлу(СтрокаЭтапа);
	
	Для каждого СтрокаРаздела Из СтрокаЭтапа.Строки Цикл
		Если Не СтрокаРаздела.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		ФайлРасхожденийРаздела = СоздатьФайлОтчетаИСохранитьПутьКФайлу(СтрокаРаздела);
		
		Для каждого СтрокаРегистра Из СтрокаРаздела.Строки Цикл
			Если Не СтрокаРегистра.Использование Тогда
				Продолжить;
			КонецЕсли;
			РасхожденияРегистра = Расхождения.Получить(СтрокаРегистра.ИмяУзла);
			Если РасхожденияРегистра = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ФайлРасхожденийРегистра = СоздатьФайлОтчетаИСохранитьПутьКФайлу(СтрокаРегистра);
			
			ДополнитьФайлОтчетаРасхождениямиРегистра(СтрокаРегистра.ИмяУзла, СтрокаРаздела.КоличествоРасхождений, ФайлРасхожденийРаздела, РасхожденияРегистра);
			ДополнитьФайлОтчетаРасхождениямиРегистра(СтрокаРегистра.ИмяУзла, СтрокаРегистра.КоличествоРасхождений, ФайлРасхожденийРегистра, РасхожденияРегистра);
			ДополнитьФайлОтчетаРасхождениямиРегистра(СтрокаРегистра.ИмяУзла, СтрокаЭтапа.КоличествоРасхождений, ФайлРасхожденийЭтапа, РасхожденияРегистра);
			
			ЗаписатьФайлИСохранитьДанные(СтрокаРегистра, ФайлРасхожденийРегистра);
			
		КонецЦикла;
		
		ЗаписатьФайлИСохранитьДанные(СтрокаРаздела, ФайлРасхожденийРаздела);
		
	КонецЦикла;
	
	ЗаписатьФайлИСохранитьДанные(СтрокаЭтапа, ФайлРасхожденийЭтапа);
	
КонецПроцедуры

Функция СтруктураРасхожденийРаздела(РазделТекущегоРасхождения)
	
	СтруктураВозврата = Новый Структура;
	
	ПутьКФайлу = ПолучитьИмяВременногоФайла("xml");
	ФайлОтчета = СоздатьФайлОтчета(ПутьКФайлу);
	СтруктураВозврата.Вставить("Количество", 0);
	СтруктураВозврата.Вставить("Файл", ФайлОтчета);
	СтруктураВозврата.Вставить("ОбъектМетаданных", МетаданныеРасхожденияПоРазделу(РазделТекущегоРасхождения));
	СтруктураВозврата.Вставить("ПутьКФайлу", ПутьКФайлу);
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция МетаданныеРасхожденияПоРазделу(Раздел)
	
	СоответствиеМетаданныхИРазделов = Новый Соответствие;
	СоответствиеМетаданныхИРазделов.Вставить("Себестоимость", "РегистрыНакопления.СебестоимостьТоваров");
	СоответствиеМетаданныхИРазделов.Вставить("ВзаиморасчетыСПартнерами", "РегистрыНакопления.РасчетыСПоставщиками");
	//++ Локализация
	СоответствиеМетаданныхИРазделов.Вставить("НДС", "РегистрыНакопления.НДСПредъявленный");

	//-- Локализация

	
	Возврат СоответствиеМетаданныхИРазделов.Получить(Раздел);
	
КонецФункции

#Область ЗакрытиеМесяца

Процедура ЗакрытиеМесяцаСДаты(Параметры, Разделы = Неопределено)
	
	УстановитьЗаданияКРасчетуНаДату(Параметры, Разделы);
	ТестируемыйМесяц = Параметры.НачалоРасчета;
	
	ТестированиеЗакрытияМесяца = Истина;
	
	Пока ТестируемыйМесяц <= Параметры.КонецРасчета Цикл
		
		НачалоЗамера = НачатьЗамерВремени(Параметры, "ТестированиеЗакрытияМесяца" + " " + ТестируемыйМесяц);
		
		//++ Локализация
		
		
		//-- Локализация
		
		Если ТестированиеЗакрытияМесяца Тогда
			ЗакрытиеМесяцаСервер.ТестированиеЗакрытияМесяца(ТестируемыйМесяц);
		КонецЕсли;
		
		ЗавершитьЗамерВремени(Параметры, "ТестированиеЗакрытияМесяца" + " " + ТестируемыйМесяц, НачалоЗамера);
		
		ТестируемыйМесяц = КонецМесяца(ТестируемыйМесяц) + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьЗаданияКРасчетуНаДату(Параметры, ВыбранныеРазделы = Неопределено)
	
	Если ВыбранныеРазделы = Неопределено Тогда
		ВыбранныеРазделы = РазделыТестирования().ВыгрузитьЗначения();
	КонецЕсли;
	
	МассивОрганизаций 	= Справочники.Организации.ДоступныеОрганизации();
	СведенияОБлокировке = РегистрыСведений.НастройкаБлокировкиОтИзменений.СведенияОБлокировкеОтИзменений(МассивОрганизаций);
	ТаблицаБлокировок 	= СведенияОБлокировке.ТаблицаБлокировок;
	
	ТаблицаБлокировок.Сортировать("ПериодБлокировки");
	ТаблицаБлокировок.Индексы.Добавить("ПериодБлокировки");
	
	ТаблицаПериодов = ТаблицаБлокировок.Скопировать(, "ПериодБлокировки");
	ТаблицаПериодов.Свернуть("ПериодБлокировки", "");
	
	Для Каждого СтрокаПериода Из ТаблицаПериодов Цикл
		
		ОрганизацииПоПериоду = Новый Массив;
		СтрокиОрганизаций = ТаблицаБлокировок.НайтиСтроки(Новый Структура("ПериодБлокировки", СтрокаПериода.ПериодБлокировки));
		
		Для Каждого ТекСтр Из СтрокиОрганизаций Цикл
			ОрганизацииПоПериоду.Добавить(ТекСтр.Организация);
		КонецЦикла;
		
		Если НЕ ЗначениеЗаполнено(СтрокаПериода.ПериодБлокировки) Тогда
			Период = Параметры.НачалоРасчета;
		Иначе
			Период = Макс(Параметры.НачалоРасчета, ДобавитьМесяц(СтрокаПериода.ПериодБлокировки, 1));
		КонецЕсли;
		
		Если НачалоМесяца(Период) > НачалоМесяца(Параметры.КонецРасчета) Тогда
			Продолжить; // установлена блокировка на весь период расчета 
		КонецЕсли;
		
		Для Каждого РазделРасчета Из ВыбранныеРазделы Цикл
			
			Если РазделРасчета = "Себестоимость" Тогда
				НачалоЗамера1 = НачатьЗамерВремени(Параметры, "Установить-Себестоимость");
				РегистрыСведений.ЗаданияКРасчетуСебестоимости.СоздатьЗаписьРегистра(Период,, ОрганизацииПоПериоду); // по всем организациям
				ЗавершитьЗамерВремени(Параметры, "Установить-Себестоимость", НачалоЗамера1);
			КонецЕсли;
			
			Если РазделРасчета = "ВзаиморасчетыСПартнерами" Тогда
				НачалоЗамера2 = НачатьЗамерВремени(Параметры, "Установить-ВзаиморасчетыСПартнерами");
				Если ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
					РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьЗаписьРегистра(Период,, ОрганизацииПоПериоду, Перечисления.ОперацииЗакрытияМесяца.ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов);
				Иначе
					РегистрыСведений.ЗаданияКРаспределениюРасчетовСКлиентами.СоздатьЗаписьРегистра(Период, ОрганизацииПоПериоду); // по всем организациям
					РегистрыСведений.ЗаданияКРаспределениюРасчетовСПоставщиками.СоздатьЗаписьРегистра(Период, ОрганизацииПоПериоду); // по всем организациям
				КонецЕсли;
				ЗавершитьЗамерВремени(Параметры, "Установить-ВзаиморасчетыСПартнерами", НачалоЗамера2);
			КонецЕсли;
				
			//++ Локализация
			Если РазделРасчета = "НДС" Тогда
				
				НачалоЗамера3 = НачатьЗамерВремени(Параметры, "Установить-НДС");
				// Задания к распределению НДС
				ВыборкаДокументовРаспределенияНДС = ДокументыРаспределенияНДС(Период, ОрганизацииПоПериоду).Выбрать();
				
				Пока ВыборкаДокументовРаспределенияНДС.Следующий() Цикл
					РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьЗаписьРегистра(Период,, ВыборкаДокументовРаспределенияНДС.Организация, Перечисления.ОперацииЗакрытияМесяца.РаспределениеНДС);
				КонецЦикла;
				
				// Задания по формированию НДСПредъявленный, КнигиПокупок, КнигиПродаж
				ВыборкаЗаданийКФормированиюНДС = ЗаданияКФормированиюНДС(Период, ОрганизацииПоПериоду).Выбрать();
				РегистрыСведений.ЗаданияКФормированиюДвиженийПоНДС.СоздатьЗаписиРегистраПоДаннымВыборки(ВыборкаЗаданийКФормированиюНДС);
				ЗавершитьЗамерВремени(Параметры, "Установить-НДС", НачалоЗамера3);
				
			КонецЕсли;
			

			//-- Локализация
			
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

//++ Локализация
Функция ЗаданияКФормированиюНДС(Период, МассивОрганизаций)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НДСПредъявленный.Организация,
	|	НДСПредъявленный.СчетФактура,
	|	НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) КАК Месяц
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный КАК НДСПредъявленный
	|ГДЕ
	|	НДСПредъявленный.Период МЕЖДУ НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Период, МЕСЯЦ)
	|	И НДСПредъявленный.Организация В (&МассивОрганизаций)
	|	И НДСПредъявленный.РегламентнаяОперация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НДСЗаписиКнигиПокупок.Организация,
	|	НДСЗаписиКнигиПокупок.СчетФактура,
	|	НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ)
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок КАК НДСЗаписиКнигиПокупок
	|ГДЕ
	|	НДСЗаписиКнигиПокупок.Период МЕЖДУ НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Период, МЕСЯЦ)
	|	И НДСЗаписиКнигиПокупок.Организация В (&МассивОрганизаций)
	|	И НДСЗаписиКнигиПокупок.РегламентнаяОперация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НДСЗаписиКнигиПродаж.Организация,
	|	НДСЗаписиКнигиПродаж.СчетФактура,
	|	НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ)
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|ГДЕ
	|	НДСЗаписиКнигиПродаж.Период МЕЖДУ НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Период, МЕСЯЦ)
	|	И НДСЗаписиКнигиПродаж.Организация В (&МассивОрганизаций)
	|	И НДСЗаписиКнигиПродаж.РегламентнаяОперация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НДСЗаписиКнигиПокупок.Организация,
	|	НДСЗаписиКнигиПокупок.Регистратор,
	|	НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ)
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок КАК НДСЗаписиКнигиПокупок
	|ГДЕ
	|	НДСЗаписиКнигиПокупок.Период МЕЖДУ НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Период, МЕСЯЦ)
	|	И НДСЗаписиКнигиПокупок.Организация В (&МассивОрганизаций)
	|	И НДСЗаписиКнигиПокупок.РегламентнаяОперация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НДСЗаписиКнигиПродаж.Организация,
	|	НДСЗаписиКнигиПродаж.Регистратор,
	|	НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ)
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|ГДЕ
	|	НДСЗаписиКнигиПродаж.Период МЕЖДУ НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Период, МЕСЯЦ)
	|	И НДСЗаписиКнигиПродаж.Организация В (&МассивОрганизаций)
	|	И НДСЗаписиКнигиПродаж.РегламентнаяОперация";

	Запрос.УстановитьПараметр("Период", 			Период);
	Запрос.УстановитьПараметр("МассивОрганизаций", 	МассивОрганизаций);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
	
КонецФункции

Функция ДокументыРаспределенияНДС(Период, МассивОрганизаций)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РаспределениеНДС.Ссылка,
	|	РаспределениеНДС.Организация
	|ИЗ
	|	Документ.РаспределениеНДС КАК РаспределениеНДС
	|ГДЕ
	|	РаспределениеНДС.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РаспределениеНДС.Организация В (&МассивОрганизаций)
	|	И РаспределениеНДС.Проведен
	|	И РаспределениеНДС.ВыручкаНДС + РаспределениеНДС.ВыручкаНеНДС + РаспределениеНДС.ВыручкаЕНВД + РаспределениеНДС.ВыручкаНДС0 + РаспределениеНДС.ВыручкаНДС0СырьевыеТоварыУслуги + РаспределениеНДС.ВыручкаНДС0НесырьевыеТовары <> 0";
	
	Запрос.УстановитьПараметр("НачалоПериода", 		НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода", 		КонецМесяца(Период));
	Запрос.УстановитьПараметр("МассивОрганизаций", 	МассивОрганизаций);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
	
КонецФункции


//-- Локализация


#КонецОбласти

#Область РаботаСФайлами

Функция СоздатьФайлОтчета(ПутьКФайлу) Экспорт
	ФайлОтчета = Новый ЗаписьXML;
	ФайлОтчета.ОткрытьФайл(ПутьКФайлу);
	
	ФайлОтчета.ЗаписатьОбъявлениеXML();
	
	ФайлОтчета.ЗаписатьНачалоЭлемента("Корневой");
	Возврат ФайлОтчета;
КонецФункции

Процедура ЗаписатьФайлОтчета(ФайлОтчета)
	Если ФайлОтчета <> Неопределено Тогда
		ФайлОтчета.ЗаписатьКонецЭлемента(); // Корневой
		ФайлОтчета.Закрыть();
	КонецЕсли;
КонецПроцедуры

Функция СоздатьФайлОтчетаИСохранитьПутьКФайлу(СтрокаПланаТестирования)
	
	ПутьКФайлу = ПолучитьИмяВременногоФайла("xml");
	ФайлРасхождений = СоздатьФайлОтчета(ПутьКФайлу);
	СтрокаПланаТестирования.ПутьКФайлу = ПутьКФайлу;
	
	Возврат ФайлРасхождений;
	
КонецФункции

Процедура ДополнитьФайлОтчетаРасхождениямиРегистра(ИмяРегистра, КоличествоРасхожденийПоПлануТестирования, ФайлОтчета, РасхожденияРегистра)
	
	ФайлОтчета.ЗаписатьНачалоЭлемента("ОбъектМетаданных");
	СтрокаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ИмяРегистра); // имя регистра
	ФайлОтчета.ЗаписатьТекст(СтрокаXML);
	
	ФайлОтчета.ЗаписатьНачалоЭлемента("Записи");
	ФайлОтчета.ЗаписатьТекст(РасхожденияРегистра.Записи);
	ФайлОтчета.ЗаписатьКонецЭлемента(); // записи
	
	ФайлОтчета.ЗаписатьКонецЭлемента(); // имя регистра
	
	КоличествоРасхожденийПоПлануТестирования = КоличествоРасхожденийПоПлануТестирования + РасхожденияРегистра.Количество;
	
КонецПроцедуры

Процедура ЗаписатьФайлИСохранитьДанные(СтрокаПланаТестирования, ФайлОтчета)
	
	Если СтрокаПланаТестирования.КоличествоРасхождений > 0 Тогда
		ЗаписатьФайлОтчета(ФайлОтчета);
		ДанныеТестирования = Новый ДвоичныеДанные(СтрокаПланаТестирования.ПутьКФайлу);
		ПоместитьВоВременноеХранилище(ДанныеТестирования, СтрокаПланаТестирования.АдресХранилищаРасхождений);
		УдалитьФайлы(СтрокаПланаТестирования.ПутьКФайлу);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция ВремяВыполнения(ВремяНачала, ВремяОкончания)
	
	ВремяВСекундах = (ВремяОкончания - ВремяНачала) / 1000;
	
	Часы = Цел(ВремяВСекундах/3600);
	Минуты = Цел((ВремяВСекундах - Часы * 3600) / 60);
	Секунды = ВремяВСекундах - Часы * 3600 - Минуты * 60;
	
	ПродолжительностьЧасы = ?(Часы = 0, "", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 час'"), Часы));
	ПродолжительностьМинуты = ?(Минуты = 0, "", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 мин'"), Минуты));
	ПродолжительностьСекунды = ?(Секунды = 0, "", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 сек'"), Секунды));
	ПродолжительностьОбновления = ПродолжительностьЧасы + " " + ПродолжительностьМинуты + " " + ПродолжительностьСекунды;
	
	Возврат ПродолжительностьОбновления;
	
КонецФункции

#КонецОбласти

#КонецЕсли
