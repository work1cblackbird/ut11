#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем ТекущийКонтейнер;
Перем ТекущиеОбработчики; // ОбработкаОбъект.ВыгрузкаЗагрузкаДанныхМенеджерОбработчиковЗагрузкиДанных
Перем ТекущийПотокЗаменыСсылок; // ОбработкаОбъект.ВыгрузкаЗагрузкаДанныхПотокЗаменыСсылок
Перем ОбработанныеДублиПредопределенных; // Соответствие
Перем ФиксироватьОбработкуОбъектов;
Перем НаличиеОбработчиков; // Структура

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура Инициализировать(Контейнер, ЗагружаемыеТипы, ИсключаемыеТипы, Обработчики,
	СоответствиеСсылок = Неопределено) Экспорт
	
	ТекущийКонтейнер = Контейнер;
	ТекущиеОбработчики = Обработчики;
	
	ФиксироватьОбработкуОбъектов = Контейнер.ФиксироватьСостояние();
	
	Если Не ТекущийКонтейнер.ЭтоПродолжениеЗагрузки() И Не ТекущийКонтейнер.ЭтоДочернийПоток() Тогда
		ЗаписатьЗагружаемыеОбъектыМетаданных(ЗагружаемыеТипы, ИсключаемыеТипы);
	КонецЕсли;
	
	ТекущийПотокЗаменыСсылок = Обработки.ВыгрузкаЗагрузкаДанныхПотокЗаменыСсылок.Создать();
	ТекущийПотокЗаменыСсылок.Инициализировать(ТекущийКонтейнер, ТекущиеОбработчики, СоответствиеСсылок);
		
	ОбработанныеДублиПредопределенных = Новый Соответствие();
	
КонецПроцедуры

Процедура ЗагрузитьДанные() Экспорт
	
	ВыполнитьЗаменуСсылок();
	
	Если ИспользоватьМногопоточность() Тогда
		Задания = ЗапуститьПотокиЗагрузкиДанных();
		ВыгрузкаЗагрузкаДанныхСлужебный.ОжидатьВыгрузкуЗагрузкуДанныхВПотоках(Задания, ТекущийКонтейнер);
	Иначе
		ВыполнитьЗагрузкуДанных();
	КонецЕсли;
	
	Если ФиксироватьОбработкуОбъектов Тогда
		ТекущийКонтейнер.ЗафиксироватьЗавершениеОбработкиОбъектовМетаданных();
	КонецЕсли;
			
КонецПроцедуры

Процедура ЗагрузитьДанныеВПотоке() Экспорт
	
	Пока Истина Цикл
		
		РезультатПолучения = РегистрыСведений.ВыгрузкаЗагрузкаОбъектовМетаданных.ПолучитьОбъектКОбработке(Истина);
		
		Если Не РезультатПолучения.ЕстьОбъектыКОбработке Тогда
			Прервать;
		КонецЕсли;
		
		Если РезультатПолучения.Объект = Неопределено Тогда
			// Ожидаем окончания загрузки данных предыдущего приоритета и повторяем получение объекта для загрузки
			ОбщегоНазначенияБТС.Пауза(5);
			Продолжить;
		КонецЕсли;
		
		ВыполнитьЗагрузкуОбъектаМетаданных(РезультатПолучения.Объект);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращаемое значение: 
//  ОбработкаОбъект.ВыгрузкаЗагрузкаДанныхПотокЗаменыСсылок - текущий поток замены ссылок.
Функция ТекущийПотокЗаменыСсылок() Экспорт
	
	Возврат ТекущийПотокЗаменыСсылок;
	
КонецФункции

//@skip-warning ПустойМетод - особенность реализации.
//
Процедура Закрыть() Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗапуститьПотокиЗагрузкиДанных()
	
	ПараметрыПотока = ВыгрузкаЗагрузкаДанныхСлужебный.НовыеПараметрыПотоковВыгрузкиЗагрузкиДанных();
	ПараметрыПотока.ЭтоЗагрузка = Истина;
	ПараметрыПотока.КоличествоПотоков = ТекущийКонтейнер.КоличествоПотоков();
	
	ПараметрыПотока.Параметры.Вставить(
		"Контейнер",
		ТекущийКонтейнер.ПолучитьПараметрыИнициализацииВПотоке());
	ПараметрыПотока.Параметры.Вставить(
		"ПотокЗаменыСсылок",
		ТекущийПотокЗаменыСсылок.ПолучитьПараметрыИнициализацииВПотоке());
	
	Возврат ВыгрузкаЗагрузкаДанныхСлужебный.ЗапуститьПотокиВыгрузкиЗагрузкиДанных(ПараметрыПотока);
	
КонецФункции

Процедура ЗаписатьЗагружаемыеОбъектыМетаданных(ЗагружаемыеТипы, ИсключаемыеТипы)
	
	ТаблицаТипов = Новый ТаблицаЗначений();
	ТаблицаТипов.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число"));
	ТаблицаТипов.Колонки.Добавить("ПолноеИмя", Новый ОписаниеТипов("Строка"));
	ТаблицаТипов.Колонки.Добавить("КоличествоОбъектов", Новый ОписаниеТипов("Число"));
	
	ШаблонСообщения = НСтр(
		"ru = 'Загрузка данных объекта метаданных %1 пропущена, т.к. он включен в
		|список объектов метаданных, исключаемых из выгрузки и загрузки данных'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	СобытиеЖР = НСтр(
		"ru = 'Выгрузка загрузка данных. Загрузка объекта пропущена'",
		ОбщегоНазначения.КодОсновногоЯзыка());
		
	ИспользоватьМногопоточность = ИспользоватьМногопоточность();
	
	Для Каждого ОбъектМетаданных Из ЗагружаемыеТипы Цикл
		
		Если ИсключаемыеТипы.Найти(ОбъектМетаданных) <> Неопределено Тогда
			
			ЗаписьЖурналаРегистрации(
				СобытиеЖР,
				УровеньЖурналаРегистрации.Информация,
				ОбъектМетаданных,
				,
				СтрШаблон(ШаблонСообщения, ОбъектМетаданных.ПолноеИмя()));
			
			Продолжить;
			
		КонецЕсли;
		
		СтрокаТаблицы = ТаблицаТипов.Добавить();
		СтрокаТаблицы.Приоритет = ПриоритетЗагрузкиОбъектаМетаданных(ОбъектМетаданных);
		СтрокаТаблицы.ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
		
		Если ИспользоватьМногопоточность Тогда
			СтрокаТаблицы.КоличествоОбъектов = ТекущийКонтейнер.ОбъектовКОбработкеПоОбъектуМетаданных(ОбъектМетаданных);
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаТипов.Сортировать("Приоритет, КоличествоОбъектов УБЫВ, ПолноеИмя");
	
	ТекущийПриоритет = Неопределено;
	НаборЗаписей = РегистрыСведений.ВыгрузкаЗагрузкаОбъектовМетаданных.СоздатьНаборЗаписей();
	
	Для Каждого СтрокаТаблицы Из ТаблицаТипов Цикл
		
		Если СтрокаТаблицы.Приоритет <> ТекущийПриоритет Тогда
			ТекущийПриоритет = СтрокаТаблицы.Приоритет;
			ПорядокОбработки = 10000 * СтрокаТаблицы.Приоритет;
		КонецЕсли;
		
		ПорядокОбработки = ПорядокОбработки + 1;
		
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.ПорядокОбработки = ПорядокОбработки;
		ЗаписьНабора.ОбъектМетаданных = СтрокаТаблицы.ПолноеИмя;
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция ПриоритетЗагрузкиОбъектаМетаданных(ОбъектМетаданных)
	
	Если ОбщегоНазначенияБТС.ЭтоКонстанта(ОбъектМетаданных) Тогда
		Приоритет = 0;
	ИначеЕсли ОбщегоНазначенияБТС.ЭтоСсылочныеДанные(ОбъектМетаданных) Тогда
		
		Если ОбщегоНазначенияБТС.ЭтоПланВидовХарактеристик(ОбъектМетаданных) Тогда
			Приоритет = 1;
		ИначеЕсли ОбщегоНазначенияБТС.ЭтоПланСчетов(ОбъектМетаданных) Тогда
			Приоритет = 2;
		ИначеЕсли ОбщегоНазначенияБТС.ЭтоПланВидовРасчета(ОбъектМетаданных) Тогда
			Приоритет = 3;
		ИначеЕсли ОбщегоНазначенияБТС.ЭтоСправочник(ОбъектМетаданных) Тогда
			Приоритет = 4;
		Иначе
			Приоритет = 5;
		КонецЕсли;
			
	ИначеЕсли Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных.Родитель()) Тогда // Перерасчеты
		Приоритет = 7;
	ИначеЕсли Метаданные.Последовательности.Содержит(ОбъектМетаданных) Тогда
		Приоритет = 8;
	ИначеЕсли ОбщегоНазначенияБТС.ЭтоНаборЗаписей(ОбъектМетаданных) Тогда
		Приоритет = 6;
	Иначе
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Выгрузка объекта метаданных не поддерживается %1'"),
			ОбъектМетаданных.ПолноеИмя());
		
		ВызватьИсключение(ТекстСообщения);
		
	КонецЕсли;
	
	Возврат Приоритет;
	
КонецФункции

Процедура ВыполнитьЗаменуСсылок()
	
	МенеджерПересозданияСсылок = Обработки.ВыгрузкаЗагрузкаДанныхМенеджерПересозданияСсылок.Создать();
	МенеджерПересозданияСсылок.Инициализировать(ТекущийКонтейнер, ТекущийПотокЗаменыСсылок);
	МенеджерПересозданияСсылок.ВыполнитьПересозданиеСсылок();
	
	МенеджерСопоставленияСсылок = Обработки.ВыгрузкаЗагрузкаДанныхМенеджерСопоставленияСсылок.Создать();
	МенеджерСопоставленияСсылок.Инициализировать(ТекущийКонтейнер, ТекущийПотокЗаменыСсылок, ТекущиеОбработчики);
	МенеджерСопоставленияСсылок.ВыполнитьСопоставлениеСсылок();
	
	ВыгрузкаЗагрузкаДанныхСлужебный.ЗафиксироватьСоответствиеСсылок(ТекущийПотокЗаменыСсылок.СоответствиеСсылок());
	
КонецПроцедуры

Процедура ВыполнитьЗагрузкуДанных()
	
	ВыборкаОбъектов = РегистрыСведений.ВыгрузкаЗагрузкаОбъектовМетаданных.ВыборкаОбъектовКОбработке();
	
	Пока ВыборкаОбъектов.Следующий() Цикл
		РегистрыСведений.ВыгрузкаЗагрузкаОбъектовМетаданных.ЗафиксироватьНачалоОбработкиОбъекта(ВыборкаОбъектов);
		ВыполнитьЗагрузкуОбъектаМетаданных(ВыборкаОбъектов);
	КонецЦикла;
	
КонецПроцедуры

// Выполнить загрузку объекта метаданных.
// 
// Параметры:
//  ВыборкаОбъектов - см. РегистрыСведений.ВыгрузкаЗагрузкаОбъектовМетаданных.ВыборкаОбъектовКОбработке
Процедура ВыполнитьЗагрузкуОбъектаМетаданных(ВыборкаОбъектов)
	
	Если ФиксироватьОбработкуОбъектов Тогда
		ТекущийКонтейнер.ЗафиксироватьНачалоОбработкиОбъектаМетаданных(ВыборкаОбъектов.ОбъектМетаданных);
	КонецЕсли;
	
	Отказ = Ложь;
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ВыборкаОбъектов.ОбъектМетаданных);
	НаличиеОбработчиков = ТекущиеОбработчики.НаличиеОбработчиковПоОбъектуМетаданных(ОбъектМетаданных);
	
	Если НаличиеОбработчиков.ПередЗагрузкойТипа Тогда
		ТекущиеОбработчики.ПередЗагрузкойТипа(ТекущийКонтейнер, ОбъектМетаданных, Отказ);
	КонецЕсли;
	
	Если Отказ И ФиксироватьОбработкуОбъектов Тогда
		ТекущийКонтейнер.ОбъектыОбработаны(
			ТекущийКонтейнер.ОбъектовКОбработкеПоОбъектуМетаданных(ОбъектМетаданных));
	ИначеЕсли Не Отказ Тогда
		ЗагрузитьДанныеОбъектаИнформационнойБазы(ОбъектМетаданных);		
	КонецЕсли;
	
	Если НаличиеОбработчиков.ПослеЗагрузкиТипа Тогда
		ТекущиеОбработчики.ПослеЗагрузкиТипа(ТекущийКонтейнер, ОбъектМетаданных);
	КонецЕсли;
	
	Если ФиксироватьОбработкуОбъектов Тогда
		ТекущийКонтейнер.ЗафиксироватьОкончаниеОбработкиОбъектаМетаданных(ВыборкаОбъектов.ОбъектМетаданных);
	КонецЕсли;
	
	РегистрыСведений.ВыгрузкаЗагрузкаОбъектовМетаданных.УдалитьЗапись(ВыборкаОбъектов);
	
КонецПроцедуры

// Загружает все необходимые данные для объекта информационной базы.
//
// Параметры:
//	ОбъектМетаданных - ОбъектМетаданных - загружаемый объект метаданных.
//
Процедура ЗагрузитьДанныеОбъектаИнформационнойБазы(Знач ОбъектМетаданных)
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Выгрузка загрузка данных. Загрузка объекта метаданных'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Информация,
		ОбъектМетаданных,
		,
		СтрШаблон(НСтр("ru = 'Начало загрузки данных объекта метаданных: %1'", ОбщегоНазначения.КодОсновногоЯзыка()),
			ОбъектМетаданных.ПолноеИмя()));
	
	КоличествоОбъектов = 0;
	ОтложенныеНаборы = Новый Соответствие;
	ПараметрыДляЗаписиИзменений = Неопределено;

	Если ОбщегоНазначения.ЭтоПланОбмена(ОбъектМетаданных) Тогда

		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Выгрузка загрузка данных. Загрузка объекта метаданных'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация,
			ОбъектМетаданных,
			,
			СтрШаблон(НСтр("ru = 'Очистка данных объекта метаданных: %1'", ОбщегоНазначения.КодОсновногоЯзыка()),
				ОбъектМетаданных.ПолноеИмя()));
		
		РаботаВМоделиСервиса.ОчиститьДанныеОбъектаМетаданных(ОбъектМетаданных.ПолноеИмя(), ОбъектМетаданных);
		
	КонецЕсли;
		
	Для Каждого ОписаниеФайла Из ТекущийКонтейнер.ПолучитьОписанияФайловИзКаталога(ВыгрузкаЗагрузкаДанныхСлужебный.InfobaseData(), ОбъектМетаданных.ПолноеИмя()) Цикл
		
		ТекущийКонтейнер.РаспаковатьФайл(ОписаниеФайла);
		
		ТекущийПотокЗаменыСсылок.ВыполнитьЗаменуСсылокВФайле(ОписаниеФайла);
		
		ПотокЧтения = Обработки.ВыгрузкаЗагрузкаДанныхПотокЧтенияДанныхИнформационнойБазы.Создать();
		ПотокЧтения.ОткрытьФайл(ОписаниеФайла.ПолноеИмя);
				
		Пока ПотокЧтения.ПрочитатьОбъектДанныхИнформационнойБазы() Цикл
			
			Объект = ПотокЧтения.ТекущийОбъект();
			Артефакты = ПотокЧтения.АртефактыТекущегоОбъекта();
			
			Если ПотокЧтения.ТипТекущегоОбъекта() = ВыгрузкаЗагрузкаДанныхСлужебный.InfobaseData() Тогда
			
				ЗаписатьОбъектВИнформационнуюБазу(Объект, Артефакты, ОтложенныеНаборы, ОбъектМетаданных);
				
			ИначеЕсли ПотокЧтения.ТипТекущегоОбъекта() = ВыгрузкаЗагрузкаДанныхСлужебный.InfobaseDataChanges() Тогда
				
				Если ПараметрыДляЗаписиИзменений = Неопределено Тогда
					
					ПараметрыДляЗаписиИзменений = ПараметрыДляЗаписиИзменений(ОбъектМетаданных);
					
				КонецЕсли;
				
				Если ПараметрыДляЗаписиИзменений.ЭтоКонстанта Тогда
					
					ЗаписатьИзменениеКонстанты(ОбъектМетаданных, Объект, Артефакты);
					
				ИначеЕсли ПараметрыДляЗаписиИзменений.ЭтоСсылочныеДанные Тогда
					
					ЗаписатьИзменениеСсылки(ОбъектМетаданных, Объект, Артефакты);
					
				ИначеЕсли ПараметрыДляЗаписиИзменений.ЭтоНаборЗаписей Тогда
					
					ЗаписатьИзменениеНабораЗаписей(ОбъектМетаданных, ПараметрыДляЗаписиИзменений.ПоляОтбора, Объект, Артефакты);
					
				КонецЕсли;
				
			КонецЕсли;
			
			КоличествоОбъектов = КоличествоОбъектов + 1;
			
		КонецЦикла;
		
		ПотокЧтения.Закрыть();
		УдалитьФайлы(ОписаниеФайла.ПолноеИмя);
		
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из ОтложенныеНаборы Цикл
		
		Объект = КлючИЗначение.Значение.Объект; // СправочникОбъект, ДокументОбъект
		АртефактыОбъекта = КлючИЗначение.Значение.АртефактыОбъекта;
		КоличествоОбъектов = КоличествоОбъектов + 1;
		
		Попытка
			Объект.Записать();
		Исключение
		
			Комментарий = СтрШаблон(
				НСтр("ru = 'Объекта метаданных %1 с представлением ""%2"" не загружен по причине: %3'", ОбщегоНазначения.КодОсновногоЯзыка()),
				ОбъектМетаданных.ПолноеИмя(),
				Строка(Объект),
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			// @skip-check module-nstr-camelcase - ошибка проверки
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Выгрузка загрузка данных. Загрузка объекта метаданных.Ошибка'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				ОбъектМетаданных,
				,
				Комментарий);
			
			ВызватьИсключение Комментарий;
				
		КонецПопытки;
			
		Если НаличиеОбработчиков.ПослеЗагрузкиОбъекта Тогда
			ТекущиеОбработчики.ПослеЗагрузкиОбъекта(ТекущийКонтейнер, Объект, АртефактыОбъекта);
		КонецЕсли;
		
	КонецЦикла;
	
	Комментарий = СтрШаблон(
		НСтр("ru = 'Окончание загрузки данных объекта метаданных: %1
					|Загружено объектов: %2'", ОбщегоНазначения.КодОсновногоЯзыка()),
		ОбъектМетаданных.ПолноеИмя(), 
		КоличествоОбъектов);
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Выгрузка загрузка данных. Загрузка объекта метаданных'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Информация,
		ОбъектМетаданных,
		,
		Комментарий);
	
КонецПроцедуры

Процедура ЗаписатьОбъектВИнформационнуюБазу(Объект, АртефактыОбъекта, ОтложенныеНаборы, ОбъектМетаданных)
	
	ЗаписатьОбъектВИнформационнуюБазуВнутр(
		Объект,
		АртефактыОбъекта,
		ОтложенныеНаборы,
		ОбъектМетаданных);
	
	Если ФиксироватьОбработкуОбъектов Тогда
		ТекущийКонтейнер.ОбъектОбработан();	
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаписатьОбъектВИнформационнуюБазуВнутр(Объект, АртефактыОбъекта, ОтложенныеНаборы, ОбъектМетаданных)
	
	Отказ = Ложь;
	
	Если НаличиеОбработчиков.ПередЗагрузкойОбъекта Тогда
		ТекущиеОбработчики.ПередЗагрузкойОбъекта(ТекущийКонтейнер, Объект, АртефактыОбъекта, Отказ);
	КонецЕсли;
	
	Если Не Отказ Тогда
		
		Если ОбщегоНазначенияБТС.ЭтоКонстанта(ОбъектМетаданных) Тогда
			
			Если Не ЗначениеЗаполнено(Объект.Значение) Тогда
				// Поскольку константы предварительно очищались - повторная перезапись пустых
				// значений не требуется.
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		Объект.ОбменДанными.Загрузка = Истина;
		
		Если ТипЗнч(Объект) <> Тип("УдалениеОбъекта") Тогда
			Объект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
		КонецЕсли;
		
		ДублиПредопределенных = НайтиДублиПредопределенных(ОбъектМетаданных, Объект);
		
		Попытка
			
			Если ЗначениеЗаполнено(ДублиПредопределенных) Тогда
			
				НачатьТранзакцию();
				
				Попытка
					
					Для Каждого ЭлементСоответствия Из ДублиПредопределенных Цикл
						
						ДубльПредопределенного = ЭлементСоответствия.Ключ;
						СсылкиРодитель = ЭлементСоответствия.Значение;
						НовыйРодитель = ПолучитьСсылкуНаОбъект(Объект);
						
						Для Каждого СсылкаНаДубль Из СсылкиРодитель Цикл
							ПодчиненныйОбъект = СсылкаНаДубль.ПолучитьОбъект();
							ПодчиненныйОбъект.Родитель = НовыйРодитель;
							ПодчиненныйОбъект.ОбменДанными.Загрузка = Истина;
							ПодчиненныйОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
							ПодчиненныйОбъект.Записать();
						КонецЦикла;
						
						ДубльПредопределенногоОбъект = ДубльПредопределенного.ПолучитьОбъект();
						ДубльПредопределенногоОбъект.ОбменДанными.Загрузка = Истина;
						ДубльПредопределенногоОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
						ДубльПредопределенногоОбъект.Удалить();
						
					КонецЦикла;
					
					Объект.Записать();
					
					ЗафиксироватьТранзакцию();
						
				Исключение
					ОтменитьТранзакцию();
					ВызватьИсключение;
				КонецПопытки;
				
			ИначеЕсли ОбщегоНазначенияБТС.ЭтоРегистрСведений(ОбъектМетаданных)
				И ОбъектМетаданных.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору 
				И ОбъектМетаданных.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.ПозицияРегистратора Тогда
				
				Регистратор = Объект.Отбор.Регистратор.Значение;
				Попытка
					Объект.Записать();
					ОтложенныеНаборы.Удалить(Регистратор);
				Исключение
					ОтложенныеНаборы.Вставить(Регистратор, Новый Структура("Объект, АртефактыОбъекта", Объект, АртефактыОбъекта));
					Возврат;
				КонецПопытки;
			
			Иначе 
				Объект.Записать();
			КонецЕсли;
			
		Исключение
			
			КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
			Комментарий = СтрШаблон(
				НСтр("ru = 'Объекта метаданных %1 с представлением ""%2"" не загружен по причине: %3'", КодЯзыка),
				ОбъектМетаданных.ПолноеИмя(),
				Строка(Объект),
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			// @skip-check module-nstr-camelcase - ошибка проверки
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Выгрузка загрузка данных. Загрузка объекта метаданных.Ошибка'", КодЯзыка),
				УровеньЖурналаРегистрации.Ошибка,
				ОбъектМетаданных,
				,
				Комментарий);
					
			ВызватьИсключение Комментарий;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если НаличиеОбработчиков.ПослеЗагрузкиОбъекта Тогда
		ТекущиеОбработчики.ПослеЗагрузкиОбъекта(ТекущийКонтейнер, Объект, АртефактыОбъекта);
	КонецЕсли;
		
КонецПроцедуры

Функция ПараметрыДляЗаписиИзменений(ОбъектМетаданных)
	
	Результат = Новый Структура;
	Результат.Вставить("ЭтоКонстанта", Ложь);
	Результат.Вставить("ЭтоСсылочныеДанные", Ложь);
	Результат.Вставить("ЭтоНаборЗаписей", Ложь);
	Результат.Вставить("ПоляОтбора", Новый Массив);
	
	Если ОбщегоНазначенияБТС.ЭтоКонстанта(ОбъектМетаданных) Тогда
		
		Результат.ЭтоКонстанта = Истина;
		
	ИначеЕсли ОбщегоНазначенияБТС.ЭтоСсылочныеДанные(ОбъектМетаданных) Тогда
		
		Результат.ЭтоСсылочныеДанные = Истина;
		
	ИначеЕсли ОбщегоНазначенияБТС.ЭтоНаборЗаписей(ОбъектМетаданных) Тогда
		
		Результат.ЭтоНаборЗаписей = Истина;
		
		Если Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных)
			И ОбъектМетаданных.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
			
			Если ОбъектМетаданных.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический
				И ОбъектМетаданных.ОсновнойОтборПоПериоду Тогда
				
				Результат.ПоляОтбора.Добавить("Период");
				
			КонецЕсли;
			
			Для Каждого Измерение Из ОбъектМетаданных.Измерения Цикл
				
				Если Измерение.ОсновнойОтбор Тогда
					
					Результат.ПоляОтбора.Добавить(Измерение.Имя);
					
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных.Родитель()) Тогда
			
			Результат.ПоляОтбора.Добавить("ОбъектПерерасчета");
			
		Иначе
			
			Результат.ПоляОтбора.Добавить("Регистратор");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаписатьИзменениеКонстанты(ОбъектМетаданных, Изменения, Артефакты)
	
	ПланыОбмена.ЗарегистрироватьИзменения(Изменения.Узел, ОбъектМетаданных);
	
	Если ЗначениеЗаполнено(Изменения.НомерСообщения) Тогда
		
		ПланыОбмена.ВыбратьИзменения(Изменения.Узел, Изменения.НомерСообщения, ОбъектМетаданных);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьИзменениеСсылки(ОбъектМетаданных, Изменения, Артефакты)
	
	ПланыОбмена.ЗарегистрироватьИзменения(Изменения.Узел, Изменения.Ссылка);
	
	Если ЗначениеЗаполнено(Изменения.НомерСообщения) Тогда
		
		ПланыОбмена.ВыбратьИзменения(Изменения.Узел, Изменения.НомерСообщения, Изменения.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьИзменениеНабораЗаписей(ОбъектМетаданных, ПоляОтбора, Изменения, Артефакты)
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
	НаборЗаписей = МенеджерОбъекта.СоздатьНаборЗаписей();
	
	Для Каждого ПолеОтбора Из ПоляОтбора Цикл
		
		ЭлементОтбора = НаборЗаписей.Отбор[ПолеОтбора]; // ЭлементОтбора
		ЭлементОтбора.Установить(Изменения[ПолеОтбора]);
		
	КонецЦикла;
	
	ПланыОбмена.ЗарегистрироватьИзменения(Изменения.Узел, НаборЗаписей);
	
	Если ЗначениеЗаполнено(Изменения.НомерСообщения) Тогда
		
		ПланыОбмена.ВыбратьИзменения(Изменения.Узел, Изменения.НомерСообщения, НаборЗаписей);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИспользоватьМногопоточность()
	
	Если ТекущийКонтейнер.ЭтоДочернийПоток() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ВыгрузкаЗагрузкаДанныхСлужебный.ИспользоватьМногопоточность(ТекущийКонтейнер.ПараметрыЗагрузки());
	
КонецФункции

Функция НайтиДублиПредопределенных(ОбъектМетаданных, Объект)
	
	Если ТипЗнч(Объект) = Тип("УдалениеОбъекта")
		Или Не ОбщегоНазначенияБТС.ЭтоСсылочныеДанныеПоддерживающиеПредопределенныеЭлементы(ОбъектМетаданных)
		Или Не Объект.Предопределенный Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ПолноеИмяОбъектаМетаданных = ОбъектМетаданных.ПолноеИмя();
	ИмяПредопределенного = Объект.ИмяПредопределенныхДанных;
	ПолноеИмяПредопределенного = СтрШаблон("%1.%2", ПолноеИмяОбъектаМетаданных, ИмяПредопределенного);
	
	Если ОбработанныеДублиПредопределенных.Получить(ПолноеИмяПредопределенного) <> Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОбработанныеДублиПредопределенных.Вставить(ПолноеИмяПредопределенного, Истина);
	Иерархический = Не ОбщегоНазначенияБТС.ЭтоПланВидовРасчета(ОбъектМетаданных) 
		И (ОбщегоНазначенияБТС.ЭтоПланСчетов(ОбъектМетаданных) Или ОбъектМетаданных.Иерархический);
	
	Если Иерархический Тогда
		
		ТекстЗапроса = СтрЗаменить(
			"ВЫБРАТЬ
			|	ТаблицаОбъекта.Ссылка КАК Ссылка,
			|	ЕСТЬNULL(ТаблицаРодитель.Ссылка, НЕОПРЕДЕЛЕНО) КАК СсылкаРодитель
			|ИЗ
			|	&Таблица КАК ТаблицаОбъекта
			|		ЛЕВОЕ СОЕДИНЕНИЕ &Таблица КАК ТаблицаРодитель
			|		ПО ТаблицаОбъекта.Ссылка = ТаблицаРодитель.Родитель
			|ГДЕ
			|	ТаблицаОбъекта.ИмяПредопределенныхДанных = &ИмяПредопределенного
			|	И ТаблицаОбъекта.Ссылка <> &Ссылка
			|ИТОГИ ПО
			|	Ссылка",
			"&Таблица",
		 	ПолноеИмяОбъектаМетаданных);
		
	Иначе
		
		ТекстЗапроса = СтрЗаменить(
			"ВЫБРАТЬ
			|	ТаблицаОбъекта.Ссылка КАК Ссылка,
			|	НЕОПРЕДЕЛЕНО КАК СсылкаРодитель
			|ИЗ
			|	&Таблица КАК ТаблицаОбъекта
			|ГДЕ 
			|	ТаблицаОбъекта.ИмяПредопределенныхДанных = &ИмяПредопределенного
			|	И ТаблицаОбъекта.Ссылка <> &Ссылка",
			"&Таблица",
		 	ПолноеИмяОбъектаМетаданных);
		 
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ИмяПредопределенного", ИмяПредопределенного);
	Запрос.УстановитьПараметр("Ссылка", ПолучитьСсылкуНаОбъект(Объект));
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДублиПредопределенных = Новый Соответствие();
	ВыборкаДубли = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДубли.Следующий() Цикл
		
		СсылкиРодитель = Новый Массив();
		ДублиПредопределенных.Вставить(ВыборкаДубли.Ссылка, СсылкиРодитель);
		
		ВыборкаРодитель = ВыборкаДубли.Выбрать();
		
		Пока ВыборкаРодитель.Следующий() Цикл
			
			Если ЗначениеЗаполнено(ВыборкаРодитель.СсылкаРодитель) Тогда
				СсылкиРодитель.Добавить(ВыборкаРодитель.СсылкаРодитель);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДублиПредопределенных;
	
КонецФункции

Функция ПолучитьСсылкуНаОбъект(Объект)
	
	Возврат ?(Объект.ЭтоНовый(), Объект.ПолучитьСсылкуНового(), Объект.Ссылка);
	
КонецФункции

#КонецОбласти

#КонецЕсли
