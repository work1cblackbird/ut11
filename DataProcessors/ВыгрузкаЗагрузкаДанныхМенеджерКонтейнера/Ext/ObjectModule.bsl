#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем ДляВыгрузки;
Перем ДляЗагрузки;
Перем ЭтоДочернийПоток;

Перем КонтейнерИнициализирован;
Перем ВременныйКаталог;
Перем ИмяФайлаВыгрузки;
Перем Архив;
Перем КоличествоФайловПоВиду;
Перем ВремяНачалаВыгрузки;
Перем Состав; // ТаблицаЗначений
Перем ИспользуемыеФайлы; // Массив из Строка
Перем Предупреждения; // см. Предупреждения
Перем ВыгрузитьВТом;
Перем ВыгрузитьНаКлиента;
Перем ВыгруженоНаКлиентаЧастей;
Перем СоставнаяЗагрузка; // см. НовыйСоставнаяЗагрузка
Перем ВыгружатьДанныеРасширений;
Перем ВыгрузитьДифференциальнуюКопию;
Перем ДляТехническойПоддержки;
Перем Параметры;
Перем КаркасныеВерсииРасширений;
Перем ДанныеЗагружаемогоФайла;
Перем ДублиПредопределенных; // Соответствие
Перем ИдентификаторПроцесса;
Перем НомерСообщенияВПотоке; // Число

Перем ФиксироватьСостояние;
Перем ЗаписьСостояния;
Перем МинимальнаяДатаСледующейЗаписиСостояния;
Перем ОбработаноОбъектовПослеРасчетаСостояния;
Перем ОбработаноОбъектовЗаТекущийСеанс;
Перем ОбъектовНаПроцентВыполнения;
Перем КоличествоОбрабатываемыхОбъектов;
Перем ОбработаноОбъектовПоМетаданным; // Соответствие
Перем ПолноеИмяОбрабатываемогоОбъектаМетаданных; // Строка

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Выгрузка

// Инициализирует выгрузку.
//
// Параметры:
//	ПараметрыВыгрузки - см. ВыгрузкаЗагрузкаДанных.ВыгрузитьДанныеТекущейОбластиВАрхив.ПараметрыВыгрузки
//
Процедура ИнициализироватьВыгрузку(Знач ПараметрыВыгрузки) Экспорт
	
	ПроверкаИнициализацииКонтейнера(Истина);
	
	ДляВыгрузки = Истина;
	Параметры = ПараметрыВыгрузки;
	ИдентификаторПроцесса = Новый УникальныйИдентификатор();
	
	ИнициализироватьПеременныеВыгрузки();
	ИнициализироватьДополнительныеСвойстваВыгрузки();
		
	ВремяНачалаВыгрузки = ТекущаяДатаСеанса();	

	ВременныйКаталог = ПолучитьИмяВременногоФайла("zip") + ПолучитьРазделительПути();
	СоздатьКаталог(ВременныйКаталог);
	
	ИмяФайлаВыгрузки = Неопределено;
	ПараметрыВыгрузки.Свойство("ИмяФайлаВыгрузки", ИмяФайлаВыгрузки);
	
	Если Не ЗначениеЗаполнено(ИмяФайлаВыгрузки) Тогда
		ИмяФайлаВыгрузки = ПолучитьИмяВременногоФайла("zip");
	КонецЕсли;
	
	Архив = ZipАрхивы.Создать(ИмяФайлаВыгрузки);
		
	Если Не ПараметрыВыгрузки.Свойство("ВыгрузитьВТом", ВыгрузитьВТом) Тогда
		ВыгрузитьВТом = Ложь;
	КонецЕсли;
	
	Если Не ПараметрыВыгрузки.Свойство("ВыгрузитьНаКлиента", ВыгрузитьНаКлиента) Тогда
		ВыгрузитьНаКлиента = Ложь;
	КонецЕсли;
	ВыгруженоНаКлиентаЧастей = 0;
	
	Если Не ПараметрыВыгрузки.Свойство("ВыгружатьДанныеРасширений", ВыгружатьДанныеРасширений) Тогда
		ВыгружатьДанныеРасширений = Ложь;
	КонецЕсли;
	
	Если Не ПараметрыВыгрузки.Свойство("ВыгрузитьДифференциальнуюКопию", ВыгрузитьДифференциальнуюКопию) Тогда
		ВыгрузитьДифференциальнуюКопию = Ложь;
	КонецЕсли;
	
	Если Не ПараметрыВыгрузки.Свойство("КаркасныеВерсииРасширений", КаркасныеВерсииРасширений) Тогда
		КаркасныеВерсииРасширений = Новый Соответствие();
	КонецЕсли;
	
	Если Не ПараметрыВыгрузки.Свойство("РежимВыгрузкиДляТехническойПоддержки", ДляТехническойПоддержки) Тогда
		ДляТехническойПоддержки = Ложь;
	КонецЕсли;
	
	ЗаполнитьКоличествоОбрабатываемыхОбъектов();
	ИнициализироватьСостояние();
	
	КонтейнерИнициализирован = Истина;
	
КонецПроцедуры

Процедура ИнициализироватьВыгрузкуВПотоке(ПараметрыПотока) Экспорт
	
	ИнициализироватьПеременныеВПотоке(ПараметрыПотока);
	ИнициализироватьПеременныеВыгрузки();
	ИнициализироватьДополнительныеСвойстваВыгрузки();
	ИнициализироватьПеременныеСостояния();
	
	КонтейнерИнициализирован = Истина;
	
КонецПроцедуры

// Параметры выгрузки
// 
// Возвращаемое значение: 
//  Структура - содержащая параметры выгрузки данных:
//		* ВыгружаемыеТипы - Массив из ОбъектМетаданных  - данные которых требуется выгрузить в архив
//      * ВыгружатьПользователей - Булево - выгружать информацию о пользователях информационной базы,
//      * ВыгружатьНастройкиПользователей - Булево - игнорируется если ВыгружатьПользователей = Ложь.
//    Также структура может содержать дополнительные ключи, которые могут быть обработаны внутри
//      произвольных обработчиков выгрузки данных.
Функция ПараметрыВыгрузки() Экспорт
	
	ПроверкаИнициализацииКонтейнера();
	
	Если ДляВыгрузки Тогда
		Возврат Новый ФиксированнаяСтруктура(Параметры);
	Иначе
		ВызватьИсключение НСтр("ru = 'Контейнер не инициализирован для выгрузки данных.'");
	КонецЕсли;
	
КонецФункции

Функция ДляТехническойПоддержки() Экспорт
	
	Возврат ДляТехническойПоддержки;
	
КонецФункции

Процедура УстановитьПараметрыВыгрузки(ПараметрыВыгрузки) Экспорт
	
	Параметры = ПараметрыВыгрузки;
	
КонецПроцедуры

// Создает файл в каталоге выгрузке.
//
// Параметры:
//	ВидФайла - Строка - вид файла выгрузки.
//	ТипДанных - Строка - тип данных.
//
// Возвращаемое значение:
//	Строка - имя файла.
//
Функция СоздатьФайл(Знач ВидФайла, Знач ТипДанных = Неопределено) Экспорт
	
	ПроверкаИнициализацииКонтейнера();
	
	Возврат ДобавитьФайл(ВидФайла, "xml", ТипДанных);
	
КонецФункции

// Создает произвольный файл выгрузки.
//
// Параметры:
//	Расширение - Строка - расширение файла.
//	ТипДанных - Строка - тип данных.
//
// Возвращаемое значение:
//	Строка - имя файла.
//
Функция СоздатьПроизвольныйФайл(Знач Расширение, Знач ТипДанных = Неопределено) Экспорт
	
	ПроверкаИнициализацииКонтейнера();
	
	Возврат ДобавитьФайл(ВыгрузкаЗагрузкаДанныхСлужебный.CustomData(), Расширение, ТипДанных);
	
КонецФункции

Процедура УстановитьКоличествоОбъектов(Знач ПолныйПутьКФайлу, Знач ЧислоОбъектов = Неопределено) Экспорт
	
	ПроверкаИнициализацииКонтейнера();
	
	СтрокаСостава = НайтиСтрокуСостава(ПолныйПутьКФайлу, "ПолноеИмя");
	Если СтрокаСостава = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Файл не найден'");
	КонецЕсли;
	
	СтрокаСостава.ЧислоОбъектов = ЧислоОбъектов;
	
КонецПроцедуры

Процедура ИсключитьФайл(Знач ПолныйПутьКФайлу) Экспорт
	
	ПроверкаИнициализацииКонтейнера();
	
	СтрокаСостава = НайтиСтрокуСостава(ПолныйПутьКФайлу, "ПолноеИмя");
	Если СтрокаСостава = Неопределено Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Файл %1 не найден в составе контейнера.'"), ПолныйПутьКФайлу);
	КонецЕсли;
		
	КоличествоФайлов = КоличествоФайловПоВиду[СтрокаСостава.ВидФайла];
	КоличествоФайловПоВиду.Вставить(СтрокаСостава.ВидФайла, КоличествоФайлов - 1);
		
	Состав.Удалить(СтрокаСостава);
	ИспользуемыеФайлы.Удалить(ИспользуемыеФайлы.Найти(ПолныйПутьКФайлу));
	УдалитьФайлы(ПолныйПутьКФайлу);
	
КонецПроцедуры

Процедура ФайлЗаписан(Знач ПолныйПутьКФайлу) Экспорт
	
	Файл = Новый Файл(ПолныйПутьКФайлу);
	
	СтрокаСостава = НайтиСтрокуСостава(ПолныйПутьКФайлу, "ПолноеИмя");
	Если СтрокаСостава <> Неопределено Тогда
		СтрокаСостава.Размер = Файл.Размер();
	КонецЕсли;
	
	ОтносительноеИмя = Сред(ПолныйПутьКФайлу, СтрДлина(ВременныйКаталог));
	КаталогАрхива = ПолучитьИмяВременногоФайла("zip");
	Части = СтрРазделить(ОтносительноеИмя, ПолучитьРазделительПути());
	Части.Удалить(Части.ВГраница());
	СоздатьКаталог(КаталогАрхива + СтрСоединить(Части, ПолучитьРазделительПути()));
	ПереместитьФайл(ПолныйПутьКФайлу, КаталогАрхива + ОтносительноеИмя);
	ИспользуемыеФайлы.Удалить(ИспользуемыеФайлы.Найти(ПолныйПутьКФайлу));
	
	Если ЭтоДочернийПоток() Тогда
		
		ДанныеСообщения = Новый Структура();
		ДанныеСообщения.Вставить("КаталогАрхива", КаталогАрхива);
		
		ВыгрузкаЗагрузкаДанныхСлужебный.ОтправитьСообщениеВРодительскийПоток(
			ЭтотОбъект,
			"ФайлЗаписан",
			ДанныеСообщения);
		
	Иначе
		
		ДобавитьФайлВАрхив(КаталогАрхива);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает признак выгрузки дифференциальной копии
// 
// Возвращаемое значение:
// 	Булево - 
Функция ВыгрузитьДифференциальнуюКопию() Экспорт
	
	Возврат ВыгрузитьДифференциальнуюКопию;
	
КонецФункции

Функция ЭтоРезервноеКопирование() Экспорт
	
	Если Параметры.Свойство("ЭтоРезервноеКопирование") Тогда
		Возврат Параметры.ЭтоРезервноеКопирование;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Финализирует выгрузку. Записывает информацию о выгрузке в файл.
//
// Возвращаемое значение:
//   Строка - полное имя файла или идентификатор файла.
//
Функция ФинализироватьВыгрузку() Экспорт
	
	ПроверкаИнициализацииКонтейнера();
	
	ИмяФайлаДайджеста = СоздатьФайл(ВыгрузкаЗагрузкаДанныхСлужебный.Digest(), "CustomData");
	ЗаписатьДайджест(ИмяФайлаДайджеста);
	
	ЗаписатьПредупрежденияВыгрузки();
	ЗаписатьДублиПредопределенных();
	
	ЗаписатьИнформациюОРасширениях();
	
	ЗаписатьИнформациюОВидахПриложения();
	
	ИмяФайлаСодержимого = СоздатьФайл(ВыгрузкаЗагрузкаДанныхСлужебный.PackageContents());
	ЗаписатьСодержимоеКонтейнераВФайл(ИмяФайлаСодержимого);
	
	Для Каждого НайденныйФайл Из НайтиФайлы(ВременныйКаталог, "*", Истина) Цикл
		Если НайденныйФайл.ЭтоФайл() Тогда
			ФайлЗаписан(НайденныйФайл.ПолноеИмя);
		КонецЕсли;
	КонецЦикла;
	
	УдалитьФайлы(ВременныйКаталог);
	
	Если ИспользуемыеФайлы.Количество() > 0 Тогда
		Шаблон = НСтр("ru = 'Обнаружены потерянные файлы: %1'");
		ВызватьИсключение СтрШаблон(Шаблон, СтрСоединить(ИспользуемыеФайлы, Символы.ПС));
	КонецЕсли;
	
	ZipАрхивы.Завершить(Архив);
	
	Если ВыгрузитьВТом Тогда
		Если СоставнаяЗагрузка = Неопределено Тогда
			Файл = Новый Файл(Архив.ИмяФайла);
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ИмяФайла", Файл.Имя);
			ДополнительныеПараметры.Вставить("РазмерФайла", Файл.Размер());
			ДополнительныеПараметры.Вставить("ТипФайла", "РезервнаяКопияОбластиДанных");
			ДополнительныеПараметры.Вставить("ОбластьДанных", РаботаВМоделиСервиса.ЗначениеРазделителяСеанса());
			ДополнительныеПараметры.Вставить("КлючОбластиДанных", Константы.КлючОбластиДанных.Получить());
			ДополнительныеПараметры.Вставить("ПоддержкаS3", Истина);
			
			ИдентификаторФайла = РаботаВМоделиСервиса.ПоместитьФайлВХранилищеМенеджераСервиса(Файл, , ДополнительныеПараметры);
			УдалитьФайлы(Архив.ИмяФайла);
			Возврат ИдентификаторФайла;
		Иначе
			Результат = ПрограммныйИнтерфейсСервиса.НоваяЧасть(СоставнаяЗагрузка.ИдентификаторФайла, СоставнаяЗагрузка.Части.Количество() + 1);
			Если Результат.Тип = "s3" Тогда
				ОтправитьЧастьФайлаS3(Результат, Архив.ИмяФайла);
				ПрограммныйИнтерфейсСервиса.ЗавершитьСоставнуюЗагрузку(СоставнаяЗагрузка.ИдентификаторФайла, СоставнаяЗагрузка.Части);
			Иначе
				ОтправитьЧастьФайлаDT(Результат, Архив.ИмяФайла, Истина);
			КонецЕсли;
			УдалитьФайлы(Архив.ИмяФайла);
			Возврат СоставнаяЗагрузка.ИдентификаторФайла;
		КонецЕсли;
	ИначеЕсли ВыгрузитьНаКлиента Тогда
		
		ВыгруженоНаКлиентаЧастей = ВыгруженоНаКлиентаЧастей + 1;
		Префикс = СтрШаблон("data2xml-%1", Формат(ВыгруженоНаКлиентаЧастей, "ЧГ=0"));
		ИмяФайлаВременногоХранилища = ФайлыБТС.НовыйФайлВременногоХранилища(Префикс, "zip", 120);
		ИмяФайлаВыгрузки = ФайлыБТС.ПолноеИмяФайлаВременногоХранилища(ИмяФайлаВременногоХранилища);
		ПереместитьФайл(Архив.ИмяФайла, ИмяФайлаВыгрузки);
		ЗарегистрироватьЧастьВыгрузки(ВыгруженоНаКлиентаЧастей, ИмяФайлаВременногоХранилища);
		
	КонецЕсли;
	
	Если ФиксироватьСостояние Тогда
		ЗаписатьСостояниеЗавершения();
	КонецЕсли;
	
	Возврат Архив.ИмяФайла;
	
КонецФункции

#КонецОбласти

#Область Загрузка

// Инициализирует загрузку.
//
// Параметры:
//	ДанныеФайла - Строка, УникальныйИдентификатор, Структура - имя файла, идентификатор файла или данные файла полученные с помощью ZipАрхивы.ПрочитатьАрхив().
//	ПараметрыЗагрузки - см. ВыгрузкаЗагрузкаДанных.ЗагрузитьДанныеТекущейОбластиИзАрхива.ПараметрыЗагрузки
//
Процедура ИнициализироватьЗагрузку(Знач ДанныеФайла, Знач ПараметрыЗагрузки) Экспорт
	
	ПроверкаИнициализацииКонтейнера(Истина);
	
	ДляЗагрузки = Истина;
	ДанныеЗагружаемогоФайла = ДанныеФайла;
	Параметры = ПараметрыЗагрузки;
	ИдентификаторПроцесса = Новый УникальныйИдентификатор();
	
	ИнициализироватьПеременныеЗагрузки(ДанныеФайла);

	РазделительПути = ПолучитьРазделительПути();
	 
	ВременныйКаталог = ПолучитьИмяВременногоФайла("zip") + РазделительПути;
	СоздатьКаталог(ВременныйКаталог);
	
	ИмяФайлаСостава = ПолучитьИмяФайла(ВыгрузкаЗагрузкаДанныхСлужебный.PackageContents());
	РаспаковатьФайлПоИмени(ИмяФайлаСостава);
	
	Состав = ВыгрузкаЗагрузкаДанныхСлужебный.СоставАрхива(ВременныйКаталог + ИмяФайлаСостава);
	
	Состав.Колонки.Добавить("ПолноеИмя", Новый ОписаниеТипов("Строка"));
	Для Каждого СтрокаСостава Из Состав Цикл
		СтрокаСостава.ПолноеИмя = ВременныйКаталог + СтрокаСостава.Каталог + РазделительПути + СтрокаСостава.Имя;
	КонецЦикла;
		
	Состав.Индексы.Добавить("ВидФайла, ТипДанных");
	Состав.Индексы.Добавить("ВидФайла");
	Состав.Индексы.Добавить("ПолноеИмя");
	Состав.Индексы.Добавить("Каталог");
	Состав.Индексы.Добавить("Имя");
	
	ПараметрыПоиска = ВыгрузкаЗагрузкаДанныхСлужебный.НовыеПараметрыПоискаФайлаИзСоставаАрхива();
	ПараметрыПоиска.Имя = ПолучитьИмяФайла(ВыгрузкаЗагрузкаДанныхСлужебный.Digest());
	
	ПараметрыФайлаДайджеста = ВыгрузкаЗагрузкаДанныхСлужебный.ПолучитьПараметрыФайлаИзСоставаАрхива(
		Состав, ПараметрыПоиска);
	ИмяФайлаДайджеста = ПараметрыФайлаДайджеста.Имя;
	ИмяКаталогаДайджеста = ПараметрыФайлаДайджеста.Каталог;
	
	РаспаковатьФайлПоИмени(ИмяФайлаДайджеста, ИмяКаталогаДайджеста);
	
	ДляТехническойПоддержки = ВыгрузкаЗагрузкаДанныхСлужебный.ВыгрузкаВРежимеДляТехническойПоддержки(
		ВременныйКаталог + ИмяКаталогаДайджеста + РазделительПути + ИмяФайлаДайджеста);
			
	ЗаполнитьКоличествоОбрабатываемыхОбъектов();
	ИнициализироватьСостояние();
	
	КонтейнерИнициализирован = Истина;
	
КонецПроцедуры

Процедура ИнициализироватьЗагрузкуВПотоке(ПараметрыПотока) Экспорт
	
	ИнициализироватьПеременныеВПотоке(ПараметрыПотока);
	ИнициализироватьПеременныеЗагрузки(ПараметрыПотока.ДанныеФайла);
	ИнициализироватьПеременныеСостояния();
	
	КонтейнерИнициализирован = Истина;
	
КонецПроцедуры

// Параметры загрузки
// 
// Возвращаемое значение: см. ВыгрузкаЗагрузкаДанных.ЗагрузитьДанныеТекущейОбластиИзАрхива.ПараметрыЗагрузки
Функция ПараметрыЗагрузки() Экспорт
	
	ПроверкаИнициализацииКонтейнера();
	
	Если ДляЗагрузки Тогда
		Возврат Новый ФиксированнаяСтруктура(Параметры);
	Иначе
		ВызватьИсключение НСтр("ru = 'Контейнер не инициализирован для загрузки данных.'");
	КонецЕсли;
	
КонецФункции

Процедура УстановитьПараметрыЗагрузки(ПараметрыЗагрузки) Экспорт
	
	Параметры = ПараметрыЗагрузки;
	
КонецПроцедуры

// Получает файл из каталога.
//
// Параметры:
//	ВидФайла - Строка - вид файла выгрузки.
//	ТипДанных - Строка - тип данных.
//
// Возвращаемое значение:
//	СтрокаТаблицыЗначений
//
Функция ПолучитьФайлИзКаталога(Знач ВидФайла, Знач ТипДанных = Неопределено) Экспорт
	
	ПроверкаИнициализацииКонтейнера();
	
	Файлы = ПолучитьФайлыИзСостава(ВидФайла, ТипДанных);
	Если Файлы.Количество() = 0 Тогда
		Возврат Неопределено;
	ИначеЕсли Файлы.Количество() > 1 Тогда
		Шаблон = НСтр("ru = 'В выгрузке содержатся дубли файлов, вид файла: %1, тип данных: %2, количество: %3'");
		ВызватьИсключение СтрШаблон(Шаблон, ВидФайла, ТипДанных, Файлы.Количество());
	КонецЕсли;
	
	Возврат Файлы[0];
	
КонецФункции

// Получает произвольный файл из каталога.
//
// Параметры:
//	ТипДанных - Строка - тип данных.
//
// Возвращаемое значение:
//	Строка
//
Функция ПолучитьПроизвольныйФайл(Знач ТипДанных = Неопределено) Экспорт
	
	ПроверкаИнициализацииКонтейнера();
	
	Файлы = ПолучитьФайлыИзСостава(ВыгрузкаЗагрузкаДанныхСлужебный.CustomData() , ТипДанных);
	Если Файлы.Количество() = 0 Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'В выгрузке отсутствует произвольный файл с типом данным %1.'"),
			ТипДанных);
	ИначеЕсли Файлы.Количество() > 1 Тогда
		Шаблон = НСтр("ru = 'В выгрузке содержатся дубли произвольных файлов, тип данных: %1, количество: %2'");
		ВызватьИсключение СтрШаблон(Шаблон, ТипДанных, Файлы.Количество());
	КонецЕсли;
	
	РаспаковатьФайл(Файлы[0]);
	
	Возврат Файлы[0].ПолноеИмя;
	
КонецФункции

// Получить файлы из каталога.
// 
// Параметры: 
//	ВидФайла - Строка - вид файла выгрузки.
//	ТипДанных - Строка - тип данных.
// 
// Возвращаемое значение:  
//  см. ПолучитьОписанияФайловИзКаталога
Функция ПолучитьФайлыИзКаталога(Знач ВидФайла, Знач ТипДанных = Неопределено) Экспорт
	
	ПроверкаИнициализацииКонтейнера();
	
	Возврат ПолучитьОписанияФайловИзКаталога(ВидФайла, ТипДанных);
	
КонецФункции

// Получить описания файлов из каталога
// 
// Параметры: 
//	ВидФайла - Строка - вид файла выгрузки.
//	ТипДанных - Строка - тип данных.
// 
// Возвращаемое значение: 
//  ТаблицаЗначений:
// * Имя - Строка
// * Каталог - Строка
// * ПолноеИмя - Строка
// * Размер - Число
// * ВидФайла - Строка
// * Хеш - Строка
// * ЧислоОбъектов - Число
// * ТипДанных - Строка
Функция ПолучитьОписанияФайловИзКаталога(Знач ВидФайла, Знач ТипДанных = Неопределено) Экспорт
	
	ПроверкаИнициализацииКонтейнера();
	
	ТаблицаСФайлами = ВыгрузкаЗагрузкаДанныхСлужебный.НовыйСостав();
	
	Если ТипЗнч(ВидФайла) = Тип("Массив") Тогда 
		
		Для Каждого ОтдельныйВид Из ВидФайла Цикл
			ДописатьФайлыВТаблицуЗначений(ТаблицаСФайлами, ПолучитьФайлыИзСостава(ОтдельныйВид , ТипДанных));
		КонецЦикла;
		Возврат ТаблицаСФайлами;
		
	ИначеЕсли ТипЗнч(ВидФайла) = Тип("Строка") Тогда 
		
		Возврат ПолучитьФайлыИзСостава(ВидФайла, ТипДанных);
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Неизвестный вид файла'");
		
	КонецЕсли;
	
КонецФункции

// Получить произвольные файлы
// 
// Параметры: 
//  ТипДанных - Строка - тип данных.
// 
// Возвращаемое значение: 
//  Массив из Строка.
Функция ПолучитьПроизвольныеФайлы(Знач ТипДанных = Неопределено) Экспорт
	
	ПроверкаИнициализацииКонтейнера();
	
	Возврат ПолучитьОписанияПроизвольныхФайлов(ТипДанных).ВыгрузитьКолонку("ПолноеИмя");
	
КонецФункции

// Получить полное имя файла
// 
// Параметры: 
//  ОтносительноеИмяФайла - Строка
// 
// Возвращаемое значение: 
//  Строка - полное имя файла.
Функция ПолучитьПолноеИмяФайла(Знач ОтносительноеИмяФайла) Экспорт
	
	ПроверкаИнициализацииКонтейнера();
	
	СтрокаСостава = Состав.Найти(ОтносительноеИмяФайла, "Имя");
	
	Если СтрокаСостава = Неопределено Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'В контейнере не обнаружен файл с относительным именем %1.'"),
			ОтносительноеИмяФайла);
	Иначе
		РаспаковатьФайл(СтрокаСостава);
		Возврат СтрокаСостава.ПолноеИмя;
	КонецЕсли;
	
КонецФункции

// Получает относительное имя файла
// 
// Параметры: 
//  ПолноеИмяФайла - Строка
// 
// Возвращаемое значение: 
//  Строка - относительное имя файла.
Функция ПолучитьОтносительноеИмяФайла(Знач ПолноеИмяФайла) Экспорт
	
	ПроверкаИнициализацииКонтейнера();
	
	СтрокаСостава = НайтиСтрокуСостава(ПолноеИмяФайла, "ПолноеИмя");
	
	Если СтрокаСостава = Неопределено Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'В контейнере не обнаружен файл %1.'"),
			ПолноеИмяФайла);
	Иначе
		Возврат СтрокаСостава.Имя;
	КонецЕсли;
	
КонецФункции

Процедура ФинализироватьЗагрузку() Экспорт
	
	ПроверкаИнициализацииКонтейнера();
	ОчиститьВременныеДанныеЗагрузки();
		
	Если ФиксироватьСостояние Тогда
		ЗаписатьСостояниеЗавершения();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьВременныеДанныеЗагрузки() Экспорт
	
	УдалитьФайлы(ВременныйКаталог);
	
КонецПроцедуры

Процедура РаспаковатьФайл(СтрокаФайл) Экспорт
	
	Для ОбратныйИндекс = 1 - ИспользуемыеФайлы.Количество() По 0 Цикл
		ПолноеИмяФайла = ИспользуемыеФайлы[-ОбратныйИндекс];
		Файл = Новый Файл(ПолноеИмяФайла);
		Если Не Файл.Существует() Тогда
			ИспользуемыеФайлы.Удалить(-ОбратныйИндекс);
		ИначеЕсли ФайлДоступенДляЗаписи(ПолноеИмяФайла) Тогда
			УдалитьФайлы(ПолноеИмяФайла);
			ИспользуемыеФайлы.Удалить(-ОбратныйИндекс);
		КонецЕсли;
	КонецЦикла;
	
	РаспаковатьФайлПоИмени(СтрокаФайл.Имя, СтрокаФайл.Каталог);
	ИспользуемыеФайлы.Добавить(СтрокаФайл.ПолноеИмя);
	
КонецПроцедуры

// Читает объект из файла.
// 
// Параметры: 
//  Файл - СтрокаТаблицыЗначений
// 
// Возвращаемое значение:
//  Произвольный
Функция ПрочитатьОбъектИзФайла(Файл) Экспорт
	
	РаспаковатьФайл(Файл);
	Результат = ВыгрузкаЗагрузкаДанных.ПрочитатьОбъектИзФайла(Файл.ПолноеИмя);
	УдалитьФайлы(Файл.ПолноеИмя);
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоПродолжениеЗагрузки() Экспорт
	
	ЭтоПродолжениеЗагрузки = Ложь;
	
	Если Параметры.Свойство("ВозможноПродолжениеПроцедурыЗагрузки") Тогда
		ЭтоПродолжениеЗагрузки = Параметры.ВозможноПродолжениеПроцедурыЗагрузки;
	КонецЕсли;
	
	Возврат ЭтоПродолжениеЗагрузки;
	
КонецФункции

#КонецОбласти

#Область СостояниеВыгрузкиЗагрузки

Функция ФиксироватьСостояние() Экспорт
	Возврат ФиксироватьСостояние;	
КонецФункции

Процедура УстановитьКоличествоОбработанныхОбъектов(ОбработаноОбъектов) Экспорт
	ЗаписьСостояния.ОбработаноОбъектов = ОбработаноОбъектов;
	ОбновитьСостояние(ТекущаяУниверсальнаяДата());
КонецПроцедуры

Процедура УстановитьДатуНачала(ДатаНачала) Экспорт
	ЗаписьСостояния.ДатаНачала = ДатаНачала;
КонецПроцедуры

Процедура ДополнитьОбщееКоличествоОбъектов(Количество) Экспорт
	
	ЗаписьСостояния.ВсегоОбъектов = ЗаписьСостояния.ВсегоОбъектов + Количество;
	
	РассчитатьОбъектовНаПроцентВыполнения();
	
	ДатаДополнения = ТекущаяУниверсальнаяДата();
		
	ОбновитьСостояние(ДатаДополнения);
	
	ЗаписатьСостояние(ДатаДополнения);
	
КонецПроцедуры

// Зафиксировать начало обработки объекта метаданных.
// 
// Параметры:
//  ОбъектМетаданных - Строка - Полное имя объекта метаданных
Процедура ЗафиксироватьНачалоОбработкиОбъектаМетаданных(ОбъектМетаданных) Экспорт
	
	ДатаНачалаОбработки = ТекущаяУниверсальнаяДата();
	ПолноеИмяОбрабатываемогоОбъектаМетаданных = ОбъектМетаданных;
	
	Если ЭтоДочернийПоток() Тогда
		
		ДанныеСообщения = Новый Структура();
		ДанныеСообщения.Вставить("ДатаНачалаОбработки", ДатаВСтроку(ДатаНачалаОбработки));
		ДанныеСообщения.Вставить("ОбъектМетаданных", ОбъектМетаданных);
		
		ВыгрузкаЗагрузкаДанныхСлужебный.ОтправитьСообщениеВРодительскийПоток(
			ЭтотОбъект,
			"ЗафиксироватьНачалоОбработкиОбъектаМетаданных",
			ДанныеСообщения);
		
	Иначе
	
		ЗафиксироватьНачалоОбработкиОбъектаМетаданныхВРодительскомПотоке(ОбъектМетаданных, ДатаНачалаОбработки);
		
	КонецЕсли;
	
КонецПроцедуры

// Зафиксировать окончание обработки объекта метаданных.
// 
// Параметры:
//  ОбъектМетаданных - Строка - Полное имя объекта метаданных
Процедура ЗафиксироватьОкончаниеОбработкиОбъектаМетаданных(ОбъектМетаданных) Экспорт
	
	ДатаОкончанияОбработки = ТекущаяУниверсальнаяДата();
	
	Если ЭтоДочернийПоток() Тогда
		
		ДанныеСообщения = Новый Структура();
		ДанныеСообщения.Вставить("ДатаОкончанияОбработки", ДатаВСтроку(ДатаОкончанияОбработки));
		ДанныеСообщения.Вставить("ОбъектМетаданных", ОбъектМетаданных);
		ДанныеСообщения.Вставить("ОбработаноОбъектов", ОбработаноОбъектовПослеРасчетаСостояния);
		
		ВыгрузкаЗагрузкаДанныхСлужебный.ОтправитьСообщениеВРодительскийПоток(
			ЭтотОбъект,
			"ЗафиксироватьОкончаниеОбработкиОбъектаМетаданных",
			ДанныеСообщения);
		
		ОбработаноОбъектовПослеРасчетаСостояния = 0;
		
	Иначе
		
		ЗафиксироватьОкончаниеОбработкиОбъектаМетаданныхВРодительскомПотоке(
			ОбъектМетаданных,
			ДатаОкончанияОбработки);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОбъектовКОбработкеПоОбъектуМетаданных(ОбъектМетаданных) Экспорт
		
	СтрокаКоличестваОбрабатываемыхОбъектов = КоличествоОбрабатываемыхОбъектов.Найти(
		ОбъектМетаданных.ПолноеИмя(),
		"ПолноеИмя");
		
	Если СтрокаКоличестваОбрабатываемыхОбъектов = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат СтрокаКоличестваОбрабатываемыхОбъектов.ЧислоОбъектов;
	
КонецФункции

Процедура ОбъектОбработан() Экспорт
	
	ОбъектыОбработаны(1);
	
КонецПроцедуры

Процедура ОбъектыОбработаны(Количество) Экспорт
	
	ДатаОбработкиОбъекта = ТекущаяУниверсальнаяДата();
	
	Если ЭтоДочернийПоток() Тогда
		
		ОбработаноОбъектовПослеРасчетаСостояния = ОбработаноОбъектовПослеРасчетаСостояния + Количество;
		
		Если ДатаОбработкиОбъекта < МинимальнаяДатаСледующейЗаписиСостояния Тогда
			Возврат;
		КонецЕсли;
					
		ДанныеСообщения = Новый Структура();
		ДанныеСообщения.Вставить("ДатаОбработки", ДатаВСтроку(ДатаОбработкиОбъекта));
		ДанныеСообщения.Вставить("ОбъектМетаданных", ПолноеИмяОбрабатываемогоОбъектаМетаданных);
		ДанныеСообщения.Вставить("ОбработаноОбъектов", ОбработаноОбъектовПослеРасчетаСостояния);
		
		ВыгрузкаЗагрузкаДанныхСлужебный.ОтправитьСообщениеВРодительскийПоток(
			ЭтотОбъект,
			"ОбъектыОбработаны",
			ДанныеСообщения);
		
		ОбработаноОбъектовПослеРасчетаСостояния = 0;
		МинимальнаяДатаСледующейЗаписиСостояния = ДатаОбработкиОбъекта + 5;
		
	Иначе
			
		ЗафиксироватьОбработкуОбъектовВРодительскомПотоке(
			ПолноеИмяОбрабатываемогоОбъектаМетаданных,
			ДатаОбработкиОбъекта,
			Количество);
		 
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗафиксироватьЗавершениеОбработкиОбъектовМетаданных() Экспорт
	
	ДатаЗавершенияОбработки = ТекущаяУниверсальнаяДата();
	
	ДополнитьОбъектамиОбработаннымиПослеРасчетаСостояния();		

	Если ДляВыгрузки Или Не ВыгрузкаЗагрузкаДанныхСлужебный.ЭтоПолнаяРезервнаяКопия(Параметры) Тогда 
		ЗаписьСостояния.ПроцентЗавершения = 100;	
	КонецЕсли;
	
	ЗаписьСостояния.ОбработаноОбъектовДоТекущегоОбъектаМетаданных = Неопределено;
	ЗаписьСостояния.ИмяОбрабатываемогоОбъектаМетаданных = Неопределено;
	ЗаписьСостояния.ДатаЗавершенияОбработкиОбъектов = ДатаЗавершенияОбработки;
	
	ЗаписатьСостояние(ДатаЗавершенияОбработки);
	
КонецПроцедуры

#КонецОбласти

#Область ПараллельнаяВыгрузкаЗагрузка

Функция ПолучитьПараметрыИнициализацииВПотоке() Экспорт
	
	СвойстваПараметров = Новый Массив();
	СвойстваПараметров.Добавить("КоличествоПотоков");
	
	ПараметрыИнициализации = Новый Структура();
	ПараметрыИнициализации.Вставить("ДляВыгрузки", ДляВыгрузки);
	ПараметрыИнициализации.Вставить("ДляЗагрузки", ДляЗагрузки);
	ПараметрыИнициализации.Вставить("ВременныйКаталог", ВременныйКаталог);
	ПараметрыИнициализации.Вставить("ДляТехническойПоддержки", ДляТехническойПоддержки);
	ПараметрыИнициализации.Вставить("ФиксироватьСостояние", ФиксироватьСостояние);
	ПараметрыИнициализации.Вставить("КоличествоОбрабатываемыхОбъектов", КоличествоОбрабатываемыхОбъектов);
	ПараметрыИнициализации.Вставить("ИдентификаторПроцесса", ИдентификаторПроцесса);
	ПараметрыИнициализации.Вставить("Параметры", Новый Структура());
	
	Если ДляЗагрузки Тогда
		ПараметрыИнициализации.Вставить("ДанныеФайла", ДанныеЗагружаемогоФайла);
		ПараметрыИнициализации.Вставить("Состав", Состав);
	КонецЕсли;
	
	Для Каждого ИмяСвойства Из СвойстваПараметров Цикл
		
		Если Параметры.Свойство(ИмяСвойства) Тогда
			ПараметрыИнициализации.Параметры.Вставить(ИмяСвойства, Параметры[ИмяСвойства]);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый ФиксированнаяСтруктура(ПараметрыИнициализации);
	
КонецФункции

// Обработать сообщение потока.
// 
// Параметры:
//  ИмяМетода - Строка - Имя метода
//  ДанныеСообщения - Структура - Данные сообщения
Процедура ОбработатьСообщениеПотока(ИмяМетода, ДанныеСообщения) Экспорт
	
	Если ИмяМетода = "ЗафиксироватьНачалоОбработкиОбъектаМетаданных" Тогда
		
		ЗафиксироватьНачалоОбработкиОбъектаМетаданныхВРодительскомПотоке(
			ДанныеСообщения.ОбъектМетаданных,
			Дата(ДанныеСообщения.ДатаНачалаОбработки));
			
	ИначеЕсли ИмяМетода = "ЗафиксироватьОкончаниеОбработкиОбъектаМетаданных" Тогда
		
		ЗафиксироватьОбработкуОбъектов(
			ДанныеСообщения.ОбъектМетаданных,
			ДанныеСообщения.ОбработаноОбъектов);
		ЗафиксироватьОкончаниеОбработкиОбъектаМетаданныхВРодительскомПотоке(
			ДанныеСообщения.ОбъектМетаданных,
			Дата(ДанныеСообщения.ДатаОкончанияОбработки));
			
	ИначеЕсли ИмяМетода = "ОбъектыОбработаны" Тогда
		
		ЗафиксироватьОбработкуОбъектовВРодительскомПотоке(
			ДанныеСообщения.ОбъектМетаданных,
			Дата(ДанныеСообщения.ДатаОбработки),
			ДанныеСообщения.ОбработаноОбъектов);
		
	ИначеЕсли ИмяМетода = "ФайлЗаписан" Тогда
		
		ДобавитьФайлВАрхив(ДанныеСообщения.КаталогАрхива);
		
	ИначеЕсли ИмяМетода = "ЗавершениеВыгрузки" Тогда 
		
		Для Каждого ЭлементСостав Из ДанныеСообщения.Состав Цикл
			ЗаполнитьЗначенияСвойств(Состав.Добавить(), ЭлементСостав);
		КонецЦикла;
		
		Для Каждого ЭлементМассива Из ДанныеСообщения.ИспользуемыеФайлы Цикл
			ИспользуемыеФайлы.Добавить(ЭлементМассива);
		КонецЦикла;
		
		Для Каждого ЭлементМассива Из ДанныеСообщения.Предупреждения Цикл
			Предупреждения.Добавить(ЭлементМассива);
		КонецЦикла;
		
		ДублиПредопределенныхИзПотока = ОбщегоНазначения.ЗначениеИзСтрокиXML(ДанныеСообщения.ДублиПредопределенных);
		
		Для Каждого ЭлементСоответствия Из ДублиПредопределенныхИзПотока Цикл
			ДублиПредопределенных.Вставить(ЭлементСоответствия.Ключ, ЭлементСоответствия.Значение);
		КонецЦикла;
		
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Неизвестный метод обработки сообщения потока: %1'"), ИмяМетода);
	КонецЕсли;
	
КонецПроцедуры

Функция ИдентификаторПроцесса() Экспорт
	
	Возврат ИдентификаторПроцесса;
	
КонецФункции

Функция ЭтоДочернийПоток() Экспорт
	
	Возврат ЭтоДочернийПоток;
	
КонецФункции

Функция КоличествоПотоков() Экспорт
	
	КоличествоПотоков = 0;
	
	Если Параметры.Свойство("КоличествоПотоков") Тогда
		КоличествоПотоков = Параметры.КоличествоПотоков;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КоличествоПотоков) Или КоличествоПотоков < 1 Тогда
		КоличествоПотоков = 1;
	КонецЕсли;
	
	Возврат КоличествоПотоков;
	
КонецФункции

// Следующий номер сообщения в потоке.
// 
// Возвращаемое значение:
//  Число - Следующий номер сообщения в потоке
Функция СледующийНомерСообщенияВПотоке() Экспорт
	
	НомерСообщенияВПотоке = НомерСообщенияВПотоке + 1;
	
	Возврат НомерСообщенияВПотоке;
	
КонецФункции

#КонецОбласти

#Область Прочее

// Возвращаемое значение: 
//  Массив из Строка
Функция Предупреждения() Экспорт
	
	Возврат Предупреждения;
	
КонецФункции

// Возвращаемое значение:
//  ТаблицаЗначений
Функция Состав() Экспорт
	
	Возврат Состав;
	
КонецФункции

// Возвращаемое значение:
//  Массив из Строка
Функция ИспользуемыеФайлы() Экспорт
	
	Возврат ИспользуемыеФайлы;
	
КонецФункции

// Возвращаемое значение:
//  Соответствие
Функция ДублиПредопределенных() Экспорт
	
	Возврат ДублиПредопределенных;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Параметры:
// 	ИдентификаторФайла - УникальныйИдентификатор
// 	
// Возвращаемое значение:
// 	Структура:
// 	* ИдентификаторФайла - УникальныйИдентификатор
// 	* Части - Массив из Строка
// 	* Отправлено - Число
// 	
Функция НовыйСоставнаяЗагрузка(ИдентификаторФайла) 
	
	НовыйСоставнаяЗагрузка = Новый Структура;
	НовыйСоставнаяЗагрузка.Вставить("ИдентификаторФайла", ИдентификаторФайла);
	НовыйСоставнаяЗагрузка.Вставить("Части", Новый Массив);
	НовыйСоставнаяЗагрузка.Вставить("Отправлено", 0);

	Возврат НовыйСоставнаяЗагрузка;
	
КонецФункции

Функция ПолучитьФайлыИзСостава(Знач ВидФайла = Неопределено, Знач ТипДанных = Неопределено)
	
	Фильтр = Новый Структура;
	Если ВидФайла <> Неопределено Тогда
		Фильтр.Вставить("ВидФайла", ВидФайла);
	КонецЕсли;
	Если ТипДанных <> Неопределено Тогда
		Фильтр.Вставить("ТипДанных", ТипДанных);
	КонецЕсли;
	
	Возврат Состав.Скопировать(Фильтр);
	
КонецФункции

Процедура ПроверкаИнициализацииКонтейнера(Знач ПриИнициализации = Ложь)
	
	Если ДляВыгрузки И ДляЗагрузки Тогда
		ВызватьИсключение НСтр("ru = 'Некорректная инициализация контейнера.'");
	КонецЕсли;
	
	Если ПриИнициализации Тогда
		
		Если КонтейнерИнициализирован <> Неопределено И КонтейнерИнициализирован Тогда
			ВызватьИсключение НСтр("ru = 'Контейнер выгрузки уже был инициализирован ранее.'");
		КонецЕсли;
		
	Иначе
		
		Если Не КонтейнерИнициализирован Тогда
			ВызватьИсключение НСтр("ru = 'Контейнер выгрузки не инициализирован.'");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область РаботаСФайламиВСоставеКонтейнера

// Параметры: 
//  ВидФайла - Строка - Вид файла
//  Расширение - Строка - Расширение
//  ТипДанных - Неопределено, Строка - Тип данных
// 
// Возвращаемое значение: 
//  Строка - полное имя файла.
//
Функция ДобавитьФайл(Знач ВидФайла, Знач Расширение = "xml", Знач ТипДанных = Неопределено)
	
	Для ОбратныйИндекс = 1 - ИспользуемыеФайлы.Количество() По 0 Цикл
		ПолноеИмяФайла = ИспользуемыеФайлы[-ОбратныйИндекс];
		Файл = Новый Файл(ПолноеИмяФайла);
		Если Файл.Существует() И ФайлДоступенДляЗаписи(ПолноеИмяФайла) Тогда
			ФайлЗаписан(ПолноеИмяФайла);
		КонецЕсли;
	КонецЦикла;
	
	ИмяФайла = ПолучитьИмяФайла(ВидФайла, Расширение, ТипДанных);
	
	Каталог = "";
	
	Если ВидФайла = ВыгрузкаЗагрузкаДанныхСлужебный.Digest()
		Или ВидФайла = ВыгрузкаЗагрузкаДанныхСлужебный.Extensions() 
		Или ВидФайла = ВыгрузкаЗагрузкаДанныхСлужебный.CustomExtensions()
		Или ВидФайла = ВыгрузкаЗагрузкаДанныхСлужебный.DumpWarnings()
		Или ВидФайла = ВыгрузкаЗагрузкаДанныхСлужебный.PredefinedDataDuplicates()
		Или ВидФайла = ВыгрузкаЗагрузкаДанныхСлужебный.ApplicationTypes() Тогда
		
		ВидФайла = "CustomData";
		
	КонецЕсли;
	
	Если Не ВыгрузкаЗагрузкаДанныхСлужебный.ПравилаФормированияСтруктурыКаталогов().Свойство(ВидФайла, Каталог) Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Вид файла %1 не поддерживается.'"), ВидФайла);
	КонецЕсли;
	
	Если ПустаяСтрока(Каталог) Тогда
		ПолноеИмя = ВременныйКаталог + ИмяФайла;
	Иначе
			
		КоличествоФайлов = 0;
		Если Не КоличествоФайловПоВиду.Свойство(ВидФайла, КоличествоФайлов) Тогда
			КоличествоФайлов = 0;
		КонецЕсли;
		КоличествоФайлов = КоличествоФайлов + 1;
		КоличествоФайловПоВиду.Вставить(ВидФайла, КоличествоФайлов);
		
		МаксимальноеКоличествоФайловВКаталоге = 1000;
		
		НомерКаталога = Цел((КоличествоФайлов - 1) / МаксимальноеКоличествоФайловВКаталоге) + 1;
		Каталог = Каталог + ?(НомерКаталога = 1, "", Формат(НомерКаталога, "ЧГ=0"));
		
		Если КоличествоФайлов % МаксимальноеКоличествоФайловВКаталоге = 1 Тогда
			СоздатьКаталог(ВременныйКаталог + Каталог);
		КонецЕсли;
		
		ПолноеИмя = ВременныйКаталог + Каталог + ПолучитьРазделительПути() + ИмяФайла;
		
	КонецЕсли;
	
	Файл = Состав.Добавить();
	Файл.Имя = ИмяФайла;
	Файл.Каталог = Каталог;
	Файл.ПолноеИмя = ПолноеИмя;
	Файл.ТипДанных = ТипДанных;
	Файл.ВидФайла = ВидФайла;
	
	ИспользуемыеФайлы.Добавить(ПолноеИмя);
	
	Возврат ПолноеИмя;
	
КонецФункции

Процедура ДобавитьФайлВАрхив(КаталогАрхива)
	
	ZipАрхивы.ДобавитьФайл(Архив, КаталогАрхива);
	УдалитьФайлы(КаталогАрхива);
	
	Если ВыгрузитьВТом И ZipАрхивы.Размер(Архив) > 1024 * 1024 * 1024 Тогда
		
		ВремФайл = ПолучитьИмяВременногоФайла();
		ZipАрхивы.ОтделитьЧасть(Архив, ВремФайл);
		
		Если СоставнаяЗагрузка = Неопределено Тогда
			Результат = ПрограммныйИнтерфейсСервиса.НачатьСоставнуюЗагрузку(
				ВыгрузкаЗагрузкаДанныхКлиентСервер.ИмяФайлаВыгрузкиДанных(), 0, 
				"РезервнаяКопияОбласти", РаботаВМоделиСервиса.ЗначениеРазделителяСеанса());
			СоставнаяЗагрузка = НовыйСоставнаяЗагрузка(Результат.ИдентификаторФайла);
		Иначе
			Результат = ПрограммныйИнтерфейсСервиса.НоваяЧасть(СоставнаяЗагрузка.ИдентификаторФайла, 
				СоставнаяЗагрузка.Части.Количество() + 1);
		КонецЕсли;
		
		Если Результат.Тип = "s3" Тогда
			ОтправитьЧастьФайлаS3(Результат, ВремФайл);
		Иначе
			ОтправитьЧастьФайлаDT(Результат, ВремФайл, Ложь);
		КонецЕсли;
		
		УдалитьФайлы(ВремФайл);
		
	ИначеЕсли ВыгрузитьНаКлиента И ZipАрхивы.Размер(Архив) > 10 * 1024 * 1024 Тогда 
		
		ВыгруженоНаКлиентаЧастей = ВыгруженоНаКлиентаЧастей + 1;
		Префикс = СтрШаблон("data2xml-%1", Формат(ВыгруженоНаКлиентаЧастей, "ЧГ=0"));
		ИмяФайлаВременногоХранилища = ФайлыБТС.НовыйФайлВременногоХранилища(Префикс, "zip", 120);
		ИмяФайлаВыгрузки = ФайлыБТС.ПолноеИмяФайлаВременногоХранилища(ИмяФайлаВременногоХранилища);
		ZipАрхивы.ОтделитьЧасть(Архив, ИмяФайлаВыгрузки);
		ЗарегистрироватьЧастьВыгрузки(ВыгруженоНаКлиентаЧастей, ИмяФайлаВременногоХранилища);
		ОжидатьСкачиванияЧастей();
		
	КонецЕсли;
	
КонецПроцедуры 

Процедура ЗарегистрироватьЧастьВыгрузки(НомерЧасти, ИмяФайлаВременногоХранилища)
	
	Запись = РегистрыСведений.ЧастиВыгрузкиЗагрузкиОбластейДанных.СоздатьМенеджерЗаписи();
	Запись.Идентификатор = ЗаписьСостояния.Идентификатор;
	Запись.НомерЧасти = НомерЧасти;
	Запись.ИмяФайлаВременногоХранилища = ИмяФайлаВременногоХранилища;
	Запись.Записать();
	
КонецПроцедуры

Процедура ОжидатьСкачиванияЧастей()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Идентификатор", ЗаписьСостояния.Идентификатор);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ИЗ
	|	РегистрСведений.ЧастиВыгрузкиЗагрузкиОбластейДанных КАК ЧастиВыгрузкиЗагрузкиОбластейДанных
	|ГДЕ
	|	ЧастиВыгрузкиЗагрузкиОбластейДанных.Идентификатор = &Идентификатор";
	
	Пока Истина Цикл
		Выборка = Запрос.Выполнить().Выбрать();
		Если Не Выборка.Следующий() Или Выборка.Количество < 3 Тогда
			Возврат;
		КонецЕсли;
		ОбщегоНазначенияБТС.Пауза(5);
	КонецЦикла;
	
КонецПроцедуры

Функция ФайлДоступенДляЗаписи(ИмяФайла)
	
	Попытка
		ЗаписьДанных = Новый ЗаписьДанных(ИмяФайла);
		ЗаписьДанных.Закрыть();
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Функция ПолучитьИмяФайла(Знач ВидФайла, Знач Расширение = "xml", Знач ТипДанных = Неопределено)
	
	Возврат ВыгрузкаЗагрузкаДанныхСлужебный.ПолучитьИмяФайла(
		ВидФайла,
		Расширение,
		ТипДанных);
	
КонецФункции

#КонецОбласти

#Область РаботаСОписаниемСодержимогоКонтейнера

Процедура ЗаписатьСодержимоеКонтейнераВФайл(ИмяФайла)
	
	ПотокЗаписи = Новый ЗаписьXML();
	ПотокЗаписи.ОткрытьФайл(ИмяФайла);
	ПотокЗаписи.ЗаписатьОбъявлениеXML();
	ПотокЗаписи.ЗаписатьНачалоЭлемента("Data");
	
	ТипFile = ФабрикаXDTO.Тип("http://www.1c.ru/1cFresh/Data/Dump/1.0.2.1", "File");
	Для Каждого Строка Из Состав Цикл
		
		ДанныеОФайле = ФабрикаXDTO.Создать(ТипFile);
		
		ДанныеОФайле.Name = Строка.Имя;
		ДанныеОФайле.Type = Строка.ВидФайла;
		Если ЗначениеЗаполнено(Строка.Каталог) Тогда
			ДанныеОФайле.Directory = Строка.Каталог;
		КонецЕсли;
		Если ЗначениеЗаполнено(Строка.Размер) Тогда
			ДанныеОФайле.Size = Строка.Размер;
		КонецЕсли;
		Если ЗначениеЗаполнено(Строка.ЧислоОбъектов) Тогда
			ДанныеОФайле.Count = Строка.ЧислоОбъектов;
		КонецЕсли;
		Если ЗначениеЗаполнено(Строка.ТипДанных) Тогда
			ДанныеОФайле.DataType = Строка.ТипДанных;
		КонецЕсли;
		
		ФабрикаXDTO.ЗаписатьXML(ПотокЗаписи, ДанныеОФайле);
		
	КонецЦикла;
	
	ПотокЗаписи.ЗаписатьКонецЭлемента();
	ПотокЗаписи.Закрыть();
	
КонецПроцедуры

Процедура ЗаписатьДайджест(ИмяФайла)
	
	ИнформацияОКонфигурации = Новый СистемнаяИнформация();
	
	ЧислоОбъектов = Состав.Итог("ЧислоОбъектов");
	РазмерДанных  = Состав.Итог("Размер");
	
	ПродолжительностьВыгрузки = ТекущаяДатаСеанса() - ВремяНачалаВыгрузки;
	
	ПотокЗаписи = Новый ЗаписьXML();
	ПотокЗаписи.ОткрытьФайл(ИмяФайла);
	ПотокЗаписи.ЗаписатьОбъявлениеXML();
	ПотокЗаписи.ЗаписатьНачалоЭлемента("Digest");
	
	ПотокЗаписи.ЗаписатьНачалоЭлемента("Platform");
	ПотокЗаписи.ЗаписатьТекст(ИнформацияОКонфигурации.ВерсияПриложения);
	ПотокЗаписи.ЗаписатьКонецЭлемента(); 
	
	Если РаботаВМоделиСервиса.РазделениеВключено() Тогда
		ПотокЗаписи.ЗаписатьНачалоЭлемента("Zone");
		ПотокЗаписи.ЗаписатьТекст(XMLСтрока(РаботаВМоделиСервиса.ЗначениеРазделителяСеанса()));
		ПотокЗаписи.ЗаписатьКонецЭлемента();
	КонецЕсли; 
	
	ПотокЗаписи.ЗаписатьНачалоЭлемента("ObjectCount");
	ПотокЗаписи.ЗаписатьТекст(Формат(ЧислоОбъектов, "ЧГ=0"));
	ПотокЗаписи.ЗаписатьКонецЭлемента();

	ПотокЗаписи.ЗаписатьНачалоЭлемента("DataSize");
	ПотокЗаписи.ЗаписатьАтрибут("Measure", "Byte");
	ПотокЗаписи.ЗаписатьТекст(Формат(РазмерДанных, "ЧДЦ=1; ЧГ=0"));
	ПотокЗаписи.ЗаписатьКонецЭлемента();
	
	ПотокЗаписи.ЗаписатьНачалоЭлемента("Duration");
	ПотокЗаписи.ЗаписатьАтрибут("Measure", "Second");
	ПотокЗаписи.ЗаписатьТекст(Формат(ПродолжительностьВыгрузки, "ЧГ=0"));
	ПотокЗаписи.ЗаписатьКонецЭлемента();
	
	Если ПродолжительностьВыгрузки <>0 Тогда
		ПотокЗаписи.ЗаписатьНачалоЭлемента("SerializationSpeed");
		ПотокЗаписи.ЗаписатьАтрибут("Measure", "Byte/Second");
		ПотокЗаписи.ЗаписатьТекст(Формат(РазмерДанных / ПродолжительностьВыгрузки, "ЧДЦ=1; ЧГ=0"));
		ПотокЗаписи.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	Если ДляТехническойПоддержки Тогда
		ТипВыгрузки = "TechnicalSupport"
	Иначе                                  
		ТипВыгрузки = "Ordinary"	
	КонецЕсли;
	
	ПотокЗаписи.ЗаписатьНачалоЭлемента("DataDumpType");	
	ПотокЗаписи.ЗаписатьТекст(ТипВыгрузки); 
	ПотокЗаписи.ЗаписатьКонецЭлемента(); 
	
	ПотокЗаписи.ЗаписатьНачалоЭлемента("DumpWarningsCount");
	ПотокЗаписи.ЗаписатьТекст(Формат(Предупреждения.Количество(), "ЧН=0; ЧГ=0;"));
	ПотокЗаписи.ЗаписатьКонецЭлемента();
	
	ПотокЗаписи.ЗаписатьНачалоЭлемента("ContainsRegisteredChangesForExchangePlanNodes");
	ПотокЗаписи.ЗаписатьТекст(XMLСтрока(ВыгрузкаЗагрузкаУзловПлановОбменов.ВыгружатьЗарегистрированныеИзмененияДляУзловПланаОбмена(ЭтотОбъект)));
	ПотокЗаписи.ЗаписатьКонецЭлемента();
		
	ПотокЗаписи.ЗаписатьКонецЭлемента();
	ПотокЗаписи.Закрыть();
	
КонецПроцедуры

Процедура ЗаписатьПредупрежденияВыгрузки()
	
	ИмяФайлаПредупрежденийВыгрузки = ДобавитьФайл(ВыгрузкаЗагрузкаДанныхСлужебный.DumpWarnings(), "json",
		"CustomData");
	
	ЗаписьПредупреждений = Новый ЗаписьJSON;
	ЗаписьПредупреждений.ОткрытьФайл(ИмяФайлаПредупрежденийВыгрузки);
	ЗаписатьJSON(ЗаписьПредупреждений, Предупреждения);
	ЗаписьПредупреждений.Закрыть();
	
	ФайлЗаписан(ИмяФайлаПредупрежденийВыгрузки);
	
КонецПроцедуры

Процедура ЗаписатьИнформациюОРасширениях()

	ИмяФайлаПоставляемыхРасширений = СоздатьФайл(ВыгрузкаЗагрузкаДанныхСлужебный.Extensions(), "CustomData");
	ЗаписьПоставляемыхРасширений = Новый ЗаписьXML;
	ЗаписьПоставляемыхРасширений.ОткрытьФайл(ИмяФайлаПоставляемыхРасширений);
	ЗаписьПоставляемыхРасширений.ЗаписатьОбъявлениеXML();
	ЗаписьПоставляемыхРасширений.ЗаписатьНачалоЭлемента("Data");

	ИнформацияОПользовательскихРасширениях = Новый Массив;
	РазделениеВключено = РаботаВМоделиСервиса.РазделениеВключено();

	Если РазделениеВключено Тогда
		ПоставляемыеРасширения = РасширенияВМоделиСервиса.РасширенияТекущейОбластиДанных();
	КонецЕсли;
	
	ИменаУстановленныхИсправлений = ИменаУстановленныхИсправлений();
	ИменаРасширенийВидовПриложений = ИменаРасширенийВидовПриложений();
	
	СписокВсехРасширенийОбласти = Новый Массив;
	Для Каждого РасширениеКонфигурации Из РасширенияКонфигурации.Получить() Цикл
		
		Если РазделениеВключено
			И РасширениеКонфигурации.ОбластьДействия <> ОбластьДействияРасширенияКонфигурации.РазделениеДанных Тогда
			Продолжить;
		КонецЕсли;
		
		ИзменяетСтруктуруДанных = РасширениеКонфигурации.ИзменяетСтруктуруДанных();
		Если ИзменяетСтруктуруДанных И Не РасширениеКонфигурации.Активно Тогда
			Продолжить;
		КонецЕсли;
		
		СписокВсехРасширенийОбласти.Добавить(РасширениеКонфигурации.Имя);
		
	КонецЦикла;
	
	АктивнныеРасширения = РасширенияКонфигурации.Получить(, ИсточникРасширенийКонфигурации.СеансАктивные);
	Для Каждого РасширениеКонфигурации Из АктивнныеРасширения Цикл

		Если РазделениеВключено Тогда
		
			Если РасширениеКонфигурации.ОбластьДействия <> ОбластьДействияРасширенияКонфигурации.РазделениеДанных  Тогда
				Продолжить
			КонецЕсли;
			
			ЗаписьПоставляемогоРасширения = ПоставляемыеРасширения.Найти(РасширениеКонфигурации.УникальныйИдентификатор,
				"ИспользуемоеРасширение");
		
		Иначе
			ЗаписьПоставляемогоРасширения = КаркасныеВерсииРасширений.Получить(
				РасширениеКонфигурации.УникальныйИдентификатор);
		КонецЕсли;
		
		ИзменяетСтруктуруДанных = РасширениеКонфигурации.ИзменяетСтруктуруДанных();
		
		Если (ИзменяетСтруктуруДанных И Не РасширениеКонфигурации.Активно)
			Или СписокВсехРасширенийОбласти.Найти(РасширениеКонфигурации.Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныхПоставляемогоРасширенияДостаточноДляРезервногоКопирования(ЗаписьПоставляемогоРасширения) Тогда

			ИмяРасширения = ?(ЗначениеЗаполнено(ЗаписьПоставляемогоРасширения.Наименование),
				ЗаписьПоставляемогоРасширения.Наименование,
				РасширениеКонфигурации.Синоним);
			
			ЗаписьПоставляемыхРасширений.ЗаписатьНачалоЭлемента("Extension");
			ЗаписьПоставляемыхРасширений.ЗаписатьАтрибут("ModifiesDataStructure", Формат(ИзменяетСтруктуруДанных,
				"БЛ=false; БИ=true"));
			ЗаписьПоставляемыхРасширений.ЗаписатьАтрибут("Name", ИмяРасширения);
			ЗаписьПоставляемыхРасширений.ЗаписатьАтрибут("VersionUUID", Строка(
				ЗаписьПоставляемогоРасширения.ИдентификаторВерсии));
			
			Если ИзменяетСтруктуруДанных Тогда
				
				ДанныеКаркаса = ПолучитьКаркасДляВерсииРасширения(ЗаписьПоставляемогоРасширения.ИдентификаторВерсии);
				Если ДанныеКаркаса = Неопределено Тогда
					Если КаркасныеВерсииРасширений[РасширениеКонфигурации.УникальныйИдентификатор] <> Неопределено Тогда
						ДанныеКаркаса = РасширениеКонфигурации.ПолучитьДанные();
						ДобавитьИнформациюОКаркасах(ЗаписьПоставляемыхРасширений, ДанныеКаркаса);
					Иначе
						ЗаписьЖурналаРегистрации(НСтр("ru = 'Выгрузка данных. Не найдена каркасная версия расширения'", 
							ОбщегоНазначения.КодОсновногоЯзыка()), 
							УровеньЖурналаРегистрации.Предупреждение, , ,
							СтрШаблон(НСтр("ru = 'Имя расширения: %1, Идентификатор версии: %2'"), 
								ИмяРасширения,
								Строка(ЗаписьПоставляемогоРасширения.ИдентификаторВерсии)));
					КонецЕсли;
				Иначе
					ДобавитьИнформациюОКаркасах(ЗаписьПоставляемыхРасширений, ДанныеКаркаса);
				КонецЕсли;
				
			КонецЕсли;
			
			ЗаписьПоставляемыхРасширений.ЗаписатьКонецЭлемента();

		Иначе
		
			Если ИменаУстановленныхИсправлений.Найти(РасширениеКонфигурации.Имя) <> Неопределено 
				Или ИменаРасширенийВидовПриложений.Найти(РасширениеКонфигурации.Имя) <> Неопределено Тогда
				
				Продолжить;
			КонецЕсли;
			
			ИнформацияОПользовательскомРасширении = Новый Структура;
			ИнформацияОПользовательскомРасширении.Вставить("Active", РасширениеКонфигурации.Активно);
			ИнформацияОПользовательскомРасширении.Вставить("SafeMode", РасширениеКонфигурации.БезопасныйРежим);
			ИнформацияОПользовательскомРасширении.Вставить("UnsafeOperationWarnings",
				РасширениеКонфигурации.ЗащитаОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях);
			ИнформацияОПользовательскомРасширении.Вставить("Name", РасширениеКонфигурации.Имя);
			ИнформацияОПользовательскомРасширении.Вставить("UseDefaultRolesForAllUsers", 
				РасширениеКонфигурации.ИспользоватьОсновныеРолиДляВсехПользователей);
			ИнформацияОПользовательскомРасширении.Вставить("UsedInDistributedInfoBase", 
				РасширениеКонфигурации.ИспользуетсяВРаспределеннойИнформационнойБазе);
			ИнформацияОПользовательскомРасширении.Вставить("Synonym", РасширениеКонфигурации.Синоним);
			ИнформацияОПользовательскомРасширении.Вставить("ModifiesDataStructure", ИзменяетСтруктуруДанных);
			
			Если ВыгружатьДанныеРасширений Тогда
				ИмяФайлаДанныхПользовательскогоРасширения = СоздатьПроизвольныйФайл("cfe", "ExtensionData");
				
				ДанныеРасширения = РасширениеКонфигурации.ПолучитьДанные();
				Если ДанныеРасширения = Неопределено Тогда
					ВызватьИсключение СтрШаблон(НСтр("ru = 'Не удалось получить данные расширения: %1
						|Необходимо удалить данное расширение и повторить выгрузку.'"),
					РасширениеКонфигурации.Имя);
				Иначе
					ДанныеРасширения.Записать(ИмяФайлаДанныхПользовательскогоРасширения);
				КонецЕсли;
				
				ФайлЗаписан(ИмяФайлаДанныхПользовательскогоРасширения);			
				ИнформацияОПользовательскомРасширении.Вставить("FileName", ПолучитьОтносительноеИмяФайла(
					ИмяФайлаДанныхПользовательскогоРасширения));
			КонецЕсли;
			
			ИнформацияОПользовательскомРасширении.Вставить("UUID", XMLСтрока(РасширениеКонфигурации.УникальныйИдентификатор));
				
			ИнформацияОПользовательскихРасширениях.Добавить(ИнформацияОПользовательскомРасширении);

		КонецЕсли;
	КонецЦикла;

	ЗаписьПоставляемыхРасширений.ЗаписатьКонецЭлемента();
	ЗаписьПоставляемыхРасширений.Закрыть();
	ФайлЗаписан(ИмяФайлаПоставляемыхРасширений);

	ИмяФайлаПользовательскихРасширений = ДобавитьФайл(ВыгрузкаЗагрузкаДанныхСлужебный.CustomExtensions(), "json",
		"CustomData");
	ЗаписьПользовательскихРасширений = Новый ЗаписьJSON;
	ЗаписьПользовательскихРасширений.ОткрытьФайл(ИмяФайлаПользовательскихРасширений);
	ЗаписатьJSON(ЗаписьПользовательскихРасширений, ИнформацияОПользовательскихРасширениях);
	ЗаписьПользовательскихРасширений.Закрыть();
	ФайлЗаписан(ИмяФайлаПользовательскихРасширений);

КонецПроцедуры

Процедура ДобавитьИнформациюОКаркасах(ЗаписьПоставляемыхРасширений, ДанныеКаркаса)	
	ИмяФайлаДанныхКаркаса = СоздатьПроизвольныйФайл("cfe", "ExtensionData");
	ДанныеКаркаса.Записать(ИмяФайлаДанныхКаркаса);
	ЗаписьПоставляемыхРасширений.ЗаписатьАтрибут("FileName", ПолучитьОтносительноеИмяФайла(ИмяФайлаДанныхКаркаса));
	ЗаписьПоставляемыхРасширений.ЗаписатьАтрибут("IsFrame", Формат(Истина, "БЛ=false; БИ=true"));
КонецПроцедуры

Процедура ЗаписатьИнформациюОВидахПриложения()
	
	ВидыПриложения = Новый Структура;
	ВидыПриложения.Вставить("AppTypes", Новый Массив);
	
	Индекс = 0;
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		ИмяВидаПриложенияПользовательское = ВидыПриложенийСервер.ИмяТекущегоПользовательскогоВидаПриложения();
		Если Не ПустаяСтрока(ИмяВидаПриложенияПользовательское) Тогда
			ДанныеВидаПриложения = Новый Структура;
			ДанныеВидаПриложения.Вставить("Name", ИмяВидаПриложенияПользовательское);
			ДанныеВидаПриложения.Вставить("Presentation", ВидыПриложенийСервер.ПредставлениеТекущегоВидаПриложения());
			
			ВидыПриложения.AppTypes.Вставить(Индекс, ДанныеВидаПриложения);
			ВидыПриложения.Вставить("CustomAppTypeIndex", Индекс);
			
			Индекс = Индекс + 1;
		КонецЕсли;
	КонецЕсли;
	
	СвойстваВидаПриложения = ВидыПриложенийСервер.СвойстваВидаПриложенияПоИмени(
		ВидыПриложенийСервер.ИмяТекущегоВидаПриложения());
	
	ДанныеВидаПриложения = Новый Структура;
	ДанныеВидаПриложения.Вставить("Name", СвойстваВидаПриложения.Имя);
	ДанныеВидаПриложения.Вставить("Presentation", СвойстваВидаПриложения.Представление);
	
	ВидыПриложения.AppTypes.Вставить(Индекс, ДанныеВидаПриложения);
	ВидыПриложения.Вставить("AppTypeIndex", Индекс);
	
	ИмяФайла = ДобавитьФайл(ВыгрузкаЗагрузкаДанныхСлужебный.ApplicationTypes(), "json", "CustomData");
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ОткрытьФайл(ИмяФайла);
	ЗаписатьJSON(ЗаписьJSON, ВидыПриложения);
	ЗаписьJSON.Закрыть();
	
	ФайлЗаписан(ИмяФайла);
	
КонецПроцедуры

#КонецОбласти

Функция ПолучитьКаркасДляВерсииРасширения(ИдентификаторВерсии)
	
	СсылкаВерсияРасширения = Справочники.ВерсииПоставляемыхРасширений.ПолучитьСсылку(ИдентификаторВерсии);
	Если ОбщегоНазначения.СсылкаСуществует(СсылкаВерсияРасширения) Тогда
		
		Возврат СсылкаВерсияРасширения.ХранилищеКаркасаРасширения.Получить();
				
	КонецЕсли;
	
	Возврат Неопределено;
		
КонецФункции

Функция ДанныхПоставляемогоРасширенияДостаточноДляРезервногоКопирования(ЗаписьПоставляемогоРасширения)

	Результат = Ложь;
	ПустойИдентификатор = ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор();
	Если ЗначениеЗаполнено(ЗаписьПоставляемогоРасширения)
		И ЗаписьПоставляемогоРасширения.ИдентификаторВерсии <> ПустойИдентификатор Тогда
	
		Результат = Истина;
	
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ИменаУстановленныхИсправлений()

	Результат = Новый Массив;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОбновлениеКонфигурации") Тогда 
		
		МодульОбновлениеКонфигурации = ОбщегоНазначения.ОбщийМодуль("ОбновлениеКонфигурации");		
		УстановленныеИсправления = МодульОбновлениеКонфигурации.УстановленныеИсправления();
		
		Для Каждого Исправление Из УстановленныеИсправления Цикл
			Результат.Добавить(Исправление.Наименование);	
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ИменаРасширенийВидовПриложений()
	
	Результат = Новый Массив;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.ВидыПриложений") Тогда 
		МодульВидыПриложений = ОбщегоНазначения.ОбщийМодуль("ВидыПриложенийСервер");
		МодульВидыПриложений.ИменаРасширенийВидовПриложений(Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьОписанияПроизвольныхФайлов(Знач ТипДанных = Неопределено)
	
	ПроверкаИнициализацииКонтейнера();
	
	Возврат ПолучитьФайлыИзСостава(ВыгрузкаЗагрузкаДанныхСлужебный.CustomData(), ТипДанных);
	
КонецФункции

Процедура ДописатьФайлыВТаблицуЗначений(ТаблицаСФайлами, Знач ФайлыИзСостава)
	
	Если ТаблицаСФайлами = Неопределено Тогда 
		ТаблицаСФайлами = ФайлыИзСостава;
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ФайлыИзСостава, ТаблицаСФайлами);
	
КонецПроцедуры

Процедура РаспаковатьФайлПоИмени(Знач Имя, Знач Путь = "")
	
	ВыгрузкаЗагрузкаДанныхСлужебный.РаспаковатьФайлАрхива(
		Архив,
		ВременныйКаталог,
		Имя,
		Путь);
	
КонецПроцедуры

Процедура ОтправитьЧастьФайлаS3(Результат, ИмяФайла)
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(Результат.Адрес);
	Если СтруктураURI.Схема = "https" Тогда
		ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение( , Новый СертификатыУдостоверяющихЦентровОС);
	КонецЕсли;
	Соединение = Новый HTTPСоединение(СтруктураURI.Хост, СтруктураURI.Порт, , , ПолучениеФайловИзИнтернета.ПолучитьПрокси(СтруктураURI.Схема), 600, ЗащищенноеСоединение);
	Запрос = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере, Результат.Заголовки);
	Запрос.УстановитьИмяФайлаТела(ИмяФайла);
	Ответ = Соединение.ВызватьHTTPМетод("PUT", Запрос);
	Если Ответ.КодСостояния <> 200 Тогда
		ПрограммныйИнтерфейсСервиса.ОтменитьСоставнуюЗагрузку(СоставнаяЗагрузка.ИдентификаторФайла);
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Не удалось отправить часть файла, код ответа: %1%2%3'"), 
			Ответ.КодСостояния, Символы.ПС, Ответ.ПолучитьТелоКакСтроку());
	КонецЕсли;
	СоставнаяЗагрузка.Части.Добавить(ОбщегоНазначенияБТС.ЗаголовокHTTP(Ответ, "ETag"));
			
КонецПроцедуры

Процедура ОтправитьЧастьФайлаDT(Результат, ИмяФайла, ПоследняяЧасть)
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыДоступа = Новый Структура;
	ПараметрыДоступа.Вставить("URL", РаботаВМоделиСервиса.ВнутреннийАдресМенеджераСервиса());
	ПараметрыДоступа.Вставить("UserName", РаботаВМоделиСервиса.ИмяСлужебногоПользователяМенеджераСервиса());
	ПараметрыДоступа.Вставить("Password", РаботаВМоделиСервиса.ПарольСлужебногоПользователяМенеджераСервиса());
	УстановитьПривилегированныйРежим(Ложь);
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Location", Результат.Адрес);
	ПараметрыОтправки.Вставить("SetCookie", ОбщегоНазначенияБТС.ЗаголовокHTTP(Результат, "SetCookie"));
	
	Результат = ПередачаДанныхСервер.ОтправитьЧастьФайлаВЛогическоеХранилище(ПараметрыДоступа, ПараметрыОтправки, ИмяФайла, ПоследняяЧасть, СоставнаяЗагрузка.Отправлено);
	Если Результат = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось отправить часть файла'");		
	КонецЕсли;
	
	Если Не ПоследняяЧасть Тогда
		СоставнаяЗагрузка.Отправлено = Результат;
	КонецЕсли;		
	
КонецПроцедуры

// Ищет строку с конца, т.к. это быстрее, когда строк > 100к
Функция НайтиСтрокуСостава(Значение, Колонка)
	
	Для ОбратныйИндекс = 1 - Состав.Количество() По Мин(4 - Состав.Количество(), 0) Цикл
		Если Состав[-ОбратныйИндекс][Колонка] = Значение Тогда
			Возврат Состав[-ОбратныйИндекс];
		КонецЕсли;
	КонецЦикла;
	
	Возврат Состав.Найти(Значение, Колонка);
	
КонецФункции

Процедура ДобавитьПредупреждение(Предупреждение) Экспорт
	
	Предупреждения.Добавить(Предупреждение);
	
КонецПроцедуры

Процедура ДобавитьДублиПредопределенных(ОбъектМетаданных, Дубли) Экспорт
	
	ДублиПредопределенных.Вставить(ОбъектМетаданных.ПолноеИмя(), Дубли);
	
КонецПроцедуры

Процедура ЗаписатьДублиПредопределенных()
	
	Если ДублиПредопределенных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайла = ДобавитьФайл(ВыгрузкаЗагрузкаДанныхСлужебный.PredefinedDataDuplicates(), "json", "CustomData");
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ОткрытьФайл(ИмяФайла);
	ЗаписатьJSON(ЗаписьJSON, ДублиПредопределенных);
	ЗаписьJSON.Закрыть();
	
	ФайлЗаписан(ИмяФайла);
	
КонецПроцедуры

Процедура ИнициализироватьПеременныеЗагрузки(ДанныеФайла)
	
	Архив = ВыгрузкаЗагрузкаДанныхСлужебный.ПрочитатьАрхив(ДанныеФайла);
	Предупреждения = Новый Массив();

КонецПроцедуры

Процедура ИнициализироватьПеременныеВыгрузки()
	
	Состав = ВыгрузкаЗагрузкаДанныхСлужебный.НовыйСостав();
	Состав.Колонки.Добавить("ПолноеИмя", Новый ОписаниеТипов("Строка"));
	
	Предупреждения = Новый Массив();
	ДублиПредопределенных = Новый Соответствие();
	
КонецПроцедуры

Процедура ИнициализироватьДополнительныеСвойстваВыгрузки()
	
	ДополнительныеСвойства.Вставить(
		"ОбщиеДанныеТребующиеСопоставленияСсылок",
		ВыгрузкаЗагрузкаДанныхСлужебныйСобытия.ПолучитьТипыОбщихДанныхПоддерживающиеСопоставлениеСсылокПриЗагрузке());
	
	ДополнительныеСвойства.Вставить(
		"ЛокальныйКэшСоставовРазделителей",
		Новый Соответствие());
	
КонецПроцедуры

Функция ДатаВСтроку(Дата)
	
	Возврат Формат(Дата, "ДФ=yyyyMMddHHmmss;");
	
КонецФункции

#Область СостояниеВыгрузкиЗагрузки

Процедура ОбновитьСостояние(ДатаОбновления)
	
	ДополнитьОбъектамиОбработаннымиПослеРасчетаСостояния();
	
	ВсегоОбъектов = ЗаписьСостояния.ВсегоОбъектов;
	ОбработаноОбъектов = ЗаписьСостояния.ОбработаноОбъектов;
	
	Если ВсегоОбъектов = 0 Или ОбработаноОбъектов <= ОбъектовНаПроцентВыполнения  Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьСостояния.ПроцентЗавершения = Мин(Цел(ОбработаноОбъектов / ВсегоОбъектов * 100), 100); 	
	
	Если ОбработаноОбъектов >= ВсегоОбъектов Или ОбработаноОбъектовЗаТекущийСеанс <= ОбъектовНаПроцентВыполнения Тогда
		Возврат;
	КонецЕсли;
	
	СекундСНачалаОбработкиОбъектов = ДатаОбновления - ЗаписьСостояния.ДатаНачалаОбработкиОбъектов;
	ОсталосьОбработатьОбъектов = ВсегоОбъектов - ОбработаноОбъектовЗаТекущийСеанс;
	ОсталосьВремениОбработкиОбъектов = Цел(
		СекундСНачалаОбработкиОбъектов * ОсталосьОбработатьОбъектов / ОбработаноОбъектовЗаТекущийСеанс);
	ЗаписьСостояния.РасчетнаяДатаЗавершения = ДатаОбновления + Макс(ОсталосьВремениОбработкиОбъектов, 5);
			
КонецПроцедуры

Процедура ЗаписатьСостояние(ДатаОбновления)
	
	ЗаписьСостояния.ДатаОбновления = ДатаОбновления;
	ЗаписьСостояния.Записать();

КонецПроцедуры

Процедура ЗаписатьСостояниеЗавершения()
	ДатаЗавершения = ТекущаяУниверсальнаяДата();
	ЗаписьСостояния.ФактическаяДатаЗавершения = ДатаЗавершения;
	ЗаписатьСостояние(ДатаЗавершения);	
КонецПроцедуры

Процедура РассчитатьОбъектовНаПроцентВыполнения()
	ОбъектовНаПроцентВыполнения = Цел(ЗаписьСостояния.ВсегоОбъектов / 100);		
КонецПроцедуры

Процедура ДополнитьОбъектамиОбработаннымиПослеРасчетаСостояния()
	ЗаписьСостояния.ОбработаноОбъектов = ЗаписьСостояния.ОбработаноОбъектов + ОбработаноОбъектовПослеРасчетаСостояния;
	ОбработаноОбъектовЗаТекущийСеанс = ОбработаноОбъектовЗаТекущийСеанс + ОбработаноОбъектовПослеРасчетаСостояния;
	ОбработаноОбъектовПослеРасчетаСостояния = 0;
КонецПроцедуры

Процедура ЗаполнитьКоличествоОбрабатываемыхОбъектов()
	
	Если Не ВыгрузкаЗагрузкаДанных.НеобходимоПодсчитыватьКоличествоОбъектов(Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДляЗагрузки Тогда
		
		КоличествоОбрабатываемыхОбъектов = ВыгрузкаЗагрузкаДанныхСлужебный.КоличествоЗагружаемыхОбъектовПоОбъектамМетаданных(
			Состав,
			Параметры.ЗагружаемыеТипы,
			ДляТехническойПоддержки);
		
	Иначе
		
		КоличествоОбрабатываемыхОбъектов = ВыгрузкаЗагрузкаДанныхСлужебный.КоличествоВыгружаемыхОбъектовПоОбъектамМетаданных(
			Параметры.ВыгружаемыеТипы,
			Параметры.ВыгружаемыеТипыОбщихДанных,
			ДляТехническойПоддержки);
		
	КонецЕсли;
	
	КоличествоОбрабатываемыхОбъектов.Индексы.Добавить("ПолноеИмя");

КонецПроцедуры

Процедура ИнициализироватьСостояние()
	
	ФиксироватьСостояние = ВыгрузкаЗагрузкаДанных.НеобходимоФиксироватьСостояниеВыгрузкиЗагрузкиОбластиДанных(
		Параметры); 

	Если Не ФиксироватьСостояние Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализироватьПеременныеСостояния();
	
	ВсегоОбъектов = Неопределено;
	
	Если Не Параметры.Свойство("ВсегоОбъектов", ВсегоОбъектов) Тогда
		ВсегоОбъектов = КоличествоОбрабатываемыхОбъектов.Итог("ЧислоОбъектов");
	КонецЕсли;
		
	ЗаписьСостояния = РегистрыСведений.СостоянияВыгрузкиЗагрузкиОбластейДанных.СоздатьМенеджерЗаписи();
	ЗаписьСостояния.Идентификатор = Параметры.ИдентификаторСостояния;
	ЗаписьСостояния.ЗагрузкаОбластиДанных = ДляЗагрузки;
	ЗаписьСостояния.ДатаНачала = ТекущаяУниверсальнаяДата();
	ЗаписьСостояния.ВсегоОбъектов = ВсегоОбъектов;
	
	РассчитатьОбъектовНаПроцентВыполнения();
	
КонецПроцедуры

Процедура ИнициализироватьПеременныеСостояния()
	
	МинимальнаяДатаСледующейЗаписиСостояния = Дата(1, 1, 1);
	ОбработаноОбъектовПослеРасчетаСостояния = 0;
	ОбработаноОбъектовЗаТекущийСеанс = 0;
	ПолноеИмяОбрабатываемогоОбъектаМетаданных = "";
	ОбработаноОбъектовПоМетаданным = Новый Соответствие();
	
КонецПроцедуры

// Зафиксировать начало обработки объекта метаданных в родительском потоке.
// 
// Параметры:
//  ОбъектМетаданных - Строка - Полное имя объекта метаданных
//  ДатаНачалаОбработки - Дата - Дата начала обработки
Процедура ЗафиксироватьНачалоОбработкиОбъектаМетаданныхВРодительскомПотоке(ОбъектМетаданных, ДатаНачалаОбработки)
	
	КоличествоОбработанныхОбъектовПоМетаданному(ОбъектМетаданных);
	
	Если Не ЗначениеЗаполнено(ЗаписьСостояния.ДатаНачалаОбработкиОбъектов) Тогда
		ЗаписьСостояния.ДатаНачалаОбработкиОбъектов = ДатаНачалаОбработки;
	КонецЕсли;
	
	ЗаписьСостояния.ИмяОбрабатываемогоОбъектаМетаданных = ПолучитьИмяОбрабатываемогоОбъектаМетаданных(ОбъектМетаданных);
	
	ЗаписатьСостояние(ДатаНачалаОбработки);
	
КонецПроцедуры

// Зафиксировать окончание обработки объекта метаданных в родительском потоке.
// 
// Параметры:
//  ОбъектМетаданных - Строка - Полное имя объекта метаданных
//  ДатаОкончанияОбработки - Дата - Дата окончания обработки
Процедура ЗафиксироватьОкончаниеОбработкиОбъектаМетаданныхВРодительскомПотоке(ОбъектМетаданных, ДатаОкончанияОбработки)
	
	ДополнитьОбъектамиОбработаннымиПослеРасчетаСостояния();
	
	ОбработаноОбъектовДоТекущегоОбъектаМетаданных = ЗаписьСостояния.ОбработаноОбъектовДоТекущегоОбъектаМетаданных
		+ КоличествоОбработанныхОбъектовПоМетаданному(ОбъектМетаданных);
	ОбработаноОбъектовПоМетаданным.Удалить(ОбъектМетаданных);
	
	ЗаписьСостояния.ОбработаноОбъектовДоТекущегоОбъектаМетаданных = ОбработаноОбъектовДоТекущегоОбъектаМетаданных;
	ЗаписьСостояния.ИмяОбрабатываемогоОбъектаМетаданных = ПолучитьИмяОбрабатываемогоОбъектаМетаданных("");
	
	ЗаписатьСостояние(ДатаОкончанияОбработки);
	
КонецПроцедуры

// Зафиксировать обработку объектов в родительском потоке.
// 
// Параметры:
//  ОбъектМетаданных - Строка - Полное имя объекта метаданных
//  ДатаОбработки - Дата - Дата обработки объектов
//  Количество - Число - Обработано объектов
Процедура ЗафиксироватьОбработкуОбъектовВРодительскомПотоке(ОбъектМетаданных, ДатаОбработки, Количество)
	
	ЗафиксироватьОбработкуОбъектов(ОбъектМетаданных, Количество);
	
	Если ОбработаноОбъектовПослеРасчетаСостояния <= ОбъектовНаПроцентВыполнения Тогда
		Возврат;
	КонецЕсли;
		
	ОбновитьСостояние(ДатаОбработки);
					
	Если ДатаОбработки < МинимальнаяДатаСледующейЗаписиСостояния Тогда
		Возврат;
	КонецЕсли;
				
	ЗаписатьСостояние(ДатаОбработки);
	
	МинимальнаяДатаСледующейЗаписиСостояния = ДатаОбработки + 5;
	
КонецПроцедуры

// Зафиксировать обработку объектов.
// 
// Параметры:
//  ОбъектМетаданных - Строка - Полное имя объекта метаданных
//  Количество - Число - Обработано объектов
Процедура ЗафиксироватьОбработкуОбъектов(ОбъектМетаданных, Количество)
	
	ОбработаноОбъектовПослеРасчетаСостояния = ОбработаноОбъектовПослеРасчетаСостояния + Количество;
	ОбработаноОбъектов = КоличествоОбработанныхОбъектовПоМетаданному(ОбъектМетаданных) + Количество;
	
	ОбработаноОбъектовПоМетаданным.Вставить(ОбъектМетаданных, ОбработаноОбъектов);
	
КонецПроцедуры

// Получить имя обрабатываемого объекта метаданных.
// 
// Параметры:
//  ОбъектМетаданных - Строка - Полное имя объекта метаданных
// 
// Возвращаемое значение:
//  Строка - Имя обрабатываемого объекта метаданных
Функция ПолучитьИмяОбрабатываемогоОбъектаМетаданных(ОбъектМетаданных)
	
	Если ОбработаноОбъектовПоМетаданным.Количество() <= 1 Тогда
		Возврат ОбъектМетаданных;
	КонецЕсли;
	
	МаксимальнаяДлинаИмени = 255;
	РазделительИмен = ", ";
	ОбрабатываемыеОбъекты = Новый Массив();
	
	Для Каждого ЭлементОбработки Из ОбработаноОбъектовПоМетаданным Цикл
		ОбрабатываемыеОбъекты.Добавить(ЭлементОбработки.Ключ);
	КонецЦикла;
	
	ИмяОбрабатываемогоОбъектаМетаданных = СтрСоединить(ОбрабатываемыеОбъекты, РазделительИмен);
	
	Если СтрДлина(ИмяОбрабатываемогоОбъектаМетаданных) > МаксимальнаяДлинаИмени Тогда
		
		ИмяОбрабатываемогоОбъектаМетаданных = "";
		ОкончаниеИмени = НСтр("ru = 'и другие'");
		ДлинаОкончанияИмени = СтрДлина(ОкончаниеИмени) + 1;
		ДлинаРазделителяИмени = СтрДлина(РазделительИмен);
		
		Для Каждого ИмяОбъектаМетаданных Из ОбрабатываемыеОбъекты Цикл
			
			БудущаяДлинаИмени = СтрДлина(ИмяОбрабатываемогоОбъектаМетаданных)
				+ ДлинаРазделителяИмени
				+ СтрДлина(ИмяОбъектаМетаданных)
				+ ДлинаОкончанияИмени;
			
			Если БудущаяДлинаИмени > МаксимальнаяДлинаИмени Тогда
				ИмяОбрабатываемогоОбъектаМетаданных = ИмяОбрабатываемогоОбъектаМетаданных + " " + ОкончаниеИмени;
				Прервать;
			КонецЕсли;
			
			ИмяОбрабатываемогоОбъектаМетаданных = ИмяОбрабатываемогоОбъектаМетаданных
				+ РазделительИмен
				+ ИмяОбъектаМетаданных;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ИмяОбрабатываемогоОбъектаМетаданных;
	
КонецФункции

// Количество обработанных объектов по метаданному.
// 
// Параметры:
//  ОбъектМетаданных - Строка - Полное имя объекта метаданных
// 
// Возвращаемое значение:
//  Число
Функция КоличествоОбработанныхОбъектовПоМетаданному(ОбъектМетаданных)
	
	ОбработаноОбъектов = ОбработаноОбъектовПоМетаданным.Получить(ОбъектМетаданных);
	
	Если ОбработаноОбъектов = Неопределено Тогда
		ОбработаноОбъектов = 0;
		ОбработаноОбъектовПоМетаданным.Вставить(ОбъектМетаданных, 0);
	КонецЕсли;
	
	Возврат ОбработаноОбъектов;
	
КонецФункции

#КонецОбласти

#Область ПараллельнаяВыгрузкаЗагрузка

Процедура ИнициализироватьПеременныеВПотоке(ПараметрыКонтейнера)
	
	ПроверкаИнициализацииКонтейнера(Истина);
	
	ЭтоДочернийПоток = Истина;
	ДляВыгрузки = ПараметрыКонтейнера.ДляВыгрузки;
	ДляЗагрузки = ПараметрыКонтейнера.ДляЗагрузки;
	ВременныйКаталог = ПараметрыКонтейнера.ВременныйКаталог;
	ДляТехническойПоддержки = ПараметрыКонтейнера.ДляТехническойПоддержки;
	ФиксироватьСостояние = ПараметрыКонтейнера.ФиксироватьСостояние;
	КоличествоОбрабатываемыхОбъектов = ПараметрыКонтейнера.КоличествоОбрабатываемыхОбъектов;
	ИдентификаторПроцесса = ПараметрыКонтейнера.ИдентификаторПроцесса;
	Параметры = ПараметрыКонтейнера.Параметры;
	
	Если ДляЗагрузки Тогда
		Состав = ПараметрыКонтейнера.Состав;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Инициализация

// Инициализация состояния контейнера по умолчанию

ДополнительныеСвойства = Новый Структура();

КоличествоФайловПоВиду = Новый Структура();
ИспользуемыеФайлы = Новый Массив;

ДляВыгрузки = Ложь;
ДляЗагрузки = Ложь;
ЭтоДочернийПоток = Ложь;
НомерСообщенияВПотоке = 0;

КаркасныеВерсииРасширений = Новый Соответствие();

#КонецОбласти

#КонецЕсли