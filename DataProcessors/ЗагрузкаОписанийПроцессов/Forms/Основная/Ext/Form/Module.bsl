
#Область ОбработчикиСобытийФормы 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	ИнициализироватьДанныеФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбработатьИзменениеФайлаЗагрузки();
	УстановитьНавигаторПомощника(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы 

&НаКлиенте
Процедура ДекорацияНавигаторПомощникаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОчиститьСообщения();
	
	СтандартнаяОбработка = Ложь;
	
	Отказ = Ложь;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПерейтиНаНачальнуюСтраницу" Тогда
		
		ПерейтиНаСтраницуПомощника("СтраницаСтартовая");
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПерейтиНаСтраницуНастройка" Тогда 
		
		ПерейтиНаСтраницуПомощника("СтраницаНастройкиЗагрузки");
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПерейтиНаСтраницуГлоссарий" Тогда 
		
		ПерейтиНаСтраницуПомощника("СтраницаНастройкиЗагрузкиГлоссарий");
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПерейтиНаСтраницуСравнениеИОбъединение" Тогда 
		
		ПерейтиНаСтраницуПомощника("СтраницаСравнениеОбъединение");
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПерейтиНаСтраницуРезультаты" Тогда
		
		ПерейтиНаСтраницуПомощника("СтраницаЗагружено"); 
		
	КонецЕсли;
	
	УстановитьНавигаторПомощника(ЭтотОбъект);
	
КонецПроцедуры

#Область СтраницаСтартовая

&НаКлиенте
Процедура ФайлЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущийФайл", ФайлЗагрузки);
	ОповещениеПослеОбработкиВыбора = Новый ОписаниеОповещения("ПослеОбработкиВыбораИзмененияФайлаЗагрузки", ЭтотОбъект, ДополнительныеПараметры);
	
	ДемонстрационныеСценарииКлиент.ОбработкаНачалоВыбораФайла(ЭтотОбъект, 
	                                                          РежимДиалогаВыбораФайла.Открытие, 
	                                                          "ФайлЗагрузки",
	                                                          Ложь,
	                                                          ОповещениеПослеОбработкиВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособЗагрузкиКакЕстьПриИзменении(Элемент)
	
	УстановитьНавигаторПомощника(ЭтотОбъект);
	
КонецПроцедуры 

&НаКлиенте
Процедура СпособЗагрузкиСравнениеОбъединениеПриИзменении(Элемент)
	
	УстановитьНавигаторПомощника(ЭтотОбъект);
	
КонецПроцедуры 

&НаКлиенте
Процедура ФайлЗагрузкиПриИзменении(Элемент)
	
	 ОбработатьИзменениеФайлаЗагрузки();
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаНастройкиЗагрузки

&НаКлиенте
Процедура ИзмененияОтборНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИсключаемыеЗначения = Новый СписокЗначений;
	
	Если ВариантПостановкиНаПоддержку = 0 Тогда
		
		ИсключаемыеЗначения.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыСравненияФайловОписанийПроцессов.ЕстьИзменения"));
		
	Иначе
		
		ИсключаемыеЗначения.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыСравненияФайловОписанийПроцессов.ИзмененИПоставщикомИВБазе"));
		ИсключаемыеЗначения.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыСравненияФайловОписанийПроцессов.ИзмененТолькоВБазе"));
		ИсключаемыеЗначения.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыСравненияФайловОписанийПроцессов.ИзмененТолькоПоставщиком"));
		
	КонецЕсли;
	
	МножественныйОтборСпискаНачалоВыбора(ЭтотОбъект,
	                                     Элемент,
	                                     ИзмененияОтбор,
	                                     Тип("ПеречислениеСсылка.СтатусыСравненияФайловОписанийПроцессов"),
	                                     НСтр("ru = 'Выбранные изменения'"),
	                                     ИсключаемыеЗначения);
	
КонецПроцедуры 

&НаКлиенте
Процедура ДействиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИсключаемыеЗначения = Новый СписокЗначений;
	Если ЭтоЧастичнаяВыгрузка Тогда
		ИсключаемыеЗначения.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыДействийПриЗагрузкеОписанийПроцессов.Удалить"));
		ИсключаемыеЗначения.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыДействийПриЗагрузкеОписанийПроцессов.НеУдалять"));
	КонецЕсли;
	
	МножественныйОтборСпискаНачалоВыбора(ЭтотОбъект,
	                                     Элемент,
	                                     ДействиеОтбор,
	                                     Тип("ПеречислениеСсылка.ВариантыДействийПриЗагрузкеОписанийПроцессов"),
	                                     НСтр("ru = 'Выбранные действия'"),
	                                     ИсключаемыеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзмененияОтборПриИзменении(Элемент)
	
	УстановитьОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеОтборПриИзменении(Элемент)
	
	УстановитьОтборы();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыНастройкиЗагрузкиОписанияПроцессов

&НаКлиенте
Процедура НастройкиЗагрузкиОписанияПроцессовПриАктивизацииСтроки(Элемент)
	
	СформироватьСписокВыбораЧтоДелать(Элементы.НастройкиЗагрузкиОписанияПроцессовЧтоДелать, "НастройкиЗагрузкиОписанияПроцессов");
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЗагрузкиОписанияПроцессовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "НастройкиЗагрузкиОписанияПроцессовЧтоДелать" Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если Поле.Имя = "НастройкиЗагрузкиОписанияПроцессовПредставление" Тогда
		
		ПриДвойномКликеНаПредставленииСценария(ТекущиеДанные, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура НастройкиЗагрузкиОписанияПроцессовПриАктивизацииПоля(Элемент)
	
	ПриАктивизацииПоляНастройкиЗагрузки(Элемент, "НастройкиЗагрузкиОписанияПроцессов", "НастройкиЗагрузкиОписанияПроцессов");
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЗагрузкиОписанияПроцессовПриИзменении(Элемент)
	
	ПриИзмененииКоллекцииНастройкаЗагрузки();
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыНастройкиЗагрузкиГлоссарий

&НаКлиенте
Процедура НастройкиЗагрузкиГлоссарийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "НастройкиЗагрузкиГлоссарийЧтоДелать" Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если Поле.Имя = "НастройкиЗагрузкиГлоссарийПредставление" Тогда
		
		ПриДвойномКликеНаПредставленииГлоссария(ТекущиеДанные, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура НастройкиЗагрузкиГлоссарийПриАктивизацииСтроки(Элемент)
	
	СформироватьСписокВыбораЧтоДелать(Элементы.НастройкиЗагрузкиГлоссарийЧтоДелать, "НастройкиЗагрузкиГлоссарий");
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЗагрузкиГлоссарийПриАктивизацииПоля(Элемент)
	
	ПриАктивизацииПоляНастройкиЗагрузки(Элемент, "НастройкиЗагрузкиГлоссарий", "НастройкиЗагрузкиГлоссарий");
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЗагрузкиГлоссарийПриИзменении(Элемент)
	
	ПриИзмененииКоллекцииНастройкаЗагрузки();
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыНастройкиЗагрузкиГлоссарийОтбор

&НаКлиенте
Процедура НастройкиЗагрузкиГлоссарийОтборПриАктивизацииПоля(Элемент)
	
	ПриАктивизацииПоляНастройкиЗагрузки(Элемент, "НастройкиЗагрузкиГлоссарийОтбор", "НастройкиЗагрузкиГлоссарийОтбор");
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЗагрузкиГлоссарийОтборПриАктивизацииСтроки(Элемент)
	
	СформироватьСписокВыбораЧтоДелать(Элементы.НастройкиЗагрузкиГлоссарийОтборЧтоДелать, "НастройкиЗагрузкиГлоссарийОтбор");
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЗагрузкиГлоссарийОтборВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "НастройкиЗагрузкиГлоссарийОтборЧтоДелать" Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если Поле.Имя = "НастройкиЗагрузкиГлоссарийОтборПредставление" Тогда
		
		ПриДвойномКликеНаПредставленииГлоссария(ТекущиеДанные, СтандартнаяОбработка);
		
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЗагрузкиГлоссарийОтборПриИзменении(Элемент)
	
	ПриИзмененииКоллекцииНастройкаЗагрузки();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЗагрузкиГлоссарийОтборЧтоДелатьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НастройкиЗагрузкиГлоссарийОтбор.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьДанныеНастройкиЗагрузкиГлоссарийПослеИзмененияОтбор(ТекущиеДанные);
	
	ЗаполнитьТаблицуОтбора();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНастройкиЗагрузкиОписанияПроцессовОтбор

&НаКлиенте
Процедура НастройкиЗагрузкиОписанияПроцессовОтборВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "НастройкиЗагрузкиОписанияПроцессовОтборЧтоДелать" Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если Поле.Имя = "НастройкиЗагрузкиОписанияПроцессовОтборПредставление" Тогда
		
		ПриДвойномКликеНаПредставленииСценария(ТекущиеДанные, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЗагрузкиОписанияПроцессовОтборПриАктивизацииПоля(Элемент)
	
	ПриАктивизацииПоляНастройкиЗагрузки(Элемент, "НастройкиЗагрузкиОписанияПроцессовОтбор", "НастройкиЗагрузкиОписанияПроцессовОтбор");
	
КонецПроцедуры 

&НаКлиенте
Процедура НастройкиЗагрузкиОписанияПроцессовОтборПриАктивизацииСтроки(Элемент)
	
	СформироватьСписокВыбораЧтоДелать(Элементы.НастройкиЗагрузкиОписанияПроцессовОтборЧтоДелать, "НастройкиЗагрузкиОписанияПроцессовОтбор");
	
КонецПроцедуры 

&НаКлиенте
Процедура НастройкиЗагрузкиОписанияПроцессовОтборЧтоДелатьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НастройкиЗагрузкиОписанияПроцессовОтбор.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьДанныеНастройкиЗагрузкиОписанияПроцессовПослеИзмененияОтбор(ТекущиеДанные);
	
	УстановитьОтборы();
	
КонецПроцедуры 

&НаКлиенте
Процедура НастройкиЗагрузкиОписанияПроцессовОтборПриИзменении(Элемент)
	
	ПриИзмененииКоллекцииНастройкаЗагрузки();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСравнениеОбъединение

&НаКлиенте
Процедура СравнениеОбъединениеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если Поле.Имя = "СравнениеОбъединениеПредставление" Тогда
		
		ПриДвойномКликеНаПредставленииСценария(ТекущиеДанные, СтандартнаяОбработка);
		
	ИначеЕсли Поле.Имя =  "СравнениеОбъединениеКаталогФайловВыгрузки" Тогда
		
		Если Не ДемонстрационныеСценарииКлиентСервер.КаталогНаДискеСуществует(ТекущиеДанные.КаталогФайловВыгрузки) Тогда
			Возврат;
		КонецЕсли;
		
		ФайловаяСистемаКлиент.ОткрытьПроводник(ТекущиеДанные.КаталогФайловВыгрузки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СравнениеОбъединениеИмяФайлаКЗагрузкеНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СравнениеОбъединение.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРеквизита = Новый Структура;
	ДанныеРеквизита.Вставить("ИмяТабличнойЧасти",   "СравнениеОбъединение");
	ДанныеРеквизита.Вставить("ИдентификаторСтрока", ТекущиеДанные.ПолучитьИдентификатор());
	ДанныеРеквизита.Вставить("ИмяРеквизита",        "ФайлКЗагрузке");
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
	ОповещениеПослеОбработкиВыбора = Новый ОписаниеОповещения("ПослеОбработкиВыбораРезультирующегоФайла", ЭтотОбъект, ДополнительныеПараметры);
	
	ДемонстрационныеСценарииКлиент.ОбработкаНачалоВыбораФайла(ЭтотОбъект, 
	                                                          РежимДиалогаВыбораФайла.Открытие, 
	                                                          ДанныеРеквизита,
	                                                          Ложь,
	                                                          ОповещениеПослеОбработкиВыбора, 
	                                                          ТекущиеДанные.КаталогФайловВыгрузки);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы 

&НаКлиенте
Процедура Загружать(Команда)
	
	УстановитьВариантДействия(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура НеЗагружать(Команда)
	
	УстановитьВариантДействия(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьИОбъединить(Команда)
	
	УстановитьВариантДействия(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Удалять(Команда)
	
	УстановитьВариантДействия(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура НеУдалять(Команда)
	
	УстановитьВариантДействия(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПутиКОбъединеннымФайлам(Команда)
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(МаскаПутиОбъединенныхФайлов) Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указана маска поиска результирующих файлов'"),, "МаскаПутиОбъединенныхФайлов");
		
		Возврат;
		
	КонецЕсли;
	
	НайтиОбъединенныеФайлыПоМаске();
	
КонецПроцедуры 

&НаКлиенте
Процедура Далее(Команда)
	
	ВыполнитьПереходПоСтраницам(Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	ВыполнитьПереходПоСтраницам( Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияФормы

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ШрифтГиперссылка = ШрифтыСтиля.ШрифтГиперссылка;
	УсловноеОформление.Элементы.Очистить();
	
	ЗначенияЕстьИзменения = Новый СписокЗначений;
	ЗначенияЕстьИзменения.Добавить(Перечисления.СтатусыСравненияФайловОписанийПроцессов.ЕстьИзменения);
	ЗначенияЕстьИзменения.Добавить(Перечисления.СтатусыСравненияФайловОписанийПроцессов.ИзмененИПоставщикомИВБазе);
	ЗначенияЕстьИзменения.Добавить(Перечисления.СтатусыСравненияФайловОписанийПроцессов.ИзмененТолькоВБазе);
	ЗначенияЕстьИзменения.Добавить(Перечисления.СтатусыСравненияФайловОписанийПроцессов.ИзмененТолькоПоставщиком);
	
#Область НастройкиЗагрузкиОписанияПроцессовСтатусФайлов
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиОписанияПроцессовСтатусФайлов");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиОписанияПроцессов.СтатусФайлов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыСравненияФайловОписанийПроцессов.НетИзменений;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", ""); 
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиОписанияПроцессовСтатусФайлов");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиОписанияПроцессов.СтатусФайлов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = ЗначенияЕстьИзменения;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтГиперссылка); 
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиОписанияПроцессовСтатусФайлов");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиОписанияПроцессов.СтатусФайлов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыСравненияФайловОписанийПроцессов.ОтсутствуетВЗагрузке;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.СветлоКоралловый);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт",      ШрифтГиперссылка);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиОписанияПроцессовСтатусФайлов");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиОписанияПроцессов.СтатусФайлов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыСравненияФайловОписанийПроцессов.ОтсутствуетВБазе;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ЦветМорскойВолны);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт",      ШрифтГиперссылка);
	
#КонецОбласти
	
#Область НастройкиЗагрузкиОписанияПроцессовЧтоДелать
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиОписанияПроцессовЧтоДелать");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиОписанияПроцессов.ЧтоДелать");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВариантыДействийПриЗагрузкеОписанийПроцессов.НеЗагружать;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗакрытыйДокумент); 
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиОписанияПроцессовЧтоДелать");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиОписанияПроцессов.ЧтоДелать");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВариантыДействийПриЗагрузкеОписанийПроцессов.Загружать;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ЦветМорскойВолны);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиОписанияПроцессовЧтоДелать");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиОписанияПроцессов.ЧтоДелать");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВариантыДействийПриЗагрузкеОписанийПроцессов.Объединить;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиОписанияПроцессовЧтоДелать");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиОписанияПроцессов.ЧтоДелать");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВариантыДействийПриЗагрузкеОписанийПроцессов.Удалить;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.СветлоКоралловый); 
	
#КонецОбласти

#Область НастройкиЗагрузкиОписанияПроцессовОтборСтатусФайлов
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиОписанияПроцессовОтборСтатусФайлов");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиОписанияПроцессовОтбор.СтатусФайлов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыСравненияФайловОписанийПроцессов.НетИзменений;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", ""); 
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиОписанияПроцессовОтборСтатусФайлов");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиОписанияПроцессовОтбор.СтатусФайлов");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = ЗначенияЕстьИзменения;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт",      ШрифтГиперссылка); 
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиОписанияПроцессовОтборСтатусФайлов");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиОписанияПроцессовОтбор.СтатусФайлов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыСравненияФайловОписанийПроцессов.ОтсутствуетВЗагрузке;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.СветлоКоралловый);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт",      ШрифтГиперссылка);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиОписанияПроцессовОтборСтатусФайлов");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиОписанияПроцессовОтбор.СтатусФайлов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыСравненияФайловОписанийПроцессов.ОтсутствуетВБазе;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ЦветМорскойВолны);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт",      ШрифтГиперссылка);
	
#КонецОбласти

#Область НастройкиЗагрузкиОписанияПроцессовОтборЧтоДелать
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиОписанияПроцессовОтборЧтоДелать");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиОписанияПроцессовОтбор.ЧтоДелать");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВариантыДействийПриЗагрузкеОписанийПроцессов.НеЗагружать;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗакрытыйДокумент); 
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиОписанияПроцессовОтборЧтоДелать");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиОписанияПроцессовОтбор.ЧтоДелать");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВариантыДействийПриЗагрузкеОписанийПроцессов.Загружать;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ЦветМорскойВолны);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиОписанияПроцессовОтборЧтоДелать");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиОписанияПроцессовОтбор.ЧтоДелать");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВариантыДействийПриЗагрузкеОписанийПроцессов.Объединить;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиОписанияПроцессовОтборЧтоДелать");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиОписанияПроцессовОтбор.ЧтоДелать");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВариантыДействийПриЗагрузкеОписанийПроцессов.Удалить;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.СветлоКоралловый); 
	
#КонецОбласти

#Область НастройкиЗагрузкиГлоссарийСтатусФайлов
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиГлоссарийСтатусФайлов");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиГлоссарий.СтатусФайлов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыСравненияФайловОписанийПроцессов.НетИзменений;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", ""); 
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиГлоссарийСтатусФайлов");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиГлоссарий.СтатусФайлов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = ЗначенияЕстьИзменения;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт",      ШрифтГиперссылка); 
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиГлоссарийСтатусФайлов");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиГлоссарий.СтатусФайлов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыСравненияФайловОписанийПроцессов.ОтсутствуетВЗагрузке;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.СветлоКоралловый);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт",      ШрифтГиперссылка);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиГлоссарийСтатусФайлов");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиГлоссарий.СтатусФайлов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыСравненияФайловОписанийПроцессов.ОтсутствуетВБазе;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ЦветМорскойВолны);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт",      ШрифтГиперссылка);
	
#КонецОбласти

#Область НастройкиЗагрузкиГлоссарийОтборСтатусФайлов
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиГлоссарийОтборСтатусФайлов");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиГлоссарийОтбор.СтатусФайлов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыСравненияФайловОписанийПроцессов.НетИзменений;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", ""); 
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиГлоссарийОтборСтатусФайлов");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиГлоссарийОтбор.СтатусФайлов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = ЗначенияЕстьИзменения;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт",      ШрифтГиперссылка); 
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиГлоссарийОтборСтатусФайлов");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиГлоссарийОтбор.СтатусФайлов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыСравненияФайловОписанийПроцессов.ОтсутствуетВЗагрузке;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.СветлоКоралловый);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт",      ШрифтГиперссылка);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиГлоссарийОтборСтатусФайлов");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиГлоссарийОтбор.СтатусФайлов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыСравненияФайловОписанийПроцессов.ОтсутствуетВБазе;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ЦветМорскойВолны);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт",      ШрифтГиперссылка);
	
#КонецОбласти

#Область НастройкиЗагрузкиГлоссарийЧтоДелать
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиГлоссарийЧтоДелать");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиГлоссарий.ЧтоДелать");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВариантыДействийПриЗагрузкеОписанийПроцессов.НеЗагружать;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗакрытыйДокумент); 
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиГлоссарийЧтоДелать");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиГлоссарий.ЧтоДелать");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВариантыДействийПриЗагрузкеОписанийПроцессов.Загружать;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ЦветМорскойВолны);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиГлоссарийЧтоДелать");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиГлоссарий.ЧтоДелать");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВариантыДействийПриЗагрузкеОписанийПроцессов.Объединить;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиГлоссарийЧтоДелать");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиГлоссарий.ЧтоДелать");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВариантыДействийПриЗагрузкеОписанийПроцессов.Удалить;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.СветлоКоралловый); 
	
#КонецОбласти

#Область НастройкиЗагрузкиГлоссарийОтборЧтоДелать
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиГлоссарийОтборЧтоДелать");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиГлоссарийОтбор.ЧтоДелать");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВариантыДействийПриЗагрузкеОписанийПроцессов.НеЗагружать;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗакрытыйДокумент); 
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиГлоссарийОтборЧтоДелать");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиГлоссарийОтбор.ЧтоДелать");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВариантыДействийПриЗагрузкеОписанийПроцессов.Загружать;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ЦветМорскойВолны);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиГлоссарийОтборЧтоДелать");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиГлоссарийОтбор.ЧтоДелать");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВариантыДействийПриЗагрузкеОписанийПроцессов.Объединить;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиГлоссарийОтборЧтоДелать");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиЗагрузкиГлоссарийОтбор.ЧтоДелать");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВариантыДействийПриЗагрузкеОписанийПроцессов.Удалить;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.СветлоКоралловый); 
	
#КонецОбласти

КонецПроцедуры

&НаСервере
Процедура ИнициализироватьДанныеФормы()
	
	Элементы.СтраницыПомощника.ТекущаяСтраница                       = Элементы.СтраницаСтартовая; 
	Элементы.СтраницыПодвал.ТекущаяСтраница                          = Элементы.СтраницаКнопкиДалее;
	
	ПрочитатьИнформациюОНастройкахПоддержкиВТекущейБазе();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьИнформациюОНастройкахПоддержкиВТекущейБазе()
	
	РезультатЧтения = ДемонстрационныеСценарии.РезультатЧтенияКонстантыОписанияПроцессовНаПоддержке(); 
	
	ТекстНаходитсяНаПоддержке = "";
	
	Если НЕ ПустаяСтрока(РезультатЧтения.ДанныеКонфигурации) 
		И Не ПустаяСтрока(РезультатЧтения.Поставщик) Тогда
		
		ТекстНаходитсяНаПоддержке = ДемонстрационныеСценарииКлиентСервер.ТекстОписанияПоставки(РезультатЧтения.ДанныеКонфигурации, РезультатЧтения.Поставщик);
		
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстНаходитсяНаПоддержке) Тогда 
		
		ТекстПояснения = СтроковыеФункции.ФорматированнаяСтрока("<span style=""color: ПоясняющийТекст "">%1</span>",
		                                                              НСтр("ru = 'Информация о поддержке в текущей базе отсутствует. Она изменена не будет'"));
		
	Иначе
		
		ТекстПояснения = СтроковыеФункции.ФорматированнаяСтрока("<span style=""color: ПоясняющийТекст "">%1 : <b>%2</b></span>",
		                                                        НСтр("ru = 'Описания процессов останутся на поддержке'"),
		                                                        ТекстНаходитсяНаПоддержке);
		
	КонецЕсли;
	
	Элементы.ДекорацияПояснениеВариантПостановкиНаПоддержкуНеИзменять.Заголовок = ТекстПояснения;
	ИнформацияПоставщикаТекущаяБаза = ТекстНаходитсяНаПоддержке;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСФайлами

&НаКлиенте
Процедура ПослеОбработкиВыбораИзмененияФайлаЗагрузки(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат <> ДополнительныеПараметры.ТекущийФайл Тогда
		ОбработатьИзменениеФайлаЗагрузки();
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработатьИзменениеФайлаЗагрузки()

	Если ПустаяСтрока(ФайлЗагрузки) Тогда
		
		РезультатРазбора = НовыйРезультатРазбораФайлаЗагрузки();
		РезультатРазбора.ФайлЗагрузкиВыбранКорректно = Ложь;
		РезультатРазбора.СообщениеОбОшибке = НСтр("ru = 'Файл загрузки не выбран'");
		
		ВывестиИнформациюНаФормуПоИтогамРазбораФайлаЗагрузки(РезультатРазбора);

	Иначе
		
		СформироватьИнформациюОФайлеЗагрузке(ДвоичныеДанныеФайлаЗагрузки());
		
	КонецЕсли; 
	
	ЕстьГлоссарийДляЗагрузки = Ложь;
	ЕстьСценарииДляЗагрузки  = Ложь;
	
	УстановитьНавигаторПомощника(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура СформироватьИнформациюОФайлеЗагрузке(ДвоичныеДанныеФайлаЗагрузки)
	
	Попытка
		ОбъектЧтение = Новый ЧтениеZipФайла(ДемонстрационныеСценарии.ПотокВПамятиИзДвоичныхДанных(ДвоичныеДанныеФайлаЗагрузки));
	Исключение
		
		ЗаполнитьДанныеФормыПоДаннымОписанияВыгрузки(Неопределено ,НСтр("ru = 'Не удалось разобрать информацию о загружаемых данных.'"));
		Возврат;
		
	КонецПопытки;
	
	Если ОбъектЧтение.Элементы.Количество() <> 0 Тогда
		
		ИмяФайлаОписаниеВыгрузки = ДемонстрационныеСценарииКлиентСервер.ИмяФайлаОписаниеВыгрузки();
		
		ДанныеОписанияЗагрузки = ОбъектЧтение.Элементы.Найти(ИмяФайлаОписаниеВыгрузки);
		
		Если ДанныеОписанияЗагрузки = Неопределено Тогда
			
			ЗаполнитьДанныеФормыПоДаннымОписанияВыгрузки(Неопределено ,НСтр("ru = 'Выбранный файл не содержит описания загружаемых данных.'"));
			
		Иначе
			ФайлЗагрузкиВыбранКорректно = Истина;
			
			РезультатСозданияКаталога = ДемонстрационныеСценарии.РезультатСозданияКаталогДляРазархивированияВыгрузки(); 
			
			Если Не РезультатСозданияКаталога.Успешно Тогда
				Возврат;
			КонецЕсли;
			
			КаталогРазархивированныхФайлов = РезультатСозданияКаталога.ИмяКаталога;
			
			ОбъектЧтение.Извлечь(ДанныеОписанияЗагрузки, КаталогРазархивированныхФайлов, РежимВосстановленияПутейФайловZIP.НеВосстанавливать); 
				
			ЧтениеТекста   = Новый ЧтениеТекста(КаталогРазархивированныхФайлов + ИмяФайлаОписаниеВыгрузки, , , , Ложь);
			ДанныеОписания  = СокрЛП(ЧтениеТекста.Прочитать());
			ЧтениеТекста.Закрыть(); 
			
			ТекстОшибкиЧтения = "";
			
			РезультатЧтения = РезультатЧтенияСтрокиJSON(ДанныеОписания, ТекстОшибкиЧтения);
			
			Если Не РезультатЧтения.Успешно Тогда
				
				ФайлЗагрузкиВыбранКорректно = Ложь;
				ОбщегоНазначения.СообщитьПользователю(РезультатЧтения.ТекстОшибки,, ФайлЗагрузки); 
				
				Возврат;
				
			КонецЕсли;
			
			ЗаполнитьДанныеФормыПоДаннымОписанияВыгрузки(РезультатЧтения.Данные,ТекстОшибкиЧтения);
				
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РезультатЧтенияСтрокиJSON(ДанныеОписания, ТекстОшибкиЧтения)
	
	Возврат ДемонстрационныеСценарии.РезультатЧтенияСтрокиJSON(ДанныеОписания, ТекстОшибкиЧтения);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеФормыПоДаннымОписанияВыгрузки(ДанныеОписанияФайлаЗагрузки, ТекстОшибкиЧтения)
	
	РезультатРазбора = НовыйРезультатРазбораФайлаЗагрузки();
	
	Если Не ПустаяСтрока(ТекстОшибкиЧтения) Тогда
		
		РезультатРазбора.ФайлЗагрузкиВыбранКорректно = Ложь;
		РезультатРазбора.СообщениеОбОшибке = СтрШаблон(НСтр("ru = 'Чтение файла описания выгрузки завершилось с ошибкой: %1'"), ТекстОшибкиЧтения); 
		
	Иначе
	
		ТекстОшибкиНеверныйФормат = НСтр("ru = 'Выбранный файл не является файлом выгрузки описаний процессов'");
		
		Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеОписанияФайлаЗагрузки, "ConfigurationDescription") Тогда
			РезультатРазбора.ФайлЗагрузкиВыбранКорректно = Ложь;
			РезультатРазбора.СообщениеОбОшибке           = ТекстОшибкиНеверныйФормат;
		Иначе
			ОписаниеЗагружаемойПоставки = ДанныеОписанияФайлаЗагрузки.ConfigurationDescription;
		КонецЕсли;
		
		Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеОписанияФайлаЗагрузки, "Supplier") Тогда
			РезультатРазбора.ФайлЗагрузкиВыбранКорректно  = Ложь;
			РезультатРазбора.СообщениеОбОшибке            = ТекстОшибкиНеверныйФормат;
		Иначе
			ПоставщикЗагружаемойПоставки =  ДанныеОписанияФайлаЗагрузки.Supplier;
		КонецЕсли;
		
		Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеОписанияФайлаЗагрузки, "Partial") Тогда
			РезультатРазбора.ФайлЗагрузкиВыбранКорректно = Ложь;
			РезультатРазбора.СообщениеОбОшибке            = ТекстОшибкиНеверныйФормат;
		Иначе
			ЭтоЧастичнаяВыгрузка =  ДанныеОписанияФайлаЗагрузки.Partial;
		КонецЕсли;
	
	КонецЕсли;
	
	ВывестиИнформациюНаФормуПоИтогамРазбораФайлаЗагрузки(РезультатРазбора);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиИнформациюНаФормуПоИтогамРазбораФайлаЗагрузки(РезультатРазбора) 
	
	Если РезультатРазбора.ФайлЗагрузкиВыбранКорректно Тогда
		
		ФайлЗагрузкиВыбранКорректно = Истина;
		ТребуетсяЧтениеФайлов       = Истина;
		
		Элементы.СтраницыКорректныйИлиНетФайлЗагрузки.ТекущаяСтраница = Элементы.СтраницаВыбранКорректныйФайлЗагрузки;
		
		ИнформацияЗагружаемогоФайла = ДемонстрационныеСценарииКлиентСервер.ТекстОписанияПоставки(ОписаниеЗагружаемойПоставки, ПоставщикЗагружаемойПоставки);
		
		Если ЭтоЧастичнаяВыгрузка Тогда
			
			Элементы.ГруппаПредупреждениеЧастичнаяВыгрузка.Видимость                  = Истина;
			ВариантПостановкиНаПоддержку                                               = 1; 
			Элементы.ГруппаВыборВариантаПоддержки.ТолькоПросмотр                       = Истина;
			Элементы.СпособЗагрузкиСравнениеОбъединение.РасширеннаяПодсказка.Заголовок = НСтр("ru = 'Можно будет настроить, какие данные загружать, а какие нет'");
			
			Элементы.НастройкиЗагрузкиНеУдалять.Видимость                                                 = Ложь;
			Элементы.НастройкиЗагрузкиУдалять.Видимость                                                   = Ложь; 
			Элементы.НастройкиЗагрузкиГлоссарийУдалять.Видимость                                          = Ложь;
			Элементы.НастройкиЗагрузкиГлоссарийНеУдалять.Видимость                                        = Ложь;
			Элементы.НастройкиЗагрузкиОписанияПроцессовКонтекстноеМенюУдалять.Видимость                   = Ложь;
			Элементы.НастройкиЗагрузкиОписанияПроцессовКонтекстноеМенюНеУдалять.Видимость                 = Ложь;
			Элементы.НастройкиЗагрузкиОписанияПроцессовОтборКонтекстноеМенюУдалять.Видимость              = Ложь;
			Элементы.НастройкиЗагрузкиОписанияПроцессовОтборКонтекстноеМенюНеУдалять.Видимость            = Ложь;
			Элементы.НастройкиЗагрузкиГлоссарийКонтекстноеМенюУдалять.Видимость                           = Ложь;
			Элементы.НастройкиЗагрузкиГлоссарийКонтекстноеМенюНеУдалять.Видимость                         = Ложь;
			Элементы.НастройкиЗагрузкиГлоссарийОтборКонтекстноеМенюУдалять.Видимость                      = Ложь;
			Элементы.НастройкиЗагрузкиГлоссарийОтборКонтекстноеМенюУдалять.Видимость                      = Ложь;
			
		Иначе
			
			Элементы.ГруппаПредупреждениеЧастичнаяВыгрузка.Видимость                  = Ложь;
			Элементы.ГруппаВыборВариантаПоддержки.ТолькоПросмотр                       = Ложь;
			Элементы.СпособЗагрузкиСравнениеОбъединение.РасширеннаяПодсказка.Заголовок = НСтр("ru = 'Можно будет настроить, какие данные загружать, а какие нет. Будет возможность при помощи сторонних программ сравнить и объединить загружаемые данные с данными в информационной базе'");
			
			Элементы.НастройкиЗагрузкиНеУдалять.Видимость                                                 = Истина;
			Элементы.НастройкиЗагрузкиУдалять.Видимость                                                   = Истина;
			Элементы.НастройкиЗагрузкиГлоссарийУдалять.Видимость                                          = Истина;
			Элементы.НастройкиЗагрузкиГлоссарийНеУдалять.Видимость                                        = Истина;
			Элементы.НастройкиЗагрузкиОписанияПроцессовКонтекстноеМенюУдалять.Видимость                   = Истина;
			Элементы.НастройкиЗагрузкиОписанияПроцессовКонтекстноеМенюНеУдалять.Видимость                 = Истина;
			Элементы.НастройкиЗагрузкиОписанияПроцессовОтборКонтекстноеМенюСравнитьИОбъединить.Видимость  = Истина;
			Элементы.НастройкиЗагрузкиОписанияПроцессовОтборКонтекстноеМенюУдалять.Видимость              = Истина;
			Элементы.НастройкиЗагрузкиОписанияПроцессовОтборКонтекстноеМенюНеУдалять.Видимость            = Истина;
			Элементы.НастройкиЗагрузкиГлоссарийКонтекстноеМенюУдалять.Видимость                           = Истина;
			Элементы.НастройкиЗагрузкиГлоссарийКонтекстноеМенюНеУдалять.Видимость                         = Истина;
			Элементы.НастройкиЗагрузкиГлоссарийОтборКонтекстноеМенюУдалять.Видимость                      = Истина;
			Элементы.НастройкиЗагрузкиГлоссарийОтборКонтекстноеМенюУдалять.Видимость                      = Истина;

		КонецЕсли;
		
		ТекстПояснения = СтроковыеФункции.ФорматированнаяСтрока("<span style=""color: ПоясняющийТекст "">%1: <b>%2</b></span>",
		                                                        НСтр("ru = 'Информация о версии и данных поставщика будет обновлена на'"),
		                                                        ИнформацияЗагружаемогоФайла);
		
		Элементы.ДекорацияПояснениеВариантПостановкиНаПоддержкуИзЗагружаемогоФайла.Заголовок = ТекстПояснения;
		
		ИнформацияПоставкаЗагружаемыйФайл = ИнформацияЗагружаемогоФайла; 
		
	Иначе 
		
		Элементы.СтраницыКорректныйИлиНетФайлЗагрузки.ТекущаяСтраница = Элементы.СтраницаНеВыбранКорректныйФайлЗагрузки;
		Элементы.ДекорацияПояснениеВыбораФайла.Заголовок              = РезультатРазбора.СообщениеОбОшибке;
		
		Если ПустаяСтрока(ФайлЗагрузки) Тогда
			
			Элементы.СтраницыФайлНеВыбранНекорректныйФайл.ТекущаяСтраница = Элементы.СтраницаФайлНеВыбран;
			
		Иначе
			
			Элементы.СтраницыФайлНеВыбранНекорректныйФайл.ТекущаяСтраница = Элементы.СтраницаВыбранНекорректныйФайл;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НовыйРезультатРазбораФайлаЗагрузки()
	
	РезультатРазбора = Новый Структура;
	РезультатРазбора.Вставить("ФайлЗагрузкиВыбранКорректно",Истина);
	РезультатРазбора.Вставить("СообщениеОбОшибке",           ""); 
	
	Возврат РезультатРазбора;
	
КонецФункции

#КонецОбласти

#Область НавигацияПоПомощнику

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьНавигаторПомощника(Форма)
	
	Элементы = Форма.Элементы;

	СтрокаСтартоваяСтраница    = ДемонстрационныеСценарииКлиентСервер.ЗаголовокЧастиНавигатораПомощника(НСтр("ru = 'Начало'"), 
	                                                                                              "ПерейтиНаНачальнуюСтраницу",
	                                                                                              Истина,
	                                                                                              Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаСтартовая); 
	
	СтрокаНастройка            = ДемонстрационныеСценарииКлиентСервер.ЗаголовокЧастиНавигатораПомощника(НСтр("ru = 'Настройка описаний'"),
	                                                                                              "ПерейтиНаСтраницуНастройка",
	                                                                                              Форма.ФайлЗагрузкиВыбранКорректно И Форма.ЕстьСценарииДляЗагрузки,
	                                                                                              Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаНастройкиЗагрузки);
	
	СтрокаНастройкаГлоссарий   = ДемонстрационныеСценарииКлиентСервер.ЗаголовокЧастиНавигатораПомощника(НСтр("ru = 'Настройка глоссария'"),
	                                                                                              "ПерейтиНаСтраницуГлоссарий",
	                                                                                              Форма.ФайлЗагрузкиВыбранКорректно И Форма.ЕстьГлоссарийДляЗагрузки,
	                                                                                              Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаНастройкиЗагрузкиГлоссарий);
	
	СтрокаРезультаты           = ДемонстрационныеСценарииКлиентСервер.ЗаголовокЧастиНавигатораПомощника(НСтр("ru = 'Результаты загрузки'"),
	                                                                                              "ПерейтиНаСтраницуРезультаты",
	                                                                                              Форма.ЗагрузкаВыполнена,
	                                                                                              Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаЗагружено);
	
	СтрокаСравнениеОбъединение = ДемонстрационныеСценарииКлиентСервер.ЗаголовокЧастиНавигатораПомощника(НСтр("ru = 'Сравнение и объединение'"),
	                                                                                              "ПерейтиНаСтраницуСравнениеИОбъединение",
	                                                                                              Форма.ПодготовкаКСравнениюОбъединениюВыполнена,
	                                                                                              Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаСравнениеОбъединение);
	
	СтрокаМеждуСтраницами = " -> ";
	
	МассивФорматированнаяСтрока = Новый Массив;
	МассивФорматированнаяСтрока.Добавить(СтрокаСтартоваяСтраница);
	МассивФорматированнаяСтрока.Добавить(СтрокаМеждуСтраницами);
	Если Форма.СпособЗагрузки > 0 Тогда
		
		Если Форма.ЕстьСценарииДляЗагрузки Тогда
			МассивФорматированнаяСтрока.Добавить(СтрокаНастройка);
			МассивФорматированнаяСтрока.Добавить(СтрокаМеждуСтраницами);
		КонецЕсли;
		Если Форма.ЕстьГлоссарийДляЗагрузки Тогда
			МассивФорматированнаяСтрока.Добавить(СтрокаНастройкаГлоссарий);
			МассивФорматированнаяСтрока.Добавить(СтрокаМеждуСтраницами);
		КонецЕсли;
		
	КонецЕсли;
	Если Форма.СпособЗагрузки > 0
		И Форма.ЕстьЧтоОбъединять Тогда
		МассивФорматированнаяСтрока.Добавить(СтрокаСравнениеОбъединение);
		МассивФорматированнаяСтрока.Добавить(СтрокаМеждуСтраницами); 
	КонецЕсли;
	
	Элементы.НастройкиЗагрузкиСравнитьИОбъединить.Видимость = (Форма.СпособЗагрузки = 1);
	
	МассивФорматированнаяСтрока.Добавить(СтрокаРезультаты);
	
	Элементы.ДекорацияНавигаторПомощника.Заголовок = Новый ФорматированнаяСтрока(МассивФорматированнаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуПомощника(ИмяСтраницы)

	Если ИмяСтраницы = "СтраницаСтартовая" Тогда
		
		Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаСтартовая;
		Элементы.СтраницыПодвал.ТекущаяСтраница    = Элементы.СтраницаКнопкиДалее;
		Элементы.Далее.КнопкаПоУмолчанию           = Истина;
		
	ИначеЕсли ИмяСтраницы = "СтраницаНастройкиЗагрузки" Тогда
		
		Если ТребуетсяЧтениеФайлов Тогда
			
			НачатьЧтениеФайлов();
			
		Иначе
			
			ПерейтиНаСтраницуНастройкаЗагрузки(ЭтотОбъект);
			
		КонецЕсли;
		
	ИначеЕсли ИмяСтраницы = "СтраницаНастройкиЗагрузкиГлоссарий" Тогда
		
		ПерейтиНаСтраницуНастройкаЗагрузкиГлоссарий(ЭтотОбъект);
		
	ИначеЕсли ИмяСтраницы = "СтраницаЗагружено" Тогда
		
		Если ТребуетсяЧтениеФайлов Тогда
			
			НачатьЧтениеФайлов();
			
		ИначеЕсли ТребуетсяЧтениеРезультатовСравнениеОбъединение Тогда
			
			ПолучитьРезультирующиеФайлы();
			ПерейтиНаСтраницуЗагружено();
			ПодключитьОбработчикОжидания("НачатьЗагрузкуСценариев", 0.5, Истина);
		
		ИначеЕсли ТребуетсяЗагрузка Тогда
			
			ПерейтиНаСтраницуЗагружено();
			ПодключитьОбработчикОжидания("НачатьЗагрузкуСценариев", 0.5, Истина);
			
		Иначе
			
			ПерейтиНаСтраницуЗагружено();
			
		КонецЕсли; 
		
	ИначеЕсли ИмяСтраницы = "СтраницаСравнениеОбъединение" Тогда
		
		Если ТребуетсяСравнениеОбъединение Тогда
			
			НачатьПодготовкуКСравнениюИОбъединению();
			
		Иначе
			
			ПерейтиНаСтраницуСравнениеИОбъединение();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуСравнениеИОбъединение()
	
	Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаСравнениеОбъединение;
	Элементы.СтраницыПодвал.ТекущаяСтраница    = Элементы.СтраницаКнопкиНазадДалее;
	Элементы.ДалееНазадДалее.КнопкаПоУмолчанию = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуЗагружено()
	
	Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаЗагружено;
	Элементы.СтраницыПодвал.ТекущаяСтраница    = Элементы.СтраницаКнопкиГотово;
	Элементы.ДалееГотово.КнопкаПоУмолчанию     = Истина;
	
	Если ТребуетсяЗагрузка Тогда
		
		Элементы.СтраницыЗагружаетсяЗагружено.ТекущаяСтраница = Элементы.СтраницаЗагружается;
		Элементы.ДалееГотово.Доступность                      = Ложь;
		
	Иначе
		
		Элементы.СтраницыЗагружаетсяЗагружено.ТекущаяСтраница = Элементы.СтраницаЗагрузкаЗакончена;
		Элементы.ДалееГотово.Доступность           = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПерейтиНаСтраницуНастройкаЗагрузки(Форма) 
	
	Элементы = Форма.Элементы;
	
	Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаНастройкиЗагрузки;
	Элементы.СтраницыПодвал.ТекущаяСтраница    = Элементы.СтраницаКнопкиНазадДалее;
	Элементы.ДалееНазадДалее.КнопкаПоУмолчанию = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПерейтиНаСтраницуНастройкаЗагрузкиГлоссарий(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаНастройкиЗагрузкиГлоссарий;
	Элементы.СтраницыПодвал.ТекущаяСтраница    = Элементы.СтраницаКнопкиНазадДалее;
	Элементы.ДалееНазадДалее.КнопкаПоУмолчанию = Истина;
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыполнитьПереходПоСтраницам(Команда)
	
	ОчиститьСообщения();
	
	ИмяКоманды = Команда.Имя;
	Отказ      = Ложь;
	
	ПроверитьВозможностьВыполненияПереходаПоСтраницам(ИмяКоманды, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьНеобходимыеДействияПриПереходеПоСтраницам(ИмяКоманды);
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыполнитьНеобходимыеДействияПриПереходеПоСтраницам(ИмяКоманды)

	Если ИмяКоманды = "Далее" Тогда
		ПерейтиНаСледующуюСтраницу();
	Иначе
		ПерейтиНаПредыдущуюСтраницу();
	КонецЕсли;
	
	УстановитьНавигаторПомощника(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСледующуюСтраницу()
	
	Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаСтартовая Тогда
		
		Если СпособЗагрузки = 0 Тогда
			
			ПерейтиНаСтраницуПомощника("СтраницаЗагружено");
			
		Иначе
			
			ПерейтиНаСтраницуПомощника("СтраницаНастройкиЗагрузки");
			
		КонецЕсли; 
		
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаНастройкиЗагрузки Тогда
		
		Если ЕстьГлоссарийДляЗагрузки Тогда
			
			ПерейтиНаСтраницуПомощника("СтраницаНастройкиЗагрузкиГлоссарий");
			
		ИначеЕсли ЕстьЧтоОбъединять(ЭтотОбъект) Тогда
			
			ПерейтиНаСтраницуПомощника("СтраницаСравнениеОбъединение");
			
		Иначе
			
			ТребуетсяСравнениеОбъединение                  = Ложь;
			ТребуетсяЧтениеРезультатовСравнениеОбъединение = Ложь;
			ПерейтиНаСтраницуПомощника("СтраницаЗагружено");
			
		КонецЕсли; 
		
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаНастройкиЗагрузкиГлоссарий Тогда
		
		Если ЕстьЧтоОбъединять(ЭтотОбъект) Тогда
			
			ПерейтиНаСтраницуПомощника("СтраницаСравнениеОбъединение");
			
		Иначе
			
			ТребуетсяСравнениеОбъединение                  = Ложь;
			ТребуетсяЧтениеРезультатовСравнениеОбъединение = Ложь;
			ПерейтиНаСтраницуПомощника("СтраницаЗагружено");
			
		КонецЕсли;
		
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаСравнениеОбъединение Тогда
		
		ПерейтиНаСтраницуПомощника("СтраницаЗагружено");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаПредыдущуюСтраницу()

	Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаНастройкиЗагрузки Тогда 
		
		ПерейтиНаСтраницуПомощника("СтраницаСтартовая"); 
		
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаНастройкиЗагрузкиГлоссарий Тогда 
		
		Если НастройкиЗагрузкиОписанияПроцессов.ПолучитьЭлементы().Количество() > 0 Тогда
			
			ПерейтиНаСтраницуПомощника("СтраницаНастройкиЗагрузки");
			
		Иначе
			
			ПерейтиНаСтраницуПомощника("СтраницаСтартовая");
			
		КонецЕсли; 
		
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаСравнениеОбъединение Тогда 
		
		Если НастройкиЗагрузкиГлоссарий.ПолучитьЭлементы().Количество() > 0 Тогда
			
			ПерейтиНаСтраницуПомощника("СтраницаНастройкиЗагрузкиГлоссарий");
			
		Иначе
			
			ПерейтиНаСтраницуПомощника("СтраницаНастройкиЗагрузки");
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВозможностьВыполненияПереходаПоСтраницам(ИмяКоманды, Отказ)

	Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаСтартовая
		И ИмяКоманды = "Далее" Тогда
		
		Если ПустаяСтрока(ФайлЗагрузки) Тогда
			
			ТекстСообщения = НСтр("ru = 'Файл загрузки не указан'");
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ФайлЗагрузки",, Отказ);
			
		ИначеЕсли Не ФайлЗагрузкиВыбранКорректно Тогда
			
			ТекстСообщения = НСтр("ru = 'Выбран не корректный файл загрузки'");
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ФайлЗагрузки",, Отказ);
			
		КонецЕсли;
		
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаНастройкиЗагрузки
		И ИмяКоманды = "Далее" Тогда
		
		Если Не ЕстьТребуемыеВыполненияДействия() Тогда
			
			ТекстСообщения = НСтр("ru = 'Не выбрано ни одного действия, которое требуется выполнить при загрузке'");
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ИмяТабличнойЧасти",, Отказ);
			
		КонецЕсли; 
		
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаСравнениеОбъединение
		И ИмяКоманды = "Далее" Тогда 
		
		НомерСтроки = 1;
		
		Для Каждого СтрокаТаблицы Из СравнениеОбъединение Цикл
			
			Если ПустаяСтрока(СтрокаТаблицы.ИмяФайлаКЗагрузке) Тогда 
				
				ТекстОшибки = СтрШаблон(НСтр("ru = 'Не указано  ""Имя файла к загрузке"" в строке %1'"), НомерСтроки);
				
				ОбщегоНазначенияКлиент.СообщитьПользователю(
					ТекстОшибки,
					,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("СравнениеОбъединение", НомерСтроки - 1, "ИмяФайлаКЗагрузке"),
					,
					Отказ);
					
				НомерСтроки = НомерСтроки + 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти 

#Область ЧтениеФайлов

&НаКлиенте
Процедура НачатьЧтениеФайлов()
	
	Элементы.СтраницыКорректныйИлиНетФайлЗагрузки.ТекущаяСтраница = Элементы.СтраницаВыполняетсяЧтениеФайлов;
	ПодключитьОбработчикОжидания("ВыполнитьЧтениеЗагружаемыхДанных", 1, Истина);
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыполнитьЧтениеЗагружаемыхДанных()
	
	НастройкиЗагрузкиОписанияПроцессов.ПолучитьЭлементы().Очистить();
	НастройкиЗагрузкиГлоссарий.ПолучитьЭлементы().Очистить();
	Скриншоты.Очистить();
	
	ДлительнаяОперация = ЧтениеФайлаАрхиваДлительнаяОперация(УникальныйИдентификатор, ДвоичныеДанныеФайлаЗагрузки());
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		ЧтениеФайлаАрхиваЗагрузкиЗавершение(ДлительнаяОперация, ДополнительныеПараметры);
		
	ИначеЕсли ДлительнаяОперация.Статус = "Выполняется" Тогда
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.Заголовок = НСтр("ru = 'Загрузка данных описаний процессов'");
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ЧтениеФайлаАрхиваЗагрузкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЧтениеФайлаАрхиваЗагрузкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		ОбработатьРезультатЧтенияФайлов(Результат, ДополнительныеПараметры);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатЧтенияФайлов(Результат, ДополнительныеПараметры)

	Если Не ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда 
		Возврат;
	КонецЕсли;
	
	РезультатЗагрузки =  РезультатОбработкиЧтенияАрхиваНаСервере(Результат.АдресРезультата);
	
	Если РезультатЗагрузки.Успешно Тогда
		
		ТребуетсяЗагрузка             = Истина;
		ТребуетсяЧтениеФайлов         = Ложь;
		ТребуетсяСравнениеОбъединение = ЕстьЧтоОбъединять(ЭтотОбъект);
		ЕстьЧтоОбъединять             = ТребуетсяСравнениеОбъединение; 
	
		Элементы.СтраницыКорректныйИлиНетФайлЗагрузки.ТекущаяСтраница = Элементы.СтраницаВыбранКорректныйФайлЗагрузки;
		
		ЕстьГлоссарийДляЗагрузки = НастройкиЗагрузкиГлоссарий.ПолучитьЭлементы().Количество();
		ЕстьСценарииДляЗагрузки  = НастройкиЗагрузкиОписанияПроцессов.ПолучитьЭлементы().Количество();
		
		Если СпособЗагрузки = 1 Тогда
			
			Если ЕстьСценарииДляЗагрузки Тогда
				ПерейтиНаСтраницуНастройкаЗагрузки(ЭтотОбъект);
			ИначеЕсли ЕстьГлоссарийДляЗагрузки Тогда
				ПерейтиНаСтраницуНастройкаЗагрузкиГлоссарий(ЭтотОбъект);
			КонецЕсли;
			
		Иначе
			
			ПерейтиНаСтраницуЗагружено();
			ПодключитьОбработчикОжидания("НачатьЗагрузкуСценариев", 0.5, Истина);
			
		КонецЕсли;
		
		УстановитьНавигаторПомощника(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РезультатОбработкиЧтенияАрхиваНаСервере(АдресРезультата)
	
	РезультатОбработки = Новый Структура;
	РезультатОбработки.Вставить("Успешно",                Истина);
	РезультатОбработки.Вставить("СообщенияОбОшибках",     Новый Массив);
	
	РезультатЗагрузки = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	ЗаполнитьЗначенияСвойств(РезультатОбработки, РезультатЗагрузки);
	
	Если Не РезультатОбработки.Успешно Тогда
		Возврат РезультатОбработки;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(РезультатЗагрузки.ДанныеЗагрузки.НастройкиЗагрузкиОписанияПроцессов, "НастройкиЗагрузкиОписанияПроцессов");
	ЗначениеВРеквизитФормы(РезультатЗагрузки.ДанныеЗагрузки.НастройкиЗагрузкиГлоссарий,         "НастройкиЗагрузкиГлоссарий");
	ЗначениеВРеквизитФормы(РезультатЗагрузки.ДанныеЗагрузки.Скриншоты,                           "Скриншоты");
	
	Возврат РезультатОбработки;
	
КонецФункции

&НаСервере
Функция ЧтениеФайлаАрхиваДлительнаяОперация(УникальныйИдентификатор, ДвоичныеДанныеФайлаЗагрузки)
	
	ПараметрыФормирования = Новый Структура;
	ПараметрыФормирования.Вставить("Глоссарий",                      РеквизитФормыВЗначение("НастройкиЗагрузкиГлоссарий")); 
	ПараметрыФормирования.Вставить("ДеревоОписанийПроцессов",        РеквизитФормыВЗначение("НастройкиЗагрузкиОписанияПроцессов")); 
	ПараметрыФормирования.Вставить("Скриншоты",                      РеквизитФормыВЗначение("Скриншоты"));
	ПараметрыФормирования.Вставить("ДвоичныеДанныеФайлаЗагрузки",    ДвоичныеДанныеФайлаЗагрузки);
	ПараметрыФормирования.Вставить("ЭтоЧастичнаяВыгрузка",           ЭтоЧастичнаяВыгрузка);
	ПараметрыФормирования.Вставить("ВариантПостановкиНаПоддержку",   ВариантПостановкиНаПоддержку);
	ПараметрыФормирования.Вставить("УникальныйИдентификатор",        УникальныйИдентификатор);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Чтение файлов архива загрузки описаний процессов'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне("Обработки.ЗагрузкаОписанийПроцессов.ПрочитатьДанныеФайлаЗагрузки",
	                                                       ПараметрыФормирования, ПараметрыВыполнения);
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Функция ДвоичныеДанныеФайлаЗагрузки()

	Возврат Новый ДвоичныеДанные(ФайлЗагрузки);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РезультатПоискаСтрокиДерева(ГдеИскать,Значение,Колонка,ИскатьВПодчиненных)
	
	ЭлементыДерева = ГдеИскать.ПолучитьЭлементы();
	
	Для каждого ЭлементДерева Из ЭлементыДерева Цикл
		Если ЭлементДерева[Колонка] = Значение Тогда
			Возврат ЭлементДерева.ПолучитьИдентификатор();
		ИначеЕсли  ИскатьВПодчиненных Тогда
			НайденныйИдентификаторСтроки =  РезультатПоискаСтрокиДерева(ЭлементДерева,Значение,Колонка,ИскатьВПодчиненных);
			Если НайденныйИдентификаторСтроки >=0 Тогда
				Возврат НайденныйИдентификаторСтроки;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат -1;
	
КонецФункции

#КонецОбласти

#Область СравнениеТекстов

&НаКлиенте
Процедура ПоказатьОкноСравнениеТекста(Параметры)
	
	Параметры.Вставить("ВыполнитьСравнениеДвухТекстов", Истина);
	
	ОткрытьФорму("Обработка.СравнениеТекстов.Форма.СравнениеТекстов", Параметры, ,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОкноСравненияТекстовПоСтрокеДерева(ТекущиеДанные, ИмяТаблицы)
	
	ПараметрыСравнения = Новый Структура;
	ПараметрыСравнения.Вставить("ТекстДляСравнения1", ТекущиеДанные.ДанныеБазы);
	ПараметрыСравнения.Вставить("ОписаниеТекста1",    НСтр("ru = 'данные информационной базы'"));
	ПараметрыСравнения.Вставить("ТекстДляСравнения2", ТекущиеДанные.ДанныеФайла);
	ПараметрыСравнения.Вставить("ОписаниеТекста2",    НСтр("ru = 'данные загружаемого файла'"));
	ПараметрыСравнения.Вставить("ЗаголовокФормы",     ПредставлениеДляСравненияТекстов(ТекущиеДанные, ИмяТаблицы));
	
	Если ТекущиеДанные.СтатусФайлов = ПредопределенноеЗначение("Перечисление.СтатусыСравненияФайловОписанийПроцессов.ОтсутствуетВБазе")
		Или ТекущиеДанные.СтатусФайлов = ПредопределенноеЗначение("Перечисление.СтатусыСравненияФайловОписанийПроцессов.ОтсутствуетВЗагрузке") Тогда
		
		ПараметрыСравнения.Вставить("НачальноеОтображение", "РазличияВОдномОкне");
		
	КонецЕсли;
	
	ПоказатьОкноСравнениеТекста(ПараметрыСравнения);
	
КонецПроцедуры

&НаКлиенте
Функция ПредставлениеДляСравненияТекстов(ТекущиеДанные, ИмяТаблицы)
	
	Если ТекущиеДанные.ТипСтрокиНастройкиЗагрузки = "Сценарий"
		Или ИмяТаблицы = "НастройкиЗагрузкиОписанияПроцессовОтбор"
		Или ИмяТаблицы = "НастройкиЗагрузкиГлоссарийОтбор" Тогда
		
		Возврат СтрШаблон(НСтр("ru = 'Реквизиты описания %1'"), ТекущиеДанные.Представление);
		
	ИначеЕсли ТекущиеДанные.ТипСтрокиНастройкиЗагрузки = "Описание" Тогда
		
		РодительскаяСтрока = ТекущиеДанные.ПолучитьРодителя();
		
		Если РодительскаяСтрока <> Неопределено Тогда
			
			Возврат СтрШаблон(НСтр("ru = '%1 (%2)'"), РодительскаяСтрока.Представление, ТекущиеДанные.КодЯзыка);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Отборы

&НаКлиенте
Процедура СформироватьСписокВыбораЧтоДелать(Элемент, ИмяТаблицы)
	
	Элемент.СписокВыбора.Очистить();
	
	ТекущиеДанные = Элементы[ИмяТаблицы].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если ТекущиеДанные.СтатусФайлов = ПредопределенноеЗначение("Перечисление.СтатусыСравненияФайловОписанийПроцессов.ИзмененТолькоПоставщиком")
		Или ТекущиеДанные.СтатусФайлов = ПредопределенноеЗначение("Перечисление.СтатусыСравненияФайловОписанийПроцессов.НетИзменений")
		Или ТекущиеДанные.СтатусФайлов = ПредопределенноеЗначение("Перечисление.СтатусыСравненияФайловОписанийПроцессов.ЕстьИзменения")
		Или ТекущиеДанные.СтатусФайлов = ПредопределенноеЗначение("Перечисление.СтатусыСравненияФайловОписанийПроцессов.ИзмененТолькоВБазе") 
		Или ТекущиеДанные.СтатусФайлов = ПредопределенноеЗначение("Перечисление.СтатусыСравненияФайловОписанийПроцессов.ИзмененИПоставщикомИВБазе")  Тогда
		
		Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыДействийПриЗагрузкеОписанийПроцессов.Загружать"));
		Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыДействийПриЗагрузкеОписанийПроцессов.НеЗагружать"));
		Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыДействийПриЗагрузкеОписанийПроцессов.Объединить"));
		
	ИначеЕсли ТекущиеДанные.СтатусФайлов = ПредопределенноеЗначение("Перечисление.СтатусыСравненияФайловОписанийПроцессов.ОтсутствуетВБазе")  Тогда
		
		Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыДействийПриЗагрузкеОписанийПроцессов.Загружать"));
		Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыДействийПриЗагрузкеОписанийПроцессов.НеЗагружать"));
		
	ИначеЕсли ТекущиеДанные.СтатусФайлов = ПредопределенноеЗначение("Перечисление.СтатусыСравненияФайловОписанийПроцессов.ОтсутствуетВЗагрузке") Тогда
		
		Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыДействийПриЗагрузкеОписанийПроцессов.Удалить"));
		Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыДействийПриЗагрузкеОписанийПроцессов.НеУдалять"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриАктивизацииПоляНастройкиЗагрузки(Элемент, ПрефиксКолонок, ИмяТаблицы)
	
	Если Элемент.ТекущийЭлемент.Имя = ПрефиксКолонок + "СтатусФайлов" Тогда
		
		ТекущиеДанные = Элементы[ИмяТаблицы].ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли; 
		
		Если ТекущиеДанные.СтатусФайлов = ПредопределенноеЗначение("Перечисление.СтатусыСравненияФайловОписанийПроцессов.НетИзменений") Тогда
			Возврат;
		КонецЕсли;
		
		ОткрытьОкноСравненияТекстовПоСтрокеДерева(ТекущиеДанные, ИмяТаблицы);
		
		Элемент.ТекущийЭлемент = Элементы[ПрефиксКолонок + "ЧтоДелать"];
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МножественныйОтборСпискаНачалоВыбора(Форма, Элемент, Значения, ТипПеречисления, Заголовок, ИсключаемыеЗначения = Неопределено)

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("СписокОтбор",         Значения);
	ПараметрыОткрытия.Вставить("ТипПеречисления",     ТипПеречисления);
	ПараметрыОткрытия.Вставить("Заголовок",           Заголовок);
	ПараметрыОткрытия.Вставить("ИсключаемыеЗначения", ИсключаемыеЗначения);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ФормаМножественногоОтбораСпискаПослеЗакрытия", Форма, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ЗагрузкаОписанийПроцессов.Форма.МножественныйОтборСписка", ПараметрыОткрытия, Элемент,,,, ОповещениеОЗакрытии);

КонецПроцедуры

&НаКлиенте
Процедура ФормаМножественногоОтбораСпискаПослеЗакрытия(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Элемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Элемент = Элементы.ДействиеОтбор
		Или ДополнительныеПараметры.Элемент = Элементы.ДействиеГлоссарийОтбор Тогда
		
		ДействиеОтбор = Результат;
		
	ИначеЕсли ДополнительныеПараметры.Элемент = Элементы.ИзмененияОтбор
		Или ДополнительныеПараметры.Элемент = Элементы.ИзмененияГлоссарийОтбор Тогда
		
		ИзмененияОтбор = Результат;
		
	КонецЕсли;
	
	УстановитьОтборы();

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборы()

	ЕстьОтбор = ДействиеОтбор.Количество() > 0 
	            Или ИзмененияОтбор.Количество() > 0;
	
	Если ЕстьОтбор Тогда
		
		ЗаполнитьТаблицуОтбора();
		
		Элементы.СтраницыНастройкиЗагрузкиОтборБезОтбора.ТекущаяСтраница          = Элементы.СтраницаНастройкиЗагрузкиОтбор;
		Элементы.СтраницыНастройкиЗагрузкиГлоссарийОтборБезОтбора.ТекущаяСтраница = Элементы.СтраницаНастройкиЗагрузкиГлоссарийОтбор;
		
	Иначе
		
		Элементы.СтраницыНастройкиЗагрузкиОтборБезОтбора.ТекущаяСтраница          = Элементы.СтраницаНастройкиЗагрузкиБезОтбора;
		Элементы.СтраницыНастройкиЗагрузкиГлоссарийОтборБезОтбора.ТекущаяСтраница = Элементы.СтраницаНастройкиЗагрузкиГлоссарияБезОтбора;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуОтбора()

	НастройкиЗагрузкиОписанияПроцессовОтбор.Очистить();
	НастройкиЗагрузкиГлоссарийОтбор.Очистить();
	
	Для Каждого СтрокаДерева Из НастройкиЗагрузкиОписанияПроцессов.ПолучитьЭлементы() Цикл
		
		ДобавитьСтрокуДереваЕслиСоответствуетОтбору(СтрокаДерева, "НастройкиЗагрузкиОписанияПроцессовОтбор");
		
	КонецЦикла; 
	
	Для Каждого СтрокаДерева Из НастройкиЗагрузкиГлоссарий.ПолучитьЭлементы() Цикл
		
		ДобавитьСтрокуДереваЕслиСоответствуетОтбору(СтрокаДерева, "НастройкиЗагрузкиГлоссарийОтбор");
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуДереваЕслиСоответствуетОтбору(СтрокаДерева, ИмяТаблицы)
	
	СоответствуетОтбору = Истина;
	
	Если ИзмененияОтбор.Количество() > 0 Тогда
		
		Если ИзмененияОтбор.НайтиПоЗначению(СтрокаДерева.СтатусФайлов) = Неопределено Тогда
			СоответствуетОтбору = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДействиеОтбор.Количество() > 0 Тогда
		
		Если ДействиеОтбор.НайтиПоЗначению(СтрокаДерева.ЧтоДелать) = Неопределено Тогда
			СоответствуетОтбору = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СоответствуетОтбору Тогда
		
		НоваяСтрока = ЭтотОбъект[ИмяТаблицы].Добавить();
		ЗаполнитьСтрокуДереваОтбораПоСтрокеНастроек(СтрокаДерева, НоваяСтрока, ИмяТаблицы);
		
	КонецЕсли;
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		ДобавитьСтрокуДереваЕслиСоответствуетОтбору(ПодчиненнаяСтрока, ИмяТаблицы);
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтрокуДереваОтбораПоСтрокеНастроек(СтрокаДерева, НоваяСтрока, ИмяТаблицы)
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
	НоваяСтрока.ИдентификаторСтрокиДерева = СтрокаДерева.ПолучитьИдентификатор();
	
	Если СтрокаДерева.ТипСтрокиНастройкиЗагрузки = "Сценарий" Тогда
		
		НоваяСтрока.Представление = СтрШаблон(НСтр("ru = '%1 - %2'"), НСтр("ru = 'Рекв.'"), СтрокаДерева.Представление)
		
	Иначе
		
		РодительскаяСтрока = СтрокаДерева.ПолучитьРодителя();
		Если РодительскаяСтрока <> Неопределено Тогда
			НоваяСтрока.Представление = СтрШаблон(НСтр("ru = '%1 - %2'"), СтрокаДерева.КодЯзыка, РодительскаяСтрока.Представление); 
			
			Если ИмяТаблицы = "НастройкиЗагрузкиОписанияПроцессов" Тогда
				НоваяСтрока.Сценарий  = РодительскаяСтрока.Сценарий;
				НоваяСтрока.ПолныйКод = РодительскаяСтрока.ПолныйКод;
			ИначеЕсли ИмяТаблицы = "НастройкиЗагрузкиГлоссарий" Тогда
				НоваяСтрока.Глоссарий  = РодительскаяСтрока.Глоссарий;
				НоваяСтрока.Код        = РодительскаяСтрока.Код;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ИмяТабличнойЧастиНастройкиЗагрузкиПоТекущейСтранице()

	Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаНастройкиЗагрузкиГлоссарий Тогда
		
		Если Элементы.СтраницыНастройкиЗагрузкиГлоссарийОтборБезОтбора.ТекущаяСтраница = Элементы.СтраницаНастройкиЗагрузкиГлоссарияБезОтбора Тогда
			Возврат "НастройкиЗагрузкиГлоссарий";
		Иначе
			Возврат "НастройкиЗагрузкиГлоссарийОтбор";
		КонецЕсли;
		
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаНастройкиЗагрузки Тогда
		
		Если Элементы.СтраницыНастройкиЗагрузкиОтборБезОтбора.ТекущаяСтраница = Элементы.СтраницаНастройкиЗагрузкиБезОтбора Тогда
			Возврат "НастройкиЗагрузкиОписанияПроцессов";
		Иначе
			Возврат "НастройкиЗагрузкиОписанияПроцессовОтбор";
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПриДвойномКликеНаПредставленииСценария(ТекущиеДанные, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрываемыйСценарий = Неопределено;
	
	Если (ТекущиеДанные.ТипСтрокиНастройкиЗагрузки = "Сценарий"
		Или ТипЗнч(ТекущиеДанные) = Тип("ДанныеФормыЭлементКоллекции")) 
		И Не ТекущиеДанные.СтатусФайлов = ПредопределенноеЗначение("Перечисление.СтатусыСравненияФайловОписанийПроцессов.ОтсутствуетВБазе") Тогда
		
			ОткрываемыйСценарий = ТекущиеДанные.Сценарий;
		
		ИначеЕсли ТекущиеДанные.ТипСтрокиНастройкиЗагрузки = "Описание"
			И ТипЗнч(ТекущиеДанные) = Тип("ДанныеФормыЭлементДерева")Тогда
		
		РодительскаяСтрока = ТекущиеДанные.ПолучитьРодителя();
		
		Если РодительскаяСтрока <> Неопределено
			И Не РодительскаяСтрока.СтатусФайлов = ПредопределенноеЗначение("Перечисление.СтатусыСравненияФайловОписанийПроцессов.ОтсутствуетВБазе") Тогда
			
			ОткрываемыйСценарий = РодительскаяСтрока.Сценарий;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОткрываемыйСценарий) Тогда
		
		ПоказатьЗначение(, ОткрываемыйСценарий);
		
	КонецЕсли; 
		
КонецПроцедуры 

&НаКлиенте
Процедура ПриДвойномКликеНаПредставленииГлоссария(ТекущиеДанные, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрываемыйГлоссарий = Неопределено;
	
	Если ТекущиеДанные.ТипСтрокиНастройкиЗагрузки = "Сценарий"
		Или ТипЗнч(ТекущиеДанные) = Тип("ДанныеФормыЭлементКоллекции") Тогда
		
		ОткрываемыйГлоссарий = ТекущиеДанные.Глоссарий;
		
	ИначеЕсли ТекущиеДанные.ТипСтрокиНастройкиЗагрузки = "Описание" Тогда
		
		РодительскаяСтрока = ТекущиеДанные.ПолучитьРодителя();
		
		Если РодительскаяСтрока <> Неопределено Тогда
			
			ОткрываемыйГлоссарий = РодительскаяСтрока.Глоссарий;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОткрываемыйГлоссарий) Тогда
		
		ПоказатьЗначение(, ОткрываемыйГлоссарий);
		
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДанныеНастройкиЗагрузкиОписанияПроцессовПослеИзмененияОтбор(ДанныеСтрокиОтбор)
	
	СтрокаДерева = НастройкиЗагрузкиОписанияПроцессов.НайтиПоИдентификатору(ДанныеСтрокиОтбор.ИдентификаторСтрокиДерева);
	
	Если СтрокаДерева = Неопределено Тогда
		Возврат;
	Иначе
		СтрокаДерева.ЧтоДелать = ДанныеСтрокиОтбор.ЧтоДелать;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ИзменитьДанныеНастройкиЗагрузкиГлоссарийПослеИзмененияОтбор(ДанныеСтрокиОтбор)
	
	СтрокаДерева = НастройкиЗагрузкиГлоссарий.НайтиПоИдентификатору(ДанныеСтрокиОтбор.ИдентификаторСтрокиДерева);
	
	Если СтрокаДерева = Неопределено Тогда
		Возврат;
	Иначе
		СтрокаДерева.ЧтоДелать = ДанныеСтрокиОтбор.ЧтоДелать;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЧтоДелатьНастройкиЗагрузки

&НаКлиенте
Процедура УстановитьВариантДействия(ИмяКоманды)
	
	ИмяТаблицыФормы = ИмяТабличнойЧастиНастройкиЗагрузкиПоТекущейСтранице();
	
	НовоеДействие = ИмяДействияПоИмениКоманды(ИмяКоманды);
	
	Если НовоеДействие = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы[ИмяТаблицыФормы].ВыделенныеСтроки;
	
	СтрокКИзменению = 0;
	СтрокИзменено   = 0; 
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		
		СтрокКИзменению = СтрокКИзменению + 1;
		
		ДанныеСтроки = ЭтотОбъект[ИмяТаблицыФормы].НайтиПоИдентификатору(ВыделеннаяСтрока);
		Если ДанныеСтроки = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		Если ИзменениеВариантаДействияДоступно(ДанныеСтроки, НовоеДействие) Тогда
		
			ДанныеСтроки.ЧтоДелать = НовоеДействие;
			СтрокИзменено   = СтрокИзменено + 1;
			Если ИмяТаблицыФормы = "НастройкиЗагрузкиОписанияПроцессовОтбор" Тогда
				 ИзменитьДанныеНастройкиЗагрузкиОписанияПроцессовПослеИзмененияОтбор(ДанныеСтроки);
			ИначеЕсли ИмяТаблицыФормы = "НастройкиЗагрузкиГлоссарийОтбор" Тогда
				 ИзменитьДанныеНастройкиЗагрузкиГлоссарийПослеИзмененияОтбор(ДанныеСтроки);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла; 
	
	Если ИмяТаблицыФормы = "НастройкиЗагрузкиОписанияПроцессовОтбор" Тогда
		УстановитьОтборы();
	ИначеЕсли ИмяТаблицыФормы = "НастройкиЗагрузкиГлоссарийОтбор" Тогда
		ЗаполнитьТаблицуОтбора();
	КонецЕсли;
	
	ТребуетсяСравнениеОбъединение            = ЕстьЧтоОбъединять(ЭтотОбъект);
	ЕстьЧтоОбъединять                        = ТребуетсяСравнениеОбъединение;
	ПодготовкаКСравнениюОбъединениюВыполнена = Ложь;
	УстановитьНавигаторПомощника(ЭтотОбъект);
	
	ВывестиОповещениеИзмененоЧтоДелать(СтрокКИзменению, СтрокИзменено);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиОповещениеИзмененоЧтоДелать(СтрокКИзменению, СтрокИзменено)
	
	ЗаголовокОповещения = НСтр("ru = 'Изменение ""Что делать""'");
	
	Если  СтрокКИзменению = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Не выделено ни одной строки для которой может быть выполнена команда'");
		
	ИначеЕсли СтрокИзменено = 0 Тогда
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Строк к изменению - %1, ни для одной строки изменение не выполнено'"), СтрокКИзменению);
		
	Иначе
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Изменено строк - %1 из %2'"), СтрокИзменено, СтрокКИзменению);
		
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(ЗаголовокОповещения,, ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Функция ИмяДействияПоИмениКоманды(ИмяКоманды)
	
	НовоеДействие = Неопределено;
	
	Если ИмяКоманды = "Загружать" Тогда
		
		НовоеДействие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПриЗагрузкеОписанийПроцессов.Загружать");
		
	ИначеЕсли ИмяКоманды = "НеЗагружать"  Тогда
		
		НовоеДействие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПриЗагрузкеОписанийПроцессов.НеЗагружать");
		
	ИначеЕсли ИмяКоманды = "НеУдалять"  Тогда
		
		НовоеДействие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПриЗагрузкеОписанийПроцессов.НеУдалять");
		
	ИначеЕсли ИмяКоманды = "СравнитьИОбъединить"  Тогда
		
		НовоеДействие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПриЗагрузкеОписанийПроцессов.Объединить");
		
	ИначеЕсли ИмяКоманды = "Удалять"  Тогда
		
		НовоеДействие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПриЗагрузкеОписанийПроцессов.Удалить");
		
	КонецЕсли;

	Возврат НовоеДействие;
	
КонецФункции

&НаКлиенте
Функция ИзменениеВариантаДействияДоступно(ДанныеСтроки, НовоеДействие)
	
	Если НовоеДействие = ДанныеСтроки.ЧтоДелать Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НовоеДействие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПриЗагрузкеОписанийПроцессов.Загружать") Тогда
		
		Если ДанныеСтроки.СтатусФайлов <> ПредопределенноеЗначение("Перечисление.СтатусыСравненияФайловОписанийПроцессов.ОтсутствуетВЗагрузке") Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли НовоеДействие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПриЗагрузкеОписанийПроцессов.НеЗагружать") Тогда
		
		Если ДанныеСтроки.СтатусФайлов <> ПредопределенноеЗначение("Перечисление.СтатусыСравненияФайловОписанийПроцессов.ОтсутствуетВЗагрузке") Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли НовоеДействие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПриЗагрузкеОписанийПроцессов.НеУдалять") Тогда
		
		Если ДанныеСтроки.СтатусФайлов = ПредопределенноеЗначение("Перечисление.СтатусыСравненияФайловОписанийПроцессов.ОтсутствуетВЗагрузке") Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли НовоеДействие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПриЗагрузкеОписанийПроцессов.Объединить") Тогда
		
		Если ДанныеСтроки.СтатусФайлов = ПредопределенноеЗначение("Перечисление.СтатусыСравненияФайловОписанийПроцессов.ОтсутствуетВЗагрузке")
			Или ДанныеСтроки.СтатусФайлов = ПредопределенноеЗначение("Перечисление.СтатусыСравненияФайловОписанийПроцессов.ОтсутствуетВБазе") Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
		
	ИначеЕсли НовоеДействие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПриЗагрузкеОписанийПроцессов.Удалить") Тогда
		
		Если ДанныеСтроки.СтатусФайлов = ПредопределенноеЗначение("Перечисление.СтатусыСравненияФайловОписанийПроцессов.ОтсутствуетВЗагрузке") Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ЕстьТребуемыеВыполненияДействия() 
	
	Если НастройкиЗагрузкиГлоссарий.ПолучитьЭлементы().Количество() > 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЕстьТребуемыеВыполненияДействия = Ложь;
	ТребуемыеВыполненияДействия = МассивТребуемыеВыполненияДействия();
	
	Для Каждого СтрокаДерева Из НастройкиЗагрузкиОписанияПроцессов.ПолучитьЭлементы() Цикл
		
		ПроверитьЕстьЛиТребуемыеВыполненияДействияВСтрокеДерева(СтрокаДерева, ЕстьТребуемыеВыполненияДействия, ТребуемыеВыполненияДействия); 
		
		Если ЕстьТребуемыеВыполненияДействия Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьТребуемыеВыполненияДействия;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьЕстьЛиТребуемыеВыполненияДействияВСтрокеДерева(СтрокаДерева, ЕстьТребуемыеВыполненияДействия, ТребуемыеВыполненияДействия)
	
	Если ТребуемыеВыполненияДействия.Найти(СтрокаДерева.ЧтоДелать) <> Неопределено Тогда
		
		ЕстьТребуемыеВыполненияДействия = Истина;
		Возврат;
		
	КонецЕсли;
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		ПроверитьЕстьЛиТребуемыеВыполненияДействияВСтрокеДерева(ПодчиненнаяСтрока, ЕстьТребуемыеВыполненияДействия, ТребуемыеВыполненияДействия)
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция МассивТребуемыеВыполненияДействия()
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыДействийПриЗагрузкеОписанийПроцессов.Загружать"));
	МассивДействий.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыДействийПриЗагрузкеОписанийПроцессов.Объединить"));
	МассивДействий.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыДействийПриЗагрузкеОписанийПроцессов.Удалить"));
	
	Возврат МассивДействий;
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииКоллекцииНастройкаЗагрузки()
	
	ТребуетсяСравнениеОбъединение            = ЕстьЧтоОбъединять(ЭтотОбъект);
	ЕстьЧтоОбъединять                        = ТребуетсяСравнениеОбъединение;
	ПодготовкаКСравнениюОбъединениюВыполнена = Ложь;
	УстановитьНавигаторПомощника(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти 

#Область СравнениеОбъединение

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьЧтоОбъединять(Форма)
	
	ЕстьЧтоОбъединять = Ложь;
	
	ИдентификаторНайденнойСтроки = РезультатПоискаСтрокиДерева(Форма.НастройкиЗагрузкиОписанияПроцессов, 
	                                                           ПредопределенноеЗначение("Перечисление.ВариантыДействийПриЗагрузкеОписанийПроцессов.Объединить"),
	                                                           "ЧтоДелать",
	                                                            Истина);
	
	Если ИдентификаторНайденнойСтроки <> -1 Тогда
		
		ЕстьЧтоОбъединять = Истина;
		
	Иначе
		
		ИдентификаторНайденнойСтроки = РезультатПоискаСтрокиДерева(Форма.НастройкиЗагрузкиГлоссарий, 
		                                                           ПредопределенноеЗначение("Перечисление.ВариантыДействийПриЗагрузкеОписанийПроцессов.Объединить"),
		                                                          "ЧтоДелать",
		                                                            Истина);
		
		ЕстьЧтоОбъединять = ИдентификаторНайденнойСтроки <> -1;
		
	КонецЕсли;
	
	Если Не ЕстьЧтоОбъединять Тогда
		
		Форма.СравнениеОбъединение.Очистить();
		
	КонецЕсли;
		
	Возврат ЕстьЧтоОбъединять;
	
КонецФункции

&НаКлиенте
Функция КаталогВыгрузкиДляОбъединения()
	
	ИмяВременногоФайла = ФайлЗагрузки; 
	РазделительПути = ПолучитьРазделительПути();
	МассивСтрокКаталога = СтрРазделить(ИмяВременногоФайла, РазделительПути); 
	МассивСтрокКаталога.Удалить(МассивСтрокКаталога.Количество() - 1); 
	КаталогФайловДляОбъединения = СтрСоединить(МассивСтрокКаталога, РазделительПути);
	КаталогФайловДляОбъединения = КаталогФайловДляОбъединения + РазделительПути + "ForMerge" + РазделительПути;
	
	Если ДемонстрационныеСценарииКлиентСервер.КаталогНаДискеСуществует(КаталогФайловДляОбъединения) Тогда
		
		УдалитьФайлы(КаталогФайловДляОбъединения, "*.*");
		
	Иначе
		
		СоздатьКаталог(КаталогФайловДляОбъединения);
		
	КонецЕсли;
	
	Возврат КаталогФайловДляОбъединения;
	
КонецФункции

&НаКлиенте
Процедура НачатьПодготовкуКСравнениюИОбъединению()
	
	КаталогВыгрузкиДляОбъединения = КаталогВыгрузкиДляОбъединения();
	
	Если Не ДемонстрационныеСценарииКлиентСервер.КаталогНаДискеСуществует(КаталогВыгрузкиДляОбъединения) Тогда
		
		СоздатьКаталог(КаталогВыгрузкиДляОбъединения);
		
	Иначе
		
		УдалитьФайлы(КаталогВыгрузкиДляОбъединения, ПолучитьМаскуВсеФайлыКлиента());
		
	КонецЕсли;
	
	ПодготовленныеДанныеДляОбъединения = ПодготовленныеДанныеДляОбъединения();
	ВыгрузитьФайлыДляОбъединенияНаКлиенте(ПодготовленныеДанныеДляОбъединения);
	
	ТребуетсяСравнениеОбъединение                  = Ложь;
	ТребуетсяЧтениеРезультатовСравнениеОбъединение = Истина;
	ПодготовкаКСравнениюОбъединениюВыполнена       = Истина;
	УстановитьНавигаторПомощника(ЭтотОбъект);
	ПерейтиНаСтраницуСравнениеИОбъединение();

КонецПроцедуры

&НаСервере
Функция ПараметрыПодготовкиОбъединенияПоСтрокеДерева()
	
	ПараметрыПодготовки = Новый Структура;
	ПараметрыПодготовки.Вставить("ИмяРеквизитаСсылка", ""); 
	ПараметрыПодготовки.Вставить("ИмяРеквизитаКод",    "");
	
	Возврат ПараметрыПодготовки;
	
КонецФункции

&НаСервере
Функция ПодготовленныеДанныеДляОбъединения()
	
	РезультатПодготовки = Новый Соответствие;
	
	Для Каждого СтрокаДерева Из НастройкиЗагрузкиОписанияПроцессов.ПолучитьЭлементы() Цикл
		
		ПараметрыПодготовки = ПараметрыПодготовкиОбъединенияПоСтрокеДерева();
		ПараметрыПодготовки.ИмяРеквизитаСсылка = "Сценарий";
		ПараметрыПодготовки.ИмяРеквизитаКод    = "ПолныйКод";
		
		ПодготовитьДанныеОбъединенияПоСтрокеДерева(СтрокаДерева, ПараметрыПодготовки, РезультатПодготовки);
		
	КонецЦикла;
	
	Для Каждого СтрокаДерева Из НастройкиЗагрузкиГлоссарий.ПолучитьЭлементы() Цикл
		
		ПараметрыПодготовки = ПараметрыПодготовкиОбъединенияПоСтрокеДерева();
		ПараметрыПодготовки.ИмяРеквизитаСсылка = "Глоссарий";
		ПараметрыПодготовки.ИмяРеквизитаКод    = "Код";
		
		ПодготовитьДанныеОбъединенияПоСтрокеДерева(СтрокаДерева, ПараметрыПодготовки, РезультатПодготовки);
		
	КонецЦикла; 
	
	Возврат РезультатПодготовки;

КонецФункции

&НаСервере
Процедура ПодготовитьДанныеОбъединенияПоСтрокеДерева(СтрокаДерева, ПараметрыПодготовки, ПодготавливаемыеДанные)

	Если СтрокаДерева.ЧтоДелать = ПредопределенноеЗначение("Перечисление.ВариантыДействийПриЗагрузкеОписанийПроцессов.Объединить") Тогда
		
		НоваяСтрока = СравнениеОбъединение.Добавить();
		ЗаполнитьСтрокуДереваСравнениеОбъединениеПоСтрокеНастроек(СтрокаДерева, НоваяСтрока, ПараметрыПодготовки);
		ДобавитьДанныеФайловДляОбъединения(ПодготавливаемыеДанные, НоваяСтрока);
		
	КонецЕсли;
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		ПодготовитьДанныеОбъединенияПоСтрокеДерева(ПодчиненнаяСтрока, ПараметрыПодготовки, ПодготавливаемыеДанные);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуДереваСравнениеОбъединениеПоСтрокеНастроек(СтрокаДерева, НоваяСтрока, ПараметрыПодготовки)
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
	НоваяСтрока.ИдентификаторСтрокиДерева = СтрокаДерева.ПолучитьИдентификатор();
	
	Если СтрокаДерева.ТипСтрокиНастройкиЗагрузки = "Сценарий" Тогда
		
		НоваяСтрока.Сценарий                = СтрокаДерева[ПараметрыПодготовки.ИмяРеквизитаСсылка];
		НоваяСтрока.ПолныйКод               = СтрокаДерева[ПараметрыПодготовки.ИмяРеквизитаКод];
		НоваяСтрока.ПредставлениеТипаДанных = НСтр("ru = 'Рекв.'");
		
	Иначе
		
		РодительскаяСтрока = СтрокаДерева.ПолучитьРодителя();
		Если РодительскаяСтрока <> Неопределено Тогда
			НоваяСтрока.Представление           = РодительскаяСтрока.Представление;
			НоваяСтрока.Сценарий                = РодительскаяСтрока[ПараметрыПодготовки.ИмяРеквизитаСсылка];
			НоваяСтрока.ПолныйКод               = РодительскаяСтрока[ПараметрыПодготовки.ИмяРеквизитаКод];
			НоваяСтрока.ПредставлениеТипаДанных = СтрокаДерева.КодЯзыка;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьДанныеФайловДляОбъединения(ПодготавливаемыеДанные, НоваяСтрока)

	ДанныеФайловПоСтроке = Новый Структура;
	ДанныеФайловПоСтроке.Вставить("ДанныеФайла", Неопределено);
	ДанныеФайловПоСтроке.Вставить("ДанныеБазы",  Неопределено);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(); 
	РазделительПути = ПолучитьРазделительПути();
	МассивСтрокКаталога = СтрРазделить(ИмяВременногоФайла, РазделительПути); 
	МассивСтрокКаталога.Удалить(МассивСтрокКаталога.Количество() - 1); 
	КаталогПодготовкиФайловВыгрузки = СтрСоединить(МассивСтрокКаталога, РазделительПути);
	КаталогПодготовкиФайловВыгрузки = КаталогПодготовкиФайловВыгрузки + РазделительПути + "DesriptionsForMerge" + РазделительПути;
	
	Если ДемонстрационныеСценарииКлиентСервер.КаталогНаДискеСуществует(КаталогПодготовкиФайловВыгрузки) Тогда
		
		УдалитьФайлы(КаталогПодготовкиФайловВыгрузки, "*.*");
		
	Иначе
		
		СоздатьКаталог(КаталогПодготовкиФайловВыгрузки);
		
	КонецЕсли;
	
	ИмяВременногоФайла = КаталогПодготовкиФайловВыгрузки + "TempForMerge";
	
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла);
	ЗаписьТекста.Записать(НоваяСтрока.ДанныеБазы);
	ЗаписьТекста.Закрыть();
	
	ДанныеФайловПоСтроке.ДанныеБазы = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла), УникальныйИдентификатор); 
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла);
	ЗаписьТекста.Записать(НоваяСтрока.ДанныеФайла);
	ЗаписьТекста.Закрыть();
	
	ДанныеФайловПоСтроке.ДанныеФайла = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла), УникальныйИдентификатор);
	
	ПодготавливаемыеДанные.Вставить(НоваяСтрока.ПолучитьИдентификатор(), ДанныеФайловПоСтроке);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеСтрокиДляОбъединения(СтрокаДерева, ДанныеДляОбъединения)
	
	ПолныйКодСтрокой = СтрЗаменить(СтрокаДерева.ПолныйКод, ".", "_");
	
	Если СтрокаДерева.ТипСтрокиНастройкиЗагрузки = "Сценарий"  Тогда
		
		ИмяКаталога = "Requisites_" + ПолныйКодСтрокой;
		
	Иначе
		
		ИмяКаталога = СтрокаДерева.КодЯзыка + "_" + ПолныйКодСтрокой;
		
	КонецЕсли;
	
	СтрокаДерева.КаталогФайловВыгрузки = КаталогВыгрузкиДляОбъединения + ИмяКаталога + ПолучитьРазделительПути();
	
	Если Не ДемонстрационныеСценарииКлиентСервер.КаталогНаДискеСуществует(СтрокаДерева.КаталогФайловВыгрузки) Тогда
		
		СоздатьКаталог(СтрокаДерева.КаталогФайловВыгрузки);
		
	КонецЕсли;
	
	ВыгрузитьФайлыДляОбъединения(СтрокаДерева, ДанныеДляОбъединения); 
	
КонецПроцедуры  

&НаКлиенте
Процедура ВыгрузитьФайлыДляОбъединения(СтрокаДерева, ДанныеДляОбъединения)
	
	ПостфиксФайла = ?(СтрокаДерева.ТипСтрокиНастройкиЗагрузки = "Сценарий", ".json",".html");
	
	ИмяФайлаВБазе    = СтрокаДерева.КаталогФайловВыгрузки + "InBase" + ПостфиксФайла;
	ИмяФайлаЗагрузки = СтрокаДерева.КаталогФайловВыгрузки + "Upload" + ПостфиксФайла;
	
	ПараметрыСохраненияФайла              = ФайловаяСистемаКлиент.ПараметрыСохраненияФайла();
	ПараметрыСохраненияФайла.Интерактивно = Ложь;
	
	ОписаниеОповещенияПослеСохраненияФайлаОбъединения = Новый ОписаниеОповещения("ПослеСохраненияФайловДляОбъединения", ЭтотОбъект);
	
	СохраняемыеФайлы = Новый Массив;
	СохраняемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ИмяФайлаЗагрузки, ДанныеДляОбъединения.Значение.ДанныеФайла));
	СохраняемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ИмяФайлаВБазе, ДанныеДляОбъединения.Значение.ДанныеБазы));
	
	ФайловаяСистемаКлиент.СохранитьФайлы(ОписаниеОповещенияПослеСохраненияФайлаОбъединения, СохраняемыеФайлы, ПараметрыСохраненияФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФайловДляОбъединения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлыДляОбъединенияНаКлиенте(ПодготовленныеДанныеДляОбъединения)
	
	Для Каждого ДанныеДляОбъединения Из ПодготовленныеДанныеДляОбъединения Цикл
		
		СтрокаДерева = СравнениеОбъединение.НайтиПоИдентификатору(ДанныеДляОбъединения.Ключ);
		Если СтрокаДерева = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ВыгрузитьДанныеСтрокиДляОбъединения(СтрокаДерева, ДанныеДляОбъединения);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиОбъединенныеФайлыПоМаске()
	
	Для Каждого СтрокаТаблицы Из СравнениеОбъединение Цикл
		
		ДанныеФайлов = НайтиФайлы(СтрокаТаблицы.КаталогФайловВыгрузки, МаскаПутиОбъединенныхФайлов);
		
		Если ДанныеФайлов.Количество() = 1 Тогда
			
			СтрокаТаблицы.ФайлКЗагрузке     = ДанныеФайлов[0].ПолноеИмя;
			СтрокаТаблицы.ИмяФайлаКЗагрузке = ДанныеФайлов[0].Имя; 
			
		Иначе
			
			СтрокаТаблицы.ФайлКЗагрузке     = "";
			СтрокаТаблицы.ИмяФайлаКЗагрузке = "";
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОбработкиВыбораРезультирующегоФайла(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеФайлы = НайтиФайлы(ДополнительныеПараметры.ТекущиеДанные.ФайлКЗагрузке);
	
	Если НайденныеФайлы.Количество() = 1 Тогда
		ДополнительныеПараметры.ТекущиеДанные.ИмяФайлаКЗагрузке = НайденныеФайлы[0].Имя;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьРезультирующиеФайлы()
	
	ДвоичныеДанныеФайлов = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из СравнениеОбъединение Цикл
		
		ДанныеОбъединенногоФайла = Новый Структура;
		ДанныеОбъединенногоФайла.Вставить("ИдентификаторСтроки", СтрокаТаблицы.ПолучитьИдентификатор());
		ДанныеОбъединенногоФайла.Вставить("ДвоичныеДанные",      Новый ДвоичныеДанные(СтрокаТаблицы.ФайлКЗагрузке));
		
		ДвоичныеДанныеФайлов.Добавить(ДанныеОбъединенногоФайла);

	КонецЦикла;
	
	Если ДвоичныеДанныеФайлов.Количество() > 0 Тогда
		
		ПолучитьРезультирующиеФайлыНаСервере(ДвоичныеДанныеФайлов);
		
	КонецЕсли;
	
	ТребуетсяСравнениеОбъединение                  = Ложь;
	ТребуетсяЧтениеРезультатовСравнениеОбъединение = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьРезультирующиеФайлыНаСервере(ДвоичныеДанныеФайлов)
	
	ИмяВременногоФайла          = ПолучитьИмяВременногоФайла(); 
	РазделительПути             = ПолучитьРазделительПути();
	МассивСтрокКаталога         = СтрРазделить(ИмяВременногоФайла, РазделительПути); 
	МассивСтрокКаталога.Удалить(МассивСтрокКаталога.Количество() - 1); 
	КаталогФайловДляОбъединения = СтрСоединить(МассивСтрокКаталога, РазделительПути);
	КаталогФайловДляОбъединения = КаталогФайловДляОбъединения + РазделительПути + "ResultOfMerge" + РазделительПути;
	
	Для Каждого ДанныеФайла Из ДвоичныеДанныеФайлов Цикл
		
		СтрокаТаблицыОбъединения = СравнениеОбъединение.НайтиПоИдентификатору(ДанныеФайла.ИдентификаторСтроки);
			
		Если СтрокаТаблицыОбъединения = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		Если ТипЗнч(СтрокаТаблицыОбъединения.Сценарий) = Тип("СправочникСсылка.ДемонстрационныеСценарии") Тогда
			
			ИмяТаблицы = "НастройкиЗагрузкиОписанияПроцессов"
			
		ИначеЕсли ТипЗнч(СтрокаТаблицыОбъединения.Сценарий) = Тип("СправочникСсылка.Глоссарий") Тогда
			
			ИмяТаблицы = "НастройкиЗагрузкиГлоссарий" 
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
		СтрокаДереваНастроек = ЭтотОбъект[ИмяТаблицы].НайтиПоИдентификатору(СтрокаТаблицыОбъединения.ИдентификаторСтрокиДерева);
		СтрокаДереваНастроек.РезультатОбъединения = ПолучитьСтрокуИзДвоичныхДанных(ДанныеФайла.ДвоичныеДанные);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Загрузка

&НаКлиенте
Процедура НачатьЗагрузкуСценариев()
	
	ПерейтиНаСтраницуЗагружено();
	
	ДлительнаяОперация = ЗагрузкаДанныхВИнформационнуюБазуДлительнаяОперация(УникальныйИдентификатор);
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		ЗагрузкаОписанийПроцессовВИнформационнуюБазуЗавершение(ДлительнаяОперация, ДополнительныеПараметры);
		
	ИначеЕсли ДлительнаяОперация.Статус = "Выполняется" Тогда
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.Заголовок = НСтр("ru = 'Загрузка данных описаний процессов'");
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗагрузкаОписанийПроцессовВИнформационнуюБазуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Функция ЗагрузкаДанныхВИнформационнуюБазуДлительнаяОперация(УникальныйИдентификатор)
	
	ПараметрыФормирования = Новый Структура;
	ПараметрыФормирования.Вставить("Глоссарий",                      РеквизитФормыВЗначение("НастройкиЗагрузкиГлоссарий")); 
	ПараметрыФормирования.Вставить("ДеревоОписанийПроцессов",        РеквизитФормыВЗначение("НастройкиЗагрузкиОписанияПроцессов")); 
	ПараметрыФормирования.Вставить("Скриншоты",                      РеквизитФормыВЗначение("Скриншоты"));
	ПараметрыФормирования.Вставить("ПараметрыПостановкиНаПоддержку", ПараметрыПостановкиНаПоддержку());
	ПараметрыФормирования.Вставить("УникальныйИдентификатор",        УникальныйИдентификатор);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Загрузка данных описаний процессов в информационную базу'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне("Обработки.ЗагрузкаОписанийПроцессов.ЗагрузитьОписанияПроцессовВИнформационнуюБазу",
	                                                       ПараметрыФормирования, ПараметрыВыполнения);
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаСервере
Функция ПараметрыПостановкиНаПоддержку()
	
	ПараметрыПостановкиНаПоддержку = Новый Структура;
	ПараметрыПостановкиНаПоддержку.Вставить("ВариантПостановкиНаПоддержку", ВариантПостановкиНаПоддержку);
	ПараметрыПостановкиНаПоддержку.Вставить("ПоставщикЗагружаемойПоставки", ПоставщикЗагружаемойПоставки);
	ПараметрыПостановкиНаПоддержку.Вставить("ОписаниеЗагружаемойПоставки",  ОписаниеЗагружаемойПоставки);
	ПараметрыПостановкиНаПоддержку.Вставить("ЭтоЧастичнаяВыгрузка",         ЭтоЧастичнаяВыгрузка);
	
	Возврат ПараметрыПостановкиНаПоддержку;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузкаОписанийПроцессовВИнформационнуюБазуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		ОбработатьРезультатЗагрузкиОписанийПроцессов(Результат, ДополнительныеПараметры);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатЗагрузкиОписанийПроцессов(Результат, ДополнительныеПараметры)

	Если Не ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда 
		Возврат;
	КонецЕсли;
	
	РезультатЗагрузки = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	Если РезультатЗагрузки.Успешно Тогда
		
		ВывестиНаФормуИтогиЗагрузки(РезультатЗагрузки);
		ТребуетсяЗагрузка = Ложь;
		ЗагрузкаВыполнена = Истина;
		УстановитьНавигаторПомощника(ЭтотОбъект);
		ПерейтиНаСтраницуЗагружено();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СтрокаРезультатЗагрузкиСПереходомВСписок(КомандаНавигации, СтрокаЧто, Количество )
	
	 ЗаголовокЧасти = СтрШаблон("%1 - %2", СтрокаЧто, Количество);
	
	Возврат СтроковыеФункцииКлиент.ФорматированнаяСтрока("<a href=""%1"">%2</a>",
		                                                     КомандаНавигации,
		                                                     ЗаголовокЧасти);
	
КонецФункции

&НаКлиенте
Процедура ВывестиНаФормуИтогиЗагрузки(РезультатЗагрузки)
	
	РезультирующаяСтрока = Новый Массив; 
	НавигационнаяСсылкаСписокОписанияПроцессов = "e1cib/command/Справочник.ДемонстрационныеСценарии.Команда.ДемонстрационныеСценарии";
	НавигационнаяСсылкаСписокОписанияГлоссарий = "e1cib/command/Справочник.Глоссарий.Команда.Глоссарий";
	СтрокаОписаний                            = НСтр("ru = 'описаний процессов'");
	СтрокаГлоссарий                           = НСтр("ru = 'элементов глоссария'");

	НужнаТочка   = Ложь;
	НужнаЗапятая = Ложь;
	
	РезультирующаяСтрока.Добавить(НСтр("ru = 'Загрузка завершена.'") + " ");
	ДанныеЗагрузки = РезультатЗагрузки.ДанныеЗагрузки;	
	
	Если ДанныеЗагрузки.ЗагруженоГлоссарий > 0 
		Или ДанныеЗагрузки.ЗагруженоСценариев > 0 Тогда
		
		РезультирующаяСтрока.Добавить(СтрШаблон("%1: ", НСтр("ru = 'Загружено'")));
		
		Если ДанныеЗагрузки.ЗагруженоСценариев > 0 Тогда
			
			РезультирующаяСтрока.Добавить(
				СтрокаРезультатЗагрузкиСПереходомВСписок(НавигационнаяСсылкаСписокОписанияПроцессов, СтрокаОписаний, ДанныеЗагрузки.ЗагруженоСценариев));
			
			НужнаТочка   = Истина;
			НужнаЗапятая = Истина;
			
		КонецЕсли;
		
		Если ДанныеЗагрузки.ЗагруженоГлоссарий > 0 Тогда
			
			ДобавитьЗапятуюЕслиНеобходимо(РезультирующаяСтрока, НужнаЗапятая);
			
			РезультирующаяСтрока.Добавить(
				СтрокаРезультатЗагрузкиСПереходомВСписок(НавигационнаяСсылкаСписокОписанияГлоссарий, СтрокаГлоссарий, ДанныеЗагрузки.ЗагруженоГлоссарий));
			
			НужнаТочка   = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДобавитьТочкуЕслиНеобходимо(РезультирующаяСтрока, НужнаТочка); 
	
	Если ДанныеЗагрузки.ОбновленоГлоссарий > 0 
		Или ДанныеЗагрузки.ОбновленоСценариев > 0 Тогда
		
		РезультирующаяСтрока.Добавить(СтрШаблон("%1: ", НСтр("ru = 'Обновлено'")));
		
		Если РезультатЗагрузки.ДанныеЗагрузки.ОбновленоСценариев > 0 Тогда
			
			РезультирующаяСтрока.Добавить(
				СтрокаРезультатЗагрузкиСПереходомВСписок(НавигационнаяСсылкаСписокОписанияПроцессов, СтрокаОписаний, ДанныеЗагрузки.ОбновленоСценариев));
			
			НужнаТочка   = Истина;
			НужнаЗапятая = Истина;
			
		КонецЕсли;
		
		Если ДанныеЗагрузки.ОбновленоГлоссарий > 0 Тогда
			
			ДобавитьЗапятуюЕслиНеобходимо(РезультирующаяСтрока, НужнаЗапятая);
			
			РезультирующаяСтрока.Добавить(
				СтрокаРезультатЗагрузкиСПереходомВСписок(НавигационнаяСсылкаСписокОписанияГлоссарий, СтрокаГлоссарий, ДанныеЗагрузки.ОбновленоГлоссарий));
			
			НужнаТочка   = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДобавитьТочкуЕслиНеобходимо(РезультирующаяСтрока, НужнаТочка);
	
	Если ДанныеЗагрузки.УдаленоСценариев > 0 
		Или ДанныеЗагрузки.УдаленоГлоссарий > 0 Тогда
		
		РезультирующаяСтрока.Добавить(СтрШаблон("%1: ", НСтр("ru = 'Удалено'")));
		
		Если РезультатЗагрузки.ДанныеЗагрузки.УдаленоСценариев > 0 Тогда
			
			РезультирующаяСтрока.Добавить(
				СтрокаРезультатЗагрузкиСПереходомВСписок(НавигационнаяСсылкаСписокОписанияПроцессов, СтрокаОписаний, ДанныеЗагрузки.УдаленоСценариев));
			
			НужнаТочка   = Истина;
			НужнаЗапятая = Истина;
			
		КонецЕсли;
		
		Если ДанныеЗагрузки.УдаленоГлоссарий > 0 Тогда
			
			ДобавитьЗапятуюЕслиНеобходимо(РезультирующаяСтрока, НужнаЗапятая);
			
			РезультирующаяСтрока.Добавить(
				СтрокаРезультатЗагрузкиСПереходомВСписок(НавигационнаяСсылкаСписокОписанияГлоссарий, СтрокаГлоссарий, ДанныеЗагрузки.УдаленоГлоссарий));
			
			НужнаТочка   = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДобавитьТочкуЕслиНеобходимо(РезультирующаяСтрока, НужнаТочка);
	
	Если ДанныеЗагрузки.ЗагруженоГлоссарий = 0 
		И  ДанныеЗагрузки.ЗагруженоСценариев = 0
		И  ДанныеЗагрузки.ОбновленоГлоссарий = 0
		И  ДанныеЗагрузки.ОбновленоСценариев = 0
		И  ДанныеЗагрузки.УдаленоСценариев = 0
		И  ДанныеЗагрузки.УдаленоГлоссарий = 0 Тогда
		
		РезультирующаяСтрока.Добавить(НСтр("ru = 'Изменения в информационной базе выполнены не были.'"));
		
	КонецЕсли;
	
	РезультирующаяСтрока =  Новый ФорматированнаяСтрока(РезультирующаяСтрока);
	
	Элементы.ДекорацияРезультатыЗагрузки.Заголовок = РезультирующаяСтрока;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗапятуюЕслиНеобходимо(РезультирующаяСтрока, НужнаЗапятая)
	
	Если НужнаЗапятая Тогда
		РезультирующаяСтрока.Добавить(", ");
		НужнаЗапятая = Ложь;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ДобавитьТочкуЕслиНеобходимо(РезультирующаяСтрока, НужнаТочка)
	
	Если НужнаТочка Тогда
		РезультирующаяСтрока.Добавить(". ");
		НужнаТочка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти
