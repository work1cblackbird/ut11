#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Используется фоновым заданием загрузки данных описаний процессов в информационную базу.
// Параметры:
//  ПараметрыФормирования  - Структура - 
//  АдресХранилища         - Строка - адрес временного хранилища, в которое будет помещен результат загрузки
//
Процедура ЗагрузитьОписанияПроцессовВИнформационнуюБазу(ПараметрыФормирования, АдресХранилища) Экспорт
	
	РезультатЗагрузки = РезультатЗагрузкиДанныхВИнформационнуюБазу(ПараметрыФормирования);
	
	ПоместитьВоВременноеХранилище(РезультатЗагрузки, АдресХранилища);
	
КонецПроцедуры 

// Загружает данные описаний процессов и глоссария в информационную базу
//
// Параметры:
//  ПараметрыФормирования  - Структура - 
//
// Возвращаемое значение:
//   Структура  - содержит:
//     * Успешно               - Булево - признак того, что отчет сформирован успешно.
//     * СообщенияОбОшибках    - Массив Из Строка - сообщения об ошибках, в случае, если подготовка данных завершилась неудачей.
//     * ДанныеЗагрузки        - Структура -
//
Функция РезультатЗагрузкиДанныхВИнформационнуюБазу(ПараметрыФормирования) Экспорт
	
	РезультатЗагрузки = Новый Структура;
	РезультатЗагрузки.Вставить("Успешно",                Истина);
	РезультатЗагрузки.Вставить("СообщенияОбОшибках",     Новый Массив);
	РезультатЗагрузки.Вставить("ДанныеЗагрузки",         НовыйКоличественныеРезультатыЗагрузки());
	РезультатЗагрузки.Вставить("НайденныеСопоставления", НовыйНайденныеСопоставленияПриЗагрузке());
	
	ЗагрузитьДанныеВИнформационнуюБазу(РезультатЗагрузки, 
	                                   ПараметрыФормирования.ДеревоОписанийПроцессов, 
	                                   ПараметрыФормирования.Глоссарий, 
	                                   СоответствиеСкриншотыПоТаблице(ПараметрыФормирования.Скриншоты),
	                                   ПараметрыФормирования.ПараметрыПостановкиНаПоддержку);
	
	Возврат РезультатЗагрузки;
	
КонецФункции

// Используется фоновым заданием чтения архивного файла загрузки описаний процессов.
// Параметры:
//  ПараметрыФормирования  - Структура - 
//  АдресХранилища         - Строка - адрес временного хранилища, в которое будет помещен результат загрузки
//
Процедура ПрочитатьДанныеФайлаЗагрузки(ПараметрыФормирования, АдресХранилища) Экспорт
	
	РезультатЗагрузки = РезультатЧтенияАрхивногоФайлаЗагрузки(ПараметрыФормирования);
	
	ПоместитьВоВременноеХранилище(РезультатЗагрузки, АдресХранилища);
	
КонецПроцедуры 

// Загружает данные из файла загрузки в реквизиты форм обработки по загрузке
//
// Параметры:
//  ПараметрыФормирования  - Структура - 
//
// Возвращаемое значение:
//   Структура  - содержит:
//     * Успешно               - Булево - признак того, что отчет сформирован успешно.
//     * СообщенияОбОшибках    - Массив Из Строка - сообщения об ошибках, в случае, если подготовка данных завершилась неудачей.
//     * ДанныеЗагрузки        - Структура -
//
Функция РезультатЧтенияАрхивногоФайлаЗагрузки(ПараметрыФормирования) Экспорт
	
	РезультатЗагрузки = Новый Структура;
	РезультатЗагрузки.Вставить("Успешно",                Истина);
	РезультатЗагрузки.Вставить("СообщенияОбОшибках",     Новый Массив);
	РезультатЗагрузки.Вставить("ДанныеЗагрузки",         Новый Структура);
	
	ПрочитатьДанныеФайлаАрхиваЗагрузки(РезультатЗагрузки, 
	                                   ПараметрыФормирования);
	
	Возврат РезультатЗагрузки;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НовыйКоличественныеРезультатыЗагрузки()
	
	РезультатыЗагрузки = Новый Структура;
	РезультатыЗагрузки.Вставить("ЗагруженоСценариев", 0);
	РезультатыЗагрузки.Вставить("ОбновленоСценариев", 0);
	РезультатыЗагрузки.Вставить("УдаленоСценариев",   0);
	РезультатыЗагрузки.Вставить("ЗагруженоГлоссарий", 0);
	РезультатыЗагрузки.Вставить("ОбновленоГлоссарий", 0);
	РезультатыЗагрузки.Вставить("УдаленоГлоссарий",   0);
	
	Возврат РезультатыЗагрузки;
	
КонецФункции

Функция НовыйНайденныеСопоставленияПриЗагрузке()
	
	НайденныеСопоставления = Новый Структура; 
	
	НайденныеСопоставления.Вставить("ОбъектыМетаданных",  Новый Соответствие);
	НайденныеСопоставления.Вставить("ПрофилиГруппДоступа",Новый Соответствие);
	НайденныеСопоставления.Вставить("Сценарии",           Новый Соответствие); 
	
	Возврат НайденныеСопоставления;
	
КонецФункции

Процедура ЗагрузитьДанныеВИнформационнуюБазу(РезультатЗагрузки, ДеревоОписанийПроцессов, Глоссарий, Скриншоты, ПараметрыПостановкиНаПоддержку)
	
	Для Каждого СтрокаДерева Из ДеревоОписанийПроцессов.Строки Цикл
		
		ЗагрузитьОписанияПроцессовПоСтрокеДерева(СтрокаДерева, РезультатЗагрузки, Глоссарий, Скриншоты, ПараметрыПостановкиНаПоддержку);
		
	КонецЦикла;
	
	Для Каждого СтрокаДерева Из Глоссарий.Строки Цикл
		
		ЗагрузитьГлоссарийПоСтрокеДерева(СтрокаДерева, РезультатЗагрузки, Глоссарий, Скриншоты, ПараметрыПостановкиНаПоддержку);
		
	КонецЦикла;
	
	Если ПараметрыПостановкиНаПоддержку.ВариантПостановкиНаПоддержку = 0
		И Не ПараметрыПостановкиНаПоддержку.ЭтоЧастичнаяВыгрузка Тогда
		
		ВыполнитьПостановкуНаПоддержку(ДеревоОписанийПроцессов, Глоссарий, ПараметрыПостановкиНаПоддержку);
		
	КонецЕсли;
	
КонецПроцедуры

Функция СоответствиеСкриншотыПоТаблице(ТаблицаСкриншоты) 
	
	СоответствиеСкриншотыПоТаблице = Новый Соответствие;
	
	Для Каждого СтрокаТаблицы Из ТаблицаСкриншоты Цикл
		
		СоответствиеСкриншотыПоТаблице.Вставить(СтрокаТаблицы.ИдентификаторСкриншота, СтрокаТаблицы.ДвоичныеДанные);
		
	КонецЦикла;
	
	Возврат СоответствиеСкриншотыПоТаблице
	
КонецФункции

#Область ЗагрузкаГлоссария

#Область ЗагрузкаЭлементаСправочникаГлоссарий

Процедура ЗагрузитьГлоссарийПоСтрокеДерева(СтрокаДерева, РезультатЗагрузки, Глоссарий, Скриншоты, ПараметрыПостановкиНаПоддержку) 
	
	Если СтрокаДерева.ЧтоДелать = Перечисления.ВариантыДействийПриЗагрузкеОписанийПроцессов.Загружать
		Или СтрокаДерева.ЧтоДелать = Перечисления.ВариантыДействийПриЗагрузкеОписанийПроцессов.Объединить Тогда
		
		ЗагрузитьГлоссарий(СтрокаДерева, РезультатЗагрузки, Глоссарий, Скриншоты, ПараметрыПостановкиНаПоддержку);
		
	ИначеЕсли СтрокаДерева.ЧтоДелать = Перечисления.ВариантыДействийПриЗагрузкеОписанийПроцессов.Удалить Тогда
		
		УдалитьГлоссарий(СтрокаДерева, РезультатЗагрузки, Глоссарий, Скриншоты, ПараметрыПостановкиНаПоддержку);
		
	КонецЕсли;
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.Строки Цикл
		
		ЗагрузитьГлоссарийПоСтрокеДерева(ПодчиненнаяСтрока, РезультатЗагрузки, Глоссарий, Скриншоты, ПараметрыПостановкиНаПоддержку)
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура УдалитьГлоссарий(СтрокаДерева, РезультатЗагрузки, Глоссарий, Скриншоты, ПараметрыПостановкиНаПоддержку)
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(СтрокаДерева.Глоссарий.ПолноеИмя());
		ЭлементБлокировки.УстановитьЗначение("Ссылка", СтрокаДерева.Глоссарий);
		Блокировка.Заблокировать();
	
		ГлоссарийОбъект = СтрокаДерева.Глоссарий.ПолучитьОбъект();
		
		Если СтрокаДерева.ТипСтрокиНастройкиЗагрузки = "Сценарий" Тогда
			
			ГлоссарийОбъект.УстановитьПометкуУдаления(Истина);
			РезультатЗагрузки.ДанныеЗагрузки.УдаленоГлоссарий = РезультатЗагрузки.ДанныеЗагрузки.УдаленоГлоссарий + 1;
			СтрокаДерева.ОбработкаУчтена = Истина;
			
		ИначеЕсли СтрокаДерева.ТипСтрокиНастройкиЗагрузки = "Описание" Тогда 
			
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("КодЯзыка", СтрокаДерева.КодЯзыка);
			
			НайденныеСтроки = ГлоссарийОбъект.ОписанияГлоссария.НайтиСтроки(ПараметрыПоиска);
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				ГлоссарийОбъект.ОписанияГлоссария.Удалить(НайденнаяСтрока);
				
			КонецЦикла;
			
			ГлоссарийОбъект.Записать();
			
			РодительскаяСтрока = СтрокаДерева.Родитель;
			Если Не РодительскаяСтрока.ОбработкаУчтена Тогда
				РезультатЗагрузки.ДанныеЗагрузки.УдаленоГлоссарий = РезультатЗагрузки.ДанныеЗагрузки.УдаленоГлоссарий + 1;
				РодительскаяСтрока.ОбработкаУчтена = Истина;
			КонецЕсли;
			
		КонецЕсли;
	
	Исключение
		
		ВызватьИсключение ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗагрузитьГлоссарий(СтрокаДерева, РезультатЗагрузки, Глоссарий, Скриншоты, ПараметрыПостановкиНаПоддержку)
	
	Если СтрокаДерева.ТипСтрокиНастройкиЗагрузки = "Сценарий" Тогда
		
		ЗагрузитьЭлементСправочникаГлоссарий(СтрокаДерева, РезультатЗагрузки, ПараметрыПостановкиНаПоддержку); 
		
	ИначеЕсли СтрокаДерева.ТипСтрокиНастройкиЗагрузки = "Описание" Тогда 
		
		ЗагрузитьОписаниеГлоссарияНаЯзыке(СтрокаДерева, РезультатЗагрузки, Скриншоты, ПараметрыПостановкиНаПоддержку);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьОписаниеГлоссарияНаЯзыке(СтрокаДерева, РезультатЗагрузки, Скриншоты, ПараметрыПостановкиНаПоддержку)
	
	Если СтрокаДерева.ЧтоДелать = Перечисления.ВариантыДействийПриЗагрузкеОписанийПроцессов.Объединить Тогда
		ЗагружаемыеДанные = СтрокаДерева.РезультатОбъединения;
	Иначе
		ЗагружаемыеДанные = СтрокаДерева.ДанныеФайла;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(СтрокаДерева.Родитель.Глоссарий.Метаданные().ПолноеИмя());
		ЭлементБлокировки.УстановитьЗначение("Ссылка",  СтрокаДерева.Родитель.Глоссарий);
		Блокировка.Заблокировать();
	
		ГлоссарийОбъект = СтрокаДерева.Родитель.Глоссарий.ПолучитьОбъект(); // СправочникОбъект.Глоссарий
		
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("КодЯзыка", СтрокаДерева.КодЯзыка);
		
		НайденныеСтроки = ГлоссарийОбъект.ОписанияГлоссария.НайтиСтроки(ПараметрыПоиска); 
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			ЭтоОбновление = Истина;
			СтрокаСОписанием = НайденныеСтроки[0];
			
		Иначе
			
			ЭтоОбновление     = Ложь;
			СтрокаСОписанием  = ГлоссарийОбъект.ОписанияГлоссария.Добавить();
			СтрокаСОписанием.КодЯзыка = СтрокаДерева.КодЯзыка;
			
		КонецЕсли;
		
		ФорматированныйДокументОписания = ДемонстрационныеСценарииКлиентСервер.ФорматированныйДокументИзДанныхHTML(ЗагружаемыеДанные, Новый Структура);
		СтрокаСОписанием.Описание       = Новый ХранилищеЗначения(ФорматированныйДокументОписания);
		
		Если ПараметрыПостановкиНаПоддержку.ВариантПостановкиНаПоддержку = 0
			И Не ПараметрыПостановкиНаПоддержку.ЭтоЧастичнаяВыгрузка Тогда
			
			СтрокаСОписанием.ХэшДанныхПоставщика = СтрокаДерева.ХэшДанныеФайла;
			
		КонецЕсли;
		
		ГлоссарийОбъект.Записать();
		
		РодительскаяСтрока = СтрокаДерева.Родитель;
		
		Если Не РодительскаяСтрока.ОбработкаУчтена Тогда
		
			Если ЭтоОбновление Тогда
				РезультатЗагрузки.ДанныеЗагрузки.ОбновленоГлоссарий = РезультатЗагрузки.ДанныеЗагрузки.ОбновленоГлоссарий + 1;
			Иначе
				РезультатЗагрузки.ДанныеЗагрузки.ЗагруженоГлоссарий = РезультатЗагрузки.ДанныеЗагрузки.ЗагруженоГлоссарий + 1;
			КонецЕсли;
			
			РодительскаяСтрока.ОбработкаУчтена = Истина;
		
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		
		ОтменитьТранзакцию();
		
		ВызватьИсключение ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗагрузитьЭлементСправочникаГлоссарий(СтрокаДерева, РезультатЗагрузки, ПараметрыПостановкиНаПоддержку) 
	
	ТекстОшибки = НСтр("ru = 'Ошибка при чтении файла реквизитов описания сценария'");
	
	Если СтрокаДерева.ЧтоДелать = Перечисления.ВариантыДействийПриЗагрузкеОписанийПроцессов.Объединить Тогда
		ЗагружаемыеДанные = СтрокаДерева.РезультатОбъединения;
	Иначе
		ЗагружаемыеДанные = СтрокаДерева.ДанныеФайла;
	КонецЕсли;
	
	РезультатЧтения = ДемонстрационныеСценарии.РезультатЧтенияСтрокиJSON(ЗагружаемыеДанные, ТекстОшибки);
	
	Если Не РезультатЧтения.Успешно Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеJSON    = РезультатЧтения.Данные;
	ЭтоОбновление = Ложь;
	
	НачатьТранзакцию();
	
	Попытка
	
		Если ЗначениеЗаполнено(СтрокаДерева.Глоссарий)
			И СтрокаДерева.СсылкаСуществует Тогда
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(СтрокаДерева.Глоссарий.Метаданные().ПолноеИмя());
			ЭлементБлокировки.УстановитьЗначение("Ссылка", СтрокаДерева.Глоссарий);
			Блокировка.Заблокировать();
			
			ГлоссарийОбъект = СтрокаДерева.Глоссарий.ПолучитьОбъект();
			ЭтоОбновление   = Истина;
			
		Иначе
			
			Попытка
				
				ИдентификаторСсылки = Новый УникальныйИдентификатор(ДанныеJSON.UUID);
				
			Исключение
				
				Возврат;
				
			КонецПопытки;
			
			ГлоссарийОбъект = Справочники.Глоссарий.СоздатьЭлемент();
			
			ГлоссарийОбъект.УстановитьСсылкуНового(Справочники.Глоссарий.ПолучитьСсылку(ИдентификаторСсылки));
			
		КонецЕсли;
		
		ЗаполнитьСправочникОбъектГлоссарийПоДаннымJSON(ГлоссарийОбъект, ДанныеJSON, РезультатЗагрузки);
		
		Если ПараметрыПостановкиНаПоддержку.ВариантПостановкиНаПоддержку = 0
			И Не ПараметрыПостановкиНаПоддержку.ЭтоЧастичнаяВыгрузка Тогда
			
			ГлоссарийОбъект.ХэшДанныхПоставщика = СтрокаДерева.ХэшДанныеФайла;
			
		КонецЕсли;
		
		ГлоссарийОбъект.Записать();
		
		Если ЭтоОбновление Тогда
			РезультатЗагрузки.ДанныеЗагрузки.ОбновленоГлоссарий = РезультатЗагрузки.ДанныеЗагрузки.ОбновленоГлоссарий + 1;
		Иначе
			РезультатЗагрузки.ДанныеЗагрузки.ЗагруженоГлоссарий = РезультатЗагрузки.ДанныеЗагрузки.ЗагруженоГлоссарий + 1;
		КонецЕсли;
		
		СтрокаДерева.ОбработкаУчтена = Истина;
		
		ЗафиксироватьТранзакцию();
	
	Исключение 
		
		ОтменитьТранзакцию();
		
		ВызватьИсключение ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	
	КонецПопытки;
	
	
КонецПроцедуры 

Процедура ЗаполнитьСправочникОбъектГлоссарийПоДаннымJSON(ГлоссарийОбъект, ДанныеJSON, РезультатЗагрузки) 
	
	ГлоссарийОбъект.Наименование      = ДанныеJSON.Name;
	ГлоссарийОбъект.НаименованиеЯзык1 = ДанныеJSON.NameLanguage1;
	ГлоссарийОбъект.НаименованиеЯзык2 = ДанныеJSON.NameLanguage2;
	ГлоссарийОбъект.Код               = ДанныеJSON.Code;
	
	Если ГлоссарийОбъект.ПометкаУдаления <> ДанныеJSON.DeletionMark Тогда
		ГлоссарийОбъект.УстановитьПометкуУдаления(ДанныеJSON.DeletionMark)
	КонецЕсли;
	
	ДобавитьСтрокуТабличнойЧастиПоИдентификатору(ГлоссарийОбъект, 
	                                             "ОбъектыКонфигурации", 
	                                             "ОбъектКонфигурации", 
	                                             ДанныеJSON.ObjectsOfMetadata, 
	                                             "ИдентификаторыОбъектовМетаданных", 
	                                             РезультатЗагрузки.НайденныеСопоставления.ОбъектыМетаданных); 
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ЗагрузкаОписанийПроцессов

#Область ЗагрузкаЭлементаСправочникаОписаниеПроцесса

Процедура ЗагрузитьОписанияПроцессовПоСтрокеДерева(СтрокаДерева, РезультатЗагрузки, Глоссарий, Скриншоты, ПараметрыПостановкиНаПоддержку) 
	
	
	Если СтрокаДерева.ЧтоДелать = Перечисления.ВариантыДействийПриЗагрузкеОписанийПроцессов.Загружать
		Или СтрокаДерева.ЧтоДелать = Перечисления.ВариантыДействийПриЗагрузкеОписанийПроцессов.Объединить Тогда
		
		ЗагрузитьОписаниеПроцесса(СтрокаДерева, РезультатЗагрузки, Глоссарий, Скриншоты, ПараметрыПостановкиНаПоддержку);
		
	ИначеЕсли СтрокаДерева.ЧтоДелать = Перечисления.ВариантыДействийПриЗагрузкеОписанийПроцессов.Удалить Тогда
		
		УдалитьОписаниеПроцесса(СтрокаДерева, РезультатЗагрузки, Глоссарий, Скриншоты, ПараметрыПостановкиНаПоддержку);
		
	КонецЕсли;
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.Строки Цикл
		
		ЗагрузитьОписанияПроцессовПоСтрокеДерева(ПодчиненнаяСтрока, РезультатЗагрузки, Глоссарий, Скриншоты, ПараметрыПостановкиНаПоддержку);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьОписаниеПроцесса(СтрокаДерева, РезультатЗагрузки, Глоссарий, Скриншоты, ПараметрыПостановкиНаПоддержку)
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(СтрокаДерева.Сценарий.Метаданные().ПолноеИмя());
		ЭлементБлокировки.УстановитьЗначение("Ссылка", СтрокаДерева.Сценарий);
		Блокировка.Заблокировать();
	
		СценарийОбъект = СтрокаДерева.Сценарий.ПолучитьОбъект();
	
		Если СтрокаДерева.ТипСтрокиНастройкиЗагрузки = "Сценарий" Тогда
			
			СценарийОбъект.УстановитьПометкуУдаления(Истина);
			РезультатЗагрузки.ДанныеЗагрузки.УдаленоСценариев = РезультатЗагрузки.ДанныеЗагрузки.УдаленоСценариев + 1;
			СтрокаДерева.ОбработкаУчтена = Истина;
			
		ИначеЕсли СтрокаДерева.ТипСтрокиНастройкиЗагрузки = "Описание" Тогда 
			
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("КодЯзыка", СтрокаДерева.КодЯзыка);
			
			НайденныеСтроки = СценарийОбъект.ОписанияСценария.НайтиСтроки(ПараметрыПоиска);
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				Если ЗначениеЗаполнено(СтрокаДерева.ПрисоединенныйФайл) Тогда
					ПрисоединенныйФайлОбъект = СтрокаДерева.ПрисоединенныйФайл.ПолучитьОбъект();
					ПрисоединенныйФайлОбъект.УстановитьПометкуУдаления(Истина);
				КонецЕсли;
				
				СценарийОбъект.ОписанияСценария.Удалить(НайденнаяСтрока);
				
			КонецЦикла;
			
			СценарийОбъект.Записать();
			
			РодительскаяСтрока = СтрокаДерева.Родитель;
			Если Не РодительскаяСтрока.ОбработкаУчтена Тогда
				РезультатЗагрузки.ДанныеЗагрузки.УдаленоСценариев = РезультатЗагрузки.ДанныеЗагрузки.УдаленоСценариев + 1;
				РодительскаяСтрока.ОбработкаУчтена = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		
		ОтменитьТранзакцию();
		
		ВызватьИсключение ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
		
КонецПроцедуры

Процедура ЗагрузитьОписаниеПроцесса(СтрокаДерева, РезультатЗагрузки, Глоссарий, Скриншоты, ПараметрыПостановкиНаПоддержку)
	
	Если СтрокаДерева.ТипСтрокиНастройкиЗагрузки = "Сценарий" Тогда
		
		ЗагрузитьЭлементСправочникаОписаниеПроцесса(СтрокаДерева, РезультатЗагрузки, ПараметрыПостановкиНаПоддержку); 
		
	ИначеЕсли СтрокаДерева.ТипСтрокиНастройкиЗагрузки = "Описание" Тогда 
		
		ЗагрузитьОписаниеПроцессаНаЯзыке(СтрокаДерева, РезультатЗагрузки, Скриншоты, ПараметрыПостановкиНаПоддержку);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьЭлементСправочникаОписаниеПроцесса (СтрокаДерева, РезультатЗагрузки, ПараметрыПостановкиНаПоддержку)
	
	ТекстОшибки = НСтр("ru = 'Ошибка при чтении файла реквизитов описания сценария'");
	
	Если СтрокаДерева.ЧтоДелать = Перечисления.ВариантыДействийПриЗагрузкеОписанийПроцессов.Объединить Тогда
		ЗагружаемыеДанные = СтрокаДерева.РезультатОбъединения;
	Иначе
		ЗагружаемыеДанные = СтрокаДерева.ДанныеФайла;
	КонецЕсли;
	
	РезультатЧтения = ДемонстрационныеСценарии.РезультатЧтенияСтрокиJSON(ЗагружаемыеДанные, ТекстОшибки);
	
	Если Не РезультатЧтения.Успешно Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеJSON    = РезультатЧтения.Данные;
	ЭтоОбновление = Ложь;
	
	НачатьТранзакцию();
	
	Попытка
		
		Если ЗначениеЗаполнено(СтрокаДерева.Сценарий)
			И СтрокаДерева.СсылкаСуществует Тогда
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(СтрокаДерева.Сценарий.Метаданные().ПолноеИмя());
			ЭлементБлокировки.УстановитьЗначение("Ссылка", СтрокаДерева.Сценарий);
			Блокировка.Заблокировать();
			
			СценарийОбъект = СтрокаДерева.Сценарий.ПолучитьОбъект();
			ЭтоОбновление  = Истина;
			
		Иначе
				
			Попытка
				
				ИдентификаторСсылки = Новый УникальныйИдентификатор(ДанныеJSON.UUID);
				
			Исключение
				
				Возврат;
				
			КонецПопытки;
			
			Если ДанныеJSON.IsGroup Тогда
				
				СценарийОбъект = Справочники.ДемонстрационныеСценарии.СоздатьГруппу()
				
			Иначе
				
				СценарийОбъект = Справочники.ДемонстрационныеСценарии.СоздатьЭлемент();
				
			КонецЕсли; 
			
			СценарийОбъект.УстановитьСсылкуНового(Справочники.ДемонстрационныеСценарии.ПолучитьСсылку(ИдентификаторСсылки));
			
		КонецЕсли;
		
		ЗаполнитьСправочникОбъектОписаниеПроцессовПоДаннымJSON(СценарийОбъект, ДанныеJSON, РезультатЗагрузки);
		
		Если ПараметрыПостановкиНаПоддержку.ВариантПостановкиНаПоддержку = 0
			И Не ПараметрыПостановкиНаПоддержку.ЭтоЧастичнаяВыгрузка Тогда
			
			СценарийОбъект.ХэшДанныхПоставщика = СтрокаДерева.ХэшДанныеФайла;
			
		КонецЕсли;
		
		СценарийОбъект.ДополнительныеСвойства.Вставить("НеПересчитыватьПолныйКодСправочника", Истина);
		СценарийОбъект.Записать(); 
		
		Если СценарийОбъект.ПометкаУдаления <> ДанныеJSON.DeletionMark Тогда
			СценарийОбъект.УстановитьПометкуУдаления(ДанныеJSON.DeletionMark);
		КонецЕсли;
		
		Если ЭтоОбновление Тогда
			РезультатЗагрузки.ДанныеЗагрузки.ОбновленоСценариев = РезультатЗагрузки.ДанныеЗагрузки.ОбновленоСценариев + 1;
		Иначе
			РезультатЗагрузки.ДанныеЗагрузки.ЗагруженоСценариев = РезультатЗагрузки.ДанныеЗагрузки.ЗагруженоСценариев + 1;
		КонецЕсли;
		
		СтрокаДерева.ОбработкаУчтена = Истина;
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		
		ОтменитьТранзакцию();
		
		ВызватьИсключение ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьСправочникОбъектОписаниеПроцессовПоДаннымJSON(СценарийОбъект, ДанныеJSON, РезультатЗагрузки);
	
	СценарийОбъект.Наименование      = ДанныеJSON.Name;
	СценарийОбъект.НаименованиеЯзык1 = ДанныеJSON.NameLanguage1;
	СценарийОбъект.НаименованиеЯзык2 = ДанныеJSON.NameLanguage2;

	СценарийОбъект.Код          = ДанныеJSON.Code;
	СценарийОбъект.Комментарий  = ДанныеJSON.Comment;
	СценарийОбъект.ПолныйКод    = ДанныеJSON.FullCode;
	СценарийОбъект.Статус       = Перечисления.СтатусыДемонстрационныхСценариев.Получить(ДанныеJSON.Status);
	СценарийОбъект.Родитель     = РодительЭлементаСправочника(СценарийОбъект, ДанныеJSON.Parent, "ДемонстрационныеСценарии");
	
	Если ДанныеJSON.IsGroup 
		И СценарийОбъект.ЭтоГруппа Тогда
		
		СценарийОбъект.ТипГруппы = Перечисления.ТипыГруппДемонстрационныхСценариев.Получить(ДанныеJSON.KindOfGroup); 
		
	КонецЕсли;
	
	Если Не СценарийОбъект.ЭтоГруппа Тогда
	
		ДобавитьСтрокуТабличнойЧастиПоИдентификатору(СценарийОбъект, 
		                                             "ПрофилиГруппДоступа", 
		                                             "Профиль", 
		                                             ДанныеJSON.AccessGroupProfiles, 
		                                             "ПрофилиГруппДоступа", 
		                                             РезультатЗагрузки.НайденныеСопоставления.ПрофилиГруппДоступа);
		
		ДобавитьСтрокуТабличнойЧастиПоИдентификатору(СценарийОбъект, 
		                                             "ОбъектыКонфигурации", 
		                                             "ОбъектКонфигурации", 
		                                             ДанныеJSON.ObjectsOfMetadata, 
		                                             "ИдентификаторыОбъектовМетаданных", 
		                                             РезультатЗагрузки.НайденныеСопоставления.ОбъектыМетаданных); 
	
	КонецЕсли;
	
КонецПроцедуры 

Процедура ДобавитьСтрокуТабличнойЧастиПоИдентификатору(СценарийОбъект, ИмяТабличнойЧасти, ИмяРеквизита, МассивИдентификаторов, ИмяСправочника, СоответствиеНайденного)
	
	СценарийОбъект[ИмяТабличнойЧасти].Очистить();
	
	Для Каждого ИдентификаторСправочника Из МассивИдентификаторов Цикл
		
		СсылкаНаСправочник = СоответствиеНайденного.Получить(ИдентификаторСправочника);
		
		Если СсылкаНаСправочник = Неопределено Тогда
		
			Результат = РезультатПолученияСсылкиНаСправочникПоУникальномуИдентификатору(ИдентификаторСправочника, ИмяСправочника);
			Если Результат.Успешно Тогда
				
				СсылкаНаСправочник = Результат.Ссылка;
				
			Иначе
				
				СсылкаНаСправочник = "";
				
			КонецЕсли;
			
			СоответствиеНайденного.Вставить(ИдентификаторСправочника, СсылкаНаСправочник);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СсылкаНаСправочник) Тогда
			
			НоваяСтрока = СценарийОбъект[ИмяТабличнойЧасти].Добавить();
			НоваяСтрока[ИмяРеквизита] = СсылкаНаСправочник;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры 

Функция РодительЭлементаСправочника(СправочникОбъект, ИдентификаторСтрокой, ИмяСправочника)
	
	РезультатПолученияСсылки = РезультатПолученияСсылкиНаСправочникПоУникальномуИдентификатору(ИдентификаторСтрокой, ИмяСправочника);
	 
	Если РезультатПолученияСсылки.Успешно Тогда
		
		Возврат РезультатПолученияСсылки.Ссылка;
		
	Иначе
		
		Возврат Справочники[ИмяСправочника].ПустаяСсылка();
		
	КонецЕсли;
	
	
КонецФункции

Функция РезультатПолученияСсылкиНаСправочникПоУникальномуИдентификатору(ИдентификаторСтрокой, ИмяСправочника)
	
	Результат = Новый Структура;
	Результат.Вставить("Успешно",           Ложь);
	Результат.Вставить("СообщениеОбОшибке", "");
	Результат.Вставить("Ссылка",            Неопределено); 
	
	Если ПустаяСтрока(ИдентификаторСтрокой) Тогда
		
		Результат.СообщениеОбОшибке = НСтр("ru = 'Ссылка на элемент справочника ""%1"" по  идентификатору """"не найдена'");
		Возврат Результат;
		
	КонецЕсли;
	
	Попытка
		
		ИдентификаторОбъекта = Новый УникальныйИдентификатор(ИдентификаторСтрокой);
		
	Исключение
		
		Результат.СообщениеОбОшибке = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Результат;
		
	КонецПопытки;
	
	СсылкаНаСправочник = Справочники[ИмяСправочника].ПолучитьСсылку(ИдентификаторОбъекта);
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаСправочник, "Ссылка") = Неопределено Тогда
		
		Результат.СообщениеОбОшибке = НСтр("ru = 'Ссылка на элемент справочника ""%1"" по  идентификатору ""%2""не найдена'");
		
	Иначе
		
		Результат.Успешно = Истина;
		Результат.Ссылка  = СсылкаНаСправочник;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти 

#Область ЗагрузкаОписанияПроцессаНаЯзыке

Процедура ЗагрузитьОписаниеПроцессаНаЯзыке(СтрокаДерева, РезультатЗагрузки, Скриншоты, ПараметрыПостановкиНаПоддержку)
	
	Если СтрокаДерева.ЧтоДелать = Перечисления.ВариантыДействийПриЗагрузкеОписанийПроцессов.Объединить Тогда
		ЗагружаемыеДанные = СтрокаДерева.РезультатОбъединения;
	Иначе
		ЗагружаемыеДанные = СтрокаДерева.ДанныеФайла;
	КонецЕсли;
	
	РодительскаяСтрока = СтрокаДерева.Родитель;
	
	Если ЗначениеЗаполнено(СтрокаДерева.ПрисоединенныйФайл) Тогда
		
		РезультатОбновленияФайлаОписания(СтрокаДерева.ПрисоединенныйФайл, ЗагружаемыеДанные);
		Если Не РодительскаяСтрока.ОбработкаУчтена Тогда
			РезультатЗагрузки.ДанныеЗагрузки.ОбновленоСценариев = РезультатЗагрузки.ДанныеЗагрузки.ОбновленоСценариев + 1;
			РодительскаяСтрока.ОбработкаУчтена = Истина;
		КонецЕсли;
		
		Если ПараметрыПостановкиНаПоддержку.ВариантПостановкиНаПоддержку = 0
				И Не ПараметрыПостановкиНаПоддержку.ЭтоЧастичнаяВыгрузка Тогда
				
			НачатьТранзакцию();
				
			Попытка
		
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить(РодительскаяСтрока.Сценарий.Метаданные().ПолноеИмя());
				ЭлементБлокировки.УстановитьЗначение("Ссылка", РодительскаяСтрока.Сценарий);
				Блокировка.Заблокировать();
				
				СценарийОбъект = РодительскаяСтрока.Сценарий.ПолучитьОбъект();
				
				ДобавляемыеСкриншотыОписания = ДобавляемыеСкриншотыОписания(СтрокаДерева.ДанныеФайла, Скриншоты);
				ДобавитьФайлыСкриншотовДляОписания(СценарийОбъект, ДобавляемыеСкриншотыОписания);
				
				ПараметрыПоиска = Новый Структура;
				ПараметрыПоиска.Вставить("ПрисоединенныйФайл", СтрокаДерева.ПрисоединенныйФайл); 
				
				НайденныеСтроки = СценарийОбъект.ОписанияСценария.НайтиСтроки(ПараметрыПоиска);
				Если НайденныеСтроки.Количество() > 1 Тогда
					НайденныеСтроки[0].ХэшДанныхПоставщика = СтрокаДерева.ХэшДанныеФайла;
					СценарийОбъект.Записать();
				КонецЕсли;
				
				ЗафиксироватьТранзакцию();
			
			Исключение
				
				ОтменитьТранзакцию();
				
				ВызватьИсключение ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
			КонецПопытки;
		
		КонецЕсли;
		
	Иначе
		
		РезультатСоздания = РезультатСозданияФайлаОписания(РодительскаяСтрока.Сценарий, РодительскаяСтрока.ПолныйКод, СтрокаДерева.КодЯзыка, СтрокаДерева.ДанныеФайла);
		
		Если РезультатСоздания.Успешно Тогда
			
			СтрокаДерева.ПрисоединенныйФайл = РезультатСоздания.ПрисоединенныйФайл;
			
			НачатьТранзакцию();
			
			Попытка
		
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить(РодительскаяСтрока.Сценарий.Метаданные().ПолноеИмя());
				ЭлементБлокировки.УстановитьЗначение("Ссылка", РодительскаяСтрока.Сценарий);
				Блокировка.Заблокировать();
			
				СценарийОбъект = РодительскаяСтрока.Сценарий.ПолучитьОбъект();
				Если СценарийОбъект.ПометкаУдаления Тогда
					СценарийОбъект.УстановитьПометкуУдаления(Ложь);
				КонецЕсли;
				НоваяСтрокаОписания  = СценарийОбъект.ОписанияСценария.Добавить();
				НоваяСтрокаОписания.КодЯзыка           = СтрокаДерева.КодЯзыка;
				НоваяСтрокаОписания.ПрисоединенныйФайл = РезультатСоздания.ПрисоединенныйФайл;
				
				Если ПараметрыПостановкиНаПоддержку.ВариантПостановкиНаПоддержку = 0
					И Не ПараметрыПостановкиНаПоддержку.ЭтоЧастичнаяВыгрузка Тогда
			
					НоваяСтрокаОписания.ХэшДанныхПоставщика = СтрокаДерева.ХэшДанныеФайла;
			
				КонецЕсли;
				
				ДобавляемыеСкриншотыОписания = ДобавляемыеСкриншотыОписания(СтрокаДерева.ДанныеФайла, Скриншоты);
				ДобавитьФайлыСкриншотовДляОписания(СценарийОбъект, ДобавляемыеСкриншотыОписания);
				
				СценарийОбъект.ДополнительныеСвойства.Вставить("НеПересчитыватьПолныйКодСправочника", Истина);
				СценарийОбъект.Записать();
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
		
				ВызватьИсключение ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
			КонецПопытки
			
		КонецЕсли;
		
		Если Не РодительскаяСтрока.ОбработкаУчтена Тогда
			
			РезультатЗагрузки.ДанныеЗагрузки.ЗагруженоСценариев = РезультатЗагрузки.ДанныеЗагрузки.ЗагруженоСценариев + 1;
			РодительскаяСтрока.ОбработкаУчтена = Истина; 
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Функция ДобавляемыеСкриншотыОписания(ТекстОписания, Скриншоты)
	
	СкриншотыОписания               = Новый Массив;
	
	Если Скриншоты.Количество() = 0 Тогда
		Возврат СкриншотыОписания;
	КонецЕсли;
	
	ПрефиксСсылкиПрисоединенныйФайл = ДемонстрационныеСценарииКлиентСервер.ПрефиксСсылкиПрисоединенныйФайл();
	ДлинаПрефикса                   = СтрДлина(ПрефиксСсылкиПрисоединенныйФайл);
	
	УникальныеСсылки = ДемонстрационныеСценарии.УникальныеСсылкиВHTMLДокументе(ТекстОписания);
	
	Для Каждого УникальнаяСсылка Из УникальныеСсылки Цикл 
	
	ПозицияНайденного = СтрНайти(УникальнаяСсылка, ПрефиксСсылкиПрисоединенныйФайл);
	
		Если ПозицияНайденного <> 0 Тогда
			
			ИдентификаторСкриншота = Прав(УникальнаяСсылка, СтрДлина(УникальнаяСсылка) - ПозицияНайденного -  ДлинаПрефикса + 1);
			ДвоичныеДанные = Скриншоты.Получить(ИдентификаторСкриншота); 
			Если ДвоичныеДанные = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеСкриншота = Новый Структура;
			ДанныеСкриншота.Вставить("ИдентификаторСкриншота", ИдентификаторСкриншота);
			ДанныеСкриншота.Вставить("ДвоичныеДанные",         ДвоичныеДанные);
			
			СкриншотыОписания.Добавить(ДанныеСкриншота);
			
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат СкриншотыОписания; 
	
КонецФункции

Процедура ДобавитьФайлыСкриншотовДляОписания(СценарийОбъект, ДобавляемыеСкриншотыОписания)
	
	Для Каждого ДанныеСкриншота Из ДобавляемыеСкриншотыОписания Цикл
		
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("ИдентификаторСкриншота", ДанныеСкриншота.ИдентификаторСкриншота);
		НайденныеСтроки = СценарийОбъект.ИдентификаторыФайловСкриншотов.НайтиСтроки(ПараметрыПоиска);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			ДемонстрационныеСценарии.РезультатОбновленияПрисоединенногоФайла(НайденныеСтроки[0].ПрисоединенныйФайл, Неопределено, ДанныеСкриншота.ДвоичныеДанные);
			
		Иначе
			
			РезультатСоздания = РезультатСозданияПрисоединенногоФайла(СценарийОбъект.Ссылка, 
			                                                          ДанныеСкриншота.ИдентификаторСкриншота, 
			                                                          "png", 
			                                                          ДанныеСкриншота.ДвоичныеДанные);
			
			Если РезультатСоздания.Успешно Тогда 
				
				НоваяСтрока = СценарийОбъект.ИдентификаторыФайловСкриншотов.Добавить();
				НоваяСтрока.ИдентификаторСкриншота = ДанныеСкриншота.ИдентификаторСкриншота;
				НоваяСтрока.ПрисоединенныйФайл     = РезультатСоздания.ПрисоединенныйФайл;
				
			КонецЕсли;
			
		КонецЕсли
		
	КонецЦикла;
	
КонецПроцедуры

Функция РезультатСозданияФайлаОписания(ВладелецФайла, ПолныйКод, КодЯзыка, ТекстНТML)
	
	ДвоичныеДанныеФайла = ПолучитьДвоичныеДанныеИзСтроки(ТекстНТML);
	ИмяФайла = ДемонстрационныеСценарииКлиентСервер.ИмяФайлаОписанияСценария(ПолныйКод,КодЯзыка);
	
	Возврат РезультатСозданияПрисоединенногоФайла(ВладелецФайла, ИмяФайла, "html", ДвоичныеДанныеФайла);
	
КонецФункции

Функция РезультатОбновленияФайлаОписания(ПрисоединенныйФайл, ТекстНТML)
	
	ДвоичныеДанныеФайла = ПолучитьДвоичныеДанныеИзСтроки(ТекстНТML);
	
	Возврат ДемонстрационныеСценарии.РезультатОбновленияПрисоединенногоФайла(ПрисоединенныйФайл, Неопределено, ДвоичныеДанныеФайла); 
	
КонецФункции

Функция РезультатСозданияПрисоединенногоФайла(ВладелецФайла, ИмяФайлаБезРасширения, Расширение, ДвоичныеДанныеФайла)
	
	РезультатСоздания = Новый Структура;
	РезультатСоздания.Вставить("Успешно",            Ложь);
	РезультатСоздания.Вставить("ПрисоединенныйФайл", Неопределено);
	РезультатСоздания.Вставить("ТекстОшибки",        "");
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);
	
	ПараметрыЗаписиФайла = РаботаСФайлами.ПараметрыДобавленияФайла(); 
	ПараметрыЗаписиФайла.ВладелецФайлов              = ВладелецФайла;
	ПараметрыЗаписиФайла.ИмяБезРасширения            = ИмяФайлаБезРасширения;
	ПараметрыЗаписиФайла.РасширениеБезТочки          = Расширение;
	ПараметрыЗаписиФайла.ВремяИзмененияУниверсальное = Неопределено;
	
	Попытка
	
		СозданныйПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(
		                                    ПараметрыЗаписиФайла,
		                                    АдресВоВременномХранилище,
		                                    "");
	
	Исключение
		
		РезультатСоздания.ТекстОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат РезультатСоздания;
		
	КонецПопытки;
	
	РезультатСоздания.Успешно            = Истина;
	РезультатСоздания.ПрисоединенныйФайл = СозданныйПрисоединенныйФайл;
	
	Возврат РезультатСоздания;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПостановкаНаПоддержку

Процедура ВыполнитьПостановкуНаПоддержку(ДеревоОписанийПроцессов, Глоссарий, ПараметрыПостановкиНаПоддержку)
	
	НачатьТранзакцию();
	
	Попытка
	
		ВыполнитьПостановкуНаПоддержкуОписанияПроцессов(ДеревоОписанийПроцессов);
	
		ВыполнитьПостановкуНаПоддержкуГлоссарий(Глоссарий);
	
		ДемонстрационныеСценарии.УстановитьКонстантуОписанияПроцессовНаПоддержке(ПараметрыПостановкиНаПоддержку.ОписаниеЗагружаемойПоставки, ПараметрыПостановкиНаПоддержку.ПоставщикЗагружаемойПоставки);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ВызватьИсключение ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	
	КонецПопытки;	
	
КонецПроцедуры

Процедура ВыполнитьПостановкуНаПоддержкуГлоссарий(Глоссарий)
	
	Если Глоссарий.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаГлоссарийДляПостановкиНаПоддержку = Новый ТаблицаЗначений;
	ТаблицаГлоссарийДляПостановкиНаПоддержку.Колонки.Добавить("Глоссарий",           Новый ОписаниеТипов("СправочникСсылка.Глоссарий"));
	ТаблицаГлоссарийДляПостановкиНаПоддержку.Колонки.Добавить("ХэшДанныхПоставщика", ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	
	ТаблицаОписанийНаЯзыкеДляПостановкиНаПоддержку = Новый ТаблицаЗначений;
	ТаблицаОписанийНаЯзыкеДляПостановкиНаПоддержку.Колонки.Добавить("Глоссарий",           Новый ОписаниеТипов("СправочникСсылка.Глоссарий"));
	ТаблицаОписанийНаЯзыкеДляПостановкиНаПоддержку.Колонки.Добавить("КодЯзыка",            ОбщегоНазначения.ОписаниеТипаСтрока(2));
	ТаблицаОписанийНаЯзыкеДляПостановкиНаПоддержку.Колонки.Добавить("ХэшДанныхПоставщика", ОбщегоНазначения.ОписаниеТипаЧисло(10, 0)); 
	
	Для Каждого СтрокаДерева Из Глоссарий.Строки Цикл
		
		ОбработатьСтрокуДереваГлоссарияДляТаблицыПостановкаНаПоддержку(СтрокаДерева, ТаблицаГлоссарийДляПостановкиНаПоддержку, ТаблицаОписанийНаЯзыкеДляПостановкиНаПоддержку);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПостановкаНаПоддержкуГлоссарий();
	
	Запрос.УстановитьПараметр("Глоссарий",        ТаблицаГлоссарийДляПостановкиНаПоддержку);
	Запрос.УстановитьПараметр("ОписанияНаЯзыке",  ТаблицаОписанийНаЯзыкеДляПостановкиНаПоддержку);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаСсылки = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ЗаписатьТребуемыеХэшиПоставщикаГлоссарий(ВыборкаСсылки);
	
КонецПроцедуры

Процедура ЗаписатьТребуемыеХэшиПоставщикаГлоссарий(ВыборкаСсылки)
	
	Пока ВыборкаСсылки.Следующий() Цикл
		
		Попытка
		
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ВыборкаСсылки.Глоссарий.Метаданные().ПолноеИмя());
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаСсылки.Глоссарий);
			Блокировка.Заблокировать();
		
			ГлоссарийОбъект = ВыборкаСсылки.Глоссарий.ПолучитьОбъект();
			
			ВыборкаОбновляемыеХэши = ВыборкаСсылки.Выбрать();
			
			Пока ВыборкаОбновляемыеХэши.Следующий() Цикл
				
				Если ВыборкаОбновляемыеХэши.ЭтоСтрокаОписанияНаЯзыке Тогда
					
					ПараметрыПоиска = Новый Структура;
					ПараметрыПоиска.Вставить("НомерСтроки", ВыборкаОбновляемыеХэши.НомерСтроки);
					ПараметрыПоиска.Вставить("КодЯзыка",    ВыборкаОбновляемыеХэши.КодЯзыка);
					
					НайденныеСтроки = ГлоссарийОбъект.ОписанияГлоссария.НайтиСтроки(ПараметрыПоиска);
					
					Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
						
						 НайденнаяСтрока.ХэшДанныхПоставщика = ВыборкаОбновляемыеХэши.ХэшДанныхПоставщика;
						
					КонецЦикла;
					
				Иначе
					
					ГлоссарийОбъект.ХэшДанныхПоставщика = ВыборкаОбновляемыеХэши.ХэшДанныхПоставщика;
					
				КонецЕсли;
				
			КонецЦикла; 
			
			ГлоссарийОбъект.Записать();
		
		Исключение
		
			ВызватьИсключение ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаПостановкаНаПоддержкуГлоссарий()
	
	Возврат "
	|ВЫБРАТЬ
	|	ДанныеГлоссария.Глоссарий           КАК Глоссарий,
	|	ДанныеГлоссария.ХэшДанныхПоставщика КАК ХэшДанныхПоставщика
	|ПОМЕСТИТЬ ГлоссарийХэшиПоставщика
	|ИЗ
	|	&Глоссарий КАК ДанныеГлоссария
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОписанияНаЯзыке.Глоссарий           КАК Глоссарий,
	|	ОписанияНаЯзыке.КодЯзыка            КАК КодЯзыка,
	|	ОписанияНаЯзыке.ХэшДанныхПоставщика КАК ХэшДанныхПоставщика
	|ПОМЕСТИТЬ ОписанияНаЯзыкахХэшиПоставщика
	|ИЗ
	|	&ОписанияНаЯзыке КАК ОписанияНаЯзыке
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СправочникГлоссарий.Ссылка                               КАК Глоссарий,
	|	ЕСТЬNULL(ГлоссарийХэшиПоставщика.ХэшДанныхПоставщика, 0) КАК ХэшДанныхПоставщика
	|ПОМЕСТИТЬ РеквизитыТребуетсяОбновить
	|ИЗ
	|	Справочник.Глоссарий КАК СправочникГлоссарий
	|		ЛЕВОЕ СОЕДИНЕНИЕ ГлоссарийХэшиПоставщика КАК ГлоссарийХэшиПоставщика
	|		ПО СправочникГлоссарий.Ссылка = ГлоссарийХэшиПоставщика.Глоссарий
	|ГДЕ 
	|	СправочникГлоссарий.ХэшДанныхПоставщика <> ЕСТЬNULL(ГлоссарийХэшиПоставщика.ХэшДанныхПоставщика, 0)
	|	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГлоссарийОписанияГлоссария.Ссылка                               КАК Глоссарий,
	|	ГлоссарийОписанияГлоссария.НомерСтроки                          КАК НомерСтроки,
	|	ГлоссарийОписанияГлоссария.КодЯзыка                             КАК КодЯзыка,
	|	ЕСТЬNULL(ОписанияНаЯзыкахХэшиПоставщика.ХэшДанныхПоставщика, 0) КАК ХэшДанныхПоставщика
	|ПОМЕСТИТЬ СтрокиОписанияНаЯзыкеТребуетсяОбновить
	|ИЗ
	|	Справочник.Глоссарий.ОписанияГлоссария КАК ГлоссарийОписанияГлоссария
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОписанияНаЯзыкахХэшиПоставщика КАК ОписанияНаЯзыкахХэшиПоставщика
	|		ПО ГлоссарийОписанияГлоссария.Ссылка = ОписанияНаЯзыкахХэшиПоставщика.Глоссарий
	|			И ГлоссарийОписанияГлоссария.КодЯзыка = ОписанияНаЯзыкахХэшиПоставщика.КодЯзыка
	|ГДЕ 
	|	ГлоссарийОписанияГлоссария.ХэшДанныхПоставщика <> ЕСТЬNULL(ОписанияНаЯзыкахХэшиПоставщика.ХэшДанныхПоставщика, 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Глоссарий                КАК Глоссарий,
	|	ВложенныйЗапрос.НомерСтроки              КАК НомерСтроки,
	|	ВложенныйЗапрос.КодЯзыка                 КАК КодЯзыка,
	|	ВложенныйЗапрос.ХэшДанныхПоставщика      КАК ХэшДанныхПоставщика,
	|	ВложенныйЗапрос.ЭтоСтрокаОписанияНаЯзыке КАК ЭтоСтрокаОписанияНаЯзыке
	|ИЗ
	|	(ВЫБРАТЬ
	|		СтрокиОписанияНаЯзыкеТребуетсяОбновить.Глоссарий           КАК Глоссарий,
	|		СтрокиОписанияНаЯзыкеТребуетсяОбновить.НомерСтроки         КАК НомерСтроки,
	|		СтрокиОписанияНаЯзыкеТребуетсяОбновить.КодЯзыка            КАК КодЯзыка,
	|		СтрокиОписанияНаЯзыкеТребуетсяОбновить.ХэшДанныхПоставщика КАК ХэшДанныхПоставщика,
	|		ИСТИНА                                                     КАК ЭтоСтрокаОписанияНаЯзыке
	|	ИЗ
	|		СтрокиОписанияНаЯзыкеТребуетсяОбновить КАК СтрокиОписанияНаЯзыкеТребуетсяОбновить
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РеквизитыТребуетсяОбновить.Глоссарий,
	|		0,
	|		"""",
	|		РеквизитыТребуетсяОбновить.ХэшДанныхПоставщика,
	|		ЛОЖЬ
	|	ИЗ
	|		РеквизитыТребуетсяОбновить КАК РеквизитыТребуетсяОбновить) КАК ВложенныйЗапрос
	|ИТОГИ ПО
	|	Глоссарий";
	
КонецФункции
	
Процедура ОбработатьСтрокуДереваГлоссарияДляТаблицыПостановкаНаПоддержку(СтрокаДерева, ТаблицаГлоссарийДляПостановкиНаПоддержку, ТаблицаОписанийНаЯзыкеДляПостановкиНаПоддержку)
	
	Если СтрокаДерева.ТипСтрокиНастройкиЗагрузки = "Сценарий" Тогда
		
		НоваяСтрока = ТаблицаГлоссарийДляПостановкиНаПоддержку.Добавить();
		НоваяСтрока.Глоссарий            = СтрокаДерева.Глоссарий;
		НоваяСтрока.ХэшДанныхПоставщика  = СтрокаДерева.ХэшДанныеФайла;
		
	ИначеЕсли СтрокаДерева.ТипСтрокиНастройкиЗагрузки = "Описание" Тогда 
		
		НоваяСтрока = ТаблицаОписанийНаЯзыкеДляПостановкиНаПоддержку.Добавить();
		НоваяСтрока.Глоссарий            = СтрокаДерева.Родитель.Глоссарий;
		НоваяСтрока.КодЯзыка             = СтрокаДерева.КодЯзыка;
		НоваяСтрока.ХэшДанныхПоставщика  = СтрокаДерева.ХэшДанныеФайла;
		
	КонецЕсли;
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.Строки Цикл
		
		ОбработатьСтрокуДереваГлоссарияДляТаблицыПостановкаНаПоддержку(ПодчиненнаяСтрока, ТаблицаГлоссарийДляПостановкиНаПоддержку, ТаблицаОписанийНаЯзыкеДляПостановкиНаПоддержку);
		
	КонецЦикла;
	
КонецПроцедуры 

Процедура ВыполнитьПостановкуНаПоддержкуОписанияПроцессов(ДеревоОписанийПроцессов)
	
	Если ДеревоОписанийПроцессов.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаОписанийДляПостановкиНаПоддержку = Новый ТаблицаЗначений;
	ТаблицаОписанийДляПостановкиНаПоддержку.Колонки.Добавить("Сценарий",            Новый ОписаниеТипов("СправочникСсылка.ДемонстрационныеСценарии"));
	ТаблицаОписанийДляПостановкиНаПоддержку.Колонки.Добавить("ХэшДанныхПоставщика", ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	
	ТаблицаОписанийНаЯзыкеДляПостановкиНаПоддержку = Новый ТаблицаЗначений;
	ТаблицаОписанийНаЯзыкеДляПостановкиНаПоддержку.Колонки.Добавить("Сценарий",            Новый ОписаниеТипов("СправочникСсылка.ДемонстрационныеСценарии"));
	ТаблицаОписанийНаЯзыкеДляПостановкиНаПоддержку.Колонки.Добавить("КодЯзыка",            ОбщегоНазначения.ОписаниеТипаСтрока(2));
	ТаблицаОписанийНаЯзыкеДляПостановкиНаПоддержку.Колонки.Добавить("ХэшДанныхПоставщика", ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	
	Для Каждого СтрокаДерева Из ДеревоОписанийПроцессов.Строки Цикл
		
		ОбработатьСтрокуДереваОписанияДляТаблицыПостановкаНаПоддержку(СтрокаДерева, ТаблицаОписанийДляПостановкиНаПоддержку, ТаблицаОписанийНаЯзыкеДляПостановкиНаПоддержку);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПостановкаНаПоддержкуОписанияПроцессов();
	
	Запрос.УстановитьПараметр("ОписанияПроцессов", ТаблицаОписанийДляПостановкиНаПоддержку);
	Запрос.УстановитьПараметр("ОписанияНаЯзыке",   ТаблицаОписанийНаЯзыкеДляПостановкиНаПоддержку);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаСсылки = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ЗаписатьТребуемыеХэшиПоставщикаПоВыборкеОписанияПроцессов(ВыборкаСсылки);
	
КонецПроцедуры

Процедура ЗаписатьТребуемыеХэшиПоставщикаПоВыборкеОписанияПроцессов(ВыборкаСсылки)
	
	Пока ВыборкаСсылки.Следующий() Цикл
		
		Попытка
		
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ВыборкаСсылки.Сценарий.Метаданные().ПолноеИмя());
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаСсылки.Сценарий);
			Блокировка.Заблокировать();
		
			СценарийОбъект = ВыборкаСсылки.Сценарий.ПолучитьОбъект();
			
			ВыборкаОбновляемыеХэши = ВыборкаСсылки.Выбрать();
			
			Пока ВыборкаОбновляемыеХэши.Следующий() Цикл
				
				Если ВыборкаОбновляемыеХэши.ЭтоСтрокаОписанияНаЯзыке Тогда
					
					ПараметрыПоиска = Новый Структура;
					ПараметрыПоиска.Вставить("НомерСтроки", ВыборкаОбновляемыеХэши.НомерСтроки);
					ПараметрыПоиска.Вставить("КодЯзыка",    ВыборкаОбновляемыеХэши.КодЯзыка);
					
					НайденныеСтроки = СценарийОбъект.ОписанияСценария.НайтиСтроки(ПараметрыПоиска);
					
					Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
						
						 НайденнаяСтрока.ХэшДанныхПоставщика = ВыборкаОбновляемыеХэши.ХэшДанныхПоставщика;
						
					КонецЦикла;
					
				Иначе
					
					СценарийОбъект.ХэшДанныхПоставщика = ВыборкаОбновляемыеХэши.ХэшДанныхПоставщика;
					
				КонецЕсли;
				
			КонецЦикла; 
			
			СценарийОбъект.Записать(); 
		
		Исключение
		
		ВызватьИсключение ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаПостановкаНаПоддержкуОписанияПроцессов()
	
	Возврат "
	|ВЫБРАТЬ
	|	ОписанияПроцессов.Сценарий            КАК Сценарий,
	|	ОписанияПроцессов.ХэшДанныхПоставщика КАК ХэшДанныхПоставщика
	|ПОМЕСТИТЬ ОписанияПроцессовХэшиПоставщика
	|ИЗ
	|	&ОписанияПроцессов КАК ОписанияПроцессов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОписанияНаЯзыке.Сценарий КАК Сценарий,
	|	ОписанияНаЯзыке.КодЯзыка КАК КодЯзыка,
	|	ОписанияНаЯзыке.ХэшДанныхПоставщика КАК ХэшДанныхПоставщика
	|ПОМЕСТИТЬ ОписанияНаЯзыкахХэшиПоставщика
	|ИЗ
	|	&ОписанияНаЯзыке КАК ОписанияНаЯзыке
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДемонстрационныеСценарии.Ссылка                                  КАК Сценарий,
	|	ЕСТЬNULL(ОписанияПроцессовХэшиПоставщика.ХэшДанныхПоставщика, 0) КАК ХэшДанныхПоставщика
	|ПОМЕСТИТЬ РеквизитыТребуетсяОбновить
	|ИЗ
	|	Справочник.ДемонстрационныеСценарии КАК ДемонстрационныеСценарии
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОписанияПроцессовХэшиПоставщика КАК ОписанияПроцессовХэшиПоставщика
	|		ПО ДемонстрационныеСценарии.Ссылка = ОписанияПроцессовХэшиПоставщика.Сценарий
	|ГДЕ 
	|	ДемонстрационныеСценарии.ХэшДанныхПоставщика <> ЕСТЬNULL(ОписанияПроцессовХэшиПоставщика.ХэшДанныхПоставщика, 0)
	|	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДемонстрационныеСценарииОписанияСценария.Ссылка                 КАК Сценарий,
	|	ДемонстрационныеСценарииОписанияСценария.НомерСтроки            КАК НомерСтроки,
	|	ДемонстрационныеСценарииОписанияСценария.КодЯзыка               КАК КодЯзыка,
	|	ЕСТЬNULL(ОписанияНаЯзыкахХэшиПоставщика.ХэшДанныхПоставщика, 0) КАК ХэшДанныхПоставщика
	|ПОМЕСТИТЬ СтрокиОписанияНаЯзыкеТребуетсяОбновить
	|ИЗ
	|	Справочник.ДемонстрационныеСценарии.ОписанияСценария КАК ДемонстрационныеСценарииОписанияСценария
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОписанияНаЯзыкахХэшиПоставщика КАК ОписанияНаЯзыкахХэшиПоставщика
	|		ПО ДемонстрационныеСценарииОписанияСценария.Ссылка = ОписанияНаЯзыкахХэшиПоставщика.Сценарий
	|			И ДемонстрационныеСценарииОписанияСценария.КодЯзыка = ОписанияНаЯзыкахХэшиПоставщика.КодЯзыка
	|ГДЕ 
	|	ДемонстрационныеСценарииОписанияСценария.ХэшДанныхПоставщика <> ЕСТЬNULL(ОписанияНаЯзыкахХэшиПоставщика.ХэшДанныхПоставщика, 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Сценарий                 КАК Сценарий,
	|	ВложенныйЗапрос.НомерСтроки              КАК НомерСтроки,
	|	ВложенныйЗапрос.КодЯзыка                 КАК КодЯзыка,
	|	ВложенныйЗапрос.ХэшДанныхПоставщика      КАК ХэшДанныхПоставщика,
	|	ВложенныйЗапрос.ЭтоСтрокаОписанияНаЯзыке КАК ЭтоСтрокаОписанияНаЯзыке
	|ИЗ
	|	(ВЫБРАТЬ
	|		СтрокиОписанияНаЯзыкеТребуетсяОбновить.Сценарий            КАК Сценарий,
	|		СтрокиОписанияНаЯзыкеТребуетсяОбновить.НомерСтроки         КАК НомерСтроки,
	|		СтрокиОписанияНаЯзыкеТребуетсяОбновить.КодЯзыка            КАК КодЯзыка,
	|		СтрокиОписанияНаЯзыкеТребуетсяОбновить.ХэшДанныхПоставщика КАК ХэшДанныхПоставщика,
	|		ИСТИНА                                                     КАК ЭтоСтрокаОписанияНаЯзыке
	|	ИЗ
	|		СтрокиОписанияНаЯзыкеТребуетсяОбновить КАК СтрокиОписанияНаЯзыкеТребуетсяОбновить
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РеквизитыТребуетсяОбновить.Сценарий,
	|		0,
	|		"""",
	|		РеквизитыТребуетсяОбновить.ХэшДанныхПоставщика,
	|		ЛОЖЬ
	|	ИЗ
	|		РеквизитыТребуетсяОбновить КАК РеквизитыТребуетсяОбновить) КАК ВложенныйЗапрос
	|ИТОГИ ПО
	|	Сценарий";
	
	
КонецФункции

Процедура ОбработатьСтрокуДереваОписанияДляТаблицыПостановкаНаПоддержку(СтрокаДерева, ТаблицаОписанийДляПостановкиНаПоддержку, ТаблицаОписанийНаЯзыкеДляПостановкиНаПоддержку)
	
	Если СтрокаДерева.ТипСтрокиНастройкиЗагрузки = "Сценарий" Тогда
		
		НоваяСтрока = ТаблицаОписанийДляПостановкиНаПоддержку.Добавить();
		НоваяСтрока.Сценарий            = СтрокаДерева.Сценарий;
		НоваяСтрока.ХэшДанныхПоставщика = СтрокаДерева.ХэшДанныеФайла;
		
	ИначеЕсли СтрокаДерева.ТипСтрокиНастройкиЗагрузки = "Описание" Тогда 
		
		НоваяСтрока = ТаблицаОписанийНаЯзыкеДляПостановкиНаПоддержку.Добавить();
		НоваяСтрока.Сценарий            = СтрокаДерева.Родитель.Сценарий;
		НоваяСтрока.КодЯзыка            = СтрокаДерева.КодЯзыка;
		НоваяСтрока.ХэшДанныхПоставщика = СтрокаДерева.ХэшДанныеФайла;
		
	КонецЕсли;
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.Строки Цикл
		
		ОбработатьСтрокуДереваОписанияДляТаблицыПостановкаНаПоддержку(ПодчиненнаяСтрока, ТаблицаОписанийДляПостановкиНаПоддержку, ТаблицаОписанийНаЯзыкеДляПостановкиНаПоддержку);
		
	КонецЦикла;
	
КонецПроцедуры 

#КонецОбласти

#Область ЧтениеФайловАрхива

Процедура ПрочитатьДанныеФайлаАрхиваЗагрузки(РезультатЗагрузки, ПараметрыФормирования)
	
	ПараметрыФормирования.ДеревоОписанийПроцессов.Строки.Очистить();
	ПараметрыФормирования.Глоссарий.Строки.Очистить();
	ПараметрыФормирования.Скриншоты.Очистить();
	
	ОбъектЧтение = Новый ЧтениеZipФайла(ДемонстрационныеСценарии.ПотокВПамятиИзДвоичныхДанных(ПараметрыФормирования.ДвоичныеДанныеФайлаЗагрузки));
	Если ОбъектЧтение.Элементы.Количество() =  0 Тогда
		Возврат;
	КонецЕсли;
		
	РезультатСозданияКаталога = ДемонстрационныеСценарии.РезультатСозданияКаталогДляРазархивированияВыгрузки(); 
	
	Если Не РезультатСозданияКаталога.Успешно Тогда
		Возврат;
	КонецЕсли;
	
	РезультатСозданияКаталога = ДемонстрационныеСценарии.РезультатСозданияКаталогДляРазархивированияВыгрузки(); 
	
	Если Не РезультатСозданияКаталога.Успешно Тогда
		Возврат;
	КонецЕсли;
	
	КаталогРазархивированныхФайлов = РезультатСозданияКаталога.ИмяКаталога;
	
	ОбъектЧтение.ИзвлечьВсе(КаталогРазархивированныхФайлов, РежимВосстановленияПутейФайловZIP.Восстанавливать);

	ЗаполнитьЗагружаемыеДанныеДляФормы(РезультатЗагрузки, ПараметрыФормирования, КаталогРазархивированныхФайлов);
	
КонецПроцедуры

Процедура ЗаполнитьЗагружаемыеДанныеДляФормы(РезультатЗагрузки, ПараметрыФормирования, КаталогРазархивированныхФайлов)
	
	ЗаполнитьДеревоОписанийПроцессов(ПараметрыФормирования, РезультатЗагрузки, КаталогРазархивированныхФайлов, ПараметрыФормирования.ДеревоОписанийПроцессов);
	ЗаполнитьДеревоГлоссария(ПараметрыФормирования, РезультатЗагрузки, КаталогРазархивированныхФайлов, ПараметрыФормирования.Глоссарий);
	ЗаполнитьТаблицуСкриншотов(КаталогРазархивированныхФайлов, ПараметрыФормирования.Скриншоты);
	
	УдалитьФайлы(КаталогРазархивированныхФайлов, ПолучитьМаскуВсеФайлыСервера());
	
	РезультатЗагрузки.ДанныеЗагрузки.Вставить("НастройкиЗагрузкиОписанияПроцессов", ПараметрыФормирования.ДеревоОписанийПроцессов);
	РезультатЗагрузки.ДанныеЗагрузки.Вставить("Скриншоты",                          ПараметрыФормирования.Скриншоты);
	РезультатЗагрузки.ДанныеЗагрузки.Вставить("НастройкиЗагрузкиГлоссарий",         ПараметрыФормирования.Глоссарий);
	
КонецПроцедуры 

#Область РазборГлоссария

Процедура ЗаполнитьДеревоГлоссария(ПараметрыФормирования, РезультатЗагрузки, КаталогРазархивированныхФайлов, НастройкиЗагрузкиГлоссарий)
	
	ИдентификаторыСтрокиДерева = Новый Соответствие;
	
	ИмяКаталога = КаталогРазархивированныхФайлов 
	              + ДемонстрационныеСценарииКлиентСервер.ИмяКаталогаГлоссария() 
	              + ПолучитьРазделительПути();
	
	ДобавитьФайлыДеревоГлоссарийПоКаталогу(НастройкиЗагрузкиГлоссарий.Строки, ИмяКаталога, ИдентификаторыСтрокиДерева);
	ЗаполнитьДополнительныеДанныеДереваГлоссарийНаСервере(ПараметрыФормирования, НастройкиЗагрузкиГлоссарий, ИдентификаторыСтрокиДерева);
	
КонецПроцедуры

Процедура ПолучитьДанныеРеквизитовГлоссариев(ГлоссарииСтрокиДерева, ГлоссарииДляПолученияДанных)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Глоссарий.Ссылка              КАК СсылкаГлоссарий,
	|	Глоссарий.ПометкаУдаления     КАК ПометкаУдаления,
	|	Глоссарий.Код                 КАК Код,
	|	Глоссарий.Наименование        КАК Наименование,
	|	Глоссарий.ХэшДанныхПоставщика КАК ХэшДанныхПоставщика,
	|	Глоссарий.НаименованиеЯзык1   КАК НаименованиеЯзык1,
	|	Глоссарий.НаименованиеЯзык2   КАК НаименованиеЯзык2,
	|	Глоссарий.ОбъектыКонфигурации.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		ОбъектКонфигурации КАК ОбъектКонфигурации
	|	) КАК ОбъектыКонфигурации
	|ИЗ
	|	Справочник.Глоссарий КАК Глоссарий
	|ГДЕ
	|	Глоссарий.Ссылка В (&МассивГлоссариев)";
	
	Запрос.УстановитьПараметр("МассивГлоссариев", ГлоссарииДляПолученияДанных);
	
	Результат = Запрос.Выполнить();
	ВыборкаСсылкаГлоссарий = Результат.Выбрать();
	
	Пока ВыборкаСсылкаГлоссарий.Следующий() Цикл
		
		ДанныеРеквизитовГлоссарий = ДемонстрационныеСценарии.НовыйДанныеРеквизитовГлоссарий();
		
		ЗаполнитьЗначенияСвойств(ДанныеРеквизитовГлоссарий, ВыборкаСсылкаГлоссарий, , "ОбъектыКонфигурации");
		
		ДанныеРеквизитовГлоссарий.Ссылка              = ВыборкаСсылкаГлоссарий.СсылкаГлоссарий;
		ДанныеРеквизитовГлоссарий.ОбъектыКонфигурации = ВыборкаСсылкаГлоссарий.ОбъектыКонфигурации.Выгрузить();
		
		ТекстJSONРеквизитыГлоссарий = ДемонстрационныеСценарии.ТекстJSONРеквизитовГлоссария(ДанныеРеквизитовГлоссарий); 
		
		СтрокаДерева = ГлоссарииСтрокиДерева.Получить(ВыборкаСсылкаГлоссарий.СсылкаГлоссарий);
		Если СтрокаДерева <> Неопределено Тогда
			СтрокаДерева.ДанныеБазы          = ТекстJSONРеквизитыГлоссарий;
			СтрокаДерева.ХэшДанныеБазы       = ДемонстрационныеСценарии.ХешТекста(ТекстJSONРеквизитыГлоссарий);
			СтрокаДерева.Код                 = ВыборкаСсылкаГлоссарий.Код; 
			СтрокаДерева.ХэшДанныхПоставщика = ВыборкаСсылкаГлоссарий.ХэшДанныхПоставщика;
			СтрокаДерева.СсылкаСуществует    = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры 

Процедура ПолучитьДанныеОписанийГлоссариев(ГлоссарииСтрокиДерева, ГлоссарииДляПолученияДанных)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ГлоссарийОписанияГлоссария.Ссылка   КАК Ссылка,
	|	ГлоссарийОписанияГлоссария.КодЯзыка КАК КодЯзыка,
	|	ГлоссарийОписанияГлоссария.Описание КАК Описание
	|ИЗ
	|	Справочник.Глоссарий.ОписанияГлоссария КАК ГлоссарийОписанияГлоссария
	|ГДЕ
	|	ГлоссарийОписанияГлоссария.Ссылка В (&МассивГлоссариев)";
	
	Запрос.УстановитьПараметр("МассивГлоссариев", ГлоссарииДляПолученияДанных);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Вложения = Новый Структура;
		ТекстHTML = "";
		ФорматированныйДокументОписания = Выборка.Описание.Получить();
		ФорматированныйДокументОписания.ПолучитьHTML(ТекстHTML, Вложения);
		
		СтрокаДерева = ГлоссарииСтрокиДерева.Получить(Выборка.Ссылка);
		Если СтрокаДерева <> Неопределено Тогда
			
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("КодЯзыка", Выборка.КодЯзыка);
			
			НайденныеСтроки = СтрокаДерева.Строки.НайтиСтроки(ПараметрыПоиска);
			
			Если НайденныеСтроки.Количество() = 0 Тогда

				СтрокаСОписанием = СтрокаДерева.Строки.Вставить(0);
				СтрокаСОписанием.КодЯзыка                   = Выборка.КодЯзыка;
				СтрокаСОписанием.Представление              = Выборка.КодЯзыка;
				СтрокаСОписанием.ТипСтрокиНастройкиЗагрузки = "Описание";
				СтрокаСОписанием.СтатусФайлов               = Перечисления.СтатусыСравненияФайловОписанийПроцессов.ОтсутствуетВЗагрузке;
				
			Иначе
				
				СтрокаСОписанием = НайденныеСтроки[0];
				
			КонецЕсли;
			
			СтрокаСОписанием.ДанныеБазы         = ТекстHTML;
			СтрокаСОписанием.ХэшДанныеБазы      = ДемонстрационныеСценарии.ХешТекста(ТекстHTML);
			СтрокаСОписанием.Глоссарий          = Выборка.Ссылка;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьОтсутствующиеГлоссарииВВыгрузкеПоСтрокеДерева(НастройкиЗагрузкиГлоссарий, СтрокаДерева, ГлоссарииСтрокиДерева, СтрокаДереваГлоссарийРодитель)
	
	СтрокаДереваГлоссарийТекущая = ГлоссарииСтрокиДерева.Получить(СтрокаДерева.СсылкаГлоссарий);
	
	Если СтрокаДереваГлоссарийТекущая = Неопределено Тогда
		
		Если СтрокаДереваГлоссарийРодитель = Неопределено Тогда
			
			КоллекцияСтрок = НастройкиЗагрузкиГлоссарий.Строки;
			
		Иначе
			
			КоллекцияСтрок = СтрокаДереваГлоссарийРодитель.Строки;
			
		КонецЕсли;
		
		СтрокаДереваГлоссарийТекущая = КоллекцияСтрок.Добавить();
		
		ДанныеРеквизитовГлоссарий = ДемонстрационныеСценарии.НовыйДанныеРеквизитовГлоссарий();
		
		ЗаполнитьЗначенияСвойств(ДанныеРеквизитовГлоссарий, СтрокаДерева, , "ОбъектыКонфигурации");
		
		ПодчиненнаяСтрокаРеквизиты = Неопределено;
		Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.Строки Цикл
			
			Если ПодчиненнаяСтрока.СсылкаГлоссарий = СтрокаДерева.СсылкаГлоссарий Тогда
				ПодчиненнаяСтрокаРеквизиты = ПодчиненнаяСтрока;
			КонецЕсли;
			
		КонецЦикла;
		
		ДанныеРеквизитовГлоссарий.Ссылка              = СтрокаДерева.СсылкаГлоссарий;
		ДанныеРеквизитовГлоссарий.ОбъектыКонфигурации = ПодчиненнаяСтрокаРеквизиты.ОбъектыКонфигурации;
		
		ТекстJSONРеквизитыГлоссарий = ДемонстрационныеСценарии.ТекстJSONРеквизитовГлоссария(ДанныеРеквизитовГлоссарий); 
		
		Если СтрокаДерева <> Неопределено Тогда
			
			СтрокаДереваГлоссарийТекущая.ДанныеБазы                 = ТекстJSONРеквизитыГлоссарий;
			СтрокаДереваГлоссарийТекущая.ХэшДанныеБазы              = ДемонстрационныеСценарии.ХешТекста(ТекстJSONРеквизитыГлоссарий);
			СтрокаДереваГлоссарийТекущая.Код                        = СтрокаДерева.Код;
			СтрокаДереваГлоссарийТекущая.Глоссарий                  = СтрокаДерева.СсылкаГлоссарий;
			СтрокаДереваГлоссарийТекущая.ТипСтрокиНастройкиЗагрузки = "Сценарий";
			СтрокаДереваГлоссарийТекущая.Представление              = СтрокаДерева.Наименование;
			СтрокаДереваГлоссарийТекущая.СтатусФайлов               = Перечисления.СтатусыСравненияФайловОписанийПроцессов.ОтсутствуетВЗагрузке;
			СтрокаДереваГлоссарийТекущая.ЧтоДелать                  = Перечисления.ВариантыДействийПриЗагрузкеОписанийПроцессов.Удалить;
			
		КонецЕсли; 
		
		ГлоссарииСтрокиДерева.Вставить(СтрокаДереваГлоссарийТекущая.Глоссарий, СтрокаДереваГлоссарийТекущая);
		
		Для Каждого СтрокаОписанияСценария Из ПодчиненнаяСтрокаРеквизиты.ОписанияГлоссария Цикл
			
			Вложения = Новый Структура;
			ТекстHTML = "";
			ФорматированныйДокументОписания = СтрокаОписанияСценария.Описание.Получить();
			ФорматированныйДокументОписания.ПолучитьHTML(ТекстHTML, Вложения);
			
			СтрокаСОписанием = СтрокаДереваГлоссарийТекущая.Строки.Вставить(0);
			СтрокаСОписанием.КодЯзыка                   = СтрокаОписанияСценария.КодЯзыка;
			СтрокаСОписанием.Представление              = СтрокаОписанияСценария.КодЯзыка;
			СтрокаСОписанием.ТипСтрокиНастройкиЗагрузки = "Описание";
			СтрокаСОписанием.СтатусФайлов  = Перечисления.СтатусыСравненияФайловОписанийПроцессов.ОтсутствуетВЗагрузке;
			
			СтрокаСОписанием.ДанныеБазы      = ТекстHTML;
			СтрокаСОписанием.ХэшДанныеБазы   = ДемонстрационныеСценарии.ХешТекста(ТекстHTML);
			СтрокаСОписанием.Глоссарий       = СтрокаДереваГлоссарийТекущая.Глоссарий;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.Строки Цикл
		
		ДобавитьОтсутствующиеГлоссарииВВыгрузкеПоСтрокеДерева(НастройкиЗагрузкиГлоссарий, ПодчиненнаяСтрока, ГлоссарииСтрокиДерева, СтрокаДереваГлоссарийРодитель)
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьДаннымиОтсутствующихВГлоссариев(ПараметрыФормирования, ГлоссарииСтрокиДерева, ГлоссарииДляПолученияДанных)
	
	Если ПараметрыФормирования.ЭтоЧастичнаяВыгрузка Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Глоссарий.Ссылка              КАК СсылкаГлоссарий,
	|	Глоссарий.ПометкаУдаления     КАК ПометкаУдаления,
	|	Глоссарий.Код                 КАК Код,
	|	Глоссарий.Наименование        КАК Наименование,
	|	Глоссарий.ХэшДанныхПоставщика КАК ХэшДанныхПоставщика,
	|	Глоссарий.НаименованиеЯзык1   КАК НаименованиеЯзык1,
	|	Глоссарий.НаименованиеЯзык2   КАК НаименованиеЯзык2,
	|	Глоссарий.ОбъектыКонфигурации.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		ОбъектКонфигурации КАК ОбъектКонфигурации
	|	) КАК ОбъектыКонфигурации,
	|	Глоссарий.ОписанияГлоссария.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		КодЯзыка КАК КодЯзыка,
	|		Описание КАК Описание,
	|		ХэшДанныхПоставщика КАК ХэшДанныхПоставщика
	|	) КАК ОписанияГлоссария
	|ИЗ
	|	Справочник.Глоссарий КАК Глоссарий
	|ГДЕ
	|	Глоссарий.Ссылка НЕ В (&МассивГлоссариев)
	|УПОРЯДОЧИТЬ ПО
	|	Код
	|ИТОГИ ПО
	|	СсылкаГлоссарий ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("МассивГлоссариев", ГлоссарииДляПолученияДанных);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоДанных = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);

	Для Каждого СтрокаДерева Из ДеревоДанных.Строки Цикл
		
		ДобавитьОтсутствующиеГлоссарииВВыгрузкеПоСтрокеДерева(ПараметрыФормирования.Глоссарий, СтрокаДерева, ГлоссарииСтрокиДерева, Неопределено);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьДанныеСуществующихГлоссариев(ПараметрыФормирования, ГлоссарииСтрокиДерева)
	
	ГлоссарииДляПолученияДанных = Новый Массив;
	
	Для Каждого ЭлементСоответствия Из ГлоссарииСтрокиДерева Цикл
		
		ГлоссарииДляПолученияДанных.Добавить(ЭлементСоответствия.Ключ);
		
	КонецЦикла;
	
	ПолучитьДанныеРеквизитовГлоссариев(ГлоссарииСтрокиДерева, ГлоссарииДляПолученияДанных);
	ДополнитьДаннымиОтсутствующихВГлоссариев(ПараметрыФормирования, ГлоссарииСтрокиДерева, ГлоссарииДляПолученияДанных);
	ПолучитьДанныеОписанийГлоссариев(ГлоссарииСтрокиДерева, ГлоссарииДляПолученияДанных);
	
КонецПроцедуры

Процедура ДобавитьФайлыДеревоГлоссарийПоКаталогу(КоллекцияЭлементов, КаталогСФайлами, ИдентификаторыСтрокиДерева);

	ФайлыВКаталоге = НайтиФайлы(КаталогСФайлами, ПолучитьМаскуВсеФайлыСервера(), Ложь);
	
	ДанныеФайловВКаталоге = ДанныеФайловВКаталоге(ФайлыВКаталоге);
	
	СтрокаТекущегоЭлемента = Неопределено;
	
	Если ДанныеФайловВКаталоге.Реквизиты <> Неопределено Тогда
		
		НоваяСтрока = КоллекцияЭлементов.Добавить();
		НоваяСтрока.ИдентификаторГлоссария      = ДанныеФайловВКаталоге.Реквизиты.ИдентификаторЭлемента;
		НоваяСтрока.ДанныеФайла                 = ДанныеФайловВКаталоге.Реквизиты.ДанныеРеквизиты;
		НоваяСтрока.ТипСтрокиНастройкиЗагрузки  = "Сценарий";
		
		СтрокаТекущегоЭлемента = НоваяСтрока;
		
		ИдентификаторыСтрокиДерева.Вставить(НоваяСтрока.ИдентификаторГлоссария, СтрокаТекущегоЭлемента);
		
	КонецЕсли;
	
	Если СтрокаТекущегоЭлемента <> Неопределено Тогда
		
		КоллекцияПодчиненных = СтрокаТекущегоЭлемента.Строки;
		
		Для Каждого ДанныеОписания Из ДанныеФайловВКаталоге.Описания Цикл
			
			СтрокаОписания = СтрокаТекущегоЭлемента.Строки.Добавить();
			СтрокаОписания.КодЯзыка                   = ДанныеОписания.КодЯзыка;
			СтрокаОписания.ДанныеФайла                = ДанныеОписания.ТекстHTML;
			СтрокаОписания.Представление              = СтрокаОписания.КодЯзыка;
			СтрокаОписания.ТипСтрокиНастройкиЗагрузки = "Описание";
			
		КонецЦикла;
		
	Иначе
		
		КоллекцияПодчиненных =  КоллекцияЭлементов;
	
	КонецЕсли;
	
	Для Каждого ИмяКаталога Из ДанныеФайловВКаталоге.Каталоги Цикл
		
		ДобавитьФайлыДеревоГлоссарийПоКаталогу(КоллекцияПодчиненных, ИмяКаталога, ИдентификаторыСтрокиДерева);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДополнительныеДанныеДереваГлоссарийНаСервере(ПараметрыФормирования, НастройкиЗагрузкиГлоссарий, ИдентификаторыСтрокиДерева)
	
	ГлоссарииСтрокиДерева = Новый Соответствие;
	
	Для Каждого КлючИЗначение Из ИдентификаторыСтрокиДерева Цикл
		
		НайденныйГлоссарий = Справочники.Глоссарий.ПолучитьСсылку(КлючИЗначение.Ключ);
		СтрокаДерева = КлючИЗначение.Значение;
		
		Если СтрокаДерева <> Неопределено Тогда
			
			СтрокаДерева.Глоссарий = НайденныйГлоссарий;
			
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(СтрокаДерева.ДанныеФайла);
			
			Результат = ПрочитатьJSON(ЧтениеJSON);
			
			ЧтениеJSON.Закрыть();
			
			СтрокаДерева.Код           = Результат.Code;
			СтрокаДерева.Представление = СтрШаблон("(%1) %2", Результат.Code, Результат.Name);
			
			Если Не НайденныйГлоссарий.Пустая() Тогда
			
				ГлоссарииСтрокиДерева.Вставить(НайденныйГлоссарий, СтрокаДерева);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПолучитьДанныеСуществующихГлоссариев(ПараметрыФормирования, ГлоссарииСтрокиДерева);
	СравнитьДанныеБазыИФайла(ПараметрыФормирования, НастройкиЗагрузкиГлоссарий);

КонецПроцедуры

#КонецОбласти

#Область РазборОписанийПроцессов

Процедура ЗаполнитьДеревоОписанийПроцессов(ПараметрыФормирования, РезультатЗагрузки, КаталогРазархивированныхФайлов, НастройкиЗагрузкиОписанияПроцессов)
	
	ИдентификаторыСтрокиДерева = Новый Соответствие;
	
	ИмяКаталога = КаталогРазархивированныхФайлов 
	              + ДемонстрационныеСценарииКлиентСервер.ИмяКаталогаВыгрузкиОписанияПроцессов() 
	              + ПолучитьРазделительПути();
	
	ДобавитьФайлыДеревоОписанийПоКаталогу(НастройкиЗагрузкиОписанияПроцессов.Строки, ИмяКаталога, ИдентификаторыСтрокиДерева);
	ЗаполнитьДополнительныеДанныеДереваОписанийЗагрузки(ПараметрыФормирования, НастройкиЗагрузкиОписанияПроцессов, ИдентификаторыСтрокиДерева);
	
КонецПроцедуры

Процедура ЗаполнитьДополнительныеДанныеДереваОписанийЗагрузки(ПараметрыФормирования, НастройкиЗагрузкиОписанияПроцессов, ИдентификаторыСтрокиДерева)
	
	СценарииСтрокиДерева = Новый Соответствие;
	
	Для Каждого КлючИЗначение Из ИдентификаторыСтрокиДерева Цикл
		
		НайденныйСценарий = Справочники.ДемонстрационныеСценарии.ПолучитьСсылку(КлючИЗначение.Ключ);
		СтрокаДерева      = КлючИЗначение.Значение;
		
		Если СтрокаДерева <> Неопределено Тогда
			
			СтрокаДерева.Сценарий = НайденныйСценарий;
			
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(СтрокаДерева.ДанныеФайла);
			
			Результат = ПрочитатьJSON(ЧтениеJSON);
			
			ЧтениеJSON.Закрыть();
			
			СтрокаДерева.ПолныйКод     = Результат.FullCode;
			СтрокаДерева.Представление = СтрШаблон("(%1) %2", Результат.FullCode, Результат.Name);
			
			Если Не НайденныйСценарий.Пустая() Тогда
			
				СценарииСтрокиДерева.Вставить(НайденныйСценарий, СтрокаДерева);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПолучитьДанныеСуществующихСценариев(ПараметрыФормирования, СценарииСтрокиДерева);
	СравнитьДанныеБазыИФайла(ПараметрыФормирования, НастройкиЗагрузкиОписанияПроцессов);

КонецПроцедуры

Процедура СравнитьДанныеБазыИФайла(ПараметрыФормирования, ДеревоДанных)
	
	Для Каждого СтрокаДерева Из ДеревоДанных.Строки Цикл
		
		СравнитьДанныеБазыИФайлаПоСтрокеДерева(ПараметрыФормирования, СтрокаДерева);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СравнитьДанныеБазыИФайлаПоСтрокеДерева(ПараметрыФормирования, СтрокаДерева)

	Если Не ПустаяСтрока(СтрокаДерева.ДанныеФайла) Тогда
		
		СтрокаДерева.ХэшДанныеФайла = ДемонстрационныеСценарии.ХешТекста(СтрокаДерева.ДанныеФайла);
		
	КонецЕсли;
	
	Если СтрокаДерева.СтатусФайлов = Перечисления.СтатусыСравненияФайловОписанийПроцессов.ОтсутствуетВЗагрузке Тогда
		
		СтрокаДерева.ЧтоДелать    = Перечисления.ВариантыДействийПриЗагрузкеОписанийПроцессов.Удалить;
		
	ИначеЕсли СтрокаДерева.ХэшДанныеБазы = 0 Тогда
		
		СтрокаДерева.СтатусФайлов = Перечисления.СтатусыСравненияФайловОписанийПроцессов.ОтсутствуетВБазе;
		СтрокаДерева.ЧтоДелать    = Перечисления.ВариантыДействийПриЗагрузкеОписанийПроцессов.Загружать;
		
	ИначеЕсли СтрокаДерева.ХэшДанныеФайла <> СтрокаДерева.ХэшДанныеБазы Тогда
		
		Если ПараметрыФормирования.ВариантПостановкиНаПоддержку = 0 Тогда 
			Если СтрокаДерева.ХэшДанныеФайла = СтрокаДерева.ХэшДанныхПоставщика Тогда
				СтрокаДерева.СтатусФайлов = Перечисления.СтатусыСравненияФайловОписанийПроцессов.ИзмененТолькоВБазе;
				СтрокаДерева.ЧтоДелать    = Перечисления.ВариантыДействийПриЗагрузкеОписанийПроцессов.НеЗагружать;
			ИначеЕсли СтрокаДерева.ХэшДанныеБазы = СтрокаДерева.ХэшДанныхПоставщика Тогда
				СтрокаДерева.СтатусФайлов = Перечисления.СтатусыСравненияФайловОписанийПроцессов.ИзмененТолькоПоставщиком;
				СтрокаДерева.ЧтоДелать    = Перечисления.ВариантыДействийПриЗагрузкеОписанийПроцессов.Загружать;
			Иначе
				СтрокаДерева.СтатусФайлов = Перечисления.СтатусыСравненияФайловОписанийПроцессов.ИзмененИПоставщикомИВБазе;
				СтрокаДерева.ЧтоДелать    = Перечисления.ВариантыДействийПриЗагрузкеОписанийПроцессов.Объединить;
			КонецЕсли;
		Иначе
			СтрокаДерева.СтатусФайлов = Перечисления.СтатусыСравненияФайловОписанийПроцессов.ЕстьИзменения;
			СтрокаДерева.ЧтоДелать    = Перечисления.ВариантыДействийПриЗагрузкеОписанийПроцессов.Загружать;
		КонецЕсли;
		
	Иначе
		
		СтрокаДерева.СтатусФайлов =  Перечисления.СтатусыСравненияФайловОписанийПроцессов.НетИзменений;
		СтрокаДерева.ЧтоДелать    = Перечисления.ВариантыДействийПриЗагрузкеОписанийПроцессов.НеЗагружать;
		
	КонецЕсли;
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.Строки Цикл
		
		СравнитьДанныеБазыИФайлаПоСтрокеДерева(ПараметрыФормирования, ПодчиненнаяСтрока);
		
	КонецЦикла;

КонецПроцедуры

Процедура ПолучитьДанныеОписанийСценариев(ПараметрыФормирования, СценарииСтрокиДерева, СценарииДляПолученияДанных)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДемонстрационныеСценарииОписанияСценария.Ссылка             КАК Ссылка,
	|	ДемонстрационныеСценарииОписанияСценария.КодЯзыка           КАК КодЯзыка,
	|	ДемонстрационныеСценарииОписанияСценария.ПрисоединенныйФайл КАК ПрисоединенныйФайл
	|ИЗ
	|	Справочник.ДемонстрационныеСценарии.ОписанияСценария КАК ДемонстрационныеСценарииОписанияСценария
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДемонстрационныеСценарииПрисоединенныеФайлы КАК ДемонстрационныеСценарииПрисоединенныеФайлы
	|		ПО ДемонстрационныеСценарииОписанияСценария.ПрисоединенныйФайл = ДемонстрационныеСценарииПрисоединенныеФайлы.Ссылка
	|ГДЕ
	|	(НЕ ДемонстрационныеСценарииПрисоединенныеФайлы.ПометкаУдаления)
	|	И ДемонстрационныеСценарииОписанияСценария.Ссылка В (&МассивСценариев)";
	
	Запрос.УстановитьПараметр("МассивСценариев", СценарииДляПолученияДанных);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДанныеФайла   = РаботаСФайлами.ДанныеФайла(Выборка.ПрисоединенныйФайл);
		ТекстОписания = ДемонстрационныеСценарии.ТекстHTMLПоДаннымПрисоединенногоФайла(ДанныеФайла);
		
		СтрокаДерева = СценарииСтрокиДерева.Получить(Выборка.Ссылка);
		Если СтрокаДерева <> Неопределено Тогда
			
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("КодЯзыка", Выборка.КодЯзыка);
			
			НайденныеСтроки = СтрокаДерева.Строки.НайтиСтроки(ПараметрыПоиска);
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				
				СтрокаСОписанием = СтрокаДерева.Строки.Вставить(0);
				СтрокаСОписанием.КодЯзыка                   = Выборка.КодЯзыка;
				СтрокаСОписанием.Представление              = Выборка.КодЯзыка;
				СтрокаСОписанием.ТипСтрокиНастройкиЗагрузки = "Описание";
				СтрокаСОписанием.СтатусФайлов  = Перечисления.СтатусыСравненияФайловОписанийПроцессов.ОтсутствуетВЗагрузке;
				
			Иначе
				
				СтрокаСОписанием = НайденныеСтроки[0];
				
			КонецЕсли;
			
			СтрокаСОписанием.ДанныеБазы         = ТекстОписания;
			СтрокаСОписанием.ХэшДанныеБазы      = ДемонстрационныеСценарии.ХешТекста(ТекстОписания);
			СтрокаСОписанием.ПрисоединенныйФайл = Выборка.ПрисоединенныйФайл;
			СтрокаСОписанием.Сценарий           = Выборка.Ссылка;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьДанныеСуществующихСценариев(ПараметрыФормирования, СценарииСтрокиДерева)
	
	СценарииДляПолученияДанных = Новый Массив;
	
	Для Каждого ЭлементСоответствия Из СценарииСтрокиДерева Цикл
		
		СценарииДляПолученияДанных.Добавить(ЭлементСоответствия.Ключ);
		
	КонецЦикла;
	
	ПолучитьДанныеРеквизитовСценариев(СценарииСтрокиДерева, СценарииДляПолученияДанных);
	ДополнитьДаннымиОтсутствующихВВыгрузкеСценариев(ПараметрыФормирования, СценарииСтрокиДерева, СценарииДляПолученияДанных);
	ПолучитьДанныеОписанийСценариев(ПараметрыФормирования, СценарииСтрокиДерева, СценарииДляПолученияДанных);
	
КонецПроцедуры

Процедура ДополнитьДаннымиОтсутствующихВВыгрузкеСценариев(ПараметрыФормирования, СценарииСтрокиДерева, СценарииДляПолученияДанных)
	
	Если ПараметрыФормирования.ЭтоЧастичнаяВыгрузка Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДемонстрационныеСценарии.Ссылка              КАК СсылкаОписаниеПроцессов,
	|	ДемонстрационныеСценарии.ПометкаУдаления     КАК ПометкаУдаления,
	|	ДемонстрационныеСценарии.Родитель            КАК Родитель,
	|	ДемонстрационныеСценарии.ЭтоГруппа           КАК ЭтоГруппа,
	|	ДемонстрационныеСценарии.Код                 КАК Код,
	|	ДемонстрационныеСценарии.Наименование        КАК Наименование,
	|	ДемонстрационныеСценарии.ПолныйКод           КАК ПолныйКод,
	|	ДемонстрационныеСценарии.Статус              КАК Статус,
	|	ДемонстрационныеСценарии.Комментарий         КАК Комментарий,
	|	ДемонстрационныеСценарии.ХэшДанныхПоставщика КАК ХэшДанныхПоставщика,
	|	ДемонстрационныеСценарии.ТипГруппы           КАК ТипГруппы,
	|	ДемонстрационныеСценарии.НаименованиеЯзык1   КАК НаименованиеЯзык1,
	|	ДемонстрационныеСценарии.НаименованиеЯзык2   КАК НаименованиеЯзык2,
	|	ДемонстрационныеСценарии.ПрофилиГруппДоступа.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Профиль КАК Профиль
	|	) КАК ПрофилиГруппДоступа,
	|	ДемонстрационныеСценарии.ОбъектыКонфигурации.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		ОбъектКонфигурации КАК ОбъектКонфигурации
	|	) КАК ОбъектыКонфигурации,
	|	ДемонстрационныеСценарии.ОписанияСценария.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		КодЯзыка КАК КодЯзыка,
	|		ПрисоединенныйФайл КАК ПрисоединенныйФайл,
	|		ХэшДанныхПоставщика КАК ХэшДанныхПоставщика
	|	) КАК ОписанияСценария
	|ИЗ
	|	Справочник.ДемонстрационныеСценарии КАК ДемонстрационныеСценарии
	|ГДЕ
	|	ДемонстрационныеСценарии.Ссылка НЕ В (&МассивСценариев)
	|УПОРЯДОЧИТЬ ПО
	|	ПолныйКод
	|ИТОГИ ПО
	|	СсылкаОписаниеПроцессов ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("МассивСценариев", СценарииДляПолученияДанных);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоДанных = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);

	Для Каждого СтрокаДерева Из ДеревоДанных.Строки Цикл
		
		ДобавитьОтсутствующиеСценарииВВыгрузкеПоСтрокеДерева(ПараметрыФормирования.ДеревоОписанийПроцессов, СтрокаДерева, СценарииСтрокиДерева, Неопределено);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьОтсутствующиеСценарииВВыгрузкеПоСтрокеДерева(НастройкиЗагрузкиОписанияПроцессов, СтрокаДерева, СценарииСтрокиДерева, СтрокаДереваОписанийРодитель)
	
	СтрокаДереваОписанийТекущая = СценарииСтрокиДерева.Получить(СтрокаДерева.СсылкаОписаниеПроцессов);
	
	Если СтрокаДереваОписанийТекущая = Неопределено Тогда
		
		Если СтрокаДереваОписанийРодитель = Неопределено Тогда
			
			КоллекцияСтрок = НастройкиЗагрузкиОписанияПроцессов.Строки;
			
		Иначе
			
			КоллекцияСтрок = СтрокаДереваОписанийРодитель.Строки;
			
		КонецЕсли;
		
		СтрокаДереваОписанийТекущая = КоллекцияСтрок.Добавить();
		
		ДанныеРеквизитовОписания = ДемонстрационныеСценарии.НовыйДанныеРеквизитовОписаниеПроцессов();
		
		ЗаполнитьЗначенияСвойств(ДанныеРеквизитовОписания, СтрокаДерева, , "ПрофилиГруппДоступа, ОбъектыКонфигурации");
		
		ПодчиненнаяСтрокаРеквизиты = Неопределено;
		Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.Строки Цикл
			
			Если ПодчиненнаяСтрока.СсылкаОписаниеПроцессов = СтрокаДерева.СсылкаОписаниеПроцессов Тогда
				ПодчиненнаяСтрокаРеквизиты = ПодчиненнаяСтрока;
			КонецЕсли;
			
		КонецЦикла;
		
		ДанныеРеквизитовОписания.Ссылка              = СтрокаДерева.СсылкаОписаниеПроцессов;
		ДанныеРеквизитовОписания.ПрофилиГруппДоступа = ПодчиненнаяСтрокаРеквизиты.ПрофилиГруппДоступа;
		ДанныеРеквизитовОписания.ОбъектыКонфигурации = ПодчиненнаяСтрокаРеквизиты.ОбъектыКонфигурации;
		
		ТекстJSONРеквизитыОписаниеПроцессов = ДемонстрационныеСценарии.ТекстJSONРеквизитыОписаниеПроцессов(ДанныеРеквизитовОписания); 
		
		Если СтрокаДерева <> Неопределено Тогда
			
			СтрокаДереваОписанийТекущая.ДанныеБазы                 = ТекстJSONРеквизитыОписаниеПроцессов;
			СтрокаДереваОписанийТекущая.ХэшДанныеБазы              = ДемонстрационныеСценарии.ХешТекста(ТекстJSONРеквизитыОписаниеПроцессов);
			СтрокаДереваОписанийТекущая.ПолныйКод                  = СтрокаДерева.ПолныйКод;
			СтрокаДереваОписанийТекущая.Сценарий                   = СтрокаДерева.СсылкаОписаниеПроцессов;
			СтрокаДереваОписанийТекущая.ТипСтрокиНастройкиЗагрузки = "Сценарий";
			СтрокаДереваОписанийТекущая.Представление              = СтрокаДерева.Наименование;
			СтрокаДереваОписанийТекущая.СтатусФайлов               = Перечисления.СтатусыСравненияФайловОписанийПроцессов.ОтсутствуетВЗагрузке;
			СтрокаДереваОписанийТекущая.ЧтоДелать                  = Перечисления.ВариантыДействийПриЗагрузкеОписанийПроцессов.Удалить;
			
		КонецЕсли; 
		
		СценарииСтрокиДерева.Вставить(СтрокаДереваОписанийТекущая.Сценарий, СтрокаДереваОписанийТекущая);
		
		Для Каждого СтрокаОписанияСценария Из ПодчиненнаяСтрокаРеквизиты.ОписанияСценария Цикл
			
			Попытка
				ДанныеФайла   = РаботаСФайлами.ДанныеФайла(СтрокаОписанияСценария.ПрисоединенныйФайл);
				ТекстОписания = ДемонстрационныеСценарии.ТекстHTMLПоДаннымПрисоединенногоФайла(ДанныеФайла);
			Исключение
				ТекстОписания = "";
			КонецПопытки;
		
			СтрокаСОписанием = СтрокаДереваОписанийТекущая.Строки.Вставить(0);
			СтрокаСОписанием.КодЯзыка                   = СтрокаОписанияСценария.КодЯзыка;
			СтрокаСОписанием.Представление              = СтрокаОписанияСценария.КодЯзыка;
			СтрокаСОписанием.ТипСтрокиНастройкиЗагрузки = "Описание";
			СтрокаСОписанием.СтатусФайлов  = Перечисления.СтатусыСравненияФайловОписанийПроцессов.ОтсутствуетВЗагрузке;
			
			СтрокаСОписанием.ДанныеБазы         = ТекстОписания;
			СтрокаСОписанием.ХэшДанныеБазы      = ДемонстрационныеСценарии.ХешТекста(ТекстОписания);
			СтрокаСОписанием.ПрисоединенныйФайл = СтрокаОписанияСценария.ПрисоединенныйФайл;
			СтрокаСОписанием.Сценарий           = СтрокаДереваОписанийТекущая.Сценарий;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.Строки Цикл
		
		ДобавитьОтсутствующиеСценарииВВыгрузкеПоСтрокеДерева(НастройкиЗагрузкиОписанияПроцессов, ПодчиненнаяСтрока, СценарииСтрокиДерева, СтрокаДереваОписанийТекущая)
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьДанныеРеквизитовСценариев(СценарииСтрокиДерева, СценарииДляПолученияДанных)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДемонстрационныеСценарии.Ссылка              КАК СсылкаОписаниеПроцессов,
	|	ДемонстрационныеСценарии.ПометкаУдаления     КАК ПометкаУдаления,
	|	ДемонстрационныеСценарии.Родитель            КАК Родитель,
	|	ДемонстрационныеСценарии.ЭтоГруппа           КАК ЭтоГруппа,
	|	ДемонстрационныеСценарии.Код                 КАК Код,
	|	ДемонстрационныеСценарии.Наименование        КАК Наименование,
	|	ДемонстрационныеСценарии.ПолныйКод           КАК ПолныйКод,
	|	ДемонстрационныеСценарии.Статус              КАК Статус,
	|	ДемонстрационныеСценарии.Комментарий         КАК Комментарий,
	|	ДемонстрационныеСценарии.ХэшДанныхПоставщика КАК ХэшДанныхПоставщика,
	|	ДемонстрационныеСценарии.ТипГруппы           КАК ТипГруппы,
	|	ДемонстрационныеСценарии.НаименованиеЯзык1   КАК НаименованиеЯзык1,
	|	ДемонстрационныеСценарии.НаименованиеЯзык2   КАК НаименованиеЯзык2,
	|	ДемонстрационныеСценарии.ПрофилиГруппДоступа.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Профиль КАК Профиль
	|	) КАК ПрофилиГруппДоступа,
	|	ДемонстрационныеСценарии.ОбъектыКонфигурации.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		ОбъектКонфигурации КАК ОбъектКонфигурации
	|	) КАК ОбъектыКонфигурации
	|ИЗ
	|	Справочник.ДемонстрационныеСценарии КАК ДемонстрационныеСценарии
	|ГДЕ
	|	ДемонстрационныеСценарии.Ссылка В (&МассивСценариев)";
	
	Запрос.УстановитьПараметр("МассивСценариев", СценарииДляПолученияДанных);
	
	Результат = Запрос.Выполнить();
	ВыборкаСсылкаОписаниеПроцессов = Результат.Выбрать();
	
	Пока ВыборкаСсылкаОписаниеПроцессов.Следующий() Цикл
		
		ДанныеРеквизитовОписания = ДемонстрационныеСценарии.НовыйДанныеРеквизитовОписаниеПроцессов();
		
		ЗаполнитьЗначенияСвойств(ДанныеРеквизитовОписания, ВыборкаСсылкаОписаниеПроцессов, , "ПрофилиГруппДоступа, ОбъектыКонфигурации");
		
		ДанныеРеквизитовОписания.Ссылка              = ВыборкаСсылкаОписаниеПроцессов.СсылкаОписаниеПроцессов;
		ДанныеРеквизитовОписания.ПрофилиГруппДоступа = ВыборкаСсылкаОписаниеПроцессов.ПрофилиГруппДоступа.Выгрузить();
		ДанныеРеквизитовОписания.ОбъектыКонфигурации = ВыборкаСсылкаОписаниеПроцессов.ОбъектыКонфигурации.Выгрузить();
		
		ТекстJSONРеквизитыОписаниеПроцессов = ДемонстрационныеСценарии.ТекстJSONРеквизитыОписаниеПроцессов(ДанныеРеквизитовОписания); 
		
		СтрокаДерева = СценарииСтрокиДерева.Получить(ВыборкаСсылкаОписаниеПроцессов.СсылкаОписаниеПроцессов);
		Если СтрокаДерева <> Неопределено Тогда
			СтрокаДерева.ДанныеБазы          = ТекстJSONРеквизитыОписаниеПроцессов;
			СтрокаДерева.ХэшДанныеБазы       = ДемонстрационныеСценарии.ХешТекста(ТекстJSONРеквизитыОписаниеПроцессов);
			СтрокаДерева.ПолныйКод           = ВыборкаСсылкаОписаниеПроцессов.ПолныйКод; 
			СтрокаДерева.ХэшДанныхПоставщика = ВыборкаСсылкаОписаниеПроцессов.ХэшДанныхПоставщика;
			СтрокаДерева.СсылкаСуществует    = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьФайлыДеревоОписанийПоКаталогу(КоллекцияЭлементов, КаталогСФайлами, ИдентификаторыСтрокиДерева);

	ФайлыВКаталоге = НайтиФайлы(КаталогСФайлами, ПолучитьМаскуВсеФайлыСервера(), Ложь);
	
	ДанныеФайловВКаталоге = ДанныеФайловВКаталоге(ФайлыВКаталоге);
	
	СтрокаТекущегоЭлемента = Неопределено;
	
	Если ДанныеФайловВКаталоге.Реквизиты <> Неопределено Тогда
		
		НоваяСтрока = КоллекцияЭлементов.Добавить();
		НоваяСтрока.ИдентификаторСценария      = ДанныеФайловВКаталоге.Реквизиты.ИдентификаторЭлемента;
		НоваяСтрока.ДанныеФайла                = ДанныеФайловВКаталоге.Реквизиты.ДанныеРеквизиты;
		НоваяСтрока.ТипСтрокиНастройкиЗагрузки = "Сценарий";
		
		СтрокаТекущегоЭлемента = НоваяСтрока;
		
		ИдентификаторыСтрокиДерева.Вставить(НоваяСтрока.ИдентификаторСценария, СтрокаТекущегоЭлемента);
		
	КонецЕсли;
	
	Если СтрокаТекущегоЭлемента <> Неопределено Тогда
		
		КоллекцияПодчиненных = СтрокаТекущегоЭлемента.Строки;
		
		Для Каждого ДанныеОписания Из ДанныеФайловВКаталоге.Описания Цикл
			
			СтрокаОписания = СтрокаТекущегоЭлемента.Строки.Добавить();
			СтрокаОписания.КодЯзыка                   = ДанныеОписания.КодЯзыка;
			СтрокаОписания.ДанныеФайла                = ДанныеОписания.ТекстHTML;
			СтрокаОписания.Представление              = СтрокаОписания.КодЯзыка;
			СтрокаОписания.ТипСтрокиНастройкиЗагрузки = "Описание";
			
		КонецЦикла;
		
	Иначе
		
		КоллекцияПодчиненных =  КоллекцияЭлементов;
		
	КонецЕсли;
	
	Для Каждого ИмяКаталога Из ДанныеФайловВКаталоге.Каталоги Цикл
		
		ДобавитьФайлыДеревоОписанийПоКаталогу(КоллекцияПодчиненных, ИмяКаталога, ИдентификаторыСтрокиДерева);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// Данные файлов в каталоге.
// 
// Параметры:
//  ФайлыВКаталоге - Массив Из Файл - Файлы в каталоге
// 
// Возвращаемое значение:
//  Структура - Данные файлов в каталоге:
// * Каталоги - Массив Из Строка - 
// * Описания - Массив Из Структура - 
// * Реквизиты - Неопределено - 
Функция ДанныеФайловВКаталоге(ФайлыВКаталоге)
	
	ДанныеФайловВКаталоге = Новый Структура;
	ДанныеФайловВКаталоге.Вставить("Каталоги",   Новый Массив);
	ДанныеФайловВКаталоге.Вставить("Описания",   Новый Массив);
	ДанныеФайловВКаталоге.Вставить("Реквизиты ", Неопределено);
	
	Для Каждого ДанныеФайла Из ФайлыВКаталоге Цикл
		
		Если ПустаяСтрока(ДанныеФайла.Расширение) Тогда
			
			ДанныеФайловВКаталоге.Каталоги.Добавить(ДанныеФайла.ПолноеИмя);
			
		ИначеЕсли НРег(ДанныеФайла.Расширение) = ".html" Тогда
			
			ДанныеПоИмениФайла = ДемонстрационныеСценарииКлиентСервер.КодЯзыкаИдентификаторИзИмениФайлаОписания(ДанныеФайла.ИмяБезРасширения);
		
			ЧтениеТекста = Новый ЧтениеТекста(ДанныеФайла.ПолноеИмя, , , , Ложь);
			ТекстHTML    = СокрЛП(ЧтениеТекста.Прочитать());
			ЧтениеТекста.Закрыть();
		
			ДанныеФайла = Новый Структура;
		
			ДанныеФайла.Вставить("ТекстHTML", ТекстHTML);
			ДанныеФайла.Вставить("КодЯзыка",  ДанныеПоИмениФайла.КодЯзыка);
			
			ДанныеФайловВКаталоге.Описания.Добавить(ДанныеФайла);
			
		ИначеЕсли НРег(ДанныеФайла.Расширение) = ".json" Тогда
			
			ИдентификаторЭлемента = ДемонстрационныеСценарииКлиентСервер.ИдентификаторИзИмениФайлаРеквизиты(ДанныеФайла.ИмяБезРасширения);
			
			ЧтениеТекста = Новый ЧтениеТекста(ДанныеФайла.ПолноеИмя, , , , Ложь);
			ТекстРеквизиты    = СокрЛП(ЧтениеТекста.Прочитать());
			ЧтениеТекста.Закрыть();
			
			ДанныеФайла = Новый Структура;
		
			ДанныеФайла.Вставить("ДанныеРеквизиты",       ТекстРеквизиты);
			ДанныеФайла.Вставить("ИдентификаторЭлемента", ИдентификаторЭлемента);
			
			ДанныеФайловВКаталоге.Реквизиты = ДанныеФайла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеФайловВКаталоге;
	
КонецФункции 

Процедура ЗаполнитьТаблицуСкриншотов(КаталогРазархивированныхФайлов, Скриншоты) 
	
	ИмяКаталога = КаталогРазархивированныхФайлов 
	              + ДемонстрационныеСценарииКлиентСервер.ИмяКаталогаВыгрузкиСкриншоты() 
	              + ПолучитьРазделительПути();
	
	ФайлыВКаталоге = НайтиФайлы(ИмяКаталога, "*.png", Ложь);
	
	Для Каждого ИнформацияОФайле Из ФайлыВКаталоге Цикл
		 ДобавитьСтрокуИнформацииОФайлеСкриншота(Скриншоты, ИнформацияОФайле);
	КонецЦикла;
	
КонецПроцедуры


// Добавить строку информации о файле скриншота.
// 
// Параметры:
//  Скриншоты - ТаблицаЗначений - содержит колонки:
//  	* ИдентификаторСкриншота - Строка -
//  	* ДвоичныеДанные         - ДвоичныеДанные -
//  ИнформацияОФайле - Файл - информация о файле скриншота
Процедура ДобавитьСтрокуИнформацииОФайлеСкриншота(Скриншоты, ИнформацияОФайле) 
	
	НоваяСтрока = Скриншоты.Добавить();
	НоваяСтрока.ИдентификаторСкриншота = ИнформацияОФайле.ИмяБезРасширения;
	НоваяСтрока.ДвоичныеДанные         = Новый ДвоичныеДанные(ИнформацияОФайле.ПолноеИмя);
	
КонецПроцедуры


#КонецОбласти

#КонецОбласти

#КонецЕсли