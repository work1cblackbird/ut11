
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ВызватьИсключение НСтр("ru = 'Документ не предназначен для интерактивного ввода.'");
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	Если РаботаСПрочтениямиВызовСервера.УстановитьСвойствоПрочтен(Объект.Ссылка, Истина) Тогда	
		ОповеститьОПрочтении = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект);
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ЗаполнитьДанныеДокумента();
	
	НастроитьОформлениеФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОжидатьПолученияДанныхПросмотра();
	
	Если ОповеститьОПрочтении Тогда
		Оповестить("ПрочтениеОбновитьСписок", Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПоказатьКомментарийСостояния(Элемент)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(КомментарийСостояния, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СоставПакета_ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	РезультатОбработки = СоставПакета_ОбработкаНавигационнойСсылкиНаСервере(НавигационнаяСсылка);
	
	ПакетыДокументовЭДОКлиент.ЭлементУправленияПакета_ОбработкаНавигационнойСсылки(
		ЭтотОбъект, Элемент, НавигационнаяСсылка, СтандартнаяОбработка, РезультатОбработки);
	
	Если РаботаСПрочтениямиВызовСервера.УстановитьСвойствоПрочтен(Объект.Ссылка, Истина) Тогда	
		Оповестить("ПрочтениеОбновитьСписок", Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СоставПакета_Нажатие(Элемент, СтандартнаяОбработка)
	
	ПакетыДокументовЭДОКлиент.ЭлементУправленияПакета_Нажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ОбработчикиКомандФормыОсновные

&НаКлиенте
Процедура Утвердить(Команда)
	ВыполнитьДействиеУтвердить(СостоянияПакетаОднородно);
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьОтправить(Команда)
	ВыполнитьДействияПодписатьОтправить(СостоянияПакетаОднородно);
КонецПроцедуры

&НаКлиенте
Процедура Подписать(Команда)
	ВыполнитьДействиеПодписать(СостоянияПакетаОднородно);
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	ВыполнитьДействиеОтправить(СостоянияПакетаОднородно);
КонецПроцедуры

&НаКлиенте
Процедура Аннулировать(Команда)
	ВыполнитьДействиеАннулировать(СостоянияПакетаОднородно);
КонецПроцедуры

&НаКлиенте
Процедура ПринятьАннулирование(Команда)
	ВыполнитьДействиеПринятьАннулирование(СостоянияПакетаОднородно);
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьАннулирование(Команда)
	ВыполнитьДействиеОтклонитьАннулирование(СостоянияПакетаОднородно);
КонецПроцедуры

&НаКлиенте
Процедура Отклонить(Команда)
	ВыполнитьДействиеОтклонить(СостоянияПакетаОднородно);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВАрхив(Команда)
	ВыполнитьДействиеОтправитьВАрхив(СостоянияПакетаОднородно);
КонецПроцедуры

&НаКлиенте
Процедура Завершить(Команда)
	ВыполнитьДействиеЗакрытьПринудительно(СостоянияПакетаОднородно);
КонецПроцедуры

&НаКлиенте
Процедура ВернутьВРаботу(Команда)
	ВыполнитьДействиеВернутьВРаботу(СостоянияПакетаОднородно);
КонецПроцедуры

&НаКлиенте
Процедура УтвердитьДокумент(Команда)
	ВыполнитьДействиеУтвердить();
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьОтправитДокумент(Команда)
	ВыполнитьДействияПодписатьОтправить();
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьДокумент(Команда)
	ВыполнитьДействиеПодписать();
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьДокумент(Команда)
	ВыполнитьДействиеОтправить();
КонецПроцедуры

&НаКлиенте
Процедура АннулироватьДокумент(Команда)
	ВыполнитьДействиеАннулировать();
КонецПроцедуры

&НаКлиенте
Процедура ПринятьАннулированиеДокумент(Команда)
	ВыполнитьДействиеПринятьАннулирование();
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьАннулированиеДокумент(Команда)
	ВыполнитьДействиеОтклонитьАннулирование();
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьДокумент(Команда)
	ВыполнитьДействиеОтклонить();
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВАрхивДокумент(Команда)
	ВыполнитьДействиеОтправитьВАрхив();
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьДокумент(Команда)
	ВыполнитьДействиеЗакрытьПринудительно();
КонецПроцедуры

&НаКлиенте
Процедура ВернутьВРаботуДокумент(Команда)
	ВыполнитьДействиеВернутьВРаботу();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПроизвольныйДокумент(Команда)
	
	ИнтерфейсДокументовЭДОКлиент.ОткрытьНовыйПроизвольныйЭлектронныйДокументНаОсновании(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьДанныеИзСервиса();
	
	ОжидатьПолученияДанныхПросмотра();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормыЕще

&НаКлиенте
Процедура Перенаправить(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстОшибки = НСтр("ru = 'Электронный документ не сформирован. Работа с ним невозможна.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ИдентификаторПакета) И СостоянияПакетаОднородно Тогда
		ЭлектронныеДокументы = ПакетыДокументовЭДОВызовСервера.ДокументыПакета(ИдентификаторПакета);
	Иначе
		ЭлектронныеДокументы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка);
	КонецЕсли;
	
	ИнтерфейсДокументовЭДОКлиент.ПеренаправитьЭлектронныеДокументы(ЭлектронныеДокументы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПовторно(Команда)
	
	ВыполнитьДействиеОтправитьПовторно();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодписи(Команда)
	
	ПроверитьПодписиДокументаВСервисе();
	
	ОжидатьПроверкуПодписейДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьДополнительнуюИнформацию(Команда)
	
	ОтключитьВыводДопДанных = Не ОтключитьВыводДопДанных;
	Элементы.ОтображатьДополнительнуюИнформацию.Пометка = Не ОтключитьВыводДопДанных;
	
	СохранитьНастройкиОтображения();
	
	ОбновитьВизуализациюДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьОбластьКопияВерна(Команда)
	
	ОтключитьВыводКопияВерна = Не ОтключитьВыводКопияВерна;
	Элементы.ОтображатьОбластьКопияВерна.Пометка = Не ОтключитьВыводКопияВерна;	
	
	СохранитьНастройкиОтображения();
	
	ОбновитьВизуализациюДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьБанковскиеРеквизиты(Команда)
	
	ВыводитьБанковскиеРеквизиты = Не ВыводитьБанковскиеРеквизиты;
	Элементы.ОтображатьБанковскиеРеквизиты.Пометка = ВыводитьБанковскиеРеквизиты;
	
	СохранитьНастройкиОтображения();
	
	ОбновитьВизуализациюДокумента();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандОтраженияВУчете

&НаКлиенте
Процедура СоздатьДокументУчета(Команда)
	
	ПоказатьВыборСпособаОбработкиДляСозданияОбъектовУчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьДокументУчета1(Команда)
	
	ПоказатьВыборСпособаОбработкиДляПодбораОбъектаУчета(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьДокументУчета2(Команда)
	
	ПоказатьВыборСпособаОбработкиДляПодбораОбъектаУчета(2);
	
КонецПроцедуры

&НаКлиенте
Процедура РазорватьСвязьДокументаУчета1(Команда)
	
	ПоказатьВопросОРазрывеСвязи(1);
	
КонецПроцедуры

&НаКлиенте
Процедура РазорватьСвязьДокументаУчета2(Команда)
	
	ПоказатьВопросОРазрывеСвязи(2);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НастройкиФормы

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодписиПодписьВернаПредставление.Имя);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементОформления.Отбор,
		"Подписи.ПодписьВерна", ВидСравненияКомпоновкиДанных.Заполнено, Ложь);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла);	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОформлениеФормы()
	
	УстановитьЗаголовокФормы();
	
	УстановитьВидимостьИнформацииОПометкеУдаления();
	
	УстановитьВидимостьКоманд();
	
	СформироватьПанельСоставаПакета();
	
	НастроитьЭлементыОтраженияВУчете();
	
	УстановитьСтраницуСодержания();
	
	Элементы.ПодписиВыводКартинки.Видимость = Подписи.Итог("ВыводКартинки") = 1;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	Если СоставПакета.Количество() > 1 Тогда
		Заголовок = ПакетыДокументовЭДО.ЗаголовокОтображенияПакетов(СоставПакета.Количество());
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ВидДокумента) Тогда
		Заголовок = ПакетыДокументовЭДО.ЗаголовокНовогоПроизвольногоДокумента();
		Возврат;
	КонецЕсли;
	
	ПараметрыПредставления = ИнтерфейсДокументовЭДО.НовыеСвойстваПредставленияДокумента();
	ПараметрыПредставления.ВидДокумента = Объект.ВидДокумента;
	ПараметрыПредставления.НомерДокумента = Объект.НомерДокумента;
	ПараметрыПредставления.ДатаДокумента = Объект.ДатаДокумента;
	
	Заголовок = ИнтерфейсДокументовЭДО.ПредставлениеДокументаПоСвойствам(ПараметрыПредставления, Объект.Ссылка.Пустая());
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИнформацииОПометкеУдаления()
	Элементы.ГруппаИнформацияОПометкеУдаления.Видимость = Объект.ПометкаУдаления;
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКоманд()
	
	ЕстьПравоОбработкиДокумента = ПравоДоступа("Изменение", Объект.Ссылка.Метаданные());
	
	Элементы.СоздатьПроизвольныйДокумент.Видимость = ЕстьПравоОбработкиДокумента;
	Элементы.Перенаправить.Видимость = ЕстьПравоОбработкиДокумента;
	
	ПараметрыОпределенияДействий = ИнтеграцияОблачногоЭДО.НовыеПараметрыОпределенияДоступныхДействийПоЭДО();
	ПараметрыОпределенияДействий.ЭтоВходящийЭДО = Истина;
	ПараметрыОпределенияДействий.ТипДокумента = ТипДокумента;
	ПараметрыОпределенияДействий.НаОзнакомлении = Объект.НаОзнакомлении;
	ПараметрыОпределенияДействий.СостояниеДокумента = СостояниеЭДО;
	
	ДействияНаЭтапеДляДокумента = ИнтеграцияОблачногоЭДО.ДоступныеДействияПоЭДО(ПараметрыОпределенияДействий);
	
	Если СостоянияПакетаОднородно Тогда
		ПараметрыОпределенияДействий.СостояниеДокумента = СостояниеПакета;
		ДействияНаЭтапе = ИнтеграцияОблачногоЭДО.ДоступныеДействияПоЭДО(ПараметрыОпределенияДействий);
	Иначе
		ДействияНаЭтапе = ДействияНаЭтапеДляДокумента;
	КонецЕсли;
	
	Элементы.Подписать.Видимость = Ложь;
	Элементы.ПодписатьДокумент.Видимость = Ложь;
	Элементы.Отправить.Видимость = Ложь;
	Элементы.ОтправитьДокумент.Видимость = Ложь;
	Элементы.ПодписатьОтправить.Видимость = Ложь;
	Элементы.ПодписатьОтправитьДокумент.Видимость = Ложь;
	
	Если ЕстьДействиеПоЭДО(ДействияНаЭтапе, Перечисления.ДействияПоЭДО.Подписать)
		И ЕстьДействиеПоЭДО(ДействияНаЭтапе, Перечисления.ДействияПоЭДО.Отправить) Тогда
		Элементы.ПодписатьОтправить.Видимость = Истина;
	ИначеЕсли ЕстьДействиеПоЭДО(ДействияНаЭтапе, Перечисления.ДействияПоЭДО.Подписать) Тогда
		Элементы.Подписать.Видимость = Истина;
	ИначеЕсли ЕстьДействиеПоЭДО(ДействияНаЭтапе, Перечисления.ДействияПоЭДО.Отправить)
		Или ЕстьДействиеПоЭДО(ДействияНаЭтапе, Перечисления.ДействияПоЭДО.ПодготовитьКОтправке) Тогда
		Элементы.Отправить.Видимость = Истина;
	КонецЕсли;
	
	Если ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокумента, Перечисления.ДействияПоЭДО.Подписать)
		И ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокумента, Перечисления.ДействияПоЭДО.Отправить) Тогда
		Элементы.ПодписатьОтправитьДокумент.Видимость = Истина;
	ИначеЕсли ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокумента, Перечисления.ДействияПоЭДО.Подписать) Тогда
		Элементы.ПодписатьДокумент.Видимость = Истина;
	ИначеЕсли ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокумента, Перечисления.ДействияПоЭДО.Отправить) 
		Или ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокумента, Перечисления.ДействияПоЭДО.ПодготовитьКОтправке) Тогда
		Элементы.ОтправитьДокумент.Видимость = Истина;
	КонецЕсли;
	
	Элементы.Утвердить.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапе, Перечисления.ДействияПоЭДО.Утвердить);
	Элементы.УтвердитьДокумент.Видимость = Элементы.Утвердить.Видимость;
	
	Элементы.ПринятьАннулирование.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапе,
		Перечисления.ДействияПоЭДО.ПринятьАннулирование);
	Элементы.ПринятьАннулированиеДокумент.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокумента,
		Перечисления.ДействияПоЭДО.ПринятьАннулирование);
	
	Элементы.ОтклонитьАннулирование.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапе,
		Перечисления.ДействияПоЭДО.ОтклонитьАннулирование);
	Элементы.ОтклонитьАннулированиеДокумент.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокумента,
		Перечисления.ДействияПоЭДО.ОтклонитьАннулирование);
	
	Элементы.Отклонить.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапе, Перечисления.ДействияПоЭДО.Отклонить);
	Элементы.ОтклонитьДокумент.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокумента,
		Перечисления.ДействияПоЭДО.Отклонить);
	
	Элементы.Аннулировать.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапе, Перечисления.ДействияПоЭДО.Аннулировать);
	Элементы.АннулироватьДокумент.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокумента,
		Перечисления.ДействияПоЭДО.Аннулировать);
	
	Элементы.Завершить.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапе, Перечисления.ДействияПоЭДО.ЗакрытьПринудительно);
	Элементы.ЗавершитьДокумент.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокумента,
		Перечисления.ДействияПоЭДО.ЗакрытьПринудительно);
	
	Элементы.ОтправитьВАрхив.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапе, Перечисления.ДействияПоЭДО.ОтправитьВАрхив);
	Элементы.ОтправитьВАрхивДокумент.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокумента,
		Перечисления.ДействияПоЭДО.ОтправитьВАрхив);
	
	Элементы.ВернутьВРаботу.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапе, Перечисления.ДействияПоЭДО.ВернутьВРаботу);
	Элементы.ВернутьВРаботуДокумент.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокумента,
		Перечисления.ДействияПоЭДО.ВернутьВРаботу);
	
	Элементы.ОтправитьПовторно.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапе,
		Перечисления.ДействияПоЭДО.ОтправитьПовторно);
	
	ПакетСоставной = СоставПакета.Количество() > 1;
	
	Элементы.ДействияСДокументом.Видимость = ПакетСоставной И СостоянияПакетаОднородно;
	
	Элементы.Утвердить.Заголовок = ИнтерфейсДокументовЭДО.ПредставлениеКомандыУтвердить(ПакетСоставной, СостоянияПакетаОднородно);
	Элементы.Подписать.Заголовок = ИнтерфейсДокументовЭДО.ПредставлениеКомандыПодписать(ПакетСоставной, СостоянияПакетаОднородно);
	Элементы.Отправить.Заголовок = ИнтерфейсДокументовЭДО.ПредставлениеКомандыОтправить(ПакетСоставной, СостоянияПакетаОднородно);
	Элементы.ПодписатьОтправить.Заголовок = ИнтерфейсДокументовЭДО.ПредставлениеКомандыПодписатьИОтправить(ПакетСоставной, СостоянияПакетаОднородно);
	Элементы.ПринятьАннулирование.Заголовок = ИнтерфейсДокументовЭДО.ПредставлениеКомандыПринятьАннулирование(ПакетСоставной, СостоянияПакетаОднородно);
	Элементы.ОтклонитьАннулирование.Заголовок = ИнтерфейсДокументовЭДО.ПредставлениеКомандыОтклонитьАннулирование(ПакетСоставной, СостоянияПакетаОднородно);		
	Элементы.Отклонить.Заголовок = ИнтерфейсДокументовЭДО.ПредставлениеКомандыОтклонить(ПакетСоставной, СостоянияПакетаОднородно);
	Элементы.Аннулировать.Заголовок = ИнтерфейсДокументовЭДО.ПредставлениеКомандыАннулировать(ПакетСоставной, СостоянияПакетаОднородно);
	Элементы.ОтправитьВАрхив.Заголовок = ИнтерфейсДокументовЭДО.ПредставлениеКомандыОтправитьВАрхив(ПакетСоставной, СостоянияПакетаОднородно);
	Элементы.ВернутьВРаботу.Заголовок = ИнтерфейсДокументовЭДО.ПредставлениеКомандыВернутьВРаботу(ПакетСоставной, СостоянияПакетаОднородно);
	Элементы.Завершить.Заголовок = ИнтерфейсДокументовЭДО.ПредставлениеКомандыЗакрытьПринудительно(ПакетСоставной, СостоянияПакетаОднородно);
	
КонецПроцедуры

&НаСервере
Функция ЕстьДействиеПоЭДО(ДоступныеДействия, ДействиеПоЭДО)
	Возврат ИнтерфейсДокументовЭДО.ЕстьДействиеПоЭДО(ДоступныеДействия, ДействиеПоЭДО);
КонецФункции

&НаСервере
Процедура СформироватьПанельСоставаПакета()

	ПакетыДокументовЭДО.СформироватьПанельСоставаПакета(ЭтотОбъект, Элементы.ГруппаСоставПакета,
		КоличествоОтображаемыхДокументовПакета, Перечисления.НаправленияЭДО.Входящий);

	ПакетыДокументовЭДО.ЗаполнитьПанельСоставаПакета(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыОтраженияВУчете()
	
	ЕстьПравоОбработкиДокумента = ПравоДоступа("Изменение", Объект.Ссылка.Метаданные());
	
	Элементы.ГруппаОшибкиСопоставленияНоменклатуры.Видимость = Ложь;
	
	КоличествоОбъектовУчета = ОбъектыУчетаДокумента.Количество();
	
	ИспользуетсяДополнительныйДокумент = СпособыОбработкиДополнительные.Количество() > 0;
	
	НетОбъектовУчета = (КоличествоОбъектовУчета = 0);
	ОдинОбъектУчета = (КоличествоОбъектовУчета = 1);
	ДваОбъектаУчета = (КоличествоОбъектовУчета = 2);
	МногоОбъектовУчета = (КоличествоОбъектовУчета > 2);
	
	Элементы.ГруппаСоздатьДокументУчета.Видимость = НетОбъектовУчета И ЕстьПравоОбработкиДокумента;
	Элементы.КомандаПодобратьДокументУчета1.Видимость = НетОбъектовУчета И ЕстьПравоОбработкиДокумента;
	Элементы.КомандаОткрытьДокументУчета1.Видимость = ОдинОбъектУчета;
	Элементы.КомандаРазорватьСвязьДокументаУчета1.Видимость = ОдинОбъектУчета И ЕстьПравоОбработкиДокумента;
	
	Элементы.КомандаПодобратьДокументУчета2.Видимость = ОдинОбъектУчета И ИспользуетсяДополнительныйДокумент
		И ЕстьПравоОбработкиДокумента;
	Элементы.КомандаОткрытьДокументУчета2.Видимость = ДваОбъектаУчета И ИспользуетсяДополнительныйДокумент;
	Элементы.КомандаРазорватьСвязьДокументаУчета2.Видимость = ДваОбъектаУчета И ИспользуетсяДополнительныйДокумент
		И ЕстьПравоОбработкиДокумента;
	
	Если ОдинОбъектУчета Тогда
		Элементы.КомандаОткрытьДокументУчета1.Заголовок = Строка(ОбъектыУчетаДокумента[0].ОбъектУчета);
	КонецЕсли;
	
	Если ДваОбъектаУчета Тогда
		Элементы.КомандаОткрытьДокументУчета1.Заголовок = Строка(ОбъектыУчетаДокумента[0].ОбъектУчета);
		Элементы.КомандаОткрытьДокументУчета2.Заголовок = Строка(ОбъектыУчетаДокумента[1].ОбъектУчета);
	КонецЕсли;
	
	Если ИспользуетсяДополнительныйДокумент Тогда
		
		ЕстьОсновнойДокумент = ЕстьОтражениеВОбъектУчета(ОбъектыУчетаДокумента, СпособыОбработкиОсновные);
		
		ТекстВторогоДокумента =  НСтр("ru = 'подобрать...'");
		
		Если ОдинОбъектУчета Тогда
			
			Если ЕстьОсновнойДокумент И СпособыОбработкиДополнительные.Количество() = 1 Тогда
				
				ТекстВторогоДокумента = СтрШаблон(НСтр("ru = 'подобрать ""%1""'"),
					СпособыОбработкиДополнительные[0].Представление);
				
			ИначеЕсли Не ЕстьОсновнойДокумент И СпособыОбработкиОсновные.Количество() = 1 Тогда
				
				ТекстВторогоДокумента = СтрШаблон(НСтр("ru = 'подобрать ""%1""'"),
					СпособыОбработкиОсновные[0].Представление);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Элементы.КомандаПодобратьДокументУчета2.Заголовок = ТекстВторогоДокумента;
		
	КонецЕсли;
	
	Элементы.КомандаПоказатьВсеДокументыУчета.Видимость = ОдинОбъектУчета;
	Если МногоОбъектовУчета Тогда
		Элементы.КомандаПоказатьВсеДокументыУчета.Заголовок = СтрШаблон(НСтр("ru = 'Список документов (%1)'"), КоличествоОбъектовУчета);
	Иначе
		Элементы.КомандаПоказатьВсеДокументыУчета.Заголовок = НСтр("ru = 'Еще...'");
	КонецЕсли;
	
	Если СоставПакета.Количество() > 1 Тогда
		ТекстПредметаСопоставления = НСтр("ru = 'В пакете документов имеется'"); 
	Иначе
		ТекстПредметаСопоставления = НСтр("ru = 'В электронном документе имеется'"); 
	КонецЕсли;
	
	ТекстСообщенияОСопоставлении = СтроковыеФункции.ФорматированнаяСтрока("%1 <a href = ""Сопоставить"">%2</a> %3",
		ТекстПредметаСопоставления, НСтр("ru = 'несопоставленная'"), НСтр("ru = 'номенклатура'"));
	
	Элементы.НадписьОшибкиСопоставленияНоменклатуры.Заголовок = ТекстСообщенияОСопоставлении;
	
	Элементы.НадписьДокументыУчета.Заголовок = ?(ДваОбъектаУчета, НСтр("ru = 'Документы учета:'"), НСтр("ru = 'Документ учета:'"));
	
	Элементы.ГруппаОшибкиСопоставленияНоменклатуры.Видимость = ЕстьНоменклатураНаКонтроле
		И ЕстьПравоОбработкиДокумента;
	
	Элементы.ГруппаНевозможноОтразитьВУчете.Видимость = НетОбъектовУчета И Не ЕстьВозможностьОтраженияВУчете
		И ЕстьПравоОбработкиДокумента;
	
	Элементы.ГруппаОтражениеВУчете.Видимость = ЕстьВозможностьОтраженияВУчете;
	
	Элементы.КомандаПоказатьВсеДокументыУчета.Видимость = ЕстьВозможностьОтраженияВУчете
		И ЕстьПравоОбработкиДокумента;
	
КонецПроцедуры

// Параметры:
//  ОбъектыУчетаДокумента - см. Обработка.ИнтеграцияОблачногоЭДО.Форма.ПросмотрВходящегоДокумента.ОбъектыУчетаДокумента
//  СпособыОбработки - см. Обработка.ИнтеграцияОблачногоЭДО.Форма.ПросмотрВходящегоДокумента.СпособыОбработкиОсновные
// 
// Возвращаемое значение:
//  Булево
&НаКлиентеНаСервереБезКонтекста
Функция ЕстьОтражениеВОбъектУчета(ОбъектыУчетаДокумента, СпособыОбработки)
	
	Результат = Ложь;
	
	Для Каждого ОбъектУчетаДокумента Из ОбъектыУчетаДокумента Цикл
		ОтраженныйОбъектУчета = СпособыОбработки.НайтиПоЗначению(ОбъектУчетаДокумента.СпособОбработки);
		Если ЗначениеЗаполнено(ОтраженныйОбъектУчета) Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьСтраницуСодержания()
	
	Если ОперацияПолученияДанныхИзСервиса <> Неопределено Тогда
		ДлительнаяОперация = ОперацияПолученияДанныхИзСервиса; // см. ДлительныеОперации.ВыполнитьФункцию
	Иначе
		ДлительнаяОперация = Неопределено;
	КонецЕсли;
	
	Если ДлительнаяОперация <> Неопределено
		И ДлительнаяОперация.Статус = "Выполняется" Тогда
		Элементы.СтраницыПоТипамСодержимого.ТекущаяСтраница = Элементы.СтраницаСодержимоеОжидание;
	Иначе
		Элементы.СтраницыПоТипамСодержимого.ТекущаяСтраница = СтраницаСодержимогоПоТипуВизуализации();
		Если ТипВизуализации = ТипВизуализацииФайл() Тогда
			НастроитьПараметрыКонтрагента();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СтраницаСодержимогоПоТипуВизуализации()
	Возврат Элементы[ТипВизуализации];
КонецФункции

&НаСервере
Процедура НастроитьПараметрыКонтрагента()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;

	Элементы.Контрагент.ОграничениеТипа = Метаданные.ОпределяемыеТипы.КонтрагентБЭД.Тип;
	
КонецПроцедуры

#КонецОбласти // НастройкиФормы

#Область ПолучениеДанных

// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения
//  ВыводитьОкноОжидания - Булево
&НаКлиенте
Процедура ОжидатьПолученияДанныхИзСервиса(ОповещениеОЗавершении, ВыводитьОкноОжидания = Ложь)
	
	ДлительнаяОперация = ОперацияПолученияДанныхИзСервиса; // см. ДлительныеОперации.ВыполнитьФункцию
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьДанныеИзСервисаПослеДлительнойОперации",
		ЭтотОбъект, ОповещениеОЗавершении);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.Вставить("ВыводитьОкноОжидания", ВыводитьОкноОжидания);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

// Возвращаемое значение:
//  Структура:
//  * Успех - Булево
//  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
&НаКлиенте
Функция НовыйРезультатОжиданияПолученияДанныхИзСервиса()
	Результат = Новый Структура;
	Результат.Вставить("Успех", Ложь);
	Результат.Вставить("КонтекстДиагностики", ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики());
	Возврат Результат;
КонецФункции

// Параметры:
//  ДлительнаяОперация - см. ДлительныеОперации.ВыполнитьФункцию
//  ОповещениеОЗавершении - ОписаниеОповещения
&НаКлиенте
Процедура ЗаполнитьДанныеИзСервисаПослеДлительнойОперации(ДлительнаяОперация, ОповещениеОЗавершении) Экспорт
	
	Результат = НовыйРезультатОжиданияПолученияДанныхИзСервиса();
	
	Если ДлительнаяОперация <> Неопределено
		И ДлительнаяОперация.Статус = "Выполнено" Тогда
		ОперацияПолученияДанныхИзСервиса = ДлительнаяОперация;
		Результат.Успех = Истина;
	Иначе
		ОперацияПолученияДанныхИзСервиса = Неопределено;
		ВидОперации = НСтр("ru = 'Получение данных из сервиса облачного ЭДО'");
		ТекстСообщения = ?(ДлительнаяОперация = Неопределено, 
			НСтр("ru = 'Не удалось получить данные из сервиса облачного ЭДО.'"),
			ДлительнаяОперация.КраткоеПредставлениеОшибки);
		Ошибка = ОбработкаНеисправностейБЭДКлиент.НоваяОшибка(ВидОперации,
			ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка(), ТекстСообщения, ТекстСообщения);
		ОбработкаНеисправностейБЭДКлиент.ДобавитьОшибку(Результат.КонтекстДиагностики, Ошибка,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ИнтеграцияОблачногоЭДО);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

&НаСервере
Функция РезультатПолученияДанныхИзСервиса()
	
	ДлительнаяОперация = ОперацияПолученияДанныхИзСервиса; // см. ДлительныеОперации.ВыполнитьФункцию
	
	Если ДлительнаяОперация <> Неопределено
		И ДлительнаяОперация.Статус = "Выполнено" Тогда
		Результат = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
		УдалитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
		ОперацияПолученияДанныхИзСервиса = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеДанныхДокумента

&НаСервере
Процедура ЗаполнитьДанныеДокумента()
	
	ТипВизуализации = ТипВизуализацииФайл();
	
	ТипДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, "ТипДокумента");
	
	ДанныеПросмотраЗаполнены = ЗаполнитьДанныеПросмотраИзКэша();
	
	Если Не ДанныеПросмотраЗаполнены Тогда
		
		ПолучитьДанныеПросмотраИзСервиса();
		
		ЗаполнитьДанныеПросмотраИзСервиса();
		
	КонецЕсли;
	
	ЗаполнитьДанныеПакета();
	
	ЗаполнитьОбъектыУчета();
	
	ЗаполнитьПризнакВозможностиОтраженияВУчете();
	
	ЗаполнитьПризнакНаличияНоменклатурыНаКонтроле();
	
	ЗаполнитьСпособыОбработки();
	
КонецПроцедуры

// Параметры:
//  ДанныеВизуализации - Структура:
//  * ТипДанных - Строка
//  * Данные - Строка
//           - ДвоичныеДанные
&НаСервере
Процедура УстановитьВизуализациюДокумента(ДанныеВизуализации)
	
	Если Не ЗначениеЗаполнено(ДанныеВизуализации) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеВизуализации.ТипДанных = ТипыДанныхВизуализации().ТабличныйДокумент Тогда
		ТипВизуализации = ТипВизуализацииТабличныйДокумент();
		ВизуализацияТабличныйДокумент = ДанныеВизуализации.Данные;
	Иначе
		ТипВизуализации = ТипВизуализацииФайл();
		ИмяПроизвольногоФайла = ДанныеВизуализации.Данные;
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  УстановленныеПодписи - Массив из Структура
&НаСервере
Процедура ЗаполнитьПодписи(УстановленныеПодписи)
	
	Если Подписи.Количество() Тогда
		Подписи.Очистить();
	КонецЕсли;
	
	Для Каждого УстановленнаяПодпись Из УстановленныеПодписи Цикл
		НоваяПодпись = Подписи.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяПодпись, УстановленнаяПодпись);
		НоваяПодпись.НомерСтроки = Подписи.Индекс(НоваяПодпись);
		НоваяПодпись.ВыводКартинки = ?(НоваяПодпись.ПодписьВерна, 0, 1);
	КонецЦикла;
	
КонецПроцедуры

// Возвращаемое значение:
//  См. ИнтерфейсДокументовЭДО.НовыеПараметрыВизуализацииДокумента
&НаСервере
Функция ПараметрыВизуализацииДокумента()
	Возврат ИнтерфейсДокументовЭДО.НовыеПараметрыВизуализацииДокумента();
КонецФункции

&НаСервере
Функция ТипыДанныхВизуализации()
	Возврат Перечисления["ТипыДанныхВизуализацииДокументаЭДО"]
КонецФункции

// Параметры:
//  НовоеСостояниеЭДО - ПеречислениеСсылка.СостоянияДокументовЭДО
//  Комментарий - Строка
&НаСервере
Процедура УстановитьСостояние(НовоеСостояниеЭДО, Комментарий = "")
	
	СостояниеЭДО = НовоеСостояниеЭДО;
	
	КомментарийСостояния = Комментарий;
	
	ЗаполнитьПредставлениеСостояния(Комментарий);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредставлениеСостояния(Комментарий = "")
	Если ЗначениеЗаполнено(Комментарий) Тогда
		ШаблонПредставления = "%1 (%2)";
		СостоянияПредставление = СтрШаблон(ШаблонПредставления, СостояниеЭДО, Комментарий);
	Иначе
		СостоянияПредставление = Строка(СостояниеЭДО);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПакета()
	
	ИдентификаторПакета = РегистрыСведений.ПакетыДокументовЭДО.ИдентификаторПакетаДокумента(Объект.Ссылка);
	
	Если Не ЗначениеЗаполнено(ИдентификаторПакета) Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоОтображаемыхДокументовПакета = 3;
	
	ДокументыПакета = ПакетыДокументовЭДО.ДокументыПакета(ИдентификаторПакета);
	СоставПакета.ЗагрузитьЗначения(ДокументыПакета);

	СостоянияДокументовПакета = ПакетыДокументовЭДО.СостоянияДокументовПакета(ИдентификаторПакета);
	СостояниеПакета = ПакетыДокументовЭДО.СостояниеПакета(СостоянияДокументовПакета); 
	СостоянияПакетаОднородно = ЗначениеЗаполнено(СостояниеПакета);	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОбъектыУчета()
	
	ОбъектыУчетаПоДокументам = ИнтеграцияЭДО.ОбъектыУчетаЭлектронныхДокументов(Объект.Ссылка);
	
	ОбъектыУчетаДокумента.Загрузить(ОбъектыУчетаПоДокументам);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакВозможностиОтраженияВУчете()
	ЕстьВозможностьОтраженияВУчете = ИнтеграцияЭДО.ДоступноОтражениеВУчете(Объект.ФорматОсновногоТитула, ТипДокумента,
		СостояниеЭДО);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакНаличияНоменклатурыНаКонтроле()
	
	ЕстьНоменклатураНаКонтроле = Ложь;
	
	Если Не ЕстьВозможностьОтраженияВУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если СоставПакета.Количество() > 0 Тогда
		ДокументыДляПроверки = СоставПакета.ВыгрузитьЗначения();
	Иначе
		ДокументыДляПроверки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка);
	КонецЕсли;
	
	ОтборПоДокументу = Новый Структура("ЭлектронныйДокумент", ДокументыДляПроверки);
	НаКонтроле = ИнтеграцияЭДО.НоменклатураКонтрагентовНаКонтроле(ОтборПоДокументу);
	
	ЕстьНоменклатураНаКонтроле = ЗначениеЗаполнено(НаКонтроле);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпособыОбработки()
	
	СпособыОбработкиОсновные.Очистить();
	СпособыОбработкиДополнительные.Очистить();
	
	Если ЕстьВозможностьОтраженияВУчете Тогда
		
		Если ТипДокумента = Перечисления.ТипыДокументовЭДО.УПД Тогда
			ТипДокументаВариантовОтражения = Перечисления.ТипыДокументовЭДО.СчетФактура;
		ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.УКД Тогда
			ТипДокументаВариантовОтражения = Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура;
		Иначе
			ТипДокументаВариантовОтражения = ТипДокумента;
		КонецЕсли;
		
		СпособыОбработки = ОтражениеВУчетеЭДО.СписокОперацийТипаДокумента(ТипДокументаВариантовОтражения);
		
	Иначе
		
		СпособыОбработки = ИнтеграцияЭДО.СписокОперацийВсехТиповДокумента();
		
	КонецЕсли;
	
	ОбщегоНазначенияБЭДКлиентСервер.ДополнитьСписокЗначений(СпособыОбработкиОсновные, СпособыОбработки);
	
	ИспользуетсяДополнительныйДокумент = (ТипДокумента = Перечисления.ТипыДокументовЭДО.УПД)
		ИЛИ (ТипДокумента = Перечисления.ТипыДокументовЭДО.УКД);
	
	Если Не ИспользуетсяДополнительныйДокумент Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипДокумента = Перечисления.ТипыДокументовЭДО.УПД Тогда
		
		ДополнительныеТипыДокумента = Новый Массив;
		ДополнительныеТипыДокумента.Добавить(Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная);
		ДополнительныеТипыДокумента.Добавить(Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот);
		ДополнительныеТипыДокумента.Добавить(Перечисления.ТипыДокументовЭДО.АктНаПередачуПрав);
		
		Для Каждого ДополнительныйТипДокумента Из ДополнительныеТипыДокумента Цикл
			СпособыОбработки = ОтражениеВУчетеЭДО.СписокОперацийТипаДокумента(ДополнительныйТипДокумента);
			ОбщегоНазначенияБЭДКлиентСервер.ДополнитьСписокЗначений(СпособыОбработкиДополнительные, СпособыОбработки);
		КонецЦикла;
		
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.УКД Тогда	
		
		СпособыОбработки = ОтражениеВУчетеЭДО.СписокОперацийТипаДокумента(
			Перечисления.ТипыДокументовЭДО.СоглашениеОбИзмененииСтоимости);
		
		ОбщегоНазначенияБЭДКлиентСервер.ДополнитьСписокЗначений(СпособыОбработкиДополнительные, СпособыОбработки);
		
	КонецЕсли;
	
КонецПроцедуры

#Область ЗаполнениеДанныхПросмотра

&НаСервере
Процедура ПолучитьДанныеПросмотраИзСервиса()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВизуализации = ПараметрыВизуализацииДокумента();
	ОперацияПолученияДанныхИзСервиса = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
		"ИнтеграцияОблачногоЭДО.ДанныеДляПросмотраДокументаЭДО", Объект.Ссылка, ПараметрыВизуализации);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьДанныеПросмотраИзКэша()
	
	Результат = Истина;
	
	ДанныеВизуализации = ИнтеграцияОблачногоЭДО.ДанныеВизуализацииДокументаИзКэша(Объект.Ссылка);
	Если ЗначениеЗаполнено(ДанныеВизуализации) Тогда
		УстановитьВизуализациюДокумента(ДанныеВизуализации);
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	СостояниеДокументаПолное = РегистрыСведений.СостоянияДокументовЭДО.СостояниеДокументаПолное(Объект.Ссылка);
	Если ЗначениеЗаполнено(СостояниеДокументаПолное.Состояние) Тогда
		УстановитьСостояние(СостояниеДокументаПолное.Состояние, СостояниеДокументаПолное.Комментарий);
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеПросмотраИзСервиса()
	
	ДанныеПросмотра = РезультатПолученияДанныхИзСервиса();
	
	Если Не ЗначениеЗаполнено(ДанныеПросмотра) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьВизуализациюДокумента(ДанныеПросмотра.Визуализация);
	
	СостояниеДокументаПолное = ДанныеПросмотра.СостояниеДокументаПолное;
	
	Если ЗначениеЗаполнено(СостояниеДокументаПолное) Тогда
		УстановитьСостояние(СостояниеДокументаПолное.Состояние, СостояниеДокументаПолное.Комментарий);
	КонецЕсли;
	
	ЗаполнитьПодписи(ДанныеПросмотра.УстановленныеПодписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьПолученияДанныхПросмотра()
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьДанныеПросмотраПослеОжидания", ЭтотОбъект);
	ОжидатьПолученияДанныхИзСервиса(Оповещение);
КонецПроцедуры

// Параметры:
//  Результат - см. НовыйРезультатОжиданияПолученияДанныхИзСервиса
//  Контекст - Неопределено
&НаКлиенте
Процедура ЗаполнитьДанныеПросмотраПослеОжидания(Результат, Контекст) Экспорт
	
	Если Результат.Успех Тогда
		ЗаполнитьДанныеПросмотраПослеПолучения();
	Иначе
		ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(Результат.КонтекстДиагностики);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПросмотраПослеПолучения()
	
	ЗаполнитьДанныеПросмотраИзСервиса();
	
	УстановитьСтраницуСодержания();
	
КонецПроцедуры

#КонецОбласти // ЗаполнениеДанныхПросмотра

#КонецОбласти // ЗаполнениеДанныхДокумента

#Область ОбновлениеДанныхИзСервиса

&НаСервере
Процедура ОбновитьДанныеИзСервиса()
	
	ЗаполнитьДанныеДокумента();
	
	НастроитьОформлениеФормы();
	
КонецПроцедуры

#КонецОбласти

#Область ТипыВизуализации

&НаСервере
Функция ТипВизуализацииФайл()
	Возврат Элементы.СтраницаСодержимоеФайл.Имя;
КонецФункции

&НаСервере
Функция ТипВизуализацииТабличныйДокумент()
	Возврат Элементы.СтраницаСодержимоеТабличныйДокумент.Имя
КонецФункции

#КонецОбласти

#Область ОтражениеВУчете

&НаКлиенте
Процедура ПоказатьВыборСпособаОбработкиДляСозданияОбъектовУчета()
	
	СписокСоздания = СпособыОбработкиОсновные.Скопировать();
	
	Для Каждого ЭлементСписка Из СписокСоздания Цикл
		ЭлементСписка.Картинка = БиблиотекаКартинок.СоздатьЭлементСписка;
		ЭлементСписка.Пометка = Ложь;
	КонецЦикла;
	
	ОбработкаВыбора = Новый ОписаниеОповещения("СоздатьОбъектыУчетаПослеВыбораСпособаОбработки", ЭтотОбъект);
	
	Если СписокСоздания.Количество() > 1 Тогда
		
		ПоказатьВыборИзМеню(ОбработкаВыбора, СписокСоздания, Элементы.КомандаСоздатьДокументУчета);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОбработкаВыбора, СписокСоздания[0]);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ВыбранныйЭлемент - Неопределено - отказ от выбора.
//                   - ЭлементСпискаЗначений:
//  * Значение - Строка
//  ДополнительныеПараметры - Неопределено
&НаКлиенте
Процедура СоздатьОбъектыУчетаПослеВыбораСпособаОбработки(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СпособыОбработкиДокументов = Новый Соответствие;
	СпособыОбработкиДокументов.Вставить(Объект.Ссылка, ВыбранныйЭлемент.Значение);
	
	ДлительнаяОперация = ИнтеграцияОблачногоЭДОВызовСервера.СоздатьОбъектыУчетаПоДокументамЭДОВФоне(
		СпособыОбработкиДокументов, УникальныйИдентификатор);
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатСозданияОбъектовУчета", ЭтотОбъект);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

// Параметры:
//  ДлительнаяОперация - см. ДлительныеОперации.ВыполнитьФункцию
//  ДополнительныеПараметры - Неопределено
&НаКлиенте
Процедура ОбработатьРезультатСозданияОбъектовУчета(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено
		ИЛИ ДлительнаяОперация.Статус <> "Выполнено" Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ОбработатьРезультатСозданияОбъектовУчетаНаСервере(ДлительнаяОперация.АдресРезультата);
	
	Если Результат.ЕстьОшибка Тогда
		ОбработатьОшибкиПослеОтраженияВУчете(Результат.КонтекстДиагностики);
	Иначе
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьОшибкиПослеОтраженияВУчете", ЭтотОбъект);
		ИнтеграцияЭДОСобытияКлиент.ПослеОтраженияВУчете(ОповещениеОЗавершении, ТипДокумента,
			ОбъектыУчетаДокумента, Результат.КонтекстДиагностики);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  АдресРезультата - Строка
//
// Возвращаемое значение:
//   Структура:
//   * ЕстьОшибка - Булево
//   * КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
&НаСервере
Функция ОбработатьРезультатСозданияОбъектовУчетаНаСервере(Знач АдресРезультата)
	
	РезультатОбработки = Новый Структура;
	РезультатОбработки.Вставить("ЕстьОшибка", Ложь);
	РезультатОбработки.Вставить("КонтекстДиагностики", Новый Структура);
	
	РезультатСозданияОбъектовУчета = ПолучитьИзВременногоХранилища(АдресРезультата); // См. ИнтеграцияОблачногоЭДО.СоздатьОбъектыУчетаПоДокументамЭДО
	УдалитьИзВременногоХранилища(АдресРезультата);
	
	РезультатОбработки.КонтекстДиагностики = РезультатСозданияОбъектовУчета.КонтекстДиагностики;
	
	Если Не ЗначениеЗаполнено(РезультатСозданияОбъектовУчета.ОбъектыУчетаДокументов) Тогда
		РезультатОбработки.ЕстьОшибка = Истина;
		Возврат РезультатОбработки;
	КонецЕсли;
	
	ЗаполнитьОбъектыУчета();
	
	НастроитьЭлементыОтраженияВУчете();
	
	Возврат РезультатОбработки;
	
КонецФункции

// Параметры:
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//  ДополнительныеПараметры - Неопределено
&НаКлиенте
Процедура ОбработатьОшибкиПослеОтраженияВУчете(КонтекстДиагностики, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(КонтекстДиагностики);
	
КонецПроцедуры

// Параметры:
//  Номер - Число
&НаКлиенте
Процедура ПоказатьВыборСпособаОбработкиДляПодбораОбъектаУчета(Номер)
	
	ОбработкаВыбора = Новый ОписаниеОповещения("ПоказатьПодборОбъектаУчетаПослеВыбораСпособаОбработки", ЭтотОбъект);
	
	ТекущийСписокПодбора = СпособыОбработкиОсновные;
	Если Номер = 2 Тогда
		ЕстьОсновнойДокумент = ЕстьОтражениеВОбъектУчета(ОбъектыУчетаДокумента, СпособыОбработкиОсновные);
		ТекущийСписокПодбора = ?(ЕстьОсновнойДокумент,
			СпособыОбработкиДополнительные, СпособыОбработкиОсновные);
	КонецЕсли;
	
	Если ТекущийСписокПодбора.Количество() > 1 Тогда
		
		Элемент = ?(Номер = 1, Элементы.КомандаПодобратьДокументУчета1, Элементы.КомандаПодобратьДокументУчета2);
		
		ПоказатьВыборИзМеню(ОбработкаВыбора, ТекущийСписокПодбора, Элемент);
		
	ИначеЕсли ТекущийСписокПодбора.Количество() = 1 Тогда
		
		ВыполнитьОбработкуОповещения(ОбработкаВыбора, ТекущийСписокПодбора[0]);
		
	КонецЕсли;

КонецПроцедуры

// Параметры:
//  ВыбранноеЗначение - Неопределено - отказ от выбора.
//                    - ЭлементСпискаЗначений:
//  * Значение - Строка
//  ДополнительныеПараметры - Неопределено
&НаКлиенте
Процедура ПоказатьПодборОбъектаУчетаПослеВыбораСпособаОбработки(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СпособОбработки = ВыбранноеЗначение.Значение;
	НастройкиПодбора = НастройкиПодбораОбъектаУчета(СпособОбработки);
	
	Если ЗначениеЗаполнено(НастройкиПодбора) Тогда
		ДополнительныеПараметры = Новый Структура("СпособОбработки", СпособОбработки);
		ОбработкаВыбора = Новый ОписаниеОповещения("ОбработатьВыборОбъектаУчета", ЭтотОбъект, ДополнительныеПараметры);
		ИнтерфейсДокументовЭДОКлиент.ПоказатьПодборУчетногоДокумента(НастройкиПодбора, ОбработкаВыбора);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  СпособОбработки - Строка
// 
// Возвращаемое значение:
//  Структура:
//  * СпособОбработки - Строка
//  * ИмяОбъектаМетаданных - Строка
//  * ИмяТипаСсылки - Строка
//  * Организация - Неопределено,ОпределяемыйТип.Организация
//  * Контрагент - Неопределено,ОпределяемыйТип.УчастникЭДО
&НаКлиенте
Функция НастройкиПодбораОбъектаУчета(СпособОбработки)
	
	Настройки = Новый Структура;
	
	ПараметрыОбъектаУчета = ПараметрыОбъектаУчета(СпособОбработки);
	Если Не ЗначениеЗаполнено(ПараметрыОбъектаУчета) Тогда
		Возврат Настройки;
	КонецЕсли;
	
	Настройки.Вставить("СпособОбработки", "");
	Настройки.Вставить("ИмяОбъектаМетаданных", "");
	Настройки.Вставить("ИмяТипаСсылки", "");
	Настройки.Вставить("Организация", Неопределено);
	Настройки.Вставить("Контрагент", Неопределено);
	
	Настройки.СпособОбработки = СпособОбработки;
	Настройки.ИмяОбъектаМетаданных = ПараметрыОбъектаУчета.ИмяОбъектаМетаданных;
	Настройки.ИмяТипаСсылки = ПараметрыОбъектаУчета.ИмяТипаСсылки;
	Настройки.Организация = Объект.Организация;
	Настройки.Контрагент = Объект.Контрагент;
	
	Возврат Настройки;
	
КонецФункции

// Параметры:
//  СпособОбработки - Строка
// 
// Возвращаемое значение:
//  - Неопределено
//  - Структура:
//    * ИмяОбъектаМетаданных - Строка
//    * ИмяТипаСсылки - Строка
&НаСервереБезКонтекста
Функция ПараметрыОбъектаУчета(Знач СпособОбработки)
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИмяОбъектаМетаданных", "");
	Параметры.Вставить("ИмяТипаСсылки", "");
	
	ИмяТипа = ИнтеграцияЭДО.ИмяДокументаПоСпособуОбработки(СпособОбработки);
	
	МетаданныеОбъекта = Метаданные.Документы.Найти(ИмяТипа);
	Если МетаданныеОбъекта <> Неопределено Тогда
		Параметры.ИмяОбъектаМетаданных = МетаданныеОбъекта.ПолноеИмя();
		Параметры.ИмяТипаСсылки = "ДокументСсылка." + ИмяТипа;
		Возврат Параметры;
	КонецЕсли;
	
	МетаданныеОбъекта = Метаданные.Справочники.Найти(ИмяТипа);
	Если МетаданныеОбъекта <> Неопределено Тогда
		Параметры.ИмяОбъектаМетаданных = МетаданныеОбъекта.ПолноеИмя();
		Параметры.ИмяТипаСсылки = "СправочникСсылка." + ИмяТипа;
		Возврат Параметры;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Параметры:
//  ОбъектУчета - Неопределено - отказ от выбора.
//              - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО:
//  ДополнительныеПараметры - Структура:
//  * СпособОбработки - Строка
&НаКлиенте
Процедура ОбработатьВыборОбъектаУчета(ОбъектУчета, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ОбъектУчета) Тогда
		
		УстановитьСвязьСОбъектомУчета(ОбъектУчета, ДополнительныеПараметры.ВариантОтражения);
		
		ОповеститьОбОтраженииВУчете();
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО:
//  СпособОбработки - Строка
&НаСервере
Процедура УстановитьСвязьСОбъектомУчета(Знач ОбъектУчета, Знач СпособОбработки)
	
	ИнтеграцияЭДО.УстановитьСвязьЭлектронногоДокументаСОбъектомУчета(Объект.Ссылка, ОбъектУчета, СпособОбработки);
	
	НоваяСтрока = ОбъектыУчетаДокумента.Добавить();
	НоваяСтрока.ОбъектУчета = ОбъектУчета;
	НоваяСтрока.СпособОбработки = СпособОбработки;
	
	НастроитьЭлементыОтраженияВУчете();
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОбОтраженииВУчете()
	
	Оповестить("ЭлектронныйДокументВходящий_ПодборДокументаУчета", Объект.Ссылка, ЭтотОбъект);
	Оповестить(ИнтерфейсДокументовЭДОКлиент.ИмяСобытияОбновленияТекущихДелЭДО());
	
КонецПроцедуры

// Параметры:
//  НомерДокумента - Число
&НаКлиенте
Процедура ПоказатьВопросОРазрывеСвязи(НомерДокумента)
	
	Если ОбъектыУчетаДокумента.Количество() < НомерДокумента Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("НомерДокумента", НомерДокумента);
	ТекстВопроса = НСтр("ru = 'Связь между документами разорвется. Повторно связать документы возможно только в ручном режиме. Продолжить?'");
	ОписаниеОповещения = Новый ОписаниеОповещения("РазорватьСвязьПослеВопроса", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

// Параметры:
//  Ответ - КодВозвратаДиалога
//  ДополнительныеПараметры - Структура:
//  * НомерДокумента - Число
&НаКлиенте
Процедура РазорватьСвязьПослеВопроса(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	РазорватьСвязьСОбъектомУчета(ДополнительныеПараметры.НомерДокумента);
	
	ОповеститьОбОтраженииВУчете();
	
КонецПроцедуры

// Параметры:
//  НомерДокумента - Число
&НаСервере
Процедура РазорватьСвязьСОбъектомУчета(Знач НомерДокумента)
	
	ОбъектУчета = ОбъектыУчетаДокумента[НомерДокумента - 1].ОбъектУчета;
	
	ИнтеграцияЭДО.РазорватьСвязьЭлектронногоДокументаСОбъектомУчета(Объект.Ссылка, ОбъектУчета);
	
	ЗаполнитьОбъектыУчета();
	
	НастроитьЭлементыОтраженияВУчете();
	
КонецПроцедуры


#КонецОбласти

#Область ОбработкаДействийПоЭДО

// Параметры:
//  НаборДействий - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыйНаборДействийПоЭДО
//  ЭтоПакетнаяОбработка - Булево
&НаКлиенте
Процедура ВыполнитьДействияПоЭДО(НаборДействий, ЭтоПакетнаяОбработка = Ложь)
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ИнтерфейсДокументовЭДОКлиент);
	
	ПараметрыВыполненияДействийПоЭДО = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	ПараметрыВыполненияДействийПоЭДО.НаборДействий = НаборДействий;
	
	Если ЭтоПакетнаяОбработка И ЗначениеЗаполнено(ИдентификаторПакета) Тогда
		ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ПакетыДокументов.Добавить(ИдентификаторПакета);
	Иначе
		ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ЭлектронныеДокументы.Добавить(Объект.Ссылка);
	КонецЕсли;
	
	ИнтерфейсДокументовЭДОКлиент.НачатьВыполнениеДействийПоЭДО(Оповещение, ПараметрыВыполненияДействийПоЭДО);
	
КонецПроцедуры

// Параметры:
//  ЭтоПакетнаяОбработка - Булево
&НаКлиенте
Процедура ВыполнитьДействиеУтвердить(ЭтоПакетнаяОбработка = Ложь)
	
	НаборДействий = ИнтерфейсДокументовЭДОКлиентСервер.НовыйНаборДействийПоЭДО();
	
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Утвердить"));
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.СформироватьОтвет"));
	
	ВыполнитьДействияПоЭДО(НаборДействий, Истина);
	
КонецПроцедуры

// Параметры:
//  ЭтоПакетнаяОбработка - Булево
&НаКлиенте
Процедура ВыполнитьДействияПодписатьОтправить(ЭтоПакетнаяОбработка = Ложь)
	
	НаборДействий = ИнтерфейсДокументовЭДОКлиентСервер.НовыйНаборДействийПоЭДО();
	
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Подписать"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Отправить"));
	
	ВыполнитьДействияПоЭДО(НаборДействий, Истина);
	
КонецПроцедуры

// Параметры:
//  ЭтоПакетнаяОбработка - Булево
&НаКлиенте
Процедура ВыполнитьДействиеПодписать(ЭтоПакетнаяОбработка = Ложь)
	
	НаборДействий = ИнтерфейсДокументовЭДОКлиентСервер.НовыйНаборДействийПоЭДО();
	
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Подписать"));
	
	ВыполнитьДействияПоЭДО(НаборДействий, ЭтоПакетнаяОбработка);
	
КонецПроцедуры

// Параметры:
//  ЭтоПакетнаяОбработка - Булево
&НаКлиенте
Процедура ВыполнитьДействиеОтправить(ЭтоПакетнаяОбработка = Ложь)
	
	НаборДействий = ИнтерфейсДокументовЭДОКлиентСервер.НовыйНаборДействийПоЭДО();
	
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Отправить"));
	
	ВыполнитьДействияПоЭДО(НаборДействий, ЭтоПакетнаяОбработка);
	
КонецПроцедуры

// Параметры:
//  ЭтоПакетнаяОбработка - Булево
&НаКлиенте
Процедура ВыполнитьДействиеАннулировать(ЭтоПакетнаяОбработка = Ложь);
	
	НаборДействий = ИнтерфейсДокументовЭДОКлиентСервер.НовыйНаборДействийПоЭДО();
	
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Аннулировать"));
	
	ВыполнитьДействияПоЭДО(НаборДействий, ЭтоПакетнаяОбработка);
	
КонецПроцедуры

// Параметры:
//  ЭтоПакетнаяОбработка - Булево
&НаКлиенте
Процедура ВыполнитьДействиеПринятьАннулирование(ЭтоПакетнаяОбработка = Ложь);
	
	НаборДействий = ИнтерфейсДокументовЭДОКлиентСервер.НовыйНаборДействийПоЭДО();
	
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ПринятьАннулирование"));
	
	ВыполнитьДействияПоЭДО(НаборДействий, Истина);
	
КонецПроцедуры

// Параметры:
//  ЭтоПакетнаяОбработка - Булево
&НаКлиенте
Процедура ВыполнитьДействиеОтклонитьАннулирование(ЭтоПакетнаяОбработка = Ложь);
	
	НаборДействий = ИнтерфейсДокументовЭДОКлиентСервер.НовыйНаборДействийПоЭДО();
	
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ОтклонитьАннулирование"));
	
	ВыполнитьДействияПоЭДО(НаборДействий, Истина);
	
КонецПроцедуры

// Параметры:
//  ЭтоПакетнаяОбработка - Булево
&НаКлиенте
Процедура ВыполнитьДействиеОтклонить(ЭтоПакетнаяОбработка = Ложь)
	
	НаборДействий = ИнтерфейсДокументовЭДОКлиентСервер.НовыйНаборДействийПоЭДО();
	
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Отклонить"));
	
	ВыполнитьДействияПоЭДО(НаборДействий, ЭтоПакетнаяОбработка);
	
КонецПроцедуры

// Параметры:
//  ЭтоПакетнаяОбработка - Булево
&НаКлиенте
Процедура ВыполнитьДействиеОтправитьВАрхив(ЭтоПакетнаяОбработка = Ложь);
	
	НаборДействий = ИнтерфейсДокументовЭДОКлиентСервер.НовыйНаборДействийПоЭДО();
	
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ОтправитьВАрхив"));
	
	ВыполнитьДействияПоЭДО(НаборДействий, ЭтоПакетнаяОбработка);
	
КонецПроцедуры

// Параметры:
//  ЭтоПакетнаяОбработка - Булево
&НаКлиенте
Процедура ВыполнитьДействиеЗакрытьПринудительно(ЭтоПакетнаяОбработка = Ложь);
	
	НаборДействий = ИнтерфейсДокументовЭДОКлиентСервер.НовыйНаборДействийПоЭДО();
	
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ЗакрытьПринудительно"));
	
	ВыполнитьДействияПоЭДО(НаборДействий, ЭтоПакетнаяОбработка);
	
КонецПроцедуры

// Параметры:
//  ЭтоПакетнаяОбработка - Булево
&НаКлиенте
Процедура ВыполнитьДействиеВернутьВРаботу(ЭтоПакетнаяОбработка = Ложь);
	
	НаборДействий = ИнтерфейсДокументовЭДОКлиентСервер.НовыйНаборДействийПоЭДО();
	
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ВернутьВРаботу"));
	
	ВыполнитьДействияПоЭДО(НаборДействий, ЭтоПакетнаяОбработка);
	
КонецПроцедуры

// Параметры:
//  ЭтоПакетнаяОбработка - Булево
&НаКлиенте
Процедура ВыполнитьДействиеОтправитьПовторно(ЭтоПакетнаяОбработка = Ложь)
	
	ПараметрыВыполнения = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	НаборДействий = ПараметрыВыполнения.НаборДействий;
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ОтправитьПовторно"));
	
	ВыполнитьДействияПоЭДО(ПараметрыВыполнения, ЭтоПакетнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ПакетДокументов

&НаСервере
Функция СоставПакета_ОбработкаНавигационнойСсылкиНаСервере(Знач НавигационнаяСсылка)
	
	Возврат ПакетыДокументовЭДО.СоставПакета_ОбработкаНавигационнойСсылкиНаСервере(ЭтотОбъект, НавигационнаяСсылка);
	
КонецФункции

#КонецОбласти

#Область НастройкиОтображения

&НаСервере
Процедура СохранитьНастройкиОтображения()
	
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(ИмяФормы, 
		"ОтключитьВыводДопДанных", ОтключитьВыводДопДанных);
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(ИмяФормы, 
		"ОтключитьВыводКопияВерна", ОтключитьВыводКопияВерна);
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(ИмяФормы, 
		"ВыводитьБанковскиеРеквизиты", ВыводитьБанковскиеРеквизиты);
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеВизуализацииДокумента

&НаКлиенте
Процедура ОбновитьВизуализациюДокумента()
	
	ОбновитьВизуализациюДокументаИзСервиса();
	
	ОжидатьПолучениеВизуализацииДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВизуализациюДокументаИзСервиса()
	
	ПолучитьВизуализациюДокументаИзСервиса();
	
	ЗаполнитьВизуализациюДокументаИзСервиса();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьВизуализациюДокументаИзСервиса()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВизуализации = ПараметрыВизуализацииДокумента();
	
	// См. ИнтеграцияОблачногоЭДО.ДанныеДляПросмотраДокументаЭДО
	ОперацияПолученияДанныхИзСервиса = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
		"ИнтеграцияОблачногоЭДО.ВизуализацияДокумента", Объект.Ссылка, ПараметрыВизуализации);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВизуализациюДокументаИзСервиса()
	
	Визуализация = РезультатПолученияДанныхИзСервиса(); // см. ИнтеграцияОблачногоЭДО.ВизуализацияДокументаЭДО
	
	Если ЗначениеЗаполнено(Визуализация) Тогда
		УстановитьВизуализациюДокумента(Визуализация);
	КонецЕсли;
	
	УстановитьСтраницуСодержания();
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьПолучениеВизуализацииДокумента()
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьВизуализациюДокументаПослеОжидания", ЭтотОбъект);
	ОжидатьПолученияДанныхИзСервиса(Оповещение);
КонецПроцедуры

// Параметры:
//  Результат - см. НовыйРезультатОжиданияПолученияДанныхИзСервиса
//  Контекст - Неопределено
&НаКлиенте
Процедура ЗаполнитьВизуализациюДокументаПослеОжидания(Результат, Контекст) Экспорт
	
	Если Результат.Успех Тогда
		ЗаполнитьВизуализациюДокументаИзСервиса();
	Иначе
		УстановитьСтраницуСодержания();
		ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(Результат.КонтекстДиагностики);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаПодписей

&НаСервере
Процедура ПроверитьПодписиДокументаВСервисе()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	
	// См. ИнтеграцияОблачногоЭДО.ДанныеДляПросмотраДокументаЭДО
	ОперацияПолученияДанныхИзСервиса = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
		"ИнтеграцияОблачногоЭДО.ПроверитьИПолучитьПодписиДокумента", Объект.Ссылка);
	
	ЗаполнитьПодписиДокументаПослеПроверки();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодписиДокументаПослеПроверки()
	
	ОписанияУстановленныхПодписей = РезультатПолученияДанныхИзСервиса();
	
	Если Не ЗначениеЗаполнено(ОписанияУстановленныхПодписей) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПодписи(ОписанияУстановленныхПодписей);
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьПроверкуПодписейДокумента()
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьПодписиДокументаПослеОжидания", ЭтотОбъект);
	ОжидатьПолученияДанныхИзСервиса(Оповещение, Истина);
КонецПроцедуры

// Параметры:
//  Результат - см. НовыйРезультатОжиданияПолученияДанныхИзСервиса
//  Контекст - Неопределено
&НаКлиенте
Процедура ЗаполнитьПодписиДокументаПослеОжидания(Результат, Контекст) Экспорт
	
	Если Результат.Успех Тогда
		ЗаполнитьПодписиДокументаПослеПроверки();
	Иначе
		ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(Результат.КонтекстДиагностики);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти // СлужебныеПроцедурыИФункции
