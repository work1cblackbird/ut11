#Область ОписаниеПеременных

&НаКлиенте
Перем ОповещениеОЗавершенииОжиданияБлокировки; // ОписаниеОповещения

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект);
		
		ЗаполнитьДанныеНовогоДокумента();
		
		НастроитьОформлениеФормы();
		
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект);
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ЗаполнитьДанныеДокумента();
	
	НастроитьОформлениеФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОжидатьПолученияДанныхПросмотра();
	Иначе
		ОжидатьПолученияДанныхПредварительногоПросмотра();
	КонецЕсли;
	
	Если ОповеститьОПрочтении Тогда
		Оповестить("ПрочтениеОбновитьСписок", Объект.Ссылка);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЭтоНовыйДокумент = ТекущийОбъект.ЭтоНовый();
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйДокумент", ЭтоНовыйДокумент);
	
	Если Не ЭтоНовыйДокумент Тогда
		Возврат
	КонецЕсли;
	
	ПроверитьЗаполнениеНовогоДокумента(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьНовыйНомерДокумента(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЭтоНовыйДокумент = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗаписи, "ЭтоНовыйДокумент", Ложь); // Булево
	
	Если Не ЭтоНовыйДокумент Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьСостояние(Перечисления.СостоянияДокументовЭДО.ОжидаетсяОбработкаОблачнымЭДО);
	
	РегистрыСведений.СостоянияДокументовЭДО.УстановитьСостояние(ТекущийОбъект.Ссылка, СостояниеЭДО);
	
	Если ЗначениеЗаполнено(СписокОбъектовУчета) Тогда
		ОбъектыУчета = СписокОбъектовУчета.ВыгрузитьЗначения();
		ИнтеграцияЭДО.УстановитьАктуальныйЭлектронныйДокумент(ОбъектыУчета, ТекущийОбъект.Ссылка);
	КонецЕсли;
	
	Визуализация = ПолучитьИзВременногоХранилища(АдресВизуализацииПредварительногоПросмотра); // См. РегистрыСведений.ВизуализацииДокументовОблачногоЭДО.НовыеСвойстваВизуализации
	УдалитьИзВременногоХранилища(АдресВизуализацииПредварительногоПросмотра);
	
	ИнтеграцияОблачногоЭДО.СохранитьКэшВизуализацииДокумента(ТекущийОбъект.Ссылка, Визуализация);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ЭтоНовыйДокумент = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗаписи, "ЭтоНовыйДокумент", Ложь); // Булево
	
	Если Не ЭтоНовыйДокумент Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьОформлениеФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ЭтоНовыйДокумент = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗаписи, "ЭтоНовыйДокумент", Ложь); // Булево
	
	Если ЭтоНовыйДокумент Тогда
		
		Оповестить(ИнтерфейсДокументовЭДОКлиент.ИмяСобытияОбновленияСостоянияЭДО(),,Объект.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ИмяСобытия - Строка - Имя события
//  Параметр - Неопределено,Произвольный,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО,Массив из ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  Источник - Неопределено,Произвольный,УникальныйИдентификатор
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = ИнтерфейсДокументовЭДОКлиент.ИмяСобытияОбновленияСостоянияЭДО()
		И Источник <> Объект.Ссылка Тогда
		
		ОбновитьСостояниеЭДО();
		
		ОбновитьАктивнуюСтраницуПодписей();
		
	ИначеЕсли ИмяСобытия = "ЭлектронныйДокументИсходящий_ПодборДокументаУчета" И Параметр = Объект.Ссылка Тогда
		
		ЗаполнитьДанныеДокументаПослеПодбораОбъектовУчета();
		
	ИначеЕсли ИмяСобытия = "ДобавлениеДокументаВПакет" Тогда
		
		Если Не ЗначениеЗаполнено(ИдентификаторПакета) Тогда
			ИдентификаторПакета = Источник; 
		КонецЕсли;
		Если Источник = ИдентификаторПакета Тогда
			УстановитьТекущийДокументПакета(Параметр[0]);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ВыборТекущегоДокументаПакета" И Источник = ИдентификаторПакета Тогда
		
		УстановитьТекущийДокументПакета(Параметр);
		
	ИначеЕсли ИмяСобытия = "УдалениеДокументаИзПакета" И Источник = ИдентификаторПакета Тогда
		
		ЗначениеКУдалению = СоставПакета.НайтиПоЗначению(Параметр);
		СоставПакета.Удалить(ЗначениеКУдалению);
		ДокументПакета = СоставПакета[0].Значение; // ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
		УстановитьТекущийДокументПакета(ДокументПакета);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОбъектыУчетаПредставлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылка = "ПредставлениеДокументовУчетаЭлектронногоДокументаНажатие" Тогда
		СтандартнаяОбработка = Ложь;
		ПредставлениеДокументовУчетаЭлектронногоДокументаНажатие();
	ИначеЕсли НавигационнаяСсылка = "ОткрытьФормуПодбораДокументовУчетаНажатие" Тогда
		СтандартнаяОбработка = Ложь;
		ПередОткрытиемФормыПодбораОбъектовУчета();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКомментарийСостояния(Элемент)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(КомментарийСостояния, ЭтотОбъект);
	
КонецПроцедуры

// Параметры:
//  Элемент - ВсеЭлементыФормы
//  НавигационнаяСсылка - Строка
//  СтандартнаяОбработка - Булево
&НаКлиенте
Процедура Подключаемый_ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	ИнтерфейсДокументовЭДОКлиент.ПросмотрЭлектронногоДокументаОбработкаНавигационнойСсылки(
		ЭтотОбъект, Элемент, НавигационнаяСсылка, СтандартнаяОбработка);
	
КонецПроцедуры

// Параметры:
//  Элемент - ДекорацияФормы
//  НавигационнаяСсылка - Строка
//  СтандартнаяОбработка - Булево
&НаКлиенте
Процедура Подключаемый_СоставПакета_ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	РезультатОбработки = СоставПакета_ОбработкаНавигационнойСсылкиНаСервере(НавигационнаяСсылка);
	
	ПакетыДокументовЭДОКлиент.ЭлементУправленияПакета_ОбработкаНавигационнойСсылки(
		ЭтотОбъект, Элемент, НавигационнаяСсылка, СтандартнаяОбработка, РезультатОбработки);
	
	Если РаботаСПрочтениямиВызовСервера.УстановитьСвойствоПрочтен(Объект.Ссылка, Истина) Тогда	
		Оповестить("ПрочтениеОбновитьСписок", Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Элемент - ДекорацияФормы
//  СтандартнаяОбработка - Булево
&НаКлиенте
Процедура Подключаемый_СоставПакета_Нажатие(Элемент, СтандартнаяОбработка)
	
	ПакетыДокументовЭДОКлиент.ЭлементУправленияПакета_Нажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьАктивнуюСтраницуПодписей();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьОшибкаФормированияПредставленияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьЖурналРегистрации" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОтборЖурналаРегистрации = Новый Структура;
		ОтборЖурналаРегистрации.Вставить("Данные", "ИнтеграцияОблачногоЭДО.ВизуализацияДокумента");
		ЖурналРегистрацииКлиент.ОткрытьЖурналРегистрации(ОтборЖурналаРегистрации, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ОбработчикиКомандФормыОсновные

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ВыполнитьДействияПриЗаписи();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьОтправить(Команда)
	
	ВыполнитьДействияПодписатьОтправить(СостоянияПакетаОднородно);
	
КонецПроцедуры

&НаКлиенте
Процедура Подписать(Команда)
	
	ВыполнитьДействиеПодписать(СостоянияПакетаОднородно);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьПодписание(Команда)
	
	ВыполнитьДействиеОтклонитьПодписание(СостоянияПакетаОднородно);
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	
	ВыполнитьДействиеОтправить(СостоянияПакетаОднородно);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВАрхив(Команда)
	
	ВыполнитьДействиеОтправитьВАрхив(СостоянияПакетаОднородно);
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьАннулирование(Команда)
	
	ВыполнитьДействиеПринятьАннулирование(СостоянияПакетаОднородно);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьАннулирование(Команда)
	
	ВыполнитьДействиеОтклонитьАннулирование(СостоянияПакетаОднородно);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьДанныеИзСервиса();
	
	ОжидатьПолученияДанныхПросмотра();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормыДругиеДействия

&НаКлиенте
Процедура Отклонить(Команда)
	
	ВыполнитьДействиеОтклонить(СостоянияПакетаОднородно);
	
КонецПроцедуры

&НаКлиенте
Процедура Аннулировать(Команда)
	
	ВыполнитьДействиеАннулировать(СостоянияПакетаОднородно);
	
КонецПроцедуры

&НаКлиенте
Процедура Завершить(Команда)
	
	ВыполнитьДействиеЗавершить(СостоянияПакетаОднородно);
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьВРаботу(Команда)
	
	ВыполнитьДействиеВернутьВРаботу();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПовторно(Команда)
	
	ВыполнитьДействиеОтправитьПовторно();
	
КонецПроцедуры

&НаКлиенте
Процедура Переформировать(Команда)
	
	ПараметрыВыполнения = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	НаборДействий = ПараметрыВыполнения.НаборДействий;
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Переформировать"));
	
	ВыполнитьДействияПоЭДО(ПараметрыВыполнения, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПроизвольныйДокумент(Команда)
	
	ИнтерфейсДокументовЭДОКлиент.ОткрытьНовыйПроизвольныйЭлектронныйДокументНаОсновании(Объект.Ссылка);
	
КонецПроцедуры

#Область ДействияСДокументом

&НаКлиенте
Процедура ПодписатьОтправитьДокумент(Команда)
	
	ВыполнитьДействияПодписатьОтправить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьПодписаниеДокумент(Команда)
	
	ВыполнитьДействиеОтклонитьПодписание();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьДокумент(Команда)
	
	ВыполнитьДействиеПодписать();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьДокумент(Команда)
	
	ВыполнитьДействиеОтправить();
	
КонецПроцедуры

&НаКлиенте
Процедура АннулироватьДокумент(Команда)
	
	ВыполнитьДействиеАннулировать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьАннулированиеДокумент(Команда)
	
	ВыполнитьДействиеПринятьАннулирование();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьАннулированиеДокумент(Команда)
	
	ВыполнитьДействиеОтклонитьАннулирование();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьДокумент(Команда)
	
	ВыполнитьДействиеОтклонить();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьДокумент(Команда)
	
	ВыполнитьДействиеЗавершить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВАрхивДокумент(Команда)
	
	ВыполнитьДействиеОтправитьВАрхив();
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьВРаботуДокумент(Команда)
	
	ВыполнитьДействиеВернутьВРаботу();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПовторноДокумент(Команда)
	
	ВыполнитьДействиеОтправитьПовторно();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормыДобавленияВложения

&НаКлиенте
Процедура ДобавитьВложениеИзФайлаНаДиске(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВложениеИзФайлаНаДискеПослеВыбора", ЭтотОбъект);
	НачатьПомещениеФайлаНаСервер(ОписаниеОповещения,,,,,УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложениеИзПрисоединенныхФайлов(Команда)
	
	Если СписокОбъектовУчета.Количество() > 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВложениеИзФайлаОснованияПослеВыбора", ЭтотОбъект);
		ВладелецФайла = СписокОбъектовУчета[0].Значение; // ОпределяемыйТип.ВладелецФайлов
		РаботаСФайламиКлиент.ОткрытьФормуВыбораФайлов(ВладелецФайла, ЭтотОбъект,, ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормыДобавлениеВПакет

&НаКлиенте
Процедура ДобавитьДокументИнформационнойБазыВПакет(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ДобавитьВПакетДокументИнформационнойБазы();
	Иначе
		Описание = Новый ОписаниеОповещения("ДобавитьВПакетДокументИнформационнойБазыПослеОтветаНаВопрос", ЭтотОбъект);
		Текст = НСтр("ru = 'Для выполнения операции необходимо сохранить документ. Продолжить?'");
		ПоказатьВопрос(Описание, Текст, РежимДиалогаВопрос.ДаНет);	
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПрисоединенныйФайлВПакет(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ДобавитьВПакетПрисоединенныйФайл();
	Иначе
		Описание = Новый ОписаниеОповещения("ДобавитьВПакетПрисоединенныйФайлПослеОтветаНаВопрос", ЭтотОбъект);
		Текст = НСтр("ru = 'Для выполнения операции необходимо сохранить документ. Продолжить?'");
		ПоказатьВопрос(Описание, Текст, РежимДиалогаВопрос.ДаНет);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлСКомпьютераВПакет(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ДобавитьВПакетФайлСКомпьютера();
	Иначе
		Описание = Новый ОписаниеОповещения("ДобавитьВПакетФайлСКомпьютераПослеОтветаНаВопрос", ЭтотОбъект);
		Текст = НСтр("ru = 'Для выполнения операции необходимо сохранить документ. Продолжить?'");
		ПоказатьВопрос(Описание, Текст, РежимДиалогаВопрос.ДаНет);	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормыЕще

&НаКлиенте
Процедура Перенаправить(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстОшибки = НСтр("ru = 'Электронный документ не сформирован. Работа с ним невозможна.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ИдентификаторПакета) И СостоянияПакетаОднородно Тогда
		ЭлектронныеДокументы = ПакетыДокументовЭДОВызовСервера.ДокументыПакета(ИдентификаторПакета);
	Иначе
		ЭлектронныеДокументы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка);
	КонецЕсли;
	
	ИнтерфейсДокументовЭДОКлиент.ПеренаправитьЭлектронныеДокументы(ЭлектронныеДокументы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодписи(Команда)
	
	ПроверитьПодписиДокументаВСервисе();
	
	ОжидатьПроверкуПодписейДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ТранслитироватьИмяФайла(Команда)
	
	ОтключитьТранслитерацию = Не ОтключитьТранслитерацию;
	Элементы.ТранслитироватьИмяФайла.Пометка = Не ОтключитьТранслитерацию;
	Элементы.НадписьТранслитерация.Видимость = Не ОтключитьТранслитерацию;
	
	СохранитьНастройкиОтображения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьДополнительнуюИнформацию(Команда)
	
	ОтключитьВыводДопДанных = Не ОтключитьВыводДопДанных;
	Элементы.ОтображатьДополнительнуюИнформацию.Пометка = Не ОтключитьВыводДопДанных;
	
	СохранитьНастройкиОтображения();
	
	ОбновитьВизуализациюДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьОбластьКопияВерна(Команда)
	
	ОтключитьВыводКопияВерна = Не ОтключитьВыводКопияВерна;
	Элементы.ОтображатьОбластьКопияВерна.Пометка = Не ОтключитьВыводКопияВерна;	
	
	СохранитьНастройкиОтображения();
	
	ОбновитьВизуализациюДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьБанковскиеРеквизиты(Команда)
	
	ВыводитьБанковскиеРеквизиты = Не ВыводитьБанковскиеРеквизиты;
	Элементы.ОтображатьБанковскиеРеквизиты.Пометка = ВыводитьБанковскиеРеквизиты;
	
	СохранитьНастройкиОтображения();
	
	ОбновитьВизуализациюДокумента();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НастройкиФормы

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодписиСтатус.Имя);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементОформления.Отбор,
		"Подписи.ПодписьВерна", ВидСравненияКомпоновкиДанных.НеРавно, Истина);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла);	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОформлениеФормы()
	
	УстановитьЗаголовокФормы();
	
	УстановитьВидимостьИнформацииОПометкеУдаления();
	
	УстановитьВидимостьКоманд();
	
	СформироватьПанельСоставаПакета();
	
	УстановитьПредставлениеОбъектовУчета();
	
	УстановитьВидимостьНастройкиФормирования();
	
	УстановитьСтраницуСодержания();
	
	Элементы.ПодписиВыводКартинки.Видимость = Подписи.Итог("ВыводКартинки") = 1;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	Если СоставПакета.Количество() > 1 Тогда
		Заголовок = ПакетыДокументовЭДО.ЗаголовокОтображенияПакетов(СоставПакета.Количество());
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ВидДокумента) Тогда
		Заголовок = ПакетыДокументовЭДО.ЗаголовокНовогоПроизвольногоДокумента();
		Возврат;
	КонецЕсли;
	
	ПараметрыПредставления = ИнтерфейсДокументовЭДО.НовыеСвойстваПредставленияДокумента();
	ПараметрыПредставления.ВидДокумента = Объект.ВидДокумента;
	ПараметрыПредставления.НомерДокумента = Объект.НомерДокумента;
	ПараметрыПредставления.ДатаДокумента = Объект.ДатаДокумента;
	
	Заголовок = ИнтерфейсДокументовЭДО.ПредставлениеДокументаПоСвойствам(ПараметрыПредставления, Объект.Ссылка.Пустая());
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИнформацииОПометкеУдаления()
	Элементы.ГруппаИнформацияОПометкеУдаления.Видимость = Объект.ПометкаУдаления;
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКоманд()
	
	УстановитьВидимостьПодменюДобавитьДокументыВПакет();
	
	НастроитьОтображениеДействийПоСостояниюЭДО();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьНастройкиФормирования()
	Элементы.ОткрытьНастройкиФормирования.Видимость = 
		СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.НеСформирован;
КонецПроцедуры

&НаСервере
Процедура УстановитьСтраницуСодержания()
	
	ДлительнаяОперация = ОперацияПолученияДанныхИзСервиса; // см. ДлительныеОперации.ВыполнитьФункцию
	
	Если ДлительнаяОперация <> Неопределено
		И ДлительнаяОперация.Статус = "Выполняется" Тогда
		Элементы.СтраницыПоТипамСодержимого.ТекущаяСтраница = Элементы.СтраницаСодержимоеОжидание;
	Иначе
		Элементы.СтраницыПоТипамСодержимого.ТекущаяСтраница = СтраницаСодержимогоПоТипуВизуализации();
		Если ТипВизуализации = ТипВизуализацииФайл() Тогда
			НастроитьПараметрыКонтрагента();
			ПодготовитьПредставлениеПроизвольногоФайла();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СтраницаСодержимогоПоТипуВизуализации()
	Возврат Элементы[ТипВизуализации];
КонецФункции

&НаСервере
Процедура НастроитьПараметрыКонтрагента()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;

	Элементы.Контрагент.ОграничениеТипа = Метаданные.ОпределяемыеТипы.КонтрагентБЭД.Тип;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтображениеДействийПоСостояниюЭДО()
	
	ЕстьПравоОбработкиДокументов = ПравоДоступа("Изменение", Объект.Ссылка.Метаданные());
	
	Элементы.СоздатьПроизвольныйДокумент.Видимость = ЕстьПравоОбработкиДокументов;
	Элементы.Перенаправить.Видимость = ЕстьПравоОбработкиДокументов;
	
	ПараметрыОпределенияДействий = ИнтеграцияОблачногоЭДО.НовыеПараметрыОпределенияДоступныхДействийПоЭДО();
	ПараметрыОпределенияДействий.ЭтоВходящийЭДО = Истина;
	ПараметрыОпределенияДействий.ТипДокумента = ТипДокумента;
	ПараметрыОпределенияДействий.НаОзнакомлении = Объект.НаОзнакомлении;
	ПараметрыОпределенияДействий.СостояниеДокумента = СостояниеЭДО;
	
	ДействияНаЭтапеДляДокумента = ИнтеграцияОблачногоЭДО.ДоступныеДействияПоЭДО(ПараметрыОпределенияДействий);
	
	Если СостоянияПакетаОднородно
		И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыОпределенияДействий.СостояниеДокумента = СостояниеПакета;
		ДействияНаЭтапе = ИнтеграцияОблачногоЭДО.ДоступныеДействияПоЭДО(ПараметрыОпределенияДействий);
	Иначе
		ДействияНаЭтапе = ДействияНаЭтапеДляДокумента;
	КонецЕсли;
	
	Элементы.ЗаписатьДокумент.Видимость = Не ЗначениеЗаполнено(Объект.Ссылка);
	
	Элементы.Подписать.Видимость = Ложь;
	Элементы.ПодписатьДокумент.Видимость = Ложь;
	Элементы.Отправить.Видимость = Ложь;
	Элементы.ОтправитьДокумент.Видимость = Ложь;
	Элементы.ПодписатьОтправить.Видимость = Ложь;
	Элементы.ПодписатьОтправитьДокумент.Видимость = Ложь;
	
	Если ЕстьДействиеПоЭДО(ДействияНаЭтапе, Перечисления.ДействияПоЭДО.Подписать)
		И ЕстьДействиеПоЭДО(ДействияНаЭтапе, Перечисления.ДействияПоЭДО.Отправить) Тогда
		Элементы.ПодписатьОтправить.Видимость = Истина;
	ИначеЕсли ЕстьДействиеПоЭДО(ДействияНаЭтапе, Перечисления.ДействияПоЭДО.Подписать) Тогда
		Элементы.Подписать.Видимость = Истина;
	ИначеЕсли ЕстьДействиеПоЭДО(ДействияНаЭтапе, Перечисления.ДействияПоЭДО.Отправить)
		Или ЕстьДействиеПоЭДО(ДействияНаЭтапе, Перечисления.ДействияПоЭДО.ПодготовитьКОтправке)Тогда
		Элементы.Отправить.Видимость = Истина;
	КонецЕсли;
	
	Если ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокумента, Перечисления.ДействияПоЭДО.Подписать)
		И ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокумента, Перечисления.ДействияПоЭДО.Отправить) Тогда
		Элементы.ПодписатьОтправитьДокумент.Видимость = Истина;
	ИначеЕсли ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокумента, Перечисления.ДействияПоЭДО.Подписать) Тогда
		Элементы.ПодписатьДокумент.Видимость = Истина;
	ИначеЕсли ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокумента, Перечисления.ДействияПоЭДО.Отправить)
		Или ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокумента, Перечисления.ДействияПоЭДО.ПодготовитьКОтправке) Тогда
		Элементы.ОтправитьДокумент.Видимость = Истина;
	КонецЕсли;
	
	Элементы.ПринятьАннулирование.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапе,
		Перечисления.ДействияПоЭДО.ПринятьАннулирование);
	Элементы.ПринятьАннулированиеДокумент.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокумента,
		Перечисления.ДействияПоЭДО.ПринятьАннулирование);
	
	Элементы.ОтклонитьАннулирование.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапе,
		Перечисления.ДействияПоЭДО.ОтклонитьАннулирование);
	Элементы.ОтклонитьАннулированиеДокумент.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокумента,
		Перечисления.ДействияПоЭДО.ОтклонитьАннулирование);
	
	Элементы.ОтклонитьПодписание.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапе,
		Перечисления.ДействияПоЭДО.ОтклонитьПодписание);
	Элементы.ОтклонитьПодписаниеДокумент.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокумента,
		Перечисления.ДействияПоЭДО.ОтклонитьПодписание);
	
	Элементы.Отклонить.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапе, Перечисления.ДействияПоЭДО.Отклонить);
	Элементы.ОтклонитьДокумент.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокумента,
		Перечисления.ДействияПоЭДО.Отклонить);
	
	Элементы.Аннулировать.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапе, Перечисления.ДействияПоЭДО.Аннулировать);
	Элементы.АннулироватьДокумент.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокумента,
		Перечисления.ДействияПоЭДО.Аннулировать);
	
	Элементы.Завершить.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапе, Перечисления.ДействияПоЭДО.ЗакрытьПринудительно);
	Элементы.ЗавершитьДокумент.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокумента,
		Перечисления.ДействияПоЭДО.ЗакрытьПринудительно);
	
	Элементы.ОтправитьВАрхив.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапе, Перечисления.ДействияПоЭДО.ОтправитьВАрхив);
	Элементы.ОтправитьВАрхивДокумент.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокумента,
		Перечисления.ДействияПоЭДО.ОтправитьВАрхив);
	
	Элементы.ВернутьВРаботу.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапе, Перечисления.ДействияПоЭДО.ВернутьВРаботу);
	Элементы.ВернутьВРаботуДокумент.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокумента,
		Перечисления.ДействияПоЭДО.ВернутьВРаботу);
	
	Элементы.ОтправитьПовторно.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапе,
		Перечисления.ДействияПоЭДО.ОтправитьПовторно);
	Элементы.ОтправитьПовторноДокумент.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокумента,
		Перечисления.ДействияПоЭДО.ОтправитьПовторно);
	
	ПакетСоставной = СоставПакета.Количество() > 1;
	
	Элементы.ДействияСДокументом.Видимость = ПакетСоставной И СостоянияПакетаОднородно 
		И СостояниеЭДО <> Перечисления.СостоянияДокументовЭДО.НеСформирован
		И СостояниеЭДО <> Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправка
		И СостояниеЭДО <> Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание;
	
	Элементы.Подписать.Заголовок = ИнтерфейсДокументовЭДО.ПредставлениеКомандыПодписать(ПакетСоставной, СостоянияПакетаОднородно);
	Элементы.Отправить.Заголовок = ИнтерфейсДокументовЭДО.ПредставлениеКомандыОтправить(ПакетСоставной, СостоянияПакетаОднородно);
	Элементы.ПодписатьОтправить.Заголовок = ИнтерфейсДокументовЭДО.ПредставлениеКомандыПодписатьИОтправить(ПакетСоставной, СостоянияПакетаОднородно);
	Элементы.ПринятьАннулирование.Заголовок = ИнтерфейсДокументовЭДО.ПредставлениеКомандыПринятьАннулирование(ПакетСоставной, СостоянияПакетаОднородно);
	Элементы.ОтклонитьАннулирование.Заголовок = ИнтерфейсДокументовЭДО.ПредставлениеКомандыОтклонитьАннулирование(ПакетСоставной, СостоянияПакетаОднородно);		
	Элементы.Отклонить.Заголовок = ИнтерфейсДокументовЭДО.ПредставлениеКомандыОтклонить(ПакетСоставной, СостоянияПакетаОднородно);
	Элементы.ОтклонитьПодписание.Заголовок = ИнтерфейсДокументовЭДО.ПредставлениеКомандыОтклонитьПодписание(ПакетСоставной, СостоянияПакетаОднородно);
	Элементы.Переформировать.Заголовок = ИнтерфейсДокументовЭДО.ПредставлениеКомандыПереформировать(ПакетСоставной, СостоянияПакетаОднородно);
	Элементы.Аннулировать.Заголовок = ИнтерфейсДокументовЭДО.ПредставлениеКомандыАннулировать(ПакетСоставной, СостоянияПакетаОднородно);
	Элементы.ОтправитьВАрхив.Заголовок = ИнтерфейсДокументовЭДО.ПредставлениеКомандыОтправитьВАрхив(ПакетСоставной, СостоянияПакетаОднородно);
	Элементы.ВернутьВРаботу.Заголовок = ИнтерфейсДокументовЭДО.ПредставлениеКомандыВернутьВРаботу(ПакетСоставной, СостоянияПакетаОднородно);
	Элементы.ОтправитьПовторно.Заголовок = ИнтерфейсДокументовЭДО.ПредставлениеКомандыОтправитьПовторно(ПакетСоставной, СостоянияПакетаОднородно);
	
КонецПроцедуры

&НаСервере
Функция ЕстьДействиеПоЭДО(ДоступныеДействия, ДействиеПоЭДО)
	Возврат ИнтерфейсДокументовЭДО.ЕстьДействиеПоЭДО(ДоступныеДействия, ДействиеПоЭДО);
КонецФункции

#КонецОбласти

#Область ПредставлениеОбъектовУчета

&НаСервере
Процедура УстановитьПредставлениеОбъектовУчета()
	
	Если Не ЗначениеЗаполнено(СписокОбъектовУчета)
		И ИнтерфейсДокументовЭДО.ЭтоВнутреннийТипДокумента(ТипДокумента) Тогда
		Элементы.ОбъектыУчетаПредставление.Видимость = Ложь;
		Возврат;
	КонецЕсли;

	ПредставлениеОбъектовУчета = ИнтерфейсДокументовЭДО.ПредставлениеОбъектовУчетаИсходящегоДокумента(СписокОбъектовУчета,
		ТипДокумента);
	Элементы.ОбъектыУчетаПредставление.Заголовок = ПредставлениеОбъектовУчета.Заголовок;
	ОбъектыУчетаПредставление = ПредставлениеОбъектовУчета.Представление;

КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеДокументовУчетаЭлектронногоДокументаНажатие()
		
	Если СписокОбъектовУчета.Количество() = 1 Тогда
		ПоказатьЗначение(, СписокОбъектовУчета[0].Значение);
	Иначе
		ПередОткрытиемФормыПодбораОбъектовУчета();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередОткрытиемФормыПодбораОбъектовУчета()
	
	Если Модифицированность Или Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Описание = Новый ОписаниеОповещения("ОткрытьФормуПодбораОбъектовУчетаПослеВопроса", ЭтотОбъект);

		Текст = НСтр("ru = 'Для выполнения операции необходимо сохранить документ. Продолжить?'");
		ПоказатьВопрос(Описание, Текст, РежимДиалогаВопрос.ДаНет);
		Возврат;
	Иначе
		ОткрытьПодборОбъектовУчета();
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Результат - КодВозвратаДиалога
//  ДополнительныеПараметры - Неопределено
&НаКлиенте
Процедура ОткрытьФормуПодбораОбъектовУчетаПослеВопроса(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ВыполнитьДействияПриЗаписи();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьПодборОбъектовУчета();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборОбъектовУчета()

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЭлектронныйДокумент", Объект.Ссылка);
	ПараметрыФормы.Вставить("ВидДокумента", Объект.ВидДокумента);
	ПараметрыФормы.Вставить("ДокументРаспознан", Истина);
	
	ИнтерфейсДокументовЭДОКлиент.ОткрытьПодборОбъектовУчетаЭлектронногоДокумента(ПараметрыФормы);

КонецПроцедуры

#КонецОбласти

#Область ПолучениеДанных

// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения
//  ВыводитьОкноОжидания - Булево
&НаКлиенте
Процедура ОжидатьПолученияДанныхИзСервиса(ОповещениеОЗавершении, ВыводитьОкноОжидания = Ложь)
	
	ДлительнаяОперация = ОперацияПолученияДанныхИзСервиса; // см. ДлительныеОперации.ВыполнитьФункцию
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьДанныеИзСервисаПослеДлительнойОперации",
		ЭтотОбъект, ОповещениеОЗавершении);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.Вставить("ВыводитьОкноОжидания", ВыводитьОкноОжидания);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

// Возвращаемое значение:
//  Структура:
//  * Успех - Булево
//  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
&НаКлиенте
Функция НовыйРезультатОжиданияПолученияДанныхИзСервиса()
	Результат = Новый Структура;
	Результат.Вставить("Успех", Ложь);
	Результат.Вставить("КонтекстДиагностики", ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики());
	Возврат Результат;
КонецФункции

// Параметры:
//  ДлительнаяОперация - см. ДлительныеОперации.ВыполнитьФункцию
//  ОповещениеОЗавершении - ОписаниеОповещения
&НаКлиенте
Процедура ЗаполнитьДанныеИзСервисаПослеДлительнойОперации(ДлительнаяОперация, ОповещениеОЗавершении) Экспорт
	
	Результат = НовыйРезультатОжиданияПолученияДанныхИзСервиса();
	
	Если ДлительнаяОперация <> Неопределено
		И ДлительнаяОперация.Статус = "Выполнено" Тогда
		ОперацияПолученияДанныхИзСервиса = ДлительнаяОперация;
		Результат.Успех = Истина;
	Иначе
		ОперацияПолученияДанныхИзСервиса = Неопределено;
		ВидОперации = НСтр("ru = 'Получение данных из сервиса облачного ЭДО'");
		ТекстСообщения = ?(ДлительнаяОперация = Неопределено, 
			НСтр("ru = 'Не удалось получить данные из сервиса облачного ЭДО.'"),
			ДлительнаяОперация.КраткоеПредставлениеОшибки);
		Ошибка = ОбработкаНеисправностейБЭДКлиент.НоваяОшибка(ВидОперации,
			ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка(), ТекстСообщения, ТекстСообщения);
		ОбработкаНеисправностейБЭДКлиент.ДобавитьОшибку(Результат.КонтекстДиагностики, Ошибка,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ИнтеграцияОблачногоЭДО);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

&НаСервере
Функция РезультатПолученияДанныхИзСервиса()
	
	ДлительнаяОперация = ОперацияПолученияДанныхИзСервиса; // см. ДлительныеОперации.ВыполнитьФункцию
	
	Если ДлительнаяОперация <> Неопределено
		И ДлительнаяОперация.Статус = "Выполнено" Тогда
		Результат = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
		УдалитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
		ОперацияПолученияДанныхИзСервиса = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеДанныхДокумента

&НаСервере
Процедура ЗаполнитьДанныеНовогоДокумента()
	
	Объект.ЭтоОблачныйЭДО = Истина;
	
	ТипВизуализации = ТипВизуализацииФайл();
	
	УстановитьСостояние(Перечисления.СостоянияДокументовЭДО.НеСформирован);
	
	ПолучитьДанныеПредварительногоПросмотра();
	
	ЗаполнитьДанныеПредварительногоПросмотра();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеДокумента(ИспользоватьКэш = Истина)
	
	ТипВизуализации = ТипВизуализацииФайл();
	
	ТипДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, "ТипДокумента");
	
	ДанныеПросмотраЗаполнены = Ложь;
	
	Если ИспользоватьКэш Тогда
		ДанныеПросмотраЗаполнены = ЗаполнитьДанныеПросмотраИзКэша();
		ОтложенноеЗаполнениеПодписей = Истина;
	КонецЕсли;
	
	Если Не ДанныеПросмотраЗаполнены Тогда
		
		ОтложенноеЗаполнениеПодписей = Ложь;
		
		ПолучитьДанныеПросмотраИзСервиса();
		
		ЗаполнитьДанныеПросмотраИзСервиса();
		
	КонецЕсли;
	
	ЗаполнитьДанныеПакета();
	
	ЗаполнитьОбъектыУчета();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОбъектыУчета()
	ЭлектронныеДокументы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка);
	ОбъектыУчетаЭлектронныхДокументов = ИнтеграцияЭДО.ОбъектыУчетаЭлектронныхДокументов(ЭлектронныеДокументы);
	НаборОбъектовУчета = ОбъектыУчетаЭлектронныхДокументов.ВыгрузитьКолонку("ОбъектУчета");
	СписокОбъектовУчета.ЗагрузитьЗначения(НаборОбъектовУчета);
КонецПроцедуры

// Параметры:
//  ДанныеВизуализации - Структура:
//  * ТипДанных - Строка
//  * Данные - Строка
//           - ДвоичныеДанные
&НаСервере
Процедура УстановитьВизуализациюДокумента(ДанныеВизуализации)
	
	Если Не ЗначениеЗаполнено(ДанныеВизуализации) Тогда
		ТипВизуализации = ТипВизуализацииОшибка();
	ИначеЕсли ДанныеВизуализации.ТипДанных = ТипыДанныхВизуализации().ТабличныйДокумент Тогда
		ТипВизуализации = ТипВизуализацииТабличныйДокумент();
		ВизуализацияТабличныйДокумент = ДанныеВизуализации.Данные;
	Иначе
		ТипВизуализации = ТипВизуализацииФайл();
		ИмяПроизвольногоФайла = ДанныеВизуализации.Данные;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодписи(ОписанияУстановленныхПодписей)
	
	Если Подписи.Количество() Тогда
		Подписи.Очистить();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОписанияУстановленныхПодписей) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ОписаниеПодписи Из ОписанияУстановленныхПодписей Цикл
		СтрокаПодписи = Подписи.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПодписи, ОписаниеПодписи);
		СтрокаПодписи.ВыводКартинки = ?(СтрокаПодписи.ПодписьВерна, 0, 1);
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  НовоеСостояниеЭДО - ПеречислениеСсылка.СостоянияДокументовЭДО
//  Комментарий - Строка
&НаСервере
Процедура УстановитьСостояние(НовоеСостояниеЭДО, Комментарий = "")
	
	СостояниеЭДО = НовоеСостояниеЭДО;
	
	КомментарийСостояния = Комментарий;
	
	ЗаполнитьПредставлениеСостояния(Комментарий);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредставлениеСостояния(Комментарий = "")
	Если ЗначениеЗаполнено(Комментарий) Тогда
		ШаблонПредставления = "%1 (%2)";
		СостоянияПредставление = СтрШаблон(ШаблонПредставления, СостояниеЭДО, Комментарий);
	ИначеЕсли ЗначениеЗаполнено(СостояниеЭДО) Тогда
		СостоянияПредставление = Строка(СостояниеЭДО);
	Иначе
		СостоянияПредставление = Строка(НачальноеСостояниеДокумента());
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция НачальноеСостояниеДокумента()
	Возврат Перечисления.СостоянияДокументовЭДО.НеСформирован;
КонецФункции

// Возвращаемое значение:
//  См. ИнтеграцияОблачногоЭДО.НовыеПараметрыВизуализацииДокумента
&НаСервере
Функция ПараметрыВизуализацииДокумента()
	ПараметрыВизуализации = ИнтеграцияОблачногоЭДО.НовыеПараметрыВизуализацииДокумента();
	ПараметрыВизуализации.ВыводитьБанковскиеРеквизиты = ВыводитьБанковскиеРеквизиты;
	ПараметрыВизуализации.ВыводитьДопДанные = Не ОтключитьВыводДопДанных;
	ПараметрыВизуализации.ВыводитьКопияВерна = Не ОтключитьВыводКопияВерна;
	Возврат ПараметрыВизуализации
КонецФункции

&НаСервере
Процедура УстановитьНовыйНомерДокумента(ТекущийОбъект)
	
	Если Не ТекущийОбъект.ЭтоНовый()
		ИЛИ ЗначениеЗаполнено(ТекущийОбъект.НомерДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекущийОбъект.Номер) Тогда
		ТекущийОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	
	ТекущийОбъект.НомерДокумента = СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(ТекущийОбъект.Номер, "0");
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеНовогоДокумента(Отказ)
	
	Если Не ЗначениеЗаполнено(АдресПроизвольногоФайла) 
		И Не ЗначениеЗаполнено(АдресОсновногоФайлаПредварительногоПросмотра) Тогда
		
		ТекстОшибки = НСтр("ru = 'Необходимо приложить файл.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,, "КартинкаФайла");
		
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеДокументаПослеПодбораОбъектовУчета()
	
	ЗаполнитьОбъектыУчета();
	
	НастроитьОформлениеФормы();
	
КонецПроцедуры

&НаСервере
Функция ТипыДанныхВизуализации()
	Возврат Перечисления["ТипыДанныхВизуализацииДокументаЭДО"]
КонецФункции

#Область ЗаполнениеДанныхПросмотра

&НаСервере
Процедура ПолучитьДанныеПросмотраИзСервиса()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВизуализации = ПараметрыВизуализацииДокумента();
	
	// См. ИнтеграцияОблачногоЭДО.ДанныеДляПросмотраДокументаЭДО
	ОперацияПолученияДанныхИзСервиса = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
		"ИнтеграцияОблачногоЭДО.ДанныеДляПросмотраДокументаЭДО", Объект.Ссылка, ПараметрыВизуализации);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьДанныеПросмотраИзКэша()
	
	Результат = Истина;
	
	ДанныеВизуализации = ИнтеграцияОблачногоЭДО.ДанныеВизуализацииДокументаИзКэша(Объект.Ссылка);
	Если ЗначениеЗаполнено(ДанныеВизуализации) Тогда
		УстановитьВизуализациюДокумента(ДанныеВизуализации);
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Если Не ЗаполнитьСостояниеДокументаИзКэша() Тогда
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗаполнитьСостояниеДокументаИзКэша()
	
	Результат = Истина;
	
	СостояниеДокументаПолное = РегистрыСведений.СостоянияДокументовЭДО.СостояниеДокументаПолное(Объект.Ссылка);
	Если ЗначениеЗаполнено(СостояниеДокументаПолное.Состояние) Тогда
		УстановитьСостояние(СостояниеДокументаПолное.Состояние, СостояниеДокументаПолное.Комментарий);
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеПросмотраИзСервиса()
	
	ДанныеПросмотра = РезультатПолученияДанныхИзСервиса(); // см. ИнтеграцияОблачногоЭДО.ДанныеДляПросмотраДокументаЭДО
	
	Если Не ЗначениеЗаполнено(ДанныеПросмотра) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьВизуализациюДокумента(ДанныеПросмотра.Визуализация);
	
	СостояниеДокументаПолное = ДанныеПросмотра.СостояниеДокументаПолное;
	
	Если ЗначениеЗаполнено(СостояниеДокументаПолное) Тогда
		УстановитьСостояние(СостояниеДокументаПолное.Состояние, СостояниеДокументаПолное.Комментарий);
	КонецЕсли;
	
	ЗаполнитьПодписи(ДанныеПросмотра.ОписанияУстановленныхПодписей);
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьПолученияДанныхПросмотра()
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьДанныеПросмотраПослеДлительнойОперации", ЭтотОбъект);
	ОжидатьПолученияДанныхИзСервиса(Оповещение);
КонецПроцедуры

// Параметры:
//  Результат - см. НовыйРезультатОжиданияПолученияДанныхИзСервиса
//  Контекст - Неопределено
&НаКлиенте
Процедура ЗаполнитьДанныеПросмотраПослеДлительнойОперации(Результат, Контекст) Экспорт
	
	Если Результат.Успех Тогда
		ЗаполнитьДанныеПросмотраПослеПолучения();
	Иначе
		УстановитьСтраницуСодержания();
		ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(Результат.КонтекстДиагностики);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПросмотраПослеПолучения()
	
	ЗаполнитьДанныеПросмотраИзСервиса();
	
	УстановитьСтраницуСодержания();
	
КонецПроцедуры

#КонецОбласти // ЗаполнениеДанныхПросмотра

#Область ЗаполнениеДанныхПредварительногоПросмотра

&НаСервере
Процедура ПолучитьДанныеПредварительногоПросмотра()
	
	ПредварительныйПросмотр = Новый Структура;
	
	Если Не Параметры.Свойство("ПредварительныйПросмотр", ПредварительныйПросмотр) Тогда
		Возврат;
	КонецЕсли;
	
	АдресОписанияДокументов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПредварительныйПросмотр, "АдресДанных", ""); // Строка
	
	ОписанияДокументовОбъектаУчета = ПолучитьИзВременногоХранилища(АдресОписанияДокументов); // см. ИнтеграцияЭДО.ОписаниеОбъектаУчета
	УдалитьИзВременногоХранилища(АдресОписанияДокументов);
	
	ПараметрыВизуализации = ПараметрыВизуализацииДокумента();
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	
	// См. ИнтеграцияОблачногоЭДО.ДанныеДляПредварительногоПросмотра
	ОперацияПолученияДанныхИзСервиса = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
		"ИнтеграцияОблачногоЭДО.ДанныеДляПредварительногоПросмотра",
		ОписанияДокументовОбъектаУчета, ПараметрыВизуализации);
	
	ОбъектыУчета = ОбщегоНазначения.ВыгрузитьКолонку(ОписанияДокументовОбъектаУчета, "ОбъектУчета", Истина);
	СписокОбъектовУчета.ЗагрузитьЗначения(ОбъектыУчета);
	
	Объект.ВидДокумента = ИнтерфейсДокументовЭДО.ВидДокументаПоТипу(ОписанияДокументовОбъектаУчета[0].ТипДокумента);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПредварительногоПросмотра()
	
	ДанныеПредварительногоПросмотра = РезультатПолученияДанныхИзСервиса(); // см. ИнтеграцияОблачногоЭДО.ДанныеДляПредварительногоПросмотра
	
	Если Не ЗначениеЗаполнено(ДанныеПредварительногоПросмотра) Тогда
		Объект.ИдентификаторДокумента = Строка(Новый УникальныйИдентификатор);
		ИспользуетсяНесколькоОрганизаций = ИнтеграцияЭДО.ИспользуетсяНесколькоОрганизаций();
		Объект.ДатаДокумента = ТекущаяДатаСеанса();
		Если ИспользуетсяНесколькоОрганизаций Тогда
			Объект.Организация = ИнтеграцияЭДО.ОрганизацияПоУмолчанию();
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.ВидДокумента) Тогда
			Объект.ВидДокумента = ИнтерфейсДокументовЭДО.ВидДокументаПоТипу(Перечисления.ТипыДокументовЭДО.Прочее);
		КонецЕсли;
		Возврат;
		
	ИначеЕсли ДанныеПредварительногоПросмотра.Ошибка Тогда
		
		УстановитьВизуализациюДокумента(ДанныеПредварительногоПросмотра.Визуализация);
		Возврат;
		
	КонецЕсли;
	
	ОписаниеДокументаЭДО = ДанныеПредварительногоПросмотра.ОписаниеДокументаЭДО;
	
	Объект.ИдентификаторДокумента = ОписаниеДокументаЭДО.Идентификатор;
	Объект.ВидДокумента = ОписаниеДокументаЭДО.ВидДокумента;
	Объект.Организация = ОписаниеДокументаЭДО.Организация;
	Объект.Контрагент = ОписаниеДокументаЭДО.Контрагент;
	Объект.ДоговорКонтрагента = ОписаниеДокументаЭДО.Договор;
	
	Объект.НомерДокумента = ОписаниеДокументаЭДО.Номер;
	Объект.ДатаДокумента = ОписаниеДокументаЭДО.Дата;
	Объект.СуммаДокумента = ОписаниеДокументаЭДО.Сумма;
	
	АдресОсновногоФайлаПредварительногоПросмотра =  ПоместитьВоВременноеХранилище(
		ДанныеПредварительногоПросмотра.ОсновнойФайл, УникальныйИдентификатор);
	
	Если ЗначениеЗаполнено(ДанныеПредварительногоПросмотра.ДополнительныйФайл) Тогда
		АдресДополнительногоФайлаПредварительногоПросмотра = ПоместитьВоВременноеХранилище(
			ДанныеПредварительногоПросмотра.ДополнительныйФайл, УникальныйИдентификатор);
	КонецЕсли;
	
	АдресВизуализацииПредварительногоПросмотра = ПоместитьВоВременноеХранилище(
		ДанныеПредварительногоПросмотра.Визуализация, УникальныйИдентификатор);
	
	СписокОбъектовУчета.ЗагрузитьЗначения(ОписаниеДокументаЭДО.ОбъектыУчета);
	
	УстановитьВизуализациюДокумента(ДанныеПредварительногоПросмотра.Визуализация);
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьПолученияДанныхПредварительногоПросмотра()
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьДанныеПредварительногоПросмотраПослеДлительнойОперации", ЭтотОбъект);
	ОжидатьПолученияДанныхИзСервиса(Оповещение);
КонецПроцедуры

// Параметры:
//  Результат - см. НовыйРезультатОжиданияПолученияДанныхИзСервиса
//  Контекст - Неопределено
&НаКлиенте
Процедура ЗаполнитьДанныеПредварительногоПросмотраПослеДлительнойОперации(Результат, Контекст) Экспорт
	
	Если Результат.Успех Тогда
		ЗаполнитьДанныеПредварительногоПросмотраПослеПолучения();
	Иначе
		УстановитьСтраницуСодержания();
		ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(Результат.КонтекстДиагностики);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПредварительногоПросмотраПослеПолучения()
	
	ЗаполнитьДанныеПредварительногоПросмотра();
	
	УстановитьСтраницуСодержания();
	
КонецПроцедуры

#КонецОбласти // ЗаполнениеДанныхПредварительногоПросмотра

#КонецОбласти // ЗаполнениеДанныхДокумента

#Область ОбновлениеВизуализацииДокумента

&НаКлиенте
Процедура ОбновитьВизуализациюДокумента()
	
	ОбновитьВизуализациюДокументаИзСервиса();
	
	ОжидатьПолучениеВизуализацииДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВизуализациюДокументаИзСервиса()
	
	ПолучитьВизуализациюДокументаИзСервиса();
	
	ЗаполнитьВизуализациюДокументаИзСервиса();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьВизуализациюДокументаИзСервиса()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВизуализации = ПараметрыВизуализацииДокумента();
	
	// См. ИнтеграцияОблачногоЭДО.ДанныеДляПросмотраДокументаЭДО
	ОперацияПолученияДанныхИзСервиса = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
		"ИнтеграцияОблачногоЭДО.ВизуализацияДокумента", Объект.Ссылка, ПараметрыВизуализации);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВизуализациюДокументаИзСервиса()
	
	Визуализация = РезультатПолученияДанныхИзСервиса(); // см. ИнтеграцияОблачногоЭДО.ВизуализацияДокументаЭДО
	
	Если ЗначениеЗаполнено(Визуализация) Тогда
		УстановитьВизуализациюДокумента(Визуализация);
	КонецЕсли;
	
	УстановитьСтраницуСодержания();
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьПолучениеВизуализацииДокумента()
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьВизуализациюДокументаПослеОжидания", ЭтотОбъект);
	ОжидатьПолученияДанныхИзСервиса(Оповещение);
КонецПроцедуры

// Параметры:
//  Результат - см. НовыйРезультатОжиданияПолученияДанныхИзСервиса
//  Контекст - Неопределено
&НаКлиенте
Процедура ЗаполнитьВизуализациюДокументаПослеОжидания(Результат, Контекст) Экспорт
	
	Если Результат.Успех Тогда
		ЗаполнитьВизуализациюДокументаИзСервиса();
	Иначе
		УстановитьСтраницуСодержания();
		ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(Результат.КонтекстДиагностики);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПакетДокумента

&НаСервере
Процедура ЗаполнитьДанныеПакета()
	
	ИдентификаторПакета = РегистрыСведений.ПакетыДокументовЭДО.ИдентификаторПакетаДокумента(Объект.Ссылка);
	
	Если Не ЗначениеЗаполнено(ИдентификаторПакета) Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоОтображаемыхДокументовПакета = 3;
	
	СоставПакета.ЗагрузитьЗначения(ПакетыДокументовЭДО.ДокументыПакета(ИдентификаторПакета));
	
	СостоянияДокументовПакета = ПакетыДокументовЭДО.СостоянияДокументовПакета(ИдентификаторПакета);
	СостояниеПакета = ПакетыДокументовЭДО.СостояниеПакета(СостоянияДокументовПакета);
	СостоянияПакетаОднородно = ЗначениеЗаполнено(СостояниеПакета);
	
	СостоянияДоступностиИзмененияПакета = Новый Массив;
	СостоянияДоступностиИзмененияПакета.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание);
	СостоянияДоступностиИзмененияПакета.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправка);
	СостоянияДоступностиИзмененияПакета.Добавить(Перечисления.СостоянияДокументовЭДО.НеСформирован);
	
	ДоступноИзменениеПакета = Истина;
	
	Если ЗначениеЗаполнено(СостоянияДокументовПакета) Тогда
		Для Каждого СостояниеДокумента Из СостоянияДокументовПакета Цикл
			Если СостоянияДоступностиИзмененияПакета.Найти(СостояниеДокумента) = Неопределено Тогда
				ДоступноИзменениеПакета = Ложь;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ДоступноИзменениеПакета = СостоянияДоступностиИзмененияПакета.Найти(СостояниеЭДО) <> Неопределено;			
	КонецЕсли;
	
	ТребуетсяОднородностьОтвета = СинхронизацияЭДО.ТребуетсяОднородностьОтвета(Объект.ИдентификаторКонтрагента);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПанельСоставаПакета()
	
	ПакетыДокументовЭДО.СформироватьПанельСоставаПакета(ЭтотОбъект, Элементы.ГруппаСоставПакета,
		КоличествоОтображаемыхДокументовПакета, Перечисления.НаправленияЭДО.Исходящий);
	
	ПакетыДокументовЭДО.ЗаполнитьПанельСоставаПакета(ЭтотОбъект);
	
КонецПроцедуры

// Параметры:
//  Ответ - Неопределено,КодВозвратаДиалога
//  Параметры - Неопределено
&НаКлиенте
Процедура ДобавитьВПакетДокументИнформационнойБазыПослеОтветаНаВопрос(Ответ, Параметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ДокументЗаписан = Записать();
	
	Если ДокументЗаписан Тогда
		ДобавитьВПакетДокументИнформационнойБазы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВПакетДокументИнформационнойБазы()
	
	ДополнительныеПараметры = ПараметрыДобавленияВПакет();
	
	ПакетыДокументовЭДОКлиент.ПослеВыбораСпособаДобавленияДокументаВПакет(
		"ДобавитьВПакетДокументИнформационнойБазы", ДополнительныеПараметры);
	
КонецПроцедуры

// Возвращаемое значение:
//  См. ПакетыДокументовЭДОКлиент.НовыеПараметрыДобавленияВПакет
//
&НаКлиенте
Функция ПараметрыДобавленияВПакет()
	
	ПараметрыДобавленияВПакет = ПакетыДокументовЭДОКлиент.НовыеПараметрыДобавленияВПакет();
	ПараметрыДобавленияВПакет.ИдентификаторПакета = ИдентификаторПакета;
	ПараметрыДобавленияВПакет.ЭлектронныйДокумент = Объект.Ссылка;
	ПараметрыДобавленияВПакет.Отправитель = Объект.Организация;
	ПараметрыДобавленияВПакет.Получатель = Объект.Контрагент;
	ПараметрыДобавленияВПакет.Договор = Объект.ДоговорКонтрагента;
	ПараметрыДобавленияВПакет.ЭтоОблачныйЭДО = Истина;
	ПараметрыДобавленияВПакет.ОтключитьТранслитерацию = ОтключитьТранслитерацию;
	Возврат ПараметрыДобавленияВПакет;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьВПакетПрисоединенныйФайл()
	
	ДополнительныеПараметры = ПараметрыДобавленияВПакет();
	
	ПакетыДокументовЭДОКлиент.ПослеВыбораСпособаДобавленияДокументаВПакет("ДобавитьВПакетПрисоединенныйФайл",
		ДополнительныеПараметры);
	
КонецПроцедуры

// Параметры:
//  Ответ - Неопределено,КодВозвратаДиалога
//  Параметры - Неопределено
&НаКлиенте
Процедура ДобавитьВПакетПрисоединенныйФайлПослеОтветаНаВопрос(Ответ, Параметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ДокументЗаписан = Записать();
	
	Если ДокументЗаписан Тогда
		ДобавитьВПакетПрисоединенныйФайл();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВПакетФайлСКомпьютера()
	
	ДополнительныеПараметры = ПараметрыДобавленияВПакет();
	
	ПакетыДокументовЭДОКлиент.ПослеВыбораСпособаДобавленияДокументаВПакет("ДобавитьВПакетФайлСКомпьютера",
		ДополнительныеПараметры);
	
КонецПроцедуры

// Параметры:
//  Ответ - Неопределено,КодВозвратаДиалога
//  Параметры - Неопределено
&НаКлиенте
Процедура ДобавитьВПакетФайлСКомпьютераПослеОтветаНаВопрос(Ответ, Параметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ДокументЗаписан = Записать();
	
	Если ДокументЗаписан Тогда
		ДобавитьВПакетФайлСКомпьютера();
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Документ - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
&НаСервере
Процедура УстановитьТекущийДокументПакета(Документ)
	
	Если Не ЗначениеЗаполнено(Документ) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектДокумента = Документ.ПолучитьОбъект();
	ЗначениеВДанныеФормы(ОбъектДокумента, Объект);
	Прочитать();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПодменюДобавитьДокументыВПакет()
	Элементы.ПодменюДобавитьДокументыВПакет.Видимость = СоставПакета.Количество() <= 1
		И ДоступноИзменениеПакета
КонецПроцедуры

&НаСервере
Функция СоставПакета_ОбработкаНавигационнойСсылкиНаСервере(Знач НавигационнаяСсылка)
	
	Возврат ПакетыДокументовЭДО.СоставПакета_ОбработкаНавигационнойСсылкиНаСервере(ЭтотОбъект, НавигационнаяСсылка);
	
КонецФункции

#КонецОбласти

#Область РаботаСФайлом

// Параметры:
//  ОписаниеПомещенногоФайла - Неопределено - если помещение файла было отменено.
//                           - ОписаниеПомещенногоФайла 
//  ДополнительныеПараметры - Неопределено
&НаКлиенте
Процедура ДобавитьВложениеИзФайлаНаДискеПослеВыбора(ОписаниеПомещенногоФайла, ДополнительныеПараметры) Экспорт
	
	Если ОписаниеПомещенногоФайла <> Неопределено
		И Не ОписаниеПомещенногоФайла.ПомещениеФайлаОтменено Тогда
		ДобавитьВложениеИзФайлаНаСервере(ОписаниеПомещенногоФайла.СсылкаНаФайл.Имя, ОписаниеПомещенногоФайла.Адрес);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ЗначениеВыбора - ОпределяемыйТип.ПрисоединенныйФайл
//                 - Неопределено - если произошел выбор, тогда будет 
//                   возвращено значение выбора. Иначе - Неопределено.
//  ДополнительныеПараметры - Неопределено
&НаКлиенте
Процедура ДобавитьВложениеИзФайлаОснованияПослеВыбора(ЗначениеВыбора, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ЗначениеВыбора) Тогда
		ДобавитьВложениеИзФайлаОснования(ЗначениеВыбора);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ВыбранныйФайл - ОпределяемыйТип.ПрисоединенныйФайл
//  ДополнительныеПараметры - Неопределено
&НаСервере
Процедура ДобавитьВложениеИзФайлаОснования(Знач ВыбранныйФайл)
	
	ПараметрыДанныхФайла = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
	ПараметрыДанныхФайла.ИдентификаторФормы = УникальныйИдентификатор;
	ДанныеФайла = РаботаСФайлами.ДанныеФайла(ВыбранныйФайл);
	
	ДобавитьВложениеИзФайлаНаСервере(ДанныеФайла.ИмяФайла, ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	
КонецПроцедуры

// Параметры:
//  ИмяФайла - Строка
//  АдресВХранилище - Строка
&НаСервере
Процедура ДобавитьВложениеИзФайлаНаСервере(Знач ИмяФайла, Знач АдресВХранилище)
	
	СтруктураИмениФайла = Новый Файл(ИмяФайла);
	
	АдресПроизвольногоФайла = АдресВХранилище;
	
	ИмяПроизвольногоФайла = СтруктураИмениФайла.Имя;
	
	ИмяПроизвольногоФайла = СтрЗаменить(ИмяПроизвольногоФайла, "и" + Символ(774), "й");
	ИмяПроизвольногоФайла = СтрЗаменить(ИмяПроизвольногоФайла, "е" + Символ(776), "е");
	
	ИмяПроизвольногоФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(
		ИмяПроизвольногоФайла, "_");
	
	Если НЕ ОтключитьТранслитерацию Тогда
		ИмяПроизвольногоФайла = СтроковыеФункции.СтрокаЛатиницей(ИмяПроизвольногоФайла);
		ИмяПроизвольногоФайла = СтрЗаменить(ИмяПроизвольногоФайла, " ", "_");
	КонецЕсли;
	
	ИмяПроизвольногоФайла = РаботаСФайламиБЭДКлиентСервер.ДопустимоеИмяФайла(ИмяПроизвольногоФайла, Истина);
	
	ПодготовитьПредставлениеПроизвольногоФайла();
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьПредставлениеПроизвольногоФайла()
	
	РедактированиеЗапрещено = СостояниеЭДО <> Перечисления.СостоянияДокументовЭДО.НеСформирован;
	
	Если РедактированиеЗапрещено Тогда
		Элементы.НадписьИмяФайла.Гиперссылка = Истина;
		Элементы.НадписьИмяФайла.ЦветТекста = ЦветаСтиля.ЦветГиперссылкиБЭД;
		Элементы.ГруппаРедактированиеФайла.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Если КоличествоПрисоединенныхФайлов() > 0 Тогда
		Элементы.ГруппаКомандДобавитьЗаменить.Видимость = Истина;
		Элементы.ДобавитьВложениеИзФайлаНаДискеОдиночная.Видимость = Ложь;
	Иначе
		Элементы.ГруппаКомандДобавитьЗаменить.Видимость = Ложь;
		Элементы.ДобавитьВложениеИзФайлаНаДискеОдиночная.Видимость = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(АдресПроизвольногоФайла) Тогда
		ИмяПроизвольногоФайла = НСтр("ru = '<отсутствует>'");
		КартинкаПроизвольногоФайла = 0;
		Элементы.НадписьИмяФайла.Гиперссылка = Ложь;
		Элементы.НадписьИмяФайла.ЦветТекста = WebЦвета.Кирпичный;
		Возврат;
	КонецЕсли;
	
	КартинкаПроизвольногоФайла = РаботаСФайламиБЭДКлиентСервер.ИндексКартинкиПоРасширениюФайла(РасширениеПроизвольногоФайла);
	
	Элементы.НадписьИмяФайла.Гиперссылка = Истина;
	Элементы.НадписьИмяФайла.ЦветТекста = ЦветаСтиля.ЦветГиперссылкиБЭД;
	
	Если РедактированиеЗапрещено Тогда
		Элементы.ГруппаРедактированиеФайла.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаРедактированиеФайла.Видимость = Истина;
	
	Если ЗначениеЗаполнено(АдресПроизвольногоФайла) Тогда
		ИмяЗаголовкаКнопкиДобавить = НСтр("ru = 'Заменить на файл'");
		Элементы.ГруппаКомандДобавитьЗаменить.Заголовок = ИмяЗаголовкаКнопкиДобавить;
		Элементы.ДобавитьВложениеИзФайлаНаДискеОдиночная.Заголовок = ИмяЗаголовкаКнопкиДобавить;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция КоличествоПрисоединенныхФайлов()
	
	ВладелецПрисоединенныхФайлов = ВладелецПрисоединенныхФайлов();
	
	Если Не ЗначениеЗаполнено(ВладелецПрисоединенныхФайлов) Тогда
		Возврат 0;
	КонецЕсли;
	
	Файлы = Новый Массив;
	
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(ВладелецПрисоединенныхФайлов, Файлы);
	
	Возврат Файлы.Количество();
	
КонецФункции

// Возвращаемое значение:
//  Неопределено,ОпределяемыйТип.ВладелецПрисоединенныхФайлов
&НаСервере
Функция ВладелецПрисоединенныхФайлов()
	
	Владелец = ?(СписокОбъектовУчета.Количество() > 0, СписокОбъектовУчета[0].Значение, Неопределено);
	Если ЗначениеЗаполнено(Владелец)
		И Метаданные.ОпределяемыеТипы.ВладелецПрисоединенныхФайлов.Тип.СодержитТип(ТипЗнч(Владелец)) Тогда
		Возврат Владелец;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ТипыВизуализации

&НаСервере
Функция ТипВизуализацииФайл()
	Возврат Элементы.СтраницаСодержимоеФайл.Имя;
КонецФункции

&НаСервере
Функция ТипВизуализацииТабличныйДокумент()
	Возврат Элементы.СтраницаСодержимоеТабличныйДокумент.Имя
КонецФункции

&НаСервере
Функция ТипВизуализацииОшибка()
	Возврат Элементы.СтраницаСодержимоеОшибка.Имя
КонецФункции

#КонецОбласти

#Область ОбработкаДействийПоЭДО

&НаКлиенте
Процедура ВыполнитьДействияПриЗаписи()
	
	ПараметрыВыполнения = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	
	ЗаполнитьПараметрыФормированияДокументаЭДО(ПараметрыВыполнения);
	
	ВыполнитьДействияПоЭДО(ПараметрыВыполнения);
	
КонецПроцедуры

// Параметры:
//  ЭтоПакетнаяОбработка - Булево
&НаКлиенте
Процедура ВыполнитьДействияПодписатьОтправить(ЭтоПакетнаяОбработка = Ложь)
	
	ИнтерфейсДокументовЭДОКлиент.ЗаблокироватьЭлементФормы(ЭтотОбъект, ЗаблокированныеЭлементыФормы,
		Элементы.ПодписатьОтправить);
	ИнтерфейсДокументовЭДОКлиент.ЗаблокироватьЭлементФормы(ЭтотОбъект, ЗаблокированныеЭлементыФормы,
		Элементы.ЗаписатьДокумент);
	
	Оповещение = Новый ОписаниеОповещения("ПодписатьОтправитьПослеОжидания", ЭтотОбъект, ЭтоПакетнаяОбработка);
	
	ОжидатьБлокировкуЭлементовФормы(Оповещение);
	
КонецПроцедуры

// Параметры:
//  ЭтоПакетнаяОбработка - Булево
&НаКлиенте
Процедура ВыполнитьДействиеПодписать(ЭтоПакетнаяОбработка = Ложь)
	
	ИнтерфейсДокументовЭДОКлиент.ЗаблокироватьЭлементФормы(ЭтотОбъект, ЗаблокированныеЭлементыФормы,
		Элементы.Подписать);
	ИнтерфейсДокументовЭДОКлиент.ЗаблокироватьЭлементФормы(ЭтотОбъект, ЗаблокированныеЭлементыФормы,
		Элементы.ЗаписатьДокумент);
	
	Оповещение = Новый ОписаниеОповещения("ПодписатьПослеОжидания", ЭтотОбъект, ЭтоПакетнаяОбработка);
	
	ОжидатьБлокировкуЭлементовФормы(Оповещение);
	
КонецПроцедуры

// Параметры:
//  ЭтоПакетнаяОбработка - Булево
&НаКлиенте
Процедура ВыполнитьДействиеОтклонитьПодписание(ЭтоПакетнаяОбработка = Ложь)
	
	Оповещение = Новый ОписаниеОповещения("ОтклонитьПодписаниеПослеУказанияПричины", ЭтотОбъект, ЭтоПакетнаяОбработка);
	
	ПараметрыВводаСтроки = ОбщегоНазначенияБЭДКлиент.ПараметрыВводаСтроки();
	ПараметрыВводаСтроки.ЗаголовокФормы = НСтр("ru = 'Укажите причину отклонения документа'");
	ПараметрыВводаСтроки.НазваниеКнопкиПоУмолчанию = НСтр("ru = 'Отклонить'");
	ПараметрыВводаСтроки.Многострочность = Истина;
	ПараметрыВводаСтроки.Обязательность = Истина;
	ПараметрыВводаСтроки.КомментарийОбязательностиВвода =
		НСтр("ru = 'Для отказа от подписания документа необходимо указать причину.'");
	ОбщегоНазначенияБЭДКлиент.ПоказатьВводСтрокиБЭД(Оповещение, ПараметрыВводаСтроки);
	
КонецПроцедуры

// Параметры:
//  ЭтоПакетнаяОбработка - Булево
&НаКлиенте
Процедура ВыполнитьДействиеОтправить(ЭтоПакетнаяОбработка = Ложь)
	
	ПараметрыВыполнения = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	НаборДействий = ПараметрыВыполнения.НаборДействий;
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ПодготовитьКОтправке"));
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Отправить"));
	
	ВыполнитьДействияПоЭДО(ПараметрыВыполнения, ЭтоПакетнаяОбработка);
	
КонецПроцедуры

// Параметры:
//  ЭтоПакетнаяОбработка - Булево
&НаКлиенте
Процедура ВыполнитьДействиеАннулировать(ЭтоПакетнаяОбработка = Ложь)
	
	Оповещение = Новый ОписаниеОповещения("АннулироватьПослеУказанияПричины", ЭтотОбъект, ЭтоПакетнаяОбработка);
	
	ПараметрыВводаСтроки = ОбщегоНазначенияБЭДКлиент.ПараметрыВводаСтроки();
	ПараметрыВводаСтроки.ЗаголовокФормы = НСтр("ru = 'Укажите причины аннулирования документа'");
	ПараметрыВводаСтроки.НазваниеКнопкиПоУмолчанию = НСтр("ru = 'Аннулировать'");
	ПараметрыВводаСтроки.Многострочность = Истина;
	ПараметрыВводаСтроки.Обязательность = Истина;
	ПараметрыВводаСтроки.КомментарийОбязательностиВвода =
		НСтр("ru = 'Для аннулирования документа необходимо указать причину.'");
		
	ОбщегоНазначенияБЭДКлиент.ПоказатьВводСтрокиБЭД(Оповещение, ПараметрыВводаСтроки);
	
КонецПроцедуры

// Параметры:
//  ЭтоПакетнаяОбработка - Булево
&НаКлиенте
Процедура ВыполнитьДействиеПринятьАннулирование(ЭтоПакетнаяОбработка = Ложь)
	
	ПараметрыВыполнения = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	НаборДействий = ПараметрыВыполнения.НаборДействий;
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ПринятьАннулирование"));
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Подписать"));
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ПодготовитьКОтправке"));
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Отправить"));
	
	ВыполнитьДействияПоЭДО(ПараметрыВыполнения, ЭтоПакетнаяОбработка);
	
КонецПроцедуры

// Параметры:
//  ЭтоПакетнаяОбработка - Булево
&НаКлиенте
Процедура ВыполнитьДействиеОтклонитьАннулирование(ЭтоПакетнаяОбработка = Ложь)
	
	Оповещение = Новый ОписаниеОповещения("ОтклонитьАннулированиеПослеУказанияПричины", ЭтотОбъект, ЭтоПакетнаяОбработка);
	
	ПараметрыВводаСтроки = ОбщегоНазначенияБЭДКлиент.ПараметрыВводаСтроки();
	ПараметрыВводаСтроки.ЗаголовокФормы = НСтр("ru = 'Укажите причины отклонения предложения об аннулировании'");
	ПараметрыВводаСтроки.НазваниеКнопкиПоУмолчанию = НСтр("ru = 'Отклонить аннулирование'");
	ПараметрыВводаСтроки.Многострочность = Истина;
	ПараметрыВводаСтроки.Обязательность = Истина;
	ПараметрыВводаСтроки.КомментарийОбязательностиВвода =
		НСтр("ru = 'Для отклонения предложения об аннулировании документа необходимо указать причину.'");
	ОбщегоНазначенияБЭДКлиент.ПоказатьВводСтрокиБЭД(Оповещение, ПараметрыВводаСтроки);
	
КонецПроцедуры

// Параметры:
//  ЭтоПакетнаяОбработка - Булево
&НаКлиенте
Процедура ВыполнитьДействиеОтклонить(ЭтоПакетнаяОбработка = Ложь)
	
	Оповещение = Новый ОписаниеОповещения("ОтклонитьПослеУказанияПричины", ЭтотОбъект, ЭтоПакетнаяОбработка);
	
	ПараметрыВводаСтроки = ОбщегоНазначенияБЭДКлиент.ПараметрыВводаСтроки();
	ПараметрыВводаСтроки.ЗаголовокФормы = НСтр("ru = 'Укажите причины отклонения документа'");
	ПараметрыВводаСтроки.НазваниеКнопкиПоУмолчанию = НСтр("ru = 'Отклонить'");
	ПараметрыВводаСтроки.Многострочность = Истина;
	ПараметрыВводаСтроки.Обязательность = Истина;
	ПараметрыВводаСтроки.КомментарийОбязательностиВвода =
		НСтр("ru = 'Для отклонения документа необходимо указать причину.'");
	
	ОбщегоНазначенияБЭДКлиент.ПоказатьВводСтрокиБЭД(Оповещение, ПараметрыВводаСтроки);
	
КонецПроцедуры

// Параметры:
//  ЭтоПакетнаяОбработка - Булево
&НаКлиенте
Процедура ВыполнитьДействиеЗавершить(ЭтоПакетнаяОбработка = Ложь)
	
	Оповещение = Новый ОписаниеОповещения("ЗавершитьПослеУказанияПричины", ЭтотОбъект, ЭтоПакетнаяОбработка);
	
	ПараметрыВводаСтроки = ОбщегоНазначенияБЭДКлиент.ПараметрыВводаСтроки();
	ПараметрыВводаСтроки.ЗаголовокФормы = НСтр("ru = 'Укажите причины принудительного закрытия документа'");
	ПараметрыВводаСтроки.НазваниеКнопкиПоУмолчанию = НСтр("ru = 'Закрыть принудительно'");
	ПараметрыВводаСтроки.Многострочность = Истина;
	ПараметрыВводаСтроки.Обязательность = Истина;
	ПараметрыВводаСтроки.КомментарийОбязательностиВвода =
		НСтр("ru = 'Для принудительного закрытия документа необходимо указать причину.'");
	
	ОбщегоНазначенияБЭДКлиент.ПоказатьВводСтрокиБЭД(Оповещение, ПараметрыВводаСтроки);
	
КонецПроцедуры

// Параметры:
//  ЭтоПакетнаяОбработка - Булево
&НаКлиенте
Процедура ВыполнитьДействиеОтправитьВАрхив(ЭтоПакетнаяОбработка = Ложь)
	
	ПараметрыВыполнения = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	НаборДействий = ПараметрыВыполнения.НаборДействий;
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ОтправитьВАрхив"));
	
	ВыполнитьДействияПоЭДО(ПараметрыВыполнения, ЭтоПакетнаяОбработка);
	
КонецПроцедуры

// Параметры:
//  ЭтоПакетнаяОбработка - Булево
&НаКлиенте
Процедура ВыполнитьДействиеВернутьВРаботу(ЭтоПакетнаяОбработка = Ложь)
	
	ПараметрыВыполнения = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	НаборДействий = ПараметрыВыполнения.НаборДействий;
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ВернутьВРаботу"));
	
	ВыполнитьДействияПоЭДО(ПараметрыВыполнения, ЭтоПакетнаяОбработка);
	
КонецПроцедуры

// Параметры:
//  ЭтоПакетнаяОбработка - Булево
&НаКлиенте
Процедура ВыполнитьДействиеОтправитьПовторно(ЭтоПакетнаяОбработка = Ложь)
	
	ПараметрыВыполнения = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	НаборДействий = ПараметрыВыполнения.НаборДействий;
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ОтправитьПовторно"));
	
	ВыполнитьДействияПоЭДО(ПараметрыВыполнения, ЭтоПакетнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьБлокировкуЭлементовФормы(ОповещениеОЗавершении)
	
	ОповещениеОЗавершенииОжиданияБлокировки = ОповещениеОЗавершении;
	
	ПодключитьОбработчикОжидания("Подключаемый_ОжидатьБлокировкуЭлементовФормыЗавершение", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОжидатьБлокировкуЭлементовФормыЗавершение()
	
	ВыполнитьОбработкуОповещения(ОповещениеОЗавершенииОжиданияБлокировки, Истина);
	
КонецПроцедуры

// Параметры:
//  ПараметрыВыполненияДействийПоЭДО - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//
&НаКлиенте
Процедура ЗаполнитьПараметрыФормированияДокументаЭДО(ПараметрыВыполненияДействийПоЭДО)
	
	ЭтоНовыйДокумент = Не ЗначениеЗаполнено(Объект.Ссылка);
	
	Если Не ЭтоНовыйДокумент Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеДокументаПоФайлам = ОписаниеДокументаДляФормированияПоФайлам();
	
	ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ОписанияДокументовПоФайлам.Добавить(ОписаниеДокументаПоФайлам);
	
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(ПараметрыВыполненияДействийПоЭДО.НаборДействий,
		ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Сформировать"));
	
КонецПроцедуры

// Возвращаемое значение:
//  см. ИнтерфейсДокументовЭДОКлиентСервер.НовоеОписаниеДокументаДляФормированияПоФайлам
&НаКлиенте
Функция ОписаниеДокументаДляФормированияПоФайлам()
	ОписаниеДокумента = ИнтерфейсДокументовЭДОКлиентСервер.НовоеОписаниеДокументаДляФормированияПоФайлам();
	ОписаниеДокумента.Идентификатор = Объект.ИдентификаторДокумента;
	ОписаниеДокумента.Организация = Объект.Организация;
	ОписаниеДокумента.Контрагент = Объект.Контрагент;
	ОписаниеДокумента.Договор = Объект.ДоговорКонтрагента;
	ОписаниеДокумента.ВидДокумента = Объект.ВидДокумента;
	ОписаниеДокумента.Номер = Объект.НомерДокумента;
	ОписаниеДокумента.Дата = Объект.ДатаДокумента;
	ОписаниеДокумента.Сумма = Объект.СуммаДокумента;
	Если ЗначениеЗаполнено(АдресОсновногоФайлаПредварительногоПросмотра) Тогда
		ОписаниеДокумента.ОсновнойФайл = ПолучитьИзВременногоХранилища(
			АдресОсновногоФайлаПредварительногоПросмотра);
	КонецЕсли;
	Если ЗначениеЗаполнено(АдресДополнительногоФайлаПредварительногоПросмотра) Тогда
		ОписаниеДокумента.ДополнительныйФайл = ПолучитьИзВременногоХранилища(
			АдресДополнительногоФайлаПредварительногоПросмотра);
	КонецЕсли;
	Возврат ОписаниеДокумента
КонецФункции

&НаКлиенте
Процедура ПодписатьОтправитьПослеОжидания(Результат, ЭтоПакетнаяОбработка) Экспорт
	
	ПараметрыВыполнения = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	НаборДействий = ПараметрыВыполнения.НаборДействий;
	
	ЗаполнитьПараметрыФормированияДокументаЭДО(ПараметрыВыполнения);
	
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Подписать"));
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Отправить"));
	
	ВыполнитьДействияПоЭДО(ПараметрыВыполнения, ЭтоПакетнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьПослеОжидания(Результат, ЭтоПакетнаяОбработка) Экспорт
	
	ПараметрыВыполнения = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	НаборДействий = ПараметрыВыполнения.НаборДействий;
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Подписать"));
	ВыполнитьДействияПоЭДО(ПараметрыВыполнения, ЭтоПакетнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьПодписаниеПослеУказанияПричины(ПричинаОтклонения, ЭтоПакетнаяОбработка) Экспорт
	
	Действие = ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.ОтклонитьПодписание");
	ВыполнитьДействияПослеУказанияПричины(ПричинаОтклонения, Действие, ЭтоПакетнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьПослеУказанияПричины(ПричинаОтклонения, ЭтоПакетнаяОбработка) Экспорт
	
	Действие = ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Отклонить");
	ВыполнитьДействияПослеУказанияПричины(ПричинаОтклонения, Действие, ЭтоПакетнаяОбработка, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьАннулированиеПослеУказанияПричины(ПричинаОтклонения, ЭтоПакетнаяОбработка) Экспорт
	
	Действие = ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.ОтклонитьАннулирование");
	ВыполнитьДействияПослеУказанияПричины(ПричинаОтклонения, Действие, ЭтоПакетнаяОбработка, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура АннулироватьПослеУказанияПричины(ПричинаАннулирования, ЭтоПакетнаяОбработка) Экспорт
	
	Действие = ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Аннулировать");
	ВыполнитьДействияПослеУказанияПричины(ПричинаОтклонения, Действие, ЭтоПакетнаяОбработка, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПослеУказанияПричины(ПричинаЗавершения, ЭтоПакетнаяОбработка) Экспорт
	
	Действие = ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.ЗакрытьПринудительно");
	ВыполнитьДействияПослеУказанияПричины(ПричинаЗавершения, Действие, ЭтоПакетнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействияПослеУказанияПричины(Причина, Действие, ЭтоПакетнаяОбработка, ПодписатьОтправить = Ложь)
	
	Если Причина = Неопределено Тогда
		ИнтерфейсДокументовЭДОКлиентСервер.РазблокироватьЗаблокированныеЭлементыФормы(
			ЭтотОбъект, ЗаблокированныеЭлементыФормы);
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	
	ДополнительныеПараметрыДействия = ИнтерфейсДокументовЭДОКлиентСервер.НовыеДополнительныеПараметрыДействия();
	ДополнительныеПараметрыДействия.Комментарий = Причина;
	ПараметрыВыполнения.ДополнительныеПараметрыДействий.Вставить(Действие, ДополнительныеПараметрыДействия);
	
	НаборДействий = ПараметрыВыполнения.НаборДействий;
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, Действие);
	
	Если ПодписатьОтправить Тогда
		ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
			"Перечисление.ДействияПоЭДО.Подписать"));
		ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
			"Перечисление.ДействияПоЭДО.ПодготовитьКОтправке"));
		ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
			"Перечисление.ДействияПоЭДО.Отправить"));
	КонецЕсли;
	
	ВыполнитьДействияПоЭДО(ПараметрыВыполнения, ЭтоПакетнаяОбработка);
	
КонецПроцедуры

// Параметры:
//  ПараметрыВыполненияДействийПоЭДО - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  ПакетнаяОбработка - Булево
&НаКлиенте
Процедура ВыполнитьДействияПоЭДО(ПараметрыВыполненияДействийПоЭДО, ПакетнаяОбработка = Ложь)
	
	ЭтоНовыйДокумент = Не ЗначениеЗаполнено(Объект.Ссылка);
	
	Записан = Истина;
	Если ЭтоНовыйДокумент
		ИЛИ Модифицированность Тогда
		Записан = Записать();
	КонецЕсли;
	
	Если Не Записан Тогда
		ПоказатьПредупреждение(Новый ОписаниеОповещения,
			НСтр("ru = 'Не удалось записать электронный документ.'"));
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект);
	
	Если ПакетнаяОбработка И ЗначениеЗаполнено(ИдентификаторПакета) Тогда
		ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ПакетыДокументов.Добавить(ИдентификаторПакета);
	Иначе
		ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ЭлектронныеДокументы.Добавить(Объект.Ссылка);
	КонецЕсли;
	
	ИнтерфейсДокументовЭДОКлиент.НачатьВыполнениеДействийПоЭДО(Оповещение, ПараметрыВыполненияДействийПоЭДО);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыполненияДействийПоЭДО(Результат, Контекст) Экспорт
	
	ИнтерфейсДокументовЭДОКлиентСервер.РазблокироватьЗаблокированныеЭлементыФормы(
		ЭтотОбъект, ЗаблокированныеЭлементыФормы);
	
	ИнтерфейсДокументовЭДОКлиент.ПослеВыполненияДействийПоЭДО(Результат, Контекст);
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеСостоянияЭДО

&НаСервере
Процедура ОбновитьСостояниеЭДО()
	
	ЗаполнитьСостояниеДокументаИзКэша();
	
	НастроитьОформлениеФормы();
	
	ОтложенноеЗаполнениеПодписей = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеДанныхИзСервиса

&НаСервере
Процедура ОбновитьДанныеИзСервиса()
	
	ЗаполнитьДанныеДокумента(Ложь);
	
	НастроитьОформлениеФормы();
	
КонецПроцедуры

#КонецОбласти

#Область ОтложенноеЗаполнениеПодписей

&НаКлиенте
Процедура ОбновитьАктивнуюСтраницуПодписей()
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПодписи Тогда
		ЗаполнитьПодписиОтложенно();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПодписиОтложенно()
	
	Если Не ОтложенноеЗаполнениеПодписей Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.СтраницыПодписи.ТекущаяСтраница = Элементы.СтраницаПодписиОжидание;
	
	ПодключитьОбработчикОжидания("ЗаполнитьПодписиОтложенноПослеОжидания", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПодписиОтложенноПослеОжидания()
	
	ДлительнаяОперация = ПолучитьПодписиИзСервисаВФоне(Объект.Ссылка, УникальныйИдентификатор);
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьПодписиПослеДлительнойОперации", ЭтотОбъект);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.Вставить("ВыводитьОкноОжидания", Ложь);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ИдентификаторФормы - УникальныйИдентификатор
// 
// Возвращаемое значение:
//  См. ДлительныеОперации.ВыполнитьФункцию
&НаСервереБезКонтекста
Функция ПолучитьПодписиИзСервисаВФоне(Знач ЭлектронныйДокумент, Знач ИдентификаторФормы)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	
	// См. ИнтеграцияОблачногоЭДО.ОписанияУстановленныхПодписейДокументаЭДО
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
		"ИнтеграцияОблачногоЭДО.ОписанияУстановленныхПодписейДокументаЭДО", ЭлектронныйДокумент);
	
КонецФункции

// Параметры:
//  ДлительнаяОперация - См. ДлительныеОперации.ВыполнитьФункцию
//  ДополнительныеПараметры - Неопределено
&НаКлиенте
Процедура ЗаполнитьПодписиПослеДлительнойОперации(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Элементы.СтраницыПодписи.ТекущаяСтраница = Элементы.СтраницаПодписиСодержание;
	
	Если ДлительнаяОперация = Неопределено Тогда
		
		Возврат;
		
	ИначеЕсли ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		ЗаполнитьПодписиИзСервиса(ДлительнаяОперация.АдресРезультата);
		
	ИначеЕсли ДлительнаяОперация.Статус = "Ошибка" Тогда
		
		КонтекстДиагностики = ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики();
		
		Ошибка = ОбработкаНеисправностейБЭДКлиент.НоваяОшибка(НСтр("ru = 'Заполнение установленных подписей.'"),
			ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка(),
			ДлительнаяОперация.ПодробноеПредставлениеОшибки, ДлительнаяОперация.КраткоеПредставлениеОшибки);
		ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
		ОбработкаНеисправностейБЭДКлиент.ДобавитьОшибку(КонтекстДиагностики, Ошибка,ПодсистемыБЭД.ИнтеграцияОблачногоЭДО);
		
		ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(КонтекстДиагностики);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодписиИзСервиса(Знач АдресРезультата)
	
	ОписанияУстановленныхПодписей = ПолучитьИзВременногоХранилища(АдресРезультата); // См. ИнтеграцияОблачногоЭДО.ОписанияУстановленныхПодписейДокументаЭДО
	УдалитьИзВременногоХранилища(АдресРезультата);
	
	ЗаполнитьПодписи(ОписанияУстановленныхПодписей);
	
	ОтложенноеЗаполнениеПодписей = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиОтображения

&НаСервере
Процедура СохранитьНастройкиОтображения()
	
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(ИмяФормы, 
		"ОтключитьВыводДопДанных", ОтключитьВыводДопДанных);
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(ИмяФормы, 
		"ОтключитьВыводКопияВерна", ОтключитьВыводКопияВерна);
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(ИмяФормы, 
		"ВыводитьБанковскиеРеквизиты", ВыводитьБанковскиеРеквизиты);
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(ИмяФормы, 
		"ОтключитьТранслитерацию", ОтключитьТранслитерацию);
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаПодписей

&НаСервере
Процедура ПроверитьПодписиДокументаВСервисе()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	
	// См. ИнтеграцияОблачногоЭДО.ДанныеДляПросмотраДокументаЭДО
	ОперацияПолученияДанныхИзСервиса = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
		"ИнтеграцияОблачногоЭДО.ПроверитьИПолучитьПодписиДокумента", Объект.Ссылка);
	
	ЗаполнитьПодписиДокументаПослеПроверки();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодписиДокументаПослеПроверки()
	
	ОписанияУстановленныхПодписей = РезультатПолученияДанныхИзСервиса();
	
	Если Не ЗначениеЗаполнено(ОписанияУстановленныхПодписей) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПодписи(ОписанияУстановленныхПодписей);
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьПроверкуПодписейДокумента()
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьПодписиДокументаПослеОжидания", ЭтотОбъект);
	ОжидатьПолученияДанныхИзСервиса(Оповещение, Истина);
КонецПроцедуры

// Параметры:
//  Результат - см. НовыйРезультатОжиданияПолученияДанныхИзСервиса
//  Контекст - Неопределено
&НаКлиенте
Процедура ЗаполнитьПодписиДокументаПослеОжидания(Результат, Контекст) Экспорт
	
	Если Результат.Успех Тогда
		ЗаполнитьПодписиДокументаПослеПроверки();
	Иначе
		ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(Результат.КонтекстДиагностики);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти // СлужебныеПроцедурыИФункции
