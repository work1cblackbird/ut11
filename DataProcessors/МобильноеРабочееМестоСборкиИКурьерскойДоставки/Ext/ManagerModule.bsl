#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

Процедура ТаблицаТовары(Заказ, АдресРезультата) Экспорт
	
	ГруппировкаТоваров = СкладыСервер.ГруппировкаТоваров(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Заказ, "Склад"));
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Товары.Номенклатура.Артикул КАК Артикул,
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.Серия КАК Серия,
		|	Товары.Количество КАК Количество,
		|	Товары.Цена КАК Цена,
		|	Товары.Номенклатура." + ГруппировкаТоваров + " КАК Группа,
		|	Товары.Номенклатура.ФайлКартинки КАК ФайлКартинки,
		|	Товары.Номенклатура.СрокГодности КАК СрокГодности,
		|	Товары.Номенклатура.ЕдиницаИзмеренияСрокаГодности КАК ЕдиницаИзмеренияСрокаГодности,
		|	Товары.ВидЦены КАК ВидЦены,
		|	1 КАК КоличествоСтрок,
		|	Товары.Упаковка КАК Упаковка,
		|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ЕдиницаИзмерения,
		|	Товары.КоличествоУпаковок * &ТекстЗапросаВесУпаковки КАК Вес,
		|	&ТекстЗапросаВесУпаковки КАК ВесУпаковки,
		|	ВЫБОР
		|		КОГДА Товары.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоВесовойТовар
		|ПОМЕСТИТЬ ВТТоварыЗаказа
		|ИЗ
		|	Документ.ЗаказКлиента.Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
		|		ПО Товары.Упаковка = УпаковкиЕдиницыИзмерения.Ссылка
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТТоварыЗаказа.Группа КАК Группа,
		|	ВТТоварыЗаказа.Номенклатура КАК Номенклатура,
		|	ВТТоварыЗаказа.Характеристика КАК Характеристика,
		|	ВТТоварыЗаказа.Серия КАК Серия,
		|	ВТТоварыЗаказа.Количество КАК Количество,
		|	ВТТоварыЗаказа.Цена КАК Цена,
		|	ВТТоварыЗаказа.ФайлКартинки КАК ФайлКартинки,
		|	ВТТоварыЗаказа.ЕдиницаИзмеренияСрокаГодности КАК ЕдиницаИзмеренияСрокаГодности,
		|	ВТТоварыЗаказа.СрокГодности КАК СрокГодности,
		|	ВТТоварыЗаказа.КоличествоСтрок КАК КоличествоСтрок,
		|	МАКСИМУМ(ШтрихкодыНоменклатуры.Штрихкод) КАК Штрихкод,
		|	ВТТоварыЗаказа.ВидЦены КАК ВидЦены,
		|	ВТТоварыЗаказа.Артикул КАК Артикул,
		|	ВЫБОР
		|		КОГДА ВТТоварыЗаказа.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ВТТоварыЗаказа.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ВТТоварыЗаказа.Упаковка
		|	КОНЕЦ КАК Упаковка,
		|	ВЫБОР
		|		КОГДА ВТТоварыЗаказа.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ВЫБОР
		|					КОГДА ВТТоварыЗаказа.Номенклатура.ВесЗнаменатель = 0
		|						ТОГДА 0
		|					ИНАЧЕ ВТТоварыЗаказа.Номенклатура.ВесЧислитель / ВТТоварыЗаказа.Номенклатура.ВесЗнаменатель
		|				КОНЕЦ
		|		ИНАЧЕ ВТТоварыЗаказа.ВесУпаковки
		|	КОНЕЦ КАК Вес,
		|	ВЫБОР
		|		КОГДА ВТТоварыЗаказа.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ВТТоварыЗаказа.Номенклатура.ВесЕдиницаИзмерения
		|		ИНАЧЕ ВТТоварыЗаказа.Упаковка.ВесЕдиницаИзмерения
		|	КОНЕЦ КАК ВесЕдиницаИзмерения,
		|	ВТТоварыЗаказа.ЭтоВесовойТовар КАК ЭтоВесовойТовар
		|ИЗ
		|	ВТТоварыЗаказа КАК ВТТоварыЗаказа
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|		ПО ВТТоварыЗаказа.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
		|			И ВТТоварыЗаказа.Характеристика = ШтрихкодыНоменклатуры.Характеристика
		|			И ВТТоварыЗаказа.Упаковка = ШтрихкодыНоменклатуры.Упаковка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТТоварыЗаказа.Номенклатура,
		|	ВТТоварыЗаказа.ЕдиницаИзмеренияСрокаГодности,
		|	ВТТоварыЗаказа.Цена,
		|	ВТТоварыЗаказа.Серия,
		|	ВТТоварыЗаказа.Характеристика,
		|	ВТТоварыЗаказа.ФайлКартинки,
		|	ВТТоварыЗаказа.Группа,
		|	ВТТоварыЗаказа.Количество,
		|	ВТТоварыЗаказа.СрокГодности,
		|	ВТТоварыЗаказа.КоличествоСтрок,
		|	ВТТоварыЗаказа.ВидЦены,
		|	ВТТоварыЗаказа.Артикул,
		|	ВТТоварыЗаказа.ЭтоВесовойТовар,
		|	ВЫБОР
		|		КОГДА ВТТоварыЗаказа.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ВТТоварыЗаказа.Номенклатура.ВесЕдиницаИзмерения
		|		ИНАЧЕ ВТТоварыЗаказа.Упаковка.ВесЕдиницаИзмерения
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ВТТоварыЗаказа.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ВТТоварыЗаказа.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ВТТоварыЗаказа.Упаковка
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ВТТоварыЗаказа.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ВЫБОР
		|					КОГДА ВТТоварыЗаказа.Номенклатура.ВесЗнаменатель = 0
		|						ТОГДА 0
		|					ИНАЧЕ ВТТоварыЗаказа.Номенклатура.ВесЧислитель / ВТТоварыЗаказа.Номенклатура.ВесЗнаменатель
		|				КОНЕЦ
		|		ИНАЧЕ ВТТоварыЗаказа.ВесУпаковки
		|	КОНЕЦ";
	
	Запрос.УстановитьПараметр("Ссылка", Заказ);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
		"&ТекстЗапросаВесУпаковки", 
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(
			"УпаковкиЕдиницыИзмерения", 
			"СправочникНоменклатура"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
		
	Запрос.Текст = ТекстЗапроса;
	
	ПоместитьВоВременноеХранилище(Запрос.Выполнить().Выгрузить(), АдресРезультата);
	
КонецПроцедуры

// Возвращает таблицу товаров по переданному ШК.
//
//	Параметры:
//		Штрихкод - Строка
//		ВидЦены - СправочникСсылка.ВидыЦен
//
//	Возвращаемое значение:
//		ТаблицаЗначений
//
Функция НайтиТоварПоШК(Штрихкод, ВидЦены) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
		|	ШтрихкодыНоменклатуры.Номенклатура.Артикул КАК Артикул,
		|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
		|	ВЫБОР
		|		КОГДА ШтрихкодыНоменклатуры.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ШтрихкодыНоменклатуры.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ШтрихкодыНоменклатуры.Упаковка
		|	КОНЕЦ КАК Упаковка,
		|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
		|	0 КАК ИД,
		|	ШтрихкодыНоменклатуры.Номенклатура.ФайлКартинки КАК ФайлКартинки,
		|	ШтрихкодыНоменклатуры.Номенклатура.Родитель КАК Группа,
		|	1 КАК КоличествоСтрок,
		|	ШтрихкодыНоменклатуры.Номенклатура.ВесЕдиницаИзмерения КАК ВесЕдиницаИзмерения,
		|	&ВидЦены КАК ВидЦены,
		|	&Штрихкод КАК Штрихкод
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
		|		ПО ШтрихкодыНоменклатуры.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|			И ШтрихкодыНоменклатуры.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
		|			И ШтрихкодыНоменклатуры.Упаковка = ЦеныНоменклатурыСрезПоследних.Упаковка
		|ГДЕ
		|	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод";
	
	Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
	Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
	
	Товары = Запрос.Выполнить().Выгрузить();
	
	Сч = 1;
	Для Каждого Строка Из Товары Цикл
		
		Строка.ИД = Сч;
		Сч = Сч + 1;
		
	КонецЦикла;
	
	
	Возврат Товары;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
КонецПроцедуры

// Возвращает представление даты и периода времери доставки.
//
//	Параметры:
//		Параметры - Структура,СтрокаТаблицыЗначений -  - где:
//			* ДатаДоставки - Дата -
//			* ВремяДоставкиС - Дата -
//			* ВремяДоставкиПо - Дата -
//
//	Возвращаемое значение:
//		Строка - представление даты и периода времери доставки.
//
Функция ДатаВремяДоставкиПредставление(Параметры) Экспорт
	
	// Пример: 21.05 09:00-12:00
	
	ТекущаяДата = НачалоДня(ТекущаяДатаСеанса());
	ДатаДоставки = НачалоДня(Параметры.ДатаДоставки);
	
	Текст = "";
	Если ЗначениеЗаполнено(ДатаДоставки)
		И ТекущаяДата <> ДатаДоставки Тогда 
		Текст = Текст + Формат(ДатаДоставки,"ДФ=dd.MM") + " ";
	КонецЕсли;

	Текст = Текст + Формат(Параметры.ВремяДоставкиС,"ДФ=HH:mm") + " ";
	Текст = Текст + "- ";
	Текст = Текст + Формат(Параметры.ВремяДоставкиПо,"ДФ=HH:mm") + " ";
	
	Возврат Текст;
	
КонецФункции

// Возвращает представление остатка времени до желаемого времени доставки.
//
//	Параметры:
//		Параметры - Структура,СтрокаТаблицыЗначений -  - где:
//			* ДатаДоставки - Дата -
//			* ВремяДоставкиС - Дата -
//			* ВремяДоставкиПо - Дата -
//			* Опоздание - Булево - устанавливается в истину, если время на доставку вышло.
//
//	Возвращаемое значение:
//		Строка - представление остатка времени до желаемого времени доставки.
//
Функция ОсталосьВремениНаДоставку(Параметры) Экспорт
	
	// Пример: ост. 5 ч 40 мин
	
	ТекущаяДата = ТекущаяДатаСеанса();
	ДатаДоставки = НачалоДня(Параметры.ДатаДоставки) + Час(Параметры.ВремяДоставкиПо)*60*60 + Минута(Параметры.ВремяДоставкиПо)*60;
	
	РазницаВремени = ДатаДоставки - ТекущаяДата;
	Параметры.Опоздание = (РазницаВремени < 0);
	
	РазницаВремени = ?(Параметры.Опоздание, -РазницаВремени, РазницаВремени);
	
	КоличествоДней = Цел(РазницаВремени/86400);
	
	Если КоличествоДней <> 0 Тогда
		РазницаВремени = РазницаВремени%86400;
	КонецЕсли;
	
	КоличествоЧасов = Цел(РазницаВремени/3600);
	
	Если КоличествоЧасов <> 0 Тогда
		РазницаВремени = РазницаВремени%3600;
	КонецЕсли;
	
	КоличествоМинут = Цел(РазницаВремени/60);
	
	Текст = ?(Параметры.Опоздание, "опазд. ", "ост.");
	Текст = Текст + ?(КоличествоДней > 0, " " + КоличествоДней + " д", "");
	Текст = Текст + ?(КоличествоЧасов > 0, " " + КоличествоЧасов + " ч", "");
	Текст = Текст + ?(КоличествоМинут > 0, " " + КоличествоМинут + " мин", "");
	
	Возврат Текст;
	
КонецФункции

// Возвращает представление суммы распоряжения с символом или символьным кодом валюты.
//
//	Параметры:
//		Параметры - Структура,СтрокаТаблицыЗначений -  - где:
//			* Валюта - СправочникСсылка.Валюты
//			* СуммаДокумента - Число
//
//	Возвращаемое значение:
//		Строка - представление суммы распоряжения с символом или символьным кодом валюты.
//
Функция СуммаПредставление(Параметры) Экспорт
	
	Возврат СуммаПредставлениеОбщая(Параметры.СуммаДокумента, Параметры.Валюта);
	
КонецФункции

// Возвращает представление суммы распоряжения с символом или символьным кодом валюты.
//
//	Параметры:
//		Параметры - Структура,СтрокаТаблицыЗначений -  - где:
//			* Валюта - СправочникСсылка.Валюты
//			* СуммаДокумента - Число
//
//	Возвращаемое значение:
//		Строка - представление суммы распоряжения с символом или символьным кодом валюты.
//
Функция СуммаКОплатеПредставление(Параметры) Экспорт
	
	Возврат СуммаПредставлениеОбщая(Параметры.СуммаКОплате, Параметры.Валюта);
	
КонецФункции

// Возвращает представление суммы распоряжения с символом или символьным кодом валюты.
//
//	Параметры:
//		Параметры - Структура,СтрокаТаблицыЗначений - где:
//			* Валюта - СправочникСсылка.Валюты
//			* СуммаДокумента - Число -
//
//	Возвращаемое значение:
//		Строка - представление суммы распоряжения с символом или символьным кодом валюты.
//
Функция СдачаПредставление(Параметры) Экспорт
	
	Возврат СуммаПредставлениеОбщая(Параметры.Сдача, Параметры.Валюта);
	
КонецФункции

Функция СуммаПредставлениеОбщая(Сумма, Валюта) Экспорт
	
	Текст = Формат(Сумма,"ЧДЦ=2; ЧН=; ЧГ=0");
	Текст = Текст + " " + ВалютаПредставление(Валюта);
	
	Возврат СокрЛП(Текст);
	
КонецФункции

Функция ВесПредставление(Вес) Экспорт
	
	// Вес должен быть в килограммах
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	УпаковкиЕдиницыИзмерения.Наименование КАК Наименование,
	               |	УпаковкиЕдиницыИзмерения.Числитель КАК Числитель,
	               |	УпаковкиЕдиницыИзмерения.Знаменатель КАК Знаменатель,
	               |	УпаковкиЕдиницыИзмерения.Код КАК Код,
	               |	УпаковкиЕдиницыИзмерения.Числитель / УпаковкиЕдиницыИзмерения.Знаменатель КАК Кратность
	               |ИЗ
	               |	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	               |ГДЕ
	               |	УпаковкиЕдиницыИзмерения.Код В (""163 "", ""166 "", ""168 "")
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Кратность УБЫВ";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Текст = "";
	ВесОстаток = Вес;
	Для Каждого ТекЕдиницаИзмерения Из Результат Цикл
		
		ВесВЕдиницеИзмерения = Цел(ВесОстаток/ТекЕдиницаИзмерения.Кратность);
		ВесОстаток = ВесОстаток%ТекЕдиницаИзмерения.Кратность;
		
		Если ВесВЕдиницеИзмерения <> 0 Тогда
			Текст = " " + ВесВЕдиницеИзмерения + " " + ТекЕдиницаИзмерения.Наименование;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВесОстаток <> 0 Тогда
		Текст = Текст + "," + Формат(ВесОстаток,"ЧГ=0");
	КонецЕсли;
	
	Возврат СокрЛП(Текст);
	
КонецФункции

Функция ФормаОплатыПредставление(Параметры) Экспорт
	
	// Пример: наличными
	
	Текст = "";
	
	Если Параметры.СуммаКОплате > 0 Тогда
		Если Параметры.ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
			Текст = НСтр("ru='наличными'");
		ИначеЕсли Параметры.ФормаОплаты = Перечисления.ФормыОплаты.Безналичная Тогда
			Текст = НСтр("ru='банковским переводом'");
		ИначеЕсли Параметры.ФормаОплаты = Перечисления.ФормыОплаты.ПлатежнаяКарта Тогда
			Текст = НСтр("ru='банковской картой'");
		ИначеЕсли Параметры.ФормаОплаты = Перечисления.ФормыОплаты.ПустаяСсылка() Тогда
			Текст = НСтр("ru='любая'");
		КонецЕсли;
	Иначе
		Текст = НСтр("ru='ОПЛАЧЕНО'");
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

// Возвращает представление валюты в виде наименования или символа.
//
//	Параметры:
//		Валюта - СправочникСсылка.Валюты
//
//	Возвращаемое значение:
//		Строка - представление валюты в виде наименования или символа.
//
Функция ВалютаПредставление(Валюта) Экспорт
	
	Текст = "";
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		
		РеквизитыВалюты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Валюта, "Код, Наименование");
		
		Если РеквизитыВалюты.Код = "643" Тогда
			Текст = "₽";
		ИначеЕсли РеквизитыВалюты.Код = "840" Тогда
			Текст = "$";
		ИначеЕсли РеквизитыВалюты.Код = "978" Тогда
			Текст = "€";
		Иначе
			Текст = РеквизитыВалюты.Наименование;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

// Возвращает представление валюты в виде наименования или символа.
//
//	Параметры:
//		Распоряжение - ДокументСсылка
//
//	Возвращаемое значение:
//		Строка - номер телефона.
//
Функция НомерТелефонаКонтактногоЛицаИзДокумента(Распоряжение) Экспорт
	
	НомерТелефона = "";
	
	КонтактныеЛица = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Распоряжение, "КонтактноеЛицо, Партнер");
	
	НомерТелефона = НомерТелефонаКонтактногоЛица(КонтактныеЛица.КонтактноеЛицо);
	
	Если НомерТелефона = "" Тогда
		НомерТелефона = НомерТелефонаКонтактногоЛица(КонтактныеЛица.Партнер);
	КонецЕсли;
	
	Возврат НомерТелефона;
	
КонецФункции

Функция НомерТелефонаКонтактногоЛица(КонтактноеЛицо) Экспорт
	
	НомерТелефона = "";
	ВидыКонтактнойИнформации = Новый Массив;
	
	Если ТипЗнч(КонтактноеЛицо) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		ВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица);
		ВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица);
	ИначеЕсли ТипЗнч(КонтактноеЛицо) = Тип("СправочникСсылка.Партнеры") Тогда
		ВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонПартнера);
	ИначеЕсли ТипЗнч(КонтактноеЛицо) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица);
	ИначеЕсли ТипЗнч(КонтактноеЛицо) = Тип("СправочникСсылка.Склады") Тогда
		ВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонСклада);
	КонецЕсли;
	
	Для Каждого ВидКонтактнойИнформации Из ВидыКонтактнойИнформации Цикл
		
		КонтактнаяИнформацияТаблица = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(КонтактноеЛицо, 
																								ВидКонтактнойИнформации,
																		,
																		Ложь);
		Если КонтактнаяИнформацияТаблица.Количество() Тогда
			КонтактнаяИнформация = КонтактнаяИнформацияТаблица[0];
			НомерТелефона = КонтактнаяИнформация.Представление;
			НомерТелефона = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("()_- ", НомерТелефона, "");
			
		КонецЕсли;
		
		Если НомерТелефона <> "" Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрДлина(НомерТелефона) = 11 И Лев(НомерТелефона,1) = "7" Тогда
		НомерТелефона = "+" + НомерТелефона;
	ИначеЕсли СтрДлина(НомерТелефона) = 10 Тогда
		НомерТелефона = "+7" + НомерТелефона;
	КонецЕсли;
	
	Возврат НомерТелефона;
	
КонецФункции

Функция АдресПредставлениеВладельца(Владелец) Экспорт
	
	АдресПредставление = "";
	ВидыКонтактнойИнформации = Новый Массив;
	
	Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Склады") Тогда
		ВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.АдресСклада);
	КонецЕсли;
	
	Для Каждого ВидКонтактнойИнформации Из ВидыКонтактнойИнформации Цикл
		
		КонтактнаяИнформацияТаблица = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Владелец, 
																								ВидКонтактнойИнформации,
																		,
																		Ложь);
		Если КонтактнаяИнформацияТаблица.Количество() Тогда
			КонтактнаяИнформация = КонтактнаяИнформацияТаблица[0];
			АдресПредставление = КонтактнаяИнформация.Представление;
			
		КонецЕсли;
		
		Если АдресПредставление <> "" Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат АдресПредставление;
	
КонецФункции

Процедура ПереопределитьТекущуюКомандуПоПроцессу(Форма) Экспорт
	
	ЗаказОплачен = (Форма.СуммаКОплате <=0);
	НастройкиСборкиИДоставки = СкладыСервер.НастройкиСкладаДляСборкиИДоставки(Форма.Склад);
	
	ТекстЗаголовка = НСтр("ru='Завершить доставку'");
	ТекущееДействие = "ЗавершитьДоставку";
	
	Если НастройкиСборкиИДоставки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяОформитьЧек = (НастройкиСборкиИДоставки.СпособФискализацииПриДоставке
		= Перечисления.СпособыФискализацииПриДоставке.ВМоментДоставки);
		
	ИмяФормы = Форма.ИмяФормы;
	
	Если ЗаказОплачен Тогда
		
		Если ТребуетсяОформитьЧек Тогда
			Если НастройкиСборкиИДоставки.КурьерыИспользуютАвтономныеККТ Тогда
				ТекстЗаголовка = НСтр("ru='Чек выдан'");
				ТекущееДействие = "ЗавершитьДоставку";
			ИначеЕсли ДоступноУдаленноеПробитиеЧека() Тогда
				ТекстЗаголовка = НСтр("ru='Оформить чек'");
				ТекущееДействие = "ОформитьЧек";
			Иначе
				ТекстЗаголовка = НСтр("ru='Завершить доставку'");
				ТекущееДействие = "ЗавершитьДоставку";
			КонецЕсли;
		Иначе
			ТекстЗаголовка = НСтр("ru='Чек выдан'");
			ТекущееДействие = "ЗавершитьДоставку";
		КонецЕсли;
		
	Иначе
		
		Если СтрНайти(ИмяФормы, "КарточкаРаспоряжения") Тогда
			ТекстЗаголовка = НСтр("ru='Принять оплату'");
			ТекущееДействие = "ПринятьОплату";
		Иначе
			Если ТребуетсяОформитьЧек Тогда
				Если НастройкиСборкиИДоставки.КурьерыИспользуютАвтономныеККТ Тогда
					ТекстЗаголовка = НСтр("ru='Оплата получена, чек выдан'");
					ТекущееДействие = "ПринятьОплату";
				ИначеЕсли ДоступноУдаленноеПробитиеЧека() Тогда
					ТекстЗаголовка = НСтр("ru='Оплата получена, оформить чек'");
					ТекущееДействие = "ПринятьОплатуИОформитьЧек";
				Иначе
					ТекстЗаголовка = НСтр("ru='Оплата получена, завершить доставку'");
					ТекущееДействие = "ПринятьОплату";
				КонецЕсли;
			Иначе
				ТекстЗаголовка = НСтр("ru='Оплата получена, чек выдан'");
				ТекущееДействие = "ПринятьОплату";
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	КнопкаКоманды = Элементы.ВыполнитьКомандуПоПроцессу;//КнопкаФормы
	КнопкаКоманды.Заголовок = ТекстЗаголовка;
	Форма.ТекущееДействие = ТекущееДействие;
	
КонецПроцедуры

Функция ДоступноУдаленноеПробитиеЧека()
	
	Возврат РозничныеПродажиВызовСервера.УдаленнаяФискализацияДоступна();
	
КонецФункции

Функция ДоступныеСпособыОплатыЗаказа(ПараметрыРаспоряжения) Экспорт
	
	СпособыОплаты = Новый СписокЗначений();
	НастройкиСборкиИДоставки = СкладыСервер.НастройкиСкладаДляСборкиИДоставки(ПараметрыРаспоряжения.Склад);
	
	Касса = КассаОрганизацииКурьераДляПКО(ПараметрыРаспоряжения);
	Если Касса <> Справочники.Кассы.ПустаяСсылка() Тогда
		СпособыОплаты.Добавить("Наличные");
	КонецЕсли;
	
	Если Касса = Справочники.Кассы.ПустаяСсылка()
		ИЛИ Не ЕстьПКОВКассуКурьера(ПараметрыРаспоряжения.Распоряжение) Тогда
	
		ДанныеЭквайринговогоТерминала = ДанныеЭквайринговогоТерминалаОрганизацииКурьера(ПараметрыРаспоряжения);
		Если ДанныеЭквайринговогоТерминала <> Неопределено
			И НастройкиСборкиИДоставки.КурьерыИспользуютЭквайринговыеТерминалы Тогда
			СпособыОплаты.Добавить("ПлатежнойКартой");
		КонецЕсли;
		
		//++ Локализация
		Если ДоступнаЯндексКасса(ПараметрыРаспоряжения.Распоряжение) Тогда
			СпособыОплаты.Добавить("ЯндексКасса");
		КонецЕсли;
		//-- Локализация
		
	КонецЕсли;
	
	Возврат СпособыОплаты;
	
КонецФункции

Функция ЕстьПКОВКассуКурьера(Распоряжение)
	
	ПараметрыРаспоряжения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Распоряжение, "Курьер, Организация");
	Касса = КассаОрганизацииКурьера(ПараметрыРаспоряжения);
	Результат = Ложь;
	
	Если Касса = Справочники.Кассы.ПустаяСсылка() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(ВЫБОР
	               |			КОГДА ДенежныеСредстваНаличные.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |				ТОГДА ДенежныеСредстваНаличные.Сумма
	               |			ИНАЧЕ -ДенежныеСредстваНаличные.Сумма
	               |		КОНЕЦ) КАК СуммаОплачено
	               |ИЗ
	               |	РегистрНакопления.ДенежныеСредстваНаличные КАК ДенежныеСредстваНаличные
	               |ГДЕ
	               |	ДенежныеСредстваНаличные.ОбъектРасчетов.Объект = &Распоряжение
	               |	И ДенежныеСредстваНаличные.Касса = &Касса";
	
	Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
	Запрос.УстановитьПараметр("Касса", Касса);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() 
		И Выборка.СуммаОплачено <> NULL Тогда
		Результат = Выборка.СуммаОплачено > 0;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


// Назначение или снятие сотрудника 
// 
// Параметры:
// 	Распоряжение - ОпределяемыйТип.РаспоряжениеНаСборкуИДоставкуКурьером
// 	ТипСотрудника - Строка
// 	Сотрудник - Неопределено - Описание
// 	ВыполнитьБезПроверкиТекущегоСотрудника - Булево - Описание
// 	Ошибка - Булево - Истина, если возникла ошибка 
Процедура НазначитьСнятьСотрудника(Распоряжение,
									ТипСотрудника,
									Сотрудник=Неопределено,
									ВыполнитьБезПроверкиТекущегоСотрудника = Ложь, // Для диспетчера
									Ошибка = Ложь) Экспорт
	
	Назначить = ЗначениеЗаполнено(Сотрудник);
	СотрудникСеанса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователи.ТекущийПользователь(), "ФизическоеЛицо");
	
	Если Не ЗначениеЗаполнено(Распоряжение) Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмяОбъекта = "Документ." + Распоряжение.Метаданные().Имя;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Распоряжение);
		Блокировка.Заблокировать();
		
		ТекущийСотрудник = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Распоряжение, ТипСотрудника);
		
		Если Назначить Тогда
			Если ЗначениеЗаполнено(ТекущийСотрудник) Тогда
				Если ТекущийСотрудник = Сотрудник Тогда
					Возврат;
				ИначеЕсли (Не ВыполнитьБезПроверкиТекущегоСотрудника) Тогда
					ТекстОшибки = НСтр("ru='Не удалось назначить сотрудника.'");
					ТекстОшибки = ТекстОшибки + Символы.ПС + СтрШаблон(НСтр("ru='Заказ назначен на %1.'"), ТекущийСотрудник);
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
					Ошибка = Истина;
					Возврат;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(ТекущийСотрудник) Тогда
			Если ТекущийСотрудник <> СотрудникСеанса 
				И (Не ВыполнитьБезПроверкиТекущегоСотрудника) Тогда
				ТекстОшибки = НСтр("ru='Не удалось снять сотрудника.'");
				ТекстОшибки = ТекстОшибки + Символы.ПС + СтрШаблон(НСтр("ru='Заказ назначен на %1.'"), ТекущийСотрудник);
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
				Ошибка = Истина;
				Возврат;
			КонецЕсли;
		Иначе 
			Возврат;
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		РаспоряжениеОбъект = Распоряжение.ПолучитьОбъект();
		РаспоряжениеОбъект[ТипСотрудника] = Сотрудник;
		РаспоряжениеОбъект.Записать(РежимЗаписиДокумента.Запись);
		УстановитьПривилегированныйРежим(Ложь);
		
		Если ТипСотрудника = "сборщик" и НЕ Назначить Тогда
			РегистрыСведений.СтатусыСборкиИДоставки.ЗаписатьСтатус(Распоряжение, Перечисления.СтатусыСборкиИДоставки.КСборке);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ТекстОшибки = ТекстОшибки + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		
		ОтменитьТранзакцию();
		
		Ошибка = Истина;
		
		Если Назначить Тогда
			ТекстОшибки = НСтр("ru='Не удалось назначить сотрудника.'");
		Иначе
			ТекстОшибки = НСтр("ru='Не удалось снять сотрудника.'");
		КонецЕсли;
		
		ТекстОшибки = ТекстОшибки + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура УстановитьСтатусРаспоряженияДоставляется(Распоряжение) Экспорт
	
	СотрудникСеанса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователи.ТекущийПользователь(), "ФизическоеЛицо");
	ТекущийКурьер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Распоряжение, "Курьер");
	
	Если СотрудникСеанса <> ТекущийКурьер Тогда
		
		ТекстОшибки = НСтр("ru='Нельзя начать доставку.'");
		ТекстОшибки = ТекстОшибки + Символы.ПС + СтрШаблон(НСтр("ru='Заказ назначен на: %1.'"), ТекущийКурьер);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ЗаписьРегистра = РегистрыСведений.СтатусыСборкиИДоставки.СоздатьМенеджерЗаписи();
	ЗаписьРегистра.Распоряжение = Распоряжение;
	ЗаписьРегистра.Прочитать();
	
	Если ЗаписьРегистра.Выбран() Тогда
		
		Если ЗаписьРегистра.Статус = Перечисления.СтатусыСборкиИДоставки.ГотовКДоставке Тогда
		
			ЗаписьРегистра.Статус = Перечисления.СтатусыСборкиИДоставки.Доставляется;
			
			Попытка
				ЗаписьРегистра.Записать(Истина);
			Исключение
				ТекстОшибки = НСтр("ru='Не удалось начать доставку.'");
				ТекстОшибки = ТекстОшибки + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			КонецПопытки;
		Иначе
			ТекстОшибки = НСтр("ru='Нельзя начать доставку.'");
			ТекстОшибки = ТекстОшибки + Символы.ПС + СтрШаблон(НСтр("ru='Статус заказа: %1.'"), ЗаписьРегистра.Статус);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
	Иначе
		ТекстОшибки = НСтр("ru='Не удалось начать доставку.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСтатусРаспоряженияДоставлен(Распоряжение) Экспорт
	
	СотрудникСеанса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователи.ТекущийПользователь(), "ФизическоеЛицо");
	ТекущийКурьер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Распоряжение, "Курьер");
	
	Если СотрудникСеанса <> ТекущийКурьер Тогда
		ТекстОшибки = НСтр("ru='Нельзя завершить доставку.'");
		ТекстОшибки = ТекстОшибки + Символы.ПС + СтрШаблон(НСтр("ru='Заказ назначен на: %1.'"), ТекущийКурьер);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ЗаписьРегистра = РегистрыСведений.СтатусыСборкиИДоставки.СоздатьМенеджерЗаписи();
	ЗаписьРегистра.Распоряжение = Распоряжение;
	ЗаписьРегистра.Прочитать();
	
	Если ЗаписьРегистра.Выбран() Тогда
		
		Если ЗаписьРегистра.Статус = Перечисления.СтатусыСборкиИДоставки.Доставляется Тогда
		
			ЗаписьРегистра.Статус = Перечисления.СтатусыСборкиИДоставки.Доставлен;
			
			Попытка
				ЗаписьРегистра.Записать(Истина);
			Исключение
				ТекстОшибки = НСтр("ru='Не удалось завершить доставку.'");
				ТекстОшибки = ТекстОшибки + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			КонецПопытки;
		Иначе
			ТекстОшибки = НСтр("ru='Нельзя завершить доставку.'");
			ТекстОшибки = ТекстОшибки + Символы.ПС + СтрШаблон(НСтр("ru='Статус заказа: %1.'"), ЗаписьРегистра.Статус);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
	Иначе
		ТекстОшибки = НСтр("ru='Не удалось завершить доставку.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСтатусРаспоряженияОтменен(Распоряжение, ПричинаОтмены, Отказ) Экспорт
	
	ЗаписьРегистра = РегистрыСведений.СтатусыСборкиИДоставки.СоздатьМенеджерЗаписи();
	ЗаписьРегистра.Распоряжение = Распоряжение;
	ЗаписьРегистра.Прочитать();
	
	ТекстОшибки = "";
	Если ЗаписьРегистра.Выбран() Тогда
		
		Если ЗаписьРегистра.Статус = Перечисления.СтатусыСборкиИДоставки.Доставляется Тогда
		
			ЗаписьРегистра.Статус = Перечисления.СтатусыСборкиИДоставки.Отменен;
			ЗаписьРегистра.ПричинаОтмены = ПричинаОтмены;
			
			Попытка
				ЗаписьРегистра.Записать(Истина);
			Исключение
				ТекстОшибки = НСтр("ru='Не удалось отменить доставку.'");
				ТекстОшибки = ТекстОшибки + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			КонецПопытки;
		Иначе
			ТекстОшибки = НСтр("ru='Нельзя отменить доставку.'");
			ТекстОшибки = ТекстОшибки + Символы.ПС + СтрШаблон(НСтр("ru='Статус заказа: %1.'"), ЗаписьРегистра.Статус);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
	Иначе
		ТекстОшибки = НСтр("ru='Не удалось отменить доставку.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
	ЕстьОшибка = ТекстОшибки <> ""; 
	
	Если ЕстьОшибка Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры


// Устанавливает статус распоряжения собирается
// 
// Параметры:
// 	Распоряжение - ОпределяемыйТип.РаспоряжениеНаСборкуИДоставкуКурьером
// Возвращаемое значение:
// 	Булево - Описание
Функция УстановитьСтатусРаспоряженияСобирается(Распоряжение) Экспорт
	
	СотрудникСеанса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователи.ТекущийПользователь(), "ФизическоеЛицо");
	ТекущийСборщик = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Распоряжение, "Сборщик");
	
	Если СотрудникСеанса <> ТекущийСборщик Тогда
		
		Склад = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Распоряжение, "Склад");
		ДатаРаспоряжения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Распоряжение, "Дата");
		НастройкиСклада = СкладыСервер.НастройкиСкладаДляСборкиИДоставки(Склад, ДатаРаспоряжения);
		
		Если НЕ НастройкиСклада.СборщикиМогутНазначатьСебеЗаказы Тогда
			
			ТекстОшибки = НСтр("ru='Нельзя начать сборку.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	ЗаписьРегистра = РегистрыСведений.СтатусыСборкиИДоставки.СоздатьМенеджерЗаписи();
	ЗаписьРегистра.Распоряжение = Распоряжение;
	ЗаписьРегистра.Прочитать();
	
	Если ЗаписьРегистра.Выбран() Тогда
		
		Если ЗаписьРегистра.Статус = Перечисления.СтатусыСборкиИДоставки.КСборке Тогда
		
			ЗаписьРегистра.Статус = Перечисления.СтатусыСборкиИДоставки.Собирается;
			
			Попытка
				ЗаписьРегистра.Записать(Истина);
				
				РаспоряжениеОбъект = Распоряжение.ПолучитьОбъект();
				РаспоряжениеОбъект.Сборщик = СотрудникСеанса;
				РаспоряжениеОбъект.Записать(РежимЗаписиДокумента.Запись);
				
			Исключение
				ТекстОшибки = НСтр("ru='Не удалось начать сборку.'");
				ТекстОшибки = ТекстОшибки + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
				Возврат Ложь;
			КонецПопытки;
		Иначе
			ТекстОшибки = НСтр("ru='Нельзя начать сборку.'");
			ТекстОшибки = ТекстОшибки + Символы.ПС + СтрШаблон(НСтр("ru='Статус заказа: %1.'"), ЗаписьРегистра.Статус);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			Возврат Ложь;
		КонецЕсли;
	Иначе
		ТекстОшибки = НСтр("ru='Не удалось начать сборку.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

// Установка статуса распоряжения 
// 
// Параметры:
// 	Распоряжение - ОпределяемыйТип.РаспоряжениеНаСборкуИДоставкуКурьером
Процедура УстановитьСтатусРаспоряженияСобран(Распоряжение, СтруктураЗаказа) Экспорт
	
	СотрудникСеанса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователи.ТекущийПользователь(), "ФизическоеЛицо");
	ТекущийСборщик = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Распоряжение, "Сборщик");
	Склад = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Распоряжение, "Склад");
	ДатаРаспоряжения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Распоряжение, "Дата");
	
	НастройкиСклада = СкладыСервер.НастройкиСкладаДляСборкиИДоставки(Склад, ДатаРаспоряжения);
	
	Если СотрудникСеанса <> ТекущийСборщик Тогда
		ТекстОшибки = НСтр("ru='Нельзя завершить сборку.'");
		ТекстОшибки = ТекстОшибки + Символы.ПС + СтрШаблон(НСтр("ru='Заказ назначен на: %1.'"), ТекущийСборщик);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	// Заполнение заказа
	
	РаспоряжениеОбъект = Распоряжение.ПолучитьОбъект();
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, РаспоряжениеОбъект);
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(РаспоряжениеОбъект);
	
	// Товара нет
	Для Каждого СтрокаТовараНет Из СтруктураЗаказа.ТовараНет Цикл
		
		КоличествоТовара = СтрокаТовараНет.Количество;
		
		Если КоличествоТовара = 0 Тогда
			Продолжить;
		КонецЕсли;
			
		Для Каждого СтрокаРаспоряжение Из РаспоряжениеОбъект.Товары Цикл
			
			Если СтрокаРаспоряжение.Номенклатура = СтрокаТовараНет.Номенклатура И СтрокаРаспоряжение.Характеристика = СтрокаТовараНет.Характеристика Тогда
				
				Если СтрокаРаспоряжение.Количество = СтрокаТовараНет.Количество Тогда
					СтрокаРаспоряжение.Отменено = Истина;
					СтрокаРаспоряжение.ПричинаОтмены = Справочники.ПричиныОтменыЗаказовКлиентов.ОтклонениеПриОтгрузкеМерныхТоваров;
				Иначе
					
					НоваяСтрока = РаспоряжениеОбъект.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРаспоряжение);
					НоваяСтрока.КодСтроки = 0;
					НоваяСтрока.Количество = СтрокаРаспоряжение.Количество - СтрокаТовараНет.Количество;
					НоваяСтрока.КоличествоУпаковок = СтрокаРаспоряжение.Количество - СтрокаТовараНет.Количество;
					
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, Неопределено);
					
					
					СтрокаРаспоряжение.Отменено = Истина;
					СтрокаРаспоряжение.ПричинаОтмены = Справочники.ПричиныОтменыЗаказовКлиентов.ОтклонениеПриОтгрузкеМерныхТоваров;
					СтрокаРаспоряжение.Количество = СтрокаТовараНет.Количество;
					СтрокаРаспоряжение.КоличествоУпаковок = СтрокаТовараНет.Количество;
					
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаРаспоряжение, СтруктураДействий, Неопределено);
				КонецЕсли;
				
				КоличествоТовара = 0;
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Собрано
	Для Каждого СтрокаСобрано Из СтруктураЗаказа.Собрано Цикл
		
		КоличествоТовара = СтрокаСобрано.Количество;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура", СтрокаСобрано.Номенклатура);
		ПараметрыОтбора.Вставить("Характеристика", СтрокаСобрано.Характеристика);
		ПараметрыОтбора.Вставить("Отменено", Ложь);
		
		ПараметрыЗаполнитьСтавкуНДС = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(РаспоряжениеОбъект);
		ПараметрыЗаполнитьСтавкуНДС.ПоДатеОтгрузки = Истина;
		
		МассивНайденных = РаспоряжениеОбъект.Товары.НайтиСтроки(ПараметрыОтбора);
		
		Если МассивНайденных.Количество() = 0 Тогда
			// Новая строка
			
			НоваяСтрока = РаспоряжениеОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСобрано);
			НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
			НоваяСтрока.Склад = РаспоряжениеОбъект.Склад;
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", НоваяСтрока.Упаковка);
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ПараметрыЗаполнитьСтавкуНДС);
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", РаспоряжениеОбъект.ВернутьМногооборотнуюТару);
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
			
			ПараметрыДокумента = Документы.ЗаказКлиента.ПараметрыДокументаДляДействийОбеспечения(РаспоряжениеОбъект);
			ПоляСтрокой = "ВариантОбеспечения";
			ОбеспечениеВДокументахКлиентСервер.ДобавитьДействияОбеспечения(СтруктураДействий, ПоляСтрокой, ПараметрыДокумента);
			ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(РаспоряжениеОбъект.Товары, СтруктураДействий, Неопределено);
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, Неопределено);
			
		Иначе 
			ИДНайденнойСтроки = 0;
			Сч = 0;
			Пока ИДНайденнойСтроки < МассивНайденных.Количество() Цикл
				
				Если Сч = 0 Тогда
					СтрокаРаспоряжения = МассивНайденных[ИДНайденнойСтроки];
					СтрокаРаспоряжения.Количество = КоличествоТовара;
					СтрокаРаспоряжения.КоличествоУпаковок = КоличествоТовара;
					
					ИДНайденнойСтроки = ИДНайденнойСтроки + 1;
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаРаспоряжения, СтруктураДействий, Неопределено);
				Иначе
					
					РаспоряжениеОбъект.Товары.Удалить(МассивНайденных[ИДНайденнойСтроки]);
					
				КонецЕсли;
				
				Сч = Сч + 1;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	РаспоряжениеОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
	ЗаписьРегистра = РегистрыСведений.СтатусыСборкиИДоставки.СоздатьМенеджерЗаписи();
	ЗаписьРегистра.Распоряжение = Распоряжение;
	ЗаписьРегистра.Прочитать();
	
	Если ЗаписьРегистра.Выбран() Тогда
		
		Если ЗаписьРегистра.Статус = Перечисления.СтатусыСборкиИДоставки.Собирается Тогда
		
			Если НастройкиСклада.ВМагазинеПоддерживаетсяДоставкаСвоимиКурьерами Тогда
				ЗаписьРегистра.Статус = Перечисления.СтатусыСборкиИДоставки.ГотовКДоставке;
			Иначе
				ЗаписьРегистра.Статус = Перечисления.СтатусыСборкиИДоставки.Собран;
			КонецЕсли;
			ЗаписьРегистра.ДатаСборки = ТекущаяДатаСеанса();
			
			Попытка
				ЗаписьРегистра.Записать(Истина);
			Исключение
				ТекстОшибки = НСтр("ru='Не удалось завершить сборку.'");
				ТекстОшибки = ТекстОшибки + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			КонецПопытки;
		Иначе
			ТекстОшибки = НСтр("ru='Нельзя завершить сборку.'");
			ТекстОшибки = ТекстОшибки + Символы.ПС + СтрШаблон(НСтр("ru='Статус заказа: %1.'"), ЗаписьРегистра.Статус);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
	Иначе
		ТекстОшибки = НСтр("ru='Не удалось завершить сборку.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

Функция ТипСотрудникаКурьер() Экспорт
	Возврат "курьер";
КонецФункции

Функция ТипСотрудникаСборщик() Экспорт
	Возврат "сборщик";
КонецФункции

Функция ТипСотрудникаДиспетчер() Экспорт
	Возврат "диспетчер";
КонецФункции

Функция ЭтоЗавершенныйСтатус(Статус) Экспорт
	
	Возврат СкладыСервер.СтатусыРаспоряженийЗавершенных().Найти(Статус) <> Неопределено;
	
КонецФункции

Процедура ОтменитьРаспоряжение(Распоряжение, ПричинаОтмены, Отказ = Ложь) Экспорт
	
	УстановитьСтатусРаспоряженияОтменен(Распоряжение, ПричинаОтмены, Отказ);
	
КонецПроцедуры

Процедура ЗавершитьДоставку(Распоряжение) Экспорт
	
	УстановитьСтатусРаспоряженияДоставлен(Распоряжение);
	
КонецПроцедуры

Функция КассаОрганизацииКурьера(ПараметрыРаспоряжения) Экспорт
	
	Касса = Справочники.Кассы.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	Кассы.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Кассы КАК Кассы
	               |ГДЕ
	               |	Кассы.ПометкаУдаления = ЛОЖЬ
	               |	И Кассы.ОперационнаяКасса = ИСТИНА
	               |	И Кассы.ФизическоеЛицо = &Курьер
	               |	И Кассы.Владелец = &Организация";
	
	Запрос.УстановитьПараметр("Курьер", ПараметрыРаспоряжения.Курьер);
	Запрос.УстановитьПараметр("Организация", ПараметрыРаспоряжения.Организация);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Касса = Выборка.Ссылка
	КонецЕсли;
	
	Возврат Касса;
	
КонецФункции

Функция КассаОрганизацииКурьераДляПКО(ПараметрыРаспоряжения) Экспорт
	
	Касса = Справочники.Кассы.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	Кассы.Ссылка КАК Касса
	               |ИЗ
	               |	Справочник.Кассы КАК Кассы
	               |ГДЕ
	               |	Кассы.ПометкаУдаления = ЛОЖЬ
	               |	И Кассы.ОперационнаяКасса = ИСТИНА
	               |	И Кассы.ФизическоеЛицо = &Курьер
	               |	И Кассы.Владелец = &Организация
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Документы.Касса КАК Касса
	               |ИЗ
	               |	Документ.ЗаказКлиента КАК Документы
	               |ГДЕ
	               |	Документы.Ссылка = &Распоряжение
	               |	И Документы.Касса.ОперационнаяКасса = ЛОЖЬ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Кассы.Ссылка КАК Касса
	               |ИЗ
	               |	Справочник.Кассы КАК Кассы
	               |ГДЕ
	               |	Кассы.ПометкаУдаления = ЛОЖЬ
	               |	И Кассы.ОперационнаяКасса = ЛОЖЬ
	               |	И Кассы.Владелец = &Организация
	               |";
	
	Запрос.УстановитьПараметр("Курьер", ПараметрыРаспоряжения.Курьер);
	Запрос.УстановитьПараметр("Распоряжение", ПараметрыРаспоряжения.Распоряжение);
	Запрос.УстановитьПараметр("Организация", ПараметрыРаспоряжения.Организация);
	
	УстановитьПривилегированныйРежим(Истина);
	Результаты = Запрос.ВыполнитьПакет();
	
	Если Не Результаты[0].Пустой() Тогда
		Касса = Результаты[0].Выгрузить()[0].Касса;
	ИначеЕсли Не Результаты[1].Пустой() Тогда
		Касса = Результаты[1].Выгрузить()[0].Касса; 
	ИначеЕсли Не Результаты[2].Пустой() Тогда
		Касса = Результаты[2].Выгрузить()[0].Касса; 
	КонецЕсли;
	
	Возврат Касса;
	
КонецФункции

Функция КоличествоПозицийПредставление(Параметры) Экспорт
	
	Текст = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
		НСтр("ru=';%1 позиция;;%1 позиции;%1 позиций;%1 позиции'"), 
		Параметры.КоличествоПозиций,, "ЧГ=0");
	
	Возврат СокрЛП(Текст);
	
КонецФункции

Функция СтатусОплатыПредставление(Параметры) Экспорт
	
	Текст = "";
	
	Если Параметры.СтатусОплаты = 0 Тогда
		Текст = НСтр("ru='Ожидается подтверждение'");
	Иначе
		Текст = НСтр("ru='Оплачено'");
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

//++ Локализация

// Возвращает признак доступности онлайн оплаты в Яндекс кассе.
//
//	Параметры:
//		Распоряжение - ОпределяемыйТип.РаспоряжениеНаСборкуИДоставкуКурьером - ссылка на документ,
//		по которому необходимо узнать возможность онлайн оплаты.
//
//	Возвращаемое значение:
//		Булево - Истина, если онлайн оплата по распоряжению доступна.
//
Функция ДоступнаЯндексКасса(Распоряжение) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОнлайнОплаты") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КлючиПоиска = Новый Структура();
	КлючиПоиска.Вставить("Организация", Распоряжение.Организация);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Справочники.НастройкиОнлайнОплат.НайтиНастройку(КлючиПоиска, Истина) 
		<> Справочники.НастройкиОнлайнОплат.ПустаяСсылка();
	
	Возврат Результат;
	
КонецФункции
//-- Локализация


//++ Локализация

// Возвращает статус оплаты по распоряжению в Яндекс кассе.
//
//	Параметры:
//		Распоряжение - ОпределяемыйТип.РаспоряжениеНаСборкуИДоставкуКурьером - ссылка на документ,
//		по которому необходимо получить статус оплаты.
//
//	Возвращаемое значение:
//		Число - признак статуса оплаты в виде числа 0 или 1.
//
Функция СтатусОплатыПоЯндексКассе(Распоряжение) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОперацияПоЯндексКассе.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.ОперацияПоЯндексКассе КАК ОперацияПоЯндексКассе
	               |ГДЕ
	               |	ОперацияПоЯндексКассе.ПометкаУдаления = ЛОЖЬ
	               |	И ОперацияПоЯндексКассе.ОснованиеПлатежа = &Распоряжение";
	
	Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	
	Возврат ?(Результат.Пустой(), 0, 1);
	
КонецФункции
//-- Локализация

Процедура СоздатьПКОВКассуКурьера(Распоряжение, СуммаКОплате, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДокументОплаты = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
	ДокументОплаты.Заполнить(ДокументОснованиеПлатежа(Распоряжение));
	ДокументОплаты.Дата = ОбщегоНазначения.ТекущаяДатаПользователя();
	
	Если ДокументОплаты.СуммаДокумента = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОплаты.СуммаДокумента = СуммаКОплате;
	
	Если Не ЗначениеЗаполнено(ДокументОплаты.Касса) Тогда
		
		ПараметрыРаспоряжения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Распоряжение, "Курьер, Организация");
		ПараметрыРаспоряжения.Вставить("Распоряжение", Распоряжение);
		
		ДокументОплаты.Касса = КассаОрганизацииКурьераДляПКО(ПараметрыРаспоряжения) 
	КонецЕсли;
	
	Попытка
		Если ДокументОплаты.ПроверитьЗаполнение() Тогда
			ДокументОплаты.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			Отказ = Истина;
		КонецЕсли;
	Исключение
		Отказ = Истина;
		ТекстОшибки = НСтр("ru = 'Проведение документа %1 завершено с ошибкой'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ДокументОплаты);
		ЗаписьЖурналаРегистрации(ТекстОшибки,
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

Процедура СоздатьЭквайринговуюОперацию(Распоряжение, СуммаКОплате, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДокументОплаты = Документы.ОперацияПоПлатежнойКарте.СоздатьДокумент();
	ДокументОплаты.Заполнить(ДокументОснованиеПлатежа(Распоряжение));
	ДокументОплаты.Дата = ОбщегоНазначения.ТекущаяДатаПользователя();
	
	Если ДокументОплаты.СуммаДокумента = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОплаты.СуммаДокумента = СуммаКОплате;
	
	ДокументОплаты.Партнер = Распоряжение.Партнер;
	ДокументОплаты.Контрагент = Распоряжение.Контрагент;
	
	ДанныеЭквайринговогоТерминала = ДанныеЭквайринговогоТерминалаОрганизацииКурьера(Распоряжение);
	
	Если ДанныеЭквайринговогоТерминала <> Неопределено Тогда
		ДокументОплаты.ДоговорЭквайринга = ДанныеЭквайринговогоТерминала.Договор;
		ДокументОплаты.ЭквайринговыйТерминал = ДанныеЭквайринговогоТерминала.Терминал;
	КонецЕсли;
	
	Попытка
		Если ДокументОплаты.ПроверитьЗаполнение() Тогда
			ДокументОплаты.Записать(РежимЗаписиДокумента.Проведение)
		КонецЕсли;
	Исключение
		ТекстОшибки = НСтр("ru = 'Проведение документа %1 завершено с ошибкой'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ДокументОплаты);
		ЗаписьЖурналаРегистрации(ТекстОшибки,
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

Процедура ОформитьЧек(Распоряжение, Отказ) Экспорт
	
	Отказ = Не РозничныеПродажи.ДобавитьДокументыПоРаспоряжениюВОчередьЧековККТ(Распоряжение);
	
КонецПроцедуры

Функция ДанныеЭквайринговогоТерминалаОрганизацииКурьера(ПараметрыРаспоряжения) Экспорт
	
	ДанныеЭквайринговогоТерминала = Неопределено;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ЭквайринговыеТерминалы.Ссылка КАК Терминал,
	               |	ЭквайринговыеТерминалы.Владелец КАК Договор,
	               |	ЭквайринговыеТерминалы.Владелец.Контрагент КАК Эквайер
	               |ИЗ
	               |	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	               |ГДЕ
	               |	ЭквайринговыеТерминалы.ПометкаУдаления = ЛОЖЬ
	               |	И ЭквайринговыеТерминалы.ФизическоеЛицо = &Курьер
	               |	И ЭквайринговыеТерминалы.Владелец.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Курьер", ПараметрыРаспоряжения.Курьер);
	Запрос.УстановитьПараметр("Организация", ПараметрыРаспоряжения.Организация);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не Результат.Пустой() Тогда
		Данные = Результат.Выгрузить()[0];
		ДанныеЭквайринговогоТерминала = Новый Структура;
		ДанныеЭквайринговогоТерминала.Вставить("Терминал", Данные.Терминал);
		ДанныеЭквайринговогоТерминала.Вставить("Договор", Данные.Договор);
		ДанныеЭквайринговогоТерминала.Вставить("Эквайер", Данные.Эквайер);
	КонецЕсли;
	
	Возврат ДанныеЭквайринговогоТерминала;
	
КонецФункции

Функция ДокументОснованиеПлатежа(Распоряжение)
	
	ДокументОснование = Распоряжение;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	|	РеализацияТоваровУслуг.Дата КАК Дата
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Проведен
	|	И РеализацияТоваровУслуг.ЗаказКлиента = &Распоряжение
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	
	Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не Результат.Пустой() Тогда
		ДокументОснование = Результат.Выгрузить()[0].Ссылка;
	КонецЕсли;
	
	Возврат ДокументОснование;
	
КонецФункции

#КонецОбласти

#КонецЕсли
