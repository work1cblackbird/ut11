#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекущаяФорма = "ФормаРабочийСтол";
	
	Заказ = Параметры.Заказ;
	ПоказыватьФотоТоваров = Параметры.ПоказыватьФотоТоваров;
	ВалютаРаспоряжения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Заказ, "Валюта");
	НомерЗаказа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Заказ, "Номер");
	Валюта = Обработки.МобильноеРабочееМестоСборкиИКурьерскойДоставки.ВалютаПредставление(ВалютаРаспоряжения);
	
	ЗаполнитьТаблицыФормыПоЗаказу();
	СформироватьТаблицыГрупп();
	
	ПрограммноеФормированиеИнтерфейса();
	
	ПересчитатьИтогиГрупп();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ИзменитьРазделИАктивныеКоманды();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ТекущаяФорма = "ФормаРабочийСтол" Тогда
		СохранитьПромежуточныеДанные();
		Закрыть();
	ИначеЕсли ТекущаяФорма = "ФормаКарточкаТовара" Тогда
		Элементы.ФормаРабочийСтол.Видимость = Истина;
		Элементы.ФормаКарточкаТовара.Видимость = Ложь;
		Заголовок = НСтр("ru='Заказ:'") + НомерЗаказа;
		ТекущаяФорма = "ФормаРабочийСтол";
		Отказ = Истина;
	ИначеЕсли ТекущаяФорма = "ФормаСобратьТовар" Тогда
		Элементы.ФормаКарточкаТовара.Видимость = Истина;
		Элементы.ФормаСобратьТовар.Видимость = Ложь;
		Заголовок = НСтр("ru='Карточка заказа'");
		ТекущаяФорма = "ФормаКарточкаТовара";
		СкрытьКалькулятор();
		Отказ = Истина;
	ИначеЕсли ТекущаяФорма = "ФормаПоискПоШтрихкоду" Тогда
		Элементы.ФормаКарточкаТовара.Видимость = Истина;
		Элементы.ФормаПоискПоШтрихкоду.Видимость = Ложь;
		Заголовок = НСтр("ru='Карточка заказа'");
		ТекущаяФорма = "ФормаКарточкаТовара";
		СкрытьКалькулятор();
		Отказ = Истина;
	ИначеЕсли ТекущаяФорма = "ФормаПодтвержденияЗамены" Тогда
		Элементы.ФормаПоискПоШтрихкоду.Видимость = Истина;
		Элементы.ФормаПодтвержденияЗамены.Видимость = Ложь;
		Заголовок = НСтр("ru='Замена товара'");
		ТекущаяФорма = "ФормаПоискПоШтрихкоду";
		СкрытьКалькулятор();
		ПоказатьКалькулятор(1);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НачатьСборку(Команда)
	
	СтатусУстановлен = НачатьСборкуНаСервере();
	
	Если СтатусУстановлен Тогда
		ИзменитьРазделИАктивныеКоманды();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделКСборке(Команда)
	ИзменитьРаздел("КСборке");
КонецПроцедуры

&НаКлиенте
Процедура РазделУточнить(Команда)
	ИзменитьРаздел("Уточнить");
КонецПроцедуры

&НаКлиенте
Процедура РазделСобрано(Команда)
	ИзменитьРаздел("Собрано");
КонецПроцедуры

&НаКлиенте
Процедура Собрать(Команда)
	
	ТекущаяФорма = "ФормаСобратьТовар";
	Заголовок = НСтр("ru='Собрать товар'");
	
	Элементы.ФормаКарточкаТовара.Видимость = Ложь;
	Элементы.ФормаСобратьТовар.Видимость = Истина;
	ИзменитьКомандуПодтверждения();
	
КонецПроцедуры

&НаКлиенте
Процедура Заменить(Команда)
	
	Штрихкод = "";
	
	ТекущаяФорма = "ФормаПоискПоШтрихкоду";
	Заголовок = НСтр("ru='Поиск по штрихкоду'");
	
	Элементы.ФормаКарточкаТовара.Видимость = Ложь;
	Элементы.ФормаПоискПоШтрихкоду.Видимость = Истина;
	
	Если РезультатПоиска.Количество() > 0 Тогда
		
		// Удаляем старые результаты поиска
		Для Каждого НайденныйТовар Из РезультатПоиска Цикл
			УдалитьКарточкуТовараНаСервере("РезультатПоиска", НайденныйТовар.ИД);
		КонецЦикла;
		
		РезультатПоиска.Очистить();
	КонецЕсли;
	
	ПоказатьКалькулятор(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьСобрано(Команда)
	ТекущаяФорма = "ФормаРабочийСтол";
	Заголовок = НСтр("ru='Заказ:'") + НомерЗаказа;
	
	ОтменитьСобраноНаСервере();
	
	ПересчитатьИтогиГрупп();
	
	УдалитьКарточкуТовараНаСервере("Собрано", ИД);
	Элементы.ФормаРабочийСтол.Видимость = Истина;
	Элементы.ФормаКарточкаТовара.Видимость = Ложь;
	СкрытьКалькулятор();
	
	ИзменитьРазделИАктивныеКоманды();
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьНетВНаличии(Команда)
	ТекущаяФорма = "ФормаРабочийСтол";
	Заголовок = НСтр("ru='Заказ:'") + НомерЗаказа;
	
	ОтменитьТовараНетНаСервере();
	
	ПересчитатьИтогиГрупп();
	
	УдалитьКарточкуТовараНаСервере("ТовараНет", ИД);
	Элементы.ФормаРабочийСтол.Видимость = Истина;
	Элементы.ФормаКарточкаТовара.Видимость = Ложь;
	СкрытьКалькулятор();
	
	ИзменитьРазделИАктивныеКоманды();

КонецПроцедуры

&НаКлиенте
Процедура ОЗаказе(Команда)
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("Распоряжение", Заказ);
	ПараметрыОткрытияФормы.Вставить("ПоказыватьФотоТоваров", ПоказыватьФотоТоваров);
	
	ОткрытьФорму(
		"Обработка.МобильноеРабочееМестоСборкиИКурьерскойДоставки.Форма.КарточкаРаспоряжения",
		ПараметрыОткрытияФормы,
		ЭтаФорма,,,,,
		РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

#Если МобильныйКлиент Тогда
	
&НаКлиенте
Процедура Сканировать(Команда)
	
	Если СредстваМультимедиа.ПоддерживаетсяСканированиеШтрихКодов() Тогда
		
		ОбработчикСканирования = Новый ОписаниеОповещения("ОбработкаСканирования", ЭтаФорма);
		
		СредстваМультимедиа.ПоказатьСканированиеШтрихКодов(НСтр("ru='Наведите камеру на штрихкод'"),
			ОбработчикСканирования,
			,
			ТипШтрихКода.Линейный);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСканирования(ШК, Результат, Сообщение, ДополнительныеПараметры) Экспорт

	Если Результат Тогда
		
		СредстваМультимедиа.ВоспроизвестиЗвуковоеОповещение(ЗвуковоеОповещение.ПоУмолчанию,Истина);
		СредстваМультимедиа.ЗакрытьСканированиеШтрихКодов();
		
		Штрихкод = ШК;
		
		ПоискТовараПоШтрихкоду();
	Иначе	
		Сообщение = НСтр("ru='Ошибка обработки штрих кода'");
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли

&НаКлиенте
Процедура УменьшитьКоличество(Команда)
	Если Число(Элементы.КоличествоВвод.Заголовок) - 1 < 0 Тогда
		Возврат
	КонецЕсли;
	
	Элементы.КоличествоВвод.Заголовок = Число(Элементы.КоличествоВвод.Заголовок) - 1;
	ИзменитьКомандуПодтверждения();
КонецПроцедуры

&НаКлиенте
Процедура УвеличитьКоличество(Команда)
	Элементы.КоличествоВвод.Заголовок = Число(Элементы.КоличествоВвод.Заголовок) + 1;
	ИзменитьКомандуПодтверждения();
КонецПроцедуры

&НаКлиенте
Процедура КоличествоВвод(Команда)
	Элементы.СвойстваТовараСобрать.Видимость = НЕ Элементы.СвойстваТовараСобрать.Видимость;
	Элементы.ГруппаПредупреждение.Видимость  = НЕ Элементы.ГруппаПредупреждение.Видимость;
	ИзменитьКомандуПодтверждения();
	ПоказатьКалькулятор(0);
КонецПроцедуры

#Область Калькулятор

&НаКлиенте
Процедура КомандаТочка(Команда)
	КалькуляторЗапятая = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КомандаОчистить(Команда)
	
	Если ТекущаяФорма = "ФормаСобратьТовар" Тогда
		КолВоСимволов = СтрДлина(Элементы.КоличествоВвод.Заголовок);
		Элементы.КоличествоВвод.Заголовок = Сред(Элементы.КоличествоВвод.Заголовок, 1, КолВоСимволов - 1);
		
		ИзменитьКомандуПодтверждения();
	ИначеЕсли ТекущаяФорма = "ФормаПоискПоШтрихкоду" Тогда
		КолВоСимволов = СтрДлина(Штрихкод);
		Штрихкод = Сред(Штрихкод, 1, КолВоСимволов - 1);
	ИначеЕсли ТекущаяФорма = "ФормаПодтвержденияЗамены" Тогда
		КолВоСимволов = СтрДлина(Элементы.КоличествоЗаменаЛев.Заголовок);
		Элементы.КоличествоЗаменаЛев.Заголовок = Сред(Элементы.КоличествоЗаменаЛев.Заголовок, 1, КолВоСимволов - 1);
		Элементы.КоличествоЗаменаПрав.Заголовок = Элементы.КоличествоЗаменаЛев.Заголовок;
		
		Если Элементы.КоличествоЗаменаЛев.Заголовок = "" Тогда
			Элементы.КоличествоЗаменаЛев.Заголовок = "0";
			Элементы.КоличествоЗаменаПрав.Заголовок = "0";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Калькулятор0(Команда)
	ВводЗначения("0");
КонецПроцедуры

&НаКлиенте
Процедура Калькулятор1(Команда)
	ВводЗначения("1");
КонецПроцедуры

&НаКлиенте
Процедура Калькулятор2(Команда)
	ВводЗначения("2");
КонецПроцедуры

&НаКлиенте
Процедура Калькулятор3(Команда)
	ВводЗначения("3");
КонецПроцедуры

&НаКлиенте
Процедура Калькулятор4(Команда)
	ВводЗначения("4");
КонецПроцедуры

&НаКлиенте
Процедура Калькулятор5(Команда)
	ВводЗначения("5");
КонецПроцедуры

&НаКлиенте
Процедура Калькулятор6(Команда)
	ВводЗначения("6");
КонецПроцедуры

&НаКлиенте
Процедура Калькулятор7(Команда)
	ВводЗначения("7");
КонецПроцедуры

&НаКлиенте
Процедура Калькулятор8(Команда)
	ВводЗначения("8");
КонецПроцедуры

&НаКлиенте
Процедура Калькулятор9(Команда)
	ВводЗначения("9");
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Подтвердить(Команда)
	
	ТекущаяФорма = "ФормаРабочийСтол";
	Заголовок = НСтр("ru='Заказ:'") + НомерЗаказа;
	
	Попытка 
		КоличествоПодтверждено = Число(Элементы.КоличествоВвод.Заголовок);
	Исключение
		КоличествоПодтверждено = 0;
	КонецПопытки;
	
	Попытка 
		КоличествоПлан = Число(Элементы.КоличествоВводПлан.Заголовок);
	Исключение
		КоличествоПлан = 0;
	КонецПопытки;
	
	Если КоличествоПодтверждено = 0 Тогда
		ПереносВУточнить(КоличествоПлан);
	Иначе
		ПереносВСобрано(КоличествоПодтверждено);
		ПереносВУточнить(КоличествоПлан - КоличествоПодтверждено);
	КонецЕсли;
	
	ПересчитатьИтогиГрупп();
	
	УдалитьКарточкуТовараНаСервере("КСборке", ИД);
	Элементы.ФормаРабочийСтол.Видимость = Истина;
	Элементы.ФормаСобратьТовар.Видимость = Ложь;
	СкрытьКалькулятор();
	
	ИзменитьРазделИАктивныеКоманды();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьСборку(Команда)
	
	Если КСборке.Количество() > 0 Тогда
		Вопрос = НСтр("ru = 'Собраны не все товары. Завершить сборку заказа?';");
	ИначеЕсли Замены.Количество() > 0 Тогда
		Вопрос = НСтр("ru = 'Отработаны не все замены. Завершить сборку заказа?';");
	ИначеЕсли ВернутьНаПолку.Количество() > 0 Тогда
		Вопрос = НСтр("ru = 'Не все товары возвращены на полку. Завершить сборку заказа?';");
	Иначе
		Вопрос = НСтр("ru = 'Завершить сборку заказа?';");
	КонецЕсли;
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗакончитьСборку", ЭтотОбъект, Параметры);
	ПоказатьВопрос(Оповещение, Вопрос , Режим, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиПоШтрихкоду(Команда)
	НайтиТоварПоШК();
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьЗамену(Команда)
	
	ТекущаяФорма = "ФормаРабочийСтол";
	Заголовок = НСтр("ru='Заказ:'") + НомерЗаказа;
	
	Попытка 
		КоличествоПодтверждено = Число(Элементы.КоличествоЗаменаПрав.Заголовок);
	Исключение
		КоличествоПодтверждено = 0;
	КонецПопытки;
	
	Попытка 
		КоличествоПлан = Число(Элементы.КоличествоЗаменаЛев.Заголовок);
	Исключение
		КоличествоПлан = 0;
	КонецПопытки;
	
	Если КоличествоПодтверждено = 0 Тогда
		
	Иначе
		ПереносВЗамену(КоличествоПлан, КоличествоПодтверждено);
	КонецЕсли;
	
	ПересчитатьИтогиГрупп();
	
	УдалитьКарточкуТовараНаСервере("КСборке", ИД);
	Элементы.ФормаРабочийСтол.Видимость = Истина;
	Элементы.ФормаПодтвержденияЗамены.Видимость = Ложь;
	СкрытьКалькулятор();
	
	ИзменитьРазделИАктивныеКоманды();

КонецПроцедуры

&НаКлиенте
Процедура ЗаменыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьТаблицыФормыПоЗаказу()

	Статус = РегистрыСведений.СтатусыСборкиИДоставки.ПолучитьСтатусЗаказа(Заказ);
	
	Если Статус = Перечисления.СтатусыСборкиИДоставки.КСборке Тогда
		
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		
		Обработки.МобильноеРабочееМестоСборкиИКурьерскойДоставки.ТаблицаТовары(Заказ, АдресХранилища);
		КСборке.Загрузить(ПолучитьИзВременногоХранилища(АдресХранилища));
		
		Сч = 1;
		Для Каждого Строка Из КСборке Цикл
			Строка.ИД = Сч;
			Сч = Сч + 1;
		КонецЦикла;
		
		ПоследнийИД = Сч;
		
	ИначеЕсли Статус = Перечисления.СтатусыСборкиИДоставки.Собирается Тогда
		ЗагрузитьПромежуточныеДанные();
		
		Элементы.НачатьСборку.Видимость = Ложь;
		Элементы.Сканировать.Видимость = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРаздел(ИмяРаздела)
	
	Элементы.РамкаКСборке.Картинка = БиблиотекаКартинок.РамкаМенюБелая;
	Элементы.РазделКСборке.ЦветТекста = WebЦвета.ТемноСерый;
	
	Элементы.РамкаУточнить.Картинка = БиблиотекаКартинок.РамкаМенюБелая;
	Элементы.РазделУточнить.ЦветТекста = WebЦвета.ТемноСерый;
	
	Элементы.РамкаСобрано.Картинка = БиблиотекаКартинок.РамкаМенюБелая;
	Элементы.РазделСобрано.ЦветТекста = WebЦвета.ТемноСерый;
	
	Элементы.КСборке.Видимость = Ложь;
	Элементы.Уточнить.Видимость = Ложь;
	Элементы.Собрано.Видимость = Ложь;
	
	Если ИмяРаздела = "КСборке" Тогда
		ИмяЭлементаРамка  = "РамкаКСборке";
		ИмяЭлементаРаздел = "РазделКСборке";
	ИначеЕсли ИмяРаздела = "Уточнить" Тогда
		ИмяЭлементаРамка  = "РамкаУточнить";
		ИмяЭлементаРаздел = "РазделУточнить";
	ИначеЕсли ИмяРаздела = "Собрано" Тогда
		ИмяЭлементаРамка  = "РамкаСобрано";
		ИмяЭлементаРаздел = "РазделСобрано";
	КонецЕсли;
	
	Элементы[ИмяЭлементаРамка].Картинка    = БиблиотекаКартинок.РамкаМенюЧерная;
	Элементы[ИмяЭлементаРаздел].ЦветТекста = WebЦвета.Черный;
	Элементы[ИмяРаздела].Видимость = Истина;
	
	Если КСборке.Количество() = 0 Тогда
		Элементы.ЗакончитьСборку.Видимость = Истина;
		Элементы.Сканировать.Видимость = Ложь;
		Элементы.НачатьСборку.Видимость = Ложь;
	Иначе
		Элементы.ЗакончитьСборку.Видимость = Ложь;
		Элементы.Сканировать.Видимость = НЕ ТекущийСтатусКСборке();
		Элементы.НачатьСборку.Видимость = ТекущийСтатусКСборке();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрограммноеФормированиеИнтерфейса()
	
	Для Каждого ЭлГруппы Из ГруппыКСборке Цикл
		
		ГруппаТоваров = СоздатьГруппуНаФорме("КСборке", ЭлГруппы.ИД);
		
		// Создаем группу для карточки товара
		Для Каждого СтрокаЗаказа Из КСборке Цикл
			
			Если СтрокаЗаказа.Группа <> ЭлГруппы.Группа Тогда
				Продолжить;
			КонецЕсли;
			
			Ид = СтрЗаменить(Строка(СтрокаЗаказа.ИД),Символы.НПП,"");
			СоздатьКарточкуТовараНаФорме("КСборке", Ид, ГруппаТоваров);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ЭлГруппы Из ГруппыСобрано Цикл
		
		ГруппаТоваров = СоздатьГруппуНаФорме("Собрано", ЭлГруппы.ИД);
		
		// Создаем группу для карточки товара
		Для Каждого СтрокаЗаказа Из Собрано Цикл
			
			Если СтрокаЗаказа.Группа <> ЭлГруппы.Группа Тогда
				Продолжить;
			КонецЕсли;
			
			Ид = СтрЗаменить(Строка(СтрокаЗаказа.ИД),Символы.НПП,"");
			СоздатьКарточкуТовараНаФорме("Собрано", Ид, ГруппаТоваров);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого СтрокаТовараНет Из ТовараНет Цикл
		СоздатьКарточкуТовараНаФорме("ТовараНет", СтрокаТовараНет.ИД, Элементы.ТовараНет);
	КонецЦикла;
	
	Для Каждого СтрокаВернутьНаПолку Из ВернутьНаПолку Цикл
		СоздатьКарточкуТовараНаФорме("ВернутьНаПолку", СтрокаВернутьНаПолку.ИД, Элементы.ВернутьНаПолкуГруппа);
	КонецЦикла;
	
КонецПроцедуры

// Добавление товара
// 
// Параметры:
// 	Команда - КнопкаФормы
//@skip-warning
&НаКлиенте
Процедура ВыборТовара(Команда)
	
	Если ТекущаяФорма = "ФормаРабочийСтол" ИЛИ ТекущаяФорма = "ФормаСканировать" Тогда
		ПозРазделителя = СтрНайти(Команда.Имя, "_");
		ИД = Число(Сред(Команда.Имя, ПозРазделителя + 1));
		
		Раздел = "";
		
		Если СтрНайти(Команда.Имя, "КСборке") > 0 Тогда
			Раздел = "КСборке";
		ИначеЕсли СтрНайти(Команда.Имя, "ТовараНет") > 0 Тогда
			Раздел = "ТовараНет";
		ИначеЕсли СтрНайти(Команда.Имя, "Собрано") > 0 Тогда
			Раздел = "Собрано";
		КонецЕсли;
		
		ОткрытьКарточкуТовара(Раздел);
		
	ИначеЕсли ТекущаяФорма = "ФормаПоискПоШтрихкоду" Тогда
		
		ПозРазделителя = СтрНайти(Команда.Имя, "_");
		ИДЗамена = Число(Сред(Команда.Имя, ПозРазделителя + 1));
		
		ЗаполнитьФормуЗамены();
		
		СкрытьКалькулятор();
		ПоказатьКалькулятор(2);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОткрытьКарточкуТовара(Раздел)
	
	ТекущаяФорма = "ФормаКарточкаТовара";
	Заголовок = НСтр("ru='Карточка товара'");
	
	Элементы.ФормаРабочийСтол.Видимость = Ложь;
	Элементы.ФормаКарточкаТовара.Видимость = Истина;
	
	ПараметрыОтбора = Новый Структура("ИД", ИД);
	
	Если Раздел = "КСборке" Тогда
		МассивТоваров = КСборке.НайтиСтроки(ПараметрыОтбора);
	ИначеЕсли Раздел = "ТовараНет" Тогда
		МассивТоваров = ТовараНет.НайтиСтроки(ПараметрыОтбора);
	ИначеЕсли Раздел = "Собрано" Тогда
		МассивТоваров = Собрано.НайтиСтроки(ПараметрыОтбора);
	ИначеЕсли СтрДлина(Штрихкод) > 0 Тогда
		МассивТоваров = РезультатПоиска.НайтиСтроки(ПараметрыОтбора);
	КонецЕсли;
	
	Если МассивТоваров.Количество() > 0 Тогда
		
		СтрокаТовар = МассивТоваров[0];
		
		Если НЕ СтрокаТовар.ФайлКартинки.Пустая() Тогда
			ФотоТовара = РаботаСФайлами.ДанныеФайла(СтрокаТовар.ФайлКартинки, ЭтотОбъект.УникальныйИдентификатор).СсылкаНаДвоичныеДанныеФайла;
		КонецЕсли;
		
		Элементы.НаименованиеТовара.Заголовок        = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(СтрокаТовар.Номенклатура, СтрокаТовар.Характеристика,,СтрокаТовар.Серия);
		Элементы.НаименованиеТовараСобрать.Заголовок = Элементы.НаименованиеТовара.Заголовок;
		Элементы.ЗначениеАртикул.Заголовок           = ?(СтрокаТовар.Артикул = "", "-", СтрокаТовар.Артикул);
		Элементы.ЗначениеШтрихкод.Заголовок          = ?(СтрокаТовар.Штрихкод = "", "-", СтрокаТовар.Штрихкод);
		
		Если СтрокаТовар.ЭтоВесовойТовар Тогда
			Элементы.ЗначениеВес.Заголовок = "-";
		Иначе 
			Элементы.ЗначениеВес.Заголовок = Строка(СтрокаТовар.Вес) + " " + Строка(СтрокаТовар.ВесЕдиницаИзмерения);
		КонецЕсли;
		
		Элементы.ЗначениеЦена.Заголовок        = Строка(СтрокаТовар.Цена) + " " + Валюта;
		Элементы.ЗначениеЦенаСобрать.Заголовок = Элементы.ЗначениеЦена.Заголовок;
		
		СрокГодности = "-";
		Если СтрокаТовар.СрокГодности > 0 Тогда
			СрокГодности = Строка(СтрокаТовар.СрокГодности) + " " + Строка(СтрокаТовар.ЕдиницаИзмеренияСрокаГодности);
		КонецЕсли;
		
		Элементы.ЗначениеСрокГодности.Заголовок        = СрокГодности;
		Элементы.ЗначениеСрокГодностиСобрать.Заголовок = СрокГодности;
		
		Элементы.КоличествоВвод.Заголовок     = СтрокаТовар.Количество;
		Элементы.КоличествоВводПлан.Заголовок = СтрокаТовар.Количество;
		
		Элементы.НадписьЕдиницаИзмерения.Заголовок = СтрокаТовар.Упаковка;
		
		Если Статус = Перечисления.СтатусыСборкиИДоставки.КСборке Тогда
			Элементы.СобратьТовар.Видимость = Ложь;
			Элементы.Заменить.Видимость = Ложь;
			Элементы.ОтменитьСобрано.Видимость = Ложь;
			Элементы.ОтменитьНетВНаличии.Видимость = Ложь;
			Возврат;
		КонецЕсли;
		
		Если Раздел = "КСборке" Тогда
			Элементы.СобратьТовар.Видимость = Истина;
			Элементы.Заменить.Видимость = Истина;
			Элементы.ОтменитьСобрано.Видимость = Ложь;
			Элементы.ОтменитьНетВНаличии.Видимость = Ложь;
			Элементы.СобратьТовар.Заголовок         = НСтр("ru='Собрать'") + " " + Строка(СтрокаТовар.Количество) + " " + Строка(СтрокаТовар.Упаковка);
		ИначеЕсли Раздел = "Собрано" Тогда
			Элементы.СобратьТовар.Видимость = Ложь;
			Элементы.Заменить.Видимость = Ложь;
			Элементы.ОтменитьСобрано.Видимость = Истина;
			Элементы.ОтменитьНетВНаличии.Видимость = Ложь;
		ИначеЕсли Раздел = "ТовараНет" Тогда
			Элементы.СобратьТовар.Видимость = Ложь;
			Элементы.Заменить.Видимость = Ложь;
			Элементы.ОтменитьСобрано.Видимость = Ложь;
			Элементы.ОтменитьНетВНаличии.Видимость = Истина;
		КонецЕсли;
		
	Иначе			
		Элементы.СобратьТовар.Видимость = Ложь;
		Элементы.Заменить.Видимость = Ложь;
		Элементы.ОтменитьСобрано.Видимость = Ложь;
		Элементы.ОтменитьНетВНаличии.Видимость = Ложь;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НачатьСборкуНаСервере()
	
	СтатусУстановлен = Обработки.МобильноеРабочееМестоСборкиИКурьерскойДоставки.УстановитьСтатусРаспоряженияСобирается(Заказ);
	
	Если СтатусУстановлен Тогда
		Статус = Перечисления.СтатусыСборкиИДоставки.Собирается;
		СохранитьПромежуточныеДанные();
	КонецЕсли;
	
	Возврат СтатусУстановлен;
	
КонецФункции

&НаСервере
Процедура СохранитьПромежуточныеДанные()
	
	ПромежуточныеДанные = ПромежуточныеДанные();
	ПромежуточныеДанные.КСборке        = КСборке.Выгрузить();
	ПромежуточныеДанные.ГруппыКСборке  = ГруппыКСборке.Выгрузить();
	ПромежуточныеДанные.Собрано        = Собрано.Выгрузить();
	ПромежуточныеДанные.ГруппыСобрано  = ГруппыСобрано.Выгрузить();
	ПромежуточныеДанные.ТовараНет      = ТовараНет.Выгрузить();
	ПромежуточныеДанные.Замены         = Замены.Выгрузить();
	ПромежуточныеДанные.ВернутьНаПолку = ВернутьНаПолку.Выгрузить();
	
	ПромежуточныеДанные.ПоследнийИД = ПоследнийИД;
	
	ДанныеЗаказа = Новый ХранилищеЗначения(ПромежуточныеДанные);
	
	КоличествоСтрокСобрано = Собрано.Количество();
	
	РегистрыСведений.СтатусыСборкиИДоставки.ЗаписатьПромежуточныеДанныеСборки(Заказ, ДанныеЗаказа, КоличествоСтрокСобрано);
	
КонецПроцедуры

&НаСервере
Функция ПромежуточныеДанные()
	
	ПараметрыЗаполненияЦен = Новый Структура;
	ПараметрыЗаполненияЦен.Вставить("КСборке");
	ПараметрыЗаполненияЦен.Вставить("ГруппыКСборке");
	ПараметрыЗаполненияЦен.Вставить("Собрано");
	ПараметрыЗаполненияЦен.Вставить("ГруппыСобрано");
	ПараметрыЗаполненияЦен.Вставить("КоличествоСтрокСобрано");
	ПараметрыЗаполненияЦен.Вставить("ТовараНет");
	ПараметрыЗаполненияЦен.Вставить("Замены");
	ПараметрыЗаполненияЦен.Вставить("ВернутьНаПолку");
	ПараметрыЗаполненияЦен.Вставить("ПоследнийИД");
	
	Возврат ПараметрыЗаполненияЦен;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПромежуточныеДанные()
	
	ДанныеЗаказа = РегистрыСведений.СтатусыСборкиИДоставки.ПолучитьПромежуточныеДанныеСборки(Заказ);
	ПромежуточныеДанные = ДанныеЗаказа.Получить();
	
	Попытка
		ПоследнийИД = ПромежуточныеДанные.ПоследнийИД;
	Исключение
	КонецПопытки;

	Попытка
		КСборке.Загрузить(ПромежуточныеДанные.КСборке);
		ГруппыКСборке.Загрузить(ПромежуточныеДанные.ГруппыКСборке);
	Исключение
	КонецПопытки;
	
	Попытка
 		Собрано.Загрузить(ПромежуточныеДанные.Собрано);
		ГруппыСобрано.Загрузить(ПромежуточныеДанные.ГруппыСобрано);
	Исключение
	КонецПопытки;
	
	Попытка
		ТовараНет.Загрузить(ПромежуточныеДанные.ТовараНет);
	Исключение
	КонецПопытки;
	
	Попытка
		Замены.Загрузить(ПромежуточныеДанные.Замены);
		Для Каждого Строка Из Замены Цикл
			Строка.Картинка = РаботаСФайлами.ДанныеФайла(Строка.ФайлКартинки, ЭтотОбъект.УникальныйИдентификатор).СсылкаНаДвоичныеДанныеФайла;
			Строка.Картинка1 = РаботаСФайлами.ДанныеФайла(Строка.ФайлКартинки1, ЭтотОбъект.УникальныйИдентификатор).СсылкаНаДвоичныеДанныеФайла;
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	Попытка
		ВернутьНаПолку.Загрузить(ПромежуточныеДанные.ВернутьНаПолку);
	Исключение
	КонецПопытки;

	
КонецПроцедуры

&НаКлиенте
Процедура ВводЗначения(Число)
	
	Если ТекущаяФорма = "ФормаПоискПоШтрихкоду" Тогда
		
		Если КалькуляторЗапятая Тогда
			Штрихкод = Штрихкод + "," + Число;
			КалькуляторЗапятая = Ложь;
		Иначе
			Штрихкод = Штрихкод + Число
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТекущаяФорма = "ФормаСобратьТовар" Тогда
		
		Если КалькуляторЗапятая Тогда
			СтрокаВес = Элементы.КоличествоВвод.Заголовок + "," + Число;
			КалькуляторЗапятая = Ложь;
		Иначе
			СтрокаВес = Элементы.КоличествоВвод.Заголовок + Число
		КонецЕсли;
		
		Элементы.КоличествоВвод.Заголовок = Число(СтрокаВес);
		
		ИзменитьКомандуПодтверждения();
		
	КонецЕсли;
	
	Если ТекущаяФорма = "ФормаПодтвержденияЗамены" Тогда
		
		Если КалькуляторЗапятая Тогда
			СтрокаВес = Элементы.КоличествоЗаменаЛев.Заголовок + "," + Число;
			КалькуляторЗапятая = Ложь;
		Иначе
			СтрокаВес = Элементы.КоличествоЗаменаЛев.Заголовок + Число
		КонецЕсли;
		
		Элементы.КоличествоЗаменаЛев.Заголовок = Число(СтрокаВес);
		Элементы.КоличествоЗаменаПрав.Заголовок = Элементы.КоличествоЗаменаЛев.Заголовок;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПереносВСобрано(Количество)
	
	ПараметрыОтбора = Новый Структура("ИД", ИД);
	МассивСтрок = КСборке.НайтиСтроки(ПараметрыОтбора);
	
	Группа = Неопределено;
	
	Для Каждого СтрокаКСборке Из МассивСтрок Цикл
		
		Группа = СтрокаКСборке.Группа;
		
		НоваяСтрока = Собрано.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКСборке);
		НоваяСтрока.Количество = Количество;
		ПоследнийИД = ПоследнийИД + 1;
		НоваяСтрока.ИД = ПоследнийИД;
		
		СтрокаКСборке.Количество = СтрокаКСборке.Количество - Количество;
		
		Если СтрокаКСборке.Количество <= 0 Тогда
			КСборке.Удалить(СтрокаКСборке);
		КонецЕсли;
		
		ОбновитьТаблицыГрупп(Группа, "КСборке");
		ОбновитьТаблицыГрупп(Группа, "Собрано");
		
		НарисоватьТовар(НоваяСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПереносВУточнить(Количество)
	
	ПараметрыОтбора = Новый Структура("ИД", ИД);
	МассивСтрок = КСборке.НайтиСтроки(ПараметрыОтбора);
	
	Группа = Неопределено;
	
	Для Каждого СтрокаКСборке Из МассивСтрок Цикл
		
		Группа = СтрокаКСборке.Группа;
		
		НоваяСтрока = ТовараНет.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКСборке);
		НоваяСтрока.Количество = Количество;
		ПоследнийИД = ПоследнийИД + 1;
		НоваяСтрока.ИД = ПоследнийИД ;
		
		СтрокаКСборке.Количество = СтрокаКСборке.Количество - Количество;
		
		Если СтрокаКСборке.Количество <= 0 Тогда
			КСборке.Удалить(СтрокаКСборке);
		КонецЕсли;
		
		ОбновитьТаблицыГрупп(Группа, "КСборке");
		
		СоздатьКарточкуТовараНаФорме("ТовараНет", НоваяСтрока.ИД, Элементы.ТовараНет);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПереносВЗамену(КоличествоКСборке, КоличествоЗамена)
	
	Группа = Неопределено;

	ПараметрыОтбораКСборке = Новый Структура("ИД", ИД);
	МассивКСборке = КСборке.НайтиСтроки(ПараметрыОтбораКСборке);
	
	Если МассивКСборке.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбораРезультатПоиска = Новый Структура("ИД", ИДЗамена);
	МассивРезультатПоиска = РезультатПоиска.НайтиСтроки(ПараметрыОтбораРезультатПоиска);
	
	Если МассивРезультатПоиска.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаКСборке = МассивКСборке[0];
	СтрокаРезультатПоиска = МассивРезультатПоиска[0];
	
	Группа = СтрокаКСборке.Группа;
	
	НоваяСтрока = Замены.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКСборке);
	НоваяСтрока.Количество = КоличествоКСборке;
	Если ПоказыватьФотоТоваров И НЕ НоваяСтрока.ФайлКартинки.Пустая() Тогда
		НоваяСтрока.Картинка = РаботаСФайлами.ДанныеФайла(НоваяСтрока.ФайлКартинки, ЭтотОбъект.УникальныйИдентификатор).СсылкаНаДвоичныеДанныеФайла;
	КонецЕсли;
	ПоследнийИД = ПоследнийИД + 1;
	НоваяСтрока.ИД = ПоследнийИД;
	
	НоваяСтрока.Номенклатура1 = СтрокаРезультатПоиска.Номенклатура;
	НоваяСтрока.Количество1 = КоличествоЗамена;
	НоваяСтрока.Цена1 = СтрокаРезультатПоиска.Цена;
	НоваяСтрока.Группа1 = СтрокаРезультатПоиска.Группа;
	НоваяСтрока.КоличествоСтрок1 = СтрокаРезультатПоиска.КоличествоСтрок;
	НоваяСтрока.Артикул1 = СтрокаРезультатПоиска.Артикул;
	НоваяСтрока.Штрихкод1 = СтрокаРезультатПоиска.Штрихкод;
	НоваяСтрока.Вес1 = СтрокаРезультатПоиска.Вес;
	НоваяСтрока.ВесЕдиницаИзмерения1 = СтрокаРезультатПоиска.ВесЕдиницаИзмерения;
	НоваяСтрока.Упаковка1 = СтрокаРезультатПоиска.Упаковка;
	НоваяСтрока.Характеристика1 = СтрокаРезультатПоиска.Характеристика;
	НоваяСтрока.ФайлКартинки1 = СтрокаРезультатПоиска.ФайлКартинки;
	НоваяСтрока.СрокГодности1 = СтрокаРезультатПоиска.СрокГодности;
	НоваяСтрока.ЕдиницаИзмеренияСрокаГодности1 = СтрокаРезультатПоиска.ЕдиницаИзмеренияСрокаГодности;
	НоваяСтрока.ВидЦены1 = СтрокаРезультатПоиска.ВидЦены;
	Если ПоказыватьФотоТоваров И НЕ НоваяСтрока.ФайлКартинки1.Пустая() Тогда
		НоваяСтрока.Картинка1 = РаботаСФайлами.ДанныеФайла(НоваяСтрока.ФайлКартинки1, ЭтотОбъект.УникальныйИдентификатор).СсылкаНаДвоичныеДанныеФайла;
	КонецЕсли;
	ПоследнийИД = ПоследнийИД + 1;
	НоваяСтрока.ИД1 = ПоследнийИД;
	
	СтрокаКСборке.Количество = СтрокаКСборке.Количество - КоличествоКСборке;
	
	Если СтрокаКСборке.Количество <= 0 Тогда
		КСборке.Удалить(СтрокаКСборке);
	КонецЕсли;
	
	ОбновитьТаблицыГрупп(Группа, "КСборке");
	
КонецПроцедуры

Процедура ОтменитьСобраноНаСервере()
	
	ПараметрыОтбора = Новый Структура("ИД", ИД);
	МассивСтрок = Собрано.НайтиСтроки(ПараметрыОтбора);
	
	Группа = Неопределено;
	
	Для Каждого СтрокаСобрано Из МассивСтрок Цикл
		
		Группа = СтрокаСобрано.Группа;
		
		НоваяСтрока = КСборке.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСобрано);
		НоваяСтрока.Количество = СтрокаСобрано.Количество;
		ПоследнийИД = ПоследнийИД + 1;
		НоваяСтрока.ИД = ПоследнийИД;
		
		Собрано.Удалить(СтрокаСобрано);
		
		ОбновитьТаблицыГрупп(Группа, "КСборке");
		ОбновитьТаблицыГрупп(Группа, "Собрано");
		
		НарисоватьТоварКСборке(НоваяСтрока);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтменитьТовараНетНаСервере()
	
	ПараметрыОтбора = Новый Структура("ИД", ИД);
	МассивСтрок = ТовараНет.НайтиСтроки(ПараметрыОтбора);
	
	Группа = Неопределено;
	
	Для Каждого СтрокаТовараНет Из МассивСтрок Цикл
		
		Группа = СтрокаТовараНет.Группа;
		
		НоваяСтрока = КСборке.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовараНет);
		НоваяСтрока.Количество = СтрокаТовараНет.Количество;
		ПоследнийИД = ПоследнийИД + 1;
		НоваяСтрока.ИД = ПоследнийИД;
		
		ТовараНет.Удалить(СтрокаТовараНет);
		
		ОбновитьТаблицыГрупп(Группа, "КСборке");
		
		НарисоватьТоварКСборке(НоваяСтрока);
	КонецЦикла;
	
КонецПроцедуры

// Процедура перезаполняет таблицы групп 
&НаСервере
Процедура ОбновитьТаблицыГрупп(Группа, ИмяТаблицы)
	
	Если ИмяТаблицы = "Собрано" Тогда
		ИмяРеквизитаФормы = "ГруппыСобрано";
	ИначеЕсли ИмяТаблицы = "КСборке" Тогда
		ИмяРеквизитаФормы = "ГруппыКСборке";
	КонецЕсли;
	
	// Определяем кол-во строк в измененной группе
	ПараметрыОтбора = Новый Структура("Группа", Группа);
	МассивСтрок = ЭтаФорма[ИмяТаблицы].НайтиСтроки(ПараметрыОтбора);
	КолВоВГруппе = МассивСтрок.Количество();
	
	ПараметрыОтбора = Новый Структура("Группа", Группа);
	МассивГрупп = ЭтаФорма[ИмяРеквизитаФормы].НайтиСтроки(ПараметрыОтбора);

	НовыйИД = 1;
	ТабЗнач = ЭтаФорма[ИмяРеквизитаФормы].Выгрузить(,"ИД");
	ТабЗнач.Сортировать("ИД Убыв");
	Если ТабЗнач.Количество() > 0 Тогда
		НовыйИД = ТабЗнач[0].ИД + 1;
	КонецЕсли;
	
	Если МассивГрупп.Количество() = 0 Тогда
		НоваяГруппа = ЭтаФорма[ИмяРеквизитаФормы].Добавить();
		НоваяГруппа.Группа          = Группа;
		НоваяГруппа.КоличествоСтрок = КолВоВГруппе;
		НоваяГруппа.ИД = НовыйИД;
	Иначе
		Для Каждого Строка Из МассивГрупп Цикл
			Строка.КоличествоСтрок = КолВоВГруппе;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьТаблицыГрупп()
	
	Если ГруппыКСборке.Количество() = 0 Тогда
		ТабЗнач = КСборке.Выгрузить(,"Группа, КоличествоСтрок");
		ТабЗнач.Свернуть("Группа", "КоличествоСтрок");
		ГруппыКСборке.Загрузить(ТабЗнач);
		
		Сч = 1;
		Для Каждого Строка Из ГруппыКСборке Цикл
			Строка.ИД = Сч;
			Сч = Сч + 1;
		КонецЦикла;
	КонецЕсли;
	
	Если ГруппыСобрано.Количество() = 0 Тогда
		ТабЗнач = Собрано.Выгрузить(,"Группа, КоличествоСтрок");
		ТабЗнач.Свернуть("Группа", "КоличествоСтрок");
		ГруппыСобрано.Загрузить(ТабЗнач);
		
		Сч = 1;
		Для Каждого Строка Из ГруппыСобрано Цикл
			Строка.ИД = Сч;
			Сч = Сч + 1;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьИтогиГрупп()
	
	Элементы.РазделКСборке.Заголовок  = НСтр("ru='Собрать'") + " " + Строка(ГруппыКСборке.Итог("КоличествоСтрок"));
	Элементы.РазделУточнить.Заголовок = НСтр("ru='Уточнить'") + " " + Строка(ТовараНет.Количество() + Замены.Количество());
	Элементы.РазделСобрано.Заголовок  = НСтр("ru='Собрано'") + " " + Строка(ГруппыСобрано.Итог("КоличествоСтрок"));
	
	Для Каждого Строка Из ГруппыКСборке Цикл
		ИмяГруппы = ?(Строка.Группа = "", НСтр("ru='Без группы'"), Строка.Группа);
		Элементы["ГруппаТоваровКСборке" + Строка.ИД].Заголовок = ИмяГруппы + " - " + Строка.КоличествоСтрок;
	КонецЦикла;
	
	Для Каждого Строка Из ГруппыСобрано Цикл
		ИмяГруппы = ?(Строка.Группа = "", НСтр("ru='Без группы'"), Строка.Группа);
		Элементы["ГруппаТоваровСобрано" + Строка.ИД].Заголовок = ИмяГруппы + " - " + Строка.КоличествоСтрок;
	КонецЦикла;
	
	Элементы.ЗаменыГруппа.Заголовок = НСтр("ru='Замены'") + " - " + Строка(Замены.Количество());
	Элементы.ТовараНет.Заголовок = НСтр("ru='Товара нет'") + " - " + Строка(ТовараНет.Количество() + Замены.Количество());
	Элементы.ВернутьНаПолкуГруппа.Заголовок = НСтр("ru='Вернуть на полку'") + " - " + Строка(ВернутьНаПолку.Количество());
	
КонецПроцедуры

&НаСервере
Процедура НарисоватьТовар(СтрокаЗаказа)
	
	// Находим ИД группы
	ПараметрыОтбора = Новый Структура("Группа", СтрокаЗаказа.Группа);
	МассивГрупп = ГруппыСобрано.НайтиСтроки(ПараметрыОтбора);
	
	Если МассивГрупп.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаГруппы = МассивГрупп[0];
	
	ЭлементГруппаСобрано = Элементы.Найти("ГруппаТоваровСобрано" + СтрокаГруппы.ИД);
	Если ЭлементГруппаСобрано = Неопределено Тогда
		ЭлементГруппаСобрано = СоздатьГруппуНаФорме("Собрано", СтрокаГруппы.ИД);
	КонецЕсли;
	
	СоздатьКарточкуТовараНаФорме("Собрано", СтрокаЗаказа.ИД, ЭлементГруппаСобрано);
	
КонецПроцедуры

&НаСервере
Процедура НарисоватьТоварКСборке(СтрокаЗаказа)
	
	// Находим ИД группы
	ПараметрыОтбора = Новый Структура("Группа", СтрокаЗаказа.Группа);
	МассивГрупп = ГруппыКСборке.НайтиСтроки(ПараметрыОтбора);
	
	Если МассивГрупп.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаГруппы = МассивГрупп[0];
	
	ЭлементГруппаКСборке = Элементы.Найти("ГруппаТоваровКСборке" + СтрокаГруппы.ИД);
	Если ЭлементГруппаКСборке = Неопределено Тогда
		ЭлементГруппаКСборке = СоздатьГруппуНаФорме("КСборке", СтрокаГруппы.ИД);
	КонецЕсли;
	
	СоздатьКарточкуТовараНаФорме("КСборке", СтрокаЗаказа.ИД, ЭлементГруппаКСборке);
	
КонецПроцедуры

&НаСервере
Функция СоздатьГруппуНаФорме(ИмяРаздела, ИДГруппы)
	
	Если ИмяРаздела = "КСборке" Тогда
		ИмяЭлементаБезПостфикса = "ГруппаТоваровКСборке";
	ИначеЕсли ИмяРаздела = "Собрано" Тогда
		ИмяЭлементаБезПостфикса = "ГруппаТоваровСобрано";
	КонецЕсли;
	
	ГруппаТоваров = Элементы.Добавить(
	"" + ИмяЭлементаБезПостфикса + Строка(ИДГруппы),
	Тип("ГруппаФормы"),
	Элементы[ИмяРаздела]);
	
	ГруппаТоваров.Вид                     = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаТоваров.Поведение               = ПоведениеОбычнойГруппы.Свертываемая;
	ГруппаТоваров.ЦветТекстаЗаголовка     = Новый Цвет(126,126,126);
	ГруппаТоваров.ШрифтЗаголовка          = ШрифтыСтиля.ШрифтТекстаСборкаИДоставка;
	ГруппаТоваров.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	Возврат ГруппаТоваров; 
	
КонецФункции

&НаСервере
Процедура СоздатьКарточкуТовараНаФорме(ИмяРаздела, ИДТовара, Родитель)
	
	ПараметрыОтбора = Новый Структура("ИД", ИДТовара);
	МассивСтрок = ЭтаФорма[ИмяРаздела].НайтиСтроки(ПараметрыОтбора);
	
	СтрокаЗаказа = Неопределено;
	Если МассивСтрок.Количество() > 0 Тогда
		СтрокаЗаказа = МассивСтрок[0];
	Иначе
		Возврат;
	КонецЕсли;
	
	// КАРТОЧКА ТОВАРА
	КарточкаТовара = Элементы.Добавить("КарточкаТовара" + ИмяРаздела + ИДТовара, Тип("ГруппаФормы"), Родитель);
	КарточкаТовара.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
	КарточкаТовара.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная; 
	КарточкаТовара.ОтображатьЗаголовок = Ложь;
	
	// КАРТОЧКА ТОВАРА 2 Без отступов
	КарточкаТовараКонтейнер = Элементы.Добавить("КарточкаТовара2" + ИмяРаздела + ИДТовара, Тип("ГруппаФормы"), КарточкаТовара);
	КарточкаТовараКонтейнер.Вид                = ВидГруппыФормы.ОбычнаяГруппа;
	КарточкаТовараКонтейнер.Группировка        = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда; 
	КарточкаТовараКонтейнер.ОтображатьЗаголовок = Ложь;
	
	// КАРТОЧКА ТОВАРА Левая часть
	КарточкаТовараЛеваяЧасть = Элементы.Добавить("КарточкаТовараЛев" + ИмяРаздела + ИДТовара, Тип("ГруппаФормы"), КарточкаТовараКонтейнер);
	КарточкаТовараЛеваяЧасть.Вид                = ВидГруппыФормы.ОбычнаяГруппа;
	КарточкаТовараЛеваяЧасть.Группировка        = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда; 
	КарточкаТовараЛеваяЧасть.ОтображатьЗаголовок = Ложь;
	КарточкаТовараЛеваяЧасть.Ширина = 4;
	
	// КАРТОЧКА ТОВАРА Правая часть
	КарточкаТовараПраваяЧасть = Элементы.Добавить("КарточкаТовараПрав" + ИмяРаздела + ИДТовара, Тип("ГруппаФормы"), КарточкаТовараКонтейнер);
	КарточкаТовараПраваяЧасть.Вид                = ВидГруппыФормы.ОбычнаяГруппа;
	КарточкаТовараПраваяЧасть.Группировка        = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная; 
	КарточкаТовараПраваяЧасть.ОтображатьЗаголовок = Ложь;
	
	// КАРТОЧКА ТОВАРА Верхняя область
	КарточкаТовараВерх = Элементы.Добавить("КарточкаТовараПравВерх" + ИмяРаздела + ИДТовара, Тип("ГруппаФормы"), КарточкаТовараПраваяЧасть);
	КарточкаТовараВерх.Вид                = ВидГруппыФормы.ОбычнаяГруппа;
	КарточкаТовараВерх.Группировка        = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда; 
	КарточкаТовараВерх.ОтображатьЗаголовок = Ложь;
	КарточкаТовараВерх.Отображение = ОтображениеОбычнойГруппы.Нет;
	
	// КАРТОЧКА ТОВАРА Нижняя область
	КарточкаТовараНиз = Элементы.Добавить("КарточкаТовараПравНиз" + ИмяРаздела + ИДТовара, Тип("ГруппаФормы"), КарточкаТовараПраваяЧасть);
	КарточкаТовараНиз.Вид                = ВидГруппыФормы.ОбычнаяГруппа;
	КарточкаТовараНиз.Группировка        = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда; 
	КарточкаТовараНиз.ОтображатьЗаголовок = Ложь;
	КарточкаТовараНиз.Отображение = ОтображениеОбычнойГруппы.Нет;
	КарточкаТовараНиз.РастягиватьПоГоризонтали = Истина;
	
	// ФОТО ТОВАРА
	Если ПоказыватьФотоТоваров Тогда
		ДобавляемыеРеквизиты = Новый Массив;
		ТипРеквизита = Новый ОписаниеТипов("Строка");
		РеквизитФормы = Новый РеквизитФормы("Фото" + ИмяРаздела + ИДТовара, ТипРеквизита);
		
		ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
		
		// Заставляем форму создать новые реквизиты
		ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		
		// Вывод реквизита на форму (при необходимости)
		ПолеВвода = Элементы.Добавить("Фото" + ИмяРаздела + ИДТовара, Тип("ПолеФормы"), КарточкаТовараЛеваяЧасть);
		ПолеВвода.Вид = ВидПоляФормы.ПолеКартинки;
		ПолеВвода.ПутьКДанным = "Фото" + ИмяРаздела + ИДТовара;
		ПолеВвода.РазмерКартинки = РазмерКартинки.Пропорционально;
		ПолеВвода.Ширина = 4;
		ПолеВвода.Высота = 2;
		ПолеВвода.РастягиватьПоГоризонтали = Ложь;
		ПолеВвода.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ПолеВвода.Рамка = РамкиСтиля.РамкаНетРамки;
		
		// Обращение к реквизиту формы из кода
		Если НЕ СтрокаЗаказа.ФайлКартинки.Пустая() Тогда
			СсылкаНаДДФ = РаботаСФайлами.ДанныеФайла(СтрокаЗаказа.ФайлКартинки, ЭтотОбъект.УникальныйИдентификатор).СсылкаНаДвоичныеДанныеФайла;
			ЭтаФорма["Фото" + ИмяРаздела + ИДТовара] = СсылкаНаДДФ;
		КонецЕсли;
	КонецЕсли;
	
	// Название товара
	Команда = Команды.Добавить(
	"ТоварНаименование" + ИмяРаздела + "_" + ИДТовара); //Имя команды
	Команда.Заголовок = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(СтрокаЗаказа.Номенклатура, СтрокаЗаказа.Характеристика,,СтрокаЗаказа.Серия);
	Команда.Действие = "ВыборТовара"; //Имя связанной процедуры
	КнопкаФормы = Элементы.Добавить("КнопкаТовар" + ИмяРаздела + ИДТовара, Тип("КнопкаФормы"), КарточкаТовараВерх);
	КнопкаФормы.ИмяКоманды = "ТоварНаименование" + ИмяРаздела + "_" + ИДТовара; 
	КнопкаФормы.Вид        = ВидКнопкиФормы.ОбычнаяКнопка; 
	КнопкаФормы.Шрифт      = ШрифтыСтиля.ШрифтТекстаВыделенныйСборкаИДоставка;
	КнопкаФормы.ЦветТекста = Новый Цвет(0,0,0);
	КнопкаФормы.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
	КнопкаФормы.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Лево;
	КнопкаФормы.ВысотаЗаголовка = 2;
	КнопкаФормы.РастягиватьПоГоризонтали = Истина;
	
	// Количество товара
	Команда = Команды.Добавить(
	"ТоварКоличество" + ИмяРаздела + "_" + ИДТовара); //Имя команды
	Команда.Заголовок = Строка(СтрокаЗаказа.Количество) + " " + Строка(СтрокаЗаказа.Упаковка);
	Команда.Действие  = "ВыборТовара"; //Имя связанной процедуры
	
	КнопкаФормы = Элементы.Добавить("КнопкаТоварКоличество" + ИмяРаздела + ИДТовара, Тип("КнопкаФормы"), КарточкаТовараВерх);
	КнопкаФормы.ИмяКоманды = "ТоварКоличество" + ИмяРаздела + "_" + ИДТовара; 
	КнопкаФормы.Вид        = ВидКнопкиФормы.ОбычнаяКнопка; 
	КнопкаФормы.Шрифт      = ШрифтыСтиля.ШрифтТекстаВыделенныйСборкаИДоставка;
	КнопкаФормы.ЦветТекста = Новый Цвет(106,210,110);
	КнопкаФормы.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
	КнопкаФормы.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
	КнопкаФормы.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Верх;
	
	// Вес товара
	Если СтрокаЗаказа.ЭтоВесовойТовар ИЛИ СтрокаЗаказа.Вес = 0 Тогда
		ЗаголовокВес = "";
	Иначе 
		ЗаголовокВес = Строка(СтрокаЗаказа.Вес) + " " + Строка(СтрокаЗаказа.ВесЕдиницаИзмерения);
	КонецЕсли;
	
	Команда = Команды.Добавить(
	"ТоварВес" + ИмяРаздела + "_" + ИДТовара); //Имя команды
	Команда.Заголовок = ЗаголовокВес;
	Команда.Действие  = "ВыборТовара"; //Имя связанной процедуры
	
	КнопкаФормы = Элементы.Добавить("КнопкаТоварВес" + ИмяРаздела + ИДТовара, Тип("КнопкаФормы"), КарточкаТовараНиз);
	КнопкаФормы.ИмяКоманды = "ТоварВес" + ИмяРаздела + "_" + ИДТовара; 
	КнопкаФормы.Вид        = ВидКнопкиФормы.ОбычнаяКнопка; 
	КнопкаФормы.Шрифт      = ШрифтыСтиля.ШрифтТекстаВыделенныйСборкаИДоставка;
	КнопкаФормы.ЦветТекста = Новый Цвет(126,126,126);
	КнопкаФормы.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
	КнопкаФормы.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Лево;
	Если ЗаголовокВес = "" Тогда
		КнопкаФормы.Видимость = Ложь;
	КонецЕсли;
	
	// Цена товара
	Команда = Команды.Добавить(
	"ТоварЦена" + ИмяРаздела + "_" + ИДТовара); //Имя команды
	Команда.Заголовок = Строка(СтрокаЗаказа.Цена) + " " + Валюта;
	Команда.Действие  = "ВыборТовара"; //Имя связанной процедуры
	
	КнопкаФормы = Элементы.Добавить("КнопкаТоварЦена" + ИмяРаздела + ИДТовара, Тип("КнопкаФормы"), КарточкаТовараНиз);
	КнопкаФормы.ИмяКоманды = "ТоварЦена" + ИмяРаздела + "_" + ИДТовара; 
	КнопкаФормы.Вид        = ВидКнопкиФормы.ОбычнаяКнопка; 
	КнопкаФормы.Шрифт      = ШрифтыСтиля.ШрифтТекстаВыделенныйСборкаИДоставка;
	КнопкаФормы.ЦветТекста = Новый Цвет(126,126,126);
	КнопкаФормы.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
	КнопкаФормы.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
	
	// Черта ОТСТУП
	Черта = Элементы.Добавить("Черта" + ИмяРаздела + ИДТовара, Тип("ДекорацияФормы"), КарточкаТовара);
	Черта.Вид = ВидДекорацииФормы.Картинка;
	Черта.Картинка = БиблиотекаКартинок.РамкаСерая;
	Черта.РастягиватьПоГоризонтали = Истина;
	Черта.РазмерКартинки = РазмерКартинки.Растянуть;
	Черта.Высота = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРазделИАктивныеКоманды() 
	
	Если КСборке.Количество() > 0 Тогда
		ИзменитьРаздел("КСборке");
	ИначеЕсли 2=3 Тогда
		ИзменитьРаздел("Уточнить");
	ИначеЕсли Собрано.Количество() > 0 Тогда
		ИзменитьРаздел("Собрано");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТекущийСтатусКСборке()
	
	Если Статус = Перечисления.СтатусыСборкиИДоставки.КСборке Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ЦветСтиляЗеленаяКоманда()
	
	Возврат ЦветаСтиля.ЦветКомандЗеленыйСборкаИДоставка;
	
КонецФункции

&НаКлиенте
Процедура ИзменитьКомандуПодтверждения()
	
	Если Элементы.КоличествоВвод.Заголовок = "" Тогда
		Элементы.КоличествоВвод.Заголовок = "0";
		Элементы.Подтвердить.Заголовок = НСтр("ru='Товара нет'");
		Элементы.Подтвердить.ЦветФона = Новый Цвет(253, 91, 81);
		Элементы.ПодтвердитьСборТовара.Заголовок = "Товара нет";
		Элементы.ПодтвердитьСборТовара.ЦветФона = Новый Цвет(253, 91, 81);
	КонецЕсли;
	
	Если Число(Элементы.КоличествоВвод.Заголовок) = 0 Тогда
		Элементы.Подтвердить.Заголовок = НСтр("ru='Товара нет'");
		Элементы.Подтвердить.ЦветФона = Новый Цвет(253, 91, 81);
		Элементы.ПодтвердитьСборТовара.Заголовок = "Товара нет";
		Элементы.ПодтвердитьСборТовара.ЦветФона = Новый Цвет(253, 91, 81);
	Иначе
		Элементы.Подтвердить.Заголовок = НСтр("ru='Подтвердить'");
		Элементы.Подтвердить.ЦветФона = ЦветСтиляЗеленаяКоманда();
		Элементы.ПодтвердитьСборТовара.Заголовок = "Подтвердить";
		Элементы.ПодтвердитьСборТовара.ЦветФона = ЦветСтиляЗеленаяКоманда();
	КонецЕсли;
	
КонецПроцедуры

// Показывает группу формы калькулятор.
//
//	Параметры:
//		Форма - число - 0 это форма собрать, 1 - это форма поиск по ШК
//						2 это форма замены
//
&НаКлиенте
Процедура ПоказатьКалькулятор(Форма)
	
	// Показываем скрываем калькулятор
	Элементы.ГруппаКалькулятор.Видимость = НЕ Элементы.ГруппаКалькулятор.Видимость;
	
	Если Форма = 0 Тогда
		Элементы.ПодтвердитьСборТовара.Видимость = Элементы.ГруппаКалькулятор.Видимость;
		Элементы.Подтвердить.Видимость = НЕ Элементы.ГруппаКалькулятор.Видимость;
		Элементы.Найти.Видимость = Ложь;
		Элементы.ПодтвердитьЗамену.Видимость = Ложь;
	ИначеЕсли Форма = 1 Тогда
		Элементы.ПодтвердитьСборТовара.Видимость = Ложь;
		Элементы.Подтвердить.Видимость = Истина;
		Элементы.Найти.Видимость = Истина;
		Элементы.ПодтвердитьЗамену.Видимость = Ложь;
	ИначеЕсли Форма = 2 Тогда
		Элементы.ПодтвердитьСборТовара.Видимость = Ложь;
		Элементы.Подтвердить.Видимость = Ложь;
		Элементы.Найти.Видимость = Ложь;
		Элементы.ПодтвердитьЗамену.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьКалькулятор()
	Элементы.ГруппаКалькулятор.Видимость = Ложь;
	Элементы.Подтвердить.Видимость = Истина;
КонецПроцедуры

// Параметры: Источник 0 - из замены; 1 - из добаления нового
&НаСервере
Процедура НайтиТоварПоШК()
	
	ТекущаяФорма = "ФормаПоискПоШтрихкоду";
	Заголовок = НСтр("ru='Сканировать'");
	
	Если РезультатПоиска.Количество() > 0 Тогда
		
		// Удаляем старые результаты поиска
		Для Каждого НайденныйТовар Из РезультатПоиска Цикл
			УдалитьКарточкуТовараНаСервере("РезультатПоиска", НайденныйТовар.ИД);
		КонецЦикла;
		
		РезультатПоиска.Очистить();
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("ИД", ИД);
	МассивТоваров = КСборке.НайтиСтроки(ПараметрыОтбора);
	Если МассивТоваров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Соглашение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Заказ, "Соглашение");
	ВидЦены = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Соглашение, "ВидЦен"); 
	
	ТаблицаТоваров = Обработки.МобильноеРабочееМестоСборкиИКурьерскойДоставки.НайтиТоварПоШК(Штрихкод, ВидЦены);
	
	РезультатПоиска.Загрузить(ТаблицаТоваров);
	
	Для Каждого НайденныйТовар Из РезультатПоиска Цикл
		
		СоздатьКарточкуТовараНаФорме("РезультатПоиска", НайденныйТовар.ИД, Элементы.НайденныеТовары);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьКарточкуТовараНаСервере(ИмяРаздела, ИДТовара)
	
	// Удалить элементы формы
	ЭтаФорма.Элементы.Удалить(Элементы.Найти("КарточкаТовара" + ИмяРаздела + ИДТовара));
	
	// Удалить команды формы
	ЭтаФорма.Команды.Удалить(Команды.Найти("ТоварНаименование" + ИмяРаздела + "_" + ИДТовара));
	ЭтаФорма.Команды.Удалить(Команды.Найти("ТоварКоличество" + ИмяРаздела + "_" + ИДТовара));
	ЭтаФорма.Команды.Удалить(Команды.Найти("ТоварВес" + ИмяРаздела + "_" + ИДТовара));
	ЭтаФорма.Команды.Удалить(Команды.Найти("ТоварЦена" + ИмяРаздела + "_" + ИДТовара));

	// Удалить реквизиты
	Если ПоказыватьФотоТоваров Тогда
		МассивУдаляемыхРеквизитов = Новый Массив();
		МассивУдаляемыхРеквизитов.Добавить("Фото" + ИмяРаздела + ИДТовара); 
		ИзменитьРеквизиты(, МассивУдаляемыхРеквизитов);
	Иначе
		ИзменитьРеквизиты();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФормуЗамены()
	
	ТекущаяФорма = "ФормаПодтвержденияЗамены";
	Элементы.ФормаПоискПоШтрихкоду.Видимость = Ложь;
	Элементы.ФормаПодтвержденияЗамены.Видимость = Истина;
	
	ПараметрыОтбора = Новый Структура("ИД", ИД);
	МассивКСборке = КСборке.НайтиСтроки(ПараметрыОтбора);
	Если МассивКСборке.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	СтрокаКСборке = МассивКСборке[0];

	ПараметрыОтбора = Новый Структура("ИД", ИДЗамена);
	МассивПоиск = РезультатПоиска.НайтиСтроки(ПараметрыОтбора);
	Если МассивПоиск.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	СтрокаПоиск = МассивПоиск[0];
	
	Если ПоказыватьФотоТоваров И НЕ СтрокаКСборке.ФайлКартинки.Пустая() Тогда
		ФотоТовараЗаменаЛев = РаботаСФайлами.ДанныеФайла(СтрокаКСборке.ФайлКартинки, ЭтотОбъект.УникальныйИдентификатор).СсылкаНаДвоичныеДанныеФайла;
		Элементы.ФотоТовараЛев.Видимость = Истина;
	КонецЕсли;
	Элементы.КоличествоЗаменаЛев.Заголовок = СтрокаКСборке.Количество;
	Элементы.УпакЛев.Заголовок = СтрокаКСборке.Упаковка;
	Элементы.НаименованиеЛев.Заголовок = СтрокаКСборке.Номенклатура;
	Элементы.ЦенаЛев.Заголовок = Строка(СтрокаКСборке.Цена) + " " + Валюта;
	
	Если ПоказыватьФотоТоваров И НЕ СтрокаПоиск.ФайлКартинки.Пустая() Тогда
		ФотоТовараЗаменаПрав = РаботаСФайлами.ДанныеФайла(СтрокаПоиск.ФайлКартинки, ЭтотОбъект.УникальныйИдентификатор).СсылкаНаДвоичныеДанныеФайла;
		Элементы.ФотоТовараПрав.Видимость = Истина;
	КонецЕсли;
	Элементы.КоличествоЗаменаПрав.Заголовок = СтрокаКСборке.Количество;
	Элементы.УпакПрав.Заголовок = СтрокаПоиск.Упаковка;
	Элементы.НаименованиеПрав.Заголовок = СтрокаПоиск.Номенклатура;
	Элементы.ЦенаПрав.Заголовок = Строка(СтрокаПоиск.Цена) + " " + Валюта;

КонецПроцедуры

&НаКлиенте
Процедура ПеренестиЗаменуВСобрано(Команда)
	СтрокаЗамена = Элементы.Замены.ТекущиеДанные;
	Структура = ПолучитьДанныеТекущейСтроки(СтрокаЗамена);
	Замены.Удалить(СтрокаЗамена);
	ПеренестиЗаменуВСобраноСервер(Структура);
	
	ПересчитатьИтогиГрупп();
КонецПроцедуры

&НаСервере
Процедура ПеренестиЗаменуВСобраноСервер(СтрокаЗамена)
	
	Группа = Неопределено;
	Группа = СтрокаЗамена.Группа;
	
	НоваяСтрока = Собрано.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗамена);
	ПоследнийИД = ПоследнийИД + 1;
	НоваяСтрока.ИД = ПоследнийИД;
	
	ОбновитьТаблицыГрупп(Группа, "Собрано");
	
	НарисоватьТовар(НоваяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиЗаменуВТовараНет(Команда)
	
	// Текущая строка
	СтрокаЗамена = Элементы.Замены.ТекущиеДанные;
	
	// Преобразуем строку в структуру Номенклатура = Номенклатура
	Структура = ПолучитьДанныеТекущейСтроки2(СтрокаЗамена);
	
	// Преобразуем строку в структуру Номенклатура = Номенклатура1
	Структура2 = ПолучитьДанныеТекущейСтроки(СтрокаЗамена);
	
	Замены.Удалить(СтрокаЗамена);
	
	ПереносВТовараНетСервер(Структура);
	ПереносВВернутьНаПолкуСервер(Структура2);
	
	ПересчитатьИтогиГрупп();
КонецПроцедуры

&НаСервере
Процедура ПереносВТовараНетСервер(СтрокаЗамена)
	
	НоваяСтрока = ТовараНет.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗамена);
	ПоследнийИД = ПоследнийИД + 1;
	НоваяСтрока.ИД = ПоследнийИД;
	
	СоздатьКарточкуТовараНаФорме("ТовараНет", НоваяСтрока.ИД, Элементы.ТовараНет);
	
КонецПроцедуры

&НаСервере
Процедура ПереносВВернутьНаПолкуСервер(СтрокаЗамена)
	
	НоваяСтрока = ВернутьНаПолку.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗамена);
	ПоследнийИД = ПоследнийИД + 1;
	НоваяСтрока.ИД = ПоследнийИД;
	
	СоздатьКарточкуТовараНаФорме("ВернутьНаПолку", НоваяСтрока.ИД, Элементы.ВернутьНаПолкуГруппа);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьДанныеТекущейСтроки(ТекущаяСтрока)
	
	Структура = Новый Структура;
	
	Структура.Вставить("Номенклатура", ТекущаяСтрока.Номенклатура1);
	Структура.Вставить("Количество", ТекущаяСтрока.Количество1);
	Структура.Вставить("Цена", ТекущаяСтрока.Цена1);
	Структура.Вставить("Группа", ТекущаяСтрока.Группа1);
	Структура.Вставить("ИД", ТекущаяСтрока.ИД1);
	Структура.Вставить("КоличествоСтрок", ТекущаяСтрока.КоличествоСтрок1);
	Структура.Вставить("Артикул", ТекущаяСтрока.Артикул1);
	Структура.Вставить("Штрихкод", ТекущаяСтрока.Штрихкод1);
	Структура.Вставить("Вес", ТекущаяСтрока.Вес1);
	Структура.Вставить("ВесЕдиницаИзмерения", ТекущаяСтрока.ВесЕдиницаИзмерения1);
	Структура.Вставить("Упаковка", ТекущаяСтрока.Упаковка1);
	Структура.Вставить("Характеристика", ТекущаяСтрока.Характеристика1);
	Структура.Вставить("ФайлКартинки", ТекущаяСтрока.ФайлКартинки1);
	Структура.Вставить("СрокГодности", ТекущаяСтрока.СрокГодности1);
	Структура.Вставить("ЕдиницаИзмеренияСрокаГодности", ТекущаяСтрока.ЕдиницаИзмеренияСрокаГодности1);
	Структура.Вставить("ВидЦены", ТекущаяСтрока.ВидЦены1);
	
	Возврат Структура;
	
КонецФункции

&НаКлиенте
Функция ПолучитьДанныеТекущейСтроки2(ТекущаяСтрока)
	
	Структура = Новый Структура;
	
	Структура.Вставить("Номенклатура", ТекущаяСтрока.Номенклатура);
	Структура.Вставить("Количество", ТекущаяСтрока.Количество);
	Структура.Вставить("Цена", ТекущаяСтрока.Цена);
	Структура.Вставить("Группа", ТекущаяСтрока.Группа);
	Структура.Вставить("ИД", ТекущаяСтрока.ИД);
	Структура.Вставить("КоличествоСтрок", ТекущаяСтрока.КоличествоСтрок);
	Структура.Вставить("Артикул", ТекущаяСтрока.Артикул);
	Структура.Вставить("Штрихкод", ТекущаяСтрока.Штрихкод);
	Структура.Вставить("Вес", ТекущаяСтрока.Вес);
	Структура.Вставить("ВесЕдиницаИзмерения", ТекущаяСтрока.ВесЕдиницаИзмерения);
	Структура.Вставить("Упаковка", ТекущаяСтрока.Упаковка);
	Структура.Вставить("Характеристика", ТекущаяСтрока.Характеристика);
	Структура.Вставить("ФайлКартинки", ТекущаяСтрока.ФайлКартинки);
	Структура.Вставить("СрокГодности", ТекущаяСтрока.СрокГодности);
	Структура.Вставить("ЕдиницаИзмеренияСрокаГодности", ТекущаяСтрока.ЕдиницаИзмеренияСрокаГодности);
	Структура.Вставить("ВидЦены", ТекущаяСтрока.ВидЦены);
	
	Возврат Структура;
	
КонецФункции

&НаКлиенте
Процедура ПоискТовараПоШтрихкоду()
	
	Если ТекущаяФорма = "ФормаРабочийСтол" Тогда
		
		ПараметрыОтбора = Новый Структура("Штрихкод", Штрихкод);
		
		МассивСтрок = КСборке.НайтиСтроки(ПараметрыОтбора);
		Если МассивСтрок.Количество() > 0 Тогда
			
			ИД = МассивСтрок[0].ИД;
			ОткрытьКарточкуТовара("КСборке");
			
		Иначе
			
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДобавитьТовар", ЭтотОбъект, Параметры);
			ПоказатьВопрос(Оповещение, НСтр("ru = 'Товар не найден в заказе, добавить новый?'"), Режим, 0);
			
		КонецЕсли;
		
	ИначеЕсли ТекущаяФорма = "ФормаПоискПоШтрихкоду" Тогда
		
		НайтиТоварПоШК();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаДобавитьТовар(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	Иначе 
		Элементы.ФормаРабочийСтол.Видимость = Ложь;
		Элементы.ФормаПоискПоШтрихкоду.Видимость = Истина;
		НайтиТоварПоШК();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗакончитьСборку(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	Иначе 
		ЗакончитьСборкуНаСервере();
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗакончитьСборкуНаСервере()
	
	СтруктураЗаказ = Новый Структура;
	СтруктураЗаказ.Вставить("Собрано", Собрано.Выгрузить());
	СтруктураЗаказ.Вставить("ТовараНет", ТовараНет.Выгрузить());
	
	Обработки.МобильноеРабочееМестоСборкиИКурьерскойДоставки.УстановитьСтатусРаспоряженияСобран(Заказ, СтруктураЗаказ);
	
КонецПроцедуры

#КонецОбласти