#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("Распоряжение", Распоряжение);
	ПоказыватьФотоТоваров = Параметры.ПоказыватьФотоТоваров;
	
	УстановитьУсловноеОформление();
	Сотрудник = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователи.ТекущийПользователь(), "ФизическоеЛицо");
	ТипСотрудника = Обработки.МобильноеРабочееМестоСборкиИКурьерскойДоставки.ТипСотрудникаКурьер();
	ОбновитьДанныеФормы();
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОформитьМеню();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтменитьРаспоряжение(Команда)

	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("Распоряжение", Распоряжение);
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОтменитьРаспоряжениеЗавершение", ЭтаФорма);
		
	ОткрытьФорму(
		"Обработка.МобильноеРабочееМестоСборкиИКурьерскойДоставки.Форма.ВыборПричиныОтмены",
		ПараметрыОткрытияФормы,
		ЭтаФорма,,,,
		ОписаниеОповещенияОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры
	
&НаКлиенте
Процедура ВыполнитьКомандуПоПроцессу(Команда)
	
	Если ТекущееДействие = "ЗавершитьДоставку" Тогда
		ЗавершитьДоставку(Распоряжение);
		Оповестить("ОбновитьСписокРаспоряжений");
	ИначеЕсли ТекущееДействие = "ПринятьОплату" Тогда
		ПринятьОплату();
	ИначеЕсли ТекущееДействие = "ОформитьЧек" Тогда
		ОформитьЧек(Распоряжение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПоказатьАдресДоставкиНажатие(Элемент)
	
	ПоказатьКарту(АдресДоставкиПредставление);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПоказатьАдресМагазинаНажатие(Элемент)
	
	АдресМагазина = АдресПредставлениеВладельца(Склад);
	ПоказатьКарту(АдресМагазина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПозвонитьПокупателюНажатие(Элемент)
	
	ПозвонитьПоТелефону("Покупатель");
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПозвонитьСборщикуНажатие(Элемент)
	
	ПозвонитьПоТелефону("Сборщик", Сборщик);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПозвонитьКурьеруНажатие(Элемент)
	
	ПозвонитьПоТелефону("Курьер", Курьер);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПозвонитьДиспетчеруНажатие(Элемент)
	
	ПозвонитьПоТелефону("Склад", Склад);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПерейтиНаИнформация(Команда)
	
	Если ТекущаяВкладка = 1 Тогда
		ПерейтиНаВкладку(0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаТовары(Команда)
	
	Если НЕ ТоварыЗагружены Тогда
		ЗаполнитьТовары();
		СформироватьТаблицыГрупп();
		ПрограммноеФормированиеИнтерфейса();
	КонецЕсли;
	
	ТоварыЗагружены = Истина;
	
	Если ТекущаяВкладка = 0 Тогда
		ПерейтиНаВкладку(1);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИерархию(Команда)
	
	ИспользоватьГруппировку = НЕ ИспользоватьГруппировку;
	
	ПрограммноеФормированиеИнтерфейса();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьВидимость()
	
	ДоступныКомандыДоставки = ДоступныКомандыДоставки();
	Элементы.ГруппаПодвал.Видимость = ДоступныКомандыДоставки;
	Элементы.ГруппаКомандаОтменить.Видимость = ДоступныКомандыДоставки;
	Элементы.ГруппаИнформацияСборщик.Видимость = ЗначениеЗаполнено(Сборщик);
	Элементы.ГруппаИнформацияРамка8.Видимость = ЗначениеЗаполнено(Сборщик);
	Элементы.ГруппаИнформацияКурьер.Видимость = ЗначениеЗаполнено(Курьер);
	Элементы.ГруппаИнформацияОплата.Видимость = (СуммаКОплате>0);
	Элементы.ГруппаИнформацияРамка2.Видимость = (СуммаКОплате>0);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
КонецПроцедуры

&НаСервере
Функция ДоступныКомандыДоставки()
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователи.ТекущийПользователь(), "ФизическоеЛицо") = Курьер
			И СкладыСервер.СтатусыРаспоряженийПриДоставкеКурьером().Найти(Статус) <> Неопределено;

КонецФункции

&НаСервере
Процедура ОбновитьДанныеФормы()
	
	Модуль = Обработки.МобильноеРабочееМестоСборкиИКурьерскойДоставки;
	
	Запрос = Новый Запрос();
	ТекстЗапроса = "ВЫБРАТЬ
	|	СтатусыСборкиИДоставки.Распоряжение КАК Распоряжение,
	|	СтатусыСборкиИДоставки.Статус КАК Статус,
	|	Документы.Склад КАК Склад,
	|	Документы.Курьер КАК Курьер,
	|	Документы.Номер КАК Номер,
	|	Документы.ДатаОтгрузки КАК ДатаДоставки,
	|	Документы.ВремяДоставкиС КАК ВремяДоставкиС,
	|	Документы.ВремяДоставкиПо КАК ВремяДоставкиПо,
	|	Документы.СуммаДокумента КАК СуммаДокумента,
	|	Документы.АдресДоставки КАК АдресДоставкиПредставление,
	|	Документы.АдресДоставкиЗначенияПолей КАК АдресДоставкиЗначенияПолей,
	|	Документы.ДополнительнаяИнформацияПоДоставке КАК Комментарий,
	|	Документы.Валюта КАК Валюта,
	|	Документы.ФормаОплаты КАК ФормаОплаты,
	|	ВЫБОР
	|		КОГДА Документы.КонтактноеЛицо = ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка)
	|			ТОГДА Партнеры.Наименование
	|		ИНАЧЕ КонтактныеЛица.Наименование
	|	КОНЕЦ КАК КонтактноеЛицоПредставление,
	|	Документы.Сборщик КАК Сборщик,
	|	Документы.Курьер.Наименование КАК КурьерНаименование,
	|	Документы.Сборщик.Наименование КАК СборщикНаименование,
	|	Документы.Склад.Наименование КАК СкладНаименование,
	|	Документы.Организация КАК Организация
	|ПОМЕСТИТЬ ВременнаяТаблицаРаспоряжения
	|ИЗ
	|	РегистрСведений.СтатусыСборкиИДоставки КАК СтатусыСборкиИДоставки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК Документы
	|		ПО ВЫРАЗИТЬ(СтатусыСборкиИДоставки.Распоряжение КАК Документ.ЗаказКлиента) = Документы.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛица
	|		ПО Документы.КонтактноеЛицо = КонтактныеЛица.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
	|		ПО Документы.Партнер = Партнеры.Ссылка
	|ГДЕ
	|	Документы.Ссылка = &Ссылка
	|	И Документы.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СтатусыСборкиИДоставки.Распоряжение,
	|	СтатусыСборкиИДоставки.Статус,
	|	Документы.Склад,
	|	Документы.Курьер,
	|	Документы.Номер,
	|	Документы.Дата,
	|	Документы.ВремяДоставкиС,
	|	Документы.ВремяДоставкиПо,
	|	Документы.СуммаДокумента,
	|	Документы.АдресДоставки,
	|	Документы.АдресДоставкиЗначенияПолей,
	|	Документы.ДополнительнаяИнформацияПоДоставке,
	|	Документы.Валюта,
	|	Документы.ФормаОплаты,
	|	ВЫБОР
	|		КОГДА Документы.КонтактноеЛицо = ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка)
	|			ТОГДА Партнеры.Наименование
	|		ИНАЧЕ КонтактныеЛица.Наименование
	|	КОНЕЦ,
	|	Документы.Сборщик,
	|	Документы.Курьер.Наименование,
	|	Документы.Сборщик.Наименование,
	|	Документы.Склад.Наименование,
	|	Документы.Организация
	|ИЗ
	|	РегистрСведений.СтатусыСборкиИДоставки КАК СтатусыСборкиИДоставки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК Документы
	|		ПО ВЫРАЗИТЬ(СтатусыСборкиИДоставки.Распоряжение КАК Документ.РеализацияТоваровУслуг) = Документы.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛица
	|		ПО Документы.КонтактноеЛицо = КонтактныеЛица.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
	|		ПО Документы.Партнер = Партнеры.Ссылка
	|ГДЕ
	|	Документы.Ссылка = &Ссылка
	|	И Документы.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Кассы.Владелец КАК Организация,
	|	Кассы.Ссылка КАК Касса
	|ПОМЕСТИТЬ ВременннаяТаблицаКассы
	|ИЗ
	|	ВременнаяТаблицаРаспоряжения КАК ТаблицаРаспоряжения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Кассы КАК Кассы
	|		ПО ТаблицаРаспоряжения.Организация = Кассы.Владелец
	|ГДЕ
	|	Кассы.ПометкаУдаления = ЛОЖЬ
	|	И Кассы.ОперационнаяКасса = ИСТИНА
	|	И Кассы.ФизическоеЛицо = &Сотрудник
	|СГРУППИРОВАТЬ ПО
	|	Кассы.Владелец,
	|	ТаблицаРаспоряжения.Статус,
	|	Кассы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРаспоряжения.Распоряжение КАК Распоряжение,
	|	ТаблицаРаспоряжения.Статус КАК Статус,
	|	СУММА(ЕСТЬNULL(РасчетыСКлиентами.КОплатеОстаток, 0)) КАК СуммаКОплате
	|ПОМЕСТИТЬ ВременнаяТаблицаКОплатеПромежуточная
	|ИЗ
	|	ВременнаяТаблицаРаспоряжения КАК ТаблицаРаспоряжения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Остатки(, ОбъектРасчетов.Объект = &Ссылка) КАК
	|			РасчетыСКлиентами
	|		ПО ТаблицаРаспоряжения.Распоряжение = РасчетыСКлиентами.ОбъектРасчетов.Объект
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаРаспоряжения.Распоряжение,
	|	ТаблицаРаспоряжения.Статус
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаКОплате.Распоряжение КАК Распоряжение,
	|	ВременнаяТаблицаКОплате.СуммаКОплате КАК СуммаКОплате,
	|	СУММА(ВЫБОР
	|		КОГДА ДенежныеСредстваНаличные.Касса = ТаблицаКассы.Касса
	|		И НЕ ВременнаяТаблицаКОплате.Статус В (&Доставлен)
	|			ТОГДА ВЫБОР
	|				КОГДА ДенежныеСредстваНаличные.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					ТОГДА ДенежныеСредстваНаличные.Сумма
	|				ИНАЧЕ -ДенежныеСредстваНаличные.Сумма
	|			КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК СуммаКОплатеКурьер
	|ПОМЕСТИТЬ ВременнаяТаблицаКОплате
	|ИЗ
	|	ВременнаяТаблицаКОплатеПромежуточная КАК ВременнаяТаблицаКОплате
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваНаличные КАК ДенежныеСредстваНаличные
	|		ПО ВременнаяТаблицаКОплате.Распоряжение = ДенежныеСредстваНаличные.ОбъектРасчетов.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременннаяТаблицаКассы КАК ТаблицаКассы
	|		ПО ДенежныеСредстваНаличные.Организация = ТаблицаКассы.Организация
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяТаблицаКОплате.Распоряжение,
	|	ВременнаяТаблицаКОплате.СуммаКОплате
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документы.Распоряжение КАК Распоряжение,
	|	Документы.Статус КАК Статус,
	|	Документы.Склад КАК Склад,
	|	Документы.Курьер КАК Курьер,
	|	Документы.Номер КАК Номер,
	|	Документы.ДатаДоставки КАК ДатаДоставки,
	|	Документы.ВремяДоставкиС КАК ВремяДоставкиС,
	|	Документы.ВремяДоставкиПо КАК ВремяДоставкиПо,
	|	Документы.СуммаДокумента КАК СуммаДокумента,
	|	Документы.АдресДоставкиПредставление КАК АдресДоставкиПредставление,
	|	Документы.АдресДоставкиЗначенияПолей КАК АдресДоставкиЗначенияПолей,
	|	Документы.Комментарий КАК Комментарий,
	|	Документы.Валюта КАК Валюта,
	|	Документы.ФормаОплаты КАК ФормаОплаты,
	|	Документы.КонтактноеЛицоПредставление КАК КонтактноеЛицоПредставление,
	|	Документы.Сборщик КАК Сборщик,
	|	Документы.КурьерНаименование КАК КурьерНаименование,
	|	Документы.СборщикНаименование КАК СборщикНаименование,
	|	Документы.СкладНаименование КАК СкладНаименование,
	|	Документы.Организация КАК Организация,
	|	ТаблицаКОплате.СуммаКОплате + ТаблицаКОплате.СуммаКОплатеКурьер КАК СуммаКОплате
	|ИЗ
	|	ВременнаяТаблицаРаспоряжения КАК Документы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКОплате КАК ТаблицаКОплате
	|		ПО Документы.Распоряжение = ТаблицаКОплате.Распоряжение
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДоставки,
	|	ВремяДоставкиПо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВременнаяТаблицаРаспоряжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВременннаяТаблицаКассы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВременнаяТаблицаКОплатеПромежуточная
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВременнаяТаблицаКОплате
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия,
	|	Товары.КоличествоУпаковок КАК Количество,
	|	Товары.Упаковка КАК Упаковка,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ЕдиницаИзмерения,
	|	Товары.КоличествоУпаковок * &ТекстЗапросаВесУпаковки КАК Вес,
	|	&ТекстЗапросаВесУпаковки КАК ВесУпаковки,
	|	Товары.Сумма / Товары.КоличествоУпаковок КАК Цена,
	|	Товары.СуммаСНДС КАК СуммаСНДС,
	|	Товары.Номенклатура.ФайлКартинки КАК ФайлКартинки,
	|	ВЫБОР
	|		КОГДА
	|			СправочникНоменклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВесовойТовар,
	|	СправочникНоменклатура.Наименование КАК НоменклатураПредставление
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК СправочникВидыНоменклатуры
	|		ПО СправочникНоменклатура.ВидНоменклатуры = СправочникВидыНоменклатуры.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|		ПО Товары.Упаковка = УпаковкиЕдиницыИзмерения.Ссылка
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И Товары.Ссылка.Проведен
	|	И НЕ Товары.Отменено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	Товары.КоличествоУпаковок,
	|	Товары.Упаковка,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения,
	|	Товары.КоличествоУпаковок * &ТекстЗапросаВесУпаковки,
	|	&ТекстЗапросаВесУпаковки,
	|	Товары.Сумма / Товары.КоличествоУпаковок,
	|	Товары.СуммаСНДС,
	|	Товары.Номенклатура.ФайлКартинки КАК ФайлКартинки,
	|	ВЫБОР
	|		КОГДА
	|			СправочникНоменклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	СправочникНоменклатура.Наименование
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК СправочникВидыНоменклатуры
	|		ПО СправочникНоменклатура.ВидНоменклатуры = СправочникВидыНоменклатуры.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|		ПО Товары.Упаковка = УпаковкиЕдиницыИзмерения.Ссылка
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И Товары.Ссылка.Проведен";
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("Ссылка", Распоряжение);
	Запрос.УстановитьПараметр("Доставлен", СкладыСервер.СтатусыРаспоряженийЗавершенных());
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
		"&ТекстЗапросаВесУпаковки", 
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(
			"УпаковкиЕдиницыИзмерения", 
			"СправочникНоменклатура"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	
	Запрос.Текст = ТекстЗапроса;
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Товары.Очистить();
	
	Если Результаты[4].Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПоЗаказу = Результаты[4].Выгрузить()[0];
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, ДанныеПоЗаказу);
	
	ДатаВремяДоставкиПредставление = Модуль.ДатаВремяДоставкиПредставление(ЭтаФорма);
	ОсталосьВремениНаДоставку = Модуль.ОсталосьВремениНаДоставку(ЭтаФорма);
	СуммаДокументаПредставление = Модуль.СуммаПредставление(ЭтаФорма);
	
	Если СуммаКОплате > 0 Тогда
		СуммаКОплатеПредставление = Модуль.СуммаКОплатеПредставление(ЭтаФорма);
		ФормаОплатыПредставление = Модуль.ФормаОплатыПредставление(ЭтаФорма);
	Иначе
		СуммаКОплатеПредставление = "Оплачено";
		ФормаОплатыПредставление = "";
	КонецЕсли;
	
	ТоварыРаспоряжения = Результаты[9].Выгрузить();
	Элементы.КомандаТовары.Заголовок = СтрШаблон(НСтр("ru='Товары (%1)'"), ТоварыРаспоряжения.Количество());
		
	КоличествоПозиций = ТоварыРаспоряжения.Количество();
	Вес = ТоварыРаспоряжения.Итог("Вес");
	ВесПредставление = Модуль.ВесПредставление(Вес);
	
	Элементы.ДекорацияНомер.Заголовок = Новый ФорматированнаяСтрока(ДанныеПоЗаказу.Номер,
		ШрифтыСтиля.ШрифтТекстаВыделенныйСборкаИДоставка,
		ЦветаСтиля.ЦветТекстаОсновнойСборкаИДоставка);
		
	Элементы.ДекорацияСтатус.Заголовок = Новый ФорматированнаяСтрока(Строка(ДанныеПоЗаказу.Статус),
		ШрифтыСтиля.ШрифтТекстаСборкаИДоставка,
		?(Модуль.ЭтоЗавершенныйСтатус(Статус),
			ЦветаСтиля.ЦветТекстаСтатусаЗавершенСборкаИДоставка,
			ЦветаСтиля.ЦветТекстаСтатусаВРаботеСборкаИДоставка));
		
	Элементы.ДекорацияДатаВремяДоставкиПредставление.Заголовок = Новый ФорматированнаяСтрока(ДатаВремяДоставкиПредставление,
		ШрифтыСтиля.ШрифтТекстаВыделенныйСборкаИДоставка, 
		ЦветаСтиля.ЦветТекстаОсновнойСборкаИДоставка);
	
	Элементы.ДекорацияОсталосьВремениНаДоставку.Заголовок = Новый ФорматированнаяСтрока(ОсталосьВремениНаДоставку,
		ШрифтыСтиля.ШрифтТекстаУменьшенныйСборкаИДоставка,
		?(Опоздание, ЦветаСтиля.ЦветТекстаОтрицательныхЗначений, ЦветаСтиля.ЦветТекстаОсновнойСборкаИДоставка));
	
	Элементы.ДекорацияАдресДоставки.Заголовок = Новый ФорматированнаяСтрока(АдресДоставкиПредставление,
		ШрифтыСтиля.ШрифтТекстаСборкаИДоставка,
		ЦветаСтиля.ЦветТекстаОсновнойСборкаИДоставка);
		
	Элементы.ДекорацияКонтактноеЛицо.Заголовок = Новый ФорматированнаяСтрока(КонтактноеЛицоПредставление,
		ШрифтыСтиля.ШрифтТекстаСборкаИДоставка,
		ЦветаСтиля.ЦветТекстаОсновнойСборкаИДоставка);
		
	Элементы.ДекорацияСуммаКОплатеПредставление.Заголовок = Новый ФорматированнаяСтрока(СуммаКОплатеПредставление,
		ШрифтыСтиля.ШрифтТекстаВыделенныйСборкаИДоставка,
		ЦветаСтиля.ЦветТекстаОсновнойСборкаИДоставка);
		
	Элементы.ДекорацияФормаОплаты.Заголовок = Новый ФорматированнаяСтрока(ФормаОплатыПредставление,
		ШрифтыСтиля.ШрифтТекстаСборкаИДоставка,
		ЦветаСтиля.ЦветТекстаОсновнойСборкаИДоставка);
		
	Элементы.ДекорацияКомментарий.Заголовок = Новый ФорматированнаяСтрока(Комментарий, 
		ШрифтыСтиля.ШрифтТекстаСборкаИДоставка,
		ЦветаСтиля.ЦветТекстаОсновнойСборкаИДоставка);
		
	Элементы.ДекорацияКоличествоПозиций.Заголовок = Новый ФорматированнаяСтрока(Формат(КоличествоПозиций, "ЧГ=0"),
		ШрифтыСтиля.ШрифтТекстаСборкаИДоставка,
		ЦветаСтиля.ЦветТекстаОсновнойСборкаИДоставка);
		
	Элементы.ДекорацияВес.Заголовок = Новый ФорматированнаяСтрока(ВесПредставление,
		ШрифтыСтиля.ШрифтТекстаСборкаИДоставка,
		ЦветаСтиля.ЦветТекстаОсновнойСборкаИДоставка);
	
	Элементы.ДекорацияСуммаДокумента.Заголовок = Новый ФорматированнаяСтрока(СуммаДокументаПредставление,
		ШрифтыСтиля.ШрифтТекстаСборкаИДоставка,
		ЦветаСтиля.ЦветТекстаОсновнойСборкаИДоставка);
		
	Элементы.ДекорацияМагазинПредставление.Заголовок = Новый ФорматированнаяСтрока(ДанныеПоЗаказу.СкладНаименование,
		ШрифтыСтиля.ШрифтТекстаСборкаИДоставка,
		ЦветаСтиля.ЦветТекстаОсновнойСборкаИДоставка);
		
	Если ЗначениеЗаполнено(Сборщик) Тогда
		Элементы.ДекорацияСборщик.Заголовок = Новый ФорматированнаяСтрока(ДанныеПоЗаказу.СборщикНаименование,
			ШрифтыСтиля.ШрифтТекстаСборкаИДоставка,
			ЦветаСтиля.ЦветТекстаОсновнойСборкаИДоставка);
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Курьер) Тогда
		Элементы.ДекорацияКурьер.Заголовок = Новый ФорматированнаяСтрока(ДанныеПоЗаказу.КурьерНаименование,
			ШрифтыСтиля.ШрифтТекстаСборкаИДоставка,
			ЦветаСтиля.ЦветТекстаОсновнойСборкаИДоставка);
	КонецЕсли;
		
	ПереопределитьТекущуюКомандуПоПроцессу();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКарту(АдресПредставление)
	
	Если Не ЗначениеЗаполнено(АдресПредставление) Тогда
		ТекстОшибки = НСтр("ru='Не указан адрес.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
 
#Если МобильныйКлиент Тогда
	СписокМестоположений = Новый СписокЗначений;
	СписокМестоположений.Добавить(ПолучитьКоординатыАдреса(АдресПредставление)); 
	ПоказатьНаКарте(СписокМестоположений);
 #КонецЕсли
	 
 КонецПроцедуры

&НаКлиенте
Функция ПолучитьКоординатыАдреса(АдресПредставление)
	
	Координаты = Новый Структура();
	
#Если МобильныйКлиент Тогда
		
	Координаты = Неопределено;
	СтруктураДанныхАдреса = Новый Структура();
	СтруктураДанныхАдреса.Вставить("Представление", АдресПредставление);
	
	ДанныеАдреса = Новый ДанныеАдреса(СтруктураДанныхАдреса);
	Координаты = ПолучитьМестоположениеПоАдресу(ДанныеАдреса);
	
 #КонецЕсли
	 
	Возврат Координаты;
	
КонецФункции

&НаСервере
Функция НомерТелефонаКонтактногоЛицаИзДокумента(Распоряжение)
	
	Возврат Обработки.МобильноеРабочееМестоСборкиИКурьерскойДоставки.НомерТелефонаКонтактногоЛицаИзДокумента(Распоряжение);
	
КонецФункции

&НаСервере
Функция НомерТелефонаКонтактногоЛица(КонтактноеЛицо)
	
	Возврат Обработки.МобильноеРабочееМестоСборкиИКурьерскойДоставки.НомерТелефонаКонтактногоЛица(КонтактноеЛицо);

КонецФункции

&НаКлиенте
Процедура ПозвонитьПоТелефону(ТипАбонента, Абонент = Неопределено)
	
#Если МобильныйКлиент Тогда
		
	Если Не СредстваТелефонии.ПоддерживаетсяНаборНомера() Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипАбонента = "Покупатель" Тогда
		НомерТелефона = НомерТелефонаКонтактногоЛицаИзДокумента(Распоряжение);
	Иначе
		НомерТелефона = НомерТелефонаКонтактногоЛица(Абонент);
	КонецЕсли;
	
	Если НомерТелефона <> "" Тогда
		СредстваТелефонии.НабратьНомер(НомерТелефона, Ложь);
	Иначе
		ТекстОшибки = НСтр("ru='Не указан номер телефона.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		Ошибка = Истина;
	КонецЕсли;
	
#КонецЕсли
	
КонецПроцедуры

&НаСервере
Функция АдресПредставлениеВладельца(Владелец)
	
	Возврат Обработки.МобильноеРабочееМестоСборкиИКурьерскойДоставки.АдресПредставлениеВладельца(Владелец);
	
КонецФункции

&НаКлиенте
Процедура ПерейтиНаВкладку(КодВкладки = 0)
	
	ТекущаяВкладка = КодВкладки;
	ОформитьМеню();
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьМеню()
	
	Если ТекущаяВкладка = 0 Тогда
		
		ИмяЭлементаРамка    = "РамкаИнформация";
		ИмяЭлементаКоманда  = "КомандаИнформация";
		ИмяЭлементаСтраница = "СтраницаИнформация";

	Иначе
			
		ИмяЭлементаРамка    = "РамкаТовары";
		ИмяЭлементаКоманда  = "КомандаТовары";
		ИмяЭлементаСтраница = "СтраницаТовары";
		
	КонецЕсли;
	
	Элементы.РамкаИнформация.Картинка = БиблиотекаКартинок.РамкаМенюБелая;
	Элементы.КомандаИнформация.ЦветТекста = WebЦвета.ТемноСерый;
	
	Элементы.РамкаТовары.Картинка = БиблиотекаКартинок.РамкаМенюБелая;
	Элементы.КомандаТовары.ЦветТекста = WebЦвета.ТемноСерый;
	
	Элементы[ИмяЭлементаРамка].Картинка = БиблиотекаКартинок.РамкаМенюЧерная;
	Элементы[ИмяЭлементаКоманда].ЦветТекста = WebЦвета.Черный;
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы[ИмяЭлементаСтраница];
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьРаспоряжениеЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьФормуРаспоряжения();
	Оповестить("ОбновитьСписокРаспоряжений");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФормуРаспоряжения()
	
	ОбновитьДанныеФормы();
	
	ЗаполнитьТовары();
	СформироватьТаблицыГрупп();
	ПрограммноеФормированиеИнтерфейса();
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаСервере
Процедура ПереопределитьТекущуюКомандуПоПроцессу()
	
	Обработки.МобильноеРабочееМестоСборкиИКурьерскойДоставки.ПереопределитьТекущуюКомандуПоПроцессу(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьДоставку(Распоряжение)
	
	Модуль = Обработки.МобильноеРабочееМестоСборкиИКурьерскойДоставки;
	Модуль.ЗавершитьДоставку(Распоряжение);
	ОбновитьФормуРаспоряжения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьОплату()
	
	ДоступныеСпособыОплаты = ДоступныеСпособыОплатыЗаказа(Распоряжение);
	
	Если ДоступныеСпособыОплаты.Количество() = 0 Тогда
		
		ТекстОшибки = НСтр("ru='Не доступен ни один способ приема оплаты.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		Возврат;
		
	ИначеЕсли ДоступныеСпособыОплаты.Количество() = 1 Тогда
		
		ОткрытьФормуСпособаОплаты(ДоступныеСпособыОплаты[0].Значение);
		
	Иначе
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("ДоступныеСпособыОплаты", ДоступныеСпособыОплаты);
		ПараметрыОткрытияФормы.Вставить("ФормаОплаты", ФормаОплаты);
		ПараметрыОткрытияФормы.Вставить("СуммаКОплате", СуммаКОплате);
		ПараметрыОткрытияФормы.Вставить("Валюта", Валюта);
		ПараметрыОткрытияФормы.Вставить("Склад", Склад);
		
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ВыборСпособаОплатыЗавершение", ЭтаФорма);
			
		ОткрытьФорму(
			"Обработка.МобильноеРабочееМестоСборкиИКурьерскойДоставки.Форма.ВыборСпособаОплаты",
			ПараметрыОткрытияФормы,
			ЭтаФорма,,,,
			ОписаниеОповещенияОЗакрытии,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборСпособаОплатыЗавершение(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОткрытьФормуСпособаОплаты(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСпособаОплатыЗавершение(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено
		И Результат = Истина Тогда
		Оповестить("ОбновитьСписокРаспоряжений");
	КонецЕсли;
	
	ОбновитьФормуРаспоряжения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСпособаОплаты(СпособОплаты)

	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("Распоряжение", Распоряжение);
	ПараметрыОткрытияФормы.Вставить("СуммаКОплате", СуммаКОплате);
	ПараметрыОткрытияФормы.Вставить("Валюта", Валюта);
	ПараметрыОткрытияФормы.Вставить("Склад", Склад);
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОткрытьФормуСпособаОплатыЗавершение", ЭтаФорма);
		
	ОткрытьФорму(
		"Обработка.МобильноеРабочееМестоСборкиИКурьерскойДоставки.Форма.Оплата" + СпособОплаты,
		ПараметрыОткрытияФормы,
		ЭтаФорма,,,,
		ОписаниеОповещенияОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаСервере
Функция ДоступныеСпособыОплатыЗаказа(Распоряжение)
	
	Модуль = Обработки.МобильноеРабочееМестоСборкиИКурьерскойДоставки;
	Возврат Модуль.ДоступныеСпособыОплатыЗаказа(ЭтаФорма);
	
КонецФункции

&НаСервере
Процедура ОформитьЧек(Распоряжение)
	
	Модуль = Обработки.МобильноеРабочееМестоСборкиИКурьерскойДоставки;
	
	Отказ = Ложь;
	Модуль.ОформитьЧек(Распоряжение, Отказ);
	
	Если Не Отказ Тогда
		Модуль.ЗавершитьДоставку(Распоряжение);
	КонецЕсли;
	
	ОбновитьФормуРаспоряжения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФорму(Команда)

	ОбновитьФормуРаспоряжения();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТовары()
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	Обработки.МобильноеРабочееМестоСборкиИКурьерскойДоставки.ТаблицаТовары(Распоряжение, АдресХранилища);
	Товары.Загрузить(ПолучитьИзВременногоХранилища(АдресХранилища));
	
	Сч = 1;
	Для Каждого Строка Из Товары Цикл
		Строка.ИД = Сч;
		Сч = Сч + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКарточкуТовараНаФорме(ИмяРаздела, ИДТовара, Родитель)
	
	ПараметрыОтбора = Новый Структура("ИД", ИДТовара);
	МассивСтрок = ЭтаФорма[ИмяРаздела].НайтиСтроки(ПараметрыОтбора);
	
	СтрокаЗаказа = Неопределено;
	Если МассивСтрок.Количество() > 0 Тогда
		СтрокаЗаказа = МассивСтрок[0];
	Иначе
		Возврат;
	КонецЕсли;
	
	// КАРТОЧКА ТОВАРА
	КарточкаТовара = Элементы.Добавить("КарточкаТовара" + ИмяРаздела + ИДТовара, Тип("ГруппаФормы"), Родитель);
	КарточкаТовара.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
	КарточкаТовара.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная; 
	КарточкаТовара.ОтображатьЗаголовок = Ложь;
	
	// КАРТОЧКА ТОВАРА 2 Без отступов
	КарточкаТовараКонтейнер = Элементы.Добавить("КарточкаТовара2" + ИмяРаздела + ИДТовара, Тип("ГруппаФормы"), КарточкаТовара);
	КарточкаТовараКонтейнер.Вид                = ВидГруппыФормы.ОбычнаяГруппа;
	КарточкаТовараКонтейнер.Группировка        = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда; 
	КарточкаТовараКонтейнер.ОтображатьЗаголовок = Ложь;
	
	// КАРТОЧКА ТОВАРА Левая часть
	КарточкаТовараЛеваяЧасть = Элементы.Добавить("КарточкаТовараЛев" + ИмяРаздела + ИДТовара, Тип("ГруппаФормы"), КарточкаТовараКонтейнер);
	КарточкаТовараЛеваяЧасть.Вид                = ВидГруппыФормы.ОбычнаяГруппа;
	КарточкаТовараЛеваяЧасть.Группировка        = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда; 
	КарточкаТовараЛеваяЧасть.ОтображатьЗаголовок = Ложь;
	КарточкаТовараЛеваяЧасть.Ширина = 4;
	
	// КАРТОЧКА ТОВАРА Правая часть
	КарточкаТовараПраваяЧасть = Элементы.Добавить("КарточкаТовараПрав" + ИмяРаздела + ИДТовара, Тип("ГруппаФормы"), КарточкаТовараКонтейнер);
	КарточкаТовараПраваяЧасть.Вид                = ВидГруппыФормы.ОбычнаяГруппа;
	КарточкаТовараПраваяЧасть.Группировка        = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная; 
	КарточкаТовараПраваяЧасть.ОтображатьЗаголовок = Ложь;
	
	// КАРТОЧКА ТОВАРА Верхняя область
	КарточкаТовараВерх = Элементы.Добавить("КарточкаТовараПравВерх" + ИмяРаздела + ИДТовара, Тип("ГруппаФормы"), КарточкаТовараПраваяЧасть);
	КарточкаТовараВерх.Вид                = ВидГруппыФормы.ОбычнаяГруппа;
	КарточкаТовараВерх.Группировка        = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда; 
	КарточкаТовараВерх.ОтображатьЗаголовок = Ложь;
	КарточкаТовараВерх.Отображение = ОтображениеОбычнойГруппы.Нет;
	
	// КАРТОЧКА ТОВАРА Нижняя область
	КарточкаТовараНиз = Элементы.Добавить("КарточкаТовараПравНиз" + ИмяРаздела + ИДТовара, Тип("ГруппаФормы"), КарточкаТовараПраваяЧасть);
	КарточкаТовараНиз.Вид                = ВидГруппыФормы.ОбычнаяГруппа;
	КарточкаТовараНиз.Группировка        = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда; 
	КарточкаТовараНиз.ОтображатьЗаголовок = Ложь;
	КарточкаТовараНиз.Отображение = ОтображениеОбычнойГруппы.Нет;
	КарточкаТовараНиз.РастягиватьПоГоризонтали = Истина;
	
	// ФОТО ТОВАРА
	Если ПоказыватьФотоТоваров Тогда
		ДобавляемыеРеквизиты = Новый Массив;
		ТипРеквизита = Новый ОписаниеТипов("Строка");
		РеквизитФормы = Новый РеквизитФормы("Фото" + ИмяРаздела + ИДТовара, ТипРеквизита);
		
		ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
		
		// Заставляем форму создать новые реквизиты
		ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		
		// Вывод реквизита на форму (при необходимости)
		ПолеВвода = Элементы.Добавить("Фото" + ИмяРаздела + ИДТовара, Тип("ПолеФормы"), КарточкаТовараЛеваяЧасть);
		ПолеВвода.Вид = ВидПоляФормы.ПолеКартинки;
		ПолеВвода.ПутьКДанным = "Фото" + ИмяРаздела + ИДТовара;
		ПолеВвода.РазмерКартинки = РазмерКартинки.Пропорционально;
		ПолеВвода.Ширина = 4;
		ПолеВвода.Высота = 2;
		ПолеВвода.РастягиватьПоГоризонтали = Ложь;
		ПолеВвода.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ПолеВвода.Рамка = РамкиСтиля.РамкаНетРамки;
		
		// Обращение к реквизиту формы из кода
		Если НЕ СтрокаЗаказа.ФайлКартинки.Пустая() Тогда
			СсылкаНаДДФ = РаботаСФайлами.ДанныеФайла(СтрокаЗаказа.ФайлКартинки, ЭтотОбъект.УникальныйИдентификатор).СсылкаНаДвоичныеДанныеФайла;
			ЭтаФорма["Фото" + ИмяРаздела + ИДТовара] = СсылкаНаДДФ;
		КонецЕсли;
	КонецЕсли;
	
	// Название товара
	Команда = Команды.Добавить(
	"ТоварНаименование" + ИмяРаздела + "_" + ИДТовара); //Имя команды
	Команда.Заголовок = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(СтрокаЗаказа.Номенклатура, СтрокаЗаказа.Характеристика,,СтрокаЗаказа.Серия);
	Команда.Действие = "ВыборТовара"; //Имя связанной процедуры
	КнопкаФормы = Элементы.Добавить("КнопкаТовар" + ИмяРаздела + ИДТовара, Тип("КнопкаФормы"), КарточкаТовараВерх);
	КнопкаФормы.ИмяКоманды = "ТоварНаименование" + ИмяРаздела + "_" + ИДТовара; 
	КнопкаФормы.Вид        = ВидКнопкиФормы.ОбычнаяКнопка; 
	КнопкаФормы.Шрифт      = ШрифтыСтиля.ШрифтТекстаВыделенныйСборкаИДоставка;
	КнопкаФормы.ЦветТекста = WebЦвета.Черный;
	КнопкаФормы.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
	КнопкаФормы.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Лево;
	КнопкаФормы.ВысотаЗаголовка = 2;
	КнопкаФормы.РастягиватьПоГоризонтали = Истина;
	
	// Количество товара
	Команда = Команды.Добавить(
	"ТоварКоличество" + ИмяРаздела + "_" + ИДТовара); //Имя команды
	Команда.Заголовок = Строка(СтрокаЗаказа.Количество) + " " + Строка(СтрокаЗаказа.Упаковка);
	Команда.Действие  = "ВыборТовара"; //Имя связанной процедуры
	
	КнопкаФормы = Элементы.Добавить("КнопкаТоварКоличество" + ИмяРаздела + ИДТовара, Тип("КнопкаФормы"), КарточкаТовараВерх);
	КнопкаФормы.ИмяКоманды = "ТоварКоличество" + ИмяРаздела + "_" + ИДТовара; 
	КнопкаФормы.Вид        = ВидКнопкиФормы.ОбычнаяКнопка; 
	КнопкаФормы.Шрифт      = ШрифтыСтиля.ШрифтТекстаВыделенныйСборкаИДоставка;
	КнопкаФормы.ЦветТекста = WebЦвета.ЛимонноЗеленый;
	КнопкаФормы.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
	КнопкаФормы.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
	КнопкаФормы.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Верх;
	
	// Вес товара
	Если СтрокаЗаказа.ЭтоВесовойТовар ИЛИ СтрокаЗаказа.Вес = 0 Тогда
		ЗаголовокВес = "";
	Иначе 
		ЗаголовокВес = Строка(СтрокаЗаказа.Вес) + " " + Строка(СтрокаЗаказа.ВесЕдиницаИзмерения);
	КонецЕсли;
	
	Команда = Команды.Добавить(
	"ТоварВес" + ИмяРаздела + "_" + ИДТовара); //Имя команды
	Команда.Заголовок = ЗаголовокВес;
	Команда.Действие  = "ВыборТовара"; //Имя связанной процедуры
	
	КнопкаФормы = Элементы.Добавить("КнопкаТоварВес" + ИмяРаздела + ИДТовара, Тип("КнопкаФормы"), КарточкаТовараНиз);
	КнопкаФормы.ИмяКоманды = "ТоварВес" + ИмяРаздела + "_" + ИДТовара; 
	КнопкаФормы.Вид        = ВидКнопкиФормы.ОбычнаяКнопка; 
	КнопкаФормы.Шрифт      = ШрифтыСтиля.ШрифтТекстаВыделенныйСборкаИДоставка;
	КнопкаФормы.ЦветТекста = WebЦвета.Серый;
	КнопкаФормы.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
	КнопкаФормы.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Лево;
	Если ЗаголовокВес = "" Тогда
		КнопкаФормы.Видимость = Ложь;
	КонецЕсли;
	
	// Цена товара
	Команда = Команды.Добавить(
	"ТоварЦена" + ИмяРаздела + "_" + ИДТовара); //Имя команды
	Команда.Заголовок = Строка(СтрокаЗаказа.Цена) + " " + Валюта;
	Команда.Действие  = "ВыборТовара"; //Имя связанной процедуры
	
	КнопкаФормы = Элементы.Добавить("КнопкаТоварЦена" + ИмяРаздела + ИДТовара, Тип("КнопкаФормы"), КарточкаТовараНиз);
	КнопкаФормы.ИмяКоманды = "ТоварЦена" + ИмяРаздела + "_" + ИДТовара; 
	КнопкаФормы.Вид        = ВидКнопкиФормы.ОбычнаяКнопка; 
	КнопкаФормы.Шрифт      = ШрифтыСтиля.ШрифтТекстаВыделенныйСборкаИДоставка;
	КнопкаФормы.ЦветТекста = WebЦвета.Серый;
	КнопкаФормы.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
	КнопкаФормы.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
	
	// Черта ОТСТУП
	Черта = Элементы.Добавить("Черта" + ИмяРаздела + ИДТовара, Тип("ДекорацияФормы"), КарточкаТовара);
	Черта.Вид = ВидДекорацииФормы.Картинка;
	Черта.Картинка = БиблиотекаКартинок.РамкаСерая;
	Черта.РастягиватьПоГоризонтали = Истина;
	Черта.РазмерКартинки = РазмерКартинки.Растянуть;
	Черта.Высота = 0;
	
КонецПроцедуры

&НаСервере
Функция СоздатьГруппуНаФорме(ИмяРаздела, ИДГруппы, Заголовок)
	
	ГруппаТоваров = Элементы.Добавить(
	"ГруппаТоваров" + ИмяРаздела + Строка(ИДГруппы),
	Тип("ГруппаФормы"),
	Элементы[ИмяРаздела]);
		
	ГруппаТоваров.Вид                     = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаТоваров.Поведение               = ПоведениеОбычнойГруппы.Свертываемая;
	ГруппаТоваров.ЦветТекстаЗаголовка     = WebЦвета.Серый;
	ГруппаТоваров.ШрифтЗаголовка          = ШрифтыСтиля.ШрифтТекстаСборкаИДоставка;
	ГруппаТоваров.Группировка             = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаТоваров.Заголовок               = Заголовок;
	
	Возврат ГруппаТоваров; 
	
КонецФункции

&НаСервере
Процедура СформироватьТаблицыГрупп()
	
	Если ГруппыТоваров.Количество() = 0 Тогда
		ТабЗнач = Товары.Выгрузить(,"Группа, КоличествоСтрок");
		ТабЗнач.Свернуть("Группа", "КоличествоСтрок");
		ГруппыТоваров.Загрузить(ТабЗнач);
		
		Сч = 1;
		Для Каждого Строка Из ГруппыТоваров Цикл
			Строка.ИД = Сч;
			Сч = Сч + 1;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрограммноеФормированиеИнтерфейса()
	
	Если ИспользоватьГруппировку Тогда
		Элементы.ФормаИзменитьИерархию.Картинка = БиблиотекаКартинок.Список16СборкаИДоставка;
	Иначе
		Элементы.ФормаИзменитьИерархию.Картинка = БиблиотекаКартинок.ИерархическийСписок;
	КонецЕсли;
	
	Для Каждого СтрокаТовар Из Товары Цикл
			УдалитьКарточкуТовараНаСервере("Товары", СтрокаТовар.ИД);
	КонецЦикла;
	
	Если ИспользоватьГруппировку Тогда
		Для Каждого ЭлГруппы Из ГруппыТоваров Цикл
			
			ГруппаТоваров = Элементы.Найти("ГруппаТоваров" + "СтраницаТовары" + Строка(ЭлГруппы.ИД));
			Если ГруппаТоваров = Неопределено Тогда
				ГруппаТоваров = СоздатьГруппуНаФорме("СтраницаТовары", ЭлГруппы.ИД, ЭлГруппы.Группа);
			КонецЕсли;
			
			Для Каждого СтрокаЗаказа Из Товары Цикл
				
				Если СтрокаЗаказа.Группа <> ЭлГруппы.Группа Тогда
					Продолжить;
				КонецЕсли;
				
				Ид = СтрЗаменить(Строка(СтрокаЗаказа.ИД),Символы.НПП,"");
				СоздатьКарточкуТовараНаФорме("Товары", Ид, ГруппаТоваров);
				
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого СтрокаЗаказа Из Товары Цикл
			
			Ид = СтрЗаменить(Строка(СтрокаЗаказа.ИД),Символы.НПП,"");
			СоздатьКарточкуТовараНаФорме("Товары", Ид, Элементы.СтраницаТовары);
			
		КонецЦикла;
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура УдалитьКарточкуТовараНаСервере(ИмяРаздела, ИДТовара)
	
	Элемент = Элементы.Найти("КарточкаТовара" + ИмяРаздела + ИДТовара);
	Если Элемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Удалить элементы формы
	Элементы.Удалить(Элементы.Найти("КарточкаТовара" + ИмяРаздела + ИДТовара));
	
	// Удалить команды формы
	Команды.Удалить(Команды.Найти("ТоварНаименование" + ИмяРаздела + "_" + ИДТовара));
	Команды.Удалить(Команды.Найти("ТоварКоличество" + ИмяРаздела + "_" + ИДТовара));
	Команды.Удалить(Команды.Найти("ТоварВес" + ИмяРаздела + "_" + ИДТовара));
	Команды.Удалить(Команды.Найти("ТоварЦена" + ИмяРаздела + "_" + ИДТовара));

	// Удалить реквизиты
	Если ПоказыватьФотоТоваров Тогда
		МассивУдаляемыхРеквизитов = Новый Массив();
		МассивУдаляемыхРеквизитов.Добавить("Фото" + ИмяРаздела + ИДТовара); 
		ИзменитьРеквизиты(, МассивУдаляемыхРеквизитов);
	Иначе
		ИзменитьРеквизиты();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
