#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//Установка параметров по умолчанию
	ДетализацияТоваров.Параметры.УстановитьЗначениеПараметра("Сценарий",Объект.Сценарий);
	ДетализацияТоваров.Параметры.УстановитьЗначениеПараметра("ПериодПланирования",Объект.НачалоПериода);
	ДетализацияТоваров.Параметры.УстановитьЗначениеПараметра("ВидПлана",ТекущийВидПлана);
	ДетализацияТоваров.Параметры.УстановитьЗначениеПараметра("УчитыватьНачальныйОстаток",Ложь);
	ДетализацияТоваров.Параметры.УстановитьЗначениеПараметра("КорректировкаПотребностей",Ложь);
	
	ПравоДоступаИзменениеПланЗакупок = ПравоДоступа("Изменение", Метаданные.Документы.ПланЗакупок);
	ПравоДоступаЧтениеПланЗакупок = ПравоДоступа("Чтение", Метаданные.Документы.ПланЗакупок);
	ПравоДоступаИзменениеПланПродаж = ПравоДоступа("Изменение", Метаданные.Документы.ПланПродаж);
	ПравоДоступаЧтениеПланПродаж = ПравоДоступа("Чтение", Метаданные.Документы.ПланПродаж);
	ПравоДоступаЧтениеПланПродажПоКатегориям = ПравоДоступа("Чтение", Метаданные.Документы.ПланПродажПоКатегориям);
	ПравоДоступаИзменениеПланПродажПоКатегориям = ПравоДоступа("Изменение", Метаданные.Документы.ПланПродажПоКатегориям);
	ПравоДоступаИзменениеПланСборкиРазборки = ПравоДоступа("Изменение", Метаданные.Документы.ПланСборкиРазборки);
	ПравоДоступаЧтениеПланСборкиРазборки = ПравоДоступа("Чтение", Метаданные.Документы.ПланСборкиРазборки);
	ПравоДоступаИзменениеПланВнутреннихПотреблений = ПравоДоступа("Изменение", Метаданные.Документы.ПланВнутреннихПотреблений);
	ПравоДоступаЧтениеПланВнутреннихПотреблений = ПравоДоступа("Чтение", Метаданные.Документы.ПланВнутреннихПотреблений);
	ПравоДоступаИзменениеПланОстатков = ПравоДоступа("Изменение", Метаданные.Документы.ПланОстатков);
	ПравоДоступаЧтениеПланОстатков = ПравоДоступа("Чтение", Метаданные.Документы.ПланОстатков);
	
	ТаймерКонтроляПересчетаДефецитов = 0.5;
	
	КартинкаБалансПланов = 5;
	КартинкаКорректировкиПлановыхПотребностей = 4;
	КартинкаОбеспечиваемыеПланыПоДефицитам = 3;
	КартинкаИсходныеПланы = 2;
	КартинкаЭтапПланированияОбеспечения = 1;
	КартинкаЭтапПланированияПотребностей = 0;
	
	УстановитьУсловноеОформление();
	
	Элементы.ЭтапыПланирования.ФиксацияСлева = 1;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПриОткрытииНаСервере();
	ПодключитьОбработчикОжидания("ПересчитатьЭтапыИИндикаторы", 0.5, Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	СценарийПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПериодНачалоОкончаниеПриИзменении(Элемент)
	ПриИзмененииПериодаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервалЗавершение(Период, ДополнительныеПараметры) Экспорт 
	ПриИзмененииПериодаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура НазначениеПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ДетализацияТоваров,
		"Назначение",
		Объект.Назначение, 
		ВидСравненияКомпоновкиДанных.Равно,
		"Назначение",
		ЗначениеЗаполнено(Объект.Назначение));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	ОбновитьДеревоЭтаповНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПоказатьСкрытьДетализациюНажатие(Элемент)
	
	Элементы.ДетализацияТоваров.Видимость = Не Элементы.ДетализацияТоваров.Видимость;
	
	Элементы.ДекорацияПоказатьСкрытьДетализацию.Заголовок = ?(Элементы.ДетализацияТоваров.Видимость,
		НСтр("ru = 'Скрыть детализацию'"),
		НСтр("ru = 'Показать детализацию'"));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыЭтапыПланирования

&НаКлиенте
Процедура ЭтапыПланированияПриАктивизацииЯчейки(Элемент)
	ЭтапыПланированияТекущиеДанные = Элементы.ЭтапыПланирования.ТекущиеДанные;
	
	Если ЭтапыПланированияТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущийВидПлана = ЭтапыПланированияТекущиеДанные.ВидПлана
		И ЭтоКорректировка = (ЭтапыПланированияТекущиеДанные.КартинкаСтроки = 4)
		И (ТекущийЭлементЭтапыПланирования = Элемент.ТекущийЭлемент.Имя
		ИЛИ Элемент.ТекущийЭлемент.Имя = "ЭтапыПланированияПредставление"
			И ТекущийЭлементЭтапыПланирования <> "ЭтапыПланированияПредставление") Тогда
		Возврат;
	КонецЕсли;
	ТекущийЭлементЭтапыПланирования = Элемент.ТекущийЭлемент.Имя;
	ТекущийВидПлана = ЭтапыПланированияТекущиеДанные.ВидПлана;
	
	ТаблицаПериоды = ЭтаФорма.Периоды; // см. Планирование.ТаблицаПериоды
	
	Строки = ТаблицаПериоды.НайтиСтроки(Новый Структура("Заголовок",Элемент.ТекущийЭлемент.Заголовок));
	Если Строки.Количество() > 0 Тогда
		ПериодПланирования = Строки[0].ДатаНачала;
	Иначе
		ПериодПланирования = ТаблицаПериоды[0].ДатаНачала;
	КонецЕсли;
	
	УчитыватьНачальныйОстаток = ЭтапыПланированияТекущиеДанные.ПорядокПланированияЭтапа = 0 ИЛИ ЭтапыПланированияТекущиеДанные.ПорядокПланированияЭтапа = 999;
	ЭтоКорректировка = ЭтапыПланированияТекущиеДанные.КартинкаСтроки = 4;
	ОтобразитьДетализацию(ТекущийВидПлана, ПериодПланирования, УчитыватьНачальныйОстаток, ЭтоКорректировка);
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПланированияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЭтапыПланированияТекущиеДанные = Элементы.ЭтапыПланирования.ТекущиеДанные;
	Если ЭтапыПланированияТекущиеДанные = Неопределено  Тогда
		Возврат;
	КонецЕсли;
	ВидПлана = ЭтапыПланированияТекущиеДанные.ВидПлана;
	
	ТаблицаПериоды = ЭтаФорма.Периоды; // см. Планирование.ТаблицаПериоды
	
	Строки = ТаблицаПериоды.НайтиСтроки(Новый Структура("Заголовок",Элемент.ТекущийЭлемент.Заголовок));
	Если Строки.Количество() > 0 Тогда
		НачалоПериода = Строки[0].ДатаНачала;
		ОкончаниеПериода = Строки[0].ДатаОкончания;
	Иначе
		ПоказатьЗначение(,ВидПлана);
		Возврат;
	КонецЕсли;
	
	Если ЭтапыПланированияТекущиеДанные.ПравоДоступаИзменение 
		И ЭтапыПланированияТекущиеДанные["Состояние_" + Строки[0].ИмяКолонки] = 1 Тогда
		
		МассивВидыПланов = Новый Массив;
		
		Если ЭтапыПланированияТекущиеДанные.ЭтоГруппа Тогда
			Для Каждого ЭлементВидПлана Из ЭтапыПланирования.НайтиПоИдентификатору(ВыбраннаяСтрока).ПолучитьЭлементы() Цикл
				Если ЭлементВидПлана.ЗаполнятьПоДефициту Тогда
					МассивВидыПланов.Добавить(ЭлементВидПлана.ВидПлана);
				КонецЕсли;
			КонецЦикла;
		Иначе
			МассивВидыПланов.Добавить(ВидПлана);
		КонецЕсли;
		
		ПараметрыПроцедуры = Новый Структура;
		ПараметрыПроцедуры.Вставить("Сценарий", Объект.Сценарий);
		ПараметрыПроцедуры.Вставить("Периодичность", Объект.Периодичность);
		ПараметрыПроцедуры.Вставить("ВидыПланов", МассивВидыПланов);
		ПараметрыПроцедуры.Вставить("НачалоПериода", НачалоПериода); 
		ПараметрыПроцедуры.Вставить("ОкончаниеПериода", ОкончаниеПериода);
		
		ЗапуститьФоновоеЗадание(
			"ЗаполнитьПланыПоДефицитамДоКолонки",
			НСтр("ru = 'Заполнить планы по дефицитам'"),
			"Обработки.УправлениеПроцессомПланирования.ЗаполнитьПланыПоДефицитуПоПериодам",
			ПараметрыПроцедуры);
			
		Возврат;
	КонецЕсли;
	
	Если ЭтапыПланированияТекущиеДанные.ПравоДоступаЧтение Тогда
		СписокВидовПланов = ВидыПлановДляОтбора(Элементы.ЭтапыПланирования.ТекущаяСтрока);
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Сценарий", Объект.Сценарий);
		ПараметрыФормы.Вставить("ВидПлана", ВидПлана);
		ПараметрыФормы.Вставить("СписокВидовПланов", СписокВидовПланов);
		ПараметрыФормы.Вставить("Номенклатура", Неопределено);
		ПараметрыФормы.Вставить("Характеристика", Неопределено);
		ПараметрыФормы.Вставить("Назначение", Неопределено);
		ПараметрыФормы.Вставить("НачалоПериода", НачалоПериода);
		ПараметрыФормы.Вставить("ОкончаниеПериода", ОкончаниеПериода);
		ПараметрыФормы.Вставить("ТипДанных", "");
		
		ОткрытьФорму("Обработка.УправлениеПроцессомПланирования.Форма.ФормаДокументов", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийДетализацияТоваров

&НаКлиенте
Процедура ДетализацияТоваровВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не (Поле.Имя = "ДетализацияТоваровНачальныйОстаток"
		ИЛИ Поле.Имя = "ДетализацияТоваровПриход"
		ИЛИ Поле.Имя = "ДетализацияТоваровРасход"
		ИЛИ Поле.Имя = "ДетализацияТоваровКорректировкаРасхода"
		ИЛИ Поле.Имя = "ДетализацияТоваровНоменклатура"
		ИЛИ Поле.Имя = "ДетализацияТоваровХарактеристика"
		ИЛИ Поле.Имя = "ДетализацияТоваровНазначение") Тогда
		Возврат;
	КонецЕсли;
	
	ЭтапыПланированияТекущиеДанные = Элементы.ЭтапыПланирования.ТекущиеДанные;
	ДетализацияТоваровТекущиеДанные = Элементы.ДетализацияТоваров.ТекущиеДанные;
	Если ЭтапыПланированияТекущиеДанные = Неопределено
		ИЛИ ДетализацияТоваровТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (Поле.Имя = "ДетализацияТоваровНоменклатура"
		ИЛИ Поле.Имя = "ДетализацияТоваровХарактеристика"
		ИЛИ Поле.Имя = "ДетализацияТоваровНазначение") Тогда
		ПоказатьЗначение(,ДетализацияТоваровТекущиеДанные.Номенклатура);
		Возврат;
	КонецЕсли;
	
	ВидПлана = ЭтапыПланированияТекущиеДанные.ВидПлана;
	
	ТаблицаПериоды = ЭтаФорма.Периоды; // см. Планирование.ТаблицаПериоды
	
	Строки = ТаблицаПериоды.НайтиСтроки(Новый Структура("Заголовок", Элементы.ЭтапыПланирования.ТекущийЭлемент.Заголовок));
	Если Строки.Количество() > 0 Тогда
		НачалоПериода = Строки[0].ДатаНачала;
		ОкончаниеПериода = Строки[0].ДатаОкончания;
	Иначе
		НачалоПериода = ТаблицаПериоды[0].ДатаНачала;
		ОкончаниеПериода = ТаблицаПериоды[0].ДатаОкончания;
	КонецЕсли;
	
	Номенклатура = ДетализацияТоваровТекущиеДанные.Номенклатура;
	Характеристика = ?(ДетализацияТоваровТекущиеДанные.Свойство("Характеристика"),
						ДетализацияТоваровТекущиеДанные.Характеристика,
						ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
	
	Если ДетализацияТоваровТекущиеДанные.Свойство("Назначение") Тогда
		Назначение = ДетализацияТоваровТекущиеДанные.Назначение;
	Иначе
		Назначение = ПредопределенноеЗначение("Справочник.Назначения.ПустаяСсылка");
	КонецЕсли;
	ТипДанных = СтрЗаменить(Поле.Имя, "ДетализацияТоваров", "");
	
	СписокВидовПланов = ВидыПлановДляОтбора(Элементы.ЭтапыПланирования.ТекущаяСтрока);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Сценарий", Объект.Сценарий);
	ПараметрыФормы.Вставить("ВидПлана", ВидПлана);
	ПараметрыФормы.Вставить("СписокВидовПланов", СписокВидовПланов);
	ПараметрыФормы.Вставить("Номенклатура", Номенклатура);
	ПараметрыФормы.Вставить("Характеристика", Характеристика);
	ПараметрыФормы.Вставить("Назначение", Назначение);
	ПараметрыФормы.Вставить("НачалоПериода", НачалоПериода);
	ПараметрыФормы.Вставить("ОкончаниеПериода", ОкончаниеПериода);
	ПараметрыФормы.Вставить("ТипДанных", ?(Поле.Имя = "ДетализацияТоваровКорректировкаРасхода", "КорректировкаРасхода", ТипДанных));
	
	ОткрытьФорму("Обработка.УправлениеПроцессомПланирования.Форма.ФормаДокументов", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьИнтервал(Команда)
	
	Оповещение = Новый ОписаниеОповещения(
		"УстановитьИнтервалЗавершение",
		ЭтотОбъект);
		
	ОбщегоНазначенияУТКлиент.РедактироватьПериод(
		Объект, 
		Новый Структура("ДатаНачала, ДатаОкончания", "НачалоПериода", "ОкончаниеПериода"),
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДоКолонки(Команда)
	ЭтапыПланированияТекущиеДанные = Элементы.ЭтапыПланирования.ТекущиеДанные;
	ВыбраннаяСтрока = Элементы.ЭтапыПланирования.ТекущаяСтрока;
	Если ЭтапыПланированияТекущиеДанные = Неопределено
		ИЛИ (Не ЭтапыПланированияТекущиеДанные.ЭтоГруппа И Не ЭтапыПланированияТекущиеДанные.ЗаполнятьПоДефициту) Тогда
		Возврат;
	КонецЕсли;
	ВидПлана = ЭтапыПланированияТекущиеДанные.ВидПлана;
	
	ТаблицаПериоды = ЭтаФорма.Периоды; // см. Планирование.ТаблицаПериоды
	
	Строки = ТаблицаПериоды.НайтиСтроки(Новый Структура("Заголовок", Элементы.ЭтапыПланирования.ТекущийЭлемент.Заголовок));
	Если Строки.Количество() > 0 Тогда
		ОкончаниеПериода = Строки[0].ДатаОкончания;
	Иначе
		Возврат;
	КонецЕсли;
	
	МассивВидыПланов = Новый Массив;
	МассивПериоды = Новый Массив;
	
	Если ЭтапыПланированияТекущиеДанные.ЭтоГруппа Тогда
		Для Каждого ЭлементВидПлана Из ЭтапыПланирования.НайтиПоИдентификатору(ВыбраннаяСтрока).ПолучитьЭлементы() Цикл
			Если ЭлементВидПлана.ЗаполнятьПоДефициту Тогда
				МассивВидыПланов.Добавить(ЭлементВидПлана.ВидПлана);
			КонецЕсли;
		КонецЦикла;
	Иначе
		МассивВидыПланов.Добавить(ВидПлана);
	КонецЕсли;
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Сценарий", Объект.Сценарий);
	ПараметрыПроцедуры.Вставить("Периодичность", Объект.Периодичность);
	ПараметрыПроцедуры.Вставить("ВидыПланов", МассивВидыПланов);
	ПараметрыПроцедуры.Вставить("НачалоПериода", Объект.НачалоПериода); 
	ПараметрыПроцедуры.Вставить("ОкончаниеПериода", ОкончаниеПериода);
	
	ЗапуститьФоновоеЗадание(
		"ЗаполнитьПланыПоДефицитамДоКолонки",
		НСтр("ru = 'Заполнить планы по дефицитам до колонки'"),
		"Обработки.УправлениеПроцессомПланирования.ЗаполнитьПланыПоДефицитуПоПериодам",
		ПараметрыПроцедуры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьВсеПериоды(Команда)
	ЭтапыПланированияТекущиеДанные = Элементы.ЭтапыПланирования.ТекущиеДанные;
	ВыбраннаяСтрока = Элементы.ЭтапыПланирования.ТекущаяСтрока;
	Если ЭтапыПланированияТекущиеДанные = Неопределено
		ИЛИ (Не ЭтапыПланированияТекущиеДанные.ЭтоГруппа И Не ЭтапыПланированияТекущиеДанные.ЗаполнятьПоДефициту) Тогда
		Возврат;
	КонецЕсли;
	ВидПлана = ЭтапыПланированияТекущиеДанные.ВидПлана;
	
	МассивВидыПланов = Новый Массив;
	МассивПериоды = Новый Массив;
	
	Если ЭтапыПланированияТекущиеДанные.ЭтоГруппа Тогда
		Для Каждого ЭлементВидПлана Из ЭтапыПланирования.НайтиПоИдентификатору(ВыбраннаяСтрока).ПолучитьЭлементы() Цикл
			Если ЭлементВидПлана.ЗаполнятьПоДефициту Тогда
				МассивВидыПланов.Добавить(ЭлементВидПлана.ВидПлана);
			КонецЕсли;
		КонецЦикла;
	Иначе
		МассивВидыПланов.Добавить(ВидПлана);
	КонецЕсли;
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Сценарий", Объект.Сценарий);
	ПараметрыПроцедуры.Вставить("Периодичность", Объект.Периодичность);
	ПараметрыПроцедуры.Вставить("ВидыПланов", МассивВидыПланов);
	ПараметрыПроцедуры.Вставить("НачалоПериода", Объект.НачалоПериода); 
	ПараметрыПроцедуры.Вставить("ОкончаниеПериода", Объект.ОкончаниеПериода);
	
	ЗапуститьФоновоеЗадание(
		"ЗаполнитьПланыПоДефицитамВоВсехПериодах",
		НСтр("ru = 'Заполнить планы по дефицитам во всех периодах'"),
		"Обработки.УправлениеПроцессомПланирования.ЗаполнитьПланыПоДефицитуПоПериодам",
		ПараметрыПроцедуры);
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ТаймерКонтроляПересчетаДефецитов = 0.5;
	ПересчитатьЭтапыИИндикаторы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДефициты(Команда)
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Сценарий", Объект.Сценарий);
	
	ЗапуститьФоновоеЗадание(
		"ЗапуститьПересчетДефицитовПоЭтапамПоВсемПериодам",
		НСтр("ru = 'Запустить пересчет дефицитов по этапам по всем периодам'"),
		"Обработки.УправлениеПроцессомПланирования.ЗапуститьПересчетДефицитовПоЭтапамПоВсемПериодам",
		ПараметрыПроцедуры);
КонецПроцедуры
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПересчитатьЭтапыИИндикаторы()
	ОбновитьДеревоЭтапов();
	ТаймерКонтроляПересчетаДефецитов = Мин(ТаймерКонтроляПересчетаДефецитов*1.5, 60);
	ПодключитьОбработчикОжидания("ПересчитатьЭтапыИИндикаторы", ТаймерКонтроляПересчетаДефецитов, Истина);
КонецПроцедуры

&НаСервере
Процедура ПриОткрытииНаСервере()
	Планирование.СоздатьТаблицуПериодов(ЭтаФорма, "Периоды");
	СценарийПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("ЭтапыПланированияПредставление");
	
	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтапыПланирования.ПравоДоступаЧтение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ЛОЖЬ;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтапыПланирования.ОтборПоОтветственному");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ЛОЖЬ;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСписокВидовПлановДляОтбора(ТекущаяСтрока)
	
	ЭлементДерева = ЭтапыПланирования.НайтиПоИдентификатору(ТекущаяСтрока);
	СписокВидовПланов = Новый Массив;
	
	Если ЭлементДерева.ЭтоГруппа Тогда
		Для Каждого Элемент Из ЭлементДерева.ПолучитьЭлементы() Цикл
			СписокВидовПланов.Добавить(Элемент.ВидПлана);
		КонецЦикла;
	Иначе
		СписокВидовПланов.Добавить(ЭлементДерева.ВидПлана);
	КонецЕсли;
	
	Возврат СписокВидовПланов
	
КонецФункции

&НаКлиенте
Функция ВидыПлановДляОтбора(ТекущаяСтрока)
	
	ЭлементДерева = ЭтапыПланирования.НайтиПоИдентификатору(ТекущаяСтрока);
	СписокВидовПланов = Новый Массив;
	
	Если ЭлементДерева.ЭтоГруппа Тогда
		Для Каждого Элемент Из ЭлементДерева.ПолучитьЭлементы() Цикл
			СписокВидовПланов.Добавить(Элемент.ВидПлана);
		КонецЦикла;
	Иначе
		СписокВидовПланов.Добавить(ЭлементДерева.ВидПлана);
	КонецЕсли;
	
	Возврат СписокВидовПланов
	
КонецФункции

&НаСервере
Процедура СценарийПриИзмененииНаСервере()
	РеквизитыСценария = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Сценарий, "Периодичность, ПланированиеПоНазначениям, ОтображатьНомерПериода");
	Объект.Периодичность = РеквизитыСценария.Периодичность;
	ПланированиеПоНазначениям = РеквизитыСценария.ПланированиеПоНазначениям;
	ОтображатьНомерПериода = РеквизитыСценария.ОтображатьНомерПериода;
	
	ПриИзмененииПериодаНаСервере();
	УстановитьВидимость();
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПериодаНаСервере()
	
	Если Не ЗначениеЗаполнено(Объект.Сценарий) Тогда
		Возврат;
	КонецЕсли;
	
	ПланированиеКлиентСервер.УстановитьНачалоОкончаниеПериодаПлана(Объект.Периодичность, Объект.НачалоПериода, Объект.ОкончаниеПериода, ТекущаяДатаСеанса());
	ТаблицаПериоды = РеквизитФормыВЗначение("Периоды", Тип("ТаблицаЗначений"));
	Планирование.ЗаполнитьТаблицуПериодов(ТаблицаПериоды, Объект.Периодичность, Объект.НачалоПериода, Объект.ОкончаниеПериода, ОтображатьНомерПериода);
	ЗначениеВРеквизитФормы(ТаблицаПериоды,"Периоды");
	ОбновитьСтруктуруЭтаповПланированияПоПериодам(ТаблицаПериоды);
	ОбновитьДеревоЭтаповНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	Элементы.Назначение.Видимость = ПланированиеПоНазначениям;
	Элементы.ДетализацияТоваровНазначение.Видимость = ПланированиеПоНазначениям;
	
КонецПроцедуры


// Описание
// 
// Параметры:
// 	ТаблицаПериодов см. Планирование.ТаблицаПериоды
&НаСервере
Процедура ОбновитьСтруктуруЭтаповПланированияПоПериодам(ТаблицаПериодов)
	
	ИмяРеквизитаЭтапыПланирования = "ЭтапыПланирования";
	ЭлементФормыЭтапыПланирования = "ЭтапыПланирования";
	Периодичность = Объект.Периодичность;
	Поля = Новый Массив();
	
	Поля.Добавить(КонструкторСтруктурыПоля("Статус_", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 2), Ложь));
	Поля.Добавить(КонструкторСтруктурыПоля("Состояние_", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 2), Истина));
	
	ДобавляемыеРеквизиты = Новый Массив();
	УдаляемыеРеквизиты = Новый Массив();
	РеквизитыДереваЭтапыПалнирования = ЭтаФорма.ПолучитьРеквизиты(ИмяРеквизитаЭтапыПланирования);
	РеквизитыВерхнегоУровня = ЭтаФорма.ПолучитьРеквизиты();
	
	Для Каждого Реквизит Из РеквизитыДереваЭтапыПалнирования Цикл
		Если СтрНайти(Реквизит.Имя, "Состояние_") <> 0 ИЛИ СтрНайти(Реквизит.Имя, "Статус_") <> 0 Тогда
			УдаляемыеРеквизиты.Добавить(ИмяРеквизитаЭтапыПланирования+"." + Реквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтруктураПоля Из Поля Цикл //см. КонструкторСтруктурыПоля
		
		ПрефиксРеквизитаКолонки = СтруктураПоля.ПрефиксРеквизитаКолонки;
		
		// Реквизиты не подлежащие удалению
		Для каждого СтрокаПериода Из ТаблицаПериодов Цикл
			
			ИндексУдаляемогоЭлемента = УдаляемыеРеквизиты.Найти(ИмяРеквизитаЭтапыПланирования+"." + ПрефиксРеквизитаКолонки + СтрокаПериода.ИмяКолонки);
			Если ИндексУдаляемогоЭлемента <> Неопределено Тогда
				УдаляемыеРеквизиты.Удалить(ИндексУдаляемогоЭлемента);
			КонецЕсли;
			
		КонецЦикла;
		
		ТипЭлемента = СтруктураПоля.ТипЭлемента;
		ОписаниеТипов = ТипЭлемента;
		
		// Создание реквизитов таблицы
		Для каждого СтрокаПериода Из ТаблицаПериодов Цикл
		
			РеквизитСуществует = Ложь;
			Для Каждого Реквизит Из РеквизитыДереваЭтапыПалнирования Цикл
				Если Реквизит.Имя = ПрефиксРеквизитаКолонки + СтрокаПериода.ИмяКолонки Тогда
					РеквизитСуществует = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если РеквизитСуществует Тогда
				Реквизит.Заголовок = СтрокаПериода.Заголовок;
				
				Продолжить;
			КонецЕсли; 
			
			Реквизит = Новый РеквизитФормы(ПрефиксРеквизитаКолонки + СтрокаПериода.ИмяКолонки, ОписаниеТипов, ИмяРеквизитаЭтапыПланирования,
				СтрокаПериода.Заголовок);
			ДобавляемыеРеквизиты.Добавить(Реквизит);
		КонецЦикла;
		
	КонецЦикла;
	
	ЭтаФорма.ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	
	// Удаление элементов формы
	УдаляемыеЭлементы = Новый Массив();
	Для Каждого ТекЭлемент Из ЭтаФорма.Элементы.ЭтапыПланирования.ПодчиненныеЭлементы Цикл
		Если СтрНайти(ТекЭлемент.Имя, ЭлементФормыЭтапыПланирования + "ГруппаРеквизитов") Тогда
			УдаляемыеЭлементы.Добавить(ТекЭлемент);
			Продолжить;
		КонецЕсли;
		ЭлементНайден = Ложь;
		Для каждого СтрокаПериода Из ТаблицаПериодов Цикл
			Если  СтрНайти(ТекЭлемент.Имя, ЭлементФормыЭтапыПланирования + "Группа"+СтрокаПериода.ИмяКолонки) Тогда
				УдаляемыеЭлементы.Добавить(ТекЭлемент);
				ЭлементНайден = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЭлементНайден Тогда
			Продолжить;
		КонецЕсли; 
		Для каждого СтруктураПоля Из Поля Цикл
			ПрефиксРеквизитаКолонки = СтруктураПоля.ПрефиксРеквизитаКолонки;
			Если СтрНайти(ТекЭлемент.Имя, ПрефиксРеквизитаКолонки) > 0  Тогда
				УдаляемыеЭлементы.Добавить(ТекЭлемент);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		ЭтаФорма.Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
	ВладелецПоля = ЭтаФорма.Элементы[ЭлементФормыЭтапыПланирования];
	
	Для каждого СтрокаПериода Из ТаблицаПериодов Цикл
		Если НЕ СтрокаПериода.Активная Тогда
			Продолжить;
		КонецЕсли; 
				
		Для каждого СтруктураПоля Из Поля Цикл
			ПрефиксРеквизитаКолонки = СтруктураПоля.ПрефиксРеквизитаКолонки;
			
			СоздаватьЭлемент = СтруктураПоля.СоздаватьЭлемент;
			Если Не СоздаватьЭлемент Тогда
				Продолжить;
			КонецЕсли;
			
			// Перепривязываем данные
			// Создание элементов формы
			Элемент = ЭтаФорма.Элементы.Добавить(ЭлементФормыЭтапыПланирования + ПрефиксРеквизитаКолонки + СтрокаПериода.ИмяКолонки, 
				Тип("ПолеФормы"), ВладелецПоля);
			Элемент.Вид = ВидПоляФормы.ПолеКартинки;
			Элемент.КартинкаЗначений = БиблиотекаКартинок.ПланированиеПоЭтапамДействия;
			Элемент.ПутьКДанным = ИмяРеквизитаЭтапыПланирования+"."+ПрефиксРеквизитаКолонки + СтрокаПериода.ИмяКолонки;
			Элемент.Ширина = 2;
			
			Элемент.Заголовок = СтрокаПериода.Заголовок;
			
			ДобавитьУсловноеОформлениеДляКолонки(Элемент.Имя, СтрокаПериода.ИмяКолонки);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Конструктор структуры поля.
// 
// Параметры:
//  ПрефиксРеквизитаКолонки - Строка - 
//  ТипЭлемента - ОписаниеТипов - 
//  СоздаватьЭлемент - Булево - 
// 
// Возвращаемое значение:
//  Структура - Структура поля:
// * ПрефиксРеквизитаКолонки - Строка
// * ТипЭлемента - ОписаниеТипов
// * СоздаватьЭлемент - Булево
&НаСервере
Функция КонструкторСтруктурыПоля(ПрефиксРеквизитаКолонки, ТипЭлемента, СоздаватьЭлемент)
	
	СтруктураПоля = Новый Структура;
	СтруктураПоля.Вставить("ПрефиксРеквизитаКолонки", ПрефиксРеквизитаКолонки);
	СтруктураПоля.Вставить("ТипЭлемента", ТипЭлемента);
	СтруктураПоля.Вставить("СоздаватьЭлемент", СоздаватьЭлемент);
	
	Возврат СтруктураПоля;
КонецФункции

&НаСервере
Процедура ДобавитьУсловноеОформлениеДляКолонки(ЭлементИмя,ИмяКолонки)
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ЭлементИмя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтапыПланирования.Статус_"+ИмяКолонки);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.НасыщенноНебесноГолубой);

	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ЭлементИмя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтапыПланирования.Статус_"+ИмяКолонки);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 2;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СинеСерый);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ЭлементИмя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтапыПланирования.Статус_"+ИмяКолонки);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 3;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветАкцента);

	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ЭлементИмя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтапыПланирования.Статус_"+ИмяКолонки);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 5;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоНебесноГолубой);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ЭлементИмя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтапыПланирования.Статус_"+ИмяКолонки);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 6;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветАкцента);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ЭлементИмя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтапыПланирования.ПравоДоступаЧтение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ЛОЖЬ;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ЭлементИмя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтапыПланирования.ОтборПоОтветственному");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ЛОЖЬ;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	
КонецПроцедуры

&НаСервере
Функция ОбновитьДеревоЭтаповНаСервере()
	
	Запрос = Новый Запрос();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПериоды.ДатаНачала КАК ПериодПланирования,
	|	ВЫРАЗИТЬ(ТаблицаПериоды.ИмяКолонки КАК СТРОКА(36)) КАК ИмяКолонки
	|ПОМЕСТИТЬ ТаблицаПериоды
	|ИЗ
	|	&ТаблицаПериоды КАК ТаблицаПериоды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыПланов.Ссылка КАК ВидПлана,
	|	ВидыПланов.ПорядокПланирования КАК ПорядокПланирования,
	|	ЕСТЬNULL(ВидыПланов.Родитель.ПорядокПланирования, ВидыПланов.ПорядокПланирования) КАК ПорядокПланированияЭтапа,
	|	ВЫБОР
	|		КОГДА ВидыПланов.Родитель.ПорядокПланирования ЕСТЬ NULL
	|			ТОГДА ВидыПланов.Ссылка
	|		ИНАЧЕ ВидыПланов.Родитель
	|	КОНЕЦ КАК ЭтапПланирования,
	|	ВидыПланов.ЭтоГруппа КАК ЭтоГруппа,
	|	ЕСТЬNULL(ВидыПланов.ЗаполнятьПоДефициту, ЛОЖЬ) КАК ЗаполнятьПоДефициту,
	|	ВЫБОР
	|		КОГДА ВидыПланов.ЭтоГруппа
	|			ТОГДА ВЫБОР
	|				КОГДА ВидыПланов.ПометкаУдаления
	|					ТОГДА 6
	|				ИНАЧЕ ВЫБОР
	|					КОГДА ВидыПланов.ПланированиеПотребностей
	|						ТОГДА 0
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|			КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|			КОГДА ВидыПланов.ПометкаУдаления
	|				ТОГДА 7
	|			ИНАЧЕ ВЫБОР
	|				КОГДА ВидыПланов.Родитель = ЗНАЧЕНИЕ(Справочник.ВидыПланов.ПустаяСсылка)
	|				И ВидыПланов.ТипПлана <> ЗНАЧЕНИЕ(Перечисление.ТипыПланов.ПланОстатков)
	|					ТОГДА 8
	|				КОГДА ВидыПланов.ЗаполнятьПоДефициту
	|					ТОГДА 3
	|				ИНАЧЕ 2
	|			КОНЕЦ
	|		КОНЕЦ
	|	КОНЕЦ КАК КартинкаСтроки,
	|	ТаблицаПериоды.ПериодПланирования КАК ПериодПланирования,
	|	ТаблицаПериоды.ИмяКолонки КАК ИмяКолонки,
	|	ЛОЖЬ КАК Корректировка,
	|	ВЫБОР
	|		КОГДА ВидыПланов.ТипПлана = ЗНАЧЕНИЕ(Перечисление.ТипыПланов.ПланЗакупок)
	|			ТОГДА &ПравоДоступаИзменениеПланЗакупок
	|		КОГДА ВидыПланов.ТипПлана = ЗНАЧЕНИЕ(Перечисление.ТипыПланов.ПланПродаж)
	|			ТОГДА &ПравоДоступаИзменениеПланПродаж
	|		КОГДА ВидыПланов.ТипПлана = ЗНАЧЕНИЕ(Перечисление.ТипыПланов.ПланПродажПоКатегориям)
	|			ТОГДА &ПравоДоступаИзменениеПланПродажПоКатегориям
	|		КОГДА ВидыПланов.ТипПлана = ЗНАЧЕНИЕ(Перечисление.ТипыПланов.ПланСборкиРазборки)
	|			ТОГДА &ПравоДоступаИзменениеПланСборкиРазборки
	|		КОГДА ВидыПланов.ТипПлана = ЗНАЧЕНИЕ(Перечисление.ТипыПланов.ПланПроизводства)
	|			ТОГДА &ПравоДоступаИзменениеПланПроизводства
	|		КОГДА ВидыПланов.ТипПлана = ЗНАЧЕНИЕ(Перечисление.ТипыПланов.ПланВнутреннихПотреблений)
	|			ТОГДА &ПравоДоступаИзменениеПланВнутреннихПотреблений
	|		КОГДА ВидыПланов.ТипПлана = ЗНАЧЕНИЕ(Перечисление.ТипыПланов.ПланОстатков)
	|			ТОГДА &ПравоДоступаИзменениеПланОстатков
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПравоДоступаИзменение,
	|	ВЫБОР
	|		КОГДА ВидыПланов.ТипПлана = ЗНАЧЕНИЕ(Перечисление.ТипыПланов.ПланЗакупок)
	|			ТОГДА &ПравоДоступаЧтениеПланЗакупок
	|		КОГДА ВидыПланов.ТипПлана = ЗНАЧЕНИЕ(Перечисление.ТипыПланов.ПланПродаж)
	|			ТОГДА &ПравоДоступаЧтениеПланПродаж
	|		КОГДА ВидыПланов.ТипПлана = ЗНАЧЕНИЕ(Перечисление.ТипыПланов.ПланПродажПоКатегориям)
	|			ТОГДА &ПравоДоступаЧтениеПланПродажПоКатегориям
	|		КОГДА ВидыПланов.ТипПлана = ЗНАЧЕНИЕ(Перечисление.ТипыПланов.ПланСборкиРазборки)
	|			ТОГДА &ПравоДоступаЧтениеПланСборкиРазборки
	|		КОГДА ВидыПланов.ТипПлана = ЗНАЧЕНИЕ(Перечисление.ТипыПланов.ПланПроизводства)
	|			ТОГДА &ПравоДоступаЧтениеПланПроизводства
	|		КОГДА ВидыПланов.ТипПлана = ЗНАЧЕНИЕ(Перечисление.ТипыПланов.ПланВнутреннихПотреблений)
	|			ТОГДА &ПравоДоступаЧтениеПланВнутреннихПотреблений
	|		КОГДА ВидыПланов.ТипПлана = ЗНАЧЕНИЕ(Перечисление.ТипыПланов.ПланОстатков)
	|			ТОГДА &ПравоДоступаЧтениеПланОстатков
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПравоДоступаЧтение,
	|	НЕ &ОтборОтветственный
	|	ИЛИ ВидыПланов.Ответственный = &Ответственный
	|	ИЛИ ВидыПланов.Ответственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка) КАК ОтборПоОтветственному
	|ПОМЕСТИТЬ СтруктураПланов
	|ИЗ
	|	Справочник.ВидыПланов КАК ВидыПланов,
	|	ТаблицаПериоды КАК ТаблицаПериоды
	|ГДЕ
	|	ВидыПланов.Владелец = &Сценарий
	|	И
	|	НЕ ВидыПланов.ПометкаУдаления
	|	И
	|	НЕ (ВидыПланов.ТипПлана <> ЗНАЧЕНИЕ(Перечисление.ТипыПланов.ПланОстатков)
	|	И ВидыПланов.Родитель = ЗНАЧЕНИЕ(Справочник.ВидыПланов.ПустаяСсылка)
	|	И
	|	НЕ ВидыПланов.ЭтоГруппа)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.ВидыПланов.ПустаяСсылка),
	|	999,
	|	999,
	|	ЗНАЧЕНИЕ(Справочник.ВидыПланов.ПустаяСсылка),
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	5,
	|	ТаблицаПериоды.ПериодПланирования,
	|	ТаблицаПериоды.ИмяКолонки,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	ИСТИНА,
	|	ИСТИНА
	|ИЗ
	|	ТаблицаПериоды КАК ТаблицаПериоды
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КорректировкаПлановыхПотребностей.ВидПлана,
	|	КорректировкаПлановыхПотребностей.ВидПлана.ПорядокПланирования,
	|	ЕСТЬNULL(КорректировкаПлановыхПотребностей.ВидПлана.Родитель.ПорядокПланирования,
	|		КорректировкаПлановыхПотребностей.ВидПлана.ПорядокПланирования),
	|	ВЫБОР
	|		КОГДА КорректировкаПлановыхПотребностей.ВидПлана.Родитель.ПорядокПланирования ЕСТЬ NULL
	|			ТОГДА КорректировкаПлановыхПотребностей.ВидПлана
	|		ИНАЧЕ КорректировкаПлановыхПотребностей.ВидПлана.Родитель
	|	КОНЕЦ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	4,
	|	ТаблицаПериоды.ПериодПланирования,
	|	ТаблицаПериоды.ИмяКолонки,
	|	ИСТИНА,
	|	ИСТИНА,
	|	ИСТИНА,
	|	ИСТИНА
	|ИЗ
	|	Документ.КорректировкаПлановыхПотребностей КАК КорректировкаПлановыхПотребностей,
	|	ТаблицаПериоды КАК ТаблицаПериоды
	|ГДЕ
	|	КорректировкаПлановыхПотребностей.Сценарий = &Сценарий
	|	И КорректировкаПлановыхПотребностей.Проведен
	|	И КорректировкаПлановыхПотребностей.Период >= &НачалоПериода
	|	И КорректировкаПлановыхПотребностей.Период <= &ОкончаниеПериода
	|	И КорректировкаПлановыхПотребностей.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыПлановыхКорректировок.Отменена)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетДефицитовПлановПоЭтапам.ВидПлана КАК ВидПлана,
	|	РасчетДефицитовПлановПоЭтапам.ПериодПланирования КАК ПериодПланирования,
	|	ВЫБОР
	|		КОГДА РасчетДефицитовПлановПоЭтапам.Пересчитать
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Состояние
	|ПОМЕСТИТЬ РасчетДефицитовПоЭтапам
	|ИЗ
	|	РегистрСведений.РасчетДефицитовПлановПоЭтапам КАК РасчетДефицитовПлановПоЭтапам,
	|	ТаблицаПериоды КАК ТаблицаПериоды
	|ГДЕ
	|	РасчетДефицитовПлановПоЭтапам.ПериодПланирования МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И РасчетДефицитовПлановПоЭтапам.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяССылка)
	|	И РасчетДефицитовПлановПоЭтапам.Сценарий = &Сценарий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланЗакупок.ВидПлана КАК ВидПлана,
	|	МИНИМУМ(ПланЗакупок.Статус.Порядок) КАК СтатусПорядок,
	|	ТаблицаПериоды.ПериодПланирования КАК ПериодПланирования,
	|	ЛОЖЬ КАК Корректировка
	|ПОМЕСТИТЬ СтатусыДокументов
	|ИЗ
	|	Документ.ПланЗакупок КАК ПланЗакупок
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПериоды КАК ТаблицаПериоды
	|		ПО ПланЗакупок.НачалоПериода <= ТаблицаПериоды.ПериодПланирования
	|		И ПланЗакупок.ОкончаниеПериода >= ТаблицаПериоды.ПериодПланирования
	|ГДЕ
	|	ПланЗакупок.Проведен
	|	И ПланЗакупок.Сценарий = &Сценарий
	|	И ПланЗакупок.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.Отменен)
	|	И
	|	НЕ ПланЗакупок.ПометкаУдаления
	|	И ПланЗакупок.НачалоПериода <= &ОкончаниеПериода
	|	И ПланЗакупок.ОкончаниеПериода >= &НачалоПериода
	|СГРУППИРОВАТЬ ПО
	|	ПланЗакупок.ВидПлана,
	|	ТаблицаПериоды.ПериодПланирования
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПланПродаж.ВидПлана,
	|	МИНИМУМ(ПланПродаж.Статус.Порядок),
	|	ТаблицаПериоды.ПериодПланирования,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ПланПродаж КАК ПланПродаж
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПериоды КАК ТаблицаПериоды
	|		ПО ПланПродаж.НачалоПериода <= ТаблицаПериоды.ПериодПланирования
	|		И ПланПродаж.ОкончаниеПериода >= ТаблицаПериоды.ПериодПланирования
	|ГДЕ
	|	ПланПродаж.Проведен
	|	И ПланПродаж.Сценарий = &Сценарий
	|	И ПланПродаж.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.Отменен)
	|	И
	|	НЕ ПланПродаж.ПометкаУдаления
	|	И ПланПродаж.НачалоПериода <= &ОкончаниеПериода
	|	И ПланПродаж.ОкончаниеПериода >= &НачалоПериода
	|СГРУППИРОВАТЬ ПО
	|	ПланПродаж.ВидПлана,
	|	ТаблицаПериоды.ПериодПланирования
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПланПродажПоКатегориям.ВидПлана,
	|	МИНИМУМ(ПланПродажПоКатегориям.Статус.Порядок),
	|	ТаблицаПериоды.ПериодПланирования,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ПланПродажПоКатегориям КАК ПланПродажПоКатегориям
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПериоды КАК ТаблицаПериоды
	|		ПО ПланПродажПоКатегориям.НачалоПериода <= ТаблицаПериоды.ПериодПланирования
	|		И ПланПродажПоКатегориям.ОкончаниеПериода >= ТаблицаПериоды.ПериодПланирования
	|ГДЕ
	|	ПланПродажПоКатегориям.Проведен
	|	И ПланПродажПоКатегориям.Сценарий = &Сценарий
	|	И ПланПродажПоКатегориям.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.Отменен)
	|	И
	|	НЕ ПланПродажПоКатегориям.ПометкаУдаления
	|	И ПланПродажПоКатегориям.НачалоПериода <= &ОкончаниеПериода
	|	И ПланПродажПоКатегориям.ОкончаниеПериода >= &НачалоПериода
	|СГРУППИРОВАТЬ ПО
	|	ПланПродажПоКатегориям.ВидПлана,
	|	ТаблицаПериоды.ПериодПланирования
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПланСборкиРазборки.ВидПлана,
	|	МИНИМУМ(ПланСборкиРазборки.Статус.Порядок),
	|	ТаблицаПериоды.ПериодПланирования,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ПланСборкиРазборки КАК ПланСборкиРазборки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПериоды КАК ТаблицаПериоды
	|		ПО ПланСборкиРазборки.НачалоПериода <= ТаблицаПериоды.ПериодПланирования
	|		И ПланСборкиРазборки.ОкончаниеПериода >= ТаблицаПериоды.ПериодПланирования
	|ГДЕ
	|	ПланСборкиРазборки.Проведен
	|	И ПланСборкиРазборки.Сценарий = &Сценарий
	|	И
	|	НЕ ПланСборкиРазборки.ПометкаУдаления
	|	И ПланСборкиРазборки.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.Отменен)
	|	И ПланСборкиРазборки.НачалоПериода <= &ОкончаниеПериода
	|	И ПланСборкиРазборки.ОкончаниеПериода >= &НачалоПериода
	|СГРУППИРОВАТЬ ПО
	|	ПланСборкиРазборки.ВидПлана,
	|	ТаблицаПериоды.ПериодПланирования
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПланВнутреннихПотреблений.ВидПлана,
	|	МИНИМУМ(ПланВнутреннихПотреблений.Статус.Порядок),
	|	ТаблицаПериоды.ПериодПланирования,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ПланВнутреннихПотреблений КАК ПланВнутреннихПотреблений
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПериоды КАК ТаблицаПериоды
	|		ПО ПланВнутреннихПотреблений.НачалоПериода <= ТаблицаПериоды.ПериодПланирования
	|			И ПланВнутреннихПотреблений.ОкончаниеПериода >= ТаблицаПериоды.ПериодПланирования
	|ГДЕ
	|	ПланВнутреннихПотреблений.Проведен
	|	И ПланВнутреннихПотреблений.Сценарий = &Сценарий
	|	И ПланВнутреннихПотреблений.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.Отменен)
	|	И НЕ ПланВнутреннихПотреблений.ПометкаУдаления
	|	И ПланВнутреннихПотреблений.НачалоПериода <= &ОкончаниеПериода
	|	И ПланВнутреннихПотреблений.ОкончаниеПериода >= &НачалоПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланВнутреннихПотреблений.ВидПлана,
	|	ТаблицаПериоды.ПериодПланирования
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПланОстатков.ВидПлана,
	|	МИНИМУМ(ПланОстатков.Статус.Порядок),
	|	ТаблицаПериоды.ПериодПланирования,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ПланОстатков КАК ПланОстатков
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПериоды КАК ТаблицаПериоды
	|		ПО ПланОстатков.НачалоПериода <= ТаблицаПериоды.ПериодПланирования
	|		И ПланОстатков.ОкончаниеПериода >= ТаблицаПериоды.ПериодПланирования
	|ГДЕ
	|	ПланОстатков.Проведен
	|	И ПланОстатков.Сценарий = &Сценарий
	|	И ПланОстатков.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.Отменен)
	|	И
	|	НЕ ПланОстатков.ПометкаУдаления
	|	И ПланОстатков.НачалоПериода <= &ОкончаниеПериода
	|	И ПланОстатков.ОкончаниеПериода >= &НачалоПериода
	|СГРУППИРОВАТЬ ПО
	|	ПланОстатков.ВидПлана,
	|	ТаблицаПериоды.ПериодПланирования
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаПлановыхПотребностей.ВидПлана,
	|	МИНИМУМ(КорректировкаПлановыхПотребностей.Статус.Порядок),
	|	ТаблицаПериоды.ПериодПланирования,
	|	ИСТИНА
	|ИЗ
	|	Документ.КорректировкаПлановыхПотребностей КАК КорректировкаПлановыхПотребностей
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПериоды КАК ТаблицаПериоды
	|		ПО КорректировкаПлановыхПотребностей.Период <= ТаблицаПериоды.ПериодПланирования
	|		И КорректировкаПлановыхПотребностей.Период >= ТаблицаПериоды.ПериодПланирования
	|ГДЕ
	|	КорректировкаПлановыхПотребностей.Проведен
	|	И КорректировкаПлановыхПотребностей.Сценарий = &Сценарий
	|	И КорректировкаПлановыхПотребностей.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыПлановыхКорректировок.Отменена)
	|	И
	|	НЕ КорректировкаПлановыхПотребностей.ПометкаУдаления
	|	И КорректировкаПлановыхПотребностей.Период <= &ОкончаниеПериода
	|	И КорректировкаПлановыхПотребностей.Период >= &НачалоПериода
	|СГРУППИРОВАТЬ ПО
	|	КорректировкаПлановыхПотребностей.ВидПлана,
	|	ТаблицаПериоды.ПериодПланирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатусыДокументов.ВидПлана КАК ВидПлана,
	|	СтатусыДокументов.СтатусПорядок КАК СтатусПорядок,
	|	СтатусыДокументов.ПериодПланирования КАК ПериодПланирования,
	|	СтатусыДокументов.Корректировка КАК Корректировка,
	|	ВидыПланов.Родитель КАК ЭтапПланирования
	|ПОМЕСТИТЬ СтатусыДокументовИЭтапы
	|ИЗ
	|	СтатусыДокументов КАК СтатусыДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыПланов КАК ВидыПланов
	|		ПО СтатусыДокументов.ВидПлана = ВидыПланов.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктураПланов.ВидПлана КАК ВидПлана,
	|	ПРЕДСТАВЛЕНИЕ(СтруктураПланов.ВидПлана) КАК Представление,
	|	СтруктураПланов.ПорядокПланирования КАК ПорядокПланирования,
	|	СтруктураПланов.ПорядокПланированияЭтапа КАК ПорядокПланированияЭтапа,
	|	СтруктураПланов.ЭтапПланирования КАК ЭтапПланирования,
	|	СтруктураПланов.ЭтоГруппа КАК ЭтоГруппа,
	|	СтруктураПланов.ЗаполнятьПоДефициту КАК ЗаполнятьПоДефициту,
	|	СтруктураПланов.ПериодПланирования КАК ПериодПланирования,
	|	СтруктураПланов.КартинкаСтроки КАК КартинкаСтроки,
	|	ЕСТЬNULL(СтатусыДокументов.СтатусПорядок, 0) КАК СтатусПорядокДляГруппировки,
	|	МИНИМУМ(ВЫБОР
	|		КОГДА СтруктураПланов.ЭтоГруппа
	|			ТОГДА ЕСТЬNULL(СтатусыДокументов1.СтатусПорядок, 9)
	|		ИНАЧЕ ВЫБОР
	|			КОГДА СтруктураПланов.КартинкаСтроки = 4
	|				ТОГДА ЕСТЬNULL(СтатусыДокументов.СтатусПорядок, 9) + 4
	|			ИНАЧЕ ЕСТЬNULL(СтатусыДокументов.СтатусПорядок, 9)
	|		КОНЕЦ
	|	КОНЕЦ) КАК СтатусПорядок,
	|	ВЫБОР
	|		КОГДА СтруктураПланов.КартинкаСтроки = 4
	|			ТОГДА ВЫБОР
	|				КОГДА ЕСТЬNULL(СтатусыДокументов.СтатусПорядок, 0) = 1
	|					ТОГДА 2
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|		ИНАЧЕ РасчетДефицитовПоЭтапам.Состояние
	|	КОНЕЦ КАК Состояние,
	|	СтруктураПланов.ИмяКолонки КАК ИмяКолонки,
	|	МАКСИМУМ(ЕСТЬNULL(СтруктураПлановПрава.ПравоДоступаИзменение, СтруктураПланов.ПравоДоступаИзменение)) КАК
	|		ПравоДоступаИзменение,
	|	МАКСИМУМ(ЕСТЬNULL(СтруктураПлановПрава.ПравоДоступаЧтение, СтруктураПланов.ПравоДоступаЧтение)) КАК
	|		ПравоДоступаЧтение,
	|	МАКСИМУМ(ЕСТЬNULL(СтруктураПлановПрава.ОтборПоОтветственному, СтруктураПланов.ОтборПоОтветственному)) КАК
	|		ОтборПоОтветственному,
	|	СтруктураПланов.ВидПлана.ТипПлана КАК ВидПланаТипПлана,
	|	СтруктураПланов.ВидПлана.Наименование КАК ВидПланаНаименование,
	|	СтруктураПланов.ВидПлана.КоличествоПериодов КАК ВидПланаКоличествоПериодов,
	|	СтруктураПланов.ЭтапПланирования.Наименование КАК ЭтапПланированияНаименование
	|ПОМЕСТИТЬ ЭтапыПланированияНовые
	|ИЗ
	|	СтруктураПланов КАК СтруктураПланов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РасчетДефицитовПоЭтапам КАК РасчетДефицитовПоЭтапам
	|		ПО СтруктураПланов.ВидПлана = РасчетДефицитовПоЭтапам.ВидПлана
	|		И СтруктураПланов.ПериодПланирования = РасчетДефицитовПоЭтапам.ПериодПланирования
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтатусыДокументовИЭтапы КАК СтатусыДокументов
	|		ПО СтруктураПланов.ВидПлана = СтатусыДокументов.ВидПлана
	|		И СтруктураПланов.ПериодПланирования = СтатусыДокументов.ПериодПланирования
	|		И СтруктураПланов.Корректировка = СтатусыДокументов.Корректировка
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтатусыДокументовИЭтапы КАК СтатусыДокументов1
	|		ПО СтруктураПланов.ПериодПланирования = СтатусыДокументов1.ПериодПланирования
	|		И СтруктураПланов.ВидПлана = СтатусыДокументов1.ЭтапПланирования
	|		И СтруктураПланов.Корректировка = СтатусыДокументов1.Корректировка
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтруктураПланов КАК СтруктураПлановПрава
	|		ПО СтруктураПланов.ВидПлана = СтруктураПлановПрава.ЭтапПланирования
	|		И СтруктураПланов.ВидПлана <> СтруктураПлановПрава.ВидПлана
	|СГРУППИРОВАТЬ ПО
	|	СтруктураПланов.ЭтоГруппа,
	|	СтруктураПланов.ВидПлана,
	|	СтруктураПланов.ПериодПланирования,
	|	СтруктураПланов.ЭтапПланирования,
	|	СтруктураПланов.ЗаполнятьПоДефициту,
	|	СтруктураПланов.ПорядокПланирования,
	|	СтруктураПланов.ПорядокПланированияЭтапа,
	|	СтруктураПланов.КартинкаСтроки,
	|	СтруктураПланов.ИмяКолонки,
	|	РасчетДефицитовПоЭтапам.Состояние,
	|	ЕСТЬNULL(СтатусыДокументов.СтатусПорядок, 0),
	|	ВЫБОР
	|		КОГДА СтруктураПланов.КартинкаСтроки = 4
	|			ТОГДА ВЫБОР
	|				КОГДА ЕСТЬNULL(СтатусыДокументов.СтатусПорядок, 0) = 1
	|					ТОГДА 2
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|		ИНАЧЕ РасчетДефицитовПоЭтапам.Состояние
	|	КОНЕЦ,
	|	СтруктураПланов.ВидПлана.ТипПлана,
	|	СтруктураПланов.ВидПлана.Наименование,
	|	СтруктураПланов.ВидПлана.КоличествоПериодов,
	|	СтруктураПланов.ЭтапПланирования.Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыПланированияТаблица.ВидПлана КАК ВидПлана,
	|	ЭтапыПланированияТаблица.Представление КАК Представление,
	|	ЭтапыПланированияТаблица.ПорядокПланирования КАК ПорядокПланирования,
	|	ЭтапыПланированияТаблица.ПорядокПланированияЭтапа КАК ПорядокПланированияЭтапа,
	|	ЭтапыПланированияТаблица.ЭтапПланирования КАК ЭтапПланирования,
	|	ЭтапыПланированияТаблица.ЭтоГруппа КАК ЭтоГруппа,
	|	ЭтапыПланированияТаблица.ЗаполнятьПоДефициту КАК ЗаполнятьПоДефициту,
	|	ЭтапыПланированияТаблица.ПериодПланирования КАК ПериодПланирования,
	|	ЭтапыПланированияТаблица.КартинкаСтроки КАК КартинкаСтроки,
	|	ЭтапыПланированияТаблица.СтатусПорядок КАК СтатусПорядок,
	|	ЭтапыПланированияТаблица.Состояние КАК Состояние,
	|	ЭтапыПланированияТаблица.ОтборПоОтветственному КАК ОтборПоОтветственному
	|ПОМЕСТИТЬ ЭтапыПланированияСтарые
	|ИЗ
	|	&ЭтапыПланированияТаблица КАК ЭтапыПланированияТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ЭтапыПланированияНовые.ВидПлана,
	|		ЗНАЧЕНИЕ(Справочник.ВидыПланов.ПустаяСсылка)) <> ЕСТЬNULL(ЭтапыПланированияСтарые.ВидПлана,
	|		ЗНАЧЕНИЕ(Справочник.ВидыПланов.ПустаяСсылка))
	|	ИЛИ ЕСТЬNULL(ЭтапыПланированияНовые.ПорядокПланирования, 99) <> ЕСТЬNULL(ЭтапыПланированияСтарые.ПорядокПланирования,
	|		99)
	|	ИЛИ ЕСТЬNULL(ЭтапыПланированияНовые.ПорядокПланированияЭтапа,
	|		99) <> ЕСТЬNULL(ЭтапыПланированияСтарые.ПорядокПланированияЭтапа, 99)
	|	ИЛИ ЕСТЬNULL(ЭтапыПланированияНовые.ЗаполнятьПоДефициту,
	|		ЛОЖЬ) <> ЕСТЬNULL(ЭтапыПланированияСтарые.ЗаполнятьПоДефициту, ЛОЖЬ) КАК ИзмениласьСтруктура,
	|	ЕСТЬNULL(ЭтапыПланированияНовые.Состояние, 0) <> ЕСТЬNULL(ЭтапыПланированияСтарые.Состояние, 0)
	|	ИЛИ ЕСТЬNULL(ЭтапыПланированияНовые.СтатусПорядок, ЛОЖЬ) <> ЕСТЬNULL(ЭтапыПланированияСтарые.СтатусПорядок,
	|		ЛОЖЬ) КАК ИзменилисьИндикаторы,
	|	ЕСТЬNULL(ЭтапыПланированияНовые.ОтборПоОтветственному,
	|		ЛОЖЬ) <> ЕСТЬNULL(ЭтапыПланированияСтарые.ОтборПоОтветственному, ЛОЖЬ) КАК ИзменилисьОтборы
	|ПОМЕСТИТЬ СтатусПересчета
	|ИЗ
	|	ЭтапыПланированияНовые КАК ЭтапыПланированияНовые
	|		ПОЛНОЕ СОЕДИНЕНИЕ ЭтапыПланированияСтарые КАК ЭтапыПланированияСтарые
	|		ПО ЭтапыПланированияНовые.ВидПлана = ЭтапыПланированияСтарые.ВидПлана
	|		И ЭтапыПланированияНовые.ЭтапПланирования = ЭтапыПланированияСтарые.ЭтапПланирования
	|		И ЭтапыПланированияНовые.ПериодПланирования = ЭтапыПланированияСтарые.ПериодПланирования
	|		И ЭтапыПланированияНовые.КартинкаСтроки = ЭтапыПланированияСтарые.КартинкаСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(СтатусПересчета.ИзмениласьСтруктура) КАК ИзмениласьСтруктура,
	|	МАКСИМУМ(СтатусПересчета.ИзменилисьИндикаторы) КАК ИзменилисьИндикаторы,
	|	МАКСИМУМ(СтатусПересчета.ИзменилисьОтборы) КАК ИзменилисьОтборы
	|ИЗ
	|	СтатусПересчета КАК СтатусПересчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыПланированияНовые.ВидПлана КАК ВидПлана,
	|	ЭтапыПланированияНовые.Представление КАК Представление,
	|	ЭтапыПланированияНовые.ПорядокПланирования КАК ПорядокПланирования,
	|	ЭтапыПланированияНовые.ПорядокПланированияЭтапа КАК ПорядокПланированияЭтапа,
	|	ЭтапыПланированияНовые.ЭтапПланирования КАК ЭтапПланирования,
	|	ЭтапыПланированияНовые.ЭтоГруппа КАК ЭтоГруппа,
	|	ЭтапыПланированияНовые.ЗаполнятьПоДефициту КАК ЗаполнятьПоДефициту,
	|	ЭтапыПланированияНовые.ПериодПланирования КАК ПериодПланирования,
	|	ЭтапыПланированияНовые.КартинкаСтроки КАК КартинкаСтроки,
	|	ЭтапыПланированияНовые.СтатусПорядок КАК СтатусПорядок,
	|	ЭтапыПланированияНовые.Состояние КАК Состояние,
	|	ЭтапыПланированияНовые.ИмяКолонки КАК ИмяКолонки,
	|	ЭтапыПланированияНовые.ПравоДоступаИзменение КАК ПравоДоступаИзменение,
	|	ЭтапыПланированияНовые.ПравоДоступаЧтение КАК ПравоДоступаЧтение,
	|	ЭтапыПланированияНовые.ОтборПоОтветственному КАК ОтборПоОтветственному,
	|	ЭтапыПланированияНовые.ВидПлана.ТипПлана КАК ВидПланаТипПлана,
	|	ЭтапыПланированияНовые.ЭтапПланирования.Наименование КАК ЭтапПланированияНаименование,
	|	ЭтапыПланированияНовые.ВидПлана.КоличествоПериодов КАК ВидПланаКоличествоПериодов,
	|	ЭтапыПланированияНовые.ВидПлана.Наименование КАК ВидПланаНаименование
	|ИЗ
	|	ЭтапыПланированияНовые КАК ЭтапыПланированияНовые
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокПланированияЭтапа,
	|	ЭтоГруппа УБЫВ,
	|	ПорядокПланирования,
	|	КартинкаСтроки,
	|	ПериодПланирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОчередьРасчетаДефицитовПоЭтапам.Сценарий КАК Сценарий,
	|	ОчередьРасчетаДефицитовПоЭтапам.ВидПлана КАК ВидПлана,
	|	ОчередьРасчетаДефицитовПоЭтапам.ПериодПланирования КАК ПериодПланирования
	|ИЗ
	|	РегистрСведений.ОчередьРасчетаДефицитовПоЭтапам КАК ОчередьРасчетаДефицитовПоЭтапам
	|ГДЕ
	|	ОчередьРасчетаДефицитовПоЭтапам.Сценарий = &Сценарий
	|	И ОчередьРасчетаДефицитовПоЭтапам.ПериодПланирования МЕЖДУ &НачалоПериода И &ОкончаниеПериода";
	
	ТаблицаПериоды = РеквизитФормыВЗначение("Периоды", Тип("ТаблицаЗначений"));
	Запрос.УстановитьПараметр("ТаблицаПериоды", ТаблицаПериоды);
	Запрос.УстановитьПараметр("ЭтапыПланированияТаблица", ЭтапыПланированияТаблица.Выгрузить());
	Запрос.УстановитьПараметр("Сценарий", Объект.Сценарий);
	Запрос.УстановитьПараметр("НачалоПериода", Объект.НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", Объект.ОкончаниеПериода);
	
	Запрос.УстановитьПараметр("ПравоДоступаИзменениеПланЗакупок", ПравоДоступаИзменениеПланЗакупок);
	Запрос.УстановитьПараметр("ПравоДоступаЧтениеПланЗакупок", ПравоДоступаЧтениеПланЗакупок);
	Запрос.УстановитьПараметр("ПравоДоступаИзменениеПланПродаж", ПравоДоступаИзменениеПланПродаж);
	Запрос.УстановитьПараметр("ПравоДоступаЧтениеПланПродаж", ПравоДоступаЧтениеПланПродаж);
	Запрос.УстановитьПараметр("ПравоДоступаИзменениеПланПродажПоКатегориям", ПравоДоступаИзменениеПланПродажПоКатегориям);
	Запрос.УстановитьПараметр("ПравоДоступаЧтениеПланПродажПоКатегориям", ПравоДоступаЧтениеПланПродажПоКатегориям);
	Запрос.УстановитьПараметр("ПравоДоступаИзменениеПланСборкиРазборки", ПравоДоступаИзменениеПланСборкиРазборки);
	Запрос.УстановитьПараметр("ПравоДоступаЧтениеПланСборкиРазборки", ПравоДоступаЧтениеПланСборкиРазборки);
	Запрос.УстановитьПараметр("ПравоДоступаИзменениеПланПроизводства", ПравоДоступаИзменениеПланПроизводства);
	Запрос.УстановитьПараметр("ПравоДоступаЧтениеПланПроизводства", ПравоДоступаЧтениеПланПроизводства);
	Запрос.УстановитьПараметр("ПравоДоступаИзменениеПланВнутреннихПотреблений", ПравоДоступаИзменениеПланВнутреннихПотреблений);
	Запрос.УстановитьПараметр("ПравоДоступаЧтениеПланВнутреннихПотреблений", ПравоДоступаЧтениеПланВнутреннихПотреблений);
	Запрос.УстановитьПараметр("ПравоДоступаИзменениеПланОстатков", ПравоДоступаИзменениеПланОстатков);
	Запрос.УстановитьПараметр("ПравоДоступаЧтениеПланОстатков", ПравоДоступаЧтениеПланОстатков);
	
	Запрос.УстановитьПараметр("Ответственный", Объект.Ответственный);
	Запрос.УстановитьПараметр("ОтборОтветственный", ЗначениеЗаполнено(Объект.Ответственный));
	
	УстановитьПривилегированныйРежим(Истина);
	ЗапросПакет = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	СтатусПересчета = ЗапросПакет[8].Выбрать();
	СтатусПересчета.Следующий();
	
	Если СтатусПересчета.ИзмениласьСтруктура = Null Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТаблицаЭтапыПланирования = ЗапросПакет[10].Выгрузить();
	Если УстановитьИндикаторПересчетаДефицита 
		Или ТаблицаЭтапыПланирования.Количество() >0 Тогда
		УстановитьИндикаторПересчетаДефицита = Ложь;
		ТекущаяСтраницаНовая = Элементы.СтраницаРассчитывается; 
	Иначе
		ТекущаяСтраницаНовая = Элементы.СтраницаРассчитана;
	КонецЕсли;
	
	Если Элементы.РасчетДефицитовПоЭтапам.ТекущаяСтраница<>ТекущаяСтраницаНовая Тогда
		Элементы.РасчетДефицитовПоЭтапам.ТекущаяСтраница = ТекущаяСтраницаНовая;
	КонецЕсли;
	
	Если Не СтатусПересчета.ИзмениласьСтруктура 
		И Не СтатусПересчета.ИзменилисьИндикаторы 
		И Не СтатусПересчета.ИзменилисьОтборы Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтатусПересчета.ИзменилисьИндикаторы Тогда
		ТаймерКонтроляПересчетаДефецитов = 0.5;
	КонецЕсли;
	
	ТаблицаЭтапыПланирования = ЗапросПакет[9].Выгрузить();
	ЭтапыПланированияТаблица.Загрузить(ТаблицаЭтапыПланирования);
	
	ПорядокПланирования = Неопределено;
	ПорядокПланированияКорректировки = Неопределено;
	ЭлементЭтапПланирования = ЭтапыПланирования;
	ЭлементВидПлана = ЭтапыПланирования;
	
	Если СтатусПересчета.ИзмениласьСтруктура Тогда
		ЭтапыПланирования.ПолучитьЭлементы().Очистить();
	КонецЕсли;
	
	Для Каждого Строка Из ТаблицаЭтапыПланирования Цикл
		
		Если Строка.ЭтоГруппа Тогда
			Если ПорядокПланирования <> Строка.ПорядокПланирования Тогда
				Если СтатусПересчета.ИзмениласьСтруктура Тогда
					ЭлементЭтапПланирования = ЭтапыПланирования.ПолучитьЭлементы().Добавить();
					ЗаполнитьЗначенияСвойств(ЭлементЭтапПланирования,Строка);
					ПорядокПланирования = Строка.ПорядокПланирования;
					Если Не ЗначениеЗаполнено(Строка.ВидПлана) Тогда
						ЭлементЭтапПланирования.Представление = НСтр("ru = 'Баланс планов'");
					КонецЕсли;
				Иначе
					Для Каждого ЭтапыПланированияЭтап Из ЭтапыПланирования.ПолучитьЭлементы() Цикл
						Если ЭтапыПланированияЭтап.ВидПлана = Строка.ВидПлана Тогда
							ЭлементЭтапПланирования = ЭтапыПланированияЭтап;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		
			ЭлементЭтапПланирования["Состояние_" + Строка.ИмяКолонки] = Строка.Состояние;
			ЭлементЭтапПланирования["Статус_" + Строка.ИмяКолонки] = Строка.СтатусПорядок;
			ЭлементЭтапПланирования["ОтборПоОтветственному"] = Строка.ОтборПоОтветственному;
		Иначе
			Если Строка.КартинкаСтроки = 4 Тогда
				
				Если ПорядокПланированияКорректировки <> Строка.ПорядокПланирования Тогда
					
					Если ЗначениеЗаполнено(Строка.ВидПлана) Тогда
						ЭлементРодитель = ЭлементВидПлана;
					Иначе 
						ЭлементРодитель = ЭлементЭтапПланирования;
					КонецЕсли;
					
					Если СтатусПересчета.ИзмениласьСтруктура Тогда
						ЭлементВидПланаКорректировка = ЭлементРодитель.ПолучитьЭлементы().Добавить();
						ЗаполнитьЗначенияСвойств(ЭлементВидПланаКорректировка,Строка);
						
					Иначе
						Для Каждого ЭтапыПланированияВидПлана Из ЭлементРодитель.ПолучитьЭлементы() Цикл
							Если ЭтапыПланированияВидПлана.ВидПлана = Строка.ВидПлана Тогда
								ЭлементВидПланаКорректировка = ЭтапыПланированияВидПлана;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					ПорядокПланированияКорректировки = Строка.ПорядокПланирования;
					
				КонецЕсли;
				
				ЭлементВидПланаКорректировка["Состояние_" + Строка.ИмяКолонки] = Строка.Состояние;
				ЭлементВидПланаКорректировка["Статус_" + Строка.ИмяКолонки] = Строка.СтатусПорядок;
				ЭлементВидПланаКорректировка["ОтборПоОтветственному"] = Строка.ОтборПоОтветственному;
				Продолжить;
				
			КонецЕсли;
			
			Если ПорядокПланирования <> Строка.ПорядокПланирования Тогда
				Если СтатусПересчета.ИзмениласьСтруктура Тогда
					ЭлементВидПлана = ЭлементЭтапПланирования.ПолучитьЭлементы().Добавить();
					ЗаполнитьЗначенияСвойств(ЭлементВидПлана,Строка);
					ПорядокПланирования = Строка.ПорядокПланирования;
				Иначе
					Для Каждого ЭтапыПланированияВидПлана Из ЭлементЭтапПланирования.ПолучитьЭлементы() Цикл
						Если ЭтапыПланированияВидПлана.ВидПлана = Строка.ВидПлана Тогда
							ЭлементВидПлана = ЭтапыПланированияВидПлана;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		
			ЭлементВидПлана["Состояние_" + Строка.ИмяКолонки] = Строка.Состояние;
			ЭлементВидПлана["Статус_" + Строка.ИмяКолонки] = Строка.СтатусПорядок;
			ЭлементВидПлана["ОтборПоОтветственному"] = Строка.ОтборПоОтветственному;
		КонецЕсли;
	КонецЦикла;
	
	ЭтапыПланированияТаблица.Загрузить(ТаблицаЭтапыПланирования);
	ОбновитьПомощникПланирования();
	АнализДефицитов();
	Возврат СтатусПересчета.ИзмениласьСтруктура
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДеревоЭтапов()
	
	Если Не ЗначениеЗаполнено(Объект.Сценарий)
		Или Элементы.ЭтапыПланирования.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПредыдущийАктивныйВидПлана = ЭтапыПланирования.НайтиПоИдентификатору(Элементы.ЭтапыПланирования.ТекущаяСтрока).ВидПлана;
	
	ИзмениласьСтруктура = ОбновитьДеревоЭтаповНаСервере();
	ЗапускФоновогоЗаданияПомощникПланирования();
	Если ИзмениласьСтруктура Тогда
		Для каждого СтрокаДерева Из ЭтапыПланирования.ПолучитьЭлементы() Цикл
			Элементы.ЭтапыПланирования.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Истина);
		КонецЦикла;
		
		ПодключитьОбработчикОжидания(
			"Подключаемый_АктивизироватьПредыдущийВидПлана",
			0.1,
			Истина);
	ИначеЕсли Элементы.ДетализацияТоваров.Видимость Тогда
		Элементы.ДетализацияТоваров.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АктивизироватьПредыдущийВидПлана()
	
	ЭтапыПланированияЭлементы = ЭтапыПланирования.ПолучитьЭлементы();
	Для Каждого ЭтапыПланированияЭлемент Из ЭтапыПланированияЭлементы Цикл
		ВидПланаЭлементы = ЭтапыПланированияЭлемент.ПолучитьЭлементы();
		Для Каждого ВидПланаЭлемент Из ВидПланаЭлементы Цикл
			Если ВидПланаЭлемент.ВидПлана = ПредыдущийАктивныйВидПлана Тогда
				ТекущийИдентификаторСтроки = ВидПланаЭлемент.ПолучитьИдентификатор();
				Элементы.ЭтапыПланирования.ТекущаяСтрока = ТекущийИдентификаторСтроки;
				Возврат;
			КонецЕсли;
		КонецЦикла;
		Если ЭтапыПланированияЭлемент.ВидПлана = ПредыдущийАктивныйВидПлана Тогда
			ТекущийИдентификаторСтроки = ЭтапыПланированияЭлемент.ПолучитьИдентификатор();
			Элементы.ЭтапыПланирования.ТекущаяСтрока = ТекущийИдентификаторСтроки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьДетализацию(ВидПлана, ПериодПланирования, УчитыватьНачальныйОстаток, ЭтоКорректировка)
	
	ДетализацияТоваров.Параметры.УстановитьЗначениеПараметра("Сценарий",Объект.Сценарий);
	ДетализацияТоваров.Параметры.УстановитьЗначениеПараметра("ПериодПланирования",ПериодПланирования);
	ДетализацияТоваров.Параметры.УстановитьЗначениеПараметра("ВидПлана",ВидПлана);
	ДетализацияТоваров.Параметры.УстановитьЗначениеПараметра("УчитыватьНачальныйОстаток",УчитыватьНачальныйОстаток);
	ДетализацияТоваров.Параметры.УстановитьЗначениеПараметра("КорректировкаПотребностей",ЭтоКорректировка);
	
	РевизитыВидаПлана = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидПлана, "ПланированиеОстатков,ТипПлана,ПланированиеПотребностей,Родитель,ЗаполнятьПоДефициту,ЭтоГруппа");
	РодительПланированиеПотребностей = Ложь;
	Если ЗначениеЗаполнено(РевизитыВидаПлана.Родитель) Тогда
		РодительПланированиеПотребностей = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РевизитыВидаПлана.Родитель, "ПланированиеПотребностей");
	КонецЕсли;
	
	Элементы.ДетализацияТоваровНачальныйОстаток.Видимость = ВидПлана = Справочники.ВидыПланов.ПустаяСсылка()
												ИЛИ РевизитыВидаПлана.ПланированиеОстатков
												ИЛИ	РевизитыВидаПлана.ТипПлана = Перечисления.ТипыПланов.ПланОстатков;
											
	Элементы.ДетализацияТоваровПриход.Видимость = ВидПлана = Справочники.ВидыПланов.ПустаяСсылка()
													ИЛИ Не РевизитыВидаПлана.ПланированиеПотребностей
													И Не РодительПланированиеПотребностей
													И Не ЭтоКорректировка
													И РевизитыВидаПлана.ТипПлана <> Перечисления.ТипыПланов.ПланОстатков
													И Не РевизитыВидаПлана.ПланированиеОстатков;
													
	Элементы.ДетализацияТоваровРасход.Видимость = ВидПлана = Справочники.ВидыПланов.ПустаяСсылка()
													ИЛИ РевизитыВидаПлана.ПланированиеПотребностей
													ИЛИ РодительПланированиеПотребностей;
													
	Элементы.ДетализацияТоваровКорректировкаРасхода.Видимость = ВидПлана <> Справочники.ВидыПланов.ПустаяСсылка()
														И Не РодительПланированиеПотребностей
														И Не РевизитыВидаПлана.ПланированиеПотребностей
														И РевизитыВидаПлана.ТипПлана <> Перечисления.ТипыПланов.ПланОстатков
														И Не РевизитыВидаПлана.ПланированиеОстатков;
												
	Элементы.ДетализацияТоваровПотребность.Видимость = ВидПлана <> Справочники.ВидыПланов.ПустаяСсылка() И ((РевизитыВидаПлана.ЗаполнятьПоДефициту <> Null И РевизитыВидаПлана.ЗаполнятьПоДефициту) 
													ИЛИ (РевизитыВидаПлана.ЭтоГруппа И НЕ РевизитыВидаПлана.ПланированиеПотребностей И НЕ РевизитыВидаПлана.ПланированиеОстатков));
	
	Элементы.ДетализацияТоваровКИзменению.Видимость = ВидПлана <> Справочники.ВидыПланов.ПустаяСсылка() И ((РевизитыВидаПлана.ЗаполнятьПоДефициту <> Null И РевизитыВидаПлана.ЗаполнятьПоДефициту) 
													ИЛИ (РевизитыВидаПлана.ЭтоГруппа И НЕ РевизитыВидаПлана.ПланированиеПотребностей И НЕ РевизитыВидаПлана.ПланированиеОстатков));
	
	Элементы.ДетализацияТоваровКонечныйОстаток.Видимость = ВидПлана = Справочники.ВидыПланов.ПустаяСсылка();
	
КонецПроцедуры

#Область ФоновыеЗадания

&НаКлиенте
Процедура ЗапуститьФоновоеЗадание(ИмяЗадания, НаименованиеЗадания, ИмяПроцедуры, ПараметрыПроцедуры)
	
	ОчиститьСообщения();
	
	РезультатЗапуска = ЗапуститьФоновоеЗаданиеНаСервере(
		НаименованиеЗадания,
		ИмяПроцедуры,
		ПараметрыПроцедуры);
	
	Если РезультатЗапуска.НачатьОжидание Тогда
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			ДлительнаяОперация,
			Новый ОписаниеОповещения("ВыполнитьВФонеЗавершение", ЭтотОбъект, Новый Структура("ИмяЗадания", ИмяЗадания)),
			ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект));
		
	Иначе
		
		ТаймерКонтроляПересчетаДефецитов = 0.5;
		ПересчитатьЭтапыИИндикаторы();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьФоновоеЗаданиеНаСервере(НаименованиеЗадания, ИмяПроцедуры, ПараметрыПроцедуры)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыПроцедуры, ПараметрыВыполнения);
	
	НачатьОжидание = Истина;
	
	Если ДлительнаяОперация.Статус <> "Выполняется" Тогда
		
		НачатьОжидание = Ложь;
		ДлительнаяОперация = Неопределено;
		
	КонецЕсли;
	
	Возврат Новый Структура("НачатьОжидание", НачатьОжидание);
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьВФонеЗавершение(Результат, ДопПараметры) Экспорт
	
	ДлительнаяОперация = Неопределено;
	
	Если Результат <> Неопределено Тогда
		
		ТаймерКонтроляПересчетаДефецитов = 0.5;
		ПересчитатьЭтапыИИндикаторы();
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
#Область ПомощникПланирования

&НаКлиенте
Процедура ЗапускФоновогоЗаданияПомощникПланирования()
	
	Если ВключитьЗаполнениеПоДефицитамПомощникПланирования И НовоеФоновоеЗадание Тогда 
		ПараметрыПроцедуры = Новый Структура;
		ПараметрыПроцедуры.Вставить("Сценарий",Объект.Сценарий);
		ПараметрыПроцедуры.Вставить("ВидПлана",ЭлементПересчета[0].ВидПлана);
		ПараметрыПроцедуры.Вставить("НачалоПериода",ЭлементПересчета[0].ПериодНачала);
		ПараметрыПроцедуры.Вставить("ОкончаниеПериода",ЭлементПересчета[0].ПериодКонца);
		НовоеФоновоеЗадание = Ложь;
		ЗапуститьФоновоеЗадание("ПерерасчетПомощникПланирования",
		НСтр("ru = 'Глобальный перерасчет помощник планирования'"),
		"Обработки.УправлениеПроцессомПланирования.ПерерасчетПомощникПланирования",
		ПараметрыПроцедуры);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура АнализДефицитов()
	
	ПервыйПлан = ПоискПервогоДефицитногоПлана();
	
	Если ПервыйПлан = Неопределено Тогда
		ВключитьЗаполнениеПоДефицитамПомощникПланирования = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ВключитьЗаполнениеПоДефицитамПомощникПланирования Тогда
		Если ЭлементПересчета.Количество() > 0 Тогда
			Если (ЭлементПересчета[0].ВидПлана = ПервыйПлан.ВидПлана
				И ЭлементПересчета[0].ПериодНачала = ПервыйПлан.ПериодНачала
				И ЭлементПересчета[0].ПериодКонца = ПервыйПлан.ПериодКонца)
				Тогда
				Возврат;
			Иначе 
				ЭлементПересчета.Очистить();
				НоваяСтрока = ЭлементПересчета.Добавить();
				НоваяСтрока.ВидПлана = ПервыйПлан.ВидПлана;
				НоваяСтрока.ПериодНачала = ПервыйПлан.ПериодНачала;
				НоваяСтрока.ПериодКонца = ПервыйПлан.ПериодКонца;
				НоваяСтрока.СтатусПорядок = ПервыйПлан.СтатусПорядок;
				НоваяСтрока.НомерВТаблице = ПервыйПлан.НомерВТаблице;
				НоваяСтрока.Состояние = ПервыйПлан.Состояние;
				НоваяСтрока.ЗаполнениеПоДефецитам = ПервыйПлан.ЗаполнениеПоДефецитам;
				НоваяСтрока.ЭтапПланирования = ПервыйПлан.ЭтапПланирования;
				НоваяСтрока.Имя = ПервыйПлан.Имя;
				НоваяСтрока.ПериодВТаблице = ПервыйПлан.ПериодВТаблице;
				НовоеФоновоеЗадание = Истина;	
			КонецЕсли;
		Иначе
			ЭлементПересчета.Очистить();
			НоваяСтрока = ЭлементПересчета.Добавить();
			НоваяСтрока.ВидПлана = ПервыйПлан.ВидПлана;
			НоваяСтрока.ПериодНачала = ПервыйПлан.ПериодНачала;
			НоваяСтрока.ПериодКонца = ПервыйПлан.ПериодКонца;
			НоваяСтрока.СтатусПорядок = ПервыйПлан.СтатусПорядок;
			НоваяСтрока.НомерВТаблице = ПервыйПлан.НомерВТаблице;
			НоваяСтрока.Состояние = ПервыйПлан.Состояние;
			НоваяСтрока.ЗаполнениеПоДефецитам = ПервыйПлан.ЗаполнениеПоДефецитам;
			НоваяСтрока.ЭтапПланирования = ПервыйПлан.ЭтапПланирования;
			НоваяСтрока.Имя = ПервыйПлан.Имя;
			НоваяСтрока.ПериодВТаблице = ПервыйПлан.ПериодВТаблице;
			НовоеФоновоеЗадание = Истина;
		КонецЕсли;
	Иначе 
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоискПервогоДефицитногоПлана()
	
	Для Каждого План Из ТаблицаЭлементовПомощникаПланированияТекущийПериод Цикл 
		Если План.ЗаполнениеПоДефецитам И План.Состояние = 1 Тогда 
			Возврат План;	
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ОбновитьПомощникПланирования()
	Элементы.СкрытьПомощникПланирования.Видимость = Истина;
	ОчищениеОбластиПомощникПланирования();
	ЭлементыПомощникаПланированияТаблица.Очистить();
	СоздатьПомощника();
	
	
КонецПроцедуры

&НаСервере
Процедура ОчищениеОбластиПомощникПланирования()
	
	ТаблицаЭлементовПомощникаПланированияТекущийПериод.Очистить();
	ПомощникПланированияТаблицаВажныеГруппы = Элементы.ПомощникПланирования;
	СписокНаУдаление = Новый Массив;
	
	Для Каждого Элемент Из ПомощникПланированияТаблицаВажныеГруппы.ПодчиненныеЭлементы Цикл 
		СписокНаУдаление.Добавить(Элемент);
	КонецЦикла;
	
	КоличествоЭлем = СписокНаУдаление.Количество();
	
	Для Счетчик = 0 По (КоличествоЭлем-1) Цикл
		Элементы.Удалить(СписокНаУдаление[Счетчик]);
	КонецЦикла;
	
	
КонецПроцедуры

&НаСервере
Процедура СоздатьПомощника()
	
	КоличествоЭлементовПомощника = 0;
	СчетчикПланов = 0;
	СоздатьТаблицаЭлементовПомощникаПланированияТекущийПериод();
	СоздатьГрафическийИнтерфейс();
	СоздатьДанныеКорриктировок();
	ЗаполнитьПоДефицитамНаСервере();
	ПроверитьНаличиеЭлементовПомощникПланирования();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьТаблицаЭлементовПомощникаПланированияТекущийПериод()
	
	ТекущаяДатаНачалаПериода = ПланированиеКлиентСервер.РассчитатьДатуНачалаПериода(ТекущаяДатаСеанса(),Объект.Периодичность);
	НайденЭтапПланирования    = Ложь;
	ОбработкаАктуальнойГруппы = Ложь;
	ТипПланирования = Неопределено;
	ВидАктуальногоПлана = Неопределено;
	КолвоАктуальныхПланов = 0;
	ЗаполнениеПоДефицитуПроблемы = Ложь;
	АктуальныеДанныеПроблемы = Ложь;
	Для Каждого План Из ЭтапыПланированияТаблица Цикл
		
		Если План.ВидПланаТипПлана = Перечисления.ТипыПланов.ПланОстатков 
			И Не План.ЭтоГруппа
			И План.ПериодПланирования = ТекущаяДатаНачалаПериода  Тогда
			Если Не ПроверкаПравДоступаПомощникПланирования(План.ВидПланаТипПлана)Тогда 	
				Продолжить;
			КонецЕсли;
			Если План.СтатусПорядок = 9 Тогда
				АктуальныеДанныеПроблемы = Истина;
			КонецЕсли;
			НовыйЭлемент = ТаблицаЭлементовПомощникаПланированияТекущийПериод.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, План);
			НовыйЭлемент.ПериодНачала = План.ПериодПланирования;
			НовыйЭлемент.ПериодКонца  = ПланированиеКлиентСервер.РассчитатьДатуОкончанияПериода(План.ПериодПланирования,Объект.Периодичность);
			НовыйЭлемент.ЗаполнениеПоДефецитам = Ложь;
			НовыйЭлемент.ТипПланов = "Остатки";
		КонецЕсли;
		
		Если План.ЭтоГруппа И ТипПланирования <> План.ВидПлана Тогда
			ОбработкаАктуальнойГруппы = Ложь;
		КонецЕсли;
		
		Если ОбработкаАктуальнойГруппы И Не(План.ЗаполнятьПоДефициту) 
			И Не(План.ЭтоГруппа)
			И План.ПериодПланирования >= ТекущаяДатаНачалаПериода Тогда
			Если Не ПроверкаПравДоступаПомощникПланирования(План.ВидПланаТипПлана) Тогда 	
				Продолжить;
			КонецЕсли;
			Если План.СтатусПорядок = 9 Тогда
				АктуальныеДанныеПроблемы = Истина;
			КонецЕсли;
			Если План.ВидПлана <> ВидАктуальногоПлана Тогда
				ВидАктуальногоПлана   = План.ВидПлана;
				КолвоАктуальныхПланов = 0;
			КонецЕсли;
			Если КолвоАктуальныхПланов >= План.ВидПланаКоличествоПериодов Тогда
				Продолжить;
			КонецЕсли;
			КолвоАктуальныхПланов = КолвоАктуальныхПланов + 1;
			НовыйЭлемент = ТаблицаЭлементовПомощникаПланированияТекущийПериод.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, План);
			НовыйЭлемент.ПериодНачала = План.ПериодПланирования;
			НовыйЭлемент.ПериодКонца  = ПланированиеКлиентСервер.РассчитатьДатуОкончанияПериода(План.ПериодПланирования,Объект.Периодичность);
			НовыйЭлемент.ТипПланов    = "Исходные";
		КонецЕсли;
		
		Если План.ЭтоГруппа
			И Не НайденЭтапПланирования Тогда
			ГруппаОстатков = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(План.ЭтапПланирования, "ПланированиеОстатков");
			Если Не ГруппаОстатков = Неопределено Тогда
				Если  Не ГруппаОстатков Тогда
					ТипПланирования = План.ВидПлана;
					НайденЭтапПланирования    = Истина;
					ОбработкаАктуальнойГруппы = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Не(План.ЭтоГруппа) 
			И План.ЗаполнятьПоДефициту Тогда
			Если Не ПроверкаПравДоступаПомощникПланирования(План.ВидПланаТипПлана) Тогда 	
				Продолжить;
			КонецЕсли;
			Если План.Состояние = 1 Тогда
				ЗаполнениеПоДефицитуПроблемы = Истина;
			КонецЕсли;
			НовыйЭлемент = ТаблицаЭлементовПомощникаПланированияТекущийПериод.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, План);
			НовыйЭлемент.ПериодНачала = План.ПериодПланирования;
			НовыйЭлемент.ПериодКонца = ПланированиеКлиентСервер.РассчитатьДатуОкончанияПериода(План.ПериодПланирования,Объект.Периодичность);
			НовыйЭлемент.ЗаполнениеПоДефецитам = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаличиеЭлементовПомощникПланирования()
	
	Для Каждого ЭлементПомощника Из Элементы.ПомощникПланирования.ПодчиненныеЭлементы Цикл
		Если ЭлементПомощника.ПодчиненныеЭлементы[1].ПодчиненныеЭлементы.Количество() > 0 Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	Элементы.СкрытьПомощникПланирования.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьДанныеКорриктировок()
	
	КорректировкаГруппа = СоздатьГруппуПомощника("ПроверитьКорректировки");
	КорректировкаГруппа.Видимость = Ложь;
	СоздатьЗаголовок(КорректировкаГруппа,Ложь,Нстр("ru = 'Проверить корректировки'"),"Корректировка");
	ТелоПомощникаКр = СоздатьТелоПомощника(КорректировкаГруппа,Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КорректировкаПлановыхПотребностей.Статус КАК Статус,
	|	КорректировкаПлановыхПотребностей.Ссылка КАК Ссылка,
	|	КорректировкаПлановыхПотребностей.Представление КАК Представление,
	|	КорректировкаПлановыхПотребностей.Период КАК Период,
	|	КорректировкаПлановыхПотребностей.ВидПлана КАК ВидПлана,
	|	КорректировкаПлановыхПотребностей.ВидПлана.Наименование КАК ВидПланаНаименование
	|ИЗ
	|	Документ.КорректировкаПлановыхПотребностей КАК КорректировкаПлановыхПотребностей
	|ГДЕ
	|	КорректировкаПлановыхПотребностей.Сценарий = &Сценарий
	|	И КорректировкаПлановыхПотребностей.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И КорректировкаПлановыхПотребностей.Статус = &Статус
	|	И КорректировкаПлановыхПотребностей.Проведен = ИСТИНА";
	
	Запрос.УстановитьПараметр("Сценарий", Объект.Сценарий);
	Запрос.УстановитьПараметр("НачалоПериода", Объект.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", Объект.ОкончаниеПериода);
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыПлановыхКорректировок.КПроверке);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выгрузить();                  
	
	НовыйМассив = Новый Массив;
	Для Каждого План Из ВыборкаДетальныеЗаписи Цикл  
		НоваяСтрока = ТаблицаКорректировок.Добавить();
		НоваяСтрока.Имя = "ЭлементПомощника"+Строка(КоличествоЭлементовПомощника);
		НоваяСтрока.Документ = План.Ссылка;
		ЗаголовокЭлемента=НСтр("ru = 'Скорректировать'");
		
		
		ПараметрыПроцедуры = Новый Структура;
		ПараметрыПроцедуры.Вставить("ТипДействия",ЗаголовокЭлемента);
		ПараметрыПроцедуры.Вставить("ТипДокумента", План.Представление);
		ПараметрыПроцедуры.Вставить("ВидПлана",План.ВидПланаНаименование);
		ПараметрыПроцедуры.Вставить("ПериодНачала", План.Период);
		
		СоздатьЭлементыПомощника(ПараметрыПроцедуры,
		ТелоПомощникаКр,
		"",
		Истина);
		КорректировкаГруппа.Видимость = Истина;
		СозданиеГрафическогоОформления = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПомощникПланированияПоказатьВТаблице(ВидПлана,Дата)
	
	ЭтапыПланированияЭлементы = ЭтапыПланирования.ПолучитьЭлементы();
	
	Для Каждого ЭтапыПланированияЭлемент Из ЭтапыПланированияЭлементы Цикл
		ВидПланаЭлементы = ЭтапыПланированияЭлемент.ПолучитьЭлементы();
		Для Каждого ВидПланаЭлемент Из ВидПланаЭлементы Цикл
			Если ВидПланаЭлемент.ВидПлана = ВидПлана Тогда
				ТекущийИдентификаторСтроки = ВидПланаЭлемент.ПолучитьИдентификатор();
				Элементы.ЭтапыПланирования.ТекущаяСтрока = ТекущийИдентификаторСтроки;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЭтапыПланированияЭлемент.ВидПлана = ВидПлана Тогда
			ТекущийИдентификаторСтроки = ЭтапыПланированияЭлемент.ПолучитьИдентификатор();
			Элементы.ЭтапыПланирования.ТекущаяСтрока = ТекущийИдентификаторСтроки;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрОтбора = Новый Структура("Дата",Дата);
	Выборка = ПомощникПланированияСчетчикПериодов.НайтиСтроки(ПараметрОтбора);
	Если Выборка.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
	Элементы.ЭтапыПланирования.ТекущийЭлемент =  Элементы.ЭтапыПланирования.ПодчиненныеЭлементы[Выборка[0].Счетчик];
	
КонецПроцедуры

&НаСервере
Процедура СоздатьГрафическийИнтерфейс()
	
	АктуализироватьИсходныеДанныеГруппа = СоздатьГруппуПомощника("АктуализироватьИсходныеДанные");
	СоздатьЗаголовок(АктуализироватьИсходныеДанныеГруппа,
	Не АктуальныеДанныеПроблемы,
	НСТР("ru = 'Актуализировать исходные данные'"));
	
	ТелоПомощникаАкт = СоздатьТелоПомощника(АктуализироватьИсходныеДанныеГруппа,АктуальныеДанныеПроблемы);
	АктуализироватьИсходныеДанныеГруппа.Видимость = АктуальныеДанныеПроблемы;
	
	
	ПерерасчитатьПоДефицитамГруппа = СоздатьГруппуПомощника("ПерерасчитатьПоДефицитам");
	СоздатьЗаголовок(ПерерасчитатьПоДефицитамГруппа,
	Не ЗаполнениеПоДефицитуПроблемы,
	НСТР("ru = 'Перерасчитать по дефицитам'"),
	"Дефицит");
	ТелоПомощникаДФ = СоздатьТелоПомощника(ПерерасчитатьПоДефицитамГруппа,ЗаполнениеПоДефицитуПроблемы);
	ПерерасчитатьПоДефицитамГруппа.Видимость = ЗаполнениеПоДефицитуПроблемы;
	
	
	ПодсказкаДобавленаОстатки        = Ложь;
	ПодсказкаДобавленаИсходныеПланы  = Ложь;
	ПодсказкаДобавленаДефициты       = Ложь;
	
	Для Каждого Элемент Из ТаблицаЭлементовПомощникаПланированияТекущийПериод Цикл
		Если Не Элемент.ЗаполнениеПоДефецитам Тогда
			ЗаголовокЭлемента = Неопределено;
			Если Элемент.СтатусПорядок = 9 Тогда 
				ЗаголовокЭлемента=НСтр("ru = 'Создать'");
			КонецЕсли;
			Если  ЗаголовокЭлемента <> Неопределено Тогда
				Если Элемент.ЗаполнениеПоДефецитам Тогда
					ПараметрыПроцедуры = Новый Структура;
					ПараметрыПроцедуры.Вставить("ТипДействия",ЗаголовокЭлемента);
					ПараметрыПроцедуры.Вставить("ТипДокумента", Элемент.ВидПланаНаименование);
					ПараметрыПроцедуры.Вставить("ВидПлана", Элемент.ЭтапПланированияНаименование);
					ПараметрыПроцедуры.Вставить("ПериодНачала", Элемент.ПериодНачала);
					СоздатьЭлементыПомощника(ПараметрыПроцедуры,ТелоПомощникаДФ,Элемент);
				Иначе
					Если  Элемент.ТипПланов = "Остатки" Тогда
						Если Не ПодсказкаДобавленаОстатки Тогда
							НовыйЭлемент = Элементы.Добавить("ОстаткиПодЗаголовок",Тип("ДекорацияФормы"),ТелоПомощникаАкт);
							НовыйЭлемент.Заголовок = Новый ФорматированнаяСтрока(НСтр("ru = 'Для измения планов с текущего момента заведите планы остатков:'"),,ЦветаСтиля.ПоясняющийТекст);
							ПодсказкаДобавленаОстатки = Истина;
						КонецЕсли;
						
					КонецЕсли;
					Если  Элемент.ТипПланов = "Исходные" Тогда
						Если  Не ПодсказкаДобавленаИсходныеПланы Тогда
							НовыйЭлемент = Элементы.Добавить("ИсходныеПодЗаголовок",Тип("ДекорацияФормы"),ТелоПомощникаАкт);
							НовыйЭлемент.Заголовок = Новый ФорматированнаяСтрока(НСтр("ru = 'Для планирования на следующие периоды заполните планы:'"),,ЦветаСтиля.ПоясняющийТекст);
							ПодсказкаДобавленаИсходныеПланы = Истина;
						КонецЕсли;
					КонецЕсли;
					ПараметрыПроцедуры = Новый Структура;
					ПараметрыПроцедуры.Вставить("ТипДействия",ЗаголовокЭлемента);
					ПараметрыПроцедуры.Вставить("ТипДокумента", Элемент.ВидПланаНаименование);
					ПараметрыПроцедуры.Вставить("ВидПлана", Элемент.ЭтапПланированияНаименование);
					ПараметрыПроцедуры.Вставить("ПериодНачала", Элемент.ПериодНачала);
					СоздатьЭлементыПомощника(ПараметрыПроцедуры,ТелоПомощникаАкт,Элемент);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если  Элемент.Состояние = 1 Тогда
				Если Не ПодсказкаДобавленаДефициты Тогда
					КнопкаПересчета = Элементы.Добавить("ПересчитатьВсеПланы", Тип("КнопкаФормы"),ТелоПомощникаДФ);
					КнопкаПересчета.Заголовок = НСтр("ru = 'Перерасчитать по дефицитам все планы'");
					КнопкаПересчета.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
					КнопкаПересчета.ИмяКоманды = "ЗаполнениеДефицитов"; 
					ПодсказкаДобавленаДефициты = Истина;
				КонецЕсли;
				ЗаголовокЭлемента=НСтр("ru = 'Перерасчитать'");
				ПараметрыПроцедуры = Новый Структура;
				ПараметрыПроцедуры.Вставить("ТипДействия",ЗаголовокЭлемента);
				ПараметрыПроцедуры.Вставить("ТипДокумента", Элемент.ВидПланаНаименование);
				ПараметрыПроцедуры.Вставить("ВидПлана", Элемент.ЭтапПланированияНаименование);
				ПараметрыПроцедуры.Вставить("ПериодНачала", Элемент.ПериодНачала);
				СоздатьЭлементыПомощника(ПараметрыПроцедуры,ТелоПомощникаДФ,Элемент);
			КонецЕсли;
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементыПомощника(ПараметрыПроцедуры,Группа,ЭлементТаблицы ,Корректировка = Ложь )//Тип Действия - Создать,Перерасчитать
	ТипДействия = ПараметрыПроцедуры.ТипДействия;
	ТипДокумента = ПараметрыПроцедуры.ТипДокумента;
	ВидПлана = ПараметрыПроцедуры.ВидПлана;
	Дата = ПараметрыПроцедуры.ПериодНачала;
	
	ГруппаПомощника =Элементы.Добавить("ПодГруппаПомощникаПланирования"+Строка(КоличествоЭлементовПомощника), Тип("ГруппаФормы"),Группа);
	ГруппаПомощника.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаПомощника.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаПомощника.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ГруппаПомощника.ОтображатьЗаголовок = Ложь;
	ЧастиЗаголовка = Новый Массив;
	ОпределениеКолПериодовПомощникПланирования();
	ЧастиЗаголовка.Добавить(Новый ФорматированнаяСтрока(Строка(КоличествоЭлементовПомощника+1)+") ",,,,));
	ЧастиЗаголовка.Добавить(Новый ФорматированнаяСтрока(ТипДействия + " ",,ЦветаСтиля.ГиперссылкаЦвет,,ТипДействия));        ////|||||\\\\
	ЧастиЗаголовка.Добавить(Новый ФорматированнаяСтрока(ТипДокумента + ?(ВидПлана = "",""," " + Нстр("ru ='по'"))+" ",,,));
	ЧастиЗаголовка.Добавить(Новый ФорматированнаяСтрока(ВидПлана + " " + Нстр("ru ='на'") + " ",,,,));
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Сценарий, "ОтображатьНомерПериода") Тогда
		ТаблицаПериоды = ЭтаФорма.Периоды; // см. Планирование.ТаблицаПериоды
		Строки = ТаблицаПериоды.НайтиСтроки(Новый Структура("ДатаНачала",Дата));
		Если Строки.Количество() > 0 Тогда
			ЧастиЗаголовка.Добавить(Новый ФорматированнаяСтрока(Строки[0].Заголовок+" ",,,,));
		КонецЕсли;
	Иначе
		ЧастиЗаголовка.Добавить(Новый ФорматированнаяСтрока(Формат(Дата,"ДЛФ=ДД")+" ",,,,));
	КонецЕсли;
	 
	Элемент = Элементы.Добавить("ЭлементПомощника"+Строка(КоличествоЭлементовПомощника), Тип("ДекорацияФормы"), ГруппаПомощника);
	Элемент.Заголовок = Новый ФорматированнаяСтрока(ЧастиЗаголовка);
	
	Если Не Корректировка  Тогда
		Элемент.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОбработатьНажатиеНаГиперссылку");
		ЭлементТаблицы.Имя = Элемент.Имя;		
		Элемент = Элементы.Добавить("ЭлементПомощникаКартинка"+Строка(КоличествоЭлементовПомощника), Тип("ДекорацияФормы"), ГруппаПомощника);
		Элемент.Заголовок = Новый ФорматированнаяСтрока(БиблиотекаКартинок.ПоказатьВСписке,,,,"Активировать");
		Элемент.Подсказка = НСтр("ru ='Показать в списке'");
		
	КонецЕсли;
	Элемент.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОбработатьНажатиеНаГиперссылку");
	КоличествоЭлементовПомощника = КоличествоЭлементовПомощника + 1;
	
КонецПроцедуры


&НаСервере
Процедура ОпределениеКолПериодовПомощникПланирования()
	
	Счетчик = 1;
	ПомощникПланированияСчетчикПериодов.Очистить();
	ВидПлана = ЭтапыПланированияТаблица[0].ВидПлана;
	
	Для Каждого План Из ЭтапыПланированияТаблица Цикл 
		Если План.ЭтоГруппа Тогда
			Если ВидПлана <> План.ВидПлана Тогда 
				Возврат;
			КонецЕсли;
			НоваяСтрока = ПомощникПланированияСчетчикПериодов.Добавить();
			НоваяСтрока.Счетчик = Счетчик;
			НоваяСтрока.Дата = План.ПериодПланирования;
			Счетчик = Счетчик + 1;
		Иначе 
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СоздатьГруппуПомощника(Название, Родитель = Неопределено)
	
	Если Родитель = Неопределено Тогда
		Родитель = Элементы.ПомощникПланирования;
	КонецЕсли;
	
	Группа = Элементы.Добавить(Название, Тип("ГруппаФормы"), Родитель);
	Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	Группа.Отображение = ОтображениеОбычнойГруппы.Нет;
	Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Группа.ОтображатьЗаголовок = Ложь;	
	
	Возврат Группа;
	
КонецФункции

&НаСервере
Функция ПроверкаПравДоступаПомощникПланирования(ТипПлана)
	
	Если ТипПлана = Перечисления.ТипыПланов.ПланЗакупок Тогда
		Если Не ПравоДоступаИзменениеПланЗакупок Тогда
			Возврат Ложь;	
		КонецЕсли;
		Если Не ПравоДоступаЧтениеПланЗакупок Тогда
			Возврат Ложь;	
		КонецЕсли;
	КонецЕсли;
	
	Если  ТипПлана = Перечисления.ТипыПланов.ПланПродажПоКатегориям Тогда
		Если Не ПравоДоступаИзменениеПланПродажПоКатегориям Тогда
			Возврат Ложь;	
		КонецЕсли;
		Если Не ПравоДоступаЧтениеПланПродажПоКатегориям Тогда
			Возврат Ложь;	
		КонецЕсли;
	КонецЕсли;
	
	Если  ТипПлана = Перечисления.ТипыПланов.ПланПродаж Тогда
		Если Не ПравоДоступаИзменениеПланПродаж Тогда
			Возврат Ложь;	
		КонецЕсли;
		Если Не ПравоДоступаЧтениеПланПродаж Тогда
			Возврат Ложь;	
		КонецЕсли;
	КонецЕсли;
	
	Если  ТипПлана = Перечисления.ТипыПланов.ПланСборкиРазборки Тогда
		Если Не ПравоДоступаИзменениеПланСборкиРазборки Тогда
			Возврат Ложь;	
		КонецЕсли;
		Если Не ПравоДоступаЧтениеПланСборкиРазборки Тогда
			Возврат Ложь;	
		КонецЕсли;
	КонецЕсли;
	
	Если  ТипПлана = Перечисления.ТипыПланов.ПланОстатков Тогда
		Если Не ПравоДоступаИзменениеПланОстатков Тогда
			Возврат Ложь;	
		КонецЕсли;
		Если Не ПравоДоступаЧтениеПланОстатков Тогда
			Возврат Ложь;	
		КонецЕсли;
	КонецЕсли;
	
	Если  ТипПлана = Перечисления.ТипыПланов.ПланВнутреннихПотреблений Тогда
		Если Не ПравоДоступаИзменениеПланВнутреннихПотреблений Тогда
			Возврат Ложь;	
		КонецЕсли;
		Если Не ПравоДоступаЧтениеПланВнутреннихПотреблений Тогда
			Возврат Ложь;	
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СоздатьТелоПомощника(Группа,Видимость = Ложь)
	
	ТелоПомощника =Элементы.Добавить("ТелоПомощника"+Группа.Имя,Тип("ГруппаФормы"),Группа);
	ТелоПомощника.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ТелоПомощника.Отображение = ОтображениеОбычнойГруппы.СильноеВыделение;
	ТелоПомощника.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ТелоПомощника.Видимость = Видимость;
	ТелоПомощника.ОтображатьЗаголовок = Ложь;
	
	Возврат ТелоПомощника;
	
КонецФункции


// Параметры:
// 	Элемент - ДекорацияФормы -
// 	НавигационнаяСсылкаФорматированнойСтроки - Строка
// 	СтандартнаяОбработка - Булево
&НаКлиенте
Процедура Подключаемый_ОбработатьНажатиеНаГиперссылку(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	// 
	СтандартнаяОбработка = Ложь;
	
	Имя = СтрЗаменить(Элемент.Имя,"ЭлементПомощникаКартинка","ЭлементПомощника"); 
	ПараметрОтбора = Новый Структура("Имя",Имя);
	НужныйЭлемент = ТаблицаЭлементовПомощникаПланированияТекущийПериод.НайтиСтроки(ПараметрОтбора);
	
	Если НавигационнаяСсылкаФорматированнойСтроки= "Создать" Тогда
		Имя = СтрЗаменить(Элемент.Имя,"ЭлементПомощника","ЭлементПомощникаКартинка");
		ПомощникПланированияПоказатьВТаблице(НужныйЭлемент[0].ВидПлана,НужныйЭлемент[0].ПериодНачала);
		СписокВидовПланов = ПолучитьСписокВидовПлановДляОтбора(Элементы.ЭтапыПланирования.ТекущаяСтрока);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Сценарий",Объект.Сценарий);
		ПараметрыФормы.Вставить("ВидПлана",НужныйЭлемент[0].ВидПлана);
		ПараметрыФормы.Вставить("СписокВидовПланов",СписокВидовПланов);
		ПараметрыФормы.Вставить("Номенклатура",Неопределено);
		ПараметрыФормы.Вставить("Характеристика",Неопределено);
		ПараметрыФормы.Вставить("Назначение",Неопределено);
		ПараметрыФормы.Вставить("НачалоПериода",НужныйЭлемент[0].ПериодНачала);
		ПараметрыФормы.Вставить("ОкончаниеПериода",НужныйЭлемент[0].ПериодКонца);
		ПараметрыФормы.Вставить("ТипДанных","");
		ОткрытьФорму("Обработка.УправлениеПроцессомПланирования.Форма.ФормаДокументов", ПараметрыФормы, ЭтаФорма);
	ИначеЕсли   НавигационнаяСсылкаФорматированнойСтроки ="Перерасчитать" Тогда
		Если ВключитьЗаполнениеПоДефицитамПомощникПланирования Тогда
			Возврат;
		КонецЕсли;
		ПараметрыПроцедуры = Новый Структура;
		ПараметрыПроцедуры.Вставить("Сценарий",Объект.Сценарий);
		ПараметрыПроцедуры.Вставить("ВидПлана",НужныйЭлемент[0].ВидПлана);
		ПараметрыПроцедуры.Вставить("НачалоПериода",НужныйЭлемент[0].ПериодНачала);
		ПараметрыПроцедуры.Вставить("ОкончаниеПериода",НужныйЭлемент[0].ПериодКонца);
		ЗапуститьФоновоеЗадание(
			"ПерерасчетПомощникПланирования",
			НСтр("ru = 'Заполнить планы по дефицитам'"),
			"Обработки.УправлениеПроцессомПланирования.ПерерасчетПомощникПланирования",
			ПараметрыПроцедуры);
	ИначеЕсли   НавигационнаяСсылкаФорматированнойСтроки = "Активировать" Тогда
		ПомощникПланированияПоказатьВТаблице(НужныйЭлемент[0].ВидПлана,НужныйЭлемент[0].ПериодНачала);
	ИначеЕсли   НавигационнаяСсылкаФорматированнойСтроки = "Скорректировать" Тогда
		НужныйЭлементКориктировки = ТаблицаКорректировок.НайтиСтроки(Новый Структура("Имя",Элемент.Имя));
		Если   НужныйЭлементКориктировки.Количество() > 0 Тогда 
			ПраметрыФормы = Новый Структура("Ключ",НужныйЭлементКориктировки[0].Документ);
			ОткрытьФорму("Документ.КорректировкаПлановыхПотребностей.ФормаОбъекта",ПраметрыФормы);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЗаголовок(Группа, РазделСвернут,НазваниеЗаголовка,ТипЗаголовка="Актуализировать")
	ГруппаЗаголовка = Элементы.Добавить("ГруппаЗаголовков"+Группа.Имя,Тип("ГруппаФормы"),Группа);
	ГруппаЗаголовка.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаЗаголовка.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаЗаголовка.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ГруппаЗаголовка.ОтображатьЗаголовок = Ложь;
	Заголовок1 = Новый ФорматированнаяСтрока(НазваниеЗаголовка,Новый Шрифт(,,45),,,);
	Элемент = Элементы.Добавить("Картинка" + Группа.Имя, Тип("ДекорацияФормы"), ГруппаЗаголовка);
	Элемент.Вид = ВидДекорацииФормы.Картинка;
	Элемент.Гиперссылка = Истина;
	
	Если РазделСвернут  Тогда
		Элемент.Картинка = БиблиотекаКартинок.СтрелкаВправо;
	Иначе
		Элемент.Картинка = БиблиотекаКартинок.СтрелкаВниз;
	КонецЕсли;
	
	Элемент.РазмерКартинки = РазмерКартинки.АвтоРазмер;
	Элемент.УстановитьДействие("Нажатие", "Подключаемый_ОбработатьНажатиеНаКартинку");
	Элемент.Подсказка = НСтр("ru = 'Развернуть/свернуть раздел'");
	
	Элемент = Элементы.Добавить("Картинка1" + Группа.Имя, Тип("ДекорацияФормы"), ГруппаЗаголовка);
	Элемент.Вид = ВидДекорацииФормы.Картинка;
	Если ТипЗаголовка = "Актуализировать" Тогда
		Элемент.Картинка = БиблиотекаКартинок.Информация16;
	ИначеЕсли ТипЗаголовка = "Дефицит" Тогда 
		Элемент.Картинка = БиблиотекаКартинок.НавигацияОбновить;
	ИначеЕсли ТипЗаголовка = "Корректировка" Тогда 
		Элемент.Картинка = БиблиотекаКартинок.ПоказатьДанные;
	КонецЕсли;
	Элемент.Видимость = Истина;
	
	
	Элемент = Элементы.Добавить("Заголовок" + Группа.Имя, Тип("ДекорацияФормы"), ГруппаЗаголовка);
	Элемент.Вид = ВидДекорацииФормы.Надпись;
	Элемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
	Элемент.Заголовок  = Заголовок1;
КонецПроцедуры


// Параметры:
// 	Элемент - ДекорацияФормы -
&НаКлиенте
Процедура Подключаемый_ОбработатьНажатиеНаКартинку(Элемент)

	ПереключитьКартинку(Элемент.Имя);
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьКартинку(Заголовок)
	
	Элемент = Элементы.Найти(Заголовок);
	
	Если Элемент.Картинка = БиблиотекаКартинок.СтрелкаВправо Тогда
		Элемент.Картинка = БиблиотекаКартинок.СтрелкаВниз;
	Иначе
		Элемент.Картинка = БиблиотекаКартинок.СтрелкаВправо;
	КонецЕсли;
	
	ИзменениеВидимостиЭлементПомощника(Элемент.Родитель.Родитель);
	
КонецПроцедуры

&НаСервере
Процедура ИзменениеВидимостиЭлементПомощника(Элемент)
	
	ТелоПомощника = Элементы.Найти("ТелоПомощника"+Элемент.Имя);
	
	Если ТелоПомощника <> Неопределено Тогда
		ТелоПомощника.Видимость = Не ТелоПомощника.Видимость
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкрытьПомощникПланированияНажатиеНаСервере()
	
	Элементы.ПомощникПланирования.Видимость = Не Элементы.ПомощникПланирования.Видимость;
	Элементы.СкрытьПомощникПланирования.Заголовок = ?(Элементы.ПомощникПланирования.Видимость,НСтр("ru = 'Скрыть Помощник Планирования'"),НСтр("ru = 'Показать Помощник Планирования'"));		
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПомощникПланированияНажатие(Элемент)
	
	СкрытьПомощникПланированияНажатиеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДефицитам(Команда)
	
	УстановитьИндикаторПересчетаДефицита = Истина;
	ОбновитьДеревоЭтаповНаСервере();
	ЭлементПересчета.Очистить();
	ВключитьЗаполнениеПоДефицитамПомощникПланирования =  Не ВключитьЗаполнениеПоДефицитамПомощникПланирования;
	ЗаполнитьПоДефицитамНаСервере();
	АнализДефицитов();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДефицитамНаСервере()
	
	КнопкаПересчета = Элементы.Найти("ПересчитатьВсеПланы");
	Если КнопкаПересчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	КнопкаПересчета.Заголовок = ?(Не ВключитьЗаполнениеПоДефицитамПомощникПланирования,
	НСтр("ru = 'Перерасчитать по дефицитам все планы'"),
	НСтр("ru = 'Остановить перерасчет планов'"));
	
КонецПроцедуры

#КонецОбласти
