#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// Контекстно-независимая настройка формы.
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(Константы.ЕдиницаИзмеренияВеса)   КАК ЕдиницаИзмеренияВеса,
		|	ПРЕДСТАВЛЕНИЕ(Константы.ЕдиницаИзмеренияОбъема) КАК ЕдиницаИзмеренияОбъема,
		|	Константы.ВариантУпорядочиванияПотребностейПоЗаказамДляОбеспечения
		|		= ЗНАЧЕНИЕ(Перечисление.ВариантыУпорядочиванияПотребностейПоЗаказамДляОбеспечения.ПриоритетИДатаОтгрузки) КАК УпорядочиваниеПоДатеОтгрузки
		|ИЗ
		|	Константы КАК Константы";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	УпорядочиваниеПоДатеОтгрузки = Выборка.УпорядочиваниеПоДатеОтгрузки;
		
	ЗаголовокВес   = СтрШаблон(НСтр("ru = 'Вес (%1)'"), Выборка.ЕдиницаИзмеренияВеса);
	ЗаголовокОбъем = СтрШаблон(НСтр("ru = 'Объем (%1)'"), Выборка.ЕдиницаИзмеренияОбъема);
	
	Элементы.КорзинаСкладовВес.Заголовок = ЗаголовокВес;
	Элементы.КорзинаСкладовОбъем.Заголовок = ЗаголовокОбъем;
	Элементы.ТоварыВес.Заголовок   = ЗаголовокВес;
	Элементы.ТоварыОбъем.Заголовок = ЗаголовокОбъем;
	
	// Настройка формы по правам доступа.
	СтруктураДоступа = Обработки.УправлениеПеремещениемОбособленныхТоваров.СтруктураДоступа();
	
	Если Не СтруктураДоступа.ЗаказНаПеремещениеДоступен И Не СтруктураДоступа.ЗаказМатериаловДоступен Тогда
		ИскомыйЭлемент = Элементы.ВариантОформления.СписокВыбора.НайтиПоЗначению(
			Перечисления.ВариантыОформленияДокументовПеремещения.ЗаказНаПеремещение);
		Элементы.ВариантОформления.СписокВыбора.Удалить(ИскомыйЭлемент);
	КонецЕсли;
	
	Если Не СтруктураДоступа.ПеремещениеДоступно И Не СтруктураДоступа.ПередачаМатериаловДоступна Тогда
		ИскомыйЭлемент = Элементы.ВариантОформления.СписокВыбора.НайтиПоЗначению(
			Перечисления.ВариантыОформленияДокументовПеремещения.ПеремещениеТоваров);
		Элементы.ВариантОформления.СписокВыбора.Удалить(ИскомыйЭлемент);
	КонецЕсли;
	
	// Подписки стандартных подсистем.
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// Контекстно-зависимая настройка формы перенесена в "ВосстановитьНастройки".
	ВосстановитьНастройки();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Очистить();
	
	Если Не ЗначениеЗаполнено(Объект.ВариантОформления) Тогда
		
		ТекстСообщения = НСтр("ru = 'Оформление документов недоступно.'");
		Возврат;
		Отказ = Истина;
		
	КонецЕсли;
	
	Если Режим = Элементы.Режим.СписокВыбора[0].Значение Тогда // это распределение остатков
		
		Если Не ЗначениеЗаполнено(Объект.СкладОтправитель) Тогда
			
			ТекстСообщения = НСтр("ru = 'Поле ""Склад-отправитель"" не заполнено'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Неопределено, "СкладОтправитель", "Объект.СкладОтправитель", Отказ);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.ДатаОтгрузки) Тогда
			
			ТекстСообщения = НСтр("ru = 'Поле ""Дата отгрузки"" не заполнено'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Неопределено, "ДатаОтгрузки", "Объект.ДатаОтгрузки", Отказ);
			
		ИначеЕсли Объект.ДатаОтгрузки < НачалоДня(ТекущаяДатаСеанса()) Тогда
			
			ТекстСообщения = НСтр("ru = 'Поле ""Дата отгрузки"" не может быть заполнено прошедшей датой'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Неопределено, "ДатаОтгрузки", "Объект.ДатаОтгрузки", Отказ);
			
		ИначеЕсли Объект.ДатаОтгрузки > НачалоДня(ТекущаяДатаСеанса())
					И Объект.ВариантОформления = Перечисления.ВариантыОформленияДокументовПеремещения.ПеремещениеТоваров Тогда
			
			ТекстСообщения = НСтр("ru = 'Для варианта оформления ""Перемещение товаров"" поле ""Дата отгрузки"" не может быть заполнено будущей датой'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Неопределено, "ДатаОтгрузки", "Объект.ДатаОтгрузки", Отказ);
			
		ИначеЕсли ЗначениеЗаполнено(Объект.ДатаСледующейОтгрузки) И Объект.ДатаСледующейОтгрузки < Объект.ДатаОтгрузки Тогда
			
			ТекстСообщения = НСтр("ru = 'Поле ""Дата следующей отгрузки"" не может быть заполнено датой меньшей чем поле ""Дата отгрузки""'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Неопределено, "ДатаСледующейОтгрузки", "Объект.ДатаСледующейОтгрузки", Отказ);
			
		КонецЕсли;
		
	ИначеЕсли Режим = Элементы.Режим.СписокВыбора[1].Значение Тогда
		
		Если Не ЗначениеЗаполнено(Объект.СкладПолучатель) Тогда
			
			ТекстСообщения = НСтр("ru = 'Поле ""Склад-получатель"" не заполнено'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Неопределено, "СкладПолучатель", "Объект.СкладПолучатель", Отказ);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.ДатаОтгрузки) Тогда
			
			ТекстСообщения = НСтр("ru = 'Поле ""Дата отгрузки"" не заполнено'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Неопределено, "ДатаОтгрузки", "Объект.ДатаОтгрузки", Отказ);
			
		ИначеЕсли Объект.ДатаОтгрузки < НачалоДня(ТекущаяДатаСеанса()) Тогда
			
			ТекстСообщения = НСтр("ru = 'Поле ""Дата отгрузки"" не может быть заполнено прошедшей датой'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Неопределено, "ДатаОтгрузки", "Объект.ДатаОтгрузки", Отказ);
			
		ИначеЕсли Объект.ДатаОтгрузки > НачалоДня(ТекущаяДатаСеанса())
					И Объект.ВариантОформления = Перечисления.ВариантыОформленияДокументовПеремещения.ПеремещениеТоваров Тогда
			
			ТекстСообщения = НСтр("ru = 'Для варианта оформления ""Перемещение товаров"" поле ""Дата отгрузки"" не может быть заполнено будущей датой'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Неопределено, "ДатаОтгрузки", "Объект.ДатаОтгрузки", Отказ);
			
		ИначеЕсли ЗначениеЗаполнено(Объект.ПотребностиДоДаты) И Объект.ПотребностиДоДаты < Объект.ДатаОтгрузки Тогда
			
			ТекстСообщения = НСтр("ru = 'Поле ""Потребности до даты"" не может быть заполнено датой меньшей чем поле ""Дата отгрузки""'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Неопределено, "ПотребностиДоДаты", "Объект.ПотребностиДоДаты", Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Элементы.Закладки.ТекущаяСтраница = Элементы.ЗакладкаДокументы
		И (ИмяСобытия = "Запись_ЗаказНаПеремещение"
			Или ИмяСобытия = "Запись_ЗаказМатериаловВПроизводство"
			Или ИмяСобытия = "Запись_ДвижениеПродукцииИМатериалов"
			Или ИмяСобытия = "Запись_ПеремещениеТоваров") Тогда
		
		Элементы.СписокДокументы.Обновить();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура РежимПриИзменении(Элемент)
	
	ПриИзмененииРеквизитов(Элементы.Режим.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСкладОтправительПриИзменении(Элемент)
	
	СохранитьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОтгрузкиРежимаРаспределениеОстатковПриИзменении(Элемент)
	
	СохранитьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаСледующейОтгрузкиПриИзменении(Элемент)
	
	СохранитьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСкладПолучательПриИзменении(Элемент)
	
	СохранитьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОтгрузкиРежимаОбеспечениеПотребностейПриИзменении(Элемент)
	
	СохранитьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПотребностиДоДатыПриИзменении(Элемент)
	
	СохранитьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОформленияПриИзменении(Элемент)
	
	СохранитьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура НазначениеПриИзменении(Элемент)
	
	ПриИзмененииРеквизитов(Элементы.Назначение.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СкладОтправительПриИзменении(Элемент)
	
	СохранитьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПолучательПриИзменении(Элемент)
	
	СохранитьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоОтмеченныеПриИзменении(Элемент)
	
	ТолькоОтмеченныеПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	СоответствиеСсылочныхПолей = Новый Соответствие();
	СоответствиеСсылочныхПолей.Вставить(Элементы.ТоварыНоменклатура,     "Номенклатура");
	СоответствиеСсылочныхПолей.Вставить(Элементы.ТоварыНазначение,       "Назначение");
	СоответствиеСсылочныхПолей.Вставить(Элементы.ТоварыСкладПолучатель,  "СкладПолучатель");
	СоответствиеСсылочныхПолей.Вставить(Элементы.ТоварыСкладОтправитель, "СкладОтправитель");
	
	СоответствиеПолейРасшифровкиКоличества = Новый Соответствие();
	СоответствиеПолейРасшифровкиКоличества.Вставить(Элементы.ТоварыСкладОтправитель, "СкладОтправитель");
	СоответствиеПолейРасшифровкиКоличества.Вставить(Элементы.ТоварыСкладПолучатель,  "СкладПолучатель");
	СоответствиеПолейРасшифровкиКоличества.Вставить(Элементы.ТоварыДатаПотребности,  "ДатаПотребности");
	
	ИмяРеквизита = СоответствиеПолейРасшифровкиКоличества.Получить(Поле);
	ИмяСсылочногоРеквизита = СоответствиеСсылочныхПолей.Получить(Поле);
	Если Поле = Элементы.ТоварыКоличествоГиперссылка
			Или Поле = Элементы.ТоварыОтметкаТолькоПросмотр
			Или ИмяРеквизита <> Неопределено И Не ЗначениеЗаполнено(ТекущиеДанные[ИмяРеквизита]) Тогда
		
		СтандартнаяОбработка = Ложь;
		КорзинаСкладовПередИзменениемТоварыКоличество();
		ОткрытьФормуВводаКоличества();
		
	ИначеЕсли ИмяСсылочногоРеквизита <> Неопределено Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(Неопределено, ТекущиеДанные[ИмяСсылочногоРеквизита]);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОтметкаПриИзменении(Элемент)
	
	КорзинаСкладовПередИзменениемТоварыКоличество();
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные.Отметка Тогда
		
		ПараметрыЗаполнения = Новый Структура();
		ДобавитьПоляОтбора(ПараметрыЗаполнения);
		МассивДетальныеЗаписи = ДетальныеЗаписи(ПараметрыЗаполнения, ТекущиеДанные.Количество, ТекущиеДанные.Отметка);
		
		Коллекция = ТекущиеДанные.ДетальныеЗаписи;
		Коллекция.Очистить();
		Для Каждого Элемент Из МассивДетальныеЗаписи Цикл
			ЗаполнитьЗначенияСвойств(Коллекция.Добавить(), Элемент);
		КонецЦикла;
		
	Иначе
		
		Коллекция = ТекущиеДанные.ДетальныеЗаписи;
		Коллекция.Очистить();
		
	КонецЕсли;
	
	КорзинаСкладовПриИзмененииТоварыКоличество();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыЗаполнения = Новый Структура();
	ДобавитьПоляОтбора(ПараметрыЗаполнения);
	
	ТекущиеДанные.Отметка = ТекущиеДанные.Количество > 0;
	МассивДетальныеЗаписи = ДетальныеЗаписи(ПараметрыЗаполнения, ТекущиеДанные.Количество, ТекущиеДанные.Отметка);
	
	Коллекция = ТекущиеДанные.ДетальныеЗаписи;
	Коллекция.Очистить();
	Для Каждого Элемент Из МассивДетальныеЗаписи Цикл
		ЗаполнитьЗначенияСвойств(Коллекция.Добавить(), Элемент);
	КонецЦикла;
	
	КорзинаСкладовПриИзмененииТоварыКоличество();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоОчистка(Элемент, СтандартнаяОбработка)
	
	КорзинаСкладовПередИзменениемТоварыКоличество();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	КорзинаСкладовПередИзменениемТоварыКоличество();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	КорзинаСкладовПередИзменениемТоварыКоличество();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	КорзинаСкладовПередИзменениемТоварыКоличество();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	КорзинаСкладовПередИзменениемТоварыКоличество();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокДокументы

&НаКлиенте
Процедура СписокДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(Неопределено, Элементы.СписокДокументы.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДалееКШагуПеремещаемыеТовары(Команда)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.УправлениеПеремещениемОбособленныхТоваров.Форма.РабочееМесто.ДалееКШагуПеремещаемыеТовары");
		
	ОчиститьСообщения();
	ДалееКШагуПеремещаемыеТоварыНаСервере();
	
	Если ОткрытьФормуДлительнойОперации Тогда
		ПодключитьОбработчикОжидания("ОткрытьФормуДлительнойОперации", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отметить(Команда)
	
	Для Каждого ИдентификаторСтрокиТовары Из Элементы.Товары.ВыделенныеСтроки Цикл
		
		СтрокаТовары = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтрокиТовары);
		СтрокаТовары.Отметка = СтрокаТовары.Количество > 0;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметку(Команда)
	
	Для Каждого ИдентификаторСтрокиТовары Из Элементы.Товары.ВыделенныеСтроки Цикл
		
		СтрокаТовары = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтрокиТовары);
		СтрокаТовары.Отметка = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НазадКШагуОтборы(Команда)
	
	ОчиститьСообщения();
	Объект.Товары.Очистить();
	НазадКШагуОтборыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДалееКШагуСформированныеДокументы(Команда)
	
	ОчиститьСообщения();
	Если Не ДалееКШагуСформированныеДокументыНаСервере() Тогда
		
		ТекстСообщения = НСтр("ru = 'Не указаны перемещаемые товары.'");
		ОбщегоНазначенияклиентСервер.СообщитьПользователю(ТекстСообщения, , "Товары");
		Элементы.Закладки.ТекущаяСтраница = Элементы.ЗакладкаТовары;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусЗаказовНаПеремещениеКВыполнению(Команда)
	
	УстановитьСтатус(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусЗаказовМатериаловКВыполнению(Команда)
	
	УстановитьСтатус(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусПередачМатериаловОтгружено(Команда)
	
	УстановитьСтатус(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусПередачМатериаловПринято(Команда)
	
	УстановитьСтатус(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусПеремещенийТоваровОтгружено(Команда)
	
	УстановитьСтатус(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусПеремещенийТоваровПринято(Команда)
	
	УстановитьСтатус(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаПроведения(Команда)
	
	ЗаписатьНаКлиенте(Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Провести(Команда)
	
	ЗаписатьНаКлиенте(Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдаление(Команда)
	
	ЗаписатьНаКлиенте(Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура НазадКШагуПеремещаемыеТовары(Команда)
	
	ОчиститьСообщения();
	ПоказатьВопросУдалитьДокументы();

КонецПроцедуры

&НаКлиенте
Процедура СформироватьЕще(Команда)
	
	ОчиститьСообщения();
	Объект.Товары.Очистить();
	СформироватьЕщеНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ШагОтборы

&НаСервере
Процедура ДалееКШагуПеремещаемыеТоварыНаСервере()
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	НачатьВыполнениеВФоне(Элементы.ДалееКШагуПеремещаемыеТовары.Имя, НСтр("ru = 'Получение данных о перемещаемых товарах'"));
	ПослеНачалаВыполненияВФоне();
	
КонецПроцедуры

&НаСервере
Процедура СписокДокументыПриИзмененииВариантаОформления()
	
	СтруктураДоступа = Обработки.УправлениеПеремещениемОбособленныхТоваров.СтруктураДоступа();
	ТекстЗапроса = "";
	
	ТекущийВариантОформления = Объект.ВариантОформления;
	
	Если ТекущийВариантОформления = Перечисления.ВариантыОформленияДокументовПеремещения.ПеремещениеТоваров
			И СтруктураДоступа.ПеремещениеДоступно Тогда
		
		ДобавитьСекциюОбъединения(ТекстЗапроса);
		ТекстЗапроса = ТекстЗапроса +
			"ВЫБРАТЬ
			|	ВЫБОР КОГДА ПеремещениеТоваровПереопределяемый.Проведен ТОГДА
			|				1
			|			КОГДА ПеремещениеТоваровПереопределяемый.ПометкаУдаления ТОГДА
			|				2
			|			ИНАЧЕ
			|				0
			|		КОНЕЦ                                                 КАК КартинкаСтроки,
			|	ПеремещениеТоваровПереопределяемый.Ссылка                 КАК Ссылка,
			|	ПеремещениеТоваровПереопределяемый.ПометкаУдаления        КАК ПометкаУдаления,
			|	ПеремещениеТоваровПереопределяемый.Номер                  КАК Номер,
			|	ПеремещениеТоваровПереопределяемый.Дата                   КАК Дата,
			|	ПеремещениеТоваровПереопределяемый.Проведен               КАК Проведен,
			|	ПеремещениеТоваровПереопределяемый.Организация            КАК Организация,
			|	ПеремещениеТоваровПереопределяемый.ОрганизацияПолучатель  КАК ОрганизацияПолучатель,
			|	ПеремещениеТоваровПереопределяемый.Ответственный          КАК Ответственный,
			|	ПеремещениеТоваровПереопределяемый.Подразделение          КАК Подразделение,
			|	ПеремещениеТоваровПереопределяемый.СкладОтправитель       КАК СкладОтправитель,
			|	ПеремещениеТоваровПереопределяемый.СкладПолучатель        КАК СкладПолучатель,
			|	ПеремещениеТоваровПереопределяемый.Статус                 КАК Статус
			|ИЗ
			|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваровПереопределяемый
			|ГДЕ
			|	ПеремещениеТоваровПереопределяемый.Ссылка В(&Документы)";
			
	КонецЕсли;
	
	
	Если ТекущийВариантОформления = Перечисления.ВариантыОформленияДокументовПеремещения.ЗаказНаПеремещение
			И СтруктураДоступа.ЗаказНаПеремещениеДоступен Тогда
		
		ДобавитьСекциюОбъединения(ТекстЗапроса);
		ТекстЗапроса = ТекстЗапроса +
			"ВЫБРАТЬ
			|	ВЫБОР КОГДА ЗаказНаПеремещениеПереопределяемый.Проведен ТОГДА
			|				1
			|			КОГДА ЗаказНаПеремещениеПереопределяемый.ПометкаУдаления ТОГДА
			|				2
			|			ИНАЧЕ
			|				0
			|		КОНЕЦ                                                 КАК КартинкаСтроки,
			|	ЗаказНаПеремещениеПереопределяемый.Ссылка                 КАК Ссылка,
			|	ЗаказНаПеремещениеПереопределяемый.ПометкаУдаления        КАК ПометкаУдаления,
			|	ЗаказНаПеремещениеПереопределяемый.Номер                  КАК Номер,
			|	ЗаказНаПеремещениеПереопределяемый.Дата                   КАК Дата,
			|	ЗаказНаПеремещениеПереопределяемый.Проведен               КАК Проведен,
			|	ЗаказНаПеремещениеПереопределяемый.Организация            КАК Организация,
			|	ЗаказНаПеремещениеПереопределяемый.ОрганизацияПолучатель  КАК ОрганизацияПолучатель,
			|	ЗаказНаПеремещениеПереопределяемый.Ответственный          КАК Ответственный,
			|	ЗаказНаПеремещениеПереопределяемый.Подразделение          КАК Подразделение,
			|	ЗаказНаПеремещениеПереопределяемый.СкладОтправитель       КАК СкладОтправитель,
			|	ЗаказНаПеремещениеПереопределяемый.СкладПолучатель        КАК СкладПолучатель,
			|	ЗаказНаПеремещениеПереопределяемый.Статус                 КАК Статус
			|ИЗ
			|	Документ.ЗаказНаПеремещение КАК ЗаказНаПеремещениеПереопределяемый
			|ГДЕ
			|	ЗаказНаПеремещениеПереопределяемый.Ссылка В(&Документы)";
		
	КонецЕсли;
	
	
	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	ЗаполнитьЗначенияСвойств(СвойстваСписка, СписокДокументы);
	СвойстваСписка.ТекстЗапроса = ТекстЗапроса;
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.СписокДокументы, СвойстваСписка);
	
КонецПроцедуры

#КонецОбласти

#Область ТабличнаяЧастьТовары

&НаСервере
Процедура НазадКШагуОтборыНаСервере()
	
	Элементы.Закладки.ТекущаяСтраница = Элементы.ЗакладкаОтборы;
	Элементы.ДалееКШагуПеремещаемыеТовары.КнопкаПоУмолчанию = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ТолькоОтмеченныеПриИзмененииНаСервере()
	
	ОтборСтрокПриИзмененииРеквизитов(Элементы.ТолькоОтмеченные);
	СохранитьНастройки();
	
КонецПроцедуры

&НаСервере
Процедура ОтборСтрокПриИзмененииРеквизитов(Элемент)
	
	СтруктураОтбора = Новый Структура();
	
	Если Элемент = Неопределено Или Элемент = Элементы.ТолькоОтмеченные Тогда
		
		Если ТолькоОтмеченные Тогда
			СтруктураОтбора.Вставить("Отметка", Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураОтбора) Тогда
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбора);
	Иначе
		Элементы.Товары.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДалееКШагуСформированныеДокументыНаСервере()
	
	Элементы.Закладки.ТекущаяСтраница = Элементы.ЗакладкаДокументы;
	Элементы.Готово.КнопкаПоУмолчанию = Истина;
	
	// Начало замера производительности.
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("Обработка.УправлениеПеремещениемОбособленныхТоваров.Форма.РабочееМесто.ДалееКШагуСформированныеДокументы.%1");
	
	КоличествоСозданныхДокументов = СоздатьДокументы();
	
	// Окончание замера производительности.
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, КоличествоСозданныхДокументов);
	
	Если КоличествоСозданныхДокументов = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МассивТипов = Новый Массив();
	Для Каждого СтрокаТаблицы Из ОформленныеДокументы Цикл
		
		ТипДокумента = ТипЗнч(СтрокаТаблицы.Документ);
		Если МассивТипов.Найти(ТипДокумента) = Неопределено Тогда
			МассивТипов.Добавить(ТипДокумента);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Элемент Из Элементы.ГруппаУстановитьСтатус.ПодчиненныеЭлементы Цикл
		Элемент.Видимость = Ложь;
	КонецЦикла;
	
	ВсегоТипов = 0;
	ИменаДокументов = Новый Массив();
	
	ИменаДокументов.Добавить(НСтр("ru = 'Перемещение товаров:'"));
	ВидимостьСтатусов = МассивТипов.Найти(Тип("ДокументСсылка.ПеремещениеТоваров")) <> Неопределено
		И ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыПеремещенийТоваров");
	ВсегоТипов = ВсегоТипов + ?(ВидимостьСтатусов, 1, 0);
	
	Элементы.УстановитьСтатусПеремещенийТоваровОтгружено.Видимость = ВидимостьСтатусов;
	Элементы.УстановитьСтатусПеремещенийТоваровПринято.Видимость   = ВидимостьСтатусов;
	
	ИменаДокументов.Добавить(НСтр("ru = 'Заказ на перемещение:'"));
	ВидимостьСтатусов = МассивТипов.Найти(Тип("ДокументСсылка.ЗаказНаПеремещение")) <> Неопределено
		И Документы.ЗаказНаПеремещение.ИспользоватьСтатусы();
	ВсегоТипов = ВсегоТипов + ?(ВидимостьСтатусов, 1, 0);
	
	Элементы.УстановитьСтатусЗаказовНаПеремещениеКВыполнению.Видимость  = ВидимостьСтатусов;
	
	
	Для Каждого ЭлементФормы Из Элементы.ГруппаУстановитьСтатус.ПодчиненныеЭлементы Цикл
		
		КомандаФормы = Команды[ЭлементФормы.ИмяКоманды]; // КомандаФормы -
		ЗаголовокКоманды = КомандаФормы.Заголовок;
		
		Если ВсегоТипов = 1 Тогда
			Для Каждого ИмяДокумента Из ИменаДокументов Цикл
				ЗаголовокКоманды = СокрЛП(СтрЗаменить(ЗаголовокКоманды, ИмяДокумента, ""));
			КонецЦикла;
		КонецЕсли;
		
		ЭлементФормы.Заголовок = ЗаголовокКоманды;
		
	КонецЦикла;
	
	Элементы.СписокДокументыСтатус.Видимость = ВсегоТипов > 0;
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СоздатьДокументы()
	
	ВыгружаемыеКолонки = 
		"Номенклатура,
		|Характеристика,
		|СкладОтправитель,
		|СкладПолучатель,
		|Количество,
		|КоличествоУпаковок,
		|Упаковка,
		|Назначение,
		|НаправлениеДеятельности,
		|ДлительностьПеремещения";
	
	ВыгруженнаяТаблица = Объект.Товары.Выгрузить(Новый Массив, ВыгружаемыеКолонки);
	
	ВсегоСтрок = Объект.Товары.Количество();
	
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		
		Если Не СтрокаТаблицы.Отметка Или СтрокаТаблицы.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.СкладОтправитель) И ЗначениеЗаполнено(СтрокаТаблицы.СкладПолучатель) Тогда
			
			НоваяСтрока = ВыгруженнаяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
			
		Иначе
			
			Для Каждого СтрокаДетальныхЗаписей Из СтрокаТаблицы.ДетальныеЗаписи Цикл
				
				НоваяСтрока = ВыгруженнаяТаблица.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				НоваяСтрока.Количество         = СтрокаДетальныхЗаписей.КПеремещению;
				НоваяСтрока.КоличествоУпаковок = СтрокаДетальныхЗаписей.КПеремещению;
				
				Если Режим = Элементы.Режим.СписокВыбора[0].Значение Тогда // Распределение остатков, нужно заполнить склады-получатели
					
					НоваяСтрока.СкладПолучатель = СтрокаДетальныхЗаписей.Склад;
					НоваяСтрока.СкладОтправитель = Объект.СкладОтправитель;
					
				Иначе
					
					НоваяСтрока.СкладОтправитель = СтрокаДетальныхЗаписей.Склад;
					НоваяСтрока.СкладПолучатель = Объект.СкладПолучатель;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВыгруженнаяТаблица.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	РезультатОформления = Обработки.УправлениеПеремещениемОбособленныхТоваров.ОформитьДокументы(
		Объект.ДатаОтгрузки,
		ВыгруженнаяТаблица,
		Объект.ВариантОформления);
		
	ЗаполнитьОформленныеДокументы(РезультатОформления);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокДокументы, "Документы", РезультатОформления.Документы);
	Для Каждого Ошибка Из РезультатОформления.Сообщения Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Ошибка.Текст, Ошибка.КлючДанных, Ошибка.Поле, Ошибка.ПутьКДанным);
	КонецЦикла;
	
	Возврат РезультатОформления.Количество();
	
КонецФункции

&НаСервере
Процедура ЗаполнитьОформленныеДокументы(РезультатОформления)
	
	ОформленныеДокументы.Очистить();
	Для Каждого Элемент Из РезультатОформления.Документы Цикл
		ОформленныеДокументы.Добавить().Документ = Элемент;
	КонецЦикла;
	ОформленоДокументов = ОформленныеДокументы.Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзмененииОбработкаОповещения(Результат, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ТекущиеДанные.Количество = Результат.КПеремещению;
		ТекущиеДанные.Отметка = Результат.КПеремещению > 0;
		
		ПолучитьИзВременногоХранилищаДанныеРасшифровки(Элементы.Товары.ТекущаяСтрока, Результат.ДанныеРасшифровки);
		КорзинаСкладовПриИзмененииТоварыКоличество();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьИзВременногоХранилищаДанныеРасшифровки(Идентификатор, АдресВХранилище)
	
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресВХранилище);
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Идентификатор);
	ТекущиеДанные.ДетальныеЗаписи.Загрузить(ДанныеРасшифровки);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьДанныеРасшифровкиВоВременноеХранилище(Идентификатор)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Идентификатор);
	Таблица = ТекущиеДанные.ДетальныеЗаписи.Выгрузить();
	Возврат ПоместитьВоВременноеХранилище(Таблица);
	
КонецФункции

&НаКлиенте
Процедура КорзинаСкладовПередИзменениемТоварыКоличество()
	
	КорзинаСкладовЗаполнитьКешированныеЗначения();
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаСкладовПриИзмененииТоварыКоличество()
	
	// Кешированные значения были заполнены в процедуре "перед изменением".
	КорзинаСкладовОтразитьИзменения("-");
	КорзинаСкладовЗаполнитьКешированныеЗначения();
	КорзинаСкладовОтразитьИзменения("+");
	
	КУдалению = КорзинаСкладов.НайтиСтроки(Новый Структура("ЧастотаСтрок", 0));
	Для Каждого Строка Из КУдалению Цикл
		КорзинаСкладов.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаСкладовЗаполнитьКешированныеЗначения()
	
	ДетальныеЗаписи = Элементы.Товары.ТекущиеДанные.ДетальныеЗаписи;
	
	КорзинаСкладовКешированныеЗначения.Очистить();
	Для Каждого СтрокаТаблицы Из ДетальныеЗаписи Цикл
		
		ЗаполнитьЗначенияСвойств(КорзинаСкладовКешированныеЗначения.Добавить(), СтрокаТаблицы);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаСкладовОтразитьИзменения(Знак)
	
	ЗнакЧислом = ?(Знак = "+", 1, -1);
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ПараметрыОтбора = Новый Структура("Склад");
	Для Каждого ЭлементМассива Из КорзинаСкладовКешированныеЗначения Цикл
		
		ПараметрыОтбора.Склад = ЭлементМассива.Склад;
		
		НайденныеСтроки = КорзинаСкладов.НайтиСтроки(ПараметрыОтбора);
		
		Если Знак = "+" И НайденныеСтроки.Количество() = 0 Тогда
			
			НайденнаяСтрока = КорзинаСкладов.Добавить();
			НайденнаяСтрока.Склад = ЭлементМассива.Склад;
			
		Иначе
			
			НайденнаяСтрока = НайденныеСтроки[0];
			
		КонецЕсли;
		
		НайденнаяСтрока.Вес   = НайденнаяСтрока.Вес   + ЗнакЧислом * ТекущиеДанные.ВесЕдиницы   * ЭлементМассива.КПеремещению;
		НайденнаяСтрока.Объем = НайденнаяСтрока.Объем + ЗнакЧислом * ТекущиеДанные.ОбъемЕдиницы * ЭлементМассива.КПеремещению;
		НайденнаяСтрока.ЧастотаСтрок = НайденнаяСтрока.ЧастотаСтрок + ЗнакЧислом;
		
		НайденнаяСтрока.ЧастотаСтрокСНулевымВесом = НайденнаяСтрока.ЧастотаСтрокСНулевымВесом
			+ ЗнакЧислом * ?(ТекущиеДанные.ВесЕдиницы = 0, 0, 1);
			
		НайденнаяСтрока.ЧастотаСтрокСНулевымОбъемом = НайденнаяСтрока.ЧастотаСтрокСНулевымОбъемом
			+ ЗнакЧислом * ?(ТекущиеДанные.ОбъемЕдиницы = 0, 0, 1);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВводаКоличества()
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ТоварыКоличествоПриИзмененииОбработкаОповещения", ЭтаФорма);
	ПараметрыФормы = Новый Структура();
	ДобавитьПоляОтбора(ПараметрыФормы);
	ПараметрыФормы.Вставить("ДанныеРасшифровки",     ПоместитьДанныеРасшифровкиВоВременноеХранилище(ТекущиеДанные.ПолучитьИдентификатор()));
	
	ОткрытьФорму("Обработка.УправлениеПеремещениемОбособленныхТоваров.Форма.РасшифровкаКоличества",
		ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область СписокДокументы

&НаСервере
Процедура ДобавитьСекциюОбъединения(ТекстЗапроса)
	
	Если ТекстЗапроса <> "" Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатус(Команда)
	
	ТипДокумента = Неопределено;
	
	Если Команда = Команды.УстановитьСтатусЗаказовНаПеремещениеКВыполнению.Имя Тогда
		
		ТипДокумента = Тип("ДокументСсылка.ЗаказНаПеремещение");
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыВнутреннихЗаказов.КВыполнению");
		
	ИначеЕсли Команда = Команды.УстановитьСтатусПеремещенийТоваровОтгружено.Имя Тогда
		
		ТипДокумента = Тип("ДокументСсылка.ПеремещениеТоваров");
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыПеремещенийТоваров.Отгружено");
		
	ИначеЕсли Команда = Команды.УстановитьСтатусПеремещенийТоваровПринято.Имя Тогда
		
		ТипДокумента = Тип("ДокументСсылка.ПеремещениеТоваров");
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыПеремещенийТоваров.Принято");
		
	КонецЕсли;
	
	МассивСсылок = Новый Массив();
	
	Для Каждого Строка Из Элементы.СписокДокументы.ВыделенныеСтроки Цикл
		
		СсылкаНаДокумент = Элементы.СписокДокументы.ДанныеСтроки(Строка).Ссылка;
		Если ТипЗнч(СсылкаНаДокумент) = ТипДокумента Тогда
			
			МассивСсылок.Добавить(СсылкаНаДокумент);
			
		КонецЕсли;
		
	КонецЦикла;
	УстановитьСтатусНаСервере(МассивСсылок, Статус);
	Элементы.СписокДокументы.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтатусНаСервере(МассивСсылок, Статус)
	
	Статус = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Статус).Индекс(Статус);
	ВсегоСсылок = МассивСсылок.Количество();
	
	Для Счетчик = 1 По ВсегоСсылок Цикл
		
		ТекущийЭлементМассива = МассивСсылок[ВсегоСсылок - Счетчик];
		Если ОформленныеДокументы.НайтиСтроки(Новый Структура("Документ", ТекущийЭлемент)) = 0 Тогда
			
			МассивСсылок.Удалить(ТекущийЭлементМассива);
			
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьСтатусПоМассивуСсылок(МассивСсылок, Статус);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНаКлиенте(Команда)
	
	МассивСсылок = Новый Массив();
	
	Для Каждого Строка Из Элементы.СписокДокументы.ВыделенныеСтроки Цикл
		
		СсылкаНаДокумент = Элементы.СписокДокументы.ДанныеСтроки(Строка).Ссылка;
		МассивСсылок.Добавить(СсылкаНаДокумент);
		
	КонецЦикла;
	ЗаписатьНаСервере(МассивСсылок, Команда.Имя);
	Элементы.СписокДокументы.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНаСервере(МассивСсылок, Действие)
	
	ВсегоСсылок = МассивСсылок.Количество();
	
	Для Счетчик = 1 По ВсегоСсылок Цикл
		
		ТекущийЭлементМассива = МассивСсылок[ВсегоСсылок - Счетчик];
		Если ОформленныеДокументы.НайтиСтроки(Новый Структура("Документ", ТекущийЭлемент)) = 0 Тогда
			
			МассивСсылок.Удалить(ТекущийЭлементМассива);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ШаблонОшибкиЗаблокировать     = НСтр("ru='Не удалось заблокировать %Документ%. %ОписаниеОшибки%'");
	ШаблонОшибкиЗаписать          = НСтр("ru='Не удалось записать %Документ%. %ОписаниеОшибки%'");
	
	Для Каждого Ссылка Из МассивСсылок Цикл
		
		// Захват объекта для редактирования
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Ссылка);
		Исключение
			ТекстОшибки = СтрЗаменить(ШаблонОшибкиЗаблокировать, "%Документ%", Ссылка);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Ссылка);
			Продолжить;
		КонецПопытки;
		
		// Получение объекта документа
		ДокументОбъект = Ссылка.ПолучитьОбъект();
		
		// Запись документа
		Попытка
			
			Если Действие = "Провести" Тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			ИначеЕсли Действие = "ОтменаПроведения" Тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			ИначеЕсли Действие = "ПометитьНаУдаление" Тогда
				ДокументОбъект.УстановитьПометкуУдаления(Не ДокументОбъект.ПометкаУдаления);
			КонецЕсли;
			
		Исключение
			ТекстОшибки = СтрЗаменить(ШаблонОшибкиЗаписать, "%Документ%", Ссылка);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Ссылка);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросУдалитьДокументы()
	
	Если ОформленоДокументов > 0 Тогда
		
		Кнопки = Новый СписокЗначений();
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Пометить на удаление сформированные документы'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ТекстВопроса = НСтр("ru = 'При переходе назад сформированные документы будут помечены на удаление.'");
		Ответ = Неопределено;
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьОтветНаВопросУдалитьДокументы", ЭтотОбъект), ТекстВопроса, Кнопки);
		
	Иначе
		
		НазадКШагуПеремещаемыеТоварыНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветНаВопросУдалитьДокументы(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	НазадКШагуПеремещаемыеТоварыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура НазадКШагуПеремещаемыеТоварыНаСервере()
	
	МассивДокументов = ОформленныеДокументы.Выгрузить().ВыгрузитьКолонку("Документ");
	СписокОшибок = ОбщегоНазначенияУТ.УстановитьПометкуУдаленияДокументов(МассивДокументов);
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(СписокОшибок);

	Элементы.Закладки.ТекущаяСтраница = Элементы.ЗакладкаТовары;
	Элементы.ДалееКШагуСформированныеДокументы.КнопкаПоУмолчанию = Истина;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЕщеНаСервере()
	
	Элементы.Закладки.ТекущаяСтраница = Элементы.ЗакладкаОтборы;
	Элементы.ДалееКШагуПеремещаемыеТовары.КнопкаПоУмолчанию = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтатусПоМассивуСсылок(МассивСсылок, Статус)
	
	ШаблонОшибкиЗаблокировать     = НСтр("ru='Не удалось заблокировать %Документ%. %ОписаниеОшибки%'");
	ШаблонОшибкиЗаписать          = НСтр("ru='Не удалось записать %Документ%. %ОписаниеОшибки%'");

	Для Каждого Ссылка Из МассивСсылок Цикл
		
		// Захват объекта для редактирования
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Ссылка);
		Исключение
			ТекстОшибки = СтрЗаменить(ШаблонОшибкиЗаблокировать, "%Документ%", Ссылка);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Ссылка);
			Продолжить;
		КонецПопытки;
		
		// Получение объекта документа
		ДокументОбъект = Ссылка.ПолучитьОбъект();
		
		// Установка статуса документа
		Если Не ДокументОбъект.УстановитьСтатус(Статус, Неопределено) Тогда
			Продолжить;
		КонецЕсли;
			
		// Запись документа
		Попытка
			
			ДокументОбъект.Записать(?(ДокументОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
			
		Исключение
			ТекстОшибки = СтрЗаменить(ШаблонОшибкиЗаписать, "%Документ%", Ссылка);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Ссылка);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаВидимостиИОформления

&НаСервере
Процедура ПриИзмененииРеквизитов(ИмяЭлемента = Неопределено)
	
	Если ИмяЭлемента = Неопределено Тогда
		
		Элементы.ДатаСледующейОтгрузки.Видимость = УпорядочиваниеПоДатеОтгрузки;
		Элементы.ПотребностиДоДаты.Видимость = УпорядочиваниеПоДатеОтгрузки;
		
	КонецЕсли;
		
	Если ИмяЭлемента = Неопределено Или ИмяЭлемента = Элементы.Режим.Имя Тогда
		
		Если Режим = Элементы.Режим.СписокВыбора[0].Значение Тогда
			
			Заголовок = НСтр("ru = 'Управление перемещением обособленных товаров: Распределение остатков'");
			Элементы.СтраницыРежим.ТекущаяСтраница = Элементы.СтраницыРежим.ПодчиненныеЭлементы.СтраницаРежимРаспределениеОстатков;
			Элементы.СкладОтправитель.Видимость = Ложь;
			Элементы.СкладПолучатель.Видимость  = Истина;
			Элементы.ТоварыСкладОтправитель.Видимость = Ложь;
			Элементы.ТоварыСкладПолучатель.Видимость  = Истина;
			
			// Перекомпоновка колонок в таблице "Товары" в следующем порядке:
			// Доступно -> К перемещению -> Склад-получатель -> Дата потребности -> Потребность.
			Элементы.Переместить(Элементы.ТоварыДоступно, Элементы.КолонкиДоКПеремещению);
			Элементы.Переместить(Элементы.ТоварыСкладПолучатель, Элементы.КолонкиПослеКПеремещению);
			Элементы.Переместить(Элементы.ТоварыДатаПотребности, Элементы.КолонкиПослеКПеремещению);
			Элементы.Переместить(Элементы.ТоварыПотребность,     Элементы.КолонкиПослеКПеремещению);
			Элементы.ТоварыДатаПотребности.Заголовок = НСтр("ru = 'Дата потребности'");
			Элементы.КорзинаСкладовСклад.Заголовок = НСтр("ru ='Склад-получатель'");
			
		ИначеЕсли Режим = Элементы.Режим.СписокВыбора[1].Значение Тогда
			
			Заголовок = НСтр("ru = 'Управление перемещением обособленных товаров: Обеспечение потребностей'");
			Элементы.СтраницыРежим.ТекущаяСтраница = Элементы.СтраницыРежим.ПодчиненныеЭлементы.СтраницаРежимОбеспечениеПотребностей;
			Элементы.СкладОтправитель.Видимость = Истина;
			Элементы.СкладПолучатель.Видимость  = Ложь;
			Элементы.ТоварыСкладОтправитель.Видимость = Истина;
			Элементы.ТоварыСкладПолучатель.Видимость  = Ложь;
			
			// Перекомпоновка колонок в таблице "Товары" в следующем порядке:
			// Дата потребности -> Потребность -> К перемещению -> Доступно -> Склад-отправитель.
			Элементы.Переместить(Элементы.ТоварыДатаПотребности, Элементы.КолонкиДоКПеремещению);
			Элементы.Переместить(Элементы.ТоварыПотребность,     Элементы.КолонкиДоКПеремещению);
			Элементы.Переместить(Элементы.ТоварыДоступно,   Элементы.КолонкиПослеКПеремещению);
			Элементы.Переместить(Элементы.СкладОтправитель, Элементы.КолонкиПослеКПеремещению);
			Элементы.ТоварыДатаПотребности.Заголовок = НСтр("ru = 'Дата потребности (минимальная)'");
			Элементы.КорзинаСкладовСклад.Заголовок = НСтр("ru ='Склад-отправитель'");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяЭлемента = Неопределено Или ИмяЭлемента = Элементы.Назначение.Имя Тогда
		
		Элементы.ТоварыНазначение.Видимость = Не ЗначениеЗаполнено(Объект.Назначение);
		
	КонецЕсли;
	
	Если ИмяЭлемента = Неопределено Тогда
		
		КоличествоДоступныхВариантовОформления = Элементы.ВариантОформления.СписокВыбора.Количество();
		Элементы.ВариантОформления.Доступность = КоличествоДоступныхВариантовОформления > 1;
		Элементы.ДалееКШагуПеремещаемыеТовары.Доступность = КоличествоДоступныхВариантовОформления > 0;
		
	КонецЕсли;
	СохранитьНастройки();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Стандартное оформление поля "Дата".
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "СписокДокументы.Дата", "СписокДокументыДата");
	
	// Надпись <не установлен>, если склад-отправитель не является источником обеспечения для склада-получателя.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыДлительностьПеремещения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ОбеспечиваетсяПеремещением");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru ='<не установлен>'"));
	
	// Оформление просроченных дат потребности.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыДатаПотребности.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ПоступитВСтрок");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);
	
	// Оформление пустой даты потребности.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыДатаПотребности.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.НесколькоДатПотребности");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru ='<несколько дат>'"));
	
	// Оформление пустого склада-отправителя.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСкладОтправитель.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.СкладОтправитель");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru ='<несколько складов>'"));
	
	// Оформление группы "К перемещению".
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыОтметка.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличество.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.СкладПолучатель");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыОтметка.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличество.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.СкладОтправитель");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Оформление группы "К перемещению - гиперссылка".
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыОтметкаТолькоПросмотр.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоГиперссылка.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.СкладПолучатель");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.СкладОтправитель");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ПереходМеждуЗакладкамиВФоновомЗадании

&НаСервере
Процедура НачатьВыполнениеВФоне(КонекстВыполнения, НаименованиеЗадания)
	
	КонтекстВыполненияВФоне = КонекстВыполнения;
	
	ПараметрыЗадания = Новый Структура;
	
	ДанныеЗаполнения = Обработки.УправлениеПеремещениемОбособленныхТоваров.СтруктураДанныеЗаполнения();
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Объект);
	
	ПараметрыЗадания.Вставить("ЭтоРаспределениеОстатков", Режим = Элементы.Режим.СписокВыбора[0].Значение);
	ПараметрыЗадания.Вставить("ДанныеЗаполнения",         ДанныеЗаполнения);
	ПараметрыЗадания.Вставить("Товары",                   Объект.Товары.Выгрузить(Новый Массив));
	ПараметрыЗадания.Вставить("КорзинаСкладов",           КорзинаСкладов.Выгрузить(Новый Массив));
	
	Если КонтекстВыполненияВФоне = Элементы.ДалееКШагуПеремещаемыеТовары.Имя Тогда
		
		РезультатВыполненияВФоне = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Обработки.УправлениеПеремещениемОбособленныхТоваров.ПеремещаемыеТоварыВТаблицу",
			ПараметрыЗадания,
			НаименованиеЗадания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеВыполненияВФоне()
	
	Если КонтекстВыполненияВФоне = Элементы.ДалееКШагуПеремещаемыеТовары.Имя Тогда
		
		ДанныеЗаполнения = ПолучитьИзВременногоХранилища(РезультатВыполненияВФоне.АдресХранилища);
		
		Объект.Товары.Загрузить(ДанныеЗаполнения.Товары);
		Для Индекс = 0 По ДанныеЗаполнения.Товары.Количество() - 1 Цикл
			
			Объект.Товары[Индекс].ДетальныеЗаписи.Загрузить(ДанныеЗаполнения.Товары[Индекс].ДетальныеЗаписи);
			
		КонецЦикла;
		
		КорзинаСкладов.Загрузить(ДанныеЗаполнения.КорзинаСкладов);
		
		Элементы.Закладки.ТекущаяСтраница = Элементы.ЗакладкаТовары;
		Элементы.ДалееКШагуПеремещаемыеТовары.КнопкаПоУмолчанию = Истина;
		
		// Установка текста запроса и параметров списка оформленных документов.
		СписокДокументыПриИзмененииВариантаОформления();
		СписокДокументы.Параметры.УстановитьЗначениеПараметра("Документы", Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеНачалаВыполненияВФоне()
	
	Если РезультатВыполненияВФоне.ЗаданиеВыполнено Тогда
		
		ПослеВыполненияВФоне();
		
	Иначе
		
		ОткрытьФормуДлительнойОперации = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуДлительнойОперации()
	
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	
	// Уменьшим шаг увеличения времени опроса выполнения задания.
	ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала = 1;
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма,
		РезультатВыполненияВФоне.ИдентификаторЗадания);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		
		Если ФормаДлительнойОперации.Открыта()
				И ФормаДлительнойОперации.ИдентификаторЗадания = РезультатВыполненияВФоне.ИдентификаторЗадания Тогда
			
			Если ЗаданиеВыполнено(РезультатВыполненияВФоне.ИдентификаторЗадания) Тогда
				
				ПослеВыполненияВФоне();
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
				
			Иначе
				
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания",
					ПараметрыОбработчикаОжидания.ТекущийИнтервал,
					Истина);
					
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

#КонецОбласти

&НаСервереБезКонтекста
Функция ДетальныеЗаписи(ПараметрыЗаполнения, КоличествоВСтроке, Отметка)
	
	Количество = ?(Отметка, КоличествоВСтроке, 0);
	СтруктураРезультата = Обработки.УправлениеПеремещениемОбособленныхТоваров.ДетальныеЗаписи(ПараметрыЗаполнения);
	
	ДетальныеЗаписи = СтруктураРезультата.ДетальныеЗаписи;
	
	Если ПараметрыЗаполнения.Режим = "РАСПРЕДЕЛЕНИЕ_ОСТАТКОВ" Тогда
		
		КоличествоДоступно = Мин(СтруктураРезультата.КоличествоДоступно, Количество);
		Для Каждого СтрокаТаблицы Из ДетальныеЗаписи Цикл
			
			Если СтрокаТаблицы.ЭтоЗаГраницейПериода = Истина Или КоличествоДоступно <= 0 Тогда
				Прервать;
			КонецЕсли;
			
			СтрокаТаблицы.КПеремещению = Мин(СтрокаТаблицы.Потребность, КоличествоДоступно);
			КоличествоДоступно = КоличествоДоступно - СтрокаТаблицы.КПеремещению;
			
		КонецЦикла;
		
		// Добивка последней строки до желаемой.
		Если Количество > СтруктураРезультата.КоличествоДоступно Тогда
			СтрокаТаблицы.КПеремещению = СтрокаТаблицы.КПеремещению + Количество - СтруктураРезультата.КоличествоДоступно;
		КонецЕсли;
		
	ИначеЕсли ПараметрыЗаполнения.Режим = "ОБЕСПЕЧЕНИЕ_ПОТРЕБНОСТЕЙ" Тогда
		
		КоличествоПотребность = Мин(СтруктураРезультата.КоличествоПотребность, Количество);
		Для Каждого СтрокаТаблицы Из ДетальныеЗаписи Цикл
			
			Если СтрокаТаблицы.ЭтоЗаГраницейПериода = Истина Или КоличествоПотребность <= 0 Тогда
				Прервать;
			КонецЕсли;
			
			СтрокаТаблицы.КПеремещению = Мин(СтрокаТаблицы.Доступно, КоличествоПотребность);
			КоличествоПотребность = КоличествоПотребность - СтрокаТаблицы.КПеремещению;
			
		КонецЦикла;
		
		// Добивка последней строки до желаемой.
		Если Количество > СтруктураРезультата.КоличествоПотребность Тогда
			СтрокаТаблицы.КПеремещению = СтрокаТаблицы.КПеремещению + Количество - СтруктураРезультата.КоличествоПотребность;
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = Новый Массив();
	Колонки = "Период,КПеремещению,Склад,СкладНаименование,ДатаПотребности";
	
	Для Каждого СтрокаТаблицы Из ДетальныеЗаписи Цикл
		
		Если СтрокаТаблицы.КПеремещению > 0 Тогда
			
			Элемент = Новый Структура(Колонки);
			ЗаполнитьЗначенияСвойств(Элемент, СтрокаТаблицы);
			Результат.Добавить(Элемент);
			
		КонецЕсли;
		
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьПоляОтбора(СтруктураПараметров)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СтруктураПараметров.Вставить("СкладОтправитель",      Объект.СкладОтправитель);
	СтруктураПараметров.Вставить("СкладПолучатель",       Объект.СкладПолучатель);
	СтруктураПараметров.Вставить("ДатаСледующейОтгрузки", Объект.ДатаСледующейОтгрузки);
	СтруктураПараметров.Вставить("ПотребностиДоДаты",     Объект.ПотребностиДоДаты);
	СтруктураПараметров.Вставить("ДатаОтгрузки",          Объект.ДатаОтгрузки);
	СтруктураПараметров.Вставить("Номенклатура",          ТекущиеДанные.Номенклатура);
	СтруктураПараметров.Вставить("Характеристика",        ТекущиеДанные.Характеристика);
	СтруктураПараметров.Вставить("Назначение",            ТекущиеДанные.Назначение);
	СтруктураПараметров.Вставить("Режим",                 Режим);
	СтруктураПараметров.Вставить("ВариантОформления",     Объект.ВариантОформления);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	Если Параметры.РеквизитыКонтекст <> Неопределено Тогда
		
		ЧастьНастроекНеПодлежащаяИзменению = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(Параметры.РеквизитыКонтекст);
		ЗаполнитьЗначенияСвойств(ЧастьНастроекНеПодлежащаяИзменению, СохраняемыеЗначения[Параметры.РеквизитыКонтекст.Режим]);
		
		ЗначенияНастроек = СохраняемыеЗначения[Параметры.РеквизитыКонтекст.Режим];
		ЗаполнитьЗначенияСвойств(ЗначенияНастроек, Объект);
		ЗаполнитьЗначенияСвойств(ЗначенияНастроек, ЧастьНастроекНеПодлежащаяИзменению);
		
	Иначе
		
		СохраняемыеЗначения.Режим = Режим;
		ЗначенияНастроек = СохраняемыеЗначения[СохраняемыеЗначения.Режим];
		ЗаполнитьЗначенияСвойств(ЗначенияНастроек, Объект);
		
	КонецЕсли;
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Обработка.УправлениеПеремещениемОбособленныхТоваров", "Основная", СохраняемыеЗначения);

КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки()

	СохраняемыеЗначения = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Обработка.УправлениеПеремещениемОбособленныхТоваров", "Основная");
	Если СохраняемыеЗначения = Неопределено Тогда
		
		СтруктураРаспределениеОстатка = Новый Структура();
		СтруктураОбеспечениеПотребностей = Новый Структура();
		
		СохраняемыеЗначения = Новый Структура();
		СохраняемыеЗначения.Вставить(Элементы.Режим.СписокВыбора[0].Значение, СтруктураРаспределениеОстатка);
		СохраняемыеЗначения.Вставить(Элементы.Режим.СписокВыбора[1].Значение, СтруктураОбеспечениеПотребностей);
		СохраняемыеЗначения.Вставить("Режим", Элементы.Режим.СписокВыбора[0].Значение);
		
		Для Каждого МетаданныеРеквизит Из Метаданные.Обработки.УправлениеПеремещениемОбособленныхТоваров.Реквизиты Цикл
			
			СтруктураРаспределениеОстатка.Вставить(МетаданныеРеквизит.Имя);
			СтруктураОбеспечениеПотребностей.Вставить(МетаданныеРеквизит.Имя);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Параметры.РеквизитыКонтекст <> Неопределено Тогда
		
		Режим = Параметры.РеквизитыКонтекст.Режим;
		ЗаполнитьЗначенияСвойств(Объект, СохраняемыеЗначения[Режим]);
		ЗаполнитьЗначенияСвойств(Объект, Параметры.РеквизитыКонтекст);
		
	Иначе
		
		Режим = СохраняемыеЗначения.Режим;
		ЗаполнитьЗначенияСвойств(Объект, СохраняемыеЗначения[Режим]);
		
	КонецЕсли;
	
	Если Объект.ДатаОтгрузки < НачалоДня(ТекущаяДатаСеанса()) Тогда
		
		Объект.ДатаОтгрузки          = ТекущаяДатаСеанса();
		Объект.ДатаСледующейОтгрузки = '00010101';
		Объект.ПотребностиДоДаты     = '00010101';
		
		Если УпорядочиваниеПоДатеОтгрузки Тогда
			Объект.ДатаСледующейОтгрузки = '00010101';
			Объект.ПотребностиДоДаты     = '00010101';
		КонецЕсли;
		
	КонецЕсли;
	
	// Приведение варианта оформления к допустимому значнию.
	ДоступныеВариантыОформления = Элементы.ВариантОформления.СписокВыбора.ВыгрузитьЗначения();
	Если ДоступныеВариантыОформления.Найти(Объект.ВариантОформления) = Неопределено Тогда
		
		Если ДоступныеВариантыОформления.Количество() > 0 Тогда
			Объект.ВариантОформления = ДоступныеВариантыОформления[0];
		Иначе
			Объект.ВариантОформления = Перечисления.ВариантыОформленияДокументовПеремещения.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	
	// Контекстно-зависимая настройка формы.
	ПриИзмененииРеквизитов();

КонецПроцедуры

#КонецОбласти
