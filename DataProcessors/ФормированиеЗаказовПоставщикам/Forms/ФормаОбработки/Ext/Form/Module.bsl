
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Не ПолучитьФункциональнуюОпцию("НеИспользоватьРасширенноеОбеспечениеПотребностей") Тогда
		ВызватьИсключение НСтр("ru = 'Обработка не предназначена для открытия с выключенной функциональной опцией ""Не использовать расширенное обеспечение потребностей""'");
	КонецЕсли;
	
	// Настройка формы, не требующая инициализации реквизитов.
	УстановитьУсловноеОформление();
	ПереключитьСтраницы("Запасы", Элементы);
	Элементы.СреднедневноеПотребление.Заголовок
		= НСтр("ru = 'Среднедневное потребление'"); // иначе не удается уменьшить ширину колонки до требуемой.
	Элементы.ВалютаНадпись.Заголовок = Строка(Константы.ВалютаУправленческогоУчета.Получить());
	Элементы.ЕдиницаИзмеренияНадпись.Заголовок = Строка(Константы.ЕдиницаИзмеренияВеса.Получить());
	Элементы.ЕдиницаИзмеренияОбъемаНадпись.Заголовок = Строка(Константы.ЕдиницаИзмеренияОбъема.Получить());

	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	// Инициализация реквизитов формы.
	ВосстановитьНастройки();
	Объект.Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию();

	ЗаполнитьТаблицы();

	НастроитьЭлементыПриИзмененииРеквизитов();

	ИспользоватьСтатусы = ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовПоставщикам");
	СписокДокументы.Параметры.УстановитьЗначениеПараметра("ДатаАктуальности", НачалоДня(ТекущаяДатаСеанса()));
	СписокДокументы.Параметры.УстановитьЗначениеПараметра("ИспользоватьСтатусы", ИспользоватьСтатусы);
	СписокДокументы.Параметры.УстановитьЗначениеПараметра("СозданныеДокументы", Новый Массив);

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументЗакупки.Форма.Форма" Тогда

		ОбработкаВыбораНаСервере(ВыбранноеЗначение.АдресТоваровВХранилище);

	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровПоОтбору.Форма.Форма" Тогда

		ОбработкаВыбораНаСервере(ВыбранноеЗначение.АдресТоваровВХранилище);

	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.Партнеры.Форма.ФормаВыбора"
		Или ИсточникВыбора.ИмяФормы = "Справочник.Партнеры.Форма.ФормаВыбораБезПолнотекстовогоПоиска" Тогда

		ЗаполнитьПоставщикаНаСервере(ВыбранноеЗначение);

	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ФормированиеЗаказовПоставщикам.Форма.ВводЗначения" Тогда

		ВводЗначенияНаСервере(ВыбранноеЗначение);

	ИначеЕсли ВыбранноеЗначение.Свойство("ПараметрыПоставкиОптимальные") Тогда

		Контекст = КонтекстТекущейСтраницы(ЭтаФорма);
		Строка = Контекст.Коллекция.НайтиПоИдентификатору(Контекст.ТекущаяСтрока);
		Строка.Поставщик  = ВыбранноеЗначение.ПараметрыПоставкиОптимальные.ИсточникОбеспечения;
		Строка.Соглашение = ВыбранноеЗначение.ПараметрыПоставкиОптимальные.Соглашение;
		Строка.Цена       = ВыбранноеЗначение.ПараметрыПоставкиОптимальные.ЦенаВВалютеУправленческогоУчета;
		Строка.ВидЦеныПоставщика = ВыбранноеЗначение.ПараметрыПоставкиОптимальные.ВидЦены;
		ОбновитьИтогиВСтроке(Строка);
		ОбновитьИтоги(ЭтаФорма);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ВключенаОбработкаОповещенийЗаписиДокументов И ИмяСобытия = "Запись_ЗаказПоставщику" Тогда
		
		Элементы.СписокДокументы.Обновить();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.ФормированиеЗаказовПоставщикам.Форма.ФормаОбработки.Элемент.Склад.ПриИзменении");
	
	ЗаполнитьТаблицы(Ложь);
	ПереключитьСтраницы("Запасы", Элементы);
	НастроитьЭлементыПриИзмененииРеквизитов("Склад");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечиватьЗаказыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если Элементы.Закладки.ТекущаяСтраница = Элементы.СтраницаДокументы Тогда

		Если СозданыЗаказы Тогда

			СозданыЗаказы = Ложь;
			ВключенаОбработкаОповещенийЗаписиДокументов = Ложь;
			УдалитьДокументы();
			ОчиститьСообщения();
			ПоказатьОповещениеПользователя(НСтр("ru = 'Удаление документов'"), , НСтр("ru = 'Сформированные заказы удалены.'"));

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбеспечиватьЗаказыПриИзменении(Элемент)

	ОбеспечиватьЗаказыПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ОбеспечиватьЗаказыОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ПериодПродажПриИзменении(Элемент)

	РассчитатьСреднедневноеПотреблениеНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ТолькоОтмеченныеФильтрЗапасыПриИзменении(Элемент)

	ОбновитьФильтрОстаток();

КонецПроцедуры

&НаКлиенте
Процедура ТолькоОтмеченныеФильтрЗаказыПриИзменении(Элемент)

	СтруктураОтбора = Новый Структура();
	Если ТолькоОтмеченныеФильтрЗаказы Тогда
		СтруктураОтбора.Вставить("Отметка", Истина);
	КонецЕсли;

	Если ЗначениеЗаполнено(СтруктураОтбора) Тогда
		Элементы.Заказы.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбора);
	Иначе
		Элементы.Заказы.ОтборСтрок = Неопределено;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗапасы

&НаКлиенте
Процедура ЗапасыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.НоменклатураЗапасы Тогда
		
		ПоказатьЗначение(,Элементы.Запасы.ТекущиеДанные.Номенклатура);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МаксимальныйОстатокПриИзменении(Элемент)

	ЗаписатьПараметрыПоддержанияЗапасаТекущейСтроки();

КонецПроцедуры

&НаКлиенте
Процедура МинимальныйОстатокПриИзменении(Элемент)

	ЗаписатьПараметрыПоддержанияЗапасаТекущейСтроки();

КонецПроцедуры

&НаКлиенте
Процедура ОтметкаЗапасыПриИзменении(Элемент)

	Строка = Элементы.Запасы.ТекущиеДанные;
	ОбновитьИтогиВСтроке(Строка);
	ОбновитьИтоги(ЭтаФорма);

	МодифицированаТаблицаЗапасы = Истина;

КонецПроцедуры

&НаКлиенте
Процедура КЗаказуЗапасыПриИзменении(Элемент)

	Строка = Элементы.Запасы.ТекущиеДанные;
	Строка.Отметка = Строка.КЗаказу > 0;
	ОбновитьИтогиВСтроке(Строка);
	ОбновитьИтоги(ЭтаФорма);

	МодифицированаТаблицаЗапасы = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПоставщикЗапасыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	Строка = Элементы.Запасы.ТекущиеДанные;

	ПараметрыФормы = Новый Структура("Склад, Номенклатура, Характеристика, ЭтоРабота, ТипОбеспечения");
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, Строка);
	ПараметрыФормы.ТипОбеспечения = ПредопределенноеЗначение("Перечисление.ТипыОбеспечения.Покупка");
	ПараметрыФормы.ЭтоРабота = Ложь;
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Обработка.ОбеспечениеПотребностей.Форма.ФормаВыбораИсточникаОбеспечения", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПоставщикЗапасыПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Запасы.ТекущиеДанные;
	ПоставщикПриИзмененииНаКлиенте(СтрокаТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаЗапасыПриИзменении(Элемент)

	Строка = Элементы.Запасы.ТекущиеДанные;
	ОбновитьИтогиВСтроке(Строка);
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПослеУдаления(Элемент)

	МодифицированаТаблицаЗапасы = Истина;
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)

	Отказ = Истина;

	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ПодобратьТоварыНаКлиенте();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаказы

&НаКлиенте
Процедура ЗаказыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.НоменклатураЗаказы Тогда
		
		ПоказатьЗначение(,Элементы.Заказы.ТекущиеДанные.Номенклатура);
		
	ИначеЕсли Поле = Элементы.Заказ Тогда
		
		ПоказатьЗначение(,Элементы.Заказы.ТекущиеДанные.Заказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ЗаказОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ЗаказСоздание(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура НоменклатураЗаказыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура НоменклатураЗаказыОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура НоменклатураЗаказыСоздание(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ОтметкаЗаказыПриИзменении(Элемент)

	Строка = Элементы.Заказы.ТекущиеДанные;
	ОбновитьИтогиВСтроке(Строка);
	ОбновитьИтоги(ЭтаФорма);
	СтруктураОтбора = Новый Структура();
	Если ТолькоОтмеченныеФильтрЗаказы Тогда
		СтруктураОтбора.Вставить("Отметка", Истина);
	КонецЕсли;

	Если ЗначениеЗаполнено(СтруктураОтбора) Тогда
		Элементы.Заказы.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбора);
	Иначе
		Элементы.Заказы.ОтборСтрок = Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КЗаказуЗаказыПриИзменении(Элемент)

	Строка = Элементы.Заказы.ТекущиеДанные;
	Строка.Отметка = Строка.КЗаказу > 0;
	ОбновитьИтогиВСтроке(Строка);
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПоставщикЗаказыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	Строка = Элементы.Заказы.ТекущиеДанные;

	ПараметрыФормы = Новый Структура("Склад, Номенклатура, Характеристика, ЭтоРабота, ТипОбеспечения");
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, Строка);
	ПараметрыФормы.ТипОбеспечения = ПредопределенноеЗначение("Перечисление.ТипыОбеспечения.Покупка");
	ПараметрыФормы.ЭтоРабота = ЗначениеЗаполнено(Строка.ПодразделениеПолучатель);
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Обработка.ОбеспечениеПотребностей.Форма.ФормаВыбораИсточникаОбеспечения", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПоставщикЗаказыПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Заказы.ТекущиеДанные;
	ПоставщикПриИзмененииНаКлиенте(СтрокаТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаЗаказыПриИзменении(Элемент)

	Строка = Элементы.Заказы.ТекущиеДанные;
	ОбновитьИтогиВСтроке(Строка);
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ПереключениеЗакладок

&НаКлиенте
Процедура Далее(Команда)

	Если Объект.Заказы.Количество() = 0 И Элементы.Закладки.ТекущаяСтраница = Элементы.СтраницаЗапасы Тогда

		ЗаполнитьТаблицуЗаказы();
		МодифицированаТаблицаЗапасы = Ложь;

	ИначеЕсли МодифицированаТаблицаЗапасы И Элементы.Закладки.ТекущаяСтраница = Элементы.СтраницаЗапасы Тогда

		АдресВХранилищеИзменения = Неопределено;
		Если ЕстьИзмененияЗапасы(АдресВХранилищеИзменения) И ОбеспечиватьЗаказы = ТекстЗаСчетОстатка() Тогда

			ЗаполнитьТаблицуЗаказы();
			МодифицированаТаблицаЗапасы = Ложь;

		КонецЕсли;

	ИначеЕсли Элементы.Закладки.ТекущаяСтраница = Элементы.СтраницаЗаказы Тогда

		Оповещения = СформироватьЗаказы();
		Для Каждого Оповещение Из Оповещения Цикл
			Оповестить(Оповещение.ИмяСобытия, Оповещение.ПараметрыОповещения, Оповещение.Источник);
		КонецЦикла;
		
		ВключенаОбработкаОповещенийЗаписиДокументов = Истина;

	ИначеЕсли Элементы.Закладки.ТекущаяСтраница = Элементы.СтраницаДокументы Тогда

		ЗаполнитьТаблицы(Ложь);

	КонецЕсли;

	Если Элементы.Закладки.ТекущаяСтраница = Элементы.СтраницаЗапасы Тогда
		ПереключитьСтраницы("Заказы", Элементы);
	ИначеЕсли Элементы.Закладки.ТекущаяСтраница = Элементы.СтраницаЗаказы Тогда
		ПереключитьСтраницы("Документы", Элементы);
	ИначеЕсли Элементы.Закладки.ТекущаяСтраница = Элементы.СтраницаДокументы Тогда
		ПереключитьСтраницы("Запасы", Элементы);
		СозданыЗаказы = Ложь;
		ВключенаОбработкаОповещенийЗаписиДокументов = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)

	Если Элементы.Закладки.ТекущаяСтраница = Элементы.СтраницаЗаказы Тогда

		ПереключитьСтраницы("Запасы", Элементы);

	ИначеЕсли СозданыЗаказы Тогда

		ПереключитьСтраницы("Заказы", Элементы);
		СозданыЗаказы = Ложь;
		ВключенаОбработкаОповещенийЗаписиДокументов = Ложь;
		ОчиститьСообщения();
		УдалитьДокументы();
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Установка пометки удаления документов'"),
			,
			НСтр("ru = 'Сформированные заказы помечены на удаление.'"));

	ИначеЕсли Элементы.Закладки.ТекущаяСтраница = Элементы.СтраницаДокументы Тогда

		ПереключитьСтраницы("Заказы", Элементы);

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область КомандыТаблицыЗапасы

&НаКлиенте
Процедура ОтметитьЗапасы(Команда)

	УстановитьОтметку(Истина, "Запасы");

КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкуЗапасы(Команда)

	УстановитьОтметку(Ложь, "Запасы");

КонецПроцедуры

&НаКлиенте
Процедура ПодобратьТовары(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.ФормированиеЗаказовПоставщикам.ФормаОбработки.Команда.ПодобратьТовары");
	
	ПодобратьТоварыНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ПараметрыЗагрузки = РаботаСТабличнымиЧастямиКлиент.ПараметрыЗагрузкиНоменклатуры();
	ПараметрыЗагрузки.ПроверятьЗаполнениеХарактеристик = Истина;
	ПараметрыЗагрузки.ЗагружатьКоличество = Ложь;
	ПараметрыЗагрузки.ЗагружатьЗапасы     = Истина;
	ПараметрыЗагрузки.ПараметрыОтбора.Вставить("ТипНоменклатуры",
		НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре(Ложь));
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	РаботаСТабличнымиЧастямиКлиент.ПоказатьФормуЗагрузкиНоменклатуры(ПараметрыЗагрузки, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(АдресЗагруженныхДанных) Тогда
		ОбработкаВыбораНаСервере(АдресЗагруженныхДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоОтбору(Команда)

	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Заголовок",                НСтр("ru = 'Подбор товаров'"));
	ПараметрыФормы.Вставить("ЗаголовокКнопкиПеренести", НСтр("ru = 'Перенести в список'"));
	ПараметрыФормы.Вставить("УникальныйИдентификатор",  УникальныйИдентификатор);
	ПараметрыФормы.Вставить("РежимВыбора",              Истина);

	ТипыНоменклатуры = Новый Массив();
	ТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
	ТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"));
	ОтборПоТипуНоменклатуры = Новый ФиксированныйМассив(ТипыНоменклатуры);
	ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", ОтборПоТипуНоменклатуры);

	ОткрытьФорму("Обработка.ПодборТоваровПоОтбору.Форма", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоставщика(Команда)

	Контекст = КонтекстТекущейСтраницы(ЭтаФорма);

	Если Контекст.ВыделенныеСтроки.Количество() = 0 Тогда

		ПоказатьОповещениеПользователя(НСтр("ru = 'Заполнение поставщика'"),
			, НСтр("ru = 'Для заполнения поставщика необходимо выделить строки списка.'"));

	Иначе

		ПараметрыФормыОтбор = Новый Структура("Поставщик");
		ПараметрыФормы = Новый Структура("Отбор", ПараметрыФормыОтбор);
		ОткрытьФорму("Справочник.Партнеры.ФормаВыбора", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМинимальныйОстаток(Команда)

	Контекст = КонтекстТекущейСтраницы(ЭтаФорма);

	Если Контекст.ВыделенныеСтроки.Количество() = 0 Тогда

		ПоказатьОповещениеПользователя(НСтр("ru = 'Заполнение минимального остатка'"),
			, НСтр("ru = 'Для заполнения минимального остатка необходимо выделить строки списка.'"));

	Иначе

		ПараметрыФормы = Новый Структура("Режим", "МинимальныйОстаток");
		ОткрытьФорму("Обработка.ФормированиеЗаказовПоставщикам.Форма.ВводЗначения",
			ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМаксимальныйОстаток(Команда)

	Контекст = КонтекстТекущейСтраницы(ЭтаФорма);

	Если Контекст.ВыделенныеСтроки.Количество() = 0 Тогда

		ПоказатьОповещениеПользователя(НСтр("ru = 'Заполнение максимального остатка'"),
			, НСтр("ru = 'Для заполнения максимального остатка необходимо выделить строки списка.'"));

	Иначе

		ПараметрыФормы = Новый Структура("Режим", "МаксимальныйОстаток");
		ОткрытьФорму("Обработка.ФормированиеЗаказовПоставщикам.Форма.ВводЗначения",
			ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура МеньшеМинимальногоОстатка(Команда)

	ПометитьКоманду("МеньшеМинимальногоОстатка");

КонецПроцедуры

&НаКлиенте
Процедура МеньшеУдвоенногоМинимальногоОстатка(Команда)

	ПометитьКоманду("МеньшеУдвоенногоМинимальногоОстатка");

КонецПроцедуры

&НаКлиенте
Процедура БольшеМинимальногоОстатка(Команда)

	ПометитьКоманду("БольшеМинимальногоОстатка");

КонецПроцедуры

&НаКлиенте
Процедура БольшеМаксимальногоОстатка(Команда)

	ПометитьКоманду("БольшеМаксимальногоОстатка");

КонецПроцедуры

&НаКлиенте
Процедура НеПоддерживатьОстатокТовара(Команда)

	НеПоддерживатьОстатокНаСервере();

КонецПроцедуры

#КонецОбласти

#Область КомандыТаблицыЗаказы

&НаКлиенте
Процедура ОтметитьЗаказы(Команда)

	УстановитьОтметку(Истина, "Заказы");

КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкуЗаказы(Команда)

	УстановитьОтметку(Ложь, "Заказы");

КонецПроцедуры

#КонецОбласти

#Область УстановкаСтатуса

&НаКлиенте
Процедура УстановитьСтатусНеСогласован(Команда)

	УстановитьСтатус(Новый ОписаниеОповещения("УстановитьСтатусНеСогласованЗавершение", ЭтотОбъект), "НеСогласован", НСтр("ru = 'Не согласован'"));

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусПодтвержден(Команда)

	УстановитьСтатус(Новый ОписаниеОповещения("УстановитьСтатусПодтвержденЗавершение", ЭтотОбъект), "Подтвержден", НСтр("ru = 'Подтвержден'"));

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусСогласован(Команда)

	УстановитьСтатус(Новый ОписаниеОповещения("УстановитьСтатусСогласованЗавершение", ЭтотОбъект), "Согласован", НСтр("ru = 'Согласован'"));

КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдаление(Команда)

	Строки = Элементы.СписокДокументы.ВыделенныеСтроки;
	Если Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Действие = ?(Элементы.СписокДокументы.ТекущиеДанные.ПометкаУдаления, "СнятьПометкуУдаления", "ПометитьНаУдаление");

	Если Строки.Количество() = 1 И Действие = "ПометитьНаУдаление" Тогда

		Текст = СтрШаблон(НСтр("ru = 'Пометить ""%1"" на удаление'"), Строки[0]);

	ИначеЕсли Строки.Количество() = 1 И Действие = "СнятьПометкуУдаления" Тогда

		Текст = СтрШаблон(НСтр("ru = 'Снять с ""%1"" пометку удаления'"), Строки[0]);

	ИначеЕсли Действие = "ПометитьНаУдаление" Тогда

		Текст = НСтр("ru = 'Пометить выделенные элементы на удаление'");

	ИначеЕсли Действие = "СнятьПометкуУдаления" Тогда

		Текст = НСтр("ru = 'Снять с выделенных элементов опметку удаления'");

	КонецЕсли;

	ДопПараметры = Новый Структура("Действие", Действие);
	Оповещение = Новый ОписаниеОповещения("ВыполнитьКомандуСпискаДокументы", ЭтаФорма, ДопПараметры);
	ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	Элементы.СписокДокументы.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаПроведения(Команда)

	ОчиститьСообщения();
	ВыполнитьКомандуСпискаДокументыСервер("ОтменитьПроведение");

КонецПроцедуры

&НаКлиенте
Процедура Провести(Команда)

	Очиститьсообщения();
	ВыполнитьКомандуСпискаДокументыСервер("Провести");

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Объявления

&НаКлиентеНаСервереБезКонтекста
Функция СохраняемыеРеквизиты()

	Возврат Новый Структура("ОбеспечиватьЗаказы, ПериодПродаж");

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстЗаСчетОстатка()

	Возврат НСтр("ru = 'За счет остатка'");

КонецФункции

#КонецОбласти

#Область НастройкиФормы

&НаСервере
Процедура СохранитьНастройки()

	ЗначениеНастроек = СохраняемыеРеквизиты();
	ЗаполнитьЗначенияСвойств(ЗначениеНастроек, ЭтаФорма);
	ЗначениеНастроек.ПериодПродаж = Объект.ПериодПродаж;
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Обработка.ФормированиеЗаказовПоставщикам", "Основная",
		ЗначениеНастроек);

КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки()

	ЗначениеНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Обработка.ФормированиеЗаказовПоставщикам",
		"Основная", , Пользователи.ТекущийПользователь());

	Если Не ТипЗнч(ЗначениеНастроек) = Тип("Структура") Тогда // первый запуск формы, настройки по умолчанию

		ЗначениеНастроек = СохраняемыеРеквизиты();
		ЗначениеНастроек.ОбеспечиватьЗаказы = ТекстЗаСчетОстатка();
		ЗначениеНастроек.ПериодПродаж = 30;

	КонецЕсли;

	ЗаполнитьЗначенияСвойств(ЭтаФорма, ЗначениеНастроек);
	Объект.ПериодПродаж = ЗначениеНастроек.ПериодПродаж;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормыСервернаяЧасть

&НаСервере
Процедура ЗаполнитьПоставщикаНаСервере(Ссылка)
	
	УсловияЗакупок = ОбеспечениеСервер.УсловияЗакупокПартнера(Ссылка);
	
	ДатаСеанса = ТекущаяДатаСеанса();
	ПараметрыПолученияЦен = ЦеныПартнеровЗаполнениеСервер.НовыйПараметрыПолученияЦенНоменклатурыПартнера();
	ПараметрыПолученияЦен.Дата                         = ДатаСеанса;
	ПараметрыПолученияЦен.Валюта                       = УсловияЗакупок.Валюта;
	ПараметрыПолученияЦен.НалогообложениеНДС           = Перечисления.ТипыНалогообложенияНДС.ПустаяСсылка();
	ПараметрыПолученияЦен.ВозвращатьМногооборотнуюТару = Ложь;
	
	Таблица = Новый ТаблицаЗначений();
	
	Таблица.Колонки.Добавить("НомерСтроки",       ОбщегоНазначения.ОписаниеТипаЧисло(15, 0));
	Таблица.Колонки.Добавить("Номенклатура",      Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Таблица.Колонки.Добавить("Характеристика",    Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Таблица.Колонки.Добавить("Упаковка",          Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	Таблица.Колонки.Добавить("ВидЦеныПоставщика", Новый ОписаниеТипов("СправочникСсылка.ВидыЦенПоставщиков"));
	
	Контекст = КонтекстТекущейСтраницы(ЭтаФорма);
	
	ПустаяУпаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
	ВалютаУпрУчет = Константы.ВалютаУправленческогоУчета.Получить();
	Коэффициент = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(
		УсловияЗакупок.Валюта, ВалютаУпрУчет, ДатаСеанса);
	
	Для Каждого Идентификатор Из Контекст.ВыделенныеСтроки Цикл
	
		Строка = Контекст.Коллекция.НайтиПоИдентификатору(Идентификатор);
		
		Строка.Поставщик         = Ссылка;
		Строка.Соглашение        = УсловияЗакупок.Соглашение;
		Строка.ВидЦеныПоставщика = УсловияЗакупок.ВидЦеныПоставщика;
		Строка.Цена              = 0;
		
		Если ЗначениеЗаполнено(Строка.ВидЦеныПоставщика) Тогда
			
			НоваяСтрока = Таблица.Добавить();
			
			НоваяСтрока.НомерСтроки       = Идентификатор;
			НоваяСтрока.Номенклатура      = Строка.Номенклатура;
			НоваяСтрока.Характеристика    = Строка.Характеристика;
			НоваяСтрока.Упаковка          = ПустаяУпаковка;
			НоваяСтрока.ВидЦеныПоставщика = Строка.ВидЦеныПоставщика;
			
		КонецЕсли;
		
	КонецЦикла;
	
	РезультатЗапроса = ЦеныПартнеровЗаполнениеСервер.ЦеныНоменклатурыПартнера(Таблица, ПараметрыПолученияЦен);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Строка = Контекст.Коллекция.НайтиПоИдентификатору(Выборка.НомерСтроки);
		Если ЗначениеЗаполнено(Выборка.Цена) Тогда
		
			Строка.Цена = Выборка.Цена * Коэффициент;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Идентификатор Из Контекст.ВыделенныеСтроки Цикл
	
		Строка = Контекст.Коллекция.НайтиПоИдентификатору(Идентификатор);
		ОбновитьИтогиВСтроке(Строка);
		
	КонецЦикла;
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСреднедневноеПотреблениеНаСервере()

	ПараметрыРасчета = Новый Структура("ЗаСчетЗапасов", ОбеспечиватьЗаказы = ТекстЗаСчетОстатка());
	Обработки.ФормированиеЗаказовПоставщикам.ОбновитьДанныеОПродажах(Объект, ПараметрыРасчета);
	
	СохранитьНастройки();

КонецПроцедуры

&НаСервере
Функция ЗаполнитьПолеВВыделенныхСтроках(ИмяПоля, Значение, Рассчитывать = Ложь)

	Результат = ТаблицаРегистрТоварныеОграничения();
	ЗаСчетЗапасов = ОбеспечиватьЗаказы = ТекстЗаСчетОстатка();

	Контекст = КонтекстТекущейСтраницы(ЭтаФорма);
	ЭтоЗаполнениеНесколькихПолей = ТипЗнч(Значение) = Тип("Структура");

	Для Каждого Идентификатор Из Контекст.ВыделенныеСтроки Цикл

		Строка = Контекст.Коллекция.НайтиПоИдентификатору(Идентификатор);

		Если Не Рассчитывать Тогда

			Если ЭтоЗаполнениеНесколькихПолей Тогда
				ЗаполнитьЗначенияСвойств(Строка, Значение, ИмяПоля);
			Иначе
				Строка[ИмяПоля] = Значение;
			КонецЕсли;

		ИначеЕсли ИмяПоля = "МинимальныйОстаток" Или ИмяПоля = "МаксимальныйОстаток" Тогда

			Строка[ИмяПоля] = Значение * Строка.СреднедневноеПотребление;

		КонецЕсли;

		Если ИмяПоля = "МинимальныйОстаток" Или ИмяПоля = "МаксимальныйОстаток" Тогда

			Если Строка.ЕдиницаИзмеренияШтучная Тогда

				Если Не Рассчитывать Тогда

					Строка[ИмяПоля] = Цел(Строка[ИмяПоля]);

				Иначе

					Строка[ИмяПоля] = Цел(Строка[ИмяПоля]) + ?(Цел(Строка[ИмяПоля]) < Строка[ИмяПоля], 1, 0);

				КонецЕсли;

			КонецЕсли;

			РезультатРасчета = Обработки.ФормированиеЗаказовПоставщикам.КЗаказуДляПоддержанияЗапаса(Строка, ЗаСчетЗапасов);
			ЗаполнитьЗначенияСвойств(Строка, РезультатРасчета);

			НоваяСтрока = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);

			РезультатРасчета = Обработки.ФормированиеЗаказовПоставщикам.СлужебныеРеквизиты(Строка);
			ЗаполнитьЗначенияСвойств(Строка, РезультатРасчета);
			ИмяОтмеченнойКомандыУровеньЗапаса = УровеньЗапаса();
			Строка.НеУдовлетворяетОтбору = Обработки.ФормированиеЗаказовПоставщикам.НеУдовлетворяетОтбору(
				Строка, ИмяОтмеченнойКомандыУровеньЗапаса, ОбеспечиватьЗаказы);

		КонецЕсли;

	КонецЦикла;

	Возврат Результат;

КонецФункции

&НаСервере
Функция ТаблицаРегистрТоварныеОграничения()

	Результат = Новый ТаблицаЗначений();
	Результат.Колонки.Добавить("Номенклатура",   Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Результат.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Результат.Колонки.Добавить("Склад",          Новый ОписаниеТипов("СправочникСсылка.Склады"));
	Результат.Колонки.Добавить("МинимальныйОстаток",  ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 3));
	Результат.Колонки.Добавить("МаксимальныйОстаток", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 3));

	Возврат Результат;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КонтекстТекущейСтраницы(Форма)

	Результат = Новый Структура("Коллекция, ВыделенныеСтроки, ТекущаяСтрока");

	Если Форма.Элементы.Закладки.ТекущаяСтраница = Форма.Элементы.СтраницаЗапасы Тогда

		Результат.Коллекция = Форма.Объект.Запасы;
		Результат.ВыделенныеСтроки = Форма.Элементы.Запасы.ВыделенныеСтроки;
		Результат.ТекущаяСтрока = Форма.Элементы.Запасы.ТекущаяСтрока;

	ИначеЕсли Форма.Элементы.Закладки.ТекущаяСтраница = Форма.Элементы.СтраницаЗаказы Тогда

		Результат.Коллекция = Форма.Объект.Заказы;
		Результат.ВыделенныеСтроки = Форма.Элементы.Заказы.ВыделенныеСтроки;
		Результат.ТекущаяСтрока = Форма.Элементы.Заказы.ТекущаяСтрока;

	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицы(УдалятьДокументы = Истина)

	Если УдалятьДокументы Тогда

		УдалитьДокументы();

	КонецЕсли;

	СформированныеЗаказы.Очистить();
	Объект.Запасы.Очистить();
	Объект.Заказы.Очистить();
	ЗапасыКопия.Очистить();
	МодифицированаТаблицаЗапасы = Ложь;

	Если ЗначениеЗаполнено(Объект.Склад) Тогда

		ПараметрыРасчета = Новый Структура("ЗаСчетЗапасов", ОбеспечиватьЗаказы = ТекстЗаСчетОстатка());
		Обработки.ФормированиеЗаказовПоставщикам.ЗаполнитьПоСостояниюЗапасов(Объект, ПараметрыРасчета);
		Объект.Запасы.Сортировать("Номенклатура, Характеристика, Склад");

		Колонки = "Номенклатура, Характеристика, Склад, КЗаказу";
		ЗапасыКопия.Загрузить(Объект.Запасы.Выгрузить(Новый Структура("Отметка", Истина), Колонки));

	КонецЕсли;

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранноеЗначение)

	Если ЭтоАдресВременногоХранилища(ВыбранноеЗначение) Тогда

		Таблица = ПолучитьИзВременногоХранилища(ВыбранноеЗначение);

	Иначе

		Таблица = Новый ТаблицаЗначений();
		Таблица.Колонки.Добавить("Номенклатура",   Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		Таблица.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));

		Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда

			Для Каждого Элемент Из ВыбранноеЗначение Цикл
				НоваяСтрока = Таблица.Добавить();
				НоваяСтрока.Номенклатура = Элемент;
			КонецЦикла;

		ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Номенклатура") Тогда

			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Номенклатура = ВыбранноеЗначение;

		КонецЕсли;

	КонецЕсли;

	Если Таблица.Колонки.Найти("Склад") = Неопределено Тогда
		Таблица.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	КонецЕсли;
	Таблица.ЗаполнитьЗначения(Объект.Склад, "Склад");

	ПараметрыРасчета = Новый Структура("ЗаСчетЗапасов", ОбеспечиватьЗаказы = ТекстЗаСчетОстатка());
	ПараметрыРасчета.Вставить("МодифицированаТаблицаЗапасы", Ложь);
	Обработки.ФормированиеЗаказовПоставщикам.ДобавитьТоварыВТаблицуЗапасы(
		Объект, Таблица, ПараметрыРасчета, УровеньЗапаса(), ОбеспечиватьЗаказы);
	МодифицированаТаблицаЗапасы = ПараметрыРасчета.МодифицированаТаблицаЗапасы;

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ВводЗначенияНаСервере(ВыбранноеЗначение)

	Если ВыбранноеЗначение.Режим = "МинимальныйОстаток" Или ВыбранноеЗначение.Режим = "МаксимальныйОстаток" Тогда

		Таблица = ЗаполнитьПолеВВыделенныхСтроках(ВыбранноеЗначение.Режим, ВыбранноеЗначение.Значение,
			ВыбранноеЗначение.Рассчитывать);

	КонецЕсли;

	Обработки.ФормированиеЗаказовПоставщикам.ЗаписатьПараметрыПоддержанияЗапаса(Таблица);
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ЗаписатьПараметрыПоддержанияЗапасаТекущейСтроки()

	Таблица = ТаблицаРегистрТоварныеОграничения();

	Строка = Объект.Запасы.НайтиПоИдентификатору(Элементы.Запасы.ТекущаяСтрока);
	ЗаполнитьЗначенияСвойств(Таблица.Добавить(), Строка);
	Обработки.ФормированиеЗаказовПоставщикам.ЗаписатьПараметрыПоддержанияЗапаса(Таблица);

	ЗаСчетЗапасов = ОбеспечиватьЗаказы = ТекстЗаСчетОстатка();

	РезультатРасчета = Обработки.ФормированиеЗаказовПоставщикам.КЗаказуДляПоддержанияЗапаса(Строка, ЗаСчетЗапасов);
	ЗаполнитьЗначенияСвойств(Строка, РезультатРасчета);

	РезультатРасчета = Обработки.ФормированиеЗаказовПоставщикам.СлужебныеРеквизиты(Строка);
	ЗаполнитьЗначенияСвойств(Строка, РезультатРасчета);
	ИмяОтмеченнойКомандыУровеньЗапаса = УровеньЗапаса();
	Строка.НеУдовлетворяетОтбору = Обработки.ФормированиеЗаказовПоставщикам.НеУдовлетворяетОтбору(
		Строка, ИмяОтмеченнойКомандыУровеньЗапаса, ОбеспечиватьЗаказы);

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура УстановитьОтметку(Отметка, ИмяТаблицы)
	
	ВыделенныеСтроки = ?(ИмяТаблицы = "Запасы", Элементы.Запасы.ВыделенныеСтроки,
	                                            Элементы.Заказы.ВыделенныеСтроки);
	
	Для каждого Идентификатор Из ВыделенныеСтроки Цикл
		
		Строка = Объект[ИмяТаблицы].НайтиПоИдентификатору(Идентификатор);
		Строка.Отметка = Отметка;
		ОбновитьИтогиВСтроке(Строка);
		
	КонецЦикла;
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура НеПоддерживатьОстатокНаСервере()

	Для Каждого Идентификатор Из Элементы.Запасы.ВыделенныеСтроки Цикл

		Строка = Объект.Запасы.НайтиПоИдентификатору(Идентификатор);
		
		Если ЗначениеЗаполнено(Строка.Характеристика) Тогда
			КлючЗаписи = РегистрыСведений.ТоварныеОграничения.КлючЗаписиХарактеристики();
			КлючЗаписи.Характеристика = Строка.Характеристика;
		Иначе
			КлючЗаписи = РегистрыСведений.ТоварныеОграничения.КлючЗаписиНоменклатуры();
		КонецЕсли;
		КлючЗаписи.Номенклатура	= Строка.Номенклатура;
		КлючЗаписи.Склад		= Строка.Склад;
		РегистрыСведений.ТоварныеОграничения.УдалитьПоддержаниеЗапаса(КлючЗаписи);
		
		Строка.МинимальныйОстаток  = 0;
		Строка.МаксимальныйОстаток = 0;
		
		ЗаСчетЗапасов = ОбеспечиватьЗаказы = ТекстЗаСчетОстатка();
		
		РезультатРасчета = Обработки.ФормированиеЗаказовПоставщикам.КЗаказуДляПоддержанияЗапаса(Строка, ЗаСчетЗапасов);
		ЗаполнитьЗначенияСвойств(Строка, РезультатРасчета);
		
		РезультатРасчета = Обработки.ФормированиеЗаказовПоставщикам.СлужебныеРеквизиты(Строка);
		ЗаполнитьЗначенияСвойств(Строка, РезультатРасчета);
		ИмяОтмеченнойКомандыУровеньЗапаса = УровеньЗапаса();
		Строка.НеУдовлетворяетОтбору = Обработки.ФормированиеЗаказовПоставщикам.НеУдовлетворяетОтбору(
			Строка, ИмяОтмеченнойКомандыУровеньЗапаса, ОбеспечиватьЗаказы);
		МодифицированаТаблицаЗапасы = Истина;

	КонецЦикла;
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

// Параметры:
//  РезультатВопроса - КодВозвратаДиалога - Результат закрытия окна с вопросом пользователю. 
//  ДополнительныеПараметры - Структура - Структура дополнительных параметров для выполнения оповещения.
&НаКлиенте
Процедура ВыполнитьКомандуСпискаДокументы(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Очиститьсообщения();
		ВыполнитьКомандуСпискаДокументыСервер(ДополнительныеПараметры.Действие);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуСпискаДокументыСервер(Действие = Неопределено)

	Если Действие <> Неопределено Тогда

		Для Каждого Ссылка Из Элементы.СписокДокументы.ВыделенныеСтроки Цикл

			Документ = Ссылка.ПолучитьОбъект();

			Документ.Заблокировать();
			Заблокирован = Документ.Заблокирован();

			Если Заблокирован Тогда

				Если Действие = "ПометитьНаУдаление" Тогда
					Документ.УстановитьПометкуУдаления(Истина);
				ИначеЕсли Действие = "СнятьПометкуУдаления" Тогда
					Документ.УстановитьПометкуУдаления(Ложь);
				ИначеЕсли Действие = "Провести" Тогда
					Если Документ.ПроверитьЗаполнение() Тогда
						Документ.Записать(РежимЗаписиДокумента.Проведение);
					КонецЕсли;
				ИначеЕсли Действие = "ОтменитьПроведение" Тогда
					Документ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	Элементы.СписокДокументы.Обновить();

КонецПроцедуры

#КонецОбласти

#Область Фильтры

&НаСервере
Процедура ПометитьКоманду(ИмяКоманды)

	Если Элементы[ИмяКоманды].Пометка Тогда Элементы[ИмяКоманды].Пометка = Ложь;

		ОбновитьФильтрОстаток("");

	Иначе

		Элементы.МеньшеМинимальногоОстатка.Пометка           = Ложь;
		Элементы.МеньшеУдвоенногоМинимальногоОстатка.Пометка = Ложь;
		Элементы.БольшеМинимальногоОстатка.Пометка           = Ложь;
		Элементы.БольшеМаксимальногоОстатка.Пометка          = Ложь;
		Элементы[ИмяКоманды].Пометка = Истина;

		ОбновитьФильтрОстаток(ИмяКоманды);

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьФильтрОстаток(УровеньЗапаса = Неопределено)

	Если УровеньЗапаса <> Неопределено Тогда

		Для Каждого Строка Из Объект.Запасы Цикл

			Строка.НеУдовлетворяетОтбору = Обработки.ФормированиеЗаказовПоставщикам.НеУдовлетворяетОтбору(
				Строка, УровеньЗапаса, ОбеспечиватьЗаказы);

		КонецЦикла;

	КонецЕсли;

	СтруктураОтбора = Новый Структура();
	Если УровеньЗапаса <> Неопределено Тогда
		СтруктураОтбора.Вставить("НеУдовлетворяетОтбору", Ложь);
	КонецЕсли;

	Если ТолькоОтмеченныеФильтр Тогда
		СтруктураОтбора.Вставить("Отметка", Истина);
	КонецЕсли;

	Если ЗначениеЗаполнено(СтруктураОтбора) Тогда
		Элементы.Запасы.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбора);
	Иначе
		Элементы.Запасы.ОтборСтрок = Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция УровеньЗапаса()

	Результат = ?(Элементы.МеньшеМинимальногоОстатка.Пометка, "МеньшеМинимальногоОстатка",
				?(Элементы.МеньшеУдвоенногоМинимальногоОстатка.Пометка, "МеньшеУдвоенногоМинимальногоОстатка",
				?(Элементы.БольшеМинимальногоОстатка.Пометка, "БольшеМинимальногоОстатка",
				?(Элементы.БольшеМаксимальногоОстатка.Пометка, "БольшеМаксимальногоОстатка",
					""))));

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ПереключениеСтраниц

&НаКлиенте
Процедура ЗакладкиПриСменеСтраницы(Элемент, ТекущаяСтраница)

	Если СозданыЗаказы Тогда

		СозданыЗаказы = Ложь;
		ВключенаОбработкаОповещенийЗаписиДокументов = Ложь;
		УдалитьДокументы();
		ОчиститьСообщения();
		ПоказатьОповещениеПользователя(НСтр("ru = 'Удаление документов'"), , НСтр("ru = 'Сформированные заказы удалены.'"));

	КонецЕсли;

	Если Элементы.Закладки.ТекущаяСтраница = Элементы.СтраницаЗапасы Тогда
		ПереключитьСтраницы("Запасы", Элементы);
	ИначеЕсли Элементы.Закладки.ТекущаяСтраница = Элементы.СтраницаЗаказы Тогда
		ПереключитьСтраницы("Заказы", Элементы);
	ИначеЕсли Элементы.Закладки.ТекущаяСтраница = Элементы.СтраницаДокументы Тогда
		ПереключитьСтраницы("Документы", Элементы);
	КонецЕсли;

	Если Объект.Заказы.Количество() = 0 И Элементы.Закладки.ТекущаяСтраница = Элементы.СтраницаЗаказы Тогда

		ЗаполнитьТаблицуЗаказы();
		МодифицированаТаблицаЗапасы = Ложь;

	ИначеЕсли МодифицированаТаблицаЗапасы И Элементы.Закладки.ТекущаяСтраница = Элементы.СтраницаЗаказы Тогда

		АдресВХранилищеИзменения = Неопределено;
		Если ЕстьИзмененияЗапасы(АдресВХранилищеИзменения) И ОбеспечиватьЗаказы = ТекстЗаСчетОстатка() Тогда

			ЗаполнитьТаблицуЗаказы();
			МодифицированаТаблицаЗапасы = Ложь;

		КонецЕсли;

	ИначеЕсли Элементы.Закладки.ТекущаяСтраница = Элементы.СтраницаДокументы Тогда

		Если Объект.Заказы.Количество() = 0 Тогда

			ЗаполнитьТаблицуЗаказы();
			МодифицированаТаблицаЗапасы = Ложь;

		КонецЕсли;

		Оповещения = СформироватьЗаказы();
		Для Каждого Оповещение Из Оповещения Цикл
			Оповестить(Оповещение.ИмяСобытия, Оповещение.ПараметрыОповещения, Оповещение.Источник);
		КонецЦикла;
		
		ВключенаОбработкаОповещенийЗаписиДокументов = Истина;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуЗаказы()

	Обработки.ФормированиеЗаказовПоставщикам.ЗаполнитьПоСостояниюЗаказов(Объект, ОбеспечиватьЗаказы = ТекстЗаСчетОстатка());
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПереключитьСтраницы(ИмяШага, Элементы)

	Если ИмяШага = "Запасы" Тогда

		Элементы.Закладки.ТекущаяСтраница      = Элементы.СтраницаЗапасы;
		Элементы.ПодвалШаги.ТекущаяСтраница    = Элементы.СтраницаПодвалПотребности;

		Элементы.СтраницыНазад.ТекущаяСтраница = Элементы.НазадСкрытие;
		Элементы.СтраницыДалее.ТекущаяСтраница = Элементы.ДалееВидимость;
		Элементы.Далее.КнопкаПоУмолчанию = Истина;

	ИначеЕсли ИмяШага = "Заказы" Тогда

		Элементы.Закладки.ТекущаяСтраница      = Элементы.СтраницаЗаказы;
		Элементы.ПодвалШаги.ТекущаяСтраница    = Элементы.СтраницаПодвалПотребности;

		Элементы.СтраницыНазад.ТекущаяСтраница = Элементы.НазадВидимость;
		Элементы.СтраницыДалее.ТекущаяСтраница = Элементы.ДалееВидимость;
		Элементы.Далее.КнопкаПоУмолчанию = Истина;

	ИначеЕсли ИмяШага = "Документы" Тогда

		Элементы.Закладки.ТекущаяСтраница      = Элементы.СтраницаДокументы;
		Элементы.ПодвалШаги.ТекущаяСтраница    = Элементы.СтраницаПодвалСозданныеЗаказы;

		Элементы.СтраницыНазад.ТекущаяСтраница = Элементы.НазадВидимость;
		Элементы.СтраницыДалее.ТекущаяСтраница = Элементы.ПродолжитьДляДругогоСкладаВидимость;
		Элементы.Готово.КнопкаПоУмолчанию = Истина;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЕстьИзмененияЗапасы(АдресВХранилищеИзменения)

	СтрокаКлюча = "Номенклатура,Характеристика,Склад";
	Колонки     = "Номенклатура, Характеристика, Склад, КЗаказу";

	ТаблицаЗапасыКЗаказу = Объект.Запасы.Выгрузить(Новый Структура("Отметка", Истина), Колонки);
	ПараметрыОбъединения = ОбеспечениеКлиентСервер.ПараметрыОбъединенияТаблиц();
	ПараметрыОбъединения.ДобавлятьСтроки = Истина;
	ПараметрыОбъединения.Умолчания = Новый Структура("КЗаказу", 0);

	ТаблицаЗапасыКопия = ЗапасыКопия.Выгрузить();
	ОбеспечениеСервер.ОбновитьКоллекциюДаннымиИзТаблицы(
		ТаблицаЗапасыКопия, ТаблицаЗапасыКЗаказу, СтрокаКлюча, ПараметрыОбъединения);

	ЕстьИзменения = ПараметрыОбъединения.ИзмененныеСтроки.Количество() > 0 Или ПараметрыОбъединения.НовыеСтроки.Количество() > 0;

	Если ЕстьИзменения Тогда

		ЗапасыКопия.Загрузить(ТаблицаЗапасыКЗаказу);

		Для Каждого Строка Из ПараметрыОбъединения.НовыеСтроки Цикл

			НоваяСтрока = ПараметрыОбъединения.ИзмененныеСтроки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);

		КонецЦикла;

		АдресВХранилищеИзменения = ПоместитьВоВременноеХранилище(ПараметрыОбъединения.ИзмененныеСтроки);

	КонецЕсли;

	Возврат ЕстьИзменения;

КонецФункции

&НаСервере
Процедура ОбеспечиватьЗаказыПриИзмененииНаСервере()

	НастроитьЭлементыПриИзмененииРеквизитов("ОбеспечиватьЗаказы");
	ПереключитьСтраницы("Запасы", Элементы);
	ЗаполнитьТаблицы(Ложь);
	МодифицированаТаблицаЗапасы = Ложь;
	
	СохранитьНастройки();

КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Функция ПоставщикПриИзмененииНаКлиенте(СтрокаТаблицы)
	
	ДанныеОТоваре = Новый Структура("Номенклатура, Характеристика");
	ЗаполнитьЗначенияСвойств(ДанныеОТоваре, СтрокаТаблицы);
	УсловияЗакупок = УсловияЗакупок(СтрокаТаблицы.Поставщик, ДанныеОТоваре);
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, УсловияЗакупок, "Соглашение,ВидЦеныПоставщика,Цена");
	ОбновитьИтогиВСтроке(СтрокаТаблицы);
	ОбновитьИтоги(ЭтаФорма);
	
КонецФункции

&НаСервереБезКонтекста
Функция УсловияЗакупок(Поставщик, ДанныеОТоваре)
	
	УсловияЗакупок = ОбеспечениеСервер.УсловияЗакупокПартнера(Поставщик);
	
	ДатаСеанса = ТекущаяДатаСеанса();
	ПараметрыПолученияЦен = ЦеныПартнеровЗаполнениеСервер.НовыйПараметрыПолученияЦенНоменклатурыПартнера();
	ПараметрыПолученияЦен.Дата         = ДатаСеанса;
	ПараметрыПолученияЦен.Валюта       = УсловияЗакупок.Валюта;
	ПараметрыПолученияЦен.НалогообложениеНДС           = Перечисления.ТипыНалогообложенияНДС.ПустаяСсылка();
	ПараметрыПолученияЦен.ВозвращатьМногооборотнуюТару = Ложь;
	
	Таблица = Новый ТаблицаЗначений();
	
	Таблица.Колонки.Добавить("НомерСтроки",       ОбщегоНазначения.ОписаниеТипаЧисло(15, 0));
	Таблица.Колонки.Добавить("Номенклатура",      Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Таблица.Колонки.Добавить("Характеристика",    Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Таблица.Колонки.Добавить("Упаковка",          Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	Таблица.Колонки.Добавить("ВидЦеныПоставщика", Новый ОписаниеТипов("СправочникСсылка.ВидыЦенПоставщиков"));
	
	НоваяСтрока = Таблица.Добавить();
	
	НоваяСтрока.Номенклатура      = ДанныеОТоваре.Номенклатура;
	НоваяСтрока.Характеристика    = ДанныеОТоваре.Характеристика;
	НоваяСтрока.Упаковка          = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
	НоваяСтрока.ВидЦеныПоставщика = УсловияЗакупок.ВидЦеныПоставщика;
	
	РезультатЗапроса = ЦеныПартнеровЗаполнениеСервер.ЦеныНоменклатурыПартнера(Таблица, ПараметрыПолученияЦен);
	УсловияЗакупок.Цена = 0;
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		
		Если ЗначениеЗаполнено(Выборка.Цена) Тогда
			
			ВалютаУпрУчет = Константы.ВалютаУправленческогоУчета.Получить();
			Коэффициент = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(
				УсловияЗакупок.Валюта, ВалютаУпрУчет, ДатаСеанса);
				
			УсловияЗакупок.Цена = Выборка.Цена * Коэффициент;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат УсловияЗакупок;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтогиВСтроке(Строка)

	Строка.ВесИтог   = ?(Строка.Отметка, Строка.КЗаказу * Строка.Вес, 0);
	Строка.ОбъемИтог = ?(Строка.Отметка, Строка.КЗаказу * Строка.Объем, 0);
	Строка.Сумма     = Строка.Цена * Строка.КЗаказу;
	Строка.СуммаИтог = ?(Строка.Отметка, Строка.Сумма, 0);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Форма.ИтогСумма = Форма.Объект.Запасы.Итог("СуммаИтог") + Форма.Объект.Заказы.Итог("СуммаИтог");
	Форма.ИтогВес   = Форма.Объект.Запасы.Итог("ВесИтог") + Форма.Объект.Заказы.Итог("ВесИтог");
	Форма.ИтогОбъем = Форма.Объект.Запасы.Итог("ОбъемИтог") + Форма.Объект.Заказы.Итог("ОбъемИтог");

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	// Выделение нулевых максимальных остатков.
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МаксимальныйОстаток.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Запасы.МаксимальныйОстаток");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);

	// Выделение нулевых цен.
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЦенаЗапасы.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Запасы.Цена");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЦенаЗаказы.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Заказы.Цена");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	
	// Документ имеет высокий приоритет
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Документ имеет высокий приоритет'");

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Заказы.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Заказы.Приоритет");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.Приоритеты.ПолучитьВысшийПриоритет();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ВысокийПриоритетДокумента);

	// Документ имеет низкий приоритет
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Документ имеет низкий приоритет'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Заказы.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Заказы.Приоритет");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.Приоритеты.ПолучитьНизшийПриоритет();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.НизкийПриоритетДокумента);
	
	// Условное оформление динамического списка "Список"
	СписокУсловноеОформление = СписокДокументы.КомпоновщикНастроек.Настройки.УсловноеОформление;
	СписокУсловноеОформление.Элементы.Очистить();
	
	// Документ имеет высокий приоритет
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Документ имеет высокий приоритет'");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Приоритет");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.Приоритеты.ПолучитьВысшийПриоритет();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Состояние");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СостоянияЗаказовПоставщикам.Закрыт;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ВысокийПриоритетДокумента);
	
	// Документ имеет низкий приоритет
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Документ имеет низкий приоритет'");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Приоритет");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.Приоритеты.ПолучитьНизшийПриоритет();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Состояние");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СостоянияЗаказовПоставщикам.Закрыт;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.НизкийПриоритетДокумента);
	
	// Выделение цветом состояния "Закрыт"
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Выделение цветом состояния ""Закрыт""'");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Состояние");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СостоянияЗаказовПоставщикам.Закрыт;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗакрытыйДокумент);
	
	// Выделение цветом просроченного заказа
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Выделение цветом просроченного заказа'");
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("Состояние");
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("ДатаСобытия");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Просрочен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныйДокумент);

КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыПриИзмененииРеквизитов(ИмяРеквизита = Неопределено)

	Если ИмяРеквизита = "ОбеспечиватьЗаказы" Или ИмяРеквизита = Неопределено Тогда

		ЗаСчетЗапасов = ОбеспечиватьЗаказы = ТекстЗаСчетОстатка();

		ЭлементыЗаСчетЗапасов = Новый Массив();
		ЭлементыЗаСчетЗапасов.Добавить(Элементы.Остаток);
		ЭлементыЗаСчетЗапасов.Добавить(Элементы.ЗаказыКПоступлению);
		ЭлементыЗаСчетЗапасов.Добавить(Элементы.ТочкаЗаказаДостигнута);

		ЭлементыНеЗаСчетЗапасов = Новый Массив();
		ЭлементыНеЗаСчетЗапасов.Добавить(Элементы.СвободныйОстаток);
		ЭлементыНеЗаСчетЗапасов.Добавить(Элементы.ЗаказыКПоступлениюСвободные);
		ЭлементыНеЗаСчетЗапасов.Добавить(Элементы.ТочкаЗаказаДостигнутаСвободныйОстаток);

		Для Каждого Элемент Из ЭлементыЗаСчетЗапасов Цикл
			Элемент.Видимость = ЗаСчетЗапасов;
		КонецЦикла;

		Для Каждого Элемент Из ЭлементыНеЗаСчетЗапасов Цикл
			Элемент.Видимость = Не ЗаСчетЗапасов;
		КонецЦикла;

	КонецЕсли;

	Если ИмяРеквизита = "Склад" Или ИмяРеквизита = Неопределено Тогда

		ИзменяемыеЭлементы = Новый Массив();
		ИзменяемыеЭлементы.Добавить(Элементы.ПодобратьТовары);
		ИзменяемыеЭлементы.Добавить(Элементы.ЗагрузитьИзФайла);
		ИзменяемыеЭлементы.Добавить(Элементы.ПоОтбору);
		ИзменяемыеЭлементы.Добавить(Элементы.МеньшеМинимальногоОстатка);
		ИзменяемыеЭлементы.Добавить(Элементы.МеньшеУдвоенногоМинимальногоОстатка);
		ИзменяемыеЭлементы.Добавить(Элементы.БольшеМинимальногоОстатка);
		ИзменяемыеЭлементы.Добавить(Элементы.БольшеМаксимальногоОстатка);
		ИзменяемыеЭлементы.Добавить(Элементы.ЗаполнитьПоставщикаЗапасы);
		ИзменяемыеЭлементы.Добавить(Элементы.ЗаполнитьМинимальныйОстаток);
		ИзменяемыеЭлементы.Добавить(Элементы.ЗаполнитьМаксимальныйОстаток);
		ИзменяемыеЭлементы.Добавить(Элементы.НеПоддерживатьОстаток);
		ИзменяемыеЭлементы.Добавить(Элементы.ОтметитьЗапасы);
		ИзменяемыеЭлементы.Добавить(Элементы.СнятьОтметкуЗапасы);
		ИзменяемыеЭлементы.Добавить(Элементы.ТолькоОтмеченныеЗапасы);
		ИзменяемыеЭлементы.Добавить(Элементы.ЗаполнитьПоставщикаЗапасыКонтекст);
		ИзменяемыеЭлементы.Добавить(Элементы.ЗаполнитьМинимальныйОстатокКонтекст);
		ИзменяемыеЭлементы.Добавить(Элементы.ЗаполнитьМаксимальныйОстатокКонтекст);
		ИзменяемыеЭлементы.Добавить(Элементы.НеПоддерживатьОстатокКонтекст);

		ИзменяемыеЭлементы.Добавить(Элементы.ОтметитьЗаказы);
		ИзменяемыеЭлементы.Добавить(Элементы.СнятьОтметкуЗаказы);
		ИзменяемыеЭлементы.Добавить(Элементы.ТолькоОтмеченныеЗаказы);
		ИзменяемыеЭлементы.Добавить(Элементы.ЗаполнитьПоставщикаЗаказы);
		ИзменяемыеЭлементы.Добавить(Элементы.ЗаполнитьПоставщикаЗаказыКонтекст);

		СкладЗаполнен = ЗначениеЗаполнено(Объект.Склад);

		Для Каждого Элемент Из ИзменяемыеЭлементы Цикл
			Элемент.Доступность = СкладЗаполнен;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УдалитьДокументы()

	МассивСсылокНаУдаление = СформированныеЗаказы.ВыгрузитьЗначения();
	СписокОшибок = ОбщегоНазначенияУТ.УстановитьПометкуУдаленияДокументов(МассивСсылокНаУдаление);
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(СписокОшибок);
	
	СформированныеЗаказы.Очистить();

КонецПроцедуры

// Возвращаемое значение:
//  Массив из Структура:
//   * ИмяСобытия - Строка - Имя события.
//   * ПараметрыОповещения - Структура - Структура параметров оповещения.
//   * Источник - ДокументСсылка - Ссылка на документ. 
&НаСервере
Функция СформироватьЗаказы()
	
	УдалитьДокументы();
	
	Результат = Обработки.ФормированиеЗаказовПоставщикам.СоздатьЗаказы(Объект);
	
	Оповещения = Новый Массив();
	Для Каждого Документ Из Результат.Документы Цикл
		
		СформированныеЗаказы.Добавить(Документ.Ссылка);
		
		РежимЗаписи = ?(Документ.Проведен = 0, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("РежимЗаписи", РежимЗаписи);
		ПараметрыОповещения.Вставить("ЕстьРаспоряжение", Истина);
		
		Оповещения.Добавить(Новый Структура("ИмяСобытия, ПараметрыОповещения, Источник",
			"Запись_ЗаказПоставщику", ПараметрыОповещения, Документ.Ссылка));
		
	КонецЦикла;
	
	Для Каждого Сообщение Из Результат.Сообщения Цикл
		Сообщение.Сообщить();
	КонецЦикла;
	
	СозданыЗаказы = СформированныеЗаказы.Количество() > 0;
	
	СписокДокументы.Параметры.УстановитьЗначениеПараметра("СозданныеДокументы", СформированныеЗаказы.ВыгрузитьЗначения());

	Возврат Оповещения;

КонецФункции

&НаКлиенте
Процедура ПодобратьТоварыНаКлиенте()

	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Подбор товаров'"));
	ПараметрыФормы.Вставить("ЗаголовокКнопкиПеренести", НСтр("ru = 'Перенести в список товаров'"));
	ПараметрыФормы.Вставить("РежимПодбораБезКоличественныхПараметров", Истина);
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров",       Истина);
	ПараметрыФормы.Вставить("Склад",                                   Объект.Склад);
	ПараметрыФормы.Вставить("Документ",                                НСтр("ru = 'Формирование заказов поставщикам'"));
	ПараметрыФормы.Вставить("ПроверятьЗаполнение",                     Истина);

	СписокТиповНоменклатуры = Новый СписокЗначений();
	СписокТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
	СписокТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"));

	ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", СписокТиповНоменклатуры);

	ПараметрыФормы.Вставить("Отбор", Новый Структура("ТипНоменклатуры", СписокТиповНоменклатуры));

	Открытьформу("Обработка.ПодборТоваровВДокументЗакупки.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормыКлиентскаяЧасть

&НаКлиенте
Процедура УстановитьСтатусНеСогласованЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Элементы.СписокДокументы.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусПодтвержденЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Элементы.СписокДокументы.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусСогласованЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Элементы.СписокДокументы.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатус(Знач Оповещение, Статус, ТекстСтатуса)

	ВыделенныеСтроки = ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.СписокДокументы);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		ВыполнитьОбработкуОповещения(Оповещение);
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='У выделенных в списке заказов будет установлен статус ""%1"". Продолжить?'"), ТекстСтатуса);

	Ответ = Неопределено;

	ДополнительныеПараметрыУстановкиСтатуса = Новый Структура("ВыделенныеСтроки, Оповещение, Статус, ТекстСтатуса");
	ДополнительныеПараметрыУстановкиСтатуса.ВыделенныеСтроки = ВыделенныеСтроки;
	ДополнительныеПараметрыУстановкиСтатуса.Оповещение       = Оповещение;
	ДополнительныеПараметрыУстановкиСтатуса.Статус           = Статус;
	ДополнительныеПараметрыУстановкиСтатуса.ТекстСтатуса     = ТекстСтатуса;
	
	ОписаниеОповещенияУстановкиСтатуса = Новый ОписаниеОповещения("УстановитьСтатусЗавершение", ЭтотОбъект, ДополнительныеПараметрыУстановкиСтатуса);
	ПоказатьВопрос(ОписаниеОповещенияУстановкиСтатуса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
    Оповещение = ДополнительныеПараметры.Оповещение;
    Статус = ДополнительныеПараметры.Статус;
    ТекстСтатуса = ДополнительныеПараметры.ТекстСтатуса;
    
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        ВыполнитьОбработкуОповещения(Оповещение);
        Возврат;
    КонецЕсли;
    
    ОчиститьСообщения();
    КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(ВыделенныеСтроки, Статус);
    ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(Элементы.СписокДокументы, КоличествоОбработанных,
    ВыделенныеСтроки.Количество(), ТекстСтатуса);
    
    ВыполнитьОбработкуОповещения(Оповещение);

КонецПроцедуры

#КонецОбласти

#КонецОбласти