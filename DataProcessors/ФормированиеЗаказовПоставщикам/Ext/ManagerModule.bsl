#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Заполняет коллекцию данными о состоянии запасов
//
// Параметры:
//  Объект - ОбработкаОбъект.ФормированиеЗаказовПоставщикам - обработка,
//           в которую необходимо поместить данные о состоянии запасов.
//  Параметры - Структура - Структура содержащая параметры расчета:
//   ЗаСчетЗапасов - Булево - Признак необходимости использования в расчете всего остатка товара взамен свободного остатка.
//
Процедура ЗаполнитьПоСостояниюЗапасов(Объект, Параметры) Экспорт

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Склад", Объект.Склад);
	УстановитьПараметрыРасчетаСтатистики(Запрос, Объект.ПериодПродаж);

	ПолучитьДанныеОЗапасах(Объект.Запасы, ВременнаяТаблицаТовары("Склад"), Запрос, Параметры);

КонецПроцедуры

// Заполняет коллекцию данными о продажах
//
// Параметры:
//  Объект - ОбработкаОбъект.ФормированиеЗаказовПоставщикам - обработка,
//           в которую необходимо поместить данные о продажах,
//  Параметры - Структура - Структура содержащая параметры расчета:
//   ЗаСчетЗапасов - Булево - Признак необходимости использования в расчете всего остатка товара взамен свободного остатка.
//
Процедура ОбновитьДанныеОПродажах(Объект, Параметры) Экспорт

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТаблицаЗначений", Объект.Запасы.Выгрузить(, "Номенклатура, Характеристика, Склад"));
	УстановитьПараметрыРасчетаСтатистики(Запрос, Объект.ПериодПродаж);

	ПолучитьДанныеОЗапасах(Объект.Запасы, ВременнаяТаблицаТовары("ТаблицаЗначений"), Запрос, Параметры);

КонецПроцедуры

// Добавляет товары для поддержания запасов
//
// Параметры:
//  Объект - ОбработкаОбъект.ФормированиеЗаказовПоставщикам - обработка,
//           в которую необходимо добавить товары,
//  Таблица - ТаблицаЗначений - Таблица, содержащая товары для добавления,
//  Параметры - Структура - Структура с полями:
//   * МодифицированаТаблицаЗапасы - Булево - Признак что таблица запасы будет модифицирована.
//  УровеньЗапаса - Строка - Условное обозначение элемента отбора по уровню запаса.
//  ОбеспечиватьЗаказы - Строка - определяет способ учета остатков.
Процедура ДобавитьТоварыВТаблицуЗапасы(Объект, Таблица, Параметры, УровеньЗапаса, ОбеспечиватьЗаказы) Экспорт

	ЕстьКолонкаЗапас = Таблица.Колонки.Найти("МаксимальныйОстаток") <> Неопределено;
	Если ЕстьКолонкаЗапас Тогда // добавляемая таблица содержит значения параметров поддержания запаса

		ЗаписатьПараметрыПоддержанияЗапаса(Таблица);

	КонецЕсли;

	ПоляКлюча = "Номенклатура,Характеристика,Склад";
	Таблица.Сортировать(ПоляКлюча, Новый СравнениеЗначений);

	ТаблицаЗапасы = Объект.Запасы.Выгрузить();
	ТаблицаЗапасы.Колонки.Добавить("ИсходныйИндекс", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(10, 0));

	ВсегоСтрок = ТаблицаЗапасы.Количество();
	Для Индекс = 0 По ВсегоСтрок - 1 Цикл
		ТаблицаЗапасы[Индекс].ИсходныйИндекс = Индекс;
	КонецЦикла;

	ТаблицаЗапасы.Сортировать(ПоляКлюча, Новый СравнениеЗначений);

	ПараметрыОбъединения = ОбеспечениеКлиентСервер.ПараметрыОбъединенияТаблиц();
	ПараметрыОбъединения.ДобавлятьСтроки = Истина;
	ОбеспечениеСервер.ОбновитьКоллекциюДаннымиИзТаблицы(ТаблицаЗапасы, Таблица, ПоляКлюча, ПараметрыОбъединения);

	Для Каждого Строка Из ПараметрыОбъединения.ИзмененныеСтроки Цикл

		Если ЕстьКолонкаЗапас Тогда
			ЗаполнитьЗначенияСвойств(Объект.Запасы[Строка.ИсходныйИндекс], Строка, "МинимальныйОстаток, МаксимальныйОстаток");
		КонецЕсли;

	КонецЦикла;

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТаблицаЗначений", ПараметрыОбъединения.НовыеСтроки);
	УстановитьПараметрыРасчетаСтатистики(Запрос, Объект.ПериодПродаж);

	ПолучитьДанныеОЗапасах(ПараметрыОбъединения.НовыеСтроки, ВременнаяТаблицаТовары("ТаблицаЗначений"), Запрос, Параметры);

	Для каждого Строка Из ПараметрыОбъединения.НовыеСтроки Цикл

		НоваяСтрока = Объект.Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);

		Строка.НеУдовлетворяетОтбору = НеУдовлетворяетОтбору(Строка, УровеньЗапаса, ОбеспечиватьЗаказы);

		ОбновитьИтогиВСтроке(НоваяСтрока);

	КонецЦикла;

	Если ПараметрыОбъединения.ИзмененныеСтроки.Количество() > 0 И ЕстьКолонкаЗапас
		Или ПараметрыОбъединения.НовыеСтроки.Количество() > 0 Тогда

			Параметры.МодифицированаТаблицаЗапасы = Истина;

	КонецЕсли;

КонецПроцедуры

// Обновляет данные в регистре "Товарные ограничения" по данным таблицы.
//
// Параметры:
//  Таблица - ТаблицаЗначений - Содержит новые параметры поддержания запасов товаров, таблица с полями:
//   Номенклатура   - СправочникСсылка.Номенклатура - Поле ключа товара,
//   Характеристика - СправочникСсылка.Номенклатура - Поле ключа товара,
//   Склад          - СправочникСсылка.Номенклатура - Поле ключа товара,
//   МинимальныйОстаток  - Число - Значение минимального запаса,
//   МаксимальныйОстаток - Число - Значение максимального запаса.
//
Процедура ЗаписатьПараметрыПоддержанияЗапаса(Таблица) Экспорт

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТаблицаЗначений", Таблица);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.Номенклатура      КАК Номенклатура,
	|	Т.Характеристика    КАК Характеристика,
	|	Т.Склад             КАК Склад,
	|
	|	Т.МинимальныйОстаток  КАК МинимальныйОстаток,
	|	Т.МаксимальныйОстаток КАК МаксимальныйОстаток
	|
	|ПОМЕСТИТЬ ВтНовыеПараметры
	|ИЗ
	|	&ТаблицаЗначений КАК Т
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура, Характеристика
	|;
	|
	|/////////////////////////////////
	|ВЫБРАТЬ
	|	НовыеПараметры.Номенклатура      КАК Номенклатура,
	|	НовыеПараметры.Характеристика    КАК Характеристика,
	|	НовыеПараметры.Склад             КАК Склад,
	|
	|	НовыеПараметры.МинимальныйОстаток  КАК МинимальноеКоличествоЗапаса,
	|	НовыеПараметры.МаксимальныйОстаток КАК МаксимальноеКоличествоЗапаса
	|
	|ИЗ
	|	ВтНовыеПараметры КАК НовыеПараметры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК ТоварныеОграничения
	|		ПО &ПодстановкаТоварногоОграничения
	|ГДЕ
	|	ТоварныеОграничения.Номенклатура ЕСТЬ NULL
	|	ИЛИ ТоварныеОграничения.МетодОбеспеченияПотребностей <> ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаМинМакс)
	|	ИЛИ НовыеПараметры.МинимальныйОстаток <> ТоварныеОграничения.МинимальноеКоличествоЗапаса
	|	ИЛИ НовыеПараметры.МаксимальныйОстаток <> ТоварныеОграничения.МаксимальноеКоличествоЗапаса
	|	ИЛИ НовыеПараметры.МаксимальныйОстаток = 0 И НЕ ТоварныеОграничения.Номенклатура ЕСТЬ NULL";

	Поля = "НовыеПараметры.Номенклатура,НовыеПараметры.Характеристика,НовыеПараметры.Склад";
	Запрос.Текст = РегистрыСведений.ТоварныеОграничения.ПодставитьСоединение(Запрос.Текст, "ПодстановкаТоварногоОграничения", Поля);
	
	НачатьТранзакцию();
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		ТаблицаНовыеПараметры = Запрос.Выполнить().Выгрузить();
		
		УдаляемыеКлючи = Новый Массив;
		Для Каждого Строка Из ТаблицаНовыеПараметры Цикл
			Если ЗначениеЗаполнено(Строка.Характеристика) Тогда
				КлючЗаписи = РегистрыСведений.ТоварныеОграничения.КлючЗаписиХарактеристики();
				КлючЗаписи.Характеристика = Строка.Характеристика;
			Иначе
				КлючЗаписи = РегистрыСведений.ТоварныеОграничения.КлючЗаписиНоменклатуры();
			КонецЕсли;
			КлючЗаписи.Номенклатура	= Строка.Номенклатура;
			КлючЗаписи.Склад		= Строка.Склад;
			
			Если Строка.МаксимальноеКоличествоЗапаса > 0 Тогда
				Параметры = РегистрыСведений.ТоварныеОграничения.ПараметрыМинМакс();
				Параметры.Вставить("МинимальноеКоличествоЗапаса",	Строка.МинимальноеКоличествоЗапаса);
				Параметры.Вставить("МаксимальноеКоличествоЗапаса",	Строка.МаксимальноеКоличествоЗапаса);
				РегистрыСведений.ТоварныеОграничения.ДобавитьПоддержаниеЗапасаМинМакс(КлючЗаписи, Параметры);
			Иначе
				УдаляемыеКлючи.Добавить(КлючЗаписи);
			КонецЕсли;
		КонецЦикла;
		
		Если УдаляемыеКлючи.Количество() > 0 Тогда
			РегистрыСведений.ТоварныеОграничения.УдалитьПоддержаниеЗапаса(УдаляемыеКлючи);
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Ложь);
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Запись параметров поддержания запаса'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

// Рассчитывает количество к заказу для поддержания запаса
//
// Параметры:
//  Состояние - ДанныеФормыЭлементКоллекции, Структура - содержит необходимые для расчета данные о состоянии запасов.
//  ЗаСчетЗапасов - Булево - Признак, определяющий использовать в расчете данные о свободных остатках склада и
//                           заказов к поступлению, либо всех остатков и заказов к поступлению.
//
// Возвращаемое значение:
//  Структура - Структура с полями:
//   ТочкаЗаказаДостигнута - Булево - Признак, истина если остаток меньше либо равен минимальному запасу,
//   КЗаказу - Число - Рассчитанное количество к заказу до максимума,
//   Отметка - Булево - Признак рекомендации к заказу данной товарной позиции.
//
Функция КЗаказуДляПоддержанияЗапаса(Состояние, ЗаСчетЗапасов) Экспорт

	Остаток = ?(ЗаСчетЗапасов, Состояние.Остаток, Состояние.СвободныйОстаток);
	ЗаказыКПоступлению = ?(ЗаСчетЗапасов, Состояние.ЗаказыКПоступлению, Состояние.ЗаказыКПоступлениюСвободные);
	ТочкаЗаказаДостигнута = Остаток - Состояние.МинимальныйОстаток <= 0;
	Если Не ТочкаЗаказаДостигнута Тогда
		КЗаказу = Макс(0, Состояние.МаксимальныйОстаток - (Остаток - Состояние.МинимальныйОстаток) - ЗаказыКПоступлению);
	Иначе
		КЗаказу = Состояние.МаксимальныйОстаток - ЗаказыКПоступлению;
	КонецЕсли;

	Если Состояние.ЕдиницаИзмеренияШтучная Тогда
		КЗаказу = Цел(КЗаказу) + ?(Цел(КЗаказу) < КЗаказу, 1, 0);
	КонецЕсли;

	Возврат Новый Структура("ТочкаЗаказаДостигнута, КЗаказу, Отметка",
		ТочкаЗаказаДостигнута, КЗаказу, ТочкаЗаказаДостигнута И КЗаказу > 0);

КонецФункции

// Рассчитывает значения служебных реквизитов для отображения итогов в форме
//
// Параметры:
//  Строка - ДанныеФормыЭлементКоллекции, Структура - содержит необходимые для расчета данные строки.
//
// Возвращаемое значение:
//  Структура - Структура с полями: ВесИтог, Сумма, СуммаИтог.
//
Функция СлужебныеРеквизиты(Строка) Экспорт

	Результат = Новый Структура();
	Результат.Вставить("ВесИтог",   ?(Строка.Отметка, Строка.Вес  * Строка.КЗаказу, 0));
	Результат.Вставить("ОбъемИтог", ?(Строка.Отметка, Строка.КЗаказу * Строка.Объем, 0));
	Результат.Вставить("Сумма",     Строка.Цена * Строка.КЗаказу);
	Результат.Вставить("СуммаИтог", ?(Строка.Отметка, Результат.Сумма, 0));

	Возврат Результат;

КонецФункции

// По данным строки таблицы "Запасы" рассчитывает, удовлетворяет ли строка отбору остатка.
//
// Параметры:
// Строка - ДанныеФормыЭлементКоллекции - Строка для которой необходимо определить признак удовлетворения отбору.
// УровеньЗапаса - Строка - Условное обозначение элемента отбора по уровню запаса.
// ОбеспечиватьЗаказы - Строка - определяет способ учета остатков.
//
// Возвращаемое значение:
// Булево - Признак, ложь, если строка удовлетворят отбору, истина, если не удовлетворяет.
//
Функция НеУдовлетворяетОтбору(Строка, УровеньЗапаса, ОбеспечиватьЗаказы) Экспорт

	Остаток = ?(ОбеспечиватьЗаказы = ТекстЗаСчетОстатка(), Строка.Остаток, Строка.СвободныйОстаток);
	ЗаказыКПоступлению = ?(ОбеспечиватьЗаказы = ТекстЗаСчетОстатка(),
	Строка.ЗаказыКПоступлению, Строка.ЗаказыКПоступлениюСвободные);

	Результат = Не
				?(УровеньЗапаса = "МеньшеМинимальногоОстатка",           Строка.МинимальныйОстаток     >= Остаток,
				?(УровеньЗапаса = "МеньшеУдвоенногоМинимальногоОстатка", Строка.МинимальныйОстаток * 2 >= Остаток,
				?(УровеньЗапаса = "БольшеМинимальногоОстатка",           Строка.МинимальныйОстаток     < Остаток,
				?(УровеньЗапаса = "БольшеМаксимальногоОстатка",          Строка.МаксимальныйОстаток    < Остаток + ЗаказыКПоступлению,
					Истина))));

	Возврат Результат;

КонецФункции

// Заполняет коллекцию данными о состоянии заказов
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - данные формы объекта обработки "Формирование заказов поставщикам" - обработка,
//           в которую необходимо поместить данные о состоянии обеспечения заказов,
//  ЗаСчетОстатка - Булево - признак использования свободных остатков, для обеспечения заказов.
//
Процедура ЗаполнитьПоСостояниюЗаказов(Объект, ЗаСчетОстатка) Экспорт
	
	ТекстыЗапросов = Новый Массив;
	
	ТекстыЗапросов.Добавить(ВременнаяТаблицаЗаказы());
	ТекстыЗапросов.Добавить(ТекстЗапросаУсловийЗакупок("ВтЗаказы"));
	ТекстыЗапросов.Добавить(ВременнаяТаблицаЗапасыКЗаказу());
	
	ТекстыЗапросов.Добавить(ТекстЗапросаЗаказов());
	ТекстыЗапросов.Добавить(ТекстЗапросаОстатковИзЗаказов());
	
	Запрос = Новый Запрос(СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов()));
	Запрос.УстановитьПараметр("Склад", Объект.Склад);
	Запрос.УстановитьПараметр("НачалоПериода", ТекущаяДатаСеанса()); //для получения цен.
	Запрос.УстановитьПараметр("КонецТекущегоДня", КонецДня(ТекущаяДатаСеанса()));
	Колонки = "Номенклатура, Характеристика, Склад, КЗаказу";
	Если ЗаСчетОстатка Тогда
		Строки = Новый Структура("Отметка", Истина);
	Иначе
		Строки = Новый Массив;
	КонецЕсли;
	Запрос.УстановитьПараметр("ТаблицаЗапасыКЗаказу", Объект.Запасы.Выгрузить(Строки, Колонки));
	Запрос.УстановитьПараметр("ЗаСчетОстатка", ЗаСчетОстатка);

	УстановитьПривилегированныйРежим(Истина);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ТаблицаЗаказов          = РезультатыЗапроса[РезультатыЗапроса.Количество() - 2].Выгрузить();
	ТаблицаОстаткиИзЗаказов = РезультатыЗапроса[РезультатыЗапроса.Количество() - 1].Выгрузить();

	Объект.Заказы.Очистить();
	Объект.Заказы.Загрузить(ТаблицаЗаказов);
	ПоляКлюча = "Номенклатура,Характеристика,Склад,Назначение,ПодразделениеПолучатель";
	РаспределитьКоличество(Объект.Заказы, ТаблицаОстаткиИзЗаказов, ПоляКлюча, "Обеспечено", "Требуется");

	ВысшийПриоритет = Справочники.Приоритеты.ПолучитьНизшийПриоритет();
	НизшийПриоритет = Справочники.Приоритеты.ПолучитьВысшийПриоритет();
	
	Для каждого Строка Из Объект.Заказы Цикл

		РезультатРасчета = КЗаказуДляОбеспеченияЗаказов(Строка);
		ЗаполнитьЗначенияСвойств(Строка, РезультатРасчета);

		РезультатРасчета = СлужебныеРеквизиты(Строка);
		ЗаполнитьЗначенияСвойств(Строка, РезультатРасчета);
		
		Строка.КартинкаПриоритета = ?(Строка.Приоритет = ВысшийПриоритет, 0, ?(Строка.Приоритет = НизшийПриоритет, 2, 1));
		
	КонецЦикла;

КонецПроцедуры

// Создает документы, исходя из заполнения табличных частей обработки "Формирование заказов поставщикам".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - данные формы объекта обработки "Формирование заказов поставщикам".
//
// Возвращаемое значение:
//  Структура - Структура с полями:
//   Документы - Массив - массив элементов типа ДокументОбъект.Заказпоставщику, содержит созданные документы.
//   Сообщения - Массив - массив сообщений об ошибках, возникших при создании и проведении документов.
//
Функция СоздатьЗаказы(Объект) Экспорт

	ДокументыОбъекты = Новый Массив();
	Сообщения        = Новый Массив();

	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("Номенклатура",             Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Таблица.Колонки.Добавить("Характеристика",           Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Таблица.Колонки.Добавить("Склад",                    Новый ОписаниеТипов("СправочникСсылка.Склады"));
	Таблица.Колонки.Добавить("ПодразделениеПолучатель",  Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	Таблица.Колонки.Добавить("Назначение",               Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	Таблица.Колонки.Добавить("Поставщик",                Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	Таблица.Колонки.Добавить("Соглашение",               Новый ОписаниеТипов("СправочникСсылка.СоглашенияСПоставщиками"));
	Таблица.Колонки.Добавить("ВидЦеныПоставщика",        Новый ОписаниеТипов("СправочникСсылка.ВидыЦенПоставщиков"));
	Таблица.Колонки.Добавить("КЗаказу",                  ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 3));
	
	Для Каждого Строка Из Объект.Запасы Цикл

		Если Строка.Отметка И Строка.КЗаказу > 0 Тогда

			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);

		КонецЕсли;

	КонецЦикла;

	Для Каждого Строка Из Объект.Заказы Цикл

		Если Строка.Отметка И Строка.КЗаказу > 0 Тогда

			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);

		КонецЕсли;

	КонецЦикла;

	Таблица.Свернуть("Номенклатура,Характеристика,Склад,ПодразделениеПолучатель,Назначение,Поставщик,Соглашение,ВидЦеныПоставщика", "КЗаказу");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТаблицаЗначений", Таблица);
	Запрос.УстановитьПараметр("НачалоДня", НачалоДня(ТекущаяДатаСеанса()));

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Т.Номенклатура                               КАК Номенклатура,
		|	Т.Характеристика                             КАК Характеристика,
		|	Т.Склад                                      КАК Склад,
		|	Т.ПодразделениеПолучатель                    КАК ПодразделениеПолучатель,
		|	Т.Назначение                                 КАК Назначение,
		|
		|	Т.Поставщик                                  КАК Партнер,
		|	Т.Соглашение                                 КАК Соглашение,
		|	Т.ВидЦеныПоставщика                          КАК ВидЦеныПоставщика,
		|
		|	Т.КЗаказу                                    КАК Количество
		|
		|ПОМЕСТИТЬ ВтДанныеЗаполнения
		|ИЗ
		|	&ТаблицаЗначений КАК Т
		|;
		|
		|////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР КОГДА ДанныеЗаполнения.Склад.Календарь <> ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка) ТОГДА
		|				ДанныеЗаполнения.Склад.Календарь
		|			ИНАЧЕ
		|				ОсновнойКалендарь.Значение
		|		КОНЕЦ                  КАК Календарь,
		|	&НачалоДня                 КАК ДатаОтсчета,
		|	ЕСТЬNULL(ВсеСоглашения.СрокПоставки, 0) КАК ЧислоДней
		|ПОМЕСТИТЬ ВтПараметрыПоиска
		|ИЗ
		|	ВтДанныеЗаполнения КАК ДанныеЗаполнения
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСПоставщиками КАК ВсеСоглашения
		|		ПО ВсеСоглашения.Ссылка = ДанныеЗаполнения.Соглашение
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ОсновнойКалендарьПредприятия КАК ОсновнойКалендарь
		|		ПО ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////
		|";
	
	ТекстЗапроса = ТекстЗапроса + ОбеспечениеСервер.ТекстЗапросаДатГрафика();
	
	ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ДанныеЗаполнения.Партнер КАК Партнер,
		|	ДанныеЗаполнения.Соглашение КАК Соглашение,
		|	ДанныеЗаполнения.Склад КАК Склад,
		|	ДанныеЗаполнения.Номенклатура КАК Номенклатура,
		|	МАКСИМУМ(ДанныеЗаполнения.Номенклатура.СтавкаНДС) КАК СтавкаНДС,
		|	ДанныеЗаполнения.Характеристика КАК Характеристика,
		|	ДанныеЗаполнения.Назначение КАК Назначение,
		|	МАКСИМУМ(ЕСТЬNULL(ДанныеЗаполнения.Назначение.НаправлениеДеятельности, ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка))) КАК НаправлениеДеятельности,
		|	ДанныеЗаполнения.ПодразделениеПолучатель КАК ПодразделениеПолучатель,
		|	ДанныеЗаполнения.ВидЦеныПоставщика КАК ВидЦеныПоставщика,
		|	ЕСТЬNULL(ДатыГрафика.Дата, ДОБАВИТЬКДАТЕ(&НачалоДня, ДЕНЬ, ЕСТЬNULL(ДанныеЗаполнения.Соглашение.СрокПоставки, 0))) КАК ДатаПоступления,
		|	МАКСИМУМ(ДанныеЗаполнения.Количество) КАК КоличествоУпаковок,
		|	МАКСИМУМ(ДанныеЗаполнения.Количество) КАК Количество
		|ИЗ
		|	ВтДанныеЗаполнения КАК ДанныеЗаполнения
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСПоставщиками КАК ВсеСоглашения
		|		ПО ВсеСоглашения.Ссылка = ДанныеЗаполнения.Соглашение
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ОсновнойКалендарьПредприятия КАК ОсновнойКалендарь
		|		ПО ИСТИНА
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Календари КАК СпрКалендарьСклада
		|		ПО ВЫБОР КОГДА ДанныеЗаполнения.Склад.Календарь <> ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка) ТОГДА
		|					ДанныеЗаполнения.Склад.Календарь
		|				ИНАЧЕ
		|					ОсновнойКалендарь.Значение
		|			КОНЕЦ = СпрКалендарьСклада.Ссылка
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДатыГрафика КАК ДатыГрафика
		|		ПО СпрКалендарьСклада.Ссылка = ДатыГрафика.Календарь
		|		 И ЕСТЬNULL(ВсеСоглашения.СрокПоставки, 0) = ДатыГрафика.ЧислоДней
		|		 И &НачалоДня = ДатыГрафика.ДатаОтсчета
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеЗаполнения.Соглашение,
		|	ДанныеЗаполнения.Партнер,
		|	ДанныеЗаполнения.Склад,
		|	ДанныеЗаполнения.Назначение,
		|	ЕСТЬNULL(ДатыГрафика.Дата, ДОБАВИТЬКДАТЕ(&НачалоДня, ДЕНЬ, ЕСТЬNULL(ДанныеЗаполнения.Соглашение.СрокПоставки, 0))),
		|	ДанныеЗаполнения.Номенклатура,
		|	ДанныеЗаполнения.Характеристика,
		|	ДанныеЗаполнения.ПодразделениеПолучатель,
		|	ДанныеЗаполнения.ВидЦеныПоставщика
		|УПОРЯДОЧИТЬ ПО
		|	Соглашение, Партнер, Склад, НаправлениеДеятельности,                               // порядок обхода заказов
		|	Назначение, ДатаПоступления, Номенклатура, Характеристика, ПодразделениеПолучатель // порядок строк В заказе";
	
	Запрос.Текст = ТекстЗапроса;
	ТаблицаЗаказыПоставщику = Запрос.Выполнить().Выгрузить();
	ПоляКлючаЗаказа = "Соглашение, Партнер, НаправлениеДеятельности";
	ПоляКлючаУдаляемые = "Соглашение, Партнер, НаправлениеДеятельности";
	МассивТаблиц = ОбеспечениеСервер.РазбитьТаблицуПоЗначениюКлюча(ТаблицаЗаказыПоставщику, ПоляКлючаЗаказа);

	Для Каждого Элемент Из МассивТаблиц Цикл

		ПоляКлючаЗаказа = "Склад";
		ДанныеЗаполнения = Элемент.Ключ;
		ТаблицыПоСкладам = ОбеспечениеСервер.РазбитьТаблицуПоЗначениюКлюча(Элемент.Таблица, ПоляКлючаЗаказа, "");

		ТекстКомментарий = НСтр("ru = 'Сформирован автоматически обработкой ""Формирование заказов поставщикам"".'");
		ДанныеЗаполнения.Вставить("Комментарий", ТекстКомментарий);

		Если ТаблицыПоСкладам.Количество() = 2 //Если заказ с товарами один, то добавляем работы в него.
			И Не ЗначениеЗаполнено(ТаблицыПоСкладам[0].Таблица[0].Склад) Тогда

			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицыПоСкладам[0].Таблица, ТаблицыПоСкладам[1].Таблица);
			ТаблицыПоСкладам.Удалить(0);

		КонецЕсли;

		Для Каждого Элемент1 Из ТаблицыПоСкладам Цикл

			ДанныеЗаполнения.Вставить("Склад", Элемент1.Ключ.Склад);
			КолонкаТЗ = Элемент1.Таблица.Колонки.ПодразделениеПолучатель; // КолонкаТаблицыЗначений - 
			КолонкаТЗ.Имя = "Подразделение";
			ДанныеЗаполнения.Вставить("Товары", Элемент1.Таблица);
			Документ = Обработки.ОбеспечениеПотребностей.ЗаполнитьИПровестиДокумент(
				Документы.ЗаказПоставщику, ДанныеЗаполнения, Перечисления.СтатусыЗаказовПоставщикам.Подтвержден, Сообщения);
			ДокументыОбъекты.Добавить(Документ);

		КонецЦикла;

	КонецЦикла;
	ОбеспечениеВДокументахСервер.ПроверитьЗапуститьФоновоеЗаданиеРаспределенияЗапасов();

	Результат = Новый Структура("Документы, Сообщения", ДокументыОбъекты, Сообщения);
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДобавлениеВТаблицуЗапасы

Процедура ПолучитьДанныеОЗапасах(Таблица, ВременнаяТаблицаТовары, Запрос, Параметры)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = ВременнаяТаблицаТовары;
	Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос.УстановитьПараметр("НачалоТекущегоДня", НачалоДня(ТекущаяДатаСеанса()));
	ОбеспечениеСервер.ДобавитьВременнуюТаблицуСтатистикиПотребления(Запрос, "ВтТовары");
	
	УстановитьПривилегированныйРежим(Ложь);

	ТекстыЗапросов = Новый Массив;
	
	ТекстыЗапросов.Добавить(ТекстЗапросаУсловийЗакупок());
	
	ТекстыЗапросов.Добавить(ТаблицаТоварныеОграничения());
	ТекстыЗапросов.Добавить(ТаблицаСтатистикаПотребления());
	ТекстыЗапросов.Добавить(ТаблицаОстатки());
	ТекстыЗапросов.Добавить(ТаблицаЗаказыКПоступлению());
	ТекстыЗапросов.Добавить(ТаблицаУсловияЗакупок());
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	Запрос.УстановитьПараметр("НачалоПериода", ТекущаяДатаСеанса()); //для получения цен.
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ВыборкаТоварныеОграничения   = РезультатыЗапроса[РезультатыЗапроса.Количество() - 5].Выбрать();
	ТаблицаСтатистикиПотребления = РезультатыЗапроса[РезультатыЗапроса.Количество() - 4].Выгрузить();
	ТаблицаОстатки               = РезультатыЗапроса[РезультатыЗапроса.Количество() - 3].Выгрузить();
	ТаблицаЗаказыКПоступлению    = РезультатыЗапроса[РезультатыЗапроса.Количество() - 2].Выгрузить();
	ТаблицаУсловияЗакупок        = РезультатыЗапроса[РезультатыЗапроса.Количество() - 1].Выгрузить();
	
	Таблица.Очистить();
	
	Пока ВыборкаТоварныеОграничения.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Таблица.Добавить(), ВыборкаТоварныеОграничения);
	КонецЦикла;
	
	ПоляКлюча = "Номенклатура,Характеристика,Склад";
	ОбеспечениеСервер.ОбновитьКоллекциюДаннымиИзТаблицы(Таблица, ТаблицаСтатистикиПотребления, ПоляКлюча);
	ОбеспечениеСервер.ОбновитьКоллекциюДаннымиИзТаблицы(Таблица, ТаблицаОстатки, ПоляКлюча);
	ОбеспечениеСервер.ОбновитьКоллекциюДаннымиИзТаблицы(Таблица, ТаблицаЗаказыКПоступлению, ПоляКлюча);
	ОбеспечениеСервер.ОбновитьКоллекциюДаннымиИзТаблицы(Таблица, ТаблицаУсловияЗакупок, ПоляКлюча);
	
	Для каждого Строка Из Таблица Цикл
		
		РезультатРасчета = КЗаказуДляПоддержанияЗапаса(Строка, Параметры.ЗаСчетЗапасов);
		ЗаполнитьЗначенияСвойств(Строка, РезультатРасчета);
		
		РезультатРасчета = СлужебныеРеквизиты(Строка);
		ЗаполнитьЗначенияСвойств(Строка, РезультатРасчета);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьПараметрыРасчетаСтатистики(Запрос, ПериодПродаж)
	
	Сутки = 86400;
	ДатаОкончания = КонецДня(ТекущаяДатаСеанса()) - Сутки;
	ДатаНачала    = НачалоДня(ДатаОкончания) - Сутки * (ПериодПродаж - 1);
	Если ДатаОкончания < ДатаНачала Тогда
		ДатаОкончания = ДатаНачала;
	КонецЕсли;
	
	ОбеспечениеСервер.УстановитьПараметрыЗапросаРасчетаСтатистики(Запрос, Новый СтандартныйПериод(ДатаНачала, ДатаОкончания));
	
КонецПроцедуры

Процедура ОбновитьИтогиВСтроке(Строка)

	Строка.ВесИтог   = ?(Строка.Отметка, Строка.КЗаказу * Строка.Вес, 0);
	Строка.ОбъемИтог = ?(Строка.Отметка, Строка.КЗаказу * Строка.Объем, 0);
	Строка.Сумма     = Строка.Цена * Строка.КЗаказу;
	Строка.СуммаИтог = ?(Строка.Отметка, Строка.Сумма, 0);

КонецПроцедуры

#КонецОбласти

#Область ТекстыЗапросовСостоянияЗапасов

Функция ТаблицаТоварныеОграничения()

	Текст =
		"ВЫБРАТЬ
		|	Товары.Номенклатура       КАК Номенклатура,
		|	Товары.Характеристика     КАК Характеристика,
		|	Товары.Склад              КАК Склад,
		|
		|	ЕСТЬNULL(ТоварныеОграничения.МинимальноеКоличествоЗапаса, 0)  КАК МинимальныйОстаток,
		|	ЕСТЬNULL(ТоварныеОграничения.МаксимальноеКоличествоЗапаса, 0) КАК МаксимальныйОстаток,
		|
		|	&ТекстЗапросаВесНоменклатуры              КАК Вес,
		|	&ТекстЗапросаОбъемНоменклатуры            КАК Объем,
		|	СпрНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СпрНоменклатура.Артикул          КАК Артикул,
		|	СпрНоменклатура.Код              КАК Код,
		|
		|	ВЫБОР КОГДА СпрНоменклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины
		|		= ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук) ТОГДА
		|				ИСТИНА
		|			ИНАЧЕ
		|				ЛОЖЬ
		|		КОНЕЦ                            КАК ЕдиницаИзмеренияШтучная
		|ИЗ
		|	ВтТовары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК ТоварныеОграничения
		|		ПО &ПодстановкаТоварногоОграничения
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
		|		ПО Товары.Номенклатура = СпрНоменклатура.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура, Характеристика, Склад";

	Текст = СтрЗаменить(Текст,
		"&ТекстЗапросаВесНоменклатуры",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(
		"СпрНоменклатура.ЕдиницаИзмерения",
		"СпрНоменклатура"));
	Текст = СтрЗаменить(Текст,
		"&ТекстЗапросаОбъемНоменклатуры",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки(
		"СпрНоменклатура.ЕдиницаИзмерения",
		"СпрНоменклатура"));
		
	Поля = "Товары.Номенклатура,Товары.Характеристика,Товары.Склад";
	Текст = РегистрыСведений.ТоварныеОграничения.ПодставитьСоединение(Текст, "ПодстановкаТоварногоОграничения", Поля);
	Возврат Текст;

КонецФункции

Функция ВременнаяТаблицаТовары(Источник)
	
	Если Источник = "Склад" Тогда
		
		Возврат РегистрыСведений.ТоварныеОграничения.ВременнаяТаблицаТоварыПоддерживаемогоЗапаса() +
			"ВЫБРАТЬ
			|	Т.Номенклатура       КАК Номенклатура,
			|	Т.Характеристика     КАК Характеристика,
			|	Т.Склад              КАК Склад
			|ПОМЕСТИТЬ ВтТовары
			|ИЗ
			|	ВтТоварыПоддерживаемогоЗапаса КАК Т
			|
			|ГДЕ
			|	Т.Склад = &Склад
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура, Характеристика, Склад";
		
	ИначеЕсли Источник = "ТаблицаЗначений" Тогда
		
		Возврат
			"ВЫБРАТЬ
			|	Т.Номенклатура       КАК Номенклатура,
			|	Т.Характеристика     КАК Характеристика,
			|	Т.Склад              КАК Склад
			|ПОМЕСТИТЬ ВтТовары
			|ИЗ
			|	&ТаблицаЗначений КАК Т
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура, Характеристика, Склад";
		
	КонецЕсли;
	
КонецФункции

Функция ТаблицаСтатистикаПотребления()
	
	Возврат
		"ВЫБРАТЬ
		|	Т.Номенклатура      КАК Номенклатура,
		|	Т.Характеристика    КАК Характеристика,
		|	Т.Склад             КАК Склад,
		|
		|	Т.СреднедневноеПотребление  КАК СреднедневноеПотребление,
		|	Т.Потребление               КАК Продажи
		|
		|ИЗ
		|	ВтСтатистикаПотребления КАК Т
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура, Характеристика, Склад";
	
КонецФункции

Функция ТаблицаОстатки()
	
	Текст =
		"ВЫБРАТЬ
		|	Запасы.Склад КАК Склад,
		|	Запасы.Номенклатура КАК Номенклатура,
		|	Запасы.Характеристика КАК Характеристика,
		|	Запасы.ВНаличииОстаток КАК Остаток,
		|	Запасы.ВНаличииОстаток
		|		- Запасы.РезервироватьНаСкладеОстаток
		|		- Запасы.РезервироватьПоМереПоступленияОстаток
		|		- Запасы.ОтложитьРезервированиеОстаток
		|		- Запасы.КОбеспечениюОстаток КАК СвободныйОстаток
		|ИЗ
		|	РегистрНакопления.ЗапасыИПотребности.Остатки(,
		|		(Номенклатура, Характеристика, Склад, Назначение) В(
		|			ВЫБРАТЬ
		|				Фильтр.Номенклатура КАК Номенклатура,
		|				Фильтр.Характеристика КАК Характеристика,
		|				Фильтр.Склад КАК Склад,
		|				ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение
		|			ИЗ
		|				ВтТовары КАК Фильтр)) КАК Запасы
		|ГДЕ
		|	Запасы.ВНаличииОстаток <> 0
		|		ИЛИ Запасы.ВНаличииОстаток
		|				- Запасы.РезервироватьНаСкладеОстаток
		|				- Запасы.РезервироватьПоМереПоступленияОстаток
		|				- Запасы.ОтложитьРезервированиеОстаток
		|				- Запасы.КОбеспечениюОстаток <> 0
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура, Характеристика, Склад";
	
	Возврат Текст;

КонецФункции

Функция ТаблицаЗаказыКПоступлению()
	
	Текст =
		"ВЫБРАТЬ
		|	Запасы.Склад КАК Склад,
		|	Запасы.Номенклатура КАК Номенклатура,
		|	Запасы.Характеристика КАК Характеристика,
		|	Запасы.ЗаказаноОстаток КАК ЗаказыКПоступлению,
		|	ВЫБОР
		|		КОГДА Запасы.ВНаличииОстаток
		|				- Запасы.РезервироватьНаСкладеОстаток
		|				- Запасы.РезервироватьПоМереПоступленияОстаток
		|				- Запасы.ОтложитьРезервированиеОстаток
		|				- Запасы.КОбеспечениюОстаток > 0
		|			ТОГДА
		|				Запасы.ЗаказаноОстаток
		|		КОГДА Запасы.ВНаличииОстаток
		|				+ Запасы.ЗаказаноОстаток
		|				- Запасы.РезервироватьНаСкладеОстаток
		|				- Запасы.РезервироватьПоМереПоступленияОстаток
		|				- Запасы.ОтложитьРезервированиеОстаток
		|				- Запасы.КОбеспечениюОстаток < 0
		|			ТОГДА
		|				0
		|		ИНАЧЕ Запасы.ВНаличииОстаток
		|				+ Запасы.ЗаказаноОстаток
		|				- Запасы.РезервироватьНаСкладеОстаток
		|				- Запасы.РезервироватьПоМереПоступленияОстаток
		|				- Запасы.ОтложитьРезервированиеОстаток
		|				- Запасы.КОбеспечениюОстаток
		|	КОНЕЦ КАК ЗаказыКПоступлениюСвободные
		|ИЗ
		|	РегистрНакопления.ЗапасыИПотребности.Остатки(,
		|		(Номенклатура, Характеристика, Склад, Назначение) В(
		|			ВЫБРАТЬ
		|				Фильтр.Номенклатура КАК Номенклатура,
		|				Фильтр.Характеристика КАК Характеристика,
		|				Фильтр.Склад КАК Склад,
		|				ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение
		|			ИЗ
		|				ВтТовары КАК Фильтр)) КАК Запасы
		|ГДЕ
		|	Запасы.ЗаказаноОстаток > 0
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура, Характеристика, Склад";
	
	Возврат Текст;

КонецФункции

Функция ТекстЗапросаУсловийЗакупок(Источник = Неопределено)
	
	Текст =
		"ВЫБРАТЬ //Дата последнего заказа
		|	Т.Номенклатура   КАК Номенклатура,
		|	Т.Характеристика КАК Характеристика,
		|	Т.Склад          КАК Склад,
		|
		|	МАКСИМУМ(Товары.Ссылка.Дата) КАК ДатаПоследнегоЗаказа
		|
		|ПОМЕСТИТЬ ВтДатаПоследнегоЗаказа
		|ИЗ
		|	ВтТовары КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК Товары
		|		ПО Т.Номенклатура   = Товары.Номенклатура
		|		 И Т.Характеристика = Товары.Характеристика
		|		 И Т.Склад          = Товары.Склад
		|ГДЕ
		|	Товары.Ссылка.Проведен
		|СГРУППИРОВАТЬ ПО
		|	Т.Номенклатура, Т.Характеристика, Т.Склад
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ //Дата предпоследнего заказа.
		|	Т.Номенклатура   КАК Номенклатура,
		|	Т.Характеристика КАК Характеристика,
		|	Т.Склад          КАК Склад,
		|	МАКСИМУМ(Т.ДатаПоследнегоЗаказа)  КАК ДатаПоследнегоЗаказа,
		|	МАКСИМУМ(ВЫБОР КОГДА Т.ДатаПоследнегоЗаказа = Товары.Ссылка.Дата ТОГДА
		|				NULL
		|			ИНАЧЕ Товары.Ссылка.Дата
		|		КОНЕЦ)                        КАК ДатаПредпоследнегоЗаказа
		|	
		|ПОМЕСТИТЬ ВтДатаПредпоследнегоЗаказа
		|ИЗ
		|	ВтДатаПоследнегоЗаказа КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК Товары
		|		ПО Т.Номенклатура   = Товары.Номенклатура
		|		 И Т.Характеристика = Товары.Характеристика
		|		 И Т.Склад          = Товары.Склад
		|ГДЕ
		|	Товары.Ссылка.Проведен
		|СГРУППИРОВАТЬ ПО
		|	Т.Номенклатура, Т.Характеристика, Т.Склад
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ // Дата третьего заказа.
		|	Т.Номенклатура   КАК Номенклатура,
		|	Т.Характеристика КАК Характеристика,
		|	Т.Склад          КАК Склад,
		|	МАКСИМУМ(Т.ДатаПоследнегоЗаказа)     КАК ДатаПоследнегоЗаказа,
		|	МАКСИМУМ(Т.ДатаПредпоследнегоЗаказа) КАК ДатаПредпоследнегоЗаказа,
		|	МАКСИМУМ(ВЫБОР КОГДА Товары.Ссылка.Дата В (Т.ДатаПоследнегоЗаказа, Т.ДатаПредпоследнегоЗаказа) ТОГДА
		|				NULL
		|			ИНАЧЕ Товары.Ссылка.Дата
		|		КОНЕЦ)                           КАК ДатаТретьегоЗаказа
		|	
		|ПОМЕСТИТЬ ВтДатаТретьегоЗаказа
		|ИЗ
		|	ВтДатаПредпоследнегоЗаказа КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК Товары
		|		ПО Т.Номенклатура   = Товары.Номенклатура
		|		 И Т.Характеристика = Товары.Характеристика
		|		 И Т.Склад          = Товары.Склад
		|ГДЕ
		|	Товары.Ссылка.Проведен
		|СГРУППИРОВАТЬ ПО
		|	Т.Номенклатура, Т.Характеристика, Т.Склад
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ //Последние три заказа по позиции.
		|	Т.Номенклатура   КАК Номенклатура,
		|	Т.Характеристика КАК Характеристика,
		|	Т.Склад          КАК Склад,
		|
		|	МАКСИМУМ(ВЫБОР КОГДА Т.ДатаПоследнегоЗаказа = Товары.Ссылка.Дата ТОГДА
		|				Товары.Ссылка
		|			ИНАЧЕ NULL
		|		КОНЕЦ)                           КАК Заказ1,
		|	МАКСИМУМ(ВЫБОР КОГДА Т.ДатаПредпоследнегоЗаказа = Товары.Ссылка.Дата ТОГДА
		|				Товары.Ссылка
		|			ИНАЧЕ NULL
		|		КОНЕЦ)                           КАК Заказ2,
		|	МАКСИМУМ(ВЫБОР КОГДА Т.ДатаТретьегоЗаказа = Товары.Ссылка.Дата ТОГДА
		|				Товары.Ссылка
		|			ИНАЧЕ NULL
		|		КОНЕЦ)                           КАК Заказ3
		|
		|ПОМЕСТИТЬ ВтТриПоследнихЗаказа
		|ИЗ
		|	ВтДатаТретьегоЗаказа КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК Товары
		|		ПО Т.Номенклатура   = Товары.Номенклатура
		|		 И Т.Характеристика = Товары.Характеристика
		|		 И Т.Склад          = Товары.Склад
		|		 И Товары.Ссылка.Дата В (Т.ДатаПоследнегоЗаказа, Т.ДатаПредпоследнегоЗаказа, Т.ДатаТретьегоЗаказа)
		|ГДЕ
		|	Товары.Ссылка.Проведен
		|СГРУППИРОВАТЬ ПО
		|	Т.Номенклатура, Т.Характеристика, Т.Склад
		|ИНДЕКСИРОВАТЬ ПО
		|	Заказ1, Заказ2, Заказ3
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ //Данные для заполнения источника обеспечения и условий закупки.
		|	Т.Номенклатура   КАК Номенклатура,
		|	Т.Характеристика КАК Характеристика,
		|	Т.Склад          КАК Склад,
		|
		|	ВЫБОР КОГДА Т.Заказ2.Партнер ЕСТЬ NULL ТОГДА
		|				Т.Заказ1.Партнер
		|			КОГДА Т.Заказ3.Партнер ЕСТЬ NULL ТОГДА
		|				ВЫБОР КОГДА Т.Заказ1.Партнер = Т.Заказ2.Партнер ТОГДА
		|							Т.Заказ1.Партнер
		|						ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|					КОНЕЦ
		|			ИНАЧЕ
		|				ВЫБОР КОГДА Т.Заказ1.Партнер = Т.Заказ2.Партнер ИЛИ Т.Заказ1.Партнер = Т.Заказ3.Партнер ТОГДА
		|							Т.Заказ1.Партнер
		|						КОГДА Т.Заказ2.Партнер = Т.Заказ3.Партнер ТОГДА
		|							Т.Заказ2.Партнер
		|						ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|					КОНЕЦ
		|		КОНЕЦ       КАК Партнер,
		|
		|	ВЫБОР КОГДА Т.Заказ2.Партнер ЕСТЬ NULL ТОГДА
		|				Т.Заказ1.Соглашение
		|			КОГДА Т.Заказ3.Партнер ЕСТЬ NULL ТОГДА
		|				ВЫБОР КОГДА Т.Заказ1.Соглашение = Т.Заказ2.Соглашение ТОГДА
		|							Т.Заказ1.Соглашение
		|						ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка)
		|					КОНЕЦ
		|			ИНАЧЕ
		|				ВЫБОР КОГДА Т.Заказ1.Соглашение = Т.Заказ2.Соглашение ИЛИ Т.Заказ1.Соглашение = Т.Заказ3.Соглашение ТОГДА
		|							Т.Заказ1.Соглашение
		|						КОГДА Т.Заказ2.Соглашение = Т.Заказ3.Соглашение ТОГДА
		|							Т.Заказ2.Соглашение
		|						ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка)
		|					КОНЕЦ
		|		КОНЕЦ       КАК Соглашение,
		|
		|	ВЫБОР КОГДА Т.Заказ2.Партнер ЕСТЬ NULL ТОГДА
		|				Т.Заказ1.Соглашение.Валюта
		|			КОГДА Т.Заказ3.Партнер ЕСТЬ NULL ТОГДА
		|				ВЫБОР КОГДА Т.Заказ1.Соглашение = Т.Заказ2.Соглашение ТОГДА
		|							Т.Заказ1.Соглашение.Валюта
		|						ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка)
		|					КОНЕЦ
		|			ИНАЧЕ
		|				ВЫБОР КОГДА Т.Заказ1.Соглашение = Т.Заказ2.Соглашение ИЛИ Т.Заказ1.Соглашение = Т.Заказ3.Соглашение ТОГДА
		|							Т.Заказ1.Соглашение.Валюта
		|						КОГДА Т.Заказ2.Соглашение = Т.Заказ3.Соглашение ТОГДА
		|							Т.Заказ2.Соглашение.Валюта
		|						ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка)
		|					КОНЕЦ
		|		КОНЕЦ       КАК Валюта,
		|
		|	ВЫРАЗИТЬ(ВЫБОР КОГДА Т.Заказ2.Партнер ЕСТЬ NULL ТОГДА
		|				Т.Заказ1.Соглашение
		|			КОГДА Т.Заказ3.Партнер ЕСТЬ NULL ТОГДА
		|				ВЫБОР КОГДА Т.Заказ1.Соглашение = Т.Заказ2.Соглашение ТОГДА
		|							Т.Заказ1.Соглашение
		|						ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка)
		|					КОНЕЦ
		|			ИНАЧЕ
		|				ВЫБОР КОГДА Т.Заказ1.Соглашение = Т.Заказ2.Соглашение ИЛИ Т.Заказ1.Соглашение = Т.Заказ3.Соглашение ТОГДА
		|							Т.Заказ1.Соглашение
		|						КОГДА Т.Заказ2.Соглашение = Т.Заказ3.Соглашение ТОГДА
		|							Т.Заказ2.Соглашение
		|						ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка)
		|					КОНЕЦ
		|		КОНЕЦ КАК Справочник.СоглашенияСПоставщиками).ВидЦеныПоставщика КАК ВидЦеныПоставщика
		|
		|ПОМЕСТИТЬ ВтДанныеЗаполнения
		|ИЗ
		|	ВтТриПоследнихЗаказа КАК Т
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад";
	
	Если ЗначениеЗаполнено(Источник) Тогда
		Текст = СтрЗаменить(Текст, "ВтТовары", Источник);
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

Функция ТаблицаУсловияЗакупок()
	
	Возврат
		"ВЫБРАТЬ
		|	Т.Номенклатура   КАК Номенклатура,
		|	Т.Характеристика КАК Характеристика,
		|	Т.Склад          КАК Склад,
		|	Т.Партнер        КАК Поставщик,
		|	Т.ВидЦеныПоставщика КАК ВидЦеныПоставщика,
		|	Т.Соглашение     КАК Соглашение,
		|
		|	ЦеныПоставщиков.Цена                   КАК Цена,
		|	ЦеныПоставщиков.Упаковка               КАК Упаковка,
		|	ЦеныПоставщиков.Валюта                 КАК Валюта
		|ИЗ
		|	ВтДанныеЗаполнения КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(
		|			КОНЕЦПЕРИОДА(&НачалоПериода, ДЕНЬ),
		|			(Номенклатура, Характеристика, Партнер, ВидЦеныПоставщика)В (
		|				ВЫБРАТЬ
		|					Т.Номенклатура           КАК Номенклатура,
		|					Т.Характеристика         КАК Характеристика,
		|					Т.Партнер                КАК Партнер,
		|					Т.ВидЦеныПоставщика      КАК ВидЦеныПоставщика
		|				ИЗ
		|					ВтДанныеЗаполнения КАК Т)) КАК ЦеныПоставщиков
		|		ПО Т.Номенклатура   = ЦеныПоставщиков.Номенклатура
		|		 И Т.Характеристика = ЦеныПоставщиков.Характеристика
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура, Характеристика, Склад";
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеПоСостояниюЗаказов

Функция ВременнаяТаблицаЗаказы()
	
	Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ // Строки заказов на отгрузку
		|	Набор.Номенклатура КАК Номенклатура,
		|	Набор.Характеристика КАК Характеристика,
		|	Набор.Склад КАК Склад,
		|	Набор.ПодразделениеПолучатель КАК ПодразделениеПолучатель,
		|	Набор.Заказ КАК Заказ,
		|	Набор.Назначение КАК Назначение,
		|	Набор.ДатаОтгрузки КАК ДатаОтгрузки,
		|	СУММА(Набор.Требуется) КАК Требуется,
		|	СУММА(Набор.Обеспечено) КАК Обеспечено
		|ПОМЕСТИТЬ ВтЗаказы
		|ИЗ(
		|ВЫБРАТЬ
		|	Потребности.Номенклатура                               КАК Номенклатура,
		|	Потребности.Характеристика                             КАК Характеристика,
		|	
		|	ВЫБОР КОГДА Потребности.Склад ССЫЛКА Справочник.Склады ТОГДА
		|				Потребности.Склад
		|			ИНАЧЕ
		|				НЕОПРЕДЕЛЕНО
		|		КОНЕЦ КАК Склад,
		|	
		|	ВЫБОР КОГДА Потребности.Склад ССЫЛКА Справочник.СтруктураПредприятия ТОГДА
		|				Потребности.Склад
		|			ИНАЧЕ
		|				НЕОПРЕДЕЛЕНО
		|		КОНЕЦ КАК ПодразделениеПолучатель,
		|	
		|	Потребности.ЗаказНаОтгрузку                             КАК Заказ,
		|	Потребности.Назначение                                  КАК Назначение,
		|	Потребности.ЖелаемаяДатаОтгрузки                        КАК ДатаОтгрузки,
		|	Потребности.НеОбеспечено + Потребности.Обеспечено + Потребности.Зарезервировано КАК Требуется,
		|	Потребности.Обеспечено + Потребности.Зарезервировано КАК Обеспечено
		|	ИЗ
		|		РегистрСведений.РаспределениеЗапасов КАК Потребности
		|	ГДЕ
		|		(Потребности.Склад = &Склад ИЛИ НЕ Потребности.Склад ССЫЛКА Справочник.Склады)
		|			И Потребности.Состояние В(
		|				ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.Обеспечить),
		|				ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаетсяПоНеподтвержденномуЗаказу),
		|				ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченКДате),
		|				ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченНаСкладе))
		|) КАК Набор
		|СГРУППИРОВАТЬ ПО
		|	Набор.Номенклатура,
		|	Набор.Характеристика,
		|	Набор.Склад,
		|	Набор.ПодразделениеПолучатель,
		|	Набор.Заказ,
		|	Набор.Назначение,
		|	Набор.ДатаОтгрузки
		|ИМЕЮЩИЕ
		|	СУММА(Набор.Требуется) > 0
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура";

	Возврат Текст;

КонецФункции

Функция ТекстЗапросаЗаказов()
	
	Текст =
		"ВЫБРАТЬ
		|	Т.Номенклатура                         КАК Номенклатура,
		|	Т.Характеристика                       КАК Характеристика,
		|	Т.Склад                                КАК Склад,
		|	Т.ПодразделениеПолучатель              КАК ПодразделениеПолучатель,
		|	Т.Заказ                                КАК Заказ,
		|	Т.Назначение                           КАК Назначение,
		|	Т.ДатаОтгрузки                         КАК ДатаОтгрузки,
		|	Т.Требуется                            КАК Требуется,
		|	Т.Обеспечено                           КАК Обеспечено,
		|	&ТекстЗапросаВесНоменклатуры           КАК Вес,
		|	&ТекстЗапросаОбъемНоменклатуры         КАК Объем,
		|	СпрНоменклатура.ЕдиницаИзмерения       КАК ЕдиницаИзмерения,
		|	СпрНоменклатура.Артикул                КАК Артикул,
		|	СпрНоменклатура.Код                    КАК Код,
		|	ДанныеЗаполнения.Партнер               КАК Поставщик,
		|	ДанныеЗаполнения.Соглашение            КАК Соглашение,
		|	ДанныеЗаполнения.ВидЦеныПоставщика     КАК ВидЦеныПоставщика,
		|	ЦеныПоставщиков.Цена                   КАК Цена,
		|	ЦеныПоставщиков.Упаковка               КАК Упаковка,
		|	ЦеныПоставщиков.Валюта                 КАК Валюта,
		|	ЗаказыРеестра.Приоритет                КАК Приоритет,
		|	ВЫБОР
		|		КОГДА НЕ УпорядочиваниеПоДатеДокумента.Значение ЕСТЬ NULL
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		КОГДА Т.ДатаОтгрузки > &КонецТекущегоДня
		|			ТОГДА Т.ДатаОтгрузки
		|		КОГДА ИСТИНА
		|			ТОГДА ЗаказыРеестра.ДатаДокументаИБ
		|	КОНЕЦ КАК Порядок,
		|	ВЫБОР
		|		КОГДА &ПроверкаЭтапаСУчетомПравПереопределяемый
		|			ТОГДА &ДатаЗаказаНаПроизводствоСУчетомПравПереопределяемый
		|		КОГДА ИСТИНА
		|			ТОГДА ЗаказыРеестра.ДатаДокументаИБ
		|	КОНЕЦ КАК ДатаДокументаИБ,
		|	ВЫБОР
		|		КОГДА Т.ДатаОтгрузки > &КонецТекущегоДня
		|			ТОГДА Т.ДатаОтгрузки
		|		КОГДА ИСТИНА
		|			ТОГДА ЗаказыРеестра.ДатаДокументаИБ
		|	КОНЕЦ КАК ПорядокПоДатеОтгрузкиПослеДатыДокумента
		|ИЗ
		|	ВтЗаказы КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеЗаполнения КАК ДанныеЗаполнения
		|		ПО Т.Номенклатура = ДанныеЗаполнения.Номенклатура
		|		 И Т.Характеристика = ДанныеЗаполнения.Характеристика
		|		 И Т.Склад = ДанныеЗаполнения.Склад
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(
		|			КОНЕЦПЕРИОДА(&НачалоПериода, ДЕНЬ),
		|			(Номенклатура, Характеристика, Партнер, ВидЦеныПоставщика)В (
		|				ВЫБРАТЬ
		|					Т.Номенклатура           КАК Номенклатура,
		|					Т.Характеристика         КАК Характеристика,
		|					Т.Партнер                КАК Партнер,
		|					Т.ВидЦеныПоставщика      КАК ВидЦеныПоставщика
		|				ИЗ
		|					ВтДанныеЗаполнения КАК Т)) КАК ЦеныПоставщиков
		|		ПО Т.Номенклатура   = ЦеныПоставщиков.Номенклатура
		|		 И Т.Характеристика = ЦеныПоставщиков.Характеристика
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
		|		ПО Т.Номенклатура = СпрНоменклатура.Ссылка
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК ЗаказыРеестра
		|		ПО ЗаказыРеестра.Ссылка = Т.Заказ
		|		 И НЕ ЗаказыРеестра.ДополнительнаяЗапись
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ВариантУпорядочиванияПотребностейПоЗаказамДляОбеспечения КАК УпорядочиваниеПоДатеДокумента
		|		ПО УпорядочиваниеПоДатеДокумента.Значение = ЗНАЧЕНИЕ(Перечисление.ВариантыУпорядочиванияПотребностейПоЗаказамДляОбеспечения.ПриоритетИДатаДокумента)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Склад,
		|	Назначение,
		|	ПодразделениеПолучатель,
		|	Приоритет,
		|	Порядок,
		|	ДатаДокументаИБ,
		|	ПорядокПоДатеОтгрузкиПослеДатыДокумента,
		|	Заказ";
	
	Текст = СтрЗаменить(Текст,
		"&ТекстЗапросаВесНоменклатуры",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(
		"СпрНоменклатура.ЕдиницаИзмерения",
		"СпрНоменклатура"));
	Текст = СтрЗаменить(Текст,
		"&ТекстЗапросаОбъемНоменклатуры",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки(
		"СпрНоменклатура.ЕдиницаИзмерения",
		"СпрНоменклатура"));
	
	ПроверкаЭтапаТекст = "ЛОЖЬ";
	ДатаЗаказаНаПроизводствоТекст = "ДАТАВРЕМЯ(1, 1, 1)";
	Текст = СтрЗаменить(Текст, "&ПроверкаЭтапаСУчетомПравПереопределяемый", ПроверкаЭтапаТекст);
	Текст = СтрЗаменить(Текст, "&ДатаЗаказаНаПроизводствоСУчетомПравПереопределяемый", ДатаЗаказаНаПроизводствоТекст);
	
	Возврат Текст;
	
КонецФункции

Функция ВременнаяТаблицаЗапасыКЗаказу()
	
	Возврат
		"ВЫБРАТЬ
		|	Т.Номенклатура               КАК Номенклатура,
		|	Т.Характеристика             КАК Характеристика,
		|	Т.Склад                      КАК Склад,
		|	Т.КЗаказу                    КАК Количество
		|
		|ПОМЕСТИТЬ ВтЗапасыКЗаказу
		|ИЗ
		|	&ТаблицаЗапасыКЗаказу КАК Т
		|ГДЕ
		|	Т.КЗаказу > 0";
	
КонецФункции

Функция ТекстЗапросаОстатковИзЗаказов()
	
	Текст =
		// Количество к заказу для поддержания запасов в текущем сеансе работы с обработкой формирования заказов.
		"ВЫБРАТЬ
		|	Т.Номенклатура                                         КАК Номенклатура,
		|	Т.Характеристика                                       КАК Характеристика,
		|	Т.Склад                                                КАК Склад,
		|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК ПодразделениеПолучатель,
		|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)           КАК Назначение,
		|	Т.Количество                                           КАК Обеспечено
		|ИЗ
		|	ВтЗапасыКЗаказу КАК Т
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура, Характеристика, Склад, Назначение, ПодразделениеПолучатель";
	
	Возврат Текст;
	
КонецФункции


Процедура РаспределитьКоличество(Коллекция, Таблица, СтрокаКлюча, ИмяПоляКоличество, ИмяПоляНеБолее)

	ПоляКлюча = СтрРазделить(СтрокаКлюча, ",");
	ИндексПриемник = 0;
	Индекс = 0;
	СравнениеЗначений = Новый СравнениеЗначений();
	Пока Индекс < Таблица.Количество() И ИндексПриемник < Коллекция.Количество() Цикл

		Строка = Таблица[Индекс];

		Если ИндексПриемник < Коллекция.Количество() Тогда

			СтрокаПриемник = Коллекция[ИндексПриемник];

			РезультатСравненияКлюча = 0;
			Для Каждого Поле Из ПоляКлюча Цикл

				РезультатСравненияПоля = СравнениеЗначений.Сравнить(Строка[Поле], СтрокаПриемник[Поле]);
				Если РезультатСравненияПоля < 0 Тогда
					РезультатСравненияКлюча = -1;
					Прервать;
				ИначеЕсли РезультатСравненияПоля > 0 Тогда
					РезультатСравненияКлюча = 1;
					Прервать;
				КонецЕсли;

			КонецЦикла;

		Иначе
			РезультатСравненияКлюча = 1;
		КонецЕсли;

		Если РезультатСравненияКлюча < 0 Тогда

			Индекс = Индекс + 1;

		ИначеЕсли РезультатСравненияКлюча > 0 Тогда

			ИндексПриемник = ИндексПриемник + 1;

		Иначе

			РаспределенноеКоличество = Мин(СтрокаПриемник[ИмяПоляНеБолее] - СтрокаПриемник[ИмяПоляКоличество],
				Строка[ИмяПоляКоличество]);
			Строка[ИмяПоляКоличество] = Строка[ИмяПоляКоличество] - РаспределенноеКоличество;
			СтрокаПриемник[ИмяПоляКоличество] = СтрокаПриемник[ИмяПоляКоличество] + РаспределенноеКоличество;
			ИндексПриемник = ИндексПриемник + 1;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Функция КЗаказуДляОбеспеченияЗаказов(Состояние)

	КЗаказу = Состояние.Требуется - Состояние.Обеспечено;
	Отметка = КЗаказу > 0;
	Возврат Новый Структура("КЗаказу, Отметка", КЗаказу, Отметка);

КонецФункции

Функция ТекстЗаСчетОстатка()

	Возврат НСтр("ru = 'За счет остатка'");

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
