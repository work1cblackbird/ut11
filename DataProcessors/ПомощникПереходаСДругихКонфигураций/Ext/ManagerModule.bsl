#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область СлужебныеПроцедурыИФункции
// Выполняет загрузку данных для перехода с других конфигураций "1С:Предприятие 8".
// 
// Параметры:
//   ПараметрыЗагрузки - Структура - параметры загрузки данных.
//   АдресХранилища    - Строка    - Адрес хранилища для помещения результата загрузки данных.
//
Процедура ЗагрузитьДанные(ПараметрыЗагрузки, АдресХранилища, АдресДополнительногоРезультата) Экспорт
	
	Результаты = Новый Массив;
	
	ИмяФайлаАрхива = ПараметрыЗагрузки.ДанныеДляЗагрузки;
	КаталогДляИзвлечения = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПолучитьИмяВременногоФайла());
	
	Архив = Новый ЧтениеZipФайла(ИмяФайлаАрхива);
	
	Для Каждого ЭтапЗагрузки Из ПараметрыЗагрузки.ЭтапыЗагрузки Цикл
		
		ОбъектОбработки = ЭтапЗагрузки.Значение;
		
		ЭлементАрхива = Архив.Элементы.Найти(ОбъектОбработки.ИмяФайлаДляЗагрузки);
		Если ЭлементАрхива = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяВременногоФайлаПротокола = ПолучитьИмяВременногоФайла("txt");
		ИмяВременногоФайлаПравил    = "";
		
		РезультатВыполнения = Новый Структура;
		РезультатВыполнения.Вставить("ОписаниеЭтапа",            ОбъектОбработки.ПредставлениеЭтапа);
		РезультатВыполнения.Вставить("ТекстСообщения",           "");
		РезультатВыполнения.Вставить("Ошибка",                   Ложь);
		РезультатВыполнения.Вставить("ПротоколОбмена",           Новый ТекстовыйДокумент);
		РезультатВыполнения.Вставить("НачалоПериодаВыгрузки",    '00010101');
		РезультатВыполнения.Вставить("ОкончаниеПериодаВыгрузки", '00010101');
		
		ОбработкаОбмена = Обработки.УниверсальныйОбменДаннымиXML.Создать();

		ОбработкаОбмена.РежимОбмена = "Загрузка";
		ОбработкаОбмена.РежимОтладкиАлгоритмов = 1;
		ОбработкаОбмена.ВыводВОкноСообщенийИнформационныхСообщений = Ложь;
		ОбработкаОбмена.НеВыводитьНикакихИнформационныхСообщенийПользователю = Истина;
		ОбработкаОбмена.ВыводВПротоколИнформационныхСообщений      = Не ПараметрыЗагрузки.АвтоТестОбмена;
		ОбработкаОбмена.ВыводВПротоколСообщенийОбОшибках           = Истина;
		ОбработкаОбмена.ИмяФайлаПротоколаОбмена                    = ИмяВременногоФайлаПротокола;
		
		Кодировка = КодировкаТекста.ANSI;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбработкаОбмена, "КодировкаФайлаПротоколаОбмена") Тогда
			Кодировка = КодировкаТекста.UTF8;
			ОбработкаОбмена.КодировкаФайлаПротоколаОбмена = Кодировка;
		КонецЕсли;
		
		Если ПараметрыЗагрузки.БезопаснаяЗагрузка Тогда
			ИмяВременногоФайлаПравил = ПолучитьИмяВременногоФайла("xml");
			
			МакетПравил = Обработки.ПомощникПереходаСДругихКонфигураций.ПолучитьМакет(ОбъектОбработки.ИмяМакетаПравил);
			ИзменитьТекстПравилПриНеобходимости(МакетПравил, ПараметрыЗагрузки.Источник, ПараметрыЗагрузки.Приемник);
			МакетПравил.Записать(ИмяВременногоФайлаПравил);
			
			ОбработкаОбмена.БезопаснаяЗагрузка   = Истина;
			ОбработкаОбмена.ИмяФайлаПравилОбмена = ИмяВременногоФайлаПравил;
		КонецЕсли;
		
		Попытка
			Архив.Извлечь(ЭлементАрхива, КаталогДляИзвлечения);
		Исключение
			РезультатВыполнения.ТекстСообщения = НСтр("ru = 'При извлечении данных из архива произошла ошибка'") + ":" + Символы.ПС
				+ ОписаниеОшибки() + ".";
				
			РезультатВыполнения.Ошибка = Истина;
		КонецПопытки;
		
		ОбработкаОбмена.ИмяФайлаОбмена = КаталогДляИзвлечения + ЭлементАрхива.Имя;
		
		Если Не РезультатВыполнения.Ошибка Тогда
			Попытка
				ОбработкаОбмена.ОткрытьФайлЗагрузки(Истина);
			Исключение
				РезультатВыполнения.ТекстСообщения = НСтр("ru = 'При чтении данных произошла ошибка'") + ":" + Символы.ПС
					+ ОписаниеОшибки() + НСтр("ru = 'Ошибка в формате файла данных'") + ".";
					
				РезультатВыполнения.Ошибка = Истина;
			КонецПопытки;
		КонецЕсли;
		
		Если Не РезультатВыполнения.Ошибка Тогда
			
			Если Не ОбработкаОбмена.мБылиПрочитаныПравилаОбменаПриЗагрузке Тогда
				
				РезультатВыполнения.ТекстСообщения = НСтр("ru = 'При чтении данных произошла ошибка'") + ".";
				РезультатВыполнения.Ошибка         = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не РезультатВыполнения.Ошибка Тогда
			
			Попытка
				
				ОбработкаОбмена.ВыполнитьЗагрузку();
				
			Исключение
				
				РезультатВыполнения.ТекстСообщения = НСтр("ru = 'При загрузке данных произошла ошибка'") + ":" + Символы.ПС
					+ ОписаниеОшибки() + ".";
					
				РезультатВыполнения.Ошибка = Истина;
				
			КонецПопытки;
			
		КонецЕсли;
		
		Если Не РезультатВыполнения.Ошибка Тогда
			
			Если ОбработкаОбмена.ФлагОшибки Тогда
				
				РезультатВыполнения.ТекстСообщения = НСтр("ru = 'При загрузке данных произошла ошибка'") + ".";
				РезультатВыполнения.Ошибка         = Истина;
				
			Иначе
				
				РезультатВыполнения.ТекстСообщения = НСтр("ru = 'Загрузка данных завершена'") + ".";
				РезультатВыполнения.Ошибка         = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не РезультатВыполнения.Ошибка и ПараметрыЗагрузки.Свойство("ДанныеКвитанции") Тогда
			ДанныеКвитанции = ПолучитьДанныеКвитанции(ПараметрыЗагрузки, АдресДополнительногоРезультата);
		КонецЕсли;
		
		РезультатВыполнения.НачалоПериодаВыгрузки    = ОбработкаОбмена.ДатаНачала;
		РезультатВыполнения.ОкончаниеПериодаВыгрузки = ОбработкаОбмена.ДатаОкончания;
		
		РезультатВыполнения.ПротоколОбмена.Прочитать(ОбработкаОбмена.ИмяФайлаПротоколаОбмена, Кодировка);
		Результаты.Добавить(РезультатВыполнения);
		
		УдалитьФайлы(ИмяВременногоФайлаПротокола);
		Если Не ПустаяСтрока(ИмяВременногоФайлаПравил) Тогда
			УдалитьФайлы(ИмяВременногоФайлаПравил);
		КонецЕсли;
		
	КонецЦикла;
	
	УдалитьФайлы(ИмяФайлаАрхива);
	УдалитьФайлы(КаталогДляИзвлечения);
	
	ПоместитьВоВременноеХранилище(Результаты, АдресХранилища);
	
КонецПроцедуры

Процедура ИзменитьТекстПравилПриНеобходимости(МакетПравил, КонфигурацияИсточник, КонфигурацияПриемник)
	
	Если Не (КонфигурацияИсточник = "КА" И КонфигурацияПриемник = "УП") Тогда
		Возврат;
	КонецЕсли;
	
	МассивПВДКУдалению = Новый Массив;
	МассивПВДКУдалению.Добавить("ВводОстатковПоМеждународномуУчету");
	МассивПВДКУдалению.Добавить("ВидыБюджетов");
	МассивПВДКУдалению.Добавить("Сценарии");
	МассивПВДКУдалению.Добавить("АналогиНоменклатуры");
	
	МассивИсточниковКУдалению = Новый Массив;
	МассивИсточниковКУдалению.Добавить("СправочникСсылка.Бюджеты");
	МассивИсточниковКУдалению.Добавить("СправочникСсылка.ГруппыЗаменяемостиРабочихЦентров");
	МассивИсточниковКУдалению.Добавить("СправочникСсылка.НоменклатурныеУзлы");
	МассивИсточниковКУдалению.Добавить("СправочникСсылка.СтатьиОборотовПоБюджетам");
	МассивИсточниковКУдалению.Добавить("СправочникСсылка.ТехнологическиеКартыПроизводства");
	МассивИсточниковКУдалению.Добавить("ПланВидовХарактеристикСсылка.ВидыСубконтоБюджетирования");
	МассивИсточниковКУдалению.Добавить("ПланСчетовСсылка.Бюджетирование");
	МассивИсточниковКУдалению.Добавить("РегистрСведенийЗапись.АналогиНоменклатуры");
	МассивИсточниковКУдалению.Добавить("РегистрСведенийЗапись.УчетнаяПолитикаМеждународныйУчет");
	
	// Документ корректируется в обратном порядке.
	КоличествоСтрокДокумента = МакетПравил.КоличествоСтрок();
	ОбластьПВД = Ложь;
	ОбластьПКО = Ложь;
	НомерСтрокиКонецПравила = 0;
	Для Итерация = 0 По КоличествоСтрокДокумента - 7 Цикл
		СтрокаДокумента = МакетПравил.ПолучитьСтроку(КоличествоСтрокДокумента - Итерация);
		Если Найти(СтрокаДокумента, "</ПравилаКонвертацииОбъектов>") > 0 Тогда
			ОбластьПКО = Истина;
		ИначеЕсли Найти(СтрокаДокумента, "<ПравилаКонвертацииОбъектов>") > 0 Тогда
			ОбластьПКО = Ложь;
		ИначеЕсли Найти(СтрокаДокумента, "</ПравилаВыгрузкиДанных>") > 0 Тогда
			ОбластьПВД = Истина;
		ИначеЕсли Найти(СтрокаДокумента, "<ПравилаВыгрузкиДанных>") > 0 Тогда
			ОбластьПВД = Ложь;
		ИначеЕсли Найти(СтрокаДокумента, "</Правило>") > 0 Тогда
			НомерСтрокиКонецПравила = КоличествоСтрокДокумента - Итерация;
		ИначеЕсли Найти(СтрокаДокумента, "<Правило") > 0 Тогда
			// Начало правила. Поиск источника.
			СтрокаНачало = КоличествоСтрокДокумента - Итерация;
			ИсточникДанных = "";
			КодПравила = "";
			Для НомСтр = СтрокаНачало + 1 По НомерСтрокиКонецПравила Цикл
				СтрокаДокумента = МакетПравил.ПолучитьСтроку(НомСтр);
				Если Найти(СтрокаДокумента, "<Код>") > 0 Тогда
					КодПравила = СтрЗаменить(СокрЛП(СтрокаДокумента), "</Код>","");
					КодПравила = СтрЗаменить(СокрЛП(КодПравила), "<Код>","");
				ИначеЕсли ОбластьПКО И Найти(СтрокаДокумента, "<Источник>") > 0 Тогда
					ИсточникДанных = СтрЗаменить(СокрЛП(СтрокаДокумента), "</Источник>","");
					ИсточникДанных = СтрЗаменить(ИсточникДанных, "<Источник>","");
				ИначеЕсли ОбластьПВД И Найти(СтрокаДокумента, "<ОбъектВыборки>") > 0 Тогда
					ИсточникДанных = СтрЗаменить(СокрЛП(СтрокаДокумента), "</ОбъектВыборки>","");
					ИсточникДанных = СтрЗаменить(ИсточникДанных, "<ОбъектВыборки>","");
				КонецЕсли;
				Если ИсточникДанных <> "" И КодПравила <> "" Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если (КодПравила <> "" И МассивПВДКУдалению.Найти(КодПравила) <> Неопределено)
				ИЛИ (ИсточникДанных <> "" И МассивИсточниковКУдалению.Найти(ИсточникДанных) <> Неопределено) Тогда
				УдалитьФрагментТекста(МакетПравил, СтрокаНачало, НомерСтрокиКонецПравила);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьФрагментТекста(ТекстДокумент, НомерСтрокиНачало, НомерСтрокиКонец)
	
	ЧислоСтрокУдалить = НомерСтрокиКонец - НомерСтрокиНачало + 1;
	
	Для НомСтр = 1 По ЧислоСтрокУдалить Цикл
		ТекстДокумент.УдалитьСтроку(НомерСтрокиКонец - НомСтр + 1);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает данные, необходимые для записи квитанции в файл на клиенте.
//
// Параметры:
//  ПараметрыЗагрузки  - Структура - параметры загрузки данных.
//
// Возвращаемое значение:
//   Структура   - Данные квитанции, в последствии сохраняется в файл.
//
Функция ПолучитьДанныеКвитанции(ПараметрыЗагрузки, АдресДополнительногоРезультата)
	
	ДанныеКвитанции = Неопределено;
	
	Если ПараметрыЗагрузки.Свойство("ДанныеКвитанции")
		И ЗначениеЗаполнено(ПараметрыЗагрузки.ДанныеКвитанции) Тогда
		
		ДвоичныеДанныеКвитанции = ПараметрыЗагрузки.ДанныеКвитанции;
		ИмяВременногоФайлаКвитанции = ПолучитьИмяВременногоФайла("xml");
		ДвоичныеДанныеКвитанции.Записать(ИмяВременногоФайлаКвитанции);
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ИмяВременногоФайлаКвитанции);
		ДанныеКвитанции = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
		ЧтениеXML.Закрыть();
		УдалитьФайлы(ИмяВременногоФайлаКвитанции);
	КонецЕсли;
	
	Если ДанныеКвитанции = Неопределено Тогда
		ДанныеКвитанции = Новый Структура;
	КонецЕсли;
	
	Если ПараметрыЗагрузки.ПорядковыйНомерПерехода = 3 Тогда
		ДанныеКвитанции.Вставить("Настройки");
	ИначеЕсли ПараметрыЗагрузки.ПорядковыйНомерПерехода = 5 Тогда
		ДанныеКвитанции.Вставить("Справочники");
	ИначеЕсли ПараметрыЗагрузки.ПорядковыйНомерПерехода = 7 Тогда
		ДанныеКвитанции.Вставить("Остатки");
	КонецЕсли;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла);
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, ДанныеКвитанции);
	ЗаписьXML.Закрыть();
	
	ФайлКвитанции = Новый ДвоичныеДанные(ИмяВременногоФайла);
	ПоместитьВоВременноеХранилище(ФайлКвитанции, АдресДополнительногоРезультата);

	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат ДанныеКвитанции; //ФайлКвитанции
	
КонецФункции

#КонецОбласти

#КонецЕсли