&НаКлиенте
Перем ВыполняетсяЗакрытие;

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("ПутьКФайлуЗагрузки")
		И ЗначениеЗаполнено(Параметры.ПутьКФайлуЗагрузки) Тогда
		Объект.ИмяФайлаДанных = Параметры.ПутьКФайлуЗагрузки;
	КонецЕсли;
	
	РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
	Редакция = "";
	
	Объект.КонфигурацияПриемник = "";
	Если ПолучитьФункциональнуюОпцию("УправлениеПредприятием") Тогда
		Объект.КонфигурацияПриемник = "УП";
		Редакция = 2;
	ИначеЕсли ПолучитьФункциональнуюОпцию("КомплекснаяАвтоматизация") Тогда
		Объект.КонфигурацияПриемник = "КА";
		Редакция = 2;
	ИначеЕсли ПолучитьФункциональнуюОпцию("УправлениеТорговлей") Тогда
		Объект.КонфигурацияПриемник = "УТ";
		Редакция = 11;
	КонецЕсли;
	
	ЗаполнитьДоступныеКонфигурацииИсточника();
	
	Если Параметры.Свойство("КонфигурацияИсточник", Объект.КонфигурацияИсточник)
		И ДоступныеКонфигурацииИсточника.НайтиПоЗначению(Объект.КонфигурацияИсточник) = Неопределено Тогда
		Объект.КонфигурацияИсточник = "";
	КонецЕсли;
	
	ИспользуетсяЦенообразование25 = Ложь;
	Если Объект.КонфигурацияИсточник <> "ЗУП25"
		И Объект.КонфигурацияИсточник <> "ЗУП31"
		И Объект.КонфигурацияИсточник <> "БП"
		Тогда
		
		ИспользуетсяЦенообразование25 = Константы.ИспользуетсяЦенообразование25.Получить();
		ЗаголовокЦенообразования(Редакция);
		
	КонецЕсли;
	
	Если Объект.КонфигурацияИсточник = "БП" Тогда
		ИспользуетсяКаталогПереноса = Истина;
		Элементы.СтраницыВыборФайлаКаталога.ТекущаяСтраница = Элементы.СтраницаВыборКаталогаПереноса;
		Элементы.ЗагрузитьДалее.Заголовок = НСтр("ru = 'Далее'");
		ИнициализироватьИменаФайловПереноса();
	КонецЕсли;
	
	АвтоТестОбмена = Параметры.Свойство("АвтоТестОбмена");
	Если АвтоТестОбмена Тогда
		#Область АвтоТестОбмена
		Ошибка = Ложь;
		Если ПустаяСтрока(Объект.ИмяФайлаДанных) Тогда
			ОписаниеОшибки = НСтр("ru = 'В переданных параметрах отсутствует путь к файлу с данными для загрузки.'");
			Рекомендации = НСтр("ru = 'В передаваемых параметрах должен быть элемент ПутьКФайлуЗагрузки.'");
			ЗафиксироватьОшибку(ЭтаФорма, ОписаниеОшибки, Рекомендации);
			Ошибка = Истина;
		КонецЕсли;
		Если ПустаяСтрока(Объект.КонфигурацияИсточник) Тогда
			Если Параметры.Свойство("КонфигурацияИсточник") И Не ПустаяСтрока(Параметры.КонфигурацияИсточник) Тогда
				ОписаниеОшибки = НСтр("ru = 'Загрузка данных из источника %1 не поддерживается.'");
				ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, Параметры.КонфигурацияИсточник);
				Рекомендации = НСтр("ru = 'Проверить правильность переданного параметра.'");
			Иначе
				ОписаниеОшибки = НСтр("ru = 'В переданных параметрах отсутствует имя Конфигурации-источника.'");
				Рекомендации = НСтр("ru = 'В передаваемых параметрах должен быть элемент КонфигурацияИсточник.'");
			КонецЕсли;
			ЗафиксироватьОшибку(ЭтаФорма, ОписаниеОшибки, Рекомендации);
			Ошибка = Истина;
		КонецЕсли;
		Если Ошибка Тогда
			Возврат;
		КонецЕсли;
		#КонецОбласти
	Иначе
		МетаданныеСиноним = Метаданные.Синоним;
		
		УстановитьЗаголовкиКонфигурацииПриемника("ДекорацияНазваниеКонфигурацииПриемникаИзФайла");
		
		ЗаполнитьОписаниеДоступныхКонфигурацийИсточника();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ВыполняетсяЗакрытие = Ложь;
	
	Если ПустаяСтрока(Объект.КонфигурацияПриемник) Тогда
		Отказ = Истина;
		
		ПоказатьПредупреждение(Неопределено, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Данная обработка не предназначена для запуска в программе %1.'"), МетаданныеСиноним));
			
		Возврат;
	КонецЕсли;
	
	// Устанавливаем текущую таблицу переходов.
	ОбновитьТаблицуПереходов();
	
	Если ИспользуетсяЦенообразование25 = Истина
		ИЛИ НЕ ЗначениеЗаполнено(Объект.ИмяФайлаДанных) Тогда
		
		// Позиционируемся на первом шаге помощника.
		ПорядковыйНомерПерехода = 0;
		
	Иначе
		
		ПорядковыйНомерПерехода = 1;
		
	КонецЕсли;
	
	ВыполнитьПереходПоТаблицеПереходов(Истина);
	
	Если АвтоТестОбмена Тогда
		#Если ВебКлиент Тогда
			ТекстСообщения = Нстр("ru = 'Автотест переноса данных не может выполняться в режиме Веб-клиента.'");
			ЗафиксироватьОшибку(ЭтотОбъект, ТекстСообщения);
			АвтотестЗавершить();
		#Иначе
			Автотест();
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ВыполняетсяЗакрытие Тогда
		Отказ = Истина;
		НСтрока = НСтр("ru = 'Завершить работу с помощником?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект),
			НСтрока, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Ответ = РезультатВопроса;

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВыполняетсяЗакрытие = Истина;
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания)
		И СостояниеТекущегоЭтапа() = "Выполняется" Тогда
		ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	КонецЕсли;
	
	ОбновитьИнтерфейс();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДанныеДляЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыДиалога = Новый Структура;
	Если ИспользуетсяКаталогПереноса Тогда
		ПараметрыДиалога.Вставить("РежимДиалога", РежимДиалогаВыбораФайла.ВыборКаталога);
		ПараметрыДиалога.Вставить("Заголовок", НСтр("ru = 'Выберите каталог с данными'"));
	Иначе
		ПараметрыДиалога.Вставить("РежимДиалога", РежимДиалогаВыбораФайла.Открытие);
		ПараметрыДиалога.Вставить("Заголовок", НСтр("ru = 'Выберите путь к файлу с данными'"));
		ПараметрыДиалога.Вставить("Фильтр",    НСтр("ru = 'ZIP-файл'") + " (*.zip)|*.zip");
	КонецЕсли;
		
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект",           Объект);
	ДополнительныеПараметры.Вставить("ИмяСвойства",      Элемент.Имя);
	ДополнительныеПараметры.Вставить("ПараметрыДиалога", ПараметрыДиалога);
	
	Оповещение = Новый ОписаниеОповещения("ОбработчикВыбораДанныхЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ТекстПредупреждения = НСтр("ru = 'Для данной операции необходимо установить расширение для веб-клиента 1С:Предприятие.'");
	
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Оповещение, ТекстПредупреждения, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	
	ПодготовитьОтчетОбОшибках();
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаОшибкиНажатие(Элемент)
	
	ПодготовитьОтчетОбОшибках();
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогПереносаПриИзменении(Элемент)
	ОбработатьИзменениеКаталогаПереноса();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПредварительно2ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "SwitchPricing" Тогда
		
		ОткрытьФорму("Обработка.ПомощникПереходаНаЦенообразованиеВерсии25.Форма", , ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.Независимый);
		
		ВыполняетсяЗакрытие = Истина;
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РазделОбработчиковСобытийПерехода

// Обработчик выполняется при открытии страницы помощника "СтраницаОжидания".
//
// Параметры:
//
//  Отказ - Булево - флаг отказа от открытия страницы;
//			если в обработчике поднять этот флаг, то переход на страницу выполнен не будет,
//			останется открытой предыдущая страница помощника согласно направлению перехода (вперед или назад)
//
//  ПропуститьСтраницу - Булево. Если поднять этот флаг, то страница будет пропущена
//			и управление перейдет на следующую страницу помощника согласно направлению перехода (вперед или назад)
//
//  ЭтоПереходДалее (только чтение) - Булево - флаг определяет направление перехода.
//			Истина - выполняется переход далее; Ложь - выполняется переход назад.
//
// Логика данного обработчика пропускает отображение
// страницы помощника "СтраницаОжидания", если выполняется переход назад.
//
&НаКлиенте
Функция Подключаемый_СтраницаОжидание_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	Если ЭтоПереходДалее Тогда
		ИнициализацияЭтаповЗагрузки();
		Перерисовать();
		
		Элементы.ГруппаРезультат.Видимость         = Ложь;
		Элементы.ПанельНавигации.Доступность       = Ложь;
		Элементы.ОкончаниеГотово.КнопкаПоУмолчанию = Истина;
		
		// 1-й этап - передача архива на сервер и проверка содержимого.
		ТекущийЭтап = "Выгрузка";
		ОбновитьСостояниеТекущегоЭтапа(СостояниеЭтапаВыполняется());
		Перерисовать();
		
		ПодключитьОбработчикОжидания("ПомещениеФайлаВХранилищеНачать", 0.5, Истина);
	КонецЕсли;
	
	Элементы.ДекорацияНомерШагаСтраницаОжидание.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Шаг %1.'"), Строка(ПорядковыйНомерПерехода));
КонецФункции

// Обработчик выполняется при открытии страницы помощника "СтраницаВыборДанных"
//
// Параметры:
//
//Отказ - Булево - флаг отказа от открытия страницы;
//			если в обработчике поднять этот флаг, то переход на страницу выполнен не будет,
//			останется открытой предыдущая страница помощника согласно направлению перехода (вперед или назад)
//
//ПропуститьСтраницу - Булево. Если поднять этот флаг, то страница будет пропущена
//			и управление перейдет на следующую страницу помощника согласно направлению перехода (вперед или назад)
//
//ЭтоПереходДалее (только чтение) - Булево - флаг определяет направление перехода.
//			Истина - выполняется переход далее; Ложь - выполняется переход назад
&НаКлиенте
Функция Подключаемый_СтраницаВыборДанных_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	Элементы.ЗагрузитьДалее.КнопкаПоУмолчанию = Истина;
	Элементы.ПанельНавигации.Доступность      = Истина;
	Элементы.ГруппаСтатьиДляЗУП.Видимость = (Объект.КонфигурацияИсточник = "ЗУП31");
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаПошаговойЗагрузки_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	ОбновитьНаКлиенте();
	Если ПорядковыйНомерПерехода >= 6 Тогда
		Элементы.ДекорацияЗаголовокПошаговаяЗагрузка.Заголовок = НСтр("ru='Шаг 6. Загрузка остатков.'");
	ИначеЕсли ПорядковыйНомерПерехода >= 4 Тогда
		Элементы.ДекорацияЗаголовокПошаговаяЗагрузка.Заголовок = НСтр("ru='Шаг 4. Загрузка нормативно-справочной информации.'");
	Иначе
		Элементы.ДекорацияЗаголовокПошаговаяЗагрузка.Заголовок = НСтр("ru='Шаг 2. Загрузка настроек параметров учета.'");
	КонецЕсли;
	
КонецФункции

// Обработчик перехода далее (на следующую страницу) при уходе со страницы помощника "СтраницаВыборДанных"
//
// Параметры:
// Отказ - Булево - флаг отказа от выполнения перехода далее;
//					если в обработчике поднять этот флаг, то переход на следующую страницу выполнен не будет.
//
&НаКлиенте
Функция Подключаемый_СтраницаВыборДанных_ПриПереходеДалее(Отказ)
	
	Если Не (ЗначениеЗаполнено(Объект.ИмяФайлаДанных) или ЗначениеЗаполнено(Объект.КаталогПереноса)) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Необходимо указать данные для загрузки.'"), 30);	
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаОжидание_ПриПереходеНазад(Отказ)
	
	ТаблицаОшибок.Очистить();
	
КонецФункции

// Обработчик выполняется при открытии страницы помощника "СтраницаПредварительно"
//
// Параметры:
//
//Отказ - Булево - флаг отказа от открытия страницы;
//			если в обработчике поднять этот флаг, то переход на страницу выполнен не будет,
//			останется открытой предыдущая страница помощника согласно направлению перехода (вперед или назад)
//
//ПропуститьСтраницу - Булево. Если поднять этот флаг, то страница будет пропущена
//			и управление перейдет на следующую страницу помощника согласно направлению перехода (вперед или назад)
//
//ЭтоПереходДалее (только чтение) - Булево - флаг определяет направление перехода.
//			Истина - выполняется переход далее; Ложь - выполняется переход назад
&НаКлиенте
Функция Подключаемый_СтраницаПредварительно_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	Элементы.Кнопка1.Видимость = Ложь;
	Элементы.КомандаДалее2.Видимость = Ложь;
	Элементы.ПанельНавигации.Доступность = Истина;
	
	ТекстЗаголовка = Элементы.ДекорацияНомерШагаСтраницаПредварительно.Заголовок;
	РасшифровкаЗаголовка = НСтр("ru = 'Предварительные проверки'",ОбщегоНазначенияКлиент.КодОсновногоЯзыка());
	Элементы.ДекорацияНомерШагаСтраницаПредварительно.Заголовок = ТекстЗаголовка + Символы.НПП + РасшифровкаЗаголовка;
	
КонецФункции

// Обработчик перехода далее (на следующую страницу) при уходе со страницы помощника "СтраницаПредварительно"
//
// Параметры:
// Отказ - Булево - флаг отказа от выполнения перехода далее;
//					если в обработчике поднять этот флаг, то переход на следующую страницу выполнен не будет.
//
&НаКлиенте
Функция Подключаемый_СтраницаПредварительно_ПриПереходеДалее(Отказ)
	
	Отказ = Истина;
	
КонецФункции

#КонецОбласти

#Область РазделИнициализацииПереходовПомощника

&НаКлиенте
Процедура ТаблицаПереходовПоСценарию()
	
	ТаблицаПереходов.Очистить();
	
	НомерШага = 1;
	
	Если ИспользуетсяЦенообразование25 = Истина Тогда
		
		СтруктураПараметров = СоздатьСтруктуруПараметровСтрокиПерехода("СтраницаПредварительно", "СтраницаНавигацииНазадДалее", "СтраницаПредварительно_ПриОткрытии");
		СтруктураПараметров.ИмяОбработчикаПриПереходеДалее = "СтраницаПредварительно_ПриПереходеДалее";
		
		ТаблицаПереходовНоваяСтрока(НомерШага, СтруктураПараметров);
		
	КонецЕсли;
	
	СтруктураПараметров = СоздатьСтруктуруПараметровСтрокиПерехода("СтраницаВыборДанных", 
		"СтраницаНавигацииНачало", "СтраницаВыборДанных_ПриОткрытии");
	СтруктураПараметров.ИмяОбработчикаПриПереходеДалее = "СтраницаВыборДанных_ПриПереходеДалее";
	ТаблицаПереходовНоваяСтрока(НомерШага, СтруктураПараметров);
	
	Если ИспользуетсяКаталогПереноса Тогда
		//Перенос настроек параметров учета.
		СтруктураПараметров = СоздатьСтруктуруПараметровСтрокиПерехода("СтраницаПошаговойЗагрузки", 
			"СтраницаНавигацииПошаговаяЗагрузка", "СтраницаПошаговойЗагрузки_ПриОткрытии");
		ТаблицаПереходовНоваяСтрока(НомерШага, СтруктураПараметров);
		
		СтруктураПараметров = СоздатьСтруктуруПараметровСтрокиПерехода("СтраницаОжидание", 
			"СтраницаНавигацииНазадДалее", "СтраницаОжидание_ПриОткрытии");
		СтруктураПараметров.ИмяОбработчикаПриПереходеНазад = "СтраницаОжидание_ПриПереходеНазад";
		ТаблицаПереходовНоваяСтрока(НомерШага, СтруктураПараметров);
		
		//Перенос справочников.
		СтруктураПараметров = СоздатьСтруктуруПараметровСтрокиПерехода("СтраницаПошаговойЗагрузки", 
			"СтраницаНавигацииПошаговаяЗагрузка", "СтраницаПошаговойЗагрузки_ПриОткрытии");
		ТаблицаПереходовНоваяСтрока(НомерШага, СтруктураПараметров);
		
		СтруктураПараметров = СоздатьСтруктуруПараметровСтрокиПерехода("СтраницаОжидание", 
			"СтраницаНавигацииНазадДалее", "СтраницаОжидание_ПриОткрытии");
		СтруктураПараметров.ИмяОбработчикаПриПереходеНазад = "СтраницаОжидание_ПриПереходеНазад";
		ТаблицаПереходовНоваяСтрока(НомерШага, СтруктураПараметров);
		
		//Перенос остатков.
		СтруктураПараметров = СоздатьСтруктуруПараметровСтрокиПерехода("СтраницаПошаговойЗагрузки", 
			"СтраницаНавигацииПошаговаяЗагрузка", "СтраницаПошаговойЗагрузки_ПриОткрытии");
		ТаблицаПереходовНоваяСтрока(НомерШага, СтруктураПараметров);
		
		СтруктураПараметров = СоздатьСтруктуруПараметровСтрокиПерехода("СтраницаОжидание", 
			"СтраницаНавигацииОкончание", "СтраницаОжидание_ПриОткрытии");
		СтруктураПараметров.ИмяОбработчикаПриПереходеНазад = "СтраницаОжидание_ПриПереходеНазад";
		ТаблицаПереходовНоваяСтрока(НомерШага, СтруктураПараметров);
	Иначе
		СтруктураПараметров = СоздатьСтруктуруПараметровСтрокиПерехода("СтраницаОжидание", 
			"СтраницаНавигацииОкончание", "СтраницаОжидание_ПриОткрытии");
		СтруктураПараметров.ИмяОбработчикаПриПереходеНазад = "СтраницаОжидание_ПриПереходеНазад";
		ТаблицаПереходовНоваяСтрока(НомерШага, СтруктураПараметров);
	КонецЕсли;
	
КонецПроцедуры

// Готовит структуру параметров для дальнейшего добавления строки в таблицу переходов.
//
// Параметры:
//
//  	ИмяОсновнойСтраницы - Строка. Имя страницы панели "ПанельОсновная", 
//		которая соответствует текущему номеру перехода.
//
//  	ИмяСтраницыНавигации - Строка. Имя страницы панели "ПанельНавигации", 
//		которая соответствует текущему номеру перехода.
//
//  	ИмяОбработчикаПриОткрытии - Строка. Имя функции-обработчика события открытия текущей страницы помощника
&НаКлиенте
Функция СоздатьСтруктуруПараметровСтрокиПерехода(ИмяОсновнойСтраницы, ИмяСтраницыНавигации, ИмяОбработчикаПриОткрытии)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИмяОсновнойСтраницы",            ИмяОсновнойСтраницы);
	СтруктураПараметров.Вставить("ИмяСтраницыНавигации",           ИмяСтраницыНавигации);
	СтруктураПараметров.Вставить("ИмяСтраницыДекорации",           "СтраницаДекорации");
	СтруктураПараметров.Вставить("ИмяОбработчикаПриОткрытии",      ИмяОбработчикаПриОткрытии);
	СтруктураПараметров.Вставить("ИмяОбработчикаПриПереходеДалее", "");
	СтруктураПараметров.Вставить("ИмяОбработчикаПриПереходеНазад", "");
	СтруктураПараметров.Вставить("ПропуститьШаг",                  Ложь);
	СтруктураПараметров.Вставить("ПропуститьНумерациюШага",        Ложь);
	
	Возврат СтруктураПараметров;
КонецФункции

// Добавляет новую строку в конец текущей таблицы переходов
//
// Параметры:
//
//  ПорядковыйНомерПерехода (обязательный) - Число. Порядковый номер перехода, который соответствует текущему шагу 
//  перехода
//  СтруктураПараметров - Структура, содержащая значения колонок в строке таблицы переходов
//  	ИмяОсновнойСтраницы - Строка. Имя страницы панели "ПанельОсновная", 
//		которая соответствует текущему номеру перехода
//
//  	ИмяСтраницыНавигации - Строка. Имя страницы панели "ПанельНавигации", 
//		которая соответствует текущему номеру перехода
//
//  	ИмяСтраницыДекорации - Строка. Имя страницы панели "ПанельДекорации", которая соответствует 
//  	текущему номеру перехода
//
//  	ИмяОбработчикаПриОткрытии - Строка. Имя функции-обработчика события открытия текущей страницы 
//  	помощника
//
//  	ИмяОбработчикаПриПереходеДалее - Строка. Имя функции-обработчика события перехода на следующую 
//  	страницу помощника
//
//  	ИмяОбработчикаПриПереходеНазад - Строка. Имя функции-обработчика события перехода на предыдущую 
//  	страницу помощника
// 
&НаСервере
Процедура ТаблицаПереходовНоваяСтрока(ПорядковыйНомерШага, СтруктураПараметров)
	НоваяСтрока = ТаблицаПереходов.Добавить();
	
	НоваяСтрока.ПорядковыйНомерПерехода = ПорядковыйНомерШага;
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПараметров);
	
	ПорядковыйНомерШага = ПорядковыйНомерШага + 1;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПереходПоТаблицеПереходов(ЭтоПереходДалее)
	Итератор = 0;
	
	Если ПорядковыйНомерПерехода > 0
		И ПорядковыйНомерПерехода <= ТаблицаПереходов.Количество() Тогда
	
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
		
		Если СтрокиПерехода.Количество() <> 1 Тогда
			// Ошибка в нумерации шагов таблицы переходов.
			Возврат;
		КонецЕсли;
		
		ВидОбработчика = ?(ЭтоПереходДалее, "ИмяОбработчикаПриПереходеДалее", "ИмяОбработчикаПриПереходеНазад");
		
		СтрокаПерехода = СтрокиПерехода[0];
		Если Не ПустаяСтрока(СтрокаПерехода[ВидОбработчика]) Тогда
			
			ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
			ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода[ВидОбработчика]);
			
			Отказ = Ложь;
			Попытка
				РезультатВычисления = Вычислить(ИмяПроцедуры);
			Исключение
				Информация = ИнформацияОбОшибке();
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = КраткоеПредставлениеОшибки(Информация);
				Сообщение.Сообщить();
				
				ТекстОшибки = ПодробноеПредставлениеОшибки(Информация);
				ЗаписатьОшибкуРаботыПомощника(ТекстОшибки);
				
				Отказ = Истина;
			КонецПопытки;
			
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоПереходДалее Тогда
		Для Сч = ПорядковыйНомерПерехода + 1 По ТаблицаПереходов.Количество() Цикл
			СтрокаПереходов = ТаблицаПереходов[Сч - 1];
			
			Итератор = Итератор + 1;
			
			Если СтрокаПереходов.ПропуститьШаг Тогда
				Продолжить;
			КонецЕсли;
			
			Прервать;
		КонецЦикла;
	Иначе
		Для Сч = -(ПорядковыйНомерПерехода - 1) По -1 Цикл
			СтрокаПереходов = ТаблицаПереходов[-Сч - 1];
			
			Итератор = Итератор - 1;
			
			Если СтрокаПереходов.ПропуститьШаг Тогда
				Продолжить;
			КонецЕсли;
			
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
	УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + Итератор);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПорядковыйНомерПерехода(Знач Значение)
	
	ЭтоПереходДалее = (Значение > ПорядковыйНомерПерехода);
	ПорядковыйНомерПерехода = Макс(0, Значение);
	ПорядковыйНомерПереходаПриИзменении(ЭтоПереходДалее);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерПереходаПриИзменении(ЭтоПереходДалее)
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода",
		ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() <> 1 Тогда
		// Ошибка в нумерации шагов таблицы переходов.
		Возврат;
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	// Обработчик ПриОткрытии
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПропуститьСтраницу, ЭтоПереходДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии);
		
		Отказ = Ложь;
		ПропуститьСтраницу = Ложь;
		
		Попытка
			РезультатВычисления = Вычислить(ИмяПроцедуры);
		Исключение
			Информация = ИнформацияОбОшибке();
				
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = КраткоеПредставлениеОшибки(Информация);
			Сообщение.Сообщить();
			
			ТекстОшибки = ПодробноеПредставлениеОшибки(Информация);
			ЗаписатьОшибкуРаботыПомощника(ТекстОшибки);
			
			Отказ = Истина;
		КонецПопытки;
		
		Если Отказ Тогда
			ВыполнитьПереходПоТаблицеПереходов(Ложь);
			Возврат;
		ИначеЕсли ПропуститьСтраницу Тогда
			ВыполнитьПереходПоТаблицеПереходов(ЭтоПереходДалее);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьОтображениеТекущейСтраницыПомощника(Элементы, СтрокаПереходаТекущая);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтображениеТекущейСтраницыПомощника(ЭлементыФормы, СтрокаПерехода)
	СтраницаДекорации = ЭлементыФормы.Найти(СтрокаПерехода.ИмяСтраницыДекорации);
	Если СтраницаДекорации <> Неопределено Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы,
			"ПанельДекорации",
			"ТекущаяСтраница",
			СтраницаДекорации);
	КонецЕсли;
	
	СтраницаОсновная = ЭлементыФормы.Найти(СтрокаПерехода.ИмяОсновнойСтраницы);
	Если СтраницаОсновная <> Неопределено Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы,
			"ПанельОсновная",
			"ТекущаяСтраница",
			СтраницаОсновная);
	КонецЕсли;
	
	СтраницаНавигации = ЭлементыФормы.Найти(СтрокаПерехода.ИмяСтраницыНавигации);
	Если СтраницаНавигации <> Неопределено Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы,
			"ПанельНавигации",
			"ТекущаяСтраница",
			СтраницаНавигации);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПеренумероватьЗаголовкиШагов()
	
	Нумератор = 0;
	Для Каждого СтрокаПереходов Из ТаблицаПереходов Цикл
		Если СтрокаПереходов.ПропуститьШаг
			Или СтрокаПереходов.ПропуститьНумерациюШага Тогда
			Продолжить;
		КонецЕсли;
		
		Нумератор = Нумератор + 1;
		ИмяЭлементаДекорации = "ДекорацияНомерШага" + СтрокаПереходов.ИмяОсновнойСтраницы;
		
		Если Элементы.Найти(ИмяЭлементаДекорации) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Элементы[ИмяЭлементаДекорации].Заголовок = НСтр("ru = 'Шаг'") + " " + Нумератор + ".";
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаДалее(Команда)
	Если ИспользуетсяКаталогПереноса и (Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.СтраницаВыборДанных
		или Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.СтраницаПошаговойЗагрузки) Тогда
		НачатьПроверкуСуществованияФайлаТекущийЭтап();
	Иначе
		ВыполнитьПереходПоТаблицеПереходов(Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	Если Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.СтраницаПошаговойЗагрузки Тогда
		УстановитьПорядковыйНомерПерехода(1);
	Иначе
		ВыполнитьПереходПоТаблицеПереходов(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаГотово(Команда)
	
	ВыполняетсяЗакрытие = Истина;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьНаКлиенте();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Процедура ЗаписатьОшибкуРаботыПомощника(ТекстОшибки)
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Помощник перехода с других конфигураций'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОписаниеДоступныхКонфигурацийИсточника()
	
	Если ПустаяСтрока(Объект.КонфигурацияИсточник) Тогда
		// Режим загрузки данных из произвольной доступной конфигурации.
		Заголовок = НСтр("ru = 'Помощник переноса данных из других конфигураций ""1С:Предприятие 8""'");
		
		ТекстОписание = "";
		КоличествоКонфигураций = ДоступныеКонфигурацииИсточника.Количество();
		
		Сч = 0;
		Для Каждого КонфигурацияИсточника Из ДоступныеКонфигурацииИсточника Цикл
			Сч = Сч + 1;
			
			Если Сч > 1 Тогда
				ТекстОписание = ТекстОписание + Символы.ПС;
			КонецЕсли;
			
			ТекстОписание = ТекстОписание + "  - " + КонфигурацияИсточника.Представление;
			
			Если Сч < КоличествоКонфигураций Тогда
				ТекстОписание = ТекстОписание + ";";
			Иначе
				ТекстОписание = ТекстОписание + ".";
			КонецЕсли;
		КонецЦикла;
		
		Элементы.Декорация1_1.Заголовок = НСтр("ru = 'Помощник позволит вам загрузить данные из конфигураций'");
		
		Элементы.Декорация1_2.Видимость = Истина;
		Элементы.Декорация1_2.Заголовок = ТекстОписание;
	Иначе
		// Режим загрузки данных из конкретной конфигурации.
		СинонимИсточника = "";
		
		ЭлементИсточник = ДоступныеКонфигурацииИсточника.НайтиПоЗначению(Объект.КонфигурацияИсточник);
		Если Не ЭлементИсточник = Неопределено Тогда
			СинонимИсточника = ЭлементИсточник.Представление;
		Иначе
			Возврат;
		КонецЕсли;
		
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Помощник переноса данных из ""%1""'"), СинонимИсточника);
			
		Элементы.Декорация1_1.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Помощник позволит вам загрузить данные из конфигурации ""%1"".'"), СинонимИсточника);
			
		Элементы.Декорация1_2.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоступныеКонфигурацииИсточника()
	
	ДоступныеКонфигурацииИсточника.Очистить();
	
	Если Объект.КонфигурацияПриемник = "УП"
		Или Объект.КонфигурацияПриемник = "КА" Тогда
		ДоступныеКонфигурацииИсточника.Добавить("УПП", НСтр("ru = '1С:Управление производственным предприятием, редакция 1.3'"));
		ДоступныеКонфигурацииИсточника.Добавить("КА",  НСтр("ru = '1С:Комплексная автоматизация, редакция 1.1'"));
		ДоступныеКонфигурацииИсточника.Добавить("ЗУП25", НСтр("ru = '1С:Зарплата и управление персоналом, редакция 2.5'"));
		ДоступныеКонфигурацииИсточника.Добавить("ЗУП31", НСтр("ru = '1С:Зарплата и управление персоналом, редакция 3.1'"));
	КонецЕсли;
	
	Если Объект.КонфигурацияПриемник = "УП"
		Или Объект.КонфигурацияПриемник = "КА"
		Или Объект.КонфигурацияПриемник = "УТ" Тогда
		ДоступныеКонфигурацииИсточника.Добавить("БП", НСтр("ru = '1С:Бухгалтерия предприятия, редакция 3.0'"));
		ДоступныеКонфигурацииИсточника.Добавить("УТ",  НСтр("ru = '1С:Управление торговлей, редакция 10.3'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяМакетаПравилПоКонфигурацииИсточника(КонфигурацияИсточника, ВидДанных)
	
	ИмяМакета = "";
	
	Если КонфигурацияИсточника = "БП" Тогда
		ИмяМакета = "ПравилаОбменаБП";
	ИначеЕсли ВидДанных = "ОД" Тогда
		Если КонфигурацияИсточника = "УПП"
			Или КонфигурацияИсточника = "КА" Тогда
			ИмяМакета = "ПравилаОбменаУПП";
		ИначеЕсли КонфигурацияИсточника = "УТ" Тогда
			ИмяМакета = "ПравилаОбменаУТ";
		ИначеЕсли КонфигурацияИсточника = "ЗУП25" Тогда
			ИмяМакета = "ПравилаОбменаЗУП";
		ИначеЕсли КонфигурацияИсточника = "ЗУП31" Тогда
			ИмяМакета = "ПравилаОбменаЗУП31";
		КонецЕсли;
	ИначеЕсли ВидДанных = "ЗУП" Тогда
		Если КонфигурацияИсточника = "УПП"
			Или КонфигурацияИсточника = "КА" Тогда
			ИмяМакета = "ПравилаОбменаЗУП";
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИмяМакета;
	
КонецФункции

&НаСервере
Процедура УстановитьЗаголовкиКонфигурацииПриемника(Элемент)
	
	Элементы[Элемент].Заголовок = 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Элементы[Элемент].Заголовок, МетаданныеСиноним);

КонецПроцедуры

&НаСервере
Процедура ИнициализироватьИменаФайловПереноса()
	
	ПрефиксФайловНастроек = "ConvSettings_";
	
	ИменаФайловПереноса = Новый Структура;
	ИменаФайловПереноса.Вставить("ПрефиксФайловНастроек", ПрефиксФайловНастроек);
	ИменаФайловПереноса.Вставить("Основные",              ПрефиксФайловНастроек + "Main.xml");
	ИменаФайловПереноса.Вставить("ПараметрыУчета",        ПрефиксФайловНастроек + "AccParameters.xml");
	ИменаФайловПереноса.Вставить("Справочники",           ПрефиксФайловНастроек + "Catalogs.xml");
	ИменаФайловПереноса.Вставить("Остатки",               ПрефиксФайловНастроек + "Balance.xml");
	ИменаФайловПереноса.Вставить("ВыгруженныеДанные",     "UnloadedData.zip");
	ИменаФайловПереноса.Вставить("КвитанцияОПолучении",   "Receipt.xml");
	ИменаФайловПереноса.Вставить("ТекущийЭтап",           "current_stage.xml");
	
КонецПроцедуры

&НаСервере
Процедура ЗаголовокЦенообразования(Редакция)
	
	Если НЕ ИспользуетсяЦенообразование25 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Строка0 = НСтр("ru = 'Загрузка данных в конфигурацию не возможна, так как включено ценообразование версии %N.5.'",
					ОбщегоНазначения.КодОсновногоЯзыка());
	Строка1 = НСтр("ru = 'Для корректного перехода с других конфигураций необходимо использовать ценообразование версии %N.0.'",
					ОбщегоНазначения.КодОсновногоЯзыка());
	Строка2 = НСтр("ru = 'Переключить ценообразование на версию %N.0'", ОбщегоНазначения.КодОсновногоЯзыка());
	Строка3 = НСтр("ru = 'После загрузки данных можно будет вернуться на ценообразование версии %N.5.
					|Помощник переключения версии ценообразования расположен в разделе'", ОбщегоНазначения.КодОсновногоЯзыка());
	Строка4 = НСтр("ru = ' НСИ и Администрирование'", ОбщегоНазначения.КодОсновногоЯзыка());
	Строка5 = НСтр("ru = ', меню'", ОбщегоНазначения.КодОсновногоЯзыка());
	Строка6 = НСтр("ru = ' CRM и маркетинг'", ОбщегоНазначения.КодОсновногоЯзыка());
	Строка7 = НСтр("ru = ', группа'", ОбщегоНазначения.КодОсновногоЯзыка());
	Строка8 = НСтр("ru = ' Маркетинг.'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	ЖирныйШрифт = Новый Шрифт(, , Истина);
	ФорматированныеСтроки = Новый Массив;
	
	Строка0 = СтрЗаменить(Строка0, "%N", Редакция);
	Строка1 = СтрЗаменить(Строка1, "%N", Редакция);
	Строка2 = СтрЗаменить(Строка2, "%N", Редакция);
	Строка3 = СтрЗаменить(Строка3, "%N", Редакция);
	
	ФорматированныеСтроки.Добавить(Новый ФорматированнаяСтрока(Строка0));
	ФорматированныеСтроки.Добавить(Новый ФорматированнаяСтрока(Символы.ПС));
	ФорматированныеСтроки.Добавить(Новый ФорматированнаяСтрока(Символы.ПС));
	ФорматированныеСтроки.Добавить(Новый ФорматированнаяСтрока(Строка1));
	ФорматированныеСтроки.Добавить(Новый ФорматированнаяСтрока(Символы.ПС));
	ФорматированныеСтроки.Добавить(Новый ФорматированнаяСтрока(Строка2, , , , "SwitchPricing"));
	ФорматированныеСтроки.Добавить(Новый ФорматированнаяСтрока(Символы.ПС));
	ФорматированныеСтроки.Добавить(Новый ФорматированнаяСтрока(Символы.ПС));
	ФорматированныеСтроки.Добавить(Новый ФорматированнаяСтрока(Строка3));
	ФорматированныеСтроки.Добавить(Новый ФорматированнаяСтрока(Строка4, ЖирныйШрифт));
	ФорматированныеСтроки.Добавить(Новый ФорматированнаяСтрока(Строка5));
	ФорматированныеСтроки.Добавить(Новый ФорматированнаяСтрока(Строка6, ЖирныйШрифт));
	ФорматированныеСтроки.Добавить(Новый ФорматированнаяСтрока(Строка7));
	ФорматированныеСтроки.Добавить(Новый ФорматированнаяСтрока(Строка8, ЖирныйШрифт));
	
	Элементы.ДекорацияПредварительно2.Заголовок = Новый ФорматированнаяСтрока(ФорматированныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТаблицуПереходов()
	
	ТаблицаПереходовПоСценарию();
	ПеренумероватьЗаголовкиШагов();
	
КонецПроцедуры

&НаКлиенте
Функция СостояниеЭтапаВОчереди()
	Возврат "ВОчереди";
КонецФункции

&НаКлиенте
Функция СостояниеЭтапаВыполняется()
	Возврат "Выполняется";
КонецФункции

&НаКлиенте
Функция СостояниеЭтапаОшибка()
	Возврат "Ошибка";
КонецФункции

&НаКлиенте
Функция СостояниеЭтапаУспех()
	Возврат "Успех";
КонецФункции

&НаКлиенте
Процедура ИнициализацияЭтаповЗагрузки()
	
	// Значение списка - идентификатор этапа, представление - состояние этапа.
	СписокЭтапов.Очистить();
	
	СписокЭтапов.Добавить("Выгрузка", СостояниеЭтапаВОчереди());
	СписокЭтапов.Добавить("Загрузка", СостояниеЭтапаВОчереди());
	СписокЭтапов.Добавить("Проверка", СостояниеЭтапаВОчереди());
	
КонецПроцедуры

&НаКлиенте
Процедура Перерисовать()
	
	ЗакладкиСостояний = Новый Структура;
	ЗакладкиСостояний.Вставить(СостояниеЭтапаВОчереди(),    "НеВыполняется");
	ЗакладкиСостояний.Вставить(СостояниеЭтапаВыполняется(), "Выполняется");
	ЗакладкиСостояний.Вставить(СостояниеЭтапаОшибка(),      "Выполнено");
	ЗакладкиСостояний.Вставить(СостояниеЭтапаУспех(),       "Выполнено");
	
	НомераСостояний = Новый Структура;
	НомераСостояний.Вставить(СостояниеЭтапаВОчереди(),    1);
	НомераСостояний.Вставить(СостояниеЭтапаВыполняется(), 2);
	НомераСостояний.Вставить(СостояниеЭтапаОшибка(),      3);
	НомераСостояний.Вставить(СостояниеЭтапаУспех(),       4);
	
	СброситьВидимость = Ложь;
	
	Для Каждого Этап Из СписокЭтапов Цикл
		ИмяЭтапа  = Этап.Значение;
		Состояние = Этап.Представление;
		
		Если ИмяЭтапа = "Проверка" Тогда
			Если Не Объект.КонфигурацияИсточник = "УПП"
				И Не Объект.КонфигурацияИсточник = "КА" Тогда
				СброситьВидимость = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Элементы[ИмяЭтапа].ТекущаяСтраница = Элементы[ИмяЭтапа + Формат(НомераСостояний[Состояние], "ЧГ=0")];
		Элементы[ИмяЭтапа + "Надпись"].ТекущаяСтраница = Элементы[ИмяЭтапа + "Надпись" + ЗакладкиСостояний[Состояние]];
		
		Если СброситьВидимость Тогда
			Элементы["Группа" + ИмяЭтапа].Видимость = Ложь;
		Иначе
			Элементы["Группа" + ИмяЭтапа].Видимость = Истина;
			Если Состояние = СостояниеЭтапаВыполняется()
				Или Состояние = СостояниеЭтапаОшибка()
				Или Состояние = СостояниеЭтапаВОчереди() Тогда
				СброситьВидимость = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеТекущегоЭтапа(Состояние)
	
	ЭлементЭтап = СписокЭтапов.НайтиПоЗначению(ТекущийЭтап);
	Если Не ЭлементЭтап = Неопределено Тогда
		ЭлементЭтап.Представление = Состояние;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СостояниеТекущегоЭтапа()
	
	Состояние = Неопределено;
	
	ЭлементЭтап = СписокЭтапов.НайтиПоЗначению(ТекущийЭтап);
	Если Не ЭлементЭтап = Неопределено Тогда
		Состояние = ЭлементЭтап.Представление;
	КонецЕсли;
	
	Возврат Состояние;
	
КонецФункции

&НаСервере
Процедура ОбработатьФайлПротокола(ФайлПротокола)
	
	Если АвтоТестОбмена Тогда
		ТекстПротокола = ФайлПротокола.ПолучитьТекст();
		Разделитель = ?(СтрНайти(ТекстПротокола, "Ошибка!") > 0, "Ошибка!", "Ошибка.");
		МассивОшибок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекстПротокола, Разделитель, Истина);
		Для Каждого ОписаниеОшибки Из МассивОшибок Цикл
			ЗафиксироватьОшибку(ЭтотОбъект, ОписаниеОшибки, "");
		КонецЦикла;
	Иначе
		СтрокиПоиска = Новый Массив;
		СтрокиПоиска.Добавить(НСтр("ru = 'Начало выгрузки'"));
		СтрокиПоиска.Добавить(ВРег(НСтр("ru = 'Правило выгрузки данных'")));
		СтрокиПоиска.Добавить(ВРег(НСтр("ru = 'Выгрузка объекта'")));
		СтрокиПоиска.Добавить(НСтр("ru = 'Конвертация объекта'"));
		СтрокиПоиска.Добавить(НСтр("ru = 'Ошибка'") + ".");
		СтрокиПоиска.Добавить(НСтр("ru = 'Окончание выгрузки'"));
		СтрокиПоиска.Добавить(НСтр("ru = 'Ошибка'") + "!!!");
		СтрокиПоиска.Добавить(НСтр("ru = 'ИмяПКО'"));
		СтрокиПоиска.Добавить(НСтр("ru = 'ТипОбъекта'"));
		СтрокиПоиска.Добавить(НСтр("ru = 'КодСообщения'"));
		СтрокиПоиска.Добавить(НСтр("ru = 'Загрузка объекта'"));
		
		КоличествоСтрокПоиска = СтрокиПоиска.Количество();
		
		Для Номер = 1 По ФайлПротокола.КоличествоСтрок() Цикл
			СтрокаРезультата = СокрЛП(ФайлПротокола.ПолучитьСтроку(Номер));
			
			Если ПустаяСтрока(СтрокаРезультата) Тогда
				Продолжить;
			КонецЕсли;
			
			НашлиСтроку = Ложь;
			Для Сч = 0 По КоличествоСтрокПоиска - 1 Цикл
				Если СтрНайти(СтрокаРезультата, СтрокиПоиска[Сч]) = 1 Тогда
					НашлиСтроку = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если НашлиСтроку Тогда
				Продолжить;
			КонецЕсли;
			
			ТекстОшибок = СтрокаРезультата;
			ЗафиксироватьОшибку(ЭтотОбъект, ТекстОшибок, "", Ложь);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗафиксироватьОшибку(Форма, ТекстОшибки, ТекстРекомендации = "", ВажнаяОшибка = Истина)
	
	Этап = Форма.ТекущийЭтап;
	Автотест = Форма.АвтоТестОбмена;
	Если ЗначениеЗаполнено(Этап) И Не Автотест
		Или Автотест И ВажнаяОшибка Тогда
		НоваяОшибка = Форма.ТаблицаОшибок.Добавить();
		НоваяОшибка.Этап         = Этап;
		НоваяОшибка.Ошибка       = ТекстОшибки;
		НоваяОшибка.Рекомендации = ТекстРекомендации;
		НоваяОшибка.Расшифровка  = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьОтчетОбОшибках()
	
	ОтчетОбОшибках = Новый ТабличныйДокумент;
	ПодготовитьОтчетОбОшибкахСервер(ОтчетОбОшибках);
	
	ОтчетОбОшибках.ТолькоПросмотр      = Истина;
	ОтчетОбОшибках.ОтображатьЗаголовки = Ложь;
	ОтчетОбОшибках.ОтображатьСетку     = Ложь;
	
	ОтчетОбОшибках.Показать(НСтр("ru = 'Список комментариев и ошибок'"));
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьОтчетОбОшибкахСервер(ОтчетОбОшибках)
	
	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("СписокОшибок");
	
	ОбластьШапка             = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока            = Макет.ПолучитьОбласть("Строка");
	ОбластьЗаголовокВыгрузка = Макет.ПолучитьОбласть("ЗаголовокВыгрузка");
	ОбластьЗаголовокЗагрузка = Макет.ПолучитьОбласть("ЗаголовокЗагрузка");
	ОбластьЗаголовокПроверка = Макет.ПолучитьОбласть("ЗаголовокПроверка");
	ОбластьШапкаТаблицы      = Макет.ПолучитьОбласть("ШапкаТаблицы");
	
	КонфигурацияИсточника = ДоступныеКонфигурацииИсточника.НайтиПоЗначению(Объект.КонфигурацияИсточник);
	Если Не КонфигурацияИсточника = Неопределено Тогда
		ОбластьШапка.Параметры.ИмяИБ = КонфигурацияИсточника.Представление;
	КонецЕсли;
	
	ОбластьШапка.Параметры.ПутьКИБ = Объект.ИмяФайлаДанных;
	
	ОтчетОбОшибках.Вывести(ОбластьШапка);
	
	ВыведенЗаголовокВыгрузки = Ложь;
	ВыведенЗаголовокЗагрузки = Ложь;
	
	Для Каждого СтрокаТаблицы Из ТаблицаОшибок Цикл
		Если Не ВыведенЗаголовокВыгрузки
			И СтрНайти(СтрокаТаблицы.Этап, "Выгрузка") > 0 Тогда
			ОтчетОбОшибках.Вывести(ОбластьЗаголовокВыгрузка);
			ОтчетОбОшибках.Вывести(ОбластьШапкаТаблицы);
			ВыведенЗаголовокВыгрузки = Истина;
		КонецЕсли;
		
		Если Не ВыведенЗаголовокЗагрузки
			И СтрНайти(СтрокаТаблицы.Этап, "Загрузка") > 0 Тогда
			ОтчетОбОшибках.Вывести(ОбластьЗаголовокЗагрузка);
			ОтчетОбОшибках.Вывести(ОбластьШапкаТаблицы);
			ВыведенЗаголовокЗагрузки = Истина;
		КонецЕсли;
					
		ОбластьСтрока.Параметры.Ошибка = СтрокаТаблицы.Ошибка;
		
		ОтчетОбОшибках.Вывести(ОбластьСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикВыбораДанныхЗавершение(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ИмяСвойства = ДополнительныеПараметры.ИмяСвойства;
	
	ПараметрыДиалога = ДополнительныеПараметры.ПараметрыДиалога;
	Диалог = Новый ДиалогВыбораФайла(ПараметрыДиалога.РежимДиалога);
	ЗаполнитьЗначенияСвойств(Диалог, ПараметрыДиалога);
	
	Диалог.ПолноеИмяФайла = Объект[ИмяСвойства];
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьДанныеЗавершениеОтображенияДиалогаВыбораФайла", ЭтотОбъект, ДополнительныеПараметры);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьДанныеЗавершениеОтображенияДиалогаВыбораФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		Объект[ДополнительныеПараметры.ИмяСвойства] = ВыбранныеФайлы[0];
		
		Если ИспользуетсяКаталогПереноса Тогда
			ОбработатьИзменениеКаталогаПереноса();
		КонецЕсли;
		
		ЭтаФорма.ОбновитьОтображениеДанных();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеКаталогаПереноса()
	
	Объект.КаталогПереноса = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Объект.КаталогПереноса);
	Объект.ИмяФайлаДанных  = Объект.КаталогПереноса + ИменаФайловПереноса.ВыгруженныеДанные;
	
КонецПроцедуры

&НаКлиенте
Процедура ПомещениеФайлаВХранилищеНачать()
	
	ОбработчикПомещенияФайла = Новый ОписаниеОповещения("ПомещениеФайлаВХранилищеЗавершить", ЭтотОбъект);
		
	Попытка
		НачатьПомещениеФайла(ОбработчикПомещенияФайла, , Объект.ИмяФайлаДанных, Ложь, УникальныйИдентификатор);
	Исключение
		ТекстСообщения = НСтр("ru = 'При помещении файлов во временное хранилище произошла ошибка'")
			+ ":" + Символы.ПС + ОписаниеОшибки();
		ЗафиксироватьОшибку(ЭтотОбъект, ТекстСообщения);
		
		ОбновитьСостояниеТекущегоЭтапа(СостояниеЭтапаОшибка());
		ЗагрузкаДанныхИзФайлаЗакончить();
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПомещениеФайлаВХранилищеЗавершить(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;
	ТекстСообщения = "";
	ТекстПояснения = "";
	
	Если Не ПустаяСтрока(Адрес) Тогда
		
		АдресДанныхДляЗагрузки = Адрес;
		ПроверитьАрхивСДанными(Отказ, ТекстСообщения);
		
		Если Не Отказ Тогда
			
			ОбновитьСостояниеТекущегоЭтапа(СостояниеЭтапаУспех());
			Перерисовать();
			
			ПодключитьОбработчикОжидания("ЗагрузкаДанныхИзФайлаНачать", 0.5, Истина);
			
		Иначе
			
			ТекстПояснения = НСтр("ru = 'Проверьте корректность содержимого файла с данными'") + ".";
			
		КонецЕсли;
		
	Иначе
		
		Отказ = Истина;
		ТекстСообщения = Нстр("ru = 'Не удалось получить данные для загрузки'") + ".";
		ТекстПояснения = НСтр("ru = 'Укажите корректный путь к файлу данных'") + ".";
		
	КонецЕсли;
	
	Если Отказ Тогда
		
		ЗафиксироватьОшибку(ЭтотОбъект, ТекстСообщения, ТекстПояснения);
		
		ОбновитьСостояниеТекущегоЭтапа(СостояниеЭтапаОшибка());
		ЗагрузкаДанныхИзФайлаЗакончить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхИзФайлаНачать()
	
	ТекущийЭтап = "Загрузка";
	ОбновитьСостояниеТекущегоЭтапа(СостояниеЭтапаВыполняется());
	Перерисовать();
	
	Элементы.ГруппаРезультат.Видимость         = Истина;
	Элементы.СтраницыРезультат.ТекущаяСтраница = Элементы.ПроцессФайл;
	
	ПодключитьОбработчикОжидания("ЗагрузкаДанныхИзФайлаВыполнитьВФоне", 0.5, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхИзФайлаВыполнитьВФоне()
	
	Результат = РезультатЗагрузкиДанныхВДлительнойОперации();
	
	Если Результат.Статус = "Выполнено" Тогда
		
		РезультатыВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
		ИдентификаторЗадания = Неопределено;
		ЗагрузкаДанныхИзФайлаЗакончить(РезультатыВыполнения);
		
	Иначе
		
		ИдентификаторЗадания			= Результат.ИдентификаторЗадания;
		АдресХранилища					= Результат.АдресРезультата;
		АдресХранилищаДополнительный	= Результат.АдресДополнительногоРезультата;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхИзФайлаЗакончить(РезультатыВыполнения = Неопределено)
	
	Если Не РезультатыВыполнения = Неопределено Тогда
		Ошибка = Ложь;
		
		Для Каждого РезультатВыполнения Из РезультатыВыполнения Цикл
		
			Если РезультатВыполнения.Ошибка Тогда
				Ошибка = Истина;
			КонецЕсли;
		
			ОбработатьФайлПротокола(РезультатВыполнения.ПротоколОбмена);
		КонецЦикла;
		
		Если Ошибка Тогда
			ОбновитьСостояниеТекущегоЭтапа(СостояниеЭтапаОшибка());
		Иначе
			ОбновитьСостояниеТекущегоЭтапа(СостояниеЭтапаУспех());
			
			Если ТекущийЭтап = "Загрузка" Тогда
				Если (Объект.КонфигурацияИсточник = "УПП"
						Или Объект.КонфигурацияИсточник = "КА") Тогда
					ТекущийЭтап = "Проверка";
					ОбновитьСостояниеТекущегоЭтапа(СостояниеЭтапаУспех());
					 
				//++ Локализация
				
				
				//-- Локализация
				
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ПанельНавигации.Доступность = Истина;
	Элементы.ГруппаРезультат.Видимость   = Истина;
	
	Перерисовать();
	
	Если Не СостояниеТекущегоЭтапа() = "Ошибка" Тогда
		Элементы.СтраницыРезультат.ТекущаяСтраница = Элементы.Успех;
		
		Если ТаблицаОшибок.Количество() > 0 Тогда
			Элементы.ГиперссылкаПротокол.Видимость = Истина;
			Элементы.ГиперссылкаПротокол.Заголовок = НСтр("ru = 'Протокол загрузки данных'")
				+ " " + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '(сообщений: %1)'"), ТаблицаОшибок.Количество());
		Иначе
			Элементы.ГиперссылкаПротокол.Видимость = Ложь;
			Элементы.ГиперссылкаПротокол.Заголовок = НСтр("ru = 'Протокол загрузки данных'");
		КонецЕсли;
			
		Если ИспользуетсяКаталогПереноса Тогда
			ЗаписатьКвитанцию();	
		КонецЕсли;
	Иначе
		Элементы.СтраницыРезультат.ТекущаяСтраница = Элементы.Ошибки;
		
		Если ТаблицаОшибок.Количество() > 0 Тогда
			Элементы.ГиперссылкаОшибки.Видимость = Истина;
			Элементы.ГиперссылкаОшибки.Заголовок = НСтр("ru = 'Список комментариев и ошибок'")
			+ " " + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '(сообщений: %1)'"), ТаблицаОшибок.Количество());
		Иначе
			Элементы.ГиперссылкаОшибки.Видимость = Ложь;
			Элементы.ГиперссылкаОшибки.Заголовок = НСтр("ru = 'Список комментариев и ошибок'");
		КонецЕсли;
	КонецЕсли;
	
	Если АвтоТестОбмена Тогда
		АвтотестЗавершить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьАрхивСДанными(Отказ, ТекстСообщения)
	
	ЭтапыЗагрузки.Очистить();
	
	ИмяФайлаАрхива = ПолучитьИмяВременногоФайлаОбмена();
	
	ДанныеФайла = ПолучитьИзВременногоХранилища(АдресДанныхДляЗагрузки);
	ДанныеФайла.Записать(ИмяФайлаАрхива);
	
	Архив = Новый ЧтениеZipФайла(ИмяФайлаАрхива);
	
	Для Каждого ЭлементАрхива Из Архив.Элементы Цикл
		Если ЭлементАрхива.Расширение <> "xml" Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяФайла = ЭлементАрхива.Имя;
		
		ИсточникНайден     = Ложь;
		ИмяМакетаПравил    = "";
		ПредставлениеЭтапа = "";
		
		Если ПустаяСтрока(Объект.КонфигурацияИсточник) Тогда
			Для Каждого КонфигурацияИсточника Из ДоступныеКонфигурацииИсточника Цикл
				
				СоответствиеНаименованийКонфигураций = СоответствиеНаименованийКонфигураций();
				
				ПодстрокаПоиска          = КонфигурацияИсточника.Значение + Объект.КонфигурацияПриемник;
				ПодстрокаПоискаЛатиницей = СоответствиеНаименованийКонфигураций[КонфигурацияИсточника.Значение]
											+ СоответствиеНаименованийКонфигураций[Объект.КонфигурацияПриемник];
					
				Если СтрНайти(ИмяФайла, ПодстрокаПоиска + "_ОД") = 1 
					Или СтрНайти(ИмяФайла, ПодстрокаПоиска + "_OD") = 1 
					Или СтрНайти(ИмяФайла, ПодстрокаПоискаЛатиницей + "_OD") = 1 Тогда
					Объект.КонфигурацияИсточник = КонфигурацияИсточника.Значение;
					ИсточникНайден     = Истина;
					ИмяМакетаПравил    = ИмяМакетаПравилПоКонфигурацииИсточника(КонфигурацияИсточника.Значение, "ОД");
					ПредставлениеЭтапа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Загрузка основных данных из конфигурации %1'"), КонфигурацияИсточника.Представление);
					Прервать;
				ИначеЕсли СтрНайти(ИмяФайла, ПодстрокаПоиска + "_ЗУП") = 1
					Или СтрНайти(ИмяФайла, ПодстрокаПоиска + "_ZUP") = 1 
					Или СтрНайти(ИмяФайла, ПодстрокаПоискаЛатиницей + "_ZUP") = 1 Тогда
					Объект.КонфигурацияИсточник = КонфигурацияИсточника.Значение;
					ИсточникНайден     = Истина;
					ИмяМакетаПравил    = ИмяМакетаПравилПоКонфигурацииИсточника(КонфигурацияИсточника.Значение, "ЗУП");
					ПредставлениеЭтапа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Загрузка кадровых и зарплатных данных из конфигурации %1'"), КонфигурацияИсточника.Представление);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			СоответствиеНаименованийКонфигураций = СоответствиеНаименованийКонфигураций();
			КонфигурацияИсточника = ДоступныеКонфигурацииИсточника.НайтиПоЗначению(Объект.КонфигурацияИсточник);
			
			ПодстрокаПоиска          = Объект.КонфигурацияИсточник + Объект.КонфигурацияПриемник;
			ПодстрокаПоискаЛатиницей = СоответствиеНаименованийКонфигураций[Объект.КонфигурацияИсточник]
										+ СоответствиеНаименованийКонфигураций[Объект.КонфигурацияПриемник];
			
			Если СтрНайти(ИмяФайла, ПодстрокаПоиска + "_ОД") = 1
				Или СтрНайти(ИмяФайла, ПодстрокаПоиска + "_OD") = 1
				Или СтрНайти(ИмяФайла, ПодстрокаПоискаЛатиницей + "_OD") = 1 Тогда
				ИсточникНайден     = Истина;
				ИмяМакетаПравил    = ИмяМакетаПравилПоКонфигурацииИсточника(Объект.КонфигурацияИсточник, "ОД");
				ПредставлениеЭтапа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Загрузка основных данных из конфигурации %1'"), КонфигурацияИсточника.Представление);
			ИначеЕсли СтрНайти(ИмяФайла, ПодстрокаПоиска + "_ЗУП") = 1
				Или СтрНайти(ИмяФайла, ПодстрокаПоиска + "_ZUP") = 1
				Или СтрНайти(ИмяФайла, ПодстрокаПоискаЛатиницей + "_ZUP") = 1 Тогда
				ИсточникНайден     = Истина;
				ИмяМакетаПравил    = ИмяМакетаПравилПоКонфигурацииИсточника(Объект.КонфигурацияИсточник, "ЗУП");
				ПредставлениеЭтапа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Загрузка кадровых и зарплатных данных из конфигурации %1'"), КонфигурацияИсточника.Представление);
			ИначеЕсли СтрНайти(ИмяФайла, ПодстрокаПоиска + "_Н") = 1
				// Поиск сначала по русской букве, затем по латинице.
				Или СтрНайти(ИмяФайла, ПодстрокаПоиска + "_H") = 1
				Или СтрНайти(ИмяФайла, ПодстрокаПоискаЛатиницей + "_H") = 1 Тогда
				ИсточникНайден     = Истина;
				ИмяМакетаПравил    = ИмяМакетаПравилПоКонфигурацииИсточника(Объект.КонфигурацияИсточник, "Н");
				ПредставлениеЭтапа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Загрузка настроек учета из конфигурации %1'"), КонфигурацияИсточника.Представление);
			ИначеЕсли СтрНайти(ИмяФайла, ПодстрокаПоиска + "_С") = 1
				// Поиск сначала по русской букве, затем по латинице. 
				Или СтрНайти(ИмяФайла, ПодстрокаПоиска + "_C") = 1
				Или СтрНайти(ИмяФайла, ПодстрокаПоискаЛатиницей + "_C") = 1 Тогда
				ИсточникНайден     = Истина;
				ИмяМакетаПравил    = ИмяМакетаПравилПоКонфигурацииИсточника(Объект.КонфигурацияИсточник, "С");
				ПредставлениеЭтапа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Загрузка справочников из конфигурации %1'"), КонфигурацияИсточника.Представление);
			ИначеЕсли СтрНайти(ИмяФайла, ПодстрокаПоиска + "_О") = 1 
				// Поиск сначала по русской букве, затем по латинице. 
				Или СтрНайти(ИмяФайла, ПодстрокаПоиска + "_O") = 1
				Или СтрНайти(ИмяФайла, ПодстрокаПоискаЛатиницей + "_O") = 1 Тогда
				ИсточникНайден     = Истина;
				ИмяМакетаПравил    = ИмяМакетаПравилПоКонфигурацииИсточника(Объект.КонфигурацияИсточник, "О");
				ПредставлениеЭтапа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Загрузка остатков из конфигурации %1'"), КонфигурацияИсточника.Представление);
			КонецЕсли;
		КонецЕсли;
		
		Если РазделениеВключено И Не ЗначениеЗаполнено(ИмяМакетаПравил)
			Или Не ИсточникНайден Тогда
			Отказ = Истина;
		КонецЕсли;
		
		Если Отказ Тогда
			ТекстСообщения = НСтр("ru = 'Ошибка формата файла. Выберите корректный файл с данными для загрузки.'");
			Прервать;
		Иначе
			ЭтапЗагрузки = Новый Структура;
			ЭтапЗагрузки.Вставить("ИмяФайлаДляЗагрузки", ЭлементАрхива.Имя);
			ЭтапЗагрузки.Вставить("ПредставлениеЭтапа",  ПредставлениеЭтапа);
			ЭтапЗагрузки.Вставить("ИмяМакетаПравил",     ИмяМакетаПравил);
			
			ЭтапыЗагрузки.Добавить(ЭтапЗагрузки);
		КонецЕсли;
	КонецЦикла;
	
	Если Не Отказ И ЭтапыЗагрузки.Количество() = 0 Тогда
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'Ошибка формата файла. Выберите корректный файл с данными для загрузки.'");
	КонецЕсли;
	
	Если Не Отказ Тогда
		АдресВременногоФайлаСервер = ИмяФайлаАрхива;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РезультатЗагрузкиДанныхВДлительнойОперации()
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ЭтапыЗагрузки",               ЭтапыЗагрузки);
	ПараметрыПроцедуры.Вставить("Источник",                    Объект.КонфигурацияИсточник);
	ПараметрыПроцедуры.Вставить("Приемник",                    Объект.КонфигурацияПриемник);
	ПараметрыПроцедуры.Вставить("БезопаснаяЗагрузка",          РазделениеВключено);
	ПараметрыПроцедуры.Вставить("АвтотестОбмена",              АвтоТестОбмена);
	ПараметрыПроцедуры.Вставить("ПорядковыйНомерПерехода",     ПорядковыйНомерПерехода);
	Если ИспользуетсяКаталогПереноса Тогда
		ПараметрыПроцедуры.Вставить("ДанныеКвитанции");
		Если ЗначениеЗаполнено(АдресФайлаКвитанции) Тогда
			ПараметрыПроцедуры.ДанныеКвитанции = ПолучитьИзВременногоХранилища(АдресФайлаКвитанции);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(АдресВременногоФайлаСервер) Тогда
		АдресВременногоФайлаСервер = ПолучитьИмяВременногоФайлаОбмена();
	КонецЕсли;
	
	ВременныйФайлСервер = Новый Файл(АдресВременногоФайлаСервер);
	Если НЕ ВременныйФайлСервер.Существует() Тогда
		ДанныеФайла = ПолучитьИзВременногоХранилища(АдресДанныхДляЗагрузки);
		ДанныеФайла.Записать(АдресВременногоФайлаСервер);
	КонецЕсли;
	
	ПараметрыПроцедуры.Вставить("ДанныеДляЗагрузки",  АдресВременногоФайлаСервер);
	
	Если Не ПустаяСтрока(Объект.КонфигурацияИсточник) Тогда
		КонфигурацияИсточника = ДоступныеКонфигурацииИсточника.НайтиПоЗначению(Объект.КонфигурацияИсточник);
		
		НаименованиеЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Перенос данных из конфигурации ""%1""'"), КонфигурацияИсточника.Представление);
	Иначе
		НаименованиеЗадания = НСтр("ru = 'Перенос данных из другой конфигурации ""1С:Предприятие 8""'");
	КонецЕсли;
	
	ИмяПроцедуры = "Обработки.ПомощникПереходаСДругихКонфигураций.ЗагрузитьДанные";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ДополнительныйРезультат     = Истина;
	
	Результат = ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыПроцедуры, ПараметрыВыполнения);
	
	АдресХранилища 					= Результат.АдресРезультата;
	АдресХранилищаДополнительный	= Результат.АдресДополнительногоРезультата;
	
	Возврат Результат;
	
КонецФункции

// Унифицированная процедура проверки выполнения фонового задания.
//
&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
			
			РезультатыВыполнения  = ПолучитьИзВременногоХранилища(АдресХранилища);
			ИдентификаторЗадания = Неопределено;
			ЗагрузкаДанныхИзФайлаЗакончить(РезультатыВыполнения);
			
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал,
				Истина);
		КонецЕсли;
	Исключение
		ЗафиксироватьОшибку(ЭтаФорма, ОписаниеОшибки());
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИмяВременногоФайлаОбмена()
	
	// Используем механизмы БСП для получения имени временного файла
	// вместо "ПолучитьИмяВременногоФайла", т.к. при использовании кластера
	// серверов имя может быть сформировано некорректно.
	ИмяВременногоФайла = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
		ОбменДаннымиПовтИсп.КаталогВременногоХранилищаФайлов(),
		"Message{"+Строка(Новый УникальныйИдентификатор)+"}.zip");
		
	Возврат ИмяВременногоФайла;	
		
КонецФункции

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОтменитьВыполнениеЗадания(ИдентификаторЗадания)
	
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	
	Если Задание <> Неопределено Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Автотест()
	
	Попытка
		ИнициализацияЭтаповЗагрузки();
		ЗагрузкаДанныхИзФайлаНачать();
	Исключение
		ЗафиксироватьОшибку(ЭтаФорма, ОписаниеОшибки());
		АвтотестЗавершить();
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтотестЗавершить()
	
	Если ТипЗнч(ЭтотОбъект.ОписаниеОповещенияОЗакрытии) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ЭтотОбъект.ОписаниеОповещенияОЗакрытии, ТаблицаОшибок);
		ЭтотОбъект.ОписаниеОповещенияОЗакрытии = Неопределено;
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНаКлиенте()
	
	НачатьПроверкуСуществованияФайлаДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПроверкуСуществованияФайлаТекущийЭтап(ЭтоПереходДалее = Истина)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЭтоПереходДалее", ЭтоПереходДалее);
	
	Файл = Новый Файл(Объект.КаталогПереноса + ИменаФайловПереноса.ТекущийЭтап);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьПроверкуСуществованияФайлаТекущийЭтап", ЭтаФорма, ДополнительныеПараметры);
	Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПроверкуСуществованияФайлаТекущийЭтап(Существует, ДополнительныеПараметры) Экспорт
	
	Если Существует Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьПомещениеФайлаТекущийЭтап", ЭтаФорма, ДополнительныеПараметры);
		НачатьПомещениеФайла(ОписаниеОповещения, , Объект.КаталогПереноса + ИменаФайловПереноса.ТекущийЭтап,
			Ложь, УникальныйИдентификатор);
	ИначеЕсли ДополнительныеПараметры.ЭтоПереходДалее Тогда
		Если Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.СтраницаВыборДанных Тогда
			ВыполнитьПереходПоТаблицеПереходов(Истина);
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'Файл с данными не соответствует этапу переноса! Выгрузите данные из базы-источника.'"), 30);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПомещениеФайлаТекущийЭтап(Успешно, Адрес, ИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Успешно Тогда 
		АдресФайлаТекущийЭтап = Адрес;
		Шаг = ОбработатьФайлТекущийЭтапНаСервере(Адрес);
		ОбновитьЗаголовокТипФайлаДанных(Шаг);
		Если ДополнительныеПараметры.ЭтоПереходДалее
			и Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.СтраницаПошаговойЗагрузки Тогда
			Шаг = Шаг + 1;
		КонецЕсли;
		
		Если Шаг > ПорядковыйНомерПерехода Тогда
			УстановитьПорядковыйНомерПерехода(Шаг);
		Иначе
			Если ДополнительныеПараметры.ЭтоПереходДалее Тогда
				ПоказатьПредупреждение(, НСтр("ru = 'Файл с данными не соответствует этапу переноса! Выгрузите данные из базы-источника.'"), 30);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Ошибка помещения файла текущего этапа'");
		Сообщение.Сообщить();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовокТипФайлаДанных(Шаг)
	
	СтрокаЗаголовок = НСтр("ru='Файл данных не обнаружен в каталоге переноса.'");
	Если Шаг = 2 Тогда
		СтрокаЗаголовок = НСтр("ru='Файл данных с параметрами настроек учета.'");	
	ИначеЕсли Шаг = 4 Тогда
		СтрокаЗаголовок = НСтр("ru='Файл данных с нормативно-справочной информацией.'");
	ИначеЕсли Шаг = 6 Тогда
		СтрокаЗаголовок = НСтр("ru='Файл данных с информацией об остатках.'");
	КонецЕсли;
	
	Элементы.ДекорацияТипФайлаДанных.Заголовок = СтрокаЗаголовок;
	Если Шаг < ПорядковыйНомерПерехода Тогда
		Элементы.ДекорацияТипФайлаДанных.ЦветТекста = WebЦвета.Красный;
	Иначе
		Элементы.ДекорацияТипФайлаДанных.ЦветТекста = WebЦвета.Зеленый;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ОбработатьФайлТекущийЭтапНаСервере(Адрес)
	
	СохраненныеДанные = ПолучитьСохраненныеДанныеИзВременногоХранилищаНаСервере(Адрес);
	
	Шаг = 2;
	Если СохраненныеДанные.ТекущийЭтап = "Остатки" Тогда
		Шаг = 6;
	ИначеЕсли СохраненныеДанные.ТекущийЭтап = "Справочники" Тогда
		Шаг = 4;
	КонецЕсли;
	
	Возврат Шаг;
	
КонецФункции

&НаКлиенте
Процедура НачатьПроверкуСуществованияФайлаДанных()
	
	Файл = Новый Файл(Объект.КаталогПереноса + ИменаФайловПереноса.ВыгруженныеДанные);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Файл", Файл);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьПроверкуСуществованияФайлаДанных", ЭтаФорма, ДополнительныеПараметры);
	Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПроверкуСуществованияФайлаДанных(Существует, ДополнительныеПараметры) Экспорт
	
	Если Существует Тогда
		Файл = ДополнительныеПараметры.Файл;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьПолучениеРазмераФайла", ЭтаФорма, ДополнительныеПараметры);
		Файл.НачатьПолучениеРазмера(ОписаниеОповещения);
	Иначе
		Элементы.ДекорацияТипФайлаДанных.Заголовок     = НСтр("ru='Файл данных не обнаружен в каталоге переноса.'");
		Элементы.ДекорацияДатаВыгрузкиДанных.Заголовок = "";
		Элементы.ДекорацияРазмерФайла.Заголовок        = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолучениеРазмераФайла(Размер, ДополнительныеПараметры) Экспорт
	
	Файл = ДополнительныеПараметры.Файл;
	Элементы.ДекорацияРазмерФайла.Заголовок = НСтр("ru='Размер файла'") + ": " + Окр(Размер/1024,0) + " Кб.";
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьПолучениеВремениИзмененияФайла", ЭтаФорма, ДополнительныеПараметры);
	Файл.НачатьПолучениеВремениИзменения(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолучениеВремениИзмененияФайла(ВремяИзменения, ДополнительныеПараметры) Экспорт
	
	Элементы.ДекорацияДатаВыгрузкиДанных.Заголовок = НСтр("ru='Дата выгрузки'") + ": " + ВремяИзменения + ";";
	НачатьПроверкуСуществованияФайлаТекущийЭтап(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьКвитанцию()
	
	ПутьФайлаКвитанции = Объект.КаталогПереноса + ИменаФайловПереноса.КвитанцияОПолучении;
	ПолучаемыеФайлы = Новый Массив;
	ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(ПутьФайлаКвитанции, АдресХранилищаДополнительный);
	ПолучаемыеФайлы.Добавить(ОписаниеФайла);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикПолученияКвитанции", ЭтаФорма);
	НачатьПолучениеФайлов(ОписаниеОповещения, ПолучаемыеФайлы, , Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПолученияКвитанции(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПолученныеФайлы = Неопределено Тогда
		ЗафиксироватьОшибку(ЭтотОбъект, "ru = 'Ошибка при записи файла квитанции'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСохраненныеДанныеИзВременногоХранилищаНаСервере(Адрес)

	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(Адрес);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяВременногоФайла);
	ПрочитанныеДанные = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
	ЧтениеXML.Закрыть();
	УдалитьФайлы(ИмяВременногоФайла);

	Возврат ПрочитанныеДанные;

КонецФункции

&НаСервереБезКонтекста
Функция СоответствиеНаименованийКонфигураций()
  
  СоответствиеНаименованийКонфигураций = Новый Соответствие();
  СоответствиеНаименованийКонфигураций.Вставить("УПП",       "UPP");
  СоответствиеНаименованийКонфигураций.Вставить("КА",        "KA");
  СоответствиеНаименованийКонфигураций.Вставить("УТ",        "Trade");
  СоответствиеНаименованийКонфигураций.Вставить("УТБазовая", "TradeB");
  СоответствиеНаименованийКонфигураций.Вставить("ЗУП",       "HRM");
  СоответствиеНаименованийКонфигураций.Вставить("УП",        "ERP");
  СоответствиеНаименованийКонфигураций.Вставить("БП",        "BP");
  СоответствиеНаименованийКонфигураций.Вставить("БП",        "BP");  
  СоответствиеНаименованийКонфигураций.Вставить("ЗУП31",     "HRM");
  СоответствиеНаименованийКонфигураций.Вставить("ЗУП25",     "HRM25");
  
  Возврат СоответствиеНаименованийКонфигураций;
  
КонецФункции

//++ Локализация


//-- Локализация

#КонецОбласти