
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ИсключатьСистемныеПоляИТаблицыЧерезБСП = Ложь;
	ИспользоватьФормулы = Ложь;

	Элементы.ДекорацияЗаголовок.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Необходимо выбрать реквизит 1С для атрибута маркетплейса <%1>.'"), 
		Параметры.Атрибут);

	ЗакрыватьПриВыборе = Ложь;
	Инициализировать();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "Запись_ДополнительныеРеквизитыИСведения"
		И Параметр <> Неопределено Тогда

		ПереданноеЗначение = Новый Структура("Ссылка");
		ЗаполнитьЗначенияСвойств(ПереданноеЗначение, Параметр);

		Если ТипЗнч(ПереданноеЗначение.Ссылка) = Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения") Тогда
			ПерезаполнитьТекущуюВетку(Параметр.Ссылка, ПереданноеЗначение.Ссылка);
		КонецЕсли;

	ИначеЕсли ИмяСобытия = "ДобавлениеОтменено_ДополнительныеРеквизитыИСведения" Тогда
		ПутьКРеквизитуТекущейВетки = "";
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДоступныеПоля

#Область ПодключаемыйСписокПолей

&НаКлиенте
Процедура Подключаемый_СписокПолейПередРазворачиванием(Элемент, Строка, Отказ)

	КонструкторФормулКлиент.СписокПолейПередРазворачиванием(ЭтотОбъект, Элемент, Строка, Отказ);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазвернутьТекущийЭлементСпискаПолей()

	КонструкторФормулКлиент.РазвернутьТекущийЭлементСпискаПолей(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗаполнитьСписокДоступныхПолей(ПараметрыЗаполнения) Экспорт // АПК:78 процедура вызывается из общего модуля КонструкторФормулКлиент.

	ЗаполнитьСписокДоступныхПолей(ПараметрыЗаполнения);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокПолейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	ВыбратьИЗакрыть();

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокПолейНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)

	КонструкторФормулКлиент.СписокПолейНачалоПеретаскивания(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, Выполнение);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокПолейПриАктивизацииСтроки(Элемент)

	ПодключитьОбработчикОжидания("СкрытьНеиспользуемыеКоманды", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура СкрытьНеиспользуемыеКоманды()

	ИменаКомандРедактированияФормул = ИменаКомандРедактированияФормул();
	ИмяКомандыИсключение = "ДобавитьФормулу";

	КомандыРедактированияФормул = Новый Массив;

	Для Каждого Элемент Из Элементы.ДоступныеПоляКонтекстноеМеню.ПодчиненныеЭлементы Цикл // АПК:275  элемент добавляется программно.

		Элемент.Видимость = ТипЗнч(Элемент) = Тип("КнопкаФормы")
			И ИменаКомандРедактированияФормул.Найти(Элемент.ИмяКоманды) <> Неопределено
			И ИспользоватьФормулы;

		Если Элемент.Видимость И Элемент.ИмяКоманды <> ИмяКомандыИсключение Тогда
			КомандыРедактированияФормул.Добавить(Элемент);
		КонецЕсли;

	КонецЦикла;
	
	Для Каждого ИмяКоманды Из ИменаКомандРедактированияФормул Цикл

		Элемент = Элементы.Найти(ИмяКоманды);

		Если Элемент <> Неопределено И Элемент.ИмяКоманды <> ИмяКомандыИсключение Тогда
			КомандыРедактированияФормул.Добавить(Элемент);
		КонецЕсли;

	КонецЦикла;

	ПолеСписка = СписокДоступныхПолей(ЭтотОбъект).Поле;
	РедактированиеФормулыДоступно = РедактированиеФормулыДоступно(ПолеСписка.ТекущиеДанные);

	Для Каждого Элемент Из КомандыРедактированияФормул Цикл
		Элемент.Доступность = РедактированиеФормулыДоступно;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтрокаПоискаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)

	КонструкторФормулКлиент.СтрокаПоискаИзменениеТекстаРедактирования(ЭтотОбъект, Элемент, Текст, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПоискВСпискеПолей()

	ВыполнитьПоискВСпискеПолей();

КонецПроцедуры

&НаСервере
Процедура ВыполнитьПоискВСпискеПолей()

	КонструкторФормул.ВыполнитьПоискВСпискеПолей(ЭтотОбъект);

	Если Не ИсключатьСистемныеПоляИТаблицыЧерезБСП Тогда
		Для Каждого ДоступноеПоле Из ЭтотОбъект.ДоступныеПоля.ПолучитьЭлементы() Цикл
			УдалитьСлужебныеПоля(ДоступноеПоле.ПолучитьИдентификатор());
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтрокаПоискаОчистка(Элемент, СтандартнаяОбработка)

	КонструкторФормулКлиент.СтрокаПоискаОчистка(ЭтотОбъект, Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбработчикКонструктораФормулСервер(Параметр, ДополнительныеПараметры)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонструкторФормул") Тогда
		МодульКонструкторФормул = ОбщегоНазначения.ОбщийМодуль("КонструкторФормул");
		МодульКонструкторФормул.ОбработчикКонструктораФормул(ЭтотОбъект, Параметр, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикКонструктораФормулКлиент(Параметр, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонструкторФормул") Тогда
		МодульКонструкторФормулКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("КонструкторФормулКлиент");
		МодульКонструкторФормулКлиент.ОбработчикКонструктораФормул(ЭтотОбъект, Параметр, ДополнительныеПараметры);
		Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.ВыполнитьНаСервере Тогда
			Подключаемый_ОбработчикКонструктораФормулСервер(Параметр, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачатьПоискВСпискеПолей()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонструкторФормул") Тогда
		МодульКонструкторФормулКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("КонструкторФормулКлиент");
		МодульКонструкторФормулКлиент.НачатьПоискВСпискеПолей(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Выбрать(Команда)

	ВыбратьИЗакрыть();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФормулу(Команда)

	АктивизироватьГруппуФормул(Ложь);

	ПараметрыРедактированияФормулы = КонструкторФормулКлиент.ПараметрыРедактированияФормулы();
	ПараметрыРедактированияФормулы.Операнды = НастройкиОтчета.АдресСхемы;
	ПараметрыРедактированияФормулы.ИмяКоллекцииСКДОперандов = ИмяКоллекцииПолей;
	ПараметрыРедактированияФормулы.Наименование = "";
	ПараметрыРедактированияФормулы.ДляЗапроса = Истина;

	Если ИсключатьСистемныеПоляИТаблицыЧерезБСП Тогда
		ПараметрыРедактированияФормулы.Вставить("ИсключатьСистемныеПоляИТаблицы", Истина);
	КонецЕсли;

	Обработчик = Новый ОписаниеОповещения("ПослеДобавленияФормулы", ЭтотОбъект);
	КонструкторФормулКлиент.НачатьРедактированиеФормулы(ПараметрыРедактированияФормулы, Обработчик);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьФормулу(Команда)

	ПолеСписка = СписокДоступныхПолей(ЭтотОбъект).Поле;
	Строка = ПолеСписка.ТекущиеДанные;

	Если Не РедактированиеФормулыДоступно(Строка) Тогда
		Возврат;
	КонецЕсли;

	ВариантыОтчетовСлужебныйКлиент.ИзменитьФормулу(
		ЭтотОбъект, КомпоновщикНастроек.Настройки, Строка.ПутьКДанным, ИмяКоллекцииПолей);

КонецПроцедуры

// Процедура - После изменения формулы
//  Выполняет стандартные операции после изменения формулы.
//  
// Параметры:
//  ОписаниеФормулы - ДоступноеПолеКомпоновкиДанных
//                  - Структура:
//                      * Формула - Строка
//                      * ПредставлениеФормулы - Строка
//                      * Наименование - Строка
//  Формула - Структура:
//    * Формула - ПользовательскоеПолеВыражениеКомпоновкиДанных
//    * КоллекцияПолей - ДоступныеПоляКомпоновкиДанных
//
&НаКлиенте
Процедура ПослеИзмененияФормулы(ОписаниеФормулы, Формула) Экспорт

	Если ТипЗнч(ОписаниеФормулы) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;

	ВариантыОтчетовСлужебныйКлиент.ПослеИзмененияФормулы(ОписаниеФормулы, Формула);

	Список = Элементы.Найти("ДоступныеПоля");

	Если Список = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Строка = Список.ТекущиеДанные;

	Если Строка <> Неопределено Тогда 
		Строка.Заголовок = ОписаниеФормулы.Заголовок;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УдалитьФормулу(Команда)

	ПолеСписка = СписокДоступныхПолей(ЭтотОбъект).Поле;
	Строка = ПолеСписка.ТекущиеДанные;

	Если Не РедактированиеФормулыДоступно(Строка) Тогда
		Возврат;
	КонецЕсли;

	Формулы = КомпоновщикНастроек.Настройки.ПользовательскиеПоля.Элементы;
	Формула = ВариантыОтчетовСлужебныйКлиентСервер.ФормулаПоПутиКДанным(КомпоновщикНастроек.Настройки, Строка.ПутьКДанным);
	Формулы.Удалить(Формула);

	ОбновитьКоллекцииПолей();
	АктивизироватьГруппуФормул();

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСоставДополнительныхРеквизитов(Команда)

	ОткрытьСписокРеквизитовСведений();

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСоставДополнительныхСведений(Команда)

	ОткрытьСписокРеквизитовСведений(Истина);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура Инициализировать()

	ПроверитьПараметрыИнициализации();

	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));

	УстановитьИмяКоллекции();
	УстановитьИдентификаторЭлементаСтруктурыНастроек();
	ИнициализироватьСписокДоступныхПолей();
	АктивизироватьДоступноеПоле();

КонецПроцедуры

&НаСервере
Процедура ПроверитьПараметрыИнициализации()

	Шаблон = НСтр("ru = 'Не передан служебный параметр ""%1"".'");

	Если Не Параметры.Свойство("КомпоновщикНастроек", КомпоновщикНастроек) Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, "КомпоновщикНастроек");
	КонецЕсли;

	Если Не Параметры.Свойство("Режим", Режим) Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, "Режим");
	КонецЕсли;

	Если Не Параметры.Свойство("НастройкиОтчета", НастройкиОтчета) Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, "НастройкиОтчета");
	КонецЕсли;

	Если Не Параметры.НастройкиОтчета.Свойство("АдресСхемы", АдресСхемы) Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, "АдресСхемы");
	КонецЕсли;

	Если Не Параметры.Свойство("ИсточникКатегорий", ИсточникКатегорий) Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, "ИсточникКатегорий");
	КонецЕсли;

	Если Не Параметры.Свойство("Категория1С", Категория1С) Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, "Категория1С");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьИмяКоллекции()

	Режимы = Новый Соответствие;
	Режимы.Вставить("Отборы", "ДоступныеПоляОтбора");
	Режимы.Вставить("ВыбранныеПоля", "ДоступныеПоляВыбора");
	Режимы.Вставить("Сортировка", "ДоступныеПоляПорядка");
	Режимы.Вставить("ПоляГруппировки", "ДоступныеПоляГруппировок");
	Режимы.Вставить("СоставГруппировки", "ДоступныеПоляГруппировок");
	Режимы.Вставить("СтруктураВарианта", "ДоступныеПоляГруппировок");
	Режимы.Вставить("ПоляОформления", "УсловноеОформление.ДоступныеПоляПолей");
	Режимы.Вставить("УсловияОформления", "УсловноеОформление.ДоступныеПоляОтбора");

	ИмяКоллекцииПолей = Режимы[Режим];

	Если ИмяКоллекцииПолей = Неопределено Тогда		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Некорректное значение параметра ""Режим"": ""%1"".'"), Строка(Режим));
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьИдентификаторЭлементаСтруктурыНастроек()

	ИдентификаторЭлементаСтруктурыНастроек = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		Параметры, "ИдентификаторЭлементаСтруктурыНастроек");

	Если ИдентификаторЭлементаСтруктурыНастроек = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ЭлементСтруктурыНастроек = КомпоновщикНастроек.Настройки.ПолучитьОбъектПоИдентификатору(ИдентификаторЭлементаСтруктурыНастроек);

	Если ТипЗнч(ЭлементСтруктурыНастроек) = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных")
		Или ТипЗнч(ЭлементСтруктурыНастроек) = Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных")
		Или ТипЗнч(ЭлементСтруктурыНастроек) = Тип("ТаблицаКомпоновкиДанных")
		Или ТипЗнч(ЭлементСтруктурыНастроек) = Тип("ДиаграммаКомпоновкиДанных") Тогда

		ИдентификаторЭлементаСтруктурыНастроек = Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокДоступныхПолей(ПараметрыЗаполнения)

	КонструкторФормул.ЗаполнитьСписокДоступныхПолей(ЭтотОбъект, ПараметрыЗаполнения);

	УдалитьСлужебныеПоля(ПараметрыЗаполнения.ИдентификаторСтроки);

КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСписокДоступныхПолей()

	// КонструкторФормул

	ПараметрыДобавленияСпискаПолей = КонструкторФормул.ПараметрыДобавленияСпискаПолей();
	ПараметрыДобавленияСпискаПолей.МестоРазмещенияСписка = МестоРазмещенияСписка(Элементы);
	ПараметрыДобавленияСпискаПолей.КоллекцииПолей = КоллекцииПолей();

	Если ИсключатьСистемныеПоляИТаблицыЧерезБСП Тогда
		ПараметрыДобавленияСпискаПолей.Вставить("ИсключатьСистемныеПоляИТаблицы", Истина);
	КонецЕсли;

	ПараметрыДобавленияСпискаПолей.ОбработчикиСписка.Вставить("Выбор", "Подключаемый_СписокПолейВыбор");
	ПараметрыДобавленияСпискаПолей.ОбработчикиСписка.Вставить("ПриАктивизацииСтроки", "Подключаемый_СписокПолейПриАктивизацииСтроки");

	КонструкторФормул.ДобавитьСписокПолейНаФорму(ЭтотОбъект, ПараметрыДобавленияСпискаПолей);

	// Конец КонструкторФормул 

	Если Не ИсключатьСистемныеПоляИТаблицыЧерезБСП Тогда
		УдалитьСлужебныеПоля();
	КонецЕсли;

	ДобавитьКомандыРедактированияФормулВКонтекстноеМеню();

КонецПроцедуры

&НаСервере
Процедура ДобавитьКомандыРедактированияФормулВКонтекстноеМеню()

	ПолеСписка = СписокДоступныхПолей(ЭтотОбъект).Поле;

	ИмяКоманднойПанелиРедактированияФормул = "КомандыРедактированияФормул";
	ИменаКомандРедактированияФормул = ИменаКомандРедактированияФормул();

	Для Каждого ИмяКоманды Из ИменаКомандРедактированияФормул Цикл

		ИмяКнопки = "КонтекстноеМеню" + ИмяКоманднойПанелиРедактированияФормул + ИмяКоманды;
		Кнопка = Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), ПолеСписка.КонтекстноеМеню);
		Кнопка.ИмяКоманды = ИмяКоманды;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура АктивизироватьДоступноеПоле()

	Поле = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ПолеКД");
	ПутьКПолюКД = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ПутьКПолюКД");

	Если Поле = Неопределено Тогда
		Возврат;
	КонецЕсли;

	КоллекцияПолей = КоллекцияПолей(ЭтотОбъект);
	ДоступноеПоле = КоллекцияПолей.НайтиПоле(Поле);

	Если ДоступноеПоле = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ЧастиПути = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ЧастиПутиКПолю(ПутьКПолюКД);

	ПолеДоступныхПолей = Элементы["ДоступныеПоля"]; // Элементы формируются программно.
	АктивизироватьПоле(ПолеДоступныхПолей, Поле, ЧастиПути);

КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьТекущуюВетку(ДобавленныйРеквизитСведение, Значение) 

	ИмяНабора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Значение, "НаборСвойств.ИмяПредопределенногоНабора");
	Если Не ЗначениеЗаполнено(ИмяНабора) Тогда
		Возврат;
	КонецЕсли;

	ПерезаполнитьИсточникДоступныхПолей();

	ПолеДоступныхПолей = Элементы["ДоступныеПоля"]; // Элементы формируются программно.

	НаименованиеРеквизитаСведения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДобавленныйРеквизитСведение, "Наименование");
	ИдентификаторРеквизитаСведения = "[" + Строка(ДобавленныйРеквизитСведение) + "]";

	ИдентификаторСтроки = ПолучитьИдентификаторОбновляемойВетки(ЭтотОбъект[ПолеДоступныхПолей.ПутьКДанным], ИмяНабора);
	Если ИдентификаторСтроки = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
	ПараметрыЗаполнения.Вставить("ИмяСписка", ПолеДоступныхПолей.Имя);
	ЗаполнитьСписокДоступныхПолей(ПараметрыЗаполнения);

	Поле = Новый ПолеКомпоновкиДанных(ПутьКРеквизитуТекущейВетки);
	ЧастиПути = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ЧастиПутиКПолю(ПутьКРеквизитуТекущейВетки);
	АктивизироватьПоле(ПолеДоступныхПолей, Поле, ЧастиПути);

	ПутьКРеквизитуТекущейВетки = "";

КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьИсточникДоступныхПолей()

	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));

	ПараметрыДобавления = КонструкторФормул.ПараметрыДобавленияСпискаПолей();
	ПараметрыДобавления.КоллекцииПолей = КоллекцииПолей();

	ИмяСпискаПолей = ПараметрыДобавления.ИмяСписка;
	ИмяСпискаИсточников = ИмяСпискаПолей + "Источники";
	ИсточникиДоступныхПолей = ЭтотОбъект[ИмяСпискаИсточников]; // ТаблицаЗначений
	ИсточникиДоступныхПолей.Очистить();

	Для Каждого КоллекцияПолей Из ПараметрыДобавления.КоллекцииПолей Цикл
		ИсточникДоступныхПолей = ИсточникиДоступныхПолей.Добавить();
		ИсточникДоступныхПолей.КоллекцияПолей = КоллекцияПолей;
	КонецЦикла;

	Для Каждого ИсточникДоступныхПолей Из ПараметрыДобавления.ИсточникиДоступныхПолей Цикл
		ЗаполнитьЗначенияСвойств(ИсточникиДоступныхПолей.Добавить(), ИсточникДоступныхПолей);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ПолучитьИдентификаторОбновляемойВетки(ИсточникСтрок, ИмяНабора)

	ИдентификаторОбновляемойВетки = Неопределено;

	ИдентификаторНайден = Ложь;

	Для Каждого Строка Из ИсточникСтрок.ПолучитьЭлементы() Цикл
		Для Каждого Тип Из Строка.Тип.Типы() Цикл
			ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
			Если ОбъектМетаданных <> Неопределено Тогда
				СтрокаПоиска = СтрЗаменить(ОбъектМетаданных.ПолноеИмя(), ".", "_");
				Если СтрНайти(ИмяНабора, СтрокаПоиска) Тогда
					ИдентификаторНайден = Истина;

					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		Если ИдентификаторНайден Тогда
			КоллекцияРеквизитов = Строка.ПолучитьЭлементы();
			КоллекцияРеквизитов.Очистить();
			КоллекцияРеквизитов.Добавить();

			ИдентификаторОбновляемойВетки = Строка.ПолучитьИдентификатор();
			Прервать;
		Иначе
			ИдентификаторОбновляемойВетки = ПолучитьИдентификаторОбновляемойВетки(Строка, ИмяНабора);
			Если ЗначениеЗаполнено(ИдентификаторОбновляемойВетки) Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат ИдентификаторОбновляемойВетки;

КонецФункции

&НаСервере
Процедура АктивизироватьПоле(ПолеДоступныхПолей, Поле, ЧастиПути)

	ДанныеДоступныхПолей = ЭтотОбъект[ПолеДоступныхПолей.ПутьКДанным].ПолучитьЭлементы();
	МассивПутиКПолюКД = Новый Массив;

	Для Каждого ЧастьПути Из ЧастиПути Цикл
		МассивПутиКПолюКД.Добавить(ЧастьПути);

		ИмяПоляПоиска = ИнтеграцияСМаркетплейсомOzonСервер.ПутьКПолюИзЧастейПути(МассивПутиКПолюКД);

		ПолеПоиска = Новый ПолеКомпоновкиДанных(ИмяПоляПоиска);

		Для Каждого Строка Из ДанныеДоступныхПолей Цикл
			Если Строка.Поле = Поле Тогда 
				ПолеДоступныхПолей.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;

			Если Строка.Поле = ПолеПоиска Тогда
				ИдентификаторСтроки = Строка.ПолучитьИдентификатор();

				ПараметрыЗаполнения = Новый Структура;
				ПараметрыЗаполнения.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
				ПараметрыЗаполнения.Вставить("ИмяСписка", ПолеДоступныхПолей.Имя);
				ЗаполнитьСписокДоступныхПолей(ПараметрыЗаполнения);

				ДанныеДоступныхПолей = Строка.ПолучитьЭлементы();
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИЗакрыть()

	ОчиститьСообщения();

	ВыбранноеПоле = КонструкторФормулКлиент.ВыбранноеПолеВСпискеПолей(ЭтотОбъект);

	Если ВыбранноеПоле.Родитель <> Неопределено
		И ВыбранноеПоле.Родитель.Имя = ИдентификаторГруппыФормул() Тогда

		ДоступноеПоле = ВариантыОтчетовСлужебныйКлиентСервер.ФормулаПоПутиКДанным(
			КомпоновщикНастроек.Настройки, ВыбранноеПоле.ПутьКДанным);

	ИначеЕсли ВыбранноеПоле.Имя = "ДетальныеЗаписи" Тогда
		ДоступноеПоле = Неопределено;
	Иначе
		ДоступноеПоле = ПолучитьДоступноеПоле(ВыбранноеПоле.ПутьКДанным, ЭтотОбъект);
	КонецЕсли;

	Если ДоступноеПоле <> Неопределено Тогда
		Закрыть(ДоступноеПоле);
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьДоступноеПоле(ПутьКДанным, ЭтотОбъект)

	КоллекцияПолей = КоллекцияПолей(ЭтотОбъект);
	Поле = Новый ПолеКомпоновкиДанных(ПутьКДанным);
	ДоступноеПоле = КоллекцияПолей.НайтиПоле(Поле);
	
	СообщениеОДубле = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПроверитьДублированиеДополнительногоРеквизита(ПутьКДанным, ДоступноеПоле.Заголовок,
		ЭтотОбъект.КомпоновщикНастроек.Настройки[ЭтотОбъект.ИмяКоллекцииПолей]);

	Если Не ПустаяСтрока(СообщениеОДубле) Тогда
		ТекстСообщения = СообщениеОДубле
			+ " "
			+ НСтр("ru = 'Реквизит недоступен к выбору. Необходимо выбрать другой реквизит или переименовать текущий в форме списка дополнительных реквизитов / сведений.'");
		#Если Клиент Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		#Иначе
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		#КонецЕсли
		Возврат Неопределено;
	КонецЕсли;

	Возврат ДоступноеПоле;

КонецФункции

&НаКлиенте
Процедура ПослеДобавленияФормулы(ОписаниеФормулы, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(ОписаниеФормулы) <> Тип("Структура")
		Или Не ОписаниеФормулы.Свойство("Формула") Тогда

		Возврат;
	КонецЕсли;

	ВариантыОтчетовСлужебныйКлиент.ДобавитьФормулу(КомпоновщикНастроек.Настройки, КоллекцияПолей(ЭтотОбъект), ОписаниеФормулы);
	ОбновитьКоллекцииПолей();
	АктивизироватьГруппуФормул();

КонецПроцедуры

&НаСервере
Процедура ОбновитьКоллекцииПолей()

	КонструкторФормул.ОбновитьКоллекцииПолей(ЭтотОбъект, КоллекцииПолей());

	Если Не ИсключатьСистемныеПоляИТаблицыЧерезБСП Тогда
		УдалитьСлужебныеПоля();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УдалитьСлужебныеПоля(ИдентификаторСтроки = Неопределено)

	Список = Элементы.Найти("ДоступныеПоля");

	Если Список = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТаблицаИсключаемыхПолей = Новый ТаблицаЗначений;
	ТаблицаИсключаемыхПолей.Колонки.Добавить("ИмяПоля", Новый ОписаниеТипов("Строка"));

	МассивТипов = Новый Массив;
	МассивТипов.Добавить("Строка");
	МассивТипов.Добавить("Булево");
	ТаблицаИсключаемыхПолей.Колонки.Добавить("ЗначениеПоля", Новый ОписаниеТипов(МассивТипов));

	Если ИдентификаторСтроки = Неопределено Тогда
		СписокДоступныхПолей = ЭтотОбъект.ДоступныеПоля.ПолучитьЭлементы();
		
		НоваяСтрока = ТаблицаИсключаемыхПолей.Добавить();
		НоваяСтрока.ИмяПоля = "Имя";
		НоваяСтрока.ЗначениеПоля = "СистемныеПоля";
	Иначе
		СписокДоступныхПолей = ЭтотОбъект.ДоступныеПоля.НайтиПоИдентификатору(ИдентификаторСтроки).ПолучитьЭлементы();

		НоваяСтрока = ТаблицаИсключаемыхПолей.Добавить();
		НоваяСтрока.ИмяПоля = "Таблица";
		НоваяСтрока.ЗначениеПоля = Истина;

		НоваяСтрока = ТаблицаИсключаемыхПолей.Добавить();
		НоваяСтрока.ИмяПоля = "Имя";
		НоваяСтрока.ЗначениеПоля = "ИмяПредопределенныхДанных";
	КонецЕсли;

	МассивСтрокУдаления = Новый Массив;
	Для Каждого ВеткаДоступныхПолей Из СписокДоступныхПолей Цикл
		Для Каждого СтрокаПоляИсключения Из ТаблицаИсключаемыхПолей Цикл
			Если ВеткаДоступныхПолей[СтрокаПоляИсключения.ИмяПоля] = СтрокаПоляИсключения.ЗначениеПоля Тогда
				МассивСтрокУдаления.Добавить(ВеткаДоступныхПолей);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Для Каждого СтрокаУдаления Из МассивСтрокУдаления Цикл
		СписокДоступныхПолей.Удалить(СтрокаУдаления);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокРеквизитовСведений(ЭтоНаборыДополнительныхСведений = Ложь)

	ТекущиеДанные = Элементы["ДоступныеПоля"].ТекущиеДанные; // Элементы формируются программно.
	ПутьКРеквизитуТекущейВетки = ТекущиеДанные.ПутьКДанным;

	ПараметрыФормы = Новый Структура;
	Если ЭтоНаборыДополнительныхСведений Тогда
		ПараметрыФормы.Вставить("ПоказатьДополнительныеСведения", Истина);
	Иначе
		ПараметрыФормы.Вставить("ПоказатьДополнительныеРеквизиты", Истина);
	КонецЕсли;

	ОткрытьФорму("Справочник.НаборыДополнительныхРеквизитовИСведений.ФормаСписка", ПараметрыФормы);

КонецПроцедуры

#Область Общее

&НаКлиентеНаСервереБезКонтекста
Функция МестоРазмещенияСписка(Элементы)

	Возврат Элементы.ГруппаДоступныеПоля;

КонецФункции

// Параметры:
//  ЭтотОбъект - ФормаКлиентскогоПриложения
//
// Возвращаемое значение:
//  Структура:
//    * Поле - ТаблицаФормы:
//        ** Имя - Строка
//        ** Заголовок - Строка
//        ** Поле - ОписаниеТипов
//        ** ПутьКДанным - Строка
//        ** ПредставлениеПутиКДанным - Строка
//        ** Тип - ОписаниеТипов
//        ** Картинка - Картинка
//        ** Папка - Булево
//        ** Таблица - Булево
//        ** СвойНаборПолей - Булево 
//        ** Отступ - Строка
//        ** СоответствуетОтбору - Булево
//        ** ПодчиненныйЭлементСоответствуетОтбору - Булево
//    * Данные - ДанныеФормыДерево:
//        ** Имя - Строка
//        ** Заголовок - Строка
//        ** Поле - ОписаниеТипов
//        ** ПутьКДанным - Строка
//        ** ПредставлениеПутиКДанным - Строка
//        ** Тип - ОписаниеТипов
//        ** Картинка - Картинка
//        ** Папка - Булево
//        ** Таблица - Булево
//        ** СвойНаборПолей - Булево 
//        ** Отступ - Строка
//        ** СоответствуетОтбору - Булево
//        ** ПодчиненныйЭлементСоответствуетОтбору - Булево
//
&НаКлиентеНаСервереБезКонтекста
Функция СписокДоступныхПолей(ЭтотОбъект)

	СписокДоступныхПолей = Новый Структура("Поле, Данные");

	МестоРазмещенияСписка = МестоРазмещенияСписка(ЭтотОбъект.Элементы);

	Для Каждого Элемент Из МестоРазмещенияСписка.ПодчиненныеЭлементы Цикл

		Если ТипЗнч(Элемент) = Тип("ТаблицаФормы") Тогда

			СписокДоступныхПолей.Поле = Элемент;
			СписокДоступныхПолей.Данные = ЭтотОбъект[Элемент.Имя];
			Прервать;

		КонецЕсли;

	КонецЦикла;

	Возврат СписокДоступныхПолей;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИдентификаторГруппыФормул()

	Возврат "ПользовательскиеПоля";

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИменаКомандРедактированияФормул()

	Возврат СтрРазделить("ДобавитьФормулу, ИзменитьФормулу, УдалитьФормулу", ", ", Ложь);

КонецФункции

// Параметры:
//  ВыбранноеПоле - см. СписокДоступныхПолей.Поле
// 
// Возвращаемое значение:
//  Булево
//
&НаКлиентеНаСервереБезКонтекста
Функция РедактированиеФормулыДоступно(ВыбранноеПоле)

	Если ТипЗнч(ВыбранноеПоле) <> Тип("ДанныеФормыЭлементДерева") Тогда
		Возврат Ложь;
	КонецЕсли;

	Родитель = ВыбранноеПоле.ПолучитьРодителя();

	Возврат Родитель <> Неопределено И Родитель.Имя = ИдентификаторГруппыФормул();

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КоллекцияПолей(ЭтотОбъект)

	Настройки = ЭтотОбъект.КомпоновщикНастроек.Настройки;

	Если ЭтотОбъект.ИмяКоллекцииПолей = "ДоступныеПоляГруппировок" Тогда

		Если ЭтотОбъект.ИдентификаторЭлементаСтруктурыНастроек = Неопределено Тогда

			ЭлементСтруктурыНастроек = Настройки;
		Иначе
			ЭлементСтруктурыНастроек = Настройки.ПолучитьОбъектПоИдентификатору(
				ЭтотОбъект.ИдентификаторЭлементаСтруктурыНастроек);
		КонецЕсли;

		Если ТипЗнч(ЭлементСтруктурыНастроек) = Тип("НастройкиКомпоновкиДанных") Тогда
			Возврат ЭлементСтруктурыНастроек.ДоступныеПоляГруппировок;
		Иначе
			Возврат ЭлементСтруктурыНастроек.ПоляГруппировки.ДоступныеПоляПолейГруппировок;
		КонецЕсли;

	ИначеЕсли СтрНайти(ЭтотОбъект.ИмяКоллекцииПолей, ".") > 0 Тогда

		ОписаниеИмениКоллекцииПолей = СтрРазделить(ЭтотОбъект.ИмяКоллекцииПолей, ".");
		КоллекцияПолей = Настройки;

		Для Каждого Элемент Из ОписаниеИмениКоллекцииПолей Цикл 
			КоллекцияПолей = КоллекцияПолей[Элемент];
		КонецЦикла;

		Возврат КоллекцияПолей;

	КонецЕсли;

	Возврат Настройки[ЭтотОбъект.ИмяКоллекцииПолей];

КонецФункции

&НаСервере
Функция КоллекцииПолей()

	КоллекцииПолей = Новый Массив;
	КоллекцииПолей.Добавить(КоллекцияПолей(ЭтотОбъект));

	Если ИспользоватьФормулы Тогда
		Если КомпоновщикНастроек.Настройки.ПользовательскиеПоля.Элементы.Количество() = 0 Тогда
			КоллекцииПолей.Добавить(ДополнительноеПолеГруппыФормул());
		КонецЕсли;
	КонецЕсли;

	Если Режим = "СтруктураВарианта" Тогда
		КоллекцииПолей.Добавить(ДополнительноеПолеДетальныхЗаписей());
	КонецЕсли;

	Возврат КоллекцииПолей;

КонецФункции

&НаСервере
Функция ДополнительноеПолеГруппыФормул()

	ТаблицаПолей = КонструкторФормул.ТаблицаПолей();
	Поле = ТаблицаПолей.Добавить();
	Поле.Идентификатор = ИдентификаторГруппыФормул();
	Поле.Представление = НСтр("ru = 'Формулы'");
	Поле.Порядок = 99;

	Возврат КонструкторФормул.КоллекцияПолей(ТаблицаПолей);

КонецФункции

&НаСервере
Функция ДополнительноеПолеДетальныхЗаписей()

	ТаблицаПолей = КонструкторФормул.ТаблицаПолей();
	Поле = ТаблицаПолей.Добавить();
	Поле.Идентификатор = "ДетальныеЗаписи";
	Поле.Представление = НСтр("ru = '<Детальные записи>'");

	Возврат КонструкторФормул.КоллекцияПолей(ТаблицаПолей);

КонецФункции

&НаКлиенте
Функция ГруппаФормул()

	Список = СписокДоступныхПолей(ЭтотОбъект).Данные;
	Строки = Список.ПолучитьЭлементы();

	Индекс = Строки.Количество() - 1;

	Пока Индекс >= 0 Цикл

		Строка = Строки[Индекс];

		Если Строка.Имя = ИдентификаторГруппыФормул() Тогда
			Возврат Строка;
		КонецЕсли;

		Индекс = Индекс - 1;

	КонецЦикла;

	Возврат Неопределено;

КонецФункции

&НаКлиенте
Процедура АктивизироватьГруппуФормул(РазвернутьФормулы = Истина)

	ГруппаФормул = ГруппаФормул();

	ПолеСписка = СписокДоступныхПолей(ЭтотОбъект).Поле;
	ПолеСписка.ТекущаяСтрока = ГруппаФормул.ПолучитьИдентификатор();

	ТекущийЭлемент = ПолеСписка;

	Если РазвернутьФормулы Тогда
		ПолеСписка.Развернуть(ГруппаФормул.ПолучитьИдентификатор());
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти