
#Область ОписаниеПеременных

&НаКлиенте
Перем ЗапущеноЗаданиеОбновленияСкладов;

&НаКлиенте
Перем ЗначениеДоИзменения;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ДатаИзмененияНастроек = ТекущаяДатаСеанса();

	УчетнаяЗаписьМаркетплейса = Параметры.УчетнаяЗаписьМаркетплейса;
	ОбновитьСписокУчетныхЗаписей(УчетнаяЗаписьМаркетплейса);

	УстановитьУсловноеОформление();

	ПроверитьДанныеПомещеныВХранилище();

	ИзменитьРежимВыбораСкладовFBS();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Если Не ПодключениеКСервисуВыполнено Тогда
		ПодключитьОбработчикОжидания("ОткрытьФормуПодключенияКСервису", 0.1, Истина);
	КонецЕсли;

	СтраницыПриСменеСтраницы(Элементы.Страницы, Элементы.СтраницаСопоставлениеДанных);

	ЗапущеноЗаданиеОбновленияСкладов = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)

	ЭтоЗакрытиеФормы = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ОбновитьСписокПодключений" Тогда
		ОбновитьСписокУчетныхЗаписей(УчетнаяЗаписьМаркетплейса);

	ИначеЕсли ИмяСобытия = "ОткрытиеФормыНастроекОбменаOzon" Тогда
		ОчиститьСообщения();
		Параметр.Свойство("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
		УчетнаяЗаписьПриИзменении(Элементы.УчетнаяЗаписьМаркетплейса);

	ИначеЕсли ИмяСобытия = "ИзмененоОграничениеВыгрузкиОстатковМаркетплейсов" Тогда
		ОбновитьЗаголовокОграниченияВыгрузкиОстатков();

	ИначеЕсли ИмяСобытия = "ОбновитьАвторизациюПриложения" Тогда
		ДанныеПриложенияВХранилище = Параметр;

	ИначеЕсли ИмяСобытия = "ЗаписаныНастройкиСкладаFBS"
			И Источник = УчетнаяЗаписьМаркетплейса
			И Элементы.ТаблицаСкладовFBS.ТекущиеДанные.ИдентификаторОбъектаМаркетплейса = Параметр Тогда
		Элементы.ТаблицаСкладовFBS.ТекущиеДанные.ЗаполненыНастройкиСклада = Истина;

	ИначеЕсли ИмяСобытия = "Запись_НаборКонстант"
				И (Источник = "ИспользоватьСкладыВТабличнойЧастиДокументовПродажи"
					Или Источник = "ИспользоватьНесколькоСкладов"
					Или Источник = "ИспользоватьУправлениеДоставкой") Тогда
		ИзменитьРежимВыбораСкладовFBS();

	ИначеЕсли ИмяСобытия = "Запись_НаборКонстант"
				И Источник = "ИспользоватьКорректировкиРеализаций" Тогда
		ЗаполнениеПодсказкиРеализацияВПути();

	ИначеЕсли ИмяСобытия = "Запись_НаборКонстант"
				И (Источник = "ИспользоватьКомиссиюПриПродажах"
					Или Источник = "ИспользоватьОтгрузкуБезПереходаПраваСобственности"
					Или Источник = "ИспользоватьПартнеровИКонтрагентов"
					Или Источник = "ИспользованиеСоглашенийСКлиентами"
					Или Источник = "ИспользоватьДоговорыСКлиентами") Тогда
		ПараметрыОбновления = ПараметрыОбновленияСтраницыНастройкиПоСхемамРаботы();
		ПараметрыОбновления.ОбновитьЭлементыКомиссионнойПродажи = Истина;
		ОбновитьЭлементыСтраницыНастройкиПоСхемамРаботы(ПараметрыОбновления);

	ИначеЕсли ИмяСобытия = "Запись_НаборКонстант"
				И (Источник = "ИспользоватьЗаказыКлиентов"
					Или Источник = "ИспользоватьРасширенныеВозможностиЗаказаКлиента"
					Или Источник = "ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента") Тогда
		ОтображениеРежимаЗаказа();

	ИначеЕсли ИмяСобытия = "Запись_НаборКонстант"
				И (Источник = "ИспользоватьОрдерныеСклады"
					Или Источник = "ИспользоватьОрдернуюСхемуПриОтгрузке"
					Или Источник = "ПорядокОформленияНакладныхРасходныхОрдеров"
					Или Источник = "РежимФормированияРасходныхОрдеров") Тогда
		ПараметрыОбновления = ПараметрыОбновленияСтраницыНастройкиПоСхемамРаботы(Истина);
		ОбновитьЭлементыСтраницыНастройкиПоСхемамРаботы(ПараметрыОбновления);

	ИначеЕсли ИмяСобытия = "Запись_НаборКонстант" Тогда
		ОтображениеПризнакаУчетаМаркировки();

	ИначеЕсли ИмяСобытия = "ВыбранСкладFBO" Тогда
		Отбор = Новый Структура("ИдентификаторОбъектаМаркетплейса", Параметр.ИдентификаторОбъектаМаркетплейса);
		СтрокиСклада = ТаблицаСкладовFBO.НайтиСтроки(Отбор);
		Если СтрокиСклада.Количество() = 0 Тогда
			Если Не ЗначениеЗаполнено(Параметр.ИдентификаторОбъектаМаркетплейса) Тогда
				Отбор = Новый Структура("НаименованиеОбъектаМаркетплейса", Параметр.НаименованиеОбъектаМаркетплейса);
				СтрокиСклада = ТаблицаСкладовFBO.НайтиСтроки(Отбор);
				Если СтрокиСклада.Количество() <> 0 Тогда
					Возврат;
				КонецЕсли;

				ИдентификаторОбъектаМаркетплейса = Новый УникальныйИдентификатор();
			Иначе
				ИдентификаторОбъектаМаркетплейса = Параметр.ИдентификаторОбъектаМаркетплейса;
			КонецЕсли;
			
			НоваяСтрокаСклада = ТаблицаСкладовFBO.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСклада, Параметр,, "ИдентификаторОбъектаМаркетплейса");
			НоваяСтрокаСклада.ИдентификаторОбъектаМаркетплейса = ИдентификаторОбъектаМаркетплейса;

			ЗаписатьСклад(Элементы.ТаблицаСкладовFBO, НоваяСтрокаСклада);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Ozon_УстаревшиеКатегорииОтсутствуют"
				И Параметр = УчетнаяЗаписьМаркетплейса Тогда
		Элементы.ГруппаУстаревшиеКатегории.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)

	ОчиститьСообщения();

	ПерваяСтраница = Элементы.СтраницаСопоставлениеДанных;
	ПоследняяСтраница = Элементы.СтраницаНастройкиПоСхемамРаботы;

	Если Элементы.Страницы.ТекущаяСтраница = ПерваяСтраница Тогда
		Элементы.ФормаДалее.Доступность = Истина;
		Элементы.ФормаНазад.Доступность = Ложь;
		Элементы.ФормаДалее.КнопкаПоУмолчанию = Истина;
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = ПоследняяСтраница Тогда
		Элементы.ФормаДалее.Доступность = Ложь;
		Элементы.ФормаНазад.Доступность = Истина;
		Элементы.ФормаНазад.КнопкаПоУмолчанию = Истина;
	Иначе
		Элементы.ФормаДалее.Доступность = Истина;
		Элементы.ФормаНазад.Доступность = Истина;
		Элементы.ФормаДалее.КнопкаПоУмолчанию = Истина;
	КонецЕсли;

	Если СтраницаДоСмены = Элементы.СтраницаНастройкиОбменаОстатками.Имя Тогда
		ИзменитьПоведениеГруппы("ГруппаНастройкиСкладов", Истина, Ложь);
	ИначеЕсли СтраницаДоСмены = Элементы.СтраницаНастройкиПоСхемамРаботы.Имя Тогда
		ИзменитьПоведениеГруппы("ГруппаНастройкиПоСхемамРаботы", Истина);
	КонецЕсли;

	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаНастройкиОбменаОстатками Тогда
		ОбновитьСписокСкладовFBS();
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаНастройкиПоСхемамРаботы Тогда
		ПараметрыОбновления = ПараметрыОбновленияСтраницыНастройкиПоСхемамРаботы(Истина);
		ПараметрыОбновления.ЭтоСменаСтраницы = Истина;
		ОбновитьЭлементыСтраницыНастройкиПоСхемамРаботы(ПараметрыОбновления);
		ИзменитьЗаполнениеНастроекПоСхемамРаботы(Ложь);
	КонецЕсли;

	СтраницаДоСмены = Элементы.Страницы.ТекущаяСтраница.Имя;

КонецПроцедуры

&НаКлиенте
Процедура УчетнаяЗаписьПриИзменении(Элемент)

	ОчиститьСообщения();
	
	ЗаполнитьДанныеПоУчетнойЗаписи();
	ЕстьВиртуальныеСклады = Ложь;
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСопоставлениеДанных Тогда
		ПроверитьУстаревшиеКатегории();
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаНастройкиОбменаОстатками Тогда
		ОбновитьСписокСкладовFBS();
	Иначе
		СтраницыПриСменеСтраницы(Элементы.Страницы, Элементы.Страницы.ТекущаяСтраница);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЕстьВиртуальныеСкладыПриИзменении(Элемент)
	ЕстьВиртуальныеСкладыПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИсточникКатегорииПриИзменении(Элемент)

	СохранитьНастройки();

	ПараметрыФормыСопоставленияКатегорий = Новый Структура; 
	ПараметрыФормыСопоставленияКатегорий.Вставить("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
	ПараметрыФормыСопоставленияКатегорий.Вставить("ИсточникКатегории", ИсточникКатегории);
	Оповестить("ИсточникКатегорииИзменен", ПараметрыФормыСопоставленияКатегорий);

КонецПроцедуры

&НаКлиенте
Процедура ИсточникКатегорииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦеныДоСкидокПриИзменении(Элемент)
	СохранитьНастройки();
КонецПроцедуры

&НаКлиенте
Процедура ВидЦеныСУчетомСкидокПриИзменении(Элемент)
	СохранитьНастройки();
КонецПроцедуры

&НаКлиенте
Процедура ВидЦеныМинимальныхЦенПриИзменении(Элемент)
	СохранитьНастройки();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИнформацияОЗагружаемыхВидахЦенОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ВидЦен = ЗначениеЦеныПоИдентификатору(УчетнаяЗаписьМаркетплейса, НавигационнаяСсылкаФорматированнойСтроки);
	Если Не ВидЦен.Пустая() Тогда
		ОповещениеПослеИзменения = Новый ОписаниеОповещения("ПослеИзмененияВидаЦен", ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
		ОткрытьФорму("Справочник.ВидыЦен.ФормаОбъекта", Новый Структура("Ключ", ВидЦен), ЭтотОбъект,,,, ОповещениеПослеИзменения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВалютаУчетаПриИзменении(Элемент)
	СохранитьНастройки();
	Оповестить("ИзмененаВалютаУчетнойЗаписиМаркетплейса", Новый Структура("УчетнаяЗаписьМаркетплейса, ВалютаУчета", УчетнаяЗаписьМаркетплейса, ВалютаУчета));
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУстановитьПараметрыПодключенияКСервисуНажатие(Элемент)

	ПараметрыФормы = Новый Структура("ПараметрыПриложенияЯндекс, УчетнаяЗаписьМаркетплейса",
		ПараметрыПриложенияЯндексДиск(), УчетнаяЗаписьМаркетплейса);
	ОткрытьФорму("Справочник.УчетныеЗаписиМаркетплейсов.Форма.АвторизацияПриложенияЯндекс", ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура СпособОтраженияПродажFBOНеИспользуетсяПриИзменении(Элемент)

	ОбработатьИзменениеСхемРаботы();

КонецПроцедуры

&НаКлиенте
Процедура СпособОтраженияПродажFBOКомиссияПриИзменении(Элемент)

	ОбработатьИзменениеСхемРаботы();

КонецПроцедуры

&НаКлиенте
Процедура СпособОтраженияПродажFBSНеИспользуетсяПриИзменении(Элемент)

	ОбработатьИзменениеСхемРаботы();

КонецПроцедуры

&НаКлиенте
Процедура СпособОтраженияПродажFBSРеализацияПриИзменении(Элемент)

	ОбработатьИзменениеСхемРаботы();

КонецПроцедуры

&НаКлиенте
Процедура СпособОтраженияПродажFBSКомиссияПриИзменении(Элемент)

	ОбработатьИзменениеСхемРаботы();

КонецПроцедуры

&НаКлиенте
Процедура АвтоматическоеФормированиеРасходныхОрдеровНаТоварыПриИзменении(Элемент)
	СохранитьНастройки();
КонецПроцедуры

&НаКлиенте
Процедура РучнаяЗагрузкаДанныхОРеализованныхТоварахПриИзменении(Элемент)
	СохранитьНастройки();
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическаяЗагрузкаДанныхОРеализованныхТоварахПриИзменении(Элемент)
	СохранитьНастройки();
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическаяЗагрузкаДанныхОРеализованныхТоварахЗаПредыдущийМесяц1ПриИзменении(Элемент)
	СохранитьНастройки();
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическаяЗагрузкаДанныхЗаТекущийМесяцПриИзменении(Элемент)
	СохранитьНастройки();
КонецПроцедуры

&НаКлиенте
Процедура ТорговаяПлощадкаПартнерПриИзменении(Элемент)

	ЗаполнитьУсловияПродажПоУмолчанию();
	
	СохранитьНастройки();
	Оповестить("Запись_УчетныеЗаписиМаркетплейсов", УчетнаяЗаписьМаркетплейса);

КонецПроцедуры

&НаКлиенте
Процедура ТорговаяПлощадкаКонтрагентПриИзменении(Элемент)

	ЗаполнитьДоговорПоУмолчанию();
	
	СохранитьНастройки();
	Оповестить("Запись_УчетныеЗаписиМаркетплейсов", УчетнаяЗаписьМаркетплейса);

КонецПроцедуры

&НаКлиенте
Процедура ТорговаяПлощадкаСоглашениеПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ТорговаяПлощадкаСоглашение) Тогда
		ЗаполнитьУсловияПродажПоСоглашению(ТорговаяПлощадкаСоглашение);
	КонецЕсли;
	
	СохранитьНастройки();
	Оповестить("Запись_УчетныеЗаписиМаркетплейсов", УчетнаяЗаписьМаркетплейса);

КонецПроцедуры

&НаКлиенте
Процедура ТорговаяПлощадкаСоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ПараметрыВыбораСоглашения = ПродажиКлиент.ПараметрыНачалаВыбораСоглашенияСКлиентом();

	ПараметрыВыбораСоглашения.Элемент               = Элемент;
	ПараметрыВыбораСоглашения.Организация           = Организация;
	ПараметрыВыбораСоглашения.Партнер               = ТорговаяПлощадкаПартнер;
	ПараметрыВыбораСоглашения.Документ              = ТорговаяПлощадкаСоглашение;
	ПараметрыВыбораСоглашения.ДатаДокумента         = ОбщегоНазначенияУТВызовСервера.ДатаСеанса();
	ПараметрыВыбораСоглашения.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию");
	ПараметрыВыбораСоглашения.КомиссионныеПродажи25 = Истина;

	ДанныеФормыСтруктура = Новый Структура;
	ДанныеФормыСтруктура.Вставить("Партнер",    ТорговаяПлощадкаПартнер);
	ДанныеФормыСтруктура.Вставить("Контрагент", ТорговаяПлощадкаКонтрагент);
	ПараметрыВыбораСоглашения.ДанныеФормыСтруктура  = ДанныеФормыСтруктура;

	ПараметрыВыбора = Новый Массив;
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Валюта",                ВалютаУчета));
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Организация",           Организация));
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация",
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию")));
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);

	ПродажиКлиент.НачалоВыбораСоглашенияСКлиентом(ПараметрыВыбораСоглашения, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПродажиРазделяютсяПоДоговорамПриИзменении(Элемент)

	Элементы.ТорговаяПлощадкаДоговорFBS.Видимость = ПродажиРазделяютсяПоДоговорам;
	ИзменитьЗаполнениеНастроекПоСхемамРаботы();
	СохранитьНастройки();
	Оповестить("Запись_УчетныеЗаписиМаркетплейсов", УчетнаяЗаписьМаркетплейса);

КонецПроцедуры

&НаКлиенте
Процедура ТорговаяПлощадкаДоговорFBOПриИзменении(Элемент)

	ПроверитьИСохранитьВыборДоговора(Элемент);
	Оповестить("Запись_УчетныеЗаписиМаркетплейсов", УчетнаяЗаписьМаркетплейса);

КонецПроцедуры

&НаКлиенте
Процедура ТорговаяПлощадкаДоговорFBOСоздание(Элемент, СтандартнаяОбработка)

	ПродажиКлиент.ОткрытьФормуСозданияДоговора(
		ЭтотОбъект,
		Элемент,
		"ТорговаяПлощадкаДоговорFBO",
		ТорговаяПлощадкаПартнер,
		СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ТорговаяПлощадкаДоговорFBSПриИзменении(Элемент)

	ПроверитьИСохранитьВыборДоговора(Элемент);
	Оповестить("Запись_УчетныеЗаписиМаркетплейсов", УчетнаяЗаписьМаркетплейса);

КонецПроцедуры

&НаКлиенте
Процедура ТорговаяПлощадкаДоговорFBSСоздание(Элемент, СтандартнаяОбработка)

	ПродажиКлиент.ОткрытьФормуСозданияДоговора(
		ЭтотОбъект,
		Элемент,
		"ТорговаяПлощадкаДоговорFBS",
		ТорговаяПлощадкаПартнер,
		СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ТорговаяПлощадкаДоговорВзаимозачетовПриИзменении(Элемент)

	ПроверитьИСохранитьВыборДоговора(Элемент);
	Оповестить("Запись_УчетныеЗаписиМаркетплейсов", УчетнаяЗаписьМаркетплейса);

КонецПроцедуры

&НаКлиенте
Процедура ТорговаяПлощадкаДоговорВзаимозачетовСоздание(Элемент, СтандартнаяОбработка)

	ПродажиКлиент.ОткрытьФормуСозданияДоговора(
		ЭтотОбъект,
		Элемент,
		"ТорговаяПлощадкаДоговорВзаимозачетов",
		ТорговаяПлощадкаПартнер,
		СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура РозничныйПартнерПриИзменении(Элемент)

	ЗаполнитьУсловияПродажПоУмолчанию(Ложь);
	Если ЗначениеЗаполнено(РозничныйСоглашение) Тогда
		ЗаполнитьУсловияПродажПоСоглашению(РозничныйСоглашение, Ложь);
	Иначе
		РозничныйДоговорИзменитьВидимостьДоступность();
	КонецЕсли;

	СохранитьНастройки();

КонецПроцедуры

&НаКлиенте
Процедура РозничныйКонтрагентПриИзменении(Элемент)

	ЗаполнитьДоговорПоУмолчанию(Ложь);

	СохранитьНастройки();

КонецПроцедуры

&НаКлиенте
Процедура РозничныйСоглашениеПриИзменении(Элемент)

	ОчиститьСообщения();

	ПроверкаПройдена = ПроверкаСоглашенияПройдена(РозничныйСоглашение, Ложь);

	Если ПроверкаПройдена Тогда
		Если ЗначениеЗаполнено(РозничныйСоглашение) Тогда
			ЗаполнитьУсловияПродажПоСоглашению(РозничныйСоглашение, Ложь);
		Иначе
			РозничныйДоговорИзменитьВидимостьДоступность();
		КонецЕсли;

		СохранитьНастройки();
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Выберите соглашение, для которого возможна отгрузка без перехода права собственности.'"),
			,
			Элемент.Имя);
		РозничныйСоглашение = ЗначениеДоИзменения;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РозничныйСоглашениеНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)

	ЗначениеДоИзменения = РозничныйСоглашение;

	ПараметрыВыбораСоглашения = ПродажиКлиент.ПараметрыНачалаВыбораСоглашенияСКлиентом();

	ПараметрыВыбораСоглашения.Элемент               = Элемент;
	ПараметрыВыбораСоглашения.Организация           = Организация;
	ПараметрыВыбораСоглашения.Партнер               = РозничныйПартнер;
	ПараметрыВыбораСоглашения.Документ              = РозничныйСоглашение;
	ПараметрыВыбораСоглашения.ДатаДокумента         = ОбщегоНазначенияУТВызовСервера.ДатаСеанса();
	ПараметрыВыбораСоглашения.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияКлиенту");

	ДанныеФормыСтруктура = Новый Структура;
	ДанныеФормыСтруктура.Вставить("Партнер",    РозничныйПартнер);
	ДанныеФормыСтруктура.Вставить("Контрагент", РозничныйКонтрагент);
	ПараметрыВыбораСоглашения.ДанныеФормыСтруктура  = ДанныеФормыСтруктура;

	ПараметрыВыбора = Новый Массив;
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Валюта",                ВалютаУчета));
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Организация",           Организация));
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация",
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияКлиенту")));
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);

	ПродажиКлиент.НачалоВыбораСоглашенияСКлиентом(ПараметрыВыбораСоглашения, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура РозничныйСоглашениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)

	ЗначениеДоИзменения = РозничныйСоглашение;

КонецПроцедуры

&НаКлиенте
Процедура РозничныйДоговорПриИзменении(Элемент)

	СохранитьНастройки();

КонецПроцедуры

&НаКлиенте
Процедура РозничныйДоговорСоздание(Элемент, СтандартнаяОбработка)

	ПродажиКлиент.ОткрытьФормуСозданияДоговора(ЭтотОбъект,
		Элемент,
		"РозничныйДоговор",
		РозничныйПартнер,
		СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура СоздаватьЗадачуОповещениеПриИзменении(Элемент)

	СохранитьНастройки();

КонецПроцедуры

&НаКлиенте
Процедура УслугаПродажиЧерезТорговуюПлощадкуПриИзменении(Элемент)

	СохранитьНастройки();

КонецПроцедуры

&НаКлиенте
Процедура ПричинаОтменыПоУмолчаниюПриИзменении(Элемент)
	
	СохранитьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПричинаОтменыПоУмолчаниюСтрокойНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("УчетнаяЗапись", УчетнаяЗаписьМаркетплейса);
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("ПричинаОтменыПоУмолчаниюЗавершениеВыбора", ЭтотОбъект,);
	ОткрытьФорму(
		"РегистрСведений.ЗаказыТорговыхПлощадок.Форма.ВыборПричиныОтмены",
		ПараметрыОткрытия,
		ЭтотОбъект,
		,,,
		ОповещениеЗавершения);
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаСкладовFBS

&НаКлиенте
Процедура ТаблицаСкладовFBSВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	ТекущиеДанные = Элемент.ТекущиеДанные;
	ИмяПоля = СтрЗаменить(Поле.Имя, Элемент.Имя, "");

	Если ИмяПоля = "СпособДоставки" Тогда
		СтандартнаяОбработка = Ложь;

		Если Не ЗначениеЗаполнено(ТекущиеДанные.Склад1С) Тогда
			Возврат;
		КонецЕсли;

		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("УчетнаяЗапись",       УчетнаяЗаписьМаркетплейса);
		ПараметрыФормы.Вставить("Партнер",             ТорговаяПлощадкаПартнер);
		ПараметрыФормы.Вставить("ИдентификаторСклада", ТекущиеДанные.ИдентификаторОбъектаМаркетплейса);

		ОбработчикВыбораЗначений = Новый ОписаниеОповещения("ЗавершениеЗаполненияНастроекСпособаДоставки", ЭтотОбъект);
		ОткрытьФорму(
			"РегистрСведений.СоответствияОбъектовМаркетплейсов.Форма.НастройкиСклада",
			ПараметрыФормы,
			ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСкладовFBSСкладНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)

	ЗначениеДоИзменения = Неопределено;

	ТекущиеДанные = Элементы.ТаблицаСкладовFBS.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ЗначениеДоИзменения = ТекущиеДанные.Склад1С;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСкладовFBSСкладПриИзменении(Элемент)

	ОчиститьСообщения();

	ЗаписатьСклад(Элементы.ТаблицаСкладовFBS);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаСкладовFBO

&НаКлиенте
Процедура ТаблицаСкладовFBOПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	ОчиститьСообщения();

	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если НоваяСтрока Тогда
		ТекущиеДанные.ИдентификаторОбъектаМаркетплейса = Новый УникальныйИдентификатор;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСкладовFBOПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ЗаписатьСклад(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСкладовFBOПередУдалением(Элемент, Отказ)
	ЗаписатьСклад(Элемент,, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСкладовFBOПослеУдаления(Элемент)

	ПараметрыОбновления = ПараметрыОбновленияСтраницыНастройкиПоСхемамРаботы();
	ПараметрыОбновления.ОбновитьЗаголовокСпискаСкладовFBO = Истина;
	ОбновитьЭлементыСтраницыНастройкиПоСхемамРаботы(ПараметрыОбновления);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРегистрОграничениеОстатка

&НаКлиенте
Процедура РегистрОграничениеОстаткаПослеУдаления(Элемент)

	ПодключитьОбработчикОжидания("ОбновитьЗаголовокОграниченияВыгрузкиОстатков_Подключаемый", 0.1, Истина);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура РегистрОграничениеОстаткаПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)

	Для Каждого СтрокаСписка Из Строки Цикл
		СтрокаСписка.Значение.Данные.ПредставлениеОбластиДействия =
				Строка(СтрокаСписка.Значение.Данные.ОбластьДействия) + " (" + Строка(СтрокаСписка.Значение.Данные.ТипОбластиДействия) + ")";
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Далее(Команда)

	СменитьСтраницу("_Далее");

КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)

	СменитьСтраницу("_Назад");

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСопоставлениеКатегорий(Команда)

	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Обработка.УправлениеПродажамиНаOzon.Форма.СопоставлениеКатегорий.ОткрытиеФормыСопоставленияКатегорий");

	Если Не ЗначениеЗаполнено(УчетнаяЗаписьМаркетплейса) Тогда
		ТекстСообщения = НСтр("ru = 'Не выбрана учетная запись для заполнения настроек.'");
		ПоказатьПредупреждение(, ТекстСообщения,, НСтр("ru = 'Настройки обмена данными с Ozon'"));
		Возврат;
	КонецЕсли;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
	ОткрытьФорму("Обработка.УправлениеПродажамиНаOzon.Форма.СопоставлениеКатегорий", ПараметрыФормы);
	Оповестить("ОткрытиеФормыСопоставленияКатегорий", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСопоставлениеТиповСертификатов(Команда)

	ПараметрыФормы = Новый Структура("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
	ОткрытьФорму("Обработка.УправлениеПродажамиНаOzon.Форма.СопоставлениеТиповСертификатов", ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРасписаниеВыгрузкиТоварногоКаталога(Команда)

	Префиксы = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПрефиксыСервиса();
	Наименование = ИнтеграцияСМаркетплейсомOzonКлиентСервер.НаименованиеРегламентногоЗадания(Префиксы.ОбновлениеТоварногоКаталога);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
	ПараметрыФормы.Вставить("Наименование", Наименование);
	ПараметрыФормы.Вставить("ИмяМетаданных", "ОбновлениеТоварногоКаталогаOzon");
	ПараметрыФормы.Вставить("Префикс", Префиксы.ОбновлениеТоварногоКаталога);
	ПараметрыФормы.Вставить("ОткрыватьПодОграниченнымиПравами", Истина);
	ОткрытьФорму("Справочник.УчетныеЗаписиМаркетплейсов.Форма.РегламентноеЗадание", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРасписаниеВыгрузкиЦен(Команда)

	Префиксы = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПрефиксыСервиса();
	Наименование = ИнтеграцияСМаркетплейсомOzonКлиентСервер.НаименованиеРегламентногоЗадания(Префиксы.ВыгрузкаЦен);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
	ПараметрыФормы.Вставить("Наименование", Наименование);
	ПараметрыФормы.Вставить("ИмяМетаданных", "ВыгрузкаЦенНаМаркетплейсOzon");
	ПараметрыФормы.Вставить("Префикс", Префиксы.ВыгрузкаЦен);
	ПараметрыФормы.Вставить("ОткрыватьПодОграниченнымиПравами", Истина);
	ОткрытьФорму("Справочник.УчетныеЗаписиМаркетплейсов.Форма.РегламентноеЗадание", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРасписаниеОбновленияЦен(Команда)

	ОткрытьФорму("Справочник.ВидыЦен.Форма.ФормаНастройкиРасписанияАвтообновленияЦен",, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРасписаниеВыгрузкиОстатковТоваров(Команда)

	Префиксы = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПрефиксыСервиса();
	Наименование = ИнтеграцияСМаркетплейсомOzonКлиентСервер.НаименованиеРегламентногоЗадания(Префиксы.ВыгрузкаОстатков);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
	ПараметрыФормы.Вставить("Наименование", Наименование);
	ПараметрыФормы.Вставить("ИмяМетаданных", "ВыгрузкаОстатковНаМаркетплейсOzon");
	ПараметрыФормы.Вставить("Префикс", Префиксы.ВыгрузкаОстатков);
	ПараметрыФормы.Вставить("ОткрыватьПодОграниченнымиПравами", Истина);
	ОткрытьФорму("Справочник.УчетныеЗаписиМаркетплейсов.Форма.РегламентноеЗадание", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРасписаниеЗагрузкиОстатков(Команда)

	Префиксы = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПрефиксыСервиса();
	Наименование = ИнтеграцияСМаркетплейсомOzonКлиентСервер.НаименованиеРегламентногоЗадания(Префиксы.ЗагрузкаОстатков);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
	ПараметрыФормы.Вставить("Наименование", Наименование);
	ПараметрыФормы.Вставить("ИмяМетаданных", "ЗагрузкаОстатковСМаркетплейсаOzon");
	ПараметрыФормы.Вставить("Префикс", Префиксы.ЗагрузкаОстатков);
	ПараметрыФормы.Вставить("ОткрыватьПодОграниченнымиПравами", Истина);
	ОткрытьФорму("Справочник.УчетныеЗаписиМаркетплейсов.Форма.РегламентноеЗадание", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСведения(Команда)

	ОбновитьСписокСкладовFBS();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокВидовЦен(Команда)

	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьСписокВидовЦенЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.ВидыЦен.Форма.ФормаСписка",,,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРасписаниеЗагрузкиНовыхЗаказов(Команда)

	Префиксы = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПрефиксыСервиса();
	Наименование = ИнтеграцияСМаркетплейсомOzonКлиентСервер.НаименованиеРегламентногоЗадания(
		Префиксы.ЗагрузкаНеобработанныхЗаказовСТорговойПлощадки);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
	ПараметрыФормы.Вставить("Наименование",              Наименование);
	ПараметрыФормы.Вставить("ИмяМетаданных",             "ЗагрузкаНеобработанныхЗаказовСТорговойПлощадки");
	ПараметрыФормы.Вставить("Префикс",                   Префиксы.ЗагрузкаНеобработанныхЗаказовСТорговойПлощадки);
	ПараметрыФормы.Вставить("ОткрыватьПодОграниченнымиПравами", Истина);
	ОткрытьФорму("Справочник.УчетныеЗаписиМаркетплейсов.Форма.РегламентноеЗадание", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРасписаниеОбновленияСтатусовЗаказов(Команда)

	Префиксы = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПрефиксыСервиса();
	Наименование = ИнтеграцияСМаркетплейсомOzonКлиентСервер.НаименованиеРегламентногоЗадания(
		Префиксы.ОбновлениеСтатусовЗаказовТорговойПлощадки);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
	ПараметрыФормы.Вставить("Наименование",              Наименование);
	ПараметрыФормы.Вставить("ИмяМетаданных",             "ОбновлениеСтатусовЗаказовТорговойПлощадки");
	ПараметрыФормы.Вставить("Префикс",                   Префиксы.ОбновлениеСтатусовЗаказовТорговойПлощадки);
	ПараметрыФормы.Вставить("ОткрыватьПодОграниченнымиПравами", Истина);
	ОткрытьФорму("Справочник.УчетныеЗаписиМаркетплейсов.Форма.РегламентноеЗадание", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРасписаниеЗагрузкиДанныхОРеализованныхТоварах(Команда)

	Префиксы = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПрефиксыСервиса();
	Наименование = ИнтеграцияСМаркетплейсомOzonКлиентСервер.НаименованиеРегламентногоЗадания(
		Префиксы.ЗагрузкаИнформацииОПродажахТоваров);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
	ПараметрыФормы.Вставить("Наименование",              Наименование);
	ПараметрыФормы.Вставить("ИмяМетаданных",             "ЗагрузкаИнформацииОПродажахТоваровЧерезТорговуюПлощадку");
	ПараметрыФормы.Вставить("Префикс",                   Префиксы.ЗагрузкаИнформацииОПродажахТоваров);
	ПараметрыФормы.Вставить("ОткрыватьПодОграниченнымиПравами", Истина);
	ОткрытьФорму("Справочник.УчетныеЗаписиМаркетплейсов.Форма.РегламентноеЗадание", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ПодобратьИзПредопределенныхСкладов(Команда)

	ОткрытьФорму("Обработка.УправлениеПродажамиНаOzon.Форма.ВыборСкладовFBO");

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	// Статус склада
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаСкладовFBSНаименованиеОбъектаМаркетплейса.Имя);

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаСкладовFBS.Статус");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаСкладовFBS.Статус");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = "Активен";
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	//
	Для каждого ЭлементКоллекции Из Элементы.ТаблицаСкладовFBSСтатус.СписокВыбора Цикл
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаСкладовFBSСтатус.Имя);

		ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаСкладовFBS.Статус");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = ЭлементКоллекции.Значение;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", ЭлементКоллекции.Представление);
	КонецЦикла;

	// Выбор склада FBS/RealFBS
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаСкладовFBSСклад1С.Имя);

	ОтборЭлемента               = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаСкладовFBS.Склад1С");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Выбрать склад / группу складов 1С>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);

	// Гиперссылка заполнения настроек
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаСкладовFBSСпособДоставки.Имя);

	ОтборЭлемента               = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаСкладовFBS.ЗаполненыНастройкиСклада");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Настроить'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);

	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаСкладовFBSСпособДоставки.Имя);

	ОтборЭлемента               = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаСкладовFBS.ЗаполненыНастройкиСклада");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Изменить'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаСкладовFBSСпособДоставки.Имя);

	ОтборЭлемента               = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаСкладовFBS.Склад1С");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементовФормы()

	ДоступностьЭлементовФормыПоУчетнойЗаписи = ЗначениеЗаполнено(УчетнаяЗаписьМаркетплейса);

	Элементы.ИсточникКатегории.Доступность = ДоступностьЭлементовФормыПоУчетнойЗаписи;
	Элементы.ОткрытьСопоставлениеКатегорий.Доступность = ДоступностьЭлементовФормыПоУчетнойЗаписи;
	Элементы.ОткрытьСопоставлениеТиповДокументовСертификатов.Доступность = ДоступностьЭлементовФормыПоУчетнойЗаписи
			И ПолучитьФункциональнуюОпцию("ИспользоватьСертификатыНоменклатуры");
	Элементы.ДекорацияАвторизоватьПриложение.Доступность = ДоступностьЭлементовФормыПоУчетнойЗаписи;
	Элементы.ОткрытьРасписаниеВыгрузкиТоварногоКаталога.Доступность = ДоступностьЭлементовФормыПоУчетнойЗаписи;
	Элементы.ВалютаУчета.Доступность = ДоступностьЭлементовФормыПоУчетнойЗаписи
			И ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют");
	Элементы.ВидЦеныДоСкидок.Доступность = ДоступностьЭлементовФормыПоУчетнойЗаписи;
	Элементы.ВидЦеныСУчетомСкидок.Доступность = ДоступностьЭлементовФормыПоУчетнойЗаписи;
	Элементы.ВидЦеныМинимальныхЦен.Доступность = ДоступностьЭлементовФормыПоУчетнойЗаписи;
	Элементы.ОткрытьРасписаниеВыгрузкиЦен.Доступность = ДоступностьЭлементовФормыПоУчетнойЗаписи;
	Элементы.ОткрытьСписокВидовЦен.Доступность = ДоступностьЭлементовФормыПоУчетнойЗаписи;
	Элементы.ОткрытьРасписаниеОбновленияЦен.Доступность = ДоступностьЭлементовФормыПоУчетнойЗаписи;

	Если Элементы.Страницы.ТекущаяСтраница <> Элементы.СтраницаНастройкиОбменаОстатками Тогда
		ИзменитьПоведениеГруппы("ГруппаНастройкиСкладов", Истина, Ложь);
	КонецЕсли;
	Если Элементы.Страницы.ТекущаяСтраница <> Элементы.СтраницаНастройкиПоСхемамРаботы Тогда
		ИзменитьПоведениеГруппы("ГруппаНастройкиПоСхемамРаботы", Истина);
	КонецЕсли;

	Элементы.ДекорацияТолькоFBS.Доступность = ДоступностьЭлементовФормыПоУчетнойЗаписи;
	Элементы.ДекорацияFBOиFBS.Доступность = ДоступностьЭлементовФормыПоУчетнойЗаписи;
	Элементы.ОбновитьСведения.Доступность = ДоступностьЭлементовФормыПоУчетнойЗаписи;
	Элементы.ТаблицаСкладовFBS.Доступность = ДоступностьЭлементовФормыПоУчетнойЗаписи;
	Элементы.РегистрОграничениеОстатка.Доступность = ДоступностьЭлементовФормыПоУчетнойЗаписи;
	Элементы.ОткрытьРасписаниеВыгрузкиОстатковТоваров.Доступность = ДоступностьЭлементовФормыПоУчетнойЗаписи;
	Элементы.ОткрытьРасписаниеЗагрузкиОстатков.Доступность = ДоступностьЭлементовФормыПоУчетнойЗаписи;
	Элементы.ГруппаНастройкиПоСхемамРаботы.Доступность = ДоступностьЭлементовФормыПоУчетнойЗаписи;

КонецПроцедуры

&НаСервере
Процедура ИзменитьПоведениеГруппы(Знач Группа, Свернуть, Видимость = Истина)

	Если ТипЗнч(Группа) = Тип("Массив") Тогда
		ИзменяемыеГруппы = Группа;
	Иначе
		ИзменяемыеГруппы = Новый Массив;
		ИзменяемыеГруппы.Добавить(Группа);
	КонецЕсли;

	Для Каждого Группа Из ИзменяемыеГруппы Цикл
		Если Свернуть Тогда
			Элементы[Группа].ОтображатьЗаголовок = Истина;
			Элементы[Группа].Поведение = ПоведениеОбычнойГруппы.Свертываемая;
			Элементы[Группа].Скрыть();
		Иначе
			Элементы[Группа].ОтображатьЗаголовок = Ложь;
			Элементы[Группа].Поведение = ПоведениеОбычнойГруппы.Обычное;
		КонецЕсли;

		Элементы[Группа].Видимость = Видимость;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодключенияКСервису()

	ОписаниеОповещения = Новый ОписаниеОповещения("ПодключениеКСервисуЗавершение", ЭтотОбъект);

	ОткрытьФорму("Обработка.УправлениеПродажамиНаOzon.Форма.ПодключениеКСервису",,
		ЭтотОбъект,
		,
		,
		,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура ПодключениеКСервисуЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Не ПодключениеКСервисуВыполнено Тогда
		Закрыть();
	Иначе
		ОбновитьСписокУчетныхЗаписей(УчетнаяЗаписьМаркетплейса);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция СоответствиеПереключенияСтраниц()

	СоответствиеПереключенияСтраниц = Новый Соответствие;
	СоответствиеПереключенияСтраниц.Вставить("СтраницаСопоставлениеДанных_Далее", "СтраницаНастройкиОбновленияЦен");
	СоответствиеПереключенияСтраниц.Вставить("СтраницаНастройкиОбновленияЦен_Далее", "СтраницаНастройкиОбменаОстатками");
	СоответствиеПереключенияСтраниц.Вставить("СтраницаНастройкиОбновленияЦен_Назад", "СтраницаСопоставлениеДанных");
	СоответствиеПереключенияСтраниц.Вставить("СтраницаНастройкиОбменаОстатками_Далее", "СтраницаНастройкиПоСхемамРаботы");
	СоответствиеПереключенияСтраниц.Вставить("СтраницаНастройкиОбменаОстатками_Назад", "СтраницаНастройкиОбновленияЦен");
	СоответствиеПереключенияСтраниц.Вставить("СтраницаНастройкиПоСхемамРаботы_Назад", "СтраницаНастройкиОбменаОстатками");

	Возврат СоответствиеПереключенияСтраниц;

КонецФункции

&НаКлиенте
Процедура СменитьСтраницу(Постфикс)

	СоответствиеПереключенияСтраниц = СоответствиеПереключенияСтраниц(); 
	ИмяСтраницы = СоответствиеПереключенияСтраниц[Элементы.Страницы.ТекущаяСтраница.Имя + Постфикс];
	Если ЗначениеЗаполнено(ИмяСтраницы) Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы[СоответствиеПереключенияСтраниц[Элементы.Страницы.ТекущаяСтраница.Имя + Постфикс]];
		СтраницыПриСменеСтраницы(Элементы.Страницы, Элементы.Страницы.ТекущаяСтраница);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокСкладовFBS()

	ОчиститьСообщения();

	ТаблицаСкладовFBS.Очистить();

	Если УчетнаяЗаписьМаркетплейса.Пустая() Тогда
		ЗапущеноЗаданиеОбновленияСкладов = Ложь;
		Элементы.ДекорацияДлительноеОжидание.Видимость = Ложь;

		ЕстьВиртуальныеСклады = Ложь;
		ЕстьВиртуальныеСкладыПриИзмененииНаСервере();
		Возврат;
	КонецЕсли;

	Если Не ЗапущеноЗаданиеОбновленияСкладов Тогда
		Элементы.ДекорацияДлительноеОжидание.Видимость = Истина;

		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПолучениеСпискаСкладовЗавершение", ЭтотОбъект);
		ДлительнаяОперация = ЗапуститьПолучениеСпискаСкладов(УчетнаяЗаписьМаркетплейса, УникальныйИдентификатор);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ИзменитьРежимВыбораСкладовFBS()

	ИспользоватьНесколькоСкладов = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	Элементы.ТаблицаСкладовFBSСклад1С.КнопкаВыбора = ИспользоватьНесколькоСкладов;
	Элементы.ТаблицаСкладовFBSСклад1С.КнопкаОткрытия = ИспользоватьНесколькоСкладов;
	Элементы.ТаблицаСкладовFBSСклад1С.КнопкаВыпадающегоСписка = Не ИспользоватьНесколькоСкладов;
	Элементы.ТаблицаСкладовFBSСклад1С.РедактированиеТекста = ИспользоватьНесколькоСкладов;
	Если ИспользоватьНесколькоСкладов Тогда
		ПродажиСервер.УстановитьРежимВыбораГруппЭлементовСклада(Элементы.ТаблицаСкладовFBSСклад1С);
	Иначе
		ОсновнойСклад = Справочники.Склады.СкладПоУмолчанию();
		Элементы.ТаблицаСкладовFBSСклад1С.СписокВыбора.Очистить();
		Если ЗначениеЗаполнено(ОсновнойСклад) Тогда
			Элементы.ТаблицаСкладовFBSСклад1С.СписокВыбора.Добавить(ОсновнойСклад);
		КонецЕсли;
	КонецЕсли;

	Элементы.ТаблицаСкладовFBSСпособДоставки.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой");

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовокОграниченияВыгрузкиОстатков_Подключаемый()

	ОбновитьЗаголовокОграниченияВыгрузкиОстатков();

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапуститьПолучениеСпискаСкладов(УчетнаяЗаписьМаркетплейса, УникальныйИдентификатор)

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Ozon. Получение списка складов.'");

	ИмяМетода = "ИнтеграцияСМаркетплейсомOzonСервер.ПолучитьСкладыСервиса";
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, ИмяМетода, УчетнаяЗаписьМаркетплейса);

КонецФункции

&НаКлиенте
Процедура ПолучениеСпискаСкладовЗавершение(РезультатЗадания, ДополнительныеПараметры) Экспорт

	ОчиститьСообщения();

	Если РезультатЗадания <> Неопределено И РезультатЗадания.Статус = "Выполнено" Тогда
		ПолучениеСпискаСкладовЗавершениеНаСервере(РезультатЗадания.АдресРезультата);
	ИначеЕсли Не ЭтоЗакрытиеФормы Тогда  
		ШаблонОшибки = НСтр("ru = 'Не удалось получить склады учетной записи ""%1"" по причине: %2'");
		ПредставлениеНеизвестнойОшибки = НСтр("ru = 'Неизвестная ошибка выполнения операции'");
		ПодробноеПредставлениеОшибки = ?(РезультатЗадания = Неопределено, ПредставлениеНеизвестнойОшибки, РезультатЗадания.ПодробноеПредставлениеОшибки);
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОшибки,
				УчетнаяЗаписьМаркетплейса,
				ПодробноеПредставлениеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);

		ОбновитьЗаголовокОграниченияВыгрузкиОстатков();
	КонецЕсли;

	ЗапущеноЗаданиеОбновленияСкладов = Ложь;
	Элементы.ДекорацияДлительноеОжидание.Видимость = Ложь;

КонецПроцедуры

&НаСервере
Процедура ПолучениеСпискаСкладовЗавершениеНаСервере(АдресРезультата)

	ОбновитьЗаголовокОграниченияВыгрузкиОстатков();

	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	УдалитьИзВременногоХранилища(АдресРезультата);

	ОшибкаПолученияСкладовИзСервиса = Результат.ОшибкаПолученияСкладовИзСервиса;
	Если ОшибкаПолученияСкладовИзСервиса Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось получить список складов маркетплейса. Подробнее см. журнал регистрации.
				|Заполнение списка складов выполнено из сохраненных настроек.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

	ТаблицаСкладовПолученная = Результат.ТаблицаСкладов;
	ЗначениеВРеквизитФормы(ТаблицаСкладовПолученная, "ТаблицаСкладовFBS");

	ЕстьВиртуальныеСклады = (ТаблицаСкладовПолученная.Количество() > 0);

	ЕстьВиртуальныеСкладыПриИзмененииНаСервере();

КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокОграниченияВыгрузкиОстатков()

	ШаблонЗаголовка = НСтр("ru = 'Настройки ограничения выгрузки остатков'");
	Количество = КоличествоЗаписейОграниченияВыгрузкиОстатков(УчетнаяЗаписьМаркетплейса); 
	ЗаголовокЭлемента = ШаблонЗаголовка + ?(Количество = 0, "", " (" + Количество + ")");
	Элементы.ГруппаНастройкиОграниченияОстатков.Заголовок = ЗаголовокЭлемента;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
// Конструктор списка параметров для обновления страницы настроек по схемам работы.
// 
// Параметры:
//  ЗначениеПоУмолчанию - Булево - Значение, устанавливаемое параметрам как значение по умолчанию;
//                                - Ложь - значение по умолчанию.
//
// Возвращаемое значение:
//  Структура - список параметров:
//   * ОбновитьСписокСкладовFBO             - Булево - признак необходимости обновления;
//   * ОбновитьЗаголовокСпискаСкладовFBO    - Булево - признак необходимости обновления;
//   * ОбновитьЭлементыКомиссионнойПродажи  - Булево - признак необходимости обновления;
//   * ОбновитьЗаголовкиОрдернойСхемы       - Булево - признак необходимости обновления.
//
Функция ПараметрыОбновленияСтраницыНастройкиПоСхемамРаботы(ЗначениеПоУмолчанию = Ложь)

	ПараметрыОбновленияСтраницы = Новый Структура;
	ПараметрыОбновленияСтраницы.Вставить("ЭтоСменаСтраницы", Ложь);
	ПараметрыОбновленияСтраницы.Вставить("ОбновитьСписокСкладовFBO", ЗначениеПоУмолчанию);
	ПараметрыОбновленияСтраницы.Вставить("ОбновитьЗаголовокСпискаСкладовFBO", ЗначениеПоУмолчанию);
	ПараметрыОбновленияСтраницы.Вставить("ОбновитьЭлементыКомиссионнойПродажи", ЗначениеПоУмолчанию);
	ПараметрыОбновленияСтраницы.Вставить("ОбновитьЗаголовкиОрдернойСхемы", ЗначениеПоУмолчанию);

	Возврат ПараметрыОбновленияСтраницы;

КонецФункции

&НаСервере
// Предназначена для обновления элементов страницы с настройками по схемам работы.
//
// Параметры:
//   ПараметрыОбновления - см. ПараметрыОбновленияСтраницыНастройкиПоСхемамРаботы.
//
Процедура ОбновитьЭлементыСтраницыНастройкиПоСхемамРаботы(ПараметрыОбновления)

	Если ПараметрыОбновления.ЭтоСменаСтраницы Тогда
		ИзменитьПоведениеГруппы("ГруппаНастройкиПоСхемамРаботы", Ложь);
	КонецЕсли;

	Если ПараметрыОбновления.ОбновитьЭлементыКомиссионнойПродажи Тогда
		СохранитьИзмененияНастроек = Ложь;

		ОтображениеПризнакаУчетаМаркировки();
		ЗаполнениеПодсказкиРеализацияВПути();

		ИспользоватьКомиссию                 = ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриПродажах");
		ИспользоватьТоварыВПути              = ПолучитьФункциональнуюОпцию("ИспользоватьОтгрузкуБезПереходаПраваСобственности");
		ИспользоватьПартнеровКакКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
		ИспользоватьСоглашения               = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
		ИспользоватьДоговоры                 = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами");

		КомиссияFBO     = (СпособОтраженияПродажFBO = "Комиссия");
		РеализацияFBS   = (СпособОтраженияПродажFBS = "РеализацияВПути");
		КомиссияFBS     = (СпособОтраженияПродажFBS = "Комиссия");
		ИспользуетсяFBS = (СпособОтраженияПродажFBS <> "НеИспользуются");

		Если Не ИспользоватьКомиссию И КомиссияFBO Тогда
			СпособОтраженияПродажFBO = "НеИспользуются";
			СохранитьИзмененияНастроек = Истина;
		КонецЕсли;

		Если Не ИспользоватьКомиссию И КомиссияFBS Тогда
			СпособОтраженияПродажFBS = "НеИспользуются";
			СохранитьИзмененияНастроек = Истина;
		КонецЕсли;

		Элементы.СпособОтраженияПродажFBOКомиссия.Доступность               = ИспользоватьКомиссию;
		Элементы.ГруппаСпособОтраженияПродажFBOКомиссияНеДоступен.Видимость = Не ИспользоватьКомиссию;
		Элементы.ГруппаСкладыFBO.Видимость                                  = КомиссияFBO;

		Элементы.СпособОтраженияПродажFBSРеализация.Доступность                = ИспользоватьТоварыВПути;
		Элементы.ГруппаСпособОтраженияПродажFBSТоварыВПутиНеДоступен.Видимость = Не ИспользоватьТоварыВПути;
		Элементы.ГруппаСведенияОРозничномПокупателе1.Доступность               = РеализацияFBS;

		Элементы.СпособОтраженияПродажFBSКомиссия.Доступность               = ИспользоватьКомиссию;
		Элементы.ГруппаСпособОтраженияПродажFBSКомиссияНеДоступен.Видимость = Не ИспользоватьКомиссию;

		Если Не КомиссияFBO
				Или Не ИспользуетсяFBS
				Или РеализацияFBS
				Или КомиссияFBO
					И КомиссияFBS
					И ЗначениеЗаполнено(ТорговаяПлощадкаДоговорFBO)
					И ТорговаяПлощадкаДоговорFBO = ТорговаяПлощадкаДоговорFBS Тогда
			ПродажиРазделяютсяПоДоговорам = Ложь;
		Иначе
			ПродажиРазделяютсяПоДоговорам = Истина;
		КонецЕсли;

		Элементы.РозничныйКонтрагент.Видимость = Не ИспользоватьПартнеровКакКонтрагентов;
		Элементы.РозничныйСоглашение.Видимость = ИспользоватьСоглашения;
		РозничныйДоговорИзменитьВидимостьДоступность();

		Элементы.ТорговаяПлощадкаКонтрагент.Видимость    = Не ИспользоватьПартнеровКакКонтрагентов;
		Элементы.ПродажиРазделяютсяПоДоговорам.Видимость = КомиссияFBO И КомиссияFBS;
		Элементы.ТорговаяПлощадкаСоглашение1.Видимость   = ИспользоватьСоглашения И КомиссияFBO И КомиссияFBS;
		Элементы.ТорговаяПлощадкаСоглашение2.Видимость   = ИспользоватьСоглашения
			И (КомиссияFBO И Не ИспользуетсяFBS
				Или КомиссияFBO И РеализацияFBS
				Или Не КомиссияFBO И КомиссияFBS);

		Элементы.ТорговаяПлощадкаДоговорFBO.Видимость           = КомиссияFBO И ИспользоватьДоговоры;
		Элементы.ТорговаяПлощадкаДоговорFBS.Видимость           = КомиссияFBS И (ПродажиРазделяютсяПоДоговорам Или Не КомиссияFBO);
		Элементы.ТорговаяПлощадкаДоговорВзаимозачетов.Видимость = ИспользоватьДоговоры И Не КомиссияFBO И РеализацияFBS;

		Элементы.ГруппаДанныеТорговойПлощадки.Видимость                        = КомиссияFBO Или ИспользуетсяFBS;
		Элементы.ГруппаУправлениеЗаказамиFBS.Видимость                         = КомиссияFBO Или ИспользуетсяFBS;
		Элементы.ГруппаНастройкиЗагрузкиОтчетовОРеализованныхТоварах.Видимость = КомиссияFBO Или ИспользуетсяFBS;

		ОтображениеРежимаЗаказа();

		Элементы.ДекорацияПродажиРазделяютсяПоДоговорамПодсказка.Видимость = КомиссияFBO И КомиссияFBS;
		Элементы.УслугаПродажиЧерезТорговуюПлощадку.Видимость = КомиссияFBO Или КомиссияFBS;
		
		Если СохранитьИзмененияНастроек Тогда
			СохранитьНастройкиНаСервере();
		КонецЕсли;

		Если Не КомиссияFBO Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ПараметрыОбновления.ОбновитьСписокСкладовFBO Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъектаМаркетплейса,
			|	СоответствияОбъектовМаркетплейсов.НаименованиеОбъектаМаркетплейса КАК НаименованиеОбъектаМаркетплейса,
			|	СоответствияОбъектовМаркетплейсов.ДополнительныеСведения КАК ДополнительныеСведения
			|ИЗ
			|	РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
			|ГДЕ
			|	СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса
			|	И СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Склад)
			|	И СоответствияОбъектовМаркетплейсов.ИспользуетсяДляСхемыРаботыFBO";

		ТаблицаСкладовFBO.Загрузить(Запрос.Выполнить().Выгрузить());
	КонецЕсли;

	Если ПараметрыОбновления.ОбновитьЗаголовокСпискаСкладовFBO Тогда
		ШаблонЗаголовкаСпискаСкладов = НСтр("ru = 'Список складов, доступных для формирования поставок'");
		Элементы.ГруппаСписокСкладовFBO.Заголовок = ШаблонЗаголовкаСпискаСкладов
				+ ?(ТаблицаСкладовFBO.Количество(), " (" + ТаблицаСкладовFBO.Количество() + ")", "");
	КонецЕсли;

	Если ПараметрыОбновления.ОбновитьЗаголовкиОрдернойСхемы Тогда
		Прочитать();

		ИспользоватьОрдерныеСклады = ПолучитьФункциональнуюОпцию("ИспользоватьОрдерныеСклады");
		ИспользоватьОрдернуюСхемуПриОтгрузке = ПолучитьФункциональнуюОпцию("ИспользоватьОрдернуюСхемуПриОтгрузке");
		ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");

		Элементы.ДекорацияНастройкиОформленияРасходныхОрдеровЗаголовок1.Видимость = Не ИспользоватьОрдерныеСклады Или Не ИспользоватьОрдернуюСхемуПриОтгрузке;
		Элементы.ДекорацияНастройкиОформленияРасходныхОрдеровПодсказка1.Видимость = Не ИспользоватьОрдерныеСклады Или Не ИспользоватьОрдернуюСхемуПриОтгрузке;
		Элементы.ДекорацияНастройкиОформленияРасходныхОрдеровЗаголовок2.Видимость = ИспользоватьОрдерныеСклады И ИспользоватьОрдернуюСхемуПриОтгрузке;
		Элементы.ГруппаНастройкиОрдернойСхемы.Видимость                           = ИспользоватьОрдерныеСклады И ИспользоватьОрдернуюСхемуПриОтгрузке;

		Элементы.ФормированиеРасходныхОрдеровНаТоварыПоПравиламНастроекСистемыПодсказкаССоглашением.Видимость  = ИспользоватьСоглашенияСКлиентами;
		Элементы.ФормированиеРасходныхОрдеровНаТоварыПоПравиламНастроекСистемыПодсказкаБезСоглашения.Видимость = Не ИспользоватьСоглашенияСКлиентами;

		Если ИспользоватьОрдерныеСклады И ИспользоватьОрдернуюСхемуПриОтгрузке Тогда
			Элементы.РежимФормированияРасходныхОрдеров.Подсказка =
					Перечисления.РежимыФормированияРасходныхОрдеров.ПодсказкаПоРежимуФормирования(НаборКонстант.РежимФормированияРасходныхОрдеров);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура РозничныйДоговорИзменитьВидимостьДоступность()

	ИспользоватьСоглашения = Элементы.РозничныйСоглашение.Видимость;
	ИспользоватьДоговоры   = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами");

	Элементы.РозничныйДоговор.Видимость = ИспользоватьДоговоры
		И (Не ИспользоватьСоглашения
			Или ИспользоватьСоглашения
				И ЗначениеЗаполнено(РозничныйСоглашение)
				И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РозничныйСоглашение, "ИспользуютсяДоговорыКонтрагентов"));

	Если Не Элементы.РозничныйДоговор.Видимость Тогда
		РозничныйДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокУчетныхЗаписей(УчетнаяЗаписьПоУмолчанию = Неопределено)

	Если Не ЗначениеЗаполнено(УчетнаяЗаписьПоУмолчанию) Тогда
		УчетнаяЗаписьМаркетплейса = Справочники.УчетныеЗаписиМаркетплейсов.ОсновнаяУчетнаяЗапись(ПредопределенноеЗначение("Перечисление.ВидыМаркетплейсов.МаркетплейсOzon"));
	КонецЕсли;

	ПодключениеКСервисуВыполнено = ЗначениеЗаполнено(УчетнаяЗаписьМаркетплейса);
	Если Не ПодключениеКСервисуВыполнено Тогда
		СписокНастроекПодключенияКСервису = ИнтеграцияСМаркетплейсомOzonСервер.СписокНастроекПодключенияКСервису();
		ПодключениеКСервисуВыполнено = (СписокНастроекПодключенияКСервису.Количество() > 0);
	КонецЕсли;

	ЗаполнитьДанныеПоУчетнойЗаписи();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоУчетнойЗаписи()

	ИсточникНастроек =
		?(ЗначениеЗаполнено(УчетнаяЗаписьМаркетплейса), УчетнаяЗаписьМаркетплейса, Перечисления.ВидыМаркетплейсов.МаркетплейсOzon);
	НастройкиУчетнойЗаписи = Справочники.УчетныеЗаписиМаркетплейсов.НастройкиУчетнойЗаписи(ИсточникНастроек);

	ИсточникКатегории             = НастройкиУчетнойЗаписи.ИсточникКатегории;
	ВалютаУчета                   = НастройкиУчетнойЗаписи.ВалютаУчета;
	Организация                   = НастройкиУчетнойЗаписи.Организация;
	ТорговаяПлощадкаПартнер       = НастройкиУчетнойЗаписи.Партнер;
	ТорговаяПлощадкаКонтрагент    = НастройкиУчетнойЗаписи.Контрагент;
	ТорговаяПлощадкаСоглашение    = НастройкиУчетнойЗаписи.Соглашение;
	ТорговаяПлощадкаДоговорFBO    = НастройкиУчетнойЗаписи.ДоговорПродажиЧерезСкладыТорговойПлощадки;
	ТорговаяПлощадкаДоговорFBS    = НастройкиУчетнойЗаписи.ДоговорПродажиЧерезСкладыСобственные;
	ПродажиРазделяютсяПоДоговорам = (ТорговаяПлощадкаДоговорFBO <> ТорговаяПлощадкаДоговорFBS);

	УслугаПродажиЧерезТорговуюПлощадку  = НастройкиУчетнойЗаписи.УслугаПродажиЧерезТорговуюПлощадку;
	ПричинаОтменыПоУмолчанию            = НастройкиУчетнойЗаписи.ПричинаОтменыПоУмолчанию;
	ПричинаОтменыПоУмолчаниюСтрокой     = Строка(ПричинаОтменыПоУмолчанию);
	СпособОтраженияПродажFBO            = НастройкиУчетнойЗаписи.СпособОтраженияПродажFBO;
	СпособОтраженияПродажFBS            = НастройкиУчетнойЗаписи.СпособОтраженияПродажFBS;
	СпособОтраженияПродажFBSДоИзменения = СпособОтраженияПродажFBS;
	РозничныйПартнер                    = НастройкиУчетнойЗаписи.ПокупательПартнер;
	РозничныйКонтрагент                 = НастройкиУчетнойЗаписи.ПокупательКонтрагент;
	РозничныйСоглашение                 = НастройкиУчетнойЗаписи.ПокупательСоглашение;
	РозничныйДоговор                    = НастройкиУчетнойЗаписи.ПокупательДоговор;
	СоздаватьЗадачуОповещение           = НастройкиУчетнойЗаписи.СоздаватьЗадачуОповещение;

	ЗначениеНастройки = НастройкиУчетнойЗаписи.РучнаяЗагрузкаДанныхОРеализованныхТоварах;
	РучнаяЗагрузкаДанныхОРеализованныхТоварах =
		?(ЗначениеНастройки = Неопределено, Истина, ЗначениеНастройки); // Используется всегда

	ЗначениеНастройки = НастройкиУчетнойЗаписи.АвтоматическаяЗагрузкаДанныхОРеализованныхТоварах;
	АвтоматическаяЗагрузкаДанныхОРеализованныхТоварах =
		?(ЗначениеНастройки = Неопределено, Не ПродажиРазделяютсяПоДоговорам, ЗначениеНастройки);

	ЗначениеНастройки = НастройкиУчетнойЗаписи.АвтоматическаяЗагрузкаДанныхОРеализованныхТоварахЗаПредыдущийМесяц;
	АвтоматическаяЗагрузкаДанныхОРеализованныхТоварахЗаПредыдущийМесяц =
		?(ЗначениеНастройки = Неопределено, Не ПродажиРазделяютсяПоДоговорам, ЗначениеНастройки);

	ЗначениеНастройки = НастройкиУчетнойЗаписи.АвтоматическаяЗагрузкаДанныхОРеализованныхТоварахЗаТекущийМесяц;
	АвтоматическаяЗагрузкаДанныхОРеализованныхТоварахЗаТекущийМесяц =
		?(ЗначениеНастройки = Неопределено, Ложь, ЗначениеНастройки);

	ЗначениеНастройки = НастройкиУчетнойЗаписи.АвтоматическоеФормированиеРасходныхОрдеровНаТовары;
	АвтоматическоеФормированиеРасходныхОрдеровНаТовары =
		?(ЗначениеНастройки = Неопределено, Ложь, ЗначениеНастройки);

	Если Не ЗначениеЗаполнено(ВалютаУчета) Тогда
		ВалютаУчета = ЗначениеНастроекКлиентСерверПовтИсп.ВалютаРегламентированногоУчетаОрганизации(НастройкиУчетнойЗаписи.Организация);
		СохранитьНастройкиНаСервере();
	КонецЕсли;

	ВидЦеныДоСкидок = НастройкиУчетнойЗаписи.ВидыЦен.ВидЦеныДоСкидок;
	ВидЦеныСУчетомСкидок = НастройкиУчетнойЗаписи.ВидыЦен.ВидЦеныСУчетомСкидок;
	ВидЦеныМинимальныхЦен = НастройкиУчетнойЗаписи.ВидыЦен.ВидЦеныМинимальныхЦен;

	ЗаполнитьИнформациюОЗагружаемыхВидахЦен();

	РегистрОграничениеОстатка.Параметры.УстановитьЗначениеПараметра("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
	РегистрОграничениеОстатка.Параметры.УстановитьЗначениеПараметра("ОписаниеНоменклатура", НСтр("ru = 'Номенклатура'"));
	РегистрОграничениеОстатка.Параметры.УстановитьЗначениеПараметра("ОписаниеГруппаНоменклатуры", НСтр("ru = 'Группа номенклатуры'"));
	РегистрОграничениеОстатка.Параметры.УстановитьЗначениеПараметра("ОписаниеТоварнаяКатегория", НСтр("ru = 'Товарная категория'"));
	РегистрОграничениеОстатка.Параметры.УстановитьЗначениеПараметра("ОписаниеВидНоменклатуры", НСтр("ru = 'Вид номенклатуры'"));

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(РегистрОграничениеОстатка, "УчетнаяЗаписьМаркетплейса",
			УчетнаяЗаписьМаркетплейса, ВидСравненияКомпоновкиДанных.Равно);

	УстановитьВидимостьДоступностьЭлементовФормы();

	Заголовок = НСтр("ru = 'Настройки обмена данными с Ozon'");
	Если Не УчетнаяЗаписьМаркетплейса.Пустая() Тогда
		Заголовок = Заголовок + " - " + УчетнаяЗаписьМаркетплейса;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЕстьВиртуальныеСкладыПриИзмененииНаСервере()

	ИзменитьПоведениеГруппы("ГруппаНастройкиСкладов", Ложь);
	Элементы.ДекорацияТолькоFBS.Видимость = Не ЕстьВиртуальныеСклады;
	Элементы.ДекорацияFBOиFBS.Видимость = ЕстьВиртуальныеСклады;
	Элементы.ГруппаСкладыFBS.Видимость = ЕстьВиртуальныеСклады;
	Элементы.ГруппаОстатки.Видимость = ЕстьВиртуальныеСклады;
	Элементы.ГруппаОграничениеОстатков.Видимость = ЕстьВиртуальныеСклады;
	Элементы.ДекорацияНастройкиСкладовШаг4.Видимость = ЕстьВиртуальныеСклады;
	Элементы.ДекорацияНастройкиСкладовШаг4_1.Видимость = Не ЕстьВиртуальныеСклады;
	Элементы.ОткрытьРасписаниеВыгрузкиОстатковТоваров.Видимость = ЕстьВиртуальныеСклады;
	ШаблонЗаголовкаСпискаСкладов = НСтр("ru = 'Настройки соответствия складов'");
	Элементы.ГруппаНастройкиСоответствияСкладовFBS.Заголовок = ШаблонЗаголовкаСпискаСкладов
			+ ?(ТаблицаСкладовFBS.Количество(), " (" + ТаблицаСкладовFBS.Количество() + ")", "");

КонецПроцедуры

&НаСервереБезКонтекста
Функция ВедетсяУчетМаркированнойПродукции()

	ВидыМаркируемойПродукции = ИнтеграцияИСМП.ИспользуемыеВидыМаркируемойПродукцииИСМП();
	ВедетсяУчетМаркированнойПродукции = (ВидыМаркируемойПродукции.Количество() > 0);

	Возврат ВедетсяУчетМаркированнойПродукции;

КонецФункции

&НаСервере
Процедура ОтображениеПризнакаУчетаМаркировки()

	ВедетсяУчетМаркированнойПродукции = ВедетсяУчетМаркированнойПродукции();
	Элементы.ДекорацияМаркировкаИспользуется.Видимость = ВедетсяУчетМаркированнойПродукции;
	Элементы.ДекорацияМаркировкаНеИспользуется.Видимость = Не ВедетсяУчетМаркированнойПродукции;

КонецПроцедуры

&НаСервере
Процедура ЗаполнениеПодсказкиРеализацияВПути()

	ПодсказкаРеализации = НСтр("ru = 'Заказы покупателей загружаются в документы ""Заказ клиента"" с видом операции ""Реализация"".
		|Отправления по заказу оформляются документами ""Реализация товаров и услуг"" с видом операции ""Реализация (товары в пути)"": при передаче в доставку в статусе ""В пути"", по факту доставки в статусе ""Реализовано"".'")
		+ Символы.ПС;

	Если ПолучитьФункциональнуюОпцию("ИспользоватьКорректировкиРеализаций") Тогда
		ПодсказкаРеализации = ПодсказкаРеализации
			+ НСтр("ru = 'Невыкупы и возвраты товаров оформляются документами ""Корректировка реализации"".'");
	Иначе
		ПодсказкаРеализации = ПодсказкаРеализации
			+ НСтр("ru = 'Невыкупы и возвраты товаров оформляются документами ""Возврат товаров от клиента"".'");
	КонецЕсли;

	ПодсказкаРеализации = ПодсказкаРеализации
			+ НСтр("ru = 'Данный способ рекомендуется при ведении учета маркируемых товаров.'");

	Элементы.СпособОтраженияПродажFBSРеализация.Подсказка = ПодсказкаРеализации;

КонецПроцедуры

&НаСервере
Процедура ОтображениеРежимаЗаказа()

	ИспользуетсяFBS = (СпособОтраженияПродажFBS <> "НеИспользуются");
	КомиссияFBS     = (СпособОтраженияПродажFBS = "Комиссия");

	ИспользоватьЗаказы     = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов");
	ЗаказСоСклада          = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента");
	ЗаказСоСкладаИПодЗаказ = ПолучитьФункциональнуюОпцию("ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента");
	РежимОтгрузкиСоСклада  = ИспользоватьЗаказы И (ЗаказСоСклада Или ЗаказСоСкладаИПодЗаказ);

	Элементы.ГруппаНеИспользуютсяОтгрузки.Видимость    = Не ИспользуетсяFBS;
	Элементы.ГруппаНеИспользуютсяЗаказы.Видимость      = ИспользуетсяFBS И Не РежимОтгрузкиСоСклада;
	Элементы.ГруппаНастройкиЗагрузкиЗаказов1.Видимость = ИспользуетсяFBS И РежимОтгрузкиСоСклада;
	Элементы.ГруппаПричинаОтменыПоУмолчанию.Видимость  = ИспользоватьЗаказы И ЗаказСоСклада И Не ЗаказСоСкладаИПодЗаказ;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеСхемРаботы()

	ОчиститьСообщения();

	ПараметрыОбновления = ПараметрыОбновленияСтраницыНастройкиПоСхемамРаботы();
	ПараметрыОбновления.ОбновитьЭлементыКомиссионнойПродажи = Истина;
	ОбновитьЭлементыСтраницыНастройкиПоСхемамРаботы(ПараметрыОбновления);
	ИзменитьЗаполнениеНастроекПоСхемамРаботы(Истина);
	СохранитьНастройки();

	Оповестить("Запись_УчетныеЗаписиМаркетплейсов", УчетнаяЗаписьМаркетплейса);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗаполнениеНастроекПоСхемамРаботы(ИзменитьЗначения = Истина)

	КомиссияFBO   = (СпособОтраженияПродажFBO = "Комиссия");
	КомиссияFBS   = (СпособОтраженияПродажFBS = "Комиссия");
	РеализацияFBS = (СпособОтраженияПродажFBS = "РеализацияВПути");

	Если ИзменитьЗначения И Не КомиссияFBO И Не КомиссияFBS И Не РеализацияFBS Тогда
		ТорговаяПлощадкаПартнер    = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
		ТорговаяПлощадкаКонтрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		ТорговаяПлощадкаСоглашение = ПредопределенноеЗначение("Справочник.СоглашенияСКлиентами.ПустаяСсылка");
		ТорговаяПлощадкаДоговорFBO = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
		ТорговаяПлощадкаДоговорFBS = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
	КонецЕсли;

	Если ИзменитьЗначения И Не РеализацияFBS Тогда
		РозничныйПартнер    = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
		РозничныйКонтрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		РозничныйСоглашение = ПредопределенноеЗначение("Справочник.СоглашенияСКлиентами.ПустаяСсылка");
		РозничныйДоговор    = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
	КонецЕсли;

	Если ИзменитьЗначения И Не КомиссияFBS И Не КомиссияFBS Тогда
		УслугаПродажиЧерезТорговуюПлощадку = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	КонецЕсли;

	Если ИзменитьЗначения И Не КомиссияFBS И Не РеализацияFBS Тогда
		СоздаватьЗадачуОповещение = Ложь;
	КонецЕсли;

	Если ПродажиРазделяютсяПоДоговорам Тогда
		Если ИзменитьЗначения Тогда
			АвтоматическаяЗагрузкаДанныхОРеализованныхТоварах                  = Ложь;
			АвтоматическаяЗагрузкаДанныхОРеализованныхТоварахЗаПредыдущийМесяц = Ложь;
			АвтоматическаяЗагрузкаДанныхОРеализованныхТоварахЗаТекущийМесяц    = Ложь;

			Если ТорговаяПлощадкаДоговорFBS = ТорговаяПлощадкаДоговорFBO
					Или СпособОтраженияПродажFBSДоИзменения <> СпособОтраженияПродажFBS Тогда
				ТорговаяПлощадкаДоговорFBS = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
			КонецЕсли;
		КонецЕсли;

		Элементы.ТорговаяПлощадкаДоговорFBO.Заголовок = НСтр("ru = 'Договор продажи со складов Ozon (FBO)'");
		Элементы.ТорговаяПлощадкаДоговорFBO.Подсказка =
			НСтр("ru = 'Для передачи товаров на склады торговой площадки и оформления продаж с этих складов.'");
		Элементы.ТорговаяПлощадкаДоговорFBO.ПодсказкаВвода = НСтр("ru = 'Договор продажи со складов Ozon'");

		Элементы.ТорговаяПлощадкаДоговорFBS.Заголовок = НСтр("ru = 'Договор для продажи с собственных складов (FBS, RealFBS)'");

	Иначе
		Если ИзменитьЗначения Тогда
			Если КомиссияFBO И (КомиссияFBS Или РеализацияFBS) Тогда
				ТорговаяПлощадкаДоговорFBS = ТорговаяПлощадкаДоговорFBO;
			ИначеЕсли СпособОтраженияПродажFBSДоИзменения <> СпособОтраженияПродажFBS Тогда
				ТорговаяПлощадкаДоговорFBS = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
			Иначе
				Если РеализацияFBS Тогда
					ТорговаяПлощадкаСоглашение = ПредопределенноеЗначение("Справочник.СоглашенияСКлиентами.ПустаяСсылка");
				КонецЕсли;
				ТорговаяПлощадкаДоговорFBO = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
			КонецЕсли;

			АвтоматическаяЗагрузкаДанныхОРеализованныхТоварах                  = КомиссияFBO Или КомиссияFBS;
			АвтоматическаяЗагрузкаДанныхОРеализованныхТоварахЗаПредыдущийМесяц = КомиссияFBO Или КомиссияFBS;
			АвтоматическаяЗагрузкаДанныхОРеализованныхТоварахЗаТекущийМесяц    = Ложь;
		КонецЕсли;

		Если КомиссияFBO Тогда
			Элемент = Элементы.ТорговаяПлощадкаДоговорFBO;

			Если КомиссияFBS Тогда
				ПодсказкаДоговора =
					НСтр("ru = 'Для оформления продаж через торговую площадку (FBO, FBS и RealFBS).'");
				ПодсказкаВводаДоговора =
					НСтр("ru = 'Договор продажи через торговую площадку'");
			ИначеЕсли РеализацияFBS Тогда
				ПодсказкаДоговора =
					НСтр("ru = 'Для оформления продаж (FBO) и взаимозачетов (FBS и RealFBS).'");
				ПодсказкаВводаДоговора =
					НСтр("ru = 'Договор продажи и взаимозачетов'");
			Иначе
				ПодсказкаДоговора =
					НСтр("ru = 'Для оформления продаж через торговую площадку.'");
				ПодсказкаВводаДоговора =
					НСтр("ru = 'Договор продажи со складов Ozon'");
			КонецЕсли;

			Элемент.Заголовок = НСтр("ru = 'Договор'");
			Элемент.Подсказка = ПодсказкаДоговора;
			Элемент.ПодсказкаВвода = ПодсказкаВводаДоговора;

		ИначеЕсли КомиссияFBS Тогда
			Элементы.ТорговаяПлощадкаДоговорFBS.Заголовок = НСтр("ru = 'Договор'");

		КонецЕсли;
	КонецЕсли;
		
	Если РеализацияFBS 
			Или КомиссияFBO И КомиссияFBS И ПродажиРазделяютсяПоДоговорам Тогда
		Элементы.РучнаяЗагрузкаДанныхОРеализованныхТоварах.Заголовок =
			НСтр("ru = 'Доступна загрузка данных из файла позаказного отчета о реализации товара'");
		ДоступноAPI = Ложь;
	Иначе
		Элементы.РучнаяЗагрузкаДанныхОРеализованныхТоварах.Заголовок =
			НСтр("ru = 'Доступна загрузка данных за выбранный месяц или из файла отчета о реализации товара'");
		ДоступноAPI = Истина;
	КонецЕсли;
		
	Элементы.АвтоматическаяЗагрузкаДанныхОРеализованныхТоварах.Видимость                  = ДоступноAPI;
	Элементы.АвтоматическаяЗагрузкаДанныхОРеализованныхТоварахЗаПредыдущийМесяц.Видимость = ДоступноAPI;
	Элементы.ОткрытьРасписаниеЗагрузкиДанныхОРеализованныхТоварах.Видимость               = ДоступноAPI;
	Элементы.ДекорацияОтступ21.Видимость = Элементы.АвтоматическаяЗагрузкаДанныхОРеализованныхТоварахЗаПредыдущийМесяц.Видимость
											Или Элементы.ОткрытьРасписаниеЗагрузкиДанныхОРеализованныхТоварах.Видимость
											Или Элементы.УслугаПродажиЧерезТорговуюПлощадку.Видимость;

	Если ИзменитьЗначения Тогда
		Префиксы = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПрефиксыСервиса(Истина);

		УстановитьИспользованиеРегламентногоЗаданияНаСервере(
			УчетнаяЗаписьМаркетплейса,
			Префиксы.ЗагрузкаИнформацииОПродажахТоваров,
			(СпособОтраженияПродажFBO = "Комиссия"
						И СпособОтраженияПродажFBS <> "РеализацияВПути"
					Или СпособОтраженияПродажFBS = "Комиссия")
				И Не ПродажиРазделяютсяПоДоговорам);

		УстановитьИспользованиеРегламентногоЗаданияНаСервере(
			УчетнаяЗаписьМаркетплейса,
			Префиксы.ОбновлениеИнформацииОПродажахТоваров,
			СпособОтраженияПродажFBO <> "НеИспользуются");

		УстановитьИспользованиеРегламентногоЗаданияНаСервере(
			УчетнаяЗаписьМаркетплейса,
			Префиксы.ЗагрузкаНеобработанныхЗаказовСТорговойПлощадки,
			СпособОтраженияПродажFBS <> "НеИспользуются");

		УстановитьИспользованиеРегламентногоЗаданияНаСервере(
			УчетнаяЗаписьМаркетплейса,
			Префиксы.ОбновлениеСтатусовЗаказовТорговойПлощадки,
			СпособОтраженияПродажFBS <> "НеИспользуются");
	КонецЕсли;

	СпособОтраженияПродажFBSДоИзменения = СпособОтраженияПродажFBS;

КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройки(ОчиститьСообщения = Истина)

	Если ОчиститьСообщения Тогда
		ОчиститьСообщения();
	КонецЕсли;

	СохранитьНастройкиНаСервере();

КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиНаСервере()

	ХешНастроек = Справочники.УчетныеЗаписиМаркетплейсов.ПолучитьХешНастроекПоСсылке(УчетнаяЗаписьМаркетплейса);

	Если ХешНастроек <> Неопределено И ХешНастроек <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗаписьМаркетплейса, "ХешНастроек") Тогда
		ИспользоватьСоглашения = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
		ТорговаяПлощадкаСоглашение = ?(ИспользоватьСоглашения, ТорговаяПлощадкаСоглашение, Справочники.СоглашенияСКлиентами.ПустаяСсылка());
		РозничныйСоглашение        = ?(ИспользоватьСоглашения, РозничныйСоглашение, Справочники.СоглашенияСКлиентами.ПустаяСсылка());

		ИспользоватьДоговоры = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами");
		ТорговаяПлощадкаДоговорFBO = ?(ИспользоватьДоговоры, ТорговаяПлощадкаДоговорFBO, Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		ТорговаяПлощадкаДоговорFBS = ?(ИспользоватьДоговоры, ТорговаяПлощадкаДоговорFBS, Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		РозничныйДоговор           = ?(ИспользоватьДоговоры, РозничныйДоговор, Справочники.ДоговорыКонтрагентов.ПустаяСсылка());

		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);

		Попытка
			БлокировкаДанных = Новый БлокировкаДанных;
			ЗаблокироватьДанныеДляРедактирования(УчетнаяЗаписьМаркетплейса);
			ЭлементБлокировки = БлокировкаДанных.Добавить("Справочник.УчетныеЗаписиМаркетплейсов");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", УчетнаяЗаписьМаркетплейса);
			БлокировкаДанных.Заблокировать();

			УчетнаяЗаписьОбъект = УчетнаяЗаписьМаркетплейса.ПолучитьОбъект();

			// Заполнение основных настроек
			УчетнаяЗаписьОбъект.ИсточникКатегории                         = ИсточникКатегории;
			УчетнаяЗаписьОбъект.ВалютаУчета                               = ВалютаУчета;
			УчетнаяЗаписьОбъект.Партнер                                   = ТорговаяПлощадкаПартнер;
			УчетнаяЗаписьОбъект.Контрагент                                = ТорговаяПлощадкаКонтрагент;
			УчетнаяЗаписьОбъект.Соглашение                                = ТорговаяПлощадкаСоглашение;
			УчетнаяЗаписьОбъект.ДоговорПродажиЧерезСкладыТорговойПлощадки = ТорговаяПлощадкаДоговорFBO;
			УчетнаяЗаписьОбъект.ДоговорПродажиЧерезСкладыСобственные      = ТорговаяПлощадкаДоговорFBS;

			// Заполнение видов цен
			СохранитьДополнительнуюНастройку("ВидЦеныДоСкидок",
				ВидЦеныДоСкидок,
				УчетнаяЗаписьОбъект.ВидыЦен,
				"ИмяНастройки",
				"ВидЦены");

			СохранитьДополнительнуюНастройку("ВидЦеныСУчетомСкидок",
				ВидЦеныСУчетомСкидок,
				УчетнаяЗаписьОбъект.ВидыЦен,
				"ИмяНастройки",
				"ВидЦены");

			СохранитьДополнительнуюНастройку("ВидЦеныМинимальныхЦен",
				ВидЦеныМинимальныхЦен,
				УчетнаяЗаписьОбъект.ВидыЦен,
				"ИмяНастройки",
				"ВидЦены");

			// Заполнение дополнительных настроек
			СохранитьДополнительнуюНастройку("АвтоматическаяЗагрузкаДанныхОРеализованныхТоварах",
				АвтоматическаяЗагрузкаДанныхОРеализованныхТоварах,
				УчетнаяЗаписьОбъект.ДополнительныеНастройки,
				"ИдентификаторНастройки",
				"ЗначениеНастройки");

			СохранитьДополнительнуюНастройку("АвтоматическаяЗагрузкаДанныхОРеализованныхТоварахЗаПредыдущийМесяц",
				АвтоматическаяЗагрузкаДанныхОРеализованныхТоварахЗаПредыдущийМесяц,
				УчетнаяЗаписьОбъект.ДополнительныеНастройки,
				"ИдентификаторНастройки",
				"ЗначениеНастройки");

			СохранитьДополнительнуюНастройку("АвтоматическаяЗагрузкаДанныхОРеализованныхТоварахЗаТекущийМесяц",
				АвтоматическаяЗагрузкаДанныхОРеализованныхТоварахЗаТекущийМесяц,
				УчетнаяЗаписьОбъект.ДополнительныеНастройки);

			СохранитьДополнительнуюНастройку("АвтоматическоеФормированиеРасходныхОрдеровНаТовары",
				АвтоматическоеФормированиеРасходныхОрдеровНаТовары,
				УчетнаяЗаписьОбъект.ДополнительныеНастройки,
				"ИдентификаторНастройки",
				"ЗначениеНастройки");

			СохранитьДополнительнуюНастройку("РучнаяЗагрузкаДанныхОРеализованныхТоварах",
				РучнаяЗагрузкаДанныхОРеализованныхТоварах,
				УчетнаяЗаписьОбъект.ДополнительныеНастройки,
				"ИдентификаторНастройки",
				"ЗначениеНастройки");

			СохранитьДополнительнуюНастройку("УслугаПродажиЧерезТорговуюПлощадку",
				УслугаПродажиЧерезТорговуюПлощадку,
				УчетнаяЗаписьОбъект.ДополнительныеНастройки,
				"ИдентификаторНастройки",
				"ЗначениеНастройкиСсылка");

			СохранитьДополнительнуюНастройку("ПричинаОтменыПоУмолчанию",
				ПричинаОтменыПоУмолчанию,
				УчетнаяЗаписьОбъект.ДополнительныеНастройки,
				"ИдентификаторНастройки",
				"ЗначениеНастройкиСсылка");

			СохранитьДополнительнуюНастройку("СпособОтраженияПродажFBO",
				СпособОтраженияПродажFBO,
				УчетнаяЗаписьОбъект.ДополнительныеНастройки,
				"ИдентификаторНастройки",
				"ЗначениеНастройкиСтрока");

			СохранитьДополнительнуюНастройку("СпособОтраженияПродажFBS",
				СпособОтраженияПродажFBS,
				УчетнаяЗаписьОбъект.ДополнительныеНастройки,
				"ИдентификаторНастройки",
				"ЗначениеНастройкиСтрока");

			СохранитьДополнительнуюНастройку("ПокупательПартнер",
				РозничныйПартнер,
				УчетнаяЗаписьОбъект.ДополнительныеНастройки,
				"ИдентификаторНастройки",
				"ЗначениеНастройкиСсылка");

			СохранитьДополнительнуюНастройку("ПокупательКонтрагент",
				РозничныйКонтрагент,
				УчетнаяЗаписьОбъект.ДополнительныеНастройки,
				"ИдентификаторНастройки",
				"ЗначениеНастройкиСсылка");

			СохранитьДополнительнуюНастройку("ПокупательСоглашение",
				РозничныйСоглашение,
				УчетнаяЗаписьОбъект.ДополнительныеНастройки,
				"ИдентификаторНастройки",
				"ЗначениеНастройкиСсылка");

			СохранитьДополнительнуюНастройку("ПокупательДоговор",
				РозничныйДоговор,
				УчетнаяЗаписьОбъект.ДополнительныеНастройки,
				"ИдентификаторНастройки",
				"ЗначениеНастройкиСсылка");

			СохранитьДополнительнуюНастройку("СоздаватьЗадачуОповещение",
				СоздаватьЗадачуОповещение,
				УчетнаяЗаписьОбъект.ДополнительныеНастройки,
				"ИдентификаторНастройки",
				"ЗначениеНастройки");

			// Запись настроек.
			УчетнаяЗаписьОбъект.Записать();
	
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(ИнтеграцияСМаркетплейсомOzonСервер.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьДополнительнуюНастройку(ИмяНастройки, ЗначениеНастройки, ТабличнаяЧастьНастроек,
			РеквизитНастройки = "ИдентификаторНастройки", РеквизитЗначения = "ЗначениеНастройки")

	СтрокаНастройки = ТабличнаяЧастьНастроек.Найти(ИмяНастройки, РеквизитНастройки);
	Если СтрокаНастройки = Неопределено Тогда
		СтрокаНастройки = ТабличнаяЧастьНастроек.Добавить();
		СтрокаНастройки[РеквизитНастройки] = ИмяНастройки;
	КонецЕсли;
	СтрокаНастройки[РеквизитЗначения] = ЗначениеНастройки;

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьСклад(Элемент, ТекущиеДанные = Неопределено, ЭтоУдалениеСтроки = Ложь)

	Если ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
	КонецЕсли;

	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ЭтоЗаписьСкладаFBS = (Элемент.Имя = "ТаблицаСкладовFBS");

	ДанныеЗаписи = Новый Структура;
	ДанныеЗаписи.Вставить("НеПроверятьЗаполнениеОбъекта1С",   Не ЭтоЗаписьСкладаFBS И Не ЭтоУдалениеСтроки);
	ДанныеЗаписи.Вставить("УчетнаяЗаписьМаркетплейса",        УчетнаяЗаписьМаркетплейса);
	ДанныеЗаписи.Вставить("ВидОбъектаМаркетплейса",           ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.Склад"));
	ДанныеЗаписи.Вставить("ИдентификаторОбъектаМаркетплейса", ТекущиеДанные.ИдентификаторОбъектаМаркетплейса);
	ДанныеЗаписи.Вставить("НаименованиеОбъектаМаркетплейса",  ТекущиеДанные.НаименованиеОбъектаМаркетплейса);
	ДанныеЗаписи.Вставить("ДополнительныеСведения",           ?(ЭтоЗаписьСкладаFBS, "", ТекущиеДанные.ДополнительныеСведения));
	ДанныеЗаписи.Вставить("Объект1С",                         ?(ЭтоЗаписьСкладаFBS,  ТекущиеДанные.Склад1С, Неопределено));
	ДанныеЗаписи.Вставить("ИспользуетсяДляСхемыРаботыFBO",    Не ЭтоЗаписьСкладаFBS);
	ДанныеЗаписи.Вставить("ИспользуетсяДляСхемыРаботыFBS",    ЭтоЗаписьСкладаFBS И Не ТекущиеДанные.ЭтоRealFBS);
	ДанныеЗаписи.Вставить("ИспользуетсяДляСхемыРаботыDBS",    ЭтоЗаписьСкладаFBS И ТекущиеДанные.ЭтоRealFBS);

	ПроверкаПройдена = ПроверитьИЗаписатьСоответствие(ДанныеЗаписи);

	Если Не ПроверкаПройдена Тогда
		Если ЭтоЗаписьСкладаFBS Тогда
			ТекущиеДанные.Склад1С = ЗначениеДоИзменения;
		Иначе
			ПараметрыОбновления = ПараметрыОбновленияСтраницыНастройкиПоСхемамРаботы();
			ПараметрыОбновления.ОбновитьЗаголовокСпискаСкладовFBO = Истина;
			ОбновитьЭлементыСтраницыНастройкиПоСхемамРаботы(ПараметрыОбновления);
		КонецЕсли;
	КонецЕсли;

	Если Не ЭтоЗаписьСкладаFBS И Не ЭтоУдалениеСтроки Тогда
		ПараметрыОбновления = ПараметрыОбновленияСтраницыНастройкиПоСхемамРаботы();
		ПараметрыОбновления.ОбновитьЗаголовокСпискаСкладовFBO = Истина;
		ОбновитьЭлементыСтраницыНастройкиПоСхемамРаботы(ПараметрыОбновления);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьИЗаписатьСоответствие(ДанныеЗаписи)

	ПроверкаПройдена = Истина;

	Если ЗначениеЗаполнено(ДанныеЗаписи.Объект1С) Тогда

		СообщенияПроверки = Новый Массив;

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("УчетнаяЗаписьМаркетплейса", ДанныеЗаписи.УчетнаяЗаписьМаркетплейса);
		Запрос.УстановитьПараметр("ИдентификаторСклада", ДанныеЗаписи.ИдентификаторОбъектаМаркетплейса);
		Запрос.УстановитьПараметр("УстанавливаемыйСклад", ДанныеЗаписи.Объект1С);
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПРЕДСТАВЛЕНИЕ(Склады.Ссылка) КАК ПредставлениеСклада,
			|	Склады.ЭтоГруппа КАК ЭтоГруппа
			|ИЗ
			|	Справочник.Склады КАК Склады
			|ГДЕ
			|	Склады.Ссылка = &УстанавливаемыйСклад
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СоответствияОбъектовМаркетплейсов.НаименованиеОбъектаМаркетплейса КАК СкладМаркетплейса,
			|	ПРЕДСТАВЛЕНИЕ(Склады.Наименование) КАК ПредставлениеСклада1С,
			|	Склады.ЭтоГруппа КАК ЭтоГруппа,
			|	СоответствияОбъектовМаркетплейсов.Объект1С = &УстанавливаемыйСклад КАК ЭтоВыбранныйСклад
			|ИЗ
			|	РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
			|		ПО СоответствияОбъектовМаркетплейсов.Объект1С = Склады.Ссылка
			|ГДЕ
			|	СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса
			|	И СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Склад)
			|	И СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса <> &ИдентификаторСклада
			|	И СоответствияОбъектовМаркетплейсов.ИдентификаторВладельцаОбъектаМаркетплейса = """"
			|	И СоответствияОбъектовМаркетплейсов.Объект1С В ИЕРАРХИИ(&УстанавливаемыйСклад)
			|	И ВЫБОР
			|			КОГДА Склады.ЭтоГруппа
			|				ТОГДА СоответствияОбъектовМаркетплейсов.Объект1С <> &УстанавливаемыйСклад
			|			ИНАЧЕ ИСТИНА
			|		КОНЕЦ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СоответствияОбъектовМаркетплейсов.НаименованиеОбъектаМаркетплейса КАК СкладМаркетплейса,
			|	Склады.Наименование КАК НаименованиеСклада1С,
			|	ПРЕДСТАВЛЕНИЕ(Склады.Наименование) КАК ПредставлениеСклада1С,
			|	Склады.ЭтоГруппа КАК ЭтоГруппа,
			|	СоответствияОбъектовМаркетплейсов.Объект1С = &УстанавливаемыйСклад КАК ЭтоВыбранныйСклад
			|ИЗ
			|	РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
			|		ПО СоответствияОбъектовМаркетплейсов.Объект1С = Склады.Ссылка
			|			И (Склады.ЭтоГруппа)
			|ГДЕ
			|	СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса
			|	И СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Склад)
			|	И СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса <> &ИдентификаторСклада";

		УстановитьПривилегированныйРежим(Истина);
		ПакетЗапроса = Запрос.ВыполнитьПакет();
		УстановитьПривилегированныйРежим(Ложь);

		// Проверка на вхождение записанных складов в иерархию выбранного склада.

		МассивПересечений = Новый Массив;

		ПолноеНаименованиеУстанавливаемогоСклада = "";
		ПредставлениеСклада = "";
		ЭтоГруппаСкладов = Ложь;

		ВыборкаСкладов = ПакетЗапроса[ПакетЗапроса.ВГраница() - 2].Выбрать();
		Если ВыборкаСкладов.Следующий() Тогда
			ПолноеНаименованиеУстанавливаемогоСклада = "/" + ДанныеЗаписи.Объект1С.ПолноеНаименование() + "/";
			ПредставлениеСклада = ВыборкаСкладов.ПредставлениеСклада;
			ЭтоГруппаСкладов = ВыборкаСкладов.ЭтоГруппа;
		КонецЕсли;

		Если ЭтоГруппаСкладов Тогда
			ШаблонСовпаденияСклада = НСтр("ru = 'Устанавливаемая группа складов <%1> совпадает со значением для склада маркетплейса <%2>.'");
		Иначе
			ШаблонСовпаденияСклада = НСтр("ru = 'Устанавливаемый склад <%1> совпадает со значением для склада маркетплейса <%2>.'");
		КонецЕсли;

		ШаблонПересеченияСклада = " - " + НСтр("ru = 'склад 1С <%1>, установленный для склада маркетплейса <%2>'");
		ШаблонПересеченияГруппыСклада = " - " + НСтр("ru = 'группа складов 1С <%1>, установленная для склада маркетплейса <%2>'");

		ВыборкаСкладов = ПакетЗапроса[ПакетЗапроса.ВГраница() - 1].Выбрать();
		Пока ВыборкаСкладов.Следующий() Цикл
			Если ВыборкаСкладов.ЭтоВыбранныйСклад Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСовпаденияСклада,
						ПредставлениеСклада, 
						ВыборкаСкладов.СкладМаркетплейса);

				СообщенияПроверки.Добавить(ТекстСообщения);

				ПроверкаПройдена = Ложь;
				Продолжить;
			КонецЕсли;

			Шаблон = ?(ВыборкаСкладов.ЭтоГруппа, ШаблонПересеченияГруппыСклада, ШаблонПересеченияСклада);

			ОписаниеПересечения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон,
					ВыборкаСкладов.ПредставлениеСклада1С,
					ВыборкаСкладов.СкладМаркетплейса);

			МассивПересечений.Добавить(ОписаниеПересечения);
		КонецЦикла;

		Если МассивПересечений.Количество() > 0 Тогда
			ШаблонСообщенияПроверки = НСтр("ru = 'Обнаружены склады, входящие в состав выбранной группы складов <%1>: %2.'");

			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщенияПроверки,
					ПредставлениеСклада,
					Символы.ПС + СтрСоединить(МассивПересечений, ";" + Символы.ПС));

			СообщенияПроверки.Добавить(ТекстСообщения);

			ПроверкаПройдена = Ложь;
		КонецЕсли;

		// Проверка на вхождение выбранного склада в иерархию записанных складов.

		Если ЗначениеЗаполнено(ПолноеНаименованиеУстанавливаемогоСклада) Тогда
			МассивПересечений = Новый Массив;

			ВыборкаСкладов = ПакетЗапроса[ПакетЗапроса.ВГраница()].Выбрать();
			Пока ВыборкаСкладов.Следующий() Цикл
				Если ВыборкаСкладов.ЭтоВыбранныйСклад Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСовпаденияСклада,
							ПредставлениеСклада, 
							ВыборкаСкладов.СкладМаркетплейса);

					СообщенияПроверки.Добавить(ТекстСообщения);

					ПроверкаПройдена = Ложь;
					Продолжить;
				КонецЕсли;

				НаименованиеСкладаВыборки = "/" + ВыборкаСкладов.НаименованиеСклада1С + "/";
				Если СтрНайти(ПолноеНаименованиеУстанавливаемогоСклада, НаименованиеСкладаВыборки) Тогда
					ОписаниеПересечения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПересеченияГруппыСклада,
							ВыборкаСкладов.ПредставлениеСклада1С,
							ВыборкаСкладов.СкладМаркетплейса);

					МассивПересечений.Добавить(ОписаниеПересечения);

					ПроверкаПройдена = Ложь;
				КонецЕсли;
			КонецЦикла;

			Если МассивПересечений.Количество() > 0 Тогда
				Если ЭтоГруппаСкладов Тогда
					ШаблонСообщенияПроверки = НСтр("ru = 'Обнаружены группы складов, в состав которых входит выбранная группа складов <%1>: %2.'");
				Иначе
					ШаблонСообщенияПроверки = НСтр("ru = 'Обнаружены группы складов, в состав которых входит выбранный склад <%1>: %2.'");
				КонецЕсли;

				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( ШаблонСообщенияПроверки,
						ПредставлениеСклада,
						Символы.ПС + СтрСоединить(МассивПересечений, ";" + Символы.ПС));

				СообщенияПроверки.Добавить(ТекстСообщения);

				ПроверкаПройдена = Ложь;
			КонецЕсли;
		КонецЕсли;

		Если СообщенияПроверки.Количество() > 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(СтрСоединить(СообщенияПроверки, Символы.ПС));
		КонецЕсли;

		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов") Тогда
			ПроверкаПройдена = Истина;
		КонецЕсли;
	ИначеЕсли ДанныеЗаписи.ИспользуетсяДляСхемыРаботыFBO Тогда
		Если ПустаяСтрока(ДанныеЗаписи.ИдентификаторОбъектаМаркетплейса) И ПустаяСтрока(ДанныеЗаписи.НаименованиеОбъектаМаркетплейса) Тогда
			ШаблонСообщенияПроверки = НСтр("ru = 'Склад, для которого не заполнены наименование и идентификатор, не может быть записан.'");
			ПроверкаПройдена = Ложь;
		ИначеЕсли ПустаяСтрока(ДанныеЗаписи.ИдентификаторОбъектаМаркетплейса) Тогда
			ШаблонСообщенияПроверки = НСтр("ru = 'Склад, для которого не заполнен идентификатор, не может быть записан.'");
			ПроверкаПройдена = Ложь;
		ИначеЕсли ПустаяСтрока(ДанныеЗаписи.НаименованиеОбъектаМаркетплейса) Тогда
			ШаблонСообщенияПроверки = НСтр("ru = 'Склад, для которого не заполнено наименование, не может быть записан.'");
			ПроверкаПройдена = Ложь;
		КонецЕсли;

		Если Не ПроверкаПройдена Тогда
			ОбщегоНазначения.СообщитьПользователю(ШаблонСообщенияПроверки);
		КонецЕсли;
	КонецЕсли;

	Если ПроверкаПройдена Тогда
		ДобавитьЗаписьВРегистрСоответствияОбъектов(ДанныеЗаписи);
	КонецЕсли;

	Возврат ПроверкаПройдена;

КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьЗаписьВРегистрСоответствияОбъектов(ДанныеЗаписи)

	НаборЗаписей = РегистрыСведений.СоответствияОбъектовМаркетплейсов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.УчетнаяЗаписьМаркетплейса.Установить(ДанныеЗаписи.УчетнаяЗаписьМаркетплейса);
	НаборЗаписей.Отбор.ВидОбъектаМаркетплейса.Установить(ДанныеЗаписи.ВидОбъектаМаркетплейса);
	НаборЗаписей.Отбор.ИдентификаторОбъектаМаркетплейса.Установить(ДанныеЗаписи.ИдентификаторОбъектаМаркетплейса);

	НеПроверятьЗаполнениеОбъекта1С =
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЗаписи, "НеПроверятьЗаполнениеОбъекта1С", Ложь);
	Если НеПроверятьЗаполнениеОбъекта1С Или ЗначениеЗаполнено(ДанныеЗаписи.Объект1С) Тогда
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, ДанныеЗаписи);
		Запись.ДатаАктуальности = ТекущаяДатаСеанса();
	КонецЕсли;

	НаборЗаписей.Записать();

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьИСохранитьВыборДоговора(Элемент)

	ОчиститьСообщения();

	ИспользуютсяПродажи = (СпособОтраженияПродажFBO = "Комиссия" И СпособОтраженияПродажFBS <> "НеИспользуются");

	СоответствиеИменЭлементов = Новый Соответствие;
	СоответствиеИменЭлементов.Вставить("ТорговаяПлощадкаДоговорFBO",           "ТорговаяПлощадкаДоговорFBO");
	СоответствиеИменЭлементов.Вставить("ТорговаяПлощадкаДоговорFBS",           "ТорговаяПлощадкаДоговорFBS");
	СоответствиеИменЭлементов.Вставить("ТорговаяПлощадкаДоговорВзаимозачетов", "ТорговаяПлощадкаДоговорFBS");

	ИмяРеквизита = СоответствиеИменЭлементов[Элемент.Имя];

	Если ПродажиРазделяютсяПоДоговорам И Не ЭтотОбъект[ИмяРеквизита].Пустая() И ТорговаяПлощадкаДоговорFBO = ТорговаяПлощадкаДоговорFBS Тогда
		ШаблонСообщения = НСтр("ru = 'Недопустимо совпадение значений настроек ""%1"" и ""%2""'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			Элементы.ТорговаяПлощадкаДоговорFBO.Заголовок,
			Элемент.Заголовок),, ИмяРеквизита);
		ЭтотОбъект[ИмяРеквизита] = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
	ИначеЕсли Не ПродажиРазделяютсяПоДоговорам И ИспользуютсяПродажи Тогда
		ТорговаяПлощадкаДоговорFBS = ТорговаяПлощадкаДоговорFBO;
	КонецЕсли;

	СохранитьНастройки(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокВидовЦенЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьИнформациюОЗагружаемыхВидахЦен();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформациюОЗагружаемыхВидахЦен()

	ШаблонПустогоВидаЦен = Символы.Таб + НСтр("ru = 'Для загружаемого типа цен ""%1"" вид цены <b>не задан</b>.'");
	ШаблонЗаполненногоВидаЦен = Символы.Таб + НСтр("ru = 'Для загружаемого типа цен ""%1"" задан вид цены <a href=""%2"">%3</a>.'");

	МассивФормированияЗаголовка = Новый Массив;
	МассивФормированияЗаголовка.Добавить(НСтр("ru = 'Информация о загружаемых видах цен:'"));
	МассивФормированияЗаголовка.Добавить(Символы.ПС);

	ВидыЦенУчетнойЗаписи = ИнтеграцияСМаркетплейсомOzonСервер.ВидыЦенУчетнойЗаписи(УчетнаяЗаписьМаркетплейса, Ложь);

	Для Каждого ВидЦеныУчетнойЗаписи Из ВидыЦенУчетнойЗаписи Цикл
		Если ВидЦеныУчетнойЗаписи.Значение.Пустая() Тогда
			СтрокаЗаголовка = СтроковыеФункции.ФорматированнаяСтрока( ШаблонПустогоВидаЦен, ВидЦеныУчетнойЗаписи.Наименование);
		Иначе
			СтрокаЗаголовка = СтроковыеФункции.ФорматированнаяСтрока(ШаблонЗаполненногоВидаЦен, ВидЦеныУчетнойЗаписи.Наименование,
					ВидЦеныУчетнойЗаписи.Идентификатор, ВидЦеныУчетнойЗаписи.Значение);
		КонецЕсли;
		МассивФормированияЗаголовка.Добавить(СтрокаЗаголовка);
		МассивФормированияЗаголовка.Добавить(Символы.ПС);
	КонецЦикла;

	МассивФормированияЗаголовка.Удалить(МассивФормированияЗаголовка.ВГраница());

	Элементы.ДекорацияИнформацияОЗагружаемыхВидахЦен.Заголовок = Новый ФорматированнаяСтрока(МассивФормированияЗаголовка);

КонецПроцедуры

&НаСервереБезКонтекста
Функция КоличествоЗаписейОграниченияВыгрузкиОстатков(УчетнаяЗаписьМаркетплейса)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	1 КАК СчетчикЗаписи
		|ИЗ
		|	РегистрСведений.ОграниченияВыгрузкиОстатковМаркетплейсов КАК Источник
		|ГДЕ
		|	Источник.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса";
	КоличествоЗаписей = Запрос.Выполнить().Выбрать().Количество();

	Возврат КоличествоЗаписей;

КонецФункции

&НаСервереБезКонтекста
Функция ПараметрыПриложенияЯндексДиск()

	Возврат ИнтеграцияСМаркетплейсамиСервер.ПараметрыПриложенияЯндексДиск();

КонецФункции

&НаСервере
Процедура ПроверитьДанныеПомещеныВХранилище()

	ПараметрыПриложенияЯндексДиск = ПараметрыПриложенияЯндексДиск();
	АдресВХранилище = Строка(УчетнаяЗаписьМаркетплейса.УникальныйИдентификатор()) + "/" + ПараметрыПриложенияЯндексДиск.ИдентификаторПриложения;

	УстановитьПривилегированныйРежим(Истина);
	ЗначениеКлюча = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(АдресВХранилище, "expires_in");
	УстановитьПривилегированныйРежим(Ложь);

	ДанныеПриложенияВХранилище = ЗначениеКлюча <> Неопределено;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначениеЦеныПоИдентификатору(УчетнаяЗаписьМаркетплейса, Идентификатор)

	ВидыЦенУчетнойЗаписи = ИнтеграцияСМаркетплейсомOzonСервер.ВидыЦенУчетнойЗаписи(УчетнаяЗаписьМаркетплейса, Ложь);
	Результат = ВидыЦенУчетнойЗаписи.НайтиСтроки(Новый Структура("Идентификатор", Идентификатор));
	Если Результат.Количество() = 1 Тогда
		Возврат Результат[0].Значение;
	КонецЕсли;

	Возврат Справочники.ВидыЦен.ПустаяСсылка();

КонецФункции

&НаКлиенте
Процедура ПослеИзмененияВидаЦен(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	ЗаполнитьИнформациюОЗагружаемыхВидахЦен();

КонецПроцедуры

#Область УсловияПродаж

&НаСервере
Процедура ЗаполнитьУсловияПродажПоУмолчанию(ЭтоДанныеПлощадки = Истина)
	
	ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	
	Партнер = ?(ЭтоДанныеПлощадки, ТорговаяПлощадкаПартнер, РозничныйПартнер);
	Контрагент = ?(ЭтоДанныеПлощадки, ТорговаяПлощадкаКонтрагент, РозничныйКонтрагент);
	Соглашение = ?(ЭтоДанныеПлощадки, ТорговаяПлощадкаСоглашение, РозничныйСоглашение);
	ХозОперация = ?(ЭтоДанныеПлощадки,
		Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию,
		Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
	
	Если ЗначениеЗаполнено(Партнер) Или Не ИспользоватьСоглашенияСКлиентами Тогда
		ПараметрыОтбора = Новый Структура();
		ПараметрыОтбора.Вставить("ХозяйственныеОперации", ХозОперация);
		ПараметрыОтбора.Вставить("ВыбранноеСоглашение",   Соглашение);

		Если ЭтоДанныеПлощадки Тогда
			ПараметрыОтбора.Вставить("КомиссионныеПродажи25", Истина);
		КонецЕсли;
		
		УсловияПродажПоУмолчанию = ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(Партнер, ПараметрыОтбора);
		
		Если УсловияПродажПоУмолчанию <> Неопределено Тогда
			Если Не ИспользоватьСоглашенияСКлиентами
					Или (Соглашение <> УсловияПродажПоУмолчанию.Соглашение
						И ЗначениеЗаполнено(УсловияПродажПоУмолчанию.Соглашение)) Тогда
				Соглашение = УсловияПродажПоУмолчанию.Соглашение;
				ЗаполнитьУсловияПродаж(УсловияПродажПоУмолчанию, ЭтоДанныеПлощадки);
			Иначе
				Соглашение = УсловияПродажПоУмолчанию.Соглашение;
			КонецЕсли;
			
			Если Не УсловияПродажПоУмолчанию.Типовое
					 И ЗначениеЗаполнено(УсловияПродажПоУмолчанию.Контрагент) Тогда
				Контрагент = УсловияПродажПоУмолчанию.Контрагент;
			Иначе
				ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(
					Партнер,
					Контрагент);
			КонецЕсли;
		Иначе
			ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(
				Партнер,
				Контрагент);
			Соглашение = Неопределено;
		КонецЕсли;
		
		РеквизитКонтрагент = ?(ЭтоДанныеПлощадки, "ТорговаяПлощадкаКонтрагент", "РозничныйКонтрагент");
		ЭтотОбъект[РеквизитКонтрагент] = Контрагент;
		
		ПроверкаПройдена = ПроверкаСоглашенияПройдена(Соглашение, Ложь);
		Если ПроверкаПройдена Тогда
			РеквизитСоглашение = ?(ЭтоДанныеПлощадки, "ТорговаяПлощадкаСоглашение", "РозничныйСоглашение");
			ЭтотОбъект[РеквизитСоглашение] = Соглашение;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУсловияПродаж(Знач УсловияПродаж, ЭтоДанныеПлощадки = Истина)
	
	Если УсловияПродаж <> Неопределено Тогда
		ПрефиксРеквизита = ?(ЭтоДанныеПлощадки, "ТорговаяПлощадка", "Розничный");
		
		Если Не УсловияПродаж.Типовое
				 И ЗначениеЗаполнено(УсловияПродаж.Контрагент) Тогда
			ЭтотОбъект[ПрефиксРеквизита + "Контрагент"] = УсловияПродаж.Контрагент;
			ЭтотОбъект[ПрефиксРеквизита + "Партнер"]    = УсловияПродаж.Партнер;
		КонецЕсли;
		
		ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(
			ЭтотОбъект[ПрефиксРеквизита + "Партнер"],
			ЭтотОбъект[ПрефиксРеквизита + "Контрагент"]);
		
		Если УсловияПродаж.ИспользуютсяДоговорыКонтрагентов <> Неопределено
				И УсловияПродаж.ИспользуютсяДоговорыКонтрагентов Тогда
			Объект = Новый Структура;
			Объект.Вставить("Организация", Организация);
			Объект.Вставить("Партнер",     ЭтотОбъект[ПрефиксРеквизита + "Партнер"]);
			Объект.Вставить("Контрагент",  ЭтотОбъект[ПрефиксРеквизита + "Контрагент"]);
			Объект.Вставить("Соглашение",  ЭтотОбъект[ПрефиксРеквизита + "Соглашение"]);
			
			Договор     = ?(ЭтоДанныеПлощадки, ТорговаяПлощадкаДоговорFBO, РозничныйДоговор);
			ХозОперация = ?(ЭтоДанныеПлощадки,
				Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию,
				Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
			
			Объект.Вставить("Договор", Договор);
			Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(
				Объект,
				ХозОперация,
				,
				,
				?(ЭтоДанныеПлощадки, УсловияПродаж.НоваяСхемаКомиссии, Неопределено));
			
			РеквизитДоговор = ?(ЭтоДанныеПлощадки, "ТорговаяПлощадкаДоговорFBO", "РозничныйДоговор");
			ЭтотОбъект[РеквизитДоговор] = Договор;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУсловияПродажПоСоглашению(Соглашение, ЭтоДанныеПлощадки = Истина)
	
	УстановитьПривилегированныйРежим(Истина);
	УсловияПродаж = ПродажиСервер.ПолучитьУсловияПродаж(Соглашение);
	Если Организация <> Неопределено Тогда
		УсловияПродаж.Организация = Организация;
	КонецЕсли;
	ЗаполнитьУсловияПродаж(УсловияПродаж, ЭтоДанныеПлощадки);
	УстановитьПривилегированныйРежим(Ложь);
	
	РозничныйДоговорИзменитьВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоговорПоУмолчанию(ЭтоДанныеПлощадки = Истина)
	
	Партнер = ?(ЭтоДанныеПлощадки, ТорговаяПлощадкаПартнер, РозничныйПартнер);
	Контрагент = ?(ЭтоДанныеПлощадки, ТорговаяПлощадкаКонтрагент, РозничныйКонтрагент);
	Соглашение = ?(ЭтоДанныеПлощадки, ТорговаяПлощадкаСоглашение, РозничныйСоглашение);
	Договор = ?(ЭтоДанныеПлощадки, ТорговаяПлощадкаДоговорFBO, РозничныйДоговор);
	ХозОперация = ?(ЭтоДанныеПлощадки,
		Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию,
		Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Объект = Новый Структура;
		Объект.Вставить("Организация", Организация);
		Объект.Вставить("Партнер",     Партнер);
		Объект.Вставить("Контрагент",  Контрагент);
		Объект.Вставить("Соглашение",  Соглашение);
		
		Объект.Вставить("Договор", Договор);
		Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(
			Объект,
			ХозОперация,
			,
			,
			Истина);
		
		Если ЭтоДанныеПлощадки Тогда
			Объект.Вставить("Договор", ТорговаяПлощадкаДоговорFBS);
			ТорговаяПлощадкаДоговорFBS = Договор;
		КонецЕсли;
		
		РеквизитДоговор = ?(ЭтоДанныеПлощадки, "ТорговаяПлощадкаДоговорFBO", "РозничныйДоговор");
		ЭтотОбъект[РеквизитДоговор] = Договор;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Функция ПроверкаСоглашенияПройдена(Соглашение, ЭтоДанныеПлощадки = Истина)

	ПроверкаПройдена = Истина;
	
	Если ЗначениеЗаполнено(Соглашение) И Не ЭтоДанныеПлощадки Тогда
		ИспользованиеСоглашенийСКлиентами = Константы.ИспользованиеСоглашенийСКлиентами.Получить();
		РеквизитыСоглашения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Соглашение,
			"ВозможнаРеализацияБезПереходаПраваСобственности, Типовое");
		
		ПроверкаПройдена = РеквизитыСоглашения.ВозможнаРеализацияБезПереходаПраваСобственности
			И (ИспользованиеСоглашенийСКлиентами = Перечисления.ИспользованиеСоглашенийСКлиентами.ТиповыеИИндивидуальныеСоглашения
				Или РеквизитыСоглашения.Типовое
					И ИспользованиеСоглашенийСКлиентами = Перечисления.ИспользованиеСоглашенийСКлиентами.ТолькоТиповыеСоглашения
				Или Не РеквизитыСоглашения.Типовое
					И ИспользованиеСоглашенийСКлиентами = Перечисления.ИспользованиеСоглашенийСКлиентами.ТолькоИндивидуальныеСоглашения);
	КонецЕсли;
	
	Возврат ПроверкаПройдена;

КонецФункции

&НаКлиенте
Процедура ЗавершениеЗаполненияНастроекСпособаДоставки(Результат, ДополнительныеПараметры = Неопределено) Экспорт

	ОбновитьСписокСкладовFBS();

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьИспользованиеРегламентногоЗаданияНаСервере(УчетнаяЗаписьМаркетплейса, Префикс, Использование)

	Идентификатор = УчетнаяЗаписьМаркетплейса.УникальныйИдентификатор();
	МенеджерОбъекта = Справочники.УчетныеЗаписиМаркетплейсов;
	УстановитьПривилегированныйРежим(Истина);
	МенеджерОбъекта.УстановитьИспользованиеРегламентногоЗадания(Префикс + Идентификатор, Использование);
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ПричинаОтменыПоУмолчаниюЗавершениеВыбора(РезультатЗакрытия, ОтменяемДополнительныеПараметрыыеСтроки) Экспорт

	Если Не ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		Возврат;
	КонецЕсли;
	
	ПричинаОтменыПоУмолчанию        = РезультатЗакрытия.Ссылка;
	ПричинаОтменыПоУмолчаниюСтрокой = Строка(ПричинаОтменыПоУмолчанию);
	
	СохранитьНастройки();

КонецПроцедуры

#Область УстаревшиеКатегории

&НаКлиенте
Процедура ПроверитьУстаревшиеКатегории()

	ДлительнаяОперация    = ПроверитьУстаревшиеКатегорииНаСервере();
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПроверитьУстаревшиеКатегорииЗавершениеФоновогоЗадания", ЭтотОбъект);
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, ДлительнаяОперация);
	
	Иначе
		ПараметрыОжидания 					   = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПроверитьУстаревшиеКатегорииНаСервере()

	ПараметрыВыполнения 							 = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение            = 0;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания  = НСтр("ru = 'Ozon. Проверка устаревших категорий торговой площадки.'");
	ПараметрыВыполнения.ЗапуститьВФоне               = Истина;
	ПараметрыВыполнения.ПрерватьВыполнениеЕслиОшибка = Истина;
	
	ИмяМетода = "ИнтеграцияСМаркетплейсомOzonСервер.ОпределитьУстаревшиеКатегории";
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, 
		ИмяМетода, 
		УчетнаяЗаписьМаркетплейса,
		1);

КонецФункции

&НаКлиенте
Процедура ПроверитьУстаревшиеКатегорииЗавершениеФоновогоЗадания(Результат, ДополнительныеПараметры = Неопределено) Экспорт

	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.Статус = "Ошибка" Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки);
		
		ИначеЕсли Результат.Статус = "Выполнено" 
		 			И Результат.Свойство("АдресРезультата") Тогда
			Ошибка = РезультатПроверкиУстаревшихКатегорийНаСервере(Результат.АдресРезультата);
			ИнтеграцияСМаркетплейсомOzonКлиент.ВывестиСостояние(Ошибка, ДополнительныеПараметры, Истина);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция РезультатПроверкиУстаревшихКатегорийНаСервере(Знач АдресРезультата)
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	УдалитьИзВременногоХранилища(АдресРезультата);
	
	Если Не ЗначениеЗаполнено(Результат.Ошибка.КодОшибки) Тогда
		Элементы.ГруппаУстаревшиеКатегории.Видимость = (Результат.УстаревшиеКатегории.Количество() > 0);
	КонецЕсли;
	
	Возврат Результат.Ошибка;
	
КонецФункции

#КонецОбласти

#КонецОбласти
