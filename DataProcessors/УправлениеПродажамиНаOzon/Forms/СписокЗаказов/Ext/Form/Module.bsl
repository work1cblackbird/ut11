
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УчетнаяЗапись = Параметры.УчетнаяЗапись;
	
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	НачалоПериода = НачалоДня(ТекущаяДатаСеанса());
	КонецПериода  = КонецДня(ТекущаяДатаСеанса());
	
	Заголовок = Параметры.ЗаголовокФормы;
	ЭтоFBO    = Параметры.ЭтоFBO;
	
	Если ЭтоFBO Тогда
		Элементы.ДекорацияФильтрСтатуса.Ширина                = 5;
		Элементы.ГруппаФильтрПериода.Видимость                = Ложь;
		Элементы.ФильтрСопоставления.Видимость                = Ложь;
		Элементы.ГруппаДокументы.Видимость                    = Ложь;
		Элементы.Действия.Видимость                           = Ложь;
		Элементы.КонтекстноеМенюКомандыFBS.Видимость          = Ложь;
		Элементы.ТаблицаЗаказовДатаСборки.Видимость           = Ложь;
		Элементы.ТаблицаЗаказовГруппаДанныеДоставки.Видимость = Ложь;
	Иначе
		ФильтрДаты          = "ДатаСоздания";
		ФильтрСопоставления = "Все";
	КонецЕсли;
	
	Перечисления.СтатусыЗаказовТорговыхПлощадок.ЗаполнитьСписокВыбора(Элементы.ФильтрСтатуса.СписокВыбора);
	
	УстановитьУсловноеОформление();
	УправлениеВидимостьюДоступностью();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПроверитьПериодИПолучитьОтправленияНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если (ИмяСобытия = "ВыполненаЗагрузкаЗаказовТорговойПлощадки"
				Или ИмяСобытия = "ВыполненаОтменаСборкиЗаказовНаТорговойПлощадке"
				Или ИмяСобытия = "ВыполненоПодтверждениеСборкиЗаказовНаТорговойПлощадке")
			И Не ЭтоFBO
			И Параметр = УчетнаяЗапись Тогда
		ОпределитьДокументыFBS(Ложь);
		ОбновитьТекстДокументыНаОсновании();
		
	ИначеЕсли (ИмяСобытия = "МП_ОбновлениеСведенийПоЗаказамИОтправлениям"
					Или ИмяСобытия = "Запись_ЗаказКлиента"
					Или ИмяСобытия = "Запись_РеализацияТоваровУслуг"
					Или ИмяСобытия = "Запись_ПередачаТоваровХранителю")
				И Не ЭтоFBO Тогда
		ОпределитьДокументыFBS(Ложь);
		ОбновитьТекстДокументыНаОсновании();
		
	ИначеЕсли ИмяСобытия = "Запись_НаборКонстант"
				И (Источник = "ИспользоватьЗаказыКлиентов"
					Или Источник = "ИспользоватьРасширенныеВозможностиЗаказаКлиента") Тогда
		УправлениеВидимостьюДоступностью();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	
	ДатаАктуальностиДанных = Дата(1, 1, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)
	
	ВыбранноеЗначение      = НачалоДня(ВыбранноеЗначение);
	ДатаАктуальностиДанных = Дата(1, 1, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	
	ДатаАктуальностиДанных = Дата(1, 1, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ВыбранноеЗначение      = КонецДня(ВыбранноеЗначение);
	ДатаАктуальностиДанных = Дата(1, 1, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрСтатусаПриИзменении(Элемент)
	
	УстановитьОтбор();
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрСтатусаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФильтрСтатуса = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовТорговыхПлощадок.ПустаяСсылка");
	
	УстановитьОтбор();
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрПоСкладамПриИзменении(Элемент)
	
	УстановитьОтбор();
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрСопоставленияПриИзменении(Элемент)
	
	УстановитьОтбор();
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ДокументОтгрузкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ТаблицаЗаказов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.ДокументОтгрузки) = Тип("СписокЗначений") Тогда
		Результат = Ждать ТекущиеДанные.ДокументОтгрузки.ВыбратьЭлементАсинх(НСтр("ru = 'Документ отгрузки'"));
		
		Если Результат <> Неопределено Тогда
			ПоказатьЗначение(Неопределено, Результат.Значение);
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.ДокументОтгрузки) Тогда
		ПоказатьЗначение(Неопределено, ТекущиеДанные.ДокументОтгрузки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстДокументыНаОснованииОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ТаблицаЗаказов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьЗаказ" Тогда
		ПоказатьЗначение(Неопределено, ТекущиеДанные.ДокументЗаказа);
	
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьДокументОтгрузки" Тогда
		ПоказатьЗначение(Неопределено, ТекущиеДанные.ДокументОтгрузки);
	
	ИначеЕсли СтрНайти(НавигационнаяСсылкаФорматированнойСтроки, "ОткрытьДокументОтгрузки") > 0 Тогда
		Индекс = Число(СтрЗаменить(НавигационнаяСсылкаФорматированнойСтроки, "ОткрытьДокументОтгрузки", ""));
		ПоказатьЗначение(Неопределено, ТекущиеДанные.ДокументОтгрузки[Индекс].Значение);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаЗаказов

&НаКлиенте
Процедура ТаблицаЗаказовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.ТаблицаЗаказов.ТекущаяСтрока;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Обработка.УправлениеПродажамиНаOzon.Форма.СоставЗаказа",
		ПараметрыПросмотраЗаказа(ТекущаяСтрока),
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗаказовПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные            = Элементы.ТаблицаЗаказов.ТекущиеДанные;
	ПредставлениеОтправления = "";
	
	Если Элементы.ГруппаПодвал.Видимость 
			И ТекущиеДанные <> Неопределено Тогда
		ПредставлениеОтправления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Данные по отправлению %1 заказа %2'"),
				ТекущиеДанные.НомерОтправления,
				ТекущиеДанные.НомерЗаказа);
	КонецЕсли;
		
	ОбновитьТекстДокументыНаОсновании();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗаказовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗаказовПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗаказовПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьПериод(Элемент)
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработкаВыбораПериода", ЭтотОбъект);
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = Новый СтандартныйПериод(НачалоПериода, КонецПериода);
	Диалог.Показать(ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПериодИПолучитьОтправления(Команда)
	
	ПроверитьПериодИПолучитьОтправленияНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЭтикеток(Команда)
	
	ОбъектыПечати = Новый Массив;
	Для Каждого ЭлементКоллекции Из Элементы.ТаблицаЗаказов.ВыделенныеСтроки Цикл
		ТекущаяСтрока = ТаблицаЗаказов.НайтиПоИдентификатору(ЭлементКоллекции);
		Если ЗначениеЗаполнено(ТекущаяСтрока.ДокументЗаказа) Тогда
			Если ТекущаяСтрока.СтатусОтправления = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовТорговыхПлощадок.ГотовКОтгрузке") Тогда
				ОбъектыПечати.Добавить(ТекущаяСтрока.ДокументЗаказа);
			ИначеЕсли Элементы.ТаблицаЗаказов.ВыделенныеСтроки.Количество() = 1 Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Печать этикеток возможна только для заказов в статусе ""Готов к сборке"".'"));
				Возврат;
			КонецЕсли;
		ИначеЕсли Элементы.ТаблицаЗаказов.ВыделенныеСтроки.Количество() = 1 Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Для выделенной строки печать этикеток не предусмотрена. Загрузите заказ с торговой площадки.'"));
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Если ОбъектыПечати.Количество() > 0 Тогда
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ЭтоЗаказКлиента", Истина);
		ПараметрыОткрытия.Вставить("ЭтоFBO",          ЭтоFBO);
		ПараметрыОткрытия.Вставить("Объекты",         ОбъектыПечати);
		
		ОткрытьФорму("Обработка.УправлениеПродажамиНаOzon.Форма.ПечатьЭтикеток",
			ПараметрыОткрытия, 
			ЭтотОбъект);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Для выделенных строк печать этикеток не предусмотрена.'"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Дата актуальности
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаАктуальностиДанных.Имя);
	
	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДатаАктуальностиДанных");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Дата(1, 1, 1);
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт",      ШрифтыСтиля.ОбычныйШрифтТекста);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст",      НСтр("ru = '<требуется обновление данных>'"));
	
	// Незагруженные заказы
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементыТаблицы = ПолучитьПодчиненныеЭлементыФормы(Элементы.ТаблицаЗаказов);
	Для Каждого ЭлементКоллекции Из ЭлементыТаблицы Цикл
		ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементКоллекции.Имя);
	КонецЦикла;
	
	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ФильтрСопоставления");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "Все";
	
	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаЗаказов.ДокументЗаказа");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеВидимостьюДоступностью()
	
	Если ЭтоFBO Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияФункциональныхОпций = ИнтеграцияСМаркетплейсамиСервер.ПолучитьФункциональныеОпции(Неопределено);
	ДоступностьКоманд           = ЗначенияФункциональныхОпций.ИспользоватьЗаказыКлиентов
									И ЗначенияФункциональныхОпций.ИспользоватьРасширенныеВозможностиЗаказаКлиента;
	
	Элементы.Действия.Доступность                  = ДоступностьКоманд;
	Элементы.КонтекстноеМенюКомандыFBS.Доступность = ДоступностьКоманд;
	
КонецПроцедуры

// Определяет подчиненные элементы.
//
// Параметры:
//   Элемент - ЭлементыФормы - родительский элемент.
//
// Возвращаемое значение:
//   Массив Из ЭлементыФормы - подчиненные элементы.
//
&НаСервере
Функция ПолучитьПодчиненныеЭлементыФормы(Знач Элемент)
	
	Результат = Новый Массив;
	
	Для Каждого ЭлементКоллекции Из Элемент.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ЭлементКоллекции) = Тип("ГруппаФормы") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, ПолучитьПодчиненныеЭлементыФормы(ЭлементКоллекции));
		Иначе
			Результат.Добавить(ЭлементКоллекции);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбораПериода(Период, ДополнительныеПараметры) Экспорт
	
	Если Период <> Неопределено Тогда
		НачалоПериода = НачалоДня(Период.ДатаНачала);
		КонецПериода  = КонецДня(Период.ДатаОкончания);
		
		ДатаАктуальностиДанных = Дата(1, 1, 1);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтбор()
	
	Отбор = Новый Структура;
	
	Если ЗначениеЗаполнено(ФильтрСтатуса) Тогда
		Отбор.Вставить("СтатусОтправления", ФильтрСтатуса);
	КонецЕсли;
	
	Если Не ЭтоFBO Тогда   
		Если ЗначениеЗаполнено(ФильтрПоСкладам) Тогда
			Отбор.Вставить("ИдентификаторСклада", ФильтрПоСкладам);
		КонецЕсли;
		Если ФильтрСопоставления = "Незагруженные" Тогда
			Отбор.Вставить("Сопоставлено", Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Если Отбор.Количество() > 0 Тогда
		Элементы.ТаблицаЗаказов.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
	Иначе
		Элементы.ТаблицаЗаказов.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПериодИПолучитьОтправленияНаКлиенте()
	
	ОчиститьСообщения();   
	
	Если НачалоПериода > КонецПериода Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Некорректно задан период: дата окончания ранее даты начала.'"));
		Возврат;
	КонецЕсли;
	
	РазницаВДнях = (НачалоДня(КонецПериода) - НачалоДня(НачалоПериода)) / (60 * 60 * 24);     
	
	Если РазницаВДнях > 30 Тогда
		ТекстВопроса = Нстр("ru = 'Период запроса данных превышает месяц. 
								  |Чтобы избежать долгой загрузки данных рекомендуется сократить запрашиваемый период.
								  |Продолжить получение данных?'");
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПроверитьПериодИПолучитьОтправленияЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОповещениеОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		
	Иначе
		ПроверитьПериодИПолучитьОтправленияЗавершение(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПериодИПолучитьОтправленияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПолучитьОправленияНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьОправленияНаКлиенте()
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПолучитьОправленияЗавершениеФоновогоЗадания", ЭтотОбъект);
	ДлительнаяОперация    = ПолучитьОправленияНаСервере();
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, ДлительнаяОперация);
		
	Иначе
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания			   = Истина;
		ПараметрыОжидания.ТекстСообщения				   = НСтр("ru = 'Получение данных о заказах'") + " " + ?(ЭтоFBO, "FBO", "FBS") + ".";
		ПараметрыОжидания.ОповещениеПользователя.Показать  = Истина;
		ПараметрыОжидания.ОповещениеПользователя.Текст 	   = НСтр("ru = 'Ozon'");
		ПараметрыОжидания.ОповещениеПользователя.Пояснение = НСтр("ru = 'Завершено получение данных о заказах'") + " " + ?(ЭтоFBO, "FBO", "FBS") + ".";
		ПараметрыОжидания.ОповещениеПользователя.Картинка  = БиблиотекаКартинок.ЛоготипOzon2;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОправленияНаСервере()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение            = 0;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания  = НСтр("ru = 'Ozon. Получение данных о заказах'") + " " + ?(ЭтоFBO, "FBO", "FBS") + ".";
	ПараметрыВыполнения.ЗапуститьВФоне               = Истина;
	ПараметрыВыполнения.ПрерватьВыполнениеЕслиОшибка = Истина;
	
	ПараметрыФункции = Новый Структура;
	ПараметрыФункции.Вставить("НачалоПериода",       НачалоПериода);
	ПараметрыФункции.Вставить("КонецПериода",        КонецПериода);
	ПараметрыФункции.Вставить("ВидФильтраПоПериоду", ФильтрДаты);
	ПараметрыФункции.Вставить("СтатусОтправления",   "");
	ПараметрыФункции.Вставить("ЭтоFBO",              ЭтоFBO);
	
	ИмяМетода = "ИнтеграцияСМаркетплейсомOzonСервер.ПолучитьОтправления";
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
		ИмяМетода,
		УчетнаяЗапись,
		ПараметрыФункции,
		РеквизитФормыВЗначение("ТаблицаЗаказов"));
	
КонецФункции

&НаКлиенте
Процедура ПолучитьОправленияЗавершениеФоновогоЗадания(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.Статус = "Ошибка" Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки);
		
		ИначеЕсли Результат.Статус = "Выполнено" 
					И Результат.Свойство("АдресРезультата") Тогда
			Ошибка = ПолучитьОправленияЗавершениеФоновогоЗаданияНаСервере(Результат.АдресРезультата);
			ИнтеграцияСМаркетплейсомOzonКлиент.ВывестиСостояние(Ошибка, ДополнительныеПараметры, Истина);
			
			Элементы.ТаблицаЗаказов.Обновить();
			ОбновитьТекстДокументыНаОсновании();
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоFBO Тогда
		УстановитьОтбор();
	Иначе
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПолучениеСпискаСкладовЗавершение", ЭтотОбъект);
		ДлительнаяОперация    = ЗапуститьПолучениеСпискаСкладов(УчетнаяЗапись, УникальныйИдентификатор);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает результат получения отправлений.
//
// Параметры:
//   АдресРезультата - Строка - адрес временного хранилища, в которое будет помещен (или уже помещен) результат работы 
//                       процедуры длительной операции.
//
// Возвращаемое значение:
//   См. ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка.
//
&НаСервере
Функция ПолучитьОправленияЗавершениеФоновогоЗаданияНаСервере(Знач АдресРезультата)
	
	ТаблицаЗаказов.Очистить();
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ПустаяСтрока(Результат.Ошибка.КодОшибки) Тогда
		ДатаАктуальностиДанных = ТекущаяДатаСеанса();
		ЗначениеВРеквизитФормы(Результат.ТаблицаЗаказов, "ТаблицаЗаказов");
		
		Если Не ЭтоFBO Тогда
			ОпределитьДокументыFBS(Ложь);
		КонецЕсли;
		
	Иначе
		ДатаАктуальностиДанных = Дата(1, 1, 1);
	КонецЕсли;
	
	Возврат Результат.Ошибка;
	
КонецФункции

&НаСервере
Функция ПараметрыПросмотраЗаказа(ИдентификаторСтроки)
	
	ТекущиеДанные = ТаблицаЗаказов.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("УчетнаяЗапись",           УчетнаяЗапись);
	ПараметрыФормы.Вставить("ИдентификаторЗаказа",     ТекущиеДанные.ИдентификаторЗаказа);
	ПараметрыФормы.Вставить("НомерЗаказа",             ТекущиеДанные.НомерЗаказа);
	ПараметрыФормы.Вставить("КомментарийКЗаказу",      ТекущиеДанные.КомментарийКЗаказу);
	ПараметрыФормы.Вставить("ДатаСозданияОтправления", ТекущиеДанные.ДатаСозданияОтправления);
	ПараметрыФормы.Вставить("НомерОтправления",        ТекущиеДанные.НомерОтправления);
	ПараметрыФормы.Вставить("СтатусОтправления",       ТекущиеДанные.СтатусОтправления);
	ПараметрыФормы.Вставить("ДатаСборки",              ТекущиеДанные.ДатаСборки);
	ПараметрыФормы.Вставить("ДатаПередачиВДоставку",   ТекущиеДанные.ДатаПередачиВДоставку);
	ПараметрыФормы.Вставить("СпособДоставки",          ТекущиеДанные.СпособДоставки);
	ПараметрыФормы.Вставить("ТипДоставки",             ТекущиеДанные.ТипДоставки);
	ПараметрыФормы.Вставить("РегионДоставки",          ТекущиеДанные.РегионДоставки);
	ПараметрыФормы.Вставить("ГородДоставки",           ТекущиеДанные.ГородДоставки);
	ПараметрыФормы.Вставить("СпособОплаты",            ТекущиеДанные.СпособОплаты);
	ПараметрыФормы.Вставить("ПричинаОтмены",           ТекущиеДанные.ПричинаОтменыОтправления);
	ПараметрыФормы.Вставить("ТрекНомерОтправления",    ТекущиеДанные.ТрекНомерОтправления);
	ПараметрыФормы.Вставить("НаименованиеСклада",      ТекущиеДанные.НаименованиеСклада);
	ПараметрыФормы.Вставить("АдресСодержимогоЗаказа",  ПоместитьВоВременноеХранилище(ТекущиеДанные.СписокТоваровВОтправлении.Выгрузить()));
	ПараметрыФормы.Вставить("ДокументЗаказа",          ТекущиеДанные.ДокументЗаказа);
	ПараметрыФормы.Вставить("ДокументОтгрузки",        ТекущиеДанные.ДокументОтгрузки);
	ПараметрыФормы.Вставить("ЭтоFBO",                  ЭтоFBO);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗапуститьПолучениеСпискаСкладов(УчетнаяЗапись, УникальныйИдентификатор)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Ozon. Получение списка складов.'");
	ПараметрыВыполнения.ЗапуститьВФоне              = Истина;
	
	ИмяМетода = "ИнтеграцияСМаркетплейсомOzonСервер.ПолучитьСкладыСервиса";
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
		ИмяМетода,
		УчетнаяЗапись);
	
КонецФункции

&НаКлиенте
Процедура ПолучениеСпискаСкладовЗавершение(РезультатЗадания, ДополнительныеПараметры) Экспорт
	
	ОчиститьСообщения();
	
	ФильтрПоСкладам = "";
	Элементы.ФильтрПоСкладам.СписокВыбора.Очистить();
	Элементы.ФильтрПоСкладам.СписокВыбора.Добавить("", НСтр("ru = 'Все'"));
	
	Если РезультатЗадания <> Неопределено 
			И РезультатЗадания.Статус = "Выполнено" Тогда
		ПолучениеСпискаСкладовЗавершениеНаСервере(РезультатЗадания.АдресРезультата);
		
	Иначе
		ШаблонОшибки = НСтр("ru = 'Не удалось получить склады учетной записи ""%1"" по причине: %2'");
		ПредставлениеНеизвестнойОшибки = НСтр("ru = 'Неизвестная ошибка выполнения операции'");
		ПодробноеПредставлениеОшибки = ?(РезультатЗадания = Неопределено, ПредставлениеНеизвестнойОшибки, РезультатЗадания.ПодробноеПредставлениеОшибки);
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОшибки,
				УчетнаяЗапись,
				ПодробноеПредставлениеОшибки);
				
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
	УстановитьОтбор();
	
КонецПроцедуры

&НаСервере
Процедура ПолучениеСпискаСкладовЗавершениеНаСервере(АдресРезультата)
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	УдалитьИзВременногоХранилища(АдресРезультата);
	
	ОшибкаПолученияСкладовИзСервиса = Результат.ОшибкаПолученияСкладовИзСервиса;
	Если ОшибкаПолученияСкладовИзСервиса Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось получить список складов маркетплейса. Подробнее см. журнал регистрации.
			|Заполнение списка складов выполнено из сохраненных настроек.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Для Каждого СтрокаСклада Из Результат.ТаблицаСкладов Цикл
		ПредставлениеЗначения = СтрокаСклада.НаименованиеОбъектаМаркетплейса
								 + " (" + ? (СтрокаСклада.ЭтоRealFBS, "RealFBS", "FBS") + ")";
		Элементы.ФильтрПоСкладам.СписокВыбора.Добавить(СтрокаСклада.ИдентификаторОбъектаМаркетплейса, ПредставлениеЗначения);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьДокументыFBS(Знач ТолькоНеСопоставленные = Ложь)
	
	Для Каждого СтрокаТаблицыЗначений Из ТаблицаЗаказов Цикл
		СтрокаТаблицыЗначений.ДокументЗаказа   = Документы.ЗаказКлиента.ПустаяСсылка();
		СтрокаТаблицыЗначений.ДокументОтгрузки = Неопределено;
		СтрокаТаблицыЗначений.Сопоставлено     = Ложь;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаЗаказов.ИдентификаторЗаказа КАК ИдентификаторЗаказа,
		|	ТаблицаЗаказов.НомерЗаказа КАК НомерЗаказа,
		|	ТаблицаЗаказов.НомерОтправления КАК НомерОтправления,
		|	ТаблицаЗаказов.СтатусОтправления КАК СтатусОтправления
		|ПОМЕСТИТЬ ВТ_ТаблицаЗаказов
		|ИЗ
		|	&ТаблицаЗаказов КАК ТаблицаЗаказов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерЗаказа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЗаказов.ИдентификаторЗаказа КАК ИдентификаторЗаказа,
		|	ТаблицаЗаказов.НомерЗаказа КАК НомерЗаказа,
		|	ТаблицаЗаказов.НомерОтправления КАК НомерОтправления,
		|	ТаблицаЗаказов.СтатусОтправления КАК СтатусОтправления,
		|	ЕСТЬNULL(ЗаказыТорговыхПлощадок.Заказ, ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)) КАК Заказ,
		|	ЕСТЬNULL(ДокументЗаказКлиента.ПометкаУдаления, ИСТИНА) КАК ЗаказКлиентаПометкаУдаления,
		|	ЕСТЬNULL(ЗаказыТорговыхПлощадок.ДокументОтгрузки, НЕОПРЕДЕЛЕНО) КАК ДокументОтгрузки
		|ИЗ
		|	ВТ_ТаблицаЗаказов КАК ТаблицаЗаказов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаказыТорговыхПлощадок КАК ЗаказыТорговыхПлощадок
		|		ПО (ЗаказыТорговыхПлощадок.УчетнаяЗапись = &УчетнаяЗапись)
		|			И ТаблицаЗаказов.НомерОтправления = ЗаказыТорговыхПлощадок.НомерОтправления
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ДокументЗаказКлиента
		|		ПО (ЗаказыТорговыхПлощадок.Заказ = ДокументЗаказКлиента.Ссылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаЗаказов.ИдентификаторЗаказа,
		|	ТаблицаЗаказов.НомерЗаказа,
		|	ЗаказыТорговыхПлощадок.НомерРодительскогоОтправления,
		|	ТаблицаЗаказов.СтатусОтправления КАК СтатусОтправления,
		|	ЗаказыТорговыхПлощадок.Заказ,
		|	ЕСТЬNULL(ДокументЗаказКлиента.ПометкаУдаления, ЛОЖЬ),
		|	ЗаказыТорговыхПлощадок.ДокументОтгрузки
		|ИЗ
		|	ВТ_ТаблицаЗаказов КАК ТаблицаЗаказов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаказыТорговыхПлощадок КАК ЗаказыТорговыхПлощадок
		|		ПО (ЗаказыТорговыхПлощадок.УчетнаяЗапись = &УчетнаяЗапись)
		|			И ТаблицаЗаказов.НомерОтправления = ЗаказыТорговыхПлощадок.НомерРодительскогоОтправления
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ДокументЗаказКлиента
		|		ПО (ЗаказыТорговыхПлощадок.Заказ = ДокументЗаказКлиента.Ссылка)
		|ГДЕ
		|	НЕ ЗаказыТорговыхПлощадок.Заказ ЕСТЬ NULL";
	
	Если ТолькоНеСопоставленные Тогда
		Запрос.Текст = Запрос.Текст
			+ "
			|ГДЕ
			|	ЗаказыТорговыхПлощадок.Заказ ЕСТЬ NULL
			|		ИЛИ ДокументЗаказКлиента.ПометкаУдаления";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("УчетнаяЗапись",  УчетнаяЗапись);
	Запрос.УстановитьПараметр("ТаблицаЗаказов", ТаблицаЗаказов.Выгрузить());
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаДанных = РезультатЗапроса.Выбрать();
		
		Для Каждого СтрокаТаблицыЗначений Из ТаблицаЗаказов Цикл
			Отбор = Новый Структура;
			Отбор.Вставить("НомерЗаказа",      СтрокаТаблицыЗначений.НомерЗаказа);
			Отбор.Вставить("НомерОтправления", СтрокаТаблицыЗначений.НомерОтправления);
			
			ВыборкаДанных.Сбросить();
			Пока ВыборкаДанных.НайтиСледующий(Отбор) Цикл
				Если Не ВыборкаДанных.ЗаказКлиентаПометкаУдаления Тогда
					СтрокаТаблицыЗначений.ДокументЗаказа = ВыборкаДанных.Заказ;
					Если ЗначениеЗаполнено(ВыборкаДанных.ДокументОтгрузки) Тогда
						Если ТипЗнч(СтрокаТаблицыЗначений.ДокументОтгрузки) = Тип("СписокЗначений") Тогда
							СтрокаТаблицыЗначений.ДокументОтгрузки.Добавить(ВыборкаДанных.ДокументОтгрузки);
						ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицыЗначений.ДокументОтгрузки) Тогда
							ДокументОтгрузки = СтрокаТаблицыЗначений.ДокументОтгрузки;
							СтрокаТаблицыЗначений.ДокументОтгрузки = Новый СписокЗначений;
							СтрокаТаблицыЗначений.ДокументОтгрузки.Добавить(ДокументОтгрузки);
							СтрокаТаблицыЗначений.ДокументОтгрузки.Добавить(ВыборкаДанных.ДокументОтгрузки);
						Иначе
							СтрокаТаблицыЗначений.ДокументОтгрузки = ВыборкаДанных.ДокументОтгрузки;
						КонецЕсли;
					КонецЕсли;
					
				Иначе
					СтрокаТаблицыЗначений.ДокументЗаказа   = Документы.ЗаказКлиента.ПустаяСсылка();
					СтрокаТаблицыЗначений.ДокументОтгрузки = Неопределено;
				КонецЕсли;
				
				СтрокаТаблицыЗначений.Сопоставлено = ЗначениеЗаполнено(СтрокаТаблицыЗначений.ДокументЗаказа);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Элементы.ТаблицаЗаказов.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТекстДокументыНаОсновании()
	
	ТекущиеДанные       = Элементы.ТаблицаЗаказов.ТекущиеДанные;
	ИдентификаторСтроки = -1;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ИдентификаторСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьТекстДокументыНаОсновании", 0.1, Истина);
	
КонецПроцедуры
	
&НаКлиенте
Процедура Подключаемый_ОбновитьТекстДокументыНаОсновании()
	
	ТекущиеДанные = Элементы.ТаблицаЗаказов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Элементы.ТекстДокументыНаОсновании.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ИдентификаторСтроки <> ТекущиеДанные.ПолучитьИдентификатор() Тогда
		Возврат;
	КонецЕсли;
	
	ТекстыПоляДокументыНаОсновании.Очистить();
	ЦветТекста = Элементы.ТекстДокументыНаОсновании.ЦветТекста;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ДокументЗаказа) Тогда
		НавигационнаяСсылка    = "ОткрытьЗаказ";
		ПредставлениеДокумента = Новый ФорматированнаяСтрока(Строка(ТекущиеДанные.ДокументЗаказа),, ЦветТекста,, НавигационнаяСсылка);
		ТекстыПоляДокументыНаОсновании.Добавить(ПредставлениеДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ДокументОтгрузки) Тогда
		Если ТипЗнч(ТекущиеДанные.ДокументОтгрузки) = Тип("СписокЗначений") Тогда
			Для Каждого ЭлементКоллекции Из ТекущиеДанные.ДокументОтгрузки Цикл
				НавигационнаяСсылка    = "ОткрытьДокументОтгрузки" + Формат(ТекущиеДанные.ДокументОтгрузки.Индекс(ЭлементКоллекции), "ЧН=; ЧГ=0");
				ПредставлениеДокумента = Новый ФорматированнаяСтрока(Строка(ЭлементКоллекции),, ЦветТекста,, НавигационнаяСсылка);
				ТекстыПоляДокументыНаОсновании.Добавить(ПредставлениеДокумента);
			КонецЦикла;
		Иначе
			НавигационнаяСсылка    = "ОткрытьДокументОтгрузки";
			ПредставлениеДокумента = Новый ФорматированнаяСтрока(Строка(ТекущиеДанные.ДокументОтгрузки),, ЦветТекста,, НавигационнаяСсылка);
			ТекстыПоляДокументыНаОсновании.Добавить(ПредставлениеДокумента);
		КонецЕсли;
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиентСервер.ОбновитьТекстДокументыНаОсновании(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти
