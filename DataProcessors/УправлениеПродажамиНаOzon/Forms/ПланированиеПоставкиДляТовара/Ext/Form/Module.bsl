
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИдентификаторПубликации          = Параметры.ИдентификаторПубликации;
	ПредставлениеОбъектаМаркетплейса = Параметры.ПредставлениеОбъектаМаркетплейса;
	Номенклатура                     = Параметры.Номенклатура;
	Характеристика                   = Параметры.Характеристика;
	Упаковка                         = Параметры.Упаковка;
	ДоступныеСклады1С                = Параметры.ДоступныеСклады1С;
	
	РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, "ИспользоватьУпаковки, ЕдиницаИзмерения");
	ИспользоватьУпаковки  = РеквизитыНоменклатуры.ИспользоватьУпаковки;
	ЕдиницаИзмерения      = РеквизитыНоменклатуры.ЕдиницаИзмерения;

	Если Не ИспользоватьУпаковки
			Или (ИспользоватьУпаковки И Не ЗначениеЗаполнено(Упаковка)) Тогда
		Элементы.Упаковка.Видимость         = Ложь;
		Элементы.ЕдиницаИзмерения.Видимость = Истина;
	КонецЕсли;
	
	Если Не Параметры.ИспользоватьУпаковкиНоменклатуры Тогда
		Элементы.ТаблицаОстатковУпаковка.Видимость        = Ложь;
		Элементы.ДанныеТорговойПлощадкиУпаковка.Видимость = Ложь;
		Элементы.Упаковка.Видимость                       = Ложь;
		Элементы.ЕдиницаИзмерения.Видимость               = Ложь;
	КонецЕсли;
	
	Если Параметры.ДанныеТорговойПлощадки Тогда
		ЗаполнитьДанныеПоПланированию();
		
		Заголовок = ?(Параметры.АнализироватьОтгрузки, НСтр("ru = 'Остатки и заказы товаров на складах Ozon'"), НСтр("ru = 'Остатки товаров на складах Ozon'"));
		
		Элементы.ТаблицаОстатков.Видимость      = Ложь;
		Элементы.ГруппаПодвалСтатус.Видимость   = Ложь;
		Элементы.ИтогоКПоставке.Заголовок       = ?(Параметры.АнализироватьОтгрузки, НСтр("ru = 'Плановая потребность'"), НСтр("ru = 'Итого в наличии'"));
		Элементы.ФормаЗапланировать.Видимость   = Ложь;
		Элементы.ФормаЗакрыть.КнопкаПоУмолчанию = Истина;
		
		Элементы.ДанныеТорговойПлощадкиГруппаЗаказыСоСкладовТорговойПлощадки.Видимость = Параметры.АнализироватьОтгрузки;
		Элементы.ДанныеТорговойПлощадкиЗапасДней.Видимость                             = Параметры.АнализироватьОтгрузки;
		
	Иначе
		ЗаполнитьДанныеПоОстаткам(Параметры.ПланированиеПоСкладам);
		УстановитьУсловноеОформление();
		
		Элементы.ДанныеТорговойПлощадки.Видимость = Ложь;
	КонецЕсли;

	Элементы.ФормаЗапланировать.Видимость   = (ТаблицаОстатков.ПолучитьЭлементы().Количество() > 0);
	Элементы.ФормаЗакрыть.КнопкаПоУмолчанию = (ТаблицаОстатков.ПолучитьЭлементы().Количество() = 0);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаОстатков

&НаКлиенте
Процедура ТаблицаОстатковПриАктивизацииСтроки(Элемент)

	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаПодвалСтатусОшибка.Видимость         = (ТаблицаОстатков.ПолучитьЭлементы().Количество() = 0);
	Элементы.ГруппаПодвалСтатусОшибокНет.Видимость      = ТекущиеДанные.Статус;
	Элементы.ГруппаПодвалСтатусПредупреждение.Видимость = Не ТекущиеДанные.Статус;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОстатковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Поле.Имя = "ТаблицаОстатковПереместитьВправо" Тогда
		СтандартнаяОбработка = Ложь;
		
		Если Не ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторПубликации) Тогда
			ТекущиеДанные.ЗапланироватьКПоставке = ТекущиеДанные.Доступно;
			РассчитатьИтоги();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОстатковПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОстатковПередНачаломИзменения(Элемент, Отказ)

	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторПубликации) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОстатковПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОстатковЗапланироватьКПоставкеПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ТаблицаОстатков.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ЗапланироватьКПоставке = Мин(ТекущиеДанные.ЗапланироватьКПоставке, ТекущиеДанные.Доступно);
	РассчитатьИтоги();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Запланировать(Команда)
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторПубликации", 		   ИдентификаторПубликации);
	Результат.Вставить("ПредставлениеОбъектаМаркетплейса", ПредставлениеОбъектаМаркетплейса);
	Результат.Вставить("Номенклатура",                     Номенклатура);
	Результат.Вставить("Характеристика",                   Характеристика);
	Результат.Вставить("Упаковка",                         Упаковка);
	Результат.Вставить("КоэффициентУпаковки",              КоэффициентУпаковки);
	Результат.Вставить("ВНаличииНаСкладах1С",      		   0);
	Результат.Вставить("ЗапланироватьКПоставке",           ИтогоКПоставке);
	Результат.Вставить("ПоСкладам",                        Новый Массив);
	
	Для Каждого СтрокаПервогоУровня Из ТаблицаОстатков.ПолучитьЭлементы() Цикл
		ПоСкладу = Новый Структура;
		ПоСкладу.Вставить("Склад",                  СтрокаПервогоУровня.Склад);
		ПоСкладу.Вставить("Остаток",                Окр(СтрокаПервогоУровня.Остаток * КоэффициентУпаковки, 3, РежимОкругления.Окр15как20));
		ПоСкладу.Вставить("ЗапланироватьКПоставке", СтрокаПервогоУровня.ЗапланироватьКПоставке);
		
		Результат.ВНаличииНаСкладах1С = Результат.ВНаличииНаСкладах1С + Окр(СтрокаПервогоУровня.Остаток * КоэффициентУпаковки, 3, РежимОкругления.Окр15как20);
		Результат.ПоСкладам.Добавить(ПоСкладу);
	КонецЦикла;
	
	Закрыть(Результат);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьДанныеПоПланированию()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ВЫРАЗИТЬ(&Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
		|	ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Упаковка,
		|	&ИдентификаторПубликации КАК ИдентификаторПубликации
		|ПОМЕСТИТЬ ВТ_ТаблицаТоваров
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Упаковка" 
	
		+ ОбщегоНазначения.РазделительПакетаЗапросов()
		+ Обработки.УправлениеПродажамиНаOzon.ТекстЗапросаДанныхПланирования()
		
		+ "УНИЧТОЖИТЬ ВТ_ТаблицаТоваров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Показатели.ИдентификаторСкладаТорговойПлощадки КАК ИдентификаторСкладаТорговойПлощадки,
		|	МАКСИМУМ(ВТ_Показатели.НаименованиеСкладаТорговойПлощадки) КАК НаименованиеСкладаТорговойПлощадки,
		|	ВТ_Показатели.Упаковка КАК Упаковка,
		|	СУММА(ВТ_Показатели.ВНаличии) КАК ВНаличии,
		|	СУММА(ВТ_Показатели.Заказано) КАК Заказано,
		|	СУММА(ВТ_Показатели.Отменено) КАК Отменено,
		|	МАКСИМУМ(ВТ_Показатели.ДнейВНаличии) КАК ДнейВНаличии
		|ИЗ
		|	ВТ_Показатели КАК ВТ_Показатели
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Показатели.ИдентификаторСкладаТорговойПлощадки,
		|	ВТ_Показатели.Упаковка
		|
		|ИМЕЮЩИЕ
		|	СУММА(ВТ_Показатели.ВНаличии) + СУММА(ЕСТЬNULL(ВТ_Показатели.Заказано, 0)) + СУММА(ЕСТЬNULL(ВТ_Показатели.Отменено, 0)) <> 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НаименованиеСкладаТорговойПлощадки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Показатели
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Данные";
	
	Обработки.УправлениеПродажамиНаOzon.СкорректироватьТекстЗапросаДанныхПланирования(Запрос, Параметры);
	
	Запрос.УстановитьПараметр("Номенклатура",            Параметры.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",          Параметры.Характеристика);
	Запрос.УстановитьПараметр("Упаковка",                Параметры.Упаковка);
	Запрос.УстановитьПараметр("ИдентификаторПубликации", Параметры.ИдентификаторПубликации);
	
	ИтогоКПоставке = ?(Параметры.АнализироватьОтгрузки, Параметры.ПлановаяПотребность, 0);
	ВыборкаДанных  = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДанных.Следующий() Цикл
		СтрокаТаблицыЗначений                                    = ДанныеТорговойПлощадки.Добавить();
		СтрокаТаблицыЗначений.НаименованиеСкладаТорговойПлощадки = ВыборкаДанных.НаименованиеСкладаТорговойПлощадки;
		СтрокаТаблицыЗначений.Упаковка                           = ВыборкаДанных.ВНаличии;
		СтрокаТаблицыЗначений.ВНаличии                           = ВыборкаДанных.ВНаличии;
		
		Если Параметры.АнализироватьОтгрузки Тогда
			СтрокаТаблицыЗначений.Заказано            = ВыборкаДанных.Заказано;
			СтрокаТаблицыЗначений.Отменено            = ВыборкаДанных.Отменено;
			СтрокаТаблицыЗначений.ДнейВНаличии        = ВыборкаДанных.ДнейВНаличии;
			СтрокаТаблицыЗначений.СреднийЗаказВДень   = Окр(?(СтрокаТаблицыЗначений.ДнейВНаличии = 0, 0, 
															(СтрокаТаблицыЗначений.Заказано - СтрокаТаблицыЗначений.Отменено) / СтрокаТаблицыЗначений.ДнейВНаличии), 3, РежимОкругления.Окр15как20);
			СтрокаТаблицыЗначений.ЗапасДней           = Окр(?(СтрокаТаблицыЗначений.СреднийЗаказВДень = 0, 0, 
															СтрокаТаблицыЗначений.ВНаличии / СтрокаТаблицыЗначений.СреднийЗаказВДень), 1, РежимОкругления.Окр15как20);
			СтрокаТаблицыЗначений.ПлановаяПотребность = Окр(Макс(0, 
															Параметры.КоличествоДнейПланирования * СтрокаТаблицыЗначений.СреднийЗаказВДень - СтрокаТаблицыЗначений.ВНаличии + 0.4), 0, РежимОкругления.Окр15как20);
		КонецЕсли;
		
		Если Не Параметры.АнализироватьОтгрузки Тогда
			ИтогоКПоставке = ИтогоКПоставке + СтрокаТаблицыЗначений.ВНаличии;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоОстаткам(ПланированиеПоСкладам)
	
	Если ПланированиеПоСкладам = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Расчет остатков по складам
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЛОЖЬ КАК Отработано,
		|	ЗапасыИПотребностиОстатки.Склад КАК Склад,
		|	СУММА(ЗапасыИПотребностиОстатки.ВНаличииОстаток - ЗапасыИПотребностиОстатки.РезервироватьНаСкладеОстаток - ЗапасыИПотребностиОстатки.РезервироватьПоМереПоступленияОстаток) КАК Остаток
		|ИЗ
		|	РегистрНакопления.ЗапасыИПотребности.Остатки(
		|			,
		|			Номенклатура = &Номенклатура
		|				И Характеристика = &Характеристика
		|				И Склад В
		|					(ВЫБРАТЬ
		|						СправочникСклады.Ссылка КАК Склад
		|					ИЗ
		|						Справочник.Склады КАК СправочникСклады
		|					ГДЕ
		|						&ТекстЗапросаДоступныеСклады1С
		|						И НЕ СправочникСклады.ЭтоГруппа)
		|				И Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)) КАК ЗапасыИПотребностиОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗапасыИПотребностиОстатки.Склад
		|
		|ИМЕЮЩИЕ
		|	СУММА(ЗапасыИПотребностиОстатки.ВНаличииОстаток - ЗапасыИПотребностиОстатки.РезервироватьНаСкладеОстаток - ЗапасыИПотребностиОстатки.РезервироватьПоМереПоступленияОстаток) > 0";

	Если ДоступныеСклады1С.Количество() > 0 Тогда
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст, 
			"&ТекстЗапросаДоступныеСклады1С",
			"СправочникСклады.Ссылка В ИЕРАРХИИ (&ДоступныеСклады1С)");
	Иначе
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст, 
			"&ТекстЗапросаДоступныеСклады1С",
			"ИСТИНА");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Номенклатура",      Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",    Характеристика);
	Запрос.УстановитьПараметр("ДоступныеСклады1С", ДоступныеСклады1С);

	ОстаткиТоваров = Запрос.Выполнить().Выгрузить();
	ОстаткиТоваров.Колонки.Добавить("ОстатокОбщий", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 3)));
	ОстаткиТоваров.Индексы.Добавить("Склад");
	
	Для Каждого СтрокаТаблицыЗначений Из ОстаткиТоваров Цикл
		СтрокаТаблицыЗначений.ОстатокОбщий = СтрокаТаблицыЗначений.Остаток;
	КонецЦикла;
	
	// Распределение остатков по складам
	Данные = Новый ТаблицаЗначений;
	Данные.Колонки.Добавить("ИдентификаторПубликации", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	Данные.Колонки.Добавить("ПредставлениеОбъекта",    Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(250)));
	Данные.Колонки.Добавить("Упаковка",                Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	Данные.Колонки.Добавить("КоэффициентУпаковки",     Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(18, 3)));
	Данные.Колонки.Добавить("Склад",                   Новый ОписаниеТипов("СправочникСсылка.Склады"));
	Данные.Колонки.Добавить("Остаток",      		   Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 3)));
	Данные.Колонки.Добавить("Зарезервировано",         Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 3)));
	
	// Ручное планирование
	Для Каждого КлючЗначение Из ПланированиеПоСкладам Цикл
		Если КлючЗначение.Ключ = ИдентификаторПубликации Тогда
			КоэффициентУпаковки = КлючЗначение.Значение.КоэффициентУпаковки;
		КонецЕсли;
		
		Если КлючЗначение.Значение.ПоСкладам.Количество() > 0 Тогда
			Для Каждого ЭлементКоллекции Из КлючЗначение.Значение.ПоСкладам Цикл
				СтрокаТаблицыЗначений                         = Данные.Добавить();
				СтрокаТаблицыЗначений.ИдентификаторПубликации = КлючЗначение.Ключ;
				СтрокаТаблицыЗначений.ПредставлениеОбъекта    = КлючЗначение.Значение.ПредставлениеОбъекта;
				СтрокаТаблицыЗначений.Упаковка                = КлючЗначение.Значение.Упаковка;
				СтрокаТаблицыЗначений.КоэффициентУпаковки     = КлючЗначение.Значение.КоэффициентУпаковки;
				СтрокаТаблицыЗначений.Склад                   = ЭлементКоллекции.Склад;
				СтрокаТаблицыЗначений.Остаток                 = ЭлементКоллекции.Остаток;
				СтрокаТаблицыЗначений.Зарезервировано         = Окр(ЭлементКоллекции.ЗапланироватьКПоставке * СтрокаТаблицыЗначений.КоэффициентУпаковки, 3, РежимОкругления.Окр15как20);
				
				Отбор           = Новый Структура("Склад", СтрокаТаблицыЗначений.Склад);
				НайденныеСтроки = ОстаткиТоваров.НайтиСтроки(Отбор);
				
				Если НайденныеСтроки.Количество() = 0 Тогда
					СтрокаТаблицыЗначений.Остаток = 0;
				Иначе
					СтрокаТаблицыЗначений.Остаток = Мин(СтрокаТаблицыЗначений.Остаток, НайденныеСтроки[0].Остаток);
					
					НайденныеСтроки[0].Остаток    = НайденныеСтроки[0].Остаток - СтрокаТаблицыЗначений.Зарезервировано;
					НайденныеСтроки[0].Отработано = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ЭлементКоллекции Из ОстаткиТоваров Цикл
				Если ЭлементКоллекции.Отработано Тогда
					Продолжить;
				КонецЕсли;

				СтрокаТаблицыЗначений                         = Данные.Добавить();
				СтрокаТаблицыЗначений.ИдентификаторПубликации = КлючЗначение.Ключ;
				СтрокаТаблицыЗначений.ПредставлениеОбъекта    = КлючЗначение.Значение.ПредставлениеОбъекта;
				СтрокаТаблицыЗначений.Упаковка                = КлючЗначение.Значение.Упаковка;
				СтрокаТаблицыЗначений.КоэффициентУпаковки     = КлючЗначение.Значение.КоэффициентУпаковки;
				СтрокаТаблицыЗначений.Склад                   = ЭлементКоллекции.Склад;
				СтрокаТаблицыЗначений.Остаток                 = ЭлементКоллекции.Остаток;
				СтрокаТаблицыЗначений.Зарезервировано         = 0;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
			
	// Автоматическое планирование
	Для НомерПоПорядку = 1 По ПланированиеПоСкладам.Количество() Цикл
		Для Каждого КлючЗначение Из ПланированиеПоСкладам Цикл
			Если КлючЗначение.Значение.НомерПоПорядку <> НомерПоПорядку Тогда
				Продолжить;
			КонецЕсли;
			
			Если КлючЗначение.Значение.ПоСкладам.Количество() = 0 Тогда
				ЗапланироватьКПоставке = КлючЗначение.Значение.ЗапланироватьКПоставке * КлючЗначение.Значение.КоэффициентУпаковки;
				
				Для Каждого ЭлементКоллекции Из ОстаткиТоваров Цикл
					Если ЭлементКоллекции.Остаток <= 0 Тогда
						Продолжить;
					КонецЕсли;
					
					СтрокаТаблицыЗначений                         = Данные.Добавить();
					СтрокаТаблицыЗначений.ИдентификаторПубликации = КлючЗначение.Ключ;
					СтрокаТаблицыЗначений.ПредставлениеОбъекта    = КлючЗначение.Значение.ПредставлениеОбъекта;
					СтрокаТаблицыЗначений.Упаковка                = КлючЗначение.Значение.Упаковка;
					СтрокаТаблицыЗначений.КоэффициентУпаковки     = КлючЗначение.Значение.КоэффициентУпаковки;
					СтрокаТаблицыЗначений.Склад                   = ЭлементКоллекции.Склад;
					СтрокаТаблицыЗначений.Остаток                 = ЭлементКоллекции.ОстатокОбщий;
					СтрокаТаблицыЗначений.Зарезервировано         = Макс(0, Мин(ЭлементКоллекции.Остаток, ЗапланироватьКПоставке));
																		
					ЗапланироватьКПоставке   = ЗапланироватьКПоставке - СтрокаТаблицыЗначений.Зарезервировано;
					ЭлементКоллекции.Остаток = ЭлементКоллекции.Остаток - СтрокаТаблицыЗначений.Зарезервировано;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Данные.Сортировать("Склад");
	
	// Заполнение дерева значений
	ДеревоЗначений      = РеквизитФормыВЗначение("ТаблицаОстатков");
	Склад               = Справочники.Склады.ПустаяСсылка();
	СтрокаПервогоУровня = Неопределено;
	Зарезервировано     = 0;
	
	Для Каждого СтрокаТаблицыЗначений Из Данные Цикл
		Если Склад <> СтрокаТаблицыЗначений.Склад Тогда
			Если СтрокаПервогоУровня <> Неопределено Тогда
				СтрокаПервогоУровня.Зарезервировано        = Окр(Зарезервировано / КоэффициентУпаковки, 3, РежимОкругления.Окр15как20);
				СтрокаПервогоУровня.Доступно               = СтрокаПервогоУровня.Остаток - СтрокаПервогоУровня.Зарезервировано;
				СтрокаПервогоУровня.ЗапланироватьКПоставке = Мин(СтрокаПервогоУровня.ЗапланироватьКПоставке, СтрокаПервогоУровня.Доступно);
				СтрокаПервогоУровня.ПереместитьВправо      = (СтрокаПервогоУровня.Доступно > 0);
			КонецЕсли;
			
			Склад           = СтрокаТаблицыЗначений.Склад;
			Зарезервировано = 0;
			
			СтрокаПервогоУровня                         = ДеревоЗначений.Строки.Добавить();
			СтрокаПервогоУровня.ПредставлениеОбъекта    = Строка(СтрокаТаблицыЗначений.Склад);
			СтрокаПервогоУровня.ИдентификаторПубликации = "";
			СтрокаПервогоУровня.Упаковка                = Упаковка;
			СтрокаПервогоУровня.КоэффициентУпаковки     = КоэффициентУпаковки;
			СтрокаПервогоУровня.Склад                   = СтрокаТаблицыЗначений.Склад;
			СтрокаПервогоУровня.Остаток                 = Окр(СтрокаТаблицыЗначений.Остаток / КоэффициентУпаковки, 3, РежимОкругления.Окр15как20);
			СтрокаПервогоУровня.Зарезервировано         = 0;
			СтрокаПервогоУровня.Доступно                = 0;
			СтрокаПервогоУровня.Статус                  = Истина;
			СтрокаПервогоУровня.ПереместитьВправо       = Ложь;
		КонецЕсли;

		Если СтрокаТаблицыЗначений.ИдентификаторПубликации = ИдентификаторПубликации Тогда
			СтрокаПервогоУровня.ЗапланироватьКПоставке = Окр(СтрокаТаблицыЗначений.Зарезервировано / КоэффициентУпаковки, 3, РежимОкругления.Окр15как20);
		КонецЕсли;
		
		Если СтрокаТаблицыЗначений.ИдентификаторПубликации <> ИдентификаторПубликации 
				И СтрокаТаблицыЗначений.Зарезервировано > 0 Тогда
			СтрокаВторогоУровня                         = СтрокаПервогоУровня.Строки.Добавить();
			СтрокаВторогоУровня.ПредставлениеОбъекта    = СтрокаТаблицыЗначений.ПредставлениеОбъекта;
			СтрокаВторогоУровня.ИдентификаторПубликации = СтрокаТаблицыЗначений.ИдентификаторПубликации;
			СтрокаВторогоУровня.Упаковка                = СтрокаТаблицыЗначений.Упаковка;
			СтрокаВторогоУровня.КоэффициентУпаковки     = СтрокаТаблицыЗначений.КоэффициентУпаковки;
			СтрокаВторогоУровня.Склад                   = СтрокаТаблицыЗначений.Склад;
			СтрокаВторогоУровня.Остаток                 = 0;
			СтрокаВторогоУровня.Зарезервировано         = Окр(СтрокаТаблицыЗначений.Зарезервировано / СтрокаТаблицыЗначений.КоэффициентУпаковки, 3, РежимОкругления.Окр15как20);
			СтрокаВторогоУровня.Доступно                = 0;
			СтрокаВторогоУровня.ЗапланироватьКПоставке  = 0;
			СтрокаВторогоУровня.Статус                  = Ложь;
			СтрокаВторогоУровня.ПереместитьВправо       = Ложь;
			
			Зарезервировано            = Зарезервировано + СтрокаТаблицыЗначений.Зарезервировано;
			СтрокаПервогоУровня.Статус = Ложь;
		КонецЕсли;
	КонецЦикла;

	Если ЗначениеЗаполнено(Склад) 
			И СтрокаПервогоУровня <> Неопределено Тогда
		СтрокаПервогоУровня.Зарезервировано        = Окр(Зарезервировано / КоэффициентУпаковки, 3, РежимОкругления.Окр15как20);
		СтрокаПервогоУровня.Доступно               = СтрокаПервогоУровня.Остаток - СтрокаПервогоУровня.Зарезервировано;
		СтрокаПервогоУровня.ЗапланироватьКПоставке = Мин(СтрокаПервогоУровня.ЗапланироватьКПоставке, СтрокаПервогоУровня.Доступно);
		СтрокаПервогоУровня.ПереместитьВправо      = (СтрокаПервогоУровня.Доступно > 0);
	КонецЕсли;

	ЗначениеВРеквизитФормы(ДеревоЗначений, "ТаблицаОстатков");
	РассчитатьИтоги();

КонецПроцедуры

&НаСервере
Процедура РассчитатьИтоги()

	ИтогоКПоставке = 0;
	
	Для Каждого СтрокаПервогоУровня Из ТаблицаОстатков.ПолучитьЭлементы() Цикл
		ИтогоКПоставке = ИтогоКПоставке + СтрокаПервогоУровня.ЗапланироватьКПоставке;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаОстатковПредставление.Имя);
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаОстатковУпаковка.Имя);
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаОстатковОстаток.Имя);
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаОстатковЗарезервировано.Имя);
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаОстатковДоступно.Имя);
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаОстатковЗапланироватьКПоставке.Имя);

	ОтборЭлемента               = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаОстатков.ИдентификаторПубликации");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.Заполнено;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.НаклонныйШрифтРаботаСНоменклатурой);

	// Упаковка
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаОстатковУпаковка.Имя);
	
	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИспользоватьУпаковки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст",      Новый ПолеКомпоновкиДанных("ЕдиницаИзмерения"));
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаОстатковУпаковка.Имя);
	
	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИспользоватьУпаковки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
			
	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаОстатков.Упаковка");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
			
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст",      Новый ПолеКомпоновкиДанных("ЕдиницаИзмерения"));

КонецПроцедуры

#КонецОбласти
