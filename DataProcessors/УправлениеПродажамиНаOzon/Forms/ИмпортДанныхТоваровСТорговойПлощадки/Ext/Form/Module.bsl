
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УчетнаяЗаписьМаркетплейса  = Параметры.УчетнаяЗаписьМаркетплейса;
	ВариантЗагрузкиДанных      = Параметры.ВариантЗагрузкиДанных;
	ОбработкаПереданныхПозиций = Параметры.ОбработкаПереданныхПозиций;
	ЗагрузитьЦеныПродажи       = Параметры.ЗагрузитьЦеныПродажи;
	ЗагрузитьИзображения       = Параметры.ЗагрузитьИзображения;

	ДополнительныеПараметрыИмпортаДанных                                = ИнтеграцияСМаркетплейсомOzonСервер.НовыеДополнительныеПараметрыИмпортаДанных();
	ДополнительныеПараметрыИмпортаДанных.СортироватьСтрокиДереваТоваров = Истина;
	СоздатьЭлементыНоменклатуры                                         = Ложь;
	ЗаписатьЦеныОтдельнойКомандой                                       = Ложь;

	ИзменитьРеквизитыФормы();

	ВыполнитьНачальноеЗаполнениеИмпортируемыхТоваров();

	ИсточникКатегории = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗаписьМаркетплейса, "ИсточникКатегории");
	Если ИсточникКатегории = ПредопределенноеЗначение("Перечисление.ИсточникиКатегорийДляМаркетплейса.ВидНоменклатуры") Тогда
		Элементы.ИмпортируемыеТоварыКатегория.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ВидыНоменклатуры");
	ИначеЕсли ИсточникКатегории = ПредопределенноеЗначение("Перечисление.ИсточникиКатегорийДляМаркетплейса.ИерархияНоменклатуры") Тогда
		Элементы.ИмпортируемыеТоварыКатегория.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	ИначеЕсли ИсточникКатегории = ПредопределенноеЗначение("Перечисление.ИсточникиКатегорийДляМаркетплейса.ТоварнаяКатегория") Тогда
		Элементы.ИмпортируемыеТоварыКатегория.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ТоварныеКатегории");
	КонецЕсли;

	ОтображатьСопоставленные = 0;
	ОтображатьПоСтатусу      = -1;
	ОбновитьКнопкуОтбораПоСтатусу("ОтобратьПоСтатусуВсе");

	Заголовок = НСтр("ru = 'Импорт данных товаров с торговой площадки Ozon'") + ", " + СокрЛП(УчетнаяЗаписьМаркетплейса);
	УстановитьУсловноеОформление();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ВариантЗагрузкиДанныхПриИзменении(Неопределено);
	
	Если ИмпортируемыеТовары.ПолучитьЭлементы().Количество() > 0 Тогда
		ПодключитьОбработчикОжидания("ОбновитьСлужебныеДанные", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗакрытьФормуОбработки Тогда
		ТекстВопроса = НСтр("ru = 'Закрыть форму?'");
		ДополнительныеПараметры = Неопределено;

		Если ОбработкаПереданныхПозиций Тогда
			ИмяИдентификатора = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметрыИмпортаДанных,
				"ИмяИдентификатора", "ИдентификаторПубликации");

			ЗаписанныеПозиции = ЗаписанныеПозиции(ИмяИдентификатора);
			Если ЗаписанныеПозиции.Количество() > 0 Тогда
				ТекстВопроса = НСтр("ru = 'Перенести записанные данные и закрыть форму?'");

				ДополнительныеПараметры = Новый Соответствие;
				ДополнительныеПараметры.Вставить(ИмяИдентификатора, ЗаписанныеПозиции);
			КонецЕсли;
		КонецЕсли;

		Если Не ПустаяСтрока(ТекстВопроса) Тогда
			Отказ = Истина;

			ОповещениеОЗавершении = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(ОповещениеОЗавершении,
				ТекстВопроса,
				РежимДиалогаВопрос.ДаНет,
				,
				КодВозвратаДиалога.Нет,
				НСтр("ru = 'Импорт данных'"),
				КодВозвратаДиалога.Нет);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(АдресИзображения) Тогда
		УдалитьИзВременногоХранилища(АдресИзображения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "УчетнаяЗаписьДеактивирована" Тогда
		Если Параметр = УчетнаяЗаписьМаркетплейса Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Учетная запись маркетплейса удалена. Дальнейшее использование обработки недоступно.'"));
			ТолькоПросмотр = Истина;
			УстановитьВидимостьДоступность();
		КонецЕсли;

	ИначеЕсли ИмяСобытия = "Запись_УчетныеЗаписиМаркетплейсов" Тогда
		Если Параметр = УчетнаяЗаписьМаркетплейса Тогда
			УстановитьВидимостьДоступность();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ИсточникКатегорииИзменен" Тогда
		Если УчетнаяЗаписьМаркетплейса = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметр, "УчетнаяЗаписьМаркетплейса", ПредопределенноеЗначение("Справочник.УчетныеЗаписиМаркетплейсов.ПустаяСсылка")) Тогда
			ОбновитьКатегорииТоваров(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметр, "ИсточникКатегории", ПредопределенноеЗначение("Перечисление.ИсточникиКатегорийДляМаркетплейса.ПустаяСсылка")));
		КонецЕсли; 
		
	ИначеЕсли ИмяСобытия = "Запись_Номенклатура" Тогда
		Для Каждого СтрокаДереваПервогоУровня Из ИмпортируемыеТовары.ПолучитьЭлементы() Цикл
			Для Каждого СтрокаДереваВторогоУровня Из СтрокаДереваПервогоУровня.ПолучитьЭлементы() Цикл
				Если СтрокаДереваВторогоУровня.Номенклатура = Источник Тогда
					ИмпортируемыеТоварыНоменклатураПриИзменении(СтрокаДереваВторогоУровня);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	ИначеЕсли ИмяСобытия = "Запись_СтатусыПубликацииОбъектовМаркетплейсаOzon" Тогда
		Если Параметр.Свойство("ИсходныйКлючЗаписи")
				И Источник.УчетнаяЗаписьМаркетплейса = УчетнаяЗаписьМаркетплейса Тогда
			ОбновитьСтрокуДереваТоваров(Параметр.ИсходныйКлючЗаписи, Источник);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)

	НастройкиДополнительныеПараметры = Настройки.Получить("ДополнительныеПараметрыИмпортаДанных");
	
	Если НастройкиДополнительныеПараметры <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ДополнительныеПараметрыИмпортаДанных, НастройкиДополнительныеПараметры);
	КонецЕсли;

	Если Параметры.УстановитьВариантЗагрузки Тогда
		ВариантЗагрузкиДанных = Параметры.ВариантЗагрузкиДанных;

		Если Не ПустаяСтрока(Параметры.ИмяИдентификатора) Тогда
			ДополнительныеПараметрыИмпортаДанных.Вставить("ИмяИдентификатора", Параметры.ИмяИдентификатора);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВариантЗагрузкиДанныхПриИзменении(Элемент)

	Для Каждого СтрокаДереваПервогоУровня Из ИмпортируемыеТовары.ПолучитьЭлементы() Цикл
		Если СтрокаДереваПервогоУровня.ВариантЗагрузки = 0 И ВариантЗагрузкиДанных = 2
			 	Или СтрокаДереваПервогоУровня.ВариантЗагрузки = 2 И ВариантЗагрузкиДанных = 0 
			 	Или СтрокаДереваПервогоУровня.ВариантЗагрузки = 3 Тогда
			СтрокаДереваПервогоУровня.Пометка = Ложь;
			УстановитьСнятьПометки(СтрокаДереваПервогоУровня, СтрокаДереваПервогоУровня.Пометка);
			Элементы.ИмпортируемыеТовары.Свернуть(СтрокаДереваПервогоУровня.ПолучитьИдентификатор());
			
		ИначеЕсли СтрокаДереваПервогоУровня.ВариантЗагрузки = 0 И ВариантЗагрузкиДанных < 2
					Или СтрокаДереваПервогоУровня.ВариантЗагрузки = 2 И ВариантЗагрузкиДанных > 0 Тогда
			Элементы.ИмпортируемыеТовары.Развернуть(СтрокаДереваПервогоУровня.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЦикла;
	
	ОпределитьНаименованияГруппДереваТоваров();
	УстановитьВидимостьДоступность();

КонецПроцедуры

&НаКлиенте
Процедура ОтображатьСопоставленныеПриИзменении(Элемент)
	
	ОпределитьНаименованияГруппДереваТоваров();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьДанныеТовараПриИзменении(Элемент)

	УстановитьВидимостьДоступность();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИмпортируемыеТовары

&НаКлиенте
Процедура ИмпортируемыеТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "ИмпортируемыеТоварыНаименованиеКатегорииМаркетплейса" Тогда
		СтандартнаяОбработка = Ложь;
		СопоставитьКатегорииТовара(ТекущиеДанные);
	
	ИначеЕсли ТекущиеДанные.ВариантЗагрузки <> 2 
			  И ТекущиеДанные.ИндексСтатуса >= 0 
			  И Поле.Имя <> "ИмпортируемыеТоварыСтавкаНДС" Тогда
		СтандартнаяОбработка = Ложь;
		
		Если Поле.Имя <> "ИмпортируемыеТоварыНоменклатура" 
			 И Поле.Имя <> "ИмпортируемыеТоварыХарактеристика" 
			 И Поле.Имя <> "ИмпортируемыеТоварыУпаковка" 
			 И Поле.Имя <> "ИмпортируемыеТоварыКатегория" 
			 И Поле.Имя <> "ИмпортируемыеТоварыИсточникКатегорииМаркетплейса" Тогда
			Измерения = Новый Структура;
			Измерения.Вставить("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
			Измерения.Вставить("ВидОбъектаМаркетплейса",    ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.Товар"));
			Измерения.Вставить("Номенклатура",              ТекущиеДанные.Номенклатура);
			Измерения.Вставить("Характеристика",            ТекущиеДанные.Характеристика);
			Измерения.Вставить("Упаковка",                  ТекущиеДанные.Упаковка);
			Измерения.Вставить("ОбъектПубликации",          Неопределено);

			ПараметрыЗаписи = Новый Массив;
			ПараметрыЗаписи.Добавить(Измерения);

			КлючЗаписи = Новый(Тип("РегистрСведенийКлючЗаписи.СтатусыПубликацииОбъектовМаркетплейсаOzon"), ПараметрыЗаписи);

			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("Ключ", КлючЗаписи);

			ОткрытьФорму("РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.ФормаЗаписи", ПараметрыОткрытия);
			
		Иначе
			ПоказатьЗначение(, ТекущиеДанные[СтрЗаменить(Поле.Имя, "ИмпортируемыеТовары", "")]);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортируемыеТоварыПриАктивизацииСтроки(Элемент)

	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ИндексСтатуса < 0 Тогда
		Если ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Если ТекущиеДанные.Пометка Тогда
				СтатусЗагрузкиТовара = НСтр("ru = 'Ожидается обработка отмеченных строк товаров.'");
			Иначе
				СтатусЗагрузкиТовара = НСтр("ru = 'Ожидается выбор строк товаров для обработки.'");
			КонецЕсли;
		Иначе
			Если ТекущиеДанные.Пометка Тогда
				СтатусЗагрузкиТовара = НСтр("ru = 'Ожидается получение данных с торговой площадки.'");
			Иначе
				СтатусЗагрузкиТовара = НСтр("ru = 'Не выполнялось получение данных с торговой площадки.'");
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТекущиеДанные.ИндексСтатуса = 0 Тогда
		СтатусЗагрузкиТовара = НСтр("ru = 'Товар загружен с ошибками, требующими исправления.'");
	ИначеЕсли ТекущиеДанные.ИндексСтатуса = 1 Тогда
		СтатусЗагрузкиТовара = НСтр("ru = 'Товар загружен и находится на модерации.'");
	ИначеЕсли ТекущиеДанные.ИндексСтатуса = 2 Тогда
		СтатусЗагрузкиТовара = НСтр("ru = 'Товар загружен и находится в архиве. Возврат товара из архива выполняется в личном кабинете торговой площадки.'");
	ИначеЕсли ТекущиеДанные.ИндексСтатуса = 3 Тогда
		СтатусЗагрузкиТовара = НСтр("ru = 'Товар загружен и готов к продаже.'");
	ИначеЕсли ТекущиеДанные.ИндексСтатуса = 4 Тогда
		Если ДополнительныеПараметрыИмпортаДанных.ИмяИдентификатора = "ИдентификаторПубликации" Тогда
			СтатусЗагрузкиТовара = НСтр("ru = 'Товар не может быть обновлен, т.к. не найден на торговой площадке по идентификатору 1С.'");
		ИначеЕсли ДополнительныеПараметрыИмпортаДанных.ИмяИдентификатора = "ИдентификаторОбъектаМаркетплейса" Тогда
			СтатусЗагрузкиТовара = НСтр("ru = 'Товар не может быть обновлен, т.к. не найден на торговой площадке по идентификатору Ozon.'");
		Иначе
			СтатусЗагрузкиТовара = НСтр("ru = 'Товар не может быть обновлен, т.к. не найден на торговой площадке по идентификатору SKU.'");
		КонецЕсли;
	ИначеЕсли ТекущиеДанные.ИндексСтатуса = 5 Тогда
		СтатусЗагрузкиТовара = НСтр("ru = 'Товар ожидает получения данных с торговой площадки.'");
	ИначеЕсли ТекущиеДанные.ИндексСтатуса = 6 Тогда
		Если ТекущиеДанные.ВариантЗагрузки = 2 Тогда
			Если Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
				СтатусЗагрузкиТовара = НСтр("ru = 'Требуется выполнить сопоставление данным учетной системы 1С.'");
			Иначе
				СтатусЗагрузкиТовара = НСтр("ru = 'Доступна загрузка нового товара из торговой площадки.'");
			КонецЕсли;
		Иначе
			Если ТекущиеДанные.ЕстьРазличияСтавкаНДС Тогда
				СтатусЗагрузкиТовара = НСтр("ru = 'Доступна загрузка товара. Для товара обнаружены расхождения в данных 1С и торговой площадки. При загрузке будут заменены текущие данные товара.'")
					+ " " + НСтр("ru='Различаются значения ставки НДС - внесите исправления вручную.'");
			Иначе
				СтатусЗагрузкиТовара = НСтр("ru = 'Доступна загрузка товара. Для товара обнаружены расхождения в данных 1С и торговой площадки. При загрузке будут заменены текущие данные товара.'");
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТекущиеДанные.ИндексСтатуса = 7 Тогда
		Если ТекущиеДанные.ЕстьРазличияСтавкаНДС Тогда
			СтатусЗагрузкиТовара = НСтр("ru = 'Товар не требует загрузки.'")
				+ " " + НСтр("ru='Различаются значения ставки НДС - внесите исправления вручную.'");
		Иначе
			СтатусЗагрузкиТовара = НСтр("ru = 'Товар не требует загрузки, т.к. не обнаружены расхождения в данных.'");
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанные.ИндексСтатуса >= 6 
		 И ТекущиеДанные.ЕстьРазличияЦеновыеПоказатели Тогда
		СтатусЗагрузкиТовара = СтатусЗагрузкиТовара
			+ " " + НСтр("ru = 'Требуется загрузка цен продажи с торговой площадки.'");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.НаименованиеКатегорииМаркетплейса) Тогда
		СтатусЗагрузкиТовара = СтатусЗагрузкиТовара
			+ " " + НСтр("ru = 'Категория маркетплейса не определена. После записи данных необходимо в карточке товара перевыбрать номенклатуру для заполнения категории Ozon.'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) 
		 И Не ЗначениеЗаполнено(ТекущиеДанные.ЕдиницаИзмерения) Тогда
		СтатусЗагрузкиТовара = СтатусЗагрузкиТовара
			+ " " + НСтр("ru = 'Проверьте и заполните карточку номенклатуры.'");
	КонецЕсли;
	
	ТаблицаИмпортированныхТоваровИзображенияПриАктивизацииСтроки(Элементы.ТаблицаИмпортированныхТоваровИзображения);

КонецПроцедуры

&НаКлиенте
Процедура ИмпортируемыеТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортируемыеТоварыПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортируемыеТоварыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортируемыеТоварыПометкаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ИмпортируемыеТовары.ТекущиеДанные;

	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьСнятьПометки(ТекущиеДанные, ТекущиеДанные.Пометка);
	ОпределитьНаименованияГруппДереваТоваров(ТекущиеДанные.ПолучитьРодителя());

КонецПроцедуры

&НаКлиенте
Процедура ИмпортируемыеТоварыНоменклатураПриИзменении(Элемент)
	
	Если ТипЗнч(Элемент) = Тип("ДанныеФормыЭлементДерева") Тогда
		ТекущиеДанные = Элемент;
	Иначе
		ТекущиеДанные = Элементы.ИмпортируемыеТовары.ТекущиеДанные;
	КонецЕсли;

	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТекущиеДанные.ИндексСтатуса = -2 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ВариантЗагрузки = 2 Тогда
		ИсточникКатегории = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(УчетнаяЗаписьМаркетплейса, "ИсточникКатегории");
		ТекущаяКатегория  = ИнтеграцияСМаркетплейсомOzonВызовСервера.ОпределитьТекущуюСопоставленнуюКатегориюМаркетплейсаПоНоменклатуре(
			УчетнаяЗаписьМаркетплейса,
			ТекущиеДанные.Номенклатура,
			ТекущиеДанные.ИдентификаторКатегорииМаркетплейса,
			ИсточникКатегории);
			
		ТекущиеДанные.Категория                                 = ТекущаяКатегория.Категория;
		ТекущиеДанные.ИсточникКатегорииМаркетплейса             = ТекущаяКатегория.ИсточникКатегории;
		ТекущиеДанные.ТекущееИдентификаторКатегорииМаркетплейса = ТекущаяКатегория.ИдентификаторКатегории;
		ТекущиеДанные.ТекущееНаименованиеКатегорииМаркетплейса  = ТекущаяКатегория.НаименованиеКатегории;
	КонецЕсли;
		
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу",    ТекущиеДанные.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущиеДанные.Упаковка);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",                    ОпределитьПараметрыРасчетаСтавкиНДС(УчетнаяЗаписьМаркетплейса));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, Неопределено);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ОбщегоНазначенияУТВызовСервера.ЗначенияРеквизитовОбъекта(ТекущиеДанные.Номенклатура, "ИспользоватьУпаковки, ЕдиницаИзмерения"));
	
	Если ТекущиеДанные.ДеревоРеквизитов.ПолучитьЭлементы().Количество() > 0 Тогда
		Для Каждого ЭлементКоллекции Из ТекущиеДанные.ДеревоРеквизитов.ПолучитьЭлементы()[0].ПолучитьЭлементы() Цикл
			Если ЭлементКоллекции.ИдентификаторАтрибутаМаркетплейса = "СтавкаНДС" Тогда
				ЭлементКоллекции.ТекущееЗначениеАтрибутаМаркетплейса = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.СтавкаНДС, "Ставка");
				ЭлементКоллекции.ЕстьРазличия                        = (ЭлементКоллекции.ТекущееЗначениеАтрибутаМаркетплейса <> ЭлементКоллекции.ЗначениеАтрибутаМаркетплейса);
				ТекущиеДанные.Ставка                                 = ЭлементКоллекции.ТекущееЗначениеАтрибутаМаркетплейса;
				ТекущиеДанные.ЕстьРазличияСтавкаНДС                  = ЭлементКоллекции.ЕстьРазличия;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Маркируемая продукция (ТНВЭД, коды ЕАЭС)
	ИдентификаторАтрибута_ТНВЭД           = ИнтеграцияСМаркетплейсомOzonКлиентСервер.КонстантыСервиса()["ИдентификаторАтрибута_ТНВЭД"];
	ОтборМаркируемаяПродукция             = Новый Структура("ИдентификаторАтрибутаМаркетплейса", ИдентификаторАтрибута_ТНВЭД);
	ТекущиеДанные.ЭтоМаркируемаяПродукция = ЭтоМаркируемаяПродукция(ТекущиеДанные.Номенклатура);
	
	Если ТекущиеДанные.ЭтоМаркируемаяПродукция Тогда
		НайденныеСтроки = ТекущиеДанные.ЗначенияРеквизитовИзСервиса.НайтиСтроки(ОтборМаркируемаяПродукция);
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденныеСтроки[0].ОбязательныйАтрибут        = Истина;
			НайденныеСтроки[0].ТекущееОбязательныйАтрибут = Истина;
		КонецЕсли;
	
		Для Каждого ЭлементКоллекции Из ТекущиеДанные.ДеревоРеквизитов.ПолучитьЭлементы() Цикл
			Если ЭлементКоллекции.ИдентификаторАтрибутаМаркетплейса = ОтборМаркируемаяПродукция.ИдентификаторАтрибутаМаркетплейса Тогда
				ЭлементКоллекции.ОбязательныйАтрибут        = Истина;
				ЭлементКоллекции.ТекущееОбязательныйАтрибут = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортируемыеТоварыНоменклатураСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ИмпортируемыеТовары.ТекущиеДанные;

	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТипНоменклатуры",    ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
	ДополнительныеПараметры.Вставить("Наименование",       ТекущиеДанные.ПредставлениеОбъектаМаркетплейса);
	ДополнительныеПараметры.Вставить("НаименованиеПолное", ТекущиеДанные.ПредставлениеОбъектаМаркетплейса);
	ДополнительныеПараметры.Вставить("Описание",           ТекущиеДанные.ОписаниеОбъектаМаркетплейса);
	ДополнительныеПараметры.Вставить("Артикул",            ТекущиеДанные.ИдентификаторПубликации);
	
	ПараметрыРасчетаСтавкиНДС = ОпределитьПараметрыРасчетаСтавкиНДС(УчетнаяЗаписьМаркетплейса);
	ЗначениеСтавкиНДС         = УчетНДСУПВызовСервера.СтавкаНДСПоУмолчанию(ПараметрыРасчетаСтавкиНДС.Организация, ПараметрыРасчетаСтавкиНДС.Дата);
	
	Если ТекущиеДанные.ДанныеТовараИзСервиса.Количество() > 0 Тогда
		ДополнительныеПараметры.Вставить("Штрихкод", ТекущиеДанные.ДанныеТовараИзСервиса[0].Штрихкод);
		
		ЗначениеСтавкиНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС" + Формат(ТекущиеДанные.ДанныеТовараИзСервиса[0].СтавкаНДС, "ЧДЦ=0; ЧН=; ЧГ=0"));
		Если ЗначениеСтавкиНДС <> Неопределено Тогда
			ЗначениеСтавкиНДС = УчетНДСРФКлиентСерверПовтИсп.СтавкаНДСПоЗначениюПеречисления(ЗначениеСтавкиНДС, ПараметрыРасчетаСтавкиНДС.НалогообложениеНДС);
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("СтавкаНДС", ЗначениеСтавкиНДС);
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Категория) Тогда
		ИсточникКатегории = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(УчетнаяЗаписьМаркетплейса, "ИсточникКатегории");
		Если ИсточникКатегории = ПредопределенноеЗначение("Перечисление.ИсточникиКатегорийДляМаркетплейса.ВидНоменклатуры") Тогда
			ДополнительныеПараметры.Вставить("ВидНоменклатуры", ТекущиеДанные.Категория);
			ДополнительныеПараметры.Вставить("ТипНоменклатуры", ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Категория, "ТипНоменклатуры"));
		ИначеЕсли ИсточникКатегории = ПредопределенноеЗначение("Перечисление.ИсточникиКатегорийДляМаркетплейса.ТоварнаяКатегория") Тогда
			ДополнительныеПараметры.Вставить("ТоварнаяКатегория", ТекущиеДанные.Категория);
		ИначеЕсли ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Категория, "ЭтоГруппа") Тогда
			ДополнительныеПараметры.Вставить("Родитель", ТекущиеДанные.Категория);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыСоздания = Новый Структура;
	ПараметрыСоздания.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	ПараметрыСоздания.Вставить("РежимВыбора",             Истина);

	ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", ПараметрыСоздания, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортируемыеТоварыКатегорияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ИмпортируемыеТовары.ТекущиеДанные;

	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ИсточникКатегорииМаркетплейса = ТекущиеДанные.Категория;
	
	Пока Истина Цикл
		ВладелецКатегорииМаркетплейса = ИнтеграцияСМаркетплейсомOzonВызовСервера.ПолучитьТекущийИсточникКатегорииМаркетплейса(
			УчетнаяЗаписьМаркетплейса, 
			ТекущиеДанные.ИсточникКатегорииМаркетплейса,
			Ложь);
		
		Если ЗначениеЗаполнено(ВладелецКатегорииМаркетплейса.ИсточникКатегорииМаркетплейса) Тогда
			Если ТекущиеДанные.ИдентификаторКатегорииМаркетплейса = ВладелецКатегорииМаркетплейса.ИдентификаторИсточникаКатегорииМаркетплейса Тогда
				ТекущиеДанные.ИсточникКатегорииМаркетплейса = ВладелецКатегорииМаркетплейса.ИсточникКатегорииМаркетплейса;
				Прервать;
			КонецЕсли;
			
			ТекущиеДанные.ИсточникКатегорииМаркетплейса = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(ВладелецКатегорииМаркетплейса.ИсточникКатегорииМаркетплейса, "Родитель");
			
		Иначе 
			ТекущиеДанные.ИсточникКатегорииМаркетплейса = ТекущиеДанные.Категория;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Для Каждого СтрокаДереваПервогоУровня Из ИмпортируемыеТовары.ПолучитьЭлементы() Цикл
		Если СтрокаДереваПервогоУровня.ВариантЗагрузки <> 2 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаДереваВторогоУровня Из СтрокаДереваПервогоУровня.ПолучитьЭлементы() Цикл
			Если СтрокаДереваВторогоУровня.ИдентификаторКатегорииМаркетплейса = ТекущиеДанные.ИдентификаторКатегорииМаркетплейса 
				 И Не ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Категория)
				 И СтрокаДереваВторогоУровня.ИндексСтатуса <> 7 Тогда
				СтрокаДереваВторогоУровня.Категория                     = ТекущиеДанные.Категория;
				СтрокаДереваВторогоУровня.ИсточникКатегорииМаркетплейса = ТекущиеДанные.ИсточникКатегорииМаркетплейса;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортируемыеТоварыКатегорияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ИсточникКатегории = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(УчетнаяЗаписьМаркетплейса, "ИсточникКатегории");
	Если ИсточникКатегории = ПредопределенноеЗначение("Перечисление.ИсточникиКатегорийДляМаркетплейса.ТоварнаяКатегория") Тогда
		СтандартнаяОбработка = Ложь;
		
		ТекущиеДанные = Элементы.ИмпортируемыеТовары.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Владелец",                  ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ВидНоменклатуры"));
		ПараметрыОтбора.Вставить("ВладелецТоварныхКатегорий", ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ВладелецТоварныхКатегорий"));
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Отбор",                         ПараметрыОтбора);
		ПараметрыОткрытия.Вставить("ТекущаяСтрока",                 ТекущиеДанные.Категория);
		ПараметрыОткрытия.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);

		ОткрытьФорму("Справочник.ТоварныеКатегории.ФормаВыбора",
			ПараметрыОткрытия,
			Элемент,
			,
			,
			,
			,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаИмпортированныхТоваровИзображения

&НаКлиенте
Процедура ТаблицаИмпортированныхТоваровИзображенияПриАктивизацииСтроки(Элемент)

	ТекущиеДанные            = Элемент.ТекущиеДанные;
	ИдентификаторИзображения = -1;
	
	Если ОтображатьДанныеТовара Тогда
		Если ТекущиеДанные <> Неопределено Тогда
			ИдентификаторИзображения = ТекущиеДанные.ПолучитьИдентификатор();
		КонецЕсли;
		ПодключитьОбработчикОжидания("Подключаемый_ЗагрузитьИзображение", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьФлажки(Команда)

	Для Каждого СтрокаДереваПервогоУровня Из ИмпортируемыеТовары.ПолучитьЭлементы() Цикл
		УстановитьСнятьПометки(СтрокаДереваПервогоУровня, Истина);
	КонецЦикла;
	
	ОпределитьНаименованияГруппДереваТоваров();
	Модифицированность = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиДляТребующихПолученияДанных(Команда)

	Для Каждого СтрокаДереваПервогоУровня Из ИмпортируемыеТовары.ПолучитьЭлементы() Цикл
		УстановитьСнятьПометки(СтрокаДереваПервогоУровня, Истина, "ТребующиеПолученияДанных");
	КонецЦикла;
	
	ОпределитьНаименованияГруппДереваТоваров();
	Модифицированность = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиДляТребующихЗаписиТоваров(Команда)

	Для Каждого СтрокаДереваПервогоУровня Из ИмпортируемыеТовары.ПолучитьЭлементы() Цикл
		УстановитьСнятьПометки(СтрокаДереваПервогоУровня, Истина, ?(ЗагрузитьЦеныПродажи, "ТребующиеЗаписиТоваровИЦен", "ТребующиеЗаписиТоваров"));
	КонецЦикла;
	
	ОпределитьНаименованияГруппДереваТоваров();
	Модифицированность = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиДляТребующихЗаписиЦен(Команда)

	Для Каждого СтрокаДереваПервогоУровня Из ИмпортируемыеТовары.ПолучитьЭлементы() Цикл
		УстановитьСнятьПометки(СтрокаДереваПервогоУровня, Истина, "ТребующиеЗаписиЦен");
	КонецЦикла;
	
	ОпределитьНаименованияГруппДереваТоваров();
	Модифицированность = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиДляНеСопоставленнойНоменклатуры(Команда)

	Для Каждого СтрокаДереваПервогоУровня Из ИмпортируемыеТовары.ПолучитьЭлементы() Цикл
		УстановитьСнятьПометки(СтрокаДереваПервогоУровня, Истина, "НеСопоставленнаяНоменклатура");
	КонецЦикла;
	
	ОпределитьНаименованияГруппДереваТоваров();
	Модифицированность = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)

	Для Каждого СтрокаДереваПервогоУровня Из ИмпортируемыеТовары.ПолучитьЭлементы() Цикл
		УстановитьСнятьПометки(СтрокаДереваПервогоУровня, Ложь);
	КонецЦикла;
	
	ОпределитьНаименованияГруппДереваТоваров();
	Модифицированность = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ОтобратьПоСтатусуВсе(Команда)
    
    ОтображатьПоСтатусу = -1;
    ОбновитьКнопкуОтбораПоСтатусу(Команда.Имя);
    ОпределитьНаименованияГруппДереваТоваров();
    
КонецПроцедуры

&НаКлиенте
Процедура ОтобратьПоСтатусуОжидаютИсправленияОшибок(Команда)
    
    ОтображатьПоСтатусу = 0;
    ОбновитьКнопкуОтбораПоСтатусу(Команда.Имя);
    ОпределитьНаименованияГруппДереваТоваров();
    
КонецПроцедуры

&НаКлиенте
Процедура ОтобратьПоСтатусуПодготовленыКПубликации(Команда)
    
    ОтображатьПоСтатусу = 1;
    ОбновитьКнопкуОтбораПоСтатусу(Команда.Имя);
    ОпределитьНаименованияГруппДереваТоваров();
    
КонецПроцедуры

&НаКлиенте
Процедура ОтобратьПоСтатусуПеремещеныВАрхив(Команда)
    
    ОтображатьПоСтатусу = 2;
    ОбновитьКнопкуОтбораПоСтатусу(Команда.Имя);
    ОпределитьНаименованияГруппДереваТоваров();
    
КонецПроцедуры

&НаКлиенте
Процедура ОтобратьПоСтатусуГотовыКПродаже(Команда)
    
    ОтображатьПоСтатусу = 3;
    ОбновитьКнопкуОтбораПоСтатусу(Команда.Имя);
    ОпределитьНаименованияГруппДереваТоваров();
    
КонецПроцедуры

&НаКлиенте
Процедура ОтобратьПоСтатусуОжидаютПолученияДанных(Команда)
    
    ОтображатьПоСтатусу = 5;
    ОбновитьКнопкуОтбораПоСтатусу(Команда.Имя);
    ОпределитьНаименованияГруппДереваТоваров();
    
КонецПроцедуры

&НаКлиенте
Процедура ОтобратьПоСтатусуНеНайденыНаПлощадке(Команда)
    
    ОтображатьПоСтатусу = 4;
    ОбновитьКнопкуОтбораПоСтатусу(Команда.Имя);
    ОпределитьНаименованияГруппДереваТоваров();
    
КонецПроцедуры

&НаКлиенте
Процедура ОтобратьПоСтатусуОбнаруженыРасхождения(Команда)
    
    ОтображатьПоСтатусу = 6;
    ОбновитьКнопкуОтбораПоСтатусу(Команда.Имя);
    ОпределитьНаименованияГруппДереваТоваров();
    
КонецПроцедуры

&НаКлиенте
Процедура ОтобратьПоСтатусуОбновлениеНеТребуется(Команда)
    
    ОтображатьПоСтатусу = 7;
    ОбновитьКнопкуОтбораПоСтатусу(Команда.Имя);
    ОпределитьНаименованияГруппДереваТоваров();
    
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеПараметрыИмпортаДанных(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("УчетнаяЗаписьМаркетплейса",     УчетнаяЗаписьМаркетплейса);
	ПараметрыОткрытия.Вставить("ВариантЗагрузкиДанных",         ВариантЗагрузкиДанных);
	ПараметрыОткрытия.Вставить("ЗагрузитьЦеныПродажи",          ЗагрузитьЦеныПродажи);
	ПараметрыОткрытия.Вставить("ЗаписатьЦеныОтдельнойКомандой", ЗаписатьЦеныОтдельнойКомандой);
	ПараметрыОткрытия.Вставить("ЗагрузитьИзображения",          ЗагрузитьИзображения);
	
	Для Каждого КлючЗначение Из ДополнительныеПараметрыИмпортаДанных Цикл
		ПараметрыОткрытия.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ДополнительныеПараметрыИмпортаДанныхЗавершение", ЭтотОбъект,);
	ОткрытьФорму("Обработка.УправлениеПродажамиНаOzon.Форма.ИмпортДанныхНастройка", 
		ПараметрыОткрытия,
		ЭтотОбъект,
		,
		,
		,
		ОповещениеОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеСТорговойПлощадки(Команда)
	
	ПолучитьДанныеСТорговойПлощадкиНаКлиенте(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСледующуюПорциюДанныхСТорговойПлощадки(Команда)
	
	ПолучитьДанныеСТорговойПлощадкиНаКлиенте(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЗагруженныеДанные(Команда)
	
	Модифицированность = Ложь;
	
	Если ОтображатьСопоставленные = 1 Тогда
		ТекстСообщения = НСтр("ru = 'Выполнить запись данных?'");
	ИначеЕсли ОтображатьСопоставленные = 2 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Запись несопоставленных товарных позиций невозможна.'"),, НСтр("ru = 'Запись данных'"));
		Возврат;
	ИначеЕсли СоздатьЭлементыНоменклатуры Тогда
		ТекстСообщения = НСтр("ru = 'Несопоставленные элементы справочника ""Номенклатура"" будут созданы автоматически. Продолжить запись данных?'");
	Иначе
		ТекстСообщения = НСтр("ru = 'Несопоставленные товарные позиции будут пропущены из обработки. Продолжить запись данных?'");
	КонецЕсли;

	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗаписатьЗагруженныеДанныеЗавершение", ЭтотОбъект,);
	ПоказатьВопрос(ОповещениеОЗавершении, 
		ТекстСообщения, 
		РежимДиалогаВопрос.ДаНет, 
		, 
		КодВозвратаДиалога.Нет, 
		НСтр("ru = 'Запись данных'"), 
		КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЦены(Команда)
	
	Модифицированность = Ложь;
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗаписатьЦеныЗавершение", ЭтотОбъект,);
	
	ПоказатьВопрос(ОповещениеОЗавершении, 
		НСтр("ru = 'Записать цены товаров согласно данных торговой площадки?'"), 
		РежимДиалогаВопрос.ДаНет, 
		, 
		КодВозвратаДиалога.Нет, 
		НСтр("ru = 'Запись данных'"), 
		КодВозвратаДиалога.Нет);
		
КонецПроцедуры
	
&НаКлиенте
Процедура СоздатьНоменклатуру(Команда)
	
	Модифицированность = Ложь;
	ОповещениеОЗавершении = Новый ОписаниеОповещения("СоздатьНоменклатуруЗавершение", ЭтотОбъект,);
	
	ПоказатьВопрос(ОповещениеОЗавершении, 
		НСтр("ru = 'Создать несопоставленные элементы справочника ""Номенклатура""?'"), 
		РежимДиалогаВопрос.ДаНет, 
		, 
		КодВозвратаДиалога.Нет, 
		НСтр("ru = 'Запись данных'"), 
		КодВозвратаДиалога.Нет);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ВыполнитьНачальноеЗаполнениеИмпортируемыхТоваров()

	ДанныеВыделенныхСтрок = Параметры.ДанныеВыделенныхСтрок;
	
	Если (ТипЗнч(ДанныеВыделенныхСтрок) = Тип("Массив")
				Или ТипЗнч(ДанныеВыделенныхСтрок) = Тип("Структура"))
			И ДанныеВыделенныхСтрок.Количество() > 0 Тогда

		СтрокаДереваГруппаОбновить  = Неопределено;
		СтрокаДереваГруппаЗагрузить = Неопределено;

		Для Каждого ДанныеВыделеннойСтроки Из ДанныеВыделенныхСтрок Цикл
			ДанныеОбъекта   = Неопределено;
			ДобавленаСтрока = Ложь;

			Запись = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, ДанныеВыделеннойСтроки);
			Запись.УчетнаяЗаписьМаркетплейса = УчетнаяЗаписьМаркетплейса;
			Запись.Прочитать();

			Если Запись.Выбран() Тогда
				Если СтрокаДереваГруппаОбновить = Неопределено Тогда
					Если СтрокаДереваГруппаЗагрузить = Неопределено Тогда
						СтрокаДереваГруппаОбновить = ИмпортируемыеТовары.ПолучитьЭлементы().Добавить();
					Иначе
						СтрокаДереваГруппаОбновить = ИмпортируемыеТовары.ПолучитьЭлементы().Вставить(0);
					КонецЕсли;
					
					СтрокаДереваГруппаОбновить.ВариантЗагрузки = 0;
					СтрокаДереваГруппаОбновить.ИндексСтатуса   = -2;
				КонецЕсли;

				СтрокаДереваВторогоУровня = СтрокаДереваГруппаОбновить.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДереваВторогоУровня, Запись,, "ДанныеОбъекта, ИсточникиСхожихПредложений");

				СтрокаДереваВторогоУровня.ВариантЗагрузки = 0;
				СтрокаДереваВторогоУровня.ИндексСтатуса   = 5;

				ДанныеОбъекта   = Запись.ДанныеОбъекта.Получить();
				ДобавленаСтрока = Истина;
				
			ИначеЕсли ТипЗнч(ДанныеВыделеннойСтроки) = Тип("Структура") Тогда
				Если СтрокаДереваГруппаЗагрузить = Неопределено Тогда
					СтрокаДереваГруппаЗагрузить = ИмпортируемыеТовары.ПолучитьЭлементы().Добавить();
					СтрокаДереваГруппаЗагрузить.ВариантЗагрузки = 2;
					СтрокаДереваГруппаЗагрузить.ИндексСтатуса   = -2;
				КонецЕсли;

				СтрокаДереваВторогоУровня = СтрокаДереваГруппаЗагрузить.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДереваВторогоУровня, ДанныеВыделеннойСтроки);

				СтрокаДереваВторогоУровня.ВариантЗагрузки = 2;
				СтрокаДереваВторогоУровня.ИндексСтатуса   = 5;

				ДанныеВыделеннойСтроки.Свойство("ДанныеОбъекта", ДанныеОбъекта);
				ДобавленаСтрока = Истина;
			КонецЕсли;

			Если ДобавленаСтрока Тогда
				СтрокаДереваВторогоУровня.Пометка                   = Истина;
				СтрокаДереваВторогоУровня.ПродаетсяПоСхемеРаботыFBO = Истина;

				Если ДанныеОбъекта <> Неопределено Тогда
					СтрокаДереваВторогоУровня.ДанныеОбъекта.Загрузить(ДанныеОбъекта.Скопировать());
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ИзменитьРеквизитыФормы()

	ДобавляемыеРеквизиты = Новый Массив;
	УдаляемыеРеквизиты   = Новый Массив;
	
	ДобавитьРеквизитыФормы(ДобавляемыеРеквизиты, "ИмпортируемыеТовары", Метаданные.РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.Измерения);
	ДобавитьРеквизитыФормы(ДобавляемыеРеквизиты, "ИмпортируемыеТовары", Метаданные.РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.Ресурсы);
	ДобавитьРеквизитыФормы(ДобавляемыеРеквизиты, "ИмпортируемыеТовары", Метаданные.РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.Реквизиты);
	
	ДобавитьРеквизитыФормы(ДобавляемыеРеквизиты, "ИдентификаторыТоваров", ИнтеграцияСМаркетплейсомOzonСервер.НоваяТаблицаИдентификаторовТоваров().Колонки);
	
	ДобавитьРеквизитыФормы(ДобавляемыеРеквизиты, "ИмпортируемыеТовары.ДанныеОбъекта", ИнтеграцияСМаркетплейсомOzonСервер.НоваяТаблицаЗначенийРеквизитов().Колонки);
	ДобавитьРеквизитыФормы(ДобавляемыеРеквизиты, "ИмпортируемыеТовары.Изображения", ИнтеграцияСМаркетплейсомOzonСервер.НоваяТаблицаИзображений().Колонки);
	ДобавитьРеквизитыФормы(ДобавляемыеРеквизиты, "ИмпортируемыеТовары.ИсточникиСхожихПредложений", ИнтеграцияСМаркетплейсомOzonСервер.НоваяТаблицаИсточникиСхожихПредложений().Колонки);
	
    ДобавитьРеквизитыФормы(ДобавляемыеРеквизиты, "ИмпортируемыеТовары.ДанныеТовараИзСервиса", ИнтеграцияСМаркетплейсомOzonСервер.НоваяТаблицаОписанияТоваров().Колонки);
	ДобавитьРеквизитыФормы(ДобавляемыеРеквизиты, "ИмпортируемыеТовары.ДанныеТовараИзСервиса.ИнформацияОКомиссиях", ИнтеграцияСМаркетплейсомOzonСервер.НоваяТаблицаИнформацияОКомиссиях().Колонки);
    ДобавитьРеквизитыФормы(ДобавляемыеРеквизиты, "ИмпортируемыеТовары.ДанныеТовараИзСервиса.ИсточникиСхожихПредложений", ИнтеграцияСМаркетплейсомOzonСервер.НоваяТаблицаИсточникиСхожихПредложений().Колонки);
	ДобавитьРеквизитыФормы(ДобавляемыеРеквизиты, "ИмпортируемыеТовары.ДанныеТовараИзСервиса.Изображения", ИнтеграцияСМаркетплейсомOzonСервер.НоваяТаблицаИзображений().Колонки);
	
	ДобавитьРеквизитыФормы(ДобавляемыеРеквизиты, "ИмпортируемыеТовары.ЗначенияРеквизитовИзСервиса", ИнтеграцияСМаркетплейсомOzonСервер.НоваяТаблицаЗначенийРеквизитов(Истина).Колонки);
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРеквизитыФормы(ДобавляемыеРеквизиты, Знач Путь, Знач ИсточникДанных)
	
	Реквизиты = ПолучитьИменаРеквизитовФормы(Путь);
	
	Для Каждого ЭлементКоллекции Из ИсточникДанных Цикл
		Если Реквизиты.Найти(ЭлементКоллекции.Имя) = Неопределено Тогда 
			Если ТипЗнч(ЭлементКоллекции) = Тип("КолонкаТаблицыЗначений") Тогда
				Тип = ЭлементКоллекции.ТипЗначения;
			ИначеЕсли ЭлементКоллекции.Тип.СодержитТип(Тип("ХранилищеЗначения")) Тогда
				Тип = Новый ОписаниеТипов("ТаблицаЗначений");
			Иначе
				Тип = ЭлементКоллекции.Тип;
			КонецЕсли;
			
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ЭлементКоллекции.Имя, Тип, Путь));
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры
	
&НаСервере
Функция ПолучитьИменаРеквизитовФормы(Знач Путь)
	
	Реквизиты = Новый Массив;
	
	Попытка
		Для Каждого ЭлементКоллекции Из ПолучитьРеквизиты(Путь) Цикл
			Реквизиты.Добавить(ЭлементКоллекции.Имя);
		КонецЦикла;
	Исключение
		Реквизиты = Новый Массив;
	КонецПопытки;
	
	Возврат Реквизиты;
	
КонецФункции

// Определяет подчиненные элементы.
//
// Параметры:
//   Элемент - ЭлементыФормы - родительский элемент.
//
// Возвращаемое значение:
//   Массив Из ЭлементыФормы - подчиненные элементы.
//
&НаСервере
Функция ПолучитьПодчиненныеЭлементыФормы(Знач Элемент)
	
	Результат = Новый Массив;
	
	Для Каждого ЭлементКоллекции Из Элемент.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ЭлементКоллекции) = Тип("ГруппаФормы") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, ПолучитьПодчиненныеЭлементыФормы(ЭлементКоллекции));
		Иначе
			Результат.Добавить(ЭлементКоллекции);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ЗаписанныеПозиции(ИмяИдентификатора)

	ДанныеТоваров = Новый Соответствие;

	Для Каждого СтрокаДереваПервогоУровня Из ИмпортируемыеТовары.ПолучитьЭлементы() Цикл
		Для Каждого СтрокаДереваВторогоУровня Из СтрокаДереваПервогоУровня.ПолучитьЭлементы() Цикл
			Если СтрокаДереваВторогоУровня.ИндексСтатуса > 3 Тогда
				Продолжить;
			КонецЕсли;

			ДанныеТовара = Новый Структура("Номенклатура, Характеристика, Упаковка");
			ЗаполнитьЗначенияСвойств(ДанныеТовара, СтрокаДереваВторогоУровня);

			ИмяПоля = ?(ИмяИдентификатора = "ИдентификаторSKU", "ИдентификаторFBOSKU", ИмяИдентификатора);
			ДанныеТоваров.Вставить(СтрокаДереваВторогоУровня[ИмяПоля], ДанныеТовара);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДанныеТоваров;

КонецФункции

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры = Неопределено) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗакрытьФормуОбработки = Истина;
		ПараметрЗакрытия = Неопределено;

		Если ОбработкаПереданныхПозиций И ДополнительныеПараметры <> Неопределено Тогда
			ПараметрЗакрытия = ДополнительныеПараметры;
		КонецЕсли;

		Закрыть(ПараметрЗакрытия);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Отображение сопоставленных 
	ЭлементыДерева = ПолучитьПодчиненныеЭлементыФормы(Элементы.ИмпортируемыеТовары);
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	Для Каждого ЭлементКоллекции Из ЭлементыДерева Цикл
		ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементКоллекции.Имя);
	КонецЦикла;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ОтображатьСопоставленные");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ИндексСтатуса");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = -2;

	ГруппаОтбора1           = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

		ОтборЭлемента               = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.Номенклатура");
		ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;

		ГруппаОтбора2           = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
			ОтборЭлемента                = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ХарактеристикиИспользуются");
			ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = Истина;

			ОтборЭлемента               = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.Характеристика");
			ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;

		ОтборЭлемента               = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.Категория");
		ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	Для Каждого ЭлементКоллекции Из ЭлементыДерева Цикл
		ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементКоллекции.Имя);
	КонецЦикла;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ОтображатьСопоставленные");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 2;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ИндексСтатуса");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = -2;

	ГруппаОтбора1           = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

		ОтборЭлемента               = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.Номенклатура");
		ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.Заполнено;

		ГруппаОтбора2           = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		
			ОтборЭлемента                = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ХарактеристикиИспользуются");
			ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = Ложь;

			ОтборЭлемента               = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.Характеристика");
			ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.Заполнено;

		ОтборЭлемента               = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.Категория");
		ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.Заполнено;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Отображение по статусу
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	Для Каждого ЭлементКоллекции Из ЭлементыДерева Цикл
		ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементКоллекции.Имя);
	КонецЦикла;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ОтображатьПоСтатусу");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = -1;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ИндексСтатуса");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = -2;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ИндексСтатуса");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ОтображатьПоСтатусу");

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Группы первого уровня
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИмпортируемыеТоварыПредставлениеОбъектаМаркетплейса.Имя);

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ИндексСтатуса");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = -2;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ВажнаяНадписьШрифт);

	// Пометка
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИмпортируемыеТоварыПометка.Имя);
	
	ГруппаОтбора1           = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
		ГруппаОтбора2           = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
			ОтборЭлемента                = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ВариантЗагрузки");
			ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = 0;

			ОтборЭлемента                = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ВариантЗагрузкиДанных");
			ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = 2;

		ГруппаОтбора3           = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора3.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
			ОтборЭлемента                = ГруппаОтбора3.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ВариантЗагрузки");
			ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = 2;

			ОтборЭлемента                = ГруппаОтбора3.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ВариантЗагрузкиДанных");
			ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = 0;

		ОтборЭлемента                = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ВариантЗагрузки");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = 3;

		ОтборЭлемента                = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ИндексСтатуса");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = 4;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	// Представление объекта маркетплейса
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИмпортируемыеТоварыПредставлениеОбъектаМаркетплейса.Имя);
	
	ОтборЭлемента               = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.Номенклатура");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ИндексСтатуса");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = -2;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.НаклонныйШрифтРаботаСНоменклатурой);
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИмпортируемыеТоварыПредставлениеОбъектаМаркетплейса.Имя);

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ИндексСтатуса");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 4;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);

	// Категория Ozon
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИмпортируемыеТоварыНаименованиеКатегорииМаркетплейса.Имя);
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИмпортируемыеТоварыИдентификаторКатегорииМаркетплейса.Имя);
	
	ОтборЭлемента               = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.Категория");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ИндексСтатуса");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = -2;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.НаименованиеКатегорииМаркетплейса");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ПодчеркнутыйШрифтДиалоговМаркетплейсов);
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИмпортируемыеТоварыНаименованиеКатегорииМаркетплейса.Имя);
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИмпортируемыеТоварыИдентификаторКатегорииМаркетплейса.Имя);

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ИндексСтатуса");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = -2;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.НаименованиеКатегорииМаркетплейса");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст",      НСтр("ru = '<не определена>'"));

	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИмпортируемыеТоварыНаименованиеКатегорииМаркетплейса.Имя);
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИмпортируемыеТоварыИдентификаторКатегорииМаркетплейса.Имя);

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ИндексСтатуса");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = -2;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ИдентификаторКатегорииМаркетплейса");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ИдентификаторКатегорииМаркетплейса");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеСодержит;
	ОтборЭлемента.ПравоеЗначение = "_";

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);

	// Номенклатура, характеристика, упаковка
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИмпортируемыеТоварыНоменклатура.Имя);
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИмпортируемыеТоварыХарактеристика.Имя);
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИмпортируемыеТоварыУпаковка.Имя);
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИмпортируемыеТоварыКатегория.Имя);
	
	ГруппаОтбора1           = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
		ОтборЭлемента                = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ВариантЗагрузки");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
		ОтборЭлемента.ПравоеЗначение = 2;

		ОтборЭлемента                = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ИндексСтатуса");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = -2;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",        Истина);
	
	// Номенклатура 
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИмпортируемыеТоварыНоменклатура.Имя);
	
	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СоздатьЭлементыНоменклатуры");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ОтображатьСопоставленные");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 2;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.Номенклатура");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ВариантЗагрузки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 2;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ИндексСтатуса");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = -2;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст",      НСтр("ru = '<выберите номенклатуру или она будет создана автоматически>'"));
	
	// 
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИмпортируемыеТоварыНоменклатура.Имя);
	
	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СоздатьЭлементыНоменклатуры");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ОтображатьСопоставленные");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 2;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.Номенклатура");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ВариантЗагрузки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 2;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ИндексСтатуса");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = -2;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст",      НСтр("ru = '<выберите номенклатуру или она будет создана автоматически>'"));
	
	// 
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИмпортируемыеТоварыНоменклатура.Имя);
	
	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СоздатьЭлементыНоменклатуры");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ОтображатьСопоставленные");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 2;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.Номенклатура");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ВариантЗагрузки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 2;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ИндексСтатуса");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = -2;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст",      НСтр("ru = '<выберите номенклатуру>'"));
	
	// 
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИмпортируемыеТоварыНоменклатура.Имя);
	
	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СоздатьЭлементыНоменклатуры");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ОтображатьСопоставленные");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 2;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.Номенклатура");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ВариантЗагрузки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 2;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ИндексСтатуса");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = -2;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст",      НСтр("ru = '<выберите номенклатуру>'"));
	
	// 
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИмпортируемыеТоварыНоменклатура.Имя);
	
	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.Номенклатура");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ЕдиницаИзмерения");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ИндексСтатуса");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = -2;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// Характеристика
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИмпортируемыеТоварыХарактеристика.Имя);
	
	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ИндексСтатуса");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = -2;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста",            ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст",                 НСтр("ru = '<характеристики не используются>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",        Истина);
	
	// 
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИмпортируемыеТоварыХарактеристика.Имя);
	
	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ОтображатьСопоставленные");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 2;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.Характеристика");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ВариантЗагрузки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 2;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ИндексСтатуса");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = -2;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст",      НСтр("ru = '<выберите характеристику>'"));
	
	// 
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИмпортируемыеТоварыХарактеристика.Имя);
	
	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ОтображатьСопоставленные");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 2;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.Характеристика");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ВариантЗагрузки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 2;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ИндексСтатуса");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = -2;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст",      НСтр("ru = '<выберите характеристику>'"));
	
	// Упаковка
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИмпортируемыеТоварыУпаковка.Имя);
	
	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ИспользоватьУпаковки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ИндексСтатуса");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = -2;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста",     ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст",          Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ЕдиницаИзмерения"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИмпортируемыеТоварыУпаковка.Имя);
	
	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ИспользоватьУпаковки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.Упаковка");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
			
	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ИндексСтатуса");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = -2;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст",      Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ЕдиницаИзмерения"));
	
	// Категория 1С
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИмпортируемыеТоварыКатегория.Имя);
	
	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.Номенклатура");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.Категория");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ВариантЗагрузки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 2;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ИндексСтатуса");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = -2;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста",     ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// 
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИмпортируемыеТоварыКатегория.Имя);
	
	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ОтображатьСопоставленные");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 2;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.Номенклатура");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.Категория");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ВариантЗагрузки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 2;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ИндексСтатуса");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = -2;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст",      НСтр("ru = '<выберите категорию>'"));
	
	// 
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИмпортируемыеТоварыКатегория.Имя);
	
	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ОтображатьСопоставленные");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 2;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.Номенклатура");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.Категория");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ВариантЗагрузки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 2;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ИндексСтатуса");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = -2;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст",      НСтр("ru = '<выберите категорию>'"));
	
	// Ставка НДС 
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИмпортируемыеТоварыСтавкаНДС.Имя);
	
	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ЕстьРазличияСтавкаНДС");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ИндексСтатуса");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = -2;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ИндексСтатуса");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 4;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст); 
	
	// Продается по схемам
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИмпортируемыеТоварыПродаетсяПоСхемеРаботыFBS.Имя);
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИмпортируемыеТоварыПродаетсяПоСхемеРаботыDBS.Имя);

	ГруппаОтбора1           = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
		ГруппаОтбора2           = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
			ОтборЭлемента                = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ВариантЗагрузки");
			ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = 0;

			ОтборЭлемента                = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ВариантЗагрузкиДанных");
			ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = 2;

		ГруппаОтбора3           = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора3.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
			ОтборЭлемента                = ГруппаОтбора3.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ВариантЗагрузки");
			ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = 2;

			ОтборЭлемента                = ГруппаОтбора3.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ВариантЗагрузкиДанных");
			ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = 0;

		ОтборЭлемента                = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ВариантЗагрузки");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = 0;

		ОтборЭлемента                = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ВариантЗагрузки");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = 3;

		ОтборЭлемента                = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ИндексСтатуса");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = 4;

		ОтборЭлемента                = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ИндексСтатуса");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = -2;
		
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	// Данные товара
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПредставлениеОбъектаМаркетплейса.Имя);

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ИндексСтатуса");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = -2;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Отображения данных о товаре для группы действий недоступно.'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.НаклонныйШрифтРаботаСНоменклатурой);
	
	// Дерево реквизитов (наименование атрибута)
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовНаименованиеАтрибутаМаркетплейса.Имя);

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Элементы.ИмпортируемыеТовары.ТекущиеДанные.ДеревоРеквизитов.ОбязательныйАтрибут");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ВажнаяНадписьШрифт);

	// Дерево реквизитов (значение атрибута Ozon)
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ЭлементыДерева = ПолучитьПодчиненныеЭлементыФормы(Элементы.ДеревоРеквизитовГруппаЗначенияАтрибута);
	Для Каждого ЭлементКоллекции Из ЭлементыДерева Цикл
		ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементКоллекции.Имя);
	КонецЦикла;
	
	ГруппаОтбора           = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли; 

		ОтборЭлемента                = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ИндексСтатуса");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = 4;

		ОтборЭлемента                = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ИндексСтатуса");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = 5;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовЗначениеАтрибутаМаркетплейсаТекущее.Имя);
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовЗначенияАтрибутаМаркетплейсаТекущее.Имя);
	
	ГруппаОтбора           = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли; 

		ОтборЭлемента                = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ИндексСтатуса");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = 4;

		ОтборЭлемента                = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ИндексСтатуса");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = 5;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("МинимальнаяШирина", 10);
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовЗначениеАтрибутаМаркетплейса.Имя);
	
	ГруппаОтбора           = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли; 

		ОтборЭлемента                = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Элементы.ИмпортируемыеТовары.ТекущиеДанные.ДеревоРеквизитов.ТипЗначенияАтрибута");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = "boolean";

		ОтборЭлемента                = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Элементы.ИмпортируемыеТовары.ТекущиеДанные.ДеревоРеквизитов.ДоступенВыборЗначенияИзСписка");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовЗначениеАтрибутаМаркетплейса.Имя);
	
	ГруппаОтбора           = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли; 

		ОтборЭлемента                = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Элементы.ИмпортируемыеТовары.ТекущиеДанные.ДеревоРеквизитов.ТипЗначенияАтрибута");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = "boolean";

		ОтборЭлемента                = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Элементы.ИмпортируемыеТовары.ТекущиеДанные.ДеревоРеквизитов.ЦеновыеПоказатели");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Право);
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовИдентификаторЗначенияАтрибутаМаркетплейса.Имя);

	ГруппаОтбора           = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных")); 
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли; 

		ОтборЭлемента                = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Элементы.ИмпортируемыеТовары.ТекущиеДанные.ДеревоРеквизитов.ДоступенВыборЗначенияИзСписка");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;

		ОтборЭлемента                = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Элементы.ИмпортируемыеТовары.ТекущиеДанные.ДеревоРеквизитов.ЯвляетсяКоллекциейЗначений");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовИдентификаторЗначенияАтрибутаМаркетплейса.Имя);

	ОтборЭлемента               = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Элементы.ИмпортируемыеТовары.ТекущиеДанные.ДеревоРеквизитов.ИдентификаторЗначенияАтрибутаМаркетплейса");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.Заполнено;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Элементы.ИмпортируемыеТовары.ТекущиеДанные.ДеревоРеквизитов.ЗначениеАтрибутаМаркетплейса"));

	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовЗначениеАтрибутаМаркетплейсаБулево.Имя);

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Элементы.ИмпортируемыеТовары.ТекущиеДанные.ДеревоРеквизитов.ТипЗначенияАтрибута");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = "boolean";

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовЗначенияАтрибутаМаркетплейса.Имя);

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Элементы.ИмпортируемыеТовары.ТекущиеДанные.ДеревоРеквизитов.ЯвляетсяКоллекциейЗначений");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Дерево реквизитов (есть различия)
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовЕстьРазличия.Имя);
	
	ГруппаОтбора           = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли; 

		ОтборЭлемента                = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ИндексСтатуса");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = 4;

		ОтборЭлемента                = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ИндексСтатуса");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = 5;

		ОтборЭлемента                = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ВариантЗагрузки");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = 2;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Дерево реквизитов (значение атрибута 1С)
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементыДерева = ПолучитьПодчиненныеЭлементыФормы(Элементы.ДеревоРеквизитовГруппаЗначенияАтрибутаТекущее);
	Для Каждого ЭлементКоллекции Из ЭлементыДерева Цикл
		ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементКоллекции.Имя);
	КонецЦикла;
	
	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ВариантЗагрузки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 2;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовЗначениеАтрибутаМаркетплейса.Имя);
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовЗначенияАтрибутаМаркетплейса.Имя);
	
	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмпортируемыеТовары.ВариантЗагрузки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 2;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("МинимальнаяШирина", 10);
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовЗначениеАтрибутаМаркетплейсаТекущее.Имя);
	
	ГруппаОтбора           = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли; 

		ОтборЭлемента                = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Элементы.ИмпортируемыеТовары.ТекущиеДанные.ДеревоРеквизитов.ТекущееТипЗначенияАтрибута");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = "boolean";

		ОтборЭлемента                = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Элементы.ИмпортируемыеТовары.ТекущиеДанные.ДеревоРеквизитов.ТекущееДоступенВыборЗначенияИзСписка");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовЗначениеАтрибутаМаркетплейсаТекущее.Имя);
	
	ГруппаОтбора           = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли; 

		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Элементы.ИмпортируемыеТовары.ТекущиеДанные.ДеревоРеквизитов.ТекущееТипЗначенияАтрибута");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = "boolean";

		ОтборЭлемента                = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Элементы.ИмпортируемыеТовары.ТекущиеДанные.ДеревоРеквизитов.ЦеновыеПоказатели");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Право);
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовИдентификаторЗначенияАтрибутаМаркетплейсаТекущее.Имя);

	ГруппаОтбора           = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных")); 
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли; 

		ОтборЭлемента                = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Элементы.ИмпортируемыеТовары.ТекущиеДанные.ДеревоРеквизитов.ТекущееДоступенВыборЗначенияИзСписка");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;

		ОтборЭлемента                = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Элементы.ИмпортируемыеТовары.ТекущиеДанные.ДеревоРеквизитов.ТекущееЯвляетсяКоллекциейЗначений");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовИдентификаторЗначенияАтрибутаМаркетплейсаТекущее.Имя);

	ОтборЭлемента               = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Элементы.ИмпортируемыеТовары.ТекущиеДанные.ДеревоРеквизитов.ТекущееИдентификаторЗначенияАтрибутаМаркетплейса");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.Заполнено;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Элементы.ИмпортируемыеТовары.ТекущиеДанные.ДеревоРеквизитов.ТекущееЗначениеАтрибутаМаркетплейса"));

	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовЗначениеАтрибутаМаркетплейсаБулевоТекущее.Имя);

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Элементы.ИмпортируемыеТовары.ТекущиеДанные.ДеревоРеквизитов.ТекущееТипЗначенияАтрибута");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = "boolean";

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовЗначенияАтрибутаМаркетплейсаТекущее.Имя);

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Элементы.ИмпортируемыеТовары.ТекущиеДанные.ДеревоРеквизитов.ТекущееЯвляетсяКоллекциейЗначений");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовЗначениеАтрибутаМаркетплейса.Имя);
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовЗначениеАтрибутаМаркетплейсаТекущее.Имя);
	
	ГруппаОтбора           = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ; 

		ОтборЭлемента                = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Элементы.ИмпортируемыеТовары.ТекущиеДанные.ДеревоРеквизитов.ИдентификаторАтрибутаМаркетплейса");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = "СтавкаНДС";

		ОтборЭлемента                = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Элементы.ИмпортируемыеТовары.ТекущиеДанные.ДеревоРеквизитов.ЗначениеАтрибутаМаркетплейса");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
		ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Элементы.ИмпортируемыеТовары.ТекущиеДанные.ДеревоРеквизитов.ТекущееЗначениеАтрибутаМаркетплейса");

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт",      ШрифтыСтиля.ВажнаяНадписьШрифт);

	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовЗначениеАтрибутаМаркетплейса.Имя);
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовИдентификаторЗначенияАтрибутаМаркетплейса.Имя);
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовЗначениеАтрибутаМаркетплейсаТекущее.Имя);
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовИдентификаторЗначенияАтрибутаМаркетплейсаТекущее.Имя);
	
	ГруппаОтбора           = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ; 

		ОтборЭлемента                = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Элементы.ИмпортируемыеТовары.ТекущиеДанные.ДеревоРеквизитов.ИдентификаторАтрибутаМаркетплейса");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = "ИдентификаторКатегорииМаркетплейса";

		ОтборЭлемента                = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Элементы.ИмпортируемыеТовары.ТекущиеДанные.ДеревоРеквизитов.ЗначениеАтрибутаМаркетплейса");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
		ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Элементы.ИмпортируемыеТовары.ТекущиеДанные.ДеревоРеквизитов.ТекущееЗначениеАтрибутаМаркетплейса");

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);

	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовЗначениеАтрибутаМаркетплейса.Имя);
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовИдентификаторЗначенияАтрибутаМаркетплейса.Имя);
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовЗначениеАтрибутаМаркетплейсаТекущее.Имя);
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовИдентификаторЗначенияАтрибутаМаркетплейсаТекущее.Имя);

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Элементы.ИмпортируемыеТовары.ТекущиеДанные.ДеревоРеквизитов.ИдентификаторАтрибутаМаркетплейса");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "ИдентификаторКатегорииМаркетплейса";

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Элементы.ИмпортируемыеТовары.ТекущиеДанные.ДеревоРеквизитов.ИдентификаторЗначенияАтрибутаМаркетплейса");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Элементы.ИмпортируемыеТовары.ТекущиеДанные.ДеревоРеквизитов.ИдентификаторЗначенияАтрибутаМаркетплейса");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеСодержит;
	ОтборЭлемента.ПравоеЗначение = "_";

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);

	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовЗначениеАтрибутаМаркетплейса.Имя);
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовИдентификаторЗначенияАтрибутаМаркетплейса.Имя);
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовЗначениеАтрибутаМаркетплейсаБулево.Имя);
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовЗначенияАтрибутаМаркетплейса.Имя);
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовЗначениеАтрибутаМаркетплейсаТекущее.Имя);
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовИдентификаторЗначенияАтрибутаМаркетплейсаТекущее.Имя);
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовЗначениеАтрибутаМаркетплейсаБулевоТекущее.Имя);
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовЗначенияАтрибутаМаркетплейсаТекущее.Имя);
	
	ГруппаОтбора1           = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ; 

		ОтборЭлемента                = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Элементы.ИмпортируемыеТовары.ТекущиеДанные.ДеревоРеквизитов.ИдентификаторАтрибутаМаркетплейса");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
		ОтборЭлемента.ПравоеЗначение = "СтавкаНДС";

		ОтборЭлемента                = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Элементы.ИмпортируемыеТовары.ТекущиеДанные.ДеревоРеквизитов.ИдентификаторАтрибутаМаркетплейса");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
		ОтборЭлемента.ПравоеЗначение = "ИдентификаторКатегорииМаркетплейса";

		ОтборЭлемента                = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Элементы.ИмпортируемыеТовары.ТекущиеДанные.ДеревоРеквизитов.ЕстьРазличия");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;

		ГруппаОтбора2           = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли; 

			ОтборЭлемента                = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Элементы.ИмпортируемыеТовары.ТекущиеДанные.ДеревоРеквизитов.ОбязательныйАтрибут");
			ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = Истина;

			ОтборЭлемента                = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Элементы.ИмпортируемыеТовары.ТекущиеДанные.ДеревоРеквизитов.ТекущееОбязательныйАтрибут");
			ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = Истина;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаРоли);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	ДоступнаУстановкаЦен = ПравоДоступа("Проведение", Метаданные.Документы.УстановкаЦенНоменклатуры);
	
	Элементы.ГруппаШапка.ТолькоПросмотр              = ТолькоПросмотр;
	Элементы.ГруппаТаблицаТоваров.ТолькоПросмотр     = ТолькоПросмотр;
	Элементы.ГруппаКоманднаяПанель.ТолькоПросмотр    = ТолькоПросмотр;
	Элементы.ГруппаКоманднаяПанельЕще.ТолькоПросмотр = ТолькоПросмотр;
	
	Если ВариантЗагрузкиДанных = 0 Тогда
		ДополнительныеПараметрыЗаголовок = НСтр("ru = 'Обновить выбранные карточки товаров'");
	ИначеЕсли ВариантЗагрузкиДанных = 1 Тогда
		ДополнительныеПараметрыЗаголовок = НСтр("ru = 'Обновить выбранные карточки товаров и загрузить отсутствующие'");
	Иначе
		ДополнительныеПараметрыЗаголовок = НСтр("ru = 'Загрузить отсутствующие карточки товаров'");
	КонецЕсли;
	Если ЗначениеЗаполнено(ДополнительныеПараметрыИмпортаДанных.РазмерПорцииЗагрузкиДанных) Тогда
		ДополнительныеПараметрыЗаголовок = ДополнительныеПараметрыЗаголовок
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				" " + НСтр("ru = '(%1 позиций за один запрос получения данных)'"),
				ДополнительныеПараметрыИмпортаДанных.РазмерПорцииЗагрузкиДанных);
	КонецЕсли;
	Если СоздатьЭлементыНоменклатуры Тогда
		ДополнительныеПараметрыЗаголовок = ДополнительныеПараметрыЗаголовок
			+ НСтр("ru = '; создать несопоставленные элементы справочника ""Номенклатура""'");
	КонецЕсли;
	Если ЗагрузитьЦеныПродажи И ДоступнаУстановкаЦен Тогда
		ДополнительныеПараметрыЗаголовок = ДополнительныеПараметрыЗаголовок
			+ НСтр("ru = '; загрузить текущие цены продажи с торговой площадки'");
	КонецЕсли;
	Элементы.ДополнительныеПараметрыИмпортаДанных.Заголовок = ДополнительныеПараметрыЗаголовок;
	
	Элементы.ГруппаФлажки.Доступность                        = (ИмпортируемыеТовары.ПолучитьЭлементы().Количество() > 0);
	Элементы.УстановитьФлажкиДляТребующихЗаписиЦен.Видимость = ЗагрузитьЦеныПродажи И ДоступнаУстановкаЦен И ЗаписатьЦеныОтдельнойКомандой;
	Элементы.ЗаписатьЗагруженныеДанные.Заголовок             = ?(ЗагрузитьЦеныПродажи И ДоступнаУстановкаЦен И ЗаписатьЦеныОтдельнойКомандой, НСтр("ru = 'Записать товары'"), НСтр("ru = 'Записать данные'"));
	Элементы.ЗаписатьЦены.Видимость                          = ЗагрузитьЦеныПродажи И ДоступнаУстановкаЦен И ЗаписатьЦеныОтдельнойКомандой;
	Элементы.ГруппаДанныеКарточкиТовара.Видимость            = ОтображатьДанныеТовара;
	
	Элементы.ГруппаЛегендаОжидаютИсправленияОшибок.Видимость = ЗначениеЗаполнено(ЛегендаОжидаютИсправленияОшибок);
	Элементы.ГруппаЛегендаПодготовленыКПубликации.Видимость  = ЗначениеЗаполнено(ЛегендаПодготовленыКПубликации);
	Элементы.ГруппаЛегендаПеремещеныВАрхив.Видимость         = ЗначениеЗаполнено(ЛегендаПеремещеныВАрхив);
	Элементы.ГруппаЛегендаГотовыКПродаже.Видимость           = ЗначениеЗаполнено(ЛегендаГотовыКПродаже);
	
	Элементы.ГруппаЛегендаОжидаютПолученияДанных.Видимость   = ЗначениеЗаполнено(ЛегендаОжидаютПолученияДанных);
	Элементы.ГруппаЛегендаНеНайденыНаПлощадке.Видимость      = ЗначениеЗаполнено(ЛегендаНеНайденыНаПлощадке);
	Элементы.ГруппаЛегендаОбнаруженыРасхождения.Видимость    = ЗначениеЗаполнено(ЛегендаОбнаруженыРасхождения);
	Элементы.ГруппаЛегендаОбновлениеНеТребуется.Видимость    = ЗначениеЗаполнено(ЛегендаОбновлениеНеТребуется);
	
	Элементы.ИмпортируемыеТоварыХарактеристика.Видимость     = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	Элементы.ИмпортируемыеТоварыУпаковка.Видимость           = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКнопкуОтбораПоСтатусу(ИмяКоманды)

	Команда = Команды.Найти(ИмяКоманды);
	Если Команда = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Элементы.ОтборПоСтатусам.Заголовок = Команда.Заголовок;
	Элементы.ОтборПоСтатусам.Картинка  = Команда.Картинка;

КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеПараметрыИмпортаДанныхЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ДополнительныеПараметрыИмпортаДанных, РезультатЗакрытия);
		
		СоздатьЭлементыНоменклатуры   = РезультатЗакрытия.СоздатьЭлементыНоменклатуры;
		ЗагрузитьЦеныПродажи          = РезультатЗакрытия.ЗагрузитьЦеныПродажи;
		ЗаписатьЦеныОтдельнойКомандой = РезультатЗакрытия.ЗаписатьЦеныОтдельнойКомандой;
		ЗагрузитьИзображения          = РезультатЗакрытия.ЗагрузитьИзображения;

		Если ВариантЗагрузкиДанных <> РезультатЗакрытия.ВариантЗагрузкиДанных Тогда
			ВариантЗагрузкиДанных = РезультатЗакрытия.ВариантЗагрузкиДанных;
			ВариантЗагрузкиДанныхПриИзменении(Неопределено);
		Иначе
			УстановитьВидимостьДоступность();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСнятьПометки(Знач ЭлементДерева, Знач Пометка, Знач ИмяКоманды = "")
	
	Если ЭлементДерева.ИндексСтатуса = -2 Тогда
		Если Пометка 
				 И (ЭлементДерева.ВариантЗагрузки = 0 И ВариантЗагрузкиДанных = 2
					Или ЭлементДерева.ВариантЗагрузки = 2 И ВариантЗагрузкиДанных = 0
					Или ЭлементДерева.ВариантЗагрузки = 3) Тогда
			Пометка = Ложь;
		КонецЕсли;
		
		Для Каждого СтрокаДереваВторогоУровня Из ЭлементДерева.ПолучитьЭлементы() Цикл
			УстановитьСнятьПометки(СтрокаДереваВторогоУровня, Пометка, ИмяКоманды);
		КонецЦикла;
		
	Иначе
		Если Пометка 
				И ЭлементДерева.ИндексСтатуса = 4 Тогда
			Пометка = Ложь;
		КонецЕсли;
		
		Если Пометка
			 И ЗначениеЗаполнено(ИмяКоманды) Тогда
			Если ИмяКоманды = "ТребующиеПолученияДанных" 
				 И ЭлементДерева.ИндексСтатуса <> 5 Тогда
				Пометка = Ложь;
			ИначеЕсли ИмяКоманды = "ТребующиеЗаписиТоваровИЦен" 
					  И ЭлементДерева.ИндексСтатуса <> 6 
					  И Не ЭлементДерева.ЕстьРазличияЦеновыеПоказатели Тогда
				Пометка = Ложь;
			ИначеЕсли ИмяКоманды = "ТребующиеЗаписиТоваров" 
					  И ЭлементДерева.ИндексСтатуса <> 6 Тогда
				Пометка = Ложь;
			ИначеЕсли ИмяКоманды = "ТребующиеЗаписиЦен" 
				 	  И Не ЭлементДерева.ЕстьРазличияЦеновыеПоказатели Тогда
				Пометка = Ложь;
			ИначеЕсли ИмяКоманды = "НеСопоставленнаяНоменклатура" 
				 	  И ЗначениеЗаполнено(ЭлементДерева.Номенклатура) Тогда
				Пометка = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		ЭлементДерева.Пометка                           = Пометка;
		ЭлементДереваРодитель                           = ЭлементДерева.ПолучитьРодителя();
		ЭлементДереваРодитель.КоличествоОтмеченныхСтрок = ЭлементДереваРодитель.КоличествоОтмеченныхСтрок + ?(ЭлементДерева.Пометка, 1, -1);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОпределитьНаименованияГруппДереваТоваров(Знач СтрокаДереваПервогоУровня = Неопределено)
	
	Если СтрокаДереваПервогоУровня = Неопределено Тогда
		Для Каждого СтрокаДереваПервогоУровня Из ИмпортируемыеТовары.ПолучитьЭлементы() Цикл
			ОпределитьНаименованияГруппДереваТоваров(СтрокаДереваПервогоУровня);
		КонецЦикла;
		
	Иначе
		Если СтрокаДереваПервогоУровня.ВариантЗагрузки = 0 Тогда
			ШаблонПредставления = НСтр("ru = 'Обновить (%1 из %2)'");
		ИначеЕсли СтрокаДереваПервогоУровня.ВариантЗагрузки = 2 Тогда
			ШаблонПредставления = НСтр("ru = 'Загрузить (%1 из %2)'");
		ИначеЕсли СтрокаДереваПервогоУровня.ВариантЗагрузки = 3 Тогда
			ШаблонПредставления = НСтр("ru = 'Не найдены (%2)'");
		КонецЕсли;
		
		КоличествоСтрок           = СтрокаДереваПервогоУровня.ПолучитьЭлементы().Количество();
		КоличествоОтмеченныхСтрок = 0;
		
		Для Каждого СтрокаДереваВторогоУровня Из СтрокаДереваПервогоУровня.ПолучитьЭлементы() Цикл
			Если ОтображатьСопоставленные = 1
					И (Не ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Номенклатура) 
						Или СтрокаДереваВторогоУровня.ХарактеристикиИспользуются
							И Не ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Характеристика)
						Или Не ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Категория)) Тогда
				КоличествоСтрок = КоличествоСтрок - 1;
				Продолжить;
				
			ИначеЕсли ОтображатьСопоставленные = 2
						И ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Номенклатура) 
						И (Не СтрокаДереваВторогоУровня.ХарактеристикиИспользуются
							Или ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Характеристика))
						И ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Категория) Тогда
				КоличествоСтрок = КоличествоСтрок - 1;
				Продолжить;
			КонецЕсли;
			
			Если ОтображатьПоСтатусу <> -1
				 И СтрокаДереваВторогоУровня.ИндексСтатуса <> ОтображатьПоСтатусу Тогда
				КоличествоСтрок = КоличествоСтрок - 1;
				Продолжить;
			КонецЕсли;
			
			КоличествоОтмеченныхСтрок = КоличествоОтмеченныхСтрок + ?(СтрокаДереваВторогоУровня.Пометка, 1, 0);
		КонецЦикла;
		
		Если КоличествоСтрок = 0 Тогда
			ШаблонПредставления = СтрЗаменить(ШаблонПредставления, " (%1 из %2)", "");
			ШаблонПредставления = СтрЗаменить(ШаблонПредставления, " (%2)", "");
		КонецЕсли;
		
		СтрокаДереваПервогоУровня.Пометка                          = (КоличествоОтмеченныхСтрок > 0);
		СтрокаДереваПервогоУровня.КоличествоОтмеченныхСтрок        = КоличествоОтмеченныхСтрок;
		СтрокаДереваПервогоУровня.ПредставлениеОбъектаМаркетплейса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонПредставления,
			КоличествоОтмеченныхСтрок,
			КоличествоСтрок);

		ТекущиеДанные = Элементы.ИмпортируемыеТовары.ТекущиеДанные;
		
		Если ТекущиеДанные <> Неопределено Тогда
			Если ОтображатьСопоставленные = 1
					И (Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) 
						Или ТекущиеДанные.ХарактеристикиИспользуются
							И Не ЗначениеЗаполнено(ТекущиеДанные.Характеристика)
						Или Не ЗначениеЗаполнено(ТекущиеДанные.Категория)) Тогда
				Элементы.ИмпортируемыеТовары.ТекущаяСтрока = СтрокаДереваПервогоУровня.ПолучитьИдентификатор();
				
			ИначеЕсли ОтображатьСопоставленные = 2
						И ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) 
						И (Не ТекущиеДанные.ХарактеристикиИспользуются
							Или ЗначениеЗаполнено(ТекущиеДанные.Характеристика))
						И ЗначениеЗаполнено(ТекущиеДанные.Категория) Тогда
				Элементы.ИмпортируемыеТовары.ТекущаяСтрока = СтрокаДереваПервогоУровня.ПолучитьИдентификатор();
			КонецЕсли;
			
			Если ОтображатьПоСтатусу <> -1
				 И ТекущиеДанные.ИндексСтатуса <> ОтображатьПоСтатусу Тогда
				Элементы.ИмпортируемыеТовары.ТекущаяСтрока = СтрокаДереваПервогоУровня.ПолучитьИдентификатор();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеЛегенды(Знач ДеревоТоваров = Неопределено)
	
	Если ДеревоТоваров = Неопределено Тогда
		ДеревоТоваров = РеквизитФормыВЗначение("ИмпортируемыеТовары");
	КонецЕсли;
	
	ОжидаютИсправленияОшибок = ДеревоТоваров.Строки.НайтиСтроки(Новый Структура("ВариантЗагрузки, ИндексСтатуса", 0, 0), Истина).Количество();
	ПодготовленыКПубликации  = ДеревоТоваров.Строки.НайтиСтроки(Новый Структура("ВариантЗагрузки, ИндексСтатуса", 0, 1), Истина).Количество();
	ПеремещеныВАрхив         = ДеревоТоваров.Строки.НайтиСтроки(Новый Структура("ВариантЗагрузки, ИндексСтатуса", 0, 2), Истина).Количество();
	ГотовыКПродаже           = ДеревоТоваров.Строки.НайтиСтроки(Новый Структура("ВариантЗагрузки, ИндексСтатуса", 0, 3), Истина).Количество();
	
	ОжидаютПолученияДанных   = ДеревоТоваров.Строки.НайтиСтроки(Новый Структура("ВариантЗагрузки, ИндексСтатуса", 0, 5), Истина).Количество();
	НеНайденыНаПлощадке      = ДеревоТоваров.Строки.НайтиСтроки(Новый Структура("ИндексСтатуса", 4), Истина).Количество();
	ОбнаруженыРасхождения    = ДеревоТоваров.Строки.НайтиСтроки(Новый Структура("ИндексСтатуса", 6), Истина).Количество();
	ОбновлениеНеТребуется    = ДеревоТоваров.Строки.НайтиСтроки(Новый Структура("ИндексСтатуса", 7), Истина).Количество();
	
	ЛегендаОжидаютИсправленияОшибок = ?(ОжидаютИсправленияОшибок = 0,
										"",
										СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											НСтр("ru = 'Ожидают исправления ошибок: %1'"),
											ОжидаютИсправленияОшибок));
	ЛегендаПодготовленыКПубликации  = ?(ПодготовленыКПубликации = 0,
										"",
										СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											НСтр("ru = 'Подготовлены к публикации: %1'"),
											ПодготовленыКПубликации));
	ЛегендаПеремещеныВАрхив         = ?(ПеремещеныВАрхив = 0,
										"",
										СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											НСтр("ru = 'Перемещены в архив: %1'"),
											ПеремещеныВАрхив));
	ЛегендаГотовыКПродаже           = ?(ГотовыКПродаже = 0,
										"",
										СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											НСтр("ru = 'Готовы к продаже: %1'"),
											ГотовыКПродаже));

	ЛегендаОжидаютПолученияДанных   = ?(ОжидаютПолученияДанных = 0,
										"",
										СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											НСтр("ru = 'Ожидают получения данных: %1'"),
											ОжидаютПолученияДанных));
	ЛегендаНеНайденыНаПлощадке      = ?(НеНайденыНаПлощадке = 0,
										"",
										СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											НСтр("ru = 'Не найдены на площадке: %1'"),
											НеНайденыНаПлощадке));
	ЛегендаОбнаруженыРасхождения    = ?(ОбнаруженыРасхождения = 0,
										"",
										СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											НСтр("ru = 'Обнаружены расхождения: %1'"),
											ОбнаруженыРасхождения));
	ЛегендаОбновлениеНеТребуется    = ?(ОбновлениеНеТребуется = 0,
										"",
										СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											НСтр("ru = 'Обновление не требуется: %1'"),
											ОбновлениеНеТребуется));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСлужебныеДанные()

	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Обработка.УправлениеПродажамиНаOzon.Форма.ИмпортДанныхТоваровСТорговойПлощадки.ОбновитьСлужебныеДанные");
	
	Модифицированность = Ложь;
	ОчиститьСообщения();
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Импорт данных'"),
		, 
		НСтр("ru = 'Обновление служебных данных по выбранным товарным позициям.'"),
		БиблиотекаКартинок.ЛоготипOzon2);
		
	ДлительнаяОперация    = ОбновитьСлужебныеДанныеНаСервере();
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбновитьСлужебныеДанныеЗавершениеФоновогоЗадания", ЭтотОбъект,);
	
	ПараметрыОжидания 								   = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания 			   = Истина;
	ПараметрыОжидания.ТекстСообщения                   = НСтр("ru = 'Обновление служебных данных по товарным позициям.'");
	ПараметрыОжидания.ОповещениеПользователя.Показать  = Истина;
	ПараметрыОжидания.ОповещениеПользователя.Текст 	   = НСтр("ru = 'Импорт данных'");
	ПараметрыОжидания.ОповещениеПользователя.Пояснение = НСтр("ru = 'Завершено обновление служебных данных по товарным позициям.'");
	ПараметрыОжидания.ОповещениеПользователя.Картинка  = БиблиотекаКартинок.ЛоготипOzon2;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);

КонецПроцедуры

&НаСервере
Функция ОбновитьСлужебныеДанныеНаСервере()
	
	ПараметрыВыполнения 							 = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение            = 0;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания  = НСтр("ru = 'Ozon. Обновление служебных данных по товарным позициям.'");
	ПараметрыВыполнения.ЗапуститьВФоне               = Истина;
	ПараметрыВыполнения.ПрерватьВыполнениеЕслиОшибка = Истина;
	
	ИмяМетода = "Обработки.УправлениеПродажамиНаOzon.ОбновитьСлужебныеДанные";
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, 
		ИмяМетода, 
		УчетнаяЗаписьМаркетплейса, 
		РеквизитФормыВЗначение("ИмпортируемыеТовары"),
		ДополнительныеПараметрыИмпортаДанных.СортироватьСтрокиДереваТоваров);
	
КонецФункции

&НаКлиенте
Процедура ОбновитьСлужебныеДанныеЗавершениеФоновогоЗадания(Результат, ДополнительныеПараметры) Экспорт

	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Обработка.УправлениеПродажамиНаOzon.Форма.ИмпортДанныхТоваровСТорговойПлощадки.ОбновитьСлужебныеДанныеЗавершениеФоновогоЗадания");
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.Статус = "Ошибка" Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки);
		
		ИначеЕсли Результат.Статус = "Выполнено" 
		 			И Результат.Свойство("АдресРезультата") Тогда
			Ошибка = РезультатОбновленияСлужебныхДанныхНаСервере(Результат.АдресРезультата);
			ИнтеграцияСМаркетплейсомOzonКлиент.ВывестиСостояние(Ошибка, ДополнительныеПараметры, Истина);
			РазвернутьУзлыДерева(Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает результат обновления служебных данных.
//
// Параметры:
//   АдресРезультата - Строка - адрес временного хранилища, в которое будет помещен (или уже помещен) результат работы 
//                       процедуры длительной операции.
//
// Возвращаемое значение:
//   См. ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка.
//
&НаСервере
Функция РезультатОбновленияСлужебныхДанныхНаСервере(Знач АдресРезультата)
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ПустаяСтрока(Результат.Ошибка.КодОшибки) Тогда
		Если Результат.Свойство("ДеревоТоваров") Тогда
			ЗначениеВРеквизитФормы(Результат.ДеревоТоваров, "ИмпортируемыеТовары");
			ПолучитьДанныеЛегенды(Результат.ДеревоТоваров);
			УстановитьВидимостьДоступность();
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат.Ошибка;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьДанныеСТорговойПлощадкиНаКлиенте(Знач СледующаяПорцияДанных = Ложь)

	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Обработка.УправлениеПродажамиНаOzon.Форма.ИмпортДанныхТоваровСТорговойПлощадки.ПолучитьДанныеСТорговойПлощадки");
	
	Модифицированность = Ложь;
	ОчиститьСообщения();
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Импорт данных'"),
		, 
		НСтр("ru = 'Получение данных по выбранным товарным позициям с торговой площадки Ozon.'"),
		БиблиотекаКартинок.ЛоготипOzon2);
		
	КэшКатегорий = ИнтеграцияСМаркетплейсомOzonКлиент.КэшКатегорий();
	
	ДлительнаяОперация    = ПолучитьДанныеСТорговойПлощадкиНаСервере(КэшКатегорий, СледующаяПорцияДанных);
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПолучитьДанныеСТорговойПлощадкиЗавершениеФоновогоЗадания", ЭтотОбъект,);
	
	ПараметрыОжидания 								   = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания 			   = Истина;
	ПараметрыОжидания.ТекстСообщения                   = НСтр("ru = 'Получение данных по товарным позициям с торговой площадки Ozon.'");
	ПараметрыОжидания.ОповещениеПользователя.Показать  = Истина;
	ПараметрыОжидания.ОповещениеПользователя.Текст 	   = НСтр("ru = 'Импорт данных'");
	ПараметрыОжидания.ОповещениеПользователя.Пояснение = НСтр("ru = 'Завершено получение данных по товарным позициям с торговой площадки Ozon.'");
	ПараметрыОжидания.ОповещениеПользователя.Картинка  = БиблиотекаКартинок.ЛоготипOzon2;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);

КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеСТорговойПлощадкиНаСервере(КэшКатегорий, Знач СледующаяПорцияДанных = Ложь)
	
	ПараметрыВыполнения 							 = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение            = 0;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания  = НСтр("ru = 'Ozon. Получение данных по товарным позициям с торговой площадки.'");
	ПараметрыВыполнения.ЗапуститьВФоне               = Истина;
	ПараметрыВыполнения.ПрерватьВыполнениеЕслиОшибка = Истина;
	
	ПараметрыФункции = Новый Структура;
	ПараметрыФункции.Вставить("ВариантЗагрузкиДанных",          ВариантЗагрузкиДанных);
	ПараметрыФункции.Вставить("ОбработкаПереданныхПозиций",     ОбработкаПереданныхПозиций);
	ПараметрыФункции.Вставить("КэшКатегорий",                   КэшКатегорий);
	ПараметрыФункции.Вставить("ЗагрузитьЦеныПродажи",           ЗагрузитьЦеныПродажи);
	ПараметрыФункции.Вставить("ИмяИдентификатора",              ДополнительныеПараметрыИмпортаДанных.ИмяИдентификатора);
	ПараметрыФункции.Вставить("РазмерПорцииЗагрузкиДанных",     ДополнительныеПараметрыИмпортаДанных.РазмерПорцииЗагрузкиДанных);
	ПараметрыФункции.Вставить("СоздатьЭлементыНоменклатуры",    СоздатьЭлементыНоменклатуры);
	ПараметрыФункции.Вставить("СортироватьСтрокиДереваТоваров", ДополнительныеПараметрыИмпортаДанных.СортироватьСтрокиДереваТоваров);
	ПараметрыФункции.Вставить("ОтображатьСопоставленные",       ОтображатьСопоставленные);
	ПараметрыФункции.Вставить("ОтображатьПоСтатусу",            ОтображатьПоСтатусу);
	ПараметрыФункции.Вставить("СледующаяПорцияДанных",          СледующаяПорцияДанных);
	ПараметрыФункции.Вставить("ИдентификаторыТоваров",          ИдентификаторыТоваров.Выгрузить());
	
	ИмяМетода = "Обработки.УправлениеПродажамиНаOzon.ПолучитьИмпортируемыеДанныеСТорговойПлощадки";
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, 
		ИмяМетода, 
		УчетнаяЗаписьМаркетплейса, 
		ПараметрыФункции, 
		РеквизитФормыВЗначение("ИмпортируемыеТовары"));
	
КонецФункции

&НаКлиенте
Процедура ПолучитьДанныеСТорговойПлощадкиЗавершениеФоновогоЗадания(Результат, ДополнительныеПараметры) Экспорт

	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Обработка.УправлениеПродажамиНаOzon.Форма.ИмпортДанныхТоваровСТорговойПлощадки.ПолучитьДанныеСТорговойПлощадкиЗавершениеФоновогоЗадания");
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.Статус = "Ошибка" Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки);
		
		ИначеЕсли Результат.Статус = "Выполнено" 
		 			И Результат.Свойство("АдресРезультата") Тогда
			КэшКатегорий = Неопределено;
			Ошибка = РезультатПолученияДанныхСТорговойПлощадкиНаСервере(Результат.АдресРезультата, КэшКатегорий);
			ИнтеграцияСМаркетплейсомOzonКлиент.ВывестиСостояние(Ошибка, ДополнительныеПараметры, Истина);
			
			Если ПустаяСтрока(Ошибка.КодОшибки) Тогда
				Если ЗначениеЗаполнено(КэшКатегорий) Тогда
					Для Каждого КлючЗначение Из КэшКатегорий Цикл
						ИнтеграцияСМаркетплейсомOzonКлиент.СохранитьДанныеВКэшКатегорий(КлючЗначение.Значение, КлючЗначение.Ключ);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;

			РазвернутьУзлыДерева(Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает результат получения данных с торговой площадки.
//
// Параметры:
//   АдресРезультата - Строка - адрес временного хранилища, в которое будет помещен (или уже помещен) результат работы 
//                       процедуры длительной операции.
//   КэшКатегорий    - Неопределено, см. ИнтеграцияСМаркетплейсомOzonКлиент.КэшКатегорий - кэш категорий.
//
// Возвращаемое значение:
//   См. ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка.
//
&НаСервере
Функция РезультатПолученияДанныхСТорговойПлощадкиНаСервере(Знач АдресРезультата, КэшКатегорий = Неопределено)
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ПустаяСтрока(Результат.Ошибка.КодОшибки) Тогда
		Если Результат.Свойство("ДеревоТоваров") Тогда
			ЗначениеВРеквизитФормы(Результат.ДеревоТоваров, "ИмпортируемыеТовары");
			ПолучитьДанныеЛегенды(Результат.ДеревоТоваров);
			УстановитьВидимостьДоступность();
		КонецЕсли;
		Если Результат.Свойство("ИдентификаторыТоваров") Тогда
			ИдентификаторыТоваров.Загрузить(Результат.ИдентификаторыТоваров);
		КонецЕсли;
		Если Результат.Свойство("КэшКатегорий") Тогда
			КэшКатегорий = Результат.КэшКатегорий;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат.Ошибка;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьЗагруженныеДанныеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОценкаПроизводительностиКлиент.ЗамерВремени(
			"Обработка.УправлениеПродажамиНаOzon.Форма.ИмпортДанныхТоваровСТорговойПлощадки.ЗаписатьЗагруженныеДанные");
		
		ОчиститьСообщения();
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Импорт данных'"),
			, 
			НСтр("ru = 'Запись загруженных данных по выбранным товарным позициям с торговой площадки Ozon.'"),
			БиблиотекаКартинок.ЛоготипOzon2);
			
		ДлительнаяОперация    = ЗаписатьЗагруженныеДанныеНаСервере(Ложь, Ложь);
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗаписатьЗагруженныеДанныеЗавершениеФоновогоЗадания", ЭтотОбъект,);
		
		ПараметрыОжидания 								   = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания 			   = Истина;
		ПараметрыОжидания.ТекстСообщения                   = НСтр("ru = 'Запись загруженных данных по товарным позициям с торговой площадки Ozon.'");
		ПараметрыОжидания.ОповещениеПользователя.Показать  = Истина;
		ПараметрыОжидания.ОповещениеПользователя.Текст 	   = НСтр("ru = 'Импорт данных'");
		ПараметрыОжидания.ОповещениеПользователя.Пояснение = НСтр("ru = 'Завершена запись загруженных данных по товарным позициям с торговой площадки Ozon.'");
		ПараметрыОжидания.ОповещениеПользователя.Картинка  = БиблиотекаКартинок.ЛоготипOzon2;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЦеныЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОчиститьСообщения();
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Импорт данных'"),
			, 
			НСтр("ru = 'Запись цен по выбранным товарным позициям с торговой площадки Ozon.'"),
			БиблиотекаКартинок.ЛоготипOzon2);
			
		ДлительнаяОперация    = ЗаписатьЗагруженныеДанныеНаСервере(Истина, Ложь);
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗаписатьЗагруженныеДанныеЗавершениеФоновогоЗадания", ЭтотОбъект,);
		
		ПараметрыОжидания 								   = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания 			   = Истина;
		ПараметрыОжидания.ТекстСообщения                   = НСтр("ru = 'Запись цен по товарным позициям с торговой площадки Ozon.'");
		ПараметрыОжидания.ОповещениеПользователя.Показать  = Истина;
		ПараметрыОжидания.ОповещениеПользователя.Текст 	   = НСтр("ru = 'Импорт данных'");
		ПараметрыОжидания.ОповещениеПользователя.Пояснение = НСтр("ru = 'Завершена запись цен по товарным позициям с торговой площадки Ozon.'");
		ПараметрыОжидания.ОповещениеПользователя.Картинка  = БиблиотекаКартинок.ЛоготипOzon2;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоздатьНоменклатуруЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОчиститьСообщения();
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Импорт данных'"),
			, 
			НСтр("ru = 'Создание номенклатуры для несопоставленных позиций.'"),
			БиблиотекаКартинок.ЛоготипOzon2);
			
		ДлительнаяОперация    = ЗаписатьЗагруженныеДанныеНаСервере(Ложь, Истина);
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗаписатьЗагруженныеДанныеЗавершениеФоновогоЗадания", ЭтотОбъект,);
		
		ПараметрыОжидания 								   = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания 			   = Истина;
		ПараметрыОжидания.ТекстСообщения                   = НСтр("ru = 'Создание номенклатуры для несопоставленных позиций.'");
		ПараметрыОжидания.ОповещениеПользователя.Показать  = Истина;
		ПараметрыОжидания.ОповещениеПользователя.Текст 	   = НСтр("ru = 'Импорт данных'");
		ПараметрыОжидания.ОповещениеПользователя.Пояснение = НСтр("ru = 'Завершено создание номенклатуры для несопоставленных позиций.'");
		ПараметрыОжидания.ОповещениеПользователя.Картинка  = БиблиотекаКартинок.ЛоготипOzon2;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЗаписатьЗагруженныеДанныеНаСервере(Знач ЗаписатьТолькоЦены = Ложь, Знач ТолькоСоздатьНоменклатуру = Ложь)
	
	ПараметрыВыполнения 							 = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение            = 0;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания  = НСтр("ru = 'Ozon. Запись загруженных данных по товарным позициям с торговой площадки.'");
	ПараметрыВыполнения.ЗапуститьВФоне               = Истина;
	ПараметрыВыполнения.ПрерватьВыполнениеЕслиОшибка = Истина;
	
	ДоступнаУстановкаЦен = ПравоДоступа("Проведение", Метаданные.Документы.УстановкаЦенНоменклатуры);
	
	ПараметрыФункции = Новый Структура;
	ПараметрыФункции.Вставить("ВариантЗагрузкиДанных",          ВариантЗагрузкиДанных);
	ПараметрыФункции.Вставить("ЗагрузитьЦеныПродажи",           ЗагрузитьЦеныПродажи И ДоступнаУстановкаЦен И Не ЗаписатьЦеныОтдельнойКомандой);
	ПараметрыФункции.Вставить("ЗаписатьТолькоЦены",             ЗагрузитьЦеныПродажи И ДоступнаУстановкаЦен И ЗаписатьТолькоЦены);
	ПараметрыФункции.Вставить("ТолькоСоздатьНоменклатуру",      ТолькоСоздатьНоменклатуру);
	ПараметрыФункции.Вставить("ЗагрузитьИзображения",           ЗагрузитьИзображения);
	ПараметрыФункции.Вставить("ИмяИдентификатора",              ДополнительныеПараметрыИмпортаДанных.ИмяИдентификатора);
	ПараметрыФункции.Вставить("РазмерПорцииЗагрузкиДанных",     ДополнительныеПараметрыИмпортаДанных.РазмерПорцииЗагрузкиДанных);
	ПараметрыФункции.Вставить("СоздатьЭлементыНоменклатуры",    СоздатьЭлементыНоменклатуры);
	ПараметрыФункции.Вставить("СортироватьСтрокиДереваТоваров", ДополнительныеПараметрыИмпортаДанных.СортироватьСтрокиДереваТоваров);
	ПараметрыФункции.Вставить("ОтображатьСопоставленные",       ОтображатьСопоставленные);
	ПараметрыФункции.Вставить("ОтображатьПоСтатусу",            ОтображатьПоСтатусу);
	
	ИмяМетода = "Обработки.УправлениеПродажамиНаOzon.ЗаписатьЗагруженныеДанныеСТорговойПлощадки";
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, 
		ИмяМетода, 
		УчетнаяЗаписьМаркетплейса, 
		РеквизитФормыВЗначение("ИмпортируемыеТовары"), 
		ПараметрыФункции);
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьЗагруженныеДанныеЗавершениеФоновогоЗадания(Результат, ДополнительныеПараметры) Экспорт

	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Обработка.УправлениеПродажамиНаOzon.Форма.ИмпортДанныхТоваровСТорговойПлощадки.ЗаписатьЗагруженныеДанныеЗавершениеФоновогоЗадания");
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.Статус = "Ошибка" Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки);
		
		ИначеЕсли Результат.Статус = "Выполнено" 
		 			И Результат.Свойство("АдресРезультата") Тогда
			Ошибка = РезультатЗаписиЗагруженныхДанныхНаСервере(Результат.АдресРезультата);
			ИнтеграцияСМаркетплейсомOzonКлиент.ВывестиСостояние(Ошибка, ДополнительныеПараметры, Истина);
			РазвернутьУзлыДерева(Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает результат записи загруженных данных.
//
// Параметры:
//   АдресРезультата - Строка - адрес временного хранилища, в которое будет помещен (или уже помещен) результат работы 
//                       процедуры длительной операции.
//
// Возвращаемое значение:
//   См. ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка.
//
&НаСервере
Функция РезультатЗаписиЗагруженныхДанныхНаСервере(Знач АдресРезультата)

	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		
	Если ПустаяСтрока(Результат.Ошибка.КодОшибки) Тогда
		ЗначениеВРеквизитФормы(Результат.ДеревоТоваров, "ИмпортируемыеТовары");
		ПолучитьДанныеЛегенды(Результат.ДеревоТоваров);
		УстановитьВидимостьДоступность();
		
		Если Результат.Записано > 0 Тогда
			Если Результат.ВТомЧислеНовых > 0 Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Записано товарных позиций: %1, в том числе новых: %2.'", 
						ОбщегоНазначения.КодОсновногоЯзыка()),
					Результат.Записано,
					Результат.ВТомЧислеНовых);
			Иначе
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Записано товарных позиций: %1.'", 
						ОбщегоНазначения.КодОсновногоЯзыка()),
					Результат.Записано);
			КонецЕсли;
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		
			Если Результат.ЗагруженыЦены Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Созданы документы установки новых цен номенклатуры.'", 
						ОбщегоНазначения.КодОсновногоЯзыка()),
					Результат.НеЗаписано);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		
		Если Результат.НеЗаписано > 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось записать товарных позиций: %1. Подробности см. в журнале регистрации.'", 
					ОбщегоНазначения.КодОсновногоЯзыка()),
				Результат.НеЗаписано);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
			Для Каждого ЭлементКоллекции Из Результат.Пропущено Цикл
				ОбщегоНазначения.СообщитьПользователю(
					Символы.Таб + "" + ЭлементКоллекции.Сообщение,,,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ИмпортируемыеТовары", ЭлементКоллекции.НомерСтроки, "Номенклатура"));
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат.Ошибка;
	
КонецФункции

&НаКлиенте
Процедура СопоставитьКатегорииТовара(ТекущиеДанные)
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторКатегорииМаркетплейса) Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.НаименованиеКатегорииМаркетплейса) Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеТекущейКатегорииМаркетплейса = Новый Структура;
	ДанныеТекущейКатегорииМаркетплейса.Вставить("ВладелецКатегорииМаркетплейса",      ТекущиеДанные.ИсточникКатегорииМаркетплейса);
	ДанныеТекущейКатегорииМаркетплейса.Вставить("ИдентификаторКатегорииМаркетплейса", ТекущиеДанные.ИдентификаторКатегорииМаркетплейса);
	ДанныеТекущейКатегорииМаркетплейса.Вставить("НаименованиеКатегорииМаркетплейса",  ТекущиеДанные.НаименованиеКатегорииМаркетплейса);
	ДанныеТекущейКатегорииМаркетплейса.Вставить("ПредставлениеКатегорииМаркетплейса", ТекущиеДанные.НаименованиеКатегорииМаркетплейса);
	ДанныеТекущейКатегорииМаркетплейса.Вставить("Категория1С",                        ТекущиеДанные.Категория);

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("УчетнаяЗаписьМаркетплейса",          УчетнаяЗаписьМаркетплейса);
	ДополнительныеПараметры.Вставить("ТекущаяКатегория1С",                 ?(ЗначениеЗаполнено(ТекущиеДанные.ИсточникКатегорииМаркетплейса), ТекущиеДанные.ИсточникКатегорииМаркетплейса, ТекущиеДанные.Категория));
	ДополнительныеПараметры.Вставить("ДанныеТекущейКатегорииМаркетплейса", ДанныеТекущейКатегорииМаркетплейса);
	
	Если Не ЗначениеЗаполнено(ДополнительныеПараметры.ТекущаяКатегория1С) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ВариантЗагрузки = 2 Тогда
		СопоставлениеКатегорий = ИнтеграцияСМаркетплейсомOzonВызовСервера.ОпределитьТекущуюСопоставленнуюКатегориюМаркетплейсаПоИдентификатору(
			УчетнаяЗаписьМаркетплейса, 
			ТекущиеДанные.ИсточникКатегорииМаркетплейса,
			ТекущиеДанные.ИдентификаторКатегорииМаркетплейса);
	
		Если СопоставлениеКатегорий = Неопределено Тогда
			ОповещениеОЗавершении = Новый ОписаниеОповещения("СопоставитьКатегорииТовараЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(ОповещениеОЗавершении, 
				НСтр("ru = 'Текущие категории учетной системы и маркетплейса не сопоставлены. Выполнить запись сопоставления категорий?'"), 
				РежимДиалогаВопрос.ДаНет, 
				, 
				КодВозвратаДиалога.Нет, 
				НСтр("ru = 'Сопоставление категорий'"), 
				КодВозвратаДиалога.Нет);
			Возврат;
		КонецЕсли;
	КонецЕсли;

	СопоставитьКатегорииТовараЗавершение(КодВозвратаДиалога.ОК, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьКатегорииТовараЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ДанныеЗаписи = Новый Структура;
		ДанныеЗаписи.Вставить("УчетнаяЗаписьМаркетплейса",        УчетнаяЗаписьМаркетплейса);
		ДанныеЗаписи.Вставить("ВидОбъектаМаркетплейса",           ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.КатегорияТоваров"));
		ДанныеЗаписи.Вставить("ИдентификаторОбъектаМаркетплейса", ДополнительныеПараметры.ДанныеТекущейКатегорииМаркетплейса.ИдентификаторКатегорииМаркетплейса);
		ДанныеЗаписи.Вставить("НаименованиеОбъектаМаркетплейса",  ДополнительныеПараметры.ДанныеТекущейКатегорииМаркетплейса.НаименованиеКатегорииМаркетплейса);
		ДанныеЗаписи.Вставить("Объект1С",                         ДополнительныеПараметры.ДанныеТекущейКатегорииМаркетплейса.Категория1С);

		СопоставитьКатегорииТовараНаСервере(ДанныеЗаписи);
	КонецЕсли;
	
	ОткрытьФорму("Обработка.УправлениеПродажамиНаOzon.Форма.СопоставлениеКатегорий", ДополнительныеПараметры);
	Оповестить("ОткрытиеФормыСопоставленияКатегорий", ДополнительныеПараметры);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СопоставитьКатегорииТовараНаСервере(ДанныеЗаписи)

	НаборЗаписей = РегистрыСведений.СоответствияОбъектовМаркетплейсов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.УчетнаяЗаписьМаркетплейса.Установить(ДанныеЗаписи.УчетнаяЗаписьМаркетплейса);
	НаборЗаписей.Отбор.ВидОбъектаМаркетплейса.Установить(ДанныеЗаписи.ВидОбъектаМаркетплейса);
	НаборЗаписей.Отбор.Объект1С.Установить(ДанныеЗаписи.Объект1С);

	Запись = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Запись, ДанныеЗаписи);
	Запись.ДатаАктуальности = ТекущаяДатаСеанса();

	НаборЗаписей.Записать();

КонецПроцедуры

&НаСервере
Процедура ОбновитьКатегорииТоваров(Знач ИсточникКатегории)
	
	Если ИсточникКатегории = ПредопределенноеЗначение("Перечисление.ИсточникиКатегорийДляМаркетплейса.ВидНоменклатуры") Тогда
		Элементы.ИмпортируемыеТоварыКатегория.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ВидыНоменклатуры");
		ТипЗначения = ТипЗнч(Справочники.ВидыНоменклатуры.ПустаяСсылка());
	ИначеЕсли ИсточникКатегории = ПредопределенноеЗначение("Перечисление.ИсточникиКатегорийДляМаркетплейса.ИерархияНоменклатуры") Тогда
		Элементы.ИмпортируемыеТоварыКатегория.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
		ТипЗначения = ТипЗнч(Справочники.Номенклатура.ПустаяСсылка());
	ИначеЕсли ИсточникКатегории = ПредопределенноеЗначение("Перечисление.ИсточникиКатегорийДляМаркетплейса.ТоварнаяКатегория") Тогда
		Элементы.ИмпортируемыеТоварыКатегория.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ТоварныеКатегории");
		ТипЗначения = ТипЗнч(Справочники.ТоварныеКатегории.ПустаяСсылка());
	Иначе
		ТипЗначения = ТипЗнч(Неопределено);
	КонецЕсли;
	
	Для Каждого СтрокаДереваПервогоУровня Из ИмпортируемыеТовары.ПолучитьЭлементы() Цикл
		Если СтрокаДереваПервогоУровня.ВариантЗагрузки <> 2 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаДереваВторогоУровня Из СтрокаДереваПервогоУровня.ПолучитьЭлементы() Цикл
			Если ТипЗнч(СтрокаДереваВторогоУровня.Категория) <> ТипЗначения Тогда
				ТекущаяКатегория = ИнтеграцияСМаркетплейсомOzonСервер.ОпределитьТекущуюСопоставленнуюКатегориюМаркетплейсаПоНоменклатуре(
					УчетнаяЗаписьМаркетплейса,
					СтрокаДереваВторогоУровня.Номенклатура,
					СтрокаДереваВторогоУровня.ИдентификаторКатегорииМаркетплейса,
					ИсточникКатегории);
						
				СтрокаДереваВторогоУровня.Категория                                 = ТекущаяКатегория.Категория;
				СтрокаДереваВторогоУровня.ИсточникКатегорииМаркетплейса             = ТекущаяКатегория.ИсточникКатегории;
				СтрокаДереваВторогоУровня.ТекущееИдентификаторКатегорииМаркетплейса = ТекущаяКатегория.ИдентификаторКатегории;
				СтрокаДереваВторогоУровня.ТекущееНаименованиеКатегорииМаркетплейса  = ТекущаяКатегория.НаименованиеКатегории;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗагрузитьИзображение()
	
	Если ЭтоАдресВременногоХранилища(АдресИзображения) Тогда
		УдалитьИзВременногоХранилища(АдресИзображения);
	КонецЕсли;

	ТекущиеДанные     = Элементы.ТаблицаИмпортированныхТоваровИзображения.ТекущиеДанные;
	ОшибкаИзображения = Ложь;
	
	Если ТекущиеДанные = Неопределено Тогда
		АдресИзображения = "";
		
	Иначе
		Если ИдентификаторИзображения <> ТекущиеДанные.ПолучитьИдентификатор() Тогда
			Возврат;
		КонецЕсли;
		
		АдресИзображения = ЗагрузитьИзображениеНаСервере(УчетнаяЗаписьМаркетплейса, ТекущиеДанные.ПутьКФайлу);
		Если ПустаяСтрока(АдресИзображения) Тогда
			ОшибкаИзображения = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ОшибкаИзображения Тогда
		Элементы.Изображение.ТекстНевыбраннойКартинки = НСтр("ru = 'Ошибка при чтении файла изображения'");
	Иначе
		Элементы.Изображение.ТекстНевыбраннойКартинки = НСтр("ru = 'Изображение товара'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗагрузитьИзображениеНаСервере(УчетнаяЗапись, Знач URL)

	Если ИнтеграцияСМаркетплейсамиСервер.ЭтоПубличнаяСсылкаЯндексДиска(URL) Тогда
		ТокенДоступа = ИнтеграцияСМаркетплейсамиСервер.ПолучитьТокенДоступаЯндексДиск(УчетнаяЗапись);
		URL = ИнтеграцияСМаркетплейсамиСервер.ПолучитьФайлПоПубличнойСсылкеИзСервиса(ТокенДоступа, URL);
	КонецЕсли;

	ДанныеИзображения = ИнтеграцияСМаркетплейсамиСервер.ДанныеФайлаПоВнешнейСсылке(URL);

	Если ДанныеИзображения.Статус 
		 И ИнтеграцияСМаркетплейсамиСервер.ЭтоФайлКартинки(ДанныеИзображения.Путь) Тогда
		Возврат ДанныеИзображения.Путь;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаСервереБезКонтекста
Функция ОпределитьПараметрыРасчетаСтавкиНДС(Знач УчетнаяЗаписьМаркетплейса)

	НастройкиУчетнойЗаписи = Справочники.УчетныеЗаписиМаркетплейсов.НастройкиУчетнойЗаписи(УчетнаяЗаписьМаркетплейса);
	ТипНалогообложенияНДС  = ?(ПолучитьФункциональнуюОпцию("ИспользоватьУчетНДС"), Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС, Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС);
	
	Возврат Новый Структура("НалогообложениеНДС, Организация, Дата", 
		ТипНалогообложенияНДС, НастройкиУчетнойЗаписи.Организация, ТекущаяДатаСеанса());
	
КонецФункции

&НаСервере
Процедура ОбновитьСтрокуДереваТоваров(ИсходныйКлючЗаписи, КлючЗаписи)
	
	Запись = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(Запись, КлючЗаписи);
	Запись.Прочитать();
	
	Если Не Запись.Выбран() Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиУчетнойЗаписи = Справочники.УчетныеЗаписиМаркетплейсов.НастройкиУчетнойЗаписи(УчетнаяЗаписьМаркетплейса);
	ВидыЦен                = ИнтеграцияСМаркетплейсомOzonСервер.ВидыЦенУчетнойЗаписи(УчетнаяЗаписьМаркетплейса, Истина, Истина);
	ИсточникКатегории      = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗаписьМаркетплейса, "ИсточникКатегории");
	
	Для Каждого СтрокаДереваПервогоУровня Из ИмпортируемыеТовары.ПолучитьЭлементы() Цикл
		Для Каждого СтрокаДереваВторогоУровня Из СтрокаДереваПервогоУровня.ПолучитьЭлементы() Цикл 
			Если СтрокаДереваВторогоУровня.Номенклатура = ИсходныйКлючЗаписи.Номенклатура 
				 И СтрокаДереваВторогоУровня.Характеристика = ИсходныйКлючЗаписи.Характеристика
				 И СтрокаДереваВторогоУровня.Упаковка = ИсходныйКлючЗаписи.Упаковка Тогда
				ДанныеОбъекта               = Запись.ДанныеОбъекта.Получить();
				ЗначенияРеквизитовИзСервиса = СтрокаДереваВторогоУровня.ЗначенияРеквизитовИзСервиса.Выгрузить();

				// Текущие сопоставления категории
				ТекущаяКатегория = ИнтеграцияСМаркетплейсомOzonСервер.ОпределитьТекущуюСопоставленнуюКатегориюМаркетплейсаПоНоменклатуре(
					УчетнаяЗаписьМаркетплейса,
					СтрокаДереваВторогоУровня.Номенклатура,
					СтрокаДереваВторогоУровня.ИдентификаторКатегорииМаркетплейса,
					ИсточникКатегории);
					
				СтрокаДереваВторогоУровня.ТекущееИдентификаторКатегорииМаркетплейса = ТекущаяКатегория.ИдентификаторКатегории;
				СтрокаДереваВторогоУровня.ТекущееНаименованиеКатегорииМаркетплейса  = ТекущаяКатегория.НаименованиеКатегории;
				
				// Значения реквизитов
				ИнтеграцияСМаркетплейсомOzonСервер.ДополнитьТаблицуЗначенийРеквизитов(
					УчетнаяЗаписьМаркетплейса,
					ЗначенияРеквизитовИзСервиса,
					Неопределено,
					Неопределено,
					СтрокаДереваВторогоУровня.Категория,
					ДанныеОбъекта,
					Истина);
					
				// Дерево реквизитов
				ДеревоРеквизитов = ИнтеграцияСМаркетплейсомOzonСервер.СформироватьДеревоРеквизитов(
					УчетнаяЗаписьМаркетплейса,
					ЗначенияРеквизитовИзСервиса,
					СтрокаДереваВторогоУровня,
					Неопределено,
					НастройкиУчетнойЗаписи,
					ВидыЦен);
					
				// Различия
				Если СтрокаДереваВторогоУровня.ВариантЗагрузки = 0 
					 И СтрокаДереваВторогоУровня.ИндексСтатуса <> 4 
					 И СтрокаДереваВторогоУровня.ИндексСтатуса <> 5 Тогда
					Отбор = Новый Структура("ЕстьРазличия, ИдентификаторАтрибутаМаркетплейса", Истина, "СтавкаНДС");
					ЕстьРазличияСтавкаНДС = ДеревоРеквизитов.Строки.НайтиСтроки(Отбор, Истина).Количество();
					СтрокаДереваВторогоУровня.ЕстьРазличияСтавкаНДС = (ЕстьРазличияСтавкаНДС > 0);
					
					Отбор = Новый Структура("ЕстьРазличия, ИдентификаторАтрибутаМаркетплейса", Истина, "ИдентификаторКатегорииМаркетплейса");
					НайденныеСтрокиРазличия = ДеревоРеквизитов.Строки.НайтиСтроки(Отбор, Истина);
					ЕстьРазличияКатегорииOzon = НайденныеСтрокиРазличия.Количество();
					СтрокаДереваВторогоУровня.ЕстьРазличияКатегорииOzon = (ЕстьРазличияКатегорииOzon > 0);
					Для Каждого ЭлементКоллекции Из НайденныеСтрокиРазличия Цикл
						Если СтрНайти(ЭлементКоллекции.ИдентификаторКатегорииМаркетплейса, "_") = 0 Тогда
							ЕстьРазличияКатегорииOzon = ЕстьРазличияКатегорииOzon - 1;
						КонецЕсли;
					КонецЦикла;
					
					Отбор = Новый Структура("ЕстьРазличия, ЦеновыеПоказатели", Истина, Истина);
					ЕстьРазличияЦеновыеПоказатели = ДеревоРеквизитов.Строки.НайтиСтроки(Отбор, Истина).Количество();
					СтрокаДереваВторогоУровня.ЕстьРазличияЦеновыеПоказатели = (ЕстьРазличияЦеновыеПоказатели > 0);
					
					Отбор = Новый Структура("ЕстьРазличия", Истина, Ложь);
					ЕстьРазличия = ДеревоРеквизитов.Строки.НайтиСтроки(Отбор, Истина).Количество() - ЕстьРазличияСтавкаНДС - ЕстьРазличияКатегорииOzon - ЕстьРазличияЦеновыеПоказатели;
					
					Если ЕстьРазличия > 0 Тогда
						СтрокаДереваВторогоУровня.Пометка       = (ВариантЗагрузкиДанных <= 1);
						СтрокаДереваВторогоУровня.ИндексСтатуса = 6;
					ИначеЕсли ЗагрузитьЦеныПродажи И (ЕстьРазличияЦеновыеПоказатели > 0) Тогда
						СтрокаДереваВторогоУровня.Пометка = (ВариантЗагрузкиДанных <= 1);
					КонецЕсли;
					
				Иначе
					Отбор = Новый Структура("ЕстьРазличия, ИдентификаторАтрибутаМаркетплейса", Истина, "СтавкаНДС");
					ЕстьРазличияСтавкаНДС = ДеревоРеквизитов.Строки.НайтиСтроки(Отбор, Истина).Количество();
					СтрокаДереваВторогоУровня.ЕстьРазличияСтавкаНДС = (ЕстьРазличияСтавкаНДС > 0);
				КонецЕсли;
				
				// Перезаполнить реквизиты
				ЗаполнитьЗначенияСвойств(СтрокаДереваВторогоУровня, Запись,, "ДанныеОбъекта, ИсточникиСхожихПредложений");
				
				Если ДанныеОбъекта <> Неопределено Тогда
					СтрокаДереваВторогоУровня.ДанныеОбъекта.Загрузить(ДанныеОбъекта.Скопировать());
				КонецЕсли;
				
				СтрокаДереваВторогоУровня.ЗначенияРеквизитовИзСервиса.Загрузить(ЗначенияРеквизитовИзСервиса);
				
				СтрокаДереваВторогоУровня.ДеревоРеквизитов.ПолучитьЭлементы().Очистить();
				ОбщегоНазначения.ЗаполнитьКоллекциюЭлементовДереваДанныхФормы(СтрокаДереваВторогоУровня.ДеревоРеквизитов.ПолучитьЭлементы(), ДеревоРеквизитов);
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьУзлыДерева(РазвернутьСПодчиненными = Ложь)
	
	Для Каждого СтрокаДереваПервогоУровня Из ИмпортируемыеТовары.ПолучитьЭлементы() Цикл
		Элементы.ИмпортируемыеТовары.Развернуть(СтрокаДереваПервогоУровня.ПолучитьИдентификатор(), РазвернутьСПодчиненными);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоМаркируемаяПродукция(Номенклатура)

	Результат = Ложь;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Результат = НоменклатураЛокализация.ЭтоМаркируемаяПродукция(Номенклатура);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

#КонецОбласти
