
#Область ОписаниеПеременных

&НаКлиенте
Перем РезультатАвторизации;

&НаКлиенте
Перем ПутьКФайлуАвторизации;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УчетнаяЗаписьМаркетплейса.ВидМаркетплейса = ПредопределенноеЗначение("Перечисление.ВидыМаркетплейсов.МаркетплейсOzon");

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	ПроверитьНаличиеУчетнойЗаписи();

КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторКлиентаПриИзменении(Элемент)

	ПроверитьНаличиеУчетнойЗаписи(); 

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подключить(Команда)

	ОчиститьСообщения();

	Если Не ЗначениеЗаполнено(УчетнаяЗаписьМаркетплейса.Организация)
		Или Не ЗначениеЗаполнено(УчетнаяЗаписьМаркетплейса.ИдентификаторКлиента)
		Или Не ЗначениеЗаполнено(КлючAPI) Тогда  

		ТекстСообщения = НСтр("ru = 'Заполните все поля для подключения к маркетплейсу Ozon'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);

		Возврат;
	КонецЕсли;

	ДанныеУчетнойЗаписи = Новый Структура;
	ДанныеУчетнойЗаписи.Вставить("Организация",             УчетнаяЗаписьМаркетплейса.Организация);
	ДанныеУчетнойЗаписи.Вставить("ИдентификаторКлиента",    УчетнаяЗаписьМаркетплейса.ИдентификаторКлиента);
	ДанныеУчетнойЗаписи.Вставить("КлючAPI",                 КлючAPI);
	ДанныеУчетнойЗаписи.Вставить("УникальныйИдентификатор", Неопределено);
	ПроверкаПройдена = ПроверитьПодключениеКСерверу(ДанныеУчетнойЗаписи);

	ПоказыватьСтраницуРезультатамиАвторизации = Истина;

	Если ПроверкаПройдена Тогда
		ЗаписьУспешна = ЗаписатьДанныеВХранилище();

		Если ЗаписьУспешна Тогда
			Оповестить("ОбновитьСписокПодключений");
		Иначе
			ПоказыватьСтраницуРезультатамиАвторизации = Ложь;
		КонецЕсли;
	КонецЕсли;

	Если ПоказыватьСтраницуРезультатамиАвторизации Тогда
		ПоказатьСтраницуСРезультатамиАвторизации(ПроверкаПройдена);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ПроверитьПодключениеКСерверу(ДанныеУчетнойЗаписи)

	Результат = ИнтеграцияСМаркетплейсомOzonСервер.ПроверитьСвязьСМаркетплейсом(ДанныеУчетнойЗаписи);

	Если Результат.КодСостояния = 200 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Подключение выполнено успешно.'"));
		Возврат Истина;
	Иначе
		ШаблонОшибки = НСтр("ru = 'Во время проверки подключения к HTTP-серверу произошла ошибка: %1 (%2)'");
		Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, Результат.КодСостояния, Результат.ТекстОшибки);
		ОбщегоНазначения.СообщитьПользователю(Комментарий);
		Возврат Ложь;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ПоказатьСтраницуСРезультатамиАвторизации(АвторизацияУспешна)

	Попытка
		#Если Не ВебКлиент Тогда
			ПутьКФайлу = ПолучитьИмяВременногоФайла("html");
		#Иначе
			Если Не РаботаСФайламиСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
				Если АвторизацияУспешна Тогда
					ТекстСообщения = НСтр("ru = 'Авторизация пройдена.'");
				Иначе
					ТекстСообщения = НСтр("ru = 'Ошибки авторизации.'");
				КонецЕсли;
				
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
				Возврат;
			КонецЕсли;
			
			Каталог = КаталогВременныхФайлов();
			ИмяФайла = Строка(Новый УникальныйИдентификатор) + ".html";
			ПутьКФайлу = Каталог + ИмяФайла;
		#КонецЕсли

		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстСтраницы = ТекстСтраницы(АвторизацияУспешна);
		ТекстовыйДокумент.УстановитьТекст(ТекстСтраницы);
		ТекстовыйДокумент.Записать(ПутьКФайлу);

		ДополнительныеПараметры = Новый Структура("ПутьКФайлу, АвторизацияУспешна", ПутьКФайлу, АвторизацияУспешна);
		ПараметрыЗапускаПрограммы = ФайловаяСистемаКлиент.ПараметрыЗапускаПрограммы();
		ПараметрыЗапускаПрограммы.Оповещение = Новый ОписаниеОповещения("ЗапуститьПрограммуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФайловаяСистемаКлиент.ЗапуститьПрограмму(ПутьКФайлу, ПараметрыЗапускаПрограммы);
	Исключение
		ТекстСообщения = НСтр("ru = 'Возникла ошибка при попытке открытия файла с результатами проверки.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПрограммуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РезультатАвторизации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "АвторизацияУспешна", Ложь);
	ПутьКФайлуАвторизации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ПутьКФайлу", "");

	ПодключитьОбработчикОжидания("УдалитьФайлРезультатаПодключения_Подключаемый", 1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура УдалитьФайлРезультатаПодключения_Подключаемый()

	Если ЗначениеЗаполнено(ПутьКФайлуАвторизации) Тогда
		Попытка
			УдалитьФайлы(ПутьКФайлуАвторизации);
		Исключение
			ЗаписатьОшибкуУдаленияФайла(ПутьКФайлуАвторизации, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
	
	Если РезультатАвторизации = Истина Тогда
		Оповестить("ВывестиСообщение", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Подключение организации <%1> выполнено успешно.'"), УчетнаяЗаписьМаркетплейса.Организация));
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьОшибкуУдаленияФайла(ПутьФайлу, ПредставлениеОшибки)
	
	ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не удалось удалить временный файл <%1> по причине: %2'", 
			ОбщегоНазначения.КодОсновногоЯзыка()), 
		ПутьФайлу, 
		ПредставлениеОшибки);
	ЗаписьЖурналаРегистрации(ИнтеграцияСМаркетплейсомOzonСервер.СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Ошибка,,,
		ОписаниеОшибки);

КонецПроцедуры

&НаСервере
Процедура ПроверитьНаличиеУчетнойЗаписи()

	ЭтоДубль = Ложь;

	УчетнаяЗаписьСсылка = Справочники.УчетныеЗаписиМаркетплейсов.ПустаяСсылка();

	Если ЗначениеЗаполнено(УчетнаяЗаписьМаркетплейса.ИдентификаторКлиента) Тогда
		Запрос = Новый Запрос; 
		Запрос.УстановитьПараметр("ИдентификаторКлиента", УчетнаяЗаписьМаркетплейса.ИдентификаторКлиента);
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	УчетныеЗаписиМаркетплейсов.Ссылка КАК УчетнаяЗаписьМаркетплейса,
			|	УчетныеЗаписиМаркетплейсов.Организация КАК Организация,
			|	УчетныеЗаписиМаркетплейсов.ПометкаУдаления КАК ПометкаУдаления
			|ИЗ
			|	Справочник.УчетныеЗаписиМаркетплейсов КАК УчетныеЗаписиМаркетплейсов
			|ГДЕ
			|	УчетныеЗаписиМаркетплейсов.ВидМаркетплейса = Значение(Перечисление.ВидыМаркетплейсов.МаркетплейсOzon)
			|	И УчетныеЗаписиМаркетплейсов.ИдентификаторКлиента = &ИдентификаторКлиента
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПометкаУдаления";
		
		УстановитьПривилегированныйРежим(Истина);
		ВыборкаДанныхПроверки = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		
		Если ВыборкаДанныхПроверки.Следующий() Тогда
			Если ВыборкаДанныхПроверки.ПометкаУдаления Тогда
				УчетнаяЗаписьСсылка = ВыборкаДанныхПроверки.УчетнаяЗаписьМаркетплейса;
			Иначе
				ЭтоДубль = Истина;

				ИнформацияОДубле = НСтр("ru = 'Для указанного клиентского идентификатора уже существует активная учетная запись для организации <%1>. Создание новой учетной записи невозможно.'");
				Элементы.ДекорацияИнформацияОДубле.Заголовок = 
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ИнформацияОДубле, ВыборкаДанныхПроверки.Организация);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Элементы.ГруппаДанныеКлючаAPI.Видимость = Не ЭтоДубль;
	Элементы.ГруппаИнформацияОДубле.Видимость = ЭтоДубль;
	Элементы.ФормаПодключить.Доступность = Не ЭтоДубль;

КонецПроцедуры

&НаСервере
Функция ТекстСтраницы(АвторизацияУспешна)

	Если АвторизацияУспешна Тогда
		ТекстСтраницы = ПолучитьОбщийМакет("УспешнаяАвторизация").ПолучитьТекст();
	Иначе
		ТекстСтраницы = ПолучитьОбщийМакет("НеУспешнаяАвторизация").ПолучитьТекст();
	КонецЕсли;

	ИнформационнаяСтрокаДляЗамены = НСтр("ru = 'Все права защищены'");
	НоваяИнформационнаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '© ООО 1С-Софт, %1. Все права защищены'"), Формат(Год(ТекущаяДатаСеанса()), "ЧГ=0"));

	ТекстСтраницы = СтрЗаменить(ТекстСтраницы, ИнформационнаяСтрокаДляЗамены, НоваяИнформационнаяСтрока);

	Возврат ТекстСтраницы;

КонецФункции

&НаСервере
Функция ЗаписатьДанныеВХранилище()

	ЗаписьУспешна = Истина;

	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);

	Попытка

		Если ЗначениеЗаполнено(УчетнаяЗаписьСсылка) Тогда
			БлокировкаДанных = Новый БлокировкаДанных;
			ЗаблокироватьДанныеДляРедактирования(УчетнаяЗаписьСсылка);
			ЭлементБлокировки = БлокировкаДанных.Добавить("Справочник.УчетныеЗаписиМаркетплейсов");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", УчетнаяЗаписьСсылка);
			БлокировкаДанных.Заблокировать();

			УчетнаяЗаписьОбъект = УчетнаяЗаписьСсылка.ПолучитьОбъект();
			УстановитьНаименование = УчетнаяЗаписьОбъект.Организация <> УчетнаяЗаписьМаркетплейса.Организация;
			УчетнаяЗаписьОбъект.Организация = УчетнаяЗаписьМаркетплейса.Организация;
			УчетнаяЗаписьОбъект.ПометкаУдаления = Ложь;
		Иначе
			БлокировкаДанных = Новый БлокировкаДанных;
			ЗаблокироватьДанныеДляРедактирования(УчетнаяЗаписьМаркетплейса.Ссылка);
			ЭлементБлокировки = БлокировкаДанных.Добавить("Справочник.УчетныеЗаписиМаркетплейсов");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", УчетнаяЗаписьМаркетплейса.Ссылка);
			БлокировкаДанных.Заблокировать();

			УчетнаяЗаписьОбъект = РеквизитФормыВЗначение("УчетнаяЗаписьМаркетплейса", Тип("СправочникОбъект.УчетныеЗаписиМаркетплейсов"));
			УчетнаяЗаписьОбъект.ВалютаУчета = ЗначениеНастроекКлиентСерверПовтИсп.ВалютаРегламентированногоУчетаОрганизации(УчетнаяЗаписьОбъект.Организация);
			УчетнаяЗаписьОбъект.ИсточникКатегории = Перечисления.ИсточникиКатегорийДляМаркетплейса.ИерархияНоменклатуры;
			УстановитьНаименование = Истина;
		КонецЕсли;

		Если УстановитьНаименование Тогда
			УчетнаяЗаписьОбъект.Наименование = Строка(УчетнаяЗаписьОбъект.Организация) + " (" + Строка(УчетнаяЗаписьОбъект.ИдентификаторКлиента) + ")";
		КонецЕсли;

		УчетнаяЗаписьОбъект.ВидМаркетплейса = Перечисления.ВидыМаркетплейсов.МаркетплейсOzon;
		УчетнаяЗаписьОбъект.Записать();

		ИдентификаторУчетнойЗаписи = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПрефиксыСервиса().НастройкиСервиса + УчетнаяЗаписьОбъект.Ссылка.УникальныйИдентификатор();
		
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ИдентификаторУчетнойЗаписи, КлючAPI, "KeyAPI");
		УстановитьПривилегированныйРежим(Ложь);
		
		ЗафиксироватьТранзакцию();

	Исключение

		ОтменитьТранзакцию();

		ЗаписьУспешна = Ложь;

		ШаблонСообщения = НСтр("ru = 'Не удалось выполнить подключение по причине: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;

	Возврат ЗаписьУспешна;

КонецФункции

#КонецОбласти
