
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УчетнаяЗаписьТорговойПлощадки = Параметры.УчетнаяЗаписьТорговойПлощадки;
	
	Если Не ЗначениеЗаполнено(УчетнаяЗаписьТорговойПлощадки) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьУпаковкиНоменклатуры	   = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	
	ЗаполнитьСписокСкладовТорговойПлощадки();
	ОбновитьИнформациюОРегламентномЗадании();
	ОбновитьДатуАктуальностиДанныхОПродажахТоваров();
	УстановитьПараметрыДинамическихСписков();
	
	ПериодАнализаОтгрузок.ДатаОкончания = КонецДня(ТекущаяДатаСеанса() - 86400);
	ПериодАнализаОтгрузок.ДатаНачала    = НачалоДня(ПериодАнализаОтгрузок.ДатаОкончания - 7 * 86400);
	КоличествоДнейПланирования          = 7;
	
	СтрокаПолей = "Заказано, Отменено, ДнейВНаличии, СреднийЗаказВДень, ВНаличии, ЗапасДней, ВПоставке, ПлановаяПотребность, ВНаличииНаСкладах1С, ЗапланироватьКПоставке";
	СписокПолей = СтрРазделить(СтрЗаменить(СтрокаПолей, " ", ""), ",");
	Для Каждого ЭлементКоллекции Из СписокПолей Цикл
		ПолеНабораДанных = ДанныеДляПланирования.Поля.Найти(ЭлементКоллекции);
		Если ПолеНабораДанных <> Неопределено Тогда
			ПолеНабораДанных.ОграничениеИспользования.Группировка = Истина;
			ПолеНабораДанных.ОграничениеИспользования.Порядок = Истина;
			ПолеНабораДанных.ОграничениеИспользования.Условие = Истина;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьУсловноеОформление();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Элементы.ИдентификаторСкладаТорговойПлощадки.СписокВыбора.НайтиПоЗначению(ИдентификаторСкладаТорговойПлощадки) = Неопределено Тогда
		ИдентификаторСкладаТорговойПлощадки = "";
	КонецЕсли;

	ОчиститьДанныеДляПланированияНаСервере();
	УстановитьВидимостьДоступность();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИнтеграцияСМаркетплейсомOzonСервер.ОбновитьДанные" Тогда
		Если ЗначениеЗаполнено(Параметр)
				И Параметр = УчетнаяЗаписьТорговойПлощадки Тогда
			ОбновитьДатуАктуальностиДанныхОПродажахТоваров();
			Если Элементы.СтраницыПланирования.ТекущаяСтраница = Элементы.СтраницаПланирование Тогда
				Элементы.ДанныеДляПланирования.Обновить();
			КонецЕсли; 
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "УправлениеПродажамиНаOzon.ПланированиеПоставокНаСкладыТорговойПлощадки.СоздатьЗаявкиНаПоставку" Тогда
		Если ЗначениеЗаполнено(Параметр)
				И Параметр = УчетнаяЗаписьТорговойПлощадки Тогда
			Если Элементы.СтраницыПланирования.ТекущаяСтраница = Элементы.СтраницаРезультат Тогда
				Элементы.СформированныеДокументы.Обновить();
			КонецЕсли; 
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_НаборКонстант" Тогда
		Если ЗначениеЗаполнено(Параметр)
				И СтрНайти("ИспользоватьПартнеровИКонтрагентов, ИспользоватьСоглашенияСКлиентами, ИспользоватьДоговорыСКлиентами", Источник) > 0 Тогда
			УстановитьПараметрыДинамическихСписков();
			
			Если Элементы.СтраницыПланирования.ТекущаяСтраница = Элементы.СтраницаПланирование Тогда
				Элементы.ДанныеДляПланирования.Обновить();
			ИначеЕсли Элементы.СтраницыПланирования.ТекущаяСтраница = Элементы.СтраницаРезультат Тогда
				Элементы.СформированныеДокументы.Обновить();
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтраницыПланированияПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	СтраницыПланированияПослеСменыСтраницы(ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПоставкиПриИзменении(Элемент)

	Если ВидПоставки = 0 Тогда
		ИдентификаторСкладаТорговойПлощадки = "";
	КонецЕсли;
	
	ОчиститьДанныеДляПланированияНаСервере();
	УстановитьВидимостьДоступность("ВидПоставки");

КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторСкладаТорговойПлощадкиПриИзменении(Элемент)
	
	ОчиститьДанныеДляПланированияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступныеСклады1СПриИзменении(Элемент)
	
	ОчиститьДанныеДляПланированияНаСервере();
	
КонецПроцедуры
	
&НаКлиенте
Процедура КатегорииТорговойПлощадкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("УчетнаяЗаписьТорговойПлощадки", УчетнаяЗаписьТорговойПлощадки);
	ПараметрыОткрытия.Вставить("ВыбранныеКатегории",            КатегорииТорговойПлощадки);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыборКатегорийТорговойПлощадкиЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.УправлениеПродажамиНаOzon.Форма.МножественныйВыборКатегорийТорговойПлощадки", 
		ПараметрыОткрытия,
		,,,, 
		ОповещениеОЗакрытии);
			
КонецПроцедуры

&НаКлиенте
Процедура АнализироватьОтгрузкиПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность("АнализироватьОтгрузки");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДанныеДляПланирования

&НаКлиенте
Процедура ДанныеДляПланированияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ДанныеДляПланированияИзменить(Элемент, Поле);

КонецПроцедуры

&НаКлиенте
Процедура ДанныеДляПланированияПередНачаломИзменения(Элемент, Отказ)

	Отказ = Истина;
	ДанныеДляПланированияИзменить(Элемент);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДанныеДляПланированияПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)

	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"Обработка.УправлениеПродажамиНаOzon.ПланированиеПоставокНаСкладыТорговойПлощадки.ДанныеДляПланированияПриПолученииДанныхНаСервере");

	ИспользоватьХарактеристикиНоменклатуры = Настройки.ДополнительныеСвойства.ИспользоватьХарактеристикиНоменклатуры;
	ИспользоватьУпаковкиНоменклатуры	   = Настройки.ДополнительныеСвойства.ИспользоватьУпаковкиНоменклатуры;
	УчетнаяЗаписьТорговойПлощадки          = Настройки.ДополнительныеСвойства.УчетнаяЗаписьТорговойПлощадки;
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Номенклатура",   Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТоваров.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("Упаковка",       Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));

	Для Каждого КлючЗаписи Из Строки.ПолучитьКлючи() Цикл
		СтрокаТаблицыЗначений = ТаблицаТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыЗначений, КлючЗаписи);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ВЫРАЗИТЬ(ТаблицаТоваров.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
		|	ВЫРАЗИТЬ(ТаблицаТоваров.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Упаковка,
		|	"""" КАК ИдентификаторПубликации
		|ПОМЕСТИТЬ ВТ_ТаблицаТоваров
		|ИЗ
		|	&ТаблицаТоваров КАК ТаблицаТоваров
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Упаковка" 
	
		+ ОбщегоНазначения.РазделительПакетаЗапросов()
		+ Обработки.УправлениеПродажамиНаOzon.ТекстЗапросаДанныхПланирования()
		
		+ "УНИЧТОЖИТЬ ВТ_ТаблицаТоваров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Данные.Номенклатура КАК Номенклатура,
		|	ВТ_Данные.Характеристика КАК Характеристика,
		|	ВТ_Данные.Упаковка КАК Упаковка,
		|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК КоэффициентУпаковки,
		|	ВТ_Данные.ВНаличииНаСкладах1С КАК ВНаличииНаСкладах1С,
		|	ВТ_Данные.ЗарезервированоНаСкладах1С КАК ЗарезервированоНаСкладах1С,
		|	ВТ_Данные.ВПоставке КАК ВПоставке,
		|	ВТ_Данные.ВНаличии КАК ВНаличии,
		|	ВТ_Данные.Заказано КАК Заказано,
		|	ВТ_Данные.Отменено КАК Отменено,
		|	ВТ_Данные.ДнейВНаличии КАК ДнейВНаличии
		|ИЗ
		|	ВТ_Данные КАК ВТ_Данные
		|
		|УПОРЯДОЧИТЬ ПО
		|	Упаковка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Показатели
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Данные";
	
	Обработки.УправлениеПродажамиНаOzon.СкорректироватьТекстЗапросаДанныхПланирования(Запрос, Настройки.ДополнительныеСвойства);
	
	Запрос.УстановитьПараметр("УчетнаяЗаписьТорговойПлощадки", УчетнаяЗаписьТорговойПлощадки);
	Запрос.УстановитьПараметр("ТаблицаТоваров", 			   ТаблицаТоваров);
	
	УстановитьПривилегированныйРежим(Истина);
	ВыборкаДанных = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока ВыборкаДанных.Следующий() Цикл
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьТорговойПлощадки);
		СтруктураОтбора.Вставить("ВидОбъектаМаркетплейса",    Перечисления.ВидыОбъектовМаркетплейсов.Товар);
		СтруктураОтбора.Вставить("Номенклатура",			  ВыборкаДанных.Номенклатура);
		Если ИспользоватьХарактеристикиНоменклатуры Тогда 
			СтруктураОтбора.Вставить("Характеристика", ВыборкаДанных.Характеристика);
		КонецЕсли;
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			СтруктураОтбора.Вставить("Упаковка", ВыборкаДанных.Упаковка);
		КонецЕсли;
		СтруктураОтбора.Вставить("ОбъектПубликации", Неопределено);
		
		КлючЗаписи   = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьКлючЗаписи(СтруктураОтбора);
		СтрокаСписка = Строки[КлючЗаписи];
		
		Если СтрокаСписка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеСтрокиСписка          = СтрокаСписка.Данные;
		ДанныеСтрокиСписка.ВНаличии = ВыборкаДанных.ВНаличии;
		
		Если Настройки.ДополнительныеСвойства.АнализироватьОтгрузки Тогда
			ДанныеСтрокиСписка.Заказано 		   = ВыборкаДанных.Заказано;
			ДанныеСтрокиСписка.Отменено            = ВыборкаДанных.Отменено;
			ДанныеСтрокиСписка.ДнейВНаличии        = ВыборкаДанных.ДнейВНаличии;
			ДанныеСтрокиСписка.СреднийЗаказВДень   = Окр(?(ДанныеСтрокиСписка.ДнейВНаличии = 0, 0, 
															(ДанныеСтрокиСписка.Заказано - ДанныеСтрокиСписка.Отменено) / ДанныеСтрокиСписка.ДнейВНаличии), 3, РежимОкругления.Окр15как20);
			ДанныеСтрокиСписка.ЗапасДней           = Окр(?(ДанныеСтрокиСписка.СреднийЗаказВДень = 0, 0, 
															ДанныеСтрокиСписка.ВНаличии / ДанныеСтрокиСписка.СреднийЗаказВДень), 1, РежимОкругления.Окр15как20);
			ДанныеСтрокиСписка.ПлановаяПотребность = Окр(Макс(0, 
															Настройки.ДополнительныеСвойства.КоличествоДнейПланирования * ДанныеСтрокиСписка.СреднийЗаказВДень - ДанныеСтрокиСписка.ВНаличии + 0.4), 0, РежимОкругления.Окр15как20);
		КонецЕсли;
	
		КоэффициентУпаковки                           = ?(ВыборкаДанных.КоэффициентУпаковки = 0, 1, ВыборкаДанных.КоэффициентУпаковки);
		ДанныеСтрокиСписка.ВПоставке		          = Окр(ВыборкаДанных.ВПоставке / КоэффициентУпаковки, 3, РежимОкругления.Окр15как20);
		ДанныеСтрокиСписка.ВНаличииНаСкладах1С        = Окр(ВыборкаДанных.ВНаличииНаСкладах1С / КоэффициентУпаковки, 3, РежимОкругления.Окр15как20);
		ДанныеСтрокиСписка.ЗарезервированоНаСкладах1С = Окр(ВыборкаДанных.ЗарезервированоНаСкладах1С / КоэффициентУпаковки, 3, РежимОкругления.Окр15как20);
		ДанныеСтрокиСписка.ЗапланироватьКПоставке     = Макс(0, Мин(?(Настройки.ДополнительныеСвойства.АнализироватьОтгрузки, ДанныеСтрокиСписка.ПлановаяПотребность, 0) - ДанныеСтрокиСписка.ВПоставке, 
																	ДанныеСтрокиСписка.ВНаличииНаСкладах1С));
		ДанныеСтрокиСписка.РучноеИзменение            = Ложь;
		
		Если ДанныеСтрокиСписка.ВНаличииНаСкладах1С > 0 Тогда
			Ключ                  = ПолучитьКлючПланирования(ВыборкаДанных.Номенклатура, ВыборкаДанных.Характеристика);
			ПланированиеПоСкладам = Настройки.ДополнительныеСвойства.ПланированиеПоСкладам.Получить(Ключ);

			Если ПланированиеПоСкладам = Неопределено Тогда
				ПланированиеПоСкладам = Новый Соответствие;
			КонецЕсли;
			
			Данные = ПланированиеПоСкладам.Получить(ДанныеСтрокиСписка.ИдентификаторПубликации);
			
			Если Данные = Неопределено Тогда
				Данные = Новый Структура;
				Данные.Вставить("НомерПоПорядку",         ПланированиеПоСкладам.Количество() + 1);
				Данные.Вставить("ПредставлениеОбъекта",   ДанныеСтрокиСписка.ПредставлениеОбъектаМаркетплейса);
				Данные.Вставить("Упаковка",               ВыборкаДанных.Упаковка);
				Данные.Вставить("КоэффициентУпаковки",    КоэффициентУпаковки);
				Данные.Вставить("Остаток",                ВыборкаДанных.ВНаличииНаСкладах1С);			// В базовых единицах
				Данные.Вставить("ЗапланироватьКПоставке", ДанныеСтрокиСписка.ЗапланироватьКПоставке);	// В упаковках
				Данные.Вставить("ПоСкладам",              Новый Массив);
			КонецЕсли;
			
			Если Данные.ПоСкладам.Количество() = 0 Тогда
				Зарезервировано = 0;
				
				Для Каждого КлючЗначение Из ПланированиеПоСкладам Цикл
					Если КлючЗначение.Значение.НомерПоПорядку <> Данные.НомерПоПорядку Тогда
						Зарезервировано = Зарезервировано 
											+ Окр(КлючЗначение.Значение.ЗапланироватьКПоставке * КлючЗначение.Значение.КоэффициентУпаковки, 3, РежимОкругления.Окр15как20);
					КонецЕсли;
				КонецЦикла;
				
				Данные.ЗапланироватьКПоставке = Макс(0, Мин(?(Настройки.ДополнительныеСвойства.АнализироватьОтгрузки, ДанныеСтрокиСписка.ПлановаяПотребность, 0) - ДанныеСтрокиСписка.ВПоставке, 
															ДанныеСтрокиСписка.ВНаличииНаСкладах1С - Окр(Зарезервировано / Данные.КоэффициентУпаковки, 3, РежимОкругления.Окр15как20)));
			КонецЕсли;
			
			ДанныеСтрокиСписка.ЗапланироватьКПоставке = Данные.ЗапланироватьКПоставке;
			ДанныеСтрокиСписка.РучноеИзменение        = (Данные.ПоСкладам.Количество() > 0);
			
			ПланированиеПоСкладам.Вставить(ДанныеСтрокиСписка.ИдентификаторПубликации, Данные);
			Настройки.ДополнительныеСвойства.ПланированиеПоСкладам.Вставить(Ключ, ПланированиеПоСкладам);
		КонецЕсли;
	КонецЦикла;

	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(
		Замер, 
		ТаблицаТоваров.Количество() / 100);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьПериодАнализаОтгрузок(Команда)

	Диалог        = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = ПериодАнализаОтгрузок;
	
	Диалог.Показать(Новый ОписаниеОповещения("ВыборПериодаАнализаОтгрузокЗавершение", ЭтотОбъект, Новый Структура("Диалог", Диалог)));
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеОбновленияИнформацииОПродажахТоваров(Команда)

	Префиксы                        = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПрефиксыСервиса();
	РегламентноеЗаданиеПрефикс      = Префиксы.ОбновлениеИнформацииОПродажахТоваров;
	РегламентноеЗаданиеНаименование = ИнтеграцияСМаркетплейсомOzonКлиентСервер.НаименованиеРегламентногоЗадания(РегламентноеЗаданиеПрефикс);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("УчетнаяЗаписьМаркетплейса",        УчетнаяЗаписьТорговойПлощадки);
	ПараметрыОткрытия.Вставить("ИмяМетаданных",                    "ОбновлениеИнформацииОПродажахТоваровЧерезСкладыOzon");
	ПараметрыОткрытия.Вставить("Префикс",                          РегламентноеЗаданиеПрефикс);  
	ПараметрыОткрытия.Вставить("Наименование",                     РегламентноеЗаданиеНаименование);
	ПараметрыОткрытия.Вставить("ОткрыватьПодОграниченнымиПравами", Истина);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("НастроитьРасписаниеОбновленияИнформацииОПродажахТоваровЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.УчетныеЗаписиМаркетплейсов.Форма.РегламентноеЗадание",
		ПараметрыОткрытия,
		ЭтотОбъект,,,,
		ОповещениеОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)

	СменитьСтраницу("_Далее");

КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)

	СменитьСтраницу("_Назад");

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеДляПланирования(Команда)

	Настройки = ПолучитьНастройкиПланированияНаСервере();
	
	Если Настройки.ДополнительныеСвойства.Свойство("РучныеИзменения")
			И Настройки.ДополнительныеСвойства.РучныеИзменения Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗаполнитьДанныеДляПланированияЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОповещениеОЗавершении, 
			НСтр("ru = 'Данные ручного планирования будут заменены на рассчитанные автоматически. Продолжить?'"), 
			РежимДиалогаВопрос.ДаНет, 
			, 
			КодВозвратаДиалога.Да, 
			НСтр("ru = 'Планирование поставок на склады Ozon'"), 
			КодВозвратаДиалога.Нет);
		
	Иначе
		ЗаполнитьДанныеДляПланированияЗавершение(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьСписокСкладовТорговойПлощадки()

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъектаМаркетплейса,
		|	СоответствияОбъектовМаркетплейсов.НаименованиеОбъектаМаркетплейса КАК НаименованиеОбъектаМаркетплейса
		|ИЗ
		|	РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
		|ГДЕ
		|	СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьТорговойПлощадки
		|	И СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Склад)
		|	И СоответствияОбъектовМаркетплейсов.ИспользуетсяДляСхемыРаботыFBO";

	Запрос.УстановитьПараметр("УчетнаяЗаписьТорговойПлощадки", УчетнаяЗаписьТорговойПлощадки);
	
	Элементы.ИдентификаторСкладаТорговойПлощадки.СписокВыбора.Очистить();
	ВыборкаСкладов = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаСкладов.Следующий() Цикл
		Элементы.ИдентификаторСкладаТорговойПлощадки.СписокВыбора.Добавить(
			ВыборкаСкладов.ИдентификаторОбъектаМаркетплейса,
			ВыборкаСкладов.НаименованиеОбъектаМаркетплейса);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюОРегламентномЗадании()

	Префиксы                   = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПрефиксыСервиса();
	РегламентноеЗаданиеПрефикс = Префиксы.ОбновлениеИнформацииОПродажахТоваров;
	РегламентноеЗаданиеКлюч    = РегламентноеЗаданиеПрефикс + Строка(УчетнаяЗаписьТорговойПлощадки.УникальныйИдентификатор());

	УстановитьПривилегированныйРежим(Истина);
	
	Отбор     = Новый Структура("Ключ", РегламентноеЗаданиеКлюч);
	Результат = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	
	Если Результат.Количество() > 0 Тогда
		Если Результат[0].Использование Тогда
			Элементы.РасписаниеОбновленияИнформацииОПродажахТоваровОтключено.Видимость = Ложь;
			Элементы.НастроитьРасписаниеОбновленияИнформацииОПродажахТоваров.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Обновление информации о продажах товаров на складах торговой площадки выполняется: %1'"), 
				Результат[0].Расписание);
			
		Иначе
			Элементы.РасписаниеОбновленияИнформацииОПродажахТоваровОтключено.Видимость = Истина;
			Элементы.НастроитьРасписаниеОбновленияИнформацииОПродажахТоваров.Заголовок =
				НСтр("ru = 'Обновление информации о продажах товаров на складах торговой площадки'");
		КонецЕсли;

	Иначе
		Элементы.РасписаниеОбновленияИнформацииОПродажахТоваровОтключено.Видимость = Истина;
		Элементы.НастроитьРасписаниеОбновленияИнформацииОПродажахТоваров.Заголовок =
			НСтр("ru = 'Обновление информации о продажах товаров на складах торговой площадки'");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыДинамическихСписков()
	
	НастройкиУчетнойЗаписи             = Справочники.УчетныеЗаписиМаркетплейсов.НастройкиУчетнойЗаписи(УчетнаяЗаписьТорговойПлощадки);
	ИспользоватьПартнеровИКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов");
	ИспользоватьСоглашенияСКлиентами   = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	ИспользуютсяДоговорыКонтрагентов   = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами");
	
	Если ИспользоватьСоглашенияСКлиентами Тогда
		УстановитьПривилегированныйРежим(Истина);
		ИспользуютсяДоговорыКонтрагентов = ИспользуютсяДоговорыКонтрагентов
											И ЗначениеЗаполнено(НастройкиУчетнойЗаписи.Соглашение)
												И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкиУчетнойЗаписи.Соглашение, "ИспользуютсяДоговорыКонтрагентов");
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;

	СформированныеДокументы.Параметры.УстановитьЗначениеПараметра("Организация",					    НастройкиУчетнойЗаписи.Организация);
	СформированныеДокументы.Параметры.УстановитьЗначениеПараметра("Партнер",						    НастройкиУчетнойЗаписи.Партнер);
	СформированныеДокументы.Параметры.УстановитьЗначениеПараметра("ИспользоватьПартнеровИКонтрагентов", ИспользоватьПартнеровИКонтрагентов);
	СформированныеДокументы.Параметры.УстановитьЗначениеПараметра("Контрагент",                         НастройкиУчетнойЗаписи.Контрагент);
	СформированныеДокументы.Параметры.УстановитьЗначениеПараметра("ИспользоватьСоглашенияСКлиентами",   ИспользоватьСоглашенияСКлиентами);
	СформированныеДокументы.Параметры.УстановитьЗначениеПараметра("Соглашение",						    НастройкиУчетнойЗаписи.Соглашение);
	СформированныеДокументы.Параметры.УстановитьЗначениеПараметра("ИспользуютсяДоговорыКонтрагентов",   ИспользуютсяДоговорыКонтрагентов);
	СформированныеДокументы.Параметры.УстановитьЗначениеПараметра("Договор",						    НастройкиУчетнойЗаписи.ДоговорПродажиЧерезСкладыТорговойПлощадки);
	
	ДанныеДляПланирования.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("Организация",					      НастройкиУчетнойЗаписи.Организация);
	ДанныеДляПланирования.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("Партнер",						      НастройкиУчетнойЗаписи.Партнер);
	ДанныеДляПланирования.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ИспользоватьПартнеровИКонтрагентов", ИспользоватьПартнеровИКонтрагентов);
	ДанныеДляПланирования.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("Контрагент",                         НастройкиУчетнойЗаписи.Контрагент);
	ДанныеДляПланирования.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ИспользоватьСоглашенияСКлиентами",   ИспользоватьСоглашенияСКлиентами);
	ДанныеДляПланирования.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("Соглашение",						  НастройкиУчетнойЗаписи.Соглашение);
	ДанныеДляПланирования.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ИспользуютсяДоговорыКонтрагентов",   ИспользуютсяДоговорыКонтрагентов);
	ДанныеДляПланирования.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("Договор",						      НастройкиУчетнойЗаписи.ДоговорПродажиЧерезСкладыТорговойПлощадки);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДатуАктуальностиДанныхОПродажахТоваров()
	
	ДатаАктуальностиДанныхОПродажахТоваров = Дата(1, 1, 1);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(МАКСИМУМ(ТоварыНаСкладахТорговыхПлощадокЗаДеньСрезПоследних.ДатаОбновленияОстатков), ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОбновленияОстатков,
		|	ЕСТЬNULL(МАКСИМУМ(ТоварыНаСкладахТорговыхПлощадокЗаДеньСрезПоследних.ДатаОбновленияОборотов), ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОбновленияОборотов
		|ИЗ
		|	РегистрСведений.ТоварыНаСкладахТорговыхПлощадокЗаДень.СрезПоследних(, УчетнаяЗаписьТорговойПлощадки = &УчетнаяЗаписьТорговойПлощадки) КАК ТоварыНаСкладахТорговыхПлощадокЗаДеньСрезПоследних";
	
	Запрос.УстановитьПараметр("УчетнаяЗаписьТорговойПлощадки", УчетнаяЗаписьТорговойПлощадки);
	
	ВыборкаДанных = Запрос.Выполнить().Выбрать();
	Если ВыборкаДанных.Следующий() Тогда
		ДатаАктуальностиДанныхОПродажахТоваров = Макс(ВыборкаДанных.ДатаОбновленияОстатков, ВыборкаДанных.ДатаОбновленияОборотов);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// Упаковка
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДанныеДляПланированияУпаковка.Имя);
	
	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДанныеДляПланирования.ИспользоватьУпаковки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст",      Новый ПолеКомпоновкиДанных("ДанныеДляПланирования.ЕдиницаИзмерения"));
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДанныеДляПланированияУпаковка.Имя);
	
	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДанныеДляПланирования.ИспользоватьУпаковки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДанныеДляПланирования.Упаковка");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
			
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст",      Новый ПолеКомпоновкиДанных("ДанныеДляПланирования.ЕдиницаИзмерения"));
	
	// Сформированные документы
	
	// Условное оформление динамического списка
	СформированныеДокументыУсловноеОформление = СформированныеДокументы.КомпоновщикНастроек.Настройки.УсловноеОформление;
	СформированныеДокументыУсловноеОформление.Элементы.Очистить();
	
	// Документ имеет высокий приоритет
	Элемент               = СформированныеДокументыУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Документ имеет высокий приоритет'");
	
	ОтборЭлемента                = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Приоритет");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.Приоритеты.ПолучитьВысшийПриоритет();
	
	ОтборЭлемента                = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ВысокийПриоритетДокумента);
	
	// Документ имеет низкий приоритет
	Элемент               = СформированныеДокументыУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Документ имеет низкий приоритет'");
	
	ОтборЭлемента                = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Приоритет");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.Приоритеты.ПолучитьНизшийПриоритет();
	
	ОтборЭлемента                = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.НизкийПриоритетДокумента);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента") Тогда
		// Выделение цветом состояния "Закрыт"
		Элемент               = СформированныеДокументыУсловноеОформление.Элементы.Добавить();
		Элемент.Представление = НСтр("ru = 'Выделение цветом состояния ""Закрыт""'");
		
		ОтборЭлемента                = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Состояние");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Перечисления.СостоянияЗаказовКлиентов.Закрыт;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗакрытыйДокумент);
	КонецЕсли;
	
	// Выделение цветом просроченного заказа
	Элемент               = СформированныеДокументыУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Выделение цветом просроченного заказа'");
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("Состояние");
	
	ОтборЭлемента                = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Просрочен");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныйДокумент);
	
	// Дата
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "СформированныеДокументы.Дата", Элементы.СформированныеДокументыДата.Имя);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПодчиненныеЭлементыФормы(Знач Элемент)
	
	Результат = Новый Массив;
	
	Для Каждого ЭлементКоллекции Из Элемент.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ЭлементКоллекции) = Тип("ГруппаФормы") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, ПолучитьПодчиненныеЭлементыФормы(ЭлементКоллекции));
		Иначе
			Результат.Добавить(ЭлементКоллекции);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьДоступность(Знач Элемент = Неопределено)

	Если Элемент = Неопределено 
			Или Элемент = "СтраницыПланирования" Тогда
		Если Элементы.СтраницыПланирования.ТекущаяСтраница = Элементы.СтраницаНастройки Тогда
			Элементы.ФормаДалее.Видимость         = Истина;
			Элементы.ФормаДалее.КнопкаПоУмолчанию = Истина;
			Элементы.ФормаДалее.Заголовок         = НСтр("ru = 'Перейти к планированию поставок >>'");
			Элементы.ФормаНазад.Видимость         = Ложь;
			
		ИначеЕсли Элементы.СтраницыПланирования.ТекущаяСтраница = Элементы.СтраницаПланирование Тогда
			Элементы.ФормаДалее.Видимость         = Истина;
			Элементы.ФормаДалее.КнопкаПоУмолчанию = Истина;
			Элементы.ФормаДалее.Заголовок         = НСтр("ru = 'Создать заявки на поставку >>'");
			Элементы.ФормаНазад.Видимость         = Истина;
			Элементы.ФормаНазад.Заголовок         = НСтр("ru = '<< Вернуться к настройкам'");
			
		ИначеЕсли Элементы.СтраницыПланирования.ТекущаяСтраница = Элементы.СтраницаРезультат Тогда
			Элементы.ФормаДалее.Видимость         = Ложь;
			Элементы.ФормаНазад.Видимость         = Истина;
			Элементы.ФормаНазад.КнопкаПоУмолчанию = Истина;
			Элементы.ФормаНазад.Заголовок         = НСтр("ru = '<< Вернуться к планированию поставок'");
		КонецЕсли;
	КонецЕсли;
	
	Если Элемент = Неопределено 
			Или Элемент = "ВидПоставки" Тогда
		Элементы.ИдентификаторСкладаТорговойПлощадки.Доступность    = (ВидПоставки = 1);
		Элементы.ИдентификаторСкладаТорговойПлощадки.ПодсказкаВвода = ?(ВидПоставки = 0, 
			НСтр("ru = '<Не указывается>'"),
			НСтр("ru = '<Выберите склад>'"));
	КонецЕсли;
		
	Если Элемент = Неопределено 
			Или Элемент = "АнализироватьОтгрузки" Тогда
		Элементы.ГруппаПериодАнализаОтгрузок.Видимость									 = АнализироватьОтгрузки;
		Элементы.ГруппаРегламентноеЗаданиеОбновленияИнформацииОПродажахТоваров.Видимость = АнализироватьОтгрузки;
		Элементы.ГруппаАктуальностьДанныхОПродажахТоваров1.Видимость					 = АнализироватьОтгрузки И (ДатаАктуальностиДанныхОПродажахТоваров <> Дата(1, 1, 1));
		Элементы.ГруппаОбновлятьИнформациюОПродажахТоваровПриЗаполненииДанных.Видимость	 = АнализироватьОтгрузки;
		Элементы.ГруппаДнейПланирования.Видимость										 = АнализироватьОтгрузки;

		Элементы.ГруппаАктуальностьДанныхОПродажахТоваров2.Видимость					 = АнализироватьОтгрузки И (ДатаАктуальностиДанныхОПродажахТоваров <> Дата(1, 1, 1));
		Элементы.ДанныеДляПланированияГруппаЗаказыСоСкладовТорговойПлощадки.Видимость    = АнализироватьОтгрузки;
		Элементы.ДанныеДляПланированияЗапасДней.Видимость                                = АнализироватьОтгрузки;
		Элементы.ДанныеДляПланированияПлановаяПотребность.Видимость                      = АнализироватьОтгрузки;
	КонецЕсли;
		
	Если Элемент = "ДатаАктуальностиДанныхОПродажахТоваров" Тогда
		Элементы.ГруппаАктуальностьДанныхОПродажахТоваров1.Видимость = АнализироватьОтгрузки И (ДатаАктуальностиДанныхОПродажахТоваров <> Дата(1, 1, 1));
		Элементы.ГруппаАктуальностьДанныхОПродажахТоваров2.Видимость = АнализироватьОтгрузки И (ДатаАктуальностиДанныхОПродажахТоваров <> Дата(1, 1, 1));
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Функция СоответствиеПереключенияСтраниц()

	СоответствиеПереключенияСтраниц = Новый Соответствие;
	СоответствиеПереключенияСтраниц.Вставить("СтраницаНастройки_Далее",    "СтраницаПланирование");
	СоответствиеПереключенияСтраниц.Вставить("СтраницаПланирование_Далее", "СтраницаРезультат");
	СоответствиеПереключенияСтраниц.Вставить("СтраницаПланирование_Назад", "СтраницаНастройки");
	СоответствиеПереключенияСтраниц.Вставить("СтраницаРезультат_Назад",    "СтраницаПланирование");

	Возврат СоответствиеПереключенияСтраниц;

КонецФункции

&НаКлиенте
Процедура СменитьСтраницу(Постфикс)

	СоответствиеПереключенияСтраниц = СоответствиеПереключенияСтраниц();
	ИмяСледующейСтраницы            = СоответствиеПереключенияСтраниц.Получить(Элементы.СтраницыПланирования.ТекущаяСтраница.Имя + Постфикс);
	
	Если ЗначениеЗаполнено(ИмяСледующейСтраницы) Тогда
		Если ИмяСледующейСтраницы = "СтраницаРезультат" Тогда
			ОповещениеОЗавершении = Новый ОписаниеОповещения("СтраницыПланированияПриСменеСтраницыЗавершение", ЭтотОбъект, "СтраницаРезультат");
			ПоказатьВопрос(ОповещениеОЗавершении, 
				НСтр("ru = 'Создать заявки на поставку по данным планирования?'"), 
				РежимДиалогаВопрос.ДаНетОтмена, 
				, 
				КодВозвратаДиалога.Да, 
				НСтр("ru = 'Планирование поставок на склады Ozon'"), 
				КодВозвратаДиалога.Отмена);
				
			Возврат;
		КонецЕсли;
		
		Элементы.СтраницыПланирования.ТекущаяСтраница = Элементы[ИмяСледующейСтраницы];
		СтраницыПланированияПослеСменыСтраницы(Элементы.СтраницыПланирования.ТекущаяСтраница);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтраницыПланированияПослеСменыСтраницы(ТекущаяСтраница)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Обработка.УправлениеПродажамиНаOzon.ПланированиеПоставокНаСкладыТорговойПлощадки.ПриСменеСтраницы");

	Если ТекущаяСтраница = Элементы.СтраницаПланирование Тогда
		Настройки = ПолучитьНастройкиПланированияНаСервере();
		
		Если Настройки.ДополнительныеСвойства.Свойство("РучныеИзменения")
				И Настройки.ДополнительныеСвойства.РучныеИзменения Тогда
			Если (Настройки.ДополнительныеСвойства.АнализироватьОтгрузки <> АнализироватьОтгрузки
					Или Настройки.ДополнительныеСвойства.НачалоПериодаАнализаОтгрузок <> ПериодАнализаОтгрузок.ДатаНачала
					Или Настройки.ДополнительныеСвойства.ОкончаниеПериодаАнализаОтгрузок <> ПериодАнализаОтгрузок.ДатаОкончания
					Или Настройки.ДополнительныеСвойства.КоличествоДнейПланирования <> КоличествоДнейПланирования) Тогда
				ОповещениеОЗавершении = Новый ОписаниеОповещения("СтраницыПланированияПриСменеСтраницыЗавершение", ЭтотОбъект, "СтраницаПланирования");
				ПоказатьВопрос(ОповещениеОЗавершении, 
					НСтр("ru = 'При изменении настроек данные планирования рекомендуется заменить на рассчитанные автоматически. Выполнить сброс результатов ручного планирования?'"), 
					РежимДиалогаВопрос.ДаНет, 
					, 
					КодВозвратаДиалога.Да, 
					НСтр("ru = 'Планирование поставок на склады Ozon'"), 
					КодВозвратаДиалога.Нет);
					
			Иначе
				СтраницыПланированияПриСменеСтраницыЗавершение(КодВозвратаДиалога.Нет, "СтраницаПланирование");
			КонецЕсли;
			
		Иначе
			СтраницыПланированияПриСменеСтраницыЗавершение(КодВозвратаДиалога.Да, "СтраницаПланирование");
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимостьДоступность("СтраницыПланирования");
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПланированияПриСменеСтраницыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если ДополнительныеПараметры = "СтраницаПланирование" Тогда
		ОчиститьДанныеДляПланирования = (РезультатВопроса = КодВозвратаДиалога.Да);
		ЗаполнитьДанныеДляПланированияНаКлиенте(ОчиститьДанныеДляПланирования);
		
	ИначеЕсли ДополнительныеПараметры = "СтраницаРезультат" Тогда
		Если РезультатВопроса <> КодВозвратаДиалога.Отмена Тогда
			Элементы.СтраницыПланирования.ТекущаяСтраница = Элементы.СтраницаРезультат;
			СтраницыПланированияПослеСменыСтраницы(Элементы.СтраницыПланирования.ТекущаяСтраница);
		КонецЕсли;
		
		Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
			ОчиститьСообщения();
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Планирование поставок на склады Ozon'"),
				, 
				НСтр("ru = 'Создание заявок на поставку на склады Ozon...'"),
				БиблиотекаКартинок.ЛоготипOzon1);
				
			ОповещениеОЗавершении = Новый ОписаниеОповещения("СоздатьЗаявкиНаПоставкуЗавершениеФоновогоЗадания", ЭтотОбъект);
			ДлительнаяОперация    = СоздатьЗаявкиНаПоставкуНаСервере();
			
			Если ДлительнаяОперация.Статус = "Выполнено" Тогда
				ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, ДлительнаяОперация);
				
			Иначе
				ПараметрыОжидания 								   = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
				ПараметрыОжидания.ВыводитьОкноОжидания 			   = Истина;
				ПараметрыОжидания.ТекстСообщения                   = НСтр("ru = 'Создание заявок на поставку на склады Ozon...'");
				ПараметрыОжидания.ОповещениеПользователя.Показать  = Истина;
				ПараметрыОжидания.ОповещениеПользователя.Текст 	   = НСтр("ru = 'Планирование поставок на склады Ozon'");
				ПараметрыОжидания.ОповещениеПользователя.Пояснение = НСтр("ru = 'Завершено создание заявок на поставку на склады Ozon.'");
				ПараметрыОжидания.ОповещениеПользователя.Картинка  = БиблиотекаКартинок.ЛоготипOzon2;
				
				ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыборКатегорийТорговойПлощадкиЗавершение(РезультатЗакрытия, ДополнительныеПараметры = Неопределено) Экспорт

	Если РезультатЗакрытия <> Неопределено Тогда
		КатегорииТорговойПлощадки = РезультатЗакрытия;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыборПериодаАнализаОтгрузокЗавершение(Период, ДополнительныеПараметры) Экспорт
    
    Если Период <> Неопределено Тогда 
        ПериодАнализаОтгрузок = ДополнительныеПараметры.Диалог.Период;
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеОбновленияИнформацииОПродажахТоваровЗавершение(Результат, ДополнительныеПараметры) Экспорт

	ОбновитьИнформациюОРегламентномЗадании();

КонецПроцедуры

&НаСервере
Функция ОбновитьИнформациюОПродажахТоваровЧерезТорговуюПлощадкуНаСервере()
	
	ПараметрыВыполнения 							 = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение            = 0;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания  = НСтр("ru = 'Ozon. Обновление информации о продажах товаров через торговую площадку.'");
	ПараметрыВыполнения.ЗапуститьВФоне               = Истина;
	ПараметрыВыполнения.ПрерватьВыполнениеЕслиОшибка = Истина;

	ИмяМетода = "ИнтеграцияСМаркетплейсомOzonСервер.ОбновитьИнформациюОПродажахТоваровЧерезТорговуюПлощадку";

	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, 
		ИмяМетода, 
		УчетнаяЗаписьТорговойПлощадки,
		Неопределено, 
		Неопределено);
	
КонецФункции

&НаКлиенте
Процедура ОбновитьИнформациюОПродажахТоваровЧерезТорговуюПлощадкуЗавершениеФоновогоЗадания(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.Статус = "Ошибка" Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки);
		
		ИначеЕсли Результат.Статус = "Выполнено" 
		 		 	И Результат.Свойство("АдресРезультата") Тогда
			Ошибка = ИнтеграцияСМаркетплейсомOzonВызовСервера.ПолучитьРезультатВыполненияФоновогоЗадания(Результат.АдресРезультата);
			
			Если Не ПустаяСтрока(Ошибка.КодОшибки) Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(Ошибка.ОписаниеОшибки);
			Иначе
				Оповестить("ИнтеграцияСМаркетплейсомOzonСервер.ОбновитьДанные", 
					УчетнаяЗаписьТорговойПлощадки, 
					"Обработка.УправлениеПродажамиНаOzon.ПланированиеПоставокНаСкладыТорговойПлощадки.ОбновитьИнформациюОПродажахТоваровЧерезТорговуюПлощадку");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Элементы.ГруппаОбновлениеДанныхОПродажахТоваров.Видимость    = Ложь;
	Элементы.ГруппаАктуальностьДанныхОПродажахТоваров2.Видимость = АнализироватьОтгрузки И (ДатаАктуальностиДанныхОПродажахТоваров <> Дата(1, 1, 1));

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКлючПланирования(Номенклатура, Характеристика)
	
	Возврат Строка(Номенклатура.УникальныйИдентификатор()) + "_" + Строка(Характеристика.УникальныйИдентификатор());
	
КонецФункции

&НаСервере
Функция ПолучитьНастройкиПланированияНаСервере()
	
	Возврат ДанныеДляПланирования.КомпоновщикНастроек.Настройки;
	
КонецФункции
	
&НаСервере
Процедура ОчиститьДанныеДляПланированияНаСервере()
	
	НаименованиеСкладаТорговойПлощадки = Элементы.ИдентификаторСкладаТорговойПлощадки.СписокВыбора.НайтиПоЗначению(ИдентификаторСкладаТорговойПлощадки);
	
	ДанныеДляПланирования.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ИспользоватьХарактеристикиНоменклатуры", ИспользоватьХарактеристикиНоменклатуры);
	ДанныеДляПланирования.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ИспользоватьУпаковкиНоменклатуры",       ИспользоватьУпаковкиНоменклатуры);
	ДанныеДляПланирования.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("УчетнаяЗаписьТорговойПлощадки",          УчетнаяЗаписьТорговойПлощадки);
	ДанныеДляПланирования.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ИдентификаторСкладаТорговойПлощадки",    ИдентификаторСкладаТорговойПлощадки);
	ДанныеДляПланирования.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("НаименованиеСкладаТорговойПлощадки",     ?(НаименованиеСкладаТорговойПлощадки = Неопределено, "", НаименованиеСкладаТорговойПлощадки.Представление));
	ДанныеДляПланирования.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ДоступныеСклады1С",                      ДоступныеСклады1С);
	ДанныеДляПланирования.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("КатегорииТорговойПлощадки",              КатегорииТорговойПлощадки);
	ДанныеДляПланирования.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("АнализироватьОтгрузки",                  АнализироватьОтгрузки);
	ДанныеДляПланирования.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("НачалоПериодаАнализаОтгрузок",           ПериодАнализаОтгрузок.ДатаНачала);
	ДанныеДляПланирования.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ОкончаниеПериодаАнализаОтгрузок",        ПериодАнализаОтгрузок.ДатаОкончания);
	ДанныеДляПланирования.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("КоличествоДнейПланирования",             КоличествоДнейПланирования);
	ДанныеДляПланирования.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ПланированиеПоСкладам",                  Новый Соответствие);
	ДанныеДляПланирования.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("РучныеИзменения",                        Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеДляПланированияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОчиститьДанныеДляПланирования = Истина;
		ЗаполнитьДанныеДляПланированияНаКлиенте(ОчиститьДанныеДляПланирования);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеДляПланированияНаКлиенте(ОчиститьДанныеДляПланирования = Ложь)
	
	ЗаполнитьДанныеДляПланированияНаСервере(ОчиститьДанныеДляПланирования);
	
	Элементы.ДанныеДляПланированияГруппаОстаткиНаСкладахТорговойПлощадки.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Остатки на складах Ozon на %1'"),
			ДатаАктуальностиДанныхОПродажахТоваров);
			
	Если АнализироватьОтгрузки И ОбновлятьИнформациюОПродажахТоваровПриЗаполненииДанных Тогда
		Элементы.ГруппаАктуальностьДанныхОПродажахТоваров2.Видимость = Ложь;
		Элементы.ГруппаОбновлениеДанныхОПродажахТоваров.Видимость    = Истина;
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбновитьИнформациюОПродажахТоваровЧерезТорговуюПлощадкуЗавершениеФоновогоЗадания", ЭтотОбъект);
		ДлительнаяОперация    = ОбновитьИнформациюОПродажахТоваровЧерезТорговуюПлощадкуНаСервере();
		
		Если ДлительнаяОперация.Статус = "Выполнено" Тогда
			ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, ДлительнаяОперация);
			
		Иначе
			ПараметрыОжидания 					   = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
			ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
			
			ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
		КонецЕсли;
		
	Иначе
		Элементы.ГруппаАктуальностьДанныхОПродажахТоваров2.Видимость = АнализироватьОтгрузки И (ДатаАктуальностиДанныхОПродажахТоваров <> Дата(1, 1, 1));
		Элементы.ГруппаОбновлениеДанныхОПродажахТоваров.Видимость    = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеДляПланированияНаСервере(ОчиститьДанныеДляПланирования = Ложь)
	
	Если ОчиститьДанныеДляПланирования Тогда
		ОчиститьДанныеДляПланированияНаСервере();
	КонецЕсли;
	
	ДанныеДляПланирования.Параметры.УстановитьЗначениеПараметра("УчетнаяЗаписьТорговойПлощадки",    УчетнаяЗаписьТорговойПлощадки);
	ДанныеДляПланирования.Параметры.УстановитьЗначениеПараметра("КатегорииТорговойПлощадки",        КатегорииТорговойПлощадки);
	ДанныеДляПланирования.Параметры.УстановитьЗначениеПараметра("ПоВсемКатегориямТорговойПлощадки", (КатегорииТорговойПлощадки.Количество() = 0));
	
	Элементы.ДанныеДляПланирования.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеДляПланированияИзменить(Элемент, Поле = Неопределено)

	ТекущиеДанные = Элемент.ТекущиеДанные;	
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле = Неопределено Тогда
		Поле = Элементы.ДанныеДляПланирования.ТекущийЭлемент;
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторПубликации) Тогда
		Ключ				  = ПолучитьКлючПланирования(ТекущиеДанные.Номенклатура, ТекущиеДанные.Характеристика);
		Настройки             = ПолучитьНастройкиПланированияНаСервере();
		ПланированиеПоСкладам = Настройки.ДополнительныеСвойства.ПланированиеПоСкладам.Получить(Ключ);

		ПараметрыОткрытия = Новый Структура;
		Для Каждого КлючЗначение Из Настройки.ДополнительныеСвойства Цикл
			ПараметрыОткрытия.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
		
		ПараметрыОткрытия.Вставить("ИдентификаторПубликации",          ТекущиеДанные.ИдентификаторПубликации);
		ПараметрыОткрытия.Вставить("ИдентификаторОбъектаМаркетплейса", ТекущиеДанные.ИдентификаторОбъектаМаркетплейса);
		ПараметрыОткрытия.Вставить("ПредставлениеОбъектаМаркетплейса", ТекущиеДанные.ПредставлениеОбъектаМаркетплейса);
		ПараметрыОткрытия.Вставить("Номенклатура",                     ТекущиеДанные.Номенклатура);
		ПараметрыОткрытия.Вставить("Характеристика",                   ТекущиеДанные.Характеристика);
		ПараметрыОткрытия.Вставить("Упаковка",                         ТекущиеДанные.Упаковка);
		ПараметрыОткрытия.Вставить("ПлановаяПотребность",              ТекущиеДанные.ПлановаяПотребность);
		ПараметрыОткрытия.Вставить("ПланированиеПоСкладам",            ПланированиеПоСкладам);
		
		Если Поле.Имя = "ДанныеДляПланированияВНаличииНаСкладах1С"
				Или Поле.Имя = "ДанныеДляПланированияЗапланироватьКПоставке" Тогда
			ПараметрыОткрытия.Вставить("ДанныеТорговойПлощадки", Ложь);
		Иначе                               
			ПараметрыОткрытия.Вставить("ДанныеТорговойПлощадки", Истина);
		КонецЕсли;
			
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ДанныеДляПланированияВыборЗавершение", ЭтотОбъект);
		ОткрытьФорму("Обработка.УправлениеПродажамиНаOzon.Форма.ПланированиеПоставкиДляТовара",
			ПараметрыОткрытия,
			ЭтотОбъект,,,,
			ОповещениеОЗакрытии,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеДляПланированияВыборЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		ДанныеДляПланированияОбновитьНаСервере(РезультатЗакрытия);
		Элементы.ДанныеДляПланирования.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДанныеДляПланированияОбновитьНаСервере(РезультатЗакрытия)
	
	Ключ                  = ПолучитьКлючПланирования(РезультатЗакрытия.Номенклатура, РезультатЗакрытия.Характеристика);
	ПланированиеПоСкладам = ДанныеДляПланирования.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.ПланированиеПоСкладам.Получить(Ключ);
	
	Если ПланированиеПоСкладам = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Данные = ПланированиеПоСкладам.Получить(РезультатЗакрытия.ИдентификаторПубликации);
	
	Если Данные = Неопределено Тогда
		Данные = Новый Структура;
		Данные.Вставить("НомерПоПорядку",       ПланированиеПоСкладам.Количество() + 1);
		Данные.Вставить("ПредставлениеОбъекта", РезультатЗакрытия.ПредставлениеОбъектаМаркетплейса);
		Данные.Вставить("Упаковка",             РезультатЗакрытия.Упаковка);
		Данные.Вставить("КоэффициентУпаковки",  РезультатЗакрытия.КоэффициентУпаковки);
	КонецЕсли;
	
	Данные.Вставить("Остаток",                РезультатЗакрытия.ВНаличииНаСкладах1С);				// В базовых единицах
	Данные.Вставить("ЗапланироватьКПоставке", РезультатЗакрытия.ЗапланироватьКПоставке);			// В упаковках
	Данные.Вставить("ПоСкладам",              РезультатЗакрытия.ПоСкладам);
	
	ПланированиеПоСкладам.Вставить(РезультатЗакрытия.ИдентификаторПубликации, Данные);
	ДанныеДляПланирования.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.ПланированиеПоСкладам.Вставить(Ключ, ПланированиеПоСкладам);
	
	Если Данные.ПоСкладам.Количество() > 0 Тогда
		ДанныеДляПланирования.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.РучныеИзменения = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СоздатьЗаявкиНаПоставкуНаСервере()
	
	ПараметрыВыполнения 							 = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение            = 0;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания  = НСтр("ru = 'Ozon. Создание заявок на поставку.'");
	ПараметрыВыполнения.ЗапуститьВФоне               = Истина;
	ПараметрыВыполнения.ПрерватьВыполнениеЕслиОшибка = Истина;

	ИмяМетода = "Обработки.УправлениеПродажамиНаOzon.СоздатьЗаявкиНаПоставку";

	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, 
		ИмяМетода, 
		УчетнаяЗаписьТорговойПлощадки,
		ДанныеДляПланирования.КомпоновщикНастроек.Настройки.ДополнительныеСвойства);
	
КонецФункции

&НаКлиенте
Процедура СоздатьЗаявкиНаПоставкуЗавершениеФоновогоЗадания(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.Статус = "Ошибка" Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки);
		
		ИначеЕсли Результат.Статус = "Выполнено" 
		 		 	И Результат.Свойство("АдресРезультата") Тогда
			Ошибка = ИнтеграцияСМаркетплейсомOzonВызовСервера.ПолучитьРезультатВыполненияФоновогоЗадания(Результат.АдресРезультата);
			
			Если Не ПустаяСтрока(Ошибка.КодОшибки) Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(Ошибка.ОписаниеОшибки);
			Иначе
				ОчиститьДанныеДляПланированияНаСервере();
				
				Оповестить("УправлениеПродажамиНаOzon.ПланированиеПоставокНаСкладыТорговойПлощадки.СоздатьЗаявкиНаПоставку", 
					УчетнаяЗаписьТорговойПлощадки, 
					"Обработка.УправлениеПродажамиНаOzon.ПланированиеПоставокНаСкладыТорговойПлощадки.СоздатьЗаявкиНаПоставку");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
