
#Область ОбработчикиСобытийФормы 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УчетнаяЗапись           = Параметры.УчетнаяЗапись;
	ЭтоFBO                  = Параметры.ЭтоFBO;
	ИдентификаторЗаказа     = Параметры.ИдентификаторЗаказа;
	НомерЗаказа             = Параметры.НомерЗаказа;
	КомментарийКЗаказу      = Параметры.КомментарийКЗаказу;
	ДатаСозданияОтправления = Параметры.ДатаСозданияОтправления;
	НомерОтправления        = Параметры.НомерОтправления;
	СтатусОтправления       = Параметры.СтатусОтправления;
	ДатаСборки              = Параметры.ДатаСборки;
	ДатаПередачиВДоставку   = Параметры.ДатаПередачиВДоставку;
	СпособДоставки          = Параметры.СпособДоставки;
	ТипДоставки             = Параметры.ТипДоставки;
	СпособОплаты            = Параметры.СпособОплаты;
	ПричинаОтмены           = Параметры.ПричинаОтмены;
	НаименованиеСклада      = Параметры.НаименованиеСклада;
	ТрекНомерОтправления    = Параметры.ТрекНомерОтправления;
	ДокументЗаказа          = Параметры.ДокументЗаказа;
	ДокументОтгрузки        = Параметры.ДокументОтгрузки;
	
	ДанныеОГеографииДоставки = Новый Массив;
	Если ЗначениеЗаполнено(Параметры.ГородДоставки) Тогда
		ДанныеОГеографииДоставки.Добавить(Параметры.ГородДоставки);
	КонецЕсли;
	Если ЗначениеЗаполнено(Параметры.РегионДоставки) Тогда
		ДанныеОГеографииДоставки.Добавить(Параметры.РегионДоставки);
	КонецЕсли;
	ГеографияДоставки = СтрСоединить(ДанныеОГеографииДоставки, ", ");
	
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Сведения об отправлении <%1> по заказу <%2>'"),
		НомерОтправления,
		НомерЗаказа);
	
	Товары = ПолучитьИзВременногоХранилища(Параметры.АдресСодержимогоЗаказа);
	УдалитьИзВременногоХранилища(Параметры.АдресСодержимогоЗаказа);
	ЗначениеВРеквизитФормы(Товары, "СписокТоваровВОтправлении");
	
	ОбновитьТекстДокументыНаОсновании();
	
	Элементы.ГруппаРеквизитыFBO.Видимость    = ЭтоFBO;
	Элементы.ГруппаРеквизитыFBS.Видимость    = Не ЭтоFBO;
	Элементы.ГруппаДокументы.Видимость       = Не ЭтоFBO;
	Элементы.ГруппаДанныеОЗаказе.Видимость   = Не ЭтоFBO;
	Элементы.ГруппаКоманднаяПанель.Видимость = Не ЭтоFBO;
	
	Если Не ЭтоFBO Тогда
		Если СтатусОтправления = Перечисления.СтатусыЗаказовТорговыхПлощадок.ОжидаетСборки
				Или СтатусОтправления = Перечисления.СтатусыЗаказовТорговыхПлощадок.ГотовКОтгрузке Тогда
			Элементы.ДатаСборки.Видимость            = Истина;
			Элементы.ДатаПередачиВДоставку.Видимость = Ложь;
			Элементы.ПричинаОтмены.Видимость         = Ложь;
			Элементы.ТрекНомерОтправления.Видимость  = Ложь;
		ИначеЕсли СтатусОтправления = Перечисления.СтатусыЗаказовТорговыхПлощадок.Отменен Тогда
			Элементы.ДатаСборки.Видимость            = Ложь;
			Элементы.ДатаПередачиВДоставку.Видимость = Ложь;
			Элементы.ПричинаОтмены.Видимость         = Истина;
			Элементы.ТрекНомерОтправления.Видимость  = Ложь;
		Иначе
			Элементы.ДатаСборки.Видимость            = Ложь;
			Элементы.ДатаПередачиВДоставку.Видимость = Истина;
			Элементы.ПричинаОтмены.Видимость         = Ложь;
			Элементы.ТрекНомерОтправления.Видимость  = Истина;
		КонецЕсли;
		Элементы.ПечатьЭтикеток.Видимость = ЗначениеЗаполнено(ДокументЗаказа)
			И СтатусОтправления = Перечисления.СтатусыЗаказовТорговыхПлощадок.ГотовКОтгрузке;
	КонецЕсли;
	
	УправлениеВидимостьюДоступностью();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если (ИмяСобытия = "ВыполненаЗагрузкаЗаказовТорговойПлощадки"
				Или ИмяСобытия = "ВыполненаОтменаСборкиЗаказовНаТорговойПлощадке"
				Или ИмяСобытия = "ВыполненоПодтверждениеСборкиЗаказовНаТорговойПлощадке")
			И Не ЭтоFBO
			И Параметр = УчетнаяЗапись Тогда
		ОпределитьДокументыFBS();
		ОбновитьТекстДокументыНаОсновании();
		
	ИначеЕсли (ИмяСобытия = "МП_ОбновлениеСведенийПоЗаказамИОтправлениям"
					Или ИмяСобытия = "Запись_ЗаказКлиента"
					Или ИмяСобытия = "Запись_РеализацияТоваровУслуг"
					Или ИмяСобытия = "Запись_ПередачаТоваровХранителю")
				И Не ЭтоFBO Тогда
		ОпределитьДокументыFBS();
		ОбновитьТекстДокументыНаОсновании();
		
	ИначеЕсли ИмяСобытия = "Запись_НаборКонстант"
				И (Источник = "ИспользоватьЗаказыКлиентов"
					Или Источник = "ИспользоватьРасширенныеВозможностиЗаказаКлиента") Тогда
		УправлениеВидимостьюДоступностью();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТекстДокументыНаОснованииОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьЗаказ" Тогда
		ПоказатьЗначение(Неопределено, ДокументЗаказа);
	
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьДокументОтгрузки" Тогда
		ПоказатьЗначение(Неопределено, ДокументОтгрузки);
	
	ИначеЕсли СтрНайти(НавигационнаяСсылкаФорматированнойСтроки, "ОткрытьДокументОтгрузки") > 0 Тогда
		Индекс = Число(СтрЗаменить(НавигационнаяСсылкаФорматированнойСтроки, "ОткрытьДокументОтгрузки", ""));
		ПоказатьЗначение(Неопределено, ДокументОтгрузки[Индекс].Значение);
	
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ЗаполнитьИРаспределить" Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("УчетнаяЗапись", УчетнаяЗапись);
		ПараметрыФормы.Вставить("Заказ",         ДокументЗаказа);
		ПараметрыФормы.Вставить("НомерЗаказа",   НомерЗаказа);
		
		ОткрытьФорму(
			"РегистрСведений.ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.Форма.ЗаполнениеДанныхЭкземпляров",
			ПараметрыФормы,
			ЭтотОбъект,
			ДокументЗаказа);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументЗаказаПриИзменении(Элемент)
	
	ОбновитьТекстДокументыНаОсновании();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОтгрузкиПриИзменении(Элемент)
	
	ОбновитьТекстДокументыНаОсновании();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПечатьЭтикеток(Команда)
	
	ОбъектыПечати = Новый Массив;
	Если ЗначениеЗаполнено(ДокументЗаказа)
			И СтатусОтправления = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовТорговыхПлощадок.ГотовКОтгрузке") Тогда
		ОбъектыПечати.Добавить(ДокументЗаказа);
	КонецЕсли;
	
	Если ОбъектыПечати.Количество() > 0 Тогда
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ЭтоЗаказКлиента", ЗначениеЗаполнено(ДокументЗаказа));
		ПараметрыОткрытия.Вставить("ЭтоFBO",          ЭтоFBO);
		ПараметрыОткрытия.Вставить("Объекты",         ОбъектыПечати);
		
		ОткрытьФорму("Обработка.УправлениеПродажамиНаOzon.Форма.ПечатьЭтикеток",
			ПараметрыОткрытия, 
			ЭтотОбъект);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Для текущего заказа печать этикеток не предусмотрена.'"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УправлениеВидимостьюДоступностью()
	
	Если ЭтоFBO Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияФункциональныхОпций = ИнтеграцияСМаркетплейсамиСервер.ПолучитьФункциональныеОпции(Неопределено);
	ДоступностьКоманд           = ЗначенияФункциональныхОпций.ИспользоватьЗаказыКлиентов
									И ЗначенияФункциональныхОпций.ИспользоватьРасширенныеВозможностиЗаказаКлиента;
	
	Элементы.ЗагрузитьЗаказ.Доступность        = ДоступностьКоманд;
	Элементы.ГруппаКоманднаяПанель.Доступность = ДоступностьКоманд;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТекстДокументыНаОсновании()
	
	Если ЭтоFBO Тогда
		Возврат;
	КонецЕсли;
	
	ТекстыПоляДокументыНаОсновании.Очистить();
	
	// Заказ
	ЕстьПравоИнтерактивногоДобавления = ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.ЗаказКлиента);
	
	ЕстьЗаказ            = ЗначениеЗаполнено(ДокументЗаказа);
	ЕстьДокументОтгрузки = ЗначениеЗаполнено(ДокументОтгрузки);
	
	НавигационнаяСсылка = "";
	ТекстДокумента      = "";
	
	Элементы.ПодтвердитьСборку.Видимость = ЕстьДокументОтгрузки И СтатусОтправления = Перечисления.СтатусыЗаказовТорговыхПлощадок.ОжидаетСборки;
	Элементы.ОтменитьСборку.Видимость    = СтатусОтправления <> Перечисления.СтатусыЗаказовТорговыхПлощадок.Доставлен
												И СтатусОтправления <> Перечисления.СтатусыЗаказовТорговыхПлощадок.Отменен;
	Элементы.ОтменитьСборку.Заголовок    = ?(СтатусОтправления = Перечисления.СтатусыЗаказовТорговыхПлощадок.ОжидаетСборки,
												НСтр("ru = 'Отменить сборку'"),
												НСтр("ru = 'Отменить доставку'"));
	
	Если Не ЕстьЗаказ И ЕстьПравоИнтерактивногоДобавления Тогда
		Элементы.ГруппаДанныеОЗаказе.ТекущаяСтраница = Элементы.СтраницаЗагрузитьЗаказ;
	ИначеЕсли Не ЕстьЗаказ Тогда
		Элементы.ГруппаДанныеОЗаказе.ТекущаяСтраница = Элементы.СтраницаТекст;
		ТекстДокумента = НСтр("ru = 'Заказ не загружен'");
	Иначе
		Элементы.ГруппаДанныеОЗаказе.ТекущаяСтраница = Элементы.СтраницаТекст;
		НавигационнаяСсылка = "ОткрытьЗаказ";
		РеквизитыЗаказа     = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументЗаказа, "Номер, Дата");
		ТекстДокумента      = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Заказ клиента № %1 от %2'"),
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыЗаказа.Номер),
			Формат(РеквизитыЗаказа.Дата, "ДЛФ=DD"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НавигационнаяСсылка) Тогда
		ЦветТекста = ЦветаСтиля.ГиперссылкаЦвет;
	Иначе
		ЦветТекста = Неопределено;
	КонецЕсли;
	
	ПредставлениеДокумента = Новый ФорматированнаяСтрока(ТекстДокумента,, ЦветТекста,, НавигационнаяСсылка);
	ТекстыПоляДокументыНаОсновании.Добавить(ПредставлениеДокумента);
	
	// Документ отгрузки
	Если ЕстьЗаказ Тогда
		Если ЕстьДокументОтгрузки Тогда
			Если ТипЗнч(ДокументОтгрузки) = Тип("СписокЗначений") Тогда
				Для Каждого ЭлементКоллекции Из ДокументОтгрузки Цикл
					Шаблон = ИнтеграцияСМаркетплейсамиКлиентСервер.ШаблонНавигационнойСсылкиДокументаОтгрузки(ЭлементКоллекции.Значение, СтатусОтправления);
					
					НавигационнаяСсылка = "ОткрытьДокументОтгрузки" + Формат(ДокументОтгрузки.Индекс(ЭлементКоллекции), "ЧН=; ЧГ=0");
					РеквизитыОтгрузки   = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлементКоллекции.Значение, "Номер, Дата");
					ТекстДокумента      = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						Шаблон,
						ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыОтгрузки.Номер),
						Формат(РеквизитыОтгрузки.Дата, "ДЛФ=DD"));
			
					ПредставлениеДокумента = Новый ФорматированнаяСтрока(ТекстДокумента,, ЦветаСтиля.ГиперссылкаЦвет,, НавигационнаяСсылка);
					ТекстыПоляДокументыНаОсновании.Добавить(ПредставлениеДокумента);
				КонецЦикла;
				
			Иначе
				Шаблон = ИнтеграцияСМаркетплейсамиКлиентСервер.ШаблонНавигационнойСсылкиДокументаОтгрузки(ДокументОтгрузки, СтатусОтправления);
				
				НавигационнаяСсылка = "ОткрытьДокументОтгрузки";
				РеквизитыОтгрузки   = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОтгрузки, "Номер, Дата");
				ТекстДокумента      = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Шаблон,
					ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыОтгрузки.Номер),
					Формат(РеквизитыОтгрузки.Дата, "ДЛФ=DD"));
		
				ПредставлениеДокумента = Новый ФорматированнаяСтрока(ТекстДокумента,, ЦветаСтиля.ГиперссылкаЦвет,, НавигационнаяСсылка);
				ТекстыПоляДокументыНаОсновании.Добавить(ПредставлениеДокумента);
			КонецЕсли;
			
		Иначе
			НавигационнаяСсылка = "ЗаполнитьИРаспределить";
			ТекстДокумента      = НСтр("ru = 'Оформить реализацию для подтверждения сборки'");
			
			ПредставлениеДокумента = Новый ФорматированнаяСтрока(ТекстДокумента,, ЦветаСтиля.ГиперссылкаЦвет,, НавигационнаяСсылка);
			ТекстыПоляДокументыНаОсновании.Добавить(ПредставлениеДокумента);
		КонецЕсли;
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиентСервер.ОбновитьТекстДокументыНаОсновании(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьДокументыFBS()
	
	ДокументЗаказа   = Документы.ЗаказКлиента.ПустаяСсылка();
	ДокументОтгрузки = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗаказыТорговыхПлощадок.НомерЗаказа КАК НомерЗаказа,
		|	ЗаказыТорговыхПлощадок.НомерОтправления КАК НомерОтправления,
		|	ЗаказыТорговыхПлощадок.Заказ КАК Заказ,
		|	ЕСТЬNULL(ДокументЗаказКлиента.ПометкаУдаления, ИСТИНА) КАК ЗаказКлиентаПометкаУдаления,
		|	ЗаказыТорговыхПлощадок.ДокументОтгрузки КАК ДокументОтгрузки
		|ИЗ
		|	РегистрСведений.ЗаказыТорговыхПлощадок КАК ЗаказыТорговыхПлощадок
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ДокументЗаказКлиента
		|		ПО ЗаказыТорговыхПлощадок.Заказ = ДокументЗаказКлиента.Ссылка
		|ГДЕ
		|	ЗаказыТорговыхПлощадок.УчетнаяЗапись = &УчетнаяЗапись
		|	И ЗаказыТорговыхПлощадок.НомерЗаказа = &НомерЗаказа
		|	И ЗаказыТорговыхПлощадок.НомерОтправления = &НомерОтправления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаказыТорговыхПлощадок.НомерЗаказа,
		|	ЗаказыТорговыхПлощадок.НомерРодительскогоОтправления,
		|	ЗаказыТорговыхПлощадок.Заказ,
		|	ЕСТЬNULL(ДокументЗаказКлиента.ПометкаУдаления, ИСТИНА),
		|	ЗаказыТорговыхПлощадок.ДокументОтгрузки
		|ИЗ
		|	РегистрСведений.ЗаказыТорговыхПлощадок КАК ЗаказыТорговыхПлощадок
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ДокументЗаказКлиента
		|		ПО ЗаказыТорговыхПлощадок.Заказ = ДокументЗаказКлиента.Ссылка
		|ГДЕ
		|	ЗаказыТорговыхПлощадок.УчетнаяЗапись = &УчетнаяЗапись
		|	И ЗаказыТорговыхПлощадок.НомерЗаказа = &НомерЗаказа
		|	И ЗаказыТорговыхПлощадок.НомерРодительскогоОтправления = &НомерОтправления";
	
	Запрос.УстановитьПараметр("УчетнаяЗапись",    УчетнаяЗапись);
	Запрос.УстановитьПараметр("НомерЗаказа",      НомерЗаказа);
	Запрос.УстановитьПараметр("НомерОтправления", НомерОтправления);
	
	УстановитьПривилегированныйРежим(Истина);
	ВыборкаДанных = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока ВыборкаДанных.Следующий() Цикл
		Если Не ВыборкаДанных.ЗаказКлиентаПометкаУдаления Тогда
			ДокументЗаказа = ВыборкаДанных.Заказ;
			Если ЗначениеЗаполнено(ВыборкаДанных.ДокументОтгрузки) Тогда
				Если ТипЗнч(ДокументОтгрузки) = Тип("СписокЗначений") Тогда
					ДокументОтгрузки.Добавить(ВыборкаДанных.ДокументОтгрузки);
				ИначеЕсли ЗначениеЗаполнено(ДокументОтгрузки) Тогда
					ПервыйДокументОтгрузки = ДокументОтгрузки;
					ДокументОтгрузки = Новый СписокЗначений;
					ДокументОтгрузки.Добавить(ПервыйДокументОтгрузки);
					ДокументОтгрузки.Добавить(ВыборкаДанных.ДокументОтгрузки);
				Иначе
					ДокументОтгрузки = ВыборкаДанных.ДокументОтгрузки;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			ДокументЗаказа   = Документы.ЗаказКлиента.ПустаяСсылка();
			ДокументОтгрузки = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
