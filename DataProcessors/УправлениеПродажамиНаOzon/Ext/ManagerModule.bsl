
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ИмпортДанных

// Обновляет служебные данные дерева товаров при открытии обработки.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса      - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   ДеревоТоваров                  - ДеревоЗначений - структура дерева описана в реквизите "ИмпортируемыеТовары", 
//                                      см. Обработка.УправлениеПродажамиНаOzon.Форма.ИмпортДанныхТоваровСТорговойПлощадки.
//   СортироватьСтрокиДереваТоваров - Булево - Истина, если после загрузки требуется отсортировать строки второго уровня дерева товаров.
//
// Возвращаемое значение:
//   Структура - результат выполнения функции:
//     * Ошибка        - Структура - код и описание ошибки при выполнении функции, см. ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка.
//     * ДеревоТоваров - ДеревоЗначений - заполненное дерево товаров, см. реквизит "ИмпортируемыеТовары" в 
//                         Обработка.УправлениеПродажамиНаOzon.Форма.ИмпортДанныхТоваровСТорговойПлощадки.
//
Функция ОбновитьСлужебныеДанные(Знач УчетнаяЗаписьМаркетплейса, ДеревоТоваров, СортироватьСтрокиДереваТоваров) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибка",        ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка());
	Результат.Вставить("ДеревоТоваров", ДеревоТоваров);
	
	Если Не ЗначениеЗаполнено(УчетнаяЗаписьМаркетплейса) Тогда
		Результат.Ошибка.КодОшибки      = ИнтеграцияСМаркетплейсомOzonСервер.КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
		Результат.Ошибка.ОписаниеОшибки = НСтр("ru = 'Не указана учетная запись торговой площадки для импорта данных по товарам.'");
		Возврат Результат;
	КонецЕсли;
	
	Отказ = Ложь;
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"Обработка.УправлениеПродажамиНаOzon.ОбновитьСлужебныеДанные");
		
	Попытка
		НастройкиУчетнойЗаписи = Справочники.УчетныеЗаписиМаркетплейсов.НастройкиУчетнойЗаписи(УчетнаяЗаписьМаркетплейса);
		НалогообложениеНДС     = ?(ПолучитьФункциональнуюОпцию("ИспользоватьУчетНДС"), Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС, Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС);
		Организация            = НастройкиУчетнойЗаписи.Организация;
		ТекущаяДата            = ТекущаяДатаСеанса();
		ВидыЦен                = ИнтеграцияСМаркетплейсомOzonСервер.ВидыЦенУчетнойЗаписи(УчетнаяЗаписьМаркетплейса, Истина, Истина);
		СписокНоменклатуры     = Новый Массив;	// Массив Из СправочникСсылка.Номенклатура -
		
		Для Каждого СтрокаДереваПервогоУровня Из ДеревоТоваров.Строки Цикл
			Для Каждого СтрокаДереваВторогоУровня Из СтрокаДереваПервогоУровня.Строки Цикл
				Если ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Номенклатура) Тогда
					СписокНоменклатуры.Добавить(СтрокаДереваВторогоУровня.Номенклатура);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Запрос для определения дополнительных реквизитов
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ 
			|	СправочникНоменклатура.Ссылка КАК Номенклатура,
			|	ВЫБОР
			|		КОГДА &ИспользоватьХарактеристикиНоменклатуры
			|				И НЕ СправочникНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ХарактеристикиИспользуются,
			|	ЕСТЬNULL(СправочникНоменклатура.ИспользоватьУпаковки, ЛОЖЬ) КАК ИспользоватьУпаковки,
			|	ЕСТЬNULL(СправочникНоменклатура.ЕдиницаИзмерения, НЕОПРЕДЕЛЕНО) КАК ЕдиницаИзмерения,
			|	ЕСТЬNULL(СправочникНоменклатура.ОсобенностьУчета, ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПустаяСсылка)) КАК ВидПродукции,
			|	ВЫБОР
			|		КОГДА &НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС)
			|			ТОГДА &СтавкаНДСБезНДС
			|		КОГДА &НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД)
			|				И НЕ СправочникНоменклатура.ПодакцизныйТовар
			|			ТОГДА &СтавкаНДСБезНДС
			|		КОГДА &НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя)
			|			ТОГДА &СтавкаНДСПоУмолчанию
			|		КОГДА &НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДССМежценовойРазницы)
			|			ТОГДА &СтавкаНДСБезНДС
			|		КОГДА &НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭлектронныеУслуги)
			|				И (СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
			|					ИЛИ СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
			|			ТОГДА &СтавкаНДСПоУмолчанию
			|		КОГДА &НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаПоПатенту)
			|				И НЕ СправочникНоменклатура.ПодакцизныйТовар
			|			ТОГДА &СтавкаНДСБезНДС
			|		ИНАЧЕ ЕСТЬNULL(СтавкиНДСНоменклатурыПриоритет1.СтавкаНДС, ЕСТЬNULL(СтавкиНДСНоменклатурыПриоритет2.СтавкаНДС, ЕСТЬNULL(СтавкиНДСНоменклатурыПриоритет3.СтавкаНДС, &СтавкаНДСПоТипуНалогообложения)))
			|	КОНЕЦ КАК СтавкаНДС,
			|	ВЫРАЗИТЬ(ВЫБОР
			|			КОГДА &НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС)
			|				ТОГДА &СтавкаНДСБезНДС
			|			КОГДА &НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД)
			|					И НЕ СправочникНоменклатура.ПодакцизныйТовар
			|				ТОГДА &СтавкаНДСБезНДС
			|			КОГДА &НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя)
			|				ТОГДА &СтавкаНДСПоУмолчанию
			|			КОГДА &НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДССМежценовойРазницы)
			|				ТОГДА &СтавкаНДСБезНДС
			|			КОГДА &НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭлектронныеУслуги)
			|					И (СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
			|						ИЛИ СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
			|				ТОГДА &СтавкаНДСПоУмолчанию
			|			КОГДА &НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаПоПатенту)
			|					И НЕ СправочникНоменклатура.ПодакцизныйТовар
			|				ТОГДА &СтавкаНДСБезНДС
			|			ИНАЧЕ ЕСТЬNULL(СтавкиНДСНоменклатурыПриоритет1.СтавкаНДС, ЕСТЬNULL(СтавкиНДСНоменклатурыПриоритет2.СтавкаНДС, ЕСТЬNULL(СтавкиНДСНоменклатурыПриоритет3.СтавкаНДС, &СтавкаНДСПоТипуНалогообложения)))
			|		КОНЕЦ КАК Справочник.СтавкиНДС).Ставка КАК Ставка
			|ИЗ
			|	Справочник.Номенклатура КАК СправочникНоменклатура
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНДСНоменклатуры.СрезПоследних(&Дата, Страна = &Страна) КАК СтавкиНДСНоменклатурыПриоритет1
			|		ПО СправочникНоменклатура.Ссылка = СтавкиНДСНоменклатурыПриоритет1.Номенклатура
			|			И (СтавкиНДСНоменклатурыПриоритет1.СтавкаНДС.НачалоПериода <= &Дата
			|				ИЛИ СтавкиНДСНоменклатурыПриоритет1.СтавкаНДС.НачалоПериода = ДАТАВРЕМЯ(1, 1, 1))
			|			И (СтавкиНДСНоменклатурыПриоритет1.СтавкаНДС.КонецПериода >= &Дата
			|				ИЛИ СтавкиНДСНоменклатурыПриоритет1.СтавкаНДС.КонецПериода = ДАТАВРЕМЯ(1, 1, 1))
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНДСНоменклатуры.СрезПоследних(&Дата, Страна = &ПустаяСтрана) КАК СтавкиНДСНоменклатурыПриоритет2
			|		ПО СправочникНоменклатура.Ссылка = СтавкиНДСНоменклатурыПриоритет2.Номенклатура
			|			И (СтавкиНДСНоменклатурыПриоритет2.СтавкаНДС.НачалоПериода <= &Дата
			|				ИЛИ СтавкиНДСНоменклатурыПриоритет2.СтавкаНДС.НачалоПериода = ДАТАВРЕМЯ(1, 1, 1))
			|			И (СтавкиНДСНоменклатурыПриоритет2.СтавкаНДС.КонецПериода >= &Дата
			|				ИЛИ СтавкиНДСНоменклатурыПриоритет2.СтавкаНДС.КонецПериода = ДАТАВРЕМЯ(1, 1, 1))
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСтавкиНДС.СрезПоследних(&Дата, Страна = &Страна) КАК СтавкиНДСНоменклатурыПриоритет3
			|		ПО (СтавкиНДСНоменклатурыПриоритет3.СтавкаНДС.НачалоПериода <= &Дата
			|				ИЛИ СтавкиНДСНоменклатурыПриоритет3.СтавкаНДС.НачалоПериода = ДАТАВРЕМЯ(1, 1, 1))
			|			И (СтавкиНДСНоменклатурыПриоритет3.СтавкаНДС.КонецПериода >= &Дата
			|				ИЛИ СтавкиНДСНоменклатурыПриоритет3.СтавкаНДС.КонецПериода = ДАТАВРЕМЯ(1, 1, 1))
			|ГДЕ
			|	СправочникНоменклатура.Ссылка В(&СписокНоменклатуры)";
		
		Запрос.УстановитьПараметр("СписокНоменклатуры",                     СписокНоменклатуры);   
		Запрос.УстановитьПараметр("ИспользоватьХарактеристикиНоменклатуры", ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры"));
		Запрос.УстановитьПараметр("НалогообложениеНДС",                     НалогообложениеНДС);
		Запрос.УстановитьПараметр("СтавкаНДСПоТипуНалогообложения",         УчетНДСУП.СтавкаНДСПоТипуНалогообложения(НалогообложениеНДС, Организация, ТекущаяДата));
		Запрос.УстановитьПараметр("СтавкаНДСПоУмолчанию",         			УчетНДСУП.СтавкаНДСПоУмолчанию(Организация, ТекущаяДата, Истина, НалогообложениеНДС));
		Запрос.УстановитьПараметр("СтавкаНДСБезНДС",						Справочники.СтавкиНДС.БезНДС);
		Запрос.УстановитьПараметр("Дата",									ТекущаяДата);
		Запрос.УстановитьПараметр("Страна",									ЗначениеНастроекКлиентСерверПовтИсп.СтранаРегистрацииОрганизации(Организация));
		Запрос.УстановитьПараметр("ПустаяСтрана", 							Справочники.СтраныМира.ПустаяСсылка());

		УстановитьПривилегированныйРежим(Истина);
		ВыборкаДанных = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		
		// Маркируемая продукция (ТНВЭД, коды ЕАЭС)
		ИдентификаторАтрибута_ТНВЭД = ИнтеграцияСМаркетплейсомOzonКлиентСервер.КонстантыСервиса()["ИдентификаторАтрибута_ТНВЭД"];
		ОтборМаркируемаяПродукция   = Новый Структура("ИдентификаторАтрибутаМаркетплейса", ИдентификаторАтрибута_ТНВЭД);
		
		// Заполнение дерева товаров  
		Для Каждого СтрокаДереваПервогоУровня Из ДеревоТоваров.Строки Цикл
			Для Каждого СтрокаДереваВторогоУровня Из СтрокаДереваПервогоУровня.Строки Цикл
				СтрокаДереваВторогоУровня.НаименованиеКатегорииМаркетплейса = СтрЗаменить(
					СтрокаДереваВторогоУровня.НаименованиеКатегорииМаркетплейса, 
					НСтр("ru = '<не определена>'"), 
					"");
				СтрокаДереваВторогоУровня.ТекущееИдентификаторКатегорииМаркетплейса = СтрокаДереваВторогоУровня.ИдентификаторКатегорииМаркетплейса;
				СтрокаДереваВторогоУровня.ТекущееНаименованиеКатегорииМаркетплейса  = СтрокаДереваВторогоУровня.НаименованиеКатегорииМаркетплейса;
				
				Отбор = Новый Структура("Номенклатура", СтрокаДереваВторогоУровня.Номенклатура);
				ВыборкаДанных.Сбросить();
				Если ВыборкаДанных.НайтиСледующий(Отбор) Тогда
					СтрокаДереваВторогоУровня.ХарактеристикиИспользуются = ВыборкаДанных.ХарактеристикиИспользуются;
					СтрокаДереваВторогоУровня.ИспользоватьУпаковки       = ВыборкаДанных.ИспользоватьУпаковки;
					СтрокаДереваВторогоУровня.ЕдиницаИзмерения           = ВыборкаДанных.ЕдиницаИзмерения;
					СтрокаДереваВторогоУровня.СтавкаНДС                  = ВыборкаДанных.СтавкаНДС;
					СтрокаДереваВторогоУровня.Ставка                     = ВыборкаДанных.Ставка;
					СтрокаДереваВторогоУровня.ЭтоМаркируемаяПродукция    = Ложь;
					
					Если ЗначениеЗаполнено(ВыборкаДанных.ВидПродукции) 
							И Не ВыборкаДанных.ВидПродукции = Перечисления.ОсобенностиУчетаНоменклатуры.БезОсобенностейУчета Тогда
						СтрокаДереваВторогоУровня.ЭтоМаркируемаяПродукция = ИнтеграцияИСМПКлиентСерверПовтИсп.ВестиУчетМаркируемойПродукции(
																				ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВыборкаДанных.ВидПродукции));
					КонецЕсли;
				КонецЕсли;
				
				// Значения реквизитов
				ИнтеграцияСМаркетплейсомOzonСервер.ДополнитьТаблицуЗначенийРеквизитов(
					УчетнаяЗаписьМаркетплейса,
					СтрокаДереваВторогоУровня.ЗначенияРеквизитовИзСервиса,
					Неопределено,
					Неопределено,
					СтрокаДереваВторогоУровня.Категория,
					СтрокаДереваВторогоУровня.ДанныеОбъекта,
					Истина);
					
				// Маркируемая продукция (ТНВЭД, коды ЕАЭС)
				Если СтрокаДереваВторогоУровня.ЭтоМаркируемаяПродукция Тогда
					НайденныеСтроки = СтрокаДереваВторогоУровня.ЗначенияРеквизитовИзСервиса.НайтиСтроки(ОтборМаркируемаяПродукция);
					Если НайденныеСтроки.Количество() > 0 Тогда
						НайденныеСтроки[0].ОбязательныйАтрибут        = Истина;
						НайденныеСтроки[0].ТекущееОбязательныйАтрибут = Истина;
					КонецЕсли;
				КонецЕсли;
				
				// Дерево реквизитов
				СтрокаДереваВторогоУровня.ДеревоРеквизитов = ИнтеграцияСМаркетплейсомOzonСервер.СформироватьДеревоРеквизитов(
					УчетнаяЗаписьМаркетплейса,
					СтрокаДереваВторогоУровня.ЗначенияРеквизитовИзСервиса,
					СтрокаДереваВторогоУровня,
					Неопределено,
					НастройкиУчетнойЗаписи,
					ВидыЦен);
			КонецЦикла;
		КонецЦикла;
		
		ОпределитьНаименованияГруппДереваТоваров(
			ДеревоТоваров, 
			СортироватьСтрокиДереваТоваров, 
			0,
			-1);
		
		Результат.Вставить("ДеревоТоваров", ДеревоТоваров);
		
		ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(
			Замер, 
			ВыборкаДанных.Количество() / 100);
		
	Исключение
		Отказ = Истина;
		ЗаписьЖурналаРегистрации(ИнтеграцияСМаркетплейсомOzonСервер.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

	Если Отказ Тогда
		Результат.Ошибка.КодОшибки      = ИнтеграцияСМаркетплейсомOzonСервер.КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
		Результат.Ошибка.ОписаниеОшибки = НСтр("ru = 'При обновлении служебных данных возникли ошибки. Подробности см. в журнале регистрации.'");
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Формирует список товаров с описаниями для последующего импорта.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Параметры                 - Структура - параметры выполнения функции:
//     * ВариантЗагрузкиДанных          - Число - вариант загрузки данных из сервиса, см. реквизит "ВариантЗагрузкиДанных" в
//                                          Обработка.УправлениеПродажамиНаOzon.Форма.ИмпортДанныхТоваровСТорговойПлощадки.
//     * КэшКатегорий                   - Структура - кэш категорий, см. ИнтеграцияСМаркетплейсомOzonКлиент.КэшКатегорий.
//     * ЗагрузитьЦеныПродажи           - Булево - признак записи цен, см. реквизит "ЗагрузитьЦеныПродажи" в
//                                          Обработка.УправлениеПродажамиНаOzon.Форма.ИмпортДанныхТоваровСТорговойПлощадки.
//     * ИмяИдентификатора              - Строка - имя ключевого поля идентификаторов. Может принимать значения:
//                                          "ИдентификаторОбъектаМаркетплейса" и "ИдентификаторПубликации". 
//     * РазмерПорцииЗагрузкиДанных     - Число - размер порции загрузки данных с торговой площадки за один запрос;
//                                      - Неопределено - размер порции для загрузки не ограничен.
//     * СоздатьЭлементыНоменклатуры    - Булево - Истина, если несопоставленные элементы справочника "Номенклатура" необходимо создать.
//     * СортироватьСтрокиДереваТоваров - Булево - Истина, если после загрузки требуется отсортировать строки второго уровня дерева товаров.
//     * ОтображатьСопоставленные       - Число - установленный фильтр по сопоставленным позициям дерева товаров.
//     * ОтображатьПоСтатусу            - Число - установленный фильтр по статусу позиций дерева товаров.
//     * СледующаяПорцияДанных          - Булево - получить следующую порцию данных с торговой площадки (уже считанные данные будут пропущены).
//     * ИдентификаторыТоваров          - ТаблицаЗначений - таблица идентификаторов товаров, 
//                                          см. ИнтеграцияСМаркетплейсомOzonСервер.НоваяТаблицаИдентификаторовТоваров.
//   ДеревоТоваров             - ДеревоЗначений - структура дерева описана в реквизите "ИмпортируемыеТовары", 
//                                 см. Обработка.УправлениеПродажамиНаOzon.Форма.ИмпортДанныхТоваровСТорговойПлощадки.
//                             - Неопределено - заполнение дерева товаров не производится.
//
// Возвращаемое значение:
//   Структура - результат выполнения функции:
//     * Ошибка                       - Структура - код и описание ошибки при выполнении функции, 
//                                        см. ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка.
//     * ДеревоТоваров                - ДеревоЗначений - заполненное дерево товаров, см. реквизит "ИмпортируемыеТовары" в 
//                                        Обработка.УправлениеПродажамиНаOzon.Форма.ИмпортДанныхТоваровСТорговойПлощадки.
//                                    - Неопределено - заполнение дерева товаров не производится.
//     * КэшКатегорий                 - Структура - кэш категорий, см. ИнтеграцияСМаркетплейсомOzonКлиент.КэшКатегорий.
//     * ИдентификаторыТоваров        - ТаблицаЗначений - таблица идентификаторов товаров, 
//                                          см. ИнтеграцияСМаркетплейсомOzonСервер.НоваяТаблицаИдентификаторовТоваров.
//     * ОписаниеТоваров              - ТаблицаЗначений - описания товаров, 
//                                        см. ИнтеграцияСМаркетплейсомOzonСервер.НоваяТаблицаОписанияТоваров.
//     * ОписаниеХарактеристикТоваров - ТаблицаЗначений - описания характеристик товаров, 
//                                        см. ИнтеграцияСМаркетплейсомOzonСервер.НоваяТаблицаОписанияХарактеристикТоваров.
//     * ОстаткиТоваров               - ТаблицаЗначений - остатки товаров, 
//                                        см. ИнтеграцияСМаркетплейсомOzonСервер.НоваяТаблицаОстатковТоваров.
//     * ЦеныТоваров                  - ТаблицаЗначений - цены товаров, 
//                                        см. ИнтеграцияСМаркетплейсомOzonСервер.ПолучитьТекущиеЦеныПоИдентификаторам.
//                                    - Неопределено - заполнение цен товаров не производится.
//
Функция ПолучитьИмпортируемыеДанныеСТорговойПлощадки(Знач УчетнаяЗаписьМаркетплейса, Знач Параметры, ДеревоТоваров = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибка",        ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка());
	Результат.Вставить("ДеревоТоваров", ДеревоТоваров);
	
	Если Параметры.Свойство("КэшКатегорий")
			И ЗначениеЗаполнено(Параметры.КэшКатегорий) Тогда
		Результат.Вставить("КэшКатегорий", Параметры.КэшКатегорий);
	КонецЕсли;
	
	Если Параметры.Свойство("ИдентификаторыТоваров") Тогда
		Результат.Вставить("ИдентификаторыТоваров", Параметры.ИдентификаторыТоваров);
	КонецЕсли;
	
	Если ДеревоТоваров = Неопределено Тогда
		Результат.Вставить("ОписаниеТоваров",              ИнтеграцияСМаркетплейсомOzonСервер.НоваяТаблицаОписанияТоваров());
		Результат.Вставить("ОписаниеХарактеристикТоваров", ИнтеграцияСМаркетплейсомOzonСервер.НоваяТаблицаОписанияХарактеристикТоваров());
		Результат.Вставить("ОстаткиТоваров",               ИнтеграцияСМаркетплейсомOzonСервер.НоваяТаблицаОстатковТоваров());
		Результат.Вставить("ЦеныТоваров",                  Неопределено);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(УчетнаяЗаписьМаркетплейса) Тогда
		Результат.Ошибка.КодОшибки      = ИнтеграцияСМаркетплейсомOzonСервер.КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
		Результат.Ошибка.ОписаниеОшибки = НСтр("ru = 'Не указана учетная запись торговой площадки для импорта данных по товарам.'");
		Возврат Результат;
	КонецЕсли;
	
	Если Параметры.КэшКатегорий = Неопределено Тогда
		Параметры.КэшКатегорий = Новый Структура;
	КонецЕсли;
	
	Отказ = Ложь;
		
	ТипНалогообложенияНДС  = ?(ПолучитьФункциональнуюОпцию("ИспользоватьУчетНДС"), Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС, Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС);
	НастройкиУчетнойЗаписи = Справочники.УчетныеЗаписиМаркетплейсов.НастройкиУчетнойЗаписи(УчетнаяЗаписьМаркетплейса);
	ВидыЦен                = ИнтеграцияСМаркетплейсомOzonСервер.ВидыЦенУчетнойЗаписи(УчетнаяЗаписьМаркетплейса, Истина, Истина);
	ИсточникКатегории      = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗаписьМаркетплейса, "ИсточникКатегории");
	КэшИдентификаторов     = Новый Соответствие;
	
	Попытка
		ИмяИдентификатора           = ?(Параметры.ИмяИдентификатора = "ИдентификаторSKU", "ИдентификаторFBOSKU", Параметры.ИмяИдентификатора);
		Идентификаторы              = Новый Массив;	// Массив Из Строка - 
		ИдентификаторыПовторные     = Новый Массив;	// Массив Из Строка -
		ИдентификаторыНовые         = Новый Массив;	// Массив Из Строка -
		СтрокаДереваГруппаЗагрузить = Неопределено;
		СтрокаДереваГруппаОшибки    = Неопределено;

		// Для варианта поиска по ИдентификаторSKU.
		ИмяИдентификатораИзПараметров = Параметры.ИмяИдентификатора;

		Если ДеревоТоваров <> Неопределено Тогда
			Для Каждого СтрокаДереваПервогоУровня Из ДеревоТоваров.Строки Цикл
				Если СтрокаДереваПервогоУровня.ВариантЗагрузки = 0 Тогда
					// СтрокаДереваГруппаОбновить
				ИначеЕсли СтрокаДереваПервогоУровня.ВариантЗагрузки = 2 Тогда
					СтрокаДереваГруппаЗагрузить = СтрокаДереваПервогоУровня;
				ИначеЕсли СтрокаДереваПервогоУровня.ВариантЗагрузки = 3 Тогда
					СтрокаДереваГруппаОшибки = СтрокаДереваПервогоУровня;
				Иначе
					Продолжить;
				КонецЕсли;
					
				Для Каждого СтрокаДереваВторогоУровня Из СтрокаДереваПервогоУровня.Строки Цикл
					Если ЗначениеЗаполнено(СтрокаДереваВторогоУровня.ИдентификаторПубликации) Тогда
						КэшИдентификаторов.Вставить(СтрокаДереваВторогоУровня.ИдентификаторПубликации, СтрокаДереваВторогоУровня.ИдентификаторОбъектаМаркетплейса);
					КонецЕсли;
					
					Если Не СтрокаДереваВторогоУровня.Пометка
							Или СтрокаДереваВторогоУровня.ИндексСтатуса = 4 Тогда
						ИдентификаторыПовторные.Добавить(СтрокаДереваВторогоУровня[ИмяИдентификатора]);
						Продолжить;
					КонецЕсли;
					
					Если Параметры.СледующаяПорцияДанных
						 И СтрокаДереваВторогоУровня.ИндексСтатуса <> 5 Тогда
						ИдентификаторыПовторные.Добавить(СтрокаДереваВторогоУровня[ИмяИдентификатора]);
						Продолжить;
					КонецЕсли;
					
					// Дополнительные фильтры
					Если Параметры.ОтображатьСопоставленные = 1
							И (Не ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Номенклатура) 
								Или СтрокаДереваВторогоУровня.ХарактеристикиИспользуются
									И Не ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Характеристика)
								Или Не ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Категория)) Тогда
						ИдентификаторыПовторные.Добавить(СтрокаДереваВторогоУровня[ИмяИдентификатора]);
						Продолжить;
						
					ИначеЕсли Параметры.ОтображатьСопоставленные = 2
								И ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Номенклатура) 
								И (Не СтрокаДереваВторогоУровня.ХарактеристикиИспользуются
									Или ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Характеристика))
								И ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Категория) Тогда
						ИдентификаторыПовторные.Добавить(СтрокаДереваВторогоУровня[ИмяИдентификатора]);
						Продолжить;
					КонецЕсли;
					
					Если Параметры.ОтображатьПоСтатусу <> -1
							И СтрокаДереваВторогоУровня.ИндексСтатуса <> Параметры.ОтображатьПоСтатусу Тогда
						ИдентификаторыПовторные.Добавить(СтрокаДереваВторогоУровня[ИмяИдентификатора]);
						Продолжить;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаДереваВторогоУровня[ИмяИдентификатора]) Тогда
						Если ЗначениеЗаполнено(Параметры.РазмерПорцииЗагрузкиДанных)
								И Идентификаторы.Количество() >= Параметры.РазмерПорцииЗагрузкиДанных Тогда
							ИдентификаторыПовторные.Добавить(СтрокаДереваВторогоУровня[ИмяИдентификатора]);
						Иначе
							СтрокаДереваВторогоУровня.ИндексСтатуса = 7;
							Идентификаторы.Добавить(СтрокаДереваВторогоУровня[ИмяИдентификатора]);
							
							Если СтрокаДереваВторогоУровня.ВариантЗагрузки = 2 Тогда
								ИдентификаторыНовые.Добавить(СтрокаДереваВторогоУровня[ИмяИдентификатора]);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		// Новые товары с торговой площадки
		Если Не Параметры.ОбработкаПереданныхПозиций И Параметры.ВариантЗагрузкиДанных >= 1
				И Не (ЗначениеЗаполнено(Параметры.РазмерПорцииЗагрузкиДанных)
					И Идентификаторы.Количество() >= Параметры.РазмерПорцииЗагрузкиДанных) Тогда
			ФильтрПоТоварам = ИнтеграцияСМаркетплейсомOzonСервер.НовыйФильтрЗапросаПоТоварам(Истина,,,);
			НомерПП         = 0;
			
			Пока Истина Цикл
				НомерПП           = НомерПП + 1;
				КоличествоПозиций = Параметры.ИдентификаторыТоваров.Количество();
				
				Если ЗначениеЗаполнено(Параметры.РазмерПорцииЗагрузкиДанных)
						И Идентификаторы.Количество() >= Параметры.РазмерПорцииЗагрузкиДанных Тогда
					Прервать;
				КонецЕсли;
				
				ИнтеграцияСМаркетплейсомOzonСервер.ПолучитьИдентификаторыТоваров(
					УчетнаяЗаписьМаркетплейса, 
					ФильтрПоТоварам, 
					Параметры.ИдентификаторыТоваров,
					Параметры.РазмерПорцииЗагрузкиДанных,
					КэшИдентификаторов, 
					Отказ);

				Если Отказ Тогда
					Результат.Ошибка.КодОшибки      = ИнтеграцияСМаркетплейсомOzonСервер.КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
					Результат.Ошибка.ОписаниеОшибки = НСтр("ru = 'При получении идентификаторов товаров с торговой площадки возникли ошибки. Подробности см. в журнале регистрации.'");
					Возврат Результат;
				КонецЕсли;
				
				Если КоличествоПозиций = Параметры.ИдентификаторыТоваров.Количество() Тогда
					Прервать;
				КонецЕсли;
				
				ИдентификаторыТоваров = ИнтеграцияСМаркетплейсомOzonСервер.НоваяТаблицаИдентификаторовТоваров();
				Индекс = КоличествоПозиций;
				Пока Индекс < Параметры.ИдентификаторыТоваров.Количество() Цикл
					ЗаполнитьЗначенияСвойств(ИдентификаторыТоваров.Добавить(), Параметры.ИдентификаторыТоваров[Индекс]);
					Индекс = Индекс + 1;
				КонецЦикла;
				
				Запрос = Новый Запрос;
				Запрос.Текст =
					"ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	ТаблицаИдентификаторовТоваров.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
					|	ТаблицаИдентификаторовТоваров.ИдентификаторПубликации КАК ИдентификаторПубликации,
					|	ТаблицаИдентификаторовТоваров.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъектаМаркетплейса,
					|	ТаблицаИдентификаторовТоваров.ИдентификаторSKU КАК ИдентификаторSKU
					|ПОМЕСТИТЬ ТаблицаИдентификаторовТоваров
					|ИЗ
					|	&ТаблицаИдентификаторовТоваров КАК ТаблицаИдентификаторовТоваров
					|
					|ИНДЕКСИРОВАТЬ ПО
					|	ИдентификаторПубликации
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ТаблицаИдентификаторовТоваров.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
					|	ТаблицаИдентификаторовТоваров.ИдентификаторПубликации КАК ИдентификаторПубликации,
					|	ТаблицаИдентификаторовТоваров.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъектаМаркетплейса,
					|	ТаблицаИдентификаторовТоваров.ИдентификаторSKU КАК ИдентификаторSKU
					|ИЗ
					|	ТаблицаИдентификаторовТоваров КАК ТаблицаИдентификаторовТоваров
					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon
					|		ПО (СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса)
					|			И (СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар))
					|			И ТаблицаИдентификаторовТоваров.ИдентификаторПубликации = СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторПубликации
					|ГДЕ
					|	СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса ЕСТЬ NULL
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|УНИЧТОЖИТЬ ТаблицаИдентификаторовТоваров";

				Запрос.Текст = СтрЗаменить(Запрос.Текст,
					"И ТаблицаИдентификаторовТоваров.ИдентификаторПубликации = СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторПубликации",
					"И ТаблицаИдентификаторовТоваров." + ИмяИдентификатораИзПараметров + " = СтатусыПубликацииОбъектовМаркетплейсаOzon." + ИмяИдентификатора);
				Запрос.Текст = СтрЗаменить(Запрос.Текст,
					"ИНДЕКСИРОВАТЬ ПО
					|	ИдентификаторПубликации",
					"ИНДЕКСИРОВАТЬ ПО
					|	" + ИмяИдентификатораИзПараметров);
				
				Запрос.УстановитьПараметр("УчетнаяЗаписьМаркетплейса",     УчетнаяЗаписьМаркетплейса);
				Запрос.УстановитьПараметр("ТаблицаИдентификаторовТоваров", ИдентификаторыТоваров);
				
				УстановитьПривилегированныйРежим(Истина);
				ВыборкаДанных = Запрос.Выполнить().Выбрать();
				УстановитьПривилегированныйРежим(Ложь);
				
				Пока ВыборкаДанных.Следующий() Цикл
					Если Идентификаторы.Найти(ВыборкаДанных[ИмяИдентификатораИзПараметров]) = Неопределено 
							И ИдентификаторыПовторные.Найти(ВыборкаДанных[ИмяИдентификатораИзПараметров]) = Неопределено Тогда
						Идентификаторы.Добавить(ВыборкаДанных[ИмяИдентификатораИзПараметров]);
						ИдентификаторыНовые.Добавить(ВыборкаДанных[ИмяИдентификатораИзПараметров]);
						
						Если ДеревоТоваров <> Неопределено Тогда
							Если СтрокаДереваГруппаЗагрузить = Неопределено Тогда
								СтрокаДереваГруппаЗагрузить                 = ДеревоТоваров.Строки.Вставить(Мин(2, ДеревоТоваров.Строки.Количество()));
								СтрокаДереваГруппаЗагрузить.ВариантЗагрузки = 2;
								СтрокаДереваГруппаЗагрузить.ИндексСтатуса   = -2;
							КонецЕсли;
							
							СтрокаДереваВторогоУровня                                  = СтрокаДереваГруппаЗагрузить.Строки.Добавить();
							СтрокаДереваВторогоУровня.ВариантЗагрузки                  = 2;
							СтрокаДереваВторогоУровня.ИндексСтатуса                    = 6;
							СтрокаДереваВторогоУровня.ИдентификаторПубликации          = ВыборкаДанных.ИдентификаторПубликации;
							СтрокаДереваВторогоУровня.ИдентификаторОбъектаМаркетплейса = ВыборкаДанных.ИдентификаторОбъектаМаркетплейса;
							СтрокаДереваВторогоУровня.ИдентификаторFBOSKU              = ВыборкаДанных.ИдентификаторSKU;
							СтрокаДереваВторогоУровня.ИдентификаторFBSSKU              = ВыборкаДанных.ИдентификаторSKU;
							СтрокаДереваВторогоУровня.ДанныеОбъекта                    = ИнтеграцияСМаркетплейсомOzonСервер.НоваяТаблицаЗначенийРеквизитов();
							СтрокаДереваВторогоУровня.ДанныеТовараИзСервиса            = ИнтеграцияСМаркетплейсомOzonСервер.НоваяТаблицаОписанияТоваров();
							СтрокаДереваВторогоУровня.ЗначенияРеквизитовИзСервиса      = ИнтеграцияСМаркетплейсомOzonСервер.НоваяТаблицаЗначенийРеквизитов(Истина);
							СтрокаДереваВторогоУровня.ЦеныТовара                       = Новый Массив;
							СтрокаДереваВторогоУровня.УчетнаяЗаписьМаркетплейса        = УчетнаяЗаписьМаркетплейса;
							СтрокаДереваВторогоУровня.ВидОбъектаМаркетплейса           = Перечисления.ВидыОбъектовМаркетплейсов.Товар;
							СтрокаДереваВторогоУровня.ОбъектПубликации                 = Неопределено;
						КонецЕсли;

						Если ЗначениеЗаполнено(Параметры.РазмерПорцииЗагрузкиДанных)
								И Идентификаторы.Количество() >= Параметры.РазмерПорцииЗагрузкиДанных Тогда
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Если Идентификаторы.Количество() = 0 Тогда
			Результат.Ошибка.КодОшибки      = ИнтеграцияСМаркетплейсомOzonСервер.КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
			Результат.Ошибка.ОписаниеОшибки = НСтр("ru = 'Данных для загрузки с торговой площадки не найдено.'");
			Возврат Результат;
		КонецЕсли;
		
		// Описание товаров
		Если ИмяИдентификатора = "ИдентификаторПубликации" Тогда
			ПараметрыЗапроса = ИнтеграцияСМаркетплейсомOzonСервер.НовыеПараметрыЗапросаПолученияОписанияТоваров(Идентификаторы,,);
		ИначеЕсли ИмяИдентификатора = "ИдентификаторОбъектаМаркетплейса" Тогда
			ПараметрыЗапроса = ИнтеграцияСМаркетплейсомOzonСервер.НовыеПараметрыЗапросаПолученияОписанияТоваров(, Идентификаторы,);
		Иначе
			ПараметрыЗапроса = ИнтеграцияСМаркетплейсомOzonСервер.НовыеПараметрыЗапросаПолученияОписанияТоваров(,,Идентификаторы);
		КонецЕсли;
		
		ОписаниеТоваров = ИнтеграцияСМаркетплейсомOzonСервер.ПолучитьОписаниеТоваров(
			УчетнаяЗаписьМаркетплейса, 
			ПараметрыЗапроса, 
			Параметры.КэшКатегорий, 
			КэшИдентификаторов,
			Отказ);
		ОписаниеТоваров.Индексы.Добавить(ИмяИдентификатора);
		
		Если Отказ Тогда
			Результат.Ошибка.КодОшибки      = ИнтеграцияСМаркетплейсомOzonСервер.КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
			Результат.Ошибка.ОписаниеОшибки = НСтр("ru = 'При получении описания товаров с торговой площадки возникли ошибки. Подробности см. в журнале регистрации.'");
			Возврат Результат;
		КонецЕсли;
		
		Если ОписаниеТоваров.Количество() > 0 Тогда
			// Характеристики товаров
			Если ИмяИдентификатора = "ИдентификаторПубликации" Тогда
				ФильтрПоТоварам = ИнтеграцияСМаркетплейсомOzonСервер.НовыйФильтрЗапросаПоТоварам(Истина, Идентификаторы,,);
			ИначеЕсли ИмяИдентификатора = "ИдентификаторОбъектаМаркетплейса" Тогда
				ФильтрПоТоварам = ИнтеграцияСМаркетплейсомOzonСервер.НовыйФильтрЗапросаПоТоварам(Истина,, Идентификаторы,);
			Иначе
				// Замена ИмяИдентификатора и Идентификаторы, т.к. не во всех методах есть фильтр по SKU.
				Идентификаторы = ОписаниеТоваров.ВыгрузитьКолонку("ИдентификаторОбъектаМаркетплейса");
				ИмяИдентификатора = "ИдентификаторОбъектаМаркетплейса";

				ФильтрПоТоварам = ИнтеграцияСМаркетплейсомOzonСервер.НовыйФильтрЗапросаПоТоварам(Истина,, Идентификаторы);
				
				ИдентификаторыНовые_Поиск = Новый Массив;
				Для Каждого ИдентификаторSKU Из ИдентификаторыНовые Цикл
					СтрокаОписания = ОписаниеТоваров.Найти(ИдентификаторSKU, "ИдентификаторFBOSKU");
					Если СтрокаОписания = Неопределено Тогда
						Продолжить;
					КонецЕсли;

					ИдентификаторыНовые_Поиск.Добавить(СтрокаОписания.ИдентификаторОбъектаМаркетплейса);

					СтрокаЗаполнения = ДеревоТоваров.Строки.Найти(ИдентификаторSKU, "ИдентификаторFBOSKU", Истина);
					Если СтрокаЗаполнения <> Неопределено Тогда
						СтрокаЗаполнения.ИдентификаторОбъектаМаркетплейса = СтрокаОписания.ИдентификаторОбъектаМаркетплейса;
						СтрокаЗаполнения.ИдентификаторПубликации          = СтрокаОписания.ИдентификаторПубликации;
					КонецЕсли;
				КонецЦикла;
				ИдентификаторыНовые = ИдентификаторыНовые_Поиск;
			КонецЕсли;
			
			ОписаниеХарактеристикТоваров = ИнтеграцияСМаркетплейсомOzonСервер.ПолучитьОписаниеХарактеристикТоваров(
				УчетнаяЗаписьМаркетплейса, 
				ФильтрПоТоварам, 
				Параметры.КэшКатегорий, 
				КэшИдентификаторов,
				Отказ);
			ОписаниеХарактеристикТоваров.Индексы.Добавить(ИмяИдентификатора);
			
			Если Отказ Тогда
				Результат.Ошибка.КодОшибки      = ИнтеграцияСМаркетплейсомOzonСервер.КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
				Результат.Ошибка.ОписаниеОшибки = НСтр("ru = 'При получении описания характеристик товаров с торговой площадки возникли ошибки. Подробности см. в журнале регистрации.'");
				Возврат Результат;
			КонецЕсли;
			
			// Данные соответствия категорий
			ИдентификаторыКатегорий = ОписаниеТоваров.ВыгрузитьКолонку("ИдентификаторКатегорииМаркетплейса");
			
			Запрос = Новый Запрос;
			Запрос.Текст =
				"ВЫБРАТЬ
				|	СоответствияАтрибутовМаркетплейсов.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
				|	СоответствияАтрибутовМаркетплейсов.Категория1С КАК Категория1С,
				|	СоответствияАтрибутовМаркетплейсов.ИдентификаторКатегорииМаркетплейса КАК ИдентификаторКатегорииМаркетплейса,
				|	СоответствияАтрибутовМаркетплейсов.ИдентификаторРодителяАтрибутаМаркетплейса КАК ИдентификаторРодителяАтрибутаМаркетплейса,
				|	СоответствияАтрибутовМаркетплейсов.НаименованиеРодителяАтрибутаМаркетплейса КАК НаименованиеРодителяАтрибутаМаркетплейса,
				|	СоответствияАтрибутовМаркетплейсов.ИдентификаторАтрибутаМаркетплейса КАК ИдентификаторАтрибутаМаркетплейса,
				|	СоответствияАтрибутовМаркетплейсов.НаименованиеАтрибутаМаркетплейса КАК НаименованиеАтрибутаМаркетплейса,
				|	СоответствияАтрибутовМаркетплейсов.ОписаниеНазначенияАтрибута КАК ОписаниеНазначенияАтрибута,
				|	СоответствияАтрибутовМаркетплейсов.ОбязательныйАтрибут КАК ОбязательныйАтрибут,
				|	СоответствияАтрибутовМаркетплейсов.АспектныйАтрибут КАК АспектныйАтрибут,
				|	СоответствияАтрибутовМаркетплейсов.ЯвляетсяКоллекциейЗначений КАК ЯвляетсяКоллекциейЗначений,
				|	СоответствияАтрибутовМаркетплейсов.ДоступенВыборЗначенияИзСписка КАК ДоступенВыборЗначенияИзСписка,
				|	СоответствияАтрибутовМаркетплейсов.МаксимальноеКоличествоЗначений КАК МаксимальноеКоличествоЗначений,
				|	СоответствияАтрибутовМаркетплейсов.ТипЗначенияАтрибута КАК ТипЗначенияАтрибута,
				|	СоответствияАтрибутовМаркетплейсов.ИдентификаторЗначенияПоУмолчанию КАК ЗначениеПоУмолчаниюИдентификатор,
				|	СоответствияАтрибутовМаркетплейсов.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчаниюИзЗапроса,
				|	СоответствияАтрибутовМаркетплейсов.ЗначениеПоУмолчаниюСтрока КАК ЗначениеПоУмолчаниюСтрока,
				|	СоответствияАтрибутовМаркетплейсов.ПорядокСортировки КАК ПорядокСортировки
				|ИЗ
				|	РегистрСведений.СоответствияАтрибутовМаркетплейсов КАК СоответствияАтрибутовМаркетплейсов
				|ГДЕ
				|	СоответствияАтрибутовМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса
				|	И СоответствияАтрибутовМаркетплейсов.ИдентификаторКатегорииМаркетплейса В (&ИдентификаторыКатегорий)";

			Запрос.УстановитьПараметр("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
			Запрос.УстановитьПараметр("ИдентификаторыКатегорий",   ИдентификаторыКатегорий);
			
			УстановитьПривилегированныйРежим(Истина);
			СоответствияАтрибутовМаркетплейсов = Запрос.Выполнить().Выгрузить();
			СоответствияАтрибутовМаркетплейсов.Индексы.Добавить("УчетнаяЗаписьМаркетплейса, ИдентификаторКатегорииМаркетплейса, ИдентификаторАтрибутаМаркетплейса");
			УстановитьПривилегированныйРежим(Ложь);

			СоответствияАтрибутовМаркетплейсов.Колонки.Добавить("ЗначениеПоУмолчанию", Новый ОписаниеТипов(ИнтеграцияСМаркетплейсомOzonСервер.НовыеПростыеТипы()));
			Для Каждого СтрокаТаблицыЗначений Из СоответствияАтрибутовМаркетплейсов Цикл
				Если ЗначениеЗаполнено(СтрокаТаблицыЗначений.ЗначениеПоУмолчаниюСтрока) Тогда
					СтрокаТаблицыЗначений.ЗначениеПоУмолчанию = СтрокаТаблицыЗначений.ЗначениеПоУмолчаниюСтрока;
				Иначе
					СтрокаТаблицыЗначений.ЗначениеПоУмолчанию = СтрокаТаблицыЗначений.ЗначениеПоУмолчаниюИзЗапроса;
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			Если ИмяИдентификатора <> "ИдентификаторПубликации" И ИмяИдентификатора <> "ИдентификаторОбъектаМаркетплейса" Тогда
				// Замена ИмяИдентификатора и Идентификаторы, т.к. не во всех методах есть фильтр по SKU.
				ИмяИдентификатора = "ИдентификаторОбъектаМаркетплейса";
			КонецЕсли;
			
			ОписаниеХарактеристикТоваров       = ИнтеграцияСМаркетплейсомOzonСервер.НоваяТаблицаОписанияХарактеристикТоваров();
			СоответствияАтрибутовМаркетплейсов = Неопределено;
		КонецЕсли;
		
		Если ИдентификаторыНовые.Количество() > 0 Тогда
			// Остатки товаров
			Если ИмяИдентификатора = "ИдентификаторПубликации" Тогда
				ФильтрПоТоварам = ИнтеграцияСМаркетплейсомOzonСервер.НовыйФильтрЗапросаПоТоварам(Истина, ИдентификаторыНовые,,);
			Иначе
				ФильтрПоТоварам = ИнтеграцияСМаркетплейсомOzonСервер.НовыйФильтрЗапросаПоТоварам(Истина,, ИдентификаторыНовые,);
			КонецЕсли;
			
			ОстаткиТоваров = ИнтеграцияСМаркетплейсомOzonСервер.ПолучитьОстаткиТоваров(УчетнаяЗаписьМаркетплейса, ФильтрПоТоварам, Отказ);
			ОстаткиТоваров.Индексы.Добавить(ИмяИдентификатораИзПараметров);
			
			Если Отказ Тогда
				Результат.Ошибка.КодОшибки      = ИнтеграцияСМаркетплейсомOzonСервер.КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
				Результат.Ошибка.ОписаниеОшибки = НСтр("ru = 'При получении остатков товаров с торговой площадки возникли ошибки. Подробности см. в журнале регистрации.'");
				Возврат Результат;
			КонецЕсли;
			
		Иначе
			ОстаткиТоваров = ИнтеграцияСМаркетплейсомOzonСервер.НоваяТаблицаОстатковТоваров();
		КонецЕсли;

		Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
			"Обработка.УправлениеПродажамиНаOzon.ПолучитьИмпортируемыеДанныеСТорговойПлощадки");
	
		Если ИдентификаторыНовые.Количество() > 0 Тогда
			// Поиск номенклатурных позиций
			РазделителиСловПоиска     = ",/(";
			ПараметрыРасчетаСтавкиНДС = Новый Структура("НалогообложениеНДС, Организация, Дата", 
				ТипНалогообложенияНДС, НастройкиУчетнойЗаписи.Организация, ТекущаяДатаСеанса());
			
			РезультатПоиска = ИнтеграцияСМаркетплейсомOzonСервер.НайтиНоменклатурыХарактеристикиУпаковки(
				ИдентификаторыНовые, 
				ИмяИдентификатора,
				ОписаниеТоваров,
				ОписаниеХарактеристикТоваров,
				ПараметрыРасчетаСтавкиНДС, 
				РазделителиСловПоиска, 
				Истина);
				
			РезультатПоискаОсновныхСправочников = РезультатПоиска.ОсновныеСправочники;
			РезультатПоискаКатегорий            = Неопределено;
			
			Если РезультатПоиска.Категории <> Неопределено Тогда
				РезультатПоискаКатегорий = ИнтеграцияСМаркетплейсомOzonСервер.ВыборкаИсточникаКатегорииМаркетплейса(
					РезультатПоиска.Категории, ИсточникКатегории, УчетнаяЗаписьМаркетплейса, Ложь, Истина);
			КонецЕсли;
				
		Иначе
			РезультатПоискаОсновныхСправочников = Неопределено;
			РезультатПоискаКатегорий            = Неопределено;
		КонецЕсли;
		
		// Цены товаров
		ЦеныТоваров = ИнтеграцияСМаркетплейсомOzonСервер.ПолучитьТекущиеЦеныПоИдентификаторам(
			УчетнаяЗаписьМаркетплейса,
			Идентификаторы,
			ИмяИдентификатора);
		Если ЦеныТоваров <> Неопределено Тогда
			ЦеныТоваров.Индексы.Добавить(ИмяИдентификатора);
		КонецЕсли;
		
		// Маркируемая продукция (ТНВЭД, коды ЕАЭС)
		ИдентификаторАтрибута_ТНВЭД = ИнтеграцияСМаркетплейсомOzonКлиентСервер.КонстантыСервиса()["ИдентификаторАтрибута_ТНВЭД"];
		ОтборМаркируемаяПродукция   = Новый Структура("ИдентификаторАтрибутаМаркетплейса", ИдентификаторАтрибута_ТНВЭД);
		
		// Заполнение дерева товаров
		Если ДеревоТоваров <> Неопределено Тогда
			ИдентификаторАтрибута_Аннотация = ИнтеграцияСМаркетплейсомOzonКлиентСервер.КонстантыСервиса()["ИдентификаторАтрибута_Аннотация"];
			
			Для Каждого СтрокаДереваПервогоУровня Из ДеревоТоваров.Строки Цикл
				Для Каждого СтрокаДереваВторогоУровня Из СтрокаДереваПервогоУровня.Строки Цикл
					Если ИдентификаторыПовторные.Найти(СтрокаДереваВторогоУровня[ИмяИдентификатора]) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					СтрокаДереваВторогоУровня.Изображения.Очистить();
					СтрокаДереваВторогоУровня.ДанныеТовараИзСервиса.Очистить();
					СтрокаДереваВторогоУровня.ЗначенияРеквизитовИзСервиса.Очистить();
					СтрокаДереваВторогоУровня.ЦеныТовара = Новый Массив;

					Отбор = Новый Структура(ИмяИдентификатора, СтрокаДереваВторогоУровня[ИмяИдентификатора]);

					// Из-за замены ИмяИдентификатора.
					ЕстьПодмена = (ИмяИдентификатораИзПараметров <> ИмяИдентификатора);
					Если ЕстьПодмена Тогда
						ОтборОписания = Новый Структура("ИдентификаторFBOSKU", СтрокаДереваВторогоУровня["ИдентификаторFBOSKU"]);
					Иначе
						ОтборОписания = Новый Структура(ИмяИдентификатора, СтрокаДереваВторогоУровня[ИмяИдентификатора]);
					КонецЕсли;
					
					// Цены товаров
					Если ЦеныТоваров <> Неопределено Тогда
						НайденныеСтрокиЦеныТоваров = ЦеныТоваров.НайтиСтроки(Отбор);
						Для Каждого ЭлементКоллекции Из НайденныеСтрокиЦеныТоваров Цикл
							СтрокаДереваВторогоУровня.ЦеныТовара.Добавить(ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ЭлементКоллекции));
						КонецЦикла;
					КонецЕсли;

					// Описание товаров
					НайденныеСтрокиОписаниеТоваров = ОписаниеТоваров.НайтиСтроки(ОтборОписания);
					
					Если ЗначениеЗаполнено(СтрокаДереваВторогоУровня[?(ЕстьПодмена, "ИдентификаторFBOSKU", ИмяИдентификатора)])
							И НайденныеСтрокиОписаниеТоваров.Количество() > 0 Тогда
						// Заполнить строки дерева
						Если СтрокаДереваВторогоУровня.ВариантЗагрузки = 2 Тогда 
							ЗаполнитьЗначенияСвойств(СтрокаДереваВторогоУровня, НайденныеСтрокиОписаниеТоваров[0],, "Изображения");
						КонецЕсли;
						
						// Изображения
						СтрокаДереваВторогоУровня.Изображения = НайденныеСтрокиОписаниеТоваров[0].Изображения.Скопировать();
						
						// Данные из сервиса
						ЗаполнитьЗначенияСвойств(СтрокаДереваВторогоУровня.ДанныеТовараИзСервиса.Добавить(), НайденныеСтрокиОписаниеТоваров[0]);
						
						НайденныеСтрокиОписаниеХарактеристикТоваров = ОписаниеХарактеристикТоваров.НайтиСтроки(Отбор);
						Если НайденныеСтрокиОписаниеХарактеристикТоваров.Количество() > 0 Тогда
							НайденныеСтрокиОписаниеХарактеристикТоваров[0].ИдентификаторКатегорииМаркетплейса = НайденныеСтрокиОписаниеТоваров[0].ИдентификаторКатегорииМаркетплейса;
							НайденныеСтрокиОписаниеХарактеристикТоваров[0].ЗначенияАтрибутов.ЗаполнитьЗначения(НайденныеСтрокиОписаниеТоваров[0].ИдентификаторКатегорииМаркетплейса, "ИдентификаторКатегорииМаркетплейса");
							НайденныеСтрокиОписаниеХарактеристикТоваров[0].ЗначенияАтрибутов.ЗаполнитьЗначения(НайденныеСтрокиОписаниеТоваров[0].НаименованиеКатегорииМаркетплейса, "НаименованиеКатегорииМаркетплейса");
							
							СтрокаДереваВторогоУровня.ЗначенияРеквизитовИзСервиса = НайденныеСтрокиОписаниеХарактеристикТоваров[0].ЗначенияАтрибутов.Скопировать();
						КонецЕсли;
						
						// Остатки и схемы работы
						Если СтрокаДереваВторогоУровня.ВариантЗагрузки = 2 Тогда 
							ОстатокFBO = 0;
							РезервFBO  = 0;
							ОстатокFBS = 0;
							РезервFBS  = 0;
							
							НайденныеСтрокиОстаткиТоваров = ОстаткиТоваров.НайтиСтроки(Отбор);
							Для Каждого ЭлементКоллекции Из НайденныеСтрокиОстаткиТоваров Цикл
								Если ЭлементКоллекции.ТипСкладаМаркетплейса = "FBO" Тогда
									ОстатокFBO = ОстатокFBO + ЭлементКоллекции.КоличествоВНаличии;
									РезервFBO  = РезервFBO  + ЭлементКоллекции.КоличествоЗарезервировано;
								ИначеЕсли ЭлементКоллекции.ТипСкладаМаркетплейса = "FBS" Тогда
									ОстатокFBS = ОстатокFBS + ЭлементКоллекции.КоличествоВНаличии;
									РезервFBS  = РезервFBS  + ЭлементКоллекции.КоличествоЗарезервировано;
								КонецЕсли;
							КонецЦикла;
						
							СтрокаДереваВторогоУровня.ДатаАктуальностиОстатковМаркетплейса = ТекущаяДатаСеанса();
							СтрокаДереваВторогоУровня.ОстатокFBO                           = ОстатокFBO;
							СтрокаДереваВторогоУровня.РезервFBO                            = РезервFBO;
							СтрокаДереваВторогоУровня.ОстатокFBS                           = ОстатокFBS;
							СтрокаДереваВторогоУровня.РезервFBS                            = РезервFBS;
							СтрокаДереваВторогоУровня.ПродаетсяПоСхемеРаботыFBS            = (ОстатокFBS > 0) Или (РезервFBS > 0);
						КонецЕсли;
						
						Если НайденныеСтрокиОписаниеХарактеристикТоваров.Количество() > 0
								И НайденныеСтрокиОписаниеХарактеристикТоваров[0].ФильтрВидимости = "ARCHIVED" Тогда
							СтрокаДереваВторогоУровня.ДанныеТовараИзСервиса[0].Статус = Перечисления.СтатусыОбъектовМаркетплейсаOzon.ВАрхиве;
						КонецЕсли;
						
						Если СтрокаДереваВторогоУровня.ВариантЗагрузки = 2 Тогда
							СтрокаДереваВторогоУровня.Пометка       = (Параметры.ВариантЗагрузкиДанных >= 1);
							СтрокаДереваВторогоУровня.ИндексСтатуса = 6;

							// Подобрать номенклатуру, характеристику, упаковку
							РезультатПоиска = ИнтеграцияСМаркетплейсомOzonСервер.ОпределитьНоменклатуруХарактеристикуУпаковку(
								РезультатПоискаОсновныхСправочников,
								УчетнаяЗаписьМаркетплейса,
								СтрокаДереваВторогоУровня[?(ЕстьПодмена, "ИдентификаторFBOSKU", ИмяИдентификатора)],
								ИмяИдентификатора);
							
							СтрокаДереваВторогоУровня.Номенклатура                              = РезультатПоиска.Номенклатура;
							СтрокаДереваВторогоУровня.ХарактеристикиИспользуются                = РезультатПоиска.ХарактеристикиИспользуются;
							СтрокаДереваВторогоУровня.Характеристика                            = РезультатПоиска.Характеристика;
							СтрокаДереваВторогоУровня.ИспользоватьУпаковки                      = РезультатПоиска.ИспользоватьУпаковки;
							СтрокаДереваВторогоУровня.Упаковка                                  = РезультатПоиска.Упаковка;
							СтрокаДереваВторогоУровня.ЕдиницаИзмерения                          = РезультатПоиска.ЕдиницаИзмерения;
							СтрокаДереваВторогоУровня.ИсточникКатегорииМаркетплейса             = РезультатПоиска.Категория;
							СтрокаДереваВторогоУровня.Категория                                 = РезультатПоиска.Категория;
							СтрокаДереваВторогоУровня.ТекущееИдентификаторКатегорииМаркетплейса = СтрокаДереваВторогоУровня.ИдентификаторКатегорииМаркетплейса;
							СтрокаДереваВторогоУровня.ТекущееНаименованиеКатегорииМаркетплейса  = СтрокаДереваВторогоУровня.НаименованиеКатегорииМаркетплейса;
							СтрокаДереваВторогоУровня.СтавкаНДС                                 = РезультатПоиска.СтавкаНДС;
							СтрокаДереваВторогоУровня.Ставка                                    = РезультатПоиска.Ставка;
							СтрокаДереваВторогоУровня.ЭтоМаркируемаяПродукция 					= РезультатПоиска.ЭтоМаркируемаяПродукция;
							
							Если РезультатПоискаКатегорий <> Неопределено
									И ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Категория) Тогда
								Отбор = Новый Структура("Категория1С, ИдентификаторОбъектаМаркетплейса", СтрокаДереваВторогоУровня.Категория, СтрокаДереваВторогоУровня.ИдентификаторКатегорииМаркетплейса);
								РезультатПоискаКатегорий.Сбросить();
								Если РезультатПоискаКатегорий.НайтиСледующий(Отбор) Тогда
									СтрокаДереваВторогоУровня.ИсточникКатегорииМаркетплейса             = РезультатПоискаКатегорий.РодительКатегории1С;
									СтрокаДереваВторогоУровня.Категория                                 = РезультатПоискаКатегорий.Категория1С;
									СтрокаДереваВторогоУровня.ТекущееИдентификаторКатегорииМаркетплейса = РезультатПоискаКатегорий.ИдентификаторОбъектаМаркетплейса;
									СтрокаДереваВторогоУровня.ТекущееНаименованиеКатегорииМаркетплейса  = РезультатПоискаКатегорий.НаименованиеОбъектаМаркетплейса;
								КонецЕсли;
							КонецЕсли;
							
						Иначе
							СтрокаДереваВторогоУровня.Пометка       = Ложь;
							СтрокаДереваВторогоУровня.ИндексСтатуса = 7;
						КонецЕсли;
						
						Если Не ЗначениеЗаполнено(СтрокаДереваВторогоУровня.НаименованиеКатегорииМаркетплейса) Тогда
							СтрокаДереваВторогоУровня.ДанныеТовараИзСервиса[0].Статус         = Перечисления.СтатусыОбъектовМаркетплейсаOzon.ЗагруженСОшибками; 
							СтрокаДереваВторогоУровня.ДанныеТовараИзСервиса[0].ОписаниеОшибки = НСтр("ru = 'Отсутствуют данные об атрибутах товара. Необходимо настроить соответствие категорий и после этого перевыбрать номенклатуру для заполнения категории торговой площадки.'") 
								+ " " + СтрокаДереваВторогоУровня.ДанныеТовараИзСервиса[0].ОписаниеОшибки;
								
							Если СтрокаДереваВторогоУровня.ВариантЗагрузки = 2 Тогда
								СтрокаДереваВторогоУровня.Статус         = Перечисления.СтатусыОбъектовМаркетплейсаOzon.ЗагруженСОшибками; 
								СтрокаДереваВторогоУровня.ОписаниеОшибки = НСтр("ru = 'Отсутствуют данные об атрибутах товара. Необходимо настроить соответствие категорий и после этого перевыбрать номенклатуру для заполнения категории торговой площадки.'") 
									+ " " + СтрокаДереваВторогоУровня.ОписаниеОшибки;
							КонецЕсли;
						КонецЕсли;

					Иначе
						СтрокаДереваВторогоУровня.Пометка       = Ложь;
						СтрокаДереваВторогоУровня.ИндексСтатуса = 4;
					КонецЕсли;
					
					// Значения реквизитов
					ИнтеграцияСМаркетплейсомOzonСервер.ДополнитьТаблицуЗначенийРеквизитов(
						УчетнаяЗаписьМаркетплейса,
						СтрокаДереваВторогоУровня.ЗначенияРеквизитовИзСервиса,
						Параметры.КэшКатегорий,
						СоответствияАтрибутовМаркетплейсов,
						СтрокаДереваВторогоУровня.Категория,
						СтрокаДереваВторогоУровня.ДанныеОбъекта,
						Истина);
						
					// Маркируемая продукция (ТНВЭД, коды ЕАЭС)
					Если СтрокаДереваВторогоУровня.ЭтоМаркируемаяПродукция Тогда
						НайденныеСтроки = СтрокаДереваВторогоУровня.ЗначенияРеквизитовИзСервиса.НайтиСтроки(ОтборМаркируемаяПродукция);
						Если НайденныеСтроки.Количество() > 0 Тогда
							НайденныеСтроки[0].ОбязательныйАтрибут        = Истина;
							НайденныеСтроки[0].ТекущееОбязательныйАтрибут = Истина;
						КонецЕсли;
					КонецЕсли;
					
					Если СтрокаДереваВторогоУровня.ДанныеТовараИзСервиса.Количество() > 0 Тогда
						// Описание товара
						Если Не ЗначениеЗаполнено(СтрокаДереваВторогоУровня.ДанныеТовараИзСервиса[0].ОписаниеОбъектаМаркетплейса) Тогда
							// Аннотация (описание)
							НайденныеСтроки = СтрокаДереваВторогоУровня.ЗначенияРеквизитовИзСервиса.НайтиСтроки(Новый Структура("ИдентификаторАтрибутаМаркетплейса", ИдентификаторАтрибута_Аннотация));
							Если НайденныеСтроки.Количество() > 0 Тогда
								СтрокаДереваВторогоУровня.ДанныеТовараИзСервиса[0].ОписаниеОбъектаМаркетплейса = НайденныеСтроки[0].ЗначениеАтрибутаМаркетплейса;
								Если СтрокаДереваВторогоУровня.ВариантЗагрузки = 2 Тогда 
									СтрокаДереваВторогоУровня.ОписаниеОбъектаМаркетплейса = НайденныеСтроки[0].ЗначениеАтрибутаМаркетплейса;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
						// Объединение в одну карточку
						Отбор = Новый Структура("НаименованиеАтрибутаМаркетплейса", "Объединить на одной карточке");
						НайденныеСтроки = СтрокаДереваВторогоУровня.ЗначенияРеквизитовИзСервиса.НайтиСтроки(Отбор);
						Если НайденныеСтроки.Количество() = 0 Тогда
							Отбор = Новый Структура("НаименованиеАтрибутаМаркетплейса", "Combine into One PDP");
							НайденныеСтроки = СтрокаДереваВторогоУровня.ЗначенияРеквизитовИзСервиса.НайтиСтроки(Отбор);
						КонецЕсли;
						Если НайденныеСтроки.Количество() > 0 Тогда
							СтрокаДереваВторогоУровня.ДанныеТовараИзСервиса[0].ОбъединяетсяВОднуКарточку        = Истина;
							СтрокаДереваВторогоУровня.ДанныеТовараИзСервиса[0].ЗначениеОбъединенияВОднуКарточку = НайденныеСтроки[0].ЗначениеАтрибутаМаркетплейса;
							Если СтрокаДереваВторогоУровня.ВариантЗагрузки = 2 Тогда 
								СтрокаДереваВторогоУровня.ОбъединяетсяВОднуКарточку        = Истина;
								СтрокаДереваВторогоУровня.ЗначениеОбъединенияВОднуКарточку = НайденныеСтроки[0].ЗначениеАтрибутаМаркетплейса;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
						
					// Дерево реквизитов
					СтрокаДереваВторогоУровня.ДеревоРеквизитов = ИнтеграцияСМаркетплейсомOzonСервер.СформироватьДеревоРеквизитов(
						УчетнаяЗаписьМаркетплейса,
						СтрокаДереваВторогоУровня.ЗначенияРеквизитовИзСервиса,
						СтрокаДереваВторогоУровня,
						СтрокаДереваВторогоУровня.ЦеныТовара,
						НастройкиУчетнойЗаписи,
						ВидыЦен);
						
					// Различия
					Если СтрокаДереваВторогоУровня.ВариантЗагрузки = 0 
							И СтрокаДереваВторогоУровня.ИндексСтатуса <> 4 Тогда
						Отбор = Новый Структура("ЕстьРазличия, ИдентификаторАтрибутаМаркетплейса", Истина, "СтавкаНДС");
						ЕстьРазличияСтавкаНДС = СтрокаДереваВторогоУровня.ДеревоРеквизитов.Строки.НайтиСтроки(Отбор, Истина).Количество();
						СтрокаДереваВторогоУровня.ЕстьРазличияСтавкаНДС = (ЕстьРазличияСтавкаНДС > 0);
						
						Отбор = Новый Структура("ЕстьРазличия, ИдентификаторАтрибутаМаркетплейса", Истина, "ИдентификаторКатегорииМаркетплейса");
						НайденныеСтрокиРазличия = СтрокаДереваВторогоУровня.ДеревоРеквизитов.Строки.НайтиСтроки(Отбор, Истина);
						ЕстьРазличияКатегорииOzon = НайденныеСтрокиРазличия.Количество();
						СтрокаДереваВторогоУровня.ЕстьРазличияКатегорииOzon = (ЕстьРазличияКатегорииOzon > 0);
						Для Каждого ЭлементКоллекции Из НайденныеСтрокиРазличия Цикл
							Если СтрНайти(ЭлементКоллекции.ИдентификаторКатегорииМаркетплейса, "_") = 0 Тогда
								ЕстьРазличияКатегорииOzon = ЕстьРазличияКатегорииOzon - 1;
							КонецЕсли;
						КонецЦикла;

						Отбор = Новый Структура("ЕстьРазличия, ЦеновыеПоказатели", Истина, Истина);
						ЕстьРазличияЦеновыеПоказатели = СтрокаДереваВторогоУровня.ДеревоРеквизитов.Строки.НайтиСтроки(Отбор, Истина).Количество();
						СтрокаДереваВторогоУровня.ЕстьРазличияЦеновыеПоказатели = (ЕстьРазличияЦеновыеПоказатели > 0);
						
						Отбор = Новый Структура("ЕстьРазличия", Истина);
						ЕстьРазличия = СтрокаДереваВторогоУровня.ДеревоРеквизитов.Строки.НайтиСтроки(Отбор, Истина).Количество() - ЕстьРазличияСтавкаНДС - ЕстьРазличияКатегорииOzon - ЕстьРазличияЦеновыеПоказатели;
						
						Если ЕстьРазличия > 0 Тогда
							СтрокаДереваВторогоУровня.Пометка       = (Параметры.ВариантЗагрузкиДанных <= 1);
							СтрокаДереваВторогоУровня.ИндексСтатуса = 6;
						ИначеЕсли Параметры.ЗагрузитьЦеныПродажи И (ЕстьРазличияЦеновыеПоказатели > 0) Тогда
							СтрокаДереваВторогоУровня.Пометка = (Параметры.ВариантЗагрузкиДанных <= 1);
						КонецЕсли;
						
					Иначе
						Отбор = Новый Структура("ЕстьРазличия, ИдентификаторАтрибутаМаркетплейса", Истина, "СтавкаНДС");
						ЕстьРазличияСтавкаНДС = СтрокаДереваВторогоУровня.ДеревоРеквизитов.Строки.НайтиСтроки(Отбор, Истина).Количество();
						СтрокаДереваВторогоУровня.ЕстьРазличияСтавкаНДС = (ЕстьРазличияСтавкаНДС > 0);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			Для Каждого СтрокаДереваПервогоУровня Из ДеревоТоваров.Строки Цикл
				Если СтрокаДереваПервогоУровня.ВариантЗагрузки = 2 
						Или СтрокаДереваПервогоУровня.ВариантЗагрузки = 3 Тогда
					Продолжить;
				КонецЕсли;
				
				Индекс = 0;
				
				Пока Индекс < СтрокаДереваПервогоУровня.Строки.Количество() Цикл
					СтрокаДереваВторогоУровня = СтрокаДереваПервогоУровня.Строки[Индекс];
					
					Если СтрокаДереваВторогоУровня.ИндексСтатуса = 4 Тогда
						Если СтрокаДереваГруппаОшибки = Неопределено Тогда
							СтрокаДереваГруппаОшибки                 = ДеревоТоваров.Строки.Вставить(Мин(3, ДеревоТоваров.Строки.Количество()));
							СтрокаДереваГруппаОшибки.ВариантЗагрузки = 3;
							СтрокаДереваГруппаОшибки.ИндексСтатуса   = -2;
						КонецЕсли;
						
						ПеренестиСтрокуДереваТоваровВДругуюГруппу(ДеревоТоваров, СтрокаДереваВторогоУровня, СтрокаДереваГруппаОшибки);
						
					Иначе
						Индекс = Индекс + 1;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			ОпределитьНаименованияГруппДереваТоваров(
				ДеревоТоваров, 
				Параметры.СортироватьСтрокиДереваТоваров, 
				Параметры.ОтображатьСопоставленные,
				Параметры.ОтображатьПоСтатусу);
		КонецЕсли;
		
		Если ДеревоТоваров <> Неопределено Тогда
			Результат.Вставить("ДеревоТоваров", ДеревоТоваров);
		Иначе
			Результат.Вставить("ОписаниеТоваров",              ОписаниеТоваров);
			Результат.Вставить("ОписаниеХарактеристикТоваров", ОписаниеХарактеристикТоваров);
			Результат.Вставить("ОстаткиТоваров",               ОстаткиТоваров);
			Результат.Вставить("ЦеныТоваров",                  ЦеныТоваров);
		КонецЕсли;
		Если ЗначениеЗаполнено(Параметры.КэшКатегорий) Тогда
			Результат.Вставить("КэшКатегорий", Параметры.КэшКатегорий);
		КонецЕсли;
		Результат.Вставить("ИдентификаторыТоваров", Параметры.ИдентификаторыТоваров);
		
	Исключение
		Отказ = Истина;
		ЗаписьЖурналаРегистрации(ИнтеграцияСМаркетплейсомOzonСервер.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

	Если Отказ Тогда
		Результат.Ошибка.КодОшибки      = ИнтеграцияСМаркетплейсомOzonСервер.КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
		Результат.Ошибка.ОписаниеОшибки = НСтр("ru = 'При импорте данных с торговой площадки возникли ошибки. Подробности см. в журнале регистрации.'");
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(
		Замер, 
		Идентификаторы.Количество() / 10);
	
	Возврат Результат;

КонецФункции

// Записывает загруженные данные с торговой площадки в информационную базу.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису;
//   ДеревоТоваров             - ДеревоЗначений - структура дерева описана в реквизите "ИмпортируемыеТовары", 
//                                 см. Обработка.УправлениеПродажамиНаOzon.Форма.ИмпортДанныхТоваровСТорговойПлощадки.
//   Параметры                 - Структура - параметры выполнения функции:
//     * ВариантЗагрузкиДанных          - Число - вариант загрузки данных из сервиса, см. реквизит "ВариантЗагрузкиДанных" в
//                                          Обработка.УправлениеПродажамиНаOzon.Форма.ИмпортДанныхТоваровСТорговойПлощадки.
//     * ЗагрузитьЦеныПродажи           - Булево - признак записи цен, см. реквизит "ЗагрузитьЦеныПродажи" в
//                                          Обработка.УправлениеПродажамиНаOzon.Форма.ИмпортДанныхТоваровСТорговойПлощадки.
//     * ЗаписатьТолькоЦены             - Булево - Истина, если необходимо записать только цены товаров.
//     * ТолькоСоздатьНоменклатуру      - Булево - Истина, если необходимо только создать элементы справочника "Номенклатура".
//     * ЗагрузитьИзображения           - Булево - Истина, если необходимо загрузить изображения товаров.
//     * ИмяИдентификатора              - Строка - имя ключевого поля идентификаторов. Может принимать значения:
//                                          "ИдентификаторОбъектаМаркетплейса" и "ИдентификаторПубликации". 
//     * РазмерПорцииЗагрузкиДанных     - Число - размер порции загрузки данных с торговой площадки за один запрос;
//                                      - Неопределено - размер порции для загрузки не ограничен.
//     * СоздатьЭлементыНоменклатуры    - Булево - Истина, если несопоставленные элементы справочника "Номенклатура" необходимо создать.
//     * СортироватьСтрокиДереваТоваров - Булево - Истина, если после загрузки требуется отсортировать строки второго уровня дерева товаров.
//     * ОтображатьСопоставленные       - Число - установленный фильтр по сопоставленным позициям дерева товаров.
//     * ОтображатьПоСтатусу            - Число - установленный фильтр по статусу позиций дерева товаров.
//
// Возвращаемое значение:
//   Структура - результат выполнения функции:
//     * Ошибка         - Структура - код и описание ошибки при выполнении функции, 
//                          см. ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка.
//     * ДеревоТоваров  - ДеревоЗначений - заполненное дерево товаров, см. реквизит "ИмпортируемыеТовары" в 
//                          Обработка.УправлениеПродажамиНаOzon.Форма.ИмпортДанныхТоваровСТорговойПлощадки.
//     * Записано       - Число - количество записанных данных;
//     * ВТомЧислеНовых - Число - количество новых записанных данных;
//     * НеЗаписано     - Число - количество данных с ошибками записи;
//     * Пропущено      - Массив Из Структура - информация о пропущенных записях:
//       ** НомерСтроки   - Число - номер строки дерева товаров;
//       ** Сообщение     - Строка - описание ошибки.
//     * ЗагруженыЦены  - Булево - в результате выполнения функции были загружены цены товаров.
//
Функция ЗаписатьЗагруженныеДанныеСТорговойПлощадки(Знач УчетнаяЗаписьМаркетплейса, ДеревоТоваров, Знач Параметры) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибка",         ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка());
    Результат.Вставить("ДеревоТоваров",  ДеревоТоваров);
    Результат.Вставить("Записано",       0);
    Результат.Вставить("ВТомЧислеНовых", 0);
    Результат.Вставить("НеЗаписано",     0);
    Результат.Вставить("Пропущено",      Новый Массив);
    Результат.Вставить("ЗагруженыЦены",  Параметры.ЗагрузитьЦеныПродажи Или Параметры.ЗаписатьТолькоЦены);
	
	Если Не ЗначениеЗаполнено(УчетнаяЗаписьМаркетплейса) Тогда
		Результат.Ошибка.КодОшибки      = ИнтеграцияСМаркетплейсомOzonСервер.КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
		Результат.Ошибка.ОписаниеОшибки = НСтр("ru = 'Не указана учетная запись торговой площадки для импорта данных по товарам.'");
		Возврат Результат;
	КонецЕсли; 
	
	ДоступнаУстановкаЦен = ПравоДоступа("Проведение", Метаданные.Документы.УстановкаЦенНоменклатуры);
	
	Если Не ДоступнаУстановкаЦен Тогда
		Результат.Вставить("ЗагруженыЦены", Ложь);
		
		Если Параметры.ЗаписатьТолькоЦены Тогда
			Результат.Ошибка.КодОшибки      = ИнтеграцияСМаркетплейсомOzonСервер.КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
			Результат.Ошибка.ОписаниеОшибки = НСтр("ru = 'Для пользователя не доступна установка цен номенклатуры.'");
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Отказ = Ложь;
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"Обработка.УправлениеПродажамиНаOzon.ЗаписатьЗагруженныеДанныеСТорговойПлощадки");
	
	ТипНалогообложенияНДС  = ?(ПолучитьФункциональнуюОпцию("ИспользоватьУчетНДС"), Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС, Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС);
	НастройкиУчетнойЗаписи = Справочники.УчетныеЗаписиМаркетплейсов.НастройкиУчетнойЗаписи(УчетнаяЗаписьМаркетплейса);
	ВидыЦен                = ИнтеграцияСМаркетплейсомOzonСервер.ВидыЦенУчетнойЗаписи(УчетнаяЗаписьМаркетплейса, Истина, Истина);
	ИсточникКатегории      = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗаписьМаркетплейса, "ИсточникКатегории");
	
	Попытка
		ТаблицаТоваров    = ИнтеграцияСМаркетплейсомOzonСервер.СведенияОВыгруженныхДанных();
		Идентификаторы    = Новый Массив;	// Массив Из Строка -
		ИмяИдентификатора = Параметры.ИмяИдентификатора;
		ИмяИдентификатора = ?(ИмяИдентификатора = "ИдентификаторSKU", "ИдентификаторОбъектаМаркетплейса", ИмяИдентификатора);
		
		МассивПолейТаблицыТоваров = Новый Массив;
		Для Каждого Колонка Из ТаблицаТоваров.Колонки Цикл
			МассивПолейТаблицыТоваров.Добавить(Колонка.Имя);
		КонецЦикла;
		ПоляТаблицыТоваров = СтрСоединить(МассивПолейТаблицыТоваров, ", "); // Строка
		
		ВсегоОтмечено       = 0;
		ВсегоНеПолучено     = 0;
		ВсегоНеСопоставлено = 0;
		
		Для Каждого СтрокаДереваПервогоУровня Из ДеревоТоваров.Строки Цикл
			Если СтрокаДереваПервогоУровня.ВариантЗагрузки = 0 Тогда
				// СтрокаДереваГруппаОбновить 
			ИначеЕсли СтрокаДереваПервогоУровня.ВариантЗагрузки = 2 Тогда
				// СтрокаДереваГруппаЗагрузить 
			Иначе
				Продолжить;
			КонецЕсли;
				
			Индекс = 0;
			Пока Индекс < СтрокаДереваПервогоУровня.Строки.Количество() Цикл
				СтрокаДереваВторогоУровня = СтрокаДереваПервогоУровня.Строки[Индекс];
				
				// Дополнительные фильтры
				Если Параметры.ОтображатьСопоставленные = 1
						И (Не ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Номенклатура) 
							Или СтрокаДереваВторогоУровня.ХарактеристикиИспользуются
								И Не ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Характеристика)
							Или Не ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Категория)) Тогда
					Индекс = Индекс + 1;
					Продолжить;
					
				ИначеЕсли Параметры.ОтображатьСопоставленные = 2
							И ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Номенклатура) 
							И (Не СтрокаДереваВторогоУровня.ХарактеристикиИспользуются
								Или ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Характеристика))
							И ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Категория) Тогда
					Индекс = Индекс + 1;
					Продолжить;
				КонецЕсли;
				
				Если Параметры.ОтображатьПоСтатусу <> -1
						И СтрокаДереваВторогоУровня.ИндексСтатуса <> Параметры.ОтображатьПоСтатусу Тогда
					Индекс = Индекс + 1;
					Продолжить;
				КонецЕсли;

				// Отмеченные позиции
				Если СтрокаДереваВторогоУровня.Пометка Тогда
					ВсегоОтмечено = ВсегоОтмечено + 1;
					Если СтрокаДереваВторогоУровня.ИндексСтатуса = 5 Тогда
						ВсегоНеПолучено = ВсегоНеПолучено + 1;
					КонецЕсли;
					Если Не ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Номенклатура) И Не Параметры.СоздатьЭлементыНоменклатуры Тогда
						ВсегоНеСопоставлено = ВсегоНеСопоставлено + 1;
					КонецЕсли;
				КонецЕсли;
				
				Если Не СтрокаДереваВторогоУровня.Пометка 
						Или Не ЗначениеЗаполнено(СтрокаДереваВторогоУровня.ИдентификаторПубликации)
						Или СтрокаДереваВторогоУровня.ВариантЗагрузки = 0 И Параметры.ВариантЗагрузкиДанных = 2
						Или СтрокаДереваВторогоУровня.ВариантЗагрузки = 2 И Параметры.ВариантЗагрузкиДанных = 0
						Или СтрокаДереваВторогоУровня.ВариантЗагрузки = 3 
						Или СтрокаДереваВторогоУровня.ИндексСтатуса = 4 
						Или СтрокаДереваВторогоУровня.ИндексСтатуса = 5
						Или Не ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Номенклатура) И Не Параметры.СоздатьЭлементыНоменклатуры Тогда
					Индекс = Индекс + 1;
					Продолжить;
				КонецЕсли;
				
				Если Параметры.ЗаписатьТолькоЦены 
						И Не ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Номенклатура) Тогда
					Индекс = Индекс + 1;
					Продолжить;
				КонецЕсли;
				
				// Создать номенклатуру
				Если СтрокаДереваВторогоУровня.ВариантЗагрузки = 2 
						И Не ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Номенклатура) 
						И (Параметры.СоздатьЭлементыНоменклатуры 
							Или Параметры.ТолькоСоздатьНоменклатуру) Тогда
					НачатьТранзакцию();
					
					Попытка  
						Номенклатура                    = Справочники.Номенклатура.СоздатьЭлемент();
						Номенклатура.ТипНоменклатуры    = Перечисления.ТипыНоменклатуры.Товар;
						Номенклатура.Наименование       = СтрокаДереваВторогоУровня.ПредставлениеОбъектаМаркетплейса;
						Номенклатура.НаименованиеПолное = СтрокаДереваВторогоУровня.ПредставлениеОбъектаМаркетплейса;
						Номенклатура.Описание           = СтрокаДереваВторогоУровня.ОписаниеОбъектаМаркетплейса;
						Номенклатура.Артикул            = СтрокаДереваВторогоУровня.ИдентификаторПубликации;
						
						Номенклатура.ОбменДанными.Загрузка = Истина;
						Номенклатура.Записать();
						
						СтрокаДереваВторогоУровня.Номенклатура                    = Номенклатура.Ссылка;
						СтрокаДереваВторогоУровня.НаименованиеОбъектаМаркетплейса = Номенклатура.Наименование;
						
						ТекущаяКатегория = ИнтеграцияСМаркетплейсомOzonСервер.ОпределитьТекущуюСопоставленнуюКатегориюМаркетплейсаПоНоменклатуре(
							УчетнаяЗаписьМаркетплейса,
							СтрокаДереваВторогоУровня.Номенклатура,
							СтрокаДереваВторогоУровня.ИдентификаторКатегорииМаркетплейса,
							ИсточникКатегории);
								
						СтрокаДереваВторогоУровня.Категория                                 = ТекущаяКатегория.Категория;
						СтрокаДереваВторогоУровня.ИсточникКатегорииМаркетплейса             = ТекущаяКатегория.ИсточникКатегории;
						СтрокаДереваВторогоУровня.ТекущееИдентификаторКатегорииМаркетплейса = ТекущаяКатегория.ИдентификаторКатегории;
						СтрокаДереваВторогоУровня.ТекущееНаименованиеКатегорииМаркетплейса  = ТекущаяКатегория.НаименованиеКатегории;
						 
						СтруктураДействий = Новый Структура;
						СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу",    СтрокаДереваВторогоУровня.Характеристика);
						СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", СтрокаДереваВторогоУровня.Упаковка);
						СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",                    Новый Структура("НалогообложениеНДС, Организация, Дата", 
							ТипНалогообложенияНДС, НастройкиУчетнойЗаписи.Организация, ТекущаяДатаСеанса()));

						ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаДереваВторогоУровня, СтруктураДействий, Неопределено);
						ЗаполнитьЗначенияСвойств(СтрокаДереваВторогоУровня, ОбщегоНазначенияУТВызовСервера.ЗначенияРеквизитовОбъекта(СтрокаДереваВторогоУровня.Номенклатура, "ИспользоватьУпаковки, ЕдиницаИзмерения"));
						
						ЗафиксироватьТранзакцию();
						
					Исключение
						ОтменитьТранзакцию();
						
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'При создании новой номенклатурной позиции %1 возникла ошибка: %2.'", 
								ОбщегоНазначения.КодОсновногоЯзыка()),
							СтрокаДереваВторогоУровня.ПредставлениеОбъектаМаркетплейса,
							ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
						ЗаписьЖурналаРегистрации(ИнтеграцияСМаркетплейсомOzonСервер.СобытиеЖурналаРегистрации(),
							УровеньЖурналаРегистрации.Ошибка,,,
							ТекстСообщения);
							
						Результат.Пропущено.Добавить(Новый Структура("НомерСтроки, Сообщение",
							Индекс + 1, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Ошибка создания новой номенклатурной позиции %1.'"),
								СтрокаДереваВторогоУровня.ПредставлениеОбъектаМаркетплейса)));
						Результат.НеЗаписано = Результат.НеЗаписано + 1;
						Индекс = Индекс + 1;
						Продолжить;
					КонецПопытки;
				КонецЕсли;
				
				Если Параметры.ТолькоСоздатьНоменклатуру Тогда
					СтрокаДереваВторогоУровня.Пометка       = Ложь;
					СтрокаДереваВторогоУровня.ИндексСтатуса = СтрокаДереваВторогоУровня.ИндексСтатуса - 100;
					
					Индекс = Индекс + 1;
					Продолжить;
				КонецЕсли;
				
				Если Параметры.ЗагрузитьЦеныПродажи Или Параметры.ЗаписатьТолькоЦены Тогда
					ЗаполнитьЗначенияСвойств(ТаблицаТоваров.Добавить(), СтрокаДереваВторогоУровня);
					Идентификаторы.Добавить(СтрокаДереваВторогоУровня[ИмяИдентификатора]);
				
					Если Параметры.ЗаписатьТолькоЦены Тогда
						СтрокаДереваВторогоУровня.Пометка       = Ложь;
						СтрокаДереваВторогоУровня.ИндексСтатуса = СтрокаДереваВторогоУровня.ИндексСтатуса - 100;
						
						Индекс = Индекс + 1;
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				// Изображения
				Если Параметры.ЗагрузитьИзображения Тогда
					НачатьТранзакцию();
					
					Попытка
						Записать = Ложь;
						
						Если СтрокаДереваВторогоУровня.Изображения.Колонки.Найти("Обработано") = Неопределено Тогда
							СтрокаДереваВторогоУровня.Изображения.Колонки.Добавить("Обработано", Новый ОписаниеТипов("Булево"));
						КонецЕсли;
						СтрокаДереваВторогоУровня.Изображения.ЗаполнитьЗначения(Ложь, "Обработано");
						
						БлокировкаДанных = Новый БлокировкаДанных;
						ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon");
						ЭлементБлокировкиДанных.УстановитьЗначение("УчетнаяЗаписьМаркетплейса", СтрокаДереваВторогоУровня.УчетнаяЗаписьМаркетплейса);
						ЭлементБлокировкиДанных.УстановитьЗначение("ВидОбъектаМаркетплейса",    Перечисления.ВидыОбъектовМаркетплейсов.Изображение);
						ЭлементБлокировкиДанных.УстановитьЗначение("Номенклатура",              СтрокаДереваВторогоУровня.Номенклатура);
						ЭлементБлокировкиДанных.УстановитьЗначение("Характеристика",            СтрокаДереваВторогоУровня.Характеристика);
						ЭлементБлокировкиДанных.УстановитьЗначение("Упаковка",                  СтрокаДереваВторогоУровня.Упаковка);
						БлокировкаДанных.Заблокировать();

						НаборЗаписей = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьНаборЗаписей();
						НаборЗаписей.Отбор.УчетнаяЗаписьМаркетплейса.Установить(СтрокаДереваВторогоУровня.УчетнаяЗаписьМаркетплейса);
						НаборЗаписей.Отбор.ВидОбъектаМаркетплейса.Установить(Перечисления.ВидыОбъектовМаркетплейсов.Изображение);
						НаборЗаписей.Отбор.Номенклатура.Установить(СтрокаДереваВторогоУровня.Номенклатура);
						НаборЗаписей.Отбор.Характеристика.Установить(СтрокаДереваВторогоУровня.Характеристика);
						НаборЗаписей.Отбор.Упаковка.Установить(СтрокаДереваВторогоУровня.Упаковка);
						НаборЗаписей.Прочитать();
						
						Для Каждого Запись Из НаборЗаписей Цикл
							Если ЗначениеЗаполнено(Запись.ПредставлениеОбъектаМаркетплейса) Тогда
								Отбор = Новый Структура("ПутьКФайлу", Запись.ПредставлениеОбъектаМаркетплейса);
								НайденныеСтроки = СтрокаДереваВторогоУровня.Изображения.НайтиСтроки(Отбор);
								Если НайденныеСтроки.Количество() = 0 Тогда
									Если Запись.Статус <> Перечисления.СтатусыОбъектовМаркетплейсаOzon.НеИспользуется Тогда
										ДанныеОбъекта = Запись.ДанныеОбъекта.Получить();
										Если ДанныеОбъекта = Неопределено Тогда
											ДанныеОбъекта = ИнтеграцияСМаркетплейсомOzonСервер.НовыйСписокАтрибутовИзображения();
										КонецЕсли;
										ДанныеОбъекта.Вставить("ЭтоОсновноеИзображение", Ложь);
										Если Не ДанныеОбъекта.Свойство("СсылкаНаФайлВСервисеПубличныхСсылок") Тогда
											ДанныеОбъекта.Вставить("СсылкаНаФайлВСервисеПубличныхСсылок", "");
										КонецЕсли;
										Если Не ДанныеОбъекта.Свойство("УдаляемыеСсылки") Тогда
											ДанныеОбъекта.Вставить("УдаляемыеСсылки", Новый Соответствие);
										КонецЕсли;
										Если Не ЗначениеЗаполнено(ДанныеОбъекта.УдаляемыеСсылки.Получить(Запись.ПредставлениеОбъектаМаркетплейса)) Тогда
											ДанныеОбъекта.УдаляемыеСсылки.Вставить(Запись.ПредставлениеОбъектаМаркетплейса, ДанныеОбъекта.СсылкаНаФайлВСервисеПубличныхСсылок);
										КонецЕсли;
										ДанныеОбъекта.СсылкаНаФайлВСервисеПубличныхСсылок = "";
										
										Запись.Статус                           = Перечисления.СтатусыОбъектовМаркетплейсаOzon.НеИспользуется;
										Запись.Состояние                        = НСтр("ru = 'Не используется'");
										Запись.ОписаниеСостояния                = НСтр("ru = 'Не используется'");
										Запись.ПредставлениеОбъектаМаркетплейса = "";
										Запись.ДанныеОбъекта                    = Новый ХранилищеЗначения(ДанныеОбъекта);
										Запись.ДатаОбновления                   = ТекущаяДатаСеанса();
										
										Записать = Истина;
									КонецЕсли;
									
								Иначе
									Для Каждого СтрокаТаблицыЗначений Из НайденныеСтроки Цикл
										Если Не ЗначениеЗаполнено(Запись.ИдентификаторОбъектаМаркетплейса) Тогда
											Запись.ИдентификаторОбъектаМаркетплейса = Формат(СтрокаДереваВторогоУровня.Изображения.Индекс(СтрокаТаблицыЗначений), "ЧН=; ЧРД=.; ЧГ=");
											Записать = Истина;
										КонецЕсли;
										
										СтрокаТаблицыЗначений.Обработано = Истина;
									КонецЦикла;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						
						Отбор = Новый Структура("Обработано", Ложь);
						НайденныеСтроки = СтрокаДереваВторогоУровня.Изображения.НайтиСтроки(Отбор);
						Для Каждого СтрокаТаблицыЗначений Из НайденныеСтроки Цикл
							АдресВременногоХранилищаФайла = Неопределено;
							
							ДанныеИзображения = ИнтеграцияСМаркетплейсамиСервер.ДанныеФайлаПоВнешнейСсылке(СтрокаТаблицыЗначений.ПутьКФайлу);
							Если ДанныеИзображения.Статус 
								 И ИнтеграцияСМаркетплейсамиСервер.ЭтоФайлКартинки(ДанныеИзображения.Путь) Тогда
								АдресВременногоХранилищаФайла = ДанныеИзображения.Путь;
							КонецЕсли;
							
							Если ЗначениеЗаполнено(АдресВременногоХранилищаФайла) Тогда
								ИмяФайла              = СтрЗаменить(СтрокаТаблицыЗначений.ПутьКФайлу, "\", "/");
								ИмяФайла              = Сред(ИмяФайла, СтрНайти(ИмяФайла, "/", НаправлениеПоиска.СКонца) + 1);
								ИмяФайлаБезРасширения = Сред(ИмяФайла, 1, СтрНайти(ИмяФайла, ".") - 1);
								РасширениеФайла       = НРег(Сред(ИмяФайла, СтрНайти(ИмяФайла, ".") + 1));
								
								ОбменДанными = Справочники.НоменклатураПрисоединенныеФайлы.СоздатьЭлемент();
								ОбменДанными.ОбменДанными.Загрузка = Истина;
								
								ДополнительныеРеквизиты = Новый Структура;
								ДополнительныеРеквизиты.Вставить("ПубликуетсяВСервисах", Истина);
								ДополнительныеРеквизиты.Вставить("ДатаСоздания",         ТекущаяУниверсальнаяДата());
								
								ПараметрыФайла                             = РаботаСФайлами.ПараметрыДобавленияФайла(ДополнительныеРеквизиты);
								ПараметрыФайла.Автор                       = Пользователи.АвторизованныйПользователь();
								ПараметрыФайла.ВладелецФайлов              = СтрокаДереваВторогоУровня.Номенклатура;
								ПараметрыФайла.ИмяБезРасширения            = ИмяФайлаБезРасширения;
								ПараметрыФайла.РасширениеБезТочки          = РасширениеФайла;
								ПараметрыФайла.ГруппаФайлов                = Неопределено;
								ПараметрыФайла.ВремяИзмененияУниверсальное = ДополнительныеРеквизиты.ДатаСоздания;
								
								ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресВременногоХранилищаФайла,, СтрокаТаблицыЗначений.ПутьКФайлу);
								Если ПрисоединенныйФайл <> Неопределено Тогда
									ДанныеОбъекта                                     = ИнтеграцияСМаркетплейсомOzonСервер.НовыйСписокАтрибутовИзображения();
									ДанныеОбъекта.СсылкаНаФайлВСервисеПубличныхСсылок = СтрокаТаблицыЗначений.ПутьКФайлу;
									ДанныеОбъекта.ЭтоОсновноеИзображение              = СтрокаТаблицыЗначений.ОсновноеИзображение;
									ДанныеОбъекта.ЭтоИзображение360                   = СтрокаТаблицыЗначений.Изображение360;
									ДанныеОбъекта.УдаляемыеСсылки                     = Новый Соответствие;
									
									Запись                                  = НаборЗаписей.Добавить();
									Запись.УчетнаяЗаписьМаркетплейса        = СтрокаДереваВторогоУровня.УчетнаяЗаписьМаркетплейса;
									Запись.ВидОбъектаМаркетплейса           = Перечисления.ВидыОбъектовМаркетплейсов.Изображение;
									Запись.Номенклатура                     = СтрокаДереваВторогоУровня.Номенклатура;
									Запись.Характеристика                   = СтрокаДереваВторогоУровня.Характеристика;
									Запись.Упаковка                         = СтрокаДереваВторогоУровня.Упаковка;
									Запись.ОбъектПубликации                 = ПрисоединенныйФайл;
									Запись.ИдентификаторПубликации          = ИнтеграцияСМаркетплейсомOzonСервер.ХешСуммаПрисоединенногоФайла(ПрисоединенныйФайл);
									Запись.ИдентификаторОбъектаМаркетплейса = Формат(СтрокаДереваВторогоУровня.Изображения.Индекс(СтрокаТаблицыЗначений), "ЧН=; ЧРД=.; ЧГ=");
									Запись.Статус                           = Перечисления.СтатусыОбъектовМаркетплейсаOzon.Загружен;
									Запись.НаименованиеОбъектаМаркетплейса  = Строка(ПрисоединенныйФайл);
									Запись.ПредставлениеОбъектаМаркетплейса = СтрокаТаблицыЗначений.ПутьКФайлу;
									Запись.ДанныеОбъекта                    = Новый ХранилищеЗначения(ДанныеОбъекта);
									Запись.ДатаСоздания                     = ТекущаяДатаСеанса();
									
									Записать = Истина;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						
						Если Записать Тогда
							НаборЗаписей.Записать(Истина);
						КонецЕсли;
						ЗафиксироватьТранзакцию();
						
					Исключение
						ОтменитьТранзакцию();
						
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'При записи сведений по изображениям товарной позиции %1 возникла ошибка: %2.'",
								ОбщегоНазначения.КодОсновногоЯзыка()),
							СтрокаДереваВторогоУровня.ПредставлениеОбъектаМаркетплейса,
							ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
						ЗаписьЖурналаРегистрации(ИнтеграцияСМаркетплейсомOzonСервер.СобытиеЖурналаРегистрации(),
							УровеньЖурналаРегистрации.Ошибка,,,
							ТекстСообщения);
							
						Результат.Пропущено.Добавить(Новый Структура("НомерСтроки, Сообщение",
							Индекс + 1, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'При записи сведений по изображениям товарной позиции %1 возникли ошибки.'"),
								СтрокаДереваВторогоУровня.ПредставлениеОбъектаМаркетплейса)));
					КонецПопытки;
				КонецЕсли;
				
				// Запись данных объекта
				НачатьТранзакцию();
				
				Попытка
					// Корректировка данных
					ДанныеОбъекта = ИнтеграцияСМаркетплейсомOzonСервер.НоваяТаблицаЗначенийРеквизитов();
					Для Каждого СтрокаТаблицыЗначений Из СтрокаДереваВторогоУровня.ЗначенияРеквизитовИзСервиса Цикл
						Если Не СтрокаТаблицыЗначений.ТолькоТекущее Тогда
							ЗаполнитьЗначенияСвойств(ДанныеОбъекта.Добавить(), СтрокаТаблицыЗначений);
						КонецЕсли;
					КонецЦикла;
					ДанныеОбъекта.ЗаполнитьЗначения(СтрокаДереваВторогоУровня.УчетнаяЗаписьМаркетплейса, "УчетнаяЗаписьМаркетплейса");
					
					Если СтрокаДереваВторогоУровня.ВариантЗагрузки = 2 Тогда
						Если Не ЗначениеЗаполнено(СтрокаДереваВторогоУровня.ИсточникКатегорииМаркетплейса) Тогда
							ИдентификаторИсточникаКатегорииМаркетплейса = ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор();
						Иначе
							ИдентификаторИсточникаКатегорииМаркетплейса = СтрокаДереваВторогоУровня.ИсточникКатегорииМаркетплейса.УникальныйИдентификатор();
						КонецЕсли;
						
						ДанныеОбъекта.ЗаполнитьЗначения(СтрокаДереваВторогоУровня.Номенклатура,                             "Номенклатура");
						ДанныеОбъекта.ЗаполнитьЗначения(СтрокаДереваВторогоУровня.Характеристика,                           "Характеристика");
						ДанныеОбъекта.ЗаполнитьЗначения(СтрокаДереваВторогоУровня.Упаковка,                                 "Упаковка");
						ДанныеОбъекта.ЗаполнитьЗначения(СтрокаДереваВторогоУровня.Категория,                                "Категория1С");
						ДанныеОбъекта.ЗаполнитьЗначения(СтрокаДереваВторогоУровня.ИсточникКатегорииМаркетплейса,            "ИсточникКатегорииМаркетплейса");
						ДанныеОбъекта.ЗаполнитьЗначения(СтрЗаменить(ИдентификаторИсточникаКатегорииМаркетплейса, "-", "_"), "ИдентификаторИсточникаКатегорииМаркетплейса");
						
						СтрокаДереваВторогоУровня.ДатаСоздания                    = ТекущаяДатаСеанса();
						СтрокаДереваВторогоУровня.НаименованиеОбъектаМаркетплейса = ИнтеграцияСМаркетплейсомOzonСервер.ПредставлениеТоварнойПозиции(
							СтрокаДереваВторогоУровня.Номенклатура, 
							СтрокаДереваВторогоУровня.Характеристика, 
							СтрокаДереваВторогоУровня.Упаковка);
							
					Иначе
						СтрокаДереваВторогоУровня.ДатаОбновления = ТекущаяДатаСеанса();
					КонецЕсли;
					
					СтрокаДереваВторогоУровня.ДанныеОбъекта              = ДанныеОбъекта.Скопировать();
					СтрокаДереваВторогоУровня.ИсточникиСхожихПредложений = СтрокаДереваВторогоУровня.ДанныеТовараИзСервиса[0].ИсточникиСхожихПредложений.Скопировать();
					
					// РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon
					БлокировкаДанных = Новый БлокировкаДанных;
					ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon");
					ЭлементБлокировкиДанных.УстановитьЗначение("УчетнаяЗаписьМаркетплейса", СтрокаДереваВторогоУровня.УчетнаяЗаписьМаркетплейса);
					ЭлементБлокировкиДанных.УстановитьЗначение("ВидОбъектаМаркетплейса",    СтрокаДереваВторогоУровня.ВидОбъектаМаркетплейса);
					ЭлементБлокировкиДанных.УстановитьЗначение("Номенклатура",              СтрокаДереваВторогоУровня.Номенклатура);
					ЭлементБлокировкиДанных.УстановитьЗначение("Характеристика",            СтрокаДереваВторогоУровня.Характеристика);
					ЭлементБлокировкиДанных.УстановитьЗначение("Упаковка",                  СтрокаДереваВторогоУровня.Упаковка);
					БлокировкаДанных.Заблокировать();

					НаборЗаписей = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.УчетнаяЗаписьМаркетплейса.Установить(СтрокаДереваВторогоУровня.УчетнаяЗаписьМаркетплейса);
					НаборЗаписей.Отбор.ВидОбъектаМаркетплейса.Установить(СтрокаДереваВторогоУровня.ВидОбъектаМаркетплейса);
					НаборЗаписей.Отбор.Номенклатура.Установить(СтрокаДереваВторогоУровня.Номенклатура);
					НаборЗаписей.Отбор.Характеристика.Установить(СтрокаДереваВторогоУровня.Характеристика);
					НаборЗаписей.Отбор.Упаковка.Установить(СтрокаДереваВторогоУровня.Упаковка);
					НаборЗаписей.Отбор.ОбъектПубликации.Установить(Неопределено);
					НаборЗаписей.Прочитать();
					
					Если НаборЗаписей.Количество() = 0 Тогда
						Запись = НаборЗаписей.Добавить();
						
					ИначеЕсли СтрокаДереваВторогоУровня.ВариантЗагрузки = 2 Тогда
						ОтменитьТранзакцию();

						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Товарная позиция %1 не записана, т.к. уже существует другая позиция с таким набором ключевых полей: %2, %3, %4, %5.'"),
							СтрокаДереваВторогоУровня.ПредставлениеОбъектаМаркетплейса,
							СтрокаДереваВторогоУровня.ВидОбъектаМаркетплейса,
							СтрокаДереваВторогоУровня.Номенклатура,
							СтрокаДереваВторогоУровня.Характеристика,
							СтрокаДереваВторогоУровня.Упаковка);
						Результат.Пропущено.Добавить(Новый Структура("НомерСтроки, Сообщение", 
							Индекс + 1, ТекстСообщения));
						Результат.НеЗаписано = Результат.НеЗаписано + 1;
						Индекс = Индекс + 1;
						
						// Удаление дубля товара
						Отбор = Новый Структура(ПоляТаблицыТоваров);
						ЗаполнитьЗначенияСвойств(Отбор, СтрокаДереваВторогоУровня);
						СтрокиТовара = ТаблицаТоваров.НайтиСтроки(Отбор);
						Для Каждого СтрокаТовара Из СтрокиТовара Цикл
							ТаблицаТоваров.Удалить(СтрокаТовара);
							Прервать;
						КонецЦикла;
						
						Продолжить;
						
					Иначе
						Запись = НаборЗаписей[0];
					КонецЕсли;
						
					ИсключаяСвойства = "ИсточникиСхожихПредложений";
									 
					Если Не Параметры.ЗагрузитьЦеныПродажи Тогда
						ИсключаяСвойства = ИсключаяСвойства
							+ ", ЦенаДоСкидки, ЦенаСоСкидкой, МинимальнаяЦена";
					КонецЕсли;
						
					Если СтрокаДереваВторогоУровня.ВариантЗагрузки = 2 Тогда
						ИсключаяСвойства = ИсключаяСвойства
							+ ", ДанныеОбъекта, ДатаВыгрузкиЦенПродажи";
						
						ЗаполнитьЗначенияСвойств(Запись, СтрокаДереваВторогоУровня,, ИсключаяСвойства);
						Если ЗначениеЗаполнено(СтрокаДереваВторогоУровня.ТекущееИдентификаторКатегорииМаркетплейса) Тогда
							Запись.ИдентификаторКатегорииМаркетплейса = СтрокаДереваВторогоУровня.ТекущееИдентификаторКатегорииМаркетплейса;
							Запись.НаименованиеКатегорииМаркетплейса  = СтрокаДереваВторогоУровня.ТекущееНаименованиеКатегорииМаркетплейса;
						КонецЕсли;
						
					Иначе
						ИсключаяСвойства = ИсключаяСвойства
							+ ", УчетнаяЗаписьМаркетплейса, ВидОбъектаМаркетплейса"
							+ ", " + ИмяИдентификатора
							+ ", ПродаетсяПоСхемеРаботыFBO, ПродаетсяПоСхемеРаботыFBS, ПродаетсяПоСхемеРаботыDBS"
							+ ", ОписаниеОбъектаМаркетплейса"
							+ ", ДатаАктуальностиОстатковМаркетплейса, ОстатокFBO, РезервFBO, ОстатокFBS, РезервFBS";
						
						ЗаполнитьЗначенияСвойств(СтрокаДереваВторогоУровня, СтрокаДереваВторогоУровня.ДанныеТовараИзСервиса[0],, ИсключаяСвойства);
						ЗаполнитьЗначенияСвойств(Запись, СтрокаДереваВторогоУровня.ДанныеТовараИзСервиса[0],, ИсключаяСвойства);
						Если ЗначениеЗаполнено(СтрокаДереваВторогоУровня.ДанныеТовараИзСервиса[0].ОписаниеОбъектаМаркетплейса) Тогда
							Запись.ОписаниеОбъектаМаркетплейса = СтрокаДереваВторогоУровня.ДанныеТовараИзСервиса[0].ОписаниеОбъектаМаркетплейса;
						КонецЕсли;
					КонецЕсли;
					
					Запись.ДанныеОбъекта              = Новый ХранилищеЗначения(СтрокаДереваВторогоУровня.ДанныеОбъекта);
					Запись.ИсточникиСхожихПредложений = Новый ХранилищеЗначения(СтрокаДереваВторогоУровня.ИсточникиСхожихПредложений);
					
					НаборЗаписей.Записать(Истина);
					ЗафиксироватьТранзакцию();
					
				Исключение
					ОтменитьТранзакцию();
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'При записи сведений по товарной позиции %1 возникла ошибка: %2.'",
							ОбщегоНазначения.КодОсновногоЯзыка()),
						СтрокаДереваВторогоУровня.ПредставлениеОбъектаМаркетплейса,
						ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЗаписьЖурналаРегистрации(ИнтеграцияСМаркетплейсомOzonСервер.СобытиеЖурналаРегистрации(),
						УровеньЖурналаРегистрации.Ошибка,,,
						ТекстСообщения);
						
					Результат.Пропущено.Добавить(Новый Структура("НомерСтроки, Сообщение",
						Индекс + 1, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'При записи сведений по товарной позиции %1 возникли ошибки.'"),
							СтрокаДереваВторогоУровня.ПредставлениеОбъектаМаркетплейса)));
					Результат.НеЗаписано = Результат.НеЗаписано + 1;
					Индекс = Индекс + 1;
					Продолжить;
				КонецПопытки;
			
				// Значения реквизитов
				Для Каждого СтрокаТаблицыЗначений Из СтрокаДереваВторогоУровня.ЗначенияРеквизитовИзСервиса Цикл
					Если Не СтрокаТаблицыЗначений.ТолькоТекущее Тогда
						СтрокаТаблицыЗначений.ТекущееОбязательныйАтрибут                       = СтрокаТаблицыЗначений.ОбязательныйАтрибут;
						СтрокаТаблицыЗначений.ТекущееАспектныйАтрибут                          = СтрокаТаблицыЗначений.АспектныйАтрибут;
						СтрокаТаблицыЗначений.ТекущееЯвляетсяКоллекциейЗначений                = СтрокаТаблицыЗначений.ЯвляетсяКоллекциейЗначений;
						СтрокаТаблицыЗначений.ТекущееДоступенВыборЗначенияИзСписка             = СтрокаТаблицыЗначений.ДоступенВыборЗначенияИзСписка;
						СтрокаТаблицыЗначений.ТекущееМаксимальноеКоличествоЗначений            = СтрокаТаблицыЗначений.МаксимальноеКоличествоЗначений;
						СтрокаТаблицыЗначений.ТекущееТипЗначенияАтрибута                       = СтрокаТаблицыЗначений.ТипЗначенияАтрибута;
						СтрокаТаблицыЗначений.ТекущееЗначениеАтрибутаМаркетплейса              = СтрокаТаблицыЗначений.ЗначениеАтрибутаМаркетплейса;
						СтрокаТаблицыЗначений.ТекущееНеЗаполненАтрибут                         = СтрокаТаблицыЗначений.НеЗаполненАтрибут;
						СтрокаТаблицыЗначений.ТекущееИдентификаторЗначенияАтрибутаМаркетплейса = СтрокаТаблицыЗначений.ИдентификаторЗначенияАтрибутаМаркетплейса;
						СтрокаТаблицыЗначений.ЕстьРазличия                                     = Ложь;
					КонецЕсли;
				КонецЦикла;
				
				Отбор = Новый Структура("ТолькоТекущее", Истина);
				НайденныеСтроки = СтрокаДереваВторогоУровня.ЗначенияРеквизитовИзСервиса.НайтиСтроки(Отбор);
				Для Каждого СтрокаТаблицыЗначений Из НайденныеСтроки Цикл
					СтрокаДереваВторогоУровня.ЗначенияРеквизитовИзСервиса.Удалить(СтрокаТаблицыЗначений);
				КонецЦикла;
				
				Результат.Записано = Результат.Записано + 1;
				Если СтрокаДереваВторогоУровня.ВариантЗагрузки = 2 Тогда
					Результат.ВТомЧислеНовых = Результат.ВТомЧислеНовых + 1;
				КонецЕсли;

				СтрокаДереваВторогоУровня.Пометка         = Ложь;
				СтрокаДереваВторогоУровня.ВариантЗагрузки = 0;
				СтрокаДереваВторогоУровня.ИндексСтатуса   = -999;
				
				Индекс = Индекс + 1;
			КонецЦикла;
		КонецЦикла;
		
		// Загрузить цены 
		Если ТаблицаТоваров.Количество() > 0
				И ДоступнаУстановкаЦен Тогда
			СозданныеДокументы = ИнтеграцияСМаркетплейсомOzonСервер.ЗагрузитьЦеныТоваров(УчетнаяЗаписьМаркетплейса, ТаблицаТоваров,, Ложь, Ложь);
			Если СозданныеДокументы = Неопределено Тогда
				Результат.Вставить("ЗагруженыЦены", Ложь);
			ИначеЕсли СозданныеДокументы.Получить(УчетнаяЗаписьМаркетплейса) = Неопределено Тогда
				Результат.Вставить("ЗагруженыЦены", Ложь);
			ИначеЕсли СозданныеДокументы.Получить(УчетнаяЗаписьМаркетплейса).Количество() = 0 Тогда
				Результат.Вставить("ЗагруженыЦены", Ложь);
			КонецЕсли;
			
			ЦеныТоваров = ИнтеграцияСМаркетплейсомOzonСервер.ПолучитьТекущиеЦеныПоИдентификаторам(
				УчетнаяЗаписьМаркетплейса, 
				Идентификаторы,
				ИмяИдентификатора);
			Если ЦеныТоваров <> Неопределено Тогда
				ЦеныТоваров.Индексы.Добавить(ИмяИдентификатора);
			КонецЕсли;
			
		Иначе
			ЦеныТоваров = Неопределено;
		КонецЕсли;
		
		// Окончание
		Для Каждого СтрокаДереваПервогоУровня Из ДеревоТоваров.Строки Цикл
			Для Каждого СтрокаДереваВторогоУровня Из СтрокаДереваПервогоУровня.Строки Цикл
				Если СтрокаДереваВторогоУровня.ИндексСтатуса < 0 Тогда
					Если СтрокаДереваВторогоУровня.ИндексСтатуса = -999 Тогда
						Если СтрокаДереваВторогоУровня.Статус = Перечисления.СтатусыОбъектовМаркетплейсаOzon.ЗагруженСОшибками 
								Или ЗначениеЗаполнено(СтрокаДереваВторогоУровня.ОписаниеОшибки)
									И СтрокаДереваВторогоУровня.Статус <> Перечисления.СтатусыОбъектовМаркетплейсаOzon.ВАрхиве Тогда
							СтрокаДереваВторогоУровня.ИндексСтатуса = 0;
						ИначеЕсли СтрокаДереваВторогоУровня.Статус = Перечисления.СтатусыОбъектовМаркетплейсаOzon.КПубликации Тогда
							СтрокаДереваВторогоУровня.ИндексСтатуса = 1;
						ИначеЕсли СтрокаДереваВторогоУровня.Статус = Перечисления.СтатусыОбъектовМаркетплейсаOzon.НаМодерации Тогда
							СтрокаДереваВторогоУровня.ИндексСтатуса = 1;
						ИначеЕсли СтрокаДереваВторогоУровня.Статус = Перечисления.СтатусыОбъектовМаркетплейсаOzon.ВАрхиве Тогда
							СтрокаДереваВторогоУровня.ИндексСтатуса = 2;
						ИначеЕсли СтрокаДереваВторогоУровня.Статус = Перечисления.СтатусыОбъектовМаркетплейсаOzon.Загружен Тогда
							СтрокаДереваВторогоУровня.ИндексСтатуса = 3;
						КонецЕсли;
					Иначе
						СтрокаДереваВторогоУровня.ИндексСтатуса = СтрокаДереваВторогоУровня.ИндексСтатуса + 100;
					КонецЕсли;
					
					// Цены товаров
					Если ЦеныТоваров <> Неопределено Тогда
						СтрокаДереваВторогоУровня.ЦеныТовара = Новый Массив;
						Отбор = Новый Структура(ИмяИдентификатора, СтрокаДереваВторогоУровня[ИмяИдентификатора]);
						НайденныеСтрокиЦеныТоваров = ЦеныТоваров.НайтиСтроки(Отбор);
						Для Каждого ЭлементКоллекции Из НайденныеСтрокиЦеныТоваров Цикл
							СтрокаДереваВторогоУровня.ЦеныТовара.Добавить(ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ЭлементКоллекции));
						КонецЦикла;
					КонецЕсли;
					
					// Дерево реквизитов
					СтрокаДереваВторогоУровня.ДеревоРеквизитов = ИнтеграцияСМаркетплейсомOzonСервер.СформироватьДеревоРеквизитов(
						УчетнаяЗаписьМаркетплейса,
						СтрокаДереваВторогоУровня.ЗначенияРеквизитовИзСервиса,
						СтрокаДереваВторогоУровня,
						СтрокаДереваВторогоУровня.ЦеныТовара,
						НастройкиУчетнойЗаписи,
						ВидыЦен);
					
					// Различия
					Отбор = Новый Структура("ЕстьРазличия, ИдентификаторАтрибутаМаркетплейса", Истина, "СтавкаНДС");
					ЕстьРазличияСтавкаНДС = СтрокаДереваВторогоУровня.ДеревоРеквизитов.Строки.НайтиСтроки(Отбор, Истина).Количество();
					СтрокаДереваВторогоУровня.ЕстьРазличияСтавкаНДС = (ЕстьРазличияСтавкаНДС > 0);
					
					Отбор = Новый Структура("ЕстьРазличия, ИдентификаторАтрибутаМаркетплейса", Истина, "ИдентификаторКатегорииМаркетплейса");
					НайденныеСтрокиРазличия = СтрокаДереваВторогоУровня.ДеревоРеквизитов.Строки.НайтиСтроки(Отбор, Истина);
					ЕстьРазличияКатегорииOzon = НайденныеСтрокиРазличия.Количество();
					СтрокаДереваВторогоУровня.ЕстьРазличияКатегорииOzon = (ЕстьРазличияКатегорииOzon > 0);
					Для Каждого ЭлементКоллекции Из НайденныеСтрокиРазличия Цикл
						Если СтрНайти(ЭлементКоллекции.ИдентификаторКатегорииМаркетплейса, "_") = 0 Тогда
							ЕстьРазличияКатегорииOzon = ЕстьРазличияКатегорииOzon - 1;
						КонецЕсли;
					КонецЦикла;
					
					Отбор = Новый Структура("ЕстьРазличия, ЦеновыеПоказатели", Истина, Истина);
					ЕстьРазличияЦеновыеПоказатели = СтрокаДереваВторогоУровня.ДеревоРеквизитов.Строки.НайтиСтроки(Отбор, Истина).Количество();
					СтрокаДереваВторогоУровня.ЕстьРазличияЦеновыеПоказатели = (ЕстьРазличияЦеновыеПоказатели > 0);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		ОпределитьНаименованияГруппДереваТоваров(
			ДеревоТоваров, 
			Ложь, 
			Параметры.ОтображатьСопоставленные,
			Параметры.ОтображатьПоСтатусу);
		
		Результат.Вставить("ДеревоТоваров", ДеревоТоваров);
		
		Если Результат.Записано = 0 И Результат.НеЗаписано = 0 Тогда
			Результат.Ошибка.КодОшибки      = ИнтеграцияСМаркетплейсомOzonСервер.КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
			Результат.Ошибка.ОписаниеОшибки = НСтр("ru = 'Данных, отмеченных для записи, не найдено.'");
			
			Если ВсегоОтмечено > 0 
					И (ВсегоНеПолучено > 0 Или ВсегоНеСопоставлено > 0) Тогда
				Результат.Ошибка.ОписаниеОшибки = НСтр("ru = 'Данные не записаны, так как для отмеченных позиций'");
				Если ВсегоНеПолучено > 0 Тогда
					Результат.Ошибка.ОписаниеОшибки = Результат.Ошибка.ОписаниеОшибки + " " + НСтр("ru = 'не получены обновленные данные с торговой площадки'");
				КонецЕсли;
				Если ВсегоНеСопоставлено > 0 Тогда
					Если ВсегоНеПолучено > 0 Тогда
						Результат.Ошибка.ОписаниеОшибки = Результат.Ошибка.ОписаниеОшибки + " " + НСтр("ru = 'или'");
					КонецЕсли;
					Результат.Ошибка.ОписаниеОшибки = Результат.Ошибка.ОписаниеОшибки + " " + НСтр("ru = 'не выполнено сопоставление данным учетной системы 1С'");
				КонецЕсли;
				Результат.Ошибка.ОписаниеОшибки = Результат.Ошибка.ОписаниеОшибки + ".";
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		Отказ = Истина;
		ЗаписьЖурналаРегистрации(ИнтеграцияСМаркетплейсомOzonСервер.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

	Если Отказ Тогда
		Результат.Ошибка.КодОшибки      = ИнтеграцияСМаркетплейсомOzonСервер.КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
		Результат.Ошибка.ОписаниеОшибки = НСтр("ru = 'При импорте данных с торговой площадки возникли ошибки. Подробности см. в журнале регистрации.'");
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(
		Замер, 
		Идентификаторы.Количество());
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ПланированиеПоставок

// Формирует общую часть запроса к данным планирования.
//
// Возвращаемое значение:
//   Строка - текст запроса.
//
Функция ТекстЗапросаДанныхПланирования() Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СправочникСклады.Ссылка КАК Склад
		|ПОМЕСТИТЬ ВТ_Склады
		|ИЗ
		|	Справочник.Склады КАК СправочникСклады
		|ГДЕ
		|	&ТекстЗапросаДоступныеСклады1С
		|	И НЕ СправочникСклады.ЭтоГруппа
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗапасыИПотребностиОстатки.Номенклатура КАК Номенклатура,
		|	ЗапасыИПотребностиОстатки.Характеристика КАК Характеристика,
		|	ЗапасыИПотребностиОстатки.Склад КАК Склад,
		|	ЗапасыИПотребностиОстатки.Заказ КАК Заказ,
		|	ЗапасыИПотребностиОстатки.ВНаличииОстаток КАК ВНаличииОстаток,
		|	ЗапасыИПотребностиОстатки.РезервироватьНаСкладеОстаток + ЗапасыИПотребностиОстатки.РезервироватьПоМереПоступленияОстаток КАК РезервироватьОстаток,
		|	0 КАК КОформлениюОстаток
		|ПОМЕСТИТЬ ВТ_ОстаткиТоваровПоСкладам
		|ИЗ
		|	РегистрНакопления.ЗапасыИПотребности.Остатки(
		|			,
		|			(Номенклатура, Характеристика, Склад, Назначение) В
		|				(ВЫБРАТЬ
		|					ВТ_ТаблицаТоваров.Номенклатура КАК Номенклатура,
		|					ВТ_ТаблицаТоваров.Характеристика КАК Характеристика,
		|					ВТ_Склады.Склад КАК Склад,
		|					ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение
		|				ИЗ
		|					ВТ_ТаблицаТоваров КАК ВТ_ТаблицаТоваров
		|						ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Склады КАК ВТ_Склады
		|						ПО ИСТИНА)) КАК ЗапасыИПотребностиОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РаспоряженияНаОтгрузкуОбороты.Номенклатура,
		|	РаспоряженияНаОтгрузкуОбороты.Характеристика,
		|	РаспоряженияНаОтгрузкуОбороты.Склад,
		|	РаспоряженияНаОтгрузкуОбороты.Распоряжение,
		|	0,
		|	0,
		|	РаспоряженияНаОтгрузкуОбороты.КОформлениюОборот
		|ИЗ
		|	РегистрНакопления.РаспоряженияНаОтгрузку.Обороты(
		|			,
		|			,
		|			,
		|			(Номенклатура, Характеристика, Склад) В
		|				(ВЫБРАТЬ
		|					ВТ_ТаблицаТоваров.Номенклатура КАК Номенклатура,
		|					ВТ_ТаблицаТоваров.Характеристика КАК Характеристика,
		|					ВТ_Склады.Склад КАК Склад
		|				ИЗ
		|					ВТ_ТаблицаТоваров КАК ВТ_ТаблицаТоваров
		|						ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Склады КАК ВТ_Склады
		|						ПО ИСТИНА)) КАК РаспоряженияНаОтгрузкуОбороты
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Склады
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ОстаткиТоваровПоСкладам.Номенклатура КАК Номенклатура,
		|	ВТ_ОстаткиТоваровПоСкладам.Характеристика КАК Характеристика,
		|	ВТ_ОстаткиТоваровПоСкладам.Заказ КАК Заказ,
		|	СУММА(ВТ_ОстаткиТоваровПоСкладам.ВНаличииОстаток) КАК ВНаличииОстаток,
		|	СУММА(ВТ_ОстаткиТоваровПоСкладам.РезервироватьОстаток) КАК РезервироватьОстаток,
		|	СУММА(ВТ_ОстаткиТоваровПоСкладам.КОформлениюОстаток) КАК КОформлениюОстаток
		|ПОМЕСТИТЬ ВТ_ОстаткиТоваровВсе
		|ИЗ
		|	ВТ_ОстаткиТоваровПоСкладам КАК ВТ_ОстаткиТоваровПоСкладам
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ОстаткиТоваровПоСкладам.Номенклатура,
		|	ВТ_ОстаткиТоваровПоСкладам.Характеристика,
		|	ВТ_ОстаткиТоваровПоСкладам.Заказ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументЗаказКлиента.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_ЗаказКлиента
		|ИЗ
		|	Документ.ЗаказКлиента КАК ДокументЗаказКлиента
		|ГДЕ
		|	ДокументЗаказКлиента.Организация = &Организация
		|	И ДокументЗаказКлиента.Партнер = &Партнер
		|	И &ТекстЗапросаКонтрагент
		|	И &ТекстЗапросаСоглашение
		|	И &ТекстЗапросаДоговор
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Остатки.Номенклатура КАК Номенклатура,
		|	Остатки.Характеристика КАК Характеристика,
		|	СУММА(Остатки.ВНаличииНаСкладах1С) КАК ВНаличииНаСкладах1С,
		|	СУММА(Остатки.ЗарезервированоНаСкладах1С) КАК ЗарезервированоНаСкладах1С
		|ПОМЕСТИТЬ ВТ_ОстаткиТоваров
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВТ_ОстаткиТоваровВсе.Номенклатура КАК Номенклатура,
		|		ВТ_ОстаткиТоваровВсе.Характеристика КАК Характеристика,
		|		ВТ_ОстаткиТоваровВсе.ВНаличииОстаток - ВТ_ОстаткиТоваровВсе.РезервироватьОстаток КАК ВНаличииНаСкладах1С,
		|		0 КАК ЗарезервированоНаСкладах1С
		|	ИЗ
		|		ВТ_ОстаткиТоваровВсе КАК ВТ_ОстаткиТоваровВсе
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВТ_ОстаткиТоваровВсе.Номенклатура,
		|		ВТ_ОстаткиТоваровВсе.Характеристика,
		|		0,
		|		ВТ_ОстаткиТоваровВсе.РезервироватьОстаток
		|	ИЗ
		|		ВТ_ОстаткиТоваровВсе КАК ВТ_ОстаткиТоваровВсе
		|	ГДЕ
		|		(ВТ_ОстаткиТоваровВсе.Заказ, ИСТИНА) В
		|				(ВЫБРАТЬ
		|					ВТ_ЗаказКлиента.Ссылка КАК Заказ,
		|					ИСТИНА
		|				ИЗ
		|					ВТ_ЗаказКлиента КАК ВТ_ЗаказКлиента)) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Номенклатура,
		|	Остатки.Характеристика
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ОстаткиТоваровВсе.Номенклатура КАК Номенклатура,
		|	ВТ_ОстаткиТоваровВсе.Характеристика КАК Характеристика,
		|	СУММА(ДокументЗаказКлиентаТовары.КоличествоУпаковок 
		|			* ВЫБОР
		|				КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковкиЗаказа, 1) = 0
		|					ТОГДА 1
		|				ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковкиЗаказа, 1)
		|			КОНЕЦ) КАК ВПоставке
		|ПОМЕСТИТЬ ВТ_РезервыТоваров
		|ИЗ
		|	ВТ_ОстаткиТоваровВсе КАК ВТ_ОстаткиТоваровВсе
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ДокументЗаказКлиентаТовары
		|		ПО ВТ_ОстаткиТоваровВсе.Заказ = ДокументЗаказКлиентаТовары.Ссылка
		|			И ВТ_ОстаткиТоваровВсе.Номенклатура = ДокументЗаказКлиентаТовары.Номенклатура
		|			И ВТ_ОстаткиТоваровВсе.Характеристика = ДокументЗаказКлиентаТовары.Характеристика
		|ГДЕ
		|	(ВТ_ОстаткиТоваровВсе.Заказ, ИСТИНА) В
		|			(ВЫБРАТЬ
		|				ВТ_ЗаказКлиента.Ссылка КАК Заказ,
		|				ИСТИНА
		|			ИЗ
		|				ВТ_ЗаказКлиента КАК ВТ_ЗаказКлиента
		|			ГДЕ
		|				ДокументЗаказКлиентаТовары.Ссылка = ВТ_ЗаказКлиента.Ссылка)
		|	И (ВТ_ОстаткиТоваровВсе.РезервироватьОстаток <> 0 
		|		ИЛИ ВТ_ОстаткиТоваровВсе.КОформлениюОстаток <> 0)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ОстаткиТоваровВсе.Номенклатура,
		|	ВТ_ОстаткиТоваровВсе.Характеристика
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ЗаказКлиента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыНаСкладахТорговыхПлощадокЗаДень.Номенклатура,
		|	ТоварыНаСкладахТорговыхПлощадокЗаДень.Характеристика,
		|	ТоварыНаСкладахТорговыхПлощадокЗаДень.Упаковка,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТоварыНаСкладахТорговыхПлощадокЗаДень.Период) КАК ДнейВНаличии
		|ПОМЕСТИТЬ ВТ_ДнейВНаличии
		|ИЗ
		|	РегистрСведений.ТоварыНаСкладахТорговыхПлощадокЗаДень КАК ТоварыНаСкладахТорговыхПлощадокЗаДень
		|ГДЕ
		|	&АнализироватьОтгрузки
		|	И (ТоварыНаСкладахТорговыхПлощадокЗаДень.УчетнаяЗаписьТорговойПлощадки, ТоварыНаСкладахТорговыхПлощадокЗаДень.Номенклатура, ТоварыНаСкладахТорговыхПлощадокЗаДень.Характеристика, ТоварыНаСкладахТорговыхПлощадокЗаДень.Упаковка) В
		|			(ВЫБРАТЬ
		|				&УчетнаяЗаписьТорговойПлощадки КАК УчетнаяЗаписьТорговойПлощадки,
		|				ВТ_ТаблицаТоваров.Номенклатура КАК Номенклатура,
		|				ВТ_ТаблицаТоваров.Характеристика КАК Характеристика,
		|				ВТ_ТаблицаТоваров.Упаковка КАК Упаковка
		|			ИЗ
		|				ВТ_ТаблицаТоваров КАК ВТ_ТаблицаТоваров)
		|	И ТоварыНаСкладахТорговыхПлощадокЗаДень.Период МЕЖДУ &НачалоПериодаАнализаОтгрузок И &ОкончаниеПериодаАнализаОтгрузок
		|	И ТоварыНаСкладахТорговыхПлощадокЗаДень.ЕстьВНаличииВТечениеДня
		|	И &ТекстЗапросаИдентификаторСкладаТорговойПлощадки2
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыНаСкладахТорговыхПлощадокЗаДень.Номенклатура,
		|	ТоварыНаСкладахТорговыхПлощадокЗаДень.Характеристика,
		|	ТоварыНаСкладахТорговыхПлощадокЗаДень.Упаковка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Упаковка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыНаСкладахТорговыхПлощадокЗаДеньСрезПоследних.Номенклатура КАК Номенклатура,
		|	ТоварыНаСкладахТорговыхПлощадокЗаДеньСрезПоследних.Характеристика КАК Характеристика,
		|	ТоварыНаСкладахТорговыхПлощадокЗаДеньСрезПоследних.Упаковка КАК Упаковка,
		|	ТоварыНаСкладахТорговыхПлощадокЗаДеньСрезПоследних.ИдентификаторСкладаТорговойПлощадки КАК ИдентификаторСкладаТорговойПлощадки,
		|	МАКСИМУМ(ТоварыНаСкладахТорговыхПлощадокЗаДеньСрезПоследних.НаименованиеСкладаТорговойПлощадки) КАК НаименованиеСкладаТорговойПлощадки,
		|	СУММА(ТоварыНаСкладахТорговыхПлощадокЗаДеньСрезПоследних.ВНаличии) КАК ВНаличии,
		|	СУММА(ТоварыНаСкладахТорговыхПлощадокЗаДеньСрезПоследних.Зарезервировано) КАК Заказано,
		|	0 КАК Отменено,
		|	0 КАК ДнейВНаличии
		|ПОМЕСТИТЬ ВТ_Показатели
		|ИЗ
		|	РегистрСведений.ТоварыНаСкладахТорговыхПлощадокЗаДень.СрезПоследних(
		|			,
		|			(УчетнаяЗаписьТорговойПлощадки, Номенклатура, Характеристика, Упаковка) В
		|				(ВЫБРАТЬ
		|					&УчетнаяЗаписьТорговойПлощадки КАК УчетнаяЗаписьТорговойПлощадки,
		|					ВТ_ТаблицаТоваров.Номенклатура КАК Номенклатура,
		|					ВТ_ТаблицаТоваров.Характеристика КАК Характеристика,
		|					ВТ_ТаблицаТоваров.Упаковка КАК Упаковка
		|				ИЗ
		|					ВТ_ТаблицаТоваров КАК ВТ_ТаблицаТоваров)) КАК ТоварыНаСкладахТорговыхПлощадокЗаДеньСрезПоследних
		|ГДЕ
		|	&ТекстЗапросаИдентификаторСкладаТорговойПлощадки1
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыНаСкладахТорговыхПлощадокЗаДеньСрезПоследних.Номенклатура,
		|	ТоварыНаСкладахТорговыхПлощадокЗаДеньСрезПоследних.Характеристика,
		|	ТоварыНаСкладахТорговыхПлощадокЗаДеньСрезПоследних.Упаковка,
		|	ТоварыНаСкладахТорговыхПлощадокЗаДеньСрезПоследних.ИдентификаторСкладаТорговойПлощадки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТоварыНаСкладахТорговыхПлощадокЗаДень.Номенклатура,
		|	ТоварыНаСкладахТорговыхПлощадокЗаДень.Характеристика,
		|	ТоварыНаСкладахТорговыхПлощадокЗаДень.Упаковка,
		|	ТоварыНаСкладахТорговыхПлощадокЗаДень.ИдентификаторСкладаТорговойПлощадки,
		|	МАКСИМУМ(ТоварыНаСкладахТорговыхПлощадокЗаДень.НаименованиеСкладаТорговойПлощадки),
		|	0,
		|	СУММА(ТоварыНаСкладахТорговыхПлощадокЗаДень.Заказано),
		|	СУММА(ТоварыНаСкладахТорговыхПлощадокЗаДень.Отменено),
		|	МАКСИМУМ(ЕСТЬNULL(ВТ_ДнейВНаличии.ДнейВНаличии, 0))
		|ИЗ
		|	РегистрСведений.ТоварыНаСкладахТорговыхПлощадокЗаДень КАК ТоварыНаСкладахТорговыхПлощадокЗаДень
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДнейВНаличии КАК ВТ_ДнейВНаличии
		|		ПО ТоварыНаСкладахТорговыхПлощадокЗаДень.Номенклатура = ВТ_ДнейВНаличии.Номенклатура
		|			И ТоварыНаСкладахТорговыхПлощадокЗаДень.Характеристика = ВТ_ДнейВНаличии.Характеристика
		|			И ТоварыНаСкладахТорговыхПлощадокЗаДень.Упаковка = ВТ_ДнейВНаличии.Упаковка
		|ГДЕ
		|	&АнализироватьОтгрузки
		|	И (ТоварыНаСкладахТорговыхПлощадокЗаДень.УчетнаяЗаписьТорговойПлощадки, ТоварыНаСкладахТорговыхПлощадокЗаДень.Номенклатура, ТоварыНаСкладахТорговыхПлощадокЗаДень.Характеристика, ТоварыНаСкладахТорговыхПлощадокЗаДень.Упаковка) В
		|			(ВЫБРАТЬ
		|				&УчетнаяЗаписьТорговойПлощадки КАК УчетнаяЗаписьТорговойПлощадки,
		|				ВТ_ТаблицаТоваров.Номенклатура КАК Номенклатура,
		|				ВТ_ТаблицаТоваров.Характеристика КАК Характеристика,
		|				ВТ_ТаблицаТоваров.Упаковка КАК Упаковка
		|			ИЗ
		|				ВТ_ТаблицаТоваров КАК ВТ_ТаблицаТоваров)
		|	И ТоварыНаСкладахТорговыхПлощадокЗаДень.Период МЕЖДУ &НачалоПериодаАнализаОтгрузок И &ОкончаниеПериодаАнализаОтгрузок
		|	И &ТекстЗапросаИдентификаторСкладаТорговойПлощадки2
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыНаСкладахТорговыхПлощадокЗаДень.Номенклатура,
		|	ТоварыНаСкладахТорговыхПлощадокЗаДень.Характеристика,
		|	ТоварыНаСкладахТорговыхПлощадокЗаДень.Упаковка,
		|	ТоварыНаСкладахТорговыхПлощадокЗаДень.ИдентификаторСкладаТорговойПлощадки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Упаковка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ДнейВНаличии
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТаблицаТоваров.Номенклатура КАК Номенклатура,
		|	ВТ_ТаблицаТоваров.Характеристика КАК Характеристика,
		|	ВТ_ТаблицаТоваров.Упаковка КАК Упаковка,
		|	ВТ_ТаблицаТоваров.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	МАКСИМУМ(ЕСТЬNULL(ВТ_ОстаткиТоваров.ВНаличииНаСкладах1С, 0)) КАК ВНаличииНаСкладах1С,
		|	МАКСИМУМ(ЕСТЬNULL(ВТ_ОстаткиТоваров.ЗарезервированоНаСкладах1С, 0)) КАК ЗарезервированоНаСкладах1С,
		|	МАКСИМУМ(ЕСТЬNULL(ВТ_РезервыТоваров.ВПоставке, 0)) КАК ВПоставке,
		|	СУММА(ЕСТЬNULL(ВТ_Показатели.ВНаличии, 0)) КАК ВНаличии,
		|	СУММА(ЕСТЬNULL(ВТ_Показатели.Заказано, 0)) КАК Заказано,
		|	СУММА(ЕСТЬNULL(ВТ_Показатели.Отменено, 0)) КАК Отменено,
		|	МАКСИМУМ(ЕСТЬNULL(ВТ_Показатели.ДнейВНаличии, 0)) КАК ДнейВНаличии
		|ПОМЕСТИТЬ ВТ_Данные
		|ИЗ
		|	ВТ_ТаблицаТоваров КАК ВТ_ТаблицаТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОстаткиТоваров КАК ВТ_ОстаткиТоваров
		|		ПО ВТ_ТаблицаТоваров.Номенклатура = ВТ_ОстаткиТоваров.Номенклатура
		|			И ВТ_ТаблицаТоваров.Характеристика = ВТ_ОстаткиТоваров.Характеристика
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РезервыТоваров КАК ВТ_РезервыТоваров
		|		ПО ВТ_ТаблицаТоваров.Номенклатура = ВТ_РезервыТоваров.Номенклатура
		|			И ВТ_ТаблицаТоваров.Характеристика = ВТ_РезервыТоваров.Характеристика
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Показатели КАК ВТ_Показатели
		|		ПО ВТ_ТаблицаТоваров.Номенклатура = ВТ_Показатели.Номенклатура
		|			И ВТ_ТаблицаТоваров.Характеристика = ВТ_Показатели.Характеристика
		|			И ВТ_ТаблицаТоваров.Упаковка = ВТ_Показатели.Упаковка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ТаблицаТоваров.Номенклатура,
		|	ВТ_ТаблицаТоваров.Характеристика,
		|	ВТ_ТаблицаТоваров.Упаковка,
		|	ВТ_ТаблицаТоваров.ИдентификаторПубликации
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Упаковка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ОстаткиТоваровВсе
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ОстаткиТоваров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_РезервыТоваров";
	
	Возврат ТекстЗапроса
			+ ОбщегоНазначения.РазделительПакетаЗапросов();

КонецФункции
		
// Корректирует запрос к данным планирования, устанавливает необходимые параметры.
//
// Параметры:
//   Запрос    - Запрос - запрос к данным планирования;
//   Параметры - Структура, ДанныеФормыСтруктура - параметры запроса, по своему составу соответствуют дополнительным свойствам динамического списка, 
//                 см. Обработка.УправлениеПродажамиНаOzon.Форма.ПланированиеПоставокНаСкладыТорговойПлощадки.ДанныеДляПланирования.
//
Процедура СкорректироватьТекстЗапросаДанныхПланирования(Запрос, Параметры) Экспорт
	
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст, 
		"&ТекстЗапросаКоэффициентУпаковкиЗаказа",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ДокументЗаказКлиентаТовары.Упаковка",
			"ВТ_ОстаткиТоваровВсе.Номенклатура"));
		
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст, 
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ВТ_Данные.Упаковка",
			"ВТ_Данные.Номенклатура"));
		
	Если ЗначениеЗаполнено(Параметры.ИдентификаторСкладаТорговойПлощадки) Тогда
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст, 
			"&ТекстЗапросаИдентификаторСкладаТорговойПлощадки1",
			"ТоварыНаСкладахТорговыхПлощадокЗаДеньСрезПоследних.ИдентификаторСкладаТорговойПлощадки = &ИдентификаторСкладаТорговойПлощадки");
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст, 
			"&ТекстЗапросаИдентификаторСкладаТорговойПлощадки2",
			"ТоварыНаСкладахТорговыхПлощадокЗаДень.ИдентификаторСкладаТорговойПлощадки = &ИдентификаторСкладаТорговойПлощадки");
			
		Запрос.УстановитьПараметр("ИдентификаторСкладаТорговойПлощадки", Параметры.ИдентификаторСкладаТорговойПлощадки);
		
	Иначе
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст, 
			"&ТекстЗапросаИдентификаторСкладаТорговойПлощадки1",
			"ИСТИНА");
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст, 
			"&ТекстЗапросаИдентификаторСкладаТорговойПлощадки2",
			"ИСТИНА");
			
		Запрос.УстановитьПараметр("ИдентификаторСкладаТорговойПлощадки", Неопределено);
	КонецЕсли;
	
	Если Параметры.ДоступныеСклады1С.Количество() > 0 Тогда
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст, 
			"&ТекстЗапросаДоступныеСклады1С",
			"СправочникСклады.Ссылка В ИЕРАРХИИ (&ДоступныеСклады1С)");
	Иначе
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст, 
			"&ТекстЗапросаДоступныеСклады1С",
			"ИСТИНА");
	КонецЕсли;
	
	Если Параметры.КатегорииТорговойПлощадки.Количество() > 0 Тогда
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст, 
			"&ТекстЗапросаКатегорииТорговойПлощадки",
			"СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторКатегорииМаркетплейса В (&КатегорииТорговойПлощадки)");
	Иначе
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст, 
			"&ТекстЗапросаКатегорииТорговойПлощадки",
			"ИСТИНА");
	КонецЕсли;
	
	Если Параметры.ИспользоватьПартнеровИКонтрагентов Тогда
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст, 
			"&ТекстЗапросаКонтрагент",
			"ДокументЗаказКлиента.Контрагент = &Контрагент");
	Иначе
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст, 
			"&ТекстЗапросаКонтрагент",
			"ИСТИНА");
	КонецЕсли;

	Если Параметры.ИспользоватьСоглашенияСКлиентами Тогда
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст, 
			"&ТекстЗапросаСоглашение",
			"ДокументЗаказКлиента.Соглашение = &Соглашение");
	Иначе
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст, 
			"&ТекстЗапросаСоглашение",
			"ИСТИНА");
	КонецЕсли;

	Если Параметры.ИспользуютсяДоговорыКонтрагентов Тогда
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст, 
			"&ТекстЗапросаДоговор",
			"ДокументЗаказКлиента.Договор = &Договор");
	Иначе
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст, 
			"&ТекстЗапросаДоговор",
			"ИСТИНА");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("УчетнаяЗаписьТорговойПлощадки",          Параметры.УчетнаяЗаписьТорговойПлощадки);
	Запрос.УстановитьПараметр("ИдентификаторСкладаТорговойПлощадки",    Параметры.ИдентификаторСкладаТорговойПлощадки);
	Запрос.УстановитьПараметр("ДоступныеСклады1С",                      Параметры.ДоступныеСклады1С);
	Запрос.УстановитьПараметр("КатегорииТорговойПлощадки",              Параметры.КатегорииТорговойПлощадки);
	Запрос.УстановитьПараметр("АнализироватьОтгрузки",                  Параметры.АнализироватьОтгрузки);
	Запрос.УстановитьПараметр("НачалоПериодаАнализаОтгрузок",           Параметры.НачалоПериодаАнализаОтгрузок);
	Запрос.УстановитьПараметр("ОкончаниеПериодаАнализаОтгрузок",        Параметры.ОкончаниеПериодаАнализаОтгрузок);
	Запрос.УстановитьПараметр("Организация",					        Параметры.Организация);
	Запрос.УстановитьПараметр("Партнер",						        Параметры.Партнер);
	Запрос.УстановитьПараметр("Контрагент",                             Параметры.Контрагент);
	Запрос.УстановитьПараметр("Соглашение",						        Параметры.Соглашение);
	Запрос.УстановитьПараметр("Договор",						        Параметры.Договор);
	Запрос.УстановитьПараметр("ИспользоватьХарактеристикиНоменклатуры", Параметры.ИспользоватьХарактеристикиНоменклатуры);
	Запрос.УстановитьПараметр("ИспользоватьУпаковкиНоменклатуры",       Параметры.ИспользоватьУпаковкиНоменклатуры);
	
КонецПроцедуры

// Обновляет служебные данные дерева товаров при открытии обработки.
//
// Параметры:
//   УчетнаяЗаписьТорговойПлощадки - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису;
//   Параметры                     - Структура - дополнительные свойства динамического списка, 
//                                     см. Обработка.УправлениеПродажамиНаOzon.Форма.ПланированиеПоставокНаСкладыТорговойПлощадки.ДанныеДляПланирования.
//
// Возвращаемое значение:
//   См. ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка.
//
Функция СоздатьЗаявкиНаПоставку(Знач УчетнаяЗаписьТорговойПлощадки, Параметры) Экспорт
	
	Ошибка = ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка();
	
	Если Не ЗначениеЗаполнено(УчетнаяЗаписьТорговойПлощадки) Тогда
		Ошибка.КодОшибки      = ИнтеграцияСМаркетплейсомOzonСервер.КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
		Ошибка.ОписаниеОшибки = НСтр("ru = 'Не указана учетная запись торговой площадки.'");
		Возврат Ошибка;
	КонецЕсли;
	
	Отказ = Ложь;
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"Обработка.УправлениеПродажамиНаOzon.СоздатьЗаявкиНаПоставку");
		
	Попытка
		НастройкиУчетнойЗаписи = Справочники.УчетныеЗаписиМаркетплейсов.НастройкиУчетнойЗаписи(УчетнаяЗаписьТорговойПлощадки);
		Склады                 = ИнтеграцияСМаркетплейсомOzonСервер.ПолучитьСкладыСРодителями();
		ЗаказыКлиентов         = Новый Соответствие;
		
		ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
		ИспользоватьУпаковкиНоменклатуры       = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
		ИспользоватьПартнеровИКонтрагентов     = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов");
		ИспользоватьСоглашенияСКлиентами       = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
		ИспользуютсяДоговорыКонтрагентов       = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами");
		
		Если ИспользоватьСоглашенияСКлиентами Тогда
			УстановитьПривилегированныйРежим(Истина);
			ИспользуютсяДоговорыКонтрагентов = ИспользуютсяДоговорыКонтрагентов
												И ЗначениеЗаполнено(НастройкиУчетнойЗаписи.Соглашение)
												И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкиУчетнойЗаписи.Соглашение, "ИспользуютсяДоговорыКонтрагентов");
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
		
		Параметры.Вставить("ИспользоватьХарактеристикиНоменклатуры", ИспользоватьХарактеристикиНоменклатуры);
		Параметры.Вставить("ИспользоватьУпаковкиНоменклатуры",       ИспользоватьУпаковкиНоменклатуры);
		Параметры.Вставить("ИспользоватьПартнеровИКонтрагентов",     ИспользоватьПартнеровИКонтрагентов);
		Параметры.Вставить("ИспользоватьСоглашенияСКлиентами",       ИспользоватьСоглашенияСКлиентами);
		Параметры.Вставить("ИспользуютсяДоговорыКонтрагентов",       ИспользуютсяДоговорыКонтрагентов);
		
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("Дата",                  ТекущаяДатаСеанса());
		ДанныеЗаполнения.Вставить("Организация",           НастройкиУчетнойЗаписи.Организация);
		ДанныеЗаполнения.Вставить("Партнер",               НастройкиУчетнойЗаписи.Партнер);
		ДанныеЗаполнения.Вставить("Контрагент",            НастройкиУчетнойЗаписи.Контрагент);
		ДанныеЗаполнения.Вставить("Соглашение", 		   ?(ИспользоватьСоглашенияСКлиентами, НастройкиУчетнойЗаписи.Соглашение, Справочники.СоглашенияСКлиентами.ПустаяСсылка()));
		ДанныеЗаполнения.Вставить("Договор", 	           ?(ИспользуютсяДоговорыКонтрагентов, НастройкиУчетнойЗаписи.ДоговорПродажиЧерезСкладыТорговойПлощадки, Справочники.ДоговорыКонтрагентов.ПустаяСсылка()));
		ДанныеЗаполнения.Вставить("Валюта",                ?(ЗначениеЗаполнено(НастройкиУчетнойЗаписи.ВалютаУчета), НастройкиУчетнойЗаписи.ВалютаУчета, ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(НастройкиУчетнойЗаписи.Организация)));
		ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
		ДанныеЗаполнения.Вставить("Статус",                Перечисления.СтатусыЗаказовКлиентов.КОбеспечению);
		
		ДатаОтгрузкиВСтроке = ТекущаяДатаСеанса();
		Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(НастройкиУчетнойЗаписи.Соглашение) Тогда
			УсловияПродаж = ПродажиСервер.ПолучитьУсловияПродаж(НастройкиУчетнойЗаписи.Соглашение, Истина);
			
			Если УсловияПродаж.СтатусСоглашения <> Перечисления.СтатусыСоглашенийСКлиентами.Закрыто Тогда
				Если ЗначениеЗаполнено(УсловияПродаж.СрокПоставки) Тогда
					ДатаОтгрузкиВСтроке = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(
						ТекущаяДатаСеанса(),
						Перечисления.Периодичность.День,
						УсловияПродаж.СрокПоставки) + 1;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура КАК Номенклатура,
			|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика КАК Характеристика,
			|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Упаковка КАК Упаковка,
			|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторПубликации КАК ИдентификаторПубликации
			|ПОМЕСТИТЬ ВТ_ТаблицаТоваров
			|ИЗ
			|	РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon
			|ГДЕ
			|	СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьТорговойПлощадки
			|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар)
			|	И &ТекстЗапросаКатегорииТорговойПлощадки
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика,
			|	Упаковка"
		
			+ ОбщегоНазначения.РазделительПакетаЗапросов()
			+ ТекстЗапросаДанныхПланирования()
			
			+ "УНИЧТОЖИТЬ ВТ_ТаблицаТоваров
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_Данные.Номенклатура КАК Номенклатура,
			|	ЕСТЬNULL(СправочникХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
			|	ЕСТЬNULL(СправочникУпаковкиЕдиницыИзмерения1.Ссылка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК Упаковка,
			|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК КоэффициентУпаковки,
			|	ЕСТЬNULL(СправочникУпаковкиЕдиницыИзмерения1.ТипИзмеряемойВеличины, НЕОПРЕДЕЛЕНО) КАК УпаковкаТипИзмеряемойВеличины,
			|	ЕСТЬNULL(СправочникУпаковкиЕдиницыИзмерения2.ТипИзмеряемойВеличины, НЕОПРЕДЕЛЕНО) КАК НоменклатураТипИзмеряемойВеличины,
			|	ВТ_Данные.ИдентификаторПубликации КАК ИдентификаторПубликации,
			|	ВТ_Данные.ВНаличииНаСкладах1С КАК ВНаличииНаСкладах1С,
			|	ВТ_Данные.ЗарезервированоНаСкладах1С КАК ЗарезервированоНаСкладах1С,
			|	ВТ_Данные.ВПоставке КАК ВПоставке,
			|	ВТ_Данные.ВНаличии КАК ВНаличии,
			|	ВТ_Данные.Заказано КАК Заказано,
			|	ВТ_Данные.Отменено КАК Отменено,
			|	ВТ_Данные.ДнейВНаличии КАК ДнейВНаличии
			|ИЗ
			|	ВТ_Данные КАК ВТ_Данные
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
			|		ПО ВТ_Данные.Номенклатура = СправочникНоменклатура.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК СправочникХарактеристикиНоменклатуры
			|		ПО (&ИспользоватьХарактеристикиНоменклатуры)
			|			И ВТ_Данные.Характеристика = СправочникХарактеристикиНоменклатуры.Ссылка
			|			И (ВЫБОР
			|				КОГДА СправочникНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
			|					ТОГДА СправочникНоменклатура.ВидНоменклатуры
			|				КОГДА СправочникНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
			|					ТОГДА СправочникНоменклатура.Ссылка
			|				КОГДА СправочникНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
			|					ТОГДА СправочникНоменклатура.ВладелецХарактеристик
			|				ИНАЧЕ ЛОЖЬ
			|			КОНЕЦ = СправочникХарактеристикиНоменклатуры.Владелец)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК СправочникУпаковкиЕдиницыИзмерения1
			|		ПО (&ИспользоватьУпаковкиНоменклатуры)
			|			И ВТ_Данные.Упаковка = СправочникУпаковкиЕдиницыИзмерения1.Ссылка
			|			И (ЕСТЬNULL(СправочникНоменклатура.ИспользоватьУпаковки, ЛОЖЬ))
			|			И (ВЫБОР
			|				КОГДА СправочникНоменклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
			|					ТОГДА СправочникНоменклатура.Ссылка
			|				КОГДА СправочникНоменклатура.НаборУпаковок <> ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ПустаяСсылка)
			|					ТОГДА СправочникНоменклатура.НаборУпаковок
			|				ИНАЧЕ НЕОПРЕДЕЛЕНО
			|			КОНЕЦ = СправочникУпаковкиЕдиницыИзмерения1.Владелец)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК СправочникУпаковкиЕдиницыИзмерения2
			|		ПО (СправочникНоменклатура.ЕдиницаИзмерения = СправочникУпаковкиЕдиницыИзмерения2.Ссылка)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Номенклатура,
			|	Характеристика,
			|	Упаковка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_ОстаткиТоваровПоСкладам.Номенклатура КАК Номенклатура,
			|	ВТ_ОстаткиТоваровПоСкладам.Характеристика КАК Характеристика,
			|	ВТ_ОстаткиТоваровПоСкладам.Склад КАК Склад,
			|	СУММА(ВТ_ОстаткиТоваровПоСкладам.ВНаличииОстаток - ВТ_ОстаткиТоваровПоСкладам.РезервироватьОстаток) КАК Остаток
			|ИЗ
			|	ВТ_ОстаткиТоваровПоСкладам КАК ВТ_ОстаткиТоваровПоСкладам
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТ_ОстаткиТоваровПоСкладам.Номенклатура,
			|	ВТ_ОстаткиТоваровПоСкладам.Характеристика,
			|	ВТ_ОстаткиТоваровПоСкладам.Склад";
			
		СкорректироватьТекстЗапросаДанныхПланирования(Запрос, Параметры);
		
		Запрос.УстановитьПараметр("УчетнаяЗаписьТорговойПлощадки", УчетнаяЗаписьТорговойПлощадки);
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		ОстаткиТоваров   = РезультатЗапроса[РезультатЗапроса.ВГраница()].Выгрузить();
		ВыборкаДанных    = РезультатЗапроса[РезультатЗапроса.ВГраница() - 1].Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		
		ОстаткиТоваров.Индексы.Добавить("Номенклатура, Характеристика");
		
		Пока ВыборкаДанных.Следующий() Цикл
			КоэффициентУпаковки        = ?(ВыборкаДанных.КоэффициентУпаковки = 0, 1, ВыборкаДанных.КоэффициентУпаковки);
			СреднийЗаказВДень          = Окр(?(ВыборкаДанных.ДнейВНаличии = 0, 0, (ВыборкаДанных.Заказано - ВыборкаДанных.Отменено) / ВыборкаДанных.ДнейВНаличии), 3, РежимОкругления.Окр15как20);
			ЗапасДней                  = Окр(?(СреднийЗаказВДень = 0, 0, ВыборкаДанных.ВНаличии / СреднийЗаказВДень), 1, РежимОкругления.Окр15как20);
			ПлановаяПотребность        = Окр(Макс(0, Параметры.КоличествоДнейПланирования * СреднийЗаказВДень - ВыборкаДанных.ВНаличии + 0.4), 0, РежимОкругления.Окр15как20);
			ВПоставке                  = Окр(ВыборкаДанных.ВПоставке / КоэффициентУпаковки, 3, РежимОкругления.Окр15как20);
			ВНаличииНаСкладах1С        = Окр(ВыборкаДанных.ВНаличииНаСкладах1С / КоэффициентУпаковки, 3, РежимОкругления.Окр15как20);
			ЗарезервированоНаСкладах1С = Окр(ВыборкаДанных.ЗарезервированоНаСкладах1С / КоэффициентУпаковки, 3, РежимОкругления.Окр15как20);
			ЗапланироватьКПоставке     = Макс(0, Мин(?(Параметры.АнализироватьОтгрузки, ПлановаяПотребность, 0) - ВПоставке, ВНаличииНаСкладах1С));
			
			Ключ                  = Строка(ВыборкаДанных.Номенклатура.УникальныйИдентификатор()) + "_" + Строка(ВыборкаДанных.Характеристика.УникальныйИдентификатор());
			ПланированиеПоСкладам = Параметры.ПланированиеПоСкладам.Получить(Ключ);

			Если ПланированиеПоСкладам = Неопределено Тогда
				ПланированиеПоСкладам = Новый Соответствие;
			КонецЕсли;
			
			Данные = ПланированиеПоСкладам.Получить(ВыборкаДанных.ИдентификаторПубликации);
			
			Если Данные = Неопределено Тогда
				Данные = Новый Структура;
				Данные.Вставить("НомерПоПорядку",         ПланированиеПоСкладам.Количество() + 1);
				Данные.Вставить("Упаковка",               ВыборкаДанных.Упаковка);
				Данные.Вставить("КоэффициентУпаковки",    КоэффициентУпаковки);
				Данные.Вставить("Остаток",                ВыборкаДанных.ВНаличииНаСкладах1С);	// В базовых единицах
				Данные.Вставить("ЗапланироватьКПоставке", ЗапланироватьКПоставке);				// В упаковках
				Данные.Вставить("ПоСкладам",              Новый Массив);
			КонецЕсли;
			
			Если ЗапланироватьКПоставке > 0 Тогда
				// Автоматическое планирование
				Если Данные.ПоСкладам.Количество() = 0 Тогда
					Зарезервировано = 0;
					Остатки         = Новый Соответствие;
					
					Для Каждого КлючЗначение Из ПланированиеПоСкладам Цикл
						Если КлючЗначение.Значение.НомерПоПорядку <> Данные.НомерПоПорядку Тогда
							Зарезервировано = Зарезервировано + Окр(КлючЗначение.Значение.ЗапланироватьКПоставке * КлючЗначение.Значение.КоэффициентУпаковки, 3, РежимОкругления.Окр15как20);
							
							Для Каждого ЭлементКоллекции Из КлючЗначение.Значение.ПоСкладам Цикл
								Остаток = Остатки.Получить(ЭлементКоллекции.Склад);
								Если Остаток = Неопределено Тогда
									Остаток = 0;
								КонецЕсли;
								
								Остатки.Вставить(ЭлементКоллекции.Склад, Остаток + Окр(ЭлементКоллекции.ЗапланироватьКПоставке * КлючЗначение.Значение.КоэффициентУпаковки, 3, РежимОкругления.Окр15как20));
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
					
					Данные.ЗапланироватьКПоставке = Макс(0, Мин(?(Параметры.АнализироватьОтгрузки, ПлановаяПотребность, 0) - ВПоставке, 
																ВНаличииНаСкладах1С - Окр(Зарезервировано / Данные.КоэффициентУпаковки, 3, РежимОкругления.Окр15как20)));
					ЗапланироватьКПоставке        = Окр(Данные.ЗапланироватьКПоставке * КоэффициентУпаковки, 3, РежимОкругления.Окр15как20);
					
					Отбор           = Новый Структура("Номенклатура, Характеристика", ВыборкаДанных.Номенклатура, ВыборкаДанных.Характеристика);
					НайденныеСтроки = ОстаткиТоваров.НайтиСтроки(Отбор);
														
					Для Каждого СтрокаТаблицыЗначений Из НайденныеСтроки Цикл
						Если ЗапланироватьКПоставке <= 0 Тогда
							Прервать;
						КонецЕсли;
						
						Зарезервировано = Остатки.Получить(СтрокаТаблицыЗначений.Склад);
						Остаток         = СтрокаТаблицыЗначений.Остаток - ?(Зарезервировано = Неопределено, 0, Зарезервировано);
						
						Если Остаток <= 0 Тогда
							Продолжить;
						КонецЕсли;
						
						ПоСкладу = Новый Структура;
						ПоСкладу.Вставить("Склад",                  СтрокаТаблицыЗначений.Склад);
						ПоСкладу.Вставить("Остаток",                Остаток);
						ПоСкладу.Вставить("ЗапланироватьКПоставке", Макс(0, Мин(Остаток, ЗапланироватьКПоставке)));
						
						Данные.ПоСкладам.Добавить(ПоСкладу);
						
						ЗапланироватьКПоставке = ЗапланироватьКПоставке - ПоСкладу.ЗапланироватьКПоставке;
					КонецЦикла;
					
					Для Каждого ЭлементКоллекции Из Данные.ПоСкладам Цикл
						ЭлементКоллекции.ЗапланироватьКПоставке = Окр(ЭлементКоллекции.ЗапланироватьКПоставке / КоэффициентУпаковки, 3, РежимОкругления.Окр15как20);
					КонецЦикла;
				КонецЕсли;
				
				ПланированиеПоСкладам.Вставить(ВыборкаДанных.ИдентификаторПубликации, Данные);
				Параметры.ПланированиеПоСкладам.Вставить(Ключ, ПланированиеПоСкладам);
			КонецЕсли;
			
			Если Данные.ПоСкладам.Количество() > 0 Тогда
				// Заполнение документов
				Для Каждого ЭлементКоллекции Из Данные.ПоСкладам Цикл
					Если ЭлементКоллекции.ЗапланироватьКПоставке <= 0 Тогда
						Продолжить;
					КонецЕсли;
					
					Склад = Склады.Получить(ЭлементКоллекции.Склад);
					Если Склад = Неопределено Тогда
						Склад = ЭлементКоллекции.Склад;
					КонецЕсли;
					
					ЗаказКлиентаОбъект = ЗаказыКлиентов.Получить(Склад);
					Если ЗаказКлиентаОбъект = Неопределено Тогда
						ЗаказКлиентаОбъект                    = Документы.ЗаказКлиента.СоздатьДокумент();
						ЗаказКлиентаОбъект.Дата               = ТекущаяДатаСеанса();
						ЗаказКлиентаОбъект.Организация        = ДанныеЗаполнения.Организация;
						ЗаказКлиентаОбъект.Склад              = Склад;
						ЗаказКлиентаОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
						ЗаказКлиентаОбъект.ДатаОтгрузки       = ДатаОтгрузкиВСтроке;
						ЗаказКлиентаОбъект.Комментарий        = Параметры.НаименованиеСкладаТорговойПлощадки;
						ЗаказКлиентаОбъект.ЭтоЗаказКакСчет    = Не ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента");
						
						ЗаказКлиентаОбъект.Заполнить(ДанныеЗаполнения);
						
						Если Не ЗначениеЗаполнено(ЗаказКлиентаОбъект.Контрагент) Тогда
							ЗаказКлиентаОбъект.Контрагент = ДанныеЗаполнения.Контрагент;
						КонецЕсли;
						Если ИспользоватьСоглашенияСКлиентами И Не ЗначениеЗаполнено(ЗаказКлиентаОбъект.Соглашение) Тогда
							ЗаказКлиентаОбъект.Соглашение = ДанныеЗаполнения.Соглашение;
						КонецЕсли;
						Если ИспользуютсяДоговорыКонтрагентов Тогда
							ЗаказКлиентаОбъект.Договор = ДанныеЗаполнения.Договор;
						КонецЕсли;
						
						ЗаказКлиентаОбъект.ЗаполнитьУсловияПродажПоСоглашению(Ложь);
						ЗаказКлиентаОбъект.УстановитьНовыйНомер();
					КонецЕсли;
					
					СтрокаТабличнойЧасти                    = ЗаказКлиентаОбъект.Товары.Добавить();
					СтрокаТабличнойЧасти.Номенклатура       = ВыборкаДанных.Номенклатура;
					СтрокаТабличнойЧасти.Характеристика     = ВыборкаДанных.Характеристика;
					СтрокаТабличнойЧасти.Упаковка           = ВыборкаДанных.Упаковка;
					СтрокаТабличнойЧасти.КоличествоУпаковок = ЭлементКоллекции.ЗапланироватьКПоставке;
					СтрокаТабличнойЧасти.Количество         = Окр(ЭлементКоллекции.ЗапланироватьКПоставке * КоэффициентУпаковки, 3, РежимОкругления.Окр15как20);
					СтрокаТабличнойЧасти.Склад              = ЭлементКоллекции.Склад;
					СтрокаТабличнойЧасти.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада;
					СтрокаТабличнойЧасти.СтавкаНДС          = Справочники.СтавкиНДС.ПустаяСсылка();
					СтрокаТабличнойЧасти.КодСтроки          = 0;
					СтрокаТабличнойЧасти.ДатаОтгрузки       = ДатаОтгрузкиВСтроке;
					СтрокаТабличнойЧасти.Отменено           = Ложь;
					СтрокаТабличнойЧасти.ПричинаОтмены      = Справочники.ПричиныОтменыЗаказовКлиентов.ПустаяСсылка();
					
					// Округление количества
					Если ВыборкаДанных.НоменклатураТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.КоличествоШтук
							И (ВыборкаДанных.УпаковкаТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Вес
								Или ВыборкаДанных.УпаковкаТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Длина
								Или ВыборкаДанных.УпаковкаТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Объем
								Или ВыборкаДанных.УпаковкаТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Площадь) Тогда
						СтрокаТабличнойЧасти.Количество = Окр(СтрокаТабличнойЧасти.Количество, 0, РежимОкругления.Окр15как20);
					КонецЕсли;
					
					ЗаказыКлиентов.Вставить(Склад, ЗаказКлиентаОбъект);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		// Проведение сформированных заявок на поставку
		Для Каждого КлючЗначение Из ЗаказыКлиентов Цикл
			Попытка
				ЗаказКлиентаОбъект = КлючЗначение.Значение;
				
				Если ЗаказКлиентаОбъект.Товары.Количество() > 0 Тогда
					// Варианты обеспечения
					Если ЗаказКлиентаОбъект.ЭтоЗаказКакСчет Тогда
						СтруктураДействий  = Новый Структура;
						ПоляСтрокой        = "ВариантОбеспечения";
						ПараметрыДокумента = Документы.ЗаказКлиента.ПараметрыДокументаДляДействийОбеспечения(ЗаказКлиентаОбъект);
						ОбеспечениеВДокументахКлиентСервер.ДобавитьДействияОбеспечения(СтруктураДействий, ПоляСтрокой, ПараметрыДокумента);
						ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(ЗаказКлиентаОбъект.Товары, СтруктураДействий, Неопределено);
					КонецЕсли;
					
					// Расчет цен
					ПараметрыЗаполнения = Новый Структура();
					ПараметрыЗаполнения.Вставить("Дата",                         ЗаказКлиентаОбъект.Дата);
					ПараметрыЗаполнения.Вставить("Организация",                  ЗаказКлиентаОбъект.Организация);
					ПараметрыЗаполнения.Вставить("Валюта",                       ЗаказКлиентаОбъект.Валюта);
					ПараметрыЗаполнения.Вставить("Партнер",                      ЗаказКлиентаОбъект.Партнер);
					ПараметрыЗаполнения.Вставить("РассчитыватьНаборы",           Истина);
					ПараметрыЗаполнения.Вставить("НалогообложениеНДС",           ЗаказКлиентаОбъект.НалогообложениеНДС);
					ПараметрыЗаполнения.Вставить("ВозвращатьМногооборотнуюТару", ЗаказКлиентаОбъект.ВернутьМногооборотнуюТару);
					ПараметрыЗаполнения.Вставить("ПоляЗаполнения",               "Цена, ВидЦены, СрокПоставки");
					
					Если ЗаказКлиентаОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
							И ЗначениеЗаполнено(ЗаказКлиентаОбъект.Договор)
							И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказКлиентаОбъект.Договор, "КомиссионныеПродажи25") Тогда
						УчетныйВидЦеныДоговора = КомиссионнаяТорговляСервер.ВидЦеныДоговора(ЗаказКлиентаОбъект.Договор, Истина);
						ПараметрыЗаполнения.Вставить("ВидЦены", УчетныйВидЦеныДоговора);
					Иначе
						ПараметрыЗаполнения.Вставить("Соглашение", ЗаказКлиентаОбъект.Соглашение);
					КонецЕсли;
					
					СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ЗаказКлиентаОбъект);
					
					СтруктураДействий = Новый Структура;
					СтруктураДействий.Вставить("ПересчитатьСумму");
					СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  СтруктураПересчетаСуммы);
					СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
					СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
					СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
					СтруктураДействий.Вставить("ОчиститьАвтоматическуюСкидку");
					
					ЦеныПредприятияЗаполнениеСервер.ЗаполнитьЦены(
						ЗаказКлиентаОбъект.Товары,
						, // Массив строк или структура отбора
						ПараметрыЗаполнения,
						СтруктураДействий);
					
					// Запись и проведение документа
					ЗаказКлиентаОбъект.Записать(РежимЗаписиДокумента.Проведение);
					
					// Запись в Реестр документов
					ЗаказКлиентаСсылка = ЗаказКлиентаОбъект.Ссылка;
					
					ТаблицыДанных = ПроведениеДокументов.ДанныеДокументаДляПроведения(ЗаказКлиентаСсылка, "РеестрДокументов");
					РегистрыСведений.РеестрДокументов.ЗаписатьДанные(ТаблицыДанных, ЗаказКлиентаСсылка, Неопределено, Ложь);
				КонецЕсли;
				
			Исключение
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'При создании заявки на поставку от %1 по складу %2 возникли ошибки: %3'",
						ОбщегоНазначения.КодОсновногоЯзыка()),
					Формат(ЗаказКлиентаОбъект.Дата, "ДЛФ=D;"),
					ЗаказКлиентаОбъект.Склад,
					ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписьЖурналаРегистрации(ИнтеграцияСМаркетплейсомOzonСервер.СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Ошибка,,,
					ТекстОшибки);
				
				Ошибка.КодОшибки 	  = ИнтеграцияСМаркетплейсомOzonСервер.КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
				Ошибка.ОписаниеОшибки = НСтр("ru = 'При создании заявок на поставку возникли ошибки. Часть данных может быть неактуальна. Подробности см. в журнале регистрации.'");
			КонецПопытки;
		КонецЦикла;
		
	Исключение
		Отказ = Истина;
		ЗаписьЖурналаРегистрации(ИнтеграцияСМаркетплейсомOzonСервер.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

	Если Отказ Тогда
		Ошибка.КодОшибки      = ИнтеграцияСМаркетплейсомOzonСервер.КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
		Ошибка.ОписаниеОшибки = НСтр("ru = 'При создании заявок на поставку возникли ошибки. Подробности см. в журнале регистрации.'");
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(
		Замер, 
		ВыборкаДанных.Количество() / 10000);
	
	Возврат Ошибка;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИмпортДанныхСлужебный

// Формирует наименования групп первого уровня дерева товаров.
//
// Параметры:
//   ДеревоТоваров                  - ДеревоЗначений - структура дерева описана в реквизите "ИмпортируемыеТовары", 
//                                      см. Обработка.УправлениеПродажамиНаOzon.Форма.ИмпортДанныхТоваровСТорговойПлощадки.
//   СортироватьСтрокиДереваТоваров - Булево - Истина, если после загрузки требуется отсортировать строки второго уровня дерева товаров.
//   ОтображатьСопоставленные       - Число - установленный фильтр по сопоставленным позициям дерева товаров.
//   ОтображатьПоСтатусу            - Число - установленный фильтр по статусу позиций дерева товаров.
//
Процедура ОпределитьНаименованияГруппДереваТоваров(ДеревоТоваров, Знач СортироватьСтрокиДереваТоваров = Истина, 
            Знач ОтображатьСопоставленные = 0, Знач ОтображатьПоСтатусу = -1)
    
    Индекс = 0;
    
    Пока Индекс < ДеревоТоваров.Строки.Количество() Цикл
        СтрокаДереваПервогоУровня = ДеревоТоваров.Строки[Индекс];
        
        Если СтрокаДереваПервогоУровня.Строки.Количество() = 0 Тогда
            ДеревоТоваров.Строки.Удалить(СтрокаДереваПервогоУровня);
            Продолжить;
        ИначеЕсли СтрокаДереваПервогоУровня.ВариантЗагрузки = 0 Тогда
            ШаблонПредставления = НСтр("ru = 'Обновить (%1 из %2)'");
        ИначеЕсли СтрокаДереваПервогоУровня.ВариантЗагрузки = 2 Тогда
            ШаблонПредставления = НСтр("ru = 'Загрузить (%1 из %2)'");
        ИначеЕсли СтрокаДереваПервогоУровня.ВариантЗагрузки = 3 Тогда
            ШаблонПредставления = НСтр("ru = 'Не найдены (%2)'");
        КонецЕсли;
        
        КоличествоСтрок           = СтрокаДереваПервогоУровня.Строки.Количество();
        КоличествоОтмеченныхСтрок = 0;
        
        Для Каждого СтрокаДереваВторогоУровня Из СтрокаДереваПервогоУровня.Строки Цикл
            Если ОтображатьСопоставленные = 1
					И (Не ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Номенклатура) 
						Или СтрокаДереваВторогоУровня.ХарактеристикиИспользуются
							И Не ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Характеристика)
						Или Не ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Категория)) Тогда
                КоличествоСтрок = КоличествоСтрок - 1;
                Продолжить;
                
            ИначеЕсли ОтображатьСопоставленные = 2
						И ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Номенклатура) 
						И (Не СтрокаДереваВторогоУровня.ХарактеристикиИспользуются
							Или ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Характеристика))
						И ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Категория) Тогда
                КоличествоСтрок = КоличествоСтрок - 1;
                Продолжить;
            КонецЕсли;
            
            Если ОтображатьПоСтатусу <> -1
					И СтрокаДереваВторогоУровня.ИндексСтатуса <> ОтображатьПоСтатусу Тогда
				КоличествоСтрок = КоличествоСтрок - 1;
				Продолжить;
            КонецЕсли;
            
            КоличествоОтмеченныхСтрок = КоличествоОтмеченныхСтрок + ?(СтрокаДереваВторогоУровня.Пометка, 1, 0);
        КонецЦикла;
        
        Если КоличествоСтрок = 0 Тогда
            ШаблонПредставления = СтрЗаменить(ШаблонПредставления, " (%1 из %2)", "");
            ШаблонПредставления = СтрЗаменить(ШаблонПредставления, " (%2)", "");
        КонецЕсли;
        
        СтрокаДереваПервогоУровня.Пометка                          = (КоличествоОтмеченныхСтрок > 0);
        СтрокаДереваПервогоУровня.КоличествоОтмеченныхСтрок        = КоличествоОтмеченныхСтрок;
        СтрокаДереваПервогоУровня.ПредставлениеОбъектаМаркетплейса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
            ШаблонПредставления,
            КоличествоОтмеченныхСтрок,
            КоличествоСтрок);
        
        Если СортироватьСтрокиДереваТоваров Тогда
            СтрокаДереваПервогоУровня.Строки.Сортировать("ПредставлениеОбъектаМаркетплейса");
        КонецЕсли;
        
        Индекс = Индекс + 1;
    КонецЦикла;
        
КонецПроцедуры

// Осуществляет перенос строки дерева товаров между родителями.
// 
// Параметры:
//   ДеревоТоваров - ДеревоЗначений       - структура дерева описана в реквизите "ИмпортируемыеТовары", 
//                                            см. Обработка.УправлениеПродажамиНаOzon.Форма.ИмпортДанныхТоваровСТорговойПлощадки.
//   Источник      - СтрокаДереваЗначений - строка дерева товаров, которую необходимо перенести.
//   Приемник      - СтрокаДереваЗначений - строка-родитель дерева товаров, в которую необходимо перенести Источник.
//
Процедура ПеренестиСтрокуДереваТоваровВДругуюГруппу(ДеревоТоваров, Источник, Приемник) 
	
	СтрокаДереваВторогоУровня = Приемник.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаДереваВторогоУровня, Источник,, "ДеревоРеквизитов, Изображения, ДанныеОбъекта, ДанныеТовараИзСервиса, ЗначенияРеквизитовИзСервиса");

	СтрокаДереваВторогоУровня.ДеревоРеквизитов            = Источник.ДеревоРеквизитов.Скопировать();
	СтрокаДереваВторогоУровня.Изображения                 = Источник.Изображения.Скопировать();
	СтрокаДереваВторогоУровня.ДанныеОбъекта               = Источник.ДанныеОбъекта.Скопировать();
	СтрокаДереваВторогоУровня.ДанныеТовараИзСервиса       = Источник.ДанныеТовараИзСервиса.Скопировать();
	СтрокаДереваВторогоУровня.ЗначенияРеквизитовИзСервиса = Источник.ЗначенияРеквизитовИзСервиса.Скопировать();
	СтрокаДереваВторогоУровня.ЦеныТовара                  = ОбщегоНазначения.СкопироватьРекурсивно(Источник.ЦеныТовара);
	
	СтрокаДереваПервогоУровня = Источник.Родитель;
	СтрокаДереваПервогоУровня.Строки.Удалить(Источник);
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаЗагрузкаДанных

// Задает использование процедур и функций.
//
// Возвращаемое значение:
//   См. ИнтеграцияСМаркетплейсамиСервер.ИспользуемыеМетодыМенеджераОбъектаМетаданных.
//
Функция ОпределитьИспользуемыеМетоды() Экспорт

	Методы = ИнтеграцияСМаркетплейсамиСервер.ИспользуемыеМетодыМенеджераОбъектаМетаданных();

	// Основные методы.
	Методы.ВыполнитьПроверкуИнформацииПоКолонкам                    = Истина;
	Методы.УстановитьПараметрыЗагрузкиИзФайлаВТабличнуюЧасть        = Истина;
	Методы.ДополнитьУсловноеОформлениеТаблицыСопоставленияДанных    = Истина;
	Методы.НастроитьДинамическийСписокОтображенияРезультатаЗагрузки = Истина;
	Методы.ПолучитьДанныеИнтеграционнымиМетодами                    = Истина;
	Методы.СопоставитьЗагружаемыеДанные                             = Истина;
	Методы.ЗаписатьЗагружаемыеДанные                                = Истина;

	// Выгрузка в файл - см. СформироватьТабличныйДокументПоИмениМакетаСШаблоном.
	Методы.НаименованиеСохраняемогоФайла                            = Истина;
	Методы.ЗаполнитьШапкуМакета                                     = Истина;
	Методы.ЗаполнитьЗаголовокТаблицыМакета                          = Ложь;
	Методы.ПолучитьДанныеСтрокТаблицыМакета                         = Истина;
	Методы.ВывестиТаблицуМакета                                     = Ложь;
	Методы.ЗаполнитьПодвалМакета                                    = Ложь;

	Возврат Методы;

КонецФункции

// Выполняет проверку таблицы с информацией по колонка на соответствие последней версии содержимого таблицы.
//
// Параметры:
//  ИнформацияПоКолонкам - см. ИнтеграцияСМаркетплейсамиСервер.ИнициализироватьТаблицуИнформацииПоКолонкам.
//  ИмяТабличнойЧасти    - Строка - имя табличной части объекта метаданных, например: "ДанныеПоставок".
//
// Возвращаемое значение:
//   Булево - результат проверки.
//
Функция ВыполнитьПроверкуИнформацииПоКолонкам(ИнформацияПоКолонкам, ИмяТабличнойЧасти) Экспорт

	ПроверкаПройдена = Истина;

	// Проверка наличия новой колонки.
	ИскомаяКолонка = "";
	Если ИмяТабличнойЧасти = "ДанныеПоставок" Тогда
		ИскомаяКолонка = "ТипНоменклатуры";
	ИначеЕсли ИмяТабличнойЧасти = "ДанныеЗаявокНаВозврат" Тогда
		ИскомаяКолонка = "УпаковкаКоэффициент";
	ИначеЕсли ИмяТабличнойЧасти = "ДанныеОРеализованныхТоварах" Тогда
		ИскомаяКолонка = "УпаковкаКоэффициент";
	КонецЕсли;

	Если ПроверкаПройдена И Не ПустаяСтрока(ИскомаяКолонка) Тогда
		ПроверкаПройдена = (ИнформацияПоКолонкам.Найти(ИскомаяКолонка, "ИмяКолонки") <> Неопределено);
	КонецЕсли;

	// Проверка наличия удаленной колонки.
	ИскомаяКолонка = "";
	Если ИмяТабличнойЧасти = "ДанныеПоставок" Тогда
		ИскомаяКолонка = "ИдентификаторSKU";
	ИначеЕсли ИмяТабличнойЧасти = "ДанныеЗаявокНаВозврат" Тогда
		ИскомаяКолонка = "ДатаИстеченияСрокаГодности";
	КонецЕсли;

	Если ПроверкаПройдена И Не ПустаяСтрока(ИскомаяКолонка) Тогда
		ПроверкаПройдена = (ИнформацияПоКолонкам.Найти(ИскомаяКолонка, "ИмяКолонки") = Неопределено);
	КонецЕсли;

	// Иные проверки.

	Возврат ПроверкаПройдена;

КонецФункции

// Устанавливает параметры загрузки.
//
// Параметры:
//  Параметры - см. ИнтеграцияСМаркетплейсамиСервер.ПараметрыЗагрузкиИзФайлаВТабличнуюЧасть.
//
Процедура УстановитьПараметрыЗагрузкиИзФайлаВТабличнуюЧасть(Параметры) Экспорт

	// При дополнении состава Основных колонок в табличной части или дополнительных колонок в текущей процедуре
	// необходимо добавлять проверку в ВыполнитьПроверкуИнформацииПоКолонкам(), в противном случае информация
	// по колонкам будет взята из сохраненных настроек, и может возникнуть ошибка при обращении к новым колонкам
	// в заложенных алгоритмах.

	ЗаполняемыеПриЗагрузкеКолонки            = Параметры.ЗаполняемыеПриЗагрузкеКолонки; // Соответствие
	ТипыДанныхКолонок                        = Параметры.ТипыДанныхКолонок; // Соответствие
	ОсновныеКолонки                          = Параметры.ОсновныеКолонки; // Массив
	ПустыеВИтогахКолонки                     = Параметры.ПустыеВИтогахКолонки; // Массив
	ОбработчикиСобытий                       = Параметры.ПодключаемыеОбработчикиСобытий; // Структура
	ПодключаемыеКомандыЗаполнения            = Параметры.ПодключаемыеКомандыЗаполнения; // Структура

	ТипЧисло_15_2 = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2));
	ТипЧисло_20_3 = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(20, 3));
	ТипЧисло_2_0  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(2, 0));
	ТипСтрока_50  = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50));
	ТипСтрока_250 = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(250));
	ТипДата       = Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.Дата));
	ТипБулево     = Новый ОписаниеТипов("Булево");
	ТипУпаковки   = Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения");

	Если Параметры.ИмяТабличнойЧасти = "ДанныеПоставок" Тогда

		ОсновныеКолонки.Добавить("ПредставлениеОбъектаМаркетплейса");
		ОсновныеКолонки.Добавить("Характеристика");
		ОсновныеКолонки.Добавить("Упаковка");
		ОсновныеКолонки.Добавить("Склад");
		ОсновныеКолонки.Добавить("Серия");
		ОсновныеКолонки.Добавить("Обособленно");
		ОсновныеКолонки.Добавить("КоличествоУпаковок");
		ОсновныеКолонки.Добавить("Доступно");

		// Служебные колонки, которые не выводится пользователю.
		ЗаполняемыеПриЗагрузкеКолонки.Вставить("ИдентификаторОбъектаМаркетплейса",
			НСтр("ru = 'Идентификатор Ozon'"));
		ТипыДанныхКолонок.Вставить("ИдентификаторОбъектаМаркетплейса", ТипСтрока_50);

		ЗаполняемыеПриЗагрузкеКолонки.Вставить("НоменклатураЕдиницаИзмерения", НСтр("ru = 'Ед.изм.'"));
		ТипыДанныхКолонок.Вставить("НоменклатураЕдиницаИзмерения", ТипУпаковки);

		ЗаполняемыеПриЗагрузкеКолонки.Вставить("ТипНоменклатуры", НСтр("ru = 'Тип номенклатуры'"));
		ТипыДанныхКолонок.Вставить("ТипНоменклатуры", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНоменклатуры"));

		ЗаполняемыеПриЗагрузкеКолонки.Вставить("ХарактеристикиИспользуются",
			НСтр("ru = 'Характеристики используются'"));
		ТипыДанныхКолонок.Вставить("ХарактеристикиИспользуются", ТипБулево);

		ЗаполняемыеПриЗагрузкеКолонки.Вставить("УпаковкаКоэффициент", НСтр("ru = 'Коэф.упак.'"));
		ТипыДанныхКолонок.Вставить("УпаковкаКоэффициент", ТипЧисло_20_3);

		ЗаполняемыеПриЗагрузкеКолонки.Вставить("СтатусУказанияСерий", НСтр("ru = 'Статус указания серий'"));
		ТипыДанныхКолонок.Вставить("СтатусУказанияСерий", ТипЧисло_2_0);

		ЗаполняемыеПриЗагрузкеКолонки.Вставить("СтатусУказанияСерийНаСкладах",
			НСтр("ru = 'Статус указания серий на складах'"));
		ТипыДанныхКолонок.Вставить("СтатусУказанияСерийНаСкладах", ТипЧисло_2_0);

		ЗаполняемыеПриЗагрузкеКолонки.Вставить("СтатусУказанияСерийПереданныхТоваров",
			НСтр("ru = 'Статус указания серий переданных товаров'"));
		ТипыДанныхКолонок.Вставить("СтатусУказанияСерийПереданныхТоваров", ТипЧисло_2_0);

		ЗаполняемыеПриЗагрузкеКолонки.Вставить("ГруппаСкладов", НСтр("ru = 'Группа складов'"));
		ТипыДанныхКолонок.Вставить("ГруппаСкладов", Новый ОписаниеТипов("СправочникСсылка.Склады"));

		ЗаполняемыеПриЗагрузкеКолонки.Вставить("КодСтроки", НСтр("ru = 'Код строки'"));
		ТипыДанныхКолонок.Вставить("КодСтроки", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(10, 0)));

		ЗаполняемыеПриЗагрузкеКолонки.Вставить("Отменено", НСтр("ru = 'Отменено'"));
		ТипыДанныхКолонок.Вставить("Отменено", ТипБулево);

		ЗаполняемыеПриЗагрузкеКолонки.Вставить("Обособленно", НСтр("ru = 'Обособленно'"));
		ТипыДанныхКолонок.Вставить("Обособленно", ТипБулево);

		ЗаполняемыеПриЗагрузкеКолонки.Вставить("Количество", НСтр("ru = 'Количество'"));
		ТипыДанныхКолонок.Вставить("Количество", ТипЧисло_20_3);

		ЗаполняемыеПриЗагрузкеКолонки.Вставить("ВариантОбеспечения", НСтр("ru = 'Вариант обеспечения'"));
		ТипыДанныхКолонок.Вставить("ВариантОбеспечения", Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыОбеспечения"));

		// Установка команды изменения поведения элементов формы.
		Параметры.КомандаИзменитьПоведениеЭлементовФормы =
			"Обработки.УправлениеПродажамиНаOzon.Подключаемый_ИзменитьПоведениеЭлементовФормы";

		// Обработчики событий изменения полей в таблице сопоставления.
		ОбработчикиСобытий.Вставить("ИдентификаторПубликацииПриИзменении",
			"Обработки.УправлениеПродажамиНаOzon.Подключаемый_ПолеПриИзменении");
		ОбработчикиСобытий.Вставить("НоменклатураПриИзменении",
			"Обработки.УправлениеПродажамиНаOzon.Подключаемый_ПолеПриИзменении");
		ОбработчикиСобытий.Вставить("ХарактеристикаПриИзменении",
			"Обработки.УправлениеПродажамиНаOzon.Подключаемый_ПолеПриИзменении");
		ОбработчикиСобытий.Вставить("УпаковкаПриИзменении",
			"Обработки.УправлениеПродажамиНаOzon.Подключаемый_ПолеПриИзменении");
		ОбработчикиСобытий.Вставить("СкладПриИзменении",
			"Обработки.УправлениеПродажамиНаOzon.Подключаемый_ПолеПриИзменении");
		ОбработчикиСобытий.Вставить("СерияПриИзменении",
			"Обработки.УправлениеПродажамиНаOzon.Подключаемый_ПолеПриИзменении");
		ОбработчикиСобытий.Вставить("КоличествоУпаковокПриИзменении",
			"Обработки.УправлениеПродажамиНаOzon.Подключаемый_ПолеПриИзменении");

		ОбработчикиСобытий.Вставить("СкладПараметрыНачалаВыбора",
			"Обработки.УправлениеПродажамиНаOzon.Подключаемый_ПолеПараметрыНачалаВыбора");
		ОбработчикиСобытий.Вставить("СерияПараметрыНачалаВыбора",
			"Обработки.УправлениеПродажамиНаOzon.Подключаемый_ПолеПараметрыНачалаВыбора");

		// Обработчики оповещения для имени события "ВыгрузкаЗагрузкаДанных_ОбработатьОповещениеНаСервере".
		ОбработчикиСобытий.Вставить("ЗаполнитьСкладыВВыделенныхСтроках",
			"Обработки.УправлениеПродажамиНаOzon.Подключаемый_ЗаполнитьСкладыВВыделенныхСтроках");
		ОбработчикиСобытий.Вставить("ОбработатьВыборСкладаИСерии",
			"Обработки.УправлениеПродажамиНаOzon.Подключаемый_ОбработатьВыборСкладаИСерии");

		// Подключаемые команды заполнения.
		Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов") Тогда
			ПодключаемыеКомандыЗаполнения.Вставить("ЗаполнитьСклады",
				Новый Структура("Представление, Действие, Картинка",
					НСтр("ru = 'Заполнить склады'"),
					"")); // Используется команда формы Подключаемый_ВыполнитьКоманду.
		КонецЕсли;

	ИначеЕсли Параметры.ИмяТабличнойЧасти = "ДанныеЗаявокНаВозврат" Тогда

		ОсновныеКолонки.Добавить("ПредставлениеОбъектаМаркетплейса");
		ОсновныеКолонки.Добавить("Характеристика");
		ОсновныеКолонки.Добавить("Упаковка");
		ОсновныеКолонки.Добавить("КоличествоУпаковокНаСкладе");
		ОсновныеКолонки.Добавить("КоличествоУпаковок");

		// Служебные колонки, которые не выводится пользователю.
		ЗаполняемыеПриЗагрузкеКолонки.Вставить("НоменклатураЕдиницаИзмерения", НСтр("ru = 'Ед.изм.'"));
		ТипыДанныхКолонок.Вставить("НоменклатураЕдиницаИзмерения", ТипУпаковки);

		ЗаполняемыеПриЗагрузкеКолонки.Вставить("ТипНоменклатуры", НСтр("ru = 'Тип номенклатуры'"));
		ТипыДанныхКолонок.Вставить("ТипНоменклатуры", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНоменклатуры"));

		ЗаполняемыеПриЗагрузкеКолонки.Вставить("ХарактеристикиИспользуются",
			НСтр("ru = 'Характеристики используются'"));
		ТипыДанныхКолонок.Вставить("ХарактеристикиИспользуются", ТипБулево);

		ЗаполняемыеПриЗагрузкеКолонки.Вставить("УпаковкаКоэффициент", НСтр("ru = 'Коэф.упак.'"));
		ТипыДанныхКолонок.Вставить("УпаковкаКоэффициент", ТипЧисло_20_3);

		ЗаполняемыеПриЗагрузкеКолонки.Вставить("ИдентификаторОбъектаМаркетплейса",
			НСтр("ru = 'Идентификатор Ozon'"));
		ТипыДанныхКолонок.Вставить("ИдентификаторОбъектаМаркетплейса", ТипСтрока_50);

		ЗаполняемыеПриЗагрузкеКолонки.Вставить("ДатаИстеченияСрокаГодности",
			НСтр("ru = 'Дата истечения срока годности'"));
		ТипыДанныхКолонок.Вставить("ДатаИстеченияСрокаГодности", ТипДата);

		ЗаполняемыеПриЗагрузкеКолонки.Вставить("ДатаСнятияСПолки", НСтр("ru = 'Дата снятия с полки'"));
		ТипыДанныхКолонок.Вставить("ДатаСнятияСПолки", ТипДата);

		ЗаполняемыеПриЗагрузкеКолонки.Вставить("КонтрольнаяДатаСрокаГодности",
			НСтр("ru = 'Контрольная дата срока годности'"));
		ТипыДанныхКолонок.Вставить("КонтрольнаяДатаСрокаГодности", ТипДата);

		ЗаполняемыеПриЗагрузкеКолонки.Вставить("ИдентификаторПартии", НСтр("ru = 'Идентификатор партии'"));
		// Тип колонки по умолчанию Строка.

		// Обработчики событий изменения полей в таблице сопоставления.
		ОбработчикиСобытий.Вставить("ИдентификаторОбъектаМаркетплейсаПриИзменении",
			"Обработки.УправлениеПродажамиНаOzon.Подключаемый_ПолеПриИзменении");
		ОбработчикиСобытий.Вставить("ИдентификаторПубликацииПриИзменении",
			"Обработки.УправлениеПродажамиНаOzon.Подключаемый_ПолеПриИзменении");
		ОбработчикиСобытий.Вставить("НоменклатураПриИзменении",
			"Обработки.УправлениеПродажамиНаOzon.Подключаемый_ПолеПриИзменении");
		ОбработчикиСобытий.Вставить("ХарактеристикаПриИзменении",
			"Обработки.УправлениеПродажамиНаOzon.Подключаемый_ПолеПриИзменении");
		ОбработчикиСобытий.Вставить("УпаковкаПриИзменении",
			"Обработки.УправлениеПродажамиНаOzon.Подключаемый_ПолеПриИзменении");
		ОбработчикиСобытий.Вставить("КоличествоУпаковокПриИзменении",
			"Обработки.УправлениеПродажамиНаOzon.Подключаемый_ПолеПриИзменении");

	ИначеЕсли Параметры.ИмяТабличнойЧасти = "ДанныеОРеализованныхТоварах" Тогда

		ОсновныеКолонки.Добавить("ПредставлениеОбъектаМаркетплейса");
		ОсновныеКолонки.Добавить("Характеристика");
		ОсновныеКолонки.Добавить("Упаковка");
		ОсновныеКолонки.Добавить("КоличествоУпаковок");
		ОсновныеКолонки.Добавить("Сумма");
		ОсновныеКолонки.Добавить("СуммаПродажи");
		ОсновныеКолонки.Добавить("КоличествоУпаковокВозврат");
		ОсновныеКолонки.Добавить("СуммаВозврат");
		ОсновныеКолонки.Добавить("СуммаПродажиВозврат");
		ОсновныеКолонки.Добавить("НомерДокумента");
		ОсновныеКолонки.Добавить("ДатаДокумента");
		ОсновныеКолонки.Добавить("НомерСчетаФактуры");
		ОсновныеКолонки.Добавить("ДатаСчетаФактуры");
		
		Если Параметры.ДополнительныеПараметры.Свойство("ДанныеТорговойПлощадки")
				И (Параметры.ДополнительныеПараметры.ДанныеТорговойПлощадки.СпособОтраженияПродажFBO = "Комиссия"
					Или Параметры.ДополнительныеПараметры.ДанныеТорговойПлощадки.СпособОтраженияПродажFBS <> "РеализацияВПути") Тогда
			ОсновныеКолонки.Добавить("ДоговорДляОтраженияПродажи");
		КонецЕсли;
		
		Если Параметры.ДополнительныеПараметры.Свойство("ДанныеТорговойПлощадки")
				И Параметры.ДополнительныеПараметры.ДанныеТорговойПлощадки.СпособОтраженияПродажFBS = "РеализацияВПути" Тогда
			ОсновныеКолонки.Добавить("СкладОтгрузки");
			ОсновныеКолонки.Добавить("ДатаПередачиВДоставку");
			ОсновныеКолонки.Добавить("ДатаДоставки");
			ОсновныеКолонки.Добавить("ДатаНевыкупаВозврата");
		КонецЕсли;
		
		// С учетом строки с нумерацией колонок, которой нет в шапке шаблона.
		Параметры.ВысотаЗаголовкаТаблицыЗагружаемогоМакета = 3;

		ПустыеВИтогахКолонки.Добавить("ПредставлениеОбъектаМаркетплейса");
		ПустыеВИтогахКолонки.Добавить("ИдентификаторПубликации");
		ПустыеВИтогахКолонки.Добавить("ИдентификаторОбъектаМаркетплейса");

		// Служебные колонки, которые не выводится пользователю.
		ЗаполняемыеПриЗагрузкеКолонки.Вставить("ИдентификаторSKU", НСтр("ru = 'Идентификатор SKU Ozon'"));
		ТипыДанныхКолонок.Вставить("ИдентификаторSKU", ТипСтрока_50);

		ЗаполняемыеПриЗагрузкеКолонки.Вставить("Цена", НСтр("ru = 'Цена продажи'"));
		ТипыДанныхКолонок.Вставить("Цена", ТипЧисло_15_2);

		ЗаполняемыеПриЗагрузкеКолонки.Вставить("СуммаВознаграждения", НСтр("ru = 'Сумма вознаграждения'"));
		ТипыДанныхКолонок.Вставить("СуммаВознаграждения", ТипЧисло_15_2);

		ЗаполняемыеПриЗагрузкеКолонки.Вставить("ЦенаВозврат", НСтр("ru = 'Цена возврата'"));
		ТипыДанныхКолонок.Вставить("ЦенаВозврат", ТипЧисло_15_2);

		ЗаполняемыеПриЗагрузкеКолонки.Вставить("СуммаВознагражденияВозврат",
			НСтр("ru = 'Сумма вознаграждения из возврата'"));
		ТипыДанныхКолонок.Вставить("СуммаВознагражденияВозврат", ТипЧисло_15_2);

		ЗаполняемыеПриЗагрузкеКолонки.Вставить("СхемаДоставки", НСтр("ru = 'Схема доставки'"));
		ТипыДанныхКолонок.Вставить("СхемаДоставки",
			Новый ОписаниеТипов("ПеречислениеСсылка.СхемыРаботыТорговыхПлощадок"));

		ЗаполняемыеПриЗагрузкеКолонки.Вставить("ГруппаСкладов", НСтр("ru = 'Группа складов'"));
		ТипыДанныхКолонок.Вставить("ГруппаСкладов", Новый ОписаниеТипов("СправочникСсылка.Склады"));

		ЗаполняемыеПриЗагрузкеКолонки.Вставить("ФЛ_СкладОтгрузки", НСтр("ru = 'Из файла: Склад отгрузки'"));
		ТипыДанныхКолонок.Вставить("ФЛ_СкладОтгрузки", ТипСтрока_250);

		ЗаполняемыеПриЗагрузкеКолонки.Вставить("НоменклатураЕдиницаИзмерения", НСтр("ru = 'Ед.изм.'"));
		ТипыДанныхКолонок.Вставить("НоменклатураЕдиницаИзмерения", ТипУпаковки);

		ЗаполняемыеПриЗагрузкеКолонки.Вставить("ТипНоменклатуры", НСтр("ru = 'Тип номенклатуры'"));
		ТипыДанныхКолонок.Вставить("ТипНоменклатуры", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНоменклатуры"));

		ЗаполняемыеПриЗагрузкеКолонки.Вставить("ХарактеристикиИспользуются",
			НСтр("ru = 'Характеристики используются'"));
		ТипыДанныхКолонок.Вставить("ХарактеристикиИспользуются", ТипБулево);

		ЗаполняемыеПриЗагрузкеКолонки.Вставить("УпаковкаКоэффициент", НСтр("ru = 'Коэф.упак.'"));
		ТипыДанныхКолонок.Вставить("УпаковкаКоэффициент", ТипЧисло_20_3);

		ЗаполняемыеПриЗагрузкеКолонки.Вставить("КодТНВЭД", НСтр("ru = 'Код ТНВЭД'"));
		ТипыДанныхКолонок.Вставить("КодТНВЭД", Новый ОписаниеТипов("СправочникСсылка.КлассификаторТНВЭД"));

		ЗаполняемыеПриЗагрузкеКолонки.Вставить("ПрослеживаемыйТовар", НСтр("ru = 'Прослеживаемый товар'"));
		ТипыДанныхКолонок.Вставить("ПрослеживаемыйТовар", ТипБулево);

		// Установка команды изменения поведения элементов формы.
		Параметры.КомандаИзменитьПоведениеЭлементовФормы =
			"Обработки.УправлениеПродажамиНаOzon.Подключаемый_ИзменитьПоведениеЭлементовФормы";

		// Обработчики событий изменения полей в таблице сопоставления.
		ОбработчикиСобытий.Вставить("ИдентификаторОбъектаМаркетплейсаПриИзменении",
			"Обработки.УправлениеПродажамиНаOzon.Подключаемый_ПолеПриИзменении");
		ОбработчикиСобытий.Вставить("ИдентификаторПубликацииПриИзменении",
			"Обработки.УправлениеПродажамиНаOzon.Подключаемый_ПолеПриИзменении");
		ОбработчикиСобытий.Вставить("НоменклатураПриИзменении",
			"Обработки.УправлениеПродажамиНаOzon.Подключаемый_ПолеПриИзменении");
		ОбработчикиСобытий.Вставить("ХарактеристикаПриИзменении",
			"Обработки.УправлениеПродажамиНаOzon.Подключаемый_ПолеПриИзменении");
		ОбработчикиСобытий.Вставить("УпаковкаПриИзменении",
			"Обработки.УправлениеПродажамиНаOzon.Подключаемый_ПолеПриИзменении");
		ОбработчикиСобытий.Вставить("ДоговорДляОтраженияПродажиПриИзменении",
			"Обработки.УправлениеПродажамиНаOzon.Подключаемый_ПолеПриИзменении");
		ОбработчикиСобытий.Вставить("СуммаПродажиПриИзменении",
			"Обработки.УправлениеПродажамиНаOzon.Подключаемый_ПолеПриИзменении");
		ОбработчикиСобытий.Вставить("СуммаПродажиВозвратПриИзменении",
			"Обработки.УправлениеПродажамиНаOzon.Подключаемый_ПолеПриИзменении");
		
		ОбработчикиСобытий.Вставить("СкладОтгрузкиПриИзменении",
			"Обработки.УправлениеПродажамиНаOzon.Подключаемый_ПолеПриИзменении");
		
		// Обработчики оповещения для имени события "ВыгрузкаЗагрузкаДанных_ОбработатьОповещениеНаСервере".
		ОбработчикиСобытий.Вставить("ЗаполнитьСкладыВВыделенныхСтроках",
			"Обработки.УправлениеПродажамиНаOzon.Подключаемый_ЗаполнитьСкладыВВыделенныхСтроках");
		
		// Подключаемые команды заполнения.
		Если Параметры.ДополнительныеПараметры.Свойство("ДанныеТорговойПлощадки")
				И Параметры.ДополнительныеПараметры.ДанныеТорговойПлощадки.СпособОтраженияПродажFBS = "РеализацияВПути" Тогда
			Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов") Тогда
				ПодключаемыеКомандыЗаполнения.Вставить("ЗаполнитьСклады",
					Новый Структура("Представление, Действие, Картинка",
						НСтр("ru = 'Заполнить склады'"),
						"")); // Используется команда формы Подключаемый_ВыполнитьКоманду.
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Дополняет условное оформление для элемента ТаблицаСопоставленияДанных.
//
// Параметры:
//  Форма             - ФормаКлиентскогоПриложения - форма, для которой необходимо дополнить условное оформление.
//  ИмяТабличнойЧасти - Строка - имя объекта метаданных, в зависимости от которого выполняется
//                               дополнение условного оформления.
//
Процедура ДополнитьУсловноеОформлениеТаблицыСопоставленияДанных(Форма, ИмяТабличнойЧасти) Экспорт

	ИмяТаблицы = "ТаблицаСопоставленияДанных";

	УсловноеОформление = Форма.УсловноеОформление;

	Если ИмяТабличнойЧасти = "ДанныеПоставок"
		Или ИмяТабличнойЧасти = "ДанныеЗаявокНаВозврат"
		Или ИмяТабличнойЧасти = "ДанныеОРеализованныхТоварах" Тогда

		//
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "_" + "Упаковка");
		ПолеОформления.Использование = Истина;

		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + "Номенклатура");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		ЭлементОтбора.Использование = Истина;

		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

		//
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "_" + "Упаковка");
		ПолеОформления.Использование = Истина;

		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + "Упаковка");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		ЭлементОтбора.Использование = Истина;

		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст",
			Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + "НоменклатураЕдиницаИзмерения"));

		//
		НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(Форма,
			ИмяТаблицы + "_" + "Характеристика",
			ИмяТаблицы + "." + "ХарактеристикиИспользуются");

		//
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "_" + "Характеристика");
		ПолеОформления.Использование = Истина;

		ГруппаОтбораИ = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

		ЭлементОтбора = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + "ХарактеристикиИспользуются");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Истина;
		ЭлементОтбора.Использование = Истина;

		ЭлементОтбора = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + "Характеристика");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		ЭлементОтбора.Использование = Истина;

		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<требуется заполнение>'"));

	КонецЕсли;

	Если ИмяТабличнойЧасти = "ДанныеПоставок" Тогда
		//
		НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(Форма,
			"СерииВсегдаВТЧТовары",
			"ТаблицаСопоставленияДанных_Серия",
			"ТаблицаСопоставленияДанных.СтатусУказанияСерий",
			"ТаблицаСопоставленияДанных.ТипНоменклатуры");

		//
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();

		ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "_" + "ВариантОбеспечения");

		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + "НомерПоставки");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

		//
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "_" + "Серия");
		ПолеОформления.Использование = Истина;

		ГруппаОтбораИ = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

		СтатусыУказанияСерий = Новый СписокЗначений;
		СтатусыУказанияСерий.ЗагрузитьЗначения(НоменклатураКлиентСервер.СтатусыСерийСерияНеУказана());

		ЭлементОтбора = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + "СтатусУказанияСерий");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.ПравоеЗначение = СтатусыУказанияСерий;
		ЭлементОтбора.Использование = Истина;

		ЭлементОтбора = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + "Серия");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		ЭлементОтбора.Использование = Истина;

		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<требуется заполнение>'"));

	ИначеЕсли ИмяТабличнойЧасти = "ДанныеОРеализованныхТоварах" Тогда
		//
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();

		ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "_" + "СуммаПродажи");

		ГруппаОтбораИ = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

		ЭлементОтбора = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + "СуммаПродажи");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

		ГруппаОтбораИли = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбораИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

		ЭлементОтбора = ГруппаОтбораИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + "КоличествоУпаковок");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

		ЭлементОтбора = ГруппаОтбораИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + "СуммаПродажиВозврат");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<требуется заполнение>'"));

		//
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();

		ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "_" + "СуммаПродажиВозврат");

		ГруппаОтбораИ = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

		ЭлементОтбора = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + "СуммаПродажиВозврат");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

		ГруппаОтбораИли = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбораИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

		ЭлементОтбора = ГруппаОтбораИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + "КоличествоУпаковокВозврат");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

		ЭлементОтбора = ГруппаОтбораИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + "СуммаПродажи");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<требуется заполнение>'"));

	КонецЕсли;

КонецПроцедуры

// Изменяет настройки динамического списка.
//
// Параметры:
//   ТаблицаФормы              - ТаблицаФормы - элемент формы, которым представлен динамический список.
//   СписокЗагруженныхОбъектов - ДинамическийСписок - динамический список.
//   ИмяТабличнойЧасти         - Строка - полное имя объекта метаданных,
//                                для которого настраивается динамический список.
//
Процедура НастроитьДинамическийСписокОтображенияРезультатаЗагрузки(ТаблицаФормы, СписокЗагруженныхОбъектов,
			ИмяТабличнойЧасти) Экспорт

	СвойстваДинамическогоСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	ЗаполнитьЗначенияСвойств(СвойстваДинамическогоСписка, СписокЗагруженныхОбъектов);

	ПараметрыДинамическогоСписка = Новый Структура;

	Если ИмяТабличнойЧасти = "ДанныеПоставок" Тогда
		СвойстваДинамическогоСписка.ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	РеестрДокументовПереопределяемый.Ссылка КАК Ссылка,
			|	ВЫРАЗИТЬ("""" КАК СТРОКА(50)) КАК СостояниеСсылки,
			|	РеестрДокументовПереопределяемый.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
			|	ТИПЗНАЧЕНИЯ(РеестрДокументовПереопределяемый.Ссылка) КАК ТипЗначения,
			|	РеестрДокументовПереопределяемый.Организация КАК Организация,
			|	РеестрДокументовПереопределяемый.Партнер КАК Партнер,
			|	РеестрДокументовПереопределяемый.Контрагент КАК Контрагент,
			|	РеестрДокументовПереопределяемый.МестоХранения КАК МестоХранения,
			|	РеестрДокументовПереопределяемый.Договор КАК Договор,
			|	ВЫБОР
			|		КОГДА РеестрДокументовПереопределяемый.Ссылка ССЫЛКА Документ.ПередачаТоваровХранителю
			|			ТОГДА ВЫРАЗИТЬ(РеестрДокументовПереопределяемый.Ссылка КАК Документ.ПередачаТоваровХранителю).ОснованиеНомер
			|		ИНАЧЕ РеестрДокументовПереопределяемый.НомерПервичногоДокумента
			|	КОНЕЦ КАК НомерПервичногоДокумента,
			|	ВЫБОР
			|		КОГДА РеестрДокументовПереопределяемый.Ссылка ССЫЛКА Документ.ПередачаТоваровХранителю
			|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
			|		ИНАЧЕ РеестрДокументовПереопределяемый.ДатаПервичногоДокумента
			|	КОНЕЦ КАК ДатаПервичногоДокумента,
			|	РеестрДокументовПереопределяемый.Сумма КАК Сумма,
			|	РеестрДокументовПереопределяемый.Валюта КАК Валюта,
			|	РеестрДокументовПереопределяемый.НомерДокументаИБ КАК Номер,
			|	РеестрДокументовПереопределяемый.ДатаДокументаИБ КАК Дата,
			|	РеестрДокументовПереопределяемый.Комментарий КАК Комментарий,
			|	РеестрДокументовПереопределяемый.Автор КАК Автор,
			|	РеестрДокументовПереопределяемый.Ответственный КАК Менеджер,
			|	ВЫБОР
			|		КОГДА РеестрДокументовПереопределяемый.Проведен
			|			ТОГДА 0
			|		КОГДА РеестрДокументовПереопределяемый.ПометкаУдаления
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ КАК НестандартнаяКартинка,
			|	РеестрДокументовПереопределяемый.ПометкаУдаления КАК ПометкаУдаления,
			|	РеестрДокументовПереопределяемый.Проведен КАК Проведен
			|ИЗ
			|	РегистрСведений.РеестрДокументов КАК РеестрДокументовПереопределяемый
			|ГДЕ
			|	РеестрДокументовПереопределяемый.Ссылка В(&СписокОбъектовОтбор)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	РасходныйОрдерНаТовары.Ссылка,
			|	ВЫРАЗИТЬ("""" КАК СТРОКА(50)),
			|	РасходныйОрдерНаТовары.СкладскаяОперация,
			|	ТИПЗНАЧЕНИЯ(РасходныйОрдерНаТовары.Ссылка),
			|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка),
			|	РасходныйОрдерНаТовары.Получатель,
			|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка),
			|	РасходныйОрдерНаТовары.Склад,
			|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка),
			|	"""",
			|	ДАТАВРЕМЯ(1, 1, 1),
			|	0,
			|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка),
			|	РасходныйОрдерНаТовары.Номер,
			|	РасходныйОрдерНаТовары.Дата,
			|	РасходныйОрдерНаТовары.Комментарий,
			|	РасходныйОрдерНаТовары.Ответственный,
			|	РасходныйОрдерНаТовары.Ответственный,
			|	ВЫБОР
			|		КОГДА РасходныйОрдерНаТовары.Проведен
			|			ТОГДА 0
			|		КОГДА РасходныйОрдерНаТовары.ПометкаУдаления
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ,
			|	РасходныйОрдерНаТовары.ПометкаУдаления,
			|	РасходныйОрдерНаТовары.Проведен
			|ИЗ
			|	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
			|ГДЕ
			|	РасходныйОрдерНаТовары.Ссылка В(&СписокОбъектовОтбор)";

		СвойстваДинамическогоСписка.ОсновнаяТаблица = "";
		СвойстваДинамическогоСписка.ДинамическоеСчитываниеДанных = Истина;
		
	ИначеЕсли ИмяТабличнойЧасти = "ДанныеОРеализованныхТоварах" Тогда
		СвойстваДинамическогоСписка.ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	РеестрДокументовПереопределяемый.Ссылка КАК Ссылка,
			|	ВЫРАЗИТЬ("""" КАК СТРОКА(50)) КАК СостояниеСсылки,
			|	РеестрДокументовПереопределяемый.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
			|	ТИПЗНАЧЕНИЯ(РеестрДокументовПереопределяемый.Ссылка) КАК ТипЗначения,
			|	РеестрДокументовПереопределяемый.Организация КАК Организация,
			|	РеестрДокументовПереопределяемый.Партнер КАК Партнер,
			|	РеестрДокументовПереопределяемый.Контрагент КАК Контрагент,
			|	РеестрДокументовПереопределяемый.МестоХранения КАК МестоХранения,
			|	РеестрДокументовПереопределяемый.Договор КАК Договор,
			|	РеестрДокументовПереопределяемый.НомерПервичногоДокумента КАК НомерПервичногоДокумента,
			|	РеестрДокументовПереопределяемый.ДатаПервичногоДокумента КАК ДатаПервичногоДокумента,
			|	РеестрДокументовПереопределяемый.Сумма КАК Сумма,
			|	РеестрДокументовПереопределяемый.Валюта КАК Валюта,
			|	РеестрДокументовПереопределяемый.НомерДокументаИБ КАК Номер,
			|	РеестрДокументовПереопределяемый.ДатаДокументаИБ КАК Дата,
			|	РеестрДокументовПереопределяемый.Комментарий КАК Комментарий,
			|	РеестрДокументовПереопределяемый.Автор КАК Автор,
			|	РеестрДокументовПереопределяемый.Ответственный КАК Менеджер,
			|	ВЫБОР
			|		КОГДА РеестрДокументовПереопределяемый.Проведен
			|			ТОГДА 0
			|		КОГДА РеестрДокументовПереопределяемый.ПометкаУдаления
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ КАК НестандартнаяКартинка,
			|	РеестрДокументовПереопределяемый.ПометкаУдаления КАК ПометкаУдаления,
			|	РеестрДокументовПереопределяемый.Проведен КАК Проведен
			|ИЗ
			|	РегистрСведений.РеестрДокументов КАК РеестрДокументовПереопределяемый
			|ГДЕ
			|	РеестрДокументовПереопределяемый.Ссылка В(&СписокОбъектовОтбор)"
	КонецЕсли;

	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(ТаблицаФормы, СвойстваДинамическогоСписка);

	Если ЗначениеЗаполнено(ПараметрыДинамическогоСписка) Тогда
		Для Каждого Параметр Из ПараметрыДинамическогоСписка Цикл
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
				СписокЗагруженныхОбъектов,
				Параметр.Ключ,
				Параметр.Значение);
		КонецЦикла;
	КонецЕсли;

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов") Тогда
		ТаблицаФормы.ПодчиненныеЭлементы["СписокЗагруженныхОбъектовМестоХранения"].Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

// Возвращает данные, полученные методами API.
//
// Параметры:
//   ТаблицаДляЗагрузкиДанных - ТаблицаЗначений - динамически подготовленная таблица
//                                 для заполнения загруженных сопоставленных данных.
//   Параметры                - см. ИнтеграцияСМаркетплейсамиСервер.ПараметрыЗагрузкиИнтеграционнымиМетодами.
//
// Возвращаемое значение:
//   См. ИнтеграцияСМаркетплейсамиСервер.РезультатПолученияДанныхИнтеграционнымиМетодами.
//
Функция ПолучитьДанныеИнтеграционнымиМетодами(ТаблицаДляЗагрузкиДанных, Параметры) Экспорт

	ПараметрыПрогресса = ИнтеграцияСМаркетплейсамиСервер.ПараметрыПрогресса();
	ПараметрыПрогресса.ШагИтерацииВПроцентах = 35;

	Если Параметры.ИмяТабличнойЧасти = "ДанныеОРеализованныхТоварах" Тогда
		Результат = ПолучитьДанныеОРеализованныхТоварах(ТаблицаДляЗагрузкиДанных, Параметры);
	Иначе
		Результат = ИнтеграцияСМаркетплейсамиСервер.РезультатПолученияДанныхИнтеграционнымиМетодами();
	КонецЕсли;

	ИнтеграцияСМаркетплейсамиСервер.УстановитьПроцентПрогресса(1, 1, 0, ПараметрыПрогресса);

	Возврат Результат;

КонецФункции

// Производит сопоставление данных, загружаемых в табличную часть ИмяТабличнойЧастиПолное,с данными в ИБ.
//
// Параметры:
//   ТаблицаСопоставленияДанных - ТаблицаЗначений - динамически подготовленная таблица для заполнения загруженных сопоставленных данных.
//   ДанныеИзФайла              - ТаблицаЗначений - динамически подготовленная таблица с загруженными данными.
//   Параметры                  - см. ИнтеграцияСМаркетплейсамиСервер.ПараметрыЗагрузкиИзФайлаВТабличнуюЧасть.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица результата сопоставления.
//
Функция СопоставитьЗагружаемыеДанные(ТаблицаСопоставленияДанных, ДанныеИзФайла, Знач Параметры) Экспорт

	ПараметрыПрогресса = ИнтеграцияСМаркетплейсамиСервер.ПараметрыПрогресса();
	ПараметрыПрогресса.ШагИтерацииВПроцентах = 30;
	ПараметрыПрогресса.ПрогрессВыполнения    = 35; // Часть прогресса выполнена (загрузка из файла/таблицы).

	СписокНеоднозначностей = ИнтеграцияСМаркетплейсамиСервер.НовыйСписокНеоднозначностей();

	Если Параметры.ИмяТабличнойЧасти = "ДанныеПоставок" Тогда
		СопоставитьДанныеПоставок(ТаблицаСопоставленияДанных, ДанныеИзФайла, СписокНеоднозначностей,
			Параметры, ПараметрыПрогресса);

	ИначеЕсли Параметры.ИмяТабличнойЧасти = "ДанныеЗаявокНаВозврат" Тогда
		СопоставитьДанныеЗаявокНаВозврат(ТаблицаСопоставленияДанных, ДанныеИзФайла, СписокНеоднозначностей,
			Параметры, ПараметрыПрогресса);

	ИначеЕсли Параметры.ИмяТабличнойЧасти = "ДанныеОРеализованныхТоварах" Тогда
		СопоставитьДанныеОРеализованныхТоварах(ТаблицаСопоставленияДанных, ДанныеИзФайла, СписокНеоднозначностей,
			Параметры, ПараметрыПрогресса);

	КонецЕсли;

	ПараметрыПрогресса.ШагИтерацииВПроцентах = 5;
	ПараметрыПрогресса.ПрогрессВыполнения    = 40; // Часть прогресса выполнена (сопоставление данных).

	ДополнитьДаннымиИзФайлаИРезультатомСопоставления(ТаблицаСопоставленияДанных, ДанныеИзФайла,
		СписокНеоднозначностей, Параметры, ПараметрыПрогресса);

	Возврат ТаблицаСопоставленияДанных;

КонецФункции

// Производит запись загружаемых данных в учетную систему 1С.
//
// Параметры:
//  ТаблицаСопоставленияДанных - ТаблицаЗначений - динамически подготовленная таблица для заполнения загруженных сопоставленных данных.
//  Параметры                  - Структура - параметры, переданные из формы-источника.
//  СсылкаДляОбновленияДанных  - ДокументСсылка, Неопределено - ссылка на обновляемый объект или Неопределено для создания нового.
//
// Возвращаемое значение:
//   См. ИнтеграцияСМаркетплейсамиСервер.РезультатЗаписиЗагружаемыхДанных.
//
Функция ЗаписатьЗагружаемыеДанные(ТаблицаСопоставленияДанных, Параметры,
			СсылкаДляОбновленияДанных = Неопределено) Экспорт

	ПараметрыПрогресса = ИнтеграцияСМаркетплейсамиСервер.ПараметрыПрогресса();
	ПараметрыПрогресса.ШагИтерацииВПроцентах = 30;
	ПараметрыПрогресса.ПрогрессВыполнения = 70; // Часть прогресса выполнена (сопоставление данных).

	Если Параметры.ИмяТабличнойЧасти = "ДанныеПоставок" Тогда
		Результат = ЗаписатьДанныеПоставок(
			ТаблицаСопоставленияДанных,
			Параметры,
			СсылкаДляОбновленияДанных,
			ПараметрыПрогресса);

	ИначеЕсли Параметры.ИмяТабличнойЧасти = "ДанныеЗаявокНаВозврат" Тогда
		Результат = ЗаписатьДанныеЗаявокНаВозврат(
			ТаблицаСопоставленияДанных,
			Параметры,
			СсылкаДляОбновленияДанных,
			ПараметрыПрогресса);

	ИначеЕсли Параметры.ИмяТабличнойЧасти = "ДанныеОРеализованныхТоварах" Тогда
		Результат = ЗаписатьДанныеОРеализованныхТоварах(
			ТаблицаСопоставленияДанных, 
			Параметры, 
			ПараметрыПрогресса);
		
	Иначе
		Результат = ИнтеграцияСМаркетплейсамиСервер.РезультатЗаписиЗагружаемыхДанных();
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииПолученияДанныхПоИнтеграционнымиМетодами

#Область ПолучениеДанныхОРеализованныхТоварах

Функция ПолучитьДанныеОРеализованныхТоварах(ТаблицаДляЗагрузкиДанных, Параметры)

	Результат = ИнтеграцияСМаркетплейсамиСервер.РезультатПолученияДанныхИнтеграционнымиМетодами();

	ЗаполнениеПараметровШапки = Новый Структура;
	ЗаполнениеПараметровШапки.Вставить("НачалоПериода", Параметры.НачалоПериода);
	ЗаполнениеПараметровШапки.Вставить("КонецПериода",  Параметры.КонецПериода);

	ПараметрыШапки = Параметры.ПараметрыШапки;
	ЗаполнитьЗначенияСвойств(ПараметрыШапки.Параметры, ЗаполнениеПараметровШапки);

	Результат.ПараметрыШапки = ПараметрыШапки;

	Если Не ЗначениеЗаполнено(Параметры.НачалоПериода)
			И Не ЗначениеЗаполнено(Параметры.КонецПериода) Тогда
		Результат.ИнформацияОбОшибке.ОписаниеОшибки = НСтр("ru = 'На задан период загрузки данных. Загрузка невозможна.'");
		Возврат Результат;
	КонецЕсли;

	ПараметрыПолученияОборотов = ИнтеграцияСМаркетплейсомOzonСервер.ПараметрыПолученияОборотовПоПродажам(
		Параметры.УчетнаяЗапись,
		Параметры.НачалоПериода,
		Параметры.КонецПериода);
	ПараметрыПолученияОборотов.МетодОтчетовОРеализации = Истина;

	ТаблицаОборотовТоваров = ИнтеграцияСМаркетплейсомOzonСервер.ПолучитьТаблицуОборотовПоПродажам(
		ПараметрыПолученияОборотов,
		Результат.ИнформацияОбОшибке);

	Если ТаблицаОборотовТоваров.Количество() = 0 Тогда
		Результат.ИнформацияОбОшибке.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Данные для загрузки информации о продажах товаров через торговую площадку <%1> отсутствуют.'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			Параметры.УчетнаяЗапись);
		Возврат Результат;
	КонецЕсли;

	ДатаНовойВерсииОтчета = Дата(2023,10,01);

	НомерСтроки = 1;
	Для Каждого СтрокаОборотов Из ТаблицаОборотовТоваров Цикл
		ЭтоВозврат = СтрокаОборотов.Заказано < 0;

		НоваяСтрока = ТаблицаДляЗагрузкиДанных.Добавить();
		НоваяСтрока.НомерСтроки = НомерСтроки;
		НоваяСтрока.ПредставлениеОбъектаМаркетплейса = СтрокаОборотов.ПредставлениеОбъектаМаркетплейса;
		НоваяСтрока.ИдентификаторПубликации          = СтрокаОборотов.ИдентификаторПубликации;
		НоваяСтрока.ИдентификаторОбъектаМаркетплейса = СтрокаОборотов.ИдентификаторОбъектаМаркетплейса;
		НоваяСтрока.ЦенаПродавца                     = СтрокаОборотов.ЦенаДоСкидки;
		Если Не ЭтоВозврат Тогда
			НоваяСтрока.РеализованоНаСумму           = СтрокаОборотов.ЦенаДляКлиента
														* СтрокаОборотов.Заказано;
			НоваяСтрока.КоличествоУпаковок           = СтрокаОборотов.Доставлено;
			НоваяСтрока.ЦенаПродажи                  =
				?(СтрокаОборотов.Заказано = 0, 0, СтрокаОборотов.ЦенаДляКлиента);
			НоваяСтрока.СуммаПродажи                 = СтрокаОборотов.ЦенаДляКлиента
														* СтрокаОборотов.Заказано;
			НоваяСтрока.СуммаКомиссии                =
				?(СтрокаОборотов.Заказано = 0, 0, СтрокаОборотов.СуммаКомиссии);
			НоваяСтрока.ВыплатыПоМеханикамЛояльности = СтрокаОборотов.ВыплатыПоМеханикамЛояльности;
			Если Параметры.НачалоПериода >= ДатаНовойВерсииОтчета Тогда
				НоваяСтрока.БазоваяКомиссия          = НоваяСтрока.СуммаКомиссии;
				НоваяСтрока.БаллыЗаСкидки            = Макс(0, СтрокаОборотов.ЦенаДоСкидки * СтрокаОборотов.Заказано
														- СтрокаОборотов.ЦенаДляКлиента * СтрокаОборотов.Заказано
														- СтрокаОборотов.ВыплатыПоМеханикамЛояльности);
			КонецЕсли;
			НоваяСтрока.СуммаИтого                   = НоваяСтрока.РеализованоНаСумму;
			НоваяСтрока.Доплата                      =
				?(СтрокаОборотов.Заказано = 0 Или Параметры.НачалоПериода >= ДатаНовойВерсииОтчета,
					0, СтрокаОборотов.СуммаСкидки);
		Иначе
			НоваяСтрока.РеализованоНаСуммуВозврат    = СтрокаОборотов.ЦенаДляКлиента
														* - СтрокаОборотов.Заказано;
			НоваяСтрока.КоличествоУпаковокВозврат    = - СтрокаОборотов.Заказано;
			НоваяСтрока.ЦенаПродажиВозврат           =
				?(СтрокаОборотов.Заказано = 0, 0, СтрокаОборотов.ЦенаДляКлиента);
			НоваяСтрока.СуммаПродажиВозврат          = СтрокаОборотов.ЦенаДляКлиента
														* - СтрокаОборотов.Заказано;
			НоваяСтрока.СуммаКомиссииВозврат         =
				?(СтрокаОборотов.Заказано = 0, 0, - СтрокаОборотов.СуммаКомиссии);
			НоваяСтрока.ВыплатыПоМеханикамЛояльностиВозврат = -СтрокаОборотов.ВыплатыПоМеханикамЛояльности;
			Если Параметры.НачалоПериода >= ДатаНовойВерсииОтчета Тогда
				НоваяСтрока.БазоваяКомиссияВозврат   = НоваяСтрока.СуммаКомиссииВозврат;
				НоваяСтрока.БаллыЗаСкидкиВозврат     = Макс(0, СтрокаОборотов.ЦенаДоСкидки * - СтрокаОборотов.Заказано
														- СтрокаОборотов.ЦенаДляКлиента * - СтрокаОборотов.Заказано
														+ СтрокаОборотов.ВыплатыПоМеханикамЛояльности);
			КонецЕсли;
			НоваяСтрока.СуммаИтогоВозврат            = НоваяСтрока.РеализованоНаСуммуВозврат;
			НоваяСтрока.ДоплатаВозврат               =
				?(СтрокаОборотов.Заказано = 0 Или Параметры.НачалоПериода >= Дата(2023,10,01),
					0, - СтрокаОборотов.СуммаСкидки);
		КонецЕсли;

		НоваяСтрока.НомерДокумента                   = СтрокаОборотов.НомерОтправления;
		НоваяСтрока.ДатаДокумента                    = СтрокаОборотов.ДатаОтправления;

		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;

	Если ТаблицаОборотовТоваров.Количество() > 0 
			И ТаблицаОборотовТоваров.Колонки.Найти("НомерВходящегоДокумента") <> Неопределено Тогда
		ПараметрыШапки.Параметры.Вставить("НомерВходящегоДокумента", ТаблицаОборотовТоваров[0].НомерВходящегоДокумента);
		ПараметрыШапки.Параметры.Вставить("ДатаВходящегоДокумента",  ТаблицаОборотовТоваров[0].ДатаВходящегоДокумента);
	КонецЕсли;
	
	Результат.АдресТаблицыЗагруженныхДанных =
		ПоместитьВоВременноеХранилище(ТаблицаДляЗагрузкиДанных, Параметры.АдресТаблицыЗагруженныхДанных);

	Возврат Результат;

КонецФункции

#КонецОбласти

#КонецОбласти

// Формирует наименование присоединенного файла в зависимости от типа ссылки.
//
// Параметры:
//  СсылкаНаОбъект   - ДокументСсылка - ссылка на объект, для которого нужно получить наименование файла.
//  ДляВыгрузкиВФайл - Булево - признак формирования наименования файла для сохранения в файловую систему
//								пользователя.
//
// Возвращаемое значение:
//  Строка - наименование файла.
//
Функция НаименованиеСохраняемогоФайла(СсылкаНаОбъект, ДляВыгрузкиВФайл = Ложь) Экспорт

	НаименованиеФайла = "";

	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		Если ДляВыгрузкиВФайл И ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
			Номер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "Номер");
			НаименованиеФайла = НСтр("ru = 'Заявка на возврат со склада Ozon'");
			НаименованиеФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Заявка на возврат со склада Ozon %1'"),
				Номер);
		Иначе
			НаименованиеФайла = НСтр("ru = 'StockReturns'");
		КонецЕсли;
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		Если ДляВыгрузкиВФайл И ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
			РеквизитыДокумента =
				ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаОбъект, "Номер, НомерПоДаннымКлиента");
			Если Не ПустаяСтрока(РеквизитыДокумента.НомерПоДаннымКлиента) Тогда
				Номер = РеквизитыДокумента.НомерПоДаннымКлиента;
			Иначе
				Номер = РеквизитыДокумента.Номер;
			КонецЕсли;

			НаименованиеФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Заявка на поставку %1'"),
				Номер);
		Иначе
			НаименованиеФайла = НСтр("ru = 'Заявка на поставку на склад Ozon'");
		КонецЕсли;
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ПередачаТоваровХранителю") Тогда
		НаименованиеФайла = НСтр("ru = 'Поставка №%1'");
	КонецЕсли;

	Возврат НаименованиеФайла;

КонецФункции

// Позволяет заполнить шапку макета в зависимости от имени шаблона.
//
// Параметры:
//  ОбластьМакета - Неопределено, ТабличныйДокумент - область макета для заполнения.
//  Параметры - см. ИнтеграцияСМаркетплейсамиСервер.ПараметрыВыгрузкиДанныхВМакет.
//
Процедура ЗаполнитьШапкуМакета(ОбластьМакета, Параметры) Экспорт

	Если Параметры.ИмяМакетаСШаблоном = "ПФ_MXL_ВыгрузкаВФайлЗаявкаНаВозврат" Тогда
		Если ОбластьМакета = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ПараметрыОбласти = Новый Структура;
		ПараметрыОбласти.Вставить("ИдентификаторДоговора", "");
		ПараметрыОбласти.Вставить("НаименованиеДоговора", "");
		ПараметрыОбласти.Вставить("ИдентификаторСклада", "");
		ПараметрыОбласти.Вставить("НаименованиеСклада", "");

		Если Параметры.ДополнительныеПараметры.Свойство("ЗначенияПараметровСсылкиНаОбъект") Тогда
			ПараметрыОбласти.ИдентификаторДоговора = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
				Параметры.ДополнительныеПараметры.ЗначенияПараметровСсылкиНаОбъект, "ИдентификаторДоговора", "");
			ПараметрыОбласти.НаименованиеДоговора  = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
				Параметры.ДополнительныеПараметры.ЗначенияПараметровСсылкиНаОбъект, "НаименованиеДоговора", "");
			ПараметрыОбласти.ИдентификаторСклада = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
				Параметры.ДополнительныеПараметры.ЗначенияПараметровСсылкиНаОбъект, "ИдентификаторСклада", "");
			ПараметрыОбласти.НаименованиеСклада  = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
				Параметры.ДополнительныеПараметры.ЗначенияПараметровСсылкиНаОбъект, "НаименованиеСклада", "");
		КонецЕсли;

		КоличествоНезаполненныхПараметров = 0;
		Для Каждого КлючИЗначение Из ПараметрыОбласти Цикл
			Если ЗначениеЗаполнено(ПараметрыОбласти[КлючИЗначение.Ключ]) Тогда
				Продолжить;
			КонецЕсли;
			КоличествоНезаполненныхПараметров = КоличествоНезаполненныхПараметров + 1;
		КонецЦикла;

		Если КоличествоНезаполненныхПараметров = ПараметрыОбласти.Количество() Тогда
			ИнформацияПоКолонкамТаблица =
				ИнтеграцияСМаркетплейсамиСервер.ИнициализироватьТаблицуИнформацииПоКолонкам();

			ПараметрыОбработкиДанных = ИнтеграцияСМаркетплейсамиСервер.ПараметрыЗагрузкиИзФайлаВТабличнуюЧасть();
			ПараметрыОбработкиДанных.ИмяОбъектаМетаданных    = "Обработка.УправлениеПродажамиНаOzon";
			ПараметрыОбработкиДанных.ИмяТабличнойЧасти       = "ДанныеЗаявокНаВозврат";
			ПараметрыОбработкиДанных.ИмяМакетаСШаблоном      = "ЗагрузкаИзФайлаЗаявкаНаВозврат";

			ПараметрыШапки = ИнтеграцияСМаркетплейсамиСервер.ПараметрыШапки();
			ИнтеграцияСМаркетплейсамиСервер.ОпределитьИнформациюПоКолонкамИПараметрамШапки(ПараметрыОбработкиДанных,
				ИнформацияПоКолонкамТаблица, ПараметрыШапки);

			ПрисоединенныйФайл = ИнтеграцияСМаркетплейсамиСервер.НайтиПрисоединенныйФайл(Параметры.СсылкаНаОбъект,
				НаименованиеСохраняемогоФайла(Параметры.СсылкаНаОбъект));
			ИнтеграцияСМаркетплейсамиСервер.ЗаполнитьПараметрыШапкиИзПрисоединенногоФайла(ПрисоединенныйФайл,
				ИнформацияПоКолонкамТаблица, ПараметрыШапки);

			ЗаполнитьЗначенияСвойств(ПараметрыОбласти, ПараметрыШапки.Параметры);
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ПараметрыОбласти);
	КонецЕсли;

КонецПроцедуры

// Подготавливает данные строк для вывода в таблицу макета.
//
// Параметры:
//   Параметры      - см. ИнтеграцияСМаркетплейсамиСервер.ПараметрыВыгрузкиДанныхВМакет.
//   ОписаниеОшибки - Строка - описание ошибки.
//
// Возвращаемое значение:
//   - ВыборкаИзРезультатаЗапроса, ТаблицаЗначений, Массив из Структура - любая коллекция для заполнения
//          данных строки таблицы макета.
//   - Неопределено - если передано необрабатываемое имя макета шаблона.
//
Функция ПолучитьДанныеСтрокТаблицыМакета(Параметры, ОписаниеОшибки) Экспорт

	Результат = Неопределено;

	Если Параметры.ИмяМакетаСШаблоном = "ПФ_MXL_ВыгрузкаВФайлЗаявкаНаВозврат" Тогда
		Результат = ПолучитьДанныеСтрокЗаявкиНаВозврат(Параметры, ОписаниеОшибки);
	ИначеЕсли Параметры.ИмяМакетаСШаблоном = "ПФ_MXL_ВыгрузкаВФайлЗаявкаНаПоставку" Тогда
		Результат = ПолучитьДанныеСтрокЗаявкиНаПоставку(Параметры, ОписаниеОшибки);
	КонецЕсли;

	Возврат Результат;

КонецФункции

#Область ПроцедурыИФункцииСопоставления

Процедура ДополнитьДаннымиИзФайлаИРезультатомСопоставления(ТаблицаСопоставленияДанных, ДанныеИзФайла,
			СписокНеоднозначностей, Параметры, ПараметрыПрогресса)

	Если ДанныеИзФайла.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	СоответствиеЗагружаемыхКолонок = Новый Соответствие;
	Для Каждого Колонка Из ДанныеИзФайла.Колонки Цикл
		Если Параметры.ИмяТабличнойЧасти = "ДанныеОРеализованныхТоварах"
				И Колонка.Имя = "СкладОтгрузки" Тогда
			Продолжить;
		КонецЕсли;
		
		Префикс = "ФЛ_";
		Если ТаблицаСопоставленияДанных.Колонки.Найти(Префикс + Колонка.Имя) <> Неопределено Тогда
			СоответствиеЗагружаемыхКолонок.Вставить(Колонка.Имя, Префикс + Колонка.Имя);
		КонецЕсли;
	КонецЦикла;

	ВсегоСтрок = ДанныеИзФайла.Количество();
	ПроцентВыполнения = 0;
	НомерТекущейСтроки = 1;

	ДанныеИзФайла.Индексы.Добавить("НомерСтроки");

	Для Каждого ЗагруженнаяСтрока Из ТаблицаСопоставленияДанных Цикл
		ИнтеграцияСМаркетплейсамиСервер.УстановитьПроцентПрогресса(
			ВсегоСтрок,
			НомерТекущейСтроки,
			ПроцентВыполнения,
			ПараметрыПрогресса);

		Отбор = Новый Структура("НомерСтроки", ЗагруженнаяСтрока.НомерСтроки);
		Строки = ДанныеИзФайла.НайтиСтроки(Отбор);
		Если Строки.Количество() > 0 Тогда
			СтрокаСДаннымиИзФайла = Строки[0];

			Для Каждого ДанныеКолонки Из СоответствиеЗагружаемыхКолонок Цикл
				ЗагруженнаяСтрока[ДанныеКолонки.Значение] = СтрокаСДаннымиИзФайла[ДанныеКолонки.Ключ];
			КонецЦикла;

			Неоднозначности = СписокНеоднозначностей.НайтиСтроки(Отбор);
			Если Неоднозначности.Количество() > 0 Тогда
				ЗагруженнаяСтрока.РезультатСопоставленияСтроки = "Неоднозначность";
				ЗагруженнаяСтрока.ОписаниеОшибки = "";

				Для Каждого Неоднозначность Из Неоднозначности Цикл
					ЗагруженнаяСтрока.ОписаниеОшибки = ЗагруженнаяСтрока.ОписаниеОшибки
						+ Неоднозначность.Колонка+ ";";
				КонецЦикла;
			КонецЕсли;

			ДобавитьПроверкуЗаполненияХарактеристики(Параметры, ЗагруженнаяСтрока);
			ДобавитьПроверкуЗаполненияСерии(Параметры, ЗагруженнаяСтрока);

			ИнтеграцияСМаркетплейсамиКлиентСервер.ЗаполнитьРезультатСопоставленияСтроки(
				ЗагруженнаяСтрока,
				Параметры.КолонкиОбязательныеПриПроверке,
				Параметры.КолонкиДополнительныеПриПроверке);
		КонецЕсли;

		НомерТекущейСтроки = НомерТекущейСтроки + 1;
	КонецЦикла;

КонецПроцедуры

Процедура СопоставитьДанныеПоставок(ТаблицаСопоставленияДанных, ДанныеИзФайла, СписокНеоднозначностей,
			Параметры, ПараметрыПрогресса)

	УчетнаяЗапись = Параметры.УчетнаяЗапись;

	ЗначенияПараметров = Параметры.ЗначенияПараметровСсылкиНаОбъект;

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов") Тогда
		Склад = Справочники.Склады.СкладПоУмолчанию();
	Иначе
		Склад = ПолучитьСкладИзПараметровФормы(УчетнаяЗапись, ЗначенияПараметров);
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗагружаемыеДанные.НомерСтроки КАК НомерСтроки,
		|	ЗагружаемыеДанные.НомерПоставки КАК НомерПоставки,
		|	ЗагружаемыеДанные.НаименованиеСкладаOzon КАК НаименованиеСкладаOzon,
		|	ВЫРАЗИТЬ(ЗагружаемыеДанные.ИдентификаторSKU КАК СТРОКА(50)) КАК ИдентификаторSKU,
		|	ВЫРАЗИТЬ(ЗагружаемыеДанные.ИдентификаторПубликации КАК СТРОКА(50)) КАК ИдентификаторПубликации,
		|	ЗагружаемыеДанные.ПредставлениеОбъектаМаркетплейса КАК ПредставлениеОбъектаМаркетплейса,
		|	ЗагружаемыеДанные.КоличествоУпаковок КАК КоличествоУпаковок
		|ПОМЕСТИТЬ ЗагружаемыеДанные
		|ИЗ
		|	&ДанныеИзФайла КАК ЗагружаемыеДанные
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИдентификаторПубликации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗагружаемыеДанные.НомерСтроки КАК НомерСтроки,
		|	ЗагружаемыеДанные.НомерПоставки КАК НомерПоставки,
		|	ЗагружаемыеДанные.НаименованиеСкладаOzon КАК НаименованиеСкладаOzon,
		|	ЗагружаемыеДанные.ИдентификаторSKU КАК ИдентификаторSKU,
		|	ЗагружаемыеДанные.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	ЗагружаемыеДанные.ПредставлениеОбъектаМаркетплейса КАК ПредставлениеОбъектаМаркетплейса,
		|	ЗагружаемыеДанные.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ЕСТЬNULL(СтатусыПубликации.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
		|	ЕСТЬNULL(СтатусыПубликации.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
		|	ЕСТЬNULL(СтатусыПубликации.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК Упаковка,
		|	ЕСТЬNULL(СтатусыПубликации.ИдентификаторОбъектаМаркетплейса, """") КАК ИдентификаторОбъектаМаркетплейса,
		|	ЕСТЬNULL(СпрНоменклатура.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК НоменклатураЕдиницаИзмерения,
		|	ЕСТЬNULL(СпрНоменклатура.ТипНоменклатуры, ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)) КАК ТипНоменклатуры,
		|	ВЫБОР
		|		КОГДА СпрНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
		|				ИЛИ СпрНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
		|				ИЛИ СпрНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ХарактеристикиИспользуются,
		|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковкиТовара, 1) КАК УпаковкаКоэффициент,
		|	ЕСТЬNULL(ЕдиницыХранения.ТипИзмеряемойВеличины, НЕОПРЕДЕЛЕНО) КАК ТипИзмеряемойВеличиныНоменклатуры,
		|	ЕСТЬNULL(Упаковки.ТипИзмеряемойВеличины, НЕОПРЕДЕЛЕНО) КАК ТипИзмеряемойВеличиныДляПроверки,
		|	&Склад КАК ГруппаСкладов,
		|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
		|	ЛОЖЬ КАК Обособленно,
		|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить) КАК ВариантОбеспечения,
		|	0 КАК СтатусУказанияСерий
		|ИЗ
		|	ЗагружаемыеДанные КАК ЗагружаемыеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликации
		|		ПО ЗагружаемыеДанные.ИдентификаторПубликации = СтатусыПубликации.ИдентификаторПубликации
		|			И (СтатусыПубликации.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись)
		|			И (СтатусыПубликации.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар))
		|			И (ЗагружаемыеДанные.ИдентификаторПубликации <> """")
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
		|		ПО (СтатусыПубликации.Номенклатура = СпрНоменклатура.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК ЕдиницыХранения
		|		ПО (СпрНоменклатура.ЕдиницаИзмерения = ЕдиницыХранения.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК Упаковки
		|		ПО (СтатусыПубликации.Упаковка = Упаковки.Ссылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|ИТОГИ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Номенклатура),
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Характеристика),
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Упаковка)
		|ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ЗагружаемыеДанные";

	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковкиТовара",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"СтатусыПубликации.Упаковка",
			"СтатусыПубликации.Номенклатура"));

	Запрос.УстановитьПараметр("ДанныеИзФайла", ДанныеИзФайла);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("Склад",         Склад);

	ВыборкаИдентификаторов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	ВсегоСтрок = ВыборкаИдентификаторов.Количество();
	ПроцентВыполнения = 0;
	НомерТекущейСтроки = 1;

	МерныеТипыЕдиницИзмерений = Справочники.УпаковкиЕдиницыИзмерения.МерныеТипыЕдиницИзмерений();

	Пока ВыборкаИдентификаторов.Следующий() Цикл
		ИнтеграцияСМаркетплейсамиСервер.УстановитьПроцентПрогресса(
			ВсегоСтрок,
			НомерТекущейСтроки,
			ПроцентВыполнения,
			ПараметрыПрогресса);

		ВыборкаДанных = ВыборкаИдентификаторов.Выбрать();
		Если ВыборкаДанных.Следующий() Тогда
			ЕстьНеоднозначность = (ВыборкаДанных.Количество() > 1
				И Не ПустаяСтрока(ВыборкаДанных.ИдентификаторПубликации));

			НоваяСтрока = ТаблицаСопоставленияДанных.Добавить();

			// Из-за приведения в запросе к типу Строка(50).
			НоваяСтрока.ИдентификаторПубликации          =
				СтрЗаменить(СокрЛП(ВыборкаДанных.ИдентификаторПубликации), Символы.НПП, "");
			НоваяСтрока.ИдентификаторОбъектаМаркетплейса =
				СтрЗаменить(СокрЛП(ВыборкаДанных.ИдентификаторОбъектаМаркетплейса), Символы.НПП, "");
			НоваяСтрока.ИдентификаторSKU                 =
				СтрЗаменить(СокрЛП(ВыборкаДанных.ИдентификаторSKU), Символы.НПП, "");

			//
			ПоляИсключения = "ИдентификаторПубликации, ИдентификаторSKU, ИдентификаторОбъектаМаркетплейса";
			Если ЕстьНеоднозначность Тогда
				ПоляИсключения = ПоляИсключения + ", Номенклатура, Характеристика, Упаковка";
			КонецЕсли;

			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДанных,, ПоляИсключения);

			НоваяСтрока.Количество = ВыборкаДанных.КоличествоУпаковок * ВыборкаДанных.УпаковкаКоэффициент;

			НужноОкруглять = ЗначениеЗаполнено(ВыборкаДанных.Номенклатура)
				И ВыборкаДанных.ТипИзмеряемойВеличиныНоменклатуры = Перечисления.ТипыИзмеряемыхВеличин.КоличествоШтук
				И МерныеТипыЕдиницИзмерений.Найти(ВыборкаДанных.ТипИзмеряемойВеличиныДляПроверки) <> Неопределено;
			Если НужноОкруглять Тогда
				НоваяСтрока.Количество = Окр(НоваяСтрока.Количество, 0 ,РежимОкругления.Окр15как20);
			КонецЕсли;

			Если ЕстьНеоднозначность Тогда
				Если ВыборкаИдентификаторов.Номенклатура > 1 Тогда
					Неоднозначность = СписокНеоднозначностей.Добавить();
					Неоднозначность.НомерСтроки = ВыборкаДанных.НомерСтроки;
					Неоднозначность.Колонка = "Номенклатура";
				КонецЕсли;

				Если ВыборкаИдентификаторов.Характеристика > 1 Тогда
					Неоднозначность = СписокНеоднозначностей.Добавить();
					Неоднозначность.НомерСтроки = ВыборкаДанных.НомерСтроки;
					Неоднозначность.Колонка = "Характеристика";
				КонецЕсли;

				Если ВыборкаИдентификаторов.Упаковка > 1 Тогда
					Неоднозначность = СписокНеоднозначностей.Добавить();
					Неоднозначность.НомерСтроки = ВыборкаДанных.НомерСтроки;
					Неоднозначность.Колонка = "Упаковка";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если ЗначениеЗаполнено(Склад) Тогда
		СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(Склад);
		СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(Склад, СкладГруппа, ТаблицаСопоставленияДанных, Ложь);
	КонецЕсли;

	ИменаРеквизитов = ИменаРеквизитовДляЗаполненияПараметровУказанияСерий();
	Структура = Новый Структура(ИменаРеквизитов);
	Структура.Склад = Склад;
	Структура.ЭтоЗаказКакСчет = Не ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента");
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(Структура, Обработки.УправлениеПродажамиНаOzon);

	Обработки.ЗапросКоличестваИСерий.ЗаполнитьСтатусУказанияСерииВТаблице(
		Перечисления.ВариантыОбеспечения.Отгрузить,
		ТаблицаСопоставленияДанных,
		ПараметрыУказанияСерий,
		Склад);

КонецПроцедуры

Процедура СопоставитьДанныеЗаявокНаВозврат(ТаблицаСопоставленияДанных, ДанныеИзФайла, СписокНеоднозначностей,
			Параметры, ПараметрыПрогресса)

	УчетнаяЗапись = Параметры.УчетнаяЗапись;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДанныеИзФайла", ДанныеИзФайла);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗагружаемыеДанные.НомерСтроки КАК НомерСтроки,
		|	ВЫРАЗИТЬ(ЗагружаемыеДанные.ИдентификаторSKU КАК СТРОКА(50)) КАК ИдентификаторSKU,
		|	ЗагружаемыеДанные.ПредставлениеОбъектаМаркетплейса КАК ПредставлениеОбъектаМаркетплейса,
		|	ВЫРАЗИТЬ(ЗагружаемыеДанные.ИдентификаторПубликации КАК СТРОКА(50)) КАК ИдентификаторПубликации,
		|	ЗагружаемыеДанные.КоличествоУпаковокНаСкладе КАК КоличествоУпаковокНаСкладе,
		|	ЗагружаемыеДанные.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ЗагружаемыеДанные.Штрихкод КАК Штрихкод
		|ПОМЕСТИТЬ ЗагружаемыеДанные
		|ИЗ
		|	&ДанныеИзФайла КАК ЗагружаемыеДанные
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИдентификаторSKU
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗагружаемыеДанные.НомерСтроки КАК НомерСтроки,
		|	ЗагружаемыеДанные.ИдентификаторSKU КАК ИдентификаторSKU,
		|	ЗагружаемыеДанные.ПредставлениеОбъектаМаркетплейса КАК ПредставлениеОбъектаМаркетплейса,
		|	ЗагружаемыеДанные.КоличествоУпаковокНаСкладе КАК КоличествоУпаковокНаСкладе,
		|	ЗагружаемыеДанные.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ЗагружаемыеДанные.Штрихкод КАК Штрихкод,
		|	ЕСТЬNULL(СтатусыПубликации.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
		|	ЕСТЬNULL(СтатусыПубликации.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
		|	ЕСТЬNULL(СтатусыПубликации.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК Упаковка,
		|	ЕСТЬNULL(СтатусыПубликации.ИдентификаторПубликации, ЗагружаемыеДанные.ИдентификаторПубликации) КАК ИдентификаторПубликации,
		|	ЕСТЬNULL(СтатусыПубликации.ИдентификаторОбъектаМаркетплейса, """") КАК ИдентификаторОбъектаМаркетплейса,
		|	ЕСТЬNULL(СпрНоменклатура.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК НоменклатураЕдиницаИзмерения,
		|	ЕСТЬNULL(СпрНоменклатура.ТипНоменклатуры, ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)) КАК ТипНоменклатуры,
		|	ВЫБОР
		|		КОГДА СпрНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
		|				ИЛИ СпрНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
		|				ИЛИ СпрНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ХарактеристикиИспользуются,
		|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковкиТовара, 1) КАК УпаковкаКоэффициент
		|ИЗ
		|	ЗагружаемыеДанные КАК ЗагружаемыеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликации
		|		ПО ЗагружаемыеДанные.ИдентификаторSKU = СтатусыПубликации.ИдентификаторFBOSKU
		|			И (СтатусыПубликации.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись)
		|			И (СтатусыПубликации.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар))
		|			И (ЗагружаемыеДанные.ИдентификаторSKU <> """")
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
		|		ПО (СтатусыПубликации.Номенклатура = СпрНоменклатура.Ссылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|ИТОГИ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Номенклатура),
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Характеристика),
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Упаковка)
		|ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ЗагружаемыеДанные";

	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковкиТовара",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"СтатусыПубликации.Упаковка",
			"СтатусыПубликации.Номенклатура"));

	ВыборкаИдентификаторов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	ВсегоСтрок = ВыборкаИдентификаторов.Количество();
	ПроцентВыполнения = 0;
	НомерТекущейСтроки = 1;

	Пока ВыборкаИдентификаторов.Следующий() Цикл
		ИнтеграцияСМаркетплейсамиСервер.УстановитьПроцентПрогресса(
			ВсегоСтрок,
			НомерТекущейСтроки,
			ПроцентВыполнения,
			ПараметрыПрогресса);

		ВыборкаДанных = ВыборкаИдентификаторов.Выбрать();
		Если ВыборкаДанных.Следующий() Тогда
			ЕстьНеоднозначность = (ВыборкаДанных.Количество() > 1
				И Не ПустаяСтрока(ВыборкаДанных.ИдентификаторОбъектаМаркетплейса));

			НоваяСтрока = ТаблицаСопоставленияДанных.Добавить();

			// Из-за приведения в запросе к типу Строка(50).
			НоваяСтрока.ИдентификаторSKU                 =
				СтрЗаменить(СокрЛП(ВыборкаДанных.ИдентификаторSKU), Символы.НПП, "");
			НоваяСтрока.ИдентификаторПубликации          =
				СтрЗаменить(СокрЛП(ВыборкаДанных.ИдентификаторПубликации), Символы.НПП, "");
			НоваяСтрока.ИдентификаторОбъектаМаркетплейса =
				СтрЗаменить(СокрЛП(ВыборкаДанных.ИдентификаторОбъектаМаркетплейса), Символы.НПП, "");

			//
			ПоляИсключения = "ИдентификаторSKU, ИдентификаторПубликации, ИдентификаторОбъектаМаркетплейса";
			Если ЕстьНеоднозначность Тогда
				ПоляИсключения = ПоляИсключения + ", Номенклатура, Характеристика, Упаковка";
			КонецЕсли;

			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДанных,, ПоляИсключения);

			Если ЕстьНеоднозначность Тогда
				Если ВыборкаИдентификаторов.Номенклатура > 1 Тогда
					Неоднозначность = СписокНеоднозначностей.Добавить();
					Неоднозначность.НомерСтроки = ВыборкаДанных.НомерСтроки;
					Неоднозначность.Колонка = "Номенклатура";
				КонецЕсли;

				Если ВыборкаИдентификаторов.Характеристика > 1 Тогда
					Неоднозначность = СписокНеоднозначностей.Добавить();
					Неоднозначность.НомерСтроки = ВыборкаДанных.НомерСтроки;
					Неоднозначность.Колонка = "Характеристика";
				КонецЕсли;

				Если ВыборкаИдентификаторов.Упаковка > 1 Тогда
					Неоднозначность = СписокНеоднозначностей.Добавить();
					Неоднозначность.НомерСтроки = ВыборкаДанных.НомерСтроки;
					Неоднозначность.Колонка = "Упаковка";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура СопоставитьДанныеОРеализованныхТоварах(ТаблицаСопоставленияДанных, ДанныеИзФайла, СписокНеоднозначностей,
			Параметры, ПараметрыПрогресса)

	ШагИтерацииВПроцентах = ПараметрыПрогресса.ШагИтерацииВПроцентах;

	УчетнаяЗапись          = Параметры.УчетнаяЗапись;
	НастройкиУчетнойЗаписи = Справочники.УчетныеЗаписиМаркетплейсов.НастройкиУчетнойЗаписи(УчетнаяЗапись);
	
	Если НастройкиУчетнойЗаписи.СпособОтраженияПродажFBS <> "РеализацияВПути" Тогда
		ЭлементКоллекции = Параметры.КолонкиОбязательныеПриПроверке.НайтиПоЗначению("СкладОтгрузки");
		Если ЭлементКоллекции <> Неопределено Тогда
			Параметры.КолонкиОбязательныеПриПроверке.Удалить(ЭлементКоллекции);
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкиУчетнойЗаписи.СпособОтраженияПродажFBO = "НеИспользуются"
			И НастройкиУчетнойЗаписи.СпособОтраженияПродажFBS = "РеализацияВПути" Тогда
		ЭлементКоллекции = Параметры.КолонкиОбязательныеПриПроверке.НайтиПоЗначению("ДоговорДляОтраженияПродажи");
		Если ЭлементКоллекции <> Неопределено Тогда
			Параметры.КолонкиОбязательныеПриПроверке.Удалить(ЭлементКоллекции);
		КонецЕсли;
	КонецЕсли;
	
	ИспользоватьСкладыВТабличнойЧастиДокументовПродажи = ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовПродажи");
	ИспользоватьНесколькоСкладов                       = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	
	Если Не ИспользоватьНесколькоСкладов Тогда
		СкладПоУмолчанию = Справочники.Склады.СкладПоУмолчанию();
	КонецЕсли;

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДанныеИзФайла", ДанныеИзФайла);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗагружаемыеДанные.НомерСтроки КАК НомерСтроки,
		|	ЗагружаемыеДанные.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъектаМаркетплейса,
		|	ЗагружаемыеДанные.ПредставлениеОбъектаМаркетплейса КАК ПредставлениеОбъектаМаркетплейса,
		|	ЗагружаемыеДанные.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	ЗагружаемыеДанные.Штрихкод КАК Штрихкод,
		|	ЗагружаемыеДанные.РеализованоНаСумму КАК РеализованоНаСумму,
		|	ЗагружаемыеДанные.ВыплатыПоМеханикамЛояльности КАК ВыплатыПоМеханикамЛояльности,
		|	ЗагружаемыеДанные.БаллыЗаСкидки КАК БаллыЗаСкидки,
		|	ЗагружаемыеДанные.БазоваяКомиссия КАК БазоваяКомиссия,
		|	ЗагружаемыеДанные.Доплата КАК Доплата,
		|	ЗагружаемыеДанные.ЦенаПродавца КАК ЦенаПродавца,
		|	ЗагружаемыеДанные.ЦенаПродавца КАК Цена,
		|	0 КАК Сумма,
		|	ЗагружаемыеДанные.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ЗагружаемыеДанные.СуммаКомиссии КАК СуммаКомиссии,
		|	ЗагружаемыеДанные.СуммаИтого КАК СуммаИтого,
		|	ЗагружаемыеДанные.РеализованоНаСуммуВозврат КАК РеализованоНаСуммуВозврат,
		|	ЗагружаемыеДанные.ВыплатыПоМеханикамЛояльностиВозврат КАК ВыплатыПоМеханикамЛояльностиВозврат,
		|	ЗагружаемыеДанные.БаллыЗаСкидкиВозврат КАК БаллыЗаСкидкиВозврат,
		|	ЗагружаемыеДанные.БазоваяКомиссияВозврат КАК БазоваяКомиссияВозврат,
		|	ЗагружаемыеДанные.ДоплатаВозврат КАК ДоплатаВозврат,
		|	ЗагружаемыеДанные.ЦенаПродавца КАК ЦенаВозврат,
		|	0 КАК СуммаВозврат,
		|	ЗагружаемыеДанные.КоличествоУпаковокВозврат КАК КоличествоУпаковокВозврат,
		|	ЗагружаемыеДанные.СуммаКомиссииВозврат КАК СуммаКомиссииВозврат,
		|	ЗагружаемыеДанные.СуммаИтогоВозврат КАК СуммаИтогоВозврат,
		|	ЗагружаемыеДанные.НомерДокумента КАК НомерДокумента,
		|	ЗагружаемыеДанные.ДатаДокумента КАК ДатаДокумента,
		|	ЗагружаемыеДанные.НомерСчетаФактуры КАК НомерСчетаФактуры,
		|	ЗагружаемыеДанные.ДатаСчетаФактуры КАК ДатаСчетаФактуры,
		|	ЗагружаемыеДанные.СхемаДоставки КАК СхемаДоставки
		|ПОМЕСТИТЬ ЗагружаемыеДанные
		|ИЗ
		|	&ДанныеИзФайла КАК ЗагружаемыеДанные
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИдентификаторПубликации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(МИНИМУМ(ЗагружаемыеДанные.ДатаДокумента), ДАТАВРЕМЯ(1, 1, 1)) КАК НачалоПериода,
		|	ЕСТЬNULL(МАКСИМУМ(ЗагружаемыеДанные.ДатаДокумента), ДАТАВРЕМЯ(1, 1, 1)) КАК ОкончаниеПериода
		|ИЗ
		|	ЗагружаемыеДанные КАК ЗагружаемыеДанные";

	ПериодОборотаЗаказовЗаполнен = Истина;
	ВыборкаПериодов = Запрос.Выполнить().Выбрать();
	Если ВыборкаПериодов.Следующий() Тогда
		НачалоПериода    = НачалоДня(ВыборкаПериодов.НачалоПериода - 86400);
		ОкончаниеПериода = КонецДня(ВыборкаПериодов.ОкончаниеПериода);
		ПериодОборотаЗаказовЗаполнен = ЗначениеЗаполнено(ВыборкаПериодов.ОкончаниеПериода);
	Иначе
		НачалоПериода    = ДобавитьМесяц(НачалоДня(ТекущаяДатаСеанса()), -3);
		ОкончаниеПериода = КонецДня(ТекущаяДатаСеанса());
	КонецЕсли;

	Если Не ПериодОборотаЗаказовЗаполнен Тогда
		НачалоПериода    = Неопределено;
		ОкончаниеПериода = Неопределено;
	КонецЕсли;

	ПараметрыПрогресса.ШагИтерацииВПроцентах = Окр(ШагИтерацииВПроцентах / 5, 0);
	ИнтеграцияСМаркетплейсамиСервер.УстановитьПроцентПрогресса(1, 1, 0, ПараметрыПрогресса);

	РезультатПолученияДанных = ИнтеграцияСМаркетплейсомOzonСервер.ПолучитьДанныеПоПродажамТоваровЗаПериод(
		УчетнаяЗапись,
		НачалоПериода,
		ОкончаниеПериода);

	ВыполнятьИндивидуальныйПоискСхемыДоставки = (ДанныеИзФайла.Количество() > 0
		И РезультатПолученияДанных.ТаблицаОборотовТоваров.Количество() > 0);

	ПараметрыПрогресса.ПрогрессВыполнения    = ПараметрыПрогресса.ПрогрессВыполнения
		+ ПараметрыПрогресса.ШагИтерацииВПроцентах; // Часть прогресса выполнена.
	ПараметрыПрогресса.ШагИтерацииВПроцентах = ПараметрыПрогресса.ШагИтерацииВПроцентах * 2;
	ИнтеграцияСМаркетплейсамиСервер.УстановитьПроцентПрогресса(1, 1, 0, ПараметрыПрогресса);

	Запрос.УстановитьПараметр("ТаблицаОтправлений", РезультатПолученияДанных.ТаблицаОборотовТоваров);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаОтправлений.НомерОтправления КАК НомерОтправления,
		|	ТаблицаОтправлений.ДатаОтправления КАК ДатаОтправления,
		|	ТаблицаОтправлений.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	ТаблицаОтправлений.ИдентификаторСклада КАК ИдентификаторСклада,
		|	ТаблицаОтправлений.НаименованиеСклада КАК НаименованиеСклада,
		|	ТаблицаОтправлений.ДатаПередачиВДоставку КАК ДатаПередачиВДоставку,
		|	ТаблицаОтправлений.ДатаДоставки КАК ДатаДоставки,
		|	ТаблицаОтправлений.СхемаДоставки КАК СхемаДоставки
		|ПОМЕСТИТЬ ТаблицаОборотовТоваров
		|ИЗ
		|	&ТаблицаОтправлений КАК ТаблицаОтправлений
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИдентификаторСклада
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаОтправлений.НомерОтправления КАК НомерОтправления,
		|	ТаблицаОтправлений.ДатаОтправления КАК ДатаОтправления,
		|	ТаблицаОтправлений.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	ТаблицаОтправлений.ИдентификаторСклада КАК ИдентификаторСклада,
		|	ТаблицаОтправлений.НаименованиеСклада КАК НаименованиеСклада,
		|	ЕСТЬNULL(СоответствияОбъектовМаркетплейсов.Объект1С, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК СкладОтгрузки,
		|	ТаблицаОтправлений.ДатаПередачиВДоставку КАК ДатаПередачиВДоставку,
		|	ТаблицаОтправлений.ДатаДоставки КАК ДатаДоставки,
		|	ТаблицаОтправлений.СхемаДоставки КАК СхемаДоставки
		|ПОМЕСТИТЬ ТаблицаОтправлений
		|ИЗ
		|	ТаблицаОборотовТоваров КАК ТаблицаОтправлений
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
		|		ПО (СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись)
		|			И (СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Склад))
		|			И (СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса = ТаблицаОтправлений.ИдентификаторСклада)
		|			И (СоответствияОбъектовМаркетплейсов.ИспользуетсяДляСхемыРаботыFBS
		|				ИЛИ СоответствияОбъектовМаркетплейсов.ИспользуетсяДляСхемыРаботыDBS)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИдентификаторПубликации,
		|	НомерОтправления";
	Запрос.Выполнить();

	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗагружаемыеДанные.НомерСтроки КАК НомерСтроки,
		|	ЗагружаемыеДанные.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	ЗагружаемыеДанные.ПредставлениеОбъектаМаркетплейса КАК ПредставлениеОбъектаМаркетплейса,
		|	ЗагружаемыеДанные.Штрихкод КАК Штрихкод,
		|	ЗагружаемыеДанные.РеализованоНаСумму КАК РеализованоНаСумму,
		|	ЗагружаемыеДанные.ВыплатыПоМеханикамЛояльности КАК ВыплатыПоМеханикамЛояльности,
		|	ЗагружаемыеДанные.БаллыЗаСкидки КАК БаллыЗаСкидки,
		|	ЗагружаемыеДанные.БазоваяКомиссия КАК БазоваяКомиссия,
		|	ЗагружаемыеДанные.Доплата КАК Доплата,
		|	ВЫРАЗИТЬ(ЗагружаемыеДанные.Цена * ЗагружаемыеДанные.КоличествоУпаковок КАК ЧИСЛО(31, 2)) КАК Сумма,
		|	ЗагружаемыеДанные.ЦенаПродавца КАК ЦенаПродавца,
		|	ЗагружаемыеДанные.Цена КАК Цена,
		|	ВЫБОР
		|		КОГДА ЗагружаемыеДанные.КоличествоУпаковок = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВЫРАЗИТЬ((ВЫБОР
		|					КОГДА ЗагружаемыеДанные.БаллыЗаСкидки = 0
		|							И ЗагружаемыеДанные.БазоваяКомиссия = 0
		|						ТОГДА ЗагружаемыеДанные.РеализованоНаСумму + ЗагружаемыеДанные.Доплата
		|					ИНАЧЕ ЗагружаемыеДанные.РеализованоНаСумму
		|				КОНЕЦ + ЗагружаемыеДанные.ВыплатыПоМеханикамЛояльности) / ЗагружаемыеДанные.КоличествоУпаковок КАК ЧИСЛО(31, 2))
		|	КОНЕЦ КАК ЦенаПродажи,
		|	ВЫБОР
		|		КОГДА ЗагружаемыеДанные.БаллыЗаСкидки = 0
		|				И ЗагружаемыеДанные.БазоваяКомиссия = 0
		|			ТОГДА ЗагружаемыеДанные.РеализованоНаСумму + ЗагружаемыеДанные.Доплата
		|		ИНАЧЕ ЗагружаемыеДанные.РеализованоНаСумму
		|	КОНЕЦ + ЗагружаемыеДанные.ВыплатыПоМеханикамЛояльности КАК СуммаПродажи,
		|	ЗагружаемыеДанные.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ЗагружаемыеДанные.СуммаКомиссии КАК СуммаКомиссии,
		|	ВЫБОР
		|		КОГДА ЗагружаемыеДанные.БазоваяКомиссия <> 0
		|				ИЛИ ЗагружаемыеДанные.БаллыЗаСкидки <> 0
		|			ТОГДА ЗагружаемыеДанные.БазоваяКомиссия - ЗагружаемыеДанные.БаллыЗаСкидки
		|		ИНАЧЕ ЗагружаемыеДанные.СуммаКомиссии
		|	КОНЕЦ КАК СуммаВознаграждения,
		|	ЗагружаемыеДанные.СуммаИтого КАК СуммаИтого,
		|	ЗагружаемыеДанные.РеализованоНаСуммуВозврат КАК РеализованоНаСуммуВозврат,
		|	ЗагружаемыеДанные.ВыплатыПоМеханикамЛояльностиВозврат КАК ВыплатыПоМеханикамЛояльностиВозврат,
		|	ЗагружаемыеДанные.БаллыЗаСкидкиВозврат КАК БаллыЗаСкидкиВозврат,
		|	ЗагружаемыеДанные.БазоваяКомиссияВозврат КАК БазоваяКомиссияВозврат,
		|	ЗагружаемыеДанные.ДоплатаВозврат КАК ДоплатаВозврат,
		|	ВЫРАЗИТЬ(ЗагружаемыеДанные.ЦенаВозврат * ЗагружаемыеДанные.КоличествоУпаковокВозврат КАК ЧИСЛО(31, 2)) КАК СуммаВозврат,
		|	ЗагружаемыеДанные.ЦенаВозврат КАК ЦенаВозврат,
		|	ВЫБОР
		|		КОГДА ЗагружаемыеДанные.БаллыЗаСкидкиВозврат = 0
		|				И ЗагружаемыеДанные.БазоваяКомиссияВозврат = 0
		|			ТОГДА ЗагружаемыеДанные.РеализованоНаСуммуВозврат + ЗагружаемыеДанные.ДоплатаВозврат
		|		ИНАЧЕ ЗагружаемыеДанные.РеализованоНаСуммуВозврат
		|	КОНЕЦ + ЗагружаемыеДанные.ВыплатыПоМеханикамЛояльностиВозврат КАК СуммаПродажиВозврат,
		|	ВЫБОР
		|		КОГДА ЗагружаемыеДанные.КоличествоУпаковокВозврат = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВЫРАЗИТЬ((ВЫБОР
		|					КОГДА ЗагружаемыеДанные.БаллыЗаСкидкиВозврат = 0
		|							И ЗагружаемыеДанные.БазоваяКомиссияВозврат = 0
		|						ТОГДА ЗагружаемыеДанные.РеализованоНаСуммуВозврат + ЗагружаемыеДанные.ДоплатаВозврат
		|					ИНАЧЕ ЗагружаемыеДанные.РеализованоНаСуммуВозврат
		|				КОНЕЦ + ЗагружаемыеДанные.ВыплатыПоМеханикамЛояльностиВозврат) / ЗагружаемыеДанные.КоличествоУпаковокВозврат КАК ЧИСЛО(31, 2))
		|	КОНЕЦ КАК ЦенаПродажиВозврат,
		|	ЗагружаемыеДанные.КоличествоУпаковокВозврат КАК КоличествоУпаковокВозврат,
		|	ЗагружаемыеДанные.СуммаКомиссииВозврат КАК СуммаКомиссииВозврат,
		|	ВЫБОР
		|		КОГДА ЗагружаемыеДанные.БазоваяКомиссияВозврат <> 0
		|				ИЛИ ЗагружаемыеДанные.БаллыЗаСкидкиВозврат <> 0
		|			ТОГДА ЗагружаемыеДанные.БазоваяКомиссияВозврат - ЗагружаемыеДанные.БаллыЗаСкидкиВозврат
		|		ИНАЧЕ ЗагружаемыеДанные.СуммаКомиссииВозврат
		|	КОНЕЦ КАК СуммаВознагражденияВозврат,
		|	ЗагружаемыеДанные.СуммаИтогоВозврат КАК СуммаИтогоВозврат,
		|	ЗагружаемыеДанные.НомерДокумента КАК НомерДокумента,
		|	ЗагружаемыеДанные.ДатаДокумента КАК ДатаДокумента,
		|	ЗагружаемыеДанные.НомерСчетаФактуры КАК НомерСчетаФактуры,
		|	ЗагружаемыеДанные.ДатаСчетаФактуры КАК ДатаСчетаФактуры,
		|	ЕСТЬNULL(ТаблицаОтправлений.ИдентификаторСклада, """") КАК ИдентификаторСклада,
		|	ЕСТЬNULL(ТаблицаОтправлений.НаименованиеСклада, """") КАК НаименованиеСклада,
		|	ЕСТЬNULL(ТаблицаОтправлений.СкладОтгрузки, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК СкладОтгрузки,
		|	ЕСТЬNULL(СправочникСклады.ЭтоГруппа, ЛОЖЬ) КАК СкладОтгрузкиЭтоГруппа,
		|	ЕСТЬNULL(ТаблицаОтправлений.ДатаПередачиВДоставку, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПередачиВДоставку,
		|	ЕСТЬNULL(ТаблицаОтправлений.ДатаДоставки, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаДоставки,
		|	ЕСТЬNULL(ТаблицаОтправлений.СхемаДоставки, ЗагружаемыеДанные.СхемаДоставки) КАК СхемаДоставки,
		|	ЕСТЬNULL(СтатусыПубликации.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
		|	ЕСТЬNULL(СтатусыПубликации.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
		|	ЕСТЬNULL(СтатусыПубликации.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК Упаковка,
		|	ЕСТЬNULL(СтатусыПубликации.ИдентификаторОбъектаМаркетплейса, ЗагружаемыеДанные.ИдентификаторОбъектаМаркетплейса) КАК ИдентификаторОбъектаМаркетплейса,
		|	ЕСТЬNULL(СпрНоменклатура.ПрослеживаемыйТовар, ЗНАЧЕНИЕ(Справочник.КлассификаторТНВЭД.ПустаяСсылка)) КАК ПрослеживаемыйТовар,
		|	ЕСТЬNULL(СпрНоменклатура.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК НоменклатураЕдиницаИзмерения,
		|	ЕСТЬNULL(СпрНоменклатура.ТипНоменклатуры, ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)) КАК ТипНоменклатуры,
		|	ВЫБОР
		|		КОГДА СпрНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
		|				ИЛИ СпрНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
		|				ИЛИ СпрНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ХарактеристикиИспользуются,
		|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковкиТовара, 1) КАК УпаковкаКоэффициент
		|ИЗ
		|	ЗагружаемыеДанные КАК ЗагружаемыеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликации
		|		ПО ЗагружаемыеДанные.ИдентификаторПубликации = СтатусыПубликации.ИдентификаторПубликации
		|			И (СтатусыПубликации.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись)
		|			И (СтатусыПубликации.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар))
		|			И (ЗагружаемыеДанные.ИдентификаторПубликации <> """")
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
		|		ПО (СтатусыПубликации.Номенклатура = СпрНоменклатура.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтправлений КАК ТаблицаОтправлений
		|		ПО ЗагружаемыеДанные.ИдентификаторПубликации = ТаблицаОтправлений.ИдентификаторПубликации
		|			И ЗагружаемыеДанные.НомерДокумента = ТаблицаОтправлений.НомерОтправления
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СправочникСклады
		|		ПО (ТаблицаОтправлений.СкладОтгрузки = СправочникСклады.Ссылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|ИТОГИ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Номенклатура),
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Характеристика),
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Упаковка)
		|ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаОтправлений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ЗагружаемыеДанные";

	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковкиТовара",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"СтатусыПубликации.Упаковка",
			"СтатусыПубликации.Номенклатура"));

	ВыборкаИдентификаторов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	ПараметрыПрогресса.ПрогрессВыполнения    = ПараметрыПрогресса.ПрогрессВыполнения
		+ ПараметрыПрогресса.ШагИтерацииВПроцентах; // Часть прогресса выполнена.
	ПараметрыПрогресса.ШагИтерацииВПроцентах = ШагИтерацииВПроцентах - ПараметрыПрогресса.ШагИтерацииВПроцентах;

	ВсегоСтрок = ВыборкаИдентификаторов.Количество();
	ПроцентВыполнения = 0;
	НомерТекущейСтроки = 1;
	
	ПоискНомеровОтправлений = Ложь; // Пока не выполняем поиск номеров отправлений.
	ОпределятьНеоднозначность = Ложь; // Пока не определяем неоднозначность.
	Пока ВыборкаИдентификаторов.Следующий() Цикл
		ИнтеграцияСМаркетплейсамиСервер.УстановитьПроцентПрогресса(
			ВсегоСтрок,
			НомерТекущейСтроки,
			ПроцентВыполнения,
			ПараметрыПрогресса);

		ВыборкаДанных = ВыборкаИдентификаторов.Выбрать();
		Если ВыборкаДанных.Следующий() Тогда
			ЕстьНеоднозначность = ОпределятьНеоднозначность
				И (ВыборкаДанных.Количество() > 1
				И Не ПустаяСтрока(ВыборкаДанных.ИдентификаторОбъектаМаркетплейса));

			НоваяСтрока = ТаблицаСопоставленияДанных.Добавить();

			// Из-за приведения в запросе к типу Строка(50).
			НоваяСтрока.ИдентификаторПубликации          =
				СтрЗаменить(СокрЛП(ВыборкаДанных.ИдентификаторПубликации), Символы.НПП, "");
			НоваяСтрока.ИдентификаторОбъектаМаркетплейса =
				СтрЗаменить(СокрЛП(ВыборкаДанных.ИдентификаторОбъектаМаркетплейса), Символы.НПП, "");
			НоваяСтрока.НомерДокумента                   =
				СтрЗаменить(СокрЛП(ВыборкаДанных.НомерДокумента), Символы.НПП, "");

			//
			ПоляИсключения = "ИдентификаторПубликации, ИдентификаторОбъектаМаркетплейса, НомерДокумента";
			Если ЕстьНеоднозначность Тогда
				ПоляИсключения = ПоляИсключения + ", Номенклатура, Характеристика, Упаковка";
			КонецЕсли;

			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДанных,, ПоляИсключения);

			// Поиск данных по конкретному отправлению, если схема доставки неопределена.
			Если Не ЗначениеЗаполнено(ВыборкаДанных.СхемаДоставки)
					И ВыполнятьИндивидуальныйПоискСхемыДоставки Тогда
				Если ПоискНомеровОтправлений Тогда
					РезультатПолученияДанных = ИнтеграцияСМаркетплейсомOzonСервер.ПолучитьДанныеПоОтправлению(
						УчетнаяЗапись,
						НоваяСтрока.НомерДокумента);
					Если РезультатПолученияДанных.ТаблицаОборотовТоваров.Количество() > 0 Тогда
						НоваяСтрока.СхемаДоставки = РезультатПолученияДанных.ТаблицаОборотовТоваров[0].СхемаДоставки;
					КонецЕсли;
				Иначе
					Отбор = Новый Структура;
					Отбор.Вставить("НомерОтправления", НоваяСтрока.НомерДокумента);
					
					НайденныеСтроки = РезультатПолученияДанных.ТаблицаОборотовТоваров.НайтиСтроки(Отбор);
					Если НайденныеСтроки.Количество() > 0 Тогда
						НоваяСтрока.СхемаДоставки = НайденныеСтроки[0].СхемаДоставки;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ВыборкаДанных.СхемаДоставки)
					И Не НастройкиУчетнойЗаписи.ПродажиРазделяютсяПоДоговорам Тогда
				Если НастройкиУчетнойЗаписи.СпособОтраженияПродажFBO = "НеИспользуются" Тогда
					НоваяСтрока.СхемаДоставки = Перечисления.СхемыРаботыТорговыхПлощадок.FBS;
				Иначе
					НоваяСтрока.СхемаДоставки = Перечисления.СхемыРаботыТорговыхПлощадок.FBO;
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока.ГруппаСкладов = ВыборкаДанных.СкладОтгрузки;
			Если ВыборкаДанных.СкладОтгрузкиЭтоГруппа Тогда
				НоваяСтрока.СкладОтгрузки = Справочники.Склады.ПустаяСсылка();
			КонецЕсли;
			Если Не ЗначениеЗаполнено(НоваяСтрока.СкладОтгрузки) 
					И Не ИспользоватьНесколькоСкладов Тогда
				НоваяСтрока.СкладОтгрузки = СкладПоУмолчанию;
			КонецЕсли;
			НоваяСтрока.ФЛ_СкладОтгрузки = ?(ЗначениеЗаполнено(ВыборкаДанных.НаименованиеСклада), ВыборкаДанных.НаименованиеСклада + " ", "")
				+ ?(ЗначениеЗаполнено(ВыборкаДанных.ИдентификаторСклада), "(" + ВыборкаДанных.ИдентификаторСклада + ")", "");

			Если НоваяСтрока.СхемаДоставки = Перечисления.СхемыРаботыТорговыхПлощадок.FBO Тогда
				Если НастройкиУчетнойЗаписи.СпособОтраженияПродажFBO = "НеИспользуются" Тогда
					НоваяСтрока.ДоговорДляОтраженияПродажи = НастройкиУчетнойЗаписи.ДоговорПродажиЧерезСкладыСобственные;
				Иначе
					НоваяСтрока.ДоговорДляОтраженияПродажи = НастройкиУчетнойЗаписи.ДоговорПродажиЧерезСкладыТорговойПлощадки;
				КонецЕсли;
			ИначеЕсли НоваяСтрока.СхемаДоставки = Перечисления.СхемыРаботыТорговыхПлощадок.FBS Тогда
				Если НастройкиУчетнойЗаписи.СпособОтраженияПродажFBS = "НеИспользуются" Тогда
					НоваяСтрока.ДоговорДляОтраженияПродажи = НастройкиУчетнойЗаписи.ДоговорПродажиЧерезСкладыТорговойПлощадки;
				Иначе
					НоваяСтрока.ДоговорДляОтраженияПродажи = НастройкиУчетнойЗаписи.ДоговорПродажиЧерезСкладыСобственные;
				КонецЕсли;
			КонецЕсли;
			
			Если НастройкиУчетнойЗаписи.СпособОтраженияПродажFBS = "РеализацияВПути" Тогда
				Если НоваяСтрока.ДатаПередачиВДоставку = Дата(1, 1, 1) Тогда
					НоваяСтрока.ДатаПередачиВДоставку = КонецМесяца(НоваяСтрока.ДатаДокумента);
				КонецЕсли;
				Если НоваяСтрока.ДатаДоставки = Дата(1, 1, 1) Тогда
					НоваяСтрока.ДатаДоставки = Макс(НоваяСтрока.ДатаПередачиВДоставку, КонецМесяца(НоваяСтрока.ДатаДокумента));
				КонецЕсли;
				Если НоваяСтрока.ДатаНевыкупаВозврата = Дата(1, 1, 1) 
						И ЗначениеЗаполнено(НоваяСтрока.КоличествоУпаковокВозврат) Тогда
					НоваяСтрока.ДатаНевыкупаВозврата = Макс(НоваяСтрока.ДатаДоставки, КонецМесяца(ОкончаниеПериода));
				КонецЕсли;
			КонецЕсли;
			
			Если ЕстьНеоднозначность Тогда
				Если ВыборкаИдентификаторов.Номенклатура > 1 Тогда
					Неоднозначность = СписокНеоднозначностей.Добавить();
					Неоднозначность.НомерСтроки = ВыборкаДанных.НомерСтроки;
					Неоднозначность.Колонка = "Номенклатура";
				КонецЕсли;

				Если ВыборкаИдентификаторов.Характеристика > 1 Тогда
					Неоднозначность = СписокНеоднозначностей.Добавить();
					Неоднозначность.НомерСтроки = ВыборкаДанных.НомерСтроки;
					Неоднозначность.Колонка = "Характеристика";
				КонецЕсли;

				Если ВыборкаИдентификаторов.Упаковка > 1 Тогда
					Неоднозначность = СписокНеоднозначностей.Добавить();
					Неоднозначность.НомерСтроки = ВыборкаДанных.НомерСтроки;
					Неоднозначность.Колонка = "Упаковка";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		НомерТекущейСтроки = НомерТекущейСтроки + 1;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииЗаписиЗагружаемыхДанных

#Область ЗаписьЗаявкиНаПоставку

Функция ЗаписатьДанныеПоставок(ТаблицаСопоставленияДанных, Параметры, СсылкаДляОбновленияДанных,
			ПараметрыПрогресса)

	Результат = ИнтеграцияСМаркетплейсамиСервер.РезультатЗаписиЗагружаемыхДанных();

	Если ТаблицаСопоставленияДанных.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;

	ОписаниеОшибок = Новый Массив;

	ДоступныеСостоянияДокументов = ИнтеграцияСМаркетплейсамиСервер.ДоступныеСостоянияДокументов();

	ШагИтерацииВПроцентах = ПараметрыПрогресса.ШагИтерацииВПроцентах;

	Если Параметры.ДополнительныеПараметры.Свойство("ЗначенияПараметровСсылкиНаОбъект") Тогда
		СкладОтгрузкиЗаявкиНаПоставку = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			Параметры.ДополнительныеПараметры.ЗначенияПараметровСсылкиНаОбъект, "Склад", "");
		НомерЗаявкиНаПоставку = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			Параметры.ДополнительныеПараметры.ЗначенияПараметровСсылкиНаОбъект, "НомерЗаявкиНаПоставку", "");
	Иначе
		СкладОтгрузкиЗаявкиНаПоставку = Справочники.Склады.ПустаяСсылка();
		НомерЗаявкиНаПоставку = "";
	КонецЕсли;

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов") Тогда
		СкладОтгрузкиЗаявкиНаПоставку = Справочники.Склады.СкладПоУмолчанию();
	ИначеЕсли Не ЗначениеЗаполнено(СкладОтгрузкиЗаявкиНаПоставку) Тогда
		СкладОтгрузкиЗаявкиНаПоставку = ТаблицаСопоставленияДанных[0].ГруппаСкладов;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(НомерЗаявкиНаПоставку) И Не ПустаяСтрока(Параметры.ПутьКВыбранномуФайлу) Тогда
		СоставныеЧасти = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(Параметры.ПутьКВыбранномуФайлу);
		НомерПоДаннымКлиента = ИнтеграцияСМаркетплейсомOzonСервер.ЧислоВСтроку(
			ИнтеграцияСМаркетплейсамиСервер.ПриведениеЗначенияКПростомуТипу(
				СоставныеЧасти.ИмяБезРасширения, Новый ОписаниеТипов("Число")),
			Ложь);
		НомерЗаявкиНаПоставку = ?(ПустаяСтрока(НомерПоДаннымКлиента),
								  СоставныеЧасти.ИмяБезРасширения,
								  НомерПоДаннымКлиента);
	КонецЕсли;

	НастройкиУчетнойЗаписи = Справочники.УчетныеЗаписиМаркетплейсов.НастройкиУчетнойЗаписи(Параметры.УчетнаяЗапись);
	ЗначенияОсновныхНастроек = ЗначенияОсновныхНастроек(НастройкиУчетнойЗаписи);

	АвтоматическоеФормированиеРасходныхОрдеровНаТовары = Неопределено;
	НастройкиУчетнойЗаписи.Свойство("АвтоматическоеФормированиеРасходныхОрдеровНаТовары", 
		АвтоматическоеФормированиеРасходныхОрдеровНаТовары);
	АвтоматическоеФормированиеРасходныхОрдеровНаТовары =
		?(АвтоматическоеФормированиеРасходныхОрдеровНаТовары = Неопределено,
		  Ложь,
		  АвтоматическоеФормированиеРасходныхОрдеровНаТовары
		  	И ЗначенияОсновныхНастроек.ИспользоватьОрдернуюСхемуПриОтгрузке);

	ТипСтрока = Новый ОписаниеТипов("Строка");
	ТипБулево = Новый ОписаниеТипов("Булево");

	ТипыСсылок = Новый Массив;
	ТипыСсылок.Добавить(Тип("ДокументСсылка.ПередачаТоваровХранителю"));
	ТипыСсылок.Добавить(Тип("ДокументСсылка.РасходныйОрдерНаТовары"));

	ТипыОбъектов = Новый Массив;
	ТипыОбъектов.Добавить(Тип("ДокументОбъект.ПередачаТоваровХранителю"));
	ТипыОбъектов.Добавить(Тип("ДокументОбъект.РасходныйОрдерНаТовары"));

	ПодчиненныеДокументы = Новый ТаблицаЗначений;
	ПодчиненныеДокументы.Колонки.Добавить("ДокументСсылка",     Новый ОписаниеТипов(ТипыСсылок));
	ПодчиненныеДокументы.Колонки.Добавить("ДокументОбъект",     Новый ОписаниеТипов(ТипыОбъектов));
	ПодчиненныеДокументы.Колонки.Добавить("Проведен",           ТипБулево);
	ПодчиненныеДокументы.Колонки.Добавить("ПометкаУдаления",    ТипБулево);
	ПодчиненныеДокументы.Колонки.Добавить("Склад",              Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ПодчиненныеДокументы.Колонки.Добавить("ПерезаполненаШапка", ТипБулево);
	ПодчиненныеДокументы.Колонки.Добавить("ЭтоПоставка",        ТипБулево);
	ПодчиненныеДокументы.Колонки.Добавить("НомерПоставки",      ТипСтрока);
	ПодчиненныеДокументы.Колонки.Добавить("СостояниеСсылки",    ТипСтрока);

	Если ЗначениеЗаполнено(СсылкаДляОбновленияДанных)
	  И ТипЗнч(СсылкаДляОбновленияДанных) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		ЗаказКлиентаОбъект = СсылкаДляОбновленияДанных.ПолучитьОбъект();

		ОписаниеОшибкиБлокировки = ЗаблокироватьОбъект(ЗаказКлиентаОбъект);
		Если Не ПустаяСтрока(ОписаниеОшибкиБлокировки) Тогда
			Результат.ОписаниеОшибки = ОписаниеОшибкиБлокировки;
			Возврат Результат;
		КонецЕсли;

		ЗаказКлиентаОбъект.Товары.Очистить();
		ЗаказКлиентаОбъект.ПометкаУдаления = Ложь;

		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаСвязанныхДокументовПоставки();
		Запрос.УстановитьПараметр("ЗаказКлиента", СсылкаДляОбновленияДанных);

		СостояниеСсылки = ДоступныеСостоянияДокументов.СостояниеОбновлен;

		ВыборкаДокументов = Запрос.Выполнить().Выбрать();
		Пока ВыборкаДокументов.Следующий() Цикл
			ДобавитьПодчиненныйДокумент(ПодчиненныеДокументы, ВыборкаДокументов, СостояниеСсылки);
			Если ЗаказКлиентаОбъект.ЭтоЗаказКакСчет И ВыборкаДокументов.ЭтоПоставка Тогда
				Запрос.УстановитьПараметр("ЗаказКлиента", ВыборкаДокументов.Ссылка);
				ВыборкаДокументовПоставки = Запрос.Выполнить().Выбрать();
				Пока ВыборкаДокументовПоставки.Следующий() Цикл
					ДобавитьПодчиненныйДокумент(ПодчиненныеДокументы, ВыборкаДокументовПоставки, СостояниеСсылки);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ЗаказКлиентаОбъект = Документы.ЗаказКлиента.СоздатьДокумент();
		ЗаказКлиентаОбъект.Дата        = ТекущаяДатаСеанса();
		ЗаказКлиентаОбъект.Организация = НастройкиУчетнойЗаписи.Организация;

		СостояниеСсылки = ДоступныеСостоянияДокументов.СостояниеНовый;
	КонецЕсли;

	ЗаказКлиентаОбъект.Дата                 = ТекущаяДатаСеанса();
	ЗаказКлиентаОбъект.Организация          = НастройкиУчетнойЗаписи.Организация;
	ЗаказКлиентаОбъект.НалогообложениеНДС   = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
	ЗаказКлиентаОбъект.НеОтгружатьЧастями   = Истина;
	ЗаказКлиентаОбъект.НомерПоДаннымКлиента = НомерЗаявкиНаПоставку;

	Соглашение = ?(ЗначенияОсновныхНастроек.ИспользоватьСоглашенияСКлиентами,
				   НастройкиУчетнойЗаписи.Соглашение,
				   Справочники.СоглашенияСКлиентами.ПустаяСсылка());
	Договор    = ?(ЗначенияОсновныхНастроек.ИспользуютсяДоговорыКонтрагентов,
				   НастройкиУчетнойЗаписи.ДоговорПродажиЧерезСкладыТорговойПлощадки,
				   Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	Валюта     = ?(ЗначениеЗаполнено(НастройкиУчетнойЗаписи.ВалютаУчета),
				   НастройкиУчетнойЗаписи.ВалютаУчета,
				   ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(НастройкиУчетнойЗаписи.Организация));

	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Дата",                  ТекущаяДатаСеанса());
	ДанныеЗаполнения.Вставить("Организация",           НастройкиУчетнойЗаписи.Организация);
	ДанныеЗаполнения.Вставить("Партнер",               НастройкиУчетнойЗаписи.Партнер);
	ДанныеЗаполнения.Вставить("Контрагент",            НастройкиУчетнойЗаписи.Контрагент);
	ДанныеЗаполнения.Вставить("Соглашение",            Соглашение);
	ДанныеЗаполнения.Вставить("Договор",               Договор);
	ДанныеЗаполнения.Вставить("Валюта",                Валюта);
	ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);

	ЗаказКлиентаОбъект.Заполнить(ДанныеЗаполнения);

	Если ЗначенияОсновныхНастроек.ИспользоватьРасширенныеВозможностиЗаказаКлиента Тогда
		ЗаказКлиентаОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке;
	ИначеЕсли Не ЗначенияОсновныхНастроек.ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента Тогда
		Если ЗаказКлиентаОбъект.ЭтоЗаказКакСчет Тогда
			ЗаказКлиентаОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
		Иначе
			ЗаказКлиентаОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке;
		КонецЕсли;
	Иначе
		ЗаказКлиентаОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
	КонецЕсли;

	Если ЗначенияОсновныхНастроек.ИспользоватьСоглашенияСКлиентами Тогда
		ЗаказКлиентаОбъект.Соглашение = Соглашение;
		ЗаказКлиентаОбъект.ЗаполнитьУсловияПродажПоСоглашению(Ложь);
		ЗаказКлиентаОбъект.Контрагент = НастройкиУчетнойЗаписи.Контрагент;
		ЗаказКлиентаОбъект.Договор = Договор;
	КонецЕсли;

	ДатаОтгрузкиВСтроке = ТекущаяДатаСеанса();
	Если ЗначенияОсновныхНастроек.ИспользоватьСоглашенияСКлиентами
	  И ЗначениеЗаполнено(ЗаказКлиентаОбъект.Соглашение) Тогда
		УсловияПродаж = ПродажиСервер.ПолучитьУсловияПродаж(ЗаказКлиентаОбъект.Соглашение, Истина);
		
		Если УсловияПродаж.СтатусСоглашения <> Перечисления.СтатусыСоглашенийСКлиентами.Закрыто Тогда
			Если ЗначениеЗаполнено(УсловияПродаж.СрокПоставки) Тогда
				ДатаОтгрузкиВСтроке = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(
					ТекущаяДатаСеанса(),
					Перечисления.Периодичность.День,
					УсловияПродаж.СрокПоставки) + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ЗаказКлиентаОбъект.ДатаОтгрузки = ДатаОтгрузкиВСтроке;

	УчетныйВидЦеныДоговора = КомиссионнаяТорговляСервер.ВидЦеныДоговора(ЗаказКлиентаОбъект.Договор, Истина);
	Если Не ЗначениеЗаполнено(УчетныйВидЦеныДоговора)
	  И НастройкиУчетнойЗаписи.Свойство("ВидыЦен")
	  И НастройкиУчетнойЗаписи.ВидыЦен.Свойство("ВидЦеныСУчетомСкидок") Тогда
		УчетныйВидЦеныДоговора = НастройкиУчетнойЗаписи.ВидыЦен.ВидЦеныСУчетомСкидок;
	КонецЕсли;

	// Заполнение табличных частей документов поставки.
	ОсновныеНастройкиЗаполнения = ОсновныеНастройкиЗаполненияДокументовПоставки();
	ОсновныеНастройкиЗаполнения.НастройкиУчетнойЗаписи   = НастройкиУчетнойЗаписи;
	ОсновныеНастройкиЗаполнения.ЗначенияОсновныхНастроек = ЗначенияОсновныхНастроек;

	ПараметрыПрогресса.ШагИтерацииВПроцентах = Окр(ШагИтерацииВПроцентах * 0.5, 0);
	ОписаниеОшибки = ЗаполнитьДанныеПоТоварамВДокументыПоставки(ЗаказКлиентаОбъект, ПодчиненныеДокументы,
			ТаблицаСопоставленияДанных, ОсновныеНастройкиЗаполнения, ПараметрыПрогресса);

	Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
		ОписаниеОшибок.Добавить(ОписаниеОшибки);
	КонецЕсли;

	Если ЗначениеЗаполнено(СкладОтгрузкиЗаявкиНаПоставку) Тогда
		Если Не ЗначениеЗаполнено(ЗаказКлиентаОбъект.Склад) Тогда
			ЗаказКлиентаОбъект.Склад = СкладОтгрузкиЗаявкиНаПоставку;
		КонецЕсли;
	ИначеЕсли ЗначенияОсновныхНастроек.ИспользоватьЗаказыКлиентов Тогда
		ОписаниеОшибок.Добавить(НСтр("ru = 'Рекомендуется проверить заполнение склада в документе.'"));
	КонецЕсли;

	// Запись документов поставки и формирование расходных ордеров.
	Если ЗаказКлиентаОбъект.Товары.Количество() = 0 Тогда
		ОписаниеОшибок.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось записать заявку на поставку по причине: нет данных по планируемому к отгрузке товару.'"),
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
	Иначе
		// Отмена проведения поставок для изменения заявки на поставку.
		Отбор = Новый Структура;
		Отбор.Вставить("ЭтоПоставка", Истина);
		Отбор.Вставить("Проведен",    Истина);
		СтрокиПоставок = ПодчиненныеДокументы.НайтиСтроки(Отбор);
		ОписаниеОшибки = ОтменитьПроведениеПодчиненныхДокументов(СтрокиПоставок, Результат);

		Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
			ОписаниеОшибок.Добавить(ОписаниеОшибки);
		КонецЕсли;

		// Расчет цен заявки на поставку.
		ЗаполнитьЦеныДокумента(ЗаказКлиентаОбъект, УчетныйВидЦеныДоговора);

		Если ЗаказКлиентаОбъект.ЭтоНовый() И НЕ ЗначениеЗаполнено(ЗаказКлиентаОбъект.Номер) Тогда
			ЗаказКлиентаОбъект.УстановитьНовыйНомер();
		КонецЕсли;
		
		// Варианты обеспечения
		Если ЗаказКлиентаОбъект.ЭтоЗаказКакСчет Тогда
			СтруктураДействий  = Новый Структура;
			ПоляСтрокой        = "ВариантОбеспечения";
			ПараметрыДокумента = Документы.ЗаказКлиента.ПараметрыДокументаДляДействийОбеспечения(ЗаказКлиентаОбъект);
			ОбеспечениеВДокументахКлиентСервер.ДобавитьДействияОбеспечения(СтруктураДействий, ПоляСтрокой, ПараметрыДокумента);
			ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(ЗаказКлиентаОбъект.Товары, СтруктураДействий, Неопределено);
		КонецЕсли;
		
		// Запись и проведение заявки на поставку.
		Если ЗначенияОсновныхНастроек.ИспользоватьЗаказыКлиентов Тогда
			РезультатЗаписиДокумента = ЗаписатьПровестиДокумент(ЗаказКлиентаОбъект);
			ЗаказКлиентаОбъект.Разблокировать();

			Если РезультатЗаписиДокумента.ЗаписьВыполнена Тогда
				Результат.СсылкаНаОбъект = ЗаказКлиентаОбъект.Ссылка;
				Результат.Ссылки.Добавить(ЗаказКлиентаОбъект.Ссылка);
				Результат.СостоянияСсылок.Вставить(ЗаказКлиентаОбъект.Ссылка, СостояниеСсылки);

				// Запись загружаемого файла
				Если Параметры.ДанныеФайла <> Неопределено Тогда
					ПутьКВременномуФайлу = ПолучитьИмяВременногоФайла(Параметры.РасширениеФайла);
					ДвоичныеДанные = Параметры.ДанныеФайла; // ДвоичныеДанные
					ДвоичныеДанные.Записать(ПутьКВременномуФайлу);

					НаименованиеПрисоединенногоФайла = НаименованиеСохраняемогоФайла(ЗаказКлиентаОбъект.Ссылка);

					ИнтеграцияСМаркетплейсамиСервер.ЗаписатьПрисоединенныйФайл(
						ЗаказКлиентаОбъект.Ссылка,
						ПутьКВременномуФайлу,
						Параметры.ПутьКВыбранномуФайлу,
						НаименованиеПрисоединенногоФайла);

					ФайловаяСистема.УдалитьВременныйФайл(ПутьКВременномуФайлу);
				КонецЕсли;
			КонецЕсли;

			Если Не ПустаяСтрока(РезультатЗаписиДокумента.ОписаниеОшибки) Тогда
				Результат.ОписаниеОшибки = РезультатЗаписиДокумента.ОписаниеОшибки;
				Возврат Результат;
			КонецЕсли;

			ЗаказКлиентаПроведен = ЗаказКлиентаОбъект.Проведен;
		Иначе
			РезультатЗаписиДокумента = НовыйРезультатЗаписиДокументов();
			РезультатЗаписиДокумента.ЗаписьВыполнена = Истина;
			ЗаказКлиентаПроведен = Истина;
		КонецЕсли;

		// Запись и проведение документов поставок и расходных ордеров на товары.
		Отбор = Новый Структура;
		Отбор.Вставить("ЭтоПоставка", Истина);
		СтрокиПоставок = ПодчиненныеДокументы.НайтиСтроки(Отбор);

		ВсегоСтрок = СтрокиПоставок.Количество() + 1;
		НомерТекущейСтроки = 0;
		ПроцентВыполнения = 0;

		ПараметрыПрогресса.ПрогрессВыполнения    = ПараметрыПрогресса.ПрогрессВыполнения
			+ ПараметрыПрогресса.ШагИтерацииВПроцентах; // Часть прогресса выполнена.
		ШагИтерацииВПроцентах = ШагИтерацииВПроцентах - ПараметрыПрогресса.ШагИтерацииВПроцентах;
		ПараметрыПрогресса.ШагИтерацииВПроцентах = ?(АвтоматическоеФормированиеРасходныхОрдеровНаТовары,
													 ШагИтерацииВПроцентах * 0.7,
													 ШагИтерацииВПроцентах);

		Если РезультатЗаписиДокумента.ЗаписьВыполнена И ЗаказКлиентаПроведен Тогда
			НомерТекущейСтроки = НомерТекущейСтроки + 1;
			ИнтеграцияСМаркетплейсамиСервер.УстановитьПроцентПрогресса(
				ВсегоСтрок,
				НомерТекущейСтроки,
				ПроцентВыполнения,
				ПараметрыПрогресса);

			// Обработка поставок.
			ОписаниеОшибки = ЗаполнитьИЗаписатьПоставки(
				СтрокиПоставок,
				ЗаказКлиентаОбъект.Ссылка,
				УчетныйВидЦеныДоговора,
				Результат,
				ПараметрыПрогресса);

			Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
				ОписаниеОшибок.Добавить(ОписаниеОшибки);
			КонецЕсли;

			// Обработка расходных ордеров.
			Если АвтоматическоеФормированиеРасходныхОрдеровНаТовары Тогда
				ПараметрыПрогресса.ПрогрессВыполнения    = ПараметрыПрогресса.ПрогрессВыполнения
					+ ПараметрыПрогресса.ШагИтерацииВПроцентах; // Часть прогресса выполнена.
				ПараметрыПрогресса.ШагИтерацииВПроцентах = ШагИтерацииВПроцентах
					- ПараметрыПрогресса.ШагИтерацииВПроцентах;

				ОписаниеОшибки = СформироватьРасходныеОрдера(
					ПодчиненныеДокументы,
					ЗаказКлиентаОбъект,
					НастройкиУчетнойЗаписи,
					Результат,
					ПараметрыПрогресса);

				Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
					ОписаниеОшибок.Добавить(ОписаниеОшибки);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Результат.ОписаниеОшибки = СтрСоединить(ОписаниеОшибок, Символы.ПС);

	Возврат Результат;

КонецФункции

Функция ТекстЗапросаСвязанныхДокументовПоставки()

	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СвязанныеДокументы.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА СвязанныеДокументы.Ссылка ССЫЛКА Документ.ПередачаТоваровХранителю
		|			ТОГДА ВЫРАЗИТЬ(СвязанныеДокументы.Ссылка КАК Документ.ПередачаТоваровХранителю).Проведен
		|		КОГДА СвязанныеДокументы.Ссылка ССЫЛКА Документ.РасходныйОрдерНаТовары
		|			ТОГДА ВЫРАЗИТЬ(СвязанныеДокументы.Ссылка КАК Документ.РасходныйОрдерНаТовары).Проведен
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Проведен,
		|	ВЫБОР
		|		КОГДА СвязанныеДокументы.Ссылка ССЫЛКА Документ.ПередачаТоваровХранителю
		|			ТОГДА ВЫРАЗИТЬ(СвязанныеДокументы.Ссылка КАК Документ.ПередачаТоваровХранителю).ПометкаУдаления
		|		КОГДА СвязанныеДокументы.Ссылка ССЫЛКА Документ.РасходныйОрдерНаТовары
		|			ТОГДА ВЫРАЗИТЬ(СвязанныеДокументы.Ссылка КАК Документ.РасходныйОрдерНаТовары).ПометкаУдаления
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПометкаУдаления,
		|	ВЫБОР
		|		КОГДА СвязанныеДокументы.Ссылка ССЫЛКА Документ.ПередачаТоваровХранителю
		|			ТОГДА ВЫРАЗИТЬ(СвязанныеДокументы.Ссылка КАК Документ.ПередачаТоваровХранителю).ОснованиеНомер
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК Основание,
		|	ВЫБОР
		|		КОГДА СвязанныеДокументы.Ссылка ССЫЛКА Документ.ПередачаТоваровХранителю
		|			ТОГДА ВЫРАЗИТЬ(СвязанныеДокументы.Ссылка КАК Документ.ПередачаТоваровХранителю).ОснованиеНомер
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК НомерПоставки,
		|	ВЫБОР
		|		КОГДА СвязанныеДокументы.Ссылка ССЫЛКА Документ.ПередачаТоваровХранителю
		|			ТОГДА ВЫРАЗИТЬ(СвязанныеДокументы.Ссылка КАК Документ.ПередачаТоваровХранителю).Склад
		|		КОГДА СвязанныеДокументы.Ссылка ССЫЛКА Документ.РасходныйОрдерНаТовары
		|			ТОГДА ВЫРАЗИТЬ(СвязанныеДокументы.Ссылка КАК Документ.РасходныйОрдерНаТовары).Склад
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	КОНЕЦ КАК Склад,
		|	СвязанныеДокументы.Ссылка ССЫЛКА Документ.ПередачаТоваровХранителю КАК ЭтоПоставка
		|ИЗ
		|	КритерийОтбора.СвязанныеДокументы(&ЗаказКлиента) КАК СвязанныеДокументы
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(СвязанныеДокументы.Ссылка) В (&Типы)";

	Замена = "ТИП(Документ.ПередачаТоваровХранителю), ТИП(Документ.РасходныйОрдерНаТовары)";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Типы", Замена);

	Возврат ТекстЗапроса;

КонецФункции

Процедура ДобавитьПодчиненныйДокумент(ПодчиненныеДокументы, СтрокаВыборки, СостояниеСсылки)

	Если СтрокаВыборки.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;

	СтрокаДокумента = ПодчиненныеДокументы.Добавить();
	СтрокаДокумента.ДокументСсылка  = СтрокаВыборки.Ссылка;
	СтрокаДокумента.Проведен        = СтрокаВыборки.Проведен;
	СтрокаДокумента.ПометкаУдаления = СтрокаВыборки.ПометкаУдаления;
	СтрокаДокумента.ДокументОбъект  = СтрокаВыборки.Ссылка.ПолучитьОбъект();
	СтрокаДокумента.Склад           = СтрокаВыборки.Склад;
	СтрокаДокумента.ЭтоПоставка     = СтрокаВыборки.ЭтоПоставка;
	СтрокаДокумента.СостояниеСсылки = СостояниеСсылки;

	Если СтрокаВыборки.Основание = ОснованиеПоставки()
	  Или Не ПустаяСтрока(СтрокаВыборки.НомерПоставки) Тогда
		СтрокаДокумента.НомерПоставки = СтрокаВыборки.НомерПоставки;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьЦеныДокумента(ДокументОбъект, Знач УчетныйВидЦеныДоговора = Неопределено, ИмяТабЧасти = "Товары")

	Если УчетныйВидЦеныДоговора = Неопределено Тогда
		УчетныйВидЦеныДоговора = КомиссионнаяТорговляСервер.ВидЦеныДоговора(ДокументОбъект.Договор, Истина);
	КонецЕсли;

	РеквизитыОбъекта = ДокументОбъект.Метаданные().Реквизиты;

	ЕстьНалогообложениеНДС = РеквизитыОбъекта.Найти("НалогообложениеНДС") <> Неопределено;
	ЕстьВозвратМногооборотнойТары = РеквизитыОбъекта.Найти("ВернутьМногооборотнуюТару") <> Неопределено;
	ЕстьРасчетСкидок = РеквизитыОбъекта.Найти("СкидкиРассчитаны") <> Неопределено;
	Если ИмяТабЧасти = "ВозвращаемыеТовары" Тогда
		ЕстьРасчетСкидок = Ложь;
	КонецЕсли;

	ТабЧастьТовары = ДокументОбъект.Метаданные().ТабличныеЧасти.Найти(ИмяТабЧасти);

	Если ТабЧастьТовары = Неопределено Тогда
		Возврат;
	Иначе
		ИспользуютсяНаборы = ТабЧастьТовары.Реквизиты.Найти("НоменклатураНабора") <> Неопределено;
	КонецЕсли;

	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Дата",                         ДокументОбъект.Дата);
	ПараметрыЗаполнения.Вставить("Организация",                  ДокументОбъект.Организация);
	ПараметрыЗаполнения.Вставить("Валюта",                       ДокументОбъект.Валюта);
	ПараметрыЗаполнения.Вставить("Партнер",                      ДокументОбъект.Партнер);
	ПараметрыЗаполнения.Вставить("ПоляЗаполнения",               "Цена, ВидЦены, СрокПоставки");
	ПараметрыЗаполнения.Вставить("РассчитыватьНаборы",           ИспользуютсяНаборы);

	Если ЕстьНалогообложениеНДС Тогда
		ПараметрыЗаполнения.Вставить("НалогообложениеНДС",           ДокументОбъект.НалогообложениеНДС);
	КонецЕсли;

	Если ЕстьВозвратМногооборотнойТары Тогда
		ПараметрыЗаполнения.Вставить("ВозвращатьМногооборотнуюТару", ДокументОбъект.ВернутьМногооборотнуюТару);
	КонецЕсли;

	Если (ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
			Или ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера)
	  И ЗначениеЗаполнено(ДокументОбъект.Договор)
	  И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Договор, "КомиссионныеПродажи25") Тогда
		ПараметрыЗаполнения.Вставить("ВидЦены", УчетныйВидЦеныДоговора);
	Иначе
		ПараметрыЗаполнения.Вставить("Соглашение", ДокументОбъект.Соглашение);
	КонецЕсли;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоУпаковок");

	Если ЕстьНалогообложениеНДС Тогда
		СтруктураПересчетаСуммы =
			ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ДокументОбъект);
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	КонецЕсли;

	Если ЕстьРасчетСкидок Тогда
		СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
		СтруктураДействий.Вставить("ОчиститьАвтоматическуюСкидку");
	КонецЕсли;

	ЦеныПредприятияЗаполнениеСервер.ЗаполнитьЦены(
		ДокументОбъект[ИмяТабЧасти],
		, // Массив строк или структура отбора
		ПараметрыЗаполнения,
		СтруктураДействий);

КонецПроцедуры

Функция ОсновныеНастройкиЗаполненияДокументовПоставки()

	ОсновныеНастройкиЗаполнения = Новый Структура;
	ОсновныеНастройкиЗаполнения.Вставить("НастройкиУчетнойЗаписи",   Новый Структура);
	ОсновныеНастройкиЗаполнения.Вставить("ЗначенияОсновныхНастроек", Новый Структура);

	Возврат ОсновныеНастройкиЗаполнения;

КонецФункции

Функция ЗаполнитьДанныеПоТоварамВДокументыПоставки(ЗаказКлиентаОбъект, ПодчиненныеДокументы,
			Знач ТаблицаСопоставленияДанных, Знач ОсновныеНастройкиЗаполнения, Знач ПараметрыПрогресса)

	ОписаниеОшибки = "";

	НастройкиУчетнойЗаписи   = ОсновныеНастройкиЗаполнения.НастройкиУчетнойЗаписи;
	ЗначенияОсновныхНастроек = ОсновныеНастройкиЗаполнения.ЗначенияОсновныхНастроек;
	СостояниеНовый           = ИнтеграцияСМаркетплейсамиСервер.ДоступныеСостоянияДокументов().СостояниеНовый;

	ЗаполнитьОбособленно = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ЗаказКлиентаОбъект.Соглашение, "ОбеспечиватьЗаказыОбособленно");

	СкладыИзФайла = Новый Массив;
	ЗаполнитьСкладВЗаказе = Истина;

	ВсегоСтрок = ТаблицаСопоставленияДанных.Количество();
	НомерТекущейСтроки = 0;
	ПроцентВыполнения = 0;
	Для Каждого СтрокаТовара Из ТаблицаСопоставленияДанных Цикл
		НомерТекущейСтроки = НомерТекущейСтроки + 1;
		ИнтеграцияСМаркетплейсамиСервер.УстановитьПроцентПрогресса(
			ВсегоСтрок,
			НомерТекущейСтроки,
			ПроцентВыполнения,
			ПараметрыПрогресса);

		Если ЗаполнитьСкладВЗаказе Тогда
			ЗаказКлиентаОбъект.Склад = СтрокаТовара.ГруппаСкладов;
			ЗаполнитьСкладВЗаказе = Ложь;
		КонецЕсли;

		// Заполнение строки заявки на поставку.
		СтрокаТабличнойЧасти = ЗаказКлиентаОбъект.Товары.Добавить();
		СтрокаТабличнойЧасти.КодСтроки    = СтрокаТабличнойЧасти.НомерСтроки;
		СтрокаТабличнойЧасти.Номенклатура = СтрокаТовара.Номенклатура;

		Если ЗначенияОсновныхНастроек.ИспользоватьХарактеристикиНоменклатуры Тогда
			СтрокаТабличнойЧасти.Характеристика = СтрокаТовара.Характеристика;
		КонецЕсли;

		Если ЗначениеЗаполнено(СтрокаТовара.Упаковка)
		  И СтрокаТовара.Упаковка <> СтрокаТовара.НоменклатураЕдиницаИзмерения Тогда
			Если ЗначенияОсновныхНастроек.ИспользоватьУпаковкиНоменклатуры Тогда
				СтрокаТабличнойЧасти.Упаковка = СтрокаТовара.Упаковка;

				КоличествоУпаковокВСтроке     = СтрокаТовара.КоличествоУпаковок;
				КоличествоВСтроке             = Окр(КоличествоУпаковокВСтроке
					* СтрокаТовара.УпаковкаКоэффициент, 3, РежимОкругления.Окр15как20);
			Иначе
				СтрокаТабличнойЧасти.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();

				КоличествоУпаковокВСтроке     = Окр(СтрокаТовара.КоличествоУпаковок
					* СтрокаТовара.УпаковкаКоэффициент, 3, РежимОкругления.Окр15как20);
				КоличествоВСтроке             = КоличествоУпаковокВСтроке;
			КонецЕсли;
		Иначе
			СтрокаТабличнойЧасти.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();

			КоличествоУпаковокВСтроке     = СтрокаТовара.КоличествоУпаковок;
			КоличествоВСтроке             = КоличествоУпаковокВСтроке;
		КонецЕсли;

		СтрокаТабличнойЧасти.Количество          = КоличествоВСтроке;
		СтрокаТабличнойЧасти.КоличествоУпаковок  = КоличествоУпаковокВСтроке;
		СтрокаТабличнойЧасти.Обособленно         = ЗаполнитьОбособленно;

		СтрокаТабличнойЧасти.ВариантОбеспечения  = СтрокаТовара.ВариантОбеспечения;
		СтрокаТабличнойЧасти.Склад               = СтрокаТовара.Склад;
		Если Не ЗаказКлиентаОбъект.ЭтоЗаказКакСчет Тогда
			СтрокаТабличнойЧасти.Серия               = СтрокаТовара.Серия;
			СтрокаТабличнойЧасти.СтатусУказанияСерий = СтрокаТовара.СтатусУказанияСерий;
		КонецЕсли;

		Если Не ПустаяСтрока(СтрокаТовара.НаименованиеСкладаOzon)
			И СкладыИзФайла.Найти(СтрокаТовара.НаименованиеСкладаOzon) = Неопределено Тогда
			СкладыИзФайла.Добавить(СтрокаТовара.НаименованиеСкладаOzon);
		КонецЕсли;

		// Заполнение строки поставки.
		СтрокаДокумента = Неопределено;

		Отбор = Новый Структура;
		Отбор.Вставить("НомерПоставки", СтрокаТовара.НомерПоставки);
		Отбор.Вставить("ЭтоПоставка", Истина);
		СтрокиДокумента = ПодчиненныеДокументы.НайтиСтроки(Отбор);
		Если СтрокиДокумента.Количество() > 0 Тогда
			СтрокаДокумента = СтрокиДокумента[0];
		КонецЕсли;

		Если СтрокаДокумента = Неопределено Тогда
			Отбор.Вставить("НомерПоставки", "");
			СтрокиДокумента = ПодчиненныеДокументы.НайтиСтроки(Отбор);
			Если СтрокиДокумента.Количество() > 0 Тогда
				СтрокаДокумента = СтрокиДокумента[0];
			КонецЕсли;
		КонецЕсли;

		Если СтрокаДокумента = Неопределено Тогда
			СтрокаДокумента = ПодчиненныеДокументы.Добавить();
			СтрокаДокумента.ДокументОбъект  = Документы.ПередачаТоваровХранителю.СоздатьДокумент();
			СтрокаДокумента.ЭтоПоставка     = Истина;
			СтрокаДокумента.СостояниеСсылки = СостояниеНовый;
		КонецЕсли;

		Если Не СтрокаДокумента.ПерезаполненаШапка Тогда
			ОписаниеОшибкиБлокировки = ЗаблокироватьОбъект(СтрокаДокумента.ДокументОбъект);
			Если Не ПустаяСтрока(ОписаниеОшибкиБлокировки) Тогда
				Возврат ОписаниеОшибкиБлокировки;
			КонецЕсли;

			СтрокаДокумента.НомерПоставки = СтрокаТовара.НомерПоставки;

			СтрокаДокумента.ДокументОбъект.Дата           = ТекущаяДатаСеанса();
			СтрокаДокумента.ДокументОбъект.Организация    = НастройкиУчетнойЗаписи.Организация;
			СтрокаДокумента.ДокументОбъект.Подразделение  = ЗаказКлиентаОбъект.Подразделение;
			СтрокаДокумента.ДокументОбъект.Основание      = ОснованиеПоставки();
			СтрокаДокумента.ДокументОбъект.ОснованиеНомер = СтрокаТовара.НомерПоставки;
			СтрокаДокумента.ДокументОбъект.Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонКомментария(СтрокаДокумента.ДокументОбъект.Ссылка),
				СтрокаДокумента.НомерПоставки,
				ЗаказКлиентаОбъект.НомерПоДаннымКлиента);

			СтрокаДокумента.ДокументОбъект.Заполнить(НастройкиУчетнойЗаписи.Соглашение);

			СтрокаДокумента.ДокументОбъект.Контрагент = НастройкиУчетнойЗаписи.Контрагент;
			Если ЗначенияОсновныхНастроек.ИспользуютсяДоговорыКонтрагентов Тогда
				СтрокаДокумента.ДокументОбъект.Договор = НастройкиУчетнойЗаписи.ДоговорПродажиЧерезСкладыТорговойПлощадки;
			КонецЕсли;

			СтрокаДокумента.ДокументОбъект.Склад = ЗаказКлиентаОбъект.Склад;

			СтрокаДокумента.ДокументОбъект.Товары.Очистить();

			СтрокаДокумента.ПерезаполненаШапка = Истина;
		КонецЕсли;

		СтрокаТабличнойЧастиПоставки = СтрокаДокумента.ДокументОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧастиПоставки, СтрокаТабличнойЧасти);
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧастиПоставки, СтрокаТовара,
			"Серия, СтатусУказанияСерий, СтатусУказанияСерийНаСкладах, СтатусУказанияСерийПереданныхТоваров");

		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Серия) Тогда
			СтрокаТабличнойЧастиСерииПоставки = СтрокаДокумента.ДокументОбъект.Серии.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧастиСерииПоставки, СтрокаТабличнойЧастиПоставки);
		КонецЕсли;
	КонецЦикла;

	ЗаказКлиентаОбъект.МаксимальныйКодСтроки = НомерТекущейСтроки;
	ЗаказКлиентаОбъект.Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонКомментария(ЗаказКлиентаОбъект.Ссылка),
		ЗаказКлиентаОбъект.НомерПоДаннымКлиента,
		СтрСоединить(СкладыИзФайла, ", "));

	Возврат ОписаниеОшибки;

КонецФункции

Функция ОснованиеПоставки()

	Возврат НСтр("ru = 'Автоматически сформированная на Ozon поставка'");

КонецФункции

Функция ОтменитьПроведениеПодчиненныхДокументов(СтрокиДокументов, Результат, Склады = Неопределено)

	ОписаниеОшибок = Новый Массив; // Массив из Строка.
	СостояниеОбновлен = ИнтеграцияСМаркетплейсамиСервер.ДоступныеСостоянияДокументов().СостояниеОбновлен;
	СостояниеНеОбновлен = ИнтеграцияСМаркетплейсамиСервер.ДоступныеСостоянияДокументов().СостояниеНеОбновлен;

	Для Каждого СтрокаДокумента Из СтрокиДокументов Цикл
		Попытка
			СтрокаДокумента.ДокументОбъект.Заблокировать();
			Если СтрокаДокумента.ЭтоПоставка Тогда
				СтрокаДокумента.ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				УдалитьАвтоматическоеПереоформлениеРасходныхОрдеров(СтрокаДокумента.ДокументСсылка, Истина);
			Иначе
				Если ЗначениеЗаполнено(Склады) И Склады.Найти(СтрокаДокумента.Склад) = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				СтрокаДокумента.ДокументОбъект.УстановитьПометкуУдаления(Истина);
				УдалитьАвтоматическоеПереоформлениеРасходныхОрдеров(СтрокаДокумента.ДокументСсылка, Истина);
				СтрокаДокумента.ПометкаУдаления = Истина;
			КонецЕсли;

			СтрокаДокумента.Проведен = Ложь;
			Результат.СостоянияСсылок.Вставить(СтрокаДокумента.ДокументСсылка, СостояниеОбновлен);
		Исключение
			Если СтрокаДокумента.ЭтоПоставка Тогда
				ШаблонОшибки = НСтр("ru = 'Не удалось отменить проведение ""%1"" по причине: %2. Подробнее см. в журнале регистрации.'");
			Иначе
				ШаблонОшибки = НСтр("ru = 'Не удалось пометить на удаление ""%1"" по причине: %2. Подробнее см. в журнале регистрации.'");
			КонецЕсли;
			ОписаниеОшибок.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОшибки,
				СтрокаДокумента.ДокументСсылка,
				ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));

			ЗаписьЖурналаРегистрации(ИнтеграцияСМаркетплейсомOzonСервер.СобытиеЖурналаРегистрации() + "."
				+ НСтр("ru = 'Загрузка данных'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				СтрокаДокумента.ДокументСсылка.Метаданные().ПредставлениеОбъекта,
				СтрокаДокумента.ДокументСсылка,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

			Если Не СтрокаДокумента.ПерезаполненаШапка Тогда
				Результат.СостоянияСсылок.Вставить(СтрокаДокумента.ДокументСсылка, СостояниеНеОбновлен);
			КонецЕсли;
		КонецПопытки;

		Результат.Ссылки.Добавить(СтрокаДокумента.ДокументСсылка);
	КонецЦикла;

	Возврат СтрСоединить(ОписаниеОшибок, Символы.ПС);

КонецФункции

Функция ЗаполнитьИЗаписатьПоставки(СтрокиПоставок, Знач ЗаказКлиентаСсылка, Знач УчетныйВидЦеныДоговора,
			Результат, ПараметрыПрогресса)

	ОписаниеОшибок = Новый Массив; // Массив из Строка.
	СостояниеНеОбновлен = ИнтеграцияСМаркетплейсамиСервер.ДоступныеСостоянияДокументов().СостояниеНеОбновлен;

	НомерТекущейСтроки = 1;
	ВсегоСтрок = СтрокиПоставок.Количество() + 1;
	ПроцентВыполнения = Окр(ПараметрыПрогресса.ШагИтерацииВПроцентах / ВсегоСтрок, 2);

	Для Каждого СтрокаДокумента Из СтрокиПоставок Цикл
		НомерТекущейСтроки = НомерТекущейСтроки + 1;
		ИнтеграцияСМаркетплейсамиСервер.УстановитьПроцентПрогресса(
			ВсегоСтрок,
			НомерТекущейСтроки,
			ПроцентВыполнения,
			ПараметрыПрогресса);

		Если ЗначениеЗаполнено(СтрокаДокумента.ДокументСсылка)
			И (ПустаяСтрока(СтрокаДокумента.НомерПоставки)
		  Или СтрокаДокумента.ДокументОбъект.Товары.Количество() = 0
		  Или Не СтрокаДокумента.ПерезаполненаШапка) Тогда
			// Отмена проведения незаполненных документов поставок.
			Результат.Ссылки.Добавить(СтрокаДокумента.ДокументСсылка);

			Если СтрокаДокумента.ДокументОбъект.ПометкаУдаления Тогда
				Результат.СостоянияСсылок.Вставить(СтрокаДокумента.ДокументСсылка,
					СостояниеНеОбновлен);
				Продолжить;
			КонецЕсли;

			Попытка
				СтрокаДокумента.ДокументОбъект.Заблокировать();
				СтрокаДокумента.ДокументОбъект.УстановитьПометкуУдаления(Истина);
				УдалитьАвтоматическоеПереоформлениеРасходныхОрдеров(СтрокаДокумента.ДокументСсылка, Истина);
				Результат.СостоянияСсылок.Вставить(СтрокаДокумента.ДокументСсылка,
					СтрокаДокумента.СостояниеСсылки);
				СтрокаДокумента.ПометкаУдаления = Истина;
			Исключение
				ОписаниеОшибок.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось пометить на удаление ""%1"" по причине: %2. Подробнее см. в журнале регистрации.'"),
					СтрокаДокумента.ДокументСсылка,
					ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));

				ЗаписьЖурналаРегистрации(ИнтеграцияСМаркетплейсомOzonСервер.СобытиеЖурналаРегистрации() + "."
					+ НСтр("ru = 'Загрузка данных'", ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,
					СтрокаДокумента.ДокументСсылка.Метаданные().ПредставлениеОбъекта,
					СтрокаДокумента.ДокументСсылка,
					ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

				Результат.СостоянияСсылок.Вставить(СтрокаДокумента.ДокументСсылка,
					СостояниеНеОбновлен);
			КонецПопытки;
		Иначе
			// Запись и проведение документов поставок.
			ОписаниеОшибкиБлокировки = ЗаблокироватьОбъект(СтрокаДокумента.ДокументОбъект);
			Если Не ПустаяСтрока(ОписаниеОшибкиБлокировки) Тогда
				Результат.ОписаниеОшибки = ОписаниеОшибкиБлокировки;
				Продолжить;
			КонецЕсли;

			СтрокаДокумента.ДокументОбъект.ПередачаПоЗаказам = ЗначениеЗаполнено(ЗаказКлиентаСсылка);
			СтрокаДокумента.ДокументОбъект.ЗаказКлиента = ЗаказКлиентаСсылка;
			СтрокаДокумента.ДокументОбъект.ПометкаУдаления = Ложь;

			// Перезаполнить статусы указания серий
			ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(СтрокаДокумента.ДокументОбъект, Документы.ПередачаТоваровХранителю);
			НоменклатураСервер.ЗаполнитьСерииПоFEFO(СтрокаДокумента.ДокументОбъект, ПараметрыУказанияСерий, Ложь);
			
			// Расчет цен.
			ЗаполнитьЦеныДокумента(СтрокаДокумента.ДокументОбъект, УчетныйВидЦеныДоговора);

			Если СтрокаДокумента.ДокументОбъект.ЭтоНовый()
			  И Не ЗначениеЗаполнено(СтрокаДокумента.ДокументОбъект.Номер) Тогда
				СтрокаДокумента.ДокументОбъект.УстановитьНовыйНомер();
			КонецЕсли;

			// Запись документа.
			РезультатЗаписиДокумента = ЗаписатьПровестиДокумент(СтрокаДокумента.ДокументОбъект);
			Если РезультатЗаписиДокумента.ЗаписьВыполнена Тогда
				Результат.СостоянияСсылок.Вставить(СтрокаДокумента.ДокументОбъект.Ссылка,
					СтрокаДокумента.СостояниеСсылки);
				СтрокаДокумента.ДокументСсылка = СтрокаДокумента.ДокументОбъект.Ссылка;
				СтрокаДокумента.ПометкаУдаления = Ложь;
			Иначе
				Результат.СостоянияСсылок.Вставить(СтрокаДокумента.ДокументОбъект.Ссылка,
					СостояниеНеОбновлен);
			КонецЕсли;

			Результат.Ссылки.Добавить(СтрокаДокумента.ДокументОбъект.Ссылка);
			СтрокаДокумента.Проведен = СтрокаДокумента.ДокументОбъект.Проведен;

			Если Не ПустаяСтрока(РезультатЗаписиДокумента.ОписаниеОшибки) Тогда
				ОписаниеОшибок.Добавить(РезультатЗаписиДокумента.ОписаниеОшибки);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат СтрСоединить(ОписаниеОшибок, Символы.ПС);

КонецФункции

Функция СформироватьРасходныеОрдера(ПодчиненныеДокументы, ЗаказКлиентаОбъект, НастройкиУчетнойЗаписи,
			Результат, ПараметрыПрогресса)

	ОписаниеОшибок = Новый Массив; // Массив из Строка.

	Склады = ЗаказКлиентаОбъект.Товары.ВыгрузитьКолонку("Склад");
	Склады = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Склады);

	ПустойСклад = Склады.Найти(Справочники.Склады.ПустаяСсылка());
	Если ПустойСклад <> Неопределено Тогда
		Склады.Удалить(ПустойСклад);
	КонецЕсли;

	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(ЗаказКлиентаОбъект.Склад);
	Если Склады.Количество() = 0 И ЗначениеЗаполнено(ЗаказКлиентаОбъект.Склад) И Не СкладГруппа Тогда
		Склады.Добавить(ЗаказКлиентаОбъект.Склад);
	КонецЕсли;
	
	ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента = ПолучитьФункциональнуюОпцию("ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента");
	
	// Корректировка списка складов для создания расходных ордеров.
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаОрдерныхСкладов();
	Запрос.УстановитьПараметр("Склады",       Склады);
	Запрос.УстановитьПараметр("ДатаПроверки", ЗаказКлиентаОбъект.Дата);
	Склады = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

	Если Склады.Количество() > 0 Тогда
		// Пометка на удаление расходных ордеров, склады которых не в списке обрабатываемых складов.
		Отбор = Новый Структура;
		Отбор.Вставить("ЭтоПоставка", Ложь);
		СтрокиРасходныхОрдеров = ПодчиненныеДокументы.НайтиСтроки(Отбор);
		ОписаниеОшибки = ОтменитьПроведениеПодчиненныхДокументов(СтрокиРасходныхОрдеров, Результат, Склады);

		Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
			ОписаниеОшибок.Добавить(ОписаниеОшибки);
		КонецЕсли;

		// Формирование расходных ордеров по списку складов.
		МассивРаспоряжений = Новый Массив;
		Если ЗначениеЗаполнено(ЗаказКлиентаОбъект.Ссылка)
				И Не ЗаказКлиентаОбъект.ЭтоЗаказКакСчет Тогда
			МассивРаспоряжений.Добавить(ЗаказКлиентаОбъект.Ссылка);
		Иначе
			Для Каждого СтрокаТаблицыЗначений Из ПодчиненныеДокументы Цикл
				Если ТипЗнч(СтрокаТаблицыЗначений.ДокументСсылка) <> Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
					МассивРаспоряжений.Добавить(СтрокаТаблицыЗначений.ДокументСсылка);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		СтруктураПараметровСозданияРасходныхОрдеров = СкладыСервер.ПараметрыПереоформленияРасходныхОрдеров();
		СтруктураПараметровСозданияРасходныхОрдеров.ЗаданиеНаПеревозку = Неопределено;
		СтруктураПараметровСозданияРасходныхОрдеров.Получатель = НастройкиУчетнойЗаписи.Партнер;
		СтруктураПараметровСозданияРасходныхОрдеров.РаспоряженияНаОтгрузку = МассивРаспоряжений;

		РасходныеОрдерыНаТовары = Новый Массив;

		Для Каждого Склад Из Склады Цикл
			СтруктураПараметровСозданияРасходныхОрдеров.Склад = Склад;
			УстановитьПривилегированныйРежим(Истина);
			РезультатОформленияОрдеров = СкладыСервер.ПереоформитьРасходныеОрдера(
				СтруктураПараметровСозданияРасходныхОрдеров);
			Если РезультатОформленияОрдеров.ЕстьОшибка Тогда
				ШаблонСообщения = НСтр("ru = 'Расходные ордера по распоряжению на отгрузку для склада ""%1"" не созданы. Возможные причины:
											| - распоряжение не проведено, или все товары уже собираются (собраны).'");
				ОписаниеОшибок.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонСообщения, Склад));
			Иначе
				ОчиститьОчередьПереоформленияРасходныхОрдеров(Склад, НастройкиУчетнойЗаписи.Партнер);
			КонецЕсли;
			УстановитьПривилегированныйРежим(Ложь);

			Для Каждого СтрокаДокумента Из РезультатОформленияОрдеров.ОформленныеОрдера Цикл
				Результат.Ссылки.Добавить(СтрокаДокумента.РасходныйОрдер);
				Результат.СостоянияСсылок.Вставить(СтрокаДокумента.РасходныйОрдер,
					СтрокаДокумента.Действие);
				РасходныеОрдерыНаТовары.Добавить(СтрокаДокумента.РасходныйОрдер);

				СтрокаОрдера = ПодчиненныеДокументы.Добавить();
				СтрокаОрдера.ДокументСсылка  = СтрокаДокумента.РасходныйОрдер;
				СтрокаОрдера.ЭтоПоставка     = Ложь;
				СтрокаОрдера.ПометкаУдаления = Ложь;
				СтрокаОрдера.Проведен        = Истина;
			КонецЦикла;
		КонецЦикла;

		Если ЗначениеЗаполнено(ЗаказКлиентаОбъект.Ссылка) Тогда
			РазбитьРасходныеОрдерыНаПоставки(
				Результат,
				ОписаниеОшибок,
				ПодчиненныеДокументы,
				РасходныеОрдерыНаТовары,
				ЗаказКлиентаОбъект);
		КонецЕсли;
	КонецЕсли;

	Возврат СтрСоединить(ОписаниеОшибок, Символы.ПС);

КонецФункции

Функция ТекстЗапросаОрдерныхСкладов()

	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Склады.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.Ссылка В(&Склады)
		|	И Склады.ИспользоватьОрдернуюСхемуПриОтгрузке
		|	И Склады.ДатаНачалаОрдернойСхемыПриОтгрузке <> НЕОПРЕДЕЛЕНО
		|	И Склады.ДатаНачалаОрдернойСхемыПриОтгрузке <= &ДатаПроверки";

	Возврат ТекстЗапроса;

КонецФункции

Процедура РазбитьРасходныеОрдерыНаПоставки(Результат, ОписаниеОшибок, ПодчиненныеДокументы,
			РасходныеОрдерыНаТовары, ЗаказКлиентаОбъект)

	СостояниеНовый = ИнтеграцияСМаркетплейсамиСервер.ДоступныеСостоянияДокументов().СостояниеНовый;

	Отбор = Новый Структура("ЭтоПоставка, ПометкаУдаления", Истина, Ложь);
	СтрокиПоставок = ПодчиненныеДокументы.НайтиСтроки(Отбор);
	Если СтрокиПоставок.Количество() > 1 И РасходныеОрдерыНаТовары.Количество() > 0 Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Поставки", ПодчиненныеДокументы.ВыгрузитьКолонку("ДокументСсылка"));
		Запрос.УстановитьПараметр("РасходныеОрдерыНаТовары", РасходныеОрдерыНаТовары);
		Запрос.Текст = ТекстЗапросаДанныхПоОрдеруИПередачам();

		УстановитьПривилегированныйРежим(Истина);
		ПакетЗапроса = Запрос.ВыполнитьПакет();
		УстановитьПривилегированныйРежим(Ложь);

		ТаблицаТоваровОрдера = ПакетЗапроса[0].Выгрузить();
		ТаблицаТоваровОрдера.Колонки.Добавить("Обработана", Новый ОписаниеТипов("Булево"));
		ТаблицаТоваровОрдера.Колонки.Добавить("ЭтоДобавляемаяСтрока", Новый ОписаниеТипов("Булево"));
		ТаблицаТоваровОрдера.Колонки.Добавить("СоздатьДокумент", Новый ОписаниеТипов("Булево"));
		ТаблицаТоваровОрдера.Колонки.Добавить("ИндексДокумента", Новый ОписаниеТипов("Число"));
		ТаблицаТоваровОрдера.Колонки.Добавить("Поставка", Новый ОписаниеТипов("ДокументСсылка.ПередачаТоваровХранителю"));
		ТаблицаТоваровОрдера.Колонки.Добавить("НомерПоставки", Новый ОписаниеТипов("Строка"));
		ТаблицаТоваровОрдера.Колонки.Добавить("СтрокаДокумента");

		ТаблицаТоваровОрдера.Индексы.Добавить("Номенклатура, Характеристика, Склад, Обработана");

		ВыборкаПоставок = ПакетЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		ИндексДокумента = 0;
		СоответствияИндексовДокументов = Новый Соответствие;

		Для Каждого ДанныеДокумента Из СтрокиПоставок Цикл
			ВыборкаПоставок.Сбросить();

			Отбор = Новый Структура("Ссылка", ДанныеДокумента.ДокументСсылка);
			Пока ВыборкаПоставок.НайтиСледующий(Отбор) Цикл
				ВыборкаСкладовПоставок = ВыборкаПоставок.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаСкладовПоставок.Следующий() Цикл
					ИндексДокумента = ИндексДокумента + 1;

					ВыборкаТоваровПоставки = ВыборкаСкладовПоставок.Выбрать();
					Пока ВыборкаТоваровПоставки.Следующий() Цикл
						КоличествоПоставки = ВыборкаТоваровПоставки.Количество;

						ОтборТовара = Новый Структура;
						ОтборТовара.Вставить("Номенклатура", ВыборкаТоваровПоставки.Номенклатура);
						ОтборТовара.Вставить("Характеристика", ВыборкаТоваровПоставки.Характеристика);
						ОтборТовара.Вставить("Склад", ВыборкаТоваровПоставки.Склад);
						ОтборТовара.Вставить("Обработана", Ложь);
						СтрокиОрдера = ТаблицаТоваровОрдера.НайтиСтроки(ОтборТовара);
						Для Каждого СтрокаОрдера Из СтрокиОрдера Цикл
							Если СоответствияИндексовДокументов[СтрокаОрдера.Ссылка] = Неопределено Тогда
								СоответствияИндексовДокументов.Вставить(СтрокаОрдера.Ссылка, ИндексДокумента);
							КонецЕсли;

							Если СтрокаОрдера.Количество > КоличествоПоставки Тогда
								Разница = СтрокаОрдера.Количество - КоличествоПоставки;

								НоваяСтрокаОрдера = ТаблицаТоваровОрдера.Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрокаОрдера, СтрокаОрдера,, "НомерСтроки");
								НоваяСтрокаОрдера.Количество           = Разница;
								НоваяСтрокаОрдера.ЭтоДобавляемаяСтрока = Истина;

								СтрокаОрдера.Количество         = КоличествоПоставки;
								КоличествоПоставки = 0;
							Иначе
								КоличествоПоставки = КоличествоПоставки - СтрокаОрдера.Количество;
							КонецЕсли;

							СтрокаОрдера.Обработана         = Истина;
							СтрокаОрдера.ИндексДокумента    = ИндексДокумента;
							СтрокаОрдера.Поставка           = ДанныеДокумента.ДокументСсылка;
							СтрокаОрдера.НомерПоставки      = ДанныеДокумента.НомерПоставки;
							СтрокаОрдера.СоздатьДокумент    =
								СоответствияИндексовДокументов[СтрокаОрдера.Ссылка] <> ИндексДокумента;

							Если КоличествоПоставки = 0 Тогда
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;

		ТаблицаТоваровОрдера.Сортировать("ИндексДокумента, Ссылка");

		ИзменяемыеОрдера = Новый Соответствие;

		Для Каждого СтрокаОрдера Из ТаблицаТоваровОрдера Цикл
			Отбор = Новый Структура("ДокументСсылка", СтрокаОрдера.Ссылка);
			СтрокиПоставок = ПодчиненныеДокументы.НайтиСтроки(Отбор);
			Если СтрокиПоставок.Количество() > 0 Тогда
				СтрокаДокумента = СтрокиПоставок[0];
				ДокументОбъект = СтрокаДокумента.ДокументОбъект;

				Если ДокументОбъект = Неопределено Тогда
					ДокументОбъект = СтрокаДокумента.ДокументСсылка.ПолучитьОбъект();
					СтрокаДокумента.ДокументОбъект = ДокументОбъект;

					ОписаниеОшибкиБлокировки = ЗаблокироватьОбъект(ДокументОбъект);
					Если Не ПустаяСтрока(ОписаниеОшибкиБлокировки) Тогда
						ОписаниеОшибок.Добавить(ОписаниеОшибкиБлокировки);
						Продолжить;
					КонецЕсли;

					ЗаписатьПровестиДокумент(ДокументОбъект, Ложь);
				КонецЕсли;

				Если СоответствияИндексовДокументов[СтрокаОрдера.Ссылка] = СтрокаОрдера.ИндексДокумента Тогда
					ДокументОбъект.Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонКомментария(СтрокаДокумента.ДокументСсылка),
						СтрокаОрдера.НомерПоставки,
						ЗаказКлиентаОбъект.НомерПоДаннымКлиента);
				КонецЕсли;

				ИзменяемыеОрдера.Вставить(СтрокаДокумента.ДокументСсылка, ДокументОбъект);
			КонецЕсли;

			Если СтрокаОрдера.ЭтоДобавляемаяСтрока Тогда
				СтрокаТовараДокумента = ДокументОбъект.ТоварыПоРаспоряжениям.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТовараДокумента, СтрокаОрдера);
				СтрокаОрдера.СтрокаДокумента = СтрокаТовараДокумента;
				СтрокаТовараДокумента.Распоряжение = ЗаказКлиентаОбъект.Ссылка;
			Иначе
				СтрокаТовараДокумента = ДокументОбъект.ТоварыПоРаспоряжениям.Найти(СтрокаОрдера.НомерСтроки, "НомерСтроки");
				Если СтрокаТовараДокумента <> Неопределено Тогда
					СтрокаОрдера.СтрокаДокумента = СтрокаТовараДокумента;
					Если СтрокаТовараДокумента.Количество <> СтрокаОрдера.Количество Тогда
						СтрокаТовараДокумента.Количество = СтрокаОрдера.Количество;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		Пока ИндексДокумента > 0 Цикл
			Отбор = Новый Структура("ИндексДокумента, СоздатьДокумент", ИндексДокумента, Истина);
			ВыделяемыеСтроки = ТаблицаТоваровОрдера.НайтиСтроки(Отбор);

			СоответствиеСтрокПереноса = Новый Соответствие;

			ИсточникОбъект = Неопределено;
			Для Каждого СтрокаПоставки Из ВыделяемыеСтроки Цикл
				СтрокаИсточника = ПодчиненныеДокументы.Найти(СтрокаПоставки.Ссылка, "ДокументСсылка");
				Если СтрокаИсточника <> Неопределено Тогда
					Если ИсточникОбъект <> СтрокаИсточника.ДокументОбъект Тогда
						ИсточникОбъект = СтрокаИсточника.ДокументОбъект;
						ДанныеПереноса = Новый Структура("НомерПоставки, СтрокиДокумента",
							СтрокаПоставки.НомерПоставки, Новый Массив);
						СоответствиеСтрокПереноса.Вставить(ИсточникОбъект, ДанныеПереноса);
					КонецЕсли;
					СоответствиеСтрокПереноса[ИсточникОбъект].СтрокиДокумента.Добавить(СтрокаПоставки.СтрокаДокумента);
				КонецЕсли;
			КонецЦикла;

			МассивРеквизитов = Новый Массив;
			Для Каждого Реквизит Из Метаданные.Документы.РасходныйОрдерНаТовары.Реквизиты Цикл
				ИмяРеквизита = Реквизит.Имя;
				Если ИмяРеквизита = "ВсегоМест" Или ИмяРеквизита = "Комментарий" Тогда
					Продолжить;
				КонецЕсли;
				МассивРеквизитов.Добавить(Реквизит.Имя);
			КонецЦикла;
			ПоляЗаполненияШапки = СтрСоединить(МассивРеквизитов, ",");

			Для Каждого ДанныеПоставки Из СоответствиеСтрокПереноса Цикл
				РасходныйОрдерОбъект = Документы.РасходныйОрдерНаТовары.СоздатьДокумент();
				ЗаполнитьЗначенияСвойств(РасходныйОрдерОбъект, ДанныеПоставки.Ключ, ПоляЗаполненияШапки);
				РасходныйОрдерОбъект.Дата = ДанныеПоставки.Ключ.Дата;

				РасходныйОрдерОбъект.Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонКомментария(РасходныйОрдерОбъект.Ссылка),
					ДанныеПоставки.Значение.НомерПоставки,
					ЗаказКлиентаОбъект.НомерПоДаннымКлиента);

				Для Каждого СтрокаДокумента Из ДанныеПоставки.Значение.СтрокиДокумента Цикл
					НоваяСтрокаРаспоряжения = РасходныйОрдерОбъект.ТоварыПоРаспоряжениям.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаРаспоряжения, СтрокаДокумента);

					ИзменяемыеОрдера[ДанныеПоставки.Ключ.Ссылка].ТоварыПоРаспоряжениям.Удалить(СтрокаДокумента);
				КонецЦикла;

				Если РасходныйОрдерОбъект.ЭтоНовый() И Не ЗначениеЗаполнено(РасходныйОрдерОбъект.Номер) Тогда
					РасходныйОрдерОбъект.УстановитьНовыйНомер();
				КонецЕсли;

				ЗаполнитьОтгружаемыеТоварыПоРаспоряжениям(РасходныйОрдерОбъект);

				РезультатЗаписиДокумента = ЗаписатьПровестиДокумент(РасходныйОрдерОбъект);
				Если РезультатЗаписиДокумента.ЗаписьВыполнена Тогда
					Результат.СостоянияСсылок.Вставить(РасходныйОрдерОбъект.Ссылка, СостояниеНовый);
					Результат.Ссылки.Добавить(РасходныйОрдерОбъект.Ссылка);
				КонецЕсли;

				Если Не ПустаяСтрока(РезультатЗаписиДокумента.ОписаниеОшибки) Тогда
					ОписаниеОшибок.Добавить(РезультатЗаписиДокумента.ОписаниеОшибки);
				КонецЕсли;
			КонецЦикла;

			ИндексДокумента = ИндексДокумента - 1;
		КонецЦикла;

		Для Каждого ИзменяемыйОрдер Из ИзменяемыеОрдера Цикл
			РасходныйОрдерОбъект = ИзменяемыйОрдер.Значение;

			ЗаполнитьОтгружаемыеТоварыПоРаспоряжениям(РасходныйОрдерОбъект);

			РезультатЗаписиДокумента = ЗаписатьПровестиДокумент(РасходныйОрдерОбъект);
			Если Не ПустаяСтрока(РезультатЗаписиДокумента.ОписаниеОшибки) Тогда
				ОписаниеОшибок.Добавить(РезультатЗаписиДокумента.ОписаниеОшибки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Функция ТекстЗапросаДанныхПоОрдеруИПередачам()

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка КАК Ссылка,
		|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.НомерСтроки КАК НомерСтроки,
		|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Номенклатура КАК Номенклатура,
		|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Характеристика КАК Характеристика,
		|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка.Склад КАК Склад,
		|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Количество КАК Количество,
		|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Назначение КАК Назначение,
		|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Серия КАК Серия,
		|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.СтатусУказанияСерий КАК СтатусУказанияСерий
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТоварыТоварыПоРаспоряжениям
		|ГДЕ
		|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка В(&РасходныеОрдерыНаТовары)
		|	И РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка.Проведен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПередачаТоваровХранителюТовары.Ссылка КАК Ссылка,
		|	ПередачаТоваровХранителюТовары.Номенклатура КАК Номенклатура,
		|	ПередачаТоваровХранителюТовары.Характеристика КАК Характеристика,
		|	ВЫБОР
		|		КОГДА ПередачаТоваровХранителюТовары.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|			ТОГДА ПередачаТоваровХранителюТовары.Ссылка.Склад
		|		ИНАЧЕ ПередачаТоваровХранителюТовары.Склад
		|	КОНЕЦ КАК Склад,
		|	СУММА(ПередачаТоваровХранителюТовары.Количество) КАК Количество
		|ИЗ
		|	Документ.ПередачаТоваровХранителю.Товары КАК ПередачаТоваровХранителюТовары
		|ГДЕ
		|	ПередачаТоваровХранителюТовары.Ссылка В(&Поставки)
		|	И НЕ ПередачаТоваровХранителюТовары.Ссылка.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	ПередачаТоваровХранителюТовары.Ссылка,
		|	ПередачаТоваровХранителюТовары.Номенклатура,
		|	ПередачаТоваровХранителюТовары.Характеристика,
		|	ВЫБОР
		|		КОГДА ПередачаТоваровХранителюТовары.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|			ТОГДА ПередачаТоваровХранителюТовары.Ссылка.Склад
		|		ИНАЧЕ ПередачаТоваровХранителюТовары.Склад
		|	КОНЕЦ
		|ИТОГИ ПО
		|	Ссылка,
		|	Склад";

	Возврат ТекстЗапроса;

КонецФункции

Процедура ЗаполнитьОтгружаемыеТоварыПоРаспоряжениям(РасходныйОрдерОбъект)

	РасходныйОрдерОбъект.ТоварыПоРаспоряжениям.Свернуть("Распоряжение, Номенклатура, Характеристика, Назначение, Серия", "Количество");
	РасходныйОрдерОбъект.Заполнить(Неопределено);

КонецПроцедуры

Процедура УдалитьАвтоматическоеПереоформлениеРасходныхОрдеров(Регистратор, УстановитьПривилегированныйРежим = Ложь)

	Если Не Регистратор.Метаданные().Движения.Содержит(Метаданные.РегистрыНакопления.ТоварыКОтгрузке) Тогда
		Возврат;
	КонецЕсли;

	РежимФормированияРасходныхОрдеровАвтоматически = (Константы.РежимФормированияРасходныхОрдеров.Получить()
		= Перечисления.РежимыФормированияРасходныхОрдеров.Автоматически);
	Если Не РежимФормированияРасходныхОрдеровАвтоматически Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	МИНИМУМ(ТоварыКОтгрузке.Период) КАК Период,
		|	ТоварыКОтгрузке.Склад КАК Склад,
		|	ТоварыКОтгрузке.Получатель КАК Получатель
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке КАК ТоварыКОтгрузке
		|ГДЕ
		|	ТоварыКОтгрузке.Регистратор = &Регистратор
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыКОтгрузке.Получатель,
		|	ТоварыКОтгрузке.Склад";

	Если УстановитьПривилегированныйРежим Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;

	ВыборкаСкладПолучатель = Запрос.Выполнить().Выбрать();
	Пока ВыборкаСкладПолучатель.Следующий() Цикл
		Склад = ВыборкаСкладПолучатель.Склад;
		Получатель = ВыборкаСкладПолучатель.Получатель;

		Если Не СкладыСервер.ИспользоватьОрдернуюСхемуПриОтгрузке(Склад, ВыборкаСкладПолучатель.Период) Тогда
			Продолжить;
		КонецЕсли;

		ОчиститьОчередьПереоформленияРасходныхОрдеров(Склад, Получатель,
			РежимФормированияРасходныхОрдеровАвтоматически);
	КонецЦикла;

	Если УстановитьПривилегированныйРежим Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;

КонецПроцедуры

Процедура ОчиститьОчередьПереоформленияРасходныхОрдеров(Склад, Получатель,
			РежимФормированияРасходныхОрдеровАвтоматически = Неопределено)

	Если РежимФормированияРасходныхОрдеровАвтоматически = Неопределено Тогда
		РежимФормированияРасходныхОрдеровАвтоматически = (Константы.РежимФормированияРасходныхОрдеров.Получить()
			= Перечисления.РежимыФормированияРасходныхОрдеров.Автоматически);
	КонецЕсли;

	Если Не РежимФормированияРасходныхОрдеровАвтоматически Тогда
		Возврат;
	КонецЕсли;

	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;

		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьПереоформленияРасходныхОрдеров");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		ЭлементБлокировки.УстановитьЗначение("Склад",      Склад);
		ЭлементБлокировки.УстановитьЗначение("Получатель", Получатель);

		Блокировка.Заблокировать();

		НаборЗаписей = РегистрыСведений.ОчередьПереоформленияРасходныхОрдеров.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Склад.Установить(Склад);
		НаборЗаписей.Отбор.Получатель.Установить(Получатель);

		НаборЗаписей.Записать();

		Ключ = "ПереоформлениеРасходныхОрдеров"
			+ Строка(Склад.УникальныйИдентификатор())
			+ Строка(Получатель.УникальныйИдентификатор());

		Отбор = Новый Структура();
		Отбор.Вставить("Ключ", Ключ);
		Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);

		АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
		Для Каждого Задание Из АктивныеЗадания Цикл
			Задание.Отменить();
		КонецЦикла;

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось очистить очередь переоформления расходных ордеров по складу ""%1"", получателю ""%2"" по причине: %3'"),
			Склад,
			Получатель,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

		ЗаписьЖурналаРегистрации(ИнтеграцияСМаркетплейсомOzonСервер.СобытиеЖурналаРегистрации() + "."
			+ НСтр("ru = 'Загрузка данных'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ТекстСообщения + "");
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область ЗаписьЗаявкиНаВозврат

Функция ЗаписатьДанныеЗаявокНаВозврат(ТаблицаСопоставленияДанных, Параметры, СсылкаДляОбновленияДанных,
			ПараметрыПрогресса)

	Результат = ИнтеграцияСМаркетплейсамиСервер.РезультатЗаписиЗагружаемыхДанных();

	Если ТаблицаСопоставленияДанных.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;

	Если Параметры.ДополнительныеПараметры.Свойство("ЗначенияПараметровСсылкиНаОбъект") Тогда
		СкладПриемкиЗаявкиНаВывоз = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			Параметры.ДополнительныеПараметры.ЗначенияПараметровСсылкиНаОбъект, "Склад", "");
	Иначе
		СкладПриемкиЗаявкиНаВывоз = Справочники.Склады.ПустаяСсылка();
	КонецЕсли;

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов") Тогда
		СкладПриемкиЗаявкиНаВывоз = Справочники.Склады.СкладПоУмолчанию();
	КонецЕсли;

	НастройкиУчетнойЗаписи = Справочники.УчетныеЗаписиМаркетплейсов.НастройкиУчетнойЗаписи(Параметры.УчетнаяЗапись);
	ЗначенияОсновныхНастроек = ЗначенияОсновныхНастроек(НастройкиУчетнойЗаписи);

	ДоступныеСостоянияДокументов = ИнтеграцияСМаркетплейсамиСервер.ДоступныеСостоянияДокументов();

	Если ЗначениеЗаполнено(СсылкаДляОбновленияДанных)
	  И ТипЗнч(СсылкаДляОбновленияДанных) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		ЗаявкаНаВозвратОбъект = СсылкаДляОбновленияДанных.ПолучитьОбъект();

		ОписаниеОшибкиБлокировки = ЗаблокироватьОбъект(ЗаявкаНаВозвратОбъект);
		Если Не ПустаяСтрока(ОписаниеОшибкиБлокировки) Тогда
			Результат.ОписаниеОшибки = ОписаниеОшибкиБлокировки;
			Возврат Результат;
		КонецЕсли;

		ЗаявкаНаВозвратОбъект.ПометкаУдаления = Ложь;
		ЗаявкаНаВозвратОбъект.ВозвращаемыеТовары.Очистить();
		СостояниеСсылки = ДоступныеСостоянияДокументов.СостояниеОбновлен;
	Иначе
		ЗаявкаНаВозвратОбъект = Документы.ЗаявкаНаВозвратТоваровОтКлиента.СоздатьДокумент();
		ЗаявкаНаВозвратОбъект.Дата = ТекущаяДатаСеанса();
		ЗаявкаНаВозвратОбъект.Организация = НастройкиУчетнойЗаписи.Организация;
		СостояниеСсылки = ДоступныеСостоянияДокументов.СостояниеНовый;
	КонецЕсли;

	Валюта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		НастройкиУчетнойЗаписи.ДоговорПродажиЧерезСкладыТорговойПлощадки,
		"ВалютаВзаиморасчетов");

	ЗаявкаНаВозвратОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера;
	ЗаявкаНаВозвратОбъект.СпособКомпенсации     = Перечисления.СпособыКомпенсацииВозвратовТоваров.ПустаяСсылка();
	ЗаявкаНаВозвратОбъект.ДатаПоступления       = НачалоДня(ТекущаяДатаСеанса() + 86400);
	ЗаявкаНаВозвратОбъект.Комментарий           = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонКомментария(ЗаявкаНаВозвратОбъект.Ссылка),
		Параметры.ПараметрыШапки.Параметры.НаименованиеСклада,
		Параметры.ПараметрыШапки.Параметры.ИдентификаторСклада);

	ВариантыРезультатовСопоставления = ИнтеграцияСМаркетплейсамиКлиентСервер.ВариантыРезультатовСопоставления();

	ВсегоСтрок = ТаблицаСопоставленияДанных.Количество();
	НомерТекущейСтроки = 0;
	ПроцентВыполнения = 0;
	Для Каждого СтрокаТовара Из ТаблицаСопоставленияДанных Цикл
		НомерТекущейСтроки = НомерТекущейСтроки + 1;
		ИнтеграцияСМаркетплейсамиСервер.УстановитьПроцентПрогресса(
			ВсегоСтрок,
			НомерТекущейСтроки,
			ПроцентВыполнения,
			ПараметрыПрогресса);

		Если Не Параметры.ЗагружатьНезаполненныеСтроки
		  И СтрокаТовара.РезультатСопоставленияСтроки<> ВариантыРезультатовСопоставления.СтрокаСопоставлена Тогда
			Продолжить;
		КонецЕсли;

		СтрокаТабличнойЧасти = ЗаявкаНаВозвратОбъект.ВозвращаемыеТовары.Добавить();
		СтрокаТабличнойЧасти.Номенклатура = СтрокаТовара.Номенклатура;
		СтрокаТабличнойЧасти.НоменклатураОприходование = СтрокаТовара.Номенклатура;

		Если ЗначенияОсновныхНастроек.ИспользоватьХарактеристикиНоменклатуры Тогда
			СтрокаТабличнойЧасти.Характеристика = СтрокаТовара.Характеристика;
			СтрокаТабличнойЧасти.ХарактеристикаОприходование = СтрокаТовара.Характеристика;
		КонецЕсли;

		Если ЗначениеЗаполнено(СтрокаТовара.Упаковка)
		  И СтрокаТовара.Упаковка <> СтрокаТовара.НоменклатураЕдиницаИзмерения Тогда
			Если ЗначенияОсновныхНастроек.ИспользоватьУпаковкиНоменклатуры Тогда
				СтрокаТабличнойЧасти.Упаковка = СтрокаТовара.Упаковка;
				КоличествоУпаковокВСтроке     = СтрокаТовара.КоличествоУпаковок;
				КоличествоВСтроке             = Окр(КоличествоУпаковокВСтроке
					* СтрокаТовара.УпаковкаКоэффициент, 3, РежимОкругления.Окр15как20);
			Иначе
				СтрокаТабличнойЧасти.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
				КоличествоУпаковокВСтроке     = Окр(СтрокаТовара.КоличествоУпаковок
					* СтрокаТовара.УпаковкаКоэффициент, 3, РежимОкругления.Окр15как20);
				КоличествоВСтроке             = КоличествоУпаковокВСтроке;
			КонецЕсли;
		Иначе
			СтрокаТабличнойЧасти.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
			КоличествоУпаковокВСтроке     = СтрокаТовара.КоличествоУпаковок;
			КоличествоВСтроке             = КоличествоУпаковокВСтроке;
		КонецЕсли;

		СтрокаТабличнойЧасти.Количество         = КоличествоВСтроке;
		СтрокаТабличнойЧасти.КоличествоУпаковок = КоличествоУпаковокВСтроке;
	КонецЦикла;

	ОписаниеОшибок = Новый Массив;
	Если Не ПустаяСтрока(Результат.ОписаниеОшибки) Тогда
		ОписаниеОшибок.Добавить(Результат.ОписаниеОшибки);
	КонецЕсли;

	Если ЗаявкаНаВозвратОбъект.ВозвращаемыеТовары.Количество() = 0 Тогда
		Результат.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось записать заявку на возврат по причине: нет данных по возвращаемому товару.'"),
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Результат;
	Иначе
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("Партнер", НастройкиУчетнойЗаписи.Партнер);

		ЗаявкаНаВозвратОбъект.Заполнить(ДанныеЗаполнения);

		ЗаявкаНаВозвратОбъект.Контрагент            = НастройкиУчетнойЗаписи.Контрагент;
		ЗаявкаНаВозвратОбъект.Договор               = НастройкиУчетнойЗаписи.ДоговорПродажиЧерезСкладыТорговойПлощадки;
		ЗаявкаНаВозвратОбъект.Валюта                = Валюта;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами") Тогда
			ЗаявкаНаВозвратОбъект.Соглашение            = НастройкиУчетнойЗаписи.Соглашение;
		КонецЕсли;

		// Расчет цен заявки на возврат.
		УчетныйВидЦеныДоговора = КомиссионнаяТорговляСервер.ВидЦеныДоговора(ЗаявкаНаВозвратОбъект.Договор, Истина);
		Если Не ЗначениеЗаполнено(УчетныйВидЦеныДоговора)
		  И НастройкиУчетнойЗаписи.Свойство("ВидыЦен")
		  И НастройкиУчетнойЗаписи.ВидыЦен.Свойство("ВидЦеныСУчетомСкидок") Тогда
			УчетныйВидЦеныДоговора = НастройкиУчетнойЗаписи.ВидыЦен.ВидЦеныСУчетомСкидок;
		КонецЕсли;

		ЗаполнитьЦеныДокумента(ЗаявкаНаВозвратОбъект, УчетныйВидЦеныДоговора, "ВозвращаемыеТовары");

		Если ЗначениеЗаполнено(СкладПриемкиЗаявкиНаВывоз) Тогда
			ЗаявкаНаВозвратОбъект.Склад = СкладПриемкиЗаявкиНаВывоз;
		ИначеЕсли ЗначенияОсновныхНастроек.ИспользоватьНесколькоСкладов Тогда
			ТекстОшибки = НСтр("ru = 'Рекомендуется проверить заполнение склада в документе.'");
			ОписаниеОшибок.Добавить(ТекстОшибки);
		КонецЕсли;

		// Запись и проведение документа.
		Если ЗаявкаНаВозвратОбъект.ЭтоНовый() И Не ЗначениеЗаполнено(ЗаявкаНаВозвратОбъект.Номер) Тогда
			ЗаявкаНаВозвратОбъект.УстановитьНовыйНомер();
		КонецЕсли;

		РезультатЗаписиДокумента = ЗаписатьПровестиДокумент(ЗаявкаНаВозвратОбъект);
		Если РезультатЗаписиДокумента.ЗаписьВыполнена Тогда
			Результат.СсылкаНаОбъект = ЗаявкаНаВозвратОбъект.Ссылка;
			Результат.Ссылки.Добавить(ЗаявкаНаВозвратОбъект.Ссылка);
			Результат.СостоянияСсылок.Вставить(ЗаявкаНаВозвратОбъект.Ссылка, СостояниеСсылки);

			// Запись загружаемого файла
			Если Параметры.ДанныеФайла <> Неопределено Тогда
				ПутьКВременномуФайлу = ПолучитьИмяВременногоФайла(Параметры.РасширениеФайла);
				ДвоичныеДанные = Параметры.ДанныеФайла; // ДвоичныеДанные
				ДвоичныеДанные.Записать(ПутьКВременномуФайлу);

				НаименованиеПрисоединенногоФайла = НаименованиеСохраняемогоФайла(ЗаявкаНаВозвратОбъект.Ссылка);

				ИнтеграцияСМаркетплейсамиСервер.ЗаписатьПрисоединенныйФайл(
					ЗаявкаНаВозвратОбъект.Ссылка,
					ПутьКВременномуФайлу,
					Параметры.ПутьКВыбранномуФайлу,
					НаименованиеПрисоединенногоФайла);

				ФайловаяСистема.УдалитьВременныйФайл(ПутьКВременномуФайлу);
			КонецЕсли;
		КонецЕсли;

		Если Не ПустаяСтрока(РезультатЗаписиДокумента.ОписаниеОшибки) Тогда
			ОписаниеОшибок.Добавить(РезультатЗаписиДокумента.ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;

	Результат.ОписаниеОшибки = СтрСоединить(ОписаниеОшибок, Символы.ПС);

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ЗаписьОтчетаОПродажах

Функция ЗаписатьДанныеОРеализованныхТоварах(ТаблицаСопоставленияДанных, Параметры, ПараметрыПрогресса)
	
	Результат = ИнтеграцияСМаркетплейсамиСервер.РезультатЗаписиЗагружаемыхДанных();
	Результат.Служебное = Новый Массив;
	
	НастройкиУчетнойЗаписи    = Справочники.УчетныеЗаписиМаркетплейсов.НастройкиУчетнойЗаписи(Параметры.УчетнаяЗапись);
	КодОшибки                 = ИнтеграцияСМаркетплейсомOzonСервер.КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
	СобытиеЖурналаРегистрации = ИнтеграцияСМаркетплейсомOzonСервер.СобытиеЖурналаРегистрации();
	
	ПараметрыИзЗагружаемыхДанных = Параметры.ПараметрыШапки.Параметры;
	НачалоПериода                = НачалоДня(СтроковыеФункцииКлиентСервер.СтрокаВДату(ПараметрыИзЗагружаемыхДанных.НачалоПериода));
	КонецПериода                 = КонецДня(СтроковыеФункцииКлиентСервер.СтрокаВДату(ПараметрыИзЗагружаемыхДанных.КонецПериода));
	НомерВходящегоДокумента      = ПараметрыИзЗагружаемыхДанных.НомерВходящегоДокумента;
	ДатаВходящегоДокумента       = ПараметрыИзЗагружаемыхДанных.ДатаВходящегоДокумента;
	
	Если НастройкиУчетнойЗаписи.СпособОтраженияПродажFBS = "РеализацияВПути" Тогда
		Если НастройкиУчетнойЗаписи.СпособОтраженияПродажFBO = "Комиссия" Тогда
			ПараметрыПрогресса.ШагИтерацииВПроцентах = 10;
			ПараметрыПрогресса.ПрогрессВыполнения    = 70;
		Иначе
			ПараметрыПрогресса.ШагИтерацииВПроцентах = 15;
			ПараметрыПрогресса.ПрогрессВыполнения    = 70;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапросаПродажиСОтложеннымПереходомПраваСобственности(Истина);
		
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("ВидТорговойПлощадки",             НастройкиУчетнойЗаписи.ВидМаркетплейса);
		ПараметрыЗаполнения.Вставить("УчетнаяЗапись",                   Параметры.УчетнаяЗапись);
		ПараметрыЗаполнения.Вставить("ВалютаУчета",                     НастройкиУчетнойЗаписи.ВалютаУчета);
		ПараметрыЗаполнения.Вставить("Организация",                     НастройкиУчетнойЗаписи.Организация);
		ПараметрыЗаполнения.Вставить("Партнер",                         НастройкиУчетнойЗаписи.ПокупательПартнер);
		ПараметрыЗаполнения.Вставить("Контрагент",                      НастройкиУчетнойЗаписи.ПокупательКонтрагент);
		ПараметрыЗаполнения.Вставить("Соглашение",                      НастройкиУчетнойЗаписи.ПокупательСоглашение);
		ПараметрыЗаполнения.Вставить("Договор",                         НастройкиУчетнойЗаписи.ПокупательДоговор);
		ПараметрыЗаполнения.Вставить("СкладВШапке",                     "СкладВШапке");
		ПараметрыЗаполнения.Вставить("ПерезаписатьСклад",               Истина);
		ПараметрыЗаполнения.Вставить("КодОшибки",                       КодОшибки);
		ПараметрыЗаполнения.Вставить("СобытиеЖурналаРегистрации",       СобытиеЖурналаРегистрации);
		ПараметрыЗаполнения.Вставить("ЗагружатьНезаполненныеСтроки",    Параметры.ЗагружатьНезаполненныеСтроки);
		ПараметрыЗаполнения.Вставить("ПерезаписатьДокументы",           Истина);
		ПараметрыЗаполнения.Вставить("ОчиститьТабличныеЧасти",          Истина);
		ПараметрыЗаполнения.Вставить("ПараметрыОбработкиРеализация",    Неопределено);
		ПараметрыЗаполнения.Вставить("ПараметрыОбработкиКорректировка", Неопределено);
		ПараметрыЗаполнения.Вставить("ВыполнитьКорректировкуПоСумме",   Истина);
		ПараметрыЗаполнения.Вставить("ТекстЗапроса",                    ТекстЗапроса);
		
		Ошибка = ИнтеграцияСМаркетплейсамиСервер.ЗаписатьПродажиСОтложеннымПереходомПраваСобственности(
			Результат,
			ТаблицаСопоставленияДанных,
			ПараметрыЗаполнения,
			ПараметрыПрогресса);
		
		Если ЗначениеЗаполнено(Ошибка.КодОшибки) Тогда
			Результат.ОписаниеОшибки = Результат.ОписаниеОшибки 
				+ ?(ЗначениеЗаполнено(Результат.ОписаниеОшибки), Символы.ПС, "")
				+ Ошибка.ОписаниеОшибки;
		КонецЕсли;
		
		Если ТипЗнч(Ошибка.Детализация) = Тип("Массив") Тогда
			Результат.ОписаниеОшибки = Результат.ОписаниеОшибки 
				+ ?(ЗначениеЗаполнено(Результат.ОписаниеОшибки), Символы.ПС, "")
				+ СтрСоединить(Ошибка.Детализация, Символы.ПС);
		КонецЕсли;
		
		//
		Если НастройкиУчетнойЗаписи.СпособОтраженияПродажFBO = "Комиссия" Тогда
			ПараметрыПрогресса.ШагИтерацииВПроцентах = 10;
			ПараметрыПрогресса.ПрогрессВыполнения    = 80;
		Иначе
			ПараметрыПрогресса.ШагИтерацииВПроцентах = 15;
			ПараметрыПрогресса.ПрогрессВыполнения    = 85;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапросаВзаимозачетыЗадолженности(Истина);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"ВложенныйЗапрос.ДатаДокумента КАК ДатаДокумента,",
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"ДАТАВРЕМЯ(%1, %2, %3, 23, 59, 59) КАК ДатаДокумента,",
				Формат(Год(КонецПериода), "ЧГ=0"),
				Формат(Месяц(КонецПериода), "ЧГ=0"),
				Формат(День(КонецПериода), "ЧГ=0")));
		
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("ВидТорговойПлощадки",       НастройкиУчетнойЗаписи.ВидМаркетплейса);
		ПараметрыЗаполнения.Вставить("УчетнаяЗапись",             Параметры.УчетнаяЗапись);
		ПараметрыЗаполнения.Вставить("ВалютаУчета",               НастройкиУчетнойЗаписи.ВалютаУчета);
		ПараметрыЗаполнения.Вставить("Организация",               НастройкиУчетнойЗаписи.Организация);
		ПараметрыЗаполнения.Вставить("Партнер",                   НастройкиУчетнойЗаписи.Партнер);
		ПараметрыЗаполнения.Вставить("Контрагент",                НастройкиУчетнойЗаписи.Контрагент);
		ПараметрыЗаполнения.Вставить("Соглашение",                НастройкиУчетнойЗаписи.Соглашение);
		ПараметрыЗаполнения.Вставить("Договор",                   НастройкиУчетнойЗаписи.ДоговорПродажиЧерезСкладыСобственные);
		ПараметрыЗаполнения.Вставить("КодОшибки",                 КодОшибки);
		ПараметрыЗаполнения.Вставить("СобытиеЖурналаРегистрации", СобытиеЖурналаРегистрации);
		ПараметрыЗаполнения.Вставить("ПерезаписатьДокументы",     Истина);
		ПараметрыЗаполнения.Вставить("ОчиститьТабличныеЧасти",    Истина);
		ПараметрыЗаполнения.Вставить("ТекстЗапроса",              ТекстЗапроса);
		ПараметрыЗаполнения.Вставить("ИсключаемыеОбъекты",        Результат.Служебное);
		
		Ошибка = ИнтеграцияСМаркетплейсамиСервер.ЗаписатьВзаимозачетыЗадолженности(
			Результат,
			ПараметрыЗаполнения,
			ПараметрыПрогресса);
		
		Если ЗначениеЗаполнено(Ошибка.КодОшибки) Тогда
			Результат.ОписаниеОшибки = Результат.ОписаниеОшибки 
				+ ?(ЗначениеЗаполнено(Результат.ОписаниеОшибки), Символы.ПС, "")
				+ Ошибка.ОписаниеОшибки;
		КонецЕсли;
		
		Если ТипЗнч(Ошибка.Детализация) = Тип("Массив") Тогда
			Результат.ОписаниеОшибки = Результат.ОписаниеОшибки 
				+ ?(ЗначениеЗаполнено(Результат.ОписаниеОшибки), Символы.ПС, "")
				+ СтрСоединить(Ошибка.Детализация, Символы.ПС);
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкиУчетнойЗаписи.СпособОтраженияПродажFBO = "Комиссия"
			Или НастройкиУчетнойЗаписи.СпособОтраженияПродажFBS = "Комиссия" Тогда
		Если НастройкиУчетнойЗаписи.СпособОтраженияПродажFBS = "РеализацияВПути" Тогда
			ПараметрыПрогресса.ШагИтерацииВПроцентах = 10;
			ПараметрыПрогресса.ПрогрессВыполнения    = 90;
		КонецЕсли;
		
		Если ТипЗнч(ДатаВходящегоДокумента) = Тип("Строка") Тогда
			ДатаВходящегоДокумента = СтроковыеФункцииКлиентСервер.СтрокаВДату(ДатаВходящегоДокумента);
		КонецЕсли;
		Если ДатаВходящегоДокумента = Дата(1, 1, 1) Тогда
			ДатаВходящегоДокумента = КонецПериода;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапросаПродажиЧерезКомиссионера(Истина);
		Если НастройкиУчетнойЗаписи.СпособОтраженияПродажFBO = "Комиссия"
				И НастройкиУчетнойЗаписи.СпособОтраженияПродажFBS = "Комиссия" Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
				"&СхемаДоставки",
				"ИСТИНА");
		ИначеЕсли НастройкиУчетнойЗаписи.СпособОтраженияПродажFBO = "Комиссия"
					И НастройкиУчетнойЗаписи.СпособОтраженияПродажFBS <> "Комиссия" Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
				"&СхемаДоставки",
				"ТаблицаДанных.СхемаДоставки = ЗНАЧЕНИЕ(Перечисление.СхемыРаботыТорговыхПлощадок.FBO)");
		ИначеЕсли НастройкиУчетнойЗаписи.СпособОтраженияПродажFBO <> "Комиссия"
					И НастройкиУчетнойЗаписи.СпособОтраженияПродажFBS = "Комиссия" Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
				"&СхемаДоставки",
				"ТаблицаДанных.СхемаДоставки = ЗНАЧЕНИЕ(Перечисление.СхемыРаботыТорговыхПлощадок.FBS)");
		КонецЕсли;
		
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("ВидТорговойПлощадки",            НастройкиУчетнойЗаписи.ВидМаркетплейса);
		ПараметрыЗаполнения.Вставить("УчетнаяЗапись",                  Параметры.УчетнаяЗапись);
		ПараметрыЗаполнения.Вставить("ВалютаУчета",                    НастройкиУчетнойЗаписи.ВалютаУчета);
		ПараметрыЗаполнения.Вставить("Организация",                    НастройкиУчетнойЗаписи.Организация);
		ПараметрыЗаполнения.Вставить("Партнер",                        НастройкиУчетнойЗаписи.Партнер);
		ПараметрыЗаполнения.Вставить("Контрагент",                     НастройкиУчетнойЗаписи.Контрагент);
		ПараметрыЗаполнения.Вставить("Соглашение",                     НастройкиУчетнойЗаписи.Соглашение);
		ПараметрыЗаполнения.Вставить("Договор",                        Неопределено);
		ПараметрыЗаполнения.Вставить("НомерВходящегоДокумента",        НомерВходящегоДокумента);
		ПараметрыЗаполнения.Вставить("ДатаВходящегоДокумента",         ДатаВходящегоДокумента);
		ПараметрыЗаполнения.Вставить("НачалоПериода",                  НачалоДня(НачалоПериода));
		ПараметрыЗаполнения.Вставить("КонецПериода",                   КонецДня(КонецПериода));
		ПараметрыЗаполнения.Вставить("УслугаПродажиЧерезКомиссионера", НастройкиУчетнойЗаписи.УслугаПродажиЧерезТорговуюПлощадку);
		ПараметрыЗаполнения.Вставить("КодОшибки",                      КодОшибки);
		ПараметрыЗаполнения.Вставить("СобытиеЖурналаРегистрации",      СобытиеЖурналаРегистрации);
		ПараметрыЗаполнения.Вставить("ЗагружатьНезаполненныеСтроки",   Параметры.ЗагружатьНезаполненныеСтроки);
		ПараметрыЗаполнения.Вставить("ПерезаписатьДокументы",          Истина);
		ПараметрыЗаполнения.Вставить("ОчиститьТабличныеЧасти",         Истина);
		ПараметрыЗаполнения.Вставить("ПараметрыОбработки",             Неопределено);
		ПараметрыЗаполнения.Вставить("ТекстЗапроса",                   ТекстЗапроса);
		
		Ошибка = ИнтеграцияСМаркетплейсамиСервер.ЗаписатьПродажиЧерезКомиссионера(
			Результат,
			ТаблицаСопоставленияДанных,
			ПараметрыЗаполнения,
			ПараметрыПрогресса);
		
		Если ЗначениеЗаполнено(Ошибка.КодОшибки) Тогда
			Результат.ОписаниеОшибки = Результат.ОписаниеОшибки 
				+ ?(ЗначениеЗаполнено(Результат.ОписаниеОшибки), Символы.ПС, "")
				+ Ошибка.ОписаниеОшибки;
		КонецЕсли;
		
		Если ТипЗнч(Ошибка.Детализация) = Тип("Массив") Тогда
			Результат.ОписаниеОшибки = Результат.ОписаниеОшибки 
				+ ?(ЗначениеЗаполнено(Результат.ОписаниеОшибки), Символы.ПС, "")
				+ СтрСоединить(Ошибка.Детализация, Символы.ПС);
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаПродажиСОтложеннымПереходомПраваСобственности(Знач ДокументыНеПомеченныеНаУдаление = Ложь)
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаДанных.НомерСтроки КАК НомерСтроки,
		|	ТаблицаДанных.НомерДокумента КАК НомерДокумента,
		|	ТаблицаДанных.ДатаДокумента КАК ДатаДокумента,
		|	ТаблицаДанных.ДатаПередачиВДоставку КАК ДатаПередачиВДоставку,
		|	ТаблицаДанных.ДатаДоставки КАК ДатаДоставки,
		|	ТаблицаДанных.ДатаНевыкупаВозврата КАК ДатаНевыкупаВозврата,
		|	ТаблицаДанных.ГруппаСкладов КАК СкладВШапке,
		|	ТаблицаДанных.СкладОтгрузки КАК Склад,
		|	ТаблицаДанных.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	ТаблицаДанных.ПредставлениеОбъектаМаркетплейса КАК ПредставлениеОбъектаМаркетплейса,
		|	ТаблицаДанных.РезультатСопоставленияСтроки КАК РезультатСопоставленияСтроки,
		|	ТаблицаДанных.Номенклатура КАК Номенклатура,
		|	ТаблицаДанных.ТипНоменклатуры КАК ТипНоменклатуры,
		|	ТаблицаДанных.НоменклатураЕдиницаИзмерения КАК НоменклатураЕдиницаИзмерения,
		|	ТаблицаДанных.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар,
		|	ТаблицаДанных.Характеристика КАК Характеристика,
		|	ТаблицаДанных.ХарактеристикиИспользуются КАК ХарактеристикиИспользуются,
		|	ТаблицаДанных.Упаковка КАК Упаковка,
		|	ТаблицаДанных.УпаковкаКоэффициент КАК УпаковкаКоэффициент,
		|	ТаблицаДанных.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ТаблицаДанных.КоличествоУпаковокВозврат КАК КоличествоУпаковокВозврат,
		|	ТаблицаДанных.Цена КАК Цена,
		|	ТаблицаДанных.ЦенаВозврат КАК ЦенаВозврат,
		|	ТаблицаДанных.РеализованоНаСумму КАК РеализованоНаСумму,
		|	ТаблицаДанных.РеализованоНаСуммуВозврат КАК РеализованоНаСуммуВозврат,
		|	ТаблицаДанных.ВыплатыПоМеханикамЛояльности КАК ВыплатыПоМеханикамЛояльности,
		|	ТаблицаДанных.ВыплатыПоМеханикамЛояльностиВозврат КАК ВыплатыПоМеханикамЛояльностиВозврат,
		|	ТаблицаДанных.БаллыЗаСкидки КАК БаллыЗаСкидки,
		|	ТаблицаДанных.БаллыЗаСкидкиВозврат КАК БаллыЗаСкидкиВозврат,
		|	ТаблицаДанных.БазоваяКомиссия КАК БазоваяКомиссия,
		|	ТаблицаДанных.БазоваяКомиссияВозврат КАК БазоваяКомиссияВозврат,
		|	ТаблицаДанных.Доплата КАК Доплата,
		|	ТаблицаДанных.ДоплатаВозврат КАК ДоплатаВозврат,
		|	ТаблицаДанных.НомерСчетаФактуры КАК НомерСчетаФактуры,
		|	ТаблицаДанных.ДатаСчетаФактуры КАК ДатаСчетаФактуры
		|ПОМЕСТИТЬ ВТ_ИсходнаяТаблицаДанных
		|ИЗ
		|	&ТаблицаДанных КАК ТаблицаДанных
		|ГДЕ
		|	ТаблицаДанных.СхемаДоставки = ЗНАЧЕНИЕ(Перечисление.СхемыРаботыТорговыхПлощадок.FBS)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	1 КАК ТипОперации,	// Переданные в доставку и доставленные
		|	ТаблицаДанных.НомерСтроки КАК НомерСтроки,
		|	ТаблицаДанных.НомерДокумента КАК НомерОтправления,
		|	НАЧАЛОПЕРИОДА(ТаблицаДанных.ДатаДокумента, ДЕНЬ) КАК ДатаОтправления,
		|	КОНЕЦПЕРИОДА(ТаблицаДанных.ДатаПередачиВДоставку, ДЕНЬ) КАК ДатаПередачиВДоставку,
		|	НАЧАЛОПЕРИОДА(ТаблицаДанных.ДатаДоставки, ДЕНЬ) КАК ДатаДоставки,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНевыкупаВозврата,
		|	КОНЕЦПЕРИОДА(ТаблицаДанных.ДатаПередачиВДоставку, ДЕНЬ) КАК ДатаДокумента,
		|	ТаблицаДанных.СкладВШапке КАК СкладВШапке,
		|	ТаблицаДанных.Склад КАК Склад,
		|	ТаблицаДанных.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	ТаблицаДанных.ПредставлениеОбъектаМаркетплейса КАК ПредставлениеТовара,
		|	ТаблицаДанных.РезультатСопоставленияСтроки КАК РезультатСопоставленияСтроки,
		|	ТаблицаДанных.Номенклатура КАК Номенклатура,
		|	ТаблицаДанных.ТипНоменклатуры КАК ТипНоменклатуры,
		|	ТаблицаДанных.НоменклатураЕдиницаИзмерения КАК НоменклатураЕдиницаИзмерения,
		|	ТаблицаДанных.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар,
		|	ТаблицаДанных.Характеристика КАК Характеристика,
		|	ТаблицаДанных.ХарактеристикиИспользуются КАК ХарактеристикиИспользуются,
		|	ТаблицаДанных.Упаковка КАК Упаковка,
		|	ТаблицаДанных.УпаковкаКоэффициент КАК УпаковкаКоэффициент,
		|	ТаблицаДанных.КоличествоУпаковок КАК Количество,
		|	ВЫБОР
		|		КОГДА ТаблицаДанных.КоличествоУпаковок = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВЫРАЗИТЬ((ТаблицаДанных.РеализованоНаСумму + ТаблицаДанных.Доплата + ТаблицаДанных.ВыплатыПоМеханикамЛояльности) / ТаблицаДанных.КоличествоУпаковок КАК ЧИСЛО(31, 2))
		|	КОНЕЦ КАК Цена,
		|	ТаблицаДанных.РеализованоНаСумму + ТаблицаДанных.Доплата + ТаблицаДанных.ВыплатыПоМеханикамЛояльности КАК Сумма,
		|	ТаблицаДанных.БаллыЗаСкидки КАК СуммаСкидки,
		|	ТаблицаДанных.НомерСчетаФактуры КАК НомерСчетаФактуры,
		|	ТаблицаДанных.ДатаСчетаФактуры КАК ДатаСчетаФактуры,
		|	ЛОЖЬ КАК РеализацияДругогоПериода
		|ПОМЕСТИТЬ ВТ_ТаблицаДанных
		|ИЗ
		|	ВТ_ИсходнаяТаблицаДанных КАК ТаблицаДанных
		|ГДЕ
		|	ТаблицаДанных.КоличествоУпаковок <> 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	4,	// Возврат товаров
		|	ТаблицаДанных.НомерСтроки + &КоличествоСтрок,
		|	ТаблицаДанных.НомерДокумента,
		|	НАЧАЛОПЕРИОДА(ТаблицаДанных.ДатаДокумента, ДЕНЬ),
		|	КОНЕЦПЕРИОДА(ТаблицаДанных.ДатаПередачиВДоставку, ДЕНЬ),
		|	НАЧАЛОПЕРИОДА(ТаблицаДанных.ДатаДоставки, ДЕНЬ),
		|	КОНЕЦПЕРИОДА(ТаблицаДанных.ДатаНевыкупаВозврата, ДЕНЬ),
		|	КОНЕЦПЕРИОДА(ТаблицаДанных.ДатаНевыкупаВозврата, ДЕНЬ),
		|	ТаблицаДанных.СкладВШапке,
		|	ТаблицаДанных.Склад,
		|	ТаблицаДанных.ИдентификаторПубликации,
		|	ТаблицаДанных.ПредставлениеОбъектаМаркетплейса,
		|	ТаблицаДанных.РезультатСопоставленияСтроки,
		|	ТаблицаДанных.Номенклатура,
		|	ТаблицаДанных.ТипНоменклатуры,
		|	ТаблицаДанных.НоменклатураЕдиницаИзмерения,
		|	ТаблицаДанных.ПрослеживаемыйТовар,
		|	ТаблицаДанных.Характеристика,
		|	ТаблицаДанных.ХарактеристикиИспользуются,
		|	ТаблицаДанных.Упаковка,
		|	ТаблицаДанных.УпаковкаКоэффициент,
		|	ТаблицаДанных.КоличествоУпаковокВозврат,
		|	ВЫБОР
		|		КОГДА ТаблицаДанных.КоличествоУпаковокВозврат = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВЫРАЗИТЬ((ТаблицаДанных.РеализованоНаСуммуВозврат + ТаблицаДанных.ДоплатаВозврат + ТаблицаДанных.ВыплатыПоМеханикамЛояльностиВозврат) / ТаблицаДанных.КоличествоУпаковокВозврат КАК ЧИСЛО(31, 2))
		|	КОНЕЦ,
		|	ТаблицаДанных.РеализованоНаСуммуВозврат + ТаблицаДанных.ДоплатаВозврат + ТаблицаДанных.ВыплатыПоМеханикамЛояльностиВозврат,
		|	ТаблицаДанных.БаллыЗаСкидкиВозврат,
		|	ТаблицаДанных.НомерСчетаФактуры,
		|	ТаблицаДанных.ДатаСчетаФактуры,
		|	ТаблицаДанных.КоличествоУпаковок = 0
		|ИЗ
		|	ВТ_ИсходнаяТаблицаДанных КАК ТаблицаДанных
		|ГДЕ
		|	ТаблицаДанных.КоличествоУпаковокВозврат <> 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерОтправления,
		|	ДатаОтправления,
		|	ТипОперации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ИсходнаяТаблицаДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(МИНИМУМ(ТаблицаДанных.ДатаДокумента), МЕСЯЦ) КАК НачалоПериода
		|ПОМЕСТИТЬ ВТ_Периоды
		|ИЗ
		|	ВТ_ТаблицаДанных КАК ТаблицаДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументРеализацияТоваровУслуг.Ссылка КАК Ссылка,
		|	ДокументРеализацияТоваровУслуг.ЗаказКлиента КАК ЗаказКлиента,
		|	ДокументРеализацияТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
		|	ДокументРеализацияТоваровУслуг.Основание КАК Основание,
		|	ДокументРеализацияТоваровУслуг.ОснованиеНомер КАК ОснованиеНомер,
		|	НАЧАЛОПЕРИОДА(ДокументРеализацияТоваровУслуг.ОснованиеДата, ДЕНЬ) КАК ОснованиеДата
		|ПОМЕСТИТЬ ВТ_РеализацияТоваровУслуг
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК ДокументРеализацияТоваровУслуг
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Периоды КАК Периоды
		|		ПО ДокументРеализацияТоваровУслуг.Дата >= Периоды.НачалоПериода
		|ГДЕ
		|	ДокументРеализацияТоваровУслуг.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности)
		|	И ДокументРеализацияТоваровУслуг.Организация = &Организация
		|	И НЕ ДокументРеализацияТоваровУслуг.ПометкаУдаления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОснованиеНомер,
		|	ОснованиеДата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументКорректировкаРеализации.Ссылка КАК Ссылка,         
		|	ДокументКорректировкаРеализации.Комментарий КАК Комментарий,
		|	ДокументКорректировкаРеализации.Основание КАК Основание,
		|	ДокументКорректировкаРеализации.ОснованиеНомер КАК ОснованиеНомер,
		|	НАЧАЛОПЕРИОДА(ДокументКорректировкаРеализации.ОснованиеДата, ДЕНЬ) КАК ОснованиеДата
		|ПОМЕСТИТЬ ВТ_КорректировкаРеализации
		|ИЗ
		|	Документ.КорректировкаРеализации КАК ДокументКорректировкаРеализации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Периоды КАК Периоды
		|		ПО ДокументКорректировкаРеализации.Дата >= Периоды.НачалоПериода
		|ГДЕ
		|	ДокументКорректировкаРеализации.Организация = &Организация
		|	И НЕ ДокументКорректировкаРеализации.ПометкаУдаления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОснованиеНомер,
		|	ОснованиеДата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Периоды
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АВТОНОМЕРЗАПИСИ() КАК Индекс,
		|	ТаблицаДанных.ТипОперации КАК ТипОперации,
		|	ТаблицаДанных.НомерСтроки КАК НомерСтроки,
		|	ТаблицаДанных.НомерОтправления КАК НомерОтправления,
		|	ТаблицаДанных.ДатаОтправления КАК ДатаОтправления,
		|	ТаблицаДанных.ДатаПередачиВДоставку КАК ДатаПередачиВДоставку,
		|	ТаблицаДанных.ДатаДоставки КАК ДатаДоставки,
		|	ТаблицаДанных.ДатаНевыкупаВозврата КАК ДатаНевыкупаВозврата,
		|	ТаблицаДанных.ДатаДокумента КАК ДатаДокумента,
		|	ТаблицаДанных.СкладВШапке КАК СкладВШапке,
		|	ТаблицаДанных.Склад КАК Склад,
		|	ТаблицаДанных.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	ТаблицаДанных.ПредставлениеТовара КАК ПредставлениеТовара,
		|	ТаблицаДанных.РезультатСопоставленияСтроки КАК РезультатСопоставленияСтроки,
		|	ТаблицаДанных.Номенклатура КАК Номенклатура,
		|	ТаблицаДанных.ТипНоменклатуры КАК ТипНоменклатуры,
		|	ТаблицаДанных.НоменклатураЕдиницаИзмерения КАК НоменклатураЕдиницаИзмерения,
		|	ТаблицаДанных.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар,
		|	ТаблицаДанных.Характеристика КАК Характеристика,
		|	ТаблицаДанных.ХарактеристикиИспользуются КАК ХарактеристикиИспользуются,
		|	ТаблицаДанных.Упаковка КАК Упаковка,
		|	ТаблицаДанных.УпаковкаКоэффициент КАК УпаковкаКоэффициент,
		|	ТаблицаДанных.Количество КАК Количество,
		|	ТаблицаДанных.Цена КАК Цена,
		|	ТаблицаДанных.Сумма КАК Сумма,
		|	ТаблицаДанных.СуммаСкидки КАК СуммаСкидки,
		|	ТаблицаДанных.НомерСчетаФактуры КАК НомерСчетаФактуры,
		|	ТаблицаДанных.ДатаСчетаФактуры КАК ДатаСчетаФактуры,
		|	ЗаказыТорговыхПлощадок.Заказ КАК ЗаказКлиентаСсылка,
		|	ВЫБОР
		|		КОГДА ЗаказыТорговыхПлощадок.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг
		|			ТОГДА ЗаказыТорговыхПлощадок.ДокументОтгрузки
		|		ИНАЧЕ ЕСТЬNULL(РеализацияТоваровУслуг.Ссылка, РеализацияТоваровУслугОснование.Ссылка)
		|	КОНЕЦ КАК РеализацияТоваровУслугСсылка,
		|	ВЫБОР
		|		КОГДА ЗаказыТорговыхПлощадок.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг
		|			ТОГДА ЗаказыТорговыхПлощадок.ДокументОтгрузки.СуммаДокумента
		|		ИНАЧЕ ЕСТЬNULL(РеализацияТоваровУслуг.СуммаДокумента, ЕСТЬNULL(РеализацияТоваровУслугОснование.СуммаДокумента, 0))
		|	КОНЕЦ КАК РеализацияТоваровУслугСумма,
		|	ТаблицаДанных.РеализацияДругогоПериода КАК РеализацияДругогоПериода,
		|	КорректировкаРеализации.Ссылка КАК КорректировкаРеализацииСсылка,
		|	КорректировкаРеализацииПоСумме.Ссылка КАК КорректировкаРеализацииПоСумме
		|ПОМЕСТИТЬ ВТ_ИтоговаяТаблицаДанных
		|ИЗ
		|	ВТ_ТаблицаДанных КАК ТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ПО (РеализацияТоваровУслуг.ОснованиеНомер = ТаблицаДанных.НомерОтправления)
		|			И (РеализацияТоваровУслуг.ОснованиеДата = ТаблицаДанных.ДатаОтправления)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КорректировкаРеализации КАК КорректировкаРеализации
		|		ПО (КорректировкаРеализации.ОснованиеНомер = ТаблицаДанных.НомерОтправления)
		|			И (КорректировкаРеализации.ОснованиеДата = ТаблицаДанных.ДатаОтправления)
		|			И (ТаблицаДанных.ТипОперации = 4)
		|			И (КорректировкаРеализации.Комментарий ПОДОБНО &КомментарийНевыкупТоваров
		|					ИЛИ КорректировкаРеализации.Комментарий ПОДОБНО &КомментарийВозвратТоваров)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КорректировкаРеализации КАК КорректировкаРеализацииПоСумме
		|		ПО (КорректировкаРеализацииПоСумме.ОснованиеНомер = ТаблицаДанных.НомерОтправления)
		|			И (КорректировкаРеализацииПоСумме.ОснованиеДата = ТаблицаДанных.ДатаОтправления)
		|			И (ТаблицаДанных.ТипОперации = 1)
		|			И (КорректировкаРеализацииПоСумме.Комментарий ПОДОБНО &КомментарийКорректировка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаказыТорговыхПлощадок КАК ЗаказыТорговыхПлощадок
		|		ПО ТаблицаДанных.НомерОтправления = ЗаказыТорговыхПлощадок.НомерОтправления
		|			И (ЗаказыТорговыхПлощадок.УчетнаяЗапись = &УчетнаяЗапись)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РеализацияТоваровУслуг КАК РеализацияТоваровУслугОснование
		|		ПО (РеализацияТоваровУслугОснование.ОснованиеНомер = """")
		|			И (РеализацияТоваровУслугОснование.ОснованиеДата = ДАТАВРЕМЯ(1, 1, 1))
		|			И (РеализацияТоваровУслугОснование.ЗаказКлиента = ЗаказыТорговыхПлощадок.Заказ)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ТаблицаДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_РеализацияТоваровУслуг
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_КорректировкаРеализации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИтоговаяТаблицаДанных.ТипОперации КАК ТипОперации,
		|	ИтоговаяТаблицаДанных.НомерСтроки КАК НомерСтроки,
		|	ИтоговаяТаблицаДанных.НомерОтправления КАК НомерОтправления,
		|	ИтоговаяТаблицаДанных.ДатаОтправления КАК ДатаОтправления,
		|	ИтоговаяТаблицаДанных.ДатаПередачиВДоставку КАК ДатаПередачиВДоставку,
		|	ИтоговаяТаблицаДанных.ДатаДоставки КАК ДатаДоставки,
		|	ИтоговаяТаблицаДанных.ДатаНевыкупаВозврата КАК ДатаНевыкупаВозврата,
		|	ИтоговаяТаблицаДанных.ДатаДокумента КАК ДатаДокумента,
		|	ИтоговаяТаблицаДанных.СкладВШапке КАК СкладВШапке,
		|	ИтоговаяТаблицаДанных.Склад КАК Склад,
		|	ИтоговаяТаблицаДанных.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	ИтоговаяТаблицаДанных.ПредставлениеТовара КАК ПредставлениеТовара,
		|	ИтоговаяТаблицаДанных.РезультатСопоставленияСтроки КАК РезультатСопоставленияСтроки,
		|	ИтоговаяТаблицаДанных.Номенклатура КАК Номенклатура,
		|	ИтоговаяТаблицаДанных.ТипНоменклатуры КАК ТипНоменклатуры,
		|	ИтоговаяТаблицаДанных.НоменклатураЕдиницаИзмерения КАК НоменклатураЕдиницаИзмерения,
		|	ИтоговаяТаблицаДанных.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар,
		|	ИтоговаяТаблицаДанных.Характеристика КАК Характеристика,
		|	ИтоговаяТаблицаДанных.ХарактеристикиИспользуются КАК ХарактеристикиИспользуются,
		|	ИтоговаяТаблицаДанных.Упаковка КАК Упаковка,
		|	ИтоговаяТаблицаДанных.УпаковкаКоэффициент КАК УпаковкаКоэффициент,
		|	ИтоговаяТаблицаДанных.Количество КАК Количество,
		|	ИтоговаяТаблицаДанных.Цена КАК Цена,
		|	ИтоговаяТаблицаДанных.Сумма КАК Сумма,
		|	ИтоговаяТаблицаДанных.СуммаСкидки КАК СуммаСкидки,
		|	ИтоговаяТаблицаДанных.НомерСчетаФактуры КАК НомерСчетаФактуры,
		|	ИтоговаяТаблицаДанных.ДатаСчетаФактуры КАК ДатаСчетаФактуры,
		|	ИтоговаяТаблицаДанных.ЗаказКлиентаСсылка КАК ЗаказКлиентаСсылка,
		|	ИтоговаяТаблицаДанных.РеализацияТоваровУслугСсылка КАК РеализацияТоваровУслугСсылка,
		|	ИтоговаяТаблицаДанных.РеализацияТоваровУслугСумма КАК РеализацияТоваровУслугСумма,
		|	ИтоговаяТаблицаДанных.РеализацияДругогоПериода КАК РеализацияДругогоПериода,
		|	ИтоговаяТаблицаДанных.КорректировкаРеализацииСсылка КАК КорректировкаРеализацииСсылка,
		|	КорректировкаРеализацииПоСумме.Ссылка КАК КорректировкаРеализацииПоСумме
		|ИЗ
		|	ВТ_ИтоговаяТаблицаДанных КАК ИтоговаяТаблицаДанных
		|ГДЕ
		|	(ИтоговаяТаблицаДанных.Индекс, ИСТИНА) В
		|			(ВЫБРАТЬ
		|				МИНИМУМ(ТаблицаДанных.Индекс),
		|				ИСТИНА
		|			ИЗ
		|				ВТ_ИтоговаяТаблицаДанных КАК ТаблицаДанных
		|			ГДЕ
		|				ТаблицаДанных.НомерСтроки = ИтоговаяТаблицаДанных.НомерСтроки)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаДокумента,
		|	ТипОперации,
		|	НомерСтроки
		|ИТОГИ
		|	СУММА(Сумма),
		|	МАКСИМУМ(ЗаказКлиентаСсылка),
		|	МАКСИМУМ(РеализацияТоваровУслугСсылка),
		|	МАКСИМУМ(РеализацияТоваровУслугСумма),
		|	МАКСИМУМ(КорректировкаРеализацииСсылка),
		|	МАКСИМУМ(КорректировкаРеализацииПоСумме)
		|ПО
		|	НомерОтправления,
		|	ДатаДокумента,
		|	ДатаДоставки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ИтоговаяТаблицаДанных";
	
	Если Не ДокументыНеПомеченныеНаУдаление Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И НЕ ДокументРеализацияТоваровУслуг.ПометкаУдаления", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И НЕ ДокументКорректировкаРеализации.ПометкаУдаления", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВзаимозачетыЗадолженности(Знач ДокументыНеПомеченныеНаУдаление = Ложь)
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.ЭтоВозврат КАК ЭтоВозврат,
		|	ВложенныйЗапрос.ДатаДокумента КАК ДатаДокумента,
		|	ВложенныйЗапрос.ОбъектРасчетов КАК ОбъектРасчетов,
		|	ВложенныйЗапрос.Контрагент КАК Контрагент,
		|	СУММА(ВложенныйЗапрос.Сумма) КАК Сумма
		|ПОМЕСТИТЬ ВТ_ОбъектыРасчетов
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЛОЖЬ КАК ЭтоВозврат,
		|		КОНЕЦПЕРИОДА(ДокументРеализацияТоваровУслуг.ДатаПереходаПраваСобственности, МЕСЯЦ) КАК ДатаДокумента,
		|		ДокументРеализацияТоваровУслугТовары.ОбъектРасчетов КАК ОбъектРасчетов,
		|		ДокументРеализацияТоваровУслуг.Контрагент КАК Контрагент,
		|		ДокументРеализацияТоваровУслугТовары.СуммаСНДС КАК Сумма
		|	ИЗ
		|		Документ.РеализацияТоваровУслуг КАК ДокументРеализацияТоваровУслуг
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК ДокументРеализацияТоваровУслугТовары
		|			ПО (ДокументРеализацияТоваровУслугТовары.Ссылка = ДокументРеализацияТоваровУслуг.Ссылка)
		|	ГДЕ
		|		ДокументРеализацияТоваровУслуг.Ссылка В(&ЗагруженныеОбъекты)
		|		И ДокументРеализацияТоваровУслуг.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности)
		|		И ДокументРеализацияТоваровУслуг.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.Отгружено)
		|		И НЕ ДокументРеализацияТоваровУслуг.ПометкаУдаления
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА ДокументКорректировкаРеализации.Комментарий ПОДОБНО &КомментарийКорректировка
		|				ТОГДА ЛОЖЬ
		|			КОГДА КОНЕЦПЕРИОДА(ДокументРеализацияТоваровУслуг.ДатаПереходаПраваСобственности, МЕСЯЦ) = КОНЕЦПЕРИОДА(ДокументКорректировкаРеализации.Дата, МЕСЯЦ)
		|					И ДокументКорректировкаРеализации.Комментарий ПОДОБНО &КомментарийНевыкупТоваров
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ,
		|		КОНЕЦПЕРИОДА(ДокументКорректировкаРеализации.Дата, МЕСЯЦ),
		|		ДокументКорректировкаРеализацииРасхождения.ОбъектРасчетов,
		|		ДокументКорректировкаРеализации.Контрагент,
		|		ДокументКорректировкаРеализацииРасхождения.СуммаСНДС
		|	ИЗ
		|		Документ.КорректировкаРеализации КАК ДокументКорректировкаРеализации
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации.Расхождения КАК ДокументКорректировкаРеализацииРасхождения
		|			ПО (ДокументКорректировкаРеализацииРасхождения.Ссылка = ДокументКорректировкаРеализации.Ссылка)
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК ДокументРеализацияТоваровУслуг
		|			ПО (ДокументРеализацияТоваровУслуг.Ссылка = ДокументКорректировкаРеализации.ДокументОснование)
		|	ГДЕ
		|		ДокументКорректировкаРеализации.Ссылка В(&ЗагруженныеОбъекты)
		|		И НЕ ДокументКорректировкаРеализации.ПометкаУдаления
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЛОЖЬ,
		|		КОНЕЦПЕРИОДА(ДокументРеализацияТоваровУслуг.ДатаПереходаПраваСобственности, МЕСЯЦ),
		|		ДокументРеализацияТоваровУслугТовары.ОбъектРасчетов,
		|		ДокументРеализацияТоваровУслуг.Контрагент,
		|		-ДокументРеализацияТоваровУслугТовары.СуммаСНДС
		|	ИЗ
		|		Документ.КорректировкаРеализации КАК ДокументКорректировкаРеализации
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК ДокументРеализацияТоваровУслуг
		|			ПО (ДокументРеализацияТоваровУслуг.Ссылка = ДокументКорректировкаРеализации.ДокументОснование)
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК ДокументРеализацияТоваровУслугТовары
		|			ПО (ДокументРеализацияТоваровУслугТовары.Ссылка = ДокументРеализацияТоваровУслуг.Ссылка)
		|	ГДЕ
		|		ДокументКорректировкаРеализации.Ссылка В(&ЗагруженныеОбъекты)
		|		И НЕ ДокументКорректировкаРеализации.ПометкаУдаления
		|		И ДокументРеализацияТоваровУслуг.Ссылка В(&ИсключаемыеОбъекты)
		|		И ДокументРеализацияТоваровУслуг.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.Отгружено)
		|		И НЕ ДокументРеализацияТоваровУслуг.ПометкаУдаления) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.ЭтоВозврат,
		|	ВложенныйЗапрос.ДатаДокумента,
		|	ВложенныйЗапрос.ОбъектРасчетов,
		|	ВложенныйЗапрос.Контрагент
		|
		|ИМЕЮЩИЕ
		|	СУММА(ВложенныйЗапрос.Сумма) <> 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДатаДокумента,
		|	ЭтоВозврат
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументВзаимозачетЗадолженности.Ссылка КАК Ссылка,
		|	ДокументВзаимозачетЗадолженности.Дата КАК Дата,
		|	ДокументВзаимозачетЗадолженности.КонтрагентДебитор КАК КонтрагентДебитор,
		|	ДокументВзаимозачетЗадолженности.КонтрагентКредитор КАК КонтрагентКредитор
		|ПОМЕСТИТЬ ВТ_ВзаимозачетЗадолженности
		|ИЗ
		|	ВТ_ОбъектыРасчетов КАК ОбъектыРасчетов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВзаимозачетЗадолженности КАК ДокументВзаимозачетЗадолженности
		|		ПО (ДокументВзаимозачетЗадолженности.Дата = ОбъектыРасчетов.ДатаДокумента)
		|ГДЕ
		|	ДокументВзаимозачетЗадолженности.Организация = &Организация
		|	И ДокументВзаимозачетЗадолженности.Комментарий ПОДОБНО &КомментарийОформлениеВзаимозачета
		|	И НЕ ДокументВзаимозачетЗадолженности.ПометкаУдаления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АВТОНОМЕРЗАПИСИ() КАК Индекс,
		|	ОбъектыРасчетов.ЭтоВозврат КАК ЭтоВозврат,
		|	ОбъектыРасчетов.ДатаДокумента КАК ДатаДокумента,
		|	ОбъектыРасчетов.ОбъектРасчетов КАК ОбъектРасчетов,
		|	СправочникОбъектыРасчетов.Организация КАК Организация,
		|	СправочникОбъектыРасчетов.Партнер КАК Партнер,
		|	ЕСТЬNULL(СправочникОбъектыРасчетов.Контрагент, ОбъектыРасчетов.Контрагент) КАК Контрагент,
		|	СправочникОбъектыРасчетов.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ВЫБОР
		|		КОГДА ОбъектыРасчетов.ЭтоВозврат
		|			ТОГДА -1
		|		ИНАЧЕ 1
		|	КОНЕЦ * ОбъектыРасчетов.Сумма КАК Сумма,
		|	ВЫБОР
		|		КОГДА ОбъектыРасчетов.ЭтоВозврат
		|			ТОГДА -1
		|		ИНАЧЕ 1
		|	КОНЕЦ * ОбъектыРасчетов.Сумма КАК СуммаВзаиморасчетов,
		|	ВзаимозачетЗадолженности.Ссылка КАК ВзаимозачетЗадолженностиСсылка
		|ПОМЕСТИТЬ ВТ_Результат
		|ИЗ
		|	ВТ_ОбъектыРасчетов КАК ОбъектыРасчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК СправочникОбъектыРасчетов
		|		ПО (СправочникОбъектыРасчетов.Ссылка = ОбъектыРасчетов.ОбъектРасчетов)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВзаимозачетЗадолженности КАК ВзаимозачетЗадолженности
		|		ПО (ВзаимозачетЗадолженности.Дата = ОбъектыРасчетов.ДатаДокумента)
		|			И (ВЫБОР
		|				КОГДА ОбъектыРасчетов.ЭтоВозврат
		|					ТОГДА ВзаимозачетЗадолженности.КонтрагентДебитор
		|				ИНАЧЕ ВзаимозачетЗадолженности.КонтрагентКредитор
		|			КОНЕЦ = &Контрагент)
		|			И (ВЫБОР
		|				КОГДА ОбъектыРасчетов.ЭтоВозврат
		|					ТОГДА ВзаимозачетЗадолженности.КонтрагентКредитор
		|				ИНАЧЕ ВзаимозачетЗадолженности.КонтрагентДебитор
		|			КОНЕЦ = ЕСТЬNULL(СправочникОбъектыРасчетов.Контрагент, ОбъектыРасчетов.Контрагент))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЭтоВозврат,
		|	ДатаДокумента,
		|	ОбъектРасчетов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ОбъектыРасчетов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Результат.ЭтоВозврат КАК ЭтоВозврат,
		|	Результат.ДатаДокумента КАК ДатаДокумента,
		|	Результат.ОбъектРасчетов КАК ОбъектРасчетов,
		|	Результат.Организация КАК Организация,
		|	Результат.Партнер КАК Партнер,
		|	Результат.Контрагент КАК Контрагент,
		|	Результат.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	Результат.Сумма КАК Сумма,
		|	Результат.Сумма КАК СуммаВзаиморасчетов,
		|	&ТипРасчетов КАК ТипРасчетов,
		|	Результат.ВзаимозачетЗадолженностиСсылка КАК ВзаимозачетЗадолженностиСсылка
		|ИЗ
		|	ВТ_Результат КАК Результат
		|ГДЕ
		|	(Результат.Индекс, ИСТИНА) В
		|			(ВЫБРАТЬ
		|				МИНИМУМ(ТаблицаДанных.Индекс),
		|				ИСТИНА
		|			ИЗ
		|				ВТ_Результат КАК ТаблицаДанных
		|			ГДЕ
		|				ТаблицаДанных.ЭтоВозврат = Результат.ЭтоВозврат
		|				И ТаблицаДанных.ДатаДокумента = Результат.ДатаДокумента
		|				И ТаблицаДанных.ОбъектРасчетов = Результат.ОбъектРасчетов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаДокумента
		|ИТОГИ ПО
		|	ДатаДокумента,
		|	Контрагент,
		|	ЭтоВозврат
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Результат";
	
	Если Не ДокументыНеПомеченныеНаУдаление Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И НЕ ДокументВзаимозачетЗадолженности.ПометкаУдаления", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПродажиЧерезКомиссионера(Знач ДокументыНеПомеченныеНаУдаление = Ложь)
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаДанных.НомерСтроки КАК НомерСтроки,
		|	ТаблицаДанных.НомерДокумента КАК НомерДокумента,
		|	ТаблицаДанных.ДатаДокумента КАК ДатаДокумента,
		|	ТаблицаДанных.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	ТаблицаДанных.ПредставлениеОбъектаМаркетплейса КАК ПредставлениеОбъектаМаркетплейса,
		|	ТаблицаДанных.РезультатСопоставленияСтроки КАК РезультатСопоставленияСтроки,
		|	ТаблицаДанных.Номенклатура КАК Номенклатура,
		|	ТаблицаДанных.ТипНоменклатуры КАК ТипНоменклатуры,
		|	ТаблицаДанных.НоменклатураЕдиницаИзмерения КАК НоменклатураЕдиницаИзмерения,
		|	ТаблицаДанных.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар,
		|	ТаблицаДанных.Характеристика КАК Характеристика,
		|	ТаблицаДанных.ХарактеристикиИспользуются КАК ХарактеристикиИспользуются,
		|	ТаблицаДанных.Упаковка КАК Упаковка,
		|	ТаблицаДанных.УпаковкаКоэффициент КАК УпаковкаКоэффициент,
		|	ТаблицаДанных.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ТаблицаДанных.КоличествоУпаковокВозврат КАК КоличествоУпаковокВозврат,
		|	ТаблицаДанных.Цена КАК Цена,
		|	ТаблицаДанных.ЦенаВозврат КАК ЦенаВозврат,
		|	ТаблицаДанных.ЦенаПродажи КАК ЦенаПродажи,
		|	ТаблицаДанных.ЦенаПродажиВозврат КАК ЦенаПродажиВозврат,
		|	ТаблицаДанных.Сумма КАК Сумма,
		|	ТаблицаДанных.СуммаВозврат КАК СуммаВозврат,
		|	ТаблицаДанных.СуммаПродажи КАК СуммаПродажи,
		|	ТаблицаДанных.СуммаПродажиВозврат КАК СуммаПродажиВозврат,
		|	ТаблицаДанных.СуммаВознаграждения КАК СуммаВознаграждения,
		|	ТаблицаДанных.СуммаВознагражденияВозврат КАК СуммаВознагражденияВозврат,
		|	ТаблицаДанных.ВыплатыПоМеханикамЛояльности КАК ВыплатыПоМеханикамЛояльности,
		|	ТаблицаДанных.ВыплатыПоМеханикамЛояльностиВозврат КАК ВыплатыПоМеханикамЛояльностиВозврат,
		|	ТаблицаДанных.БаллыЗаСкидки КАК БаллыЗаСкидки,
		|	ТаблицаДанных.БаллыЗаСкидкиВозврат КАК БаллыЗаСкидкиВозврат,
		|	ТаблицаДанных.БазоваяКомиссия КАК БазоваяКомиссия,
		|	ТаблицаДанных.БазоваяКомиссияВозврат КАК БазоваяКомиссияВозврат,
		|	ТаблицаДанных.НомерСчетаФактуры КАК НомерСчетаФактуры,
		|	ТаблицаДанных.ДатаСчетаФактуры КАК ДатаСчетаФактуры,
		|	ТаблицаДанных.ДоговорДляОтраженияПродажи КАК ДоговорДляОтраженияПродажи
		|ПОМЕСТИТЬ ВТ_ИсходнаяТаблицаДанных
		|ИЗ
		|	&ТаблицаДанных КАК ТаблицаДанных
		|ГДЕ
		|	&СхемаДоставки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	2 КАК ТипОперации,	// Доставленные товары
		|	ТаблицаДанных.НомерСтроки КАК НомерСтроки,
		|	ТаблицаДанных.НомерДокумента КАК НомерОтправления,
		|	НАЧАЛОПЕРИОДА(ТаблицаДанных.ДатаДокумента, ДЕНЬ) КАК ДатаОтправления,
		|	КОНЕЦПЕРИОДА(&КонецПериода, ДЕНЬ) КАК ДатаДокумента,
		|	НАЧАЛОПЕРИОДА(&НачалоПериода, ДЕНЬ) КАК НачалоПериода,
		|	КОНЕЦПЕРИОДА(&КонецПериода, ДЕНЬ) КАК КонецПериода,
		|	ТаблицаДанных.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	ТаблицаДанных.ПредставлениеОбъектаМаркетплейса КАК ПредставлениеТовара,
		|	ТаблицаДанных.РезультатСопоставленияСтроки КАК РезультатСопоставленияСтроки,
		|	ТаблицаДанных.Номенклатура КАК Номенклатура,
		|	ТаблицаДанных.ТипНоменклатуры КАК ТипНоменклатуры,
		|	ТаблицаДанных.НоменклатураЕдиницаИзмерения КАК НоменклатураЕдиницаИзмерения,
		|	ТаблицаДанных.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар,
		|	ТаблицаДанных.Характеристика КАК Характеристика,
		|	ТаблицаДанных.ХарактеристикиИспользуются КАК ХарактеристикиИспользуются,
		|	ТаблицаДанных.Упаковка КАК Упаковка,
		|	ТаблицаДанных.УпаковкаКоэффициент КАК УпаковкаКоэффициент,
		|	ТаблицаДанных.КоличествоУпаковок КАК Количество,
		|	ТаблицаДанных.Цена КАК Цена,
		|	ТаблицаДанных.ЦенаПродажи КАК ЦенаПродажи,
		|	ТаблицаДанных.Сумма КАК Сумма,
		|	ТаблицаДанных.СуммаПродажи КАК СуммаПродажи,
		|	ТаблицаДанных.СуммаВознаграждения КАК СуммаВознаграждения,
		|	ТаблицаДанных.ВыплатыПоМеханикамЛояльности КАК ВыплатыПоМеханикамЛояльности,
		|	ТаблицаДанных.БаллыЗаСкидки КАК БаллыЗаСкидки,
		|	ТаблицаДанных.БазоваяКомиссия КАК БазоваяКомиссия,
		|	ТаблицаДанных.НомерСчетаФактуры КАК НомерСчетаФактуры,
		|	ТаблицаДанных.ДатаСчетаФактуры КАК ДатаСчетаФактуры,
		|	ТаблицаДанных.ДоговорДляОтраженияПродажи КАК Договор
		|ПОМЕСТИТЬ ВТ_ТаблицаДанных
		|ИЗ
		|	ВТ_ИсходнаяТаблицаДанных КАК ТаблицаДанных
		|ГДЕ
		|	ТаблицаДанных.КоличествоУпаковок <> 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	4,	// Возврат товаров
		|	ТаблицаДанных.НомерСтроки + &КоличествоСтрок,
		|	ТаблицаДанных.НомерДокумента,
		|	НАЧАЛОПЕРИОДА(ТаблицаДанных.ДатаДокумента, ДЕНЬ),
		|	КОНЕЦПЕРИОДА(&КонецПериода, ДЕНЬ),
		|	НАЧАЛОПЕРИОДА(&НачалоПериода, ДЕНЬ),
		|	КОНЕЦПЕРИОДА(&КонецПериода, ДЕНЬ),
		|	ТаблицаДанных.ИдентификаторПубликации,
		|	ТаблицаДанных.ПредставлениеОбъектаМаркетплейса,
		|	ТаблицаДанных.РезультатСопоставленияСтроки,
		|	ТаблицаДанных.Номенклатура,
		|	ТаблицаДанных.ТипНоменклатуры,
		|	ТаблицаДанных.НоменклатураЕдиницаИзмерения,
		|	ТаблицаДанных.ПрослеживаемыйТовар,
		|	ТаблицаДанных.Характеристика,
		|	ТаблицаДанных.ХарактеристикиИспользуются,
		|	ТаблицаДанных.Упаковка,
		|	ТаблицаДанных.УпаковкаКоэффициент,
		|	-ТаблицаДанных.КоличествоУпаковокВозврат,
		|	ТаблицаДанных.ЦенаВозврат,
		|	ТаблицаДанных.ЦенаПродажиВозврат,
		|	-ТаблицаДанных.СуммаВозврат,
		|	-ТаблицаДанных.СуммаПродажиВозврат,
		|	-ТаблицаДанных.СуммаВознагражденияВозврат,
		|	-ТаблицаДанных.ВыплатыПоМеханикамЛояльностиВозврат,
		|	-ТаблицаДанных.БаллыЗаСкидкиВозврат,
		|	-ТаблицаДанных.БазоваяКомиссияВозврат,
		|	ТаблицаДанных.НомерСчетаФактуры,
		|	ТаблицаДанных.ДатаСчетаФактуры,
		|	ТаблицаДанных.ДоговорДляОтраженияПродажи
		|ИЗ
		|	ВТ_ИсходнаяТаблицаДанных КАК ТаблицаДанных
		|ГДЕ
		|	ТаблицаДанных.КоличествоУпаковокВозврат <> 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДатаДокумента,
		|	НачалоПериода,
		|	КонецПериода,
		|	Договор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ИсходнаяТаблицаДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументОтчетКомиссионера.Ссылка КАК Ссылка,
		|	КОНЕЦПЕРИОДА(ДокументОтчетКомиссионера.Дата, ДЕНЬ) КАК Дата,
		|	НАЧАЛОПЕРИОДА(ДокументОтчетКомиссионера.НачалоПериода, МЕСЯЦ) КАК НачалоПериода,
		|	КОНЕЦПЕРИОДА(ДокументОтчетКомиссионера.КонецПериода, МЕСЯЦ) КАК КонецПериода,
		|	ДокументОтчетКомиссионера.Договор КАК Договор
		|ПОМЕСТИТЬ ВТ_ОтчетКомиссионера
		|ИЗ
		|	Документ.ОтчетКомиссионера КАК ДокументОтчетКомиссионера
		|ГДЕ
		|	ДокументОтчетКомиссионера.Организация = &Организация
		|	И ДокументОтчетКомиссионера.Партнер = &Партнер
		|	И ДокументОтчетКомиссионера.Контрагент = &Контрагент
		|	И ДокументОтчетКомиссионера.Соглашение = &Соглашение
		|	И ДокументОтчетКомиссионера.Дата >= &НачалоПериода
		|	И ДокументОтчетКомиссионера.НомерВходящегоДокумента = &НомерВходящегоДокумента
		|	И НЕ ДокументОтчетКомиссионера.ПометкаУдаления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Дата,
		|	НачалоПериода,
		|	КонецПериода,
		|	Договор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АВТОНОМЕРЗАПИСИ() КАК Индекс,
		|	ТаблицаДанных.ТипОперации КАК ТипОперации,
		|	ТаблицаДанных.НомерСтроки КАК НомерСтроки,
		|	ТаблицаДанных.НомерОтправления КАК НомерОтправления,
		|	ТаблицаДанных.ДатаОтправления КАК ДатаОтправления,
		|	ТаблицаДанных.ДатаДокумента КАК ДатаДокумента,
		|	ТаблицаДанных.НачалоПериода КАК НачалоПериода,
		|	ТаблицаДанных.КонецПериода КАК КонецПериода,
		|	ТаблицаДанных.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	ТаблицаДанных.ПредставлениеТовара КАК ПредставлениеТовара,
		|	ТаблицаДанных.РезультатСопоставленияСтроки КАК РезультатСопоставленияСтроки,
		|	ТаблицаДанных.Номенклатура КАК Номенклатура,
		|	ТаблицаДанных.ТипНоменклатуры КАК ТипНоменклатуры,
		|	ТаблицаДанных.НоменклатураЕдиницаИзмерения КАК НоменклатураЕдиницаИзмерения,
		|	ТаблицаДанных.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар,
		|	ТаблицаДанных.Характеристика КАК Характеристика,
		|	ТаблицаДанных.ХарактеристикиИспользуются КАК ХарактеристикиИспользуются,
		|	ТаблицаДанных.Упаковка КАК Упаковка,
		|	ТаблицаДанных.УпаковкаКоэффициент КАК УпаковкаКоэффициент,
		|	ТаблицаДанных.Количество КАК Количество,
		|	ТаблицаДанных.Цена КАК Цена,
		|	ТаблицаДанных.ЦенаПродажи КАК ЦенаПродажи,
		|	ТаблицаДанных.Сумма КАК Сумма,
		|	ТаблицаДанных.СуммаПродажи КАК СуммаПродажи,
		|	ТаблицаДанных.СуммаВознаграждения КАК СуммаВознаграждения,
		|	ТаблицаДанных.ВыплатыПоМеханикамЛояльности КАК ВыплатыПоМеханикамЛояльности,
		|	ТаблицаДанных.БаллыЗаСкидки КАК БаллыЗаСкидки,
		|	ТаблицаДанных.БазоваяКомиссия КАК БазоваяКомиссия,
		|	ТаблицаДанных.НомерСчетаФактуры КАК НомерСчетаФактуры,
		|	ТаблицаДанных.ДатаСчетаФактуры КАК ДатаСчетаФактуры,
		|	ТаблицаДанных.Договор КАК Договор,
		|	ОтчетКомиссионера.Ссылка КАК ОтчетКомиссионераСсылка
		|ПОМЕСТИТЬ ВТ_ИтоговаяТаблицаДанных
		|ИЗ
		|	ВТ_ТаблицаДанных КАК ТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОтчетКомиссионера КАК ОтчетКомиссионера
		|		ПО (ОтчетКомиссионера.Дата = ТаблицаДанных.ДатаДокумента)
		|			И (ОтчетКомиссионера.НачалоПериода = ТаблицаДанных.НачалоПериода)
		|			И (ОтчетКомиссионера.КонецПериода = ТаблицаДанных.КонецПериода)
		|			И (ОтчетКомиссионера.Договор = ТаблицаДанных.Договор)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ТаблицаДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ОтчетКомиссионера
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИтоговаяТаблицаДанных.ТипОперации КАК ТипОперации,
		|	ИтоговаяТаблицаДанных.НомерСтроки КАК НомерСтроки,
		|	ИтоговаяТаблицаДанных.НомерОтправления КАК НомерОтправления,
		|	ИтоговаяТаблицаДанных.ДатаОтправления КАК ДатаОтправления,
		|	ИтоговаяТаблицаДанных.ДатаДокумента КАК ДатаДокумента,
		|	ИтоговаяТаблицаДанных.НачалоПериода КАК НачалоПериода,
		|	ИтоговаяТаблицаДанных.КонецПериода КАК КонецПериода,
		|	ИтоговаяТаблицаДанных.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	ИтоговаяТаблицаДанных.ПредставлениеТовара КАК ПредставлениеТовара,
		|	ИтоговаяТаблицаДанных.РезультатСопоставленияСтроки КАК РезультатСопоставленияСтроки,
		|	ИтоговаяТаблицаДанных.Номенклатура КАК Номенклатура,
		|	ИтоговаяТаблицаДанных.ТипНоменклатуры КАК ТипНоменклатуры,
		|	ИтоговаяТаблицаДанных.НоменклатураЕдиницаИзмерения КАК НоменклатураЕдиницаИзмерения,
		|	ИтоговаяТаблицаДанных.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар,
		|	ИтоговаяТаблицаДанных.Характеристика КАК Характеристика,
		|	ИтоговаяТаблицаДанных.ХарактеристикиИспользуются КАК ХарактеристикиИспользуются,
		|	ИтоговаяТаблицаДанных.Упаковка КАК Упаковка,
		|	ИтоговаяТаблицаДанных.УпаковкаКоэффициент КАК УпаковкаКоэффициент,
		|	ИтоговаяТаблицаДанных.Количество КАК Количество,
		|	ИтоговаяТаблицаДанных.Цена КАК Цена,
		|	ВЫБОР
		|		КОГДА ИтоговаяТаблицаДанных.Количество = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВЫРАЗИТЬ(ИтоговаяТаблицаДанных.СуммаПродажи / ИтоговаяТаблицаДанных.Количество КАК ЧИСЛО(31, 2))
		|	КОНЕЦ КАК ЦенаПродажи,
		|	ИтоговаяТаблицаДанных.Сумма КАК Сумма,
		|	ИтоговаяТаблицаДанных.СуммаПродажи КАК СуммаПродажи,
		|	ИтоговаяТаблицаДанных.СуммаВознаграждения КАК СуммаВознаграждения,
		|	ИтоговаяТаблицаДанных.БаллыЗаСкидки КАК БаллыЗаСкидки,
		|	ИтоговаяТаблицаДанных.БазоваяКомиссия КАК БазоваяКомиссия,
		|	НЕОПРЕДЕЛЕНО КАК Покупатель,
		|	ИтоговаяТаблицаДанных.НомерСчетаФактуры КАК НомерСчетаФактуры,
		|	ИтоговаяТаблицаДанных.ДатаСчетаФактуры КАК ДатаСчетаФактуры,
		|	ИтоговаяТаблицаДанных.Договор КАК Договор,
		|	ИтоговаяТаблицаДанных.ОтчетКомиссионераСсылка КАК ОтчетКомиссионераСсылка
		|ИЗ
		|	ВТ_ИтоговаяТаблицаДанных КАК ИтоговаяТаблицаДанных
		|ГДЕ
		|	(ИтоговаяТаблицаДанных.Индекс, ИСТИНА) В
		|			(ВЫБРАТЬ
		|				МИНИМУМ(ТаблицаДанных.Индекс),
		|				ИСТИНА
		|			ИЗ
		|				ВТ_ИтоговаяТаблицаДанных КАК ТаблицаДанных
		|			ГДЕ
		|				ТаблицаДанных.НомерСтроки = ИтоговаяТаблицаДанных.НомерСтроки)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаДокумента,
		|	НачалоПериода,
		|	НомерСтроки
		|ИТОГИ
		|	СУММА(СуммаПродажи),
		|	СУММА(БаллыЗаСкидки),
		|	СУММА(БазоваяКомиссия)
		|ПО
		|	ДатаДокумента,
		|	НачалоПериода,
		|	Договор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ИтоговаяТаблицаДанных";
	
	Если Не ДокументыНеПомеченныеНаУдаление Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И НЕ ДокументОтчетКомиссионера.ПометкаУдаления", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ИзменитьСкладыВДанныхОРеализованныхТоварах(Форма, ТекущиеДанные)
	
	ИспользоватьСкладыВТабличнойЧастиДокументовПродажи = ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовПродажи");
	
	ИмяТабличнойЧасти   = "ТаблицаСопоставленияДанных";
	КоличествоИзменений = 0;
	
	Для Каждого СтрокаТаблицыЗначений Из Форма[ИмяТабличнойЧасти] Цикл
		Если ТекущиеДанные.НомерДокумента = СтрокаТаблицыЗначений.НомерДокумента
				И ТекущиеДанные.ДатаДокумента = СтрокаТаблицыЗначений.ДатаДокумента Тогда
			Если Не ИспользоватьСкладыВТабличнойЧастиДокументовПродажи Тогда
				СтрокаТаблицыЗначений.ГруппаСкладов = ТекущиеДанные.СкладОтгрузки;
				КоличествоИзменений                 = КоличествоИзменений + ?(СтрокаТаблицыЗначений.СкладОтгрузки = ТекущиеДанные.СкладОтгрузки, 0, 1);
				СтрокаТаблицыЗначений.СкладОтгрузки = ТекущиеДанные.СкладОтгрузки;
			ИначеЕсли СтрокаТаблицыЗначений.ГруппаСкладов <> ТекущиеДанные.ГруппаСкладов Тогда
				СтрокаТаблицыЗначений.ГруппаСкладов = ТекущиеДанные.ГруппаСкладов;
				КоличествоИзменений                 = КоличествоИзменений + ?(СтрокаТаблицыЗначений.СкладОтгрузки = ТекущиеДанные.СкладОтгрузки, 0, 1);
				СтрокаТаблицыЗначений.СкладОтгрузки = ТекущиеДанные.СкладОтгрузки;
			КонецЕсли;
			
			ИнтеграцияСМаркетплейсамиКлиентСервер.ЗаполнитьРезультатСопоставленияСтроки(
				СтрокаТаблицыЗначений,
				Форма.КолонкиОбязательныеПриПроверке,
				Форма.КолонкиДополнительныеПриПроверке);
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоИзменений > 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Выбранный склад установлен для всех строк отправления №%1 от %2.'"),
			ТекущиеДанные.НомерДокумента,
			Формат(ТекущиеДанные.ДатаДокумента, "ДЛФ=D;"));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция ЗначенияОсновныхНастроек(НастройкиУчетнойЗаписи)

	ЗначенияОсновныхНастроек = Новый Структура;
	ЗначенияОсновныхНастроек.Вставить("ИспользоватьХарактеристикиНоменклатуры",
			ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры"));
	ЗначенияОсновныхНастроек.Вставить("ИспользоватьУпаковкиНоменклатуры",
			ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры"));
	ЗначенияОсновныхНастроек.Вставить("ИспользоватьПартнеровИКонтрагентов",
			ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов"));
	ЗначенияОсновныхНастроек.Вставить("ИспользоватьСоглашенияСКлиентами",
			ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами"));
	ЗначенияОсновныхНастроек.Вставить("ИспользуютсяДоговорыКонтрагентов",
			ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами"));
	ЗначенияОсновныхНастроек.Вставить("ИспользуетсяЦенообразование25",
			ПолучитьФункциональнуюОпцию("ИспользуетсяЦенообразование25"));
	ЗначенияОсновныхНастроек.Вставить("ИспользоватьНаправленияДеятельности",
			ПолучитьФункциональнуюОпцию("ИспользоватьУчетДоходовПоНаправлениямДеятельности"));
	ЗначенияОсновныхНастроек.Вставить("ИспользоватьОрдернуюСхемуПриОтгрузке",
			ПолучитьФункциональнуюОпцию("ИспользоватьОрдернуюСхемуПриОтгрузке"));
	ЗначенияОсновныхНастроек.Вставить("ИспользоватьЗаказыКлиентов",
			ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов"));
	ЗначенияОсновныхНастроек.Вставить("ИспользоватьРасширенныеВозможностиЗаказаКлиента",
			ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента"));
	ЗначенияОсновныхНастроек.Вставить("ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента",
			ПолучитьФункциональнуюОпцию("ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента"));
	ЗначенияОсновныхНастроек.Вставить("ИспользоватьНесколькоСкладов",
			ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов"));

	Если ЗначенияОсновныхНастроек.ИспользоватьСоглашенияСКлиентами Тогда
		ЗначенияОсновныхНастроек.ИспользуютсяДоговорыКонтрагентов =
			ЗначенияОсновныхНастроек.ИспользуютсяДоговорыКонтрагентов
			И ЗначениеЗаполнено(НастройкиУчетнойЗаписи.Соглашение)
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкиУчетнойЗаписи.Соглашение, "ИспользуютсяДоговорыКонтрагентов");
	КонецЕсли;

	ЗначенияОсновныхНастроек.Вставить("КомиссионерВедетУчетПоРНПТ",
		ЗначенияОсновныхНастроек.ИспользоватьСоглашенияСКлиентами
		И Справочники.СоглашенияСКлиентами.КомиссионерВедетУчетПоРНПТ(НастройкиУчетнойЗаписи.Соглашение)
		Или УчетПрослеживаемыхТоваровЛокализация.ИспользоватьУчетПрослеживаемыхИмпортныхТоваров(ТекущаяДатаСеанса()));

	Возврат ЗначенияОсновныхНастроек;

КонецФункции

Функция ЗаблокироватьОбъект(ДокументОбъект)

	ОписаниеОшибки = "";

	Попытка
		ДокументОбъект.Заблокировать();
	Исключение
		ШаблонОшибки = НСтр("ru = 'Не удалось заблокировать ""%1"" по причине: %2. Подробнее см. в журнале регистрации.'");
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонОшибки,
			ДокументОбъект.Ссылка,
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));

		ЗаписьЖурналаРегистрации(ИнтеграцияСМаркетплейсомOzonСервер.СобытиеЖурналаРегистрации() + "."
			+ НСтр("ru = 'Загрузка данных'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			ДокументОбъект.Метаданные().ПредставлениеОбъекта,
			ДокументОбъект.Ссылка,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

	Возврат ОписаниеОшибки;

КонецФункции

Функция НовыйРезультатЗаписиДокументов()

	Результат = Новый Структура;
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("ЗаписьВыполнена", Ложь);

	Возврат Результат;

КонецФункции

Функция ЗаписатьПровестиДокумент(ДокументОбъект, Провести = Истина)

	Результат = НовыйРезультатЗаписиДокументов();

	ПредставлениеОбъекта = ДокументОбъект.Метаданные().ПредставлениеОбъекта;
	ОписаниеДокумента = ?(ДокументОбъект.ЭтоНовый(), ПредставлениеОбъекта, ДокументОбъект.Ссылка);

	ОписаниеОшибкиЗаписи = "";
	ПодробноеОписаниеОшибки = "";
	Если Провести И ДокументОбъект.ПроверитьЗаполнение() Тогда
		// Проведение документа.
		Попытка
			УстановитьПривилегированныйРежим(Истина);
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			УдалитьАвтоматическоеПереоформлениеРасходныхОрдеров(ДокументОбъект.Ссылка);
			УстановитьПривилегированныйРежим(Ложь);
			Результат.ЗаписьВыполнена = Истина;
		Исключение
			ОписаниеОшибкиЗаписи = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ПодробноеОписаниеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
	КонецЕсли;

	Если Не Результат.ЗаписьВыполнена Тогда
		// Запись при неудачной попытке проведения.
		Попытка
			Если Не ДокументОбъект.ЭтоНовый() И ДокументОбъект.Проведен Тогда
				РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
			Иначе
				РежимЗаписи = РежимЗаписиДокумента.Запись;
			КонецЕсли;

			УстановитьПривилегированныйРежим(Истина);
			ДокументОбъект.Записать(РежимЗаписи);
			УдалитьАвтоматическоеПереоформлениеРасходныхОрдеров(ДокументОбъект.Ссылка);
			УстановитьПривилегированныйРежим(Ложь);
			Результат.ЗаписьВыполнена = Истина;
		Исключение
			ОписаниеОшибкиЗаписи = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ПодробноеОписаниеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
	КонецЕсли;

	Если Не ПустаяСтрока(ОписаниеОшибкиЗаписи) Тогда
		Результат.ОписаниеОшибки = ОписаниеОшибкиЗаписи;

		ЗаписьЖурналаРегистрации(ИнтеграцияСМаркетплейсомOzonСервер.СобытиеЖурналаРегистрации() + "."
			+ НСтр("ru = 'Загрузка данных'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			ДокументОбъект.Метаданные(),
			ДокументОбъект.Ссылка,
			ПодробноеОписаниеОшибки);
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ПолучитьДанныеСтрокТаблицыМакета

Функция ПолучитьДанныеСтрокЗаявкиНаПоставку(Знач Параметры, ОписаниеОшибки)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Параметры.СсылкаНаОбъект);
	Запрос.УстановитьПараметр("УчетнаяЗапись", Параметры.УчетнаяЗапись);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказКлиентаТовары.НомерСтроки КАК НомерСтроки,
	|	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
	|	ЗаказКлиентаТовары.Характеристика КАК Характеристика,
	|	ЗаказКлиентаТовары.Упаковка КАК Упаковка,
	|	ЕСТЬNULL(СтатусыПубликации.ПредставлениеОбъектаМаркетплейса, ПРЕДСТАВЛЕНИЕ(ЗаказКлиентаТовары.Номенклатура)) КАК ПредставлениеОбъектаМаркетплейса,
	|	ЕСТЬNULL(СтатусыПубликации.ИдентификаторПубликации, """") КАК ИдентификаторПубликации,
	|	ЗаказКлиентаТовары.КоличествоУпаковок КАК КоличествоУпаковок
	|ПОМЕСТИТЬ ДанныеДляВыгрузки
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликации
	|		ПО (СтатусыПубликации.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись)
	|			И (СтатусыПубликации.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар))
	|			И ЗаказКлиентаТовары.Номенклатура = СтатусыПубликации.Номенклатура
	|			И ЗаказКлиентаТовары.Характеристика = СтатусыПубликации.Характеристика
	|			И ЗаказКлиентаТовары.Упаковка = СтатусыПубликации.Упаковка
	|ГДЕ
	|	ЗаказКлиентаТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДляВыгрузки.НомерСтроки КАК НомерСтроки,
	|	ДанныеДляВыгрузки.Номенклатура КАК Номенклатура,
	|	ДанныеДляВыгрузки.Характеристика КАК Характеристика,
	|	ДанныеДляВыгрузки.Упаковка КАК Упаковка,
	|	ДанныеДляВыгрузки.ПредставлениеОбъектаМаркетплейса КАК ПредставлениеОбъектаМаркетплейса,
	|	ДанныеДляВыгрузки.ИдентификаторПубликации КАК ИдентификаторПубликации,
	|	ДанныеДляВыгрузки.КоличествоУпаковок КАК КоличествоУпаковок
	|ИЗ
	|	ДанныеДляВыгрузки КАК ДанныеДляВыгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДляВыгрузки.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ДанныеДляВыгрузки КАК ДанныеДляВыгрузки
	|ГДЕ
	|	ДанныеДляВыгрузки.ИдентификаторПубликации = """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказКлиента.НомерПоДаннымКлиента КАК НомерПоДаннымКлиента
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеДляВыгрузки";

	ПакетЗапроса = Запрос.ВыполнитьПакет();

	МассивОшибок = Новый Массив;
	Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
		МассивОшибок.Добавить(ОписаниеОшибки);
	КонецЕсли;

	ВыборкаДанныхЗаявки = ПакетЗапроса[ПакетЗапроса.ВГраница() - 1].Выбрать();
	Если ВыборкаДанныхЗаявки.Следующий() Тогда
		Если ПустаяСтрока(ВыборкаДанныхЗаявки.НомерПоДаннымКлиента) Тогда
			ШаблонОшибки = НСтр("ru = 'В выгружаемом документе в реквизите ""Номер по данным клиента"" не заполнен номер заявки на поставку. Нужно его заполнить по данным заявки на поставку из личного кабинета Ozon после загрузки заявки из файла.'");
			МассивОшибок.Добавить(ШаблонОшибки);
		КонецЕсли;
	КонецЕсли;

	СтрокиСОшибками = Новый Массив;

	ВыборкаОшибок = ПакетЗапроса[ПакетЗапроса.ВГраница() - 2].Выбрать();
	Пока ВыборкаОшибок.Следующий() Цикл
		СтрокиСОшибками.Добавить(ВыборкаОшибок.НомерСтроки);
	КонецЦикла;

	Если СтрокиСОшибками.Количество() > 0 Тогда
		ШаблонОшибки = НСтр("ru = 'Не определен идентификатор 1С (артикул) для строк документа: %1'");
		МассивОшибок.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
			СтрСоединить(СтрокиСОшибками, ", ")));
	КонецЕсли;

	ОписаниеОшибки = СтрСоединить(МассивОшибок, Символы.ПС);

	ВыборкаДанных = ПакетЗапроса[ПакетЗапроса.ВГраница() - 3].Выбрать();

	Возврат ВыборкаДанных;

КонецФункции

Функция ПолучитьДанныеСтрокЗаявкиНаВозврат(Знач Параметры, ОписаниеОшибки)

	СписокОшибок = Новый Массив;

	ПрисоединенныйФайл = ИнтеграцияСМаркетплейсамиСервер.НайтиПрисоединенныйФайл(Параметры.СсылкаНаОбъект,
		НаименованиеСохраняемогоФайла(Параметры.СсылкаНаОбъект));
	ПрисоединенныйФайл = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			Параметры.ДополнительныеПараметры,
			"ПрисоединенныйФайл",
			ПрисоединенныйФайл);

	Если ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл);
		ДвоичныеДанные = ПолучитьИЗВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла); // ДвоичныеДанные

		ИнформацияПоКолонкамТаблица = Параметры.ИнформацияПоКолонкам;
		ИнформацияПоКолонкамТаблица.Очистить();

		ПараметрыОбработкиДанных = ИнтеграцияСМаркетплейсамиСервер.ПараметрыЗагрузкиИзФайлаВТабличнуюЧасть();
		ПараметрыОбработкиДанных.ИмяОбъектаМетаданных    = "Обработка.УправлениеПродажамиНаOzon";
		ПараметрыОбработкиДанных.ИмяТабличнойЧасти       = "ДанныеЗаявокНаВозврат";
		ПараметрыОбработкиДанных.ИмяМакетаСШаблоном      = "ЗагрузкаИзФайлаЗаявкаНаВозврат";

		ПараметрыШапки = Новый Структура;
		ИнтеграцияСМаркетплейсамиСервер.ОпределитьИнформациюПоКолонкамИПараметрамШапки(
			ПараметрыОбработкиДанных,
			ИнформацияПоКолонкамТаблица,
			ПараметрыШапки);

		ПараметрыЗагрузки =
			ИнтеграцияСМаркетплейсамиСервер.ПараметрыЗагрузкиТабличногоДокумента(Новый УникальныйИдентификатор());
		ПараметрыЗагрузки.РасширениеФайла = ДанныеФайла.Расширение;
		ПараметрыЗагрузки.ДанныеФайла = ДвоичныеДанные;
		ПараметрыЗагрузки.ИнформацияПоКолонкам = ИнформацияПоКолонкамТаблица;
		ПараметрыОбработкиДанных.Свойство("ВысотаЗаголовкаТаблицыЗагружаемогоМакета",
			ПараметрыЗагрузки.ВысотаЗаголовкаТаблицыЗагружаемогоМакета);

		Результат = ИнтеграцияСМаркетплейсамиСервер.ЗагрузитьФайлВТаблицу(ПараметрыЗагрузки);

		ТаблицаСОстатками = ПолучитьИзВременногоХранилища(Результат.АдресТаблицыЗагруженныхДанных);
		ТаблицаСОстатками.Индексы.Добавить("ИдентификаторSKU");

		Если ТаблицаСОстатками.Количество() = 0 Тогда
			ОписаниеОшибки = НСтр("ru = 'Выбранный файл с остатками на складе Ozon не содержит необходимых данных.'");
		КонецЕсли;
	Иначе
		ТаблицаСОстатками = Новый ТаблицаЗначений;
		ТаблицаСОстатками.Колонки.Добавить("ИдентификаторSKU", Новый ОписаниеТипов("Строка"));
		ТаблицаСОстатками.Колонки.Добавить("ИдентификаторПубликации", Новый ОписаниеТипов("Строка"));
		ТаблицаСОстатками.Колонки.Добавить("КоличествоУпаковокНаСкладе", Новый ОписаниеТипов("Число"));
		ТаблицаСОстатками.Колонки.Добавить("ИдентификаторЗаявкиНаПоставку", Новый ОписаниеТипов("Строка"));
		ТаблицаСОстатками.Колонки.Добавить("ТипСтока", Новый ОписаниеТипов("Строка"));

		ОписаниеОшибки = НСтр("ru = 'Сформированный файл не может быть загружен в личном кабинете торговой площадки, т.к. не выбран файл с остатками на складе Ozon.'");
	КонецЕсли;

	ТипДата   = Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.Дата));
	ТипЧисло  = Новый ОписаниеТипов("Число");
	ТипСтрока = Новый ОписаниеТипов("Строка");

	ТаблицаСДанными = Новый ТаблицаЗначений;
	ТаблицаСДанными.Колонки.Добавить("Номенклатура",
		Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаСДанными.Колонки.Добавить("Характеристика",
		Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаСДанными.Колонки.Добавить("Упаковка",
		Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ТаблицаСДанными.Колонки.Добавить("ПредставлениеОбъектаМаркетплейса", ТипСтрока);
	ТаблицаСДанными.Колонки.Добавить("ИдентификаторПубликации",          ТипСтрока);
	ТаблицаСДанными.Колонки.Добавить("ИдентификаторОбъектаМаркетплейса", ТипСтрока);
	ТаблицаСДанными.Колонки.Добавить("ИдентификаторSKU",                 ТипСтрока);
	ТаблицаСДанными.Колонки.Добавить("Штрихкод",                         ТипСтрока);
	ТаблицаСДанными.Колонки.Добавить("КоличествоУпаковокНаСкладе",       ТипЧисло);
	ТаблицаСДанными.Колонки.Добавить("КоличествоУпаковок",               ТипЧисло);
	ТаблицаСДанными.Колонки.Добавить("ДатаИстеченияСрокаГодности",       ТипДата);
	ТаблицаСДанными.Колонки.Добавить("ДатаСнятияСПолки",                 ТипДата);
	ТаблицаСДанными.Колонки.Добавить("КонтрольнаяДатаСрокаГодности",     ТипДата);
	ТаблицаСДанными.Колонки.Добавить("ИдентификаторПартии",              ТипСтрока);
	ТаблицаСДанными.Колонки.Добавить("ИдентификаторЗаявкиНаПоставку",    ТипСтрока);
	ТаблицаСДанными.Колонки.Добавить("ТипСтока",                         ТипСтрока);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Параметры.СсылкаНаОбъект);
	Запрос.УстановитьПараметр("УчетнаяЗапись", Параметры.УчетнаяЗапись);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаявкаНаВозвратТоваровОтКлиентаВозвращаемыеТовары.НомерСтроки КАК НомерСтроки,
		|	ЗаявкаНаВозвратТоваровОтКлиентаВозвращаемыеТовары.Номенклатура КАК Номенклатура,
		|	ЗаявкаНаВозвратТоваровОтКлиентаВозвращаемыеТовары.Характеристика КАК Характеристика,
		|	ЗаявкаНаВозвратТоваровОтКлиентаВозвращаемыеТовары.Упаковка КАК Упаковка,
		|	ЗаявкаНаВозвратТоваровОтКлиентаВозвращаемыеТовары.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ЕСТЬNULL(СтатусыПубликации.ПредставлениеОбъектаМаркетплейса, """") КАК ПредставлениеОбъектаМаркетплейса,
		|	ЕСТЬNULL(СтатусыПубликации.ИдентификаторПубликации, """") КАК ИдентификаторПубликации,
		|	ЕСТЬNULL(СтатусыПубликации.ИдентификаторОбъектаМаркетплейса, """") КАК ИдентификаторОбъектаМаркетплейса,
		|	ЕСТЬNULL(СтатусыПубликации.ИдентификаторFBOSKU, """") КАК ИдентификаторSKU,
		|	ЕСТЬNULL(СтатусыПубликации.Штрихкод, """") КАК Штрихкод
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК ЗаявкаНаВозвратТоваровОтКлиентаВозвращаемыеТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликации
		|		ПО (СтатусыПубликации.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись)
		|			И (СтатусыПубликации.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар))
		|			И ЗаявкаНаВозвратТоваровОтКлиентаВозвращаемыеТовары.Номенклатура = СтатусыПубликации.Номенклатура
		|			И ЗаявкаНаВозвратТоваровОтКлиентаВозвращаемыеТовары.Характеристика = СтатусыПубликации.Характеристика
		|			И ЗаявкаНаВозвратТоваровОтКлиентаВозвращаемыеТовары.Упаковка = СтатусыПубликации.Упаковка
		|ГДЕ
		|	ЗаявкаНаВозвратТоваровОтКлиентаВозвращаемыеТовары.Ссылка = &Ссылка";

	НомераСтрокБезИдентификатораПоставки = Новый Массив;
	НомераСтрокОтсутствующиеВБазе        = Новый Массив;
	НомераСтрокОтсутствующиеВФайле       = Новый Массив;

	ВыборкаДанных = Запрос.Выполнить().Выбрать();
	Пока ВыборкаДанных.Следующий() Цикл
		КоличествоУпаковок = ВыборкаДанных.КоличествоУпаковок;

		Если ПустаяСтрока(ВыборкаДанных.ИдентификаторПубликации) Тогда
			СтрокаСДанными = ТаблицаСДанными.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСДанными, ВыборкаДанных,, "КоличествоУпаковок");
			СтрокаСДанными.КоличествоУпаковок = КоличествоУпаковок;

			Если ПустаяСтрока(ВыборкаДанных.ПредставлениеОбъектаМаркетплейса) Тогда
				СтрокаСДанными.ПредставлениеОбъектаМаркетплейса = ИнтеграцияСМаркетплейсомOzonСервер.ПредставлениеТоварнойПозиции(
					ВыборкаДанных.Номенклатура,
					ВыборкаДанных.Характеристика,
					ВыборкаДанных.Упаковка);
			КонецЕсли;

			НомераСтрокОтсутствующиеВБазе.Добавить(ВыборкаДанных.НомерСтроки);
			КоличествоУпаковок = 0;
		Иначе
			Отбор = Новый Структура("ИдентификаторSKU", ВыборкаДанных.ИдентификаторSKU);
			СтрокиСОстатками = ТаблицаСОстатками.НайтиСтроки(Отбор);
			Если СтрокиСОстатками.Количество() = 0 Тогда
				СтрокаСДанными = ТаблицаСДанными.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаСДанными, ВыборкаДанных,, "КоличествоУпаковок");
				СтрокаСДанными.КоличествоУпаковок = КоличествоУпаковок;

				Если ПустаяСтрока(ВыборкаДанных.ПредставлениеОбъектаМаркетплейса) Тогда
					СтрокаСДанными.ПредставлениеОбъектаМаркетплейса = ИнтеграцияСМаркетплейсомOzonСервер.ПредставлениеТоварнойПозиции(
						ВыборкаДанных.Номенклатура,
						ВыборкаДанных.Характеристика,
						ВыборкаДанных.Упаковка);
				КонецЕсли;

				НомераСтрокОтсутствующиеВФайле.Добавить(ВыборкаДанных.НомерСтроки);
				КоличествоУпаковок = 0;
			Иначе
				Для Каждого СтрокаСОстатком Из СтрокиСОстатками Цикл
					Если КоличествоУпаковок = 0 Тогда
						Прервать;
					ИначеЕсли СтрокаСОстатком.КоличествоУпаковокНаСкладе = 0 Тогда
						Продолжить;
					КонецЕсли;

					СтрокаСДанными = ТаблицаСДанными.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаСДанными, ВыборкаДанных,, "КоличествоУпаковок");
					СтрокаСДанными.КоличествоУпаковокНаСкладе    = СтрокаСОстатком.КоличествоУпаковокНаСкладе;
					СтрокаСДанными.КоличествоУпаковок            = Мин(СтрокаСОстатком.КоличествоУпаковокНаСкладе,
																	КоличествоУпаковок);

					СтрокаСДанными.ДатаИстеченияСрокаГодности    = СтрокаСОстатком.ДатаИстеченияСрокаГодности;
					СтрокаСДанными.ДатаСнятияСПолки              = СтрокаСОстатком.ДатаСнятияСПолки;
					СтрокаСДанными.КонтрольнаяДатаСрокаГодности  = СтрокаСОстатком.КонтрольнаяДатаСрокаГодности;
					СтрокаСДанными.ИдентификаторПартии           = СтрокаСОстатком.ИдентификаторПартии;
					СтрокаСДанными.ИдентификаторЗаявкиНаПоставку = СтрокаСОстатком.ИдентификаторЗаявкиНаПоставку;
					СтрокаСДанными.ТипСтока                      = СтрокаСОстатком.ТипСтока;

					КоличествоУпаковок = КоличествоУпаковок - СтрокаСДанными.КоличествоУпаковок;
					СтрокаСОстатком.КоличествоУпаковокНаСкладе = СтрокаСОстатком.КоличествоУпаковокНаСкладе
																 - СтрокаСДанными.КоличествоУпаковок;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

		Если КоличествоУпаковок > 0 Тогда
			СтрокаСДанными = ТаблицаСДанными.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСДанными, ВыборкаДанных,, "КоличествоУпаковок");
			СтрокаСДанными.КоличествоУпаковок = КоличествоУпаковок;

			Если НомераСтрокБезИдентификатораПоставки.Количество() > 10 Тогда
				Продолжить;
			ИначеЕсли НомераСтрокБезИдентификатораПоставки.Количество() = 10 Тогда
				НомераСтрокБезИдентификатораПоставки.Добавить(НСтр("ru = 'и т.д.'"));
			Иначе
				НомераСтрокБезИдентификатораПоставки.Добавить(ВыборкаДанных.НомерСтроки);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если НомераСтрокОтсутствующиеВБазе.Количество() > 0 Тогда
		СписокОшибок.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В учетной системе не найдена карточка товара для следующих номеров строк выгружаемого документа: %1.'"),
			СтрСоединить(НомераСтрокОтсутствующиеВБазе, ", ")));
	КонецЕсли;

	Если НомераСтрокОтсутствующиеВФайле.Количество() > 0 Тогда
		СписокОшибок.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В файле с остатками на складе Ozon не найден идентификатор SKU (Ozon id) для следующих номеров строк выгружаемого документа: %1.'"),
			СтрСоединить(НомераСтрокОтсутствующиеВФайле, ", ")));
	КонецЕсли;

	Если ТаблицаСОстатками.Количество() <> 0 И НомераСтрокБезИдентификатораПоставки.Количество() > 0 Тогда
		СписокОшибок.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В файле с остатками на складе Ozon количество остатка на складе меньше заявленного к возврату количества для следующих номеров строк выгружаемого документа: %1.'"),
			СтрСоединить(НомераСтрокБезИдентификатораПоставки, ", ")));
	КонецЕсли;

	ОписаниеОшибки = СтрСоединить(СписокОшибок, Символы.ПС);

	Возврат ТаблицаСДанными;

КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииВыгрузкиВФайл

#Область ПодключаемыеОбработчикиСобытий

// Изменяет поведение элементов формы.
// Можно установить фиксированные отборы, значения реквизитов формы и т.п.
//
// Параметры:
//   Форма              - ФормаКлиентскогоПриложения  - форма, в которой требуется обработать событие.
//   ЗначенияПараметров - Структура - значения параметров, заданных пользователем через дополнительную форму.
//
Процедура Подключаемый_ИзменитьПоведениеЭлементовФормы(Форма, ЗначенияПараметров) Экспорт

	Элементы = Форма.Элементы;

	Если Форма.ИмяТабличнойЧасти = "ДанныеПоставок" Тогда

		Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ТаблицаСкладов") Тогда
			МассивРеквизитов = Новый Массив;

			МассивРеквизитов.Добавить(Новый РеквизитФормы("ТаблицаСкладов",
				Новый ОписаниеТипов("ТаблицаЗначений")));
			МассивРеквизитов.Добавить(Новый РеквизитФормы("Склад",
				Новый ОписаниеТипов("СправочникСсылка.Склады"), "ТаблицаСкладов"));
			МассивРеквизитов.Добавить(Новый РеквизитФормы("КоличествоСтрок",
				Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(10)), "ТаблицаСкладов"));

			МассивРеквизитов.Добавить(Новый РеквизитФормы("Ссылка",
				Новый ОписаниеТипов("ДокументСсылка.ЗаказКлиента")));
			МассивРеквизитов.Добавить(Новый РеквизитФормы("ОтгружатьЕслиДоступно",
				Новый ОписаниеТипов("Булево")));
			МассивРеквизитов.Добавить(Новый РеквизитФормы("Склад",
				Новый ОписаниеТипов("СправочникСсылка.Склады")));
			МассивРеквизитов.Добавить(Новый РеквизитФормы("СкладГруппа",
				Новый ОписаниеТипов("Булево")));
			МассивРеквизитов.Добавить(Новый РеквизитФормы("ГруппаСкладов",
				Новый ОписаниеТипов("СправочникСсылка.Склады")));
			МассивРеквизитов.Добавить(Новый РеквизитФормы("ДоступныеОстаткиПараметрыВстраивания",
				Новый ОписаниеТипов()));
			МассивРеквизитов.Добавить(Новый РеквизитФормы("ПараметрыУказанияСерий",
				Новый ОписаниеТипов()));
			МассивРеквизитов.Добавить(Новый РеквизитФормы("КэшированныеСтроки",
				Новый ОписаниеТипов()));
			МассивРеквизитов.Добавить(Новый РеквизитФормы("ЭтоЗаказКакСчет",
				Новый ОписаниеТипов("Булево")));

			Форма.ИзменитьРеквизиты(МассивРеквизитов);

			НовыйЭлемент = Элементы.Добавить("ТаблицаСопоставленияДанных_ВариантОбеспечения", Тип("ПолеФормы"),
				Элементы.ТаблицаСопоставленияДанных);
			НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
			НовыйЭлемент.ПутьКДанным = "ТаблицаСопоставленияДанных.ВариантОбеспечения";
			НовыйЭлемент.Видимость = Ложь;

			Элемент = Элементы.ТаблицаСопоставленияДанных_Склад;
			Элемент.КнопкаВыпадающегоСписка = Ложь;
			Элемент.КнопкаСоздания          = Ложь;
			Элемент.КнопкаВыбора            = Истина;
			Элемент.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВВыпадающемСпискеИВПолеВвода;

			Элемент = Элементы.ТаблицаСопоставленияДанных_Серия;
			Элемент.КнопкаВыпадающегоСписка = Ложь;
			Элемент.КнопкаСоздания          = Ложь;
			Элемент.КнопкаВыбора            = Истина;
			Элемент.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВВыпадающемСпискеИВПолеВвода;

			Элемент = Элементы.ТаблицаСопоставленияДанных_Доступно;
			Элемент.ТолькоПросмотр          = Истина;
			Элемент.ВыделятьОтрицательные   = Истина;

			ПараметрыВстраивания = ДоступныеОстаткиПараметрыВстраивания();
			ОбеспечениеВДокументахСервер.ДоступныеОстаткиПриСозданииНаСервере(Форма, ПараметрыВстраивания);

			Форма.ЭтоЗаказКакСчет = Не ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента");

			Элементы["ТаблицаСопоставленияДанных_Доступно"].КартинкаШапки = Новый Картинка;
		КонецЕсли;

		Форма.ТаблицаСкладов.Очистить();

		РаботаСТабличнымиЧастями.ИнициализироватьКэшСтрок(Форма.Элементы.ТаблицаСопоставленияДанных);

		Склад = ПолучитьСкладИзПараметровФормы(Форма.УчетнаяЗапись, ЗначенияПараметров);

		Форма.Склад = Склад;
		Форма.СкладГруппа = ?(ЗначениеЗаполнено(Склад),
			Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(Склад),
			Ложь);

		ИспользоватьСкладыВТабличнойЧастиДокументовПродажи =
			ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовПродажи");

		Если Форма.СкладГруппа Тогда
			Форма.ГруппаСкладов = Склад;
		ИначеЕсли ИспользоватьСкладыВТабличнойЧастиДокументовПродажи Тогда
			Форма.ГруппаСкладов = ПолучитьГруппуСклада(Склад);
		Иначе
			Форма.ГруппаСкладов = Справочники.Склады.ПустаяСсылка();
		КонецЕсли;

		ЭлементСклад = Элементы["ТаблицаСопоставленияДанных_Склад"];
		ЭлементСклад.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
		ЭлементСклад.ТолькоПросмотр = Не ИспользоватьСкладыВТабличнойЧастиДокументовПродажи;
		// Для выбора склада с незаполненными основными данными.
		ДобавитьПараметрВыбораДляСклада(ЭлементСклад, Форма.Склад);

		ЗаполнитьПараметрыУказанияСерий(Форма);

		ОбеспечениеВДокументахСервер.ОбновитьКолонкуДоступно(Форма);

	ИначеЕсли Форма.ИмяТабличнойЧасти = "ДанныеОРеализованныхТоварах" Тогда
		
		// Параметры договора
		Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ВалютаУчета") Тогда
			МассивРеквизитов = Новый Массив;
			МассивРеквизитов.Добавить(Новый РеквизитФормы("ВалютаУчета", Новый ОписаниеТипов("СправочникСсылка.Валюты")));
			МассивРеквизитов.Добавить(Новый РеквизитФормы("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации")));
			МассивРеквизитов.Добавить(Новый РеквизитФормы("Контрагент",  Новый ОписаниеТипов("СправочникСсылка.Контрагенты")));
			
			Форма.ИзменитьРеквизиты(МассивРеквизитов);
		КонецЕсли;
		
		Форма.ВалютаУчета = Форма.ДанныеТорговойПлощадки.ВалютаУчета;
		Форма.Организация = Форма.ДанныеТорговойПлощадки.Организация;
		Форма.Контрагент  = Форма.ДанныеТорговойПлощадки.Контрагент;
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ВалютаВзаиморасчетов", "ВалютаУчета"));
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Организация"));
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Контрагент", "Контрагент"));
		
		НовыеСвязи = Новый ФиксированныйМассив(МассивПараметров);
		
		Элемент = Элементы.ТаблицаСопоставленияДанных_ДоговорДляОтраженияПродажи;
		Элемент.СвязиПараметровВыбора = НовыеСвязи;
		Элемент.Видимость             = Форма.ДанныеТорговойПлощадки.СпособОтраженияПродажFBO = "Комиссия"
											Или Форма.ДанныеТорговойПлощадки.СпособОтраженияПродажFBS <> "РеализацияВПути";
		
		// Параметры склада
		Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Склад") Тогда
			МассивРеквизитов = Новый Массив;
			МассивРеквизитов.Добавить(Новый РеквизитФормы("Ссылка",          Новый ОписаниеТипов("ДокументСсылка.ЗаказКлиента")));
			МассивРеквизитов.Добавить(Новый РеквизитФормы("Склад",           Новый ОписаниеТипов("СправочникСсылка.Склады")));
			МассивРеквизитов.Добавить(Новый РеквизитФормы("СкладГруппа",     Новый ОписаниеТипов("Булево")));
			МассивРеквизитов.Добавить(Новый РеквизитФормы("ГруппаСкладов",   Новый ОписаниеТипов("СправочникСсылка.Склады")));
			
			Форма.ИзменитьРеквизиты(МассивРеквизитов);
		КонецЕсли;
		
		Элемент = Элементы.ТаблицаСопоставленияДанных_СкладОтгрузки;
		Элемент.КнопкаВыпадающегоСписка = Ложь;
		Элемент.КнопкаСоздания          = Ложь;
		Элемент.КнопкаВыбора            = Истина;
		Элемент.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВПолеВвода;
		Элемент.ТолькоПросмотр          = Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
		Элемент.Видимость               = (Форма.ДанныеТорговойПлощадки.СпособОтраженияПродажFBS = "РеализацияВПути");
		
		Элемент = Элементы.ТаблицаСопоставленияДанных_ФЛ_СкладОтгрузки;
		Элемент.Заголовок = НСтр("ru = 'Из файла: Склад отгрузки'");
		Элемент.Видимость = (Форма.ДанныеТорговойПлощадки.СпособОтраженияПродажFBS = "РеализацияВПути");
	КонецЕсли;

КонецПроцедуры

// Выполняет обработку события изменения значения поля.
//
// Параметры:
//   Форма               - ФормаКлиентскогоПриложения  - форма, в которой требуется обработать событие.
//   ИмяПоля             - Строка - имя поля, изменение которого обрабатывается.
//   ИдентификаторСтроки - Число - идентификатор текущей обрабатываемой строки.
//
Процедура Подключаемый_ПолеПриИзменении(Форма, ИмяПоля, ИдентификаторСтроки) Экспорт

	ТекущиеДанные = Форма.ТаблицаСопоставленияДанных.НайтиПоИдентификатору(ИдентификаторСтроки);

	Если ИмяПоля = "Номенклатура" Тогда
		// Общая обработка события.
		НоменклатураПриИзменении(Форма, ТекущиеДанные);
	КонецЕсли;

	// Обработка события в зависимости от полного имени объекта метаданных, для которого вызывается обработчик.
	Если Форма.ИмяТабличнойЧасти = "ДанныеПоставок"
	  Или Форма.ИмяТабличнойЧасти = "ДанныеЗаявокНаВозврат"
	  Или Форма.ИмяТабличнойЧасти = "ДанныеОРеализованныхТоварах" Тогда

		Если ИмяПоля = "Номенклатура" Или ИмяПоля = "Характеристика" Или ИмяПоля = "Упаковка" Тогда

			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("УчетнаяЗапись",  Форма.УчетнаяЗапись);
			Запрос.УстановитьПараметр("Номенклатура",   ТекущиеДанные.Номенклатура);
			Запрос.УстановитьПараметр("Характеристика", ТекущиеДанные.Характеристика);
			Запрос.УстановитьПараметр("Упаковка",       ТекущиеДанные.Упаковка);
			Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	СтатусыПубликации.ИдентификаторПубликации КАК ИдентификаторПубликации,
				|	СтатусыПубликации.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъектаМаркетплейса,
				|	ВЫБОР
				|		КОГДА СтатусыПубликации.ИдентификаторFBOSKU = """"
				|			ТОГДА СтатусыПубликации.ИдентификаторFBSSKU
				|		ИНАЧЕ СтатусыПубликации.ИдентификаторFBOSKU
				|	КОНЕЦ КАК ИдентификаторSKU,
				|	СтатусыПубликации.ПредставлениеОбъектаМаркетплейса КАК ПредставлениеОбъектаМаркетплейса
				|ИЗ
				|	РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликации
				|ГДЕ
				|	СтатусыПубликации.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись
				|	И СтатусыПубликации.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар)
				|	И СтатусыПубликации.Номенклатура = &Номенклатура
				|	И СтатусыПубликации.Характеристика = &Характеристика
				|	И СтатусыПубликации.Упаковка = &Упаковка";

			Если ИмяПоля = "Номенклатура" Или ИмяПоля = "Упаковка" Тогда
				Если ЗначениеЗаполнено(ТекущиеДанные.Упаковка) Тогда
					ТекущиеДанные.УпаковкаКоэффициент = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(
						ТекущиеДанные.Упаковка,
						ТекущиеДанные.Номенклатура);
				Иначе
					ТекущиеДанные.УпаковкаКоэффициент = 1;
				КонецЕсли;
			КонецЕсли;

			ВыборкаРезультата = Запрос.Выполнить().Выбрать();
			Если ВыборкаРезультата.Следующий() Тогда
				ЗаполнитьЗначенияСвойств(ТекущиеДанные, ВыборкаРезультата);
			Иначе
				// Значение "<...>" позволяет указать на незаполненное поле, но при этом указать
				// на обработанное значение, т.к. считаем, что заполнение полей "Номенклатура",
				// "Характеристика", "Упаковка" достаточно для сопоставления.
				// Данное значение учитывается как заполненное при установке признака СтрокаОбработана.
				ПустоеЗначение = "<...>";
				СтруктураЗаполнения = Новый Структура;
				СтруктураЗаполнения.Вставить("ПредставлениеОбъектаМаркетплейса", ПустоеЗначение);
				СтруктураЗаполнения.Вставить("ИдентификаторПубликации",          ПустоеЗначение);
				СтруктураЗаполнения.Вставить("ИдентификаторОбъектаМаркетплейса", ПустоеЗначение);
				СтруктураЗаполнения.Вставить("ИдентификаторSKU",                 ПустоеЗначение);
				ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураЗаполнения);
			КонецЕсли;

			Если Форма.ИмяТабличнойЧасти = "ДанныеПоставок" Тогда
				ЗаполнитьСтатусСерииИДоступноеКоличество(Форма, ТекущиеДанные);
			КонецЕсли;

		ИначеЕсли ИмяПоля = "ИдентификаторПубликации" Тогда

			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("УчетнаяЗапись",           Форма.УчетнаяЗапись);
			Запрос.УстановитьПараметр("ИдентификаторПубликации", ТекущиеДанные[ИмяПоля]);
			Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура КАК Номенклатура,
				|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика КАК Характеристика,
				|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Упаковка КАК Упаковка,
				|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъектаМаркетплейса,
				|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ПредставлениеОбъектаМаркетплейса КАК ПредставлениеОбъектаМаркетплейса
				|ИЗ
				|	РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon
				|ГДЕ
				|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторПубликации = &ИдентификаторПубликации
				|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись
				|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар)";

			ВыборкаРезультата = Запрос.Выполнить().Выбрать();
			Если ВыборкаРезультата.Следующий() Тогда
				ЗаполнитьЗначенияСвойств(ТекущиеДанные, ВыборкаРезультата);
			Иначе
				ТекущиеДанные.Номенклатура                     = Справочники.Номенклатура.ПустаяСсылка();
				ТекущиеДанные.Характеристика                   = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
				ТекущиеДанные.Упаковка                         = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
				ТекущиеДанные.ИдентификаторОбъектаМаркетплейса = "";

				СтруктураЗаполнения = Новый Структура;
				СтруктураЗаполнения.Вставить("ПредставлениеОбъектаМаркетплейса", "");
				ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураЗаполнения);
			КонецЕсли;

			НоменклатураПриИзменении(Форма, ТекущиеДанные);

			Если Форма.ИмяТабличнойЧасти = "ДанныеПоставок" Тогда
				ЗаполнитьСтатусСерииИДоступноеКоличество(Форма, ТекущиеДанные);
			КонецЕсли;

		ИначеЕсли ИмяПоля = "ИдентификаторОбъектаМаркетплейса" Тогда

			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("УчетнаяЗапись",                    Форма.УчетнаяЗапись);
			Запрос.УстановитьПараметр("ИдентификаторОбъектаМаркетплейса", ТекущиеДанные[ИмяПоля]);
			Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура КАК Номенклатура,
				|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика КАК Характеристика,
				|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Упаковка КАК Упаковка,
				|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторПубликации КАК ИдентификаторПубликации,
				|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ПредставлениеОбъектаМаркетплейса КАК ПредставлениеОбъектаМаркетплейса
				|ИЗ
				|	РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon
				|ГДЕ
				|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторОбъектаМаркетплейса = &ИдентификаторОбъектаМаркетплейса
				|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись
				|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар)";

			ВыборкаРезультата = Запрос.Выполнить().Выбрать();
			Если ВыборкаРезультата.Следующий() Тогда
				ЗаполнитьЗначенияСвойств(ТекущиеДанные, ВыборкаРезультата);
			Иначе
				ТекущиеДанные.Номенклатура             = Справочники.Номенклатура.ПустаяСсылка();
				ТекущиеДанные.Характеристика           = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
				ТекущиеДанные.Упаковка                 = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
				ТекущиеДанные.ИдентификаторПубликации  = "";

				СтруктураЗаполнения = Новый Структура;
				СтруктураЗаполнения.Вставить("ПредставлениеОбъектаМаркетплейса", "");
				СтруктураЗаполнения.Вставить("ИдентификаторSKU",                 "");
				ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураЗаполнения);
			КонецЕсли;

			НоменклатураПриИзменении(Форма, ТекущиеДанные);

		ИначеЕсли ИмяПоля = "Склад" Тогда

			Если Форма.ИмяТабличнойЧасти = "ДанныеПоставок" Тогда
				СкладыСервер.ПриИзмененииСкладаВТабличнойЧасти(
					Форма.ТаблицаСопоставленияДанных,
					Форма.ТаблицаСкладов,
					Форма.СкладГруппа);

				ЗаполнитьСтатусСерииИДоступноеКоличество(Форма, ТекущиеДанные);
			КонецЕсли;

		ИначеЕсли ИмяПоля = "СкладОтгрузки"
					И Форма.ИмяТабличнойЧасти = "ДанныеОРеализованныхТоварах" Тогда
			ТекущиеДанные.ГруппаСкладов = ПолучитьГруппуСклада(ТекущиеДанные.СкладОтгрузки);
			ИзменитьСкладыВДанныхОРеализованныхТоварах(Форма, ТекущиеДанные);
			
		ИначеЕсли ИмяПоля = "Серия" Тогда

			Если Форма.ИмяТабличнойЧасти = "ДанныеПоставок" Тогда
				ЗаполнитьСтатусСерииИДоступноеКоличество(Форма, ТекущиеДанные);
				ОбеспечениеВДокументахСервер.ОбновитьКолонкуДоступно(Форма);
			КонецЕсли;

		ИначеЕсли ИмяПоля = "КоличествоУпаковок" Тогда

			Если Форма.ИмяТабличнойЧасти = "ДанныеПоставок" Тогда
				ДанныеСтроки = ТекущиеДанныеВСтруктуру(
					ТекущиеДанные,
					Форма.ПолучитьРеквизиты("ТаблицаСопоставленияДанных"),
					Форма.ИмяТабличнойЧасти);
				СтруктураДействий = Новый Структура;
				СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
				ДобавитьДействияОбеспечения(Форма, СтруктураДействий, "ДоступноВДругихСтроках");

				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ДанныеСтроки, СтруктураДействий, Неопределено);
				ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);

				ОбеспечениеВДокументахСервер.ОбновитьКолонкуДоступно(Форма);
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

	Если Форма.ИмяТабличнойЧасти = "ДанныеПоставок" И Не ЗначениеЗаполнено(ТекущиеДанные.ВариантОбеспечения) Тогда
		ТекущиеДанные.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
		ТекущиеДанные.ГруппаСкладов      = Форма.ГруппаСкладов;
	ИначеЕсли Форма.ИмяТабличнойЧасти = "ДанныеОРеализованныхТоварах" Тогда
		ДобавитьПроверкуЗаполненияКолонокДляОтчетаОПродажах(Форма, ТекущиеДанные);
	КонецЕсли;

	ДобавитьПроверкуЗаполненияХарактеристики(Форма, ТекущиеДанные);
	ДобавитьПроверкуЗаполненияСерии(Форма, ТекущиеДанные);

КонецПроцедуры

Процедура НоменклатураПриИзменении(Форма, ТекущиеДанные)

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры",
		Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый",
		Новый Структура("ИмяФормы, ИмяТабличнойЧасти", Форма.ИмяФормы, "ТаблицаСопоставленияДанных"));
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу",    ТекущиеДанные.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущиеДанные.Упаковка);

	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);

	Если Не ЗначениеЗаполнено(ТекущиеДанные.ТипНоменклатуры) Тогда
		ТекущиеДанные.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
	КонецЕсли;

	ТекущиеДанные.НоменклатураЕдиницаИзмерения =
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ЕдиницаИзмерения");

КонецПроцедуры

// Возвращает параметры выбора.
//
// Параметры:
//   Форма   - ФормаКлиентскогоПриложения  - форма, в которой требуется обработать событие.
//   ИмяПоля - Строка - имя поля, для которого требуется подготовить параметры выбора.
//
// Возвращаемое значение:
//   Неопределено,
//   Структура из КлючИЗначение.
//
Функция Подключаемый_ПолеПараметрыНачалаВыбора(Форма, ИмяПоля) Экспорт

	ПараметрыМетода = Неопределено;

	Если Форма.ИмяТабличнойЧасти = "ДанныеПоставок" Тогда

		Режим = Неопределено;
		Если ИмяПоля = "Склад" Тогда
			Режим = ОбеспечениеВДокументахКлиентСервер.РежимПодборСкладов();
		ИначеЕсли ИмяПоля = "Серия" Тогда
			Режим = ОбеспечениеВДокументахКлиентСервер.РежимПодборСерий();
		КонецЕсли;

		Если Режим <> Неопределено Тогда
			ПараметрыМетода = ПараметрыВыбораОбеспечения(Форма, Режим);
		КонецЕсли;
		
	КонецЕсли;

	Возврат ПараметрыМетода;

КонецФункции

// Заполняет склад из результата оповещения формы выгрузки/загрузки.
//
// Параметры:
//   Форма     - ФормаКлиентскогоПриложения  - форма, для которой требуется обработать оповещение.
//   Параметры - Произвольный - данные, которые возвращаются при обработке оповещения.
//
Процедура Подключаемый_ЗаполнитьСкладыВВыделенныхСтроках(Форма, Параметры) Экспорт

	ВыбранныйСклад = Параметры.ВыбранныйСклад;

	Если Не ЗначениеЗаполнено(ВыбранныйСклад) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТабличнойЧасти = "ТаблицаСопоставленияДанных";
	ПерезаполнитьГруппуСклада = Ложь;
	ВыделенныеСтроки = Новый Массив;
	
	Если Форма.ИмяТабличнойЧасти = "ДанныеПоставок" Тогда
		ПустойСклад = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
		ДанныеФормы = Новый Структура("Склад, СкладГруппа, ГруппаСкладов", ПустойСклад, Ложь, ПустойСклад);
		ЗаполнитьЗначенияСвойств(ДанныеФормы, Форма);
		Если ЗначениеЗаполнено(ДанныеФормы.Склад)
		  И Не ДанныеФормы.СкладГруппа
		  И ЗначениеЗаполнено(ДанныеФормы.ГруппаСкладов)
		  И ВыбранныйСклад <> ДанныеФормы.Склад Тогда
			Форма.Склад = ДанныеФормы.ГруппаСкладов;
			Форма.СкладГруппа = Истина;

			ЭлементСклад = Форма.Элементы["ТаблицаСопоставленияДанных_Склад"];
			ДобавитьПараметрВыбораДляСклада(ЭлементСклад, Форма.Склад);

			ЗаполнитьПараметрыУказанияСерий(Форма);

			ПерезаполнитьГруппуСклада = Истина;
		КонецЕсли;

		ЗаполнитьВыделенныеСтроки = Ложь;
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовПродажи") Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Выбранный склад установлен для всех строк, т.к. отгрузка товаров с нескольких складов в рамках одной заявки на поставку запрещена'")
				+ НСтр("ru = '(см. НСИ и администрирование -> Оптовые продажи -> Реализация товаров с нескольких складов)'"));

			Форма.Склад = ВыбранныйСклад;
			ЗаполнитьВыделенныеСтроки = Истина;
			ПерезаполнитьГруппуСклада = Истина;
		Иначе
			ВыделенныеСтроки = Параметры.ВыделенныеСтроки;
		КонецЕсли;

		Если ПерезаполнитьГруппуСклада Или ЗаполнитьВыделенныеСтроки Тогда
			Для Каждого СтрокаДанных Из Форма[ИмяТабличнойЧасти] Цикл
				Если ПерезаполнитьГруппуСклада Тогда
					СтрокаДанных.ГруппаСкладов = Форма.Склад;
				КонецЕсли;
				Если ЗаполнитьВыделенныеСтроки Тогда
					ВыделенныеСтроки.Добавить(СтрокаДанных.ПолучитьИдентификатор());
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		Если ВыделенныеСтроки.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;

		ЗаполненоСтрок = СкладыСервер.ЗаполнитьСкладыВВыделенныхСтроках(
			Форма[ИмяТабличнойЧасти],
			ВыделенныеСтроки,
			ВыбранныйСклад);

		Если ЗаполненоСтрок > 0 Тогда
			СкладыСервер.ПриИзмененииСкладаВТабличнойЧасти(
				Форма[ИмяТабличнойЧасти],
				Форма.ТаблицаСкладов,
				Форма.СкладГруппа);
			ОбеспечениеВДокументахСервер.ОбновитьКолонкуДоступно(Форма);
		КонецЕсли;

		ПерезаполнитьГруппуСклада = Не Форма.СкладГруппа И Не ПерезаполнитьГруппуСклада
			И ЗаполненоСтрок = Форма[ИмяТабличнойЧасти].Количество();
	
		Для Каждого ТекущаяСтрока Из ВыделенныеСтроки Цикл
			ТекущиеДанные = Форма[ИмяТабличнойЧасти].НайтиПоИдентификатору(ТекущаяСтрока);
			ДобавитьПроверкуЗаполненияХарактеристики(Форма, ТекущиеДанные);
			ДобавитьПроверкуЗаполненияСерии(Форма, ТекущиеДанные);
			
			Если ПерезаполнитьГруппуСклада Тогда
				ТекущиеДанные.ГруппаСкладов = ТекущиеДанные.Склад;
			КонецЕсли;
			
			ИнтеграцияСМаркетплейсамиКлиентСервер.ЗаполнитьРезультатСопоставленияСтроки(
				ТекущиеДанные,
				Форма.КолонкиОбязательныеПриПроверке,
				Форма.КолонкиДополнительныеПриПроверке);
		КонецЦикла;
		
	ИначеЕсли Форма.ИмяТабличнойЧасти = "ДанныеОРеализованныхТоварах" Тогда
		ГруппаСкладов = ПолучитьГруппуСклада(ВыбранныйСклад);
		
		Для Каждого ТекущаяСтрока Из Параметры.ВыделенныеСтроки Цикл
			ТекущиеДанные = Форма[ИмяТабличнойЧасти].НайтиПоИдентификатору(ТекущаяСтрока);
			ТекущиеДанные.ГруппаСкладов = ГруппаСкладов;
			ТекущиеДанные.СкладОтгрузки = ВыбранныйСклад;
		КонецЦикла;
		
		Для Каждого ТекущаяСтрока Из Параметры.ВыделенныеСтроки Цикл
			ТекущиеДанные = Форма[ИмяТабличнойЧасти].НайтиПоИдентификатору(ТекущаяСтрока);
			ИзменитьСкладыВДанныхОРеализованныхТоварах(Форма, ТекущиеДанные);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Обработка выбора склада и серии.
//
// Параметры:
//   Форма     - ФормаКлиентскогоПриложения  - форма, для которой требуется обработать оповещение.
//   Параметры - Произвольный - данные, которые возвращаются при обработке оповещения.
//
Процедура Подключаемый_ОбработатьВыборСкладаИСерии(Форма, Параметры) Экспорт

	ТекущаяСтрока = Форма.Элементы.ТаблицаСопоставленияДанных.ТекущаяСтрока;

	Изменения = ОбеспечениеВДокументахСервер.ПриВыбореСклада(
		Параметры.ВыбранноеЗначение,
		Форма,
		ТекущаяСтрока,
		Параметры.ПараметрыФормы.ЗаполняемыеПоля);

	ОбеспечениеВДокументахСервер.ПересчитатьКоличествоЕдиниц(Изменения);

	ПослеЗаполненияОбеспечения(Форма, Параметры.ПараметрыФормы);

	Для Каждого СтрокаИзменений Из Изменения Цикл
		ТекущиеДанные = СтрокаИзменений.Строка;
		ДобавитьПроверкуЗаполненияХарактеристики(Форма, ТекущиеДанные);
		ДобавитьПроверкуЗаполненияСерии(Форма, ТекущиеДанные);

		ИнтеграцияСМаркетплейсамиКлиентСервер.ЗаполнитьРезультатСопоставленияСтроки(
			ТекущиеДанные,
			Форма.КолонкиОбязательныеПриПроверке,
			Форма.КолонкиДополнительныеПриПроверке);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

Процедура ДобавитьПроверкуЗаполненияХарактеристики(Форма, Знач ТекущиеДанные)

	Если ТипЗнч(ТекущиеДанные) = Тип("СтрокаТаблицыЗначений") Тогда
		ДанныеСтроки = ТекущиеДанные;
		ТекущиеДанные = Новый Структура("ХарактеристикиИспользуются", Ложь);
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
	КонецЕсли;

	Если ТекущиеДанные.Свойство("ХарактеристикиИспользуются") Тогда
		Колонка = Форма.КолонкиДополнительныеПриПроверке.НайтиПоЗначению("Характеристика");
		УдалитьКолонку = (Колонка <> Неопределено);
		Если ТекущиеДанные.ХарактеристикиИспользуются Тогда
			Если Колонка = Неопределено Тогда
				Форма.КолонкиДополнительныеПриПроверке.Добавить("Характеристика");
			КонецЕсли;
			УдалитьКолонку = Ложь;
		КонецЕсли;
		Если УдалитьКолонку Тогда
			Форма.КолонкиДополнительныеПриПроверке.Удалить(Колонка);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьПроверкуЗаполненияСерии(Форма, Знач ТекущиеДанные)

	Если ТипЗнч(ТекущиеДанные) = Тип("СтрокаТаблицыЗначений") Тогда
		ДанныеСтроки = ТекущиеДанные;
		ТекущиеДанные = Новый Структура("СтатусУказанияСерий", -1);
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
	КонецЕсли;

	Если ТекущиеДанные.Свойство("СтатусУказанияСерий") Тогда
		Колонка = Форма.КолонкиДополнительныеПриПроверке.НайтиПоЗначению("Серия");
		УдалитьКолонку = (Колонка <> Неопределено);
		Если ТекущиеДанные.СтатусУказанияСерий <> -1 Тогда
			СтатусыУказанияСерий = НоменклатураКлиентСервер.СтатусыСерийСерияНеУказана();
			Если СтатусыУказанияСерий.Найти(ТекущиеДанные.СтатусУказанияСерий) <> Неопределено Тогда
				Если Колонка = Неопределено Тогда
					Форма.КолонкиДополнительныеПриПроверке.Добавить("Серия");
				КонецЕсли;
				УдалитьКолонку = Ложь;
			КонецЕсли;
		КонецЕсли;
		Если УдалитьКолонку Тогда
			Форма.КолонкиДополнительныеПриПроверке.Удалить(Колонка);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьПроверкуЗаполненияКолонокДляОтчетаОПродажах(Форма, Знач ТекущиеДанные)

	Если ТипЗнч(ТекущиеДанные) = Тип("СтрокаТаблицыЗначений") Тогда
		ДанныеСтроки = ТекущиеДанные;
		ТекущиеДанные = Новый Структура;
		ТекущиеДанные.Вставить("СуммаПродажи", 0);
		ТекущиеДанные.Вставить("СуммаПродажиВозврат", 0);
		ТекущиеДанные.Вставить("КоличествоУпаковок", 0);
		ТекущиеДанные.Вставить("КоличествоУпаковокВозврат", 0);
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
	КонецЕсли;

	Если ТекущиеДанные.Свойство("СуммаПродажи") И ТекущиеДанные.Свойство("СуммаПродажиВозврат")
	  И ТекущиеДанные.Свойство("КоличествоУпаковок") И ТекущиеДанные.Свойство("КоличествоУпаковокВозврат") Тогда

		//
		Колонка = Форма.КолонкиДополнительныеПриПроверке.НайтиПоЗначению("СуммаПродажи");
		УдалитьКолонку = (Колонка <> Неопределено);
		Если Не ЗначениеЗаполнено(ТекущиеДанные.СуммаПродажи)
		  И (Не ЗначениеЗаполнено(ТекущиеДанные.СуммаПродажиВозврат)
				Или ЗначениеЗаполнено(ТекущиеДанные.КоличествоУпаковок)) Тогда
			Если Колонка = Неопределено Тогда
				Форма.КолонкиДополнительныеПриПроверке.Добавить("СуммаПродажи");
			КонецЕсли;
			УдалитьКолонку = Ложь;
		КонецЕсли;
		Если УдалитьКолонку Тогда
			Форма.КолонкиДополнительныеПриПроверке.Удалить(Колонка);
		КонецЕсли;

		//
		Колонка = Форма.КолонкиДополнительныеПриПроверке.НайтиПоЗначению("СуммаПродажиВозврат");
		УдалитьКолонку = (Колонка <> Неопределено);
		Если Не ЗначениеЗаполнено(ТекущиеДанные.СуммаПродажиВозврат)
		  И (Не ЗначениеЗаполнено(ТекущиеДанные.СуммаПродажи)
				Или ЗначениеЗаполнено(ТекущиеДанные.КоличествоУпаковокВозврат)) Тогда
			Если Колонка = Неопределено Тогда
				Форма.КолонкиДополнительныеПриПроверке.Добавить("СуммаПродажиВозврат");
			КонецЕсли;
			УдалитьКолонку = Ложь;
		КонецЕсли;
		Если УдалитьКолонку Тогда
			Форма.КолонкиДополнительныеПриПроверке.Удалить(Колонка);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Формирует шаблон комментария в зависимости от типа ссылки.
//
// Параметры:
//  СсылкаНаОбъект - ЛюбаяСсылка - ссылка на объект, для которого нужно получить наименование файла.
//
// Возвращаемое значение:
//  Строка - шаблон комментария.
//
Функция ШаблонКомментария(СсылкаНаОбъект)

	ШаблонКомментария = НСтр("ru = 'Загружено из файла'");
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		ШаблонКомментария = НСтр("ru = 'Загружена из файла заявка на поставку №%1 на склад Ozon %2'");
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ПередачаТоваровХранителю") Тогда
		ШаблонКомментария = НСтр("ru = 'Загружена из файла поставка %1 по заявке на поставку %2'");
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
		ШаблонКомментария = НСтр("ru = 'Поставка %1 по заявке на поставку %2'");
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		ШаблонКомментария = НСтр("ru = 'Загружено из файла для склада Ozon %1 (%2)'");
	КонецЕсли;

	Возврат ШаблонКомментария;

КонецФункции

Функция ТекущиеДанныеВСтруктуру(ТекущиеДанные, РеквизитыКоллекции, ИмяТабличнойЧасти)

	ДанныеСтроки = Новый Структура;

	Для Каждого Реквизит Из РеквизитыКоллекции Цикл
		ДанныеСтроки.Вставить(Реквизит.Имя, ТекущиеДанные[Реквизит.Имя]);
	КонецЦикла;

	Если ИмяТабличнойЧасти = "ДанныеПоставок" Тогда
		ДанныеСтроки.Вставить("ИдентификаторСтрокиПолученный", ТекущиеДанные.ПолучитьИдентификатор());
		ДанныеСтроки.Вставить("Подразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
		ДанныеСтроки.Вставить("ЗаказНаОтгрузку", Документы.ЗаказКлиента.ПустаяСсылка());
		ДанныеСтроки.Вставить("ПерераспределятьЗапасы", Ложь);
		ДанныеСтроки.Вставить("ОтгружатьЕслиДоступно", Истина);
	КонецЕсли;

	Возврат ДанныеСтроки;

КонецФункции

Процедура ДобавитьДействияОбеспечения(Форма, СтруктураДействий, ПоляСтрокой)

	ВариантОбеспеченияИФлагОбособленно = ПродажиСервер.ВариантОбеспеченияИФлагОбособленноПоУмолчанию(
		Форма.ДанныеТорговойПлощадки.Соглашение,
		Перечисления.СтатусыЗаказовКлиентов.КОтгрузке,
		Неопределено,
		Не Форма.ЭтоЗаказКакСчет);

	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("Форма",                              Форма);
	ПараметрыДокумента.Вставить("Коллекция",                          Форма.ТаблицаСопоставленияДанных);
	ПараметрыДокумента.Вставить("ВариантОбеспеченияИФлагОбособленно", ВариантОбеспеченияИФлагОбособленно);

	ОбеспечениеВДокументахКлиентСервер.ДобавитьДействияОбеспечения(
		СтруктураДействий,
		ПоляСтрокой,
		ПараметрыДокумента);

КонецПроцедуры

// Формирует структуру параметров документа для встраивания документа в механизмы обеспечения.
//
// Возвращаемое значение:
//  см. ОбеспечениеВДокументахСервер.ДоступныеОстаткиПараметрыВстраивания
//
Функция ДоступныеОстаткиПараметрыВстраивания() Экспорт

	ПараметрыВстраивания = ОбеспечениеВДокументахСервер.ДоступныеОстаткиПараметрыВстраивания();
	ПараметрыВстраивания.ОчищаемыеРеквизиты = "КодСтроки";

	// Условное оформление.
	ЭлементыФормы = ПараметрыВстраивания.УсловноеОформление.ЭлементыФормы;
	ЭлементыФормы.ВариантОбеспечения = "ТаблицаСопоставленияДанных_ВариантОбеспечения";
	ЭлементыФормы.Доступно           = "ТаблицаСопоставленияДанных_Доступно";
	ЭлементыФормы.Склад              = "ТаблицаСопоставленияДанных_Склад";
	ЭлементыФормы.Серия              = "ТаблицаСопоставленияДанных_Серия";

	// Выбор варианта обеспечения.
	Связи = ПараметрыВстраивания.СвязиПараметровВыбораВариантаОбеспечения;
	Связи.Номенклатура          = "Элементы.ТаблицаСопоставленияДанных.ТекущиеДанные.Номенклатура";
	Связи.Упаковка              = "Элементы.ТаблицаСопоставленияДанных.ТекущиеДанные.Упаковка";
	Связи.Склад                 = "Элементы.ТаблицаСопоставленияДанных.ТекущиеДанные.Склад";
	Связи.ТипНоменклатуры       = "Элементы.ТаблицаСопоставленияДанных.ТекущиеДанные.ТипНоменклатуры";
	Связи.ВариантОбеспечения    = "Элементы.ТаблицаСопоставленияДанных.ТекущиеДанные.ВариантОбеспечения";
	Связи.Доступно              = "Элементы.ТаблицаСопоставленияДанных.ТекущиеДанные.Доступно";
	Связи.КоличествоУпаковок    = "Элементы.ТаблицаСопоставленияДанных.ТекущиеДанные.КоличествоУпаковок";
	Связи.Количество            = "Элементы.ТаблицаСопоставленияДанных.ТекущиеДанные.Количество";
	Связи.НесколькоСкладов      = "СкладГруппа";
	Связи.ОтгружатьЕслиДоступно = "ОтгружатьЕслиДоступно";

	// Имя регистра оформления отгрузки.
	ПараметрыВстраивания.ИмяРегистраОформленияОтгрузки = "РаспоряженияНаОтгрузку";

	// Временная таблица данных документа.
	ПараметрыВстраивания.ИмяОбъекта      = "Форма";
	ПараметрыВстраивания.ИмяТаблицы      = "Форма.ТаблицаСопоставленияДанных";
	ПараметрыВстраивания.ИмяТаблицыФормы = "ТаблицаСопоставленияДанных";

	ПараметрыВстраивания.ОписаниеПолученияДанныхДокумента =
		"ВЫБРАТЬ
		|	ТабЧасть.НомерСтроки КАК НомерСтроки,
		|	ТабЧасть.КодСтроки КАК КодСтроки,
		|	ТабЧасть.Номенклатура КАК Номенклатура,
		|	ТабЧасть.Характеристика КАК Характеристика,
		|	ТабЧасть.Упаковка КАК Упаковка,
		|	ТабЧасть.Склад КАК Склад,
		|	ТабЧасть.ГруппаСкладов КАК ГруппаСкладов,
		|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК Подразделение,
		|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
		|	ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка) КАК ЗаказНаОтгрузку,
		|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить) КАК ВариантОбеспечения,
		|	ТабЧасть.Серия КАК Серия,
		|	ТабЧасть.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ТабЧасть.Количество КАК Количество,
		|	ЛОЖЬ КАК Обособленно,
		|	ЛОЖЬ КАК Отменено,
		|	НЕОПРЕДЕЛЕНО КАК Регистратор,
		|	ИСТИНА КАК ГотовКОбеспечению,
		|	ИСТИНА КАК ГотовКОтгрузке,
		|	НЕОПРЕДЕЛЕНО КАК ЖелаемаяДатаОтгрузки,
		|	НЕОПРЕДЕЛЕНО КАК ДатаОтгрузкиВсехСтрокОднойДатой,
		|	НЕОПРЕДЕЛЕНО КАК ДатаДокумента,
		|	НЕОПРЕДЕЛЕНО КАК Приоритет
		|ПОМЕСТИТЬ ВременнаяТаблицаДанныхДокумента
		|ИЗ
		|	&ТабличнаяЧасть КАК ТабЧасть";

	ПараметрыВстраивания.ОписаниеПолученияДанныхДокумента =
		СтрЗаменить(ПараметрыВстраивания.ОписаниеПолученияДанныхДокумента,
					"&ТабличнаяЧасть",
					"Форма.ТаблицаСопоставленияДанных");

	// Шаблон сериализации данных формы.
	Таблица = Новый Структура;
	Таблица.Вставить("НомерСтроки",        Новый ОписаниеТипов("Число"));
	Таблица.Вставить("КодСтроки",          Новый ОписаниеТипов("Число"));
	Таблица.Вставить("Номенклатура",       Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Таблица.Вставить("Характеристика",     Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Таблица.Вставить("Упаковка",           Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	Таблица.Вставить("Склад",              Новый ОписаниеТипов("СправочникСсылка.Склады"));
	Таблица.Вставить("ГруппаСкладов",      Новый ОписаниеТипов("СправочникСсылка.Склады"));
	Таблица.Вставить("Подразделение",      Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	Таблица.Вставить("ЗаказНаОтгрузку",    Новый ОписаниеТипов("ДокументСсылка.ЗаказКлиента"));
	Таблица.Вставить("ВариантОбеспечения", Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыОбеспечения"));
	Таблица.Вставить("Серия",              Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	Таблица.Вставить("КоличествоУпаковок", Новый ОписаниеТипов("Число"));
	Таблица.Вставить("Количество",         Новый ОписаниеТипов("Число"));
	Таблица.Вставить("Доступно",           Новый ОписаниеТипов("Число"));
	Таблица.Вставить("Отменено",           Новый ОписаниеТипов("Булево"));

	ПараметрыВстраивания.ШаблонСериализацииДанныхФормы.Вставить("ТаблицаСопоставленияДанных", Таблица);

	Возврат ПараметрыВстраивания;

КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе
//
// Параметры:
//   Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
//
// Возвращаемое значение:
//   См. НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//
Функция ПараметрыУказанияСерий(Объект) Экспорт

	ПараметрыУказанияСерий = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	ПараметрыУказанияСерий.ПолноеИмяОбъекта               = "Обработка.УправлениеПродажамиНаOzon";
	ПараметрыУказанияСерий.ИмяТЧТовары                    = "ДанныеПоставок";
	ПараметрыУказанияСерий.ИмяТЧСерии                     = "ДанныеПоставок";
	ПараметрыУказанияСерий.ЭтоЗаказ                       = Истина;
	ПараметрыУказанияСерий.ПланированиеОтгрузки           = Истина;
	ПараметрыУказанияСерий.РегистрироватьСерии            = Ложь;
	ПараметрыУказанияСерий.Дата                           = ТекущаяДатаСеанса();
	ПараметрыУказанияСерий.ФактОтбора                     = Истина;

	ПараметрыСерийСклада = СкладыСервер.ИспользованиеСерийНаСкладе(Объект.Склад, Истина);
	ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = ПараметрыСерийСклада.ИспользоватьСерииНоменклатуры;
	ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = ПараметрыСерийСклада.УчитыватьСебестоимостьПоСериям;

	ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Добавить("СтатусУказанияСерий");
	ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Добавить("СтатусУказанияСерийНаСкладах");
	ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Добавить("СтатусУказанияСерийПереданныхТоваров");

	ПараметрыУказанияСерий.ПоляСвязи.Добавить("Склад");

	ПараметрыУказанияСерий.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ОтгрузкаКлиенту);

	ПараметрыУказанияСерий.ПараметрыЗапроса.Вставить("ХозяйственнаяОперация",
		Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);

	Возврат ПараметрыУказанияСерий;

КонецФункции

// Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую.
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт

	ИменаРеквизитов = "Склад, ЭтоЗаказКакСчет";
	Возврат ИменаРеквизитов;

КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
//	Параметры:
//		ПараметрыУказанияСерий - Структура - состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий
//	Возвращаемое значение:
//		Строка - текст запроса.
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Товары.НомерСтроки КАК НомерСтроки,
		|	Товары.Склад КАК Склад,
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.Серия КАК Серия,
		|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерий,
		|	Товары.СтатусУказанияСерийНаСкладах КАК СтатусУказанияСерийНаСкладах,
		|	Товары.СтатусУказанияСерийПереданныхТоваров КАК СтатусУказанияСерийПереданныхТоваров,
		|	Товары.Количество КАК Количество
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	&Товары КАК Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.Серия КАК Серия,
		|	Товары.Склад КАК Склад,
		|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры КАК ВидНоменклатуры,
		|	СУММА(Товары.Количество) КАК Количество
		|ПОМЕСТИТЬ ТоварыДляЗапроса
		|ИЗ
		|	Товары КАК Товары
		|
		|СГРУППИРОВАТЬ ПО
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	Товары.Серия,
		|	Товары.Склад,
		|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Серии.Номенклатура КАК Номенклатура,
		|	Серии.Характеристика КАК Характеристика,
		|	Серии.Склад КАК Склад,
		|	Серии.Количество КАК Количество
		|ПОМЕСТИТЬ Серии
		|ИЗ
		|	&Серии КАК Серии
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Серии.Номенклатура КАК Номенклатура,
		|	Серии.Характеристика КАК Характеристика,
		|	Серии.Склад КАК Склад,
		|	СУММА(Серии.Количество) КАК Количество
		|ПОМЕСТИТЬ СерииДляЗапроса
		|ИЗ
		|	Серии КАК Серии
		|
		|СГРУППИРОВАТЬ ПО
		|	Серии.Номенклатура,
		|	Серии.Характеристика,
		|	Серии.Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.НомерСтроки КАК НомерСтроки,
		|	Товары.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
		|	Товары.СтатусУказанияСерийНаСкладах КАК СтарыйСтатусУказанияСерийНаСкладах,
		|	Товары.СтатусУказанияСерийПереданныхТоваров КАК СтарыйСтатусУказанияСерийПереданныхТоваров,
		|	ВЫБОР
		|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL
		|			ТОГДА 0
		|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
		|			ТОГДА ВЫБОР
		|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|						ТОГДА 14
		|					ИНАЧЕ 13
		|				КОНЕЦ
		|		КОГДА &ТолькоСерииДляСебестоимости
		|			ТОГДА 0
		|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
		|			ТОГДА ВЫБОР
		|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|						ТОГДА 10
		|					ИНАЧЕ 9
		|				КОНЕЦ
		|		КОГДА Склады.ИспользоватьОрдернуюСхемуПриОтгрузке
		|				И &Дата >= Склады.ДатаНачалаОрдернойСхемыПриОтгрузке
		|			ТОГДА 0
		|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтбора
		|				И &ПланированиеОтбора
		|			ТОГДА ВЫБОР
		|					КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчетСерийПоFEFO
		|						ТОГДА ВЫБОР
		|								КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
		|										И ТоварыДляЗапроса.Количество > 0
		|									ТОГДА 6
		|								ИНАЧЕ 5
		|							КОНЕЦ
		|					ИНАЧЕ ВЫБОР
		|							КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
		|									И ТоварыДляЗапроса.Количество > 0
		|								ТОГДА 8
		|							ИНАЧЕ 7
		|						КОНЕЦ
		|				КОНЕЦ
		|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПоФактуОтбора
		|				И НЕ(Склады.ИспользоватьОрдернуюСхемуПриОтгрузке
		|						И &Дата >= Склады.ДатаНачалаОрдернойСхемыПриОтгрузке)
		|				И &ФактОтбора
		|				И ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтгрузкеКлиенту
		|			ТОГДА ВЫБОР
		|					КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьОстаткиСерий
		|						ТОГДА ВЫБОР
		|								КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
		|										И ТоварыДляЗапроса.Количество > 0
		|									ТОГДА 4
		|								ИНАЧЕ 3
		|							КОНЕЦ
		|					ИНАЧЕ ВЫБОР
		|							КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
		|									И ТоварыДляЗапроса.Количество > 0
		|								ТОГДА 2
		|							ИНАЧЕ 1
		|						КОНЕЦ
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СтатусУказанияСерий,
		|	ВЫБОР
		|		КОГДА ТоварыДляЗапроса.ВидНоменклатуры.ПолитикаУчетаСерий ЕСТЬ NULL
		|			ТОГДА 0
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ТоварыДляЗапроса.ВидНоменклатуры.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
		|					ТОГДА ВЫБОР
		|							КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи)
		|										И ТоварыДляЗапроса.ВидНоменклатуры.ПолитикаУчетаСерий.УчетСерийВПереданныхНаХранениеТоварах
		|									ИЛИ &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
		|										И ТоварыДляЗапроса.ВидНоменклатуры.ПолитикаУчетаСерий.УчетСерийВПереданныхНаКомиссиюТоваров
		|									ИЛИ ТоварыДляЗапроса.ВидНоменклатуры.ПолитикаУчетаСерий.УчетСерийПереданныхПереработчикуТоваров
		|										И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаПереработчику2_5)
		|								ТОГДА ВЫБОР
		|										КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|											ТОГДА 18
		|										ИНАЧЕ 17
		|									КОНЕЦ
		|							ИНАЧЕ 0
		|						КОНЕЦ
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|	КОНЕЦ КАК СтатусУказанияСерийПереданныхТоваров
		|ПОМЕСТИТЬ Статусы
		|ИЗ
		|	Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыДляЗапроса КАК ТоварыДляЗапроса
		|		ПО Товары.Номенклатура = ТоварыДляЗапроса.Номенклатура
		|			И Товары.Характеристика = ТоварыДляЗапроса.Характеристика
		|			И Товары.Склад = ТоварыДляЗапроса.Склад
		|		ЛЕВОЕ СОЕДИНЕНИЕ СерииДляЗапроса КАК СерииДляЗапроса
		|		ПО (ТоварыДляЗапроса.Номенклатура = СерииДляЗапроса.Номенклатура)
		|			И (ТоварыДляЗапроса.Характеристика = СерииДляЗапроса.Характеристика)
		|			И (ТоварыДляЗапроса.Склад = СерииДляЗапроса.Склад)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
		|		ПО (ТоварыДляЗапроса.ВидНоменклатуры = ПолитикиУчетаСерий.Ссылка)
		|			И (ТоварыДляЗапроса.Склад = ПолитикиУчетаСерий.Склад)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
		|		ПО (ТоварыДляЗапроса.Склад = Склады.Ссылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Статусы.НомерСтроки КАК НомерСтроки,
		|	Статусы.СтатусУказанияСерий КАК СтатусУказанияСерийНаСкладах,
		|	Статусы.СтатусУказанияСерийПереданныхТоваров КАК СтатусУказанияСерийПереданныхТоваров,
		|	ВЫБОР
		|		КОГДА Статусы.СтатусУказанияСерий = 0
		|			ТОГДА Статусы.СтатусУказанияСерийПереданныхТоваров
		|		ИНАЧЕ Статусы.СтатусУказанияСерий
		|	КОНЕЦ КАК СтатусУказанияСерий
		|ИЗ
		|	Статусы КАК Статусы
		|ГДЕ
		|	(ВЫБОР
		|				КОГДА Статусы.СтатусУказанияСерий = 0
		|					ТОГДА Статусы.СтатусУказанияСерийПереданныхТоваров
		|				ИНАЧЕ Статусы.СтатусУказанияСерий
		|			КОНЕЦ <> Статусы.СтарыйСтатусУказанияСерий
		|			ИЛИ Статусы.СтатусУказанияСерий <> Статусы.СтарыйСтатусУказанияСерийНаСкладах
		|			ИЛИ Статусы.СтатусУказанияСерийПереданныхТоваров <> Статусы.СтарыйСтатусУказанияСерийПереданныхТоваров)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";

	Возврат ТекстЗапроса;

КонецФункции

Процедура ЗаполнитьПараметрыУказанияСерий(Форма)

	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(Форма, Обработки.УправлениеПродажамиНаOzon);
	Форма.ПараметрыУказанияСерий = ПараметрыУказанияСерий;
	Форма.Элементы.ТаблицаСопоставленияДанных_Серия.Видимость = Форма.ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;

КонецПроцедуры

Процедура ДобавитьПараметрВыбораДляСклада(ЭлементСклад, Склад)

	ЭлементСклад.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
	ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрВыбора(ЭлементСклад, "Ссылка", ДанныеВыбораСкладов(Склад));

КонецПроцедуры

Функция ПолучитьСкладИзПараметровФормы(УчетнаяЗапись, ЗначенияПараметров)

	Склад = Справочники.Склады.ПустаяСсылка();

	Если ЗначенияПараметров.Свойство("Склад") Тогда
		Склад = ЗначенияПараметров.Склад;
	Иначе
		НастройкиУчетнойЗаписи = Справочники.УчетныеЗаписиМаркетплейсов.НастройкиУчетнойЗаписи(УчетнаяЗапись, Истина);

		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ВыбранноеСоглашение", НастройкиУчетнойЗаписи.Соглашение);
		ПараметрыОтбора.Вставить("УчитыватьГруппыСкладов", Истина);
		ПараметрыОтбора.Вставить("ПустаяСсылкаДокумента", Документы.ЗаказКлиента.ПустаяСсылка());

		УсловияПродажПоУмолчанию =
			ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(НастройкиУчетнойЗаписи.Партнер, ПараметрыОтбора);

		Если УсловияПродажПоУмолчанию <> Неопределено Тогда
			Если ЗначениеЗаполнено(УсловияПродажПоУмолчанию.Склад) Тогда
				Склад = УсловияПродажПоУмолчанию.Склад;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Склад;

КонецФункции

Функция ДанныеВыбораСкладов(Склад)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Склады.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.Ссылка В ИЕРАРХИИ(&ГруппаСкладов)
	|	И Склады.ЭтоГруппа = ЛОЖЬ
	|	И Склады.ВыборГруппы <> ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.Запретить)");

	Запрос.УстановитьПараметр("ГруппаСкладов", Склад);
	МассивСкладов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

	Возврат МассивСкладов;

КонецФункции

Функция ПолучитьГруппуСклада(Склад)

	ГруппаСкладов = Склад;

	Если Не ЗначениеЗаполнено(Склад) Тогда
		Возврат ГруппаСкладов;
	КонецЕсли;

	ТекстПролог =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Склады.Ссылка КАК Ссылка,
		|	Склады.Родитель КАК Родитель,
		|	Склады.Родитель.ВыборГруппы В (&НастройкиВыбораГруппы) КАК ДоступенВыборГруппы,
		|	0 КАК Уровень
		|ПОМЕСТИТЬ СкладыУровня0
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.Ссылка = &Склад";

	ТекстПроверки = ОбщегоНазначения.РазделительПакетаЗапросов() +
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Склады.Уровень) КАК КоличествоУровней
		|ИЗ
		|	СкладыУровня0 КАК Склады";

	ТекстРефрен =
		"ВЫБРАТЬ
		|	Склады.Ссылка КАК Ссылка,
		|	Склады.Родитель.Родитель КАК Родитель,
		|	Склады.Родитель.Родитель.ВыборГруппы В (&НастройкиВыбораГруппы) КАК ДоступенВыборГруппы,
		|	&НовыйУровень КАК Уровень
		|ПОМЕСТИТЬ СкладыУровня1
		|ИЗ
		|	СкладыУровня0 КАК Склады
		|ГДЕ
		|	Склады.Родитель <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	И Склады.Уровень = &Уровень
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Склады.Ссылка,
		|	Склады.Родитель,
		|	Склады.ДоступенВыборГруппы,
		|	Склады.Уровень
		|ИЗ
		|	СкладыУровня0 КАК Склады
		|ГДЕ
		|	Склады.Родитель <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ СкладыУровня0";

	ТекстЭпилог =
		"ВЫБРАТЬ
		|	Склады.Ссылка КАК Ссылка,
		|	МАКСИМУМ(Склады.Уровень) КАК Уровень
		|ПОМЕСТИТЬ МаксимальныйУровень
		|ИЗ
		|	СкладыУровня1 КАК Склады
		|ГДЕ
		|	Склады.ДоступенВыборГруппы
		|
		|СГРУППИРОВАТЬ ПО
		|	Склады.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Склады.Родитель КАК ГруппаСкладов
		|ИЗ
		|	СкладыУровня1 КАК Склады
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаксимальныйУровень КАК МаксимальныйУровень
		|		ПО Склады.Ссылка = МаксимальныйУровень.Ссылка
		|			И Склады.Уровень = МаксимальныйУровень.Уровень
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ СкладыУровня1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ МаксимальныйУровень";

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	НастройкиВыбораГруппы = Новый Массив;
	НастройкиВыбораГруппы.Добавить(Перечисления.ВыборГруппыСкладов.РазрешитьВЗаказах);
	НастройкиВыбораГруппы.Добавить(Перечисления.ВыборГруппыСкладов.РазрешитьВЗаказахИНакладных);

	Запрос.УстановитьПараметр("НастройкиВыбораГруппы", НастройкиВыбораГруппы);
	Запрос.УстановитьПараметр("Склад", Склад);

	// Получение ближайшего родителя.
	Уровень = 0;
	Запрос.Текст = ТекстПролог + ТекстПроверки;
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат ГруппаСкладов;
	Иначе
		ВыборкаРодителей = Результат.Выбрать();
		ВыборкаРодителей.Следующий();
		КоличествоУровней = ВыборкаРодителей.КоличествоУровней;
	КонецЕсли;

	// Получение всех родителей.
	Пока КоличествоУровней > 0 Цикл
		УровеньСтрокой = ИнтеграцияСМаркетплейсомOzonСервер.ЧислоВСтроку(Уровень, Истина);
		Уровень = Уровень + 1;
		НовыйУровеньСтрокой = ИнтеграцияСМаркетплейсомOzonСервер.ЧислоВСтроку(Уровень, Истина);

		ТекстЗапроса = СтрЗаменить(ТекстРефрен, "&НовыйУровень", Уровень);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Уровень", Уровень - 1);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СкладыУровня1", "СкладыУровня" + НовыйУровеньСтрокой);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СкладыУровня0", "СкладыУровня" + УровеньСтрокой);

		Запрос.Текст = ТекстЗапроса
			+ СтрЗаменить(ТекстПроверки, "СкладыУровня0", "СкладыУровня" + НовыйУровеньСтрокой);
		//@skip-check query-in-loop
		ВыборкаРодителей = Запрос.Выполнить().Выбрать();
		ВыборкаРодителей.Следующий();
		НовоеКоличествоУровней = ВыборкаРодителей.КоличествоУровней;

		Если НовоеКоличествоУровней <= КоличествоУровней Тогда
			Прервать;
		КонецЕсли;
		КоличествоУровней = НовоеКоличествоУровней;
	КонецЦикла;

	// Получение максимального родителя.
	ТекстЗапроса = СтрЗаменить(ТекстЭпилог, "СкладыУровня1", "СкладыУровня" + НовыйУровеньСтрокой);
	Запрос.Текст = ТекстЗапроса;
	ВыборкаРодителей = Запрос.Выполнить().Выбрать();
	ВыборкаРодителей.Следующий();
	ГруппаСкладов = ВыборкаРодителей.ГруппаСкладов;

	Возврат ГруппаСкладов;

КонецФункции

Функция ПараметрыВыбораОбеспечения(Форма, Режим)

	Если Форма.ИмяТабличнойЧасти = "ДанныеПоставок" Тогда
		ПараметрыФормы = ОбеспечениеВДокументахСервер.ПараметрыВыбораОбеспечения(
			Форма,
			Форма.Элементы.ТаблицаСопоставленияДанных.ТекущаяСтрока,
			Режим);
		ПараметрыФормы.ПараметрыУказанияСерий = Форма.ПараметрыУказанияСерий;
	КонецЕсли;

	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(ПараметрыФормы.Склад);
	Если Не СкладГруппа И ПараметрыФормы.Склад <> ПараметрыФормы.СкладПоДокументу Тогда
		ПараметрыФормы.Склад = ПараметрыФормы.СкладПоДокументу;
	КонецЕсли;

	ПараметрыФормы.Вставить("Режим", Режим);

	Возврат ПараметрыФормы;

КонецФункции

Процедура ПослеЗаполненияОбеспечения(Форма, ПараметрыФормы)

	Обработки.ЗапросКоличестваИСерий.ЗаполнитьСтатусУказанияСерииВТаблице(
		ПараметрыФормы.ВариантОбеспеченияПоДокументу,
		Форма.ТаблицаСопоставленияДанных,
		ПараметрыФормы.ПараметрыУказанияСерий,
		ПараметрыФормы.СкладПоДокументу);

	СкладыСервер.ПриИзмененииСкладаВТабличнойЧасти(
		Форма.ТаблицаСопоставленияДанных,
		Форма.ТаблицаСкладов,
		Форма.СкладГруппа);

	ОбеспечениеВДокументахСервер.ОбновитьКолонкуДоступно(Форма);

КонецПроцедуры

Процедура ЗаполнитьСтатусСерииИДоступноеКоличество(Форма, ТекущиеДанные)

	СтруктураПроверкиСерии = Новый Структура("Склад, ПараметрыУказанияСерий",
		ТекущиеДанные.Склад, Форма.ПараметрыУказанияСерий);

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", СтруктураПроверкиСерии);

	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, Неопределено);

	ОбеспечениеВДокументахСервер.ОбновитьКолонкуДоступно(Форма);
	ДобавитьПроверкуЗаполненияХарактеристики(Форма, ТекущиеДанные);
	ДобавитьПроверкуЗаполненияСерии(Форма, ТекущиеДанные);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
