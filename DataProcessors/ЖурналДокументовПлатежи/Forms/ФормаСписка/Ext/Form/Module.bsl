
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// НастройкиДинамическихСписков
	ИнициироватьНастройкиДинамическихСписков();
	// Конец НастройкиДинамическихСписков
	СписокДокументовРежимАвтообновления = Истина;
	
	Если Параметры.Свойство("КлючНазначенияФормы") И Не ПустаяСтрока(Параметры.КлючНазначенияФормы) Тогда
		КлючНазначенияИспользования = Параметры.КлючНазначенияФормы;
	Иначе
		КлючНазначенияИспользования = "ЖурналПлатежей";
	КонецЕсли;
	
	Если КлючНазначенияИспользования = "ЖурналПлатежей" Тогда
		КлючНастроек = "";
	Иначе
		КлючНастроек = КлючНазначенияИспользования;
	КонецЕсли;
	НавигационнаяСсылка = "e1cib/app/Обработка.ЖурналДокументовПлатежи";
	
	УстановитьПривилегированныйРежим(Истина);
	РегистрыСведений.ГрафикПлатежей.РассчитатьГрафикПлатежейПоПоступлениямОтБанкаПоЭквайрингу();
	УстановитьПривилегированныйРежим(Ложь);
	
	ИнициализироватьРеквизиты();
	УстановитьВидимость();
	УстановитьКонстантыСписков();
	
	УстановитьПараметрыЖурналаПлатежей();
	УстановитьОтборЖурналаПлатежей();
	
	УстановитьОтборКПоступлениюКОплате("КПоступлению");
	УстановитьОтборКПоступлениюКОплате("КОплате");
	
	ОбновитьПодвалНаСервере();
	
	ТипыДокументов = Новый Массив();
	ТипыДокументов.Добавить("Документ.ПоступлениеБезналичныхДенежныхСредств");
	ТипыДокументов.Добавить("Документ.СписаниеБезналичныхДенежныхСредств");
	ТипыДокументов.Добавить("Документ.ПриходныйКассовыйОрдер");
	ТипыДокументов.Добавить("Документ.РасходныйКассовыйОрдер");
	ТипыДокументов.Добавить("Документ.ОперацияПоПлатежнойКарте");
	ТипыДокументов.Добавить("Документ.ОтчетБанкаПоОперациямЭквайринга");
	
	ОбщегоНазначенияУТ.ЗаменитьПолеСсылкаКонструкциейВыразитьПоТипамДокументов(Элементы.ЖурналПлатежей, ТипыДокументов);
	
	ИспользуемыеТипыДокументов = ИспользуемыеТипыДокументов();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.Источники = Новый ОписаниеТипов(ИспользуемыеТипыДокументов);
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ЖурналПлатежейКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "КПоступлению.Дата", Элементы.КПоступлениюДата.Имя);
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "КОплате.Дата", Элементы.КОплатеДата.Имя);
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "ЖурналПлатежей.Дата", Элементы.ЖурналПлатежейДата.Имя);
	
	СохранитьРабочиеЗначенияПолейФормы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_СписаниеБезналичныхДенежныхСредств"
		Или ИмяСобытия = "Запись_РасходныйКассовыйОрдер"
		Или ИмяСобытия = "Загрузка_ОбменСБанками" Тогда
		
		ОбновитьПодвалНаСервере();
		
		Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаКОплате Тогда
			Элементы.КОплате.Обновить();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_ПоступлениеБезналичныхДенежныхСредств"
		Или ИмяСобытия = "Запись_ПриходныйКассовыйОрдер"
		Или ИмяСобытия = "Запись_ОперацияПоПлатежнойКарте"
		Или ИмяСобытия = "Загрузка_ОбменСБанками" Тогда
		
		ОбновитьПодвалНаСервере();
		
		Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаКПоступлению Тогда
			Элементы.КПоступлению.Обновить();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_БанковскиеСчетаОрганизаций"
		Или ИмяСобытия = "Запись_Кассы" Тогда
		
		ПерезаполнитьСписокКассБанковскихСчетов();
	КонецЕсли;
	
	ИменаСобытийОбновленияСпискаПлатежей = Новый Массив;
	ИменаСобытийОбновленияСпискаПлатежей.Добавить("Запись_СписаниеБезналичныхДенежныхСредств");
	ИменаСобытийОбновленияСпискаПлатежей.Добавить("Запись_РасходныйКассовыйОрдер");
	ИменаСобытийОбновленияСпискаПлатежей.Добавить("Запись_ПоступлениеБезналичныхДенежныхСредств");
	ИменаСобытийОбновленияСпискаПлатежей.Добавить("Запись_ПриходныйКассовыйОрдер");
	ИменаСобытийОбновленияСпискаПлатежей.Добавить("Запись_ОперацияПоПлатежнойКарте");
	ИменаСобытийОбновленияСпискаПлатежей.Добавить("Запись_ОтражениеРасхожденийПриИнкассацииДенежныхСредств");
	ИменаСобытийОбновленияСпискаПлатежей.Добавить("Запись_ОтчетБанкаПоОперациямЭквайринга");
	ИменаСобытийОбновленияСпискаПлатежей.Добавить("Проведение_Сторно");
	ИменаСобытийОбновленияСпискаПлатежей.Добавить("Запись_Сторно");
	
	Если ИменаСобытийОбновленияСпискаПлатежей.Найти(ИмяСобытия) <> Неопределено
		И Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЖурналПлатежей Тогда
		// НастройкиДинамическихСписков
		ОбновитьСписокДокументовСобытиеОбработкаОповещения("ЖурналПлатежей", Параметр);
		// Конец НастройкиДинамическихСписков
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	// НастройкиДинамическихСписков
	РаботаСЖурналамиДокументов.УстановитьПризнакАвтообновленияСпискаДокументовПриЗагрузкеДанныхИзНастроек(ЭтотОбъект,
		"ЖурналПлатежей", Настройки);
	// Конец НастройкиДинамическихСписков
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// НастройкиДинамическихСписков
	УстановитьПараметрыОбновленияСписковДокументов(Ложь, 0);
	// Конец НастройкиДинамическихСписков
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияОтборПриИзменении(Элемент)
	
	Если ОрганизацияСохраненноеЗначение <> Организация Тогда
		
		ОрганизацияОтборПриИзмененииНаСервере();
		
		ЗаполнитьПредставлениеСпискаКассБанковскихСчетов();
		ОрганизацияСохраненноеЗначение = Организация;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияОтборПриИзмененииНаСервере()
	
	СписокКассБанковскихСчетов = СписокКассБанковскихСчетов(Организация);
	
	УстановитьОтборДинамическихСписков();
	УстановитьОтборЖурналаПлатежей();
	
	ОбновитьПодвалНаСервере();
	
	СохранитьРабочиеЗначенияПолейФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(,
		"Обработка.ЖурналДокументовПлатежи.Форма.ФормаСписка.ПриСменеСтраницы." + ТекущаяСтраница.Имя);
	
	Если ТекущаяСтраница = Элементы.СтраницаЖурналПлатежей Тогда
		// НастройкиДинамическихСписков
		ОбновитьДанныеСпискаДокументовСЗамеромВремени("ЖурналПлатежей");
		// Конец НастройкиДинамическихСписков
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаКПоступлению Тогда
		Элементы.КПоступлению.Обновить();
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаКОплате Тогда
		Элементы.КОплате.Обновить();
		
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовСпискаПлатежей

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(НачалоПериода)
		И ЗначениеЗаполнено(КонецПериода)
		И НачалоПериода > КонецПериода Тогда
		НачалоПериода = КонецПериода;
	КонецЕсли;
	УстановитьПараметрыЖурналаПлатежей();
	
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(НачалоПериода)
		И ЗначениеЗаполнено(КонецПериода)
		И КонецПериода < НачалоПериода Тогда
		КонецПериода = НачалоПериода;
	КонецЕсли;
	УстановитьПараметрыЖурналаПлатежей();
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежиВыбратьПериод(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ПлатежиВыбратьПериодЗавершение", ЭтотОбъект);
	
	ОбщегоНазначенияУТКлиент.РедактироватьПериод(
		ЭтаФорма, Новый Структура("ДатаНачала, ДатаОкончания", "НачалоПериода", "КонецПериода"), Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежиВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПараметрыЖурналаПлатежей();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипДокументаОтборНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Обработка.ЖурналДокументовПлатежи.Форма.ФормаВыбораИзСписка",
		Новый Структура("Список, Заголовок, Режим", СписокТипыДокументов, НСтр("ru = 'Отбор по типу документов'"), 0),
		Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипДокументаОтборОчистка(Элемент, СтандартнаяОбработка)
	
	СписокТипыДокументов.ЗаполнитьПометки(Ложь);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЖурналПлатежей,
		"Тип",
		СписокТипыДокументов,
		ВидСравненияКомпоновкиДанных.ВСписке,,
		Ложь);
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЖурналПлатежей,
		"ТипПлатежногоДокумента",,
		ВидСравненияКомпоновкиДанных.ВСписке,,
		Ложь);
		
	// НастройкиДинамическихСписков
	РаботаСЖурналамиДокументовКлиент.УстановитьВидимостьГруппыНастройкиОбновленияПоУмолчанию(ЭтотОбъект, "ЖурналПлатежей");
	// Конец НастройкиДинамическихСписков
		
КонецПроцедуры

&НаКлиенте
Процедура ТипДокументаОтборОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СписокЗначений") Тогда
		СтандартнаяОбработка = Ложь;
		СписокТипыДокументов = ВыбранноеЗначение;
		
		СписокТипыДокументовПредставление = "";
		Для Каждого ЭлементСписка Из СписокТипыДокументов Цикл
			Если ЭлементСписка.Пометка Тогда
				СписокТипыДокументовПредставление = СписокТипыДокументовПредставление +
					?(ЗначениеЗаполнено(СписокТипыДокументовПредставление), ", ", "") + ЭлементСписка.Представление;
			КонецЕсли;
		КонецЦикла;
		
		ТипДокументаОтборИзменениеНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТипДокументаОтборИзменениеНаСервере()
	
	ТипПоступлениеБезналичныхДС = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств");
	ТипСписаниеБезналичныхДС = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств");
	
	СписокВыбранныхТиповДокументов = Новый СписокЗначений;
	
	МассивВыбранныхТиповПлатежногоДокумента = Новый Массив;
	Для Каждого ЭлементСписка Из СписокТипыДокументов Цикл
		Если ЭлементСписка.Пометка Тогда
			Если ТипЗнч(ЭлементСписка.Значение) = Тип("Тип") Тогда
				
				СписокВыбранныхТиповДокументов.Добавить(ЭлементСписка.Значение);
				
			ИначеЕсли ТипЗнч(ЭлементСписка.Значение) = Тип("ПеречислениеСсылка.ТипыПлатежныхДокументов") Тогда
				
				МассивВыбранныхТиповПлатежногоДокумента.Добавить(ЭлементСписка.Значение);
				Если ТипыПлатежногоДокументаПоступления.НайтиПоЗначению(ЭлементСписка.Представление) <> Неопределено
					И СписокВыбранныхТиповДокументов.НайтиПоЗначению(ТипПоступлениеБезналичныхДС) = Неопределено Тогда
					СписокВыбранныхТиповДокументов.Добавить(ТипПоступлениеБезналичныхДС);
				ИначеЕсли ТипыПлатежногоДокументаСписания.НайтиПоЗначению(ЭлементСписка.Представление) <> Неопределено
					И СписокВыбранныхТиповДокументов.НайтиПоЗначению(ТипСписаниеБезналичныхДС) = Неопределено Тогда
					СписокВыбранныхТиповДокументов.Добавить(ТипСписаниеБезналичныхДС);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	МассивВыбранныхТиповПлатежногоДокумента.Добавить(Неопределено);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЖурналПлатежей,
		"Тип",
		СписокВыбранныхТиповДокументов,
		ВидСравненияКомпоновкиДанных.ВСписке,,
		СписокВыбранныхТиповДокументов.Количество() > 0);
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЖурналПлатежей,
		"ТипПлатежногоДокумента",
		МассивВыбранныхТиповПлатежногоДокумента,
		ВидСравненияКомпоновкиДанных.ВСписке,,
		МассивВыбранныхТиповПлатежногоДокумента.Количество() > 0);
		
	// НастройкиДинамическихСписков
	РаботаСЖурналамиДокументов.УстановитьВидимостьГруппыНастройкиОбновленияПоУмолчанию(ЭтотОбъект, "ЖурналПлатежей");
	// Конец НастройкиДинамическихСписков
		
КонецПроцедуры

&НаКлиенте
Процедура СписокСкопировать(Команда)
	
	ОбщегоНазначенияУТКлиент.СкопироватьЭлемент(Элементы.ЖурналПлатежей);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокИзменить(Команда)
	
	ОбщегоНазначенияУТКлиент.ИзменитьЭлемент(Элементы.ЖурналПлатежей);
	
КонецПроцедуры

&НаКлиенте
Процедура КассаБанковскийСчетОтборНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Обработка.ЖурналДокументовПлатежи.Форма.ФормаВыбораИзСписка",
		Новый Структура("Список, Заголовок, Режим", СписокКассБанковскихСчетов, НСтр("ru = 'Кассы, Банковские счета'"), 1),
		Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КассаБанковскийСчетОтборОчистка(Элемент, СтандартнаяОбработка)
	
	СписокКассБанковскихСчетов.ЗаполнитьПометки(Ложь);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЖурналПлатежей,
		"БанковскийСчетКасса",
		СписокКассБанковскихСчетов,
		ВидСравненияКомпоновкиДанных.ВСписке,,
		Ложь);
	
	// НастройкиДинамическихСписков
	РаботаСЖурналамиДокументовКлиент.УстановитьВидимостьГруппыНастройкиОбновленияПоУмолчанию(ЭтотОбъект, "ЖурналПлатежей");
	// Конец НастройкиДинамическихСписков
	
КонецПроцедуры

&НаКлиенте
Процедура КассаБанковскийСчетОтборОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СписокЗначений") Тогда
		СтандартнаяОбработка = Ложь;
		СписокКассБанковскихСчетов = ВыбранноеЗначение;
		ЗаполнитьПредставлениеСпискаКассБанковскихСчетов();
		КассаБанковскийСчетОтборИзменениеНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КассаБанковскийСчетОтборИзменениеНаСервере()
	
	УстановитьОтборЖурналаПлатежей();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовСпискаКПоступлению

&НаКлиенте
Процедура КПоступлениюВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Ссылка = Элемент.ТекущиеДанные.Ссылка;
	Если ЗначениеЗаполнено(Ссылка) Тогда
		ПоказатьЗначение(, Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаКПоступлениюОтборПриИзменении(Элемент)
	
	ДатаКПоступлениюОтборПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДатаКПоступлениюОтборПриИзмененииНаСервере()
	
	УстановитьОтборКПоступлениюКОплате("КПоступлению");
	ОбновитьКПоступлению();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОперацийКПоступлениюОтборНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФорму("Перечисление.ХозяйственныеОперации.Форма.ФормаВыбораОперации",
		Новый Структура("СписокОпераций, Заголовок", СписокОперацийПоступления, НСтр("ru = 'Основания платежа'")), Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОперацийКПоступлениюОтборОчистка(Элемент, СтандартнаяОбработка)
	
	СписокОперацийПоступления.ЗаполнитьПометки(Ложь);
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОперацийКПоступлениюОтборОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
		
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СписокЗначений") Тогда
		
		СписокОперацийПоступления = ВыбранноеЗначение;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ПеречислениеСсылка.ОбластиПланированияПлатежей") Тогда
		
		Для Каждого ЭлементСписка Из СписокОперацийПоступления Цикл
			ЭлементСписка.Пометка = (ЭлементСписка.Значение = ВыбранноеЗначение);
		КонецЦикла;
	КонецЕсли;
	
	СписокОперацийПоступленияПредставление = СписокОперацийПредставление(СписокОперацийПоступления);
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаОплатыКПоступлениюОтборПриИзменении(Элемент)
	
	СписокФормОплаты = Новый Списокзначений;
	
	Если ЗначениеЗаполнено(ФормаОплатыКПоступлениюОтбор) Тогда
		СписокФормОплаты.Добавить(ФормаОплатыКПоступлениюОтбор);
		СписокФормОплаты.Добавить(ПредопределенноеЗначение("Перечисление.ФормыОплаты.ПустаяСсылка"));
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		КПоступлению,
		"ФормаОплаты",
		СписокФормОплаты,
		ВидСравненияКомпоновкиДанных.ВСписке,,
		ЗначениеЗаполнено(ФормаОплатыКПоступлениюОтбор));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовСпискаКОплате

&НаКлиенте
Процедура КОплатеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьЗначение(, Элементы.КОплате.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаКОплатеОтборПриИзменении(Элемент)
	
	ДатаКОплатеОтборПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДатаКОплатеОтборПриИзмененииНаСервере()
	
	УстановитьОтборКПоступлениюКОплате("КОплате");
	ОбновитьКОплате();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОперацийКОплатеОтборНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФорму("Перечисление.ХозяйственныеОперации.Форма.ФормаВыбораОперации",
		Новый Структура("СписокОпераций, Заголовок", СписокОперацийОплаты, НСтр("ru = 'Основания платежа'")), Элемент);

КонецПроцедуры

&НаКлиенте
Процедура СписокОперацийКОплатеОтборОчистка(Элемент, СтандартнаяОбработка)
	
	СписокОперацийОплаты.ЗаполнитьПометки(Ложь);
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОперацийКОплатеОтборОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
		
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СписокЗначений") Тогда
		
		СписокОперацийОплаты = ВыбранноеЗначение;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ПеречислениеСсылка.ОбластиПланированияПлатежей") Тогда
		
		Для Каждого ЭлементСписка Из СписокОперацийОплаты Цикл
			ЭлементСписка.Пометка = (ЭлементСписка.Значение = ВыбранноеЗначение);
		КонецЦикла;
	КонецЕсли;
	
	СписокОперацийОплатыПредставление = СписокОперацийПредставление(СписокОперацийОплаты);
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаОплатыКОплатеОтборПриИзменении(Элемент)
	
	СписокФормОплаты = Новый Списокзначений;
	
	Если ЗначениеЗаполнено(ФормаОплатыКОплатеОтбор) Тогда
		СписокФормОплаты.Добавить(ФормаОплатыКОплатеОтбор);
		СписокФормОплаты.Добавить(ПредопределенноеЗначение("Перечисление.ФормыОплаты.ПустаяСсылка"));
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		КОплате,
		"ФормаОплаты",
		СписокФормОплаты,
		ВидСравненияКомпоновкиДанных.ВСписке,,
		ЗначениеЗаполнено(ФормаОплатыКОплатеОтбор));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовЖурналаПлатежей

&НаКлиенте
Процедура ЖурналПлатежейПриАктивизацииСтроки(Элемент)
	
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		ТипДокумента = Элемент.ТекущиеДанные.Тип;
		Элементы.ПроведеноБанком.Доступность =
			(ТипДокумента = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств")
				Или ТипДокумента = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналПлатежейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияУТКлиент.ИзменитьЭлемент(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналПлатежейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	Если Копирование Тогда
		ОбщегоНазначенияУТКлиент.СкопироватьЭлемент(Элемент);
	Иначе
		СоздатьСписаниеБезналичныхДенежныхСредств(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОплатаПоставщику"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналПлатежейПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ОбщегоНазначенияУТКлиент.ИзменитьЭлемент(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналПлатежейПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ОбщегоНазначенияУТКлиент.УстановитьПометкуУдаления(Элемент, Заголовок);
	
КонецПроцедуры

&НаСервере
Процедура ЖурналПлатежейПриОбновленииСоставаПользовательскихНастроекНаСервере(Элемент, СтандартнаяОбработка)
	
	// НастройкиДинамическихСписков
	РаботаСЖурналамиДокументов.УстановитьВидимостьГруппыНастройкиОбновленияПоУмолчанию(ЭтотОбъект, "ЖурналПлатежей");
	// Конец НастройкиДинамическихСписков
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ОбработчикиКомандСпискаПлатежей

&НаКлиенте
Процедура СоздатьПоступлениеОтКлиентаНал(Команда)
	СоздатьПриходныйКассовыйОрдер(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента"));
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоступлениеОтКлиентаБезнал(Команда)
	СоздатьПоступлениеБезналичныхДенежныхСредств(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента"));
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоступлениеОтКлиентаПлатежнаяКарта(Команда)
	СоздатьЭквайринговуюОперацию(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента"))
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОплатуПоставщикуНал(Команда)
	СоздатьРасходныйКассовыйОрдер(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОплатаПоставщику"));
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОплатуПоставщикуБезнал(Команда)
	СоздатьСписаниеБезналичныхДенежныхСредств(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОплатаПоставщику"));
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПКО(Команда)
	СоздатьПриходныйКассовыйОрдер();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРКО(Команда)
	СоздатьРасходныйКассовыйОрдер();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПлатежноеПоручениеВходящее(Команда)
	СоздатьПоступлениеБезналичныхДенежныхСредств(, ПредопределенноеЗначение("Перечисление.ТипыПлатежныхДокументов.ПлатежноеПоручение"));
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПлатежноеПоручениеИсходящее(Команда)
	СоздатьСписаниеБезналичныхДенежныхСредств(, ПредопределенноеЗначение("Перечисление.ТипыПлатежныхДокументов.ПлатежноеПоручение"));
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВозвратОплатыКлиентуЭквайринг(Команда)
	СоздатьЭквайринговуюОперацию(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту"))
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОтчетБанкаПоЭквайрингу(Команда)
	ОткрытьФорму("Документ.ОтчетБанкаПоОперациямЭквайринга.ФормаОбъекта", , Элементы.ЖурналПлатежей);
КонецПроцедуры

&НаКлиенте
Процедура СписокПровести(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиДокументы(Элементы.ЖурналПлатежей, Заголовок,
		РаботаСЖурналамиДокументовКлиент.ПараметрыОбновленияСпискаДокументов(ЭтотОбъект, "ЖурналПлатежей"));
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОтменаПроведения(Команда)
	
	ОбщегоНазначенияУТКлиент.ОтменаПроведения(Элементы.ЖурналПлатежей, Заголовок,
		РаботаСЖурналамиДокументовКлиент.ПараметрыОбновленияСпискаДокументов(ЭтотОбъект, "ЖурналПлатежей"));
	
КонецПроцедуры

&НаКлиенте
Процедура СписокУстановитьСнятьПометкуУдаления(Команда)
	
	ОбщегоНазначенияУТКлиент.УстановитьПометкуУдаления(Элементы.ЖурналПлатежей, Заголовок, Неопределено,
		РаботаСЖурналамиДокументовКлиент.ПараметрыОбновленияСпискаДокументов(ЭтотОбъект, "ЖурналПлатежей"));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаВБанк(Команда)
	
	ОткрытьФорму("Обработка.КлиентБанк.Форма.ВыгрузкаВБанк",, Элементы.ЖурналПлатежей);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаВыписки(Команда)
	
	ОткрытьФорму("Обработка.КлиентБанк.Форма.ЗагрузкаВыписки",, Элементы.ЖурналПлатежей);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроведеноБанком(Команда)
	
	ОчиститьСообщения();
	
	Строки = Элементы.ЖурналПлатежей.ВыделенныеСтроки;
	Ссылки = ПроверитьПолучитьВыделенныеВСпискеСсылки(Строки, Элементы.ЖурналПлатежей);
	
	ДокументыКПроведению = УдалитьЛишниеДокументы(Ссылки);
	Если ДокументыКПроведению.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ПриУстановкеПроведенияБанком = Новый ОписаниеОповещения("ПриУстановкеПроведенияБанком", ЭтаФорма, ДокументыКПроведению);
	ПоказатьВводДаты(ПриУстановкеПроведенияБанком, ТекущаяДата(), НСтр("ru = 'Укажите дату проведения банком'"), ЧастиДаты.Дата);
	
КонецПроцедуры

&НаСервере
Функция УдалитьЛишниеДокументы(МассивДокументов)
	
	ДокументыКПроведению = Новый Массив;
	
	МассивТиповДокументов = Новый Массив;
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств"));
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств"));
	
	Для каждого ДокументСсылка Из МассивДокументов Цикл
		Если МассивТиповДокументов.Найти(ТипЗнч(ДокументСсылка)) <> Неопределено Тогда
			ДокументыКПроведению.Добавить(ДокументСсылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДокументыКПроведению;
	
КонецФункции

&НаКлиенте
Процедура ПриУстановкеПроведенияБанком(ДатаПроведенияБанком, МассивДокументов) Экспорт
	
	Если ДатаПроведенияБанком <> Неопределено Тогда
		
		КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(
			МассивДокументов,
			"ПроведеноБанком",
			Новый Структура("ДатаПроведенияБанком", ДатаПроведенияБанком));
		
		// НастройкиДинамическихСписков
		ОбновитьДанныеСпискаДокументовСЗамеромВремени("ЖурналПлатежей", Истина);
		// Конец НастройкиДинамическихСписков
		ОбновитьПодвалНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетОстаткиИДвиженияДенежныхСредств(Команда)
	
	ПараметрыФормы = Новый Структура("Отбор, КлючНазначенияИспользования, КлючВарианта, СформироватьПриОткрытии");
	
	Отбор = Новый Структура;
	
	ПериодОтчета = Новый СтандартныйПериод;
	ПериодОтчета.Вариант = ВариантСтандартногоПериода.ЭтотМесяц;
	Отбор.Вставить("ПериодОтчета", ПериодОтчета);
	
	ТипыДенежныхСредств = Новый СписокЗначений;
	ТипыДенежныхСредств.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДенежныхСредств.Безналичные"));
	ТипыДенежныхСредств.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДенежныхСредств.Наличные"));
	Отбор.Вставить("ТипДенежныхСредств", ТипыДенежныхСредств);
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Отбор.Вставить("Организация", Организация);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ЖурналПлатежей");
	ПараметрыФормы.Вставить("КлючВарианта", "ВедомостьПоДенежнымСредствам");
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ОткрытьФорму("Отчет.ВедомостьПоДенежнымСредствам.Форма", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетКонтрольДенежныхСредств(Команда)
	
	ПараметрыФормы = Новый Структура("Отбор, КлючНазначенияИспользования, КлючВарианта, СформироватьПриОткрытии");
	ПараметрыФормы.СформироватьПриОткрытии = Истина;
	
	Отбор = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		Отбор.Вставить("Организация", Организация);
	КонецЕсли;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
	ПараметрыФормы.КлючНазначенияИспользования = "КонтрольОперацийСДенежнымиСредствами";
	ПараметрыФормы.КлючВарианта = "КонтрольОперацийСДенежнымиСредствами";
	
	ОткрытьФорму("Отчет.КонтрольОперацийСДенежнымиСредствами.Форма", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.ЖурналПлатежей);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.ЖурналПлатежей, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.ЖурналПлатежей);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ОбработчикиКомандКОплате

&НаКлиенте
Процедура ОплатитьДокументНаличными(Команда)
	
	ДенежныеСредстваКлиент.ОплатитьСтрокиГрафика(Элементы.КОплате, "РасходныйКассовыйОрдер");
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьДокументПоБезналичномуРасчету(Команда)
	
	ДенежныеСредстваКлиент.ОплатитьСтрокиГрафика(Элементы.КОплате, "СписаниеБезналичныхДенежныхСредств");
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьОплатуНаличными(Команда)
	
	ДенежныеСредстваКлиент.ОплатитьСтрокиГрафика(Элементы.КПоступлению, "ПриходныйКассовыйОрдер");
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьОплатуПоБезналичномуРасчету(Команда)
	
	ДенежныеСредстваКлиент.ОплатитьСтрокиГрафика(Элементы.КПоступлению, "ПоступлениеБезналичныхДенежныхСредств");
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьОплатуПоЭквайрингу(Команда)
	
	Если Элементы.КПоступлению.ВыделенныеСтроки.Количество() = 1 Тогда
		ДенежныеСредстваКлиент.ОплатитьСтрокиГрафика(Элементы.КПоступлению, "ОперацияПоПлатежнойКарте");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(
		Команда, ЭтаФорма, Элементы.ЖурналПлатежей);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОплатыИзЯндексКассы(Команда)
	
	//++ Локализация
	// ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой
	ЗагрузитьОплатыИзЯндексКассыЛокализация(Команда);
	// Конец ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой
	//-- Локализация
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьБанковскийОрдерИсходящий(Команда)
	СоздатьСписаниеБезналичныхДенежныхСредств(, ПредопределенноеЗначение("Перечисление.ТипыПлатежныхДокументов.БанковскийОрдер"));
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИнкассовоеПоручениеВходящее(Команда)
	СоздатьПоступлениеБезналичныхДенежныхСредств(, ПредопределенноеЗначение("Перечисление.ТипыПлатежныхДокументов.ИнкассовоеПоручение"));
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПлатежноеТребованиеВходящее(Команда)
	СоздатьПоступлениеБезналичныхДенежныхСредств(, ПредопределенноеЗначение("Перечисление.ТипыПлатежныхДокументов.ПлатежноеТребование"));
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПлатежныйОрдерВходящий(Команда)
	СоздатьПоступлениеБезналичныхДенежныхСредств(, ПредопределенноеЗначение("Перечисление.ТипыПлатежныхДокументов.ПлатежныйОрдер"));
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИнкассовоеПоручениеИсходящее(Команда)
	СоздатьСписаниеБезналичныхДенежныхСредств(, ПредопределенноеЗначение("Перечисление.ТипыПлатежныхДокументов.ИнкассовоеПоручение"));
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПлатежноеТребованиеИсходящее(Команда)
	СоздатьСписаниеБезналичныхДенежныхСредств(, ПредопределенноеЗначение("Перечисление.ТипыПлатежныхДокументов.ПлатежноеТребование"));
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПлатежныйОрдерИсходящий(Команда)
	СоздатьСписаниеБезналичныхДенежныхСредств(, ПредопределенноеЗначение("Перечисление.ТипыПлатежныхДокументов.ПлатежныйОрдер"));
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовОбновить(Команда)
	
	// НастройкиДинамическихСписков
	ОбновитьДанныеСпискаДокументовСЗамеромВремени("ЖурналПлатежей");
	// Конец НастройкиДинамическихСписков
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Инициализация

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КПоступлениюДатаПлатежа.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КПоступлению.ДатаПлатежа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = НачалоДня(ТекущаяДатаСеанса());
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КОплатеДатаПлатежа.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КОплате.ДатаПлатежа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = НачалоДня(ТекущаяДатаСеанса());
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьРеквизиты()
	
	Валюта = Константы.ВалютаУправленческогоУчета.Получить();
	ИспользоватьНесколькоОрганизаций = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");

	
	СписокТипыДокументов            = СписокТипыДокументов();
	СписокКассБанковскихСчетов      = СписокКассБанковскихСчетов(Организация);
	ИнициализироватьСписокОперацийОплаты();
	ИнициализироватьСписокОперацийПоступления();
	ЗаполнитьТипыПлатежногоДокументаПоступления();
	ЗаполнитьТипыПлатежногоДокументаСписания();
	
	ЖурналПлатежей.Параметры.УстановитьЗначениеПараметра("ИдОбъектаПоступлениеБезналичныхДС",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ПоступлениеБезналичныхДенежныхСредств"));
	ЖурналПлатежей.Параметры.УстановитьЗначениеПараметра("ИдОбъектаСписаниеБезналичныхДС",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.СписаниеБезналичныхДенежныхСредств"));
	ЖурналПлатежей.Параметры.УстановитьЗначениеПараметра("ИдОбъектаПКО",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ПриходныйКассовыйОрдер"));
	ЖурналПлатежей.Параметры.УстановитьЗначениеПараметра("ИдОбъектаРКО",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.РасходныйКассовыйОрдер"));
	ЖурналПлатежей.Параметры.УстановитьЗначениеПараметра("ИдОбъектаОтчетБанкаПоОперациямЭквайринга",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ОтчетБанкаПоОперациямЭквайринга"));
	ЖурналПлатежей.Параметры.УстановитьЗначениеПараметра("ИдОбъектаОперацияПоПлатежнойКарте",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ОперацияПоПлатежнойКарте"));
	ЖурналПлатежей.Параметры.УстановитьЗначениеПараметра("ИдОбъектаОтражениеРасхожденийПриИнкассацииДенежныхСредств",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ОтражениеРасхожденийПриИнкассацииДенежныхСредств"));
	
	ОрганичениеДатыБудущихПлатежей = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоСледующегоМесяца);
	ДатаКПоступлению = ОрганичениеДатыБудущихПлатежей.Дата;
	ДатаКОплате = ОрганичениеДатыБудущихПлатежей.Дата;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	ВидимостьЭлементов = Новый Соответствие;
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ОрганизацияОтбор");
	МассивЭлементов.Добавить("КПоступлениюОрганизация");
	МассивЭлементов.Добавить("КОплатеОрганизация");
	
	ВидимостьЭлементов.Вставить(МассивЭлементов, ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций"));
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("КПоступлениюСоздатьДокументПоступленияНаОснованииПлатежнаяКарта");
	МассивЭлементов.Добавить("СоздатьПоступлениеОтКлиентаПлатежнаяКарта");
	МассивЭлементов.Добавить("СоздатьПоступлениеОтКлиентаПлатежнаяКартаПрочее");
	МассивЭлементов.Добавить("СоздатьВозвратОплатыКлиентуЭквайринг");
	МассивЭлементов.Добавить("СоздатьОтчетБанкаПоЭквайрингу");
	
	ВидимостьЭлементов.Вставить(МассивЭлементов, ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПлатежнымиКартами"));
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ЖурналПлатежейВалюта");
	МассивЭлементов.Добавить("КПоступлениюВалюта");
	МассивЭлементов.Добавить("КОплатеВалюта");
	
	ВидимостьЭлементов.Вставить(МассивЭлементов, ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют"));
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("СоздатьПоступлениеОтКлиентаНаличные");
	МассивЭлементов.Добавить("КПоступлениюСоздатьДокументПоступленияНаОснованииНаличные");
	МассивЭлементов.Добавить("СоздатьПКО");
	
	ВидимостьЭлементов.Вставить(МассивЭлементов, ПравоДоступа("Добавление", Метаданные.Документы.ПриходныйКассовыйОрдер));
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("СоздатьОплатуПоставщикуНаличные");
	МассивЭлементов.Добавить("КОплатеСоздатьДокументОплатыНаОснованииНаличные");
	МассивЭлементов.Добавить("СоздатьРКО");
	
	ВидимостьЭлементов.Вставить(МассивЭлементов, ПравоДоступа("Добавление", Метаданные.Документы.РасходныйКассовыйОрдер));
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("СоздатьПоступлениеОтКлиентаПлатежнаяКарта");
	МассивЭлементов.Добавить("СоздатьПоступлениеОтКлиентаПлатежнаяКартаПрочее");
	МассивЭлементов.Добавить("СоздатьВозвратОплатыКлиентуЭквайринг");
	
	ВидимостьЭлементов.Вставить(МассивЭлементов, ПравоДоступа("Добавление", Метаданные.Документы.ОперацияПоПлатежнойКарте)
		И ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПлатежнымиКартами"));
		
	Для каждого ЭлементСоответствия Из ВидимостьЭлементов Цикл
		Для каждого ИмяЭлемента Из ЭлементСоответствия.Ключ Цикл
			Элементы[ИмяЭлемента].Видимость = ЭлементСоответствия.Значение;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеСписками

&НаСервере
Функция МассивДинамическихСписков()
	
	МассивСписков = Новый Массив;
	МассивСписков.Добавить(ЖурналПлатежей);
	МассивСписков.Добавить(КПоступлению);
	МассивСписков.Добавить(КОплате);
	
	Возврат МассивСписков;
	
КонецФункции

&НаСервере
Процедура УстановитьОтборДинамическихСписков()
	
	СписокОрганизаций = Новый СписокЗначений;
	СписокОрганизаций.Добавить(Организация);
	
	Если ЗначениеЗаполнено(Организация)
		И ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс") Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ОбособленноеПодразделение
		|	И Организации.ГоловнаяОрганизация = &Организация
		|	И Организации.ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию");
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокОрганизаций.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ДинамическийСписок Из МассивДинамическихСписков() Цикл
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			ДинамическийСписок,
			"Организация",
			СписокОрганизаций,
			ВидСравненияКомпоновкиДанных.ВСписке,,
			ЗначениеЗаполнено(Организация));
	КонецЦикла;
	
	// НастройкиДинамическихСписков
	РаботаСЖурналамиДокументов.УстановитьВидимостьГруппыНастройкиОбновленияПоУмолчанию(ЭтотОбъект, "ЖурналПлатежей");
	// Конец НастройкиДинамическихСписков
	
	ОбластиПланирования = Новый Массив;
	Для каждого ЭлементСписка Из СписокОперацийПоступления Цикл
		Если ЭлементСписка.Пометка Тогда
			ОбластиПланирования.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		КПоступлению,
		"ОбластьПланирования",
		ОбластиПланирования,
		ВидСравненияКомпоновкиДанных.ВСписке,,
		ОбластиПланирования.Количество());
		
	ОбластиПланирования = Новый Массив;
	Для каждого ЭлементСписка Из СписокОперацийОплаты Цикл
		Если ЭлементСписка.Пометка Тогда
			ОбластиПланирования.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		КОплате,
		"ОбластьПланирования",
		ОбластиПланирования,
		ВидСравненияКомпоновкиДанных.ВСписке,,
		ОбластиПланирования.Количество());
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКонстантыСписков()
	
	ЖурналПлатежей.Параметры.УстановитьЗначениеПараметра("ОтчетБанкаПоЭквайрингу", НСтр("ru = 'Отчет банка по эквайрингу'"));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыЖурналаПлатежей()
	
	ЖурналПлатежей.Параметры.УстановитьЗначениеПараметра("НачалоПериода", НачалоПериода);
	ЖурналПлатежей.Параметры.УстановитьЗначениеПараметра("КонецПериода", ?(ЗначениеЗаполнено(КонецПериода), КонецДня(КонецПериода), КонецДня(Дата(3999, 12, 31))));
	
	// НастройкиДинамическихСписков
	РаботаСЖурналамиДокументов.УстановитьВидимостьГруппыНастройкиОбновленияПоУмолчанию(ЭтотОбъект, "ЖурналПлатежей");
	// Конец НастройкиДинамическихСписков
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборЖурналаПлатежей()
	
	СписокОтбора = Новый СписокЗначений;
	Для Каждого ЭлементСписка Из СписокКассБанковскихСчетов Цикл
		Если ЭлементСписка.Пометка Тогда
			СписокОтбора.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЖурналПлатежей,
																			"БанковскийСчетКасса",
																			СписокОтбора,
																			ВидСравненияКомпоновкиДанных.ВИерархии,
																			,
																			ЗначениеЗаполнено(СписокОтбора));
																			
	// НастройкиДинамическихСписков
	РаботаСЖурналамиДокументов.УстановитьВидимостьГруппыНастройкиОбновленияПоУмолчанию(ЭтотОбъект, "ЖурналПлатежей");
	// Конец НастройкиДинамическихСписков
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборКПоступлениюКОплате(ИмяСписка)
	
	ПараметрДата = Дата('39990101');
	Если ИмяСписка = "КПоступлению" Тогда
		ПараметрДата = ДатаКПоступлению;
	ИначеЕсли ИмяСписка = "КОплате" Тогда
		ПараметрДата = ДатаКОплате;
	КонецЕсли;
	
	Журнал = Этаформа[ИмяСписка]; // ДинамическийСписок
	Граница = ?(ЗначениеЗаполнено(ПараметрДата), КонецДня(ПараметрДата), Дата('39990101'));
	Журнал.Параметры.УстановитьЗначениеПараметра("ДатаПлатежа", Граница);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКПоступлению()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСКлиентами.Валюта КАК Валюта,
	|	РасчетыСКлиентами.КОплатеОстаток КАК СуммаКПоступлению
	|	
	|ПОМЕСТИТЬ СуммыКПоступлению
	|	
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(&ДатаПлатежа, ОбъектРасчетов.Объект <> НЕОПРЕДЕЛЕНО) КАК РасчетыСКлиентами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК КлючиАналитики
	|		ПО РасчетыСКлиентами.АналитикаУчетаПоПартнерам = КлючиАналитики.КлючАналитики
	|ГДЕ
	|	РасчетыСКлиентами.КОплатеОстаток > 0
	|	И (КлючиАналитики.Организация = &Организация ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСПоставщиками.Валюта,
	|	РасчетыСПоставщиками.КОплатеОстаток
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.Остатки(&ДатаПлатежа, ОбъектРасчетов.Объект ССЫЛКА Документ.ВозвратТоваровПоставщику) КАК РасчетыСПоставщиками
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК КлючиАналитики
	|		ПО РасчетыСПоставщиками.АналитикаУчетаПоПартнерам = КлючиАналитики.КлючАналитики
	|ГДЕ
	|	РасчетыСПоставщиками.КОплатеОстаток > 0
	|	И (КлючиАналитики.Организация = &Организация ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДенежныеСредства.Валюта,
	|	ДенежныеСредства.СуммаОстаток
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц.Остатки(&ДатаПлатежа,
	|		(Организация = &Организация ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))) КАК ДенежныеСредства
	|ГДЕ
	|	ДенежныеСредства.СуммаОстаток > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДенежныеСредства.Валюта,
	|	ДенежныеСредства.СуммаОстаток
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваВПути.Остатки(&ДатаПлатежа,
	|		(Организация = &Организация ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|		И ВидПереводаДенежныхСредств В (
	|				ЗНАЧЕНИЕ(Перечисление.ВидыПереводовДенежныхСредств.ИнкассацияИзБанка),
	|				ЗНАЧЕНИЕ(Перечисление.ВидыПереводовДенежныхСредств.ПеремещениеВДругуюКассу),
	|				ЗНАЧЕНИЕ(Перечисление.ВидыПереводовДенежныхСредств.ПоступлениеОтБанкаПоЭквайрингу),
	|				ЗНАЧЕНИЕ(Перечисление.ВидыПереводовДенежныхСредств.ИнкассацияВБанк),
	|				ЗНАЧЕНИЕ(Перечисление.ВидыПереводовДенежныхСредств.ПеречислениеНаДругойСчет))
	|		) КАК ДенежныеСредства
	|ГДЕ
	|	ДенежныеСредства.СуммаОстаток > 0
	|;
	|/////////////////////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(СуммыКПоступлению.СуммаКПоступлению
	|	* (ЕСТЬNULL(КурсВалюты.КурсЧислитель, 1) / ЕСТЬNULL(КурсВалюты.КурсЗнаменатель, 1))
	|	* (ЕСТЬNULL(КурсВалютыОтчета.КурсЗнаменатель, 1) / ЕСТЬNULL(КурсВалютыОтчета.КурсЧислитель, 1))) КАК СуммаКПоступлению
	|ИЗ
	|	СуммыКПоступлению КАК СуммыКПоступлению
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(, БазоваяВалюта = &БазоваяВалюта) КАК КурсВалюты
	|	ПО
	|		КурсВалюты.Валюта = СуммыКПоступлению.Валюта
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(, Валюта = &Валюта И БазоваяВалюта = &БазоваяВалюта) КАК КурсВалютыОтчета
	|	ПО
	|		ИСТИНА
	|";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаПлатежа",
		Новый Граница(?(ЗначениеЗаполнено(ДатаКПоступлению), КонецДня(ДатаКПоступлению), ДатаКПоступлению), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Валюта", Валюта);
	Запрос.УстановитьПараметр("БазоваяВалюта", ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Организация));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		СуммаКПоступлению = Выборка.СуммаКПоступлению;
	Иначе
		СуммаКПоступлению = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКОплате()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	РегистрАналитикаУчетаПоПартнерам.КлючАналитики КАК АналитикаУчетаПоПартнерам
	|ПОМЕСТИТЬ КлючиАналитикиУчетаПоПартнерам
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|ГДЕ
	|	РегистрАналитикаУчетаПоПартнерам.Организация = &Организация
	|	ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаПоПартнерам
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(-РасчетыСПоставщиками.КОплатеОстаток
	|	* (ЕСТЬNULL(КурсВалюты.КурсЧислитель, 1) / ЕСТЬNULL(КурсВалюты.КурсЗнаменатель, 1))
	|	* (ЕСТЬNULL(КурсВалютыОтчета.КурсЗнаменатель, 1) / ЕСТЬNULL(КурсВалютыОтчета.КурсЧислитель, 1))) КАК СуммаКОплате
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.Остатки(&ДатаПлатежа,
	|			АналитикаУчетаПоПартнерам В
	|				(ВЫБРАТЬ
	|					АналитикаУчетаПоПартнерам
	|				ИЗ
	|					КлючиАналитикиУчетаПоПартнерам)
	|			И ОбъектРасчетов.Объект <> НЕОПРЕДЕЛЕНО) КАК РасчетыСПоставщиками
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(, БазоваяВалюта = &БазоваяВалюта) КАК КурсВалюты
	|		ПО
	|			КурсВалюты.Валюта = РасчетыСПоставщиками.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(, Валюта = &Валюта И БазоваяВалюта = &БазоваяВалюта) КАК КурсВалютыОтчета
	|		ПО
	|			ИСТИНА
	|ГДЕ
	|	РасчетыСПоставщиками.КОплатеОстаток < 0
	|";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаПлатежа",
		Новый Граница(?(ЗначениеЗаполнено(ДатаКОплате), КонецДня(ДатаКОплате), ДатаКОплате), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Валюта", Валюта);
	Запрос.УстановитьПараметр("БазоваяВалюта", ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Организация));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		СуммаКОплате = Выборка.СуммаКОплате;
	Иначе
		СуммаКОплате = 0;
	КонецЕсли;
	
	СуммаОжидаемая = СуммаВсего - СуммаКОплате;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОстаткиДенежныхСредств()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(СУММА(ДенежныеСредстваБезналичные.КСписаниюОстаток
	|	* (ЕСТЬNULL(КурсВалюты.КурсЧислитель, 1) / ЕСТЬNULL(КурсВалюты.КурсЗнаменатель, 1))
	|	* (ЕСТЬNULL(КурсВалютыОтчета.КурсЗнаменатель, 1) / ЕСТЬNULL(КурсВалютыОтчета.КурсЧислитель, 1))), 0) КАК СуммаКСписанию
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваБезналичные.Остатки(,
	|		(Организация = &Организация ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))) КАК ДенежныеСредстваБезналичные
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(, БазоваяВалюта = &БазоваяВалюта) КАК КурсВалюты
	|	ПО
	|		КурсВалюты.Валюта = ДенежныеСредстваБезналичные.БанковскийСчет.ВалютаДенежныхСредств
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(, Валюта = &Валюта И БазоваяВалюта = &БазоваяВалюта) КАК КурсВалютыОтчета
	|	ПО
	|		ИСТИНА
	|;
	|/////////////////////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДенежныеСредстваНаличные.СуммаУпрОстаток        КАК СуммаВКассах
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваНаличные.Остатки(,
	|		(Организация = &Организация ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))) КАК ДенежныеСредстваНаличные
	|;
	|/////////////////////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДенежныеСредстваБезналичные.СуммаУпрОстаток     КАК СуммаНаСчетах
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваБезналичные.Остатки(,
	|		(Организация = &Организация ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))) КАК ДенежныеСредстваБезналичные
	|";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Валюта", Валюта);
	Запрос.УстановитьПараметр("БазоваяВалюта", ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Организация));

	
	Результат = Запрос.ВыполнитьПакет();
	
	Выборка = Результат[1].Выбрать();
	Выборка.Следующий();
	СуммаДоступныйОстатокВКассах = Выборка.СуммаВКассах;
	
	Выборка = Результат[2].Выбрать();
	Выборка.Следующий();
	СуммаДоступныйОстатокНаСчетах = Выборка.СуммаНаСчетах;
	
	СуммаВсего = СуммаДоступныйОстатокНаСчетах + СуммаДоступныйОстатокВКассах;
	
	Выборка = Результат[0].Выбрать();
	Если Выборка.Следующий() Тогда
		СуммаДоступныйОстатокНаСчетах = СуммаДоступныйОстатокНаСчетах + Выборка.СуммаКСписанию;
		СуммаВсего = СуммаВсего + Выборка.СуммаКСписанию;
	КонецЕсли;
	
	СуммаОжидаемая = СуммаВсего - СуммаКОплате;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПодвалНаСервере()
	
	ОбновитьОстаткиДенежныхСредств();
	ОбновитьКОплате();
	ОбновитьКПоступлению();
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеДокументов

&НаКлиенте
Процедура СоздатьПриходныйКассовыйОрдер(ХозяйственнаяОперация = Неопределено)

	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", ХозяйственнаяОперация);
	Если ЗначениеЗаполнено(Организация) Тогда
		ДанныеЗаполнения.Вставить("Организация", Организация);
	КонецЕсли;
	
	МассивКасс = МассивВыбранныхКассБанковскихСчетов(СписокКассБанковскихСчетов, "Касса");
	Если МассивКасс.Количество() = 1 Тогда
		ДанныеЗаполнения.Вставить("Касса", МассивКасс[0]);
	КонецЕсли;
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("Основание", ДанныеЗаполнения);
	
	ОткрытьФорму("Документ.ПриходныйКассовыйОрдер.ФормаОбъекта", СтруктураПараметры, Элементы.ЖурналПлатежей);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРасходныйКассовыйОрдер(ХозяйственнаяОперация = Неопределено)

	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", ХозяйственнаяОперация);
	Если ЗначениеЗаполнено(Организация) Тогда
		ДанныеЗаполнения.Вставить("Организация", Организация);
	КонецЕсли;
	
	МассивКасс = МассивВыбранныхКассБанковскихСчетов(СписокКассБанковскихСчетов, "Касса");
	Если МассивКасс.Количество() = 1 Тогда
		ДанныеЗаполнения.Вставить("Касса", МассивКасс[0]);
	КонецЕсли;
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("Основание", ДанныеЗаполнения);
	
	ОткрытьФорму("Документ.РасходныйКассовыйОрдер.ФормаОбъекта", СтруктураПараметры, Элементы.ЖурналПлатежей);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоступлениеБезналичныхДенежныхСредств(ХозяйственнаяОперация = Неопределено, ТипПлатежногоДокумента = Неопределено)

	Если Не ЗначениеЗаполнено(ТипПлатежногоДокумента) Тогда
		ТипПлатежногоДокумента = ПредопределенноеЗначение("Перечисление.ТипыПлатежныхДокументов.ПлатежноеПоручение");
	КонецЕсли;
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", ХозяйственнаяОперация);
	ДанныеЗаполнения.Вставить("ТипПлатежногоДокумента", ТипПлатежногоДокумента);
	Если ЗначениеЗаполнено(Организация) Тогда
		ДанныеЗаполнения.Вставить("Организация", Организация);
	КонецЕсли;
	
	МассивБанковскихСчетов = МассивВыбранныхКассБанковскихСчетов(СписокКассБанковскихСчетов, "БанковскийСчет");
	Если МассивБанковскихСчетов.Количество() = 1 Тогда
		ДанныеЗаполнения.Вставить("БанковскийСчет", МассивБанковскихСчетов[0]);
	КонецЕсли;
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("Основание", ДанныеЗаполнения);
	
	ОткрытьФорму("Документ.ПоступлениеБезналичныхДенежныхСредств.ФормаОбъекта", СтруктураПараметры, Элементы.ЖурналПлатежей);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСписаниеБезналичныхДенежныхСредств(ХозяйственнаяОперация = Неопределено, ТипПлатежногоДокумента = Неопределено)

	Если Не ЗначениеЗаполнено(ТипПлатежногоДокумента) Тогда
		ТипПлатежногоДокумента = ПредопределенноеЗначение("Перечисление.ТипыПлатежныхДокументов.ПлатежноеПоручение");
	КонецЕсли;
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", ХозяйственнаяОперация);
	ДанныеЗаполнения.Вставить("ТипПлатежногоДокумента", ТипПлатежногоДокумента);
	Если ЗначениеЗаполнено(Организация) Тогда
		ДанныеЗаполнения.Вставить("Организация", Организация);
	КонецЕсли;
	
	МассивБанковскихСчетов = МассивВыбранныхКассБанковскихСчетов(СписокКассБанковскихСчетов, "БанковскийСчет");
	Если МассивБанковскихСчетов.Количество() = 1 Тогда
		ДанныеЗаполнения.Вставить("БанковскийСчет", МассивБанковскихСчетов[0]);
	КонецЕсли;
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("Основание", ДанныеЗаполнения);
	
	ОткрытьФорму("Документ.СписаниеБезналичныхДенежныхСредств.ФормаОбъекта", СтруктураПараметры, Элементы.ЖурналПлатежей);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЭквайринговуюОперацию(ХозяйственнаяОперация = Неопределено)
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", ХозяйственнаяОперация);
	Если ЗначениеЗаполнено(Организация) Тогда
		ДанныеЗаполнения.Вставить("Организация", Организация);
	КонецЕсли;
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("Основание", ДанныеЗаполнения);
	
	ОткрытьФорму("Документ.ОперацияПоПлатежнойКарте.ФормаОбъекта", СтруктураПараметры, Элементы.ЖурналПлатежей);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ЗаполнитьПредставлениеСпискаКассБанковскихСчетов()
	
	СписокКассБанковскихСчетовПредставление = "";
	Для Каждого ЭлементСписка Из СписокКассБанковскихСчетов Цикл
		Если ЭлементСписка.Пометка Тогда
			СписокКассБанковскихСчетовПредставление = СписокКассБанковскихСчетовПредставление +
				?(ЗначениеЗаполнено(СписокКассБанковскихСчетовПредставление), ", ", "") + ЭлементСписка.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокТипыДокументов()
	
	Список = Новый СписокЗначений;
	
	Список.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"),                НСтр("ru = 'Приходный кассовый ордер'"));
	Список.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"),                НСтр("ru = 'Расходный кассовый ордер'"));
	
	Список.Добавить(Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение,     НСтр("ru = 'Платежное поручение входящее'"));
	Список.Добавить(Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение,     НСтр("ru = 'Платежное поручение исходящее'"));

	Если ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПлатежнымиКартами") Тогда
		Список.Добавить(Тип("ДокументСсылка.ОперацияПоПлатежнойКарте"),              НСтр("ru = 'Эквайринговая операция'"));
		Список.Добавить(Тип("ДокументСсылка.ОтчетБанкаПоОперациямЭквайринга"),       НСтр("ru = 'Отчет банка по эквайрингу'"));
	КонецЕсли;
	
	Список.Добавить(Тип("ДокументСсылка.ОтражениеРасхожденийПриИнкассацииДенежныхСредств"),
		НСтр("ru = 'Отражение расхождений при инкассации ДС'"));
	
	Возврат Список;
	
КонецФункции

&НаСервере
Функция ЗаполнитьТипыПлатежногоДокументаПоступления()
	
	ТипыПлатежногоДокументаПоступления.Очистить();
	ТипыПлатежногоДокументаПоступления.Добавить(НСтр("ru = 'Платежное поручение входящее'"));
	
КонецФункции

&НаСервере
Функция ЗаполнитьТипыПлатежногоДокументаСписания()
	
	ТипыПлатежногоДокументаСписания.Очистить();
	ТипыПлатежногоДокументаСписания.Добавить(НСтр("ru = 'Платежное поручение исходящее'"));
	
КонецФункции

&НаСервереБезКонтекста
Функция СписокКассБанковскихСчетов(Организация)
	
	Список = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КассыБанковскиеСчета.Ссылка КАК Ссылка
	|ИЗ
	|(ВЫБРАТЬ
	|	Кассы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Кассы КАК Кассы
	|ГДЕ
	|	НЕ Кассы.ПометкаУдаления
	|	И (Кассы.Владелец = &Организация
	|		ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	БанковскиеСчетаОрганизаций.Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	|ГДЕ
	|	НЕ БанковскиеСчетаОрганизаций.ПометкаУдаления
	|	И (БанковскиеСчетаОрганизаций.Владелец = &Организация
	|		ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|) КАК КассыБанковскиеСчета
	|";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Список.ЗагрузитьЗначения(Результат.Выгрузить().ВыгрузитьКолонку("Ссылка"));
	КонецЕсли;
	
	Возврат Список;
	
КонецФункции

&НаСервере
Процедура ИнициализироватьСписокОперацийПоступления()
	
	СписокОперацийПоступления.Очистить();
	СписокОперацийПоступления.Добавить(Перечисления.ОбластиПланированияПлатежей.РасчетыСКлиентами);
	СписокОперацийПоступления.Добавить(Перечисления.ОбластиПланированияПлатежей.ВозвратыОтПоставщиков);
	СписокОперацийПоступления.Добавить(Перечисления.ОбластиПланированияПлатежей.ДенежныеСредстваВПути);
	СписокОперацийПоступления.Добавить(Перечисления.ОбластиПланированияПлатежей.КредитыИлиЗаймыПолученные);
	СписокОперацийПоступления.Добавить(Перечисления.ОбластиПланированияПлатежей.Депозиты);
	СписокОперацийПоступления.Добавить(Перечисления.ОбластиПланированияПлатежей.ЗаймыВыданные);
	
	Элементы.СписокОперацийКПоступлениюОтбор.СписокВыбора.Очистить();
	Для каждого Операция Из СписокОперацийПоступления Цикл
		Элементы.СписокОперацийКПоступлениюОтбор.СписокВыбора.Добавить(Операция.Значение, Операция.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСписокОперацийОплаты()
	
	СписокОперацийОплаты.Очистить();
	СписокОперацийОплаты.Добавить(Перечисления.ОбластиПланированияПлатежей.РасчетыСПоставщиками);
	СписокОперацийОплаты.Добавить(Перечисления.ОбластиПланированияПлатежей.ВозвратыКлиентам);
	СписокОперацийОплаты.Добавить(Перечисления.ОбластиПланированияПлатежей.КредитыИлиЗаймыПолученные);
	СписокОперацийОплаты.Добавить(Перечисления.ОбластиПланированияПлатежей.Депозиты);
	СписокОперацийОплаты.Добавить(Перечисления.ОбластиПланированияПлатежей.ЗаймыВыданные);
	СписокОперацийОплаты.Добавить(Перечисления.ОбластиПланированияПлатежей.Аренда);
	
	Элементы.СписокОперацийКОплатеОтбор.СписокВыбора.Очистить();
	Для каждого Операция Из СписокОперацийОплаты Цикл
		Элементы.СписокОперацийКОплатеОтбор.СписокВыбора.Добавить(Операция.Значение, Операция.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокОперацийПредставление(СписокОпераций)
	
	СписокОперацийПредставление = "";
	Для Каждого ЭлементСписка Из СписокОпераций Цикл
		Если ЭлементСписка.Пометка Тогда
			СписокОперацийПредставление = СписокОперацийПредставление
				+ ?(ЗначениеЗаполнено(СписокОперацийПредставление), ", ", "")
				+ ?(ЗначениеЗаполнено(ЭлементСписка.Представление), ЭлементСписка.Представление, ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокОперацийПредставление;
	
КонецФункции

&НаСервере
Процедура СохранитьРабочиеЗначенияПолейФормы(СохранитьНеопределено = Ложь)
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ТекущаяОрганизация", "", ?(СохранитьНеопределено, Неопределено, Организация));
	
	БанковскийСчет = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Организация);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ТекущийБанковскийСчет", "", ?(СохранитьНеопределено, Неопределено, БанковскийСчет));
	
	Касса = Справочники.Кассы.ПолучитьКассуПоУмолчанию(Организация);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ТекущаяКасса", "", ?(СохранитьНеопределено, Неопределено, Касса));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция МассивВыбранныхКассБанковскихСчетов(СписокКассБанковскихСчетов, БанковскийСчетКасса)
	
	МассивВыбранныхКассБанковскихСчетов = Новый Массив;
	
	ФильтрПоТипу = "";
	Если БанковскийСчетКасса = "БанковскийСчет" Тогда
		ФильтрПоТипу = Тип("СправочникСсылка.БанковскиеСчетаОрганизаций");
	ИначеЕсли БанковскийСчетКасса = "Касса" Тогда
		ФильтрПоТипу = Тип("СправочникСсылка.Кассы");
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из СписокКассБанковскихСчетов Цикл
		Если ЭлементСписка.Пометка И ФильтрПоТипу = ТипЗнч(ЭлементСписка.Значение) Тогда
			МассивВыбранныхКассБанковскихСчетов.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивВыбранныхКассБанковскихСчетов;
	
КонецФункции

&НаСервере
Процедура ПерезаполнитьСписокКассБанковскихСчетов()
	
	ОбновленныйСписок = СписокКассБанковскихСчетов(Организация);
	Для каждого ЭлементСписка Из СписокКассБанковскихСчетов Цикл
		Элемент = ОбновленныйСписок.НайтиПоЗначению(ЭлементСписка.Значение);
		Если Элемент <> Неопределено Тогда
			Элемент.Пометка = ЭлементСписка.Пометка;
		КонецЕсли;
	КонецЦикла;
	
	СписокКассБанковскихСчетов = ОбновленныйСписок;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиДинамическихСписков

&НаСервере
Процедура ИнициироватьНастройкиДинамическихСписков()
	
	ПараметрыСписковДокументов = Новый Массив;
	
	СтруктураПараметровСписка = РаботаСЖурналамиДокументов.СтруктураФормированияНаФормеГруппыПользовательскихНастроекДинамическогоСписка();
	СтруктураПараметровСписка.ИмяСписка = "ЖурналПлатежей";
	СтруктураПараметровСписка.ГруппаРазмещенияНастройки = Элементы.ЖурналПлатежейОтбор;
	СтруктураПараметровСписка.ИмяРеквизитаРежимАвтообновления = "СписокДокументовРежимАвтообновления";
	СтруктураПараметровСписка.ИмяКомандыОбновленияСписка = Команды.СписокДокументовОбновить.Имя;
	ПараметрыСписковДокументов.Добавить(СтруктураПараметровСписка);
	
	РаботаСЖурналамиДокументов.ИнициироватьНастройкиДинамическихСписков(ЭтотОбъект, ПараметрыСписковДокументов);

КонецПроцедуры

&НаКлиенте
Процедура ОтображениеГруппыПользовательскихОтборовИНастроек(ИмяСписка)
	
	ДлительноеОбновление = РаботаСЖурналамиДокументовКлиент.ВремяОбновленияСпискаПревышаетДопутимое(ЭтотОбъект,
		ИмяСписка);
		
	Если ДлительноеОбновление Тогда
		РаботаСЖурналамиДокументовКлиент.УстановитьЗначениеНастройкиСпискаДокументов(ЭтотОбъект, ИмяСписка,
			"ПровереныНастройкиКомпоновкиДанных", Истина);
		СтруктураНастроекКомпоновкиДанных = ПолучитьИсполняемыеНастройкиКомпоновкиДанных(ИмяСписка);
		РаботаСЖурналамиДокументовКлиент.УстановитьЗначениеНастройкиСпискаДокументов(ЭтотОбъект, ИмяСписка,
			"НастройкиКомпоновкиДанных", СтруктураНастроекКомпоновкиДанных.НастройкиКомпоновкиДанных);
		РаботаСЖурналамиДокументовКлиент.УстановитьЗначениеНастройкиСпискаДокументов(ЭтотОбъект, ИмяСписка,
			"СтруктураПользовательскихНастроек", СтруктураНастроекКомпоновкиДанных.СтруктураПользовательскихНастроек);
	Иначе
		РаботаСЖурналамиДокументовКлиент.УстановитьЗначениеНастройкиСпискаДокументов(ЭтотОбъект, ИмяСписка,
			"ПровереныНастройкиКомпоновкиДанных", Ложь);
		РаботаСЖурналамиДокументовКлиент.УстановитьЗначениеНастройкиСпискаДокументов(ЭтотОбъект, ИмяСписка,
			"НастройкиКомпоновкиДанных", Новый НастройкиКомпоновкиДанных);
		РаботаСЖурналамиДокументовКлиент.УстановитьЗначениеНастройкиСпискаДокументов(ЭтотОбъект, ИмяСписка,
			"СтруктураПользовательскихНастроек", Новый Структура);
	КонецЕсли;

	РаботаСЖурналамиДокументовКлиент.ДокументыОтображениеГруппыПользовательскихОтборовИНастроек(ЭтотОбъект, ИмяСписка);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИсполняемыеНастройкиКомпоновкиДанных(ИмяСписка)
	
	ИмяЭлемента = РаботаСЖурналамиДокументов.ЗначениеНастройкиСпискаДокументов(ЭтотОбъект, ИмяСписка,
		"ИмяЭлементаСписка");
	ЭлементФормыСписок = Элементы[ИмяЭлемента];
	НастройкиКомпоновкиДанных = ЭлементФормыСписок.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();

	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("НастройкиКомпоновкиДанных", НастройкиКомпоновкиДанных);

	СписокПолейСоставногоТипа = РаботаСЖурналамиДокументов.ЗначениеНастройкиСпискаДокументов(ЭтотОбъект,
		ИмяСписка, "СписокПолейСоставногоТипа");

	СтруктураПользовательскихНастроек = РаботаСЖурналамиДокументов.ПроверитьПользовательскиеНастройкиДинамическогоСписка(
		НастройкиКомпоновкиДанных, СписокПолейСоставногоТипа);

	СтруктураВозврата.Вставить("СтруктураПользовательскихНастроек", СтруктураПользовательскихНастроек);
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Процедура УстановитьПараметрыОбновленияСписковДокументов(ДанныеУстарели, ДлительностьОбновления = Неопределено)
	
	ИмяНастройки = "СписокДокументовКэшНастроек";
	ИмяСписка = "";
	Для Каждого НастройкаСписокДокументов Из ЭтотОбъект[ИмяНастройки] Цикл
		ИмяСписка = НастройкаСписокДокументов.Ключ;
		РаботаСЖурналамиДокументовКлиент.УстановитьПараметрыОбновленияСпискаДокументов(ЭтотОбъект, ИмяСписка, ДанныеУстарели,
			ДлительностьОбновления);
		ОтображениеГруппыПользовательскихОтборовИНастроек(ИмяСписка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеСпискаДокументовСЗамеромВремени(ИмяСписка, УчитыватьПараметрАвтообновления = Ложь)

	Если Не УчитыватьПараметрАвтообновления Тогда

		ТребуетсяОбновлениеСписка = Истина;

	Иначе

		ТребуетсяОбновлениеСписка = РаботаСЖурналамиДокументовКлиент.ЗначениеНастройкиАвтообновленияСпискаДокументов(
			ЭтотОбъект, ИмяСписка);

		Если Не ТребуетсяОбновлениеСписка Тогда
			РаботаСЖурналамиДокументовКлиент.УстановитьПризнакОтображенияНеактуальныхДанныхВСписке(ЭтотОбъект, ИмяСписка);
		КонецЕсли;

	КонецЕсли;

	Если ТребуетсяОбновлениеСписка Тогда

		РаботаСЖурналамиДокументовКлиент.ОбновитьДанныеСпискаДокументовСЗамеромВремени(ЭтотОбъект, ИмяСписка);
		ОтображениеГруппыПользовательскихОтборовИНастроек(ИмяСписка);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокДокументовСобытиеОбработкаОповещения(ИмяСписка, Параметр = Неопределено)
	
	РаботаСЖурналамиДокументовКлиент.ОбновитьСписокДокументовСобытиеОбработкаОповещения(ЭтотОбъект, ИмяСписка, Параметр);
	ОтображениеГруппыПользовательскихОтборовИНастроек(ИмяСписка);

КонецПроцедуры

// Обработка события элемента формы.
// 
// Параметры:
//  Элемент - ПолеФормы
//@skip-check module-unused-method
&НаКлиенте
Процедура СписокДокументовОбработкаСобытияЭлементаФормы(Элемент)

	ДействиеСписка = РаботаСЖурналамиДокументовКлиент.ИмяСпискаДокументовПоИмениЭлементаФормы(ЭтотОбъект, Элемент.Имя);
	
	Если ДействиеСписка.ИмяСписка = "" Тогда
		Возврат;
	КонецЕсли;
	
	ИмяСписка = ДействиеСписка.ИмяСписка;
	Действие = ДействиеСписка.Действие;
	
	Если Действие = "Отборы" Или Действие = "Порядок" Или Действие = "УсловноеОформление" Тогда
		РаботаСЖурналамиДокументовКлиент.УстановитьЗначениеНастройкиСпискаДокументов(ЭтотОбъект, ИмяСписка,
			"ПровереныНастройкиКомпоновкиДанных", Истина);
		СтруктураНастроекКомпоновкиДанных = ПолучитьИсполняемыеНастройкиКомпоновкиДанных(ИмяСписка);
		РаботаСЖурналамиДокументовКлиент.УстановитьЗначениеНастройкиСпискаДокументов(ЭтотОбъект, ИмяСписка,
			"НастройкиКомпоновкиДанных", СтруктураНастроекКомпоновкиДанных.НастройкиКомпоновкиДанных);
		РаботаСЖурналамиДокументовКлиент.УстановитьЗначениеНастройкиСпискаДокументов(ЭтотОбъект, ИмяСписка,
			"СтруктураПользовательскихНастроек", СтруктураНастроекКомпоновкиДанных.СтруктураПользовательскихНастроек);
	КонецЕсли;
	
	Если Действие = "Отборы" Тогда
		РаботаСЖурналамиДокументовКлиент.ИсправитьПользовательскиеОтборыВСпискеДокументов(ЭтотОбъект, ИмяСписка);
	ИначеЕсли Действие = "Порядок" Тогда
		РаботаСЖурналамиДокументовКлиент.ИсправитьНастройкиСортировкиВСпискеДокументов(ЭтотОбъект, ИмяСписка);
	ИначеЕсли Действие = "УсловноеОформление" Тогда
		РаботаСЖурналамиДокументовКлиент.ИсправитьНастройкиУсловногоОформленияВСпискеДокументов(ЭтотОбъект, ИмяСписка);
	ИначеЕсли Действие = "Обновление" Тогда
		ОбновитьДанныеСпискаДокументовСЗамеромВремени(ИмяСписка);
	ИначеЕсли Действие = "УскорениеОбновленияСписка" Тогда
		РаботаСЖурналамиДокументовКлиент.СохранитьНастройкуПроизводительныйРежимОбновленияСписка(ЭтотОбъект, ИмяСписка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Функция ПроверитьПолучитьВыделенныеВСпискеСсылки(Строки, ДинамическийСписок)
	
	Если ТипЗнч(Строки) = Тип("Массив") Тогда
		ВыбранныеСтроки = Строки;
	Иначе
		ВыбранныеСтроки = Новый Массив;
		ВыбранныеСтроки.Добавить(Строки);
	КонецЕсли;
	
	МассивСсылок = Новый Массив;
	
	Для Итератор = 0 По ВыбранныеСтроки.Количество() - 1 Цикл
		Если ТипЗнч(ВыбранныеСтроки[Итератор]) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			ДанныеСтроки = ДинамическийСписок.ДанныеСтроки(ВыбранныеСтроки[Итератор]);
			МассивСсылок.Добавить(ДанныеСтроки.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивСсылок;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИспользуемыеТипыДокументов()

	ИспользуемыеТипыДокументов = Новый Массив;
	ИспользуемыеТипыДокументов.Добавить(Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств"));
	ИспользуемыеТипыДокументов.Добавить(Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств"));
	ИспользуемыеТипыДокументов.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
	ИспользуемыеТипыДокументов.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	ИспользуемыеТипыДокументов.Добавить(Тип("ДокументСсылка.ОперацияПоПлатежнойКарте"));
	ИспользуемыеТипыДокументов.Добавить(Тип("ДокументСсылка.ОтчетБанкаПоОперациямЭквайринга"));
	ИспользуемыеТипыДокументов.Добавить(Тип("ДокументСсылка.ОтражениеРасхожденийПриИнкассацииДенежныхСредств"));

	Возврат ИспользуемыеТипыДокументов;
	
КонецФункции

#КонецОбласти

//++ Локализация
#Область Локализация

#Область Локализация_ПодключаемыеОбработчикиСобытийФормы

&НаСервере
Процедура Подключаемый_ПриСозданииНаСервереЛокализация(Отказ, СтандартнаяОбработка)
	
	ПриСозданииНаСервере(Отказ, СтандартнаяОбработка);

	// ЭлектронноеВзаимодействие.ОбменСБанками
	ПараметрыСозданияФормыСписка = ОбменСБанкамиКлиентСервер.ПараметрыСозданияФормыСписка();
	ПараметрыСозданияФормыСписка.ДинамическийСписок.Изменить = Ложь;	
	ПараметрыСозданияФормыСписка.ПерепискаСБанками.ДобавитьСсылку = Ложь;
	ПараметрыСозданияФормыСписка.Реклама.Добавить = Ложь;
	ПараметрыСозданияФормыСписка.СписокДокументов.МестоРасположения = Элементы.ЖурналПлатежейСсылка.Имя;
	ПараметрыСозданияФормыСписка.СписокДокументов.ИмяЭлемента = "ЖурналПлатежей";
	ПараметрыСозданияФормыСписка.СписокДокументов.ИмяРеквизита = "ЖурналПлатежей";
	ПараметрыСозданияФормыСписка.ГруппаКоманд.Родитель = Элементы.ЖурналПлатежей.КоманднаяПанель;
	ПараметрыСозданияФормыСписка.ГруппаКоманд.МестоРасположения = Элементы.ПроведеноБанком.Имя;
	ОбменСБанками.ПриСозданииФормыСпискаНаСервере(ЭтотОбъект, ПараметрыСозданияФормыСписка);
	// Конец ЭлектронноеВзаимодействие.ОбменСБанками
	
	ИнициализироватьРеквизитыЛокализация();
	УстановитьВидимостьЛокализация();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаОповещенияЛокализация(ИмяСобытия, Параметр, Источник)
	
	ОбработкаОповещения(ИмяСобытия, Параметр, Источник);
	
	Если ИмяСобытия = "ОтправленоDirectBank" Тогда
		ОбработатьЗавершениеВыгрузкиПрямойОбмен(Параметр);
	КонецЕсли;
	
	ИменаСобытийОбновленияСпискаПлатежей = Новый Массив;
	ИменаСобытийОбновленияСпискаПлатежей.Добавить("ОбновитьСостояниеОбменСБанками");
	
	Если ИменаСобытийОбновленияСпискаПлатежей.Найти(ИмяСобытия) <> Неопределено
		И Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЖурналПлатежей Тогда
		// НастройкиДинамическихСписков
		ОбновитьДанныеСпискаДокументовСЗамеромВремени("ЖурналПлатежей");
		// Конец НастройкиДинамическихСписков
	КонецЕсли;
	
	// ЭлектронноеВзаимодействие.ОбменСБанками
	ПараметрыСозданияФормыСписка = ОбменСБанкамиКлиентСервер.ПараметрыСозданияФормыСписка();
	ПараметрыСозданияФормыСписка.СписокДокументов.ИмяЭлемента = "ЖурналПлатежей";
	
	ОбменСБанкамиКлиент.ОбработатьОповещениеФормыСписка(ЭтотОбъект, ИмяСобытия, Параметр, Источник, ПараметрыСозданияФормыСписка);
	// Конец ЭлектронноеВзаимодействие.ОбменСБанками
	
КонецПроцедуры

#КонецОбласти

#Область Локализация_ПодключаемыеОбработчикиСобытийЭлементовЖурналаПлатежей

// Обработчик выбора в расшифровке
//
// Параметры:
//    Элемент - ПолеФормы - Поле таблицы
//    ВыбраннаяСтрока - Число - Индекс строки
//    Поле - ПолеФормы - Активная колонка
//    СтандартнаяОбработка - Булево - Признак стандартной обработки
&НаКлиенте
Процедура Подключаемый_ЖурналПлатежейВыборЛокализация(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	МассивСсылок = ПроверитьПолучитьВыделенныеВСпискеСсылки(ВыбраннаяСтрока, Элементы.ЖурналПлатежей);
	// ЭлектронноеВзаимодействие.ОбменСБанками
	ОбменСБанкамиКлиент.ПриВыбореСтрокиИзСпискаДокументов(Элемент, МассивСсылок[0], Поле, СтандартнаяОбработка);
	// Конец ЭлектронноеВзаимодействие.ОбменСБанками
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияУТКлиент.ИзменитьЭлемент(Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область Локализация_Команды

// ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой
&НаКлиенте
Процедура ЗагрузитьОплатыИзЯндексКассыЛокализация(Команда)
	
	ОповещениеПолученияОперацийПоЯндексКассе =
		Новый ОписаниеОповещения("ОбработкаПолученияОперацийПоЯндексКассеЗавершение", ЭтотОбъект);
		
	ПараметрыЗагрузки = Новый Структура;
	ПараметрыЗагрузки.Вставить("Период", Неопределено);
	ПараметрыЗагрузки.Вставить("Организация", Неопределено);
	ПараметрыЗагрузки.Вставить("СДоговором", Ложь);
	
	ИнтеграцияСЯндексКассойУТКлиент.НачатьЗагрузкуОперацийПоЯндексКассе(ПараметрыЗагрузки, ОповещениеПолученияОперацийПоЯндексКассе);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПолученияОперацийПоЯндексКассеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда  // отменено пользователем
		Возврат;
	КонецЕсли;
	
	Если Результат.Свойство("Сообщения") Тогда 
		Для Каждого Сообщение из Результат.Сообщения Цикл 
			Сообщение.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда 
		Возврат;
	КонецЕсли;	
		
	ЗагруженныеОперации = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	СчетчикДокументов = 0;
	
 	Для каждого ЭлементКоллекции Из ЗагруженныеОперации Цикл
		СчетчикДокументов = СчетчикДокументов + ЗагруженныеОперации[ЭлементКоллекции.Ключ];
	КонецЦикла;
		
	ТекстСообщения = ?(СчетчикДокументов > 0, НСтр("ru = 'Операций по Яндекс.Кассе загружено: %1'")
		, НСтр("ru = 'Новых операций по Яндекс.Кассе не было'"));
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстСообщения, СчетчикДокументов);
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Загрузка завершена'"),
		"e1cib/list/Обработка.ЖурналДокументовПлатежи",
		ТекстСообщения);
	
	Оповестить("ЗавершенаЗагрузкаОперацииПоЯндексКассе");
	
	Если СчетчикДокументов > 0 Тогда 
		ОповеститьОбИзменении(Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств"));
	КонецЕсли;
		
КонецПроцедуры 
// Конец ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой

// ЭлектронноеВзаимодействие.ОбменСБанками
&НаКлиенте
Процедура Подключаемый_ВыполнитьСинхронизациюДиректБанк(Команда)
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ОбменСБанкамиКлиент.СинхронизироватьСБанком(Организация);
	Иначе
		ОбменСБанкамиКлиент.СинхронизироватьСБанком();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьСобытиеДиректБанк(
	Параметр1 = Неопределено,
	Параметр2 = Неопределено,
	Параметр3 = Неопределено)
	
	ОбменСБанкамиКлиент.ОбработатьСобытиеНаФормеСписка(Параметр1, Параметр2, Параметр3)
	
КонецПроцедуры
// Конец ЭлектронноеВзаимодействие.ОбменСБанками

#КонецОбласти

#Область ЛокализацияСлужебные

&НаСервере
Процедура ИнициализироватьРеквизитыЛокализация()
	
	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	СвойстваСписка.ТекстЗапроса = ТекстЗапросаЖурналПлатежей();
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.ЖурналПлатежей, СвойстваСписка);
	
	СписокТипыДокументов = СписокТипыДокументовЛокализация();
	ЗаполнитьТипыПлатежногоДокументаПоступленияЛокализация();
	ЗаполнитьТипыПлатежногоДокументаСписанияЛокализация();
	
КонецПроцедуры

&НаСервере
Функция ТекстЗапросаЖурналПлатежей()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	РеестрДокументов.Ссылка КАК Ссылка,
	|	РеестрДокументов.ДатаДокументаИБ КАК Дата,
	|	РеестрДокументов.НомерДокументаИБ КАК Номер,
	|	РеестрДокументов.ПометкаУдаления КАК ПометкаУдаления,
	|	РеестрДокументов.Проведен КАК Проведен,
	|	
	|	ТИПЗНАЧЕНИЯ(РеестрДокументов.Ссылка) КАК Тип,
	|	РеестрДокументов.Организация КАК Организация,
	|	РеестрДокументов.Подразделение КАК Подразделение,
	|	
	|	ВЫБОР КОГДА РеестрДокументов.ТипСсылки В (
	|			&ИдОбъектаПоступлениеБезналичныхДС,
	|			&ИдОбъектаПКО) ТОГДА
	|			РеестрДокументов.Сумма
	|		КОГДА РеестрДокументов.ТипСсылки = &ИдОбъектаОперацияПоПлатежнойКарте
	|			И РеестрДокументов.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента) ТОГДА
	|			РеестрДокументов.Сумма
	|		КОГДА РеестрДокументов.ТипСсылки = &ИдОбъектаОтражениеРасхожденийПриИнкассацииДенежныхСредств
	|			И РеестрДокументов.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОтражениеИзлишкаПриИнкассацииДенежныхСредств) ТОГДА
	|			РеестрДокументов.Сумма
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаПоступления,
	|	ВЫБОР КОГДА РеестрДокументов.ТипСсылки В (
	|			&ИдОбъектаСписаниеБезналичныхДС,
	|			&ИдОбъектаРКО) ТОГДА
	|			РеестрДокументов.Сумма
	|		КОГДА РеестрДокументов.ТипСсылки = &ИдОбъектаОперацияПоПлатежнойКарте
	|			И РеестрДокументов.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту) ТОГДА
	|			РеестрДокументов.Сумма
	|		КОГДА РеестрДокументов.ТипСсылки = &ИдОбъектаОтражениеРасхожденийПриИнкассацииДенежныхСредств
	|			И РеестрДокументов.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОтражениеНедостачиПриИнкассацииДенежныхСредств) ТОГДА
	|			РеестрДокументов.Сумма
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаСписания,
	|	
	|	РеестрДокументов.Валюта КАК Валюта,
	|	ВЫБОР
	|		КОГДА РеестрДокументов.Контрагент.Ключ ССЫЛКА Справочник.Организации
	|			ТОГДА ВЫРАЗИТЬ(РеестрДокументов.Контрагент.Ключ КАК Справочник.Организации)
	|		КОГДА РеестрДокументов.Контрагент.Ключ ССЫЛКА Справочник.Контрагенты
	|			ТОГДА ВЫРАЗИТЬ(РеестрДокументов.Контрагент.Ключ КАК Справочник.Контрагенты)
	|		КОГДА РеестрДокументов.Контрагент.Ключ ССЫЛКА Справочник.ФизическиеЛица
	|			ТОГДА ВЫРАЗИТЬ(РеестрДокументов.Контрагент.Ключ КАК Справочник.ФизическиеЛица)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ПолучательПлательщик,
	|	РеестрДокументов.Контрагент КАК КонтрагентКлюч,
	|	
	|	ВЫБОР КОГДА РеестрДокументов.ТипСсылки = &ИдОбъектаПоступлениеБезналичныхДС ТОГДА
	|			ДанныеПоступленияБезналичныхДС.ТипПлатежногоДокумента
	|		КОГДА РеестрДокументов.ТипСсылки = &ИдОбъектаСписаниеБезналичныхДС ТОГДА
	|			ДанныеСписанияБезналичныхДС.ТипПлатежногоДокумента
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ТипПлатежногоДокумента,
	|	
	|	ВЫБОР КОГДА РеестрДокументов.ТипСсылки = &ИдОбъектаПоступлениеБезналичныхДС ТОГДА
	|			Представление(ДанныеПоступленияБезналичныхДС.ТипПлатежногоДокумента)
	|		КОГДА РеестрДокументов.ТипСсылки = &ИдОбъектаСписаниеБезналичныхДС ТОГДА
	|			Представление(ДанныеСписанияБезналичныхДС.ТипПлатежногоДокумента)
	|	ИНАЧЕ
	|		Представление(ТИПЗНАЧЕНИЯ(РеестрДокументов.Ссылка))
	|	КОНЕЦ КАК Документ,
	|	
	|	ВЫБОР
	|		КОГДА РеестрДокументов.ТипСсылки = &ИдОбъектаОтчетБанкаПоОперациямЭквайринга ТОГДА
	|			&ОтчетБанкаПоЭквайрингу
	|		ИНАЧЕ
	|			Представление(РеестрДокументов.ХозяйственнаяОперация)
	|	КОНЕЦ КАК Операция,
	|	
	|	ВЫБОР
	|		КОГДА РеестрДокументов.МестоХранения.Ключ ССЫЛКА Справочник.БанковскиеСчетаОрганизаций
	|			ТОГДА ВЫРАЗИТЬ(РеестрДокументов.МестоХранения.Ключ КАК Справочник.БанковскиеСчетаОрганизаций)
	|		ИНАЧЕ ВЫРАЗИТЬ(РеестрДокументов.МестоХранения.Ключ КАК Справочник.Кассы)
	|	КОНЕЦ КАК БанковскийСчетКасса,
	|	
	|	ВЫБОР
	|		КОГДА РеестрДокументов.ТипСсылки В (
	|			&ИдОбъектаПоступлениеБезналичныхДС,
	|			&ИдОбъектаСписаниеБезналичныхДС
	|		) ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная)
	|		КОГДА РеестрДокументов.ТипСсылки В (
	|			&ИдОбъектаПКО,
	|			&ИдОбъектаРКО,
	|			&ИдОбъектаОтражениеРасхожденийПриИнкассацииДенежныхСредств
	|		) ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная)
	|		КОГДА РеестрДокументов.ТипСсылки В (
	|			&ИдОбъектаОперацияПоПлатежнойКарте,
	|			&ИдОбъектаОтчетБанкаПоОперациямЭквайринга
	|		) ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПлатежнаяКарта)
	|		ИНАЧЕ
	|			НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ФормаОплаты,
	|	
	|	ВЫБОР
	|		КОГДА РеестрДокументов.ТипСсылки В (
	|			&ИдОбъектаПоступлениеБезналичныхДС,
	|			&ИдОбъектаСписаниеБезналичныхДС
	|		) ТОГДА
	|			РеестрДокументов.ДатаОтраженияВУчете <> ДАТАВРЕМЯ(1, 1, 1)
	|		КОГДА РеестрДокументов.ТипСсылки В (
	|			&ИдОбъектаПКО,
	|			&ИдОбъектаРКО
	|		) ТОГДА
	|			НЕ ЛистКассовойКниги.Документ ЕСТЬ NULL
	|		КОГДА РеестрДокументов.ТипСсылки = &ИдОбъектаОперацияПоПлатежнойКарте ТОГДА
	|			РеестрДокументов.Проведен
	|			И ЕСТЬNULL(РасчетыПоЭквайрингу.СуммаОстаток, 0) = 0
	|			И 1 В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					1
	|				ИЗ
	|					РегистрНакопления.РасчетыПоЭквайрингу КАК РасчетыПоЭквайрингуДвижения
	|				ГДЕ
	|					РасчетыПоЭквайрингуДвижения.ЭквайринговыйТерминал = ВЫРАЗИТЬ(РеестрДокументов.Ссылка КАК Документ.ОперацияПоПлатежнойКарте).ЭквайринговыйТерминал
	|					И РасчетыПоЭквайрингуДвижения.НомерПлатежнойКарты = ВЫРАЗИТЬ(РеестрДокументов.Ссылка КАК Документ.ОперацияПоПлатежнойКарте).НомерПлатежнойКарты
	|					И РасчетыПоЭквайрингуДвижения.ДатаПлатежа = НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(РеестрДокументов.Ссылка КАК Документ.ОперацияПоПлатежнойКарте).Дата, ДЕНЬ)
	|					И РасчетыПоЭквайрингуДвижения.Регистратор ССЫЛКА Документ.ОтчетБанкаПоОперациямЭквайринга
	|					И (РасчетыПоЭквайрингуДвижения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|							И ВЫРАЗИТЬ(РеестрДокументов.Ссылка КАК Документ.ОперацияПоПлатежнойКарте).ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)
	|						ИЛИ РасчетыПоЭквайрингуДвижения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|							И ВЫРАЗИТЬ(РеестрДокументов.Ссылка КАК Документ.ОперацияПоПлатежнойКарте).ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)))
	|		ИНАЧЕ
	|			ИСТИНА
	|	КОНЕЦ КАК ПроведеноБанком,
	|	
	|	РеестрДокументов.Дополнительно КАК ОснованиеНазначение,
	|	РеестрДокументов.ИдентификаторЗаписи КАК ИдентификаторЗаписи,
	|	РеестрДокументов.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	РеестрДокументов.ТипСсылки КАК ТипСсылки,
	|	РеестрДокументов.Комментарий КАК Комментарий,
	|	РеестрДокументов.Ответственный КАК Ответственный,
	|	РеестрДокументов.Автор КАК Автор,
	|	ВЫБОР
	|		КОГДА ДокументыСОшибкамиПроверкиКонтрагентов.Документ ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьОшибкиПроверкиКонтрагентов,
	|	СостоянияОбменСБанками.Состояние КАК СостояниеДиректБанк,
	|	СостоянияОбменСБанками.ПредставлениеСостояния КАК ПредставлениеСостоянияДиректБанк,
	|	ВЫБОР
	|		КОГДА СостоянияОбменСБанками.Состояние В (
	|			ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.Аннулирован),
	|			ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.Отклонен),
	|			ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.ОшибкаПередачи)
	|		) ТОГДА 3
	|		КОГДА СостоянияОбменСБанками.Состояние В (
	|			ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.НаПодписи),
	|			ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.НеСформирован),
	|			ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.ТребуетсяПодтверждение),
	|			ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.ТребуетсяОтправка)
	|		) ТОГДА 1
	|		КОГДА СостоянияОбменСБанками.Состояние В (
	|			ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.ОжидаетсяВыписка),
	|			ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.ОжидаетсяИзвещениеОПолучении),
	|			ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.ОжидаетсяИсполнение)
	|		) ТОГДА 2
	|		КОГДА СостоянияОбменСБанками.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.ПлатежИсполнен)
	|			ТОГДА 0
	|		ИНАЧЕ 4
	|	КОНЕЦ КАК КартинкаДиректБанк,
	|	ВЫБОР
	|		КОГДА РеестрДокументов.Проведен
	|			ТОГДА 0
	|		КОГДА РеестрДокументов.ПометкаУдаления
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК НестандартнаяКартинка
	|ИЗ
	|	РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеБезналичныхДенежныхСредств КАК ДанныеПоступленияБезналичныхДС
	|		ПО ДанныеПоступленияБезналичныхДС.Ссылка = РеестрДокументов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеСписанияБезналичныхДС
	|		ПО ДанныеСписанияБезналичныхДС.Ссылка = РеестрДокументов.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЛистКассовойКниги.КассовыеОрдера КАК ЛистКассовойКниги
	|		ПО ЛистКассовойКниги.Документ = РеестрДокументов.Ссылка
	|			И РеестрДокументов.Проведен
	|			
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОперацияПоПлатежнойКарте КАК ЖурналОперацияПоПлатежнойКарте
	|		ПО ЖурналОперацияПоПлатежнойКарте.Ссылка = РеестрДокументов.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыПоЭквайрингу.Остатки КАК РасчетыПоЭквайрингу
	|			ПО РасчетыПоЭквайрингу.ЭквайринговыйТерминал = ЖурналОперацияПоПлатежнойКарте.ЭквайринговыйТерминал
	|				И РасчетыПоЭквайрингу.ДатаПлатежа = НАЧАЛОПЕРИОДА(ЖурналОперацияПоПлатежнойКарте.Дата, ДЕНЬ)
	|		
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыСОшибкамиПроверкиКонтрагентов КАК ДокументыСОшибкамиПроверкиКонтрагентов
	|		ПО РеестрДокументов.Ссылка = ДокументыСОшибкамиПроверкиКонтрагентов.Документ
	|			И (&ИспользованиеПроверкиВозможно)}
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОбменСБанками КАК СостоянияОбменСБанками
	|		ПО СостоянияОбменСБанками.СсылкаНаОбъект = РеестрДокументов.Ссылка}
	|		
	|ГДЕ
	|	РеестрДокументов.ТипСсылки В (
	|		&ИдОбъектаПоступлениеБезналичныхДС,
	|		&ИдОбъектаСписаниеБезналичныхДС,
	|		&ИдОбъектаПКО,
	|		&ИдОбъектаРКО,
	|		&ИдОбъектаОтчетБанкаПоОперациямЭквайринга,
	|		&ИдОбъектаОперацияПоПлатежнойКарте,
	|		&ИдОбъектаОтражениеРасхожденийПриИнкассацииДенежныхСредств
	|	)
	|	И НЕ РеестрДокументов.ДополнительнаяЗапись
	|	И (РеестрДокументов.ДатаОтраженияВУчете МЕЖДУ &НачалоПериода И &КонецПериода)
	|	
	|{ГДЕ
	|	РеестрДокументов.Ссылка.* КАК Ссылка,
	|	(ВЫБОР
	|		КОГДА РеестрДокументов.МестоХранения.Ключ ССЫЛКА Справочник.БанковскиеСчетаОрганизаций
	|			ТОГДА ВЫРАЗИТЬ(РеестрДокументов.МестоХранения.Ключ КАК Справочник.БанковскиеСчетаОрганизаций)
	|		ИНАЧЕ ВЫРАЗИТЬ(РеестрДокументов.МестоХранения.Ключ КАК Справочник.Кассы)
	|	КОНЕЦ).* КАК БанковскийСчетКасса,
	|	РеестрДокументов.Организация.* КАК Организация,
	|	РеестрДокументов.ДатаДокументаИБ КАК Дата,
	|	РеестрДокументов.НомерДокументаИБ КАК Номер,
	|	РеестрДокументов.ТипСсылки КАК ТипСсылки,
	|	РеестрДокументов.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	РеестрДокументов.Партнер.* КАК Партнер,
	|	(ВЫБОР
	|		КОГДА РеестрДокументов.Контрагент.Ключ ССЫЛКА Справочник.Организации
	|			ТОГДА ВЫРАЗИТЬ(РеестрДокументов.Контрагент.Ключ КАК Справочник.Организации)
	|		КОГДА РеестрДокументов.Контрагент.Ключ ССЫЛКА Справочник.Контрагенты
	|			ТОГДА ВЫРАЗИТЬ(РеестрДокументов.Контрагент.Ключ КАК Справочник.Контрагенты)
	|		КОГДА РеестрДокументов.Контрагент.Ключ ССЫЛКА Справочник.ФизическиеЛица
	|			ТОГДА ВЫРАЗИТЬ(РеестрДокументов.Контрагент.Ключ КАК Справочник.ФизическиеЛица)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ).* КАК ПолучательПлательщик,
	|	РеестрДокументов.Подразделение.* КАК Подразделение,
	|	РеестрДокументов.Ответственный.* КАК Ответственный,
	|	РеестрДокументов.Автор.* КАК Автор,
	|	РеестрДокументов.Дополнительно КАК ОснованиеНазначение,
	|	РеестрДокументов.Комментарий КАК Комментарий,
	|	РеестрДокументов.Проведен КАК Проведен,
	|	РеестрДокументов.ПометкаУдаления КАК ПометкаУдаления
	|}
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервереБезКонтекста
Функция СписокТипыДокументовЛокализация()
	
	Список = Новый СписокЗначений;
	
	Список.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"),                НСтр("ru = 'Приходный кассовый ордер'"));
	Список.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"),                НСтр("ru = 'Расходный кассовый ордер'"));
	
	Список.Добавить(Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение,     НСтр("ru = 'Платежное поручение входящее'"));
	Список.Добавить(Перечисления.ТипыПлатежныхДокументов.ИнкассовоеПоручение,    НСтр("ru = 'Инкассовое поручение входящее'"));
	Список.Добавить(Перечисления.ТипыПлатежныхДокументов.ПлатежноеТребование,    НСтр("ru = 'Платежное требование входящее'"));
	Список.Добавить(Перечисления.ТипыПлатежныхДокументов.ПлатежныйОрдер,         НСтр("ru = 'Платежный ордер входящий'"));
	
	Список.Добавить(Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение,     НСтр("ru = 'Платежное поручение исходящее'"));
	Список.Добавить(Перечисления.ТипыПлатежныхДокументов.ИнкассовоеПоручение,    НСтр("ru = 'Инкассовое поручение исходящее'"));
	Список.Добавить(Перечисления.ТипыПлатежныхДокументов.ПлатежноеТребование,    НСтр("ru = 'Платежное требование исходящее'"));
	Список.Добавить(Перечисления.ТипыПлатежныхДокументов.ПлатежныйОрдер,         НСтр("ru = 'Платежный ордер исходящий'"));
	Список.Добавить(Перечисления.ТипыПлатежныхДокументов.БанковскийОрдер,        НСтр("ru = 'Банковский ордер исходящий'"));

	Если ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПлатежнымиКартами") Тогда
		Список.Добавить(Тип("ДокументСсылка.ОперацияПоПлатежнойКарте"),              НСтр("ru = 'Эквайринговая операция'"));
		Список.Добавить(Тип("ДокументСсылка.ОтчетБанкаПоОперациямЭквайринга"),       НСтр("ru = 'Отчет банка по эквайрингу'"));
	КонецЕсли;
	
	Список.Добавить(Тип("ДокументСсылка.ОтражениеРасхожденийПриИнкассацииДенежныхСредств"),
		НСтр("ru = 'Отражение расхождений при инкассации ДС'"));
	
	Возврат Список;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьЛокализация()
	
	// ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой
	ЕстьПравоЗагрузкиОплатИзЯндексКассы =
		(Пользователи.РолиДоступны("ВыполнениеОбменовОнлайнОплаты") Или Пользователи.ЭтоПолноправныйПользователь())
		И ПолучитьФункциональнуюОпцию("ИспользоватьОнлайнОплаты");
	Элементы.ЗагрузитьОплатыИзЯндексКассы.Видимость = ЕстьПравоЗагрузкиОплатИзЯндексКассы;
	// Конец ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьЗавершениеВыгрузкиПрямойОбмен(Платежи)
	
	ДенежныеСредстваСервер.ЗаписатьДатуВыгрузкиПлатежей(Платежи);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьТипыПлатежногоДокументаПоступленияЛокализация()
	
	ТипыПлатежногоДокументаПоступления.Очистить();
	ТипыПлатежногоДокументаПоступления.Добавить(НСтр("ru = 'Платежное поручение входящее'"));
	ТипыПлатежногоДокументаПоступления.Добавить(НСтр("ru = 'Инкассовое поручение входящее'"));
	ТипыПлатежногоДокументаПоступления.Добавить(НСтр("ru = 'Платежное требование входящее'"));
	ТипыПлатежногоДокументаПоступления.Добавить(НСтр("ru = 'Платежный ордер входящий'"));
	
КонецФункции

&НаСервере
Функция ЗаполнитьТипыПлатежногоДокументаСписанияЛокализация()
	
	ТипыПлатежногоДокументаСписания.Очистить();
	ТипыПлатежногоДокументаСписания.Добавить(НСтр("ru = 'Платежное поручение исходящее'"));
	ТипыПлатежногоДокументаСписания.Добавить(НСтр("ru = 'Инкассовое поручение исходящее'"));
	ТипыПлатежногоДокументаСписания.Добавить(НСтр("ru = 'Платежное требование исходящее'"));
	ТипыПлатежногоДокументаСписания.Добавить(НСтр("ru = 'Платежный ордер исходящий'"));
	ТипыПлатежногоДокументаСписания.Добавить(НСтр("ru = 'Банковский ордер исходящий'"));
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Инициализация

#Если НаСервере Тогда

Если Не ПодключеныОбработчикиЛокализация И ПолучитьФункциональнуюОпцию("ПоддержкаПлатежейРФ") Тогда
	
	ПодключеныОбработчикиЛокализация = Истина;
	
	ПодключаемыеОбработчикиСобытийФормы = Новый Массив;
	ПодключаемыеОбработчикиСобытийФормы.Добавить("ПриСозданииНаСервере");
	ПодключаемыеОбработчикиСобытийФормы.Добавить("ОбработкаОповещения");
	
	Для каждого Обработчик Из ПодключаемыеОбработчикиСобытийФормы Цикл
		УстановитьДействие(Обработчик, "Подключаемый_" + Обработчик + "Локализация");
	КонецЦикла;
	
	ПодключаемыеОбработчикиСобытийЭлементов = Новый Соответствие; // Ключ - Элемент, Значение - Событие
	ПодключаемыеОбработчикиСобытийЭлементов.Вставить("ЖурналПлатежей",   "Выбор");
	
	Для каждого Обработчик Из ПодключаемыеОбработчикиСобытийЭлементов Цикл
		Элементы[Обработчик.Ключ].УстановитьДействие(
			Обработчик.Значение, "Подключаемый_" + Обработчик.Ключ + Обработчик.Значение + "Локализация");
	КонецЦикла;
	
КонецЕсли;

#КонецЕсли

#КонецОбласти
//-- Локализация
