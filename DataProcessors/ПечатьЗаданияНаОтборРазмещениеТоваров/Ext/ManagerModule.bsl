#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Печать

// Добавляет команду печати печатной формы Задания на отбор (размещение) товаров в коллекцию команд печати документа.
//
// Параметры:
//	КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//	ТипЗадания    - Строка - тип задания, для которого осуществляется печать.
//											Возможные значения:
//												"ЗаданиеНаОтбор"		- печать задания на отбор товаров.
//												"ЗаданиеНаРазмещение"	- печать задания на размещение товаров.
//												"ЗаданиеНаПересчет"		- печать задания на пересчет товаров.
//												"ЗаданиеНаДобор"		- печать задания на добор товаров.
//	Порядок      - Число - (необязательный) порядок размещения команды по отношению к другим командам печати.
//	УсловиеВидимости - Структура - Условие видимости печатной формы
//	
// Возвращаемое значение:
//	СтрокаТаблицыЗначений - элемент коллекции КомандыПечати, содержащий описание команды печати.
//
Функция ДобавитьКомандуПечати(КомандыПечати, ТипЗадания, Порядок = Неопределено, УсловиеВидимости = Неопределено) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьЗаданияНаОтборРазмещениеТоваров";
	КомандаПечати.Идентификатор = "ЗаданиеНаОтборРазмещениеТовара";
	КомандаПечати.Представление = ПредставлениеКомандыПечати(ТипЗадания);
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.ДополнительныеПараметры.Вставить("ТипЗадания", ТипЗадания);
	
	Если ТипЗадания = "ЗаданиеНаПересчет" Тогда
		КомандаПечати.ФункциональныеОпции = "ИспользоватьАдресноеХранениеСправочно";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Порядок) Тогда
		КомандаПечати.Порядок = Порядок;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловиеВидимости) Тогда
		КомандаПечати.УсловияВидимости.Добавить(УсловиеВидимости);
	КонецЕсли;
	
	Возврат КомандаПечати;
	
КонецФункции

// Возвращает правила печати печатной формы Задания на отбор (размещение) товаров.
//
// Возвращаемое значение:
//	Структура - структура со следующими ключами:
//		* ОперацияПоступления	- Булево - Истина	- признак того, что документ отражает приход товаров на склад.
//														Значение по умолчанию Ложь.
//		* ОтражениеИзлишков		- Булево - Истина	- признак того, что документ приходует излишки товаров.
//														Значение по умолчанию Ложь.
//		* ЭтоНакладная			- Булево - Истина	- признак того, что документ для которого осуществляется вывод
//														печатной формы является накладной. Значение по умолчанию Истина.
//		* КорректировкаТоваров	- Булево - Истина	- признак того, что документ предназначен для корректировки сведений
//														по товарам на складах. Значение по умолчанию Ложь.
//		* СкладыВТЧ				- Булево - Истина	- признак того, что информация о складах указывается в табличной части документа.
//														Значение по умолчанию Ложь.
//		* ИмяПоляСклад			- Строка			- имя реквизита документа, который хранит информацию о складе.
//														Значение по умолчанию "Склад".
//		* ИмяПоляПомещение		- Строка			- имя реквизита документа, который хранит информацию о складском помещении.
//														Указывается при наличии в документе реквизита.
//		* ИмяТЧТовары			- Строка			- имя табличной части документа, в которой хранится информация о складах.
//														Значение по умолчанию "Товары". Переопределяется, если информация о складах хранится в табличной части,
//														имеющей наименование отличное от значения по умолчанию.
//		* ЕстьУпаковочныеЛисты	- Булево - Истина	- признак того, что документ содержит информацию об упаковочных листах.
//														Используется в складских ордерах.
//														Значение по умолчанию Ложь.
//		* ИспользуютсяИсправленияДокумента	- Булево - признак того, что для документа могут вводиться исправления.
//
Функция ПравилаПечатиЗаданияНаОтборРазмещение() Экспорт
	
	ПравилаПечати = Новый Структура;
	ПравилаПечати.Вставить("ОперацияПоступления",	Ложь);
	ПравилаПечати.Вставить("ОтражениеИзлишков",		Ложь);
	ПравилаПечати.Вставить("ЭтоНакладная",			Истина);
	ПравилаПечати.Вставить("КорректировкаТоваров",	Ложь);
	ПравилаПечати.Вставить("СкладыВТЧ",				Ложь);
	ПравилаПечати.Вставить("ИмяПоляСклад",			"Склад");
	ПравилаПечати.Вставить("ИмяПоляПомещение",		"");
	ПравилаПечати.Вставить("ИмяТЧТовары",			"Товары");
	ПравилаПечати.Вставить("ЕстьУпаковочныеЛисты",	Ложь);
	ПравилаПечати.Вставить("ИспользуютсяИсправленияДокумента",	Ложь);
	
	Возврат ПравилаПечати;
	
КонецФункции

// Формирует печатные формы объекта.
//
// Параметры:
//	МассивОбъектов			- Массив Из ДокументСсылка	- ссылки на объекты которые нужно распечатать.
//	ПараметрыПечати			- Структура					- дополнительные параметры печати.
//	КоллекцияПечатныхФорм	- ТаблицаЗначений			- сформированные табличные документы.
//	ОбъектыПечати			- СписокЗначений			- объекты печати.
//	ПараметрыВывода			- Структура					- параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
		
	СтруктураТипов = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(МассивОбъектов);
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаданиеНаОтборРазмещениеТовара") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ЗаданиеНаОтборРазмещениеТовара",
			НСтр("ru = 'Задание на отбор (размещение) товара'"),
			СформироватьЗаданиеНаОтборРазмещениеТовара(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
	КонецЕсли;
	
	ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, СтруктураТипов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

// Возвращает печатную форму объекта.
//
// Параметры:
//	МассивОбъектов	- Массив Из ДокументСсылка	- ссылки на объекты которые нужно распечатать.
//	ОбъектыПечати	- СписокЗначений			- объекты печати.
//	ПараметрыПечати	- Структура					- дополнительные параметры печати.
//
// Возвращаемое значение:
//	ТабличныйДокумент - печатная форма объекта.
//
Функция СформироватьЗаданиеНаОтборРазмещениеТовара(МассивОбъектов, ОбъектыПечати, ПараметрыПечати) Экспорт
	
	Если ТипЗнч(МассивОбъектов) = Тип("Соответствие") Тогда
		СтруктураТипов = МассивОбъектов;
	Иначе
		СтруктураТипов = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(МассивОбъектов);
	КонецЕсли;
	
	Если ПараметрыПечати.Свойство("ТипЗадания") И
		ЗначениеЗаполнено(ПараметрыПечати.ТипЗадания) Тогда
		ТипЗадания = ПараметрыПечати.ТипЗадания;
	Иначе
		ТипЗадания = "ЗаданиеНаРазмещение";
	КонецЕсли;
	
	ПечатьПоДаннымДокумента	= ПараметрыПечати.Свойство("ПечатьПоДаннымДокумента");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_" + ТипЗадания;
	
	ПутьКМакету			= "Обработка.ПечатьЗаданияНаОтборРазмещениеТоваров.ПФ_MXL_ЗаданиеНаОтборРазмещениеТовара";
	КолонкаКодов = ФормированиеПечатныхФорм.ДополнительнаяКолонкаПечатныхФормДокументов();
	ИмяКолонкиКодов = КолонкаКодов.ИмяКолонки;
	ПредставлениеКолонкиКодов = КолонкаКодов.ПредставлениеКолонки;
	
	ВыводитьКоды		= ЗначениеЗаполнено(ИмяКолонкиКодов);
	ВыводитьУпаковки	= ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры")
							И Не (ПараметрыПечати.Свойство("БезДопКолонки"));
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
		
		ПервыйДокумент = Истина;
		
		НазваниеФормы = НазваниеПечатнойФормы(ТипЗадания);
		
		Если ТипЗадания = "ЗаданиеНаДобор" Тогда
			ДанныеПечати = Обработки.ПроверкаКоличестваТоваровВДокументе.ПолучитьДанныеДляПечатнойФормыЗаданиеНаДоборТоваров(
								ПараметрыПечати,
								ПараметрыПечати.Ордер);
		ИначеЕсли ПечатьПоДаннымДокумента Тогда
			МенеджерОбъекта	= ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтруктураОбъектов.Ключ);
			ДанныеПечати	= МенеджерОбъекта.ПолучитьДанныеДляПечатнойФормыОтборРазмещениеТоваров(ПараметрыПечати,
																									СтруктураОбъектов.Значение);
		Иначе
			МенеджерОбъекта			= ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтруктураОбъектов.Ключ);
			ПравилаДокумента		= МенеджерОбъекта.ПравилаПечатиЗаданияНаОтборРазмещение();
			ПравилаПечатиЗадания	= ?(ТипЗнч(ПравилаДокумента) <> Тип("Массив"),
										ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПравилаДокумента),
										ПравилаДокумента);
			ДанныеПечати			= ПолучитьДанныеЗаданияНаОтборРазмещениеТоваров(ПравилаПечатиЗадания,
																					СтруктураОбъектов.Ключ,
																					ТипЗадания,
																					СтруктураОбъектов.Значение);
		КонецЕсли;
		
		ДанныеПоОшибкам			= ДанныеПечати.РезультатПоОшибкам;
		ДанныеПоУпаковкам		= ДанныеПечати.РезультатПоУпаковкам;//РезультатЗапроса
		Если ДанныеПечати.Свойство("РезультатПоМаркам") Тогда
			ДанныеПоМаркам		= ДанныеПечати.РезультатПоМаркам; // РезультатЗапроса
			ВыборкаПоМаркам 	= ?(ЗначениеЗаполнено(ДанныеПоМаркам),
									ДанныеПоМаркам.Выбрать(),
									Неопределено);
		Иначе
			ВыборкаПоМаркам 	= Неопределено;
		КонецЕсли;
		ВыборкаПоШапке			= ДанныеПечати.РезультатПоШапке.Выбрать();
		ВыборкаПоРаспоряжениям	= ?(ЗначениеЗаполнено(ДанныеПечати.РезультатПоРаспоряжениям),
									ДанныеПечати.РезультатПоРаспоряжениям.Выбрать(),
									Неопределено);
		ВыборкаПоТабличнойЧасти	= ДанныеПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ВыборкаПоУпаковкам		= ?(ЗначениеЗаполнено(ДанныеПоУпаковкам),
									ДанныеПоУпаковкам.Выбрать(),
									Неопределено);
		ВыборкаПоСериям			= ?(ЗначениеЗаполнено(ДанныеПечати.РезультатПоСериям),
									ДанныеПечати.РезультатПоСериям.Выбрать(),
									Неопределено);
		
		Если ЗначениеЗаполнено(ДанныеПоОшибкам)
			И Не ДанныеПоОшибкам.Пустой() Тогда
			
			ВыборкаДокументовБезДанных = ДанныеПоОшибкам.Выбрать();
			
			Пока ВыборкаДокументовБезДанных.Следующий() Цикл
				СкладскяОперация = ?(ТипЗадания <> "ЗаданиеНаРазмещение", НСтр("ru = 'отгружаемая'"), НСтр("ru = 'размещаемая'"));
				
				ТекстОшибки = НСтр("ru = 'Невозможно напечатать ""%НазваниеФормы%"" для ""%Документ%"",
				|потому что в документе отсутствует %СкладскяОперация% номенклатура.'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НазваниеФормы%",		НазваниеФормы);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%",			ВыборкаДокументовБезДанных.Ссылка);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СкладскяОперация%",	СкладскяОперация);
				
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			КонецЦикла;
			
		КонецЕсли;
		
		ТекущийДокумент = Неопределено;
		
		Пока ВыборкаПоШапке.Следующий() Цикл
			
			ТекстОшибки = ТекстОшибкиПоДаннымДокумента(ВыборкаПоШапке,
														ВыборкаПоТабличнойЧасти,
														ТекущийДокумент,
														ТипЗадания,
														НазваниеФормы);
			
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
				
				Продолжить;
			КонецЕсли;
			
			ИспользуетсяСправочноеХранение	= ВыборкаПоШапке.ИспользуетсяСправочноеХранение;
			ИспользованиеРабочихУчастков	= ВыборкаПоШапке.ИспользованиеРабочихУчастков;
			ВыводитьУчастки					= ИспользованиеРабочихУчастков = Перечисления.ИспользованиеСкладскихРабочихУчастков.Использовать;
			ВыводитьПоУчету					= ?(ТипЗадания = "ЗаданиеНаПересчет", ВыборкаПоШапке.ВыводитьПоУчету, ВыводитьУпаковки);
			ИспользоватьУпаковки			= ВыводитьУпаковки
												Или ВыводитьПоУчету;
			НазванияОбластей                = НазванияОбластей(ИспользуетсяСправочноеХранение, ИспользоватьУпаковки, ВыводитьКоды);
			
			ОтборПоСкладу		= Новый Структура("Склад", ВыборкаПоШапке.Склад);
			ВыборкаПоСкладам	= ВыборкаПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПоСкладам.НайтиСледующий(ОтборПоСкладу) Цикл
				
				Макет = УправлениеПечатью.МакетПечатнойФормы(ПутьКМакету); // см. Обработки.ПечатьЗаданияНаОтборРазмещениеТоваров.Макеты.ПФ_MXL_ЗаданиеНаОтборРазмещениеТовара
				
				Если Не ПервыйДокумент Тогда
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				
				НомерСтроки			= 1;
				ПервыйДокумент		= Ложь;
				НомерСтрокиНачало	= ТабличныйДокумент.ВысотаТаблицы + 1;
				
				ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
				ОбластьЗаголовок.Параметры.Заполнить(Новый Структура("ТекстЗаголовка", НазваниеФормы));
				ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент,
																				Макет,
																				ОбластьЗаголовок,
																				ВыборкаПоШапке.Ссылка);
																				
				Если Не ВыборкаПоМаркам = Неопределено Тогда
					
					ВыборкаПоМаркам.Сбросить();
					Если ВыборкаПоМаркам.НайтиСледующий(Новый Структура("Ссылка",ВыборкаПоСкладам.Ссылка)) Тогда
						
						ВыводитьМарки = ВыборкаПоМаркам.ЕстьМаркируемаяПродукция;
						ОбластьЗаголовок.Параметры.ПризнакМаркировки = ?(ВыводитьМарки, "[М]", "");
					КонецЕсли;
					
				Иначе
					ВыводитьМарки = Ложь;
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(ОбластьЗаголовок);
				
				ПараметрыШапки = ПараметрыЗаполненияОбластиШапки(ВыборкаПоШапке);
				
				ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
				ОбластьШапка.Параметры.Заполнить(ПараметрыШапки);
				ТабличныйДокумент.Вывести(ОбластьШапка);
				
				Если ТипЗнч(ВыборкаПоШапке.Ссылка) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
					
					ПараметрыОснования = ПараметрыЗаполненияОбластиОснования(ВыборкаПоШапке.Ссылка, ВыборкаПоРаспоряжениям);
					
					ОбластьОснование = Макет.ПолучитьОбласть("Основание");
					ОбластьОснование.Параметры.Заполнить(ПараметрыОснования);
					ТабличныйДокумент.Вывести(ОбластьОснование);
					
					Если ВыборкаПоШапке.ОтгрузкаПоЗаданиюНаПеревозку Тогда
						ПараметрыЗаданияНаПеревозку = ПараметрыЗаполненияОбластиЗаданияНаПеревозку(ВыборкаПоШапке);
						
						ОбластьЗаданиеНаПеревозку = Макет.ПолучитьОбласть("ЗаданиеНаПеревозку");
						ОбластьЗаданиеНаПеревозку.Параметры.Заполнить(ПараметрыЗаданияНаПеревозку);
						ТабличныйДокумент.Вывести(ОбластьЗаданиеНаПеревозку);
					КонецЕсли;
					
				КонецЕсли;
				
				Если ТипЗадания = "ЗаданиеНаПересчет" Тогда
					ПараметрыОбластиИсполнитель = Новый Структура("ИсполнительПредставление",
																	ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ВыборкаПоШапке.ИсполнительПредставление,
																											ВыборкаПоШапке.Дата));
					
					ОбластьИсполнитель = Макет.ПолучитьОбласть("Исполнитель");
					ОбластьИсполнитель.Параметры.Заполнить(ПараметрыОбластиИсполнитель);
					ТабличныйДокумент.Вывести(ОбластьИсполнитель);
				КонецЕсли;
				
				ОбластьШапкаТаблицы		= Макет.ПолучитьОбласть(НазванияОбластей.ШапкаТаблицы);
				ОбластьРабочийУчасток	= Макет.ПолучитьОбласть(НазванияОбластей.РабочийУчасток);
				ОбластьСтрокаТаблицы	= Макет.ПолучитьОбласть(НазванияОбластей.СтрокаТаблицы);
				ОбластьПодвалТаблицы	= Макет.ПолучитьОбласть(НазванияОбластей.ПодвалТаблицы);
				
				ПараметрыОбластиШапкиТаблицы = ПараметрыЗаполненияОбластиШапкиТаблицы(ВыводитьКоды,
																						ПредставлениеКолонкиКодов,
																						ИспользоватьУпаковки,
																						Типзадания);
				
				ОбластьШапкаТаблицы.Параметры.Заполнить(ПараметрыОбластиШапкиТаблицы);
				ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
				
				ВыборкаРабочиеУчастки = ВыборкаПоСкладам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаРабочиеУчастки.Следующий() Цикл
					
					Если ВыводитьУчастки
						И ЗначениеЗаполнено(ВыборкаРабочиеУчастки.РабочийУчасток) Тогда
						
						ОбластьРабочийУчасток.Параметры.Заполнить(ВыборкаРабочиеУчастки);
						ТабличныйДокумент.Вывести(ОбластьРабочийУчасток);
						
					КонецЕсли;
					
					ВыборкаПоТовару = ВыборкаРабочиеУчастки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					Пока ВыборкаПоТовару.Следующий() Цикл
						
						ПредставлениеНоменклатуры	= ?(ЗначениеЗаполнено(ВыборкаПоТовару.Номенклатура),
														ВыборкаПоТовару.ПредставлениеНоменклатуры,
														НСтр("ru = '<пустая ячейка>'", ОбщегоНазначения.КодОсновногоЯзыка()));
						ПредставлениеСерии			= ПредставлениеСерии(ВыборкаПоТовару, ВыборкаПоСериям);
						
						ДопПараметрыПредставлениеНоменклатуры = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
						ДопПараметрыПредставлениеНоменклатуры.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
						
						Если ВыводитьМарки И ВыборкаПоТовару.МаркируемаяПродукция Тогда
							ОбластьСтрокаТаблицы.Параметры.ПризнакМаркировки = "[М]";
						Иначе	
							ОбластьСтрокаТаблицы.Параметры.ПризнакМаркировки = "";
						КонецЕсли; 
						
						Товар = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(ПредставлениеНоменклатуры,
																							ВыборкаПоТовару.ПредставлениеХарактеристики,
																							Неопределено,
																							ПредставлениеСерии,
																							ДопПараметрыПредставлениеНоменклатуры);
						
						ПараметрыОбластиСтрокиТЧ = Новый Структура;
						ПараметрыОбластиСтрокиТЧ.Вставить("НомерСтроки",	НомерСтроки);
						ПараметрыОбластиСтрокиТЧ.Вставить("Товар",			Товар);
						
						Если ВыводитьКоды Тогда
							ПараметрыОбластиСтрокиТЧ.Вставить("Артикул", ВыборкаПоТовару[ИмяКолонкиКодов]);
						КонецЕсли;
						
						Если ИспользуетсяСправочноеХранение Тогда
							ДополнительныеЯчейки = ДополнительныеЯчейкиТовара(ВыборкаПоТовару,
																				Не ЗначениеЗаполнено(ВыборкаПоУпаковкам));
							
							ПараметрыОбластиСтрокиТЧ.Вставить("ДополнительныеЯчейки", ДополнительныеЯчейки);
						КонецЕсли;
						
						ПараметрыЗаполненияУпаковок = ПараметрыЗаполненияУпаковок(ВыборкаПоТовару,
																					ВыборкаПоУпаковкам,
																					ИспользоватьУпаковки);
						
						ОбластьСтрокаТаблицы.Параметры.Заполнить(ВыборкаПоТовару);
						ОбластьСтрокаТаблицы.Параметры.Заполнить(ПараметрыОбластиСтрокиТЧ);
						ОбластьСтрокаТаблицы.Параметры.Заполнить(ПараметрыЗаполненияУпаковок);
						ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
						
						НомерСтроки = НомерСтроки + 1;
						
					КонецЦикла;
					
				КонецЦикла;
				
				ТабличныйДокумент.Вывести(ОбластьПодвалТаблицы);
				
				УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати,
					ВыборкаПоШапке.Ссылка);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Печать

Функция ПредставлениеКомандыПечати(ТипЗадания)
	
	ПредставлениеКоманды = "";
	
	Если ТипЗадания = "ЗаданиеНаРазмещение" Тогда
		ПредставлениеКоманды = НСтр("ru = 'Задание на размещение товаров'");
	ИначеЕсли ТипЗадания = "ЗаданиеНаОтбор" Тогда
		ПредставлениеКоманды = НСтр("ru = 'Задание на отбор товаров'");;
	ИначеЕсли ТипЗадания = "ЗаданиеНаПересчет" Тогда
		ПредставлениеКоманды = НСтр("ru = 'Бланк задания на пересчет товаров (с ячейками справочно)'");
	Иначе
		ПредставлениеКоманды = НСтр("ru = 'Задание на добор товаров'");
	КонецЕсли;
	
	Возврат ПредставлениеКоманды;
	
КонецФункции

Функция НазваниеПечатнойФормы(ТипЗадания)
	
	Если ТипЗадания = "ЗаданиеНаРазмещение" Тогда
		ТекстЗаголовка = НСтр("ru = 'Задание на размещение товаров'", ОбщегоНазначения.КодОсновногоЯзыка());
	ИначеЕсли ТипЗадания = "ЗаданиеНаОтбор" Тогда
		ТекстЗаголовка = НСтр("ru = 'Задание на отбор товаров'", ОбщегоНазначения.КодОсновногоЯзыка());
	ИначеЕсли ТипЗадания = "ЗаданиеНаДобор" Тогда
		ТекстЗаголовка = НСтр("ru = 'Задание на добор товаров'", ОбщегоНазначения.КодОсновногоЯзыка());
	Иначе
		ТекстЗаголовка = НСтр("ru = 'Задание на пересчет товаров'", ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	Возврат ТекстЗаголовка;
	
КонецФункции

// Параметры:
//	ПравилаПечати - см. ПравилаПечатиЗаданияНаОтборРазмещение.
//	ИмяДокумента - Строка - полное имя документа.
//	ТипЗадания - Строка - строковый идентификатор типа складского задания.
//	МассивОбъектов - Массив из ДокументСсылка - коллекция ссылок на документы информационной базы.
//	
// Возвращаемое значение:
//	Структура - структура со следующими ключами:
//		*РезультатПоОшибкам			- РезультатЗапроса	- ошибки в данных документа, из-за которых невозможно вывести
//															документ на печать.
//		*РезультатПоРаспоряжениям	- Неопределено		- информация о распоряжениях на отгрузку документа.
//		*РезультатПоШапке			- РезультатЗапроса	- данные шапки документа, используемые для печати Задания
//															на отбор (размещение) товаров.
//		*РезультатПоТабличнойЧасти	- РезультатЗапроса	- данные товарной части документа, используемые для печати
//															Задания на отбор (размещение) товаров.
//		*РезультатПоУпаковкам		- РезультатЗапроса	- данные об упаковках товаров табличной части документа,
//															используемые для печати Задания на отбор (размещение) товаров.
//		*РезультатПоСериям			- Неопределено		- данные о сериях товаров табличной части документа,
//															используемые для печати Задания на отбор (размещение) товаров.
//
Функция ПолучитьДанныеЗаданияНаОтборРазмещениеТоваров(ПравилаПечати, ИмяДокумента, ТипЗадания, МассивОбъектов)
	
	ОперацияПоступления			= ТипЗадания = "ЗаданиеНаРазмещение";
	ВидДвижения					= ?(ОперацияПоступления, ВидДвиженияНакопления.Приход, ВидДвиженияНакопления.Расход);
	РазделительПакетовЗапроса	= ОбщегоНазначения.РазделительПакетаЗапросов();
	ИспользуютсяПомещения		= ?(ПравилаПечати.Количество() > 0,
									ЗначениеЗаполнено(ПравилаПечати[0].ИмяПоляПомещение),
									Ложь);
	
	ТекстыЗапроса = Новый Массив;
	ТекстыЗапроса.Добавить(ТекстЗапросаВТДанныхЗадания(ПравилаПечати, ИмяДокумента));
	ТекстыЗапроса.Добавить(ТекстЗапросаВТТоварыДокумента(ПравилаПечати, ИмяДокумента));
	ТекстыЗапроса.Добавить(ТекстЗапросаВТТоварыЗадания(ИмяДокумента));
	ТекстыЗапроса.Добавить(ТекстЗапросаВТТоваровСуммированная());
	ТекстыЗапроса.Добавить(ТекстЗапросаДокументовБезТоваров(ИмяДокумента));
	ТекстыЗапроса.Добавить(ШаблонТекстаЗапросаДанныхЗадания(Ложь));
	ТекстыЗапроса.Добавить(ТекстЗапросаТоварыЗадания(ИспользуютсяПомещения, ОперацияПоступления));
	ТекстыЗапроса.Добавить(ТекстЗапросаУпаковкиЗадания(ИспользуютсяПомещения, ОперацияПоступления));
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, РазделительПакетовЗапроса);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДанныеЗадания", "ДанныеЗадания");
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивОбъектов",			МассивОбъектов);
	Запрос.УстановитьПараметр("ОперацияПоступления",	ОперацияПоступления);
	Запрос.УстановитьПараметр("ВидДвижения",			ВидДвижения);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	МаксимальныйИндекс = Результат.ВГраница();
	
	ДанныеЗадания = Новый Структура;
	ДанныеЗадания.Вставить("РезультатПоОшибкам",		Результат[МаксимальныйИндекс - 3]);
	ДанныеЗадания.Вставить("РезультатПоРаспоряжениям",	Неопределено);
	ДанныеЗадания.Вставить("РезультатПоШапке",			Результат[МаксимальныйИндекс - 2]);
	ДанныеЗадания.Вставить("РезультатПоТабличнойЧасти",	Результат[МаксимальныйИндекс - 1]);
	ДанныеЗадания.Вставить("РезультатПоУпаковкам",		Результат[МаксимальныйИндекс]);
	ДанныеЗадания.Вставить("РезультатПоСериям",			Неопределено);
	
	Возврат ДанныеЗадания;
	
КонецФункции

#Область ТекстыЗапросовДанныхЗадания

Функция ТекстЗапросаВТДанныхЗадания(ПравилаПечати, ИмяДокумента)
	
	ТекстыВложенныхТаблиц	= Новый Массив;
	ТекстОбъединения		= ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении();
	ТекстЗапроса			= ШаблонТекстаЗапросаДанныхЗадания(Истина);
	
	Для Каждого ПравилоПечати Из ПравилаПечати Цикл
		ТекстЗапросаДанныхДокумента = ТекстЗапросаДанныхДокумента(ИмяДокумента, ПравилоПечати);
		
		ТекстыВложенныхТаблиц.Добавить(ТекстЗапросаДанныхДокумента);
	КонецЦикла;
	
	ТекстЗапросаВТ	= СтрСоединить(ТекстыВложенныхТаблиц, ТекстОбъединения);
	ТекстЗапроса	= СтрЗаменить(ТекстЗапроса, "&ДанныеЗадания", "(" + ТекстЗапросаВТ + ")");
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ШаблонТекстаЗапросаДанныхЗадания(ЭтоВременнаяТаблица)
	
	ШаблонТекстаЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеЗадания.Ссылка							КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ДанныеЗадания.Ссылка)				КАК СсылкаПредставление,
	|	ДанныеЗадания.Номер								КАК Номер,
	|	ДанныеЗадания.Дата								КАК Дата,
	|	ДанныеЗадания.НомерИсправляемогоДокумента		КАК НомерИсправляемогоДокумента,
	|	ДанныеЗадания.ДатаИсправляемогоДокумента		КАК ДатаИсправляемогоДокумента,
	|	ДанныеЗадания.Склад								КАК Склад,
	|	ПРЕДСТАВЛЕНИЕ(ДанныеЗадания.Склад)				КАК СкладПредставление,
	|	ДанныеЗадания.Помещение							КАК Помещение,
	|	ПРЕДСТАВЛЕНИЕ(ДанныеЗадания.Помещение)			КАК ПомещениеПредставление,
	|	ДанныеЗадания.ЭтоНакладная						КАК ЭтоНакладная,
	|	ДанныеЗадания.ИспользуетсяАдресноеХранение		КАК ИспользуетсяАдресноеХранение,
	|	ДанныеЗадания.ИспользуетсяСправочноеХранение	КАК ИспользуетсяСправочноеХранение,
	|	ДанныеЗадания.ИспользованиеРабочихУчастков		КАК ИспользованиеРабочихУчастков,
	|	ДанныеЗадания.ИспользуетсяОрдернаяСхема			КАК ИспользуетсяОрдернаяСхема
	|ПОМЕСТИТЬ ДанныеЗадания
	|ИЗ
	|	&ДанныеЗадания КАК ДанныеЗадания";
	
	Если ЭтоВременнаяТаблица Тогда
		ШаблонТекстаЗапроса = ШаблонТекстаЗапроса + "
		|ГДЕ
		|	ДанныеЗадания.ОперацияПоступления = &ОперацияПоступления";
	Иначе
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "ПОМЕСТИТЬ ДанныеЗадания", "");
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "ДанныеЗадания.ИспользуетсяОрдернаяСхема", "МИНИМУМ(ДанныеЗадания.ИспользуетсяОрдернаяСхема)");
		
		ШаблонТекстаЗапроса = ШаблонТекстаЗапроса + "
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеЗадания.Ссылка,
		|	ДанныеЗадания.Номер,
		|	ДанныеЗадания.Дата,
		|	ДанныеЗадания.НомерИсправляемогоДокумента,
		|	ДанныеЗадания.ДатаИсправляемогоДокумента,
		|	ДанныеЗадания.Склад,
		|	ДанныеЗадания.Помещение,
		|	ДанныеЗадания.ЭтоНакладная,
		|	ДанныеЗадания.ИспользуетсяАдресноеХранение,
		|	ДанныеЗадания.ИспользуетсяСправочноеХранение,
		|	ДанныеЗадания.ИспользованиеРабочихУчастков
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДанныеЗадания.Ссылка,
		|	ДанныеЗадания.Склад";
	КонецЕсли;
	
	Возврат ШаблонТекстаЗапроса;
	
КонецФункции

Функция ТекстЗапросаДанныхДокумента(ИмяДокумента, ПравилоПечати)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка					КАК Ссылка,
	|	ДанныеДокумента.Номер					КАК Номер,
	|	ДанныеДокумента.Дата					КАК Дата,
	|	&НомерИсправляемогоДокумента			КАК НомерИсправляемогоДокумента,
	|	&ДатаИсправляемогоДокумента				КАК ДатаИсправляемогоДокумента,
	|	&ОперацияПоступления					КАК ОперацияПоступления,
	|	&Склад									КАК Склад,
	|	&Помещение								КАК Помещение,
	|	&ЭтоНакладная							КАК ЭтоНакладная,
	|	&ИспользуетсяАдресноеХранение			КАК ИспользуетсяАдресноеХранение,
	|	&ИспользуетсяСправочноеХранение			КАК ИспользуетсяСправочноеХранение,
	|	&ИспользованиеРабочихУчастков			КАК ИспользованиеРабочихУчастков,
	|	&ИспользуетсяОрдернаяСхема				КАК ИспользуетсяОрдернаяСхема
	|ИЗ
	|	&ИмяТаблицыДокумента КАК ДанныеДокумента
	|,&ТекстСоединенияТаблиц
	|ГДЕ
	|	ДанныеДокумента.Ссылка В(&МассивОбъектов)
	|И &ТекстУсловияДанныхДокумента";
	
	Если ПравилоПечати.СкладыВТЧ Тогда
		ТекстСоединенияТаблиц	= ТекстСоединенияДанныхДокументаСТЧ(ИмяДокумента, ПравилоПечати.ИмяТЧТовары);
		ТекстУсловия			= ТекстУсловияДанныхДокумента();
	Иначе
		ТекстСоединенияТаблиц	= "";
		ТекстУсловия			= "";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицыДокумента",			ИмяДокумента);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ",&ТекстСоединенияТаблиц",		ТекстСоединенияТаблиц);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ТекстУсловияДанныхДокумента",	ТекстУсловия);
	
	ЗначенияПолейДокумента = ЗначенияПолейДокумента();
	ЗаполнитьЗначенияПолейДокумента(ЗначенияПолейДокумента, ПравилоПечати);
	
	Для Каждого ЗначениеПоля Из ЗначенияПолейДокумента Цикл
		СтрокаПоиска = "&" + ЗначениеПоля.Ключ;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, СтрокаПоиска, ЗначениеПоля.Значение);
	КонецЦикла;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстСоединенияДанныхДокументаСТЧ(ИмяДокумента, ИмяТЧ)
	
	ИмяТЧДокумента = ИмяДокумента + "." + ИмяТЧ;
	
	ТекстСоединенияТаблиц = 
	"		ВНУТРЕННЕЕ СОЕДИНЕНИЕ &ИмяТЧТовары КАК ТоварыДокумента
	|		ПО ДанныеДокумента.Ссылка = ТоварыДокумента.Ссылка";
	
	ТекстСоединенияТаблиц = СтрЗаменить(ТекстСоединенияТаблиц, "&ИмяТЧТовары", ИмяТЧДокумента);
	
	Возврат ТекстСоединенияТаблиц;
	
КонецФункции

Функция ТекстУсловияДанныхДокумента()
	
	ТекстУсловияДанныхДокумента = 
	"	И &Склад ССЫЛКА Справочник.Склады
	|	И &Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)";
	
	Возврат ТекстУсловияДанныхДокумента;
	
КонецФункции

Функция ЗначенияПолейДокумента()
	
	ЗначенияПолейДокумента = Новый Структура;
	ЗначенияПолейДокумента.Вставить("ИспользованиеРабочихУчастков");
	ЗначенияПолейДокумента.Вставить("Склад");
	ЗначенияПолейДокумента.Вставить("Помещение");
	ЗначенияПолейДокумента.Вставить("ЭтоНакладная");
	ЗначенияПолейДокумента.Вставить("ОперацияПоступления");
	ЗначенияПолейДокумента.Вставить("ИспользуетсяАдресноеХранение");
	ЗначенияПолейДокумента.Вставить("ИспользуетсяСправочноеХранение");
	ЗначенияПолейДокумента.Вставить("ИспользуетсяОрдернаяСхема");
	ЗначенияПолейДокумента.Вставить("НомерИсправляемогоДокумента");
	ЗначенияПолейДокумента.Вставить("ДатаИсправляемогоДокумента");
	
	Возврат ЗначенияПолейДокумента;
	
КонецФункции

Процедура ЗаполнитьЗначенияПолейДокумента(ЗначенияПолей, ПравилоПечати)
	
	ЭтоНакладная				= ПравилоПечати.ЭтоНакладная;
	ОперацияПоступления			= ПравилоПечати.ОперацияПоступления;
	ОтражениеИзлишков			= ПравилоПечати.ОтражениеИзлишков;
	ИсточникРеквизитов			= ?(ПравилоПечати.СкладыВТЧ, "ТоварыДокумента.", "ДанныеДокумента.");
	ИспользуютсяПомещения		= ЗначениеЗаполнено(ПравилоПечати.ИмяПоляПомещение);
	ПомещениеПоУмолчанию		= "ЗНАЧЕНИЕ(Справочник.СкладскиеПомещения.ПустаяСсылка)";
	ПроверитьОрдерностьСклада	= ЭтоНакладная
									И Не ИспользуютсяПомещения
									И Не ПравилоПечати.КорректировкаТоваров;
	ИспользуютсяИсправленияДокумента = ПравилоПечати.ИспользуютсяИсправленияДокумента;
	
	Склад		= ИсточникРеквизитов + ПравилоПечати.ИмяПоляСклад;
	Помещение	= ?(ИспользуютсяПомещения, "ДанныеДокумента." + ПравилоПечати.ИмяПоляПомещение, ПомещениеПоУмолчанию);
	
	ЗначенияПолей.Склад								= Склад;
	ЗначенияПолей.Помещение							= Помещение;
	ЗначенияПолей.ЭтоНакладная						= ?(ЭтоНакладная, "ИСТИНА", "ЛОЖЬ");
	ЗначенияПолей.ОперацияПоступления				= ?(ОперацияПоступления, "ИСТИНА", "ЛОЖЬ");
	ЗначенияПолей.ИспользуетсяАдресноеХранение		= ТекстИспользуетсяАдресноеХранение(ЭтоНакладная, Склад, Помещение);
	ЗначенияПолей.ИспользуетсяСправочноеХранение	= ТекстИспользуетсяСправочноеХранение(ИспользуютсяПомещения,
																							Склад,
																							Помещение);
	ЗначенияПолей.ИспользованиеРабочихУчастков		= ТекстИспользованиеРабочихУчастков(ИспользуютсяПомещения,
																						Склад,
																						Помещение);
	ЗначенияПолей.ИспользуетсяОрдернаяСхема			= ТекстИспользуетсяОрдернаяСхема(ПроверитьОрдерностьСклада,
																					ОперацияПоступления,
																					ОтражениеИзлишков,
																					Склад);
	ЗначенияПолей.ДатаИсправляемогоДокумента		= ?(ИспользуютсяИсправленияДокумента, "ДанныеДокумента.ИсправляемыйДокумент.Дата", "НЕОПРЕДЕЛЕНО");
	ЗначенияПолей.НомерИсправляемогоДокумента		= ?(ИспользуютсяИсправленияДокумента, "ДанныеДокумента.ИсправляемыйДокумент.Номер", "НЕОПРЕДЕЛЕНО");
	
КонецПроцедуры

Функция ТекстИспользуетсяСправочноеХранение(ИспользуютсяПомещения, ИсточникСклада, ИсточникПомещения)
	
	Если ИспользуютсяПомещения Тогда
		ТекстЗапроса = 
		"ЕСТЬNULL(ВЫБОР
		|		КОГДА ДанныеДокумента.Склад.ИспользоватьСкладскиеПомещения
		|				И ДанныеДокумента.Дата >= ДанныеДокумента.Склад.ДатаНачалаИспользованияСкладскихПомещений
		|			ТОГДА ВЫБОР
		|					КОГДА ДанныеДокумента.Помещение.ИспользоватьАдресноеХранениеСправочно
		|							И (НЕ ДанныеДокумента.Помещение.ИспользоватьАдресноеХранение
		|								ИЛИ ДанныеДокумента.Дата < ДанныеДокумента.Помещение.ДатаНачалаАдресногоХраненияОстатков)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ДанныеДокумента.Склад.ИспользоватьАдресноеХранениеСправочно
		|						И (НЕ ДанныеДокумента.Склад.ИспользоватьАдресноеХранение
		|							ИЛИ ДанныеДокумента.Дата < ДанныеДокумента.Склад.ДатаНачалаАдресногоХраненияОстатков)
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ
		|	КОНЕЦ, ЛОЖЬ)";//@query-part-1
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДанныеДокумента.Помещение", ИсточникПомещения);
	Иначе
		ТекстЗапроса = 
		"ЕСТЬNULL(ВЫБОР
		|		КОГДА ДанныеДокумента.Склад.ИспользоватьАдресноеХранениеСправочно
		|				И (НЕ ДанныеДокумента.Склад.ИспользоватьАдресноеХранение
		|					ИЛИ ДанныеДокумента.Дата < ДанныеДокумента.Склад.ДатаНачалаАдресногоХраненияОстатков)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ, ЛОЖЬ)";//@query-part-1
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДанныеДокумента.Склад", ИсточникСклада);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстИспользуетсяАдресноеХранение(ЭтоНакладная, ИсточникСклада, ИсточникПомещения)
	
	Если ЭтоНакладная Тогда
		ТекстЗапроса = "ЛОЖЬ";
	Иначе
		ТекстЗапроса = 
		"ЕСТЬNULL(ВЫБОР
		|		КОГДА ДанныеДокумента.Склад.ИспользоватьСкладскиеПомещения
		|				И ДанныеДокумента.Дата >= ДанныеДокумента.Склад.ДатаНачалаИспользованияСкладскихПомещений
		|			ТОГДА ВЫБОР
		|					КОГДА ДанныеДокумента.Помещение.ИспользоватьАдресноеХранение
		|							И ДанныеДокумента.Дата >= ДанныеДокумента.Помещение.ДатаНачалаАдресногоХраненияОстатков
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ДанныеДокумента.Склад.ИспользоватьАдресноеХранение
		|						И ДанныеДокумента.Дата >= ДанныеДокумента.Склад.ДатаНачалаАдресногоХраненияОстатков
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ
		|	КОНЕЦ, ЛОЖЬ)"; // @query-part-1
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДанныеДокумента.Склад",		ИсточникСклада);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДанныеДокумента.Помещение",	ИсточникПомещения);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстИспользованиеРабочихУчастков(ИспользуютсяПомещения, ИсточникСклада, ИсточникПомещения)
	
	Если ИспользуютсяПомещения Тогда
		ТекстЗапроса = 
		"ЕСТЬNULL(ВЫБОР
		|		КОГДА ДанныеДокумента.Склад.ИспользоватьСкладскиеПомещения
		|				И ДанныеДокумента.Дата >= ДанныеДокумента.Склад.ДатаНачалаИспользованияСкладскихПомещений
		|			ТОГДА ДанныеДокумента.Помещение.ИспользованиеРабочихУчастков
		|		ИНАЧЕ ДанныеДокумента.Склад.ИспользованиеРабочихУчастков
		|	КОНЕЦ, ЛОЖЬ)";// @query-part-1
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДанныеДокумента.Помещение", ИсточникПомещения);
	Иначе
		ТекстЗапроса = "ЕСТЬNULL(ДанныеДокумента.Склад.ИспользованиеРабочихУчастков, ЛОЖЬ)";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДанныеДокумента.Склад", ИсточникСклада);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстИспользуетсяОрдернаяСхема(ПроверитьОрдерностьСклада, ОперацияПоступления, ОтражениеИзлишков, ИсточникСклада)
	
	Если ПроверитьОрдерностьСклада Тогда
		ТекстЗапроса = 
		"ЕСТЬNULL(ВЫБОР
		|		КОГДА ДанныеДокумента.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
		|				И ДанныеДокумента.Дата >= ДанныеДокумента.Склад.ДатаНачалаОрдернойСхемыПриПоступлении
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ, ЛОЖЬ)";// @query-part-1
		
		СкладскаяОперация = ?(ОтражениеИзлишков, "ПриОтраженииИзлишковНедостач",
								?(Не ОперацияПоступления, "ПриОтгрузке", "ПриПоступлении"));
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПриПоступлении",			СкладскаяОперация);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДанныеДокумента.Склад",	ИсточникСклада);
	Иначе
		ТекстЗапроса = "ЛОЖЬ";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДокументовБезТоваров(ИмяДокумента)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	&ИмяТаблицыДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеЗадания КАК ДанныеЗадания
	|		ПО ДанныеДокумента.Ссылка = ДанныеЗадания.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка В(&МассивОбъектов)
	|	И ДанныеЗадания.Ссылка ЕСТЬ NULL";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицыДокумента", ИмяДокумента);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ТекстыЗапросовТоварыЗадания

Функция ТекстЗапросаВТТоварыДокумента(ПравилаПечати, ИмяДокумента)
	
	Если Не ИспользоватьДанныеДокумента(ИмяДокумента) Тогда
		МенеджерОбъекта	= ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяДокумента);
		ТекстЗапроса	= МенеджерОбъекта.ТекстЗапросаТоварыДокументаДляПечатиЗаданияНаОтборРазмещениеТоваров();
	Иначе
		ТекстыВложенныхТаблиц	= Новый Массив;
		ТекстОбъединения		= ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении();
		ТекстЗапроса			= ШаблонТекстаЗапросаТоварыДокумента();
		
		ИмяТЧ = "";
		
		Для Каждого ПравилоПечати Из ПравилаПечати Цикл
			Если ПравилоПечати.ИмяТЧТовары = ИмяТЧ Тогда
				Продолжить;
			КонецЕсли;
			
			ТекстЗапросаТоварыДокумента = ТекстЗапросаТоварыДокумента(ИмяДокумента, ПравилоПечати);
			
			ТекстыВложенныхТаблиц.Добавить(ТекстЗапросаТоварыДокумента);
		КонецЦикла;
		
		ТекстЗапросаВТ	= СтрСоединить(ТекстыВложенныхТаблиц, ТекстОбъединения);
		ТекстЗапроса	= СтрЗаменить(ТекстЗапроса, "#ТоварыДокумента", "(" + ТекстЗапросаВТ + ")");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ШаблонТекстаЗапросаТоварыДокумента()
	
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.Ссылка				КАК Ссылка,
	|	ТаблицаТоваров.Склад				КАК Склад,
	|	ТаблицаТоваров.Помещение			КАК Помещение,
	|	МИНИМУМ(ТаблицаТоваров.НомерСтроки)	КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура			КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика		КАК Характеристика,
	|	ТаблицаТоваров.Серия				КАК Серия
	|ПОМЕСТИТЬ ТоварыДокумента
	|ИЗ
	|	#ТоварыДокумента КАК ТаблицаТоваров
	|
	|ГДЕ
	|	ТаблицаТоваров.ОперацияПоступления = &ОперацияПоступления
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Ссылка,
	|	ТаблицаТоваров.Склад,
	|	ТаблицаТоваров.Помещение,
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.Серия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Склад,
	|	Помещение,
	|	Номенклатура,
	|	Характеристика,
	|	Серия";
	
	Возврат ШаблонТекстаЗапроса;
	
КонецФункции

Функция ТекстЗапросаТоварыДокумента(ИмяДокумента, ПравилоПечати)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТоварыДокумента.Ссылка			КАК Ссылка,
	|	&Склад							КАК Склад,
	|	&Помещение						КАК Помещение,
	|	ТоварыДокумента.НомерСтроки		КАК НомерСтроки,
	|	ТоварыДокумента.Номенклатура	КАК Номенклатура,
	|	ТоварыДокумента.Характеристика	КАК Характеристика,
	|	ТоварыДокумента.Серия			КАК Серия,
	|	&ОперацияПоступления			КАК ОперацияПоступления
	|ИЗ
	|	#ИмяТЧТовары КАК ТоварыДокумента
	|	,#ТекстСоединенияТаблиц КАК ВнешняяТаблица
	|
	|ГДЕ
	|	ТоварыДокумента.Ссылка В(&МассивОбъектов)";
	
	ИмяТЧДокумента = ИмяДокумента + "." + ПравилоПечати.ИмяТЧТовары;
	
	ТекстСоединенияТаблиц = "";
	
	Если Не ПравилоПечати.СкладыВТЧ Тогда
		ТекстСоединенияТаблиц = 
		"		ВНУТРЕННЕЕ СОЕДИНЕНИЕ &ИмяТаблицыДокумента КАК ДанныеДокумента
		|		ПО ТоварыДокумента.Ссылка = ДанныеДокумента.Ссылка";
		
		ТекстСоединенияТаблиц = СтрЗаменить(ТекстСоединенияТаблиц, "&ИмяТаблицыДокумента", ИмяДокумента);
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяТЧТовары", ИмяТЧДокумента);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ",#ТекстСоединенияТаблиц КАК ВнешняяТаблица", ТекстСоединенияТаблиц);
	
	ЗначенияПолейДокумента = ЗначенияПолейДокумента();
	ЗаполнитьЗначенияПолейДокумента(ЗначенияПолейДокумента, ПравилоПечати);
	
	Для Каждого ЗначениеПоля Из ЗначенияПолейДокумента Цикл
		СтрокаПоиска = "&" + ЗначениеПоля.Ключ;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, СтрокаПоиска, ЗначениеПоля.Значение);
	КонецЦикла;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТТоварыЗадания(ИмяДокумента)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТоварыНаСкладах.Регистратор				КАК Ссылка,
	|	ТоварыНаСкладах.Склад					КАК Склад,
	|	ТоварыНаСкладах.Помещение				КАК Помещение,
	|	ЕСТЬNULL(МИНИМУМ(ТоварыДокумента.НомерСтроки), МИНИМУМ(ТоварыНаСкладах.НомерСтроки)) КАК НомерСтроки,
	|	ТоварыНаСкладах.Номенклатура			КАК Номенклатура,
	|	ТоварыНаСкладах.Характеристика			КАК Характеристика,
	|	ТоварыНаСкладах.Серия					КАК Серия,
	|	Товары.НаборУпаковок					КАК НаборУпаковок,
	|	СУММА(ВЫБОР
	|			КОГДА ТоварыНаСкладах.ВНаличии > 0
	|				ТОГДА ТоварыНаСкладах.ВНаличии
	|			ИНАЧЕ -ТоварыНаСкладах.ВНаличии
	|		КОНЕЦ)								КАК Количество
	|ПОМЕСТИТЬ ТоварыЗадания
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах КАК ТоварыНаСкладах
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Товары
	|		ПО ТоварыНаСкладах.Номенклатура = Товары.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыДокумента КАК ТоварыДокумента
	|		ПО ТоварыНаСкладах.Регистратор = ТоварыДокумента.Ссылка
	|			И ТоварыНаСкладах.Склад = ТоварыДокумента.Склад
	|			И ТоварыНаСкладах.Помещение = ТоварыДокумента.Помещение
	|			И ТоварыНаСкладах.Номенклатура = ТоварыДокумента.Номенклатура
	|			И ТоварыНаСкладах.Характеристика = ТоварыДокумента.Характеристика
	|			И (ТоварыНаСкладах.Серия = ТоварыДокумента.Серия
	|				ИЛИ ТоварыДокумента.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка))
	|
	|ГДЕ
	|	ТоварыНаСкладах.Регистратор В(&МассивОбъектов)
	|	И ТоварыНаСкладах.ВидДвижения = &ВидДвижения
	|	И НЕ ТоварыНаСкладах.Сторно
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыНаСкладах.Регистратор,
	|	ТоварыНаСкладах.Склад,
	|	ТоварыНаСкладах.Помещение,
	|	ТоварыНаСкладах.Номенклатура,
	|	ТоварыНаСкладах.Характеристика,
	|	ТоварыНаСкладах.Серия,
	|	Товары.НаборУпаковок";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ИспользоватьДанныеДокумента(ИмяДокумента)
	
	ДокументыИсключения = Новый Массив;
	ДокументыИсключения.Добавить(Метаданные.Документы.ВозвратТоваровОтКлиента.ПолноеИмя());
	ДокументыИсключения.Добавить(Метаданные.Документы.СборкаТоваров.ПолноеИмя());
	
	ИспользоватьДанныеДокумента = ДокументыИсключения.Найти(ИмяДокумента) = Неопределено;
	
	Возврат ИспользоватьДанныеДокумента;
	
КонецФункции

Функция ТекстЗапросаВТТоваровСуммированная()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка				КАК Ссылка,
	|	ТаблицаТовары.Склад					КАК Склад,
	|	ТаблицаТовары.Помещение				КАК Помещение,
	|	МИНИМУМ(ТаблицаТовары.НомерСтроки)	КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура			КАК Номенклатура,
	|	ТаблицаТовары.Характеристика		КАК Характеристика,
	|	ТаблицаТовары.Серия					КАК Серия,
	|	ТаблицаТовары.НаборУпаковок			КАК НаборУпаковок,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий = &НастройкаИспользованияСерий
	|			ТОГДА ТаблицаТовары.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|	КОНЕЦ								КАК Упаковка,
	|	СУММА(ТаблицаТовары.Количество)		КАК Количество
	|ПОМЕСТИТЬ ТаблицаТоваровСуммированная
	|ИЗ
	|	ТоварыЗадания КАК ТаблицаТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Ссылка,
	|	ТаблицаТовары.Склад,
	|	ТаблицаТовары.Помещение,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Серия,
	|	ТаблицаТовары.НаборУпаковок,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий = &НастройкаИспользованияСерий
	|			ТОГДА ТаблицаТовары.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|	КОНЕЦ";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
								"&НастройкаИспользованияСерий",
								"ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара)");
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТоварыЗадания(ИспользуютсяПомещения, ОперацияПоступления)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаТоваров.Ссылка								КАК Ссылка,
	|	ТаблицаТоваров.Склад								КАК Склад,
	|	ЕСТЬNULL(ОсновныеЯчейки.Ячейка.РабочийУчасток, &РабочийУчастокПоУмолчанию)	КАК РабочийУчасток,
	|	ПРЕДСТАВЛЕНИЕ(ОсновныеЯчейки.Ячейка.РабочийУчасток)	КАК ПредставлениеРабочегоУчастка,
	|	ЕСТЬNULL(ОсновныеЯчейки.Ячейка.ПорядокОбхода, 0)	КАК ПорядокОбхода,
	|	ЕСТЬNULL(ОсновныеЯчейки.Ячейка, &ЯчейкаПоУмолчанию)	КАК ОсновнаяЯчейка,
	|	ЕСТЬNULL(ОсновныеЯчейки.Ячейка.Код, """")			КАК ОсновнаяЯчейкаПредставление,
	|	ЕСТЬNULL(ОстальныеЯчейки.Ячейка.ПорядокОбхода, 0)	КАК ПорядокОбходаДополнительнаяЯчейка,
	|	ЕСТЬNULL(ОстальныеЯчейки.Ячейка.Код, """")			КАК ЯчейкаПредставление,
	|	ТаблицаТоваров.НомерСтроки							КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура.Код						КАК Код,
	|	ТаблицаТоваров.Номенклатура.Артикул					КАК Артикул,
	|	ТаблицаТоваров.Номенклатура							КАК Номенклатура,
	|	ТаблицаТоваров.Номенклатура.НаименованиеПолное		КАК ПредставлениеНоменклатуры,
	|	ТаблицаТоваров.Характеристика						КАК Характеристика,
	|	ТаблицаТоваров.Характеристика.НаименованиеПолное	КАК ПредставлениеХарактеристики,
	|	Товары.ВидНоменклатуры.НастройкаИспользованияСерий	КАК НастройкаИспользованияСерий,
	|	ТаблицаТоваров.Серия								КАК Серия,
	|	ТаблицаТоваров.Серия.Наименование					КАК ПредставлениеСерии,
	|	ТаблицаТоваров.Упаковка								КАК Упаковка,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТоваров.Упаковка)				КАК ПредставлениеЕдиницыИзмеренияУпаковки,
	|	ПРЕДСТАВЛЕНИЕ(Товары.ЕдиницаИзмерения)				КАК ПредставлениеБазовойЕдиницыИзмерения,
	|	ТаблицаТоваров.Количество							КАК Количество,
	|	ТаблицаТоваров.Количество							КАК КоличествоУпаковок
	|ИЗ
	|	ТаблицаТоваровСуммированная КАК ТаблицаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Товары
	|		ПО ТаблицаТоваров.Номенклатура = Товары.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам КАК ОсновныеЯчейки
	|		ПО ТаблицаТоваров.Номенклатура = ОсновныеЯчейки.Номенклатура
	|			И ОсновныеЯчейки.ОсновнаяЯчейка
	|			И ТаблицаТоваров.Склад = ОсновныеЯчейки.Склад
	|			И &УсловиеСоединенияОсновныхЯчеек
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам КАК ОстальныеЯчейки
	|		ПО ТаблицаТоваров.Номенклатура = ОстальныеЯчейки.Номенклатура
	|			И НЕ ОстальныеЯчейки.ОсновнаяЯчейка
	|			И ТаблицаТоваров.Склад = ОстальныеЯчейки.Склад
	|			И &УсловиеСоединенияОстальныхЯчеек
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Склад,
	|	РабочийУчасток,
	|	НомерСтроки,
	|	Номенклатура,
	|	Характеристика,
	|	Серия
	|
	|ИТОГИ ПО
	|	Ссылка,
	|	Склад,
	|	РабочийУчасток";
	
	Если ИспользуютсяПомещения Тогда
		УсловиеСоединенияОсновныхЯчеек	= ТекстУсловияСоединенияРазмещенияНоменклатуры("ОсновныеЯчейки",
																						ОперацияПоступления);
		УсловиеСоединенияОстальныхЯчеек	= ТекстУсловияСоединенияРазмещенияНоменклатуры("ОстальныеЯчейки",
																						ОперацияПоступления);
	Иначе
		УсловиеСоединенияОсновныхЯчеек	= "";
		УсловиеСоединенияОстальныхЯчеек	= "";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
								"&РабочийУчастокПоУмолчанию",
								"ЗНАЧЕНИЕ(Справочник.РабочиеУчастки.ПустаяСсылка)");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
								"&ЯчейкаПоУмолчанию",
								"ЗНАЧЕНИЕ(Справочник.СкладскиеЯчейки.ПустаяСсылка)");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
								"И &УсловиеСоединенияОсновныхЯчеек",
								УсловиеСоединенияОсновныхЯчеек);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
								"И &УсловиеСоединенияОстальныхЯчеек",
								УсловиеСоединенияОстальныхЯчеек);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

Функция ТекстЗапросаУпаковкиЗадания(ИспользуютсяПомещения, ОперацияПоступления)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаТоваров.Ссылка					КАК Ссылка,
	|	ТаблицаТоваров.Склад					КАК Склад,
	|	ЕСТЬNULL(ОсновныеЯчейки.Ячейка.РабочийУчасток, &РабочийУчастокПоУмолчанию)	КАК РабочийУчасток,
	|	ТаблицаТоваров.НомерСтроки				КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура				КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика			КАК Характеристика,
	|	ТаблицаТоваров.Серия					КАК Серия,
	|	ЕСТЬNULL(УпаковкиНоменклатуры.Ссылка, &УпаковкаПоУмолчанию)	КАК Упаковка,
	|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(УпаковкиНоменклатуры.Ссылка), ПРЕДСТАВЛЕНИЕ(ТаблицаТоваров.Номенклатура.ЕдиницаИзмерения))	КАК ПредставлениеЕдиницыИзмеренияУпаковки,
	|	ЕСТЬNULL(&ТекстКоэффициентаУпаковки, 1)	КАК КоличествоВУпаковке
	|ИЗ
	|	ТаблицаТоваровСуммированная КАК ТаблицаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
	|		ПО (ТаблицаТоваров.Номенклатура = УпаковкиНоменклатуры.Владелец
	|				ИЛИ ТаблицаТоваров.НаборУпаковок = УпаковкиНоменклатуры.Владелец)
	|			И НЕ УпаковкиНоменклатуры.ПометкаУдаления
	|			И ТаблицаТоваров.Количество >= &ТекстКоэффициентаУпаковки
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам КАК ОсновныеЯчейки
	|		ПО ТаблицаТоваров.Номенклатура = ОсновныеЯчейки.Номенклатура
	|			И ОсновныеЯчейки.ОсновнаяЯчейка
	|			И ТаблицаТоваров.Склад = ОсновныеЯчейки.Склад
	|			И &УсловиеСоединенияОсновныхЯчеек
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Склад,
	|	РабочийУчасток,
	|	НомерСтроки,
	|	Номенклатура,
	|	Характеристика,
	|	Серия,
	|	КоличествоВУпаковке УБЫВ";
	
	ТекстКоэффициентаУпаковки = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
									"УпаковкиНоменклатуры",
									"ТаблицаТоваров.Номенклатура");
	
	Если ИспользуютсяПомещения Тогда
		УсловиеСоединенияОсновныхЯчеек = ТекстУсловияСоединенияРазмещенияНоменклатуры("ОсновныеЯчейки", ОперацияПоступления);
	Иначе
		УсловиеСоединенияОсновныхЯчеек = "";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
								"&РабочийУчастокПоУмолчанию",
								"ЗНАЧЕНИЕ(Справочник.РабочиеУчастки.ПустаяСсылка)");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
								"&УпаковкаПоУмолчанию",
								"ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстКоэффициентаУпаковки", ТекстКоэффициентаУпаковки);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
								"И &УсловиеСоединенияОсновныхЯчеек",
								УсловиеСоединенияОсновныхЯчеек);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстУсловияСоединенияРазмещенияНоменклатуры(ИсточникЯчеек, ОперацияПоступления)
	
	ИмяПоляДата = ?(ОперацияПоступления, "Дата", "ДатаОтгрузки");
	
	ТекстУсловияСоединения = 
	"			И ВЫБОР
	|				КОГДА ТаблицаТоваров.Склад.ИспользоватьСкладскиеПомещения
	|						И ТаблицаТоваров.Ссылка.ИмяПоляДата >= ТаблицаТоваров.Склад.ДатаНачалаИспользованияСкладскихПомещений
	|					ТОГДА ТаблицаТоваров.Помещение = ОсновныеЯчейки.Помещение
	|				ИНАЧЕ ОсновныеЯчейки.Помещение = ЗНАЧЕНИЕ(Справочник.СкладскиеПомещения.ПустаяСсылка)
	|			КОНЕЦ";
	
	ТекстУсловияСоединения = СтрЗаменить(ТекстУсловияСоединения, "ОсновныеЯчейки",	ИсточникЯчеек);
	ТекстУсловияСоединения = СтрЗаменить(ТекстУсловияСоединения, "ИмяПоляДата",		ИмяПоляДата);
	
	Возврат ТекстУсловияСоединения;
	
КонецФункции

Функция ТекстОшибкиПоДаннымДокумента(ДанныеДокумента, ДанныеТЧ, ТекущийДокумет, ТипЗадания, НазваниеФормы)
	
	ТекстОшибки = "";
	
	Если ДанныеДокумента.ИспользуетсяОрдернаяСхема Тогда
		
		ПредставлениеСклада = СкладыСервер.ПолучитьПредставлениеСклада(ДанныеДокумента.СкладПредставление,
																		ДанныеДокумента.ПомещениеПредставление);
		
		ТекстОшибки = НСтр("ru = 'Невозможно напечатать %НазваниеФормы% для ""%Документ%"",
							|потому что на складе ""%Склад%"" используется ордерная схема, поэтому печать задания должна вестись из ордера.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Склад%", ПредставлениеСклада);
		
	ИначеЕсли Не ДанныеДокумента.ЭтоНакладная
		И ДанныеДокумента.ИспользуетсяАдресноеХранение Тогда
		
		ТекстОшибки = НСтр("ru = 'Невозможно напечатать %НазваниеФормы% для ""%Документ%"",
							|потому что для склада (помещения) с ячейками, используемыми для хранения остатков номенклатуры, эта печатная форма не предусмотрена.
							|Печать задания на отбор (размещение) возможна из документа ""Отбор (размещение) товаров"".'");
		
	ИначеЕсли ТекущийДокумет <> ДанныеДокумента.Ссылка Тогда
		
		ОтборПоДокументу = Новый Структура("Ссылка", ДанныеДокумента.Ссылка);
		
		Если Не ДанныеТЧ.НайтиСледующий(ОтборПоДокументу) Тогда
			ПредставлениеСклада = СкладыСервер.ПолучитьПредставлениеСклада(ДанныеДокумента.СкладПредставление,
																		ДанныеДокумента.ПомещениеПредставление);
			
			Если ТипЗадания <> "ЗаданиеНаРазмещение" Тогда
				Если ЗначениеЗаполнено(ПредставлениеСклада) Тогда
					ТекстОшибки = НСтр("ru = 'Невозможно напечатать ""%НазваниеФормы%"" для ""%Документ%"",
										|потому что в документе отсутствует отгружаемая номенклатура со склада ""%Склад%"".'");
				Иначе
					ТекстОшибки = НСтр("ru = 'Невозможно напечатать ""%НазваниеФормы%"" для ""%Документ%"",
										|потому что в документе отсутствует отгружаемая номенклатура.'");
				КонецЕсли;
			Иначе
				ТекстОшибки = НСтр("ru = 'Невозможно напечатать ""%НазваниеФормы%"" для ""%Документ%"",
									|потому что в документе отсутствует размещаемая номенклатура на складе ""%Склад%"".'");
			КонецЕсли;
			
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Склад%", ПредставлениеСклада);
		Иначе
			ТекущийДокумет = ДанныеДокумента.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НазваниеФормы%",	НазваниеФормы);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%",		ДанныеДокумента.СсылкаПредставление);
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

Функция НазванияОбластей(ИспользуетсяСправочноеХранение, ИспользоватьУпаковки, ВыводитьКоды)
	
	СтруктураВозврата = Новый Структура("ПодвалТаблицы, СтрокаТаблицы, РабочийУчасток, ШапкаТаблицы");
	
	Если ИспользуетсяСправочноеХранение И ИспользоватьУпаковки И ВыводитьКоды Тогда
		СтруктураВозврата.ПодвалТаблицы = "ПодвалТаблицыОснова";
		СтруктураВозврата.СтрокаТаблицы = "СтрокаТаблицыОснова";
		СтруктураВозврата.РабочийУчасток = "РабочийУчастокОснова";
		СтруктураВозврата.ШапкаТаблицы = "ШапкаТаблицыОснова";
	ИначеЕсли НЕ ИспользуетсяСправочноеХранение И ИспользоватьУпаковки И ВыводитьКоды Тогда
		СтруктураВозврата.ПодвалТаблицы = "ПодвалТаблицыБезЯчеек";
		СтруктураВозврата.СтрокаТаблицы = "СтрокаТаблицыБезЯчеек";
		СтруктураВозврата.РабочийУчасток = "РабочийУчастокБезЯчеек";
		СтруктураВозврата.ШапкаТаблицы = "ШапкаТаблицыБезЯчеек";
	ИначеЕсли НЕ ИспользуетсяСправочноеХранение И ИспользоватьУпаковки И Не ВыводитьКоды Тогда
		СтруктураВозврата.ПодвалТаблицы = "ПодвалТаблицыБезЯчеекБезКодов";
		СтруктураВозврата.СтрокаТаблицы = "СтрокаТаблицыБезЯчеекБезКодов";
		СтруктураВозврата.РабочийУчасток = "РабочийУчастокБезЯчеекБезКодов";
		СтруктураВозврата.ШапкаТаблицы = "ШапкаТаблицыБезЯчеекБезКодов";
	ИначеЕсли НЕ ИспользуетсяСправочноеХранение И НЕ ИспользоватьУпаковки И ВыводитьКоды Тогда
		СтруктураВозврата.ПодвалТаблицы = "ПодвалТаблицыБезЯчеекБезУпаковок";
		СтруктураВозврата.СтрокаТаблицы = "СтрокаТаблицыБезЯчеекБезУпаковок";
		СтруктураВозврата.РабочийУчасток = "РабочийУчастокБезЯчеекБезУпаковок";
		СтруктураВозврата.ШапкаТаблицы = "ШапкаТаблицыБезЯчеекБезУпаковок";
	ИначеЕсли НЕ ИспользуетсяСправочноеХранение И НЕ ИспользоватьУпаковки И НЕ ВыводитьКоды Тогда
		СтруктураВозврата.ПодвалТаблицы = "ПодвалТаблицыБезЯчеекБезУпаковокБезКодов";
		СтруктураВозврата.СтрокаТаблицы = "СтрокаТаблицыБезЯчеекБезУпаковокБезКодов";
		СтруктураВозврата.РабочийУчасток = "РабочийУчастокБезЯчеекБезУпаковокБезКодов";
		СтруктураВозврата.ШапкаТаблицы = "ШапкаТаблицыБезЯчеекБезУпаковокБезКодов";
	ИначеЕсли ИспользуетсяСправочноеХранение И НЕ ИспользоватьУпаковки И ВыводитьКоды Тогда
		СтруктураВозврата.ПодвалТаблицы = "ПодвалТаблицыБезУпаковок";
		СтруктураВозврата.СтрокаТаблицы = "СтрокаТаблицыБезУпаковок";
		СтруктураВозврата.РабочийУчасток = "РабочийУчастокБезУпаковок";
		СтруктураВозврата.ШапкаТаблицы = "ШапкаТаблицыБезУпаковок";
	ИначеЕсли ИспользуетсяСправочноеХранение И НЕ ИспользоватьУпаковки И НЕ ВыводитьКоды Тогда
		СтруктураВозврата.ПодвалТаблицы = "ПодвалТаблицыБезУпаковокБезКодов";
		СтруктураВозврата.СтрокаТаблицы = "СтрокаТаблицыБезУпаковокБезКодов";
		СтруктураВозврата.РабочийУчасток = "РабочийУчастокБезУпаковокБезКодов";
		СтруктураВозврата.ШапкаТаблицы = "ШапкаТаблицыБезУпаковокБезКодов";
	ИначеЕсли ИспользуетсяСправочноеХранение И ИспользоватьУпаковки И НЕ ВыводитьКоды Тогда
		СтруктураВозврата.ПодвалТаблицы = "ПодвалТаблицыБезКодов";
		СтруктураВозврата.СтрокаТаблицы = "СтрокаТаблицыБезКодов";
		СтруктураВозврата.РабочийУчасток = "РабочийУчастокБезКодов";
		СтруктураВозврата.ШапкаТаблицы = "ШапкаТаблицыБезКодов";
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ПараметрыЗаполненияОбластиОснования(ДокументСсылка, ВыборкаПоРаспоряжениям)
	
	РазделительТекстов	= ", ";
	ТекстыПредставлений	= Новый Массив;
	РеквизитыДокумента	= РеквизитыДокумента();
	ОтборРаспоряжений	= Новый Структура("Ссылка", ДокументСсылка);
	
	Пока ВыборкаПоРаспоряжениям.НайтиСледующий(ОтборРаспоряжений) Цикл
		РеквизитыДокумента.Дата				= ВыборкаПоРаспоряжениям.ОснованиеДата;
		РеквизитыДокумента.Номер			= ВыборкаПоРаспоряжениям.ОснованиеНомер;
		РеквизитыДокумента.Префикс			= "";
		РеквизитыДокумента.Представление	= ВыборкаПоРаспоряжениям.ОснованиеПредставление;
		
		ТекстыПредставлений.Добавить(ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента));
	КонецЦикла;
	
	ЗаголовокОснования		= ?(ТекстыПредставлений.Количество() > 1, НСтр("ru = 'Основания:'", ОбщегоНазначения.КодОсновногоЯзыка()), НСтр("ru = 'Основание:'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ПредставлениеОснований	= СтрСоединить(ТекстыПредставлений, РазделительТекстов);
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Основания",				ЗаголовокОснования);
	ПараметрыЗаполнения.Вставить("ПредставлениеОснований",	ПредставлениеОснований);
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

Функция РеквизитыДокумента()
	
	РеквизитыДокумента = Новый Структура("Дата, Номер, Префикс, Представление, ДатаИсправляемогоДокумента, НомерИсправляемогоДокумента");
	
	Возврат РеквизитыДокумента;
	
КонецФункции

Функция ПараметрыЗаполненияОбластиЗаданияНаПеревозку(ДанныеДокумента)
	
	РеквизитыДокумента = РеквизитыДокумента();
	РеквизитыДокумента.Дата				= ДанныеДокумента.ЗаданиеНаПеревозкуДата;
	РеквизитыДокумента.Номер			= ДанныеДокумента.ЗаданиеНаПеревозкуНомер;
	РеквизитыДокумента.Префикс			= "";
	РеквизитыДокумента.Представление	= ДанныеДокумента.ЗаданиеНаПеревозкуПредставление;
	
	ЗаданиеНаПеревозкуПредставление = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента);
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ПорядокДоставки",					ДанныеДокумента.ПорядокДоставки);
	ПараметрыЗаполнения.Вставить("ЗаданиеНаПеревозкуПредставление",	ЗаданиеНаПеревозкуПредставление);
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

Функция ПараметрыЗаполненияОбластиШапки(ДанныеДокумента)
	
	ПредставлениеСклада = СкладыСервер.ПолучитьПредставлениеСклада(ДанныеДокумента.СкладПредставление,
																	ДанныеДокумента.ПомещениеПредставление);
																	
																	РеквизитыДокумента = РеквизитыДокумента();
	ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ДанныеДокумента);
	РеквизитыДокумента.Представление = ДанныеДокумента.СсылкаПредставление;
	
	ПредставлениеРаспоряжения = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента,
																								"",
																								Истина);
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ПредставлениеСклада",			ПредставлениеСклада);
	ПараметрыЗаполнения.Вставить("ПредставлениеРаспоряжения",	ПредставлениеРаспоряжения);
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

Функция ПараметрыЗаполненияОбластиШапкиТаблицы(ВыводитьКоды, КолонкаКодов, ИспользоватьУпаковки, ТипЗадания)
	
	ПараметрыЗаполнения = Новый Структура;
	
	Если ВыводитьКоды Тогда
		ПараметрыЗаполнения.Вставить("ИмяКолонкиКодов", КолонкаКодов);
	КонецЕсли;
	
	Если ИспользоватьУпаковки Тогда
		Если ТипЗадания <> "ЗаданиеНаПересчет" Тогда
			ПараметрыЗаполнения.Вставить("НадписьКоличествоУпаковки", НСтр("ru = '(упаковок)'", ОбщегоНазначения.КодОсновногоЯзыка()));
		Иначе
			ПараметрыЗаполнения.Вставить("НадписьКоличество",			НСтр("ru = '(Факт)'", ОбщегоНазначения.КодОсновногоЯзыка()));
			ПараметрыЗаполнения.Вставить("НадписьКоличествоУпаковки",	НСтр("ru = '(По учету)'", ОбщегоНазначения.КодОсновногоЯзыка()));
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

Функция ПредставлениеСерии(ДанныеТовара, ВыборкаПоСериям)
	
	ПредставлениеСерии = ДанныеТовара.ПредставлениеСерии;
	
	Если ЗначениеЗаполнено(ВыборкаПоСериям) Тогда
		
		НастройкаИспользованияСерий = ДанныеТовара.НастройкаИспользованияСерий;
		
		Если НастройкаИспользованияСерий = Перечисления.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара Тогда
			СерииТовара = Новый Массив;
			
			ОтборПоТовару = Новый Структура("Ссылка, Склад, РабочийУчасток, Номенклатура, Характеристика");
			ЗаполнитьЗначенияСвойств(ОтборПоТовару, ДанныеТовара);
			
			Пока ВыборкаПоСериям.НайтиСледующий(ОтборПоТовару) Цикл
				СерииТовара.Добавить(ВыборкаПоСериям.ПредставлениеСерии);
			КонецЦикла;
			
			ПредставлениеСерии = СтрСоединить(СерииТовара, ", ");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПредставлениеСерии;
	
КонецФункции

Функция ДополнительныеЯчейкиТовара(ВыборкаПоТовару, ОтобратьПоУпаковкам)
	
	ДополнительныеЯчейки		= Новый Массив;
	НастройкаИспользованияСерий	= ВыборкаПоТовару.НастройкаИспользованияСерий;
	
	КлючиОтбора = ?(НастройкаИспользованияСерий = Перечисления.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара,
					"Номенклатура, Характеристика",
					"Номенклатура, Характеристика, Серия");
	КлючиОтбора = ?(ОтобратьПоУпаковкам, КлючиОтбора + ", Упаковка", КлючиОтбора);

	
	ОтборПоТовару = Новый Структура(КлючиОтбора);
	ЗаполнитьЗначенияСвойств(ОтборПоТовару, ВыборкаПоТовару);
	
	ДополнительныеЯчейки.Добавить(ВыборкаПоТовару.ЯчейкаПредставление);
	
	Пока ВыборкаПоТовару.НайтиСледующий(ОтборПоТовару) Цикл
		ДополнительныеЯчейки.Добавить(ВыборкаПоТовару.ЯчейкаПредставление);
	КонецЦикла;
	
	ДополнительныеЯчейкиСтрокой = СтрСоединить(ДополнительныеЯчейки, Символы.ПС);
	
	Возврат ДополнительныеЯчейкиСтрокой;
	
КонецФункции

Функция ПараметрыЗаполненияУпаковок(ДанныеТовара, ВыборкаПоУпаковкам, ИспользоватьУпаковки)
	
	НастройкаИспользованияСерий	= ДанныеТовара.НастройкаИспользованияСерий;
	ПараметрыЗаполнения			= Новый Структура("КоличествоУпаковок, ПредставлениеЕдиницыИзмеренияУпаковки");
	
	Если Не ИспользоватьУпаковки
		Или Не ЗначениеЗаполнено(ВыборкаПоУпаковкам)
		Или НастройкаИспользованияСерий = Перечисления.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара Тогда
		
		ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения, ДанныеТовара);
		
	Иначе
		
		КоличествоУпаковок = Новый Массив;
		ИменованияУпаковок = Новый Массив;
		
		Количество = ?(ЗначениеЗаполнено(ДанныеТовара.Номенклатура), ДанныеТовара.Количество, 0);
		
		Если Количество > 0 Тогда
			ВыборкаПоУпаковкам.Сбросить();
			
			ОтборПоТовару = Новый Структура("Ссылка, Склад, РабочийУчасток, Номенклатура, Характеристика, Серия");
			ЗаполнитьЗначенияСвойств(ОтборПоТовару, ДанныеТовара);
			
			Пока ВыборкаПоУпаковкам.НайтиСледующий(ОтборПоТовару) Цикл
				
				Если Количество <= 0 Тогда
					Прервать;
				КонецЕсли;
				
				КоличествоВДокумент = Цел(Количество / ВыборкаПоУпаковкам.КоличествоВУпаковке);
				
				Если КоличествоВДокумент > 0 Тогда
					КоличествоУпаковок.Добавить(КоличествоВДокумент);
					ИменованияУпаковок.Добавить(ВыборкаПоУпаковкам.ПредставлениеЕдиницыИзмеренияУпаковки);
					
					Количество = Количество - КоличествоВДокумент * ВыборкаПоУпаковкам.КоличествоВУпаковке;
				КонецЕсли;
				
			КонецЦикла;
			
			Если Количество > 0 Тогда
				КоличествоУпаковок.Добавить(Количество);
				ИменованияУпаковок.Добавить(ДанныеТовара.ПредставлениеБазовойЕдиницыИзмерения);
			КонецЕсли;
			
			ПараметрыЗаполнения.КоличествоУпаковок						= СтрСоединить(КоличествоУпаковок, Символы.ПС);
			ПараметрыЗаполнения.ПредставлениеЕдиницыИзмеренияУпаковки	= СтрСоединить(ИменованияУпаковок, Символы.ПС);
		Иначе
			ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения, ДанныеТовара);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
