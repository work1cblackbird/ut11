///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

&НаКлиенте
Перем ОбновитьИнтерфейс; // Булево

&НаКлиенте
Перем АвтоматическаяПроверкаОбновленийДоИзменения;	// Число

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтоАдминистраторСистемы                = Пользователи.ЭтоПолноправныйПользователь(, Истина);
	РазделениеВключено                     = ОбщегоНазначения.РазделениеВключено();
	ЭтоАвтономноеРабочееМесто              = ОбщегоНазначения.ЭтоАвтономноеРабочееМесто();
	ДоступноИспользованиеРазделенныхДанных = ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных();
	
	// Объекты БСП доступны только для пользователей с ролью ПолныеПрава
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.НастройкиПрограммы")
		И Пользователи.ЭтоПолноправныйПользователь(, Ложь, Ложь) Тогда
		
		МодульНастройкиПрограммы = ОбщегоНазначения.ОбщийМодуль("НастройкиПрограммы");
		МодульНастройкиПрограммы.ИнтернетПоддержкаИСервисыПриСозданииНаСервере(
			ЭтотОбъект,
			Отказ,
			СтандартнаяОбработка);
		
	Иначе
		
		Элементы.АдресныйКлассификаторНастройки.Видимость       = Ложь;
		Элементы.ГруппаОбработкаЗагрузкаКурсовВалют.Видимость   = Ложь;
		Элементы.ГруппаСклонения.Видимость                      = Ложь;
		Элементы.ГруппаЦентрМониторинга.Видимость               = Ложь;
		Элементы.ГруппаУправлениеВнешнимиКомпонентами.Видимость = Ложь;
		Элементы.ГруппаОбсуждения.Видимость                     = Ложь;
		
	КонецЕсли;
	
	НастроитьОтображениеБлокировкиРаботыССервисамиИнтернетПоддержки();
	
	ОбновитьСостояниеИнтернетПоддержки();
	
	ИнтеграцияПодсистемБИП.ПриСозданииФормыИнтернетПоддержкаИСервисы(
		ЭтотОбъект);
	НастройкиПрограммыБИППереопределяемый.ПриСозданииФормыИнтернетПоддержкаИСервисы(
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.НастройкиПрограммы") Тогда
		МодульНастройкиПрограммыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("НастройкиПрограммыКлиент");
		МодульНастройкиПрограммыКлиент.ИнтернетПоддержкаИСервисыПриОткрытии(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	АвтоматическаяПроверкаОбновленийДоИзменения = АвтоматическаяПроверкаОбновлений;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.НастройкиПрограммы") Тогда
		МодульНастройкиПрограммыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("НастройкиПрограммыКлиент");
		МодульНастройкиПрограммыКлиент.ИнтернетПоддержкаИСервисыОбработкаОповещения(
			ЭтотОбъект,
			ИмяСобытия,
			Параметр,
			Источник);
	КонецЕсли;
	
	Если ИмяСобытия = "ИнтернетПоддержкаОтключена" Или ИмяСобытия = "ИнтернетПоддержкаПодключена" Тогда
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
	
	Если ИмяСобытия = "СкрытиеКонфиденциальнойИнформации" Тогда
		ОбновитьСостояниеИнтернетПоддержки();
	КонецЕсли;
	
	Если ИмяСобытия = "ИнтернетПоддержкаПодключена" Тогда
		// Обработка подключения Интернет-поддержки.
		ВведенныеДанныеАутентификации = Параметр;	// Произвольный
		Если ВведенныеДанныеАутентификации <> Неопределено Тогда
			ДанныеАутентификации          = ВведенныеДанныеАутентификации;
			ДанныеАутентификацииЗаполнены = Истина;
			ОтобразитьСостояниеПодключения();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "РазрешенаРаботаСВнешнимиРесурсами" Тогда
		Элементы.ГруппаБлокировкаРаботыССервисамиИнтернетПоддержки.Видимость = Ложь;
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКлассификаторами
	
	Если (ИмяСобытия = "ИнтернетПоддержкаОтключена"
			Или ИмяСобытия = "ИнтернетПоддержкаПодключена")
		И Элементы.ГруппаОбновлениеКлассификаторов.Видимость
		И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКлассификаторами") Тогда
		
		МодульРаботаСКлассификаторамиВызовСервера = ОбщегоНазначенияКлиент.ОбщийМодуль(
			"РаботаСКлассификаторамиВызовСервера");
		Результат = МодульРаботаСКлассификаторамиВызовСервера.НастройкиОбновленияКлассификаторов();
		
		Если ИмяСобытия = "ИнтернетПоддержкаОтключена" Тогда
			Если Результат.ВариантОбновления = 1 Тогда
				Элементы.ДекорацияОбновлениеКлассификаторовНеВыполняется.Видимость = Истина;
			КонецЕсли;
		ИначеЕсли ИмяСобытия = "ИнтернетПоддержкаПодключена" Тогда
			Если Результат.Расписание <> Неопределено Тогда
				Элементы.ДекорацияРасписаниеОбновленияКлассификаторов.Заголовок =
					ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеРасписания(
						Результат.Расписание);
			КонецЕсли;
			ВариантОбновленияКлассификаторов = Результат.ВариантОбновления;
			Элементы.ДекорацияОбновлениеКлассификаторовНеВыполняется.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	// Конец ИнтернетПоддержкаПользователей.РаботаСКлассификаторами
	
	// ИнтернетПоддержкаПользователей.ПолучениеВнешнихКомпонент
	
	Если Элементы.ГруппаОбновлениеВнешнихКомпонент.Видимость
		И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеВнешнихКомпонент") Тогда
		
		МодульПолучениеВнешнихКомпонентКлиент =
			ОбщегоНазначенияКлиент.ОбщийМодуль("ПолучениеВнешнихКомпонентКлиент");
		МодульПолучениеВнешнихКомпонентКлиент.ИнтернетПоддержкаИСервисыОбработкаОповещения(
			ЭтотОбъект,
			ИмяСобытия,
			Параметр,
			Источник);
		
	КонецЕсли;
	
	// Конец ИнтернетПоддержкаПользователей.ПолучениеВнешнихКомпонент
	
	// ИнтернетПоддержкаПользователей.ПолучениеРегламентированныхОтчетов
	
	Если Элементы.ГруппаОбновлениеРегламентированныхОтчетов.Видимость
		И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеРегламентированныхОтчетов") Тогда
		
		МодульПолучениеРегламентированныхОтчетовКлиент =
			ОбщегоНазначенияКлиент.ОбщийМодуль("ПолучениеРегламентированныхОтчетовКлиент");
		МодульПолучениеРегламентированныхОтчетовКлиент.ИнтернетПоддержкаИСервисыОбработкаОповещения(
			ЭтотОбъект,
			ИмяСобытия,
			Параметр,
			Источник);
		
	КонецЕсли;
	
	// Конец ИнтернетПоддержкаПользователей.ПолучениеРегламентированныхОтчетов
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьИнтерфейсПрограммы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область ОбработчикиСобытийБСП

&НаКлиенте
Процедура ИспользоватьВебСервисАдресовПриИзменении(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.НастройкиПрограммы") Тогда
		ПриИзмененииИспользованияВебСервисАдресов(ИспользоватьВебСервисАдресов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьОтправлятьДанныеПриИзменении(Элемент)
	
	ПриИзмененииРежимаОтправкиДанныхВЦентрМониторинга(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьОтправлятьДанныеСтороннемуПриИзменении(Элемент)
	
	ПриИзмененииРежимаОтправкиДанныхВЦентрМониторинга(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапретитьОтправлятьДанныеПриИзменении(Элемент)
	
	ПриИзмененииРежимаОтправкиДанныхВЦентрМониторинга(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦентрМониторингаАдресСервисаПриИзменении(Элемент)
	
	ЦентрМониторингаАдресСервисаПриИзмененииНаСервере(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ДетализироватьОбновлениеИБВЖурналеРегистрацииПриИзменении(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.НастройкиПрограммы") Тогда
		МодульНастройкиПрограммыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("НастройкиПрограммыКлиент");
		МодульНастройкиПрограммыКлиент.ИнтернетПоддержкаИСервисыПриИзмененииКонстанты(
			ЭтотОбъект,
			Элемент);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСервисСклоненияMorpherПриИзменении(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.НастройкиПрограммы") Тогда
		
		ПриИзмененииКонстантыБСПНаСервере("ИспользоватьСервисСклоненияMorpher");
		
		МодульНастройкиПрограммыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("НастройкиПрограммыКлиент");
		МодульНастройкиПрограммыКлиент.ИнтернетПоддержкаИСервисыПриИзмененииКонстанты(
			ЭтотОбъект,
			Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область БазоваяФункциональностьБИП

&НаКлиенте
Процедура ДекорацияЛогинИППОбработкаНавигационнойСсылки(
	Элемент,
	НавигационнаяСсылкаФорматированнойСтроки,
	СтандартнаяОбработка)
	
	Если Элемент.Имя = "ДекорацияЛогинИПП" Тогда
		СтандартнаяОбработка = Ложь;
		ИнтернетПоддержкаПользователейКлиент.ОткрытьЛичныйКабинетПользователя();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПояснениеБлокировкаРаботыССервисамиИнтернетПоддержкиОбработкаНавигационнойСсылки(
	Элемент,
	НавигационнаяСсылкаФорматированнойСтроки,
	СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("ОбщаяФорма.БлокировкаРаботыССервисамиИнтернетПоддержки");
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКлассификаторами

&НаКлиенте
Процедура ФайлКлассификаторовПриИзменении(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКлассификаторами") Тогда
		ПриИзмененииКонстанты("ФайлКлассификаторов", ФайлКлассификаторов, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлКлассификаторовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКлассификаторами") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок = НСтр("ru = 'Выберите файл с классификаторами'");
	ДиалогВыбораФайла.Фильтр    = НСтр("ru = 'Файл классификаторов (*.zip)|*.zip'");
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ФайлКлассификаторовПослеВыбораФайла",
		ЭтотОбъект);
	
	ФайловаяСистемаКлиент.ПоказатьДиалогВыбора(
		ОписаниеОповещения,
		ДиалогВыбораФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОбновленияКлассификаторовПриИзменении(Элемент)
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКлассификаторами") Тогда
		Возврат;
	КонецЕсли;
	
	Если ВариантОбновленияКлассификаторов = 1
		И Не ДанныеАутентификацииЗаполнены Тогда
		
		Если Не ИнтернетПоддержкаПользователейКлиент.ДоступноПодключениеИнтернетПоддержки() Тогда
			ПоказатьПредупреждение(
				,
				НСтр("ru = 'Для автоматического обновления классификаторов необходимо подключить Интернет-поддержку пользователей.'"));
			ВариантОбновленияКлассификаторов = ВариантОбновленияКлассификаторовПредыдущееЗначение;
			Возврат;
		КонецЕсли;
		
		ОповещениеПослеПодключения = Новый ОписаниеОповещения(
			"ПослеПодключенияИнтернетПоддержкиРаботаСКлассификаторами",
			ЭтотОбъект);
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("Элемент"                   , Элемент);
		ДополнительныеПараметры.Вставить("ОповещениеПослеПодключения", ОповещениеПослеПодключения);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПриОтветеНаВопросПодключенияИнтернетПоддержки",
			ЭтотОбъект,
			ДополнительныеПараметры);
		
		Ответы = Новый СписокЗначений;
		Ответы.Добавить(КодВозвратаДиалога.Да    , НСтр("ru = 'Подключить'"));
		Ответы.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'"));
		
		ПоказатьВопрос(
			ОписаниеОповещения,
			НСтр("ru = 'Для автоматического обновления классификаторов необходимо подключить Интернет-поддержку пользователей.'"),
			Ответы);
			
		Возврат;
	Иначе
		Элементы.ДекорацияОбновлениеКлассификаторовНеВыполняется.Видимость = Ложь;
	КонецЕсли;
	
	ПриИзмененииКонстанты("ВариантОбновленияКлассификаторов", ВариантОбновленияКлассификаторов, Ложь);
	ВариантОбновленияКлассификаторовПредыдущееЗначение = ВариантОбновленияКлассификаторов;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРасписаниеОбновленияКлассификаторовНажатие(Элемент)
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКлассификаторами") Тогда
		Возврат;
	КонецЕсли;
	
	МодульРаботаСКлассификаторамиВызовСервера = ОбщегоНазначенияКлиент.ОбщийМодуль(
		"РаботаСКлассификаторамиВызовСервера");
	Результат = МодульРаботаСКлассификаторамиВызовСервера.НастройкиОбновленияКлассификаторов();
	Если Результат.Расписание <> Неопределено Тогда
		ДиалогРасписание = Новый ДиалогРасписанияРегламентногоЗадания(Результат.Расписание);
	Иначе
		ДиалогРасписание = Новый ДиалогРасписанияРегламентногоЗадания(Новый РасписаниеРегламентногоЗадания);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПриИзмененииРасписания",
		ЭтотОбъект);
	
	ДиалогРасписание.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОбновлениеКлассификаторовНеВыполняетсяОбработкаНавигационнойСсылки(
	Элемент,
	НавигационнаяСсылкаФорматированнойСтроки,
	СтандартнаяОбработка)
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКлассификаторами") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ИнтернетПоддержкаПользователейКлиент.ДоступноПодключениеИнтернетПоддержки() Тогда
		ПоказатьПредупреждение(
			,
			НСтр("ru = 'Для автоматического обновления классификаторов необходимо подключить Интернет-поддержку пользователей.'"));
		Возврат;
	КонецЕсли;
	
	ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(
		Неопределено,
		ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область Новости

&НаКлиенте
Процедура ВключитьРаботуСНовостямиПриИзменении(Элемент)
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ВключитьРаботуСНовостями Тогда
		
		ТекстВопроса = СтроковыеФункцииКлиент.ФорматированнаяСтрока(
			НСтр("ru = 'Настоятельно <b>не рекомендуется</b> отключать общую опцию получения новостей.
				|Это позволит оперативно получать важную информацию от службы поддержки фирмы 1С.
				|
				|Отключить опцию получения новостей?'"));
		
		СписокКнопок = Новый СписокЗначений();
		СписокКнопок.Добавить("Отключить"  , НСтр("ru = 'Отключить'"));
		СписокКнопок.Добавить("НеОтключать", НСтр("ru = 'Оставить включенной'"));
		
		ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(
			"ВключитьРаботуСНовостямиПриОтключении", // Имя процедуры.
			ЭтотОбъект);
		
		ПоказатьВопрос(
			ОписаниеОповещенияОЗавершении,
			ТекстВопроса,
			СписокКнопок,
			,
			"НеОтключать", // Идентификатор.
			НСтр("ru = 'Предупреждение'"));
		
	Иначе
		// Обработка изменения ФО "РазрешенаРаботаСНовостями".
		ПриИзмененииКонстанты("РазрешенаРаботаСНовостями", ВключитьРаботуСНовостями, Истина, Истина);
		Элементы.УправлениеНовостями.Видимость = ВключитьРаботуСНовостями;
		// Конец Обработка изменения ФО "РазрешенаРаботаСНовостями".
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНовостей_ИнтервалАвтообновленияОчистка(Элемент, СтандартнаяОбработка)

	// Для разделенного режима есть особенность: значение "0" означает
	//  удаление настройки и использование значения из константы.
	СписокНовостей_ИнтервалАвтообновления = 0;
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура СписокНовостей_ИнтервалАвтообновленияПриИзменении(Элемент)

	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		Возврат;
	КонецЕсли;

	// Сохранить значение
	СписокНовостей_ИнтервалАвтообновленияПриИзмененииНаСервере(СписокНовостей_ИнтервалАвтообновления);

	// Перезаполнить данные и повторно подключить обработчики всплывания для текущего сеанса.
	// Настройки хранятся в "СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента()",
	//  а они берутся из ПовтИсп, где заполняются в переопределяемых методах.
	// Достаточно просто сбросить кеш, чтобы значения перезаполнились.
	ОбновитьПовторноИспользуемыеЗначения();
	МодульОбработкаНовостейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбработкаНовостейКлиент");
	МодульОбработкаНовостейКлиент.ПодключитьОбработчикОповещенияОВажныхИОченьВажныхНовостях();

КонецПроцедуры

#КонецОбласти

#Область ПолучениеОбновленийПрограммы

&НаКлиенте
Процедура АвтоматическаяПроверкаОбновлений1ПриИзменении(Элемент)
	
	АвтоматическаяПроверкаОбновленийПриИзмененииАсинх(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическаяПроверкаОбновлений2ПриИзменении(Элемент)
	
	АвтоматическаяПроверкаОбновленийПриИзмененииАсинх(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантИнформированияОВыходеОбновлений1ПриИзменении(Элемент)
	
	СохранитьВариантИнформированияОВыходеОбновленийНаСервере(ВариантИнформированияОВыходеОбновлений);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантИнформированияОВыходеОбновлений2ПриИзменении(Элемент)
	
	СохранитьВариантИнформированияОВыходеОбновленийНаСервере(ВариантИнформированияОВыходеОбновлений);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРасписаниеПроверкиОбновленийНажатие(Элемент)
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеОбновленийПрограммы") Тогда
		Возврат;
	КонецЕсли;
	
	МодульПолучениеОбновленийПрограммыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПолучениеОбновленийПрограммыКлиент");
	НастройкиОбновления = МодульПолучениеОбновленийПрограммыКлиент.ГлобальныеНастройкиОбновления();
	РасписаниеПроверки = ОбщегоНазначенияКлиентСервер.СтруктураВРасписание(НастройкиОбновления.Расписание);
	
	ДиалогРасписание = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеПроверки);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПриИзмененииРасписанияПроверкиОбновлений",
		ЭтотОбъект);
	ДиалогРасписание.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогДистрибутиваПлатформыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	#Если Не ВебКлиент Тогда
	ФайловаяСистемаКлиент.ОткрытьПроводник(КаталогДистрибутиваПлатформы);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРасписаниеУстановкаИсправленийНажатие(Элемент)
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеОбновленийПрограммы") Тогда
		Возврат;
	КонецЕсли;
	
	МодульПолучениеОбновленийПрограммыВызовСервера = ОбщегоНазначенияКлиент.ОбщийМодуль(
		"ПолучениеОбновленийПрограммыВызовСервера");
	Расписание = МодульПолучениеОбновленийПрограммыВызовСервера.РасписаниеЗаданияУстановкиИсправлений();
	ДиалогРасписание = Новый ДиалогРасписанияРегламентногоЗадания(Расписание);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПриИзмененииРасписанияУстановкиИсправлений",
		ЭтотОбъект);
	ДиалогРасписание.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагружатьИУстанавливатьИсправленияАвтоматическиПриИзменении(Элемент)
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеОбновленийПрограммы") Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗагружатьИУстанавливатьИсправленияАвтоматически
		И Не ДанныеАутентификацииЗаполнены Тогда
		
		ЗагружатьИУстанавливатьИсправленияАвтоматически = Ложь;
		
		Если Не ИнтернетПоддержкаПользователейКлиент.ДоступноПодключениеИнтернетПоддержки() Тогда
			ПоказатьПредупреждение(
				,
				НСтр("ru = 'Для автоматического получения и установки исправлений (патчей)
					|необходимо подключить Интернет-поддержку пользователей.'"));
			Возврат;
		КонецЕсли;
		
		ОповещениеПослеПодключения = Новый ОписаниеОповещения(
			"ПодключениеИнтернетПоддержкиЗавершениеАвтоматическаяУстановкаИсправлений",
			ЭтотОбъект);
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("Элемент"                   , Элемент);
		ДополнительныеПараметры.Вставить("ОповещениеПослеПодключения", ОповещениеПослеПодключения);
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Подключить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения(
				"ПриОтветеНаВопросПодключенияИнтернетПоддержки",
				ЭтотОбъект,
				ДополнительныеПараметры),
			НСтр("ru = 'Для автоматического получения и установки исправлений (патчей)
				|необходимо подключить Интернет-поддержку пользователей.'"),
			Кнопки);
		
	Иначе
		
		МодульПолучениеОбновленийПрограммыВызовСервера = ОбщегоНазначенияКлиент.ОбщийМодуль(
			"ПолучениеОбновленийПрограммыВызовСервера");
		МодульПолучениеОбновленийПрограммыВызовСервера.ВключитьОтключитьАвтоматическуюУстановкуИсправлений(
			ЗагружатьИУстанавливатьИсправленияАвтоматически);
		Элементы.ДекорацияРасписаниеУстановкаИсправлений.Доступность = ЗагружатьИУстанавливатьИсправленияАвтоматически;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКонтрагентами

&НаКлиенте
Процедура ИспользоватьПроверкуКонтрагентовПриИзменении(Элемент)
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКонтрагентами") Тогда
		Возврат;
	КонецЕсли;
	
	ВключитьПроверку = (ИспользоватьПроверкуКонтрагентов = 1);
	
	МодульПроверкаКонтрагентовВызовСервера = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроверкаКонтрагентовВызовСервера");
	МодульПроверкаКонтрагентовВызовСервера.ПриВключенииВыключенииПроверки(ВключитьПроверку);
	
	ОбновитьИнтерфейс = Истина;
	ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 2, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СПАРКРиски

&НаКлиенте
Процедура ИспользоватьСервисСПАРКРискиПриИзменении(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		ПриИзмененииКонстанты("ИспользоватьСервисСПАРКРиски", ИспользоватьСервисСПАРКРиски, Истина, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СистемаБыстрыхПлатежей

&НаКлиенте
Процедура ДлительностьОперацииПлатежнойСистемыПриИзменении(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей") Тогда
		МодульСистемаБыстрыхПлатежейВызовСервера = ОбщегоНазначенияКлиент.ОбщийМодуль(
			"СистемаБыстрыхПлатежейВызовСервера");
		МодульСистемаБыстрыхПлатежейВызовСервера.УстановитьДлительностьОперации(
			ДлительностьОперацииПлатежнойСистемы);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИнтеграцияСКоннект

&НаКлиенте
Процедура ИспользоватьКоннектПриИзменении(Элемент)
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ИнтеграцияСКоннект") Тогда
		Возврат;
	КонецЕсли;
	
	МодульИнтеграцияСКоннектВызовСервера = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтеграцияСКоннектВызовСервера");
	МодульИнтеграцияСКоннектВызовСервера.УстановитьИспользованиеИнтеграции(
		ИспользоватьКоннект);
	
	Элементы.НастройкаИнтеграцииСКоннект.Доступность = ИспользоватьКоннект;
	ОбщегоНазначенияКлиент.ОбновитьИнтерфейсПрограммы();
	
КонецПроцедуры

#КонецОбласти

#Область ОнлайнОплаты

&НаКлиенте
Процедура ИспользоватьОнлайнОплатыПриИзменении(Элемент)
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОнлайнОплаты") Тогда
		Возврат;
	КонецЕсли;
	
	МодульОнлайнОплатыВызовСервера = ОбщегоНазначенияКлиент.ОбщийМодуль("ОнлайнОплатыВызовСервера");
	МодульОнлайнОплатыВызовСервера.УстановитьИспользованиеИнтеграции(ОнлайнОплаты);
	
	Элементы.ГруппаПолучениеУведомлений.Доступность = ОнлайнОплаты;
	Элементы.ГруппаНастройкиОнлайнОплатыПраво.Доступность = ОнлайнОплаты;
	Элементы.ДекорацияРасписаниеПолученияУведомленийОтОнлайнОплат.Доступность = 
		ИспользоватьАвтоматическоеПолучениеУведомленияОтОнлайнОплат;
	
	ОбщегоНазначенияКлиент.ОбновитьИнтерфейсПрограммы();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьАвтоматическоеПолучениеУведомленияОтОнлайнОплатПриИзменении(Элемент)
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОнлайнОплаты") Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьАвтоматическоеПолучениеУведомленияОтОнлайнОплат Тогда
		
		ОбработкаПродолжения = Новый ОписаниеОповещения(
			"ИспользоватьАвтоматическоеПолучениеУведомленияОтОнлайнОплатПродолжение",
			ЭтотОбъект,
			Параметры);
				
		МодульОнлайнОплатыСлужебныйКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОнлайнОплатыСлужебныйКлиент");
		МодульОнлайнОплатыСлужебныйКлиент.НачатьПроверкуИПодключениеИПП(ОбработкаПродолжения);
		
	Иначе
		ИспользоватьАвтоматическоеПолучениеУведомленияОтОнлайнОплатЗавершение();
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ДекорацияРасписаниеПолученияУведомленийОтОнлайнОплатНажатие(Элемент)
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОнлайнОплаты") Тогда
		Возврат;
	КонецЕсли;
	
	МодульОнлайнОплатыВызовСервера = ОбщегоНазначенияКлиент.ОбщийМодуль("ОнлайнОплатыВызовСервера");
	Расписание = МодульОнлайнОплатыВызовСервера.РасписаниеЗаданияПолучениеУведомленияОтОнлайнОплат();
	ДиалогРасписание = Новый ДиалогРасписанияРегламентногоЗадания(Расписание);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПриИзмененииРасписанияПолученияУведомлений",
		ЭтотОбъект);
	ДиалогРасписание.Показать(ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеРегламентированныхОтчетов

&НаКлиенте
Процедура ФайлРегламентированныхОтчетовПриИзменении(Элемент)
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеРегламентированныхОтчетов") Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииКонстанты("ФайлРегламентированныхОтчетов", ФайлРегламентированныхОтчетов, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ФайлРегламентированныхОтчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеРегламентированныхОтчетов") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок = НСтр("ru = 'Выберите файл с регламентированными отчетами'");
	ДиалогВыбораФайла.Фильтр    = НСтр("ru = 'Файл регламентированных отчетов (*.zip)|*.zip'");
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ФайлРегламентированныхОтчетовПослеВыбораФайла",
		ЭтотОбъект);
	
	ФайловаяСистемаКлиент.ПоказатьДиалогВыбора(
		ОписаниеОповещения,
		ДиалогВыбораФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОбновленияРегламентированныхОтчетовПриИзменении(Элемент)
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеРегламентированныхОтчетов") Тогда
		Возврат
	КонецЕсли;
	
	Если ВариантОбновленияРегламентированныхОтчетов = 1
		И Не ДанныеАутентификацииЗаполнены Тогда
		
		Если Не ИнтернетПоддержкаПользователейКлиент.ДоступноПодключениеИнтернетПоддержки() Тогда
			ПоказатьПредупреждение(
				,
				НСтр("ru = 'Для автоматического обновления регламентированных отчетов необходимо подключить Интернет-поддержку пользователей.'"));
			ВариантОбновленияРегламентированныхОтчетов = ВариантОбновленияРегламентированныхОтчетовПредыдущееЗначение;
			Возврат;
		КонецЕсли;
		
		ОповещениеПослеПодключения = Новый ОписаниеОповещения(
			"ПослеПодключенияИнтернетПоддержкиПолучениеРегламентированныхОтчетов",
			ЭтотОбъект);
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("Элемент"                   , Элемент);
		ДополнительныеПараметры.Вставить("ОповещениеПослеПодключения", ОповещениеПослеПодключения);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПриОтветеНаВопросПодключенияИнтернетПоддержки",
			ЭтотОбъект,
			ДополнительныеПараметры);
		
		Ответы = Новый СписокЗначений;
		Ответы.Добавить(КодВозвратаДиалога.Да    , НСтр("ru = 'Подключить'"));
		Ответы.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'"));
		
		ПоказатьВопрос(
			ОписаниеОповещения,
			НСтр("ru = 'Для автоматического обновления регламентированных отчетов необходимо подключить Интернет-поддержку пользователей.'"),
			Ответы);
			
		Возврат;
	Иначе
		Элементы.ДекорацияОбновлениеРегламентированныхОтчетовНеВыполняется.Видимость = Ложь;
	КонецЕсли;
	
	ПриИзмененииКонстанты("ВариантОбновленияРегламентированныхОтчетов", ВариантОбновленияРегламентированныхОтчетов, Ложь);
	ВариантОбновленияРегламентированныхОтчетовПредыдущееЗначение = ВариантОбновленияРегламентированныхОтчетов;

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРасписаниеОбновленияРегламентированныхОтчетовНажатие(Элемент)
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеРегламентированныхОтчетов") Тогда
		Возврат;
	КонецЕсли;
	
	МодульПолучениеРегламентированныхОтчетовВызовСервера = ОбщегоНазначенияКлиент.ОбщийМодуль(
		"ПолучениеРегламентированныхОтчетовВызовСервера");
	Результат = МодульПолучениеРегламентированныхОтчетовВызовСервера.НастройкиОбновленияРегламентированныхОтчетов();
	Если Результат.Расписание <> Неопределено Тогда
		ДиалогРасписание = Новый ДиалогРасписанияРегламентногоЗадания(Результат.Расписание);
	Иначе
		ДиалогРасписание = Новый ДиалогРасписанияРегламентногоЗадания(Новый РасписаниеРегламентногоЗадания);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПриИзмененииРасписанияОбновленияРегламентированныхОтчетов",
		ЭтотОбъект);
	
	ДиалогРасписание.Показать(ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОбновлениеРегламентированныхОтчетовНеВыполняетсяОбработкаНавигационнойСсылки(
	Элемент,
	НавигационнаяСсылкаФорматированнойСтроки,
	СтандартнаяОбработка)
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеРегламентированныхОтчетов") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ИнтернетПоддержкаПользователейКлиент.ДоступноПодключениеИнтернетПоддержки() Тогда
		ПоказатьПредупреждение(
			,
			НСтр("ru = 'Для автоматического обновления регламентированных отчетов необходимо подключить Интернет-поддержку пользователей.'"));
		Возврат;
	КонецЕсли;
	
	ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(
		Неопределено,
		ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеВнешнихКомпонент

&НаКлиенте
Процедура ФайлВнешнихКомпонентПриИзменении(Элемент)
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеВнешнихКомпонент") Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиОбновления = Новый Структура;
	НастройкиОбновления.Вставить(
		"ФайлВнешнихКомпонент",
		ФайлВнешнихКомпонент);
	МодульПолучениеВнешнихКомпонентКлиент =
		ОбщегоНазначенияКлиент.ОбщийМодуль("ПолучениеВнешнихКомпонентКлиент");
	МодульПолучениеВнешнихКомпонентКлиент.ИзменитьНастройкиОбновленияВнешнихКомпонент(
		НастройкиОбновления);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлВнешнихКомпонентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеВнешнихКомпонент") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок = НСтр("ru = 'Выберите файл с внешними компонентами'");
	ДиалогВыбораФайла.Фильтр    = НСтр("ru = 'Файл внешних компонент (*.zip)|*.zip'");
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ФайлВнешнихКомпонентПослеВыбораФайла",
		ЭтотОбъект);
	
	ФайловаяСистемаКлиент.ПоказатьДиалогВыбора(
		ОписаниеОповещения,
		ДиалогВыбораФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОбновленияВнешнихКомпонентПриИзменении(Элемент)
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеВнешнихКомпонент") Тогда
		Возврат
	КонецЕсли;
	
	Если ВариантОбновленияВнешнихКомпонент = 1
		И Не ДанныеАутентификацииЗаполнены Тогда
		
		Если Не ИнтернетПоддержкаПользователейКлиент.ДоступноПодключениеИнтернетПоддержки() Тогда
			ПоказатьПредупреждение(
				,
				НСтр("ru = 'Для автоматического обновления внешних компонент необходимо подключить Интернет-поддержку пользователей.'"));
			ВариантОбновленияВнешнихКомпонент = ВариантОбновленияВнешнихКомпонентПредыдущееЗначение;
			Возврат;
		КонецЕсли;
		
		ОповещениеПослеПодключения = Новый ОписаниеОповещения(
			"ПослеПодключенияИнтернетПоддержкиПолучениеВнешнихКомпонент",
			ЭтотОбъект);
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("Элемент"                   , Элемент);
		ДополнительныеПараметры.Вставить("ОповещениеПослеПодключения", ОповещениеПослеПодключения);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПриОтветеНаВопросПодключенияИнтернетПоддержки",
			ЭтотОбъект,
			ДополнительныеПараметры);
		
		Ответы = Новый СписокЗначений;
		Ответы.Добавить(КодВозвратаДиалога.Да    , НСтр("ru = 'Подключить'"));
		Ответы.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'"));
		
		ПоказатьВопрос(
			ОписаниеОповещения,
			НСтр("ru = 'Для автоматического обновления внешних компонент необходимо подключить Интернет-поддержку пользователей.'"),
			Ответы);
			
		Возврат;
	Иначе
		Элементы.ДекорацияОбновлениеВнешнихКомпонентНеВыполняется.Видимость = Ложь;
	КонецЕсли;
	
	ПриИзмененииКонстанты("ВариантОбновленияВнешнихКомпонент", ВариантОбновленияВнешнихКомпонент, Ложь);
	ВариантОбновленияВнешнихКомпонентПредыдущееЗначение = ВариантОбновленияВнешнихКомпонент;

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРасписаниеОбновленияВнешнихКомпонентНажатие(Элемент)
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеВнешнихКомпонент") Тогда
		Возврат;
	КонецЕсли;
	
	МодульПолучениеВнешнихКомпонентКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль(
		"ПолучениеВнешнихКомпонентКлиент");
	Результат = МодульПолучениеВнешнихКомпонентКлиент.НастройкиОбновленияВнешнихКомпонент();
	Если Результат.Расписание <> Неопределено Тогда
		ДиалогРасписание = Новый ДиалогРасписанияРегламентногоЗадания(Результат.Расписание);
	Иначе
		ДиалогРасписание = Новый ДиалогРасписанияРегламентногоЗадания(Новый РасписаниеРегламентногоЗадания);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПриИзмененииРасписанияОбновленияВнешнихКомпонент",
		ЭтотОбъект);
	
	ДиалогРасписание.Показать(ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОбновлениеВнешнихКомпонентНеВыполняетсяОбработкаНавигационнойСсылки(
	Элемент,
	НавигационнаяСсылкаФорматированнойСтроки,
	СтандартнаяОбработка)
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеВнешнихКомпонент") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ИнтернетПоддержкаПользователейКлиент.ДоступноПодключениеИнтернетПоддержки() Тогда
		ПоказатьПредупреждение(
			,
			НСтр("ru = 'Для автоматического обновления внешних компонент необходимо подключить Интернет-поддержку пользователей.'"));
		Возврат;
	КонецЕсли;
	
	ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(
		Неопределено,
		ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ОбработчикиСобытийБСП

&НаКлиенте
Процедура ЗагрузкаАдресногоКлассификатора(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.НастройкиПрограммы") Тогда
		МодульНастройкиПрограммыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("НастройкиПрограммыКлиент");
		МодульНастройкиПрограммыКлиент.ИнтернетПоддержкаИСервисыЗагрузкаАдресногоКлассификатора(
			ЭтотОбъект,
			Команда);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаАдресныхСведений(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.НастройкиПрограммы") Тогда
		МодульНастройкиПрограммыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("НастройкиПрограммыКлиент");
		МодульНастройкиПрограммыКлиент.ИнтернетПоддержкаИСервисыОчисткаАдресныхСведений(
			ЭтотОбъект,
			Команда);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаКурсовВалют(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.НастройкиПрограммы") Тогда
		МодульНастройкиПрограммыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("НастройкиПрограммыКлиент");
		МодульНастройкиПрограммыКлиент.ИнтернетПоддержкаИСервисыЗагрузкаКурсовВалют(
			ЭтотОбъект,
			Команда);
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.ОбновлениеВерсииИБ
&НаКлиенте
Процедура ОтложеннаяОбработкаДанных(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.НастройкиПрограммы") Тогда
		МодульНастройкиПрограммыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("НастройкиПрограммыКлиент");
		МодульНастройкиПрограммыКлиент.ИнтернетПоддержкаИСервисыОткрытьИндикациюХодаОтложенногоОбновленияИБ(
			ЭтотОбъект,
			Команда);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ

&НаКлиенте
Процедура ПодключитьОтключитьОбсуждения(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.НастройкиПрограммы") Тогда
		МодульНастройкиПрограммыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("НастройкиПрограммыКлиент");
		МодульНастройкиПрограммыКлиент.ИнтернетПоддержкаИСервисыПодключитьОтключитьОбсуждения(
			ЭтотОбъект,
			Команда);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбсужденияНастроитьИнтеграциюСВнешнимиСистемами(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.НастройкиПрограммы") Тогда
		МодульНастройкиПрограммыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("НастройкиПрограммыКлиент");
		МодульНастройкиПрограммыКлиент.ИнтернетПоддержкаИСервисыПоказатьНастройкуИнтеграцииСВнешнимиСистемами(
			ЭтотОбъект,
			Команда);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОписаниеИзмененийСистемы(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.НастройкиПрограммы") Тогда
		МодульНастройкиПрограммыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("НастройкиПрограммыКлиент");
		МодульНастройкиПрограммыКлиент.ИнтернетПоддержкаИСервисыОткрытьОписаниеИзмененийСистемы(
			ЭтотОбъект,
			Команда);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаДоступаКСервисуMorpher(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.НастройкиПрограммы") Тогда
		МодульНастройкиПрограммыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("НастройкиПрограммыКлиент");
		МодульНастройкиПрограммыКлиент.ИнтернетПоддержкаИСервисыНастройкаДоступаКСервисуMorpher(
			ЭтотОбъект,
			Команда);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦентрМониторингаНастройки(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.НастройкиПрограммы") Тогда
		МодульНастройкиПрограммыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("НастройкиПрограммыКлиент");
		МодульНастройкиПрограммыКлиент.ИнтернетПоддержкаИСервисыЦентрМониторингаНастройки(
			ЭтотОбъект,
			Команда);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦентрМониторингаОтправитьКонтактнуюИнформацию(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.НастройкиПрограммы") Тогда
		МодульНастройкиПрограммыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("НастройкиПрограммыКлиент");
		МодульНастройкиПрограммыКлиент.ИнтернетПоддержкаИСервисыЦентрМониторингаОтправитьКонтактнуюИнформацию(
			ЭтотОбъект,
			Команда);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВнешниеКомпоненты(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.НастройкиПрограммы") Тогда
		МодульНастройкиПрограммыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("НастройкиПрограммыКлиент");
		МодульНастройкиПрограммыКлиент.ИнтернетПоддержкаИСервисыОткрытьВнешниеКомпоненты(
			ЭтотОбъект,
			Команда);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область БазоваяФункциональностьБИП

&НаКлиенте
Процедура ВойтиИлиВыйтиИПП(Команда)
	
	Если ДанныеАутентификации = Неопределено Тогда
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(, ЭтотОбъект);
	Иначе
		ПоказатьВопрос(
			Новый ОписаниеОповещения(
				"ПриОтветеНаВопросОВыходеИзИнтернетПоддержки",
				ЭтотОбъект),
			НСтр("ru = 'Логин и пароль для подключения к сервисам Интернет-поддержки пользователей будут удалены из программы.
				|Отключить Интернет-поддержку?'"),
			РежимДиалогаВопрос.ДаНет,
			,
			КодВозвратаДиалога.Нет,
			НСтр("ru = 'Выход из Интернет-поддержки пользователей'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформационноТехнологическоеСопровождение(Команда)
	
	ИнтернетПоддержкаПользователейКлиент.ОткрытьСтраницуИнтегрированногоСайта(
		"https://its.1c.ru");
	
КонецПроцедуры

#КонецОбласти

#Область СообщенияВСлужбуТехническойПоддержки

&НаКлиенте
Процедура СообщениеВСлужбуТехническойПоддержки(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СообщенияВСлужбуТехническойПоддержки") Тогда
		
		МодульСообщенияВСлужбуТехническойПоддержкиКлиентСервер =
			ОбщегоНазначенияКлиент.ОбщийМодуль("СообщенияВСлужбуТехническойПоддержкиКлиентСервер");
		ДанныеСообщения = МодульСообщенияВСлужбуТехническойПоддержкиКлиентСервер.ДанныеСообщения();
		ДанныеСообщения.Получатель = "webIts";
		ДанныеСообщения.Тема       = НСтр("ru = 'Интернет-поддержка пользователей'");
		ДанныеСообщения.Сообщение  = НСтр("ru = '<Заполните текст сообщения>'");
		
		МодульСообщенияВСлужбуТехническойПоддержкиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль(
			"СообщенияВСлужбуТехническойПоддержкиКлиент");
		МодульСообщенияВСлужбуТехническойПоддержкиКлиент.ОтправитьСообщение(
			ДанныеСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТехническаяИнформация(Команда)
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СообщенияВСлужбуТехническойПоддержки") Тогда
		Возврат;
	КонецЕсли;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.Фильтр = НСтр("ru = 'Текстовые файлы (*.txt)|*.txt'");
	Диалог.МножественныйВыбор = Ложь;
	Диалог.ПолноеИмяФайла = НСтр("ru = 'Техническая информация'");
	Диалог.Заголовок = НСтр("ru = 'Сохранение технической информации'");

	Обработчик = Новый ОписаниеОповещения(
		"СохранитьТехническуюИнформациюПослеВыбораИмениФайла",
		ЭтотОбъект);
	ФайловаяСистемаКлиент.ПоказатьДиалогВыбора(Обработчик, Диалог);
	
КонецПроцедуры

#КонецОбласти

#Область МониторПортала1СИТС

&НаКлиенте
Процедура МониторИнтернетПоддержки(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.МониторПортала1СИТС") Тогда
		МодульМониторПортала1СИТСКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("МониторПортала1СИТСКлиент");
		МодульМониторПортала1СИТСКлиент.ОткрытьМонитор();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКлассификаторами

&НаКлиенте
Процедура ОбновлениеКлассификаторов(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКлассификаторами") Тогда
		МодульРаботаСКлассификаторамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСКлассификаторамиКлиент");
		МодульРаботаСКлассификаторамиКлиент.ОбновитьКлассификаторы();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Новости

&НаКлиенте
Процедура УправлениеНовостями(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		МодульОбработкаНовостейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбработкаНовостейКлиент");
		МодульОбработкаНовостейКлиент.НастройкаНовостей(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеОбновленийПрограммы

&НаКлиенте
Процедура ОбновлениеПрограммы(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеОбновленийПрограммы") Тогда
		МодульПолучениеОбновленийПрограммыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль(
			"ПолучениеОбновленийПрограммыКлиент");
		МодульПолучениеОбновленийПрограммыКлиент.ОбновитьПрограмму();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКонтрагентами

&НаКлиенте
Процедура ПроверитьДоступКСервисамКонтрагентов(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКонтрагентами") Тогда
		МодульПроверкаКонтрагентовКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроверкаКонтрагентовКлиент");
		МодульПроверкаКонтрагентовКлиент.ОткрытьФормуПроверкиПодключенияКСервисам();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СистемаБыстрыхПлатежей

&НаКлиенте
Процедура НастройкаПодключенияКСистемеБыстрыхПлатежей(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.БазоваяФункциональностьСБП") Тогда
		МодульСистемаБыстрыхПлатежейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль(
			"СистемаБыстрыхПлатежейКлиент");
		МодульСистемаБыстрыхПлатежейКлиент.НастройкиПодключения(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьШаблоныСообщенийСБП(Команда)
	
	Если (ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПc2b")
		И ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ШаблоныСообщений")) Тогда
		МодульПереводыСБПc2bКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль(
			"ПереводыСБПc2bКлиент");
		МодульПереводыСБПc2bКлиент.ОткрытьШаблоныСообщенийСБП(УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИнтеграцияСКоннект

&НаКлиенте
Процедура НастройкаИнтеграцииСКоннект(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ИнтеграцияСКоннект") Тогда
		МодульИнтеграцияСКоннектКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтеграцияСКоннектКлиент");
		МодульИнтеграцияСКоннектКлиент.НастройкаИнтеграции(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОнлайнОплаты

&НаКлиенте
Процедура ОткрытьНастройкиОнлайнОплат(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОнлайнОплаты") Тогда
		МодульОнлайнОплатыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОнлайнОплатыКлиент");
		МодульОнлайнОплатыКлиент.НастройкаОнлайнОплат(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьШаблоныСообщенийОнлайнОплат(Команда)
	
	Если (ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОнлайнОплаты") 
		И ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ШаблоныСообщений")) Тогда
		
		МодульОнлайнОплатыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОнлайнОплатыКлиент");
		МодульОнлайнОплатыКлиент.ОткрытьШаблоныСообщенийОнлайнОплат(УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеРегламентированныхОтчетов

&НаКлиенте
Процедура ОбновлениеРегламентированныхОтчетов(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеРегламентированныхОтчетов") Тогда
		МодульПолучениеРегламентированныхОтчетовКлиент =
			ОбщегоНазначенияКлиент.ОбщийМодуль("ПолучениеРегламентированныхОтчетовКлиент");
		МодульПолучениеРегламентированныхОтчетовКлиент.ОбновитьРегламентированныеОтчеты();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеВнешнихКомпонент

&НаКлиенте
Процедура ОбновлениеВнешнихКомпонент(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеВнешнихКомпонент") Тогда
		МодульПолучениеВнешнихКомпонентКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПолучениеВнешнихКомпонентКлиент");
		МодульПолучениеВнешнихКомпонентКлиент.ОбновитьВнешниеКомпоненты();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОнлайнОплаты

&НаКлиенте
Процедура ИспользоватьАвтоматическоеПолучениеУведомленияОтОнлайнОплатПродолжение(
		Результат,
		ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено
		Или Не Результат Тогда
		ИспользоватьАвтоматическоеПолучениеУведомленияОтОнлайнОплат = Ложь;
	Иначе
		ИспользоватьАвтоматическоеПолучениеУведомленияОтОнлайнОплатЗавершение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьАвтоматическоеПолучениеУведомленияОтОнлайнОплатЗавершение()
	
	Элементы.ДекорацияРасписаниеПолученияУведомленийОтОнлайнОплат.Доступность =
		ИспользоватьАвтоматическоеПолучениеУведомленияОтОнлайнОплат;
	
	МодульОнлайнОплатыВызовСервера = ОбщегоНазначенияКлиент.ОбщийМодуль("ОнлайнОплатыВызовСервера");
	МодульОнлайнОплатыВызовСервера.ИспользоватьАвтоматическоеПолучениеУведомленияОтОнлайнОплат(
		ИспользоватьАвтоматическоеПолучениеУведомленияОтОнлайнОплат);
	
КонецПроцедуры

#КонецОбласти

#Область Новости

&НаСервереБезКонтекста
Процедура СписокНовостей_ИнтервалАвтообновленияПриИзмененииНаСервере(Знач СписокНовостей_ИнтервалАвтообновленияМинут)

	// Хотя запись возможна и в коробке и в модели сервиса (и в неразделенном и в разделенном режимах),
	//  но для этого предназначена отдельная форма.
	// Поэтому записывать из этого метода разрешено только в модели сервиса в разделенном режиме. Иначе - выдавать ошибку.
	Если ОбщегоНазначения.РазделениеВключено()
			И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		НастройкиПоказаНовостей = Новый Структура;
			НастройкиПоказаНовостей.Вставить("СписокНовостей_ИнтервалАвтообновления", СписокНовостей_ИнтервалАвтообновленияМинут);
		МодульОбработкаНовостей = ОбщегоНазначения.ОбщийМодуль("ОбработкаНовостей");
		МодульОбработкаНовостей.УстановитьНастройкиПоказаНовостей(НастройкиПоказаНовостей);
	Иначе
		ТекстСообщения = НСтр("ru = 'Сохранение возможно только в разделенном режиме модели сервиса'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ПриИзмененииКонстантыБСПНаСервере(Знач ИмяКонстанты)
	
	МодульНастройкиПрограммы = ОбщегоНазначения.ОбщийМодуль("НастройкиПрограммы");
	МодульНастройкиПрограммы.ИнтернетПоддержкаИСервисыПриИзмененииКонстанты(
		ЭтотОбъект,
		ИмяКонстанты,
		ЭтотОбъект[ИмяКонстанты]);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриИзмененииИспользованияВебСервисАдресов(Знач ИспользоватьВебСервисАдресов)
	
	МодульНастройкиПрограммы = ОбщегоНазначения.ОбщийМодуль("НастройкиПрограммы");
	МодульНастройкиПрограммы.ИнтернетПоддержкаИСервисыУстановитьИспользованиеВебСервиса(ИспользоватьВебСервисАдресов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииРежимаОтправкиДанныхВЦентрМониторинга(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.НастройкиПрограммы") Тогда
		
		ПараметрыЦентраМониторинга = РазрешитьОтправлятьДанныеПриИзмененииНаСервере(Элемент.Имя);
		
		МодульНастройкиПрограммыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("НастройкиПрограммыКлиент");
		МодульНастройкиПрограммыКлиент.ИнтернетПоддержкаИСервисыРазрешитьОтправлятьДанныеПриИзменении(
			ЭтотОбъект,
			Элемент,
			ПараметрыЦентраМониторинга);
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РазрешитьОтправлятьДанныеПриИзмененииНаСервере(Знач ИмяЭлемента)
	
	ПараметрыОперации = Новый Структура();
	
	МодульНастройкиПрограммы = ОбщегоНазначения.ОбщийМодуль("НастройкиПрограммы");
	МодульНастройкиПрограммы.ИнтернетПоддержкаИСервисыРазрешитьОтправлятьДанныеПриИзменении(
		ЭтотОбъект,
		Элементы[ИмяЭлемента],
		ПараметрыОперации);
	
	Возврат ПараметрыОперации;
	
КонецФункции

&НаСервере
Процедура ЦентрМониторингаАдресСервисаПриИзмененииНаСервере(Знач ИмяЭлемента)
	
	МодульНастройкиПрограммы = ОбщегоНазначения.ОбщийМодуль("НастройкиПрограммы");
	МодульНастройкиПрограммы.ИнтернетПоддержкаИСервисыЦентрМониторингаАдресСервисаПриИзменении(
		ЭтотОбъект,
		Элементы[ИмяЭлемента]);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииРасписанияПроверкиОбновлений(Расписание, ДополнительныеПараметры) Экспорт
	
	Если Расписание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПериодПовтораВТечениеДня = Расписание.ПериодПовтораВТечениеДня;	// Число
	Если АвтоматическаяПроверкаОбновлений = 2
		И ПериодПовтораВТечениеДня > 0
		И ПериодПовтораВТечениеДня < 300 Тогда
		ПоказатьПредупреждение(,
			НСтр("ru = 'Интервал проверки не может быть задан чаще, чем один раз 5 минут.'"));
		Возврат;
	КонецЕсли;
	
	Элементы.ДекорацияРасписаниеПроверкиОбновлений.Заголовок =
		ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеРасписания(Расписание);
	
	МодульПолучениеОбновленийПрограммыКлиент = 
			ОбщегоНазначенияКлиент.ОбщийМодуль("ПолучениеОбновленийПрограммыКлиент");
	НастройкиОбновления = МодульПолучениеОбновленийПрограммыКлиент.ГлобальныеНастройкиОбновления();
	НастройкиОбновления.Расписание = ОбщегоНазначенияКлиентСервер.РасписаниеВСтруктуру(Расписание);
	
	МодульПолучениеОбновленийПрограммыВызовСервера = 
			ОбщегоНазначенияКлиент.ОбщийМодуль("ПолучениеОбновленийПрограммыВызовСервера");
	МодульПолучениеОбновленийПрограммыВызовСервера.ЗаписатьНастройкиОбновления(НастройкиОбновления);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииРасписанияУстановкиИсправлений(Расписание, ДополнительныеПараметры) Экспорт
	
	Если Расписание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПериодПовтораВТечениеДня = Расписание.ПериодПовтораВТечениеДня;
	Если ПериодПовтораВТечениеДня > 0
		И ПериодПовтораВТечениеДня < 3600 Тогда
		ПоказатьПредупреждение(,
			НСтр("ru = 'Интервал автоматической установки не может быть чаще, чем один раз в час.'"));
		Возврат;
	КонецЕсли;
	
	МодульПолучениеОбновленийПрограммыВызовСервера = ОбщегоНазначенияКлиент.ОбщийМодуль(
		"ПолучениеОбновленийПрограммыВызовСервера");
	МодульПолучениеОбновленийПрограммыВызовСервера.УстановитьРасписаниеЗаданияУстановкиИсправлений(Расписание);
	
	Элементы.ДекорацияРасписаниеУстановкаИсправлений.Заголовок =
		ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеРасписания(Расписание);
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьРаботуСНовостямиПриОтключении(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = "НеОтключать" Тогда // Идентификатор.
		ВключитьРаботуСНовостями = Не ВключитьРаботуСНовостями;
	КонецЕсли;

	// Обработка изменения ФО "РазрешенаРаботаСНовостями".
	ПриИзмененииКонстанты("РазрешенаРаботаСНовостями", ВключитьРаботуСНовостями, Истина, Истина);
	Элементы.УправлениеНовостями.Видимость = ВключитьРаботуСНовостями;
	// Конец Обработка изменения ФО "РазрешенаРаботаСНовостями".

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКонстанты(
		ИмяКонстанты,
		НовоеЗначение,
		ОбновлятьИнтерфейс = Истина,
		ОбновитьПовторноИспользуемыеЗначения = Ложь)
	
	СохранитьЗначениеКонстанты(ИмяКонстанты, НовоеЗначение, ОбновитьПовторноИспользуемыеЗначения);
	
	Если ОбновитьПовторноИспользуемыеЗначения Тогда
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
	
	Если ОбновлятьИнтерфейс Тогда
		ОбновитьИнтерфейс = Истина;
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключениеИнтернетПоддержкиЗавершениеАвтоматическаяУстановкаИсправлений(
	Результат,
	ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ЗагружатьИУстанавливатьИсправленияАвтоматически = Истина;
		МодульПолучениеОбновленийПрограммыВызовСервера = ОбщегоНазначенияКлиент.ОбщийМодуль(
			"ПолучениеОбновленийПрограммыВызовСервера");
		МодульПолучениеОбновленийПрограммыВызовСервера.ВключитьОтключитьАвтоматическуюУстановкуИсправлений(
			ЗагружатьИУстанавливатьИсправленияАвтоматически);
		Элементы.ДекорацияРасписаниеУстановкаИсправлений.Доступность = ЗагружатьИУстанавливатьИсправленияАвтоматически;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлКлассификаторовПослеВыбораФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ФайлКлассификаторов = ВыбранныеФайлы[0];
	ПриИзмененииКонстанты("ФайлКлассификаторов", ФайлКлассификаторов, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлВнешнихКомпонентПослеВыбораФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ФайлВнешнихКомпонент = ВыбранныеФайлы[0];
	ПриИзмененииКонстанты("ФайлВнешнихКомпонент", ФайлВнешнихКомпонент, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлРегламентированныхОтчетовПослеВыбораФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ФайлРегламентированныхОтчетов = ВыбранныеФайлы[0];
	ПриИзмененииКонстанты("ФайлРегламентированныхОтчетов", ФайлРегламентированныхОтчетов, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОтветеНаВопросПодключенияИнтернетПоддержки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(
			ДополнительныеПараметры.ОповещениеПослеПодключения,
			ЭтотОбъект);
	ИначеЕсли ДополнительныеПараметры.Элемент = Элементы.ВариантОбновленияВнешнихКомпонент Тогда
		ВариантОбновленияВнешнихКомпонент = ВариантОбновленияВнешнихКомпонентПредыдущееЗначение;
	ИначеЕсли ДополнительныеПараметры.Элемент = Элементы.ВариантОбновленияКлассификаторов Тогда
		ВариантОбновленияКлассификаторов = ВариантОбновленияКлассификаторовПредыдущееЗначение;
	ИначеЕсли ДополнительныеПараметры.Элемент = Элементы.ВариантОбновленияРегламентированныхОтчетов Тогда
		ВариантОбновленияРегламентированныхОтчетов = ВариантОбновленияРегламентированныхОтчетовПредыдущееЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодключенияИнтернетПоддержкиПолучениеВнешнихКомпонент(
	Результат,
	ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ВариантОбновленияВнешнихКомпонент = ВариантОбновленияВнешнихКомпонентПредыдущееЗначение;
	КонецЕсли;
	
	ПриИзмененииКонстанты(
		"ВариантОбновленияВнешнихКомпонент",
		ВариантОбновленияВнешнихКомпонент,
		Ложь);
	ВариантОбновленияВнешнихКомпонентПредыдущееЗначение = ВариантОбновленияВнешнихКомпонент;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодключенияИнтернетПоддержкиПолучениеРегламентированныхОтчетов(
	Результат,
	ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ВариантОбновленияРегламентированныхОтчетов = ВариантОбновленияРегламентированныхОтчетовПредыдущееЗначение;
	КонецЕсли;
	
	ПриИзмененииКонстанты(
		"ВариантОбновленияРегламентированныхОтчетов",
		ВариантОбновленияРегламентированныхОтчетов,
		Ложь);
	ВариантОбновленияРегламентированныхОтчетовПредыдущееЗначение = ВариантОбновленияРегламентированныхОтчетов;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодключенияИнтернетПоддержкиРаботаСКлассификаторами(
	Результат,
	ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ВариантОбновленияКлассификаторов = ВариантОбновленияКлассификаторовПредыдущееЗначение;
	КонецЕсли;
	
	ПриИзмененииКонстанты(
		"ВариантОбновленияКлассификаторов",
		ВариантОбновленияКлассификаторов,
		Ложь);
	ВариантОбновленияКлассификаторовПредыдущееЗначение = ВариантОбновленияКлассификаторов;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииРасписания(Расписание, ДополнительныеПараметры) Экспорт
	
	Если Расписание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПериодПовтораВТечениеДня = Расписание.ПериодПовтораВТечениеДня;
	Если ПериодПовтораВТечениеДня > 0
		И ПериодПовтораВТечениеДня < 300 Тогда
		ПоказатьПредупреждение(,
			НСтр("ru = 'Интервал обновления не может быть задан чаще, чем один раз 5 минут.'"));
		Возврат;
	КонецЕсли;
	
	Элементы.ДекорацияРасписаниеОбновленияКлассификаторов.Заголовок =
		ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеРасписания(Расписание);
	
	МодульРаботаСКлассификаторамиВызовСервера = ОбщегоНазначенияКлиент.ОбщийМодуль(
		"РаботаСКлассификаторамиВызовСервера");
	МодульРаботаСКлассификаторамиВызовСервера.ЗаписатьРасписаниеОбновления(Расписание);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииРасписанияОбновленияВнешнихКомпонент(Расписание, ДополнительныеПараметры) Экспорт
	
	Если Расписание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПериодПовтораВТечениеДня = Расписание.ПериодПовтораВТечениеДня;
	Если ПериодПовтораВТечениеДня > 0
		И ПериодПовтораВТечениеДня < 300 Тогда
		ПоказатьПредупреждение(,
			НСтр("ru = 'Интервал обновления не может быть задан чаще, чем один раз 5 минут.'"));
		Возврат;
	КонецЕсли;
	
	Элементы.ДекорацияРасписаниеОбновленияВнешнихКомпонент.Заголовок =
		ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеРасписания(Расписание);
		
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеВнешнихКомпонент") Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиОбновления = Новый Структура;
	НастройкиОбновления.Вставить(
		"Расписание",
		Расписание);
	МодульПолучениеВнешнихКомпонентКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль(
		"ПолучениеВнешнихКомпонентКлиент");
	МодульПолучениеВнешнихКомпонентКлиент.ИзменитьНастройкиОбновленияВнешнихКомпонент(
		НастройкиОбновления);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииРасписанияОбновленияРегламентированныхОтчетов(Расписание, ДополнительныеПараметры) Экспорт
	
	Если Расписание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПериодПовтораВТечениеДня = Расписание.ПериодПовтораВТечениеДня;
	Если ПериодПовтораВТечениеДня > 0
		И ПериодПовтораВТечениеДня < 300 Тогда
		ПоказатьПредупреждение(,
			НСтр("ru = 'Интервал обновления не может быть задан чаще, чем один раз 5 минут.'"));
		Возврат;
	КонецЕсли;
	
	Элементы.ДекорацияРасписаниеОбновленияРегламентированныхОтчетов.Заголовок =
		ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеРасписания(Расписание);
		
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеРегламентированныхОтчетов") Тогда
		Возврат;
	КонецЕсли;
		
	МодульПолучениеРегламентированныхОтчетовВызовСервера = ОбщегоНазначенияКлиент.ОбщийМодуль(
		"ПолучениеРегламентированныхОтчетовВызовСервера");
	МодульПолучениеРегламентированныхОтчетовВызовСервера.ЗаписатьРасписаниеОбновления(Расписание);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииРасписанияПолученияУведомлений(Расписание, ДополнительныеПараметры) Экспорт
	
	Если Расписание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МодульОнлайнОплатыВызовСервера = ОбщегоНазначенияКлиент.ОбщийМодуль("ОнлайнОплатыВызовСервера");
	МодульОнлайнОплатыВызовСервера.УстановитьРасписаниеЗаданияПолучениеУведомленияОтОнлайнОплат(Расписание);
	
	Элементы.ДекорацияРасписаниеПолученияУведомленийОтОнлайнОплат.Заголовок =
		ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеРасписания(Расписание);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОтветеНаВопросОВыходеИзИнтернетПоддержки(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Если КодВозврата = КодВозвратаДиалога.Да Тогда
		ИнтернетПоддержкаПользователейВызовСервера.ВыйтиИзИПП();
		ДанныеАутентификации          = Неопределено;
		ДанныеАутентификацииЗаполнены = Ложь;
		ОтобразитьСостояниеПодключения();
		Оповестить("ИнтернетПоддержкаОтключена");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбщегоНазначенияКлиент.ОбновитьИнтерфейсПрограммы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьСостояниеПодключения()
	
	ЗаголовокПодключения = СтроковыеФункцииКлиент.ФорматированнаяСтрока(
		ЗаголовокНадписиПодключенияИнтенетПоддержки(
			ДанныеАутентификации));
	ОтобразитьСостояниеПодключенияИПП(
		ЭтотОбъект,
		ЗаголовокПодключения);
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьСостояниеПодключенияНаСервере()
	
	ЗаголовокПодключения = СтроковыеФункции.ФорматированнаяСтрока(
		ЗаголовокНадписиПодключенияИнтенетПоддержки(
			ДанныеАутентификации));
	ОтобразитьСостояниеПодключенияИПП(
		ЭтотОбъект,
		ЗаголовокПодключения);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокНадписиПодключенияИнтенетПоддержки(ДанныеАутентификации)
	
	Если ДанныеАутентификации = Неопределено Тогда
		ЗаголовокПодключения = НСтр("ru = 'Подключение к Интернет-поддержке не выполнено.'");
	Иначе
		ЗаголовокПодключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Подключена Интернет-поддержка для пользователя <a href=""action:openUsersSite"">%1</a>'"),
			ДанныеАутентификации.Логин);
	КонецЕсли;
	
	Возврат ЗаголовокПодключения;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьСостояниеПодключенияИПП(Форма, ЗаголовокПодключения)
	
	Элементы = Форма.Элементы;
	ДанныеАутентификации = Форма.ДанныеАутентификации; // см. ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки
	Если ДанныеАутентификации = Неопределено Тогда
		Элементы.ДекорацияЛогинИПП.Заголовок           = ЗаголовокПодключения;
		Элементы.ВойтиИлиВыйтиИПП.Заголовок            = НСтр("ru = 'Подключить'");
		Элементы.ВойтиИлиВыйтиИПП.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	Иначе
		Элементы.ДекорацияЛогинИПП.Заголовок           = ЗаголовокПодключения;
		Элементы.ВойтиИлиВыйтиИПП.Заголовок            = НСтр("ru = 'Отключить'");
		Элементы.ВойтиИлиВыйтиИПП.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначениеКонстанты(Знач ИмяКонстанты, Знач НовоеЗначение, Знач ОбновитьПовторноИспользуемыеЗначения)
	
	КонстантаМенеджер = Константы[ИмяКонстанты];
	
	Если КонстантаМенеджер.Получить() <> НовоеЗначение Тогда
		КонстантаМенеджер.Установить(НовоеЗначение);
		Если ОбновитьПовторноИспользуемыеЗначения Тогда
			ОбновитьПовторноИспользуемыеЗначения();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеИнтернетПоддержки()
	
	Элементы.ГруппаНастройки.Видимость      = Истина;
	Элементы.ГруппаПодключениеИПП.Видимость = ИнтернетПоддержкаПользователей.ДоступноПодключениеИнтернетПоддержки();
	
	Если Элементы.ГруппаПодключениеИПП.Видимость Тогда
		УстановитьПривилегированныйРежим(Истина);
		ДанныеАутентификации          =
			ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		ДанныеАутентификацииЗаполнены = (ДанныеАутентификации <> Неопределено);
		УстановитьПривилегированныйРежим(Ложь);
		Если ДанныеАутентификации <> Неопределено Тогда
			ДанныеАутентификации.Пароль = "";
		КонецЕсли;
		ОтобразитьСостояниеПодключенияНаСервере();
	Иначе
		ДанныеАутентификацииЗаполнены =
			ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.МониторПортала1СИТС") Тогда
		МодульМониторПортала1СИТС = ОбщегоНазначения.ОбщийМодуль("МониторПортала1СИТС");
		Элементы.МониторИнтернетПоддержки.Видимость = МодульМониторПортала1СИТС.ДоступноИспользованиеМонитора();
	Иначе
		Элементы.МониторИнтернетПоддержки.Видимость = Ложь;
	КонецЕсли;
	
	// Форма будет открываться и в разделенном и в неразделенном режиме.
	// А уже внутри формы будут отображаться необходимые поля.
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости")
			И ЭтоАдминистраторСистемы Тогда
		// В неразделенном режиме можно включать / выключать РазрешенаРаботаСНовостями.
		// В разделенном режиме, если РазрешенаРаботаСНовостями = ЛОЖЬ (т.е. работа с новостями отключена),
		//  то не показывать панель.
		// Элементы управления распределены между группами ГруппаНовостиНеразделенныйСеансИлиКоробка и ГруппаНовостиРазделенныйСеанс.
		МодульОбработкаНовостей          = ОбщегоНазначения.ОбщийМодуль("ОбработкаНовостей");
		МодульОбработкаНовостейСлужебный = ОбщегоНазначения.ОбщийМодуль("ОбработкаНовостейСлужебный");
		ВключитьРаботуСНовостями = МодульОбработкаНовостей.РазрешенаРаботаСНовостями();
		НастройкиПоказаНовостейНастроенныеАдминистратором =
			МодульОбработкаНовостейСлужебный.ПолучитьНастройкиПоказаНовостейНастроенныеАдминистратором(Истина);
		СписокНовостей_ИнтервалАвтообновления = НастройкиПоказаНовостейНастроенныеАдминистратором.СписокНовостей_ИнтервалАвтообновления;
		Если ОбщегоНазначения.РазделениеВключено()
				И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
			Элементы.ГруппаНовостиНеразделенныйСеансИлиКоробка.Видимость = Ложь;
			Элементы.ГруппаНовостиРазделенныйСеанс.Видимость             = Истина;
		Иначе
			Элементы.ГруппаНовостиНеразделенныйСеансИлиКоробка.Видимость = Истина;
			Элементы.ГруппаНовостиРазделенныйСеанс.Видимость             = Ложь;
		КонецЕсли;
		Элементы.УправлениеНовостями.Видимость = ВключитьРаботуСНовостями;
	Иначе
		Элементы.ГруппаНовости.Видимость = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеВнешнихКомпонент") Тогда
		МодульПолучениеВнешнихКомпонент = ОбщегоНазначения.ОбщийМодуль("ПолучениеВнешнихКомпонент");
		МодульПолучениеВнешнихКомпонент.ИнтернетПоддержкаИСервисыПриСозданииНаСервере(ЭтотОбъект);
	Иначе
		Элементы.ГруппаОбновлениеВнешнихКомпонент.Видимость = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеОбновленийПрограммы") Тогда
		
		МодульПолучениеОбновленийПрограммы = ОбщегоНазначения.ОбщийМодуль("ПолучениеОбновленийПрограммы");
		МодульПолучениеОбновленийПрограммы.ИнтернетПоддержкаИСервисы_ПриСозданииНаСервере(ЭтотОбъект);
		
		ДетализироватьОбновлениеИБВЖурналеРегистрации =
			Константы["ДетализироватьОбновлениеИБВЖурналеРегистрации"].Получить();
		
	Иначе
		Элементы.ГруппаОбновлениеПрограммы.Видимость = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКлассификаторами") Тогда
		
		МодульРаботаСКлассификаторами = ОбщегоНазначения.ОбщийМодуль("РаботаСКлассификаторами");
		ПараметрыПодсистемыРаботыСКлассификаторами =
			МодульРаботаСКлассификаторами.ПараметрыОкруженияФормыИнтернетПоддержкаИСервисы();
		
		Элементы.ГруппаОбновлениеКлассификаторов.Видимость =
			ПараметрыПодсистемыРаботыСКлассификаторами.ИнтерактивнаяЗагрузкаДоступна;
		
		Если ПараметрыПодсистемыРаботыСКлассификаторами.ИнтерактивнаяЗагрузкаДоступна Тогда
			
			ВариантОбновленияКлассификаторов =
				ПараметрыПодсистемыРаботыСКлассификаторами.ВариантОбновленияКлассификаторов;
			ФайлКлассификаторов = ПараметрыПодсистемыРаботыСКлассификаторами.ФайлКлассификаторов;
			ВариантОбновленияКлассификаторовПредыдущееЗначение = ВариантОбновленияКлассификаторов;
			
			Если Не ПустаяСтрока(ПараметрыПодсистемыРаботыСКлассификаторами.ПредставлениеРасписания) Тогда
				Элементы.ДекорацияРасписаниеОбновленияКлассификаторов.Заголовок =
					ПараметрыПодсистемыРаботыСКлассификаторами.ПредставлениеРасписания;
			КонецЕсли;
			
			Элементы.ДекорацияОбновлениеКлассификаторовНеВыполняется.Видимость =
				(Не ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки()
				И ВариантОбновленияКлассификаторов = 1);
			
		КонецЕсли;
		
	Иначе
		Элементы.ГруппаОбновлениеКлассификаторов.Видимость = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКонтрагентами") Тогда
		
		Элементы.ГруппаПроверкаКонтрагентов.Видимость =
			ЭтоАдминистраторСистемы
			И (Не ЭтоАвтономноеРабочееМесто
			И Не РазделениеВключено
			Или Не ДоступноИспользованиеРазделенныхДанных);
		Если Элементы.ГруппаПроверкаКонтрагентов.Видимость Тогда
			МодульРаботаСКонтрагентами = ОбщегоНазначения.ОбщийМодуль("РаботаСКонтрагентами");
			ИспользоватьПроверкуКонтрагентов = МодульРаботаСКонтрагентами.ИспользоватьПроверкуКонтрагентов();
		КонецЕсли;
		
	Иначе
		Элементы.ГруппаПроверкаКонтрагентов.Видимость = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		Элементы.ГруппаСПАРКРиски.Видимость =
			ЭтоАдминистраторСистемы
			И (Не ЭтоАвтономноеРабочееМесто
			И Не РазделениеВключено
			Или Не ДоступноИспользованиеРазделенныхДанных);
		Если Элементы.ГруппаСПАРКРиски.Видимость Тогда
			МодульСПАРКРиски = ОбщегоНазначения.ОбщийМодуль("СПАРКРиски");
			ИспользоватьСервисСПАРКРиски = МодульСПАРКРиски.ИспользованиеСПАРКРискиВключено();
		КонецЕсли;
	Иначе
		Элементы.ГруппаСПАРКРиски.Видимость = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей") Тогда
		
		МодульСистемаБыстрыхПлатежейСлужебный = ОбщегоНазначения.ОбщийМодуль(
			"СистемаБыстрыхПлатежейСлужебный");
		ПараметрыПодсистемыСистемаБыстрыхПлатежей =
			МодульСистемаБыстрыхПлатежейСлужебный.ПараметрыОкруженияФормыИнтернетПоддержкаИСервисы();
		Если ПараметрыПодсистемыСистемаБыстрыхПлатежей.НастройкаИнтеграцияДоступна Тогда
			ДлительностьОперацииПлатежнойСистемы =
				ПараметрыПодсистемыСистемаБыстрыхПлатежей.ДлительностьОперацииСистемыБыстрыхПлатежей;
		Иначе
			Элементы.ГруппаСистемаБыстрыхПлатежей.Видимость = Ложь;
		КонецЕсли;
		
		ПодсистемаПереводыСБПc2b = ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПc2b");
		ПодсистемаШаблоныСообщений = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ШаблоныСообщений");
		ПодсистемаОтправкаSMS = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОтправкаSMS");
		ПодсистемаОтправкаПисем = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями");
		
		ДоступнаНастройкаШаблонов = (ПодсистемаШаблоныСообщений
			И ПодсистемаПереводыСБПc2b
			И (ПодсистемаОтправкаSMS Или ПодсистемаОтправкаПисем));
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаНастройкаШаблоновСБП",
			"Видимость",
			ДоступнаНастройкаШаблонов);
		
	Иначе
		Элементы.ГруппаСистемаБыстрыхПлатежей.Видимость = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ИнтеграцияСКоннект") Тогда
		
		МодульИнтеграцияСКоннект = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияСКоннект");
		ПараметрыПодсистемыИнтеграцияСКоннект =
			МодульИнтеграцияСКоннект.ПараметрыОкруженияФормыИнтернетПоддержкаИСервисы();
		
		Если ПараметрыПодсистемыИнтеграцияСКоннект.ДоступнаИнтеграцияСКоннект Тогда
			
			ИспользоватьКоннект = ПараметрыПодсистемыИнтеграцияСКоннект.ИспользоватьКоннект;
			Если Не Пользователи.ЭтоПолноправныйПользователь() Тогда
				Элементы.ИспользоватьКоннект.Доступность = Ложь;
			КонецЕсли;
			
			Если Не ИспользоватьКоннект Тогда
				Элементы.НастройкаИнтеграцииСКоннект.Доступность = Ложь;
			КонецЕсли;
			
		Иначе
			Элементы.ГруппаИнтеграцияСКоннект.Видимость = Ложь;
		КонецЕсли;
		
	Иначе
		Элементы.ГруппаИнтеграцияСКоннект.Видимость = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеРегламентированныхОтчетов") Тогда
		МодульПолучениеРегламентированныхОтчетов = ОбщегоНазначения.ОбщийМодуль("ПолучениеРегламентированныхОтчетов");
		МодульПолучениеРегламентированныхОтчетов.ИнтернетПоддержкаИСервисыПриСозданииНаСервере(ЭтотОбъект);
	Иначе
		Элементы.ГруппаОбновлениеРегламентированныхОтчетов.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.СообщениеВСлужбуТехническойПоддержки.Видимость =
		ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СообщенияВСлужбуТехническойПоддержки");
	Элементы.ТехническаяИнформация.Видимость =
		ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СообщенияВСлужбуТехническойПоддержки");
	
	ОбновитьСостояниеПодсистемыОнлайнОплаты();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеПодсистемыОнлайнОплаты()
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОнлайнОплаты") Тогда
		Элементы.ГруппаОнлайнОплаты.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	МодульОнлайнОплаты = ОбщегоНазначения.ОбщийМодуль("ОнлайнОплаты");
	ПараметрыПодсистемы = МодульОнлайнОплаты.ПараметрыОкруженияФормыИнтернетПоддержкаИСервисы();
	
	Если Не ПараметрыПодсистемы.ОнлайнОплатаДоступна Тогда
		Элементы.ГруппаОнлайнОплаты.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	ОнлайнОплаты = ПараметрыПодсистемы.ИспользоватьОнлайнОплаты;
	Элементы.ГруппаПолучениеУведомлений.Доступность       = ОнлайнОплаты;
	Элементы.ГруппаНастройкиОнлайнОплатыПраво.Доступность = ОнлайнОплаты;
	
	Если Не ПараметрыПодсистемы.НастройкаИнтеграцииДоступна Тогда
		Элементы.ОнлайнОплатыЛево.Видимость = Ложь;
		Элементы.ГруппаНастройкаШаблоновОнлайнОплат.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаНастройкаШаблоновОнлайнОплат",
		"Видимость",
		ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ШаблоныСообщений"));
	
	Если ПараметрыПодсистемы.ИспользоватьАвтоматическоеПолучениеУведомленияОтОнлайнОплат <> Неопределено Тогда
		ИспользоватьАвтоматическоеПолучениеУведомленияОтОнлайнОплат =
			ПараметрыПодсистемы.ИспользоватьАвтоматическоеПолучениеУведомленияОтОнлайнОплат;
		Элементы.ДекорацияРасписаниеПолученияУведомленийОтОнлайнОплат.Заголовок =
			ПараметрыПодсистемы.ПредставлениеРасписания;
	Иначе
		ИспользоватьАвтоматическоеПолучениеУведомленияОтОнлайнОплат = Ложь;
	КонецЕсли;
	
	Элементы.ДекорацияРасписаниеПолученияУведомленийОтОнлайнОплат.Доступность =
		ИспользоватьАвтоматическоеПолучениеУведомленияОтОнлайнОплат;
	
	Элементы.ДекорацияРасписаниеПолученияУведомленийОтОнлайнОплат.Видимость = Не РазделениеВключено;
	
	Если ЭтоАдминистраторСистемы Тогда
		Элементы.ДекорацияРасписаниеПолученияУведомленийОтОнлайнОплат.Гиперссылка = Истина;
		Элементы.ДекорацияРасписаниеПолученияУведомленийОтОнлайнОплат.ЦветТекста = ЦветаСтиля.ГиперссылкаЦвет;
	Иначе
		Элементы.ДекорацияРасписаниеПолученияУведомленийОтОнлайнОплат.Гиперссылка = Ложь;
		Элементы.ДекорацияРасписаниеПолученияУведомленийОтОнлайнОплат.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура АвтоматическаяПроверкаОбновленийПриИзмененииАсинх(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеОбновленийПрограммы") Тогда
		
		Если АвтоматическаяПроверкаОбновлений = 0 Тогда
			
			ТекстВопроса = НСтр(
				"ru = 'Оповещения о наличии новых версий программы, исправлениях (патчах) и обновлениях версий платформы будут отключены. Продолжить?'");
			Ответ        = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				АвтоматическаяПроверкаОбновлений = АвтоматическаяПроверкаОбновленийДоИзменения;
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		АвтоматическаяПроверкаОбновленийДоИзменения = АвтоматическаяПроверкаОбновлений;
		
		МодульПолучениеОбновленийПрограммыКлиент =
			ОбщегоНазначенияКлиент.ОбщийМодуль("ПолучениеОбновленийПрограммыКлиент");
		МодульПолучениеОбновленийПрограммыКлиент.АвтоматическаяПроверкаОбновленийПриИзменении(
			ЭтотОбъект,
			Элемент);
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьВариантИнформированияОВыходеОбновленийНаСервере(Знач НовоеЗначение)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеОбновленийПрограммы") Тогда
		
		МодульПолучениеОбновленийПрограммы = ОбщегоНазначения.ОбщийМодуль("ПолучениеОбновленийПрограммы");
		
		НастройкиОбновления = МодульПолучениеОбновленийПрограммы.НастройкиАвтоматическогоОбновления();
		НастройкиОбновления.ВариантИнформированияОВыходеОбновлений = НовоеЗначение;
		
		МодульПолучениеОбновленийПрограммы.ЗаписатьНастройкиАвтоматическогоОбновления(НастройкиОбновления);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтображениеБлокировкиРаботыССервисамиИнтернетПоддержки()
	
	Элементы.ГруппаБлокировкаРаботыССервисамиИнтернетПоддержки.Видимость =
		РегламентныеЗаданияСервер.РаботаСВнешнимиРесурсамиЗаблокирована();
	Если Не Пользователи.ЭтоПолноправныйПользователь() Тогда
		Элементы.ПояснениеБлокировкаРаботыССервисамиИнтернетПоддержки.Заголовок = 
			НСтр("ru = 'Работа с сервисами Интернет-поддержки заблокирована для предотвращения конфликтов с основной информационной базой.
				|Обратитесь к администратору.'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьТехническуюИнформациюПослеВыбораИмениФайла(Результат, Контекст) Экспорт

	Если ТипЗнч(Результат) = Тип("Массив") И Результат.Количество() > 0 Тогда
		ПолноеИмяФайла = Результат[0];
	ИначеЕсли ТипЗнч(Результат) = Тип("Строка") Тогда
		ПолноеИмяФайла = Результат;
	Иначе
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения(
		"СохранитьТехническуюИнформациюПослеСохраненияТехническойИнформации",
		ЭтотОбъект,
		ПолноеИмяФайла);
	
	РезультатТехническаяИнформация = РезультатТехническаяИнформацияДляСохранения();
	РезультатТехническаяИнформация.НачатьЗапись(
		Обработчик,
		ПолноеИмяФайла);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РезультатТехническаяИнформацияДляСохранения()
	
	Результат = Новый ТекстовыйДокумент;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СообщенияВСлужбуТехническойПоддержки") Тогда
		Возврат Результат;
	КонецЕсли;
	
	МодульСообщенияВСлужбуТехническойПоддержки =
		ОбщегоНазначения.ОбщийМодуль("СообщенияВСлужбуТехническойПоддержки");
	ТехническаяИнформация = МодульСообщенияВСлужбуТехническойПоддержки.ТекстТехническойИнформации();
	ТехническаяИнформация = СтрЗаменить(
		ТехническаяИнформация,
		Символы.ВК + Символы.ПС,
		Символы.ПС);
	Результат.УстановитьТекст(ТехническаяИнформация);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура СохранитьТехническуюИнформациюПослеСохраненияТехническойИнформации(Результат, ПолноеИмяФайла) Экспорт
	
	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения(
		"СохранитьТехническуюИнформациюПриНажатииНаРезультат",
		ЭтотОбъект,
		ПолноеИмяФайла);
	ПоказатьОповещениеПользователя(НСтр("ru = 'Техническая информация сохранена в файл'"), Обработчик, ПолноеИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьТехническуюИнформациюПриНажатииНаРезультат(ПолноеИмяФайла) Экспорт

	ФайловаяСистемаКлиент.ОткрытьФайл(ПолноеИмяФайла);

КонецПроцедуры

#КонецОбласти
