
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ВосстановитьНастройки(Параметры);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		КОформлению,
		"ПодотчетноеЛицо",
		ПодотчетноеЛицо,
		ВидСравненияКомпоновкиДанных.Равно,,
		ЗначениеЗаполнено(ПодотчетноеЛицо));
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		КОформлению,
		"Организация",
		Организация,
		ВидСравненияКомпоновкиДанных.Равно,,
		ЗначениеЗаполнено(Организация));
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		КОформлению,
		"Подразделение",
		Подразделение,
		ВидСравненияКомпоновкиДанных.Равно,,
		ЗначениеЗаполнено(Подразделение));
	
	КОформлению.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", Новый Граница(КонецДня(ТекущаяДатаСеанса())));
	
	КонтролироватьВыдачуПодОтчетВРазрезеЦелей = ПолучитьФункциональнуюОпцию("КонтролироватьВыдачуПодОтчетВРазрезеЦелей");
	Элементы.КОформлениюЦельВыдачи.Видимость = КонтролироватьВыдачуПодОтчетВРазрезеЦелей;
	Элементы.КОформлениюОрганизация.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	Элементы.КОформлениюПодразделение.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьПодразделения");
	Элементы.КОформлениюВалюта.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют");
	
	Элементы.АвансыАвансовыйОтчет.Видимость = ПравоДоступа("Изменение", Метаданные.Документы.АвансовыйОтчет);
	Элементы.АвансыПриходныйКассовыйОрдер.Видимость = ПравоДоступа("Изменение", Метаданные.Документы.ПриходныйКассовыйОрдер);
	Элементы.АвансыПоступлениеБезналичныхДенежныхСредств.Видимость = ПравоДоступа("Изменение", Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств);
	Элементы.АвансыЗаявкаНаВозвратДенежныхСредств.Видимость = ПравоДоступа("Изменение", Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств);
	Элементы.АвансыРасходныйКассовыйОрдер.Видимость = ПравоДоступа("Изменение", Метаданные.Документы.РасходныйКассовыйОрдер);
	Элементы.АвансыСписаниеБезналичныхДенежныхСредств.Видимость = ПравоДоступа("Изменение", Метаданные.Документы.СписаниеБезналичныхДенежныхСредств);
	
	НастроитьССылкуСмТакже();
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не ЗавершениеРаботы Тогда
		СохранитьНастройки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_АвансовыйОтчет"
		Или ИмяСобытия = "Запись_ПриобретениеТоваровУслуг"
		//++ Локализация


		//-- Локализация
		Или ИмяСобытия = "Запись_ПриходныйКассовыйордер"
		Или ИмяСобытия = "Запись_РасходныйКассовыйордер"
		Или ИмяСобытия = "Запись_ПоступлениеБезналичныхДенежныхСредств"
		Или ИмяСобытия = "Запись_СписаниеБезналичныхДенежныхСредств" Тогда
		
		Элементы.КОформлению.Обновить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПодотчетноеЛицоПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		КОформлению,
		"ПодотчетноеЛицо",
		ПодотчетноеЛицо,
		ВидСравненияКомпоновкиДанных.Равно,,
		ЗначениеЗаполнено(ПодотчетноеЛицо));
		
	НастроитьССылкуСмТакже();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		КОформлению,
		"Организация",
		Организация,
		ВидСравненияКомпоновкиДанных.Равно,,
		ЗначениеЗаполнено(Организация));
		
	НастроитьССылкуСмТакже();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		КОформлению,
		"Подразделение",
		Подразделение,
		ВидСравненияКомпоновкиДанных.Равно,,
		ЗначениеЗаполнено(Подразделение));
		
	НастроитьССылкуСмТакже();

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СмТакжеВРаботеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИмяКлючевойОперации = СтрШаблон(
		"Обработка.ЖурналДокументовАвансовыеОтчеты.Форма.СписокДокументов.СмТакже.%1", НавигационнаяСсылкаФорматированнойСтроки);
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, ИмяКлючевойОперации);
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	СтруктураБыстрогоОтбора = Новый Структура;
	СтруктураБыстрогоОтбора.Вставить("Организация", Организация);
	СтруктураБыстрогоОтбора.Вставить("ПодотчетноеЛицо" ,ПодотчетноеЛицо);
	СтруктураБыстрогоОтбора.Вставить("Подразделение" ,Подразделение);
	ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	ПараметрыФормы.Вставить("ИмяТекущейСтраницы", "СтраницаРаспоряженияНаОформление");
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "Обработка.ЖурналДокументовЗакупки.Форма.СписокДокументов" Тогда
		ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ЗакупкаЧерезПодотчетноеЛицо");
	КонецЕсли;
	
	Форма = ОткрытьФорму(НавигационнаяСсылкаФорматированнойСтроки, ПараметрыФормы);
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "Обработка.ЖурналДокументовЗакупки.Форма.СписокДокументов" Тогда
		
		Если ЗначениеЗаполнено(ПодотчетноеЛицо) Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				Форма.СписокДокументыЗакупки,
				"Ссылка.ПодотчетноеЛицо",
				ПодотчетноеЛицо,
				ВидСравненияКомпоновкиДанных.Равно,,
				Истина,
				РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Форма.СписокДокументыЗакупки,
			"Ссылка.АвансовыйОтчет",,
			ВидСравненияКомпоновкиДанных.НеЗаполнено);
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОформитьАвансовыйОтчетПоРаспоряжению(Команда)
	
	МассивКОформлению = Новый Массив;
	МассивВалют = Новый Массив;
	ДокументыЗакупки = Новый Массив;
	Отказ = Ложь;
	
	Для каждого СтрокаКОформлению Из Элементы.КОформлению.ВыделенныеСтроки Цикл
		
		Если ТипЗнч(СтрокаКОформлению) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеСтроки = Элементы.КОформлению.ДанныеСтроки(СтрокаКОформлению);
		
		Если Не ЗначениеЗаполнено(ДанныеСтроки.СуммаОстаток)
			И Не ЗначениеЗаполнено(ДанныеСтроки.СуммаЗакупки) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначенияКОформлению = Новый Структура("ПодотчетноеЛицо, Организация, Подразделение, ЦельВыдачи, Валюта, СуммаОстаток, СуммаЗакупки");
		ЗаполнитьЗначенияСвойств(ЗначенияКОформлению, ДанныеСтроки);
		МассивКОформлению.Добавить(ЗначенияКОформлению);
		МассивВалют.Добавить(ЗначенияКОформлению.Валюта);
	КонецЦикла;
	
	Если Не МассивКОформлению.Количество() Тогда
		ОчиститьСообщения();
		ТекстПредупреждения = НСтр("ru = 'В выделенных строках нет данных для формирования Авансового отчета.'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();

	ОформитьАвансовыйОтчетПоРаспоряжениюНаСервере(МассивКОформлению, ДокументыЗакупки, МассивВалют, Отказ);
	
	Если Не Отказ Тогда
		
		Мультивалютный = МассивВалют.Количество() > 1;
		
		Основание = Новый Структура;
		Основание.Вставить("КОформлению", МассивКОформлению);
		Основание.Вставить("Мультивалютный", Мультивалютный);
		
		СтруктураПараметры = Новый Структура("Основание, ДокументыЗакупки", Основание, ДокументыЗакупки);
		ОткрытьФорму("Документ.АвансовыйОтчет.ФормаОбъекта", СтруктураПараметры, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОформитьАвансовыйОтчетПоРаспоряжениюНаСервере(МассивКОформлению, ДокументыЗакупки, МассивВалют, Отказ)
	
	Если Не ФормированиеДокументаВозможно(МассивКОформлению) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Шапка = МассивКОформлению[0];
	
	Инд = 0;
	ТекстыЗапроса = Новый Массив;
	Запрос = Новый Запрос;
	
	Для каждого СтрокаКОформлению Из МассивКОформлению Цикл
		
		Если СтрокаКОформлению.СуммаЗакупки = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапросаДокументыЗакупки();
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЦельВыдачи", "&ЦельВыдачи" + Инд);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Валюта", "&Валюта" + Инд);
		ТекстыЗапроса.Добавить(?(ТекстыЗапроса.Количество(), "ОБЪЕДИНИТЬ ВСЕ", "") + " " + ТекстЗапроса);
		
		Запрос.УстановитьПараметр("ЦельВыдачи" + Инд, СтрокаКОформлению.ЦельВыдачи);
		Запрос.УстановитьПараметр("Валюта" + Инд, СтрокаКОформлению.Валюта);
		
		Инд = Инд + 1;
	КонецЦикла;
	
	Если ТекстыЗапроса.Количество() Тогда
		Запрос.Текст = СтрСоединить(ТекстыЗапроса);
		Запрос.УстановитьПараметр("Организация", Шапка.Организация);
		Запрос.УстановитьПараметр("Подразделение", Шапка.Подразделение);
		Запрос.УстановитьПараметр("ПодотчетноеЛицо", Шапка.ПодотчетноеЛицо);
		ДокументыЗакупки = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Валюта КАК Валюта
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&ДокументыЗакупки)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Валюта КАК Валюта
	|ИЗ
	|	Документ.Бронирование КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&ДокументыЗакупки)
	|
	//++ Локализация


	//-- Локализация
	|";
	
	Запрос.УстановитьПараметр("ДокументыЗакупки", ДокументыЗакупки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивВалют.Добавить(Выборка.Валюта);
	КонецЦикла;
	
	ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(МассивВалют);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриходныйКассовыйОрдер(Команда)
	
	ТекущиеДанные = Элементы.КОформлению.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
	
		СтруктураОтбор = Новый Структура;
		СтруктураОтбор.Вставить("ХозяйственнаяОперация",
			ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника"));
		СтруктураОтбор.Вставить("ПодотчетноеЛицо", ТекущиеДанные.ПодотчетноеЛицо);
		СтруктураОтбор.Вставить("Организация", ТекущиеДанные.Организация);
		СтруктураОтбор.Вставить("Валюта", ТекущиеДанные.Валюта);
		СтруктураОтбор.Вставить("СтатьяДвиженияДенежныхСредств", ТекущиеДанные.ЦельВыдачи);
		СтруктураОтбор.Вставить("Подразделение", ТекущиеДанные.Подразделение);
		СтруктураОтбор.Вставить("СуммаДокумента", ТекущиеДанные.СуммаОстаток);
		СтруктураОтбор.Вставить("Сумма", ТекущиеДанные.СуммаОстаток);
		
		СтруктураПараметры = Новый Структура("Основание", СтруктураОтбор);
		
		ОткрытьФорму("Документ.ПриходныйКассовыйОрдер.ФормаОбъекта", СтруктураПараметры, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоступлениеБезналичныхДенежныхСредств(Команда)
	
	ТекущиеДанные = Элементы.КОформлению.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		СтруктураОтбор = Новый Структура;
		СтруктураОтбор.Вставить("ХозяйственнаяОперация",
			ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника"));
		СтруктураОтбор.Вставить("ПодотчетноеЛицо", ТекущиеДанные.ПодотчетноеЛицо);
		СтруктураОтбор.Вставить("Организация", ТекущиеДанные.Организация);
		СтруктураОтбор.Вставить("Валюта", ТекущиеДанные.Валюта);
		СтруктураОтбор.Вставить("СтатьяДвиженияДенежныхСредств", ТекущиеДанные.ЦельВыдачи);
		СтруктураОтбор.Вставить("Подразделение", ТекущиеДанные.Подразделение);
		СтруктураОтбор.Вставить("СуммаДокумента", ТекущиеДанные.СуммаОстаток);
		СтруктураОтбор.Вставить("Сумма", ТекущиеДанные.СуммаОстаток);
		
		СтруктураПараметры = Новый Структура("Основание", СтруктураОтбор);
		
		ОткрытьФорму("Документ.ПоступлениеБезналичныхДенежныхСредств.ФормаОбъекта", СтруктураПараметры, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаВыдачуПодОтчет(Команда)
	
	ТекущиеДанные = Элементы.КОформлению.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		СтруктураОтбор = Новый Структура;
		СтруктураОтбор.Вставить("ХозяйственнаяОперация",
			ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику"));
		СтруктураОтбор.Вставить("ПодотчетноеЛицо", ТекущиеДанные.ПодотчетноеЛицо);
		СтруктураОтбор.Вставить("Организация", ТекущиеДанные.Организация);
		СтруктураОтбор.Вставить("Валюта", ТекущиеДанные.Валюта);
		СтруктураОтбор.Вставить("СтатьяДвиженияДенежныхСредств", ТекущиеДанные.ЦельВыдачи);
		СтруктураОтбор.Вставить("Подразделение", ТекущиеДанные.Подразделение);
		СтруктураОтбор.Вставить("СуммаДокумента", ТекущиеДанные.Перерасход);
		СтруктураОтбор.Вставить("Сумма", ТекущиеДанные.Перерасход);
		СтруктураОтбор.Вставить("ДатаАвансовогоОтчета", ОбщегоНазначенияКлиент.ДатаСеанса());
		
		СтруктураПараметры = Новый Структура("Основание", СтруктураОтбор);
		
		ОткрытьФорму("Документ.ЗаявкаНаРасходованиеДенежныхСредств.ФормаОбъекта", СтруктураПараметры, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасходныйКассовыйОрдер(Команда)
	
	ТекущиеДанные = Элементы.КОформлению.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		СтруктураОтбор = Новый Структура;
		СтруктураОтбор.Вставить("ХозяйственнаяОперация",
			ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику"));
		СтруктураОтбор.Вставить("ПодотчетноеЛицо", ТекущиеДанные.ПодотчетноеЛицо);
		СтруктураОтбор.Вставить("Организация", ТекущиеДанные.Организация);
		СтруктураОтбор.Вставить("Валюта", ТекущиеДанные.Валюта);
		СтруктураОтбор.Вставить("СтатьяДвиженияДенежныхСредств", ТекущиеДанные.ЦельВыдачи);
		СтруктураОтбор.Вставить("Подразделение", ТекущиеДанные.Подразделение);
		СтруктураОтбор.Вставить("СуммаДокумента", ТекущиеДанные.Перерасход);
		СтруктураОтбор.Вставить("Сумма", ТекущиеДанные.Перерасход);
		СтруктураОтбор.Вставить("ДатаАвансовогоОтчета", ОбщегоНазначенияКлиент.ДатаСеанса());
		
		СтруктураПараметры = Новый Структура("Основание", СтруктураОтбор);
		
		ОткрытьФорму("Документ.РасходныйКассовыйОрдер.ФормаОбъекта", СтруктураПараметры, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписаниеБезналичныхДенежныхСредств(Команда)
	
	ТекущиеДанные = Элементы.КОформлению.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		СтруктураОтбор = Новый Структура;
		СтруктураОтбор.Вставить("ХозяйственнаяОперация",
			ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику"));
		СтруктураОтбор.Вставить("ПодотчетноеЛицо", ТекущиеДанные.ПодотчетноеЛицо);
		СтруктураОтбор.Вставить("Организация", ТекущиеДанные.Организация);
		СтруктураОтбор.Вставить("Валюта", ТекущиеДанные.Валюта);
		СтруктураОтбор.Вставить("СтатьяДвиженияДенежныхСредств", ТекущиеДанные.ЦельВыдачи);
		СтруктураОтбор.Вставить("Подразделение", ТекущиеДанные.Подразделение);
		СтруктураОтбор.Вставить("СуммаДокумента", ТекущиеДанные.Перерасход);
		СтруктураОтбор.Вставить("Сумма", ТекущиеДанные.Перерасход);
		СтруктураОтбор.Вставить("ДатаАвансовогоОтчета", ОбщегоНазначенияКлиент.ДатаСеанса());
		
		СтруктураПараметры = Новый Структура("Основание", СтруктураОтбор);
		
		ОткрытьФорму("Документ.СписаниеБезналичныхДенежныхСредств.ФормаОбъекта", СтруктураПараметры, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	СписокУсловноеОформление = КОформлению.КомпоновщикНастроек.Настройки.УсловноеОформление;
	СписокУсловноеОформление.Элементы.Очистить();
	
	//
	
	Элемент = СписокУсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СуммаПросрочено");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьССылкуСмТакже()
	
	ПараметрыФормирования = Новый Структура;
	ПараметрыФормирования.Вставить("ПодотчетноеЛицо", ПодотчетноеЛицо);
	ПараметрыФормирования.Вставить("Организация", Организация);
	ПараметрыФормирования.Вставить("Подразделение", Подразделение);
	ПараметрыФормирования.Вставить("ЭтоРасчетГиперссылки", Истина);
	ПараметрыФормирования.Вставить("КлючНазначенияИспользования", "АвансовыйОтчет");
	
	МассивМенеджеровРасчетаСмТакжеВРаботе = Новый Массив();
	МассивМенеджеровРасчетаСмТакжеВРаботе.Добавить("Обработка.ЖурналДокументовАвансовыеОтчеты");
	
	СмТакжеВРаботе = ОбщегоНазначенияУТ.СформироватьГиперссылкуСмТакжеВРаботе(МассивМенеджеровРасчетаСмТакжеВРаботе, ПараметрыФормирования);
	Элементы.СмТакжеВРаботе.Видимость = ЗначениеЗаполнено(СмТакжеВРаботе);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ФормированиеДокументаВозможно(МассивАвансов)
	
	Результат = Истина;
	
	МассивОрганизаций = Новый Массив;
	МассивПодотчетныхЛиц = Новый Массив;
	МассивПодразделений = Новый Массив;
	
	Для каждого Аванс Из МассивАвансов Цикл
		МассивОрганизаций.Добавить(Аванс.Организация);
		МассивПодотчетныхЛиц.Добавить(Аванс.ПодотчетноеЛицо);
		МассивПодразделений.Добавить(Аванс.Подразделение);
	КонецЦикла;
	
	МассивОрганизаций = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(МассивОрганизаций);
	МассивПодотчетныхЛиц = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(МассивПодотчетныхЛиц);
	МассивПодразделений = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(МассивПодразделений);
	
	ТекстОшибки = НСтр("ru='Ввод одного документа Авансовый отчет с несколькими %1 невозможен.'");
	Если МассивОрганизаций.Количество() > 1 Тогда
		Результат = Ложь;
		ТекстОшибки = СтрШаблон(ТекстОшибки, НСтр("ru='организациями'"));
	ИначеЕсли МассивПодотчетныхЛиц.Количество() > 1 Тогда
		Результат = Ложь;
		ТекстОшибки = СтрШаблон(ТекстОшибки, НСтр("ru='подотчетными лицами'"));
	ИначеЕсли МассивПодразделений.Количество() > 1 Тогда
		Результат = Ложь;
		ТекстОшибки = СтрШаблон(ТекстОшибки, НСтр("ru='подразделениями'"));
	КонецЕсли;
	
	Если Не Результат Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаДокументыЗакупки()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеРегистра.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.Организация = &Организация
	|	И ДанныеРегистра.ПодотчетноеЛицо = &ПодотчетноеЛицо
	|	И ДанныеРегистра.Подразделение = &Подразделение
	|	И ДанныеРегистра.ЦельВыдачи = &ЦельВыдачи
	|	И ДанныеРегистра.Валюта = &Валюта
	|	И ДанныеРегистра.СуммаЗакупки <> 0
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Процедура СохранитьНастройки()
	
	Настройки = Новый Структура("ПодотчетноеЛицо, Организация");
	ЗаполнитьЗначенияСвойств(Настройки, ЭтаФорма);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"Обработка.ЖурналДокументовАвансовыеОтчеты.Форма.АвансовыеОтчетыКОформлению", КлючНазначенияИспользования, Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки(Параметры)
	
	Если Параметры.Свойство("СтруктураБыстрогоОтбора") Тогда
		СтруктураБыстрогоОтбора = Параметры.СтруктураБыстрогоОтбора;
		СтруктураБыстрогоОтбора.Свойство("Организация", Организация);
		СтруктураБыстрогоОтбора.Свойство("ПодотчетноеЛицо", ПодотчетноеЛицо);
		СтруктураБыстрогоОтбора.Свойство("Подразделение", Подразделение);
	Иначе
		Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"Обработка.ЖурналДокументовАвансовыеОтчеты.Форма.АвансовыеОтчетыКОформлению", КлючНазначенияИспользования);
		Если ТипЗнч(Настройки) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(ЭтаФорма, Настройки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти