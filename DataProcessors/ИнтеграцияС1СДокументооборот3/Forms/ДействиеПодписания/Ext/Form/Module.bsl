#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборот3.ПриСозданииНаСервереФормыДействия(ЭтотОбъект, Параметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПроверитьПодключение();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "УдалениеУчастниковДействия" И Источник = УникальныйИдентификатор Тогда
		ЕстьЭтапы = ИнтеграцияС1СДокументооборот3КлиентСервер.ЕстьЭтапыДействия(
			Участники,
			ИдентификаторЭтапаПодписать,
			ИдентификаторОбрабатывающегоРезультат);
		ОбновитьПредставленияВДеревеУчастников(Участники);
		УстановитьДоступностьЭлементовФормы();
		
	ИначеЕсли ИмяСобытия = "ОбновитьПредставленияВДеревеУчастников" И Источник = УникальныйИдентификатор Тогда
		ОбновитьПредставленияВДеревеУчастников(Участники);
		УстановитьДоступностьЭлементовФормы();
		ИнтеграцияС1СДокументооборот3Клиент.УчастникиДействияПриАктивизацииСтроки(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		ТекстПредупреждения = "";
		ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы,, ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура АвторНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияС1СДокументооборот3Клиент.ВыбратьСотрудникаИзДереваПодразделений("Автор", ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура АвторАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMEmployee",
			ДанныеВыбора,
			Текст,
			СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвторОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMEmployee",
			ДанныеВыбора,
			Текст,
			СтандартнаяОбработка);
		
		Если ДанныеВыбора.Количество() = 1 Тогда
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
				"Автор",
				ДанныеВыбора[0].Значение,
				СтандартнаяОбработка,
				ЭтотОбъект);
			СтандартнаяОбработка = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвторОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
		"Автор",
		ВыбранноеЗначение,
		СтандартнаяОбработка,
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура АвторОчистка(Элемент, СтандартнаяОбработка)
	
	Автор = "";
	АвторID = "";
	АвторТип = "";
	АвторПредставление = "";
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкиАвторизацииНажатие(Элемент)
	
	Оповещение = Новый ОписаниеОповещения("ДекорацияНастройкиАвторизацииНажатиеЗавершение", ЭтотОбъект);
	ИмяФормыПараметров = "Обработка.ИнтеграцияС1СДокументооборотБазоваяФункциональность.Форма.АвторизацияВ1СДокументооборот";
	
	ОткрытьФорму(ИмяФормыПараметров,, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкиАвторизацииНажатиеЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Истина Тогда
		ПриПодключении();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеОтложенногоНачалаВыполненияНажатие(Элемент, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборот3Клиент.ОписаниеОтложенногоНачалаВыполненияДействияНажатие(
		ЭтотОбъект,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособПодписанияПриИзменении(Элемент)
	
	ВидимостьОбеспечивающего = (СпособПодписания = "OnPaper");
	Элементы.УчастникиДобавитьОбеспечивающегоПодписание.Видимость = ВидимостьОбеспечивающего;
	Элементы.УчастникиКонтекстноеМенюДобавитьОбеспечивающегоПодписание.Видимость = ВидимостьОбеспечивающего;
	
	ИзменитьСпособПодписания();
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУчастники

&НаКлиенте
Процедура УчастникиПриИзменении(Элемент)
	
	ОбновитьПредставленияВДеревеУчастников(Участники);
	ИнтеграцияС1СДокументооборот3Клиент.РазвернутьДеревоУчастниковДействия(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьЭлементовФормы();
	ИнтеграцияС1СДокументооборот3Клиент.УчастникиДействияПриАктивизацииСтроки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПередУдалением(Элемент, Отказ)
	
	ИнтеграцияС1СДокументооборот3Клиент.УчастникиДействияПередУдалением(ЭтотОбъект, Отказ, Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ПараметрыДобавленияУчастниковДействия = ИнтеграцияС1СДокументооборот3Клиент.ПараметрыДобавленияУчастниковДействия();
	ПараметрыДобавленияУчастниковДействия.СЭтапами = Истина;
	ПараметрыДобавленияУчастниковДействия.ВозможныДочерниеИсполнители = Ложь;
	ПараметрыДобавленияУчастниковДействия.МожноДобавлятьЭтапы = Истина;
	ПараметрыДобавленияУчастниковДействия.МожноТолькоДобавлятьУчастников = МожноТолькоДобавлятьУчастников;
	ПараметрыДобавленияУчастниковДействия.ФункцияУчастника = "Signer";
	ИнтеграцияС1СДокументооборот3Клиент.УчастникиДействияПередНачаломДобавления(
		ЭтотОбъект,
		Отказ,
		Копирование,
		ПараметрыДобавленияУчастниковДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПередНачаломИзменения(Элемент, Отказ)
	
	ИнтеграцияС1СДокументооборот3Клиент.УчастникиДействияПередНачаломИзменения(ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Участники.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если ТекущиеДанные <> Неопределено Тогда
		ОткрыватьОсобоеНаименованиеИОписание = Не ТекущиеДанные.ЭтоЭтап
			И (ТекущиеДанные.Функция <> "SigningResultProcessor");
		ТолькоПросмотрОсобогоНаименованияИОписания = ТолькоПросмотр Или ТекущиеДанные.Недоступно;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборот3Клиент.УчастникиДействияВыбор(
		ЭтотОбъект,
		ВыбраннаяСтрока,
		Поле,
		СтандартнаяОбработка,
		ОткрыватьОсобоеНаименованиеИОписание,
		ТолькоПросмотрОсобогоНаименованияИОписания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтрокиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборот3Клиент.ПредставлениеУчастникаДействияНачалоВыбора(
		Элемент,
		ДанныеВыбора,
		СтандартнаяОбработка,
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтрокиАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборот3Клиент.ПредставлениеУчастникаДействияАвтоПодбор(
		Элемент,
		Текст,
		ДанныеВыбора,
		ПараметрыПолученияДанных,
		Ожидание,
		СтандартнаяОбработка,
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтрокиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборот3Клиент.ПредставлениеУчастникаДействияОкончаниеВводаТекста(
		Элемент,
		Текст,
		ДанныеВыбора,
		ПараметрыПолученияДанных,
		СтандартнаяОбработка,
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтрокиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборот3Клиент.ПредставлениеУчастникаДействияОбработкаВыбора(
		Элемент,
		ВыбранноеЗначение,
		СтандартнаяОбработка,
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтрокиОчистка(Элемент, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборот3Клиент.ПредставлениеУчастникаДействияОчистка(
		Элемент,
		СтандартнаяОбработка,
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокПриИзменении(Элемент)
	
	ИнтеграцияС1СДокументооборот3Клиент.ПорядокВыполненияДействияУчастникамиПриИзменении(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборот3Клиент.ПорядокВыполненияДействияУчастникамиОбработкаВыбора(
		ЭтотОбъект,
		ВыбранноеЗначение,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокПредставлениеПриИзменении(Элемент)
	
	ИнтеграцияС1СДокументооборот3Клиент.СрокВыполненияДействияУчастникомПриИзменении(
		ЭтотОбъект,
		Не Элементы.УчастникиРазныеСроки.Пометка);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокПредставлениеРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборот3Клиент.СрокВыполненияДействияУчастникомРегулирование(
		ЭтотОбъект,
		Направление,
		СтандартнаяОбработка,
		Не Элементы.УчастникиРазныеСроки.Пометка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеПриИзменении(Элемент)
	
	ОбновитьПолеЕстьОсобоеНаименованиеОписание(Элементы.Участники.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьФорму(Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Готово(Команда)
	
	ЗаписатьИЗакрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьДиалог(Команда)
	
	Закрыть(КодВозвратаДиалога.ОК);
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть(КодВозвратаДиалога.Отмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗадержку(Команда)
	
	ИнтеграцияС1СДокументооборот3Клиент.ОчиститьЗадержкуДействия(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НаправитьНовымУчастникам(Команда)
	
	ИсполнениеДействияСНовымиУчастниками = Истина;
	
	ТолькоПросмотр = Ложь;
	Элементы.ЗаписатьИЗакрыть.Видимость = Истина;
	Элементы.ЗаписатьИЗакрыть.КнопкаПоУмолчанию = Истина;
	УстановитьДоступностьИзмененияУчастников();
	УстановитьДоступностьЭлементовФормы();
	
	// Сразу добавим новую строку.
	Для Каждого Этап Из Участники.ПолучитьЭлементы() Цикл
		Если Этап.Функция <> "Signer" Или Этап.Недоступно Тогда
			Продолжить;
		КонецЕсли;
		СтрокаУчастника = Этап.ПолучитьЭлементы().Добавить();
		СтрокаУчастника.ПредставлениеСтроки =
			ИнтеграцияС1СДокументооборот3КлиентСервер.ПредставлениеУчастника(СтрокаУчастника);
		СтрокаУчастника.Функция = Этап.Функция;
		Элементы.Участники.ТекущаяСтрока = СтрокаУчастника.ПолучитьИдентификатор();
		Прервать;
	КонецЦикла;
	
	Элементы.НаправитьНовымУчастникам.Видимость = Ложь;
	Модифицированность = Истина;
	
	ПоказатьПредупреждение(,
		НСтр("ru = 'Результаты новых участников не повлияют на результат действия и маршрут обработки, т.к. подписание уже пройдено.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	
	ИнтеграцияС1СДокументооборот3Клиент.ПереместитьУчастникаДействияВверх(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	
	ИнтеграцияС1СДокументооборот3Клиент.ПереместитьУчастникаДействияВниз(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Защищенный(Команда)
	
	ИнтеграцияС1СДокументооборот3Клиент.ИзменитьПризнакУчастникаДействияЗащищенный(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РазныеСроки(Команда)
	
	Элементы.УчастникиРазныеСроки.Пометка = Не Элементы.УчастникиРазныеСроки.Пометка;
	ИнтеграцияС1СДокументооборот3Клиент.УстановитьОдинаковыйСрокДействияРекурсивно(
		Участники.ПолучитьЭлементы(),
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭтап(Команда)
	
	ИнтеграцияС1СДокументооборот3Клиент.ДобавитьЭтапДействия(ЭтотОбъект, "Signer");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОбеспечивающегоПодписание(Команда)
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоЭтап Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоДочернийУчастник Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеРодителя = ТекущиеДанные.ПолучитьРодителя();
	Если ТекущиеДанныеРодителя = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанныеРодителя.Функция = "SigningResultProcessor" Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Добавление в этап обработки результата невозможно.'"));
		Возврат;
	КонецЕсли;
	
	СтрокиПодписывающего = ТекущиеДанные.ПолучитьЭлементы();
	Если СтрокиПодписывающего.Количество() <> 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'У подписывающего может быть только один обеспечивающий подписание.'"));
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	СтрокаУчастника = СтрокиПодписывающего.Добавить();
	СтрокаУчастника.Идентификатор = Строка(Новый УникальныйИдентификатор);
	СтрокаУчастника.Функция = "EnsuringSigning";
	СтрокаУчастника.ЭтоДочернийУчастник = Истина;
	СтрокаУчастника.ПредставлениеСтроки =
		ИнтеграцияС1СДокументооборот3КлиентСервер.ПредставлениеУчастника(СтрокаУчастника);
	
	СкопироватьДанныеКОбеспечивающемуПодписание(СтрокаУчастника, ТекущиеДанные);
	
	Если ТекущиеДанные.СрокОбщий Тогда
		ЗаполнитьЗначенияСвойств(СтрокаУчастника, ТекущиеДанные);
	КонецЕсли;
	
	Элементы.Участники.ТекущаяСтрока = СтрокаУчастника.ПолучитьИдентификатор();
	
	ЗаполнитьПредставлениеСроков();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Клиент

// Заполняет представление сроков в карточке действия.
//
&НаКлиенте
Процедура ЗаполнитьПредставлениеСроков() Экспорт
	
	Для Каждого ЭтапУчастников Из Участники.ПолучитьЭлементы() Цикл
		
		Если ЭтапУчастников.СрокОбщий Тогда
			ЭтапУчастников.СрокПредставление =
				ИнтеграцияС1СДокументооборот3КлиентСервер.ПредставлениеСрокаИсполнения(
					ЭтапУчастников.Срок,
					ЭтапУчастников.СрокДни,
					ЭтапУчастников.СрокЧасы,
					ЭтапУчастников.СрокМинуты,
					ИспользоватьДатуИВремяВСрокахЗадач,
					ЭтапУчастников.ВариантУстановкиСрока);
		Иначе
			ЭтапУчастников.СрокПредставление = "";
		КонецЕсли;
		
		Для Каждого УчастникЭтапа Из ЭтапУчастников.ПолучитьЭлементы() Цикл
			
			УчастникЭтапа.СрокПредставление =
				ИнтеграцияС1СДокументооборот3КлиентСервер.ПредставлениеСрокаИсполнения(
					УчастникЭтапа.Срок,
					УчастникЭтапа.СрокДни,
					УчастникЭтапа.СрокЧасы,
					УчастникЭтапа.СрокМинуты,
					ИспользоватьДатуИВремяВСрокахЗадач,
					УчастникЭтапа.ВариантУстановкиСрока);
			
			Для Каждого УчастникЭтапаВторойУровень Из УчастникЭтапа.ПолучитьЭлементы() Цикл
				
				УчастникЭтапаВторойУровень.СрокПредставление =
					ИнтеграцияС1СДокументооборот3КлиентСервер.ПредставлениеСрокаИсполнения(
						УчастникЭтапаВторойУровень.Срок,
						УчастникЭтапаВторойУровень.СрокДни,
						УчастникЭтапаВторойУровень.СрокЧасы,
						УчастникЭтапаВторойУровень.СрокМинуты,
						ИспользоватьДатуИВремяВСрокахЗадач,
						УчастникЭтапаВторойУровень.ВариантУстановкиСрока);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик события ПриИзменении поля "Способ подписания".
//
&НаКлиенте
Процедура ИзменитьСпособПодписания()
	
	Элементы.УчастникиДобавитьОбеспечивающегоПодписание.Доступность = Истина;
	
	Если СпособПодписания <> "OnPaper" Тогда
		Элементы.УчастникиДобавитьОбеспечивающегоПодписание.Доступность = Ложь;
		
		// Удаление обеспечивающих подписание.
		Для Каждого СтрокаЭтапа Из Участники.ПолучитьЭлементы() Цикл
			Для Каждого СтрокаУчастник Из СтрокаЭтапа.ПолучитьЭлементы() Цикл
				СтрокиУчастников = СтрокаУчастник.ПолучитьЭлементы();
				ИндексСтроки = СтрокиУчастников.Количество() - 1;
				Пока ИндексСтроки >= 0 Цикл
					
					СтрокаУчастника = СтрокиУчастников[ИндексСтроки];
					Если СтрокаУчастника.Функция = "EnsuringSigning" Тогда
						СтрокиУчастников.Удалить(СтрокаУчастника);
					КонецЕсли;
					
					ИндексСтроки = ИндексСтроки - 1;
					
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		Возврат;
	КонецЕсли;
	
	Если СпособПодписания = "OnPaper" Тогда
		Для Каждого Этап Из Участники.ПолучитьЭлементы() Цикл
			Если Этап.Порядок <> "OneByOne" Тогда
				Этап.Порядок = "OneByOne";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Ответ, ПараметрыОповещения) Экспорт
	
	ЗаписатьИЗакрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьДанныеКОбеспечивающемуПодписание(Куда, Откуда) Экспорт
	
	Куда.ВариантУстановкиСрока = Откуда.ВариантУстановкиСрока;
	
	Куда.НаименованиеЗадачи = Откуда.НаименованиеЗадачи;
	Куда.Описание = Откуда.Описание;
	Куда.ЕстьОсобоеНаименованиеОписание = Откуда.ЕстьОсобоеНаименованиеОписание;
	
	ВариантыУстановкиСрока = ИнтеграцияС1СДокументооборот3КлиентСервер.ВариантыУстановкиСрокаИсполнения();
	
	Если Куда.ВариантУстановкиСрока = ВариантыУстановкиСрока.ТочныйСрок Тогда
		Куда.Срок = Откуда.Срок;
	Иначе
		Куда.СрокДни = Откуда.СрокДни;
		Куда.СрокЧасы = Откуда.СрокЧасы;
		Куда.СрокМинуты = Откуда.СрокМинуты;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементовФормы() Экспорт
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийРодитель = ТекущиеДанные.ПолучитьРодителя();
	Если ТекущийРодитель = Неопределено Тогда
		ЭлементыРодителя = Участники.ПолучитьЭлементы();
		РодительНедоступен = Не ТолькоПросмотр;
	Иначе
		ЭлементыРодителя = ТекущийРодитель.ПолучитьЭлементы();
		РодительНедоступен = ТекущийРодитель.Недоступно;
	КонецЕсли;
	Индекс = ЭлементыРодителя.Индекс(ТекущиеДанные);
	ЭтоПервыйЭлемент = (Индекс = 0);
	ЭтоПоследнийЭлемент = (Индекс = ЭлементыРодителя.Количество() - 1);
	
	ПредыдущийДоступен = Ложь;
	Если Не ЭтоПервыйЭлемент Тогда
		ПредыдущийЭлемент = ЭлементыРодителя.Получить(Индекс - 1);
		ПредыдущийДоступен = Не ПредыдущийЭлемент.Недоступно;
	КонецЕсли;
	
	СледующийДоступен = Ложь;
	Если Не ЭтоПоследнийЭлемент Тогда
		СледующийЭлемент = ЭлементыРодителя.Получить(Индекс + 1);
		СледующийДоступен = Не СледующийЭлемент.Недоступно;
	КонецЕсли;
	
	Если ТекущиеДанные.Функция = "SigningResultProcessor" Тогда
		ТолькоПросмотрСтроки = ТекущиеДанные.ЭтоЭтап Или ТекущиеДанные.Недоступно;
		Элементы.ПредставлениеСтроки.ТолькоПросмотр = ТолькоПросмотрСтроки;
		Элементы.ПредставлениеСтроки.КнопкаВыбора = Истина;
		Элементы.СрокПредставление.ТолькоПросмотр = ТолькоПросмотрСтроки;
		Элементы.ЕстьОсобоеНаименованиеОписание.ТолькоПросмотр = ТолькоПросмотрСтроки;
		Элементы.Описание.ТолькоПросмотр = ТолькоПросмотрСтроки;
		Элементы.Порядок.ТолькоПросмотр = Истина;
		
		Элементы.Добавить.Доступность = Ложь;
		Элементы.ПереместитьВверх.Доступность = Ложь;
		Элементы.ПереместитьВниз.Доступность = Ложь;
		Элементы.Удалить.Доступность = Не ТолькоПросмотрСтроки;
		
	ИначеЕсли ТекущиеДанные.ЭтоЭтап Тогда
		
		Элементы.ПредставлениеСтроки.ТолькоПросмотр = ТекущиеДанные.Недоступно
			Или ИсполнениеДействияСНовымиУчастниками;
		Элементы.ПредставлениеСтроки.КнопкаВыбора = Ложь;
		Элементы.СрокПредставление.ТолькоПросмотр = Истина;
		Элементы.ЕстьОсобоеНаименованиеОписание.ТолькоПросмотр = Истина;
		Элементы.Описание.ТолькоПросмотр = Истина;
		Элементы.Порядок.ТолькоПросмотр =
			(СпособПодписания = "OnPaper")
			Или ТекущиеДанные.Недоступно
			Или ИсполнениеДействияСНовымиУчастниками
			Или ЗначениеЗаполнено(ТекущиеДанные.Состояние);
		
		Элементы.Добавить.Доступность = Не ТекущиеДанные.Недоступно Или ТекущиеДанные.РазрешеноДобавлять;
		
		Элементы.ПереместитьВверх.Доступность = Не ЭтоПервыйЭлемент
			И Не ИсполнениеДействияСНовымиУчастниками
			И ТекущиеДанные.МожноПеремещатьВверх;
		Элементы.ПереместитьВниз.Доступность = Не ЭтоПоследнийЭлемент
			И Не ИсполнениеДействияСНовымиУчастниками
			И ТекущиеДанные.МожноПеремещатьВниз;
		Элементы.Удалить.Доступность = Не ТекущиеДанные.Недоступно
			И (Не ЗначениеЗаполнено(НастройкаДействияID) Или Не ТекущиеДанные.ИзНастройки)
			И Не ИсполнениеДействияСНовымиУчастниками;
		
		Элементы.УчастникиДобавитьОбеспечивающегоПодписание.Доступность = Ложь;
		
	ИначеЕсли ТекущиеДанные.ЭтоДочернийУчастник Тогда
		
		// Обеспечивающий подписание.
		Элементы.СрокПредставление.ТолькоПросмотр = Истина;
		Элементы.ЕстьОсобоеНаименованиеОписание.ТолькоПросмотр = Истина;
		Элементы.Описание.ТолькоПросмотр = Истина;
		Элементы.Порядок.ТолькоПросмотр = Истина;
		Элементы.ПредставлениеСтроки.КнопкаВыбора = Истина;
		
		Элементы.Добавить.Доступность = Ложь;
		Элементы.ПереместитьВверх.Доступность = Ложь;
		Элементы.ПереместитьВниз.Доступность = Ложь;
		
		Элементы.УчастникиДобавитьОбеспечивающегоПодписание.Доступность = Ложь;
		
	Иначе
		
		// Подписывающий.
		ТолькоПросмотрСтроки = РодительНедоступен И Не ТекущиеДанные.РазрешеноДобавлять Или ТекущиеДанные.Недоступно;
		Элементы.ПредставлениеСтроки.ТолькоПросмотр = ТолькоПросмотрСтроки;
		Элементы.ПредставлениеСтроки.КнопкаВыбора = Истина;
		Элементы.СрокПредставление.ТолькоПросмотр = ТолькоПросмотрСтроки;
		Элементы.ЕстьОсобоеНаименованиеОписание.ТолькоПросмотр = ТолькоПросмотрСтроки;
		Элементы.Описание.ТолькоПросмотр = ТолькоПросмотрСтроки;
		Элементы.Порядок.ТолькоПросмотр = Истина;
		
		Элементы.Добавить.Доступность = Не РодительНедоступен Или ТекущиеДанные.РазрешеноДобавлять;
		
		Элементы.УчастникиДобавитьОбеспечивающегоПодписание.Доступность = Не ТолькоПросмотрСтроки
			Или ТекущиеДанные.РазрешеноДобавлять;
		
		Элементы.ПереместитьВверх.Доступность = Не ЭтоПервыйЭлемент
			И Не ТолькоПросмотрСтроки
			И ПредыдущийДоступен
			И ТекущиеДанные.МожноПеремещатьВверх;
		Элементы.ПереместитьВниз.Доступность = Не ЭтоПоследнийЭлемент
			И Не ТолькоПросмотрСтроки
			И СледующийДоступен
			И ТекущиеДанные.МожноПеремещатьВниз;
		Элементы.Удалить.Доступность = Не ТолькоПросмотрСтроки;
		
	КонецЕсли;
	
	Элементы.КонтекстДобавить.Доступность = Элементы.Добавить.Доступность;
	Элементы.КонтекстУдалить.Доступность = Элементы.Удалить.Доступность;
	Элементы.УчастникиКонтекстноеМенюДобавитьОбеспечивающегоПодписание.Доступность =
		Элементы.УчастникиДобавитьОбеспечивающегоПодписание.Доступность;
	
	Элементы.УчастникиДобавитьЭтап.Доступность = Не ЗначениеЗаполнено(НастройкаДействияID)
		И Не ИсполнениеДействияСНовымиУчастниками Или МожноТолькоДобавлятьУчастников Или МожноДобавлятьУчастников;
	
	Элементы.КонтекстДобавитьЭтап.Доступность = Элементы.УчастникиДобавитьЭтап.Доступность;
	
КонецПроцедуры

#КонецОбласти

#Область Сервер

&НаСервере
Процедура ОбработатьОтветВебСервисаНаПолучениеДействия(ДействиеXDTO)
	
	// Заполним общие данные действия.
	ИнтеграцияС1СДокументооборот3.ОбработатьОтветВебСервисаНаПолучениеДействия(ЭтотОбъект, ДействиеXDTO);
	
	// Заполним данные действия подписания.
	СпособПодписания = ДействиеXDTO.signingMethod;
	ИдентификаторЭтапаПодписать = ДействиеXDTO.stageSigningID;
	ИдентификаторОбрабатывающегоРезультат = ДействиеXDTO.resultProcessorID;
	ФормаПредмета = ДействиеXDTO.targetForm;
	СостояниеДействия = "";
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ДействиеXDTO, "state") Тогда
		СостояниеДействия = ДействиеXDTO.state;
	КонецЕсли;
	
	// Обновим форму действия.
	ОбновитьДеревоУчастниковПоОбъекту(ДействиеXDTO);
	ИнтеграцияС1СДокументооборот3.УстановитьВидимостьУсловийУчастниковДействия(ЭтотОбъект, ДействиеXDTO);
	ИнтеграцияС1СДокументооборот3.ЗаполнитьСостоянияИРезультатыВФормеДействия(ЭтотОбъект, ДействиеXDTO);
	УстановитьДоступностьИзмененияУчастников();
	УстановитьСпособыПодписанияИзВидаПредмета(ДействиеXDTO);
	
	ИнтеграцияС1СДокументооборот3.УстановитьВидимостьНаправленияНовымУчастникамДействия(
		ЭтотОбъект,
		СостояниеДействия,
		ДействиеXDTO.permissionRows.rows);
	
КонецПроцедуры

// Заполняет дерево участников по объекту.
//
&НаСервере
Процедура ОбновитьДеревоУчастниковПоОбъекту(ДействиеXDTO)
	
	ЭтапыУчастников = Участники.ПолучитьЭлементы();
	ЭтапыУчастников.Очистить();
	
	Этапы = ДействиеXDTO.stageRows.rows;
	Если Этапы.Количество() > 0 Тогда
		// Добавляем все этапы в таблицу участников.
		Для Каждого СтрокаЭтапа Из Этапы Цикл
			ЭтапУчастников = ЭтапыУчастников.Добавить();
			ИнтеграцияС1СДокументооборот3.ЗаполнитьСтрокуУчастникаДействияИзXDTO(ЭтапУчастников, СтрокаЭтапа);
			ЭтапУчастников.Функция = "Signer";
			ЭтапУчастников.НаименованиеЭтапа = СтрокаЭтапа.stageDescription;
			ЭтапУчастников.ЭтоЭтап = Истина;
			ЭтапУчастников.Порядок = СтрокаЭтапа.orderOfExecutionByParticipants;
		КонецЦикла;
	Иначе
		ЭтапУчастников = ЭтапыУчастников.Добавить();
		ЭтапУчастников.Функция = "Signer";
		ЭтапУчастников.НаименованиеЭтапа = НСтр("ru = 'Подписать'");
		ЭтапУчастников.ЭтоЭтап = Истина;
		ЭтапУчастников.Идентификатор = ИдентификаторЭтапаПодписать;
		Если СпособПодписания = "OnPaper" Тогда
			ЭтапУчастников.Порядок = "OneByOne";
		ИначеЕсли СпособПодписания = "BasicDS" Или СпособПодписания = "EnhancedDS" Тогда
			Если ЗначениеЗаполнено(ДействиеXDTO.orderOfExecutionByParticipants) Тогда
				ЭтапУчастников.Порядок = ДействиеXDTO.orderOfExecutionByParticipants;
			Иначе
				ЭтапУчастников.Порядок = "AllAtOnce";
			КонецЕсли;
		Иначе
			// Пусто.
			Если ФормаПредмета = "Paper" Тогда
				ЭтапУчастников.Порядок = "OneByOne";
			ИначеЕсли ЗначениеЗаполнено(ДействиеXDTO.orderOfExecutionByParticipants) Тогда
				ЭтапУчастников.Порядок = ДействиеXDTO.orderOfExecutionByParticipants;
			Иначе
				ЭтапУчастников.Порядок = "AllAtOnce";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Добавляем обрабатывающего результат.
	ЭтапУчастников = ЭтапыУчастников.Добавить();
	ЭтапУчастников.Функция = "SigningResultProcessor";
	ЭтапУчастников.Порядок = "OneByOne";
	ЭтапУчастников.НаименованиеЭтапа = НСтр("ru = 'Ознакомиться с результатом подписания'");
	ЭтапУчастников.ЭтоЭтап = Истина;
	ЭтапУчастников.Идентификатор = ИдентификаторОбрабатывающегоРезультат;
	
	УчастникиДействия = ДействиеXDTO.participantRows.rows;
	
	// Добавляем все этапы в таблицу участников.
	Для Каждого СтрокаЭтапа Из ЭтапыУчастников Цикл
		УчастникиЭтапа = СтрокаЭтапа.ПолучитьЭлементы();
		
		Если СтрокаЭтапа.Идентификатор <> ИдентификаторОбрабатывающегоРезультат Тогда
			
			Для Каждого Участник Из УчастникиДействия Цикл
				
				Если (ИнтеграцияС1СДокументооборот3КлиентСервер.ИдентификаторЗаполнен(Участник.stageID)
							И Участник.stageID <> СтрокаЭтапа.Идентификатор)
						Или (Не ИнтеграцияС1СДокументооборот3КлиентСервер.ИдентификаторЗаполнен(Участник.stageID)
							И Участник.participantFunction <> СтрокаЭтапа.Функция) Тогда
					Продолжить;
				КонецЕсли;
				
				// На первом уровне выводим только тех, кто никому не подчинен.
				Если ИнтеграцияС1СДокументооборот3КлиентСервер.ИдентификаторЗаполнен(Участник.higherLevelParticipant) Тогда
					Продолжить;
				КонецЕсли;
				
				УчастникЭтапа = УчастникиЭтапа.Добавить();
				ИнтеграцияС1СДокументооборот3.ЗаполнитьСтрокуУчастникаДействияИзXDTO(УчастникЭтапа, Участник);
				УчастникЭтапа.Функция = Участник.participantFunction;
				ОбновитьПолеЕстьОсобоеНаименованиеОписание(УчастникЭтапа);
				
				// Второй уровень.
				ПодчиненныеУчастники = УчастникЭтапа.ПолучитьЭлементы();
				ДочерниеУчастники = ИнтеграцияС1СДокументооборот3.ДочерниеУчастникиДействия(УчастникиДействия, Участник.id);
				Для Каждого УчастникПодчиненный Из ДочерниеУчастники Цикл
					ЭлементУчастникДочерний = ПодчиненныеУчастники.Добавить();
					ИнтеграцияС1СДокументооборот3.ЗаполнитьСтрокуУчастникаДействияИзXDTO(
						ЭлементУчастникДочерний,
						УчастникПодчиненный);
					ЭлементУчастникДочерний.ЭтоДочернийУчастник = Истина;
					ЭлементУчастникДочерний.Функция = УчастникПодчиненный.participantFunction;
					
					ОбновитьПолеЕстьОсобоеНаименованиеОписание(ЭлементУчастникДочерний);
				КонецЦикла;
				
			КонецЦикла;
			
		Иначе
			
			// Ознакомление.
			УчастникОбрабатывающийРезультат = ИнтеграцияС1СДокументооборот3.УчастникиДействияСФункцией(
				УчастникиДействия,
				"SigningResultProcessor");
			Если УчастникОбрабатывающийРезультат.Количество() > 0 Тогда
				Для Каждого Участник Из УчастникОбрабатывающийРезультат Цикл
					УчастникЭтапа = УчастникиЭтапа.Добавить();
					ИнтеграцияС1СДокументооборот3.ЗаполнитьСтрокуУчастникаДействияИзXDTO(УчастникЭтапа, Участник);
					УчастникЭтапа.Функция = "SigningResultProcessor";
				КонецЦикла;
			Иначе
				УчастникЭтапа = УчастникиЭтапа.Добавить();
				ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(
					УчастникЭтапа,
					ДействиеXDTO.author,
					"Участник",
					Истина);
				УчастникЭтапа.Функция = СтрокаЭтапа.Функция;
				УчастникЭтапа.Идентификатор = СтрокаЭтапа.Идентификатор;
			КонецЕсли;
			
		КонецЕсли;
		
		Если УчастникиЭтапа.Количество() = 0 Тогда
			УчастникЭтапа = УчастникиЭтапа.Добавить();
			УчастникЭтапа.Идентификатор = СтрокаЭтапа.Идентификатор;
			УчастникЭтапа.Функция = СтрокаЭтапа.Функция;
		КонецЕсли;
	КонецЦикла;
	
	ЕстьЭтапы = ИнтеграцияС1СДокументооборот3КлиентСервер.ЕстьЭтапыДействия(
		Участники,
		ИдентификаторЭтапаПодписать,
		ИдентификаторОбрабатывающегоРезультат);
	
	ОбновитьПредставленияВДеревеУчастников(Участники);
	Команды.РазныеСроки.Подсказка = ИнтеграцияС1СДокументооборот3.ПодсказкаКнопкиРазныеСрокиДействия(Ложь, ЕстьЭтапы);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОбъектПоДеревуУчастников(Прокси, ДействиеXDTO)
	
	ДействиеXDTO.participantRows = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
		Прокси,
		"DMActionSigningParticipantRows");
	УчастникиXDTO = ДействиеXDTO.participantRows.rows; // СписокXDTO
	ДействиеXDTO.stageRows = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
		Прокси,
		"DMActionStageRows");
	ЭтапыXDTO = ДействиеXDTO.stageRows.rows; // СписокXDTO
	
	ЕстьЭтапы = Ложь;
	ЕстьИсполняющиеУчастники = Ложь;
	ЕстьОбрабатывающийРезультат = Ложь;
	
	// Этапы пишем только введенные руками.
	ЭлементыЭтапы = Участники.ПолучитьЭлементы();
	Для Каждого ЭлементЭтап Из ЭлементыЭтапы Цикл
		Если ЭлементЭтап.Идентификатор = ИдентификаторЭтапаПодписать Тогда
			ДействиеXDTO.orderOfExecutionByParticipants = ЭлементЭтап.Порядок;
		КонецЕсли;
		Если ЭлементЭтап.Идентификатор = ИдентификаторЭтапаПодписать
				Или ЭлементЭтап.Идентификатор = ИдентификаторОбрабатывающегоРезультат Тогда
			Продолжить;
		КонецЕсли;
		ЕстьЭтапы = Истина;
		Прервать;
	КонецЦикла;
	
	Для Каждого ЭлементЭтап Из ЭлементыЭтапы Цикл
		
		ИдентификаторЭтапа = Неопределено;
		
		Если ЕстьЭтапы И ЭлементЭтап.Идентификатор <> ИдентификаторОбрабатывающегоРезультат Тогда
			// Для стандартного этапа меняем идентификатор, если заданы другие.
			Если ЭлементЭтап.Идентификатор = ИдентификаторЭтапаПодписать Тогда
				ЭлементЭтап.Идентификатор = Строка(Новый УникальныйИдентификатор);
			КонецЕсли;
			
			ЭтапXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
				Прокси,
				"DMActionStageRow");
			ИнтеграцияС1СДокументооборот3.ЗаполнитьСтрокуXDTOИзУчастникаДействия(Прокси, ЭтапXDTO, ЭлементЭтап);
			ЭтапXDTO.stageDescription = ЭлементЭтап.НаименованиеЭтапа;
			ЭтапXDTO.orderOfExecutionByParticipants = ЭлементЭтап.Порядок;
			ЭтапыXDTO.Добавить(ЭтапXDTO);
			ИдентификаторЭтапа = ЭлементЭтап.Идентификатор;
		КонецЕсли;
		
		Для Каждого ЭлементУчастник Из ЭлементЭтап.ПолучитьЭлементы() Цикл
			
			Если Не ЗначениеЗаполнено(ЭлементУчастник.УчастникID) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЭлементЭтап.Функция = "Signer" Тогда
				Для Каждого СтрокаXDTO Из УчастникиXDTO Цикл
					Если ЭлементУчастник.УчастникID = СтрокаXDTO.participant.objectID.id
							И ЭлементУчастник.УчастникТип = СтрокаXDTO.participant.objectID.type
							И ЭлементУчастник.НаименованиеЗадачи = СтрокаXDTO.taskDescription
							И ЭлементУчастник.Описание = СтрокаXDTO.description
							И ((ЭлементУчастник.Защищенный = Истина И СтрокаXDTO.protected = Ложь)
								Или ЭлементУчастник.Защищенный = Ложь) Тогда
						ВызватьИсключение СтрШаблон(
							НСтр("ru = 'В этапах повторяется подписывающий: %1.
								|Удалите дубли, укажите особое описание или установите подписывающему признак ""Защищенный""'"),
							ЭлементУчастник.УчастникПредставление);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			УчастникXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
				Прокси,
				"DMActionSigningParticipantRow");
			ИнтеграцияС1СДокументооборот3.ЗаполнитьСтрокуXDTOИзУчастникаДействия(Прокси, УчастникXDTO, ЭлементУчастник);
			Если ЗначениеЗаполнено(ИдентификаторЭтапа) Тогда
				УчастникXDTO.stageID = ИдентификаторЭтапа;
			КонецЕсли;
			УчастникXDTO.participantFunction = ЭлементУчастник.Функция;
			УчастникиXDTO.Добавить(УчастникXDTO);
			
			Если Не ИнтеграцияС1СДокументооборот3КлиентСервер.ЭтоФункцияОбработатьРезультат(ЭлементЭтап.Функция) Тогда
				ЕстьИсполняющиеУчастники = Истина;
			Иначе
				ЕстьОбрабатывающийРезультат = Истина;
			КонецЕсли;
			
			// Второй уровень.
			Для Каждого ЭлементУчастникДочерний Из ЭлементУчастник.ПолучитьЭлементы() Цикл
				
				Если Не ЗначениеЗаполнено(ЭлементУчастникДочерний.УчастникID) Тогда
					Продолжить;
				КонецЕсли;
				
				Для Каждого СтрокаXDTO Из УчастникиXDTO Цикл
					Если ЭлементУчастникДочерний.УчастникID = СтрокаXDTO.participant.objectID.id
							И ЭлементУчастникДочерний.УчастникТип = СтрокаXDTO.participant.objectID.type
							И ЭлементЭтап.Функция = СтрокаXDTO.participantFunction
							И ЭлементУчастникДочерний.НаименованиеЗадачи = СтрокаXDTO.taskDescription
							И ЭлементУчастникДочерний.Описание = СтрокаXDTO.description
							И ((ЭлементУчастникДочерний.Защищенный = Истина И СтрокаXDTO.protected = Ложь)
								Или ЭлементУчастникДочерний.Защищенный = Ложь) Тогда
						ВызватьИсключение СтрШаблон(
							НСтр("ru = 'В этапе ""%1"" повторяется участник: %2.
								|Удалите дубли, укажите особое описание или установите участнику признак ""Защищенный""'"),
							ЭлементЭтап.НаименованиеЭтапа ,ЭлементУчастникДочерний.УчастникПредставление);
					КонецЕсли;
				КонецЦикла;
				
				УчастникДочернийXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
					Прокси,
					"DMActionSigningParticipantRow");
				ИнтеграцияС1СДокументооборот3.ЗаполнитьСтрокуXDTOИзУчастникаДействия(
					Прокси,
					УчастникДочернийXDTO,
					ЭлементУчастникДочерний);
				УчастникДочернийXDTO.participantFunction = ЭлементУчастникДочерний.Функция;
				УчастникДочернийXDTO.higherLevelParticipant = УчастникXDTO.id; // Берем от родителя (в ТЧ).
				УчастникДочернийXDTO.stageID = УчастникXDTO.stageID; // Берем от родителя (в ТЧ).
				УчастникиXDTO.Добавить(УчастникДочернийXDTO);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Если заполнен только "Обрабатывающий результат", то не сохраняем его.
	Если Не ЕстьИсполняющиеУчастники Тогда
		УчастникиXDTO.Очистить();
		ЭтапыXDTO.Очистить();
	ИначеЕсли Не ЕстьОбрабатывающийРезультат Тогда
		ВызватьИсключение НСтр("ru = 'Отсутствует участник ""ознакомления с результатом подписания""'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПолеЕстьОсобоеНаименованиеОписание(Строка)
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Строка.ЕстьОсобоеНаименованиеОписание = ЗначениеЗаполнено(Строка.НаименованиеЗадачи)
		Или ЗначениеЗаполнено(Строка.Описание);
	
КонецПроцедуры

// Обновляет представления строк в дереве участников.
//
// Параметры:
//   Участники - ДанныеФормыДерево - дерево с участниками.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредставленияВДеревеУчастников(Участники)
	
	ЭтапыУчастников = Участники.ПолучитьЭлементы();
	
	Для ИндексЭтапа = 0 По ЭтапыУчастников.Количество() - 1 Цикл
		
		СтрокаЭтапа = ЭтапыУчастников.Получить(ИндексЭтапа);
		СтрокаЭтапа.ПрефиксСтроки = "";
		СтрокаЭтапа.ПредставлениеСтроки = СтрокаЭтапа.НаименованиеЭтапа;
		СтрокаЭтапа.ПорядокПредставление =
			ИнтеграцияС1СДокументооборот3КлиентСервер.ПредставлениеПорядкаВыполненияЭтапаДействия(СтрокаЭтапа.Порядок);
		
		УчастникиЭтапа = СтрокаЭтапа.ПолучитьЭлементы();
		
		Для ИндексУчастника = 0 По УчастникиЭтапа.Количество() - 1 Цикл
			СтрокаУчастника = УчастникиЭтапа[ИндексУчастника];
			
			СтрокаУчастника.ПрефиксСтроки = "";
			СтрокаУчастника.ПредставлениеСтроки =
				ИнтеграцияС1СДокументооборот3КлиентСервер.ПредставлениеУчастника(СтрокаУчастника);
			СтрокаУчастника.ПорядокПредставление =
				ИнтеграцияС1СДокументооборот3КлиентСервер.ПредставлениеПорядкаВыполненияЭтапаДействия(СтрокаУчастника.Порядок);
			
			// Второй уровень.
			УчастникиЭтапа2 = СтрокаУчастника.ПолучитьЭлементы();
			
			Для ИндексУчастника2 = 0 По УчастникиЭтапа2.Количество() - 1 Цикл
				СтрокаУчастника = УчастникиЭтапа2[ИндексУчастника2];
				
				СтрокаУчастника.ПрефиксСтроки = "";
				СтрокаУчастника.ПредставлениеСтроки =
					ИнтеграцияС1СДокументооборот3КлиентСервер.ПредставлениеУчастника(СтрокаУчастника);
				СтрокаУчастника.ПорядокПредставление =
					ИнтеграцияС1СДокументооборот3КлиентСервер.ПредставлениеПорядкаВыполненияЭтапаДействия(СтрокаУчастника.Порядок);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует объект XDTO для записи в Документообороте по данным из формы действия.
//
// Возвращаемое значение:
//   Строка - строковое представление объекта XDTO типа, наследующего DMAction.
//
&НаСервере
Функция ПодготовитьДействиеДляЗаписи()
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	ДействиеXDTO = ИнтеграцияС1СДокументооборот3.ПодготовитьДействиеДляЗаписи(Прокси, ЭтотОбъект);
	
	ДействиеXDTO.signingMethod = СпособПодписания;
	
	ОбновитьОбъектПоДеревуУчастников(Прокси, ДействиеXDTO);
	
	ИнтеграцияС1СДокументооборот3.ЗаполнитьТаблицуУчастниковДействия(ЭтотОбъект.УчастникиПередЗаписью, ДействиеXDTO);
	
	Возврат ИнтеграцияС1СДокументооборотБазоваяФункциональность.ОбъектXDTOВСтроку(Прокси, ДействиеXDTO);
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьИзмененияУчастников()
	
	Если ТолькоПросмотр = Истина Тогда
		Возврат;
	КонецЕсли;
	
	РазрешениеОбщее = Неопределено;
	НайденныеРазрешения = Разрешения.НайтиСтроки(
		Новый Структура("ИдентификаторЭтапа", "00000000-0000-0000-0000-000000000000"));
	Если НайденныеРазрешения.Количество() > 0 Тогда
		РазрешениеОбщее = НайденныеРазрешения[0].Разрешение;
	КонецЕсли;
	
	Если РазрешениеОбщее = "Forbidden" Или РазрешениеОбщее = "AllowedToAdd" Тогда
		Элементы.Автор.Доступность = Ложь;
		Элементы.СпособПодписания.Доступность = Ложь;
		Элементы.ГруппаОписаниеОтложенногоВыполнения.Доступность = Ложь;
	КонецЕсли;
	
	Если РазрешениеОбщее = "AllowedToAdd" Тогда
		МожноТолькоДобавлятьУчастников = Истина;
	КонецЕсли;
	
	Если РазрешениеОбщее = "Allowed" Тогда
		МожноДобавлятьУчастников = Истина;
	КонецЕсли;
	
	ЭтапыУчастников = Участники.ПолучитьЭлементы();
	Для Каждого ЭтапУчастников Из ЭтапыУчастников Цикл
		РазрешениеЭтапа = РазрешениеОбщее;
		Если ЭтапУчастников.Идентификатор <> ИдентификаторЭтапаПодписать Тогда
			НайденныеРазрешения = Разрешения.НайтиСтроки(
				Новый Структура("ИдентификаторЭтапа", ЭтапУчастников.Идентификатор));
			Если НайденныеРазрешения.Количество() > 0 Тогда
				РазрешениеЭтапа = НайденныеРазрешения[0].Разрешение;
			КонецЕсли;
		КонецЕсли;
		
		ЭтапУчастников.Недоступно =
			РазрешениеЭтапа = "Forbidden"
			Или РазрешениеЭтапа = "AllowedToAdd"
			// Завершенные этапы запрещаем редактировать.
			Или (ЭтапУчастников.Состояние = "Completed"
				И Не ИсполнениеДействияСНовымиУчастниками);
		ЭтапУчастников.РазрешеноДобавлять = (РазрешениеЭтапа = "AllowedToAdd");
		
		УчастникиЭтапа = ЭтапУчастников.ПолучитьЭлементы();
		Для Каждого УчастникЭтапа Из УчастникиЭтапа Цикл
			УчастникЭтапа.Недоступно =
				ЭтапУчастников.Недоступно И ЗначениеЗаполнено(УчастникЭтапа.УчастникID)
				Или УчастникЭтапа.Состояние = "Completed";
			УчастникЭтапа.РазрешеноДобавлять = ЭтапУчастников.РазрешеноДобавлять;
			ОбеспечивающиеПодписание = УчастникЭтапа.ПолучитьЭлементы();
			Для Каждого ОбеспечивающийПодписание Из ОбеспечивающиеПодписание Цикл
				ОбеспечивающийПодписание.Недоступно = ЭтапУчастников.Недоступно Или УчастникЭтапа.РазрешеноДобавлять;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСпособыПодписанияИзВидаПредмета(ДействиеXDTO)
	
	Если ДействиеXDTO.target.objectID.type = "DMDocument" Тогда
		
		Если ДействиеXDTO.targetForm = "Paper" Тогда
			Элементы.СпособПодписания.РежимВыбораИзСписка = Истина;
			Элементы.СпособПодписания.СписокВыбора.Очистить();
			Элементы.СпособПодписания.СписокВыбора.Добавить("OnPaper", НСтр("ru = 'На бумаге'"));
			
			Если СпособПодписания <> "OnPaper" Тогда
				СпособПодписания = "OnPaper";
			КонецЕсли;
		ИначеЕсли ДействиеXDTO.targetForm = "Electronic" Тогда
			Элементы.СпособПодписания.РежимВыбораИзСписка = Истина;
			Элементы.СпособПодписания.СписокВыбора.Очистить();
			Элементы.СпособПодписания.СписокВыбора.Добавить("BasicDS", НСтр("ru = 'Простая ЭП'"));
			Если ИспользоватьЭлектронныеПодписи Тогда
				Элементы.СпособПодписания.СписокВыбора.Добавить("EnhancedDS", НСтр("ru = 'Усиленная ЭП'"));
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СпособПодписания) Или СпособПодписания = "OnPaper" Тогда
				СпособПодписания = "BasicDS";
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ДействиеXDTO.target.objectID.type = "DMMeeting" Тогда
		
		Элементы.СпособПодписания.РежимВыбораИзСписка = Истина;
		Элементы.СпособПодписания.СписокВыбора.Очистить();
		Элементы.СпособПодписания.СписокВыбора.Добавить("OnPaper", НСтр("ru = 'На бумаге'"));
		Элементы.СпособПодписания.СписокВыбора.Добавить("BasicDS", НСтр("ru = 'Простая ЭП'"));
		
		Если Не ЗначениеЗаполнено(СпособПодписания) Тогда
			СпособПодписания = "BasicDS";
		КонецЕсли;
		
	КонецЕсли;
	
	Если СпособПодписания <> "OnPaper" Тогда
		Элементы.УчастникиДобавитьОбеспечивающегоПодписание.Видимость = Ложь;
		Элементы.УчастникиКонтекстноеМенюДобавитьОбеспечивающегоПодписание.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Подключение

// Проверяет подключение к ДО, выводя окно авторизации, если необходимо, и изменяя форму согласно результату.
//
&НаКлиенте
Процедура ПроверитьПодключение()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьПодключениеЗавершение", ЭтотОбъект);
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПроверитьПодключение(
		ОписаниеОповещения,
		ЭтотОбъект,,
		Ложь,
		Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Истина Тогда
		ПриПодключении();
	Иначе // Не удалось подключиться к ДО.
		ОбработатьФормуСогласноВерсииСервиса();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПодключении()
	
	Если ОбработатьФормуСогласноВерсииСервиса() Тогда
		ОбновитьФорму();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьФормуСогласноВерсииСервиса() Экспорт
	
	ВерсияСервиса = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВерсияСервиса();
	
	Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СервисДоступен(ВерсияСервиса) Тогда
		Элементы.ГруппаСтраницыПодключения.ТекущаяСтраница = Элементы.СтраницаДокументооборотНедоступен;
		Возврат Ложь;
	КонецЕсли;
	
	ФормаОбработанаУспешно = Истина;
	
	Попытка
		
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДоступенФункционалВерсииСервиса("3.0.13.29") Тогда
			
			Элементы.ГруппаСтраницыПодключения.ТекущаяСтраница = Элементы.СтраницаДокументооборотДоступен;
			
			НастройкиДокументооборота = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьНастройки();
			ИспользоватьДатуИВремяВСрокахЗадач = НастройкиДокументооборота.ИспользоватьДатуИВремяВСрокахЗадач;
			ИспользоватьЭлектронныеПодписи = НастройкиДокументооборота.ИспользоватьЭлектронныеЦифровыеПодписи;
			
		Иначе
			
			Элементы.ГруппаСтраницыПодключения.ТекущаяСтраница = Элементы.СтраницаВерсияНеПоддерживается;
			ФормаОбработанаУспешно = Ложь;
			
		КонецЕсли;
		
	Исключение
		
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.НужноОбработатьФорму(ИнформацияОбОшибке()) Тогда
			ОбработатьФормуСогласноВерсииСервиса();
		КонецЕсли;
		
	КонецПопытки;
	
	Возврат ФормаОбработанаУспешно;
	
КонецФункции

#КонецОбласти

#Область ОбновитьФорму

&НаКлиенте
Процедура ОбновитьФорму(ВыводитьОкноОжидания = Ложь, СкрыватьИнтерфейс = Истина)
	
	Если Не ВыводитьОкноОжидания И Не СкрыватьИнтерфейс Тогда
		Элементы.СтраницаДокументооборотДоступен.Доступность = Ложь;
	КонецЕсли;
	
	Колонки = Новый Массив;
	Если РежимДиалога Тогда
		Колонки.Добавить("dialogueMode");
	КонецЕсли;
	ДлительнаяОперация = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПолучитьОбъектАсинхронно(
		УникальныйИдентификатор,
		Тип,
		ID,
		Колонки);
	ПараметрыОповещения = Новый Структура("ВыводитьОкноОжидания, СкрыватьИнтерфейс",
		ВыводитьОкноОжидания,
		СкрыватьИнтерфейс);
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбновитьФормуЗавершение", ЭтотОбъект, ПараметрыОповещения);
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьЗапросАсинхронно(
		ЭтотОбъект,
		ДлительнаяОперация,
		ОповещениеОЗавершении,
		ВыводитьОкноОжидания,,
		СкрыватьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФормуЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Не ПараметрыОповещения.ВыводитьОкноОжидания И Не ПараметрыОповещения.СкрыватьИнтерфейс Тогда
		Элементы.СтраницаДокументооборотДоступен.Доступность = Истина;
	КонецЕсли;
	
	ОбработатьФорму = Ложь;
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПроверитьОшибкиПриОбновленииФормы(
		ЭтотОбъект,
		Результат,
		ОбработатьФорму);
	Если ОбработатьФорму Тогда
		ОбработатьФормуСогласноВерсииСервиса();
	КонецЕсли;
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОперацияВыполнена(Результат, ОбработатьФорму) Тогда
		ОбновлениеНаСервереЗавершение(Результат.РезультатДлительнойОперации);
		ИнтеграцияС1СДокументооборот3Клиент.ПриОткрытииФормыДействия(ЭтотОбъект);
		ИнтеграцияС1СДокументооборот3Клиент.ЗаполнитьДоступностьПеремещенияЭтаповУчастниковДействия(Участники, Истина);
		ИнтеграцияС1СДокументооборот3Клиент.УстановитьПометкуКнопкиРазныеСрокиДействияРекурсивно(
			Участники.ПолучитьЭлементы(),
			Элементы.УчастникиРазныеСроки);
	ИначеЕсли ОбработатьФорму Тогда
		ОбработатьФормуСогласноВерсииСервиса();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновлениеНаСервереЗавершение(ДействиеXDTOСтрока)
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	ДействиеXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СтрокаВОбъектXDTO(Прокси, ДействиеXDTOСтрока);
	ОбработатьОтветВебСервисаНаПолучениеДействия(ДействиеXDTO);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаписатьОбъект

&НаКлиенте
Процедура ПередЗаписью(Отказ)
	
	Если Не ИнтеграцияС1СДокументооборот3Клиент.ЭтапыДействияУникальны(Участники) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ИсполнениеДействияСНовымиУчастниками
			И Не ИнтеграцияС1СДокументооборот3КлиентСервер.УчастникиДействияИзмененыВКарточке(ЭтотОбъект) Тогда
		ПоказатьПредупреждение(,
			НСтр("ru = 'Новые участники не добавлены.
				|Для запуска нового подписания добавьте участников.'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть()
	
	Если Не ЗначениеЗаполнено(ID) Или Не ЗначениеЗаполнено(Тип) Тогда
		Закрыть(КодВозвратаДиалога.Отмена);
		Возврат;
	КонецЕсли;
	
	Если Не Модифицированность Тогда
		Если РежимДиалога Тогда
			Закрыть(КодВозвратаДиалога.ОК);
		Иначе
			Закрыть(КодВозвратаДиалога.Отмена);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ДействиеXDTOСтрока = ПодготовитьДействиеДляЗаписи();
	
	Отказ = Ложь;
	ПередЗаписью(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборот3Клиент.ПроверитьУчастниковИЗаписатьДействие(
		ДействиеXDTOСтрока,
		ЭтотОбъект,
		Новый ОписаниеОповещения("ЗаписатьИЗакрытьЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрытьЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	ОбработатьФорму = Ложь;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОперацияВыполнена(Результат, ОбработатьФорму) Тогда
		Модифицированность = Ложь;
		ДанныеОбработки = Новый Структура("ПредметID, ПредметТип", ОсновнойПредметID, ОсновнойПредметТип);
		Оповестить("Документооборот_ДействиеСОбработкой", Новый Структура("ДанныеОбработки", ДанныеОбработки), ЭтотОбъект);
		Закрыть();
	ИначеЕсли ОбработатьФорму Тогда
		ОбработатьФормуСогласноВерсииСервиса();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти