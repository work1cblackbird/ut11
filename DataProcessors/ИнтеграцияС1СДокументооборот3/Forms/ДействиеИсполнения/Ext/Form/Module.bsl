#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборот3.ПриСозданииНаСервереФормыДействия(ЭтотОбъект, Параметры);
	
	БазовоеНаименованиеЭтапа = НСтр("ru = '<Не введен>'");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПроверитьПодключение();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "УдалениеУчастниковДействия" И Источник = УникальныйИдентификатор Тогда
		УбратьОтветственногоУчастника();
		ОбновитьПредставленияВДеревеУчастников(Участники, ПоПунктам);
		УстановитьДоступностьЭлементовФормы();
		
	ИначеЕсли ИмяСобытия = "ОбновитьПредставленияВДеревеУчастников" И Источник = УникальныйИдентификатор Тогда
		ОбновитьПредставленияВДеревеУчастников(Участники, ПоПунктам);
		УстановитьДоступностьЭлементовФормы();
		ИнтеграцияС1СДокументооборот3Клиент.УчастникиДействияПриАктивизацииСтроки(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		ТекстПредупреждения = "";
		ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы,, ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура АвторНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияС1СДокументооборот3Клиент.ВыбратьСотрудникаИзДереваПодразделений("Автор", ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура АвторАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMEmployee",
			ДанныеВыбора,
			Текст,
			СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвторОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMEmployee",
			ДанныеВыбора,
			Текст,
			СтандартнаяОбработка);
		
		Если ДанныеВыбора.Количество() = 1 Тогда
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
				"Автор",
				ДанныеВыбора[0].Значение,
				СтандартнаяОбработка,
				ЭтотОбъект);
			СтандартнаяОбработка = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвторОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
		"Автор",
		ВыбранноеЗначение,
		СтандартнаяОбработка,
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура АвторОчистка(Элемент, СтандартнаяОбработка)
	
	Автор = "";
	АвторID = "";
	АвторТип = "";
	АвторПредставление = "";
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("КонтролерНачалоВыбораЗавершение", ЭтотОбъект);
	ОткрытьФорму(
		"Обработка.ИнтеграцияС1СДокументооборот3.Форма.АдреснаяКнига",,
		ЭтотОбъект,,,,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерНачалоВыбораЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Результат.Свойство("Исполнитель", Контролер);
	Результат.Свойство("ИсполнительID", КонтролерID);
	Результат.Свойство("ИсполнительТип", КонтролерТип);
	
	Результат.Свойство("ОсновнойОбъектАдресации", ОсновнойОбъектАдресацииКонтролер);
	Результат.Свойство("ОсновнойОбъектАдресацииID", ОсновнойОбъектАдресацииКонтролерID);
	Результат.Свойство("ОсновнойОбъектАдресацииТип", ОсновнойОбъектАдресацииКонтролерТип);
	
	Результат.Свойство("ДополнительныйОбъектАдресации", ДополнительныйОбъектАдресацииКонтролер);
	Результат.Свойство("ДополнительныйОбъектАдресацииID", ДополнительныйОбъектАдресацииКонтролерID);
	Результат.Свойство("ДополнительныйОбъектАдресацииТип", ДополнительныйОбъектАдресацииКонтролерТип);
	
	КонтролерПредставление = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ПредставлениеУчастникаЗадачи(
		Контролер,
		ОсновнойОбъектАдресацииКонтролер,
		ДополнительныйОбъектАдресацииКонтролер);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMEmployee",
			ДанныеВыбора,
			Текст,
			СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMEmployee",
			ДанныеВыбора,
			Текст,
			СтандартнаяОбработка);
		
		Если ДанныеВыбора.Количество() = 1 Тогда
			ОчиститьПолеКонтролер();
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
				"Контролер",
				ДанныеВыбора[0].Значение,
				СтандартнаяОбработка,
				ЭтотОбъект);
			КонтролерПредставление =
				ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ПредставлениеУчастникаЗадачи(
					Контролер,
					ОсновнойОбъектАдресацииКонтролер,
					ДополнительныйОбъектАдресацииКонтролер);
			СтандартнаяОбработка = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОчиститьПолеКонтролер();
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
		"Контролер",
		ВыбранноеЗначение,
		СтандартнаяОбработка,
		ЭтотОбъект);
	КонтролерПредставление = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ПредставлениеУчастникаЗадачи(
		Контролер,
		ОсновнойОбъектАдресацииКонтролер,
		ДополнительныйОбъектАдресацииКонтролер);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерОчистка(Элемент, СтандартнаяОбработка)
	
	ОчиститьПолеКонтролер();
	КонтролерПредставление = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ПредставлениеУчастникаЗадачи(
		Контролер,
		ОсновнойОбъектАдресацииКонтролер,
		ДополнительныйОбъектАдресацииКонтролер);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкиАвторизацииНажатие(Элемент)
	
	Оповещение = Новый ОписаниеОповещения("ДекорацияНастройкиАвторизацииНажатиеЗавершение", ЭтотОбъект);
	ИмяФормыПараметров = "Обработка.ИнтеграцияС1СДокументооборотБазоваяФункциональность.Форма.АвторизацияВ1СДокументооборот";
	
	ОткрытьФорму(ИмяФормыПараметров,, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкиАвторизацииНажатиеЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Истина Тогда
		ПриПодключении();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеОтложенногоНачалаВыполненияНажатие(Элемент, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборот3Клиент.ОписаниеОтложенногоНачалаВыполненияДействияНажатие(
		ЭтотОбъект,
		СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУчастники

&НаКлиенте
Процедура УчастникиПриИзменении(Элемент)
	
	ОбновитьПредставленияВДеревеУчастников(Участники, ПоПунктам);
	ИнтеграцияС1СДокументооборот3Клиент.РазвернутьДеревоУчастниковДействия(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьЭлементовФормы();
	ИнтеграцияС1СДокументооборот3Клиент.УчастникиДействияПриАктивизацииСтроки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПередУдалением(Элемент, Отказ)
	
	ИнтеграцияС1СДокументооборот3Клиент.УчастникиДействияПередУдалением(ЭтотОбъект, Отказ, Истина,, ПоПунктам);
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Если ПоПунктам Тогда
			ДобавитьПункт(Неопределено);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПараметрыДобавленияУчастниковДействия = ИнтеграцияС1СДокументооборот3Клиент.ПараметрыДобавленияУчастниковДействия();
	ПараметрыДобавленияУчастниковДействия.СЭтапами = Истина;
	ПараметрыДобавленияУчастниковДействия.ВозможныДочерниеИсполнители = Истина;
	ПараметрыДобавленияУчастниковДействия.ПоПунктам = ПоПунктам;
	ПараметрыДобавленияУчастниковДействия.МожноДобавлятьЭтапы = Ложь;
	ПараметрыДобавленияУчастниковДействия.МожноТолькоДобавлятьУчастников = МожноТолькоДобавлятьУчастников;
	ПараметрыДобавленияУчастниковДействия.ФункцияУчастника = "Performer";
	ИнтеграцияС1СДокументооборот3Клиент.УчастникиДействияПередНачаломДобавления(
		ЭтотОбъект,
		Отказ,
		Копирование,
		ПараметрыДобавленияУчастниковДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПередНачаломИзменения(Элемент, Отказ)
	
	ИнтеграцияС1СДокументооборот3Клиент.УчастникиДействияПередНачаломИзменения(ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Участники.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрыватьОсобоеНаименованиеИОписание = Не ТекущиеДанные.ЭтоЭтап
		И (ТекущиеДанные.Функция <> "PerformanceResultProcessor");
	РазрешениеОбщее = Неопределено;
	Если Разрешения.Количество() > 0 Тогда
		РазрешениеОбщее = Разрешения[0].Разрешение;
	КонецЕсли;
	ТолькоПросмотрОсобогоНаименованияИОписания = ТолькоПросмотр
		Или (РазрешениеОбщее = "Forbidden")
		Или (РазрешениеОбщее = Неопределено)
		Или (МожноТолькоДобавлятьУчастников И ТекущиеДанные.Недоступно);
	
	ИнтеграцияС1СДокументооборот3Клиент.УчастникиДействияВыбор(
		ЭтотОбъект,
		ВыбраннаяСтрока,
		Поле,
		СтандартнаяОбработка,
		ОткрыватьОсобоеНаименованиеИОписание,
		ТолькоПросмотрОсобогоНаименованияИОписания,
		Истина);
	
	Если ТолькоПросмотр И Поле <> Элементы.ПроектРезолюции И Не ТекущиеДанные.ЭтоДочернийУчастник Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоПункт Тогда
		
		СтандартнаяОбработка = Ложь;
		РежимСозданияПункта = (ТекущиеДанные.НаименованиеЭтапа = БазовоеНаименованиеЭтапа);
		ОткрытьПункт(ТекущиеДанные, Не РежимСозданияПункта);
		
	ИначеЕсли Поле = Элементы.ПроектРезолюции И Не ТекущиеДанные.ЭтоЭтап И ТекущиеДанные.Функция = "ReviewingPerson" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		// Если резолюции нет, но действие уже активно, то ничего не делаем.
		Если Не ТекущиеДанные.ЕстьРезолюция И ЗначениеЗаполнено(ТекущиеДанные.Состояние) Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		Если ТекущиеДанные.ЕстьРезолюция Тогда
			ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Резолюция'"));
			ПараметрыФормы.Вставить("Комментарий", ТекущиеДанные.ПредставлениеРезолюции);
			ПараметрыФормы.Вставить("ТолькоПросмотр", Истина);
		Иначе
			ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Проект резолюции'"));
			ПараметрыФормы.Вставить("Комментарий", ТекущиеДанные.ПроектРезолюции);
			ПараметрыФормы.Вставить("ТолькоПросмотр", Ложь);
		КонецЕсли;
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот3.Форма.ВводКомментария",
			ПараметрыФормы,,,,,
			Новый ОписаниеОповещения("ПроектРезолюцииЗавершениеВвода", ЭтотОбъект, ТекущиеДанные),
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтрокиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборот3Клиент.ПредставлениеУчастникаДействияНачалоВыбора(
		Элемент,
		ДанныеВыбора,
		СтандартнаяОбработка,
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтрокиАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборот3Клиент.ПредставлениеУчастникаДействияАвтоПодбор(
		Элемент,
		Текст,
		ДанныеВыбора,
		ПараметрыПолученияДанных,
		Ожидание,
		СтандартнаяОбработка,
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтрокиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборот3Клиент.ПредставлениеУчастникаДействияОкончаниеВводаТекста(
		Элемент,
		Текст,
		ДанныеВыбора,
		ПараметрыПолученияДанных,
		СтандартнаяОбработка,
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтрокиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборот3Клиент.ПредставлениеУчастникаДействияОбработкаВыбора(
		Элемент,
		ВыбранноеЗначение,
		СтандартнаяОбработка,
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтрокиОчистка(Элемент, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборот3Клиент.ПредставлениеУчастникаДействияОчистка(
		Элемент,
		СтандартнаяОбработка,
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокПредставлениеПриИзменении(Элемент)
	
	ИнтеграцияС1СДокументооборот3Клиент.СрокВыполненияДействияУчастникомПриИзменении(
		ЭтотОбъект,
		Не Элементы.УчастникиРазныеСроки.Пометка);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокПредставлениеРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборот3Клиент.СрокВыполненияДействияУчастникомРегулирование(
		ЭтотОбъект,
		Направление,
		СтандартнаяОбработка,
		Не Элементы.УчастникиРазныеСроки.Пометка);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеЗадачиПриИзменении(Элемент)
	
	ОбновитьПолеЕстьОсобоеНаименованиеОписание(Элементы.Участники.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеПриИзменении(Элемент)
	
	ОбновитьПолеЕстьОсобоеНаименованиеОписание(Элементы.Участники.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьФорму(Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Готово(Команда)
	
	ЗаписатьИЗакрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьДиалог(Команда)
	
	Закрыть(КодВозвратаДиалога.ОК);
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть(КодВозвратаДиалога.Отмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗадержку(Команда)
	
	ИнтеграцияС1СДокументооборот3Клиент.ОчиститьЗадержкуДействия(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НаправитьНовымУчастникам(Команда)
	
	ИсполнениеДействияСНовымиУчастниками = Истина;
	
	ТолькоПросмотр = Ложь;
	Элементы.ЗаписатьИЗакрыть.Видимость = Истина;
	Элементы.ЗаписатьИЗакрыть.КнопкаПоУмолчанию = Истина;
	УстановитьДоступностьИзмененияУчастников();
	УстановитьДоступностьЭлементовФормы();
	
	// Сразу добавим новую строку.
	Для Каждого Этап Из Участники.ПолучитьЭлементы() Цикл
		Если Этап.Недоступно Или (Этап.Функция <> "Performer" И Этап.Функция <> "ReviewingPerson") Тогда
			Продолжить;
		КонецЕсли;
		СтрокаУчастника = Этап.ПолучитьЭлементы().Добавить();
		СтрокаУчастника.ПредставлениеСтроки =
			ИнтеграцияС1СДокументооборот3КлиентСервер.ПредставлениеУчастника(СтрокаУчастника);
		СтрокаУчастника.Функция = Этап.Функция;
		Элементы.Участники.ТекущаяСтрока = СтрокаУчастника.ПолучитьИдентификатор();
		Прервать;
	КонецЦикла;
	
	Элементы.НаправитьНовымУчастникам.Видимость = Ложь;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РазныеСроки(Команда)
	
	Элементы.УчастникиРазныеСроки.Пометка = Не Элементы.УчастникиРазныеСроки.Пометка;
	ИнтеграцияС1СДокументооборот3Клиент.УстановитьОдинаковыйСрокДействияРекурсивно(
		Участники.ПолучитьЭлементы(),
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	
	ИнтеграцияС1СДокументооборот3Клиент.ПереместитьУчастникаДействияВверх(ЭтотОбъект, Ложь, ПоПунктам);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	
	ИнтеграцияС1СДокументооборот3Клиент.ПереместитьУчастникаДействияВниз(ЭтотОбъект, Ложь, ПоПунктам);
	
КонецПроцедуры

&НаКлиенте
Процедура Защищенный(Команда)
	
	ИнтеграцияС1СДокументооборот3Клиент.ИзменитьПризнакУчастникаДействияЗащищенный(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПункт(Команда)
	
	ЭлементыУчастники = Участники.ПолучитьЭлементы();
	
	СтрокаПункта = ЭлементыУчастники.Добавить();
	ДобавитьНовыйПункт(СтрокаПункта, ЭлементыУчастники, БазовоеНаименованиеЭтапа);
	Элементы.Участники.ТекущаяСтрока = СтрокаПункта.ПолучитьИдентификатор();
	
	Если Команда <> Неопределено Тогда
		ОткрытьПункт(Элементы.Участники.ТекущиеДанные, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтветственного(Команда)
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Функция <> "Performer" Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Ответственный = Не ТекущиеДанные.Ответственный;
	ИдентификаторПункта = ТекущиеДанные.ИдентификаторПункта;
	ИдентификаторТекущейСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	Для Каждого Этап Из Участники.ПолучитьЭлементы() Цикл
		Если ИдентификаторПункта <> Этап.ИдентификаторПункта Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого УчастникЭтапа Из Этап.ПолучитьЭлементы() Цикл
			Если УчастникЭтапа.ПолучитьИдентификатор() = ИдентификаторТекущейСтроки Тогда
				Продолжить;
			КонецЕсли;
			УчастникЭтапа.Ответственный = Ложь;
		КонецЦикла;
	КонецЦикла;
	
	Если ТекущиеДанные.Ответственный Тогда
		ЭтапУчастника = ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы();
		ИндексСтроки = ЭтапУчастника.Индекс(ТекущиеДанные);
		Если ИндексСтроки Тогда
			ЭтапУчастника.Сдвинуть(ИндексСтроки, - ИндексСтроки);
		КонецЕсли;
	КонецЕсли;
	
	Элементы.УстановитьОтветственный.Пометка = ТекущиеДанные.Ответственный;
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Клиент

// Заполняет представление сроков в карточке действия.
//
&НаКлиенте
Процедура ЗаполнитьПредставлениеСроков() Экспорт
	
	Для Каждого ЭтапУчастников Из Участники.ПолучитьЭлементы() Цикл
		
		Если ЭтапУчастников.СрокОбщий
				Или ЗначениеЗаполнено(ЭтапУчастников.Срок)
				Или ЗначениеЗаполнено(ЭтапУчастников.СрокДни)
				Или ЗначениеЗаполнено(ЭтапУчастников.СрокЧасы)
				Или ЗначениеЗаполнено(ЭтапУчастников.СрокМинуты) Тогда
			ЭтапУчастников.СрокПредставление =
				ИнтеграцияС1СДокументооборот3КлиентСервер.ПредставлениеСрокаИсполнения(
					ЭтапУчастников.Срок,
					ЭтапУчастников.СрокДни,
					ЭтапУчастников.СрокЧасы,
					ЭтапУчастников.СрокМинуты,
					ИспользоватьДатуИВремяВСрокахЗадач,
					ЭтапУчастников.ВариантУстановкиСрока);
		Иначе
			ЭтапУчастников.СрокПредставление = "";
		КонецЕсли;
		
		Для Каждого УчастникЭтапа Из ЭтапУчастников.ПолучитьЭлементы() Цикл
			
			УчастникЭтапа.СрокПредставление =
				ИнтеграцияС1СДокументооборот3КлиентСервер.ПредставлениеСрокаИсполнения(
					УчастникЭтапа.Срок,
					УчастникЭтапа.СрокДни,
					УчастникЭтапа.СрокЧасы,
					УчастникЭтапа.СрокМинуты,
					ИспользоватьДатуИВремяВСрокахЗадач,
					УчастникЭтапа.ВариантУстановкиСрока);
			
			Для Каждого УчастникДочерний Из УчастникЭтапа.ПолучитьЭлементы() Цикл
				
				УчастникДочерний.СрокПредставление =
					ИнтеграцияС1СДокументооборот3КлиентСервер.ПредставлениеСрокаИсполнения(
						УчастникДочерний.Срок,
						УчастникДочерний.СрокДни,
						УчастникДочерний.СрокЧасы,
						УчастникДочерний.СрокМинуты,
						ИспользоватьДатуИВремяВСрокахЗадач,
						УчастникДочерний.ВариантУстановкиСрока);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПункт(ТекущиеДанные, ТолькоОткрытие = Истина)
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	
	// Настройки.
	ИзменениеРазрешено =
		Не ТолькоПросмотр
		И Не МожноТолькоДобавлятьУчастников
		Или (ТекущиеДанные.Состояние = "Completed")
		Или Не ТолькоОткрытие;
	ПараметрыФормы.Вставить("ИзменениеРазрешено", ИзменениеРазрешено);
	ПараметрыФормы.Вставить("МожноТолькоДобавлятьУчастников", МожноТолькоДобавлятьУчастников);
	ПараметрыФормы.Вставить("ИдентификаторПункта", ТекущиеДанные.ИдентификаторПункта);
	ПараметрыФормы.Вставить("ИспользоватьДатуИВремяВСрокахЗадач", ИспользоватьДатуИВремяВСрокахЗадач);
	
	// Данные.
	ПараметрыФормы.Вставить("Номер", ТекущиеДанные.Номер);
	Если ТекущиеДанные.НаименованиеЭтапа <> БазовоеНаименованиеЭтапа Тогда
		ПараметрыФормы.Вставить("ОписаниеИсполнения", ТекущиеДанные.НаименованиеЭтапа);
	Иначе
		ПараметрыФормы.Вставить("ОписаниеИсполнения", "");
	КонецЕсли;
	ПараметрыФормы.Вставить("Срок", ТекущиеДанные.Срок);
	
	// Автор.
	ПараметрыФормы.Вставить("АвторИсполнения", ТекущиеДанные.Автор);
	ПараметрыФормы.Вставить("АвторИсполненияID", ТекущиеДанные.АвторID);
	ПараметрыФормы.Вставить("АвторИсполненияТип", ТекущиеДанные.АвторТип);
	ПараметрыФормы.Вставить("АвторИсполненияПредставление", ТекущиеДанные.АвторПредставление);
	
	// Контролер.
	ПараметрыФормы.Вставить("Контролер", ТекущиеДанные.Контролер);
	ПараметрыФормы.Вставить("КонтролерID", ТекущиеДанные.КонтролерID);
	ПараметрыФормы.Вставить("КонтролерТип", ТекущиеДанные.КонтролерТип);
	ПараметрыФормы.Вставить("КонтролерПредставление", ТекущиеДанные.КонтролерПредставление);
	ПараметрыФормы.Вставить("ОсновнойОбъектАдресацииКонтролер", ТекущиеДанные.ОсновнойОбъектАдресацииКонтролер);
	ПараметрыФормы.Вставить("ОсновнойОбъектАдресацииКонтролерID", ТекущиеДанные.ОсновнойОбъектАдресацииКонтролерID);
	ПараметрыФормы.Вставить("ОсновнойОбъектАдресацииКонтролерТип", ТекущиеДанные.ОсновнойОбъектАдресацииКонтролерТип);
	ПараметрыФормы.Вставить("ДополнительныйОбъектАдресацииКонтролер",
		ТекущиеДанные.ДополнительныйОбъектАдресацииКонтролер);
	ПараметрыФормы.Вставить("ДополнительныйОбъектАдресацииКонтролерID",
		ТекущиеДанные.ДополнительныйОбъектАдресацииКонтролерID);
	ПараметрыФормы.Вставить("ДополнительныйОбъектАдресацииКонтролерТип",
		ТекущиеДанные.ДополнительныйОбъектАдресацииКонтролерТип);
	
	// Исполнители, проверяющий, срок проверки.
	ИсполнителиИсполнения = Новый Массив;
	Для Каждого УчастникЭтапа Из ТекущиеДанные.ПолучитьЭлементы() Цикл
		ПараметрыУчастника = Новый Структура;
		
		// Данные участника.
		ПараметрыУчастника.Вставить("ИдентификаторИсполнителя", УчастникЭтапа.Идентификатор);
		ПараметрыУчастника.Вставить("ВариантУстановкиСрокаИсполнения", УчастникЭтапа.ВариантУстановкиСрока);
		ПараметрыУчастника.Вставить("Ответственный", УчастникЭтапа.Ответственный);
		
		// Участник.
		ПараметрыУчастника.Вставить("Исполнитель", УчастникЭтапа.Участник);
		ПараметрыУчастника.Вставить("ИсполнительID", УчастникЭтапа.УчастникID);
		ПараметрыУчастника.Вставить("ИсполнительТип", УчастникЭтапа.УчастникТип);
		ПараметрыУчастника.Вставить("ИсполнительПредставление", УчастникЭтапа.УчастникПредставление);
		ПараметрыУчастника.Вставить("ОсновнойОбъектАдресацииИсполнитель",
			УчастникЭтапа.ОсновнойОбъектАдресацииУчастник);
		ПараметрыУчастника.Вставить("ОсновнойОбъектАдресацииИсполнительID",
			УчастникЭтапа.ОсновнойОбъектАдресацииУчастникID);
		ПараметрыУчастника.Вставить("ОсновнойОбъектАдресацииИсполнительТип",
			УчастникЭтапа.ОсновнойОбъектАдресацииУчастникТип);
		ПараметрыУчастника.Вставить("ДополнительныйОбъектАдресацииИсполнитель",
			УчастникЭтапа.ДополнительныйОбъектАдресацииУчастник);
		ПараметрыУчастника.Вставить("ДополнительныйОбъектАдресацииИсполнительID",
			УчастникЭтапа.ДополнительныйОбъектАдресацииУчастникID);
		ПараметрыУчастника.Вставить("ДополнительныйОбъектАдресацииИсполнительТип",
			УчастникЭтапа.ДополнительныйОбъектАдресацииУчастникТип);
		
		// Срок.
		ПараметрыУчастника.Вставить("СрокИсполнения", УчастникЭтапа.Срок);
		ПараметрыУчастника.Вставить("СрокИсполненияДни", УчастникЭтапа.СрокДни);
		ПараметрыУчастника.Вставить("СрокИсполненияЧасы", УчастникЭтапа.СрокЧасы);
		ПараметрыУчастника.Вставить("СрокИсполненияМинуты", УчастникЭтапа.СрокМинуты);
		
		// Прочие данные.
		ПараметрыУчастника.Вставить("Функция", УчастникЭтапа.Функция);
		ПараметрыУчастника.Вставить("Состояние", УчастникЭтапа.Состояние);
		ПараметрыУчастника.Вставить("НомерКартинки", УчастникЭтапа.НомерКартинки);
		ПараметрыУчастника.Вставить("Результат", УчастникЭтапа.Результат);
		
		ИсполнителиИсполнения.Добавить(ПараметрыУчастника);
	КонецЦикла;
	ПараметрыФормы.Вставить("ИсполнителиИсполнения", ИсполнителиИсполнения);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ТолькоОткрытие", ТолькоОткрытие);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОбработатьПослеИзмененияПункта",
		ЭтотОбъект,
		ПараметрыОповещения);
	
	ОткрытьФорму(
		"Обработка.ИнтеграцияС1СДокументооборот3.Форма.НастройкаДочернегоИсполнения",
		ПараметрыФормы,,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Переносит изменения пункта в действие.
//
// Параметры:
//   РезультатИзменения - Структура:
//     * АвторИсполнения - Строка
//     * АвторИсполненияID - Строка
//     * АвторИсполненияПредставление - Строка
//     * АвторИсполненияТип - Строка
//     * ДополнительныйОбъектАдресацииКонтролер - Строка
//     * ДополнительныйОбъектАдресацииКонтролерID - Строка
//     * ДополнительныйОбъектАдресацииКонтролерТип - Строка
//     * ИдентификаторПункта - Строка
//     * ИсполнителиИсполнения - Массив из Структура:
//       ** ВариантУстановкиСрока - Строка
//       ** ДополнительныйОбъектАдресацииУчастник - Строка
//       ** ДополнительныйОбъектАдресацииУчастникID - Строка
//       ** ДополнительныйОбъектАдресацииУчастникТип - Строка
//       ** Идентификатор - Строка
//       ** ОсновнойОбъектАдресацииУчастник - Строка
//       ** ОсновнойОбъектАдресацииУчастникID - Строка
//       ** ОсновнойОбъектАдресацииУчастникТип - Строка
//       ** Ответственный - Булево
//       ** Срок - Дата
//       ** СрокДни - Число
//       ** СрокМинуты - Число
//       ** СрокЧасы - Число
//       ** Участник - Строка
//       ** УчастникID - Строка
//       ** УчастникПредставление - Строка
//       ** УчастникТип - Строка
//       ** Функция - Строка
//     * Контролер - Строка
//     * КонтролерID - Строка
//     * КонтролерПредставление - Строка
//     * КонтролерТип - Строка
//     * Номер - Строка
//     * ОписаниеИсполнения - Строка
//     * ОсновнойОбъектАдресацииКонтролер - Строка
//     * ОсновнойОбъектАдресацииКонтролерID - Строка
//     * ОсновнойОбъектАдресацииКонтролерТип - Строка
//     * Срок - Дата
//   КонтекстВыполнения - Структура:
//     * ТолькоОткрытие - Булево
//
&НаКлиенте
Процедура ОбработатьПослеИзмененияПункта(РезультатИзменения, КонтекстВыполнения) Экспорт
	
	Если РезультатИзменения = Неопределено
		Или РезультатИзменения = КодВозвратаДиалога.Отмена Тогда
			Если Не КонтекстВыполнения.ТолькоОткрытие Тогда
				Участники.ПолучитьЭлементы().Удалить(Участники.НайтиПоИдентификатору(Элементы.Участники.ТекущаяСтрока));
			КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Для Каждого Пункт Из Участники.ПолучитьЭлементы() Цикл
		Если Пункт.ИдентификаторПункта <> РезультатИзменения.ИдентификаторПункта Тогда
			Продолжить;
		КонецЕсли;
		
		// Данные.
		Пункт.Номер = РезультатИзменения.Номер;
		Пункт.НаименованиеЭтапа = РезультатИзменения.ОписаниеИсполнения;
		Пункт.ПредставлениеСтроки = СтрШаблон("%1. %2", Пункт.Номер, Пункт.НаименованиеЭтапа);
		Пункт.Срок = РезультатИзменения.Срок;
		
		// Автор.
		Пункт.Автор = РезультатИзменения.АвторИсполнения;
		Пункт.АвторID = РезультатИзменения.АвторИсполненияID;
		Пункт.АвторТип = РезультатИзменения.АвторИсполненияТип;
		Пункт.АвторПредставление = РезультатИзменения.АвторИсполненияПредставление;
		
		// Контролер.
		Пункт.Контролер = РезультатИзменения.Контролер;
		Пункт.КонтролерID = РезультатИзменения.КонтролерID;
		Пункт.КонтролерТип = РезультатИзменения.КонтролерТип;
		Пункт.КонтролерПредставление = РезультатИзменения.КонтролерПредставление;
		Пункт.ОсновнойОбъектАдресацииКонтролер = РезультатИзменения.ОсновнойОбъектАдресацииКонтролер;
		Пункт.ОсновнойОбъектАдресацииКонтролерID = РезультатИзменения.ОсновнойОбъектАдресацииКонтролерID;
		Пункт.ОсновнойОбъектАдресацииКонтролерТип = РезультатИзменения.ОсновнойОбъектАдресацииКонтролерТип;
		Пункт.ДополнительныйОбъектАдресацииКонтролер = РезультатИзменения.ДополнительныйОбъектАдресацииКонтролер;
		Пункт.ДополнительныйОбъектАдресацииКонтролерID = РезультатИзменения.ДополнительныйОбъектАдресацииКонтролерID;
		Пункт.ДополнительныйОбъектАдресацииКонтролерТип = РезультатИзменения.ДополнительныйОбъектАдресацииКонтролерТип;
		
		// Исполнители, проверяющий, срок проверки.
		УчастникиЭтапа = Пункт.ПолучитьЭлементы();
		УчастникиЭтапа.Очистить();
		Для Каждого Участник Из РезультатИзменения.ИсполнителиИсполнения Цикл
			УчастникЭтапа = УчастникиЭтапа.Добавить();
			
			// Данные участника.
			УчастникЭтапа.Идентификатор = Участник.Идентификатор;
			УчастникЭтапа.ВариантУстановкиСрока = Участник.ВариантУстановкиСрока;
			УчастникЭтапа.Ответственный = Участник.Ответственный;
			
			// Участник.
			УчастникЭтапа.Участник = Участник.Участник;
			УчастникЭтапа.УчастникID = Участник.УчастникID;
			УчастникЭтапа.УчастникТип = Участник.УчастникТип;
			УчастникЭтапа.УчастникПредставление = Участник.УчастникПредставление;
			УчастникЭтапа.ОсновнойОбъектАдресацииУчастник = Участник.ОсновнойОбъектАдресацииУчастник;
			УчастникЭтапа.ОсновнойОбъектАдресацииУчастникID = Участник.ОсновнойОбъектАдресацииУчастникID;
			УчастникЭтапа.ОсновнойОбъектАдресацииУчастникТип = Участник.ОсновнойОбъектАдресацииУчастникТип;
			УчастникЭтапа.ДополнительныйОбъектАдресацииУчастник = Участник.ДополнительныйОбъектАдресацииУчастник;
			УчастникЭтапа.ДополнительныйОбъектАдресацииУчастникID = Участник.ДополнительныйОбъектАдресацииУчастникID;
			УчастникЭтапа.ДополнительныйОбъектАдресацииУчастникТип = Участник.ДополнительныйОбъектАдресацииУчастникТип;
			
			// Срок.
			УчастникЭтапа.Срок = Участник.Срок;
			УчастникЭтапа.СрокДни = Участник.СрокДни;
			УчастникЭтапа.СрокЧасы = Участник.СрокЧасы;
			УчастникЭтапа.СрокМинуты = Участник.СрокМинуты;
			
			// Прочие данные.
			УчастникЭтапа.Функция = Участник.Функция;
			УчастникЭтапа.ИдентификаторПункта = Пункт.Идентификатор;
		КонецЦикла;
	КонецЦикла;
	
	ОбновитьПредставленияВДеревеУчастников(Участники, ПоПунктам);
	ЗаполнитьПредставлениеСроков();
	ИнтеграцияС1СДокументооборот3Клиент.УстановитьПометкуКнопкиРазныеСрокиДействияРекурсивно(
		Участники.ПолучитьЭлементы(),
		Элементы.УчастникиРазныеСроки);
	
	// Раскрыть все дерево.
	ИнтеграцияС1СДокументооборот3Клиент.РазвернутьДеревоУчастниковДействия(ЭтотОбъект);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПолеКонтролер()
	
	Контролер = "";
	КонтролерID = "";
	КонтролерТип = "";
	
	ОсновнойОбъектАдресацииКонтролер = "";
	ОсновнойОбъектАдресацииКонтролерID = "";
	ОсновнойОбъектАдресацииКонтролерТип = "";
	
	ДополнительныйОбъектАдресацииКонтролер = "";
	ДополнительныйОбъектАдресацииКонтролерID = "";
	ДополнительныйОбъектАдресацииКонтролерТип = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Ответ, ПараметрыОповещения) Экспорт
	
	ЗаписатьИЗакрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектРезолюцииЗавершениеВвода(ВведенныйТекст, ТекущиеДанные) Экспорт
	
	Если ВведенныйТекст = Неопределено
			Или ВведенныйТекст = КодВозвратаДиалога.Отмена
			Или ТипЗнч(ВведенныйТекст) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ПроектРезолюции = ВведенныйТекст;
	ТекущиеДанные.ПредставлениеРезолюции = ВведенныйТекст;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Функция ПунктБезУчастников(Пункт)
	
	ЕстьУчастники = Ложь;
	Для Каждого Строка Из Пункт.ПолучитьЭлементы() Цикл
		Если ЗначениеЗаполнено(Строка.УчастникID) Тогда
			ЕстьУчастники = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Не ЕстьУчастники;
	
КонецФункции

// Снимает отметку Ответственный для участника действия исполнения, если он остается один.
//
&НаКлиенте
Процедура УбратьОтветственногоУчастника()
	
	Для Каждого СтрокаЭтапа Из Участники.ПолучитьЭлементы() Цикл
		Если СтрокаЭтапа.Функция <> "Performer" Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементыУчастников = СтрокаЭтапа.ПолучитьЭлементы();
		КоличествоЭлементов = ЭлементыУчастников.Количество();
		Если КоличествоЭлементов > 1 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаУчастника Из ЭлементыУчастников Цикл
			Если СтрокаУчастника.Ответственный Тогда
				СтрокаУчастника.Ответственный = Ложь;
				Модифицированность = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементовФормы() Экспорт
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийРодитель = ТекущиеДанные.ПолучитьРодителя();
	Если ТекущийРодитель = Неопределено Тогда
		ЭлементыРодителя = Участники.ПолучитьЭлементы();
	Иначе
		ЭлементыРодителя = ТекущийРодитель.ПолучитьЭлементы();
	КонецЕсли;
	Индекс = ЭлементыРодителя.Индекс(ТекущиеДанные);
	ЭтоПервыйЭлемент = (Индекс = 0);
	ЭтоПоследнийЭлемент = (Индекс = (ЭлементыРодителя.Количество() - 1));
	
	ПредыдущийДоступен = Ложь;
	Если Не ЭтоПервыйЭлемент Тогда
		ПредыдущийЭлемент = ЭлементыРодителя.Получить(Индекс - 1);
		ПредыдущийДоступен = Не ПредыдущийЭлемент.Недоступно;
	КонецЕсли;
	
	СледующийДоступен = Ложь;
	Если Не ЭтоПоследнийЭлемент Тогда
		СледующийЭлемент = ЭлементыРодителя.Получить(Индекс + 1);
		СледующийДоступен = Не СледующийЭлемент.Недоступно
			И (СледующийЭлемент.Функция <> "PerformanceResultProcessor");
	КонецЕсли;
	
	КоличествоЭлементовРодителя = ЭлементыРодителя.Количество();
	ОтветственныйУстановленНедоступен = Ложь;
	Для каждого Элемент Из ЭлементыРодителя Цикл
		Если Элемент.Ответственный И Элемент.Недоступно Тогда
			ОтветственныйУстановленНедоступен = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Элементы.УстановитьОтветственный.Пометка = Ложь;
	
	Если ТекущиеДанные.Функция = "PerformanceResultProcessor" Тогда
		ТолькоПросмотрСтроки = ТекущиеДанные.ЭтоЭтап Или ТекущиеДанные.Недоступно;
		Элементы.ПредставлениеСтроки.ТолькоПросмотр = ТолькоПросмотрСтроки;
		Элементы.СрокПредставление.ТолькоПросмотр = ТолькоПросмотрСтроки;
		Элементы.ЕстьОсобоеНаименованиеОписание.ТолькоПросмотр = ТолькоПросмотрСтроки;
		Элементы.НаименованиеЗадачи.ТолькоПросмотр = ТолькоПросмотрСтроки;
		Элементы.Описание.ТолькоПросмотр = ТолькоПросмотрСтроки;
		Элементы.ПроектРезолюции.ТолькоПросмотр = Истина;
		Элементы.УстановитьОтветственный.Доступность = Ложь;
		
		Элементы.Добавить.Доступность = Ложь;
		Элементы.ПереместитьВверх.Доступность = Ложь;
		Элементы.ПереместитьВниз.Доступность = Ложь;
		Элементы.Удалить.Доступность = Не ТолькоПросмотрСтроки;
		
	ИначеЕсли ТекущиеДанные.ЭтоЭтап Тогда
		
		Элементы.ПредставлениеСтроки.ТолькоПросмотр = Истина;
		Элементы.СрокПредставление.ТолькоПросмотр = Истина;
		Элементы.ЕстьОсобоеНаименованиеОписание.ТолькоПросмотр = Истина;
		Элементы.НаименованиеЗадачи.ТолькоПросмотр = Истина;
		Элементы.Описание.ТолькоПросмотр = Истина;
		Элементы.ПроектРезолюции.ТолькоПросмотр = Истина;
		Элементы.УстановитьОтветственный.Доступность = Ложь;
		
		Элементы.Добавить.Доступность = Не ТекущиеДанные.Недоступно Или МожноТолькоДобавлятьУчастников;
		Элементы.ПереместитьВверх.Доступность = ПоПунктам И Не ТекущиеДанные.Недоступно И ПредыдущийДоступен;
		Элементы.ПереместитьВниз.Доступность = ПоПунктам И Не ТекущиеДанные.Недоступно И СледующийДоступен;
		Элементы.Удалить.Доступность = Не ТекущиеДанные.Недоступно;
		
	Иначе
		
		// Исполнитель.
		Если ТекущийРодитель <> Неопределено Тогда
			ЗапретДобавленияСтроки = ТекущийРодитель.Недоступно И Не МожноТолькоДобавлятьУчастников
				Или ТекущиеДанные.ЭтоДочернийУчастник;
		Иначе
			ЗапретДобавленияСтроки = ТекущиеДанные.Недоступно И Не МожноТолькоДобавлятьУчастников
				Или ТекущиеДанные.ЭтоДочернийУчастник;
		КонецЕсли;
		
		ТолькоПросмотрСтроки = ТекущиеДанные.Недоступно
			Или ТекущиеДанные.ЭтоДочернийУчастник
			Или (ТекущиеДанные.Состояние = "Completed");
		
		Элементы.ПредставлениеСтроки.ТолькоПросмотр = ТолькоПросмотрСтроки;
		Элементы.СрокПредставление.ТолькоПросмотр = ТолькоПросмотрСтроки
			Или МожноТолькоДобавлятьУчастников И Не ЭтоПервыйЭлемент;
		Элементы.ЕстьОсобоеНаименованиеОписание.ТолькоПросмотр = ТолькоПросмотрСтроки;
		Элементы.НаименованиеЗадачи.ТолькоПросмотр = ТолькоПросмотрСтроки;
		Элементы.Описание.ТолькоПросмотр = ТолькоПросмотрСтроки;
		
		Элементы.Добавить.Доступность = Не ЗапретДобавленияСтроки;
		
		Элементы.ПереместитьВверх.Доступность = Не ЭтоПервыйЭлемент
			И Не ТолькоПросмотрСтроки
			И ПредыдущийДоступен;
		Элементы.ПереместитьВниз.Доступность = Не ЭтоПоследнийЭлемент
			И Не ТолькоПросмотрСтроки
			И СледующийДоступен;
		Элементы.Удалить.Доступность = Не ТолькоПросмотрСтроки;
		
		Элементы.ПредставлениеСтроки.КнопкаВыбора = Истина;
		
		Элементы.ПроектРезолюции.ТолькоПросмотр = Истина;
		
		Элементы.УстановитьОтветственный.Доступность = Не ТолькоПросмотрСтроки И Не ОтветственныйУстановленНедоступен
			И ТекущиеДанные.Состояние <> "Completed"
			И ТекущиеДанные.Функция = "Performer"
			И КоличествоЭлементовРодителя > 1;
		Элементы.УстановитьОтветственный.Пометка = ТекущиеДанные.Ответственный;
	КонецЕсли;
	
	Элементы.КонтекстДобавить.Доступность = Элементы.Добавить.Доступность;
	Элементы.КонтекстДобавитьПункт.Доступность = Элементы.УчастникиДобавитьПункт.Доступность;
	Элементы.КонтекстУдалить.Доступность = Элементы.Удалить.Доступность;
	Элементы.КонтекстУстановитьОтветственного.Доступность = Элементы.УстановитьОтветственный.Доступность;
	Элементы.КонтекстУстановитьОтветственного.Пометка = Элементы.УстановитьОтветственный.Пометка;
	
КонецПроцедуры

#КонецОбласти

#Область Сервер

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьНовыйПункт(ЭтапУчастников, ЭтапыУчастников, БазовоеНаименованиеЭтапа)
	
	ЭтапУчастников.Функция = "Performer";
	ЭтапУчастников.НаименованиеЭтапа = БазовоеНаименованиеЭтапа;
	ЭтапУчастников.Номер = Строка(ЭтапыУчастников.Количество());
	ЭтапУчастников.ЭтоЭтап = Истина;
	ЭтапУчастников.ЭтоПункт = Истина;
	ЭтапУчастников.Идентификатор = Строка(Новый УникальныйИдентификатор);
	ЭтапУчастников.ИдентификаторПункта = ЭтапУчастников.Идентификатор;
	ЭтапУчастников.ПредставлениеСтроки = СтрШаблон("%1. %2", ЭтапУчастников.Номер, ЭтапУчастников.НаименованиеЭтапа);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьОтветВебСервисаНаПолучениеДействия(ДействиеXDTO)
	
	// Заполним общие данные действия.
	ИнтеграцияС1СДокументооборот3.ОбработатьОтветВебСервисаНаПолучениеДействия(ЭтотОбъект, ДействиеXDTO);
	
	// Заполним данные действия исполнения.
	ПоПунктам = ДействиеXDTO.byPoints;
	ПодписыватьРезолюцииЭП = ДействиеXDTO.signResolutionsWithDS;
	ИзменениеДействияРазрешено = ДействиеXDTO.changeAllowed;
	ИнтеграцияС1СДокументооборот3.УчастникДействияДО(ЭтотОбъект, ДействиеXDTO.controller, "Контролер");
	СостояниеДействия = "";
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ДействиеXDTO, "state") Тогда
		СостояниеДействия = ДействиеXDTO.state;
	КонецЕсли;
	
	// Обновим форму действия.
	ОбновитьДеревоУчастниковПоОбъекту(ДействиеXDTO);
	ИнтеграцияС1СДокументооборот3.УстановитьВидимостьУсловийУчастниковДействия(ЭтотОбъект, ДействиеXDTO);
	ИнтеграцияС1СДокументооборот3.ЗаполнитьСостоянияИРезультатыВФормеДействия(ЭтотОбъект, ДействиеXDTO);
	УстановитьДоступностьИзмененияУчастников();
	Элементы.ИсполнениеПоПунктам.Пометка = ПоПунктам;
	
	ИнтеграцияС1СДокументооборот3.УстановитьВидимостьНаправленияНовымУчастникамДействия(
		ЭтотОбъект,
		СостояниеДействия,
		ДействиеXDTO.permissionRows.rows);
	
КонецПроцедуры

// Заполняет дерево участников по объекту.
//
&НаСервере
Процедура ОбновитьДеревоУчастниковПоОбъекту(ДействиеXDTO)
	
	// Перенесем Срок исполнения из предмета, если не задано в настройках
	СрокИсполненияПредмета = ДействиеXDTO.targetDueDate;
	
	ЭтапыУчастников = Участники.ПолучитьЭлементы();
	ЭтапыУчастников.Очистить();
	
	ВсеИсполнители = ДействиеXDTO.participantRows.rows;
	
	Если ПоПунктам Тогда
		
		Пункты = ДействиеXDTO.pointRows.rows;
		
		// Добавляем все пункты в таблицу участников.
		Для Каждого СтрокаЭтапа Из Пункты Цикл
			ЭтапУчастников = ЭтапыУчастников.Добавить();
			ИнтеграцияС1СДокументооборот3.ЗаполнитьСтрокуУчастникаДействияИзXDTO(ЭтапУчастников, СтрокаЭтапа);
			ЭтапУчастников.Функция = "Performer";
			ЭтапУчастников.НаименованиеЭтапа = СтрокаЭтапа.description;
			ЭтапУчастников.ЭтоЭтап = Истина;
			ЭтапУчастников.ЭтоПункт = Истина;
			ЭтапУчастников.ИдентификаторПункта = ЭтапУчастников.Идентификатор;
			ЭтапУчастников.ПредставлениеСтроки = СтрШаблон("%1. %2", ЭтапУчастников.Номер, ЭтапУчастников.НаименованиеЭтапа);
		КонецЦикла;
		
		Если Пункты.Количество() = 0 Тогда
			ЭтапУчастников = ЭтапыУчастников.Добавить();
			ДобавитьНовыйПункт(ЭтапУчастников, ЭтапыУчастников, БазовоеНаименованиеЭтапа);
		КонецЕсли;
		
		Для Каждого СтрокаЭтапа Из ЭтапыУчастников Цикл
			УчастникиЭтапа = СтрокаЭтапа.ПолучитьЭлементы();
			
			УчастникЭтапа = Неопределено;
			Для Каждого Участник Из ВсеИсполнители Цикл
				Если (ИнтеграцияС1СДокументооборот3КлиентСервер.ИдентификаторЗаполнен(Участник.pointID)
							И Участник.pointID <> СтрокаЭтапа.Идентификатор)
						Или (Не ИнтеграцияС1СДокументооборот3КлиентСервер.ИдентификаторЗаполнен(Участник.pointID)
							И Участник.participantFunction <> СтрокаЭтапа.Функция) Тогда
					Продолжить;
				КонецЕсли;
				
				УчастникЭтапа = УчастникиЭтапа.Добавить();
				ИнтеграцияС1СДокументооборот3.ЗаполнитьСтрокуУчастникаДействияИзXDTO(УчастникЭтапа, Участник);
				Если ЗначениеЗаполнено(Участник.participantFunction) Тогда
					УчастникЭтапа.Функция = Участник.participantFunction;
				Иначе
					УчастникЭтапа.Функция = "Performer";
				КонецЕсли;
				
				ЭтапУчастников.ИдентификаторПункта = СтрокаЭтапа.Идентификатор;
				ОбновитьПолеЕстьОсобоеНаименованиеОписание(УчастникЭтапа);
			КонецЦикла;
		КонецЦикла;
		
	Иначе
		
		// Рассмотрение.
		ЭтапУчастников = ЭтапыУчастников.Добавить();
		ЭтапУчастников.Функция = "ReviewingPerson";
		ЭтапУчастников.НаименованиеЭтапа = НСтр("ru = 'Рассмотрение'");
		ЭтапУчастников.ЭтоЭтап = Истина;
		ЭтапУчастников.Идентификатор = "00000000-0000-0000-0000-000000000000";
		ЭтапУчастников.ИдентификаторПункта = "00000000-0000-0000-0000-000000000000";
		
		УчастникиЭтапа = ЭтапУчастников.ПолучитьЭлементы();
		УчастникЭтапа = Неопределено;
		
		Рассматривающие = ИнтеграцияС1СДокументооборот3.УчастникиДействияСФункцией(ВсеИсполнители, "ReviewingPerson");
		Для Каждого Рассматривающий Из Рассматривающие Цикл
			УчастникЭтапа = УчастникиЭтапа.Добавить();
			ИнтеграцияС1СДокументооборот3.ЗаполнитьСтрокуУчастникаДействияИзXDTO(УчастникЭтапа, Рассматривающий);
			УчастникЭтапа.Функция = "ReviewingPerson";
			ОбновитьПолеЕстьОсобоеНаименованиеОписание(УчастникЭтапа);
			
			ПодчиненныеУчастники = УчастникЭтапа.ПолучитьЭлементы();
			ДочерниеУчастники = ИнтеграцияС1СДокументооборот3.ДочерниеУчастникиДействия(ВсеИсполнители, Рассматривающий.id);
			Для Каждого УчастникПодчиненный Из ДочерниеУчастники Цикл
				ЭлементУчастникДочерний = ПодчиненныеУчастники.Добавить();
				ИнтеграцияС1СДокументооборот3.ЗаполнитьСтрокуУчастникаДействияИзXDTO(
					ЭлементУчастникДочерний,
					УчастникПодчиненный);
				ЭлементУчастникДочерний.ЭтоДочернийУчастник = Истина;
				ЭлементУчастникДочерний.Функция = УчастникПодчиненный.participantFunction;
				
				ОбновитьПолеЕстьОсобоеНаименованиеОписание(ЭлементУчастникДочерний);
			КонецЦикла;
		КонецЦикла;
		
		// Если участника нет, то добавляем пустую строку.
		Если УчастникЭтапа = Неопределено Тогда
			УчастникЭтапа = УчастникиЭтапа.Добавить();
			УчастникЭтапа.Функция = ЭтапУчастников.Функция;
			УчастникЭтапа.Идентификатор = Строка(Новый УникальныйИдентификатор);
			Если ЗначениеЗаполнено(СрокИсполненияПредмета) Тогда
				УчастникЭтапа.Срок = СрокИсполненияПредмета;
				УчастникЭтапа.ВариантУстановкиСрока = "ExactDate";
			КонецЕсли;
		КонецЕсли;
		
		// Исполнение.
		ЭтапУчастников = ЭтапыУчастников.Добавить();
		ЭтапУчастников.Функция = "Performer";
		ЭтапУчастников.НаименованиеЭтапа = НСтр("ru = 'Исполнение'");
		ЭтапУчастников.ЭтоЭтап = Истина;
		ЭтапУчастников.Идентификатор = "00000000-0000-0000-0000-000000000000";
		ЭтапУчастников.ИдентификаторПункта = "00000000-0000-0000-0000-000000000000";
		
		УчастникиЭтапа = ЭтапУчастников.ПолучитьЭлементы();
		УчастникЭтапа = Неопределено;
		
		Исполнители = ИнтеграцияС1СДокументооборот3.УчастникиДействияСФункцией(ВсеИсполнители, "Performer");
		Для Каждого Участник Из Исполнители Цикл
			УчастникЭтапа = УчастникиЭтапа.Добавить();
			ИнтеграцияС1СДокументооборот3.ЗаполнитьСтрокуУчастникаДействияИзXDTO(УчастникЭтапа, Участник);
			УчастникЭтапа.Функция = "Performer";
			ОбновитьПолеЕстьОсобоеНаименованиеОписание(УчастникЭтапа);
		КонецЦикла;
		
		// Если участника нет, то добавляем пустую строку.
		Если УчастникЭтапа = Неопределено Тогда
			УчастникЭтапа = УчастникиЭтапа.Добавить();
			УчастникЭтапа.Функция = ЭтапУчастников.Функция;
			УчастникЭтапа.Идентификатор = Строка(Новый УникальныйИдентификатор);
			Если ЗначениеЗаполнено(СрокИсполненияПредмета) Тогда
				УчастникЭтапа.Срок = СрокИсполненияПредмета;
				УчастникЭтапа.ВариантУстановкиСрока = "ExactDate";
			КонецЕсли;
		КонецЕсли;
		
		// Участники обрабатывающие результат.
		ЭтапУчастников = ЭтапыУчастников.Добавить();
		ЭтапУчастников.Функция = "PerformanceResultProcessor";
		ЭтапУчастников.НаименованиеЭтапа = НСтр("ru = 'Обрабатывающий результат'");
		ЭтапУчастников.ЭтоЭтап = Истина;
		ЭтапУчастников.Идентификатор = "00000000-0000-0000-0000-000000000000";
		ЭтапУчастников.ИдентификаторПункта = "00000000-0000-0000-0000-000000000000";
		
		УчастникиЭтапа = ЭтапУчастников.ПолучитьЭлементы();
		УчастникЭтапа = Неопределено;
		
		УчастникОбрабатывающийРезультат = ИнтеграцияС1СДокументооборот3.УчастникиДействияСФункцией(
			ВсеИсполнители,
			"PerformanceResultProcessor");
		Если УчастникОбрабатывающийРезультат.Количество() > 0 Тогда
			Для Каждого Участник Из УчастникОбрабатывающийРезультат Цикл
				УчастникЭтапа = УчастникиЭтапа.Добавить();
				ИнтеграцияС1СДокументооборот3.ЗаполнитьСтрокуУчастникаДействияИзXDTO(УчастникЭтапа, Участник);
				УчастникЭтапа.Функция = "PerformanceResultProcessor";
			КонецЦикла;
		Иначе
			УчастникЭтапа = УчастникиЭтапа.Добавить();
			УчастникЭтапа.Функция = ЭтапУчастников.Функция;
			УчастникЭтапа.Идентификатор = Строка(Новый УникальныйИдентификатор);
			Если ЗначениеЗаполнено(СрокИсполненияПредмета) Тогда
				УчастникЭтапа.Срок = СрокИсполненияПредмета;
				УчастникЭтапа.ВариантУстановкиСрока = "ExactDate";
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьВидимостьДоступностьПолейПоПунктам(ДействиеXDTO);
	Команды.РазныеСроки.Подсказка = ИнтеграцияС1СДокументооборот3.ПодсказкаКнопкиРазныеСрокиДействия(ПоПунктам, Ложь);
	ОбновитьПредставленияВДеревеУчастников(Участники, ПоПунктам);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОбъектПоДеревуУчастников(Прокси, ДействиеXDTO)
	
	ДействиеXDTO.participantRows = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
		Прокси,
		"DMActionPerformanceParticipantRows");
	УчастникиXDTO = ДействиеXDTO.participantRows.rows; // СписокXDTO
	ДействиеXDTO.pointRows = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
		Прокси,
		"DMActionPerformancePointRows");
	ПунктыXDTO = ДействиеXDTO.pointRows.rows; // СписокXDTO
	
	ЕстьИсполняющиеУчастники = Ложь;
	Для Каждого ЭлементЭтап Из Участники.ПолучитьЭлементы() Цикл
		
		ИдентификаторПункта = "00000000-0000-0000-0000-000000000000";
		Если ПоПунктам Тогда
			// Для стандартного этапа меняем идентификатор, если заданы другие.
			Если ЭлементЭтап.Идентификатор = "00000000-0000-0000-0000-000000000000" Тогда
				ЭлементЭтап.Идентификатор = Строка(Новый УникальныйИдентификатор);
			КонецЕсли;
			
			ЭтапXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
				Прокси,
				"DMActionPerformancePointRow");
			ИнтеграцияС1СДокументооборот3.ЗаполнитьСтрокуXDTOИзУчастникаДействия(Прокси, ЭтапXDTO, ЭлементЭтап);
			ЭтапXDTO.description = ЭлементЭтап.НаименованиеЭтапа;
			ПунктыXDTO.Добавить(ЭтапXDTO);
			ИдентификаторПункта = ЭлементЭтап.Идентификатор;
		КонецЕсли;
		
		Для Каждого ЭлементУчастник Из ЭлементЭтап.ПолучитьЭлементы() Цикл
			
			Если Не ЗначениеЗаполнено(ЭлементУчастник.УчастникID) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПоПунктам Тогда
				Для Каждого СтрокаXDTO Из УчастникиXDTO Цикл
					Если ЭлементУчастник.УчастникID = СтрокаXDTO.participant.objectID.id
							И ЭлементУчастник.УчастникТип = СтрокаXDTO.participant.objectID.type
							И ЭлементУчастник.Функция = СтрокаXDTO.participantFunction
							И ИдентификаторПункта = СтрокаXDTO.pointID
							И ((ЭлементУчастник.Защищенный = Истина И СтрокаXDTO.protected = Ложь)
								Или ЭлементУчастник.Защищенный = Ложь) Тогда
						ВызватьИсключение СтрШаблон(
							НСтр("ru = 'В пункте ""%1"" повторяется участник: %2.
								|Удалите дубли или установите участнику признак ""Защищенный""'"),
							ЭлементЭтап.НаименованиеЭтапа, ЭлементУчастник.УчастникПредставление);
					КонецЕсли;
				КонецЦикла;
			Иначе
				Для Каждого СтрокаXDTO Из УчастникиXDTO Цикл
					Если ЭлементУчастник.УчастникID = СтрокаXDTO.participant.objectID.id
							И ЭлементУчастник.УчастникТип = СтрокаXDTO.participant.objectID.type
							И ЭлементЭтап.Функция = СтрокаXDTO.participantFunction
							И ЭлементУчастник.ВышестоящийУчастник = СтрокаXDTO.higherLevelParticipant
							И ЭлементУчастник.НаименованиеЗадачи = СтрокаXDTO.taskDescription
							И ЭлементУчастник.Описание = СтрокаXDTO.description
							И ((ЭлементУчастник.Защищенный = Истина И СтрокаXDTO.protected = Ложь)
								Или ЭлементУчастник.Защищенный = Ложь) Тогда
						ВызватьИсключение СтрШаблон(
							НСтр("ru = 'В этапе ""%1"" повторяется участник: %2.
								|Удалите дубли, укажите особое описание или установите участнику признак ""Защищенный""'"),
							ЭлементЭтап.НаименованиеЭтапа ,ЭлементУчастник.УчастникПредставление);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			УчастникXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
				Прокси,
				"DMActionPerformanceParticipantRow");
			ИнтеграцияС1СДокументооборот3.ЗаполнитьСтрокуXDTOИзУчастникаДействия(Прокси, УчастникXDTO, ЭлементУчастник);
			Если ЗначениеЗаполнено(ЭлементУчастник.Функция) Тогда
				УчастникXDTO.participantFunction = ЭлементУчастник.Функция;
			Иначе
				УчастникXDTO.participantFunction = ЭлементЭтап.Функция;
			КонецЕсли;
			УчастникXDTO.pointID = ИдентификаторПункта;
			УчастникиXDTO.Добавить(УчастникXDTO);
			
			Если Не ИнтеграцияС1СДокументооборот3КлиентСервер.ЭтоФункцияОбработатьРезультат(
					УчастникXDTO.participantFunction) Тогда
				ЕстьИсполняющиеУчастники = Истина;
			КонецЕсли;
			
			Для Каждого ЭлементУчастникДочерний Из ЭлементУчастник.ПолучитьЭлементы() Цикл
				
				Если Не ЗначениеЗаполнено(ЭлементУчастникДочерний.УчастникID) Тогда
					Продолжить;
				КонецЕсли;
				
				Для Каждого СтрокаXDTO Из УчастникиXDTO Цикл
					Если ЭлементУчастникДочерний.УчастникID = СтрокаXDTO.participant.objectID.id
							И ЭлементУчастникДочерний.УчастникТип = СтрокаXDTO.participant.objectID.type
							И ЭлементЭтап.Функция = СтрокаXDTO.participantFunction
							И ЭлементУчастникДочерний.ВышестоящийУчастник = СтрокаXDTO.higherLevelParticipant
							И ЭлементУчастникДочерний.НаименованиеЗадачи = СтрокаXDTO.taskDescription
							И ЭлементУчастникДочерний.Описание = СтрокаXDTO.description
							И ((ЭлементУчастникДочерний.Защищенный = Истина И СтрокаXDTO.protected = Ложь)
								Или ЭлементУчастникДочерний.Защищенный = Ложь) Тогда
						ВызватьИсключение СтрШаблон(
							НСтр("ru = 'В этапе ""%1"" повторяется участник: %2.
								|Удалите дубли, укажите особое описание или установите участнику признак ""Защищенный""'"),
							ЭлементЭтап.НаименованиеЭтапа ,ЭлементУчастникДочерний.УчастникПредставление);
					КонецЕсли;
				КонецЦикла;
				
				УчастникXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
					Прокси,
					"DMActionPerformanceParticipantRow");
				ИнтеграцияС1СДокументооборот3.ЗаполнитьСтрокуXDTOИзУчастникаДействия(
					Прокси,
					УчастникXDTO,
					ЭлементУчастникДочерний);
				УчастникXDTO.participantFunction = ЭлементУчастникДочерний.Функция;
				УчастникиXDTO.Добавить(УчастникXDTO);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Если заполнен только "Обрабатывающий результат", то не сохраняем его.
	Если Не ЕстьИсполняющиеУчастники Тогда
		УчастникиXDTO.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПолеЕстьОсобоеНаименованиеОписание(Строка)
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Строка.ЕстьОсобоеНаименованиеОписание = ЗначениеЗаполнено(Строка.НаименованиеЗадачи)
		Или ЗначениеЗаполнено(Строка.Описание);
	
КонецПроцедуры

// Обновляет представления строк в дереве участников.
//
// Параметры:
//   Участники - ДанныеФормыДерево - дерево с участниками.
//   ПоПунктам - Булево - действие исполняется по пунктам.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредставленияВДеревеУчастников(Участники, ПоПунктам)
	
	ЭтапыУчастников = Участники.ПолучитьЭлементы();
	
	НомерШагаЭтапа = 1;
	
	Для ИндексЭтапа = 0 По ЭтапыУчастников.Количество() - 1 Цикл
		
		СтрокаЭтапа = ЭтапыУчастников.Получить(ИндексЭтапа);
		
		Если ИндексЭтапа <> 0 Тогда
			НомерШагаЭтапа = НомерШагаЭтапа + 1;
		КонецЕсли;
		
		СтрокиНаименования = Новый Массив;
		Если ПоПунктам Тогда
			СтрокиНаименования.Добавить(СтрокаЭтапа.Номер);
		Иначе
			СтрокиНаименования.Добавить(НомерШагаЭтапа);
		КонецЕсли;
		
		СтрокиНаименования.Добавить(". ");
		СтрокаЭтапа.ПрефиксСтроки = СтрСоединить(СтрокиНаименования);
		
		СтрокиНаименования.Добавить(СтрокаЭтапа.НаименованиеЭтапа);
		СтрокаЭтапа.ПредставлениеСтроки = СтрСоединить(СтрокиНаименования);
		
		УчастникиЭтапа = СтрокаЭтапа.ПолучитьЭлементы();
		
		Для ИндексУчастника = 0 По УчастникиЭтапа.Количество() - 1 Цикл
			
			СтрокаУчастника = УчастникиЭтапа[ИндексУчастника];
			
			СтрокаУчастника.ПрефиксСтроки = "";
			Если ПоПунктам И СтрокаУчастника.Функция = "PerformanceResultProcessor" Тогда
				СтрокаУчастника.ПрефиксСтроки = НСтр("ru = '(Провер.)'") + " ";
			КонецЕсли;
			СтрокаУчастника.ПредставлениеСтроки = ИнтеграцияС1СДокументооборот3КлиентСервер.ПредставлениеУчастника(
				СтрокаУчастника,,
				СтрокаУчастника.ПрефиксСтроки);
			
			УчастникиДочерние = СтрокаУчастника.ПолучитьЭлементы();
			Для ИндексУчастникаДочернего = 0 По УчастникиДочерние.Количество() - 1 Цикл
				
				СтрокаУчастникаДочернего = УчастникиДочерние[ИндексУчастникаДочернего];
				
				СтрокаУчастникаДочернего.ПрефиксСтроки = "";
				СтрокаУчастникаДочернего.ПредставлениеСтроки = ИнтеграцияС1СДокументооборот3КлиентСервер.ПредставлениеУчастника(
					СтрокаУчастникаДочернего);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует объект XDTO для записи в Документообороте по данным из формы действия.
//
// Возвращаемое значение:
//   Строка - строковое представление объекта XDTO типа, наследующего DMAction.
//
&НаСервере
Функция ПодготовитьДействиеДляЗаписи()
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	ДействиеXDTO = ИнтеграцияС1СДокументооборот3.ПодготовитьДействиеДляЗаписи(Прокси, ЭтотОбъект);
	
	ДействиеXDTO.signResolutionsWithDS = ПодписыватьРезолюцииЭП;
	
	Если ЗначениеЗаполнено(Контролер) Тогда
		ДанныеКонтролер = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО(
			КонтролерID,
			КонтролерТип,
			Контролер);
		ДанныеОсновнойОбъектАдресацииКонтролер =
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО(
				ОсновнойОбъектАдресацииКонтролерID,
				ОсновнойОбъектАдресацииКонтролерТип,
				ОсновнойОбъектАдресацииКонтролер);
		ДанныеДополнительныйОбъектАдресацииКонтролер =
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО(
				ДополнительныйОбъектАдресацииКонтролерID,
				ДополнительныйОбъектАдресацииКонтролерТип,
				ДополнительныйОбъектАдресацииКонтролер);
		ДействиеXDTO.controller = ИнтеграцияС1СДокументооборот3.УчастникДействияXDTO(
			Прокси,
			ДанныеКонтролер,
			ДанныеОсновнойОбъектАдресацииКонтролер,
			ДанныеДополнительныйОбъектАдресацииКонтролер);
	КонецЕсли;
	
	ОбновитьОбъектПоДеревуУчастников(Прокси, ДействиеXDTO);
	
	ИнтеграцияС1СДокументооборот3.ЗаполнитьТаблицуУчастниковДействия(ЭтотОбъект.УчастникиПередЗаписью, ДействиеXDTO);
	
	Возврат ИнтеграцияС1СДокументооборотБазоваяФункциональность.ОбъектXDTOВСтроку(Прокси, ДействиеXDTO);
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьДоступностьПолейПоПунктам(ДействиеXDTO)
	
	Элементы.ПроектРезолюции.Видимость = Не ПоПунктам;
	Элементы.ПодписыватьРезолюцииЭП.Видимость = Не ПоПунктам;
	Элементы.УчастникиДобавитьПункт.Видимость = ПоПунктам;
	Элементы.КонтекстДобавитьПункт.Видимость = ПоПунктам;
	Элементы.ЕстьОсобоеНаименованиеОписание.Видимость = Не ПоПунктам;
	
	Если ПоПунктам Тогда
		Элементы.ПредставлениеСтроки.Заголовок = НСтр("ru = 'Пункты, участники'");
	Иначе
		Элементы.ПредставлениеСтроки.Заголовок = НСтр("ru = 'Участники'");
	КонецЕсли;
	
	Элементы.Защищенный.Видимость = Не ПоПунктам;
	Элементы.УчастникиЗащищенный.Видимость = Не ПоПунктам;
	
	// Если задано из настройки, то поменять нельзя.
	// Видим кнопку только если в настройке задано по пунктам.
	Элементы.ИсполнениеПоПунктам.Доступность = Ложь;
	Элементы.ИсполнениеПоПунктам.Видимость = ПоПунктам;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьИзмененияУчастников()
	
	Если ТолькоПросмотр = Истина Тогда
		Возврат;
	КонецЕсли;
	
	РазрешениеОбщее = Неопределено;
	НайденныеРазрешения = Разрешения.НайтиСтроки(
		Новый Структура("ИдентификаторЭтапа", "00000000-0000-0000-0000-000000000000"));
	Если НайденныеРазрешения.Количество() > 0 Тогда
		РазрешениеОбщее = НайденныеРазрешения[0].Разрешение;
	КонецЕсли;
	
	Если РазрешениеОбщее = "Forbidden" Или РазрешениеОбщее = "AllowedToAdd" Тогда
		Элементы.Автор.Доступность = Ложь;
		Элементы.ПодписыватьРезолюцииЭП.Доступность = Ложь;
		Элементы.Контролер.Доступность = Ложь;
		Элементы.ГруппаОписаниеОтложенногоВыполнения.Доступность = Ложь;
	КонецЕсли;
	
	Если РазрешениеОбщее = "AllowedToAdd" Тогда
		МожноТолькоДобавлятьУчастников = Истина;
	КонецЕсли;
	
	ЭтапыУчастников = Участники.ПолучитьЭлементы();
	Для Каждого ЭтапУчастников Из ЭтапыУчастников Цикл
		ЭтапУчастников.Недоступно =
			РазрешениеОбщее = "Forbidden"
			Или МожноТолькоДобавлятьУчастников
			// Завершенные этапы запрещаем редактировать.
			Или (ЭтапУчастников.Функция <> "ReviewingPerson"
				И ЭтапУчастников.Состояние = "Completed"
				И Не ИсполнениеДействияСНовымиУчастниками)
			Или (ЭтапУчастников.Функция = "ReviewingPerson"
				И Не ИзменениеДействияРазрешено
				И Не ИсполнениеДействияСНовымиУчастниками);
		
		УчастникиЭтапа = ЭтапУчастников.ПолучитьЭлементы();
		Для Каждого УчастникЭтапа Из УчастникиЭтапа Цикл
			Если Не ЗначениеЗаполнено(УчастникЭтапа.УчастникID) И МожноТолькоДобавлятьУчастников Тогда
				УчастникЭтапа.Недоступно = Ложь;
			Иначе
				УчастникЭтапа.Недоступно = ЭтапУчастников.Недоступно
					Или УчастникЭтапа.Состояние = "Completed";
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Подключение

// Проверяет подключение к ДО, выводя окно авторизации, если необходимо, и изменяя форму согласно результату.
//
&НаКлиенте
Процедура ПроверитьПодключение()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьПодключениеЗавершение", ЭтотОбъект);
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПроверитьПодключение(
		ОписаниеОповещения,
		ЭтотОбъект,,
		Ложь,
		Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Истина Тогда
		ПриПодключении();
	Иначе // Не удалось подключиться к ДО.
		ОбработатьФормуСогласноВерсииСервиса();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПодключении()
	
	Если ОбработатьФормуСогласноВерсииСервиса() Тогда
		ОбновитьФорму();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьФормуСогласноВерсииСервиса() Экспорт
	
	ВерсияСервиса = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВерсияСервиса();
	
	Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СервисДоступен(ВерсияСервиса) Тогда
		Элементы.ГруппаСтраницыПодключения.ТекущаяСтраница = Элементы.СтраницаДокументооборотНедоступен;
		Возврат Ложь;
	КонецЕсли;
	
	ФормаОбработанаУспешно = Истина;
	
	Попытка
		
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДоступенФункционалВерсииСервиса("3.0.13.29") Тогда
			
			Элементы.ГруппаСтраницыПодключения.ТекущаяСтраница = Элементы.СтраницаДокументооборотДоступен;
			
			НастройкиДокументооборота = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьНастройки();
			ИспользоватьДатуИВремяВСрокахЗадач = НастройкиДокументооборота.ИспользоватьДатуИВремяВСрокахЗадач;
			
		Иначе
			
			Элементы.ГруппаСтраницыПодключения.ТекущаяСтраница = Элементы.СтраницаВерсияНеПоддерживается;
			ФормаОбработанаУспешно = Ложь;
			
		КонецЕсли;
		
	Исключение
		
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.НужноОбработатьФорму(ИнформацияОбОшибке()) Тогда
			ОбработатьФормуСогласноВерсииСервиса();
		КонецЕсли;
		
	КонецПопытки;
	
	Возврат ФормаОбработанаУспешно;
	
КонецФункции

#КонецОбласти

#Область ОбновитьФорму

&НаКлиенте
Процедура ОбновитьФорму(ВыводитьОкноОжидания = Ложь, СкрыватьИнтерфейс = Истина)
	
	Если Не ВыводитьОкноОжидания И Не СкрыватьИнтерфейс Тогда
		Элементы.СтраницаДокументооборотДоступен.Доступность = Ложь;
	КонецЕсли;
	
	Колонки = Новый Массив;
	Если РежимДиалога Тогда
		Колонки.Добавить("dialogueMode");
	КонецЕсли;
	ДлительнаяОперация = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПолучитьОбъектАсинхронно(
		УникальныйИдентификатор,
		Тип,
		ID,
		Колонки);
	ПараметрыОповещения = Новый Структура("ВыводитьОкноОжидания, СкрыватьИнтерфейс",
		ВыводитьОкноОжидания,
		СкрыватьИнтерфейс);
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбновитьФормуЗавершение", ЭтотОбъект, ПараметрыОповещения);
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьЗапросАсинхронно(
		ЭтотОбъект,
		ДлительнаяОперация,
		ОповещениеОЗавершении,
		ВыводитьОкноОжидания,,
		СкрыватьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФормуЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Не ПараметрыОповещения.ВыводитьОкноОжидания И Не ПараметрыОповещения.СкрыватьИнтерфейс Тогда
		Элементы.СтраницаДокументооборотДоступен.Доступность = Истина;
	КонецЕсли;
	
	ОбработатьФорму = Ложь;
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПроверитьОшибкиПриОбновленииФормы(
		ЭтотОбъект,
		Результат,
		ОбработатьФорму);
	Если ОбработатьФорму Тогда
		ОбработатьФормуСогласноВерсииСервиса();
	КонецЕсли;
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОперацияВыполнена(Результат, ОбработатьФорму) Тогда
		ОбновлениеНаСервереЗавершение(Результат.РезультатДлительнойОперации);
		ИнтеграцияС1СДокументооборот3Клиент.ПриОткрытииФормыДействия(ЭтотОбъект);
		ИнтеграцияС1СДокументооборот3Клиент.УстановитьПометкуКнопкиРазныеСрокиДействияРекурсивно(
			Участники.ПолучитьЭлементы(),
			Элементы.УчастникиРазныеСроки);
	ИначеЕсли ОбработатьФорму Тогда
		ОбработатьФормуСогласноВерсииСервиса();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновлениеНаСервереЗавершение(ДействиеXDTOСтрока)
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	ДействиеXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СтрокаВОбъектXDTO(Прокси, ДействиеXDTOСтрока);
	ОбработатьОтветВебСервисаНаПолучениеДействия(ДействиеXDTO);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаписатьОбъект

&НаКлиенте
Процедура ПередЗаписью(Отказ)
	
	Если ПоПунктам Тогда
		ЭлементыЭтапы = Участники.ПолучитьЭлементы();
		Для Каждого ЭлементЭтап Из ЭлементыЭтапы Цикл
			// Не даем сохранить этап, в котором не введено описание.
			Если ЭлементЭтап.НаименованиеЭтапа = БазовоеНаименованиеЭтапа Тогда
				ПоказатьПредупреждение(, СтрШаблон(НСтр("ru = 'Укажите содержание пункта ""%1""'"), ЭлементЭтап.Номер));
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
			// Не даем сохранить этап, в котором отсутствуют участники.
			Если ПунктБезУчастников(ЭлементЭтап) Тогда
				ПоказатьПредупреждение(,
					СтрШаблон(НСтр("ru = 'Заполните участников пункта ""%1""'"), ЭлементЭтап.НаименованиеЭтапа));
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ИсполнениеДействияСНовымиУчастниками
			И Не ИнтеграцияС1СДокументооборот3КлиентСервер.УчастникиДействияИзмененыВКарточке(ЭтотОбъект) Тогда
		ПоказатьПредупреждение(,
			НСтр("ru = 'Новые участники не добавлены.
				|Для запуска нового исполнения добавьте участников.'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть()
	
	Если Не ЗначениеЗаполнено(ID) Или Не ЗначениеЗаполнено(Тип) Тогда
		Закрыть(КодВозвратаДиалога.Отмена);
		Возврат;
	КонецЕсли;
	
	Если Не Модифицированность Тогда
		Если РежимДиалога Тогда
			Закрыть(КодВозвратаДиалога.ОК);
		Иначе
			Закрыть(КодВозвратаДиалога.Отмена);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ДействиеXDTOСтрока = ПодготовитьДействиеДляЗаписи();
	
	Отказ = Ложь;
	ПередЗаписью(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборот3Клиент.ПроверитьУчастниковИЗаписатьДействие(
		ДействиеXDTOСтрока,
		ЭтотОбъект,
		Новый ОписаниеОповещения("ЗаписатьИЗакрытьЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрытьЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	ОбработатьФорму = Ложь;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОперацияВыполнена(Результат, ОбработатьФорму) Тогда
		Модифицированность = Ложь;
		ДанныеОбработки = Новый Структура("ПредметID, ПредметТип", ОсновнойПредметID, ОсновнойПредметТип);
		Оповестить("Документооборот_ДействиеСОбработкой", Новый Структура("ДанныеОбработки", ДанныеОбработки), ЭтотОбъект);
		Закрыть();
	ИначеЕсли ОбработатьФорму Тогда
		ОбработатьФормуСогласноВерсииСервиса();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти